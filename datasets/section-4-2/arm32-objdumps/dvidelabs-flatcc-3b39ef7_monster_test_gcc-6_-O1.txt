
../repos/dvidelabs-flatcc-3b39ef7/test/monster_test/monster_test:     file format elf32-littlearm


Disassembly of section .init:

00012970 <.init>:
   12970:	push	{r3, lr}
   12974:	bl	12ad4 <_start@@Base+0x3c>
   12978:	pop	{r3, pc}

Disassembly of section .plt:

0001297c <strcmp@plt-0x14>:
   1297c:	push	{lr}		; (str lr, [sp, #-4]!)
   12980:	ldr	lr, [pc, #4]	; 1298c <strcmp@plt-0x4>
   12984:	add	lr, pc, lr
   12988:	ldr	pc, [lr, #8]!
   1298c:	andeq	r5, r2, r4, ror r6

00012990 <strcmp@plt>:
   12990:	add	ip, pc, #0, 12
   12994:	add	ip, ip, #151552	; 0x25000
   12998:	ldr	pc, [ip, #1652]!	; 0x674

0001299c <printf@plt>:
   1299c:	add	ip, pc, #0, 12
   129a0:	add	ip, ip, #151552	; 0x25000
   129a4:	ldr	pc, [ip, #1644]!	; 0x66c

000129a8 <free@plt>:
   129a8:	add	ip, pc, #0, 12
   129ac:	add	ip, ip, #151552	; 0x25000
   129b0:	ldr	pc, [ip, #1636]!	; 0x664

000129b4 <memcpy@plt>:
   129b4:	add	ip, pc, #0, 12
   129b8:	add	ip, ip, #151552	; 0x25000
   129bc:	ldr	pc, [ip, #1628]!	; 0x65c

000129c0 <memcmp@plt>:
   129c0:	add	ip, pc, #0, 12
   129c4:	add	ip, ip, #151552	; 0x25000
   129c8:	ldr	pc, [ip, #1620]!	; 0x654

000129cc <realloc@plt>:
   129cc:	add	ip, pc, #0, 12
   129d0:	add	ip, ip, #151552	; 0x25000
   129d4:	ldr	pc, [ip, #1612]!	; 0x64c

000129d8 <fwrite@plt>:
   129d8:	add	ip, pc, #0, 12
   129dc:	add	ip, ip, #151552	; 0x25000
   129e0:	ldr	pc, [ip, #1604]!	; 0x644

000129e4 <gettimeofday@plt>:
   129e4:	add	ip, pc, #0, 12
   129e8:	add	ip, ip, #151552	; 0x25000
   129ec:	ldr	pc, [ip, #1596]!	; 0x63c

000129f0 <puts@plt>:
   129f0:	add	ip, pc, #0, 12
   129f4:	add	ip, ip, #151552	; 0x25000
   129f8:	ldr	pc, [ip, #1588]!	; 0x634

000129fc <malloc@plt>:
   129fc:	add	ip, pc, #0, 12
   12a00:	add	ip, ip, #151552	; 0x25000
   12a04:	ldr	pc, [ip, #1580]!	; 0x62c

00012a08 <__libc_start_main@plt>:
   12a08:	add	ip, pc, #0, 12
   12a0c:	add	ip, ip, #151552	; 0x25000
   12a10:	ldr	pc, [ip, #1572]!	; 0x624

00012a14 <__gmon_start__@plt>:
   12a14:	add	ip, pc, #0, 12
   12a18:	add	ip, ip, #151552	; 0x25000
   12a1c:	ldr	pc, [ip, #1564]!	; 0x61c

00012a20 <strlen@plt>:
   12a20:	add	ip, pc, #0, 12
   12a24:	add	ip, ip, #151552	; 0x25000
   12a28:	ldr	pc, [ip, #1556]!	; 0x614

00012a2c <fprintf@plt>:
   12a2c:	add	ip, pc, #0, 12
   12a30:	add	ip, ip, #151552	; 0x25000
   12a34:	ldr	pc, [ip, #1548]!	; 0x60c

00012a38 <posix_memalign@plt>:
   12a38:	add	ip, pc, #0, 12
   12a3c:	add	ip, ip, #151552	; 0x25000
   12a40:	ldr	pc, [ip, #1540]!	; 0x604

00012a44 <memset@plt>:
   12a44:	add	ip, pc, #0, 12
   12a48:	add	ip, ip, #151552	; 0x25000
   12a4c:	ldr	pc, [ip, #1532]!	; 0x5fc

00012a50 <strncpy@plt>:
   12a50:	add	ip, pc, #0, 12
   12a54:	add	ip, ip, #151552	; 0x25000
   12a58:	ldr	pc, [ip, #1524]!	; 0x5f4

00012a5c <memchr@plt>:
   12a5c:	add	ip, pc, #0, 12
   12a60:	add	ip, ip, #151552	; 0x25000
   12a64:	ldr	pc, [ip, #1516]!	; 0x5ec

00012a68 <fputc@plt>:
   12a68:	add	ip, pc, #0, 12
   12a6c:	add	ip, ip, #151552	; 0x25000
   12a70:	ldr	pc, [ip, #1508]!	; 0x5e4

00012a74 <strncmp@plt>:
   12a74:	add	ip, pc, #0, 12
   12a78:	add	ip, ip, #151552	; 0x25000
   12a7c:	ldr	pc, [ip, #1500]!	; 0x5dc

00012a80 <abort@plt>:
   12a80:	add	ip, pc, #0, 12
   12a84:	add	ip, ip, #151552	; 0x25000
   12a88:	ldr	pc, [ip, #1492]!	; 0x5d4

00012a8c <__assert_fail@plt>:
   12a8c:	add	ip, pc, #0, 12
   12a90:	add	ip, ip, #151552	; 0x25000
   12a94:	ldr	pc, [ip, #1484]!	; 0x5cc

Disassembly of section .text:

00012a98 <_start@@Base>:
   12a98:	mov	fp, #0
   12a9c:	mov	lr, #0
   12aa0:	pop	{r1}		; (ldr r1, [sp], #4)
   12aa4:	mov	r2, sp
   12aa8:	push	{r2}		; (str r2, [sp, #-4]!)
   12aac:	push	{r0}		; (str r0, [sp, #-4]!)
   12ab0:	ldr	ip, [pc, #16]	; 12ac8 <_start@@Base+0x30>
   12ab4:	push	{ip}		; (str ip, [sp, #-4]!)
   12ab8:	ldr	r0, [pc, #12]	; 12acc <_start@@Base+0x34>
   12abc:	ldr	r3, [pc, #12]	; 12ad0 <_start@@Base+0x38>
   12ac0:	bl	12a08 <__libc_start_main@plt>
   12ac4:	bl	12a80 <abort@plt>
   12ac8:	andeq	r3, r2, r0, lsl #13
   12acc:	andeq	sp, r1, r0, asr r7
   12ad0:	andeq	r3, r2, r0, lsr #12
   12ad4:	ldr	r3, [pc, #20]	; 12af0 <_start@@Base+0x58>
   12ad8:	ldr	r2, [pc, #20]	; 12af4 <_start@@Base+0x5c>
   12adc:	add	r3, pc, r3
   12ae0:	ldr	r2, [r3, r2]
   12ae4:	cmp	r2, #0
   12ae8:	bxeq	lr
   12aec:	b	12a14 <__gmon_start__@plt>
   12af0:	andeq	r5, r2, ip, lsl r5
   12af4:	andeq	r0, r0, r4, rrx
   12af8:	ldr	r3, [pc, #28]	; 12b1c <_start@@Base+0x84>
   12afc:	ldr	r0, [pc, #28]	; 12b20 <_start@@Base+0x88>
   12b00:	sub	r3, r3, r0
   12b04:	cmp	r3, #6
   12b08:	bxls	lr
   12b0c:	ldr	r3, [pc, #16]	; 12b24 <_start@@Base+0x8c>
   12b10:	cmp	r3, #0
   12b14:	bxeq	lr
   12b18:	bx	r3
   12b1c:	andeq	r8, r3, r3, ror r0
   12b20:	andeq	r8, r3, r0, ror r0
   12b24:	andeq	r0, r0, r0
   12b28:	ldr	r1, [pc, #36]	; 12b54 <_start@@Base+0xbc>
   12b2c:	ldr	r0, [pc, #36]	; 12b58 <_start@@Base+0xc0>
   12b30:	sub	r1, r1, r0
   12b34:	asr	r1, r1, #2
   12b38:	add	r1, r1, r1, lsr #31
   12b3c:	asrs	r1, r1, #1
   12b40:	bxeq	lr
   12b44:	ldr	r3, [pc, #16]	; 12b5c <_start@@Base+0xc4>
   12b48:	cmp	r3, #0
   12b4c:	bxeq	lr
   12b50:	bx	r3
   12b54:	andeq	r8, r3, r0, ror r0
   12b58:	andeq	r8, r3, r0, ror r0
   12b5c:	andeq	r0, r0, r0
   12b60:	push	{r4, lr}
   12b64:	ldr	r4, [pc, #24]	; 12b84 <_start@@Base+0xec>
   12b68:	ldrb	r3, [r4]
   12b6c:	cmp	r3, #0
   12b70:	popne	{r4, pc}
   12b74:	bl	12af8 <_start@@Base+0x60>
   12b78:	mov	r3, #1
   12b7c:	strb	r3, [r4]
   12b80:	pop	{r4, pc}
   12b84:	andeq	r8, r3, r4, ror r0
   12b88:	ldr	r0, [pc, #40]	; 12bb8 <_start@@Base+0x120>
   12b8c:	ldr	r3, [r0]
   12b90:	cmp	r3, #0
   12b94:	bne	12b9c <_start@@Base+0x104>
   12b98:	b	12b28 <_start@@Base+0x90>
   12b9c:	ldr	r3, [pc, #24]	; 12bbc <_start@@Base+0x124>
   12ba0:	cmp	r3, #0
   12ba4:	beq	12b98 <_start@@Base+0x100>
   12ba8:	push	{r4, lr}
   12bac:	blx	r3
   12bb0:	pop	{r4, lr}
   12bb4:	b	12b28 <_start@@Base+0x90>
   12bb8:	andeq	r7, r3, r4, lsl pc
   12bbc:	andeq	r0, r0, r0
   12bc0:	mov	r0, #0
   12bc4:	bx	lr
   12bc8:	mov	r0, #0
   12bcc:	bx	lr
   12bd0:	push	{r4, r5, lr}
   12bd4:	vpush	{d8-d9}
   12bd8:	sub	sp, sp, #12
   12bdc:	str	r1, [sp, #4]
   12be0:	mov	r4, r2
   12be4:	mov	r5, r3
   12be8:	vsub.f64	d8, d1, d0
   12bec:	mov	r1, r0
   12bf0:	ldr	r0, [pc, #320]	; 12d38 <_start@@Base+0x2a0>
   12bf4:	bl	1299c <printf@plt>
   12bf8:	vmov	r2, r3, d8
   12bfc:	ldr	r0, [pc, #312]	; 12d3c <_start@@Base+0x2a4>
   12c00:	bl	1299c <printf@plt>
   12c04:	mov	r1, r4
   12c08:	ldr	r0, [pc, #304]	; 12d40 <_start@@Base+0x2a8>
   12c0c:	bl	1299c <printf@plt>
   12c10:	ldr	r1, [sp, #4]
   12c14:	ldr	r0, [pc, #296]	; 12d44 <_start@@Base+0x2ac>
   12c18:	bl	1299c <printf@plt>
   12c1c:	vmov	s15, r4
   12c20:	vcvt.f64.s32	d9, s15
   12c24:	vldr	s15, [sp, #4]
   12c28:	vcvt.f64.u32	d7, s15
   12c2c:	vmul.f64	d7, d7, d9
   12c30:	vldr	d5, [pc, #224]	; 12d18 <_start@@Base+0x280>
   12c34:	vdiv.f64	d6, d7, d5
   12c38:	vdiv.f64	d7, d6, d8
   12c3c:	vmov	r2, r3, d7
   12c40:	ldr	r0, [pc, #256]	; 12d48 <_start@@Base+0x2b0>
   12c44:	bl	1299c <printf@plt>
   12c48:	vdiv.f64	d7, d9, d8
   12c4c:	vmov	r2, r3, d7
   12c50:	ldr	r0, [pc, #244]	; 12d4c <_start@@Base+0x2b4>
   12c54:	bl	1299c <printf@plt>
   12c58:	cmp	r5, #0
   12c5c:	cmpne	r4, #1
   12c60:	bne	12cd0 <_start@@Base+0x238>
   12c64:	vldr	d7, [pc, #180]	; 12d20 <_start@@Base+0x288>
   12c68:	vmul.f64	d8, d8, d7
   12c6c:	vdiv.f64	d7, d8, d9
   12c70:	vldr	d6, [pc, #176]	; 12d28 <_start@@Base+0x290>
   12c74:	vcmpe.f64	d7, d6
   12c78:	vmrs	APSR_nzcv, fpscr
   12c7c:	bmi	12cec <_start@@Base+0x254>
   12c80:	vldr	d6, [pc, #144]	; 12d18 <_start@@Base+0x280>
   12c84:	vcmpe.f64	d7, d6
   12c88:	vmrs	APSR_nzcv, fpscr
   12c8c:	bmi	12cfc <_start@@Base+0x264>
   12c90:	vldr	d6, [pc, #136]	; 12d20 <_start@@Base+0x288>
   12c94:	vcmpe.f64	d7, d6
   12c98:	vmrs	APSR_nzcv, fpscr
   12c9c:	vldrmi	d6, [pc, #116]	; 12d18 <_start@@Base+0x280>
   12ca0:	vdivmi.f64	d5, d7, d6
   12ca4:	vmovmi	r2, r3, d5
   12ca8:	ldrmi	r0, [pc, #160]	; 12d50 <_start@@Base+0x2b8>
   12cac:	vldrpl	d6, [pc, #108]	; 12d20 <_start@@Base+0x288>
   12cb0:	vdivpl.f64	d5, d7, d6
   12cb4:	vmovpl	r2, r3, d5
   12cb8:	ldrpl	r0, [pc, #148]	; 12d54 <_start@@Base+0x2bc>
   12cbc:	bl	1299c <printf@plt>
   12cc0:	mov	r0, #0
   12cc4:	add	sp, sp, #12
   12cc8:	vpop	{d8-d9}
   12ccc:	pop	{r4, r5, pc}
   12cd0:	vldr	d7, [pc, #88]	; 12d30 <_start@@Base+0x298>
   12cd4:	vdiv.f64	d6, d7, d8
   12cd8:	vmov	r2, r3, d6
   12cdc:	mov	r1, r5
   12ce0:	ldr	r0, [pc, #112]	; 12d58 <_start@@Base+0x2c0>
   12ce4:	bl	1299c <printf@plt>
   12ce8:	b	12c64 <_start@@Base+0x1cc>
   12cec:	vmov	r2, r3, d7
   12cf0:	ldr	r0, [pc, #100]	; 12d5c <_start@@Base+0x2c4>
   12cf4:	bl	1299c <printf@plt>
   12cf8:	b	12cc0 <_start@@Base+0x228>
   12cfc:	vldr	d6, [pc, #36]	; 12d28 <_start@@Base+0x290>
   12d00:	vdiv.f64	d5, d7, d6
   12d04:	vmov	r2, r3, d5
   12d08:	ldr	r0, [pc, #80]	; 12d60 <_start@@Base+0x2c8>
   12d0c:	bl	1299c <printf@plt>
   12d10:	b	12cc0 <_start@@Base+0x228>
   12d14:	nop			; (mov r0, r0)
   12d18:	andeq	r0, r0, r0
   12d1c:	smlawbmi	lr, r0, r4, r8
   12d20:	andeq	r0, r0, r0
   12d24:	bicmi	ip, sp, r5, ror #26
   12d28:	andeq	r0, r0, r0
   12d2c:	addmi	r4, pc, r0
   12d30:	andeq	r0, r0, r0
   12d34:	svccc	0x00f00000	; IMB
   12d38:	andeq	r3, r2, r0, ror ip
   12d3c:	andeq	r3, r2, r0, lsl #25
   12d40:	muleq	r2, r8, ip
   12d44:	andeq	r3, r2, r8, lsr #25
   12d48:			; <UNDEFINED> instruction: 0x00023cbc
   12d4c:	ldrdeq	r3, [r2], -r4
   12d50:	andeq	r3, r2, ip, asr #26
   12d54:	andeq	r3, r2, r4, ror #26
   12d58:	strdeq	r3, [r2], -r8
   12d5c:	andeq	r3, r2, ip, lsl sp
   12d60:	andeq	r3, r2, r4, lsr sp
   12d64:	cmp	r0, #0
   12d68:	beq	12d98 <_start@@Base+0x300>
   12d6c:	ldr	r3, [r0]
   12d70:	sub	r3, r0, r3
   12d74:	ldrh	r2, [r3]
   12d78:	cmp	r2, #9
   12d7c:	movls	r0, #100	; 0x64
   12d80:	bls	12d94 <_start@@Base+0x2fc>
   12d84:	ldrh	r3, [r3, #8]
   12d88:	cmp	r3, #0
   12d8c:	ldrshne	r0, [r0, r3]
   12d90:	moveq	r0, #100	; 0x64
   12d94:	bx	lr
   12d98:	push	{r4, lr}
   12d9c:	ldr	r3, [pc, #12]	; 12db0 <_start@@Base+0x318>
   12da0:	ldr	r2, [pc, #12]	; 12db4 <_start@@Base+0x31c>
   12da4:	ldr	r1, [pc, #12]	; 12db8 <_start@@Base+0x320>
   12da8:	ldr	r0, [pc, #12]	; 12dbc <_start@@Base+0x324>
   12dac:	bl	12a8c <__assert_fail@plt>
   12db0:	muleq	r2, r0, r6
   12db4:			; <UNDEFINED> instruction: 0x000002b9
   12db8:	andeq	r3, r2, ip, ror sp
   12dbc:	andeq	r3, r2, r0, ror #27
   12dc0:	add	r2, r0, r1, lsl #2
   12dc4:	cmp	r0, #0
   12dc8:	beq	12de8 <_start@@Base+0x350>
   12dcc:	ldr	r3, [r0, #-4]
   12dd0:	cmp	r1, r3
   12dd4:	bcs	12de8 <_start@@Base+0x350>
   12dd8:	ldr	r3, [r0, r1, lsl #2]
   12ddc:	add	r3, r3, #4
   12de0:	add	r0, r2, r3
   12de4:	bx	lr
   12de8:	push	{r4, lr}
   12dec:	ldr	r3, [pc, #12]	; 12e00 <_start@@Base+0x368>
   12df0:	mov	r2, #108	; 0x6c
   12df4:	ldr	r1, [pc, #8]	; 12e04 <_start@@Base+0x36c>
   12df8:	ldr	r0, [pc, #8]	; 12e08 <_start@@Base+0x370>
   12dfc:	bl	12a8c <__assert_fail@plt>
   12e00:	andeq	r3, r2, ip, lsr #13
   12e04:	andeq	r3, r2, r8, lsl #28
   12e08:	andeq	r3, r2, r0, ror lr
   12e0c:	add	r3, r0, r1, lsl #2
   12e10:	cmp	r0, #0
   12e14:	beq	12e30 <_start@@Base+0x398>
   12e18:	ldr	r2, [r0, #-4]
   12e1c:	cmp	r1, r2
   12e20:	bcs	12e30 <_start@@Base+0x398>
   12e24:	ldr	r0, [r0, r1, lsl #2]
   12e28:	add	r0, r3, r0
   12e2c:	bx	lr
   12e30:	push	{r4, lr}
   12e34:	ldr	r3, [pc, #12]	; 12e48 <_start@@Base+0x3b0>
   12e38:	ldr	r2, [pc, #12]	; 12e4c <_start@@Base+0x3b4>
   12e3c:	ldr	r1, [pc, #12]	; 12e50 <_start@@Base+0x3b8>
   12e40:	ldr	r0, [pc, #12]	; 12e54 <_start@@Base+0x3bc>
   12e44:	bl	12a8c <__assert_fail@plt>
   12e48:	andeq	r3, r2, r8, asr #13
   12e4c:			; <UNDEFINED> instruction: 0x000002b5
   12e50:	andeq	r3, r2, ip, ror sp
   12e54:	andeq	r3, r2, r0, ror lr
   12e58:	cmp	r0, #0
   12e5c:	beq	12e8c <_start@@Base+0x3f4>
   12e60:	ldr	r3, [r0]
   12e64:	sub	r3, r0, r3
   12e68:	ldrh	r2, [r3]
   12e6c:	cmp	r2, #19
   12e70:	movls	r0, #0
   12e74:	bls	12e88 <_start@@Base+0x3f0>
   12e78:	ldrh	r3, [r3, #18]
   12e7c:	cmp	r3, #0
   12e80:	ldrbne	r0, [r0, r3]
   12e84:	moveq	r0, #0
   12e88:	bx	lr
   12e8c:	push	{r4, lr}
   12e90:	ldr	r3, [pc, #12]	; 12ea4 <_start@@Base+0x40c>
   12e94:	ldr	r2, [pc, #12]	; 12ea8 <_start@@Base+0x410>
   12e98:	ldr	r1, [pc, #12]	; 12eac <_start@@Base+0x414>
   12e9c:	ldr	r0, [pc, #12]	; 12eb0 <_start@@Base+0x418>
   12ea0:	bl	12a8c <__assert_fail@plt>
   12ea4:	andeq	r3, r2, r8, ror #13
   12ea8:	andeq	r0, r0, sp, asr #5
   12eac:	andeq	r3, r2, ip, ror sp
   12eb0:	andeq	r3, r2, r0, ror #27
   12eb4:	cmp	r0, #0
   12eb8:	beq	12ef0 <_start@@Base+0x458>
   12ebc:	ldr	r3, [r0]
   12ec0:	sub	r3, r0, r3
   12ec4:	ldrh	r2, [r3]
   12ec8:	cmp	r2, #21
   12ecc:	movls	r0, #0
   12ed0:	bls	12eec <_start@@Base+0x454>
   12ed4:	ldrh	r2, [r3, #20]
   12ed8:	cmp	r2, #0
   12edc:	addne	r3, r0, r2
   12ee0:	ldrne	r0, [r0, r2]
   12ee4:	addne	r0, r3, r0
   12ee8:	moveq	r0, #0
   12eec:	bx	lr
   12ef0:	push	{r4, lr}
   12ef4:	ldr	r3, [pc, #12]	; 12f08 <_start@@Base+0x470>
   12ef8:	ldr	r2, [pc, #12]	; 12f0c <_start@@Base+0x474>
   12efc:	ldr	r1, [pc, #12]	; 12f10 <_start@@Base+0x478>
   12f00:	ldr	r0, [pc, #12]	; 12f14 <_start@@Base+0x47c>
   12f04:	bl	12a8c <__assert_fail@plt>
   12f08:	andeq	r3, r2, ip, lsl #14
   12f0c:	andeq	r0, r0, sp, asr #5
   12f10:	andeq	r3, r2, ip, ror sp
   12f14:	andeq	r3, r2, r0, ror #27
   12f18:	push	{r4, lr}
   12f1c:	cmp	r0, #0
   12f20:	beq	12f58 <_start@@Base+0x4c0>
   12f24:	ldr	r3, [r0]
   12f28:	sub	r3, r0, r3
   12f2c:	ldrh	r2, [r3]
   12f30:	cmp	r2, #11
   12f34:	bls	12f6c <_start@@Base+0x4d4>
   12f38:	ldrh	r2, [r3, #10]
   12f3c:	cmp	r2, #0
   12f40:	beq	12f6c <_start@@Base+0x4d4>
   12f44:	add	r3, r0, r2
   12f48:	ldr	r0, [r0, r2]
   12f4c:	add	r0, r0, #4
   12f50:	add	r0, r3, r0
   12f54:	pop	{r4, pc}
   12f58:	ldr	r3, [pc, #32]	; 12f80 <_start@@Base+0x4e8>
   12f5c:	ldr	r2, [pc, #32]	; 12f84 <_start@@Base+0x4ec>
   12f60:	ldr	r1, [pc, #32]	; 12f88 <_start@@Base+0x4f0>
   12f64:	ldr	r0, [pc, #32]	; 12f8c <_start@@Base+0x4f4>
   12f68:	bl	12a8c <__assert_fail@plt>
   12f6c:	ldr	r3, [pc, #12]	; 12f80 <_start@@Base+0x4e8>
   12f70:	ldr	r2, [pc, #12]	; 12f84 <_start@@Base+0x4ec>
   12f74:	ldr	r1, [pc, #12]	; 12f88 <_start@@Base+0x4f0>
   12f78:	ldr	r0, [pc, #16]	; 12f90 <_start@@Base+0x4f8>
   12f7c:	bl	12a8c <__assert_fail@plt>
   12f80:	andeq	r3, r2, r8, lsr #14
   12f84:			; <UNDEFINED> instruction: 0x000002bb
   12f88:	andeq	r3, r2, ip, ror sp
   12f8c:	andeq	r3, r2, r0, ror #27
   12f90:	andeq	r3, r2, r8, lsr #29
   12f94:	add	r3, r0, r1, lsl #2
   12f98:	cmp	r0, #0
   12f9c:	beq	12fb8 <_start@@Base+0x520>
   12fa0:	ldr	r2, [r0, #-4]
   12fa4:	cmp	r1, r2
   12fa8:	bcs	12fb8 <_start@@Base+0x520>
   12fac:	ldr	r0, [r0, r1, lsl #2]
   12fb0:	add	r0, r3, r0
   12fb4:	bx	lr
   12fb8:	push	{r4, lr}
   12fbc:	ldr	r3, [pc, #12]	; 12fd0 <_start@@Base+0x538>
   12fc0:	mov	r2, #117	; 0x75
   12fc4:	ldr	r1, [pc, #8]	; 12fd4 <_start@@Base+0x53c>
   12fc8:	ldr	r0, [pc, #8]	; 12fd8 <_start@@Base+0x540>
   12fcc:	bl	12a8c <__assert_fail@plt>
   12fd0:	andeq	r3, r2, r4, asr #14
   12fd4:	andeq	r3, r2, r8, lsl #28
   12fd8:	andeq	r3, r2, r0, ror lr
   12fdc:	cmp	r0, #0
   12fe0:	beq	12ff8 <_start@@Base+0x560>
   12fe4:	ldr	r3, [r0, #-4]
   12fe8:	cmp	r1, r3
   12fec:	bcs	12ff8 <_start@@Base+0x560>
   12ff0:	ldrb	r0, [r0, r1]
   12ff4:	bx	lr
   12ff8:	push	{r4, lr}
   12ffc:	ldr	r3, [pc, #12]	; 13010 <_start@@Base+0x578>
   13000:	ldr	r2, [pc, #12]	; 13014 <_start@@Base+0x57c>
   13004:	ldr	r1, [pc, #12]	; 13018 <_start@@Base+0x580>
   13008:	ldr	r0, [pc, #12]	; 1301c <_start@@Base+0x584>
   1300c:	bl	12a8c <__assert_fail@plt>
   13010:	andeq	r3, r2, r0, ror #14
   13014:	muleq	r0, r5, r1
   13018:	andeq	r3, r2, r8, lsl #28
   1301c:	andeq	r3, r2, r0, ror lr
   13020:	cmp	r0, #0
   13024:	bne	13040 <_start@@Base+0x5a8>
   13028:	push	{r4, lr}
   1302c:	ldr	r3, [pc, #56]	; 1306c <_start@@Base+0x5d4>
   13030:	ldr	r2, [pc, #56]	; 13070 <_start@@Base+0x5d8>
   13034:	ldr	r1, [pc, #56]	; 13074 <_start@@Base+0x5dc>
   13038:	ldr	r0, [pc, #56]	; 13078 <_start@@Base+0x5e0>
   1303c:	bl	12a8c <__assert_fail@plt>
   13040:	ldr	r3, [r0]
   13044:	sub	r3, r0, r3
   13048:	ldrh	r2, [r3]
   1304c:	cmp	r2, #13
   13050:	movls	r0, #0
   13054:	bls	13068 <_start@@Base+0x5d0>
   13058:	ldrh	r3, [r3, #12]
   1305c:	cmp	r3, #0
   13060:	ldrbne	r0, [r0, r3]
   13064:	moveq	r0, #0
   13068:	bx	lr
   1306c:	andeq	r3, r2, r0, lsl #15
   13070:	andeq	r0, r0, r5, lsr r3
   13074:	andeq	r3, r2, ip, ror sp
   13078:	andeq	r3, r2, r0, ror #27
   1307c:	cmp	r0, #0
   13080:	bne	1309c <_start@@Base+0x604>
   13084:	push	{r4, lr}
   13088:	ldr	r3, [pc, #64]	; 130d0 <_start@@Base+0x638>
   1308c:	ldr	r2, [pc, #64]	; 130d4 <_start@@Base+0x63c>
   13090:	ldr	r1, [pc, #64]	; 130d8 <_start@@Base+0x640>
   13094:	ldr	r0, [pc, #64]	; 130dc <_start@@Base+0x644>
   13098:	bl	12a8c <__assert_fail@plt>
   1309c:	ldr	r3, [r0]
   130a0:	sub	r3, r0, r3
   130a4:	ldrh	r2, [r3]
   130a8:	cmp	r2, #15
   130ac:	movls	r0, #0
   130b0:	bls	130cc <_start@@Base+0x634>
   130b4:	ldrh	r2, [r3, #14]
   130b8:	cmp	r2, #0
   130bc:	addne	r3, r0, r2
   130c0:	ldrne	r0, [r0, r2]
   130c4:	addne	r0, r3, r0
   130c8:	moveq	r0, #0
   130cc:	bx	lr
   130d0:	andeq	r3, r2, r0, lsr #15
   130d4:	andeq	r0, r0, r5, lsr r3
   130d8:	andeq	r3, r2, ip, ror sp
   130dc:	andeq	r3, r2, r0, ror #27
   130e0:	cmp	r0, #0
   130e4:	bne	13100 <_start@@Base+0x668>
   130e8:	push	{r4, lr}
   130ec:	ldr	r3, [pc, #56]	; 1312c <_start@@Base+0x694>
   130f0:	ldr	r2, [pc, #56]	; 13130 <_start@@Base+0x698>
   130f4:	ldr	r1, [pc, #56]	; 13134 <_start@@Base+0x69c>
   130f8:	ldr	r0, [pc, #56]	; 13138 <_start@@Base+0x6a0>
   130fc:	bl	12a8c <__assert_fail@plt>
   13100:	ldr	r3, [r0]
   13104:	sub	r3, r0, r3
   13108:	ldrh	r2, [r3]
   1310c:	cmp	r2, #5
   13110:	movls	r0, #0
   13114:	bls	13128 <_start@@Base+0x690>
   13118:	ldrh	r3, [r3, #4]
   1311c:	cmp	r3, #0
   13120:	ldrne	r0, [r0, r3]
   13124:	moveq	r0, #0
   13128:	bx	lr
   1312c:			; <UNDEFINED> instruction: 0x000237b8
   13130:	andeq	r0, r0, r2, lsl #6
   13134:	andeq	r3, r2, ip, ror sp
   13138:	andeq	r3, r2, r0, ror #27
   1313c:	cmp	r0, #0
   13140:	bne	1315c <_start@@Base+0x6c4>
   13144:	push	{r4, lr}
   13148:	ldr	r3, [pc, #68]	; 13194 <_start@@Base+0x6fc>
   1314c:	ldr	r2, [pc, #68]	; 13198 <_start@@Base+0x700>
   13150:	ldr	r1, [pc, #68]	; 1319c <_start@@Base+0x704>
   13154:	ldr	r0, [pc, #68]	; 131a0 <_start@@Base+0x708>
   13158:	bl	12a8c <__assert_fail@plt>
   1315c:	ldr	r3, [r0]
   13160:	sub	r3, r0, r3
   13164:	ldrh	r2, [r3]
   13168:	cmp	r2, #21
   1316c:	movls	r0, #0
   13170:	bls	13190 <_start@@Base+0x6f8>
   13174:	ldrh	r2, [r3, #20]
   13178:	cmp	r2, #0
   1317c:	addne	r3, r0, r2
   13180:	ldrne	r0, [r0, r2]
   13184:	addne	r0, r0, #4
   13188:	addne	r0, r3, r0
   1318c:	moveq	r0, #0
   13190:	bx	lr
   13194:	andeq	r3, r2, r0, ror #15
   13198:	andeq	r0, r0, r7, lsr r3
   1319c:	andeq	r3, r2, ip, ror sp
   131a0:	andeq	r3, r2, r0, ror #27
   131a4:	push	{r4, r5, lr}
   131a8:	sub	sp, sp, #12
   131ac:	mov	r4, r0
   131b0:	add	r0, sp, #8
   131b4:	stmdb	r0, {r1, r2}
   131b8:	ldr	r2, [sp]
   131bc:	cmp	r2, #0
   131c0:	beq	131d0 <_start@@Base+0x738>
   131c4:	ldr	r1, [r2, #-4]
   131c8:	cmp	r3, r1
   131cc:	bcc	131e4 <_start@@Base+0x74c>
   131d0:	ldr	r3, [pc, #68]	; 1321c <_start@@Base+0x784>
   131d4:	ldr	r2, [pc, #68]	; 13220 <_start@@Base+0x788>
   131d8:	ldr	r1, [pc, #68]	; 13224 <_start@@Base+0x78c>
   131dc:	ldr	r0, [pc, #68]	; 13228 <_start@@Base+0x790>
   131e0:	bl	12a8c <__assert_fail@plt>
   131e4:	ldrb	r5, [r2, r3]
   131e8:	cmp	r5, #0
   131ec:	moveq	r3, #0
   131f0:	strbeq	r3, [r4]
   131f4:	streq	r3, [r4, #4]
   131f8:	beq	13210 <_start@@Base+0x778>
   131fc:	mov	r1, r3
   13200:	ldr	r0, [sp, #4]
   13204:	bl	12f94 <_start@@Base+0x4fc>
   13208:	strb	r5, [r4]
   1320c:	str	r0, [r4, #4]
   13210:	mov	r0, r4
   13214:	add	sp, sp, #12
   13218:	pop	{r4, r5, pc}
   1321c:	andeq	r3, r2, r0, lsl #16
   13220:	andeq	r0, r0, r5, lsl #6
   13224:	andeq	r3, r2, ip, ror sp
   13228:	andeq	r3, r2, ip, asr #29
   1322c:	push	{r4, lr}
   13230:	mov	r3, #4
   13234:	mov	r2, r3
   13238:	mov	r1, #0
   1323c:	bl	2235c <flatcc_verify_field@@Base>
   13240:	pop	{r4, pc}
   13244:	push	{r4, lr}
   13248:	mov	r4, r0
   1324c:	mov	r3, #8
   13250:	mov	r2, r3
   13254:	mov	r1, #0
   13258:	bl	2235c <flatcc_verify_field@@Base>
   1325c:	cmp	r0, #0
   13260:	popne	{r4, pc}
   13264:	mov	r3, #4
   13268:	mov	r2, r3
   1326c:	mov	r1, #1
   13270:	mov	r0, r4
   13274:	bl	2235c <flatcc_verify_field@@Base>
   13278:	pop	{r4, pc}
   1327c:	push	{r4, lr}
   13280:	mov	r4, r0
   13284:	mov	r3, #8
   13288:	mov	r2, r3
   1328c:	mov	r1, #0
   13290:	bl	2235c <flatcc_verify_field@@Base>
   13294:	cmp	r0, #0
   13298:	popne	{r4, pc}
   1329c:	mov	r3, #4
   132a0:	mov	r2, r3
   132a4:	mov	r1, #1
   132a8:	mov	r0, r4
   132ac:	bl	2235c <flatcc_verify_field@@Base>
   132b0:	pop	{r4, pc}
   132b4:	push	{r4, lr}
   132b8:	mov	r4, r0
   132bc:	mov	r3, #1
   132c0:	mov	r2, r3
   132c4:	mov	r1, #0
   132c8:	bl	2235c <flatcc_verify_field@@Base>
   132cc:	cmp	r0, #0
   132d0:	popne	{r4, pc}
   132d4:	mov	r3, #1
   132d8:	mov	r2, r3
   132dc:	mov	r1, r3
   132e0:	mov	r0, r4
   132e4:	bl	2235c <flatcc_verify_field@@Base>
   132e8:	cmp	r0, #0
   132ec:	popne	{r4, pc}
   132f0:	mov	r3, #1
   132f4:	mov	r2, r3
   132f8:	mov	r1, #2
   132fc:	mov	r0, r4
   13300:	bl	2235c <flatcc_verify_field@@Base>
   13304:	cmp	r0, #0
   13308:	popne	{r4, pc}
   1330c:	mov	r3, #1
   13310:	mov	r2, r3
   13314:	mov	r1, #3
   13318:	mov	r0, r4
   1331c:	bl	2235c <flatcc_verify_field@@Base>
   13320:	pop	{r4, pc}
   13324:	push	{r4, lr}
   13328:	mov	r3, #1
   1332c:	mov	r2, #0
   13330:	mov	r1, r2
   13334:	bl	2235c <flatcc_verify_field@@Base>
   13338:	pop	{r4, pc}
   1333c:	push	{r4, lr}
   13340:	sub	sp, sp, #8
   13344:	mov	r4, r0
   13348:	mov	r3, #1
   1334c:	mov	r2, r3
   13350:	mov	r1, #0
   13354:	bl	2235c <flatcc_verify_field@@Base>
   13358:	cmp	r0, #0
   1335c:	beq	13368 <_start@@Base+0x8d0>
   13360:	add	sp, sp, #8
   13364:	pop	{r4, pc}
   13368:	mov	r3, #1
   1336c:	mov	r2, r3
   13370:	mov	r1, r3
   13374:	mov	r0, r4
   13378:	bl	2235c <flatcc_verify_field@@Base>
   1337c:	cmp	r0, #0
   13380:	bne	13360 <_start@@Base+0x8c8>
   13384:	mov	r3, #2
   13388:	mov	r2, r3
   1338c:	mov	r1, r3
   13390:	mov	r0, r4
   13394:	bl	2235c <flatcc_verify_field@@Base>
   13398:	cmp	r0, #0
   1339c:	bne	13360 <_start@@Base+0x8c8>
   133a0:	mov	r3, #2
   133a4:	mov	r2, r3
   133a8:	mov	r1, #3
   133ac:	mov	r0, r4
   133b0:	bl	2235c <flatcc_verify_field@@Base>
   133b4:	cmp	r0, #0
   133b8:	bne	13360 <_start@@Base+0x8c8>
   133bc:	mov	r3, #4
   133c0:	mov	r2, r3
   133c4:	mov	r1, r3
   133c8:	mov	r0, r4
   133cc:	bl	2235c <flatcc_verify_field@@Base>
   133d0:	cmp	r0, #0
   133d4:	bne	13360 <_start@@Base+0x8c8>
   133d8:	mov	r3, #4
   133dc:	mov	r2, r3
   133e0:	mov	r1, #5
   133e4:	mov	r0, r4
   133e8:	bl	2235c <flatcc_verify_field@@Base>
   133ec:	cmp	r0, #0
   133f0:	bne	13360 <_start@@Base+0x8c8>
   133f4:	mov	r3, #8
   133f8:	mov	r2, r3
   133fc:	mov	r1, #6
   13400:	mov	r0, r4
   13404:	bl	2235c <flatcc_verify_field@@Base>
   13408:	cmp	r0, #0
   1340c:	bne	13360 <_start@@Base+0x8c8>
   13410:	mov	r3, #8
   13414:	mov	r2, r3
   13418:	mov	r1, #7
   1341c:	mov	r0, r4
   13420:	bl	2235c <flatcc_verify_field@@Base>
   13424:	cmp	r0, #0
   13428:	bne	13360 <_start@@Base+0x8c8>
   1342c:	mov	r3, #4
   13430:	mov	r2, r3
   13434:	mov	r1, #8
   13438:	mov	r0, r4
   1343c:	bl	2235c <flatcc_verify_field@@Base>
   13440:	cmp	r0, #0
   13444:	bne	13360 <_start@@Base+0x8c8>
   13448:	mov	r3, #8
   1344c:	mov	r2, r3
   13450:	mov	r1, #9
   13454:	mov	r0, r4
   13458:	bl	2235c <flatcc_verify_field@@Base>
   1345c:	cmp	r0, #0
   13460:	bne	13360 <_start@@Base+0x8c8>
   13464:	mvn	r3, #0
   13468:	str	r3, [sp, #4]
   1346c:	mov	r3, #1
   13470:	str	r3, [sp]
   13474:	mov	r2, #0
   13478:	mov	r1, #10
   1347c:	mov	r0, r4
   13480:	bl	22468 <flatcc_verify_vector_field@@Base>
   13484:	cmp	r0, #0
   13488:	bne	13360 <_start@@Base+0x8c8>
   1348c:	mvn	r3, #-536870912	; 0xe0000000
   13490:	str	r3, [sp, #4]
   13494:	mov	r3, #8
   13498:	str	r3, [sp]
   1349c:	mov	r2, #0
   134a0:	mov	r1, #11
   134a4:	mov	r0, r4
   134a8:	bl	22468 <flatcc_verify_vector_field@@Base>
   134ac:	b	13360 <_start@@Base+0x8c8>
   134b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   134b4:	sub	sp, sp, #28
   134b8:	mov	r7, r1
   134bc:	mov	r8, r2
   134c0:	mov	r6, r3
   134c4:	subs	r2, r0, #0
   134c8:	beq	134d8 <_start@@Base+0xa40>
   134cc:	ldr	r1, [pc, #264]	; 135dc <_start@@Base+0xb44>
   134d0:	mov	r0, r3
   134d4:	bl	12a2c <fprintf@plt>
   134d8:	cmp	r8, #0
   134dc:	beq	135c4 <_start@@Base+0xb2c>
   134e0:	sub	r7, r7, #1
   134e4:	mov	r4, #0
   134e8:	ldr	fp, [pc, #240]	; 135e0 <_start@@Base+0xb48>
   134ec:	ldr	r9, [pc, #240]	; 135e4 <_start@@Base+0xb4c>
   134f0:	mov	sl, #46	; 0x2e
   134f4:	b	13554 <_start@@Base+0xabc>
   134f8:	mov	r2, r4
   134fc:	mov	r1, fp
   13500:	mov	r0, r6
   13504:	bl	12a2c <fprintf@plt>
   13508:	ldrb	r2, [r7, #1]
   1350c:	mov	r1, r9
   13510:	mov	r0, r6
   13514:	bl	12a2c <fprintf@plt>
   13518:	ldrb	r2, [r7, #1]!
   1351c:	sub	r3, r2, #32
   13520:	uxtb	r3, r3
   13524:	cmp	r3, #94	; 0x5e
   13528:	add	r3, sp, #24
   1352c:	add	r3, r3, r5
   13530:	strbhi	sl, [r3, #-20]	; 0xffffffec
   13534:	strbls	r2, [r3, #-20]	; 0xffffffec
   13538:	add	r3, sp, #24
   1353c:	add	r5, r3, r5
   13540:	mov	r3, #0
   13544:	strb	r3, [r5, #-19]	; 0xffffffed
   13548:	add	r4, r4, #1
   1354c:	cmp	r8, r4
   13550:	beq	13590 <_start@@Base+0xaf8>
   13554:	ands	r5, r4, #15
   13558:	bne	13578 <_start@@Base+0xae0>
   1355c:	cmp	r4, #0
   13560:	beq	134f8 <_start@@Base+0xa60>
   13564:	add	r2, sp, #4
   13568:	ldr	r1, [pc, #120]	; 135e8 <_start@@Base+0xb50>
   1356c:	mov	r0, r6
   13570:	bl	12a2c <fprintf@plt>
   13574:	b	134f8 <_start@@Base+0xa60>
   13578:	tst	r4, #7
   1357c:	bne	13508 <_start@@Base+0xa70>
   13580:	mov	r1, r6
   13584:	mov	r0, #32
   13588:	bl	12a68 <fputc@plt>
   1358c:	b	13508 <_start@@Base+0xa70>
   13590:	tst	r4, #15
   13594:	beq	135c4 <_start@@Base+0xb2c>
   13598:	ldr	r8, [pc, #76]	; 135ec <_start@@Base+0xb54>
   1359c:	mov	r7, #3
   135a0:	mov	r5, #1
   135a4:	mov	r3, r6
   135a8:	mov	r2, r7
   135ac:	mov	r1, r5
   135b0:	mov	r0, r8
   135b4:	bl	129d8 <fwrite@plt>
   135b8:	add	r4, r4, #1
   135bc:	tst	r4, #15
   135c0:	bne	135a4 <_start@@Base+0xb0c>
   135c4:	add	r2, sp, #4
   135c8:	ldr	r1, [pc, #24]	; 135e8 <_start@@Base+0xb50>
   135cc:	mov	r0, r6
   135d0:	bl	12a2c <fprintf@plt>
   135d4:	add	sp, sp, #28
   135d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   135dc:	andeq	r3, r2, ip, ror #29
   135e0:	strdeq	r3, [r2], -ip
   135e4:	andeq	r3, r2, r4, lsl #30
   135e8:	strdeq	r3, [r2], -r4
   135ec:	andeq	r3, r2, ip, lsl #30
   135f0:	push	{r4, r5, r6, lr}
   135f4:	mov	r4, r0
   135f8:	bl	2108c <flatcc_builder_create_string_str@@Base>
   135fc:	subs	r5, r0, #0
   13600:	beq	13624 <_start@@Base+0xb8c>
   13604:	mov	r1, #3
   13608:	mov	r0, r4
   1360c:	bl	213cc <flatcc_builder_table_add_offset@@Base>
   13610:	cmp	r0, #0
   13614:	beq	1362c <_start@@Base+0xb94>
   13618:	str	r5, [r0]
   1361c:	mov	r0, #0
   13620:	pop	{r4, r5, r6, pc}
   13624:	mvn	r0, #0
   13628:	pop	{r4, r5, r6, pc}
   1362c:	mvn	r0, #0
   13630:	pop	{r4, r5, r6, pc}
   13634:	push	{r4, lr}
   13638:	mov	r4, r0
   1363c:	mov	r2, #0
   13640:	mov	r1, r2
   13644:	bl	223d4 <flatcc_verify_string_field@@Base>
   13648:	cmp	r0, #0
   1364c:	popne	{r4, pc}
   13650:	mov	r3, #8
   13654:	mov	r2, r3
   13658:	mov	r1, #1
   1365c:	mov	r0, r4
   13660:	bl	2235c <flatcc_verify_field@@Base>
   13664:	cmp	r0, #0
   13668:	popne	{r4, pc}
   1366c:	mov	r3, #2
   13670:	mov	r2, r3
   13674:	mov	r1, r3
   13678:	mov	r0, r4
   1367c:	bl	2235c <flatcc_verify_field@@Base>
   13680:	pop	{r4, pc}
   13684:	push	{r4, lr}
   13688:	mov	r4, r0
   1368c:	mov	r2, #0
   13690:	mov	r1, r2
   13694:	bl	223d4 <flatcc_verify_string_field@@Base>
   13698:	cmp	r0, #0
   1369c:	popne	{r4, pc}
   136a0:	mov	r3, #4
   136a4:	mov	r2, r3
   136a8:	mov	r1, #1
   136ac:	mov	r0, r4
   136b0:	bl	2235c <flatcc_verify_field@@Base>
   136b4:	cmp	r0, #0
   136b8:	popne	{r4, pc}
   136bc:	mov	r2, #0
   136c0:	mov	r1, #2
   136c4:	mov	r0, r4
   136c8:	bl	223d4 <flatcc_verify_string_field@@Base>
   136cc:	cmp	r0, #0
   136d0:	popne	{r4, pc}
   136d4:	mov	r3, #8
   136d8:	mov	r2, r3
   136dc:	mov	r1, #3
   136e0:	mov	r0, r4
   136e4:	bl	2235c <flatcc_verify_field@@Base>
   136e8:	cmp	r0, #0
   136ec:	popne	{r4, pc}
   136f0:	mov	r2, #0
   136f4:	mov	r1, #4
   136f8:	mov	r0, r4
   136fc:	bl	223d4 <flatcc_verify_string_field@@Base>
   13700:	cmp	r0, #0
   13704:	popne	{r4, pc}
   13708:	mov	r3, #8
   1370c:	mov	r2, r3
   13710:	mov	r1, #5
   13714:	mov	r0, r4
   13718:	bl	2235c <flatcc_verify_field@@Base>
   1371c:	cmp	r0, #0
   13720:	popne	{r4, pc}
   13724:	mov	r3, #4
   13728:	mov	r2, r3
   1372c:	mov	r1, #6
   13730:	mov	r0, r4
   13734:	bl	2235c <flatcc_verify_field@@Base>
   13738:	cmp	r0, #0
   1373c:	popne	{r4, pc}
   13740:	mov	r3, #8
   13744:	mov	r2, r3
   13748:	mov	r1, #7
   1374c:	mov	r0, r4
   13750:	bl	2235c <flatcc_verify_field@@Base>
   13754:	cmp	r0, #0
   13758:	popne	{r4, pc}
   1375c:	mov	r3, #4
   13760:	mov	r2, r3
   13764:	mov	r1, #8
   13768:	mov	r0, r4
   1376c:	bl	2235c <flatcc_verify_field@@Base>
   13770:	pop	{r4, pc}
   13774:	push	{r4, lr}
   13778:	mov	r4, r0
   1377c:	ldr	r3, [pc, #68]	; 137c8 <_start@@Base+0xd30>
   13780:	mov	r2, #0
   13784:	mov	r1, r2
   13788:	bl	22660 <flatcc_verify_table_field@@Base>
   1378c:	cmp	r0, #0
   13790:	popne	{r4, pc}
   13794:	ldr	r3, [pc, #48]	; 137cc <_start@@Base+0xd34>
   13798:	mov	r2, #0
   1379c:	mov	r1, #1
   137a0:	mov	r0, r4
   137a4:	bl	22660 <flatcc_verify_table_field@@Base>
   137a8:	cmp	r0, #0
   137ac:	popne	{r4, pc}
   137b0:	ldr	r3, [pc, #24]	; 137d0 <_start@@Base+0xd38>
   137b4:	mov	r2, #0
   137b8:	mov	r1, #2
   137bc:	mov	r0, r4
   137c0:	bl	22660 <flatcc_verify_table_field@@Base>
   137c4:	pop	{r4, pc}
   137c8:	andeq	r3, r1, r4, lsl #13
   137cc:	andeq	r3, r1, ip, ror r2
   137d0:	andeq	r3, r1, r4, asr #4
   137d4:	push	{r4, lr}
   137d8:	sub	sp, sp, #8
   137dc:	mov	r4, r0
   137e0:	mov	r3, #16
   137e4:	mov	r2, #32
   137e8:	mov	r1, #0
   137ec:	bl	2235c <flatcc_verify_field@@Base>
   137f0:	cmp	r0, #0
   137f4:	beq	13800 <_start@@Base+0xd68>
   137f8:	add	sp, sp, #8
   137fc:	pop	{r4, pc}
   13800:	mov	r3, #2
   13804:	mov	r2, r3
   13808:	mov	r1, r3
   1380c:	mov	r0, r4
   13810:	bl	2235c <flatcc_verify_field@@Base>
   13814:	cmp	r0, #0
   13818:	bne	137f8 <_start@@Base+0xd60>
   1381c:	mov	r3, #2
   13820:	mov	r2, r3
   13824:	mov	r1, #1
   13828:	mov	r0, r4
   1382c:	bl	2235c <flatcc_verify_field@@Base>
   13830:	cmp	r0, #0
   13834:	bne	137f8 <_start@@Base+0xd60>
   13838:	mov	r2, #1
   1383c:	mov	r1, #3
   13840:	mov	r0, r4
   13844:	bl	223d4 <flatcc_verify_string_field@@Base>
   13848:	cmp	r0, #0
   1384c:	bne	137f8 <_start@@Base+0xd60>
   13850:	mov	r3, #1
   13854:	mov	r2, r3
   13858:	mov	r1, #6
   1385c:	mov	r0, r4
   13860:	bl	2235c <flatcc_verify_field@@Base>
   13864:	cmp	r0, #0
   13868:	bne	137f8 <_start@@Base+0xd60>
   1386c:	mvn	r3, #0
   13870:	str	r3, [sp, #4]
   13874:	mov	r3, #1
   13878:	str	r3, [sp]
   1387c:	mov	r2, #0
   13880:	mov	r1, #5
   13884:	mov	r0, r4
   13888:	bl	22468 <flatcc_verify_vector_field@@Base>
   1388c:	cmp	r0, #0
   13890:	bne	137f8 <_start@@Base+0xd60>
   13894:	ldr	r3, [pc, #876]	; 13c08 <_start@@Base+0x1170>
   13898:	mov	r2, #0
   1389c:	mov	r1, #11
   138a0:	mov	r0, r4
   138a4:	bl	22778 <flatcc_verify_table_vector_field@@Base>
   138a8:	cmp	r0, #0
   138ac:	bne	137f8 <_start@@Base+0xd60>
   138b0:	mov	r2, #0
   138b4:	mov	r1, #10
   138b8:	mov	r0, r4
   138bc:	bl	22518 <flatcc_verify_string_vector_field@@Base>
   138c0:	cmp	r0, #0
   138c4:	bne	137f8 <_start@@Base+0xd60>
   138c8:	mov	r2, #0
   138cc:	mov	r1, #28
   138d0:	mov	r0, r4
   138d4:	bl	22518 <flatcc_verify_string_vector_field@@Base>
   138d8:	cmp	r0, #0
   138dc:	bne	137f8 <_start@@Base+0xd60>
   138e0:	mvn	r3, #0
   138e4:	str	r3, [sp, #4]
   138e8:	mov	r3, #1
   138ec:	str	r3, [sp]
   138f0:	mov	r2, #0
   138f4:	mov	r1, #24
   138f8:	mov	r0, r4
   138fc:	bl	22468 <flatcc_verify_vector_field@@Base>
   13900:	cmp	r0, #0
   13904:	bne	137f8 <_start@@Base+0xd60>
   13908:	mvn	r3, #-536870912	; 0xe0000000
   1390c:	str	r3, [sp, #4]
   13910:	mov	r3, #4
   13914:	str	r3, [sp]
   13918:	mov	r3, #8
   1391c:	mov	r2, #0
   13920:	mov	r1, #29
   13924:	mov	r0, r4
   13928:	bl	22468 <flatcc_verify_vector_field@@Base>
   1392c:	cmp	r0, #0
   13930:	bne	137f8 <_start@@Base+0xd60>
   13934:	ldr	r3, [pc, #716]	; 13c08 <_start@@Base+0x1170>
   13938:	mov	r2, #0
   1393c:	mov	r1, #12
   13940:	mov	r0, r4
   13944:	bl	22660 <flatcc_verify_table_field@@Base>
   13948:	cmp	r0, #0
   1394c:	bne	137f8 <_start@@Base+0xd60>
   13950:	ldr	r3, [pc, #692]	; 13c0c <_start@@Base+0x1174>
   13954:	mov	r2, #0
   13958:	mov	r1, #8
   1395c:	mov	r0, r4
   13960:	bl	23250 <flatcc_verify_union_field@@Base>
   13964:	cmp	r0, #0
   13968:	bne	137f8 <_start@@Base+0xd60>
   1396c:	mvn	r3, #-1073741824	; 0xc0000000
   13970:	str	r3, [sp, #4]
   13974:	mov	r3, #2
   13978:	str	r3, [sp]
   1397c:	mov	r3, #4
   13980:	mov	r2, #0
   13984:	mov	r1, #9
   13988:	mov	r0, r4
   1398c:	bl	22468 <flatcc_verify_vector_field@@Base>
   13990:	cmp	r0, #0
   13994:	bne	137f8 <_start@@Base+0xd60>
   13998:	mvn	r3, #-1073741824	; 0xc0000000
   1399c:	str	r3, [sp, #4]
   139a0:	mov	r3, #2
   139a4:	str	r3, [sp]
   139a8:	mov	r3, #4
   139ac:	mov	r2, #0
   139b0:	mov	r1, #31
   139b4:	mov	r0, r4
   139b8:	bl	22468 <flatcc_verify_vector_field@@Base>
   139bc:	cmp	r0, #0
   139c0:	bne	137f8 <_start@@Base+0xd60>
   139c4:	ldr	r3, [pc, #572]	; 13c08 <_start@@Base+0x1170>
   139c8:	str	r3, [sp, #4]
   139cc:	mov	r3, #1
   139d0:	str	r3, [sp]
   139d4:	mov	r3, #0
   139d8:	mov	r2, r3
   139dc:	mov	r1, #13
   139e0:	mov	r0, r4
   139e4:	bl	23090 <flatcc_verify_table_as_nested_root@@Base>
   139e8:	cmp	r0, #0
   139ec:	bne	137f8 <_start@@Base+0xd60>
   139f0:	ldr	r3, [pc, #536]	; 13c10 <_start@@Base+0x1178>
   139f4:	mov	r2, #0
   139f8:	mov	r1, #14
   139fc:	mov	r0, r4
   13a00:	bl	22660 <flatcc_verify_table_field@@Base>
   13a04:	cmp	r0, #0
   13a08:	bne	137f8 <_start@@Base+0xd60>
   13a0c:	mov	r3, #1
   13a10:	mov	r2, r3
   13a14:	mov	r1, #15
   13a18:	mov	r0, r4
   13a1c:	bl	2235c <flatcc_verify_field@@Base>
   13a20:	cmp	r0, #0
   13a24:	bne	137f8 <_start@@Base+0xd60>
   13a28:	mov	r3, #4
   13a2c:	mov	r2, r3
   13a30:	mov	r1, #16
   13a34:	mov	r0, r4
   13a38:	bl	2235c <flatcc_verify_field@@Base>
   13a3c:	cmp	r0, #0
   13a40:	bne	137f8 <_start@@Base+0xd60>
   13a44:	mov	r3, #4
   13a48:	mov	r2, r3
   13a4c:	mov	r1, #17
   13a50:	mov	r0, r4
   13a54:	bl	2235c <flatcc_verify_field@@Base>
   13a58:	cmp	r0, #0
   13a5c:	bne	137f8 <_start@@Base+0xd60>
   13a60:	mov	r3, #8
   13a64:	mov	r2, r3
   13a68:	mov	r1, #18
   13a6c:	mov	r0, r4
   13a70:	bl	2235c <flatcc_verify_field@@Base>
   13a74:	cmp	r0, #0
   13a78:	bne	137f8 <_start@@Base+0xd60>
   13a7c:	mov	r3, #8
   13a80:	mov	r2, r3
   13a84:	mov	r1, #19
   13a88:	mov	r0, r4
   13a8c:	bl	2235c <flatcc_verify_field@@Base>
   13a90:	cmp	r0, #0
   13a94:	bne	137f8 <_start@@Base+0xd60>
   13a98:	mov	r3, #4
   13a9c:	mov	r2, r3
   13aa0:	mov	r1, #20
   13aa4:	mov	r0, r4
   13aa8:	bl	2235c <flatcc_verify_field@@Base>
   13aac:	cmp	r0, #0
   13ab0:	bne	137f8 <_start@@Base+0xd60>
   13ab4:	mov	r3, #4
   13ab8:	mov	r2, r3
   13abc:	mov	r1, #21
   13ac0:	mov	r0, r4
   13ac4:	bl	2235c <flatcc_verify_field@@Base>
   13ac8:	cmp	r0, #0
   13acc:	bne	137f8 <_start@@Base+0xd60>
   13ad0:	mov	r3, #8
   13ad4:	mov	r2, r3
   13ad8:	mov	r1, #22
   13adc:	mov	r0, r4
   13ae0:	bl	2235c <flatcc_verify_field@@Base>
   13ae4:	cmp	r0, #0
   13ae8:	bne	137f8 <_start@@Base+0xd60>
   13aec:	mov	r3, #8
   13af0:	mov	r2, r3
   13af4:	mov	r1, #23
   13af8:	mov	r0, r4
   13afc:	bl	2235c <flatcc_verify_field@@Base>
   13b00:	cmp	r0, #0
   13b04:	bne	137f8 <_start@@Base+0xd60>
   13b08:	mov	r3, #4
   13b0c:	mov	r2, r3
   13b10:	mov	r1, #25
   13b14:	mov	r0, r4
   13b18:	bl	2235c <flatcc_verify_field@@Base>
   13b1c:	cmp	r0, #0
   13b20:	bne	137f8 <_start@@Base+0xd60>
   13b24:	mov	r3, #4
   13b28:	mov	r2, r3
   13b2c:	mov	r1, #26
   13b30:	mov	r0, r4
   13b34:	bl	2235c <flatcc_verify_field@@Base>
   13b38:	cmp	r0, #0
   13b3c:	bne	137f8 <_start@@Base+0xd60>
   13b40:	mov	r3, #4
   13b44:	mov	r2, r3
   13b48:	mov	r1, #27
   13b4c:	mov	r0, r4
   13b50:	bl	2235c <flatcc_verify_field@@Base>
   13b54:	cmp	r0, #0
   13b58:	bne	137f8 <_start@@Base+0xd60>
   13b5c:	mvn	r3, #0
   13b60:	str	r3, [sp, #4]
   13b64:	mov	r3, #1
   13b68:	str	r3, [sp]
   13b6c:	mov	r2, #0
   13b70:	mov	r1, #30
   13b74:	mov	r0, r4
   13b78:	bl	22468 <flatcc_verify_vector_field@@Base>
   13b7c:	cmp	r0, #0
   13b80:	bne	137f8 <_start@@Base+0xd60>
   13b84:	mvn	r3, #-536870912	; 0xe0000000
   13b88:	str	r3, [sp, #4]
   13b8c:	mov	r3, #8
   13b90:	str	r3, [sp]
   13b94:	mov	r2, #0
   13b98:	mov	r1, #32
   13b9c:	mov	r0, r4
   13ba0:	bl	22468 <flatcc_verify_vector_field@@Base>
   13ba4:	cmp	r0, #0
   13ba8:	bne	137f8 <_start@@Base+0xd60>
   13bac:	mvn	r3, #-536870912	; 0xe0000000
   13bb0:	str	r3, [sp, #4]
   13bb4:	mov	r3, #8
   13bb8:	str	r3, [sp]
   13bbc:	mov	r2, #0
   13bc0:	mov	r1, #33	; 0x21
   13bc4:	mov	r0, r4
   13bc8:	bl	22468 <flatcc_verify_vector_field@@Base>
   13bcc:	cmp	r0, #0
   13bd0:	bne	137f8 <_start@@Base+0xd60>
   13bd4:	ldr	r3, [pc, #56]	; 13c14 <_start@@Base+0x117c>
   13bd8:	mov	r2, #0
   13bdc:	mov	r1, #34	; 0x22
   13be0:	mov	r0, r4
   13be4:	bl	22660 <flatcc_verify_table_field@@Base>
   13be8:	cmp	r0, #0
   13bec:	bne	137f8 <_start@@Base+0xd60>
   13bf0:	ldr	r3, [pc, #32]	; 13c18 <_start@@Base+0x1180>
   13bf4:	mov	r2, #0
   13bf8:	mov	r1, #35	; 0x23
   13bfc:	mov	r0, r4
   13c00:	bl	22660 <flatcc_verify_table_field@@Base>
   13c04:	b	137f8 <_start@@Base+0xd60>
   13c08:	ldrdeq	r3, [r1], -r4
   13c0c:	andeq	r3, r1, r8, lsr #25
   13c10:	andeq	r3, r1, r4, lsr r6
   13c14:	andeq	r2, r1, r0, asr #23
   13c18:	andeq	r3, r1, ip, lsl ip
   13c1c:	push	{r4, lr}
   13c20:	sub	sp, sp, #8
   13c24:	mov	r4, r0
   13c28:	mvn	r3, #0
   13c2c:	str	r3, [sp, #4]
   13c30:	mov	r3, #1
   13c34:	str	r3, [sp]
   13c38:	mov	r2, #0
   13c3c:	mov	r1, r2
   13c40:	bl	22468 <flatcc_verify_vector_field@@Base>
   13c44:	cmp	r0, #0
   13c48:	beq	13c54 <_start@@Base+0x11bc>
   13c4c:	add	sp, sp, #8
   13c50:	pop	{r4, pc}
   13c54:	mvn	r3, #0
   13c58:	str	r3, [sp, #4]
   13c5c:	mov	r1, #1
   13c60:	str	r1, [sp]
   13c64:	mov	r3, r1
   13c68:	mov	r2, #0
   13c6c:	mov	r0, r4
   13c70:	bl	22468 <flatcc_verify_vector_field@@Base>
   13c74:	cmp	r0, #0
   13c78:	bne	13c4c <_start@@Base+0x11b4>
   13c7c:	ldr	r3, [pc, #32]	; 13ca4 <_start@@Base+0x120c>
   13c80:	str	r3, [sp, #4]
   13c84:	mov	r3, #1
   13c88:	str	r3, [sp]
   13c8c:	mov	r3, #0
   13c90:	mov	r2, r3
   13c94:	mov	r1, #2
   13c98:	mov	r0, r4
   13c9c:	bl	23090 <flatcc_verify_table_as_nested_root@@Base>
   13ca0:	b	13c4c <_start@@Base+0x11b4>
   13ca4:	ldrdeq	r3, [r1], -r4
   13ca8:	push	{r4, lr}
   13cac:	ldrb	r3, [r0, #12]
   13cb0:	sub	r3, r3, #1
   13cb4:	cmp	r3, #3
   13cb8:	ldrls	pc, [pc, r3, lsl #2]
   13cbc:	b	13d00 <_start@@Base+0x1268>
   13cc0:	ldrdeq	r3, [r1], -r0
   13cc4:	ldrdeq	r3, [r1], -ip
   13cc8:	andeq	r3, r1, r8, ror #25
   13ccc:	strdeq	r3, [r1], -r4
   13cd0:	ldr	r1, [pc, #48]	; 13d08 <_start@@Base+0x1270>
   13cd4:	bl	22a08 <flatcc_verify_union_table@@Base>
   13cd8:	pop	{r4, pc}
   13cdc:	ldr	r1, [pc, #40]	; 13d0c <_start@@Base+0x1274>
   13ce0:	bl	22a08 <flatcc_verify_union_table@@Base>
   13ce4:	pop	{r4, pc}
   13ce8:	ldr	r1, [pc, #32]	; 13d10 <_start@@Base+0x1278>
   13cec:	bl	22a08 <flatcc_verify_union_table@@Base>
   13cf0:	pop	{r4, pc}
   13cf4:	ldr	r1, [pc, #24]	; 13d14 <_start@@Base+0x127c>
   13cf8:	bl	22a08 <flatcc_verify_union_table@@Base>
   13cfc:	pop	{r4, pc}
   13d00:	mov	r0, #0
   13d04:	pop	{r4, pc}
   13d08:	ldrdeq	r3, [r1], -r4
   13d0c:			; <UNDEFINED> instruction: 0x000132b4
   13d10:	andeq	r2, r1, r8, asr #23
   13d14:	andeq	r3, r1, r8, lsl sp
   13d18:	push	{r4, lr}
   13d1c:	mov	r4, r0
   13d20:	ldr	r3, [pc, #68]	; 13d6c <_start@@Base+0x12d4>
   13d24:	mov	r2, #0
   13d28:	mov	r1, r2
   13d2c:	bl	22660 <flatcc_verify_table_field@@Base>
   13d30:	cmp	r0, #0
   13d34:	popne	{r4, pc}
   13d38:	ldr	r3, [pc, #48]	; 13d70 <_start@@Base+0x12d8>
   13d3c:	mov	r2, #0
   13d40:	mov	r1, #1
   13d44:	mov	r0, r4
   13d48:	bl	22660 <flatcc_verify_table_field@@Base>
   13d4c:	cmp	r0, #0
   13d50:	popne	{r4, pc}
   13d54:	ldr	r3, [pc, #24]	; 13d74 <_start@@Base+0x12dc>
   13d58:	mov	r2, #0
   13d5c:	mov	r1, #3
   13d60:	mov	r0, r4
   13d64:	bl	233a0 <flatcc_verify_union_vector_field@@Base>
   13d68:	pop	{r4, pc}
   13d6c:	andeq	r3, r1, r4, ror r7
   13d70:	andeq	r3, r1, r8, ror sp
   13d74:	andeq	r3, r1, r8, lsr #25
   13d78:	push	{r4, lr}
   13d7c:	mov	r4, r0
   13d80:	ldr	r3, [pc, #124]	; 13e04 <_start@@Base+0x136c>
   13d84:	mov	r2, #0
   13d88:	mov	r1, #1
   13d8c:	bl	23250 <flatcc_verify_union_field@@Base>
   13d90:	cmp	r0, #0
   13d94:	popne	{r4, pc}
   13d98:	ldr	r3, [pc, #100]	; 13e04 <_start@@Base+0x136c>
   13d9c:	mov	r2, #0
   13da0:	mov	r1, #3
   13da4:	mov	r0, r4
   13da8:	bl	23250 <flatcc_verify_union_field@@Base>
   13dac:	cmp	r0, #0
   13db0:	popne	{r4, pc}
   13db4:	ldr	r3, [pc, #72]	; 13e04 <_start@@Base+0x136c>
   13db8:	mov	r2, #0
   13dbc:	mov	r1, #5
   13dc0:	mov	r0, r4
   13dc4:	bl	23250 <flatcc_verify_union_field@@Base>
   13dc8:	cmp	r0, #0
   13dcc:	popne	{r4, pc}
   13dd0:	ldr	r3, [pc, #44]	; 13e04 <_start@@Base+0x136c>
   13dd4:	mov	r2, #0
   13dd8:	mov	r1, #7
   13ddc:	mov	r0, r4
   13de0:	bl	23250 <flatcc_verify_union_field@@Base>
   13de4:	cmp	r0, #0
   13de8:	popne	{r4, pc}
   13dec:	ldr	r3, [pc, #16]	; 13e04 <_start@@Base+0x136c>
   13df0:	mov	r2, #0
   13df4:	mov	r1, #9
   13df8:	mov	r0, r4
   13dfc:	bl	233a0 <flatcc_verify_union_vector_field@@Base>
   13e00:	pop	{r4, pc}
   13e04:	andeq	r3, r1, r8, lsl #28
   13e08:	push	{r4, lr}
   13e0c:	ldrb	r3, [r0, #12]
   13e10:	cmp	r3, #9
   13e14:	beq	13e64 <_start@@Base+0x13cc>
   13e18:	bls	13e38 <_start@@Base+0x13a0>
   13e1c:	cmp	r3, #11
   13e20:	beq	13e84 <_start@@Base+0x13ec>
   13e24:	bcc	13e74 <_start@@Base+0x13dc>
   13e28:	cmp	r3, #255	; 0xff
   13e2c:	bne	13e8c <_start@@Base+0x13f4>
   13e30:	bl	22b6c <flatcc_verify_union_string@@Base>
   13e34:	pop	{r4, pc}
   13e38:	cmp	r3, #2
   13e3c:	beq	13e58 <_start@@Base+0x13c0>
   13e40:	cmp	r3, #8
   13e44:	bne	13e8c <_start@@Base+0x13f4>
   13e48:	mov	r2, #2
   13e4c:	mov	r1, r2
   13e50:	bl	22b00 <flatcc_verify_union_struct@@Base>
   13e54:	pop	{r4, pc}
   13e58:	ldr	r1, [pc, #52]	; 13e94 <_start@@Base+0x13fc>
   13e5c:	bl	22a08 <flatcc_verify_union_table@@Base>
   13e60:	pop	{r4, pc}
   13e64:	mov	r2, #4
   13e68:	mov	r1, r2
   13e6c:	bl	22b00 <flatcc_verify_union_struct@@Base>
   13e70:	pop	{r4, pc}
   13e74:	mov	r2, #4
   13e78:	mov	r1, r2
   13e7c:	bl	22b00 <flatcc_verify_union_struct@@Base>
   13e80:	pop	{r4, pc}
   13e84:	bl	22b6c <flatcc_verify_union_string@@Base>
   13e88:	pop	{r4, pc}
   13e8c:	mov	r0, #0
   13e90:	pop	{r4, pc}
   13e94:	andeq	r3, r1, ip, lsr #4
   13e98:	push	{r4, r5, r6, lr}
   13e9c:	mov	r5, r2
   13ea0:	cmp	r0, #0
   13ea4:	beq	13ee0 <_start@@Base+0x1448>
   13ea8:	ldr	r4, [r0, #-4]
   13eac:	cmp	r4, r2
   13eb0:	movcc	r2, r4
   13eb4:	movcs	r2, r5
   13eb8:	bl	12a74 <strncmp@plt>
   13ebc:	cmp	r0, #0
   13ec0:	bne	13edc <_start@@Base+0x1444>
   13ec4:	cmp	r5, r4
   13ec8:	bhi	13ee8 <_start@@Base+0x1450>
   13ecc:	cmp	r5, r4
   13ed0:	movcs	r0, #0
   13ed4:	movcc	r0, #1
   13ed8:	pop	{r4, r5, r6, pc}
   13edc:	pop	{r4, r5, r6, pc}
   13ee0:	mov	r4, #0
   13ee4:	b	13ec4 <_start@@Base+0x142c>
   13ee8:	mvn	r0, #0
   13eec:	pop	{r4, r5, r6, pc}
   13ef0:	push	{lr}		; (str lr, [sp, #-4]!)
   13ef4:	sub	sp, sp, #12
   13ef8:	mov	r1, #0
   13efc:	mov	r0, sp
   13f00:	bl	129e4 <gettimeofday@plt>
   13f04:	ldr	r3, [pc, #92]	; 13f68 <_start@@Base+0x14d0>
   13f08:	ldr	r3, [r3]
   13f0c:	cmp	r3, #0
   13f10:	ldreq	r3, [pc, #80]	; 13f68 <_start@@Base+0x14d0>
   13f14:	addeq	r2, sp, #8
   13f18:	ldmdbeq	r2, {r0, r1}
   13f1c:	stmeq	r3, {r0, r1}
   13f20:	ldr	r2, [pc, #64]	; 13f68 <_start@@Base+0x14d0>
   13f24:	ldr	r1, [r2, #4]
   13f28:	ldr	r3, [sp, #4]
   13f2c:	sub	r3, r3, r1
   13f30:	vmov	s15, r3
   13f34:	vcvt.f64.s32	d7, s15
   13f38:	vldr	d5, [pc, #32]	; 13f60 <_start@@Base+0x14c8>
   13f3c:	vdiv.f64	d6, d7, d5
   13f40:	ldr	r2, [r2]
   13f44:	ldr	r3, [sp]
   13f48:	sub	r3, r3, r2
   13f4c:	vmov	s0, r3
   13f50:	vcvt.f64.s32	d0, s0
   13f54:	vadd.f64	d0, d6, d0
   13f58:	add	sp, sp, #12
   13f5c:	pop	{pc}		; (ldr pc, [sp], #4)
   13f60:	andeq	r0, r0, r0
   13f64:	smlawbmi	lr, r0, r4, r8
   13f68:	andeq	r8, r3, r8, ror r0
   13f6c:	sub	r2, r0, #1
   13f70:	mov	r3, #0
   13f74:	b	13f88 <_start@@Base+0x14f0>
   13f78:	ldrb	ip, [r2, #1]!
   13f7c:	cmp	ip, r1
   13f80:	beq	13fa8 <_start@@Base+0x1510>
   13f84:	add	r3, r3, #1
   13f88:	cmp	r0, #0
   13f8c:	beq	13fa4 <_start@@Base+0x150c>
   13f90:	ldr	ip, [r0, #-4]
   13f94:	cmp	r3, ip
   13f98:	bcc	13f78 <_start@@Base+0x14e0>
   13f9c:	mvn	r3, #0
   13fa0:	b	13fa8 <_start@@Base+0x1510>
   13fa4:	mvn	r3, #0
   13fa8:	mov	r0, r3
   13fac:	bx	lr
   13fb0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13fb4:	mov	r7, r0
   13fb8:	mov	r6, r1
   13fbc:	mov	r8, r0
   13fc0:	mov	r4, #0
   13fc4:	b	14000 <_start@@Base+0x1568>
   13fc8:	ldr	r3, [pc, #372]	; 14144 <_start@@Base+0x16ac>
   13fcc:	ldr	r2, [pc, #372]	; 14148 <_start@@Base+0x16b0>
   13fd0:	ldr	r1, [pc, #372]	; 1414c <_start@@Base+0x16b4>
   13fd4:	ldr	r0, [pc, #372]	; 14150 <_start@@Base+0x16b8>
   13fd8:	bl	12a8c <__assert_fail@plt>
   13fdc:	add	r0, r2, r3
   13fe0:	ldr	r3, [r2, r3]
   13fe4:	add	r3, r3, #4
   13fe8:	mov	r1, r6
   13fec:	add	r0, r0, r3
   13ff0:	bl	12990 <strcmp@plt>
   13ff4:	cmp	r0, #0
   13ff8:	beq	1405c <_start@@Base+0x15c4>
   13ffc:	add	r4, r4, #1
   14000:	cmp	r7, #0
   14004:	beq	14138 <_start@@Base+0x16a0>
   14008:	ldr	r5, [r7, #-4]
   1400c:	cmp	r4, r5
   14010:	bcs	14070 <_start@@Base+0x15d8>
   14014:	mov	r3, r8
   14018:	add	r8, r8, #4
   1401c:	ldr	r1, [r3]
   14020:	adds	r2, r3, r1
   14024:	beq	13fc8 <_start@@Base+0x1530>
   14028:	ldr	r3, [r3, r1]
   1402c:	sub	r3, r2, r3
   14030:	ldrh	r1, [r3]
   14034:	cmp	r1, #11
   14038:	bls	14048 <_start@@Base+0x15b0>
   1403c:	ldrh	r3, [r3, #10]
   14040:	cmp	r3, #0
   14044:	bne	13fdc <_start@@Base+0x1544>
   14048:	ldr	r3, [pc, #244]	; 14144 <_start@@Base+0x16ac>
   1404c:	ldr	r2, [pc, #244]	; 14148 <_start@@Base+0x16b0>
   14050:	ldr	r1, [pc, #244]	; 1414c <_start@@Base+0x16b4>
   14054:	ldr	r0, [pc, #248]	; 14154 <_start@@Base+0x16bc>
   14058:	bl	12a8c <__assert_fail@plt>
   1405c:	cmn	r4, #1
   14060:	moveq	r8, #0
   14064:	beq	1413c <_start@@Base+0x16a4>
   14068:	mov	r8, #0
   1406c:	b	14108 <_start@@Base+0x1670>
   14070:	mov	r8, #0
   14074:	b	1413c <_start@@Base+0x16a4>
   14078:	ldr	r3, [pc, #196]	; 14144 <_start@@Base+0x16ac>
   1407c:	ldr	r2, [pc, #196]	; 14148 <_start@@Base+0x16b0>
   14080:	ldr	r1, [pc, #196]	; 1414c <_start@@Base+0x16b4>
   14084:	ldr	r0, [pc, #196]	; 14150 <_start@@Base+0x16b8>
   14088:	bl	12a8c <__assert_fail@plt>
   1408c:	add	r0, r3, r2
   14090:	ldr	r3, [r3, r2]
   14094:	add	r3, r3, #4
   14098:	mov	r1, r6
   1409c:	add	r0, r0, r3
   140a0:	bl	12990 <strcmp@plt>
   140a4:	cmp	r0, #0
   140a8:	beq	14100 <_start@@Base+0x1668>
   140ac:	add	r4, r4, #1
   140b0:	cmp	r5, r4
   140b4:	bls	1413c <_start@@Base+0x16a4>
   140b8:	mov	r3, r9
   140bc:	add	r9, r9, #4
   140c0:	ldr	r2, [r3]
   140c4:	adds	r3, r3, r2
   140c8:	beq	14078 <_start@@Base+0x15e0>
   140cc:	ldr	r2, [r3]
   140d0:	sub	r2, r3, r2
   140d4:	ldrh	r1, [r2]
   140d8:	cmp	r1, #11
   140dc:	bls	140ec <_start@@Base+0x1654>
   140e0:	ldrh	r2, [r2, #10]
   140e4:	cmp	r2, #0
   140e8:	bne	1408c <_start@@Base+0x15f4>
   140ec:	ldr	r3, [pc, #80]	; 14144 <_start@@Base+0x16ac>
   140f0:	ldr	r2, [pc, #80]	; 14148 <_start@@Base+0x16b0>
   140f4:	ldr	r1, [pc, #80]	; 1414c <_start@@Base+0x16b4>
   140f8:	ldr	r0, [pc, #84]	; 14154 <_start@@Base+0x16bc>
   140fc:	bl	12a8c <__assert_fail@plt>
   14100:	cmn	r4, #1
   14104:	beq	1413c <_start@@Base+0x16a4>
   14108:	add	r8, r8, #1
   1410c:	add	r4, r4, #1
   14110:	cmp	r4, r5
   14114:	bcs	1413c <_start@@Base+0x16a4>
   14118:	lsl	r9, r4, #2
   1411c:	add	r3, r7, r9
   14120:	ldr	r2, [r7, r4, lsl #2]
   14124:	adds	r3, r3, r2
   14128:	beq	14078 <_start@@Base+0x15e0>
   1412c:	add	r9, r9, #4
   14130:	add	r9, r7, r9
   14134:	b	140cc <_start@@Base+0x1634>
   14138:	mov	r8, #0
   1413c:	mov	r0, r8
   14140:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14144:	andeq	r3, r2, r8, lsr #14
   14148:			; <UNDEFINED> instruction: 0x000002bb
   1414c:	andeq	r3, r2, ip, ror sp
   14150:	andeq	r3, r2, r0, ror #27
   14154:	andeq	r3, r2, r8, lsr #29
   14158:	push	{r4, r5, r6, r7, r8, lr}
   1415c:	mov	r7, r1
   14160:	mov	r8, r3
   14164:	cmp	r0, #0
   14168:	ldrne	r6, [r0, #-4]
   1416c:	moveq	r6, #0
   14170:	cmp	r2, r6
   14174:	movcs	r2, r6
   14178:	sub	r4, r2, #-1073741823	; 0xc0000001
   1417c:	add	r4, r0, r4, lsl #2
   14180:	b	141d0 <_start@@Base+0x1738>
   14184:	ldr	r3, [pc, #172]	; 14238 <_start@@Base+0x17a0>
   14188:	ldr	r2, [pc, #172]	; 1423c <_start@@Base+0x17a4>
   1418c:	ldr	r1, [pc, #172]	; 14240 <_start@@Base+0x17a8>
   14190:	ldr	r0, [pc, #172]	; 14244 <_start@@Base+0x17ac>
   14194:	bl	12a8c <__assert_fail@plt>
   14198:	ldr	r3, [pc, #168]	; 14248 <_start@@Base+0x17b0>
   1419c:	ldr	r2, [pc, #168]	; 1424c <_start@@Base+0x17b4>
   141a0:	ldr	r1, [pc, #152]	; 14240 <_start@@Base+0x17a8>
   141a4:	ldr	r0, [pc, #164]	; 14250 <_start@@Base+0x17b8>
   141a8:	bl	12a8c <__assert_fail@plt>
   141ac:	add	r0, r1, r3
   141b0:	ldr	r3, [r1, r3]
   141b4:	add	r3, r3, #4
   141b8:	mov	r1, r8
   141bc:	add	r0, r0, r3
   141c0:	bl	12990 <strcmp@plt>
   141c4:	mov	r2, r5
   141c8:	cmp	r0, #0
   141cc:	beq	14230 <_start@@Base+0x1798>
   141d0:	sub	r5, r2, #1
   141d4:	cmp	r2, r7
   141d8:	bls	1422c <_start@@Base+0x1794>
   141dc:	mov	r3, r4
   141e0:	cmp	r5, r6
   141e4:	bcs	14184 <_start@@Base+0x16ec>
   141e8:	sub	r4, r4, #4
   141ec:	ldr	r2, [r3]
   141f0:	adds	r1, r3, r2
   141f4:	beq	14198 <_start@@Base+0x1700>
   141f8:	ldr	r3, [r3, r2]
   141fc:	sub	r3, r1, r3
   14200:	ldrh	r2, [r3]
   14204:	cmp	r2, #11
   14208:	bls	14218 <_start@@Base+0x1780>
   1420c:	ldrh	r3, [r3, #10]
   14210:	cmp	r3, #0
   14214:	bne	141ac <_start@@Base+0x1714>
   14218:	ldr	r3, [pc, #40]	; 14248 <_start@@Base+0x17b0>
   1421c:	ldr	r2, [pc, #40]	; 1424c <_start@@Base+0x17b4>
   14220:	ldr	r1, [pc, #24]	; 14240 <_start@@Base+0x17a8>
   14224:	ldr	r0, [pc, #40]	; 14254 <_start@@Base+0x17bc>
   14228:	bl	12a8c <__assert_fail@plt>
   1422c:	mvn	r5, #0
   14230:	mov	r0, r5
   14234:	pop	{r4, r5, r6, r7, r8, pc}
   14238:	andeq	r3, r2, r8, asr #13
   1423c:			; <UNDEFINED> instruction: 0x000002b5
   14240:	andeq	r3, r2, ip, ror sp
   14244:	andeq	r3, r2, r0, ror lr
   14248:	andeq	r3, r2, r8, lsr #14
   1424c:			; <UNDEFINED> instruction: 0x000002bb
   14250:	andeq	r3, r2, r0, ror #27
   14254:	andeq	r3, r2, r8, lsr #29
   14258:	push	{r4, r5, r6, r7, r8, lr}
   1425c:	mov	r6, r0
   14260:	mov	r4, r1
   14264:	mov	r7, r2
   14268:	mov	r8, r3
   1426c:	add	r5, r0, r1, lsl #2
   14270:	b	142c0 <_start@@Base+0x1828>
   14274:	ldr	r3, [pc, #204]	; 14348 <_start@@Base+0x18b0>
   14278:	ldr	r2, [pc, #204]	; 1434c <_start@@Base+0x18b4>
   1427c:	ldr	r1, [pc, #204]	; 14350 <_start@@Base+0x18b8>
   14280:	ldr	r0, [pc, #204]	; 14354 <_start@@Base+0x18bc>
   14284:	bl	12a8c <__assert_fail@plt>
   14288:	ldr	r3, [pc, #200]	; 14358 <_start@@Base+0x18c0>
   1428c:	ldr	r2, [pc, #200]	; 1435c <_start@@Base+0x18c4>
   14290:	ldr	r1, [pc, #184]	; 14350 <_start@@Base+0x18b8>
   14294:	ldr	r0, [pc, #196]	; 14360 <_start@@Base+0x18c8>
   14298:	bl	12a8c <__assert_fail@plt>
   1429c:	add	r0, r1, r3
   142a0:	ldr	r3, [r1, r3]
   142a4:	add	r3, r3, #4
   142a8:	mov	r1, r8
   142ac:	add	r0, r0, r3
   142b0:	bl	12990 <strcmp@plt>
   142b4:	cmp	r0, #0
   142b8:	beq	14338 <_start@@Base+0x18a0>
   142bc:	add	r4, r4, #1
   142c0:	cmp	r6, #0
   142c4:	beq	14340 <_start@@Base+0x18a8>
   142c8:	ldr	r2, [r6, #-4]
   142cc:	cmp	r2, r7
   142d0:	movcc	r3, r2
   142d4:	movcs	r3, r7
   142d8:	cmp	r4, r3
   142dc:	bcs	14330 <_start@@Base+0x1898>
   142e0:	mov	r3, r5
   142e4:	cmp	r4, r2
   142e8:	bcs	14274 <_start@@Base+0x17dc>
   142ec:	add	r5, r5, #4
   142f0:	ldr	r2, [r3]
   142f4:	adds	r1, r3, r2
   142f8:	beq	14288 <_start@@Base+0x17f0>
   142fc:	ldr	r3, [r3, r2]
   14300:	sub	r3, r1, r3
   14304:	ldrh	r2, [r3]
   14308:	cmp	r2, #11
   1430c:	bls	1431c <_start@@Base+0x1884>
   14310:	ldrh	r3, [r3, #10]
   14314:	cmp	r3, #0
   14318:	bne	1429c <_start@@Base+0x1804>
   1431c:	ldr	r3, [pc, #52]	; 14358 <_start@@Base+0x18c0>
   14320:	ldr	r2, [pc, #52]	; 1435c <_start@@Base+0x18c4>
   14324:	ldr	r1, [pc, #36]	; 14350 <_start@@Base+0x18b8>
   14328:	ldr	r0, [pc, #52]	; 14364 <_start@@Base+0x18cc>
   1432c:	bl	12a8c <__assert_fail@plt>
   14330:	mvn	r0, #0
   14334:	pop	{r4, r5, r6, r7, r8, pc}
   14338:	mov	r0, r4
   1433c:	pop	{r4, r5, r6, r7, r8, pc}
   14340:	mvn	r0, #0
   14344:	pop	{r4, r5, r6, r7, r8, pc}
   14348:	andeq	r3, r2, r8, asr #13
   1434c:			; <UNDEFINED> instruction: 0x000002b5
   14350:	andeq	r3, r2, ip, ror sp
   14354:	andeq	r3, r2, r0, ror lr
   14358:	andeq	r3, r2, r8, lsr #14
   1435c:			; <UNDEFINED> instruction: 0x000002bb
   14360:	andeq	r3, r2, r0, ror #27
   14364:	andeq	r3, r2, r8, lsr #29
   14368:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1436c:	subs	r6, r0, #0
   14370:	beq	144a4 <_start@@Base+0x1a0c>
   14374:	ldr	r7, [r6, #-4]
   14378:	cmp	r7, #0
   1437c:	beq	144ac <_start@@Base+0x1a14>
   14380:	mov	r8, r1
   14384:	sub	r9, r7, #1
   14388:	mov	r5, #0
   1438c:	cmp	r5, r9
   14390:	bcs	14468 <_start@@Base+0x19d0>
   14394:	sub	r4, r9, r5
   14398:	add	r4, r5, r4, lsr #1
   1439c:	add	r3, r6, r4, lsl #2
   143a0:	cmp	r7, r4
   143a4:	bls	143c8 <_start@@Base+0x1930>
   143a8:	ldr	r2, [r6, r4, lsl #2]
   143ac:	adds	r3, r3, r2
   143b0:	bne	1442c <_start@@Base+0x1994>
   143b4:	ldr	r3, [pc, #248]	; 144b4 <_start@@Base+0x1a1c>
   143b8:	ldr	r2, [pc, #248]	; 144b8 <_start@@Base+0x1a20>
   143bc:	ldr	r1, [pc, #248]	; 144bc <_start@@Base+0x1a24>
   143c0:	ldr	r0, [pc, #248]	; 144c0 <_start@@Base+0x1a28>
   143c4:	bl	12a8c <__assert_fail@plt>
   143c8:	ldr	r3, [pc, #244]	; 144c4 <_start@@Base+0x1a2c>
   143cc:	ldr	r2, [pc, #244]	; 144c8 <_start@@Base+0x1a30>
   143d0:	ldr	r1, [pc, #228]	; 144bc <_start@@Base+0x1a24>
   143d4:	ldr	r0, [pc, #240]	; 144cc <_start@@Base+0x1a34>
   143d8:	bl	12a8c <__assert_fail@plt>
   143dc:	add	r0, r3, r2
   143e0:	ldr	r3, [r3, r2]
   143e4:	add	r3, r3, #4
   143e8:	mov	r1, r8
   143ec:	add	r0, r0, r3
   143f0:	bl	12990 <strcmp@plt>
   143f4:	cmp	r0, #0
   143f8:	blt	14460 <_start@@Base+0x19c8>
   143fc:	cmp	r5, r4
   14400:	bcs	1446c <_start@@Base+0x19d4>
   14404:	sub	r2, r4, r5
   14408:	add	r2, r5, r2, lsr #1
   1440c:	add	r3, r6, r2, lsl #2
   14410:	cmp	r2, r7
   14414:	bcs	143c8 <_start@@Base+0x1930>
   14418:	ldr	r1, [r6, r2, lsl #2]
   1441c:	mov	r9, r4
   14420:	adds	r3, r3, r1
   14424:	beq	143b4 <_start@@Base+0x191c>
   14428:	mov	r4, r2
   1442c:	ldr	r2, [r3]
   14430:	sub	r2, r3, r2
   14434:	ldrh	r1, [r2]
   14438:	cmp	r1, #11
   1443c:	bls	1444c <_start@@Base+0x19b4>
   14440:	ldrh	r2, [r2, #10]
   14444:	cmp	r2, #0
   14448:	bne	143dc <_start@@Base+0x1944>
   1444c:	ldr	r3, [pc, #96]	; 144b4 <_start@@Base+0x1a1c>
   14450:	ldr	r2, [pc, #96]	; 144b8 <_start@@Base+0x1a20>
   14454:	ldr	r1, [pc, #96]	; 144bc <_start@@Base+0x1a24>
   14458:	ldr	r0, [pc, #112]	; 144d0 <_start@@Base+0x1a38>
   1445c:	bl	12a8c <__assert_fail@plt>
   14460:	add	r5, r4, #1
   14464:	b	1438c <_start@@Base+0x18f4>
   14468:	mov	r4, r9
   1446c:	cmp	r5, r4
   14470:	mvnne	r5, #0
   14474:	beq	14480 <_start@@Base+0x19e8>
   14478:	mov	r0, r5
   1447c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14480:	mov	r1, r5
   14484:	mov	r0, r6
   14488:	bl	12e0c <_start@@Base+0x374>
   1448c:	bl	12f18 <_start@@Base+0x480>
   14490:	mov	r1, r8
   14494:	bl	12990 <strcmp@plt>
   14498:	cmp	r0, #0
   1449c:	mvnne	r5, #0
   144a0:	b	14478 <_start@@Base+0x19e0>
   144a4:	mvn	r5, #0
   144a8:	b	14478 <_start@@Base+0x19e0>
   144ac:	mvn	r5, #0
   144b0:	b	14478 <_start@@Base+0x19e0>
   144b4:	andeq	r3, r2, r8, lsr #14
   144b8:			; <UNDEFINED> instruction: 0x000002bb
   144bc:	andeq	r3, r2, ip, ror sp
   144c0:	andeq	r3, r2, r0, ror #27
   144c4:	andeq	r3, r2, r8, asr #13
   144c8:			; <UNDEFINED> instruction: 0x000002b5
   144cc:	andeq	r3, r2, r0, ror lr
   144d0:	andeq	r3, r2, r8, lsr #29

000144d4 <verify_empty_monster@@Base>:
   144d4:	push	{r4, lr}
   144d8:	cmp	r0, #0
   144dc:	beq	145a0 <verify_empty_monster@@Base+0xcc>
   144e0:	ldr	r2, [r0, #4]
   144e4:	ldr	r3, [pc, #336]	; 1463c <verify_empty_monster@@Base+0x168>
   144e8:	cmp	r2, r3
   144ec:	movne	r3, #0
   144f0:	ldreq	r3, [r0]
   144f4:	addeq	r3, r0, r3
   144f8:	ldr	r1, [pc, #320]	; 14640 <verify_empty_monster@@Base+0x16c>
   144fc:	cmp	r2, r1
   14500:	beq	14594 <verify_empty_monster@@Base+0xc0>
   14504:	mov	r1, #0
   14508:	ldr	r2, [r0]
   1450c:	add	r2, r0, r2
   14510:	ldr	lr, [r0, #4]
   14514:	ldr	ip, [pc, #288]	; 1463c <verify_empty_monster@@Base+0x168>
   14518:	cmp	lr, ip
   1451c:	movne	ip, #0
   14520:	movne	r0, ip
   14524:	ldreq	ip, [r0]
   14528:	addeq	r0, r0, ip
   1452c:	moveq	ip, r2
   14530:	cmp	r3, #0
   14534:	beq	145b8 <verify_empty_monster@@Base+0xe4>
   14538:	cmp	r1, #0
   1453c:	bne	145c8 <verify_empty_monster@@Base+0xf4>
   14540:	cmp	r3, r2
   14544:	bne	145d8 <verify_empty_monster@@Base+0x104>
   14548:	cmp	r3, ip
   1454c:	bne	145e8 <verify_empty_monster@@Base+0x114>
   14550:	cmp	r0, r3
   14554:	bne	145f8 <verify_empty_monster@@Base+0x124>
   14558:	ldr	r2, [r3]
   1455c:	sub	r2, r3, r2
   14560:	ldrh	r1, [r2]
   14564:	cmp	r1, #9
   14568:	bls	14608 <verify_empty_monster@@Base+0x134>
   1456c:	ldrh	r0, [r2, #8]
   14570:	cmp	r0, #0
   14574:	beq	14608 <verify_empty_monster@@Base+0x134>
   14578:	ldrsh	r3, [r3, r0]
   1457c:	cmp	r3, #100	; 0x64
   14580:	ldrne	r0, [pc, #188]	; 14644 <verify_empty_monster@@Base+0x170>
   14584:	ldreq	r0, [pc, #188]	; 14648 <verify_empty_monster@@Base+0x174>
   14588:	bl	129f0 <puts@plt>
   1458c:	mvn	r0, #0
   14590:	pop	{r4, pc}
   14594:	ldr	r1, [r0]
   14598:	add	r1, r0, r1
   1459c:	b	14508 <verify_empty_monster@@Base+0x34>
   145a0:	mov	r3, #0
   145a4:	mov	r1, r3
   145a8:	mov	r2, r3
   145ac:	mov	ip, r3
   145b0:	mov	r0, r3
   145b4:	b	14530 <verify_empty_monster@@Base+0x5c>
   145b8:	ldr	r0, [pc, #140]	; 1464c <verify_empty_monster@@Base+0x178>
   145bc:	bl	129f0 <puts@plt>
   145c0:	mvn	r0, #0
   145c4:	pop	{r4, pc}
   145c8:	ldr	r0, [pc, #128]	; 14650 <verify_empty_monster@@Base+0x17c>
   145cc:	bl	129f0 <puts@plt>
   145d0:	mvn	r0, #0
   145d4:	pop	{r4, pc}
   145d8:	ldr	r0, [pc, #116]	; 14654 <verify_empty_monster@@Base+0x180>
   145dc:	bl	129f0 <puts@plt>
   145e0:	mvn	r0, #0
   145e4:	pop	{r4, pc}
   145e8:	ldr	r0, [pc, #104]	; 14658 <verify_empty_monster@@Base+0x184>
   145ec:	bl	1299c <printf@plt>
   145f0:	mvn	r0, #0
   145f4:	pop	{r4, pc}
   145f8:	ldr	r0, [pc, #92]	; 1465c <verify_empty_monster@@Base+0x188>
   145fc:	bl	1299c <printf@plt>
   14600:	mvn	r0, #0
   14604:	pop	{r4, pc}
   14608:	cmp	r1, #5
   1460c:	bls	14634 <verify_empty_monster@@Base+0x160>
   14610:	ldrh	r3, [r2, #4]
   14614:	cmp	r3, #0
   14618:	bne	14624 <verify_empty_monster@@Base+0x150>
   1461c:	mov	r0, #0
   14620:	pop	{r4, pc}
   14624:	ldr	r0, [pc, #52]	; 14660 <verify_empty_monster@@Base+0x18c>
   14628:	bl	129f0 <puts@plt>
   1462c:	mvn	r0, #0
   14630:	pop	{r4, pc}
   14634:	mov	r0, #0
   14638:	pop	{r4, pc}
   1463c:	movtpl	r4, #61261	; 0xef4d
   14640:	ldrtcc	r3, [r3], #-561	; 0xfffffdcf
   14644:	strdeq	r3, [r2], -r0
   14648:	andeq	r4, r2, r4, lsl r0
   1464c:	andeq	r3, r2, r0, lsl pc
   14650:	andeq	r3, r2, r8, lsr #30
   14654:	andeq	r3, r2, r8, asr pc
   14658:	muleq	r2, r0, pc	; <UNPREDICTABLE>
   1465c:	andeq	r3, r2, r4, asr #31
   14660:	andeq	r4, r2, r4, lsr r0

00014664 <test_enums@@Base>:
   14664:	mov	r0, #0
   14668:	bx	lr

0001466c <test_type_aliases@@Base>:
   1466c:	push	{r4, r5, r6, r7, lr}
   14670:	sub	sp, sp, #20
   14674:	mov	r4, r0
   14678:	bl	1e238 <flatcc_builder_reset@@Base>
   1467c:	mvn	r3, #0
   14680:	str	r3, [sp, #4]
   14684:	mov	r3, #1
   14688:	str	r3, [sp]
   1468c:	mov	r2, #0
   14690:	mov	r1, r2
   14694:	mov	r0, r4
   14698:	bl	20408 <flatcc_builder_create_vector@@Base>
   1469c:	mov	r5, r0
   146a0:	mvn	r3, #-536870912	; 0xe0000000
   146a4:	str	r3, [sp, #4]
   146a8:	mov	r3, #8
   146ac:	str	r3, [sp]
   146b0:	mov	r2, #0
   146b4:	mov	r1, r2
   146b8:	mov	r0, r4
   146bc:	bl	20408 <flatcc_builder_create_vector@@Base>
   146c0:	mov	r6, r0
   146c4:	mov	r3, #0
   146c8:	mov	r2, r3
   146cc:	ldr	r1, [pc, #1208]	; 14b8c <test_type_aliases@@Base+0x520>
   146d0:	mov	r0, r4
   146d4:	bl	1e9d8 <flatcc_builder_start_buffer@@Base>
   146d8:	cmp	r0, #0
   146dc:	beq	148c4 <test_type_aliases@@Base+0x258>
   146e0:	add	r1, sp, #12
   146e4:	mov	r0, r4
   146e8:	bl	21958 <flatcc_builder_finalize_aligned_buffer@@Base>
   146ec:	mov	r4, r0
   146f0:	ldr	r3, [pc, #1176]	; 14b90 <test_type_aliases@@Base+0x524>
   146f4:	ldr	r2, [pc, #1168]	; 14b8c <test_type_aliases@@Base+0x520>
   146f8:	ldr	r1, [sp, #12]
   146fc:	bl	22dd4 <flatcc_verify_table_as_root@@Base>
   14700:	subs	r5, r0, #0
   14704:	bne	14b38 <test_type_aliases@@Base+0x4cc>
   14708:	cmp	r4, #0
   1470c:	beq	14b68 <test_type_aliases@@Base+0x4fc>
   14710:	ldr	r2, [r4, #4]
   14714:	ldr	r3, [pc, #1144]	; 14b94 <test_type_aliases@@Base+0x528>
   14718:	cmp	r2, r3
   1471c:	bne	14b68 <test_type_aliases@@Base+0x4fc>
   14720:	ldr	r2, [r4]
   14724:	adds	ip, r4, r2
   14728:	beq	14b68 <test_type_aliases@@Base+0x4fc>
   1472c:	ldr	r3, [r4, r2]
   14730:	sub	r3, ip, r3
   14734:	ldrh	r2, [r3]
   14738:	cmp	r2, #5
   1473c:	bls	148a4 <test_type_aliases@@Base+0x238>
   14740:	ldrh	r1, [r3, #4]
   14744:	cmp	r1, #0
   14748:	beq	148a4 <test_type_aliases@@Base+0x238>
   1474c:	ldrsb	r1, [ip, r1]
   14750:	cmn	r1, #128	; 0x80
   14754:	bne	148a4 <test_type_aliases@@Base+0x238>
   14758:	cmp	r2, #9
   1475c:	bls	148a4 <test_type_aliases@@Base+0x238>
   14760:	ldrh	r1, [r3, #8]
   14764:	cmp	r1, #0
   14768:	beq	148a4 <test_type_aliases@@Base+0x238>
   1476c:	ldrsh	r1, [ip, r1]
   14770:	cmn	r1, #32768	; 0x8000
   14774:	bne	148a4 <test_type_aliases@@Base+0x238>
   14778:	cmp	r2, #13
   1477c:	bls	148a4 <test_type_aliases@@Base+0x238>
   14780:	ldrh	r1, [r3, #12]
   14784:	cmp	r1, #0
   14788:	beq	148a4 <test_type_aliases@@Base+0x238>
   1478c:	ldr	r1, [ip, r1]
   14790:	cmp	r1, #-2147483648	; 0x80000000
   14794:	bne	148a4 <test_type_aliases@@Base+0x238>
   14798:	cmp	r2, #17
   1479c:	bls	148a4 <test_type_aliases@@Base+0x238>
   147a0:	ldrh	r1, [r3, #16]
   147a4:	cmp	r1, #0
   147a8:	beq	148a4 <test_type_aliases@@Base+0x238>
   147ac:	ldrd	r0, [r1, ip]
   147b0:	cmp	r1, #-2147483648	; 0x80000000
   147b4:	cmpeq	r0, #0
   147b8:	bne	148a4 <test_type_aliases@@Base+0x238>
   147bc:	cmp	r2, #7
   147c0:	bls	148a4 <test_type_aliases@@Base+0x238>
   147c4:	ldrh	r1, [r3, #6]
   147c8:	cmp	r1, #0
   147cc:	beq	148a4 <test_type_aliases@@Base+0x238>
   147d0:	ldrb	r1, [ip, r1]
   147d4:	cmp	r1, #255	; 0xff
   147d8:	bne	148a4 <test_type_aliases@@Base+0x238>
   147dc:	cmp	r2, #11
   147e0:	bls	148a4 <test_type_aliases@@Base+0x238>
   147e4:	ldrh	r1, [r3, #10]
   147e8:	cmp	r1, #0
   147ec:	beq	148a4 <test_type_aliases@@Base+0x238>
   147f0:	ldrh	r0, [ip, r1]
   147f4:	ldr	r1, [pc, #924]	; 14b98 <test_type_aliases@@Base+0x52c>
   147f8:	cmp	r0, r1
   147fc:	bne	148a4 <test_type_aliases@@Base+0x238>
   14800:	cmp	r2, #15
   14804:	bls	148a4 <test_type_aliases@@Base+0x238>
   14808:	ldrh	r1, [r3, #14]
   1480c:	cmp	r1, #0
   14810:	beq	148a4 <test_type_aliases@@Base+0x238>
   14814:	ldr	r1, [ip, r1]
   14818:	cmn	r1, #1
   1481c:	bne	148a4 <test_type_aliases@@Base+0x238>
   14820:	cmp	r2, #19
   14824:	bls	148a4 <test_type_aliases@@Base+0x238>
   14828:	ldrh	r1, [r3, #18]
   1482c:	cmp	r1, #0
   14830:	beq	148a4 <test_type_aliases@@Base+0x238>
   14834:	ldrd	r6, [ip, r1]
   14838:	mvn	r0, #0
   1483c:	mvn	r1, #0
   14840:	cmp	r7, r1
   14844:	cmpeq	r6, r0
   14848:	bne	148a4 <test_type_aliases@@Base+0x238>
   1484c:	cmp	r2, #21
   14850:	bls	148a4 <test_type_aliases@@Base+0x238>
   14854:	ldrh	r1, [r3, #20]
   14858:	cmp	r1, #0
   1485c:	beq	148a4 <test_type_aliases@@Base+0x238>
   14860:	add	r1, ip, r1
   14864:	vldr	s14, [r1]
   14868:	vldr	s15, [pc, #792]	; 14b88 <test_type_aliases@@Base+0x51c>
   1486c:	vcmp.f32	s14, s15
   14870:	vmrs	APSR_nzcv, fpscr
   14874:	bne	148a4 <test_type_aliases@@Base+0x238>
   14878:	cmp	r2, #23
   1487c:	bls	148a4 <test_type_aliases@@Base+0x238>
   14880:	ldrh	r3, [r3, #22]
   14884:	cmp	r3, #0
   14888:	beq	148a4 <test_type_aliases@@Base+0x238>
   1488c:	add	r3, ip, r3
   14890:	vldr	d6, [r3]
   14894:	vldr	d7, [pc, #740]	; 14b80 <test_type_aliases@@Base+0x514>
   14898:	vcmp.f64	d6, d7
   1489c:	vmrs	APSR_nzcv, fpscr
   148a0:	beq	148b0 <test_type_aliases@@Base+0x244>
   148a4:	ldr	r0, [pc, #752]	; 14b9c <test_type_aliases@@Base+0x530>
   148a8:	bl	129f0 <puts@plt>
   148ac:	mvn	r5, #0
   148b0:	mov	r0, r4
   148b4:	bl	21a64 <flatcc_builder_aligned_free@@Base>
   148b8:	mov	r0, r5
   148bc:	add	sp, sp, #20
   148c0:	pop	{r4, r5, r6, r7, pc}
   148c4:	mov	r1, #12
   148c8:	mov	r0, r4
   148cc:	bl	1f804 <flatcc_builder_start_table@@Base>
   148d0:	cmp	r0, #0
   148d4:	bne	14ad8 <test_type_aliases@@Base+0x46c>
   148d8:	mov	r3, #8
   148dc:	mov	r2, r3
   148e0:	mov	r1, #6
   148e4:	mov	r0, r4
   148e8:	bl	21200 <flatcc_builder_table_add@@Base>
   148ec:	cmp	r0, #0
   148f0:	beq	14ae8 <test_type_aliases@@Base+0x47c>
   148f4:	mov	r2, #0
   148f8:	mov	r3, #-2147483648	; 0x80000000
   148fc:	strd	r2, [r0]
   14900:	mov	r3, #8
   14904:	mov	r2, r3
   14908:	mov	r1, #7
   1490c:	mov	r0, r4
   14910:	bl	21200 <flatcc_builder_table_add@@Base>
   14914:	cmp	r0, #0
   14918:	beq	14af0 <test_type_aliases@@Base+0x484>
   1491c:	mvn	r2, #0
   14920:	mvn	r3, #0
   14924:	strd	r2, [r0]
   14928:	mov	r3, #8
   1492c:	mov	r2, r3
   14930:	mov	r1, #9
   14934:	mov	r0, r4
   14938:	bl	21200 <flatcc_builder_table_add@@Base>
   1493c:	cmp	r0, #0
   14940:	beq	14af8 <test_type_aliases@@Base+0x48c>
   14944:	ldr	r2, [pc, #596]	; 14ba0 <test_type_aliases@@Base+0x534>
   14948:	ldr	r3, [pc, #596]	; 14ba4 <test_type_aliases@@Base+0x538>
   1494c:	strd	r2, [r0]
   14950:	mov	r3, #4
   14954:	mov	r2, r3
   14958:	mov	r1, r3
   1495c:	mov	r0, r4
   14960:	bl	21200 <flatcc_builder_table_add@@Base>
   14964:	cmp	r0, #0
   14968:	beq	14b00 <test_type_aliases@@Base+0x494>
   1496c:	mov	r3, #-2147483648	; 0x80000000
   14970:	str	r3, [r0]
   14974:	mov	r3, #4
   14978:	mov	r2, r3
   1497c:	mov	r1, #5
   14980:	mov	r0, r4
   14984:	bl	21200 <flatcc_builder_table_add@@Base>
   14988:	cmp	r0, #0
   1498c:	beq	14b08 <test_type_aliases@@Base+0x49c>
   14990:	mvn	r3, #0
   14994:	str	r3, [r0]
   14998:	mov	r3, #4
   1499c:	mov	r2, r3
   149a0:	mov	r1, #8
   149a4:	mov	r0, r4
   149a8:	bl	21200 <flatcc_builder_table_add@@Base>
   149ac:	cmp	r0, #0
   149b0:	beq	14b10 <test_type_aliases@@Base+0x4a4>
   149b4:	ldr	r3, [pc, #492]	; 14ba8 <test_type_aliases@@Base+0x53c>
   149b8:	str	r3, [r0]
   149bc:	cmp	r5, #0
   149c0:	bne	149cc <test_type_aliases@@Base+0x360>
   149c4:	mov	r1, #0
   149c8:	b	14adc <test_type_aliases@@Base+0x470>
   149cc:	mov	r1, #10
   149d0:	mov	r0, r4
   149d4:	bl	213cc <flatcc_builder_table_add_offset@@Base>
   149d8:	cmp	r0, #0
   149dc:	beq	149c4 <test_type_aliases@@Base+0x358>
   149e0:	str	r5, [r0]
   149e4:	cmp	r6, #0
   149e8:	bne	149f4 <test_type_aliases@@Base+0x388>
   149ec:	mov	r1, #0
   149f0:	b	14adc <test_type_aliases@@Base+0x470>
   149f4:	mov	r1, #11
   149f8:	mov	r0, r4
   149fc:	bl	213cc <flatcc_builder_table_add_offset@@Base>
   14a00:	cmp	r0, #0
   14a04:	beq	149ec <test_type_aliases@@Base+0x380>
   14a08:	str	r6, [r0]
   14a0c:	mov	r3, #2
   14a10:	mov	r2, r3
   14a14:	mov	r1, r3
   14a18:	mov	r0, r4
   14a1c:	bl	21200 <flatcc_builder_table_add@@Base>
   14a20:	cmp	r0, #0
   14a24:	beq	14b18 <test_type_aliases@@Base+0x4ac>
   14a28:	mov	r3, #32768	; 0x8000
   14a2c:	strh	r3, [r0]
   14a30:	mov	r3, #2
   14a34:	mov	r2, r3
   14a38:	mov	r1, #3
   14a3c:	mov	r0, r4
   14a40:	bl	21200 <flatcc_builder_table_add@@Base>
   14a44:	cmp	r0, #0
   14a48:	beq	14b20 <test_type_aliases@@Base+0x4b4>
   14a4c:	mvn	r3, #0
   14a50:	strh	r3, [r0]
   14a54:	mov	r3, #1
   14a58:	mov	r2, r3
   14a5c:	mov	r1, #0
   14a60:	mov	r0, r4
   14a64:	bl	21200 <flatcc_builder_table_add@@Base>
   14a68:	cmp	r0, #0
   14a6c:	beq	14b28 <test_type_aliases@@Base+0x4bc>
   14a70:	mvn	r3, #127	; 0x7f
   14a74:	strb	r3, [r0]
   14a78:	mov	r3, #1
   14a7c:	mov	r2, r3
   14a80:	mov	r1, r3
   14a84:	mov	r0, r4
   14a88:	bl	21200 <flatcc_builder_table_add@@Base>
   14a8c:	cmp	r0, #0
   14a90:	beq	14b30 <test_type_aliases@@Base+0x4c4>
   14a94:	mvn	r3, #0
   14a98:	strb	r3, [r0]
   14a9c:	mov	r2, #0
   14aa0:	ldr	r1, [pc, #260]	; 14bac <test_type_aliases@@Base+0x540>
   14aa4:	mov	r0, r4
   14aa8:	bl	201a8 <flatcc_builder_check_required@@Base>
   14aac:	cmp	r0, #0
   14ab0:	beq	14ac4 <test_type_aliases@@Base+0x458>
   14ab4:	mov	r0, r4
   14ab8:	bl	20254 <flatcc_builder_end_table@@Base>
   14abc:	mov	r1, r0
   14ac0:	b	14adc <test_type_aliases@@Base+0x470>
   14ac4:	ldr	r3, [pc, #228]	; 14bb0 <test_type_aliases@@Base+0x544>
   14ac8:	mov	r2, #237	; 0xed
   14acc:	ldr	r1, [pc, #224]	; 14bb4 <test_type_aliases@@Base+0x548>
   14ad0:	ldr	r0, [pc, #224]	; 14bb8 <test_type_aliases@@Base+0x54c>
   14ad4:	bl	12a8c <__assert_fail@plt>
   14ad8:	mov	r1, #0
   14adc:	mov	r0, r4
   14ae0:	bl	1ea90 <flatcc_builder_end_buffer@@Base>
   14ae4:	b	146e0 <test_type_aliases@@Base+0x74>
   14ae8:	mov	r1, #0
   14aec:	b	14adc <test_type_aliases@@Base+0x470>
   14af0:	mov	r1, #0
   14af4:	b	14adc <test_type_aliases@@Base+0x470>
   14af8:	mov	r1, #0
   14afc:	b	14adc <test_type_aliases@@Base+0x470>
   14b00:	mov	r1, #0
   14b04:	b	14adc <test_type_aliases@@Base+0x470>
   14b08:	mov	r1, #0
   14b0c:	b	14adc <test_type_aliases@@Base+0x470>
   14b10:	mov	r1, #0
   14b14:	b	14adc <test_type_aliases@@Base+0x470>
   14b18:	mov	r1, #0
   14b1c:	b	14adc <test_type_aliases@@Base+0x470>
   14b20:	mov	r1, #0
   14b24:	b	14adc <test_type_aliases@@Base+0x470>
   14b28:	mov	r1, #0
   14b2c:	b	14adc <test_type_aliases@@Base+0x470>
   14b30:	mov	r1, #0
   14b34:	b	14adc <test_type_aliases@@Base+0x470>
   14b38:	ldr	r3, [pc, #124]	; 14bbc <test_type_aliases@@Base+0x550>
   14b3c:	ldr	r3, [r3]
   14b40:	ldr	r2, [sp, #12]
   14b44:	mov	r1, r4
   14b48:	ldr	r0, [pc, #112]	; 14bc0 <test_type_aliases@@Base+0x554>
   14b4c:	bl	134b0 <_start@@Base+0xa18>
   14b50:	mov	r0, r5
   14b54:	bl	220f4 <flatcc_verify_error_string@@Base>
   14b58:	mov	r1, r0
   14b5c:	ldr	r0, [pc, #96]	; 14bc4 <test_type_aliases@@Base+0x558>
   14b60:	bl	1299c <printf@plt>
   14b64:	b	148b0 <test_type_aliases@@Base+0x244>
   14b68:	ldr	r3, [pc, #88]	; 14bc8 <test_type_aliases@@Base+0x55c>
   14b6c:	ldr	r2, [pc, #88]	; 14bcc <test_type_aliases@@Base+0x560>
   14b70:	ldr	r1, [pc, #88]	; 14bd0 <test_type_aliases@@Base+0x564>
   14b74:	ldr	r0, [pc, #88]	; 14bd4 <test_type_aliases@@Base+0x568>
   14b78:	bl	12a8c <__assert_fail@plt>
   14b7c:	nop			; (mov r0, r0)
   14b80:	strbtvs	r6, [r6], -r6, ror #12
   14b84:	andmi	r6, r2, r6, ror #12
   14b88:	andsmi	r3, r3, r3, lsr r3
   14b8c:	andeq	r4, r2, r0, asr r0
   14b90:	andeq	r3, r1, ip, lsr r3
   14b94:	movtpl	r4, #61261	; 0xef4d
   14b98:	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
   14b9c:	andeq	r4, r2, ip, lsr #3
   14ba0:	strbtvs	r6, [r6], -r6, ror #12
   14ba4:	andmi	r6, r2, r6, ror #12
   14ba8:	andsmi	r3, r3, r3, lsr r3
   14bac:	andeq	r3, r2, r0, lsr #16
   14bb0:	andeq	r3, r2, r4, lsr #16
   14bb4:	andeq	r4, r2, r8, asr r0
   14bb8:	strheq	r4, [r2], -ip
   14bbc:	andeq	r8, r3, r0, ror r0
   14bc0:	andeq	r4, r2, ip, ror #2
   14bc4:	andeq	r4, r2, r0, lsl #3
   14bc8:	andeq	r3, r2, r4, asr #16
   14bcc:	andeq	r0, r0, sp, ror #5
   14bd0:	andeq	r3, r2, ip, ror sp
   14bd4:	andeq	r3, r2, r0, ror #27

00014bd8 <test_empty_monster@@Base>:
   14bd8:	push	{r4, r5, lr}
   14bdc:	sub	sp, sp, #12
   14be0:	mov	r4, r0
   14be4:	bl	1e238 <flatcc_builder_reset@@Base>
   14be8:	mov	r3, #0
   14bec:	mov	r2, r3
   14bf0:	ldr	r1, [pc, #300]	; 14d24 <test_empty_monster@@Base+0x14c>
   14bf4:	mov	r0, r4
   14bf8:	bl	1e9d8 <flatcc_builder_start_buffer@@Base>
   14bfc:	mov	r1, #36	; 0x24
   14c00:	mov	r0, r4
   14c04:	bl	1f804 <flatcc_builder_start_table@@Base>
   14c08:	ldr	r1, [pc, #280]	; 14d28 <test_empty_monster@@Base+0x150>
   14c0c:	mov	r0, r4
   14c10:	bl	2108c <flatcc_builder_create_string_str@@Base>
   14c14:	subs	r5, r0, #0
   14c18:	beq	14c30 <test_empty_monster@@Base+0x58>
   14c1c:	mov	r1, #3
   14c20:	mov	r0, r4
   14c24:	bl	213cc <flatcc_builder_table_add_offset@@Base>
   14c28:	cmp	r0, #0
   14c2c:	strne	r5, [r0]
   14c30:	mov	r2, #1
   14c34:	ldr	r1, [pc, #240]	; 14d2c <test_empty_monster@@Base+0x154>
   14c38:	mov	r0, r4
   14c3c:	bl	201a8 <flatcc_builder_check_required@@Base>
   14c40:	cmp	r0, #0
   14c44:	beq	14ce4 <test_empty_monster@@Base+0x10c>
   14c48:	mov	r0, r4
   14c4c:	bl	20254 <flatcc_builder_end_table@@Base>
   14c50:	mov	r1, r0
   14c54:	mov	r0, r4
   14c58:	bl	1ea90 <flatcc_builder_end_buffer@@Base>
   14c5c:	add	r1, sp, #4
   14c60:	mov	r0, r4
   14c64:	bl	21958 <flatcc_builder_finalize_aligned_buffer@@Base>
   14c68:	mov	r4, r0
   14c6c:	ldr	r3, [pc, #188]	; 14d30 <test_empty_monster@@Base+0x158>
   14c70:	ldr	r3, [r3]
   14c74:	ldr	r2, [sp, #4]
   14c78:	mov	r1, r0
   14c7c:	ldr	r0, [pc, #176]	; 14d34 <test_empty_monster@@Base+0x15c>
   14c80:	bl	134b0 <_start@@Base+0xa18>
   14c84:	mov	r0, r4
   14c88:	bl	144d4 <verify_empty_monster@@Base>
   14c8c:	subs	r5, r0, #0
   14c90:	bne	14cd0 <test_empty_monster@@Base+0xf8>
   14c94:	ldr	r3, [pc, #156]	; 14d38 <test_empty_monster@@Base+0x160>
   14c98:	ldr	r2, [pc, #132]	; 14d24 <test_empty_monster@@Base+0x14c>
   14c9c:	ldr	r1, [sp, #4]
   14ca0:	mov	r0, r4
   14ca4:	bl	22dd4 <flatcc_verify_table_as_root@@Base>
   14ca8:	subs	r5, r0, #0
   14cac:	bne	14cf8 <test_empty_monster@@Base+0x120>
   14cb0:	ldr	r3, [pc, #128]	; 14d38 <test_empty_monster@@Base+0x160>
   14cb4:	ldr	r2, [pc, #104]	; 14d24 <test_empty_monster@@Base+0x14c>
   14cb8:	ldr	r1, [sp, #4]
   14cbc:	sub	r1, r1, #1
   14cc0:	mov	r0, r4
   14cc4:	bl	22dd4 <flatcc_verify_table_as_root@@Base>
   14cc8:	cmp	r0, #0
   14ccc:	beq	14d14 <test_empty_monster@@Base+0x13c>
   14cd0:	mov	r0, r4
   14cd4:	bl	21a64 <flatcc_builder_aligned_free@@Base>
   14cd8:	mov	r0, r5
   14cdc:	add	sp, sp, #12
   14ce0:	pop	{r4, r5, pc}
   14ce4:	ldr	r3, [pc, #80]	; 14d3c <test_empty_monster@@Base+0x164>
   14ce8:	mov	r2, #235	; 0xeb
   14cec:	ldr	r1, [pc, #76]	; 14d40 <test_empty_monster@@Base+0x168>
   14cf0:	ldr	r0, [pc, #76]	; 14d44 <test_empty_monster@@Base+0x16c>
   14cf4:	bl	12a8c <__assert_fail@plt>
   14cf8:	mov	r0, r5
   14cfc:	bl	220f4 <flatcc_verify_error_string@@Base>
   14d00:	mov	r1, r0
   14d04:	ldr	r0, [pc, #60]	; 14d48 <test_empty_monster@@Base+0x170>
   14d08:	bl	1299c <printf@plt>
   14d0c:	mvn	r5, #0
   14d10:	b	14cd8 <test_empty_monster@@Base+0x100>
   14d14:	ldr	r0, [pc, #48]	; 14d4c <test_empty_monster@@Base+0x174>
   14d18:	bl	129f0 <puts@plt>
   14d1c:	mvn	r5, #0
   14d20:	b	14cd8 <test_empty_monster@@Base+0x100>
   14d24:	andeq	r4, r2, r0, asr r0
   14d28:	ldrdeq	r4, [r2], -ip
   14d2c:	andeq	r3, r2, r4, ror #16
   14d30:	andeq	r8, r3, r0, ror r0
   14d34:	andeq	r4, r2, ip, lsl #5
   14d38:	ldrdeq	r3, [r1], -r4
   14d3c:	andeq	r3, r2, r8, ror #16
   14d40:	andeq	r4, r2, r8, asr r0
   14d44:	andeq	r4, r2, r8, ror #3
   14d48:	andeq	r4, r2, r0, lsr #5
   14d4c:	andeq	r4, r2, r8, asr #5

00014d50 <test_typed_empty_monster@@Base>:
   14d50:	push	{r4, r5, r6, lr}
   14d54:	sub	sp, sp, #8
   14d58:	mov	r4, r0
   14d5c:	mov	r5, #0
   14d60:	str	r5, [sp]
   14d64:	bl	1e238 <flatcc_builder_reset@@Base>
   14d68:	mov	r3, r5
   14d6c:	mov	r2, r5
   14d70:	ldr	r1, [pc, #700]	; 15034 <test_typed_empty_monster@@Base+0x2e4>
   14d74:	mov	r0, r4
   14d78:	bl	1e9d8 <flatcc_builder_start_buffer@@Base>
   14d7c:	mov	r1, #36	; 0x24
   14d80:	mov	r0, r4
   14d84:	bl	1f804 <flatcc_builder_start_table@@Base>
   14d88:	ldr	r1, [pc, #680]	; 15038 <test_typed_empty_monster@@Base+0x2e8>
   14d8c:	mov	r0, r4
   14d90:	bl	2108c <flatcc_builder_create_string_str@@Base>
   14d94:	subs	r5, r0, #0
   14d98:	beq	14db0 <test_typed_empty_monster@@Base+0x60>
   14d9c:	mov	r1, #3
   14da0:	mov	r0, r4
   14da4:	bl	213cc <flatcc_builder_table_add_offset@@Base>
   14da8:	cmp	r0, #0
   14dac:	strne	r5, [r0]
   14db0:	mov	r2, #1
   14db4:	ldr	r1, [pc, #640]	; 1503c <test_typed_empty_monster@@Base+0x2ec>
   14db8:	mov	r0, r4
   14dbc:	bl	201a8 <flatcc_builder_check_required@@Base>
   14dc0:	cmp	r0, #0
   14dc4:	beq	14f5c <test_typed_empty_monster@@Base+0x20c>
   14dc8:	mov	r0, r4
   14dcc:	bl	20254 <flatcc_builder_end_table@@Base>
   14dd0:	mov	r1, r0
   14dd4:	mov	r0, r4
   14dd8:	bl	1ea90 <flatcc_builder_end_buffer@@Base>
   14ddc:	add	r1, sp, #4
   14de0:	mov	r0, r4
   14de4:	bl	21958 <flatcc_builder_finalize_aligned_buffer@@Base>
   14de8:	mov	r4, r0
   14dec:	ldr	r3, [pc, #588]	; 15040 <test_typed_empty_monster@@Base+0x2f0>
   14df0:	ldr	r3, [r3]
   14df4:	ldr	r2, [sp, #4]
   14df8:	mov	r1, r0
   14dfc:	ldr	r0, [pc, #576]	; 15044 <test_typed_empty_monster@@Base+0x2f4>
   14e00:	bl	134b0 <_start@@Base+0xa18>
   14e04:	ldr	r1, [r4, #4]
   14e08:	mov	r2, #77	; 0x4d
   14e0c:	ldr	r3, [pc, #564]	; 15048 <test_typed_empty_monster@@Base+0x2f8>
   14e10:	ldr	r0, [pc, #564]	; 1504c <test_typed_empty_monster@@Base+0x2fc>
   14e14:	ldr	ip, [pc, #564]	; 15050 <test_typed_empty_monster@@Base+0x300>
   14e18:	eor	r3, r3, r2
   14e1c:	mul	r3, ip, r3
   14e20:	ldrb	r2, [r0, #1]!
   14e24:	cmp	r2, #0
   14e28:	bne	14e18 <test_typed_empty_monster@@Base+0xc8>
   14e2c:	cmp	r3, #0
   14e30:	beq	15018 <test_typed_empty_monster@@Base+0x2c8>
   14e34:	cmp	r3, r1
   14e38:	bne	15024 <test_typed_empty_monster@@Base+0x2d4>
   14e3c:	ldr	r3, [pc, #528]	; 15054 <test_typed_empty_monster@@Base+0x304>
   14e40:	cmp	r1, r3
   14e44:	bne	14f70 <test_typed_empty_monster@@Base+0x220>
   14e48:	mov	r0, r4
   14e4c:	bl	144d4 <verify_empty_monster@@Base>
   14e50:	cmp	r0, #0
   14e54:	beq	14f80 <test_typed_empty_monster@@Base+0x230>
   14e58:	ldr	r3, [pc, #504]	; 15058 <test_typed_empty_monster@@Base+0x308>
   14e5c:	ldr	r2, [pc, #464]	; 15034 <test_typed_empty_monster@@Base+0x2e4>
   14e60:	ldr	r1, [sp, #4]
   14e64:	mov	r0, r4
   14e68:	bl	22dd4 <flatcc_verify_table_as_root@@Base>
   14e6c:	subs	r5, r0, #0
   14e70:	bne	14f90 <test_typed_empty_monster@@Base+0x240>
   14e74:	ldr	r3, [pc, #476]	; 15058 <test_typed_empty_monster@@Base+0x308>
   14e78:	ldr	r2, [pc, #436]	; 15034 <test_typed_empty_monster@@Base+0x2e4>
   14e7c:	ldr	r1, [sp, #4]
   14e80:	mov	r0, r4
   14e84:	bl	22dd4 <flatcc_verify_table_as_root@@Base>
   14e88:	subs	r5, r0, #0
   14e8c:	bne	14fb8 <test_typed_empty_monster@@Base+0x268>
   14e90:	ldr	r3, [pc, #448]	; 15058 <test_typed_empty_monster@@Base+0x308>
   14e94:	ldr	r2, [pc, #440]	; 15054 <test_typed_empty_monster@@Base+0x304>
   14e98:	ldr	r1, [sp, #4]
   14e9c:	mov	r0, r4
   14ea0:	bl	22ed8 <flatcc_verify_table_as_typed_root@@Base>
   14ea4:	subs	r5, r0, #0
   14ea8:	bne	14fd0 <test_typed_empty_monster@@Base+0x280>
   14eac:	ldr	r1, [sp, #4]
   14eb0:	ldr	r0, [pc, #404]	; 1504c <test_typed_empty_monster@@Base+0x2fc>
   14eb4:	ldr	r2, [pc, #396]	; 15048 <test_typed_empty_monster@@Base+0x2f8>
   14eb8:	mov	r3, #77	; 0x4d
   14ebc:	ldr	ip, [pc, #396]	; 15050 <test_typed_empty_monster@@Base+0x300>
   14ec0:	eor	r2, r2, r3
   14ec4:	mul	r2, ip, r2
   14ec8:	ldrb	r3, [r0, #1]!
   14ecc:	cmp	r3, #0
   14ed0:	bne	14ec0 <test_typed_empty_monster@@Base+0x170>
   14ed4:	ldr	r3, [pc, #380]	; 15058 <test_typed_empty_monster@@Base+0x308>
   14ed8:	ldr	r0, [pc, #360]	; 15048 <test_typed_empty_monster@@Base+0x2f8>
   14edc:	cmp	r2, #0
   14ee0:	moveq	r2, r0
   14ee4:	mov	r0, r4
   14ee8:	bl	22ed8 <flatcc_verify_table_as_typed_root@@Base>
   14eec:	subs	r5, r0, #0
   14ef0:	bne	14fe8 <test_typed_empty_monster@@Base+0x298>
   14ef4:	mvn	r3, #126	; 0x7e
   14ef8:	strb	r3, [sp]
   14efc:	mvn	r3, #11
   14f00:	strb	r3, [sp, #1]
   14f04:	mov	r3, #14
   14f08:	strb	r3, [sp, #2]
   14f0c:	mov	r3, #51	; 0x33
   14f10:	strb	r3, [sp, #3]
   14f14:	ldr	r3, [pc, #316]	; 15058 <test_typed_empty_monster@@Base+0x308>
   14f18:	mov	r2, sp
   14f1c:	ldr	r1, [sp, #4]
   14f20:	mov	r0, r4
   14f24:	bl	22dd4 <flatcc_verify_table_as_root@@Base>
   14f28:	subs	r5, r0, #0
   14f2c:	bne	15000 <test_typed_empty_monster@@Base+0x2b0>
   14f30:	ldr	r3, [pc, #288]	; 15058 <test_typed_empty_monster@@Base+0x308>
   14f34:	ldr	r2, [pc, #288]	; 1505c <test_typed_empty_monster@@Base+0x30c>
   14f38:	ldr	r1, [sp, #4]
   14f3c:	mov	r0, r4
   14f40:	bl	22dd4 <flatcc_verify_table_as_root@@Base>
   14f44:	subs	r6, r0, #0
   14f48:	bne	14fa4 <test_typed_empty_monster@@Base+0x254>
   14f4c:	ldr	r0, [pc, #268]	; 15060 <test_typed_empty_monster@@Base+0x310>
   14f50:	bl	129f0 <puts@plt>
   14f54:	mov	r5, r6
   14f58:	b	14fa4 <test_typed_empty_monster@@Base+0x254>
   14f5c:	ldr	r3, [pc, #256]	; 15064 <test_typed_empty_monster@@Base+0x314>
   14f60:	mov	r2, #235	; 0xeb
   14f64:	ldr	r1, [pc, #252]	; 15068 <test_typed_empty_monster@@Base+0x318>
   14f68:	ldr	r0, [pc, #252]	; 1506c <test_typed_empty_monster@@Base+0x31c>
   14f6c:	bl	12a8c <__assert_fail@plt>
   14f70:	ldr	r0, [pc, #248]	; 15070 <test_typed_empty_monster@@Base+0x320>
   14f74:	bl	129f0 <puts@plt>
   14f78:	mvn	r5, #0
   14f7c:	b	14fa4 <test_typed_empty_monster@@Base+0x254>
   14f80:	ldr	r0, [pc, #236]	; 15074 <test_typed_empty_monster@@Base+0x324>
   14f84:	bl	129f0 <puts@plt>
   14f88:	mvn	r5, #0
   14f8c:	b	14fa4 <test_typed_empty_monster@@Base+0x254>
   14f90:	mov	r0, r5
   14f94:	bl	220f4 <flatcc_verify_error_string@@Base>
   14f98:	mov	r1, r0
   14f9c:	ldr	r0, [pc, #212]	; 15078 <test_typed_empty_monster@@Base+0x328>
   14fa0:	bl	1299c <printf@plt>
   14fa4:	mov	r0, r4
   14fa8:	bl	21a64 <flatcc_builder_aligned_free@@Base>
   14fac:	mov	r0, r5
   14fb0:	add	sp, sp, #8
   14fb4:	pop	{r4, r5, r6, pc}
   14fb8:	mov	r0, r5
   14fbc:	bl	220f4 <flatcc_verify_error_string@@Base>
   14fc0:	mov	r1, r0
   14fc4:	ldr	r0, [pc, #172]	; 15078 <test_typed_empty_monster@@Base+0x328>
   14fc8:	bl	1299c <printf@plt>
   14fcc:	b	14fa4 <test_typed_empty_monster@@Base+0x254>
   14fd0:	mov	r0, r5
   14fd4:	bl	220f4 <flatcc_verify_error_string@@Base>
   14fd8:	mov	r1, r0
   14fdc:	ldr	r0, [pc, #152]	; 1507c <test_typed_empty_monster@@Base+0x32c>
   14fe0:	bl	1299c <printf@plt>
   14fe4:	b	14fa4 <test_typed_empty_monster@@Base+0x254>
   14fe8:	mov	r0, r5
   14fec:	bl	220f4 <flatcc_verify_error_string@@Base>
   14ff0:	mov	r1, r0
   14ff4:	ldr	r0, [pc, #132]	; 15080 <test_typed_empty_monster@@Base+0x330>
   14ff8:	bl	1299c <printf@plt>
   14ffc:	b	14fa4 <test_typed_empty_monster@@Base+0x254>
   15000:	mov	r0, r5
   15004:	bl	220f4 <flatcc_verify_error_string@@Base>
   15008:	mov	r1, r0
   1500c:	ldr	r0, [pc, #100]	; 15078 <test_typed_empty_monster@@Base+0x328>
   15010:	bl	1299c <printf@plt>
   15014:	b	14fa4 <test_typed_empty_monster@@Base+0x254>
   15018:	ldr	r3, [pc, #40]	; 15048 <test_typed_empty_monster@@Base+0x2f8>
   1501c:	cmp	r1, r3
   15020:	beq	14f70 <test_typed_empty_monster@@Base+0x220>
   15024:	ldr	r0, [pc, #88]	; 15084 <test_typed_empty_monster@@Base+0x334>
   15028:	bl	1299c <printf@plt>
   1502c:	mvn	r5, #0
   15030:	b	14fa4 <test_typed_empty_monster@@Base+0x254>
   15034:	andeq	r4, r2, r0, lsl r3
   15038:	ldrdeq	r4, [r2], -ip
   1503c:	andeq	r3, r2, r4, ror #16
   15040:	andeq	r8, r3, r0, ror r0
   15044:	andeq	r4, r2, r8, lsl r3
   15048:	tsthi	ip, r5, asr #27
   1504c:	strdeq	r4, [r2], -r8
   15050:			; <UNDEFINED> instruction: 0x01000193
   15054:	movwcc	pc, #58497	; 0xe481	; <UNPREDICTABLE>
   15058:	ldrdeq	r3, [r1], -r4
   1505c:	andeq	r4, r2, r0, asr r0
   15060:	andeq	r4, r2, r8, ror r4
   15064:	andeq	r3, r2, r8, ror #16
   15068:	andeq	r4, r2, r8, asr r0
   1506c:	andeq	r4, r2, r8, ror #3
   15070:	andeq	r4, r2, r8, ror #6
   15074:	muleq	r2, r0, r3
   15078:	ldrdeq	r4, [r2], -r0
   1507c:	andeq	r4, r2, r0, lsl #8
   15080:	andeq	r4, r2, r8, lsr r4
   15084:	andeq	r4, r2, r4, lsr r3

00015088 <verify_table_with_emptystruct@@Base>:
   15088:	push	{r4, lr}
   1508c:	cmp	r0, #0
   15090:	beq	150e0 <verify_table_with_emptystruct@@Base+0x58>
   15094:	ldr	r2, [r0, #4]
   15098:	ldr	r3, [pc, #96]	; 15100 <verify_table_with_emptystruct@@Base+0x78>
   1509c:	cmp	r2, r3
   150a0:	bne	150e0 <verify_table_with_emptystruct@@Base+0x58>
   150a4:	ldr	r3, [r0]
   150a8:	adds	r2, r0, r3
   150ac:	beq	150e0 <verify_table_with_emptystruct@@Base+0x58>
   150b0:	ldr	r3, [r0, r3]
   150b4:	sub	r3, r2, r3
   150b8:	ldrh	r1, [r3]
   150bc:	cmp	r1, #5
   150c0:	bls	150f0 <verify_table_with_emptystruct@@Base+0x68>
   150c4:	ldrh	r3, [r3, #4]
   150c8:	cmp	r3, #0
   150cc:	beq	150f0 <verify_table_with_emptystruct@@Base+0x68>
   150d0:	cmn	r2, r3
   150d4:	beq	150f0 <verify_table_with_emptystruct@@Base+0x68>
   150d8:	mov	r0, #0
   150dc:	pop	{r4, pc}
   150e0:	ldr	r0, [pc, #28]	; 15104 <verify_table_with_emptystruct@@Base+0x7c>
   150e4:	bl	129f0 <puts@plt>
   150e8:	mvn	r0, #0
   150ec:	pop	{r4, pc}
   150f0:	ldr	r0, [pc, #16]	; 15108 <verify_table_with_emptystruct@@Base+0x80>
   150f4:	bl	129f0 <puts@plt>
   150f8:	mvn	r0, #0
   150fc:	pop	{r4, pc}
   15100:	movtpl	r4, #61261	; 0xef4d
   15104:	andeq	r4, r2, r4, asr #9
   15108:	andeq	r4, r2, ip, ror #9

0001510c <test_table_with_emptystruct@@Base>:
   1510c:	push	{r4, r5, lr}
   15110:	sub	sp, sp, #12
   15114:	mov	r4, r0
   15118:	bl	1e238 <flatcc_builder_reset@@Base>
   1511c:	mov	r3, #0
   15120:	mov	r2, r3
   15124:	ldr	r1, [pc, #212]	; 15200 <test_table_with_emptystruct@@Base+0xf4>
   15128:	mov	r0, r4
   1512c:	bl	1e9d8 <flatcc_builder_start_buffer@@Base>
   15130:	cmp	r0, #0
   15134:	beq	15180 <test_table_with_emptystruct@@Base+0x74>
   15138:	add	r1, sp, #4
   1513c:	mov	r0, r4
   15140:	bl	21958 <flatcc_builder_finalize_aligned_buffer@@Base>
   15144:	mov	r4, r0
   15148:	ldr	r3, [pc, #180]	; 15204 <test_table_with_emptystruct@@Base+0xf8>
   1514c:	ldr	r3, [r3]
   15150:	ldr	r2, [sp, #4]
   15154:	mov	r1, r0
   15158:	ldr	r0, [pc, #168]	; 15208 <test_table_with_emptystruct@@Base+0xfc>
   1515c:	bl	134b0 <_start@@Base+0xa18>
   15160:	mov	r0, r4
   15164:	bl	15088 <verify_table_with_emptystruct@@Base>
   15168:	mov	r5, r0
   1516c:	mov	r0, r4
   15170:	bl	21a64 <flatcc_builder_aligned_free@@Base>
   15174:	mov	r0, r5
   15178:	add	sp, sp, #12
   1517c:	pop	{r4, r5, pc}
   15180:	mov	r1, #1
   15184:	mov	r0, r4
   15188:	bl	1f804 <flatcc_builder_start_table@@Base>
   1518c:	cmp	r0, #0
   15190:	movne	r1, #0
   15194:	beq	151a4 <test_table_with_emptystruct@@Base+0x98>
   15198:	mov	r0, r4
   1519c:	bl	1ea90 <flatcc_builder_end_buffer@@Base>
   151a0:	b	15138 <test_table_with_emptystruct@@Base+0x2c>
   151a4:	mov	r3, #1
   151a8:	mov	r2, #0
   151ac:	mov	r1, r2
   151b0:	mov	r0, r4
   151b4:	bl	21200 <flatcc_builder_table_add@@Base>
   151b8:	cmp	r0, #0
   151bc:	moveq	r1, #0
   151c0:	beq	15198 <test_table_with_emptystruct@@Base+0x8c>
   151c4:	mov	r2, #0
   151c8:	ldr	r1, [pc, #60]	; 1520c <test_table_with_emptystruct@@Base+0x100>
   151cc:	mov	r0, r4
   151d0:	bl	201a8 <flatcc_builder_check_required@@Base>
   151d4:	cmp	r0, #0
   151d8:	beq	151ec <test_table_with_emptystruct@@Base+0xe0>
   151dc:	mov	r0, r4
   151e0:	bl	20254 <flatcc_builder_end_table@@Base>
   151e4:	mov	r1, r0
   151e8:	b	15198 <test_table_with_emptystruct@@Base+0x8c>
   151ec:	ldr	r3, [pc, #28]	; 15210 <test_table_with_emptystruct@@Base+0x104>
   151f0:	mov	r2, #215	; 0xd7
   151f4:	ldr	r1, [pc, #24]	; 15214 <test_table_with_emptystruct@@Base+0x108>
   151f8:	ldr	r0, [pc, #24]	; 15218 <test_table_with_emptystruct@@Base+0x10c>
   151fc:	bl	12a8c <__assert_fail@plt>
   15200:	andeq	r4, r2, r0, asr r0
   15204:	andeq	r8, r3, r0, ror r0
   15208:	andeq	r4, r2, r8, asr #11
   1520c:	andeq	r3, r2, r4, lsl #17
   15210:	andeq	r3, r2, r8, lsl #17
   15214:	andeq	r4, r2, r8, asr r0
   15218:	andeq	r4, r2, r8, lsl #10

0001521c <test_typed_table_with_emptystruct@@Base>:
   1521c:	push	{r4, lr}
   15220:	sub	sp, sp, #8
   15224:	mov	r4, r0
   15228:	bl	1e238 <flatcc_builder_reset@@Base>
   1522c:	mov	r3, #0
   15230:	mov	r2, r3
   15234:	ldr	r1, [pc, #404]	; 153d0 <test_typed_table_with_emptystruct@@Base+0x1b4>
   15238:	mov	r0, r4
   1523c:	bl	1e9d8 <flatcc_builder_start_buffer@@Base>
   15240:	cmp	r0, #0
   15244:	beq	152f0 <test_typed_table_with_emptystruct@@Base+0xd4>
   15248:	add	r1, sp, #4
   1524c:	mov	r0, r4
   15250:	bl	2181c <flatcc_builder_get_direct_buffer@@Base>
   15254:	mov	r4, r0
   15258:	ldr	r3, [pc, #372]	; 153d4 <test_typed_table_with_emptystruct@@Base+0x1b8>
   1525c:	ldr	r3, [r3]
   15260:	ldr	r2, [sp, #4]
   15264:	mov	r1, r0
   15268:	ldr	r0, [pc, #360]	; 153d8 <test_typed_table_with_emptystruct@@Base+0x1bc>
   1526c:	bl	134b0 <_start@@Base+0xa18>
   15270:	ldr	r3, [pc, #356]	; 153dc <test_typed_table_with_emptystruct@@Base+0x1c0>
   15274:	ldr	r2, [pc, #340]	; 153d0 <test_typed_table_with_emptystruct@@Base+0x1b4>
   15278:	ldr	r1, [sp, #4]
   1527c:	mov	r0, r4
   15280:	bl	22dd4 <flatcc_verify_table_as_root@@Base>
   15284:	cmp	r0, #0
   15288:	bne	15370 <test_typed_table_with_emptystruct@@Base+0x154>
   1528c:	ldr	r3, [pc, #328]	; 153dc <test_typed_table_with_emptystruct@@Base+0x1c0>
   15290:	ldr	r2, [pc, #312]	; 153d0 <test_typed_table_with_emptystruct@@Base+0x1b4>
   15294:	ldr	r1, [sp, #4]
   15298:	mov	r0, r4
   1529c:	bl	22dd4 <flatcc_verify_table_as_root@@Base>
   152a0:	cmp	r0, #0
   152a4:	bne	15380 <test_typed_table_with_emptystruct@@Base+0x164>
   152a8:	ldr	r3, [pc, #300]	; 153dc <test_typed_table_with_emptystruct@@Base+0x1c0>
   152ac:	ldr	r2, [pc, #300]	; 153e0 <test_typed_table_with_emptystruct@@Base+0x1c4>
   152b0:	ldr	r1, [sp, #4]
   152b4:	mov	r0, r4
   152b8:	bl	22ed8 <flatcc_verify_table_as_typed_root@@Base>
   152bc:	cmp	r0, #0
   152c0:	bne	15390 <test_typed_table_with_emptystruct@@Base+0x174>
   152c4:	cmp	r4, #0
   152c8:	beq	153a0 <test_typed_table_with_emptystruct@@Base+0x184>
   152cc:	ldr	r2, [r4, #4]
   152d0:	ldr	r3, [pc, #264]	; 153e0 <test_typed_table_with_emptystruct@@Base+0x1c4>
   152d4:	cmp	r2, r3
   152d8:	bne	153b0 <test_typed_table_with_emptystruct@@Base+0x194>
   152dc:	ldr	r3, [r4]
   152e0:	cmn	r4, r3
   152e4:	beq	153c0 <test_typed_table_with_emptystruct@@Base+0x1a4>
   152e8:	add	sp, sp, #8
   152ec:	pop	{r4, pc}
   152f0:	mov	r1, #1
   152f4:	mov	r0, r4
   152f8:	bl	1f804 <flatcc_builder_start_table@@Base>
   152fc:	cmp	r0, #0
   15300:	movne	r1, #0
   15304:	beq	15314 <test_typed_table_with_emptystruct@@Base+0xf8>
   15308:	mov	r0, r4
   1530c:	bl	1ea90 <flatcc_builder_end_buffer@@Base>
   15310:	b	15248 <test_typed_table_with_emptystruct@@Base+0x2c>
   15314:	mov	r3, #1
   15318:	mov	r2, #0
   1531c:	mov	r1, r2
   15320:	mov	r0, r4
   15324:	bl	21200 <flatcc_builder_table_add@@Base>
   15328:	cmp	r0, #0
   1532c:	moveq	r1, #0
   15330:	beq	15308 <test_typed_table_with_emptystruct@@Base+0xec>
   15334:	mov	r2, #0
   15338:	ldr	r1, [pc, #164]	; 153e4 <test_typed_table_with_emptystruct@@Base+0x1c8>
   1533c:	mov	r0, r4
   15340:	bl	201a8 <flatcc_builder_check_required@@Base>
   15344:	cmp	r0, #0
   15348:	beq	1535c <test_typed_table_with_emptystruct@@Base+0x140>
   1534c:	mov	r0, r4
   15350:	bl	20254 <flatcc_builder_end_table@@Base>
   15354:	mov	r1, r0
   15358:	b	15308 <test_typed_table_with_emptystruct@@Base+0xec>
   1535c:	ldr	r3, [pc, #132]	; 153e8 <test_typed_table_with_emptystruct@@Base+0x1cc>
   15360:	mov	r2, #215	; 0xd7
   15364:	ldr	r1, [pc, #128]	; 153ec <test_typed_table_with_emptystruct@@Base+0x1d0>
   15368:	ldr	r0, [pc, #128]	; 153f0 <test_typed_table_with_emptystruct@@Base+0x1d4>
   1536c:	bl	12a8c <__assert_fail@plt>
   15370:	ldr	r0, [pc, #124]	; 153f4 <test_typed_table_with_emptystruct@@Base+0x1d8>
   15374:	bl	129f0 <puts@plt>
   15378:	mvn	r0, #0
   1537c:	b	152e8 <test_typed_table_with_emptystruct@@Base+0xcc>
   15380:	ldr	r0, [pc, #112]	; 153f8 <test_typed_table_with_emptystruct@@Base+0x1dc>
   15384:	bl	129f0 <puts@plt>
   15388:	mvn	r0, #0
   1538c:	b	152e8 <test_typed_table_with_emptystruct@@Base+0xcc>
   15390:	ldr	r0, [pc, #100]	; 153fc <test_typed_table_with_emptystruct@@Base+0x1e0>
   15394:	bl	129f0 <puts@plt>
   15398:	mvn	r0, #0
   1539c:	b	152e8 <test_typed_table_with_emptystruct@@Base+0xcc>
   153a0:	ldr	r0, [pc, #88]	; 15400 <test_typed_table_with_emptystruct@@Base+0x1e4>
   153a4:	bl	129f0 <puts@plt>
   153a8:	mvn	r0, #0
   153ac:	b	152e8 <test_typed_table_with_emptystruct@@Base+0xcc>
   153b0:	ldr	r0, [pc, #76]	; 15404 <test_typed_table_with_emptystruct@@Base+0x1e8>
   153b4:	bl	129f0 <puts@plt>
   153b8:	mvn	r0, #0
   153bc:	b	152e8 <test_typed_table_with_emptystruct@@Base+0xcc>
   153c0:	ldr	r0, [pc, #64]	; 15408 <test_typed_table_with_emptystruct@@Base+0x1ec>
   153c4:	bl	129f0 <puts@plt>
   153c8:	mvn	r0, #0
   153cc:	b	152e8 <test_typed_table_with_emptystruct@@Base+0xcc>
   153d0:	andeq	r4, r2, r0, ror #11
   153d4:	andeq	r8, r3, r0, ror r0
   153d8:	andeq	r4, r2, r8, ror #11
   153dc:	andeq	r3, r1, r4, lsr #6
   153e0:	ldrhlt	r3, [sp], #118	; 0x76
   153e4:	andeq	r3, r2, r4, lsl #17
   153e8:	andeq	r3, r2, r8, lsl #17
   153ec:	andeq	r4, r2, r8, asr r0
   153f0:	andeq	r4, r2, r8, lsl #10
   153f4:	andeq	r4, r2, r8, lsl #12
   153f8:	andeq	r4, r2, r8, lsr #12
   153fc:	andeq	r4, r2, r4, asr #12
   15400:	andeq	r4, r2, ip, ror #12
   15404:	andeq	r4, r2, r4, lsl #13
   15408:	muleq	r2, r4, r6

0001540c <verify_monster@@Base>:
   1540c:	push	{r4, r5, r6, r7, r8, fp, lr}
   15410:	add	fp, sp, #24
   15414:	sub	sp, sp, #44	; 0x2c
   15418:	mov	r6, r0
   1541c:	sub	sp, sp, #48	; 0x30
   15420:	ldr	ip, [pc, #784]	; 15738 <verify_monster@@Base+0x32c>
   15424:	sub	lr, fp, #48	; 0x30
   15428:	add	r4, ip, #540	; 0x21c
   1542c:	ldm	r4!, {r0, r1, r2, r3}
   15430:	stmia	lr!, {r0, r1, r2, r3}
   15434:	ldr	r3, [r4]
   15438:	str	r3, [lr]
   1543c:	sub	lr, fp, #64	; 0x40
   15440:	add	r3, ip, #560	; 0x230
   15444:	ldm	r3, {r0, r1, r2, r3}
   15448:	stm	lr, {r0, r1, r2, r3}
   1544c:	ldr	r2, [r6, #4]
   15450:	ldr	r3, [pc, #740]	; 1573c <verify_monster@@Base+0x330>
   15454:	cmp	r2, r3
   15458:	bne	15658 <verify_monster@@Base+0x24c>
   1545c:	add	r5, sp, #15
   15460:	bic	r5, r5, #15
   15464:	cmp	r6, #0
   15468:	beq	15668 <verify_monster@@Base+0x25c>
   1546c:	ldr	r8, [r6]
   15470:	adds	r7, r6, r8
   15474:	beq	15668 <verify_monster@@Base+0x25c>
   15478:	ldr	r3, [r6, r8]
   1547c:	sub	r3, r7, r3
   15480:	ldrh	r2, [r3]
   15484:	cmp	r2, #9
   15488:	bls	15678 <verify_monster@@Base+0x26c>
   1548c:	ldrh	r1, [r3, #8]
   15490:	cmp	r1, #0
   15494:	beq	15678 <verify_monster@@Base+0x26c>
   15498:	ldrsh	r1, [r7, r1]
   1549c:	cmp	r1, #80	; 0x50
   154a0:	bne	15678 <verify_monster@@Base+0x26c>
   154a4:	cmp	r2, #5
   154a8:	bls	15688 <verify_monster@@Base+0x27c>
   154ac:	ldrh	r4, [r3, #4]
   154b0:	cmp	r4, #0
   154b4:	beq	15688 <verify_monster@@Base+0x27c>
   154b8:	adds	r4, r7, r4
   154bc:	beq	15688 <verify_monster@@Base+0x27c>
   154c0:	tst	r4, #15
   154c4:	bne	15698 <verify_monster@@Base+0x28c>
   154c8:	vldr	s14, [r4, #8]
   154cc:	vldr	s15, [pc, #600]	; 1572c <verify_monster@@Base+0x320>
   154d0:	vcmp.f32	s14, s15
   154d4:	vmrs	APSR_nzcv, fpscr
   154d8:	bne	156a4 <verify_monster@@Base+0x298>
   154dc:	vldr	s14, [r4]
   154e0:	vldr	s15, [pc, #584]	; 15730 <verify_monster@@Base+0x324>
   154e4:	vcmp.f32	s14, s15
   154e8:	vmrs	APSR_nzcv, fpscr
   154ec:	bne	156b4 <verify_monster@@Base+0x2a8>
   154f0:	vldr	s14, [r4, #4]
   154f4:	vldr	s15, [pc, #568]	; 15734 <verify_monster@@Base+0x328>
   154f8:	vcmp.f32	s14, s15
   154fc:	vmrs	APSR_nzcv, fpscr
   15500:	bne	156b4 <verify_monster@@Base+0x2a8>
   15504:	mov	r2, #32
   15508:	mov	r1, #0
   1550c:	mov	r0, r5
   15510:	bl	12a44 <memset@plt>
   15514:	mov	r3, #1065353216	; 0x3f800000
   15518:	str	r3, [r5]
   1551c:	mov	r3, #1073741824	; 0x40000000
   15520:	str	r3, [r5, #4]
   15524:	ldr	r3, [pc, #532]	; 15740 <verify_monster@@Base+0x334>
   15528:	str	r3, [r5, #8]
   1552c:	vldr	d7, [r4, #16]
   15530:	vstr	d7, [r5, #16]
   15534:	ldrb	r3, [r4, #24]
   15538:	strb	r3, [r5, #24]
   1553c:	ldrh	r3, [r4, #26]
   15540:	strh	r3, [r5, #26]
   15544:	ldrb	r3, [r4, #28]
   15548:	strb	r3, [r5, #28]
   1554c:	vcmp.f64	d7, #0.0
   15550:	vmrs	APSR_nzcv, fpscr
   15554:	bne	156c4 <verify_monster@@Base+0x2b8>
   15558:	mov	r2, #4
   1555c:	ldr	r1, [pc, #480]	; 15744 <verify_monster@@Base+0x338>
   15560:	add	r0, r4, #26
   15564:	bl	129c0 <memcmp@plt>
   15568:	cmp	r0, #0
   1556c:	bne	156c4 <verify_monster@@Base+0x2b8>
   15570:	mov	r0, r7
   15574:	bl	12f18 <_start@@Base+0x480>
   15578:	subs	r4, r0, #0
   1557c:	beq	156d4 <verify_monster@@Base+0x2c8>
   15580:	ldr	r1, [pc, #448]	; 15748 <verify_monster@@Base+0x33c>
   15584:	mov	r0, r4
   15588:	bl	12990 <strcmp@plt>
   1558c:	cmp	r0, #0
   15590:	bne	156d4 <verify_monster@@Base+0x2c8>
   15594:	ldr	r3, [r4, #-4]
   15598:	cmp	r3, #9
   1559c:	bne	156e4 <verify_monster@@Base+0x2d8>
   155a0:	ldr	r4, [r6, r8]
   155a4:	sub	r4, r7, r4
   155a8:	ldrh	r5, [r4]
   155ac:	cmp	r5, #17
   155b0:	bls	156f4 <verify_monster@@Base+0x2e8>
   155b4:	ldrh	r3, [r4, #16]
   155b8:	cmp	r3, #0
   155bc:	beq	156f4 <verify_monster@@Base+0x2e8>
   155c0:	ldrsb	r3, [r7, r3]
   155c4:	cmp	r3, #2
   155c8:	bne	156f4 <verify_monster@@Base+0x2e8>
   155cc:	cmp	r5, #15
   155d0:	bls	15704 <verify_monster@@Base+0x2f8>
   155d4:	ldrh	r3, [r4, #14]
   155d8:	cmp	r3, #0
   155dc:	beq	15704 <verify_monster@@Base+0x2f8>
   155e0:	add	r1, r7, r3
   155e4:	ldr	r3, [r7, r3]
   155e8:	add	r3, r3, #4
   155ec:	adds	r2, r1, r3
   155f0:	beq	15704 <verify_monster@@Base+0x2f8>
   155f4:	ldr	r0, [r2, #-4]
   155f8:	cmp	r0, #10
   155fc:	bne	15704 <verify_monster@@Base+0x2f8>
   15600:	ldrb	r3, [r1, r3]
   15604:	cmp	r3, #0
   15608:	bne	15714 <verify_monster@@Base+0x308>
   1560c:	mov	r1, #1
   15610:	ldrb	r3, [r2, r1]
   15614:	cmp	r3, r1
   15618:	bne	15718 <verify_monster@@Base+0x30c>
   1561c:	add	r1, r1, #1
   15620:	cmp	r1, #9
   15624:	bls	15610 <verify_monster@@Base+0x204>
   15628:	cmp	r5, #7
   1562c:	bls	1584c <verify_monster@@Base+0x440>
   15630:	ldrh	r3, [r4, #6]
   15634:	cmp	r3, #0
   15638:	beq	1584c <verify_monster@@Base+0x440>
   1563c:	ldrsh	r3, [r7, r3]
   15640:	cmp	r3, #150	; 0x96
   15644:	ldrne	r0, [pc, #256]	; 1574c <verify_monster@@Base+0x340>
   15648:	ldreq	r0, [pc, #256]	; 15750 <verify_monster@@Base+0x344>
   1564c:	bl	129f0 <puts@plt>
   15650:	mvn	r0, #0
   15654:	b	15724 <verify_monster@@Base+0x318>
   15658:	ldr	r0, [pc, #244]	; 15754 <verify_monster@@Base+0x348>
   1565c:	bl	129f0 <puts@plt>
   15660:	mvn	r0, #0
   15664:	b	15724 <verify_monster@@Base+0x318>
   15668:	ldr	r0, [pc, #232]	; 15758 <verify_monster@@Base+0x34c>
   1566c:	bl	129f0 <puts@plt>
   15670:	mvn	r0, #0
   15674:	b	15724 <verify_monster@@Base+0x318>
   15678:	ldr	r0, [pc, #220]	; 1575c <verify_monster@@Base+0x350>
   1567c:	bl	129f0 <puts@plt>
   15680:	mvn	r0, #0
   15684:	b	15724 <verify_monster@@Base+0x318>
   15688:	ldr	r0, [pc, #208]	; 15760 <verify_monster@@Base+0x354>
   1568c:	bl	129f0 <puts@plt>
   15690:	mvn	r0, #0
   15694:	b	15724 <verify_monster@@Base+0x318>
   15698:	ldr	r0, [pc, #196]	; 15764 <verify_monster@@Base+0x358>
   1569c:	bl	129f0 <puts@plt>
   156a0:	b	154c8 <verify_monster@@Base+0xbc>
   156a4:	ldr	r0, [pc, #188]	; 15768 <verify_monster@@Base+0x35c>
   156a8:	bl	129f0 <puts@plt>
   156ac:	mvn	r0, #0
   156b0:	b	15724 <verify_monster@@Base+0x318>
   156b4:	ldr	r0, [pc, #176]	; 1576c <verify_monster@@Base+0x360>
   156b8:	bl	129f0 <puts@plt>
   156bc:	mvn	r0, #0
   156c0:	b	15724 <verify_monster@@Base+0x318>
   156c4:	ldr	r0, [pc, #164]	; 15770 <verify_monster@@Base+0x364>
   156c8:	bl	129f0 <puts@plt>
   156cc:	mvn	r0, #0
   156d0:	b	15724 <verify_monster@@Base+0x318>
   156d4:	ldr	r0, [pc, #152]	; 15774 <verify_monster@@Base+0x368>
   156d8:	bl	129f0 <puts@plt>
   156dc:	mvn	r0, #0
   156e0:	b	15724 <verify_monster@@Base+0x318>
   156e4:	ldr	r0, [pc, #140]	; 15778 <verify_monster@@Base+0x36c>
   156e8:	bl	129f0 <puts@plt>
   156ec:	mvn	r0, #0
   156f0:	b	15724 <verify_monster@@Base+0x318>
   156f4:	ldr	r0, [pc, #128]	; 1577c <verify_monster@@Base+0x370>
   156f8:	bl	129f0 <puts@plt>
   156fc:	mvn	r0, #0
   15700:	b	15724 <verify_monster@@Base+0x318>
   15704:	ldr	r0, [pc, #116]	; 15780 <verify_monster@@Base+0x374>
   15708:	bl	129f0 <puts@plt>
   1570c:	mvn	r0, #0
   15710:	b	15724 <verify_monster@@Base+0x318>
   15714:	mov	r1, #0
   15718:	ldr	r0, [pc, #100]	; 15784 <verify_monster@@Base+0x378>
   1571c:	bl	1299c <printf@plt>
   15720:	mvn	r0, #0
   15724:	sub	sp, fp, #24
   15728:	pop	{r4, r5, r6, r7, r8, fp, pc}
   1572c:	subgt	ip, ip, sp, asr #25
   15730:	svccc	0x00800000
   15734:	andmi	r0, r0, r0
   15738:	muleq	r2, r0, r6
   1573c:	movtpl	r4, #61261	; 0xef4d
   15740:	subgt	ip, ip, sp, asr #25
   15744:	andeq	r8, r3, r0, lsl #1
   15748:	ldrdeq	r4, [r2], -ip
   1574c:	andeq	r4, r2, r0, lsr #16
   15750:	andeq	r4, r2, r4, lsr r8
   15754:	andeq	r4, r2, ip, asr #13
   15758:	andeq	r3, r2, r0, lsl pc
   1575c:	strdeq	r3, [r2], -r0
   15760:	strdeq	r4, [r2], -r8
   15764:	andeq	r4, r2, ip, lsl #14
   15768:	andeq	r4, r2, r4, lsr r7
   1576c:	andeq	r4, r2, r8, asr r7
   15770:	andeq	r4, r2, r0, ror r7
   15774:	muleq	r2, r4, r7
   15778:	andeq	r4, r2, r8, lsr #15
   1577c:	andeq	r4, r2, r4, asr #15
   15780:	andeq	r4, r2, r4, ror #15
   15784:	andeq	r4, r2, r0, lsl #16
   15788:	ldrdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   1578c:	andeq	r4, r2, r8, lsr #19
   15790:	andeq	r4, r2, ip, asr #21
   15794:	andeq	r3, r2, r0, ror #17
   15798:	andeq	r4, r2, r8, lsr #22
   1579c:	andeq	r4, r2, r4, lsl #23
   157a0:	andeq	r4, r2, r8, asr #16
   157a4:	andeq	r4, r2, r4, lsr r0
   157a8:	andeq	r4, r2, r8, ror #16
   157ac:	muleq	r2, r0, r8
   157b0:			; <UNDEFINED> instruction: 0x000248b8
   157b4:	ldrdeq	r3, [r2], -r0
   157b8:	muleq	r0, r6, r2
   157bc:	ldrdeq	r4, [r2], -ip
   157c0:	andeq	r4, r2, r0, lsr r9
   157c4:	andeq	r4, r2, r4, lsr r9
   157c8:	andeq	r4, r2, ip, asr #18
   157cc:	andeq	r4, r2, r4, lsl #19
   157d0:			; <UNDEFINED> instruction: 0x000249b0
   157d4:	andeq	r4, r2, r0, ror #19
   157d8:	andeq	r4, r2, r8, lsl #20
   157dc:	andeq	r4, r2, ip, lsr #20
   157e0:	andeq	r4, r2, r0, asr sl
   157e4:	andeq	r4, r2, r8, ror sl
   157e8:	andeq	r4, r2, r0, lsr #21
   157ec:	ldrdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   157f0:	andeq	r4, r2, ip, ror #21
   157f4:	andeq	r4, r2, r8, lsl #22
   157f8:	andeq	r4, r2, r0, lsr fp
   157fc:	andeq	r4, r2, r8, asr #22
   15800:	andeq	r4, r2, r4, ror #22
   15804:	strdeq	r4, [r2], -r0
   15808:	andeq	r4, r2, r4, asr #18
   1580c:	andeq	r4, r2, r4, lsl sp
   15810:	andeq	r4, r2, r4, lsr #23
   15814:	ldrdeq	r4, [r2], -r0
   15818:	strdeq	r4, [r2], -ip
   1581c:	andeq	r4, r2, ip, lsl ip
   15820:	andeq	r4, r2, r0, asr #24
   15824:	andeq	r3, r2, r4, ror #17
   15828:	andeq	r0, r0, r7, asr #5
   1582c:	andeq	r4, r2, r0, ror #24
   15830:	andeq	r4, r2, r4, lsr #25
   15834:	andeq	r4, r2, r0, ror #25
   15838:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   1583c:	andeq	r3, r2, r0, lsl r9
   15840:	andeq	r0, r0, pc, asr r2
   15844:	andeq	r3, r2, r0, ror #27
   15848:	andeq	r3, r2, ip, ror sp
   1584c:	cmp	r5, #9
   15850:	bls	15b74 <verify_monster@@Base+0x768>
   15854:	ldrh	r3, [r4, #8]
   15858:	cmp	r3, #0
   1585c:	beq	15b74 <verify_monster@@Base+0x768>
   15860:	cmp	r5, #5
   15864:	bls	15b84 <verify_monster@@Base+0x778>
   15868:	ldrh	r3, [r4, #4]
   1586c:	cmp	r3, #0
   15870:	beq	15b84 <verify_monster@@Base+0x778>
   15874:	cmp	r5, #23
   15878:	bls	15b94 <verify_monster@@Base+0x788>
   1587c:	ldrh	r2, [r4, #22]
   15880:	cmp	r2, #0
   15884:	beq	15b94 <verify_monster@@Base+0x788>
   15888:	add	r3, r7, r2
   1588c:	ldr	r2, [r7, r2]
   15890:	add	r2, r2, #4
   15894:	adds	r3, r3, r2
   15898:	beq	15b94 <verify_monster@@Base+0x788>
   1589c:	ldr	r2, [r3, #-4]
   158a0:	cmp	r2, #5
   158a4:	subeq	r2, fp, #48	; 0x30
   158a8:	moveq	r1, #0
   158ac:	moveq	r8, r1
   158b0:	bne	15b94 <verify_monster@@Base+0x788>
   158b4:	mov	ip, r2
   158b8:	ldrsh	r0, [r2]
   158bc:	cmp	r3, #0
   158c0:	beq	15f70 <verify_monster@@Base+0xb64>
   158c4:	ldrsh	r6, [r3]
   158c8:	cmp	r6, r0
   158cc:	bne	15ba4 <verify_monster@@Base+0x798>
   158d0:	ldrsb	ip, [r2, #2]
   158d4:	ldrsb	r0, [r3, #2]
   158d8:	cmp	r0, ip
   158dc:	bne	15bb4 <verify_monster@@Base+0x7a8>
   158e0:	add	r1, r1, #1
   158e4:	add	r2, r2, #4
   158e8:	add	r3, r3, #4
   158ec:	cmp	r1, #5
   158f0:	bne	158b4 <verify_monster@@Base+0x4a8>
   158f4:	cmp	r5, #27
   158f8:	bls	15bc4 <verify_monster@@Base+0x7b8>
   158fc:	ldrh	r3, [r4, #26]
   15900:	cmp	r3, #0
   15904:	beq	15bc4 <verify_monster@@Base+0x7b8>
   15908:	add	r6, r7, r3
   1590c:	ldr	r3, [r7, r3]
   15910:	add	r3, r3, #4
   15914:	adds	r6, r6, r3
   15918:	beq	15bc4 <verify_monster@@Base+0x7b8>
   1591c:	ldr	r3, [r6, #-4]
   15920:	cmp	r3, #8
   15924:	bne	15bc4 <verify_monster@@Base+0x7b8>
   15928:	mov	r1, #5
   1592c:	mov	r0, r6
   15930:	bl	12e0c <_start@@Base+0x374>
   15934:	subs	r8, r0, #0
   15938:	beq	15bd4 <verify_monster@@Base+0x7c8>
   1593c:	mov	r0, r8
   15940:	bl	12f18 <_start@@Base+0x480>
   15944:	ldr	r1, [pc, #-324]	; 15808 <verify_monster@@Base+0x3fc>
   15948:	bl	12990 <strcmp@plt>
   1594c:	cmp	r0, #0
   15950:	bne	15be8 <verify_monster@@Base+0x7dc>
   15954:	mov	r1, #1
   15958:	mov	r0, r6
   1595c:	bl	12e0c <_start@@Base+0x374>
   15960:	cmp	r8, r0
   15964:	bne	15bf8 <verify_monster@@Base+0x7ec>
   15968:	mov	r0, r8
   1596c:	bl	12f18 <_start@@Base+0x480>
   15970:	mov	r8, r0
   15974:	ldr	r1, [pc, #-372]	; 15808 <verify_monster@@Base+0x3fc>
   15978:	bl	12990 <strcmp@plt>
   1597c:	cmp	r0, #0
   15980:	bne	15c08 <verify_monster@@Base+0x7fc>
   15984:	mov	r1, #2
   15988:	mov	r0, r6
   1598c:	bl	12e0c <_start@@Base+0x374>
   15990:	bl	12f18 <_start@@Base+0x480>
   15994:	mov	r8, r0
   15998:	ldr	r1, [pc, #-532]	; 1578c <verify_monster@@Base+0x380>
   1599c:	bl	12990 <strcmp@plt>
   159a0:	cmp	r0, #0
   159a4:	bne	15c1c <verify_monster@@Base+0x810>
   159a8:	mov	r1, #0
   159ac:	mov	r0, r6
   159b0:	bl	12e0c <_start@@Base+0x374>
   159b4:	bl	12f18 <_start@@Base+0x480>
   159b8:	mov	r8, r0
   159bc:	ldr	r1, [pc, #-572]	; 15788 <verify_monster@@Base+0x37c>
   159c0:	bl	12990 <strcmp@plt>
   159c4:	cmp	r0, #0
   159c8:	bne	15c30 <verify_monster@@Base+0x824>
   159cc:	mov	r1, #3
   159d0:	mov	r0, r6
   159d4:	bl	12e0c <_start@@Base+0x374>
   159d8:	bl	12f18 <_start@@Base+0x480>
   159dc:	mov	r8, r0
   159e0:	ldr	r1, [pc, #-480]	; 15808 <verify_monster@@Base+0x3fc>
   159e4:	bl	12990 <strcmp@plt>
   159e8:	cmp	r0, #0
   159ec:	bne	15c44 <verify_monster@@Base+0x838>
   159f0:	mov	r1, #4
   159f4:	mov	r0, r6
   159f8:	bl	12e0c <_start@@Base+0x374>
   159fc:	bl	12f18 <_start@@Base+0x480>
   15a00:	mov	r8, r0
   15a04:	ldr	r1, [pc, #-640]	; 1578c <verify_monster@@Base+0x380>
   15a08:	bl	12990 <strcmp@plt>
   15a0c:	cmp	r0, #0
   15a10:	bne	15c58 <verify_monster@@Base+0x84c>
   15a14:	mov	r1, #6
   15a18:	mov	r0, r6
   15a1c:	bl	12e0c <_start@@Base+0x374>
   15a20:	bl	12f18 <_start@@Base+0x480>
   15a24:	mov	r8, r0
   15a28:	ldr	r1, [pc, #-680]	; 15788 <verify_monster@@Base+0x37c>
   15a2c:	bl	12990 <strcmp@plt>
   15a30:	cmp	r0, #0
   15a34:	bne	15c6c <verify_monster@@Base+0x860>
   15a38:	mov	r1, #7
   15a3c:	mov	r0, r6
   15a40:	bl	12e0c <_start@@Base+0x374>
   15a44:	bl	12f18 <_start@@Base+0x480>
   15a48:	mov	r6, r0
   15a4c:	ldr	r1, [pc, #-712]	; 1578c <verify_monster@@Base+0x380>
   15a50:	bl	12990 <strcmp@plt>
   15a54:	cmp	r0, #0
   15a58:	bne	15c80 <verify_monster@@Base+0x874>
   15a5c:	cmp	r5, #25
   15a60:	bls	15c94 <verify_monster@@Base+0x888>
   15a64:	ldrh	r3, [r4, #24]
   15a68:	cmp	r3, #0
   15a6c:	beq	15c94 <verify_monster@@Base+0x888>
   15a70:	add	r6, r7, r3
   15a74:	ldr	r3, [r7, r3]
   15a78:	add	r3, r3, #4
   15a7c:	adds	r6, r6, r3
   15a80:	beq	15c94 <verify_monster@@Base+0x888>
   15a84:	ldr	r3, [r6, #-4]
   15a88:	cmp	r3, #3
   15a8c:	bne	15c94 <verify_monster@@Base+0x888>
   15a90:	mov	r1, #0
   15a94:	mov	r0, r6
   15a98:	bl	12dc0 <_start@@Base+0x328>
   15a9c:	ldr	r1, [pc, #-788]	; 15790 <verify_monster@@Base+0x384>
   15aa0:	bl	12990 <strcmp@plt>
   15aa4:	cmp	r0, #0
   15aa8:	bne	15ca4 <verify_monster@@Base+0x898>
   15aac:	mov	r1, #1
   15ab0:	mov	r0, r6
   15ab4:	bl	12dc0 <_start@@Base+0x328>
   15ab8:	cmp	r0, #0
   15abc:	beq	15cb4 <verify_monster@@Base+0x8a8>
   15ac0:	ldr	r3, [r0, #-4]
   15ac4:	cmp	r3, #2
   15ac8:	bne	15cb4 <verify_monster@@Base+0x8a8>
   15acc:	mov	r2, #2
   15ad0:	ldr	r1, [pc, #-836]	; 15794 <verify_monster@@Base+0x388>
   15ad4:	bl	129c0 <memcmp@plt>
   15ad8:	cmp	r0, #0
   15adc:	bne	15cc4 <verify_monster@@Base+0x8b8>
   15ae0:	mov	r1, #2
   15ae4:	mov	r0, r6
   15ae8:	bl	12dc0 <_start@@Base+0x328>
   15aec:	ldr	r1, [pc, #-860]	; 15798 <verify_monster@@Base+0x38c>
   15af0:	bl	12990 <strcmp@plt>
   15af4:	cmp	r0, #0
   15af8:	bne	15cd4 <verify_monster@@Base+0x8c8>
   15afc:	cmp	r5, #53	; 0x35
   15b00:	bls	15ce4 <verify_monster@@Base+0x8d8>
   15b04:	ldrh	r3, [r4, #52]	; 0x34
   15b08:	cmp	r3, #0
   15b0c:	beq	15ce4 <verify_monster@@Base+0x8d8>
   15b10:	add	r1, r7, r3
   15b14:	ldr	r2, [r7, r3]
   15b18:	add	r2, r2, #4
   15b1c:	adds	r3, r1, r2
   15b20:	beq	15cf4 <verify_monster@@Base+0x8e8>
   15b24:	ldr	r0, [r3, #-4]
   15b28:	cmp	r0, #4
   15b2c:	bne	15cf4 <verify_monster@@Base+0x8e8>
   15b30:	ldrb	r1, [r1, r2]
   15b34:	ldr	r2, [fp, #-64]	; 0xffffffc0
   15b38:	cmp	r1, r2
   15b3c:	moveq	r1, #0
   15b40:	subeq	ip, fp, #64	; 0x40
   15b44:	bne	15d04 <verify_monster@@Base+0x8f8>
   15b48:	add	r1, r1, #1
   15b4c:	cmp	r1, #4
   15b50:	beq	15d0c <verify_monster@@Base+0x900>
   15b54:	ldrb	r0, [r3, #1]!
   15b58:	ldr	r2, [ip, r1, lsl #2]
   15b5c:	cmp	r0, r2
   15b60:	beq	15b48 <verify_monster@@Base+0x73c>
   15b64:	ldr	r0, [pc, #-976]	; 1579c <verify_monster@@Base+0x390>
   15b68:	bl	1299c <printf@plt>
   15b6c:	mvn	r0, #0
   15b70:	b	15724 <verify_monster@@Base+0x318>
   15b74:	ldr	r0, [pc, #-988]	; 157a0 <verify_monster@@Base+0x394>
   15b78:	bl	129f0 <puts@plt>
   15b7c:	mvn	r0, #0
   15b80:	b	15724 <verify_monster@@Base+0x318>
   15b84:	ldr	r0, [pc, #-1000]	; 157a4 <verify_monster@@Base+0x398>
   15b88:	bl	129f0 <puts@plt>
   15b8c:	mvn	r0, #0
   15b90:	b	15724 <verify_monster@@Base+0x318>
   15b94:	ldr	r0, [pc, #-1012]	; 157a8 <verify_monster@@Base+0x39c>
   15b98:	bl	129f0 <puts@plt>
   15b9c:	mvn	r0, #0
   15ba0:	b	15724 <verify_monster@@Base+0x318>
   15ba4:	ldr	r0, [pc, #-1024]	; 157ac <verify_monster@@Base+0x3a0>
   15ba8:	bl	1299c <printf@plt>
   15bac:	mvn	r0, #0
   15bb0:	b	15724 <verify_monster@@Base+0x318>
   15bb4:	ldr	r0, [pc, #-1040]	; 157ac <verify_monster@@Base+0x3a0>
   15bb8:	bl	1299c <printf@plt>
   15bbc:	mvn	r0, #0
   15bc0:	b	15724 <verify_monster@@Base+0x318>
   15bc4:	ldr	r0, [pc, #-1052]	; 157b0 <verify_monster@@Base+0x3a4>
   15bc8:	bl	129f0 <puts@plt>
   15bcc:	mvn	r0, #0
   15bd0:	b	15724 <verify_monster@@Base+0x318>
   15bd4:	ldr	r3, [pc, #-1064]	; 157b4 <verify_monster@@Base+0x3a8>
   15bd8:	ldr	r2, [pc, #-1064]	; 157b8 <verify_monster@@Base+0x3ac>
   15bdc:	ldr	r1, [pc, #-1064]	; 157bc <verify_monster@@Base+0x3b0>
   15be0:	ldr	r0, [pc, #-1064]	; 157c0 <verify_monster@@Base+0x3b4>
   15be4:	bl	12a8c <__assert_fail@plt>
   15be8:	ldr	r0, [pc, #-1068]	; 157c4 <verify_monster@@Base+0x3b8>
   15bec:	bl	1299c <printf@plt>
   15bf0:	mvn	r0, #0
   15bf4:	b	15724 <verify_monster@@Base+0x318>
   15bf8:	ldr	r0, [pc, #-1080]	; 157c8 <verify_monster@@Base+0x3bc>
   15bfc:	bl	129f0 <puts@plt>
   15c00:	mvn	r0, #0
   15c04:	b	15724 <verify_monster@@Base+0x318>
   15c08:	mov	r1, r8
   15c0c:	ldr	r0, [pc, #-1096]	; 157cc <verify_monster@@Base+0x3c0>
   15c10:	bl	1299c <printf@plt>
   15c14:	mvn	r0, #0
   15c18:	b	15724 <verify_monster@@Base+0x318>
   15c1c:	mov	r1, r8
   15c20:	ldr	r0, [pc, #-1112]	; 157d0 <verify_monster@@Base+0x3c4>
   15c24:	bl	1299c <printf@plt>
   15c28:	mvn	r0, #0
   15c2c:	b	15724 <verify_monster@@Base+0x318>
   15c30:	mov	r1, r8
   15c34:	ldr	r0, [pc, #-1128]	; 157d4 <verify_monster@@Base+0x3c8>
   15c38:	bl	1299c <printf@plt>
   15c3c:	mvn	r0, #0
   15c40:	b	15724 <verify_monster@@Base+0x318>
   15c44:	mov	r1, r8
   15c48:	ldr	r0, [pc, #-1144]	; 157d8 <verify_monster@@Base+0x3cc>
   15c4c:	bl	1299c <printf@plt>
   15c50:	mvn	r0, #0
   15c54:	b	15724 <verify_monster@@Base+0x318>
   15c58:	mov	r1, r8
   15c5c:	ldr	r0, [pc, #-1160]	; 157dc <verify_monster@@Base+0x3d0>
   15c60:	bl	1299c <printf@plt>
   15c64:	mvn	r0, #0
   15c68:	b	15724 <verify_monster@@Base+0x318>
   15c6c:	mov	r1, r8
   15c70:	ldr	r0, [pc, #-1176]	; 157e0 <verify_monster@@Base+0x3d4>
   15c74:	bl	1299c <printf@plt>
   15c78:	mvn	r0, #0
   15c7c:	b	15724 <verify_monster@@Base+0x318>
   15c80:	mov	r1, r6
   15c84:	ldr	r0, [pc, #-1192]	; 157e4 <verify_monster@@Base+0x3d8>
   15c88:	bl	1299c <printf@plt>
   15c8c:	mvn	r0, #0
   15c90:	b	15724 <verify_monster@@Base+0x318>
   15c94:	ldr	r0, [pc, #-1204]	; 157e8 <verify_monster@@Base+0x3dc>
   15c98:	bl	129f0 <puts@plt>
   15c9c:	mvn	r0, #0
   15ca0:	b	15724 <verify_monster@@Base+0x318>
   15ca4:	ldr	r0, [pc, #-1216]	; 157ec <verify_monster@@Base+0x3e0>
   15ca8:	bl	129f0 <puts@plt>
   15cac:	mvn	r0, #0
   15cb0:	b	15724 <verify_monster@@Base+0x318>
   15cb4:	ldr	r0, [pc, #-1228]	; 157f0 <verify_monster@@Base+0x3e4>
   15cb8:	bl	1299c <printf@plt>
   15cbc:	mvn	r0, #0
   15cc0:	b	15724 <verify_monster@@Base+0x318>
   15cc4:	ldr	r0, [pc, #-1240]	; 157f4 <verify_monster@@Base+0x3e8>
   15cc8:	bl	129f0 <puts@plt>
   15ccc:	mvn	r0, #0
   15cd0:	b	15724 <verify_monster@@Base+0x318>
   15cd4:	ldr	r0, [pc, #-1252]	; 157f8 <verify_monster@@Base+0x3ec>
   15cd8:	bl	129f0 <puts@plt>
   15cdc:	mvn	r0, #0
   15ce0:	b	15724 <verify_monster@@Base+0x318>
   15ce4:	ldr	r0, [pc, #-1264]	; 157fc <verify_monster@@Base+0x3f0>
   15ce8:	bl	129f0 <puts@plt>
   15cec:	mvn	r0, #0
   15cf0:	b	15724 <verify_monster@@Base+0x318>
   15cf4:	ldr	r0, [pc, #-1276]	; 15800 <verify_monster@@Base+0x3f4>
   15cf8:	bl	129f0 <puts@plt>
   15cfc:	mvn	r0, #0
   15d00:	b	15724 <verify_monster@@Base+0x318>
   15d04:	mov	r1, #0
   15d08:	b	15b64 <verify_monster@@Base+0x758>
   15d0c:	mov	r0, r7
   15d10:	bl	12e58 <_start@@Base+0x3c0>
   15d14:	cmp	r0, #1
   15d18:	bne	15eb8 <verify_monster@@Base+0xaac>
   15d1c:	mov	r0, r7
   15d20:	bl	12eb4 <_start@@Base+0x41c>
   15d24:	mov	r8, r0
   15d28:	bl	12f18 <_start@@Base+0x480>
   15d2c:	ldr	r1, [pc, #-1324]	; 15808 <verify_monster@@Base+0x3fc>
   15d30:	bl	12990 <strcmp@plt>
   15d34:	cmp	r0, #0
   15d38:	bne	15ec8 <verify_monster@@Base+0xabc>
   15d3c:	cmp	r5, #29
   15d40:	movls	r6, #0
   15d44:	bls	15d60 <verify_monster@@Base+0x954>
   15d48:	ldrh	r3, [r4, #28]
   15d4c:	cmp	r3, #0
   15d50:	addne	r6, r7, r3
   15d54:	ldrne	r3, [r7, r3]
   15d58:	addne	r6, r6, r3
   15d5c:	moveq	r6, #0
   15d60:	mov	r0, r6
   15d64:	bl	12f18 <_start@@Base+0x480>
   15d68:	ldr	r1, [pc, #-1388]	; 15804 <verify_monster@@Base+0x3f8>
   15d6c:	bl	12990 <strcmp@plt>
   15d70:	cmp	r0, #0
   15d74:	bne	15ed8 <verify_monster@@Base+0xacc>
   15d78:	mov	r0, r6
   15d7c:	bl	12e58 <_start@@Base+0x3c0>
   15d80:	cmp	r0, #0
   15d84:	bne	15ee8 <verify_monster@@Base+0xadc>
   15d88:	mov	r0, r7
   15d8c:	bl	12eb4 <_start@@Base+0x41c>
   15d90:	cmp	r8, r0
   15d94:	bne	15ef8 <verify_monster@@Base+0xaec>
   15d98:	cmp	r6, #0
   15d9c:	beq	15f08 <verify_monster@@Base+0xafc>
   15da0:	ldr	r3, [r6]
   15da4:	sub	r3, r6, r3
   15da8:	ldrh	r2, [r3]
   15dac:	cmp	r2, #27
   15db0:	movls	r0, #0
   15db4:	movls	r1, r0
   15db8:	bls	15de8 <verify_monster@@Base+0x9dc>
   15dbc:	ldrh	r3, [r3, #26]
   15dc0:	cmp	r3, #0
   15dc4:	moveq	r0, #0
   15dc8:	moveq	r1, r0
   15dcc:	beq	15de8 <verify_monster@@Base+0x9dc>
   15dd0:	add	r0, r6, r3
   15dd4:	ldr	r3, [r6, r3]
   15dd8:	add	r3, r3, #4
   15ddc:	adds	r0, r0, r3
   15de0:	moveq	r1, #0
   15de4:	ldrne	r1, [r0, #-4]
   15de8:	sub	r1, r1, #1
   15dec:	bl	12e0c <_start@@Base+0x374>
   15df0:	mov	r6, r0
   15df4:	bl	12e58 <_start@@Base+0x3c0>
   15df8:	cmp	r0, #1
   15dfc:	bne	15f1c <verify_monster@@Base+0xb10>
   15e00:	mov	r0, r6
   15e04:	bl	12eb4 <_start@@Base+0x41c>
   15e08:	bl	12f18 <_start@@Base+0x480>
   15e0c:	ldr	r1, [pc, #-1548]	; 15808 <verify_monster@@Base+0x3fc>
   15e10:	bl	12990 <strcmp@plt>
   15e14:	cmp	r0, #0
   15e18:	bne	15f2c <verify_monster@@Base+0xb20>
   15e1c:	cmp	r5, #35	; 0x23
   15e20:	bls	15f3c <verify_monster@@Base+0xb30>
   15e24:	ldrh	r3, [r4, #34]	; 0x22
   15e28:	cmp	r3, #0
   15e2c:	beq	15f3c <verify_monster@@Base+0xb30>
   15e30:	ldrb	r3, [r7, r3]
   15e34:	cmp	r3, #0
   15e38:	bne	15f3c <verify_monster@@Base+0xb30>
   15e3c:	cmp	r5, #33	; 0x21
   15e40:	bls	15f4c <verify_monster@@Base+0xb40>
   15e44:	ldrh	r3, [r4, #32]
   15e48:	cmp	r3, #0
   15e4c:	beq	15f4c <verify_monster@@Base+0xb40>
   15e50:	add	r1, r7, r3
   15e54:	ldr	r2, [r7, r3]
   15e58:	adds	r3, r1, r2
   15e5c:	beq	15f5c <verify_monster@@Base+0xb50>
   15e60:	ldr	r2, [r1, r2]
   15e64:	sub	r3, r3, r2
   15e68:	ldrh	r2, [r3]
   15e6c:	cmp	r2, #5
   15e70:	bls	15e80 <verify_monster@@Base+0xa74>
   15e74:	ldrh	r1, [r3, #4]
   15e78:	cmp	r1, #0
   15e7c:	bne	15ea8 <verify_monster@@Base+0xa9c>
   15e80:	cmp	r2, #7
   15e84:	bls	15e94 <verify_monster@@Base+0xa88>
   15e88:	ldrh	r1, [r3, #6]
   15e8c:	cmp	r1, #0
   15e90:	bne	15ea8 <verify_monster@@Base+0xa9c>
   15e94:	cmp	r2, #9
   15e98:	bls	15724 <verify_monster@@Base+0x318>
   15e9c:	ldrh	r3, [r3, #8]
   15ea0:	cmp	r3, #0
   15ea4:	beq	15724 <verify_monster@@Base+0x318>
   15ea8:	ldr	r0, [pc, #-1700]	; 1580c <verify_monster@@Base+0x400>
   15eac:	bl	129f0 <puts@plt>
   15eb0:	mvn	r0, #0
   15eb4:	b	15724 <verify_monster@@Base+0x318>
   15eb8:	ldr	r0, [pc, #-1712]	; 15810 <verify_monster@@Base+0x404>
   15ebc:	bl	129f0 <puts@plt>
   15ec0:	mvn	r0, #0
   15ec4:	b	15724 <verify_monster@@Base+0x318>
   15ec8:	ldr	r0, [pc, #-1724]	; 15814 <verify_monster@@Base+0x408>
   15ecc:	bl	129f0 <puts@plt>
   15ed0:	mvn	r0, #0
   15ed4:	b	15724 <verify_monster@@Base+0x318>
   15ed8:	ldr	r0, [pc, #-1736]	; 15818 <verify_monster@@Base+0x40c>
   15edc:	bl	129f0 <puts@plt>
   15ee0:	mvn	r0, #0
   15ee4:	b	15724 <verify_monster@@Base+0x318>
   15ee8:	ldr	r0, [pc, #-1748]	; 1581c <verify_monster@@Base+0x410>
   15eec:	bl	129f0 <puts@plt>
   15ef0:	mvn	r0, #0
   15ef4:	b	15724 <verify_monster@@Base+0x318>
   15ef8:	ldr	r0, [pc, #-1760]	; 15820 <verify_monster@@Base+0x414>
   15efc:	bl	129f0 <puts@plt>
   15f00:	mvn	r0, #0
   15f04:	b	15724 <verify_monster@@Base+0x318>
   15f08:	ldr	r3, [pc, #-1772]	; 15824 <verify_monster@@Base+0x418>
   15f0c:	ldr	r2, [pc, #-1772]	; 15828 <verify_monster@@Base+0x41c>
   15f10:	ldr	r1, [pc, #-1744]	; 15848 <verify_monster@@Base+0x43c>
   15f14:	ldr	r0, [pc, #-1752]	; 15844 <verify_monster@@Base+0x438>
   15f18:	bl	12a8c <__assert_fail@plt>
   15f1c:	ldr	r0, [pc, #-1784]	; 1582c <verify_monster@@Base+0x420>
   15f20:	bl	129f0 <puts@plt>
   15f24:	mvn	r0, #0
   15f28:	b	15724 <verify_monster@@Base+0x318>
   15f2c:	ldr	r0, [pc, #-1796]	; 15830 <verify_monster@@Base+0x424>
   15f30:	bl	129f0 <puts@plt>
   15f34:	mvn	r0, #0
   15f38:	b	15724 <verify_monster@@Base+0x318>
   15f3c:	ldr	r0, [pc, #-1808]	; 15834 <verify_monster@@Base+0x428>
   15f40:	bl	129f0 <puts@plt>
   15f44:	mvn	r0, #0
   15f48:	b	15724 <verify_monster@@Base+0x318>
   15f4c:	ldr	r0, [pc, #-1820]	; 15838 <verify_monster@@Base+0x42c>
   15f50:	bl	129f0 <puts@plt>
   15f54:	mvn	r0, #0
   15f58:	b	15724 <verify_monster@@Base+0x318>
   15f5c:	ldr	r3, [pc, #-1832]	; 1583c <verify_monster@@Base+0x430>
   15f60:	ldr	r2, [pc, #-1832]	; 15840 <verify_monster@@Base+0x434>
   15f64:	ldr	r1, [pc, #-1828]	; 15848 <verify_monster@@Base+0x43c>
   15f68:	ldr	r0, [pc, #-1836]	; 15844 <verify_monster@@Base+0x438>
   15f6c:	bl	12a8c <__assert_fail@plt>
   15f70:	cmp	r0, #0
   15f74:	bne	15ba4 <verify_monster@@Base+0x798>
   15f78:	ldrsb	ip, [ip, #2]
   15f7c:	mov	r0, r8
   15f80:	b	158d8 <verify_monster@@Base+0x4cc>

00015f84 <gen_monster@@Base>:
   15f84:	push	{r4, r5, r6, lr}
   15f88:	sub	sp, sp, #48	; 0x30
   15f8c:	mov	r4, r0
   15f90:	mov	r5, r1
   15f94:	add	r3, sp, #36	; 0x24
   15f98:	ldr	r2, [pc, #2352]	; 168d0 <gen_monster@@Base+0x94c>
   15f9c:	ldm	r2, {r0, r1, r2}
   15fa0:	stmia	r3!, {r0, r1}
   15fa4:	strh	r2, [r3]
   15fa8:	mov	r3, #0
   15fac:	strb	r3, [sp, #8]
   15fb0:	mov	r2, #1
   15fb4:	strb	r2, [sp, #9]
   15fb8:	strb	r2, [sp, #10]
   15fbc:	strb	r3, [sp, #11]
   15fc0:	mov	r0, r4
   15fc4:	bl	1e238 <flatcc_builder_reset@@Base>
   15fc8:	cmp	r5, #0
   15fcc:	beq	16758 <gen_monster@@Base+0x7d4>
   15fd0:	mov	r3, #2
   15fd4:	mov	r2, #0
   15fd8:	ldr	r1, [pc, #2292]	; 168d4 <gen_monster@@Base+0x950>
   15fdc:	mov	r0, r4
   15fe0:	bl	1e9d8 <flatcc_builder_start_buffer@@Base>
   15fe4:	cmp	r0, #0
   15fe8:	bne	15ff8 <gen_monster@@Base+0x74>
   15fec:	mov	r1, #36	; 0x24
   15ff0:	mov	r0, r4
   15ff4:	bl	1f804 <flatcc_builder_start_table@@Base>
   15ff8:	mov	r3, #2
   15ffc:	mov	r2, r3
   16000:	mov	r1, r3
   16004:	mov	r0, r4
   16008:	bl	21200 <flatcc_builder_table_add@@Base>
   1600c:	cmp	r0, #0
   16010:	movne	r3, #80	; 0x50
   16014:	strhne	r3, [r0]
   16018:	mov	r3, #16
   1601c:	mov	r2, #32
   16020:	mov	r1, #0
   16024:	mov	r0, r4
   16028:	bl	21200 <flatcc_builder_table_add@@Base>
   1602c:	mov	r3, #1065353216	; 0x3f800000
   16030:	str	r3, [r0]
   16034:	mov	r3, #1073741824	; 0x40000000
   16038:	str	r3, [r0, #4]
   1603c:	ldr	r3, [pc, #2196]	; 168d8 <gen_monster@@Base+0x954>
   16040:	str	r3, [r0, #8]
   16044:	ldr	r1, [pc, #2192]	; 168dc <gen_monster@@Base+0x958>
   16048:	mov	r0, r4
   1604c:	bl	135f0 <_start@@Base+0xb58>
   16050:	mov	r3, #1
   16054:	mov	r2, r3
   16058:	mov	r1, #6
   1605c:	mov	r0, r4
   16060:	bl	21200 <flatcc_builder_table_add@@Base>
   16064:	cmp	r0, #0
   16068:	movne	r3, #2
   1606c:	strbne	r3, [r0]
   16070:	mvn	r3, #0
   16074:	str	r3, [sp, #4]
   16078:	mov	r3, #1
   1607c:	str	r3, [sp]
   16080:	mov	r2, #10
   16084:	add	r1, sp, #36	; 0x24
   16088:	mov	r0, r4
   1608c:	bl	20408 <flatcc_builder_create_vector@@Base>
   16090:	subs	r5, r0, #0
   16094:	beq	160ac <gen_monster@@Base+0x128>
   16098:	mov	r1, #5
   1609c:	mov	r0, r4
   160a0:	bl	213cc <flatcc_builder_table_add_offset@@Base>
   160a4:	cmp	r0, #0
   160a8:	strne	r5, [r0]
   160ac:	mvn	r3, #-1073741824	; 0xc0000000
   160b0:	mov	r2, #2
   160b4:	mov	r1, #4
   160b8:	mov	r0, r4
   160bc:	bl	1f554 <flatcc_builder_start_vector@@Base>
   160c0:	mov	r1, #1
   160c4:	mov	r0, r4
   160c8:	bl	1ed4c <flatcc_builder_extend_vector@@Base>
   160cc:	mov	r3, #16
   160d0:	strh	r3, [r0]
   160d4:	mov	r3, #32
   160d8:	strb	r3, [r0, #2]
   160dc:	mov	r1, #2
   160e0:	mov	r0, r4
   160e4:	bl	1ed4c <flatcc_builder_extend_vector@@Base>
   160e8:	mov	r3, #48	; 0x30
   160ec:	strh	r3, [r0]
   160f0:	mov	r3, #64	; 0x40
   160f4:	strb	r3, [r0, #2]
   160f8:	mov	r3, #80	; 0x50
   160fc:	strh	r3, [r0, #4]
   16100:	mov	r3, #96	; 0x60
   16104:	strb	r3, [r0, #6]
   16108:	mov	r1, #1
   1610c:	mov	r0, r4
   16110:	bl	1ed4c <flatcc_builder_extend_vector@@Base>
   16114:	cmp	r0, #0
   16118:	movne	r3, #112	; 0x70
   1611c:	strhne	r3, [r0]
   16120:	mvnne	r3, #127	; 0x7f
   16124:	strbne	r3, [r0, #2]
   16128:	mov	r3, #400	; 0x190
   1612c:	strh	r3, [sp, #32]
   16130:	mvn	r3, #110	; 0x6e
   16134:	strb	r3, [sp, #34]	; 0x22
   16138:	mov	r1, #1
   1613c:	mov	r0, r4
   16140:	bl	1ed4c <flatcc_builder_extend_vector@@Base>
   16144:	cmp	r0, #0
   16148:	ldrne	r3, [sp, #32]
   1614c:	strne	r3, [r0]
   16150:	mov	r1, #1
   16154:	mov	r0, r4
   16158:	bl	1ed4c <flatcc_builder_extend_vector@@Base>
   1615c:	cmp	r0, #0
   16160:	ldrne	r3, [sp, #32]
   16164:	strne	r3, [r0]
   16168:	mov	r1, #1
   1616c:	mov	r0, r4
   16170:	bl	1ed4c <flatcc_builder_extend_vector@@Base>
   16174:	cmp	r0, #0
   16178:	ldrne	r3, [sp, #32]
   1617c:	strne	r3, [r0]
   16180:	mov	r0, r4
   16184:	bl	20658 <flatcc_builder_vector_count@@Base>
   16188:	cmp	r0, #7
   1618c:	bne	16784 <gen_monster@@Base+0x800>
   16190:	mov	r1, #2
   16194:	mov	r0, r4
   16198:	bl	1f398 <flatcc_builder_truncate_vector@@Base>
   1619c:	mov	r0, r4
   161a0:	bl	20658 <flatcc_builder_vector_count@@Base>
   161a4:	cmp	r0, #5
   161a8:	bne	16798 <gen_monster@@Base+0x814>
   161ac:	mov	r0, r4
   161b0:	bl	20664 <flatcc_builder_vector_edit@@Base>
   161b4:	ldrh	r3, [r0, #16]
   161b8:	add	r3, r3, #1
   161bc:	strh	r3, [r0, #16]
   161c0:	mov	r0, r4
   161c4:	bl	20564 <flatcc_builder_end_vector@@Base>
   161c8:	subs	r5, r0, #0
   161cc:	beq	161e4 <gen_monster@@Base+0x260>
   161d0:	mov	r1, #9
   161d4:	mov	r0, r4
   161d8:	bl	213cc <flatcc_builder_table_add_offset@@Base>
   161dc:	cmp	r0, #0
   161e0:	strne	r5, [r0]
   161e4:	mov	r1, #36	; 0x24
   161e8:	mov	r0, r4
   161ec:	bl	1f804 <flatcc_builder_start_table@@Base>
   161f0:	mov	r2, #7
   161f4:	ldr	r1, [pc, #1764]	; 168e0 <gen_monster@@Base+0x95c>
   161f8:	mov	r0, r4
   161fc:	bl	20f74 <flatcc_builder_create_string@@Base>
   16200:	subs	r5, r0, #0
   16204:	bne	167ac <gen_monster@@Base+0x828>
   16208:	mov	r2, #1
   1620c:	ldr	r1, [pc, #1744]	; 168e4 <gen_monster@@Base+0x960>
   16210:	mov	r0, r4
   16214:	bl	201a8 <flatcc_builder_check_required@@Base>
   16218:	cmp	r0, #0
   1621c:	beq	167c4 <gen_monster@@Base+0x840>
   16220:	mov	r0, r4
   16224:	bl	20254 <flatcc_builder_end_table@@Base>
   16228:	mov	r5, r0
   1622c:	mov	r0, r4
   16230:	bl	1f5e0 <flatcc_builder_start_offset_vector@@Base>
   16234:	mov	r1, #2
   16238:	mov	r0, r4
   1623c:	bl	1efb0 <flatcc_builder_extend_offset_vector@@Base>
   16240:	str	r5, [r0]
   16244:	str	r5, [r0, #4]
   16248:	mov	r1, #36	; 0x24
   1624c:	mov	r0, r4
   16250:	bl	1f804 <flatcc_builder_start_table@@Base>
   16254:	mov	r2, #30
   16258:	ldr	r1, [pc, #1672]	; 168e8 <gen_monster@@Base+0x964>
   1625c:	mov	r0, r4
   16260:	bl	210b4 <flatcc_builder_create_string_strn@@Base>
   16264:	subs	r6, r0, #0
   16268:	beq	16280 <gen_monster@@Base+0x2fc>
   1626c:	mov	r1, #3
   16270:	mov	r0, r4
   16274:	bl	213cc <flatcc_builder_table_add_offset@@Base>
   16278:	cmp	r0, #0
   1627c:	strne	r6, [r0]
   16280:	mov	r2, #1
   16284:	ldr	r1, [pc, #1624]	; 168e4 <gen_monster@@Base+0x960>
   16288:	mov	r0, r4
   1628c:	bl	201a8 <flatcc_builder_check_required@@Base>
   16290:	cmp	r0, #0
   16294:	beq	167d8 <gen_monster@@Base+0x854>
   16298:	mov	r0, r4
   1629c:	bl	20254 <flatcc_builder_end_table@@Base>
   162a0:	subs	r1, r0, #0
   162a4:	moveq	r0, #0
   162a8:	beq	162b4 <gen_monster@@Base+0x330>
   162ac:	mov	r0, r4
   162b0:	bl	1f048 <flatcc_builder_offset_vector_push@@Base>
   162b4:	ldr	r6, [r0]
   162b8:	mov	r1, #3
   162bc:	mov	r0, r4
   162c0:	bl	1efb0 <flatcc_builder_extend_offset_vector@@Base>
   162c4:	str	r5, [r0]
   162c8:	str	r6, [r0, #4]
   162cc:	mov	r1, #1
   162d0:	mov	r0, r4
   162d4:	bl	1f430 <flatcc_builder_truncate_offset_vector@@Base>
   162d8:	mov	r0, r4
   162dc:	bl	20894 <flatcc_builder_offset_vector_count@@Base>
   162e0:	cmp	r0, #5
   162e4:	bne	167ec <gen_monster@@Base+0x868>
   162e8:	mov	r1, #36	; 0x24
   162ec:	mov	r0, r4
   162f0:	bl	1f804 <flatcc_builder_start_table@@Base>
   162f4:	mov	r2, #8
   162f8:	ldr	r1, [pc, #1516]	; 168ec <gen_monster@@Base+0x968>
   162fc:	mov	r0, r4
   16300:	bl	210b4 <flatcc_builder_create_string_strn@@Base>
   16304:	subs	r6, r0, #0
   16308:	beq	16320 <gen_monster@@Base+0x39c>
   1630c:	mov	r1, #3
   16310:	mov	r0, r4
   16314:	bl	213cc <flatcc_builder_table_add_offset@@Base>
   16318:	cmp	r0, #0
   1631c:	strne	r6, [r0]
   16320:	mov	r2, #1
   16324:	ldr	r1, [pc, #1464]	; 168e4 <gen_monster@@Base+0x960>
   16328:	mov	r0, r4
   1632c:	bl	201a8 <flatcc_builder_check_required@@Base>
   16330:	cmp	r0, #0
   16334:	beq	16800 <gen_monster@@Base+0x87c>
   16338:	mov	r0, r4
   1633c:	bl	20254 <flatcc_builder_end_table@@Base>
   16340:	subs	r1, r0, #0
   16344:	moveq	r0, #0
   16348:	beq	16354 <gen_monster@@Base+0x3d0>
   1634c:	mov	r0, r4
   16350:	bl	1f048 <flatcc_builder_offset_vector_push@@Base>
   16354:	ldr	r3, [r0]
   16358:	str	r3, [sp, #24]
   1635c:	mov	r0, r4
   16360:	bl	20894 <flatcc_builder_offset_vector_count@@Base>
   16364:	cmp	r0, #6
   16368:	bne	16814 <gen_monster@@Base+0x890>
   1636c:	mov	r0, r4
   16370:	bl	2088c <flatcc_builder_offset_vector_edit@@Base>
   16374:	ldr	r3, [r0, #20]
   16378:	ldr	r2, [r0, #8]
   1637c:	str	r2, [sp, #28]
   16380:	str	r5, [r0, #20]
   16384:	str	r3, [r0]
   16388:	mov	r2, #2
   1638c:	add	r1, sp, #24
   16390:	mov	r0, r4
   16394:	bl	1f0e8 <flatcc_builder_append_offset_vector@@Base>
   16398:	mov	r0, r4
   1639c:	bl	2067c <flatcc_builder_end_offset_vector@@Base>
   163a0:	subs	r6, r0, #0
   163a4:	beq	163bc <gen_monster@@Base+0x438>
   163a8:	mov	r1, #11
   163ac:	mov	r0, r4
   163b0:	bl	213cc <flatcc_builder_table_add_offset@@Base>
   163b4:	cmp	r0, #0
   163b8:	strne	r6, [r0]
   163bc:	ldr	r1, [pc, #1324]	; 168f0 <gen_monster@@Base+0x96c>
   163c0:	mov	r0, r4
   163c4:	bl	2108c <flatcc_builder_create_string_str@@Base>
   163c8:	str	r0, [sp, #12]
   163cc:	mov	r2, #2
   163d0:	ldr	r1, [pc, #1308]	; 168f4 <gen_monster@@Base+0x970>
   163d4:	mov	r0, r4
   163d8:	bl	20f74 <flatcc_builder_create_string@@Base>
   163dc:	str	r0, [sp, #16]
   163e0:	ldr	r1, [pc, #1296]	; 168f8 <gen_monster@@Base+0x974>
   163e4:	mov	r0, r4
   163e8:	bl	2108c <flatcc_builder_create_string_str@@Base>
   163ec:	str	r0, [sp, #20]
   163f0:	mov	r2, #3
   163f4:	add	r1, sp, #12
   163f8:	mov	r0, r4
   163fc:	bl	20754 <flatcc_builder_create_offset_vector@@Base>
   16400:	subs	r6, r0, #0
   16404:	beq	1641c <gen_monster@@Base+0x498>
   16408:	mov	r1, #10
   1640c:	mov	r0, r4
   16410:	bl	213cc <flatcc_builder_table_add_offset@@Base>
   16414:	cmp	r0, #0
   16418:	strne	r6, [r0]
   1641c:	mvn	r3, #0
   16420:	mov	r2, #1
   16424:	mov	r1, r2
   16428:	mov	r0, r4
   1642c:	bl	1f554 <flatcc_builder_start_vector@@Base>
   16430:	mov	r2, #1
   16434:	add	r1, sp, #8
   16438:	mov	r0, r4
   1643c:	bl	1eec0 <flatcc_builder_append_vector@@Base>
   16440:	mov	r2, #3
   16444:	add	r1, sp, #9
   16448:	mov	r0, r4
   1644c:	bl	1eec0 <flatcc_builder_append_vector@@Base>
   16450:	mov	r0, r4
   16454:	bl	20564 <flatcc_builder_end_vector@@Base>
   16458:	subs	r6, r0, #0
   1645c:	beq	16474 <gen_monster@@Base+0x4f0>
   16460:	mov	r1, #24
   16464:	mov	r0, r4
   16468:	bl	213cc <flatcc_builder_table_add_offset@@Base>
   1646c:	cmp	r0, #0
   16470:	strne	r6, [r0]
   16474:	cmp	r5, #0
   16478:	beq	168a0 <gen_monster@@Base+0x91c>
   1647c:	mov	r3, #1
   16480:	mov	r2, r3
   16484:	mov	r1, #7
   16488:	mov	r0, r4
   1648c:	bl	21200 <flatcc_builder_table_add@@Base>
   16490:	subs	r6, r0, #0
   16494:	beq	164b4 <gen_monster@@Base+0x530>
   16498:	mov	r1, #8
   1649c:	mov	r0, r4
   164a0:	bl	213cc <flatcc_builder_table_add_offset@@Base>
   164a4:	cmp	r0, #0
   164a8:	movne	r3, #1
   164ac:	strbne	r3, [r6]
   164b0:	strne	r5, [r0]
   164b4:	mov	r1, #36	; 0x24
   164b8:	mov	r0, r4
   164bc:	bl	1f804 <flatcc_builder_start_table@@Base>
   164c0:	ldr	r1, [pc, #1076]	; 168fc <gen_monster@@Base+0x978>
   164c4:	mov	r0, r4
   164c8:	bl	135f0 <_start@@Base+0xb58>
   164cc:	mov	r0, r4
   164d0:	bl	1f5e0 <flatcc_builder_start_offset_vector@@Base>
   164d4:	mov	r1, #36	; 0x24
   164d8:	mov	r0, r4
   164dc:	bl	1f804 <flatcc_builder_start_table@@Base>
   164e0:	mov	r3, #1
   164e4:	mov	r2, r3
   164e8:	mov	r1, #7
   164ec:	mov	r0, r4
   164f0:	bl	21200 <flatcc_builder_table_add@@Base>
   164f4:	subs	r6, r0, #0
   164f8:	beq	16518 <gen_monster@@Base+0x594>
   164fc:	mov	r1, #8
   16500:	mov	r0, r4
   16504:	bl	213cc <flatcc_builder_table_add_offset@@Base>
   16508:	cmp	r0, #0
   1650c:	movne	r3, #1
   16510:	strbne	r3, [r6]
   16514:	strne	r5, [r0]
   16518:	ldr	r1, [pc, #992]	; 16900 <gen_monster@@Base+0x97c>
   1651c:	mov	r0, r4
   16520:	bl	135f0 <_start@@Base+0xb58>
   16524:	mov	r2, #1
   16528:	ldr	r1, [pc, #948]	; 168e4 <gen_monster@@Base+0x960>
   1652c:	mov	r0, r4
   16530:	bl	201a8 <flatcc_builder_check_required@@Base>
   16534:	cmp	r0, #0
   16538:	beq	16828 <gen_monster@@Base+0x8a4>
   1653c:	mov	r0, r4
   16540:	bl	20254 <flatcc_builder_end_table@@Base>
   16544:	subs	r1, r0, #0
   16548:	beq	16554 <gen_monster@@Base+0x5d0>
   1654c:	mov	r0, r4
   16550:	bl	1f048 <flatcc_builder_offset_vector_push@@Base>
   16554:	mov	r1, #36	; 0x24
   16558:	mov	r0, r4
   1655c:	bl	1f804 <flatcc_builder_start_table@@Base>
   16560:	cmp	r5, #0
   16564:	beq	165a0 <gen_monster@@Base+0x61c>
   16568:	mov	r3, #1
   1656c:	mov	r2, r3
   16570:	mov	r1, #7
   16574:	mov	r0, r4
   16578:	bl	21200 <flatcc_builder_table_add@@Base>
   1657c:	subs	r6, r0, #0
   16580:	beq	165a0 <gen_monster@@Base+0x61c>
   16584:	mov	r1, #8
   16588:	mov	r0, r4
   1658c:	bl	213cc <flatcc_builder_table_add_offset@@Base>
   16590:	cmp	r0, #0
   16594:	movne	r3, #1
   16598:	strbne	r3, [r6]
   1659c:	strne	r5, [r0]
   165a0:	ldr	r1, [pc, #856]	; 16900 <gen_monster@@Base+0x97c>
   165a4:	mov	r0, r4
   165a8:	bl	135f0 <_start@@Base+0xb58>
   165ac:	mov	r2, #1
   165b0:	ldr	r1, [pc, #812]	; 168e4 <gen_monster@@Base+0x960>
   165b4:	mov	r0, r4
   165b8:	bl	201a8 <flatcc_builder_check_required@@Base>
   165bc:	cmp	r0, #0
   165c0:	beq	1683c <gen_monster@@Base+0x8b8>
   165c4:	mov	r0, r4
   165c8:	bl	20254 <flatcc_builder_end_table@@Base>
   165cc:	subs	r1, r0, #0
   165d0:	beq	165dc <gen_monster@@Base+0x658>
   165d4:	mov	r0, r4
   165d8:	bl	1f048 <flatcc_builder_offset_vector_push@@Base>
   165dc:	mov	r1, #36	; 0x24
   165e0:	mov	r0, r4
   165e4:	bl	1f804 <flatcc_builder_start_table@@Base>
   165e8:	mov	r1, #8
   165ec:	mov	r0, r4
   165f0:	bl	213cc <flatcc_builder_table_add_offset@@Base>
   165f4:	cmp	r0, #0
   165f8:	strne	r5, [r0]
   165fc:	ldr	r1, [pc, #764]	; 16900 <gen_monster@@Base+0x97c>
   16600:	mov	r0, r4
   16604:	bl	135f0 <_start@@Base+0xb58>
   16608:	mov	r3, #1
   1660c:	mov	r2, r3
   16610:	mov	r1, #7
   16614:	mov	r0, r4
   16618:	bl	21200 <flatcc_builder_table_add@@Base>
   1661c:	cmp	r0, #0
   16620:	movne	r3, #1
   16624:	strbne	r3, [r0]
   16628:	mov	r2, #1
   1662c:	ldr	r1, [pc, #688]	; 168e4 <gen_monster@@Base+0x960>
   16630:	mov	r0, r4
   16634:	bl	201a8 <flatcc_builder_check_required@@Base>
   16638:	cmp	r0, #0
   1663c:	beq	16850 <gen_monster@@Base+0x8cc>
   16640:	mov	r0, r4
   16644:	bl	20254 <flatcc_builder_end_table@@Base>
   16648:	subs	r1, r0, #0
   1664c:	beq	16658 <gen_monster@@Base+0x6d4>
   16650:	mov	r0, r4
   16654:	bl	1f048 <flatcc_builder_offset_vector_push@@Base>
   16658:	mov	r0, r4
   1665c:	bl	2067c <flatcc_builder_end_offset_vector@@Base>
   16660:	subs	r5, r0, #0
   16664:	beq	1667c <gen_monster@@Base+0x6f8>
   16668:	mov	r1, #11
   1666c:	mov	r0, r4
   16670:	bl	213cc <flatcc_builder_table_add_offset@@Base>
   16674:	cmp	r0, #0
   16678:	strne	r5, [r0]
   1667c:	mov	r2, #1
   16680:	ldr	r1, [pc, #604]	; 168e4 <gen_monster@@Base+0x960>
   16684:	mov	r0, r4
   16688:	bl	201a8 <flatcc_builder_check_required@@Base>
   1668c:	cmp	r0, #0
   16690:	beq	16864 <gen_monster@@Base+0x8e0>
   16694:	mov	r0, r4
   16698:	bl	20254 <flatcc_builder_end_table@@Base>
   1669c:	subs	r5, r0, #0
   166a0:	beq	166b8 <gen_monster@@Base+0x734>
   166a4:	mov	r1, #12
   166a8:	mov	r0, r4
   166ac:	bl	213cc <flatcc_builder_table_add_offset@@Base>
   166b0:	cmp	r0, #0
   166b4:	strne	r5, [r0]
   166b8:	mov	r3, #1
   166bc:	mov	r2, r3
   166c0:	mov	r1, #15
   166c4:	mov	r0, r4
   166c8:	bl	21200 <flatcc_builder_table_add@@Base>
   166cc:	cmp	r0, #0
   166d0:	movne	r3, #0
   166d4:	strbne	r3, [r0]
   166d8:	mov	r1, #3
   166dc:	mov	r0, r4
   166e0:	bl	1f804 <flatcc_builder_start_table@@Base>
   166e4:	mov	r2, #0
   166e8:	ldr	r1, [pc, #532]	; 16904 <gen_monster@@Base+0x980>
   166ec:	mov	r0, r4
   166f0:	bl	201a8 <flatcc_builder_check_required@@Base>
   166f4:	cmp	r0, #0
   166f8:	beq	16878 <gen_monster@@Base+0x8f4>
   166fc:	mov	r0, r4
   16700:	bl	20254 <flatcc_builder_end_table@@Base>
   16704:	subs	r5, r0, #0
   16708:	beq	16720 <gen_monster@@Base+0x79c>
   1670c:	mov	r1, #14
   16710:	mov	r0, r4
   16714:	bl	213cc <flatcc_builder_table_add_offset@@Base>
   16718:	cmp	r0, #0
   1671c:	strne	r5, [r0]
   16720:	mov	r2, #1
   16724:	ldr	r1, [pc, #440]	; 168e4 <gen_monster@@Base+0x960>
   16728:	mov	r0, r4
   1672c:	bl	201a8 <flatcc_builder_check_required@@Base>
   16730:	cmp	r0, #0
   16734:	beq	1688c <gen_monster@@Base+0x908>
   16738:	mov	r0, r4
   1673c:	bl	20254 <flatcc_builder_end_table@@Base>
   16740:	mov	r1, r0
   16744:	mov	r0, r4
   16748:	bl	1ea90 <flatcc_builder_end_buffer@@Base>
   1674c:	mov	r0, #0
   16750:	add	sp, sp, #48	; 0x30
   16754:	pop	{r4, r5, r6, pc}
   16758:	mov	r3, #0
   1675c:	mov	r2, r3
   16760:	ldr	r1, [pc, #364]	; 168d4 <gen_monster@@Base+0x950>
   16764:	mov	r0, r4
   16768:	bl	1e9d8 <flatcc_builder_start_buffer@@Base>
   1676c:	cmp	r0, #0
   16770:	bne	15ff8 <gen_monster@@Base+0x74>
   16774:	mov	r1, #36	; 0x24
   16778:	mov	r0, r4
   1677c:	bl	1f804 <flatcc_builder_start_table@@Base>
   16780:	b	15ff8 <gen_monster@@Base+0x74>
   16784:	ldr	r3, [pc, #380]	; 16908 <gen_monster@@Base+0x984>
   16788:	ldr	r2, [pc, #380]	; 1690c <gen_monster@@Base+0x988>
   1678c:	ldr	r1, [pc, #380]	; 16910 <gen_monster@@Base+0x98c>
   16790:	ldr	r0, [pc, #380]	; 16914 <gen_monster@@Base+0x990>
   16794:	bl	12a8c <__assert_fail@plt>
   16798:	ldr	r3, [pc, #360]	; 16908 <gen_monster@@Base+0x984>
   1679c:	ldr	r2, [pc, #372]	; 16918 <gen_monster@@Base+0x994>
   167a0:	ldr	r1, [pc, #360]	; 16910 <gen_monster@@Base+0x98c>
   167a4:	ldr	r0, [pc, #368]	; 1691c <gen_monster@@Base+0x998>
   167a8:	bl	12a8c <__assert_fail@plt>
   167ac:	mov	r1, #3
   167b0:	mov	r0, r4
   167b4:	bl	213cc <flatcc_builder_table_add_offset@@Base>
   167b8:	cmp	r0, #0
   167bc:	strne	r5, [r0]
   167c0:	b	16208 <gen_monster@@Base+0x284>
   167c4:	ldr	r3, [pc, #340]	; 16920 <gen_monster@@Base+0x99c>
   167c8:	mov	r2, #235	; 0xeb
   167cc:	ldr	r1, [pc, #336]	; 16924 <gen_monster@@Base+0x9a0>
   167d0:	ldr	r0, [pc, #336]	; 16928 <gen_monster@@Base+0x9a4>
   167d4:	bl	12a8c <__assert_fail@plt>
   167d8:	ldr	r3, [pc, #320]	; 16920 <gen_monster@@Base+0x99c>
   167dc:	mov	r2, #235	; 0xeb
   167e0:	ldr	r1, [pc, #316]	; 16924 <gen_monster@@Base+0x9a0>
   167e4:	ldr	r0, [pc, #316]	; 16928 <gen_monster@@Base+0x9a4>
   167e8:	bl	12a8c <__assert_fail@plt>
   167ec:	ldr	r3, [pc, #276]	; 16908 <gen_monster@@Base+0x984>
   167f0:	ldr	r2, [pc, #308]	; 1692c <gen_monster@@Base+0x9a8>
   167f4:	ldr	r1, [pc, #276]	; 16910 <gen_monster@@Base+0x98c>
   167f8:	ldr	r0, [pc, #304]	; 16930 <gen_monster@@Base+0x9ac>
   167fc:	bl	12a8c <__assert_fail@plt>
   16800:	ldr	r3, [pc, #280]	; 16920 <gen_monster@@Base+0x99c>
   16804:	mov	r2, #235	; 0xeb
   16808:	ldr	r1, [pc, #276]	; 16924 <gen_monster@@Base+0x9a0>
   1680c:	ldr	r0, [pc, #276]	; 16928 <gen_monster@@Base+0x9a4>
   16810:	bl	12a8c <__assert_fail@plt>
   16814:	ldr	r3, [pc, #236]	; 16908 <gen_monster@@Base+0x984>
   16818:	ldr	r2, [pc, #276]	; 16934 <gen_monster@@Base+0x9b0>
   1681c:	ldr	r1, [pc, #236]	; 16910 <gen_monster@@Base+0x98c>
   16820:	ldr	r0, [pc, #272]	; 16938 <gen_monster@@Base+0x9b4>
   16824:	bl	12a8c <__assert_fail@plt>
   16828:	ldr	r3, [pc, #240]	; 16920 <gen_monster@@Base+0x99c>
   1682c:	mov	r2, #235	; 0xeb
   16830:	ldr	r1, [pc, #236]	; 16924 <gen_monster@@Base+0x9a0>
   16834:	ldr	r0, [pc, #236]	; 16928 <gen_monster@@Base+0x9a4>
   16838:	bl	12a8c <__assert_fail@plt>
   1683c:	ldr	r3, [pc, #220]	; 16920 <gen_monster@@Base+0x99c>
   16840:	mov	r2, #235	; 0xeb
   16844:	ldr	r1, [pc, #216]	; 16924 <gen_monster@@Base+0x9a0>
   16848:	ldr	r0, [pc, #216]	; 16928 <gen_monster@@Base+0x9a4>
   1684c:	bl	12a8c <__assert_fail@plt>
   16850:	ldr	r3, [pc, #200]	; 16920 <gen_monster@@Base+0x99c>
   16854:	mov	r2, #235	; 0xeb
   16858:	ldr	r1, [pc, #196]	; 16924 <gen_monster@@Base+0x9a0>
   1685c:	ldr	r0, [pc, #196]	; 16928 <gen_monster@@Base+0x9a4>
   16860:	bl	12a8c <__assert_fail@plt>
   16864:	ldr	r3, [pc, #180]	; 16920 <gen_monster@@Base+0x99c>
   16868:	mov	r2, #235	; 0xeb
   1686c:	ldr	r1, [pc, #176]	; 16924 <gen_monster@@Base+0x9a0>
   16870:	ldr	r0, [pc, #176]	; 16928 <gen_monster@@Base+0x9a4>
   16874:	bl	12a8c <__assert_fail@plt>
   16878:	ldr	r3, [pc, #188]	; 1693c <gen_monster@@Base+0x9b8>
   1687c:	mov	r2, #221	; 0xdd
   16880:	ldr	r1, [pc, #156]	; 16924 <gen_monster@@Base+0x9a0>
   16884:	ldr	r0, [pc, #180]	; 16940 <gen_monster@@Base+0x9bc>
   16888:	bl	12a8c <__assert_fail@plt>
   1688c:	ldr	r3, [pc, #140]	; 16920 <gen_monster@@Base+0x99c>
   16890:	mov	r2, #235	; 0xeb
   16894:	ldr	r1, [pc, #136]	; 16924 <gen_monster@@Base+0x9a0>
   16898:	ldr	r0, [pc, #136]	; 16928 <gen_monster@@Base+0x9a4>
   1689c:	bl	12a8c <__assert_fail@plt>
   168a0:	mov	r1, #36	; 0x24
   168a4:	mov	r0, r4
   168a8:	bl	1f804 <flatcc_builder_start_table@@Base>
   168ac:	ldr	r1, [pc, #72]	; 168fc <gen_monster@@Base+0x978>
   168b0:	mov	r0, r4
   168b4:	bl	135f0 <_start@@Base+0xb58>
   168b8:	mov	r0, r4
   168bc:	bl	1f5e0 <flatcc_builder_start_offset_vector@@Base>
   168c0:	mov	r1, #36	; 0x24
   168c4:	mov	r0, r4
   168c8:	bl	1f804 <flatcc_builder_start_table@@Base>
   168cc:	b	16518 <gen_monster@@Base+0x594>
   168d0:	andeq	r3, r2, r4, lsr r9
   168d4:	andeq	r4, r2, r0, asr r0
   168d8:	subgt	ip, ip, sp, asr #25
   168dc:	ldrdeq	r4, [r2], -ip
   168e0:	andeq	r4, r2, r4, asr #18
   168e4:	andeq	r3, r2, r4, ror #16
   168e8:	andeq	r4, r2, r8, lsr #19
   168ec:			; <UNDEFINED> instruction: 0x00024db0
   168f0:	andeq	r4, r2, ip, asr #21
   168f4:	andeq	r3, r2, r0, ror #17
   168f8:	andeq	r4, r2, r8, lsr #22
   168fc:	strdeq	r4, [r2], -r0
   16900:	andeq	r4, r2, r0, lsl #28
   16904:	andeq	r3, r2, ip, asr #18
   16908:	andeq	r3, r2, r0, asr #18
   1690c:	andeq	r0, r0, r1, ror r3
   16910:	ldrdeq	r4, [r2], -ip
   16914:	andeq	r4, r2, ip, lsr #26
   16918:	andeq	r0, r0, r3, ror r3
   1691c:	andeq	r4, r2, r4, asr sp
   16920:	andeq	r3, r2, r8, ror #16
   16924:	andeq	r4, r2, r8, asr r0
   16928:	andeq	r4, r2, r8, ror #3
   1692c:	muleq	r0, fp, r3
   16930:	andeq	r4, r2, ip, ror sp
   16934:	andeq	r0, r0, r1, lsr #7
   16938:	andeq	r4, r2, ip, asr #27
   1693c:	andeq	r3, r2, r0, asr r9
   16940:	andeq	r4, r2, ip, lsl #28

00016944 <test_monster@@Base>:
   16944:	push	{r4, r5, lr}
   16948:	sub	sp, sp, #12
   1694c:	mov	r4, r0
   16950:	mov	r1, #0
   16954:	bl	15f84 <gen_monster@@Base>
   16958:	add	r1, sp, #4
   1695c:	mov	r0, r4
   16960:	bl	21958 <flatcc_builder_finalize_aligned_buffer@@Base>
   16964:	mov	r4, r0
   16968:	ldr	r3, [pc, #100]	; 169d4 <test_monster@@Base+0x90>
   1696c:	ldr	r3, [r3]
   16970:	ldr	r2, [sp, #4]
   16974:	mov	r1, r0
   16978:	ldr	r0, [pc, #88]	; 169d8 <test_monster@@Base+0x94>
   1697c:	bl	134b0 <_start@@Base+0xa18>
   16980:	ldr	r3, [pc, #84]	; 169dc <test_monster@@Base+0x98>
   16984:	ldr	r2, [pc, #84]	; 169e0 <test_monster@@Base+0x9c>
   16988:	ldr	r1, [sp, #4]
   1698c:	mov	r0, r4
   16990:	bl	22dd4 <flatcc_verify_table_as_root@@Base>
   16994:	cmp	r0, #0
   16998:	bne	169bc <test_monster@@Base+0x78>
   1699c:	mov	r0, r4
   169a0:	bl	1540c <verify_monster@@Base>
   169a4:	mov	r5, r0
   169a8:	mov	r0, r4
   169ac:	bl	21a64 <flatcc_builder_aligned_free@@Base>
   169b0:	mov	r0, r5
   169b4:	add	sp, sp, #12
   169b8:	pop	{r4, r5, pc}
   169bc:	bl	220f4 <flatcc_verify_error_string@@Base>
   169c0:	mov	r1, r0
   169c4:	ldr	r0, [pc, #24]	; 169e4 <test_monster@@Base+0xa0>
   169c8:	bl	1299c <printf@plt>
   169cc:	mvn	r5, #0
   169d0:	b	169b0 <test_monster@@Base+0x6c>
   169d4:	andeq	r8, r3, r0, ror r0
   169d8:	andeq	r4, r2, r4, lsr #6
   169dc:	ldrdeq	r3, [r1], -r4
   169e0:	andeq	r4, r2, r0, asr r0
   169e4:	andeq	r4, r2, r8, lsr #29

000169e8 <test_monster_with_size@@Base>:
   169e8:	push	{r4, r5, lr}
   169ec:	sub	sp, sp, #12
   169f0:	mov	r4, r0
   169f4:	mov	r1, #1
   169f8:	bl	15f84 <gen_monster@@Base>
   169fc:	add	r1, sp, #4
   16a00:	mov	r0, r4
   16a04:	bl	21958 <flatcc_builder_finalize_aligned_buffer@@Base>
   16a08:	mov	r4, r0
   16a0c:	ldr	r3, [pc, #172]	; 16ac0 <test_monster_with_size@@Base+0xd8>
   16a10:	ldr	r3, [r3]
   16a14:	ldr	r2, [sp, #4]
   16a18:	mov	r1, r0
   16a1c:	ldr	r0, [pc, #160]	; 16ac4 <test_monster_with_size@@Base+0xdc>
   16a20:	bl	134b0 <_start@@Base+0xa18>
   16a24:	tst	r4, #15
   16a28:	bne	16a7c <test_monster_with_size@@Base+0x94>
   16a2c:	mov	r5, r4
   16a30:	ldr	r1, [r5], #4
   16a34:	ldr	r2, [sp, #4]
   16a38:	sub	r2, r2, #4
   16a3c:	cmp	r2, r1
   16a40:	bne	16a98 <test_monster_with_size@@Base+0xb0>
   16a44:	ldr	r3, [pc, #124]	; 16ac8 <test_monster_with_size@@Base+0xe0>
   16a48:	ldr	r2, [pc, #124]	; 16acc <test_monster_with_size@@Base+0xe4>
   16a4c:	mov	r0, r5
   16a50:	bl	22dd4 <flatcc_verify_table_as_root@@Base>
   16a54:	cmp	r0, #0
   16a58:	bne	16aa8 <test_monster_with_size@@Base+0xc0>
   16a5c:	mov	r0, r5
   16a60:	bl	1540c <verify_monster@@Base>
   16a64:	mov	r5, r0
   16a68:	mov	r0, r4
   16a6c:	bl	21a64 <flatcc_builder_aligned_free@@Base>
   16a70:	mov	r0, r5
   16a74:	add	sp, sp, #12
   16a78:	pop	{r4, r5, pc}
   16a7c:	ldr	r0, [pc, #76]	; 16ad0 <test_monster_with_size@@Base+0xe8>
   16a80:	bl	1299c <printf@plt>
   16a84:	mov	r1, r4
   16a88:	ldr	r0, [pc, #68]	; 16ad4 <test_monster_with_size@@Base+0xec>
   16a8c:	bl	1299c <printf@plt>
   16a90:	mvn	r5, #0
   16a94:	b	16a70 <test_monster_with_size@@Base+0x88>
   16a98:	ldr	r0, [pc, #56]	; 16ad8 <test_monster_with_size@@Base+0xf0>
   16a9c:	bl	1299c <printf@plt>
   16aa0:	mvn	r5, #0
   16aa4:	b	16a70 <test_monster_with_size@@Base+0x88>
   16aa8:	bl	220f4 <flatcc_verify_error_string@@Base>
   16aac:	mov	r1, r0
   16ab0:	ldr	r0, [pc, #36]	; 16adc <test_monster_with_size@@Base+0xf4>
   16ab4:	bl	1299c <printf@plt>
   16ab8:	mvn	r5, #0
   16abc:	b	16a70 <test_monster_with_size@@Base+0x88>
   16ac0:	andeq	r8, r3, r0, ror r0
   16ac4:	ldrdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   16ac8:	ldrdeq	r3, [r1], -r4
   16acc:	andeq	r4, r2, r0, asr r0
   16ad0:	andeq	r4, r2, ip, ror #29
   16ad4:	andeq	r4, r2, r0, asr #30
   16ad8:	andeq	r4, r2, r4, asr pc
   16adc:	andeq	r4, r2, ip, lsl #31

00016ae0 <test_string@@Base>:
   16ae0:	push	{r4, r5, r6, lr}
   16ae4:	mov	r4, r0
   16ae8:	bl	1e238 <flatcc_builder_reset@@Base>
   16aec:	mov	r3, #0
   16af0:	mov	r2, r3
   16af4:	ldr	r1, [pc, #484]	; 16ce0 <test_string@@Base+0x200>
   16af8:	mov	r0, r4
   16afc:	bl	1e9d8 <flatcc_builder_start_buffer@@Base>
   16b00:	cmp	r0, #0
   16b04:	bne	16b14 <test_string@@Base+0x34>
   16b08:	mov	r1, #36	; 0x24
   16b0c:	mov	r0, r4
   16b10:	bl	1f804 <flatcc_builder_start_table@@Base>
   16b14:	mov	r0, r4
   16b18:	bl	1f658 <flatcc_builder_start_string@@Base>
   16b1c:	mov	r1, #3
   16b20:	mov	r0, r4
   16b24:	bl	1f1c8 <flatcc_builder_extend_string@@Base>
   16b28:	mov	r3, #49	; 0x31
   16b2c:	strb	r3, [r0]
   16b30:	mov	r3, #50	; 0x32
   16b34:	strb	r3, [r0, #1]
   16b38:	mov	r3, #51	; 0x33
   16b3c:	strb	r3, [r0, #2]
   16b40:	ldr	r1, [pc, #412]	; 16ce4 <test_string@@Base+0x204>
   16b44:	mov	r0, r4
   16b48:	bl	1f338 <flatcc_builder_append_string_str@@Base>
   16b4c:	mov	r0, r4
   16b50:	bl	211f4 <flatcc_builder_string_len@@Base>
   16b54:	cmp	r0, #4
   16b58:	bne	16c68 <test_string@@Base+0x188>
   16b5c:	mov	r2, #30
   16b60:	ldr	r1, [pc, #384]	; 16ce8 <test_string@@Base+0x208>
   16b64:	mov	r0, r4
   16b68:	bl	1f360 <flatcc_builder_append_string_strn@@Base>
   16b6c:	mov	r0, r4
   16b70:	bl	211f4 <flatcc_builder_string_len@@Base>
   16b74:	cmp	r0, #8
   16b78:	bne	16c7c <test_string@@Base+0x19c>
   16b7c:	mov	r2, #2
   16b80:	ldr	r1, [pc, #356]	; 16cec <test_string@@Base+0x20c>
   16b84:	mov	r0, r4
   16b88:	bl	1f270 <flatcc_builder_append_string@@Base>
   16b8c:	mov	r0, r4
   16b90:	bl	211f4 <flatcc_builder_string_len@@Base>
   16b94:	cmp	r0, #10
   16b98:	bne	16c90 <test_string@@Base+0x1b0>
   16b9c:	mov	r1, #3
   16ba0:	mov	r0, r4
   16ba4:	bl	1f4c8 <flatcc_builder_truncate_string@@Base>
   16ba8:	mov	r0, r4
   16bac:	bl	211f4 <flatcc_builder_string_len@@Base>
   16bb0:	cmp	r0, #7
   16bb4:	bne	16ca4 <test_string@@Base+0x1c4>
   16bb8:	mov	r0, r4
   16bbc:	bl	211ec <flatcc_builder_string_edit@@Base>
   16bc0:	mov	r3, #46	; 0x2e
   16bc4:	strb	r3, [r0, #4]
   16bc8:	mov	r0, r4
   16bcc:	bl	210ec <flatcc_builder_end_string@@Base>
   16bd0:	subs	r5, r0, #0
   16bd4:	beq	16bec <test_string@@Base+0x10c>
   16bd8:	mov	r1, #3
   16bdc:	mov	r0, r4
   16be0:	bl	213cc <flatcc_builder_table_add_offset@@Base>
   16be4:	cmp	r0, #0
   16be8:	strne	r5, [r0]
   16bec:	mov	r2, #1
   16bf0:	ldr	r1, [pc, #248]	; 16cf0 <test_string@@Base+0x210>
   16bf4:	mov	r0, r4
   16bf8:	bl	201a8 <flatcc_builder_check_required@@Base>
   16bfc:	cmp	r0, #0
   16c00:	beq	16cb8 <test_string@@Base+0x1d8>
   16c04:	mov	r0, r4
   16c08:	bl	20254 <flatcc_builder_end_table@@Base>
   16c0c:	mov	r1, r0
   16c10:	mov	r0, r4
   16c14:	bl	1ea90 <flatcc_builder_end_buffer@@Base>
   16c18:	mov	r1, #0
   16c1c:	mov	r0, r4
   16c20:	bl	2181c <flatcc_builder_get_direct_buffer@@Base>
   16c24:	cmp	r0, #0
   16c28:	beq	16ccc <test_string@@Base+0x1ec>
   16c2c:	ldr	r2, [r0, #4]
   16c30:	ldr	r3, [pc, #188]	; 16cf4 <test_string@@Base+0x214>
   16c34:	cmp	r2, r3
   16c38:	ldreq	r3, [r0]
   16c3c:	addeq	r0, r0, r3
   16c40:	movne	r0, #0
   16c44:	bl	12f18 <_start@@Base+0x480>
   16c48:	ldr	r1, [pc, #168]	; 16cf8 <test_string@@Base+0x218>
   16c4c:	bl	12990 <strcmp@plt>
   16c50:	cmp	r0, #0
   16c54:	popeq	{r4, r5, r6, pc}
   16c58:	ldr	r0, [pc, #156]	; 16cfc <test_string@@Base+0x21c>
   16c5c:	bl	129f0 <puts@plt>
   16c60:	mvn	r0, #0
   16c64:	pop	{r4, r5, r6, pc}
   16c68:	ldr	r3, [pc, #144]	; 16d00 <test_string@@Base+0x220>
   16c6c:	ldr	r2, [pc, #144]	; 16d04 <test_string@@Base+0x224>
   16c70:	ldr	r1, [pc, #144]	; 16d08 <test_string@@Base+0x228>
   16c74:	ldr	r0, [pc, #144]	; 16d0c <test_string@@Base+0x22c>
   16c78:	bl	12a8c <__assert_fail@plt>
   16c7c:	ldr	r3, [pc, #124]	; 16d00 <test_string@@Base+0x220>
   16c80:	ldr	r2, [pc, #136]	; 16d10 <test_string@@Base+0x230>
   16c84:	ldr	r1, [pc, #124]	; 16d08 <test_string@@Base+0x228>
   16c88:	ldr	r0, [pc, #132]	; 16d14 <test_string@@Base+0x234>
   16c8c:	bl	12a8c <__assert_fail@plt>
   16c90:	ldr	r3, [pc, #104]	; 16d00 <test_string@@Base+0x220>
   16c94:	ldr	r2, [pc, #124]	; 16d18 <test_string@@Base+0x238>
   16c98:	ldr	r1, [pc, #104]	; 16d08 <test_string@@Base+0x228>
   16c9c:	ldr	r0, [pc, #120]	; 16d1c <test_string@@Base+0x23c>
   16ca0:	bl	12a8c <__assert_fail@plt>
   16ca4:	ldr	r3, [pc, #84]	; 16d00 <test_string@@Base+0x220>
   16ca8:	ldr	r2, [pc, #112]	; 16d20 <test_string@@Base+0x240>
   16cac:	ldr	r1, [pc, #84]	; 16d08 <test_string@@Base+0x228>
   16cb0:	ldr	r0, [pc, #108]	; 16d24 <test_string@@Base+0x244>
   16cb4:	bl	12a8c <__assert_fail@plt>
   16cb8:	ldr	r3, [pc, #104]	; 16d28 <test_string@@Base+0x248>
   16cbc:	mov	r2, #235	; 0xeb
   16cc0:	ldr	r1, [pc, #100]	; 16d2c <test_string@@Base+0x24c>
   16cc4:	ldr	r0, [pc, #100]	; 16d30 <test_string@@Base+0x250>
   16cc8:	bl	12a8c <__assert_fail@plt>
   16ccc:	ldr	r3, [pc, #44]	; 16d00 <test_string@@Base+0x220>
   16cd0:	ldr	r2, [pc, #92]	; 16d34 <test_string@@Base+0x254>
   16cd4:	ldr	r1, [pc, #44]	; 16d08 <test_string@@Base+0x228>
   16cd8:	ldr	r0, [pc, #88]	; 16d38 <test_string@@Base+0x258>
   16cdc:	bl	12a8c <__assert_fail@plt>
   16ce0:	andeq	r4, r2, r0, asr r0
   16ce4:	andeq	r4, r2, ip, ror #31
   16ce8:	strdeq	r4, [r2], -r0
   16cec:	andeq	r5, r2, r0, lsr #32
   16cf0:	andeq	r3, r2, r4, ror #16
   16cf4:	movtpl	r4, #61261	; 0xef4d
   16cf8:	andeq	r5, r2, r4, ror r0
   16cfc:	andeq	r5, r2, ip, ror r0
   16d00:	andeq	r3, r2, r8, ror #18
   16d04:	andeq	r0, r0, r8, lsr r4
   16d08:	ldrdeq	r4, [r2], -ip
   16d0c:	andeq	r4, r2, r8, asr #31
   16d10:	andeq	r0, r0, sl, lsr r4
   16d14:	strdeq	r4, [r2], -r8
   16d18:	andeq	r0, r0, ip, lsr r4
   16d1c:	andeq	r5, r2, r4, lsr #32
   16d20:	andeq	r0, r0, lr, lsr r4
   16d24:	andeq	r5, r2, ip, asr #32
   16d28:	andeq	r3, r2, r8, ror #16
   16d2c:	andeq	r4, r2, r8, asr r0
   16d30:	andeq	r4, r2, r8, ror #3
   16d34:	andeq	r0, r0, r5, asr #8
   16d38:	andeq	r4, r2, r8, ror r1

00016d3c <test_sort_find@@Base>:
   16d3c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16d40:	sub	sp, sp, #44	; 0x2c
   16d44:	mov	r4, r0
   16d48:	bl	1e238 <flatcc_builder_reset@@Base>
   16d4c:	mov	r3, #0
   16d50:	mov	r2, r3
   16d54:	ldr	r1, [pc, #4044]	; 17d28 <test_sort_find@@Base+0xfec>
   16d58:	mov	r0, r4
   16d5c:	bl	1e9d8 <flatcc_builder_start_buffer@@Base>
   16d60:	cmp	r0, #0
   16d64:	bne	16d74 <test_sort_find@@Base+0x38>
   16d68:	mov	r1, #36	; 0x24
   16d6c:	mov	r0, r4
   16d70:	bl	1f804 <flatcc_builder_start_table@@Base>
   16d74:	ldr	r1, [pc, #4016]	; 17d2c <test_sort_find@@Base+0xff0>
   16d78:	mov	r0, r4
   16d7c:	bl	2108c <flatcc_builder_create_string_str@@Base>
   16d80:	subs	r5, r0, #0
   16d84:	beq	16d9c <test_sort_find@@Base+0x60>
   16d88:	mov	r1, #3
   16d8c:	mov	r0, r4
   16d90:	bl	213cc <flatcc_builder_table_add_offset@@Base>
   16d94:	cmp	r0, #0
   16d98:	strne	r5, [r0]
   16d9c:	mov	r0, r4
   16da0:	bl	1f5e0 <flatcc_builder_start_offset_vector@@Base>
   16da4:	mov	r1, #36	; 0x24
   16da8:	mov	r0, r4
   16dac:	bl	1f804 <flatcc_builder_start_table@@Base>
   16db0:	ldr	r1, [pc, #3960]	; 17d30 <test_sort_find@@Base+0xff4>
   16db4:	mov	r0, r4
   16db8:	bl	2108c <flatcc_builder_create_string_str@@Base>
   16dbc:	subs	r5, r0, #0
   16dc0:	beq	16dd8 <test_sort_find@@Base+0x9c>
   16dc4:	mov	r1, #3
   16dc8:	mov	r0, r4
   16dcc:	bl	213cc <flatcc_builder_table_add_offset@@Base>
   16dd0:	cmp	r0, #0
   16dd4:	strne	r5, [r0]
   16dd8:	mov	r2, #1
   16ddc:	ldr	r1, [pc, #3920]	; 17d34 <test_sort_find@@Base+0xff8>
   16de0:	mov	r0, r4
   16de4:	bl	201a8 <flatcc_builder_check_required@@Base>
   16de8:	cmp	r0, #0
   16dec:	beq	170a4 <test_sort_find@@Base+0x368>
   16df0:	mov	r0, r4
   16df4:	bl	20254 <flatcc_builder_end_table@@Base>
   16df8:	subs	r1, r0, #0
   16dfc:	beq	16e08 <test_sort_find@@Base+0xcc>
   16e00:	mov	r0, r4
   16e04:	bl	1f048 <flatcc_builder_offset_vector_push@@Base>
   16e08:	mov	r1, #36	; 0x24
   16e0c:	mov	r0, r4
   16e10:	bl	1f804 <flatcc_builder_start_table@@Base>
   16e14:	ldr	r1, [pc, #3868]	; 17d38 <test_sort_find@@Base+0xffc>
   16e18:	mov	r0, r4
   16e1c:	bl	2108c <flatcc_builder_create_string_str@@Base>
   16e20:	subs	r5, r0, #0
   16e24:	beq	16e3c <test_sort_find@@Base+0x100>
   16e28:	mov	r1, #3
   16e2c:	mov	r0, r4
   16e30:	bl	213cc <flatcc_builder_table_add_offset@@Base>
   16e34:	cmp	r0, #0
   16e38:	strne	r5, [r0]
   16e3c:	mov	r2, #1
   16e40:	ldr	r1, [pc, #3820]	; 17d34 <test_sort_find@@Base+0xff8>
   16e44:	mov	r0, r4
   16e48:	bl	201a8 <flatcc_builder_check_required@@Base>
   16e4c:	cmp	r0, #0
   16e50:	beq	170b8 <test_sort_find@@Base+0x37c>
   16e54:	mov	r0, r4
   16e58:	bl	20254 <flatcc_builder_end_table@@Base>
   16e5c:	subs	r1, r0, #0
   16e60:	beq	16e6c <test_sort_find@@Base+0x130>
   16e64:	mov	r0, r4
   16e68:	bl	1f048 <flatcc_builder_offset_vector_push@@Base>
   16e6c:	mov	r1, #36	; 0x24
   16e70:	mov	r0, r4
   16e74:	bl	1f804 <flatcc_builder_start_table@@Base>
   16e78:	ldr	r1, [pc, #3772]	; 17d3c <test_sort_find@@Base+0x1000>
   16e7c:	mov	r0, r4
   16e80:	bl	2108c <flatcc_builder_create_string_str@@Base>
   16e84:	subs	r5, r0, #0
   16e88:	beq	16ea0 <test_sort_find@@Base+0x164>
   16e8c:	mov	r1, #3
   16e90:	mov	r0, r4
   16e94:	bl	213cc <flatcc_builder_table_add_offset@@Base>
   16e98:	cmp	r0, #0
   16e9c:	strne	r5, [r0]
   16ea0:	mov	r2, #1
   16ea4:	ldr	r1, [pc, #3720]	; 17d34 <test_sort_find@@Base+0xff8>
   16ea8:	mov	r0, r4
   16eac:	bl	201a8 <flatcc_builder_check_required@@Base>
   16eb0:	cmp	r0, #0
   16eb4:	beq	170cc <test_sort_find@@Base+0x390>
   16eb8:	mov	r0, r4
   16ebc:	bl	20254 <flatcc_builder_end_table@@Base>
   16ec0:	subs	r1, r0, #0
   16ec4:	beq	16ed0 <test_sort_find@@Base+0x194>
   16ec8:	mov	r0, r4
   16ecc:	bl	1f048 <flatcc_builder_offset_vector_push@@Base>
   16ed0:	mov	r1, #36	; 0x24
   16ed4:	mov	r0, r4
   16ed8:	bl	1f804 <flatcc_builder_start_table@@Base>
   16edc:	ldr	r1, [pc, #3676]	; 17d40 <test_sort_find@@Base+0x1004>
   16ee0:	mov	r0, r4
   16ee4:	bl	2108c <flatcc_builder_create_string_str@@Base>
   16ee8:	subs	r5, r0, #0
   16eec:	beq	16f04 <test_sort_find@@Base+0x1c8>
   16ef0:	mov	r1, #3
   16ef4:	mov	r0, r4
   16ef8:	bl	213cc <flatcc_builder_table_add_offset@@Base>
   16efc:	cmp	r0, #0
   16f00:	strne	r5, [r0]
   16f04:	mov	r2, #1
   16f08:	ldr	r1, [pc, #3620]	; 17d34 <test_sort_find@@Base+0xff8>
   16f0c:	mov	r0, r4
   16f10:	bl	201a8 <flatcc_builder_check_required@@Base>
   16f14:	cmp	r0, #0
   16f18:	beq	170e0 <test_sort_find@@Base+0x3a4>
   16f1c:	mov	r0, r4
   16f20:	bl	20254 <flatcc_builder_end_table@@Base>
   16f24:	subs	r1, r0, #0
   16f28:	beq	16f34 <test_sort_find@@Base+0x1f8>
   16f2c:	mov	r0, r4
   16f30:	bl	1f048 <flatcc_builder_offset_vector_push@@Base>
   16f34:	mov	r1, #36	; 0x24
   16f38:	mov	r0, r4
   16f3c:	bl	1f804 <flatcc_builder_start_table@@Base>
   16f40:	ldr	r1, [pc, #3572]	; 17d3c <test_sort_find@@Base+0x1000>
   16f44:	mov	r0, r4
   16f48:	bl	2108c <flatcc_builder_create_string_str@@Base>
   16f4c:	subs	r5, r0, #0
   16f50:	beq	16f68 <test_sort_find@@Base+0x22c>
   16f54:	mov	r1, #3
   16f58:	mov	r0, r4
   16f5c:	bl	213cc <flatcc_builder_table_add_offset@@Base>
   16f60:	cmp	r0, #0
   16f64:	strne	r5, [r0]
   16f68:	mov	r2, #1
   16f6c:	ldr	r1, [pc, #3520]	; 17d34 <test_sort_find@@Base+0xff8>
   16f70:	mov	r0, r4
   16f74:	bl	201a8 <flatcc_builder_check_required@@Base>
   16f78:	cmp	r0, #0
   16f7c:	beq	170f4 <test_sort_find@@Base+0x3b8>
   16f80:	mov	r0, r4
   16f84:	bl	20254 <flatcc_builder_end_table@@Base>
   16f88:	subs	r1, r0, #0
   16f8c:	beq	16f98 <test_sort_find@@Base+0x25c>
   16f90:	mov	r0, r4
   16f94:	bl	1f048 <flatcc_builder_offset_vector_push@@Base>
   16f98:	mov	r0, r4
   16f9c:	bl	2067c <flatcc_builder_end_offset_vector@@Base>
   16fa0:	subs	r5, r0, #0
   16fa4:	beq	16fbc <test_sort_find@@Base+0x280>
   16fa8:	mov	r1, #11
   16fac:	mov	r0, r4
   16fb0:	bl	213cc <flatcc_builder_table_add_offset@@Base>
   16fb4:	cmp	r0, #0
   16fb8:	strne	r5, [r0]
   16fbc:	mov	r2, #1
   16fc0:	ldr	r1, [pc, #3436]	; 17d34 <test_sort_find@@Base+0xff8>
   16fc4:	mov	r0, r4
   16fc8:	bl	201a8 <flatcc_builder_check_required@@Base>
   16fcc:	cmp	r0, #0
   16fd0:	beq	17108 <test_sort_find@@Base+0x3cc>
   16fd4:	mov	r0, r4
   16fd8:	bl	20254 <flatcc_builder_end_table@@Base>
   16fdc:	mov	r1, r0
   16fe0:	mov	r0, r4
   16fe4:	bl	1ea90 <flatcc_builder_end_buffer@@Base>
   16fe8:	add	r1, sp, #36	; 0x24
   16fec:	mov	r0, r4
   16ff0:	bl	21958 <flatcc_builder_finalize_aligned_buffer@@Base>
   16ff4:	mov	r4, r0
   16ff8:	str	r0, [sp, #20]
   16ffc:	ldr	r3, [pc, #3392]	; 17d44 <test_sort_find@@Base+0x1008>
   17000:	ldr	r3, [r3]
   17004:	ldr	r2, [sp, #36]	; 0x24
   17008:	mov	r1, r0
   1700c:	ldr	r0, [pc, #3380]	; 17d48 <test_sort_find@@Base+0x100c>
   17010:	bl	134b0 <_start@@Base+0xa18>
   17014:	cmp	r4, #0
   17018:	beq	1711c <test_sort_find@@Base+0x3e0>
   1701c:	ldr	r2, [r4, #4]
   17020:	ldr	r3, [pc, #3364]	; 17d4c <test_sort_find@@Base+0x1010>
   17024:	cmp	r2, r3
   17028:	bne	1711c <test_sort_find@@Base+0x3e0>
   1702c:	ldr	r3, [r4]
   17030:	adds	r2, r4, r3
   17034:	beq	1711c <test_sort_find@@Base+0x3e0>
   17038:	ldr	r1, [sp, #20]
   1703c:	ldr	r3, [r1, r3]
   17040:	sub	r3, r2, r3
   17044:	ldrh	r1, [r3]
   17048:	cmp	r1, #27
   1704c:	bls	17130 <test_sort_find@@Base+0x3f4>
   17050:	ldrh	r3, [r3, #26]
   17054:	cmp	r3, #0
   17058:	beq	17130 <test_sort_find@@Base+0x3f4>
   1705c:	add	r1, r2, r3
   17060:	str	r1, [sp, #24]
   17064:	ldr	r3, [r2, r3]
   17068:	add	r3, r3, #4
   1706c:	str	r3, [sp, #28]
   17070:	adds	fp, r1, r3
   17074:	beq	17130 <test_sort_find@@Base+0x3f4>
   17078:	ldr	r3, [fp, #-4]
   1707c:	str	r3, [sp, #16]
   17080:	cmp	r3, #0
   17084:	beq	17804 <test_sort_find@@Base+0xac8>
   17088:	sub	r2, r3, #1
   1708c:	str	r2, [sp]
   17090:	lsr	r3, r3, #1
   17094:	str	r3, [sp, #8]
   17098:	lsl	r3, r3, #1
   1709c:	str	r3, [sp, #12]
   170a0:	b	17464 <test_sort_find@@Base+0x728>
   170a4:	ldr	r3, [pc, #3236]	; 17d50 <test_sort_find@@Base+0x1014>
   170a8:	mov	r2, #235	; 0xeb
   170ac:	ldr	r1, [pc, #3232]	; 17d54 <test_sort_find@@Base+0x1018>
   170b0:	ldr	r0, [pc, #3232]	; 17d58 <test_sort_find@@Base+0x101c>
   170b4:	bl	12a8c <__assert_fail@plt>
   170b8:	ldr	r3, [pc, #3216]	; 17d50 <test_sort_find@@Base+0x1014>
   170bc:	mov	r2, #235	; 0xeb
   170c0:	ldr	r1, [pc, #3212]	; 17d54 <test_sort_find@@Base+0x1018>
   170c4:	ldr	r0, [pc, #3212]	; 17d58 <test_sort_find@@Base+0x101c>
   170c8:	bl	12a8c <__assert_fail@plt>
   170cc:	ldr	r3, [pc, #3196]	; 17d50 <test_sort_find@@Base+0x1014>
   170d0:	mov	r2, #235	; 0xeb
   170d4:	ldr	r1, [pc, #3192]	; 17d54 <test_sort_find@@Base+0x1018>
   170d8:	ldr	r0, [pc, #3192]	; 17d58 <test_sort_find@@Base+0x101c>
   170dc:	bl	12a8c <__assert_fail@plt>
   170e0:	ldr	r3, [pc, #3176]	; 17d50 <test_sort_find@@Base+0x1014>
   170e4:	mov	r2, #235	; 0xeb
   170e8:	ldr	r1, [pc, #3172]	; 17d54 <test_sort_find@@Base+0x1018>
   170ec:	ldr	r0, [pc, #3172]	; 17d58 <test_sort_find@@Base+0x101c>
   170f0:	bl	12a8c <__assert_fail@plt>
   170f4:	ldr	r3, [pc, #3156]	; 17d50 <test_sort_find@@Base+0x1014>
   170f8:	mov	r2, #235	; 0xeb
   170fc:	ldr	r1, [pc, #3152]	; 17d54 <test_sort_find@@Base+0x1018>
   17100:	ldr	r0, [pc, #3152]	; 17d58 <test_sort_find@@Base+0x101c>
   17104:	bl	12a8c <__assert_fail@plt>
   17108:	ldr	r3, [pc, #3136]	; 17d50 <test_sort_find@@Base+0x1014>
   1710c:	mov	r2, #235	; 0xeb
   17110:	ldr	r1, [pc, #3132]	; 17d54 <test_sort_find@@Base+0x1018>
   17114:	ldr	r0, [pc, #3132]	; 17d58 <test_sort_find@@Base+0x101c>
   17118:	bl	12a8c <__assert_fail@plt>
   1711c:	ldr	r3, [pc, #3128]	; 17d5c <test_sort_find@@Base+0x1020>
   17120:	ldr	r2, [pc, #3128]	; 17d60 <test_sort_find@@Base+0x1024>
   17124:	ldr	r1, [pc, #3248]	; 17ddc <test_sort_find@@Base+0x10a0>
   17128:	ldr	r0, [pc, #3224]	; 17dc8 <test_sort_find@@Base+0x108c>
   1712c:	bl	12a8c <__assert_fail@plt>
   17130:	ldr	r3, [pc, #3116]	; 17d64 <test_sort_find@@Base+0x1028>
   17134:	ldr	r2, [pc, #3116]	; 17d68 <test_sort_find@@Base+0x102c>
   17138:	ldr	r1, [pc, #3116]	; 17d6c <test_sort_find@@Base+0x1030>
   1713c:	ldr	r0, [pc, #3116]	; 17d70 <test_sort_find@@Base+0x1034>
   17140:	bl	12a8c <__assert_fail@plt>
   17144:	lsl	r3, r4, #2
   17148:	add	r2, fp, r3
   1714c:	ldr	ip, [fp, #-4]
   17150:	cmp	r4, ip
   17154:	bcs	1721c <test_sort_find@@Base+0x4e0>
   17158:	ldr	r0, [fp, r4, lsl #2]
   1715c:	adds	r1, r2, r0
   17160:	beq	17230 <test_sort_find@@Base+0x4f4>
   17164:	ldr	r2, [r2, r0]
   17168:	sub	r2, r1, r2
   1716c:	ldrh	r0, [r2]
   17170:	cmp	r0, #11
   17174:	bls	17244 <test_sort_find@@Base+0x508>
   17178:	ldrh	r2, [r2, #10]
   1717c:	cmp	r2, #0
   17180:	beq	17244 <test_sort_find@@Base+0x508>
   17184:	add	lr, r1, r2
   17188:	ldr	r0, [r1, r2]
   1718c:	add	r0, r0, #4
   17190:	add	r0, lr, r0
   17194:	add	r5, r4, #1
   17198:	add	r3, r3, #4
   1719c:	add	r1, fp, r3
   171a0:	cmp	r5, ip
   171a4:	bcs	17258 <test_sort_find@@Base+0x51c>
   171a8:	ldr	r3, [fp, r3]
   171ac:	adds	r2, r1, r3
   171b0:	beq	1726c <test_sort_find@@Base+0x530>
   171b4:	ldr	r3, [r1, r3]
   171b8:	sub	r3, r2, r3
   171bc:	ldrh	r1, [r3]
   171c0:	cmp	r1, #11
   171c4:	bls	17280 <test_sort_find@@Base+0x544>
   171c8:	ldrh	r3, [r3, #10]
   171cc:	cmp	r3, #0
   171d0:	beq	17280 <test_sort_find@@Base+0x544>
   171d4:	add	r1, r2, r3
   171d8:	ldr	r3, [r2, r3]
   171dc:	add	r3, r3, #4
   171e0:	adds	r1, r1, r3
   171e4:	moveq	r6, #0
   171e8:	ldrne	r6, [r1, #-4]
   171ec:	cmp	r0, #0
   171f0:	beq	17294 <test_sort_find@@Base+0x558>
   171f4:	ldr	r7, [r0, #-4]
   171f8:	cmp	r6, r7
   171fc:	movcc	r2, r6
   17200:	movcs	r2, r7
   17204:	bl	12a74 <strncmp@plt>
   17208:	cmp	r0, #0
   1720c:	bne	1729c <test_sort_find@@Base+0x560>
   17210:	cmp	r7, r6
   17214:	movcs	r5, r4
   17218:	b	17370 <test_sort_find@@Base+0x634>
   1721c:	ldr	r3, [pc, #2996]	; 17dd8 <test_sort_find@@Base+0x109c>
   17220:	ldr	r2, [pc, #2968]	; 17dc0 <test_sort_find@@Base+0x1084>
   17224:	ldr	r1, [pc, #2992]	; 17ddc <test_sort_find@@Base+0x10a0>
   17228:	ldr	r0, [pc, #2964]	; 17dc4 <test_sort_find@@Base+0x1088>
   1722c:	bl	12a8c <__assert_fail@plt>
   17230:	ldr	r3, [pc, #2964]	; 17dcc <test_sort_find@@Base+0x1090>
   17234:	ldr	r2, [pc, #2964]	; 17dd0 <test_sort_find@@Base+0x1094>
   17238:	ldr	r1, [pc, #2972]	; 17ddc <test_sort_find@@Base+0x10a0>
   1723c:	ldr	r0, [pc, #2948]	; 17dc8 <test_sort_find@@Base+0x108c>
   17240:	bl	12a8c <__assert_fail@plt>
   17244:	ldr	r3, [pc, #2944]	; 17dcc <test_sort_find@@Base+0x1090>
   17248:	ldr	r2, [pc, #2944]	; 17dd0 <test_sort_find@@Base+0x1094>
   1724c:	ldr	r1, [pc, #2952]	; 17ddc <test_sort_find@@Base+0x10a0>
   17250:	ldr	r0, [pc, #2940]	; 17dd4 <test_sort_find@@Base+0x1098>
   17254:	bl	12a8c <__assert_fail@plt>
   17258:	ldr	r3, [pc, #2936]	; 17dd8 <test_sort_find@@Base+0x109c>
   1725c:	ldr	r2, [pc, #2908]	; 17dc0 <test_sort_find@@Base+0x1084>
   17260:	ldr	r1, [pc, #2932]	; 17ddc <test_sort_find@@Base+0x10a0>
   17264:	ldr	r0, [pc, #2904]	; 17dc4 <test_sort_find@@Base+0x1088>
   17268:	bl	12a8c <__assert_fail@plt>
   1726c:	ldr	r3, [pc, #2904]	; 17dcc <test_sort_find@@Base+0x1090>
   17270:	ldr	r2, [pc, #2904]	; 17dd0 <test_sort_find@@Base+0x1094>
   17274:	ldr	r1, [pc, #2912]	; 17ddc <test_sort_find@@Base+0x10a0>
   17278:	ldr	r0, [pc, #2888]	; 17dc8 <test_sort_find@@Base+0x108c>
   1727c:	bl	12a8c <__assert_fail@plt>
   17280:	ldr	r3, [pc, #2884]	; 17dcc <test_sort_find@@Base+0x1090>
   17284:	ldr	r2, [pc, #2884]	; 17dd0 <test_sort_find@@Base+0x1094>
   17288:	ldr	r1, [pc, #2892]	; 17ddc <test_sort_find@@Base+0x10a0>
   1728c:	ldr	r0, [pc, #2880]	; 17dd4 <test_sort_find@@Base+0x1098>
   17290:	bl	12a8c <__assert_fail@plt>
   17294:	mov	r7, #0
   17298:	b	17210 <test_sort_find@@Base+0x4d4>
   1729c:	cmp	r0, #0
   172a0:	movge	r5, r4
   172a4:	b	17370 <test_sort_find@@Base+0x634>
   172a8:	ldr	r3, [pc, #2856]	; 17dd8 <test_sort_find@@Base+0x109c>
   172ac:	ldr	r2, [pc, #2828]	; 17dc0 <test_sort_find@@Base+0x1084>
   172b0:	ldr	r1, [pc, #2852]	; 17ddc <test_sort_find@@Base+0x10a0>
   172b4:	ldr	r0, [pc, #2824]	; 17dc4 <test_sort_find@@Base+0x1088>
   172b8:	bl	12a8c <__assert_fail@plt>
   172bc:	ldr	r3, [pc, #2824]	; 17dcc <test_sort_find@@Base+0x1090>
   172c0:	ldr	r2, [pc, #2824]	; 17dd0 <test_sort_find@@Base+0x1094>
   172c4:	ldr	r1, [pc, #2832]	; 17ddc <test_sort_find@@Base+0x10a0>
   172c8:	ldr	r0, [pc, #2808]	; 17dc8 <test_sort_find@@Base+0x108c>
   172cc:	bl	12a8c <__assert_fail@plt>
   172d0:	ldr	r3, [pc, #2804]	; 17dcc <test_sort_find@@Base+0x1090>
   172d4:	ldr	r2, [pc, #2804]	; 17dd0 <test_sort_find@@Base+0x1094>
   172d8:	ldr	r1, [pc, #2812]	; 17ddc <test_sort_find@@Base+0x10a0>
   172dc:	ldr	r0, [pc, #2800]	; 17dd4 <test_sort_find@@Base+0x1098>
   172e0:	bl	12a8c <__assert_fail@plt>
   172e4:	ldr	r3, [pc, #2796]	; 17dd8 <test_sort_find@@Base+0x109c>
   172e8:	ldr	r2, [pc, #2768]	; 17dc0 <test_sort_find@@Base+0x1084>
   172ec:	ldr	r1, [pc, #2792]	; 17ddc <test_sort_find@@Base+0x10a0>
   172f0:	ldr	r0, [pc, #2764]	; 17dc4 <test_sort_find@@Base+0x1088>
   172f4:	bl	12a8c <__assert_fail@plt>
   172f8:	ldr	r3, [pc, #2764]	; 17dcc <test_sort_find@@Base+0x1090>
   172fc:	ldr	r2, [pc, #2764]	; 17dd0 <test_sort_find@@Base+0x1094>
   17300:	ldr	r1, [pc, #2772]	; 17ddc <test_sort_find@@Base+0x10a0>
   17304:	ldr	r0, [pc, #2748]	; 17dc8 <test_sort_find@@Base+0x108c>
   17308:	bl	12a8c <__assert_fail@plt>
   1730c:	ldr	r3, [pc, #2744]	; 17dcc <test_sort_find@@Base+0x1090>
   17310:	ldr	r2, [pc, #2744]	; 17dd0 <test_sort_find@@Base+0x1094>
   17314:	ldr	r1, [pc, #2752]	; 17ddc <test_sort_find@@Base+0x10a0>
   17318:	ldr	r0, [pc, #2740]	; 17dd4 <test_sort_find@@Base+0x1098>
   1731c:	bl	12a8c <__assert_fail@plt>
   17320:	mov	r7, #0
   17324:	b	1743c <test_sort_find@@Base+0x700>
   17328:	cmp	r0, #0
   1732c:	bge	17444 <test_sort_find@@Base+0x708>
   17330:	sub	r3, sl, r5
   17334:	lsl	r3, r3, #2
   17338:	sub	r4, r4, r3
   1733c:	str	r4, [fp, r9]
   17340:	add	r6, r3, r6
   17344:	ldr	r3, [sp, #4]
   17348:	str	r6, [fp, r3]
   1734c:	lsl	r4, r5, #1
   17350:	mov	sl, r5
   17354:	ldr	r3, [sp]
   17358:	cmp	r3, r4
   1735c:	bcc	17444 <test_sort_find@@Base+0x708>
   17360:	ldr	r3, [sp]
   17364:	cmp	r3, r4
   17368:	movls	r5, r4
   1736c:	bhi	17144 <test_sort_find@@Base+0x408>
   17370:	lsl	r9, sl, #2
   17374:	add	r3, fp, r9
   17378:	ldr	r1, [fp, #-4]
   1737c:	cmp	sl, r1
   17380:	bcs	172a8 <test_sort_find@@Base+0x56c>
   17384:	ldr	r6, [fp, sl, lsl #2]
   17388:	adds	r2, r3, r6
   1738c:	beq	172bc <test_sort_find@@Base+0x580>
   17390:	ldr	r3, [r3, r6]
   17394:	sub	r3, r2, r3
   17398:	ldrh	r0, [r3]
   1739c:	cmp	r0, #11
   173a0:	bls	172d0 <test_sort_find@@Base+0x594>
   173a4:	ldrh	r3, [r3, #10]
   173a8:	cmp	r3, #0
   173ac:	beq	172d0 <test_sort_find@@Base+0x594>
   173b0:	add	ip, r2, r3
   173b4:	ldr	r0, [r2, r3]
   173b8:	add	r0, r0, #4
   173bc:	add	r0, ip, r0
   173c0:	lsl	r3, r5, #2
   173c4:	str	r3, [sp, #4]
   173c8:	add	r3, fp, r3
   173cc:	cmp	r5, r1
   173d0:	bcs	172e4 <test_sort_find@@Base+0x5a8>
   173d4:	ldr	r4, [fp, r5, lsl #2]
   173d8:	adds	r2, r3, r4
   173dc:	beq	172f8 <test_sort_find@@Base+0x5bc>
   173e0:	ldr	r3, [r3, r4]
   173e4:	sub	r3, r2, r3
   173e8:	ldrh	r1, [r3]
   173ec:	cmp	r1, #11
   173f0:	bls	1730c <test_sort_find@@Base+0x5d0>
   173f4:	ldrh	r3, [r3, #10]
   173f8:	cmp	r3, #0
   173fc:	beq	1730c <test_sort_find@@Base+0x5d0>
   17400:	add	r1, r2, r3
   17404:	ldr	r3, [r2, r3]
   17408:	add	r3, r3, #4
   1740c:	adds	r1, r1, r3
   17410:	moveq	r8, #0
   17414:	ldrne	r8, [r1, #-4]
   17418:	cmp	r0, #0
   1741c:	beq	17320 <test_sort_find@@Base+0x5e4>
   17420:	ldr	r7, [r0, #-4]
   17424:	cmp	r8, r7
   17428:	movcc	r2, r8
   1742c:	movcs	r2, r7
   17430:	bl	12a74 <strncmp@plt>
   17434:	cmp	r0, #0
   17438:	bne	17328 <test_sort_find@@Base+0x5ec>
   1743c:	cmp	r8, r7
   17440:	bhi	17330 <test_sort_find@@Base+0x5f4>
   17444:	ldr	r2, [sp, #8]
   17448:	sub	r3, r2, #1
   1744c:	ldr	r1, [sp, #12]
   17450:	sub	r1, r1, #2
   17454:	str	r1, [sp, #12]
   17458:	cmp	r2, #0
   1745c:	beq	17480 <test_sort_find@@Base+0x744>
   17460:	str	r3, [sp, #8]
   17464:	ldr	r3, [sp, #12]
   17468:	ldr	r2, [sp]
   1746c:	cmp	r3, r2
   17470:	bhi	17444 <test_sort_find@@Base+0x708>
   17474:	ldr	sl, [sp, #8]
   17478:	mov	r4, r3
   1747c:	b	17360 <test_sort_find@@Base+0x624>
   17480:	ldr	r3, [sp]
   17484:	cmp	r3, #0
   17488:	beq	17804 <test_sort_find@@Base+0xac8>
   1748c:	ldr	r3, [sp, #16]
   17490:	add	r2, fp, r3, lsl #2
   17494:	str	r2, [sp, #16]
   17498:	rsb	r3, r3, r3, lsl #30
   1749c:	lsl	r3, r3, #2
   174a0:	add	r3, r3, #4
   174a4:	str	r3, [sp, #12]
   174a8:	b	177c4 <test_sort_find@@Base+0xa88>
   174ac:	lsl	r3, r4, #2
   174b0:	add	r0, fp, r3
   174b4:	ldr	ip, [fp, #-4]
   174b8:	cmp	r4, ip
   174bc:	bcs	17584 <test_sort_find@@Base+0x848>
   174c0:	ldr	r2, [fp, r4, lsl #2]
   174c4:	adds	r1, r0, r2
   174c8:	beq	17598 <test_sort_find@@Base+0x85c>
   174cc:	ldr	r2, [r0, r2]
   174d0:	sub	r2, r1, r2
   174d4:	ldrh	r0, [r2]
   174d8:	cmp	r0, #11
   174dc:	bls	175ac <test_sort_find@@Base+0x870>
   174e0:	ldrh	r2, [r2, #10]
   174e4:	cmp	r2, #0
   174e8:	beq	175ac <test_sort_find@@Base+0x870>
   174ec:	add	lr, r1, r2
   174f0:	ldr	r0, [r1, r2]
   174f4:	add	r0, r0, #4
   174f8:	add	r0, lr, r0
   174fc:	add	r5, r4, #1
   17500:	add	r3, r3, #4
   17504:	add	r1, fp, r3
   17508:	cmp	r5, ip
   1750c:	bcs	175c0 <test_sort_find@@Base+0x884>
   17510:	ldr	r3, [fp, r3]
   17514:	adds	r2, r1, r3
   17518:	beq	175d4 <test_sort_find@@Base+0x898>
   1751c:	ldr	r3, [r1, r3]
   17520:	sub	r3, r2, r3
   17524:	ldrh	r1, [r3]
   17528:	cmp	r1, #11
   1752c:	bls	175e8 <test_sort_find@@Base+0x8ac>
   17530:	ldrh	r3, [r3, #10]
   17534:	cmp	r3, #0
   17538:	beq	175e8 <test_sort_find@@Base+0x8ac>
   1753c:	add	r1, r2, r3
   17540:	ldr	r3, [r2, r3]
   17544:	add	r3, r3, #4
   17548:	adds	r1, r1, r3
   1754c:	ldreq	r6, [sp, #8]
   17550:	ldrne	r6, [r1, #-4]
   17554:	cmp	r0, #0
   17558:	beq	175fc <test_sort_find@@Base+0x8c0>
   1755c:	ldr	r7, [r0, #-4]
   17560:	cmp	r6, r7
   17564:	movcc	r2, r6
   17568:	movcs	r2, r7
   1756c:	bl	12a74 <strncmp@plt>
   17570:	cmp	r0, #0
   17574:	bne	17604 <test_sort_find@@Base+0x8c8>
   17578:	cmp	r7, r6
   1757c:	movcs	r5, r4
   17580:	b	176d8 <test_sort_find@@Base+0x99c>
   17584:	ldr	r3, [pc, #2124]	; 17dd8 <test_sort_find@@Base+0x109c>
   17588:	ldr	r2, [pc, #2096]	; 17dc0 <test_sort_find@@Base+0x1084>
   1758c:	ldr	r1, [pc, #2120]	; 17ddc <test_sort_find@@Base+0x10a0>
   17590:	ldr	r0, [pc, #2092]	; 17dc4 <test_sort_find@@Base+0x1088>
   17594:	bl	12a8c <__assert_fail@plt>
   17598:	ldr	r3, [pc, #2092]	; 17dcc <test_sort_find@@Base+0x1090>
   1759c:	ldr	r2, [pc, #2092]	; 17dd0 <test_sort_find@@Base+0x1094>
   175a0:	ldr	r1, [pc, #2100]	; 17ddc <test_sort_find@@Base+0x10a0>
   175a4:	ldr	r0, [pc, #2076]	; 17dc8 <test_sort_find@@Base+0x108c>
   175a8:	bl	12a8c <__assert_fail@plt>
   175ac:	ldr	r3, [pc, #2072]	; 17dcc <test_sort_find@@Base+0x1090>
   175b0:	ldr	r2, [pc, #2072]	; 17dd0 <test_sort_find@@Base+0x1094>
   175b4:	ldr	r1, [pc, #2080]	; 17ddc <test_sort_find@@Base+0x10a0>
   175b8:	ldr	r0, [pc, #2068]	; 17dd4 <test_sort_find@@Base+0x1098>
   175bc:	bl	12a8c <__assert_fail@plt>
   175c0:	ldr	r3, [pc, #2064]	; 17dd8 <test_sort_find@@Base+0x109c>
   175c4:	ldr	r2, [pc, #2036]	; 17dc0 <test_sort_find@@Base+0x1084>
   175c8:	ldr	r1, [pc, #2060]	; 17ddc <test_sort_find@@Base+0x10a0>
   175cc:	ldr	r0, [pc, #2032]	; 17dc4 <test_sort_find@@Base+0x1088>
   175d0:	bl	12a8c <__assert_fail@plt>
   175d4:	ldr	r3, [pc, #2032]	; 17dcc <test_sort_find@@Base+0x1090>
   175d8:	ldr	r2, [pc, #2032]	; 17dd0 <test_sort_find@@Base+0x1094>
   175dc:	ldr	r1, [pc, #2040]	; 17ddc <test_sort_find@@Base+0x10a0>
   175e0:	ldr	r0, [pc, #2016]	; 17dc8 <test_sort_find@@Base+0x108c>
   175e4:	bl	12a8c <__assert_fail@plt>
   175e8:	ldr	r3, [pc, #2012]	; 17dcc <test_sort_find@@Base+0x1090>
   175ec:	ldr	r2, [pc, #2012]	; 17dd0 <test_sort_find@@Base+0x1094>
   175f0:	ldr	r1, [pc, #2020]	; 17ddc <test_sort_find@@Base+0x10a0>
   175f4:	ldr	r0, [pc, #2008]	; 17dd4 <test_sort_find@@Base+0x1098>
   175f8:	bl	12a8c <__assert_fail@plt>
   175fc:	ldr	r7, [sp, #8]
   17600:	b	17578 <test_sort_find@@Base+0x83c>
   17604:	cmp	r0, #0
   17608:	movge	r5, r4
   1760c:	b	176d8 <test_sort_find@@Base+0x99c>
   17610:	ldr	r3, [pc, #1984]	; 17dd8 <test_sort_find@@Base+0x109c>
   17614:	ldr	r2, [pc, #1956]	; 17dc0 <test_sort_find@@Base+0x1084>
   17618:	ldr	r1, [pc, #1980]	; 17ddc <test_sort_find@@Base+0x10a0>
   1761c:	ldr	r0, [pc, #1952]	; 17dc4 <test_sort_find@@Base+0x1088>
   17620:	bl	12a8c <__assert_fail@plt>
   17624:	ldr	r3, [pc, #1952]	; 17dcc <test_sort_find@@Base+0x1090>
   17628:	ldr	r2, [pc, #1952]	; 17dd0 <test_sort_find@@Base+0x1094>
   1762c:	ldr	r1, [pc, #1960]	; 17ddc <test_sort_find@@Base+0x10a0>
   17630:	ldr	r0, [pc, #1936]	; 17dc8 <test_sort_find@@Base+0x108c>
   17634:	bl	12a8c <__assert_fail@plt>
   17638:	ldr	r3, [pc, #1932]	; 17dcc <test_sort_find@@Base+0x1090>
   1763c:	ldr	r2, [pc, #1932]	; 17dd0 <test_sort_find@@Base+0x1094>
   17640:	ldr	r1, [pc, #1940]	; 17ddc <test_sort_find@@Base+0x10a0>
   17644:	ldr	r0, [pc, #1928]	; 17dd4 <test_sort_find@@Base+0x1098>
   17648:	bl	12a8c <__assert_fail@plt>
   1764c:	ldr	r3, [pc, #1924]	; 17dd8 <test_sort_find@@Base+0x109c>
   17650:	ldr	r2, [pc, #1896]	; 17dc0 <test_sort_find@@Base+0x1084>
   17654:	ldr	r1, [pc, #1920]	; 17ddc <test_sort_find@@Base+0x10a0>
   17658:	ldr	r0, [pc, #1892]	; 17dc4 <test_sort_find@@Base+0x1088>
   1765c:	bl	12a8c <__assert_fail@plt>
   17660:	ldr	r3, [pc, #1892]	; 17dcc <test_sort_find@@Base+0x1090>
   17664:	ldr	r2, [pc, #1892]	; 17dd0 <test_sort_find@@Base+0x1094>
   17668:	ldr	r1, [pc, #1900]	; 17ddc <test_sort_find@@Base+0x10a0>
   1766c:	ldr	r0, [pc, #1876]	; 17dc8 <test_sort_find@@Base+0x108c>
   17670:	bl	12a8c <__assert_fail@plt>
   17674:	ldr	r3, [pc, #1872]	; 17dcc <test_sort_find@@Base+0x1090>
   17678:	ldr	r2, [pc, #1872]	; 17dd0 <test_sort_find@@Base+0x1094>
   1767c:	ldr	r1, [pc, #1880]	; 17ddc <test_sort_find@@Base+0x10a0>
   17680:	ldr	r0, [pc, #1868]	; 17dd4 <test_sort_find@@Base+0x1098>
   17684:	bl	12a8c <__assert_fail@plt>
   17688:	ldr	r7, [sp, #8]
   1768c:	b	177a4 <test_sort_find@@Base+0xa68>
   17690:	cmp	r0, #0
   17694:	bge	177ac <test_sort_find@@Base+0xa70>
   17698:	sub	sl, sl, r5
   1769c:	lsl	sl, sl, #2
   176a0:	sub	r4, r4, sl
   176a4:	str	r4, [fp, r9]
   176a8:	add	sl, sl, r6
   176ac:	ldr	r3, [sp, #4]
   176b0:	str	sl, [fp, r3]
   176b4:	lsl	r4, r5, #1
   176b8:	mov	sl, r5
   176bc:	ldr	r3, [sp]
   176c0:	cmp	r3, r4
   176c4:	bcc	177ac <test_sort_find@@Base+0xa70>
   176c8:	ldr	r3, [sp]
   176cc:	cmp	r3, r4
   176d0:	movls	r5, r4
   176d4:	bhi	174ac <test_sort_find@@Base+0x770>
   176d8:	lsl	r9, sl, #2
   176dc:	add	r3, fp, r9
   176e0:	ldr	r1, [fp, #-4]
   176e4:	cmp	sl, r1
   176e8:	bcs	17610 <test_sort_find@@Base+0x8d4>
   176ec:	ldr	r6, [fp, sl, lsl #2]
   176f0:	adds	r2, r3, r6
   176f4:	beq	17624 <test_sort_find@@Base+0x8e8>
   176f8:	ldr	r3, [r3, r6]
   176fc:	sub	r3, r2, r3
   17700:	ldrh	r0, [r3]
   17704:	cmp	r0, #11
   17708:	bls	17638 <test_sort_find@@Base+0x8fc>
   1770c:	ldrh	r3, [r3, #10]
   17710:	cmp	r3, #0
   17714:	beq	17638 <test_sort_find@@Base+0x8fc>
   17718:	add	ip, r2, r3
   1771c:	ldr	r0, [r2, r3]
   17720:	add	r0, r0, #4
   17724:	add	r0, ip, r0
   17728:	lsl	r3, r5, #2
   1772c:	str	r3, [sp, #4]
   17730:	add	r3, fp, r3
   17734:	cmp	r5, r1
   17738:	bcs	1764c <test_sort_find@@Base+0x910>
   1773c:	ldr	r4, [fp, r5, lsl #2]
   17740:	adds	r2, r3, r4
   17744:	beq	17660 <test_sort_find@@Base+0x924>
   17748:	ldr	r3, [r3, r4]
   1774c:	sub	r3, r2, r3
   17750:	ldrh	r1, [r3]
   17754:	cmp	r1, #11
   17758:	bls	17674 <test_sort_find@@Base+0x938>
   1775c:	ldrh	r3, [r3, #10]
   17760:	cmp	r3, #0
   17764:	beq	17674 <test_sort_find@@Base+0x938>
   17768:	add	r1, r2, r3
   1776c:	ldr	r3, [r2, r3]
   17770:	add	r3, r3, #4
   17774:	adds	r1, r1, r3
   17778:	ldreq	r8, [sp, #8]
   1777c:	ldrne	r8, [r1, #-4]
   17780:	cmp	r0, #0
   17784:	beq	17688 <test_sort_find@@Base+0x94c>
   17788:	ldr	r7, [r0, #-4]
   1778c:	cmp	r8, r7
   17790:	movcc	r2, r8
   17794:	movcs	r2, r7
   17798:	bl	12a74 <strncmp@plt>
   1779c:	cmp	r0, #0
   177a0:	bne	17690 <test_sort_find@@Base+0x954>
   177a4:	cmp	r8, r7
   177a8:	bhi	17698 <test_sort_find@@Base+0x95c>
   177ac:	ldr	r3, [sp, #12]
   177b0:	add	r3, r3, #4
   177b4:	str	r3, [sp, #12]
   177b8:	ldr	r3, [sp]
   177bc:	cmp	r3, #0
   177c0:	beq	17804 <test_sort_find@@Base+0xac8>
   177c4:	ldr	r3, [fp]
   177c8:	ldr	r0, [sp, #12]
   177cc:	add	r3, r0, r3
   177d0:	ldr	r1, [sp, #16]
   177d4:	ldr	r2, [r1, #-4]
   177d8:	sub	r2, r2, r0
   177dc:	str	r2, [fp]
   177e0:	mov	r2, r1
   177e4:	str	r3, [r2, #-4]!
   177e8:	str	r2, [sp, #16]
   177ec:	ldr	r3, [sp]
   177f0:	sub	r3, r3, #1
   177f4:	str	r3, [sp]
   177f8:	ldr	r4, [sp, #8]
   177fc:	mov	sl, r4
   17800:	b	176c8 <test_sort_find@@Base+0x98c>
   17804:	ldr	r3, [pc, #1336]	; 17d44 <test_sort_find@@Base+0x1008>
   17808:	ldr	r3, [r3]
   1780c:	ldr	r2, [sp, #36]	; 0x24
   17810:	ldr	r1, [sp, #20]
   17814:	ldr	r0, [pc, #1368]	; 17d74 <test_sort_find@@Base+0x1038>
   17818:	bl	134b0 <_start@@Base+0xa18>
   1781c:	ldr	r3, [fp, #-4]
   17820:	cmp	r3, #5
   17824:	bne	17930 <test_sort_find@@Base+0xbf4>
   17828:	ldr	r3, [sp, #24]
   1782c:	ldr	r2, [sp, #28]
   17830:	ldr	r0, [r3, r2]
   17834:	add	r0, fp, r0
   17838:	bl	12f18 <_start@@Base+0x480>
   1783c:	ldr	r1, [pc, #1276]	; 17d40 <test_sort_find@@Base+0x1004>
   17840:	bl	12990 <strcmp@plt>
   17844:	cmp	r0, #0
   17848:	bne	17954 <test_sort_find@@Base+0xc18>
   1784c:	ldr	r4, [fp, #4]
   17850:	add	r4, r4, #4
   17854:	add	r4, fp, r4
   17858:	mov	r0, r4
   1785c:	bl	12f18 <_start@@Base+0x480>
   17860:	ldr	r1, [pc, #1236]	; 17d3c <test_sort_find@@Base+0x1000>
   17864:	bl	12990 <strcmp@plt>
   17868:	cmp	r0, #0
   1786c:	bne	17968 <test_sort_find@@Base+0xc2c>
   17870:	ldr	r5, [fp, #8]
   17874:	add	r5, r5, #8
   17878:	add	r5, fp, r5
   1787c:	mov	r0, r5
   17880:	bl	12f18 <_start@@Base+0x480>
   17884:	ldr	r1, [pc, #1200]	; 17d3c <test_sort_find@@Base+0x1000>
   17888:	bl	12990 <strcmp@plt>
   1788c:	cmp	r0, #0
   17890:	bne	1797c <test_sort_find@@Base+0xc40>
   17894:	ldr	r0, [fp, #12]
   17898:	add	r0, r0, #12
   1789c:	add	r0, fp, r0
   178a0:	bl	12f18 <_start@@Base+0x480>
   178a4:	ldr	r1, [pc, #1164]	; 17d38 <test_sort_find@@Base+0xffc>
   178a8:	bl	12990 <strcmp@plt>
   178ac:	cmp	r0, #0
   178b0:	bne	17990 <test_sort_find@@Base+0xc54>
   178b4:	ldr	r0, [fp, #16]
   178b8:	add	r0, r0, #16
   178bc:	add	r0, fp, r0
   178c0:	bl	12f18 <_start@@Base+0x480>
   178c4:	ldr	r1, [pc, #1124]	; 17d30 <test_sort_find@@Base+0xff4>
   178c8:	bl	12990 <strcmp@plt>
   178cc:	cmp	r0, #0
   178d0:	bne	179a4 <test_sort_find@@Base+0xc68>
   178d4:	cmp	r4, r5
   178d8:	beq	179b8 <test_sort_find@@Base+0xc7c>
   178dc:	ldr	r1, [pc, #1108]	; 17d38 <test_sort_find@@Base+0xffc>
   178e0:	mov	r0, fp
   178e4:	bl	14368 <_start@@Base+0x18d0>
   178e8:	cmp	r0, #3
   178ec:	bne	179cc <test_sort_find@@Base+0xc90>
   178f0:	mov	r6, #4
   178f4:	mov	r5, #0
   178f8:	ldr	r7, [pc, #1144]	; 17d78 <test_sort_find@@Base+0x103c>
   178fc:	sub	r4, r6, r5
   17900:	add	r4, r5, r4, lsr #1
   17904:	add	r3, fp, r4, lsl #2
   17908:	cmp	r4, #4
   1790c:	bhi	179e0 <test_sort_find@@Base+0xca4>
   17910:	ldr	r2, [fp, r4, lsl #2]
   17914:	adds	r3, r3, r2
   17918:	bne	17a40 <test_sort_find@@Base+0xd04>
   1791c:	ldr	r3, [pc, #1192]	; 17dcc <test_sort_find@@Base+0x1090>
   17920:	ldr	r2, [pc, #1192]	; 17dd0 <test_sort_find@@Base+0x1094>
   17924:	ldr	r1, [pc, #1200]	; 17ddc <test_sort_find@@Base+0x10a0>
   17928:	ldr	r0, [pc, #1176]	; 17dc8 <test_sort_find@@Base+0x108c>
   1792c:	bl	12a8c <__assert_fail@plt>
   17930:	ldr	r0, [pc, #1092]	; 17d7c <test_sort_find@@Base+0x1040>
   17934:	bl	129f0 <puts@plt>
   17938:	mvn	r3, #0
   1793c:	str	r3, [sp, #24]
   17940:	ldr	r0, [sp, #20]
   17944:	bl	21a64 <flatcc_builder_aligned_free@@Base>
   17948:	ldr	r0, [sp, #24]
   1794c:	add	sp, sp, #44	; 0x2c
   17950:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17954:	ldr	r0, [pc, #1060]	; 17d80 <test_sort_find@@Base+0x1044>
   17958:	bl	129f0 <puts@plt>
   1795c:	mvn	r3, #0
   17960:	str	r3, [sp, #24]
   17964:	b	17940 <test_sort_find@@Base+0xc04>
   17968:	ldr	r0, [pc, #1044]	; 17d84 <test_sort_find@@Base+0x1048>
   1796c:	bl	129f0 <puts@plt>
   17970:	mvn	r3, #0
   17974:	str	r3, [sp, #24]
   17978:	b	17940 <test_sort_find@@Base+0xc04>
   1797c:	ldr	r0, [pc, #1028]	; 17d88 <test_sort_find@@Base+0x104c>
   17980:	bl	129f0 <puts@plt>
   17984:	mvn	r3, #0
   17988:	str	r3, [sp, #24]
   1798c:	b	17940 <test_sort_find@@Base+0xc04>
   17990:	ldr	r0, [pc, #1012]	; 17d8c <test_sort_find@@Base+0x1050>
   17994:	bl	129f0 <puts@plt>
   17998:	mvn	r3, #0
   1799c:	str	r3, [sp, #24]
   179a0:	b	17940 <test_sort_find@@Base+0xc04>
   179a4:	ldr	r0, [pc, #996]	; 17d90 <test_sort_find@@Base+0x1054>
   179a8:	bl	129f0 <puts@plt>
   179ac:	mvn	r3, #0
   179b0:	str	r3, [sp, #24]
   179b4:	b	17940 <test_sort_find@@Base+0xc04>
   179b8:	ldr	r0, [pc, #980]	; 17d94 <test_sort_find@@Base+0x1058>
   179bc:	bl	129f0 <puts@plt>
   179c0:	mvn	r3, #0
   179c4:	str	r3, [sp, #24]
   179c8:	b	17940 <test_sort_find@@Base+0xc04>
   179cc:	ldr	r0, [pc, #964]	; 17d98 <test_sort_find@@Base+0x105c>
   179d0:	bl	129f0 <puts@plt>
   179d4:	mvn	r3, #0
   179d8:	str	r3, [sp, #24]
   179dc:	b	17940 <test_sort_find@@Base+0xc04>
   179e0:	ldr	r3, [pc, #1008]	; 17dd8 <test_sort_find@@Base+0x109c>
   179e4:	ldr	r2, [pc, #980]	; 17dc0 <test_sort_find@@Base+0x1084>
   179e8:	ldr	r1, [pc, #1004]	; 17ddc <test_sort_find@@Base+0x10a0>
   179ec:	ldr	r0, [pc, #976]	; 17dc4 <test_sort_find@@Base+0x1088>
   179f0:	bl	12a8c <__assert_fail@plt>
   179f4:	ldr	r3, [pc, #976]	; 17dcc <test_sort_find@@Base+0x1090>
   179f8:	ldr	r2, [pc, #976]	; 17dd0 <test_sort_find@@Base+0x1094>
   179fc:	ldr	r1, [pc, #984]	; 17ddc <test_sort_find@@Base+0x10a0>
   17a00:	ldr	r0, [pc, #972]	; 17dd4 <test_sort_find@@Base+0x1098>
   17a04:	bl	12a8c <__assert_fail@plt>
   17a08:	cmp	r0, #0
   17a0c:	blt	17a9c <test_sort_find@@Base+0xd60>
   17a10:	cmp	r5, r4
   17a14:	bcs	17aac <test_sort_find@@Base+0xd70>
   17a18:	sub	r2, r4, r5
   17a1c:	add	r2, r5, r2, lsr #1
   17a20:	add	r3, fp, r2, lsl #2
   17a24:	cmp	r2, #4
   17a28:	bhi	179e0 <test_sort_find@@Base+0xca4>
   17a2c:	ldr	r1, [fp, r2, lsl #2]
   17a30:	mov	r6, r4
   17a34:	adds	r3, r3, r1
   17a38:	beq	1791c <test_sort_find@@Base+0xbe0>
   17a3c:	mov	r4, r2
   17a40:	ldr	r2, [r3]
   17a44:	sub	r2, r3, r2
   17a48:	ldrh	r1, [r2]
   17a4c:	cmp	r1, #11
   17a50:	bls	179f4 <test_sort_find@@Base+0xcb8>
   17a54:	ldrh	r2, [r2, #10]
   17a58:	cmp	r2, #0
   17a5c:	beq	179f4 <test_sort_find@@Base+0xcb8>
   17a60:	add	r0, r3, r2
   17a64:	ldr	r3, [r3, r2]
   17a68:	add	r3, r3, #4
   17a6c:	adds	r0, r0, r3
   17a70:	beq	17a9c <test_sort_find@@Base+0xd60>
   17a74:	ldr	r8, [r0, #-4]
   17a78:	cmp	r8, #5
   17a7c:	movcc	r2, r8
   17a80:	movcs	r2, #5
   17a84:	mov	r1, r7
   17a88:	bl	12a74 <strncmp@plt>
   17a8c:	cmp	r0, #0
   17a90:	bne	17a08 <test_sort_find@@Base+0xccc>
   17a94:	cmp	r8, #4
   17a98:	bhi	17a10 <test_sort_find@@Base+0xcd4>
   17a9c:	add	r5, r4, #1
   17aa0:	cmp	r6, r5
   17aa4:	bhi	178fc <test_sort_find@@Base+0xbc0>
   17aa8:	mov	r4, r6
   17aac:	cmp	r4, r5
   17ab0:	beq	17ac8 <test_sort_find@@Base+0xd8c>
   17ab4:	ldr	r0, [pc, #736]	; 17d9c <test_sort_find@@Base+0x1060>
   17ab8:	bl	129f0 <puts@plt>
   17abc:	mvn	r3, #0
   17ac0:	str	r3, [sp, #24]
   17ac4:	b	17940 <test_sort_find@@Base+0xc04>
   17ac8:	mov	r1, r4
   17acc:	mov	r0, fp
   17ad0:	bl	12e0c <_start@@Base+0x374>
   17ad4:	bl	12f18 <_start@@Base+0x480>
   17ad8:	mov	r2, #5
   17adc:	ldr	r1, [pc, #660]	; 17d78 <test_sort_find@@Base+0x103c>
   17ae0:	bl	13e98 <_start@@Base+0x1400>
   17ae4:	cmp	r0, #0
   17ae8:	bne	17ab4 <test_sort_find@@Base+0xd78>
   17aec:	cmp	r4, #3
   17af0:	bne	17ab4 <test_sort_find@@Base+0xd78>
   17af4:	mov	r6, #4
   17af8:	mov	r5, #0
   17afc:	ldr	r7, [pc, #668]	; 17da0 <test_sort_find@@Base+0x1064>
   17b00:	b	17bcc <test_sort_find@@Base+0xe90>
   17b04:	ldr	r3, [pc, #716]	; 17dd8 <test_sort_find@@Base+0x109c>
   17b08:	ldr	r2, [pc, #688]	; 17dc0 <test_sort_find@@Base+0x1084>
   17b0c:	ldr	r1, [pc, #712]	; 17ddc <test_sort_find@@Base+0x10a0>
   17b10:	ldr	r0, [pc, #684]	; 17dc4 <test_sort_find@@Base+0x1088>
   17b14:	bl	12a8c <__assert_fail@plt>
   17b18:	ldr	r3, [pc, #684]	; 17dcc <test_sort_find@@Base+0x1090>
   17b1c:	ldr	r2, [pc, #684]	; 17dd0 <test_sort_find@@Base+0x1094>
   17b20:	ldr	r1, [pc, #692]	; 17ddc <test_sort_find@@Base+0x10a0>
   17b24:	ldr	r0, [pc, #680]	; 17dd4 <test_sort_find@@Base+0x1098>
   17b28:	bl	12a8c <__assert_fail@plt>
   17b2c:	cmp	r0, #0
   17b30:	blt	17bc0 <test_sort_find@@Base+0xe84>
   17b34:	cmp	r5, r4
   17b38:	bcs	17c04 <test_sort_find@@Base+0xec8>
   17b3c:	sub	r2, r4, r5
   17b40:	add	r2, r5, r2, lsr #1
   17b44:	add	r3, fp, r2, lsl #2
   17b48:	cmp	r2, #4
   17b4c:	bhi	17b04 <test_sort_find@@Base+0xdc8>
   17b50:	ldr	r1, [fp, r2, lsl #2]
   17b54:	mov	r6, r4
   17b58:	adds	r3, r3, r1
   17b5c:	beq	17bec <test_sort_find@@Base+0xeb0>
   17b60:	mov	r4, r2
   17b64:	ldr	r2, [r3]
   17b68:	sub	r2, r3, r2
   17b6c:	ldrh	r1, [r2]
   17b70:	cmp	r1, #11
   17b74:	bls	17b18 <test_sort_find@@Base+0xddc>
   17b78:	ldrh	r2, [r2, #10]
   17b7c:	cmp	r2, #0
   17b80:	beq	17b18 <test_sort_find@@Base+0xddc>
   17b84:	add	r0, r3, r2
   17b88:	ldr	r3, [r3, r2]
   17b8c:	add	r3, r3, #4
   17b90:	adds	r0, r0, r3
   17b94:	beq	17bc0 <test_sort_find@@Base+0xe84>
   17b98:	ldr	r8, [r0, #-4]
   17b9c:	cmp	r8, #5
   17ba0:	movcc	r2, r8
   17ba4:	movcs	r2, #5
   17ba8:	mov	r1, r7
   17bac:	bl	12a74 <strncmp@plt>
   17bb0:	cmp	r0, #0
   17bb4:	bne	17b2c <test_sort_find@@Base+0xdf0>
   17bb8:	cmp	r8, #4
   17bbc:	bhi	17b34 <test_sort_find@@Base+0xdf8>
   17bc0:	add	r5, r4, #1
   17bc4:	cmp	r6, r5
   17bc8:	bls	17c00 <test_sort_find@@Base+0xec4>
   17bcc:	sub	r4, r6, r5
   17bd0:	add	r4, r5, r4, lsr #1
   17bd4:	add	r3, fp, r4, lsl #2
   17bd8:	cmp	r4, #4
   17bdc:	bhi	17b04 <test_sort_find@@Base+0xdc8>
   17be0:	ldr	r2, [fp, r4, lsl #2]
   17be4:	adds	r3, r3, r2
   17be8:	bne	17b64 <test_sort_find@@Base+0xe28>
   17bec:	ldr	r3, [pc, #472]	; 17dcc <test_sort_find@@Base+0x1090>
   17bf0:	ldr	r2, [pc, #472]	; 17dd0 <test_sort_find@@Base+0x1094>
   17bf4:	ldr	r1, [pc, #480]	; 17ddc <test_sort_find@@Base+0x10a0>
   17bf8:	ldr	r0, [pc, #456]	; 17dc8 <test_sort_find@@Base+0x108c>
   17bfc:	bl	12a8c <__assert_fail@plt>
   17c00:	mov	r4, r6
   17c04:	cmp	r4, r5
   17c08:	beq	17c20 <test_sort_find@@Base+0xee4>
   17c0c:	ldr	r0, [pc, #400]	; 17da4 <test_sort_find@@Base+0x1068>
   17c10:	bl	129f0 <puts@plt>
   17c14:	mvn	r3, #0
   17c18:	str	r3, [sp, #24]
   17c1c:	b	17940 <test_sort_find@@Base+0xc04>
   17c20:	mov	r1, r4
   17c24:	mov	r0, fp
   17c28:	bl	12e0c <_start@@Base+0x374>
   17c2c:	bl	12f18 <_start@@Base+0x480>
   17c30:	mov	r2, #5
   17c34:	ldr	r1, [pc, #356]	; 17da0 <test_sort_find@@Base+0x1064>
   17c38:	bl	13e98 <_start@@Base+0x1400>
   17c3c:	subs	r3, r0, #0
   17c40:	str	r3, [sp, #24]
   17c44:	bne	17c0c <test_sort_find@@Base+0xed0>
   17c48:	cmp	r4, #3
   17c4c:	bne	17c0c <test_sort_find@@Base+0xed0>
   17c50:	ldr	r1, [pc, #336]	; 17da8 <test_sort_find@@Base+0x106c>
   17c54:	mov	r0, fp
   17c58:	bl	14368 <_start@@Base+0x18d0>
   17c5c:	cmn	r0, #1
   17c60:	bne	17ce0 <test_sort_find@@Base+0xfa4>
   17c64:	ldr	r1, [pc, #212]	; 17d40 <test_sort_find@@Base+0x1004>
   17c68:	mov	r0, fp
   17c6c:	bl	14368 <_start@@Base+0x18d0>
   17c70:	subs	r3, r0, #0
   17c74:	str	r3, [sp, #8]
   17c78:	bne	17cf4 <test_sort_find@@Base+0xfb8>
   17c7c:	ldr	r1, [pc, #184]	; 17d3c <test_sort_find@@Base+0x1000>
   17c80:	mov	r0, fp
   17c84:	bl	14368 <_start@@Base+0x18d0>
   17c88:	mov	r4, r0
   17c8c:	cmp	r0, #1
   17c90:	bne	17d08 <test_sort_find@@Base+0xfcc>
   17c94:	ldr	r1, [pc, #148]	; 17d30 <test_sort_find@@Base+0xff4>
   17c98:	mov	r0, fp
   17c9c:	bl	14368 <_start@@Base+0x18d0>
   17ca0:	mov	r3, r0
   17ca4:	str	r0, [sp, #4]
   17ca8:	cmp	r0, #4
   17cac:	moveq	r3, #4
   17cb0:	streq	r3, [sp, #12]
   17cb4:	moveq	r3, #2
   17cb8:	streq	r3, [sp, #16]
   17cbc:	beq	180f8 <test_sort_find@@Base+0x13bc>
   17cc0:	ldr	r0, [pc, #228]	; 17dac <test_sort_find@@Base+0x1070>
   17cc4:	bl	129f0 <puts@plt>
   17cc8:	ldr	r1, [sp, #4]
   17ccc:	ldr	r0, [pc, #220]	; 17db0 <test_sort_find@@Base+0x1074>
   17cd0:	bl	1299c <printf@plt>
   17cd4:	mvn	r3, #0
   17cd8:	str	r3, [sp, #24]
   17cdc:	b	17940 <test_sort_find@@Base+0xc04>
   17ce0:	ldr	r0, [pc, #204]	; 17db4 <test_sort_find@@Base+0x1078>
   17ce4:	bl	129f0 <puts@plt>
   17ce8:	mvn	r3, #0
   17cec:	str	r3, [sp, #24]
   17cf0:	b	17940 <test_sort_find@@Base+0xc04>
   17cf4:	ldr	r0, [pc, #188]	; 17db8 <test_sort_find@@Base+0x107c>
   17cf8:	bl	129f0 <puts@plt>
   17cfc:	mvn	r3, #0
   17d00:	str	r3, [sp, #24]
   17d04:	b	17940 <test_sort_find@@Base+0xc04>
   17d08:	ldr	r0, [pc, #172]	; 17dbc <test_sort_find@@Base+0x1080>
   17d0c:	bl	129f0 <puts@plt>
   17d10:	mov	r1, r4
   17d14:	ldr	r0, [pc, #148]	; 17db0 <test_sort_find@@Base+0x1074>
   17d18:	bl	1299c <printf@plt>
   17d1c:	mvn	r3, #0
   17d20:	str	r3, [sp, #24]
   17d24:	b	17940 <test_sort_find@@Base+0xc04>
   17d28:	andeq	r4, r2, r0, asr r0
   17d2c:	ldrdeq	r4, [r2], -ip
   17d30:	andeq	r4, r2, r4, asr #18
   17d34:	andeq	r3, r2, r4, ror #16
   17d38:	andeq	r4, r2, r8, lsr #19
   17d3c:	ldrdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   17d40:	muleq	r2, r0, r0
   17d44:	andeq	r8, r3, r0, ror r0
   17d48:	muleq	r2, r8, r0
   17d4c:	movtpl	r4, #61261	; 0xef4d
   17d50:	andeq	r3, r2, r8, ror #16
   17d54:	andeq	r4, r2, r8, asr r0
   17d58:	andeq	r4, r2, r8, ror #3
   17d5c:	andeq	r3, r2, r4, ror #17
   17d60:	andeq	r0, r0, r7, asr #5
   17d64:	andeq	r3, r2, r4, ror r9
   17d68:	andeq	r0, r0, fp, ror r4
   17d6c:	ldrdeq	r4, [r2], -ip
   17d70:	strheq	r5, [r2], -r0
   17d74:	strheq	r5, [r2], -ip
   17d78:	andeq	r5, r2, r0, lsl r2
   17d7c:	ldrdeq	r5, [r2], -r4
   17d80:	strdeq	r5, [r2], -ip
   17d84:	andeq	r5, r2, ip, lsl r1
   17d88:	andeq	r5, r2, ip, lsr r1
   17d8c:	andeq	r5, r2, ip, asr r1
   17d90:	andeq	r5, r2, ip, ror r1
   17d94:	muleq	r2, ip, r1
   17d98:	andeq	r5, r2, r4, ror #3
   17d9c:	andeq	r5, r2, r8, lsl r2
   17da0:	andeq	r5, r2, ip, asr #4
   17da4:	andeq	r5, r2, r4, asr r2
   17da8:	andeq	r5, r2, r8, ror r2
   17dac:			; <UNDEFINED> instruction: 0x000252b0
   17db0:	andeq	r5, r2, r8, lsr #5
   17db4:	andeq	r5, r2, r0, lsl #5
   17db8:	muleq	r2, r8, r2
   17dbc:	andeq	r5, r2, r0, asr #7
   17dc0:			; <UNDEFINED> instruction: 0x000002b5
   17dc4:	andeq	r3, r2, r0, ror lr
   17dc8:	andeq	r3, r2, r0, ror #27
   17dcc:	andeq	r3, r2, r8, lsr #14
   17dd0:			; <UNDEFINED> instruction: 0x000002bb
   17dd4:	andeq	r3, r2, r8, lsr #29
   17dd8:	andeq	r3, r2, r8, asr #13
   17ddc:	andeq	r3, r2, ip, ror sp
   17de0:	lsl	r3, r4, #2
   17de4:	add	r0, fp, r3
   17de8:	ldr	ip, [fp, #-4]
   17dec:	cmp	r4, ip
   17df0:	bcs	17eb8 <test_sort_find@@Base+0x117c>
   17df4:	ldr	r2, [fp, r4, lsl #2]
   17df8:	adds	r1, r0, r2
   17dfc:	beq	17ecc <test_sort_find@@Base+0x1190>
   17e00:	ldr	r2, [r0, r2]
   17e04:	sub	r2, r1, r2
   17e08:	ldrh	r0, [r2]
   17e0c:	cmp	r0, #11
   17e10:	bls	17ee0 <test_sort_find@@Base+0x11a4>
   17e14:	ldrh	r2, [r2, #10]
   17e18:	cmp	r2, #0
   17e1c:	beq	17ee0 <test_sort_find@@Base+0x11a4>
   17e20:	add	lr, r1, r2
   17e24:	ldr	r0, [r1, r2]
   17e28:	add	r0, r0, #4
   17e2c:	add	r0, lr, r0
   17e30:	add	r5, r4, #1
   17e34:	add	r3, r3, #4
   17e38:	add	r1, fp, r3
   17e3c:	cmp	r5, ip
   17e40:	bcs	17ef4 <test_sort_find@@Base+0x11b8>
   17e44:	ldr	r3, [fp, r3]
   17e48:	adds	r2, r1, r3
   17e4c:	beq	17f08 <test_sort_find@@Base+0x11cc>
   17e50:	ldr	r3, [r1, r3]
   17e54:	sub	r3, r2, r3
   17e58:	ldrh	r1, [r3]
   17e5c:	cmp	r1, #11
   17e60:	bls	17f1c <test_sort_find@@Base+0x11e0>
   17e64:	ldrh	r3, [r3, #10]
   17e68:	cmp	r3, #0
   17e6c:	beq	17f1c <test_sort_find@@Base+0x11e0>
   17e70:	add	r1, r2, r3
   17e74:	ldr	r3, [r2, r3]
   17e78:	add	r3, r3, #4
   17e7c:	adds	r1, r1, r3
   17e80:	ldreq	r6, [sp, #8]
   17e84:	ldrne	r6, [r1, #-4]
   17e88:	cmp	r0, #0
   17e8c:	beq	17f30 <test_sort_find@@Base+0x11f4>
   17e90:	ldr	r7, [r0, #-4]
   17e94:	cmp	r6, r7
   17e98:	movcc	r2, r6
   17e9c:	movcs	r2, r7
   17ea0:	bl	12a74 <strncmp@plt>
   17ea4:	cmp	r0, #0
   17ea8:	bne	17f38 <test_sort_find@@Base+0x11fc>
   17eac:	cmp	r7, r6
   17eb0:	movcs	r5, r4
   17eb4:	b	18004 <test_sort_find@@Base+0x12c8>
   17eb8:	ldr	r3, [pc, #-232]	; 17dd8 <test_sort_find@@Base+0x109c>
   17ebc:	ldr	r2, [pc, #-260]	; 17dc0 <test_sort_find@@Base+0x1084>
   17ec0:	ldr	r1, [pc, #-236]	; 17ddc <test_sort_find@@Base+0x10a0>
   17ec4:	ldr	r0, [pc, #-264]	; 17dc4 <test_sort_find@@Base+0x1088>
   17ec8:	bl	12a8c <__assert_fail@plt>
   17ecc:	ldr	r3, [pc, #-264]	; 17dcc <test_sort_find@@Base+0x1090>
   17ed0:	ldr	r2, [pc, #-264]	; 17dd0 <test_sort_find@@Base+0x1094>
   17ed4:	ldr	r1, [pc, #-256]	; 17ddc <test_sort_find@@Base+0x10a0>
   17ed8:	ldr	r0, [pc, #-280]	; 17dc8 <test_sort_find@@Base+0x108c>
   17edc:	bl	12a8c <__assert_fail@plt>
   17ee0:	ldr	r3, [pc, #-284]	; 17dcc <test_sort_find@@Base+0x1090>
   17ee4:	ldr	r2, [pc, #-284]	; 17dd0 <test_sort_find@@Base+0x1094>
   17ee8:	ldr	r1, [pc, #-276]	; 17ddc <test_sort_find@@Base+0x10a0>
   17eec:	ldr	r0, [pc, #-288]	; 17dd4 <test_sort_find@@Base+0x1098>
   17ef0:	bl	12a8c <__assert_fail@plt>
   17ef4:	ldr	r3, [pc, #-292]	; 17dd8 <test_sort_find@@Base+0x109c>
   17ef8:	ldr	r2, [pc, #-320]	; 17dc0 <test_sort_find@@Base+0x1084>
   17efc:	ldr	r1, [pc, #-296]	; 17ddc <test_sort_find@@Base+0x10a0>
   17f00:	ldr	r0, [pc, #-324]	; 17dc4 <test_sort_find@@Base+0x1088>
   17f04:	bl	12a8c <__assert_fail@plt>
   17f08:	ldr	r3, [pc, #-324]	; 17dcc <test_sort_find@@Base+0x1090>
   17f0c:	ldr	r2, [pc, #-324]	; 17dd0 <test_sort_find@@Base+0x1094>
   17f10:	ldr	r1, [pc, #-316]	; 17ddc <test_sort_find@@Base+0x10a0>
   17f14:	ldr	r0, [pc, #-340]	; 17dc8 <test_sort_find@@Base+0x108c>
   17f18:	bl	12a8c <__assert_fail@plt>
   17f1c:	ldr	r3, [pc, #-344]	; 17dcc <test_sort_find@@Base+0x1090>
   17f20:	ldr	r2, [pc, #-344]	; 17dd0 <test_sort_find@@Base+0x1094>
   17f24:	ldr	r1, [pc, #-336]	; 17ddc <test_sort_find@@Base+0x10a0>
   17f28:	ldr	r0, [pc, #-348]	; 17dd4 <test_sort_find@@Base+0x1098>
   17f2c:	bl	12a8c <__assert_fail@plt>
   17f30:	ldr	r7, [sp, #8]
   17f34:	b	17eac <test_sort_find@@Base+0x1170>
   17f38:	cmp	r0, #0
   17f3c:	movge	r5, r4
   17f40:	b	18004 <test_sort_find@@Base+0x12c8>
   17f44:	ldr	r3, [pc, #-372]	; 17dd8 <test_sort_find@@Base+0x109c>
   17f48:	ldr	r2, [pc, #-400]	; 17dc0 <test_sort_find@@Base+0x1084>
   17f4c:	ldr	r1, [pc, #-376]	; 17ddc <test_sort_find@@Base+0x10a0>
   17f50:	ldr	r0, [pc, #-404]	; 17dc4 <test_sort_find@@Base+0x1088>
   17f54:	bl	12a8c <__assert_fail@plt>
   17f58:	ldr	r3, [pc, #-404]	; 17dcc <test_sort_find@@Base+0x1090>
   17f5c:	ldr	r2, [pc, #-404]	; 17dd0 <test_sort_find@@Base+0x1094>
   17f60:	ldr	r1, [pc, #-396]	; 17ddc <test_sort_find@@Base+0x10a0>
   17f64:	ldr	r0, [pc, #-420]	; 17dc8 <test_sort_find@@Base+0x108c>
   17f68:	bl	12a8c <__assert_fail@plt>
   17f6c:	ldr	r3, [pc, #-424]	; 17dcc <test_sort_find@@Base+0x1090>
   17f70:	ldr	r2, [pc, #-424]	; 17dd0 <test_sort_find@@Base+0x1094>
   17f74:	ldr	r1, [pc, #-416]	; 17ddc <test_sort_find@@Base+0x10a0>
   17f78:	ldr	r0, [pc, #-428]	; 17dd4 <test_sort_find@@Base+0x1098>
   17f7c:	bl	12a8c <__assert_fail@plt>
   17f80:	ldr	r3, [pc, #-432]	; 17dd8 <test_sort_find@@Base+0x109c>
   17f84:	ldr	r2, [pc, #-460]	; 17dc0 <test_sort_find@@Base+0x1084>
   17f88:	ldr	r1, [pc, #-436]	; 17ddc <test_sort_find@@Base+0x10a0>
   17f8c:	ldr	r0, [pc, #-464]	; 17dc4 <test_sort_find@@Base+0x1088>
   17f90:	bl	12a8c <__assert_fail@plt>
   17f94:	ldr	r3, [pc, #-464]	; 17dcc <test_sort_find@@Base+0x1090>
   17f98:	ldr	r2, [pc, #-464]	; 17dd0 <test_sort_find@@Base+0x1094>
   17f9c:	ldr	r1, [pc, #-456]	; 17ddc <test_sort_find@@Base+0x10a0>
   17fa0:	ldr	r0, [pc, #-480]	; 17dc8 <test_sort_find@@Base+0x108c>
   17fa4:	bl	12a8c <__assert_fail@plt>
   17fa8:	ldr	r3, [pc, #-484]	; 17dcc <test_sort_find@@Base+0x1090>
   17fac:	ldr	r2, [pc, #-484]	; 17dd0 <test_sort_find@@Base+0x1094>
   17fb0:	ldr	r1, [pc, #-476]	; 17ddc <test_sort_find@@Base+0x10a0>
   17fb4:	ldr	r0, [pc, #-488]	; 17dd4 <test_sort_find@@Base+0x1098>
   17fb8:	bl	12a8c <__assert_fail@plt>
   17fbc:	ldr	r7, [sp, #8]
   17fc0:	b	180d0 <test_sort_find@@Base+0x1394>
   17fc4:	cmp	r0, #0
   17fc8:	bge	180d8 <test_sort_find@@Base+0x139c>
   17fcc:	sub	r9, r9, r5
   17fd0:	lsl	r9, r9, #2
   17fd4:	sub	r4, r4, r9
   17fd8:	ldr	r3, [sp]
   17fdc:	str	r4, [fp, r3]
   17fe0:	add	r9, r9, r6
   17fe4:	str	r9, [fp, sl]
   17fe8:	lsl	r4, r5, #1
   17fec:	mov	r9, r5
   17ff0:	cmp	r4, #4
   17ff4:	bhi	180d8 <test_sort_find@@Base+0x139c>
   17ff8:	cmp	r4, #3
   17ffc:	movhi	r5, r4
   18000:	bls	17de0 <test_sort_find@@Base+0x10a4>
   18004:	lsl	r3, r9, #2
   18008:	str	r3, [sp]
   1800c:	add	r3, fp, r3
   18010:	ldr	r1, [fp, #-4]
   18014:	cmp	r9, r1
   18018:	bcs	17f44 <test_sort_find@@Base+0x1208>
   1801c:	ldr	r6, [fp, r9, lsl #2]
   18020:	adds	r2, r3, r6
   18024:	beq	17f58 <test_sort_find@@Base+0x121c>
   18028:	ldr	r3, [r3, r6]
   1802c:	sub	r3, r2, r3
   18030:	ldrh	r0, [r3]
   18034:	cmp	r0, #11
   18038:	bls	17f6c <test_sort_find@@Base+0x1230>
   1803c:	ldrh	r3, [r3, #10]
   18040:	cmp	r3, #0
   18044:	beq	17f6c <test_sort_find@@Base+0x1230>
   18048:	add	ip, r2, r3
   1804c:	ldr	r0, [r2, r3]
   18050:	add	r0, r0, #4
   18054:	add	r0, ip, r0
   18058:	lsl	sl, r5, #2
   1805c:	add	r3, fp, sl
   18060:	cmp	r5, r1
   18064:	bcs	17f80 <test_sort_find@@Base+0x1244>
   18068:	ldr	r4, [fp, r5, lsl #2]
   1806c:	adds	r2, r3, r4
   18070:	beq	17f94 <test_sort_find@@Base+0x1258>
   18074:	ldr	r3, [r3, r4]
   18078:	sub	r3, r2, r3
   1807c:	ldrh	r1, [r3]
   18080:	cmp	r1, #11
   18084:	bls	17fa8 <test_sort_find@@Base+0x126c>
   18088:	ldrh	r3, [r3, #10]
   1808c:	cmp	r3, #0
   18090:	beq	17fa8 <test_sort_find@@Base+0x126c>
   18094:	add	r1, r2, r3
   18098:	ldr	r3, [r2, r3]
   1809c:	add	r3, r3, #4
   180a0:	adds	r1, r1, r3
   180a4:	ldreq	r8, [sp, #8]
   180a8:	ldrne	r8, [r1, #-4]
   180ac:	cmp	r0, #0
   180b0:	beq	17fbc <test_sort_find@@Base+0x1280>
   180b4:	ldr	r7, [r0, #-4]
   180b8:	cmp	r8, r7
   180bc:	movcc	r2, r8
   180c0:	movcs	r2, r7
   180c4:	bl	12a74 <strncmp@plt>
   180c8:	cmp	r0, #0
   180cc:	bne	17fc4 <test_sort_find@@Base+0x1288>
   180d0:	cmp	r8, r7
   180d4:	bhi	17fcc <test_sort_find@@Base+0x1290>
   180d8:	ldr	r3, [sp, #16]
   180dc:	sub	r3, r3, #1
   180e0:	str	r3, [sp, #16]
   180e4:	ldr	r2, [sp, #12]
   180e8:	sub	r2, r2, #2
   180ec:	str	r2, [sp, #12]
   180f0:	cmn	r3, #1
   180f4:	beq	18110 <test_sort_find@@Base+0x13d4>
   180f8:	ldr	r3, [sp, #12]
   180fc:	cmp	r3, #4
   18100:	bhi	180d8 <test_sort_find@@Base+0x139c>
   18104:	ldr	r9, [sp, #16]
   18108:	mov	r4, r3
   1810c:	b	17ff8 <test_sort_find@@Base+0x12bc>
   18110:	add	r3, fp, #20
   18114:	str	r3, [sp, #16]
   18118:	add	r3, fp, #4
   1811c:	str	r3, [sp, #28]
   18120:	mvn	r3, #15
   18124:	str	r3, [sp, #12]
   18128:	b	18448 <test_sort_find@@Base+0x170c>
   1812c:	lsl	r3, r4, #2
   18130:	add	r0, fp, r3
   18134:	ldr	ip, [fp, #-4]
   18138:	cmp	r4, ip
   1813c:	bcs	18204 <test_sort_find@@Base+0x14c8>
   18140:	ldr	r2, [fp, r4, lsl #2]
   18144:	adds	r1, r0, r2
   18148:	beq	18218 <test_sort_find@@Base+0x14dc>
   1814c:	ldr	r2, [r0, r2]
   18150:	sub	r2, r1, r2
   18154:	ldrh	r0, [r2]
   18158:	cmp	r0, #11
   1815c:	bls	1822c <test_sort_find@@Base+0x14f0>
   18160:	ldrh	r2, [r2, #10]
   18164:	cmp	r2, #0
   18168:	beq	1822c <test_sort_find@@Base+0x14f0>
   1816c:	add	lr, r1, r2
   18170:	ldr	r0, [r1, r2]
   18174:	add	r0, r0, #4
   18178:	add	r0, lr, r0
   1817c:	add	r5, r4, #1
   18180:	add	r3, r3, #4
   18184:	add	r1, fp, r3
   18188:	cmp	r5, ip
   1818c:	bcs	18240 <test_sort_find@@Base+0x1504>
   18190:	ldr	r3, [fp, r3]
   18194:	adds	r2, r1, r3
   18198:	beq	18254 <test_sort_find@@Base+0x1518>
   1819c:	ldr	r3, [r1, r3]
   181a0:	sub	r3, r2, r3
   181a4:	ldrh	r1, [r3]
   181a8:	cmp	r1, #11
   181ac:	bls	18268 <test_sort_find@@Base+0x152c>
   181b0:	ldrh	r3, [r3, #10]
   181b4:	cmp	r3, #0
   181b8:	beq	18268 <test_sort_find@@Base+0x152c>
   181bc:	add	r1, r2, r3
   181c0:	ldr	r3, [r2, r3]
   181c4:	add	r3, r3, #4
   181c8:	adds	r1, r1, r3
   181cc:	ldreq	r6, [sp, #8]
   181d0:	ldrne	r6, [r1, #-4]
   181d4:	cmp	r0, #0
   181d8:	beq	1827c <test_sort_find@@Base+0x1540>
   181dc:	ldr	r7, [r0, #-4]
   181e0:	cmp	r6, r7
   181e4:	movcc	r2, r6
   181e8:	movcs	r2, r7
   181ec:	bl	12a74 <strncmp@plt>
   181f0:	cmp	r0, #0
   181f4:	bne	18284 <test_sort_find@@Base+0x1548>
   181f8:	cmp	r7, r6
   181fc:	movcs	r5, r4
   18200:	b	18358 <test_sort_find@@Base+0x161c>
   18204:	ldr	r3, [pc, #-1076]	; 17dd8 <test_sort_find@@Base+0x109c>
   18208:	ldr	r2, [pc, #-1104]	; 17dc0 <test_sort_find@@Base+0x1084>
   1820c:	ldr	r1, [pc, #-1080]	; 17ddc <test_sort_find@@Base+0x10a0>
   18210:	ldr	r0, [pc, #-1108]	; 17dc4 <test_sort_find@@Base+0x1088>
   18214:	bl	12a8c <__assert_fail@plt>
   18218:	ldr	r3, [pc, #-1108]	; 17dcc <test_sort_find@@Base+0x1090>
   1821c:	ldr	r2, [pc, #-1108]	; 17dd0 <test_sort_find@@Base+0x1094>
   18220:	ldr	r1, [pc, #-1100]	; 17ddc <test_sort_find@@Base+0x10a0>
   18224:	ldr	r0, [pc, #-1124]	; 17dc8 <test_sort_find@@Base+0x108c>
   18228:	bl	12a8c <__assert_fail@plt>
   1822c:	ldr	r3, [pc, #-1128]	; 17dcc <test_sort_find@@Base+0x1090>
   18230:	ldr	r2, [pc, #-1128]	; 17dd0 <test_sort_find@@Base+0x1094>
   18234:	ldr	r1, [pc, #-1120]	; 17ddc <test_sort_find@@Base+0x10a0>
   18238:	ldr	r0, [pc, #-1132]	; 17dd4 <test_sort_find@@Base+0x1098>
   1823c:	bl	12a8c <__assert_fail@plt>
   18240:	ldr	r3, [pc, #-1136]	; 17dd8 <test_sort_find@@Base+0x109c>
   18244:	ldr	r2, [pc, #-1164]	; 17dc0 <test_sort_find@@Base+0x1084>
   18248:	ldr	r1, [pc, #-1140]	; 17ddc <test_sort_find@@Base+0x10a0>
   1824c:	ldr	r0, [pc, #-1168]	; 17dc4 <test_sort_find@@Base+0x1088>
   18250:	bl	12a8c <__assert_fail@plt>
   18254:	ldr	r3, [pc, #-1168]	; 17dcc <test_sort_find@@Base+0x1090>
   18258:	ldr	r2, [pc, #-1168]	; 17dd0 <test_sort_find@@Base+0x1094>
   1825c:	ldr	r1, [pc, #-1160]	; 17ddc <test_sort_find@@Base+0x10a0>
   18260:	ldr	r0, [pc, #-1184]	; 17dc8 <test_sort_find@@Base+0x108c>
   18264:	bl	12a8c <__assert_fail@plt>
   18268:	ldr	r3, [pc, #-1188]	; 17dcc <test_sort_find@@Base+0x1090>
   1826c:	ldr	r2, [pc, #-1188]	; 17dd0 <test_sort_find@@Base+0x1094>
   18270:	ldr	r1, [pc, #-1180]	; 17ddc <test_sort_find@@Base+0x10a0>
   18274:	ldr	r0, [pc, #-1192]	; 17dd4 <test_sort_find@@Base+0x1098>
   18278:	bl	12a8c <__assert_fail@plt>
   1827c:	ldr	r7, [sp, #8]
   18280:	b	181f8 <test_sort_find@@Base+0x14bc>
   18284:	cmp	r0, #0
   18288:	movge	r5, r4
   1828c:	b	18358 <test_sort_find@@Base+0x161c>
   18290:	ldr	r3, [pc, #-1216]	; 17dd8 <test_sort_find@@Base+0x109c>
   18294:	ldr	r2, [pc, #-1244]	; 17dc0 <test_sort_find@@Base+0x1084>
   18298:	ldr	r1, [pc, #-1220]	; 17ddc <test_sort_find@@Base+0x10a0>
   1829c:	ldr	r0, [pc, #-1248]	; 17dc4 <test_sort_find@@Base+0x1088>
   182a0:	bl	12a8c <__assert_fail@plt>
   182a4:	ldr	r3, [pc, #-1248]	; 17dcc <test_sort_find@@Base+0x1090>
   182a8:	ldr	r2, [pc, #-1248]	; 17dd0 <test_sort_find@@Base+0x1094>
   182ac:	ldr	r1, [pc, #-1240]	; 17ddc <test_sort_find@@Base+0x10a0>
   182b0:	ldr	r0, [pc, #-1264]	; 17dc8 <test_sort_find@@Base+0x108c>
   182b4:	bl	12a8c <__assert_fail@plt>
   182b8:	ldr	r3, [pc, #-1268]	; 17dcc <test_sort_find@@Base+0x1090>
   182bc:	ldr	r2, [pc, #-1268]	; 17dd0 <test_sort_find@@Base+0x1094>
   182c0:	ldr	r1, [pc, #-1260]	; 17ddc <test_sort_find@@Base+0x10a0>
   182c4:	ldr	r0, [pc, #-1272]	; 17dd4 <test_sort_find@@Base+0x1098>
   182c8:	bl	12a8c <__assert_fail@plt>
   182cc:	ldr	r3, [pc, #-1276]	; 17dd8 <test_sort_find@@Base+0x109c>
   182d0:	ldr	r2, [pc, #-1304]	; 17dc0 <test_sort_find@@Base+0x1084>
   182d4:	ldr	r1, [pc, #-1280]	; 17ddc <test_sort_find@@Base+0x10a0>
   182d8:	ldr	r0, [pc, #-1308]	; 17dc4 <test_sort_find@@Base+0x1088>
   182dc:	bl	12a8c <__assert_fail@plt>
   182e0:	ldr	r3, [pc, #-1308]	; 17dcc <test_sort_find@@Base+0x1090>
   182e4:	ldr	r2, [pc, #-1308]	; 17dd0 <test_sort_find@@Base+0x1094>
   182e8:	ldr	r1, [pc, #-1300]	; 17ddc <test_sort_find@@Base+0x10a0>
   182ec:	ldr	r0, [pc, #-1324]	; 17dc8 <test_sort_find@@Base+0x108c>
   182f0:	bl	12a8c <__assert_fail@plt>
   182f4:	ldr	r3, [pc, #-1328]	; 17dcc <test_sort_find@@Base+0x1090>
   182f8:	ldr	r2, [pc, #-1328]	; 17dd0 <test_sort_find@@Base+0x1094>
   182fc:	ldr	r1, [pc, #-1320]	; 17ddc <test_sort_find@@Base+0x10a0>
   18300:	ldr	r0, [pc, #-1332]	; 17dd4 <test_sort_find@@Base+0x1098>
   18304:	bl	12a8c <__assert_fail@plt>
   18308:	ldr	r7, [sp, #8]
   1830c:	b	18424 <test_sort_find@@Base+0x16e8>
   18310:	cmp	r0, #0
   18314:	bge	1842c <test_sort_find@@Base+0x16f0>
   18318:	sub	sl, sl, r5
   1831c:	lsl	sl, sl, #2
   18320:	sub	r4, r4, sl
   18324:	str	r4, [fp, r9]
   18328:	add	sl, sl, r6
   1832c:	ldr	r3, [sp]
   18330:	str	sl, [fp, r3]
   18334:	lsl	r4, r5, #1
   18338:	mov	sl, r5
   1833c:	ldr	r3, [sp, #4]
   18340:	cmp	r3, r4
   18344:	bcc	1842c <test_sort_find@@Base+0x16f0>
   18348:	ldr	r3, [sp, #4]
   1834c:	cmp	r4, r3
   18350:	movcs	r5, r4
   18354:	bcc	1812c <test_sort_find@@Base+0x13f0>
   18358:	lsl	r9, sl, #2
   1835c:	add	r3, fp, r9
   18360:	ldr	r1, [fp, #-4]
   18364:	cmp	sl, r1
   18368:	bcs	18290 <test_sort_find@@Base+0x1554>
   1836c:	ldr	r6, [fp, sl, lsl #2]
   18370:	adds	r2, r3, r6
   18374:	beq	182a4 <test_sort_find@@Base+0x1568>
   18378:	ldr	r3, [r3, r6]
   1837c:	sub	r3, r2, r3
   18380:	ldrh	r0, [r3]
   18384:	cmp	r0, #11
   18388:	bls	182b8 <test_sort_find@@Base+0x157c>
   1838c:	ldrh	r3, [r3, #10]
   18390:	cmp	r3, #0
   18394:	beq	182b8 <test_sort_find@@Base+0x157c>
   18398:	add	ip, r2, r3
   1839c:	ldr	r0, [r2, r3]
   183a0:	add	r0, r0, #4
   183a4:	add	r0, ip, r0
   183a8:	lsl	r3, r5, #2
   183ac:	str	r3, [sp]
   183b0:	add	r3, fp, r3
   183b4:	cmp	r5, r1
   183b8:	bcs	182cc <test_sort_find@@Base+0x1590>
   183bc:	ldr	r4, [fp, r5, lsl #2]
   183c0:	adds	r2, r3, r4
   183c4:	beq	182e0 <test_sort_find@@Base+0x15a4>
   183c8:	ldr	r3, [r3, r4]
   183cc:	sub	r3, r2, r3
   183d0:	ldrh	r1, [r3]
   183d4:	cmp	r1, #11
   183d8:	bls	182f4 <test_sort_find@@Base+0x15b8>
   183dc:	ldrh	r3, [r3, #10]
   183e0:	cmp	r3, #0
   183e4:	beq	182f4 <test_sort_find@@Base+0x15b8>
   183e8:	add	r1, r2, r3
   183ec:	ldr	r3, [r2, r3]
   183f0:	add	r3, r3, #4
   183f4:	adds	r1, r1, r3
   183f8:	ldreq	r8, [sp, #8]
   183fc:	ldrne	r8, [r1, #-4]
   18400:	cmp	r0, #0
   18404:	beq	18308 <test_sort_find@@Base+0x15cc>
   18408:	ldr	r7, [r0, #-4]
   1840c:	cmp	r8, r7
   18410:	movcc	r2, r8
   18414:	movcs	r2, r7
   18418:	bl	12a74 <strncmp@plt>
   1841c:	cmp	r0, #0
   18420:	bne	18310 <test_sort_find@@Base+0x15d4>
   18424:	cmp	r8, r7
   18428:	bhi	18318 <test_sort_find@@Base+0x15dc>
   1842c:	ldr	r3, [sp, #12]
   18430:	add	r3, r3, #4
   18434:	str	r3, [sp, #12]
   18438:	ldr	r3, [sp, #16]
   1843c:	ldr	r2, [sp, #28]
   18440:	cmp	r3, r2
   18444:	beq	17940 <test_sort_find@@Base+0xc04>
   18448:	ldr	r3, [fp]
   1844c:	ldr	r0, [sp, #12]
   18450:	add	r3, r0, r3
   18454:	ldr	r1, [sp, #16]
   18458:	ldr	r2, [r1, #-4]
   1845c:	sub	r2, r2, r0
   18460:	str	r2, [fp]
   18464:	mov	r2, r1
   18468:	str	r3, [r2, #-4]!
   1846c:	str	r2, [sp, #16]
   18470:	ldr	r3, [sp, #4]
   18474:	sub	r3, r3, #1
   18478:	str	r3, [sp, #4]
   1847c:	ldr	r4, [sp, #8]
   18480:	mov	sl, r4
   18484:	b	18348 <test_sort_find@@Base+0x160c>

00018488 <test_scan@@Base>:
   18488:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1848c:	sub	sp, sp, #44	; 0x2c
   18490:	mov	r4, r0
   18494:	ldr	r3, [pc, #3228]	; 19138 <test_scan@@Base+0xcb0>
   18498:	ldm	r3, {r0, r1}
   1849c:	str	r0, [sp, #28]
   184a0:	strh	r1, [sp, #32]
   184a4:	lsr	r1, r1, #16
   184a8:	strb	r1, [sp, #34]	; 0x22
   184ac:	mov	r0, r4
   184b0:	bl	1e238 <flatcc_builder_reset@@Base>
   184b4:	mov	r3, #0
   184b8:	mov	r2, r3
   184bc:	ldr	r1, [pc, #3192]	; 1913c <test_scan@@Base+0xcb4>
   184c0:	mov	r0, r4
   184c4:	bl	1e9d8 <flatcc_builder_start_buffer@@Base>
   184c8:	cmp	r0, #0
   184cc:	bne	184dc <test_scan@@Base+0x54>
   184d0:	mov	r1, #36	; 0x24
   184d4:	mov	r0, r4
   184d8:	bl	1f804 <flatcc_builder_start_table@@Base>
   184dc:	ldr	r1, [pc, #3164]	; 19140 <test_scan@@Base+0xcb8>
   184e0:	mov	r0, r4
   184e4:	bl	135f0 <_start@@Base+0xb58>
   184e8:	mvn	r3, #0
   184ec:	str	r3, [sp, #4]
   184f0:	mov	r3, #1
   184f4:	str	r3, [sp]
   184f8:	mov	r2, #7
   184fc:	add	r1, sp, #28
   18500:	mov	r0, r4
   18504:	bl	20408 <flatcc_builder_create_vector@@Base>
   18508:	subs	r5, r0, #0
   1850c:	beq	18524 <test_scan@@Base+0x9c>
   18510:	mov	r1, #5
   18514:	mov	r0, r4
   18518:	bl	213cc <flatcc_builder_table_add_offset@@Base>
   1851c:	cmp	r0, #0
   18520:	strne	r5, [r0]
   18524:	mov	r0, r4
   18528:	bl	1f5e0 <flatcc_builder_start_offset_vector@@Base>
   1852c:	mov	r0, r4
   18530:	bl	2067c <flatcc_builder_end_offset_vector@@Base>
   18534:	subs	r5, r0, #0
   18538:	beq	18550 <test_scan@@Base+0xc8>
   1853c:	mov	r1, #10
   18540:	mov	r0, r4
   18544:	bl	213cc <flatcc_builder_table_add_offset@@Base>
   18548:	cmp	r0, #0
   1854c:	strne	r5, [r0]
   18550:	mov	r0, r4
   18554:	bl	1f5e0 <flatcc_builder_start_offset_vector@@Base>
   18558:	mov	r1, #36	; 0x24
   1855c:	mov	r0, r4
   18560:	bl	1f804 <flatcc_builder_start_table@@Base>
   18564:	ldr	r1, [pc, #3176]	; 191d4 <test_scan@@Base+0xd4c>
   18568:	mov	r0, r4
   1856c:	bl	135f0 <_start@@Base+0xb58>
   18570:	mov	r2, #1
   18574:	ldr	r1, [pc, #3016]	; 19144 <test_scan@@Base+0xcbc>
   18578:	mov	r0, r4
   1857c:	bl	201a8 <flatcc_builder_check_required@@Base>
   18580:	cmp	r0, #0
   18584:	beq	18808 <test_scan@@Base+0x380>
   18588:	mov	r0, r4
   1858c:	bl	20254 <flatcc_builder_end_table@@Base>
   18590:	subs	r1, r0, #0
   18594:	beq	185a0 <test_scan@@Base+0x118>
   18598:	mov	r0, r4
   1859c:	bl	1f048 <flatcc_builder_offset_vector_push@@Base>
   185a0:	mov	r1, #36	; 0x24
   185a4:	mov	r0, r4
   185a8:	bl	1f804 <flatcc_builder_start_table@@Base>
   185ac:	ldr	r1, [pc, #3096]	; 191cc <test_scan@@Base+0xd44>
   185b0:	mov	r0, r4
   185b4:	bl	135f0 <_start@@Base+0xb58>
   185b8:	mov	r2, #1
   185bc:	ldr	r1, [pc, #2944]	; 19144 <test_scan@@Base+0xcbc>
   185c0:	mov	r0, r4
   185c4:	bl	201a8 <flatcc_builder_check_required@@Base>
   185c8:	cmp	r0, #0
   185cc:	beq	1881c <test_scan@@Base+0x394>
   185d0:	mov	r0, r4
   185d4:	bl	20254 <flatcc_builder_end_table@@Base>
   185d8:	subs	r1, r0, #0
   185dc:	beq	185e8 <test_scan@@Base+0x160>
   185e0:	mov	r0, r4
   185e4:	bl	1f048 <flatcc_builder_offset_vector_push@@Base>
   185e8:	mov	r1, #36	; 0x24
   185ec:	mov	r0, r4
   185f0:	bl	1f804 <flatcc_builder_start_table@@Base>
   185f4:	ldr	r1, [pc, #3036]	; 191d8 <test_scan@@Base+0xd50>
   185f8:	mov	r0, r4
   185fc:	bl	135f0 <_start@@Base+0xb58>
   18600:	mov	r2, #1
   18604:	ldr	r1, [pc, #2872]	; 19144 <test_scan@@Base+0xcbc>
   18608:	mov	r0, r4
   1860c:	bl	201a8 <flatcc_builder_check_required@@Base>
   18610:	cmp	r0, #0
   18614:	beq	18830 <test_scan@@Base+0x3a8>
   18618:	mov	r0, r4
   1861c:	bl	20254 <flatcc_builder_end_table@@Base>
   18620:	subs	r1, r0, #0
   18624:	beq	18630 <test_scan@@Base+0x1a8>
   18628:	mov	r0, r4
   1862c:	bl	1f048 <flatcc_builder_offset_vector_push@@Base>
   18630:	mov	r1, #36	; 0x24
   18634:	mov	r0, r4
   18638:	bl	1f804 <flatcc_builder_start_table@@Base>
   1863c:	ldr	r1, [pc, #2948]	; 191c8 <test_scan@@Base+0xd40>
   18640:	mov	r0, r4
   18644:	bl	135f0 <_start@@Base+0xb58>
   18648:	mov	r2, #1
   1864c:	ldr	r1, [pc, #2800]	; 19144 <test_scan@@Base+0xcbc>
   18650:	mov	r0, r4
   18654:	bl	201a8 <flatcc_builder_check_required@@Base>
   18658:	cmp	r0, #0
   1865c:	beq	18844 <test_scan@@Base+0x3bc>
   18660:	mov	r0, r4
   18664:	bl	20254 <flatcc_builder_end_table@@Base>
   18668:	subs	r1, r0, #0
   1866c:	beq	18678 <test_scan@@Base+0x1f0>
   18670:	mov	r0, r4
   18674:	bl	1f048 <flatcc_builder_offset_vector_push@@Base>
   18678:	mov	r1, #36	; 0x24
   1867c:	mov	r0, r4
   18680:	bl	1f804 <flatcc_builder_start_table@@Base>
   18684:	ldr	r1, [pc, #2892]	; 191d8 <test_scan@@Base+0xd50>
   18688:	mov	r0, r4
   1868c:	bl	135f0 <_start@@Base+0xb58>
   18690:	mov	r2, #1
   18694:	ldr	r1, [pc, #2728]	; 19144 <test_scan@@Base+0xcbc>
   18698:	mov	r0, r4
   1869c:	bl	201a8 <flatcc_builder_check_required@@Base>
   186a0:	cmp	r0, #0
   186a4:	beq	18858 <test_scan@@Base+0x3d0>
   186a8:	mov	r0, r4
   186ac:	bl	20254 <flatcc_builder_end_table@@Base>
   186b0:	subs	r1, r0, #0
   186b4:	beq	186c0 <test_scan@@Base+0x238>
   186b8:	mov	r0, r4
   186bc:	bl	1f048 <flatcc_builder_offset_vector_push@@Base>
   186c0:	mov	r0, r4
   186c4:	bl	2067c <flatcc_builder_end_offset_vector@@Base>
   186c8:	subs	r5, r0, #0
   186cc:	beq	186e4 <test_scan@@Base+0x25c>
   186d0:	mov	r1, #11
   186d4:	mov	r0, r4
   186d8:	bl	213cc <flatcc_builder_table_add_offset@@Base>
   186dc:	cmp	r0, #0
   186e0:	strne	r5, [r0]
   186e4:	mov	r2, #1
   186e8:	ldr	r1, [pc, #2644]	; 19144 <test_scan@@Base+0xcbc>
   186ec:	mov	r0, r4
   186f0:	bl	201a8 <flatcc_builder_check_required@@Base>
   186f4:	cmp	r0, #0
   186f8:	beq	1886c <test_scan@@Base+0x3e4>
   186fc:	mov	r0, r4
   18700:	bl	20254 <flatcc_builder_end_table@@Base>
   18704:	mov	r1, r0
   18708:	mov	r0, r4
   1870c:	bl	1ea90 <flatcc_builder_end_buffer@@Base>
   18710:	add	r1, sp, #36	; 0x24
   18714:	mov	r0, r4
   18718:	bl	21958 <flatcc_builder_finalize_aligned_buffer@@Base>
   1871c:	subs	r3, r0, #0
   18720:	mov	r1, r3
   18724:	str	r3, [sp, #8]
   18728:	beq	18880 <test_scan@@Base+0x3f8>
   1872c:	ldr	r2, [r3, #4]
   18730:	ldr	r3, [pc, #2576]	; 19148 <test_scan@@Base+0xcc0>
   18734:	cmp	r2, r3
   18738:	bne	18880 <test_scan@@Base+0x3f8>
   1873c:	ldr	r2, [r1]
   18740:	adds	r3, r1, r2
   18744:	beq	18880 <test_scan@@Base+0x3f8>
   18748:	ldr	r1, [sp, #8]
   1874c:	ldr	r2, [r1, r2]
   18750:	sub	r2, r3, r2
   18754:	ldrh	ip, [r2]
   18758:	cmp	ip, #27
   1875c:	bls	18894 <test_scan@@Base+0x40c>
   18760:	ldrh	r1, [r2, #26]
   18764:	cmp	r1, #0
   18768:	beq	18894 <test_scan@@Base+0x40c>
   1876c:	add	lr, r3, r1
   18770:	ldr	r1, [r3, r1]
   18774:	add	r1, r1, #4
   18778:	adds	fp, lr, r1
   1877c:	beq	18894 <test_scan@@Base+0x40c>
   18780:	cmp	ip, #15
   18784:	bls	188a8 <test_scan@@Base+0x420>
   18788:	ldrh	r0, [r2, #14]
   1878c:	cmp	r0, #0
   18790:	beq	188a8 <test_scan@@Base+0x420>
   18794:	add	r4, r3, r0
   18798:	ldr	r0, [r3, r0]
   1879c:	add	r0, r0, #4
   187a0:	adds	r0, r4, r0
   187a4:	str	r0, [sp, #20]
   187a8:	beq	188a8 <test_scan@@Base+0x420>
   187ac:	cmp	ip, #25
   187b0:	bls	188bc <test_scan@@Base+0x434>
   187b4:	ldrh	r2, [r2, #24]
   187b8:	cmp	r2, #0
   187bc:	beq	188bc <test_scan@@Base+0x434>
   187c0:	add	r0, r3, r2
   187c4:	ldr	r3, [r3, r2]
   187c8:	add	r3, r3, #4
   187cc:	adds	r3, r0, r3
   187d0:	str	r3, [sp, #12]
   187d4:	beq	188bc <test_scan@@Base+0x434>
   187d8:	ldr	r4, [fp, #-4]
   187dc:	cmp	r4, #0
   187e0:	beq	18980 <test_scan@@Base+0x4f8>
   187e4:	ldr	r5, [lr, r1]
   187e8:	adds	r5, fp, r5
   187ec:	beq	188d0 <test_scan@@Base+0x448>
   187f0:	add	r9, fp, #4
   187f4:	mov	r7, r9
   187f8:	mov	r3, r5
   187fc:	mov	r6, #0
   18800:	ldr	r8, [pc, #2500]	; 191cc <test_scan@@Base+0xd44>
   18804:	b	18924 <test_scan@@Base+0x49c>
   18808:	ldr	r3, [pc, #2364]	; 1914c <test_scan@@Base+0xcc4>
   1880c:	mov	r2, #235	; 0xeb
   18810:	ldr	r1, [pc, #2360]	; 19150 <test_scan@@Base+0xcc8>
   18814:	ldr	r0, [pc, #2360]	; 19154 <test_scan@@Base+0xccc>
   18818:	bl	12a8c <__assert_fail@plt>
   1881c:	ldr	r3, [pc, #2344]	; 1914c <test_scan@@Base+0xcc4>
   18820:	mov	r2, #235	; 0xeb
   18824:	ldr	r1, [pc, #2340]	; 19150 <test_scan@@Base+0xcc8>
   18828:	ldr	r0, [pc, #2340]	; 19154 <test_scan@@Base+0xccc>
   1882c:	bl	12a8c <__assert_fail@plt>
   18830:	ldr	r3, [pc, #2324]	; 1914c <test_scan@@Base+0xcc4>
   18834:	mov	r2, #235	; 0xeb
   18838:	ldr	r1, [pc, #2320]	; 19150 <test_scan@@Base+0xcc8>
   1883c:	ldr	r0, [pc, #2320]	; 19154 <test_scan@@Base+0xccc>
   18840:	bl	12a8c <__assert_fail@plt>
   18844:	ldr	r3, [pc, #2304]	; 1914c <test_scan@@Base+0xcc4>
   18848:	mov	r2, #235	; 0xeb
   1884c:	ldr	r1, [pc, #2300]	; 19150 <test_scan@@Base+0xcc8>
   18850:	ldr	r0, [pc, #2300]	; 19154 <test_scan@@Base+0xccc>
   18854:	bl	12a8c <__assert_fail@plt>
   18858:	ldr	r3, [pc, #2284]	; 1914c <test_scan@@Base+0xcc4>
   1885c:	mov	r2, #235	; 0xeb
   18860:	ldr	r1, [pc, #2280]	; 19150 <test_scan@@Base+0xcc8>
   18864:	ldr	r0, [pc, #2280]	; 19154 <test_scan@@Base+0xccc>
   18868:	bl	12a8c <__assert_fail@plt>
   1886c:	ldr	r3, [pc, #2264]	; 1914c <test_scan@@Base+0xcc4>
   18870:	mov	r2, #235	; 0xeb
   18874:	ldr	r1, [pc, #2260]	; 19150 <test_scan@@Base+0xcc8>
   18878:	ldr	r0, [pc, #2260]	; 19154 <test_scan@@Base+0xccc>
   1887c:	bl	12a8c <__assert_fail@plt>
   18880:	ldr	r3, [pc, #2256]	; 19158 <test_scan@@Base+0xcd0>
   18884:	ldr	r2, [pc, #2256]	; 1915c <test_scan@@Base+0xcd4>
   18888:	ldr	r1, [pc, #2256]	; 19160 <test_scan@@Base+0xcd8>
   1888c:	ldr	r0, [pc, #2256]	; 19164 <test_scan@@Base+0xcdc>
   18890:	bl	12a8c <__assert_fail@plt>
   18894:	ldr	r3, [pc, #2252]	; 19168 <test_scan@@Base+0xce0>
   18898:	ldr	r2, [pc, #2252]	; 1916c <test_scan@@Base+0xce4>
   1889c:	ldr	r1, [pc, #2252]	; 19170 <test_scan@@Base+0xce8>
   188a0:	ldr	r0, [pc, #2252]	; 19174 <test_scan@@Base+0xcec>
   188a4:	bl	12a8c <__assert_fail@plt>
   188a8:	ldr	r3, [pc, #2232]	; 19168 <test_scan@@Base+0xce0>
   188ac:	ldr	r2, [pc, #2244]	; 19178 <test_scan@@Base+0xcf0>
   188b0:	ldr	r1, [pc, #2232]	; 19170 <test_scan@@Base+0xce8>
   188b4:	ldr	r0, [pc, #2240]	; 1917c <test_scan@@Base+0xcf4>
   188b8:	bl	12a8c <__assert_fail@plt>
   188bc:	ldr	r3, [pc, #2212]	; 19168 <test_scan@@Base+0xce0>
   188c0:	ldr	r2, [pc, #2232]	; 19180 <test_scan@@Base+0xcf8>
   188c4:	ldr	r1, [pc, #2212]	; 19170 <test_scan@@Base+0xce8>
   188c8:	ldr	r0, [pc, #2228]	; 19184 <test_scan@@Base+0xcfc>
   188cc:	bl	12a8c <__assert_fail@plt>
   188d0:	ldr	r3, [pc, #2224]	; 19188 <test_scan@@Base+0xd00>
   188d4:	ldr	r2, [pc, #2224]	; 1918c <test_scan@@Base+0xd04>
   188d8:	ldr	r1, [pc, #2176]	; 19160 <test_scan@@Base+0xcd8>
   188dc:	ldr	r0, [pc, #2176]	; 19164 <test_scan@@Base+0xcdc>
   188e0:	bl	12a8c <__assert_fail@plt>
   188e4:	add	r0, r3, r2
   188e8:	ldr	r3, [r3, r2]
   188ec:	add	r3, r3, #4
   188f0:	mov	r1, r8
   188f4:	add	r0, r0, r3
   188f8:	bl	12990 <strcmp@plt>
   188fc:	cmp	r0, #0
   18900:	beq	18958 <test_scan@@Base+0x4d0>
   18904:	add	r6, r6, #1
   18908:	cmp	r6, r4
   1890c:	beq	18980 <test_scan@@Base+0x4f8>
   18910:	mov	r3, r7
   18914:	add	r7, r7, #4
   18918:	ldr	r2, [r3]
   1891c:	adds	r3, r3, r2
   18920:	beq	188d0 <test_scan@@Base+0x448>
   18924:	ldr	r2, [r3]
   18928:	sub	r2, r3, r2
   1892c:	ldrh	r1, [r2]
   18930:	cmp	r1, #11
   18934:	bls	18944 <test_scan@@Base+0x4bc>
   18938:	ldrh	r2, [r2, #10]
   1893c:	cmp	r2, #0
   18940:	bne	188e4 <test_scan@@Base+0x45c>
   18944:	ldr	r3, [pc, #2108]	; 19188 <test_scan@@Base+0xd00>
   18948:	ldr	r2, [pc, #2108]	; 1918c <test_scan@@Base+0xd04>
   1894c:	ldr	r1, [pc, #2060]	; 19160 <test_scan@@Base+0xcd8>
   18950:	ldr	r0, [pc, #2104]	; 19190 <test_scan@@Base+0xd08>
   18954:	bl	12a8c <__assert_fail@plt>
   18958:	cmp	r6, #1
   1895c:	bne	18980 <test_scan@@Base+0x4f8>
   18960:	sub	r3, r4, #1
   18964:	str	r3, [sp, #16]
   18968:	sub	sl, r4, #-1073741823	; 0xc0000001
   1896c:	add	sl, fp, sl, lsl #2
   18970:	mov	r7, sl
   18974:	mov	r6, r3
   18978:	ldr	r8, [pc, #2124]	; 191cc <test_scan@@Base+0xd44>
   1897c:	b	189f0 <test_scan@@Base+0x568>
   18980:	ldr	r0, [pc, #2060]	; 19194 <test_scan@@Base+0xd0c>
   18984:	bl	129f0 <puts@plt>
   18988:	mvn	r8, #0
   1898c:	ldr	r0, [sp, #8]
   18990:	bl	21a64 <flatcc_builder_aligned_free@@Base>
   18994:	mov	r0, r8
   18998:	add	sp, sp, #44	; 0x2c
   1899c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   189a0:	ldr	r3, [pc, #2032]	; 19198 <test_scan@@Base+0xd10>
   189a4:	ldr	r2, [pc, #2032]	; 1919c <test_scan@@Base+0xd14>
   189a8:	ldr	r1, [pc, #1968]	; 19160 <test_scan@@Base+0xcd8>
   189ac:	ldr	r0, [pc, #2204]	; 19250 <test_scan@@Base+0xdc8>
   189b0:	bl	12a8c <__assert_fail@plt>
   189b4:	ldr	r3, [pc, #1996]	; 19188 <test_scan@@Base+0xd00>
   189b8:	ldr	r2, [pc, #1996]	; 1918c <test_scan@@Base+0xd04>
   189bc:	ldr	r1, [pc, #1948]	; 19160 <test_scan@@Base+0xcd8>
   189c0:	ldr	r0, [pc, #1948]	; 19164 <test_scan@@Base+0xcdc>
   189c4:	bl	12a8c <__assert_fail@plt>
   189c8:	add	r0, r1, r3
   189cc:	ldr	r3, [r1, r3]
   189d0:	add	r3, r3, #4
   189d4:	mov	r1, r8
   189d8:	add	r0, r0, r3
   189dc:	bl	12990 <strcmp@plt>
   189e0:	sub	r3, r6, #1
   189e4:	cmp	r0, #0
   189e8:	beq	18a48 <test_scan@@Base+0x5c0>
   189ec:	mov	r6, r3
   189f0:	cmn	r6, #1
   189f4:	beq	18a5c <test_scan@@Base+0x5d4>
   189f8:	mov	r3, r7
   189fc:	cmp	r6, r4
   18a00:	bcs	189a0 <test_scan@@Base+0x518>
   18a04:	sub	r7, r7, #4
   18a08:	ldr	r2, [r3]
   18a0c:	adds	r1, r3, r2
   18a10:	beq	189b4 <test_scan@@Base+0x52c>
   18a14:	ldr	r3, [r3, r2]
   18a18:	sub	r3, r1, r3
   18a1c:	ldrh	r2, [r3]
   18a20:	cmp	r2, #11
   18a24:	bls	18a34 <test_scan@@Base+0x5ac>
   18a28:	ldrh	r3, [r3, #10]
   18a2c:	cmp	r3, #0
   18a30:	bne	189c8 <test_scan@@Base+0x540>
   18a34:	ldr	r3, [pc, #1868]	; 19188 <test_scan@@Base+0xd00>
   18a38:	ldr	r2, [pc, #1868]	; 1918c <test_scan@@Base+0xd04>
   18a3c:	ldr	r1, [pc, #1820]	; 19160 <test_scan@@Base+0xcd8>
   18a40:	ldr	r0, [pc, #1864]	; 19190 <test_scan@@Base+0xd08>
   18a44:	bl	12a8c <__assert_fail@plt>
   18a48:	cmp	r6, #1
   18a4c:	moveq	r8, r9
   18a50:	moveq	r3, r5
   18a54:	moveq	r7, #0
   18a58:	beq	18abc <test_scan@@Base+0x634>
   18a5c:	ldr	r0, [pc, #1852]	; 191a0 <test_scan@@Base+0xd18>
   18a60:	bl	129f0 <puts@plt>
   18a64:	mvn	r8, #0
   18a68:	b	1898c <test_scan@@Base+0x504>
   18a6c:	ldr	r3, [pc, #1812]	; 19188 <test_scan@@Base+0xd00>
   18a70:	ldr	r2, [pc, #1812]	; 1918c <test_scan@@Base+0xd04>
   18a74:	ldr	r1, [pc, #1764]	; 19160 <test_scan@@Base+0xcd8>
   18a78:	ldr	r0, [pc, #1764]	; 19164 <test_scan@@Base+0xcdc>
   18a7c:	bl	12a8c <__assert_fail@plt>
   18a80:	ldr	r3, [pc, #1792]	; 19188 <test_scan@@Base+0xd00>
   18a84:	ldr	r2, [pc, #1792]	; 1918c <test_scan@@Base+0xd04>
   18a88:	ldr	r1, [pc, #1744]	; 19160 <test_scan@@Base+0xcd8>
   18a8c:	ldr	r0, [pc, #1788]	; 19190 <test_scan@@Base+0xd08>
   18a90:	bl	12a8c <__assert_fail@plt>
   18a94:	cmp	r6, #5
   18a98:	bls	18b1c <test_scan@@Base+0x694>
   18a9c:	add	r7, r7, #1
   18aa0:	cmp	r7, r4
   18aa4:	beq	18b2c <test_scan@@Base+0x6a4>
   18aa8:	mov	r3, r8
   18aac:	add	r8, r8, #4
   18ab0:	ldr	r2, [r3]
   18ab4:	adds	r3, r3, r2
   18ab8:	beq	18a6c <test_scan@@Base+0x5e4>
   18abc:	ldr	r2, [r3]
   18ac0:	sub	r2, r3, r2
   18ac4:	ldrh	r1, [r2]
   18ac8:	cmp	r1, #11
   18acc:	bls	18a80 <test_scan@@Base+0x5f8>
   18ad0:	ldrh	r2, [r2, #10]
   18ad4:	cmp	r2, #0
   18ad8:	beq	18a80 <test_scan@@Base+0x5f8>
   18adc:	add	r0, r3, r2
   18ae0:	ldr	r3, [r3, r2]
   18ae4:	add	r3, r3, #4
   18ae8:	adds	r0, r0, r3
   18aec:	beq	18a9c <test_scan@@Base+0x614>
   18af0:	ldr	r6, [r0, #-4]
   18af4:	cmp	r6, #5
   18af8:	movcc	r2, r6
   18afc:	movcs	r2, #5
   18b00:	ldr	r1, [pc, #1692]	; 191a4 <test_scan@@Base+0xd1c>
   18b04:	bl	12a74 <strncmp@plt>
   18b08:	cmp	r0, #0
   18b0c:	bne	18a9c <test_scan@@Base+0x614>
   18b10:	cmp	r6, #4
   18b14:	bhi	18a94 <test_scan@@Base+0x60c>
   18b18:	b	18a9c <test_scan@@Base+0x614>
   18b1c:	cmp	r7, #1
   18b20:	moveq	r8, sl
   18b24:	ldreq	r6, [sp, #16]
   18b28:	beq	18b84 <test_scan@@Base+0x6fc>
   18b2c:	ldr	r0, [pc, #1652]	; 191a8 <test_scan@@Base+0xd20>
   18b30:	bl	129f0 <puts@plt>
   18b34:	mvn	r8, #0
   18b38:	b	1898c <test_scan@@Base+0x504>
   18b3c:	ldr	r3, [pc, #1620]	; 19198 <test_scan@@Base+0xd10>
   18b40:	ldr	r2, [pc, #1620]	; 1919c <test_scan@@Base+0xd14>
   18b44:	ldr	r1, [pc, #1556]	; 19160 <test_scan@@Base+0xcd8>
   18b48:	ldr	r0, [pc, #1792]	; 19250 <test_scan@@Base+0xdc8>
   18b4c:	bl	12a8c <__assert_fail@plt>
   18b50:	ldr	r3, [pc, #1584]	; 19188 <test_scan@@Base+0xd00>
   18b54:	ldr	r2, [pc, #1584]	; 1918c <test_scan@@Base+0xd04>
   18b58:	ldr	r1, [pc, #1536]	; 19160 <test_scan@@Base+0xcd8>
   18b5c:	ldr	r0, [pc, #1536]	; 19164 <test_scan@@Base+0xcdc>
   18b60:	bl	12a8c <__assert_fail@plt>
   18b64:	ldr	r3, [pc, #1564]	; 19188 <test_scan@@Base+0xd00>
   18b68:	ldr	r2, [pc, #1564]	; 1918c <test_scan@@Base+0xd04>
   18b6c:	ldr	r1, [pc, #1516]	; 19160 <test_scan@@Base+0xcd8>
   18b70:	ldr	r0, [pc, #1560]	; 19190 <test_scan@@Base+0xd08>
   18b74:	bl	12a8c <__assert_fail@plt>
   18b78:	cmp	r7, #5
   18b7c:	bls	18c08 <test_scan@@Base+0x780>
   18b80:	sub	r6, r6, #1
   18b84:	cmn	r6, #1
   18b88:	beq	18c40 <test_scan@@Base+0x7b8>
   18b8c:	mov	r3, r8
   18b90:	cmp	r4, r6
   18b94:	bls	18b3c <test_scan@@Base+0x6b4>
   18b98:	sub	r8, r8, #4
   18b9c:	ldr	r1, [r3]
   18ba0:	adds	r2, r3, r1
   18ba4:	beq	18b50 <test_scan@@Base+0x6c8>
   18ba8:	ldr	r3, [r3, r1]
   18bac:	sub	r3, r2, r3
   18bb0:	ldrh	r1, [r3]
   18bb4:	cmp	r1, #11
   18bb8:	bls	18b64 <test_scan@@Base+0x6dc>
   18bbc:	ldrh	r3, [r3, #10]
   18bc0:	cmp	r3, #0
   18bc4:	beq	18b64 <test_scan@@Base+0x6dc>
   18bc8:	add	r0, r2, r3
   18bcc:	ldr	r3, [r2, r3]
   18bd0:	add	r3, r3, #4
   18bd4:	adds	r0, r0, r3
   18bd8:	beq	18b80 <test_scan@@Base+0x6f8>
   18bdc:	ldr	r7, [r0, #-4]
   18be0:	cmp	r7, #5
   18be4:	movcc	r2, r7
   18be8:	movcs	r2, #5
   18bec:	ldr	r1, [pc, #1456]	; 191a4 <test_scan@@Base+0xd1c>
   18bf0:	bl	12a74 <strncmp@plt>
   18bf4:	cmp	r0, #0
   18bf8:	bne	18b80 <test_scan@@Base+0x6f8>
   18bfc:	cmp	r7, #4
   18c00:	bhi	18b78 <test_scan@@Base+0x6f0>
   18c04:	b	18b80 <test_scan@@Base+0x6f8>
   18c08:	cmp	r6, #1
   18c0c:	bne	18c40 <test_scan@@Base+0x7b8>
   18c10:	ldr	r3, [pc, #1460]	; 191cc <test_scan@@Base+0xd44>
   18c14:	mvn	r2, #0
   18c18:	mov	r1, #2
   18c1c:	mov	r0, fp
   18c20:	bl	14258 <_start@@Base+0x17c0>
   18c24:	cmn	r0, #1
   18c28:	bne	18c50 <test_scan@@Base+0x7c8>
   18c2c:	mov	r7, r9
   18c30:	mov	r3, r5
   18c34:	mov	r6, #0
   18c38:	ldr	r8, [pc, #1424]	; 191d0 <test_scan@@Base+0xd48>
   18c3c:	b	18cb4 <test_scan@@Base+0x82c>
   18c40:	ldr	r0, [pc, #1376]	; 191a8 <test_scan@@Base+0xd20>
   18c44:	bl	129f0 <puts@plt>
   18c48:	mvn	r8, #0
   18c4c:	b	1898c <test_scan@@Base+0x504>
   18c50:	ldr	r0, [pc, #1364]	; 191ac <test_scan@@Base+0xd24>
   18c54:	bl	129f0 <puts@plt>
   18c58:	mvn	r8, #0
   18c5c:	b	1898c <test_scan@@Base+0x504>
   18c60:	ldr	r3, [pc, #1312]	; 19188 <test_scan@@Base+0xd00>
   18c64:	ldr	r2, [pc, #1312]	; 1918c <test_scan@@Base+0xd04>
   18c68:	ldr	r1, [pc, #1264]	; 19160 <test_scan@@Base+0xcd8>
   18c6c:	ldr	r0, [pc, #1264]	; 19164 <test_scan@@Base+0xcdc>
   18c70:	bl	12a8c <__assert_fail@plt>
   18c74:	add	r0, r3, r2
   18c78:	ldr	r3, [r3, r2]
   18c7c:	add	r3, r3, #4
   18c80:	mov	r1, r8
   18c84:	add	r0, r0, r3
   18c88:	bl	12990 <strcmp@plt>
   18c8c:	cmp	r0, #0
   18c90:	beq	18cfc <test_scan@@Base+0x874>
   18c94:	add	r6, r6, #1
   18c98:	cmp	r4, r6
   18c9c:	beq	18ce8 <test_scan@@Base+0x860>
   18ca0:	mov	r3, r7
   18ca4:	add	r7, r7, #4
   18ca8:	ldr	r2, [r3]
   18cac:	adds	r3, r3, r2
   18cb0:	beq	18c60 <test_scan@@Base+0x7d8>
   18cb4:	ldr	r2, [r3]
   18cb8:	sub	r2, r3, r2
   18cbc:	ldrh	r1, [r2]
   18cc0:	cmp	r1, #11
   18cc4:	bls	18cd4 <test_scan@@Base+0x84c>
   18cc8:	ldrh	r2, [r2, #10]
   18ccc:	cmp	r2, #0
   18cd0:	bne	18c74 <test_scan@@Base+0x7ec>
   18cd4:	ldr	r3, [pc, #1196]	; 19188 <test_scan@@Base+0xd00>
   18cd8:	ldr	r2, [pc, #1196]	; 1918c <test_scan@@Base+0xd04>
   18cdc:	ldr	r1, [pc, #1148]	; 19160 <test_scan@@Base+0xcd8>
   18ce0:	ldr	r0, [pc, #1192]	; 19190 <test_scan@@Base+0xd08>
   18ce4:	bl	12a8c <__assert_fail@plt>
   18ce8:	mov	r7, r9
   18cec:	mov	r3, r5
   18cf0:	mov	r6, #0
   18cf4:	ldr	r8, [pc, #1240]	; 191d4 <test_scan@@Base+0xd4c>
   18cf8:	b	18d74 <test_scan@@Base+0x8ec>
   18cfc:	cmn	r6, #1
   18d00:	moveq	r7, r9
   18d04:	moveq	r3, r5
   18d08:	moveq	r6, #0
   18d0c:	beq	18cf4 <test_scan@@Base+0x86c>
   18d10:	ldr	r0, [pc, #1176]	; 191b0 <test_scan@@Base+0xd28>
   18d14:	bl	129f0 <puts@plt>
   18d18:	mvn	r8, #0
   18d1c:	b	1898c <test_scan@@Base+0x504>
   18d20:	ldr	r3, [pc, #1120]	; 19188 <test_scan@@Base+0xd00>
   18d24:	ldr	r2, [pc, #1120]	; 1918c <test_scan@@Base+0xd04>
   18d28:	ldr	r1, [pc, #1072]	; 19160 <test_scan@@Base+0xcd8>
   18d2c:	ldr	r0, [pc, #1072]	; 19164 <test_scan@@Base+0xcdc>
   18d30:	bl	12a8c <__assert_fail@plt>
   18d34:	add	r0, r3, r2
   18d38:	ldr	r3, [r3, r2]
   18d3c:	add	r3, r3, #4
   18d40:	mov	r1, r8
   18d44:	add	r0, r0, r3
   18d48:	bl	12990 <strcmp@plt>
   18d4c:	cmp	r0, #0
   18d50:	beq	18da8 <test_scan@@Base+0x920>
   18d54:	add	r6, r6, #1
   18d58:	cmp	r4, r6
   18d5c:	beq	18db4 <test_scan@@Base+0x92c>
   18d60:	mov	r3, r7
   18d64:	add	r7, r7, #4
   18d68:	ldr	r2, [r3]
   18d6c:	adds	r3, r3, r2
   18d70:	beq	18d20 <test_scan@@Base+0x898>
   18d74:	ldr	r2, [r3]
   18d78:	sub	r2, r3, r2
   18d7c:	ldrh	r1, [r2]
   18d80:	cmp	r1, #11
   18d84:	bls	18d94 <test_scan@@Base+0x90c>
   18d88:	ldrh	r2, [r2, #10]
   18d8c:	cmp	r2, #0
   18d90:	bne	18d34 <test_scan@@Base+0x8ac>
   18d94:	ldr	r3, [pc, #1004]	; 19188 <test_scan@@Base+0xd00>
   18d98:	ldr	r2, [pc, #1004]	; 1918c <test_scan@@Base+0xd04>
   18d9c:	ldr	r1, [pc, #956]	; 19160 <test_scan@@Base+0xcd8>
   18da0:	ldr	r0, [pc, #1000]	; 19190 <test_scan@@Base+0xd08>
   18da4:	bl	12a8c <__assert_fail@plt>
   18da8:	cmp	r6, #0
   18dac:	ldreq	r7, [pc, #1060]	; 191d8 <test_scan@@Base+0xd50>
   18db0:	beq	18e18 <test_scan@@Base+0x990>
   18db4:	ldr	r0, [pc, #1016]	; 191b4 <test_scan@@Base+0xd2c>
   18db8:	bl	129f0 <puts@plt>
   18dbc:	mvn	r8, #0
   18dc0:	b	1898c <test_scan@@Base+0x504>
   18dc4:	ldr	r3, [pc, #956]	; 19188 <test_scan@@Base+0xd00>
   18dc8:	ldr	r2, [pc, #956]	; 1918c <test_scan@@Base+0xd04>
   18dcc:	ldr	r1, [pc, #908]	; 19160 <test_scan@@Base+0xcd8>
   18dd0:	ldr	r0, [pc, #908]	; 19164 <test_scan@@Base+0xcdc>
   18dd4:	bl	12a8c <__assert_fail@plt>
   18dd8:	add	r0, r5, r3
   18ddc:	ldr	r3, [r5, r3]
   18de0:	add	r3, r3, #4
   18de4:	mov	r1, r7
   18de8:	add	r0, r0, r3
   18dec:	bl	12990 <strcmp@plt>
   18df0:	cmp	r0, #0
   18df4:	beq	18e4c <test_scan@@Base+0x9c4>
   18df8:	add	r6, r6, #1
   18dfc:	cmp	r4, r6
   18e00:	beq	18e60 <test_scan@@Base+0x9d8>
   18e04:	mov	r5, r9
   18e08:	add	r9, r9, #4
   18e0c:	ldr	r3, [r5]
   18e10:	adds	r5, r5, r3
   18e14:	beq	18dc4 <test_scan@@Base+0x93c>
   18e18:	ldr	r3, [r5]
   18e1c:	sub	r3, r5, r3
   18e20:	ldrh	r2, [r3]
   18e24:	cmp	r2, #11
   18e28:	bls	18e38 <test_scan@@Base+0x9b0>
   18e2c:	ldrh	r3, [r3, #10]
   18e30:	cmp	r3, #0
   18e34:	bne	18dd8 <test_scan@@Base+0x950>
   18e38:	ldr	r3, [pc, #840]	; 19188 <test_scan@@Base+0xd00>
   18e3c:	ldr	r2, [pc, #840]	; 1918c <test_scan@@Base+0xd04>
   18e40:	ldr	r1, [pc, #792]	; 19160 <test_scan@@Base+0xcd8>
   18e44:	ldr	r0, [pc, #836]	; 19190 <test_scan@@Base+0xd08>
   18e48:	bl	12a8c <__assert_fail@plt>
   18e4c:	cmp	r6, #2
   18e50:	moveq	r6, sl
   18e54:	ldreq	r5, [sp, #16]
   18e58:	ldreq	r7, [pc, #888]	; 191d8 <test_scan@@Base+0xd50>
   18e5c:	beq	18ec0 <test_scan@@Base+0xa38>
   18e60:	ldr	r0, [pc, #848]	; 191b8 <test_scan@@Base+0xd30>
   18e64:	bl	129f0 <puts@plt>
   18e68:	mvn	r8, #0
   18e6c:	b	1898c <test_scan@@Base+0x504>
   18e70:	ldr	r3, [pc, #800]	; 19198 <test_scan@@Base+0xd10>
   18e74:	ldr	r2, [pc, #800]	; 1919c <test_scan@@Base+0xd14>
   18e78:	ldr	r1, [pc, #736]	; 19160 <test_scan@@Base+0xcd8>
   18e7c:	ldr	r0, [pc, #972]	; 19250 <test_scan@@Base+0xdc8>
   18e80:	bl	12a8c <__assert_fail@plt>
   18e84:	ldr	r3, [pc, #764]	; 19188 <test_scan@@Base+0xd00>
   18e88:	ldr	r2, [pc, #764]	; 1918c <test_scan@@Base+0xd04>
   18e8c:	ldr	r1, [pc, #716]	; 19160 <test_scan@@Base+0xcd8>
   18e90:	ldr	r0, [pc, #716]	; 19164 <test_scan@@Base+0xcdc>
   18e94:	bl	12a8c <__assert_fail@plt>
   18e98:	add	r0, r2, r3
   18e9c:	ldr	r3, [r2, r3]
   18ea0:	add	r3, r3, #4
   18ea4:	mov	r1, r7
   18ea8:	add	r0, r0, r3
   18eac:	bl	12990 <strcmp@plt>
   18eb0:	sub	r3, r5, #1
   18eb4:	cmp	r0, #0
   18eb8:	beq	18f18 <test_scan@@Base+0xa90>
   18ebc:	mov	r5, r3
   18ec0:	cmn	r5, #1
   18ec4:	beq	18f28 <test_scan@@Base+0xaa0>
   18ec8:	mov	r3, r6
   18ecc:	cmp	r4, r5
   18ed0:	bls	18e70 <test_scan@@Base+0x9e8>
   18ed4:	sub	r6, r6, #4
   18ed8:	ldr	r1, [r3]
   18edc:	adds	r2, r3, r1
   18ee0:	beq	18e84 <test_scan@@Base+0x9fc>
   18ee4:	ldr	r3, [r3, r1]
   18ee8:	sub	r3, r2, r3
   18eec:	ldrh	r1, [r3]
   18ef0:	cmp	r1, #11
   18ef4:	bls	18f04 <test_scan@@Base+0xa7c>
   18ef8:	ldrh	r3, [r3, #10]
   18efc:	cmp	r3, #0
   18f00:	bne	18e98 <test_scan@@Base+0xa10>
   18f04:	ldr	r3, [pc, #636]	; 19188 <test_scan@@Base+0xd00>
   18f08:	ldr	r2, [pc, #636]	; 1918c <test_scan@@Base+0xd04>
   18f0c:	ldr	r1, [pc, #588]	; 19160 <test_scan@@Base+0xcd8>
   18f10:	ldr	r0, [pc, #632]	; 19190 <test_scan@@Base+0xd08>
   18f14:	bl	12a8c <__assert_fail@plt>
   18f18:	cmp	r5, #4
   18f1c:	ldreq	r5, [sp, #16]
   18f20:	ldreq	r7, [pc, #660]	; 191bc <test_scan@@Base+0xd34>
   18f24:	beq	18f58 <test_scan@@Base+0xad0>
   18f28:	ldr	r0, [pc, #648]	; 191b8 <test_scan@@Base+0xd30>
   18f2c:	bl	129f0 <puts@plt>
   18f30:	mvn	r8, #0
   18f34:	b	1898c <test_scan@@Base+0x504>
   18f38:	ldr	r3, [pc, #600]	; 19198 <test_scan@@Base+0xd10>
   18f3c:	ldr	r2, [pc, #600]	; 1919c <test_scan@@Base+0xd14>
   18f40:	ldr	r1, [pc, #536]	; 19160 <test_scan@@Base+0xcd8>
   18f44:	ldr	r0, [pc, #772]	; 19250 <test_scan@@Base+0xdc8>
   18f48:	bl	12a8c <__assert_fail@plt>
   18f4c:	cmp	r6, #8
   18f50:	bls	18fb0 <test_scan@@Base+0xb28>
   18f54:	sub	r5, r5, #1
   18f58:	cmn	r5, #1
   18f5c:	beq	18fd4 <test_scan@@Base+0xb4c>
   18f60:	mov	r3, sl
   18f64:	cmp	r4, r5
   18f68:	bls	18f38 <test_scan@@Base+0xab0>
   18f6c:	sub	sl, sl, #4
   18f70:	ldr	r0, [r3]
   18f74:	add	r0, r3, r0
   18f78:	bl	12f18 <_start@@Base+0x480>
   18f7c:	cmp	r0, #0
   18f80:	beq	18f54 <test_scan@@Base+0xacc>
   18f84:	ldr	r6, [r0, #-4]
   18f88:	cmp	r6, #8
   18f8c:	movcc	r2, r6
   18f90:	movcs	r2, #8
   18f94:	mov	r1, r7
   18f98:	bl	12a74 <strncmp@plt>
   18f9c:	cmp	r0, #0
   18fa0:	bne	18f54 <test_scan@@Base+0xacc>
   18fa4:	cmp	r6, #7
   18fa8:	bhi	18f4c <test_scan@@Base+0xac4>
   18fac:	b	18f54 <test_scan@@Base+0xacc>
   18fb0:	cmp	r5, #4
   18fb4:	bne	18fd4 <test_scan@@Base+0xb4c>
   18fb8:	cmp	r4, #3
   18fbc:	movcc	r3, r4
   18fc0:	movcs	r3, #3
   18fc4:	sub	r6, r3, #-1073741823	; 0xc0000001
   18fc8:	add	r6, fp, r6, lsl #2
   18fcc:	ldr	r8, [pc, #488]	; 191bc <test_scan@@Base+0xd34>
   18fd0:	b	19004 <test_scan@@Base+0xb7c>
   18fd4:	ldr	r0, [pc, #484]	; 191c0 <test_scan@@Base+0xd38>
   18fd8:	bl	129f0 <puts@plt>
   18fdc:	mvn	r8, #0
   18fe0:	b	1898c <test_scan@@Base+0x504>
   18fe4:	ldr	r3, [pc, #428]	; 19198 <test_scan@@Base+0xd10>
   18fe8:	ldr	r2, [pc, #428]	; 1919c <test_scan@@Base+0xd14>
   18fec:	ldr	r1, [pc, #364]	; 19160 <test_scan@@Base+0xcd8>
   18ff0:	ldr	r0, [pc, #600]	; 19250 <test_scan@@Base+0xdc8>
   18ff4:	bl	12a8c <__assert_fail@plt>
   18ff8:	mov	r3, r7
   18ffc:	cmp	r5, #8
   19000:	bls	19074 <test_scan@@Base+0xbec>
   19004:	sub	r7, r3, #1
   19008:	cmp	r3, #1
   1900c:	bls	190bc <test_scan@@Base+0xc34>
   19010:	mov	r3, r6
   19014:	cmp	r4, r7
   19018:	bls	18fe4 <test_scan@@Base+0xb5c>
   1901c:	sub	r6, r6, #4
   19020:	ldr	r0, [r3]
   19024:	add	r0, r3, r0
   19028:	bl	12f18 <_start@@Base+0x480>
   1902c:	cmp	r0, #0
   19030:	beq	19064 <test_scan@@Base+0xbdc>
   19034:	ldr	r5, [r0, #-4]
   19038:	cmp	r5, #8
   1903c:	movcc	r2, r5
   19040:	movcs	r2, #8
   19044:	mov	r1, r8
   19048:	bl	12a74 <strncmp@plt>
   1904c:	cmp	r0, #0
   19050:	bne	1906c <test_scan@@Base+0xbe4>
   19054:	cmp	r5, #7
   19058:	bhi	18ff8 <test_scan@@Base+0xb70>
   1905c:	mov	r3, r7
   19060:	b	19004 <test_scan@@Base+0xb7c>
   19064:	mov	r3, r7
   19068:	b	19004 <test_scan@@Base+0xb7c>
   1906c:	mov	r3, r7
   19070:	b	19004 <test_scan@@Base+0xb7c>
   19074:	cmp	r7, #2
   19078:	bne	190bc <test_scan@@Base+0xc34>
   1907c:	ldr	r3, [pc, #340]	; 191d8 <test_scan@@Base+0xd50>
   19080:	mvn	r2, #0
   19084:	mov	r1, #2
   19088:	mov	r0, fp
   1908c:	bl	14258 <_start@@Base+0x17c0>
   19090:	mov	r6, r0
   19094:	cmp	r0, #2
   19098:	bne	190cc <test_scan@@Base+0xc44>
   1909c:	cmp	r4, #2
   190a0:	addhi	r7, fp, #8
   190a4:	ldrhi	r9, [pc, #272]	; 191bc <test_scan@@Base+0xd34>
   190a8:	bhi	190f0 <test_scan@@Base+0xc68>
   190ac:	ldr	r0, [pc, #272]	; 191c4 <test_scan@@Base+0xd3c>
   190b0:	bl	129f0 <puts@plt>
   190b4:	mvn	r8, #0
   190b8:	b	1898c <test_scan@@Base+0x504>
   190bc:	ldr	r0, [pc, #252]	; 191c0 <test_scan@@Base+0xd38>
   190c0:	bl	129f0 <puts@plt>
   190c4:	mvn	r8, #0
   190c8:	b	1898c <test_scan@@Base+0x504>
   190cc:	ldr	r0, [pc, #240]	; 191c4 <test_scan@@Base+0xd3c>
   190d0:	bl	129f0 <puts@plt>
   190d4:	mvn	r8, #0
   190d8:	b	1898c <test_scan@@Base+0x504>
   190dc:	cmp	r5, #8
   190e0:	bls	19260 <test_scan@@Base+0xdd8>
   190e4:	add	r6, r6, #1
   190e8:	cmp	r4, r6
   190ec:	beq	190ac <test_scan@@Base+0xc24>
   190f0:	mov	r3, r7
   190f4:	add	r7, r7, #4
   190f8:	ldr	r0, [r3]
   190fc:	add	r0, r3, r0
   19100:	bl	12f18 <_start@@Base+0x480>
   19104:	cmp	r0, #0
   19108:	beq	190e4 <test_scan@@Base+0xc5c>
   1910c:	ldr	r5, [r0, #-4]
   19110:	cmp	r5, #8
   19114:	movcc	r2, r5
   19118:	movcs	r2, #8
   1911c:	mov	r1, r9
   19120:	bl	12a74 <strncmp@plt>
   19124:	cmp	r0, #0
   19128:	bne	190e4 <test_scan@@Base+0xc5c>
   1912c:	cmp	r5, #7
   19130:	bhi	190dc <test_scan@@Base+0xc54>
   19134:	b	190e4 <test_scan@@Base+0xc5c>
   19138:	andeq	r3, r2, r4, lsl #19
   1913c:	andeq	r4, r2, r0, asr r0
   19140:	ldrdeq	r4, [r2], -ip
   19144:	andeq	r3, r2, r4, ror #16
   19148:	movtpl	r4, #61261	; 0xef4d
   1914c:	andeq	r3, r2, r8, ror #16
   19150:	andeq	r4, r2, r8, asr r0
   19154:	andeq	r4, r2, r8, ror #3
   19158:	andeq	r3, r2, r4, ror #17
   1915c:	andeq	r0, r0, r7, asr #5
   19160:	andeq	r3, r2, ip, ror sp
   19164:	andeq	r3, r2, r0, ror #27
   19168:	andeq	r3, r2, ip, lsl #19
   1916c:	andeq	r0, r0, r9, lsl r5
   19170:	ldrdeq	r4, [r2], -ip
   19174:	strheq	r5, [r2], -r0
   19178:	andeq	r0, r0, fp, lsl r5
   1917c:	andeq	r5, r2, r4, asr #5
   19180:	andeq	r0, r0, sp, lsl r5
   19184:	andeq	r5, r2, r8, asr #5
   19188:	andeq	r3, r2, r8, lsr #14
   1918c:			; <UNDEFINED> instruction: 0x000002bb
   19190:	andeq	r3, r2, r8, lsr #29
   19194:	ldrdeq	r5, [r2], -r0
   19198:	andeq	r3, r2, r8, asr #13
   1919c:			; <UNDEFINED> instruction: 0x000002b5
   191a0:	strdeq	r5, [r2], -r0
   191a4:	andeq	r5, r2, ip, asr #4
   191a8:	andeq	r5, r2, r0, lsl r3
   191ac:	andeq	r5, r2, r8, lsr r3
   191b0:	andeq	r5, r2, r0, lsl #5
   191b4:			; <UNDEFINED> instruction: 0x000252b0
   191b8:	andeq	r5, r2, r0, asr #7
   191bc:	andeq	r5, r2, r4, ror #6
   191c0:	andeq	r5, r2, r0, ror r3
   191c4:	andeq	r5, r2, ip, lsl #7
   191c8:	muleq	r2, r0, r0
   191cc:	andeq	r4, r2, r8, lsr #19
   191d0:	andeq	r5, r2, r8, ror r2
   191d4:	andeq	r4, r2, r4, asr #18
   191d8:	ldrdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   191dc:			; <UNDEFINED> instruction: 0x000253b8
   191e0:	ldrdeq	r5, [r2], -r4
   191e4:	strdeq	r5, [r2], -r8
   191e8:	andeq	r5, r2, ip, lsl r4
   191ec:	andeq	r5, r2, r0, asr #8
   191f0:	andeq	r5, r2, r8, ror #8
   191f4:	muleq	r2, r4, r4
   191f8:	andeq	r5, r2, r4, asr #9
   191fc:	strdeq	r5, [r2], -r0
   19200:	andeq	r5, r2, r8, lsl r5
   19204:	andeq	r5, r2, r0, asr #10
   19208:	andeq	r5, r2, ip, ror #10
   1920c:	andeq	r5, r2, ip, lsl #11
   19210:	andeq	r5, r2, ip, lsr #11
   19214:	ldrdeq	r5, [r2], -r4
   19218:	andeq	r5, r2, r0, lsl #12
   1921c:	andeq	r5, r2, ip, lsl r6
   19220:	andeq	r5, r2, r8, lsr r6
   19224:	andeq	r5, r2, r4, asr r6
   19228:	andeq	r5, r2, r4, ror r6
   1922c:	andeq	r5, r2, r0, lsr #13
   19230:	ldrdeq	r5, [r2], -r0
   19234:	andeq	r5, r2, ip, lsr r7
   19238:	andeq	r5, r2, r8, lsl #14
   1923c:	andeq	r5, r2, r8, ror #14
   19240:	andeq	r5, r2, r4, lsr #15
   19244:	andeq	r5, r2, r0, ror #15
   19248:	muleq	r2, r8, r9
   1924c:	andeq	r0, r0, fp, lsl #3
   19250:	andeq	r3, r2, r0, ror lr
   19254:	andeq	r5, r2, r4, lsl r8
   19258:	andeq	r3, r2, r8, lsl #28
   1925c:	andeq	r4, r2, ip, asr #21
   19260:	mov	r8, r0
   19264:	cmp	r6, #2
   19268:	bne	190ac <test_scan@@Base+0xc24>
   1926c:	ldr	r3, [pc, #-156]	; 191d8 <test_scan@@Base+0xd50>
   19270:	mvn	r2, #0
   19274:	mov	r1, #3
   19278:	mov	r0, fp
   1927c:	bl	14258 <_start@@Base+0x17c0>
   19280:	mov	r5, r0
   19284:	cmp	r0, #4
   19288:	bne	19630 <test_scan@@Base+0x11a8>
   1928c:	ldr	r3, [pc, #-196]	; 191d0 <test_scan@@Base+0xd48>
   19290:	mov	r2, #3
   19294:	mov	r1, #1
   19298:	mov	r0, fp
   1929c:	bl	14258 <_start@@Base+0x17c0>
   192a0:	cmn	r0, #1
   192a4:	bne	19640 <test_scan@@Base+0x11b8>
   192a8:	ldr	r3, [pc, #-220]	; 191d4 <test_scan@@Base+0xd4c>
   192ac:	mov	r2, #3
   192b0:	mov	r1, #1
   192b4:	mov	r0, fp
   192b8:	bl	14258 <_start@@Base+0x17c0>
   192bc:	cmn	r0, #1
   192c0:	bne	19650 <test_scan@@Base+0x11c8>
   192c4:	ldr	r3, [pc, #-256]	; 191cc <test_scan@@Base+0xd44>
   192c8:	mov	r2, #3
   192cc:	mov	r1, #1
   192d0:	mov	r0, fp
   192d4:	bl	14258 <_start@@Base+0x17c0>
   192d8:	cmp	r0, #1
   192dc:	bne	19660 <test_scan@@Base+0x11d8>
   192e0:	ldr	r3, [pc, #-272]	; 191d8 <test_scan@@Base+0xd50>
   192e4:	mov	r2, #3
   192e8:	mov	r1, #1
   192ec:	mov	r0, fp
   192f0:	bl	14258 <_start@@Base+0x17c0>
   192f4:	cmp	r0, #2
   192f8:	bne	19670 <test_scan@@Base+0x11e8>
   192fc:	ldr	r3, [pc, #-316]	; 191c8 <test_scan@@Base+0xd40>
   19300:	mov	r2, #3
   19304:	mov	r1, #1
   19308:	mov	r0, fp
   1930c:	bl	14258 <_start@@Base+0x17c0>
   19310:	cmn	r0, #1
   19314:	bne	19680 <test_scan@@Base+0x11f8>
   19318:	ldr	r3, [pc, #-336]	; 191d0 <test_scan@@Base+0xd48>
   1931c:	mov	r2, #3
   19320:	mov	r1, #1
   19324:	mov	r0, fp
   19328:	bl	14158 <_start@@Base+0x16c0>
   1932c:	cmn	r0, #1
   19330:	bne	19690 <test_scan@@Base+0x1208>
   19334:	ldr	r3, [pc, #-360]	; 191d4 <test_scan@@Base+0xd4c>
   19338:	mov	r2, #3
   1933c:	mov	r1, #1
   19340:	mov	r0, fp
   19344:	bl	14158 <_start@@Base+0x16c0>
   19348:	cmn	r0, #1
   1934c:	bne	196a0 <test_scan@@Base+0x1218>
   19350:	ldr	r3, [pc, #-396]	; 191cc <test_scan@@Base+0xd44>
   19354:	mov	r2, #3
   19358:	mov	r1, #1
   1935c:	mov	r0, fp
   19360:	bl	14158 <_start@@Base+0x16c0>
   19364:	cmp	r0, #1
   19368:	bne	196b0 <test_scan@@Base+0x1228>
   1936c:	ldr	r3, [pc, #-412]	; 191d8 <test_scan@@Base+0xd50>
   19370:	mov	r2, #3
   19374:	mov	r1, #1
   19378:	mov	r0, fp
   1937c:	bl	14158 <_start@@Base+0x16c0>
   19380:	cmp	r0, #2
   19384:	bne	196c0 <test_scan@@Base+0x1238>
   19388:	ldr	r3, [pc, #-456]	; 191c8 <test_scan@@Base+0xd40>
   1938c:	mov	r2, #3
   19390:	mov	r1, #1
   19394:	mov	r0, fp
   19398:	bl	14158 <_start@@Base+0x16c0>
   1939c:	cmn	r0, #1
   193a0:	bne	196d0 <test_scan@@Base+0x1248>
   193a4:	ldr	r3, [pc, #-472]	; 191d4 <test_scan@@Base+0xd4c>
   193a8:	mov	r2, #0
   193ac:	mov	r1, r2
   193b0:	mov	r0, fp
   193b4:	bl	14258 <_start@@Base+0x17c0>
   193b8:	cmn	r0, #1
   193bc:	bne	196e0 <test_scan@@Base+0x1258>
   193c0:	ldr	r3, [pc, #-508]	; 191cc <test_scan@@Base+0xd44>
   193c4:	mov	r2, #0
   193c8:	mov	r1, r2
   193cc:	mov	r0, fp
   193d0:	bl	14258 <_start@@Base+0x17c0>
   193d4:	cmn	r0, #1
   193d8:	bne	196f0 <test_scan@@Base+0x1268>
   193dc:	ldr	r3, [pc, #-536]	; 191cc <test_scan@@Base+0xd44>
   193e0:	mov	r2, #1
   193e4:	mov	r1, r2
   193e8:	mov	r0, fp
   193ec:	bl	14258 <_start@@Base+0x17c0>
   193f0:	cmn	r0, #1
   193f4:	bne	19700 <test_scan@@Base+0x1278>
   193f8:	ldr	r3, [pc, #-556]	; 191d4 <test_scan@@Base+0xd4c>
   193fc:	mvn	r2, #0
   19400:	mov	r1, r4
   19404:	mov	r0, fp
   19408:	bl	14258 <_start@@Base+0x17c0>
   1940c:	cmn	r0, #1
   19410:	bne	19710 <test_scan@@Base+0x1288>
   19414:	ldr	r3, [pc, #-584]	; 191d4 <test_scan@@Base+0xd4c>
   19418:	mov	r2, #0
   1941c:	mov	r1, r2
   19420:	mov	r0, fp
   19424:	bl	14158 <_start@@Base+0x16c0>
   19428:	cmn	r0, #1
   1942c:	bne	19720 <test_scan@@Base+0x1298>
   19430:	ldr	r3, [pc, #-620]	; 191cc <test_scan@@Base+0xd44>
   19434:	mov	r2, #0
   19438:	mov	r1, r2
   1943c:	mov	r0, fp
   19440:	bl	14158 <_start@@Base+0x16c0>
   19444:	cmn	r0, #1
   19448:	bne	19730 <test_scan@@Base+0x12a8>
   1944c:	ldr	r3, [pc, #-648]	; 191cc <test_scan@@Base+0xd44>
   19450:	mov	r2, #1
   19454:	mov	r1, r2
   19458:	mov	r0, fp
   1945c:	bl	14158 <_start@@Base+0x16c0>
   19460:	cmn	r0, #1
   19464:	bne	19740 <test_scan@@Base+0x12b8>
   19468:	ldr	r3, [pc, #-668]	; 191d4 <test_scan@@Base+0xd4c>
   1946c:	mvn	r2, #0
   19470:	mov	r1, r4
   19474:	mov	r0, fp
   19478:	bl	14158 <_start@@Base+0x16c0>
   1947c:	cmn	r0, #1
   19480:	bne	19750 <test_scan@@Base+0x12c8>
   19484:	ldr	r1, [pc, #-704]	; 191cc <test_scan@@Base+0xd44>
   19488:	mov	r0, fp
   1948c:	bl	13fb0 <_start@@Base+0x1518>
   19490:	cmp	r0, #1
   19494:	bne	19760 <test_scan@@Base+0x12d8>
   19498:	ldr	r1, [pc, #-720]	; 191d0 <test_scan@@Base+0xd48>
   1949c:	mov	r0, fp
   194a0:	bl	13fb0 <_start@@Base+0x1518>
   194a4:	cmp	r0, #0
   194a8:	bne	19770 <test_scan@@Base+0x12e8>
   194ac:	ldr	r1, [pc, #-736]	; 191d4 <test_scan@@Base+0xd4c>
   194b0:	mov	r0, fp
   194b4:	bl	13fb0 <_start@@Base+0x1518>
   194b8:	mov	r6, r0
   194bc:	cmp	r0, #1
   194c0:	bne	19780 <test_scan@@Base+0x12f8>
   194c4:	ldr	r1, [pc, #-756]	; 191d8 <test_scan@@Base+0xd50>
   194c8:	mov	r0, fp
   194cc:	bl	13fb0 <_start@@Base+0x1518>
   194d0:	cmp	r0, #2
   194d4:	bne	19790 <test_scan@@Base+0x1308>
   194d8:	mov	r1, #6
   194dc:	ldr	r0, [sp, #20]
   194e0:	bl	13f6c <_start@@Base+0x14d4>
   194e4:	subs	sl, r0, #0
   194e8:	bne	197a0 <test_scan@@Base+0x1318>
   194ec:	mov	r1, #1
   194f0:	ldr	r7, [sp, #20]
   194f4:	mov	r0, r7
   194f8:	bl	13f6c <_start@@Base+0x14d4>
   194fc:	cmp	r0, #2
   19500:	bne	197b0 <test_scan@@Base+0x1328>
   19504:	mov	r2, r7
   19508:	ldr	r7, [r7, #-4]
   1950c:	cmp	r7, #3
   19510:	bls	19548 <test_scan@@Base+0x10c0>
   19514:	ldrb	r3, [r2, #3]
   19518:	cmp	r3, #1
   1951c:	beq	197c0 <test_scan@@Base+0x1338>
   19520:	add	r2, r2, #3
   19524:	mov	r3, #3
   19528:	add	r3, r3, #1
   1952c:	cmp	r3, r7
   19530:	beq	19548 <test_scan@@Base+0x10c0>
   19534:	ldrb	r1, [r2, #1]!
   19538:	cmp	r1, #1
   1953c:	bne	19528 <test_scan@@Base+0x10a0>
   19540:	cmn	r3, #1
   19544:	bne	197c0 <test_scan@@Base+0x1338>
   19548:	mov	r1, #5
   1954c:	ldr	r0, [sp, #20]
   19550:	bl	13f6c <_start@@Base+0x14d4>
   19554:	cmn	r0, #1
   19558:	bne	197d0 <test_scan@@Base+0x1348>
   1955c:	mov	r1, #2
   19560:	ldr	r0, [sp, #20]
   19564:	bl	13f6c <_start@@Base+0x14d4>
   19568:	cmp	r0, #6
   1956c:	bne	197e0 <test_scan@@Base+0x1358>
   19570:	mov	r1, #3
   19574:	ldr	r9, [sp, #20]
   19578:	mov	r0, r9
   1957c:	bl	13f6c <_start@@Base+0x14d4>
   19580:	cmp	r0, #3
   19584:	bne	197f0 <test_scan@@Base+0x1368>
   19588:	cmp	r7, #3
   1958c:	bls	19800 <test_scan@@Base+0x1378>
   19590:	ldrb	r3, [r9, #3]
   19594:	cmp	r3, #3
   19598:	beq	195c0 <test_scan@@Base+0x1138>
   1959c:	add	r3, r9, #3
   195a0:	add	r0, r0, #1
   195a4:	cmp	r0, r7
   195a8:	beq	19800 <test_scan@@Base+0x1378>
   195ac:	ldrb	r2, [r3, #1]!
   195b0:	cmp	r2, #3
   195b4:	bne	195a0 <test_scan@@Base+0x1118>
   195b8:	cmp	r0, #3
   195bc:	bne	19800 <test_scan@@Base+0x1378>
   195c0:	cmp	r7, #4
   195c4:	bls	19810 <test_scan@@Base+0x1388>
   195c8:	ldr	r2, [sp, #20]
   195cc:	ldrb	r3, [r2, #4]
   195d0:	cmp	r3, #3
   195d4:	beq	19810 <test_scan@@Base+0x1388>
   195d8:	add	r3, r2, #4
   195dc:	add	r5, r5, #1
   195e0:	cmp	r5, r7
   195e4:	beq	19810 <test_scan@@Base+0x1388>
   195e8:	ldrb	r2, [r3, #1]!
   195ec:	cmp	r2, #3
   195f0:	bne	195dc <test_scan@@Base+0x1154>
   195f4:	cmp	r5, #5
   195f8:	bne	19810 <test_scan@@Base+0x1388>
   195fc:	sub	r3, r7, #1
   19600:	ldr	r2, [sp, #20]
   19604:	add	r2, r2, r7
   19608:	cmn	r3, #1
   1960c:	beq	199c0 <test_scan@@Base+0x1538>
   19610:	cmp	r3, r7
   19614:	bcs	19820 <test_scan@@Base+0x1398>
   19618:	sub	r1, r3, #1
   1961c:	ldrb	r0, [r2, #-1]!
   19620:	cmp	r0, #3
   19624:	beq	19834 <test_scan@@Base+0x13ac>
   19628:	mov	r3, r1
   1962c:	b	19608 <test_scan@@Base+0x1180>
   19630:	ldr	r0, [pc, #-1116]	; 191dc <test_scan@@Base+0xd54>
   19634:	bl	129f0 <puts@plt>
   19638:	mvn	r8, #0
   1963c:	b	1898c <test_scan@@Base+0x504>
   19640:	ldr	r0, [pc, #-1128]	; 191e0 <test_scan@@Base+0xd58>
   19644:	bl	129f0 <puts@plt>
   19648:	mvn	r8, #0
   1964c:	b	1898c <test_scan@@Base+0x504>
   19650:	ldr	r0, [pc, #-1140]	; 191e4 <test_scan@@Base+0xd5c>
   19654:	bl	129f0 <puts@plt>
   19658:	mvn	r8, #0
   1965c:	b	1898c <test_scan@@Base+0x504>
   19660:	ldr	r0, [pc, #-1152]	; 191e8 <test_scan@@Base+0xd60>
   19664:	bl	129f0 <puts@plt>
   19668:	mvn	r8, #0
   1966c:	b	1898c <test_scan@@Base+0x504>
   19670:	ldr	r0, [pc, #-1164]	; 191ec <test_scan@@Base+0xd64>
   19674:	bl	129f0 <puts@plt>
   19678:	mvn	r8, #0
   1967c:	b	1898c <test_scan@@Base+0x504>
   19680:	ldr	r0, [pc, #-1176]	; 191f0 <test_scan@@Base+0xd68>
   19684:	bl	129f0 <puts@plt>
   19688:	mvn	r8, #0
   1968c:	b	1898c <test_scan@@Base+0x504>
   19690:	ldr	r0, [pc, #-1188]	; 191f4 <test_scan@@Base+0xd6c>
   19694:	bl	129f0 <puts@plt>
   19698:	mvn	r8, #0
   1969c:	b	1898c <test_scan@@Base+0x504>
   196a0:	ldr	r0, [pc, #-1200]	; 191f8 <test_scan@@Base+0xd70>
   196a4:	bl	129f0 <puts@plt>
   196a8:	mvn	r8, #0
   196ac:	b	1898c <test_scan@@Base+0x504>
   196b0:	ldr	r0, [pc, #-1212]	; 191fc <test_scan@@Base+0xd74>
   196b4:	bl	129f0 <puts@plt>
   196b8:	mvn	r8, #0
   196bc:	b	1898c <test_scan@@Base+0x504>
   196c0:	ldr	r0, [pc, #-1224]	; 19200 <test_scan@@Base+0xd78>
   196c4:	bl	129f0 <puts@plt>
   196c8:	mvn	r8, #0
   196cc:	b	1898c <test_scan@@Base+0x504>
   196d0:	ldr	r0, [pc, #-1236]	; 19204 <test_scan@@Base+0xd7c>
   196d4:	bl	129f0 <puts@plt>
   196d8:	mvn	r8, #0
   196dc:	b	1898c <test_scan@@Base+0x504>
   196e0:	ldr	r0, [pc, #-1248]	; 19208 <test_scan@@Base+0xd80>
   196e4:	bl	129f0 <puts@plt>
   196e8:	mvn	r8, #0
   196ec:	b	1898c <test_scan@@Base+0x504>
   196f0:	ldr	r0, [pc, #-1260]	; 1920c <test_scan@@Base+0xd84>
   196f4:	bl	129f0 <puts@plt>
   196f8:	mvn	r8, #0
   196fc:	b	1898c <test_scan@@Base+0x504>
   19700:	ldr	r0, [pc, #-1272]	; 19210 <test_scan@@Base+0xd88>
   19704:	bl	129f0 <puts@plt>
   19708:	mvn	r8, #0
   1970c:	b	1898c <test_scan@@Base+0x504>
   19710:	ldr	r0, [pc, #-1284]	; 19214 <test_scan@@Base+0xd8c>
   19714:	bl	129f0 <puts@plt>
   19718:	mvn	r8, #0
   1971c:	b	1898c <test_scan@@Base+0x504>
   19720:	ldr	r0, [pc, #-1312]	; 19208 <test_scan@@Base+0xd80>
   19724:	bl	129f0 <puts@plt>
   19728:	mvn	r8, #0
   1972c:	b	1898c <test_scan@@Base+0x504>
   19730:	ldr	r0, [pc, #-1324]	; 1920c <test_scan@@Base+0xd84>
   19734:	bl	129f0 <puts@plt>
   19738:	mvn	r8, #0
   1973c:	b	1898c <test_scan@@Base+0x504>
   19740:	ldr	r0, [pc, #-1336]	; 19210 <test_scan@@Base+0xd88>
   19744:	bl	129f0 <puts@plt>
   19748:	mvn	r8, #0
   1974c:	b	1898c <test_scan@@Base+0x504>
   19750:	ldr	r0, [pc, #-1348]	; 19214 <test_scan@@Base+0xd8c>
   19754:	bl	129f0 <puts@plt>
   19758:	mvn	r8, #0
   1975c:	b	1898c <test_scan@@Base+0x504>
   19760:	ldr	r0, [pc, #-1360]	; 19218 <test_scan@@Base+0xd90>
   19764:	bl	129f0 <puts@plt>
   19768:	mvn	r8, #0
   1976c:	b	1898c <test_scan@@Base+0x504>
   19770:	ldr	r0, [pc, #-1372]	; 1921c <test_scan@@Base+0xd94>
   19774:	bl	129f0 <puts@plt>
   19778:	mvn	r8, #0
   1977c:	b	1898c <test_scan@@Base+0x504>
   19780:	ldr	r0, [pc, #-1384]	; 19220 <test_scan@@Base+0xd98>
   19784:	bl	129f0 <puts@plt>
   19788:	mvn	r8, #0
   1978c:	b	1898c <test_scan@@Base+0x504>
   19790:	ldr	r0, [pc, #-1396]	; 19224 <test_scan@@Base+0xd9c>
   19794:	bl	129f0 <puts@plt>
   19798:	mvn	r8, #0
   1979c:	b	1898c <test_scan@@Base+0x504>
   197a0:	ldr	r0, [pc, #-1408]	; 19228 <test_scan@@Base+0xda0>
   197a4:	bl	129f0 <puts@plt>
   197a8:	mvn	r8, #0
   197ac:	b	1898c <test_scan@@Base+0x504>
   197b0:	ldr	r0, [pc, #-1420]	; 1922c <test_scan@@Base+0xda4>
   197b4:	bl	129f0 <puts@plt>
   197b8:	mvn	r8, #0
   197bc:	b	1898c <test_scan@@Base+0x504>
   197c0:	ldr	r0, [pc, #-1432]	; 19230 <test_scan@@Base+0xda8>
   197c4:	bl	129f0 <puts@plt>
   197c8:	mvn	r8, #0
   197cc:	b	1898c <test_scan@@Base+0x504>
   197d0:	ldr	r0, [pc, #-1440]	; 19238 <test_scan@@Base+0xdb0>
   197d4:	bl	129f0 <puts@plt>
   197d8:	mvn	r8, #0
   197dc:	b	1898c <test_scan@@Base+0x504>
   197e0:	ldr	r0, [pc, #-1460]	; 19234 <test_scan@@Base+0xdac>
   197e4:	bl	129f0 <puts@plt>
   197e8:	mvn	r8, #0
   197ec:	b	1898c <test_scan@@Base+0x504>
   197f0:	ldr	r0, [pc, #-1472]	; 19238 <test_scan@@Base+0xdb0>
   197f4:	bl	129f0 <puts@plt>
   197f8:	mvn	r8, #0
   197fc:	b	1898c <test_scan@@Base+0x504>
   19800:	ldr	r0, [pc, #-1484]	; 1923c <test_scan@@Base+0xdb4>
   19804:	bl	129f0 <puts@plt>
   19808:	mvn	r8, #0
   1980c:	b	1898c <test_scan@@Base+0x504>
   19810:	ldr	r0, [pc, #-1496]	; 19240 <test_scan@@Base+0xdb8>
   19814:	bl	129f0 <puts@plt>
   19818:	mvn	r8, #0
   1981c:	b	1898c <test_scan@@Base+0x504>
   19820:	ldr	r3, [pc, #-1504]	; 19248 <test_scan@@Base+0xdc0>
   19824:	ldr	r2, [pc, #-1504]	; 1924c <test_scan@@Base+0xdc4>
   19828:	ldr	r1, [pc, #-1496]	; 19258 <test_scan@@Base+0xdd0>
   1982c:	ldr	r0, [pc, #-1508]	; 19250 <test_scan@@Base+0xdc8>
   19830:	bl	12a8c <__assert_fail@plt>
   19834:	cmp	r3, #5
   19838:	bne	199c0 <test_scan@@Base+0x1538>
   1983c:	cmp	r7, #4
   19840:	movcc	r2, r7
   19844:	movcs	r2, #4
   19848:	ldr	r3, [sp, #20]
   1984c:	add	r3, r3, r2
   19850:	sub	r1, r2, #1
   19854:	cmp	r2, #1
   19858:	bls	199e4 <test_scan@@Base+0x155c>
   1985c:	cmp	r1, r7
   19860:	bcs	199d0 <test_scan@@Base+0x1548>
   19864:	mov	r2, r1
   19868:	ldrb	r0, [r3, #-1]!
   1986c:	cmp	r0, #3
   19870:	bne	19850 <test_scan@@Base+0x13c8>
   19874:	cmp	r1, #3
   19878:	bne	199e4 <test_scan@@Base+0x155c>
   1987c:	ldr	r3, [sp, #12]
   19880:	ldr	r5, [r3, #-4]
   19884:	cmp	r5, #0
   19888:	movne	r7, sl
   1988c:	ldrne	r9, [pc, #-1592]	; 1925c <test_scan@@Base+0xdd4>
   19890:	beq	19954 <test_scan@@Base+0x14cc>
   19894:	mov	r1, r7
   19898:	ldr	r0, [sp, #12]
   1989c:	bl	12dc0 <_start@@Base+0x328>
   198a0:	mov	r1, r9
   198a4:	bl	12990 <strcmp@plt>
   198a8:	cmp	r0, #0
   198ac:	beq	199f4 <test_scan@@Base+0x156c>
   198b0:	add	r7, r7, #1
   198b4:	cmp	r7, r5
   198b8:	bne	19894 <test_scan@@Base+0x140c>
   198bc:	mov	r7, sl
   198c0:	ldr	r9, [pc, #-1644]	; 1925c <test_scan@@Base+0xdd4>
   198c4:	mov	r1, r7
   198c8:	ldr	r0, [sp, #12]
   198cc:	bl	12dc0 <_start@@Base+0x328>
   198d0:	mov	r1, r9
   198d4:	bl	12990 <strcmp@plt>
   198d8:	cmp	r0, #0
   198dc:	beq	199fc <test_scan@@Base+0x1574>
   198e0:	add	r7, r7, #1
   198e4:	cmp	r7, r5
   198e8:	bne	198c4 <test_scan@@Base+0x143c>
   198ec:	mov	r7, sl
   198f0:	ldr	r9, [pc, #-1692]	; 1925c <test_scan@@Base+0xdd4>
   198f4:	mov	r1, r7
   198f8:	ldr	r0, [sp, #12]
   198fc:	bl	12dc0 <_start@@Base+0x328>
   19900:	mov	r2, #4
   19904:	mov	r1, r9
   19908:	bl	13e98 <_start@@Base+0x1400>
   1990c:	cmp	r0, #0
   19910:	beq	19a04 <test_scan@@Base+0x157c>
   19914:	add	r7, r7, #1
   19918:	cmp	r7, r5
   1991c:	bne	198f4 <test_scan@@Base+0x146c>
   19920:	mov	r7, sl
   19924:	ldr	r9, [pc, #-1744]	; 1925c <test_scan@@Base+0xdd4>
   19928:	mov	r1, r7
   1992c:	ldr	r0, [sp, #12]
   19930:	bl	12dc0 <_start@@Base+0x328>
   19934:	mov	r2, #4
   19938:	mov	r1, r9
   1993c:	bl	13e98 <_start@@Base+0x1400>
   19940:	cmp	r0, #0
   19944:	beq	19954 <test_scan@@Base+0x14cc>
   19948:	add	r7, r7, #1
   1994c:	cmp	r7, r5
   19950:	bne	19928 <test_scan@@Base+0x14a0>
   19954:	sub	r7, r5, #1
   19958:	ldr	r9, [pc, #-1796]	; 1925c <test_scan@@Base+0xdd4>
   1995c:	cmn	r7, #1
   19960:	beq	19984 <test_scan@@Base+0x14fc>
   19964:	mov	r1, r7
   19968:	ldr	r0, [sp, #12]
   1996c:	bl	12dc0 <_start@@Base+0x328>
   19970:	mov	r1, r9
   19974:	bl	12990 <strcmp@plt>
   19978:	sub	r7, r7, #1
   1997c:	cmp	r0, #0
   19980:	bne	1995c <test_scan@@Base+0x14d4>
   19984:	sub	r5, r5, #1
   19988:	mov	r7, r5
   1998c:	ldr	r9, [pc, #-1848]	; 1925c <test_scan@@Base+0xdd4>
   19990:	cmn	r7, #1
   19994:	beq	19a0c <test_scan@@Base+0x1584>
   19998:	mov	r1, r7
   1999c:	ldr	r0, [sp, #12]
   199a0:	bl	12dc0 <_start@@Base+0x328>
   199a4:	mov	r1, r9
   199a8:	bl	12990 <strcmp@plt>
   199ac:	sub	r7, r7, #1
   199b0:	cmp	r0, #0
   199b4:	bne	19990 <test_scan@@Base+0x1508>
   199b8:	mov	r7, r5
   199bc:	b	19a20 <test_scan@@Base+0x1598>
   199c0:	ldr	r0, [pc, #-1924]	; 19244 <test_scan@@Base+0xdbc>
   199c4:	bl	129f0 <puts@plt>
   199c8:	mvn	r8, #0
   199cc:	b	1898c <test_scan@@Base+0x504>
   199d0:	ldr	r3, [pc, #-1936]	; 19248 <test_scan@@Base+0xdc0>
   199d4:	ldr	r2, [pc, #-1936]	; 1924c <test_scan@@Base+0xdc4>
   199d8:	ldr	r1, [pc, #-1928]	; 19258 <test_scan@@Base+0xdd0>
   199dc:	ldr	r0, [pc, #-1940]	; 19250 <test_scan@@Base+0xdc8>
   199e0:	bl	12a8c <__assert_fail@plt>
   199e4:	ldr	r0, [pc, #-1944]	; 19254 <test_scan@@Base+0xdcc>
   199e8:	bl	129f0 <puts@plt>
   199ec:	mvn	r8, #0
   199f0:	b	1898c <test_scan@@Base+0x504>
   199f4:	mov	r7, sl
   199f8:	b	198c0 <test_scan@@Base+0x1438>
   199fc:	mov	r7, sl
   19a00:	b	198f0 <test_scan@@Base+0x1468>
   19a04:	mov	r7, sl
   19a08:	b	19924 <test_scan@@Base+0x149c>
   19a0c:	mov	r7, r5
   19a10:	b	19a20 <test_scan@@Base+0x1598>
   19a14:	cmp	r9, #4
   19a18:	bls	19a68 <test_scan@@Base+0x15e0>
   19a1c:	sub	r7, r7, #1
   19a20:	cmn	r7, #1
   19a24:	beq	19a68 <test_scan@@Base+0x15e0>
   19a28:	mov	r1, r7
   19a2c:	ldr	r0, [sp, #12]
   19a30:	bl	12dc0 <_start@@Base+0x328>
   19a34:	cmp	r0, #0
   19a38:	beq	19a1c <test_scan@@Base+0x1594>
   19a3c:	ldr	r9, [r0, #-4]
   19a40:	cmp	r9, #4
   19a44:	movcc	r2, r9
   19a48:	movcs	r2, #4
   19a4c:	ldr	r1, [pc, #-2040]	; 1925c <test_scan@@Base+0xdd4>
   19a50:	bl	12a74 <strncmp@plt>
   19a54:	cmp	r0, #0
   19a58:	bne	19a1c <test_scan@@Base+0x1594>
   19a5c:	cmp	r9, #3
   19a60:	bhi	19a14 <test_scan@@Base+0x158c>
   19a64:	b	19a1c <test_scan@@Base+0x1594>
   19a68:	ldr	r7, [pc, #-2068]	; 1925c <test_scan@@Base+0xdd4>
   19a6c:	mov	r9, #4
   19a70:	cmn	r5, #1
   19a74:	beq	19a9c <test_scan@@Base+0x1614>
   19a78:	mov	r1, r5
   19a7c:	ldr	r0, [sp, #12]
   19a80:	bl	12dc0 <_start@@Base+0x328>
   19a84:	mov	r2, r9
   19a88:	mov	r1, r7
   19a8c:	bl	13e98 <_start@@Base+0x1400>
   19a90:	sub	r5, r5, #1
   19a94:	cmp	r0, #0
   19a98:	bne	19a70 <test_scan@@Base+0x15e8>
   19a9c:	mov	r1, sl
   19aa0:	mov	r0, fp
   19aa4:	bl	12e0c <_start@@Base+0x374>
   19aa8:	bl	12d64 <_start@@Base+0x2cc>
   19aac:	cmp	r0, #13
   19ab0:	beq	19ac0 <test_scan@@Base+0x1638>
   19ab4:	add	sl, sl, #1
   19ab8:	cmp	r4, sl
   19abc:	bne	19a9c <test_scan@@Base+0x1614>
   19ac0:	cmp	r4, #1
   19ac4:	bls	19b48 <test_scan@@Base+0x16c0>
   19ac8:	mov	r1, r6
   19acc:	mov	r0, fp
   19ad0:	bl	12e0c <_start@@Base+0x374>
   19ad4:	bl	12d64 <_start@@Base+0x2cc>
   19ad8:	cmp	r0, #42	; 0x2a
   19adc:	beq	19b50 <test_scan@@Base+0x16c8>
   19ae0:	add	r6, r6, #1
   19ae4:	cmp	r4, r6
   19ae8:	bne	19ac8 <test_scan@@Base+0x1640>
   19aec:	ldr	r5, [sp, #16]
   19af0:	cmn	r5, #1
   19af4:	beq	19b14 <test_scan@@Base+0x168c>
   19af8:	mov	r1, r5
   19afc:	mov	r0, fp
   19b00:	bl	12e0c <_start@@Base+0x374>
   19b04:	bl	12d64 <_start@@Base+0x2cc>
   19b08:	sub	r5, r5, #1
   19b0c:	cmp	r0, #1
   19b10:	bne	19af0 <test_scan@@Base+0x1668>
   19b14:	cmp	r4, #2
   19b18:	movcs	r4, #2
   19b1c:	sub	r4, r4, #1
   19b20:	cmn	r4, #1
   19b24:	beq	1898c <test_scan@@Base+0x504>
   19b28:	mov	r1, r4
   19b2c:	mov	r0, fp
   19b30:	bl	12e0c <_start@@Base+0x374>
   19b34:	bl	12d64 <_start@@Base+0x2cc>
   19b38:	sub	r4, r4, #1
   19b3c:	cmp	r0, #42	; 0x2a
   19b40:	bne	19b20 <test_scan@@Base+0x1698>
   19b44:	b	1898c <test_scan@@Base+0x504>
   19b48:	ldr	r5, [sp, #16]
   19b4c:	b	19af0 <test_scan@@Base+0x1668>
   19b50:	ldr	r5, [sp, #16]
   19b54:	b	19af0 <test_scan@@Base+0x1668>

00019b58 <test_basic_sort@@Base>:
   19b58:	push	{r4, r5, r6, r7, r8, r9, lr}
   19b5c:	sub	sp, sp, #36	; 0x24
   19b60:	mov	r4, r0
   19b64:	mov	r1, #6
   19b68:	strb	r1, [sp, #20]
   19b6c:	mov	r2, #7
   19b70:	strb	r2, [sp, #21]
   19b74:	mov	r5, #1
   19b78:	strb	r5, [sp, #22]
   19b7c:	mov	r3, #3
   19b80:	strb	r3, [sp, #23]
   19b84:	mov	ip, #4
   19b88:	strb	ip, [sp, #24]
   19b8c:	strb	r3, [sp, #25]
   19b90:	mov	lr, #2
   19b94:	strb	lr, [sp, #26]
   19b98:	strb	r5, [sp, #12]
   19b9c:	strb	lr, [sp, #13]
   19ba0:	strb	r3, [sp, #14]
   19ba4:	strb	r3, [sp, #15]
   19ba8:	strb	ip, [sp, #16]
   19bac:	strb	r1, [sp, #17]
   19bb0:	strb	r2, [sp, #18]
   19bb4:	bl	1e238 <flatcc_builder_reset@@Base>
   19bb8:	mov	r3, #0
   19bbc:	mov	r2, r3
   19bc0:	ldr	r1, [pc, #1196]	; 1a074 <test_basic_sort@@Base+0x51c>
   19bc4:	mov	r0, r4
   19bc8:	bl	1e9d8 <flatcc_builder_start_buffer@@Base>
   19bcc:	cmp	r0, #0
   19bd0:	bne	19be0 <test_basic_sort@@Base+0x88>
   19bd4:	mov	r1, #36	; 0x24
   19bd8:	mov	r0, r4
   19bdc:	bl	1f804 <flatcc_builder_start_table@@Base>
   19be0:	ldr	r1, [pc, #1168]	; 1a078 <test_basic_sort@@Base+0x520>
   19be4:	mov	r0, r4
   19be8:	bl	2108c <flatcc_builder_create_string_str@@Base>
   19bec:	subs	r5, r0, #0
   19bf0:	beq	19c08 <test_basic_sort@@Base+0xb0>
   19bf4:	mov	r1, #3
   19bf8:	mov	r0, r4
   19bfc:	bl	213cc <flatcc_builder_table_add_offset@@Base>
   19c00:	cmp	r0, #0
   19c04:	strne	r5, [r0]
   19c08:	mvn	r3, #0
   19c0c:	str	r3, [sp, #4]
   19c10:	mov	r3, #1
   19c14:	str	r3, [sp]
   19c18:	mov	r2, #7
   19c1c:	add	r1, sp, #20
   19c20:	mov	r0, r4
   19c24:	bl	20408 <flatcc_builder_create_vector@@Base>
   19c28:	subs	r5, r0, #0
   19c2c:	beq	19c44 <test_basic_sort@@Base+0xec>
   19c30:	mov	r1, #5
   19c34:	mov	r0, r4
   19c38:	bl	213cc <flatcc_builder_table_add_offset@@Base>
   19c3c:	cmp	r0, #0
   19c40:	strne	r5, [r0]
   19c44:	mov	r2, #1
   19c48:	ldr	r1, [pc, #1068]	; 1a07c <test_basic_sort@@Base+0x524>
   19c4c:	mov	r0, r4
   19c50:	bl	201a8 <flatcc_builder_check_required@@Base>
   19c54:	cmp	r0, #0
   19c58:	beq	19cf0 <test_basic_sort@@Base+0x198>
   19c5c:	mov	r0, r4
   19c60:	bl	20254 <flatcc_builder_end_table@@Base>
   19c64:	mov	r1, r0
   19c68:	mov	r0, r4
   19c6c:	bl	1ea90 <flatcc_builder_end_buffer@@Base>
   19c70:	add	r1, sp, #28
   19c74:	mov	r0, r4
   19c78:	bl	2181c <flatcc_builder_get_direct_buffer@@Base>
   19c7c:	cmp	r0, #0
   19c80:	beq	19d04 <test_basic_sort@@Base+0x1ac>
   19c84:	ldr	r2, [r0, #4]
   19c88:	ldr	r3, [pc, #1008]	; 1a080 <test_basic_sort@@Base+0x528>
   19c8c:	cmp	r2, r3
   19c90:	bne	19d04 <test_basic_sort@@Base+0x1ac>
   19c94:	ldr	r3, [r0]
   19c98:	adds	r2, r0, r3
   19c9c:	beq	19d04 <test_basic_sort@@Base+0x1ac>
   19ca0:	ldr	r3, [r0, r3]
   19ca4:	sub	r3, r2, r3
   19ca8:	ldrh	r1, [r3]
   19cac:	cmp	r1, #15
   19cb0:	bls	19f00 <test_basic_sort@@Base+0x3a8>
   19cb4:	ldrh	r3, [r3, #14]
   19cb8:	cmp	r3, #0
   19cbc:	beq	19f00 <test_basic_sort@@Base+0x3a8>
   19cc0:	add	r5, r2, r3
   19cc4:	ldr	r4, [r2, r3]
   19cc8:	add	r4, r4, #4
   19ccc:	adds	r3, r5, r4
   19cd0:	beq	19f00 <test_basic_sort@@Base+0x3a8>
   19cd4:	ldr	r8, [r3, #-4]
   19cd8:	cmp	r8, #0
   19cdc:	beq	19f00 <test_basic_sort@@Base+0x3a8>
   19ce0:	sub	ip, r8, #1
   19ce4:	lsr	lr, r8, #1
   19ce8:	lsl	r7, lr, #1
   19cec:	b	19df0 <test_basic_sort@@Base+0x298>
   19cf0:	ldr	r3, [pc, #908]	; 1a084 <test_basic_sort@@Base+0x52c>
   19cf4:	mov	r2, #235	; 0xeb
   19cf8:	ldr	r1, [pc, #904]	; 1a088 <test_basic_sort@@Base+0x530>
   19cfc:	ldr	r0, [pc, #904]	; 1a08c <test_basic_sort@@Base+0x534>
   19d00:	bl	12a8c <__assert_fail@plt>
   19d04:	ldr	r3, [pc, #900]	; 1a090 <test_basic_sort@@Base+0x538>
   19d08:	ldr	r2, [pc, #900]	; 1a094 <test_basic_sort@@Base+0x53c>
   19d0c:	ldr	r1, [pc, #900]	; 1a098 <test_basic_sort@@Base+0x540>
   19d10:	ldr	r0, [pc, #900]	; 1a09c <test_basic_sort@@Base+0x544>
   19d14:	bl	12a8c <__assert_fail@plt>
   19d18:	ldrb	r9, [r3, r1]
   19d1c:	add	r2, r1, #1
   19d20:	cmp	r2, r6
   19d24:	bcs	19da0 <test_basic_sort@@Base+0x248>
   19d28:	ldrb	r6, [r3, r2]
   19d2c:	cmp	r6, r9
   19d30:	movls	r2, r1
   19d34:	ldr	r1, [r3, #-4]
   19d38:	cmp	r1, r0
   19d3c:	bls	19db4 <test_basic_sort@@Base+0x25c>
   19d40:	add	r6, r3, r0
   19d44:	ldrb	r0, [r3, r0]
   19d48:	cmp	r2, r1
   19d4c:	bcs	19dc8 <test_basic_sort@@Base+0x270>
   19d50:	ldrb	r1, [r3, r2]
   19d54:	cmp	r1, r0
   19d58:	bls	19ddc <test_basic_sort@@Base+0x284>
   19d5c:	strb	r0, [r3, r2]
   19d60:	strb	r1, [r6]
   19d64:	lsl	r1, r2, #1
   19d68:	mov	r0, r2
   19d6c:	cmp	ip, r1
   19d70:	bcc	19ddc <test_basic_sort@@Base+0x284>
   19d74:	cmp	ip, r1
   19d78:	movls	r2, r1
   19d7c:	bls	19d34 <test_basic_sort@@Base+0x1dc>
   19d80:	ldr	r6, [r3, #-4]
   19d84:	cmp	r6, r1
   19d88:	bhi	19d18 <test_basic_sort@@Base+0x1c0>
   19d8c:	ldr	r3, [pc, #780]	; 1a0a0 <test_basic_sort@@Base+0x548>
   19d90:	ldr	r2, [pc, #780]	; 1a0a4 <test_basic_sort@@Base+0x54c>
   19d94:	ldr	r1, [pc, #780]	; 1a0a8 <test_basic_sort@@Base+0x550>
   19d98:	ldr	r0, [pc, #780]	; 1a0ac <test_basic_sort@@Base+0x554>
   19d9c:	bl	12a8c <__assert_fail@plt>
   19da0:	ldr	r3, [pc, #760]	; 1a0a0 <test_basic_sort@@Base+0x548>
   19da4:	ldr	r2, [pc, #760]	; 1a0a4 <test_basic_sort@@Base+0x54c>
   19da8:	ldr	r1, [pc, #760]	; 1a0a8 <test_basic_sort@@Base+0x550>
   19dac:	ldr	r0, [pc, #760]	; 1a0ac <test_basic_sort@@Base+0x554>
   19db0:	bl	12a8c <__assert_fail@plt>
   19db4:	ldr	r3, [pc, #740]	; 1a0a0 <test_basic_sort@@Base+0x548>
   19db8:	ldr	r2, [pc, #740]	; 1a0a4 <test_basic_sort@@Base+0x54c>
   19dbc:	ldr	r1, [pc, #740]	; 1a0a8 <test_basic_sort@@Base+0x550>
   19dc0:	ldr	r0, [pc, #740]	; 1a0ac <test_basic_sort@@Base+0x554>
   19dc4:	bl	12a8c <__assert_fail@plt>
   19dc8:	ldr	r3, [pc, #720]	; 1a0a0 <test_basic_sort@@Base+0x548>
   19dcc:	ldr	r2, [pc, #720]	; 1a0a4 <test_basic_sort@@Base+0x54c>
   19dd0:	ldr	r1, [pc, #720]	; 1a0a8 <test_basic_sort@@Base+0x550>
   19dd4:	ldr	r0, [pc, #720]	; 1a0ac <test_basic_sort@@Base+0x554>
   19dd8:	bl	12a8c <__assert_fail@plt>
   19ddc:	sub	r2, lr, #1
   19de0:	sub	r7, r7, #2
   19de4:	cmp	lr, #0
   19de8:	beq	19e04 <test_basic_sort@@Base+0x2ac>
   19dec:	mov	lr, r2
   19df0:	cmp	ip, r7
   19df4:	bcc	19ddc <test_basic_sort@@Base+0x284>
   19df8:	mov	r0, lr
   19dfc:	mov	r1, r7
   19e00:	b	19d74 <test_basic_sort@@Base+0x21c>
   19e04:	cmp	ip, #0
   19e08:	beq	1a048 <test_basic_sort@@Base+0x4f0>
   19e0c:	add	r8, r3, r8
   19e10:	b	19ee0 <test_basic_sort@@Base+0x388>
   19e14:	ldrb	r7, [r3, r1]
   19e18:	add	r2, r1, #1
   19e1c:	cmp	r2, r6
   19e20:	bcs	19e9c <test_basic_sort@@Base+0x344>
   19e24:	ldrb	r6, [r3, r2]
   19e28:	cmp	r6, r7
   19e2c:	movls	r2, r1
   19e30:	ldr	r1, [r3, #-4]
   19e34:	cmp	r1, r0
   19e38:	bls	19eb0 <test_basic_sort@@Base+0x358>
   19e3c:	add	r6, r3, r0
   19e40:	ldrb	r0, [r3, r0]
   19e44:	cmp	r2, r1
   19e48:	bcs	19ec4 <test_basic_sort@@Base+0x36c>
   19e4c:	ldrb	r1, [r3, r2]
   19e50:	cmp	r1, r0
   19e54:	bls	19ed8 <test_basic_sort@@Base+0x380>
   19e58:	strb	r0, [r3, r2]
   19e5c:	strb	r1, [r6]
   19e60:	lsl	r1, r2, #1
   19e64:	mov	r0, r2
   19e68:	cmp	ip, r1
   19e6c:	bcc	19ed8 <test_basic_sort@@Base+0x380>
   19e70:	cmp	ip, r1
   19e74:	movls	r2, r1
   19e78:	bls	19e30 <test_basic_sort@@Base+0x2d8>
   19e7c:	ldr	r6, [r3, #-4]
   19e80:	cmp	r6, r1
   19e84:	bhi	19e14 <test_basic_sort@@Base+0x2bc>
   19e88:	ldr	r3, [pc, #528]	; 1a0a0 <test_basic_sort@@Base+0x548>
   19e8c:	ldr	r2, [pc, #528]	; 1a0a4 <test_basic_sort@@Base+0x54c>
   19e90:	ldr	r1, [pc, #528]	; 1a0a8 <test_basic_sort@@Base+0x550>
   19e94:	ldr	r0, [pc, #528]	; 1a0ac <test_basic_sort@@Base+0x554>
   19e98:	bl	12a8c <__assert_fail@plt>
   19e9c:	ldr	r3, [pc, #508]	; 1a0a0 <test_basic_sort@@Base+0x548>
   19ea0:	ldr	r2, [pc, #508]	; 1a0a4 <test_basic_sort@@Base+0x54c>
   19ea4:	ldr	r1, [pc, #508]	; 1a0a8 <test_basic_sort@@Base+0x550>
   19ea8:	ldr	r0, [pc, #508]	; 1a0ac <test_basic_sort@@Base+0x554>
   19eac:	bl	12a8c <__assert_fail@plt>
   19eb0:	ldr	r3, [pc, #488]	; 1a0a0 <test_basic_sort@@Base+0x548>
   19eb4:	ldr	r2, [pc, #488]	; 1a0a4 <test_basic_sort@@Base+0x54c>
   19eb8:	ldr	r1, [pc, #488]	; 1a0a8 <test_basic_sort@@Base+0x550>
   19ebc:	ldr	r0, [pc, #488]	; 1a0ac <test_basic_sort@@Base+0x554>
   19ec0:	bl	12a8c <__assert_fail@plt>
   19ec4:	ldr	r3, [pc, #468]	; 1a0a0 <test_basic_sort@@Base+0x548>
   19ec8:	ldr	r2, [pc, #468]	; 1a0a4 <test_basic_sort@@Base+0x54c>
   19ecc:	ldr	r1, [pc, #468]	; 1a0a8 <test_basic_sort@@Base+0x550>
   19ed0:	ldr	r0, [pc, #468]	; 1a0ac <test_basic_sort@@Base+0x554>
   19ed4:	bl	12a8c <__assert_fail@plt>
   19ed8:	cmp	ip, #0
   19edc:	beq	1a048 <test_basic_sort@@Base+0x4f0>
   19ee0:	ldrb	r2, [r8, #-1]
   19ee4:	ldrb	r1, [r3]
   19ee8:	strb	r1, [r8, #-1]!
   19eec:	strb	r2, [r3]
   19ef0:	sub	ip, ip, #1
   19ef4:	mov	r0, lr
   19ef8:	mov	r1, lr
   19efc:	b	19e70 <test_basic_sort@@Base+0x318>
   19f00:	ldr	r3, [pc, #424]	; 1a0b0 <test_basic_sort@@Base+0x558>
   19f04:	mov	r2, #1552	; 0x610
   19f08:	ldr	r1, [pc, #420]	; 1a0b4 <test_basic_sort@@Base+0x55c>
   19f0c:	ldr	r0, [pc, #420]	; 1a0b8 <test_basic_sort@@Base+0x560>
   19f10:	bl	12a8c <__assert_fail@plt>
   19f14:	ldr	r0, [pc, #416]	; 1a0bc <test_basic_sort@@Base+0x564>
   19f18:	bl	129f0 <puts@plt>
   19f1c:	mvn	r0, #0
   19f20:	add	sp, sp, #36	; 0x24
   19f24:	pop	{r4, r5, r6, r7, r8, r9, pc}
   19f28:	ldr	r3, [pc, #368]	; 1a0a0 <test_basic_sort@@Base+0x548>
   19f2c:	ldr	r2, [pc, #368]	; 1a0a4 <test_basic_sort@@Base+0x54c>
   19f30:	ldr	r1, [pc, #368]	; 1a0a8 <test_basic_sort@@Base+0x550>
   19f34:	ldr	r0, [pc, #368]	; 1a0ac <test_basic_sort@@Base+0x554>
   19f38:	bl	12a8c <__assert_fail@plt>
   19f3c:	mov	ip, r1
   19f40:	add	r0, r2, #1
   19f44:	cmp	ip, r0
   19f48:	bhi	19fa0 <test_basic_sort@@Base+0x448>
   19f4c:	mov	r1, ip
   19f50:	cmp	r1, r0
   19f54:	beq	19ff0 <test_basic_sort@@Base+0x498>
   19f58:	cmp	r5, #4
   19f5c:	beq	1a030 <test_basic_sort@@Base+0x4d8>
   19f60:	mov	r1, r8
   19f64:	cmp	r6, r1
   19f68:	bne	1a030 <test_basic_sort@@Base+0x4d8>
   19f6c:	mov	r6, r5
   19f70:	cmp	r5, #6
   19f74:	bhi	1a040 <test_basic_sort@@Base+0x4e8>
   19f78:	add	r2, sp, #32
   19f7c:	add	r2, r2, r5
   19f80:	ldrb	r4, [r2, #-20]	; 0xffffffec
   19f84:	add	r5, r5, #1
   19f88:	uxtb	r5, r5
   19f8c:	ldrb	r2, [r3, r6]
   19f90:	cmp	r2, r4
   19f94:	bne	19f14 <test_basic_sort@@Base+0x3bc>
   19f98:	mov	r0, lr
   19f9c:	mov	ip, r7
   19fa0:	sub	r1, ip, r0
   19fa4:	add	r1, r0, r1, lsr #1
   19fa8:	cmp	r1, #6
   19fac:	bhi	19f28 <test_basic_sort@@Base+0x3d0>
   19fb0:	ldrb	r2, [r3, r1]
   19fb4:	cmp	r2, r4
   19fb8:	bcc	19fe8 <test_basic_sort@@Base+0x490>
   19fbc:	cmp	r0, r1
   19fc0:	bcs	19f50 <test_basic_sort@@Base+0x3f8>
   19fc4:	sub	r2, r1, r0
   19fc8:	add	r2, r0, r2, lsr #1
   19fcc:	cmp	r2, #6
   19fd0:	bhi	19f28 <test_basic_sort@@Base+0x3d0>
   19fd4:	ldrb	ip, [r3, r2]
   19fd8:	cmp	ip, r4
   19fdc:	bcc	19f3c <test_basic_sort@@Base+0x3e4>
   19fe0:	mov	r1, r2
   19fe4:	b	19fbc <test_basic_sort@@Base+0x464>
   19fe8:	mov	r2, r1
   19fec:	b	19f40 <test_basic_sort@@Base+0x3e8>
   19ff0:	cmp	r1, #6
   19ff4:	bhi	1a01c <test_basic_sort@@Base+0x4c4>
   19ff8:	ldrb	r2, [r3, r1]
   19ffc:	cmp	r2, r4
   1a000:	bne	19f58 <test_basic_sort@@Base+0x400>
   1a004:	cmp	r5, #4
   1a008:	bne	19f64 <test_basic_sort@@Base+0x40c>
   1a00c:	cmp	r1, #2
   1a010:	bne	1a030 <test_basic_sort@@Base+0x4d8>
   1a014:	mov	r6, r5
   1a018:	b	19f78 <test_basic_sort@@Base+0x420>
   1a01c:	ldr	r3, [pc, #124]	; 1a0a0 <test_basic_sort@@Base+0x548>
   1a020:	ldr	r2, [pc, #124]	; 1a0a4 <test_basic_sort@@Base+0x54c>
   1a024:	ldr	r1, [pc, #124]	; 1a0a8 <test_basic_sort@@Base+0x550>
   1a028:	ldr	r0, [pc, #124]	; 1a0ac <test_basic_sort@@Base+0x554>
   1a02c:	bl	12a8c <__assert_fail@plt>
   1a030:	ldr	r0, [pc, #136]	; 1a0c0 <test_basic_sort@@Base+0x568>
   1a034:	bl	129f0 <puts@plt>
   1a038:	mvn	r0, #0
   1a03c:	b	19f20 <test_basic_sort@@Base+0x3c8>
   1a040:	mov	r0, #0
   1a044:	b	19f20 <test_basic_sort@@Base+0x3c8>
   1a048:	ldr	r2, [r3, #-4]
   1a04c:	cmp	r2, #7
   1a050:	bne	19f00 <test_basic_sort@@Base+0x3a8>
   1a054:	ldrb	r4, [r5, r4]
   1a058:	cmp	r4, #1
   1a05c:	bne	19f14 <test_basic_sort@@Base+0x3bc>
   1a060:	mov	r5, r4
   1a064:	mov	r6, #0
   1a068:	mov	r7, #6
   1a06c:	mvn	r8, #0
   1a070:	b	19f98 <test_basic_sort@@Base+0x440>
   1a074:	andeq	r4, r2, r0, asr r0
   1a078:	ldrdeq	r4, [r2], -ip
   1a07c:	andeq	r3, r2, r4, ror #16
   1a080:	movtpl	r4, #61261	; 0xef4d
   1a084:	andeq	r3, r2, r8, ror #16
   1a088:	andeq	r4, r2, r8, asr r0
   1a08c:	andeq	r4, r2, r8, ror #3
   1a090:			; <UNDEFINED> instruction: 0x000239b4
   1a094:	andeq	r0, r0, r2, asr #5
   1a098:	andeq	r3, r2, ip, ror sp
   1a09c:	andeq	r3, r2, r0, ror #27
   1a0a0:	muleq	r2, r8, r9
   1a0a4:	andeq	r0, r0, fp, lsl #3
   1a0a8:	andeq	r3, r2, r8, lsl #28
   1a0ac:	andeq	r3, r2, r0, ror lr
   1a0b0:	ldrdeq	r3, [r2], -r8
   1a0b4:	ldrdeq	r4, [r2], -ip
   1a0b8:	andeq	r5, r2, ip, asr #16
   1a0bc:	andeq	r5, r2, ip, ror r8
   1a0c0:	muleq	r2, r4, r8

0001a0c4 <test_clone_slice@@Base>:
   1a0c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a0c8:	sub	sp, sp, #28
   1a0cc:	mov	r4, r0
   1a0d0:	mov	r5, #0
   1a0d4:	strb	r5, [sp, #12]
   1a0d8:	mov	r3, #1
   1a0dc:	strb	r3, [sp, #13]
   1a0e0:	strb	r5, [sp, #14]
   1a0e4:	strb	r5, [sp, #15]
   1a0e8:	strb	r3, [sp, #16]
   1a0ec:	strb	r5, [sp, #17]
   1a0f0:	strb	r5, [sp, #18]
   1a0f4:	bl	1e238 <flatcc_builder_reset@@Base>
   1a0f8:	mov	r3, r5
   1a0fc:	mov	r2, r5
   1a100:	ldr	r1, [pc, #2580]	; 1ab1c <test_clone_slice@@Base+0xa58>
   1a104:	mov	r0, r4
   1a108:	bl	1e9d8 <flatcc_builder_start_buffer@@Base>
   1a10c:	cmp	r0, r5
   1a110:	bne	1a120 <test_clone_slice@@Base+0x5c>
   1a114:	mov	r1, #36	; 0x24
   1a118:	mov	r0, r4
   1a11c:	bl	1f804 <flatcc_builder_start_table@@Base>
   1a120:	ldr	r1, [pc, #2552]	; 1ab20 <test_clone_slice@@Base+0xa5c>
   1a124:	mov	r0, r4
   1a128:	bl	135f0 <_start@@Base+0xb58>
   1a12c:	mvn	r3, #0
   1a130:	str	r3, [sp, #4]
   1a134:	mov	r3, #1
   1a138:	str	r3, [sp]
   1a13c:	mov	r2, #7
   1a140:	add	r1, sp, #12
   1a144:	mov	r0, r4
   1a148:	bl	20408 <flatcc_builder_create_vector@@Base>
   1a14c:	subs	r5, r0, #0
   1a150:	beq	1a168 <test_clone_slice@@Base+0xa4>
   1a154:	mov	r1, #24
   1a158:	mov	r0, r4
   1a15c:	bl	213cc <flatcc_builder_table_add_offset@@Base>
   1a160:	cmp	r0, #0
   1a164:	strne	r5, [r0]
   1a168:	mvn	r3, #-1073741824	; 0xc0000000
   1a16c:	mov	r2, #2
   1a170:	mov	r1, #4
   1a174:	mov	r0, r4
   1a178:	bl	1f554 <flatcc_builder_start_vector@@Base>
   1a17c:	mov	r1, #2
   1a180:	mov	r0, r4
   1a184:	bl	1ed4c <flatcc_builder_extend_vector@@Base>
   1a188:	mov	r3, #22
   1a18c:	strh	r3, [r0]
   1a190:	mov	r3, #44	; 0x2c
   1a194:	strh	r3, [r0, #4]
   1a198:	mov	r0, r4
   1a19c:	bl	20564 <flatcc_builder_end_vector@@Base>
   1a1a0:	subs	r5, r0, #0
   1a1a4:	beq	1a1bc <test_clone_slice@@Base+0xf8>
   1a1a8:	mov	r1, #9
   1a1ac:	mov	r0, r4
   1a1b0:	bl	213cc <flatcc_builder_table_add_offset@@Base>
   1a1b4:	cmp	r0, #0
   1a1b8:	strne	r5, [r0]
   1a1bc:	mov	r3, #16
   1a1c0:	mov	r2, #32
   1a1c4:	mov	r1, #0
   1a1c8:	mov	r0, r4
   1a1cc:	bl	21200 <flatcc_builder_table_add@@Base>
   1a1d0:	ldr	r3, [pc, #2380]	; 1ab24 <test_clone_slice@@Base+0xa60>
   1a1d4:	str	r3, [r0]
   1a1d8:	mov	r2, #1
   1a1dc:	ldr	r1, [pc, #2372]	; 1ab28 <test_clone_slice@@Base+0xa64>
   1a1e0:	mov	r0, r4
   1a1e4:	bl	201a8 <flatcc_builder_check_required@@Base>
   1a1e8:	cmp	r0, #0
   1a1ec:	beq	1a8f0 <test_clone_slice@@Base+0x82c>
   1a1f0:	mov	r0, r4
   1a1f4:	bl	20254 <flatcc_builder_end_table@@Base>
   1a1f8:	mov	r1, r0
   1a1fc:	mov	r0, r4
   1a200:	bl	1ea90 <flatcc_builder_end_buffer@@Base>
   1a204:	add	r1, sp, #20
   1a208:	mov	r0, r4
   1a20c:	bl	21958 <flatcc_builder_finalize_aligned_buffer@@Base>
   1a210:	mov	r7, r0
   1a214:	ldr	r3, [pc, #2320]	; 1ab2c <test_clone_slice@@Base+0xa68>
   1a218:	ldr	r3, [r3]
   1a21c:	ldr	r2, [sp, #20]
   1a220:	mov	r1, r0
   1a224:	ldr	r0, [pc, #2308]	; 1ab30 <test_clone_slice@@Base+0xa6c>
   1a228:	bl	134b0 <_start@@Base+0xa18>
   1a22c:	cmp	r7, #0
   1a230:	moveq	r5, #0
   1a234:	beq	1a250 <test_clone_slice@@Base+0x18c>
   1a238:	ldr	r2, [r7, #4]
   1a23c:	ldr	r3, [pc, #2288]	; 1ab34 <test_clone_slice@@Base+0xa70>
   1a240:	cmp	r2, r3
   1a244:	ldreq	r5, [r7]
   1a248:	addeq	r5, r7, r5
   1a24c:	movne	r5, #0
   1a250:	mov	r0, r4
   1a254:	bl	1e238 <flatcc_builder_reset@@Base>
   1a258:	mov	r3, #0
   1a25c:	mov	r2, r3
   1a260:	ldr	r1, [pc, #2228]	; 1ab1c <test_clone_slice@@Base+0xa58>
   1a264:	mov	r0, r4
   1a268:	bl	1e9d8 <flatcc_builder_start_buffer@@Base>
   1a26c:	cmp	r0, #0
   1a270:	bne	1a280 <test_clone_slice@@Base+0x1bc>
   1a274:	mov	r1, #36	; 0x24
   1a278:	mov	r0, r4
   1a27c:	bl	1f804 <flatcc_builder_start_table@@Base>
   1a280:	mov	r0, r5
   1a284:	bl	12f18 <_start@@Base+0x480>
   1a288:	subs	r6, r0, #0
   1a28c:	beq	1a904 <test_clone_slice@@Base+0x840>
   1a290:	cmp	r5, #0
   1a294:	beq	1a918 <test_clone_slice@@Base+0x854>
   1a298:	ldr	r3, [r5]
   1a29c:	sub	r3, r5, r3
   1a2a0:	ldrh	r1, [r3]
   1a2a4:	cmp	r1, #53	; 0x35
   1a2a8:	bls	1a92c <test_clone_slice@@Base+0x868>
   1a2ac:	ldrh	r2, [r3, #52]	; 0x34
   1a2b0:	cmp	r2, #0
   1a2b4:	beq	1a92c <test_clone_slice@@Base+0x868>
   1a2b8:	add	r8, r5, r2
   1a2bc:	ldr	r2, [r5, r2]
   1a2c0:	add	r2, r2, #4
   1a2c4:	adds	r8, r8, r2
   1a2c8:	beq	1a92c <test_clone_slice@@Base+0x868>
   1a2cc:	cmp	r1, #23
   1a2d0:	bls	1a940 <test_clone_slice@@Base+0x87c>
   1a2d4:	ldrh	r3, [r3, #22]
   1a2d8:	cmp	r3, #0
   1a2dc:	beq	1a940 <test_clone_slice@@Base+0x87c>
   1a2e0:	add	r9, r5, r3
   1a2e4:	ldr	r3, [r5, r3]
   1a2e8:	add	r3, r3, #4
   1a2ec:	adds	r9, r9, r3
   1a2f0:	beq	1a940 <test_clone_slice@@Base+0x87c>
   1a2f4:	ldr	r2, [r6, #-4]
   1a2f8:	mov	r1, r6
   1a2fc:	mov	r0, r4
   1a300:	bl	20f74 <flatcc_builder_create_string@@Base>
   1a304:	subs	sl, r0, #0
   1a308:	beq	1a320 <test_clone_slice@@Base+0x25c>
   1a30c:	mov	r1, #3
   1a310:	mov	r0, r4
   1a314:	bl	213cc <flatcc_builder_table_add_offset@@Base>
   1a318:	cmp	r0, #0
   1a31c:	strne	sl, [r0]
   1a320:	mov	r0, r4
   1a324:	bl	1f5e0 <flatcc_builder_start_offset_vector@@Base>
   1a328:	ldr	r2, [r6, #-4]
   1a32c:	mov	r1, r6
   1a330:	mov	r0, r4
   1a334:	bl	20f74 <flatcc_builder_create_string@@Base>
   1a338:	subs	r1, r0, #0
   1a33c:	beq	1a348 <test_clone_slice@@Base+0x284>
   1a340:	mov	r0, r4
   1a344:	bl	1f048 <flatcc_builder_offset_vector_push@@Base>
   1a348:	ldr	r2, [r6, #-4]
   1a34c:	cmp	r2, #4
   1a350:	movcc	r1, r2
   1a354:	movcs	r1, #4
   1a358:	sub	r2, r2, r1
   1a35c:	cmp	r2, #20
   1a360:	movcs	r2, #20
   1a364:	add	r1, r6, r1
   1a368:	mov	r0, r4
   1a36c:	bl	20f74 <flatcc_builder_create_string@@Base>
   1a370:	subs	r1, r0, #0
   1a374:	beq	1a380 <test_clone_slice@@Base+0x2bc>
   1a378:	mov	r0, r4
   1a37c:	bl	1f048 <flatcc_builder_offset_vector_push@@Base>
   1a380:	ldr	r2, [r6, #-4]
   1a384:	cmp	r2, #3
   1a388:	movcs	r2, #3
   1a38c:	mov	r1, r6
   1a390:	mov	r0, r4
   1a394:	bl	20f74 <flatcc_builder_create_string@@Base>
   1a398:	subs	r1, r0, #0
   1a39c:	beq	1a3a8 <test_clone_slice@@Base+0x2e4>
   1a3a0:	mov	r0, r4
   1a3a4:	bl	1f048 <flatcc_builder_offset_vector_push@@Base>
   1a3a8:	mov	r0, r4
   1a3ac:	bl	2067c <flatcc_builder_end_offset_vector@@Base>
   1a3b0:	subs	sl, r0, #0
   1a3b4:	beq	1a3cc <test_clone_slice@@Base+0x308>
   1a3b8:	mov	r1, #10
   1a3bc:	mov	r0, r4
   1a3c0:	bl	213cc <flatcc_builder_table_add_offset@@Base>
   1a3c4:	cmp	r0, #0
   1a3c8:	strne	sl, [r0]
   1a3cc:	mov	r1, #36	; 0x24
   1a3d0:	mov	r0, r4
   1a3d4:	bl	1f804 <flatcc_builder_start_table@@Base>
   1a3d8:	ldr	r2, [r6, #-4]
   1a3dc:	cmp	r2, #2
   1a3e0:	movcc	r1, r2
   1a3e4:	movcs	r1, #2
   1a3e8:	sub	r2, r2, r1
   1a3ec:	cmp	r2, #20
   1a3f0:	movcs	r2, #20
   1a3f4:	add	r1, r6, r1
   1a3f8:	mov	r0, r4
   1a3fc:	bl	20f74 <flatcc_builder_create_string@@Base>
   1a400:	subs	r6, r0, #0
   1a404:	beq	1a41c <test_clone_slice@@Base+0x358>
   1a408:	mov	r1, #3
   1a40c:	mov	r0, r4
   1a410:	bl	213cc <flatcc_builder_table_add_offset@@Base>
   1a414:	cmp	r0, #0
   1a418:	strne	r6, [r0]
   1a41c:	ldr	r2, [r8, #-4]
   1a420:	mvn	r3, #0
   1a424:	str	r3, [sp, #4]
   1a428:	mov	r3, #1
   1a42c:	str	r3, [sp]
   1a430:	mov	r1, r8
   1a434:	mov	r0, r4
   1a438:	bl	20408 <flatcc_builder_create_vector@@Base>
   1a43c:	subs	r6, r0, #0
   1a440:	beq	1a458 <test_clone_slice@@Base+0x394>
   1a444:	mov	r1, #24
   1a448:	mov	r0, r4
   1a44c:	bl	213cc <flatcc_builder_table_add_offset@@Base>
   1a450:	cmp	r0, #0
   1a454:	strne	r6, [r0]
   1a458:	ldr	r2, [r9, #-4]
   1a45c:	cmp	r2, #1
   1a460:	movcc	r1, r2
   1a464:	movcs	r1, #1
   1a468:	sub	r2, r2, r1
   1a46c:	mvn	r3, #-1073741824	; 0xc0000000
   1a470:	str	r3, [sp, #4]
   1a474:	mov	r3, #2
   1a478:	str	r3, [sp]
   1a47c:	mov	r3, #4
   1a480:	cmp	r2, #2
   1a484:	movcs	r2, #2
   1a488:	add	r1, r9, r1, lsl #2
   1a48c:	mov	r0, r4
   1a490:	bl	20408 <flatcc_builder_create_vector@@Base>
   1a494:	subs	r6, r0, #0
   1a498:	beq	1a4b0 <test_clone_slice@@Base+0x3ec>
   1a49c:	mov	r1, #9
   1a4a0:	mov	r0, r4
   1a4a4:	bl	213cc <flatcc_builder_table_add_offset@@Base>
   1a4a8:	cmp	r0, #0
   1a4ac:	strne	r6, [r0]
   1a4b0:	mov	r2, #1
   1a4b4:	ldr	r1, [pc, #1644]	; 1ab28 <test_clone_slice@@Base+0xa64>
   1a4b8:	mov	r0, r4
   1a4bc:	bl	201a8 <flatcc_builder_check_required@@Base>
   1a4c0:	cmp	r0, #0
   1a4c4:	beq	1a954 <test_clone_slice@@Base+0x890>
   1a4c8:	mov	r0, r4
   1a4cc:	bl	20254 <flatcc_builder_end_table@@Base>
   1a4d0:	subs	r6, r0, #0
   1a4d4:	beq	1a510 <test_clone_slice@@Base+0x44c>
   1a4d8:	mov	r3, #1
   1a4dc:	mov	r2, r3
   1a4e0:	mov	r1, #7
   1a4e4:	mov	r0, r4
   1a4e8:	bl	21200 <flatcc_builder_table_add@@Base>
   1a4ec:	subs	sl, r0, #0
   1a4f0:	beq	1a510 <test_clone_slice@@Base+0x44c>
   1a4f4:	mov	r1, #8
   1a4f8:	mov	r0, r4
   1a4fc:	bl	213cc <flatcc_builder_table_add_offset@@Base>
   1a500:	cmp	r0, #0
   1a504:	movne	r3, #1
   1a508:	strbne	r3, [sl]
   1a50c:	strne	r6, [r0]
   1a510:	ldr	r2, [r8, #-4]
   1a514:	cmp	r2, #3
   1a518:	movcc	r1, r2
   1a51c:	movcs	r1, #3
   1a520:	mvn	r3, #0
   1a524:	str	r3, [sp, #4]
   1a528:	mov	r3, #1
   1a52c:	str	r3, [sp]
   1a530:	sub	r2, r2, r1
   1a534:	add	r1, r8, r1
   1a538:	mov	r0, r4
   1a53c:	bl	20408 <flatcc_builder_create_vector@@Base>
   1a540:	subs	r6, r0, #0
   1a544:	beq	1a55c <test_clone_slice@@Base+0x498>
   1a548:	mov	r1, #24
   1a54c:	mov	r0, r4
   1a550:	bl	213cc <flatcc_builder_table_add_offset@@Base>
   1a554:	cmp	r0, #0
   1a558:	strne	r6, [r0]
   1a55c:	ldr	r3, [r5]
   1a560:	sub	r3, r5, r3
   1a564:	ldrh	r2, [r3]
   1a568:	cmp	r2, #5
   1a56c:	movls	r2, #0
   1a570:	bls	1a584 <test_clone_slice@@Base+0x4c0>
   1a574:	ldrh	r2, [r3, #4]
   1a578:	cmp	r2, #0
   1a57c:	addne	r2, r5, r2
   1a580:	moveq	r2, #0
   1a584:	mov	r3, #16
   1a588:	str	r3, [sp]
   1a58c:	mov	r3, #32
   1a590:	mov	r1, #0
   1a594:	mov	r0, r4
   1a598:	bl	21394 <flatcc_builder_table_add_copy@@Base>
   1a59c:	ldr	r2, [r9, #-4]
   1a5a0:	mvn	r3, #-1073741824	; 0xc0000000
   1a5a4:	str	r3, [sp, #4]
   1a5a8:	mov	r3, #2
   1a5ac:	str	r3, [sp]
   1a5b0:	mov	r3, #4
   1a5b4:	mov	r1, r9
   1a5b8:	mov	r0, r4
   1a5bc:	bl	20408 <flatcc_builder_create_vector@@Base>
   1a5c0:	subs	r5, r0, #0
   1a5c4:	beq	1a5dc <test_clone_slice@@Base+0x518>
   1a5c8:	mov	r1, #9
   1a5cc:	mov	r0, r4
   1a5d0:	bl	213cc <flatcc_builder_table_add_offset@@Base>
   1a5d4:	cmp	r0, #0
   1a5d8:	strne	r5, [r0]
   1a5dc:	mov	r2, #1
   1a5e0:	ldr	r1, [pc, #1344]	; 1ab28 <test_clone_slice@@Base+0xa64>
   1a5e4:	mov	r0, r4
   1a5e8:	bl	201a8 <flatcc_builder_check_required@@Base>
   1a5ec:	cmp	r0, #0
   1a5f0:	beq	1a968 <test_clone_slice@@Base+0x8a4>
   1a5f4:	mov	r0, r4
   1a5f8:	bl	20254 <flatcc_builder_end_table@@Base>
   1a5fc:	mov	r1, r0
   1a600:	mov	r0, r4
   1a604:	bl	1ea90 <flatcc_builder_end_buffer@@Base>
   1a608:	add	r1, sp, #20
   1a60c:	mov	r0, r4
   1a610:	bl	2181c <flatcc_builder_get_direct_buffer@@Base>
   1a614:	mov	r4, r0
   1a618:	ldr	r3, [pc, #1292]	; 1ab2c <test_clone_slice@@Base+0xa68>
   1a61c:	ldr	r3, [r3]
   1a620:	ldr	r2, [sp, #20]
   1a624:	mov	r1, r0
   1a628:	ldr	r0, [pc, #1288]	; 1ab38 <test_clone_slice@@Base+0xa74>
   1a62c:	bl	134b0 <_start@@Base+0xa18>
   1a630:	cmp	r4, #0
   1a634:	beq	1aaf0 <test_clone_slice@@Base+0xa2c>
   1a638:	ldr	r2, [r4, #4]
   1a63c:	ldr	r3, [pc, #1264]	; 1ab34 <test_clone_slice@@Base+0xa70>
   1a640:	cmp	r2, r3
   1a644:	bne	1aaf0 <test_clone_slice@@Base+0xa2c>
   1a648:	ldr	r6, [r4]
   1a64c:	add	r5, r4, r6
   1a650:	mov	r0, r5
   1a654:	bl	12f18 <_start@@Base+0x480>
   1a658:	ldr	r1, [pc, #1216]	; 1ab20 <test_clone_slice@@Base+0xa5c>
   1a65c:	bl	12990 <strcmp@plt>
   1a660:	cmp	r0, #0
   1a664:	bne	1ab08 <test_clone_slice@@Base+0xa44>
   1a668:	cmp	r5, #0
   1a66c:	beq	1a97c <test_clone_slice@@Base+0x8b8>
   1a670:	ldr	r6, [r4, r6]
   1a674:	sub	r6, r5, r6
   1a678:	ldrh	r8, [r6]
   1a67c:	cmp	r8, #25
   1a680:	bls	1a990 <test_clone_slice@@Base+0x8cc>
   1a684:	ldrh	r3, [r6, #24]
   1a688:	cmp	r3, #0
   1a68c:	beq	1a990 <test_clone_slice@@Base+0x8cc>
   1a690:	add	r2, r5, r3
   1a694:	ldr	r3, [r5, r3]
   1a698:	add	r3, r3, #4
   1a69c:	adds	r4, r2, r3
   1a6a0:	beq	1a990 <test_clone_slice@@Base+0x8cc>
   1a6a4:	ldr	r9, [r4, #-4]
   1a6a8:	cmp	r9, #0
   1a6ac:	beq	1a990 <test_clone_slice@@Base+0x8cc>
   1a6b0:	ldr	r0, [r2, r3]
   1a6b4:	add	r0, r0, #4
   1a6b8:	ldr	r1, [pc, #1120]	; 1ab20 <test_clone_slice@@Base+0xa5c>
   1a6bc:	add	r0, r4, r0
   1a6c0:	bl	12990 <strcmp@plt>
   1a6c4:	cmp	r0, #0
   1a6c8:	bne	1a9a4 <test_clone_slice@@Base+0x8e0>
   1a6cc:	cmp	r9, #1
   1a6d0:	bls	1a9b4 <test_clone_slice@@Base+0x8f0>
   1a6d4:	ldr	r0, [r4, #4]
   1a6d8:	add	r0, r0, #8
   1a6dc:	adds	r0, r4, r0
   1a6e0:	beq	1a9c8 <test_clone_slice@@Base+0x904>
   1a6e4:	ldr	r3, [r0, #-4]
   1a6e8:	cmp	r3, #6
   1a6ec:	bne	1a9c8 <test_clone_slice@@Base+0x904>
   1a6f0:	ldr	r1, [pc, #1092]	; 1ab3c <test_clone_slice@@Base+0xa78>
   1a6f4:	bl	12990 <strcmp@plt>
   1a6f8:	cmp	r0, #0
   1a6fc:	bne	1a9d8 <test_clone_slice@@Base+0x914>
   1a700:	cmp	r9, #2
   1a704:	bls	1a9e8 <test_clone_slice@@Base+0x924>
   1a708:	ldr	r0, [r4, #8]
   1a70c:	add	r0, r0, #12
   1a710:	adds	r0, r4, r0
   1a714:	beq	1a9fc <test_clone_slice@@Base+0x938>
   1a718:	ldr	r3, [r0, #-4]
   1a71c:	cmp	r3, #3
   1a720:	bne	1a9fc <test_clone_slice@@Base+0x938>
   1a724:	ldr	r1, [pc, #1044]	; 1ab40 <test_clone_slice@@Base+0xa7c>
   1a728:	bl	12990 <strcmp@plt>
   1a72c:	cmp	r0, #0
   1a730:	bne	1aa0c <test_clone_slice@@Base+0x948>
   1a734:	cmp	r8, #21
   1a738:	bls	1aa1c <test_clone_slice@@Base+0x958>
   1a73c:	ldrh	r3, [r6, #20]
   1a740:	cmp	r3, #0
   1a744:	beq	1aa1c <test_clone_slice@@Base+0x958>
   1a748:	add	sl, r5, r3
   1a74c:	ldr	r9, [r5, r3]
   1a750:	adds	r4, sl, r9
   1a754:	beq	1aa1c <test_clone_slice@@Base+0x958>
   1a758:	mov	r0, r4
   1a75c:	bl	12f18 <_start@@Base+0x480>
   1a760:	ldr	r1, [pc, #988]	; 1ab44 <test_clone_slice@@Base+0xa80>
   1a764:	bl	12990 <strcmp@plt>
   1a768:	cmp	r0, #0
   1a76c:	bne	1aa30 <test_clone_slice@@Base+0x96c>
   1a770:	ldr	r9, [sl, r9]
   1a774:	sub	r9, r4, r9
   1a778:	ldrh	sl, [r9]
   1a77c:	cmp	sl, #53	; 0x35
   1a780:	bls	1aa40 <test_clone_slice@@Base+0x97c>
   1a784:	ldrh	r3, [r9, #52]	; 0x34
   1a788:	cmp	r3, #0
   1a78c:	beq	1aa40 <test_clone_slice@@Base+0x97c>
   1a790:	add	r0, r4, r3
   1a794:	ldr	r3, [r4, r3]
   1a798:	add	r3, r3, #4
   1a79c:	adds	r0, r0, r3
   1a7a0:	beq	1aa40 <test_clone_slice@@Base+0x97c>
   1a7a4:	ldr	r3, [r0, #-4]
   1a7a8:	cmp	r3, #7
   1a7ac:	bne	1aa40 <test_clone_slice@@Base+0x97c>
   1a7b0:	mov	r2, #7
   1a7b4:	add	r1, sp, #12
   1a7b8:	bl	129c0 <memcmp@plt>
   1a7bc:	cmp	r0, #0
   1a7c0:	bne	1aa50 <test_clone_slice@@Base+0x98c>
   1a7c4:	cmp	r8, #53	; 0x35
   1a7c8:	bls	1aa60 <test_clone_slice@@Base+0x99c>
   1a7cc:	ldrh	r3, [r6, #52]	; 0x34
   1a7d0:	cmp	r3, #0
   1a7d4:	beq	1aa60 <test_clone_slice@@Base+0x99c>
   1a7d8:	add	r0, r5, r3
   1a7dc:	ldr	r3, [r5, r3]
   1a7e0:	add	r3, r3, #4
   1a7e4:	adds	r0, r0, r3
   1a7e8:	beq	1aa60 <test_clone_slice@@Base+0x99c>
   1a7ec:	ldr	r3, [r0, #-4]
   1a7f0:	cmp	r3, #4
   1a7f4:	bne	1aa60 <test_clone_slice@@Base+0x99c>
   1a7f8:	mov	r2, #4
   1a7fc:	add	r1, sp, #15
   1a800:	bl	129c0 <memcmp@plt>
   1a804:	subs	fp, r0, #0
   1a808:	bne	1aa70 <test_clone_slice@@Base+0x9ac>
   1a80c:	cmp	r8, #5
   1a810:	movls	r3, #0
   1a814:	bls	1a828 <test_clone_slice@@Base+0x764>
   1a818:	ldrh	r3, [r6, #4]
   1a81c:	cmp	r3, #0
   1a820:	addne	r3, r5, r3
   1a824:	moveq	r3, #0
   1a828:	vldr	s14, [r3]
   1a82c:	vldr	s15, [pc, #740]	; 1ab18 <test_clone_slice@@Base+0xa54>
   1a830:	vcmp.f32	s14, s15
   1a834:	vmrs	APSR_nzcv, fpscr
   1a838:	bne	1aa80 <test_clone_slice@@Base+0x9bc>
   1a83c:	cmp	r8, #23
   1a840:	bls	1aa90 <test_clone_slice@@Base+0x9cc>
   1a844:	ldrh	r3, [r6, #22]
   1a848:	cmp	r3, #0
   1a84c:	beq	1aa90 <test_clone_slice@@Base+0x9cc>
   1a850:	add	r2, r5, r3
   1a854:	ldr	r3, [r5, r3]
   1a858:	add	r3, r3, #4
   1a85c:	adds	r1, r2, r3
   1a860:	beq	1aa90 <test_clone_slice@@Base+0x9cc>
   1a864:	ldr	r0, [r1, #-4]
   1a868:	cmp	r0, #2
   1a86c:	bne	1aa90 <test_clone_slice@@Base+0x9cc>
   1a870:	ldrsh	r0, [r2, r3]
   1a874:	cmp	r0, #22
   1a878:	bne	1aaa0 <test_clone_slice@@Base+0x9dc>
   1a87c:	ldrsh	r3, [r2, r3]
   1a880:	cmp	r3, #22
   1a884:	bne	1aab0 <test_clone_slice@@Base+0x9ec>
   1a888:	cmn	r1, #4
   1a88c:	beq	1aac0 <test_clone_slice@@Base+0x9fc>
   1a890:	ldrsh	r3, [r1, #4]
   1a894:	cmp	r3, #44	; 0x2c
   1a898:	bne	1aac0 <test_clone_slice@@Base+0x9fc>
   1a89c:	cmp	sl, #23
   1a8a0:	bls	1aad0 <test_clone_slice@@Base+0xa0c>
   1a8a4:	ldrh	r3, [r9, #22]
   1a8a8:	cmp	r3, #0
   1a8ac:	beq	1aad0 <test_clone_slice@@Base+0xa0c>
   1a8b0:	add	r2, r4, r3
   1a8b4:	ldr	r3, [r4, r3]
   1a8b8:	add	r3, r3, #4
   1a8bc:	adds	r1, r2, r3
   1a8c0:	beq	1aad0 <test_clone_slice@@Base+0xa0c>
   1a8c4:	ldr	r1, [r1, #-4]
   1a8c8:	cmp	r1, #1
   1a8cc:	bne	1aad0 <test_clone_slice@@Base+0xa0c>
   1a8d0:	ldrsh	r3, [r2, r3]
   1a8d4:	cmp	r3, #44	; 0x2c
   1a8d8:	bne	1aae0 <test_clone_slice@@Base+0xa1c>
   1a8dc:	mov	r0, r7
   1a8e0:	bl	21a64 <flatcc_builder_aligned_free@@Base>
   1a8e4:	mov	r0, fp
   1a8e8:	add	sp, sp, #28
   1a8ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a8f0:	ldr	r3, [pc, #592]	; 1ab48 <test_clone_slice@@Base+0xa84>
   1a8f4:	mov	r2, #235	; 0xeb
   1a8f8:	ldr	r1, [pc, #588]	; 1ab4c <test_clone_slice@@Base+0xa88>
   1a8fc:	ldr	r0, [pc, #588]	; 1ab50 <test_clone_slice@@Base+0xa8c>
   1a900:	bl	12a8c <__assert_fail@plt>
   1a904:	ldr	r3, [pc, #584]	; 1ab54 <test_clone_slice@@Base+0xa90>
   1a908:	ldr	r2, [pc, #584]	; 1ab58 <test_clone_slice@@Base+0xa94>
   1a90c:	ldr	r1, [pc, #584]	; 1ab5c <test_clone_slice@@Base+0xa98>
   1a910:	ldr	r0, [pc, #584]	; 1ab60 <test_clone_slice@@Base+0xa9c>
   1a914:	bl	12a8c <__assert_fail@plt>
   1a918:	ldr	r3, [pc, #580]	; 1ab64 <test_clone_slice@@Base+0xaa0>
   1a91c:	ldr	r2, [pc, #580]	; 1ab68 <test_clone_slice@@Base+0xaa4>
   1a920:	ldr	r1, [pc, #580]	; 1ab6c <test_clone_slice@@Base+0xaa8>
   1a924:	ldr	r0, [pc, #580]	; 1ab70 <test_clone_slice@@Base+0xaac>
   1a928:	bl	12a8c <__assert_fail@plt>
   1a92c:	ldr	r3, [pc, #544]	; 1ab54 <test_clone_slice@@Base+0xa90>
   1a930:	ldr	r2, [pc, #572]	; 1ab74 <test_clone_slice@@Base+0xab0>
   1a934:	ldr	r1, [pc, #544]	; 1ab5c <test_clone_slice@@Base+0xa98>
   1a938:	ldr	r0, [pc, #568]	; 1ab78 <test_clone_slice@@Base+0xab4>
   1a93c:	bl	12a8c <__assert_fail@plt>
   1a940:	ldr	r3, [pc, #524]	; 1ab54 <test_clone_slice@@Base+0xa90>
   1a944:	ldr	r2, [pc, #560]	; 1ab7c <test_clone_slice@@Base+0xab8>
   1a948:	ldr	r1, [pc, #524]	; 1ab5c <test_clone_slice@@Base+0xa98>
   1a94c:	ldr	r0, [pc, #556]	; 1ab80 <test_clone_slice@@Base+0xabc>
   1a950:	bl	12a8c <__assert_fail@plt>
   1a954:	ldr	r3, [pc, #492]	; 1ab48 <test_clone_slice@@Base+0xa84>
   1a958:	mov	r2, #235	; 0xeb
   1a95c:	ldr	r1, [pc, #488]	; 1ab4c <test_clone_slice@@Base+0xa88>
   1a960:	ldr	r0, [pc, #488]	; 1ab50 <test_clone_slice@@Base+0xa8c>
   1a964:	bl	12a8c <__assert_fail@plt>
   1a968:	ldr	r3, [pc, #472]	; 1ab48 <test_clone_slice@@Base+0xa84>
   1a96c:	mov	r2, #235	; 0xeb
   1a970:	ldr	r1, [pc, #468]	; 1ab4c <test_clone_slice@@Base+0xa88>
   1a974:	ldr	r0, [pc, #468]	; 1ab50 <test_clone_slice@@Base+0xa8c>
   1a978:	bl	12a8c <__assert_fail@plt>
   1a97c:	ldr	r3, [pc, #512]	; 1ab84 <test_clone_slice@@Base+0xac0>
   1a980:	mov	r2, #712	; 0x2c8
   1a984:	ldr	r1, [pc, #480]	; 1ab6c <test_clone_slice@@Base+0xaa8>
   1a988:	ldr	r0, [pc, #480]	; 1ab70 <test_clone_slice@@Base+0xaac>
   1a98c:	bl	12a8c <__assert_fail@plt>
   1a990:	ldr	r3, [pc, #496]	; 1ab88 <test_clone_slice@@Base+0xac4>
   1a994:	mov	r2, #108	; 0x6c
   1a998:	ldr	r1, [pc, #492]	; 1ab8c <test_clone_slice@@Base+0xac8>
   1a99c:	ldr	r0, [pc, #492]	; 1ab90 <test_clone_slice@@Base+0xacc>
   1a9a0:	bl	12a8c <__assert_fail@plt>
   1a9a4:	ldr	r0, [pc, #488]	; 1ab94 <test_clone_slice@@Base+0xad0>
   1a9a8:	bl	129f0 <puts@plt>
   1a9ac:	mvn	fp, #0
   1a9b0:	b	1a8dc <test_clone_slice@@Base+0x818>
   1a9b4:	ldr	r3, [pc, #460]	; 1ab88 <test_clone_slice@@Base+0xac4>
   1a9b8:	mov	r2, #108	; 0x6c
   1a9bc:	ldr	r1, [pc, #456]	; 1ab8c <test_clone_slice@@Base+0xac8>
   1a9c0:	ldr	r0, [pc, #456]	; 1ab90 <test_clone_slice@@Base+0xacc>
   1a9c4:	bl	12a8c <__assert_fail@plt>
   1a9c8:	ldr	r0, [pc, #456]	; 1ab98 <test_clone_slice@@Base+0xad4>
   1a9cc:	bl	129f0 <puts@plt>
   1a9d0:	mvn	fp, #0
   1a9d4:	b	1a8dc <test_clone_slice@@Base+0x818>
   1a9d8:	ldr	r0, [pc, #444]	; 1ab9c <test_clone_slice@@Base+0xad8>
   1a9dc:	bl	129f0 <puts@plt>
   1a9e0:	mvn	fp, #0
   1a9e4:	b	1a8dc <test_clone_slice@@Base+0x818>
   1a9e8:	ldr	r3, [pc, #408]	; 1ab88 <test_clone_slice@@Base+0xac4>
   1a9ec:	mov	r2, #108	; 0x6c
   1a9f0:	ldr	r1, [pc, #404]	; 1ab8c <test_clone_slice@@Base+0xac8>
   1a9f4:	ldr	r0, [pc, #404]	; 1ab90 <test_clone_slice@@Base+0xacc>
   1a9f8:	bl	12a8c <__assert_fail@plt>
   1a9fc:	ldr	r0, [pc, #412]	; 1aba0 <test_clone_slice@@Base+0xadc>
   1aa00:	bl	129f0 <puts@plt>
   1aa04:	mvn	fp, #0
   1aa08:	b	1a8dc <test_clone_slice@@Base+0x818>
   1aa0c:	ldr	r0, [pc, #400]	; 1aba4 <test_clone_slice@@Base+0xae0>
   1aa10:	bl	129f0 <puts@plt>
   1aa14:	mvn	fp, #0
   1aa18:	b	1a8dc <test_clone_slice@@Base+0x818>
   1aa1c:	ldr	r3, [pc, #304]	; 1ab54 <test_clone_slice@@Base+0xa90>
   1aa20:	mov	r2, #1664	; 0x680
   1aa24:	ldr	r1, [pc, #304]	; 1ab5c <test_clone_slice@@Base+0xa98>
   1aa28:	ldr	r0, [pc, #376]	; 1aba8 <test_clone_slice@@Base+0xae4>
   1aa2c:	bl	12a8c <__assert_fail@plt>
   1aa30:	ldr	r0, [pc, #372]	; 1abac <test_clone_slice@@Base+0xae8>
   1aa34:	bl	1299c <printf@plt>
   1aa38:	mvn	fp, #0
   1aa3c:	b	1a8dc <test_clone_slice@@Base+0x818>
   1aa40:	ldr	r0, [pc, #360]	; 1abb0 <test_clone_slice@@Base+0xaec>
   1aa44:	bl	129f0 <puts@plt>
   1aa48:	mvn	fp, #0
   1aa4c:	b	1a8dc <test_clone_slice@@Base+0x818>
   1aa50:	ldr	r0, [pc, #348]	; 1abb4 <test_clone_slice@@Base+0xaf0>
   1aa54:	bl	129f0 <puts@plt>
   1aa58:	mvn	fp, #0
   1aa5c:	b	1a8dc <test_clone_slice@@Base+0x818>
   1aa60:	ldr	r0, [pc, #336]	; 1abb8 <test_clone_slice@@Base+0xaf4>
   1aa64:	bl	129f0 <puts@plt>
   1aa68:	mvn	fp, #0
   1aa6c:	b	1a8dc <test_clone_slice@@Base+0x818>
   1aa70:	ldr	r0, [pc, #324]	; 1abbc <test_clone_slice@@Base+0xaf8>
   1aa74:	bl	129f0 <puts@plt>
   1aa78:	mvn	fp, #0
   1aa7c:	b	1a8dc <test_clone_slice@@Base+0x818>
   1aa80:	ldr	r0, [pc, #312]	; 1abc0 <test_clone_slice@@Base+0xafc>
   1aa84:	bl	129f0 <puts@plt>
   1aa88:	mvn	fp, #0
   1aa8c:	b	1a8dc <test_clone_slice@@Base+0x818>
   1aa90:	ldr	r0, [pc, #300]	; 1abc4 <test_clone_slice@@Base+0xb00>
   1aa94:	bl	129f0 <puts@plt>
   1aa98:	mvn	fp, #0
   1aa9c:	b	1a8dc <test_clone_slice@@Base+0x818>
   1aaa0:	ldr	r0, [pc, #288]	; 1abc8 <test_clone_slice@@Base+0xb04>
   1aaa4:	bl	129f0 <puts@plt>
   1aaa8:	mvn	fp, #0
   1aaac:	b	1a8dc <test_clone_slice@@Base+0x818>
   1aab0:	ldr	r0, [pc, #276]	; 1abcc <test_clone_slice@@Base+0xb08>
   1aab4:	bl	129f0 <puts@plt>
   1aab8:	mvn	fp, #0
   1aabc:	b	1a8dc <test_clone_slice@@Base+0x818>
   1aac0:	ldr	r0, [pc, #264]	; 1abd0 <test_clone_slice@@Base+0xb0c>
   1aac4:	bl	129f0 <puts@plt>
   1aac8:	mvn	fp, #0
   1aacc:	b	1a8dc <test_clone_slice@@Base+0x818>
   1aad0:	ldr	r0, [pc, #252]	; 1abd4 <test_clone_slice@@Base+0xb10>
   1aad4:	bl	129f0 <puts@plt>
   1aad8:	mvn	fp, #0
   1aadc:	b	1a8dc <test_clone_slice@@Base+0x818>
   1aae0:	ldr	r0, [pc, #240]	; 1abd8 <test_clone_slice@@Base+0xb14>
   1aae4:	bl	129f0 <puts@plt>
   1aae8:	mvn	fp, #0
   1aaec:	b	1a8dc <test_clone_slice@@Base+0x818>
   1aaf0:	mov	r0, #0
   1aaf4:	bl	12f18 <_start@@Base+0x480>
   1aaf8:	ldr	r1, [pc, #32]	; 1ab20 <test_clone_slice@@Base+0xa5c>
   1aafc:	bl	12990 <strcmp@plt>
   1ab00:	cmp	r0, #0
   1ab04:	beq	1a97c <test_clone_slice@@Base+0x8b8>
   1ab08:	ldr	r0, [pc, #204]	; 1abdc <test_clone_slice@@Base+0xb18>
   1ab0c:	bl	129f0 <puts@plt>
   1ab10:	mvn	fp, #0
   1ab14:	b	1a8dc <test_clone_slice@@Base+0x818>
   1ab18:	eorgt	r3, r9, #-872415232	; 0xcc000000
   1ab1c:	andeq	r4, r2, r0, asr r0
   1ab20:			; <UNDEFINED> instruction: 0x000258b4
   1ab24:	eorgt	r3, r9, #-872415232	; 0xcc000000
   1ab28:	andeq	r3, r2, r4, ror #16
   1ab2c:	andeq	r8, r3, r0, ror r0
   1ab30:	andeq	r5, r2, r0, asr #17
   1ab34:	movtpl	r4, #61261	; 0xef4d
   1ab38:	andeq	r5, r2, ip, ror #17
   1ab3c:			; <UNDEFINED> instruction: 0x000258b8
   1ab40:	andeq	r5, r2, r0, lsr #19
   1ab44:	andeq	r5, r2, r4, lsr r9
   1ab48:	andeq	r3, r2, r8, ror #16
   1ab4c:	andeq	r4, r2, r8, asr r0
   1ab50:	andeq	r4, r2, r8, ror #3
   1ab54:	andeq	r3, r2, r8, ror #19
   1ab58:	andeq	r0, r0, r4, asr #12
   1ab5c:	ldrdeq	r4, [r2], -ip
   1ab60:	andeq	r4, r2, r4, lsl #28
   1ab64:	strdeq	r3, [r2], -ip
   1ab68:	andeq	r0, r0, sl, asr #5
   1ab6c:	andeq	r3, r2, ip, ror sp
   1ab70:	andeq	r3, r2, r0, ror #27
   1ab74:	andeq	r0, r0, r6, asr #12
   1ab78:	ldrdeq	r5, [r2], -ip
   1ab7c:	andeq	r0, r0, r8, asr #12
   1ab80:	andeq	r5, r2, r4, ror #17
   1ab84:	andeq	r3, r2, r4, lsr #20
   1ab88:	andeq	r3, r2, ip, lsr #13
   1ab8c:	andeq	r3, r2, r8, lsl #28
   1ab90:	andeq	r3, r2, r0, ror lr
   1ab94:	andeq	r5, r2, r0, lsr #18
   1ab98:	andeq	r5, r2, r0, asr #18
   1ab9c:	andeq	r5, r2, r4, ror #18
   1aba0:	andeq	r5, r2, r0, lsl #19
   1aba4:	andeq	r5, r2, r4, lsr #19
   1aba8:	andeq	r4, r2, r0, lsr r9
   1abac:			; <UNDEFINED> instruction: 0x000259bc
   1abb0:	andeq	r5, r2, ip, ror #19
   1abb4:	andeq	r5, r2, r8, lsl #20
   1abb8:	andeq	r5, r2, r8, lsr #20
   1abbc:	andeq	r5, r2, r4, asr #20
   1abc0:	andeq	r5, r2, r4, ror #20
   1abc4:	andeq	r5, r2, r0, lsl #21
   1abc8:			; <UNDEFINED> instruction: 0x00025ab4
   1abcc:	ldrdeq	r5, [r2], -r0
   1abd0:	strdeq	r5, [r2], -ip
   1abd4:	andeq	r5, r2, r8, lsl fp
   1abd8:	andeq	r5, r2, r8, lsr fp
   1abdc:	andeq	r5, r2, r4, lsl #18

0001abe0 <test_create_add_field@@Base>:
   1abe0:	push	{r4, r5, lr}
   1abe4:	sub	sp, sp, #12
   1abe8:	mov	r4, r0
   1abec:	bl	1e238 <flatcc_builder_reset@@Base>
   1abf0:	mov	r3, #0
   1abf4:	mov	r2, r3
   1abf8:	ldr	r1, [pc, #620]	; 1ae6c <test_create_add_field@@Base+0x28c>
   1abfc:	mov	r0, r4
   1ac00:	bl	1e9d8 <flatcc_builder_start_buffer@@Base>
   1ac04:	cmp	r0, #0
   1ac08:	bne	1ac18 <test_create_add_field@@Base+0x38>
   1ac0c:	mov	r1, #36	; 0x24
   1ac10:	mov	r0, r4
   1ac14:	bl	1f804 <flatcc_builder_start_table@@Base>
   1ac18:	ldr	r1, [pc, #592]	; 1ae70 <test_create_add_field@@Base+0x290>
   1ac1c:	mov	r0, r4
   1ac20:	bl	2108c <flatcc_builder_create_string_str@@Base>
   1ac24:	subs	r5, r0, #0
   1ac28:	beq	1ac40 <test_create_add_field@@Base+0x60>
   1ac2c:	mov	r1, #3
   1ac30:	mov	r0, r4
   1ac34:	bl	213cc <flatcc_builder_table_add_offset@@Base>
   1ac38:	cmp	r0, #0
   1ac3c:	strne	r5, [r0]
   1ac40:	ldr	r1, [pc, #556]	; 1ae74 <test_create_add_field@@Base+0x294>
   1ac44:	mov	r0, r4
   1ac48:	bl	2108c <flatcc_builder_create_string_str@@Base>
   1ac4c:	mov	r5, r0
   1ac50:	mov	r1, #3
   1ac54:	mov	r0, r4
   1ac58:	bl	1f804 <flatcc_builder_start_table@@Base>
   1ac5c:	cmp	r0, #0
   1ac60:	bne	1ad0c <test_create_add_field@@Base+0x12c>
   1ac64:	mov	r3, #8
   1ac68:	mov	r2, r3
   1ac6c:	mov	r1, #1
   1ac70:	mov	r0, r4
   1ac74:	bl	21200 <flatcc_builder_table_add@@Base>
   1ac78:	cmp	r0, #0
   1ac7c:	beq	1ad0c <test_create_add_field@@Base+0x12c>
   1ac80:	mvn	r2, #99	; 0x63
   1ac84:	mvn	r3, #0
   1ac88:	strd	r2, [r0]
   1ac8c:	cmp	r5, #0
   1ac90:	beq	1ad0c <test_create_add_field@@Base+0x12c>
   1ac94:	mov	r1, #0
   1ac98:	mov	r0, r4
   1ac9c:	bl	213cc <flatcc_builder_table_add_offset@@Base>
   1aca0:	cmp	r0, #0
   1aca4:	beq	1ad0c <test_create_add_field@@Base+0x12c>
   1aca8:	str	r5, [r0]
   1acac:	mov	r3, #2
   1acb0:	mov	r2, r3
   1acb4:	mov	r1, r3
   1acb8:	mov	r0, r4
   1acbc:	bl	21200 <flatcc_builder_table_add@@Base>
   1acc0:	cmp	r0, #0
   1acc4:	beq	1ad0c <test_create_add_field@@Base+0x12c>
   1acc8:	mov	r3, #2
   1accc:	strh	r3, [r0]
   1acd0:	mov	r2, #0
   1acd4:	ldr	r1, [pc, #412]	; 1ae78 <test_create_add_field@@Base+0x298>
   1acd8:	mov	r0, r4
   1acdc:	bl	201a8 <flatcc_builder_check_required@@Base>
   1ace0:	cmp	r0, #0
   1ace4:	beq	1adfc <test_create_add_field@@Base+0x21c>
   1ace8:	mov	r0, r4
   1acec:	bl	20254 <flatcc_builder_end_table@@Base>
   1acf0:	subs	r5, r0, #0
   1acf4:	beq	1ad0c <test_create_add_field@@Base+0x12c>
   1acf8:	mov	r1, #14
   1acfc:	mov	r0, r4
   1ad00:	bl	213cc <flatcc_builder_table_add_offset@@Base>
   1ad04:	cmp	r0, #0
   1ad08:	strne	r5, [r0]
   1ad0c:	mov	r2, #1
   1ad10:	ldr	r1, [pc, #356]	; 1ae7c <test_create_add_field@@Base+0x29c>
   1ad14:	mov	r0, r4
   1ad18:	bl	201a8 <flatcc_builder_check_required@@Base>
   1ad1c:	cmp	r0, #0
   1ad20:	beq	1ae10 <test_create_add_field@@Base+0x230>
   1ad24:	mov	r0, r4
   1ad28:	bl	20254 <flatcc_builder_end_table@@Base>
   1ad2c:	mov	r1, r0
   1ad30:	mov	r0, r4
   1ad34:	bl	1ea90 <flatcc_builder_end_buffer@@Base>
   1ad38:	add	r1, sp, #4
   1ad3c:	mov	r0, r4
   1ad40:	bl	21958 <flatcc_builder_finalize_aligned_buffer@@Base>
   1ad44:	subs	r4, r0, #0
   1ad48:	beq	1ae24 <test_create_add_field@@Base+0x244>
   1ad4c:	ldr	r2, [r4, #4]
   1ad50:	ldr	r3, [pc, #296]	; 1ae80 <test_create_add_field@@Base+0x2a0>
   1ad54:	cmp	r2, r3
   1ad58:	bne	1ae24 <test_create_add_field@@Base+0x244>
   1ad5c:	ldr	r3, [r4]
   1ad60:	adds	r1, r4, r3
   1ad64:	beq	1ae24 <test_create_add_field@@Base+0x244>
   1ad68:	ldr	r3, [r4, r3]
   1ad6c:	sub	r3, r1, r3
   1ad70:	ldrh	r2, [r3]
   1ad74:	cmp	r2, #29
   1ad78:	bls	1ad88 <test_create_add_field@@Base+0x1a8>
   1ad7c:	ldrh	r0, [r3, #28]
   1ad80:	cmp	r0, #0
   1ad84:	bne	1ae38 <test_create_add_field@@Base+0x258>
   1ad88:	cmp	r2, #33	; 0x21
   1ad8c:	bls	1ae48 <test_create_add_field@@Base+0x268>
   1ad90:	ldrh	r3, [r3, #32]
   1ad94:	cmp	r3, #0
   1ad98:	beq	1ae48 <test_create_add_field@@Base+0x268>
   1ad9c:	add	r2, r1, r3
   1ada0:	ldr	r3, [r1, r3]
   1ada4:	adds	r1, r2, r3
   1ada8:	beq	1ae48 <test_create_add_field@@Base+0x268>
   1adac:	ldr	r3, [r2, r3]
   1adb0:	sub	r3, r1, r3
   1adb4:	ldrh	r2, [r3]
   1adb8:	cmp	r2, #7
   1adbc:	bls	1ae5c <test_create_add_field@@Base+0x27c>
   1adc0:	ldrh	r3, [r3, #6]
   1adc4:	cmp	r3, #0
   1adc8:	beq	1ae5c <test_create_add_field@@Base+0x27c>
   1adcc:	ldrd	r0, [r1, r3]
   1add0:	mvn	r2, #99	; 0x63
   1add4:	mvn	r3, #0
   1add8:	cmp	r1, r3
   1addc:	cmpeq	r0, r2
   1ade0:	moveq	r5, #0
   1ade4:	bne	1ae5c <test_create_add_field@@Base+0x27c>
   1ade8:	mov	r0, r4
   1adec:	bl	21a64 <flatcc_builder_aligned_free@@Base>
   1adf0:	mov	r0, r5
   1adf4:	add	sp, sp, #12
   1adf8:	pop	{r4, r5, pc}
   1adfc:	ldr	r3, [pc, #128]	; 1ae84 <test_create_add_field@@Base+0x2a4>
   1ae00:	mov	r2, #221	; 0xdd
   1ae04:	ldr	r1, [pc, #124]	; 1ae88 <test_create_add_field@@Base+0x2a8>
   1ae08:	ldr	r0, [pc, #124]	; 1ae8c <test_create_add_field@@Base+0x2ac>
   1ae0c:	bl	12a8c <__assert_fail@plt>
   1ae10:	ldr	r3, [pc, #120]	; 1ae90 <test_create_add_field@@Base+0x2b0>
   1ae14:	mov	r2, #235	; 0xeb
   1ae18:	ldr	r1, [pc, #104]	; 1ae88 <test_create_add_field@@Base+0x2a8>
   1ae1c:	ldr	r0, [pc, #112]	; 1ae94 <test_create_add_field@@Base+0x2b4>
   1ae20:	bl	12a8c <__assert_fail@plt>
   1ae24:	ldr	r3, [pc, #108]	; 1ae98 <test_create_add_field@@Base+0x2b8>
   1ae28:	mov	r2, #716	; 0x2cc
   1ae2c:	ldr	r1, [pc, #104]	; 1ae9c <test_create_add_field@@Base+0x2bc>
   1ae30:	ldr	r0, [pc, #104]	; 1aea0 <test_create_add_field@@Base+0x2c0>
   1ae34:	bl	12a8c <__assert_fail@plt>
   1ae38:	ldr	r0, [pc, #100]	; 1aea4 <test_create_add_field@@Base+0x2c4>
   1ae3c:	bl	129f0 <puts@plt>
   1ae40:	mvn	r5, #0
   1ae44:	b	1ade8 <test_create_add_field@@Base+0x208>
   1ae48:	ldr	r3, [pc, #88]	; 1aea8 <test_create_add_field@@Base+0x2c8>
   1ae4c:	mov	r2, #608	; 0x260
   1ae50:	ldr	r1, [pc, #68]	; 1ae9c <test_create_add_field@@Base+0x2bc>
   1ae54:	ldr	r0, [pc, #68]	; 1aea0 <test_create_add_field@@Base+0x2c0>
   1ae58:	bl	12a8c <__assert_fail@plt>
   1ae5c:	ldr	r0, [pc, #72]	; 1aeac <test_create_add_field@@Base+0x2cc>
   1ae60:	bl	129f0 <puts@plt>
   1ae64:	mvn	r5, #0
   1ae68:	b	1ade8 <test_create_add_field@@Base+0x208>
   1ae6c:	andeq	r4, r2, r0, asr r0
   1ae70:	ldrdeq	r4, [r2], -ip
   1ae74:	andeq	r5, r2, ip, asr fp
   1ae78:	andeq	r3, r2, ip, asr #18
   1ae7c:	andeq	r3, r2, r4, ror #16
   1ae80:	movtpl	r4, #61261	; 0xef4d
   1ae84:	andeq	r3, r2, r0, asr r9
   1ae88:	andeq	r4, r2, r8, asr r0
   1ae8c:	andeq	r4, r2, ip, lsl #28
   1ae90:	andeq	r3, r2, r8, ror #16
   1ae94:	andeq	r4, r2, r8, ror #3
   1ae98:	andeq	r3, r2, r0, asr sl
   1ae9c:	andeq	r3, r2, ip, ror sp
   1aea0:	andeq	r3, r2, r0, ror #27
   1aea4:	andeq	r5, r2, r4, ror #22
   1aea8:	andeq	r3, r2, r8, ror sl
   1aeac:	muleq	r2, r4, fp

0001aeb0 <test_union_vector@@Base>:
   1aeb0:	push	{r4, r5, r6, lr}
   1aeb4:	sub	sp, sp, #24
   1aeb8:	mov	r4, r0
   1aebc:	bl	1e238 <flatcc_builder_reset@@Base>
   1aec0:	mov	r3, #0
   1aec4:	mov	r2, r3
   1aec8:	ldr	r1, [pc, #840]	; 1b218 <test_union_vector@@Base+0x368>
   1aecc:	mov	r0, r4
   1aed0:	bl	1e9d8 <flatcc_builder_start_buffer@@Base>
   1aed4:	cmp	r0, #0
   1aed8:	bne	1aee8 <test_union_vector@@Base+0x38>
   1aedc:	mov	r1, #36	; 0x24
   1aee0:	mov	r0, r4
   1aee4:	bl	1f804 <flatcc_builder_start_table@@Base>
   1aee8:	ldr	r1, [pc, #812]	; 1b21c <test_union_vector@@Base+0x36c>
   1aeec:	mov	r0, r4
   1aef0:	bl	2108c <flatcc_builder_create_string_str@@Base>
   1aef4:	subs	r5, r0, #0
   1aef8:	beq	1af10 <test_union_vector@@Base+0x60>
   1aefc:	mov	r1, #3
   1af00:	mov	r0, r4
   1af04:	bl	213cc <flatcc_builder_table_add_offset@@Base>
   1af08:	cmp	r0, #0
   1af0c:	strne	r5, [r0]
   1af10:	mov	r1, #4
   1af14:	mov	r0, r4
   1af18:	bl	1f804 <flatcc_builder_start_table@@Base>
   1af1c:	cmp	r0, #0
   1af20:	bne	1af60 <test_union_vector@@Base+0xb0>
   1af24:	mov	r2, #0
   1af28:	ldr	r1, [pc, #752]	; 1b220 <test_union_vector@@Base+0x370>
   1af2c:	mov	r0, r4
   1af30:	bl	201a8 <flatcc_builder_check_required@@Base>
   1af34:	cmp	r0, #0
   1af38:	beq	1af4c <test_union_vector@@Base+0x9c>
   1af3c:	mov	r0, r4
   1af40:	bl	20254 <flatcc_builder_end_table@@Base>
   1af44:	mov	r5, r0
   1af48:	b	1af64 <test_union_vector@@Base+0xb4>
   1af4c:	ldr	r3, [pc, #720]	; 1b224 <test_union_vector@@Base+0x374>
   1af50:	mov	r2, #217	; 0xd9
   1af54:	ldr	r1, [pc, #716]	; 1b228 <test_union_vector@@Base+0x378>
   1af58:	ldr	r0, [pc, #716]	; 1b22c <test_union_vector@@Base+0x37c>
   1af5c:	bl	12a8c <__assert_fail@plt>
   1af60:	mov	r5, #0
   1af64:	mov	r0, r4
   1af68:	bl	20aa0 <flatcc_builder_start_union_vector@@Base>
   1af6c:	mov	r3, #2
   1af70:	strb	r3, [sp, #4]
   1af74:	str	r5, [sp, #8]
   1af78:	add	r3, sp, #4
   1af7c:	ldm	r3, {r1, r2}
   1af80:	mov	r0, r4
   1af84:	bl	20dd4 <flatcc_builder_union_vector_push@@Base>
   1af88:	mov	r1, r4
   1af8c:	add	r0, sp, #12
   1af90:	bl	20b18 <flatcc_builder_end_union_vector@@Base>
   1af94:	mov	r1, #4
   1af98:	mov	r0, r4
   1af9c:	bl	1f804 <flatcc_builder_start_table@@Base>
   1afa0:	ldr	r5, [sp, #12]
   1afa4:	ldr	r6, [sp, #16]
   1afa8:	cmp	r5, #0
   1afac:	cmpne	r6, #0
   1afb0:	bne	1b108 <test_union_vector@@Base+0x258>
   1afb4:	mov	r2, #0
   1afb8:	ldr	r1, [pc, #624]	; 1b230 <test_union_vector@@Base+0x380>
   1afbc:	mov	r0, r4
   1afc0:	bl	201a8 <flatcc_builder_check_required@@Base>
   1afc4:	cmp	r0, #0
   1afc8:	beq	1b138 <test_union_vector@@Base+0x288>
   1afcc:	mov	r0, r4
   1afd0:	bl	20254 <flatcc_builder_end_table@@Base>
   1afd4:	subs	r5, r0, #0
   1afd8:	beq	1b014 <test_union_vector@@Base+0x164>
   1afdc:	mov	r3, #1
   1afe0:	mov	r2, r3
   1afe4:	mov	r1, #7
   1afe8:	mov	r0, r4
   1afec:	bl	21200 <flatcc_builder_table_add@@Base>
   1aff0:	subs	r6, r0, #0
   1aff4:	beq	1b014 <test_union_vector@@Base+0x164>
   1aff8:	mov	r1, #8
   1affc:	mov	r0, r4
   1b000:	bl	213cc <flatcc_builder_table_add_offset@@Base>
   1b004:	cmp	r0, #0
   1b008:	movne	r3, #4
   1b00c:	strbne	r3, [r6]
   1b010:	strne	r5, [r0]
   1b014:	mov	r2, #1
   1b018:	ldr	r1, [pc, #532]	; 1b234 <test_union_vector@@Base+0x384>
   1b01c:	mov	r0, r4
   1b020:	bl	201a8 <flatcc_builder_check_required@@Base>
   1b024:	cmp	r0, #0
   1b028:	beq	1b14c <test_union_vector@@Base+0x29c>
   1b02c:	mov	r0, r4
   1b030:	bl	20254 <flatcc_builder_end_table@@Base>
   1b034:	mov	r1, r0
   1b038:	mov	r0, r4
   1b03c:	bl	1ea90 <flatcc_builder_end_buffer@@Base>
   1b040:	add	r1, sp, #20
   1b044:	mov	r0, r4
   1b048:	bl	21958 <flatcc_builder_finalize_aligned_buffer@@Base>
   1b04c:	mov	r4, r0
   1b050:	ldr	r3, [pc, #480]	; 1b238 <test_union_vector@@Base+0x388>
   1b054:	ldr	r2, [pc, #444]	; 1b218 <test_union_vector@@Base+0x368>
   1b058:	ldr	r1, [sp, #20]
   1b05c:	bl	22dd4 <flatcc_verify_table_as_root@@Base>
   1b060:	subs	r5, r0, #0
   1b064:	bne	1b160 <test_union_vector@@Base+0x2b0>
   1b068:	cmp	r4, #0
   1b06c:	beq	1b17c <test_union_vector@@Base+0x2cc>
   1b070:	ldr	r2, [r4, #4]
   1b074:	ldr	r3, [pc, #448]	; 1b23c <test_union_vector@@Base+0x38c>
   1b078:	cmp	r2, r3
   1b07c:	bne	1b17c <test_union_vector@@Base+0x2cc>
   1b080:	ldr	r3, [r4]
   1b084:	adds	r2, r4, r3
   1b088:	beq	1b17c <test_union_vector@@Base+0x2cc>
   1b08c:	ldr	r3, [r4, r3]
   1b090:	sub	r3, r2, r3
   1b094:	ldrh	r1, [r3]
   1b098:	cmp	r1, #19
   1b09c:	bls	1b190 <test_union_vector@@Base+0x2e0>
   1b0a0:	ldrh	r0, [r3, #18]
   1b0a4:	cmp	r0, #0
   1b0a8:	beq	1b190 <test_union_vector@@Base+0x2e0>
   1b0ac:	ldrb	r0, [r2, r0]
   1b0b0:	cmp	r0, #4
   1b0b4:	bne	1b190 <test_union_vector@@Base+0x2e0>
   1b0b8:	cmp	r1, #21
   1b0bc:	bls	1b0fc <test_union_vector@@Base+0x24c>
   1b0c0:	ldrh	r3, [r3, #20]
   1b0c4:	cmp	r3, #0
   1b0c8:	beq	1b0fc <test_union_vector@@Base+0x24c>
   1b0cc:	add	r1, r2, r3
   1b0d0:	ldr	r3, [r2, r3]
   1b0d4:	adds	r2, r1, r3
   1b0d8:	beq	1b0fc <test_union_vector@@Base+0x24c>
   1b0dc:	ldr	r3, [r1, r3]
   1b0e0:	sub	r3, r2, r3
   1b0e4:	ldrh	r1, [r3]
   1b0e8:	cmp	r1, #11
   1b0ec:	bls	1b1ac <test_union_vector@@Base+0x2fc>
   1b0f0:	ldrh	r0, [r3, #10]
   1b0f4:	cmp	r0, #0
   1b0f8:	beq	1b1ac <test_union_vector@@Base+0x2fc>
   1b0fc:	ldr	r0, [pc, #316]	; 1b240 <test_union_vector@@Base+0x390>
   1b100:	bl	129f0 <puts@plt>
   1b104:	b	1b198 <test_union_vector@@Base+0x2e8>
   1b108:	mov	r1, #2
   1b10c:	mov	r0, r4
   1b110:	bl	213cc <flatcc_builder_table_add_offset@@Base>
   1b114:	cmp	r0, #0
   1b118:	beq	1afb4 <test_union_vector@@Base+0x104>
   1b11c:	str	r5, [r0]
   1b120:	mov	r1, #3
   1b124:	mov	r0, r4
   1b128:	bl	213cc <flatcc_builder_table_add_offset@@Base>
   1b12c:	cmp	r0, #0
   1b130:	strne	r6, [r0]
   1b134:	b	1afb4 <test_union_vector@@Base+0x104>
   1b138:	ldr	r3, [pc, #260]	; 1b244 <test_union_vector@@Base+0x394>
   1b13c:	mov	r2, #223	; 0xdf
   1b140:	ldr	r1, [pc, #224]	; 1b228 <test_union_vector@@Base+0x378>
   1b144:	ldr	r0, [pc, #252]	; 1b248 <test_union_vector@@Base+0x398>
   1b148:	bl	12a8c <__assert_fail@plt>
   1b14c:	ldr	r3, [pc, #248]	; 1b24c <test_union_vector@@Base+0x39c>
   1b150:	mov	r2, #235	; 0xeb
   1b154:	ldr	r1, [pc, #204]	; 1b228 <test_union_vector@@Base+0x378>
   1b158:	ldr	r0, [pc, #240]	; 1b250 <test_union_vector@@Base+0x3a0>
   1b15c:	bl	12a8c <__assert_fail@plt>
   1b160:	mov	r0, r5
   1b164:	bl	220f4 <flatcc_verify_error_string@@Base>
   1b168:	mov	r1, r0
   1b16c:	ldr	r0, [pc, #224]	; 1b254 <test_union_vector@@Base+0x3a4>
   1b170:	bl	1299c <printf@plt>
   1b174:	mvn	r5, #0
   1b178:	b	1b1a0 <test_union_vector@@Base+0x2f0>
   1b17c:	ldr	r3, [pc, #212]	; 1b258 <test_union_vector@@Base+0x3a8>
   1b180:	ldr	r2, [pc, #212]	; 1b25c <test_union_vector@@Base+0x3ac>
   1b184:	ldr	r1, [pc, #212]	; 1b260 <test_union_vector@@Base+0x3b0>
   1b188:	ldr	r0, [pc, #212]	; 1b264 <test_union_vector@@Base+0x3b4>
   1b18c:	bl	12a8c <__assert_fail@plt>
   1b190:	ldr	r0, [pc, #208]	; 1b268 <test_union_vector@@Base+0x3b8>
   1b194:	bl	1299c <printf@plt>
   1b198:	mov	r0, r4
   1b19c:	bl	21a64 <flatcc_builder_aligned_free@@Base>
   1b1a0:	mov	r0, r5
   1b1a4:	add	sp, sp, #24
   1b1a8:	pop	{r4, r5, r6, pc}
   1b1ac:	cmp	r1, #9
   1b1b0:	bls	1b1e0 <test_union_vector@@Base+0x330>
   1b1b4:	ldrh	r3, [r3, #8]
   1b1b8:	cmp	r3, #0
   1b1bc:	beq	1b1e0 <test_union_vector@@Base+0x330>
   1b1c0:	add	r1, r2, r3
   1b1c4:	ldr	r3, [r2, r3]
   1b1c8:	add	r3, r3, #4
   1b1cc:	adds	r2, r1, r3
   1b1d0:	beq	1b1e0 <test_union_vector@@Base+0x330>
   1b1d4:	ldr	r2, [r2, #-4]
   1b1d8:	cmp	r2, #1
   1b1dc:	beq	1b1ec <test_union_vector@@Base+0x33c>
   1b1e0:	ldr	r0, [pc, #132]	; 1b26c <test_union_vector@@Base+0x3bc>
   1b1e4:	bl	129f0 <puts@plt>
   1b1e8:	b	1b198 <test_union_vector@@Base+0x2e8>
   1b1ec:	ldrb	r3, [r1, r3]
   1b1f0:	cmp	r3, #2
   1b1f4:	beq	1b204 <test_union_vector@@Base+0x354>
   1b1f8:	ldr	r0, [pc, #112]	; 1b270 <test_union_vector@@Base+0x3c0>
   1b1fc:	bl	129f0 <puts@plt>
   1b200:	b	1b198 <test_union_vector@@Base+0x2e8>
   1b204:	ldr	r3, [pc, #104]	; 1b274 <test_union_vector@@Base+0x3c4>
   1b208:	mov	r2, #117	; 0x75
   1b20c:	ldr	r1, [pc, #100]	; 1b278 <test_union_vector@@Base+0x3c8>
   1b210:	ldr	r0, [pc, #100]	; 1b27c <test_union_vector@@Base+0x3cc>
   1b214:	bl	12a8c <__assert_fail@plt>
   1b218:	andeq	r4, r2, r0, asr r0
   1b21c:	andeq	r5, r2, r8, lsr #23
   1b220:	muleq	r2, r0, sl
   1b224:	muleq	r2, r4, sl
   1b228:	andeq	r4, r2, r8, asr r0
   1b22c:			; <UNDEFINED> instruction: 0x00025bb0
   1b230:	andeq	r3, r2, r0, asr #21
   1b234:	andeq	r3, r2, r4, ror #16
   1b238:	ldrdeq	r3, [r1], -r4
   1b23c:	movtpl	r4, #61261	; 0xef4d
   1b240:	andeq	r5, r2, ip, ror sp
   1b244:	andeq	r3, r2, r4, asr #21
   1b248:	andeq	r5, r2, r4, lsl #25
   1b24c:	andeq	r3, r2, r8, ror #16
   1b250:	andeq	r4, r2, r8, ror #3
   1b254:	andeq	r5, r2, ip, lsl sp
   1b258:	andeq	r3, r2, r8, ror #13
   1b25c:	andeq	r0, r0, sp, asr #5
   1b260:	andeq	r3, r2, ip, ror sp
   1b264:	andeq	r3, r2, r0, ror #27
   1b268:	andeq	r5, r2, r8, asr sp
   1b26c:	andeq	r5, r2, r4, lsr #27
   1b270:	andeq	r5, r2, ip, asr #27
   1b274:	andeq	r3, r2, r4, asr #14
   1b278:	andeq	r3, r2, r8, lsl #28
   1b27c:	andeq	r3, r2, r0, ror lr

0001b280 <test_mixed_type_union@@Base>:
   1b280:	push	{r4, r5, r6, r7, r8, r9, lr}
   1b284:	sub	sp, sp, #116	; 0x74
   1b288:	mov	r4, r0
   1b28c:	bl	1e238 <flatcc_builder_reset@@Base>
   1b290:	mov	r3, #0
   1b294:	mov	r2, r3
   1b298:	ldr	r1, [pc, #2948]	; 1be24 <test_mixed_type_union@@Base+0xba4>
   1b29c:	mov	r0, r4
   1b2a0:	bl	1e9d8 <flatcc_builder_start_buffer@@Base>
   1b2a4:	cmp	r0, #0
   1b2a8:	bne	1b2b8 <test_mixed_type_union@@Base+0x38>
   1b2ac:	mov	r1, #10
   1b2b0:	mov	r0, r4
   1b2b4:	bl	1f804 <flatcc_builder_start_table@@Base>
   1b2b8:	mov	r2, #4
   1b2bc:	mov	r1, r2
   1b2c0:	mov	r0, r4
   1b2c4:	bl	1ebcc <flatcc_builder_start_struct@@Base>
   1b2c8:	cmp	r0, #0
   1b2cc:	moveq	r6, #0
   1b2d0:	beq	1b2e8 <test_mixed_type_union@@Base+0x68>
   1b2d4:	mov	r3, #10
   1b2d8:	str	r3, [r0]
   1b2dc:	mov	r0, r4
   1b2e0:	bl	1ec74 <flatcc_builder_end_struct@@Base>
   1b2e4:	mov	r6, r0
   1b2e8:	mov	r2, #2
   1b2ec:	mov	r1, r2
   1b2f0:	mov	r0, r4
   1b2f4:	bl	1ebcc <flatcc_builder_start_struct@@Base>
   1b2f8:	cmp	r0, #0
   1b2fc:	beq	1bde4 <test_mixed_type_union@@Base+0xb64>
   1b300:	mov	r3, #22
   1b304:	strh	r3, [r0]
   1b308:	mov	r0, r4
   1b30c:	bl	1ec74 <flatcc_builder_end_struct@@Base>
   1b310:	mov	r5, r0
   1b314:	mov	r2, #2
   1b318:	mov	r1, r2
   1b31c:	mov	r0, r4
   1b320:	bl	1ebcc <flatcc_builder_start_struct@@Base>
   1b324:	cmp	r0, #0
   1b328:	beq	1b37c <test_mixed_type_union@@Base+0xfc>
   1b32c:	mov	r3, #19
   1b330:	strh	r3, [r0]
   1b334:	mov	r0, r4
   1b338:	bl	1ec74 <flatcc_builder_end_struct@@Base>
   1b33c:	subs	r8, r0, #0
   1b340:	beq	1b37c <test_mixed_type_union@@Base+0xfc>
   1b344:	mov	r3, #1
   1b348:	mov	r2, r3
   1b34c:	mov	r1, #0
   1b350:	mov	r0, r4
   1b354:	bl	21200 <flatcc_builder_table_add@@Base>
   1b358:	subs	r7, r0, #0
   1b35c:	beq	1b37c <test_mixed_type_union@@Base+0xfc>
   1b360:	mov	r1, #1
   1b364:	mov	r0, r4
   1b368:	bl	213cc <flatcc_builder_table_add_offset@@Base>
   1b36c:	cmp	r0, #0
   1b370:	movne	r3, #8
   1b374:	strbne	r3, [r7]
   1b378:	strne	r8, [r0]
   1b37c:	cmp	r5, #0
   1b380:	beq	1b3bc <test_mixed_type_union@@Base+0x13c>
   1b384:	mov	r3, #1
   1b388:	mov	r2, r3
   1b38c:	mov	r1, #6
   1b390:	mov	r0, r4
   1b394:	bl	21200 <flatcc_builder_table_add@@Base>
   1b398:	subs	r7, r0, #0
   1b39c:	beq	1b3bc <test_mixed_type_union@@Base+0x13c>
   1b3a0:	mov	r1, #7
   1b3a4:	mov	r0, r4
   1b3a8:	bl	213cc <flatcc_builder_table_add_offset@@Base>
   1b3ac:	cmp	r0, #0
   1b3b0:	movne	r3, #8
   1b3b4:	strbne	r3, [r7]
   1b3b8:	strne	r5, [r0]
   1b3bc:	mov	r1, #1
   1b3c0:	mov	r0, r4
   1b3c4:	bl	1f804 <flatcc_builder_start_table@@Base>
   1b3c8:	cmp	r0, #0
   1b3cc:	bne	1b550 <test_mixed_type_union@@Base+0x2d0>
   1b3d0:	mov	r3, #4
   1b3d4:	mov	r2, r3
   1b3d8:	mov	r1, #0
   1b3dc:	mov	r0, r4
   1b3e0:	bl	21200 <flatcc_builder_table_add@@Base>
   1b3e4:	cmp	r0, #0
   1b3e8:	beq	1b558 <test_mixed_type_union@@Base+0x2d8>
   1b3ec:	mov	r3, #42	; 0x2a
   1b3f0:	str	r3, [r0]
   1b3f4:	mov	r2, #0
   1b3f8:	ldr	r1, [pc, #2600]	; 1be28 <test_mixed_type_union@@Base+0xba8>
   1b3fc:	mov	r0, r4
   1b400:	bl	201a8 <flatcc_builder_check_required@@Base>
   1b404:	cmp	r0, #0
   1b408:	beq	1b53c <test_mixed_type_union@@Base+0x2bc>
   1b40c:	mov	r0, r4
   1b410:	bl	20254 <flatcc_builder_end_table@@Base>
   1b414:	subs	r7, r0, #0
   1b418:	beq	1b454 <test_mixed_type_union@@Base+0x1d4>
   1b41c:	mov	r3, #1
   1b420:	mov	r2, r3
   1b424:	mov	r1, #2
   1b428:	mov	r0, r4
   1b42c:	bl	21200 <flatcc_builder_table_add@@Base>
   1b430:	subs	r8, r0, #0
   1b434:	beq	1b454 <test_mixed_type_union@@Base+0x1d4>
   1b438:	mov	r1, #3
   1b43c:	mov	r0, r4
   1b440:	bl	213cc <flatcc_builder_table_add_offset@@Base>
   1b444:	cmp	r0, #0
   1b448:	movne	r3, #2
   1b44c:	strbne	r3, [r8]
   1b450:	strne	r7, [r0]
   1b454:	ldr	r1, [pc, #2512]	; 1be2c <test_mixed_type_union@@Base+0xbac>
   1b458:	mov	r0, r4
   1b45c:	bl	2108c <flatcc_builder_create_string_str@@Base>
   1b460:	subs	r8, r0, #0
   1b464:	beq	1b4a0 <test_mixed_type_union@@Base+0x220>
   1b468:	mov	r3, #1
   1b46c:	mov	r2, r3
   1b470:	mov	r1, #4
   1b474:	mov	r0, r4
   1b478:	bl	21200 <flatcc_builder_table_add@@Base>
   1b47c:	subs	r9, r0, #0
   1b480:	beq	1b4a0 <test_mixed_type_union@@Base+0x220>
   1b484:	mov	r1, #5
   1b488:	mov	r0, r4
   1b48c:	bl	213cc <flatcc_builder_table_add_offset@@Base>
   1b490:	cmp	r0, #0
   1b494:	movne	r3, #11
   1b498:	strbne	r3, [r9]
   1b49c:	strne	r8, [r0]
   1b4a0:	mov	r0, r4
   1b4a4:	bl	20aa0 <flatcc_builder_start_union_vector@@Base>
   1b4a8:	mov	r3, #8
   1b4ac:	strb	r3, [sp, #44]	; 0x2c
   1b4b0:	str	r5, [sp, #48]	; 0x30
   1b4b4:	add	r3, sp, #44	; 0x2c
   1b4b8:	ldm	r3, {r1, r2}
   1b4bc:	mov	r0, r4
   1b4c0:	bl	20dd4 <flatcc_builder_union_vector_push@@Base>
   1b4c4:	mov	r3, #2
   1b4c8:	strb	r3, [sp, #36]	; 0x24
   1b4cc:	str	r7, [sp, #40]	; 0x28
   1b4d0:	add	r3, sp, #36	; 0x24
   1b4d4:	ldm	r3, {r1, r2}
   1b4d8:	mov	r0, r4
   1b4dc:	bl	20dd4 <flatcc_builder_union_vector_push@@Base>
   1b4e0:	mov	r1, #1
   1b4e4:	mov	r0, r4
   1b4e8:	bl	1f804 <flatcc_builder_start_table@@Base>
   1b4ec:	cmp	r0, #0
   1b4f0:	bne	1b574 <test_mixed_type_union@@Base+0x2f4>
   1b4f4:	mov	r3, #4
   1b4f8:	mov	r2, r3
   1b4fc:	mov	r1, #0
   1b500:	mov	r0, r4
   1b504:	bl	21200 <flatcc_builder_table_add@@Base>
   1b508:	cmp	r0, #0
   1b50c:	beq	1b890 <test_mixed_type_union@@Base+0x610>
   1b510:	mov	r3, #1
   1b514:	str	r3, [r0]
   1b518:	mov	r2, #0
   1b51c:	ldr	r1, [pc, #2308]	; 1be28 <test_mixed_type_union@@Base+0xba8>
   1b520:	mov	r0, r4
   1b524:	bl	201a8 <flatcc_builder_check_required@@Base>
   1b528:	cmp	r0, #0
   1b52c:	beq	1b560 <test_mixed_type_union@@Base+0x2e0>
   1b530:	mov	r0, r4
   1b534:	bl	20254 <flatcc_builder_end_table@@Base>
   1b538:	b	1b578 <test_mixed_type_union@@Base+0x2f8>
   1b53c:	ldr	r3, [pc, #2284]	; 1be30 <test_mixed_type_union@@Base+0xbb0>
   1b540:	mov	r2, #239	; 0xef
   1b544:	ldr	r1, [pc, #2280]	; 1be34 <test_mixed_type_union@@Base+0xbb4>
   1b548:	ldr	r0, [pc, #2280]	; 1be38 <test_mixed_type_union@@Base+0xbb8>
   1b54c:	bl	12a8c <__assert_fail@plt>
   1b550:	mov	r7, #0
   1b554:	b	1b454 <test_mixed_type_union@@Base+0x1d4>
   1b558:	mov	r7, #0
   1b55c:	b	1b454 <test_mixed_type_union@@Base+0x1d4>
   1b560:	ldr	r3, [pc, #2248]	; 1be30 <test_mixed_type_union@@Base+0xbb0>
   1b564:	mov	r2, #239	; 0xef
   1b568:	ldr	r1, [pc, #2244]	; 1be34 <test_mixed_type_union@@Base+0xbb4>
   1b56c:	ldr	r0, [pc, #2244]	; 1be38 <test_mixed_type_union@@Base+0xbb8>
   1b570:	bl	12a8c <__assert_fail@plt>
   1b574:	mov	r0, #0
   1b578:	mov	r3, #2
   1b57c:	strb	r3, [sp, #76]	; 0x4c
   1b580:	str	r0, [sp, #80]	; 0x50
   1b584:	add	r3, sp, #76	; 0x4c
   1b588:	ldm	r3, {r1, r2}
   1b58c:	mov	r0, r4
   1b590:	bl	20dd4 <flatcc_builder_union_vector_push@@Base>
   1b594:	ldr	r1, [pc, #2208]	; 1be3c <test_mixed_type_union@@Base+0xbbc>
   1b598:	mov	r0, r4
   1b59c:	bl	2108c <flatcc_builder_create_string_str@@Base>
   1b5a0:	mov	r3, #11
   1b5a4:	strb	r3, [sp, #28]
   1b5a8:	str	r0, [sp, #32]
   1b5ac:	add	r3, sp, #28
   1b5b0:	ldm	r3, {r1, r2}
   1b5b4:	mov	r0, r4
   1b5b8:	bl	20dd4 <flatcc_builder_union_vector_push@@Base>
   1b5bc:	mov	r5, #9
   1b5c0:	strb	r5, [sp, #20]
   1b5c4:	str	r6, [sp, #24]
   1b5c8:	add	r3, sp, #20
   1b5cc:	ldm	r3, {r1, r2}
   1b5d0:	mov	r0, r4
   1b5d4:	bl	20dd4 <flatcc_builder_union_vector_push@@Base>
   1b5d8:	mov	r2, #4
   1b5dc:	mov	r1, r2
   1b5e0:	mov	r0, r4
   1b5e4:	bl	1ebcc <flatcc_builder_start_struct@@Base>
   1b5e8:	mov	r3, #3
   1b5ec:	str	r3, [r0]
   1b5f0:	mov	r0, r4
   1b5f4:	bl	1ec74 <flatcc_builder_end_struct@@Base>
   1b5f8:	strb	r5, [sp, #68]	; 0x44
   1b5fc:	str	r0, [sp, #72]	; 0x48
   1b600:	add	r3, sp, #68	; 0x44
   1b604:	ldm	r3, {r1, r2}
   1b608:	mov	r0, r4
   1b60c:	bl	20dd4 <flatcc_builder_union_vector_push@@Base>
   1b610:	mov	r2, #4
   1b614:	mov	r1, r2
   1b618:	mov	r0, r4
   1b61c:	bl	1ebcc <flatcc_builder_start_struct@@Base>
   1b620:	cmp	r0, #0
   1b624:	moveq	r0, #0
   1b628:	beq	1b63c <test_mixed_type_union@@Base+0x3bc>
   1b62c:	mov	r3, #1
   1b630:	str	r3, [r0]
   1b634:	mov	r0, r4
   1b638:	bl	1ec74 <flatcc_builder_end_struct@@Base>
   1b63c:	mov	r3, #9
   1b640:	strb	r3, [sp, #12]
   1b644:	str	r0, [sp, #16]
   1b648:	add	r3, sp, #12
   1b64c:	ldm	r3, {r1, r2}
   1b650:	mov	r0, r4
   1b654:	bl	20dd4 <flatcc_builder_union_vector_push@@Base>
   1b658:	mov	r2, #4
   1b65c:	mov	r1, r2
   1b660:	mov	r0, r4
   1b664:	bl	1ebcc <flatcc_builder_start_struct@@Base>
   1b668:	cmp	r0, #0
   1b66c:	moveq	r0, #0
   1b670:	beq	1b684 <test_mixed_type_union@@Base+0x404>
   1b674:	mov	r3, #2
   1b678:	str	r3, [r0]
   1b67c:	mov	r0, r4
   1b680:	bl	1ec74 <flatcc_builder_end_struct@@Base>
   1b684:	mov	r3, #9
   1b688:	strb	r3, [sp, #60]	; 0x3c
   1b68c:	str	r0, [sp, #64]	; 0x40
   1b690:	add	r3, sp, #60	; 0x3c
   1b694:	ldm	r3, {r1, r2}
   1b698:	mov	r0, r4
   1b69c:	bl	20dd4 <flatcc_builder_union_vector_push@@Base>
   1b6a0:	ldr	r1, [pc, #1944]	; 1be40 <test_mixed_type_union@@Base+0xbc0>
   1b6a4:	mov	r0, r4
   1b6a8:	bl	2108c <flatcc_builder_create_string_str@@Base>
   1b6ac:	mov	r5, #11
   1b6b0:	strb	r5, [sp, #4]
   1b6b4:	str	r0, [sp, #8]
   1b6b8:	add	r3, sp, #4
   1b6bc:	ldm	r3, {r1, r2}
   1b6c0:	mov	r0, r4
   1b6c4:	bl	20dd4 <flatcc_builder_union_vector_push@@Base>
   1b6c8:	ldr	r1, [pc, #1908]	; 1be44 <test_mixed_type_union@@Base+0xbc4>
   1b6cc:	mov	r0, r4
   1b6d0:	bl	2108c <flatcc_builder_create_string_str@@Base>
   1b6d4:	strb	r5, [sp, #52]	; 0x34
   1b6d8:	str	r0, [sp, #56]	; 0x38
   1b6dc:	add	r3, sp, #52	; 0x34
   1b6e0:	ldm	r3, {r1, r2}
   1b6e4:	mov	r0, r4
   1b6e8:	bl	20dd4 <flatcc_builder_union_vector_push@@Base>
   1b6ec:	mov	r1, r4
   1b6f0:	add	r0, sp, #104	; 0x68
   1b6f4:	bl	20b18 <flatcc_builder_end_union_vector@@Base>
   1b6f8:	ldr	r5, [sp, #104]	; 0x68
   1b6fc:	ldr	r6, [sp, #108]	; 0x6c
   1b700:	cmp	r5, #0
   1b704:	cmpne	r6, #0
   1b708:	bne	1b898 <test_mixed_type_union@@Base+0x618>
   1b70c:	mov	r2, #0
   1b710:	ldr	r1, [pc, #1840]	; 1be48 <test_mixed_type_union@@Base+0xbc8>
   1b714:	mov	r0, r4
   1b718:	bl	201a8 <flatcc_builder_check_required@@Base>
   1b71c:	cmp	r0, #0
   1b720:	beq	1b8c8 <test_mixed_type_union@@Base+0x648>
   1b724:	mov	r0, r4
   1b728:	bl	20254 <flatcc_builder_end_table@@Base>
   1b72c:	mov	r1, r0
   1b730:	mov	r0, r4
   1b734:	bl	1ea90 <flatcc_builder_end_buffer@@Base>
   1b738:	add	r1, sp, #100	; 0x64
   1b73c:	mov	r0, r4
   1b740:	bl	21958 <flatcc_builder_finalize_aligned_buffer@@Base>
   1b744:	mov	r4, r0
   1b748:	ldr	r3, [pc, #1788]	; 1be4c <test_mixed_type_union@@Base+0xbcc>
   1b74c:	ldr	r3, [r3]
   1b750:	ldr	r2, [sp, #100]	; 0x64
   1b754:	mov	r1, r0
   1b758:	ldr	r0, [pc, #1776]	; 1be50 <test_mixed_type_union@@Base+0xbd0>
   1b75c:	bl	134b0 <_start@@Base+0xa18>
   1b760:	ldr	r3, [pc, #1772]	; 1be54 <test_mixed_type_union@@Base+0xbd4>
   1b764:	ldr	r2, [pc, #1720]	; 1be24 <test_mixed_type_union@@Base+0xba4>
   1b768:	ldr	r1, [sp, #100]	; 0x64
   1b76c:	mov	r0, r4
   1b770:	bl	22dd4 <flatcc_verify_table_as_root@@Base>
   1b774:	cmp	r0, #0
   1b778:	bne	1b8dc <test_mixed_type_union@@Base+0x65c>
   1b77c:	cmp	r4, #0
   1b780:	beq	1b8f4 <test_mixed_type_union@@Base+0x674>
   1b784:	ldr	r2, [r4, #4]
   1b788:	ldr	r3, [pc, #1736]	; 1be58 <test_mixed_type_union@@Base+0xbd8>
   1b78c:	cmp	r2, r3
   1b790:	bne	1b8f4 <test_mixed_type_union@@Base+0x674>
   1b794:	ldr	r1, [r4]
   1b798:	adds	r5, r4, r1
   1b79c:	beq	1b8f4 <test_mixed_type_union@@Base+0x674>
   1b7a0:	ldr	r3, [r4, r1]
   1b7a4:	sub	r3, r5, r3
   1b7a8:	ldrh	r2, [r3]
   1b7ac:	cmp	r2, #7
   1b7b0:	bls	1b908 <test_mixed_type_union@@Base+0x688>
   1b7b4:	ldrh	r0, [r3, #6]
   1b7b8:	cmp	r0, #0
   1b7bc:	beq	1b908 <test_mixed_type_union@@Base+0x688>
   1b7c0:	cmp	r2, #23
   1b7c4:	bls	1b928 <test_mixed_type_union@@Base+0x6a8>
   1b7c8:	ldrh	ip, [r3, #22]
   1b7cc:	cmp	ip, #0
   1b7d0:	beq	1b928 <test_mixed_type_union@@Base+0x6a8>
   1b7d4:	cmp	r2, #5
   1b7d8:	bls	1b938 <test_mixed_type_union@@Base+0x6b8>
   1b7dc:	ldrh	r3, [r3, #4]
   1b7e0:	cmp	r3, #0
   1b7e4:	beq	1b938 <test_mixed_type_union@@Base+0x6b8>
   1b7e8:	ldrb	r3, [r5, r3]
   1b7ec:	cmp	r3, #0
   1b7f0:	beq	1b938 <test_mixed_type_union@@Base+0x6b8>
   1b7f4:	add	ip, r5, r0
   1b7f8:	ldr	r2, [r5, r0]
   1b7fc:	add	r0, ip, r2
   1b800:	cmp	r3, #8
   1b804:	bne	1b938 <test_mixed_type_union@@Base+0x6b8>
   1b808:	cmp	r0, #0
   1b80c:	beq	1b948 <test_mixed_type_union@@Base+0x6c8>
   1b810:	ldrh	r3, [ip, r2]
   1b814:	cmp	r3, #19
   1b818:	bhi	1b960 <test_mixed_type_union@@Base+0x6e0>
   1b81c:	cmp	r3, #18
   1b820:	bls	1b950 <test_mixed_type_union@@Base+0x6d0>
   1b824:	ldr	r6, [r4, r1]
   1b828:	sub	r6, r5, r6
   1b82c:	ldrh	r7, [r6]
   1b830:	cmp	r7, #17
   1b834:	bls	1b970 <test_mixed_type_union@@Base+0x6f0>
   1b838:	ldrh	r3, [r6, #16]
   1b83c:	cmp	r3, #0
   1b840:	beq	1b970 <test_mixed_type_union@@Base+0x6f0>
   1b844:	ldrb	r3, [r5, r3]
   1b848:	cmp	r3, #8
   1b84c:	bne	1b970 <test_mixed_type_union@@Base+0x6f0>
   1b850:	cmp	r7, #19
   1b854:	bls	1b980 <test_mixed_type_union@@Base+0x700>
   1b858:	ldrh	r3, [r6, #18]
   1b85c:	cmp	r3, #0
   1b860:	beq	1b980 <test_mixed_type_union@@Base+0x700>
   1b864:	add	r2, r5, r3
   1b868:	ldr	r3, [r5, r3]
   1b86c:	cmn	r2, r3
   1b870:	beq	1b980 <test_mixed_type_union@@Base+0x700>
   1b874:	ldrh	r3, [r2, r3]
   1b878:	cmp	r3, #22
   1b87c:	beq	1b990 <test_mixed_type_union@@Base+0x710>
   1b880:	ldr	r0, [pc, #1492]	; 1be5c <test_mixed_type_union@@Base+0xbdc>
   1b884:	bl	129f0 <puts@plt>
   1b888:	mvn	r5, #0
   1b88c:	b	1b914 <test_mixed_type_union@@Base+0x694>
   1b890:	mov	r0, #0
   1b894:	b	1b578 <test_mixed_type_union@@Base+0x2f8>
   1b898:	mov	r1, #8
   1b89c:	mov	r0, r4
   1b8a0:	bl	213cc <flatcc_builder_table_add_offset@@Base>
   1b8a4:	cmp	r0, #0
   1b8a8:	beq	1b70c <test_mixed_type_union@@Base+0x48c>
   1b8ac:	str	r5, [r0]
   1b8b0:	mov	r1, #9
   1b8b4:	mov	r0, r4
   1b8b8:	bl	213cc <flatcc_builder_table_add_offset@@Base>
   1b8bc:	cmp	r0, #0
   1b8c0:	strne	r6, [r0]
   1b8c4:	b	1b70c <test_mixed_type_union@@Base+0x48c>
   1b8c8:	ldr	r3, [pc, #1424]	; 1be60 <test_mixed_type_union@@Base+0xbe0>
   1b8cc:	mov	r2, #241	; 0xf1
   1b8d0:	ldr	r1, [pc, #1372]	; 1be34 <test_mixed_type_union@@Base+0xbb4>
   1b8d4:	ldr	r0, [pc, #1416]	; 1be64 <test_mixed_type_union@@Base+0xbe4>
   1b8d8:	bl	12a8c <__assert_fail@plt>
   1b8dc:	bl	220f4 <flatcc_verify_error_string@@Base>
   1b8e0:	mov	r1, r0
   1b8e4:	ldr	r0, [pc, #1404]	; 1be68 <test_mixed_type_union@@Base+0xbe8>
   1b8e8:	bl	1299c <printf@plt>
   1b8ec:	mvn	r5, #0
   1b8f0:	b	1b91c <test_mixed_type_union@@Base+0x69c>
   1b8f4:	ldr	r3, [pc, #1392]	; 1be6c <test_mixed_type_union@@Base+0xbec>
   1b8f8:	ldr	r2, [pc, #1392]	; 1be70 <test_mixed_type_union@@Base+0xbf0>
   1b8fc:	ldr	r1, [pc, #1392]	; 1be74 <test_mixed_type_union@@Base+0xbf4>
   1b900:	ldr	r0, [pc, #1392]	; 1be78 <test_mixed_type_union@@Base+0xbf8>
   1b904:	bl	12a8c <__assert_fail@plt>
   1b908:	ldr	r0, [pc, #1388]	; 1be7c <test_mixed_type_union@@Base+0xbfc>
   1b90c:	bl	129f0 <puts@plt>
   1b910:	mvn	r5, #0
   1b914:	mov	r0, r4
   1b918:	bl	21a64 <flatcc_builder_aligned_free@@Base>
   1b91c:	mov	r0, r5
   1b920:	add	sp, sp, #116	; 0x74
   1b924:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1b928:	ldr	r0, [pc, #1360]	; 1be80 <test_mixed_type_union@@Base+0xc00>
   1b92c:	bl	129f0 <puts@plt>
   1b930:	mvn	r5, #0
   1b934:	b	1b914 <test_mixed_type_union@@Base+0x694>
   1b938:	ldr	r0, [pc, #1348]	; 1be84 <test_mixed_type_union@@Base+0xc04>
   1b93c:	bl	129f0 <puts@plt>
   1b940:	mvn	r5, #0
   1b944:	b	1b914 <test_mixed_type_union@@Base+0x694>
   1b948:	ldr	r0, [pc, #1336]	; 1be88 <test_mixed_type_union@@Base+0xc08>
   1b94c:	bl	129f0 <puts@plt>
   1b950:	ldr	r0, [pc, #1332]	; 1be8c <test_mixed_type_union@@Base+0xc0c>
   1b954:	bl	129f0 <puts@plt>
   1b958:	mvn	r5, #0
   1b95c:	b	1b914 <test_mixed_type_union@@Base+0x694>
   1b960:	ldr	r0, [pc, #1320]	; 1be90 <test_mixed_type_union@@Base+0xc10>
   1b964:	bl	129f0 <puts@plt>
   1b968:	mvn	r5, #0
   1b96c:	b	1b914 <test_mixed_type_union@@Base+0x694>
   1b970:	ldr	r0, [pc, #1308]	; 1be94 <test_mixed_type_union@@Base+0xc14>
   1b974:	bl	129f0 <puts@plt>
   1b978:	mvn	r5, #0
   1b97c:	b	1b914 <test_mixed_type_union@@Base+0x694>
   1b980:	ldr	r0, [pc, #1296]	; 1be98 <test_mixed_type_union@@Base+0xc18>
   1b984:	bl	129f0 <puts@plt>
   1b988:	mvn	r5, #0
   1b98c:	b	1b914 <test_mixed_type_union@@Base+0x694>
   1b990:	cmp	r7, #9
   1b994:	bls	1b9f0 <test_mixed_type_union@@Base+0x770>
   1b998:	ldrh	r3, [r6, #8]
   1b99c:	cmp	r3, #0
   1b9a0:	beq	1b9f0 <test_mixed_type_union@@Base+0x770>
   1b9a4:	ldrb	r3, [r5, r3]
   1b9a8:	cmp	r3, #2
   1b9ac:	bne	1b9f0 <test_mixed_type_union@@Base+0x770>
   1b9b0:	cmp	r7, #11
   1b9b4:	bls	1b9e0 <test_mixed_type_union@@Base+0x760>
   1b9b8:	ldrh	r2, [r6, #10]
   1b9bc:	cmp	r2, #0
   1b9c0:	beq	1b9e0 <test_mixed_type_union@@Base+0x760>
   1b9c4:	add	r3, r5, r2
   1b9c8:	ldr	r0, [r5, r2]
   1b9cc:	adds	r0, r3, r0
   1b9d0:	beq	1b9e0 <test_mixed_type_union@@Base+0x760>
   1b9d4:	bl	130e0 <_start@@Base+0x648>
   1b9d8:	cmp	r0, #42	; 0x2a
   1b9dc:	beq	1ba00 <test_mixed_type_union@@Base+0x780>
   1b9e0:	ldr	r0, [pc, #1204]	; 1be9c <test_mixed_type_union@@Base+0xc1c>
   1b9e4:	bl	129f0 <puts@plt>
   1b9e8:	mvn	r5, #0
   1b9ec:	b	1b914 <test_mixed_type_union@@Base+0x694>
   1b9f0:	ldr	r0, [pc, #1192]	; 1bea0 <test_mixed_type_union@@Base+0xc20>
   1b9f4:	bl	129f0 <puts@plt>
   1b9f8:	mvn	r5, #0
   1b9fc:	b	1b914 <test_mixed_type_union@@Base+0x694>
   1ba00:	mov	r0, r5
   1ba04:	bl	13020 <_start@@Base+0x588>
   1ba08:	cmp	r0, #11
   1ba0c:	beq	1ba20 <test_mixed_type_union@@Base+0x7a0>
   1ba10:	ldr	r0, [pc, #1164]	; 1bea4 <test_mixed_type_union@@Base+0xc24>
   1ba14:	bl	129f0 <puts@plt>
   1ba18:	mvn	r5, #0
   1ba1c:	b	1b914 <test_mixed_type_union@@Base+0x694>
   1ba20:	mov	r0, r5
   1ba24:	bl	1307c <_start@@Base+0x5e4>
   1ba28:	cmp	r0, #0
   1ba2c:	beq	1ba38 <test_mixed_type_union@@Base+0x7b8>
   1ba30:	adds	r8, r0, #4
   1ba34:	bne	1ba48 <test_mixed_type_union@@Base+0x7c8>
   1ba38:	ldr	r0, [pc, #1128]	; 1bea8 <test_mixed_type_union@@Base+0xc28>
   1ba3c:	bl	129f0 <puts@plt>
   1ba40:	mvn	r5, #0
   1ba44:	b	1b914 <test_mixed_type_union@@Base+0x694>
   1ba48:	ldr	r1, [pc, #988]	; 1be2c <test_mixed_type_union@@Base+0xbac>
   1ba4c:	mov	r0, r8
   1ba50:	bl	12990 <strcmp@plt>
   1ba54:	cmp	r0, #0
   1ba58:	beq	1ba70 <test_mixed_type_union@@Base+0x7f0>
   1ba5c:	mov	r1, r8
   1ba60:	ldr	r0, [pc, #1092]	; 1beac <test_mixed_type_union@@Base+0xc2c>
   1ba64:	bl	1299c <printf@plt>
   1ba68:	mvn	r5, #0
   1ba6c:	b	1b914 <test_mixed_type_union@@Base+0x694>
   1ba70:	mov	r0, r5
   1ba74:	bl	1313c <_start@@Base+0x6a4>
   1ba78:	mov	r8, r0
   1ba7c:	cmp	r7, #23
   1ba80:	bls	1be08 <test_mixed_type_union@@Base+0xb88>
   1ba84:	ldrh	r3, [r6, #22]
   1ba88:	cmp	r3, #0
   1ba8c:	beq	1be08 <test_mixed_type_union@@Base+0xb88>
   1ba90:	add	r6, r5, r3
   1ba94:	ldr	r3, [r5, r3]
   1ba98:	add	r3, r3, #4
   1ba9c:	add	r6, r6, r3
   1baa0:	cmp	r0, #0
   1baa4:	beq	1bda0 <test_mixed_type_union@@Base+0xb20>
   1baa8:	ldr	r2, [r0, #-4]
   1baac:	cmp	r6, #0
   1bab0:	moveq	r3, #0
   1bab4:	beq	1babc <test_mixed_type_union@@Base+0x83c>
   1bab8:	ldr	r3, [r6, #-4]
   1babc:	cmp	r2, r3
   1bac0:	beq	1bdac <test_mixed_type_union@@Base+0xb2c>
   1bac4:	ldr	r3, [pc, #996]	; 1beb0 <test_mixed_type_union@@Base+0xc30>
   1bac8:	ldr	r2, [pc, #996]	; 1beb4 <test_mixed_type_union@@Base+0xc34>
   1bacc:	ldr	r1, [pc, #928]	; 1be74 <test_mixed_type_union@@Base+0xbf4>
   1bad0:	ldr	r0, [pc, #992]	; 1beb8 <test_mixed_type_union@@Base+0xc38>
   1bad4:	bl	12a8c <__assert_fail@plt>
   1bad8:	mov	r3, #1
   1badc:	add	r2, sp, #92	; 0x5c
   1bae0:	ldm	r2, {r1, r2}
   1bae4:	add	r0, sp, #84	; 0x54
   1bae8:	bl	131a4 <_start@@Base+0x70c>
   1baec:	ldr	r0, [sp, #88]	; 0x58
   1baf0:	ldrb	r3, [sp, #84]	; 0x54
   1baf4:	cmp	r3, #2
   1baf8:	beq	1bb0c <test_mixed_type_union@@Base+0x88c>
   1bafc:	ldr	r0, [pc, #952]	; 1bebc <test_mixed_type_union@@Base+0xc3c>
   1bb00:	bl	1299c <printf@plt>
   1bb04:	mvn	r5, #0
   1bb08:	b	1b914 <test_mixed_type_union@@Base+0x694>
   1bb0c:	bl	130e0 <_start@@Base+0x648>
   1bb10:	cmp	r0, #42	; 0x2a
   1bb14:	beq	1bb28 <test_mixed_type_union@@Base+0x8a8>
   1bb18:	ldr	r0, [pc, #928]	; 1bec0 <test_mixed_type_union@@Base+0xc40>
   1bb1c:	bl	1299c <printf@plt>
   1bb20:	mvn	r5, #0
   1bb24:	b	1b914 <test_mixed_type_union@@Base+0x694>
   1bb28:	mov	r3, #2
   1bb2c:	add	r2, sp, #92	; 0x5c
   1bb30:	ldm	r2, {r1, r2}
   1bb34:	add	r0, sp, #84	; 0x54
   1bb38:	bl	131a4 <_start@@Base+0x70c>
   1bb3c:	ldr	r0, [sp, #88]	; 0x58
   1bb40:	ldrb	r3, [sp, #84]	; 0x54
   1bb44:	cmp	r3, #2
   1bb48:	beq	1bb5c <test_mixed_type_union@@Base+0x8dc>
   1bb4c:	ldr	r0, [pc, #880]	; 1bec4 <test_mixed_type_union@@Base+0xc44>
   1bb50:	bl	1299c <printf@plt>
   1bb54:	mvn	r5, #0
   1bb58:	b	1b914 <test_mixed_type_union@@Base+0x694>
   1bb5c:	bl	130e0 <_start@@Base+0x648>
   1bb60:	cmp	r0, #1
   1bb64:	beq	1bb78 <test_mixed_type_union@@Base+0x8f8>
   1bb68:	ldr	r0, [pc, #856]	; 1bec8 <test_mixed_type_union@@Base+0xc48>
   1bb6c:	bl	1299c <printf@plt>
   1bb70:	mvn	r5, #0
   1bb74:	b	1b914 <test_mixed_type_union@@Base+0x694>
   1bb78:	mov	r0, r5
   1bb7c:	bl	1313c <_start@@Base+0x6a4>
   1bb80:	mov	r1, #3
   1bb84:	bl	12fdc <_start@@Base+0x544>
   1bb88:	cmp	r0, #11
   1bb8c:	beq	1bba0 <test_mixed_type_union@@Base+0x920>
   1bb90:	ldr	r0, [pc, #820]	; 1becc <test_mixed_type_union@@Base+0xc4c>
   1bb94:	bl	129f0 <puts@plt>
   1bb98:	mvn	r5, #0
   1bb9c:	b	1b914 <test_mixed_type_union@@Base+0x694>
   1bba0:	cmp	r6, #0
   1bba4:	beq	1bbb4 <test_mixed_type_union@@Base+0x934>
   1bba8:	ldr	r3, [r6, #-4]
   1bbac:	cmp	r3, #3
   1bbb0:	bhi	1bbc8 <test_mixed_type_union@@Base+0x948>
   1bbb4:	ldr	r3, [pc, #788]	; 1bed0 <test_mixed_type_union@@Base+0xc50>
   1bbb8:	mov	r2, #119	; 0x77
   1bbbc:	ldr	r1, [pc, #784]	; 1bed4 <test_mixed_type_union@@Base+0xc54>
   1bbc0:	ldr	r0, [pc, #784]	; 1bed8 <test_mixed_type_union@@Base+0xc58>
   1bbc4:	bl	12a8c <__assert_fail@plt>
   1bbc8:	ldr	r3, [r6, #12]
   1bbcc:	add	r3, r3, #16
   1bbd0:	adds	r0, r6, r3
   1bbd4:	beq	1bbe8 <test_mixed_type_union@@Base+0x968>
   1bbd8:	ldr	r1, [pc, #604]	; 1be3c <test_mixed_type_union@@Base+0xbbc>
   1bbdc:	bl	12990 <strcmp@plt>
   1bbe0:	cmp	r0, #0
   1bbe4:	beq	1bbf8 <test_mixed_type_union@@Base+0x978>
   1bbe8:	ldr	r0, [pc, #748]	; 1bedc <test_mixed_type_union@@Base+0xc5c>
   1bbec:	bl	129f0 <puts@plt>
   1bbf0:	mvn	r5, #0
   1bbf4:	b	1b914 <test_mixed_type_union@@Base+0x694>
   1bbf8:	mov	r3, #3
   1bbfc:	add	r2, sp, #92	; 0x5c
   1bc00:	ldm	r2, {r1, r2}
   1bc04:	add	r0, sp, #84	; 0x54
   1bc08:	bl	131a4 <_start@@Base+0x70c>
   1bc0c:	ldr	r3, [sp, #88]	; 0x58
   1bc10:	ldrb	r2, [sp, #84]	; 0x54
   1bc14:	cmp	r2, #11
   1bc18:	beq	1bc2c <test_mixed_type_union@@Base+0x9ac>
   1bc1c:	ldr	r0, [pc, #700]	; 1bee0 <test_mixed_type_union@@Base+0xc60>
   1bc20:	bl	1299c <printf@plt>
   1bc24:	mvn	r5, #0
   1bc28:	b	1b914 <test_mixed_type_union@@Base+0x694>
   1bc2c:	cmp	r3, #0
   1bc30:	beq	1bc4c <test_mixed_type_union@@Base+0x9cc>
   1bc34:	adds	r0, r3, #4
   1bc38:	beq	1bc4c <test_mixed_type_union@@Base+0x9cc>
   1bc3c:	ldr	r1, [pc, #504]	; 1be3c <test_mixed_type_union@@Base+0xbbc>
   1bc40:	bl	12990 <strcmp@plt>
   1bc44:	subs	r5, r0, #0
   1bc48:	beq	1bc5c <test_mixed_type_union@@Base+0x9dc>
   1bc4c:	ldr	r0, [pc, #656]	; 1bee4 <test_mixed_type_union@@Base+0xc64>
   1bc50:	bl	129f0 <puts@plt>
   1bc54:	mvn	r5, #0
   1bc58:	b	1b914 <test_mixed_type_union@@Base+0x694>
   1bc5c:	mov	r3, #4
   1bc60:	add	r2, sp, #92	; 0x5c
   1bc64:	ldm	r2, {r1, r2}
   1bc68:	add	r0, sp, #84	; 0x54
   1bc6c:	bl	131a4 <_start@@Base+0x70c>
   1bc70:	ldrb	r3, [sp, #84]	; 0x54
   1bc74:	cmp	r3, #9
   1bc78:	beq	1bc8c <test_mixed_type_union@@Base+0xa0c>
   1bc7c:	ldr	r0, [pc, #612]	; 1bee8 <test_mixed_type_union@@Base+0xc68>
   1bc80:	bl	1299c <printf@plt>
   1bc84:	mvn	r5, #0
   1bc88:	b	1b914 <test_mixed_type_union@@Base+0x694>
   1bc8c:	mov	r3, #5
   1bc90:	add	r2, sp, #92	; 0x5c
   1bc94:	ldm	r2, {r1, r2}
   1bc98:	add	r0, sp, #84	; 0x54
   1bc9c:	bl	131a4 <_start@@Base+0x70c>
   1bca0:	ldrb	r3, [sp, #84]	; 0x54
   1bca4:	cmp	r3, #9
   1bca8:	beq	1bcbc <test_mixed_type_union@@Base+0xa3c>
   1bcac:	ldr	r0, [pc, #568]	; 1beec <test_mixed_type_union@@Base+0xc6c>
   1bcb0:	bl	1299c <printf@plt>
   1bcb4:	mvn	r5, #0
   1bcb8:	b	1b914 <test_mixed_type_union@@Base+0x694>
   1bcbc:	mov	r3, #6
   1bcc0:	add	r2, sp, #92	; 0x5c
   1bcc4:	ldm	r2, {r1, r2}
   1bcc8:	add	r0, sp, #84	; 0x54
   1bccc:	bl	131a4 <_start@@Base+0x70c>
   1bcd0:	ldrb	r3, [sp, #84]	; 0x54
   1bcd4:	cmp	r3, #9
   1bcd8:	beq	1bcec <test_mixed_type_union@@Base+0xa6c>
   1bcdc:	ldr	r0, [pc, #524]	; 1bef0 <test_mixed_type_union@@Base+0xc70>
   1bce0:	bl	1299c <printf@plt>
   1bce4:	mvn	r5, #0
   1bce8:	b	1b914 <test_mixed_type_union@@Base+0x694>
   1bcec:	mov	r3, #7
   1bcf0:	add	r2, sp, #92	; 0x5c
   1bcf4:	ldm	r2, {r1, r2}
   1bcf8:	add	r0, sp, #84	; 0x54
   1bcfc:	bl	131a4 <_start@@Base+0x70c>
   1bd00:	ldrb	r3, [sp, #84]	; 0x54
   1bd04:	cmp	r3, #9
   1bd08:	beq	1bd1c <test_mixed_type_union@@Base+0xa9c>
   1bd0c:	ldr	r0, [pc, #480]	; 1bef4 <test_mixed_type_union@@Base+0xc74>
   1bd10:	bl	1299c <printf@plt>
   1bd14:	mvn	r5, #0
   1bd18:	b	1b914 <test_mixed_type_union@@Base+0x694>
   1bd1c:	mov	r3, #8
   1bd20:	add	r2, sp, #92	; 0x5c
   1bd24:	ldm	r2, {r1, r2}
   1bd28:	add	r0, sp, #84	; 0x54
   1bd2c:	bl	131a4 <_start@@Base+0x70c>
   1bd30:	ldrb	r3, [sp, #84]	; 0x54
   1bd34:	cmp	r3, #11
   1bd38:	beq	1bd4c <test_mixed_type_union@@Base+0xacc>
   1bd3c:	ldr	r0, [pc, #436]	; 1bef8 <test_mixed_type_union@@Base+0xc78>
   1bd40:	bl	1299c <printf@plt>
   1bd44:	mvn	r5, #0
   1bd48:	b	1b914 <test_mixed_type_union@@Base+0x694>
   1bd4c:	mov	r3, #9
   1bd50:	add	r2, sp, #92	; 0x5c
   1bd54:	ldm	r2, {r1, r2}
   1bd58:	add	r0, sp, #84	; 0x54
   1bd5c:	bl	131a4 <_start@@Base+0x70c>
   1bd60:	ldrb	r3, [sp, #84]	; 0x54
   1bd64:	cmp	r3, #11
   1bd68:	beq	1bd7c <test_mixed_type_union@@Base+0xafc>
   1bd6c:	ldr	r0, [pc, #388]	; 1bef8 <test_mixed_type_union@@Base+0xc78>
   1bd70:	bl	1299c <printf@plt>
   1bd74:	mvn	r5, #0
   1bd78:	b	1b914 <test_mixed_type_union@@Base+0x694>
   1bd7c:	cmp	r8, #0
   1bd80:	beq	1bd90 <test_mixed_type_union@@Base+0xb10>
   1bd84:	ldr	r3, [r8, #-4]
   1bd88:	cmp	r3, #10
   1bd8c:	beq	1b914 <test_mixed_type_union@@Base+0x694>
   1bd90:	ldr	r0, [pc, #356]	; 1befc <test_mixed_type_union@@Base+0xc7c>
   1bd94:	bl	1299c <printf@plt>
   1bd98:	mvn	r5, #0
   1bd9c:	b	1b914 <test_mixed_type_union@@Base+0x694>
   1bda0:	cmp	r6, #0
   1bda4:	movne	r2, #0
   1bda8:	bne	1bab8 <test_mixed_type_union@@Base+0x838>
   1bdac:	str	r8, [sp, #92]	; 0x5c
   1bdb0:	str	r6, [sp, #96]	; 0x60
   1bdb4:	mov	r3, #0
   1bdb8:	add	r2, sp, #92	; 0x5c
   1bdbc:	ldm	r2, {r1, r2}
   1bdc0:	add	r0, sp, #84	; 0x54
   1bdc4:	bl	131a4 <_start@@Base+0x70c>
   1bdc8:	ldrb	r3, [sp, #84]	; 0x54
   1bdcc:	cmp	r3, #8
   1bdd0:	beq	1bad8 <test_mixed_type_union@@Base+0x858>
   1bdd4:	ldr	r0, [pc, #292]	; 1bf00 <test_mixed_type_union@@Base+0xc80>
   1bdd8:	bl	1299c <printf@plt>
   1bddc:	mvn	r5, #0
   1bde0:	b	1b914 <test_mixed_type_union@@Base+0x694>
   1bde4:	mov	r2, #2
   1bde8:	mov	r1, r2
   1bdec:	mov	r0, r4
   1bdf0:	bl	1ebcc <flatcc_builder_start_struct@@Base>
   1bdf4:	cmp	r0, #0
   1bdf8:	movne	r5, #0
   1bdfc:	bne	1b32c <test_mixed_type_union@@Base+0xac>
   1be00:	mov	r5, #0
   1be04:	b	1b3bc <test_mixed_type_union@@Base+0x13c>
   1be08:	cmp	r8, #0
   1be0c:	moveq	r6, #0
   1be10:	beq	1bda0 <test_mixed_type_union@@Base+0xb20>
   1be14:	ldr	r2, [r8, #-4]
   1be18:	mov	r6, #0
   1be1c:	mov	r3, r6
   1be20:	b	1babc <test_mixed_type_union@@Base+0x83c>
   1be24:	andeq	r4, r2, r0, asr r0
   1be28:	ldrdeq	r3, [r2], -ip
   1be2c:	andeq	r5, r2, ip, lsl #29
   1be30:	andeq	r3, r2, r0, ror #21
   1be34:	andeq	r4, r2, r8, asr r0
   1be38:	strdeq	r5, [r2], -ip
   1be3c:	muleq	r2, r4, lr
   1be40:	andeq	r5, r2, r0, lsr #29
   1be44:	muleq	r2, ip, lr
   1be48:	strdeq	r3, [r2], -r8
   1be4c:	andeq	r8, r3, r0, ror r0
   1be50:	andeq	r5, r2, r0, lsr pc
   1be54:	andeq	r3, r1, r8, ror sp
   1be58:	movtpl	r4, #61261	; 0xef4d
   1be5c:	ldrdeq	r6, [r2], -r8
   1be60:	strdeq	r3, [r2], -ip
   1be64:	andeq	r5, r2, r8, lsr #29
   1be68:	andeq	r5, r2, r0, asr #30
   1be6c:	andeq	r3, r2, r0, lsl fp
   1be70:	andeq	r0, r0, r3, lsr r3
   1be74:	andeq	r3, r2, ip, ror sp
   1be78:	andeq	r3, r2, r0, ror #27
   1be7c:	muleq	r2, r0, pc	; <UNPREDICTABLE>
   1be80:			; <UNDEFINED> instruction: 0x00025fbc
   1be84:	andeq	r5, r2, r8, ror #31
   1be88:	andeq	r6, r2, r4
   1be8c:	andeq	r6, r2, r4, asr #32
   1be90:	andeq	r6, r2, ip, lsl r0
   1be94:	andeq	r6, r2, r4, ror r0
   1be98:	andeq	r6, r2, r8, lsr #1
   1be9c:	andeq	r6, r2, r0, lsr #2
   1bea0:	andeq	r6, r2, r8, lsl #2
   1bea4:	andeq	r6, r2, r4, asr #2
   1bea8:	andeq	r6, r2, ip, asr r1
   1beac:	andeq	r6, r2, r8, ror r1
   1beb0:	andeq	r3, r2, r8, lsr fp
   1beb4:	andeq	r0, r0, r7, lsr r3
   1beb8:	muleq	r2, ip, r1
   1bebc:	andeq	r6, r2, ip, lsr #4
   1bec0:	andeq	r6, r2, r0, asr r2
   1bec4:	andeq	r6, r2, r4, lsl #5
   1bec8:	andeq	r6, r2, r8, lsr #5
   1becc:	ldrdeq	r6, [r2], -ip
   1bed0:	andeq	r3, r2, r8, asr fp
   1bed4:	andeq	r3, r2, r8, lsl #28
   1bed8:	andeq	r3, r2, r0, ror lr
   1bedc:	andeq	r6, r2, ip, lsl #6
   1bee0:	andeq	r6, r2, r0, asr #6
   1bee4:	andeq	r6, r2, r8, ror r3
   1bee8:			; <UNDEFINED> instruction: 0x000263b8
   1beec:	ldrdeq	r6, [r2], -ip
   1bef0:	andeq	r6, r2, r0, lsl #8
   1bef4:	andeq	r6, r2, r4, lsr #8
   1bef8:	andeq	r6, r2, r8, asr #8
   1befc:	andeq	r6, r2, r4, ror r4
   1bf00:	andeq	r6, r2, r4, lsl #4

0001bf04 <test_add_set_defaults@@Base>:
   1bf04:	push	{r4, r5, lr}
   1bf08:	sub	sp, sp, #12
   1bf0c:	mov	r4, r0
   1bf10:	bl	1e238 <flatcc_builder_reset@@Base>
   1bf14:	mov	r3, #0
   1bf18:	mov	r2, r3
   1bf1c:	ldr	r1, [pc, #796]	; 1c240 <test_add_set_defaults@@Base+0x33c>
   1bf20:	mov	r0, r4
   1bf24:	bl	1e9d8 <flatcc_builder_start_buffer@@Base>
   1bf28:	cmp	r0, #0
   1bf2c:	bne	1bf3c <test_add_set_defaults@@Base+0x38>
   1bf30:	mov	r1, #36	; 0x24
   1bf34:	mov	r0, r4
   1bf38:	bl	1f804 <flatcc_builder_start_table@@Base>
   1bf3c:	ldr	r1, [pc, #768]	; 1c244 <test_add_set_defaults@@Base+0x340>
   1bf40:	mov	r0, r4
   1bf44:	bl	2108c <flatcc_builder_create_string_str@@Base>
   1bf48:	subs	r5, r0, #0
   1bf4c:	beq	1bf64 <test_add_set_defaults@@Base+0x60>
   1bf50:	mov	r1, #3
   1bf54:	mov	r0, r4
   1bf58:	bl	213cc <flatcc_builder_table_add_offset@@Base>
   1bf5c:	cmp	r0, #0
   1bf60:	strne	r5, [r0]
   1bf64:	mov	r3, #2
   1bf68:	mov	r2, r3
   1bf6c:	mov	r1, #1
   1bf70:	mov	r0, r4
   1bf74:	bl	21200 <flatcc_builder_table_add@@Base>
   1bf78:	cmp	r0, #0
   1bf7c:	movne	r3, #100	; 0x64
   1bf80:	strhne	r3, [r0]
   1bf84:	mov	r2, #1
   1bf88:	ldr	r1, [pc, #696]	; 1c248 <test_add_set_defaults@@Base+0x344>
   1bf8c:	mov	r0, r4
   1bf90:	bl	201a8 <flatcc_builder_check_required@@Base>
   1bf94:	cmp	r0, #0
   1bf98:	beq	1c190 <test_add_set_defaults@@Base+0x28c>
   1bf9c:	mov	r0, r4
   1bfa0:	bl	20254 <flatcc_builder_end_table@@Base>
   1bfa4:	mov	r1, r0
   1bfa8:	mov	r0, r4
   1bfac:	bl	1ea90 <flatcc_builder_end_buffer@@Base>
   1bfb0:	add	r1, sp, #4
   1bfb4:	mov	r0, r4
   1bfb8:	bl	2181c <flatcc_builder_get_direct_buffer@@Base>
   1bfbc:	cmp	r0, #0
   1bfc0:	beq	1c1a4 <test_add_set_defaults@@Base+0x2a0>
   1bfc4:	ldr	r2, [r0, #4]
   1bfc8:	ldr	r3, [pc, #636]	; 1c24c <test_add_set_defaults@@Base+0x348>
   1bfcc:	cmp	r2, r3
   1bfd0:	bne	1c1a4 <test_add_set_defaults@@Base+0x2a0>
   1bfd4:	ldr	r2, [r0]
   1bfd8:	adds	r3, r0, r2
   1bfdc:	beq	1c1a4 <test_add_set_defaults@@Base+0x2a0>
   1bfe0:	ldr	r2, [r0, r2]
   1bfe4:	sub	r3, r3, r2
   1bfe8:	ldrh	r2, [r3]
   1bfec:	cmp	r2, #9
   1bff0:	bls	1c000 <test_add_set_defaults@@Base+0xfc>
   1bff4:	ldrh	r1, [r3, #8]
   1bff8:	cmp	r1, #0
   1bffc:	bne	1c1b8 <test_add_set_defaults@@Base+0x2b4>
   1c000:	cmp	r2, #7
   1c004:	bls	1c1c8 <test_add_set_defaults@@Base+0x2c4>
   1c008:	ldrh	r1, [r3, #6]
   1c00c:	cmp	r1, #0
   1c010:	beq	1c1c8 <test_add_set_defaults@@Base+0x2c4>
   1c014:	cmp	r2, #17
   1c018:	bls	1c028 <test_add_set_defaults@@Base+0x124>
   1c01c:	ldrh	r3, [r3, #16]
   1c020:	cmp	r3, #0
   1c024:	bne	1c1d8 <test_add_set_defaults@@Base+0x2d4>
   1c028:	mov	r0, r4
   1c02c:	bl	1e238 <flatcc_builder_reset@@Base>
   1c030:	mov	r3, #0
   1c034:	mov	r2, r3
   1c038:	ldr	r1, [pc, #512]	; 1c240 <test_add_set_defaults@@Base+0x33c>
   1c03c:	mov	r0, r4
   1c040:	bl	1e9d8 <flatcc_builder_start_buffer@@Base>
   1c044:	cmp	r0, #0
   1c048:	bne	1c058 <test_add_set_defaults@@Base+0x154>
   1c04c:	mov	r1, #36	; 0x24
   1c050:	mov	r0, r4
   1c054:	bl	1f804 <flatcc_builder_start_table@@Base>
   1c058:	ldr	r1, [pc, #484]	; 1c244 <test_add_set_defaults@@Base+0x340>
   1c05c:	mov	r0, r4
   1c060:	bl	2108c <flatcc_builder_create_string_str@@Base>
   1c064:	subs	r5, r0, #0
   1c068:	beq	1c080 <test_add_set_defaults@@Base+0x17c>
   1c06c:	mov	r1, #3
   1c070:	mov	r0, r4
   1c074:	bl	213cc <flatcc_builder_table_add_offset@@Base>
   1c078:	cmp	r0, #0
   1c07c:	strne	r5, [r0]
   1c080:	mov	r3, #2
   1c084:	mov	r2, r3
   1c088:	mov	r1, r3
   1c08c:	mov	r0, r4
   1c090:	bl	21200 <flatcc_builder_table_add@@Base>
   1c094:	cmp	r0, #0
   1c098:	movne	r3, #100	; 0x64
   1c09c:	strhne	r3, [r0]
   1c0a0:	mov	r3, #2
   1c0a4:	mov	r2, r3
   1c0a8:	mov	r1, #1
   1c0ac:	mov	r0, r4
   1c0b0:	bl	21200 <flatcc_builder_table_add@@Base>
   1c0b4:	cmp	r0, #0
   1c0b8:	movne	r3, #100	; 0x64
   1c0bc:	strhne	r3, [r0]
   1c0c0:	mov	r3, #1
   1c0c4:	mov	r2, r3
   1c0c8:	mov	r1, #6
   1c0cc:	mov	r0, r4
   1c0d0:	bl	21200 <flatcc_builder_table_add@@Base>
   1c0d4:	cmp	r0, #0
   1c0d8:	movne	r3, #8
   1c0dc:	strbne	r3, [r0]
   1c0e0:	mov	r2, #1
   1c0e4:	ldr	r1, [pc, #348]	; 1c248 <test_add_set_defaults@@Base+0x344>
   1c0e8:	mov	r0, r4
   1c0ec:	bl	201a8 <flatcc_builder_check_required@@Base>
   1c0f0:	cmp	r0, #0
   1c0f4:	beq	1c1e8 <test_add_set_defaults@@Base+0x2e4>
   1c0f8:	mov	r0, r4
   1c0fc:	bl	20254 <flatcc_builder_end_table@@Base>
   1c100:	mov	r1, r0
   1c104:	mov	r0, r4
   1c108:	bl	1ea90 <flatcc_builder_end_buffer@@Base>
   1c10c:	add	r1, sp, #4
   1c110:	mov	r0, r4
   1c114:	bl	2181c <flatcc_builder_get_direct_buffer@@Base>
   1c118:	cmp	r0, #0
   1c11c:	beq	1c1fc <test_add_set_defaults@@Base+0x2f8>
   1c120:	ldr	r2, [r0, #4]
   1c124:	ldr	r3, [pc, #288]	; 1c24c <test_add_set_defaults@@Base+0x348>
   1c128:	cmp	r2, r3
   1c12c:	bne	1c1fc <test_add_set_defaults@@Base+0x2f8>
   1c130:	ldr	r2, [r0]
   1c134:	adds	r3, r0, r2
   1c138:	beq	1c1fc <test_add_set_defaults@@Base+0x2f8>
   1c13c:	ldr	r2, [r0, r2]
   1c140:	sub	r3, r3, r2
   1c144:	ldrh	r2, [r3]
   1c148:	cmp	r2, #9
   1c14c:	bls	1c210 <test_add_set_defaults@@Base+0x30c>
   1c150:	ldrh	r1, [r3, #8]
   1c154:	cmp	r1, #0
   1c158:	beq	1c210 <test_add_set_defaults@@Base+0x30c>
   1c15c:	cmp	r2, #7
   1c160:	bls	1c220 <test_add_set_defaults@@Base+0x31c>
   1c164:	ldrh	r1, [r3, #6]
   1c168:	cmp	r1, #0
   1c16c:	beq	1c220 <test_add_set_defaults@@Base+0x31c>
   1c170:	cmp	r2, #17
   1c174:	bls	1c230 <test_add_set_defaults@@Base+0x32c>
   1c178:	ldrh	r3, [r3, #16]
   1c17c:	cmp	r3, #0
   1c180:	movne	r0, #0
   1c184:	beq	1c230 <test_add_set_defaults@@Base+0x32c>
   1c188:	add	sp, sp, #12
   1c18c:	pop	{r4, r5, pc}
   1c190:	ldr	r3, [pc, #184]	; 1c250 <test_add_set_defaults@@Base+0x34c>
   1c194:	mov	r2, #235	; 0xeb
   1c198:	ldr	r1, [pc, #180]	; 1c254 <test_add_set_defaults@@Base+0x350>
   1c19c:	ldr	r0, [pc, #180]	; 1c258 <test_add_set_defaults@@Base+0x354>
   1c1a0:	bl	12a8c <__assert_fail@plt>
   1c1a4:	ldr	r3, [pc, #176]	; 1c25c <test_add_set_defaults@@Base+0x358>
   1c1a8:	ldr	r2, [pc, #176]	; 1c260 <test_add_set_defaults@@Base+0x35c>
   1c1ac:	ldr	r1, [pc, #176]	; 1c264 <test_add_set_defaults@@Base+0x360>
   1c1b0:	ldr	r0, [pc, #176]	; 1c268 <test_add_set_defaults@@Base+0x364>
   1c1b4:	bl	12a8c <__assert_fail@plt>
   1c1b8:	ldr	r0, [pc, #172]	; 1c26c <test_add_set_defaults@@Base+0x368>
   1c1bc:	bl	129f0 <puts@plt>
   1c1c0:	mvn	r0, #0
   1c1c4:	b	1c188 <test_add_set_defaults@@Base+0x284>
   1c1c8:	ldr	r0, [pc, #160]	; 1c270 <test_add_set_defaults@@Base+0x36c>
   1c1cc:	bl	129f0 <puts@plt>
   1c1d0:	mvn	r0, #0
   1c1d4:	b	1c188 <test_add_set_defaults@@Base+0x284>
   1c1d8:	ldr	r0, [pc, #148]	; 1c274 <test_add_set_defaults@@Base+0x370>
   1c1dc:	bl	129f0 <puts@plt>
   1c1e0:	mvn	r0, #0
   1c1e4:	b	1c188 <test_add_set_defaults@@Base+0x284>
   1c1e8:	ldr	r3, [pc, #96]	; 1c250 <test_add_set_defaults@@Base+0x34c>
   1c1ec:	mov	r2, #235	; 0xeb
   1c1f0:	ldr	r1, [pc, #92]	; 1c254 <test_add_set_defaults@@Base+0x350>
   1c1f4:	ldr	r0, [pc, #92]	; 1c258 <test_add_set_defaults@@Base+0x354>
   1c1f8:	bl	12a8c <__assert_fail@plt>
   1c1fc:	ldr	r3, [pc, #88]	; 1c25c <test_add_set_defaults@@Base+0x358>
   1c200:	ldr	r2, [pc, #88]	; 1c260 <test_add_set_defaults@@Base+0x35c>
   1c204:	ldr	r1, [pc, #88]	; 1c264 <test_add_set_defaults@@Base+0x360>
   1c208:	ldr	r0, [pc, #88]	; 1c268 <test_add_set_defaults@@Base+0x364>
   1c20c:	bl	12a8c <__assert_fail@plt>
   1c210:	ldr	r0, [pc, #96]	; 1c278 <test_add_set_defaults@@Base+0x374>
   1c214:	bl	129f0 <puts@plt>
   1c218:	mvn	r0, #0
   1c21c:	b	1c188 <test_add_set_defaults@@Base+0x284>
   1c220:	ldr	r0, [pc, #84]	; 1c27c <test_add_set_defaults@@Base+0x378>
   1c224:	bl	129f0 <puts@plt>
   1c228:	mvn	r0, #0
   1c22c:	b	1c188 <test_add_set_defaults@@Base+0x284>
   1c230:	ldr	r0, [pc, #72]	; 1c280 <test_add_set_defaults@@Base+0x37c>
   1c234:	bl	129f0 <puts@plt>
   1c238:	mvn	r0, #0
   1c23c:	b	1c188 <test_add_set_defaults@@Base+0x284>
   1c240:	andeq	r4, r2, r0, asr r0
   1c244:	ldrdeq	r4, [r2], -ip
   1c248:	andeq	r3, r2, r4, ror #16
   1c24c:	movtpl	r4, #61261	; 0xef4d
   1c250:	andeq	r3, r2, r8, ror #16
   1c254:	andeq	r4, r2, r8, asr r0
   1c258:	andeq	r4, r2, r8, ror #3
   1c25c:	andeq	r3, r2, r0, lsl #23
   1c260:			; <UNDEFINED> instruction: 0x000002b9
   1c264:	andeq	r3, r2, ip, ror sp
   1c268:	andeq	r3, r2, r0, ror #27
   1c26c:	muleq	r2, ip, r4
   1c270:	andeq	r6, r2, r8, asr #9
   1c274:	strdeq	r6, [r2], -r8
   1c278:	andeq	r6, r2, r8, lsr #10
   1c27c:	andeq	r6, r2, ip, asr r5
   1c280:	muleq	r2, ip, r5

0001c284 <test_nested_buffer@@Base>:
   1c284:	push	{r4, r5, r6, lr}
   1c288:	sub	sp, sp, #8
   1c28c:	mov	r4, r0
   1c290:	bl	1e238 <flatcc_builder_reset@@Base>
   1c294:	mov	r3, #0
   1c298:	mov	r2, r3
   1c29c:	ldr	r1, [pc, #724]	; 1c578 <test_nested_buffer@@Base+0x2f4>
   1c2a0:	mov	r0, r4
   1c2a4:	bl	1e9d8 <flatcc_builder_start_buffer@@Base>
   1c2a8:	cmp	r0, #0
   1c2ac:	bne	1c2bc <test_nested_buffer@@Base+0x38>
   1c2b0:	mov	r1, #36	; 0x24
   1c2b4:	mov	r0, r4
   1c2b8:	bl	1f804 <flatcc_builder_start_table@@Base>
   1c2bc:	ldr	r1, [pc, #696]	; 1c57c <test_nested_buffer@@Base+0x2f8>
   1c2c0:	mov	r0, r4
   1c2c4:	bl	2108c <flatcc_builder_create_string_str@@Base>
   1c2c8:	subs	r5, r0, #0
   1c2cc:	beq	1c2e4 <test_nested_buffer@@Base+0x60>
   1c2d0:	mov	r1, #3
   1c2d4:	mov	r0, r4
   1c2d8:	bl	213cc <flatcc_builder_table_add_offset@@Base>
   1c2dc:	cmp	r0, #0
   1c2e0:	strne	r5, [r0]
   1c2e4:	mov	r3, #0
   1c2e8:	mov	r2, r3
   1c2ec:	ldr	r1, [pc, #644]	; 1c578 <test_nested_buffer@@Base+0x2f4>
   1c2f0:	mov	r0, r4
   1c2f4:	bl	1e9d8 <flatcc_builder_start_buffer@@Base>
   1c2f8:	cmp	r0, #0
   1c2fc:	bne	1c30c <test_nested_buffer@@Base+0x88>
   1c300:	mov	r1, #36	; 0x24
   1c304:	mov	r0, r4
   1c308:	bl	1f804 <flatcc_builder_start_table@@Base>
   1c30c:	ldr	r1, [pc, #620]	; 1c580 <test_nested_buffer@@Base+0x2fc>
   1c310:	mov	r0, r4
   1c314:	bl	2108c <flatcc_builder_create_string_str@@Base>
   1c318:	subs	r5, r0, #0
   1c31c:	beq	1c334 <test_nested_buffer@@Base+0xb0>
   1c320:	mov	r1, #3
   1c324:	mov	r0, r4
   1c328:	bl	213cc <flatcc_builder_table_add_offset@@Base>
   1c32c:	cmp	r0, #0
   1c330:	strne	r5, [r0]
   1c334:	mov	r2, #1
   1c338:	ldr	r1, [pc, #580]	; 1c584 <test_nested_buffer@@Base+0x300>
   1c33c:	mov	r0, r4
   1c340:	bl	201a8 <flatcc_builder_check_required@@Base>
   1c344:	cmp	r0, #0
   1c348:	beq	1c4e4 <test_nested_buffer@@Base+0x260>
   1c34c:	mov	r0, r4
   1c350:	bl	20254 <flatcc_builder_end_table@@Base>
   1c354:	mov	r1, r0
   1c358:	mov	r0, r4
   1c35c:	bl	1ea90 <flatcc_builder_end_buffer@@Base>
   1c360:	subs	r5, r0, #0
   1c364:	beq	1c37c <test_nested_buffer@@Base+0xf8>
   1c368:	mov	r1, #13
   1c36c:	mov	r0, r4
   1c370:	bl	213cc <flatcc_builder_table_add_offset@@Base>
   1c374:	cmp	r0, #0
   1c378:	strne	r5, [r0]
   1c37c:	mov	r3, #2
   1c380:	mov	r2, r3
   1c384:	mov	r1, r3
   1c388:	mov	r0, r4
   1c38c:	bl	21200 <flatcc_builder_table_add@@Base>
   1c390:	cmp	r0, #0
   1c394:	movne	r3, #10
   1c398:	strhne	r3, [r0]
   1c39c:	mov	r2, #1
   1c3a0:	ldr	r1, [pc, #476]	; 1c584 <test_nested_buffer@@Base+0x300>
   1c3a4:	mov	r0, r4
   1c3a8:	bl	201a8 <flatcc_builder_check_required@@Base>
   1c3ac:	cmp	r0, #0
   1c3b0:	beq	1c4f8 <test_nested_buffer@@Base+0x274>
   1c3b4:	mov	r0, r4
   1c3b8:	bl	20254 <flatcc_builder_end_table@@Base>
   1c3bc:	mov	r1, r0
   1c3c0:	mov	r0, r4
   1c3c4:	bl	1ea90 <flatcc_builder_end_buffer@@Base>
   1c3c8:	add	r1, sp, #4
   1c3cc:	mov	r0, r4
   1c3d0:	bl	2181c <flatcc_builder_get_direct_buffer@@Base>
   1c3d4:	mov	r4, r0
   1c3d8:	ldr	r3, [pc, #424]	; 1c588 <test_nested_buffer@@Base+0x304>
   1c3dc:	ldr	r3, [r3]
   1c3e0:	ldr	r2, [sp, #4]
   1c3e4:	mov	r1, r0
   1c3e8:	ldr	r0, [pc, #412]	; 1c58c <test_nested_buffer@@Base+0x308>
   1c3ec:	bl	134b0 <_start@@Base+0xa18>
   1c3f0:	cmp	r4, #0
   1c3f4:	beq	1c50c <test_nested_buffer@@Base+0x288>
   1c3f8:	ldr	r2, [r4, #4]
   1c3fc:	ldr	r3, [pc, #396]	; 1c590 <test_nested_buffer@@Base+0x30c>
   1c400:	cmp	r2, r3
   1c404:	bne	1c50c <test_nested_buffer@@Base+0x288>
   1c408:	ldr	r3, [r4]
   1c40c:	adds	r5, r4, r3
   1c410:	beq	1c50c <test_nested_buffer@@Base+0x288>
   1c414:	ldr	r4, [r4, r3]
   1c418:	sub	r4, r5, r4
   1c41c:	ldrh	r6, [r4]
   1c420:	cmp	r6, #11
   1c424:	bls	1c520 <test_nested_buffer@@Base+0x29c>
   1c428:	ldrh	r3, [r4, #10]
   1c42c:	cmp	r3, #0
   1c430:	beq	1c520 <test_nested_buffer@@Base+0x29c>
   1c434:	add	r0, r5, r3
   1c438:	ldr	r3, [r5, r3]
   1c43c:	add	r3, r3, #4
   1c440:	ldr	r1, [pc, #308]	; 1c57c <test_nested_buffer@@Base+0x2f8>
   1c444:	add	r0, r0, r3
   1c448:	bl	12990 <strcmp@plt>
   1c44c:	cmp	r0, #0
   1c450:	bne	1c534 <test_nested_buffer@@Base+0x2b0>
   1c454:	cmp	r6, #31
   1c458:	movls	r0, #0
   1c45c:	bls	1c4a0 <test_nested_buffer@@Base+0x21c>
   1c460:	ldrh	r3, [r4, #30]
   1c464:	cmp	r3, #0
   1c468:	moveq	r0, #0
   1c46c:	beq	1c4a0 <test_nested_buffer@@Base+0x21c>
   1c470:	add	r2, r5, r3
   1c474:	ldr	r3, [r5, r3]
   1c478:	add	r3, r3, #4
   1c47c:	adds	r0, r2, r3
   1c480:	moveq	r0, #0
   1c484:	beq	1c4a0 <test_nested_buffer@@Base+0x21c>
   1c488:	ldr	ip, [r0, #4]
   1c48c:	ldr	r1, [pc, #252]	; 1c590 <test_nested_buffer@@Base+0x30c>
   1c490:	cmp	ip, r1
   1c494:	ldreq	r3, [r2, r3]
   1c498:	addeq	r0, r0, r3
   1c49c:	movne	r0, #0
   1c4a0:	cmp	r6, #9
   1c4a4:	bls	1c544 <test_nested_buffer@@Base+0x2c0>
   1c4a8:	ldrh	r3, [r4, #8]
   1c4ac:	cmp	r3, #0
   1c4b0:	beq	1c544 <test_nested_buffer@@Base+0x2c0>
   1c4b4:	ldrsh	r3, [r5, r3]
   1c4b8:	cmp	r3, #10
   1c4bc:	bne	1c544 <test_nested_buffer@@Base+0x2c0>
   1c4c0:	bl	12f18 <_start@@Base+0x480>
   1c4c4:	cmp	r0, #0
   1c4c8:	beq	1c554 <test_nested_buffer@@Base+0x2d0>
   1c4cc:	ldr	r1, [pc, #172]	; 1c580 <test_nested_buffer@@Base+0x2fc>
   1c4d0:	bl	12990 <strcmp@plt>
   1c4d4:	cmp	r0, #0
   1c4d8:	bne	1c568 <test_nested_buffer@@Base+0x2e4>
   1c4dc:	add	sp, sp, #8
   1c4e0:	pop	{r4, r5, r6, pc}
   1c4e4:	ldr	r3, [pc, #168]	; 1c594 <test_nested_buffer@@Base+0x310>
   1c4e8:	mov	r2, #235	; 0xeb
   1c4ec:	ldr	r1, [pc, #164]	; 1c598 <test_nested_buffer@@Base+0x314>
   1c4f0:	ldr	r0, [pc, #164]	; 1c59c <test_nested_buffer@@Base+0x318>
   1c4f4:	bl	12a8c <__assert_fail@plt>
   1c4f8:	ldr	r3, [pc, #148]	; 1c594 <test_nested_buffer@@Base+0x310>
   1c4fc:	mov	r2, #235	; 0xeb
   1c500:	ldr	r1, [pc, #144]	; 1c598 <test_nested_buffer@@Base+0x314>
   1c504:	ldr	r0, [pc, #144]	; 1c59c <test_nested_buffer@@Base+0x318>
   1c508:	bl	12a8c <__assert_fail@plt>
   1c50c:	ldr	r3, [pc, #140]	; 1c5a0 <test_nested_buffer@@Base+0x31c>
   1c510:	ldr	r2, [pc, #140]	; 1c5a4 <test_nested_buffer@@Base+0x320>
   1c514:	ldr	r1, [pc, #140]	; 1c5a8 <test_nested_buffer@@Base+0x324>
   1c518:	ldr	r0, [pc, #140]	; 1c5ac <test_nested_buffer@@Base+0x328>
   1c51c:	bl	12a8c <__assert_fail@plt>
   1c520:	ldr	r3, [pc, #120]	; 1c5a0 <test_nested_buffer@@Base+0x31c>
   1c524:	ldr	r2, [pc, #120]	; 1c5a4 <test_nested_buffer@@Base+0x320>
   1c528:	ldr	r1, [pc, #120]	; 1c5a8 <test_nested_buffer@@Base+0x324>
   1c52c:	ldr	r0, [pc, #124]	; 1c5b0 <test_nested_buffer@@Base+0x32c>
   1c530:	bl	12a8c <__assert_fail@plt>
   1c534:	ldr	r0, [pc, #120]	; 1c5b4 <test_nested_buffer@@Base+0x330>
   1c538:	bl	129f0 <puts@plt>
   1c53c:	mvn	r0, #0
   1c540:	b	1c4dc <test_nested_buffer@@Base+0x258>
   1c544:	ldr	r0, [pc, #108]	; 1c5b8 <test_nested_buffer@@Base+0x334>
   1c548:	bl	129f0 <puts@plt>
   1c54c:	mvn	r0, #0
   1c550:	b	1c4dc <test_nested_buffer@@Base+0x258>
   1c554:	ldr	r3, [pc, #96]	; 1c5bc <test_nested_buffer@@Base+0x338>
   1c558:	ldr	r2, [pc, #96]	; 1c5c0 <test_nested_buffer@@Base+0x33c>
   1c55c:	ldr	r1, [pc, #96]	; 1c5c4 <test_nested_buffer@@Base+0x340>
   1c560:	ldr	r0, [pc, #96]	; 1c5c8 <test_nested_buffer@@Base+0x344>
   1c564:	bl	12a8c <__assert_fail@plt>
   1c568:	ldr	r0, [pc, #92]	; 1c5cc <test_nested_buffer@@Base+0x348>
   1c56c:	bl	129f0 <puts@plt>
   1c570:	mvn	r0, #0
   1c574:	b	1c4dc <test_nested_buffer@@Base+0x258>
   1c578:	andeq	r4, r2, r0, asr r0
   1c57c:	ldrdeq	r4, [r2], -ip
   1c580:	ldrdeq	r6, [r2], -r4
   1c584:	andeq	r3, r2, r4, ror #16
   1c588:	andeq	r8, r3, r0, ror r0
   1c58c:	andeq	r6, r2, r4, ror #11
   1c590:	movtpl	r4, #61261	; 0xef4d
   1c594:	andeq	r3, r2, r8, ror #16
   1c598:	andeq	r4, r2, r8, asr r0
   1c59c:	andeq	r4, r2, r8, ror #3
   1c5a0:	andeq	r3, r2, r8, lsr #14
   1c5a4:			; <UNDEFINED> instruction: 0x000002bb
   1c5a8:	andeq	r3, r2, ip, ror sp
   1c5ac:	andeq	r3, r2, r0, ror #27
   1c5b0:	andeq	r3, r2, r8, lsr #29
   1c5b4:	strdeq	r6, [r2], -r8
   1c5b8:	andeq	r6, r2, r4, lsl r6
   1c5bc:	andeq	r3, r2, r8, lsr #23
   1c5c0:	andeq	r0, r0, ip, lsl #17
   1c5c4:	ldrdeq	r4, [r2], -ip
   1c5c8:	andeq	r6, r2, r8, lsr r6
   1c5cc:	andeq	r6, r2, r4, asr r6

0001c5d0 <test_nested_buffer_first@@Base>:
   1c5d0:	push	{r4, r5, r6, lr}
   1c5d4:	sub	sp, sp, #8
   1c5d8:	mov	r4, r0
   1c5dc:	bl	1e238 <flatcc_builder_reset@@Base>
   1c5e0:	mov	r3, #0
   1c5e4:	mov	r2, r3
   1c5e8:	ldr	r1, [pc, #724]	; 1c8c4 <test_nested_buffer_first@@Base+0x2f4>
   1c5ec:	mov	r0, r4
   1c5f0:	bl	1e9d8 <flatcc_builder_start_buffer@@Base>
   1c5f4:	cmp	r0, #0
   1c5f8:	bne	1c608 <test_nested_buffer_first@@Base+0x38>
   1c5fc:	mov	r1, #36	; 0x24
   1c600:	mov	r0, r4
   1c604:	bl	1f804 <flatcc_builder_start_table@@Base>
   1c608:	mov	r3, #0
   1c60c:	mov	r2, r3
   1c610:	ldr	r1, [pc, #684]	; 1c8c4 <test_nested_buffer_first@@Base+0x2f4>
   1c614:	mov	r0, r4
   1c618:	bl	1e9d8 <flatcc_builder_start_buffer@@Base>
   1c61c:	cmp	r0, #0
   1c620:	bne	1c630 <test_nested_buffer_first@@Base+0x60>
   1c624:	mov	r1, #36	; 0x24
   1c628:	mov	r0, r4
   1c62c:	bl	1f804 <flatcc_builder_start_table@@Base>
   1c630:	ldr	r1, [pc, #656]	; 1c8c8 <test_nested_buffer_first@@Base+0x2f8>
   1c634:	mov	r0, r4
   1c638:	bl	2108c <flatcc_builder_create_string_str@@Base>
   1c63c:	subs	r5, r0, #0
   1c640:	beq	1c658 <test_nested_buffer_first@@Base+0x88>
   1c644:	mov	r1, #3
   1c648:	mov	r0, r4
   1c64c:	bl	213cc <flatcc_builder_table_add_offset@@Base>
   1c650:	cmp	r0, #0
   1c654:	strne	r5, [r0]
   1c658:	mov	r2, #1
   1c65c:	ldr	r1, [pc, #616]	; 1c8cc <test_nested_buffer_first@@Base+0x2fc>
   1c660:	mov	r0, r4
   1c664:	bl	201a8 <flatcc_builder_check_required@@Base>
   1c668:	cmp	r0, #0
   1c66c:	beq	1c830 <test_nested_buffer_first@@Base+0x260>
   1c670:	mov	r0, r4
   1c674:	bl	20254 <flatcc_builder_end_table@@Base>
   1c678:	mov	r1, r0
   1c67c:	mov	r0, r4
   1c680:	bl	1ea90 <flatcc_builder_end_buffer@@Base>
   1c684:	subs	r5, r0, #0
   1c688:	beq	1c6a0 <test_nested_buffer_first@@Base+0xd0>
   1c68c:	mov	r1, #13
   1c690:	mov	r0, r4
   1c694:	bl	213cc <flatcc_builder_table_add_offset@@Base>
   1c698:	cmp	r0, #0
   1c69c:	strne	r5, [r0]
   1c6a0:	mov	r3, #2
   1c6a4:	mov	r2, r3
   1c6a8:	mov	r1, r3
   1c6ac:	mov	r0, r4
   1c6b0:	bl	21200 <flatcc_builder_table_add@@Base>
   1c6b4:	cmp	r0, #0
   1c6b8:	movne	r3, #10
   1c6bc:	strhne	r3, [r0]
   1c6c0:	ldr	r1, [pc, #520]	; 1c8d0 <test_nested_buffer_first@@Base+0x300>
   1c6c4:	mov	r0, r4
   1c6c8:	bl	2108c <flatcc_builder_create_string_str@@Base>
   1c6cc:	subs	r5, r0, #0
   1c6d0:	beq	1c6e8 <test_nested_buffer_first@@Base+0x118>
   1c6d4:	mov	r1, #3
   1c6d8:	mov	r0, r4
   1c6dc:	bl	213cc <flatcc_builder_table_add_offset@@Base>
   1c6e0:	cmp	r0, #0
   1c6e4:	strne	r5, [r0]
   1c6e8:	mov	r2, #1
   1c6ec:	ldr	r1, [pc, #472]	; 1c8cc <test_nested_buffer_first@@Base+0x2fc>
   1c6f0:	mov	r0, r4
   1c6f4:	bl	201a8 <flatcc_builder_check_required@@Base>
   1c6f8:	cmp	r0, #0
   1c6fc:	beq	1c844 <test_nested_buffer_first@@Base+0x274>
   1c700:	mov	r0, r4
   1c704:	bl	20254 <flatcc_builder_end_table@@Base>
   1c708:	mov	r1, r0
   1c70c:	mov	r0, r4
   1c710:	bl	1ea90 <flatcc_builder_end_buffer@@Base>
   1c714:	add	r1, sp, #4
   1c718:	mov	r0, r4
   1c71c:	bl	2181c <flatcc_builder_get_direct_buffer@@Base>
   1c720:	mov	r4, r0
   1c724:	ldr	r3, [pc, #424]	; 1c8d4 <test_nested_buffer_first@@Base+0x304>
   1c728:	ldr	r3, [r3]
   1c72c:	ldr	r2, [sp, #4]
   1c730:	mov	r1, r0
   1c734:	ldr	r0, [pc, #412]	; 1c8d8 <test_nested_buffer_first@@Base+0x308>
   1c738:	bl	134b0 <_start@@Base+0xa18>
   1c73c:	cmp	r4, #0
   1c740:	beq	1c858 <test_nested_buffer_first@@Base+0x288>
   1c744:	ldr	r2, [r4, #4]
   1c748:	ldr	r3, [pc, #396]	; 1c8dc <test_nested_buffer_first@@Base+0x30c>
   1c74c:	cmp	r2, r3
   1c750:	bne	1c858 <test_nested_buffer_first@@Base+0x288>
   1c754:	ldr	r3, [r4]
   1c758:	adds	r5, r4, r3
   1c75c:	beq	1c858 <test_nested_buffer_first@@Base+0x288>
   1c760:	ldr	r4, [r4, r3]
   1c764:	sub	r4, r5, r4
   1c768:	ldrh	r6, [r4]
   1c76c:	cmp	r6, #11
   1c770:	bls	1c86c <test_nested_buffer_first@@Base+0x29c>
   1c774:	ldrh	r3, [r4, #10]
   1c778:	cmp	r3, #0
   1c77c:	beq	1c86c <test_nested_buffer_first@@Base+0x29c>
   1c780:	add	r0, r5, r3
   1c784:	ldr	r3, [r5, r3]
   1c788:	add	r3, r3, #4
   1c78c:	ldr	r1, [pc, #316]	; 1c8d0 <test_nested_buffer_first@@Base+0x300>
   1c790:	add	r0, r0, r3
   1c794:	bl	12990 <strcmp@plt>
   1c798:	cmp	r0, #0
   1c79c:	bne	1c880 <test_nested_buffer_first@@Base+0x2b0>
   1c7a0:	cmp	r6, #31
   1c7a4:	movls	r0, #0
   1c7a8:	bls	1c7ec <test_nested_buffer_first@@Base+0x21c>
   1c7ac:	ldrh	r3, [r4, #30]
   1c7b0:	cmp	r3, #0
   1c7b4:	moveq	r0, #0
   1c7b8:	beq	1c7ec <test_nested_buffer_first@@Base+0x21c>
   1c7bc:	add	r2, r5, r3
   1c7c0:	ldr	r3, [r5, r3]
   1c7c4:	add	r3, r3, #4
   1c7c8:	adds	r0, r2, r3
   1c7cc:	moveq	r0, #0
   1c7d0:	beq	1c7ec <test_nested_buffer_first@@Base+0x21c>
   1c7d4:	ldr	ip, [r0, #4]
   1c7d8:	ldr	r1, [pc, #252]	; 1c8dc <test_nested_buffer_first@@Base+0x30c>
   1c7dc:	cmp	ip, r1
   1c7e0:	ldreq	r3, [r2, r3]
   1c7e4:	addeq	r0, r0, r3
   1c7e8:	movne	r0, #0
   1c7ec:	cmp	r6, #9
   1c7f0:	bls	1c890 <test_nested_buffer_first@@Base+0x2c0>
   1c7f4:	ldrh	r3, [r4, #8]
   1c7f8:	cmp	r3, #0
   1c7fc:	beq	1c890 <test_nested_buffer_first@@Base+0x2c0>
   1c800:	ldrsh	r3, [r5, r3]
   1c804:	cmp	r3, #10
   1c808:	bne	1c890 <test_nested_buffer_first@@Base+0x2c0>
   1c80c:	bl	12f18 <_start@@Base+0x480>
   1c810:	cmp	r0, #0
   1c814:	beq	1c8a0 <test_nested_buffer_first@@Base+0x2d0>
   1c818:	ldr	r1, [pc, #168]	; 1c8c8 <test_nested_buffer_first@@Base+0x2f8>
   1c81c:	bl	12990 <strcmp@plt>
   1c820:	cmp	r0, #0
   1c824:	bne	1c8b4 <test_nested_buffer_first@@Base+0x2e4>
   1c828:	add	sp, sp, #8
   1c82c:	pop	{r4, r5, r6, pc}
   1c830:	ldr	r3, [pc, #168]	; 1c8e0 <test_nested_buffer_first@@Base+0x310>
   1c834:	mov	r2, #235	; 0xeb
   1c838:	ldr	r1, [pc, #164]	; 1c8e4 <test_nested_buffer_first@@Base+0x314>
   1c83c:	ldr	r0, [pc, #164]	; 1c8e8 <test_nested_buffer_first@@Base+0x318>
   1c840:	bl	12a8c <__assert_fail@plt>
   1c844:	ldr	r3, [pc, #148]	; 1c8e0 <test_nested_buffer_first@@Base+0x310>
   1c848:	mov	r2, #235	; 0xeb
   1c84c:	ldr	r1, [pc, #144]	; 1c8e4 <test_nested_buffer_first@@Base+0x314>
   1c850:	ldr	r0, [pc, #144]	; 1c8e8 <test_nested_buffer_first@@Base+0x318>
   1c854:	bl	12a8c <__assert_fail@plt>
   1c858:	ldr	r3, [pc, #140]	; 1c8ec <test_nested_buffer_first@@Base+0x31c>
   1c85c:	ldr	r2, [pc, #140]	; 1c8f0 <test_nested_buffer_first@@Base+0x320>
   1c860:	ldr	r1, [pc, #140]	; 1c8f4 <test_nested_buffer_first@@Base+0x324>
   1c864:	ldr	r0, [pc, #140]	; 1c8f8 <test_nested_buffer_first@@Base+0x328>
   1c868:	bl	12a8c <__assert_fail@plt>
   1c86c:	ldr	r3, [pc, #120]	; 1c8ec <test_nested_buffer_first@@Base+0x31c>
   1c870:	ldr	r2, [pc, #120]	; 1c8f0 <test_nested_buffer_first@@Base+0x320>
   1c874:	ldr	r1, [pc, #120]	; 1c8f4 <test_nested_buffer_first@@Base+0x324>
   1c878:	ldr	r0, [pc, #124]	; 1c8fc <test_nested_buffer_first@@Base+0x32c>
   1c87c:	bl	12a8c <__assert_fail@plt>
   1c880:	ldr	r0, [pc, #120]	; 1c900 <test_nested_buffer_first@@Base+0x330>
   1c884:	bl	129f0 <puts@plt>
   1c888:	mvn	r0, #0
   1c88c:	b	1c828 <test_nested_buffer_first@@Base+0x258>
   1c890:	ldr	r0, [pc, #108]	; 1c904 <test_nested_buffer_first@@Base+0x334>
   1c894:	bl	129f0 <puts@plt>
   1c898:	mvn	r0, #0
   1c89c:	b	1c828 <test_nested_buffer_first@@Base+0x258>
   1c8a0:	ldr	r3, [pc, #96]	; 1c908 <test_nested_buffer_first@@Base+0x338>
   1c8a4:	ldr	r2, [pc, #96]	; 1c90c <test_nested_buffer_first@@Base+0x33c>
   1c8a8:	ldr	r1, [pc, #96]	; 1c910 <test_nested_buffer_first@@Base+0x340>
   1c8ac:	ldr	r0, [pc, #96]	; 1c914 <test_nested_buffer_first@@Base+0x344>
   1c8b0:	bl	12a8c <__assert_fail@plt>
   1c8b4:	ldr	r0, [pc, #92]	; 1c918 <test_nested_buffer_first@@Base+0x348>
   1c8b8:	bl	129f0 <puts@plt>
   1c8bc:	mvn	r0, #0
   1c8c0:	b	1c828 <test_nested_buffer_first@@Base+0x258>
   1c8c4:	andeq	r4, r2, r0, asr r0
   1c8c8:	ldrdeq	r6, [r2], -r4
   1c8cc:	andeq	r3, r2, r4, ror #16
   1c8d0:	ldrdeq	r4, [r2], -ip
   1c8d4:	andeq	r8, r3, r0, ror r0
   1c8d8:	andeq	r6, r2, r4, ror #11
   1c8dc:	movtpl	r4, #61261	; 0xef4d
   1c8e0:	andeq	r3, r2, r8, ror #16
   1c8e4:	andeq	r4, r2, r8, asr r0
   1c8e8:	andeq	r4, r2, r8, ror #3
   1c8ec:	andeq	r3, r2, r8, lsr #14
   1c8f0:			; <UNDEFINED> instruction: 0x000002bb
   1c8f4:	andeq	r3, r2, ip, ror sp
   1c8f8:	andeq	r3, r2, r0, ror #27
   1c8fc:	andeq	r3, r2, r8, lsr #29
   1c900:	strdeq	r6, [r2], -r8
   1c904:	andeq	r6, r2, r4, lsl r6
   1c908:			; <UNDEFINED> instruction: 0x00023bbc
   1c90c:	andeq	r0, r0, r1, asr #17
   1c910:	ldrdeq	r4, [r2], -ip
   1c914:	andeq	r6, r2, r8, lsr r6
   1c918:	andeq	r6, r2, r4, asr r6

0001c91c <test_nested_buffer_using_nest@@Base>:
   1c91c:	push	{r4, r5, r6, lr}
   1c920:	sub	sp, sp, #1040	; 0x410
   1c924:	mov	r4, r0
   1c928:	bl	1e238 <flatcc_builder_reset@@Base>
   1c92c:	mov	r3, #0
   1c930:	mov	r2, r3
   1c934:	ldr	r1, [pc, #924]	; 1ccd8 <test_nested_buffer_using_nest@@Base+0x3bc>
   1c938:	mov	r0, r4
   1c93c:	bl	1e9d8 <flatcc_builder_start_buffer@@Base>
   1c940:	cmp	r0, #0
   1c944:	bne	1c954 <test_nested_buffer_using_nest@@Base+0x38>
   1c948:	mov	r1, #36	; 0x24
   1c94c:	mov	r0, r4
   1c950:	bl	1f804 <flatcc_builder_start_table@@Base>
   1c954:	ldr	r1, [pc, #896]	; 1ccdc <test_nested_buffer_using_nest@@Base+0x3c0>
   1c958:	mov	r0, r4
   1c95c:	bl	2108c <flatcc_builder_create_string_str@@Base>
   1c960:	subs	r5, r0, #0
   1c964:	beq	1c97c <test_nested_buffer_using_nest@@Base+0x60>
   1c968:	mov	r1, #3
   1c96c:	mov	r0, r4
   1c970:	bl	213cc <flatcc_builder_table_add_offset@@Base>
   1c974:	cmp	r0, #0
   1c978:	strne	r5, [r0]
   1c97c:	mov	r3, #2
   1c980:	mov	r2, r3
   1c984:	mov	r1, #1
   1c988:	mov	r0, r4
   1c98c:	bl	21200 <flatcc_builder_table_add@@Base>
   1c990:	cmp	r0, #0
   1c994:	movne	r3, #42	; 0x2a
   1c998:	strhne	r3, [r0]
   1c99c:	mov	r2, #1
   1c9a0:	ldr	r1, [pc, #824]	; 1cce0 <test_nested_buffer_using_nest@@Base+0x3c4>
   1c9a4:	mov	r0, r4
   1c9a8:	bl	201a8 <flatcc_builder_check_required@@Base>
   1c9ac:	cmp	r0, #0
   1c9b0:	beq	1cc0c <test_nested_buffer_using_nest@@Base+0x2f0>
   1c9b4:	mov	r0, r4
   1c9b8:	bl	20254 <flatcc_builder_end_table@@Base>
   1c9bc:	mov	r1, r0
   1c9c0:	mov	r0, r4
   1c9c4:	bl	1ea90 <flatcc_builder_end_buffer@@Base>
   1c9c8:	mov	r0, r4
   1c9cc:	bl	21788 <flatcc_builder_get_buffer_size@@Base>
   1c9d0:	mov	r5, r0
   1c9d4:	mov	r2, #1024	; 0x400
   1c9d8:	add	r1, sp, #16
   1c9dc:	mov	r0, r4
   1c9e0:	bl	21884 <flatcc_builder_copy_buffer@@Base>
   1c9e4:	cmp	r0, #0
   1c9e8:	beq	1cc20 <test_nested_buffer_using_nest@@Base+0x304>
   1c9ec:	mov	r0, r4
   1c9f0:	bl	1e238 <flatcc_builder_reset@@Base>
   1c9f4:	mov	r3, #0
   1c9f8:	mov	r2, r3
   1c9fc:	ldr	r1, [pc, #724]	; 1ccd8 <test_nested_buffer_using_nest@@Base+0x3bc>
   1ca00:	mov	r0, r4
   1ca04:	bl	1e9d8 <flatcc_builder_start_buffer@@Base>
   1ca08:	cmp	r0, #0
   1ca0c:	bne	1ca1c <test_nested_buffer_using_nest@@Base+0x100>
   1ca10:	mov	r1, #36	; 0x24
   1ca14:	mov	r0, r4
   1ca18:	bl	1f804 <flatcc_builder_start_table@@Base>
   1ca1c:	mvn	r3, #0
   1ca20:	str	r3, [sp, #4]
   1ca24:	mov	r3, #8
   1ca28:	str	r3, [sp]
   1ca2c:	mov	r3, #1
   1ca30:	mov	r2, r5
   1ca34:	add	r1, sp, #16
   1ca38:	mov	r0, r4
   1ca3c:	bl	20408 <flatcc_builder_create_vector@@Base>
   1ca40:	subs	r5, r0, #0
   1ca44:	beq	1ca5c <test_nested_buffer_using_nest@@Base+0x140>
   1ca48:	mov	r1, #13
   1ca4c:	mov	r0, r4
   1ca50:	bl	213cc <flatcc_builder_table_add_offset@@Base>
   1ca54:	cmp	r0, #0
   1ca58:	strne	r5, [r0]
   1ca5c:	mov	r3, #2
   1ca60:	mov	r2, r3
   1ca64:	mov	r1, r3
   1ca68:	mov	r0, r4
   1ca6c:	bl	21200 <flatcc_builder_table_add@@Base>
   1ca70:	cmp	r0, #0
   1ca74:	movne	r3, #10
   1ca78:	strhne	r3, [r0]
   1ca7c:	ldr	r1, [pc, #608]	; 1cce4 <test_nested_buffer_using_nest@@Base+0x3c8>
   1ca80:	mov	r0, r4
   1ca84:	bl	2108c <flatcc_builder_create_string_str@@Base>
   1ca88:	subs	r5, r0, #0
   1ca8c:	beq	1caa4 <test_nested_buffer_using_nest@@Base+0x188>
   1ca90:	mov	r1, #3
   1ca94:	mov	r0, r4
   1ca98:	bl	213cc <flatcc_builder_table_add_offset@@Base>
   1ca9c:	cmp	r0, #0
   1caa0:	strne	r5, [r0]
   1caa4:	mov	r2, #1
   1caa8:	ldr	r1, [pc, #560]	; 1cce0 <test_nested_buffer_using_nest@@Base+0x3c4>
   1caac:	mov	r0, r4
   1cab0:	bl	201a8 <flatcc_builder_check_required@@Base>
   1cab4:	cmp	r0, #0
   1cab8:	beq	1cc30 <test_nested_buffer_using_nest@@Base+0x314>
   1cabc:	mov	r0, r4
   1cac0:	bl	20254 <flatcc_builder_end_table@@Base>
   1cac4:	mov	r1, r0
   1cac8:	mov	r0, r4
   1cacc:	bl	1ea90 <flatcc_builder_end_buffer@@Base>
   1cad0:	add	r1, sp, #12
   1cad4:	mov	r0, r4
   1cad8:	bl	2181c <flatcc_builder_get_direct_buffer@@Base>
   1cadc:	mov	r4, r0
   1cae0:	ldr	r3, [pc, #512]	; 1cce8 <test_nested_buffer_using_nest@@Base+0x3cc>
   1cae4:	ldr	r3, [r3]
   1cae8:	ldr	r2, [sp, #12]
   1caec:	mov	r1, r0
   1caf0:	ldr	r0, [pc, #500]	; 1ccec <test_nested_buffer_using_nest@@Base+0x3d0>
   1caf4:	bl	134b0 <_start@@Base+0xa18>
   1caf8:	cmp	r4, #0
   1cafc:	beq	1ccb0 <test_nested_buffer_using_nest@@Base+0x394>
   1cb00:	ldr	r2, [r4, #4]
   1cb04:	ldr	r3, [pc, #484]	; 1ccf0 <test_nested_buffer_using_nest@@Base+0x3d4>
   1cb08:	cmp	r2, r3
   1cb0c:	bne	1ccb0 <test_nested_buffer_using_nest@@Base+0x394>
   1cb10:	ldr	r6, [r4]
   1cb14:	add	r5, r4, r6
   1cb18:	mov	r0, r5
   1cb1c:	bl	12f18 <_start@@Base+0x480>
   1cb20:	ldr	r1, [pc, #444]	; 1cce4 <test_nested_buffer_using_nest@@Base+0x3c8>
   1cb24:	bl	12990 <strcmp@plt>
   1cb28:	cmp	r0, #0
   1cb2c:	bne	1ccc8 <test_nested_buffer_using_nest@@Base+0x3ac>
   1cb30:	cmp	r5, #0
   1cb34:	beq	1cc44 <test_nested_buffer_using_nest@@Base+0x328>
   1cb38:	ldr	r2, [r4, r6]
   1cb3c:	sub	r2, r5, r2
   1cb40:	ldrh	r0, [r2]
   1cb44:	cmp	r0, #31
   1cb48:	movls	r4, #0
   1cb4c:	bls	1cb90 <test_nested_buffer_using_nest@@Base+0x274>
   1cb50:	ldrh	r3, [r2, #30]
   1cb54:	cmp	r3, #0
   1cb58:	moveq	r4, #0
   1cb5c:	beq	1cb90 <test_nested_buffer_using_nest@@Base+0x274>
   1cb60:	add	r1, r5, r3
   1cb64:	ldr	r3, [r5, r3]
   1cb68:	add	r3, r3, #4
   1cb6c:	adds	r4, r1, r3
   1cb70:	moveq	r4, #0
   1cb74:	beq	1cb90 <test_nested_buffer_using_nest@@Base+0x274>
   1cb78:	ldr	lr, [r4, #4]
   1cb7c:	ldr	ip, [pc, #364]	; 1ccf0 <test_nested_buffer_using_nest@@Base+0x3d4>
   1cb80:	cmp	lr, ip
   1cb84:	ldreq	r3, [r1, r3]
   1cb88:	addeq	r4, r4, r3
   1cb8c:	movne	r4, #0
   1cb90:	cmp	r0, #9
   1cb94:	bls	1cc58 <test_nested_buffer_using_nest@@Base+0x33c>
   1cb98:	ldrh	r3, [r2, #8]
   1cb9c:	cmp	r3, #0
   1cba0:	beq	1cc58 <test_nested_buffer_using_nest@@Base+0x33c>
   1cba4:	ldrsh	r3, [r5, r3]
   1cba8:	cmp	r3, #10
   1cbac:	bne	1cc58 <test_nested_buffer_using_nest@@Base+0x33c>
   1cbb0:	mov	r0, r4
   1cbb4:	bl	12f18 <_start@@Base+0x480>
   1cbb8:	cmp	r0, #0
   1cbbc:	beq	1cc68 <test_nested_buffer_using_nest@@Base+0x34c>
   1cbc0:	ldr	r1, [pc, #276]	; 1ccdc <test_nested_buffer_using_nest@@Base+0x3c0>
   1cbc4:	bl	12990 <strcmp@plt>
   1cbc8:	cmp	r0, #0
   1cbcc:	bne	1cc7c <test_nested_buffer_using_nest@@Base+0x360>
   1cbd0:	cmp	r4, #0
   1cbd4:	beq	1cc8c <test_nested_buffer_using_nest@@Base+0x370>
   1cbd8:	ldr	r3, [r4]
   1cbdc:	sub	r3, r4, r3
   1cbe0:	ldrh	r2, [r3]
   1cbe4:	cmp	r2, #7
   1cbe8:	bls	1cca0 <test_nested_buffer_using_nest@@Base+0x384>
   1cbec:	ldrh	r3, [r3, #6]
   1cbf0:	cmp	r3, #0
   1cbf4:	beq	1cca0 <test_nested_buffer_using_nest@@Base+0x384>
   1cbf8:	ldrsh	r3, [r4, r3]
   1cbfc:	cmp	r3, #42	; 0x2a
   1cc00:	bne	1cca0 <test_nested_buffer_using_nest@@Base+0x384>
   1cc04:	add	sp, sp, #1040	; 0x410
   1cc08:	pop	{r4, r5, r6, pc}
   1cc0c:	ldr	r3, [pc, #224]	; 1ccf4 <test_nested_buffer_using_nest@@Base+0x3d8>
   1cc10:	mov	r2, #235	; 0xeb
   1cc14:	ldr	r1, [pc, #220]	; 1ccf8 <test_nested_buffer_using_nest@@Base+0x3dc>
   1cc18:	ldr	r0, [pc, #220]	; 1ccfc <test_nested_buffer_using_nest@@Base+0x3e0>
   1cc1c:	bl	12a8c <__assert_fail@plt>
   1cc20:	ldr	r0, [pc, #216]	; 1cd00 <test_nested_buffer_using_nest@@Base+0x3e4>
   1cc24:	bl	129f0 <puts@plt>
   1cc28:	mvn	r0, #0
   1cc2c:	b	1cc04 <test_nested_buffer_using_nest@@Base+0x2e8>
   1cc30:	ldr	r3, [pc, #188]	; 1ccf4 <test_nested_buffer_using_nest@@Base+0x3d8>
   1cc34:	mov	r2, #235	; 0xeb
   1cc38:	ldr	r1, [pc, #184]	; 1ccf8 <test_nested_buffer_using_nest@@Base+0x3dc>
   1cc3c:	ldr	r0, [pc, #184]	; 1ccfc <test_nested_buffer_using_nest@@Base+0x3e0>
   1cc40:	bl	12a8c <__assert_fail@plt>
   1cc44:	ldr	r3, [pc, #184]	; 1cd04 <test_nested_buffer_using_nest@@Base+0x3e8>
   1cc48:	mov	r2, #720	; 0x2d0
   1cc4c:	ldr	r1, [pc, #180]	; 1cd08 <test_nested_buffer_using_nest@@Base+0x3ec>
   1cc50:	ldr	r0, [pc, #180]	; 1cd0c <test_nested_buffer_using_nest@@Base+0x3f0>
   1cc54:	bl	12a8c <__assert_fail@plt>
   1cc58:	ldr	r0, [pc, #176]	; 1cd10 <test_nested_buffer_using_nest@@Base+0x3f4>
   1cc5c:	bl	129f0 <puts@plt>
   1cc60:	mvn	r0, #0
   1cc64:	b	1cc04 <test_nested_buffer_using_nest@@Base+0x2e8>
   1cc68:	ldr	r3, [pc, #164]	; 1cd14 <test_nested_buffer_using_nest@@Base+0x3f8>
   1cc6c:	ldr	r2, [pc, #164]	; 1cd18 <test_nested_buffer_using_nest@@Base+0x3fc>
   1cc70:	ldr	r1, [pc, #164]	; 1cd1c <test_nested_buffer_using_nest@@Base+0x400>
   1cc74:	ldr	r0, [pc, #164]	; 1cd20 <test_nested_buffer_using_nest@@Base+0x404>
   1cc78:	bl	12a8c <__assert_fail@plt>
   1cc7c:	ldr	r0, [pc, #160]	; 1cd24 <test_nested_buffer_using_nest@@Base+0x408>
   1cc80:	bl	129f0 <puts@plt>
   1cc84:	mvn	r0, #0
   1cc88:	b	1cc04 <test_nested_buffer_using_nest@@Base+0x2e8>
   1cc8c:	ldr	r3, [pc, #148]	; 1cd28 <test_nested_buffer_using_nest@@Base+0x40c>
   1cc90:	ldr	r2, [pc, #148]	; 1cd2c <test_nested_buffer_using_nest@@Base+0x410>
   1cc94:	ldr	r1, [pc, #108]	; 1cd08 <test_nested_buffer_using_nest@@Base+0x3ec>
   1cc98:	ldr	r0, [pc, #108]	; 1cd0c <test_nested_buffer_using_nest@@Base+0x3f0>
   1cc9c:	bl	12a8c <__assert_fail@plt>
   1cca0:	ldr	r0, [pc, #136]	; 1cd30 <test_nested_buffer_using_nest@@Base+0x414>
   1cca4:	bl	129f0 <puts@plt>
   1cca8:	mvn	r0, #0
   1ccac:	b	1cc04 <test_nested_buffer_using_nest@@Base+0x2e8>
   1ccb0:	mov	r0, #0
   1ccb4:	bl	12f18 <_start@@Base+0x480>
   1ccb8:	ldr	r1, [pc, #36]	; 1cce4 <test_nested_buffer_using_nest@@Base+0x3c8>
   1ccbc:	bl	12990 <strcmp@plt>
   1ccc0:	cmp	r0, #0
   1ccc4:	beq	1cc44 <test_nested_buffer_using_nest@@Base+0x328>
   1ccc8:	ldr	r0, [pc, #100]	; 1cd34 <test_nested_buffer_using_nest@@Base+0x418>
   1cccc:	bl	129f0 <puts@plt>
   1ccd0:	mvn	r0, #0
   1ccd4:	b	1cc04 <test_nested_buffer_using_nest@@Base+0x2e8>
   1ccd8:	andeq	r4, r2, r0, asr r0
   1ccdc:	ldrdeq	r6, [r2], -r4
   1cce0:	andeq	r3, r2, r4, ror #16
   1cce4:	ldrdeq	r4, [r2], -ip
   1cce8:	andeq	r8, r3, r0, ror r0
   1ccec:	muleq	r2, r0, r6
   1ccf0:	movtpl	r4, #61261	; 0xef4d
   1ccf4:	andeq	r3, r2, r8, ror #16
   1ccf8:	andeq	r4, r2, r8, asr r0
   1ccfc:	andeq	r4, r2, r8, ror #3
   1cd00:	andeq	r6, r2, r4, ror r6
   1cd04:	ldrdeq	r3, [r2], -r8
   1cd08:	andeq	r3, r2, ip, ror sp
   1cd0c:	andeq	r3, r2, r0, ror #27
   1cd10:	andeq	r6, r2, r4, lsl r6
   1cd14:	andeq	r3, r2, r4, lsl #24
   1cd18:	strdeq	r0, [r0], -sl
   1cd1c:	ldrdeq	r4, [r2], -ip
   1cd20:	andeq	r6, r2, r8, lsr r6
   1cd24:	andeq	r6, r2, r4, asr r6
   1cd28:	andeq	r3, r2, r4, lsr #24
   1cd2c:			; <UNDEFINED> instruction: 0x000002ba
   1cd30:			; <UNDEFINED> instruction: 0x000266b4
   1cd34:	strdeq	r6, [r2], -r8

0001cd38 <verify_include@@Base>:
   1cd38:	mov	r0, #0
   1cd3c:	bx	lr

0001cd40 <test_struct_buffer@@Base>:
   1cd40:	push	{r4, lr}
   1cd44:	sub	sp, sp, #112	; 0x70
   1cd48:	mov	r4, r0
   1cd4c:	bl	1e238 <flatcc_builder_reset@@Base>
   1cd50:	mov	r2, #16
   1cd54:	mov	r1, #32
   1cd58:	mov	r0, r4
   1cd5c:	bl	1ebcc <flatcc_builder_start_struct@@Base>
   1cd60:	cmp	r0, #0
   1cd64:	moveq	r3, #0
   1cd68:	beq	1cdb4 <test_struct_buffer@@Base+0x74>
   1cd6c:	mov	r3, #1065353216	; 0x3f800000
   1cd70:	str	r3, [r0]
   1cd74:	mov	r3, #1073741824	; 0x40000000
   1cd78:	str	r3, [r0, #4]
   1cd7c:	ldr	r3, [pc, #432]	; 1cf34 <test_struct_buffer@@Base+0x1f4>
   1cd80:	str	r3, [r0, #8]
   1cd84:	ldr	r2, [pc, #428]	; 1cf38 <test_struct_buffer@@Base+0x1f8>
   1cd88:	ldr	r3, [pc, #428]	; 1cf3c <test_struct_buffer@@Base+0x1fc>
   1cd8c:	strd	r2, [r0, #16]
   1cd90:	mov	r3, #8
   1cd94:	strb	r3, [r0, #24]
   1cd98:	ldr	r3, [pc, #416]	; 1cf40 <test_struct_buffer@@Base+0x200>
   1cd9c:	strh	r3, [r0, #26]
   1cda0:	mvn	r3, #16
   1cda4:	strb	r3, [r0, #28]
   1cda8:	mov	r0, r4
   1cdac:	bl	1ec74 <flatcc_builder_end_struct@@Base>
   1cdb0:	mov	r3, r0
   1cdb4:	mov	r2, #0
   1cdb8:	str	r2, [sp, #4]
   1cdbc:	mov	r1, #16
   1cdc0:	str	r1, [sp]
   1cdc4:	ldr	r1, [pc, #376]	; 1cf44 <test_struct_buffer@@Base+0x204>
   1cdc8:	mov	r0, r4
   1cdcc:	bl	1e660 <flatcc_builder_create_buffer@@Base>
   1cdd0:	mov	r0, r4
   1cdd4:	bl	21788 <flatcc_builder_get_buffer_size@@Base>
   1cdd8:	cmp	r0, #48	; 0x30
   1cddc:	bne	1cec8 <test_struct_buffer@@Base+0x188>
   1cde0:	mov	r1, #48	; 0x30
   1cde4:	ldr	r0, [pc, #348]	; 1cf48 <test_struct_buffer@@Base+0x208>
   1cde8:	bl	1299c <printf@plt>
   1cdec:	mov	r0, r4
   1cdf0:	bl	21a70 <flatcc_builder_get_emit_context@@Base>
   1cdf4:	ldr	r3, [r0, #24]
   1cdf8:	cmp	r3, #48	; 0x30
   1cdfc:	bne	1cedc <test_struct_buffer@@Base+0x19c>
   1ce00:	mov	r2, #100	; 0x64
   1ce04:	add	r1, sp, #12
   1ce08:	mov	r0, r4
   1ce0c:	bl	21884 <flatcc_builder_copy_buffer@@Base>
   1ce10:	cmp	r0, #0
   1ce14:	beq	1cef0 <test_struct_buffer@@Base+0x1b0>
   1ce18:	ldr	r3, [pc, #300]	; 1cf4c <test_struct_buffer@@Base+0x20c>
   1ce1c:	ldr	r3, [r3]
   1ce20:	mov	r2, #48	; 0x30
   1ce24:	add	r1, sp, #12
   1ce28:	ldr	r0, [pc, #288]	; 1cf50 <test_struct_buffer@@Base+0x210>
   1ce2c:	bl	134b0 <_start@@Base+0xa18>
   1ce30:	ldr	r2, [sp, #16]
   1ce34:	ldr	r3, [pc, #280]	; 1cf54 <test_struct_buffer@@Base+0x214>
   1ce38:	cmp	r2, r3
   1ce3c:	bne	1cf00 <test_struct_buffer@@Base+0x1c0>
   1ce40:	ldr	r3, [sp, #12]
   1ce44:	add	r2, sp, #12
   1ce48:	add	r3, r2, r3
   1ce4c:	vldr	s14, [r3]
   1ce50:	vldr	s15, [pc, #208]	; 1cf28 <test_struct_buffer@@Base+0x1e8>
   1ce54:	vcmp.f32	s14, s15
   1ce58:	vmrs	APSR_nzcv, fpscr
   1ce5c:	bne	1cf10 <test_struct_buffer@@Base+0x1d0>
   1ce60:	vldr	s14, [r3, #4]
   1ce64:	vldr	s15, [pc, #192]	; 1cf2c <test_struct_buffer@@Base+0x1ec>
   1ce68:	vcmp.f32	s14, s15
   1ce6c:	vmrs	APSR_nzcv, fpscr
   1ce70:	bne	1cf10 <test_struct_buffer@@Base+0x1d0>
   1ce74:	vldr	s14, [r3, #8]
   1ce78:	vldr	s15, [pc, #176]	; 1cf30 <test_struct_buffer@@Base+0x1f0>
   1ce7c:	vcmp.f32	s14, s15
   1ce80:	vmrs	APSR_nzcv, fpscr
   1ce84:	bne	1cf10 <test_struct_buffer@@Base+0x1d0>
   1ce88:	vldr	d6, [r3, #16]
   1ce8c:	vldr	d7, [pc, #140]	; 1cf20 <test_struct_buffer@@Base+0x1e0>
   1ce90:	vcmp.f64	d6, d7
   1ce94:	vmrs	APSR_nzcv, fpscr
   1ce98:	bne	1cf10 <test_struct_buffer@@Base+0x1d0>
   1ce9c:	ldr	r2, [r3, #24]
   1cea0:	bic	r2, r2, #65280	; 0xff00
   1cea4:	ldr	r1, [pc, #172]	; 1cf58 <test_struct_buffer@@Base+0x218>
   1cea8:	cmp	r2, r1
   1ceac:	bne	1cf10 <test_struct_buffer@@Base+0x1d0>
   1ceb0:	ldrsb	r3, [r3, #28]
   1ceb4:	cmn	r3, #17
   1ceb8:	moveq	r0, #0
   1cebc:	bne	1cf10 <test_struct_buffer@@Base+0x1d0>
   1cec0:	add	sp, sp, #112	; 0x70
   1cec4:	pop	{r4, pc}
   1cec8:	ldr	r3, [pc, #140]	; 1cf5c <test_struct_buffer@@Base+0x21c>
   1cecc:	ldr	r2, [pc, #140]	; 1cf60 <test_struct_buffer@@Base+0x220>
   1ced0:	ldr	r1, [pc, #140]	; 1cf64 <test_struct_buffer@@Base+0x224>
   1ced4:	ldr	r0, [pc, #140]	; 1cf68 <test_struct_buffer@@Base+0x228>
   1ced8:	bl	12a8c <__assert_fail@plt>
   1cedc:	ldr	r3, [pc, #120]	; 1cf5c <test_struct_buffer@@Base+0x21c>
   1cee0:	ldr	r2, [pc, #132]	; 1cf6c <test_struct_buffer@@Base+0x22c>
   1cee4:	ldr	r1, [pc, #120]	; 1cf64 <test_struct_buffer@@Base+0x224>
   1cee8:	ldr	r0, [pc, #128]	; 1cf70 <test_struct_buffer@@Base+0x230>
   1ceec:	bl	12a8c <__assert_fail@plt>
   1cef0:	ldr	r0, [pc, #124]	; 1cf74 <test_struct_buffer@@Base+0x234>
   1cef4:	bl	129f0 <puts@plt>
   1cef8:	mvn	r0, #0
   1cefc:	b	1cec0 <test_struct_buffer@@Base+0x180>
   1cf00:	ldr	r0, [pc, #112]	; 1cf78 <test_struct_buffer@@Base+0x238>
   1cf04:	bl	129f0 <puts@plt>
   1cf08:	mvn	r0, #0
   1cf0c:	b	1cec0 <test_struct_buffer@@Base+0x180>
   1cf10:	ldr	r0, [pc, #100]	; 1cf7c <test_struct_buffer@@Base+0x23c>
   1cf14:	bl	129f0 <puts@plt>
   1cf18:	mvn	r0, #0
   1cf1c:	b	1cec0 <test_struct_buffer@@Base+0x180>
   1cf20:	stclgt	12, cr12, [ip], {205}	; 0xcd
   1cf24:	andsmi	ip, r0, ip, asr #25
   1cf28:	svccc	0x00800000
   1cf2c:	andmi	r0, r0, r0
   1cf30:	submi	r0, r0, r0
   1cf34:	submi	r0, r0, r0
   1cf38:	stclgt	12, cr12, [ip], {205}	; 0xcd
   1cf3c:	andsmi	ip, r0, ip, asr #25
   1cf40:	andeq	r0, r0, sl, lsr #21
   1cf44:	andeq	r4, r2, r0, asr r0
   1cf48:	andeq	r6, r2, r4, ror #13
   1cf4c:	andeq	r8, r3, r0, ror r0
   1cf50:	andeq	r6, r2, ip, asr r7
   1cf54:	movtpl	r4, #61261	; 0xef4d
   1cf58:	beq	fea9cf80 <__bss_end__@@Base+0xfea64e9c>
   1cf5c:	andeq	r3, r2, r0, asr #24
   1cf60:	andeq	r0, r0, r3, lsr #18
   1cf64:	ldrdeq	r4, [r2], -ip
   1cf68:	ldrdeq	r6, [r2], -r8
   1cf6c:	andeq	r0, r0, r5, lsr #18
   1cf70:	andeq	r6, r2, r4, lsl #14
   1cf74:	andeq	r6, r2, r0, asr r7
   1cf78:	andeq	r6, r2, r0, ror r7
   1cf7c:	muleq	r2, r4, r7

0001cf80 <test_typed_struct_buffer@@Base>:
   1cf80:	push	{r4, lr}
   1cf84:	sub	sp, sp, #112	; 0x70
   1cf88:	mov	r4, r0
   1cf8c:	bl	1e238 <flatcc_builder_reset@@Base>
   1cf90:	mov	r2, #16
   1cf94:	mov	r1, #32
   1cf98:	mov	r0, r4
   1cf9c:	bl	1ebcc <flatcc_builder_start_struct@@Base>
   1cfa0:	cmp	r0, #0
   1cfa4:	moveq	r3, #0
   1cfa8:	beq	1cff4 <test_typed_struct_buffer@@Base+0x74>
   1cfac:	mov	r3, #1065353216	; 0x3f800000
   1cfb0:	str	r3, [r0]
   1cfb4:	mov	r3, #1073741824	; 0x40000000
   1cfb8:	str	r3, [r0, #4]
   1cfbc:	ldr	r3, [pc, #600]	; 1d21c <test_typed_struct_buffer@@Base+0x29c>
   1cfc0:	str	r3, [r0, #8]
   1cfc4:	ldr	r2, [pc, #596]	; 1d220 <test_typed_struct_buffer@@Base+0x2a0>
   1cfc8:	ldr	r3, [pc, #596]	; 1d224 <test_typed_struct_buffer@@Base+0x2a4>
   1cfcc:	strd	r2, [r0, #16]
   1cfd0:	mov	r3, #8
   1cfd4:	strb	r3, [r0, #24]
   1cfd8:	ldr	r3, [pc, #584]	; 1d228 <test_typed_struct_buffer@@Base+0x2a8>
   1cfdc:	strh	r3, [r0, #26]
   1cfe0:	mvn	r3, #16
   1cfe4:	strb	r3, [r0, #28]
   1cfe8:	mov	r0, r4
   1cfec:	bl	1ec74 <flatcc_builder_end_struct@@Base>
   1cff0:	mov	r3, r0
   1cff4:	mov	r2, #0
   1cff8:	str	r2, [sp, #4]
   1cffc:	mov	r1, #16
   1d000:	str	r1, [sp]
   1d004:	ldr	r1, [pc, #544]	; 1d22c <test_typed_struct_buffer@@Base+0x2ac>
   1d008:	mov	r0, r4
   1d00c:	bl	1e660 <flatcc_builder_create_buffer@@Base>
   1d010:	mov	r0, r4
   1d014:	bl	21788 <flatcc_builder_get_buffer_size@@Base>
   1d018:	cmp	r0, #48	; 0x30
   1d01c:	bne	1d170 <test_typed_struct_buffer@@Base+0x1f0>
   1d020:	mov	r1, #48	; 0x30
   1d024:	ldr	r0, [pc, #516]	; 1d230 <test_typed_struct_buffer@@Base+0x2b0>
   1d028:	bl	1299c <printf@plt>
   1d02c:	mov	r0, r4
   1d030:	bl	21a70 <flatcc_builder_get_emit_context@@Base>
   1d034:	ldr	r3, [r0, #24]
   1d038:	cmp	r3, #48	; 0x30
   1d03c:	bne	1d184 <test_typed_struct_buffer@@Base+0x204>
   1d040:	mov	r2, #100	; 0x64
   1d044:	add	r1, sp, #12
   1d048:	mov	r0, r4
   1d04c:	bl	21884 <flatcc_builder_copy_buffer@@Base>
   1d050:	cmp	r0, #0
   1d054:	beq	1d198 <test_typed_struct_buffer@@Base+0x218>
   1d058:	ldr	r3, [pc, #468]	; 1d234 <test_typed_struct_buffer@@Base+0x2b4>
   1d05c:	ldr	r3, [r3]
   1d060:	mov	r2, #48	; 0x30
   1d064:	add	r1, sp, #12
   1d068:	ldr	r0, [pc, #456]	; 1d238 <test_typed_struct_buffer@@Base+0x2b8>
   1d06c:	bl	134b0 <_start@@Base+0xa18>
   1d070:	ldr	r2, [sp, #16]
   1d074:	ldr	r3, [pc, #448]	; 1d23c <test_typed_struct_buffer@@Base+0x2bc>
   1d078:	cmp	r2, r3
   1d07c:	bne	1d1a8 <test_typed_struct_buffer@@Base+0x228>
   1d080:	ldr	r2, [sp, #12]
   1d084:	add	r3, sp, #12
   1d088:	cmn	r3, r2
   1d08c:	beq	1d1b8 <test_typed_struct_buffer@@Base+0x238>
   1d090:	mov	r3, #16
   1d094:	str	r3, [sp]
   1d098:	mov	r3, #32
   1d09c:	ldr	r2, [pc, #408]	; 1d23c <test_typed_struct_buffer@@Base+0x2bc>
   1d0a0:	mov	r1, #48	; 0x30
   1d0a4:	add	r0, sp, #12
   1d0a8:	bl	22d5c <flatcc_verify_struct_as_typed_root@@Base>
   1d0ac:	cmp	r0, #0
   1d0b0:	bne	1d1c8 <test_typed_struct_buffer@@Base+0x248>
   1d0b4:	ldr	r2, [sp, #16]
   1d0b8:	ldr	r3, [pc, #380]	; 1d23c <test_typed_struct_buffer@@Base+0x2bc>
   1d0bc:	cmp	r2, r3
   1d0c0:	bne	1d1d8 <test_typed_struct_buffer@@Base+0x258>
   1d0c4:	add	r4, sp, #12
   1d0c8:	ldr	r3, [sp, #12]
   1d0cc:	adds	r4, r4, r3
   1d0d0:	beq	1d1d8 <test_typed_struct_buffer@@Base+0x258>
   1d0d4:	mov	r3, #16
   1d0d8:	str	r3, [sp]
   1d0dc:	mov	r3, #32
   1d0e0:	ldr	r2, [pc, #340]	; 1d23c <test_typed_struct_buffer@@Base+0x2bc>
   1d0e4:	mov	r1, #48	; 0x30
   1d0e8:	add	r0, sp, #12
   1d0ec:	bl	22d5c <flatcc_verify_struct_as_typed_root@@Base>
   1d0f0:	cmp	r0, #0
   1d0f4:	bne	1d1e8 <test_typed_struct_buffer@@Base+0x268>
   1d0f8:	vldr	s14, [r4]
   1d0fc:	vldr	s15, [pc, #268]	; 1d210 <test_typed_struct_buffer@@Base+0x290>
   1d100:	vcmp.f32	s14, s15
   1d104:	vmrs	APSR_nzcv, fpscr
   1d108:	bne	1d1f8 <test_typed_struct_buffer@@Base+0x278>
   1d10c:	vldr	s14, [r4, #4]
   1d110:	vldr	s15, [pc, #252]	; 1d214 <test_typed_struct_buffer@@Base+0x294>
   1d114:	vcmp.f32	s14, s15
   1d118:	vmrs	APSR_nzcv, fpscr
   1d11c:	bne	1d1f8 <test_typed_struct_buffer@@Base+0x278>
   1d120:	vldr	s14, [r4, #8]
   1d124:	vldr	s15, [pc, #236]	; 1d218 <test_typed_struct_buffer@@Base+0x298>
   1d128:	vcmp.f32	s14, s15
   1d12c:	vmrs	APSR_nzcv, fpscr
   1d130:	bne	1d1f8 <test_typed_struct_buffer@@Base+0x278>
   1d134:	vldr	d6, [r4, #16]
   1d138:	vldr	d7, [pc, #200]	; 1d208 <test_typed_struct_buffer@@Base+0x288>
   1d13c:	vcmp.f64	d6, d7
   1d140:	vmrs	APSR_nzcv, fpscr
   1d144:	bne	1d1f8 <test_typed_struct_buffer@@Base+0x278>
   1d148:	ldr	r3, [r4, #24]
   1d14c:	bic	r3, r3, #65280	; 0xff00
   1d150:	ldr	r2, [pc, #232]	; 1d240 <test_typed_struct_buffer@@Base+0x2c0>
   1d154:	cmp	r3, r2
   1d158:	bne	1d1f8 <test_typed_struct_buffer@@Base+0x278>
   1d15c:	ldrsb	r3, [r4, #28]
   1d160:	cmn	r3, #17
   1d164:	bne	1d1f8 <test_typed_struct_buffer@@Base+0x278>
   1d168:	add	sp, sp, #112	; 0x70
   1d16c:	pop	{r4, pc}
   1d170:	ldr	r3, [pc, #204]	; 1d244 <test_typed_struct_buffer@@Base+0x2c4>
   1d174:	ldr	r2, [pc, #204]	; 1d248 <test_typed_struct_buffer@@Base+0x2c8>
   1d178:	ldr	r1, [pc, #204]	; 1d24c <test_typed_struct_buffer@@Base+0x2cc>
   1d17c:	ldr	r0, [pc, #204]	; 1d250 <test_typed_struct_buffer@@Base+0x2d0>
   1d180:	bl	12a8c <__assert_fail@plt>
   1d184:	ldr	r3, [pc, #184]	; 1d244 <test_typed_struct_buffer@@Base+0x2c4>
   1d188:	ldr	r2, [pc, #196]	; 1d254 <test_typed_struct_buffer@@Base+0x2d4>
   1d18c:	ldr	r1, [pc, #184]	; 1d24c <test_typed_struct_buffer@@Base+0x2cc>
   1d190:	ldr	r0, [pc, #192]	; 1d258 <test_typed_struct_buffer@@Base+0x2d8>
   1d194:	bl	12a8c <__assert_fail@plt>
   1d198:	ldr	r0, [pc, #188]	; 1d25c <test_typed_struct_buffer@@Base+0x2dc>
   1d19c:	bl	129f0 <puts@plt>
   1d1a0:	mvn	r0, #0
   1d1a4:	b	1d168 <test_typed_struct_buffer@@Base+0x1e8>
   1d1a8:	ldr	r0, [pc, #176]	; 1d260 <test_typed_struct_buffer@@Base+0x2e0>
   1d1ac:	bl	129f0 <puts@plt>
   1d1b0:	mvn	r0, #0
   1d1b4:	b	1d168 <test_typed_struct_buffer@@Base+0x1e8>
   1d1b8:	ldr	r0, [pc, #164]	; 1d264 <test_typed_struct_buffer@@Base+0x2e4>
   1d1bc:	bl	129f0 <puts@plt>
   1d1c0:	mvn	r0, #0
   1d1c4:	b	1d168 <test_typed_struct_buffer@@Base+0x1e8>
   1d1c8:	ldr	r0, [pc, #152]	; 1d268 <test_typed_struct_buffer@@Base+0x2e8>
   1d1cc:	bl	129f0 <puts@plt>
   1d1d0:	mvn	r0, #0
   1d1d4:	b	1d168 <test_typed_struct_buffer@@Base+0x1e8>
   1d1d8:	ldr	r0, [pc, #140]	; 1d26c <test_typed_struct_buffer@@Base+0x2ec>
   1d1dc:	bl	129f0 <puts@plt>
   1d1e0:	mvn	r0, #0
   1d1e4:	b	1d168 <test_typed_struct_buffer@@Base+0x1e8>
   1d1e8:	ldr	r0, [pc, #128]	; 1d270 <test_typed_struct_buffer@@Base+0x2f0>
   1d1ec:	bl	129f0 <puts@plt>
   1d1f0:	mvn	r0, #0
   1d1f4:	b	1d168 <test_typed_struct_buffer@@Base+0x1e8>
   1d1f8:	ldr	r0, [pc, #116]	; 1d274 <test_typed_struct_buffer@@Base+0x2f4>
   1d1fc:	bl	129f0 <puts@plt>
   1d200:	mvn	r0, #0
   1d204:	b	1d168 <test_typed_struct_buffer@@Base+0x1e8>
   1d208:	stclgt	12, cr12, [ip], {205}	; 0xcd
   1d20c:	andsmi	ip, r0, ip, asr #25
   1d210:	svccc	0x00800000
   1d214:	andmi	r0, r0, r0
   1d218:	submi	r0, r0, r0
   1d21c:	submi	r0, r0, r0
   1d220:	stclgt	12, cr12, [ip], {205}	; 0xcd
   1d224:	andsmi	ip, r0, ip, asr #25
   1d228:	andeq	r0, r0, sl, lsr #21
   1d22c:	andeq	r6, r2, ip, lsr #15
   1d230:	andeq	r6, r2, r4, ror #13
   1d234:	andeq	r8, r3, r0, ror r0
   1d238:			; <UNDEFINED> instruction: 0x000267b4
   1d23c:	ldmge	r5!, {r1, r4, r6, r7, r9, sl, fp, ip, sp}^
   1d240:	beq	fea9d268 <__bss_end__@@Base+0xfea65184>
   1d244:	andeq	r3, r2, r4, asr ip
   1d248:	andeq	r0, r0, r4, asr r9
   1d24c:	ldrdeq	r4, [r2], -ip
   1d250:	ldrdeq	r6, [r2], -r8
   1d254:	andeq	r0, r0, r6, asr r9
   1d258:	andeq	r6, r2, r4, lsl #14
   1d25c:	andeq	r6, r2, r0, asr r7
   1d260:	andeq	r6, r2, r0, ror r7
   1d264:	ldrdeq	r6, [r2], -r0
   1d268:	strdeq	r6, [r2], -r8
   1d26c:	andeq	r6, r2, ip, lsl r8
   1d270:	andeq	r6, r2, ip, lsr r8
   1d274:	muleq	r2, r4, r7

0001d278 <gen_monster_benchmark@@Base>:
   1d278:	push	{r4, r5, lr}
   1d27c:	sub	sp, sp, #28
   1d280:	mov	r4, r0
   1d284:	add	r3, sp, #12
   1d288:	ldr	r2, [pc, #508]	; 1d48c <gen_monster_benchmark@@Base+0x214>
   1d28c:	ldm	r2, {r0, r1, r2}
   1d290:	stmia	r3!, {r0, r1}
   1d294:	strh	r2, [r3]
   1d298:	mov	r0, r4
   1d29c:	bl	1e238 <flatcc_builder_reset@@Base>
   1d2a0:	mov	r3, #0
   1d2a4:	mov	r2, r3
   1d2a8:	ldr	r1, [pc, #480]	; 1d490 <gen_monster_benchmark@@Base+0x218>
   1d2ac:	mov	r0, r4
   1d2b0:	bl	1e9d8 <flatcc_builder_start_buffer@@Base>
   1d2b4:	cmp	r0, #0
   1d2b8:	bne	1d2c8 <gen_monster_benchmark@@Base+0x50>
   1d2bc:	mov	r1, #36	; 0x24
   1d2c0:	mov	r0, r4
   1d2c4:	bl	1f804 <flatcc_builder_start_table@@Base>
   1d2c8:	mov	r3, #2
   1d2cc:	mov	r2, r3
   1d2d0:	mov	r1, r3
   1d2d4:	mov	r0, r4
   1d2d8:	bl	21200 <flatcc_builder_table_add@@Base>
   1d2dc:	cmp	r0, #0
   1d2e0:	movne	r3, #80	; 0x50
   1d2e4:	strhne	r3, [r0]
   1d2e8:	mov	r3, #16
   1d2ec:	mov	r2, #32
   1d2f0:	mov	r1, #0
   1d2f4:	mov	r0, r4
   1d2f8:	bl	21200 <flatcc_builder_table_add@@Base>
   1d2fc:	mov	r3, #1065353216	; 0x3f800000
   1d300:	str	r3, [r0]
   1d304:	mov	r3, #1073741824	; 0x40000000
   1d308:	str	r3, [r0, #4]
   1d30c:	ldr	r3, [pc, #384]	; 1d494 <gen_monster_benchmark@@Base+0x21c>
   1d310:	str	r3, [r0, #8]
   1d314:	ldr	r1, [pc, #380]	; 1d498 <gen_monster_benchmark@@Base+0x220>
   1d318:	mov	r0, r4
   1d31c:	bl	2108c <flatcc_builder_create_string_str@@Base>
   1d320:	subs	r5, r0, #0
   1d324:	beq	1d33c <gen_monster_benchmark@@Base+0xc4>
   1d328:	mov	r1, #3
   1d32c:	mov	r0, r4
   1d330:	bl	213cc <flatcc_builder_table_add_offset@@Base>
   1d334:	cmp	r0, #0
   1d338:	strne	r5, [r0]
   1d33c:	mvn	r3, #0
   1d340:	str	r3, [sp, #4]
   1d344:	mov	r3, #1
   1d348:	str	r3, [sp]
   1d34c:	mov	r2, #10
   1d350:	add	r1, sp, #12
   1d354:	mov	r0, r4
   1d358:	bl	20408 <flatcc_builder_create_vector@@Base>
   1d35c:	subs	r5, r0, #0
   1d360:	beq	1d378 <gen_monster_benchmark@@Base+0x100>
   1d364:	mov	r1, #5
   1d368:	mov	r0, r4
   1d36c:	bl	213cc <flatcc_builder_table_add_offset@@Base>
   1d370:	cmp	r0, #0
   1d374:	strne	r5, [r0]
   1d378:	mvn	r3, #-1073741824	; 0xc0000000
   1d37c:	mov	r2, #2
   1d380:	mov	r1, #4
   1d384:	mov	r0, r4
   1d388:	bl	1f554 <flatcc_builder_start_vector@@Base>
   1d38c:	mov	r1, #1
   1d390:	mov	r0, r4
   1d394:	bl	1ed4c <flatcc_builder_extend_vector@@Base>
   1d398:	mov	r3, #16
   1d39c:	strh	r3, [r0]
   1d3a0:	mov	r3, #32
   1d3a4:	strb	r3, [r0, #2]
   1d3a8:	mov	r1, #2
   1d3ac:	mov	r0, r4
   1d3b0:	bl	1ed4c <flatcc_builder_extend_vector@@Base>
   1d3b4:	mov	r3, #48	; 0x30
   1d3b8:	strh	r3, [r0]
   1d3bc:	mov	r3, #64	; 0x40
   1d3c0:	strb	r3, [r0, #2]
   1d3c4:	mov	r3, #80	; 0x50
   1d3c8:	strh	r3, [r0, #4]
   1d3cc:	mov	r3, #96	; 0x60
   1d3d0:	strb	r3, [r0, #6]
   1d3d4:	mov	r1, #1
   1d3d8:	mov	r0, r4
   1d3dc:	bl	1ed4c <flatcc_builder_extend_vector@@Base>
   1d3e0:	cmp	r0, #0
   1d3e4:	movne	r3, #112	; 0x70
   1d3e8:	strhne	r3, [r0]
   1d3ec:	mvnne	r3, #127	; 0x7f
   1d3f0:	strbne	r3, [r0, #2]
   1d3f4:	ldr	r3, [pc, #160]	; 1d49c <gen_monster_benchmark@@Base+0x224>
   1d3f8:	strh	r3, [sp, #8]
   1d3fc:	mvn	r3, #110	; 0x6e
   1d400:	strb	r3, [sp, #10]
   1d404:	mov	r1, #1
   1d408:	mov	r0, r4
   1d40c:	bl	1ed4c <flatcc_builder_extend_vector@@Base>
   1d410:	cmp	r0, #0
   1d414:	ldrne	r3, [sp, #8]
   1d418:	strne	r3, [r0]
   1d41c:	mov	r0, r4
   1d420:	bl	20564 <flatcc_builder_end_vector@@Base>
   1d424:	subs	r5, r0, #0
   1d428:	beq	1d440 <gen_monster_benchmark@@Base+0x1c8>
   1d42c:	mov	r1, #9
   1d430:	mov	r0, r4
   1d434:	bl	213cc <flatcc_builder_table_add_offset@@Base>
   1d438:	cmp	r0, #0
   1d43c:	strne	r5, [r0]
   1d440:	mov	r2, #1
   1d444:	ldr	r1, [pc, #84]	; 1d4a0 <gen_monster_benchmark@@Base+0x228>
   1d448:	mov	r0, r4
   1d44c:	bl	201a8 <flatcc_builder_check_required@@Base>
   1d450:	cmp	r0, #0
   1d454:	beq	1d478 <gen_monster_benchmark@@Base+0x200>
   1d458:	mov	r0, r4
   1d45c:	bl	20254 <flatcc_builder_end_table@@Base>
   1d460:	mov	r1, r0
   1d464:	mov	r0, r4
   1d468:	bl	1ea90 <flatcc_builder_end_buffer@@Base>
   1d46c:	mov	r0, #0
   1d470:	add	sp, sp, #28
   1d474:	pop	{r4, r5, pc}
   1d478:	ldr	r3, [pc, #36]	; 1d4a4 <gen_monster_benchmark@@Base+0x22c>
   1d47c:	mov	r2, #235	; 0xeb
   1d480:	ldr	r1, [pc, #32]	; 1d4a8 <gen_monster_benchmark@@Base+0x230>
   1d484:	ldr	r0, [pc, #32]	; 1d4ac <gen_monster_benchmark@@Base+0x234>
   1d488:	bl	12a8c <__assert_fail@plt>
   1d48c:	andeq	r3, r2, r4, lsr r9
   1d490:	andeq	r4, r2, r0, asr r0
   1d494:	subgt	ip, ip, sp, asr #25
   1d498:	ldrdeq	r4, [r2], -ip
   1d49c:	muleq	r0, r1, r1
   1d4a0:	andeq	r3, r2, r4, ror #16
   1d4a4:	andeq	r3, r2, r8, ror #16
   1d4a8:	andeq	r4, r2, r8, asr r0
   1d4ac:	andeq	r4, r2, r8, ror #3

0001d4b0 <time_monster@@Base>:
   1d4b0:	push	{r4, r5, r6, lr}
   1d4b4:	vpush	{d8}
   1d4b8:	mov	r5, r0
   1d4bc:	ldr	r0, [pc, #84]	; 1d518 <time_monster@@Base+0x68>
   1d4c0:	bl	129f0 <puts@plt>
   1d4c4:	bl	13ef0 <_start@@Base+0x1458>
   1d4c8:	vmov.f64	d8, d0
   1d4cc:	ldr	r4, [pc, #72]	; 1d51c <time_monster@@Base+0x6c>
   1d4d0:	mov	r0, r5
   1d4d4:	bl	1d278 <gen_monster_benchmark@@Base>
   1d4d8:	subs	r4, r4, #1
   1d4dc:	bne	1d4d0 <time_monster@@Base+0x20>
   1d4e0:	mov	r0, r5
   1d4e4:	bl	21788 <flatcc_builder_get_buffer_size@@Base>
   1d4e8:	mov	r4, r0
   1d4ec:	bl	13ef0 <_start@@Base+0x1458>
   1d4f0:	ldr	r3, [pc, #40]	; 1d520 <time_monster@@Base+0x70>
   1d4f4:	ldr	r2, [pc, #32]	; 1d51c <time_monster@@Base+0x6c>
   1d4f8:	mov	r1, r4
   1d4fc:	vmov.f64	d1, d0
   1d500:	vmov.f64	d0, d8
   1d504:	ldr	r0, [pc, #24]	; 1d524 <time_monster@@Base+0x74>
   1d508:	bl	12bd0 <_start@@Base+0x138>
   1d50c:	mov	r0, #0
   1d510:	vpop	{d8}
   1d514:	pop	{r4, r5, r6, pc}
   1d518:	andeq	r6, r2, r4, ror #16
   1d51c:	andeq	r4, pc, r0, asr #4
   1d520:	andeq	r6, r2, r8, ror r8
   1d524:	andeq	r6, r2, r0, lsl #17

0001d528 <gen_struct_buffer_benchmark@@Base>:
   1d528:	push	{r4, r5, lr}
   1d52c:	sub	sp, sp, #12
   1d530:	mov	r4, r0
   1d534:	bl	1e238 <flatcc_builder_reset@@Base>
   1d538:	mov	r2, #16
   1d53c:	mov	r1, #32
   1d540:	mov	r0, r4
   1d544:	bl	1ebcc <flatcc_builder_start_struct@@Base>
   1d548:	cmp	r0, #0
   1d54c:	moveq	r3, #0
   1d550:	beq	1d59c <gen_struct_buffer_benchmark@@Base+0x74>
   1d554:	mov	r3, #1065353216	; 0x3f800000
   1d558:	str	r3, [r0]
   1d55c:	mov	r3, #1073741824	; 0x40000000
   1d560:	str	r3, [r0, #4]
   1d564:	ldr	r3, [pc, #304]	; 1d69c <gen_struct_buffer_benchmark@@Base+0x174>
   1d568:	str	r3, [r0, #8]
   1d56c:	ldr	r2, [pc, #300]	; 1d6a0 <gen_struct_buffer_benchmark@@Base+0x178>
   1d570:	ldr	r3, [pc, #300]	; 1d6a4 <gen_struct_buffer_benchmark@@Base+0x17c>
   1d574:	strd	r2, [r0, #16]
   1d578:	mov	r3, #8
   1d57c:	strb	r3, [r0, #24]
   1d580:	ldr	r3, [pc, #288]	; 1d6a8 <gen_struct_buffer_benchmark@@Base+0x180>
   1d584:	strh	r3, [r0, #26]
   1d588:	mvn	r3, #16
   1d58c:	strb	r3, [r0, #28]
   1d590:	mov	r0, r4
   1d594:	bl	1ec74 <flatcc_builder_end_struct@@Base>
   1d598:	mov	r3, r0
   1d59c:	mov	r5, #0
   1d5a0:	str	r5, [sp, #4]
   1d5a4:	mov	r2, #16
   1d5a8:	str	r2, [sp]
   1d5ac:	mov	r2, r5
   1d5b0:	ldr	r1, [pc, #244]	; 1d6ac <gen_struct_buffer_benchmark@@Base+0x184>
   1d5b4:	mov	r0, r4
   1d5b8:	bl	1e660 <flatcc_builder_create_buffer@@Base>
   1d5bc:	mov	r1, r5
   1d5c0:	mov	r0, r4
   1d5c4:	bl	2181c <flatcc_builder_get_direct_buffer@@Base>
   1d5c8:	cmp	r0, #0
   1d5cc:	beq	1d654 <gen_struct_buffer_benchmark@@Base+0x12c>
   1d5d0:	ldr	r3, [r0]
   1d5d4:	add	r0, r0, r3
   1d5d8:	vldr	s14, [r0]
   1d5dc:	vldr	s15, [pc, #172]	; 1d690 <gen_struct_buffer_benchmark@@Base+0x168>
   1d5e0:	vcmp.f32	s14, s15
   1d5e4:	vmrs	APSR_nzcv, fpscr
   1d5e8:	bne	1d65c <gen_struct_buffer_benchmark@@Base+0x134>
   1d5ec:	vldr	s14, [r0, #4]
   1d5f0:	vldr	s15, [pc, #156]	; 1d694 <gen_struct_buffer_benchmark@@Base+0x16c>
   1d5f4:	vcmp.f32	s14, s15
   1d5f8:	vmrs	APSR_nzcv, fpscr
   1d5fc:	bne	1d664 <gen_struct_buffer_benchmark@@Base+0x13c>
   1d600:	vldr	s14, [r0, #8]
   1d604:	vldr	s15, [pc, #140]	; 1d698 <gen_struct_buffer_benchmark@@Base+0x170>
   1d608:	vcmp.f32	s14, s15
   1d60c:	vmrs	APSR_nzcv, fpscr
   1d610:	bne	1d66c <gen_struct_buffer_benchmark@@Base+0x144>
   1d614:	vldr	d6, [r0, #16]
   1d618:	vldr	d7, [pc, #104]	; 1d688 <gen_struct_buffer_benchmark@@Base+0x160>
   1d61c:	vcmp.f64	d6, d7
   1d620:	vmrs	APSR_nzcv, fpscr
   1d624:	bne	1d674 <gen_struct_buffer_benchmark@@Base+0x14c>
   1d628:	ldr	r3, [r0, #24]
   1d62c:	bic	r3, r3, #65280	; 0xff00
   1d630:	ldr	r2, [pc, #120]	; 1d6b0 <gen_struct_buffer_benchmark@@Base+0x188>
   1d634:	cmp	r3, r2
   1d638:	bne	1d67c <gen_struct_buffer_benchmark@@Base+0x154>
   1d63c:	ldrsb	r0, [r0, #28]
   1d640:	adds	r0, r0, #17
   1d644:	movne	r0, #1
   1d648:	rsb	r0, r0, #0
   1d64c:	add	sp, sp, #12
   1d650:	pop	{r4, r5, pc}
   1d654:	mvn	r0, #0
   1d658:	b	1d64c <gen_struct_buffer_benchmark@@Base+0x124>
   1d65c:	mvn	r0, #0
   1d660:	b	1d64c <gen_struct_buffer_benchmark@@Base+0x124>
   1d664:	mvn	r0, #0
   1d668:	b	1d64c <gen_struct_buffer_benchmark@@Base+0x124>
   1d66c:	mvn	r0, #0
   1d670:	b	1d64c <gen_struct_buffer_benchmark@@Base+0x124>
   1d674:	mvn	r0, #0
   1d678:	b	1d64c <gen_struct_buffer_benchmark@@Base+0x124>
   1d67c:	mvn	r0, #0
   1d680:	b	1d64c <gen_struct_buffer_benchmark@@Base+0x124>
   1d684:	nop			; (mov r0, r0)
   1d688:	stclgt	12, cr12, [ip], {205}	; 0xcd
   1d68c:	andsmi	ip, r0, ip, asr #25
   1d690:	svccc	0x00800000
   1d694:	andmi	r0, r0, r0
   1d698:	submi	r0, r0, r0
   1d69c:	submi	r0, r0, r0
   1d6a0:	stclgt	12, cr12, [ip], {205}	; 0xcd
   1d6a4:	andsmi	ip, r0, ip, asr #25
   1d6a8:	andeq	r0, r0, sl, lsr #21
   1d6ac:	andeq	r4, r2, r0, asr r0
   1d6b0:	beq	fea9d6d8 <__bss_end__@@Base+0xfea655f4>

0001d6b4 <time_struct_buffer@@Base>:
   1d6b4:	push	{r4, r5, r6, lr}
   1d6b8:	vpush	{d8-d9}
   1d6bc:	mov	r6, r0
   1d6c0:	ldr	r0, [pc, #116]	; 1d73c <time_struct_buffer@@Base+0x88>
   1d6c4:	bl	129f0 <puts@plt>
   1d6c8:	bl	13ef0 <_start@@Base+0x1458>
   1d6cc:	vmov.f64	d8, d0
   1d6d0:	ldr	r4, [pc, #104]	; 1d740 <time_struct_buffer@@Base+0x8c>
   1d6d4:	mov	r5, #0
   1d6d8:	mov	r0, r6
   1d6dc:	bl	1d528 <gen_struct_buffer_benchmark@@Base>
   1d6e0:	orr	r5, r5, r0
   1d6e4:	subs	r4, r4, #1
   1d6e8:	bne	1d6d8 <time_struct_buffer@@Base+0x24>
   1d6ec:	bl	13ef0 <_start@@Base+0x1458>
   1d6f0:	vmov.f64	d9, d0
   1d6f4:	mov	r0, r6
   1d6f8:	bl	21788 <flatcc_builder_get_buffer_size@@Base>
   1d6fc:	mov	r4, r0
   1d700:	cmp	r5, #0
   1d704:	bne	1d730 <time_struct_buffer@@Base+0x7c>
   1d708:	ldr	r3, [pc, #52]	; 1d744 <time_struct_buffer@@Base+0x90>
   1d70c:	ldr	r2, [pc, #44]	; 1d740 <time_struct_buffer@@Base+0x8c>
   1d710:	mov	r1, r4
   1d714:	vmov.f64	d1, d9
   1d718:	vmov.f64	d0, d8
   1d71c:	ldr	r0, [pc, #36]	; 1d748 <time_struct_buffer@@Base+0x94>
   1d720:	bl	12bd0 <_start@@Base+0x138>
   1d724:	mov	r0, r5
   1d728:	vpop	{d8-d9}
   1d72c:	pop	{r4, r5, r6, pc}
   1d730:	ldr	r0, [pc, #20]	; 1d74c <time_struct_buffer@@Base+0x98>
   1d734:	bl	129f0 <puts@plt>
   1d738:	b	1d708 <time_struct_buffer@@Base+0x54>
   1d73c:	andeq	r6, r2, r4, ror #16
   1d740:	andeq	r4, pc, r0, asr #4
   1d744:	andeq	r6, r2, r8, ror r8
   1d748:	andeq	r6, r2, ip, lsr #17
   1d74c:	muleq	r2, r8, r8

0001d750 <main@@Base>:
   1d750:	push	{r4, lr}
   1d754:	sub	sp, sp, #232	; 0xe8
   1d758:	mov	r0, sp
   1d75c:	bl	1e0a4 <flatcc_builder_init@@Base>
   1d760:	ldr	r0, [pc, #692]	; 1da1c <main@@Base+0x2cc>
   1d764:	bl	129f0 <puts@plt>
   1d768:	mov	r0, sp
   1d76c:	bl	1510c <test_table_with_emptystruct@@Base>
   1d770:	cmp	r0, #0
   1d774:	bne	1d8cc <main@@Base+0x17c>
   1d778:	mov	r0, sp
   1d77c:	bl	14bd8 <test_empty_monster@@Base>
   1d780:	cmp	r0, #0
   1d784:	bne	1d8dc <main@@Base+0x18c>
   1d788:	mov	r0, sp
   1d78c:	bl	16944 <test_monster@@Base>
   1d790:	cmp	r0, #0
   1d794:	bne	1d8ec <main@@Base+0x19c>
   1d798:	mov	r0, sp
   1d79c:	bl	169e8 <test_monster_with_size@@Base>
   1d7a0:	cmp	r0, #0
   1d7a4:	bne	1d8fc <main@@Base+0x1ac>
   1d7a8:	mov	r0, sp
   1d7ac:	bl	16ae0 <test_string@@Base>
   1d7b0:	cmp	r0, #0
   1d7b4:	bne	1d90c <main@@Base+0x1bc>
   1d7b8:	mov	r0, sp
   1d7bc:	bl	1cd40 <test_struct_buffer@@Base>
   1d7c0:	cmp	r0, #0
   1d7c4:	bne	1d91c <main@@Base+0x1cc>
   1d7c8:	mov	r0, sp
   1d7cc:	bl	14d50 <test_typed_empty_monster@@Base>
   1d7d0:	cmp	r0, #0
   1d7d4:	bne	1d92c <main@@Base+0x1dc>
   1d7d8:	mov	r0, sp
   1d7dc:	bl	1521c <test_typed_table_with_emptystruct@@Base>
   1d7e0:	cmp	r0, #0
   1d7e4:	bne	1d93c <main@@Base+0x1ec>
   1d7e8:	mov	r0, sp
   1d7ec:	bl	1cf80 <test_typed_struct_buffer@@Base>
   1d7f0:	cmp	r0, #0
   1d7f4:	bne	1d94c <main@@Base+0x1fc>
   1d7f8:	mov	r0, sp
   1d7fc:	bl	1a0c4 <test_clone_slice@@Base>
   1d800:	cmp	r0, #0
   1d804:	bne	1d95c <main@@Base+0x20c>
   1d808:	mov	r0, sp
   1d80c:	bl	1bf04 <test_add_set_defaults@@Base>
   1d810:	cmp	r0, #0
   1d814:	bne	1d96c <main@@Base+0x21c>
   1d818:	mov	r0, sp
   1d81c:	bl	1abe0 <test_create_add_field@@Base>
   1d820:	cmp	r0, #0
   1d824:	bne	1d97c <main@@Base+0x22c>
   1d828:	mov	r0, sp
   1d82c:	bl	1aeb0 <test_union_vector@@Base>
   1d830:	cmp	r0, #0
   1d834:	bne	1d98c <main@@Base+0x23c>
   1d838:	mov	r0, sp
   1d83c:	bl	19b58 <test_basic_sort@@Base>
   1d840:	cmp	r0, #0
   1d844:	bne	1d99c <main@@Base+0x24c>
   1d848:	mov	r0, sp
   1d84c:	bl	16d3c <test_sort_find@@Base>
   1d850:	cmp	r0, #0
   1d854:	bne	1d9ac <main@@Base+0x25c>
   1d858:	mov	r0, sp
   1d85c:	bl	18488 <test_scan@@Base>
   1d860:	cmp	r0, #0
   1d864:	bne	1d9bc <main@@Base+0x26c>
   1d868:	mov	r0, sp
   1d86c:	bl	1c284 <test_nested_buffer@@Base>
   1d870:	cmp	r0, #0
   1d874:	bne	1d9cc <main@@Base+0x27c>
   1d878:	mov	r0, sp
   1d87c:	bl	1c5d0 <test_nested_buffer_first@@Base>
   1d880:	cmp	r0, #0
   1d884:	bne	1d9dc <main@@Base+0x28c>
   1d888:	mov	r0, sp
   1d88c:	bl	1c91c <test_nested_buffer_using_nest@@Base>
   1d890:	cmp	r0, #0
   1d894:	bne	1d9ec <main@@Base+0x29c>
   1d898:	mov	r0, sp
   1d89c:	bl	1466c <test_type_aliases@@Base>
   1d8a0:	cmp	r0, #0
   1d8a4:	bne	1d9fc <main@@Base+0x2ac>
   1d8a8:	mov	r0, sp
   1d8ac:	bl	1b280 <test_mixed_type_union@@Base>
   1d8b0:	subs	r4, r0, #0
   1d8b4:	bne	1da0c <main@@Base+0x2bc>
   1d8b8:	mov	r0, sp
   1d8bc:	bl	1e24c <flatcc_builder_clear@@Base>
   1d8c0:	mov	r0, r4
   1d8c4:	add	sp, sp, #232	; 0xe8
   1d8c8:	pop	{r4, pc}
   1d8cc:	ldr	r0, [pc, #332]	; 1da20 <main@@Base+0x2d0>
   1d8d0:	bl	129f0 <puts@plt>
   1d8d4:	mvn	r4, #0
   1d8d8:	b	1d8c0 <main@@Base+0x170>
   1d8dc:	ldr	r0, [pc, #316]	; 1da20 <main@@Base+0x2d0>
   1d8e0:	bl	129f0 <puts@plt>
   1d8e4:	mvn	r4, #0
   1d8e8:	b	1d8c0 <main@@Base+0x170>
   1d8ec:	ldr	r0, [pc, #300]	; 1da20 <main@@Base+0x2d0>
   1d8f0:	bl	129f0 <puts@plt>
   1d8f4:	mvn	r4, #0
   1d8f8:	b	1d8c0 <main@@Base+0x170>
   1d8fc:	ldr	r0, [pc, #284]	; 1da20 <main@@Base+0x2d0>
   1d900:	bl	129f0 <puts@plt>
   1d904:	mvn	r4, #0
   1d908:	b	1d8c0 <main@@Base+0x170>
   1d90c:	ldr	r0, [pc, #268]	; 1da20 <main@@Base+0x2d0>
   1d910:	bl	129f0 <puts@plt>
   1d914:	mvn	r4, #0
   1d918:	b	1d8c0 <main@@Base+0x170>
   1d91c:	ldr	r0, [pc, #252]	; 1da20 <main@@Base+0x2d0>
   1d920:	bl	129f0 <puts@plt>
   1d924:	mvn	r4, #0
   1d928:	b	1d8c0 <main@@Base+0x170>
   1d92c:	ldr	r0, [pc, #236]	; 1da20 <main@@Base+0x2d0>
   1d930:	bl	129f0 <puts@plt>
   1d934:	mvn	r4, #0
   1d938:	b	1d8c0 <main@@Base+0x170>
   1d93c:	ldr	r0, [pc, #220]	; 1da20 <main@@Base+0x2d0>
   1d940:	bl	129f0 <puts@plt>
   1d944:	mvn	r4, #0
   1d948:	b	1d8c0 <main@@Base+0x170>
   1d94c:	ldr	r0, [pc, #204]	; 1da20 <main@@Base+0x2d0>
   1d950:	bl	129f0 <puts@plt>
   1d954:	mvn	r4, #0
   1d958:	b	1d8c0 <main@@Base+0x170>
   1d95c:	ldr	r0, [pc, #188]	; 1da20 <main@@Base+0x2d0>
   1d960:	bl	129f0 <puts@plt>
   1d964:	mvn	r4, #0
   1d968:	b	1d8c0 <main@@Base+0x170>
   1d96c:	ldr	r0, [pc, #172]	; 1da20 <main@@Base+0x2d0>
   1d970:	bl	129f0 <puts@plt>
   1d974:	mvn	r4, #0
   1d978:	b	1d8c0 <main@@Base+0x170>
   1d97c:	ldr	r0, [pc, #156]	; 1da20 <main@@Base+0x2d0>
   1d980:	bl	129f0 <puts@plt>
   1d984:	mvn	r4, #0
   1d988:	b	1d8c0 <main@@Base+0x170>
   1d98c:	ldr	r0, [pc, #140]	; 1da20 <main@@Base+0x2d0>
   1d990:	bl	129f0 <puts@plt>
   1d994:	mvn	r4, #0
   1d998:	b	1d8c0 <main@@Base+0x170>
   1d99c:	ldr	r0, [pc, #124]	; 1da20 <main@@Base+0x2d0>
   1d9a0:	bl	129f0 <puts@plt>
   1d9a4:	mvn	r4, #0
   1d9a8:	b	1d8c0 <main@@Base+0x170>
   1d9ac:	ldr	r0, [pc, #108]	; 1da20 <main@@Base+0x2d0>
   1d9b0:	bl	129f0 <puts@plt>
   1d9b4:	mvn	r4, #0
   1d9b8:	b	1d8c0 <main@@Base+0x170>
   1d9bc:	ldr	r0, [pc, #92]	; 1da20 <main@@Base+0x2d0>
   1d9c0:	bl	129f0 <puts@plt>
   1d9c4:	mvn	r4, #0
   1d9c8:	b	1d8c0 <main@@Base+0x170>
   1d9cc:	ldr	r0, [pc, #76]	; 1da20 <main@@Base+0x2d0>
   1d9d0:	bl	129f0 <puts@plt>
   1d9d4:	mvn	r4, #0
   1d9d8:	b	1d8c0 <main@@Base+0x170>
   1d9dc:	ldr	r0, [pc, #60]	; 1da20 <main@@Base+0x2d0>
   1d9e0:	bl	129f0 <puts@plt>
   1d9e4:	mvn	r4, #0
   1d9e8:	b	1d8c0 <main@@Base+0x170>
   1d9ec:	ldr	r0, [pc, #44]	; 1da20 <main@@Base+0x2d0>
   1d9f0:	bl	129f0 <puts@plt>
   1d9f4:	mvn	r4, #0
   1d9f8:	b	1d8c0 <main@@Base+0x170>
   1d9fc:	ldr	r0, [pc, #28]	; 1da20 <main@@Base+0x2d0>
   1da00:	bl	129f0 <puts@plt>
   1da04:	mvn	r4, #0
   1da08:	b	1d8c0 <main@@Base+0x170>
   1da0c:	ldr	r0, [pc, #12]	; 1da20 <main@@Base+0x2d0>
   1da10:	bl	129f0 <puts@plt>
   1da14:	mvn	r4, #0
   1da18:	b	1d8c0 <main@@Base+0x170>
   1da1c:	ldrdeq	r6, [r2], -ip
   1da20:	strdeq	r6, [r2], -r8
   1da24:	push	{r4, r5, r6, lr}
   1da28:	sub	sp, sp, #8
   1da2c:	mov	r4, r0
   1da30:	mov	r5, r2
   1da34:	ldr	r2, [r0, #28]
   1da38:	mov	r3, #1
   1da3c:	str	r3, [sp]
   1da40:	ldr	r6, [r0, #48]	; 0x30
   1da44:	add	r2, r1, r2
   1da48:	add	r1, r0, #60	; 0x3c
   1da4c:	ldr	r0, [r0, #40]	; 0x28
   1da50:	blx	r6
   1da54:	cmp	r0, #0
   1da58:	bne	1da90 <main@@Base+0x340>
   1da5c:	ldr	r1, [r4, #28]
   1da60:	ldr	r2, [r4, #60]	; 0x3c
   1da64:	add	r2, r2, r1
   1da68:	str	r2, [r4, #16]
   1da6c:	ldr	r3, [r4, #64]	; 0x40
   1da70:	sub	r3, r3, r1
   1da74:	cmp	r3, r5
   1da78:	movcs	r3, r5
   1da7c:	str	r3, [r4, #24]
   1da80:	ldr	r3, [r4, #32]
   1da84:	str	r5, [r3, #4]
   1da88:	add	sp, sp, #8
   1da8c:	pop	{r4, r5, r6, pc}
   1da90:	mvn	r0, #0
   1da94:	b	1da88 <main@@Base+0x338>

0001da98 <flatcc_builder_default_alloc@@Base>:
   1da98:	push	{r4, r5, r6, r7, r8, lr}
   1da9c:	mov	r5, r1
   1daa0:	cmp	r2, #0
   1daa4:	bne	1dac8 <flatcc_builder_default_alloc@@Base+0x30>
   1daa8:	ldr	r0, [r1]
   1daac:	cmp	r0, #0
   1dab0:	beq	1db94 <flatcc_builder_default_alloc@@Base+0xfc>
   1dab4:	bl	129a8 <free@plt>
   1dab8:	mov	r0, #0
   1dabc:	str	r0, [r5]
   1dac0:	str	r0, [r5, #4]
   1dac4:	pop	{r4, r5, r6, r7, r8, pc}
   1dac8:	mov	r6, r3
   1dacc:	ldr	r3, [sp, #24]
   1dad0:	sub	r3, r3, #1
   1dad4:	cmp	r3, #6
   1dad8:	ldrls	pc, [pc, r3, lsl #2]
   1dadc:	b	1db70 <flatcc_builder_default_alloc@@Base+0xd8>
   1dae0:	andeq	sp, r1, r4, lsl #22
   1dae4:	andeq	sp, r1, r0, ror fp
   1dae8:	andeq	sp, r1, r0, ror fp
   1daec:	strdeq	sp, [r1], -ip
   1daf0:	andeq	sp, r1, r8, ror fp
   1daf4:	andeq	sp, r1, r0, ror fp
   1daf8:	andeq	sp, r1, r8, ror #22
   1dafc:	mov	r4, #288	; 0x120
   1db00:	b	1db08 <flatcc_builder_default_alloc@@Base+0x70>
   1db04:	mov	r4, #256	; 0x100
   1db08:	cmp	r4, r2
   1db0c:	bcs	1db1c <flatcc_builder_default_alloc@@Base+0x84>
   1db10:	lsl	r4, r4, #1
   1db14:	cmp	r2, r4
   1db18:	bhi	1db10 <flatcc_builder_default_alloc@@Base+0x78>
   1db1c:	ldr	r3, [r5, #4]
   1db20:	cmp	r2, r3
   1db24:	bhi	1db30 <flatcc_builder_default_alloc@@Base+0x98>
   1db28:	cmp	r4, r3, lsr #1
   1db2c:	bls	1db9c <flatcc_builder_default_alloc@@Base+0x104>
   1db30:	mov	r1, r4
   1db34:	ldr	r0, [r5]
   1db38:	bl	129cc <realloc@plt>
   1db3c:	subs	r7, r0, #0
   1db40:	beq	1dba4 <flatcc_builder_default_alloc@@Base+0x10c>
   1db44:	cmp	r6, #0
   1db48:	beq	1db58 <flatcc_builder_default_alloc@@Base+0xc0>
   1db4c:	ldr	r0, [r5, #4]
   1db50:	cmp	r0, r4
   1db54:	bcc	1db80 <flatcc_builder_default_alloc@@Base+0xe8>
   1db58:	str	r7, [r5]
   1db5c:	str	r4, [r5, #4]
   1db60:	mov	r0, #0
   1db64:	pop	{r4, r5, r6, r7, r8, pc}
   1db68:	mov	r4, #64	; 0x40
   1db6c:	b	1db08 <flatcc_builder_default_alloc@@Base+0x70>
   1db70:	mov	r4, #32
   1db74:	b	1db08 <flatcc_builder_default_alloc@@Base+0x70>
   1db78:	mov	r4, r2
   1db7c:	b	1db1c <flatcc_builder_default_alloc@@Base+0x84>
   1db80:	sub	r2, r4, r0
   1db84:	mov	r1, #0
   1db88:	add	r0, r7, r0
   1db8c:	bl	12a44 <memset@plt>
   1db90:	b	1db58 <flatcc_builder_default_alloc@@Base+0xc0>
   1db94:	mov	r0, #0
   1db98:	pop	{r4, r5, r6, r7, r8, pc}
   1db9c:	mov	r0, #0
   1dba0:	pop	{r4, r5, r6, r7, r8, pc}
   1dba4:	mvn	r0, #0
   1dba8:	pop	{r4, r5, r6, r7, r8, pc}
   1dbac:	cmp	r2, #0
   1dbb0:	bne	1dbc0 <flatcc_builder_default_alloc@@Base+0x128>
   1dbb4:	ldrh	r2, [r0, #132]	; 0x84
   1dbb8:	cmp	r2, #0
   1dbbc:	moveq	r2, #1
   1dbc0:	ldrh	ip, [r1]
   1dbc4:	cmp	ip, #3
   1dbc8:	movls	ip, #4
   1dbcc:	strhls	ip, [r1]
   1dbd0:	ldrh	ip, [r1]
   1dbd4:	cmp	ip, r2
   1dbd8:	strhcc	r2, [r1]
   1dbdc:	cmp	r3, #0
   1dbe0:	bne	1dc9c <flatcc_builder_default_alloc@@Base+0x204>
   1dbe4:	push	{r4, r5, lr}
   1dbe8:	sub	sp, sp, #84	; 0x54
   1dbec:	ldr	r4, [r0, #140]	; 0x8c
   1dbf0:	sub	r2, r2, #1
   1dbf4:	ands	r2, r2, r4
   1dbf8:	bne	1dc08 <flatcc_builder_default_alloc@@Base+0x170>
   1dbfc:	mov	r0, #0
   1dc00:	add	sp, sp, #84	; 0x54
   1dc04:	pop	{r4, r5, pc}
   1dc08:	str	r2, [sp, #8]
   1dc0c:	ldr	r3, [pc, #144]	; 1dca4 <flatcc_builder_default_alloc@@Base+0x20c>
   1dc10:	str	r3, [sp, #16]
   1dc14:	str	r2, [sp, #20]
   1dc18:	mov	r3, #1
   1dc1c:	str	r3, [sp, #12]
   1dc20:	add	r3, r4, r2
   1dc24:	str	r3, [r0, #140]	; 0x8c
   1dc28:	cmp	r4, r3
   1dc2c:	bgt	1dc74 <flatcc_builder_default_alloc@@Base+0x1dc>
   1dc30:	ldr	ip, [r0, #36]	; 0x24
   1dc34:	str	r2, [sp]
   1dc38:	ldr	r5, [r0, #44]	; 0x2c
   1dc3c:	mov	r3, r4
   1dc40:	mov	r2, #1
   1dc44:	add	r1, sp, #16
   1dc48:	mov	r0, ip
   1dc4c:	blx	r5
   1dc50:	cmp	r0, #0
   1dc54:	bne	1dc88 <flatcc_builder_default_alloc@@Base+0x1f0>
   1dc58:	cmn	r4, #1
   1dc5c:	bne	1dbfc <flatcc_builder_default_alloc@@Base+0x164>
   1dc60:	ldr	r3, [pc, #64]	; 1dca8 <flatcc_builder_default_alloc@@Base+0x210>
   1dc64:	ldr	r2, [pc, #64]	; 1dcac <flatcc_builder_default_alloc@@Base+0x214>
   1dc68:	ldr	r1, [pc, #64]	; 1dcb0 <flatcc_builder_default_alloc@@Base+0x218>
   1dc6c:	ldr	r0, [pc, #64]	; 1dcb4 <flatcc_builder_default_alloc@@Base+0x21c>
   1dc70:	bl	12a8c <__assert_fail@plt>
   1dc74:	ldr	r3, [pc, #60]	; 1dcb8 <flatcc_builder_default_alloc@@Base+0x220>
   1dc78:	ldr	r2, [pc, #60]	; 1dcbc <flatcc_builder_default_alloc@@Base+0x224>
   1dc7c:	ldr	r1, [pc, #44]	; 1dcb0 <flatcc_builder_default_alloc@@Base+0x218>
   1dc80:	ldr	r0, [pc, #44]	; 1dcb4 <flatcc_builder_default_alloc@@Base+0x21c>
   1dc84:	bl	12a8c <__assert_fail@plt>
   1dc88:	ldr	r3, [pc, #40]	; 1dcb8 <flatcc_builder_default_alloc@@Base+0x220>
   1dc8c:	ldr	r2, [pc, #44]	; 1dcc0 <flatcc_builder_default_alloc@@Base+0x228>
   1dc90:	ldr	r1, [pc, #24]	; 1dcb0 <flatcc_builder_default_alloc@@Base+0x218>
   1dc94:	ldr	r0, [pc, #24]	; 1dcb4 <flatcc_builder_default_alloc@@Base+0x21c>
   1dc98:	bl	12a8c <__assert_fail@plt>
   1dc9c:	mov	r0, #0
   1dca0:	bx	lr
   1dca4:	andeq	r6, r2, r4, lsl #18
   1dca8:	andeq	r6, r2, r0, lsl fp
   1dcac:			; <UNDEFINED> instruction: 0x000002be
   1dcb0:	andeq	r7, r2, r4, asr r0
   1dcb4:	andeq	r7, r2, r8, lsr #1
   1dcb8:	andeq	r6, r2, r4, lsl #22
   1dcbc:	andeq	r0, r0, r1, lsr #5
   1dcc0:	andeq	r0, r0, r5, lsr #5
   1dcc4:	push	{r4, r5, r6, r7, lr}
   1dcc8:	sub	sp, sp, #12
   1dccc:	mov	r4, r0
   1dcd0:	mov	r6, r1
   1dcd4:	ldr	r3, [r0, #156]	; 0x9c
   1dcd8:	add	r2, r3, #1
   1dcdc:	str	r2, [r0, #156]	; 0x9c
   1dce0:	ldr	r1, [r0, #160]	; 0xa0
   1dce4:	cmp	r2, r1
   1dce8:	ble	1dd88 <flatcc_builder_default_alloc@@Base+0x2f0>
   1dcec:	ldr	r1, [r0, #176]	; 0xb0
   1dcf0:	cmp	r2, r1
   1dcf4:	cmpgt	r1, #0
   1dcf8:	bgt	1ddf0 <flatcc_builder_default_alloc@@Base+0x358>
   1dcfc:	add	r3, r3, r3, lsl #3
   1dd00:	lsl	r5, r3, #2
   1dd04:	add	r2, r5, #36	; 0x24
   1dd08:	ldr	r3, [r0, #88]	; 0x58
   1dd0c:	cmp	r2, r3
   1dd10:	bhi	1dd50 <flatcc_builder_default_alloc@@Base+0x2b8>
   1dd14:	ldr	r3, [r4, #84]	; 0x54
   1dd18:	add	r5, r3, r5
   1dd1c:	str	r5, [r4, #32]
   1dd20:	cmp	r5, #0
   1dd24:	beq	1ddf8 <flatcc_builder_default_alloc@@Base+0x360>
   1dd28:	ldr	r3, [r4, #88]	; 0x58
   1dd2c:	ldr	r2, [pc, #204]	; 1de00 <flatcc_builder_default_alloc@@Base+0x368>
   1dd30:	umull	r2, r3, r2, r3
   1dd34:	lsr	r3, r3, #3
   1dd38:	str	r3, [r4, #160]	; 0xa0
   1dd3c:	ldr	r2, [r4, #176]	; 0xb0
   1dd40:	cmp	r2, #0
   1dd44:	cmpgt	r3, r2
   1dd48:	strgt	r2, [r4, #160]	; 0xa0
   1dd4c:	b	1dd94 <flatcc_builder_default_alloc@@Base+0x2fc>
   1dd50:	mov	r3, #4
   1dd54:	str	r3, [sp]
   1dd58:	ldr	r7, [r0, #48]	; 0x30
   1dd5c:	mov	r3, #0
   1dd60:	add	r1, r0, #84	; 0x54
   1dd64:	ldr	r0, [r0, #40]	; 0x28
   1dd68:	blx	r7
   1dd6c:	cmp	r0, #0
   1dd70:	beq	1dd14 <flatcc_builder_default_alloc@@Base+0x27c>
   1dd74:	ldr	r3, [pc, #136]	; 1de04 <flatcc_builder_default_alloc@@Base+0x36c>
   1dd78:	mov	r2, #308	; 0x134
   1dd7c:	ldr	r1, [pc, #132]	; 1de08 <flatcc_builder_default_alloc@@Base+0x370>
   1dd80:	ldr	r0, [pc, #132]	; 1de0c <flatcc_builder_default_alloc@@Base+0x374>
   1dd84:	bl	12a8c <__assert_fail@plt>
   1dd88:	ldr	r3, [r0, #32]
   1dd8c:	add	r3, r3, #36	; 0x24
   1dd90:	str	r3, [r0, #32]
   1dd94:	ldr	r3, [r4, #32]
   1dd98:	ldr	r2, [r4, #20]
   1dd9c:	str	r2, [r3, #8]
   1dda0:	ldr	r3, [r4, #32]
   1dda4:	ldrh	r2, [r4, #130]	; 0x82
   1dda8:	strh	r2, [r3, #12]
   1ddac:	strh	r6, [r4, #130]	; 0x82
   1ddb0:	ldr	r3, [r4, #32]
   1ddb4:	ldr	r2, [r4, #28]
   1ddb8:	str	r2, [r3]
   1ddbc:	ldr	r3, [r4, #32]
   1ddc0:	mvn	r2, #3
   1ddc4:	str	r2, [r3, #4]
   1ddc8:	ldr	r3, [r4, #28]
   1ddcc:	ldr	r2, [r4, #20]
   1ddd0:	add	r3, r3, r2
   1ddd4:	add	r3, r3, #7
   1ddd8:	bic	r3, r3, #7
   1dddc:	str	r3, [r4, #28]
   1dde0:	mov	r0, #0
   1dde4:	str	r0, [r4, #20]
   1dde8:	add	sp, sp, #12
   1ddec:	pop	{r4, r5, r6, r7, pc}
   1ddf0:	mvn	r0, #0
   1ddf4:	b	1dde8 <flatcc_builder_default_alloc@@Base+0x350>
   1ddf8:	mvn	r0, #0
   1ddfc:	b	1dde8 <flatcc_builder_default_alloc@@Base+0x350>
   1de00:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^
   1de04:	andeq	r6, r2, r0, lsr #22
   1de08:	andeq	r7, r2, r4, asr r0
   1de0c:	andeq	r7, r2, r8, lsr #1
   1de10:	push	{r4, r5, r6, r7, r8, lr}
   1de14:	sub	sp, sp, #88	; 0x58
   1de18:	cmn	r2, #-1073741823	; 0xc0000001
   1de1c:	bhi	1dfd0 <flatcc_builder_default_alloc@@Base+0x538>
   1de20:	ldrh	ip, [r0, #128]	; 0x80
   1de24:	cmp	ip, #3
   1de28:	movls	ip, #4
   1de2c:	strhls	ip, [r0, #128]	; 0x80
   1de30:	str	r2, [sp, #84]	; 0x54
   1de34:	ldr	r7, [r0, #136]	; 0x88
   1de38:	and	lr, r7, #3
   1de3c:	mov	ip, #4
   1de40:	str	ip, [sp, #12]
   1de44:	add	r4, sp, #84	; 0x54
   1de48:	str	r4, [sp, #20]
   1de4c:	str	ip, [sp, #24]
   1de50:	mov	ip, #1
   1de54:	str	ip, [sp, #16]
   1de58:	lsls	r5, r2, #2
   1de5c:	beq	1de78 <flatcc_builder_default_alloc@@Base+0x3e0>
   1de60:	add	ip, r5, #4
   1de64:	str	ip, [sp, #12]
   1de68:	str	r1, [sp, #28]
   1de6c:	str	r5, [sp, #32]
   1de70:	mov	ip, #2
   1de74:	str	ip, [sp, #16]
   1de78:	cmp	lr, #0
   1de7c:	beq	1deac <flatcc_builder_default_alloc@@Base+0x414>
   1de80:	ldr	ip, [sp, #12]
   1de84:	add	ip, ip, lr
   1de88:	str	ip, [sp, #12]
   1de8c:	ldr	ip, [sp, #16]
   1de90:	add	ip, ip, #1
   1de94:	add	r4, sp, #88	; 0x58
   1de98:	add	r4, r4, ip, lsl #3
   1de9c:	ldr	r6, [pc, #308]	; 1dfd8 <flatcc_builder_default_alloc@@Base+0x540>
   1dea0:	str	r6, [r4, #-76]	; 0xffffffb4
   1dea4:	str	lr, [r4, #-72]	; 0xffffffb8
   1dea8:	str	ip, [sp, #16]
   1deac:	mov	r6, r0
   1deb0:	ldr	r8, [sp, #12]
   1deb4:	sub	r7, r7, r8
   1deb8:	cmp	r2, #0
   1debc:	beq	1df64 <flatcc_builder_default_alloc@@Base+0x4cc>
   1dec0:	mov	r2, r1
   1dec4:	mov	ip, r3
   1dec8:	add	r5, r1, r5
   1decc:	mvn	r1, #3
   1ded0:	b	1defc <flatcc_builder_default_alloc@@Base+0x464>
   1ded4:	cmp	r3, #0
   1ded8:	beq	1df50 <flatcc_builder_default_alloc@@Base+0x4b8>
   1dedc:	ldrb	r0, [ip]
   1dee0:	cmp	r0, #0
   1dee4:	bne	1df3c <flatcc_builder_default_alloc@@Base+0x4a4>
   1dee8:	add	r2, r2, #4
   1deec:	add	ip, ip, #1
   1def0:	sub	r1, r1, #4
   1def4:	cmp	r2, r5
   1def8:	beq	1df64 <flatcc_builder_default_alloc@@Base+0x4cc>
   1defc:	ldr	lr, [r2]
   1df00:	cmp	lr, #0
   1df04:	beq	1ded4 <flatcc_builder_default_alloc@@Base+0x43c>
   1df08:	sub	r4, r1, r7
   1df0c:	add	lr, r4, lr
   1df10:	str	lr, [r2]
   1df14:	cmp	r3, #0
   1df18:	beq	1dee8 <flatcc_builder_default_alloc@@Base+0x450>
   1df1c:	ldrb	r0, [ip]
   1df20:	cmp	r0, #0
   1df24:	bne	1dee8 <flatcc_builder_default_alloc@@Base+0x450>
   1df28:	ldr	r3, [pc, #172]	; 1dfdc <flatcc_builder_default_alloc@@Base+0x544>
   1df2c:	ldr	r2, [pc, #172]	; 1dfe0 <flatcc_builder_default_alloc@@Base+0x548>
   1df30:	ldr	r1, [pc, #172]	; 1dfe4 <flatcc_builder_default_alloc@@Base+0x54c>
   1df34:	ldr	r0, [pc, #172]	; 1dfe8 <flatcc_builder_default_alloc@@Base+0x550>
   1df38:	bl	12a8c <__assert_fail@plt>
   1df3c:	ldr	r3, [pc, #152]	; 1dfdc <flatcc_builder_default_alloc@@Base+0x544>
   1df40:	ldr	r2, [pc, #164]	; 1dfec <flatcc_builder_default_alloc@@Base+0x554>
   1df44:	ldr	r1, [pc, #152]	; 1dfe4 <flatcc_builder_default_alloc@@Base+0x54c>
   1df48:	ldr	r0, [pc, #160]	; 1dff0 <flatcc_builder_default_alloc@@Base+0x558>
   1df4c:	bl	12a8c <__assert_fail@plt>
   1df50:	ldr	r3, [pc, #132]	; 1dfdc <flatcc_builder_default_alloc@@Base+0x544>
   1df54:	ldr	r2, [pc, #152]	; 1dff4 <flatcc_builder_default_alloc@@Base+0x55c>
   1df58:	ldr	r1, [pc, #132]	; 1dfe4 <flatcc_builder_default_alloc@@Base+0x54c>
   1df5c:	ldr	r0, [pc, #148]	; 1dff8 <flatcc_builder_default_alloc@@Base+0x560>
   1df60:	bl	12a8c <__assert_fail@plt>
   1df64:	ldr	r3, [r6, #136]	; 0x88
   1df68:	sub	r4, r3, r8
   1df6c:	cmp	r3, r4
   1df70:	ble	1dfa8 <flatcc_builder_default_alloc@@Base+0x510>
   1df74:	str	r8, [sp]
   1df78:	ldr	r5, [r6, #44]	; 0x2c
   1df7c:	mov	r3, r4
   1df80:	ldr	r2, [sp, #16]
   1df84:	add	r1, sp, #20
   1df88:	ldr	r0, [r6, #36]	; 0x24
   1df8c:	blx	r5
   1df90:	cmp	r0, #0
   1df94:	streq	r4, [r6, #136]	; 0x88
   1df98:	bne	1dfbc <flatcc_builder_default_alloc@@Base+0x524>
   1df9c:	mov	r0, r4
   1dfa0:	add	sp, sp, #88	; 0x58
   1dfa4:	pop	{r4, r5, r6, r7, r8, pc}
   1dfa8:	ldr	r3, [pc, #76]	; 1dffc <flatcc_builder_default_alloc@@Base+0x564>
   1dfac:	ldr	r2, [pc, #76]	; 1e000 <flatcc_builder_default_alloc@@Base+0x568>
   1dfb0:	ldr	r1, [pc, #44]	; 1dfe4 <flatcc_builder_default_alloc@@Base+0x54c>
   1dfb4:	ldr	r0, [pc, #60]	; 1dff8 <flatcc_builder_default_alloc@@Base+0x560>
   1dfb8:	bl	12a8c <__assert_fail@plt>
   1dfbc:	ldr	r3, [pc, #56]	; 1dffc <flatcc_builder_default_alloc@@Base+0x564>
   1dfc0:	ldr	r2, [pc, #60]	; 1e004 <flatcc_builder_default_alloc@@Base+0x56c>
   1dfc4:	ldr	r1, [pc, #24]	; 1dfe4 <flatcc_builder_default_alloc@@Base+0x54c>
   1dfc8:	ldr	r0, [pc, #40]	; 1dff8 <flatcc_builder_default_alloc@@Base+0x560>
   1dfcc:	bl	12a8c <__assert_fail@plt>
   1dfd0:	mov	r4, #0
   1dfd4:	b	1df9c <flatcc_builder_default_alloc@@Base+0x504>
   1dfd8:	andeq	r6, r2, r4, lsl #18
   1dfdc:	andeq	r6, r2, r0, lsr fp
   1dfe0:			; <UNDEFINED> instruction: 0x000005b1
   1dfe4:	andeq	r7, r2, r4, asr r0
   1dfe8:	muleq	r2, ip, r0
   1dfec:			; <UNDEFINED> instruction: 0x000005b5
   1dff0:	andeq	r7, r2, ip, lsr #1
   1dff4:			; <UNDEFINED> instruction: 0x000005b7
   1dff8:	andeq	r7, r2, r8, lsr #1
   1dffc:	andeq	r6, r2, r0, asr fp
   1e000:	andeq	r0, r0, r7, lsl #5
   1e004:	andeq	r0, r0, fp, lsl #5

0001e008 <flatcc_builder_flush_vtable_cache@@Base>:
   1e008:	ldr	r3, [r0, #116]	; 0x74
   1e00c:	cmp	r3, #0
   1e010:	bxeq	lr
   1e014:	push	{r4, lr}
   1e018:	mov	r4, r0
   1e01c:	ldr	r2, [r0, #96]	; 0x60
   1e020:	mov	r1, #0
   1e024:	ldr	r0, [r0, #92]	; 0x5c
   1e028:	bl	12a44 <memset@plt>
   1e02c:	mov	r3, #16
   1e030:	str	r3, [r4, #124]	; 0x7c
   1e034:	mov	r3, #0
   1e038:	str	r3, [r4, #120]	; 0x78
   1e03c:	pop	{r4, pc}

0001e040 <flatcc_builder_custom_init@@Base>:
   1e040:	push	{r4, r5, r6, r7, r8, lr}
   1e044:	mov	r4, r0
   1e048:	mov	r6, r1
   1e04c:	mov	r7, r2
   1e050:	mov	r5, r3
   1e054:	mov	r2, #232	; 0xe8
   1e058:	mov	r1, #0
   1e05c:	bl	12a44 <memset@plt>
   1e060:	cmp	r6, #0
   1e064:	moveq	r3, #1
   1e068:	streq	r3, [r4, #184]	; 0xb8
   1e06c:	addeq	r7, r4, #188	; 0xbc
   1e070:	ldreq	r6, [pc, #36]	; 1e09c <flatcc_builder_custom_init@@Base+0x5c>
   1e074:	ldr	r3, [pc, #36]	; 1e0a0 <flatcc_builder_custom_init@@Base+0x60>
   1e078:	cmp	r5, #0
   1e07c:	moveq	r5, r3
   1e080:	ldr	r3, [sp, #24]
   1e084:	str	r3, [r4, #40]	; 0x28
   1e088:	str	r5, [r4, #48]	; 0x30
   1e08c:	str	r7, [r4, #36]	; 0x24
   1e090:	str	r6, [r4, #44]	; 0x2c
   1e094:	mov	r0, #0
   1e098:	pop	{r4, r5, r6, r7, r8, pc}
   1e09c:	andeq	r1, r2, r8, lsl ip
   1e0a0:	muleq	r1, r8, sl

0001e0a4 <flatcc_builder_init@@Base>:
   1e0a4:	push	{r4, lr}
   1e0a8:	mov	r4, r0
   1e0ac:	mov	r2, #232	; 0xe8
   1e0b0:	mov	r1, #0
   1e0b4:	bl	12a44 <memset@plt>
   1e0b8:	mov	r3, #1
   1e0bc:	str	r3, [r4, #184]	; 0xb8
   1e0c0:	ldr	r3, [pc, #24]	; 1e0e0 <flatcc_builder_init@@Base+0x3c>
   1e0c4:	str	r3, [r4, #48]	; 0x30
   1e0c8:	add	r3, r4, #188	; 0xbc
   1e0cc:	str	r3, [r4, #36]	; 0x24
   1e0d0:	ldr	r3, [pc, #12]	; 1e0e4 <flatcc_builder_init@@Base+0x40>
   1e0d4:	str	r3, [r4, #44]	; 0x2c
   1e0d8:	mov	r0, #0
   1e0dc:	pop	{r4, pc}
   1e0e0:	muleq	r1, r8, sl
   1e0e4:	andeq	r1, r2, r8, lsl ip

0001e0e8 <flatcc_builder_custom_reset@@Base>:
   1e0e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e0ec:	sub	sp, sp, #12
   1e0f0:	mov	r6, r0
   1e0f4:	mov	fp, r1
   1e0f8:	mov	r8, r2
   1e0fc:	mov	r4, r0
   1e100:	mov	r5, #0
   1e104:	mov	r9, r5
   1e108:	mov	sl, #1
   1e10c:	b	1e130 <flatcc_builder_custom_reset@@Base+0x48>
   1e110:	ldr	r2, [r7, #56]	; 0x38
   1e114:	mov	r1, r9
   1e118:	ldr	r0, [r7, #52]	; 0x34
   1e11c:	bl	12a44 <memset@plt>
   1e120:	add	r5, r5, #1
   1e124:	add	r4, r4, #8
   1e128:	cmp	r5, #8
   1e12c:	beq	1e198 <flatcc_builder_custom_reset@@Base+0xb0>
   1e130:	add	r1, r4, #52	; 0x34
   1e134:	mov	r7, r4
   1e138:	ldr	r3, [r4, #52]	; 0x34
   1e13c:	cmp	r3, #0
   1e140:	beq	1e178 <flatcc_builder_custom_reset@@Base+0x90>
   1e144:	cmp	r5, #5
   1e148:	cmpne	r8, #0
   1e14c:	beq	1e110 <flatcc_builder_custom_reset@@Base+0x28>
   1e150:	str	r5, [sp]
   1e154:	mov	r3, sl
   1e158:	mov	r2, sl
   1e15c:	ldr	r0, [r6, #40]	; 0x28
   1e160:	ldr	ip, [r6, #48]	; 0x30
   1e164:	blx	ip
   1e168:	cmp	r0, #0
   1e16c:	beq	1e110 <flatcc_builder_custom_reset@@Base+0x28>
   1e170:	mvn	r0, #0
   1e174:	b	1e210 <flatcc_builder_custom_reset@@Base+0x128>
   1e178:	ldr	r3, [r4, #56]	; 0x38
   1e17c:	cmp	r3, #0
   1e180:	beq	1e120 <flatcc_builder_custom_reset@@Base+0x38>
   1e184:	ldr	r3, [pc, #156]	; 1e228 <flatcc_builder_custom_reset@@Base+0x140>
   1e188:	ldr	r2, [pc, #156]	; 1e22c <flatcc_builder_custom_reset@@Base+0x144>
   1e18c:	ldr	r1, [pc, #156]	; 1e230 <flatcc_builder_custom_reset@@Base+0x148>
   1e190:	ldr	r0, [pc, #156]	; 1e234 <flatcc_builder_custom_reset@@Base+0x14c>
   1e194:	bl	12a8c <__assert_fail@plt>
   1e198:	mov	r3, #0
   1e19c:	str	r3, [r6, #120]	; 0x78
   1e1a0:	ldr	r3, [r6, #124]	; 0x7c
   1e1a4:	cmp	r3, #0
   1e1a8:	movne	r3, #16
   1e1ac:	strne	r3, [r6, #124]	; 0x7c
   1e1b0:	mov	r3, #0
   1e1b4:	strh	r3, [r6, #128]	; 0x80
   1e1b8:	str	r3, [r6, #136]	; 0x88
   1e1bc:	str	r3, [r6, #140]	; 0x8c
   1e1c0:	str	r3, [r6, #156]	; 0x9c
   1e1c4:	str	r3, [r6, #160]	; 0xa0
   1e1c8:	str	r3, [r6, #20]
   1e1cc:	str	r3, [r6, #24]
   1e1d0:	str	r3, [r6, #148]	; 0x94
   1e1d4:	str	r3, [r6, #152]	; 0x98
   1e1d8:	ldr	r2, [r6, #60]	; 0x3c
   1e1dc:	str	r2, [r6, #16]
   1e1e0:	ldr	r2, [r6, #76]	; 0x4c
   1e1e4:	str	r2, [r6]
   1e1e8:	ldr	r2, [r6, #52]	; 0x34
   1e1ec:	str	r2, [r6, #4]
   1e1f0:	str	r3, [r6, #32]
   1e1f4:	cmp	fp, r3
   1e1f8:	strne	r3, [r6, #172]	; 0xac
   1e1fc:	strne	r3, [r6, #176]	; 0xb0
   1e200:	strne	r3, [r6, #180]	; 0xb4
   1e204:	ldr	r0, [r6, #184]	; 0xb8
   1e208:	cmp	r0, #0
   1e20c:	bne	1e218 <flatcc_builder_custom_reset@@Base+0x130>
   1e210:	add	sp, sp, #12
   1e214:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e218:	add	r0, r6, #188	; 0xbc
   1e21c:	bl	21ae0 <flatcc_emitter_reset@@Base>
   1e220:	mov	r0, #0
   1e224:	b	1e210 <flatcc_builder_custom_reset@@Base+0x128>
   1e228:	andeq	r6, r2, ip, asr fp
   1e22c:			; <UNDEFINED> instruction: 0x000001b2
   1e230:	andeq	r7, r2, r4, asr r0
   1e234:	strheq	r7, [r2], -ip

0001e238 <flatcc_builder_reset@@Base>:
   1e238:	push	{r4, lr}
   1e23c:	mov	r2, #0
   1e240:	mov	r1, r2
   1e244:	bl	1e0e8 <flatcc_builder_custom_reset@@Base>
   1e248:	pop	{r4, pc}

0001e24c <flatcc_builder_clear@@Base>:
   1e24c:	push	{r4, r5, r6, r7, r8, lr}
   1e250:	sub	sp, sp, #8
   1e254:	mov	r6, r0
   1e258:	add	r5, r0, #52	; 0x34
   1e25c:	mov	r4, #0
   1e260:	mov	r8, r4
   1e264:	str	r4, [sp]
   1e268:	ldr	r7, [r6, #48]	; 0x30
   1e26c:	mov	r3, r8
   1e270:	mov	r2, r8
   1e274:	mov	r1, r5
   1e278:	ldr	r0, [r6, #40]	; 0x28
   1e27c:	blx	r7
   1e280:	add	r4, r4, #1
   1e284:	add	r5, r5, #8
   1e288:	cmp	r4, #8
   1e28c:	bne	1e264 <flatcc_builder_clear@@Base+0x18>
   1e290:	ldr	r3, [r6, #184]	; 0xb8
   1e294:	cmp	r3, #0
   1e298:	bne	1e2b4 <flatcc_builder_clear@@Base+0x68>
   1e29c:	mov	r2, #232	; 0xe8
   1e2a0:	mov	r1, #0
   1e2a4:	mov	r0, r6
   1e2a8:	bl	12a44 <memset@plt>
   1e2ac:	add	sp, sp, #8
   1e2b0:	pop	{r4, r5, r6, r7, r8, pc}
   1e2b4:	add	r0, r6, #188	; 0xbc
   1e2b8:	bl	21bb0 <flatcc_emitter_clear@@Base>
   1e2bc:	b	1e29c <flatcc_builder_clear@@Base+0x50>

0001e2c0 <flatcc_builder_enter_user_frame_ptr@@Base>:
   1e2c0:	push	{r4, r5, r6, r7, r8, lr}
   1e2c4:	sub	sp, sp, #8
   1e2c8:	mov	r7, r0
   1e2cc:	add	r4, r1, #3
   1e2d0:	bic	r4, r4, #3
   1e2d4:	add	r4, r4, #4
   1e2d8:	ldr	r5, [r0, #228]	; 0xe4
   1e2dc:	add	r2, r4, r5
   1e2e0:	ldr	r3, [r0, #112]	; 0x70
   1e2e4:	cmp	r2, r3
   1e2e8:	bhi	1e330 <flatcc_builder_enter_user_frame_ptr@@Base+0x70>
   1e2ec:	ldr	r8, [r7, #108]	; 0x6c
   1e2f0:	adds	r6, r8, r5
   1e2f4:	beq	1e368 <flatcc_builder_enter_user_frame_ptr@@Base+0xa8>
   1e2f8:	mov	r2, r4
   1e2fc:	mov	r1, #0
   1e300:	mov	r0, r6
   1e304:	bl	12a44 <memset@plt>
   1e308:	ldr	r3, [r7, #224]	; 0xe0
   1e30c:	str	r3, [r8, r5]
   1e310:	ldr	r1, [r7, #228]	; 0xe4
   1e314:	add	r3, r1, #4
   1e318:	str	r3, [r7, #224]	; 0xe0
   1e31c:	add	r4, r4, r1
   1e320:	str	r4, [r7, #228]	; 0xe4
   1e324:	add	r0, r6, #4
   1e328:	add	sp, sp, #8
   1e32c:	pop	{r4, r5, r6, r7, r8, pc}
   1e330:	mov	r3, #7
   1e334:	str	r3, [sp]
   1e338:	ldr	r6, [r0, #48]	; 0x30
   1e33c:	mov	r3, #0
   1e340:	add	r1, r0, #108	; 0x6c
   1e344:	ldr	r0, [r0, #40]	; 0x28
   1e348:	blx	r6
   1e34c:	cmp	r0, #0
   1e350:	beq	1e2ec <flatcc_builder_enter_user_frame_ptr@@Base+0x2c>
   1e354:	ldr	r3, [pc, #20]	; 1e370 <flatcc_builder_enter_user_frame_ptr@@Base+0xb0>
   1e358:	mov	r2, #308	; 0x134
   1e35c:	ldr	r1, [pc, #16]	; 1e374 <flatcc_builder_enter_user_frame_ptr@@Base+0xb4>
   1e360:	ldr	r0, [pc, #16]	; 1e378 <flatcc_builder_enter_user_frame_ptr@@Base+0xb8>
   1e364:	bl	12a8c <__assert_fail@plt>
   1e368:	mov	r0, #0
   1e36c:	b	1e328 <flatcc_builder_enter_user_frame_ptr@@Base+0x68>
   1e370:	andeq	r6, r2, r0, lsr #22
   1e374:	andeq	r7, r2, r4, asr r0
   1e378:	andeq	r7, r2, r8, lsr #1

0001e37c <flatcc_builder_enter_user_frame@@Base>:
   1e37c:	push	{r4, r5, r6, r7, lr}
   1e380:	sub	sp, sp, #12
   1e384:	mov	r6, r0
   1e388:	add	r4, r1, #3
   1e38c:	bic	r4, r4, #3
   1e390:	add	r4, r4, #4
   1e394:	ldr	r5, [r0, #228]	; 0xe4
   1e398:	add	r2, r4, r5
   1e39c:	ldr	r3, [r0, #112]	; 0x70
   1e3a0:	cmp	r2, r3
   1e3a4:	bhi	1e3e8 <flatcc_builder_enter_user_frame@@Base+0x6c>
   1e3a8:	ldr	r7, [r6, #108]	; 0x6c
   1e3ac:	adds	r0, r7, r5
   1e3b0:	moveq	r0, #0
   1e3b4:	beq	1e3e0 <flatcc_builder_enter_user_frame@@Base+0x64>
   1e3b8:	mov	r2, r4
   1e3bc:	mov	r1, #0
   1e3c0:	bl	12a44 <memset@plt>
   1e3c4:	ldr	r3, [r6, #224]	; 0xe0
   1e3c8:	str	r3, [r7, r5]
   1e3cc:	ldr	r1, [r6, #228]	; 0xe4
   1e3d0:	add	r0, r1, #4
   1e3d4:	str	r0, [r6, #224]	; 0xe0
   1e3d8:	add	r4, r4, r1
   1e3dc:	str	r4, [r6, #228]	; 0xe4
   1e3e0:	add	sp, sp, #12
   1e3e4:	pop	{r4, r5, r6, r7, pc}
   1e3e8:	mov	r3, #7
   1e3ec:	str	r3, [sp]
   1e3f0:	ldr	r7, [r0, #48]	; 0x30
   1e3f4:	mov	r3, #0
   1e3f8:	add	r1, r0, #108	; 0x6c
   1e3fc:	ldr	r0, [r0, #40]	; 0x28
   1e400:	blx	r7
   1e404:	cmp	r0, #0
   1e408:	beq	1e3a8 <flatcc_builder_enter_user_frame@@Base+0x2c>
   1e40c:	ldr	r3, [pc, #12]	; 1e420 <flatcc_builder_enter_user_frame@@Base+0xa4>
   1e410:	mov	r2, #308	; 0x134
   1e414:	ldr	r1, [pc, #8]	; 1e424 <flatcc_builder_enter_user_frame@@Base+0xa8>
   1e418:	ldr	r0, [pc, #8]	; 1e428 <flatcc_builder_enter_user_frame@@Base+0xac>
   1e41c:	bl	12a8c <__assert_fail@plt>
   1e420:	andeq	r6, r2, r0, lsr #22
   1e424:	andeq	r7, r2, r4, asr r0
   1e428:	andeq	r7, r2, r8, lsr #1

0001e42c <flatcc_builder_exit_user_frame@@Base>:
   1e42c:	ldr	r3, [r0, #224]	; 0xe0
   1e430:	cmp	r3, #0
   1e434:	beq	1e458 <flatcc_builder_exit_user_frame@@Base+0x2c>
   1e438:	ldr	r2, [r0, #108]	; 0x6c
   1e43c:	add	r2, r2, r3
   1e440:	sub	r3, r3, #4
   1e444:	str	r3, [r0, #228]	; 0xe4
   1e448:	ldr	r3, [r2, #-4]
   1e44c:	str	r3, [r0, #224]	; 0xe0
   1e450:	mov	r0, r3
   1e454:	bx	lr
   1e458:	push	{r4, lr}
   1e45c:	ldr	r3, [pc, #12]	; 1e470 <flatcc_builder_exit_user_frame@@Base+0x44>
   1e460:	ldr	r2, [pc, #12]	; 1e474 <flatcc_builder_exit_user_frame@@Base+0x48>
   1e464:	ldr	r1, [pc, #12]	; 1e478 <flatcc_builder_exit_user_frame@@Base+0x4c>
   1e468:	ldr	r0, [pc, #12]	; 1e47c <flatcc_builder_exit_user_frame@@Base+0x50>
   1e46c:	bl	12a8c <__assert_fail@plt>
   1e470:	andeq	r6, r2, r8, ror fp
   1e474:	andeq	r0, r0, lr, lsl r2
   1e478:	andeq	r7, r2, r4, asr r0
   1e47c:	ldrdeq	r7, [r2], -r0

0001e480 <flatcc_builder_exit_user_frame_at@@Base>:
   1e480:	push	{r4, lr}
   1e484:	ldr	r3, [r0, #224]	; 0xe0
   1e488:	cmp	r3, r1
   1e48c:	bcc	1e49c <flatcc_builder_exit_user_frame_at@@Base+0x1c>
   1e490:	str	r1, [r0, #224]	; 0xe0
   1e494:	bl	1e42c <flatcc_builder_exit_user_frame@@Base>
   1e498:	pop	{r4, pc}
   1e49c:	ldr	r3, [pc, #12]	; 1e4b0 <flatcc_builder_exit_user_frame_at@@Base+0x30>
   1e4a0:	ldr	r2, [pc, #12]	; 1e4b4 <flatcc_builder_exit_user_frame_at@@Base+0x34>
   1e4a4:	ldr	r1, [pc, #12]	; 1e4b8 <flatcc_builder_exit_user_frame_at@@Base+0x38>
   1e4a8:	ldr	r0, [pc, #12]	; 1e4bc <flatcc_builder_exit_user_frame_at@@Base+0x3c>
   1e4ac:	bl	12a8c <__assert_fail@plt>
   1e4b0:	muleq	r2, r8, fp
   1e4b4:	andeq	r0, r0, r7, lsr #4
   1e4b8:	andeq	r7, r2, r4, asr r0
   1e4bc:	andeq	r7, r2, ip, ror #1

0001e4c0 <flatcc_builder_get_current_user_frame@@Base>:
   1e4c0:	ldr	r0, [r0, #224]	; 0xe0
   1e4c4:	bx	lr

0001e4c8 <flatcc_builder_get_user_frame_ptr@@Base>:
   1e4c8:	ldr	r0, [r0, #108]	; 0x6c
   1e4cc:	add	r0, r0, r1
   1e4d0:	bx	lr

0001e4d4 <flatcc_builder_embed_buffer@@Base>:
   1e4d4:	push	{r4, r5, r6, lr}
   1e4d8:	sub	sp, sp, #88	; 0x58
   1e4dc:	mov	r4, r0
   1e4e0:	mov	r6, r2
   1e4e4:	mov	r5, r3
   1e4e8:	ldr	r3, [r0, #152]	; 0x98
   1e4ec:	adds	r3, r3, #0
   1e4f0:	movne	r3, #1
   1e4f4:	mov	r2, r1
   1e4f8:	add	r1, sp, #104	; 0x68
   1e4fc:	bl	1dbac <flatcc_builder_default_alloc@@Base+0x114>
   1e500:	cmp	r0, #0
   1e504:	bne	1e640 <flatcc_builder_embed_buffer@@Base+0x16c>
   1e508:	ldr	r3, [sp, #108]	; 0x6c
   1e50c:	and	r3, r3, #2
   1e510:	cmp	r3, #0
   1e514:	movne	r3, #4
   1e518:	moveq	r3, #0
   1e51c:	ldr	r1, [r4, #136]	; 0x88
   1e520:	sub	r2, r1, r5
   1e524:	sub	r3, r2, r3
   1e528:	ldrh	r2, [sp, #104]	; 0x68
   1e52c:	sub	r2, r2, #1
   1e530:	and	r3, r3, r2
   1e534:	add	r2, r5, r3
   1e538:	str	r2, [sp, #84]	; 0x54
   1e53c:	mov	r2, #0
   1e540:	str	r2, [sp, #12]
   1e544:	str	r2, [sp, #16]
   1e548:	ldr	r2, [r4, #152]	; 0x98
   1e54c:	cmp	r2, #0
   1e550:	beq	1e570 <flatcc_builder_embed_buffer@@Base+0x9c>
   1e554:	mov	r2, #4
   1e558:	str	r2, [sp, #12]
   1e55c:	add	r0, sp, #84	; 0x54
   1e560:	str	r0, [sp, #20]
   1e564:	str	r2, [sp, #24]
   1e568:	mov	r2, #1
   1e56c:	str	r2, [sp, #16]
   1e570:	cmp	r5, #0
   1e574:	beq	1e5a0 <flatcc_builder_embed_buffer@@Base+0xcc>
   1e578:	ldr	r2, [sp, #12]
   1e57c:	add	r2, r2, r5
   1e580:	str	r2, [sp, #12]
   1e584:	ldr	r2, [sp, #16]
   1e588:	add	r2, r2, #1
   1e58c:	add	r0, sp, #88	; 0x58
   1e590:	add	r0, r0, r2, lsl #3
   1e594:	str	r6, [r0, #-76]	; 0xffffffb4
   1e598:	str	r5, [r0, #-72]	; 0xffffffb8
   1e59c:	str	r2, [sp, #16]
   1e5a0:	cmp	r3, #0
   1e5a4:	beq	1e5d4 <flatcc_builder_embed_buffer@@Base+0x100>
   1e5a8:	ldr	r2, [sp, #12]
   1e5ac:	add	r2, r2, r3
   1e5b0:	str	r2, [sp, #12]
   1e5b4:	ldr	r2, [sp, #16]
   1e5b8:	add	r2, r2, #1
   1e5bc:	add	r0, sp, #88	; 0x58
   1e5c0:	add	r0, r0, r2, lsl #3
   1e5c4:	ldr	ip, [pc, #124]	; 1e648 <flatcc_builder_embed_buffer@@Base+0x174>
   1e5c8:	str	ip, [r0, #-76]	; 0xffffffb4
   1e5cc:	str	r3, [r0, #-72]	; 0xffffffb8
   1e5d0:	str	r2, [sp, #16]
   1e5d4:	ldr	r3, [sp, #12]
   1e5d8:	sub	r5, r1, r3
   1e5dc:	cmp	r1, r5
   1e5e0:	ble	1e618 <flatcc_builder_embed_buffer@@Base+0x144>
   1e5e4:	str	r3, [sp]
   1e5e8:	ldr	r6, [r4, #44]	; 0x2c
   1e5ec:	mov	r3, r5
   1e5f0:	ldr	r2, [sp, #16]
   1e5f4:	add	r1, sp, #20
   1e5f8:	ldr	r0, [r4, #36]	; 0x24
   1e5fc:	blx	r6
   1e600:	cmp	r0, #0
   1e604:	streq	r5, [r4, #136]	; 0x88
   1e608:	bne	1e62c <flatcc_builder_embed_buffer@@Base+0x158>
   1e60c:	mov	r0, r5
   1e610:	add	sp, sp, #88	; 0x58
   1e614:	pop	{r4, r5, r6, pc}
   1e618:	ldr	r3, [pc, #44]	; 1e64c <flatcc_builder_embed_buffer@@Base+0x178>
   1e61c:	ldr	r2, [pc, #44]	; 1e650 <flatcc_builder_embed_buffer@@Base+0x17c>
   1e620:	ldr	r1, [pc, #44]	; 1e654 <flatcc_builder_embed_buffer@@Base+0x180>
   1e624:	ldr	r0, [pc, #44]	; 1e658 <flatcc_builder_embed_buffer@@Base+0x184>
   1e628:	bl	12a8c <__assert_fail@plt>
   1e62c:	ldr	r3, [pc, #24]	; 1e64c <flatcc_builder_embed_buffer@@Base+0x178>
   1e630:	ldr	r2, [pc, #36]	; 1e65c <flatcc_builder_embed_buffer@@Base+0x188>
   1e634:	ldr	r1, [pc, #24]	; 1e654 <flatcc_builder_embed_buffer@@Base+0x180>
   1e638:	ldr	r0, [pc, #24]	; 1e658 <flatcc_builder_embed_buffer@@Base+0x184>
   1e63c:	bl	12a8c <__assert_fail@plt>
   1e640:	mov	r5, #0
   1e644:	b	1e60c <flatcc_builder_embed_buffer@@Base+0x138>
   1e648:	andeq	r6, r2, r4, lsl #18
   1e64c:	andeq	r6, r2, r0, asr fp
   1e650:	andeq	r0, r0, r7, lsl #5
   1e654:	andeq	r7, r2, r4, asr r0
   1e658:	andeq	r7, r2, r8, lsr #1
   1e65c:	andeq	r0, r0, fp, lsl #5

0001e660 <flatcc_builder_create_buffer@@Base>:
   1e660:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1e664:	sub	sp, sp, #96	; 0x60
   1e668:	mov	r5, r0
   1e66c:	mov	r9, r1
   1e670:	mov	r6, r3
   1e674:	ldr	r8, [sp, #132]	; 0x84
   1e678:	mov	r3, #0
   1e67c:	str	r3, [sp, #12]
   1e680:	and	r4, r8, #1
   1e684:	uxtb	r7, r4
   1e688:	mov	r3, r7
   1e68c:	add	r1, sp, #128	; 0x80
   1e690:	bl	1dbac <flatcc_builder_default_alloc@@Base+0x114>
   1e694:	cmp	r0, #0
   1e698:	bne	1e83c <flatcc_builder_create_buffer@@Base+0x1dc>
   1e69c:	ldrh	r0, [sp, #128]	; 0x80
   1e6a0:	ldrh	r3, [r5, #128]	; 0x80
   1e6a4:	cmp	r3, r0
   1e6a8:	strhcc	r0, [r5, #128]	; 0x80
   1e6ac:	cmp	r9, #0
   1e6b0:	ldrne	r3, [r9]
   1e6b4:	strne	r3, [sp, #12]
   1e6b8:	ldr	r1, [sp, #12]
   1e6bc:	cmp	r1, #0
   1e6c0:	movne	r1, #4
   1e6c4:	moveq	r1, #0
   1e6c8:	tst	r8, #2
   1e6cc:	bne	1e844 <flatcc_builder_create_buffer@@Base+0x1e4>
   1e6d0:	ldr	ip, [r5, #136]	; 0x88
   1e6d4:	mov	r2, ip
   1e6d8:	sub	r3, ip, #4
   1e6dc:	sub	r3, r3, r1
   1e6e0:	sub	r0, r0, #1
   1e6e4:	and	r3, r3, r0
   1e6e8:	mov	r0, #0
   1e6ec:	str	r0, [sp, #16]
   1e6f0:	str	r0, [sp, #20]
   1e6f4:	cmp	r4, r0
   1e6f8:	bne	1e860 <flatcc_builder_create_buffer@@Base+0x200>
   1e6fc:	ldr	lr, [sp, #16]
   1e700:	add	lr, lr, #4
   1e704:	str	lr, [sp, #16]
   1e708:	ldr	r8, [sp, #20]
   1e70c:	add	r0, r8, #1
   1e710:	add	r9, sp, #96	; 0x60
   1e714:	add	r9, r9, r0, lsl #3
   1e718:	add	sl, sp, #92	; 0x5c
   1e71c:	str	sl, [r9, #-80]	; 0xffffffb0
   1e720:	mov	sl, #4
   1e724:	str	sl, [r9, #-76]	; 0xffffffb4
   1e728:	str	r0, [sp, #20]
   1e72c:	cmp	r1, #0
   1e730:	beq	1e75c <flatcc_builder_create_buffer@@Base+0xfc>
   1e734:	add	lr, r1, lr
   1e738:	str	lr, [sp, #16]
   1e73c:	add	r0, r8, #2
   1e740:	add	lr, sp, #96	; 0x60
   1e744:	add	r0, lr, r0, lsl #3
   1e748:	add	lr, sp, #12
   1e74c:	str	lr, [r0, #-80]	; 0xffffffb0
   1e750:	str	r1, [r0, #-76]	; 0xffffffb4
   1e754:	add	r8, r8, #2
   1e758:	str	r8, [sp, #20]
   1e75c:	cmp	r3, #0
   1e760:	beq	1e790 <flatcc_builder_create_buffer@@Base+0x130>
   1e764:	ldr	r1, [sp, #16]
   1e768:	add	r1, r1, r3
   1e76c:	str	r1, [sp, #16]
   1e770:	ldr	r1, [sp, #20]
   1e774:	add	r1, r1, #1
   1e778:	add	r0, sp, #96	; 0x60
   1e77c:	add	r0, r0, r1, lsl #3
   1e780:	ldr	lr, [pc, #248]	; 1e880 <flatcc_builder_create_buffer@@Base+0x220>
   1e784:	str	lr, [r0, #-80]	; 0xffffffb0
   1e788:	str	r3, [r0, #-76]	; 0xffffffb4
   1e78c:	str	r1, [sp, #20]
   1e790:	ldr	r1, [sp, #16]
   1e794:	sub	r3, r2, r1
   1e798:	add	r3, r3, r7, lsl #2
   1e79c:	cmp	r4, #0
   1e7a0:	ldrne	r2, [r5, #144]	; 0x90
   1e7a4:	ldreq	r2, [r5, #140]	; 0x8c
   1e7a8:	sub	r2, r2, r3
   1e7ac:	str	r2, [sp, #88]	; 0x58
   1e7b0:	sub	r3, r6, r3
   1e7b4:	str	r3, [sp, #92]	; 0x5c
   1e7b8:	sub	r4, ip, r1
   1e7bc:	cmp	r4, ip
   1e7c0:	bge	1e800 <flatcc_builder_create_buffer@@Base+0x1a0>
   1e7c4:	str	r1, [sp]
   1e7c8:	ldr	r6, [r5, #44]	; 0x2c
   1e7cc:	mov	r3, r4
   1e7d0:	ldr	r2, [sp, #20]
   1e7d4:	add	r1, sp, #24
   1e7d8:	ldr	r0, [r5, #36]	; 0x24
   1e7dc:	blx	r6
   1e7e0:	cmp	r0, #0
   1e7e4:	bne	1e814 <flatcc_builder_create_buffer@@Base+0x1b4>
   1e7e8:	str	r4, [r5, #136]	; 0x88
   1e7ec:	cmp	r4, #0
   1e7f0:	beq	1e828 <flatcc_builder_create_buffer@@Base+0x1c8>
   1e7f4:	mov	r0, r4
   1e7f8:	add	sp, sp, #96	; 0x60
   1e7fc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1e800:	ldr	r3, [pc, #124]	; 1e884 <flatcc_builder_create_buffer@@Base+0x224>
   1e804:	ldr	r2, [pc, #124]	; 1e888 <flatcc_builder_create_buffer@@Base+0x228>
   1e808:	ldr	r1, [pc, #124]	; 1e88c <flatcc_builder_create_buffer@@Base+0x22c>
   1e80c:	ldr	r0, [pc, #124]	; 1e890 <flatcc_builder_create_buffer@@Base+0x230>
   1e810:	bl	12a8c <__assert_fail@plt>
   1e814:	ldr	r3, [pc, #104]	; 1e884 <flatcc_builder_create_buffer@@Base+0x224>
   1e818:	ldr	r2, [pc, #116]	; 1e894 <flatcc_builder_create_buffer@@Base+0x234>
   1e81c:	ldr	r1, [pc, #104]	; 1e88c <flatcc_builder_create_buffer@@Base+0x22c>
   1e820:	ldr	r0, [pc, #104]	; 1e890 <flatcc_builder_create_buffer@@Base+0x230>
   1e824:	bl	12a8c <__assert_fail@plt>
   1e828:	ldr	r3, [pc, #104]	; 1e898 <flatcc_builder_create_buffer@@Base+0x238>
   1e82c:	mov	r2, #772	; 0x304
   1e830:	ldr	r1, [pc, #84]	; 1e88c <flatcc_builder_create_buffer@@Base+0x22c>
   1e834:	ldr	r0, [pc, #84]	; 1e890 <flatcc_builder_create_buffer@@Base+0x230>
   1e838:	bl	12a8c <__assert_fail@plt>
   1e83c:	mov	r4, #0
   1e840:	b	1e7f4 <flatcc_builder_create_buffer@@Base+0x194>
   1e844:	ldr	ip, [r5, #136]	; 0x88
   1e848:	mov	r2, ip
   1e84c:	sub	r3, ip, #8
   1e850:	sub	r3, r3, r1
   1e854:	sub	r0, r0, #1
   1e858:	and	r3, r3, r0
   1e85c:	mov	r7, #1
   1e860:	mov	r0, #4
   1e864:	str	r0, [sp, #16]
   1e868:	add	lr, sp, #88	; 0x58
   1e86c:	str	lr, [sp, #24]
   1e870:	str	r0, [sp, #28]
   1e874:	mov	r0, #1
   1e878:	str	r0, [sp, #20]
   1e87c:	b	1e6fc <flatcc_builder_create_buffer@@Base+0x9c>
   1e880:	andeq	r6, r2, r4, lsl #18
   1e884:	andeq	r6, r2, r0, asr fp
   1e888:	andeq	r0, r0, r7, lsl #5
   1e88c:	andeq	r7, r2, r4, asr r0
   1e890:	andeq	r7, r2, r8, lsr #1
   1e894:	andeq	r0, r0, fp, lsl #5
   1e898:			; <UNDEFINED> instruction: 0x00026bbc

0001e89c <flatcc_builder_create_struct@@Base>:
   1e89c:	push	{r4, r5, r6, lr}
   1e8a0:	sub	sp, sp, #80	; 0x50
   1e8a4:	cmp	r3, #0
   1e8a8:	beq	1e900 <flatcc_builder_create_struct@@Base+0x64>
   1e8ac:	mov	r4, r0
   1e8b0:	ldrh	r0, [r0, #128]	; 0x80
   1e8b4:	cmp	r0, r3
   1e8b8:	strhcc	r3, [r4, #128]	; 0x80
   1e8bc:	ldr	ip, [r4, #136]	; 0x88
   1e8c0:	sub	r0, ip, r2
   1e8c4:	sub	r3, r3, #1
   1e8c8:	and	r3, r3, r0
   1e8cc:	mov	r0, #0
   1e8d0:	str	r0, [sp, #8]
   1e8d4:	str	r0, [sp, #12]
   1e8d8:	cmp	r2, r0
   1e8dc:	beq	1e93c <flatcc_builder_create_struct@@Base+0xa0>
   1e8e0:	str	r2, [sp, #8]
   1e8e4:	str	r1, [sp, #16]
   1e8e8:	str	r2, [sp, #20]
   1e8ec:	mov	r2, #1
   1e8f0:	str	r2, [sp, #12]
   1e8f4:	cmp	r3, r0
   1e8f8:	beq	1e970 <flatcc_builder_create_struct@@Base+0xd4>
   1e8fc:	b	1e944 <flatcc_builder_create_struct@@Base+0xa8>
   1e900:	ldr	r3, [pc, #172]	; 1e9b4 <flatcc_builder_create_struct@@Base+0x118>
   1e904:	ldr	r2, [pc, #172]	; 1e9b8 <flatcc_builder_create_struct@@Base+0x11c>
   1e908:	ldr	r1, [pc, #172]	; 1e9bc <flatcc_builder_create_struct@@Base+0x120>
   1e90c:	ldr	r0, [pc, #172]	; 1e9c0 <flatcc_builder_create_struct@@Base+0x124>
   1e910:	bl	12a8c <__assert_fail@plt>
   1e914:	ldr	r3, [pc, #168]	; 1e9c4 <flatcc_builder_create_struct@@Base+0x128>
   1e918:	ldr	r2, [pc, #168]	; 1e9c8 <flatcc_builder_create_struct@@Base+0x12c>
   1e91c:	ldr	r1, [pc, #152]	; 1e9bc <flatcc_builder_create_struct@@Base+0x120>
   1e920:	ldr	r0, [pc, #164]	; 1e9cc <flatcc_builder_create_struct@@Base+0x130>
   1e924:	bl	12a8c <__assert_fail@plt>
   1e928:	ldr	r3, [pc, #148]	; 1e9c4 <flatcc_builder_create_struct@@Base+0x128>
   1e92c:	ldr	r2, [pc, #156]	; 1e9d0 <flatcc_builder_create_struct@@Base+0x134>
   1e930:	ldr	r1, [pc, #132]	; 1e9bc <flatcc_builder_create_struct@@Base+0x120>
   1e934:	ldr	r0, [pc, #144]	; 1e9cc <flatcc_builder_create_struct@@Base+0x130>
   1e938:	bl	12a8c <__assert_fail@plt>
   1e93c:	cmp	r3, #0
   1e940:	beq	1e914 <flatcc_builder_create_struct@@Base+0x78>
   1e944:	ldr	r2, [sp, #8]
   1e948:	add	r2, r2, r3
   1e94c:	str	r2, [sp, #8]
   1e950:	ldr	r2, [sp, #12]
   1e954:	add	r2, r2, #1
   1e958:	add	r1, sp, #80	; 0x50
   1e95c:	add	r1, r1, r2, lsl #3
   1e960:	ldr	r0, [pc, #108]	; 1e9d4 <flatcc_builder_create_struct@@Base+0x138>
   1e964:	str	r0, [r1, #-72]	; 0xffffffb8
   1e968:	str	r3, [r1, #-68]	; 0xffffffbc
   1e96c:	str	r2, [sp, #12]
   1e970:	ldr	r3, [sp, #8]
   1e974:	sub	r5, ip, r3
   1e978:	cmp	ip, r5
   1e97c:	ble	1e914 <flatcc_builder_create_struct@@Base+0x78>
   1e980:	str	r3, [sp]
   1e984:	ldr	r6, [r4, #44]	; 0x2c
   1e988:	mov	r3, r5
   1e98c:	ldr	r2, [sp, #12]
   1e990:	add	r1, sp, #16
   1e994:	ldr	r0, [r4, #36]	; 0x24
   1e998:	blx	r6
   1e99c:	cmp	r0, #0
   1e9a0:	bne	1e928 <flatcc_builder_create_struct@@Base+0x8c>
   1e9a4:	str	r5, [r4, #136]	; 0x88
   1e9a8:	mov	r0, r5
   1e9ac:	add	sp, sp, #80	; 0x50
   1e9b0:	pop	{r4, r5, r6, pc}
   1e9b4:	ldrdeq	r6, [r2], -ip
   1e9b8:	andeq	r0, r0, pc, lsl #6
   1e9bc:	andeq	r7, r2, r4, asr r0
   1e9c0:	andeq	r7, r2, ip, lsl #2
   1e9c4:	andeq	r6, r2, r0, asr fp
   1e9c8:	andeq	r0, r0, r7, lsl #5
   1e9cc:	andeq	r7, r2, r8, lsr #1
   1e9d0:	andeq	r0, r0, fp, lsl #5
   1e9d4:	andeq	r6, r2, r4, lsl #18

0001e9d8 <flatcc_builder_start_buffer@@Base>:
   1e9d8:	push	{r4, r5, r6, r7, r8, lr}
   1e9dc:	mov	r4, r0
   1e9e0:	mov	r5, r1
   1e9e4:	mov	r7, r2
   1e9e8:	mov	r6, r3
   1e9ec:	ldrh	r1, [r0, #128]	; 0x80
   1e9f0:	bl	1dcc4 <flatcc_builder_default_alloc@@Base+0x22c>
   1e9f4:	cmp	r0, #0
   1e9f8:	bne	1ea84 <flatcc_builder_start_buffer@@Base+0xac>
   1e9fc:	mov	r3, #1
   1ea00:	strh	r3, [r4, #128]	; 0x80
   1ea04:	ldr	r3, [r4, #32]
   1ea08:	ldrh	r2, [r4, #132]	; 0x84
   1ea0c:	strh	r2, [r3, #34]	; 0x22
   1ea10:	strh	r7, [r4, #132]	; 0x84
   1ea14:	ldr	r3, [r4, #32]
   1ea18:	ldrh	r2, [r4, #164]	; 0xa4
   1ea1c:	strh	r2, [r3, #32]
   1ea20:	strh	r6, [r4, #164]	; 0xa4
   1ea24:	ldr	r3, [r4, #32]
   1ea28:	ldr	r2, [r4, #144]	; 0x90
   1ea2c:	str	r2, [r3, #20]
   1ea30:	ldr	r3, [r4, #32]
   1ea34:	ldr	r2, [r4, #152]	; 0x98
   1ea38:	str	r2, [r3, #28]
   1ea3c:	ldr	r3, [r4, #136]	; 0x88
   1ea40:	str	r3, [r4, #144]	; 0x90
   1ea44:	ldr	r3, [r4, #148]	; 0x94
   1ea48:	add	r2, r3, #1
   1ea4c:	str	r2, [r4, #148]	; 0x94
   1ea50:	str	r3, [r4, #152]	; 0x98
   1ea54:	ldr	r3, [r4, #32]
   1ea58:	ldr	r2, [r4, #168]	; 0xa8
   1ea5c:	str	r2, [r3, #16]
   1ea60:	ldr	r3, [pc, #36]	; 1ea8c <flatcc_builder_start_buffer@@Base+0xb4>
   1ea64:	cmp	r5, #0
   1ea68:	moveq	r5, r3
   1ea6c:	ldr	r3, [r5]
   1ea70:	str	r3, [r4, #168]	; 0xa8
   1ea74:	ldr	r3, [r4, #32]
   1ea78:	mov	r2, #1
   1ea7c:	strh	r2, [r3, #14]
   1ea80:	pop	{r4, r5, r6, r7, r8, pc}
   1ea84:	mvn	r0, #0
   1ea88:	pop	{r4, r5, r6, r7, r8, pc}
   1ea8c:	andeq	r6, r2, r4, lsl #18

0001ea90 <flatcc_builder_end_buffer@@Base>:
   1ea90:	push	{r4, r5, lr}
   1ea94:	sub	sp, sp, #12
   1ea98:	mov	r4, r0
   1ea9c:	ldrh	r2, [r0, #164]	; 0xa4
   1eaa0:	and	r2, r2, #2
   1eaa4:	ldr	r0, [r0, #152]	; 0x98
   1eaa8:	cmp	r0, #0
   1eaac:	moveq	r0, r2
   1eab0:	orrne	r0, r2, #1
   1eab4:	ldr	r2, [r4, #32]
   1eab8:	ldrh	r2, [r2, #14]
   1eabc:	cmp	r2, #1
   1eac0:	bne	1eb04 <flatcc_builder_end_buffer@@Base+0x74>
   1eac4:	ldrh	r2, [r4, #132]	; 0x84
   1eac8:	ldrh	r3, [r4, #128]	; 0x80
   1eacc:	cmp	r3, r2
   1ead0:	strhcc	r2, [r4, #128]	; 0x80
   1ead4:	str	r0, [sp, #4]
   1ead8:	ldrh	r3, [r4, #128]	; 0x80
   1eadc:	str	r3, [sp]
   1eae0:	mov	r3, r1
   1eae4:	add	r1, r4, #168	; 0xa8
   1eae8:	mov	r0, r4
   1eaec:	bl	1e660 <flatcc_builder_create_buffer@@Base>
   1eaf0:	subs	r5, r0, #0
   1eaf4:	bne	1eb18 <flatcc_builder_end_buffer@@Base+0x88>
   1eaf8:	mov	r0, r5
   1eafc:	add	sp, sp, #12
   1eb00:	pop	{r4, r5, pc}
   1eb04:	ldr	r3, [pc, #176]	; 1ebbc <flatcc_builder_end_buffer@@Base+0x12c>
   1eb08:	ldr	r2, [pc, #176]	; 1ebc0 <flatcc_builder_end_buffer@@Base+0x130>
   1eb0c:	ldr	r1, [pc, #176]	; 1ebc4 <flatcc_builder_end_buffer@@Base+0x134>
   1eb10:	ldr	r0, [pc, #176]	; 1ebc8 <flatcc_builder_end_buffer@@Base+0x138>
   1eb14:	bl	12a8c <__assert_fail@plt>
   1eb18:	ldr	r3, [r4, #32]
   1eb1c:	ldr	r2, [r3, #20]
   1eb20:	str	r2, [r4, #144]	; 0x90
   1eb24:	ldr	r2, [r3, #28]
   1eb28:	str	r2, [r4, #152]	; 0x98
   1eb2c:	ldr	r2, [r3, #16]
   1eb30:	str	r2, [r4, #168]	; 0xa8
   1eb34:	ldrh	r3, [r3, #32]
   1eb38:	strh	r3, [r4, #164]	; 0xa4
   1eb3c:	ldr	r2, [r4, #20]
   1eb40:	mov	r1, #0
   1eb44:	ldr	r0, [r4, #16]
   1eb48:	bl	12a44 <memset@plt>
   1eb4c:	ldr	r2, [r4, #32]
   1eb50:	ldr	r3, [r2, #8]
   1eb54:	str	r3, [r4, #20]
   1eb58:	ldr	r0, [r2]
   1eb5c:	str	r0, [r4, #28]
   1eb60:	ldr	r1, [r2, #4]
   1eb64:	ldr	r3, [r4, #60]	; 0x3c
   1eb68:	add	r3, r3, r0
   1eb6c:	str	r3, [r4, #16]
   1eb70:	ldr	r3, [r4, #64]	; 0x40
   1eb74:	sub	r3, r3, r0
   1eb78:	cmp	r3, r1
   1eb7c:	movcs	r3, r1
   1eb80:	str	r3, [r4, #24]
   1eb84:	str	r1, [r2, #4]
   1eb88:	ldrh	r3, [r4, #130]	; 0x82
   1eb8c:	ldrh	r2, [r4, #128]	; 0x80
   1eb90:	cmp	r2, r3
   1eb94:	strhcc	r3, [r4, #128]	; 0x80
   1eb98:	ldr	r3, [r4, #32]
   1eb9c:	ldrh	r2, [r3, #12]
   1eba0:	strh	r2, [r4, #130]	; 0x82
   1eba4:	sub	r3, r3, #36	; 0x24
   1eba8:	str	r3, [r4, #32]
   1ebac:	ldr	r3, [r4, #156]	; 0x9c
   1ebb0:	sub	r3, r3, #1
   1ebb4:	str	r3, [r4, #156]	; 0x9c
   1ebb8:	b	1eaf8 <flatcc_builder_end_buffer@@Base+0x68>
   1ebbc:	strdeq	r6, [r2], -ip
   1ebc0:	andeq	r0, r0, r6, asr #6
   1ebc4:	andeq	r7, r2, r4, asr r0
   1ebc8:	andeq	r7, r2, r8, lsl r1

0001ebcc <flatcc_builder_start_struct@@Base>:
   1ebcc:	push	{r4, r5, r6, lr}
   1ebd0:	mov	r4, r0
   1ebd4:	mov	r5, r1
   1ebd8:	mov	r1, r2
   1ebdc:	bl	1dcc4 <flatcc_builder_default_alloc@@Base+0x22c>
   1ebe0:	cmp	r0, #0
   1ebe4:	bne	1ec64 <flatcc_builder_start_struct@@Base+0x98>
   1ebe8:	ldr	r3, [r4, #32]
   1ebec:	mov	r2, #2
   1ebf0:	strh	r2, [r3, #14]
   1ebf4:	ldr	r1, [r4, #28]
   1ebf8:	ldr	r2, [r4, #60]	; 0x3c
   1ebfc:	add	r2, r2, r1
   1ec00:	str	r2, [r4, #16]
   1ec04:	ldr	r3, [r4, #64]	; 0x40
   1ec08:	sub	r3, r3, r1
   1ec0c:	cmn	r3, #4
   1ec10:	mvnhi	r3, #3
   1ec14:	str	r3, [r4, #24]
   1ec18:	ldr	r3, [r4, #32]
   1ec1c:	mvn	r2, #3
   1ec20:	str	r2, [r3, #4]
   1ec24:	ldr	r6, [r4, #20]
   1ec28:	add	r5, r5, r6
   1ec2c:	str	r5, [r4, #20]
   1ec30:	ldr	r3, [r4, #24]
   1ec34:	cmp	r5, r3
   1ec38:	bcs	1ec48 <flatcc_builder_start_struct@@Base+0x7c>
   1ec3c:	ldr	r0, [r4, #16]
   1ec40:	add	r0, r0, r6
   1ec44:	pop	{r4, r5, r6, pc}
   1ec48:	add	r1, r5, #1
   1ec4c:	mov	r0, r4
   1ec50:	bl	1da24 <main@@Base+0x2d4>
   1ec54:	cmp	r0, #0
   1ec58:	beq	1ec3c <flatcc_builder_start_struct@@Base+0x70>
   1ec5c:	mov	r0, #0
   1ec60:	pop	{r4, r5, r6, pc}
   1ec64:	mov	r0, #0
   1ec68:	pop	{r4, r5, r6, pc}

0001ec6c <flatcc_builder_struct_edit@@Base>:
   1ec6c:	ldr	r0, [r0, #16]
   1ec70:	bx	lr

0001ec74 <flatcc_builder_end_struct@@Base>:
   1ec74:	push	{r4, r5, r6, lr}
   1ec78:	ldr	r3, [r0, #32]
   1ec7c:	ldrh	r3, [r3, #14]
   1ec80:	cmp	r3, #2
   1ec84:	bne	1ecac <flatcc_builder_end_struct@@Base+0x38>
   1ec88:	mov	r4, r0
   1ec8c:	ldrh	r3, [r0, #130]	; 0x82
   1ec90:	ldr	r2, [r0, #20]
   1ec94:	ldr	r1, [r0, #16]
   1ec98:	bl	1e89c <flatcc_builder_create_struct@@Base>
   1ec9c:	subs	r5, r0, #0
   1eca0:	bne	1ecc0 <flatcc_builder_end_struct@@Base+0x4c>
   1eca4:	mov	r0, r5
   1eca8:	pop	{r4, r5, r6, pc}
   1ecac:	ldr	r3, [pc, #140]	; 1ed40 <flatcc_builder_end_struct@@Base+0xcc>
   1ecb0:	mov	r2, #872	; 0x368
   1ecb4:	ldr	r1, [pc, #136]	; 1ed44 <flatcc_builder_end_struct@@Base+0xd0>
   1ecb8:	ldr	r0, [pc, #136]	; 1ed48 <flatcc_builder_end_struct@@Base+0xd4>
   1ecbc:	bl	12a8c <__assert_fail@plt>
   1ecc0:	ldr	r2, [r4, #20]
   1ecc4:	mov	r1, #0
   1ecc8:	ldr	r0, [r4, #16]
   1eccc:	bl	12a44 <memset@plt>
   1ecd0:	ldr	r2, [r4, #32]
   1ecd4:	ldr	r3, [r2, #8]
   1ecd8:	str	r3, [r4, #20]
   1ecdc:	ldr	r0, [r2]
   1ece0:	str	r0, [r4, #28]
   1ece4:	ldr	r1, [r2, #4]
   1ece8:	ldr	r3, [r4, #60]	; 0x3c
   1ecec:	add	r3, r3, r0
   1ecf0:	str	r3, [r4, #16]
   1ecf4:	ldr	r3, [r4, #64]	; 0x40
   1ecf8:	sub	r3, r3, r0
   1ecfc:	cmp	r3, r1
   1ed00:	movcs	r3, r1
   1ed04:	str	r3, [r4, #24]
   1ed08:	str	r1, [r2, #4]
   1ed0c:	ldrh	r3, [r4, #130]	; 0x82
   1ed10:	ldrh	r2, [r4, #128]	; 0x80
   1ed14:	cmp	r2, r3
   1ed18:	strhcc	r3, [r4, #128]	; 0x80
   1ed1c:	ldr	r3, [r4, #32]
   1ed20:	ldrh	r2, [r3, #12]
   1ed24:	strh	r2, [r4, #130]	; 0x82
   1ed28:	sub	r3, r3, #36	; 0x24
   1ed2c:	str	r3, [r4, #32]
   1ed30:	ldr	r3, [r4, #156]	; 0x9c
   1ed34:	sub	r3, r3, #1
   1ed38:	str	r3, [r4, #156]	; 0x9c
   1ed3c:	b	1eca4 <flatcc_builder_end_struct@@Base+0x30>
   1ed40:	andeq	r6, r2, r8, lsl ip
   1ed44:	andeq	r7, r2, r4, asr r0
   1ed48:	andeq	r7, r2, r4, asr #2

0001ed4c <flatcc_builder_extend_vector@@Base>:
   1ed4c:	push	{r4, r5, r6, lr}
   1ed50:	mov	r4, r0
   1ed54:	ldr	r2, [r0, #32]
   1ed58:	ldr	r3, [r2, #20]
   1ed5c:	add	r0, r1, r3
   1ed60:	ldr	ip, [r2, #24]
   1ed64:	cmp	r3, r0
   1ed68:	movls	r3, #0
   1ed6c:	movhi	r3, #1
   1ed70:	cmp	ip, r0
   1ed74:	orrcc	r3, r3, #1
   1ed78:	cmp	r3, #0
   1ed7c:	bne	1edb0 <flatcc_builder_extend_vector@@Base+0x64>
   1ed80:	str	r0, [r2, #20]
   1ed84:	ldr	r5, [r4, #20]
   1ed88:	ldr	r3, [r4, #32]
   1ed8c:	ldr	r3, [r3, #16]
   1ed90:	mla	r1, r3, r1, r5
   1ed94:	str	r1, [r4, #20]
   1ed98:	ldr	r3, [r4, #24]
   1ed9c:	cmp	r1, r3
   1eda0:	bcs	1edc4 <flatcc_builder_extend_vector@@Base+0x78>
   1eda4:	ldr	r0, [r4, #16]
   1eda8:	add	r0, r0, r5
   1edac:	pop	{r4, r5, r6, pc}
   1edb0:	ldr	r3, [pc, #44]	; 1ede4 <flatcc_builder_extend_vector@@Base+0x98>
   1edb4:	mov	r2, #892	; 0x37c
   1edb8:	ldr	r1, [pc, #40]	; 1ede8 <flatcc_builder_extend_vector@@Base+0x9c>
   1edbc:	ldr	r0, [pc, #40]	; 1edec <flatcc_builder_extend_vector@@Base+0xa0>
   1edc0:	bl	12a8c <__assert_fail@plt>
   1edc4:	mvn	r2, #3
   1edc8:	add	r1, r1, #1
   1edcc:	mov	r0, r4
   1edd0:	bl	1da24 <main@@Base+0x2d4>
   1edd4:	cmp	r0, #0
   1edd8:	beq	1eda4 <flatcc_builder_extend_vector@@Base+0x58>
   1eddc:	mov	r0, #0
   1ede0:	pop	{r4, r5, r6, pc}
   1ede4:	andeq	r6, r2, r4, lsr ip
   1ede8:	andeq	r7, r2, r4, asr r0
   1edec:	andeq	r7, r2, r0, ror r1

0001edf0 <flatcc_builder_vector_push@@Base>:
   1edf0:	push	{r4, r5, r6, r7, r8, lr}
   1edf4:	ldr	r3, [r0, #32]
   1edf8:	ldrh	r2, [r3, #14]
   1edfc:	cmp	r2, #4
   1ee00:	bne	1ee68 <flatcc_builder_vector_push@@Base+0x78>
   1ee04:	mov	r4, r0
   1ee08:	mov	r6, r1
   1ee0c:	ldr	r2, [r3, #20]
   1ee10:	ldr	r1, [r3, #24]
   1ee14:	cmp	r2, r1
   1ee18:	bhi	1ee7c <flatcc_builder_vector_push@@Base+0x8c>
   1ee1c:	add	r2, r2, #1
   1ee20:	str	r2, [r3, #20]
   1ee24:	ldr	r3, [r0, #32]
   1ee28:	ldr	r7, [r3, #16]
   1ee2c:	ldr	r5, [r0, #20]
   1ee30:	add	r1, r7, r5
   1ee34:	str	r1, [r0, #20]
   1ee38:	ldr	r3, [r0, #24]
   1ee3c:	cmp	r1, r3
   1ee40:	bcs	1ee90 <flatcc_builder_vector_push@@Base+0xa0>
   1ee44:	ldr	r4, [r4, #16]
   1ee48:	adds	r4, r4, r5
   1ee4c:	beq	1ee60 <flatcc_builder_vector_push@@Base+0x70>
   1ee50:	mov	r2, r7
   1ee54:	mov	r1, r6
   1ee58:	mov	r0, r4
   1ee5c:	bl	129b4 <memcpy@plt>
   1ee60:	mov	r0, r4
   1ee64:	pop	{r4, r5, r6, r7, r8, pc}
   1ee68:	ldr	r3, [pc, #60]	; 1eeac <flatcc_builder_vector_push@@Base+0xbc>
   1ee6c:	ldr	r2, [pc, #60]	; 1eeb0 <flatcc_builder_vector_push@@Base+0xc0>
   1ee70:	ldr	r1, [pc, #60]	; 1eeb4 <flatcc_builder_vector_push@@Base+0xc4>
   1ee74:	ldr	r0, [pc, #60]	; 1eeb8 <flatcc_builder_vector_push@@Base+0xc8>
   1ee78:	bl	12a8c <__assert_fail@plt>
   1ee7c:	ldr	r3, [pc, #40]	; 1eeac <flatcc_builder_vector_push@@Base+0xbc>
   1ee80:	mov	r2, #908	; 0x38c
   1ee84:	ldr	r1, [pc, #40]	; 1eeb4 <flatcc_builder_vector_push@@Base+0xc4>
   1ee88:	ldr	r0, [pc, #44]	; 1eebc <flatcc_builder_vector_push@@Base+0xcc>
   1ee8c:	bl	12a8c <__assert_fail@plt>
   1ee90:	mvn	r2, #3
   1ee94:	add	r1, r1, #1
   1ee98:	bl	1da24 <main@@Base+0x2d4>
   1ee9c:	cmp	r0, #0
   1eea0:	beq	1ee44 <flatcc_builder_vector_push@@Base+0x54>
   1eea4:	mov	r4, #0
   1eea8:	b	1ee60 <flatcc_builder_vector_push@@Base+0x70>
   1eeac:	andeq	r6, r2, r8, asr #24
   1eeb0:	andeq	r0, r0, fp, lsl #7
   1eeb4:	andeq	r7, r2, r4, asr r0
   1eeb8:	andeq	r7, r2, ip, lsl #3
   1eebc:			; <UNDEFINED> instruction: 0x000271b8

0001eec0 <flatcc_builder_append_vector@@Base>:
   1eec0:	push	{r4, r5, r6, r7, r8, lr}
   1eec4:	mov	r5, r1
   1eec8:	ldr	r1, [r0, #32]
   1eecc:	ldrh	r3, [r1, #14]
   1eed0:	cmp	r3, #4
   1eed4:	bne	1ef50 <flatcc_builder_append_vector@@Base+0x90>
   1eed8:	mov	r4, r0
   1eedc:	ldr	r3, [r1, #20]
   1eee0:	add	r0, r2, r3
   1eee4:	ldr	ip, [r1, #24]
   1eee8:	cmp	r3, r0
   1eeec:	movls	r3, #0
   1eef0:	movhi	r3, #1
   1eef4:	cmp	ip, r0
   1eef8:	orrcc	r3, r3, #1
   1eefc:	cmp	r3, #0
   1ef00:	bne	1ef64 <flatcc_builder_append_vector@@Base+0xa4>
   1ef04:	str	r0, [r1, #20]
   1ef08:	ldr	r3, [r4, #32]
   1ef0c:	ldr	r6, [r3, #16]
   1ef10:	mul	r6, r6, r2
   1ef14:	ldr	r7, [r4, #20]
   1ef18:	add	r1, r6, r7
   1ef1c:	str	r1, [r4, #20]
   1ef20:	ldr	r3, [r4, #24]
   1ef24:	cmp	r1, r3
   1ef28:	bcs	1ef78 <flatcc_builder_append_vector@@Base+0xb8>
   1ef2c:	ldr	r4, [r4, #16]
   1ef30:	adds	r4, r4, r7
   1ef34:	beq	1ef48 <flatcc_builder_append_vector@@Base+0x88>
   1ef38:	mov	r2, r6
   1ef3c:	mov	r1, r5
   1ef40:	mov	r0, r4
   1ef44:	bl	129b4 <memcpy@plt>
   1ef48:	mov	r0, r4
   1ef4c:	pop	{r4, r5, r6, r7, r8, pc}
   1ef50:	ldr	r3, [pc, #64]	; 1ef98 <flatcc_builder_append_vector@@Base+0xd8>
   1ef54:	ldr	r2, [pc, #64]	; 1ef9c <flatcc_builder_append_vector@@Base+0xdc>
   1ef58:	ldr	r1, [pc, #64]	; 1efa0 <flatcc_builder_append_vector@@Base+0xe0>
   1ef5c:	ldr	r0, [pc, #64]	; 1efa4 <flatcc_builder_append_vector@@Base+0xe4>
   1ef60:	bl	12a8c <__assert_fail@plt>
   1ef64:	ldr	r3, [pc, #60]	; 1efa8 <flatcc_builder_append_vector@@Base+0xe8>
   1ef68:	mov	r2, #892	; 0x37c
   1ef6c:	ldr	r1, [pc, #44]	; 1efa0 <flatcc_builder_append_vector@@Base+0xe0>
   1ef70:	ldr	r0, [pc, #52]	; 1efac <flatcc_builder_append_vector@@Base+0xec>
   1ef74:	bl	12a8c <__assert_fail@plt>
   1ef78:	mvn	r2, #3
   1ef7c:	add	r1, r1, #1
   1ef80:	mov	r0, r4
   1ef84:	bl	1da24 <main@@Base+0x2d4>
   1ef88:	cmp	r0, #0
   1ef8c:	beq	1ef2c <flatcc_builder_append_vector@@Base+0x6c>
   1ef90:	mov	r4, #0
   1ef94:	b	1ef48 <flatcc_builder_append_vector@@Base+0x88>
   1ef98:	andeq	r6, r2, r4, ror #24
   1ef9c:	muleq	r0, r3, r3
   1efa0:	andeq	r7, r2, r4, asr r0
   1efa4:	andeq	r7, r2, ip, lsl #3
   1efa8:	andeq	r6, r2, r4, lsr ip
   1efac:	andeq	r7, r2, r0, ror r1

0001efb0 <flatcc_builder_extend_offset_vector@@Base>:
   1efb0:	push	{r4, r5, r6, lr}
   1efb4:	mov	r4, r0
   1efb8:	ldr	r2, [r0, #32]
   1efbc:	ldr	r3, [r2, #20]
   1efc0:	adds	r3, r1, r3
   1efc4:	movcs	ip, #1
   1efc8:	movcc	ip, #0
   1efcc:	cmn	r3, #-1073741823	; 0xc0000001
   1efd0:	movls	r0, #0
   1efd4:	movhi	r0, #1
   1efd8:	orrs	r0, ip, r0
   1efdc:	bne	1f008 <flatcc_builder_extend_offset_vector@@Base+0x58>
   1efe0:	str	r3, [r2, #20]
   1efe4:	ldr	r5, [r4, #20]
   1efe8:	add	r1, r5, r1, lsl #2
   1efec:	str	r1, [r4, #20]
   1eff0:	ldr	r3, [r4, #24]
   1eff4:	cmp	r1, r3
   1eff8:	bcs	1f01c <flatcc_builder_extend_offset_vector@@Base+0x6c>
   1effc:	ldr	r0, [r4, #16]
   1f000:	add	r0, r0, r5
   1f004:	pop	{r4, r5, r6, pc}
   1f008:	ldr	r3, [pc, #44]	; 1f03c <flatcc_builder_extend_offset_vector@@Base+0x8c>
   1f00c:	mov	r2, #892	; 0x37c
   1f010:	ldr	r1, [pc, #40]	; 1f040 <flatcc_builder_extend_offset_vector@@Base+0x90>
   1f014:	ldr	r0, [pc, #40]	; 1f044 <flatcc_builder_extend_offset_vector@@Base+0x94>
   1f018:	bl	12a8c <__assert_fail@plt>
   1f01c:	mvn	r2, #3
   1f020:	add	r1, r1, #1
   1f024:	mov	r0, r4
   1f028:	bl	1da24 <main@@Base+0x2d4>
   1f02c:	cmp	r0, #0
   1f030:	beq	1effc <flatcc_builder_extend_offset_vector@@Base+0x4c>
   1f034:	mov	r0, #0
   1f038:	pop	{r4, r5, r6, pc}
   1f03c:	andeq	r6, r2, r4, lsr ip
   1f040:	andeq	r7, r2, r4, asr r0
   1f044:	andeq	r7, r2, r0, ror r1

0001f048 <flatcc_builder_offset_vector_push@@Base>:
   1f048:	push	{r4, r5, r6, lr}
   1f04c:	ldr	r2, [r0, #32]
   1f050:	ldrh	r3, [r2, #14]
   1f054:	cmp	r3, #5
   1f058:	bne	1f0a0 <flatcc_builder_offset_vector_push@@Base+0x58>
   1f05c:	mov	r4, r0
   1f060:	mov	r6, r1
   1f064:	ldr	r3, [r2, #20]
   1f068:	cmn	r3, #-1073741823	; 0xc0000001
   1f06c:	beq	1f0d0 <flatcc_builder_offset_vector_push@@Base+0x88>
   1f070:	add	r3, r3, #1
   1f074:	str	r3, [r2, #20]
   1f078:	ldr	r5, [r0, #20]
   1f07c:	add	r3, r5, #4
   1f080:	str	r3, [r0, #20]
   1f084:	ldr	r2, [r0, #24]
   1f088:	cmp	r3, r2
   1f08c:	bcs	1f0b4 <flatcc_builder_offset_vector_push@@Base+0x6c>
   1f090:	ldr	r3, [r4, #16]
   1f094:	adds	r0, r3, r5
   1f098:	strne	r6, [r3, r5]
   1f09c:	pop	{r4, r5, r6, pc}
   1f0a0:	ldr	r3, [pc, #48]	; 1f0d8 <flatcc_builder_offset_vector_push@@Base+0x90>
   1f0a4:	ldr	r2, [pc, #48]	; 1f0dc <flatcc_builder_offset_vector_push@@Base+0x94>
   1f0a8:	ldr	r1, [pc, #48]	; 1f0e0 <flatcc_builder_offset_vector_push@@Base+0x98>
   1f0ac:	ldr	r0, [pc, #48]	; 1f0e4 <flatcc_builder_offset_vector_push@@Base+0x9c>
   1f0b0:	bl	12a8c <__assert_fail@plt>
   1f0b4:	mvn	r2, #3
   1f0b8:	add	r1, r5, #5
   1f0bc:	bl	1da24 <main@@Base+0x2d4>
   1f0c0:	cmp	r0, #0
   1f0c4:	beq	1f090 <flatcc_builder_offset_vector_push@@Base+0x48>
   1f0c8:	mov	r0, #0
   1f0cc:	pop	{r4, r5, r6, pc}
   1f0d0:	mov	r0, #0
   1f0d4:	pop	{r4, r5, r6, pc}
   1f0d8:	andeq	r6, r2, r4, lsl #25
   1f0dc:	andeq	r0, r0, r6, lsr #7
   1f0e0:	andeq	r7, r2, r4, asr r0
   1f0e4:	strdeq	r7, [r2], -r8

0001f0e8 <flatcc_builder_append_offset_vector@@Base>:
   1f0e8:	push	{r4, r5, r6, r7, r8, lr}
   1f0ec:	mov	r6, r1
   1f0f0:	ldr	r1, [r0, #32]
   1f0f4:	ldrh	r3, [r1, #14]
   1f0f8:	cmp	r3, #5
   1f0fc:	bne	1f16c <flatcc_builder_append_offset_vector@@Base+0x84>
   1f100:	mov	r5, r0
   1f104:	ldr	r3, [r1, #20]
   1f108:	adds	r3, r2, r3
   1f10c:	movcs	ip, #1
   1f110:	movcc	ip, #0
   1f114:	cmn	r3, #-1073741823	; 0xc0000001
   1f118:	movls	r0, #0
   1f11c:	movhi	r0, #1
   1f120:	orrs	r0, ip, r0
   1f124:	bne	1f180 <flatcc_builder_append_offset_vector@@Base+0x98>
   1f128:	str	r3, [r1, #20]
   1f12c:	lsl	r4, r2, #2
   1f130:	ldr	r7, [r5, #20]
   1f134:	add	r1, r4, r7
   1f138:	str	r1, [r5, #20]
   1f13c:	ldr	r3, [r5, #24]
   1f140:	cmp	r1, r3
   1f144:	bcs	1f194 <flatcc_builder_append_offset_vector@@Base+0xac>
   1f148:	ldr	r5, [r5, #16]
   1f14c:	adds	r5, r5, r7
   1f150:	beq	1f164 <flatcc_builder_append_offset_vector@@Base+0x7c>
   1f154:	mov	r2, r4
   1f158:	mov	r1, r6
   1f15c:	mov	r0, r5
   1f160:	bl	129b4 <memcpy@plt>
   1f164:	mov	r0, r5
   1f168:	pop	{r4, r5, r6, r7, r8, pc}
   1f16c:	ldr	r3, [pc, #64]	; 1f1b4 <flatcc_builder_append_offset_vector@@Base+0xcc>
   1f170:	mov	r2, #948	; 0x3b4
   1f174:	ldr	r1, [pc, #60]	; 1f1b8 <flatcc_builder_append_offset_vector@@Base+0xd0>
   1f178:	ldr	r0, [pc, #60]	; 1f1bc <flatcc_builder_append_offset_vector@@Base+0xd4>
   1f17c:	bl	12a8c <__assert_fail@plt>
   1f180:	ldr	r3, [pc, #56]	; 1f1c0 <flatcc_builder_append_offset_vector@@Base+0xd8>
   1f184:	mov	r2, #892	; 0x37c
   1f188:	ldr	r1, [pc, #40]	; 1f1b8 <flatcc_builder_append_offset_vector@@Base+0xd0>
   1f18c:	ldr	r0, [pc, #48]	; 1f1c4 <flatcc_builder_append_offset_vector@@Base+0xdc>
   1f190:	bl	12a8c <__assert_fail@plt>
   1f194:	mvn	r2, #3
   1f198:	add	r1, r1, #1
   1f19c:	mov	r0, r5
   1f1a0:	bl	1da24 <main@@Base+0x2d4>
   1f1a4:	cmp	r0, #0
   1f1a8:	beq	1f148 <flatcc_builder_append_offset_vector@@Base+0x60>
   1f1ac:	mov	r5, #0
   1f1b0:	b	1f164 <flatcc_builder_append_offset_vector@@Base+0x7c>
   1f1b4:	andeq	r6, r2, r8, lsr #25
   1f1b8:	andeq	r7, r2, r4, asr r0
   1f1bc:	strdeq	r7, [r2], -r8
   1f1c0:	andeq	r6, r2, r4, lsr ip
   1f1c4:	andeq	r7, r2, r0, ror r1

0001f1c8 <flatcc_builder_extend_string@@Base>:
   1f1c8:	push	{r4, r5, r6, lr}
   1f1cc:	ldr	r2, [r0, #32]
   1f1d0:	ldrh	r3, [r2, #14]
   1f1d4:	cmp	r3, #6
   1f1d8:	bne	1f214 <flatcc_builder_extend_string@@Base+0x4c>
   1f1dc:	mov	r4, r0
   1f1e0:	ldr	r3, [r2, #20]
   1f1e4:	adds	r3, r1, r3
   1f1e8:	bcs	1f228 <flatcc_builder_extend_string@@Base+0x60>
   1f1ec:	str	r3, [r2, #20]
   1f1f0:	ldr	r5, [r0, #20]
   1f1f4:	add	r1, r1, r5
   1f1f8:	str	r1, [r0, #20]
   1f1fc:	ldr	r3, [r0, #24]
   1f200:	cmp	r1, r3
   1f204:	bcs	1f23c <flatcc_builder_extend_string@@Base+0x74>
   1f208:	ldr	r0, [r4, #16]
   1f20c:	add	r0, r0, r5
   1f210:	pop	{r4, r5, r6, pc}
   1f214:	ldr	r3, [pc, #60]	; 1f258 <flatcc_builder_extend_string@@Base+0x90>
   1f218:	ldr	r2, [pc, #60]	; 1f25c <flatcc_builder_extend_string@@Base+0x94>
   1f21c:	ldr	r1, [pc, #60]	; 1f260 <flatcc_builder_extend_string@@Base+0x98>
   1f220:	ldr	r0, [pc, #60]	; 1f264 <flatcc_builder_extend_string@@Base+0x9c>
   1f224:	bl	12a8c <__assert_fail@plt>
   1f228:	ldr	r3, [pc, #56]	; 1f268 <flatcc_builder_extend_string@@Base+0xa0>
   1f22c:	mov	r2, #892	; 0x37c
   1f230:	ldr	r1, [pc, #40]	; 1f260 <flatcc_builder_extend_string@@Base+0x98>
   1f234:	ldr	r0, [pc, #48]	; 1f26c <flatcc_builder_extend_string@@Base+0xa4>
   1f238:	bl	12a8c <__assert_fail@plt>
   1f23c:	mvn	r2, #3
   1f240:	add	r1, r1, #1
   1f244:	bl	1da24 <main@@Base+0x2d4>
   1f248:	cmp	r0, #0
   1f24c:	beq	1f208 <flatcc_builder_extend_string@@Base+0x40>
   1f250:	mov	r0, #0
   1f254:	pop	{r4, r5, r6, pc}
   1f258:	andeq	r6, r2, ip, asr #25
   1f25c:			; <UNDEFINED> instruction: 0x000003bd
   1f260:	andeq	r7, r2, r4, asr r0
   1f264:	andeq	r7, r2, ip, lsr #4
   1f268:	andeq	r6, r2, r4, lsr ip
   1f26c:	andeq	r7, r2, r0, ror r1

0001f270 <flatcc_builder_append_string@@Base>:
   1f270:	push	{r4, r5, r6, r7, r8, lr}
   1f274:	mov	r5, r2
   1f278:	ldr	r2, [r0, #32]
   1f27c:	ldrh	r3, [r2, #14]
   1f280:	cmp	r3, #6
   1f284:	bne	1f2dc <flatcc_builder_append_string@@Base+0x6c>
   1f288:	mov	r4, r0
   1f28c:	mov	r6, r1
   1f290:	ldr	r3, [r2, #20]
   1f294:	adds	r3, r5, r3
   1f298:	bcs	1f2f0 <flatcc_builder_append_string@@Base+0x80>
   1f29c:	str	r3, [r2, #20]
   1f2a0:	ldr	r7, [r0, #20]
   1f2a4:	add	r1, r5, r7
   1f2a8:	str	r1, [r0, #20]
   1f2ac:	ldr	r3, [r0, #24]
   1f2b0:	cmp	r1, r3
   1f2b4:	bcs	1f304 <flatcc_builder_append_string@@Base+0x94>
   1f2b8:	ldr	r4, [r4, #16]
   1f2bc:	adds	r4, r4, r7
   1f2c0:	beq	1f2d4 <flatcc_builder_append_string@@Base+0x64>
   1f2c4:	mov	r2, r5
   1f2c8:	mov	r1, r6
   1f2cc:	mov	r0, r4
   1f2d0:	bl	129b4 <memcpy@plt>
   1f2d4:	mov	r0, r4
   1f2d8:	pop	{r4, r5, r6, r7, r8, pc}
   1f2dc:	ldr	r3, [pc, #60]	; 1f320 <flatcc_builder_append_string@@Base+0xb0>
   1f2e0:	ldr	r2, [pc, #60]	; 1f324 <flatcc_builder_append_string@@Base+0xb4>
   1f2e4:	ldr	r1, [pc, #60]	; 1f328 <flatcc_builder_append_string@@Base+0xb8>
   1f2e8:	ldr	r0, [pc, #60]	; 1f32c <flatcc_builder_append_string@@Base+0xbc>
   1f2ec:	bl	12a8c <__assert_fail@plt>
   1f2f0:	ldr	r3, [pc, #56]	; 1f330 <flatcc_builder_append_string@@Base+0xc0>
   1f2f4:	mov	r2, #892	; 0x37c
   1f2f8:	ldr	r1, [pc, #40]	; 1f328 <flatcc_builder_append_string@@Base+0xb8>
   1f2fc:	ldr	r0, [pc, #48]	; 1f334 <flatcc_builder_append_string@@Base+0xc4>
   1f300:	bl	12a8c <__assert_fail@plt>
   1f304:	mvn	r2, #3
   1f308:	add	r1, r1, #1
   1f30c:	bl	1da24 <main@@Base+0x2d4>
   1f310:	cmp	r0, #0
   1f314:	beq	1f2b8 <flatcc_builder_append_string@@Base+0x48>
   1f318:	mov	r4, #0
   1f31c:	b	1f2d4 <flatcc_builder_append_string@@Base+0x64>
   1f320:	andeq	r6, r2, ip, ror #25
   1f324:	andeq	r0, r0, r6, asr #7
   1f328:	andeq	r7, r2, r4, asr r0
   1f32c:	andeq	r7, r2, ip, lsr #4
   1f330:	andeq	r6, r2, r4, lsr ip
   1f334:	andeq	r7, r2, r0, ror r1

0001f338 <flatcc_builder_append_string_str@@Base>:
   1f338:	push	{r4, r5, r6, lr}
   1f33c:	mov	r5, r0
   1f340:	mov	r4, r1
   1f344:	mov	r0, r1
   1f348:	bl	12a20 <strlen@plt>
   1f34c:	mov	r2, r0
   1f350:	mov	r1, r4
   1f354:	mov	r0, r5
   1f358:	bl	1f270 <flatcc_builder_append_string@@Base>
   1f35c:	pop	{r4, r5, r6, pc}

0001f360 <flatcc_builder_append_string_strn@@Base>:
   1f360:	push	{r4, r5, r6, lr}
   1f364:	mov	r6, r0
   1f368:	mov	r4, r1
   1f36c:	mov	r5, r2
   1f370:	mov	r1, #0
   1f374:	mov	r0, r4
   1f378:	bl	12a5c <memchr@plt>
   1f37c:	cmp	r0, #0
   1f380:	subne	r5, r0, r4
   1f384:	mov	r2, r5
   1f388:	mov	r1, r4
   1f38c:	mov	r0, r6
   1f390:	bl	1f270 <flatcc_builder_append_string@@Base>
   1f394:	pop	{r4, r5, r6, pc}

0001f398 <flatcc_builder_truncate_vector@@Base>:
   1f398:	push	{r4, lr}
   1f39c:	ldr	ip, [r0, #32]
   1f3a0:	ldrh	r3, [ip, #14]
   1f3a4:	cmp	r3, #4
   1f3a8:	bne	1f3f0 <flatcc_builder_truncate_vector@@Base+0x58>
   1f3ac:	ldr	r3, [ip, #20]
   1f3b0:	cmp	r3, r1
   1f3b4:	bcc	1f404 <flatcc_builder_truncate_vector@@Base+0x6c>
   1f3b8:	sub	r3, r3, r1
   1f3bc:	str	r3, [ip, #20]
   1f3c0:	ldr	r3, [r0, #32]
   1f3c4:	ldr	r2, [r3, #16]
   1f3c8:	mul	r2, r2, r1
   1f3cc:	ldr	r3, [r0, #20]
   1f3d0:	sub	r3, r3, r2
   1f3d4:	str	r3, [r0, #20]
   1f3d8:	ldr	r0, [r0, #16]
   1f3dc:	mov	r1, #0
   1f3e0:	add	r0, r0, r3
   1f3e4:	bl	12a44 <memset@plt>
   1f3e8:	mov	r0, #0
   1f3ec:	pop	{r4, pc}
   1f3f0:	ldr	r3, [pc, #32]	; 1f418 <flatcc_builder_truncate_vector@@Base+0x80>
   1f3f4:	ldr	r2, [pc, #32]	; 1f41c <flatcc_builder_truncate_vector@@Base+0x84>
   1f3f8:	ldr	r1, [pc, #32]	; 1f420 <flatcc_builder_truncate_vector@@Base+0x88>
   1f3fc:	ldr	r0, [pc, #32]	; 1f424 <flatcc_builder_truncate_vector@@Base+0x8c>
   1f400:	bl	12a8c <__assert_fail@plt>
   1f404:	ldr	r3, [pc, #12]	; 1f418 <flatcc_builder_truncate_vector@@Base+0x80>
   1f408:	ldr	r2, [pc, #24]	; 1f428 <flatcc_builder_truncate_vector@@Base+0x90>
   1f40c:	ldr	r1, [pc, #12]	; 1f420 <flatcc_builder_truncate_vector@@Base+0x88>
   1f410:	ldr	r0, [pc, #20]	; 1f42c <flatcc_builder_truncate_vector@@Base+0x94>
   1f414:	bl	12a8c <__assert_fail@plt>
   1f418:	andeq	r6, r2, ip, lsl #26
   1f41c:	ldrdeq	r0, [r0], -r9
   1f420:	andeq	r7, r2, r4, asr r0
   1f424:	andeq	r7, r2, ip, lsl #3
   1f428:	ldrdeq	r0, [r0], -sl
   1f42c:	andeq	r7, r2, r8, asr r2

0001f430 <flatcc_builder_truncate_offset_vector@@Base>:
   1f430:	push	{r4, lr}
   1f434:	ldr	ip, [r0, #32]
   1f438:	ldrh	r3, [ip, #14]
   1f43c:	cmp	r3, #5
   1f440:	bne	1f488 <flatcc_builder_truncate_offset_vector@@Base+0x58>
   1f444:	ldr	r3, [ip, #20]
   1f448:	cmp	r3, r1
   1f44c:	bcc	1f49c <flatcc_builder_truncate_offset_vector@@Base+0x6c>
   1f450:	sub	r3, r3, r1
   1f454:	str	r3, [ip, #20]
   1f458:	ldr	r3, [r0, #32]
   1f45c:	ldr	r2, [r3, #16]
   1f460:	mul	r2, r2, r1
   1f464:	ldr	r3, [r0, #20]
   1f468:	sub	r3, r3, r2
   1f46c:	str	r3, [r0, #20]
   1f470:	ldr	r0, [r0, #16]
   1f474:	mov	r1, #0
   1f478:	add	r0, r0, r3
   1f47c:	bl	12a44 <memset@plt>
   1f480:	mov	r0, #0
   1f484:	pop	{r4, pc}
   1f488:	ldr	r3, [pc, #32]	; 1f4b0 <flatcc_builder_truncate_offset_vector@@Base+0x80>
   1f48c:	ldr	r2, [pc, #32]	; 1f4b4 <flatcc_builder_truncate_offset_vector@@Base+0x84>
   1f490:	ldr	r1, [pc, #32]	; 1f4b8 <flatcc_builder_truncate_offset_vector@@Base+0x88>
   1f494:	ldr	r0, [pc, #32]	; 1f4bc <flatcc_builder_truncate_offset_vector@@Base+0x8c>
   1f498:	bl	12a8c <__assert_fail@plt>
   1f49c:	ldr	r3, [pc, #12]	; 1f4b0 <flatcc_builder_truncate_offset_vector@@Base+0x80>
   1f4a0:	ldr	r2, [pc, #24]	; 1f4c0 <flatcc_builder_truncate_offset_vector@@Base+0x90>
   1f4a4:	ldr	r1, [pc, #12]	; 1f4b8 <flatcc_builder_truncate_offset_vector@@Base+0x88>
   1f4a8:	ldr	r0, [pc, #20]	; 1f4c4 <flatcc_builder_truncate_offset_vector@@Base+0x94>
   1f4ac:	bl	12a8c <__assert_fail@plt>
   1f4b0:	andeq	r6, r2, ip, lsr #26
   1f4b4:	andeq	r0, r0, r2, ror #7
   1f4b8:	andeq	r7, r2, r4, asr r0
   1f4bc:	strdeq	r7, [r2], -r8
   1f4c0:	andeq	r0, r0, r3, ror #7
   1f4c4:	andeq	r7, r2, ip, ror r2

0001f4c8 <flatcc_builder_truncate_string@@Base>:
   1f4c8:	push	{r4, lr}
   1f4cc:	ldr	r2, [r0, #32]
   1f4d0:	ldrh	r3, [r2, #14]
   1f4d4:	cmp	r3, #6
   1f4d8:	bne	1f518 <flatcc_builder_truncate_string@@Base+0x50>
   1f4dc:	ldr	r3, [r2, #20]
   1f4e0:	cmp	r3, r1
   1f4e4:	bcc	1f52c <flatcc_builder_truncate_string@@Base+0x64>
   1f4e8:	sub	r3, r3, r1
   1f4ec:	str	r3, [r2, #20]
   1f4f0:	ldr	r3, [r0, #20]
   1f4f4:	sub	r3, r3, r1
   1f4f8:	str	r3, [r0, #20]
   1f4fc:	ldr	r0, [r0, #16]
   1f500:	mov	r2, r1
   1f504:	mov	r1, #0
   1f508:	add	r0, r0, r3
   1f50c:	bl	12a44 <memset@plt>
   1f510:	mov	r0, #0
   1f514:	pop	{r4, pc}
   1f518:	ldr	r3, [pc, #32]	; 1f540 <flatcc_builder_truncate_string@@Base+0x78>
   1f51c:	ldr	r2, [pc, #32]	; 1f544 <flatcc_builder_truncate_string@@Base+0x7c>
   1f520:	ldr	r1, [pc, #32]	; 1f548 <flatcc_builder_truncate_string@@Base+0x80>
   1f524:	ldr	r0, [pc, #32]	; 1f54c <flatcc_builder_truncate_string@@Base+0x84>
   1f528:	bl	12a8c <__assert_fail@plt>
   1f52c:	ldr	r3, [pc, #12]	; 1f540 <flatcc_builder_truncate_string@@Base+0x78>
   1f530:	mov	r2, #1004	; 0x3ec
   1f534:	ldr	r1, [pc, #12]	; 1f548 <flatcc_builder_truncate_string@@Base+0x80>
   1f538:	ldr	r0, [pc, #16]	; 1f550 <flatcc_builder_truncate_string@@Base+0x88>
   1f53c:	bl	12a8c <__assert_fail@plt>
   1f540:	andeq	r6, r2, r4, asr sp
   1f544:	andeq	r0, r0, fp, ror #7
   1f548:	andeq	r7, r2, r4, asr r0
   1f54c:	andeq	r7, r2, ip, lsr #4
   1f550:			; <UNDEFINED> instruction: 0x000272b8

0001f554 <flatcc_builder_start_vector@@Base>:
   1f554:	push	{r4, r5, r6, lr}
   1f558:	mov	r4, r0
   1f55c:	mov	r6, r1
   1f560:	mov	r5, r3
   1f564:	cmp	r2, #4
   1f568:	movcs	r1, r2
   1f56c:	movcc	r1, #4
   1f570:	bl	1dcc4 <flatcc_builder_default_alloc@@Base+0x22c>
   1f574:	cmp	r0, #0
   1f578:	bne	1f5d8 <flatcc_builder_start_vector@@Base+0x84>
   1f57c:	ldr	r3, [r4, #32]
   1f580:	str	r6, [r3, #16]
   1f584:	ldr	r3, [r4, #32]
   1f588:	mov	r2, #0
   1f58c:	str	r2, [r3, #20]
   1f590:	ldr	r3, [r4, #32]
   1f594:	str	r5, [r3, #24]
   1f598:	ldr	r3, [r4, #32]
   1f59c:	mov	r2, #4
   1f5a0:	strh	r2, [r3, #14]
   1f5a4:	ldr	r1, [r4, #28]
   1f5a8:	ldr	r2, [r4, #60]	; 0x3c
   1f5ac:	add	r2, r2, r1
   1f5b0:	str	r2, [r4, #16]
   1f5b4:	ldr	r3, [r4, #64]	; 0x40
   1f5b8:	sub	r3, r3, r1
   1f5bc:	cmn	r3, #4
   1f5c0:	mvnhi	r3, #3
   1f5c4:	str	r3, [r4, #24]
   1f5c8:	ldr	r3, [r4, #32]
   1f5cc:	mvn	r2, #3
   1f5d0:	str	r2, [r3, #4]
   1f5d4:	pop	{r4, r5, r6, pc}
   1f5d8:	mvn	r0, #0
   1f5dc:	pop	{r4, r5, r6, pc}

0001f5e0 <flatcc_builder_start_offset_vector@@Base>:
   1f5e0:	push	{r4, lr}
   1f5e4:	mov	r4, r0
   1f5e8:	mov	r1, #4
   1f5ec:	bl	1dcc4 <flatcc_builder_default_alloc@@Base+0x22c>
   1f5f0:	cmp	r0, #0
   1f5f4:	bne	1f650 <flatcc_builder_start_offset_vector@@Base+0x70>
   1f5f8:	ldr	r3, [r4, #32]
   1f5fc:	mov	r2, #4
   1f600:	str	r2, [r3, #16]
   1f604:	ldr	r3, [r4, #32]
   1f608:	mov	r2, #0
   1f60c:	str	r2, [r3, #20]
   1f610:	ldr	r3, [r4, #32]
   1f614:	mov	r2, #5
   1f618:	strh	r2, [r3, #14]
   1f61c:	ldr	r1, [r4, #28]
   1f620:	ldr	r2, [r4, #60]	; 0x3c
   1f624:	add	r2, r2, r1
   1f628:	str	r2, [r4, #16]
   1f62c:	ldr	r3, [r4, #64]	; 0x40
   1f630:	sub	r3, r3, r1
   1f634:	cmn	r3, #4
   1f638:	mvnhi	r3, #3
   1f63c:	str	r3, [r4, #24]
   1f640:	ldr	r3, [r4, #32]
   1f644:	mvn	r2, #3
   1f648:	str	r2, [r3, #4]
   1f64c:	pop	{r4, pc}
   1f650:	mvn	r0, #0
   1f654:	pop	{r4, pc}

0001f658 <flatcc_builder_start_string@@Base>:
   1f658:	push	{r4, lr}
   1f65c:	mov	r4, r0
   1f660:	mov	r1, #1
   1f664:	bl	1dcc4 <flatcc_builder_default_alloc@@Base+0x22c>
   1f668:	cmp	r0, #0
   1f66c:	bne	1f6c8 <flatcc_builder_start_string@@Base+0x70>
   1f670:	ldr	r3, [r4, #32]
   1f674:	mov	r2, #1
   1f678:	str	r2, [r3, #16]
   1f67c:	ldr	r3, [r4, #32]
   1f680:	mov	r2, #0
   1f684:	str	r2, [r3, #20]
   1f688:	ldr	r3, [r4, #32]
   1f68c:	mov	r2, #6
   1f690:	strh	r2, [r3, #14]
   1f694:	ldr	r1, [r4, #28]
   1f698:	ldr	r2, [r4, #60]	; 0x3c
   1f69c:	add	r2, r2, r1
   1f6a0:	str	r2, [r4, #16]
   1f6a4:	ldr	r3, [r4, #64]	; 0x40
   1f6a8:	sub	r3, r3, r1
   1f6ac:	cmn	r3, #4
   1f6b0:	mvnhi	r3, #3
   1f6b4:	str	r3, [r4, #24]
   1f6b8:	ldr	r3, [r4, #32]
   1f6bc:	mvn	r2, #3
   1f6c0:	str	r2, [r3, #4]
   1f6c4:	pop	{r4, pc}
   1f6c8:	mvn	r0, #0
   1f6cc:	pop	{r4, pc}

0001f6d0 <flatcc_builder_reserve_table@@Base>:
   1f6d0:	push	{r4, r5, r6, r7, lr}
   1f6d4:	sub	sp, sp, #12
   1f6d8:	cmp	r1, #0
   1f6dc:	blt	1f768 <flatcc_builder_reserve_table@@Base+0x98>
   1f6e0:	mov	r5, r0
   1f6e4:	ldr	r2, [r0, #32]
   1f6e8:	ldrh	r6, [r2, #28]
   1f6ec:	ldr	r3, [r2, #16]
   1f6f0:	add	r6, r3, r6, lsl #1
   1f6f4:	add	r1, r1, #2
   1f6f8:	lsl	r4, r1, #1
   1f6fc:	add	r2, r6, r4
   1f700:	ldr	r3, [r0, #56]	; 0x38
   1f704:	cmp	r2, r3
   1f708:	bhi	1f77c <flatcc_builder_reserve_table@@Base+0xac>
   1f70c:	ldr	r3, [r5, #52]	; 0x34
   1f710:	adds	r3, r3, r6
   1f714:	moveq	r3, #0
   1f718:	streq	r3, [r5, #4]
   1f71c:	mvneq	r0, #0
   1f720:	beq	1f760 <flatcc_builder_reserve_table@@Base+0x90>
   1f724:	add	r3, r3, #4
   1f728:	str	r3, [r5, #4]
   1f72c:	ldr	r3, [r5, #32]
   1f730:	ldr	r6, [r3, #20]
   1f734:	add	r2, r4, r6
   1f738:	sub	r2, r2, #3
   1f73c:	ldr	r3, [r5, #80]	; 0x50
   1f740:	cmp	r2, r3
   1f744:	bhi	1f7b4 <flatcc_builder_reserve_table@@Base+0xe4>
   1f748:	ldr	r0, [r5, #76]	; 0x4c
   1f74c:	add	r0, r0, r6
   1f750:	str	r0, [r5]
   1f754:	cmp	r0, #0
   1f758:	movne	r0, #0
   1f75c:	mvneq	r0, #0
   1f760:	add	sp, sp, #12
   1f764:	pop	{r4, r5, r6, r7, pc}
   1f768:	ldr	r3, [pc, #124]	; 1f7ec <flatcc_builder_reserve_table@@Base+0x11c>
   1f76c:	ldr	r2, [pc, #124]	; 1f7f0 <flatcc_builder_reserve_table@@Base+0x120>
   1f770:	ldr	r1, [pc, #124]	; 1f7f4 <flatcc_builder_reserve_table@@Base+0x124>
   1f774:	ldr	r0, [pc, #124]	; 1f7f8 <flatcc_builder_reserve_table@@Base+0x128>
   1f778:	bl	12a8c <__assert_fail@plt>
   1f77c:	mov	r3, #0
   1f780:	str	r3, [sp]
   1f784:	ldr	r7, [r0, #48]	; 0x30
   1f788:	mov	r3, #1
   1f78c:	add	r1, r0, #52	; 0x34
   1f790:	ldr	r0, [r0, #40]	; 0x28
   1f794:	blx	r7
   1f798:	cmp	r0, #0
   1f79c:	beq	1f70c <flatcc_builder_reserve_table@@Base+0x3c>
   1f7a0:	ldr	r3, [pc, #84]	; 1f7fc <flatcc_builder_reserve_table@@Base+0x12c>
   1f7a4:	mov	r2, #308	; 0x134
   1f7a8:	ldr	r1, [pc, #68]	; 1f7f4 <flatcc_builder_reserve_table@@Base+0x124>
   1f7ac:	ldr	r0, [pc, #76]	; 1f800 <flatcc_builder_reserve_table@@Base+0x130>
   1f7b0:	bl	12a8c <__assert_fail@plt>
   1f7b4:	mov	r3, #3
   1f7b8:	str	r3, [sp]
   1f7bc:	ldr	r4, [r5, #48]	; 0x30
   1f7c0:	mov	r3, #0
   1f7c4:	add	r1, r5, #76	; 0x4c
   1f7c8:	ldr	r0, [r5, #40]	; 0x28
   1f7cc:	blx	r4
   1f7d0:	cmp	r0, #0
   1f7d4:	beq	1f748 <flatcc_builder_reserve_table@@Base+0x78>
   1f7d8:	ldr	r3, [pc, #28]	; 1f7fc <flatcc_builder_reserve_table@@Base+0x12c>
   1f7dc:	mov	r2, #308	; 0x134
   1f7e0:	ldr	r1, [pc, #12]	; 1f7f4 <flatcc_builder_reserve_table@@Base+0x124>
   1f7e4:	ldr	r0, [pc, #20]	; 1f800 <flatcc_builder_reserve_table@@Base+0x130>
   1f7e8:	bl	12a8c <__assert_fail@plt>
   1f7ec:	andeq	r6, r2, r4, ror sp
   1f7f0:	andeq	r0, r0, r9, lsr #8
   1f7f4:	andeq	r7, r2, r4, asr r0
   1f7f8:	ldrdeq	r7, [r2], -ip
   1f7fc:	andeq	r6, r2, r0, lsr #22
   1f800:	andeq	r7, r2, r8, lsr #1

0001f804 <flatcc_builder_start_table@@Base>:
   1f804:	push	{r4, r5, r6, r7, lr}
   1f808:	sub	sp, sp, #12
   1f80c:	mov	r4, r0
   1f810:	mov	r5, r1
   1f814:	mov	r1, #4
   1f818:	bl	1dcc4 <flatcc_builder_default_alloc@@Base+0x22c>
   1f81c:	cmp	r0, #0
   1f820:	bne	1f9b0 <flatcc_builder_start_table@@Base+0x1ac>
   1f824:	ldr	r2, [r4, #32]
   1f828:	ldr	r3, [r4, #4]
   1f82c:	ldr	r1, [r4, #52]	; 0x34
   1f830:	sub	r3, r3, r1
   1f834:	str	r3, [r2, #16]
   1f838:	ldr	r2, [r4, #32]
   1f83c:	ldr	r3, [r4]
   1f840:	ldr	r1, [r4, #76]	; 0x4c
   1f844:	sub	r3, r3, r1
   1f848:	str	r3, [r2, #20]
   1f84c:	ldr	r3, [r4, #32]
   1f850:	ldr	r2, [r4, #12]
   1f854:	str	r2, [r3, #24]
   1f858:	ldr	r3, [r4, #32]
   1f85c:	ldrh	r2, [r4, #8]
   1f860:	strh	r2, [r3, #28]
   1f864:	ldr	r3, [pc, #340]	; 1f9c0 <flatcc_builder_start_table@@Base+0x1bc>
   1f868:	str	r3, [r4, #12]
   1f86c:	mov	r3, #0
   1f870:	strh	r3, [r4, #8]
   1f874:	ldr	r3, [r4, #32]
   1f878:	mov	r2, #3
   1f87c:	strh	r2, [r3, #14]
   1f880:	ldr	r2, [r4, #32]
   1f884:	ldrh	r6, [r2, #28]
   1f888:	ldr	r3, [r2, #16]
   1f88c:	add	r6, r3, r6, lsl #1
   1f890:	add	r5, r5, #2
   1f894:	lsl	r5, r5, #1
   1f898:	add	r2, r6, r5
   1f89c:	ldr	r3, [r4, #56]	; 0x38
   1f8a0:	cmp	r2, r3
   1f8a4:	bhi	1f940 <flatcc_builder_start_table@@Base+0x13c>
   1f8a8:	ldr	r3, [r4, #52]	; 0x34
   1f8ac:	adds	r3, r3, r6
   1f8b0:	moveq	r3, #0
   1f8b4:	streq	r3, [r4, #4]
   1f8b8:	mvneq	r0, #0
   1f8bc:	beq	1f938 <flatcc_builder_start_table@@Base+0x134>
   1f8c0:	add	r3, r3, #4
   1f8c4:	str	r3, [r4, #4]
   1f8c8:	ldr	r3, [r4, #32]
   1f8cc:	ldr	r6, [r3, #20]
   1f8d0:	sub	r2, r5, #3
   1f8d4:	add	r2, r2, r6
   1f8d8:	ldr	r3, [r4, #80]	; 0x50
   1f8dc:	cmp	r2, r3
   1f8e0:	bhi	1f978 <flatcc_builder_start_table@@Base+0x174>
   1f8e4:	ldr	r0, [r4, #76]	; 0x4c
   1f8e8:	add	r0, r0, r6
   1f8ec:	str	r0, [r4]
   1f8f0:	cmp	r0, #0
   1f8f4:	movne	r0, #0
   1f8f8:	mvneq	r0, #0
   1f8fc:	cmp	r0, #0
   1f900:	bne	1f9b8 <flatcc_builder_start_table@@Base+0x1b4>
   1f904:	ldr	r1, [r4, #28]
   1f908:	ldr	r2, [r4, #60]	; 0x3c
   1f90c:	add	r2, r2, r1
   1f910:	str	r2, [r4, #16]
   1f914:	ldr	r3, [r4, #64]	; 0x40
   1f918:	sub	r3, r3, r1
   1f91c:	ldr	r2, [pc, #160]	; 1f9c4 <flatcc_builder_start_table@@Base+0x1c0>
   1f920:	cmp	r3, r2
   1f924:	ldrhi	r3, [pc, #152]	; 1f9c4 <flatcc_builder_start_table@@Base+0x1c0>
   1f928:	str	r3, [r4, #24]
   1f92c:	ldr	r3, [r4, #32]
   1f930:	ldr	r2, [pc, #140]	; 1f9c4 <flatcc_builder_start_table@@Base+0x1c0>
   1f934:	str	r2, [r3, #4]
   1f938:	add	sp, sp, #12
   1f93c:	pop	{r4, r5, r6, r7, pc}
   1f940:	mov	r3, #0
   1f944:	str	r3, [sp]
   1f948:	ldr	r7, [r4, #48]	; 0x30
   1f94c:	mov	r3, #1
   1f950:	add	r1, r4, #52	; 0x34
   1f954:	ldr	r0, [r4, #40]	; 0x28
   1f958:	blx	r7
   1f95c:	cmp	r0, #0
   1f960:	beq	1f8a8 <flatcc_builder_start_table@@Base+0xa4>
   1f964:	ldr	r3, [pc, #92]	; 1f9c8 <flatcc_builder_start_table@@Base+0x1c4>
   1f968:	mov	r2, #308	; 0x134
   1f96c:	ldr	r1, [pc, #88]	; 1f9cc <flatcc_builder_start_table@@Base+0x1c8>
   1f970:	ldr	r0, [pc, #88]	; 1f9d0 <flatcc_builder_start_table@@Base+0x1cc>
   1f974:	bl	12a8c <__assert_fail@plt>
   1f978:	mov	r3, #3
   1f97c:	str	r3, [sp]
   1f980:	ldr	r5, [r4, #48]	; 0x30
   1f984:	mov	r3, #0
   1f988:	add	r1, r4, #76	; 0x4c
   1f98c:	ldr	r0, [r4, #40]	; 0x28
   1f990:	blx	r5
   1f994:	cmp	r0, #0
   1f998:	beq	1f8e4 <flatcc_builder_start_table@@Base+0xe0>
   1f99c:	ldr	r3, [pc, #36]	; 1f9c8 <flatcc_builder_start_table@@Base+0x1c4>
   1f9a0:	mov	r2, #308	; 0x134
   1f9a4:	ldr	r1, [pc, #32]	; 1f9cc <flatcc_builder_start_table@@Base+0x1c8>
   1f9a8:	ldr	r0, [pc, #32]	; 1f9d0 <flatcc_builder_start_table@@Base+0x1cc>
   1f9ac:	bl	12a8c <__assert_fail@plt>
   1f9b0:	mvn	r0, #0
   1f9b4:	b	1f938 <flatcc_builder_start_table@@Base+0x134>
   1f9b8:	mvn	r0, #0
   1f9bc:	b	1f938 <flatcc_builder_start_table@@Base+0x134>
   1f9c0:	svccs	0x00693b52
   1f9c4:	strdeq	pc, [r0], -ip
   1f9c8:	andeq	r6, r2, r0, lsr #22
   1f9cc:	andeq	r7, r2, r4, asr r0
   1f9d0:	andeq	r7, r2, r8, lsr #1

0001f9d4 <flatcc_builder_create_vtable@@Base>:
   1f9d4:	push	{r4, r5, r6, lr}
   1f9d8:	sub	sp, sp, #80	; 0x50
   1f9dc:	mov	r5, r0
   1f9e0:	mov	r3, #0
   1f9e4:	str	r3, [sp, #8]
   1f9e8:	str	r3, [sp, #12]
   1f9ec:	cmp	r2, #0
   1f9f0:	beq	1fa74 <flatcc_builder_create_vtable@@Base+0xa0>
   1f9f4:	str	r2, [sp, #8]
   1f9f8:	str	r1, [sp, #16]
   1f9fc:	str	r2, [sp, #20]
   1fa00:	mov	r3, #1
   1fa04:	str	r3, [sp, #12]
   1fa08:	ldr	r3, [r0, #152]	; 0x98
   1fa0c:	cmp	r3, #0
   1fa10:	bne	1fa8c <flatcc_builder_create_vtable@@Base+0xb8>
   1fa14:	ldr	r3, [r0, #180]	; 0xb4
   1fa18:	cmp	r3, #0
   1fa1c:	bne	1fa8c <flatcc_builder_create_vtable@@Base+0xb8>
   1fa20:	ldr	r4, [r0, #140]	; 0x8c
   1fa24:	mov	r3, r2
   1fa28:	add	r2, r2, r4
   1fa2c:	str	r2, [r0, #140]	; 0x8c
   1fa30:	cmp	r4, r2
   1fa34:	ble	1faec <flatcc_builder_create_vtable@@Base+0x118>
   1fa38:	ldr	r3, [pc, #232]	; 1fb28 <flatcc_builder_create_vtable@@Base+0x154>
   1fa3c:	ldr	r2, [pc, #232]	; 1fb2c <flatcc_builder_create_vtable@@Base+0x158>
   1fa40:	ldr	r1, [pc, #232]	; 1fb30 <flatcc_builder_create_vtable@@Base+0x15c>
   1fa44:	ldr	r0, [pc, #232]	; 1fb34 <flatcc_builder_create_vtable@@Base+0x160>
   1fa48:	bl	12a8c <__assert_fail@plt>
   1fa4c:	ldr	r3, [pc, #228]	; 1fb38 <flatcc_builder_create_vtable@@Base+0x164>
   1fa50:	ldr	r2, [pc, #228]	; 1fb3c <flatcc_builder_create_vtable@@Base+0x168>
   1fa54:	ldr	r1, [pc, #212]	; 1fb30 <flatcc_builder_create_vtable@@Base+0x15c>
   1fa58:	ldr	r0, [pc, #212]	; 1fb34 <flatcc_builder_create_vtable@@Base+0x160>
   1fa5c:	bl	12a8c <__assert_fail@plt>
   1fa60:	ldr	r3, [pc, #208]	; 1fb38 <flatcc_builder_create_vtable@@Base+0x164>
   1fa64:	ldr	r2, [pc, #212]	; 1fb40 <flatcc_builder_create_vtable@@Base+0x16c>
   1fa68:	ldr	r1, [pc, #192]	; 1fb30 <flatcc_builder_create_vtable@@Base+0x15c>
   1fa6c:	ldr	r0, [pc, #192]	; 1fb34 <flatcc_builder_create_vtable@@Base+0x160>
   1fa70:	bl	12a8c <__assert_fail@plt>
   1fa74:	ldr	r3, [r0, #152]	; 0x98
   1fa78:	cmp	r3, #0
   1fa7c:	bne	1fa4c <flatcc_builder_create_vtable@@Base+0x78>
   1fa80:	ldr	r3, [r0, #180]	; 0xb4
   1fa84:	cmp	r3, #0
   1fa88:	beq	1fadc <flatcc_builder_create_vtable@@Base+0x108>
   1fa8c:	ldr	r2, [r5, #136]	; 0x88
   1fa90:	ldr	r3, [sp, #8]
   1fa94:	sub	r4, r2, r3
   1fa98:	cmp	r2, r4
   1fa9c:	ble	1fa4c <flatcc_builder_create_vtable@@Base+0x78>
   1faa0:	str	r3, [sp]
   1faa4:	ldr	r6, [r5, #44]	; 0x2c
   1faa8:	mov	r3, r4
   1faac:	ldr	r2, [sp, #12]
   1fab0:	add	r1, sp, #16
   1fab4:	ldr	r0, [r5, #36]	; 0x24
   1fab8:	blx	r6
   1fabc:	cmp	r0, #0
   1fac0:	bne	1fa60 <flatcc_builder_create_vtable@@Base+0x8c>
   1fac4:	str	r4, [r5, #136]	; 0x88
   1fac8:	cmp	r4, #0
   1facc:	addne	r4, r4, #1
   1fad0:	mov	r0, r4
   1fad4:	add	sp, sp, #80	; 0x50
   1fad8:	pop	{r4, r5, r6, pc}
   1fadc:	ldr	r4, [r5, #140]	; 0x8c
   1fae0:	ldr	r3, [sp, #8]
   1fae4:	add	r2, r3, r4
   1fae8:	str	r2, [r5, #140]	; 0x8c
   1faec:	ldr	r0, [r5, #36]	; 0x24
   1faf0:	str	r3, [sp]
   1faf4:	ldr	r5, [r5, #44]	; 0x2c
   1faf8:	mov	r3, r4
   1fafc:	ldr	r2, [sp, #12]
   1fb00:	add	r1, sp, #16
   1fb04:	blx	r5
   1fb08:	cmp	r0, #0
   1fb0c:	addeq	r4, r4, #1
   1fb10:	beq	1fad0 <flatcc_builder_create_vtable@@Base+0xfc>
   1fb14:	ldr	r3, [pc, #12]	; 1fb28 <flatcc_builder_create_vtable@@Base+0x154>
   1fb18:	ldr	r2, [pc, #36]	; 1fb44 <flatcc_builder_create_vtable@@Base+0x170>
   1fb1c:	ldr	r1, [pc, #12]	; 1fb30 <flatcc_builder_create_vtable@@Base+0x15c>
   1fb20:	ldr	r0, [pc, #12]	; 1fb34 <flatcc_builder_create_vtable@@Base+0x160>
   1fb24:	bl	12a8c <__assert_fail@plt>
   1fb28:	andeq	r6, r2, r4, lsl #22
   1fb2c:	andeq	r0, r0, r1, lsr #5
   1fb30:	andeq	r7, r2, r4, asr r0
   1fb34:	andeq	r7, r2, r8, lsr #1
   1fb38:	andeq	r6, r2, r0, asr fp
   1fb3c:	andeq	r0, r0, r7, lsl #5
   1fb40:	andeq	r0, r0, fp, lsl #5
   1fb44:	andeq	r0, r0, r5, lsr #5

0001fb48 <flatcc_builder_create_cached_vtable@@Base>:
   1fb48:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fb4c:	sub	sp, sp, #28
   1fb50:	mov	r8, r0
   1fb54:	str	r1, [sp, #8]
   1fb58:	mov	r7, r2
   1fb5c:	mov	fp, r3
   1fb60:	ldr	r4, [r0, #116]	; 0x74
   1fb64:	cmp	r4, #0
   1fb68:	beq	1fbb0 <flatcc_builder_create_cached_vtable@@Base+0x68>
   1fb6c:	ldr	r3, [r8, #116]	; 0x74
   1fb70:	rsb	r3, r3, #32
   1fb74:	lsr	fp, fp, r3
   1fb78:	ldr	r3, [r8, #92]	; 0x5c
   1fb7c:	str	r3, [sp, #16]
   1fb80:	adds	r2, r3, fp, lsl #2
   1fb84:	str	r2, [sp, #20]
   1fb88:	beq	1fe80 <flatcc_builder_create_cached_vtable@@Base+0x338>
   1fb8c:	ldr	r5, [r3, fp, lsl #2]
   1fb90:	cmp	r5, #0
   1fb94:	beq	1fd20 <flatcc_builder_create_cached_vtable@@Base+0x1d8>
   1fb98:	ldr	sl, [r8, #100]	; 0x64
   1fb9c:	ldr	r6, [r8, #68]	; 0x44
   1fba0:	mov	r9, r2
   1fba4:	mov	r3, #0
   1fba8:	str	r3, [sp, #12]
   1fbac:	b	1fca8 <flatcc_builder_create_cached_vtable@@Base+0x160>
   1fbb0:	add	r6, r0, #92	; 0x5c
   1fbb4:	ldr	r3, [r0, #124]	; 0x7c
   1fbb8:	cmp	r3, #0
   1fbbc:	bne	1fc14 <flatcc_builder_create_cached_vtable@@Base+0xcc>
   1fbc0:	ldr	r3, [r0, #104]	; 0x68
   1fbc4:	cmp	r3, #15
   1fbc8:	bls	1fc28 <flatcc_builder_create_cached_vtable@@Base+0xe0>
   1fbcc:	ldr	r3, [r8, #100]	; 0x64
   1fbd0:	cmp	r3, #0
   1fbd4:	beq	1fea0 <flatcc_builder_create_cached_vtable@@Base+0x358>
   1fbd8:	mov	r3, #16
   1fbdc:	str	r3, [r8, #124]	; 0x7c
   1fbe0:	mov	r3, #5
   1fbe4:	str	r3, [sp]
   1fbe8:	ldr	r5, [r8, #48]	; 0x30
   1fbec:	mov	r3, #1
   1fbf0:	mov	r2, #256	; 0x100
   1fbf4:	mov	r1, r6
   1fbf8:	ldr	r0, [r8, #40]	; 0x28
   1fbfc:	blx	r5
   1fc00:	cmp	r0, #0
   1fc04:	bne	1fea0 <flatcc_builder_create_cached_vtable@@Base+0x358>
   1fc08:	ldr	r1, [r8, #96]	; 0x60
   1fc0c:	mov	r3, #256	; 0x100
   1fc10:	b	1fc68 <flatcc_builder_create_cached_vtable@@Base+0x120>
   1fc14:	ldr	r3, [pc, #652]	; 1fea8 <flatcc_builder_create_cached_vtable@@Base+0x360>
   1fc18:	ldr	r2, [pc, #652]	; 1feac <flatcc_builder_create_cached_vtable@@Base+0x364>
   1fc1c:	ldr	r1, [pc, #652]	; 1feb0 <flatcc_builder_create_cached_vtable@@Base+0x368>
   1fc20:	ldr	r0, [pc, #652]	; 1feb4 <flatcc_builder_create_cached_vtable@@Base+0x36c>
   1fc24:	bl	12a8c <__assert_fail@plt>
   1fc28:	mov	r3, #6
   1fc2c:	str	r3, [sp]
   1fc30:	ldr	r5, [r0, #48]	; 0x30
   1fc34:	mov	r3, #0
   1fc38:	mov	r2, #16
   1fc3c:	add	r1, r0, #100	; 0x64
   1fc40:	ldr	r0, [r0, #40]	; 0x28
   1fc44:	blx	r5
   1fc48:	cmp	r0, #0
   1fc4c:	beq	1fbcc <flatcc_builder_create_cached_vtable@@Base+0x84>
   1fc50:	ldr	r3, [pc, #608]	; 1feb8 <flatcc_builder_create_cached_vtable@@Base+0x370>
   1fc54:	mov	r2, #308	; 0x134
   1fc58:	ldr	r1, [pc, #592]	; 1feb0 <flatcc_builder_create_cached_vtable@@Base+0x368>
   1fc5c:	ldr	r0, [pc, #600]	; 1febc <flatcc_builder_create_cached_vtable@@Base+0x374>
   1fc60:	bl	12a8c <__assert_fail@plt>
   1fc64:	mov	r3, r2
   1fc68:	lsl	r2, r3, #1
   1fc6c:	cmp	r2, r1
   1fc70:	bls	1fc64 <flatcc_builder_create_cached_vtable@@Base+0x11c>
   1fc74:	lsr	r3, r3, #2
   1fc78:	cmp	r3, #1
   1fc7c:	bls	1fc90 <flatcc_builder_create_cached_vtable@@Base+0x148>
   1fc80:	mov	r2, #1
   1fc84:	add	r4, r4, #1
   1fc88:	cmp	r3, r2, lsl r4
   1fc8c:	bhi	1fc84 <flatcc_builder_create_cached_vtable@@Base+0x13c>
   1fc90:	str	r4, [r8, #116]	; 0x74
   1fc94:	b	1fb6c <flatcc_builder_create_cached_vtable@@Base+0x24>
   1fc98:	add	r9, r4, #12
   1fc9c:	ldr	r5, [r4, #12]
   1fca0:	cmp	r5, #0
   1fca4:	beq	1fd28 <flatcc_builder_create_cached_vtable@@Base+0x1e0>
   1fca8:	add	r4, sl, r5
   1fcac:	ldr	r3, [r4, #8]
   1fcb0:	add	r1, r6, r3
   1fcb4:	ldrh	r3, [r6, r3]
   1fcb8:	cmp	r3, r7
   1fcbc:	bne	1fc98 <flatcc_builder_create_cached_vtable@@Base+0x150>
   1fcc0:	mov	r2, r7
   1fcc4:	ldr	r0, [sp, #8]
   1fcc8:	bl	129c0 <memcmp@plt>
   1fccc:	cmp	r0, #0
   1fcd0:	bne	1fc98 <flatcc_builder_create_cached_vtable@@Base+0x150>
   1fcd4:	ldr	r2, [r4, #4]
   1fcd8:	ldr	r3, [r8, #152]	; 0x98
   1fcdc:	cmp	r2, r3
   1fce0:	addne	r9, r4, #12
   1fce4:	ldrne	r5, [r4, #12]
   1fce8:	strne	r4, [sp, #12]
   1fcec:	bne	1fca0 <flatcc_builder_create_cached_vtable@@Base+0x158>
   1fcf0:	ldr	r3, [sp, #20]
   1fcf4:	cmp	r3, r9
   1fcf8:	beq	1fd14 <flatcc_builder_create_cached_vtable@@Base+0x1cc>
   1fcfc:	ldr	r3, [r4, #12]
   1fd00:	str	r3, [r9]
   1fd04:	ldr	r2, [sp, #16]
   1fd08:	ldr	r3, [r2, fp, lsl #2]
   1fd0c:	str	r3, [r4, #12]
   1fd10:	str	r5, [r2, fp, lsl #2]
   1fd14:	ldr	r0, [r4]
   1fd18:	add	sp, sp, #28
   1fd1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fd20:	mov	r3, #0
   1fd24:	str	r3, [sp, #12]
   1fd28:	ldr	r4, [r8, #124]	; 0x7c
   1fd2c:	add	r2, r4, #16
   1fd30:	ldr	r3, [r8, #104]	; 0x68
   1fd34:	cmp	r2, r3
   1fd38:	bhi	1fda4 <flatcc_builder_create_cached_vtable@@Base+0x25c>
   1fd3c:	ldr	r5, [r8, #100]	; 0x64
   1fd40:	adds	r6, r5, r4
   1fd44:	beq	1fe88 <flatcc_builder_create_cached_vtable@@Base+0x340>
   1fd48:	ldr	r3, [r8, #124]	; 0x7c
   1fd4c:	add	r2, r3, #16
   1fd50:	str	r2, [r8, #124]	; 0x7c
   1fd54:	ldr	r2, [r8, #152]	; 0x98
   1fd58:	str	r2, [r6, #4]
   1fd5c:	ldr	r1, [sp, #16]
   1fd60:	ldr	r2, [r1, fp, lsl #2]
   1fd64:	str	r2, [r6, #12]
   1fd68:	str	r3, [r1, fp, lsl #2]
   1fd6c:	mov	r2, r7
   1fd70:	ldr	r1, [sp, #8]
   1fd74:	mov	r0, r8
   1fd78:	bl	1f9d4 <flatcc_builder_create_vtable@@Base>
   1fd7c:	str	r0, [r5, r4]
   1fd80:	cmp	r0, #0
   1fd84:	beq	1fe90 <flatcc_builder_create_cached_vtable@@Base+0x348>
   1fd88:	ldr	r3, [sp, #12]
   1fd8c:	cmp	r3, #0
   1fd90:	beq	1fddc <flatcc_builder_create_cached_vtable@@Base+0x294>
   1fd94:	ldr	r3, [r3, #8]
   1fd98:	str	r3, [r6, #8]
   1fd9c:	ldr	r0, [r5, r4]
   1fda0:	b	1fd18 <flatcc_builder_create_cached_vtable@@Base+0x1d0>
   1fda4:	mov	r3, #6
   1fda8:	str	r3, [sp]
   1fdac:	ldr	r5, [r8, #48]	; 0x30
   1fdb0:	mov	r3, #0
   1fdb4:	add	r1, r8, #100	; 0x64
   1fdb8:	ldr	r0, [r8, #40]	; 0x28
   1fdbc:	blx	r5
   1fdc0:	cmp	r0, #0
   1fdc4:	beq	1fd3c <flatcc_builder_create_cached_vtable@@Base+0x1f4>
   1fdc8:	ldr	r3, [pc, #232]	; 1feb8 <flatcc_builder_create_cached_vtable@@Base+0x370>
   1fdcc:	mov	r2, #308	; 0x134
   1fdd0:	ldr	r1, [pc, #216]	; 1feb0 <flatcc_builder_create_cached_vtable@@Base+0x368>
   1fdd4:	ldr	r0, [pc, #224]	; 1febc <flatcc_builder_create_cached_vtable@@Base+0x374>
   1fdd8:	bl	12a8c <__assert_fail@plt>
   1fddc:	ldr	r2, [r8, #172]	; 0xac
   1fde0:	cmp	r2, #0
   1fde4:	beq	1fdf8 <flatcc_builder_create_cached_vtable@@Base+0x2b0>
   1fde8:	ldr	r3, [r8, #120]	; 0x78
   1fdec:	add	r3, r7, r3
   1fdf0:	cmp	r2, r3
   1fdf4:	bcc	1fe3c <flatcc_builder_create_cached_vtable@@Base+0x2f4>
   1fdf8:	ldr	r9, [r8, #120]	; 0x78
   1fdfc:	add	r2, r9, r7
   1fe00:	ldr	r3, [r8, #72]	; 0x48
   1fe04:	cmp	r2, r3
   1fe08:	bhi	1fe48 <flatcc_builder_create_cached_vtable@@Base+0x300>
   1fe0c:	ldr	r3, [r8, #68]	; 0x44
   1fe10:	adds	r0, r3, r9
   1fe14:	beq	1fe98 <flatcc_builder_create_cached_vtable@@Base+0x350>
   1fe18:	ldr	r3, [r8, #120]	; 0x78
   1fe1c:	str	r3, [r6, #8]
   1fe20:	ldr	r3, [r8, #120]	; 0x78
   1fe24:	add	r3, r3, r7
   1fe28:	str	r3, [r8, #120]	; 0x78
   1fe2c:	mov	r2, r7
   1fe30:	ldr	r1, [sp, #8]
   1fe34:	bl	129b4 <memcpy@plt>
   1fe38:	b	1fd9c <flatcc_builder_create_cached_vtable@@Base+0x254>
   1fe3c:	mov	r0, r8
   1fe40:	bl	1e008 <flatcc_builder_flush_vtable_cache@@Base>
   1fe44:	b	1fd9c <flatcc_builder_create_cached_vtable@@Base+0x254>
   1fe48:	mov	r3, #2
   1fe4c:	str	r3, [sp]
   1fe50:	ldr	sl, [r8, #48]	; 0x30
   1fe54:	mov	r3, #0
   1fe58:	add	r1, r8, #68	; 0x44
   1fe5c:	ldr	r0, [r8, #40]	; 0x28
   1fe60:	blx	sl
   1fe64:	cmp	r0, #0
   1fe68:	beq	1fe0c <flatcc_builder_create_cached_vtable@@Base+0x2c4>
   1fe6c:	ldr	r3, [pc, #68]	; 1feb8 <flatcc_builder_create_cached_vtable@@Base+0x370>
   1fe70:	mov	r2, #308	; 0x134
   1fe74:	ldr	r1, [pc, #52]	; 1feb0 <flatcc_builder_create_cached_vtable@@Base+0x368>
   1fe78:	ldr	r0, [pc, #60]	; 1febc <flatcc_builder_create_cached_vtable@@Base+0x374>
   1fe7c:	bl	12a8c <__assert_fail@plt>
   1fe80:	mov	r0, #0
   1fe84:	b	1fd18 <flatcc_builder_create_cached_vtable@@Base+0x1d0>
   1fe88:	mov	r0, #0
   1fe8c:	b	1fd18 <flatcc_builder_create_cached_vtable@@Base+0x1d0>
   1fe90:	mov	r0, #0
   1fe94:	b	1fd18 <flatcc_builder_create_cached_vtable@@Base+0x1d0>
   1fe98:	mvn	r0, #0
   1fe9c:	b	1fd18 <flatcc_builder_create_cached_vtable@@Base+0x1d0>
   1fea0:	mov	r0, #0
   1fea4:	b	1fd18 <flatcc_builder_create_cached_vtable@@Base+0x1d0>
   1fea8:	muleq	r2, r4, sp
   1feac:	andeq	r0, r0, r6, asr r1
   1feb0:	andeq	r7, r2, r4, asr r0
   1feb4:	andeq	r7, r2, r8, ror #5
   1feb8:	andeq	r6, r2, r0, lsr #22
   1febc:	andeq	r7, r2, r8, lsr #1

0001fec0 <flatcc_builder_create_table@@Base>:
   1fec0:	push	{r4, r5, r6, r7, lr}
   1fec4:	sub	sp, sp, #92	; 0x5c
   1fec8:	ldr	r4, [sp, #116]	; 0x74
   1fecc:	ldr	ip, [sp, #120]	; 0x78
   1fed0:	cmp	r4, #0
   1fed4:	blt	20014 <flatcc_builder_create_table@@Base+0x154>
   1fed8:	mov	r5, r0
   1fedc:	tst	ip, #1
   1fee0:	beq	20028 <flatcc_builder_create_table@@Base+0x168>
   1fee4:	cmp	r3, #4
   1fee8:	movcs	r0, r3
   1feec:	movcc	r0, #4
   1fef0:	ldrh	r3, [r5, #128]	; 0x80
   1fef4:	cmp	r3, r0
   1fef8:	strhcc	r0, [r5, #128]	; 0x80
   1fefc:	ldr	lr, [r5, #136]	; 0x88
   1ff00:	sub	r7, lr, r2
   1ff04:	sub	r0, r0, #1
   1ff08:	and	r7, r7, r0
   1ff0c:	mvn	r3, #3
   1ff10:	sub	r3, r3, r2
   1ff14:	add	r3, r3, lr
   1ff18:	sub	r3, r3, r7
   1ff1c:	sub	ip, ip, #1
   1ff20:	sub	ip, r3, ip
   1ff24:	str	ip, [sp, #84]	; 0x54
   1ff28:	cmp	r4, #0
   1ff2c:	ble	1ff5c <flatcc_builder_create_table@@Base+0x9c>
   1ff30:	ldr	ip, [sp, #112]	; 0x70
   1ff34:	add	r4, ip, r4, lsl #1
   1ff38:	mvn	r6, #3
   1ff3c:	sub	r6, r6, r3
   1ff40:	ldrh	r3, [ip], #2
   1ff44:	sub	lr, r6, r3
   1ff48:	ldr	r0, [r1, r3]
   1ff4c:	add	r0, r0, lr
   1ff50:	str	r0, [r1, r3]
   1ff54:	cmp	ip, r4
   1ff58:	bne	1ff40 <flatcc_builder_create_table@@Base+0x80>
   1ff5c:	mov	r3, #4
   1ff60:	str	r3, [sp, #12]
   1ff64:	add	r0, sp, #84	; 0x54
   1ff68:	str	r0, [sp, #20]
   1ff6c:	str	r3, [sp, #24]
   1ff70:	mov	r3, #1
   1ff74:	str	r3, [sp, #16]
   1ff78:	cmp	r2, #0
   1ff7c:	beq	1ff98 <flatcc_builder_create_table@@Base+0xd8>
   1ff80:	add	r3, r2, #4
   1ff84:	str	r3, [sp, #12]
   1ff88:	str	r1, [sp, #28]
   1ff8c:	str	r2, [sp, #32]
   1ff90:	mov	r3, #2
   1ff94:	str	r3, [sp, #16]
   1ff98:	cmp	r7, #0
   1ff9c:	beq	1ffcc <flatcc_builder_create_table@@Base+0x10c>
   1ffa0:	ldr	r3, [sp, #12]
   1ffa4:	add	r3, r3, r7
   1ffa8:	str	r3, [sp, #12]
   1ffac:	ldr	r3, [sp, #16]
   1ffb0:	add	r3, r3, #1
   1ffb4:	add	r2, sp, #88	; 0x58
   1ffb8:	add	r2, r2, r3, lsl #3
   1ffbc:	ldr	r1, [pc, #160]	; 20064 <flatcc_builder_create_table@@Base+0x1a4>
   1ffc0:	str	r1, [r2, #-76]	; 0xffffffb4
   1ffc4:	str	r7, [r2, #-72]	; 0xffffffb8
   1ffc8:	str	r3, [sp, #16]
   1ffcc:	ldr	r2, [r5, #136]	; 0x88
   1ffd0:	ldr	r3, [sp, #12]
   1ffd4:	sub	r4, r2, r3
   1ffd8:	cmp	r2, r4
   1ffdc:	ble	2003c <flatcc_builder_create_table@@Base+0x17c>
   1ffe0:	str	r3, [sp]
   1ffe4:	ldr	r6, [r5, #44]	; 0x2c
   1ffe8:	mov	r3, r4
   1ffec:	ldr	r2, [sp, #16]
   1fff0:	add	r1, sp, #20
   1fff4:	ldr	r0, [r5, #36]	; 0x24
   1fff8:	blx	r6
   1fffc:	cmp	r0, #0
   20000:	bne	20050 <flatcc_builder_create_table@@Base+0x190>
   20004:	str	r4, [r5, #136]	; 0x88
   20008:	mov	r0, r4
   2000c:	add	sp, sp, #92	; 0x5c
   20010:	pop	{r4, r5, r6, r7, pc}
   20014:	ldr	r3, [pc, #76]	; 20068 <flatcc_builder_create_table@@Base+0x1a8>
   20018:	ldr	r2, [pc, #76]	; 2006c <flatcc_builder_create_table@@Base+0x1ac>
   2001c:	ldr	r1, [pc, #76]	; 20070 <flatcc_builder_create_table@@Base+0x1b0>
   20020:	ldr	r0, [pc, #76]	; 20074 <flatcc_builder_create_table@@Base+0x1b4>
   20024:	bl	12a8c <__assert_fail@plt>
   20028:	ldr	r3, [pc, #56]	; 20068 <flatcc_builder_create_table@@Base+0x1a8>
   2002c:	ldr	r2, [pc, #68]	; 20078 <flatcc_builder_create_table@@Base+0x1b8>
   20030:	ldr	r1, [pc, #56]	; 20070 <flatcc_builder_create_table@@Base+0x1b0>
   20034:	ldr	r0, [pc, #64]	; 2007c <flatcc_builder_create_table@@Base+0x1bc>
   20038:	bl	12a8c <__assert_fail@plt>
   2003c:	ldr	r3, [pc, #60]	; 20080 <flatcc_builder_create_table@@Base+0x1c0>
   20040:	ldr	r2, [pc, #60]	; 20084 <flatcc_builder_create_table@@Base+0x1c4>
   20044:	ldr	r1, [pc, #36]	; 20070 <flatcc_builder_create_table@@Base+0x1b0>
   20048:	ldr	r0, [pc, #56]	; 20088 <flatcc_builder_create_table@@Base+0x1c8>
   2004c:	bl	12a8c <__assert_fail@plt>
   20050:	ldr	r3, [pc, #40]	; 20080 <flatcc_builder_create_table@@Base+0x1c0>
   20054:	ldr	r2, [pc, #48]	; 2008c <flatcc_builder_create_table@@Base+0x1cc>
   20058:	ldr	r1, [pc, #16]	; 20070 <flatcc_builder_create_table@@Base+0x1b0>
   2005c:	ldr	r0, [pc, #36]	; 20088 <flatcc_builder_create_table@@Base+0x1c8>
   20060:	bl	12a8c <__assert_fail@plt>
   20064:	andeq	r6, r2, r4, lsl #18
   20068:	andeq	r6, r2, r0, lsr #27
   2006c:	ldrdeq	r0, [r0], -r5
   20070:	andeq	r7, r2, r4, asr r0
   20074:	strdeq	r7, [r2], -r8
   20078:	ldrdeq	r0, [r0], -fp
   2007c:	andeq	r7, r2, ip, lsl #6
   20080:	andeq	r6, r2, r0, asr fp
   20084:	andeq	r0, r0, r7, lsl #5
   20088:	andeq	r7, r2, r8, lsr #1
   2008c:	andeq	r0, r0, fp, lsl #5

00020090 <flatcc_builder_check_required_field@@Base>:
   20090:	ldr	r3, [r0, #32]
   20094:	ldrh	r3, [r3, #14]
   20098:	cmp	r3, #3
   2009c:	bne	200c8 <flatcc_builder_check_required_field@@Base+0x38>
   200a0:	ldrh	r3, [r0, #8]
   200a4:	cmp	r3, r1
   200a8:	movls	r0, #0
   200ac:	bls	200c4 <flatcc_builder_check_required_field@@Base+0x34>
   200b0:	ldr	r3, [r0, #4]
   200b4:	lsl	r1, r1, #1
   200b8:	ldrh	r0, [r3, r1]
   200bc:	adds	r0, r0, #0
   200c0:	movne	r0, #1
   200c4:	bx	lr
   200c8:	push	{r4, lr}
   200cc:	ldr	r3, [pc, #12]	; 200e0 <flatcc_builder_check_required_field@@Base+0x50>
   200d0:	ldr	r2, [pc, #12]	; 200e4 <flatcc_builder_check_required_field@@Base+0x54>
   200d4:	ldr	r1, [pc, #12]	; 200e8 <flatcc_builder_check_required_field@@Base+0x58>
   200d8:	ldr	r0, [pc, #12]	; 200ec <flatcc_builder_check_required_field@@Base+0x5c>
   200dc:	bl	12a8c <__assert_fail@plt>
   200e0:			; <UNDEFINED> instruction: 0x00026dbc
   200e4:	strdeq	r0, [r0], -r8
   200e8:	andeq	r7, r2, r4, asr r0
   200ec:	andeq	r7, r2, r8, lsl r3

000200f0 <flatcc_builder_check_union_field@@Base>:
   200f0:	ldr	r3, [r0, #32]
   200f4:	ldrh	r3, [r3, #14]
   200f8:	cmp	r3, #3
   200fc:	bne	20158 <flatcc_builder_check_union_field@@Base+0x68>
   20100:	cmp	r1, #0
   20104:	moveq	r0, #0
   20108:	beq	20180 <flatcc_builder_check_union_field@@Base+0x90>
   2010c:	ldrh	r3, [r0, #8]
   20110:	cmp	r3, r1
   20114:	movls	r0, #0
   20118:	bls	20180 <flatcc_builder_check_union_field@@Base+0x90>
   2011c:	ldr	r3, [r0, #4]
   20120:	sub	r1, r1, #-2147483647	; 0x80000001
   20124:	lsl	r1, r1, #1
   20128:	ldrh	r2, [r3, r1]
   2012c:	cmp	r2, #0
   20130:	beq	20170 <flatcc_builder_check_union_field@@Base+0x80>
   20134:	ldr	r0, [r0, #16]
   20138:	ldrb	r2, [r0, r2]
   2013c:	cmp	r2, #0
   20140:	bne	20184 <flatcc_builder_check_union_field@@Base+0x94>
   20144:	add	r1, r3, r1
   20148:	ldrh	r0, [r1, #2]
   2014c:	clz	r0, r0
   20150:	lsr	r0, r0, #5
   20154:	b	20180 <flatcc_builder_check_union_field@@Base+0x90>
   20158:	push	{r4, lr}
   2015c:	ldr	r3, [pc, #52]	; 20198 <flatcc_builder_check_union_field@@Base+0xa8>
   20160:	ldr	r2, [pc, #52]	; 2019c <flatcc_builder_check_union_field@@Base+0xac>
   20164:	ldr	r1, [pc, #52]	; 201a0 <flatcc_builder_check_union_field@@Base+0xb0>
   20168:	ldr	r0, [pc, #52]	; 201a4 <flatcc_builder_check_union_field@@Base+0xb4>
   2016c:	bl	12a8c <__assert_fail@plt>
   20170:	add	r1, r3, r1
   20174:	ldrh	r0, [r1, #2]
   20178:	clz	r0, r0
   2017c:	lsr	r0, r0, #5
   20180:	bx	lr
   20184:	add	r1, r3, r1
   20188:	ldrh	r0, [r1, #2]
   2018c:	adds	r0, r0, #0
   20190:	movne	r0, #1
   20194:	b	20180 <flatcc_builder_check_union_field@@Base+0x90>
   20198:	andeq	r6, r2, r0, ror #27
   2019c:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   201a0:	andeq	r7, r2, r4, asr r0
   201a4:	andeq	r7, r2, r8, lsl r3

000201a8 <flatcc_builder_check_required@@Base>:
   201a8:	ldr	r3, [r0, #32]
   201ac:	ldrh	r3, [r3, #14]
   201b0:	cmp	r3, #3
   201b4:	bne	20214 <flatcc_builder_check_required@@Base+0x6c>
   201b8:	ldrh	r3, [r0, #8]
   201bc:	cmp	r3, r2
   201c0:	movlt	r0, #0
   201c4:	blt	20230 <flatcc_builder_check_required@@Base+0x88>
   201c8:	cmp	r2, #0
   201cc:	ble	20234 <flatcc_builder_check_required@@Base+0x8c>
   201d0:	ldr	ip, [r0, #4]
   201d4:	ldrh	r3, [r1]
   201d8:	lsl	r3, r3, #1
   201dc:	ldrh	r3, [ip, r3]
   201e0:	cmp	r3, #0
   201e4:	beq	2023c <flatcc_builder_check_required@@Base+0x94>
   201e8:	add	r0, r1, #2
   201ec:	add	r2, r1, r2, lsl #1
   201f0:	cmp	r0, r2
   201f4:	beq	2022c <flatcc_builder_check_required@@Base+0x84>
   201f8:	ldrh	r3, [r0], #2
   201fc:	lsl	r3, r3, #1
   20200:	ldrh	r3, [ip, r3]
   20204:	cmp	r3, #0
   20208:	bne	201f0 <flatcc_builder_check_required@@Base+0x48>
   2020c:	mov	r0, #0
   20210:	b	20230 <flatcc_builder_check_required@@Base+0x88>
   20214:	push	{r4, lr}
   20218:	ldr	r3, [pc, #36]	; 20244 <flatcc_builder_check_required@@Base+0x9c>
   2021c:	ldr	r2, [pc, #36]	; 20248 <flatcc_builder_check_required@@Base+0xa0>
   20220:	ldr	r1, [pc, #36]	; 2024c <flatcc_builder_check_required@@Base+0xa4>
   20224:	ldr	r0, [pc, #36]	; 20250 <flatcc_builder_check_required@@Base+0xa8>
   20228:	bl	12a8c <__assert_fail@plt>
   2022c:	mov	r0, #1
   20230:	bx	lr
   20234:	mov	r0, #1
   20238:	b	20230 <flatcc_builder_check_required@@Base+0x88>
   2023c:	mov	r0, #0
   20240:	b	20230 <flatcc_builder_check_required@@Base+0x88>
   20244:	andeq	r6, r2, r4, lsl #28
   20248:	andeq	r0, r0, r1, lsl r5
   2024c:	andeq	r7, r2, r4, asr r0
   20250:	andeq	r7, r2, r8, lsl r3

00020254 <flatcc_builder_end_table@@Base>:
   20254:	push	{r4, r5, r6, r7, lr}
   20258:	sub	sp, sp, #20
   2025c:	ldr	r3, [r0, #32]
   20260:	ldrh	r3, [r3, #14]
   20264:	cmp	r3, #3
   20268:	bne	202d8 <flatcc_builder_end_table@@Base+0x84>
   2026c:	mov	r4, r0
   20270:	ldr	r1, [r0, #4]
   20274:	sub	r6, r1, #4
   20278:	ldrh	r5, [r0, #8]
   2027c:	add	r5, r5, #2
   20280:	lsl	r5, r5, #1
   20284:	uxth	r5, r5
   20288:	strh	r5, [r1, #-4]
   2028c:	ldr	r3, [r0, #20]
   20290:	add	r3, r3, #4
   20294:	uxth	r2, r3
   20298:	strh	r2, [r1, #-2]
   2029c:	ldr	r3, [r0, #12]
   202a0:	eor	r3, r3, r5
   202a4:	ldr	r1, [pc, #328]	; 203f4 <flatcc_builder_end_table@@Base+0x1a0>
   202a8:	mul	r3, r1, r3
   202ac:	eor	r3, r3, r2
   202b0:	mul	r3, r1, r3
   202b4:	str	r3, [r0, #12]
   202b8:	mov	r2, r5
   202bc:	mov	r1, r6
   202c0:	bl	1fb48 <flatcc_builder_create_cached_vtable@@Base>
   202c4:	subs	r7, r0, #0
   202c8:	bne	202ec <flatcc_builder_end_table@@Base+0x98>
   202cc:	mov	r0, r7
   202d0:	add	sp, sp, #20
   202d4:	pop	{r4, r5, r6, r7, pc}
   202d8:	ldr	r3, [pc, #280]	; 203f8 <flatcc_builder_end_table@@Base+0x1a4>
   202dc:	ldr	r2, [pc, #280]	; 203fc <flatcc_builder_end_table@@Base+0x1a8>
   202e0:	ldr	r1, [pc, #280]	; 20400 <flatcc_builder_end_table@@Base+0x1ac>
   202e4:	ldr	r0, [pc, #280]	; 20404 <flatcc_builder_end_table@@Base+0x1b0>
   202e8:	bl	12a8c <__assert_fail@plt>
   202ec:	mov	r2, r5
   202f0:	mov	r1, #0
   202f4:	mov	r0, r6
   202f8:	bl	12a44 <memset@plt>
   202fc:	ldr	r3, [r4, #32]
   20300:	ldr	r1, [r4, #76]	; 0x4c
   20304:	ldr	r3, [r3, #20]
   20308:	add	r1, r1, r3
   2030c:	ldrh	r3, [r4, #130]	; 0x82
   20310:	str	r7, [sp, #8]
   20314:	ldr	r2, [r4]
   20318:	sub	r2, r2, r1
   2031c:	asr	r2, r2, #1
   20320:	str	r2, [sp, #4]
   20324:	str	r1, [sp]
   20328:	ldr	r2, [r4, #20]
   2032c:	ldr	r1, [r4, #16]
   20330:	mov	r0, r4
   20334:	bl	1fec0 <flatcc_builder_create_table@@Base>
   20338:	subs	r7, r0, #0
   2033c:	beq	202cc <flatcc_builder_end_table@@Base+0x78>
   20340:	ldr	r3, [r4, #32]
   20344:	ldr	r2, [r3, #24]
   20348:	str	r2, [r4, #12]
   2034c:	ldrh	r2, [r3, #28]
   20350:	strh	r2, [r4, #8]
   20354:	ldr	r2, [r4, #52]	; 0x34
   20358:	ldr	r1, [r3, #16]
   2035c:	add	r2, r2, r1
   20360:	str	r2, [r4, #4]
   20364:	ldr	r2, [r4, #76]	; 0x4c
   20368:	ldr	r3, [r3, #20]
   2036c:	add	r3, r2, r3
   20370:	str	r3, [r4]
   20374:	ldr	r2, [r4, #20]
   20378:	mov	r1, #0
   2037c:	ldr	r0, [r4, #16]
   20380:	bl	12a44 <memset@plt>
   20384:	ldr	r2, [r4, #32]
   20388:	ldr	r3, [r2, #8]
   2038c:	str	r3, [r4, #20]
   20390:	ldr	r0, [r2]
   20394:	str	r0, [r4, #28]
   20398:	ldr	r1, [r2, #4]
   2039c:	ldr	r3, [r4, #60]	; 0x3c
   203a0:	add	r3, r3, r0
   203a4:	str	r3, [r4, #16]
   203a8:	ldr	r3, [r4, #64]	; 0x40
   203ac:	sub	r3, r3, r0
   203b0:	cmp	r3, r1
   203b4:	movcs	r3, r1
   203b8:	str	r3, [r4, #24]
   203bc:	str	r1, [r2, #4]
   203c0:	ldrh	r3, [r4, #130]	; 0x82
   203c4:	ldrh	r2, [r4, #128]	; 0x80
   203c8:	cmp	r2, r3
   203cc:	strhcc	r3, [r4, #128]	; 0x80
   203d0:	ldr	r3, [r4, #32]
   203d4:	ldrh	r2, [r3, #12]
   203d8:	strh	r2, [r4, #130]	; 0x82
   203dc:	sub	r3, r3, #36	; 0x24
   203e0:	str	r3, [r4, #32]
   203e4:	ldr	r3, [r4, #156]	; 0x9c
   203e8:	sub	r3, r3, #1
   203ec:	str	r3, [r4, #156]	; 0x9c
   203f0:	b	202cc <flatcc_builder_end_table@@Base+0x78>
   203f4:			; <UNDEFINED> instruction: 0x9e3779b1
   203f8:	andeq	r6, r2, r4, lsr #28
   203fc:	andeq	r0, r0, r5, lsr #10
   20400:	andeq	r7, r2, r4, asr r0
   20404:	andeq	r7, r2, r8, lsl r3

00020408 <flatcc_builder_create_vector@@Base>:
   20408:	push	{r4, r5, r6, lr}
   2040c:	sub	sp, sp, #88	; 0x58
   20410:	mov	r4, r0
   20414:	ldrh	r0, [sp, #104]	; 0x68
   20418:	ldr	ip, [sp, #108]	; 0x6c
   2041c:	cmp	r2, ip
   20420:	bhi	20504 <flatcc_builder_create_vector@@Base+0xfc>
   20424:	cmp	r0, #4
   20428:	movcc	r0, #4
   2042c:	ldrh	ip, [r4, #128]	; 0x80
   20430:	cmp	ip, r0
   20434:	strhcc	r0, [r4, #128]	; 0x80
   20438:	mul	r3, r3, r2
   2043c:	str	r2, [sp, #84]	; 0x54
   20440:	ldr	r2, [r4, #136]	; 0x88
   20444:	sub	ip, r2, r3
   20448:	sub	r0, r0, #1
   2044c:	and	r0, r0, ip
   20450:	mov	ip, #4
   20454:	str	ip, [sp, #12]
   20458:	add	lr, sp, #84	; 0x54
   2045c:	str	lr, [sp, #20]
   20460:	str	ip, [sp, #24]
   20464:	mov	ip, #1
   20468:	str	ip, [sp, #16]
   2046c:	cmp	r3, #0
   20470:	beq	2048c <flatcc_builder_create_vector@@Base+0x84>
   20474:	add	ip, r3, #4
   20478:	str	ip, [sp, #12]
   2047c:	str	r1, [sp, #28]
   20480:	str	r3, [sp, #32]
   20484:	mov	r3, #2
   20488:	str	r3, [sp, #16]
   2048c:	cmp	r0, #0
   20490:	beq	204c0 <flatcc_builder_create_vector@@Base+0xb8>
   20494:	ldr	r3, [sp, #12]
   20498:	add	r3, r3, r0
   2049c:	str	r3, [sp, #12]
   204a0:	ldr	r3, [sp, #16]
   204a4:	add	r3, r3, #1
   204a8:	add	r1, sp, #88	; 0x58
   204ac:	add	r1, r1, r3, lsl #3
   204b0:	ldr	ip, [pc, #136]	; 20540 <flatcc_builder_create_vector@@Base+0x138>
   204b4:	str	ip, [r1, #-76]	; 0xffffffb4
   204b8:	str	r0, [r1, #-72]	; 0xffffffb8
   204bc:	str	r3, [sp, #16]
   204c0:	ldr	r3, [sp, #12]
   204c4:	sub	r5, r2, r3
   204c8:	cmp	r2, r5
   204cc:	ble	20518 <flatcc_builder_create_vector@@Base+0x110>
   204d0:	str	r3, [sp]
   204d4:	ldr	r6, [r4, #44]	; 0x2c
   204d8:	mov	r3, r5
   204dc:	ldr	r2, [sp, #16]
   204e0:	add	r1, sp, #20
   204e4:	ldr	r0, [r4, #36]	; 0x24
   204e8:	blx	r6
   204ec:	cmp	r0, #0
   204f0:	bne	2052c <flatcc_builder_create_vector@@Base+0x124>
   204f4:	str	r5, [r4, #136]	; 0x88
   204f8:	mov	r0, r5
   204fc:	add	sp, sp, #88	; 0x58
   20500:	pop	{r4, r5, r6, pc}
   20504:	ldr	r3, [pc, #56]	; 20544 <flatcc_builder_create_vector@@Base+0x13c>
   20508:	ldr	r2, [pc, #56]	; 20548 <flatcc_builder_create_vector@@Base+0x140>
   2050c:	ldr	r1, [pc, #56]	; 2054c <flatcc_builder_create_vector@@Base+0x144>
   20510:	ldr	r0, [pc, #56]	; 20550 <flatcc_builder_create_vector@@Base+0x148>
   20514:	bl	12a8c <__assert_fail@plt>
   20518:	ldr	r3, [pc, #52]	; 20554 <flatcc_builder_create_vector@@Base+0x14c>
   2051c:	ldr	r2, [pc, #52]	; 20558 <flatcc_builder_create_vector@@Base+0x150>
   20520:	ldr	r1, [pc, #36]	; 2054c <flatcc_builder_create_vector@@Base+0x144>
   20524:	ldr	r0, [pc, #48]	; 2055c <flatcc_builder_create_vector@@Base+0x154>
   20528:	bl	12a8c <__assert_fail@plt>
   2052c:	ldr	r3, [pc, #32]	; 20554 <flatcc_builder_create_vector@@Base+0x14c>
   20530:	ldr	r2, [pc, #40]	; 20560 <flatcc_builder_create_vector@@Base+0x158>
   20534:	ldr	r1, [pc, #16]	; 2054c <flatcc_builder_create_vector@@Base+0x144>
   20538:	ldr	r0, [pc, #28]	; 2055c <flatcc_builder_create_vector@@Base+0x154>
   2053c:	bl	12a8c <__assert_fail@plt>
   20540:	andeq	r6, r2, r4, lsl #18
   20544:	andeq	r6, r2, r0, asr #28
   20548:	andeq	r0, r0, r5, asr r5
   2054c:	andeq	r7, r2, r4, asr r0
   20550:	andeq	r7, r2, r4, asr #6
   20554:	andeq	r6, r2, r0, asr fp
   20558:	andeq	r0, r0, r7, lsl #5
   2055c:	andeq	r7, r2, r8, lsr #1
   20560:	andeq	r0, r0, fp, lsl #5

00020564 <flatcc_builder_end_vector@@Base>:
   20564:	push	{r4, r5, lr}
   20568:	sub	sp, sp, #12
   2056c:	ldr	r1, [r0, #32]
   20570:	ldrh	r3, [r1, #14]
   20574:	cmp	r3, #4
   20578:	bne	205b4 <flatcc_builder_end_vector@@Base+0x50>
   2057c:	mov	r4, r0
   20580:	ldr	r3, [r1, #16]
   20584:	ldr	r2, [r1, #20]
   20588:	ldr	r1, [r1, #24]
   2058c:	str	r1, [sp, #4]
   20590:	ldrh	r1, [r0, #130]	; 0x82
   20594:	str	r1, [sp]
   20598:	ldr	r1, [r0, #16]
   2059c:	bl	20408 <flatcc_builder_create_vector@@Base>
   205a0:	subs	r5, r0, #0
   205a4:	bne	205c8 <flatcc_builder_end_vector@@Base+0x64>
   205a8:	mov	r0, r5
   205ac:	add	sp, sp, #12
   205b0:	pop	{r4, r5, pc}
   205b4:	ldr	r3, [pc, #140]	; 20648 <flatcc_builder_end_vector@@Base+0xe4>
   205b8:	ldr	r2, [pc, #140]	; 2064c <flatcc_builder_end_vector@@Base+0xe8>
   205bc:	ldr	r1, [pc, #140]	; 20650 <flatcc_builder_end_vector@@Base+0xec>
   205c0:	ldr	r0, [pc, #140]	; 20654 <flatcc_builder_end_vector@@Base+0xf0>
   205c4:	bl	12a8c <__assert_fail@plt>
   205c8:	ldr	r2, [r4, #20]
   205cc:	mov	r1, #0
   205d0:	ldr	r0, [r4, #16]
   205d4:	bl	12a44 <memset@plt>
   205d8:	ldr	r2, [r4, #32]
   205dc:	ldr	r3, [r2, #8]
   205e0:	str	r3, [r4, #20]
   205e4:	ldr	r0, [r2]
   205e8:	str	r0, [r4, #28]
   205ec:	ldr	r1, [r2, #4]
   205f0:	ldr	r3, [r4, #60]	; 0x3c
   205f4:	add	r3, r3, r0
   205f8:	str	r3, [r4, #16]
   205fc:	ldr	r3, [r4, #64]	; 0x40
   20600:	sub	r3, r3, r0
   20604:	cmp	r3, r1
   20608:	movcs	r3, r1
   2060c:	str	r3, [r4, #24]
   20610:	str	r1, [r2, #4]
   20614:	ldrh	r3, [r4, #130]	; 0x82
   20618:	ldrh	r2, [r4, #128]	; 0x80
   2061c:	cmp	r2, r3
   20620:	strhcc	r3, [r4, #128]	; 0x80
   20624:	ldr	r3, [r4, #32]
   20628:	ldrh	r2, [r3, #12]
   2062c:	strh	r2, [r4, #130]	; 0x82
   20630:	sub	r3, r3, #36	; 0x24
   20634:	str	r3, [r4, #32]
   20638:	ldr	r3, [r4, #156]	; 0x9c
   2063c:	sub	r3, r3, #1
   20640:	str	r3, [r4, #156]	; 0x9c
   20644:	b	205a8 <flatcc_builder_end_vector@@Base+0x44>
   20648:	andeq	r6, r2, r0, ror #28
   2064c:	andeq	r0, r0, r8, ror r5
   20650:	andeq	r7, r2, r4, asr r0
   20654:	andeq	r7, r2, ip, lsl #3

00020658 <flatcc_builder_vector_count@@Base>:
   20658:	ldr	r3, [r0, #32]
   2065c:	ldr	r0, [r3, #20]
   20660:	bx	lr

00020664 <flatcc_builder_vector_edit@@Base>:
   20664:	ldr	r0, [r0, #16]
   20668:	bx	lr

0002066c <flatcc_builder_create_offset_vector_direct@@Base>:
   2066c:	push	{r4, lr}
   20670:	mov	r3, #0
   20674:	bl	1de10 <flatcc_builder_default_alloc@@Base+0x378>
   20678:	pop	{r4, pc}

0002067c <flatcc_builder_end_offset_vector@@Base>:
   2067c:	push	{r4, r5, r6, lr}
   20680:	ldr	r3, [r0, #32]
   20684:	ldrh	r2, [r3, #14]
   20688:	cmp	r2, #5
   2068c:	bne	206b0 <flatcc_builder_end_offset_vector@@Base+0x34>
   20690:	mov	r4, r0
   20694:	ldr	r2, [r3, #20]
   20698:	ldr	r1, [r0, #16]
   2069c:	bl	2066c <flatcc_builder_create_offset_vector_direct@@Base>
   206a0:	subs	r5, r0, #0
   206a4:	bne	206c4 <flatcc_builder_end_offset_vector@@Base+0x48>
   206a8:	mov	r0, r5
   206ac:	pop	{r4, r5, r6, pc}
   206b0:	ldr	r3, [pc, #140]	; 20744 <flatcc_builder_end_offset_vector@@Base+0xc8>
   206b4:	ldr	r2, [pc, #140]	; 20748 <flatcc_builder_end_offset_vector@@Base+0xcc>
   206b8:	ldr	r1, [pc, #140]	; 2074c <flatcc_builder_end_offset_vector@@Base+0xd0>
   206bc:	ldr	r0, [pc, #140]	; 20750 <flatcc_builder_end_offset_vector@@Base+0xd4>
   206c0:	bl	12a8c <__assert_fail@plt>
   206c4:	ldr	r2, [r4, #20]
   206c8:	mov	r1, #0
   206cc:	ldr	r0, [r4, #16]
   206d0:	bl	12a44 <memset@plt>
   206d4:	ldr	r2, [r4, #32]
   206d8:	ldr	r3, [r2, #8]
   206dc:	str	r3, [r4, #20]
   206e0:	ldr	r0, [r2]
   206e4:	str	r0, [r4, #28]
   206e8:	ldr	r1, [r2, #4]
   206ec:	ldr	r3, [r4, #60]	; 0x3c
   206f0:	add	r3, r3, r0
   206f4:	str	r3, [r4, #16]
   206f8:	ldr	r3, [r4, #64]	; 0x40
   206fc:	sub	r3, r3, r0
   20700:	cmp	r3, r1
   20704:	movcs	r3, r1
   20708:	str	r3, [r4, #24]
   2070c:	str	r1, [r2, #4]
   20710:	ldrh	r3, [r4, #130]	; 0x82
   20714:	ldrh	r2, [r4, #128]	; 0x80
   20718:	cmp	r2, r3
   2071c:	strhcc	r3, [r4, #128]	; 0x80
   20720:	ldr	r3, [r4, #32]
   20724:	ldrh	r2, [r3, #12]
   20728:	strh	r2, [r4, #130]	; 0x82
   2072c:	sub	r3, r3, #36	; 0x24
   20730:	str	r3, [r4, #32]
   20734:	ldr	r3, [r4, #156]	; 0x9c
   20738:	sub	r3, r3, #1
   2073c:	str	r3, [r4, #156]	; 0x9c
   20740:	b	206a8 <flatcc_builder_end_offset_vector@@Base+0x2c>
   20744:	andeq	r6, r2, ip, ror lr
   20748:	andeq	r0, r0, r8, asr #11
   2074c:	andeq	r7, r2, r4, asr r0
   20750:	strdeq	r7, [r2], -r8

00020754 <flatcc_builder_create_offset_vector@@Base>:
   20754:	push	{r4, r5, r6, lr}
   20758:	mov	r4, r0
   2075c:	mov	r6, r1
   20760:	mov	r5, r2
   20764:	bl	1f5e0 <flatcc_builder_start_offset_vector@@Base>
   20768:	cmp	r0, #0
   2076c:	beq	20778 <flatcc_builder_create_offset_vector@@Base+0x24>
   20770:	mov	r0, #0
   20774:	pop	{r4, r5, r6, pc}
   20778:	mov	r1, r5
   2077c:	mov	r0, r4
   20780:	bl	1efb0 <flatcc_builder_extend_offset_vector@@Base>
   20784:	cmp	r0, #0
   20788:	beq	207a4 <flatcc_builder_create_offset_vector@@Base+0x50>
   2078c:	lsl	r2, r5, #2
   20790:	mov	r1, r6
   20794:	bl	129b4 <memcpy@plt>
   20798:	mov	r0, r4
   2079c:	bl	2067c <flatcc_builder_end_offset_vector@@Base>
   207a0:	pop	{r4, r5, r6, pc}
   207a4:	mov	r0, #0
   207a8:	pop	{r4, r5, r6, pc}

000207ac <flatcc_builder_end_offset_vector_for_unions@@Base>:
   207ac:	push	{r4, r5, r6, lr}
   207b0:	mov	r4, r0
   207b4:	ldr	r2, [r0, #32]
   207b8:	ldrh	r0, [r2, #14]
   207bc:	cmp	r0, #5
   207c0:	bne	207e8 <flatcc_builder_end_offset_vector_for_unions@@Base+0x3c>
   207c4:	mov	r3, r1
   207c8:	ldr	r2, [r2, #20]
   207cc:	ldr	r1, [r4, #16]
   207d0:	mov	r0, r4
   207d4:	bl	1de10 <flatcc_builder_default_alloc@@Base+0x378>
   207d8:	subs	r5, r0, #0
   207dc:	bne	207fc <flatcc_builder_end_offset_vector_for_unions@@Base+0x50>
   207e0:	mov	r0, r5
   207e4:	pop	{r4, r5, r6, pc}
   207e8:	ldr	r3, [pc, #140]	; 2087c <flatcc_builder_end_offset_vector_for_unions@@Base+0xd0>
   207ec:	ldr	r2, [pc, #140]	; 20880 <flatcc_builder_end_offset_vector_for_unions@@Base+0xd4>
   207f0:	ldr	r1, [pc, #140]	; 20884 <flatcc_builder_end_offset_vector_for_unions@@Base+0xd8>
   207f4:	ldr	r0, [pc, #140]	; 20888 <flatcc_builder_end_offset_vector_for_unions@@Base+0xdc>
   207f8:	bl	12a8c <__assert_fail@plt>
   207fc:	ldr	r2, [r4, #20]
   20800:	mov	r1, #0
   20804:	ldr	r0, [r4, #16]
   20808:	bl	12a44 <memset@plt>
   2080c:	ldr	r2, [r4, #32]
   20810:	ldr	r3, [r2, #8]
   20814:	str	r3, [r4, #20]
   20818:	ldr	r0, [r2]
   2081c:	str	r0, [r4, #28]
   20820:	ldr	r1, [r2, #4]
   20824:	ldr	r3, [r4, #60]	; 0x3c
   20828:	add	r3, r3, r0
   2082c:	str	r3, [r4, #16]
   20830:	ldr	r3, [r4, #64]	; 0x40
   20834:	sub	r3, r3, r0
   20838:	cmp	r3, r1
   2083c:	movcs	r3, r1
   20840:	str	r3, [r4, #24]
   20844:	str	r1, [r2, #4]
   20848:	ldrh	r3, [r4, #130]	; 0x82
   2084c:	ldrh	r2, [r4, #128]	; 0x80
   20850:	cmp	r2, r3
   20854:	strhcc	r3, [r4, #128]	; 0x80
   20858:	ldr	r3, [r4, #32]
   2085c:	ldrh	r2, [r3, #12]
   20860:	strh	r2, [r4, #130]	; 0x82
   20864:	sub	r3, r3, #36	; 0x24
   20868:	str	r3, [r4, #32]
   2086c:	ldr	r3, [r4, #156]	; 0x9c
   20870:	sub	r3, r3, #1
   20874:	str	r3, [r4, #156]	; 0x9c
   20878:	b	207e0 <flatcc_builder_end_offset_vector_for_unions@@Base+0x34>
   2087c:	andeq	r6, r2, r0, lsr #29
   20880:	ldrdeq	r0, [r0], -r5
   20884:	andeq	r7, r2, r4, asr r0
   20888:	strdeq	r7, [r2], -r8

0002088c <flatcc_builder_offset_vector_edit@@Base>:
   2088c:	ldr	r0, [r0, #16]
   20890:	bx	lr

00020894 <flatcc_builder_offset_vector_count@@Base>:
   20894:	ldr	r3, [r0, #32]
   20898:	ldr	r0, [r3, #20]
   2089c:	bx	lr

000208a0 <flatcc_builder_create_union_vector_direct@@Base>:
   208a0:	push	{r4, r5, r6, r7, lr}
   208a4:	sub	sp, sp, #12
   208a8:	mov	r4, r0
   208ac:	mov	r5, r1
   208b0:	mov	r6, r2
   208b4:	mov	r1, r3
   208b8:	mov	r3, r2
   208bc:	ldr	r2, [sp, #32]
   208c0:	mov	r0, r5
   208c4:	bl	1de10 <flatcc_builder_default_alloc@@Base+0x378>
   208c8:	subs	r7, r0, #0
   208cc:	bne	208e8 <flatcc_builder_create_union_vector_direct@@Base+0x48>
   208d0:	mov	r3, #0
   208d4:	str	r3, [r4]
   208d8:	str	r3, [r4, #4]
   208dc:	mov	r0, r4
   208e0:	add	sp, sp, #12
   208e4:	pop	{r4, r5, r6, r7, pc}
   208e8:	mvn	r3, #0
   208ec:	str	r3, [sp, #4]
   208f0:	mov	r3, #1
   208f4:	str	r3, [sp]
   208f8:	ldr	r2, [sp, #32]
   208fc:	mov	r1, r6
   20900:	mov	r0, r5
   20904:	bl	20408 <flatcc_builder_create_vector@@Base>
   20908:	cmp	r0, #0
   2090c:	moveq	r3, #0
   20910:	streq	r3, [r4]
   20914:	strne	r0, [r4]
   20918:	str	r7, [r4, #4]
   2091c:	b	208dc <flatcc_builder_create_union_vector_direct@@Base+0x3c>

00020920 <flatcc_builder_create_union_vector@@Base>:
   20920:	push	{r4, r5, r6, r7, r8, lr}
   20924:	sub	sp, sp, #16
   20928:	mov	r5, r0
   2092c:	mov	r4, r1
   20930:	mov	r7, r2
   20934:	mov	r6, r3
   20938:	mov	r0, r1
   2093c:	bl	1f5e0 <flatcc_builder_start_offset_vector@@Base>
   20940:	cmp	r0, #0
   20944:	beq	20960 <flatcc_builder_create_union_vector@@Base+0x40>
   20948:	mov	r3, #0
   2094c:	str	r3, [r5]
   20950:	str	r3, [r5, #4]
   20954:	mov	r0, r5
   20958:	add	sp, sp, #16
   2095c:	pop	{r4, r5, r6, r7, r8, pc}
   20960:	mov	r1, r6
   20964:	mov	r0, r4
   20968:	bl	1efb0 <flatcc_builder_extend_offset_vector@@Base>
   2096c:	cmp	r0, #0
   20970:	moveq	r3, #0
   20974:	streq	r3, [r5]
   20978:	streq	r3, [r5, #4]
   2097c:	beq	20954 <flatcc_builder_create_union_vector@@Base+0x34>
   20980:	ldr	r8, [r4, #20]
   20984:	add	r1, r6, r8
   20988:	str	r1, [r4, #20]
   2098c:	ldr	r3, [r4, #24]
   20990:	cmp	r1, r3
   20994:	bcs	20a78 <flatcc_builder_create_union_vector@@Base+0x158>
   20998:	ldr	r3, [r4, #16]
   2099c:	adds	r2, r3, r8
   209a0:	beq	20a90 <flatcc_builder_create_union_vector@@Base+0x170>
   209a4:	cmp	r6, #0
   209a8:	beq	209d8 <flatcc_builder_create_union_vector@@Base+0xb8>
   209ac:	mov	r1, r7
   209b0:	sub	ip, r2, #1
   209b4:	sub	r0, r3, #4
   209b8:	add	r7, r7, r6, lsl #3
   209bc:	ldrb	lr, [r1]
   209c0:	strb	lr, [ip, #1]!
   209c4:	ldr	lr, [r1, #4]
   209c8:	str	lr, [r0, #4]!
   209cc:	add	r1, r1, #8
   209d0:	cmp	r1, r7
   209d4:	bne	209bc <flatcc_builder_create_union_vector@@Base+0x9c>
   209d8:	str	r6, [sp]
   209dc:	mov	r1, r4
   209e0:	add	r0, sp, #8
   209e4:	bl	208a0 <flatcc_builder_create_union_vector_direct@@Base>
   209e8:	ldr	r7, [sp, #8]
   209ec:	ldr	r6, [sp, #12]
   209f0:	ldr	r2, [r4, #20]
   209f4:	mov	r1, #0
   209f8:	ldr	r0, [r4, #16]
   209fc:	bl	12a44 <memset@plt>
   20a00:	ldr	r2, [r4, #32]
   20a04:	ldr	r3, [r2, #8]
   20a08:	str	r3, [r4, #20]
   20a0c:	ldr	r0, [r2]
   20a10:	str	r0, [r4, #28]
   20a14:	ldr	r1, [r2, #4]
   20a18:	ldr	r3, [r4, #60]	; 0x3c
   20a1c:	add	r3, r3, r0
   20a20:	str	r3, [r4, #16]
   20a24:	ldr	r3, [r4, #64]	; 0x40
   20a28:	sub	r3, r3, r0
   20a2c:	cmp	r3, r1
   20a30:	movcs	r3, r1
   20a34:	str	r3, [r4, #24]
   20a38:	str	r1, [r2, #4]
   20a3c:	ldrh	r3, [r4, #130]	; 0x82
   20a40:	ldrh	r2, [r4, #128]	; 0x80
   20a44:	cmp	r2, r3
   20a48:	strhcc	r3, [r4, #128]	; 0x80
   20a4c:	ldr	r3, [r4, #32]
   20a50:	ldrh	r2, [r3, #12]
   20a54:	strh	r2, [r4, #130]	; 0x82
   20a58:	sub	r3, r3, #36	; 0x24
   20a5c:	str	r3, [r4, #32]
   20a60:	ldr	r3, [r4, #156]	; 0x9c
   20a64:	sub	r3, r3, #1
   20a68:	str	r3, [r4, #156]	; 0x9c
   20a6c:	str	r7, [r5]
   20a70:	str	r6, [r5, #4]
   20a74:	b	20954 <flatcc_builder_create_union_vector@@Base+0x34>
   20a78:	mvn	r2, #3
   20a7c:	add	r1, r1, #1
   20a80:	mov	r0, r4
   20a84:	bl	1da24 <main@@Base+0x2d4>
   20a88:	cmp	r0, #0
   20a8c:	beq	20998 <flatcc_builder_create_union_vector@@Base+0x78>
   20a90:	mov	r3, #0
   20a94:	str	r3, [r5]
   20a98:	str	r3, [r5, #4]
   20a9c:	b	20954 <flatcc_builder_create_union_vector@@Base+0x34>

00020aa0 <flatcc_builder_start_union_vector@@Base>:
   20aa0:	push	{r4, lr}
   20aa4:	mov	r4, r0
   20aa8:	mov	r1, #4
   20aac:	bl	1dcc4 <flatcc_builder_default_alloc@@Base+0x22c>
   20ab0:	cmp	r0, #0
   20ab4:	bne	20b10 <flatcc_builder_start_union_vector@@Base+0x70>
   20ab8:	ldr	r3, [r4, #32]
   20abc:	mov	r2, #8
   20ac0:	str	r2, [r3, #16]
   20ac4:	ldr	r3, [r4, #32]
   20ac8:	mov	r2, #0
   20acc:	str	r2, [r3, #20]
   20ad0:	ldr	r3, [r4, #32]
   20ad4:	mov	r2, #7
   20ad8:	strh	r2, [r3, #14]
   20adc:	ldr	r1, [r4, #28]
   20ae0:	ldr	r2, [r4, #60]	; 0x3c
   20ae4:	add	r2, r2, r1
   20ae8:	str	r2, [r4, #16]
   20aec:	ldr	r3, [r4, #64]	; 0x40
   20af0:	sub	r3, r3, r1
   20af4:	cmn	r3, #4
   20af8:	mvnhi	r3, #3
   20afc:	str	r3, [r4, #24]
   20b00:	ldr	r3, [r4, #32]
   20b04:	mvn	r2, #3
   20b08:	str	r2, [r3, #4]
   20b0c:	pop	{r4, pc}
   20b10:	mvn	r0, #0
   20b14:	pop	{r4, pc}

00020b18 <flatcc_builder_end_union_vector@@Base>:
   20b18:	push	{r4, r5, r6, r7, r8, lr}
   20b1c:	sub	sp, sp, #16
   20b20:	ldr	r3, [r1, #32]
   20b24:	ldrh	r2, [r3, #14]
   20b28:	cmp	r2, #7
   20b2c:	bne	20c44 <flatcc_builder_end_union_vector@@Base+0x12c>
   20b30:	mov	r6, r0
   20b34:	mov	r4, r1
   20b38:	ldr	r5, [r3, #20]
   20b3c:	ldr	r8, [r1, #20]
   20b40:	add	r1, r5, r5, lsl #2
   20b44:	add	r1, r1, r8
   20b48:	str	r1, [r4, #20]
   20b4c:	ldr	r3, [r4, #24]
   20b50:	cmp	r1, r3
   20b54:	bcs	20c58 <flatcc_builder_end_union_vector@@Base+0x140>
   20b58:	ldr	r7, [r4, #16]
   20b5c:	adds	r3, r7, r8
   20b60:	beq	20c70 <flatcc_builder_end_union_vector@@Base+0x158>
   20b64:	add	r2, r3, r5, lsl #2
   20b68:	cmp	r5, #0
   20b6c:	beq	20b9c <flatcc_builder_end_union_vector@@Base+0x84>
   20b70:	mov	r1, r7
   20b74:	sub	ip, r2, #1
   20b78:	sub	r0, r3, #4
   20b7c:	add	r7, r7, r5, lsl #3
   20b80:	ldrb	lr, [r1]
   20b84:	strb	lr, [ip, #1]!
   20b88:	ldr	lr, [r1, #4]
   20b8c:	str	lr, [r0, #4]!
   20b90:	add	r1, r1, #8
   20b94:	cmp	r1, r7
   20b98:	bne	20b80 <flatcc_builder_end_union_vector@@Base+0x68>
   20b9c:	str	r5, [sp]
   20ba0:	mov	r1, r4
   20ba4:	add	r0, sp, #8
   20ba8:	bl	208a0 <flatcc_builder_create_union_vector_direct@@Base>
   20bac:	ldr	r7, [sp, #8]
   20bb0:	ldr	r5, [sp, #12]
   20bb4:	ldr	r2, [r4, #20]
   20bb8:	mov	r1, #0
   20bbc:	ldr	r0, [r4, #16]
   20bc0:	bl	12a44 <memset@plt>
   20bc4:	ldr	r2, [r4, #32]
   20bc8:	ldr	r3, [r2, #8]
   20bcc:	str	r3, [r4, #20]
   20bd0:	ldr	r0, [r2]
   20bd4:	str	r0, [r4, #28]
   20bd8:	ldr	r1, [r2, #4]
   20bdc:	ldr	r3, [r4, #60]	; 0x3c
   20be0:	add	r3, r3, r0
   20be4:	str	r3, [r4, #16]
   20be8:	ldr	r3, [r4, #64]	; 0x40
   20bec:	sub	r3, r3, r0
   20bf0:	cmp	r3, r1
   20bf4:	movcs	r3, r1
   20bf8:	str	r3, [r4, #24]
   20bfc:	str	r1, [r2, #4]
   20c00:	ldrh	r3, [r4, #130]	; 0x82
   20c04:	ldrh	r2, [r4, #128]	; 0x80
   20c08:	cmp	r2, r3
   20c0c:	strhcc	r3, [r4, #128]	; 0x80
   20c10:	ldr	r3, [r4, #32]
   20c14:	ldrh	r2, [r3, #12]
   20c18:	strh	r2, [r4, #130]	; 0x82
   20c1c:	sub	r3, r3, #36	; 0x24
   20c20:	str	r3, [r4, #32]
   20c24:	ldr	r3, [r4, #156]	; 0x9c
   20c28:	sub	r3, r3, #1
   20c2c:	str	r3, [r4, #156]	; 0x9c
   20c30:	str	r7, [r6]
   20c34:	str	r5, [r6, #4]
   20c38:	mov	r0, r6
   20c3c:	add	sp, sp, #16
   20c40:	pop	{r4, r5, r6, r7, r8, pc}
   20c44:	ldr	r3, [pc, #52]	; 20c80 <flatcc_builder_end_union_vector@@Base+0x168>
   20c48:	ldr	r2, [pc, #52]	; 20c84 <flatcc_builder_end_union_vector@@Base+0x16c>
   20c4c:	ldr	r1, [pc, #52]	; 20c88 <flatcc_builder_end_union_vector@@Base+0x170>
   20c50:	ldr	r0, [pc, #52]	; 20c8c <flatcc_builder_end_union_vector@@Base+0x174>
   20c54:	bl	12a8c <__assert_fail@plt>
   20c58:	mvn	r2, #3
   20c5c:	add	r1, r1, #1
   20c60:	mov	r0, r4
   20c64:	bl	1da24 <main@@Base+0x2d4>
   20c68:	cmp	r0, #0
   20c6c:	beq	20b58 <flatcc_builder_end_union_vector@@Base+0x40>
   20c70:	mov	r3, #0
   20c74:	str	r3, [r6]
   20c78:	str	r3, [r6, #4]
   20c7c:	b	20c38 <flatcc_builder_end_union_vector@@Base+0x120>
   20c80:	andeq	r6, r2, ip, asr #29
   20c84:	andeq	r0, r0, r1, asr r6
   20c88:	andeq	r7, r2, r4, asr r0
   20c8c:	andeq	r7, r2, r8, asr r3

00020c90 <flatcc_builder_union_vector_edit@@Base>:
   20c90:	ldr	r0, [r0, #16]
   20c94:	bx	lr

00020c98 <flatcc_builder_union_vector_count@@Base>:
   20c98:	ldr	r3, [r0, #32]
   20c9c:	ldr	r0, [r3, #20]
   20ca0:	bx	lr

00020ca4 <flatcc_builder_extend_union_vector@@Base>:
   20ca4:	push	{r4, r5, r6, lr}
   20ca8:	mov	r4, r0
   20cac:	ldr	r2, [r0, #32]
   20cb0:	ldr	r3, [r2, #20]
   20cb4:	adds	r3, r1, r3
   20cb8:	movcs	ip, #1
   20cbc:	movcc	ip, #0
   20cc0:	cmn	r3, #-536870911	; 0xe0000001
   20cc4:	movls	r0, #0
   20cc8:	movhi	r0, #1
   20ccc:	orrs	r0, ip, r0
   20cd0:	bne	20cfc <flatcc_builder_extend_union_vector@@Base+0x58>
   20cd4:	str	r3, [r2, #20]
   20cd8:	ldr	r5, [r4, #20]
   20cdc:	add	r1, r5, r1, lsl #3
   20ce0:	str	r1, [r4, #20]
   20ce4:	ldr	r3, [r4, #24]
   20ce8:	cmp	r1, r3
   20cec:	bcs	20d10 <flatcc_builder_extend_union_vector@@Base+0x6c>
   20cf0:	ldr	r0, [r4, #16]
   20cf4:	add	r0, r0, r5
   20cf8:	pop	{r4, r5, r6, pc}
   20cfc:	ldr	r3, [pc, #44]	; 20d30 <flatcc_builder_extend_union_vector@@Base+0x8c>
   20d00:	mov	r2, #892	; 0x37c
   20d04:	ldr	r1, [pc, #40]	; 20d34 <flatcc_builder_extend_union_vector@@Base+0x90>
   20d08:	ldr	r0, [pc, #40]	; 20d38 <flatcc_builder_extend_union_vector@@Base+0x94>
   20d0c:	bl	12a8c <__assert_fail@plt>
   20d10:	mvn	r2, #3
   20d14:	add	r1, r1, #1
   20d18:	mov	r0, r4
   20d1c:	bl	1da24 <main@@Base+0x2d4>
   20d20:	cmp	r0, #0
   20d24:	beq	20cf0 <flatcc_builder_extend_union_vector@@Base+0x4c>
   20d28:	mov	r0, #0
   20d2c:	pop	{r4, r5, r6, pc}
   20d30:	andeq	r6, r2, r4, lsr ip
   20d34:	andeq	r7, r2, r4, asr r0
   20d38:	andeq	r7, r2, r0, ror r1

00020d3c <flatcc_builder_truncate_union_vector@@Base>:
   20d3c:	push	{r4, lr}
   20d40:	ldr	ip, [r0, #32]
   20d44:	ldrh	r3, [ip, #14]
   20d48:	cmp	r3, #7
   20d4c:	bne	20d94 <flatcc_builder_truncate_union_vector@@Base+0x58>
   20d50:	ldr	r3, [ip, #20]
   20d54:	cmp	r3, r1
   20d58:	bcc	20da8 <flatcc_builder_truncate_union_vector@@Base+0x6c>
   20d5c:	sub	r3, r3, r1
   20d60:	str	r3, [ip, #20]
   20d64:	ldr	r3, [r0, #32]
   20d68:	ldr	r2, [r3, #16]
   20d6c:	mul	r2, r2, r1
   20d70:	ldr	r3, [r0, #20]
   20d74:	sub	r3, r3, r2
   20d78:	str	r3, [r0, #20]
   20d7c:	ldr	r0, [r0, #16]
   20d80:	mov	r1, #0
   20d84:	add	r0, r0, r3
   20d88:	bl	12a44 <memset@plt>
   20d8c:	mov	r0, #0
   20d90:	pop	{r4, pc}
   20d94:	ldr	r3, [pc, #32]	; 20dbc <flatcc_builder_truncate_union_vector@@Base+0x80>
   20d98:	ldr	r2, [pc, #32]	; 20dc0 <flatcc_builder_truncate_union_vector@@Base+0x84>
   20d9c:	ldr	r1, [pc, #32]	; 20dc4 <flatcc_builder_truncate_union_vector@@Base+0x88>
   20da0:	ldr	r0, [pc, #32]	; 20dc8 <flatcc_builder_truncate_union_vector@@Base+0x8c>
   20da4:	bl	12a8c <__assert_fail@plt>
   20da8:	ldr	r3, [pc, #12]	; 20dbc <flatcc_builder_truncate_union_vector@@Base+0x80>
   20dac:	ldr	r2, [pc, #24]	; 20dcc <flatcc_builder_truncate_union_vector@@Base+0x90>
   20db0:	ldr	r1, [pc, #12]	; 20dc4 <flatcc_builder_truncate_union_vector@@Base+0x88>
   20db4:	ldr	r0, [pc, #20]	; 20dd0 <flatcc_builder_truncate_union_vector@@Base+0x94>
   20db8:	bl	12a8c <__assert_fail@plt>
   20dbc:	andeq	r6, r2, ip, ror #29
   20dc0:	andeq	r0, r0, r1, lsl #13
   20dc4:	andeq	r7, r2, r4, asr r0
   20dc8:	andeq	r7, r2, r8, asr r3
   20dcc:	andeq	r0, r0, r2, lsl #13
   20dd0:	andeq	r7, r2, ip, ror r2

00020dd4 <flatcc_builder_union_vector_push@@Base>:
   20dd4:	push	{r4, r5, lr}
   20dd8:	sub	sp, sp, #12
   20ddc:	add	r3, sp, #8
   20de0:	stmdb	r3, {r1, r2}
   20de4:	ldr	r2, [r0, #32]
   20de8:	ldrh	r3, [r2, #14]
   20dec:	cmp	r3, #7
   20df0:	bne	20e48 <flatcc_builder_union_vector_push@@Base+0x74>
   20df4:	mov	r4, r0
   20df8:	ldr	r3, [r2, #20]
   20dfc:	cmn	r3, #-536870911	; 0xe0000001
   20e00:	beq	20e78 <flatcc_builder_union_vector_push@@Base+0xa4>
   20e04:	add	r3, r3, #1
   20e08:	str	r3, [r2, #20]
   20e0c:	ldr	r5, [r0, #20]
   20e10:	add	r3, r5, #8
   20e14:	str	r3, [r0, #20]
   20e18:	ldr	r2, [r0, #24]
   20e1c:	cmp	r3, r2
   20e20:	bcs	20e5c <flatcc_builder_union_vector_push@@Base+0x88>
   20e24:	ldr	r3, [r4, #16]
   20e28:	adds	r3, r3, r5
   20e2c:	moveq	r0, r3
   20e30:	addne	r2, sp, #8
   20e34:	ldmdbne	r2, {r0, r1}
   20e38:	stmne	r3, {r0, r1}
   20e3c:	movne	r0, r3
   20e40:	add	sp, sp, #12
   20e44:	pop	{r4, r5, pc}
   20e48:	ldr	r3, [pc, #48]	; 20e80 <flatcc_builder_union_vector_push@@Base+0xac>
   20e4c:	ldr	r2, [pc, #48]	; 20e84 <flatcc_builder_union_vector_push@@Base+0xb0>
   20e50:	ldr	r1, [pc, #48]	; 20e88 <flatcc_builder_union_vector_push@@Base+0xb4>
   20e54:	ldr	r0, [pc, #48]	; 20e8c <flatcc_builder_union_vector_push@@Base+0xb8>
   20e58:	bl	12a8c <__assert_fail@plt>
   20e5c:	mvn	r2, #3
   20e60:	add	r1, r5, #9
   20e64:	bl	1da24 <main@@Base+0x2d4>
   20e68:	cmp	r0, #0
   20e6c:	beq	20e24 <flatcc_builder_union_vector_push@@Base+0x50>
   20e70:	mov	r0, #0
   20e74:	b	20e40 <flatcc_builder_union_vector_push@@Base+0x6c>
   20e78:	mov	r0, #0
   20e7c:	b	20e40 <flatcc_builder_union_vector_push@@Base+0x6c>
   20e80:	andeq	r6, r2, r4, lsl pc
   20e84:	andeq	r0, r0, sp, lsl #13
   20e88:	andeq	r7, r2, r4, asr r0
   20e8c:	andeq	r7, r2, r8, asr r3

00020e90 <flatcc_builder_append_union_vector@@Base>:
   20e90:	push	{r4, r5, r6, r7, r8, lr}
   20e94:	mov	r6, r1
   20e98:	ldr	r1, [r0, #32]
   20e9c:	ldrh	r3, [r1, #14]
   20ea0:	cmp	r3, #7
   20ea4:	bne	20f14 <flatcc_builder_append_union_vector@@Base+0x84>
   20ea8:	mov	r5, r0
   20eac:	ldr	r3, [r1, #20]
   20eb0:	adds	r3, r2, r3
   20eb4:	movcs	ip, #1
   20eb8:	movcc	ip, #0
   20ebc:	cmn	r3, #-536870911	; 0xe0000001
   20ec0:	movls	r0, #0
   20ec4:	movhi	r0, #1
   20ec8:	orrs	r0, ip, r0
   20ecc:	bne	20f28 <flatcc_builder_append_union_vector@@Base+0x98>
   20ed0:	str	r3, [r1, #20]
   20ed4:	lsl	r4, r2, #3
   20ed8:	ldr	r7, [r5, #20]
   20edc:	add	r1, r4, r7
   20ee0:	str	r1, [r5, #20]
   20ee4:	ldr	r3, [r5, #24]
   20ee8:	cmp	r1, r3
   20eec:	bcs	20f3c <flatcc_builder_append_union_vector@@Base+0xac>
   20ef0:	ldr	r5, [r5, #16]
   20ef4:	adds	r5, r5, r7
   20ef8:	beq	20f0c <flatcc_builder_append_union_vector@@Base+0x7c>
   20efc:	mov	r2, r4
   20f00:	mov	r1, r6
   20f04:	mov	r0, r5
   20f08:	bl	129b4 <memcpy@plt>
   20f0c:	mov	r0, r5
   20f10:	pop	{r4, r5, r6, r7, r8, pc}
   20f14:	ldr	r3, [pc, #64]	; 20f5c <flatcc_builder_append_union_vector@@Base+0xcc>
   20f18:	ldr	r2, [pc, #64]	; 20f60 <flatcc_builder_append_union_vector@@Base+0xd0>
   20f1c:	ldr	r1, [pc, #64]	; 20f64 <flatcc_builder_append_union_vector@@Base+0xd4>
   20f20:	ldr	r0, [pc, #64]	; 20f68 <flatcc_builder_append_union_vector@@Base+0xd8>
   20f24:	bl	12a8c <__assert_fail@plt>
   20f28:	ldr	r3, [pc, #60]	; 20f6c <flatcc_builder_append_union_vector@@Base+0xdc>
   20f2c:	mov	r2, #892	; 0x37c
   20f30:	ldr	r1, [pc, #44]	; 20f64 <flatcc_builder_append_union_vector@@Base+0xd4>
   20f34:	ldr	r0, [pc, #52]	; 20f70 <flatcc_builder_append_union_vector@@Base+0xe0>
   20f38:	bl	12a8c <__assert_fail@plt>
   20f3c:	mvn	r2, #3
   20f40:	add	r1, r1, #1
   20f44:	mov	r0, r5
   20f48:	bl	1da24 <main@@Base+0x2d4>
   20f4c:	cmp	r0, #0
   20f50:	beq	20ef0 <flatcc_builder_append_union_vector@@Base+0x60>
   20f54:	mov	r5, #0
   20f58:	b	20f0c <flatcc_builder_append_union_vector@@Base+0x7c>
   20f5c:	andeq	r6, r2, r8, lsr pc
   20f60:	muleq	r0, ip, r6
   20f64:	andeq	r7, r2, r4, asr r0
   20f68:	andeq	r7, r2, r8, asr r3
   20f6c:	andeq	r6, r2, r4, lsr ip
   20f70:	andeq	r7, r2, r0, ror r1

00020f74 <flatcc_builder_create_string@@Base>:
   20f74:	push	{r4, r5, r6, lr}
   20f78:	sub	sp, sp, #88	; 0x58
   20f7c:	mov	r5, r0
   20f80:	str	r2, [sp, #84]	; 0x54
   20f84:	ldr	r0, [r0, #136]	; 0x88
   20f88:	sub	r3, r0, r2
   20f8c:	sub	r3, r3, #1
   20f90:	and	r3, r3, #3
   20f94:	add	r3, r3, #1
   20f98:	mov	ip, #4
   20f9c:	str	ip, [sp, #12]
   20fa0:	add	lr, sp, #84	; 0x54
   20fa4:	str	lr, [sp, #20]
   20fa8:	str	ip, [sp, #24]
   20fac:	mov	ip, #1
   20fb0:	str	ip, [sp, #16]
   20fb4:	cmp	r2, #0
   20fb8:	beq	20fd4 <flatcc_builder_create_string@@Base+0x60>
   20fbc:	add	ip, r2, #4
   20fc0:	str	ip, [sp, #12]
   20fc4:	str	r1, [sp, #28]
   20fc8:	str	r2, [sp, #32]
   20fcc:	mov	r2, #2
   20fd0:	str	r2, [sp, #16]
   20fd4:	cmp	r3, #0
   20fd8:	beq	21008 <flatcc_builder_create_string@@Base+0x94>
   20fdc:	ldr	r2, [sp, #12]
   20fe0:	add	r2, r2, r3
   20fe4:	str	r2, [sp, #12]
   20fe8:	ldr	r2, [sp, #16]
   20fec:	add	r2, r2, #1
   20ff0:	add	r1, sp, #88	; 0x58
   20ff4:	add	r1, r1, r2, lsl #3
   20ff8:	ldr	ip, [pc, #116]	; 21074 <flatcc_builder_create_string@@Base+0x100>
   20ffc:	str	ip, [r1, #-76]	; 0xffffffb4
   21000:	str	r3, [r1, #-72]	; 0xffffffb8
   21004:	str	r2, [sp, #16]
   21008:	ldr	r3, [sp, #12]
   2100c:	sub	r4, r0, r3
   21010:	cmp	r0, r4
   21014:	ble	2104c <flatcc_builder_create_string@@Base+0xd8>
   21018:	str	r3, [sp]
   2101c:	ldr	r6, [r5, #44]	; 0x2c
   21020:	mov	r3, r4
   21024:	ldr	r2, [sp, #16]
   21028:	add	r1, sp, #20
   2102c:	ldr	r0, [r5, #36]	; 0x24
   21030:	blx	r6
   21034:	cmp	r0, #0
   21038:	bne	21060 <flatcc_builder_create_string@@Base+0xec>
   2103c:	str	r4, [r5, #136]	; 0x88
   21040:	mov	r0, r4
   21044:	add	sp, sp, #88	; 0x58
   21048:	pop	{r4, r5, r6, pc}
   2104c:	ldr	r3, [pc, #36]	; 21078 <flatcc_builder_create_string@@Base+0x104>
   21050:	ldr	r2, [pc, #36]	; 2107c <flatcc_builder_create_string@@Base+0x108>
   21054:	ldr	r1, [pc, #36]	; 21080 <flatcc_builder_create_string@@Base+0x10c>
   21058:	ldr	r0, [pc, #36]	; 21084 <flatcc_builder_create_string@@Base+0x110>
   2105c:	bl	12a8c <__assert_fail@plt>
   21060:	ldr	r3, [pc, #16]	; 21078 <flatcc_builder_create_string@@Base+0x104>
   21064:	ldr	r2, [pc, #28]	; 21088 <flatcc_builder_create_string@@Base+0x114>
   21068:	ldr	r1, [pc, #16]	; 21080 <flatcc_builder_create_string@@Base+0x10c>
   2106c:	ldr	r0, [pc, #16]	; 21084 <flatcc_builder_create_string@@Base+0x110>
   21070:	bl	12a8c <__assert_fail@plt>
   21074:	andeq	r6, r2, r4, lsl #18
   21078:	andeq	r6, r2, r0, asr fp
   2107c:	andeq	r0, r0, r7, lsl #5
   21080:	andeq	r7, r2, r4, asr r0
   21084:	andeq	r7, r2, r8, lsr #1
   21088:	andeq	r0, r0, fp, lsl #5

0002108c <flatcc_builder_create_string_str@@Base>:
   2108c:	push	{r4, r5, r6, lr}
   21090:	mov	r5, r0
   21094:	mov	r4, r1
   21098:	mov	r0, r1
   2109c:	bl	12a20 <strlen@plt>
   210a0:	mov	r2, r0
   210a4:	mov	r1, r4
   210a8:	mov	r0, r5
   210ac:	bl	20f74 <flatcc_builder_create_string@@Base>
   210b0:	pop	{r4, r5, r6, pc}

000210b4 <flatcc_builder_create_string_strn@@Base>:
   210b4:	push	{r4, r5, r6, lr}
   210b8:	mov	r6, r0
   210bc:	mov	r4, r1
   210c0:	mov	r5, r2
   210c4:	mov	r1, #0
   210c8:	mov	r0, r4
   210cc:	bl	12a5c <memchr@plt>
   210d0:	cmp	r0, #0
   210d4:	subne	r5, r0, r4
   210d8:	mov	r2, r5
   210dc:	mov	r1, r4
   210e0:	mov	r0, r6
   210e4:	bl	20f74 <flatcc_builder_create_string@@Base>
   210e8:	pop	{r4, r5, r6, pc}

000210ec <flatcc_builder_end_string@@Base>:
   210ec:	push	{r4, r5, r6, lr}
   210f0:	ldr	r3, [r0, #32]
   210f4:	ldrh	r2, [r3, #14]
   210f8:	cmp	r2, #6
   210fc:	bne	2112c <flatcc_builder_end_string@@Base+0x40>
   21100:	mov	r4, r0
   21104:	ldr	r2, [r3, #20]
   21108:	ldr	r3, [r0, #20]
   2110c:	cmp	r2, r3
   21110:	bne	21140 <flatcc_builder_end_string@@Base+0x54>
   21114:	ldr	r1, [r0, #16]
   21118:	bl	20f74 <flatcc_builder_create_string@@Base>
   2111c:	subs	r5, r0, #0
   21120:	bne	21154 <flatcc_builder_end_string@@Base+0x68>
   21124:	mov	r0, r5
   21128:	pop	{r4, r5, r6, pc}
   2112c:	ldr	r3, [pc, #160]	; 211d4 <flatcc_builder_end_string@@Base+0xe8>
   21130:	ldr	r2, [pc, #160]	; 211d8 <flatcc_builder_end_string@@Base+0xec>
   21134:	ldr	r1, [pc, #160]	; 211dc <flatcc_builder_end_string@@Base+0xf0>
   21138:	ldr	r0, [pc, #160]	; 211e0 <flatcc_builder_end_string@@Base+0xf4>
   2113c:	bl	12a8c <__assert_fail@plt>
   21140:	ldr	r3, [pc, #140]	; 211d4 <flatcc_builder_end_string@@Base+0xe8>
   21144:	ldr	r2, [pc, #152]	; 211e4 <flatcc_builder_end_string@@Base+0xf8>
   21148:	ldr	r1, [pc, #140]	; 211dc <flatcc_builder_end_string@@Base+0xf0>
   2114c:	ldr	r0, [pc, #148]	; 211e8 <flatcc_builder_end_string@@Base+0xfc>
   21150:	bl	12a8c <__assert_fail@plt>
   21154:	ldr	r2, [r4, #20]
   21158:	mov	r1, #0
   2115c:	ldr	r0, [r4, #16]
   21160:	bl	12a44 <memset@plt>
   21164:	ldr	r2, [r4, #32]
   21168:	ldr	r3, [r2, #8]
   2116c:	str	r3, [r4, #20]
   21170:	ldr	r0, [r2]
   21174:	str	r0, [r4, #28]
   21178:	ldr	r1, [r2, #4]
   2117c:	ldr	r3, [r4, #60]	; 0x3c
   21180:	add	r3, r3, r0
   21184:	str	r3, [r4, #16]
   21188:	ldr	r3, [r4, #64]	; 0x40
   2118c:	sub	r3, r3, r0
   21190:	cmp	r3, r1
   21194:	movcs	r3, r1
   21198:	str	r3, [r4, #24]
   2119c:	str	r1, [r2, #4]
   211a0:	ldrh	r3, [r4, #130]	; 0x82
   211a4:	ldrh	r2, [r4, #128]	; 0x80
   211a8:	cmp	r2, r3
   211ac:	strhcc	r3, [r4, #128]	; 0x80
   211b0:	ldr	r3, [r4, #32]
   211b4:	ldrh	r2, [r3, #12]
   211b8:	strh	r2, [r4, #130]	; 0x82
   211bc:	sub	r3, r3, #36	; 0x24
   211c0:	str	r3, [r4, #32]
   211c4:	ldr	r3, [r4, #156]	; 0x9c
   211c8:	sub	r3, r3, #1
   211cc:	str	r3, [r4, #156]	; 0x9c
   211d0:	b	21124 <flatcc_builder_end_string@@Base+0x38>
   211d4:	andeq	r6, r2, ip, asr pc
   211d8:	andeq	r0, r0, r4, asr #13
   211dc:	andeq	r7, r2, r4, asr r0
   211e0:	andeq	r7, r2, ip, lsr #4
   211e4:	andeq	r0, r0, r5, asr #13
   211e8:	andeq	r7, r2, ip, lsl #7

000211ec <flatcc_builder_string_edit@@Base>:
   211ec:	ldr	r0, [r0, #16]
   211f0:	bx	lr

000211f4 <flatcc_builder_string_len@@Base>:
   211f4:	ldr	r3, [r0, #32]
   211f8:	ldr	r0, [r3, #20]
   211fc:	bx	lr

00021200 <flatcc_builder_table_add@@Base>:
   21200:	push	{r4, r5, r6, r7, r8, lr}
   21204:	mov	r5, r1
   21208:	ldr	r1, [r0, #32]
   2120c:	ldrh	r1, [r1, #14]
   21210:	cmp	r1, #3
   21214:	bne	212c0 <flatcc_builder_table_add@@Base+0xc0>
   21218:	mov	r4, r0
   2121c:	ldr	r1, [pc, #248]	; 2131c <flatcc_builder_table_add@@Base+0x11c>
   21220:	cmp	r5, r1
   21224:	bhi	212d4 <flatcc_builder_table_add@@Base+0xd4>
   21228:	ldrh	r1, [r0, #130]	; 0x82
   2122c:	cmp	r1, r3
   21230:	strhcc	r3, [r0, #130]	; 0x82
   21234:	ldr	r0, [r0, #4]
   21238:	lsl	r1, r5, #1
   2123c:	ldrh	r1, [r0, r1]
   21240:	cmp	r1, #0
   21244:	bne	212e8 <flatcc_builder_table_add@@Base+0xe8>
   21248:	ldr	r0, [r4, #12]
   2124c:	eor	r0, r0, r5
   21250:	ldr	r1, [pc, #200]	; 21320 <flatcc_builder_table_add@@Base+0x120>
   21254:	mul	r0, r1, r0
   21258:	eor	r0, r0, r2
   2125c:	mul	r0, r1, r0
   21260:	str	r0, [r4, #12]
   21264:	uxth	r7, r5
   21268:	sub	r6, r3, #1
   2126c:	ldr	r0, [r4, #20]
   21270:	add	r6, r6, r0
   21274:	rsb	r3, r3, #0
   21278:	and	r6, r6, r3
   2127c:	add	r1, r2, r6
   21280:	str	r1, [r4, #20]
   21284:	ldr	r3, [r4, #24]
   21288:	cmp	r1, r3
   2128c:	bcs	212fc <flatcc_builder_table_add@@Base+0xfc>
   21290:	uxth	r5, r5
   21294:	ldr	r3, [r4, #4]
   21298:	lsl	r5, r5, #1
   2129c:	add	r2, r6, #4
   212a0:	strh	r2, [r3, r5]
   212a4:	ldrh	r3, [r4, #8]
   212a8:	cmp	r3, r7
   212ac:	addls	r7, r7, #1
   212b0:	strhls	r7, [r4, #8]
   212b4:	ldr	r0, [r4, #16]
   212b8:	add	r0, r0, r6
   212bc:	pop	{r4, r5, r6, r7, r8, pc}
   212c0:	ldr	r3, [pc, #92]	; 21324 <flatcc_builder_table_add@@Base+0x124>
   212c4:	ldr	r2, [pc, #92]	; 21328 <flatcc_builder_table_add@@Base+0x128>
   212c8:	ldr	r1, [pc, #92]	; 2132c <flatcc_builder_table_add@@Base+0x12c>
   212cc:	ldr	r0, [pc, #92]	; 21330 <flatcc_builder_table_add@@Base+0x130>
   212d0:	bl	12a8c <__assert_fail@plt>
   212d4:	ldr	r3, [pc, #72]	; 21324 <flatcc_builder_table_add@@Base+0x124>
   212d8:	ldr	r2, [pc, #84]	; 21334 <flatcc_builder_table_add@@Base+0x134>
   212dc:	ldr	r1, [pc, #72]	; 2132c <flatcc_builder_table_add@@Base+0x12c>
   212e0:	ldr	r0, [pc, #80]	; 21338 <flatcc_builder_table_add@@Base+0x138>
   212e4:	bl	12a8c <__assert_fail@plt>
   212e8:	ldr	r3, [pc, #52]	; 21324 <flatcc_builder_table_add@@Base+0x124>
   212ec:	ldr	r2, [pc, #72]	; 2133c <flatcc_builder_table_add@@Base+0x13c>
   212f0:	ldr	r1, [pc, #52]	; 2132c <flatcc_builder_table_add@@Base+0x12c>
   212f4:	ldr	r0, [pc, #68]	; 21340 <flatcc_builder_table_add@@Base+0x140>
   212f8:	bl	12a8c <__assert_fail@plt>
   212fc:	ldr	r2, [pc, #64]	; 21344 <flatcc_builder_table_add@@Base+0x144>
   21300:	add	r1, r1, #1
   21304:	mov	r0, r4
   21308:	bl	1da24 <main@@Base+0x2d4>
   2130c:	cmp	r0, #0
   21310:	beq	21290 <flatcc_builder_table_add@@Base+0x90>
   21314:	mov	r0, #0
   21318:	pop	{r4, r5, r6, r7, r8, pc}
   2131c:	strdeq	r7, [r0], -ip
   21320:			; <UNDEFINED> instruction: 0x9e3779b1
   21324:	andeq	r6, r2, r8, ror pc
   21328:	andeq	r0, r0, sp, ror #13
   2132c:	andeq	r7, r2, r4, asr r0
   21330:	andeq	r7, r2, r8, lsl r3
   21334:	andeq	r0, r0, lr, ror #13
   21338:			; <UNDEFINED> instruction: 0x000273b0
   2133c:	strdeq	r0, [r0], -r8
   21340:	andeq	r7, r2, r8, lsr #1
   21344:	strdeq	pc, [r0], -ip

00021348 <flatcc_builder_table_edit@@Base>:
   21348:	ldr	r3, [r0, #32]
   2134c:	ldrh	r3, [r3, #14]
   21350:	cmp	r3, #3
   21354:	bne	2136c <flatcc_builder_table_edit@@Base+0x24>
   21358:	ldr	r3, [r0, #20]
   2135c:	sub	r1, r3, r1
   21360:	ldr	r0, [r0, #16]
   21364:	add	r0, r0, r1
   21368:	bx	lr
   2136c:	push	{r4, lr}
   21370:	ldr	r3, [pc, #12]	; 21384 <flatcc_builder_table_edit@@Base+0x3c>
   21374:	ldr	r2, [pc, #12]	; 21388 <flatcc_builder_table_edit@@Base+0x40>
   21378:	ldr	r1, [pc, #12]	; 2138c <flatcc_builder_table_edit@@Base+0x44>
   2137c:	ldr	r0, [pc, #12]	; 21390 <flatcc_builder_table_edit@@Base+0x48>
   21380:	bl	12a8c <__assert_fail@plt>
   21384:	muleq	r2, r4, pc	; <UNPREDICTABLE>
   21388:	andeq	r0, r0, r2, lsl #14
   2138c:	andeq	r7, r2, r4, asr r0
   21390:	andeq	r7, r2, r8, lsl r3

00021394 <flatcc_builder_table_add_copy@@Base>:
   21394:	push	{r4, r5, r6, lr}
   21398:	mov	r6, r2
   2139c:	mov	r5, r3
   213a0:	ldrh	r3, [sp, #16]
   213a4:	mov	r2, r5
   213a8:	bl	21200 <flatcc_builder_table_add@@Base>
   213ac:	subs	r4, r0, #0
   213b0:	beq	213c4 <flatcc_builder_table_add_copy@@Base+0x30>
   213b4:	mov	r2, r5
   213b8:	mov	r1, r6
   213bc:	mov	r0, r4
   213c0:	bl	129b4 <memcpy@plt>
   213c4:	mov	r0, r4
   213c8:	pop	{r4, r5, r6, pc}

000213cc <flatcc_builder_table_add_offset@@Base>:
   213cc:	push	{r4, r5, r6, r7, r8, lr}
   213d0:	ldr	r3, [r0, #32]
   213d4:	ldrh	r3, [r3, #14]
   213d8:	cmp	r3, #3
   213dc:	bne	2148c <flatcc_builder_table_add_offset@@Base+0xc0>
   213e0:	mov	r4, r0
   213e4:	mov	r5, r1
   213e8:	ldr	r3, [pc, #240]	; 214e0 <flatcc_builder_table_add_offset@@Base+0x114>
   213ec:	cmp	r1, r3
   213f0:	bhi	214a0 <flatcc_builder_table_add_offset@@Base+0xd4>
   213f4:	ldr	r2, [r0, #4]
   213f8:	lsl	r3, r1, #1
   213fc:	ldrh	r3, [r2, r3]
   21400:	cmp	r3, #0
   21404:	bne	214b4 <flatcc_builder_table_add_offset@@Base+0xe8>
   21408:	ldr	r3, [r0, #12]
   2140c:	eor	r3, r3, r1
   21410:	ldr	r2, [pc, #204]	; 214e4 <flatcc_builder_table_add_offset@@Base+0x118>
   21414:	mul	r3, r2, r3
   21418:	eor	r3, r3, #4
   2141c:	mul	r3, r2, r3
   21420:	str	r3, [r0, #12]
   21424:	uxth	r7, r1
   21428:	ldr	r6, [r0, #20]
   2142c:	add	r6, r6, #3
   21430:	bic	r6, r6, #3
   21434:	add	r1, r6, #4
   21438:	str	r1, [r0, #20]
   2143c:	ldr	r3, [r0, #24]
   21440:	cmp	r1, r3
   21444:	bhi	214c8 <flatcc_builder_table_add_offset@@Base+0xfc>
   21448:	uxth	r2, r6
   2144c:	uxth	r5, r5
   21450:	ldr	r3, [r4, #4]
   21454:	lsl	r5, r5, #1
   21458:	add	r1, r2, #4
   2145c:	strh	r1, [r3, r5]
   21460:	ldrh	r3, [r4, #8]
   21464:	cmp	r3, r7
   21468:	addls	r7, r7, #1
   2146c:	strhls	r7, [r4, #8]
   21470:	ldr	r3, [r4]
   21474:	add	r1, r3, #2
   21478:	str	r1, [r4]
   2147c:	strh	r2, [r3]
   21480:	ldr	r0, [r4, #16]
   21484:	add	r0, r0, r6
   21488:	pop	{r4, r5, r6, r7, r8, pc}
   2148c:	ldr	r3, [pc, #84]	; 214e8 <flatcc_builder_table_add_offset@@Base+0x11c>
   21490:	ldr	r2, [pc, #84]	; 214ec <flatcc_builder_table_add_offset@@Base+0x120>
   21494:	ldr	r1, [pc, #84]	; 214f0 <flatcc_builder_table_add_offset@@Base+0x124>
   21498:	ldr	r0, [pc, #84]	; 214f4 <flatcc_builder_table_add_offset@@Base+0x128>
   2149c:	bl	12a8c <__assert_fail@plt>
   214a0:	ldr	r3, [pc, #64]	; 214e8 <flatcc_builder_table_add_offset@@Base+0x11c>
   214a4:	ldr	r2, [pc, #76]	; 214f8 <flatcc_builder_table_add_offset@@Base+0x12c>
   214a8:	ldr	r1, [pc, #64]	; 214f0 <flatcc_builder_table_add_offset@@Base+0x124>
   214ac:	ldr	r0, [pc, #72]	; 214fc <flatcc_builder_table_add_offset@@Base+0x130>
   214b0:	bl	12a8c <__assert_fail@plt>
   214b4:	ldr	r3, [pc, #44]	; 214e8 <flatcc_builder_table_add_offset@@Base+0x11c>
   214b8:	ldr	r2, [pc, #64]	; 21500 <flatcc_builder_table_add_offset@@Base+0x134>
   214bc:	ldr	r1, [pc, #44]	; 214f0 <flatcc_builder_table_add_offset@@Base+0x124>
   214c0:	ldr	r0, [pc, #60]	; 21504 <flatcc_builder_table_add_offset@@Base+0x138>
   214c4:	bl	12a8c <__assert_fail@plt>
   214c8:	ldr	r2, [pc, #56]	; 21508 <flatcc_builder_table_add_offset@@Base+0x13c>
   214cc:	bl	1da24 <main@@Base+0x2d4>
   214d0:	cmp	r0, #0
   214d4:	beq	21448 <flatcc_builder_table_add_offset@@Base+0x7c>
   214d8:	mov	r0, #0
   214dc:	pop	{r4, r5, r6, r7, r8, pc}
   214e0:	strdeq	r7, [r0], -ip
   214e4:			; <UNDEFINED> instruction: 0x9e3779b1
   214e8:			; <UNDEFINED> instruction: 0x00026fb0
   214ec:	andeq	r0, r0, r3, lsl r7
   214f0:	andeq	r7, r2, r4, asr r0
   214f4:	andeq	r7, r2, r8, lsl r3
   214f8:	andeq	r0, r0, r4, lsl r7
   214fc:			; <UNDEFINED> instruction: 0x000273b0
   21500:	andeq	r0, r0, fp, lsl r7
   21504:	andeq	r7, r2, r8, lsr #1
   21508:	strdeq	pc, [r0], -ip

0002150c <flatcc_builder_table_add_union@@Base>:
   2150c:	push	{r4, r5, r6, r7, lr}
   21510:	sub	sp, sp, #12
   21514:	mov	r5, r1
   21518:	add	r1, sp, #8
   2151c:	stmdb	r1, {r2, r3}
   21520:	ldr	r3, [r0, #32]
   21524:	ldrh	r3, [r3, #14]
   21528:	cmp	r3, #3
   2152c:	bne	2159c <flatcc_builder_table_add_union@@Base+0x90>
   21530:	mov	r4, r0
   21534:	ldrb	r7, [sp]
   21538:	ldr	r6, [sp, #4]
   2153c:	adds	r3, r6, #0
   21540:	movne	r3, #1
   21544:	cmp	r7, #0
   21548:	movne	r3, #0
   2154c:	cmp	r3, #0
   21550:	bne	215b0 <flatcc_builder_table_add_union@@Base+0xa4>
   21554:	cmp	r6, #0
   21558:	beq	21570 <flatcc_builder_table_add_union@@Base+0x64>
   2155c:	mov	r1, r5
   21560:	bl	213cc <flatcc_builder_table_add_offset@@Base>
   21564:	cmp	r0, #0
   21568:	strne	r6, [r0]
   2156c:	beq	215c4 <flatcc_builder_table_add_union@@Base+0xb8>
   21570:	mov	r3, #1
   21574:	mov	r2, r3
   21578:	sub	r1, r5, #1
   2157c:	mov	r0, r4
   21580:	bl	21200 <flatcc_builder_table_add@@Base>
   21584:	cmp	r0, #0
   21588:	beq	215d8 <flatcc_builder_table_add_union@@Base+0xcc>
   2158c:	strb	r7, [r0]
   21590:	mov	r0, #0
   21594:	add	sp, sp, #12
   21598:	pop	{r4, r5, r6, r7, pc}
   2159c:	ldr	r3, [pc, #72]	; 215ec <flatcc_builder_table_add_union@@Base+0xe0>
   215a0:	ldr	r2, [pc, #72]	; 215f0 <flatcc_builder_table_add_union@@Base+0xe4>
   215a4:	ldr	r1, [pc, #72]	; 215f4 <flatcc_builder_table_add_union@@Base+0xe8>
   215a8:	ldr	r0, [pc, #72]	; 215f8 <flatcc_builder_table_add_union@@Base+0xec>
   215ac:	bl	12a8c <__assert_fail@plt>
   215b0:	ldr	r3, [pc, #52]	; 215ec <flatcc_builder_table_add_union@@Base+0xe0>
   215b4:	ldr	r2, [pc, #64]	; 215fc <flatcc_builder_table_add_union@@Base+0xf0>
   215b8:	ldr	r1, [pc, #52]	; 215f4 <flatcc_builder_table_add_union@@Base+0xe8>
   215bc:	ldr	r0, [pc, #60]	; 21600 <flatcc_builder_table_add_union@@Base+0xf4>
   215c0:	bl	12a8c <__assert_fail@plt>
   215c4:	ldr	r3, [pc, #32]	; 215ec <flatcc_builder_table_add_union@@Base+0xe0>
   215c8:	ldr	r2, [pc, #52]	; 21604 <flatcc_builder_table_add_union@@Base+0xf8>
   215cc:	ldr	r1, [pc, #32]	; 215f4 <flatcc_builder_table_add_union@@Base+0xe8>
   215d0:	ldr	r0, [pc, #48]	; 21608 <flatcc_builder_table_add_union@@Base+0xfc>
   215d4:	bl	12a8c <__assert_fail@plt>
   215d8:	ldr	r3, [pc, #12]	; 215ec <flatcc_builder_table_add_union@@Base+0xe0>
   215dc:	ldr	r2, [pc, #40]	; 2160c <flatcc_builder_table_add_union@@Base+0x100>
   215e0:	ldr	r1, [pc, #12]	; 215f4 <flatcc_builder_table_add_union@@Base+0xe8>
   215e4:	ldr	r0, [pc, #36]	; 21610 <flatcc_builder_table_add_union@@Base+0x104>
   215e8:	bl	12a8c <__assert_fail@plt>
   215ec:	ldrdeq	r6, [r2], -r0
   215f0:	andeq	r0, r0, lr, ror #11
   215f4:	andeq	r7, r2, r4, asr r0
   215f8:	andeq	r7, r2, r8, lsl r3
   215fc:	andeq	r0, r0, pc, ror #11
   21600:	strdeq	r7, [r2], -r4
   21604:	strdeq	r0, [r0], -r2
   21608:	andeq	r7, r2, r8, lsl r4
   2160c:	strdeq	r0, [r0], -r6
   21610:	andeq	r7, r2, r4, lsr #8

00021614 <flatcc_builder_table_add_union_vector@@Base>:
   21614:	push	{r4, r5, r6, r7, lr}
   21618:	sub	sp, sp, #12
   2161c:	mov	r7, r1
   21620:	add	r1, sp, #8
   21624:	stmdb	r1, {r2, r3}
   21628:	ldr	r4, [sp]
   2162c:	ldr	r6, [sp, #4]
   21630:	ldr	r3, [r0, #32]
   21634:	ldrh	r3, [r3, #14]
   21638:	cmp	r3, #3
   2163c:	bne	21678 <flatcc_builder_table_add_union_vector@@Base+0x64>
   21640:	mov	r5, r0
   21644:	clz	r3, r6
   21648:	lsr	r3, r3, #5
   2164c:	clz	r2, r4
   21650:	lsr	r2, r2, #5
   21654:	cmp	r2, r3
   21658:	beq	216a0 <flatcc_builder_table_add_union_vector@@Base+0x8c>
   2165c:	adds	r4, r4, #0
   21660:	movne	r4, #1
   21664:	cmp	r4, r3
   21668:	mvnne	r0, #0
   2166c:	beq	2168c <flatcc_builder_table_add_union_vector@@Base+0x78>
   21670:	add	sp, sp, #12
   21674:	pop	{r4, r5, r6, r7, pc}
   21678:	ldr	r3, [pc, #136]	; 21708 <flatcc_builder_table_add_union_vector@@Base+0xf4>
   2167c:	mov	r2, #1536	; 0x600
   21680:	ldr	r1, [pc, #132]	; 2170c <flatcc_builder_table_add_union_vector@@Base+0xf8>
   21684:	ldr	r0, [pc, #132]	; 21710 <flatcc_builder_table_add_union_vector@@Base+0xfc>
   21688:	bl	12a8c <__assert_fail@plt>
   2168c:	ldr	r3, [pc, #116]	; 21708 <flatcc_builder_table_add_union_vector@@Base+0xf4>
   21690:	ldr	r2, [pc, #124]	; 21714 <flatcc_builder_table_add_union_vector@@Base+0x100>
   21694:	ldr	r1, [pc, #112]	; 2170c <flatcc_builder_table_add_union_vector@@Base+0xf8>
   21698:	ldr	r0, [pc, #120]	; 21718 <flatcc_builder_table_add_union_vector@@Base+0x104>
   2169c:	bl	12a8c <__assert_fail@plt>
   216a0:	cmp	r4, #0
   216a4:	moveq	r0, #0
   216a8:	beq	21670 <flatcc_builder_table_add_union_vector@@Base+0x5c>
   216ac:	sub	r1, r7, #1
   216b0:	mov	r0, r5
   216b4:	bl	213cc <flatcc_builder_table_add_offset@@Base>
   216b8:	cmp	r0, #0
   216bc:	beq	216f4 <flatcc_builder_table_add_union_vector@@Base+0xe0>
   216c0:	str	r4, [r0]
   216c4:	mov	r1, r7
   216c8:	mov	r0, r5
   216cc:	bl	213cc <flatcc_builder_table_add_offset@@Base>
   216d0:	cmp	r0, #0
   216d4:	strne	r6, [r0]
   216d8:	movne	r0, #0
   216dc:	bne	21670 <flatcc_builder_table_add_union_vector@@Base+0x5c>
   216e0:	ldr	r3, [pc, #32]	; 21708 <flatcc_builder_table_add_union_vector@@Base+0xf4>
   216e4:	ldr	r2, [pc, #48]	; 2171c <flatcc_builder_table_add_union_vector@@Base+0x108>
   216e8:	ldr	r1, [pc, #28]	; 2170c <flatcc_builder_table_add_union_vector@@Base+0xf8>
   216ec:	ldr	r0, [pc, #44]	; 21720 <flatcc_builder_table_add_union_vector@@Base+0x10c>
   216f0:	bl	12a8c <__assert_fail@plt>
   216f4:	ldr	r3, [pc, #12]	; 21708 <flatcc_builder_table_add_union_vector@@Base+0xf4>
   216f8:	ldr	r2, [pc, #36]	; 21724 <flatcc_builder_table_add_union_vector@@Base+0x110>
   216fc:	ldr	r1, [pc, #8]	; 2170c <flatcc_builder_table_add_union_vector@@Base+0xf8>
   21700:	ldr	r0, [pc, #24]	; 21720 <flatcc_builder_table_add_union_vector@@Base+0x10c>
   21704:	bl	12a8c <__assert_fail@plt>
   21708:	strdeq	r6, [r2], -r0
   2170c:	andeq	r7, r2, r4, asr r0
   21710:	andeq	r7, r2, r8, lsl r3
   21714:	andeq	r0, r0, r1, lsl #12
   21718:	andeq	r7, r2, r0, lsr r4
   2171c:	andeq	r0, r0, r8, lsl #12
   21720:	andeq	r7, r2, r8, lsl r4
   21724:	andeq	r0, r0, r4, lsl #12

00021728 <flatcc_builder_push_buffer_alignment@@Base>:
   21728:	mov	r3, r0
   2172c:	ldrh	r0, [r0, #128]	; 0x80
   21730:	mov	r2, #4
   21734:	strh	r2, [r3, #128]	; 0x80
   21738:	bx	lr

0002173c <flatcc_builder_pop_buffer_alignment@@Base>:
   2173c:	ldrh	r3, [r0, #128]	; 0x80
   21740:	cmp	r3, r1
   21744:	strhcc	r1, [r0, #128]	; 0x80
   21748:	bx	lr

0002174c <flatcc_builder_get_buffer_alignment@@Base>:
   2174c:	ldrh	r0, [r0, #128]	; 0x80
   21750:	bx	lr

00021754 <flatcc_builder_set_vtable_clustering@@Base>:
   21754:	clz	r1, r1
   21758:	lsr	r1, r1, #5
   2175c:	str	r1, [r0, #180]	; 0xb4
   21760:	bx	lr

00021764 <flatcc_builder_set_block_align@@Base>:
   21764:	strh	r1, [r0, #132]	; 0x84
   21768:	bx	lr

0002176c <flatcc_builder_get_level@@Base>:
   2176c:	ldr	r0, [r0, #156]	; 0x9c
   21770:	bx	lr

00021774 <flatcc_builder_set_max_level@@Base>:
   21774:	str	r1, [r0, #176]	; 0xb0
   21778:	ldr	r3, [r0, #160]	; 0xa0
   2177c:	cmp	r1, r3
   21780:	strgt	r1, [r0, #160]	; 0xa0
   21784:	bx	lr

00021788 <flatcc_builder_get_buffer_size@@Base>:
   21788:	ldr	r2, [r0, #140]	; 0x8c
   2178c:	ldr	r0, [r0, #136]	; 0x88
   21790:	sub	r0, r2, r0
   21794:	bx	lr

00021798 <flatcc_builder_get_buffer_start@@Base>:
   21798:	ldr	r0, [r0, #136]	; 0x88
   2179c:	bx	lr

000217a0 <flatcc_builder_get_buffer_end@@Base>:
   217a0:	ldr	r0, [r0, #140]	; 0x8c
   217a4:	bx	lr

000217a8 <flatcc_builder_set_vtable_cache_limit@@Base>:
   217a8:	str	r1, [r0, #172]	; 0xac
   217ac:	bx	lr

000217b0 <flatcc_builder_set_identifier@@Base>:
   217b0:	ldr	r3, [pc, #16]	; 217c8 <flatcc_builder_set_identifier@@Base+0x18>
   217b4:	cmp	r1, #0
   217b8:	moveq	r1, r3
   217bc:	ldr	r3, [r1]
   217c0:	str	r3, [r0, #168]	; 0xa8
   217c4:	bx	lr
   217c8:	andeq	r6, r2, r4, lsl #18

000217cc <flatcc_builder_get_type@@Base>:
   217cc:	ldr	r3, [r0, #32]
   217d0:	cmp	r3, #0
   217d4:	ldrhne	r0, [r3, #14]
   217d8:	moveq	r0, #0
   217dc:	bx	lr

000217e0 <flatcc_builder_get_type_at@@Base>:
   217e0:	cmp	r1, #0
   217e4:	ble	2180c <flatcc_builder_get_type_at@@Base+0x2c>
   217e8:	ldr	r3, [r0, #156]	; 0x9c
   217ec:	cmp	r1, r3
   217f0:	bgt	21814 <flatcc_builder_get_type_at@@Base+0x34>
   217f4:	sub	r1, r1, r3
   217f8:	ldr	r3, [r0, #32]
   217fc:	add	r1, r1, r1, lsl #3
   21800:	add	r1, r3, r1, lsl #2
   21804:	ldrh	r0, [r1, #14]
   21808:	bx	lr
   2180c:	mov	r0, #0
   21810:	bx	lr
   21814:	mov	r0, #0
   21818:	bx	lr

0002181c <flatcc_builder_get_direct_buffer@@Base>:
   2181c:	ldr	r3, [r0, #184]	; 0xb8
   21820:	cmp	r3, #0
   21824:	beq	21860 <flatcc_builder_get_direct_buffer@@Base+0x44>
   21828:	ldr	r2, [r0, #188]	; 0xbc
   2182c:	ldr	r3, [r0, #192]	; 0xc0
   21830:	cmp	r2, r3
   21834:	beq	2184c <flatcc_builder_get_direct_buffer@@Base+0x30>
   21838:	cmp	r1, #0
   2183c:	beq	21874 <flatcc_builder_get_direct_buffer@@Base+0x58>
   21840:	mov	r0, #0
   21844:	str	r0, [r1]
   21848:	bx	lr
   2184c:	cmp	r1, #0
   21850:	ldrne	r3, [r0, #212]	; 0xd4
   21854:	strne	r3, [r1]
   21858:	ldr	r0, [r0, #196]	; 0xc4
   2185c:	bx	lr
   21860:	cmp	r1, #0
   21864:	beq	2187c <flatcc_builder_get_direct_buffer@@Base+0x60>
   21868:	mov	r0, #0
   2186c:	str	r0, [r1]
   21870:	bx	lr
   21874:	mov	r0, #0
   21878:	bx	lr
   2187c:	mov	r0, #0
   21880:	bx	lr

00021884 <flatcc_builder_copy_buffer@@Base>:
   21884:	ldr	r3, [r0, #184]	; 0xb8
   21888:	cmp	r3, #0
   2188c:	beq	218b8 <flatcc_builder_copy_buffer@@Base+0x34>
   21890:	push	{r4, lr}
   21894:	add	r0, r0, #188	; 0xbc
   21898:	bl	21fb4 <flatcc_emitter_copy_buffer@@Base>
   2189c:	cmp	r0, #0
   218a0:	popne	{r4, pc}
   218a4:	ldr	r3, [pc, #20]	; 218c0 <flatcc_builder_copy_buffer@@Base+0x3c>
   218a8:	ldr	r2, [pc, #20]	; 218c4 <flatcc_builder_copy_buffer@@Base+0x40>
   218ac:	ldr	r1, [pc, #20]	; 218c8 <flatcc_builder_copy_buffer@@Base+0x44>
   218b0:	ldr	r0, [pc, #20]	; 218cc <flatcc_builder_copy_buffer@@Base+0x48>
   218b4:	bl	12a8c <__assert_fail@plt>
   218b8:	mov	r0, #0
   218bc:	bx	lr
   218c0:	andeq	r7, r2, r8, lsl r0
   218c4:	andeq	r0, r0, r6, lsl #15
   218c8:	andeq	r7, r2, r4, asr r0
   218cc:	andeq	r4, r2, r8, ror r1

000218d0 <flatcc_builder_finalize_buffer@@Base>:
   218d0:	push	{r4, r5, r6, lr}
   218d4:	mov	r5, r0
   218d8:	ldr	r4, [r0, #140]	; 0x8c
   218dc:	ldr	r3, [r0, #136]	; 0x88
   218e0:	sub	r4, r4, r3
   218e4:	cmp	r1, #0
   218e8:	strne	r4, [r1]
   218ec:	mov	r0, r4
   218f0:	bl	129fc <malloc@plt>
   218f4:	subs	r6, r0, #0
   218f8:	beq	2191c <flatcc_builder_finalize_buffer@@Base+0x4c>
   218fc:	mov	r2, r4
   21900:	mov	r1, r6
   21904:	mov	r0, r5
   21908:	bl	21884 <flatcc_builder_copy_buffer@@Base>
   2190c:	cmp	r0, #0
   21910:	beq	21930 <flatcc_builder_finalize_buffer@@Base+0x60>
   21914:	mov	r0, r6
   21918:	pop	{r4, r5, r6, pc}
   2191c:	ldr	r3, [pc, #32]	; 21944 <flatcc_builder_finalize_buffer@@Base+0x74>
   21920:	ldr	r2, [pc, #32]	; 21948 <flatcc_builder_finalize_buffer@@Base+0x78>
   21924:	ldr	r1, [pc, #32]	; 2194c <flatcc_builder_finalize_buffer@@Base+0x7c>
   21928:	ldr	r0, [pc, #32]	; 21950 <flatcc_builder_finalize_buffer@@Base+0x80>
   2192c:	bl	12a8c <__assert_fail@plt>
   21930:	ldr	r3, [pc, #12]	; 21944 <flatcc_builder_finalize_buffer@@Base+0x74>
   21934:	ldr	r2, [pc, #24]	; 21954 <flatcc_builder_finalize_buffer@@Base+0x84>
   21938:	ldr	r1, [pc, #12]	; 2194c <flatcc_builder_finalize_buffer@@Base+0x7c>
   2193c:	ldr	r0, [pc, #12]	; 21950 <flatcc_builder_finalize_buffer@@Base+0x80>
   21940:	bl	12a8c <__assert_fail@plt>
   21944:	andeq	r7, r2, r4, lsr r0
   21948:	muleq	r0, r8, r7
   2194c:	andeq	r7, r2, r4, asr r0
   21950:	andeq	r7, r2, r8, lsr #1
   21954:	muleq	r0, ip, r7

00021958 <flatcc_builder_finalize_aligned_buffer@@Base>:
   21958:	push	{r4, r5, r6, r7, lr}
   2195c:	sub	sp, sp, #12
   21960:	mov	r7, r0
   21964:	ldr	r4, [r0, #140]	; 0x8c
   21968:	ldr	r3, [r0, #136]	; 0x88
   2196c:	sub	r3, r4, r3
   21970:	subs	r6, r1, #0
   21974:	strne	r3, [r6]
   21978:	ldrh	r1, [r0, #128]	; 0x80
   2197c:	sub	r4, r1, #1
   21980:	add	r4, r4, r3
   21984:	rsb	r3, r1, #0
   21988:	and	r4, r4, r3
   2198c:	add	r0, sp, #8
   21990:	mov	r3, #0
   21994:	str	r3, [r0, #-4]!
   21998:	mov	r2, r4
   2199c:	cmp	r1, #4
   219a0:	movcc	r1, #4
   219a4:	bl	12a38 <posix_memalign@plt>
   219a8:	cmp	r0, #0
   219ac:	beq	219d0 <flatcc_builder_finalize_aligned_buffer@@Base+0x78>
   219b0:	ldr	r0, [sp, #4]
   219b4:	cmp	r0, #0
   219b8:	beq	219c0 <flatcc_builder_finalize_aligned_buffer@@Base+0x68>
   219bc:	bl	129a8 <free@plt>
   219c0:	cmp	r6, #0
   219c4:	mov	r5, #0
   219c8:	strne	r5, [r6]
   219cc:	b	219f4 <flatcc_builder_finalize_aligned_buffer@@Base+0x9c>
   219d0:	ldr	r5, [sp, #4]
   219d4:	cmp	r5, #0
   219d8:	beq	219c0 <flatcc_builder_finalize_aligned_buffer@@Base+0x68>
   219dc:	mov	r2, r4
   219e0:	mov	r1, r5
   219e4:	mov	r0, r7
   219e8:	bl	21884 <flatcc_builder_copy_buffer@@Base>
   219ec:	cmp	r0, #0
   219f0:	beq	21a00 <flatcc_builder_finalize_aligned_buffer@@Base+0xa8>
   219f4:	mov	r0, r5
   219f8:	add	sp, sp, #12
   219fc:	pop	{r4, r5, r6, r7, pc}
   21a00:	mov	r0, r5
   21a04:	bl	129a8 <free@plt>
   21a08:	b	219c0 <flatcc_builder_finalize_aligned_buffer@@Base+0x68>

00021a0c <flatcc_builder_aligned_alloc@@Base>:
   21a0c:	push	{lr}		; (str lr, [sp, #-4]!)
   21a10:	sub	sp, sp, #12
   21a14:	add	r3, sp, #8
   21a18:	mov	r2, #0
   21a1c:	str	r2, [r3, #-4]!
   21a20:	mov	r2, r1
   21a24:	cmp	r0, #4
   21a28:	movcs	r1, r0
   21a2c:	movcc	r1, #4
   21a30:	mov	r0, r3
   21a34:	bl	12a38 <posix_memalign@plt>
   21a38:	cmp	r0, #0
   21a3c:	beq	21a58 <flatcc_builder_aligned_alloc@@Base+0x4c>
   21a40:	ldr	r0, [sp, #4]
   21a44:	cmp	r0, #0
   21a48:	beq	21a58 <flatcc_builder_aligned_alloc@@Base+0x4c>
   21a4c:	bl	129a8 <free@plt>
   21a50:	mov	r3, #0
   21a54:	str	r3, [sp, #4]
   21a58:	ldr	r0, [sp, #4]
   21a5c:	add	sp, sp, #12
   21a60:	pop	{pc}		; (ldr pc, [sp], #4)

00021a64 <flatcc_builder_aligned_free@@Base>:
   21a64:	push	{r4, lr}
   21a68:	bl	129a8 <free@plt>
   21a6c:	pop	{r4, pc}

00021a70 <flatcc_builder_get_emit_context@@Base>:
   21a70:	ldr	r0, [r0, #36]	; 0x24
   21a74:	bx	lr

00021a78 <flatcc_emitter_recycle_page@@Base>:
   21a78:	ldr	r3, [r0]
   21a7c:	cmp	r3, r1
   21a80:	beq	21ad0 <flatcc_emitter_recycle_page@@Base+0x58>
   21a84:	ldr	r3, [r0, #4]
   21a88:	cmp	r1, r3
   21a8c:	beq	21ad8 <flatcc_emitter_recycle_page@@Base+0x60>
   21a90:	ldr	r3, [r1, #2944]	; 0xb80
   21a94:	ldr	r2, [r1, #2948]	; 0xb84
   21a98:	str	r2, [r3, #2948]	; 0xb84
   21a9c:	ldr	r3, [r1, #2948]	; 0xb84
   21aa0:	ldr	r2, [r1, #2944]	; 0xb80
   21aa4:	str	r2, [r3, #2944]	; 0xb80
   21aa8:	ldr	r3, [r0]
   21aac:	ldr	r3, [r3, #2948]	; 0xb84
   21ab0:	str	r3, [r1, #2948]	; 0xb84
   21ab4:	ldr	r2, [r0]
   21ab8:	str	r2, [r1, #2944]	; 0xb80
   21abc:	str	r1, [r3, #2944]	; 0xb80
   21ac0:	ldr	r3, [r1, #2944]	; 0xb80
   21ac4:	str	r1, [r3, #2948]	; 0xb84
   21ac8:	mov	r0, #0
   21acc:	bx	lr
   21ad0:	mvn	r0, #0
   21ad4:	bx	lr
   21ad8:	mvn	r0, #0
   21adc:	bx	lr

00021ae0 <flatcc_emitter_reset@@Base>:
   21ae0:	ldr	r3, [r0]
   21ae4:	cmp	r3, #0
   21ae8:	bxeq	lr
   21aec:	str	r3, [r0, #4]
   21af0:	add	r2, r3, #1472	; 0x5c0
   21af4:	str	r2, [r0, #8]
   21af8:	str	r2, [r0, #16]
   21afc:	mov	r2, #1472	; 0x5c0
   21b00:	str	r2, [r0, #12]
   21b04:	str	r2, [r0, #20]
   21b08:	sub	r2, r2, #2944	; 0xb80
   21b0c:	str	r2, [r3, #2952]	; 0xb88
   21b10:	ldr	r3, [r0, #32]
   21b14:	cmp	r3, #0
   21b18:	ldreq	r3, [r0, #24]
   21b1c:	streq	r3, [r0, #32]
   21b20:	ldr	r3, [r0, #32]
   21b24:	add	r2, r3, r3, lsl #1
   21b28:	ldr	r3, [r0, #24]
   21b2c:	lsr	r3, r3, #2
   21b30:	add	r3, r3, r2, lsr #2
   21b34:	str	r3, [r0, #32]
   21b38:	mov	r2, #0
   21b3c:	str	r2, [r0, #24]
   21b40:	ldr	r2, [r0, #28]
   21b44:	cmp	r2, r3, lsl #1
   21b48:	bxls	lr
   21b4c:	push	{r4, lr}
   21b50:	mov	r4, r0
   21b54:	ldr	r3, [r0, #4]
   21b58:	ldr	r0, [r3, #2944]	; 0xb80
   21b5c:	ldr	r2, [r4]
   21b60:	cmp	r0, r2
   21b64:	popeq	{r4, pc}
   21b68:	ldr	r2, [r0, #2944]	; 0xb80
   21b6c:	str	r2, [r3, #2944]	; 0xb80
   21b70:	ldr	r3, [r0, #2944]	; 0xb80
   21b74:	ldr	r2, [r4, #4]
   21b78:	str	r2, [r3, #2948]	; 0xb84
   21b7c:	bl	129a8 <free@plt>
   21b80:	ldr	r3, [r4, #28]
   21b84:	sub	r3, r3, #2944	; 0xb80
   21b88:	str	r3, [r4, #28]
   21b8c:	ldr	r2, [r4, #32]
   21b90:	cmp	r3, r2, lsl #1
   21b94:	popls	{r4, pc}
   21b98:	ldr	r3, [r4, #4]
   21b9c:	ldr	r0, [r3, #2944]	; 0xb80
   21ba0:	ldr	r2, [r4]
   21ba4:	cmp	r0, r2
   21ba8:	bne	21b68 <flatcc_emitter_reset@@Base+0x88>
   21bac:	pop	{r4, pc}

00021bb0 <flatcc_emitter_clear@@Base>:
   21bb0:	ldr	r3, [r0]
   21bb4:	cmp	r3, #0
   21bb8:	bxeq	lr
   21bbc:	push	{r4, r5, r6, lr}
   21bc0:	mov	r5, r0
   21bc4:	ldr	r2, [r3, #2948]	; 0xb84
   21bc8:	mov	r1, #0
   21bcc:	str	r1, [r2, #2944]	; 0xb80
   21bd0:	ldr	r4, [r3, #2944]	; 0xb80
   21bd4:	cmp	r4, r1
   21bd8:	bne	21be8 <flatcc_emitter_clear@@Base+0x38>
   21bdc:	mov	r4, r3
   21be0:	b	21bfc <flatcc_emitter_clear@@Base+0x4c>
   21be4:	mov	r4, r3
   21be8:	ldr	r0, [r4, #2948]	; 0xb84
   21bec:	bl	129a8 <free@plt>
   21bf0:	ldr	r3, [r4, #2944]	; 0xb80
   21bf4:	cmp	r3, #0
   21bf8:	bne	21be4 <flatcc_emitter_clear@@Base+0x34>
   21bfc:	mov	r0, r4
   21c00:	bl	129a8 <free@plt>
   21c04:	mov	r2, #36	; 0x24
   21c08:	mov	r1, #0
   21c0c:	mov	r0, r5
   21c10:	bl	12a44 <memset@plt>
   21c14:	pop	{r4, r5, r6, pc}

00021c18 <flatcc_emitter@@Base>:
   21c18:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21c1c:	mov	r4, r0
   21c20:	ldr	ip, [sp, #40]	; 0x28
   21c24:	ldr	r0, [r0, #24]
   21c28:	add	r0, r0, ip
   21c2c:	str	r0, [r4, #24]
   21c30:	cmp	r3, #0
   21c34:	blt	21c60 <flatcc_emitter@@Base+0x48>
   21c38:	ldr	r3, [r4, #20]
   21c3c:	cmp	ip, r3
   21c40:	bls	21d4c <flatcc_emitter@@Base+0x134>
   21c44:	cmp	r2, #0
   21c48:	addne	r7, r1, #8
   21c4c:	movne	sl, r2
   21c50:	movne	fp, #2944	; 0xb80
   21c54:	bne	21f00 <flatcc_emitter@@Base+0x2e8>
   21c58:	mov	r0, r2
   21c5c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21c60:	ldr	r3, [r4, #12]
   21c64:	cmp	ip, r3
   21c68:	bhi	21c8c <flatcc_emitter@@Base+0x74>
   21c6c:	ldr	r5, [r4, #8]
   21c70:	sub	r5, r5, ip
   21c74:	str	r5, [r4, #8]
   21c78:	sub	r3, r3, ip
   21c7c:	str	r3, [r4, #12]
   21c80:	b	21d60 <flatcc_emitter@@Base+0x148>
   21c84:	mov	r0, r2
   21c88:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21c8c:	add	r7, r1, r2, lsl #3
   21c90:	mov	r8, r2
   21c94:	mov	fp, #1472	; 0x5c0
   21c98:	mov	sl, #2944	; 0xb80
   21c9c:	b	21e7c <flatcc_emitter@@Base+0x264>
   21ca0:	mov	r2, r5
   21ca4:	rsb	r1, r2, #0
   21ca8:	ldr	r0, [r4, #8]
   21cac:	add	r0, r0, r1
   21cb0:	str	r0, [r4, #8]
   21cb4:	sub	r3, r3, r2
   21cb8:	str	r3, [r4, #12]
   21cbc:	add	r6, r6, r1
   21cc0:	sub	r5, r5, r2
   21cc4:	mov	r1, r6
   21cc8:	bl	129b4 <memcpy@plt>
   21ccc:	cmp	r5, #0
   21cd0:	beq	21e74 <flatcc_emitter@@Base+0x25c>
   21cd4:	ldr	r3, [r4, #12]
   21cd8:	cmp	r3, r5
   21cdc:	bcs	21ca0 <flatcc_emitter@@Base+0x88>
   21ce0:	cmp	r3, #0
   21ce4:	movne	r2, r3
   21ce8:	bne	21ca4 <flatcc_emitter@@Base+0x8c>
   21cec:	ldr	r9, [r4]
   21cf0:	cmp	r9, #0
   21cf4:	beq	21f94 <flatcc_emitter@@Base+0x37c>
   21cf8:	ldr	r2, [r9, #2948]	; 0xb84
   21cfc:	ldr	r3, [r4, #4]
   21d00:	cmp	r2, r3
   21d04:	beq	21f1c <flatcc_emitter@@Base+0x304>
   21d08:	ldr	r3, [r9, #2952]	; 0xb88
   21d0c:	sub	r3, r3, #2944	; 0xb80
   21d10:	str	r3, [r2, #2952]	; 0xb88
   21d14:	ldr	r3, [r4]
   21d18:	ldr	r3, [r3, #2948]	; 0xb84
   21d1c:	str	r3, [r4]
   21d20:	ldr	r3, [r4]
   21d24:	add	r2, r3, #2944	; 0xb80
   21d28:	str	r2, [r4, #8]
   21d2c:	str	sl, [r4, #12]
   21d30:	ldr	r2, [r3, #2944]	; 0xb80
   21d34:	ldr	r2, [r2, #2952]	; 0xb88
   21d38:	sub	r2, r2, #2944	; 0xb80
   21d3c:	str	r2, [r3, #2952]	; 0xb88
   21d40:	b	21ccc <flatcc_emitter@@Base+0xb4>
   21d44:	mov	r0, #0
   21d48:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21d4c:	ldr	r5, [r4, #16]
   21d50:	add	r0, r5, ip
   21d54:	str	r0, [r4, #16]
   21d58:	sub	r3, r3, ip
   21d5c:	str	r3, [r4, #20]
   21d60:	cmp	r2, #0
   21d64:	addne	r4, r1, #8
   21d68:	movne	r8, r2
   21d6c:	beq	21c84 <flatcc_emitter@@Base+0x6c>
   21d70:	ldr	r2, [r4, #-4]
   21d74:	ldr	r1, [r4, #-8]
   21d78:	mov	r0, r5
   21d7c:	bl	129b4 <memcpy@plt>
   21d80:	ldr	r3, [r4, #-4]
   21d84:	add	r5, r5, r3
   21d88:	add	r4, r4, #8
   21d8c:	subs	r8, r8, #1
   21d90:	bne	21d70 <flatcc_emitter@@Base+0x158>
   21d94:	mov	r0, #0
   21d98:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21d9c:	ldr	r0, [pc, #520]	; 21fac <flatcc_emitter@@Base+0x394>
   21da0:	bl	129fc <malloc@plt>
   21da4:	cmp	r0, #0
   21da8:	beq	21e64 <flatcc_emitter@@Base+0x24c>
   21dac:	ldr	r3, [r4, #28]
   21db0:	add	r3, r3, #2944	; 0xb80
   21db4:	str	r3, [r4, #28]
   21db8:	str	r5, [r0, #2948]	; 0xb84
   21dbc:	str	r9, [r0, #2944]	; 0xb80
   21dc0:	str	r0, [r9, #2948]	; 0xb84
   21dc4:	ldr	r3, [r4, #4]
   21dc8:	str	r0, [r3, #2944]	; 0xb80
   21dcc:	str	r0, [r4, #4]
   21dd0:	b	21e44 <flatcc_emitter@@Base+0x22c>
   21dd4:	mov	r5, r6
   21dd8:	mov	r2, r5
   21ddc:	mov	r1, r8
   21de0:	ldr	r0, [r4, #16]
   21de4:	bl	129b4 <memcpy@plt>
   21de8:	sub	r6, r6, r5
   21dec:	add	r8, r8, r5
   21df0:	ldr	r3, [r4, #16]
   21df4:	add	r3, r3, r5
   21df8:	str	r3, [r4, #16]
   21dfc:	ldr	r3, [r4, #20]
   21e00:	sub	r5, r3, r5
   21e04:	str	r5, [r4, #20]
   21e08:	cmp	r6, #0
   21e0c:	beq	21ef4 <flatcc_emitter@@Base+0x2dc>
   21e10:	ldr	r5, [r4, #20]
   21e14:	cmp	r5, r6
   21e18:	bcs	21dd4 <flatcc_emitter@@Base+0x1bc>
   21e1c:	cmp	r5, #0
   21e20:	bne	21dd8 <flatcc_emitter@@Base+0x1c0>
   21e24:	ldr	r5, [r4, #4]
   21e28:	cmp	r5, #0
   21e2c:	beq	21edc <flatcc_emitter@@Base+0x2c4>
   21e30:	ldr	r9, [r5, #2944]	; 0xb80
   21e34:	ldr	r3, [r4]
   21e38:	cmp	r9, r3
   21e3c:	strne	r9, [r4, #4]
   21e40:	beq	21d9c <flatcc_emitter@@Base+0x184>
   21e44:	ldr	r3, [r4, #4]
   21e48:	str	r3, [r4, #16]
   21e4c:	str	fp, [r4, #20]
   21e50:	ldr	r2, [r3, #2948]	; 0xb84
   21e54:	ldr	r2, [r2, #2952]	; 0xb88
   21e58:	add	r2, r2, #2944	; 0xb80
   21e5c:	str	r2, [r3, #2952]	; 0xb88
   21e60:	b	21e08 <flatcc_emitter@@Base+0x1f0>
   21e64:	mvn	r0, #0
   21e68:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21e6c:	mvn	r0, #0
   21e70:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21e74:	sub	r7, r7, #8
   21e78:	sub	r8, r8, #1
   21e7c:	cmp	r8, #0
   21e80:	beq	21d44 <flatcc_emitter@@Base+0x12c>
   21e84:	ldr	r5, [r7, #-4]
   21e88:	ldr	r6, [r7, #-8]
   21e8c:	add	r6, r6, r5
   21e90:	cmp	r5, #0
   21e94:	bne	21cd4 <flatcc_emitter@@Base+0xbc>
   21e98:	b	21e74 <flatcc_emitter@@Base+0x25c>
   21e9c:	ldr	r3, [r4, #28]
   21ea0:	add	r3, r3, #2944	; 0xb80
   21ea4:	str	r3, [r4, #28]
   21ea8:	str	r0, [r4]
   21eac:	str	r0, [r4, #4]
   21eb0:	str	r0, [r0, #2944]	; 0xb80
   21eb4:	str	r0, [r0, #2948]	; 0xb84
   21eb8:	add	r3, r0, #1472	; 0x5c0
   21ebc:	str	r3, [r4, #8]
   21ec0:	str	r3, [r4, #16]
   21ec4:	mov	r3, #1472	; 0x5c0
   21ec8:	str	r3, [r4, #12]
   21ecc:	str	r3, [r4, #20]
   21ed0:	sub	r3, r3, #2944	; 0xb80
   21ed4:	str	r3, [r0, #2952]	; 0xb88
   21ed8:	b	21e08 <flatcc_emitter@@Base+0x1f0>
   21edc:	ldr	r0, [pc, #200]	; 21fac <flatcc_emitter@@Base+0x394>
   21ee0:	bl	129fc <malloc@plt>
   21ee4:	cmp	r0, #0
   21ee8:	bne	21e9c <flatcc_emitter@@Base+0x284>
   21eec:	mvn	r0, #0
   21ef0:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21ef4:	add	r7, r7, #8
   21ef8:	subs	sl, sl, #1
   21efc:	beq	21f14 <flatcc_emitter@@Base+0x2fc>
   21f00:	ldr	r8, [r7, #-8]
   21f04:	ldr	r6, [r7, #-4]
   21f08:	cmp	r6, #0
   21f0c:	bne	21e10 <flatcc_emitter@@Base+0x1f8>
   21f10:	b	21ef4 <flatcc_emitter@@Base+0x2dc>
   21f14:	mov	r0, #0
   21f18:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21f1c:	ldr	r0, [pc, #136]	; 21fac <flatcc_emitter@@Base+0x394>
   21f20:	bl	129fc <malloc@plt>
   21f24:	cmp	r0, #0
   21f28:	beq	21e6c <flatcc_emitter@@Base+0x254>
   21f2c:	ldr	r3, [r4, #28]
   21f30:	add	r3, r3, #2944	; 0xb80
   21f34:	str	r3, [r4, #28]
   21f38:	ldr	r3, [r4, #4]
   21f3c:	str	r3, [r0, #2948]	; 0xb84
   21f40:	str	r9, [r0, #2944]	; 0xb80
   21f44:	str	r0, [r9, #2948]	; 0xb84
   21f48:	ldr	r3, [r4, #4]
   21f4c:	str	r0, [r3, #2944]	; 0xb80
   21f50:	str	r0, [r4]
   21f54:	b	21d20 <flatcc_emitter@@Base+0x108>
   21f58:	ldr	r3, [r4, #28]
   21f5c:	add	r3, r3, #2944	; 0xb80
   21f60:	str	r3, [r4, #28]
   21f64:	str	r0, [r4]
   21f68:	str	r0, [r4, #4]
   21f6c:	str	r0, [r0, #2944]	; 0xb80
   21f70:	str	r0, [r0, #2948]	; 0xb84
   21f74:	add	r3, r0, #1472	; 0x5c0
   21f78:	str	r3, [r4, #8]
   21f7c:	str	r3, [r4, #16]
   21f80:	str	fp, [r4, #12]
   21f84:	str	fp, [r4, #20]
   21f88:	ldr	r3, [pc, #32]	; 21fb0 <flatcc_emitter@@Base+0x398>
   21f8c:	str	r3, [r0, #2952]	; 0xb88
   21f90:	b	21ccc <flatcc_emitter@@Base+0xb4>
   21f94:	ldr	r0, [pc, #16]	; 21fac <flatcc_emitter@@Base+0x394>
   21f98:	bl	129fc <malloc@plt>
   21f9c:	cmp	r0, #0
   21fa0:	bne	21f58 <flatcc_emitter@@Base+0x340>
   21fa4:	mvn	r0, #0
   21fa8:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21fac:	andeq	r0, r0, ip, lsl #23
   21fb0:			; <UNDEFINED> instruction: 0xfffffa40

00021fb4 <flatcc_emitter_copy_buffer@@Base>:
   21fb4:	push	{r4, r5, r6, r7, r8, lr}
   21fb8:	mov	r5, r1
   21fbc:	ldr	r1, [r0, #24]
   21fc0:	cmp	r1, r2
   21fc4:	bhi	22068 <flatcc_emitter_copy_buffer@@Base+0xb4>
   21fc8:	ldr	r3, [r0]
   21fcc:	cmp	r3, #0
   21fd0:	beq	22070 <flatcc_emitter_copy_buffer@@Base+0xbc>
   21fd4:	mov	r6, r0
   21fd8:	ldr	r2, [r0, #4]
   21fdc:	cmp	r3, r2
   21fe0:	beq	22054 <flatcc_emitter_copy_buffer@@Base+0xa0>
   21fe4:	ldr	r4, [r0, #12]
   21fe8:	rsb	r4, r4, #2944	; 0xb80
   21fec:	mov	r2, r4
   21ff0:	ldr	r1, [r0, #8]
   21ff4:	mov	r0, r5
   21ff8:	bl	129b4 <memcpy@plt>
   21ffc:	add	r5, r5, r4
   22000:	ldr	r3, [r6]
   22004:	ldr	r4, [r3, #2944]	; 0xb80
   22008:	ldr	r1, [r6, #4]
   2200c:	cmp	r4, r1
   22010:	beq	2203c <flatcc_emitter_copy_buffer@@Base+0x88>
   22014:	mov	r7, #2944	; 0xb80
   22018:	mov	r2, r7
   2201c:	mov	r1, r4
   22020:	mov	r0, r5
   22024:	bl	129b4 <memcpy@plt>
   22028:	add	r5, r5, #2944	; 0xb80
   2202c:	ldr	r4, [r4, #2944]	; 0xb80
   22030:	ldr	r1, [r6, #4]
   22034:	cmp	r1, r4
   22038:	bne	22018 <flatcc_emitter_copy_buffer@@Base+0x64>
   2203c:	ldr	r2, [r6, #20]
   22040:	rsb	r2, r2, #2944	; 0xb80
   22044:	mov	r0, r5
   22048:	bl	129b4 <memcpy@plt>
   2204c:	mov	r0, r5
   22050:	pop	{r4, r5, r6, r7, r8, pc}
   22054:	mov	r2, r1
   22058:	ldr	r1, [r0, #8]
   2205c:	mov	r0, r5
   22060:	bl	129b4 <memcpy@plt>
   22064:	b	2204c <flatcc_emitter_copy_buffer@@Base+0x98>
   22068:	mov	r5, #0
   2206c:	b	2204c <flatcc_emitter_copy_buffer@@Base+0x98>
   22070:	mov	r5, #0
   22074:	b	2204c <flatcc_emitter_copy_buffer@@Base+0x98>
   22078:	add	r1, r1, #2
   2207c:	lsl	r1, r1, #1
   22080:	uxth	r1, r1
   22084:	ldrh	ip, [r0, #22]
   22088:	cmp	ip, r1
   2208c:	bls	220b8 <flatcc_emitter_copy_buffer@@Base+0x104>
   22090:	ldr	ip, [r0, #12]
   22094:	ldrh	r1, [ip, r1]
   22098:	cmp	r1, #0
   2209c:	beq	220b8 <flatcc_emitter_copy_buffer@@Base+0x104>
   220a0:	add	r2, r1, #4
   220a4:	ldrh	ip, [r0, #20]
   220a8:	cmp	r2, ip
   220ac:	bls	220d0 <flatcc_emitter_copy_buffer@@Base+0x11c>
   220b0:	mov	r0, #13
   220b4:	bx	lr
   220b8:	mov	r1, #0
   220bc:	str	r1, [r3]
   220c0:	cmp	r2, r1
   220c4:	moveq	r0, r2
   220c8:	movne	r0, #4
   220cc:	bx	lr
   220d0:	ldr	r2, [r0, #16]
   220d4:	add	r1, r1, r2
   220d8:	tst	r1, #3
   220dc:	beq	220e8 <flatcc_emitter_copy_buffer@@Base+0x134>
   220e0:	mov	r0, #12
   220e4:	bx	lr
   220e8:	str	r1, [r3]
   220ec:	mov	r0, #0
   220f0:	bx	lr

000220f4 <flatcc_verify_error_string@@Base>:
   220f4:	cmp	r0, #36	; 0x24
   220f8:	ldrls	pc, [pc, r0, lsl #2]
   220fc:	b	222b4 <flatcc_verify_error_string@@Base+0x1c0>
   22100:			; <UNDEFINED> instruction: 0x000222bc
   22104:	muleq	r2, r4, r1
   22108:	muleq	r2, ip, r1
   2210c:	andeq	r2, r2, r4, lsr #3
   22110:	andeq	r2, r2, ip, lsr #3
   22114:			; <UNDEFINED> instruction: 0x000221b4
   22118:			; <UNDEFINED> instruction: 0x000221bc
   2211c:	andeq	r2, r2, r4, asr #3
   22120:	andeq	r2, r2, ip, asr #3
   22124:	ldrdeq	r2, [r2], -r4
   22128:	ldrdeq	r2, [r2], -ip
   2212c:	andeq	r2, r2, r4, ror #3
   22130:	andeq	r2, r2, ip, ror #3
   22134:	strdeq	r2, [r2], -r4
   22138:	strdeq	r2, [r2], -ip
   2213c:	andeq	r2, r2, r4, lsl #4
   22140:	andeq	r2, r2, ip, lsl #4
   22144:	andeq	r2, r2, r4, lsl r2
   22148:	andeq	r2, r2, ip, lsl r2
   2214c:	andeq	r2, r2, r4, lsr #4
   22150:	andeq	r2, r2, ip, lsr #4
   22154:	andeq	r2, r2, r4, lsr r2
   22158:	andeq	r2, r2, ip, lsr r2
   2215c:	andeq	r2, r2, r4, asr #4
   22160:	andeq	r2, r2, ip, asr #4
   22164:	andeq	r2, r2, r4, asr r2
   22168:	andeq	r2, r2, ip, asr r2
   2216c:	andeq	r2, r2, r4, ror #4
   22170:	andeq	r2, r2, ip, ror #4
   22174:	andeq	r2, r2, r4, ror r2
   22178:	andeq	r2, r2, ip, ror r2
   2217c:	andeq	r2, r2, r4, lsl #5
   22180:	andeq	r2, r2, ip, lsl #5
   22184:	muleq	r2, r4, r2
   22188:	muleq	r2, ip, r2
   2218c:	andeq	r2, r2, r4, lsr #5
   22190:	andeq	r2, r2, ip, lsr #5
   22194:	ldr	r0, [pc, #296]	; 222c4 <flatcc_verify_error_string@@Base+0x1d0>
   22198:	bx	lr
   2219c:	ldr	r0, [pc, #292]	; 222c8 <flatcc_verify_error_string@@Base+0x1d4>
   221a0:	bx	lr
   221a4:	ldr	r0, [pc, #288]	; 222cc <flatcc_verify_error_string@@Base+0x1d8>
   221a8:	bx	lr
   221ac:	ldr	r0, [pc, #284]	; 222d0 <flatcc_verify_error_string@@Base+0x1dc>
   221b0:	bx	lr
   221b4:	ldr	r0, [pc, #280]	; 222d4 <flatcc_verify_error_string@@Base+0x1e0>
   221b8:	bx	lr
   221bc:	ldr	r0, [pc, #276]	; 222d8 <flatcc_verify_error_string@@Base+0x1e4>
   221c0:	bx	lr
   221c4:	ldr	r0, [pc, #272]	; 222dc <flatcc_verify_error_string@@Base+0x1e8>
   221c8:	bx	lr
   221cc:	ldr	r0, [pc, #268]	; 222e0 <flatcc_verify_error_string@@Base+0x1ec>
   221d0:	bx	lr
   221d4:	ldr	r0, [pc, #264]	; 222e4 <flatcc_verify_error_string@@Base+0x1f0>
   221d8:	bx	lr
   221dc:	ldr	r0, [pc, #260]	; 222e8 <flatcc_verify_error_string@@Base+0x1f4>
   221e0:	bx	lr
   221e4:	ldr	r0, [pc, #256]	; 222ec <flatcc_verify_error_string@@Base+0x1f8>
   221e8:	bx	lr
   221ec:	ldr	r0, [pc, #252]	; 222f0 <flatcc_verify_error_string@@Base+0x1fc>
   221f0:	bx	lr
   221f4:	ldr	r0, [pc, #248]	; 222f4 <flatcc_verify_error_string@@Base+0x200>
   221f8:	bx	lr
   221fc:	ldr	r0, [pc, #244]	; 222f8 <flatcc_verify_error_string@@Base+0x204>
   22200:	bx	lr
   22204:	ldr	r0, [pc, #240]	; 222fc <flatcc_verify_error_string@@Base+0x208>
   22208:	bx	lr
   2220c:	ldr	r0, [pc, #236]	; 22300 <flatcc_verify_error_string@@Base+0x20c>
   22210:	bx	lr
   22214:	ldr	r0, [pc, #232]	; 22304 <flatcc_verify_error_string@@Base+0x210>
   22218:	bx	lr
   2221c:	ldr	r0, [pc, #228]	; 22308 <flatcc_verify_error_string@@Base+0x214>
   22220:	bx	lr
   22224:	ldr	r0, [pc, #224]	; 2230c <flatcc_verify_error_string@@Base+0x218>
   22228:	bx	lr
   2222c:	ldr	r0, [pc, #220]	; 22310 <flatcc_verify_error_string@@Base+0x21c>
   22230:	bx	lr
   22234:	ldr	r0, [pc, #216]	; 22314 <flatcc_verify_error_string@@Base+0x220>
   22238:	bx	lr
   2223c:	ldr	r0, [pc, #212]	; 22318 <flatcc_verify_error_string@@Base+0x224>
   22240:	bx	lr
   22244:	ldr	r0, [pc, #208]	; 2231c <flatcc_verify_error_string@@Base+0x228>
   22248:	bx	lr
   2224c:	ldr	r0, [pc, #204]	; 22320 <flatcc_verify_error_string@@Base+0x22c>
   22250:	bx	lr
   22254:	ldr	r0, [pc, #200]	; 22324 <flatcc_verify_error_string@@Base+0x230>
   22258:	bx	lr
   2225c:	ldr	r0, [pc, #196]	; 22328 <flatcc_verify_error_string@@Base+0x234>
   22260:	bx	lr
   22264:	ldr	r0, [pc, #192]	; 2232c <flatcc_verify_error_string@@Base+0x238>
   22268:	bx	lr
   2226c:	ldr	r0, [pc, #188]	; 22330 <flatcc_verify_error_string@@Base+0x23c>
   22270:	bx	lr
   22274:	ldr	r0, [pc, #184]	; 22334 <flatcc_verify_error_string@@Base+0x240>
   22278:	bx	lr
   2227c:	ldr	r0, [pc, #180]	; 22338 <flatcc_verify_error_string@@Base+0x244>
   22280:	bx	lr
   22284:	ldr	r0, [pc, #176]	; 2233c <flatcc_verify_error_string@@Base+0x248>
   22288:	bx	lr
   2228c:	ldr	r0, [pc, #172]	; 22340 <flatcc_verify_error_string@@Base+0x24c>
   22290:	bx	lr
   22294:	ldr	r0, [pc, #168]	; 22344 <flatcc_verify_error_string@@Base+0x250>
   22298:	bx	lr
   2229c:	ldr	r0, [pc, #164]	; 22348 <flatcc_verify_error_string@@Base+0x254>
   222a0:	bx	lr
   222a4:	ldr	r0, [pc, #160]	; 2234c <flatcc_verify_error_string@@Base+0x258>
   222a8:	bx	lr
   222ac:	ldr	r0, [pc, #156]	; 22350 <flatcc_verify_error_string@@Base+0x25c>
   222b0:	bx	lr
   222b4:	ldr	r0, [pc, #152]	; 22354 <flatcc_verify_error_string@@Base+0x260>
   222b8:	bx	lr
   222bc:	ldr	r0, [pc, #148]	; 22358 <flatcc_verify_error_string@@Base+0x264>
   222c0:	bx	lr
   222c4:	andeq	r7, r2, ip, asr r4
   222c8:	andeq	r7, r2, r4, ror r4
   222cc:	andeq	r7, r2, r8, lsl #9
   222d0:	andeq	r7, r2, r4, lsr #9
   222d4:			; <UNDEFINED> instruction: 0x000274bc
   222d8:	andeq	r7, r2, r0, ror #9
   222dc:	andeq	r7, r2, r0, lsl #10
   222e0:	andeq	r7, r2, ip, lsl r5
   222e4:	andeq	r7, r2, r0, lsr r5
   222e8:	andeq	r7, r2, r4, asr #10
   222ec:	andeq	r7, r2, ip, asr r5
   222f0:	andeq	r7, r2, r0, ror r5
   222f4:	andeq	r7, r2, r8, lsl #11
   222f8:	andeq	r7, r2, r4, lsr #11
   222fc:	andeq	r7, r2, r0, asr #11
   22300:	andeq	r7, r2, r8, ror #11
   22304:	andeq	r7, r2, r0, lsl r6
   22308:	andeq	r7, r2, r8, lsr r6
   2230c:	andeq	r7, r2, ip, asr #12
   22310:	andeq	r7, r2, r4, ror r6
   22314:	andeq	r7, r2, ip, lsl #13
   22318:			; <UNDEFINED> instruction: 0x000276b8
   2231c:	andeq	r7, r2, ip, ror #13
   22320:	andeq	r7, r2, r8, lsl r7
   22324:	andeq	r7, r2, r4, asr #14
   22328:	andeq	r7, r2, r4, ror r7
   2232c:	andeq	r7, r2, r8, lsl #15
   22330:	andeq	r7, r2, r4, lsr #15
   22334:			; <UNDEFINED> instruction: 0x000277bc
   22338:	andeq	r7, r2, r4, ror #15
   2233c:	andeq	r7, r2, ip, lsl #16
   22340:	andeq	r7, r2, r4, lsr #16
   22344:	andeq	r7, r2, ip, asr #16
   22348:	andeq	r7, r2, r4, ror r8
   2234c:	andeq	r7, r2, r8, lsr #17
   22350:	ldrdeq	r7, [r2], -r0
   22354:	andeq	r7, r2, r0, ror #17
   22358:	andeq	r7, r2, r8, asr r4

0002235c <flatcc_verify_field@@Base>:
   2235c:	add	r1, r1, #2
   22360:	lsl	r1, r1, #1
   22364:	uxth	r1, r1
   22368:	ldrh	ip, [r0, #22]
   2236c:	cmp	ip, r1
   22370:	bls	223c4 <flatcc_verify_field@@Base+0x68>
   22374:	ldr	ip, [r0, #12]
   22378:	ldrh	r1, [ip, r1]
   2237c:	cmp	r1, #0
   22380:	beq	223cc <flatcc_verify_field@@Base+0x70>
   22384:	add	r2, r2, r1
   22388:	ldrh	ip, [r0, #20]
   2238c:	cmp	r2, ip
   22390:	bls	2239c <flatcc_verify_field@@Base+0x40>
   22394:	mov	r0, #13
   22398:	bx	lr
   2239c:	ldr	r2, [r0]
   223a0:	ldr	r0, [r0, #16]
   223a4:	add	r0, r2, r0
   223a8:	add	r0, r0, r1
   223ac:	sub	r3, r3, #1
   223b0:	and	r0, r0, r3
   223b4:	cmp	r0, #0
   223b8:	movne	r0, #12
   223bc:	moveq	r0, #0
   223c0:	bx	lr
   223c4:	mov	r0, #0
   223c8:	bx	lr
   223cc:	mov	r0, #0
   223d0:	bx	lr

000223d4 <flatcc_verify_string_field@@Base>:
   223d4:	push	{r4, lr}
   223d8:	sub	sp, sp, #8
   223dc:	mov	r4, r0
   223e0:	add	r3, sp, #4
   223e4:	bl	22078 <flatcc_emitter_copy_buffer@@Base+0xc4>
   223e8:	cmp	r0, #0
   223ec:	bne	2244c <flatcc_verify_string_field@@Base+0x78>
   223f0:	ldr	r3, [sp, #4]
   223f4:	cmp	r3, #0
   223f8:	beq	2244c <flatcc_verify_string_field@@Base+0x78>
   223fc:	ldr	r1, [r4]
   22400:	ldr	r2, [r1, r3]
   22404:	add	r2, r3, r2
   22408:	cmp	r3, r2
   2240c:	movcs	r0, #17
   22410:	bcs	2244c <flatcc_verify_string_field@@Base+0x78>
   22414:	ldr	r3, [r4, #4]
   22418:	add	ip, r2, #4
   2241c:	cmp	r3, ip
   22420:	movcc	r0, #17
   22424:	bcc	2244c <flatcc_verify_string_field@@Base+0x78>
   22428:	tst	r2, #3
   2242c:	movne	r0, #17
   22430:	bne	2244c <flatcc_verify_string_field@@Base+0x78>
   22434:	ldr	r2, [r1, r2]
   22438:	sub	r3, r3, ip
   2243c:	add	lr, r2, #1
   22440:	cmp	r3, lr
   22444:	movcc	r0, #8
   22448:	bcs	22454 <flatcc_verify_string_field@@Base+0x80>
   2244c:	add	sp, sp, #8
   22450:	pop	{r4, pc}
   22454:	add	r1, r1, ip
   22458:	ldrb	r3, [r1, r2]
   2245c:	cmp	r3, #0
   22460:	movne	r0, #7
   22464:	b	2244c <flatcc_verify_string_field@@Base+0x78>

00022468 <flatcc_verify_vector_field@@Base>:
   22468:	push	{r4, r5, r6, lr}
   2246c:	sub	sp, sp, #8
   22470:	mov	r4, r0
   22474:	mov	r5, r3
   22478:	ldrh	r6, [sp, #24]
   2247c:	add	r3, sp, #4
   22480:	bl	22078 <flatcc_emitter_copy_buffer@@Base+0xc4>
   22484:	cmp	r0, #0
   22488:	bne	224f8 <flatcc_verify_vector_field@@Base+0x90>
   2248c:	ldr	r3, [sp, #4]
   22490:	cmp	r3, #0
   22494:	beq	224f8 <flatcc_verify_vector_field@@Base+0x90>
   22498:	ldr	r1, [r4]
   2249c:	ldr	r2, [r1, r3]
   224a0:	add	r2, r3, r2
   224a4:	cmp	r3, r2
   224a8:	movcs	r0, #16
   224ac:	bcs	224f8 <flatcc_verify_vector_field@@Base+0x90>
   224b0:	ldr	ip, [r4, #4]
   224b4:	add	lr, r2, #4
   224b8:	cmp	ip, lr
   224bc:	movcc	r0, #16
   224c0:	bcc	224f8 <flatcc_verify_vector_field@@Base+0x90>
   224c4:	cmp	r6, #4
   224c8:	movcs	r3, r6
   224cc:	movcc	r3, #4
   224d0:	sub	r3, r3, #1
   224d4:	orr	r3, r3, #3
   224d8:	tst	r3, lr
   224dc:	movne	r0, #16
   224e0:	bne	224f8 <flatcc_verify_vector_field@@Base+0x90>
   224e4:	ldr	r3, [r1, r2]
   224e8:	ldr	r1, [sp, #28]
   224ec:	cmp	r1, r3
   224f0:	movcc	r0, #25
   224f4:	bcs	22500 <flatcc_verify_vector_field@@Base+0x98>
   224f8:	add	sp, sp, #8
   224fc:	pop	{r4, r5, r6, pc}
   22500:	mul	r5, r3, r5
   22504:	sub	ip, ip, #4
   22508:	sub	r2, ip, r2
   2250c:	cmp	r5, r2
   22510:	movhi	r0, #26
   22514:	b	224f8 <flatcc_verify_vector_field@@Base+0x90>

00022518 <flatcc_verify_string_vector_field@@Base>:
   22518:	push	{r4, r5, r6, r7, r8, lr}
   2251c:	sub	sp, sp, #8
   22520:	mov	r4, r0
   22524:	add	r3, sp, #4
   22528:	bl	22078 <flatcc_emitter_copy_buffer@@Base+0xc4>
   2252c:	cmp	r0, #0
   22530:	bne	22608 <flatcc_verify_string_vector_field@@Base+0xf0>
   22534:	ldr	r3, [sp, #4]
   22538:	cmp	r3, #0
   2253c:	beq	22608 <flatcc_verify_string_vector_field@@Base+0xf0>
   22540:	ldr	r6, [r4]
   22544:	ldr	r5, [r4, #4]
   22548:	ldr	lr, [r6, r3]
   2254c:	add	lr, r3, lr
   22550:	cmp	r3, lr
   22554:	movcs	r0, #16
   22558:	bcs	22608 <flatcc_verify_string_vector_field@@Base+0xf0>
   2255c:	add	r2, lr, #4
   22560:	cmp	r5, r2
   22564:	bcc	22570 <flatcc_verify_string_vector_field@@Base+0x58>
   22568:	ands	r1, r2, #3
   2256c:	beq	22618 <flatcc_verify_string_vector_field@@Base+0x100>
   22570:	add	r3, lr, #4
   22574:	cmp	r5, r3
   22578:	movcc	r0, #16
   2257c:	bcc	22608 <flatcc_verify_string_vector_field@@Base+0xf0>
   22580:	tst	r3, #3
   22584:	movne	r0, #16
   22588:	bne	22608 <flatcc_verify_string_vector_field@@Base+0xf0>
   2258c:	ldr	r3, [r6, lr]
   22590:	cmn	r3, #-1073741823	; 0xc0000001
   22594:	movhi	r0, #25
   22598:	bhi	22608 <flatcc_verify_string_vector_field@@Base+0xf0>
   2259c:	sub	r5, r5, #4
   225a0:	sub	lr, r5, lr
   225a4:	lsl	r3, r3, #2
   225a8:	cmp	lr, r3
   225ac:	movcc	r0, #26
   225b0:	b	22608 <flatcc_verify_string_vector_field@@Base+0xf0>
   225b4:	add	lr, r6, lr
   225b8:	ldrb	r3, [lr, r7]
   225bc:	cmp	r3, #0
   225c0:	movne	r0, #7
   225c4:	bne	22608 <flatcc_verify_string_vector_field@@Base+0xf0>
   225c8:	add	r1, r1, #1
   225cc:	add	r2, r2, #4
   225d0:	cmp	r4, r1
   225d4:	beq	22608 <flatcc_verify_string_vector_field@@Base+0xf0>
   225d8:	ldr	r3, [ip, #4]!
   225dc:	add	r3, r2, r3
   225e0:	cmp	r2, r3
   225e4:	bcs	22604 <flatcc_verify_string_vector_field@@Base+0xec>
   225e8:	add	lr, r3, #4
   225ec:	cmp	r5, lr
   225f0:	bcc	22610 <flatcc_verify_string_vector_field@@Base+0xf8>
   225f4:	tst	r3, #3
   225f8:	beq	22644 <flatcc_verify_string_vector_field@@Base+0x12c>
   225fc:	mov	r0, #17
   22600:	b	22608 <flatcc_verify_string_vector_field@@Base+0xf0>
   22604:	mov	r0, #17
   22608:	add	sp, sp, #8
   2260c:	pop	{r4, r5, r6, r7, r8, pc}
   22610:	mov	r0, #17
   22614:	b	22608 <flatcc_verify_string_vector_field@@Base+0xf0>
   22618:	add	ip, r6, lr
   2261c:	ldr	r4, [r6, lr]
   22620:	cmn	r4, #-1073741823	; 0xc0000001
   22624:	bhi	22570 <flatcc_verify_string_vector_field@@Base+0x58>
   22628:	sub	r3, r5, #4
   2262c:	sub	r3, r3, lr
   22630:	cmp	r3, r4, lsl #2
   22634:	bcc	22570 <flatcc_verify_string_vector_field@@Base+0x58>
   22638:	cmp	r4, #0
   2263c:	bne	225d8 <flatcc_verify_string_vector_field@@Base+0xc0>
   22640:	b	22608 <flatcc_verify_string_vector_field@@Base+0xf0>
   22644:	ldr	r7, [r6, r3]
   22648:	sub	r3, r5, lr
   2264c:	add	r8, r7, #1
   22650:	cmp	r3, r8
   22654:	bcs	225b4 <flatcc_verify_string_vector_field@@Base+0x9c>
   22658:	mov	r0, #8
   2265c:	b	22608 <flatcc_verify_string_vector_field@@Base+0xf0>

00022660 <flatcc_verify_table_field@@Base>:
   22660:	push	{r4, r5, lr}
   22664:	sub	sp, sp, #36	; 0x24
   22668:	mov	r4, r0
   2266c:	mov	r5, r3
   22670:	add	r3, sp, #28
   22674:	bl	22078 <flatcc_emitter_copy_buffer@@Base+0xc4>
   22678:	cmp	r0, #0
   2267c:	bne	2268c <flatcc_verify_table_field@@Base+0x2c>
   22680:	ldr	r3, [sp, #28]
   22684:	cmp	r3, #0
   22688:	bne	22694 <flatcc_verify_table_field@@Base+0x34>
   2268c:	add	sp, sp, #36	; 0x24
   22690:	pop	{r4, r5, pc}
   22694:	ldr	r0, [r4]
   22698:	ldr	ip, [r4, #4]
   2269c:	ldr	r1, [r0, r3]
   226a0:	ldr	r2, [r4, #8]
   226a4:	sub	r2, r2, #1
   226a8:	str	r2, [sp, #12]
   226ac:	cmp	r2, #0
   226b0:	moveq	r0, #3
   226b4:	beq	2268c <flatcc_verify_table_field@@Base+0x2c>
   226b8:	add	r2, r3, r1
   226bc:	cmp	r3, r2
   226c0:	movcs	r0, #15
   226c4:	bcs	2268c <flatcc_verify_table_field@@Base+0x2c>
   226c8:	add	r3, r2, #4
   226cc:	cmp	ip, r3
   226d0:	movcc	r0, #15
   226d4:	bcc	2268c <flatcc_verify_table_field@@Base+0x2c>
   226d8:	tst	r2, #3
   226dc:	movne	r0, #15
   226e0:	bne	2268c <flatcc_verify_table_field@@Base+0x2c>
   226e4:	str	r2, [sp, #20]
   226e8:	ldr	r3, [r0, r2]
   226ec:	subs	r3, r2, r3
   226f0:	movmi	r0, #29
   226f4:	bmi	2268c <flatcc_verify_table_field@@Base+0x2c>
   226f8:	tst	r3, #1
   226fc:	movne	r0, #29
   22700:	bne	2268c <flatcc_verify_table_field@@Base+0x2c>
   22704:	add	r1, r3, #2
   22708:	cmp	ip, r1
   2270c:	movcc	r0, #27
   22710:	bcc	2268c <flatcc_verify_table_field@@Base+0x2c>
   22714:	add	r4, r0, r3
   22718:	ldrh	lr, [r0, r3]
   2271c:	strh	lr, [sp, #26]
   22720:	add	r3, lr, r3
   22724:	cmp	ip, r3
   22728:	movcc	r0, #30
   2272c:	bcc	2268c <flatcc_verify_table_field@@Base+0x2c>
   22730:	tst	lr, #1
   22734:	movne	r0, #30
   22738:	bne	2268c <flatcc_verify_table_field@@Base+0x2c>
   2273c:	cmp	lr, #3
   22740:	movls	r0, #28
   22744:	bls	2268c <flatcc_verify_table_field@@Base+0x2c>
   22748:	ldrh	r3, [r0, r1]
   2274c:	strh	r3, [sp, #24]
   22750:	sub	r2, ip, r2
   22754:	cmp	r2, r3
   22758:	movcc	r0, #20
   2275c:	bcc	2268c <flatcc_verify_table_field@@Base+0x2c>
   22760:	str	r4, [sp, #16]
   22764:	str	r0, [sp, #4]
   22768:	str	ip, [sp, #8]
   2276c:	add	r0, sp, #4
   22770:	blx	r5
   22774:	b	2268c <flatcc_verify_table_field@@Base+0x2c>

00022778 <flatcc_verify_table_vector_field@@Base>:
   22778:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2277c:	sub	sp, sp, #44	; 0x2c
   22780:	mov	r5, r0
   22784:	str	r3, [sp, #4]
   22788:	add	r3, sp, #36	; 0x24
   2278c:	bl	22078 <flatcc_emitter_copy_buffer@@Base+0xc4>
   22790:	cmp	r0, #0
   22794:	bne	227a4 <flatcc_verify_table_vector_field@@Base+0x2c>
   22798:	ldr	r3, [sp, #36]	; 0x24
   2279c:	cmp	r3, #0
   227a0:	bne	227ac <flatcc_verify_table_vector_field@@Base+0x34>
   227a4:	add	sp, sp, #44	; 0x2c
   227a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   227ac:	ldr	r4, [r5, #8]
   227b0:	cmp	r4, #0
   227b4:	movle	r0, #3
   227b8:	ble	227a4 <flatcc_verify_table_vector_field@@Base+0x2c>
   227bc:	ldr	fp, [r5]
   227c0:	ldr	r9, [r5, #4]
   227c4:	ldr	r2, [fp, r3]
   227c8:	add	r2, r3, r2
   227cc:	cmp	r3, r2
   227d0:	movcs	r0, #16
   227d4:	bcs	227a4 <flatcc_verify_table_vector_field@@Base+0x2c>
   227d8:	add	r6, r2, #4
   227dc:	cmp	r9, r6
   227e0:	bcc	227ec <flatcc_verify_table_vector_field@@Base+0x74>
   227e4:	ands	r7, r6, #3
   227e8:	beq	2285c <flatcc_verify_table_vector_field@@Base+0xe4>
   227ec:	add	r3, r2, #4
   227f0:	cmp	r9, r3
   227f4:	movcc	r0, #16
   227f8:	bcc	227a4 <flatcc_verify_table_vector_field@@Base+0x2c>
   227fc:	tst	r3, #3
   22800:	movne	r0, #16
   22804:	bne	227a4 <flatcc_verify_table_vector_field@@Base+0x2c>
   22808:	ldr	r3, [fp, r2]
   2280c:	cmn	r3, #-1073741823	; 0xc0000001
   22810:	movhi	r0, #25
   22814:	bhi	227a4 <flatcc_verify_table_vector_field@@Base+0x2c>
   22818:	lsl	r3, r3, #2
   2281c:	sub	r1, r9, #4
   22820:	sub	r2, r1, r2
   22824:	cmp	r3, r2
   22828:	movhi	r0, #26
   2282c:	b	227a4 <flatcc_verify_table_vector_field@@Base+0x2c>
   22830:	add	r3, r3, r6
   22834:	cmp	r3, r6
   22838:	bls	22850 <flatcc_verify_table_vector_field@@Base+0xd8>
   2283c:	add	r2, r3, #4
   22840:	cmp	r9, r2
   22844:	bcc	22850 <flatcc_verify_table_vector_field@@Base+0xd8>
   22848:	tst	r3, #3
   2284c:	beq	2288c <flatcc_verify_table_vector_field@@Base+0x114>
   22850:	ldr	r3, [r8]
   22854:	str	r4, [sp, #20]
   22858:	b	22944 <flatcc_verify_table_vector_field@@Base+0x1cc>
   2285c:	ldr	sl, [fp, r2]
   22860:	cmn	sl, #-1073741823	; 0xc0000001
   22864:	bhi	227ec <flatcc_verify_table_vector_field@@Base+0x74>
   22868:	sub	r3, r9, #4
   2286c:	sub	r3, r3, r2
   22870:	cmp	r3, sl, lsl #2
   22874:	bcc	227ec <flatcc_verify_table_vector_field@@Base+0x74>
   22878:	cmp	sl, #0
   2287c:	beq	227a4 <flatcc_verify_table_vector_field@@Base+0x2c>
   22880:	add	r5, fp, r6
   22884:	sub	r4, r4, #2
   22888:	b	2291c <flatcc_verify_table_vector_field@@Base+0x1a4>
   2288c:	str	r3, [sp, #28]
   22890:	ldr	r2, [fp, r3]
   22894:	subs	r2, r3, r2
   22898:	bmi	22850 <flatcc_verify_table_vector_field@@Base+0xd8>
   2289c:	tst	r2, #1
   228a0:	bne	22850 <flatcc_verify_table_vector_field@@Base+0xd8>
   228a4:	add	r1, r2, #2
   228a8:	cmp	r9, r1
   228ac:	bcc	22930 <flatcc_verify_table_vector_field@@Base+0x1b8>
   228b0:	add	ip, fp, r2
   228b4:	ldrh	r0, [fp, r2]
   228b8:	strh	r0, [sp, #34]	; 0x22
   228bc:	add	r2, r0, r2
   228c0:	cmp	r9, r2
   228c4:	bcc	22850 <flatcc_verify_table_vector_field@@Base+0xd8>
   228c8:	tst	r0, #1
   228cc:	bne	22850 <flatcc_verify_table_vector_field@@Base+0xd8>
   228d0:	cmp	r0, #3
   228d4:	bls	22930 <flatcc_verify_table_vector_field@@Base+0x1b8>
   228d8:	ldrh	r2, [fp, r1]
   228dc:	strh	r2, [sp, #32]
   228e0:	sub	r3, r9, r3
   228e4:	cmp	r3, r2
   228e8:	bcc	22930 <flatcc_verify_table_vector_field@@Base+0x1b8>
   228ec:	str	ip, [sp, #24]
   228f0:	str	fp, [sp, #12]
   228f4:	str	r9, [sp, #16]
   228f8:	add	r0, sp, #12
   228fc:	ldr	r3, [sp, #4]
   22900:	blx	r3
   22904:	cmp	r0, #0
   22908:	bne	22850 <flatcc_verify_table_vector_field@@Base+0xd8>
   2290c:	add	r7, r7, #1
   22910:	add	r6, r6, #4
   22914:	cmp	sl, r7
   22918:	beq	227a4 <flatcc_verify_table_vector_field@@Base+0x2c>
   2291c:	mov	r8, r5
   22920:	ldr	r3, [r5], #4
   22924:	str	r4, [sp, #20]
   22928:	cmp	r4, #0
   2292c:	bne	22830 <flatcc_verify_table_vector_field@@Base+0xb8>
   22930:	ldr	r3, [r8]
   22934:	str	r4, [sp, #20]
   22938:	cmp	r4, #0
   2293c:	moveq	r0, #3
   22940:	beq	227a4 <flatcc_verify_table_vector_field@@Base+0x2c>
   22944:	add	r3, r6, r3
   22948:	cmp	r6, r3
   2294c:	movcs	r0, #15
   22950:	bcs	227a4 <flatcc_verify_table_vector_field@@Base+0x2c>
   22954:	add	r2, r3, #4
   22958:	cmp	r9, r2
   2295c:	movcc	r0, #15
   22960:	bcc	227a4 <flatcc_verify_table_vector_field@@Base+0x2c>
   22964:	tst	r3, #3
   22968:	movne	r0, #15
   2296c:	bne	227a4 <flatcc_verify_table_vector_field@@Base+0x2c>
   22970:	str	r3, [sp, #28]
   22974:	ldr	r2, [fp, r3]
   22978:	subs	r2, r3, r2
   2297c:	movmi	r0, #29
   22980:	bmi	227a4 <flatcc_verify_table_vector_field@@Base+0x2c>
   22984:	tst	r2, #1
   22988:	movne	r0, #29
   2298c:	bne	227a4 <flatcc_verify_table_vector_field@@Base+0x2c>
   22990:	add	r0, r2, #2
   22994:	cmp	r9, r0
   22998:	movcc	r0, #27
   2299c:	bcc	227a4 <flatcc_verify_table_vector_field@@Base+0x2c>
   229a0:	add	ip, fp, r2
   229a4:	ldrh	r1, [fp, r2]
   229a8:	strh	r1, [sp, #34]	; 0x22
   229ac:	add	r2, r1, r2
   229b0:	cmp	r9, r2
   229b4:	movcc	r0, #30
   229b8:	bcc	227a4 <flatcc_verify_table_vector_field@@Base+0x2c>
   229bc:	tst	r1, #1
   229c0:	movne	r0, #30
   229c4:	bne	227a4 <flatcc_verify_table_vector_field@@Base+0x2c>
   229c8:	cmp	r1, #3
   229cc:	movls	r0, #28
   229d0:	bls	227a4 <flatcc_verify_table_vector_field@@Base+0x2c>
   229d4:	ldrh	r2, [fp, r0]
   229d8:	strh	r2, [sp, #32]
   229dc:	sub	r3, r9, r3
   229e0:	cmp	r3, r2
   229e4:	movcc	r0, #20
   229e8:	bcc	227a4 <flatcc_verify_table_vector_field@@Base+0x2c>
   229ec:	str	ip, [sp, #24]
   229f0:	str	fp, [sp, #12]
   229f4:	str	r9, [sp, #16]
   229f8:	add	r0, sp, #12
   229fc:	ldr	r3, [sp, #4]
   22a00:	blx	r3
   22a04:	b	227a4 <flatcc_verify_table_vector_field@@Base+0x2c>

00022a08 <flatcc_verify_union_table@@Base>:
   22a08:	push	{r4, r5, lr}
   22a0c:	sub	sp, sp, #28
   22a10:	ldr	r4, [r0]
   22a14:	ldr	lr, [r0, #4]
   22a18:	ldr	ip, [r0, #16]
   22a1c:	ldr	r2, [r0, #20]
   22a20:	ldr	r3, [r0, #8]
   22a24:	sub	r3, r3, #1
   22a28:	str	r3, [sp, #8]
   22a2c:	cmp	r3, #0
   22a30:	moveq	r0, #3
   22a34:	bne	22a40 <flatcc_verify_union_table@@Base+0x38>
   22a38:	add	sp, sp, #28
   22a3c:	pop	{r4, r5, pc}
   22a40:	add	r3, ip, r2
   22a44:	cmp	ip, r3
   22a48:	movcs	r0, #15
   22a4c:	bcs	22a38 <flatcc_verify_union_table@@Base+0x30>
   22a50:	add	r2, r3, #4
   22a54:	cmp	lr, r2
   22a58:	movcc	r0, #15
   22a5c:	bcc	22a38 <flatcc_verify_union_table@@Base+0x30>
   22a60:	tst	r3, #3
   22a64:	movne	r0, #15
   22a68:	bne	22a38 <flatcc_verify_union_table@@Base+0x30>
   22a6c:	str	r3, [sp, #16]
   22a70:	ldr	r2, [r4, r3]
   22a74:	subs	r2, r3, r2
   22a78:	movmi	r0, #29
   22a7c:	bmi	22a38 <flatcc_verify_union_table@@Base+0x30>
   22a80:	tst	r2, #1
   22a84:	movne	r0, #29
   22a88:	bne	22a38 <flatcc_verify_union_table@@Base+0x30>
   22a8c:	add	r0, r2, #2
   22a90:	cmp	lr, r0
   22a94:	movcc	r0, #27
   22a98:	bcc	22a38 <flatcc_verify_union_table@@Base+0x30>
   22a9c:	add	r5, r4, r2
   22aa0:	ldrh	ip, [r4, r2]
   22aa4:	strh	ip, [sp, #22]
   22aa8:	add	r2, ip, r2
   22aac:	cmp	lr, r2
   22ab0:	movcc	r0, #30
   22ab4:	bcc	22a38 <flatcc_verify_union_table@@Base+0x30>
   22ab8:	tst	ip, #1
   22abc:	movne	r0, #30
   22ac0:	bne	22a38 <flatcc_verify_union_table@@Base+0x30>
   22ac4:	cmp	ip, #3
   22ac8:	movls	r0, #28
   22acc:	bls	22a38 <flatcc_verify_union_table@@Base+0x30>
   22ad0:	ldrh	r2, [r4, r0]
   22ad4:	strh	r2, [sp, #20]
   22ad8:	sub	r3, lr, r3
   22adc:	cmp	r3, r2
   22ae0:	movcc	r0, #20
   22ae4:	bcc	22a38 <flatcc_verify_union_table@@Base+0x30>
   22ae8:	str	r5, [sp, #12]
   22aec:	str	r4, [sp]
   22af0:	str	lr, [sp, #4]
   22af4:	mov	r0, sp
   22af8:	blx	r1
   22afc:	b	22a38 <flatcc_verify_union_table@@Base+0x30>

00022b00 <flatcc_verify_union_struct@@Base>:
   22b00:	push	{lr}		; (str lr, [sp, #-4]!)
   22b04:	ldr	lr, [r0, #4]
   22b08:	ldr	ip, [r0, #16]
   22b0c:	ldr	r3, [r0, #20]
   22b10:	cmp	r3, #0
   22b14:	bne	22b20 <flatcc_verify_union_struct@@Base+0x20>
   22b18:	mov	r0, #18
   22b1c:	pop	{pc}		; (ldr pc, [sp], #4)
   22b20:	add	r3, ip, r3
   22b24:	cmp	lr, r3
   22b28:	bcs	22b34 <flatcc_verify_union_struct@@Base+0x34>
   22b2c:	mov	r0, #18
   22b30:	pop	{pc}		; (ldr pc, [sp], #4)
   22b34:	adds	r1, r1, r3
   22b38:	bcc	22b44 <flatcc_verify_union_struct@@Base+0x44>
   22b3c:	mov	r0, #10
   22b40:	pop	{pc}		; (ldr pc, [sp], #4)
   22b44:	cmp	lr, r1
   22b48:	bcs	22b54 <flatcc_verify_union_struct@@Base+0x54>
   22b4c:	mov	r0, #9
   22b50:	pop	{pc}		; (ldr pc, [sp], #4)
   22b54:	sub	r0, r2, #1
   22b58:	and	r0, r0, r3
   22b5c:	cmp	r0, #0
   22b60:	movne	r0, #11
   22b64:	moveq	r0, #0
   22b68:	pop	{pc}		; (ldr pc, [sp], #4)

00022b6c <flatcc_verify_union_string@@Base>:
   22b6c:	ldr	r2, [r0, #16]
   22b70:	ldr	r3, [r0, #20]
   22b74:	add	r3, r2, r3
   22b78:	cmp	r2, r3
   22b7c:	bcs	22bb8 <flatcc_verify_union_string@@Base+0x4c>
   22b80:	ldr	r2, [r0, #4]
   22b84:	add	r1, r3, #4
   22b88:	cmp	r2, r1
   22b8c:	bcc	22bc0 <flatcc_verify_union_string@@Base+0x54>
   22b90:	tst	r3, #3
   22b94:	beq	22bc8 <flatcc_verify_union_string@@Base+0x5c>
   22b98:	mov	r0, #17
   22b9c:	bx	lr
   22ba0:	add	r1, r0, r1
   22ba4:	ldrb	r0, [r1, r3]
   22ba8:	cmp	r0, #0
   22bac:	movne	r0, #7
   22bb0:	moveq	r0, #0
   22bb4:	bx	lr
   22bb8:	mov	r0, #17
   22bbc:	bx	lr
   22bc0:	mov	r0, #17
   22bc4:	bx	lr
   22bc8:	ldr	r0, [r0]
   22bcc:	ldr	r3, [r0, r3]
   22bd0:	sub	r2, r2, r1
   22bd4:	add	ip, r3, #1
   22bd8:	cmp	r2, ip
   22bdc:	bcs	22ba0 <flatcc_verify_union_string@@Base+0x34>
   22be0:	mov	r0, #8
   22be4:	bx	lr

00022be8 <flatcc_verify_buffer_header@@Base>:
   22be8:	tst	r0, #3
   22bec:	beq	22bf8 <flatcc_verify_buffer_header@@Base+0x10>
   22bf0:	mov	r0, #5
   22bf4:	bx	lr
   22bf8:	cmn	r1, #9
   22bfc:	bls	22c08 <flatcc_verify_buffer_header@@Base+0x20>
   22c00:	mov	r0, #6
   22c04:	bx	lr
   22c08:	cmp	r1, #7
   22c0c:	bls	22c68 <flatcc_verify_buffer_header@@Base+0x80>
   22c10:	cmp	r2, #0
   22c14:	beq	22c70 <flatcc_verify_buffer_header@@Base+0x88>
   22c18:	push	{r4, lr}
   22c1c:	sub	sp, sp, #8
   22c20:	mov	r1, r2
   22c24:	mov	r4, r0
   22c28:	add	r0, sp, #8
   22c2c:	mov	r3, #0
   22c30:	str	r3, [r0, #-4]!
   22c34:	mov	r2, #4
   22c38:	bl	12a50 <strncpy@plt>
   22c3c:	ldr	r3, [sp, #4]
   22c40:	ldr	r0, [r4, #4]
   22c44:	cmp	r3, #0
   22c48:	cmpne	r0, r3
   22c4c:	moveq	r3, #1
   22c50:	movne	r3, #0
   22c54:	cmp	r3, #0
   22c58:	moveq	r0, #2
   22c5c:	movne	r0, #0
   22c60:	add	sp, sp, #8
   22c64:	pop	{r4, pc}
   22c68:	mov	r0, #1
   22c6c:	bx	lr
   22c70:	mov	r0, #0
   22c74:	bx	lr

00022c78 <flatcc_verify_typed_buffer_header@@Base>:
   22c78:	tst	r0, #3
   22c7c:	beq	22c88 <flatcc_verify_typed_buffer_header@@Base+0x10>
   22c80:	mov	r0, #5
   22c84:	bx	lr
   22c88:	cmn	r1, #9
   22c8c:	bls	22c98 <flatcc_verify_typed_buffer_header@@Base+0x20>
   22c90:	mov	r0, #6
   22c94:	bx	lr
   22c98:	cmp	r1, #7
   22c9c:	bls	22cbc <flatcc_verify_typed_buffer_header@@Base+0x44>
   22ca0:	cmp	r2, #0
   22ca4:	beq	22cc4 <flatcc_verify_typed_buffer_header@@Base+0x4c>
   22ca8:	ldr	r0, [r0, #4]
   22cac:	cmp	r2, r0
   22cb0:	movne	r0, #2
   22cb4:	moveq	r0, #0
   22cb8:	bx	lr
   22cbc:	mov	r0, #1
   22cc0:	bx	lr
   22cc4:	mov	r0, #0
   22cc8:	bx	lr

00022ccc <flatcc_verify_struct_as_root@@Base>:
   22ccc:	push	{r4, r5, r6, r7, r8, lr}
   22cd0:	mov	r5, r0
   22cd4:	mov	r4, r1
   22cd8:	mov	r7, r2
   22cdc:	mov	r6, r3
   22ce0:	bl	22be8 <flatcc_verify_buffer_header@@Base>
   22ce4:	cmp	r0, #0
   22ce8:	bne	22d10 <flatcc_verify_struct_as_root@@Base+0x44>
   22cec:	ldr	r2, [r5]
   22cf0:	clz	r3, r2
   22cf4:	lsr	r3, r3, #5
   22cf8:	cmp	r4, r2
   22cfc:	orrcc	r3, r3, #1
   22d00:	cmp	r3, #0
   22d04:	beq	22d24 <flatcc_verify_struct_as_root@@Base+0x58>
   22d08:	mov	r0, #18
   22d0c:	pop	{r4, r5, r6, r7, r8, pc}
   22d10:	mov	r2, r7
   22d14:	mov	r1, r4
   22d18:	mov	r0, r5
   22d1c:	bl	22be8 <flatcc_verify_buffer_header@@Base>
   22d20:	pop	{r4, r5, r6, r7, r8, pc}
   22d24:	adds	r6, r6, r2
   22d28:	bcc	22d34 <flatcc_verify_struct_as_root@@Base+0x68>
   22d2c:	mov	r0, #10
   22d30:	pop	{r4, r5, r6, r7, r8, pc}
   22d34:	cmp	r4, r6
   22d38:	bcs	22d44 <flatcc_verify_struct_as_root@@Base+0x78>
   22d3c:	mov	r0, #9
   22d40:	pop	{r4, r5, r6, r7, r8, pc}
   22d44:	ldrh	r3, [sp, #24]
   22d48:	sub	r3, r3, #1
   22d4c:	and	r2, r2, r3
   22d50:	cmp	r2, #0
   22d54:	movne	r0, #11
   22d58:	pop	{r4, r5, r6, r7, r8, pc}

00022d5c <flatcc_verify_struct_as_typed_root@@Base>:
   22d5c:	push	{r4, r5, r6, lr}
   22d60:	mov	r5, r0
   22d64:	mov	r4, r1
   22d68:	mov	r6, r3
   22d6c:	bl	22c78 <flatcc_verify_typed_buffer_header@@Base>
   22d70:	cmp	r0, #0
   22d74:	popne	{r4, r5, r6, pc}
   22d78:	ldr	r2, [r5]
   22d7c:	clz	r3, r2
   22d80:	lsr	r3, r3, #5
   22d84:	cmp	r4, r2
   22d88:	orrcc	r3, r3, #1
   22d8c:	cmp	r3, #0
   22d90:	beq	22d9c <flatcc_verify_struct_as_typed_root@@Base+0x40>
   22d94:	mov	r0, #18
   22d98:	pop	{r4, r5, r6, pc}
   22d9c:	adds	r6, r6, r2
   22da0:	bcc	22dac <flatcc_verify_struct_as_typed_root@@Base+0x50>
   22da4:	mov	r0, #10
   22da8:	pop	{r4, r5, r6, pc}
   22dac:	cmp	r4, r6
   22db0:	bcs	22dbc <flatcc_verify_struct_as_typed_root@@Base+0x60>
   22db4:	mov	r0, #9
   22db8:	pop	{r4, r5, r6, pc}
   22dbc:	ldrh	r3, [sp, #16]
   22dc0:	sub	r3, r3, #1
   22dc4:	and	r2, r2, r3
   22dc8:	cmp	r2, #0
   22dcc:	movne	r0, #11
   22dd0:	pop	{r4, r5, r6, pc}

00022dd4 <flatcc_verify_table_as_root@@Base>:
   22dd4:	push	{r4, r5, r6, r7, lr}
   22dd8:	sub	sp, sp, #28
   22ddc:	mov	r4, r0
   22de0:	mov	r5, r1
   22de4:	mov	r6, r2
   22de8:	mov	r7, r3
   22dec:	bl	22be8 <flatcc_verify_buffer_header@@Base>
   22df0:	cmp	r0, #0
   22df4:	bne	22ec0 <flatcc_verify_table_as_root@@Base+0xec>
   22df8:	ldr	r3, [r4]
   22dfc:	mov	r2, #99	; 0x63
   22e00:	str	r2, [sp, #8]
   22e04:	cmp	r3, #0
   22e08:	moveq	r0, #15
   22e0c:	beq	22ed0 <flatcc_verify_table_as_root@@Base+0xfc>
   22e10:	add	r2, r3, #4
   22e14:	cmp	r5, r2
   22e18:	movcc	r0, #15
   22e1c:	bcc	22ed0 <flatcc_verify_table_as_root@@Base+0xfc>
   22e20:	tst	r3, #3
   22e24:	movne	r0, #15
   22e28:	bne	22ed0 <flatcc_verify_table_as_root@@Base+0xfc>
   22e2c:	str	r3, [sp, #16]
   22e30:	ldr	r2, [r4, r3]
   22e34:	subs	r2, r3, r2
   22e38:	movmi	r0, #29
   22e3c:	bmi	22ed0 <flatcc_verify_table_as_root@@Base+0xfc>
   22e40:	tst	r2, #1
   22e44:	movne	r0, #29
   22e48:	bne	22ed0 <flatcc_verify_table_as_root@@Base+0xfc>
   22e4c:	add	r1, r2, #2
   22e50:	cmp	r5, r1
   22e54:	movcc	r0, #27
   22e58:	bcc	22ed0 <flatcc_verify_table_as_root@@Base+0xfc>
   22e5c:	add	ip, r4, r2
   22e60:	ldrh	r0, [r4, r2]
   22e64:	strh	r0, [sp, #22]
   22e68:	add	r2, r0, r2
   22e6c:	cmp	r5, r2
   22e70:	movcc	r0, #30
   22e74:	bcc	22ed0 <flatcc_verify_table_as_root@@Base+0xfc>
   22e78:	tst	r0, #1
   22e7c:	movne	r0, #30
   22e80:	bne	22ed0 <flatcc_verify_table_as_root@@Base+0xfc>
   22e84:	cmp	r0, #3
   22e88:	movls	r0, #28
   22e8c:	bls	22ed0 <flatcc_verify_table_as_root@@Base+0xfc>
   22e90:	ldrh	r2, [r4, r1]
   22e94:	strh	r2, [sp, #20]
   22e98:	sub	r3, r5, r3
   22e9c:	cmp	r3, r2
   22ea0:	movcc	r0, #20
   22ea4:	bcc	22ed0 <flatcc_verify_table_as_root@@Base+0xfc>
   22ea8:	str	ip, [sp, #12]
   22eac:	str	r4, [sp]
   22eb0:	str	r5, [sp, #4]
   22eb4:	mov	r0, sp
   22eb8:	blx	r7
   22ebc:	b	22ed0 <flatcc_verify_table_as_root@@Base+0xfc>
   22ec0:	mov	r2, r6
   22ec4:	mov	r1, r5
   22ec8:	mov	r0, r4
   22ecc:	bl	22be8 <flatcc_verify_buffer_header@@Base>
   22ed0:	add	sp, sp, #28
   22ed4:	pop	{r4, r5, r6, r7, pc}

00022ed8 <flatcc_verify_table_as_typed_root@@Base>:
   22ed8:	push	{r4, r5, r6, lr}
   22edc:	sub	sp, sp, #24
   22ee0:	mov	r4, r0
   22ee4:	mov	r5, r1
   22ee8:	mov	r6, r3
   22eec:	bl	22c78 <flatcc_verify_typed_buffer_header@@Base>
   22ef0:	cmp	r0, #0
   22ef4:	beq	22f00 <flatcc_verify_table_as_typed_root@@Base+0x28>
   22ef8:	add	sp, sp, #24
   22efc:	pop	{r4, r5, r6, pc}
   22f00:	ldr	r3, [r4]
   22f04:	mov	r2, #99	; 0x63
   22f08:	str	r2, [sp, #8]
   22f0c:	cmp	r3, #0
   22f10:	moveq	r0, #15
   22f14:	beq	22ef8 <flatcc_verify_table_as_typed_root@@Base+0x20>
   22f18:	add	r2, r3, #4
   22f1c:	cmp	r5, r2
   22f20:	movcc	r0, #15
   22f24:	bcc	22ef8 <flatcc_verify_table_as_typed_root@@Base+0x20>
   22f28:	tst	r3, #3
   22f2c:	movne	r0, #15
   22f30:	bne	22ef8 <flatcc_verify_table_as_typed_root@@Base+0x20>
   22f34:	str	r3, [sp, #16]
   22f38:	ldr	r2, [r4, r3]
   22f3c:	subs	r2, r3, r2
   22f40:	movmi	r0, #29
   22f44:	bmi	22ef8 <flatcc_verify_table_as_typed_root@@Base+0x20>
   22f48:	tst	r2, #1
   22f4c:	movne	r0, #29
   22f50:	bne	22ef8 <flatcc_verify_table_as_typed_root@@Base+0x20>
   22f54:	add	r1, r2, #2
   22f58:	cmp	r5, r1
   22f5c:	movcc	r0, #27
   22f60:	bcc	22ef8 <flatcc_verify_table_as_typed_root@@Base+0x20>
   22f64:	add	ip, r4, r2
   22f68:	ldrh	r0, [r4, r2]
   22f6c:	strh	r0, [sp, #22]
   22f70:	add	r2, r0, r2
   22f74:	cmp	r5, r2
   22f78:	movcc	r0, #30
   22f7c:	bcc	22ef8 <flatcc_verify_table_as_typed_root@@Base+0x20>
   22f80:	tst	r0, #1
   22f84:	movne	r0, #30
   22f88:	bne	22ef8 <flatcc_verify_table_as_typed_root@@Base+0x20>
   22f8c:	cmp	r0, #3
   22f90:	movls	r0, #28
   22f94:	bls	22ef8 <flatcc_verify_table_as_typed_root@@Base+0x20>
   22f98:	ldrh	r2, [r4, r1]
   22f9c:	strh	r2, [sp, #20]
   22fa0:	sub	r3, r5, r3
   22fa4:	cmp	r3, r2
   22fa8:	movcc	r0, #20
   22fac:	bcc	22ef8 <flatcc_verify_table_as_typed_root@@Base+0x20>
   22fb0:	str	ip, [sp, #12]
   22fb4:	str	r4, [sp]
   22fb8:	str	r5, [sp, #4]
   22fbc:	mov	r0, sp
   22fc0:	blx	r6
   22fc4:	b	22ef8 <flatcc_verify_table_as_typed_root@@Base+0x20>

00022fc8 <flatcc_verify_struct_as_nested_root@@Base>:
   22fc8:	push	{r4, r5, r6, r7, r8, lr}
   22fcc:	sub	sp, sp, #8
   22fd0:	mov	r5, r0
   22fd4:	mov	r4, r1
   22fd8:	mov	r8, r2
   22fdc:	mov	r7, r3
   22fe0:	ldrh	r6, [sp, #36]	; 0x24
   22fe4:	mvn	r3, #0
   22fe8:	str	r3, [sp, #4]
   22fec:	mov	r3, #1
   22ff0:	str	r3, [sp]
   22ff4:	mov	r3, r6
   22ff8:	bl	22468 <flatcc_verify_vector_field@@Base>
   22ffc:	cmp	r0, #0
   23000:	bne	23068 <flatcc_verify_struct_as_nested_root@@Base+0xa0>
   23004:	add	r4, r4, #2
   23008:	lsl	r4, r4, #1
   2300c:	uxth	r4, r4
   23010:	ldrh	r3, [r5, #22]
   23014:	cmp	r3, r4
   23018:	bls	23060 <flatcc_verify_struct_as_nested_root@@Base+0x98>
   2301c:	ldr	r3, [r5, #12]
   23020:	ldrh	r3, [r3, r4]
   23024:	cmp	r3, #0
   23028:	beq	23060 <flatcc_verify_struct_as_nested_root@@Base+0x98>
   2302c:	ldr	r2, [r5, #16]
   23030:	add	r3, r3, r2
   23034:	ldr	r2, [r5]
   23038:	adds	r1, r2, r3
   2303c:	beq	23060 <flatcc_verify_struct_as_nested_root@@Base+0x98>
   23040:	ldr	r3, [r2, r3]
   23044:	add	r0, r1, r3
   23048:	ldr	r1, [r1, r3]
   2304c:	str	r6, [sp]
   23050:	ldr	r3, [sp, #32]
   23054:	mov	r2, r7
   23058:	add	r0, r0, #4
   2305c:	bl	22ccc <flatcc_verify_struct_as_root@@Base>
   23060:	add	sp, sp, #8
   23064:	pop	{r4, r5, r6, r7, r8, pc}
   23068:	mvn	r3, #0
   2306c:	str	r3, [sp, #4]
   23070:	mov	r3, #1
   23074:	str	r3, [sp]
   23078:	mov	r3, r6
   2307c:	mov	r2, r8
   23080:	mov	r1, r4
   23084:	mov	r0, r5
   23088:	bl	22468 <flatcc_verify_vector_field@@Base>
   2308c:	b	23060 <flatcc_verify_struct_as_nested_root@@Base+0x98>

00023090 <flatcc_verify_table_as_nested_root@@Base>:
   23090:	push	{r4, r5, r6, r7, r8, lr}
   23094:	sub	sp, sp, #32
   23098:	mov	r5, r0
   2309c:	mov	r4, r1
   230a0:	mov	r8, r2
   230a4:	mov	r6, r3
   230a8:	ldrh	r7, [sp, #56]	; 0x38
   230ac:	mvn	r3, #0
   230b0:	str	r3, [sp, #4]
   230b4:	mov	r3, #1
   230b8:	str	r3, [sp]
   230bc:	mov	r3, r7
   230c0:	bl	22468 <flatcc_verify_vector_field@@Base>
   230c4:	cmp	r0, #0
   230c8:	bne	23154 <flatcc_verify_table_as_nested_root@@Base+0xc4>
   230cc:	add	r4, r4, #2
   230d0:	lsl	r4, r4, #1
   230d4:	uxth	r4, r4
   230d8:	ldrh	r3, [r5, #22]
   230dc:	cmp	r3, r4
   230e0:	bls	2314c <flatcc_verify_table_as_nested_root@@Base+0xbc>
   230e4:	ldr	r3, [r5, #12]
   230e8:	ldrh	r3, [r3, r4]
   230ec:	cmp	r3, #0
   230f0:	beq	2314c <flatcc_verify_table_as_nested_root@@Base+0xbc>
   230f4:	ldr	r2, [r5, #16]
   230f8:	add	r3, r3, r2
   230fc:	ldr	r2, [r5]
   23100:	adds	r1, r2, r3
   23104:	beq	2314c <flatcc_verify_table_as_nested_root@@Base+0xbc>
   23108:	ldr	r3, [r2, r3]
   2310c:	add	r4, r1, r3
   23110:	ldr	r7, [r1, r3]
   23114:	add	r8, r4, #4
   23118:	mov	r2, r6
   2311c:	mov	r1, r7
   23120:	mov	r0, r8
   23124:	bl	22be8 <flatcc_verify_buffer_header@@Base>
   23128:	cmp	r0, #0
   2312c:	bne	2317c <flatcc_verify_table_as_nested_root@@Base+0xec>
   23130:	ldr	r2, [r4, #4]
   23134:	ldr	r3, [r5, #8]
   23138:	sub	r3, r3, #1
   2313c:	str	r3, [sp, #16]
   23140:	cmp	r3, #0
   23144:	moveq	r0, #3
   23148:	bne	23190 <flatcc_verify_table_as_nested_root@@Base+0x100>
   2314c:	add	sp, sp, #32
   23150:	pop	{r4, r5, r6, r7, r8, pc}
   23154:	mvn	r3, #0
   23158:	str	r3, [sp, #4]
   2315c:	mov	r3, #1
   23160:	str	r3, [sp]
   23164:	mov	r3, r7
   23168:	mov	r2, r8
   2316c:	mov	r1, r4
   23170:	mov	r0, r5
   23174:	bl	22468 <flatcc_verify_vector_field@@Base>
   23178:	b	2314c <flatcc_verify_table_as_nested_root@@Base+0xbc>
   2317c:	mov	r2, r6
   23180:	mov	r1, r7
   23184:	mov	r0, r8
   23188:	bl	22be8 <flatcc_verify_buffer_header@@Base>
   2318c:	b	2314c <flatcc_verify_table_as_nested_root@@Base+0xbc>
   23190:	cmp	r2, #0
   23194:	moveq	r0, #15
   23198:	beq	2314c <flatcc_verify_table_as_nested_root@@Base+0xbc>
   2319c:	add	r3, r2, #4
   231a0:	cmp	r7, r3
   231a4:	movcc	r0, #15
   231a8:	bcc	2314c <flatcc_verify_table_as_nested_root@@Base+0xbc>
   231ac:	tst	r2, #3
   231b0:	movne	r0, #15
   231b4:	bne	2314c <flatcc_verify_table_as_nested_root@@Base+0xbc>
   231b8:	str	r2, [sp, #24]
   231bc:	ldr	r3, [r8, r2]
   231c0:	subs	r3, r2, r3
   231c4:	movmi	r0, #29
   231c8:	bmi	2314c <flatcc_verify_table_as_nested_root@@Base+0xbc>
   231cc:	tst	r3, #1
   231d0:	movne	r0, #29
   231d4:	bne	2314c <flatcc_verify_table_as_nested_root@@Base+0xbc>
   231d8:	add	r1, r3, #2
   231dc:	cmp	r7, r1
   231e0:	movcc	r0, #27
   231e4:	bcc	2314c <flatcc_verify_table_as_nested_root@@Base+0xbc>
   231e8:	add	ip, r8, r3
   231ec:	ldrh	r0, [r8, r3]
   231f0:	strh	r0, [sp, #30]
   231f4:	add	r3, r0, r3
   231f8:	cmp	r7, r3
   231fc:	movcc	r0, #30
   23200:	bcc	2314c <flatcc_verify_table_as_nested_root@@Base+0xbc>
   23204:	tst	r0, #1
   23208:	movne	r0, #30
   2320c:	bne	2314c <flatcc_verify_table_as_nested_root@@Base+0xbc>
   23210:	cmp	r0, #3
   23214:	movls	r0, #28
   23218:	bls	2314c <flatcc_verify_table_as_nested_root@@Base+0xbc>
   2321c:	ldrh	r3, [r8, r1]
   23220:	strh	r3, [sp, #28]
   23224:	sub	r2, r7, r2
   23228:	cmp	r2, r3
   2322c:	movcc	r0, #20
   23230:	bcc	2314c <flatcc_verify_table_as_nested_root@@Base+0xbc>
   23234:	str	ip, [sp, #20]
   23238:	str	r8, [sp, #8]
   2323c:	str	r7, [sp, #12]
   23240:	add	r0, sp, #8
   23244:	ldr	r3, [sp, #60]	; 0x3c
   23248:	blx	r3
   2324c:	b	2314c <flatcc_verify_table_as_nested_root@@Base+0xbc>

00023250 <flatcc_verify_union_field@@Base>:
   23250:	push	{r4, r5, r6, r7, lr}
   23254:	sub	sp, sp, #36	; 0x24
   23258:	sub	ip, r1, #1
   2325c:	uxth	ip, ip
   23260:	add	ip, ip, #2
   23264:	lsl	ip, ip, #1
   23268:	uxth	ip, ip
   2326c:	ldrh	lr, [r0, #22]
   23270:	cmp	lr, ip
   23274:	bls	232a4 <flatcc_verify_union_field@@Base+0x54>
   23278:	ldr	r6, [r0, #12]
   2327c:	ldrh	ip, [r6, ip]
   23280:	cmp	ip, #0
   23284:	beq	232a4 <flatcc_verify_union_field@@Base+0x54>
   23288:	add	r4, ip, #1
   2328c:	ldrh	r5, [r0, #20]
   23290:	cmp	r4, r5
   23294:	movhi	r0, #13
   23298:	bls	23310 <flatcc_verify_union_field@@Base+0xc0>
   2329c:	add	sp, sp, #36	; 0x24
   232a0:	pop	{r4, r5, r6, r7, pc}
   232a4:	add	r1, r1, #2
   232a8:	lsl	r1, r1, #1
   232ac:	uxth	r1, r1
   232b0:	cmp	lr, r1
   232b4:	bls	232cc <flatcc_verify_union_field@@Base+0x7c>
   232b8:	ldr	r3, [r0, #12]
   232bc:	ldrh	r3, [r3, r1]
   232c0:	cmp	r3, #0
   232c4:	movne	r0, #23
   232c8:	bne	2329c <flatcc_verify_union_field@@Base+0x4c>
   232cc:	cmp	r2, #0
   232d0:	moveq	r0, r2
   232d4:	movne	r0, #21
   232d8:	b	2329c <flatcc_verify_union_field@@Base+0x4c>
   232dc:	ldr	lr, [r0, #16]
   232e0:	add	ip, ip, lr
   232e4:	add	r5, r7, ip
   232e8:	ldrb	lr, [r7, ip]
   232ec:	ldrh	r4, [r6, r4]
   232f0:	adds	ip, lr, #0
   232f4:	movne	ip, #1
   232f8:	cmp	r4, #0
   232fc:	orreq	ip, ip, #1
   23300:	cmp	ip, #0
   23304:	moveq	r0, #24
   23308:	beq	2329c <flatcc_verify_union_field@@Base+0x4c>
   2330c:	b	23338 <flatcc_verify_union_field@@Base+0xe8>
   23310:	ldr	r7, [r0]
   23314:	add	r4, r1, #2
   23318:	lsl	r4, r4, #1
   2331c:	uxth	r4, r4
   23320:	cmp	lr, r4
   23324:	bhi	232dc <flatcc_verify_union_field@@Base+0x8c>
   23328:	ldr	lr, [r0, #16]
   2332c:	add	ip, ip, lr
   23330:	add	r5, r7, ip
   23334:	ldrb	lr, [r7, ip]
   23338:	cmp	lr, #0
   2333c:	moveq	r0, #0
   23340:	beq	2329c <flatcc_verify_union_field@@Base+0x4c>
   23344:	mov	r6, r3
   23348:	mov	r4, r0
   2334c:	add	r3, sp, #28
   23350:	bl	22078 <flatcc_emitter_copy_buffer@@Base+0xc4>
   23354:	cmp	r0, #0
   23358:	bne	2329c <flatcc_verify_union_field@@Base+0x4c>
   2335c:	ldr	r3, [sp, #28]
   23360:	cmp	r3, #0
   23364:	beq	2329c <flatcc_verify_union_field@@Base+0x4c>
   23368:	ldr	r2, [r4]
   2336c:	str	r2, [sp, #4]
   23370:	ldr	r1, [r4, #4]
   23374:	str	r1, [sp, #8]
   23378:	ldr	r1, [r4, #8]
   2337c:	str	r1, [sp, #12]
   23380:	str	r3, [sp, #20]
   23384:	ldr	r3, [r2, r3]
   23388:	str	r3, [sp, #24]
   2338c:	ldrb	r3, [r5]
   23390:	strb	r3, [sp, #16]
   23394:	add	r0, sp, #4
   23398:	blx	r6
   2339c:	b	2329c <flatcc_verify_union_field@@Base+0x4c>

000233a0 <flatcc_verify_union_vector_field@@Base>:
   233a0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   233a4:	sub	sp, sp, #40	; 0x28
   233a8:	sub	r4, r1, #1
   233ac:	uxth	r4, r4
   233b0:	add	ip, r4, #2
   233b4:	lsl	ip, ip, #1
   233b8:	uxth	r6, ip
   233bc:	ldrh	lr, [r0, #22]
   233c0:	cmp	lr, r6
   233c4:	bls	234f0 <flatcc_verify_union_vector_field@@Base+0x150>
   233c8:	ldr	ip, [r0, #12]
   233cc:	ldrh	ip, [ip, r6]
   233d0:	cmp	ip, #0
   233d4:	beq	234f0 <flatcc_verify_union_vector_field@@Base+0x150>
   233d8:	mov	r8, r3
   233dc:	mov	r9, r2
   233e0:	mov	sl, r1
   233e4:	mov	r5, r0
   233e8:	mvn	r3, #0
   233ec:	str	r3, [sp, #4]
   233f0:	mov	r3, #1
   233f4:	str	r3, [sp]
   233f8:	mov	r1, r4
   233fc:	bl	22468 <flatcc_verify_vector_field@@Base>
   23400:	subs	r7, r0, #0
   23404:	bne	23534 <flatcc_verify_union_vector_field@@Base+0x194>
   23408:	ldrh	r3, [r5, #22]
   2340c:	cmp	r3, r6
   23410:	bls	23528 <flatcc_verify_union_vector_field@@Base+0x188>
   23414:	ldr	r3, [r5, #12]
   23418:	ldrh	r3, [r3, r6]
   2341c:	cmp	r3, #0
   23420:	beq	23528 <flatcc_verify_union_vector_field@@Base+0x188>
   23424:	ldr	r2, [r5, #16]
   23428:	add	r3, r3, r2
   2342c:	ldr	r2, [r5]
   23430:	adds	r1, r2, r3
   23434:	beq	23528 <flatcc_verify_union_vector_field@@Base+0x188>
   23438:	ldr	r3, [r2, r3]
   2343c:	add	r4, r1, r3
   23440:	ldr	r6, [r1, r3]
   23444:	add	r3, sp, #36	; 0x24
   23448:	mov	r2, r9
   2344c:	mov	r1, sl
   23450:	mov	r0, r5
   23454:	bl	22078 <flatcc_emitter_copy_buffer@@Base+0xc4>
   23458:	subs	r7, r0, #0
   2345c:	bne	23528 <flatcc_verify_union_vector_field@@Base+0x188>
   23460:	ldr	r3, [sp, #36]	; 0x24
   23464:	cmp	r3, #0
   23468:	beq	23528 <flatcc_verify_union_vector_field@@Base+0x188>
   2346c:	ldr	r1, [r5, #8]
   23470:	cmp	r1, #0
   23474:	movle	r7, #3
   23478:	ble	23528 <flatcc_verify_union_vector_field@@Base+0x188>
   2347c:	ldr	r0, [r5]
   23480:	ldr	ip, [r5, #4]
   23484:	ldr	r2, [r0, r3]
   23488:	add	r2, r3, r2
   2348c:	cmp	r3, r2
   23490:	movcs	r7, #16
   23494:	bcs	23528 <flatcc_verify_union_vector_field@@Base+0x188>
   23498:	add	r5, r2, #4
   2349c:	cmp	ip, r5
   234a0:	bcc	234ac <flatcc_verify_union_vector_field@@Base+0x10c>
   234a4:	tst	r5, #3
   234a8:	beq	235cc <flatcc_verify_union_vector_field@@Base+0x22c>
   234ac:	add	r3, r2, #4
   234b0:	cmp	ip, r3
   234b4:	movcc	r7, #16
   234b8:	bcc	23528 <flatcc_verify_union_vector_field@@Base+0x188>
   234bc:	tst	r3, #3
   234c0:	movne	r7, #16
   234c4:	bne	23528 <flatcc_verify_union_vector_field@@Base+0x188>
   234c8:	ldr	r3, [r0, r2]
   234cc:	cmn	r3, #-1073741823	; 0xc0000001
   234d0:	movhi	r7, #25
   234d4:	bhi	23528 <flatcc_verify_union_vector_field@@Base+0x188>
   234d8:	sub	ip, ip, #4
   234dc:	sub	r2, ip, r2
   234e0:	lsl	r3, r3, #2
   234e4:	cmp	r2, r3
   234e8:	movcc	r7, #26
   234ec:	b	23528 <flatcc_verify_union_vector_field@@Base+0x188>
   234f0:	add	ip, r1, #2
   234f4:	lsl	ip, ip, #1
   234f8:	uxth	ip, ip
   234fc:	cmp	lr, ip
   23500:	ldrhi	lr, [r0, #12]
   23504:	ldrhhi	ip, [lr, ip]
   23508:	movls	ip, #0
   2350c:	clz	ip, ip
   23510:	lsr	ip, ip, #5
   23514:	cmp	r2, #0
   23518:	moveq	ip, #0
   2351c:	cmp	ip, #0
   23520:	movne	r7, #22
   23524:	beq	233d8 <flatcc_verify_union_vector_field@@Base+0x38>
   23528:	mov	r0, r7
   2352c:	add	sp, sp, #40	; 0x28
   23530:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   23534:	mvn	r3, #0
   23538:	str	r3, [sp, #4]
   2353c:	mov	r3, #1
   23540:	str	r3, [sp]
   23544:	mov	r2, r9
   23548:	mov	r1, r4
   2354c:	mov	r0, r5
   23550:	bl	22468 <flatcc_verify_vector_field@@Base>
   23554:	mov	r7, r0
   23558:	b	23528 <flatcc_verify_union_vector_field@@Base+0x188>
   2355c:	ldrb	r2, [r4]
   23560:	cmp	r2, #0
   23564:	beq	235c4 <flatcc_verify_union_vector_field@@Base+0x224>
   23568:	strb	r2, [sp, #24]
   2356c:	str	r5, [sp, #28]
   23570:	str	r3, [sp, #32]
   23574:	add	r0, sp, #12
   23578:	blx	r8
   2357c:	cmp	r0, #0
   23580:	bne	235b4 <flatcc_verify_union_vector_field@@Base+0x214>
   23584:	add	r5, r5, #4
   23588:	add	r4, r4, #1
   2358c:	cmp	r4, r9
   23590:	beq	23528 <flatcc_verify_union_vector_field@@Base+0x188>
   23594:	ldr	r3, [r6, #4]!
   23598:	cmp	r3, #0
   2359c:	bne	2355c <flatcc_verify_union_vector_field@@Base+0x1bc>
   235a0:	ldrb	r3, [r4]
   235a4:	cmp	r3, #0
   235a8:	beq	23584 <flatcc_verify_union_vector_field@@Base+0x1e4>
   235ac:	mov	r7, #32
   235b0:	b	23528 <flatcc_verify_union_vector_field@@Base+0x188>
   235b4:	add	r0, sp, #12
   235b8:	blx	r8
   235bc:	mov	r7, r0
   235c0:	b	23528 <flatcc_verify_union_vector_field@@Base+0x188>
   235c4:	mov	r7, #33	; 0x21
   235c8:	b	23528 <flatcc_verify_union_vector_field@@Base+0x188>
   235cc:	add	r3, r0, r2
   235d0:	ldr	lr, [r0, r2]
   235d4:	cmn	lr, #-1073741823	; 0xc0000001
   235d8:	bhi	234ac <flatcc_verify_union_vector_field@@Base+0x10c>
   235dc:	sub	r9, ip, #4
   235e0:	sub	r9, r9, r2
   235e4:	cmp	r9, lr, lsl #2
   235e8:	bcc	234ac <flatcc_verify_union_vector_field@@Base+0x10c>
   235ec:	cmp	r6, lr
   235f0:	movne	r7, #34	; 0x22
   235f4:	bne	23528 <flatcc_verify_union_vector_field@@Base+0x188>
   235f8:	str	r0, [sp, #12]
   235fc:	str	ip, [sp, #16]
   23600:	sub	r1, r1, #1
   23604:	str	r1, [sp, #20]
   23608:	cmp	lr, #0
   2360c:	beq	23528 <flatcc_verify_union_vector_field@@Base+0x188>
   23610:	mov	r6, r3
   23614:	add	r4, r4, #4
   23618:	add	r9, r4, lr
   2361c:	b	23594 <flatcc_verify_union_vector_field@@Base+0x1f4>

00023620 <__libc_csu_init@@Base>:
   23620:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   23624:	mov	r7, r0
   23628:	ldr	r6, [pc, #72]	; 23678 <__libc_csu_init@@Base+0x58>
   2362c:	ldr	r5, [pc, #72]	; 2367c <__libc_csu_init@@Base+0x5c>
   23630:	add	r6, pc, r6
   23634:	add	r5, pc, r5
   23638:	sub	r6, r6, r5
   2363c:	mov	r8, r1
   23640:	mov	r9, r2
   23644:	bl	12970 <strcmp@plt-0x20>
   23648:	asrs	r6, r6, #2
   2364c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   23650:	mov	r4, #0
   23654:	add	r4, r4, #1
   23658:	ldr	r3, [r5], #4
   2365c:	mov	r2, r9
   23660:	mov	r1, r8
   23664:	mov	r0, r7
   23668:	blx	r3
   2366c:	cmp	r6, r4
   23670:	bne	23654 <__libc_csu_init@@Base+0x34>
   23674:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   23678:	ldrdeq	r4, [r1], -r8
   2367c:	ldrdeq	r4, [r1], -r0

00023680 <__libc_csu_fini@@Base>:
   23680:	bx	lr

Disassembly of section .fini:

00023684 <.fini>:
   23684:	push	{r3, lr}
   23688:	pop	{r3, pc}
