
../repos/coreutils/src/fmt:     file format elf32-littlearm


Disassembly of section .init:

00010ca8 <.init>:
   10ca8:	push	{r3, lr}
   10cac:	bl	114e8 <__assert_fail@plt+0x5b0>
   10cb0:	pop	{r3, pc}

Disassembly of section .plt:

00010cb4 <calloc@plt-0x14>:
   10cb4:	push	{lr}		; (str lr, [sp, #-4]!)
   10cb8:	ldr	lr, [pc, #4]	; 10cc4 <calloc@plt-0x4>
   10cbc:	add	lr, pc, lr
   10cc0:	ldr	pc, [lr, #8]!
   10cc4:	andeq	sl, r1, ip, lsr r3

00010cc8 <calloc@plt>:
   10cc8:	add	ip, pc, #0, 12
   10ccc:	add	ip, ip, #106496	; 0x1a000
   10cd0:	ldr	pc, [ip, #828]!	; 0x33c

00010cd4 <fputs_unlocked@plt>:
   10cd4:	add	ip, pc, #0, 12
   10cd8:	add	ip, ip, #106496	; 0x1a000
   10cdc:	ldr	pc, [ip, #820]!	; 0x334

00010ce0 <raise@plt>:
   10ce0:	add	ip, pc, #0, 12
   10ce4:	add	ip, ip, #106496	; 0x1a000
   10ce8:	ldr	pc, [ip, #812]!	; 0x32c

00010cec <strcmp@plt>:
   10cec:	add	ip, pc, #0, 12
   10cf0:	add	ip, ip, #106496	; 0x1a000
   10cf4:	ldr	pc, [ip, #804]!	; 0x324

00010cf8 <posix_fadvise64@plt>:
   10cf8:	add	ip, pc, #0, 12
   10cfc:	add	ip, ip, #106496	; 0x1a000
   10d00:	ldr	pc, [ip, #796]!	; 0x31c

00010d04 <fflush@plt>:
   10d04:	add	ip, pc, #0, 12
   10d08:	add	ip, ip, #106496	; 0x1a000
   10d0c:	ldr	pc, [ip, #788]!	; 0x314

00010d10 <__memmove_chk@plt>:
   10d10:	add	ip, pc, #0, 12
   10d14:	add	ip, ip, #106496	; 0x1a000
   10d18:	ldr	pc, [ip, #780]!	; 0x30c

00010d1c <free@plt>:
   10d1c:	add	ip, pc, #0, 12
   10d20:	add	ip, ip, #106496	; 0x1a000
   10d24:	ldr	pc, [ip, #772]!	; 0x304

00010d28 <_exit@plt>:
   10d28:	add	ip, pc, #0, 12
   10d2c:	add	ip, ip, #106496	; 0x1a000
   10d30:	ldr	pc, [ip, #764]!	; 0x2fc

00010d34 <memcpy@plt>:
   10d34:	add	ip, pc, #0, 12
   10d38:	add	ip, ip, #106496	; 0x1a000
   10d3c:	ldr	pc, [ip, #756]!	; 0x2f4

00010d40 <__strtoull_internal@plt>:
   10d40:	add	ip, pc, #0, 12
   10d44:	add	ip, ip, #106496	; 0x1a000
   10d48:	ldr	pc, [ip, #748]!	; 0x2ec

00010d4c <mbsinit@plt>:
   10d4c:	add	ip, pc, #0, 12
   10d50:	add	ip, ip, #106496	; 0x1a000
   10d54:	ldr	pc, [ip, #740]!	; 0x2e4

00010d58 <fwrite_unlocked@plt>:
   10d58:	add	ip, pc, #0, 12
   10d5c:	add	ip, ip, #106496	; 0x1a000
   10d60:	ldr	pc, [ip, #732]!	; 0x2dc

00010d64 <memcmp@plt>:
   10d64:	add	ip, pc, #0, 12
   10d68:	add	ip, ip, #106496	; 0x1a000
   10d6c:	ldr	pc, [ip, #724]!	; 0x2d4

00010d70 <fputc_unlocked@plt>:
   10d70:	add	ip, pc, #0, 12
   10d74:	add	ip, ip, #106496	; 0x1a000
   10d78:	ldr	pc, [ip, #716]!	; 0x2cc

00010d7c <dcgettext@plt>:
   10d7c:	add	ip, pc, #0, 12
   10d80:	add	ip, ip, #106496	; 0x1a000
   10d84:	ldr	pc, [ip, #708]!	; 0x2c4

00010d88 <realloc@plt>:
   10d88:	add	ip, pc, #0, 12
   10d8c:	add	ip, ip, #106496	; 0x1a000
   10d90:	ldr	pc, [ip, #700]!	; 0x2bc

00010d94 <textdomain@plt>:
   10d94:	add	ip, pc, #0, 12
   10d98:	add	ip, ip, #106496	; 0x1a000
   10d9c:	ldr	pc, [ip, #692]!	; 0x2b4

00010da0 <iswprint@plt>:
   10da0:	add	ip, pc, #0, 12
   10da4:	add	ip, ip, #106496	; 0x1a000
   10da8:	ldr	pc, [ip, #684]!	; 0x2ac

00010dac <fwrite@plt>:
   10dac:	add	ip, pc, #0, 12
   10db0:	add	ip, ip, #106496	; 0x1a000
   10db4:	ldr	pc, [ip, #676]!	; 0x2a4

00010db8 <lseek64@plt>:
   10db8:	add	ip, pc, #0, 12
   10dbc:	add	ip, ip, #106496	; 0x1a000
   10dc0:	ldr	pc, [ip, #668]!	; 0x29c

00010dc4 <__ctype_get_mb_cur_max@plt>:
   10dc4:	add	ip, pc, #0, 12
   10dc8:	add	ip, ip, #106496	; 0x1a000
   10dcc:	ldr	pc, [ip, #660]!	; 0x294

00010dd0 <__fpending@plt>:
   10dd0:	add	ip, pc, #0, 12
   10dd4:	add	ip, ip, #106496	; 0x1a000
   10dd8:	ldr	pc, [ip, #652]!	; 0x28c

00010ddc <mbrtowc@plt>:
   10ddc:	add	ip, pc, #0, 12
   10de0:	add	ip, ip, #106496	; 0x1a000
   10de4:	ldr	pc, [ip, #644]!	; 0x284

00010de8 <error@plt>:
   10de8:	add	ip, pc, #0, 12
   10dec:	add	ip, ip, #106496	; 0x1a000
   10df0:	ldr	pc, [ip, #636]!	; 0x27c

00010df4 <malloc@plt>:
   10df4:	add	ip, pc, #0, 12
   10df8:	add	ip, ip, #106496	; 0x1a000
   10dfc:	ldr	pc, [ip, #628]!	; 0x274

00010e00 <__libc_start_main@plt>:
   10e00:	add	ip, pc, #0, 12
   10e04:	add	ip, ip, #106496	; 0x1a000
   10e08:	ldr	pc, [ip, #620]!	; 0x26c

00010e0c <__freading@plt>:
   10e0c:	add	ip, pc, #0, 12
   10e10:	add	ip, ip, #106496	; 0x1a000
   10e14:	ldr	pc, [ip, #612]!	; 0x264

00010e18 <__gmon_start__@plt>:
   10e18:	add	ip, pc, #0, 12
   10e1c:	add	ip, ip, #106496	; 0x1a000
   10e20:	ldr	pc, [ip, #604]!	; 0x25c

00010e24 <getopt_long@plt>:
   10e24:	add	ip, pc, #0, 12
   10e28:	add	ip, ip, #106496	; 0x1a000
   10e2c:	ldr	pc, [ip, #596]!	; 0x254

00010e30 <__ctype_b_loc@plt>:
   10e30:	add	ip, pc, #0, 12
   10e34:	add	ip, ip, #106496	; 0x1a000
   10e38:	ldr	pc, [ip, #588]!	; 0x24c

00010e3c <exit@plt>:
   10e3c:	add	ip, pc, #0, 12
   10e40:	add	ip, ip, #106496	; 0x1a000
   10e44:	ldr	pc, [ip, #580]!	; 0x244

00010e48 <strlen@plt>:
   10e48:	add	ip, pc, #0, 12
   10e4c:	add	ip, ip, #106496	; 0x1a000
   10e50:	ldr	pc, [ip, #572]!	; 0x23c

00010e54 <strchr@plt>:
   10e54:	add	ip, pc, #0, 12
   10e58:	add	ip, ip, #106496	; 0x1a000
   10e5c:	ldr	pc, [ip, #564]!	; 0x234

00010e60 <__errno_location@plt>:
   10e60:	add	ip, pc, #0, 12
   10e64:	add	ip, ip, #106496	; 0x1a000
   10e68:	ldr	pc, [ip, #556]!	; 0x22c

00010e6c <__cxa_atexit@plt>:
   10e6c:	add	ip, pc, #0, 12
   10e70:	add	ip, ip, #106496	; 0x1a000
   10e74:	ldr	pc, [ip, #548]!	; 0x224

00010e78 <memset@plt>:
   10e78:	add	ip, pc, #0, 12
   10e7c:	add	ip, ip, #106496	; 0x1a000
   10e80:	ldr	pc, [ip, #540]!	; 0x21c

00010e84 <__printf_chk@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #106496	; 0x1a000
   10e8c:	ldr	pc, [ip, #532]!	; 0x214

00010e90 <fileno@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #106496	; 0x1a000
   10e98:	ldr	pc, [ip, #524]!	; 0x20c

00010e9c <__fprintf_chk@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #106496	; 0x1a000
   10ea4:	ldr	pc, [ip, #516]!	; 0x204

00010ea8 <fclose@plt>:
   10ea8:	add	ip, pc, #0, 12
   10eac:	add	ip, ip, #106496	; 0x1a000
   10eb0:	ldr	pc, [ip, #508]!	; 0x1fc

00010eb4 <fseeko64@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #106496	; 0x1a000
   10ebc:	ldr	pc, [ip, #500]!	; 0x1f4

00010ec0 <__uflow@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #106496	; 0x1a000
   10ec8:	ldr	pc, [ip, #492]!	; 0x1ec

00010ecc <__overflow@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #106496	; 0x1a000
   10ed4:	ldr	pc, [ip, #484]!	; 0x1e4

00010ed8 <setlocale@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #106496	; 0x1a000
   10ee0:	ldr	pc, [ip, #476]!	; 0x1dc

00010ee4 <strrchr@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #106496	; 0x1a000
   10eec:	ldr	pc, [ip, #468]!	; 0x1d4

00010ef0 <nl_langinfo@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #106496	; 0x1a000
   10ef8:	ldr	pc, [ip, #460]!	; 0x1cc

00010efc <clearerr_unlocked@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #106496	; 0x1a000
   10f04:	ldr	pc, [ip, #452]!	; 0x1c4

00010f08 <fopen64@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #106496	; 0x1a000
   10f10:	ldr	pc, [ip, #444]!	; 0x1bc

00010f14 <bindtextdomain@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #106496	; 0x1a000
   10f1c:	ldr	pc, [ip, #436]!	; 0x1b4

00010f20 <strncmp@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #106496	; 0x1a000
   10f28:	ldr	pc, [ip, #428]!	; 0x1ac

00010f2c <abort@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #106496	; 0x1a000
   10f34:	ldr	pc, [ip, #420]!	; 0x1a4

00010f38 <__assert_fail@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #106496	; 0x1a000
   10f40:	ldr	pc, [ip, #412]!	; 0x19c

Disassembly of section .text:

00010f48 <.text>:
   10f48:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10f4c:	mov	r5, r0
   10f50:	ldr	fp, [pc, #1268]	; 1144c <__assert_fail@plt+0x514>
   10f54:	sub	sp, sp, #44	; 0x2c
   10f58:	ldr	r0, [r1]
   10f5c:	mov	r4, r1
   10f60:	bl	12f1c <__assert_fail@plt+0x1fe4>
   10f64:	mov	r1, fp
   10f68:	mov	r0, #6
   10f6c:	bl	10ed8 <setlocale@plt>
   10f70:	ldr	r1, [pc, #1240]	; 11450 <__assert_fail@plt+0x518>
   10f74:	ldr	r0, [pc, #1240]	; 11454 <__assert_fail@plt+0x51c>
   10f78:	bl	10f14 <bindtextdomain@plt>
   10f7c:	ldr	r6, [pc, #1236]	; 11458 <__assert_fail@plt+0x520>
   10f80:	ldr	r8, [pc, #1236]	; 1145c <__assert_fail@plt+0x524>
   10f84:	ldr	r0, [pc, #1224]	; 11454 <__assert_fail@plt+0x51c>
   10f88:	bl	10d94 <textdomain@plt>
   10f8c:	ldr	r0, [pc, #1228]	; 11460 <__assert_fail@plt+0x528>
   10f90:	bl	198a0 <__assert_fail@plt+0x8968>
   10f94:	mov	r3, #0
   10f98:	mov	r2, #75	; 0x4b
   10f9c:	cmp	r5, #1
   10fa0:	str	fp, [r8, #3484]	; 0xd9c
   10fa4:	str	r2, [r8, #3452]	; 0xd7c
   10fa8:	str	r3, [r8, #3488]	; 0xda0
   10fac:	strb	r3, [r6, #327]	; 0x147
   10fb0:	strb	r3, [r6, #324]	; 0x144
   10fb4:	strb	r3, [r6, #326]	; 0x146
   10fb8:	strb	r3, [r6, #325]	; 0x145
   10fbc:	str	r3, [r6, #332]	; 0x14c
   10fc0:	str	r3, [r6, #320]	; 0x140
   10fc4:	ble	10fd8 <__assert_fail@plt+0xa0>
   10fc8:	ldr	r2, [r4, #4]
   10fcc:	ldrb	r1, [r2]
   10fd0:	cmp	r1, #45	; 0x2d
   10fd4:	beq	111a0 <__assert_fail@plt+0x268>
   10fd8:	str	r3, [sp, #32]
   10fdc:	mov	r3, #0
   10fe0:	ldr	sl, [pc, #1148]	; 11464 <__assert_fail@plt+0x52c>
   10fe4:	ldr	r9, [pc, #1148]	; 11468 <__assert_fail@plt+0x530>
   10fe8:	mov	r7, r3
   10fec:	str	r3, [sp, #28]
   10ff0:	str	r7, [sp]
   10ff4:	mov	r3, sl
   10ff8:	mov	r2, r9
   10ffc:	mov	r1, r4
   11000:	mov	r0, r5
   11004:	bl	10e24 <getopt_long@plt>
   11008:	cmn	r0, #1
   1100c:	beq	111f4 <__assert_fail@plt+0x2bc>
   11010:	cmp	r0, #112	; 0x70
   11014:	beq	11108 <__assert_fail@plt+0x1d0>
   11018:	bgt	11048 <__assert_fail@plt+0x110>
   1101c:	cmn	r0, #2
   11020:	beq	11100 <__assert_fail@plt+0x1c8>
   11024:	ble	110a0 <__assert_fail@plt+0x168>
   11028:	cmp	r0, #99	; 0x63
   1102c:	beq	11080 <__assert_fail@plt+0x148>
   11030:	cmp	r0, #103	; 0x67
   11034:	bne	110e8 <__assert_fail@plt+0x1b0>
   11038:	ldr	r3, [pc, #1068]	; 1146c <__assert_fail@plt+0x534>
   1103c:	ldr	r3, [r3]
   11040:	str	r3, [sp, #28]
   11044:	b	10ff0 <__assert_fail@plt+0xb8>
   11048:	cmp	r0, #116	; 0x74
   1104c:	beq	110dc <__assert_fail@plt+0x1a4>
   11050:	ble	1108c <__assert_fail@plt+0x154>
   11054:	cmp	r0, #117	; 0x75
   11058:	beq	11074 <__assert_fail@plt+0x13c>
   1105c:	cmp	r0, #119	; 0x77
   11060:	bne	110e8 <__assert_fail@plt+0x1b0>
   11064:	ldr	r3, [pc, #1024]	; 1146c <__assert_fail@plt+0x534>
   11068:	ldr	r3, [r3]
   1106c:	str	r3, [sp, #32]
   11070:	b	10ff0 <__assert_fail@plt+0xb8>
   11074:	mov	r3, #1
   11078:	strb	r3, [r6, #327]	; 0x147
   1107c:	b	10ff0 <__assert_fail@plt+0xb8>
   11080:	mov	r3, #1
   11084:	strb	r3, [r6, #325]	; 0x145
   11088:	b	10ff0 <__assert_fail@plt+0xb8>
   1108c:	cmp	r0, #115	; 0x73
   11090:	bne	110e8 <__assert_fail@plt+0x1b0>
   11094:	mov	r3, #1
   11098:	strb	r3, [r6, #324]	; 0x144
   1109c:	b	10ff0 <__assert_fail@plt+0xb8>
   110a0:	cmn	r0, #3
   110a4:	mov	r3, r0
   110a8:	bne	110ec <__assert_fail@plt+0x1b4>
   110ac:	ldr	r1, [pc, #956]	; 11470 <__assert_fail@plt+0x538>
   110b0:	ldr	r3, [pc, #956]	; 11474 <__assert_fail@plt+0x53c>
   110b4:	ldr	r2, [pc, #956]	; 11478 <__assert_fail@plt+0x540>
   110b8:	str	r7, [sp, #4]
   110bc:	ldr	r0, [r1]
   110c0:	ldr	r3, [r3]
   110c4:	ldr	r1, [pc, #944]	; 1147c <__assert_fail@plt+0x544>
   110c8:	str	r2, [sp]
   110cc:	ldr	r2, [pc, #940]	; 11480 <__assert_fail@plt+0x548>
   110d0:	bl	177bc <__assert_fail@plt+0x6884>
   110d4:	mov	r0, #0
   110d8:	bl	10e3c <exit@plt>
   110dc:	mov	r3, #1
   110e0:	strb	r3, [r6, #326]	; 0x146
   110e4:	b	10ff0 <__assert_fail@plt+0xb8>
   110e8:	mov	r3, r0
   110ec:	sub	r2, r3, #48	; 0x30
   110f0:	cmp	r2, #9
   110f4:	bls	111c8 <__assert_fail@plt+0x290>
   110f8:	mov	r0, #1
   110fc:	bl	12900 <__assert_fail@plt+0x19c8>
   11100:	mov	r0, #0
   11104:	bl	12900 <__assert_fail@plt+0x19c8>
   11108:	ldr	r3, [pc, #860]	; 1146c <__assert_fail@plt+0x534>
   1110c:	str	r7, [r6, #320]	; 0x140
   11110:	ldr	r2, [r3]
   11114:	ldrb	r3, [r2]
   11118:	cmp	r3, #32
   1111c:	bne	11140 <__assert_fail@plt+0x208>
   11120:	mov	r0, r2
   11124:	rsb	r2, r2, #1
   11128:	add	r1, r0, r2
   1112c:	ldrb	r3, [r0, #1]!
   11130:	cmp	r3, #32
   11134:	beq	11128 <__assert_fail@plt+0x1f0>
   11138:	mov	r2, r0
   1113c:	str	r1, [r6, #320]	; 0x140
   11140:	mov	r0, r2
   11144:	str	r2, [r8, #3484]	; 0xd9c
   11148:	str	r2, [sp, #36]	; 0x24
   1114c:	bl	10e48 <strlen@plt>
   11150:	ldr	r2, [sp, #36]	; 0x24
   11154:	add	ip, r2, r0
   11158:	cmp	ip, r2
   1115c:	str	r0, [r6, #332]	; 0x14c
   11160:	bls	11190 <__assert_fail@plt+0x258>
   11164:	ldrb	r3, [ip, #-1]
   11168:	cmp	r3, #32
   1116c:	bne	11190 <__assert_fail@plt+0x258>
   11170:	sub	r3, ip, #1
   11174:	b	11184 <__assert_fail@plt+0x24c>
   11178:	ldrb	r1, [r3, #-1]!
   1117c:	cmp	r1, #32
   11180:	bne	11190 <__assert_fail@plt+0x258>
   11184:	cmp	r2, r3
   11188:	mov	ip, r3
   1118c:	bne	11178 <__assert_fail@plt+0x240>
   11190:	sub	r0, ip, r2
   11194:	str	r0, [r8, #3488]	; 0xda0
   11198:	strb	r7, [ip]
   1119c:	b	10ff0 <__assert_fail@plt+0xb8>
   111a0:	ldrb	r1, [r2, #1]
   111a4:	sub	r1, r1, #48	; 0x30
   111a8:	cmp	r1, #9
   111ac:	bhi	10fd8 <__assert_fail@plt+0xa0>
   111b0:	ldr	r3, [r4]
   111b4:	add	r2, r2, #1
   111b8:	str	r2, [sp, #32]
   111bc:	sub	r5, r5, #1
   111c0:	str	r3, [r4, #4]!
   111c4:	b	10fdc <__assert_fail@plt+0xa4>
   111c8:	mov	r2, #5
   111cc:	ldr	r1, [pc, #688]	; 11484 <__assert_fail@plt+0x54c>
   111d0:	mov	r0, #0
   111d4:	str	r3, [sp, #28]
   111d8:	bl	10d7c <dcgettext@plt>
   111dc:	mov	r1, #0
   111e0:	ldr	r3, [sp, #28]
   111e4:	mov	r2, r0
   111e8:	mov	r0, r1
   111ec:	bl	10de8 <error@plt>
   111f0:	b	110f8 <__assert_fail@plt+0x1c0>
   111f4:	ldr	r6, [sp, #32]
   111f8:	cmp	r6, #0
   111fc:	beq	113dc <__assert_fail@plt+0x4a4>
   11200:	mov	r2, #5
   11204:	ldr	r1, [pc, #636]	; 11488 <__assert_fail@plt+0x550>
   11208:	mov	r0, #0
   1120c:	bl	10d7c <dcgettext@plt>
   11210:	ldr	r2, [pc, #628]	; 1148c <__assert_fail@plt+0x554>
   11214:	mov	r3, #0
   11218:	str	r7, [sp, #16]
   1121c:	strd	r2, [sp]
   11220:	str	fp, [sp, #8]
   11224:	mov	r3, #0
   11228:	mov	r2, #0
   1122c:	str	r0, [sp, #12]
   11230:	mov	r0, r6
   11234:	bl	18168 <__assert_fail@plt+0x7230>
   11238:	ldr	r3, [sp, #28]
   1123c:	cmp	r3, #0
   11240:	mov	r6, r0
   11244:	str	r0, [r8, #3452]	; 0xd7c
   11248:	beq	11320 <__assert_fail@plt+0x3e8>
   1124c:	mov	r2, #5
   11250:	ldr	r1, [pc, #560]	; 11488 <__assert_fail@plt+0x550>
   11254:	mov	r0, #0
   11258:	bl	10d7c <dcgettext@plt>
   1125c:	mov	r2, r6
   11260:	asr	r3, r6, #31
   11264:	str	r7, [sp, #16]
   11268:	strd	r2, [sp]
   1126c:	str	fp, [sp, #8]
   11270:	mov	r2, #0
   11274:	mov	r3, #0
   11278:	str	r0, [sp, #12]
   1127c:	ldr	r0, [sp, #28]
   11280:	bl	18168 <__assert_fail@plt+0x7230>
   11284:	str	r0, [r8, #3464]	; 0xd88
   11288:	ldr	r7, [pc, #512]	; 11490 <__assert_fail@plt+0x558>
   1128c:	ldr	r3, [r7]
   11290:	cmp	r3, r5
   11294:	beq	11434 <__assert_fail@plt+0x4fc>
   11298:	movge	r6, #1
   1129c:	bge	1133c <__assert_fail@plt+0x404>
   112a0:	ldr	r8, [pc, #492]	; 11494 <__assert_fail@plt+0x55c>
   112a4:	mov	sl, #0
   112a8:	mov	r6, #1
   112ac:	b	112e0 <__assert_fail@plt+0x3a8>
   112b0:	ldr	r3, [pc, #480]	; 11498 <__assert_fail@plt+0x560>
   112b4:	mov	r1, fp
   112b8:	mov	sl, #1
   112bc:	ldr	r0, [r3]
   112c0:	bl	122a4 <__assert_fail@plt+0x136c>
   112c4:	and	r6, r6, r0
   112c8:	uxtb	r6, r6
   112cc:	ldr	r3, [r7]
   112d0:	add	r3, r3, #1
   112d4:	cmp	r5, r3
   112d8:	str	r3, [r7]
   112dc:	ble	1134c <__assert_fail@plt+0x414>
   112e0:	ldr	fp, [r4, r3, lsl #2]
   112e4:	mov	r1, r8
   112e8:	mov	r0, fp
   112ec:	bl	10cec <strcmp@plt>
   112f0:	cmp	r0, #0
   112f4:	beq	112b0 <__assert_fail@plt+0x378>
   112f8:	ldr	r1, [pc, #412]	; 1149c <__assert_fail@plt+0x564>
   112fc:	mov	r0, fp
   11300:	bl	10f08 <fopen64@plt>
   11304:	subs	r9, r0, #0
   11308:	beq	11394 <__assert_fail@plt+0x45c>
   1130c:	mov	r1, fp
   11310:	bl	122a4 <__assert_fail@plt+0x136c>
   11314:	and	r6, r6, r0
   11318:	uxtb	r6, r6
   1131c:	b	112cc <__assert_fail@plt+0x394>
   11320:	ldr	r3, [r8, #3452]	; 0xd7c
   11324:	mov	r0, #187	; 0xbb
   11328:	mov	r1, #200	; 0xc8
   1132c:	mul	r0, r0, r3
   11330:	bl	195ec <__assert_fail@plt+0x86b4>
   11334:	str	r0, [r8, #3464]	; 0xd88
   11338:	b	11288 <__assert_fail@plt+0x350>
   1133c:	eor	r0, r6, #1
   11340:	uxtb	r0, r0
   11344:	add	sp, sp, #44	; 0x2c
   11348:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1134c:	cmp	sl, #0
   11350:	beq	1133c <__assert_fail@plt+0x404>
   11354:	ldr	r4, [pc, #316]	; 11498 <__assert_fail@plt+0x560>
   11358:	ldr	r0, [r4]
   1135c:	bl	12d7c <__assert_fail@plt+0x1e44>
   11360:	cmp	r0, #0
   11364:	beq	1133c <__assert_fail@plt+0x404>
   11368:	bl	10e60 <__errno_location@plt>
   1136c:	mov	r2, #5
   11370:	ldr	r1, [pc, #296]	; 114a0 <__assert_fail@plt+0x568>
   11374:	ldr	r4, [r0]
   11378:	mov	r0, #0
   1137c:	bl	10d7c <dcgettext@plt>
   11380:	mov	r1, r4
   11384:	ldr	r2, [pc, #280]	; 114a4 <__assert_fail@plt+0x56c>
   11388:	mov	r3, r0
   1138c:	mov	r0, #1
   11390:	bl	10de8 <error@plt>
   11394:	bl	10e60 <__errno_location@plt>
   11398:	mov	r2, #5
   1139c:	ldr	r1, [pc, #260]	; 114a8 <__assert_fail@plt+0x570>
   113a0:	mov	r6, r9
   113a4:	ldr	r3, [r0]
   113a8:	mov	r0, r9
   113ac:	str	r3, [sp, #28]
   113b0:	bl	10d7c <dcgettext@plt>
   113b4:	mov	r1, fp
   113b8:	str	r0, [sp, #32]
   113bc:	mov	r0, #4
   113c0:	bl	15478 <__assert_fail@plt+0x4540>
   113c4:	ldr	r2, [sp, #32]
   113c8:	ldr	r1, [sp, #28]
   113cc:	mov	r3, r0
   113d0:	mov	r0, r9
   113d4:	bl	10de8 <error@plt>
   113d8:	b	112cc <__assert_fail@plt+0x394>
   113dc:	ldr	r3, [sp, #28]
   113e0:	cmp	r3, #0
   113e4:	beq	11320 <__assert_fail@plt+0x3e8>
   113e8:	ldr	r6, [sp, #32]
   113ec:	mov	r2, #5
   113f0:	ldr	r1, [pc, #144]	; 11488 <__assert_fail@plt+0x550>
   113f4:	mov	r0, r6
   113f8:	bl	10d7c <dcgettext@plt>
   113fc:	mov	r2, #75	; 0x4b
   11400:	mov	r3, #0
   11404:	str	r6, [sp, #16]
   11408:	strd	r2, [sp]
   1140c:	str	fp, [sp, #8]
   11410:	mov	r3, #0
   11414:	mov	r2, #0
   11418:	str	r0, [sp, #12]
   1141c:	ldr	r0, [sp, #28]
   11420:	bl	18168 <__assert_fail@plt+0x7230>
   11424:	add	r3, r0, #10
   11428:	str	r0, [r8, #3464]	; 0xd88
   1142c:	str	r3, [r8, #3452]	; 0xd7c
   11430:	b	11288 <__assert_fail@plt+0x350>
   11434:	ldr	r4, [pc, #92]	; 11498 <__assert_fail@plt+0x560>
   11438:	ldr	r1, [pc, #84]	; 11494 <__assert_fail@plt+0x55c>
   1143c:	ldr	r0, [r4]
   11440:	bl	122a4 <__assert_fail@plt+0x136c>
   11444:	mov	r6, r0
   11448:	b	11358 <__assert_fail@plt+0x420>
   1144c:	andeq	r9, r1, r4, asr #21
   11450:	ldrdeq	r9, [r1], -r8
   11454:	andeq	r9, r1, r0, lsr lr
   11458:	andeq	r3, r3, r0, asr #2
   1145c:	andeq	r1, r3, r8, asr #2
   11460:	andeq	r2, r1, r8, asr ip
   11464:	andeq	r9, r1, ip, lsl #18
   11468:	andeq	r9, r1, r0, ror #30
   1146c:	andeq	fp, r2, r8, asr r1
   11470:	andeq	fp, r2, r4, asr r1
   11474:	andeq	fp, r2, ip, ror #1
   11478:	andeq	r9, r1, r0, asr pc
   1147c:	andeq	r9, r1, ip, ror #19
   11480:	andeq	r9, r1, ip, lsr #28
   11484:	strdeq	r9, [r1], -r0
   11488:	andeq	r9, r1, r8, ror pc
   1148c:	andeq	r0, r0, r4, asr #19
   11490:	andeq	fp, r2, r0, asr #2
   11494:	andeq	r9, r1, r8, lsl #31
   11498:	andeq	fp, r2, r0, asr r1
   1149c:	andeq	r9, r1, ip, lsl #31
   114a0:	andeq	r9, r1, ip, lsr #31
   114a4:	strheq	sl, [r1], -r0
   114a8:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   114ac:	mov	fp, #0
   114b0:	mov	lr, #0
   114b4:	pop	{r1}		; (ldr r1, [sp], #4)
   114b8:	mov	r2, sp
   114bc:	push	{r2}		; (str r2, [sp, #-4]!)
   114c0:	push	{r0}		; (str r0, [sp, #-4]!)
   114c4:	ldr	ip, [pc, #16]	; 114dc <__assert_fail@plt+0x5a4>
   114c8:	push	{ip}		; (str ip, [sp, #-4]!)
   114cc:	ldr	r0, [pc, #12]	; 114e0 <__assert_fail@plt+0x5a8>
   114d0:	ldr	r3, [pc, #12]	; 114e4 <__assert_fail@plt+0x5ac>
   114d4:	bl	10e00 <__libc_start_main@plt>
   114d8:	bl	10f2c <abort@plt>
   114dc:	muleq	r1, ip, r8
   114e0:	andeq	r0, r1, r8, asr #30
   114e4:	andeq	r9, r1, ip, lsr r8
   114e8:	ldr	r3, [pc, #20]	; 11504 <__assert_fail@plt+0x5cc>
   114ec:	ldr	r2, [pc, #20]	; 11508 <__assert_fail@plt+0x5d0>
   114f0:	add	r3, pc, r3
   114f4:	ldr	r2, [r3, r2]
   114f8:	cmp	r2, #0
   114fc:	bxeq	lr
   11500:	b	10e18 <__gmon_start__@plt>
   11504:	andeq	r9, r1, r8, lsl #22
   11508:	andeq	r0, r0, r0, ror #1
   1150c:	ldr	r3, [pc, #28]	; 11530 <__assert_fail@plt+0x5f8>
   11510:	ldr	r0, [pc, #28]	; 11534 <__assert_fail@plt+0x5fc>
   11514:	sub	r3, r3, r0
   11518:	cmp	r3, #6
   1151c:	bxls	lr
   11520:	ldr	r3, [pc, #16]	; 11538 <__assert_fail@plt+0x600>
   11524:	cmp	r3, #0
   11528:	bxeq	lr
   1152c:	bx	r3
   11530:	andeq	fp, r2, r7, lsr r1
   11534:	andeq	fp, r2, r4, lsr r1
   11538:	andeq	r0, r0, r0
   1153c:	ldr	r1, [pc, #36]	; 11568 <__assert_fail@plt+0x630>
   11540:	ldr	r0, [pc, #36]	; 1156c <__assert_fail@plt+0x634>
   11544:	sub	r1, r1, r0
   11548:	asr	r1, r1, #2
   1154c:	add	r1, r1, r1, lsr #31
   11550:	asrs	r1, r1, #1
   11554:	bxeq	lr
   11558:	ldr	r3, [pc, #16]	; 11570 <__assert_fail@plt+0x638>
   1155c:	cmp	r3, #0
   11560:	bxeq	lr
   11564:	bx	r3
   11568:	andeq	fp, r2, r4, lsr r1
   1156c:	andeq	fp, r2, r4, lsr r1
   11570:	andeq	r0, r0, r0
   11574:	push	{r4, lr}
   11578:	ldr	r4, [pc, #24]	; 11598 <__assert_fail@plt+0x660>
   1157c:	ldrb	r3, [r4]
   11580:	cmp	r3, #0
   11584:	popne	{r4, pc}
   11588:	bl	1150c <__assert_fail@plt+0x5d4>
   1158c:	mov	r3, #1
   11590:	strb	r3, [r4]
   11594:	pop	{r4, pc}
   11598:	andeq	fp, r2, ip, asr r1
   1159c:	ldr	r0, [pc, #40]	; 115cc <__assert_fail@plt+0x694>
   115a0:	ldr	r3, [r0]
   115a4:	cmp	r3, #0
   115a8:	bne	115b0 <__assert_fail@plt+0x678>
   115ac:	b	1153c <__assert_fail@plt+0x604>
   115b0:	ldr	r3, [pc, #24]	; 115d0 <__assert_fail@plt+0x698>
   115b4:	cmp	r3, #0
   115b8:	beq	115ac <__assert_fail@plt+0x674>
   115bc:	push	{r4, lr}
   115c0:	blx	r3
   115c4:	pop	{r4, lr}
   115c8:	b	1153c <__assert_fail@plt+0x604>
   115cc:	andeq	sl, r2, r4, lsl pc
   115d0:	andeq	r0, r0, r0
   115d4:	ldr	r3, [pc, #828]	; 11918 <__assert_fail@plt+0x9e0>
   115d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   115dc:	mov	r2, #0
   115e0:	ldr	r4, [r3, #3448]	; 0xd78
   115e4:	ldr	sl, [pc, #816]	; 1191c <__assert_fail@plt+0x9e4>
   115e8:	sub	sp, sp, #28
   115ec:	ldr	r9, [r3, #3452]	; 0xd7c
   115f0:	sub	r7, r4, #28
   115f4:	str	r2, [r4, #20]
   115f8:	ldr	r2, [r4, #4]
   115fc:	cmp	r7, sl
   11600:	str	r2, [sp, #20]
   11604:	str	r9, [r4, #4]
   11608:	bcc	11734 <__assert_fail@plt+0x7fc>
   1160c:	ldr	r2, [r3, #3456]	; 0xd80
   11610:	ldr	r8, [r3, #3464]	; 0xd88
   11614:	str	r2, [sp, #4]
   11618:	ldr	r2, [r3, #3460]	; 0xd84
   1161c:	ldr	r3, [r3, #3468]	; 0xd8c
   11620:	str	r2, [sp, #16]
   11624:	mvn	r2, #-2147483648	; 0x80000000
   11628:	cmp	r7, sl
   1162c:	beq	11780 <__assert_fail@plt+0x848>
   11630:	ldr	fp, [r7, #4]
   11634:	ldr	r1, [sp, #4]
   11638:	mov	r0, r7
   1163c:	add	ip, r1, fp
   11640:	mov	r5, r2
   11644:	b	11660 <__assert_fail@plt+0x728>
   11648:	ldr	r1, [r0, #-20]	; 0xffffffec
   1164c:	ldr	lr, [r0, #4]
   11650:	add	r1, r1, lr
   11654:	add	ip, ip, r1
   11658:	cmp	r9, ip
   1165c:	ble	116c4 <__assert_fail@plt+0x78c>
   11660:	sub	r1, r8, ip
   11664:	add	r0, r0, #28
   11668:	add	r1, r1, r1, lsl #2
   1166c:	cmp	r4, r0
   11670:	lsl	r1, r1, #1
   11674:	beq	11744 <__assert_fail@plt+0x80c>
   11678:	ldr	lr, [r0, #24]
   1167c:	mul	r1, r1, r1
   11680:	cmp	r4, lr
   11684:	beq	116a0 <__assert_fail@plt+0x768>
   11688:	ldr	lr, [r0, #16]
   1168c:	sub	lr, ip, lr
   11690:	add	lr, lr, lr, lsl #2
   11694:	lsl	lr, lr, #1
   11698:	mul	lr, lr, lr
   1169c:	add	r1, r1, lr, asr #1
   116a0:	ldr	lr, [r0, #20]
   116a4:	add	r1, r1, lr
   116a8:	cmp	r5, r1
   116ac:	ble	11648 <__assert_fail@plt+0x710>
   116b0:	cmp	r4, r0
   116b4:	mov	r5, r1
   116b8:	str	r0, [r7, #24]
   116bc:	str	ip, [r7, #16]
   116c0:	bne	11648 <__assert_fail@plt+0x710>
   116c4:	cmp	r7, sl
   116c8:	bls	11778 <__assert_fail@plt+0x840>
   116cc:	ldrb	r1, [r7, #-16]
   116d0:	tst	r1, #2
   116d4:	beq	11754 <__assert_fail@plt+0x81c>
   116d8:	tst	r1, #8
   116dc:	ldr	r1, [pc, #572]	; 11920 <__assert_fail@plt+0x9e8>
   116e0:	movne	r6, #2400	; 0x960
   116e4:	moveq	r6, r1
   116e8:	ldrb	r1, [r7, #12]
   116ec:	tst	r1, #1
   116f0:	subne	r6, r6, #1600	; 0x640
   116f4:	bne	11720 <__assert_fail@plt+0x7e8>
   116f8:	tst	r1, #8
   116fc:	beq	11720 <__assert_fail@plt+0x7e8>
   11700:	add	r1, fp, #2
   11704:	ldr	r0, [pc, #536]	; 11924 <__assert_fail@plt+0x9ec>
   11708:	str	r3, [sp, #12]
   1170c:	str	r2, [sp, #8]
   11710:	bl	195ec <__assert_fail@plt+0x86b4>
   11714:	ldr	r3, [sp, #12]
   11718:	ldr	r2, [sp, #8]
   1171c:	add	r6, r6, r0
   11720:	add	r5, r6, r5
   11724:	str	r5, [r7, #20]
   11728:	sub	r7, r7, #28
   1172c:	cmp	r7, sl
   11730:	bcs	11628 <__assert_fail@plt+0x6f0>
   11734:	ldr	r3, [sp, #20]
   11738:	str	r3, [r4, #4]
   1173c:	add	sp, sp, #28
   11740:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11744:	ldr	r1, [r4, #20]
   11748:	cmp	r5, r1
   1174c:	bgt	116b0 <__assert_fail@plt+0x778>
   11750:	b	116c4 <__assert_fail@plt+0x78c>
   11754:	tst	r1, #4
   11758:	ldrne	r6, [pc, #456]	; 11928 <__assert_fail@plt+0x9f0>
   1175c:	bne	116e8 <__assert_fail@plt+0x7b0>
   11760:	ldr	r1, [pc, #452]	; 1192c <__assert_fail@plt+0x9f4>
   11764:	cmp	r7, r1
   11768:	bls	11778 <__assert_fail@plt+0x840>
   1176c:	ldrb	r1, [r7, #-44]	; 0xffffffd4
   11770:	tst	r1, #8
   11774:	bne	118ec <__assert_fail@plt+0x9b4>
   11778:	ldr	r6, [pc, #432]	; 11930 <__assert_fail@plt+0x9f8>
   1177c:	b	116e8 <__assert_fail@plt+0x7b0>
   11780:	ldr	fp, [r7, #4]
   11784:	ldr	r1, [sp, #16]
   11788:	cmp	r3, #0
   1178c:	mov	r5, r2
   11790:	add	lr, r1, fp
   11794:	movle	r0, r7
   11798:	ble	118c0 <__assert_fail@plt+0x988>
   1179c:	mov	ip, r7
   117a0:	b	1181c <__assert_fail@plt+0x8e4>
   117a4:	ldr	r0, [ip, #24]
   117a8:	mul	r1, r1, r1
   117ac:	cmp	r4, r0
   117b0:	beq	117cc <__assert_fail@plt+0x894>
   117b4:	ldr	r0, [ip, #16]
   117b8:	sub	r0, lr, r0
   117bc:	add	r0, r0, r0, lsl #2
   117c0:	lsl	r0, r0, #1
   117c4:	mul	r0, r0, r0
   117c8:	add	r1, r1, r0, asr #1
   117cc:	sub	r0, lr, r3
   117d0:	ldr	r6, [ip, #20]
   117d4:	add	r0, r0, r0, lsl #2
   117d8:	add	r1, r1, r6
   117dc:	lsl	r0, r0, #1
   117e0:	mul	r0, r0, r0
   117e4:	add	r0, r1, r0, asr #1
   117e8:	cmp	r5, r0
   117ec:	ble	11804 <__assert_fail@plt+0x8cc>
   117f0:	mov	r5, r0
   117f4:	cmp	r4, ip
   117f8:	str	ip, [sl, #24]
   117fc:	str	lr, [sl, #16]
   11800:	beq	11778 <__assert_fail@plt+0x840>
   11804:	ldr	r1, [ip, #-20]	; 0xffffffec
   11808:	ldr	r0, [ip, #4]
   1180c:	add	r1, r1, r0
   11810:	add	lr, lr, r1
   11814:	cmp	r9, lr
   11818:	ble	11778 <__assert_fail@plt+0x840>
   1181c:	sub	r1, r8, lr
   11820:	add	ip, ip, #28
   11824:	add	r1, r1, r1, lsl #2
   11828:	cmp	r4, ip
   1182c:	lsl	r1, r1, #1
   11830:	bne	117a4 <__assert_fail@plt+0x86c>
   11834:	sub	r1, lr, r3
   11838:	ldr	r0, [r4, #20]
   1183c:	add	r1, r1, r1, lsl #2
   11840:	lsl	r1, r1, #1
   11844:	mul	r1, r1, r1
   11848:	add	r1, r0, r1, asr #1
   1184c:	cmp	r5, r1
   11850:	ble	11778 <__assert_fail@plt+0x840>
   11854:	mov	r5, r1
   11858:	b	117f4 <__assert_fail@plt+0x8bc>
   1185c:	ldr	ip, [r0, #24]
   11860:	mul	r1, r1, r1
   11864:	cmp	r4, ip
   11868:	beq	11884 <__assert_fail@plt+0x94c>
   1186c:	ldr	ip, [r0, #16]
   11870:	sub	ip, lr, ip
   11874:	add	ip, ip, ip, lsl #2
   11878:	lsl	ip, ip, #1
   1187c:	mul	ip, ip, ip
   11880:	add	r1, r1, ip, asr #1
   11884:	ldr	ip, [r0, #20]
   11888:	add	r1, r1, ip
   1188c:	cmp	r5, r1
   11890:	ble	118a8 <__assert_fail@plt+0x970>
   11894:	cmp	r4, r0
   11898:	mov	r5, r1
   1189c:	str	r0, [sl, #24]
   118a0:	str	lr, [sl, #16]
   118a4:	beq	11778 <__assert_fail@plt+0x840>
   118a8:	ldr	r1, [r0, #-20]	; 0xffffffec
   118ac:	ldr	ip, [r0, #4]
   118b0:	add	r1, r1, ip
   118b4:	add	lr, lr, r1
   118b8:	cmp	r9, lr
   118bc:	ble	11778 <__assert_fail@plt+0x840>
   118c0:	sub	r1, r8, lr
   118c4:	add	r0, r0, #28
   118c8:	add	r1, r1, r1, lsl #2
   118cc:	cmp	r4, r0
   118d0:	lsl	r1, r1, #1
   118d4:	bne	1185c <__assert_fail@plt+0x924>
   118d8:	ldr	r1, [r4, #20]
   118dc:	cmp	r5, r1
   118e0:	bgt	11894 <__assert_fail@plt+0x95c>
   118e4:	ldr	r6, [pc, #68]	; 11930 <__assert_fail@plt+0x9f8>
   118e8:	b	116e8 <__assert_fail@plt+0x7b0>
   118ec:	ldr	r1, [r7, #-24]	; 0xffffffe8
   118f0:	ldr	r0, [pc, #60]	; 11934 <__assert_fail@plt+0x9fc>
   118f4:	add	r1, r1, #2
   118f8:	str	r3, [sp, #12]
   118fc:	str	r2, [sp, #8]
   11900:	bl	195ec <__assert_fail@plt+0x86b4>
   11904:	ldr	r2, [sp, #8]
   11908:	ldr	r3, [sp, #12]
   1190c:	add	r0, r0, #4864	; 0x1300
   11910:	add	r6, r0, #36	; 0x24
   11914:	b	116e8 <__assert_fail@plt+0x7b0>
   11918:	andeq	r1, r3, r8, asr #2
   1191c:	andeq	fp, r2, r0, ror #2
   11920:	andeq	r9, r5, r4, ror #2
   11924:	andeq	r5, r0, r4, ror #15
   11928:	andeq	r0, r0, r4, ror #25
   1192c:	andeq	fp, r2, ip, ror r1
   11930:	andeq	r1, r0, r4, lsr #6
   11934:	andeq	r9, r0, r0, asr #24
   11938:	push	{r4, r5, r6, r7, r8, lr}
   1193c:	ldr	r4, [pc, #284]	; 11a60 <__assert_fail@plt+0xb28>
   11940:	ldrb	r2, [r4, #3476]	; 0xd94
   11944:	ldr	r3, [r4, #3472]	; 0xd90
   11948:	cmp	r2, #0
   1194c:	add	r6, r3, r0
   11950:	beq	119f4 <__assert_fail@plt+0xabc>
   11954:	cmp	r6, #0
   11958:	add	r7, r6, #7
   1195c:	movge	r7, r6
   11960:	bic	r7, r7, #7
   11964:	add	r2, r3, #1
   11968:	cmp	r7, r2
   1196c:	ble	119f4 <__assert_fail@plt+0xabc>
   11970:	cmp	r3, r7
   11974:	bge	119f4 <__assert_fail@plt+0xabc>
   11978:	ldr	r5, [pc, #228]	; 11a64 <__assert_fail@plt+0xb2c>
   1197c:	mov	r8, #9
   11980:	b	119b0 <__assert_fail@plt+0xa78>
   11984:	ldr	r3, [r4, #3472]	; 0xd90
   11988:	str	r1, [r0, #20]
   1198c:	cmp	r3, #0
   11990:	add	r1, r3, #7
   11994:	movlt	r3, r1
   11998:	bic	r3, r3, #7
   1199c:	add	r3, r3, #8
   119a0:	cmp	r7, r3
   119a4:	strb	r8, [r2]
   119a8:	str	r3, [r4, #3472]	; 0xd90
   119ac:	ble	119f4 <__assert_fail@plt+0xabc>
   119b0:	ldr	r0, [r5]
   119b4:	ldr	r2, [r0, #20]
   119b8:	ldr	r3, [r0, #24]
   119bc:	add	r1, r2, #1
   119c0:	cmp	r2, r3
   119c4:	bcc	11984 <__assert_fail@plt+0xa4c>
   119c8:	mov	r1, r8
   119cc:	bl	10ecc <__overflow@plt>
   119d0:	ldr	r3, [r4, #3472]	; 0xd90
   119d4:	cmp	r3, #0
   119d8:	add	r2, r3, #7
   119dc:	movlt	r3, r2
   119e0:	bic	r3, r3, #7
   119e4:	add	r3, r3, #8
   119e8:	cmp	r7, r3
   119ec:	str	r3, [r4, #3472]	; 0xd90
   119f0:	bgt	119b0 <__assert_fail@plt+0xa78>
   119f4:	cmp	r6, r3
   119f8:	pople	{r4, r5, r6, r7, r8, pc}
   119fc:	ldr	r5, [pc, #96]	; 11a64 <__assert_fail@plt+0xb2c>
   11a00:	mov	r7, #32
   11a04:	b	11a24 <__assert_fail@plt+0xaec>
   11a08:	ldr	r3, [r4, #3472]	; 0xd90
   11a0c:	str	r1, [r0, #20]
   11a10:	add	r3, r3, #1
   11a14:	cmp	r6, r3
   11a18:	strb	r7, [r2]
   11a1c:	str	r3, [r4, #3472]	; 0xd90
   11a20:	ble	11a5c <__assert_fail@plt+0xb24>
   11a24:	ldr	r0, [r5]
   11a28:	ldr	r2, [r0, #20]
   11a2c:	ldr	r3, [r0, #24]
   11a30:	add	r1, r2, #1
   11a34:	cmp	r2, r3
   11a38:	bcc	11a08 <__assert_fail@plt+0xad0>
   11a3c:	mov	r1, r7
   11a40:	bl	10ecc <__overflow@plt>
   11a44:	ldr	r3, [r4, #3472]	; 0xd90
   11a48:	add	r3, r3, #1
   11a4c:	cmp	r6, r3
   11a50:	str	r3, [r4, #3472]	; 0xd90
   11a54:	bgt	11a24 <__assert_fail@plt+0xaec>
   11a58:	pop	{r4, r5, r6, r7, r8, pc}
   11a5c:	pop	{r4, r5, r6, r7, r8, pc}
   11a60:	andeq	r1, r3, r8, asr #2
   11a64:	andeq	fp, r2, r4, asr r1
   11a68:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11a6c:	mov	r3, #0
   11a70:	ldr	r6, [pc, #332]	; 11bc4 <__assert_fail@plt+0xc8c>
   11a74:	ldr	r9, [pc, #332]	; 11bc8 <__assert_fail@plt+0xc90>
   11a78:	mov	sl, r0
   11a7c:	ldr	r0, [r6, #3480]	; 0xd98
   11a80:	mov	r4, r1
   11a84:	str	r3, [r6, #3472]	; 0xd90
   11a88:	bl	11938 <__assert_fail@plt+0xa00>
   11a8c:	ldr	r1, [r9]
   11a90:	ldr	r0, [r6, #3484]	; 0xd9c
   11a94:	bl	10cd4 <fputs_unlocked@plt>
   11a98:	ldr	r3, [r6, #3472]	; 0xd90
   11a9c:	ldr	r2, [r6, #3488]	; 0xda0
   11aa0:	add	r3, r3, r2
   11aa4:	sub	r0, r4, r3
   11aa8:	str	r3, [r6, #3472]	; 0xd90
   11aac:	bl	11938 <__assert_fail@plt+0xa00>
   11ab0:	ldr	r8, [sl, #24]
   11ab4:	sub	r7, r8, #28
   11ab8:	cmp	sl, r7
   11abc:	beq	11b30 <__assert_fail@plt+0xbf8>
   11ac0:	ldr	r4, [sl, #4]
   11ac4:	ldr	r5, [sl]
   11ac8:	cmp	r4, #0
   11acc:	bne	11ae4 <__assert_fail@plt+0xbac>
   11ad0:	b	11b10 <__assert_fail@plt+0xbd8>
   11ad4:	subs	r4, r4, #1
   11ad8:	str	ip, [r0, #20]
   11adc:	strb	r1, [r3]
   11ae0:	beq	11b0c <__assert_fail@plt+0xbd4>
   11ae4:	ldr	r0, [r9]
   11ae8:	ldrb	r1, [r5], #1
   11aec:	ldr	r3, [r0, #20]
   11af0:	ldr	r2, [r0, #24]
   11af4:	add	ip, r3, #1
   11af8:	cmp	r3, r2
   11afc:	bcc	11ad4 <__assert_fail@plt+0xb9c>
   11b00:	bl	10ecc <__overflow@plt>
   11b04:	subs	r4, r4, #1
   11b08:	bne	11ae4 <__assert_fail@plt+0xbac>
   11b0c:	ldr	r4, [sl, #4]
   11b10:	ldr	r3, [r6, #3472]	; 0xd90
   11b14:	ldr	r0, [sl, #8]
   11b18:	add	r4, r3, r4
   11b1c:	add	sl, sl, #28
   11b20:	str	r4, [r6, #3472]	; 0xd90
   11b24:	bl	11938 <__assert_fail@plt+0xa00>
   11b28:	cmp	r7, sl
   11b2c:	bne	11ac0 <__assert_fail@plt+0xb88>
   11b30:	ldr	r4, [r8, #-24]	; 0xffffffe8
   11b34:	ldr	r5, [r8, #-28]	; 0xffffffe4
   11b38:	cmp	r4, #0
   11b3c:	bne	11b54 <__assert_fail@plt+0xc1c>
   11b40:	b	11b80 <__assert_fail@plt+0xc48>
   11b44:	subs	r4, r4, #1
   11b48:	str	ip, [r0, #20]
   11b4c:	strb	r1, [r3]
   11b50:	beq	11b7c <__assert_fail@plt+0xc44>
   11b54:	ldr	r0, [r9]
   11b58:	ldrb	r1, [r5], #1
   11b5c:	ldr	r3, [r0, #20]
   11b60:	ldr	r2, [r0, #24]
   11b64:	add	ip, r3, #1
   11b68:	cmp	r3, r2
   11b6c:	bcc	11b44 <__assert_fail@plt+0xc0c>
   11b70:	bl	10ecc <__overflow@plt>
   11b74:	subs	r4, r4, #1
   11b78:	bne	11b54 <__assert_fail@plt+0xc1c>
   11b7c:	ldr	r4, [r8, #-24]	; 0xffffffe8
   11b80:	ldr	r0, [r9]
   11b84:	ldr	r1, [r6, #3472]	; 0xd90
   11b88:	ldr	r3, [r0, #20]
   11b8c:	ldr	r2, [r0, #24]
   11b90:	add	r4, r4, r1
   11b94:	cmp	r3, r2
   11b98:	str	r4, [r6, #3472]	; 0xd90
   11b9c:	str	r4, [r6, #3468]	; 0xd8c
   11ba0:	bcs	11bb8 <__assert_fail@plt+0xc80>
   11ba4:	add	r1, r3, #1
   11ba8:	mov	r2, #10
   11bac:	str	r1, [r0, #20]
   11bb0:	strb	r2, [r3]
   11bb4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11bb8:	mov	r1, #10
   11bbc:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   11bc0:	b	10ecc <__overflow@plt>
   11bc4:	andeq	r1, r3, r8, asr #2
   11bc8:	andeq	fp, r2, r4, asr r1
   11bcc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11bd0:	ldr	r5, [pc, #320]	; 11d18 <__assert_fail@plt+0xde0>
   11bd4:	ldr	r6, [pc, #320]	; 11d1c <__assert_fail@plt+0xde4>
   11bd8:	ldr	r7, [r5, #3448]	; 0xd78
   11bdc:	cmp	r7, r6
   11be0:	beq	11ce8 <__assert_fail@plt+0xdb0>
   11be4:	bl	115d4 <__assert_fail@plt+0x69c>
   11be8:	ldr	r1, [r6, #24]
   11bec:	cmp	r7, r1
   11bf0:	beq	11d10 <__assert_fail@plt+0xdd8>
   11bf4:	ldr	r2, [r1, #20]
   11bf8:	mov	r4, r7
   11bfc:	mvn	r3, #-2147483648	; 0x80000000
   11c00:	ldr	ip, [r1, #24]
   11c04:	ldr	r0, [ip, #20]
   11c08:	sub	r2, r2, r0
   11c0c:	cmp	r2, r3
   11c10:	movlt	r4, r1
   11c14:	cmp	r2, r3
   11c18:	movlt	r3, r2
   11c1c:	add	r2, r3, #9
   11c20:	cmn	r3, #-2147483638	; 0x8000000a
   11c24:	movle	r3, r2
   11c28:	cmp	r7, ip
   11c2c:	mov	r1, ip
   11c30:	mov	r2, r0
   11c34:	bne	11c00 <__assert_fail@plt+0xcc8>
   11c38:	ldr	r1, [r5, #3460]	; 0xd84
   11c3c:	ldr	r0, [pc, #216]	; 11d1c <__assert_fail@plt+0xde4>
   11c40:	bl	11a68 <__assert_fail@plt+0xb30>
   11c44:	ldr	r7, [r6, #24]
   11c48:	cmp	r7, r4
   11c4c:	beq	11c68 <__assert_fail@plt+0xd30>
   11c50:	mov	r0, r7
   11c54:	ldr	r1, [r5, #3456]	; 0xd80
   11c58:	bl	11a68 <__assert_fail@plt+0xb30>
   11c5c:	ldr	r7, [r7, #24]
   11c60:	cmp	r7, r4
   11c64:	bne	11c50 <__assert_fail@plt+0xd18>
   11c68:	ldr	r9, [r5, #3492]	; 0xda4
   11c6c:	ldr	r1, [r4]
   11c70:	ldr	r8, [pc, #168]	; 11d20 <__assert_fail@plt+0xde8>
   11c74:	sub	r2, r9, r1
   11c78:	mov	r0, r8
   11c7c:	ldr	r3, [pc, #160]	; 11d24 <__assert_fail@plt+0xdec>
   11c80:	bl	10d10 <__memmove_chk@plt>
   11c84:	ldr	r0, [r4]
   11c88:	ldr	r7, [r5, #3448]	; 0xd78
   11c8c:	sub	r0, r8, r0
   11c90:	add	r9, r9, r0
   11c94:	cmp	r7, r4
   11c98:	str	r9, [r5, #3492]	; 0xda4
   11c9c:	bcc	11cbc <__assert_fail@plt+0xd84>
   11ca0:	add	r3, r4, #28
   11ca4:	ldr	r2, [r3, #-28]	; 0xffffffe4
   11ca8:	cmp	r7, r3
   11cac:	add	r2, r2, r0
   11cb0:	str	r2, [r3, #-28]	; 0xffffffe4
   11cb4:	add	r3, r3, #28
   11cb8:	bcs	11ca4 <__assert_fail@plt+0xd6c>
   11cbc:	sub	r2, r7, r4
   11cc0:	mov	r1, r4
   11cc4:	bic	r2, r2, #3
   11cc8:	sub	r4, r4, r6
   11ccc:	add	r2, r2, #28
   11cd0:	ldr	r3, [pc, #80]	; 11d28 <__assert_fail@plt+0xdf0>
   11cd4:	ldr	r0, [pc, #64]	; 11d1c <__assert_fail@plt+0xde4>
   11cd8:	sub	r7, r7, r4
   11cdc:	bl	10d10 <__memmove_chk@plt>
   11ce0:	str	r7, [r5, #3448]	; 0xd78
   11ce4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11ce8:	ldr	r3, [pc, #60]	; 11d2c <__assert_fail@plt+0xdf4>
   11cec:	ldr	r4, [pc, #44]	; 11d20 <__assert_fail@plt+0xde8>
   11cf0:	ldr	r2, [r5, #3492]	; 0xda4
   11cf4:	ldr	r3, [r3]
   11cf8:	sub	r2, r2, r4
   11cfc:	mov	r0, r4
   11d00:	mov	r1, #1
   11d04:	bl	10d58 <fwrite_unlocked@plt>
   11d08:	str	r4, [r5, #3492]	; 0xda4
   11d0c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11d10:	mov	r4, r7
   11d14:	b	11c38 <__assert_fail@plt+0xd00>
   11d18:	andeq	r1, r3, r8, asr #2
   11d1c:	andeq	fp, r2, r0, ror #2
   11d20:	strdeq	r1, [r3], -r0
   11d24:	andeq	r1, r0, r8, lsl #7
   11d28:	andeq	r6, r0, r0, ror #26
   11d2c:	andeq	fp, r2, r4, asr r1
   11d30:	push	{r4, r5, r6, r7, r8, lr}
   11d34:	mov	r3, #0
   11d38:	ldr	r5, [pc, #412]	; 11edc <__assert_fail@plt+0xfa4>
   11d3c:	ldr	r2, [r0, #4]
   11d40:	ldr	r1, [r0, #8]
   11d44:	mov	r4, r0
   11d48:	cmp	r2, r1
   11d4c:	str	r3, [r5, #312]	; 0x138
   11d50:	bcs	11ecc <__assert_fail@plt+0xf94>
   11d54:	add	r1, r2, #1
   11d58:	str	r1, [r0, #4]
   11d5c:	ldrb	r0, [r2]
   11d60:	ldr	r6, [pc, #376]	; 11ee0 <__assert_fail@plt+0xfa8>
   11d64:	mov	r7, #1
   11d68:	b	11d70 <__assert_fail@plt+0xe38>
   11d6c:	ldr	r3, [r5, #312]	; 0x138
   11d70:	cmp	r0, #32
   11d74:	add	r2, r3, #7
   11d78:	addeq	r3, r3, #1
   11d7c:	streq	r3, [r5, #312]	; 0x138
   11d80:	beq	11da4 <__assert_fail@plt+0xe6c>
   11d84:	cmp	r0, #9
   11d88:	bne	11dcc <__assert_fail@plt+0xe94>
   11d8c:	cmp	r3, #0
   11d90:	movlt	r3, r2
   11d94:	bic	r3, r3, #7
   11d98:	add	r3, r3, #8
   11d9c:	str	r3, [r5, #312]	; 0x138
   11da0:	strb	r7, [r6, #3476]	; 0xd94
   11da4:	ldr	r3, [r4, #4]
   11da8:	ldr	r2, [r4, #8]
   11dac:	add	r1, r3, #1
   11db0:	cmp	r3, r2
   11db4:	strcc	r1, [r4, #4]
   11db8:	ldrbcc	r0, [r3]
   11dbc:	bcc	11d6c <__assert_fail@plt+0xe34>
   11dc0:	mov	r0, r4
   11dc4:	bl	10ec0 <__uflow@plt>
   11dc8:	b	11d6c <__assert_fail@plt+0xe34>
   11dcc:	ldr	r2, [r6, #3488]	; 0xda0
   11dd0:	cmp	r2, #0
   11dd4:	beq	11eac <__assert_fail@plt+0xf74>
   11dd8:	ldr	r7, [r6, #3484]	; 0xd9c
   11ddc:	str	r3, [r5, #316]	; 0x13c
   11de0:	ldrb	r2, [r7]
   11de4:	cmp	r2, #0
   11de8:	popeq	{r4, r5, r6, r7, r8, pc}
   11dec:	cmp	r0, r2
   11df0:	beq	11e10 <__assert_fail@plt+0xed8>
   11df4:	b	11ed8 <__assert_fail@plt+0xfa0>
   11df8:	ldrb	r3, [r7, #1]!
   11dfc:	cmp	r3, #0
   11e00:	beq	11e48 <__assert_fail@plt+0xf10>
   11e04:	cmp	r3, r0
   11e08:	popne	{r4, r5, r6, r7, r8, pc}
   11e0c:	ldr	r3, [r5, #312]	; 0x138
   11e10:	ldr	r2, [r4, #4]
   11e14:	ldr	r1, [r4, #8]
   11e18:	add	r0, r2, #1
   11e1c:	cmp	r2, r1
   11e20:	add	r3, r3, #1
   11e24:	strcc	r0, [r4, #4]
   11e28:	str	r3, [r5, #312]	; 0x138
   11e2c:	ldrbcc	r0, [r2]
   11e30:	bcc	11df8 <__assert_fail@plt+0xec0>
   11e34:	mov	r0, r4
   11e38:	bl	10ec0 <__uflow@plt>
   11e3c:	ldrb	r3, [r7, #1]!
   11e40:	cmp	r3, #0
   11e44:	bne	11e04 <__assert_fail@plt+0xecc>
   11e48:	mov	r7, #1
   11e4c:	b	11e94 <__assert_fail@plt+0xf5c>
   11e50:	cmp	r0, #9
   11e54:	popne	{r4, r5, r6, r7, r8, pc}
   11e58:	ldr	r3, [r5, #312]	; 0x138
   11e5c:	strb	r7, [r6, #3476]	; 0xd94
   11e60:	add	r2, r3, #7
   11e64:	cmp	r3, #0
   11e68:	movlt	r3, r2
   11e6c:	bic	r3, r3, #7
   11e70:	add	r3, r3, #8
   11e74:	str	r3, [r5, #312]	; 0x138
   11e78:	ldr	r3, [r4, #4]
   11e7c:	ldr	r2, [r4, #8]
   11e80:	add	r1, r3, #1
   11e84:	cmp	r3, r2
   11e88:	strcc	r1, [r4, #4]
   11e8c:	ldrbcc	r0, [r3]
   11e90:	bcs	11ec0 <__assert_fail@plt+0xf88>
   11e94:	cmp	r0, #32
   11e98:	bne	11e50 <__assert_fail@plt+0xf18>
   11e9c:	ldr	r3, [r5, #312]	; 0x138
   11ea0:	add	r3, r3, #1
   11ea4:	str	r3, [r5, #312]	; 0x138
   11ea8:	b	11e78 <__assert_fail@plt+0xf40>
   11eac:	ldr	r2, [r5, #320]	; 0x140
   11eb0:	cmp	r2, r3
   11eb4:	movlt	r3, r2
   11eb8:	str	r3, [r5, #316]	; 0x13c
   11ebc:	pop	{r4, r5, r6, r7, r8, pc}
   11ec0:	mov	r0, r4
   11ec4:	bl	10ec0 <__uflow@plt>
   11ec8:	b	11e94 <__assert_fail@plt+0xf5c>
   11ecc:	bl	10ec0 <__uflow@plt>
   11ed0:	ldr	r3, [r5, #312]	; 0x138
   11ed4:	b	11d60 <__assert_fail@plt+0xe28>
   11ed8:	pop	{r4, r5, r6, r7, r8, pc}
   11edc:	andeq	r3, r3, r0, asr #2
   11ee0:	andeq	r1, r3, r8, asr #2
   11ee4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11ee8:	sub	sp, sp, #20
   11eec:	ldr	r8, [pc, #920]	; 1228c <__assert_fail@plt+0x1354>
   11ef0:	mov	r5, r0
   11ef4:	add	r3, r8, #8448	; 0x2100
   11ef8:	add	r3, r3, #48	; 0x30
   11efc:	mov	r4, r1
   11f00:	str	r3, [sp, #12]
   11f04:	bl	10e30 <__ctype_b_loc@plt>
   11f08:	ldr	r9, [r8, #3448]	; 0xd78
   11f0c:	ldr	r7, [pc, #892]	; 12290 <__assert_fail@plt+0x1358>
   11f10:	mov	r2, r9
   11f14:	str	r0, [sp, #8]
   11f18:	ldr	r6, [r8, #3492]	; 0xda4
   11f1c:	ldr	fp, [sp, #8]
   11f20:	str	r6, [r2]
   11f24:	ldr	r9, [sp, #12]
   11f28:	b	11f4c <__assert_fail@plt+0x1014>
   11f2c:	add	r2, r3, #1
   11f30:	str	r2, [r5, #4]
   11f34:	ldrb	r4, [r3]
   11f38:	ldr	sl, [fp]
   11f3c:	lsl	r3, r4, #1
   11f40:	ldrh	r3, [sl, r3]
   11f44:	tst	r3, #8192	; 0x2000
   11f48:	bne	11f90 <__assert_fail@plt+0x1058>
   11f4c:	cmp	r6, r9
   11f50:	beq	12198 <__assert_fail@plt+0x1260>
   11f54:	strb	r4, [r6]
   11f58:	ldr	r3, [r5, #4]
   11f5c:	ldr	r2, [r5, #8]
   11f60:	add	r6, r6, #1
   11f64:	cmp	r3, r2
   11f68:	str	r6, [r8, #3492]	; 0xda4
   11f6c:	bcc	11f2c <__assert_fail@plt+0xff4>
   11f70:	mov	r0, r5
   11f74:	bl	10ec0 <__uflow@plt>
   11f78:	ldr	r6, [r8, #3492]	; 0xda4
   11f7c:	cmn	r0, #1
   11f80:	mov	r4, r0
   11f84:	bne	11f38 <__assert_fail@plt+0x1000>
   11f88:	ldr	r3, [sp, #8]
   11f8c:	ldr	sl, [r3]
   11f90:	ldr	r3, [r8, #3448]	; 0xd78
   11f94:	ldr	r2, [r7, #312]	; 0x138
   11f98:	mov	fp, r3
   11f9c:	ldr	r9, [r3]
   11fa0:	str	r3, [sp, #4]
   11fa4:	sub	r6, r6, r9
   11fa8:	str	r6, [r3, #4]
   11fac:	ldr	r0, [pc, #736]	; 12294 <__assert_fail@plt+0x135c>
   11fb0:	add	r3, r6, r2
   11fb4:	ldrb	r1, [r9]
   11fb8:	str	r3, [sp]
   11fbc:	str	r3, [r7, #312]	; 0x138
   11fc0:	bl	10e54 <strchr@plt>
   11fc4:	sub	r6, r6, #1
   11fc8:	ldrb	r2, [fp, #12]
   11fcc:	ldrb	ip, [r9, r6]
   11fd0:	add	r1, r9, r6
   11fd4:	bic	r2, r2, #1
   11fd8:	lsl	ip, ip, #1
   11fdc:	ldrh	r3, [sl, ip]
   11fe0:	and	r3, r3, #4
   11fe4:	cmp	r0, #0
   11fe8:	moveq	r0, r2
   11fec:	orrne	r0, r2, #1
   11ff0:	bic	r0, r0, #4
   11ff4:	cmp	r9, r1
   11ff8:	orr	r0, r3, r0
   11ffc:	strb	r0, [fp, #12]
   12000:	ldrbcs	sl, [r9, r6]
   12004:	bcs	12038 <__assert_fail@plt+0x1100>
   12008:	mov	r6, r1
   1200c:	b	12018 <__assert_fail@plt+0x10e0>
   12010:	cmp	r6, r9
   12014:	beq	121c4 <__assert_fail@plt+0x128c>
   12018:	ldrb	sl, [r6]
   1201c:	ldr	r0, [pc, #628]	; 12298 <__assert_fail@plt+0x1360>
   12020:	mov	fp, r6
   12024:	mov	r1, sl
   12028:	bl	10e54 <strchr@plt>
   1202c:	sub	r6, r6, #1
   12030:	cmp	r0, #0
   12034:	bne	12010 <__assert_fail@plt+0x10d8>
   12038:	mov	r1, sl
   1203c:	ldr	r0, [pc, #600]	; 1229c <__assert_fail@plt+0x1364>
   12040:	bl	10e54 <strchr@plt>
   12044:	ldr	r1, [sp, #4]
   12048:	ldr	r3, [sp]
   1204c:	ldrb	r2, [r1, #12]
   12050:	bic	r2, r2, #2
   12054:	cmp	r0, #0
   12058:	movne	r0, #2
   1205c:	moveq	r0, #0
   12060:	orr	r0, r0, r2
   12064:	strb	r0, [r1, #12]
   12068:	mov	r0, r4
   1206c:	b	12074 <__assert_fail@plt+0x113c>
   12070:	ldr	r3, [r7, #312]	; 0x138
   12074:	cmp	r0, #32
   12078:	add	r2, r3, #7
   1207c:	addeq	r3, r3, #1
   12080:	streq	r3, [r7, #312]	; 0x138
   12084:	beq	120ac <__assert_fail@plt+0x1174>
   12088:	cmp	r0, #9
   1208c:	bne	120d4 <__assert_fail@plt+0x119c>
   12090:	cmp	r3, #0
   12094:	movlt	r3, r2
   12098:	bic	r3, r3, #7
   1209c:	add	r3, r3, #8
   120a0:	str	r3, [r7, #312]	; 0x138
   120a4:	mov	r3, #1
   120a8:	strb	r3, [r8, #3476]	; 0xd94
   120ac:	ldr	r3, [r5, #4]
   120b0:	ldr	r2, [r5, #8]
   120b4:	add	r1, r3, #1
   120b8:	cmp	r3, r2
   120bc:	strcc	r1, [r5, #4]
   120c0:	ldrbcc	r0, [r3]
   120c4:	bcc	12070 <__assert_fail@plt+0x1138>
   120c8:	mov	r0, r5
   120cc:	bl	10ec0 <__uflow@plt>
   120d0:	b	12070 <__assert_fail@plt+0x1138>
   120d4:	ldr	r2, [r8, #3448]	; 0xd78
   120d8:	ldr	r1, [sp]
   120dc:	cmn	r0, #1
   120e0:	sub	r1, r3, r1
   120e4:	mov	r4, r0
   120e8:	str	r1, [r2, #8]
   120ec:	beq	121d8 <__assert_fail@plt+0x12a0>
   120f0:	ldrb	r0, [r2, #12]
   120f4:	sub	ip, r4, #10
   120f8:	clz	ip, ip
   120fc:	tst	r0, #2
   12100:	lsr	ip, ip, #5
   12104:	moveq	r0, #0
   12108:	beq	1212c <__assert_fail@plt+0x11f4>
   1210c:	cmp	r1, #1
   12110:	movle	r1, ip
   12114:	orrgt	r1, ip, #1
   12118:	cmp	r1, #0
   1211c:	biceq	r0, r0, #8
   12120:	strbeq	r0, [r2, #12]
   12124:	beq	12144 <__assert_fail@plt+0x120c>
   12128:	mov	r0, #1
   1212c:	ldrb	r1, [r2, #12]
   12130:	cmp	ip, #0
   12134:	bic	r1, r1, #8
   12138:	orr	r1, r1, r0, lsl #3
   1213c:	strb	r1, [r2, #12]
   12140:	bne	12150 <__assert_fail@plt+0x1218>
   12144:	ldrb	r1, [r7, #327]	; 0x147
   12148:	cmp	r1, #0
   1214c:	beq	12164 <__assert_fail@plt+0x122c>
   12150:	ldrb	r1, [r2, #12]
   12154:	tst	r1, #8
   12158:	moveq	r1, #1
   1215c:	movne	r1, #2
   12160:	str	r1, [r2, #8]
   12164:	ldr	r1, [pc, #308]	; 122a0 <__assert_fail@plt+0x1368>
   12168:	add	r1, r1, #40	; 0x28
   1216c:	cmp	r2, r1
   12170:	beq	1220c <__assert_fail@plt+0x12d4>
   12174:	add	r2, r2, #28
   12178:	cmp	r4, #10
   1217c:	cmnne	r4, #1
   12180:	str	r2, [r8, #3448]	; 0xd78
   12184:	bne	11f18 <__assert_fail@plt+0xfe0>
   12188:	mov	r0, r5
   1218c:	add	sp, sp, #20
   12190:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12194:	b	11d30 <__assert_fail@plt+0xdf8>
   12198:	ldrb	r3, [r7, #324]	; 0x144
   1219c:	cmp	r3, #0
   121a0:	bne	121cc <__assert_fail@plt+0x1294>
   121a4:	ldrb	r3, [r7, #325]	; 0x145
   121a8:	cmp	r3, #0
   121ac:	beq	121e8 <__assert_fail@plt+0x12b0>
   121b0:	ldr	r3, [r7, #312]	; 0x138
   121b4:	str	r3, [r8, #3456]	; 0xd80
   121b8:	bl	11bcc <__assert_fail@plt+0xc94>
   121bc:	ldr	r6, [r8, #3492]	; 0xda4
   121c0:	b	11f54 <__assert_fail@plt+0x101c>
   121c4:	ldrb	sl, [fp, #-1]
   121c8:	b	12038 <__assert_fail@plt+0x1100>
   121cc:	ldr	r3, [r8, #3460]	; 0xd84
   121d0:	str	r3, [r8, #3456]	; 0xd80
   121d4:	b	121b8 <__assert_fail@plt+0x1280>
   121d8:	ldrb	r1, [r2, #12]
   121dc:	orr	r1, r1, #8
   121e0:	strb	r1, [r2, #12]
   121e4:	b	12150 <__assert_fail@plt+0x1218>
   121e8:	ldrb	r3, [r7, #326]	; 0x146
   121ec:	cmp	r3, #0
   121f0:	beq	121cc <__assert_fail@plt+0x1294>
   121f4:	ldr	r3, [r7, #312]	; 0x138
   121f8:	ldr	r2, [r8, #3460]	; 0xd84
   121fc:	cmp	r3, r2
   12200:	beq	1225c <__assert_fail@plt+0x1324>
   12204:	str	r3, [r8, #3456]	; 0xd80
   12208:	b	121b8 <__assert_fail@plt+0x1280>
   1220c:	ldrb	r2, [r7, #324]	; 0x144
   12210:	cmp	r2, #0
   12214:	bne	12278 <__assert_fail@plt+0x1340>
   12218:	ldrb	r2, [r7, #325]	; 0x145
   1221c:	cmp	r2, #0
   12220:	bne	12254 <__assert_fail@plt+0x131c>
   12224:	ldrb	r2, [r7, #326]	; 0x146
   12228:	cmp	r2, #0
   1222c:	beq	12278 <__assert_fail@plt+0x1340>
   12230:	ldr	r2, [r8, #3460]	; 0xd84
   12234:	cmp	r2, r3
   12238:	bne	12254 <__assert_fail@plt+0x131c>
   1223c:	ldr	r2, [r8, #3456]	; 0xd80
   12240:	cmp	r2, r3
   12244:	bne	12280 <__assert_fail@plt+0x1348>
   12248:	cmp	r3, #0
   1224c:	moveq	r3, #3
   12250:	movne	r3, #0
   12254:	str	r3, [r8, #3456]	; 0xd80
   12258:	b	12280 <__assert_fail@plt+0x1348>
   1225c:	ldr	r2, [r8, #3456]	; 0xd80
   12260:	cmp	r3, r2
   12264:	bne	121b8 <__assert_fail@plt+0x1280>
   12268:	cmp	r3, #0
   1226c:	moveq	r3, #3
   12270:	movne	r3, #0
   12274:	b	12204 <__assert_fail@plt+0x12cc>
   12278:	ldr	r3, [r8, #3460]	; 0xd84
   1227c:	str	r3, [r8, #3456]	; 0xd80
   12280:	bl	11bcc <__assert_fail@plt+0xc94>
   12284:	ldr	r2, [r8, #3448]	; 0xd78
   12288:	b	12174 <__assert_fail@plt+0x123c>
   1228c:	andeq	r1, r3, r8, asr #2
   12290:	andeq	r3, r3, r0, asr #2
   12294:	andeq	r9, r1, ip, lsr #19
   12298:			; <UNDEFINED> instruction: 0x000199b4
   1229c:			; <UNDEFINED> instruction: 0x000199bc
   122a0:	andeq	r1, r3, r0, ror #28
   122a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   122a8:	sub	sp, sp, #12
   122ac:	ldr	r7, [pc, #1568]	; 128d4 <__assert_fail@plt+0x199c>
   122b0:	str	r1, [sp]
   122b4:	mov	r5, r0
   122b8:	mov	r1, #2
   122bc:	bl	12d48 <__assert_fail@plt+0x1e10>
   122c0:	mov	r9, #0
   122c4:	mov	r0, r5
   122c8:	strb	r9, [r7, #3476]	; 0xd94
   122cc:	str	r9, [r7, #3456]	; 0xd80
   122d0:	bl	11d30 <__assert_fail@plt+0xdf8>
   122d4:	ldr	fp, [pc, #1532]	; 128d8 <__assert_fail@plt+0x19a0>
   122d8:	ldr	r6, [pc, #1532]	; 128dc <__assert_fail@plt+0x19a4>
   122dc:	add	r3, r7, #3488	; 0xda0
   122e0:	add	r3, r3, #8
   122e4:	str	r3, [sp, #4]
   122e8:	mov	r4, r0
   122ec:	str	r0, [fp, #328]	; 0x148
   122f0:	str	r9, [r7, #3468]	; 0xd8c
   122f4:	cmn	r4, #1
   122f8:	cmpne	r4, #10
   122fc:	ldr	r0, [fp, #316]	; 0x13c
   12300:	beq	123bc <__assert_fail@plt+0x1484>
   12304:	ldr	r3, [fp, #320]	; 0x140
   12308:	cmp	r0, r3
   1230c:	blt	123bc <__assert_fail@plt+0x1484>
   12310:	ldr	r3, [fp, #332]	; 0x14c
   12314:	ldr	r2, [fp, #312]	; 0x138
   12318:	add	r3, r0, r3
   1231c:	cmp	r3, r2
   12320:	ble	12578 <__assert_fail@plt+0x1640>
   12324:	cmp	r0, r2
   12328:	str	r9, [r7, #3472]	; 0xd90
   1232c:	blt	123cc <__assert_fail@plt+0x1494>
   12330:	cmp	r4, #10
   12334:	cmnne	r4, #1
   12338:	movne	r8, #1
   1233c:	moveq	r8, #0
   12340:	beq	12448 <__assert_fail@plt+0x1510>
   12344:	bl	11938 <__assert_fail@plt+0xa00>
   12348:	ldr	r3, [r7, #3472]	; 0xd90
   1234c:	ldr	ip, [fp, #312]	; 0x138
   12350:	ldr	sl, [r7, #3484]	; 0xd9c
   12354:	cmp	r3, ip
   12358:	moveq	r0, r9
   1235c:	beq	12458 <__assert_fail@plt+0x1520>
   12360:	ldrb	r1, [sl]
   12364:	cmp	r1, #0
   12368:	bne	12394 <__assert_fail@plt+0x145c>
   1236c:	b	12454 <__assert_fail@plt+0x151c>
   12370:	ldr	r3, [r7, #3472]	; 0xd90
   12374:	ldr	ip, [fp, #312]	; 0x138
   12378:	add	r3, r3, #1
   1237c:	cmp	r3, ip
   12380:	str	r3, [r7, #3472]	; 0xd90
   12384:	beq	12400 <__assert_fail@plt+0x14c8>
   12388:	ldrb	r1, [sl, #1]!
   1238c:	cmp	r1, #0
   12390:	beq	12400 <__assert_fail@plt+0x14c8>
   12394:	ldr	r0, [r6]
   12398:	ldr	r3, [r0, #20]
   1239c:	ldr	r2, [r0, #24]
   123a0:	cmp	r3, r2
   123a4:	addcc	r2, r3, #1
   123a8:	strcc	r2, [r0, #20]
   123ac:	strbcc	r1, [r3]
   123b0:	bcc	12370 <__assert_fail@plt+0x1438>
   123b4:	bl	10ecc <__overflow@plt>
   123b8:	b	12370 <__assert_fail@plt+0x1438>
   123bc:	ldr	r2, [fp, #312]	; 0x138
   123c0:	str	r9, [r7, #3472]	; 0xd90
   123c4:	cmp	r0, r2
   123c8:	bge	12330 <__assert_fail@plt+0x13f8>
   123cc:	bl	11938 <__assert_fail@plt+0xa00>
   123d0:	ldr	r3, [r7, #3472]	; 0xd90
   123d4:	ldr	ip, [fp, #312]	; 0x138
   123d8:	ldr	sl, [r7, #3484]	; 0xd9c
   123dc:	cmp	ip, r3
   123e0:	beq	12644 <__assert_fail@plt+0x170c>
   123e4:	ldrb	r1, [sl]
   123e8:	cmp	r4, #10
   123ec:	cmnne	r4, #1
   123f0:	movne	r8, #1
   123f4:	moveq	r8, #0
   123f8:	cmp	r1, #0
   123fc:	bne	12394 <__assert_fail@plt+0x145c>
   12400:	cmp	r8, #0
   12404:	bne	12454 <__assert_fail@plt+0x151c>
   12408:	cmn	r4, #1
   1240c:	beq	124d4 <__assert_fail@plt+0x159c>
   12410:	ldr	r0, [r6]
   12414:	ldr	r2, [r0, #24]
   12418:	ldr	r3, [r0, #20]
   1241c:	cmp	r3, r2
   12420:	addcc	r2, r3, #1
   12424:	strcc	r2, [r0, #20]
   12428:	movcc	r2, #10
   1242c:	strbcc	r2, [r3]
   12430:	bcs	1256c <__assert_fail@plt+0x1634>
   12434:	mov	r0, r5
   12438:	bl	11d30 <__assert_fail@plt+0xdf8>
   1243c:	mov	r4, r0
   12440:	b	122f4 <__assert_fail@plt+0x13bc>
   12444:	mov	r4, r1
   12448:	cmn	r4, #1
   1244c:	bne	12410 <__assert_fail@plt+0x14d8>
   12450:	b	12510 <__assert_fail@plt+0x15d8>
   12454:	sub	r0, ip, r3
   12458:	bl	11938 <__assert_fail@plt+0xa00>
   1245c:	mov	r1, r4
   12460:	b	12480 <__assert_fail@plt+0x1548>
   12464:	ldr	r3, [r5, #4]
   12468:	ldr	r2, [r5, #8]
   1246c:	cmp	r3, r2
   12470:	bcs	124c4 <__assert_fail@plt+0x158c>
   12474:	add	r2, r3, #1
   12478:	str	r2, [r5, #4]
   1247c:	ldrb	r1, [r3]
   12480:	cmp	r1, #10
   12484:	cmnne	r1, #1
   12488:	beq	12444 <__assert_fail@plt+0x150c>
   1248c:	ldr	r0, [r6]
   12490:	ldr	r3, [r0, #20]
   12494:	ldr	r2, [r0, #24]
   12498:	cmp	r3, r2
   1249c:	addcc	r2, r3, #1
   124a0:	strcc	r2, [r0, #20]
   124a4:	strbcc	r1, [r3]
   124a8:	bcc	12464 <__assert_fail@plt+0x152c>
   124ac:	uxtb	r1, r1
   124b0:	bl	10ecc <__overflow@plt>
   124b4:	ldr	r3, [r5, #4]
   124b8:	ldr	r2, [r5, #8]
   124bc:	cmp	r3, r2
   124c0:	bcc	12474 <__assert_fail@plt+0x153c>
   124c4:	mov	r0, r5
   124c8:	bl	10ec0 <__uflow@plt>
   124cc:	mov	r1, r0
   124d0:	b	12480 <__assert_fail@plt+0x1548>
   124d4:	ldr	r1, [r7, #3488]	; 0xda0
   124d8:	ldr	r3, [fp, #316]	; 0x13c
   124dc:	add	r3, r3, r1
   124e0:	cmp	ip, r3
   124e4:	blt	12510 <__assert_fail@plt+0x15d8>
   124e8:	ldr	r3, [pc, #1004]	; 128dc <__assert_fail@plt+0x19a4>
   124ec:	ldr	r0, [r3]
   124f0:	ldr	r3, [r0, #20]
   124f4:	ldr	r1, [r0, #24]
   124f8:	cmp	r3, r1
   124fc:	addcc	ip, r3, #1
   12500:	movcc	r1, #10
   12504:	strcc	ip, [r0, #20]
   12508:	strbcc	r1, [r3]
   1250c:	bcs	12658 <__assert_fail@plt+0x1720>
   12510:	ldr	r0, [pc, #968]	; 128e0 <__assert_fail@plt+0x19a8>
   12514:	ldr	r3, [r5]
   12518:	mvn	r1, #0
   1251c:	ldr	r0, [r0]
   12520:	ands	r4, r3, #32
   12524:	moveq	r6, r1
   12528:	movne	r6, #0
   1252c:	cmp	r5, r0
   12530:	str	r1, [fp, #328]	; 0x148
   12534:	beq	128b8 <__assert_fail@plt+0x1980>
   12538:	mov	r0, r5
   1253c:	bl	12d7c <__assert_fail@plt+0x1e44>
   12540:	cmp	r0, #0
   12544:	beq	1273c <__assert_fail@plt+0x1804>
   12548:	cmp	r4, #0
   1254c:	beq	12734 <__assert_fail@plt+0x17fc>
   12550:	mov	r2, #5
   12554:	ldr	r1, [pc, #904]	; 128e4 <__assert_fail@plt+0x19ac>
   12558:	mov	r0, #0
   1255c:	bl	10d7c <dcgettext@plt>
   12560:	mov	r6, #0
   12564:	mov	r4, r0
   12568:	b	12750 <__assert_fail@plt+0x1818>
   1256c:	mov	r1, #10
   12570:	bl	10ecc <__overflow@plt>
   12574:	b	12434 <__assert_fail@plt+0x14fc>
   12578:	mov	r3, r0
   1257c:	str	r3, [r7, #3480]	; 0xd98
   12580:	ldr	r3, [sp, #4]
   12584:	mov	r1, r4
   12588:	str	r3, [r7, #3492]	; 0xda4
   1258c:	ldr	r3, [pc, #852]	; 128e8 <__assert_fail@plt+0x19b0>
   12590:	mov	r0, r5
   12594:	str	r3, [r7, #3448]	; 0xd78
   12598:	str	r2, [r7, #3460]	; 0xd84
   1259c:	bl	11ee4 <__assert_fail@plt+0xfac>
   125a0:	ldr	r3, [fp, #316]	; 0x13c
   125a4:	ldr	r1, [r7, #3480]	; 0xd98
   125a8:	cmp	r3, r1
   125ac:	beq	12780 <__assert_fail@plt+0x1848>
   125b0:	mov	r2, r9
   125b4:	ldrb	ip, [fp, #324]	; 0x144
   125b8:	cmp	ip, #0
   125bc:	bne	12664 <__assert_fail@plt+0x172c>
   125c0:	ldrb	ip, [fp, #325]	; 0x145
   125c4:	cmp	ip, #0
   125c8:	beq	12690 <__assert_fail@plt+0x1758>
   125cc:	cmp	r2, #0
   125d0:	ldrne	r2, [fp, #312]	; 0x138
   125d4:	ldreq	r2, [r7, #3460]	; 0xd84
   125d8:	cmp	r3, r1
   125dc:	str	r2, [r7, #3456]	; 0xd80
   125e0:	beq	12848 <__assert_fail@plt+0x1910>
   125e4:	ldr	r8, [r7, #3448]	; 0xd78
   125e8:	ldr	r3, [pc, #760]	; 128e8 <__assert_fail@plt+0x19b0>
   125ec:	cmp	r8, r3
   125f0:	bls	1267c <__assert_fail@plt+0x1744>
   125f4:	ldrb	r3, [r8, #-16]
   125f8:	str	r0, [fp, #328]	; 0x148
   125fc:	orr	r3, r3, #10
   12600:	strb	r3, [r8, #-16]
   12604:	bl	115d4 <__assert_fail@plt+0x69c>
   12608:	ldr	r1, [r7, #3460]	; 0xd84
   1260c:	ldr	r0, [pc, #724]	; 128e8 <__assert_fail@plt+0x19b0>
   12610:	bl	11a68 <__assert_fail@plt+0xb30>
   12614:	ldr	r3, [pc, #716]	; 128e8 <__assert_fail@plt+0x19b0>
   12618:	ldr	r4, [r3, #24]
   1261c:	cmp	r4, r8
   12620:	beq	1263c <__assert_fail@plt+0x1704>
   12624:	mov	r0, r4
   12628:	ldr	r1, [r7, #3456]	; 0xd80
   1262c:	bl	11a68 <__assert_fail@plt+0xb30>
   12630:	ldr	r4, [r4, #24]
   12634:	cmp	r4, r8
   12638:	bne	12624 <__assert_fail@plt+0x16ec>
   1263c:	ldr	r4, [fp, #328]	; 0x148
   12640:	b	122f0 <__assert_fail@plt+0x13b8>
   12644:	cmp	r4, #10
   12648:	cmnne	r4, #1
   1264c:	movne	r8, #1
   12650:	moveq	r8, #0
   12654:	b	12400 <__assert_fail@plt+0x14c8>
   12658:	mov	r1, #10
   1265c:	bl	10ecc <__overflow@plt>
   12660:	b	12510 <__assert_fail@plt+0x15d8>
   12664:	ldr	r3, [r7, #3460]	; 0xd84
   12668:	ldr	r8, [r7, #3448]	; 0xd78
   1266c:	str	r3, [r7, #3456]	; 0xd80
   12670:	ldr	r3, [pc, #624]	; 128e8 <__assert_fail@plt+0x19b0>
   12674:	cmp	r8, r3
   12678:	bhi	125f4 <__assert_fail@plt+0x16bc>
   1267c:	ldr	r3, [pc, #616]	; 128ec <__assert_fail@plt+0x19b4>
   12680:	ldr	r2, [pc, #616]	; 128f0 <__assert_fail@plt+0x19b8>
   12684:	ldr	r1, [pc, #616]	; 128f4 <__assert_fail@plt+0x19bc>
   12688:	ldr	r0, [pc, #616]	; 128f8 <__assert_fail@plt+0x19c0>
   1268c:	bl	10f38 <__assert_fail@plt>
   12690:	ldrb	ip, [fp, #326]	; 0x146
   12694:	cmp	ip, #0
   12698:	beq	127a8 <__assert_fail@plt+0x1870>
   1269c:	cmp	r2, #0
   126a0:	bne	12830 <__assert_fail@plt+0x18f8>
   126a4:	ldr	r2, [r7, #3460]	; 0xd84
   126a8:	ldr	ip, [r7, #3456]	; 0xd80
   126ac:	cmp	ip, r2
   126b0:	beq	128c4 <__assert_fail@plt+0x198c>
   126b4:	cmp	r3, r1
   126b8:	bne	125e4 <__assert_fail@plt+0x16ac>
   126bc:	ldr	r1, [fp, #332]	; 0x14c
   126c0:	ldr	ip, [fp, #312]	; 0x138
   126c4:	add	r3, r3, r1
   126c8:	cmp	r3, ip
   126cc:	bgt	125e4 <__assert_fail@plt+0x16ac>
   126d0:	cmp	r0, #10
   126d4:	cmnne	r0, #1
   126d8:	beq	125e4 <__assert_fail@plt+0x16ac>
   126dc:	cmp	ip, r2
   126e0:	bne	12714 <__assert_fail@plt+0x17dc>
   126e4:	b	125e4 <__assert_fail@plt+0x16ac>
   126e8:	ldr	r1, [fp, #332]	; 0x14c
   126ec:	ldr	r2, [fp, #312]	; 0x138
   126f0:	add	r3, r3, r1
   126f4:	cmp	r3, r2
   126f8:	bgt	125e4 <__assert_fail@plt+0x16ac>
   126fc:	cmp	r0, #10
   12700:	cmnne	r0, #1
   12704:	beq	125e4 <__assert_fail@plt+0x16ac>
   12708:	ldr	r3, [r7, #3456]	; 0xd80
   1270c:	cmp	r2, r3
   12710:	bne	125e4 <__assert_fail@plt+0x16ac>
   12714:	mov	r1, r0
   12718:	mov	r0, r5
   1271c:	bl	11ee4 <__assert_fail@plt+0xfac>
   12720:	ldr	r3, [fp, #316]	; 0x13c
   12724:	ldr	r2, [r7, #3480]	; 0xd98
   12728:	cmp	r3, r2
   1272c:	bne	125e4 <__assert_fail@plt+0x16ac>
   12730:	b	126e8 <__assert_fail@plt+0x17b0>
   12734:	bl	10e60 <__errno_location@plt>
   12738:	ldr	r6, [r0]
   1273c:	cmp	r6, #0
   12740:	movlt	r0, #1
   12744:	blt	12778 <__assert_fail@plt+0x1840>
   12748:	ldrne	r4, [pc, #428]	; 128fc <__assert_fail@plt+0x19c4>
   1274c:	beq	12550 <__assert_fail@plt+0x1618>
   12750:	ldr	r2, [sp]
   12754:	mov	r1, #3
   12758:	mov	r0, #0
   1275c:	bl	15ef4 <__assert_fail@plt+0x4fbc>
   12760:	mov	r2, r4
   12764:	mov	r1, r6
   12768:	mov	r3, r0
   1276c:	mov	r0, #0
   12770:	bl	10de8 <error@plt>
   12774:	mov	r0, #0
   12778:	add	sp, sp, #12
   1277c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12780:	ldr	r2, [fp, #332]	; 0x14c
   12784:	ldr	ip, [fp, #312]	; 0x138
   12788:	add	r2, r3, r2
   1278c:	cmp	r2, ip
   12790:	bgt	125b0 <__assert_fail@plt+0x1678>
   12794:	cmp	r0, #10
   12798:	cmnne	r0, #1
   1279c:	movne	r2, #1
   127a0:	moveq	r2, #0
   127a4:	b	125b4 <__assert_fail@plt+0x167c>
   127a8:	ldr	ip, [r7, #3460]	; 0xd84
   127ac:	cmp	r3, r1
   127b0:	str	ip, [r7, #3456]	; 0xd80
   127b4:	bne	125e4 <__assert_fail@plt+0x16ac>
   127b8:	ldr	r2, [fp, #332]	; 0x14c
   127bc:	ldr	r1, [fp, #312]	; 0x138
   127c0:	add	r3, r3, r2
   127c4:	cmp	r1, r3
   127c8:	blt	125e4 <__assert_fail@plt+0x16ac>
   127cc:	cmp	r0, #10
   127d0:	cmnne	r0, #1
   127d4:	beq	125e4 <__assert_fail@plt+0x16ac>
   127d8:	cmp	ip, r1
   127dc:	beq	12810 <__assert_fail@plt+0x18d8>
   127e0:	b	125e4 <__assert_fail@plt+0x16ac>
   127e4:	ldr	r1, [fp, #332]	; 0x14c
   127e8:	ldr	r2, [fp, #312]	; 0x138
   127ec:	add	r3, r3, r1
   127f0:	cmp	r3, r2
   127f4:	bgt	125e4 <__assert_fail@plt+0x16ac>
   127f8:	cmp	r0, #10
   127fc:	cmnne	r0, #1
   12800:	beq	125e4 <__assert_fail@plt+0x16ac>
   12804:	ldr	r3, [r7, #3456]	; 0xd80
   12808:	cmp	r2, r3
   1280c:	bne	125e4 <__assert_fail@plt+0x16ac>
   12810:	mov	r1, r0
   12814:	mov	r0, r5
   12818:	bl	11ee4 <__assert_fail@plt+0xfac>
   1281c:	ldr	r3, [fp, #316]	; 0x13c
   12820:	ldr	r2, [r7, #3480]	; 0xd98
   12824:	cmp	r3, r2
   12828:	bne	125e4 <__assert_fail@plt+0x16ac>
   1282c:	b	127e4 <__assert_fail@plt+0x18ac>
   12830:	ldr	ip, [fp, #312]	; 0x138
   12834:	ldr	r2, [r7, #3460]	; 0xd84
   12838:	cmp	ip, r2
   1283c:	beq	126a8 <__assert_fail@plt+0x1770>
   12840:	str	ip, [r7, #3456]	; 0xd80
   12844:	b	126b4 <__assert_fail@plt+0x177c>
   12848:	ldr	r2, [fp, #332]	; 0x14c
   1284c:	ldr	r1, [fp, #312]	; 0x138
   12850:	add	r3, r3, r2
   12854:	cmp	r3, r1
   12858:	bgt	125e4 <__assert_fail@plt+0x16ac>
   1285c:	cmp	r0, #10
   12860:	cmnne	r0, #1
   12864:	beq	125e4 <__assert_fail@plt+0x16ac>
   12868:	b	12898 <__assert_fail@plt+0x1960>
   1286c:	ldr	r1, [fp, #332]	; 0x14c
   12870:	ldr	r2, [fp, #312]	; 0x138
   12874:	add	r3, r3, r1
   12878:	cmp	r3, r2
   1287c:	bgt	125e4 <__assert_fail@plt+0x16ac>
   12880:	cmp	r0, #10
   12884:	cmnne	r0, #1
   12888:	beq	125e4 <__assert_fail@plt+0x16ac>
   1288c:	ldr	r3, [r7, #3456]	; 0xd80
   12890:	cmp	r2, r3
   12894:	bne	125e4 <__assert_fail@plt+0x16ac>
   12898:	mov	r1, r0
   1289c:	mov	r0, r5
   128a0:	bl	11ee4 <__assert_fail@plt+0xfac>
   128a4:	ldr	r3, [fp, #316]	; 0x13c
   128a8:	ldr	r2, [r7, #3480]	; 0xd98
   128ac:	cmp	r3, r2
   128b0:	bne	125e4 <__assert_fail@plt+0x16ac>
   128b4:	b	1286c <__assert_fail@plt+0x1934>
   128b8:	mov	r0, r5
   128bc:	bl	10efc <clearerr_unlocked@plt>
   128c0:	b	1273c <__assert_fail@plt+0x1804>
   128c4:	cmp	r2, #0
   128c8:	moveq	ip, #3
   128cc:	movne	ip, #0
   128d0:	b	12840 <__assert_fail@plt+0x1908>
   128d4:	andeq	r1, r3, r8, asr #2
   128d8:	andeq	r3, r3, r0, asr #2
   128dc:	andeq	fp, r2, r4, asr r1
   128e0:	andeq	fp, r2, r0, asr r1
   128e4:	andeq	r9, r1, r0, ror #19
   128e8:	andeq	fp, r2, r0, ror #2
   128ec:	andeq	r9, r1, r4, asr #17
   128f0:	andeq	r0, r0, pc, ror #4
   128f4:	andeq	r9, r1, r0, asr #19
   128f8:	andeq	r9, r1, ip, asr #19
   128fc:	strheq	sl, [r1], -r0
   12900:	subs	r6, r0, #0
   12904:	push	{r7, lr}
   12908:	sub	sp, sp, #56	; 0x38
   1290c:	beq	12948 <__assert_fail@plt+0x1a10>
   12910:	ldr	r3, [pc, #708]	; 12bdc <__assert_fail@plt+0x1ca4>
   12914:	mov	r2, #5
   12918:	ldr	r1, [pc, #704]	; 12be0 <__assert_fail@plt+0x1ca8>
   1291c:	mov	r0, #0
   12920:	ldr	r4, [r3]
   12924:	bl	10d7c <dcgettext@plt>
   12928:	ldr	r3, [pc, #692]	; 12be4 <__assert_fail@plt+0x1cac>
   1292c:	mov	r1, #1
   12930:	ldr	r3, [r3]
   12934:	mov	r2, r0
   12938:	mov	r0, r4
   1293c:	bl	10e9c <__fprintf_chk@plt>
   12940:	mov	r0, r6
   12944:	bl	10e3c <exit@plt>
   12948:	mov	r2, #5
   1294c:	ldr	r1, [pc, #660]	; 12be8 <__assert_fail@plt+0x1cb0>
   12950:	bl	10d7c <dcgettext@plt>
   12954:	ldr	r3, [pc, #648]	; 12be4 <__assert_fail@plt+0x1cac>
   12958:	ldr	r7, [pc, #652]	; 12bec <__assert_fail@plt+0x1cb4>
   1295c:	ldr	r4, [pc, #652]	; 12bf0 <__assert_fail@plt+0x1cb8>
   12960:	ldr	r2, [r3]
   12964:	mov	r1, r0
   12968:	mov	r0, #1
   1296c:	bl	10e84 <__printf_chk@plt>
   12970:	mov	r2, #5
   12974:	ldr	r1, [pc, #632]	; 12bf4 <__assert_fail@plt+0x1cbc>
   12978:	mov	r0, r6
   1297c:	bl	10d7c <dcgettext@plt>
   12980:	ldr	r1, [r7]
   12984:	bl	10cd4 <fputs_unlocked@plt>
   12988:	mov	r2, #5
   1298c:	ldr	r1, [pc, #612]	; 12bf8 <__assert_fail@plt+0x1cc0>
   12990:	mov	r0, r6
   12994:	bl	10d7c <dcgettext@plt>
   12998:	ldr	r1, [r7]
   1299c:	bl	10cd4 <fputs_unlocked@plt>
   129a0:	mov	r2, #5
   129a4:	ldr	r1, [pc, #592]	; 12bfc <__assert_fail@plt+0x1cc4>
   129a8:	mov	r0, r6
   129ac:	bl	10d7c <dcgettext@plt>
   129b0:	ldr	r1, [r7]
   129b4:	bl	10cd4 <fputs_unlocked@plt>
   129b8:	mov	r2, #5
   129bc:	ldr	r1, [pc, #572]	; 12c00 <__assert_fail@plt+0x1cc8>
   129c0:	mov	r0, r6
   129c4:	bl	10d7c <dcgettext@plt>
   129c8:	ldr	r1, [r7]
   129cc:	bl	10cd4 <fputs_unlocked@plt>
   129d0:	mov	r2, #5
   129d4:	ldr	r1, [pc, #552]	; 12c04 <__assert_fail@plt+0x1ccc>
   129d8:	mov	r0, r6
   129dc:	bl	10d7c <dcgettext@plt>
   129e0:	ldr	r1, [r7]
   129e4:	bl	10cd4 <fputs_unlocked@plt>
   129e8:	mov	r2, #5
   129ec:	ldr	r1, [pc, #532]	; 12c08 <__assert_fail@plt+0x1cd0>
   129f0:	mov	r0, r6
   129f4:	bl	10d7c <dcgettext@plt>
   129f8:	ldr	r1, [r7]
   129fc:	bl	10cd4 <fputs_unlocked@plt>
   12a00:	mov	r2, #5
   12a04:	ldr	r1, [pc, #512]	; 12c0c <__assert_fail@plt+0x1cd4>
   12a08:	mov	r0, r6
   12a0c:	bl	10d7c <dcgettext@plt>
   12a10:	ldr	r1, [r7]
   12a14:	bl	10cd4 <fputs_unlocked@plt>
   12a18:	ldm	r4!, {r0, r1, r2, r3}
   12a1c:	mov	lr, sp
   12a20:	stmia	lr!, {r0, r1, r2, r3}
   12a24:	ldm	r4!, {r0, r1, r2, r3}
   12a28:	ldr	ip, [sp]
   12a2c:	stmia	lr!, {r0, r1, r2, r3}
   12a30:	cmp	ip, #0
   12a34:	ldm	r4!, {r0, r1, r2, r3}
   12a38:	stmia	lr!, {r0, r1, r2, r3}
   12a3c:	ldm	r4, {r0, r1}
   12a40:	moveq	r4, sp
   12a44:	stm	lr, {r0, r1}
   12a48:	beq	12a78 <__assert_fail@plt+0x1b40>
   12a4c:	ldr	r5, [pc, #444]	; 12c10 <__assert_fail@plt+0x1cd8>
   12a50:	mov	r4, sp
   12a54:	b	12a64 <__assert_fail@plt+0x1b2c>
   12a58:	ldr	ip, [r4, #8]!
   12a5c:	cmp	ip, #0
   12a60:	beq	12a78 <__assert_fail@plt+0x1b40>
   12a64:	mov	r1, ip
   12a68:	mov	r0, r5
   12a6c:	bl	10cec <strcmp@plt>
   12a70:	cmp	r0, #0
   12a74:	bne	12a58 <__assert_fail@plt+0x1b20>
   12a78:	ldr	r4, [r4, #4]
   12a7c:	mov	r2, #5
   12a80:	cmp	r4, #0
   12a84:	ldr	r1, [pc, #392]	; 12c14 <__assert_fail@plt+0x1cdc>
   12a88:	beq	12b30 <__assert_fail@plt+0x1bf8>
   12a8c:	mov	r0, #0
   12a90:	bl	10d7c <dcgettext@plt>
   12a94:	ldr	r3, [pc, #380]	; 12c18 <__assert_fail@plt+0x1ce0>
   12a98:	ldr	r2, [pc, #380]	; 12c1c <__assert_fail@plt+0x1ce4>
   12a9c:	mov	r1, r0
   12aa0:	mov	r0, #1
   12aa4:	bl	10e84 <__printf_chk@plt>
   12aa8:	mov	r1, #0
   12aac:	mov	r0, #5
   12ab0:	bl	10ed8 <setlocale@plt>
   12ab4:	cmp	r0, #0
   12ab8:	ldreq	r5, [pc, #336]	; 12c10 <__assert_fail@plt+0x1cd8>
   12abc:	beq	12ad8 <__assert_fail@plt+0x1ba0>
   12ac0:	mov	r2, #3
   12ac4:	ldr	r1, [pc, #340]	; 12c20 <__assert_fail@plt+0x1ce8>
   12ac8:	bl	10f20 <strncmp@plt>
   12acc:	ldr	r5, [pc, #316]	; 12c10 <__assert_fail@plt+0x1cd8>
   12ad0:	cmp	r0, #0
   12ad4:	bne	12bc0 <__assert_fail@plt+0x1c88>
   12ad8:	mov	r2, #5
   12adc:	ldr	r1, [pc, #320]	; 12c24 <__assert_fail@plt+0x1cec>
   12ae0:	mov	r0, #0
   12ae4:	bl	10d7c <dcgettext@plt>
   12ae8:	ldr	r3, [pc, #288]	; 12c10 <__assert_fail@plt+0x1cd8>
   12aec:	ldr	r2, [pc, #292]	; 12c18 <__assert_fail@plt+0x1ce0>
   12af0:	mov	r1, r0
   12af4:	mov	r0, #1
   12af8:	bl	10e84 <__printf_chk@plt>
   12afc:	mov	r2, #5
   12b00:	ldr	r1, [pc, #288]	; 12c28 <__assert_fail@plt+0x1cf0>
   12b04:	mov	r0, #0
   12b08:	bl	10d7c <dcgettext@plt>
   12b0c:	ldr	r2, [pc, #280]	; 12c2c <__assert_fail@plt+0x1cf4>
   12b10:	cmp	r4, r5
   12b14:	ldr	r3, [pc, #276]	; 12c30 <__assert_fail@plt+0x1cf8>
   12b18:	movne	r3, r2
   12b1c:	mov	r1, r0
   12b20:	mov	r2, r4
   12b24:	mov	r0, #1
   12b28:	bl	10e84 <__printf_chk@plt>
   12b2c:	b	12940 <__assert_fail@plt+0x1a08>
   12b30:	mov	r0, r4
   12b34:	bl	10d7c <dcgettext@plt>
   12b38:	ldr	r3, [pc, #216]	; 12c18 <__assert_fail@plt+0x1ce0>
   12b3c:	ldr	r2, [pc, #216]	; 12c1c <__assert_fail@plt+0x1ce4>
   12b40:	mov	r1, r0
   12b44:	mov	r0, #1
   12b48:	bl	10e84 <__printf_chk@plt>
   12b4c:	mov	r1, r4
   12b50:	mov	r0, #5
   12b54:	bl	10ed8 <setlocale@plt>
   12b58:	cmp	r0, #0
   12b5c:	beq	12b74 <__assert_fail@plt+0x1c3c>
   12b60:	mov	r2, #3
   12b64:	ldr	r1, [pc, #180]	; 12c20 <__assert_fail@plt+0x1ce8>
   12b68:	bl	10f20 <strncmp@plt>
   12b6c:	cmp	r0, #0
   12b70:	bne	12bb8 <__assert_fail@plt+0x1c80>
   12b74:	mov	r2, #5
   12b78:	ldr	r1, [pc, #164]	; 12c24 <__assert_fail@plt+0x1cec>
   12b7c:	mov	r0, #0
   12b80:	bl	10d7c <dcgettext@plt>
   12b84:	ldr	r3, [pc, #132]	; 12c10 <__assert_fail@plt+0x1cd8>
   12b88:	ldr	r2, [pc, #136]	; 12c18 <__assert_fail@plt+0x1ce0>
   12b8c:	mov	r4, r3
   12b90:	mov	r1, r0
   12b94:	mov	r0, #1
   12b98:	bl	10e84 <__printf_chk@plt>
   12b9c:	ldr	r1, [pc, #132]	; 12c28 <__assert_fail@plt+0x1cf0>
   12ba0:	mov	r2, #5
   12ba4:	mov	r0, #0
   12ba8:	bl	10d7c <dcgettext@plt>
   12bac:	ldr	r3, [pc, #124]	; 12c30 <__assert_fail@plt+0x1cf8>
   12bb0:	mov	r1, r0
   12bb4:	b	12b20 <__assert_fail@plt+0x1be8>
   12bb8:	ldr	r5, [pc, #80]	; 12c10 <__assert_fail@plt+0x1cd8>
   12bbc:	mov	r4, r5
   12bc0:	mov	r2, #5
   12bc4:	ldr	r1, [pc, #104]	; 12c34 <__assert_fail@plt+0x1cfc>
   12bc8:	mov	r0, #0
   12bcc:	bl	10d7c <dcgettext@plt>
   12bd0:	ldr	r1, [r7]
   12bd4:	bl	10cd4 <fputs_unlocked@plt>
   12bd8:	b	12ad8 <__assert_fail@plt+0x1ba0>
   12bdc:	andeq	fp, r2, r8, asr #2
   12be0:	strdeq	r9, [r1], -r0
   12be4:	muleq	r3, r8, r2
   12be8:	andeq	r9, r1, r8, lsl sl
   12bec:	andeq	fp, r2, r4, asr r1
   12bf0:	ldrdeq	r9, [r1], -r4
   12bf4:	andeq	r9, r1, r4, asr #20
   12bf8:	andeq	r9, r1, r8, asr #21
   12bfc:	andeq	r9, r1, r0, lsl #22
   12c00:	andeq	r9, r1, ip, asr #22
   12c04:	andeq	r9, r1, r4, ror #24
   12c08:	andeq	r9, r1, r4, lsl #27
   12c0c:			; <UNDEFINED> instruction: 0x00019db4
   12c10:	andeq	r9, r1, ip, ror #19
   12c14:	andeq	r9, r1, ip, ror #27
   12c18:	andeq	r9, r1, r4, lsl #28
   12c1c:	andeq	r9, r1, ip, lsr #28
   12c20:	andeq	r9, r1, ip, lsr lr
   12c24:	andeq	r9, r1, r8, lsl #29
   12c28:	andeq	r9, r1, r4, lsr #29
   12c2c:	andeq	r9, r1, r4, asr #21
   12c30:	andeq	r9, r1, ip, asr #31
   12c34:	andeq	r9, r1, r0, asr #28
   12c38:	ldr	r3, [pc, #4]	; 12c44 <__assert_fail@plt+0x1d0c>
   12c3c:	str	r0, [r3]
   12c40:	bx	lr
   12c44:	muleq	r3, r0, r2
   12c48:	ldr	r3, [pc, #4]	; 12c54 <__assert_fail@plt+0x1d1c>
   12c4c:	strb	r0, [r3, #4]
   12c50:	bx	lr
   12c54:	muleq	r3, r0, r2
   12c58:	ldr	r3, [pc, #192]	; 12d20 <__assert_fail@plt+0x1de8>
   12c5c:	push	{r4, r5, r6, lr}
   12c60:	sub	sp, sp, #8
   12c64:	ldr	r0, [r3]
   12c68:	bl	19144 <__assert_fail@plt+0x820c>
   12c6c:	cmp	r0, #0
   12c70:	beq	12c94 <__assert_fail@plt+0x1d5c>
   12c74:	ldr	r4, [pc, #168]	; 12d24 <__assert_fail@plt+0x1dec>
   12c78:	ldrb	r3, [r4, #4]
   12c7c:	cmp	r3, #0
   12c80:	beq	12cb0 <__assert_fail@plt+0x1d78>
   12c84:	bl	10e60 <__errno_location@plt>
   12c88:	ldr	r3, [r0]
   12c8c:	cmp	r3, #32
   12c90:	bne	12cb0 <__assert_fail@plt+0x1d78>
   12c94:	ldr	r3, [pc, #140]	; 12d28 <__assert_fail@plt+0x1df0>
   12c98:	ldr	r0, [r3]
   12c9c:	bl	19144 <__assert_fail@plt+0x820c>
   12ca0:	cmp	r0, #0
   12ca4:	bne	12cf8 <__assert_fail@plt+0x1dc0>
   12ca8:	add	sp, sp, #8
   12cac:	pop	{r4, r5, r6, pc}
   12cb0:	mov	r2, #5
   12cb4:	ldr	r1, [pc, #112]	; 12d2c <__assert_fail@plt+0x1df4>
   12cb8:	mov	r0, #0
   12cbc:	bl	10d7c <dcgettext@plt>
   12cc0:	ldr	r4, [r4]
   12cc4:	cmp	r4, #0
   12cc8:	mov	r5, r0
   12ccc:	beq	12d04 <__assert_fail@plt+0x1dcc>
   12cd0:	bl	10e60 <__errno_location@plt>
   12cd4:	ldr	r6, [r0]
   12cd8:	mov	r0, r4
   12cdc:	bl	15b88 <__assert_fail@plt+0x4c50>
   12ce0:	mov	r1, r6
   12ce4:	str	r5, [sp]
   12ce8:	ldr	r2, [pc, #64]	; 12d30 <__assert_fail@plt+0x1df8>
   12cec:	mov	r3, r0
   12cf0:	mov	r0, #0
   12cf4:	bl	10de8 <error@plt>
   12cf8:	ldr	r3, [pc, #52]	; 12d34 <__assert_fail@plt+0x1dfc>
   12cfc:	ldr	r0, [r3]
   12d00:	bl	10d28 <_exit@plt>
   12d04:	bl	10e60 <__errno_location@plt>
   12d08:	mov	r3, r5
   12d0c:	ldr	r2, [pc, #36]	; 12d38 <__assert_fail@plt+0x1e00>
   12d10:	ldr	r1, [r0]
   12d14:	mov	r0, r4
   12d18:	bl	10de8 <error@plt>
   12d1c:	b	12cf8 <__assert_fail@plt+0x1dc0>
   12d20:	andeq	fp, r2, r4, asr r1
   12d24:	muleq	r3, r0, r2
   12d28:	andeq	fp, r2, r8, asr #2
   12d2c:	andeq	sl, r1, r0, lsr #1
   12d30:	andeq	sl, r1, ip, lsr #1
   12d34:	strdeq	fp, [r2], -r0
   12d38:	strheq	sl, [r1], -r0
   12d3c:	push	{r4, r5}
   12d40:	pop	{r4, r5}
   12d44:	b	10cf8 <posix_fadvise64@plt>
   12d48:	cmp	r0, #0
   12d4c:	bxeq	lr
   12d50:	push	{r4, lr}
   12d54:	sub	sp, sp, #16
   12d58:	mov	r4, r1
   12d5c:	bl	10e90 <fileno@plt>
   12d60:	mov	r2, #0
   12d64:	mov	r3, #0
   12d68:	str	r4, [sp, #8]
   12d6c:	strd	r2, [sp]
   12d70:	bl	10cf8 <posix_fadvise64@plt>
   12d74:	add	sp, sp, #16
   12d78:	pop	{r4, pc}
   12d7c:	push	{r4, r5, lr}
   12d80:	sub	sp, sp, #12
   12d84:	mov	r4, r0
   12d88:	bl	10e90 <fileno@plt>
   12d8c:	cmp	r0, #0
   12d90:	mov	r0, r4
   12d94:	blt	12e10 <__assert_fail@plt+0x1ed8>
   12d98:	bl	10e0c <__freading@plt>
   12d9c:	cmp	r0, #0
   12da0:	bne	12ddc <__assert_fail@plt+0x1ea4>
   12da4:	mov	r0, r4
   12da8:	bl	12e1c <__assert_fail@plt+0x1ee4>
   12dac:	cmp	r0, #0
   12db0:	beq	12e0c <__assert_fail@plt+0x1ed4>
   12db4:	bl	10e60 <__errno_location@plt>
   12db8:	mov	r5, r0
   12dbc:	mov	r0, r4
   12dc0:	ldr	r4, [r5]
   12dc4:	bl	10ea8 <fclose@plt>
   12dc8:	cmp	r4, #0
   12dcc:	mvnne	r0, #0
   12dd0:	strne	r4, [r5]
   12dd4:	add	sp, sp, #12
   12dd8:	pop	{r4, r5, pc}
   12ddc:	mov	r0, r4
   12de0:	bl	10e90 <fileno@plt>
   12de4:	mov	r3, #1
   12de8:	str	r3, [sp]
   12dec:	mov	r2, #0
   12df0:	mov	r3, #0
   12df4:	bl	10db8 <lseek64@plt>
   12df8:	mvn	r3, #0
   12dfc:	mvn	r2, #0
   12e00:	cmp	r1, r3
   12e04:	cmpeq	r0, r2
   12e08:	bne	12da4 <__assert_fail@plt+0x1e6c>
   12e0c:	mov	r0, r4
   12e10:	add	sp, sp, #12
   12e14:	pop	{r4, r5, lr}
   12e18:	b	10ea8 <fclose@plt>
   12e1c:	push	{r4, lr}
   12e20:	subs	r4, r0, #0
   12e24:	sub	sp, sp, #8
   12e28:	beq	12e44 <__assert_fail@plt+0x1f0c>
   12e2c:	bl	10e0c <__freading@plt>
   12e30:	cmp	r0, #0
   12e34:	beq	12e44 <__assert_fail@plt+0x1f0c>
   12e38:	ldr	r3, [r4]
   12e3c:	tst	r3, #256	; 0x100
   12e40:	bne	12e54 <__assert_fail@plt+0x1f1c>
   12e44:	mov	r0, r4
   12e48:	add	sp, sp, #8
   12e4c:	pop	{r4, lr}
   12e50:	b	10d04 <fflush@plt>
   12e54:	mov	r3, #1
   12e58:	str	r3, [sp]
   12e5c:	mov	r2, #0
   12e60:	mov	r3, #0
   12e64:	mov	r0, r4
   12e68:	bl	12e7c <__assert_fail@plt+0x1f44>
   12e6c:	mov	r0, r4
   12e70:	add	sp, sp, #8
   12e74:	pop	{r4, lr}
   12e78:	b	10d04 <fflush@plt>
   12e7c:	push	{r4, r5, r6, r7, r8, lr}
   12e80:	sub	sp, sp, #8
   12e84:	ldmib	r0, {ip, lr}
   12e88:	mov	r4, r0
   12e8c:	ldr	r5, [sp, #32]
   12e90:	cmp	lr, ip
   12e94:	beq	12eac <__assert_fail@plt+0x1f74>
   12e98:	str	r5, [sp, #32]
   12e9c:	mov	r0, r4
   12ea0:	add	sp, sp, #8
   12ea4:	pop	{r4, r5, r6, r7, r8, lr}
   12ea8:	b	10eb4 <fseeko64@plt>
   12eac:	ldr	lr, [r0, #20]
   12eb0:	ldr	ip, [r0, #16]
   12eb4:	cmp	lr, ip
   12eb8:	bne	12e98 <__assert_fail@plt+0x1f60>
   12ebc:	ldr	r8, [r0, #36]	; 0x24
   12ec0:	cmp	r8, #0
   12ec4:	bne	12e98 <__assert_fail@plt+0x1f60>
   12ec8:	mov	r6, r2
   12ecc:	mov	r7, r3
   12ed0:	bl	10e90 <fileno@plt>
   12ed4:	mov	r2, r6
   12ed8:	mov	r3, r7
   12edc:	str	r5, [sp]
   12ee0:	bl	10db8 <lseek64@plt>
   12ee4:	mvn	r3, #0
   12ee8:	mvn	r2, #0
   12eec:	cmp	r1, r3
   12ef0:	cmpeq	r0, r2
   12ef4:	beq	12f14 <__assert_fail@plt+0x1fdc>
   12ef8:	ldr	r3, [r4]
   12efc:	strd	r0, [r4, #80]	; 0x50
   12f00:	mov	r0, r8
   12f04:	bic	r3, r3, #16
   12f08:	str	r3, [r4]
   12f0c:	add	sp, sp, #8
   12f10:	pop	{r4, r5, r6, r7, r8, pc}
   12f14:	mvn	r0, #0
   12f18:	b	12f0c <__assert_fail@plt+0x1fd4>
   12f1c:	push	{r4, r5, r6, lr}
   12f20:	subs	r4, r0, #0
   12f24:	beq	12f98 <__assert_fail@plt+0x2060>
   12f28:	mov	r1, #47	; 0x2f
   12f2c:	bl	10ee4 <strrchr@plt>
   12f30:	subs	r5, r0, #0
   12f34:	beq	12f84 <__assert_fail@plt+0x204c>
   12f38:	add	r6, r5, #1
   12f3c:	sub	r3, r6, r4
   12f40:	cmp	r3, #6
   12f44:	ble	12f84 <__assert_fail@plt+0x204c>
   12f48:	mov	r2, #7
   12f4c:	ldr	r1, [pc, #96]	; 12fb4 <__assert_fail@plt+0x207c>
   12f50:	sub	r0, r5, #6
   12f54:	bl	10f20 <strncmp@plt>
   12f58:	cmp	r0, #0
   12f5c:	bne	12f84 <__assert_fail@plt+0x204c>
   12f60:	mov	r2, #3
   12f64:	ldr	r1, [pc, #76]	; 12fb8 <__assert_fail@plt+0x2080>
   12f68:	mov	r0, r6
   12f6c:	bl	10f20 <strncmp@plt>
   12f70:	cmp	r0, #0
   12f74:	movne	r4, r6
   12f78:	ldreq	r3, [pc, #60]	; 12fbc <__assert_fail@plt+0x2084>
   12f7c:	addeq	r4, r5, #4
   12f80:	streq	r4, [r3]
   12f84:	ldr	r2, [pc, #52]	; 12fc0 <__assert_fail@plt+0x2088>
   12f88:	ldr	r3, [pc, #52]	; 12fc4 <__assert_fail@plt+0x208c>
   12f8c:	str	r4, [r2]
   12f90:	str	r4, [r3]
   12f94:	pop	{r4, r5, r6, pc}
   12f98:	ldr	r3, [pc, #40]	; 12fc8 <__assert_fail@plt+0x2090>
   12f9c:	mov	r2, #55	; 0x37
   12fa0:	mov	r1, #1
   12fa4:	ldr	r3, [r3]
   12fa8:	ldr	r0, [pc, #28]	; 12fcc <__assert_fail@plt+0x2094>
   12fac:	bl	10dac <fwrite@plt>
   12fb0:	bl	10f2c <abort@plt>
   12fb4:	andeq	sl, r1, ip, ror #1
   12fb8:	strdeq	sl, [r1], -r4
   12fbc:	andeq	fp, r2, r8, lsr r1
   12fc0:	muleq	r3, r8, r2
   12fc4:	andeq	fp, r2, ip, lsr r1
   12fc8:	andeq	fp, r2, r8, asr #2
   12fcc:	strheq	sl, [r1], -r4
   12fd0:	push	{r4, r5, r6, lr}
   12fd4:	mov	r4, r0
   12fd8:	mov	r5, r1
   12fdc:	bl	19218 <__assert_fail@plt+0x82e0>
   12fe0:	ldrb	r3, [r0]
   12fe4:	bic	r3, r3, #32
   12fe8:	cmp	r3, #85	; 0x55
   12fec:	bne	1304c <__assert_fail@plt+0x2114>
   12ff0:	ldrb	r3, [r0, #1]
   12ff4:	bic	r3, r3, #32
   12ff8:	cmp	r3, #84	; 0x54
   12ffc:	bne	13088 <__assert_fail@plt+0x2150>
   13000:	ldrb	r3, [r0, #2]
   13004:	bic	r3, r3, #32
   13008:	cmp	r3, #70	; 0x46
   1300c:	bne	13088 <__assert_fail@plt+0x2150>
   13010:	ldrb	r3, [r0, #3]
   13014:	cmp	r3, #45	; 0x2d
   13018:	bne	13088 <__assert_fail@plt+0x2150>
   1301c:	ldrb	r3, [r0, #4]
   13020:	cmp	r3, #56	; 0x38
   13024:	bne	13088 <__assert_fail@plt+0x2150>
   13028:	ldrb	r3, [r0, #5]
   1302c:	cmp	r3, #0
   13030:	bne	13088 <__assert_fail@plt+0x2150>
   13034:	ldrb	r2, [r4]
   13038:	ldr	r3, [pc, #152]	; 130d8 <__assert_fail@plt+0x21a0>
   1303c:	ldr	r0, [pc, #152]	; 130dc <__assert_fail@plt+0x21a4>
   13040:	cmp	r2, #96	; 0x60
   13044:	movne	r0, r3
   13048:	pop	{r4, r5, r6, pc}
   1304c:	cmp	r3, #71	; 0x47
   13050:	bne	13088 <__assert_fail@plt+0x2150>
   13054:	ldrb	r3, [r0, #1]
   13058:	bic	r3, r3, #32
   1305c:	cmp	r3, #66	; 0x42
   13060:	bne	13088 <__assert_fail@plt+0x2150>
   13064:	ldrb	r3, [r0, #2]
   13068:	cmp	r3, #49	; 0x31
   1306c:	bne	13088 <__assert_fail@plt+0x2150>
   13070:	ldrb	r3, [r0, #3]
   13074:	cmp	r3, #56	; 0x38
   13078:	bne	13088 <__assert_fail@plt+0x2150>
   1307c:	ldrb	r3, [r0, #4]
   13080:	cmp	r3, #48	; 0x30
   13084:	beq	1309c <__assert_fail@plt+0x2164>
   13088:	ldr	r3, [pc, #80]	; 130e0 <__assert_fail@plt+0x21a8>
   1308c:	cmp	r5, #9
   13090:	ldr	r0, [pc, #76]	; 130e4 <__assert_fail@plt+0x21ac>
   13094:	movne	r0, r3
   13098:	pop	{r4, r5, r6, pc}
   1309c:	ldrb	r3, [r0, #5]
   130a0:	cmp	r3, #51	; 0x33
   130a4:	bne	13088 <__assert_fail@plt+0x2150>
   130a8:	ldrb	r3, [r0, #6]
   130ac:	cmp	r3, #48	; 0x30
   130b0:	bne	13088 <__assert_fail@plt+0x2150>
   130b4:	ldrb	r3, [r0, #7]
   130b8:	cmp	r3, #0
   130bc:	bne	13088 <__assert_fail@plt+0x2150>
   130c0:	ldrb	r2, [r4]
   130c4:	ldr	r3, [pc, #28]	; 130e8 <__assert_fail@plt+0x21b0>
   130c8:	ldr	r0, [pc, #28]	; 130ec <__assert_fail@plt+0x21b4>
   130cc:	cmp	r2, #96	; 0x60
   130d0:	movne	r0, r3
   130d4:	pop	{r4, r5, r6, pc}
   130d8:	andeq	sl, r1, r0, asr r1
   130dc:	andeq	sl, r1, ip, asr #2
   130e0:	andeq	sl, r1, ip, asr r1
   130e4:			; <UNDEFINED> instruction: 0x000199b0
   130e8:	andeq	sl, r1, r8, asr r1
   130ec:	andeq	sl, r1, r4, asr r1
   130f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   130f4:	sub	sp, sp, #140	; 0x8c
   130f8:	mov	r9, r1
   130fc:	str	r3, [sp, #24]
   13100:	mov	r3, #1
   13104:	mov	sl, r0
   13108:	str	r2, [sp, #44]	; 0x2c
   1310c:	str	r3, [sp, #28]
   13110:	bl	10dc4 <__ctype_get_mb_cur_max@plt>
   13114:	ldr	r3, [sp, #180]	; 0xb4
   13118:	mov	fp, r9
   1311c:	mov	r9, sl
   13120:	lsr	r3, r3, #1
   13124:	and	r3, r3, #1
   13128:	str	r3, [sp, #40]	; 0x28
   1312c:	ldr	r3, [sp, #180]	; 0xb4
   13130:	mov	r2, #0
   13134:	and	r3, r3, #4
   13138:	str	r3, [sp, #100]	; 0x64
   1313c:	ldr	r3, [sp, #180]	; 0xb4
   13140:	str	r2, [sp, #76]	; 0x4c
   13144:	and	r3, r3, #1
   13148:	str	r3, [sp, #96]	; 0x60
   1314c:	str	r2, [sp, #36]	; 0x24
   13150:	str	r2, [sp, #56]	; 0x38
   13154:	str	r2, [sp, #68]	; 0x44
   13158:	str	r2, [sp, #72]	; 0x48
   1315c:	str	r2, [sp, #84]	; 0x54
   13160:	str	r0, [sp, #80]	; 0x50
   13164:	ldr	r3, [sp, #176]	; 0xb0
   13168:	cmp	r3, #10
   1316c:	ldrls	pc, [pc, r3, lsl #2]
   13170:	b	14348 <__assert_fail@plt+0x3410>
   13174:	andeq	r3, r1, r0, lsr #3
   13178:	andeq	r3, r1, r0, asr #9
   1317c:	andeq	r3, r1, r8, lsl r6
   13180:	strdeq	r3, [r1], -r4
   13184:	andeq	r3, r1, ip, ror #12
   13188:	andeq	r3, r1, ip, asr #12
   1318c:	andeq	r3, r1, r4, lsl r5
   13190:	andeq	r3, r1, r8, lsr r5
   13194:	andeq	r3, r1, r0, ror #10
   13198:	andeq	r3, r1, r0, ror #10
   1319c:	andeq	r3, r1, r0, ror #10
   131a0:	mov	r3, #0
   131a4:	ldr	r1, [sp, #56]	; 0x38
   131a8:	ldr	r2, [sp, #176]	; 0xb0
   131ac:	ldr	lr, [sp, #176]	; 0xb0
   131b0:	mov	r8, r3
   131b4:	mov	ip, r3
   131b8:	str	r3, [sp, #40]	; 0x28
   131bc:	mov	r3, r1
   131c0:	cmp	r2, #2
   131c4:	moveq	r3, #0
   131c8:	andne	r3, r3, #1
   131cc:	mov	r0, r3
   131d0:	str	r3, [sp, #92]	; 0x5c
   131d4:	ldr	r3, [sp, #68]	; 0x44
   131d8:	sub	lr, lr, #2
   131dc:	adds	r2, r3, #0
   131e0:	movne	r2, #1
   131e4:	and	r3, r1, ip
   131e8:	and	r3, r2, r3
   131ec:	clz	lr, lr
   131f0:	str	r3, [sp, #88]	; 0x58
   131f4:	lsr	lr, lr, #5
   131f8:	mov	r3, ip
   131fc:	and	r3, r3, lr
   13200:	mov	sl, #0
   13204:	and	r0, r2, r0
   13208:	str	r3, [sp, #64]	; 0x40
   1320c:	eor	r3, r1, #1
   13210:	str	lr, [sp, #52]	; 0x34
   13214:	str	r0, [sp, #48]	; 0x30
   13218:	str	r3, [sp, #60]	; 0x3c
   1321c:	ldr	r3, [sp, #24]
   13220:	cmn	r3, #1
   13224:	beq	13754 <__assert_fail@plt+0x281c>
   13228:	subs	r7, r3, sl
   1322c:	movne	r7, #1
   13230:	cmp	r7, #0
   13234:	beq	1376c <__assert_fail@plt+0x2834>
   13238:	ldr	r3, [sp, #48]	; 0x30
   1323c:	cmp	r3, #0
   13240:	beq	13ad8 <__assert_fail@plt+0x2ba0>
   13244:	ldr	r2, [sp, #68]	; 0x44
   13248:	ldr	r1, [sp, #24]
   1324c:	cmp	r2, #1
   13250:	mov	r3, r2
   13254:	movls	r3, #0
   13258:	movhi	r3, #1
   1325c:	cmn	r1, #1
   13260:	movne	r3, #0
   13264:	cmp	r3, #0
   13268:	add	r4, sl, r2
   1326c:	beq	1327c <__assert_fail@plt+0x2344>
   13270:	ldr	r0, [sp, #44]	; 0x2c
   13274:	bl	10e48 <strlen@plt>
   13278:	str	r0, [sp, #24]
   1327c:	ldr	r3, [sp, #24]
   13280:	cmp	r3, r4
   13284:	ldr	r3, [sp, #44]	; 0x2c
   13288:	add	r5, r3, sl
   1328c:	bcc	13ae0 <__assert_fail@plt+0x2ba8>
   13290:	mov	r0, r5
   13294:	ldr	r2, [sp, #68]	; 0x44
   13298:	ldr	r1, [sp, #72]	; 0x48
   1329c:	bl	10d64 <memcmp@plt>
   132a0:	cmp	r0, #0
   132a4:	bne	13ae0 <__assert_fail@plt+0x2ba8>
   132a8:	ldr	r3, [sp, #40]	; 0x28
   132ac:	cmp	r3, #0
   132b0:	bne	1449c <__assert_fail@plt+0x3564>
   132b4:	ldrb	r4, [r5]
   132b8:	cmp	r4, #126	; 0x7e
   132bc:	ldrls	pc, [pc, r4, lsl #2]
   132c0:	b	143d8 <__assert_fail@plt+0x34a0>
   132c4:	muleq	r1, r8, r9
   132c8:	ldrdeq	r4, [r1], -r8
   132cc:	ldrdeq	r4, [r1], -r8
   132d0:	ldrdeq	r4, [r1], -r8
   132d4:	ldrdeq	r4, [r1], -r8
   132d8:	ldrdeq	r4, [r1], -r8
   132dc:	ldrdeq	r4, [r1], -r8
   132e0:	andeq	r3, r1, r4, lsl #19
   132e4:	andeq	r3, r1, r0, ror r9
   132e8:	andeq	r3, r1, ip, asr #18
   132ec:	andeq	r3, r1, ip, lsr #18
   132f0:	andeq	r3, r1, ip, asr r9
   132f4:	muleq	r1, r4, r8
   132f8:	andeq	r3, r1, r8, asr #21
   132fc:	ldrdeq	r4, [r1], -r8
   13300:	ldrdeq	r4, [r1], -r8
   13304:	ldrdeq	r4, [r1], -r8
   13308:	ldrdeq	r4, [r1], -r8
   1330c:	ldrdeq	r4, [r1], -r8
   13310:	ldrdeq	r4, [r1], -r8
   13314:	ldrdeq	r4, [r1], -r8
   13318:	ldrdeq	r4, [r1], -r8
   1331c:	ldrdeq	r4, [r1], -r8
   13320:	ldrdeq	r4, [r1], -r8
   13324:	ldrdeq	r4, [r1], -r8
   13328:	ldrdeq	r4, [r1], -r8
   1332c:	ldrdeq	r4, [r1], -r8
   13330:	ldrdeq	r4, [r1], -r8
   13334:	ldrdeq	r4, [r1], -r8
   13338:	ldrdeq	r4, [r1], -r8
   1333c:	ldrdeq	r4, [r1], -r8
   13340:	ldrdeq	r4, [r1], -r8
   13344:			; <UNDEFINED> instruction: 0x00013ab8
   13348:	muleq	r1, r8, sl
   1334c:	muleq	r1, r8, sl
   13350:	andeq	r3, r1, r8, ror sl
   13354:	muleq	r1, r8, sl
   13358:	andeq	r3, r1, r4, lsl #17
   1335c:	muleq	r1, r8, sl
   13360:	andeq	r3, r1, r0, ror #16
   13364:	muleq	r1, r8, sl
   13368:	muleq	r1, r8, sl
   1336c:	muleq	r1, r8, sl
   13370:	andeq	r3, r1, r4, lsl #17
   13374:	andeq	r3, r1, r4, lsl #17
   13378:	andeq	r3, r1, r4, lsl #17
   1337c:	andeq	r3, r1, r4, lsl #17
   13380:	andeq	r3, r1, r4, lsl #17
   13384:	andeq	r3, r1, r4, lsl #17
   13388:	andeq	r3, r1, r4, lsl #17
   1338c:	andeq	r3, r1, r4, lsl #17
   13390:	andeq	r3, r1, r4, lsl #17
   13394:	andeq	r3, r1, r4, lsl #17
   13398:	andeq	r3, r1, r4, lsl #17
   1339c:	andeq	r3, r1, r4, lsl #17
   133a0:	andeq	r3, r1, r4, lsl #17
   133a4:	andeq	r3, r1, r4, lsl #17
   133a8:	andeq	r3, r1, r4, lsl #17
   133ac:	andeq	r3, r1, r4, lsl #17
   133b0:	muleq	r1, r8, sl
   133b4:	muleq	r1, r8, sl
   133b8:	muleq	r1, r8, sl
   133bc:	muleq	r1, r8, sl
   133c0:	andeq	r3, r1, r0, lsl r8
   133c4:	ldrdeq	r4, [r1], -r8
   133c8:	andeq	r3, r1, r4, lsl #17
   133cc:	andeq	r3, r1, r4, lsl #17
   133d0:	andeq	r3, r1, r4, lsl #17
   133d4:	andeq	r3, r1, r4, lsl #17
   133d8:	andeq	r3, r1, r4, lsl #17
   133dc:	andeq	r3, r1, r4, lsl #17
   133e0:	andeq	r3, r1, r4, lsl #17
   133e4:	andeq	r3, r1, r4, lsl #17
   133e8:	andeq	r3, r1, r4, lsl #17
   133ec:	andeq	r3, r1, r4, lsl #17
   133f0:	andeq	r3, r1, r4, lsl #17
   133f4:	andeq	r3, r1, r4, lsl #17
   133f8:	andeq	r3, r1, r4, lsl #17
   133fc:	andeq	r3, r1, r4, lsl #17
   13400:	andeq	r3, r1, r4, lsl #17
   13404:	andeq	r3, r1, r4, lsl #17
   13408:	andeq	r3, r1, r4, lsl #17
   1340c:	andeq	r3, r1, r4, lsl #17
   13410:	andeq	r3, r1, r4, lsl #17
   13414:	andeq	r3, r1, r4, lsl #17
   13418:	andeq	r3, r1, r4, lsl #17
   1341c:	andeq	r3, r1, r4, lsl #17
   13420:	andeq	r3, r1, r4, lsl #17
   13424:	andeq	r3, r1, r4, lsl #17
   13428:	andeq	r3, r1, r4, lsl #17
   1342c:	andeq	r3, r1, r4, lsl #17
   13430:	muleq	r1, r8, sl
   13434:	ldrdeq	r3, [r1], -ip
   13438:	andeq	r3, r1, r4, lsl #17
   1343c:	muleq	r1, r8, sl
   13440:	andeq	r3, r1, r4, lsl #17
   13444:	muleq	r1, r8, sl
   13448:	andeq	r3, r1, r4, lsl #17
   1344c:	andeq	r3, r1, r4, lsl #17
   13450:	andeq	r3, r1, r4, lsl #17
   13454:	andeq	r3, r1, r4, lsl #17
   13458:	andeq	r3, r1, r4, lsl #17
   1345c:	andeq	r3, r1, r4, lsl #17
   13460:	andeq	r3, r1, r4, lsl #17
   13464:	andeq	r3, r1, r4, lsl #17
   13468:	andeq	r3, r1, r4, lsl #17
   1346c:	andeq	r3, r1, r4, lsl #17
   13470:	andeq	r3, r1, r4, lsl #17
   13474:	andeq	r3, r1, r4, lsl #17
   13478:	andeq	r3, r1, r4, lsl #17
   1347c:	andeq	r3, r1, r4, lsl #17
   13480:	andeq	r3, r1, r4, lsl #17
   13484:	andeq	r3, r1, r4, lsl #17
   13488:	andeq	r3, r1, r4, lsl #17
   1348c:	andeq	r3, r1, r4, lsl #17
   13490:	andeq	r3, r1, r4, lsl #17
   13494:	andeq	r3, r1, r4, lsl #17
   13498:	andeq	r3, r1, r4, lsl #17
   1349c:	andeq	r3, r1, r4, lsl #17
   134a0:	andeq	r3, r1, r4, lsl #17
   134a4:	andeq	r3, r1, r4, lsl #17
   134a8:	andeq	r3, r1, r4, lsl #17
   134ac:	andeq	r3, r1, r4, lsl #17
   134b0:	muleq	r1, r4, r6
   134b4:	muleq	r1, r8, sl
   134b8:	muleq	r1, r4, r6
   134bc:	andeq	r3, r1, r8, ror sl
   134c0:	mov	r3, #1
   134c4:	str	r3, [sp, #40]	; 0x28
   134c8:	str	r3, [sp, #68]	; 0x44
   134cc:	mov	r8, #0
   134d0:	ldr	r3, [pc, #4056]	; 144b0 <__assert_fail@plt+0x3578>
   134d4:	str	r3, [sp, #72]	; 0x48
   134d8:	mov	r3, #2
   134dc:	str	r3, [sp, #176]	; 0xb0
   134e0:	ldr	r1, [sp, #56]	; 0x38
   134e4:	mov	r2, r3
   134e8:	ldr	ip, [sp, #40]	; 0x28
   134ec:	mov	lr, r3
   134f0:	b	131bc <__assert_fail@plt+0x2284>
   134f4:	mov	r3, #1
   134f8:	str	r3, [sp, #56]	; 0x38
   134fc:	str	r3, [sp, #68]	; 0x44
   13500:	str	r3, [sp, #40]	; 0x28
   13504:	ldr	r3, [pc, #4004]	; 144b0 <__assert_fail@plt+0x3578>
   13508:	mov	r8, #0
   1350c:	str	r3, [sp, #72]	; 0x48
   13510:	b	134d8 <__assert_fail@plt+0x25a0>
   13514:	mov	r3, #1
   13518:	str	r3, [sp, #56]	; 0x38
   1351c:	str	r3, [sp, #68]	; 0x44
   13520:	str	r3, [sp, #40]	; 0x28
   13524:	ldr	r3, [pc, #3976]	; 144b4 <__assert_fail@plt+0x357c>
   13528:	mov	r8, #0
   1352c:	str	r3, [sp, #72]	; 0x48
   13530:	mov	r3, #5
   13534:	b	134dc <__assert_fail@plt+0x25a4>
   13538:	mov	r3, #0
   1353c:	str	r3, [sp, #40]	; 0x28
   13540:	mov	r3, #1
   13544:	str	r3, [sp, #56]	; 0x38
   13548:	mov	r8, #0
   1354c:	mov	r1, r3
   13550:	ldr	r2, [sp, #176]	; 0xb0
   13554:	ldr	ip, [sp, #40]	; 0x28
   13558:	ldr	lr, [sp, #176]	; 0xb0
   1355c:	b	131bc <__assert_fail@plt+0x2284>
   13560:	ldr	r3, [sp, #176]	; 0xb0
   13564:	cmp	r3, #10
   13568:	beq	135ac <__assert_fail@plt+0x2674>
   1356c:	mov	r2, #5
   13570:	ldr	r1, [pc, #3904]	; 144b8 <__assert_fail@plt+0x3580>
   13574:	mov	r0, #0
   13578:	bl	10d7c <dcgettext@plt>
   1357c:	ldr	r2, [pc, #3892]	; 144b8 <__assert_fail@plt+0x3580>
   13580:	cmp	r0, r2
   13584:	str	r0, [sp, #188]	; 0xbc
   13588:	beq	14644 <__assert_fail@plt+0x370c>
   1358c:	mov	r2, #5
   13590:	ldr	r1, [pc, #3864]	; 144b0 <__assert_fail@plt+0x3578>
   13594:	mov	r0, #0
   13598:	bl	10d7c <dcgettext@plt>
   1359c:	ldr	r2, [pc, #3852]	; 144b0 <__assert_fail@plt+0x3578>
   135a0:	cmp	r0, r2
   135a4:	str	r0, [sp, #192]	; 0xc0
   135a8:	beq	14634 <__assert_fail@plt+0x36fc>
   135ac:	ldr	r8, [sp, #40]	; 0x28
   135b0:	cmp	r8, #0
   135b4:	movne	r8, #0
   135b8:	bne	135e8 <__assert_fail@plt+0x26b0>
   135bc:	ldr	r3, [sp, #188]	; 0xbc
   135c0:	ldrb	r3, [r3]
   135c4:	cmp	r3, #0
   135c8:	beq	135e8 <__assert_fail@plt+0x26b0>
   135cc:	ldr	r2, [sp, #188]	; 0xbc
   135d0:	cmp	fp, r8
   135d4:	strbhi	r3, [r9, r8]
   135d8:	ldrb	r3, [r2, #1]!
   135dc:	add	r8, r8, #1
   135e0:	cmp	r3, #0
   135e4:	bne	135d0 <__assert_fail@plt+0x2698>
   135e8:	ldr	r0, [sp, #192]	; 0xc0
   135ec:	bl	10e48 <strlen@plt>
   135f0:	ldr	r3, [sp, #192]	; 0xc0
   135f4:	ldr	r2, [sp, #176]	; 0xb0
   135f8:	str	r3, [sp, #72]	; 0x48
   135fc:	mov	r3, #1
   13600:	str	r3, [sp, #56]	; 0x38
   13604:	mov	r1, r3
   13608:	ldr	ip, [sp, #40]	; 0x28
   1360c:	ldr	lr, [sp, #176]	; 0xb0
   13610:	str	r0, [sp, #68]	; 0x44
   13614:	b	131bc <__assert_fail@plt+0x2284>
   13618:	ldr	r3, [sp, #40]	; 0x28
   1361c:	cmp	r3, #0
   13620:	beq	142c8 <__assert_fail@plt+0x3390>
   13624:	mov	r3, #1
   13628:	str	r3, [sp, #68]	; 0x44
   1362c:	ldr	r3, [pc, #3708]	; 144b0 <__assert_fail@plt+0x3578>
   13630:	str	r3, [sp, #72]	; 0x48
   13634:	mov	r8, #0
   13638:	ldr	r1, [sp, #56]	; 0x38
   1363c:	ldr	r2, [sp, #176]	; 0xb0
   13640:	ldr	ip, [sp, #40]	; 0x28
   13644:	ldr	lr, [sp, #176]	; 0xb0
   13648:	b	131bc <__assert_fail@plt+0x2284>
   1364c:	ldr	r3, [sp, #40]	; 0x28
   13650:	cmp	r3, #0
   13654:	beq	1434c <__assert_fail@plt+0x3414>
   13658:	str	r3, [sp, #56]	; 0x38
   1365c:	mov	r3, #1
   13660:	str	r3, [sp, #68]	; 0x44
   13664:	ldr	r3, [pc, #3656]	; 144b4 <__assert_fail@plt+0x357c>
   13668:	b	13630 <__assert_fail@plt+0x26f8>
   1366c:	ldr	r3, [sp, #40]	; 0x28
   13670:	cmp	r3, #0
   13674:	mov	r3, #1
   13678:	streq	r3, [sp, #56]	; 0x38
   1367c:	beq	142c8 <__assert_fail@plt+0x3390>
   13680:	str	r3, [sp, #68]	; 0x44
   13684:	ldr	r3, [pc, #3620]	; 144b0 <__assert_fail@plt+0x3578>
   13688:	mov	r8, #0
   1368c:	str	r3, [sp, #72]	; 0x48
   13690:	b	134d8 <__assert_fail@plt+0x25a0>
   13694:	ldr	r3, [sp, #24]
   13698:	ldr	r6, [sp, #48]	; 0x30
   1369c:	cmn	r3, #1
   136a0:	beq	13cfc <__assert_fail@plt+0x2dc4>
   136a4:	subs	r3, r3, #1
   136a8:	movne	r3, #1
   136ac:	cmp	r3, #0
   136b0:	beq	13a7c <__assert_fail@plt+0x2b44>
   136b4:	ldr	r1, [sp, #52]	; 0x34
   136b8:	mov	r7, r3
   136bc:	mov	r3, #0
   136c0:	str	r3, [sp, #32]
   136c4:	ldr	r3, [sp, #60]	; 0x3c
   136c8:	orr	r2, r1, r3
   136cc:	ldr	r3, [sp, #40]	; 0x28
   136d0:	eor	r2, r2, #1
   136d4:	orr	r2, r3, r2
   136d8:	tst	r2, #255	; 0xff
   136dc:	bne	14000 <__assert_fail@plt+0x30c8>
   136e0:	cmp	r6, #0
   136e4:	bne	138c0 <__assert_fail@plt+0x2988>
   136e8:	ldr	r3, [sp, #36]	; 0x24
   136ec:	add	sl, sl, #1
   136f0:	and	r3, r3, r7
   136f4:	uxtb	r6, r3
   136f8:	cmp	r6, #0
   136fc:	beq	13728 <__assert_fail@plt+0x27f0>
   13700:	cmp	fp, r8
   13704:	movhi	r3, #39	; 0x27
   13708:	strbhi	r3, [r9, r8]
   1370c:	add	r3, r8, #1
   13710:	cmp	fp, r3
   13714:	movhi	r2, #39	; 0x27
   13718:	add	r8, r8, #2
   1371c:	strbhi	r2, [r9, r3]
   13720:	mov	r3, #0
   13724:	str	r3, [sp, #36]	; 0x24
   13728:	ldr	r2, [sp, #32]
   1372c:	cmp	r8, fp
   13730:	ldr	r3, [sp, #28]
   13734:	strbcc	r4, [r9, r8]
   13738:	cmp	r2, #0
   1373c:	moveq	r3, #0
   13740:	str	r3, [sp, #28]
   13744:	ldr	r3, [sp, #24]
   13748:	add	r8, r8, #1
   1374c:	cmn	r3, #1
   13750:	bne	13228 <__assert_fail@plt+0x22f0>
   13754:	ldr	r3, [sp, #44]	; 0x2c
   13758:	ldrb	r3, [r3, sl]
   1375c:	adds	r7, r3, #0
   13760:	movne	r7, #1
   13764:	cmp	r7, #0
   13768:	bne	13238 <__assert_fail@plt+0x2300>
   1376c:	ldr	r3, [sp, #64]	; 0x40
   13770:	cmp	r8, #0
   13774:	movne	r3, #0
   13778:	andeq	r3, r3, #1
   1377c:	cmp	r3, #0
   13780:	str	r3, [sp, #64]	; 0x40
   13784:	bne	14228 <__assert_fail@plt+0x32f0>
   13788:	ldr	r3, [sp, #40]	; 0x28
   1378c:	ldr	r2, [sp, #52]	; 0x34
   13790:	eor	r3, r3, #1
   13794:	ands	r2, r2, r3
   13798:	beq	14654 <__assert_fail@plt+0x371c>
   1379c:	ldr	r3, [sp, #76]	; 0x4c
   137a0:	cmp	r3, #0
   137a4:	beq	14624 <__assert_fail@plt+0x36ec>
   137a8:	ldr	r3, [sp, #28]
   137ac:	cmp	r3, #0
   137b0:	bne	145e0 <__assert_fail@plt+0x36a8>
   137b4:	ldr	r2, [sp, #84]	; 0x54
   137b8:	clz	r3, fp
   137bc:	cmp	r2, #0
   137c0:	lsr	r3, r3, #5
   137c4:	moveq	r3, #0
   137c8:	cmp	r3, #0
   137cc:	beq	14580 <__assert_fail@plt+0x3648>
   137d0:	mov	fp, r2
   137d4:	str	r3, [sp, #76]	; 0x4c
   137d8:	b	13164 <__assert_fail@plt+0x222c>
   137dc:	ldr	r3, [sp, #176]	; 0xb0
   137e0:	ldr	r6, [sp, #48]	; 0x30
   137e4:	cmp	r3, #2
   137e8:	beq	13d20 <__assert_fail@plt+0x2de8>
   137ec:	ldr	r3, [sp, #88]	; 0x58
   137f0:	cmp	r3, #0
   137f4:	beq	142a4 <__assert_fail@plt+0x336c>
   137f8:	mov	r3, #0
   137fc:	add	sl, sl, #1
   13800:	ldr	r6, [sp, #36]	; 0x24
   13804:	str	r3, [sp, #32]
   13808:	mov	r4, #92	; 0x5c
   1380c:	b	136f8 <__assert_fail@plt+0x27c0>
   13810:	ldr	r3, [sp, #176]	; 0xb0
   13814:	ldr	r6, [sp, #48]	; 0x30
   13818:	cmp	r3, #2
   1381c:	beq	13d50 <__assert_fail@plt+0x2e18>
   13820:	cmp	r3, #5
   13824:	bne	142b4 <__assert_fail@plt+0x337c>
   13828:	ldr	r3, [sp, #100]	; 0x64
   1382c:	cmp	r3, #0
   13830:	beq	14318 <__assert_fail@plt+0x33e0>
   13834:	ldr	r2, [sp, #24]
   13838:	add	r3, sl, #2
   1383c:	cmp	r2, r3
   13840:	bls	13850 <__assert_fail@plt+0x2918>
   13844:	ldrb	r4, [r5, #1]
   13848:	cmp	r4, #63	; 0x3f
   1384c:	beq	144c0 <__assert_fail@plt+0x3588>
   13850:	mov	r1, #0
   13854:	str	r1, [sp, #32]
   13858:	mov	r4, #63	; 0x3f
   1385c:	b	136c4 <__assert_fail@plt+0x278c>
   13860:	ldr	r3, [sp, #176]	; 0xb0
   13864:	ldr	r6, [sp, #48]	; 0x30
   13868:	cmp	r3, #2
   1386c:	beq	13d7c <__assert_fail@plt+0x2e44>
   13870:	str	r7, [sp, #32]
   13874:	str	r7, [sp, #76]	; 0x4c
   13878:	mov	r1, #0
   1387c:	mov	r4, #39	; 0x27
   13880:	b	136c4 <__assert_fail@plt+0x278c>
   13884:	ldr	r6, [sp, #48]	; 0x30
   13888:	ldr	r1, [sp, #52]	; 0x34
   1388c:	str	r7, [sp, #32]
   13890:	b	136c4 <__assert_fail@plt+0x278c>
   13894:	ldr	r6, [sp, #48]	; 0x30
   13898:	ldr	r1, [sp, #52]	; 0x34
   1389c:	mov	r4, #12
   138a0:	mov	r3, #102	; 0x66
   138a4:	ldr	r2, [sp, #56]	; 0x38
   138a8:	cmp	r2, #0
   138ac:	streq	r2, [sp, #32]
   138b0:	beq	136c4 <__assert_fail@plt+0x278c>
   138b4:	mov	r4, r3
   138b8:	mov	r3, #0
   138bc:	str	r3, [sp, #32]
   138c0:	ldr	r3, [sp, #40]	; 0x28
   138c4:	cmp	r3, #0
   138c8:	bne	14038 <__assert_fail@plt+0x3100>
   138cc:	ldr	r3, [sp, #36]	; 0x24
   138d0:	eor	r3, r3, #1
   138d4:	and	r3, r3, r1
   138d8:	ands	r3, r3, #255	; 0xff
   138dc:	beq	13914 <__assert_fail@plt+0x29dc>
   138e0:	cmp	fp, r8
   138e4:	movhi	r2, #39	; 0x27
   138e8:	strbhi	r2, [r9, r8]
   138ec:	add	r2, r8, #1
   138f0:	cmp	fp, r2
   138f4:	movhi	r1, #36	; 0x24
   138f8:	strbhi	r1, [r9, r2]
   138fc:	add	r2, r8, #2
   13900:	cmp	fp, r2
   13904:	add	r8, r8, #3
   13908:	movhi	r1, #39	; 0x27
   1390c:	strbhi	r1, [r9, r2]
   13910:	str	r3, [sp, #36]	; 0x24
   13914:	cmp	fp, r8
   13918:	movhi	r3, #92	; 0x5c
   1391c:	strbhi	r3, [r9, r8]
   13920:	add	sl, sl, #1
   13924:	add	r8, r8, #1
   13928:	b	13728 <__assert_fail@plt+0x27f0>
   1392c:	ldr	r6, [sp, #48]	; 0x30
   13930:	mov	r4, #10
   13934:	mov	r3, #110	; 0x6e
   13938:	ldr	r2, [sp, #64]	; 0x40
   1393c:	cmp	r2, #0
   13940:	bne	143c0 <__assert_fail@plt+0x3488>
   13944:	ldr	r1, [sp, #52]	; 0x34
   13948:	b	138a4 <__assert_fail@plt+0x296c>
   1394c:	ldr	r6, [sp, #48]	; 0x30
   13950:	ldr	r1, [sp, #52]	; 0x34
   13954:	mov	r3, #116	; 0x74
   13958:	b	138a4 <__assert_fail@plt+0x296c>
   1395c:	ldr	r6, [sp, #48]	; 0x30
   13960:	ldr	r1, [sp, #52]	; 0x34
   13964:	mov	r4, #11
   13968:	mov	r3, #118	; 0x76
   1396c:	b	138a4 <__assert_fail@plt+0x296c>
   13970:	ldr	r6, [sp, #48]	; 0x30
   13974:	ldr	r1, [sp, #52]	; 0x34
   13978:	mov	r4, #8
   1397c:	mov	r3, #98	; 0x62
   13980:	b	138a4 <__assert_fail@plt+0x296c>
   13984:	ldr	r6, [sp, #48]	; 0x30
   13988:	ldr	r1, [sp, #52]	; 0x34
   1398c:	mov	r4, #7
   13990:	mov	r3, #97	; 0x61
   13994:	b	138a4 <__assert_fail@plt+0x296c>
   13998:	ldr	r3, [sp, #56]	; 0x38
   1399c:	ldr	r6, [sp, #48]	; 0x30
   139a0:	cmp	r3, #0
   139a4:	beq	13e68 <__assert_fail@plt+0x2f30>
   139a8:	ldr	r3, [sp, #40]	; 0x28
   139ac:	cmp	r3, #0
   139b0:	bne	1449c <__assert_fail@plt+0x3564>
   139b4:	ldr	r3, [sp, #36]	; 0x24
   139b8:	ldr	r2, [sp, #52]	; 0x34
   139bc:	eor	r3, r3, #1
   139c0:	ands	r3, r2, r3
   139c4:	moveq	r2, r8
   139c8:	beq	13a00 <__assert_fail@plt+0x2ac8>
   139cc:	cmp	fp, r8
   139d0:	movhi	r2, #39	; 0x27
   139d4:	strbhi	r2, [r9, r8]
   139d8:	add	r2, r8, #1
   139dc:	cmp	fp, r2
   139e0:	movhi	r1, #36	; 0x24
   139e4:	strbhi	r1, [r9, r2]
   139e8:	add	r2, r8, #2
   139ec:	cmp	fp, r2
   139f0:	movhi	r1, #39	; 0x27
   139f4:	strbhi	r1, [r9, r2]
   139f8:	add	r2, r8, #3
   139fc:	str	r3, [sp, #36]	; 0x24
   13a00:	cmp	fp, r2
   13a04:	movhi	r3, #92	; 0x5c
   13a08:	strbhi	r3, [r9, r2]
   13a0c:	ldr	r3, [sp, #92]	; 0x5c
   13a10:	add	r8, r2, #1
   13a14:	cmp	r3, #0
   13a18:	beq	1439c <__assert_fail@plt+0x3464>
   13a1c:	ldr	r1, [sp, #24]
   13a20:	add	r3, sl, #1
   13a24:	cmp	r1, r3
   13a28:	bls	13a60 <__assert_fail@plt+0x2b28>
   13a2c:	ldr	r1, [sp, #44]	; 0x2c
   13a30:	ldrb	r3, [r1, r3]
   13a34:	sub	r3, r3, #48	; 0x30
   13a38:	cmp	r3, #9
   13a3c:	bhi	13a60 <__assert_fail@plt+0x2b28>
   13a40:	cmp	fp, r8
   13a44:	movhi	r3, #48	; 0x30
   13a48:	strbhi	r3, [r9, r8]
   13a4c:	add	r3, r2, #2
   13a50:	cmp	fp, r3
   13a54:	add	r8, r2, #3
   13a58:	movhi	r1, #48	; 0x30
   13a5c:	strbhi	r1, [r9, r3]
   13a60:	ldr	r3, [sp, #40]	; 0x28
   13a64:	ldr	r1, [sp, #52]	; 0x34
   13a68:	mov	r7, r3
   13a6c:	str	r3, [sp, #32]
   13a70:	mov	r4, #48	; 0x30
   13a74:	b	136c4 <__assert_fail@plt+0x278c>
   13a78:	ldr	r6, [sp, #48]	; 0x30
   13a7c:	cmp	sl, #0
   13a80:	streq	r7, [sp, #32]
   13a84:	beq	13aa4 <__assert_fail@plt+0x2b6c>
   13a88:	mov	r3, #0
   13a8c:	ldr	r1, [sp, #52]	; 0x34
   13a90:	str	r3, [sp, #32]
   13a94:	b	136c4 <__assert_fail@plt+0x278c>
   13a98:	ldr	r6, [sp, #48]	; 0x30
   13a9c:	mov	r3, #0
   13aa0:	str	r3, [sp, #32]
   13aa4:	ldr	r3, [sp, #64]	; 0x40
   13aa8:	cmp	r3, #0
   13aac:	bne	14228 <__assert_fail@plt+0x32f0>
   13ab0:	ldr	r1, [sp, #52]	; 0x34
   13ab4:	b	136c4 <__assert_fail@plt+0x278c>
   13ab8:	ldr	r3, [sp, #48]	; 0x30
   13abc:	mov	r6, r3
   13ac0:	str	r3, [sp, #32]
   13ac4:	b	13aa4 <__assert_fail@plt+0x2b6c>
   13ac8:	ldr	r6, [sp, #48]	; 0x30
   13acc:	mov	r4, #13
   13ad0:	mov	r3, #114	; 0x72
   13ad4:	b	13938 <__assert_fail@plt+0x2a00>
   13ad8:	ldr	r3, [sp, #44]	; 0x2c
   13adc:	add	r5, r3, sl
   13ae0:	ldrb	r4, [r5]
   13ae4:	cmp	r4, #126	; 0x7e
   13ae8:	ldrls	pc, [pc, r4, lsl #2]
   13aec:	b	13e88 <__assert_fail@plt+0x2f50>
   13af0:	andeq	r3, r1, r8, asr lr
   13af4:	andeq	r3, r1, r8, lsl #29
   13af8:	andeq	r3, r1, r8, lsl #29
   13afc:	andeq	r3, r1, r8, lsl #29
   13b00:	andeq	r3, r1, r8, lsl #29
   13b04:	andeq	r3, r1, r8, lsl #29
   13b08:	andeq	r3, r1, r8, lsl #29
   13b0c:	andeq	r3, r1, r0, asr lr
   13b10:	andeq	r3, r1, r8, asr #28
   13b14:	andeq	r3, r1, ip, lsr lr
   13b18:	andeq	r3, r1, r4, lsr lr
   13b1c:	andeq	r3, r1, ip, lsr #28
   13b20:	andeq	r3, r1, r4, lsr #28
   13b24:	andeq	r3, r1, ip, lsl lr
   13b28:	andeq	r3, r1, r8, lsl #29
   13b2c:	andeq	r3, r1, r8, lsl #29
   13b30:	andeq	r3, r1, r8, lsl #29
   13b34:	andeq	r3, r1, r8, lsl #29
   13b38:	andeq	r3, r1, r8, lsl #29
   13b3c:	andeq	r3, r1, r8, lsl #29
   13b40:	andeq	r3, r1, r8, lsl #29
   13b44:	andeq	r3, r1, r8, lsl #29
   13b48:	andeq	r3, r1, r8, lsl #29
   13b4c:	andeq	r3, r1, r8, lsl #29
   13b50:	andeq	r3, r1, r8, lsl #29
   13b54:	andeq	r3, r1, r8, lsl #29
   13b58:	andeq	r3, r1, r8, lsl #29
   13b5c:	andeq	r3, r1, r8, lsl #29
   13b60:	andeq	r3, r1, r8, lsl #29
   13b64:	andeq	r3, r1, r8, lsl #29
   13b68:	andeq	r3, r1, r8, lsl #29
   13b6c:	andeq	r3, r1, r8, lsl #29
   13b70:	andeq	r3, r1, r0, lsl lr
   13b74:	andeq	r3, r1, r8, lsl #28
   13b78:	andeq	r3, r1, r8, lsl #28
   13b7c:	andeq	r3, r1, r0, lsl #28
   13b80:	andeq	r3, r1, r8, lsl #28
   13b84:	strdeq	r3, [r1], -r8
   13b88:	andeq	r3, r1, r8, lsl #28
   13b8c:	andeq	r3, r1, ip, ror #26
   13b90:	andeq	r3, r1, r8, lsl #28
   13b94:	andeq	r3, r1, r8, lsl #28
   13b98:	andeq	r3, r1, r8, lsl #28
   13b9c:	strdeq	r3, [r1], -r8
   13ba0:	strdeq	r3, [r1], -r8
   13ba4:	strdeq	r3, [r1], -r8
   13ba8:	strdeq	r3, [r1], -r8
   13bac:	strdeq	r3, [r1], -r8
   13bb0:	strdeq	r3, [r1], -r8
   13bb4:	strdeq	r3, [r1], -r8
   13bb8:	strdeq	r3, [r1], -r8
   13bbc:	strdeq	r3, [r1], -r8
   13bc0:	strdeq	r3, [r1], -r8
   13bc4:	strdeq	r3, [r1], -r8
   13bc8:	strdeq	r3, [r1], -r8
   13bcc:	strdeq	r3, [r1], -r8
   13bd0:	strdeq	r3, [r1], -r8
   13bd4:	strdeq	r3, [r1], -r8
   13bd8:	strdeq	r3, [r1], -r8
   13bdc:	andeq	r3, r1, r8, lsl #28
   13be0:	andeq	r3, r1, r8, lsl #28
   13be4:	andeq	r3, r1, r8, lsl #28
   13be8:	andeq	r3, r1, r8, lsl #28
   13bec:	andeq	r3, r1, r0, asr #26
   13bf0:	andeq	r3, r1, r8, lsl #29
   13bf4:	strdeq	r3, [r1], -r8
   13bf8:	strdeq	r3, [r1], -r8
   13bfc:	strdeq	r3, [r1], -r8
   13c00:	strdeq	r3, [r1], -r8
   13c04:	strdeq	r3, [r1], -r8
   13c08:	strdeq	r3, [r1], -r8
   13c0c:	strdeq	r3, [r1], -r8
   13c10:	strdeq	r3, [r1], -r8
   13c14:	strdeq	r3, [r1], -r8
   13c18:	strdeq	r3, [r1], -r8
   13c1c:	strdeq	r3, [r1], -r8
   13c20:	strdeq	r3, [r1], -r8
   13c24:	strdeq	r3, [r1], -r8
   13c28:	strdeq	r3, [r1], -r8
   13c2c:	strdeq	r3, [r1], -r8
   13c30:	strdeq	r3, [r1], -r8
   13c34:	strdeq	r3, [r1], -r8
   13c38:	strdeq	r3, [r1], -r8
   13c3c:	strdeq	r3, [r1], -r8
   13c40:	strdeq	r3, [r1], -r8
   13c44:	strdeq	r3, [r1], -r8
   13c48:	strdeq	r3, [r1], -r8
   13c4c:	strdeq	r3, [r1], -r8
   13c50:	strdeq	r3, [r1], -r8
   13c54:	strdeq	r3, [r1], -r8
   13c58:	strdeq	r3, [r1], -r8
   13c5c:	andeq	r3, r1, r8, lsl #28
   13c60:	andeq	r3, r1, r0, lsl sp
   13c64:	strdeq	r3, [r1], -r8
   13c68:	andeq	r3, r1, r8, lsl #28
   13c6c:	strdeq	r3, [r1], -r8
   13c70:	andeq	r3, r1, r8, lsl #28
   13c74:	strdeq	r3, [r1], -r8
   13c78:	strdeq	r3, [r1], -r8
   13c7c:	strdeq	r3, [r1], -r8
   13c80:	strdeq	r3, [r1], -r8
   13c84:	strdeq	r3, [r1], -r8
   13c88:	strdeq	r3, [r1], -r8
   13c8c:	strdeq	r3, [r1], -r8
   13c90:	strdeq	r3, [r1], -r8
   13c94:	strdeq	r3, [r1], -r8
   13c98:	strdeq	r3, [r1], -r8
   13c9c:	strdeq	r3, [r1], -r8
   13ca0:	strdeq	r3, [r1], -r8
   13ca4:	strdeq	r3, [r1], -r8
   13ca8:	strdeq	r3, [r1], -r8
   13cac:	strdeq	r3, [r1], -r8
   13cb0:	strdeq	r3, [r1], -r8
   13cb4:	strdeq	r3, [r1], -r8
   13cb8:	strdeq	r3, [r1], -r8
   13cbc:	strdeq	r3, [r1], -r8
   13cc0:	strdeq	r3, [r1], -r8
   13cc4:	strdeq	r3, [r1], -r8
   13cc8:	strdeq	r3, [r1], -r8
   13ccc:	strdeq	r3, [r1], -r8
   13cd0:	strdeq	r3, [r1], -r8
   13cd4:	strdeq	r3, [r1], -r8
   13cd8:	strdeq	r3, [r1], -r8
   13cdc:	andeq	r3, r1, ip, ror #25
   13ce0:	andeq	r3, r1, r8, lsl #28
   13ce4:	andeq	r3, r1, ip, ror #25
   13ce8:	andeq	r3, r1, r0, lsl #28
   13cec:	ldr	r3, [sp, #24]
   13cf0:	mov	r6, #0
   13cf4:	cmn	r3, #1
   13cf8:	bne	136a4 <__assert_fail@plt+0x276c>
   13cfc:	ldr	r3, [sp, #44]	; 0x2c
   13d00:	ldrb	r3, [r3, #1]
   13d04:	adds	r3, r3, #0
   13d08:	movne	r3, #1
   13d0c:	b	136ac <__assert_fail@plt+0x2774>
   13d10:	ldr	r3, [sp, #176]	; 0xb0
   13d14:	mov	r6, #0
   13d18:	cmp	r3, #2
   13d1c:	bne	137ec <__assert_fail@plt+0x28b4>
   13d20:	ldr	r3, [sp, #64]	; 0x40
   13d24:	cmp	r3, #0
   13d28:	bne	14560 <__assert_fail@plt+0x3628>
   13d2c:	add	sl, sl, #1
   13d30:	ldr	r6, [sp, #36]	; 0x24
   13d34:	str	r3, [sp, #32]
   13d38:	mov	r4, #92	; 0x5c
   13d3c:	b	136f8 <__assert_fail@plt+0x27c0>
   13d40:	ldr	r3, [sp, #176]	; 0xb0
   13d44:	mov	r6, #0
   13d48:	cmp	r3, #2
   13d4c:	bne	13820 <__assert_fail@plt+0x28e8>
   13d50:	ldr	r3, [sp, #40]	; 0x28
   13d54:	cmp	r3, #0
   13d58:	bne	1403c <__assert_fail@plt+0x3104>
   13d5c:	mov	r1, r7
   13d60:	str	r3, [sp, #32]
   13d64:	mov	r4, #63	; 0x3f
   13d68:	b	136c4 <__assert_fail@plt+0x278c>
   13d6c:	ldr	r3, [sp, #176]	; 0xb0
   13d70:	mov	r6, #0
   13d74:	cmp	r3, #2
   13d78:	bne	13870 <__assert_fail@plt+0x2938>
   13d7c:	ldr	r3, [sp, #64]	; 0x40
   13d80:	cmp	r3, #0
   13d84:	bne	14560 <__assert_fail@plt+0x3628>
   13d88:	ldr	r2, [sp, #84]	; 0x54
   13d8c:	adds	r3, fp, #0
   13d90:	movne	r3, #1
   13d94:	cmp	r2, #0
   13d98:	movne	r3, #0
   13d9c:	cmp	r3, #0
   13da0:	strne	fp, [sp, #84]	; 0x54
   13da4:	movne	fp, #0
   13da8:	bne	13dd8 <__assert_fail@plt+0x2ea0>
   13dac:	cmp	fp, r8
   13db0:	movhi	r3, #39	; 0x27
   13db4:	strbhi	r3, [r9, r8]
   13db8:	add	r3, r8, #1
   13dbc:	cmp	fp, r3
   13dc0:	movhi	r2, #92	; 0x5c
   13dc4:	strbhi	r2, [r9, r3]
   13dc8:	add	r3, r8, #2
   13dcc:	cmp	fp, r3
   13dd0:	movhi	r2, #39	; 0x27
   13dd4:	strbhi	r2, [r9, r3]
   13dd8:	ldr	r3, [sp, #64]	; 0x40
   13ddc:	add	r8, r8, #3
   13de0:	mov	r1, r7
   13de4:	str	r7, [sp, #32]
   13de8:	str	r7, [sp, #76]	; 0x4c
   13dec:	str	r3, [sp, #36]	; 0x24
   13df0:	mov	r4, #39	; 0x27
   13df4:	b	136c4 <__assert_fail@plt+0x278c>
   13df8:	mov	r6, #0
   13dfc:	b	13888 <__assert_fail@plt+0x2950>
   13e00:	mov	r6, #0
   13e04:	b	13a7c <__assert_fail@plt+0x2b44>
   13e08:	mov	r6, #0
   13e0c:	b	13a9c <__assert_fail@plt+0x2b64>
   13e10:	str	r7, [sp, #32]
   13e14:	mov	r6, #0
   13e18:	b	13aa4 <__assert_fail@plt+0x2b6c>
   13e1c:	mov	r6, #0
   13e20:	b	13acc <__assert_fail@plt+0x2b94>
   13e24:	mov	r6, #0
   13e28:	b	13898 <__assert_fail@plt+0x2960>
   13e2c:	mov	r6, #0
   13e30:	b	13960 <__assert_fail@plt+0x2a28>
   13e34:	mov	r6, #0
   13e38:	b	13930 <__assert_fail@plt+0x29f8>
   13e3c:	mov	r6, #0
   13e40:	mov	r3, #116	; 0x74
   13e44:	b	13938 <__assert_fail@plt+0x2a00>
   13e48:	mov	r6, #0
   13e4c:	b	13974 <__assert_fail@plt+0x2a3c>
   13e50:	mov	r6, #0
   13e54:	b	13988 <__assert_fail@plt+0x2a50>
   13e58:	ldr	r3, [sp, #56]	; 0x38
   13e5c:	mov	r6, #0
   13e60:	cmp	r3, #0
   13e64:	bne	139a8 <__assert_fail@plt+0x2a70>
   13e68:	ldr	r3, [sp, #96]	; 0x60
   13e6c:	cmp	r3, #0
   13e70:	addne	sl, sl, #1
   13e74:	bne	1321c <__assert_fail@plt+0x22e4>
   13e78:	ldr	r1, [sp, #52]	; 0x34
   13e7c:	str	r3, [sp, #32]
   13e80:	mov	r4, r3
   13e84:	b	136c4 <__assert_fail@plt+0x278c>
   13e88:	mov	r6, #0
   13e8c:	ldr	r3, [sp, #80]	; 0x50
   13e90:	cmp	r3, #1
   13e94:	bne	14084 <__assert_fail@plt+0x314c>
   13e98:	bl	10e30 <__ctype_b_loc@plt>
   13e9c:	ldr	r2, [sp, #80]	; 0x50
   13ea0:	sxth	r3, r4
   13ea4:	mov	r1, r2
   13ea8:	lsl	r3, r3, #1
   13eac:	ldr	r2, [r0]
   13eb0:	ldrh	r3, [r2, r3]
   13eb4:	and	r3, r3, #16384	; 0x4000
   13eb8:	cmp	r3, #0
   13ebc:	movne	r3, #1
   13ec0:	moveq	r3, #0
   13ec4:	str	r3, [sp, #32]
   13ec8:	moveq	r3, #1
   13ecc:	movne	r3, #0
   13ed0:	ldr	r2, [sp, #56]	; 0x38
   13ed4:	and	r3, r3, r2
   13ed8:	ands	r3, r3, #255	; 0xff
   13edc:	beq	13ab0 <__assert_fail@plt+0x2b78>
   13ee0:	add	r1, sl, r1
   13ee4:	mov	r0, #0
   13ee8:	ldr	r7, [sp, #40]	; 0x28
   13eec:	ldr	r2, [sp, #36]	; 0x24
   13ef0:	ldr	lr, [sp, #52]	; 0x34
   13ef4:	b	13fa4 <__assert_fail@plt+0x306c>
   13ef8:	cmp	r7, #0
   13efc:	bne	142f8 <__assert_fail@plt+0x33c0>
   13f00:	eor	r0, r2, #1
   13f04:	ands	r0, lr, r0
   13f08:	beq	13f40 <__assert_fail@plt+0x3008>
   13f0c:	cmp	fp, r8
   13f10:	movhi	r2, #39	; 0x27
   13f14:	strbhi	r2, [r9, r8]
   13f18:	add	r2, r8, #1
   13f1c:	cmp	fp, r2
   13f20:	movhi	ip, #36	; 0x24
   13f24:	strbhi	ip, [r9, r2]
   13f28:	add	r2, r8, #2
   13f2c:	cmp	fp, r2
   13f30:	movhi	ip, #39	; 0x27
   13f34:	strbhi	ip, [r9, r2]
   13f38:	add	r8, r8, #3
   13f3c:	mov	r2, r0
   13f40:	cmp	fp, r8
   13f44:	movhi	r0, #92	; 0x5c
   13f48:	strbhi	r0, [r9, r8]
   13f4c:	add	r0, r8, #1
   13f50:	cmp	fp, r0
   13f54:	lsrhi	ip, r4, #6
   13f58:	addhi	ip, ip, #48	; 0x30
   13f5c:	strbhi	ip, [r9, r0]
   13f60:	add	ip, r8, #2
   13f64:	cmp	fp, ip
   13f68:	lsrhi	r0, r4, #3
   13f6c:	andhi	r0, r0, #7
   13f70:	addhi	r0, r0, #48	; 0x30
   13f74:	add	sl, sl, #1
   13f78:	strbhi	r0, [r9, ip]
   13f7c:	and	r4, r4, #7
   13f80:	cmp	sl, r1
   13f84:	add	r4, r4, #48	; 0x30
   13f88:	add	r8, r8, #3
   13f8c:	bcs	14310 <__assert_fail@plt+0x33d8>
   13f90:	mov	r0, r3
   13f94:	cmp	fp, r8
   13f98:	strbhi	r4, [r9, r8]
   13f9c:	ldrb	r4, [r5, #1]!
   13fa0:	add	r8, r8, #1
   13fa4:	cmp	r3, #0
   13fa8:	bne	13ef8 <__assert_fail@plt+0x2fc0>
   13fac:	cmp	r6, #0
   13fb0:	bne	14054 <__assert_fail@plt+0x311c>
   13fb4:	eor	r6, r0, #1
   13fb8:	and	r6, r6, r2
   13fbc:	add	sl, sl, #1
   13fc0:	cmp	r1, sl
   13fc4:	uxtb	r6, r6
   13fc8:	bls	1407c <__assert_fail@plt+0x3144>
   13fcc:	cmp	r6, #0
   13fd0:	beq	13f94 <__assert_fail@plt+0x305c>
   13fd4:	cmp	fp, r8
   13fd8:	movhi	r2, #39	; 0x27
   13fdc:	strbhi	r2, [r9, r8]
   13fe0:	add	r2, r8, #1
   13fe4:	cmp	fp, r2
   13fe8:	movhi	ip, #39	; 0x27
   13fec:	strbhi	ip, [r9, r2]
   13ff0:	add	r8, r8, #2
   13ff4:	mov	r6, r3
   13ff8:	mov	r2, r3
   13ffc:	b	13f94 <__assert_fail@plt+0x305c>
   14000:	ldr	r3, [sp, #184]	; 0xb8
   14004:	cmp	r3, #0
   14008:	beq	136e0 <__assert_fail@plt+0x27a8>
   1400c:	lsr	r2, r4, #5
   14010:	mov	r0, r3
   14014:	uxtb	r2, r2
   14018:	and	r3, r4, #31
   1401c:	ldr	r2, [r0, r2, lsl #2]
   14020:	lsr	r3, r2, r3
   14024:	tst	r3, #1
   14028:	beq	136e0 <__assert_fail@plt+0x27a8>
   1402c:	ldr	r3, [sp, #40]	; 0x28
   14030:	cmp	r3, #0
   14034:	beq	138cc <__assert_fail@plt+0x2994>
   14038:	mov	r3, r1
   1403c:	str	r3, [sp, #64]	; 0x40
   14040:	mov	sl, r9
   14044:	ldr	r3, [sp, #56]	; 0x38
   14048:	mov	r9, fp
   1404c:	ldr	r2, [sp, #64]	; 0x40
   14050:	b	14240 <__assert_fail@plt+0x3308>
   14054:	cmp	fp, r8
   14058:	eor	r6, r0, #1
   1405c:	movhi	ip, #92	; 0x5c
   14060:	and	r6, r6, r2
   14064:	add	sl, sl, #1
   14068:	strbhi	ip, [r9, r8]
   1406c:	cmp	r1, sl
   14070:	add	r8, r8, #1
   14074:	uxtb	r6, r6
   14078:	bhi	13fcc <__assert_fail@plt+0x3094>
   1407c:	str	r2, [sp, #36]	; 0x24
   14080:	b	136f8 <__assert_fail@plt+0x27c0>
   14084:	ldr	r3, [sp, #24]
   14088:	cmn	r3, #1
   1408c:	mov	r3, #0
   14090:	str	r3, [sp, #128]	; 0x80
   14094:	str	r3, [sp, #132]	; 0x84
   14098:	beq	1438c <__assert_fail@plt+0x3454>
   1409c:	mov	r2, r7
   140a0:	mov	r3, #0
   140a4:	str	r7, [sp, #104]	; 0x68
   140a8:	str	r5, [sp, #116]	; 0x74
   140ac:	mov	r7, r3
   140b0:	mov	r5, r2
   140b4:	str	r4, [sp, #32]
   140b8:	str	r6, [sp, #108]	; 0x6c
   140bc:	str	r8, [sp, #112]	; 0x70
   140c0:	ldr	r3, [sp, #44]	; 0x2c
   140c4:	add	r6, sl, r7
   140c8:	add	r4, r3, r6
   140cc:	ldr	r3, [sp, #24]
   140d0:	mov	r1, r4
   140d4:	sub	r2, r3, r6
   140d8:	add	r0, sp, #124	; 0x7c
   140dc:	add	r3, sp, #128	; 0x80
   140e0:	bl	1924c <__assert_fail@plt+0x8314>
   140e4:	subs	r8, r0, #0
   140e8:	beq	14470 <__assert_fail@plt+0x3538>
   140ec:	cmn	r8, #1
   140f0:	beq	14448 <__assert_fail@plt+0x3510>
   140f4:	cmn	r8, #2
   140f8:	beq	143e0 <__assert_fail@plt+0x34a8>
   140fc:	ldr	r3, [sp, #64]	; 0x40
   14100:	cmp	r3, #0
   14104:	beq	141c4 <__assert_fail@plt+0x328c>
   14108:	cmp	r8, #1
   1410c:	beq	141c4 <__assert_fail@plt+0x328c>
   14110:	sub	r3, r8, #1
   14114:	add	r6, r3, r6
   14118:	ldr	r3, [sp, #44]	; 0x2c
   1411c:	add	r6, r3, r6
   14120:	ldrb	r3, [r4, #1]!
   14124:	sub	r3, r3, #91	; 0x5b
   14128:	cmp	r3, #33	; 0x21
   1412c:	ldrls	pc, [pc, r3, lsl #2]
   14130:	b	141bc <__assert_fail@plt+0x3284>
   14134:	andeq	r4, r1, r8, lsr #4
   14138:	andeq	r4, r1, r8, lsr #4
   1413c:			; <UNDEFINED> instruction: 0x000141bc
   14140:	andeq	r4, r1, r8, lsr #4
   14144:			; <UNDEFINED> instruction: 0x000141bc
   14148:	andeq	r4, r1, r8, lsr #4
   1414c:			; <UNDEFINED> instruction: 0x000141bc
   14150:			; <UNDEFINED> instruction: 0x000141bc
   14154:			; <UNDEFINED> instruction: 0x000141bc
   14158:			; <UNDEFINED> instruction: 0x000141bc
   1415c:			; <UNDEFINED> instruction: 0x000141bc
   14160:			; <UNDEFINED> instruction: 0x000141bc
   14164:			; <UNDEFINED> instruction: 0x000141bc
   14168:			; <UNDEFINED> instruction: 0x000141bc
   1416c:			; <UNDEFINED> instruction: 0x000141bc
   14170:			; <UNDEFINED> instruction: 0x000141bc
   14174:			; <UNDEFINED> instruction: 0x000141bc
   14178:			; <UNDEFINED> instruction: 0x000141bc
   1417c:			; <UNDEFINED> instruction: 0x000141bc
   14180:			; <UNDEFINED> instruction: 0x000141bc
   14184:			; <UNDEFINED> instruction: 0x000141bc
   14188:			; <UNDEFINED> instruction: 0x000141bc
   1418c:			; <UNDEFINED> instruction: 0x000141bc
   14190:			; <UNDEFINED> instruction: 0x000141bc
   14194:			; <UNDEFINED> instruction: 0x000141bc
   14198:			; <UNDEFINED> instruction: 0x000141bc
   1419c:			; <UNDEFINED> instruction: 0x000141bc
   141a0:			; <UNDEFINED> instruction: 0x000141bc
   141a4:			; <UNDEFINED> instruction: 0x000141bc
   141a8:			; <UNDEFINED> instruction: 0x000141bc
   141ac:			; <UNDEFINED> instruction: 0x000141bc
   141b0:			; <UNDEFINED> instruction: 0x000141bc
   141b4:			; <UNDEFINED> instruction: 0x000141bc
   141b8:	andeq	r4, r1, r8, lsr #4
   141bc:	cmp	r6, r4
   141c0:	bne	14120 <__assert_fail@plt+0x31e8>
   141c4:	ldr	r0, [sp, #124]	; 0x7c
   141c8:	bl	10da0 <iswprint@plt>
   141cc:	add	r7, r7, r8
   141d0:	cmp	r0, #0
   141d4:	add	r0, sp, #128	; 0x80
   141d8:	moveq	r5, #0
   141dc:	bl	10d4c <mbsinit@plt>
   141e0:	cmp	r0, #0
   141e4:	beq	140c0 <__assert_fail@plt+0x3188>
   141e8:	ldr	r4, [sp, #32]
   141ec:	str	r5, [sp, #32]
   141f0:	ldr	r3, [sp, #32]
   141f4:	mov	r1, r7
   141f8:	eor	r3, r3, #1
   141fc:	ldr	r7, [sp, #104]	; 0x68
   14200:	ldr	r6, [sp, #108]	; 0x6c
   14204:	ldr	r8, [sp, #112]	; 0x70
   14208:	ldr	r5, [sp, #116]	; 0x74
   1420c:	uxtb	r3, r3
   14210:	cmp	r1, #1
   14214:	bls	13ed0 <__assert_fail@plt+0x2f98>
   14218:	ldr	r2, [sp, #56]	; 0x38
   1421c:	and	r3, r3, r2
   14220:	uxtb	r3, r3
   14224:	b	13ee0 <__assert_fail@plt+0x2fa8>
   14228:	mov	r3, #2
   1422c:	str	r3, [sp, #176]	; 0xb0
   14230:	ldr	r2, [sp, #64]	; 0x40
   14234:	ldr	r3, [sp, #56]	; 0x38
   14238:	mov	sl, r9
   1423c:	mov	r9, fp
   14240:	and	r3, r3, r2
   14244:	tst	r3, #255	; 0xff
   14248:	ldr	r3, [sp, #176]	; 0xb0
   1424c:	movne	r3, #4
   14250:	str	r3, [sp, #176]	; 0xb0
   14254:	ldr	r3, [sp, #180]	; 0xb4
   14258:	mov	ip, #0
   1425c:	bic	r3, r3, #2
   14260:	str	r3, [sp, #4]
   14264:	ldr	r3, [sp, #192]	; 0xc0
   14268:	ldr	r2, [sp, #44]	; 0x2c
   1426c:	str	r3, [sp, #16]
   14270:	ldr	r3, [sp, #188]	; 0xbc
   14274:	mov	r1, r9
   14278:	str	r3, [sp, #12]
   1427c:	ldr	r3, [sp, #176]	; 0xb0
   14280:	mov	r0, sl
   14284:	str	r3, [sp]
   14288:	str	ip, [sp, #8]
   1428c:	ldr	r3, [sp, #24]
   14290:	bl	130f0 <__assert_fail@plt+0x21b8>
   14294:	mov	fp, r0
   14298:	mov	r0, fp
   1429c:	add	sp, sp, #140	; 0x8c
   142a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   142a4:	mov	r4, #92	; 0x5c
   142a8:	mov	r1, #0
   142ac:	mov	r3, r4
   142b0:	b	138a4 <__assert_fail@plt+0x296c>
   142b4:	mov	r3, #0
   142b8:	ldr	r1, [sp, #52]	; 0x34
   142bc:	str	r3, [sp, #32]
   142c0:	mov	r4, #63	; 0x3f
   142c4:	b	136c4 <__assert_fail@plt+0x278c>
   142c8:	cmp	fp, #0
   142cc:	beq	14328 <__assert_fail@plt+0x33f0>
   142d0:	mov	r3, #39	; 0x27
   142d4:	strb	r3, [r9]
   142d8:	mov	r3, #0
   142dc:	str	r3, [sp, #40]	; 0x28
   142e0:	mov	r3, #1
   142e4:	str	r3, [sp, #68]	; 0x44
   142e8:	ldr	r3, [pc, #448]	; 144b0 <__assert_fail@plt+0x3578>
   142ec:	mov	r8, #1
   142f0:	str	r3, [sp, #72]	; 0x48
   142f4:	b	134d8 <__assert_fail@plt+0x25a0>
   142f8:	ldr	r3, [sp, #40]	; 0x28
   142fc:	mov	sl, r9
   14300:	str	r3, [sp, #56]	; 0x38
   14304:	mov	r9, fp
   14308:	ldr	r2, [sp, #64]	; 0x40
   1430c:	b	14240 <__assert_fail@plt+0x3308>
   14310:	str	r2, [sp, #36]	; 0x24
   14314:	b	13728 <__assert_fail@plt+0x27f0>
   14318:	mov	r1, #0
   1431c:	str	r3, [sp, #32]
   14320:	mov	r4, #63	; 0x3f
   14324:	b	136c4 <__assert_fail@plt+0x278c>
   14328:	ldr	r3, [pc, #384]	; 144b0 <__assert_fail@plt+0x3578>
   1432c:	str	r3, [sp, #72]	; 0x48
   14330:	mov	r3, #0
   14334:	str	r3, [sp, #40]	; 0x28
   14338:	mov	r3, #1
   1433c:	str	r3, [sp, #68]	; 0x44
   14340:	mov	r8, r3
   14344:	b	134d8 <__assert_fail@plt+0x25a0>
   14348:	bl	10f2c <abort@plt>
   1434c:	cmp	fp, #0
   14350:	beq	143b0 <__assert_fail@plt+0x3478>
   14354:	mov	r2, #1
   14358:	mov	r3, #34	; 0x22
   1435c:	strb	r3, [r9]
   14360:	mov	r8, r2
   14364:	mov	r3, r2
   14368:	str	r2, [sp, #68]	; 0x44
   1436c:	str	r3, [sp, #56]	; 0x38
   14370:	ldr	r3, [pc, #316]	; 144b4 <__assert_fail@plt+0x357c>
   14374:	ldr	r1, [sp, #56]	; 0x38
   14378:	str	r3, [sp, #72]	; 0x48
   1437c:	ldr	r2, [sp, #176]	; 0xb0
   14380:	ldr	ip, [sp, #40]	; 0x28
   14384:	ldr	lr, [sp, #176]	; 0xb0
   14388:	b	131bc <__assert_fail@plt+0x2284>
   1438c:	ldr	r0, [sp, #44]	; 0x2c
   14390:	bl	10e48 <strlen@plt>
   14394:	str	r0, [sp, #24]
   14398:	b	1409c <__assert_fail@plt+0x3164>
   1439c:	mov	r7, #0
   143a0:	ldr	r1, [sp, #52]	; 0x34
   143a4:	str	r3, [sp, #32]
   143a8:	mov	r4, #48	; 0x30
   143ac:	b	136c4 <__assert_fail@plt+0x278c>
   143b0:	mov	r3, #1
   143b4:	str	r3, [sp, #68]	; 0x44
   143b8:	mov	r8, r3
   143bc:	b	1436c <__assert_fail@plt+0x3434>
   143c0:	mov	r3, #2
   143c4:	mov	sl, r9
   143c8:	str	r3, [sp, #176]	; 0xb0
   143cc:	mov	r9, fp
   143d0:	ldr	r3, [sp, #56]	; 0x38
   143d4:	b	14240 <__assert_fail@plt+0x3308>
   143d8:	ldr	r6, [sp, #48]	; 0x30
   143dc:	b	13e8c <__assert_fail@plt+0x2f54>
   143e0:	ldr	r0, [sp, #24]
   143e4:	mov	ip, r6
   143e8:	cmp	r0, ip
   143ec:	mov	r1, r7
   143f0:	mov	r2, r4
   143f4:	ldr	r7, [sp, #104]	; 0x68
   143f8:	ldr	r4, [sp, #32]
   143fc:	ldr	r6, [sp, #108]	; 0x6c
   14400:	ldr	r8, [sp, #112]	; 0x70
   14404:	ldr	r5, [sp, #116]	; 0x74
   14408:	bls	14438 <__assert_fail@plt+0x3500>
   1440c:	ldrb	r3, [r2]
   14410:	cmp	r3, #0
   14414:	bne	14428 <__assert_fail@plt+0x34f0>
   14418:	b	14548 <__assert_fail@plt+0x3610>
   1441c:	ldrb	r3, [r2, #1]!
   14420:	cmp	r3, #0
   14424:	beq	14548 <__assert_fail@plt+0x3610>
   14428:	add	r1, r1, #1
   1442c:	add	r3, sl, r1
   14430:	cmp	r0, r3
   14434:	bhi	1441c <__assert_fail@plt+0x34e4>
   14438:	mov	r2, #0
   1443c:	mov	r3, r7
   14440:	str	r2, [sp, #32]
   14444:	b	14210 <__assert_fail@plt+0x32d8>
   14448:	mov	r1, r7
   1444c:	ldr	r7, [sp, #104]	; 0x68
   14450:	mov	r2, #0
   14454:	ldr	r4, [sp, #32]
   14458:	ldr	r6, [sp, #108]	; 0x6c
   1445c:	ldr	r8, [sp, #112]	; 0x70
   14460:	ldr	r5, [sp, #116]	; 0x74
   14464:	mov	r3, r7
   14468:	str	r2, [sp, #32]
   1446c:	b	14210 <__assert_fail@plt+0x32d8>
   14470:	mov	r3, r5
   14474:	eor	r3, r3, #1
   14478:	ldr	r4, [sp, #32]
   1447c:	mov	r1, r7
   14480:	str	r5, [sp, #32]
   14484:	ldr	r7, [sp, #104]	; 0x68
   14488:	ldr	r6, [sp, #108]	; 0x6c
   1448c:	ldr	r8, [sp, #112]	; 0x70
   14490:	ldr	r5, [sp, #116]	; 0x74
   14494:	uxtb	r3, r3
   14498:	b	14210 <__assert_fail@plt+0x32d8>
   1449c:	mov	sl, r9
   144a0:	str	r3, [sp, #56]	; 0x38
   144a4:	mov	r9, fp
   144a8:	ldr	r2, [sp, #64]	; 0x40
   144ac:	b	14240 <__assert_fail@plt+0x3308>
   144b0:	andeq	sl, r1, ip, asr r1
   144b4:			; <UNDEFINED> instruction: 0x000199b0
   144b8:	andeq	sl, r1, r0, ror #2
   144bc:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   144c0:	ldr	r2, [sp, #44]	; 0x2c
   144c4:	ldrb	r1, [r2, r3]
   144c8:	sub	r2, r1, #33	; 0x21
   144cc:	uxtb	r2, r2
   144d0:	cmp	r2, #29
   144d4:	bhi	14554 <__assert_fail@plt+0x361c>
   144d8:	ldr	r0, [pc, #-36]	; 144bc <__assert_fail@plt+0x3584>
   144dc:	mov	ip, #1
   144e0:	ands	r2, r0, ip, lsl r2
   144e4:	beq	14574 <__assert_fail@plt+0x363c>
   144e8:	ldr	r2, [sp, #40]	; 0x28
   144ec:	cmp	r2, #0
   144f0:	bne	14668 <__assert_fail@plt+0x3730>
   144f4:	add	r2, r8, #1
   144f8:	cmp	fp, r8
   144fc:	strbhi	r4, [r9, r8]
   14500:	cmp	fp, r2
   14504:	movhi	r0, #34	; 0x22
   14508:	strbhi	r0, [r9, r2]
   1450c:	add	r2, r8, #2
   14510:	cmp	fp, r2
   14514:	movhi	r0, #34	; 0x22
   14518:	strbhi	r0, [r9, r2]
   1451c:	add	r2, r8, #3
   14520:	cmp	fp, r2
   14524:	mov	sl, r3
   14528:	ldr	r3, [sp, #40]	; 0x28
   1452c:	movhi	r0, #63	; 0x3f
   14530:	mov	r4, r1
   14534:	strbhi	r0, [r9, r2]
   14538:	add	r8, r8, #4
   1453c:	mov	r1, r3
   14540:	str	r3, [sp, #32]
   14544:	b	136c4 <__assert_fail@plt+0x278c>
   14548:	str	r3, [sp, #32]
   1454c:	mov	r3, r7
   14550:	b	14210 <__assert_fail@plt+0x32d8>
   14554:	mov	r1, #0
   14558:	str	r1, [sp, #32]
   1455c:	b	136c4 <__assert_fail@plt+0x278c>
   14560:	mov	sl, r9
   14564:	ldr	r3, [sp, #56]	; 0x38
   14568:	mov	r9, fp
   1456c:	ldr	r2, [sp, #64]	; 0x40
   14570:	b	14240 <__assert_fail@plt+0x3308>
   14574:	str	r2, [sp, #32]
   14578:	mov	r1, #0
   1457c:	b	136c4 <__assert_fail@plt+0x278c>
   14580:	ldr	r2, [sp, #76]	; 0x4c
   14584:	mov	sl, r9
   14588:	mov	r9, fp
   1458c:	mov	fp, r8
   14590:	ldr	r1, [sp, #72]	; 0x48
   14594:	cmp	r1, #0
   14598:	moveq	r3, #0
   1459c:	andne	r3, r2, #1
   145a0:	cmp	r3, #0
   145a4:	beq	145d0 <__assert_fail@plt+0x3698>
   145a8:	ldrb	r3, [r1]
   145ac:	cmp	r3, #0
   145b0:	beq	145d0 <__assert_fail@plt+0x3698>
   145b4:	mov	r2, r1
   145b8:	cmp	r9, fp
   145bc:	strbhi	r3, [sl, fp]
   145c0:	ldrb	r3, [r2, #1]!
   145c4:	add	fp, fp, #1
   145c8:	cmp	r3, #0
   145cc:	bne	145b8 <__assert_fail@plt+0x3680>
   145d0:	cmp	r9, fp
   145d4:	movhi	r3, #0
   145d8:	strbhi	r3, [sl, fp]
   145dc:	b	14298 <__assert_fail@plt+0x3360>
   145e0:	ldr	r3, [sp, #192]	; 0xc0
   145e4:	mov	ip, #5
   145e8:	str	r3, [sp, #16]
   145ec:	ldr	r3, [sp, #188]	; 0xbc
   145f0:	ldr	r2, [sp, #44]	; 0x2c
   145f4:	str	r3, [sp, #12]
   145f8:	ldr	r3, [sp, #184]	; 0xb8
   145fc:	ldr	r1, [sp, #84]	; 0x54
   14600:	str	r3, [sp, #8]
   14604:	ldr	r3, [sp, #180]	; 0xb4
   14608:	mov	r0, r9
   1460c:	str	r3, [sp, #4]
   14610:	str	ip, [sp]
   14614:	ldr	r3, [sp, #24]
   14618:	bl	130f0 <__assert_fail@plt+0x21b8>
   1461c:	mov	fp, r0
   14620:	b	14298 <__assert_fail@plt+0x3360>
   14624:	mov	sl, r9
   14628:	mov	r9, fp
   1462c:	mov	fp, r8
   14630:	b	14590 <__assert_fail@plt+0x3658>
   14634:	ldr	r1, [sp, #176]	; 0xb0
   14638:	bl	12fd0 <__assert_fail@plt+0x2098>
   1463c:	str	r0, [sp, #192]	; 0xc0
   14640:	b	135ac <__assert_fail@plt+0x2674>
   14644:	ldr	r1, [sp, #176]	; 0xb0
   14648:	bl	12fd0 <__assert_fail@plt+0x2098>
   1464c:	str	r0, [sp, #188]	; 0xbc
   14650:	b	1358c <__assert_fail@plt+0x2654>
   14654:	mov	sl, r9
   14658:	mov	r2, r3
   1465c:	mov	r9, fp
   14660:	mov	fp, r8
   14664:	b	14590 <__assert_fail@plt+0x3658>
   14668:	mov	sl, r9
   1466c:	mov	r9, fp
   14670:	b	14254 <__assert_fail@plt+0x331c>
   14674:	push	{r4, r5, r6, lr}
   14678:	mov	r5, r0
   1467c:	bl	10e60 <__errno_location@plt>
   14680:	cmp	r5, #0
   14684:	mov	r1, #48	; 0x30
   14688:	mov	r4, r0
   1468c:	ldr	r0, [pc, #16]	; 146a4 <__assert_fail@plt+0x376c>
   14690:	ldr	r6, [r4]
   14694:	movne	r0, r5
   14698:	bl	17f10 <__assert_fail@plt+0x6fd8>
   1469c:	str	r6, [r4]
   146a0:	pop	{r4, r5, r6, pc}
   146a4:	muleq	r3, ip, r2
   146a8:	ldr	r3, [pc, #12]	; 146bc <__assert_fail@plt+0x3784>
   146ac:	cmp	r0, #0
   146b0:	moveq	r0, r3
   146b4:	ldr	r0, [r0]
   146b8:	bx	lr
   146bc:	muleq	r3, ip, r2
   146c0:	ldr	r3, [pc, #12]	; 146d4 <__assert_fail@plt+0x379c>
   146c4:	cmp	r0, #0
   146c8:	moveq	r0, r3
   146cc:	str	r1, [r0]
   146d0:	bx	lr
   146d4:	muleq	r3, ip, r2
   146d8:	ldr	r3, [pc, #52]	; 14714 <__assert_fail@plt+0x37dc>
   146dc:	cmp	r0, #0
   146e0:	moveq	r0, r3
   146e4:	add	r3, r0, #8
   146e8:	push	{lr}		; (str lr, [sp, #-4]!)
   146ec:	lsr	lr, r1, #5
   146f0:	and	r1, r1, #31
   146f4:	ldr	ip, [r3, lr, lsl #2]
   146f8:	lsr	r0, ip, r1
   146fc:	eor	r2, r2, r0
   14700:	and	r2, r2, #1
   14704:	and	r0, r0, #1
   14708:	eor	r1, ip, r2, lsl r1
   1470c:	str	r1, [r3, lr, lsl #2]
   14710:	pop	{pc}		; (ldr pc, [sp], #4)
   14714:	muleq	r3, ip, r2
   14718:	ldr	r3, [pc, #16]	; 14730 <__assert_fail@plt+0x37f8>
   1471c:	cmp	r0, #0
   14720:	movne	r3, r0
   14724:	ldr	r0, [r3, #4]
   14728:	str	r1, [r3, #4]
   1472c:	bx	lr
   14730:	muleq	r3, ip, r2
   14734:	ldr	r3, [pc, #44]	; 14768 <__assert_fail@plt+0x3830>
   14738:	cmp	r0, #0
   1473c:	moveq	r0, r3
   14740:	mov	ip, #10
   14744:	cmp	r2, #0
   14748:	cmpne	r1, #0
   1474c:	str	ip, [r0]
   14750:	beq	14760 <__assert_fail@plt+0x3828>
   14754:	str	r1, [r0, #40]	; 0x28
   14758:	str	r2, [r0, #44]	; 0x2c
   1475c:	bx	lr
   14760:	push	{r4, lr}
   14764:	bl	10f2c <abort@plt>
   14768:	muleq	r3, ip, r2
   1476c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14770:	sub	sp, sp, #24
   14774:	ldr	ip, [pc, #108]	; 147e8 <__assert_fail@plt+0x38b0>
   14778:	ldr	r4, [sp, #56]	; 0x38
   1477c:	mov	r9, r2
   14780:	cmp	r4, #0
   14784:	moveq	r4, ip
   14788:	mov	sl, r3
   1478c:	mov	r7, r0
   14790:	mov	r8, r1
   14794:	bl	10e60 <__errno_location@plt>
   14798:	ldr	r3, [r4, #44]	; 0x2c
   1479c:	mov	r1, r8
   147a0:	ldr	r6, [r0]
   147a4:	str	r3, [sp, #16]
   147a8:	ldr	r2, [r4, #40]	; 0x28
   147ac:	add	r3, r4, #8
   147b0:	str	r3, [sp, #8]
   147b4:	str	r2, [sp, #12]
   147b8:	ldr	r2, [r4, #4]
   147bc:	mov	r5, r0
   147c0:	str	r2, [sp, #4]
   147c4:	ldr	ip, [r4]
   147c8:	mov	r3, sl
   147cc:	mov	r2, r9
   147d0:	mov	r0, r7
   147d4:	str	ip, [sp]
   147d8:	bl	130f0 <__assert_fail@plt+0x21b8>
   147dc:	str	r6, [r5]
   147e0:	add	sp, sp, #24
   147e4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   147e8:	muleq	r3, ip, r2
   147ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   147f0:	cmp	r2, #0
   147f4:	sub	sp, sp, #36	; 0x24
   147f8:	ldr	r4, [pc, #164]	; 148a4 <__assert_fail@plt+0x396c>
   147fc:	mov	r8, r1
   14800:	movne	r4, r2
   14804:	mov	r7, r0
   14808:	bl	10e60 <__errno_location@plt>
   1480c:	ldr	r3, [r4, #44]	; 0x2c
   14810:	ldr	r5, [r4, #4]
   14814:	add	r9, r4, #8
   14818:	orr	r5, r5, #1
   1481c:	mov	r1, #0
   14820:	mov	r2, r7
   14824:	ldr	fp, [r0]
   14828:	str	r3, [sp, #16]
   1482c:	ldr	r3, [r4, #40]	; 0x28
   14830:	stmib	sp, {r5, r9}
   14834:	str	r3, [sp, #12]
   14838:	ldr	r3, [r4]
   1483c:	mov	r6, r0
   14840:	str	r3, [sp]
   14844:	mov	r0, r1
   14848:	mov	r3, r8
   1484c:	bl	130f0 <__assert_fail@plt+0x21b8>
   14850:	add	r1, r0, #1
   14854:	mov	r0, r1
   14858:	str	r1, [sp, #28]
   1485c:	bl	179cc <__assert_fail@plt+0x6a94>
   14860:	ldr	r3, [r4, #44]	; 0x2c
   14864:	ldr	r1, [sp, #28]
   14868:	str	r3, [sp, #16]
   1486c:	ldr	r3, [r4, #40]	; 0x28
   14870:	str	r5, [sp, #4]
   14874:	str	r3, [sp, #12]
   14878:	str	r9, [sp, #8]
   1487c:	ldr	ip, [r4]
   14880:	mov	r3, r8
   14884:	mov	r2, r7
   14888:	str	ip, [sp]
   1488c:	mov	sl, r0
   14890:	bl	130f0 <__assert_fail@plt+0x21b8>
   14894:	mov	r0, sl
   14898:	str	fp, [r6]
   1489c:	add	sp, sp, #36	; 0x24
   148a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   148a4:	muleq	r3, ip, r2
   148a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   148ac:	cmp	r3, #0
   148b0:	sub	sp, sp, #44	; 0x2c
   148b4:	ldr	r4, [pc, #192]	; 1497c <__assert_fail@plt+0x3a44>
   148b8:	mov	r6, r2
   148bc:	movne	r4, r3
   148c0:	mov	r9, r1
   148c4:	mov	r8, r0
   148c8:	bl	10e60 <__errno_location@plt>
   148cc:	ldr	r3, [r4, #44]	; 0x2c
   148d0:	ldr	r5, [r4, #4]
   148d4:	add	sl, r4, #8
   148d8:	cmp	r6, #0
   148dc:	orreq	r5, r5, #1
   148e0:	mov	r1, #0
   148e4:	ldr	r2, [r0]
   148e8:	str	r3, [sp, #16]
   148ec:	ldr	r3, [r4, #40]	; 0x28
   148f0:	stmib	sp, {r5, sl}
   148f4:	str	r3, [sp, #12]
   148f8:	ldr	r3, [r4]
   148fc:	mov	r7, r0
   14900:	str	r2, [sp, #28]
   14904:	str	r3, [sp]
   14908:	mov	r2, r8
   1490c:	mov	r3, r9
   14910:	mov	r0, r1
   14914:	bl	130f0 <__assert_fail@plt+0x21b8>
   14918:	add	r1, r0, #1
   1491c:	mov	fp, r0
   14920:	mov	r0, r1
   14924:	str	r1, [sp, #36]	; 0x24
   14928:	bl	179cc <__assert_fail@plt+0x6a94>
   1492c:	ldr	r3, [r4, #44]	; 0x2c
   14930:	mov	r2, r8
   14934:	str	r3, [sp, #16]
   14938:	ldr	r3, [r4, #40]	; 0x28
   1493c:	str	r5, [sp, #4]
   14940:	str	r3, [sp, #12]
   14944:	str	sl, [sp, #8]
   14948:	ldr	ip, [r4]
   1494c:	ldr	r1, [sp, #36]	; 0x24
   14950:	mov	r3, r9
   14954:	str	ip, [sp]
   14958:	str	r0, [sp, #32]
   1495c:	bl	130f0 <__assert_fail@plt+0x21b8>
   14960:	ldr	r2, [sp, #28]
   14964:	cmp	r6, #0
   14968:	str	r2, [r7]
   1496c:	ldr	r0, [sp, #32]
   14970:	strne	fp, [r6]
   14974:	add	sp, sp, #44	; 0x2c
   14978:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1497c:	muleq	r3, ip, r2
   14980:	push	{r4, r5, r6, r7, r8, lr}
   14984:	ldr	r6, [pc, #116]	; 14a00 <__assert_fail@plt+0x3ac8>
   14988:	ldr	r3, [r6, #4]
   1498c:	ldr	r7, [r6]
   14990:	cmp	r3, #1
   14994:	movgt	r5, r7
   14998:	movgt	r4, #1
   1499c:	ble	149bc <__assert_fail@plt+0x3a84>
   149a0:	ldr	r0, [r5, #12]
   149a4:	bl	191c0 <__assert_fail@plt+0x8288>
   149a8:	ldr	r3, [r6, #4]
   149ac:	add	r4, r4, #1
   149b0:	cmp	r3, r4
   149b4:	add	r5, r5, #8
   149b8:	bgt	149a0 <__assert_fail@plt+0x3a68>
   149bc:	ldr	r0, [r7, #4]
   149c0:	ldr	r4, [pc, #60]	; 14a04 <__assert_fail@plt+0x3acc>
   149c4:	cmp	r0, r4
   149c8:	beq	149dc <__assert_fail@plt+0x3aa4>
   149cc:	bl	191c0 <__assert_fail@plt+0x8288>
   149d0:	mov	r3, #256	; 0x100
   149d4:	str	r4, [r6, #12]
   149d8:	str	r3, [r6, #8]
   149dc:	ldr	r4, [pc, #36]	; 14a08 <__assert_fail@plt+0x3ad0>
   149e0:	cmp	r7, r4
   149e4:	beq	149f4 <__assert_fail@plt+0x3abc>
   149e8:	mov	r0, r7
   149ec:	bl	191c0 <__assert_fail@plt+0x8288>
   149f0:	str	r4, [r6]
   149f4:	mov	r3, #1
   149f8:	str	r3, [r6, #4]
   149fc:	pop	{r4, r5, r6, r7, r8, pc}
   14a00:	strdeq	fp, [r2], -r4
   14a04:	andeq	r3, r3, ip, asr #5
   14a08:	strdeq	fp, [r2], -ip
   14a0c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14a10:	sub	sp, sp, #44	; 0x2c
   14a14:	mov	r5, r0
   14a18:	mov	sl, r1
   14a1c:	bl	10e60 <__errno_location@plt>
   14a20:	ldr	r4, [pc, #400]	; 14bb8 <__assert_fail@plt+0x3c80>
   14a24:	cmn	r5, #-2147483647	; 0x80000001
   14a28:	ldr	r6, [r4]
   14a2c:	mov	r8, r0
   14a30:	movne	r0, #0
   14a34:	moveq	r0, #1
   14a38:	ldr	r3, [r8]
   14a3c:	orrs	r0, r0, r5, lsr #31
   14a40:	str	r3, [sp, #24]
   14a44:	bne	14bb4 <__assert_fail@plt+0x3c7c>
   14a48:	ldr	r2, [r4, #4]
   14a4c:	cmp	r5, r2
   14a50:	blt	14ab0 <__assert_fail@plt+0x3b78>
   14a54:	add	r7, r4, #8
   14a58:	cmp	r6, r7
   14a5c:	str	r2, [sp, #36]	; 0x24
   14a60:	beq	14b84 <__assert_fail@plt+0x3c4c>
   14a64:	mov	r3, #8
   14a68:	sub	r2, r5, r2
   14a6c:	mov	r0, r6
   14a70:	str	r3, [sp]
   14a74:	add	r2, r2, #1
   14a78:	mvn	r3, #-2147483648	; 0x80000000
   14a7c:	add	r1, sp, #36	; 0x24
   14a80:	bl	17be8 <__assert_fail@plt+0x6cb0>
   14a84:	mov	r6, r0
   14a88:	str	r0, [r4]
   14a8c:	ldr	r0, [r4, #4]
   14a90:	ldr	r2, [sp, #36]	; 0x24
   14a94:	mov	r1, #0
   14a98:	sub	r2, r2, r0
   14a9c:	add	r0, r6, r0, lsl #3
   14aa0:	lsl	r2, r2, #3
   14aa4:	bl	10e78 <memset@plt>
   14aa8:	ldr	r3, [sp, #36]	; 0x24
   14aac:	str	r3, [r4, #4]
   14ab0:	ldr	r4, [pc, #260]	; 14bbc <__assert_fail@plt+0x3c84>
   14ab4:	add	fp, r6, r5, lsl #3
   14ab8:	ldr	r9, [r6, r5, lsl #3]
   14abc:	ldr	r0, [r4, #4]
   14ac0:	ldr	r3, [r4]
   14ac4:	ldr	r7, [fp, #4]
   14ac8:	ldr	r1, [r4, #44]	; 0x2c
   14acc:	ldr	r2, [r4, #40]	; 0x28
   14ad0:	orr	r0, r0, #1
   14ad4:	str	r3, [sp]
   14ad8:	add	r3, r4, #8
   14adc:	str	r0, [sp, #28]
   14ae0:	str	r0, [sp, #4]
   14ae4:	str	r1, [sp, #16]
   14ae8:	str	r2, [sp, #12]
   14aec:	str	r3, [sp, #8]
   14af0:	mov	r0, r7
   14af4:	mov	r1, r9
   14af8:	mvn	r3, #0
   14afc:	mov	r2, sl
   14b00:	bl	130f0 <__assert_fail@plt+0x21b8>
   14b04:	cmp	r9, r0
   14b08:	bhi	14b70 <__assert_fail@plt+0x3c38>
   14b0c:	add	r3, r4, #48	; 0x30
   14b10:	add	r9, r0, #1
   14b14:	cmp	r7, r3
   14b18:	str	r9, [r6, r5, lsl #3]
   14b1c:	beq	14b28 <__assert_fail@plt+0x3bf0>
   14b20:	mov	r0, r7
   14b24:	bl	191c0 <__assert_fail@plt+0x8288>
   14b28:	mov	r0, r9
   14b2c:	bl	179cc <__assert_fail@plt+0x6a94>
   14b30:	ldr	ip, [r4, #44]	; 0x2c
   14b34:	ldr	r3, [r4]
   14b38:	ldr	lr, [r4, #40]	; 0x28
   14b3c:	ldr	r4, [pc, #124]	; 14bc0 <__assert_fail@plt+0x3c88>
   14b40:	mov	r2, sl
   14b44:	mov	r1, r9
   14b48:	str	r0, [fp, #4]
   14b4c:	str	r4, [sp, #8]
   14b50:	ldr	r4, [sp, #28]
   14b54:	str	r3, [sp]
   14b58:	str	r4, [sp, #4]
   14b5c:	str	ip, [sp, #16]
   14b60:	str	lr, [sp, #12]
   14b64:	mvn	r3, #0
   14b68:	mov	r7, r0
   14b6c:	bl	130f0 <__assert_fail@plt+0x21b8>
   14b70:	ldr	r3, [sp, #24]
   14b74:	mov	r0, r7
   14b78:	str	r3, [r8]
   14b7c:	add	sp, sp, #44	; 0x2c
   14b80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14b84:	mov	r3, #8
   14b88:	sub	r2, r5, r2
   14b8c:	str	r3, [sp]
   14b90:	add	r1, sp, #36	; 0x24
   14b94:	add	r2, r2, #1
   14b98:	mvn	r3, #-2147483648	; 0x80000000
   14b9c:	bl	17be8 <__assert_fail@plt+0x6cb0>
   14ba0:	mov	r6, r0
   14ba4:	ldm	r7, {r0, r1}
   14ba8:	str	r6, [r4]
   14bac:	stm	r6, {r0, r1}
   14bb0:	b	14a8c <__assert_fail@plt+0x3b54>
   14bb4:	bl	10f2c <abort@plt>
   14bb8:	strdeq	fp, [r2], -r4
   14bbc:	muleq	r3, ip, r2
   14bc0:	andeq	r3, r3, r4, lsr #5
   14bc4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14bc8:	sub	sp, sp, #52	; 0x34
   14bcc:	mov	r5, r0
   14bd0:	mov	sl, r1
   14bd4:	mov	fp, r2
   14bd8:	bl	10e60 <__errno_location@plt>
   14bdc:	ldr	r4, [pc, #408]	; 14d7c <__assert_fail@plt+0x3e44>
   14be0:	cmn	r5, #-2147483647	; 0x80000001
   14be4:	ldr	r6, [r4]
   14be8:	mov	r8, r0
   14bec:	movne	r0, #0
   14bf0:	moveq	r0, #1
   14bf4:	ldr	r3, [r8]
   14bf8:	orrs	r0, r0, r5, lsr #31
   14bfc:	str	r3, [sp, #28]
   14c00:	bne	14d78 <__assert_fail@plt+0x3e40>
   14c04:	ldr	r2, [r4, #4]
   14c08:	cmp	r5, r2
   14c0c:	blt	14c6c <__assert_fail@plt+0x3d34>
   14c10:	add	r7, r4, #8
   14c14:	cmp	r6, r7
   14c18:	str	r2, [sp, #44]	; 0x2c
   14c1c:	beq	14d48 <__assert_fail@plt+0x3e10>
   14c20:	mov	r3, #8
   14c24:	sub	r2, r5, r2
   14c28:	mov	r0, r6
   14c2c:	str	r3, [sp]
   14c30:	add	r2, r2, #1
   14c34:	mvn	r3, #-2147483648	; 0x80000000
   14c38:	add	r1, sp, #44	; 0x2c
   14c3c:	bl	17be8 <__assert_fail@plt+0x6cb0>
   14c40:	mov	r6, r0
   14c44:	str	r0, [r4]
   14c48:	ldr	r0, [r4, #4]
   14c4c:	ldr	r2, [sp, #44]	; 0x2c
   14c50:	mov	r1, #0
   14c54:	sub	r2, r2, r0
   14c58:	add	r0, r6, r0, lsl #3
   14c5c:	lsl	r2, r2, #3
   14c60:	bl	10e78 <memset@plt>
   14c64:	ldr	r3, [sp, #44]	; 0x2c
   14c68:	str	r3, [r4, #4]
   14c6c:	ldr	r4, [pc, #268]	; 14d80 <__assert_fail@plt+0x3e48>
   14c70:	add	r3, r6, r5, lsl #3
   14c74:	str	r3, [sp, #32]
   14c78:	ldr	r7, [r3, #4]
   14c7c:	ldr	r0, [r4, #4]
   14c80:	ldr	r3, [r4]
   14c84:	ldr	r9, [r6, r5, lsl #3]
   14c88:	ldr	r1, [r4, #44]	; 0x2c
   14c8c:	ldr	r2, [r4, #40]	; 0x28
   14c90:	orr	r0, r0, #1
   14c94:	str	r3, [sp]
   14c98:	add	r3, r4, #8
   14c9c:	str	r0, [sp, #36]	; 0x24
   14ca0:	str	r0, [sp, #4]
   14ca4:	str	r1, [sp, #16]
   14ca8:	str	r2, [sp, #12]
   14cac:	str	r3, [sp, #8]
   14cb0:	mov	r0, r7
   14cb4:	mov	r1, r9
   14cb8:	mov	r3, fp
   14cbc:	mov	r2, sl
   14cc0:	bl	130f0 <__assert_fail@plt+0x21b8>
   14cc4:	cmp	r9, r0
   14cc8:	bhi	14d34 <__assert_fail@plt+0x3dfc>
   14ccc:	add	r3, r4, #48	; 0x30
   14cd0:	add	r9, r0, #1
   14cd4:	cmp	r7, r3
   14cd8:	str	r9, [r6, r5, lsl #3]
   14cdc:	beq	14ce8 <__assert_fail@plt+0x3db0>
   14ce0:	mov	r0, r7
   14ce4:	bl	191c0 <__assert_fail@plt+0x8288>
   14ce8:	mov	r0, r9
   14cec:	bl	179cc <__assert_fail@plt+0x6a94>
   14cf0:	ldr	ip, [sp, #32]
   14cf4:	ldr	lr, [r4, #44]	; 0x2c
   14cf8:	ldr	r5, [r4, #40]	; 0x28
   14cfc:	mov	r3, fp
   14d00:	mov	r2, sl
   14d04:	mov	r1, r9
   14d08:	str	r0, [ip, #4]
   14d0c:	ldr	ip, [r4]
   14d10:	ldr	r4, [pc, #108]	; 14d84 <__assert_fail@plt+0x3e4c>
   14d14:	str	lr, [sp, #16]
   14d18:	str	r4, [sp, #8]
   14d1c:	ldr	r4, [sp, #36]	; 0x24
   14d20:	str	r5, [sp, #12]
   14d24:	str	r4, [sp, #4]
   14d28:	str	ip, [sp]
   14d2c:	mov	r7, r0
   14d30:	bl	130f0 <__assert_fail@plt+0x21b8>
   14d34:	ldr	r3, [sp, #28]
   14d38:	mov	r0, r7
   14d3c:	str	r3, [r8]
   14d40:	add	sp, sp, #52	; 0x34
   14d44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14d48:	mov	r3, #8
   14d4c:	sub	r2, r5, r2
   14d50:	str	r3, [sp]
   14d54:	add	r1, sp, #44	; 0x2c
   14d58:	add	r2, r2, #1
   14d5c:	mvn	r3, #-2147483648	; 0x80000000
   14d60:	bl	17be8 <__assert_fail@plt+0x6cb0>
   14d64:	mov	r6, r0
   14d68:	ldm	r7, {r0, r1}
   14d6c:	str	r6, [r4]
   14d70:	stm	r6, {r0, r1}
   14d74:	b	14c48 <__assert_fail@plt+0x3d10>
   14d78:	bl	10f2c <abort@plt>
   14d7c:	strdeq	fp, [r2], -r4
   14d80:	muleq	r3, ip, r2
   14d84:	andeq	r3, r3, r4, lsr #5
   14d88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14d8c:	sub	sp, sp, #44	; 0x2c
   14d90:	mov	sl, r0
   14d94:	bl	10e60 <__errno_location@plt>
   14d98:	ldr	r4, [pc, #352]	; 14f00 <__assert_fail@plt+0x3fc8>
   14d9c:	ldr	r2, [r4, #4]
   14da0:	ldr	r5, [r4]
   14da4:	cmp	r2, #0
   14da8:	ldr	r3, [r0]
   14dac:	mov	r8, r0
   14db0:	str	r3, [sp, #28]
   14db4:	bgt	14e10 <__assert_fail@plt+0x3ed8>
   14db8:	add	r6, r4, #8
   14dbc:	cmp	r5, r6
   14dc0:	str	r2, [sp, #36]	; 0x24
   14dc4:	beq	14ed0 <__assert_fail@plt+0x3f98>
   14dc8:	mov	r3, #8
   14dcc:	mov	r0, r5
   14dd0:	str	r3, [sp]
   14dd4:	rsb	r2, r2, #1
   14dd8:	mvn	r3, #-2147483648	; 0x80000000
   14ddc:	add	r1, sp, #36	; 0x24
   14de0:	bl	17be8 <__assert_fail@plt+0x6cb0>
   14de4:	mov	r5, r0
   14de8:	str	r0, [r4]
   14dec:	ldr	r0, [r4, #4]
   14df0:	ldr	r2, [sp, #36]	; 0x24
   14df4:	mov	r1, #0
   14df8:	sub	r2, r2, r0
   14dfc:	add	r0, r5, r0, lsl #3
   14e00:	lsl	r2, r2, #3
   14e04:	bl	10e78 <memset@plt>
   14e08:	ldr	r3, [sp, #36]	; 0x24
   14e0c:	str	r3, [r4, #4]
   14e10:	ldr	r4, [pc, #236]	; 14f04 <__assert_fail@plt+0x3fcc>
   14e14:	ldr	r9, [r5]
   14e18:	ldr	r6, [r5, #4]
   14e1c:	ldr	r7, [r4, #4]
   14e20:	ldr	r1, [r4, #44]	; 0x2c
   14e24:	ldr	r2, [r4, #40]	; 0x28
   14e28:	ldr	r3, [r4]
   14e2c:	orr	r7, r7, #1
   14e30:	add	fp, r4, #8
   14e34:	str	r1, [sp, #16]
   14e38:	str	r2, [sp, #12]
   14e3c:	str	r3, [sp]
   14e40:	str	r7, [sp, #4]
   14e44:	str	fp, [sp, #8]
   14e48:	mov	r1, r9
   14e4c:	mov	r0, r6
   14e50:	mvn	r3, #0
   14e54:	mov	r2, sl
   14e58:	bl	130f0 <__assert_fail@plt+0x21b8>
   14e5c:	cmp	r9, r0
   14e60:	bhi	14ebc <__assert_fail@plt+0x3f84>
   14e64:	add	r3, r4, #48	; 0x30
   14e68:	add	r9, r0, #1
   14e6c:	cmp	r6, r3
   14e70:	str	r9, [r5]
   14e74:	beq	14e80 <__assert_fail@plt+0x3f48>
   14e78:	mov	r0, r6
   14e7c:	bl	191c0 <__assert_fail@plt+0x8288>
   14e80:	mov	r0, r9
   14e84:	bl	179cc <__assert_fail@plt+0x6a94>
   14e88:	ldr	ip, [r4, #44]	; 0x2c
   14e8c:	ldr	r3, [r4]
   14e90:	ldr	lr, [r4, #40]	; 0x28
   14e94:	mov	r2, sl
   14e98:	mov	r1, r9
   14e9c:	str	r0, [r5, #4]
   14ea0:	str	r3, [sp]
   14ea4:	stmib	sp, {r7, fp}
   14ea8:	str	ip, [sp, #16]
   14eac:	str	lr, [sp, #12]
   14eb0:	mvn	r3, #0
   14eb4:	mov	r6, r0
   14eb8:	bl	130f0 <__assert_fail@plt+0x21b8>
   14ebc:	ldr	r3, [sp, #28]
   14ec0:	mov	r0, r6
   14ec4:	str	r3, [r8]
   14ec8:	add	sp, sp, #44	; 0x2c
   14ecc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14ed0:	mov	r3, #8
   14ed4:	str	r3, [sp]
   14ed8:	add	r1, sp, #36	; 0x24
   14edc:	rsb	r2, r2, #1
   14ee0:	mvn	r3, #-2147483648	; 0x80000000
   14ee4:	mov	r0, #0
   14ee8:	bl	17be8 <__assert_fail@plt+0x6cb0>
   14eec:	mov	r5, r0
   14ef0:	ldm	r6, {r0, r1}
   14ef4:	str	r5, [r4]
   14ef8:	stm	r5, {r0, r1}
   14efc:	b	14dec <__assert_fail@plt+0x3eb4>
   14f00:	strdeq	fp, [r2], -r4
   14f04:	muleq	r3, ip, r2
   14f08:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14f0c:	sub	sp, sp, #44	; 0x2c
   14f10:	mov	r9, r0
   14f14:	mov	sl, r1
   14f18:	bl	10e60 <__errno_location@plt>
   14f1c:	ldr	r4, [pc, #364]	; 15090 <__assert_fail@plt+0x4158>
   14f20:	ldr	r2, [r4, #4]
   14f24:	ldr	r5, [r4]
   14f28:	cmp	r2, #0
   14f2c:	ldr	r3, [r0]
   14f30:	mov	r7, r0
   14f34:	str	r3, [sp, #24]
   14f38:	bgt	14f94 <__assert_fail@plt+0x405c>
   14f3c:	add	r6, r4, #8
   14f40:	cmp	r5, r6
   14f44:	str	r2, [sp, #36]	; 0x24
   14f48:	beq	15060 <__assert_fail@plt+0x4128>
   14f4c:	mov	r3, #8
   14f50:	mov	r0, r5
   14f54:	str	r3, [sp]
   14f58:	rsb	r2, r2, #1
   14f5c:	mvn	r3, #-2147483648	; 0x80000000
   14f60:	add	r1, sp, #36	; 0x24
   14f64:	bl	17be8 <__assert_fail@plt+0x6cb0>
   14f68:	mov	r5, r0
   14f6c:	str	r0, [r4]
   14f70:	ldr	r0, [r4, #4]
   14f74:	ldr	r2, [sp, #36]	; 0x24
   14f78:	mov	r1, #0
   14f7c:	sub	r2, r2, r0
   14f80:	add	r0, r5, r0, lsl #3
   14f84:	lsl	r2, r2, #3
   14f88:	bl	10e78 <memset@plt>
   14f8c:	ldr	r3, [sp, #36]	; 0x24
   14f90:	str	r3, [r4, #4]
   14f94:	ldr	r4, [pc, #248]	; 15094 <__assert_fail@plt+0x415c>
   14f98:	ldr	r8, [r5]
   14f9c:	ldr	r6, [r5, #4]
   14fa0:	ldr	r0, [r4, #4]
   14fa4:	ldr	r1, [r4, #44]	; 0x2c
   14fa8:	ldr	r2, [r4, #40]	; 0x28
   14fac:	ldr	r3, [r4]
   14fb0:	orr	r0, r0, #1
   14fb4:	add	fp, r4, #8
   14fb8:	str	r0, [sp, #28]
   14fbc:	str	r0, [sp, #4]
   14fc0:	str	r1, [sp, #16]
   14fc4:	str	r2, [sp, #12]
   14fc8:	str	r3, [sp]
   14fcc:	str	fp, [sp, #8]
   14fd0:	mov	r1, r8
   14fd4:	mov	r0, r6
   14fd8:	mov	r3, sl
   14fdc:	mov	r2, r9
   14fe0:	bl	130f0 <__assert_fail@plt+0x21b8>
   14fe4:	cmp	r8, r0
   14fe8:	bhi	1504c <__assert_fail@plt+0x4114>
   14fec:	add	r3, r4, #48	; 0x30
   14ff0:	add	r8, r0, #1
   14ff4:	cmp	r6, r3
   14ff8:	str	r8, [r5]
   14ffc:	beq	15008 <__assert_fail@plt+0x40d0>
   15000:	mov	r0, r6
   15004:	bl	191c0 <__assert_fail@plt+0x8288>
   15008:	mov	r0, r8
   1500c:	bl	179cc <__assert_fail@plt+0x6a94>
   15010:	ldr	lr, [r4, #44]	; 0x2c
   15014:	ldr	ip, [r4]
   15018:	mov	r3, sl
   1501c:	mov	r2, r9
   15020:	mov	r1, r8
   15024:	str	r0, [r5, #4]
   15028:	ldr	r5, [r4, #40]	; 0x28
   1502c:	ldr	r4, [sp, #28]
   15030:	str	fp, [sp, #8]
   15034:	str	r4, [sp, #4]
   15038:	str	lr, [sp, #16]
   1503c:	str	r5, [sp, #12]
   15040:	str	ip, [sp]
   15044:	mov	r6, r0
   15048:	bl	130f0 <__assert_fail@plt+0x21b8>
   1504c:	ldr	r3, [sp, #24]
   15050:	mov	r0, r6
   15054:	str	r3, [r7]
   15058:	add	sp, sp, #44	; 0x2c
   1505c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15060:	mov	r3, #8
   15064:	str	r3, [sp]
   15068:	add	r1, sp, #36	; 0x24
   1506c:	rsb	r2, r2, #1
   15070:	mvn	r3, #-2147483648	; 0x80000000
   15074:	mov	r0, #0
   15078:	bl	17be8 <__assert_fail@plt+0x6cb0>
   1507c:	mov	r5, r0
   15080:	ldm	r6, {r0, r1}
   15084:	str	r5, [r4]
   15088:	stm	r5, {r0, r1}
   1508c:	b	14f70 <__assert_fail@plt+0x4038>
   15090:	strdeq	fp, [r2], -r4
   15094:	muleq	r3, ip, r2
   15098:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1509c:	sub	sp, sp, #132	; 0x84
   150a0:	mov	r5, r1
   150a4:	mov	r4, r0
   150a8:	mov	r9, r2
   150ac:	add	r0, sp, #80	; 0x50
   150b0:	mov	r2, #48	; 0x30
   150b4:	mov	r1, #0
   150b8:	bl	10e78 <memset@plt>
   150bc:	cmp	r5, #10
   150c0:	beq	15278 <__assert_fail@plt+0x4340>
   150c4:	add	lr, sp, #80	; 0x50
   150c8:	str	r5, [sp, #80]	; 0x50
   150cc:	ldm	lr!, {r0, r1, r2, r3}
   150d0:	add	ip, sp, #32
   150d4:	ldr	r6, [pc, #416]	; 1527c <__assert_fail@plt+0x4344>
   150d8:	stmia	ip!, {r0, r1, r2, r3}
   150dc:	ldm	lr!, {r0, r1, r2, r3}
   150e0:	stmia	ip!, {r0, r1, r2, r3}
   150e4:	ldm	lr, {r0, r1, r2, r3}
   150e8:	stm	ip, {r0, r1, r2, r3}
   150ec:	bl	10e60 <__errno_location@plt>
   150f0:	cmn	r4, #-2147483647	; 0x80000001
   150f4:	ldr	r5, [r6]
   150f8:	mov	r7, r0
   150fc:	movne	r0, #0
   15100:	moveq	r0, #1
   15104:	ldr	r3, [r7]
   15108:	orrs	r0, r0, r4, lsr #31
   1510c:	str	r3, [sp, #24]
   15110:	bne	15278 <__assert_fail@plt+0x4340>
   15114:	ldr	r2, [r6, #4]
   15118:	cmp	r4, r2
   1511c:	blt	1517c <__assert_fail@plt+0x4244>
   15120:	add	r8, r6, #8
   15124:	cmp	r5, r8
   15128:	str	r2, [sp, #80]	; 0x50
   1512c:	beq	15248 <__assert_fail@plt+0x4310>
   15130:	mov	r3, #8
   15134:	sub	r2, r4, r2
   15138:	mov	r0, r5
   1513c:	str	r3, [sp]
   15140:	add	r2, r2, #1
   15144:	add	r1, sp, #80	; 0x50
   15148:	mvn	r3, #-2147483648	; 0x80000000
   1514c:	bl	17be8 <__assert_fail@plt+0x6cb0>
   15150:	mov	r5, r0
   15154:	str	r0, [r6]
   15158:	ldr	r0, [r6, #4]
   1515c:	ldr	r2, [sp, #80]	; 0x50
   15160:	mov	r1, #0
   15164:	sub	r2, r2, r0
   15168:	add	r0, r5, r0, lsl #3
   1516c:	lsl	r2, r2, #3
   15170:	bl	10e78 <memset@plt>
   15174:	ldr	r3, [sp, #80]	; 0x50
   15178:	str	r3, [r6, #4]
   1517c:	add	fp, r5, r4, lsl #3
   15180:	ldr	r1, [sp, #36]	; 0x24
   15184:	ldr	r8, [r5, r4, lsl #3]
   15188:	ldr	r6, [fp, #4]
   1518c:	ldr	r2, [sp, #72]	; 0x48
   15190:	ldr	r3, [sp, #32]
   15194:	ldr	ip, [sp, #76]	; 0x4c
   15198:	orr	r1, r1, #1
   1519c:	add	sl, sp, #40	; 0x28
   151a0:	str	r1, [sp, #28]
   151a4:	str	r1, [sp, #4]
   151a8:	str	r2, [sp, #12]
   151ac:	str	r3, [sp]
   151b0:	mov	r0, r6
   151b4:	mov	r1, r8
   151b8:	str	ip, [sp, #16]
   151bc:	str	sl, [sp, #8]
   151c0:	mvn	r3, #0
   151c4:	mov	r2, r9
   151c8:	bl	130f0 <__assert_fail@plt+0x21b8>
   151cc:	cmp	r8, r0
   151d0:	bhi	15234 <__assert_fail@plt+0x42fc>
   151d4:	ldr	r3, [pc, #164]	; 15280 <__assert_fail@plt+0x4348>
   151d8:	add	r8, r0, #1
   151dc:	cmp	r6, r3
   151e0:	str	r8, [r5, r4, lsl #3]
   151e4:	beq	151f0 <__assert_fail@plt+0x42b8>
   151e8:	mov	r0, r6
   151ec:	bl	191c0 <__assert_fail@plt+0x8288>
   151f0:	mov	r0, r8
   151f4:	bl	179cc <__assert_fail@plt+0x6a94>
   151f8:	ldr	lr, [sp, #76]	; 0x4c
   151fc:	ldr	r3, [sp, #32]
   15200:	ldr	ip, [sp, #72]	; 0x48
   15204:	ldr	r4, [sp, #28]
   15208:	mov	r2, r9
   1520c:	mov	r1, r8
   15210:	str	r0, [fp, #4]
   15214:	str	r3, [sp]
   15218:	str	sl, [sp, #8]
   1521c:	str	r4, [sp, #4]
   15220:	str	lr, [sp, #16]
   15224:	str	ip, [sp, #12]
   15228:	mvn	r3, #0
   1522c:	mov	r6, r0
   15230:	bl	130f0 <__assert_fail@plt+0x21b8>
   15234:	ldr	r3, [sp, #24]
   15238:	mov	r0, r6
   1523c:	str	r3, [r7]
   15240:	add	sp, sp, #132	; 0x84
   15244:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15248:	mov	r3, #8
   1524c:	sub	r2, r4, r2
   15250:	add	r1, sp, #80	; 0x50
   15254:	str	r3, [sp]
   15258:	add	r2, r2, #1
   1525c:	mvn	r3, #-2147483648	; 0x80000000
   15260:	bl	17be8 <__assert_fail@plt+0x6cb0>
   15264:	mov	r5, r0
   15268:	ldm	r8, {r0, r1}
   1526c:	str	r5, [r6]
   15270:	stm	r5, {r0, r1}
   15274:	b	15158 <__assert_fail@plt+0x4220>
   15278:	bl	10f2c <abort@plt>
   1527c:	strdeq	fp, [r2], -r4
   15280:	andeq	r3, r3, ip, asr #5
   15284:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15288:	sub	sp, sp, #132	; 0x84
   1528c:	mov	r5, r1
   15290:	mov	r4, r0
   15294:	mov	r9, r2
   15298:	add	r0, sp, #80	; 0x50
   1529c:	mov	r2, #48	; 0x30
   152a0:	mov	r1, #0
   152a4:	mov	sl, r3
   152a8:	bl	10e78 <memset@plt>
   152ac:	cmp	r5, #10
   152b0:	beq	1546c <__assert_fail@plt+0x4534>
   152b4:	add	lr, sp, #80	; 0x50
   152b8:	str	r5, [sp, #80]	; 0x50
   152bc:	ldm	lr!, {r0, r1, r2, r3}
   152c0:	add	ip, sp, #32
   152c4:	ldr	r6, [pc, #420]	; 15470 <__assert_fail@plt+0x4538>
   152c8:	stmia	ip!, {r0, r1, r2, r3}
   152cc:	ldm	lr!, {r0, r1, r2, r3}
   152d0:	stmia	ip!, {r0, r1, r2, r3}
   152d4:	ldm	lr, {r0, r1, r2, r3}
   152d8:	stm	ip, {r0, r1, r2, r3}
   152dc:	bl	10e60 <__errno_location@plt>
   152e0:	cmn	r4, #-2147483647	; 0x80000001
   152e4:	ldr	r5, [r6]
   152e8:	mov	r7, r0
   152ec:	movne	r0, #0
   152f0:	moveq	r0, #1
   152f4:	ldr	r3, [r7]
   152f8:	orrs	r0, r0, r4, lsr #31
   152fc:	str	r3, [sp, #24]
   15300:	bne	1546c <__assert_fail@plt+0x4534>
   15304:	ldr	r2, [r6, #4]
   15308:	cmp	r4, r2
   1530c:	blt	1536c <__assert_fail@plt+0x4434>
   15310:	add	r8, r6, #8
   15314:	cmp	r5, r8
   15318:	str	r2, [sp, #80]	; 0x50
   1531c:	beq	1543c <__assert_fail@plt+0x4504>
   15320:	mov	r3, #8
   15324:	sub	r2, r4, r2
   15328:	mov	r0, r5
   1532c:	str	r3, [sp]
   15330:	add	r2, r2, #1
   15334:	add	r1, sp, #80	; 0x50
   15338:	mvn	r3, #-2147483648	; 0x80000000
   1533c:	bl	17be8 <__assert_fail@plt+0x6cb0>
   15340:	mov	r5, r0
   15344:	str	r0, [r6]
   15348:	ldr	r0, [r6, #4]
   1534c:	ldr	r2, [sp, #80]	; 0x50
   15350:	mov	r1, #0
   15354:	sub	r2, r2, r0
   15358:	add	r0, r5, r0, lsl #3
   1535c:	lsl	r2, r2, #3
   15360:	bl	10e78 <memset@plt>
   15364:	ldr	r3, [sp, #80]	; 0x50
   15368:	str	r3, [r6, #4]
   1536c:	add	fp, r5, r4, lsl #3
   15370:	ldr	r3, [sp, #32]
   15374:	ldr	r1, [sp, #36]	; 0x24
   15378:	ldr	r8, [r5, r4, lsl #3]
   1537c:	ldr	r6, [fp, #4]
   15380:	ldr	r2, [sp, #72]	; 0x48
   15384:	ldr	ip, [sp, #76]	; 0x4c
   15388:	orr	r1, r1, #1
   1538c:	str	r3, [sp]
   15390:	add	r3, sp, #40	; 0x28
   15394:	str	r1, [sp, #28]
   15398:	str	r1, [sp, #4]
   1539c:	str	r2, [sp, #12]
   153a0:	str	r3, [sp, #8]
   153a4:	mov	r0, r6
   153a8:	mov	r1, r8
   153ac:	str	ip, [sp, #16]
   153b0:	mov	r3, sl
   153b4:	mov	r2, r9
   153b8:	bl	130f0 <__assert_fail@plt+0x21b8>
   153bc:	cmp	r8, r0
   153c0:	bhi	15428 <__assert_fail@plt+0x44f0>
   153c4:	ldr	r3, [pc, #168]	; 15474 <__assert_fail@plt+0x453c>
   153c8:	add	r8, r0, #1
   153cc:	cmp	r6, r3
   153d0:	str	r8, [r5, r4, lsl #3]
   153d4:	beq	153e0 <__assert_fail@plt+0x44a8>
   153d8:	mov	r0, r6
   153dc:	bl	191c0 <__assert_fail@plt+0x8288>
   153e0:	mov	r0, r8
   153e4:	bl	179cc <__assert_fail@plt+0x6a94>
   153e8:	add	lr, sp, #40	; 0x28
   153ec:	ldr	ip, [sp, #76]	; 0x4c
   153f0:	ldr	r4, [sp, #72]	; 0x48
   153f4:	ldr	r5, [sp, #28]
   153f8:	mov	r3, sl
   153fc:	mov	r2, r9
   15400:	mov	r1, r8
   15404:	str	r0, [fp, #4]
   15408:	str	lr, [sp, #8]
   1540c:	ldr	lr, [sp, #32]
   15410:	str	r5, [sp, #4]
   15414:	str	ip, [sp, #16]
   15418:	str	r4, [sp, #12]
   1541c:	str	lr, [sp]
   15420:	mov	r6, r0
   15424:	bl	130f0 <__assert_fail@plt+0x21b8>
   15428:	ldr	r3, [sp, #24]
   1542c:	mov	r0, r6
   15430:	str	r3, [r7]
   15434:	add	sp, sp, #132	; 0x84
   15438:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1543c:	mov	r3, #8
   15440:	sub	r2, r4, r2
   15444:	add	r1, sp, #80	; 0x50
   15448:	str	r3, [sp]
   1544c:	add	r2, r2, #1
   15450:	mvn	r3, #-2147483648	; 0x80000000
   15454:	bl	17be8 <__assert_fail@plt+0x6cb0>
   15458:	mov	r5, r0
   1545c:	ldm	r8, {r0, r1}
   15460:	str	r5, [r6]
   15464:	stm	r5, {r0, r1}
   15468:	b	15348 <__assert_fail@plt+0x4410>
   1546c:	bl	10f2c <abort@plt>
   15470:	strdeq	fp, [r2], -r4
   15474:	andeq	r3, r3, ip, asr #5
   15478:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1547c:	sub	sp, sp, #124	; 0x7c
   15480:	mov	r4, r0
   15484:	mov	r9, r1
   15488:	add	r0, sp, #72	; 0x48
   1548c:	mov	r2, #48	; 0x30
   15490:	mov	r1, #0
   15494:	bl	10e78 <memset@plt>
   15498:	cmp	r4, #10
   1549c:	beq	15628 <__assert_fail@plt+0x46f0>
   154a0:	add	lr, sp, #72	; 0x48
   154a4:	str	r4, [sp, #72]	; 0x48
   154a8:	ldm	lr!, {r0, r1, r2, r3}
   154ac:	add	ip, sp, #24
   154b0:	ldr	r5, [pc, #372]	; 1562c <__assert_fail@plt+0x46f4>
   154b4:	stmia	ip!, {r0, r1, r2, r3}
   154b8:	ldm	lr!, {r0, r1, r2, r3}
   154bc:	stmia	ip!, {r0, r1, r2, r3}
   154c0:	ldm	lr, {r0, r1, r2, r3}
   154c4:	stm	ip, {r0, r1, r2, r3}
   154c8:	bl	10e60 <__errno_location@plt>
   154cc:	ldr	r2, [r5, #4]
   154d0:	ldr	r4, [r5]
   154d4:	cmp	r2, #0
   154d8:	mov	r7, r0
   154dc:	ldr	fp, [r0]
   154e0:	bgt	1553c <__assert_fail@plt+0x4604>
   154e4:	add	r6, r5, #8
   154e8:	cmp	r4, r6
   154ec:	str	r2, [sp, #72]	; 0x48
   154f0:	beq	155f8 <__assert_fail@plt+0x46c0>
   154f4:	mov	r3, #8
   154f8:	mov	r0, r4
   154fc:	str	r3, [sp]
   15500:	rsb	r2, r2, #1
   15504:	add	r1, sp, #72	; 0x48
   15508:	mvn	r3, #-2147483648	; 0x80000000
   1550c:	bl	17be8 <__assert_fail@plt+0x6cb0>
   15510:	mov	r4, r0
   15514:	str	r0, [r5]
   15518:	ldr	r0, [r5, #4]
   1551c:	ldr	r2, [sp, #72]	; 0x48
   15520:	mov	r1, #0
   15524:	sub	r2, r2, r0
   15528:	add	r0, r4, r0, lsl #3
   1552c:	lsl	r2, r2, #3
   15530:	bl	10e78 <memset@plt>
   15534:	ldr	r3, [sp, #72]	; 0x48
   15538:	str	r3, [r5, #4]
   1553c:	ldr	r6, [sp, #28]
   15540:	ldr	r8, [r4]
   15544:	ldr	r5, [r4, #4]
   15548:	ldr	r2, [sp, #64]	; 0x40
   1554c:	ldr	r3, [sp, #24]
   15550:	ldr	ip, [sp, #68]	; 0x44
   15554:	orr	r6, r6, #1
   15558:	add	sl, sp, #32
   1555c:	str	r2, [sp, #12]
   15560:	str	r3, [sp]
   15564:	str	r6, [sp, #4]
   15568:	mov	r1, r8
   1556c:	mov	r0, r5
   15570:	str	ip, [sp, #16]
   15574:	str	sl, [sp, #8]
   15578:	mvn	r3, #0
   1557c:	mov	r2, r9
   15580:	bl	130f0 <__assert_fail@plt+0x21b8>
   15584:	cmp	r8, r0
   15588:	bhi	155e8 <__assert_fail@plt+0x46b0>
   1558c:	ldr	r3, [pc, #156]	; 15630 <__assert_fail@plt+0x46f8>
   15590:	add	r8, r0, #1
   15594:	cmp	r5, r3
   15598:	str	r8, [r4]
   1559c:	beq	155a8 <__assert_fail@plt+0x4670>
   155a0:	mov	r0, r5
   155a4:	bl	191c0 <__assert_fail@plt+0x8288>
   155a8:	mov	r0, r8
   155ac:	bl	179cc <__assert_fail@plt+0x6a94>
   155b0:	ldr	lr, [sp, #68]	; 0x44
   155b4:	ldr	r3, [sp, #24]
   155b8:	ldr	ip, [sp, #64]	; 0x40
   155bc:	mov	r2, r9
   155c0:	mov	r1, r8
   155c4:	str	r0, [r4, #4]
   155c8:	str	r3, [sp]
   155cc:	str	sl, [sp, #8]
   155d0:	str	r6, [sp, #4]
   155d4:	str	lr, [sp, #16]
   155d8:	str	ip, [sp, #12]
   155dc:	mvn	r3, #0
   155e0:	mov	r5, r0
   155e4:	bl	130f0 <__assert_fail@plt+0x21b8>
   155e8:	mov	r0, r5
   155ec:	str	fp, [r7]
   155f0:	add	sp, sp, #124	; 0x7c
   155f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   155f8:	mov	r3, #8
   155fc:	add	r1, sp, #72	; 0x48
   15600:	str	r3, [sp]
   15604:	rsb	r2, r2, #1
   15608:	mvn	r3, #-2147483648	; 0x80000000
   1560c:	mov	r0, #0
   15610:	bl	17be8 <__assert_fail@plt+0x6cb0>
   15614:	mov	r4, r0
   15618:	ldm	r6, {r0, r1}
   1561c:	str	r4, [r5]
   15620:	stm	r4, {r0, r1}
   15624:	b	15518 <__assert_fail@plt+0x45e0>
   15628:	bl	10f2c <abort@plt>
   1562c:	strdeq	fp, [r2], -r4
   15630:	andeq	r3, r3, ip, asr #5
   15634:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15638:	sub	sp, sp, #132	; 0x84
   1563c:	mov	r4, r0
   15640:	mov	r9, r1
   15644:	mov	sl, r2
   15648:	add	r0, sp, #80	; 0x50
   1564c:	mov	r2, #48	; 0x30
   15650:	mov	r1, #0
   15654:	bl	10e78 <memset@plt>
   15658:	cmp	r4, #10
   1565c:	beq	157f0 <__assert_fail@plt+0x48b8>
   15660:	add	lr, sp, #80	; 0x50
   15664:	str	r4, [sp, #80]	; 0x50
   15668:	ldm	lr!, {r0, r1, r2, r3}
   1566c:	add	ip, sp, #32
   15670:	ldr	r5, [pc, #380]	; 157f4 <__assert_fail@plt+0x48bc>
   15674:	stmia	ip!, {r0, r1, r2, r3}
   15678:	ldm	lr!, {r0, r1, r2, r3}
   1567c:	stmia	ip!, {r0, r1, r2, r3}
   15680:	ldm	lr, {r0, r1, r2, r3}
   15684:	stm	ip, {r0, r1, r2, r3}
   15688:	bl	10e60 <__errno_location@plt>
   1568c:	ldr	r2, [r5, #4]
   15690:	ldr	r4, [r5]
   15694:	cmp	r2, #0
   15698:	ldr	r3, [r0]
   1569c:	mov	r7, r0
   156a0:	str	r3, [sp, #28]
   156a4:	bgt	15700 <__assert_fail@plt+0x47c8>
   156a8:	add	r6, r5, #8
   156ac:	cmp	r4, r6
   156b0:	str	r2, [sp, #80]	; 0x50
   156b4:	beq	157c0 <__assert_fail@plt+0x4888>
   156b8:	mov	r3, #8
   156bc:	mov	r0, r4
   156c0:	str	r3, [sp]
   156c4:	rsb	r2, r2, #1
   156c8:	add	r1, sp, #80	; 0x50
   156cc:	mvn	r3, #-2147483648	; 0x80000000
   156d0:	bl	17be8 <__assert_fail@plt+0x6cb0>
   156d4:	mov	r4, r0
   156d8:	str	r0, [r5]
   156dc:	ldr	r0, [r5, #4]
   156e0:	ldr	r2, [sp, #80]	; 0x50
   156e4:	mov	r1, #0
   156e8:	sub	r2, r2, r0
   156ec:	add	r0, r4, r0, lsl #3
   156f0:	lsl	r2, r2, #3
   156f4:	bl	10e78 <memset@plt>
   156f8:	ldr	r3, [sp, #80]	; 0x50
   156fc:	str	r3, [r5, #4]
   15700:	ldr	r6, [sp, #36]	; 0x24
   15704:	ldr	r8, [r4]
   15708:	ldr	r5, [r4, #4]
   1570c:	ldr	r2, [sp, #72]	; 0x48
   15710:	ldr	r3, [sp, #32]
   15714:	ldr	ip, [sp, #76]	; 0x4c
   15718:	orr	r6, r6, #1
   1571c:	add	fp, sp, #40	; 0x28
   15720:	str	r2, [sp, #12]
   15724:	str	r3, [sp]
   15728:	str	r6, [sp, #4]
   1572c:	mov	r1, r8
   15730:	mov	r0, r5
   15734:	str	ip, [sp, #16]
   15738:	str	fp, [sp, #8]
   1573c:	mov	r3, sl
   15740:	mov	r2, r9
   15744:	bl	130f0 <__assert_fail@plt+0x21b8>
   15748:	cmp	r8, r0
   1574c:	bhi	157ac <__assert_fail@plt+0x4874>
   15750:	ldr	r3, [pc, #160]	; 157f8 <__assert_fail@plt+0x48c0>
   15754:	add	r8, r0, #1
   15758:	cmp	r5, r3
   1575c:	str	r8, [r4]
   15760:	beq	1576c <__assert_fail@plt+0x4834>
   15764:	mov	r0, r5
   15768:	bl	191c0 <__assert_fail@plt+0x8288>
   1576c:	mov	r0, r8
   15770:	bl	179cc <__assert_fail@plt+0x6a94>
   15774:	ldr	ip, [sp, #76]	; 0x4c
   15778:	ldr	lr, [sp, #32]
   1577c:	mov	r3, sl
   15780:	mov	r2, r9
   15784:	mov	r1, r8
   15788:	str	r0, [r4, #4]
   1578c:	ldr	r4, [sp, #72]	; 0x48
   15790:	str	fp, [sp, #8]
   15794:	str	r6, [sp, #4]
   15798:	str	ip, [sp, #16]
   1579c:	str	r4, [sp, #12]
   157a0:	str	lr, [sp]
   157a4:	mov	r5, r0
   157a8:	bl	130f0 <__assert_fail@plt+0x21b8>
   157ac:	ldr	r3, [sp, #28]
   157b0:	mov	r0, r5
   157b4:	str	r3, [r7]
   157b8:	add	sp, sp, #132	; 0x84
   157bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   157c0:	mov	r3, #8
   157c4:	add	r1, sp, #80	; 0x50
   157c8:	str	r3, [sp]
   157cc:	rsb	r2, r2, #1
   157d0:	mvn	r3, #-2147483648	; 0x80000000
   157d4:	mov	r0, #0
   157d8:	bl	17be8 <__assert_fail@plt+0x6cb0>
   157dc:	mov	r4, r0
   157e0:	ldm	r6, {r0, r1}
   157e4:	str	r4, [r5]
   157e8:	stm	r4, {r0, r1}
   157ec:	b	156dc <__assert_fail@plt+0x47a4>
   157f0:	bl	10f2c <abort@plt>
   157f4:	strdeq	fp, [r2], -r4
   157f8:	andeq	r3, r3, ip, asr #5
   157fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15800:	mov	r4, r2
   15804:	ldr	lr, [pc, #432]	; 159bc <__assert_fail@plt+0x4a84>
   15808:	mov	sl, r0
   1580c:	mov	fp, r1
   15810:	ldm	lr!, {r0, r1, r2, r3}
   15814:	sub	sp, sp, #92	; 0x5c
   15818:	add	ip, sp, #40	; 0x28
   1581c:	lsr	r7, r4, #5
   15820:	stmia	ip!, {r0, r1, r2, r3}
   15824:	add	r6, sp, #48	; 0x30
   15828:	ldm	lr!, {r0, r1, r2, r3}
   1582c:	and	r4, r4, #31
   15830:	ldr	r5, [pc, #392]	; 159c0 <__assert_fail@plt+0x4a88>
   15834:	stmia	ip!, {r0, r1, r2, r3}
   15838:	ldm	lr, {r0, r1, r2, r3}
   1583c:	stm	ip, {r0, r1, r2, r3}
   15840:	ldr	r2, [r6, r7, lsl #2]
   15844:	lsr	r3, r2, r4
   15848:	eor	r3, r3, #1
   1584c:	and	r3, r3, #1
   15850:	eor	r4, r2, r3, lsl r4
   15854:	str	r4, [r6, r7, lsl #2]
   15858:	bl	10e60 <__errno_location@plt>
   1585c:	ldr	r2, [r5, #4]
   15860:	ldr	r4, [r5]
   15864:	cmp	r2, #0
   15868:	ldr	r3, [r0]
   1586c:	mov	r8, r0
   15870:	str	r3, [sp, #28]
   15874:	bgt	158d0 <__assert_fail@plt+0x4998>
   15878:	add	r7, r5, #8
   1587c:	cmp	r4, r7
   15880:	str	r2, [sp, #36]	; 0x24
   15884:	beq	1598c <__assert_fail@plt+0x4a54>
   15888:	mov	r3, #8
   1588c:	mov	r0, r4
   15890:	str	r3, [sp]
   15894:	rsb	r2, r2, #1
   15898:	mvn	r3, #-2147483648	; 0x80000000
   1589c:	add	r1, sp, #36	; 0x24
   158a0:	bl	17be8 <__assert_fail@plt+0x6cb0>
   158a4:	mov	r4, r0
   158a8:	str	r0, [r5]
   158ac:	ldr	r0, [r5, #4]
   158b0:	ldr	r2, [sp, #36]	; 0x24
   158b4:	mov	r1, #0
   158b8:	sub	r2, r2, r0
   158bc:	add	r0, r4, r0, lsl #3
   158c0:	lsl	r2, r2, #3
   158c4:	bl	10e78 <memset@plt>
   158c8:	ldr	r3, [sp, #36]	; 0x24
   158cc:	str	r3, [r5, #4]
   158d0:	ldr	r7, [sp, #44]	; 0x2c
   158d4:	ldr	r9, [r4]
   158d8:	ldr	r5, [r4, #4]
   158dc:	ldr	r2, [sp, #80]	; 0x50
   158e0:	ldr	r3, [sp, #40]	; 0x28
   158e4:	ldr	ip, [sp, #84]	; 0x54
   158e8:	orr	r7, r7, #1
   158ec:	str	r2, [sp, #12]
   158f0:	str	r3, [sp]
   158f4:	str	r7, [sp, #4]
   158f8:	str	r6, [sp, #8]
   158fc:	mov	r1, r9
   15900:	mov	r0, r5
   15904:	str	ip, [sp, #16]
   15908:	mov	r3, fp
   1590c:	mov	r2, sl
   15910:	bl	130f0 <__assert_fail@plt+0x21b8>
   15914:	cmp	r9, r0
   15918:	bhi	15978 <__assert_fail@plt+0x4a40>
   1591c:	ldr	r3, [pc, #160]	; 159c4 <__assert_fail@plt+0x4a8c>
   15920:	add	r9, r0, #1
   15924:	cmp	r5, r3
   15928:	str	r9, [r4]
   1592c:	beq	15938 <__assert_fail@plt+0x4a00>
   15930:	mov	r0, r5
   15934:	bl	191c0 <__assert_fail@plt+0x8288>
   15938:	mov	r0, r9
   1593c:	bl	179cc <__assert_fail@plt+0x6a94>
   15940:	ldr	ip, [sp, #84]	; 0x54
   15944:	ldr	lr, [sp, #40]	; 0x28
   15948:	mov	r3, fp
   1594c:	mov	r2, sl
   15950:	mov	r1, r9
   15954:	str	r0, [r4, #4]
   15958:	ldr	r4, [sp, #80]	; 0x50
   1595c:	str	r6, [sp, #8]
   15960:	str	r7, [sp, #4]
   15964:	str	ip, [sp, #16]
   15968:	str	r4, [sp, #12]
   1596c:	str	lr, [sp]
   15970:	mov	r5, r0
   15974:	bl	130f0 <__assert_fail@plt+0x21b8>
   15978:	ldr	r3, [sp, #28]
   1597c:	mov	r0, r5
   15980:	str	r3, [r8]
   15984:	add	sp, sp, #92	; 0x5c
   15988:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1598c:	mov	r3, #8
   15990:	str	r3, [sp]
   15994:	add	r1, sp, #36	; 0x24
   15998:	rsb	r2, r2, #1
   1599c:	mvn	r3, #-2147483648	; 0x80000000
   159a0:	mov	r0, #0
   159a4:	bl	17be8 <__assert_fail@plt+0x6cb0>
   159a8:	mov	r4, r0
   159ac:	ldm	r7, {r0, r1}
   159b0:	str	r4, [r5]
   159b4:	stm	r4, {r0, r1}
   159b8:	b	158ac <__assert_fail@plt+0x4974>
   159bc:	muleq	r3, ip, r2
   159c0:	strdeq	fp, [r2], -r4
   159c4:	andeq	r3, r3, ip, asr #5
   159c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   159cc:	mov	r4, r1
   159d0:	ldr	lr, [pc, #420]	; 15b7c <__assert_fail@plt+0x4c44>
   159d4:	mov	r6, r0
   159d8:	sub	sp, sp, #84	; 0x54
   159dc:	ldm	lr!, {r0, r1, r2, r3}
   159e0:	add	ip, sp, #32
   159e4:	lsr	r8, r4, #5
   159e8:	add	r5, sp, #40	; 0x28
   159ec:	stmia	ip!, {r0, r1, r2, r3}
   159f0:	and	r4, r4, #31
   159f4:	ldm	lr!, {r0, r1, r2, r3}
   159f8:	ldr	r7, [pc, #384]	; 15b80 <__assert_fail@plt+0x4c48>
   159fc:	stmia	ip!, {r0, r1, r2, r3}
   15a00:	ldm	lr, {r0, r1, r2, r3}
   15a04:	stm	ip, {r0, r1, r2, r3}
   15a08:	ldr	r2, [r5, r8, lsl #2]
   15a0c:	lsr	r3, r2, r4
   15a10:	eor	r3, r3, #1
   15a14:	and	r3, r3, #1
   15a18:	eor	r4, r2, r3, lsl r4
   15a1c:	str	r4, [r5, r8, lsl #2]
   15a20:	bl	10e60 <__errno_location@plt>
   15a24:	ldr	r2, [r7, #4]
   15a28:	ldr	r4, [r7]
   15a2c:	cmp	r2, #0
   15a30:	mov	r9, r0
   15a34:	ldr	sl, [r0]
   15a38:	bgt	15a94 <__assert_fail@plt+0x4b5c>
   15a3c:	add	r8, r7, #8
   15a40:	cmp	r4, r8
   15a44:	str	r2, [sp, #28]
   15a48:	beq	15b4c <__assert_fail@plt+0x4c14>
   15a4c:	mov	r3, #8
   15a50:	mov	r0, r4
   15a54:	str	r3, [sp]
   15a58:	rsb	r2, r2, #1
   15a5c:	mvn	r3, #-2147483648	; 0x80000000
   15a60:	add	r1, sp, #28
   15a64:	bl	17be8 <__assert_fail@plt+0x6cb0>
   15a68:	mov	r4, r0
   15a6c:	str	r0, [r7]
   15a70:	ldr	r0, [r7, #4]
   15a74:	ldr	r2, [sp, #28]
   15a78:	mov	r1, #0
   15a7c:	sub	r2, r2, r0
   15a80:	add	r0, r4, r0, lsl #3
   15a84:	lsl	r2, r2, #3
   15a88:	bl	10e78 <memset@plt>
   15a8c:	ldr	r3, [sp, #28]
   15a90:	str	r3, [r7, #4]
   15a94:	ldr	r8, [sp, #36]	; 0x24
   15a98:	ldr	fp, [r4]
   15a9c:	ldr	r7, [r4, #4]
   15aa0:	ldr	r2, [sp, #72]	; 0x48
   15aa4:	ldr	r3, [sp, #32]
   15aa8:	ldr	ip, [sp, #76]	; 0x4c
   15aac:	orr	r8, r8, #1
   15ab0:	str	r2, [sp, #12]
   15ab4:	str	r3, [sp]
   15ab8:	str	r8, [sp, #4]
   15abc:	str	r5, [sp, #8]
   15ac0:	mov	r1, fp
   15ac4:	mov	r0, r7
   15ac8:	str	ip, [sp, #16]
   15acc:	mvn	r3, #0
   15ad0:	mov	r2, r6
   15ad4:	bl	130f0 <__assert_fail@plt+0x21b8>
   15ad8:	cmp	fp, r0
   15adc:	bhi	15b3c <__assert_fail@plt+0x4c04>
   15ae0:	ldr	r3, [pc, #156]	; 15b84 <__assert_fail@plt+0x4c4c>
   15ae4:	add	fp, r0, #1
   15ae8:	cmp	r7, r3
   15aec:	str	fp, [r4]
   15af0:	beq	15afc <__assert_fail@plt+0x4bc4>
   15af4:	mov	r0, r7
   15af8:	bl	191c0 <__assert_fail@plt+0x8288>
   15afc:	mov	r0, fp
   15b00:	bl	179cc <__assert_fail@plt+0x6a94>
   15b04:	ldr	lr, [sp, #76]	; 0x4c
   15b08:	ldr	r3, [sp, #32]
   15b0c:	ldr	ip, [sp, #72]	; 0x48
   15b10:	mov	r2, r6
   15b14:	mov	r1, fp
   15b18:	str	r0, [r4, #4]
   15b1c:	str	r3, [sp]
   15b20:	str	r5, [sp, #8]
   15b24:	str	r8, [sp, #4]
   15b28:	str	lr, [sp, #16]
   15b2c:	str	ip, [sp, #12]
   15b30:	mvn	r3, #0
   15b34:	mov	r7, r0
   15b38:	bl	130f0 <__assert_fail@plt+0x21b8>
   15b3c:	mov	r0, r7
   15b40:	str	sl, [r9]
   15b44:	add	sp, sp, #84	; 0x54
   15b48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15b4c:	mov	r3, #8
   15b50:	str	r3, [sp]
   15b54:	add	r1, sp, #28
   15b58:	rsb	r2, r2, #1
   15b5c:	mvn	r3, #-2147483648	; 0x80000000
   15b60:	mov	r0, #0
   15b64:	bl	17be8 <__assert_fail@plt+0x6cb0>
   15b68:	mov	r4, r0
   15b6c:	ldm	r8, {r0, r1}
   15b70:	str	r4, [r7]
   15b74:	stm	r4, {r0, r1}
   15b78:	b	15a70 <__assert_fail@plt+0x4b38>
   15b7c:	muleq	r3, ip, r2
   15b80:	strdeq	fp, [r2], -r4
   15b84:	andeq	r3, r3, ip, asr #5
   15b88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15b8c:	mov	r6, r0
   15b90:	ldr	lr, [pc, #404]	; 15d2c <__assert_fail@plt+0x4df4>
   15b94:	sub	sp, sp, #84	; 0x54
   15b98:	add	ip, sp, #32
   15b9c:	ldm	lr!, {r0, r1, r2, r3}
   15ba0:	ldr	r5, [pc, #392]	; 15d30 <__assert_fail@plt+0x4df8>
   15ba4:	stmia	ip!, {r0, r1, r2, r3}
   15ba8:	ldm	lr!, {r0, r1, r2, r3}
   15bac:	ldr	r4, [sp, #44]	; 0x2c
   15bb0:	stmia	ip!, {r0, r1, r2, r3}
   15bb4:	ldm	lr, {r0, r1, r2, r3}
   15bb8:	mvn	lr, r4
   15bbc:	and	lr, lr, #67108864	; 0x4000000
   15bc0:	eor	lr, lr, r4
   15bc4:	stm	ip, {r0, r1, r2, r3}
   15bc8:	str	lr, [sp, #44]	; 0x2c
   15bcc:	bl	10e60 <__errno_location@plt>
   15bd0:	ldr	r2, [r5, #4]
   15bd4:	ldr	r4, [r5]
   15bd8:	cmp	r2, #0
   15bdc:	mov	r8, r0
   15be0:	ldr	sl, [r0]
   15be4:	bgt	15c40 <__assert_fail@plt+0x4d08>
   15be8:	add	r7, r5, #8
   15bec:	cmp	r4, r7
   15bf0:	str	r2, [sp, #28]
   15bf4:	beq	15cfc <__assert_fail@plt+0x4dc4>
   15bf8:	mov	r3, #8
   15bfc:	mov	r0, r4
   15c00:	str	r3, [sp]
   15c04:	rsb	r2, r2, #1
   15c08:	mvn	r3, #-2147483648	; 0x80000000
   15c0c:	add	r1, sp, #28
   15c10:	bl	17be8 <__assert_fail@plt+0x6cb0>
   15c14:	mov	r4, r0
   15c18:	str	r0, [r5]
   15c1c:	ldr	r0, [r5, #4]
   15c20:	ldr	r2, [sp, #28]
   15c24:	mov	r1, #0
   15c28:	sub	r2, r2, r0
   15c2c:	add	r0, r4, r0, lsl #3
   15c30:	lsl	r2, r2, #3
   15c34:	bl	10e78 <memset@plt>
   15c38:	ldr	r3, [sp, #28]
   15c3c:	str	r3, [r5, #4]
   15c40:	ldr	r7, [sp, #36]	; 0x24
   15c44:	ldr	r9, [r4]
   15c48:	ldr	r5, [r4, #4]
   15c4c:	ldr	r2, [sp, #72]	; 0x48
   15c50:	ldr	r3, [sp, #32]
   15c54:	ldr	ip, [sp, #76]	; 0x4c
   15c58:	orr	r7, r7, #1
   15c5c:	add	fp, sp, #40	; 0x28
   15c60:	str	r2, [sp, #12]
   15c64:	str	r3, [sp]
   15c68:	str	r7, [sp, #4]
   15c6c:	mov	r1, r9
   15c70:	mov	r0, r5
   15c74:	str	ip, [sp, #16]
   15c78:	str	fp, [sp, #8]
   15c7c:	mvn	r3, #0
   15c80:	mov	r2, r6
   15c84:	bl	130f0 <__assert_fail@plt+0x21b8>
   15c88:	cmp	r9, r0
   15c8c:	bhi	15cec <__assert_fail@plt+0x4db4>
   15c90:	ldr	r3, [pc, #156]	; 15d34 <__assert_fail@plt+0x4dfc>
   15c94:	add	r9, r0, #1
   15c98:	cmp	r5, r3
   15c9c:	str	r9, [r4]
   15ca0:	beq	15cac <__assert_fail@plt+0x4d74>
   15ca4:	mov	r0, r5
   15ca8:	bl	191c0 <__assert_fail@plt+0x8288>
   15cac:	mov	r0, r9
   15cb0:	bl	179cc <__assert_fail@plt+0x6a94>
   15cb4:	ldr	lr, [sp, #76]	; 0x4c
   15cb8:	ldr	r3, [sp, #32]
   15cbc:	ldr	ip, [sp, #72]	; 0x48
   15cc0:	mov	r2, r6
   15cc4:	mov	r1, r9
   15cc8:	str	r0, [r4, #4]
   15ccc:	str	r3, [sp]
   15cd0:	str	fp, [sp, #8]
   15cd4:	str	r7, [sp, #4]
   15cd8:	str	lr, [sp, #16]
   15cdc:	str	ip, [sp, #12]
   15ce0:	mvn	r3, #0
   15ce4:	mov	r5, r0
   15ce8:	bl	130f0 <__assert_fail@plt+0x21b8>
   15cec:	mov	r0, r5
   15cf0:	str	sl, [r8]
   15cf4:	add	sp, sp, #84	; 0x54
   15cf8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15cfc:	mov	r3, #8
   15d00:	str	r3, [sp]
   15d04:	add	r1, sp, #28
   15d08:	rsb	r2, r2, #1
   15d0c:	mvn	r3, #-2147483648	; 0x80000000
   15d10:	mov	r0, #0
   15d14:	bl	17be8 <__assert_fail@plt+0x6cb0>
   15d18:	mov	r4, r0
   15d1c:	ldm	r7, {r0, r1}
   15d20:	str	r4, [r5]
   15d24:	stm	r4, {r0, r1}
   15d28:	b	15c1c <__assert_fail@plt+0x4ce4>
   15d2c:	muleq	r3, ip, r2
   15d30:	strdeq	fp, [r2], -r4
   15d34:	andeq	r3, r3, ip, asr #5
   15d38:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15d3c:	mov	r9, r0
   15d40:	ldr	lr, [pc, #416]	; 15ee8 <__assert_fail@plt+0x4fb0>
   15d44:	mov	sl, r1
   15d48:	sub	sp, sp, #92	; 0x5c
   15d4c:	ldm	lr!, {r0, r1, r2, r3}
   15d50:	add	ip, sp, #40	; 0x28
   15d54:	ldr	r5, [pc, #400]	; 15eec <__assert_fail@plt+0x4fb4>
   15d58:	stmia	ip!, {r0, r1, r2, r3}
   15d5c:	ldm	lr!, {r0, r1, r2, r3}
   15d60:	ldr	r4, [sp, #52]	; 0x34
   15d64:	stmia	ip!, {r0, r1, r2, r3}
   15d68:	ldm	lr, {r0, r1, r2, r3}
   15d6c:	mvn	lr, r4
   15d70:	and	lr, lr, #67108864	; 0x4000000
   15d74:	eor	lr, lr, r4
   15d78:	stm	ip, {r0, r1, r2, r3}
   15d7c:	str	lr, [sp, #52]	; 0x34
   15d80:	bl	10e60 <__errno_location@plt>
   15d84:	ldr	r2, [r5, #4]
   15d88:	ldr	r4, [r5]
   15d8c:	cmp	r2, #0
   15d90:	ldr	r3, [r0]
   15d94:	mov	r7, r0
   15d98:	str	r3, [sp, #28]
   15d9c:	bgt	15df8 <__assert_fail@plt+0x4ec0>
   15da0:	add	r6, r5, #8
   15da4:	cmp	r4, r6
   15da8:	str	r2, [sp, #36]	; 0x24
   15dac:	beq	15eb8 <__assert_fail@plt+0x4f80>
   15db0:	mov	r3, #8
   15db4:	mov	r0, r4
   15db8:	str	r3, [sp]
   15dbc:	rsb	r2, r2, #1
   15dc0:	mvn	r3, #-2147483648	; 0x80000000
   15dc4:	add	r1, sp, #36	; 0x24
   15dc8:	bl	17be8 <__assert_fail@plt+0x6cb0>
   15dcc:	mov	r4, r0
   15dd0:	str	r0, [r5]
   15dd4:	ldr	r0, [r5, #4]
   15dd8:	ldr	r2, [sp, #36]	; 0x24
   15ddc:	mov	r1, #0
   15de0:	sub	r2, r2, r0
   15de4:	add	r0, r4, r0, lsl #3
   15de8:	lsl	r2, r2, #3
   15dec:	bl	10e78 <memset@plt>
   15df0:	ldr	r3, [sp, #36]	; 0x24
   15df4:	str	r3, [r5, #4]
   15df8:	ldr	r6, [sp, #44]	; 0x2c
   15dfc:	ldr	r8, [r4]
   15e00:	ldr	r5, [r4, #4]
   15e04:	ldr	r2, [sp, #80]	; 0x50
   15e08:	ldr	r3, [sp, #40]	; 0x28
   15e0c:	ldr	ip, [sp, #84]	; 0x54
   15e10:	orr	r6, r6, #1
   15e14:	add	fp, sp, #48	; 0x30
   15e18:	str	r2, [sp, #12]
   15e1c:	str	r3, [sp]
   15e20:	str	r6, [sp, #4]
   15e24:	mov	r1, r8
   15e28:	mov	r0, r5
   15e2c:	str	ip, [sp, #16]
   15e30:	str	fp, [sp, #8]
   15e34:	mov	r3, sl
   15e38:	mov	r2, r9
   15e3c:	bl	130f0 <__assert_fail@plt+0x21b8>
   15e40:	cmp	r8, r0
   15e44:	bhi	15ea4 <__assert_fail@plt+0x4f6c>
   15e48:	ldr	r3, [pc, #160]	; 15ef0 <__assert_fail@plt+0x4fb8>
   15e4c:	add	r8, r0, #1
   15e50:	cmp	r5, r3
   15e54:	str	r8, [r4]
   15e58:	beq	15e64 <__assert_fail@plt+0x4f2c>
   15e5c:	mov	r0, r5
   15e60:	bl	191c0 <__assert_fail@plt+0x8288>
   15e64:	mov	r0, r8
   15e68:	bl	179cc <__assert_fail@plt+0x6a94>
   15e6c:	ldr	ip, [sp, #84]	; 0x54
   15e70:	ldr	lr, [sp, #40]	; 0x28
   15e74:	mov	r3, sl
   15e78:	mov	r2, r9
   15e7c:	mov	r1, r8
   15e80:	str	r0, [r4, #4]
   15e84:	ldr	r4, [sp, #80]	; 0x50
   15e88:	str	fp, [sp, #8]
   15e8c:	str	r6, [sp, #4]
   15e90:	str	ip, [sp, #16]
   15e94:	str	r4, [sp, #12]
   15e98:	str	lr, [sp]
   15e9c:	mov	r5, r0
   15ea0:	bl	130f0 <__assert_fail@plt+0x21b8>
   15ea4:	ldr	r3, [sp, #28]
   15ea8:	mov	r0, r5
   15eac:	str	r3, [r7]
   15eb0:	add	sp, sp, #92	; 0x5c
   15eb4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15eb8:	mov	r3, #8
   15ebc:	str	r3, [sp]
   15ec0:	add	r1, sp, #36	; 0x24
   15ec4:	rsb	r2, r2, #1
   15ec8:	mvn	r3, #-2147483648	; 0x80000000
   15ecc:	mov	r0, #0
   15ed0:	bl	17be8 <__assert_fail@plt+0x6cb0>
   15ed4:	mov	r4, r0
   15ed8:	ldm	r6, {r0, r1}
   15edc:	str	r4, [r5]
   15ee0:	stm	r4, {r0, r1}
   15ee4:	b	15dd4 <__assert_fail@plt+0x4e9c>
   15ee8:	muleq	r3, ip, r2
   15eec:	strdeq	fp, [r2], -r4
   15ef0:	andeq	r3, r3, ip, asr #5
   15ef4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15ef8:	sub	sp, sp, #180	; 0xb4
   15efc:	mov	r6, r1
   15f00:	mov	r4, r0
   15f04:	mov	r9, r2
   15f08:	add	r0, sp, #80	; 0x50
   15f0c:	mov	r2, #48	; 0x30
   15f10:	mov	r1, #0
   15f14:	bl	10e78 <memset@plt>
   15f18:	cmp	r6, #10
   15f1c:	beq	160fc <__assert_fail@plt+0x51c4>
   15f20:	add	r5, sp, #80	; 0x50
   15f24:	str	r6, [sp, #80]	; 0x50
   15f28:	ldm	r5!, {r0, r1, r2, r3}
   15f2c:	add	ip, sp, #128	; 0x80
   15f30:	mov	r7, ip
   15f34:	add	lr, sp, #32
   15f38:	stmia	ip!, {r0, r1, r2, r3}
   15f3c:	mov	r8, #67108864	; 0x4000000
   15f40:	ldm	r5!, {r0, r1, r2, r3}
   15f44:	ldr	r6, [pc, #436]	; 16100 <__assert_fail@plt+0x51c8>
   15f48:	stmia	ip!, {r0, r1, r2, r3}
   15f4c:	ldm	r5, {r0, r1, r2, r3}
   15f50:	stm	ip, {r0, r1, r2, r3}
   15f54:	ldm	r7!, {r0, r1, r2, r3}
   15f58:	stmia	lr!, {r0, r1, r2, r3}
   15f5c:	ldm	r7!, {r0, r1, r2, r3}
   15f60:	str	r8, [sp, #44]	; 0x2c
   15f64:	stmia	lr!, {r0, r1, r2, r3}
   15f68:	ldm	ip, {r0, r1, r2, r3}
   15f6c:	stm	lr, {r0, r1, r2, r3}
   15f70:	bl	10e60 <__errno_location@plt>
   15f74:	cmn	r4, #-2147483647	; 0x80000001
   15f78:	ldr	r5, [r6]
   15f7c:	mov	r7, r0
   15f80:	movne	r0, #0
   15f84:	moveq	r0, #1
   15f88:	ldr	r3, [r7]
   15f8c:	orrs	r0, r0, r4, lsr #31
   15f90:	str	r3, [sp, #24]
   15f94:	bne	160fc <__assert_fail@plt+0x51c4>
   15f98:	ldr	r2, [r6, #4]
   15f9c:	cmp	r4, r2
   15fa0:	blt	16000 <__assert_fail@plt+0x50c8>
   15fa4:	add	r8, r6, #8
   15fa8:	cmp	r5, r8
   15fac:	str	r2, [sp, #80]	; 0x50
   15fb0:	beq	160cc <__assert_fail@plt+0x5194>
   15fb4:	mov	r3, #8
   15fb8:	sub	r2, r4, r2
   15fbc:	mov	r0, r5
   15fc0:	str	r3, [sp]
   15fc4:	add	r2, r2, #1
   15fc8:	add	r1, sp, #80	; 0x50
   15fcc:	mvn	r3, #-2147483648	; 0x80000000
   15fd0:	bl	17be8 <__assert_fail@plt+0x6cb0>
   15fd4:	mov	r5, r0
   15fd8:	str	r0, [r6]
   15fdc:	ldr	r0, [r6, #4]
   15fe0:	ldr	r2, [sp, #80]	; 0x50
   15fe4:	mov	r1, #0
   15fe8:	sub	r2, r2, r0
   15fec:	add	r0, r5, r0, lsl #3
   15ff0:	lsl	r2, r2, #3
   15ff4:	bl	10e78 <memset@plt>
   15ff8:	ldr	r3, [sp, #80]	; 0x50
   15ffc:	str	r3, [r6, #4]
   16000:	add	fp, r5, r4, lsl #3
   16004:	ldr	r1, [sp, #36]	; 0x24
   16008:	ldr	r8, [r5, r4, lsl #3]
   1600c:	ldr	r6, [fp, #4]
   16010:	ldr	r2, [sp, #72]	; 0x48
   16014:	ldr	r3, [sp, #32]
   16018:	ldr	ip, [sp, #76]	; 0x4c
   1601c:	orr	r1, r1, #1
   16020:	add	sl, sp, #40	; 0x28
   16024:	str	r1, [sp, #28]
   16028:	str	r1, [sp, #4]
   1602c:	str	r2, [sp, #12]
   16030:	str	r3, [sp]
   16034:	mov	r0, r6
   16038:	mov	r1, r8
   1603c:	str	ip, [sp, #16]
   16040:	str	sl, [sp, #8]
   16044:	mvn	r3, #0
   16048:	mov	r2, r9
   1604c:	bl	130f0 <__assert_fail@plt+0x21b8>
   16050:	cmp	r8, r0
   16054:	bhi	160b8 <__assert_fail@plt+0x5180>
   16058:	ldr	r3, [pc, #164]	; 16104 <__assert_fail@plt+0x51cc>
   1605c:	add	r8, r0, #1
   16060:	cmp	r6, r3
   16064:	str	r8, [r5, r4, lsl #3]
   16068:	beq	16074 <__assert_fail@plt+0x513c>
   1606c:	mov	r0, r6
   16070:	bl	191c0 <__assert_fail@plt+0x8288>
   16074:	mov	r0, r8
   16078:	bl	179cc <__assert_fail@plt+0x6a94>
   1607c:	ldr	lr, [sp, #76]	; 0x4c
   16080:	ldr	r3, [sp, #32]
   16084:	ldr	ip, [sp, #72]	; 0x48
   16088:	ldr	r4, [sp, #28]
   1608c:	mov	r2, r9
   16090:	mov	r1, r8
   16094:	str	r0, [fp, #4]
   16098:	str	r3, [sp]
   1609c:	str	sl, [sp, #8]
   160a0:	str	r4, [sp, #4]
   160a4:	str	lr, [sp, #16]
   160a8:	str	ip, [sp, #12]
   160ac:	mvn	r3, #0
   160b0:	mov	r6, r0
   160b4:	bl	130f0 <__assert_fail@plt+0x21b8>
   160b8:	ldr	r3, [sp, #24]
   160bc:	mov	r0, r6
   160c0:	str	r3, [r7]
   160c4:	add	sp, sp, #180	; 0xb4
   160c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   160cc:	mov	r3, #8
   160d0:	sub	r2, r4, r2
   160d4:	add	r1, sp, #80	; 0x50
   160d8:	str	r3, [sp]
   160dc:	add	r2, r2, #1
   160e0:	mvn	r3, #-2147483648	; 0x80000000
   160e4:	bl	17be8 <__assert_fail@plt+0x6cb0>
   160e8:	mov	r5, r0
   160ec:	ldm	r8, {r0, r1}
   160f0:	str	r5, [r6]
   160f4:	stm	r5, {r0, r1}
   160f8:	b	15fdc <__assert_fail@plt+0x50a4>
   160fc:	bl	10f2c <abort@plt>
   16100:	strdeq	fp, [r2], -r4
   16104:	andeq	r3, r3, ip, asr #5
   16108:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1610c:	mov	r7, r1
   16110:	ldr	lr, [pc, #492]	; 16304 <__assert_fail@plt+0x53cc>
   16114:	mov	r8, r2
   16118:	mov	r4, r0
   1611c:	mov	fp, r3
   16120:	ldm	lr!, {r0, r1, r2, r3}
   16124:	sub	sp, sp, #100	; 0x64
   16128:	add	ip, sp, #48	; 0x30
   1612c:	mov	sl, #10
   16130:	stmia	ip!, {r0, r1, r2, r3}
   16134:	cmp	r8, #0
   16138:	cmpne	r7, #0
   1613c:	ldm	lr!, {r0, r1, r2, r3}
   16140:	str	sl, [sp, #48]	; 0x30
   16144:	stmia	ip!, {r0, r1, r2, r3}
   16148:	ldm	lr, {r0, r1, r2, r3}
   1614c:	stm	ip, {r0, r1, r2, r3}
   16150:	beq	16300 <__assert_fail@plt+0x53c8>
   16154:	str	r7, [sp, #88]	; 0x58
   16158:	str	r8, [sp, #92]	; 0x5c
   1615c:	bl	10e60 <__errno_location@plt>
   16160:	ldr	r6, [pc, #416]	; 16308 <__assert_fail@plt+0x53d0>
   16164:	cmn	r4, #-2147483647	; 0x80000001
   16168:	ldr	r5, [r6]
   1616c:	mov	r9, r0
   16170:	movne	r0, #0
   16174:	moveq	r0, #1
   16178:	ldr	r3, [r9]
   1617c:	orrs	r0, r0, r4, lsr #31
   16180:	str	r3, [sp, #28]
   16184:	bne	16300 <__assert_fail@plt+0x53c8>
   16188:	ldr	r2, [r6, #4]
   1618c:	cmp	r4, r2
   16190:	movlt	r3, sl
   16194:	blt	16200 <__assert_fail@plt+0x52c8>
   16198:	add	r7, r6, #8
   1619c:	cmp	r5, r7
   161a0:	str	r2, [sp, #44]	; 0x2c
   161a4:	beq	162d0 <__assert_fail@plt+0x5398>
   161a8:	mov	r3, #8
   161ac:	sub	r2, r4, r2
   161b0:	mov	r0, r5
   161b4:	str	r3, [sp]
   161b8:	add	r2, r2, #1
   161bc:	mvn	r3, #-2147483648	; 0x80000000
   161c0:	add	r1, sp, #44	; 0x2c
   161c4:	bl	17be8 <__assert_fail@plt+0x6cb0>
   161c8:	mov	r5, r0
   161cc:	str	r0, [r6]
   161d0:	ldr	r0, [r6, #4]
   161d4:	ldr	r2, [sp, #44]	; 0x2c
   161d8:	mov	r1, #0
   161dc:	sub	r2, r2, r0
   161e0:	add	r0, r5, r0, lsl #3
   161e4:	lsl	r2, r2, #3
   161e8:	bl	10e78 <memset@plt>
   161ec:	ldr	r3, [sp, #48]	; 0x30
   161f0:	ldr	r7, [sp, #88]	; 0x58
   161f4:	ldr	r8, [sp, #92]	; 0x5c
   161f8:	ldr	r2, [sp, #44]	; 0x2c
   161fc:	str	r2, [r6, #4]
   16200:	add	r2, r5, r4, lsl #3
   16204:	mov	r1, r2
   16208:	str	r2, [sp, #32]
   1620c:	ldr	r2, [sp, #52]	; 0x34
   16210:	ldr	r6, [r1, #4]
   16214:	ldr	sl, [r5, r4, lsl #3]
   16218:	orr	r2, r2, #1
   1621c:	str	r3, [sp]
   16220:	add	r3, sp, #56	; 0x38
   16224:	str	r2, [sp, #36]	; 0x24
   16228:	str	r2, [sp, #4]
   1622c:	str	r3, [sp, #8]
   16230:	mov	r0, r6
   16234:	str	r8, [sp, #16]
   16238:	str	r7, [sp, #12]
   1623c:	mov	r1, sl
   16240:	mvn	r3, #0
   16244:	mov	r2, fp
   16248:	bl	130f0 <__assert_fail@plt+0x21b8>
   1624c:	cmp	sl, r0
   16250:	bhi	162bc <__assert_fail@plt+0x5384>
   16254:	ldr	r3, [pc, #176]	; 1630c <__assert_fail@plt+0x53d4>
   16258:	add	r7, r0, #1
   1625c:	cmp	r6, r3
   16260:	str	r7, [r5, r4, lsl #3]
   16264:	beq	16270 <__assert_fail@plt+0x5338>
   16268:	mov	r0, r6
   1626c:	bl	191c0 <__assert_fail@plt+0x8288>
   16270:	mov	r0, r7
   16274:	bl	179cc <__assert_fail@plt+0x6a94>
   16278:	ldr	r3, [sp, #32]
   1627c:	ldr	lr, [sp, #92]	; 0x5c
   16280:	ldr	ip, [sp, #88]	; 0x58
   16284:	ldr	r4, [sp, #36]	; 0x24
   16288:	mov	r2, fp
   1628c:	mov	r1, r7
   16290:	str	r0, [r3, #4]
   16294:	add	r3, sp, #56	; 0x38
   16298:	str	r3, [sp, #8]
   1629c:	ldr	r3, [sp, #48]	; 0x30
   162a0:	str	r4, [sp, #4]
   162a4:	str	r3, [sp]
   162a8:	str	lr, [sp, #16]
   162ac:	str	ip, [sp, #12]
   162b0:	mvn	r3, #0
   162b4:	mov	r6, r0
   162b8:	bl	130f0 <__assert_fail@plt+0x21b8>
   162bc:	ldr	r3, [sp, #28]
   162c0:	mov	r0, r6
   162c4:	str	r3, [r9]
   162c8:	add	sp, sp, #100	; 0x64
   162cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   162d0:	mov	r3, #8
   162d4:	sub	r2, r4, r2
   162d8:	str	r3, [sp]
   162dc:	add	r1, sp, #44	; 0x2c
   162e0:	add	r2, r2, #1
   162e4:	mvn	r3, #-2147483648	; 0x80000000
   162e8:	bl	17be8 <__assert_fail@plt+0x6cb0>
   162ec:	mov	r5, r0
   162f0:	ldm	r7, {r0, r1}
   162f4:	str	r5, [r6]
   162f8:	stm	r5, {r0, r1}
   162fc:	b	161d0 <__assert_fail@plt+0x5298>
   16300:	bl	10f2c <abort@plt>
   16304:	muleq	r3, ip, r2
   16308:	strdeq	fp, [r2], -r4
   1630c:	andeq	r3, r3, ip, asr #5
   16310:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16314:	mov	r7, r1
   16318:	ldr	lr, [pc, #492]	; 1650c <__assert_fail@plt+0x55d4>
   1631c:	mov	r8, r2
   16320:	mov	r4, r0
   16324:	mov	fp, r3
   16328:	ldm	lr!, {r0, r1, r2, r3}
   1632c:	sub	sp, sp, #100	; 0x64
   16330:	add	ip, sp, #48	; 0x30
   16334:	mov	sl, #10
   16338:	stmia	ip!, {r0, r1, r2, r3}
   1633c:	cmp	r8, #0
   16340:	cmpne	r7, #0
   16344:	ldm	lr!, {r0, r1, r2, r3}
   16348:	str	sl, [sp, #48]	; 0x30
   1634c:	stmia	ip!, {r0, r1, r2, r3}
   16350:	ldm	lr, {r0, r1, r2, r3}
   16354:	stm	ip, {r0, r1, r2, r3}
   16358:	beq	16508 <__assert_fail@plt+0x55d0>
   1635c:	str	r7, [sp, #88]	; 0x58
   16360:	str	r8, [sp, #92]	; 0x5c
   16364:	bl	10e60 <__errno_location@plt>
   16368:	ldr	r6, [pc, #416]	; 16510 <__assert_fail@plt+0x55d8>
   1636c:	cmn	r4, #-2147483647	; 0x80000001
   16370:	ldr	r5, [r6]
   16374:	mov	r9, r0
   16378:	movne	r0, #0
   1637c:	moveq	r0, #1
   16380:	ldr	r3, [r9]
   16384:	orrs	r0, r0, r4, lsr #31
   16388:	str	r3, [sp, #28]
   1638c:	bne	16508 <__assert_fail@plt+0x55d0>
   16390:	ldr	r2, [r6, #4]
   16394:	cmp	r4, r2
   16398:	movlt	r3, sl
   1639c:	blt	16408 <__assert_fail@plt+0x54d0>
   163a0:	add	r7, r6, #8
   163a4:	cmp	r5, r7
   163a8:	str	r2, [sp, #44]	; 0x2c
   163ac:	beq	164d8 <__assert_fail@plt+0x55a0>
   163b0:	mov	r3, #8
   163b4:	sub	r2, r4, r2
   163b8:	mov	r0, r5
   163bc:	str	r3, [sp]
   163c0:	add	r2, r2, #1
   163c4:	mvn	r3, #-2147483648	; 0x80000000
   163c8:	add	r1, sp, #44	; 0x2c
   163cc:	bl	17be8 <__assert_fail@plt+0x6cb0>
   163d0:	mov	r5, r0
   163d4:	str	r0, [r6]
   163d8:	ldr	r0, [r6, #4]
   163dc:	ldr	r2, [sp, #44]	; 0x2c
   163e0:	mov	r1, #0
   163e4:	sub	r2, r2, r0
   163e8:	add	r0, r5, r0, lsl #3
   163ec:	lsl	r2, r2, #3
   163f0:	bl	10e78 <memset@plt>
   163f4:	ldr	r3, [sp, #48]	; 0x30
   163f8:	ldr	r7, [sp, #88]	; 0x58
   163fc:	ldr	r8, [sp, #92]	; 0x5c
   16400:	ldr	r2, [sp, #44]	; 0x2c
   16404:	str	r2, [r6, #4]
   16408:	add	r2, r5, r4, lsl #3
   1640c:	mov	r1, r2
   16410:	str	r2, [sp, #32]
   16414:	ldr	r2, [sp, #52]	; 0x34
   16418:	ldr	r6, [r1, #4]
   1641c:	ldr	sl, [r5, r4, lsl #3]
   16420:	orr	r2, r2, #1
   16424:	str	r3, [sp]
   16428:	add	r3, sp, #56	; 0x38
   1642c:	str	r2, [sp, #36]	; 0x24
   16430:	str	r2, [sp, #4]
   16434:	str	r3, [sp, #8]
   16438:	mov	r0, r6
   1643c:	str	r8, [sp, #16]
   16440:	str	r7, [sp, #12]
   16444:	mov	r1, sl
   16448:	ldr	r3, [sp, #136]	; 0x88
   1644c:	mov	r2, fp
   16450:	bl	130f0 <__assert_fail@plt+0x21b8>
   16454:	cmp	sl, r0
   16458:	bhi	164c4 <__assert_fail@plt+0x558c>
   1645c:	ldr	r3, [pc, #176]	; 16514 <__assert_fail@plt+0x55dc>
   16460:	add	r7, r0, #1
   16464:	cmp	r6, r3
   16468:	str	r7, [r5, r4, lsl #3]
   1646c:	beq	16478 <__assert_fail@plt+0x5540>
   16470:	mov	r0, r6
   16474:	bl	191c0 <__assert_fail@plt+0x8288>
   16478:	mov	r0, r7
   1647c:	bl	179cc <__assert_fail@plt+0x6a94>
   16480:	ldr	r3, [sp, #32]
   16484:	ldr	lr, [sp, #92]	; 0x5c
   16488:	ldr	ip, [sp, #88]	; 0x58
   1648c:	ldr	r4, [sp, #36]	; 0x24
   16490:	mov	r2, fp
   16494:	mov	r1, r7
   16498:	str	r0, [r3, #4]
   1649c:	add	r3, sp, #56	; 0x38
   164a0:	str	r3, [sp, #8]
   164a4:	ldr	r3, [sp, #48]	; 0x30
   164a8:	str	r4, [sp, #4]
   164ac:	str	r3, [sp]
   164b0:	str	lr, [sp, #16]
   164b4:	str	ip, [sp, #12]
   164b8:	ldr	r3, [sp, #136]	; 0x88
   164bc:	mov	r6, r0
   164c0:	bl	130f0 <__assert_fail@plt+0x21b8>
   164c4:	ldr	r3, [sp, #28]
   164c8:	mov	r0, r6
   164cc:	str	r3, [r9]
   164d0:	add	sp, sp, #100	; 0x64
   164d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   164d8:	mov	r3, #8
   164dc:	sub	r2, r4, r2
   164e0:	str	r3, [sp]
   164e4:	add	r1, sp, #44	; 0x2c
   164e8:	add	r2, r2, #1
   164ec:	mvn	r3, #-2147483648	; 0x80000000
   164f0:	bl	17be8 <__assert_fail@plt+0x6cb0>
   164f4:	mov	r5, r0
   164f8:	ldm	r7, {r0, r1}
   164fc:	str	r5, [r6]
   16500:	stm	r5, {r0, r1}
   16504:	b	163d8 <__assert_fail@plt+0x54a0>
   16508:	bl	10f2c <abort@plt>
   1650c:	muleq	r3, ip, r2
   16510:	strdeq	fp, [r2], -r4
   16514:	andeq	r3, r3, ip, asr #5
   16518:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1651c:	mov	r5, r0
   16520:	ldr	lr, [pc, #452]	; 166ec <__assert_fail@plt+0x57b4>
   16524:	mov	r6, r1
   16528:	mov	sl, r2
   1652c:	ldm	lr!, {r0, r1, r2, r3}
   16530:	sub	sp, sp, #92	; 0x5c
   16534:	add	ip, sp, #40	; 0x28
   16538:	cmp	r6, #0
   1653c:	cmpne	r5, #0
   16540:	stmia	ip!, {r0, r1, r2, r3}
   16544:	mov	r9, #10
   16548:	ldm	lr!, {r0, r1, r2, r3}
   1654c:	moveq	fp, #1
   16550:	movne	fp, #0
   16554:	str	r9, [sp, #40]	; 0x28
   16558:	stmia	ip!, {r0, r1, r2, r3}
   1655c:	ldm	lr, {r0, r1, r2, r3}
   16560:	stm	ip, {r0, r1, r2, r3}
   16564:	beq	166e8 <__assert_fail@plt+0x57b0>
   16568:	str	r5, [sp, #80]	; 0x50
   1656c:	str	r6, [sp, #84]	; 0x54
   16570:	bl	10e60 <__errno_location@plt>
   16574:	ldr	r7, [pc, #372]	; 166f0 <__assert_fail@plt+0x57b8>
   16578:	ldr	r2, [r7, #4]
   1657c:	ldr	r4, [r7]
   16580:	cmp	r2, #0
   16584:	ldr	r3, [r0]
   16588:	mov	r8, r0
   1658c:	str	r3, [sp, #24]
   16590:	movgt	r3, r9
   16594:	bgt	165fc <__assert_fail@plt+0x56c4>
   16598:	add	r5, r7, #8
   1659c:	cmp	r4, r5
   165a0:	str	r2, [sp, #36]	; 0x24
   165a4:	beq	166b8 <__assert_fail@plt+0x5780>
   165a8:	mov	r3, #8
   165ac:	mov	r0, r4
   165b0:	str	r3, [sp]
   165b4:	rsb	r2, r2, #1
   165b8:	mvn	r3, #-2147483648	; 0x80000000
   165bc:	add	r1, sp, #36	; 0x24
   165c0:	bl	17be8 <__assert_fail@plt+0x6cb0>
   165c4:	mov	r4, r0
   165c8:	str	r0, [r7]
   165cc:	ldr	r0, [r7, #4]
   165d0:	ldr	r2, [sp, #36]	; 0x24
   165d4:	mov	r1, #0
   165d8:	sub	r2, r2, r0
   165dc:	add	r0, r4, r0, lsl #3
   165e0:	lsl	r2, r2, #3
   165e4:	bl	10e78 <memset@plt>
   165e8:	ldr	r3, [sp, #40]	; 0x28
   165ec:	ldr	r5, [sp, #80]	; 0x50
   165f0:	ldr	r6, [sp, #84]	; 0x54
   165f4:	ldr	r2, [sp, #36]	; 0x24
   165f8:	str	r2, [r7, #4]
   165fc:	ldr	r2, [sp, #44]	; 0x2c
   16600:	ldr	r9, [r4]
   16604:	ldr	r7, [r4, #4]
   16608:	orr	r2, r2, #1
   1660c:	add	fp, sp, #48	; 0x30
   16610:	str	r2, [sp, #28]
   16614:	str	r2, [sp, #4]
   16618:	str	r3, [sp]
   1661c:	str	r6, [sp, #16]
   16620:	str	r5, [sp, #12]
   16624:	mov	r1, r9
   16628:	mov	r0, r7
   1662c:	str	fp, [sp, #8]
   16630:	mvn	r3, #0
   16634:	mov	r2, sl
   16638:	bl	130f0 <__assert_fail@plt+0x21b8>
   1663c:	cmp	r9, r0
   16640:	bhi	166a4 <__assert_fail@plt+0x576c>
   16644:	ldr	r3, [pc, #168]	; 166f4 <__assert_fail@plt+0x57bc>
   16648:	add	r5, r0, #1
   1664c:	cmp	r7, r3
   16650:	str	r5, [r4]
   16654:	beq	16660 <__assert_fail@plt+0x5728>
   16658:	mov	r0, r7
   1665c:	bl	191c0 <__assert_fail@plt+0x8288>
   16660:	mov	r0, r5
   16664:	bl	179cc <__assert_fail@plt+0x6a94>
   16668:	ldr	lr, [sp, #84]	; 0x54
   1666c:	ldr	r3, [sp, #40]	; 0x28
   16670:	ldr	ip, [sp, #80]	; 0x50
   16674:	mov	r2, sl
   16678:	mov	r1, r5
   1667c:	str	r0, [r4, #4]
   16680:	ldr	r4, [sp, #28]
   16684:	str	r3, [sp]
   16688:	str	fp, [sp, #8]
   1668c:	str	r4, [sp, #4]
   16690:	str	lr, [sp, #16]
   16694:	str	ip, [sp, #12]
   16698:	mvn	r3, #0
   1669c:	mov	r7, r0
   166a0:	bl	130f0 <__assert_fail@plt+0x21b8>
   166a4:	ldr	r3, [sp, #24]
   166a8:	mov	r0, r7
   166ac:	str	r3, [r8]
   166b0:	add	sp, sp, #92	; 0x5c
   166b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   166b8:	mov	r3, #8
   166bc:	str	r3, [sp]
   166c0:	add	r1, sp, #36	; 0x24
   166c4:	rsb	r2, r2, #1
   166c8:	mov	r0, fp
   166cc:	mvn	r3, #-2147483648	; 0x80000000
   166d0:	bl	17be8 <__assert_fail@plt+0x6cb0>
   166d4:	mov	r4, r0
   166d8:	ldm	r5, {r0, r1}
   166dc:	str	r4, [r7]
   166e0:	stm	r4, {r0, r1}
   166e4:	b	165cc <__assert_fail@plt+0x5694>
   166e8:	bl	10f2c <abort@plt>
   166ec:	muleq	r3, ip, r2
   166f0:	strdeq	fp, [r2], -r4
   166f4:	andeq	r3, r3, ip, asr #5
   166f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   166fc:	mov	r5, r0
   16700:	ldr	lr, [pc, #464]	; 168d8 <__assert_fail@plt+0x59a0>
   16704:	mov	r6, r1
   16708:	mov	sl, r2
   1670c:	mov	fp, r3
   16710:	ldm	lr!, {r0, r1, r2, r3}
   16714:	sub	sp, sp, #92	; 0x5c
   16718:	add	ip, sp, #40	; 0x28
   1671c:	cmp	r6, #0
   16720:	cmpne	r5, #0
   16724:	stmia	ip!, {r0, r1, r2, r3}
   16728:	moveq	r4, #1
   1672c:	ldm	lr!, {r0, r1, r2, r3}
   16730:	movne	r4, #0
   16734:	mov	r9, #10
   16738:	str	r4, [sp, #28]
   1673c:	stmia	ip!, {r0, r1, r2, r3}
   16740:	ldm	lr, {r0, r1, r2, r3}
   16744:	str	r9, [sp, #40]	; 0x28
   16748:	stm	ip, {r0, r1, r2, r3}
   1674c:	beq	168d4 <__assert_fail@plt+0x599c>
   16750:	str	r5, [sp, #80]	; 0x50
   16754:	str	r6, [sp, #84]	; 0x54
   16758:	bl	10e60 <__errno_location@plt>
   1675c:	ldr	r7, [pc, #376]	; 168dc <__assert_fail@plt+0x59a4>
   16760:	ldr	r2, [r7, #4]
   16764:	ldr	r4, [r7]
   16768:	cmp	r2, #0
   1676c:	ldr	r3, [r0]
   16770:	mov	r8, r0
   16774:	str	r3, [sp, #24]
   16778:	movgt	r3, r9
   1677c:	bgt	167e4 <__assert_fail@plt+0x58ac>
   16780:	add	r5, r7, #8
   16784:	cmp	r4, r5
   16788:	str	r2, [sp, #36]	; 0x24
   1678c:	beq	168a4 <__assert_fail@plt+0x596c>
   16790:	mov	r3, #8
   16794:	mov	r0, r4
   16798:	str	r3, [sp]
   1679c:	rsb	r2, r2, #1
   167a0:	mvn	r3, #-2147483648	; 0x80000000
   167a4:	add	r1, sp, #36	; 0x24
   167a8:	bl	17be8 <__assert_fail@plt+0x6cb0>
   167ac:	mov	r4, r0
   167b0:	str	r0, [r7]
   167b4:	ldr	r0, [r7, #4]
   167b8:	ldr	r2, [sp, #36]	; 0x24
   167bc:	mov	r1, #0
   167c0:	sub	r2, r2, r0
   167c4:	add	r0, r4, r0, lsl #3
   167c8:	lsl	r2, r2, #3
   167cc:	bl	10e78 <memset@plt>
   167d0:	ldr	r3, [sp, #40]	; 0x28
   167d4:	ldr	r5, [sp, #80]	; 0x50
   167d8:	ldr	r6, [sp, #84]	; 0x54
   167dc:	ldr	r2, [sp, #36]	; 0x24
   167e0:	str	r2, [r7, #4]
   167e4:	ldr	r2, [sp, #44]	; 0x2c
   167e8:	ldr	r9, [r4]
   167ec:	ldr	r7, [r4, #4]
   167f0:	orr	r2, r2, #1
   167f4:	str	r3, [sp]
   167f8:	add	r3, sp, #48	; 0x30
   167fc:	str	r2, [sp, #28]
   16800:	str	r2, [sp, #4]
   16804:	str	r3, [sp, #8]
   16808:	str	r6, [sp, #16]
   1680c:	str	r5, [sp, #12]
   16810:	mov	r1, r9
   16814:	mov	r0, r7
   16818:	mov	r3, fp
   1681c:	mov	r2, sl
   16820:	bl	130f0 <__assert_fail@plt+0x21b8>
   16824:	cmp	r9, r0
   16828:	bhi	16890 <__assert_fail@plt+0x5958>
   1682c:	ldr	r3, [pc, #172]	; 168e0 <__assert_fail@plt+0x59a8>
   16830:	add	r5, r0, #1
   16834:	cmp	r7, r3
   16838:	str	r5, [r4]
   1683c:	beq	16848 <__assert_fail@plt+0x5910>
   16840:	mov	r0, r7
   16844:	bl	191c0 <__assert_fail@plt+0x8288>
   16848:	mov	r0, r5
   1684c:	bl	179cc <__assert_fail@plt+0x6a94>
   16850:	add	lr, sp, #48	; 0x30
   16854:	ldr	ip, [sp, #84]	; 0x54
   16858:	mov	r1, r5
   1685c:	ldr	r5, [sp, #28]
   16860:	mov	r3, fp
   16864:	mov	r2, sl
   16868:	str	r0, [r4, #4]
   1686c:	ldr	r4, [sp, #80]	; 0x50
   16870:	str	lr, [sp, #8]
   16874:	ldr	lr, [sp, #40]	; 0x28
   16878:	str	r5, [sp, #4]
   1687c:	str	ip, [sp, #16]
   16880:	str	r4, [sp, #12]
   16884:	str	lr, [sp]
   16888:	mov	r7, r0
   1688c:	bl	130f0 <__assert_fail@plt+0x21b8>
   16890:	ldr	r3, [sp, #24]
   16894:	mov	r0, r7
   16898:	str	r3, [r8]
   1689c:	add	sp, sp, #92	; 0x5c
   168a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   168a4:	mov	r3, #8
   168a8:	str	r3, [sp]
   168ac:	add	r1, sp, #36	; 0x24
   168b0:	rsb	r2, r2, #1
   168b4:	ldr	r0, [sp, #28]
   168b8:	mvn	r3, #-2147483648	; 0x80000000
   168bc:	bl	17be8 <__assert_fail@plt+0x6cb0>
   168c0:	mov	r4, r0
   168c4:	ldm	r5, {r0, r1}
   168c8:	str	r4, [r7]
   168cc:	stm	r4, {r0, r1}
   168d0:	b	167b4 <__assert_fail@plt+0x587c>
   168d4:	bl	10f2c <abort@plt>
   168d8:	muleq	r3, ip, r2
   168dc:	strdeq	fp, [r2], -r4
   168e0:	andeq	r3, r3, ip, asr #5
   168e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   168e8:	sub	sp, sp, #52	; 0x34
   168ec:	mov	r5, r0
   168f0:	mov	sl, r1
   168f4:	mov	fp, r2
   168f8:	bl	10e60 <__errno_location@plt>
   168fc:	ldr	r4, [pc, #404]	; 16a98 <__assert_fail@plt+0x5b60>
   16900:	cmn	r5, #-2147483647	; 0x80000001
   16904:	ldr	r6, [r4]
   16908:	mov	r8, r0
   1690c:	movne	r0, #0
   16910:	moveq	r0, #1
   16914:	ldr	r3, [r8]
   16918:	orrs	r0, r0, r5, lsr #31
   1691c:	str	r3, [sp, #28]
   16920:	bne	16a94 <__assert_fail@plt+0x5b5c>
   16924:	ldr	r2, [r4, #4]
   16928:	cmp	r5, r2
   1692c:	blt	1698c <__assert_fail@plt+0x5a54>
   16930:	add	r7, r4, #8
   16934:	cmp	r6, r7
   16938:	str	r2, [sp, #44]	; 0x2c
   1693c:	beq	16a64 <__assert_fail@plt+0x5b2c>
   16940:	mov	r3, #8
   16944:	sub	r2, r5, r2
   16948:	mov	r0, r6
   1694c:	str	r3, [sp]
   16950:	add	r2, r2, #1
   16954:	mvn	r3, #-2147483648	; 0x80000000
   16958:	add	r1, sp, #44	; 0x2c
   1695c:	bl	17be8 <__assert_fail@plt+0x6cb0>
   16960:	mov	r6, r0
   16964:	str	r0, [r4]
   16968:	ldr	r0, [r4, #4]
   1696c:	ldr	r2, [sp, #44]	; 0x2c
   16970:	mov	r1, #0
   16974:	sub	r2, r2, r0
   16978:	add	r0, r6, r0, lsl #3
   1697c:	lsl	r2, r2, #3
   16980:	bl	10e78 <memset@plt>
   16984:	ldr	r3, [sp, #44]	; 0x2c
   16988:	str	r3, [r4, #4]
   1698c:	ldr	r2, [r4, #56]	; 0x38
   16990:	add	r3, r6, r5, lsl #3
   16994:	ldr	r1, [r4, #20]
   16998:	ldr	r7, [r3, #4]
   1699c:	ldr	r9, [r6, r5, lsl #3]
   169a0:	ldr	ip, [r4, #60]	; 0x3c
   169a4:	str	r3, [sp, #32]
   169a8:	ldr	r3, [r4, #16]
   169ac:	str	r2, [sp, #12]
   169b0:	ldr	r2, [pc, #228]	; 16a9c <__assert_fail@plt+0x5b64>
   169b4:	orr	r1, r1, #1
   169b8:	str	r1, [sp, #36]	; 0x24
   169bc:	str	r1, [sp, #4]
   169c0:	str	r2, [sp, #8]
   169c4:	str	r3, [sp]
   169c8:	mov	r0, r7
   169cc:	mov	r1, r9
   169d0:	str	ip, [sp, #16]
   169d4:	mov	r3, fp
   169d8:	mov	r2, sl
   169dc:	bl	130f0 <__assert_fail@plt+0x21b8>
   169e0:	cmp	r9, r0
   169e4:	bhi	16a50 <__assert_fail@plt+0x5b18>
   169e8:	ldr	r3, [pc, #176]	; 16aa0 <__assert_fail@plt+0x5b68>
   169ec:	add	r9, r0, #1
   169f0:	cmp	r7, r3
   169f4:	str	r9, [r6, r5, lsl #3]
   169f8:	beq	16a04 <__assert_fail@plt+0x5acc>
   169fc:	mov	r0, r7
   16a00:	bl	191c0 <__assert_fail@plt+0x8288>
   16a04:	mov	r0, r9
   16a08:	bl	179cc <__assert_fail@plt+0x6a94>
   16a0c:	ldr	ip, [sp, #32]
   16a10:	ldr	lr, [r4, #60]	; 0x3c
   16a14:	ldr	r5, [r4, #56]	; 0x38
   16a18:	mov	r3, fp
   16a1c:	mov	r2, sl
   16a20:	mov	r1, r9
   16a24:	str	r0, [ip, #4]
   16a28:	ldr	ip, [r4, #16]
   16a2c:	ldr	r4, [pc, #104]	; 16a9c <__assert_fail@plt+0x5b64>
   16a30:	str	lr, [sp, #16]
   16a34:	str	r4, [sp, #8]
   16a38:	ldr	r4, [sp, #36]	; 0x24
   16a3c:	str	r5, [sp, #12]
   16a40:	str	r4, [sp, #4]
   16a44:	str	ip, [sp]
   16a48:	mov	r7, r0
   16a4c:	bl	130f0 <__assert_fail@plt+0x21b8>
   16a50:	ldr	r3, [sp, #28]
   16a54:	mov	r0, r7
   16a58:	str	r3, [r8]
   16a5c:	add	sp, sp, #52	; 0x34
   16a60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16a64:	mov	r3, #8
   16a68:	sub	r2, r5, r2
   16a6c:	str	r3, [sp]
   16a70:	add	r1, sp, #44	; 0x2c
   16a74:	add	r2, r2, #1
   16a78:	mvn	r3, #-2147483648	; 0x80000000
   16a7c:	bl	17be8 <__assert_fail@plt+0x6cb0>
   16a80:	mov	r6, r0
   16a84:	ldm	r7, {r0, r1}
   16a88:	str	r6, [r4]
   16a8c:	stm	r6, {r0, r1}
   16a90:	b	16968 <__assert_fail@plt+0x5a30>
   16a94:	bl	10f2c <abort@plt>
   16a98:	strdeq	fp, [r2], -r4
   16a9c:	andeq	fp, r2, ip, lsl #2
   16aa0:	andeq	r3, r3, ip, asr #5
   16aa4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16aa8:	sub	sp, sp, #44	; 0x2c
   16aac:	mov	r9, r0
   16ab0:	mov	sl, r1
   16ab4:	bl	10e60 <__errno_location@plt>
   16ab8:	ldr	r4, [pc, #360]	; 16c28 <__assert_fail@plt+0x5cf0>
   16abc:	ldr	r2, [r4, #4]
   16ac0:	ldr	r5, [r4]
   16ac4:	cmp	r2, #0
   16ac8:	ldr	r3, [r0]
   16acc:	mov	r7, r0
   16ad0:	str	r3, [sp, #24]
   16ad4:	bgt	16b30 <__assert_fail@plt+0x5bf8>
   16ad8:	add	r6, r4, #8
   16adc:	cmp	r5, r6
   16ae0:	str	r2, [sp, #36]	; 0x24
   16ae4:	beq	16bf8 <__assert_fail@plt+0x5cc0>
   16ae8:	mov	r3, #8
   16aec:	mov	r0, r5
   16af0:	str	r3, [sp]
   16af4:	rsb	r2, r2, #1
   16af8:	mvn	r3, #-2147483648	; 0x80000000
   16afc:	add	r1, sp, #36	; 0x24
   16b00:	bl	17be8 <__assert_fail@plt+0x6cb0>
   16b04:	mov	r5, r0
   16b08:	str	r0, [r4]
   16b0c:	ldr	r0, [r4, #4]
   16b10:	ldr	r2, [sp, #36]	; 0x24
   16b14:	mov	r1, #0
   16b18:	sub	r2, r2, r0
   16b1c:	add	r0, r5, r0, lsl #3
   16b20:	lsl	r2, r2, #3
   16b24:	bl	10e78 <memset@plt>
   16b28:	ldr	r3, [sp, #36]	; 0x24
   16b2c:	str	r3, [r4, #4]
   16b30:	ldr	r1, [r4, #20]
   16b34:	ldr	r8, [r5]
   16b38:	ldr	r6, [r5, #4]
   16b3c:	ldr	r2, [r4, #56]	; 0x38
   16b40:	ldr	r3, [r4, #16]
   16b44:	ldr	ip, [r4, #60]	; 0x3c
   16b48:	ldr	fp, [pc, #220]	; 16c2c <__assert_fail@plt+0x5cf4>
   16b4c:	orr	r1, r1, #1
   16b50:	str	r1, [sp, #28]
   16b54:	str	r1, [sp, #4]
   16b58:	str	r2, [sp, #12]
   16b5c:	str	r3, [sp]
   16b60:	mov	r1, r8
   16b64:	mov	r0, r6
   16b68:	str	ip, [sp, #16]
   16b6c:	str	fp, [sp, #8]
   16b70:	mov	r3, sl
   16b74:	mov	r2, r9
   16b78:	bl	130f0 <__assert_fail@plt+0x21b8>
   16b7c:	cmp	r8, r0
   16b80:	bhi	16be4 <__assert_fail@plt+0x5cac>
   16b84:	ldr	r3, [pc, #164]	; 16c30 <__assert_fail@plt+0x5cf8>
   16b88:	add	r8, r0, #1
   16b8c:	cmp	r6, r3
   16b90:	str	r8, [r5]
   16b94:	beq	16ba0 <__assert_fail@plt+0x5c68>
   16b98:	mov	r0, r6
   16b9c:	bl	191c0 <__assert_fail@plt+0x8288>
   16ba0:	mov	r0, r8
   16ba4:	bl	179cc <__assert_fail@plt+0x6a94>
   16ba8:	ldr	lr, [r4, #60]	; 0x3c
   16bac:	ldr	ip, [r4, #16]
   16bb0:	mov	r3, sl
   16bb4:	mov	r2, r9
   16bb8:	mov	r1, r8
   16bbc:	str	r0, [r5, #4]
   16bc0:	ldr	r5, [r4, #56]	; 0x38
   16bc4:	ldr	r4, [sp, #28]
   16bc8:	str	fp, [sp, #8]
   16bcc:	str	r4, [sp, #4]
   16bd0:	str	lr, [sp, #16]
   16bd4:	str	r5, [sp, #12]
   16bd8:	str	ip, [sp]
   16bdc:	mov	r6, r0
   16be0:	bl	130f0 <__assert_fail@plt+0x21b8>
   16be4:	ldr	r3, [sp, #24]
   16be8:	mov	r0, r6
   16bec:	str	r3, [r7]
   16bf0:	add	sp, sp, #44	; 0x2c
   16bf4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16bf8:	mov	r3, #8
   16bfc:	str	r3, [sp]
   16c00:	add	r1, sp, #36	; 0x24
   16c04:	rsb	r2, r2, #1
   16c08:	mvn	r3, #-2147483648	; 0x80000000
   16c0c:	mov	r0, #0
   16c10:	bl	17be8 <__assert_fail@plt+0x6cb0>
   16c14:	mov	r5, r0
   16c18:	ldm	r6, {r0, r1}
   16c1c:	str	r5, [r4]
   16c20:	stm	r5, {r0, r1}
   16c24:	b	16b0c <__assert_fail@plt+0x5bd4>
   16c28:	strdeq	fp, [r2], -r4
   16c2c:	andeq	fp, r2, ip, lsl #2
   16c30:	andeq	r3, r3, ip, asr #5
   16c34:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16c38:	sub	sp, sp, #44	; 0x2c
   16c3c:	mov	r5, r0
   16c40:	mov	sl, r1
   16c44:	bl	10e60 <__errno_location@plt>
   16c48:	ldr	r4, [pc, #396]	; 16ddc <__assert_fail@plt+0x5ea4>
   16c4c:	cmn	r5, #-2147483647	; 0x80000001
   16c50:	ldr	r6, [r4]
   16c54:	mov	r8, r0
   16c58:	movne	r0, #0
   16c5c:	moveq	r0, #1
   16c60:	ldr	r3, [r8]
   16c64:	orrs	r0, r0, r5, lsr #31
   16c68:	str	r3, [sp, #24]
   16c6c:	bne	16dd8 <__assert_fail@plt+0x5ea0>
   16c70:	ldr	r2, [r4, #4]
   16c74:	cmp	r5, r2
   16c78:	blt	16cd8 <__assert_fail@plt+0x5da0>
   16c7c:	add	r7, r4, #8
   16c80:	cmp	r6, r7
   16c84:	str	r2, [sp, #36]	; 0x24
   16c88:	beq	16da8 <__assert_fail@plt+0x5e70>
   16c8c:	mov	r3, #8
   16c90:	sub	r2, r5, r2
   16c94:	mov	r0, r6
   16c98:	str	r3, [sp]
   16c9c:	add	r2, r2, #1
   16ca0:	mvn	r3, #-2147483648	; 0x80000000
   16ca4:	add	r1, sp, #36	; 0x24
   16ca8:	bl	17be8 <__assert_fail@plt+0x6cb0>
   16cac:	mov	r6, r0
   16cb0:	str	r0, [r4]
   16cb4:	ldr	r0, [r4, #4]
   16cb8:	ldr	r2, [sp, #36]	; 0x24
   16cbc:	mov	r1, #0
   16cc0:	sub	r2, r2, r0
   16cc4:	add	r0, r6, r0, lsl #3
   16cc8:	lsl	r2, r2, #3
   16ccc:	bl	10e78 <memset@plt>
   16cd0:	ldr	r3, [sp, #36]	; 0x24
   16cd4:	str	r3, [r4, #4]
   16cd8:	ldr	r2, [r4, #56]	; 0x38
   16cdc:	add	fp, r6, r5, lsl #3
   16ce0:	ldr	r1, [r4, #20]
   16ce4:	ldr	r9, [r6, r5, lsl #3]
   16ce8:	ldr	r7, [fp, #4]
   16cec:	ldr	r3, [r4, #16]
   16cf0:	ldr	ip, [r4, #60]	; 0x3c
   16cf4:	str	r2, [sp, #12]
   16cf8:	ldr	r2, [pc, #224]	; 16de0 <__assert_fail@plt+0x5ea8>
   16cfc:	orr	r1, r1, #1
   16d00:	str	r1, [sp, #28]
   16d04:	str	r1, [sp, #4]
   16d08:	str	r2, [sp, #8]
   16d0c:	str	r3, [sp]
   16d10:	mov	r0, r7
   16d14:	mov	r1, r9
   16d18:	str	ip, [sp, #16]
   16d1c:	mvn	r3, #0
   16d20:	mov	r2, sl
   16d24:	bl	130f0 <__assert_fail@plt+0x21b8>
   16d28:	cmp	r9, r0
   16d2c:	bhi	16d94 <__assert_fail@plt+0x5e5c>
   16d30:	ldr	r3, [pc, #172]	; 16de4 <__assert_fail@plt+0x5eac>
   16d34:	add	r9, r0, #1
   16d38:	cmp	r7, r3
   16d3c:	str	r9, [r6, r5, lsl #3]
   16d40:	beq	16d4c <__assert_fail@plt+0x5e14>
   16d44:	mov	r0, r7
   16d48:	bl	191c0 <__assert_fail@plt+0x8288>
   16d4c:	mov	r0, r9
   16d50:	bl	179cc <__assert_fail@plt+0x6a94>
   16d54:	ldr	ip, [r4, #60]	; 0x3c
   16d58:	ldr	r3, [r4, #16]
   16d5c:	ldr	lr, [r4, #56]	; 0x38
   16d60:	ldr	r4, [pc, #120]	; 16de0 <__assert_fail@plt+0x5ea8>
   16d64:	mov	r2, sl
   16d68:	mov	r1, r9
   16d6c:	str	r0, [fp, #4]
   16d70:	str	r4, [sp, #8]
   16d74:	ldr	r4, [sp, #28]
   16d78:	str	r3, [sp]
   16d7c:	str	r4, [sp, #4]
   16d80:	str	ip, [sp, #16]
   16d84:	str	lr, [sp, #12]
   16d88:	mvn	r3, #0
   16d8c:	mov	r7, r0
   16d90:	bl	130f0 <__assert_fail@plt+0x21b8>
   16d94:	ldr	r3, [sp, #24]
   16d98:	mov	r0, r7
   16d9c:	str	r3, [r8]
   16da0:	add	sp, sp, #44	; 0x2c
   16da4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16da8:	mov	r3, #8
   16dac:	sub	r2, r5, r2
   16db0:	str	r3, [sp]
   16db4:	add	r1, sp, #36	; 0x24
   16db8:	add	r2, r2, #1
   16dbc:	mvn	r3, #-2147483648	; 0x80000000
   16dc0:	bl	17be8 <__assert_fail@plt+0x6cb0>
   16dc4:	mov	r6, r0
   16dc8:	ldm	r7, {r0, r1}
   16dcc:	str	r6, [r4]
   16dd0:	stm	r6, {r0, r1}
   16dd4:	b	16cb4 <__assert_fail@plt+0x5d7c>
   16dd8:	bl	10f2c <abort@plt>
   16ddc:	strdeq	fp, [r2], -r4
   16de0:	andeq	fp, r2, ip, lsl #2
   16de4:	andeq	r3, r3, ip, asr #5
   16de8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16dec:	sub	sp, sp, #44	; 0x2c
   16df0:	mov	sl, r0
   16df4:	bl	10e60 <__errno_location@plt>
   16df8:	ldr	r4, [pc, #348]	; 16f5c <__assert_fail@plt+0x6024>
   16dfc:	ldr	r2, [r4, #4]
   16e00:	ldr	r5, [r4]
   16e04:	cmp	r2, #0
   16e08:	ldr	r3, [r0]
   16e0c:	mov	r8, r0
   16e10:	str	r3, [sp, #28]
   16e14:	bgt	16e70 <__assert_fail@plt+0x5f38>
   16e18:	add	r6, r4, #8
   16e1c:	cmp	r5, r6
   16e20:	str	r2, [sp, #36]	; 0x24
   16e24:	beq	16f2c <__assert_fail@plt+0x5ff4>
   16e28:	mov	r3, #8
   16e2c:	mov	r0, r5
   16e30:	str	r3, [sp]
   16e34:	rsb	r2, r2, #1
   16e38:	mvn	r3, #-2147483648	; 0x80000000
   16e3c:	add	r1, sp, #36	; 0x24
   16e40:	bl	17be8 <__assert_fail@plt+0x6cb0>
   16e44:	mov	r5, r0
   16e48:	str	r0, [r4]
   16e4c:	ldr	r0, [r4, #4]
   16e50:	ldr	r2, [sp, #36]	; 0x24
   16e54:	mov	r1, #0
   16e58:	sub	r2, r2, r0
   16e5c:	add	r0, r5, r0, lsl #3
   16e60:	lsl	r2, r2, #3
   16e64:	bl	10e78 <memset@plt>
   16e68:	ldr	r3, [sp, #36]	; 0x24
   16e6c:	str	r3, [r4, #4]
   16e70:	ldr	r7, [r4, #20]
   16e74:	ldr	r9, [r5]
   16e78:	ldr	r6, [r5, #4]
   16e7c:	ldr	r2, [r4, #56]	; 0x38
   16e80:	ldr	r3, [r4, #16]
   16e84:	ldr	ip, [r4, #60]	; 0x3c
   16e88:	ldr	fp, [pc, #208]	; 16f60 <__assert_fail@plt+0x6028>
   16e8c:	orr	r7, r7, #1
   16e90:	str	r2, [sp, #12]
   16e94:	str	r3, [sp]
   16e98:	str	r7, [sp, #4]
   16e9c:	mov	r1, r9
   16ea0:	mov	r0, r6
   16ea4:	str	ip, [sp, #16]
   16ea8:	str	fp, [sp, #8]
   16eac:	mvn	r3, #0
   16eb0:	mov	r2, sl
   16eb4:	bl	130f0 <__assert_fail@plt+0x21b8>
   16eb8:	cmp	r9, r0
   16ebc:	bhi	16f18 <__assert_fail@plt+0x5fe0>
   16ec0:	ldr	r3, [pc, #156]	; 16f64 <__assert_fail@plt+0x602c>
   16ec4:	add	r9, r0, #1
   16ec8:	cmp	r6, r3
   16ecc:	str	r9, [r5]
   16ed0:	beq	16edc <__assert_fail@plt+0x5fa4>
   16ed4:	mov	r0, r6
   16ed8:	bl	191c0 <__assert_fail@plt+0x8288>
   16edc:	mov	r0, r9
   16ee0:	bl	179cc <__assert_fail@plt+0x6a94>
   16ee4:	ldr	ip, [r4, #60]	; 0x3c
   16ee8:	ldr	r3, [r4, #16]
   16eec:	ldr	lr, [r4, #56]	; 0x38
   16ef0:	mov	r2, sl
   16ef4:	mov	r1, r9
   16ef8:	str	r0, [r5, #4]
   16efc:	str	r3, [sp]
   16f00:	stmib	sp, {r7, fp}
   16f04:	str	ip, [sp, #16]
   16f08:	str	lr, [sp, #12]
   16f0c:	mvn	r3, #0
   16f10:	mov	r6, r0
   16f14:	bl	130f0 <__assert_fail@plt+0x21b8>
   16f18:	ldr	r3, [sp, #28]
   16f1c:	mov	r0, r6
   16f20:	str	r3, [r8]
   16f24:	add	sp, sp, #44	; 0x2c
   16f28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16f2c:	mov	r3, #8
   16f30:	str	r3, [sp]
   16f34:	add	r1, sp, #36	; 0x24
   16f38:	rsb	r2, r2, #1
   16f3c:	mvn	r3, #-2147483648	; 0x80000000
   16f40:	mov	r0, #0
   16f44:	bl	17be8 <__assert_fail@plt+0x6cb0>
   16f48:	mov	r5, r0
   16f4c:	ldm	r6, {r0, r1}
   16f50:	str	r5, [r4]
   16f54:	stm	r5, {r0, r1}
   16f58:	b	16e4c <__assert_fail@plt+0x5f14>
   16f5c:	strdeq	fp, [r2], -r4
   16f60:	andeq	fp, r2, ip, lsl #2
   16f64:	andeq	r3, r3, ip, asr #5
   16f68:	push	{r4, r5, r6, lr}
   16f6c:	sub	sp, sp, #32
   16f70:	cmp	r1, #0
   16f74:	mov	r4, r0
   16f78:	ldr	r5, [sp, #48]	; 0x30
   16f7c:	ldr	r6, [sp, #52]	; 0x34
   16f80:	beq	17298 <__assert_fail@plt+0x6360>
   16f84:	stm	sp, {r2, r3}
   16f88:	mov	r3, r1
   16f8c:	ldr	r2, [pc, #808]	; 172bc <__assert_fail@plt+0x6384>
   16f90:	mov	r1, #1
   16f94:	bl	10e9c <__fprintf_chk@plt>
   16f98:	mov	r2, #5
   16f9c:	ldr	r1, [pc, #796]	; 172c0 <__assert_fail@plt+0x6388>
   16fa0:	mov	r0, #0
   16fa4:	bl	10d7c <dcgettext@plt>
   16fa8:	ldr	r3, [pc, #788]	; 172c4 <__assert_fail@plt+0x638c>
   16fac:	ldr	r2, [pc, #788]	; 172c8 <__assert_fail@plt+0x6390>
   16fb0:	str	r3, [sp]
   16fb4:	mov	r1, #1
   16fb8:	mov	r3, r0
   16fbc:	mov	r0, r4
   16fc0:	bl	10e9c <__fprintf_chk@plt>
   16fc4:	mov	r1, r4
   16fc8:	mov	r0, #10
   16fcc:	bl	10d70 <fputc_unlocked@plt>
   16fd0:	mov	r2, #5
   16fd4:	ldr	r1, [pc, #752]	; 172cc <__assert_fail@plt+0x6394>
   16fd8:	mov	r0, #0
   16fdc:	bl	10d7c <dcgettext@plt>
   16fe0:	mov	r1, #1
   16fe4:	ldr	r3, [pc, #740]	; 172d0 <__assert_fail@plt+0x6398>
   16fe8:	mov	r2, r0
   16fec:	mov	r0, r4
   16ff0:	bl	10e9c <__fprintf_chk@plt>
   16ff4:	mov	r1, r4
   16ff8:	mov	r0, #10
   16ffc:	bl	10d70 <fputc_unlocked@plt>
   17000:	cmp	r6, #9
   17004:	ldrls	pc, [pc, r6, lsl #2]
   17008:	b	172b0 <__assert_fail@plt+0x6378>
   1700c:	muleq	r1, r0, r0
   17010:	muleq	r1, r8, r0
   17014:	andeq	r7, r1, r4, asr #1
   17018:	strdeq	r7, [r1], -r8
   1701c:	andeq	r7, r1, r4, lsr r1
   17020:	andeq	r7, r1, r0, ror r1
   17024:	andeq	r7, r1, ip, lsr #3
   17028:	strdeq	r7, [r1], -r0
   1702c:	andeq	r7, r1, r0, asr #4
   17030:	andeq	r7, r1, r4, lsr r0
   17034:	ldr	r1, [pc, #664]	; 172d4 <__assert_fail@plt+0x639c>
   17038:	mov	r2, #5
   1703c:	mov	r0, #0
   17040:	bl	10d7c <dcgettext@plt>
   17044:	ldr	ip, [r5, #32]
   17048:	ldr	r1, [r5, #28]
   1704c:	ldr	r2, [r5, #24]
   17050:	ldr	r3, [r5]
   17054:	ldr	r6, [r5, #20]
   17058:	str	ip, [sp, #28]
   1705c:	ldr	lr, [r5, #16]
   17060:	str	r1, [sp, #24]
   17064:	ldr	ip, [r5, #12]
   17068:	str	r2, [sp, #20]
   1706c:	ldr	r1, [r5, #8]
   17070:	ldr	r2, [r5, #4]
   17074:	str	r6, [sp, #16]
   17078:	stmib	sp, {r1, ip, lr}
   1707c:	mov	r1, #1
   17080:	str	r2, [sp]
   17084:	mov	r2, r0
   17088:	mov	r0, r4
   1708c:	bl	10e9c <__fprintf_chk@plt>
   17090:	add	sp, sp, #32
   17094:	pop	{r4, r5, r6, pc}
   17098:	mov	r2, #5
   1709c:	ldr	r1, [pc, #564]	; 172d8 <__assert_fail@plt+0x63a0>
   170a0:	mov	r0, #0
   170a4:	bl	10d7c <dcgettext@plt>
   170a8:	ldr	r3, [r5]
   170ac:	mov	r1, #1
   170b0:	mov	r2, r0
   170b4:	mov	r0, r4
   170b8:	add	sp, sp, #32
   170bc:	pop	{r4, r5, r6, lr}
   170c0:	b	10e9c <__fprintf_chk@plt>
   170c4:	mov	r2, #5
   170c8:	ldr	r1, [pc, #524]	; 172dc <__assert_fail@plt+0x63a4>
   170cc:	mov	r0, #0
   170d0:	bl	10d7c <dcgettext@plt>
   170d4:	ldr	r2, [r5, #4]
   170d8:	ldr	r3, [r5]
   170dc:	mov	r1, #1
   170e0:	str	r2, [sp, #48]	; 0x30
   170e4:	mov	r2, r0
   170e8:	mov	r0, r4
   170ec:	add	sp, sp, #32
   170f0:	pop	{r4, r5, r6, lr}
   170f4:	b	10e9c <__fprintf_chk@plt>
   170f8:	mov	r2, #5
   170fc:	ldr	r1, [pc, #476]	; 172e0 <__assert_fail@plt+0x63a8>
   17100:	mov	r0, #0
   17104:	bl	10d7c <dcgettext@plt>
   17108:	ldr	r1, [r5, #8]
   1710c:	ldr	r2, [r5, #4]
   17110:	ldr	r3, [r5]
   17114:	str	r1, [sp, #52]	; 0x34
   17118:	str	r2, [sp, #48]	; 0x30
   1711c:	mov	r1, #1
   17120:	mov	r2, r0
   17124:	mov	r0, r4
   17128:	add	sp, sp, #32
   1712c:	pop	{r4, r5, r6, lr}
   17130:	b	10e9c <__fprintf_chk@plt>
   17134:	mov	r2, #5
   17138:	ldr	r1, [pc, #420]	; 172e4 <__assert_fail@plt+0x63ac>
   1713c:	mov	r0, #0
   17140:	bl	10d7c <dcgettext@plt>
   17144:	ldr	r1, [r5, #8]
   17148:	ldr	ip, [r5, #12]
   1714c:	ldr	r2, [r5, #4]
   17150:	ldr	r3, [r5]
   17154:	stmib	sp, {r1, ip}
   17158:	str	r2, [sp]
   1715c:	mov	r1, #1
   17160:	mov	r2, r0
   17164:	mov	r0, r4
   17168:	bl	10e9c <__fprintf_chk@plt>
   1716c:	b	17090 <__assert_fail@plt+0x6158>
   17170:	mov	r2, #5
   17174:	ldr	r1, [pc, #364]	; 172e8 <__assert_fail@plt+0x63b0>
   17178:	mov	r0, #0
   1717c:	bl	10d7c <dcgettext@plt>
   17180:	add	r1, r5, #8
   17184:	ldr	r2, [r5, #4]
   17188:	ldm	r1, {r1, ip, lr}
   1718c:	ldr	r3, [r5]
   17190:	str	r2, [sp]
   17194:	stmib	sp, {r1, ip, lr}
   17198:	mov	r1, #1
   1719c:	mov	r2, r0
   171a0:	mov	r0, r4
   171a4:	bl	10e9c <__fprintf_chk@plt>
   171a8:	b	17090 <__assert_fail@plt+0x6158>
   171ac:	mov	r2, #5
   171b0:	ldr	r1, [pc, #308]	; 172ec <__assert_fail@plt+0x63b4>
   171b4:	mov	r0, #0
   171b8:	bl	10d7c <dcgettext@plt>
   171bc:	add	r1, r5, #8
   171c0:	ldr	r2, [r5, #4]
   171c4:	ldm	r1, {r1, ip, lr}
   171c8:	ldr	r6, [r5, #20]
   171cc:	ldr	r3, [r5]
   171d0:	stmib	sp, {r1, ip, lr}
   171d4:	mov	r1, #1
   171d8:	str	r2, [sp]
   171dc:	str	r6, [sp, #16]
   171e0:	mov	r2, r0
   171e4:	mov	r0, r4
   171e8:	bl	10e9c <__fprintf_chk@plt>
   171ec:	b	17090 <__assert_fail@plt+0x6158>
   171f0:	mov	r2, #5
   171f4:	ldr	r1, [pc, #244]	; 172f0 <__assert_fail@plt+0x63b8>
   171f8:	mov	r0, #0
   171fc:	bl	10d7c <dcgettext@plt>
   17200:	ldr	r2, [r5, #24]
   17204:	ldr	r3, [r5]
   17208:	ldr	r6, [r5, #20]
   1720c:	ldr	lr, [r5, #16]
   17210:	ldr	ip, [r5, #12]
   17214:	str	r2, [sp, #20]
   17218:	ldr	r1, [r5, #8]
   1721c:	ldr	r2, [r5, #4]
   17220:	str	r6, [sp, #16]
   17224:	stmib	sp, {r1, ip, lr}
   17228:	mov	r1, #1
   1722c:	str	r2, [sp]
   17230:	mov	r2, r0
   17234:	mov	r0, r4
   17238:	bl	10e9c <__fprintf_chk@plt>
   1723c:	b	17090 <__assert_fail@plt+0x6158>
   17240:	mov	r2, #5
   17244:	ldr	r1, [pc, #168]	; 172f4 <__assert_fail@plt+0x63bc>
   17248:	mov	r0, #0
   1724c:	bl	10d7c <dcgettext@plt>
   17250:	ldr	r1, [r5, #28]
   17254:	ldr	r2, [r5, #24]
   17258:	ldr	r3, [r5]
   1725c:	ldr	r6, [r5, #20]
   17260:	ldr	lr, [r5, #16]
   17264:	str	r1, [sp, #24]
   17268:	ldr	ip, [r5, #12]
   1726c:	str	r2, [sp, #20]
   17270:	ldr	r1, [r5, #8]
   17274:	ldr	r2, [r5, #4]
   17278:	str	r6, [sp, #16]
   1727c:	stmib	sp, {r1, ip, lr}
   17280:	mov	r1, #1
   17284:	str	r2, [sp]
   17288:	mov	r2, r0
   1728c:	mov	r0, r4
   17290:	bl	10e9c <__fprintf_chk@plt>
   17294:	b	17090 <__assert_fail@plt+0x6158>
   17298:	str	r3, [sp]
   1729c:	mov	r1, #1
   172a0:	mov	r3, r2
   172a4:	ldr	r2, [pc, #76]	; 172f8 <__assert_fail@plt+0x63c0>
   172a8:	bl	10e9c <__fprintf_chk@plt>
   172ac:	b	16f98 <__assert_fail@plt+0x6060>
   172b0:	mov	r2, #5
   172b4:	ldr	r1, [pc, #64]	; 172fc <__assert_fail@plt+0x63c4>
   172b8:	b	1703c <__assert_fail@plt+0x6104>
   172bc:	andeq	sl, r1, r8, asr #3
   172c0:	ldrdeq	sl, [r1], -ip
   172c4:	andeq	r0, r0, r6, ror #15
   172c8:			; <UNDEFINED> instruction: 0x0001a4b4
   172cc:	andeq	sl, r1, r0, ror #3
   172d0:	andeq	sl, r1, ip, lsl #5
   172d4:			; <UNDEFINED> instruction: 0x0001a3bc
   172d8:			; <UNDEFINED> instruction: 0x0001a2b0
   172dc:	andeq	sl, r1, r0, asr #5
   172e0:	ldrdeq	sl, [r1], -r8
   172e4:	strdeq	sl, [r1], -r4
   172e8:	andeq	sl, r1, r4, lsl r3
   172ec:	andeq	sl, r1, r8, lsr r3
   172f0:	andeq	sl, r1, r0, ror #6
   172f4:	andeq	sl, r1, ip, lsl #7
   172f8:	ldrdeq	sl, [r1], -r4
   172fc:	strdeq	sl, [r1], -r0
   17300:	push	{r4, r5, lr}
   17304:	sub	sp, sp, #12
   17308:	ldr	r5, [sp, #24]
   1730c:	ldr	ip, [r5]
   17310:	cmp	ip, #0
   17314:	beq	17330 <__assert_fail@plt+0x63f8>
   17318:	mov	lr, r5
   1731c:	mov	ip, #0
   17320:	ldr	r4, [lr, #4]!
   17324:	add	ip, ip, #1
   17328:	cmp	r4, #0
   1732c:	bne	17320 <__assert_fail@plt+0x63e8>
   17330:	stm	sp, {r5, ip}
   17334:	bl	16f68 <__assert_fail@plt+0x6030>
   17338:	add	sp, sp, #12
   1733c:	pop	{r4, r5, pc}
   17340:	push	{r4, r5, lr}
   17344:	sub	sp, sp, #76	; 0x4c
   17348:	mov	r5, r0
   1734c:	ldr	ip, [sp, #88]	; 0x58
   17350:	ldr	r0, [ip]
   17354:	cmp	r0, #0
   17358:	str	r0, [sp, #32]
   1735c:	beq	17730 <__assert_fail@plt+0x67f8>
   17360:	ldr	r0, [ip, #4]
   17364:	cmp	r0, #0
   17368:	str	r0, [sp, #36]	; 0x24
   1736c:	beq	17738 <__assert_fail@plt+0x6800>
   17370:	ldr	r0, [ip, #8]
   17374:	cmp	r0, #0
   17378:	str	r0, [sp, #40]	; 0x28
   1737c:	beq	17740 <__assert_fail@plt+0x6808>
   17380:	ldr	r0, [ip, #12]
   17384:	cmp	r0, #0
   17388:	str	r0, [sp, #44]	; 0x2c
   1738c:	beq	17748 <__assert_fail@plt+0x6810>
   17390:	ldr	r0, [ip, #16]
   17394:	cmp	r0, #0
   17398:	str	r0, [sp, #48]	; 0x30
   1739c:	beq	17750 <__assert_fail@plt+0x6818>
   173a0:	ldr	r0, [ip, #20]
   173a4:	cmp	r0, #0
   173a8:	str	r0, [sp, #52]	; 0x34
   173ac:	beq	17758 <__assert_fail@plt+0x6820>
   173b0:	ldr	r0, [ip, #24]
   173b4:	cmp	r0, #0
   173b8:	str	r0, [sp, #56]	; 0x38
   173bc:	beq	17760 <__assert_fail@plt+0x6828>
   173c0:	ldr	r0, [ip, #28]
   173c4:	cmp	r0, #0
   173c8:	str	r0, [sp, #60]	; 0x3c
   173cc:	beq	17768 <__assert_fail@plt+0x6830>
   173d0:	ldr	r0, [ip, #32]
   173d4:	cmp	r0, #0
   173d8:	str	r0, [sp, #64]	; 0x40
   173dc:	beq	17770 <__assert_fail@plt+0x6838>
   173e0:	ldr	r0, [ip, #36]	; 0x24
   173e4:	cmp	r0, #0
   173e8:	movne	r4, #10
   173ec:	moveq	r4, #9
   173f0:	cmp	r1, #0
   173f4:	beq	17708 <__assert_fail@plt+0x67d0>
   173f8:	stm	sp, {r2, r3}
   173fc:	mov	r0, r5
   17400:	mov	r3, r1
   17404:	ldr	r2, [pc, #876]	; 17778 <__assert_fail@plt+0x6840>
   17408:	mov	r1, #1
   1740c:	bl	10e9c <__fprintf_chk@plt>
   17410:	mov	r2, #5
   17414:	ldr	r1, [pc, #864]	; 1777c <__assert_fail@plt+0x6844>
   17418:	mov	r0, #0
   1741c:	bl	10d7c <dcgettext@plt>
   17420:	ldr	r3, [pc, #856]	; 17780 <__assert_fail@plt+0x6848>
   17424:	ldr	r2, [pc, #856]	; 17784 <__assert_fail@plt+0x684c>
   17428:	str	r3, [sp]
   1742c:	mov	r1, #1
   17430:	mov	r3, r0
   17434:	mov	r0, r5
   17438:	bl	10e9c <__fprintf_chk@plt>
   1743c:	mov	r1, r5
   17440:	mov	r0, #10
   17444:	bl	10d70 <fputc_unlocked@plt>
   17448:	mov	r2, #5
   1744c:	ldr	r1, [pc, #820]	; 17788 <__assert_fail@plt+0x6850>
   17450:	mov	r0, #0
   17454:	bl	10d7c <dcgettext@plt>
   17458:	mov	r1, #1
   1745c:	ldr	r3, [pc, #808]	; 1778c <__assert_fail@plt+0x6854>
   17460:	mov	r2, r0
   17464:	mov	r0, r5
   17468:	bl	10e9c <__fprintf_chk@plt>
   1746c:	mov	r1, r5
   17470:	mov	r0, #10
   17474:	bl	10d70 <fputc_unlocked@plt>
   17478:	cmp	r4, #9
   1747c:	ldrls	pc, [pc, r4, lsl #2]
   17480:	b	17724 <__assert_fail@plt+0x67ec>
   17484:	andeq	r7, r1, r8, lsl #10
   17488:	andeq	r7, r1, r0, lsl r5
   1748c:	andeq	r7, r1, ip, lsr r5
   17490:	andeq	r7, r1, r0, ror r5
   17494:	andeq	r7, r1, r8, lsr #11
   17498:	andeq	r7, r1, r4, ror #11
   1749c:	andeq	r7, r1, r0, lsr #12
   174a0:	andeq	r7, r1, r4, ror #12
   174a4:			; <UNDEFINED> instruction: 0x000176b0
   174a8:	andeq	r7, r1, ip, lsr #9
   174ac:	ldr	r1, [pc, #732]	; 17790 <__assert_fail@plt+0x6858>
   174b0:	mov	r2, #5
   174b4:	mov	r0, #0
   174b8:	bl	10d7c <dcgettext@plt>
   174bc:	ldr	ip, [sp, #64]	; 0x40
   174c0:	ldr	r1, [sp, #60]	; 0x3c
   174c4:	ldr	r2, [sp, #56]	; 0x38
   174c8:	ldr	lr, [sp, #48]	; 0x30
   174cc:	str	ip, [sp, #28]
   174d0:	str	r1, [sp, #24]
   174d4:	ldr	ip, [sp, #44]	; 0x2c
   174d8:	ldr	r1, [sp, #40]	; 0x28
   174dc:	ldr	r4, [sp, #52]	; 0x34
   174e0:	str	r2, [sp, #20]
   174e4:	ldr	r2, [sp, #36]	; 0x24
   174e8:	stmib	sp, {r1, ip, lr}
   174ec:	mov	r1, #1
   174f0:	str	r2, [sp]
   174f4:	ldr	r3, [sp, #32]
   174f8:	str	r4, [sp, #16]
   174fc:	mov	r2, r0
   17500:	mov	r0, r5
   17504:	bl	10e9c <__fprintf_chk@plt>
   17508:	add	sp, sp, #76	; 0x4c
   1750c:	pop	{r4, r5, pc}
   17510:	mov	r2, #5
   17514:	ldr	r1, [pc, #632]	; 17794 <__assert_fail@plt+0x685c>
   17518:	mov	r0, #0
   1751c:	bl	10d7c <dcgettext@plt>
   17520:	ldr	r3, [sp, #32]
   17524:	mov	r1, #1
   17528:	mov	r2, r0
   1752c:	mov	r0, r5
   17530:	add	sp, sp, #76	; 0x4c
   17534:	pop	{r4, r5, lr}
   17538:	b	10e9c <__fprintf_chk@plt>
   1753c:	mov	r2, #5
   17540:	ldr	r1, [pc, #592]	; 17798 <__assert_fail@plt+0x6860>
   17544:	mov	r0, #0
   17548:	bl	10d7c <dcgettext@plt>
   1754c:	ldr	r2, [sp, #36]	; 0x24
   17550:	ldr	r3, [sp, #32]
   17554:	str	r2, [sp, #88]	; 0x58
   17558:	mov	r1, #1
   1755c:	mov	r2, r0
   17560:	mov	r0, r5
   17564:	add	sp, sp, #76	; 0x4c
   17568:	pop	{r4, r5, lr}
   1756c:	b	10e9c <__fprintf_chk@plt>
   17570:	mov	r2, #5
   17574:	ldr	r1, [pc, #544]	; 1779c <__assert_fail@plt+0x6864>
   17578:	mov	r0, #0
   1757c:	bl	10d7c <dcgettext@plt>
   17580:	ldr	r1, [sp, #40]	; 0x28
   17584:	ldr	r2, [sp, #36]	; 0x24
   17588:	str	r1, [sp, #4]
   1758c:	str	r2, [sp]
   17590:	ldr	r3, [sp, #32]
   17594:	mov	r1, #1
   17598:	mov	r2, r0
   1759c:	mov	r0, r5
   175a0:	bl	10e9c <__fprintf_chk@plt>
   175a4:	b	17508 <__assert_fail@plt+0x65d0>
   175a8:	mov	r2, #5
   175ac:	ldr	r1, [pc, #492]	; 177a0 <__assert_fail@plt+0x6868>
   175b0:	mov	r0, #0
   175b4:	bl	10d7c <dcgettext@plt>
   175b8:	ldr	r1, [sp, #40]	; 0x28
   175bc:	ldr	ip, [sp, #44]	; 0x2c
   175c0:	ldr	r2, [sp, #36]	; 0x24
   175c4:	ldr	r3, [sp, #32]
   175c8:	stmib	sp, {r1, ip}
   175cc:	str	r2, [sp]
   175d0:	mov	r1, #1
   175d4:	mov	r2, r0
   175d8:	mov	r0, r5
   175dc:	bl	10e9c <__fprintf_chk@plt>
   175e0:	b	17508 <__assert_fail@plt+0x65d0>
   175e4:	mov	r2, #5
   175e8:	ldr	r1, [pc, #436]	; 177a4 <__assert_fail@plt+0x686c>
   175ec:	mov	r0, #0
   175f0:	bl	10d7c <dcgettext@plt>
   175f4:	add	r1, sp, #40	; 0x28
   175f8:	ldr	r2, [sp, #36]	; 0x24
   175fc:	ldm	r1, {r1, ip, lr}
   17600:	ldr	r3, [sp, #32]
   17604:	str	r2, [sp]
   17608:	stmib	sp, {r1, ip, lr}
   1760c:	mov	r1, #1
   17610:	mov	r2, r0
   17614:	mov	r0, r5
   17618:	bl	10e9c <__fprintf_chk@plt>
   1761c:	b	17508 <__assert_fail@plt+0x65d0>
   17620:	mov	r2, #5
   17624:	ldr	r1, [pc, #380]	; 177a8 <__assert_fail@plt+0x6870>
   17628:	mov	r0, #0
   1762c:	bl	10d7c <dcgettext@plt>
   17630:	add	r1, sp, #40	; 0x28
   17634:	ldr	r2, [sp, #36]	; 0x24
   17638:	ldm	r1, {r1, ip, lr}
   1763c:	ldr	r4, [sp, #52]	; 0x34
   17640:	str	r2, [sp]
   17644:	stmib	sp, {r1, ip, lr}
   17648:	mov	r1, #1
   1764c:	ldr	r3, [sp, #32]
   17650:	str	r4, [sp, #16]
   17654:	mov	r2, r0
   17658:	mov	r0, r5
   1765c:	bl	10e9c <__fprintf_chk@plt>
   17660:	b	17508 <__assert_fail@plt+0x65d0>
   17664:	mov	r2, #5
   17668:	ldr	r1, [pc, #316]	; 177ac <__assert_fail@plt+0x6874>
   1766c:	mov	r0, #0
   17670:	bl	10d7c <dcgettext@plt>
   17674:	add	r1, sp, #40	; 0x28
   17678:	ldr	r2, [sp, #56]	; 0x38
   1767c:	ldm	r1, {r1, ip, lr}
   17680:	ldr	r4, [sp, #52]	; 0x34
   17684:	str	r2, [sp, #20]
   17688:	ldr	r2, [sp, #36]	; 0x24
   1768c:	stmib	sp, {r1, ip, lr}
   17690:	mov	r1, #1
   17694:	str	r2, [sp]
   17698:	ldr	r3, [sp, #32]
   1769c:	str	r4, [sp, #16]
   176a0:	mov	r2, r0
   176a4:	mov	r0, r5
   176a8:	bl	10e9c <__fprintf_chk@plt>
   176ac:	b	17508 <__assert_fail@plt+0x65d0>
   176b0:	mov	r2, #5
   176b4:	ldr	r1, [pc, #244]	; 177b0 <__assert_fail@plt+0x6878>
   176b8:	mov	r0, #0
   176bc:	bl	10d7c <dcgettext@plt>
   176c0:	ldr	r1, [sp, #60]	; 0x3c
   176c4:	ldr	r2, [sp, #56]	; 0x38
   176c8:	ldr	lr, [sp, #48]	; 0x30
   176cc:	ldr	ip, [sp, #44]	; 0x2c
   176d0:	str	r1, [sp, #24]
   176d4:	ldr	r1, [sp, #40]	; 0x28
   176d8:	ldr	r4, [sp, #52]	; 0x34
   176dc:	str	r2, [sp, #20]
   176e0:	ldr	r2, [sp, #36]	; 0x24
   176e4:	stmib	sp, {r1, ip, lr}
   176e8:	mov	r1, #1
   176ec:	str	r2, [sp]
   176f0:	ldr	r3, [sp, #32]
   176f4:	str	r4, [sp, #16]
   176f8:	mov	r2, r0
   176fc:	mov	r0, r5
   17700:	bl	10e9c <__fprintf_chk@plt>
   17704:	b	17508 <__assert_fail@plt+0x65d0>
   17708:	str	r3, [sp]
   1770c:	mov	r1, #1
   17710:	mov	r3, r2
   17714:	mov	r0, r5
   17718:	ldr	r2, [pc, #148]	; 177b4 <__assert_fail@plt+0x687c>
   1771c:	bl	10e9c <__fprintf_chk@plt>
   17720:	b	17410 <__assert_fail@plt+0x64d8>
   17724:	mov	r2, #5
   17728:	ldr	r1, [pc, #136]	; 177b8 <__assert_fail@plt+0x6880>
   1772c:	b	174b4 <__assert_fail@plt+0x657c>
   17730:	mov	r4, r0
   17734:	b	173f0 <__assert_fail@plt+0x64b8>
   17738:	mov	r4, #1
   1773c:	b	173f0 <__assert_fail@plt+0x64b8>
   17740:	mov	r4, #2
   17744:	b	173f0 <__assert_fail@plt+0x64b8>
   17748:	mov	r4, #3
   1774c:	b	173f0 <__assert_fail@plt+0x64b8>
   17750:	mov	r4, #4
   17754:	b	173f0 <__assert_fail@plt+0x64b8>
   17758:	mov	r4, #5
   1775c:	b	173f0 <__assert_fail@plt+0x64b8>
   17760:	mov	r4, #6
   17764:	b	173f0 <__assert_fail@plt+0x64b8>
   17768:	mov	r4, #7
   1776c:	b	173f0 <__assert_fail@plt+0x64b8>
   17770:	mov	r4, #8
   17774:	b	173f0 <__assert_fail@plt+0x64b8>
   17778:	andeq	sl, r1, r8, asr #3
   1777c:	ldrdeq	sl, [r1], -ip
   17780:	andeq	r0, r0, r6, ror #15
   17784:			; <UNDEFINED> instruction: 0x0001a4b4
   17788:	andeq	sl, r1, r0, ror #3
   1778c:	andeq	sl, r1, ip, lsl #5
   17790:			; <UNDEFINED> instruction: 0x0001a3bc
   17794:			; <UNDEFINED> instruction: 0x0001a2b0
   17798:	andeq	sl, r1, r0, asr #5
   1779c:	ldrdeq	sl, [r1], -r8
   177a0:	strdeq	sl, [r1], -r4
   177a4:	andeq	sl, r1, r4, lsl r3
   177a8:	andeq	sl, r1, r8, lsr r3
   177ac:	andeq	sl, r1, r0, ror #6
   177b0:	andeq	sl, r1, ip, lsl #7
   177b4:	ldrdeq	sl, [r1], -r4
   177b8:	strdeq	sl, [r1], -r0
   177bc:	push	{r3}		; (str r3, [sp, #-4]!)
   177c0:	push	{lr}		; (str lr, [sp, #-4]!)
   177c4:	sub	sp, sp, #56	; 0x38
   177c8:	add	r3, sp, #64	; 0x40
   177cc:	ldr	ip, [sp, #64]	; 0x40
   177d0:	str	r3, [sp, #12]
   177d4:	cmp	ip, #0
   177d8:	str	ip, [sp, #16]
   177dc:	beq	17874 <__assert_fail@plt+0x693c>
   177e0:	ldr	ip, [sp, #68]	; 0x44
   177e4:	cmp	ip, #0
   177e8:	str	ip, [sp, #20]
   177ec:	beq	17894 <__assert_fail@plt+0x695c>
   177f0:	ldr	ip, [sp, #72]	; 0x48
   177f4:	cmp	ip, #0
   177f8:	str	ip, [sp, #24]
   177fc:	beq	1789c <__assert_fail@plt+0x6964>
   17800:	ldr	ip, [sp, #76]	; 0x4c
   17804:	cmp	ip, #0
   17808:	str	ip, [sp, #28]
   1780c:	beq	178a4 <__assert_fail@plt+0x696c>
   17810:	ldr	ip, [sp, #80]	; 0x50
   17814:	cmp	ip, #0
   17818:	str	ip, [sp, #32]
   1781c:	beq	178ac <__assert_fail@plt+0x6974>
   17820:	ldr	ip, [sp, #84]	; 0x54
   17824:	cmp	ip, #0
   17828:	str	ip, [sp, #36]	; 0x24
   1782c:	beq	178b4 <__assert_fail@plt+0x697c>
   17830:	ldr	ip, [sp, #88]	; 0x58
   17834:	cmp	ip, #0
   17838:	str	ip, [sp, #40]	; 0x28
   1783c:	beq	178bc <__assert_fail@plt+0x6984>
   17840:	ldr	ip, [sp, #92]	; 0x5c
   17844:	cmp	ip, #0
   17848:	str	ip, [sp, #44]	; 0x2c
   1784c:	beq	178c4 <__assert_fail@plt+0x698c>
   17850:	ldr	ip, [sp, #96]	; 0x60
   17854:	cmp	ip, #0
   17858:	str	ip, [sp, #48]	; 0x30
   1785c:	beq	178cc <__assert_fail@plt+0x6994>
   17860:	ldr	ip, [sp, #100]	; 0x64
   17864:	cmp	ip, #0
   17868:	str	ip, [sp, #52]	; 0x34
   1786c:	movne	ip, #10
   17870:	moveq	ip, #9
   17874:	add	r3, sp, #16
   17878:	stm	sp, {r3, ip}
   1787c:	ldr	r3, [sp, #60]	; 0x3c
   17880:	bl	16f68 <__assert_fail@plt+0x6030>
   17884:	add	sp, sp, #56	; 0x38
   17888:	pop	{lr}		; (ldr lr, [sp], #4)
   1788c:	add	sp, sp, #4
   17890:	bx	lr
   17894:	mov	ip, #1
   17898:	b	17874 <__assert_fail@plt+0x693c>
   1789c:	mov	ip, #2
   178a0:	b	17874 <__assert_fail@plt+0x693c>
   178a4:	mov	ip, #3
   178a8:	b	17874 <__assert_fail@plt+0x693c>
   178ac:	mov	ip, #4
   178b0:	b	17874 <__assert_fail@plt+0x693c>
   178b4:	mov	ip, #5
   178b8:	b	17874 <__assert_fail@plt+0x693c>
   178bc:	mov	ip, #6
   178c0:	b	17874 <__assert_fail@plt+0x693c>
   178c4:	mov	ip, #7
   178c8:	b	17874 <__assert_fail@plt+0x693c>
   178cc:	mov	ip, #8
   178d0:	b	17874 <__assert_fail@plt+0x693c>
   178d4:	ldr	r3, [pc, #116]	; 17950 <__assert_fail@plt+0x6a18>
   178d8:	push	{r4, lr}
   178dc:	mov	r0, #10
   178e0:	ldr	r1, [r3]
   178e4:	bl	10d70 <fputc_unlocked@plt>
   178e8:	mov	r2, #5
   178ec:	ldr	r1, [pc, #96]	; 17954 <__assert_fail@plt+0x6a1c>
   178f0:	mov	r0, #0
   178f4:	bl	10d7c <dcgettext@plt>
   178f8:	ldr	r2, [pc, #88]	; 17958 <__assert_fail@plt+0x6a20>
   178fc:	mov	r1, r0
   17900:	mov	r0, #1
   17904:	bl	10e84 <__printf_chk@plt>
   17908:	mov	r2, #5
   1790c:	ldr	r1, [pc, #72]	; 1795c <__assert_fail@plt+0x6a24>
   17910:	mov	r0, #0
   17914:	bl	10d7c <dcgettext@plt>
   17918:	ldr	r3, [pc, #64]	; 17960 <__assert_fail@plt+0x6a28>
   1791c:	ldr	r2, [pc, #64]	; 17964 <__assert_fail@plt+0x6a2c>
   17920:	mov	r1, r0
   17924:	mov	r0, #1
   17928:	bl	10e84 <__printf_chk@plt>
   1792c:	mov	r2, #5
   17930:	ldr	r1, [pc, #48]	; 17968 <__assert_fail@plt+0x6a30>
   17934:	mov	r0, #0
   17938:	bl	10d7c <dcgettext@plt>
   1793c:	ldr	r2, [pc, #40]	; 1796c <__assert_fail@plt+0x6a34>
   17940:	pop	{r4, lr}
   17944:	mov	r1, r0
   17948:	mov	r0, #1
   1794c:	b	10e84 <__printf_chk@plt>
   17950:	andeq	fp, r2, r4, asr r1
   17954:	andeq	sl, r1, ip, lsr #8
   17958:	andeq	sl, r1, r0, asr #8
   1795c:	andeq	sl, r1, r8, asr r4
   17960:	andeq	r9, r1, r4, lsl #28
   17964:	andeq	r9, r1, ip, lsr #28
   17968:	andeq	sl, r1, ip, ror #8
   1796c:	muleq	r1, r4, r4
   17970:	push	{r4, r5, r6, lr}
   17974:	mov	r6, r0
   17978:	mov	r5, r1
   1797c:	mov	r4, r2
   17980:	bl	192a0 <__assert_fail@plt+0x8368>
   17984:	cmp	r0, #0
   17988:	popne	{r4, r5, r6, pc}
   1798c:	cmp	r6, #0
   17990:	beq	179a0 <__assert_fail@plt+0x6a68>
   17994:	cmp	r5, #0
   17998:	cmpne	r4, #0
   1799c:	popeq	{r4, r5, r6, pc}
   179a0:	bl	17fec <__assert_fail@plt+0x70b4>
   179a4:	push	{r4, lr}
   179a8:	bl	190bc <__assert_fail@plt+0x8184>
   179ac:	cmp	r0, #0
   179b0:	popne	{r4, pc}
   179b4:	bl	17fec <__assert_fail@plt+0x70b4>
   179b8:	push	{r4, lr}
   179bc:	bl	190bc <__assert_fail@plt+0x8184>
   179c0:	cmp	r0, #0
   179c4:	popne	{r4, pc}
   179c8:	bl	17fec <__assert_fail@plt+0x70b4>
   179cc:	push	{r4, lr}
   179d0:	bl	190bc <__assert_fail@plt+0x8184>
   179d4:	cmp	r0, #0
   179d8:	popne	{r4, pc}
   179dc:	bl	17fec <__assert_fail@plt+0x70b4>
   179e0:	push	{r4, r5, r6, lr}
   179e4:	mov	r5, r0
   179e8:	mov	r4, r1
   179ec:	bl	190e8 <__assert_fail@plt+0x81b0>
   179f0:	cmp	r0, #0
   179f4:	popne	{r4, r5, r6, pc}
   179f8:	adds	r4, r4, #0
   179fc:	movne	r4, #1
   17a00:	cmp	r5, #0
   17a04:	orreq	r4, r4, #1
   17a08:	cmp	r4, #0
   17a0c:	popeq	{r4, r5, r6, pc}
   17a10:	bl	17fec <__assert_fail@plt+0x70b4>
   17a14:	push	{r4, lr}
   17a18:	cmp	r1, #0
   17a1c:	orreq	r1, r1, #1
   17a20:	bl	190e8 <__assert_fail@plt+0x81b0>
   17a24:	cmp	r0, #0
   17a28:	popne	{r4, pc}
   17a2c:	bl	17fec <__assert_fail@plt+0x70b4>
   17a30:	push	{r4, r5, r6, lr}
   17a34:	mov	r6, r0
   17a38:	mov	r5, r1
   17a3c:	mov	r4, r2
   17a40:	bl	192a0 <__assert_fail@plt+0x8368>
   17a44:	cmp	r0, #0
   17a48:	popne	{r4, r5, r6, pc}
   17a4c:	cmp	r6, #0
   17a50:	beq	17a60 <__assert_fail@plt+0x6b28>
   17a54:	cmp	r5, #0
   17a58:	cmpne	r4, #0
   17a5c:	popeq	{r4, r5, r6, pc}
   17a60:	bl	17fec <__assert_fail@plt+0x70b4>
   17a64:	cmp	r2, #0
   17a68:	cmpne	r1, #0
   17a6c:	moveq	r2, #1
   17a70:	moveq	r1, r2
   17a74:	push	{r4, lr}
   17a78:	bl	192a0 <__assert_fail@plt+0x8368>
   17a7c:	cmp	r0, #0
   17a80:	popne	{r4, pc}
   17a84:	bl	17fec <__assert_fail@plt+0x70b4>
   17a88:	push	{r4, lr}
   17a8c:	mov	r2, r1
   17a90:	mov	r1, r0
   17a94:	mov	r0, #0
   17a98:	bl	192a0 <__assert_fail@plt+0x8368>
   17a9c:	cmp	r0, #0
   17aa0:	popne	{r4, pc}
   17aa4:	bl	17fec <__assert_fail@plt+0x70b4>
   17aa8:	cmp	r1, #0
   17aac:	cmpne	r0, #0
   17ab0:	moveq	r2, #1
   17ab4:	movne	r2, r1
   17ab8:	moveq	r1, r2
   17abc:	movne	r1, r0
   17ac0:	push	{r4, lr}
   17ac4:	mov	r0, #0
   17ac8:	bl	192a0 <__assert_fail@plt+0x8368>
   17acc:	cmp	r0, #0
   17ad0:	popne	{r4, pc}
   17ad4:	bl	17fec <__assert_fail@plt+0x70b4>
   17ad8:	cmp	r0, #0
   17adc:	push	{r4, r5, r6, lr}
   17ae0:	mov	r5, r1
   17ae4:	ldr	r4, [r1]
   17ae8:	beq	17b24 <__assert_fail@plt+0x6bec>
   17aec:	lsr	r2, r4, #1
   17af0:	add	r3, r2, #1
   17af4:	mvn	r3, r3
   17af8:	cmp	r4, r3
   17afc:	bhi	17b40 <__assert_fail@plt+0x6c08>
   17b00:	add	r4, r4, #1
   17b04:	add	r4, r4, r2
   17b08:	mov	r1, r4
   17b0c:	mov	r2, #1
   17b10:	bl	192a0 <__assert_fail@plt+0x8368>
   17b14:	cmp	r0, #0
   17b18:	beq	17b44 <__assert_fail@plt+0x6c0c>
   17b1c:	str	r4, [r5]
   17b20:	pop	{r4, r5, r6, pc}
   17b24:	cmp	r4, #0
   17b28:	moveq	r4, #64	; 0x40
   17b2c:	mov	r1, r4
   17b30:	mov	r2, #1
   17b34:	bl	192a0 <__assert_fail@plt+0x8368>
   17b38:	cmp	r0, #0
   17b3c:	bne	17b1c <__assert_fail@plt+0x6be4>
   17b40:	bl	17fec <__assert_fail@plt+0x70b4>
   17b44:	cmp	r4, #0
   17b48:	bne	17b40 <__assert_fail@plt+0x6c08>
   17b4c:	str	r4, [r5]
   17b50:	pop	{r4, r5, r6, pc}
   17b54:	cmp	r0, #0
   17b58:	push	{r4, r5, r6, lr}
   17b5c:	mov	r5, r1
   17b60:	ldr	r4, [r1]
   17b64:	mov	r6, r2
   17b68:	beq	17bac <__assert_fail@plt+0x6c74>
   17b6c:	lsr	r1, r4, #1
   17b70:	add	r3, r1, #1
   17b74:	mvn	r3, r3
   17b78:	cmp	r4, r3
   17b7c:	bhi	17be4 <__assert_fail@plt+0x6cac>
   17b80:	add	r4, r4, #1
   17b84:	add	r4, r4, r1
   17b88:	mov	r1, r4
   17b8c:	bl	192a0 <__assert_fail@plt+0x8368>
   17b90:	cmp	r0, #0
   17b94:	bne	17ba4 <__assert_fail@plt+0x6c6c>
   17b98:	cmp	r4, #0
   17b9c:	cmpne	r6, #0
   17ba0:	bne	17be4 <__assert_fail@plt+0x6cac>
   17ba4:	str	r4, [r5]
   17ba8:	pop	{r4, r5, r6, pc}
   17bac:	cmp	r4, #0
   17bb0:	bne	17bcc <__assert_fail@plt+0x6c94>
   17bb4:	mov	r1, r2
   17bb8:	mov	r0, #64	; 0x40
   17bbc:	bl	193e0 <__assert_fail@plt+0x84a8>
   17bc0:	cmp	r0, #0
   17bc4:	movne	r4, r0
   17bc8:	addeq	r4, r0, #1
   17bcc:	mov	r2, r6
   17bd0:	mov	r1, r4
   17bd4:	mov	r0, #0
   17bd8:	bl	192a0 <__assert_fail@plt+0x8368>
   17bdc:	cmp	r0, #0
   17be0:	bne	17ba4 <__assert_fail@plt+0x6c6c>
   17be4:	bl	17fec <__assert_fail@plt+0x70b4>
   17be8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17bec:	sub	sp, sp, #12
   17bf0:	ldr	r6, [r1]
   17bf4:	mov	r8, r1
   17bf8:	mov	r9, r0
   17bfc:	asrs	r4, r6, #1
   17c00:	mov	sl, r2
   17c04:	mov	fp, r3
   17c08:	ldr	r7, [sp, #48]	; 0x30
   17c0c:	bmi	17d88 <__assert_fail@plt+0x6e50>
   17c10:	mvn	r1, #-2147483648	; 0x80000000
   17c14:	sub	r1, r1, r4
   17c18:	cmp	r6, r1
   17c1c:	movle	r1, #0
   17c20:	movgt	r1, #1
   17c24:	mvn	r3, fp
   17c28:	cmp	r1, #0
   17c2c:	addeq	r4, r4, r6
   17c30:	mvnne	r4, #-2147483648	; 0x80000000
   17c34:	lsr	r3, r3, #31
   17c38:	cmp	fp, r4
   17c3c:	movge	r2, #0
   17c40:	andlt	r2, r3, #1
   17c44:	cmp	r2, #0
   17c48:	beq	17d38 <__assert_fail@plt+0x6e00>
   17c4c:	cmp	r7, #0
   17c50:	blt	17e20 <__assert_fail@plt+0x6ee8>
   17c54:	bne	17e18 <__assert_fail@plt+0x6ee0>
   17c58:	mov	r5, #64	; 0x40
   17c5c:	mov	r1, r7
   17c60:	mov	r0, r5
   17c64:	str	r3, [sp, #4]
   17c68:	bl	195ec <__assert_fail@plt+0x86b4>
   17c6c:	mov	r1, r7
   17c70:	mov	r4, r0
   17c74:	mov	r0, r5
   17c78:	bl	1980c <__assert_fail@plt+0x88d4>
   17c7c:	ldr	r3, [sp, #4]
   17c80:	sub	r5, r5, r1
   17c84:	cmp	r9, #0
   17c88:	sub	r2, r4, r6
   17c8c:	streq	r9, [r8]
   17c90:	cmp	r2, sl
   17c94:	bge	17d18 <__assert_fail@plt+0x6de0>
   17c98:	cmp	sl, #0
   17c9c:	blt	17db8 <__assert_fail@plt+0x6e80>
   17ca0:	cmp	r6, #0
   17ca4:	blt	17cc4 <__assert_fail@plt+0x6d8c>
   17ca8:	mvn	r2, #-2147483648	; 0x80000000
   17cac:	sub	r2, r2, sl
   17cb0:	cmp	r6, r2
   17cb4:	movle	r2, #0
   17cb8:	movgt	r2, #1
   17cbc:	cmp	r2, #0
   17cc0:	bne	17db4 <__assert_fail@plt+0x6e7c>
   17cc4:	add	r6, r6, sl
   17cc8:	cmp	fp, r6
   17ccc:	movge	r3, #0
   17cd0:	andlt	r3, r3, #1
   17cd4:	cmp	r3, #0
   17cd8:	mov	r4, r6
   17cdc:	bne	17db4 <__assert_fail@plt+0x6e7c>
   17ce0:	cmp	r7, #0
   17ce4:	blt	17dcc <__assert_fail@plt+0x6e94>
   17ce8:	beq	17d14 <__assert_fail@plt+0x6ddc>
   17cec:	cmp	r6, #0
   17cf0:	blt	17e70 <__assert_fail@plt+0x6f38>
   17cf4:	mov	r1, r7
   17cf8:	mvn	r0, #-2147483648	; 0x80000000
   17cfc:	bl	195ec <__assert_fail@plt+0x86b4>
   17d00:	cmp	r6, r0
   17d04:	movle	r0, #0
   17d08:	movgt	r0, #1
   17d0c:	cmp	r0, #0
   17d10:	bne	17db4 <__assert_fail@plt+0x6e7c>
   17d14:	mul	r5, r6, r7
   17d18:	mov	r1, r5
   17d1c:	mov	r0, r9
   17d20:	bl	190e8 <__assert_fail@plt+0x81b0>
   17d24:	cmp	r0, #0
   17d28:	beq	17d9c <__assert_fail@plt+0x6e64>
   17d2c:	str	r4, [r8]
   17d30:	add	sp, sp, #12
   17d34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17d38:	cmp	r7, #0
   17d3c:	blt	17df8 <__assert_fail@plt+0x6ec0>
   17d40:	beq	17c58 <__assert_fail@plt+0x6d20>
   17d44:	cmp	r4, #0
   17d48:	blt	17e28 <__assert_fail@plt+0x6ef0>
   17d4c:	mov	r1, r7
   17d50:	mvn	r0, #-2147483648	; 0x80000000
   17d54:	str	r3, [sp, #4]
   17d58:	bl	195ec <__assert_fail@plt+0x86b4>
   17d5c:	ldr	r3, [sp, #4]
   17d60:	cmp	r0, r4
   17d64:	movge	r0, #0
   17d68:	movlt	r0, #1
   17d6c:	cmp	r0, #0
   17d70:	mvnne	r5, #-2147483648	; 0x80000000
   17d74:	bne	17c5c <__assert_fail@plt+0x6d24>
   17d78:	mul	r5, r7, r4
   17d7c:	cmp	r5, #63	; 0x3f
   17d80:	bgt	17c84 <__assert_fail@plt+0x6d4c>
   17d84:	b	17c58 <__assert_fail@plt+0x6d20>
   17d88:	rsb	r1, r4, #-2147483648	; 0x80000000
   17d8c:	cmp	r6, r1
   17d90:	movge	r1, #0
   17d94:	movlt	r1, #1
   17d98:	b	17c24 <__assert_fail@plt+0x6cec>
   17d9c:	adds	r5, r5, #0
   17da0:	movne	r5, #1
   17da4:	cmp	r9, #0
   17da8:	orreq	r5, r5, #1
   17dac:	cmp	r5, #0
   17db0:	beq	17d2c <__assert_fail@plt+0x6df4>
   17db4:	bl	17fec <__assert_fail@plt+0x70b4>
   17db8:	rsb	r2, sl, #-2147483648	; 0x80000000
   17dbc:	cmp	r6, r2
   17dc0:	movge	r2, #0
   17dc4:	movlt	r2, #1
   17dc8:	b	17cbc <__assert_fail@plt+0x6d84>
   17dcc:	cmp	r6, #0
   17dd0:	blt	17e54 <__assert_fail@plt+0x6f1c>
   17dd4:	cmn	r7, #1
   17dd8:	beq	17d14 <__assert_fail@plt+0x6ddc>
   17ddc:	mov	r1, r7
   17de0:	mov	r0, #-2147483648	; 0x80000000
   17de4:	bl	195ec <__assert_fail@plt+0x86b4>
   17de8:	cmp	r6, r0
   17dec:	movle	r0, #0
   17df0:	movgt	r0, #1
   17df4:	b	17d0c <__assert_fail@plt+0x6dd4>
   17df8:	cmp	r4, #0
   17dfc:	blt	17e94 <__assert_fail@plt+0x6f5c>
   17e00:	cmn	r7, #1
   17e04:	beq	17d78 <__assert_fail@plt+0x6e40>
   17e08:	str	r3, [sp, #4]
   17e0c:	mov	r1, r7
   17e10:	mov	r0, #-2147483648	; 0x80000000
   17e14:	b	17d58 <__assert_fail@plt+0x6e20>
   17e18:	mov	r4, fp
   17e1c:	b	17d4c <__assert_fail@plt+0x6e14>
   17e20:	mov	r4, fp
   17e24:	b	17e00 <__assert_fail@plt+0x6ec8>
   17e28:	cmn	r4, #1
   17e2c:	beq	17d78 <__assert_fail@plt+0x6e40>
   17e30:	mov	r1, r4
   17e34:	mov	r0, #-2147483648	; 0x80000000
   17e38:	str	r3, [sp, #4]
   17e3c:	bl	195ec <__assert_fail@plt+0x86b4>
   17e40:	ldr	r3, [sp, #4]
   17e44:	cmp	r7, r0
   17e48:	movle	r0, #0
   17e4c:	movgt	r0, #1
   17e50:	b	17d6c <__assert_fail@plt+0x6e34>
   17e54:	mov	r1, r7
   17e58:	mvn	r0, #-2147483648	; 0x80000000
   17e5c:	bl	195ec <__assert_fail@plt+0x86b4>
   17e60:	cmp	r6, r0
   17e64:	movge	r0, #0
   17e68:	movlt	r0, #1
   17e6c:	b	17d0c <__assert_fail@plt+0x6dd4>
   17e70:	cmn	r6, #1
   17e74:	beq	17d14 <__assert_fail@plt+0x6ddc>
   17e78:	mov	r1, r6
   17e7c:	mov	r0, #-2147483648	; 0x80000000
   17e80:	bl	195ec <__assert_fail@plt+0x86b4>
   17e84:	cmp	r7, r0
   17e88:	movle	r0, #0
   17e8c:	movgt	r0, #1
   17e90:	b	17d0c <__assert_fail@plt+0x6dd4>
   17e94:	mov	r1, r7
   17e98:	mvn	r0, #-2147483648	; 0x80000000
   17e9c:	str	r3, [sp, #4]
   17ea0:	bl	195ec <__assert_fail@plt+0x86b4>
   17ea4:	ldr	r3, [sp, #4]
   17ea8:	cmp	r0, r4
   17eac:	movle	r0, #0
   17eb0:	movgt	r0, #1
   17eb4:	b	17d6c <__assert_fail@plt+0x6e34>
   17eb8:	push	{r4, lr}
   17ebc:	mov	r1, #1
   17ec0:	bl	19074 <__assert_fail@plt+0x813c>
   17ec4:	cmp	r0, #0
   17ec8:	popne	{r4, pc}
   17ecc:	bl	17fec <__assert_fail@plt+0x70b4>
   17ed0:	push	{r4, lr}
   17ed4:	mov	r1, #1
   17ed8:	bl	19074 <__assert_fail@plt+0x813c>
   17edc:	cmp	r0, #0
   17ee0:	popne	{r4, pc}
   17ee4:	bl	17fec <__assert_fail@plt+0x70b4>
   17ee8:	push	{r4, lr}
   17eec:	bl	19074 <__assert_fail@plt+0x813c>
   17ef0:	cmp	r0, #0
   17ef4:	popne	{r4, pc}
   17ef8:	bl	17fec <__assert_fail@plt+0x70b4>
   17efc:	push	{r4, lr}
   17f00:	bl	19074 <__assert_fail@plt+0x813c>
   17f04:	cmp	r0, #0
   17f08:	popne	{r4, pc}
   17f0c:	bl	17fec <__assert_fail@plt+0x70b4>
   17f10:	push	{r4, r5, r6, lr}
   17f14:	mov	r6, r0
   17f18:	mov	r0, r1
   17f1c:	mov	r4, r1
   17f20:	bl	190bc <__assert_fail@plt+0x8184>
   17f24:	subs	r5, r0, #0
   17f28:	beq	17f40 <__assert_fail@plt+0x7008>
   17f2c:	mov	r2, r4
   17f30:	mov	r1, r6
   17f34:	bl	10d34 <memcpy@plt>
   17f38:	mov	r0, r5
   17f3c:	pop	{r4, r5, r6, pc}
   17f40:	bl	17fec <__assert_fail@plt+0x70b4>
   17f44:	push	{r4, r5, r6, lr}
   17f48:	mov	r6, r0
   17f4c:	mov	r0, r1
   17f50:	mov	r4, r1
   17f54:	bl	190bc <__assert_fail@plt+0x8184>
   17f58:	subs	r5, r0, #0
   17f5c:	beq	17f74 <__assert_fail@plt+0x703c>
   17f60:	mov	r2, r4
   17f64:	mov	r1, r6
   17f68:	bl	10d34 <memcpy@plt>
   17f6c:	mov	r0, r5
   17f70:	pop	{r4, r5, r6, pc}
   17f74:	bl	17fec <__assert_fail@plt+0x70b4>
   17f78:	push	{r4, r5, r6, lr}
   17f7c:	mov	r6, r0
   17f80:	add	r0, r1, #1
   17f84:	mov	r4, r1
   17f88:	bl	190bc <__assert_fail@plt+0x8184>
   17f8c:	subs	r5, r0, #0
   17f90:	beq	17fb0 <__assert_fail@plt+0x7078>
   17f94:	mov	r3, #0
   17f98:	mov	r1, r6
   17f9c:	strb	r3, [r5, r4]
   17fa0:	mov	r2, r4
   17fa4:	bl	10d34 <memcpy@plt>
   17fa8:	mov	r0, r5
   17fac:	pop	{r4, r5, r6, pc}
   17fb0:	bl	17fec <__assert_fail@plt+0x70b4>
   17fb4:	push	{r4, r5, r6, lr}
   17fb8:	mov	r6, r0
   17fbc:	bl	10e48 <strlen@plt>
   17fc0:	add	r4, r0, #1
   17fc4:	mov	r0, r4
   17fc8:	bl	190bc <__assert_fail@plt+0x8184>
   17fcc:	subs	r5, r0, #0
   17fd0:	beq	17fe8 <__assert_fail@plt+0x70b0>
   17fd4:	mov	r2, r4
   17fd8:	mov	r1, r6
   17fdc:	bl	10d34 <memcpy@plt>
   17fe0:	mov	r0, r5
   17fe4:	pop	{r4, r5, r6, pc}
   17fe8:	bl	17fec <__assert_fail@plt+0x70b4>
   17fec:	ldr	r3, [pc, #44]	; 18020 <__assert_fail@plt+0x70e8>
   17ff0:	push	{r4, lr}
   17ff4:	mov	r2, #5
   17ff8:	ldr	r1, [pc, #36]	; 18024 <__assert_fail@plt+0x70ec>
   17ffc:	mov	r0, #0
   18000:	ldr	r4, [r3]
   18004:	bl	10d7c <dcgettext@plt>
   18008:	ldr	r2, [pc, #24]	; 18028 <__assert_fail@plt+0x70f0>
   1800c:	mov	r1, #0
   18010:	mov	r3, r0
   18014:	mov	r0, r4
   18018:	bl	10de8 <error@plt>
   1801c:	bl	10f2c <abort@plt>
   18020:	strdeq	fp, [r2], -r0
   18024:	andeq	sl, r1, r4, ror #9
   18028:	strheq	sl, [r1], -r0
   1802c:	push	{r4, r5, r6, r7, lr}
   18030:	sub	sp, sp, #20
   18034:	mov	r6, r2
   18038:	ldr	ip, [sp, #48]	; 0x30
   1803c:	mov	r2, r1
   18040:	mov	r7, r3
   18044:	str	ip, [sp]
   18048:	add	r3, sp, #8
   1804c:	mov	r1, #0
   18050:	mov	r5, r0
   18054:	ldr	r4, [sp, #56]	; 0x38
   18058:	bl	182a8 <__assert_fail@plt+0x7370>
   1805c:	cmp	r0, #0
   18060:	bne	180e4 <__assert_fail@plt+0x71ac>
   18064:	ldrd	r0, [sp, #8]
   18068:	cmp	r1, r7
   1806c:	cmpeq	r0, r6
   18070:	ldrd	r6, [sp, #40]	; 0x28
   18074:	movcc	r3, #1
   18078:	movcs	r3, #0
   1807c:	cmp	r1, r7
   18080:	cmpeq	r0, r6
   18084:	orrhi	r3, r3, #1
   18088:	cmp	r3, #0
   1808c:	beq	180dc <__assert_fail@plt+0x71a4>
   18090:	mov	r3, #0
   18094:	mvn	r2, #-1073741824	; 0xc0000000
   18098:	cmp	r1, r3
   1809c:	cmpeq	r0, r2
   180a0:	bhi	18110 <__assert_fail@plt+0x71d8>
   180a4:	bl	10e60 <__errno_location@plt>
   180a8:	mov	r3, #34	; 0x22
   180ac:	mov	r6, r3
   180b0:	str	r3, [r0]
   180b4:	cmp	r4, #0
   180b8:	moveq	r4, #1
   180bc:	mov	r0, r5
   180c0:	bl	16de8 <__assert_fail@plt+0x5eb0>
   180c4:	mov	r1, r6
   180c8:	ldr	r3, [sp, #52]	; 0x34
   180cc:	ldr	r2, [pc, #144]	; 18164 <__assert_fail@plt+0x722c>
   180d0:	str	r0, [sp]
   180d4:	mov	r0, r4
   180d8:	bl	10de8 <error@plt>
   180dc:	add	sp, sp, #20
   180e0:	pop	{r4, r5, r6, r7, pc}
   180e4:	cmp	r0, #1
   180e8:	beq	18124 <__assert_fail@plt+0x71ec>
   180ec:	cmp	r0, #3
   180f0:	beq	18154 <__assert_fail@plt+0x721c>
   180f4:	cmp	r4, #0
   180f8:	beq	18144 <__assert_fail@plt+0x720c>
   180fc:	bl	10e60 <__errno_location@plt>
   18100:	ldr	r6, [r0]
   18104:	cmp	r6, #22
   18108:	moveq	r6, #0
   1810c:	b	180bc <__assert_fail@plt+0x7184>
   18110:	bl	10e60 <__errno_location@plt>
   18114:	mov	r3, #75	; 0x4b
   18118:	mov	r6, r3
   1811c:	str	r3, [r0]
   18120:	b	180b4 <__assert_fail@plt+0x717c>
   18124:	bl	10e60 <__errno_location@plt>
   18128:	mov	r3, #75	; 0x4b
   1812c:	mov	r6, r3
   18130:	str	r3, [r0]
   18134:	cmp	r4, #0
   18138:	moveq	r4, #1
   1813c:	bne	18104 <__assert_fail@plt+0x71cc>
   18140:	b	180bc <__assert_fail@plt+0x7184>
   18144:	bl	10e60 <__errno_location@plt>
   18148:	mov	r4, #1
   1814c:	ldr	r6, [r0]
   18150:	b	18104 <__assert_fail@plt+0x71cc>
   18154:	bl	10e60 <__errno_location@plt>
   18158:	mov	r6, #0
   1815c:	str	r6, [r0]
   18160:	b	18134 <__assert_fail@plt+0x71fc>
   18164:	andeq	sl, r1, ip, lsr #1
   18168:	push	{r4, r5, r6, r7, lr}
   1816c:	sub	sp, sp, #20
   18170:	mov	r6, r2
   18174:	ldr	r1, [sp, #48]	; 0x30
   18178:	mov	r7, r3
   1817c:	str	r1, [sp]
   18180:	add	r3, sp, #8
   18184:	mov	r2, #10
   18188:	mov	r1, #0
   1818c:	mov	r5, r0
   18190:	ldr	r4, [sp, #56]	; 0x38
   18194:	bl	182a8 <__assert_fail@plt+0x7370>
   18198:	cmp	r0, #0
   1819c:	bne	18220 <__assert_fail@plt+0x72e8>
   181a0:	ldrd	r0, [sp, #8]
   181a4:	cmp	r7, r1
   181a8:	cmpeq	r6, r0
   181ac:	ldrd	r6, [sp, #40]	; 0x28
   181b0:	movhi	r3, #1
   181b4:	movls	r3, #0
   181b8:	cmp	r7, r1
   181bc:	cmpeq	r6, r0
   181c0:	orrcc	r3, r3, #1
   181c4:	cmp	r3, #0
   181c8:	beq	18218 <__assert_fail@plt+0x72e0>
   181cc:	mov	r3, #0
   181d0:	mvn	r2, #-1073741824	; 0xc0000000
   181d4:	cmp	r1, r3
   181d8:	cmpeq	r0, r2
   181dc:	bhi	1824c <__assert_fail@plt+0x7314>
   181e0:	bl	10e60 <__errno_location@plt>
   181e4:	mov	r3, #34	; 0x22
   181e8:	mov	r6, r3
   181ec:	str	r3, [r0]
   181f0:	cmp	r4, #0
   181f4:	moveq	r4, #1
   181f8:	mov	r0, r5
   181fc:	bl	16de8 <__assert_fail@plt+0x5eb0>
   18200:	mov	r1, r6
   18204:	ldr	r3, [sp, #52]	; 0x34
   18208:	ldr	r2, [pc, #144]	; 182a0 <__assert_fail@plt+0x7368>
   1820c:	str	r0, [sp]
   18210:	mov	r0, r4
   18214:	bl	10de8 <error@plt>
   18218:	add	sp, sp, #20
   1821c:	pop	{r4, r5, r6, r7, pc}
   18220:	cmp	r0, #1
   18224:	beq	18260 <__assert_fail@plt+0x7328>
   18228:	cmp	r0, #3
   1822c:	beq	18290 <__assert_fail@plt+0x7358>
   18230:	cmp	r4, #0
   18234:	beq	18280 <__assert_fail@plt+0x7348>
   18238:	bl	10e60 <__errno_location@plt>
   1823c:	ldr	r6, [r0]
   18240:	cmp	r6, #22
   18244:	moveq	r6, #0
   18248:	b	181f8 <__assert_fail@plt+0x72c0>
   1824c:	bl	10e60 <__errno_location@plt>
   18250:	mov	r3, #75	; 0x4b
   18254:	mov	r6, r3
   18258:	str	r3, [r0]
   1825c:	b	181f0 <__assert_fail@plt+0x72b8>
   18260:	bl	10e60 <__errno_location@plt>
   18264:	mov	r3, #75	; 0x4b
   18268:	mov	r6, r3
   1826c:	str	r3, [r0]
   18270:	cmp	r4, #0
   18274:	moveq	r4, #1
   18278:	bne	18240 <__assert_fail@plt+0x7308>
   1827c:	b	181f8 <__assert_fail@plt+0x72c0>
   18280:	bl	10e60 <__errno_location@plt>
   18284:	mov	r4, #1
   18288:	ldr	r6, [r0]
   1828c:	b	18240 <__assert_fail@plt+0x7308>
   18290:	bl	10e60 <__errno_location@plt>
   18294:	mov	r6, #0
   18298:	str	r6, [r0]
   1829c:	b	18270 <__assert_fail@plt+0x7338>
   182a0:	andeq	sl, r1, ip, lsr #1
   182a4:	andeq	r0, r0, r0
   182a8:	cmp	r2, #36	; 0x24
   182ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   182b0:	sub	sp, sp, #52	; 0x34
   182b4:	bhi	19044 <__assert_fail@plt+0x810c>
   182b8:	cmp	r1, #0
   182bc:	mov	r6, r2
   182c0:	mov	sl, r0
   182c4:	mov	r5, r1
   182c8:	mov	r8, r3
   182cc:	addeq	r5, sp, #44	; 0x2c
   182d0:	bl	10e60 <__errno_location@plt>
   182d4:	mov	r3, #0
   182d8:	str	r3, [r0]
   182dc:	mov	fp, r0
   182e0:	bl	10e30 <__ctype_b_loc@plt>
   182e4:	ldrb	r3, [sl]
   182e8:	mov	r2, sl
   182ec:	ldr	r0, [r0]
   182f0:	b	182f8 <__assert_fail@plt+0x73c0>
   182f4:	ldrb	r3, [r2, #1]!
   182f8:	lsl	r1, r3, #1
   182fc:	ldrh	r4, [r0, r1]
   18300:	ands	r4, r4, #8192	; 0x2000
   18304:	bne	182f4 <__assert_fail@plt+0x73bc>
   18308:	cmp	r3, #45	; 0x2d
   1830c:	bne	18320 <__assert_fail@plt+0x73e8>
   18310:	mov	r4, #4
   18314:	mov	r0, r4
   18318:	add	sp, sp, #52	; 0x34
   1831c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18320:	mov	r2, r6
   18324:	mov	r3, r4
   18328:	mov	r1, r5
   1832c:	mov	r0, sl
   18330:	bl	10d40 <__strtoull_internal@plt>
   18334:	ldr	r9, [r5]
   18338:	cmp	sl, r9
   1833c:	mov	r6, r0
   18340:	mov	r7, r1
   18344:	beq	1838c <__assert_fail@plt+0x7454>
   18348:	ldr	r4, [fp]
   1834c:	cmp	r4, #0
   18350:	bne	1837c <__assert_fail@plt+0x7444>
   18354:	ldr	r3, [sp, #88]	; 0x58
   18358:	cmp	r3, #0
   1835c:	beq	1836c <__assert_fail@plt+0x7434>
   18360:	ldrb	sl, [r9]
   18364:	cmp	sl, #0
   18368:	bne	183c0 <__assert_fail@plt+0x7488>
   1836c:	mov	r0, r4
   18370:	strd	r6, [r8]
   18374:	add	sp, sp, #52	; 0x34
   18378:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1837c:	cmp	r4, #34	; 0x22
   18380:	bne	18310 <__assert_fail@plt+0x73d8>
   18384:	mov	r4, #1
   18388:	b	18354 <__assert_fail@plt+0x741c>
   1838c:	ldr	r3, [sp, #88]	; 0x58
   18390:	cmp	r3, #0
   18394:	beq	18310 <__assert_fail@plt+0x73d8>
   18398:	ldrb	sl, [r9]
   1839c:	cmp	sl, #0
   183a0:	beq	18310 <__assert_fail@plt+0x73d8>
   183a4:	mov	r1, sl
   183a8:	mov	r0, r3
   183ac:	bl	10e54 <strchr@plt>
   183b0:	cmp	r0, #0
   183b4:	movne	r6, #1
   183b8:	movne	r7, #0
   183bc:	beq	18310 <__assert_fail@plt+0x73d8>
   183c0:	mov	r1, sl
   183c4:	ldr	r0, [sp, #88]	; 0x58
   183c8:	bl	10e54 <strchr@plt>
   183cc:	cmp	r0, #0
   183d0:	beq	18f30 <__assert_fail@plt+0x7ff8>
   183d4:	sub	r3, sl, #69	; 0x45
   183d8:	cmp	r3, #47	; 0x2f
   183dc:	ldrls	pc, [pc, r3, lsl #2]
   183e0:	b	184d4 <__assert_fail@plt+0x759c>
   183e4:	andeq	r8, r1, r4, lsr #9
   183e8:	ldrdeq	r8, [r1], -r4
   183ec:	andeq	r8, r1, r4, lsr #9
   183f0:	ldrdeq	r8, [r1], -r4
   183f4:	ldrdeq	r8, [r1], -r4
   183f8:	ldrdeq	r8, [r1], -r4
   183fc:	andeq	r8, r1, r4, lsr #9
   18400:	ldrdeq	r8, [r1], -r4
   18404:	andeq	r8, r1, r4, lsr #9
   18408:	ldrdeq	r8, [r1], -r4
   1840c:	ldrdeq	r8, [r1], -r4
   18410:	andeq	r8, r1, r4, lsr #9
   18414:	ldrdeq	r8, [r1], -r4
   18418:	ldrdeq	r8, [r1], -r4
   1841c:	ldrdeq	r8, [r1], -r4
   18420:	andeq	r8, r1, r4, lsr #9
   18424:	ldrdeq	r8, [r1], -r4
   18428:	ldrdeq	r8, [r1], -r4
   1842c:	ldrdeq	r8, [r1], -r4
   18430:	ldrdeq	r8, [r1], -r4
   18434:	andeq	r8, r1, r4, lsr #9
   18438:	andeq	r8, r1, r4, lsr #9
   1843c:	ldrdeq	r8, [r1], -r4
   18440:	ldrdeq	r8, [r1], -r4
   18444:	ldrdeq	r8, [r1], -r4
   18448:	ldrdeq	r8, [r1], -r4
   1844c:	ldrdeq	r8, [r1], -r4
   18450:	ldrdeq	r8, [r1], -r4
   18454:	ldrdeq	r8, [r1], -r4
   18458:	ldrdeq	r8, [r1], -r4
   1845c:	ldrdeq	r8, [r1], -r4
   18460:	ldrdeq	r8, [r1], -r4
   18464:	ldrdeq	r8, [r1], -r4
   18468:	ldrdeq	r8, [r1], -r4
   1846c:	andeq	r8, r1, r4, lsr #9
   18470:	ldrdeq	r8, [r1], -r4
   18474:	ldrdeq	r8, [r1], -r4
   18478:	ldrdeq	r8, [r1], -r4
   1847c:	andeq	r8, r1, r4, lsr #9
   18480:	ldrdeq	r8, [r1], -r4
   18484:	andeq	r8, r1, r4, lsr #9
   18488:	ldrdeq	r8, [r1], -r4
   1848c:	ldrdeq	r8, [r1], -r4
   18490:	ldrdeq	r8, [r1], -r4
   18494:	ldrdeq	r8, [r1], -r4
   18498:	ldrdeq	r8, [r1], -r4
   1849c:	ldrdeq	r8, [r1], -r4
   184a0:	andeq	r8, r1, r4, lsr #9
   184a4:	mov	r1, #48	; 0x30
   184a8:	ldr	r0, [sp, #88]	; 0x58
   184ac:	bl	10e54 <strchr@plt>
   184b0:	cmp	r0, #0
   184b4:	beq	18fc4 <__assert_fail@plt+0x808c>
   184b8:	ldrb	r3, [r9, #1]
   184bc:	cmp	r3, #68	; 0x44
   184c0:	beq	18fa4 <__assert_fail@plt+0x806c>
   184c4:	cmp	r3, #105	; 0x69
   184c8:	beq	18f74 <__assert_fail@plt+0x803c>
   184cc:	cmp	r3, #66	; 0x42
   184d0:	beq	18fa4 <__assert_fail@plt+0x806c>
   184d4:	ldr	r3, [pc, #2948]	; 19060 <__assert_fail@plt+0x8128>
   184d8:	mvn	r2, #0
   184dc:	mov	r1, #1024	; 0x400
   184e0:	mov	lr, #0
   184e4:	strd	r2, [sp]
   184e8:	mov	r3, #1
   184ec:	str	r3, [sp, #12]
   184f0:	sub	sl, sl, #66	; 0x42
   184f4:	cmp	sl, #53	; 0x35
   184f8:	ldrls	pc, [pc, sl, lsl #2]
   184fc:	b	18f30 <__assert_fail@plt+0x7ff8>
   18500:	andeq	r8, r1, r0, lsl #30
   18504:	andeq	r8, r1, r0, lsr pc
   18508:	andeq	r8, r1, r0, lsr pc
   1850c:	andeq	r8, r1, ip, ror sp
   18510:	andeq	r8, r1, r0, lsr pc
   18514:			; <UNDEFINED> instruction: 0x00018cb8
   18518:	andeq	r8, r1, r0, lsr pc
   1851c:	andeq	r8, r1, r0, lsr pc
   18520:	andeq	r8, r1, r0, lsr pc
   18524:	andeq	r8, r1, ip, lsr pc
   18528:	andeq	r8, r1, r0, lsr pc
   1852c:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18530:	andeq	r8, r1, r0, lsr pc
   18534:	andeq	r8, r1, r0, lsr pc
   18538:	andeq	r8, r1, r4, ror #12
   1853c:	andeq	r8, r1, r0, lsr pc
   18540:	andeq	r8, r1, r0, lsr pc
   18544:	andeq	r8, r1, r0, lsr pc
   18548:	andeq	r8, r1, r4, ror #19
   1854c:	andeq	r8, r1, r0, lsr pc
   18550:	andeq	r8, r1, r0, lsr pc
   18554:	andeq	r8, r1, r0, lsr pc
   18558:	andeq	r8, r1, r0, lsr pc
   1855c:			; <UNDEFINED> instruction: 0x000187bc
   18560:	andeq	r8, r1, r8, lsl fp
   18564:	andeq	r8, r1, r0, lsr pc
   18568:	andeq	r8, r1, r0, lsr pc
   1856c:	andeq	r8, r1, r0, lsr pc
   18570:	andeq	r8, r1, r0, lsr pc
   18574:	andeq	r8, r1, r0, lsr pc
   18578:	andeq	r8, r1, r0, lsr pc
   1857c:	andeq	r8, r1, r0, lsr pc
   18580:	andeq	r8, r1, r8, ror #21
   18584:	andeq	r8, r1, r0, ror #21
   18588:	andeq	r8, r1, r0, lsr pc
   1858c:	andeq	r8, r1, r0, lsr pc
   18590:	andeq	r8, r1, r0, lsr pc
   18594:			; <UNDEFINED> instruction: 0x00018cb8
   18598:	andeq	r8, r1, r0, lsr pc
   1859c:	andeq	r8, r1, r0, lsr pc
   185a0:	andeq	r8, r1, r0, lsr pc
   185a4:	andeq	r8, r1, ip, lsr pc
   185a8:	andeq	r8, r1, r0, lsr pc
   185ac:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   185b0:	andeq	r8, r1, r0, lsr pc
   185b4:	andeq	r8, r1, r0, lsr pc
   185b8:	andeq	r8, r1, r0, lsr pc
   185bc:	andeq	r8, r1, r0, lsr pc
   185c0:	andeq	r8, r1, r0, lsr pc
   185c4:	andeq	r8, r1, r0, lsr pc
   185c8:	andeq	r8, r1, r4, ror #19
   185cc:	andeq	r8, r1, r0, lsr pc
   185d0:	andeq	r8, r1, r0, lsr pc
   185d4:	andeq	r8, r1, r4, asr #21
   185d8:	mul	r0, r6, lr
   185dc:	ldrd	sl, [sp]
   185e0:	umull	r2, r3, r6, r1
   185e4:	mla	r0, r1, r7, r0
   185e8:	cmp	r7, fp
   185ec:	cmpeq	r6, sl
   185f0:	add	r3, r0, r3
   185f4:	mvnhi	r3, #0
   185f8:	mvnhi	r2, #0
   185fc:	mul	r6, r1, r3
   18600:	umull	r0, r1, r1, r2
   18604:	mla	lr, lr, r2, r6
   18608:	ldrd	r6, [sp]
   1860c:	movhi	ip, #1
   18610:	movls	ip, #0
   18614:	cmp	r7, r3
   18618:	cmpeq	r6, r2
   1861c:	mvncc	r0, #0
   18620:	add	r1, lr, r1
   18624:	mov	sl, r6
   18628:	movcc	r1, r0
   1862c:	mov	fp, r7
   18630:	cmp	fp, r3
   18634:	cmpeq	sl, r2
   18638:	mov	r6, r0
   1863c:	mov	r7, r1
   18640:	orrcc	ip, ip, #1
   18644:	ldr	r2, [sp, #12]
   18648:	orr	r4, r4, ip
   1864c:	add	r3, r9, r2
   18650:	str	r3, [r5]
   18654:	ldrb	r3, [r9, r2]
   18658:	cmp	r3, #0
   1865c:	orrne	r4, r4, #2
   18660:	b	1836c <__assert_fail@plt+0x7434>
   18664:	ldrd	sl, [sp]
   18668:	umull	r2, r3, r6, r1
   1866c:	mul	r0, r6, lr
   18670:	cmp	r7, fp
   18674:	cmpeq	r6, sl
   18678:	mvnhi	r2, #0
   1867c:	mla	r0, r1, r7, r0
   18680:	umull	sl, fp, r2, r1
   18684:	add	r3, r0, r3
   18688:	mul	r0, lr, r2
   1868c:	mvnhi	r3, #0
   18690:	strd	sl, [sp, #16]
   18694:	ldrd	sl, [sp]
   18698:	mla	r0, r1, r3, r0
   1869c:	ldr	ip, [sp, #20]
   186a0:	cmp	r3, fp
   186a4:	add	r0, r0, ip
   186a8:	cmpeq	r2, sl
   186ac:	str	r0, [sp, #20]
   186b0:	bls	186c8 <__assert_fail@plt+0x7790>
   186b4:	mvn	sl, #0
   186b8:	mvn	fp, #0
   186bc:	strd	sl, [sp, #16]
   186c0:	ldr	r0, [sp, #20]
   186c4:	ldrd	sl, [sp]
   186c8:	cmp	r7, fp
   186cc:	cmpeq	r6, sl
   186d0:	mul	r0, r1, r0
   186d4:	ldrd	r6, [sp, #16]
   186d8:	mla	ip, lr, r6, r0
   186dc:	mov	r0, r6
   186e0:	movhi	r0, #1
   186e4:	movls	r0, #0
   186e8:	cmp	r3, fp
   186ec:	cmpeq	r2, sl
   186f0:	ldrd	r2, [sp, #16]
   186f4:	umull	r6, r7, r1, r6
   186f8:	orrhi	r0, r0, #1
   186fc:	cmp	fp, r3
   18700:	cmpeq	sl, r2
   18704:	add	r7, ip, r7
   18708:	bcc	19014 <__assert_fail@plt+0x80dc>
   1870c:	mov	sl, r6
   18710:	mov	fp, r7
   18714:	strd	r6, [sp, #24]
   18718:	mul	r3, r1, fp
   1871c:	umull	r6, r7, r1, sl
   18720:	mla	ip, lr, sl, r3
   18724:	ldrd	sl, [sp]
   18728:	ldrd	r2, [sp, #16]
   1872c:	add	r7, ip, r7
   18730:	cmp	fp, r3
   18734:	cmpeq	sl, r2
   18738:	mov	r3, fp
   1873c:	mov	r2, sl
   18740:	ldrd	sl, [sp, #24]
   18744:	orrcc	r0, r0, #1
   18748:	str	r0, [sp, #16]
   1874c:	cmp	r3, fp
   18750:	cmpeq	r2, sl
   18754:	bcs	18cac <__assert_fail@plt+0x7d74>
   18758:	mvn	r2, #0
   1875c:	mvn	r3, #0
   18760:	mul	ip, lr, r2
   18764:	ldrd	sl, [sp]
   18768:	mla	ip, r1, r3, ip
   1876c:	umull	r6, r7, r2, r1
   18770:	ldrd	r0, [sp, #24]
   18774:	add	r7, ip, r7
   18778:	cmp	fp, r1
   1877c:	ldr	r1, [sp, #16]
   18780:	cmpeq	sl, r0
   18784:	orrcc	r1, r1, #1
   18788:	cmp	r3, fp
   1878c:	cmpeq	r2, sl
   18790:	mvnhi	r0, #0
   18794:	movls	ip, r7
   18798:	movhi	ip, r0
   1879c:	movls	r0, r6
   187a0:	cmp	r3, fp
   187a4:	cmpeq	r2, sl
   187a8:	mov	r7, ip
   187ac:	mov	r6, r0
   187b0:	movls	ip, r1
   187b4:	orrhi	ip, r1, #1
   187b8:	b	18644 <__assert_fail@plt+0x770c>
   187bc:	ldrd	sl, [sp]
   187c0:	umull	r2, r3, r6, r1
   187c4:	mul	r0, r6, lr
   187c8:	cmp	r7, fp
   187cc:	cmpeq	r6, sl
   187d0:	mvnhi	r2, #0
   187d4:	mla	r0, r1, r7, r0
   187d8:	umull	sl, fp, r2, r1
   187dc:	add	r3, r0, r3
   187e0:	mul	r0, lr, r2
   187e4:	mvnhi	r3, #0
   187e8:	strd	sl, [sp, #16]
   187ec:	ldrd	sl, [sp]
   187f0:	mla	r0, r1, r3, r0
   187f4:	ldr	ip, [sp, #20]
   187f8:	cmp	r3, fp
   187fc:	add	r0, r0, ip
   18800:	cmpeq	r2, sl
   18804:	str	r0, [sp, #20]
   18808:	mvnhi	sl, #0
   1880c:	mvnhi	fp, #0
   18810:	strdhi	sl, [sp, #16]
   18814:	ldrdhi	sl, [sp]
   18818:	ldr	r0, [sp, #16]
   1881c:	cmp	r3, fp
   18820:	ldr	r3, [sp, #20]
   18824:	mul	r0, lr, r0
   18828:	cmpeq	r2, sl
   1882c:	mla	r0, r1, r3, r0
   18830:	ldr	r3, [sp, #16]
   18834:	umull	r2, r3, r3, r1
   18838:	strd	r2, [sp, #24]
   1883c:	movhi	r3, #1
   18840:	movls	r3, #0
   18844:	cmp	r7, fp
   18848:	cmpeq	r6, sl
   1884c:	ldrd	r6, [sp, #16]
   18850:	ldr	r2, [sp, #28]
   18854:	movls	ip, r3
   18858:	orrhi	ip, r3, #1
   1885c:	cmp	r7, fp
   18860:	add	r2, r0, r2
   18864:	cmpeq	r6, sl
   18868:	str	r2, [sp, #28]
   1886c:	mvnhi	r2, #0
   18870:	mvnhi	r3, #0
   18874:	strdhi	r2, [sp, #24]
   18878:	ldrd	r6, [sp, #24]
   1887c:	mul	r2, r1, r7
   18880:	umull	sl, fp, r1, r6
   18884:	mla	r3, lr, r6, r2
   18888:	ldrd	r6, [sp]
   1888c:	str	r3, [sp, #32]
   18890:	ldrd	r2, [sp, #16]
   18894:	cmp	r3, r7
   18898:	cmpeq	r2, r6
   1889c:	ldrd	r2, [sp, #24]
   188a0:	orrhi	ip, ip, #1
   188a4:	cmp	r3, r7
   188a8:	ldr	r3, [sp, #32]
   188ac:	cmpeq	r2, r6
   188b0:	add	r2, r3, fp
   188b4:	mov	fp, r2
   188b8:	bhi	18ffc <__assert_fail@plt+0x80c4>
   188bc:	strd	sl, [sp, #16]
   188c0:	mul	r2, r1, fp
   188c4:	umull	r6, r7, r1, sl
   188c8:	mla	r3, lr, sl, r2
   188cc:	ldrd	sl, [sp]
   188d0:	str	r3, [sp, #32]
   188d4:	ldrd	r2, [sp, #24]
   188d8:	cmp	r3, fp
   188dc:	cmpeq	r2, sl
   188e0:	ldrd	r2, [sp, #16]
   188e4:	orrhi	ip, ip, #1
   188e8:	cmp	fp, r3
   188ec:	ldr	r3, [sp, #32]
   188f0:	cmpeq	sl, r2
   188f4:	add	r2, r3, r7
   188f8:	mov	r7, r2
   188fc:	mvncc	r7, #0
   18900:	mvncc	r6, #0
   18904:	mul	r2, r1, r7
   18908:	mov	sl, r6
   1890c:	strd	r6, [sp, #24]
   18910:	mla	r0, lr, sl, r2
   18914:	ldrd	r2, [sp, #16]
   18918:	ldrd	sl, [sp]
   1891c:	umull	r6, r7, r1, r6
   18920:	cmp	fp, r3
   18924:	cmpeq	sl, r2
   18928:	mov	r3, fp
   1892c:	mov	r2, sl
   18930:	ldrd	sl, [sp, #24]
   18934:	orrcc	ip, ip, #1
   18938:	add	r7, r0, r7
   1893c:	cmp	r3, fp
   18940:	cmpeq	r2, sl
   18944:	mvncc	r6, #0
   18948:	mvncc	r7, #0
   1894c:	umull	sl, fp, r1, r6
   18950:	mul	r3, r1, r7
   18954:	strd	sl, [sp, #16]
   18958:	mla	r0, lr, r6, r3
   1895c:	ldrd	sl, [sp, #24]
   18960:	ldrd	r2, [sp]
   18964:	cmp	r3, fp
   18968:	cmpeq	r2, sl
   1896c:	orrcc	ip, ip, #1
   18970:	cmp	r3, r7
   18974:	ldr	r3, [sp, #20]
   18978:	cmpeq	r2, r6
   1897c:	add	r3, r0, r3
   18980:	str	r3, [sp, #20]
   18984:	mvncc	r2, #0
   18988:	mvncc	r3, #0
   1898c:	ldrdcs	r2, [sp, #16]
   18990:	ldrd	sl, [sp]
   18994:	mul	r0, r1, r3
   18998:	cmp	fp, r7
   1899c:	str	r0, [sp, #16]
   189a0:	cmpeq	sl, r6
   189a4:	ldr	r6, [sp, #16]
   189a8:	umull	r0, r1, r1, r2
   189ac:	mla	lr, lr, r2, r6
   189b0:	orrcc	ip, ip, #1
   189b4:	cmp	r3, fp
   189b8:	cmpeq	r2, sl
   189bc:	add	r1, lr, r1
   189c0:	bls	189cc <__assert_fail@plt+0x7a94>
   189c4:	mvn	r0, #0
   189c8:	mov	r1, r0
   189cc:	cmp	r3, fp
   189d0:	cmpeq	r2, sl
   189d4:	mov	r6, r0
   189d8:	mov	r7, r1
   189dc:	orrhi	ip, ip, #1
   189e0:	b	18644 <__assert_fail@plt+0x770c>
   189e4:	ldrd	sl, [sp]
   189e8:	umull	r2, r3, r6, r1
   189ec:	mul	r0, r6, lr
   189f0:	cmp	r7, fp
   189f4:	cmpeq	r6, sl
   189f8:	mvnhi	r2, #0
   189fc:	mla	r0, r1, r7, r0
   18a00:	umull	sl, fp, r1, r2
   18a04:	add	r3, r0, r3
   18a08:	mvnhi	r3, #0
   18a0c:	strd	sl, [sp, #16]
   18a10:	mul	r0, r1, r3
   18a14:	ldrd	sl, [sp]
   18a18:	mla	r0, lr, r2, r0
   18a1c:	ldr	ip, [sp, #20]
   18a20:	cmp	fp, r3
   18a24:	add	r0, r0, ip
   18a28:	cmpeq	sl, r2
   18a2c:	str	r0, [sp, #20]
   18a30:	mvncc	sl, #0
   18a34:	mvncc	fp, #0
   18a38:	strdcc	sl, [sp, #16]
   18a3c:	ldrdcc	sl, [sp]
   18a40:	ldr	r0, [sp, #16]
   18a44:	cmp	fp, r3
   18a48:	cmpeq	sl, r2
   18a4c:	mul	r0, lr, r0
   18a50:	ldr	r2, [sp, #20]
   18a54:	ldr	r3, [sp, #16]
   18a58:	movcc	ip, #1
   18a5c:	movcs	ip, #0
   18a60:	cmp	r7, fp
   18a64:	cmpeq	r6, sl
   18a68:	ldrd	r6, [sp, #16]
   18a6c:	mla	r0, r1, r2, r0
   18a70:	umull	r2, r3, r3, r1
   18a74:	orrhi	ip, ip, #1
   18a78:	cmp	r7, fp
   18a7c:	cmpeq	r6, sl
   18a80:	add	r3, r0, r3
   18a84:	mvnhi	r3, #0
   18a88:	mvnhi	r2, #0
   18a8c:	mul	r0, r1, r3
   18a90:	cmp	r7, fp
   18a94:	str	r0, [sp, #24]
   18a98:	cmpeq	r6, sl
   18a9c:	ldr	r6, [sp, #24]
   18aa0:	umull	r0, r1, r1, r2
   18aa4:	mla	lr, lr, r2, r6
   18aa8:	orrhi	ip, ip, #1
   18aac:	cmp	fp, r3
   18ab0:	cmpeq	sl, r2
   18ab4:	mvncc	r0, #0
   18ab8:	add	r1, lr, r1
   18abc:	movcc	r1, r0
   18ac0:	b	18630 <__assert_fail@plt+0x76f8>
   18ac4:	cmp	r6, #0
   18ac8:	sbcs	r3, r7, #0
   18acc:	blt	18f64 <__assert_fail@plt+0x802c>
   18ad0:	adds	r6, r6, r6
   18ad4:	adc	r7, r7, r7
   18ad8:	mov	ip, #0
   18adc:	b	18644 <__assert_fail@plt+0x770c>
   18ae0:	mov	ip, #0
   18ae4:	b	18644 <__assert_fail@plt+0x770c>
   18ae8:	ldr	r3, [pc, #1396]	; 19064 <__assert_fail@plt+0x812c>
   18aec:	mvn	r2, #0
   18af0:	cmp	r7, r3
   18af4:	cmpeq	r6, r2
   18af8:	bhi	18f64 <__assert_fail@plt+0x802c>
   18afc:	lsl	r3, r7, #9
   18b00:	orr	r3, r3, r6, lsr #23
   18b04:	lsl	r2, r6, #9
   18b08:	mov	r6, r2
   18b0c:	mov	r7, r3
   18b10:	mov	ip, #0
   18b14:	b	18644 <__assert_fail@plt+0x770c>
   18b18:	ldrd	sl, [sp]
   18b1c:	umull	r2, r3, r6, r1
   18b20:	mul	r0, r6, lr
   18b24:	cmp	r7, fp
   18b28:	cmpeq	r6, sl
   18b2c:	mvnhi	r2, #0
   18b30:	mla	r0, r1, r7, r0
   18b34:	umull	sl, fp, r2, r1
   18b38:	add	r3, r0, r3
   18b3c:	mul	r0, lr, r2
   18b40:	mvnhi	r3, #0
   18b44:	strd	sl, [sp, #16]
   18b48:	ldrd	sl, [sp]
   18b4c:	mla	r0, r1, r3, r0
   18b50:	ldr	ip, [sp, #20]
   18b54:	cmp	r3, fp
   18b58:	add	r0, r0, ip
   18b5c:	cmpeq	r2, sl
   18b60:	str	r0, [sp, #20]
   18b64:	mvnhi	sl, #0
   18b68:	mvnhi	fp, #0
   18b6c:	strdhi	sl, [sp, #16]
   18b70:	ldrdhi	sl, [sp]
   18b74:	ldr	r0, [sp, #16]
   18b78:	cmp	r3, fp
   18b7c:	ldr	r3, [sp, #20]
   18b80:	mul	r0, lr, r0
   18b84:	cmpeq	r2, sl
   18b88:	mla	r0, r1, r3, r0
   18b8c:	ldr	r3, [sp, #16]
   18b90:	umull	r2, r3, r3, r1
   18b94:	strd	r2, [sp, #24]
   18b98:	movhi	r3, #1
   18b9c:	movls	r3, #0
   18ba0:	cmp	r7, fp
   18ba4:	cmpeq	r6, sl
   18ba8:	ldrd	r6, [sp, #16]
   18bac:	ldr	r2, [sp, #28]
   18bb0:	movls	ip, r3
   18bb4:	orrhi	ip, r3, #1
   18bb8:	cmp	r7, fp
   18bbc:	add	r2, r0, r2
   18bc0:	cmpeq	r6, sl
   18bc4:	str	r2, [sp, #28]
   18bc8:	mvnhi	r2, #0
   18bcc:	mvnhi	r3, #0
   18bd0:	strdhi	r2, [sp, #24]
   18bd4:	ldrd	r6, [sp, #24]
   18bd8:	mul	r2, lr, r6
   18bdc:	umull	sl, fp, r6, r1
   18be0:	mla	r3, r1, r7, r2
   18be4:	ldrd	r6, [sp]
   18be8:	str	r3, [sp, #32]
   18bec:	ldrd	r2, [sp, #16]
   18bf0:	cmp	r3, r7
   18bf4:	cmpeq	r2, r6
   18bf8:	ldrd	r2, [sp, #24]
   18bfc:	orrhi	ip, ip, #1
   18c00:	cmp	r3, r7
   18c04:	ldr	r3, [sp, #32]
   18c08:	cmpeq	r2, r6
   18c0c:	add	r2, r3, fp
   18c10:	mov	fp, r2
   18c14:	bhi	1902c <__assert_fail@plt+0x80f4>
   18c18:	strd	sl, [sp, #16]
   18c1c:	mul	r2, lr, sl
   18c20:	umull	r6, r7, sl, r1
   18c24:	mla	r3, r1, fp, r2
   18c28:	ldrd	sl, [sp]
   18c2c:	str	r3, [sp, #32]
   18c30:	ldrd	r2, [sp, #24]
   18c34:	cmp	r3, fp
   18c38:	cmpeq	r2, sl
   18c3c:	ldrd	r2, [sp, #16]
   18c40:	orrhi	ip, ip, #1
   18c44:	cmp	r3, fp
   18c48:	ldr	r3, [sp, #32]
   18c4c:	cmpeq	r2, sl
   18c50:	add	r2, r3, r7
   18c54:	mov	r7, r2
   18c58:	mvnhi	r7, #0
   18c5c:	mvnhi	r6, #0
   18c60:	mul	r2, r1, r7
   18c64:	mov	sl, r6
   18c68:	strd	r6, [sp, #24]
   18c6c:	mla	r0, lr, sl, r2
   18c70:	ldrd	sl, [sp]
   18c74:	ldrd	r2, [sp, #16]
   18c78:	umull	r6, r7, r1, r6
   18c7c:	cmp	r3, fp
   18c80:	cmpeq	r2, sl
   18c84:	mov	r3, ip
   18c88:	orrhi	r3, r3, #1
   18c8c:	mov	r2, sl
   18c90:	str	r3, [sp, #16]
   18c94:	mov	r3, fp
   18c98:	ldrd	sl, [sp, #24]
   18c9c:	add	r7, r0, r7
   18ca0:	cmp	r3, fp
   18ca4:	cmpeq	r2, sl
   18ca8:	bcc	18758 <__assert_fail@plt+0x7820>
   18cac:	mov	r2, r6
   18cb0:	mov	r3, r7
   18cb4:	b	18760 <__assert_fail@plt+0x7828>
   18cb8:	ldrd	sl, [sp]
   18cbc:	umull	r2, r3, r6, r1
   18cc0:	mul	r0, r6, lr
   18cc4:	cmp	r7, fp
   18cc8:	cmpeq	r6, sl
   18ccc:	mvnhi	r2, #0
   18cd0:	mla	r0, r1, r7, r0
   18cd4:	umull	sl, fp, r2, r1
   18cd8:	add	r3, r0, r3
   18cdc:	mul	r0, lr, r2
   18ce0:	mvnhi	r3, #0
   18ce4:	strd	sl, [sp, #16]
   18ce8:	ldrd	sl, [sp]
   18cec:	mla	r0, r1, r3, r0
   18cf0:	ldr	ip, [sp, #20]
   18cf4:	cmp	r3, fp
   18cf8:	add	r0, r0, ip
   18cfc:	cmpeq	r2, sl
   18d00:	str	r0, [sp, #20]
   18d04:	mvnhi	sl, #0
   18d08:	mvnhi	fp, #0
   18d0c:	strdhi	sl, [sp, #16]
   18d10:	ldrdhi	sl, [sp]
   18d14:	ldr	r0, [sp, #16]
   18d18:	cmp	r3, fp
   18d1c:	ldr	ip, [sp, #20]
   18d20:	mul	r0, lr, r0
   18d24:	ldr	r3, [sp, #16]
   18d28:	cmpeq	r2, sl
   18d2c:	mla	r0, r1, ip, r0
   18d30:	umull	r2, r3, r3, r1
   18d34:	movhi	r1, #1
   18d38:	movls	r1, #0
   18d3c:	cmp	r7, fp
   18d40:	cmpeq	r6, sl
   18d44:	ldrd	r6, [sp, #16]
   18d48:	movls	ip, r1
   18d4c:	orrhi	ip, r1, #1
   18d50:	cmp	r7, fp
   18d54:	cmpeq	r6, sl
   18d58:	mvnhi	r2, #0
   18d5c:	add	r3, r0, r3
   18d60:	movhi	r3, r2
   18d64:	cmp	r7, fp
   18d68:	cmpeq	r6, sl
   18d6c:	mov	r7, r3
   18d70:	mov	r6, r2
   18d74:	orrhi	ip, ip, #1
   18d78:	b	18644 <__assert_fail@plt+0x770c>
   18d7c:	ldrd	sl, [sp]
   18d80:	umull	r2, r3, r6, r1
   18d84:	mul	r0, r6, lr
   18d88:	cmp	r7, fp
   18d8c:	cmpeq	r6, sl
   18d90:	mvnhi	r2, #0
   18d94:	mla	r0, r1, r7, r0
   18d98:	umull	sl, fp, r1, r2
   18d9c:	add	r3, r0, r3
   18da0:	mvnhi	r3, #0
   18da4:	strd	sl, [sp, #16]
   18da8:	mul	r0, r1, r3
   18dac:	ldrd	sl, [sp]
   18db0:	mla	r0, lr, r2, r0
   18db4:	ldr	ip, [sp, #20]
   18db8:	cmp	fp, r3
   18dbc:	add	r0, r0, ip
   18dc0:	cmpeq	sl, r2
   18dc4:	str	r0, [sp, #20]
   18dc8:	mvncc	sl, #0
   18dcc:	mvncc	fp, #0
   18dd0:	strdcc	sl, [sp, #16]
   18dd4:	ldrdcc	sl, [sp]
   18dd8:	ldr	r0, [sp, #16]
   18ddc:	cmp	fp, r3
   18de0:	ldr	r3, [sp, #20]
   18de4:	mul	r0, lr, r0
   18de8:	cmpeq	sl, r2
   18dec:	mla	r0, r1, r3, r0
   18df0:	ldr	r3, [sp, #16]
   18df4:	umull	r2, r3, r3, r1
   18df8:	strd	r2, [sp, #24]
   18dfc:	movcc	r3, #1
   18e00:	movcs	r3, #0
   18e04:	cmp	r7, fp
   18e08:	cmpeq	r6, sl
   18e0c:	movls	ip, r3
   18e10:	orrhi	ip, r3, #1
   18e14:	ldrd	r2, [sp, #16]
   18e18:	cmp	r3, fp
   18e1c:	ldr	r3, [sp, #28]
   18e20:	cmpeq	r2, sl
   18e24:	add	r3, r0, r3
   18e28:	str	r3, [sp, #28]
   18e2c:	bhi	18fe4 <__assert_fail@plt+0x80ac>
   18e30:	ldrd	r2, [sp, #24]
   18e34:	mov	sl, r2
   18e38:	mov	fp, r3
   18e3c:	mul	r2, lr, sl
   18e40:	umull	r6, r7, sl, r1
   18e44:	mla	r0, r1, fp, r2
   18e48:	ldrd	r2, [sp]
   18e4c:	add	r7, r0, r7
   18e50:	mov	sl, r2
   18e54:	mov	fp, r3
   18e58:	strd	r2, [sp, #32]
   18e5c:	ldrd	r2, [sp, #16]
   18e60:	cmp	r3, fp
   18e64:	cmpeq	r2, sl
   18e68:	ldrd	r2, [sp, #32]
   18e6c:	ldrd	sl, [sp, #24]
   18e70:	orrhi	ip, ip, #1
   18e74:	cmp	fp, r3
   18e78:	cmpeq	sl, r2
   18e7c:	mvnhi	r6, #0
   18e80:	mvnhi	r7, #0
   18e84:	umull	sl, fp, r6, r1
   18e88:	mul	r3, lr, r6
   18e8c:	strd	sl, [sp, #16]
   18e90:	mla	r0, r1, r7, r3
   18e94:	ldrd	sl, [sp, #24]
   18e98:	ldrd	r2, [sp]
   18e9c:	cmp	fp, r3
   18ea0:	cmpeq	sl, r2
   18ea4:	orrhi	ip, ip, #1
   18ea8:	cmp	r7, r3
   18eac:	ldr	r3, [sp, #20]
   18eb0:	cmpeq	r6, r2
   18eb4:	add	r3, r0, r3
   18eb8:	str	r3, [sp, #20]
   18ebc:	mvnhi	r2, #0
   18ec0:	mvnhi	r3, #0
   18ec4:	ldrdls	r2, [sp, #16]
   18ec8:	ldrd	sl, [sp]
   18ecc:	mul	r0, r1, r3
   18ed0:	cmp	r7, fp
   18ed4:	str	r0, [sp, #16]
   18ed8:	cmpeq	r6, sl
   18edc:	ldr	r6, [sp, #16]
   18ee0:	umull	r0, r1, r1, r2
   18ee4:	mla	lr, lr, r2, r6
   18ee8:	orrhi	ip, ip, #1
   18eec:	cmp	r3, fp
   18ef0:	cmpeq	r2, sl
   18ef4:	add	r1, lr, r1
   18ef8:	bls	189cc <__assert_fail@plt+0x7a94>
   18efc:	b	189c4 <__assert_fail@plt+0x7a8c>
   18f00:	ldr	r3, [pc, #344]	; 19060 <__assert_fail@plt+0x8128>
   18f04:	mvn	r2, #0
   18f08:	cmp	r7, r3
   18f0c:	cmpeq	r6, r2
   18f10:	bhi	18f64 <__assert_fail@plt+0x802c>
   18f14:	lsl	r3, r7, #10
   18f18:	orr	r3, r3, r6, lsr #22
   18f1c:	lsl	r2, r6, #10
   18f20:	mov	r6, r2
   18f24:	mov	r7, r3
   18f28:	mov	ip, #0
   18f2c:	b	18644 <__assert_fail@plt+0x770c>
   18f30:	strd	r6, [r8]
   18f34:	orr	r4, r4, #2
   18f38:	b	18314 <__assert_fail@plt+0x73dc>
   18f3c:	ldrd	r2, [sp]
   18f40:	cmp	r7, r3
   18f44:	cmpeq	r6, r2
   18f48:	bhi	18f64 <__assert_fail@plt+0x802c>
   18f4c:	mul	r3, r6, lr
   18f50:	mov	ip, #0
   18f54:	mla	r3, r1, r7, r3
   18f58:	umull	r6, r7, r6, r1
   18f5c:	add	r7, r3, r7
   18f60:	b	18644 <__assert_fail@plt+0x770c>
   18f64:	mvn	r6, #0
   18f68:	mvn	r7, #0
   18f6c:	mov	ip, #1
   18f70:	b	18644 <__assert_fail@plt+0x770c>
   18f74:	ldrb	r3, [r9, #2]
   18f78:	mvn	r2, #0
   18f7c:	mov	r1, #1024	; 0x400
   18f80:	cmp	r3, #66	; 0x42
   18f84:	ldr	r3, [pc, #212]	; 19060 <__assert_fail@plt+0x8128>
   18f88:	mov	lr, #0
   18f8c:	strd	r2, [sp]
   18f90:	moveq	r3, #3
   18f94:	streq	r3, [sp, #12]
   18f98:	movne	r3, #1
   18f9c:	strne	r3, [sp, #12]
   18fa0:	b	184f0 <__assert_fail@plt+0x75b8>
   18fa4:	add	r3, pc, #172	; 0xac
   18fa8:	ldrd	r2, [r3]
   18fac:	mov	r1, #1000	; 0x3e8
   18fb0:	mov	lr, #0
   18fb4:	strd	r2, [sp]
   18fb8:	mov	r3, #2
   18fbc:	str	r3, [sp, #12]
   18fc0:	b	184f0 <__assert_fail@plt+0x75b8>
   18fc4:	ldr	r3, [pc, #148]	; 19060 <__assert_fail@plt+0x8128>
   18fc8:	mvn	r2, #0
   18fcc:	mov	lr, r0
   18fd0:	strd	r2, [sp]
   18fd4:	mov	r3, #1
   18fd8:	mov	r1, #1024	; 0x400
   18fdc:	str	r3, [sp, #12]
   18fe0:	b	184f0 <__assert_fail@plt+0x75b8>
   18fe4:	mvn	r2, #0
   18fe8:	mvn	r3, #0
   18fec:	mov	sl, r2
   18ff0:	strd	r2, [sp, #24]
   18ff4:	mov	fp, r3
   18ff8:	b	18e3c <__assert_fail@plt+0x7f04>
   18ffc:	mvn	r2, #0
   19000:	mvn	r3, #0
   19004:	mov	sl, r2
   19008:	strd	r2, [sp, #16]
   1900c:	mov	fp, r3
   19010:	b	188c0 <__assert_fail@plt+0x7988>
   19014:	mvn	r2, #0
   19018:	mvn	r3, #0
   1901c:	mov	sl, r2
   19020:	strd	r2, [sp, #24]
   19024:	mov	fp, r3
   19028:	b	18718 <__assert_fail@plt+0x77e0>
   1902c:	mvn	r2, #0
   19030:	mvn	r3, #0
   19034:	mov	sl, r2
   19038:	strd	r2, [sp, #16]
   1903c:	mov	fp, r3
   19040:	b	18c1c <__assert_fail@plt+0x7ce4>
   19044:	ldr	r3, [pc, #28]	; 19068 <__assert_fail@plt+0x8130>
   19048:	mov	r2, #85	; 0x55
   1904c:	ldr	r1, [pc, #24]	; 1906c <__assert_fail@plt+0x8134>
   19050:	ldr	r0, [pc, #24]	; 19070 <__assert_fail@plt+0x8138>
   19054:	bl	10f38 <__assert_fail@plt>
   19058:	blmi	ff1c301c <optarg@@GLIBC_2.4+0xff197ec4>
   1905c:	subeq	r8, r1, r7, lsr r9
   19060:	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
   19064:	ldrshteq	pc, [pc], #-255	; <UNPREDICTABLE>
   19068:	strdeq	sl, [r1], -r8
   1906c:	andeq	sl, r1, r4, lsl #10
   19070:	andeq	sl, r1, r4, lsl r5
   19074:	cmp	r1, #0
   19078:	cmpne	r0, #0
   1907c:	moveq	r1, #1
   19080:	moveq	r0, r1
   19084:	umull	r2, r3, r0, r1
   19088:	adds	r3, r3, #0
   1908c:	movne	r3, #1
   19090:	cmp	r2, #0
   19094:	blt	190a4 <__assert_fail@plt+0x816c>
   19098:	cmp	r3, #0
   1909c:	bne	190a4 <__assert_fail@plt+0x816c>
   190a0:	b	10cc8 <calloc@plt>
   190a4:	push	{r4, lr}
   190a8:	bl	10e60 <__errno_location@plt>
   190ac:	mov	r3, #12
   190b0:	str	r3, [r0]
   190b4:	mov	r0, #0
   190b8:	pop	{r4, pc}
   190bc:	cmp	r0, #0
   190c0:	moveq	r0, #1
   190c4:	cmp	r0, #0
   190c8:	blt	190d0 <__assert_fail@plt+0x8198>
   190cc:	b	10df4 <malloc@plt>
   190d0:	push	{r4, lr}
   190d4:	bl	10e60 <__errno_location@plt>
   190d8:	mov	r3, #12
   190dc:	str	r3, [r0]
   190e0:	mov	r0, #0
   190e4:	pop	{r4, pc}
   190e8:	cmp	r0, #0
   190ec:	beq	19110 <__assert_fail@plt+0x81d8>
   190f0:	cmp	r1, #0
   190f4:	push	{lr}		; (str lr, [sp, #-4]!)
   190f8:	sub	sp, sp, #12
   190fc:	beq	19118 <__assert_fail@plt+0x81e0>
   19100:	blt	19130 <__assert_fail@plt+0x81f8>
   19104:	add	sp, sp, #12
   19108:	pop	{lr}		; (ldr lr, [sp], #4)
   1910c:	b	10d88 <realloc@plt>
   19110:	mov	r0, r1
   19114:	b	190bc <__assert_fail@plt+0x8184>
   19118:	str	r1, [sp, #4]
   1911c:	bl	191c0 <__assert_fail@plt+0x8288>
   19120:	ldr	r3, [sp, #4]
   19124:	mov	r0, r3
   19128:	add	sp, sp, #12
   1912c:	pop	{pc}		; (ldr pc, [sp], #4)
   19130:	bl	10e60 <__errno_location@plt>
   19134:	mov	r2, #12
   19138:	mov	r3, #0
   1913c:	str	r2, [r0]
   19140:	b	19124 <__assert_fail@plt+0x81ec>
   19144:	push	{r4, r5, r6, lr}
   19148:	mov	r4, r0
   1914c:	bl	10dd0 <__fpending@plt>
   19150:	ldr	r5, [r4]
   19154:	and	r5, r5, #32
   19158:	mov	r6, r0
   1915c:	mov	r0, r4
   19160:	bl	12d7c <__assert_fail@plt+0x1e44>
   19164:	cmp	r5, #0
   19168:	mov	r4, r0
   1916c:	bne	1918c <__assert_fail@plt+0x8254>
   19170:	cmp	r0, #0
   19174:	beq	19184 <__assert_fail@plt+0x824c>
   19178:	cmp	r6, #0
   1917c:	beq	191a8 <__assert_fail@plt+0x8270>
   19180:	mvn	r4, #0
   19184:	mov	r0, r4
   19188:	pop	{r4, r5, r6, pc}
   1918c:	cmp	r0, #0
   19190:	bne	19180 <__assert_fail@plt+0x8248>
   19194:	bl	10e60 <__errno_location@plt>
   19198:	str	r4, [r0]
   1919c:	mvn	r4, #0
   191a0:	mov	r0, r4
   191a4:	pop	{r4, r5, r6, pc}
   191a8:	bl	10e60 <__errno_location@plt>
   191ac:	ldr	r4, [r0]
   191b0:	subs	r4, r4, #9
   191b4:	mvnne	r4, #0
   191b8:	mov	r0, r4
   191bc:	pop	{r4, r5, r6, pc}
   191c0:	push	{r4, r5, lr}
   191c4:	sub	sp, sp, #12
   191c8:	mov	r5, r0
   191cc:	bl	10e60 <__errno_location@plt>
   191d0:	mov	r2, #0
   191d4:	mov	r4, r0
   191d8:	ldr	r3, [r0]
   191dc:	str	r2, [r4]
   191e0:	mov	r0, r5
   191e4:	str	r3, [sp]
   191e8:	str	r3, [sp, #4]
   191ec:	bl	10d1c <free@plt>
   191f0:	ldr	r3, [r4]
   191f4:	add	r2, sp, #8
   191f8:	cmp	r3, #0
   191fc:	moveq	r3, #4
   19200:	movne	r3, #0
   19204:	add	r3, r2, r3
   19208:	ldr	r3, [r3, #-8]
   1920c:	str	r3, [r4]
   19210:	add	sp, sp, #12
   19214:	pop	{r4, r5, pc}
   19218:	push	{r4, lr}
   1921c:	mov	r0, #14
   19220:	bl	10ef0 <nl_langinfo@plt>
   19224:	cmp	r0, #0
   19228:	beq	19240 <__assert_fail@plt+0x8308>
   1922c:	ldrb	r2, [r0]
   19230:	ldr	r3, [pc, #16]	; 19248 <__assert_fail@plt+0x8310>
   19234:	cmp	r2, #0
   19238:	moveq	r0, r3
   1923c:	pop	{r4, pc}
   19240:	ldr	r0, [pc]	; 19248 <__assert_fail@plt+0x8310>
   19244:	pop	{r4, pc}
   19248:	andeq	sl, r1, ip, lsr r5
   1924c:	push	{r4, r5, r6, r7, lr}
   19250:	subs	r6, r0, #0
   19254:	sub	sp, sp, #12
   19258:	addeq	r6, sp, #4
   1925c:	mov	r0, r6
   19260:	mov	r5, r2
   19264:	mov	r7, r1
   19268:	bl	10ddc <mbrtowc@plt>
   1926c:	cmp	r5, #0
   19270:	cmnne	r0, #3
   19274:	mov	r4, r0
   19278:	bls	19294 <__assert_fail@plt+0x835c>
   1927c:	mov	r0, #0
   19280:	bl	192ec <__assert_fail@plt+0x83b4>
   19284:	cmp	r0, #0
   19288:	moveq	r4, #1
   1928c:	ldrbeq	r3, [r7]
   19290:	streq	r3, [r6]
   19294:	mov	r0, r4
   19298:	add	sp, sp, #12
   1929c:	pop	{r4, r5, r6, r7, pc}
   192a0:	push	{r4, r5, r6, lr}
   192a4:	subs	r4, r2, #0
   192a8:	mov	r6, r0
   192ac:	mov	r5, r1
   192b0:	beq	192dc <__assert_fail@plt+0x83a4>
   192b4:	mov	r1, r4
   192b8:	mvn	r0, #0
   192bc:	bl	193e0 <__assert_fail@plt+0x84a8>
   192c0:	cmp	r0, r5
   192c4:	bcs	192dc <__assert_fail@plt+0x83a4>
   192c8:	bl	10e60 <__errno_location@plt>
   192cc:	mov	r3, #12
   192d0:	str	r3, [r0]
   192d4:	mov	r0, #0
   192d8:	pop	{r4, r5, r6, pc}
   192dc:	mul	r1, r5, r4
   192e0:	mov	r0, r6
   192e4:	pop	{r4, r5, r6, lr}
   192e8:	b	190e8 <__assert_fail@plt+0x81b0>
   192ec:	push	{lr}		; (str lr, [sp, #-4]!)
   192f0:	sub	sp, sp, #268	; 0x10c
   192f4:	add	r1, sp, #4
   192f8:	ldr	r2, [pc, #60]	; 1933c <__assert_fail@plt+0x8404>
   192fc:	bl	19348 <__assert_fail@plt+0x8410>
   19300:	cmp	r0, #0
   19304:	movne	r0, #0
   19308:	bne	19334 <__assert_fail@plt+0x83fc>
   1930c:	ldr	r1, [pc, #44]	; 19340 <__assert_fail@plt+0x8408>
   19310:	add	r0, sp, #4
   19314:	bl	10cec <strcmp@plt>
   19318:	cmp	r0, #0
   1931c:	beq	19334 <__assert_fail@plt+0x83fc>
   19320:	add	r0, sp, #4
   19324:	ldr	r1, [pc, #24]	; 19344 <__assert_fail@plt+0x840c>
   19328:	bl	10cec <strcmp@plt>
   1932c:	adds	r0, r0, #0
   19330:	movne	r0, #1
   19334:	add	sp, sp, #268	; 0x10c
   19338:	pop	{pc}		; (ldr pc, [sp], #4)
   1933c:	andeq	r0, r0, r1, lsl #2
   19340:	andeq	sl, r1, r4, asr #10
   19344:	andeq	sl, r1, r8, asr #10
   19348:	push	{r4, r5, r6, lr}
   1934c:	mov	r5, r1
   19350:	mov	r1, #0
   19354:	mov	r4, r2
   19358:	bl	10ed8 <setlocale@plt>
   1935c:	subs	r6, r0, #0
   19360:	beq	193bc <__assert_fail@plt+0x8484>
   19364:	bl	10e48 <strlen@plt>
   19368:	cmp	r4, r0
   1936c:	bhi	193a4 <__assert_fail@plt+0x846c>
   19370:	cmp	r4, #0
   19374:	bne	19380 <__assert_fail@plt+0x8448>
   19378:	mov	r0, #34	; 0x22
   1937c:	pop	{r4, r5, r6, pc}
   19380:	sub	r4, r4, #1
   19384:	mov	r1, r6
   19388:	mov	r2, r4
   1938c:	mov	r0, r5
   19390:	bl	10d34 <memcpy@plt>
   19394:	mov	r3, #0
   19398:	strb	r3, [r5, r4]
   1939c:	mov	r0, #34	; 0x22
   193a0:	pop	{r4, r5, r6, pc}
   193a4:	add	r2, r0, #1
   193a8:	mov	r1, r6
   193ac:	mov	r0, r5
   193b0:	bl	10d34 <memcpy@plt>
   193b4:	mov	r0, #0
   193b8:	pop	{r4, r5, r6, pc}
   193bc:	cmp	r4, #0
   193c0:	beq	193d0 <__assert_fail@plt+0x8498>
   193c4:	strb	r6, [r5]
   193c8:	mov	r0, #22
   193cc:	pop	{r4, r5, r6, pc}
   193d0:	mov	r0, #22
   193d4:	pop	{r4, r5, r6, pc}
   193d8:	mov	r1, #0
   193dc:	b	10ed8 <setlocale@plt>
   193e0:	subs	r2, r1, #1
   193e4:	bxeq	lr
   193e8:	bcc	195c0 <__assert_fail@plt+0x8688>
   193ec:	cmp	r0, r1
   193f0:	bls	195a4 <__assert_fail@plt+0x866c>
   193f4:	tst	r1, r2
   193f8:	beq	195b0 <__assert_fail@plt+0x8678>
   193fc:	clz	r3, r0
   19400:	clz	r2, r1
   19404:	sub	r3, r2, r3
   19408:	rsbs	r3, r3, #31
   1940c:	addne	r3, r3, r3, lsl #1
   19410:	mov	r2, #0
   19414:	addne	pc, pc, r3, lsl #2
   19418:	nop			; (mov r0, r0)
   1941c:	cmp	r0, r1, lsl #31
   19420:	adc	r2, r2, r2
   19424:	subcs	r0, r0, r1, lsl #31
   19428:	cmp	r0, r1, lsl #30
   1942c:	adc	r2, r2, r2
   19430:	subcs	r0, r0, r1, lsl #30
   19434:	cmp	r0, r1, lsl #29
   19438:	adc	r2, r2, r2
   1943c:	subcs	r0, r0, r1, lsl #29
   19440:	cmp	r0, r1, lsl #28
   19444:	adc	r2, r2, r2
   19448:	subcs	r0, r0, r1, lsl #28
   1944c:	cmp	r0, r1, lsl #27
   19450:	adc	r2, r2, r2
   19454:	subcs	r0, r0, r1, lsl #27
   19458:	cmp	r0, r1, lsl #26
   1945c:	adc	r2, r2, r2
   19460:	subcs	r0, r0, r1, lsl #26
   19464:	cmp	r0, r1, lsl #25
   19468:	adc	r2, r2, r2
   1946c:	subcs	r0, r0, r1, lsl #25
   19470:	cmp	r0, r1, lsl #24
   19474:	adc	r2, r2, r2
   19478:	subcs	r0, r0, r1, lsl #24
   1947c:	cmp	r0, r1, lsl #23
   19480:	adc	r2, r2, r2
   19484:	subcs	r0, r0, r1, lsl #23
   19488:	cmp	r0, r1, lsl #22
   1948c:	adc	r2, r2, r2
   19490:	subcs	r0, r0, r1, lsl #22
   19494:	cmp	r0, r1, lsl #21
   19498:	adc	r2, r2, r2
   1949c:	subcs	r0, r0, r1, lsl #21
   194a0:	cmp	r0, r1, lsl #20
   194a4:	adc	r2, r2, r2
   194a8:	subcs	r0, r0, r1, lsl #20
   194ac:	cmp	r0, r1, lsl #19
   194b0:	adc	r2, r2, r2
   194b4:	subcs	r0, r0, r1, lsl #19
   194b8:	cmp	r0, r1, lsl #18
   194bc:	adc	r2, r2, r2
   194c0:	subcs	r0, r0, r1, lsl #18
   194c4:	cmp	r0, r1, lsl #17
   194c8:	adc	r2, r2, r2
   194cc:	subcs	r0, r0, r1, lsl #17
   194d0:	cmp	r0, r1, lsl #16
   194d4:	adc	r2, r2, r2
   194d8:	subcs	r0, r0, r1, lsl #16
   194dc:	cmp	r0, r1, lsl #15
   194e0:	adc	r2, r2, r2
   194e4:	subcs	r0, r0, r1, lsl #15
   194e8:	cmp	r0, r1, lsl #14
   194ec:	adc	r2, r2, r2
   194f0:	subcs	r0, r0, r1, lsl #14
   194f4:	cmp	r0, r1, lsl #13
   194f8:	adc	r2, r2, r2
   194fc:	subcs	r0, r0, r1, lsl #13
   19500:	cmp	r0, r1, lsl #12
   19504:	adc	r2, r2, r2
   19508:	subcs	r0, r0, r1, lsl #12
   1950c:	cmp	r0, r1, lsl #11
   19510:	adc	r2, r2, r2
   19514:	subcs	r0, r0, r1, lsl #11
   19518:	cmp	r0, r1, lsl #10
   1951c:	adc	r2, r2, r2
   19520:	subcs	r0, r0, r1, lsl #10
   19524:	cmp	r0, r1, lsl #9
   19528:	adc	r2, r2, r2
   1952c:	subcs	r0, r0, r1, lsl #9
   19530:	cmp	r0, r1, lsl #8
   19534:	adc	r2, r2, r2
   19538:	subcs	r0, r0, r1, lsl #8
   1953c:	cmp	r0, r1, lsl #7
   19540:	adc	r2, r2, r2
   19544:	subcs	r0, r0, r1, lsl #7
   19548:	cmp	r0, r1, lsl #6
   1954c:	adc	r2, r2, r2
   19550:	subcs	r0, r0, r1, lsl #6
   19554:	cmp	r0, r1, lsl #5
   19558:	adc	r2, r2, r2
   1955c:	subcs	r0, r0, r1, lsl #5
   19560:	cmp	r0, r1, lsl #4
   19564:	adc	r2, r2, r2
   19568:	subcs	r0, r0, r1, lsl #4
   1956c:	cmp	r0, r1, lsl #3
   19570:	adc	r2, r2, r2
   19574:	subcs	r0, r0, r1, lsl #3
   19578:	cmp	r0, r1, lsl #2
   1957c:	adc	r2, r2, r2
   19580:	subcs	r0, r0, r1, lsl #2
   19584:	cmp	r0, r1, lsl #1
   19588:	adc	r2, r2, r2
   1958c:	subcs	r0, r0, r1, lsl #1
   19590:	cmp	r0, r1
   19594:	adc	r2, r2, r2
   19598:	subcs	r0, r0, r1
   1959c:	mov	r0, r2
   195a0:	bx	lr
   195a4:	moveq	r0, #1
   195a8:	movne	r0, #0
   195ac:	bx	lr
   195b0:	clz	r2, r1
   195b4:	rsb	r2, r2, #31
   195b8:	lsr	r0, r0, r2
   195bc:	bx	lr
   195c0:	cmp	r0, #0
   195c4:	mvnne	r0, #0
   195c8:	b	1982c <__assert_fail@plt+0x88f4>
   195cc:	cmp	r1, #0
   195d0:	beq	195c0 <__assert_fail@plt+0x8688>
   195d4:	push	{r0, r1, lr}
   195d8:	bl	193e0 <__assert_fail@plt+0x84a8>
   195dc:	pop	{r1, r2, lr}
   195e0:	mul	r3, r2, r0
   195e4:	sub	r1, r1, r3
   195e8:	bx	lr
   195ec:	cmp	r1, #0
   195f0:	beq	197fc <__assert_fail@plt+0x88c4>
   195f4:	eor	ip, r0, r1
   195f8:	rsbmi	r1, r1, #0
   195fc:	subs	r2, r1, #1
   19600:	beq	197c8 <__assert_fail@plt+0x8890>
   19604:	movs	r3, r0
   19608:	rsbmi	r3, r0, #0
   1960c:	cmp	r3, r1
   19610:	bls	197d4 <__assert_fail@plt+0x889c>
   19614:	tst	r1, r2
   19618:	beq	197e4 <__assert_fail@plt+0x88ac>
   1961c:	clz	r2, r3
   19620:	clz	r0, r1
   19624:	sub	r2, r0, r2
   19628:	rsbs	r2, r2, #31
   1962c:	addne	r2, r2, r2, lsl #1
   19630:	mov	r0, #0
   19634:	addne	pc, pc, r2, lsl #2
   19638:	nop			; (mov r0, r0)
   1963c:	cmp	r3, r1, lsl #31
   19640:	adc	r0, r0, r0
   19644:	subcs	r3, r3, r1, lsl #31
   19648:	cmp	r3, r1, lsl #30
   1964c:	adc	r0, r0, r0
   19650:	subcs	r3, r3, r1, lsl #30
   19654:	cmp	r3, r1, lsl #29
   19658:	adc	r0, r0, r0
   1965c:	subcs	r3, r3, r1, lsl #29
   19660:	cmp	r3, r1, lsl #28
   19664:	adc	r0, r0, r0
   19668:	subcs	r3, r3, r1, lsl #28
   1966c:	cmp	r3, r1, lsl #27
   19670:	adc	r0, r0, r0
   19674:	subcs	r3, r3, r1, lsl #27
   19678:	cmp	r3, r1, lsl #26
   1967c:	adc	r0, r0, r0
   19680:	subcs	r3, r3, r1, lsl #26
   19684:	cmp	r3, r1, lsl #25
   19688:	adc	r0, r0, r0
   1968c:	subcs	r3, r3, r1, lsl #25
   19690:	cmp	r3, r1, lsl #24
   19694:	adc	r0, r0, r0
   19698:	subcs	r3, r3, r1, lsl #24
   1969c:	cmp	r3, r1, lsl #23
   196a0:	adc	r0, r0, r0
   196a4:	subcs	r3, r3, r1, lsl #23
   196a8:	cmp	r3, r1, lsl #22
   196ac:	adc	r0, r0, r0
   196b0:	subcs	r3, r3, r1, lsl #22
   196b4:	cmp	r3, r1, lsl #21
   196b8:	adc	r0, r0, r0
   196bc:	subcs	r3, r3, r1, lsl #21
   196c0:	cmp	r3, r1, lsl #20
   196c4:	adc	r0, r0, r0
   196c8:	subcs	r3, r3, r1, lsl #20
   196cc:	cmp	r3, r1, lsl #19
   196d0:	adc	r0, r0, r0
   196d4:	subcs	r3, r3, r1, lsl #19
   196d8:	cmp	r3, r1, lsl #18
   196dc:	adc	r0, r0, r0
   196e0:	subcs	r3, r3, r1, lsl #18
   196e4:	cmp	r3, r1, lsl #17
   196e8:	adc	r0, r0, r0
   196ec:	subcs	r3, r3, r1, lsl #17
   196f0:	cmp	r3, r1, lsl #16
   196f4:	adc	r0, r0, r0
   196f8:	subcs	r3, r3, r1, lsl #16
   196fc:	cmp	r3, r1, lsl #15
   19700:	adc	r0, r0, r0
   19704:	subcs	r3, r3, r1, lsl #15
   19708:	cmp	r3, r1, lsl #14
   1970c:	adc	r0, r0, r0
   19710:	subcs	r3, r3, r1, lsl #14
   19714:	cmp	r3, r1, lsl #13
   19718:	adc	r0, r0, r0
   1971c:	subcs	r3, r3, r1, lsl #13
   19720:	cmp	r3, r1, lsl #12
   19724:	adc	r0, r0, r0
   19728:	subcs	r3, r3, r1, lsl #12
   1972c:	cmp	r3, r1, lsl #11
   19730:	adc	r0, r0, r0
   19734:	subcs	r3, r3, r1, lsl #11
   19738:	cmp	r3, r1, lsl #10
   1973c:	adc	r0, r0, r0
   19740:	subcs	r3, r3, r1, lsl #10
   19744:	cmp	r3, r1, lsl #9
   19748:	adc	r0, r0, r0
   1974c:	subcs	r3, r3, r1, lsl #9
   19750:	cmp	r3, r1, lsl #8
   19754:	adc	r0, r0, r0
   19758:	subcs	r3, r3, r1, lsl #8
   1975c:	cmp	r3, r1, lsl #7
   19760:	adc	r0, r0, r0
   19764:	subcs	r3, r3, r1, lsl #7
   19768:	cmp	r3, r1, lsl #6
   1976c:	adc	r0, r0, r0
   19770:	subcs	r3, r3, r1, lsl #6
   19774:	cmp	r3, r1, lsl #5
   19778:	adc	r0, r0, r0
   1977c:	subcs	r3, r3, r1, lsl #5
   19780:	cmp	r3, r1, lsl #4
   19784:	adc	r0, r0, r0
   19788:	subcs	r3, r3, r1, lsl #4
   1978c:	cmp	r3, r1, lsl #3
   19790:	adc	r0, r0, r0
   19794:	subcs	r3, r3, r1, lsl #3
   19798:	cmp	r3, r1, lsl #2
   1979c:	adc	r0, r0, r0
   197a0:	subcs	r3, r3, r1, lsl #2
   197a4:	cmp	r3, r1, lsl #1
   197a8:	adc	r0, r0, r0
   197ac:	subcs	r3, r3, r1, lsl #1
   197b0:	cmp	r3, r1
   197b4:	adc	r0, r0, r0
   197b8:	subcs	r3, r3, r1
   197bc:	cmp	ip, #0
   197c0:	rsbmi	r0, r0, #0
   197c4:	bx	lr
   197c8:	teq	ip, r0
   197cc:	rsbmi	r0, r0, #0
   197d0:	bx	lr
   197d4:	movcc	r0, #0
   197d8:	asreq	r0, ip, #31
   197dc:	orreq	r0, r0, #1
   197e0:	bx	lr
   197e4:	clz	r2, r1
   197e8:	rsb	r2, r2, #31
   197ec:	cmp	ip, #0
   197f0:	lsr	r0, r3, r2
   197f4:	rsbmi	r0, r0, #0
   197f8:	bx	lr
   197fc:	cmp	r0, #0
   19800:	mvngt	r0, #-2147483648	; 0x80000000
   19804:	movlt	r0, #-2147483648	; 0x80000000
   19808:	b	1982c <__assert_fail@plt+0x88f4>
   1980c:	cmp	r1, #0
   19810:	beq	197fc <__assert_fail@plt+0x88c4>
   19814:	push	{r0, r1, lr}
   19818:	bl	195f4 <__assert_fail@plt+0x86bc>
   1981c:	pop	{r1, r2, lr}
   19820:	mul	r3, r2, r0
   19824:	sub	r1, r1, r3
   19828:	bx	lr
   1982c:	push	{r1, lr}
   19830:	mov	r0, #8
   19834:	bl	10ce0 <raise@plt>
   19838:	pop	{r1, pc}
   1983c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19840:	mov	r7, r0
   19844:	ldr	r6, [pc, #72]	; 19894 <__assert_fail@plt+0x895c>
   19848:	ldr	r5, [pc, #72]	; 19898 <__assert_fail@plt+0x8960>
   1984c:	add	r6, pc, r6
   19850:	add	r5, pc, r5
   19854:	sub	r6, r6, r5
   19858:	mov	r8, r1
   1985c:	mov	r9, r2
   19860:	bl	10ca8 <calloc@plt-0x20>
   19864:	asrs	r6, r6, #2
   19868:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1986c:	mov	r4, #0
   19870:	add	r4, r4, #1
   19874:	ldr	r3, [r5], #4
   19878:	mov	r2, r9
   1987c:	mov	r1, r8
   19880:	mov	r0, r7
   19884:	blx	r3
   19888:	cmp	r6, r4
   1988c:	bne	19870 <__assert_fail@plt+0x8938>
   19890:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19894:			; <UNDEFINED> instruction: 0x000116bc
   19898:			; <UNDEFINED> instruction: 0x000116b4
   1989c:	bx	lr
   198a0:	ldr	r3, [pc, #12]	; 198b4 <__assert_fail@plt+0x897c>
   198a4:	mov	r1, #0
   198a8:	add	r3, pc, r3
   198ac:	ldr	r2, [r3]
   198b0:	b	10e6c <__cxa_atexit@plt>
   198b4:	andeq	r1, r1, r8, lsr r8

Disassembly of section .fini:

000198b8 <.fini>:
   198b8:	push	{r3, lr}
   198bc:	pop	{r3, pc}
