
../repos/coreutils/src/uniq:     file format elf32-littlearm


Disassembly of section .init:

00010d08 <.init>:
   10d08:	push	{r3, lr}
   10d0c:	bl	11d38 <__assert_fail@plt+0xd7c>
   10d10:	pop	{r3, pc}

Disassembly of section .plt:

00010d14 <calloc@plt-0x14>:
   10d14:	push	{lr}		; (str lr, [sp, #-4]!)
   10d18:	ldr	lr, [pc, #4]	; 10d24 <calloc@plt-0x4>
   10d1c:	add	lr, pc, lr
   10d20:	ldr	pc, [lr, #8]!
   10d24:	ldrdeq	r9, [r1], -ip

00010d28 <calloc@plt>:
   10d28:	add	ip, pc, #0, 12
   10d2c:	add	ip, ip, #102400	; 0x19000
   10d30:	ldr	pc, [ip, #732]!	; 0x2dc

00010d34 <fputs_unlocked@plt>:
   10d34:	add	ip, pc, #0, 12
   10d38:	add	ip, ip, #102400	; 0x19000
   10d3c:	ldr	pc, [ip, #724]!	; 0x2d4

00010d40 <strcmp@plt>:
   10d40:	add	ip, pc, #0, 12
   10d44:	add	ip, ip, #102400	; 0x19000
   10d48:	ldr	pc, [ip, #716]!	; 0x2cc

00010d4c <strtol@plt>:
   10d4c:	add	ip, pc, #0, 12
   10d50:	add	ip, ip, #102400	; 0x19000
   10d54:	ldr	pc, [ip, #708]!	; 0x2c4

00010d58 <posix_fadvise64@plt>:
   10d58:	add	ip, pc, #0, 12
   10d5c:	add	ip, ip, #102400	; 0x19000
   10d60:	ldr	pc, [ip, #700]!	; 0x2bc

00010d64 <fflush@plt>:
   10d64:	add	ip, pc, #0, 12
   10d68:	add	ip, ip, #102400	; 0x19000
   10d6c:	ldr	pc, [ip, #692]!	; 0x2b4

00010d70 <free@plt>:
   10d70:	add	ip, pc, #0, 12
   10d74:	add	ip, ip, #102400	; 0x19000
   10d78:	ldr	pc, [ip, #684]!	; 0x2ac

00010d7c <_exit@plt>:
   10d7c:	add	ip, pc, #0, 12
   10d80:	add	ip, ip, #102400	; 0x19000
   10d84:	ldr	pc, [ip, #676]!	; 0x2a4

00010d88 <memcpy@plt>:
   10d88:	add	ip, pc, #0, 12
   10d8c:	add	ip, ip, #102400	; 0x19000
   10d90:	ldr	pc, [ip, #668]!	; 0x29c

00010d94 <__strtoull_internal@plt>:
   10d94:	add	ip, pc, #0, 12
   10d98:	add	ip, ip, #102400	; 0x19000
   10d9c:	ldr	pc, [ip, #660]!	; 0x294

00010da0 <mbsinit@plt>:
   10da0:	add	ip, pc, #0, 12
   10da4:	add	ip, ip, #102400	; 0x19000
   10da8:	ldr	pc, [ip, #652]!	; 0x28c

00010dac <fwrite_unlocked@plt>:
   10dac:	add	ip, pc, #0, 12
   10db0:	add	ip, ip, #102400	; 0x19000
   10db4:	ldr	pc, [ip, #644]!	; 0x284

00010db8 <memcmp@plt>:
   10db8:	add	ip, pc, #0, 12
   10dbc:	add	ip, ip, #102400	; 0x19000
   10dc0:	ldr	pc, [ip, #636]!	; 0x27c

00010dc4 <fputc_unlocked@plt>:
   10dc4:	add	ip, pc, #0, 12
   10dc8:	add	ip, ip, #102400	; 0x19000
   10dcc:	ldr	pc, [ip, #628]!	; 0x274

00010dd0 <dcgettext@plt>:
   10dd0:	add	ip, pc, #0, 12
   10dd4:	add	ip, ip, #102400	; 0x19000
   10dd8:	ldr	pc, [ip, #620]!	; 0x26c

00010ddc <dup2@plt>:
   10ddc:	add	ip, pc, #0, 12
   10de0:	add	ip, ip, #102400	; 0x19000
   10de4:	ldr	pc, [ip, #612]!	; 0x264

00010de8 <realloc@plt>:
   10de8:	add	ip, pc, #0, 12
   10dec:	add	ip, ip, #102400	; 0x19000
   10df0:	ldr	pc, [ip, #604]!	; 0x25c

00010df4 <textdomain@plt>:
   10df4:	add	ip, pc, #0, 12
   10df8:	add	ip, ip, #102400	; 0x19000
   10dfc:	ldr	pc, [ip, #596]!	; 0x254

00010e00 <iswprint@plt>:
   10e00:	add	ip, pc, #0, 12
   10e04:	add	ip, ip, #102400	; 0x19000
   10e08:	ldr	pc, [ip, #588]!	; 0x24c

00010e0c <fwrite@plt>:
   10e0c:	add	ip, pc, #0, 12
   10e10:	add	ip, ip, #102400	; 0x19000
   10e14:	ldr	pc, [ip, #580]!	; 0x244

00010e18 <lseek64@plt>:
   10e18:	add	ip, pc, #0, 12
   10e1c:	add	ip, ip, #102400	; 0x19000
   10e20:	ldr	pc, [ip, #572]!	; 0x23c

00010e24 <__ctype_get_mb_cur_max@plt>:
   10e24:	add	ip, pc, #0, 12
   10e28:	add	ip, ip, #102400	; 0x19000
   10e2c:	ldr	pc, [ip, #564]!	; 0x234

00010e30 <__fpending@plt>:
   10e30:	add	ip, pc, #0, 12
   10e34:	add	ip, ip, #102400	; 0x19000
   10e38:	ldr	pc, [ip, #556]!	; 0x22c

00010e3c <mbrtowc@plt>:
   10e3c:	add	ip, pc, #0, 12
   10e40:	add	ip, ip, #102400	; 0x19000
   10e44:	ldr	pc, [ip, #548]!	; 0x224

00010e48 <error@plt>:
   10e48:	add	ip, pc, #0, 12
   10e4c:	add	ip, ip, #102400	; 0x19000
   10e50:	ldr	pc, [ip, #540]!	; 0x21c

00010e54 <open64@plt>:
   10e54:	add	ip, pc, #0, 12
   10e58:	add	ip, ip, #102400	; 0x19000
   10e5c:	ldr	pc, [ip, #532]!	; 0x214

00010e60 <getenv@plt>:
   10e60:	add	ip, pc, #0, 12
   10e64:	add	ip, ip, #102400	; 0x19000
   10e68:	ldr	pc, [ip, #524]!	; 0x20c

00010e6c <malloc@plt>:
   10e6c:	add	ip, pc, #0, 12
   10e70:	add	ip, ip, #102400	; 0x19000
   10e74:	ldr	pc, [ip, #516]!	; 0x204

00010e78 <__libc_start_main@plt>:
   10e78:	add	ip, pc, #0, 12
   10e7c:	add	ip, ip, #102400	; 0x19000
   10e80:	ldr	pc, [ip, #508]!	; 0x1fc

00010e84 <__freading@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #102400	; 0x19000
   10e8c:	ldr	pc, [ip, #500]!	; 0x1f4

00010e90 <__ctype_toupper_loc@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #102400	; 0x19000
   10e98:	ldr	pc, [ip, #492]!	; 0x1ec

00010e9c <__gmon_start__@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #102400	; 0x19000
   10ea4:	ldr	pc, [ip, #484]!	; 0x1e4

00010ea8 <freopen64@plt>:
   10ea8:	add	ip, pc, #0, 12
   10eac:	add	ip, ip, #102400	; 0x19000
   10eb0:	ldr	pc, [ip, #476]!	; 0x1dc

00010eb4 <getopt_long@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #102400	; 0x19000
   10ebc:	ldr	pc, [ip, #468]!	; 0x1d4

00010ec0 <__ctype_b_loc@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #102400	; 0x19000
   10ec8:	ldr	pc, [ip, #460]!	; 0x1cc

00010ecc <exit@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #102400	; 0x19000
   10ed4:	ldr	pc, [ip, #452]!	; 0x1c4

00010ed8 <strlen@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #102400	; 0x19000
   10ee0:	ldr	pc, [ip, #444]!	; 0x1bc

00010ee4 <strchr@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #102400	; 0x19000
   10eec:	ldr	pc, [ip, #436]!	; 0x1b4

00010ef0 <__errno_location@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #102400	; 0x19000
   10ef8:	ldr	pc, [ip, #428]!	; 0x1ac

00010efc <__cxa_atexit@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #102400	; 0x19000
   10f04:	ldr	pc, [ip, #420]!	; 0x1a4

00010f08 <memset@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #102400	; 0x19000
   10f10:	ldr	pc, [ip, #412]!	; 0x19c

00010f14 <__printf_chk@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #102400	; 0x19000
   10f1c:	ldr	pc, [ip, #404]!	; 0x194

00010f20 <fileno@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #102400	; 0x19000
   10f28:	ldr	pc, [ip, #396]!	; 0x18c

00010f2c <__fprintf_chk@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #102400	; 0x19000
   10f34:	ldr	pc, [ip, #388]!	; 0x184

00010f38 <fclose@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #102400	; 0x19000
   10f40:	ldr	pc, [ip, #380]!	; 0x17c

00010f44 <fseeko64@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #102400	; 0x19000
   10f4c:	ldr	pc, [ip, #372]!	; 0x174

00010f50 <__uflow@plt>:
   10f50:	add	ip, pc, #0, 12
   10f54:	add	ip, ip, #102400	; 0x19000
   10f58:	ldr	pc, [ip, #364]!	; 0x16c

00010f5c <__overflow@plt>:
   10f5c:	add	ip, pc, #0, 12
   10f60:	add	ip, ip, #102400	; 0x19000
   10f64:	ldr	pc, [ip, #356]!	; 0x164

00010f68 <setlocale@plt>:
   10f68:	add	ip, pc, #0, 12
   10f6c:	add	ip, ip, #102400	; 0x19000
   10f70:	ldr	pc, [ip, #348]!	; 0x15c

00010f74 <strrchr@plt>:
   10f74:	add	ip, pc, #0, 12
   10f78:	add	ip, ip, #102400	; 0x19000
   10f7c:	ldr	pc, [ip, #340]!	; 0x154

00010f80 <nl_langinfo@plt>:
   10f80:	add	ip, pc, #0, 12
   10f84:	add	ip, ip, #102400	; 0x19000
   10f88:	ldr	pc, [ip, #332]!	; 0x14c

00010f8c <bindtextdomain@plt>:
   10f8c:	add	ip, pc, #0, 12
   10f90:	add	ip, ip, #102400	; 0x19000
   10f94:	ldr	pc, [ip, #324]!	; 0x144

00010f98 <strncmp@plt>:
   10f98:	add	ip, pc, #0, 12
   10f9c:	add	ip, ip, #102400	; 0x19000
   10fa0:	ldr	pc, [ip, #316]!	; 0x13c

00010fa4 <abort@plt>:
   10fa4:	add	ip, pc, #0, 12
   10fa8:	add	ip, ip, #102400	; 0x19000
   10fac:	ldr	pc, [ip, #308]!	; 0x134

00010fb0 <close@plt>:
   10fb0:	add	ip, pc, #0, 12
   10fb4:	add	ip, ip, #102400	; 0x19000
   10fb8:	ldr	pc, [ip, #300]!	; 0x12c

00010fbc <__assert_fail@plt>:
   10fbc:	add	ip, pc, #0, 12
   10fc0:	add	ip, ip, #102400	; 0x19000
   10fc4:	ldr	pc, [ip, #292]!	; 0x124

Disassembly of section .text:

00010fc8 <.text>:
   10fc8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   10fcc:	strd	r6, [sp, #8]
   10fd0:	strd	r8, [sp, #16]
   10fd4:	mov	r9, r0
   10fd8:	movw	r0, #38156	; 0x950c
   10fdc:	movt	r0, #1
   10fe0:	strd	sl, [sp, #24]
   10fe4:	mov	r8, r1
   10fe8:	str	lr, [sp, #32]
   10fec:	sub	sp, sp, #92	; 0x5c
   10ff0:	movw	sl, #41328	; 0xa170
   10ff4:	movt	sl, #2
   10ff8:	bl	10e60 <getenv@plt>
   10ffc:	movw	r3, #38172	; 0x951c
   11000:	movt	r3, #1
   11004:	movw	r2, #35956	; 0x8c74
   11008:	movt	r2, #1
   1100c:	adds	fp, r0, #0
   11010:	ldr	r0, [r8]
   11014:	movne	fp, #1
   11018:	str	r2, [sp, #32]
   1101c:	str	r3, [sp, #52]	; 0x34
   11020:	str	r3, [sp, #56]	; 0x38
   11024:	bl	132b0 <__assert_fail@plt+0x22f4>
   11028:	movw	r3, #39321	; 0x9999
   1102c:	movt	r3, #6553	; 0x1999
   11030:	movw	r1, #36560	; 0x8ed0
   11034:	movt	r1, #1
   11038:	str	r3, [sp, #36]	; 0x24
   1103c:	mov	r3, #10
   11040:	mov	r0, #6
   11044:	str	r3, [sp, #24]
   11048:	bl	10f68 <setlocale@plt>
   1104c:	movw	r1, #38176	; 0x9520
   11050:	movt	r1, #1
   11054:	movw	r0, #37988	; 0x9464
   11058:	movt	r0, #1
   1105c:	bl	10f8c <bindtextdomain@plt>
   11060:	movw	r0, #37988	; 0x9464
   11064:	movt	r0, #1
   11068:	bl	10df4 <textdomain@plt>
   1106c:	movw	r0, #10708	; 0x29d4
   11070:	movt	r0, #1
   11074:	bl	18c50 <__assert_fail@plt+0x7c94>
   11078:	mov	r3, #0
   1107c:	mov	r2, #1
   11080:	mvn	r1, #0
   11084:	mov	r5, r3
   11088:	mov	r4, r3
   1108c:	strd	r2, [sl]
   11090:	str	r3, [sl, #8]
   11094:	str	r1, [sl, #12]
   11098:	strb	r2, [sl, #16]
   1109c:	str	r3, [sp, #16]
   110a0:	strb	r2, [sl, #17]
   110a4:	strb	r3, [sl, #18]
   110a8:	str	r3, [sl, #20]
   110ac:	str	r3, [sp, #28]
   110b0:	b	110ec <__assert_fail@plt+0x130>
   110b4:	movw	r6, #41296	; 0xa150
   110b8:	movt	r6, #2
   110bc:	ldr	r3, [r6]
   110c0:	cmp	r3, r9
   110c4:	bge	11364 <__assert_fail@plt+0x3a8>
   110c8:	cmp	r4, #2
   110cc:	beq	11b50 <__assert_fail@plt+0xb94>
   110d0:	ldr	r2, [r8, r3, lsl #2]
   110d4:	add	r3, r3, #1
   110d8:	str	r3, [r6]
   110dc:	add	r3, sp, #88	; 0x58
   110e0:	add	r3, r3, r4, lsl #2
   110e4:	add	r4, r4, #1
   110e8:	str	r2, [r3, #-36]	; 0xffffffdc
   110ec:	cmn	r5, #1
   110f0:	movwne	r6, #38200	; 0x9538
   110f4:	movtne	r6, #1
   110f8:	beq	110b4 <__assert_fail@plt+0xf8>
   110fc:	cmp	r4, #0
   11100:	movne	r7, fp
   11104:	moveq	r7, #0
   11108:	cmp	r7, #0
   1110c:	bne	110b4 <__assert_fail@plt+0xf8>
   11110:	ldr	r3, [pc, #3032]	; 11cf0 <__assert_fail@plt+0xd34>
   11114:	mov	r2, r6
   11118:	mov	r1, r8
   1111c:	mov	r0, r9
   11120:	str	r7, [sp]
   11124:	bl	10eb4 <getopt_long@plt>
   11128:	cmn	r0, #1
   1112c:	mov	r5, r0
   11130:	beq	110b4 <__assert_fail@plt+0xf8>
   11134:	cmp	r0, #100	; 0x64
   11138:	beq	118e4 <__assert_fail@plt+0x928>
   1113c:	ble	1117c <__assert_fail@plt+0x1c0>
   11140:	cmp	r0, #117	; 0x75
   11144:	beq	118d4 <__assert_fail@plt+0x918>
   11148:	bgt	111e4 <__assert_fail@plt+0x228>
   1114c:	cmp	r0, #105	; 0x69
   11150:	beq	118c8 <__assert_fail@plt+0x90c>
   11154:	cmp	r0, #115	; 0x73
   11158:	bne	111d4 <__assert_fail@plt+0x218>
   1115c:	movw	r3, #41320	; 0xa168
   11160:	movt	r3, #2
   11164:	movw	r1, #38304	; 0x95a0
   11168:	movt	r1, #1
   1116c:	ldr	r0, [r3]
   11170:	bl	11dec <__assert_fail@plt+0xe30>
   11174:	str	r0, [sl, #8]
   11178:	b	110fc <__assert_fail@plt+0x140>
   1117c:	cmp	r0, #57	; 0x39
   11180:	bgt	112a8 <__assert_fail@plt+0x2ec>
   11184:	cmp	r0, #48	; 0x30
   11188:	bge	11894 <__assert_fail@plt+0x8d8>
   1118c:	cmn	r0, #2
   11190:	beq	11b8c <__assert_fail@plt+0xbd0>
   11194:	cmp	r0, #1
   11198:	bne	11254 <__assert_fail@plt+0x298>
   1119c:	movw	r7, #41320	; 0xa168
   111a0:	movt	r7, #2
   111a4:	ldr	r3, [r7]
   111a8:	ldrb	r3, [r3]
   111ac:	cmp	r3, #43	; 0x2b
   111b0:	beq	1193c <__assert_fail@plt+0x980>
   111b4:	cmp	r4, #2
   111b8:	beq	11b94 <__assert_fail@plt+0xbd8>
   111bc:	ldr	r2, [r7]
   111c0:	add	r3, sp, #88	; 0x58
   111c4:	add	r3, r3, r4, lsl #2
   111c8:	add	r4, r4, #1
   111cc:	str	r2, [r3, #-36]	; 0xffffffdc
   111d0:	b	110fc <__assert_fail@plt+0x140>
   111d4:	cmp	r0, #102	; 0x66
   111d8:	beq	118f4 <__assert_fail@plt+0x938>
   111dc:	mov	r0, #1
   111e0:	bl	12040 <__assert_fail@plt+0x1084>
   111e4:	cmp	r0, #122	; 0x7a
   111e8:	beq	1135c <__assert_fail@plt+0x3a0>
   111ec:	cmp	r0, #256	; 0x100
   111f0:	bne	1131c <__assert_fail@plt+0x360>
   111f4:	movw	r3, #41320	; 0xa168
   111f8:	movt	r3, #2
   111fc:	ldr	r1, [r3]
   11200:	cmp	r1, #0
   11204:	moveq	r3, #3
   11208:	streq	r3, [sl, #24]
   1120c:	beq	110fc <__assert_fail@plt+0x140>
   11210:	movw	r2, #41212	; 0xa0fc
   11214:	movt	r2, #2
   11218:	ldr	r3, [pc, #2772]	; 11cf4 <__assert_fail@plt+0xd38>
   1121c:	mov	r0, #1
   11220:	ldr	ip, [r2]
   11224:	mov	r2, #4
   11228:	stm	sp, {r2, ip}
   1122c:	add	r2, r3, #16
   11230:	str	r0, [sp, #8]
   11234:	movw	r0, #38260	; 0x9574
   11238:	movt	r0, #1
   1123c:	bl	12814 <__assert_fail@plt+0x1858>
   11240:	ldr	r3, [sp, #32]
   11244:	add	r0, r3, r0, lsl #2
   11248:	ldr	r3, [r0, #292]	; 0x124
   1124c:	str	r3, [sl, #24]
   11250:	b	110fc <__assert_fail@plt+0x140>
   11254:	cmn	r0, #3
   11258:	bne	111dc <__assert_fail@plt+0x220>
   1125c:	movw	r1, #38372	; 0x95e4
   11260:	movt	r1, #1
   11264:	movw	r2, #38388	; 0x95f4
   11268:	movt	r2, #1
   1126c:	movw	r3, #41208	; 0xa0f8
   11270:	movt	r3, #2
   11274:	movw	r0, #41316	; 0xa164
   11278:	movt	r0, #2
   1127c:	str	r2, [sp]
   11280:	movw	r2, #37984	; 0x9460
   11284:	movt	r2, #1
   11288:	stmib	sp, {r1, r7}
   1128c:	movw	r1, #36300	; 0x8dcc
   11290:	movt	r1, #1
   11294:	ldr	r0, [r0]
   11298:	ldr	r3, [r3]
   1129c:	bl	172e4 <__assert_fail@plt+0x6328>
   112a0:	mov	r0, r7
   112a4:	bl	10ecc <exit@plt>
   112a8:	cmp	r0, #68	; 0x44
   112ac:	bne	11344 <__assert_fail@plt+0x388>
   112b0:	movw	r3, #41320	; 0xa168
   112b4:	movt	r3, #2
   112b8:	strb	r7, [sl, #17]
   112bc:	ldr	r1, [r3]
   112c0:	mov	r2, #1
   112c4:	strb	r2, [sl, #18]
   112c8:	cmp	r1, #0
   112cc:	streq	r1, [sl, #20]
   112d0:	streq	r2, [sp, #16]
   112d4:	beq	110fc <__assert_fail@plt+0x140>
   112d8:	movw	r0, #41212	; 0xa0fc
   112dc:	movt	r0, #2
   112e0:	ldr	r3, [pc, #2576]	; 11cf8 <__assert_fail@plt+0xd3c>
   112e4:	str	r2, [sp, #8]
   112e8:	mov	ip, #4
   112ec:	ldr	lr, [r0]
   112f0:	movw	r0, #38244	; 0x9564
   112f4:	movt	r0, #1
   112f8:	stm	sp, {ip, lr}
   112fc:	str	r2, [sp, #16]
   11300:	add	r2, r3, #12
   11304:	bl	12814 <__assert_fail@plt+0x1858>
   11308:	ldr	r3, [sp, #32]
   1130c:	add	r0, r3, r0, lsl #2
   11310:	ldr	r3, [r0, #264]	; 0x108
   11314:	str	r3, [sl, #20]
   11318:	b	110fc <__assert_fail@plt+0x140>
   1131c:	cmp	r0, #119	; 0x77
   11320:	bne	111dc <__assert_fail@plt+0x220>
   11324:	movw	r3, #41320	; 0xa168
   11328:	movt	r3, #2
   1132c:	movw	r1, #38336	; 0x95c0
   11330:	movt	r1, #1
   11334:	ldr	r0, [r3]
   11338:	bl	11dec <__assert_fail@plt+0xe30>
   1133c:	str	r0, [sl, #12]
   11340:	b	110fc <__assert_fail@plt+0x140>
   11344:	cmp	r0, #99	; 0x63
   11348:	bne	111dc <__assert_fail@plt+0x220>
   1134c:	mov	r3, #1
   11350:	str	r7, [sl]
   11354:	str	r3, [sp, #16]
   11358:	b	110fc <__assert_fail@plt+0x140>
   1135c:	str	r7, [sp, #24]
   11360:	b	110fc <__assert_fail@plt+0x140>
   11364:	ldr	r3, [sl, #24]
   11368:	cmp	r3, #0
   1136c:	bne	11548 <__assert_fail@plt+0x58c>
   11370:	ldr	r4, [sl]
   11374:	cmp	r4, #0
   11378:	bne	11390 <__assert_fail@plt+0x3d4>
   1137c:	ldrb	r3, [sl, #18]
   11380:	cmp	r3, #0
   11384:	movwne	r1, #38508	; 0x966c
   11388:	movtne	r1, #1
   1138c:	bne	11bbc <__assert_fail@plt+0xc00>
   11390:	ldr	r3, [sp, #52]	; 0x34
   11394:	movw	r1, #38172	; 0x951c
   11398:	movt	r1, #1
   1139c:	ldr	r4, [sp, #56]	; 0x38
   113a0:	mov	r0, r3
   113a4:	str	r3, [sp, #40]	; 0x28
   113a8:	bl	10d40 <strcmp@plt>
   113ac:	cmp	r0, #0
   113b0:	bne	11a44 <__assert_fail@plt+0xa88>
   113b4:	movw	r1, #38172	; 0x951c
   113b8:	movt	r1, #1
   113bc:	mov	r0, r4
   113c0:	bl	10d40 <strcmp@plt>
   113c4:	cmp	r0, #0
   113c8:	beq	113f0 <__assert_fail@plt+0x434>
   113cc:	movw	r3, #41316	; 0xa164
   113d0:	movt	r3, #2
   113d4:	movw	r1, #38576	; 0x96b0
   113d8:	movt	r1, #1
   113dc:	ldr	r2, [r3]
   113e0:	mov	r0, r4
   113e4:	bl	12c88 <__assert_fail@plt+0x1ccc>
   113e8:	subs	r5, r0, #0
   113ec:	beq	11cc0 <__assert_fail@plt+0xd04>
   113f0:	movw	r6, #41312	; 0xa160
   113f4:	movt	r6, #2
   113f8:	mov	r1, #2
   113fc:	ldr	r0, [r6]
   11400:	bl	12ac4 <__assert_fail@plt+0x1b08>
   11404:	add	r0, sp, #60	; 0x3c
   11408:	bl	12f68 <__assert_fail@plt+0x1fac>
   1140c:	add	r0, sp, #72	; 0x48
   11410:	bl	12f68 <__assert_fail@plt+0x1fac>
   11414:	ldrb	r3, [sl, #17]
   11418:	cmp	r3, #0
   1141c:	beq	11570 <__assert_fail@plt+0x5b4>
   11420:	ldrb	r8, [sl, #16]
   11424:	cmp	r8, #0
   11428:	beq	11570 <__assert_fail@plt+0x5b4>
   1142c:	ldr	r3, [sl]
   11430:	cmp	r3, #1
   11434:	bne	11570 <__assert_fail@plt+0x5b4>
   11438:	add	r3, sp, #72	; 0x48
   1143c:	mov	r9, #0
   11440:	add	r4, sp, #60	; 0x3c
   11444:	str	r3, [sp, #16]
   11448:	movw	r3, #41316	; 0xa164
   1144c:	movt	r3, #2
   11450:	str	r9, [sp, #28]
   11454:	str	r3, [sp, #32]
   11458:	ldr	r1, [r6]
   1145c:	ldr	r3, [r1]
   11460:	tst	r3, #16
   11464:	bne	11ae4 <__assert_fail@plt+0xb28>
   11468:	mov	r0, r4
   1146c:	ldr	r2, [sp, #24]
   11470:	bl	130ac <__assert_fail@plt+0x20f0>
   11474:	cmp	r0, #0
   11478:	beq	11ae4 <__assert_fail@plt+0xb28>
   1147c:	ldr	fp, [r4, #4]
   11480:	ldr	r5, [r4, #8]
   11484:	mov	r0, fp
   11488:	mov	r1, r5
   1148c:	bl	11ee8 <__assert_fail@plt+0xf2c>
   11490:	sub	r5, r0, r5
   11494:	sub	r3, fp, #1
   11498:	cmp	r9, #0
   1149c:	mov	r7, r0
   114a0:	sub	r5, r3, r5
   114a4:	beq	114e4 <__assert_fail@plt+0x528>
   114a8:	ldr	r3, [sl, #12]
   114ac:	ldr	ip, [sp, #44]	; 0x2c
   114b0:	ldrb	r1, [sl, #28]
   114b4:	cmp	r5, r3
   114b8:	movcc	r2, r5
   114bc:	movcs	r2, r3
   114c0:	cmp	ip, r3
   114c4:	movcc	r3, ip
   114c8:	cmp	r1, #0
   114cc:	beq	11a28 <__assert_fail@plt+0xa6c>
   114d0:	cmp	r2, r3
   114d4:	beq	11b3c <__assert_fail@plt+0xb80>
   114d8:	mov	r0, #1
   114dc:	cmp	r0, #0
   114e0:	beq	119f4 <__assert_fail@plt+0xa38>
   114e4:	ldr	r3, [sl, #24]
   114e8:	cmp	r3, #0
   114ec:	beq	11514 <__assert_fail@plt+0x558>
   114f0:	cmp	r3, #4
   114f4:	cmpne	r3, #1
   114f8:	beq	11ab0 <__assert_fail@plt+0xaf4>
   114fc:	ldr	r2, [sp, #28]
   11500:	cmp	r2, #0
   11504:	beq	11514 <__assert_fail@plt+0x558>
   11508:	sub	r3, r3, #2
   1150c:	cmp	r3, #1
   11510:	bls	11ab0 <__assert_fail@plt+0xaf4>
   11514:	ldr	r3, [sp, #32]
   11518:	mov	r1, #1
   1151c:	mov	r9, r7
   11520:	str	r8, [sp, #28]
   11524:	ldr	r2, [r4, #4]
   11528:	str	r5, [sp, #44]	; 0x2c
   1152c:	ldr	r0, [r4, #8]
   11530:	ldr	r3, [r3]
   11534:	bl	10dac <fwrite_unlocked@plt>
   11538:	mov	r3, r4
   1153c:	ldr	r4, [sp, #16]
   11540:	str	r3, [sp, #16]
   11544:	b	11458 <__assert_fail@plt+0x49c>
   11548:	ldr	r3, [sp, #16]
   1154c:	cmp	r3, #0
   11550:	bne	11bb4 <__assert_fail@plt+0xbf8>
   11554:	ldr	r3, [sl]
   11558:	cmp	r3, #1
   1155c:	movwne	r1, #38456	; 0x9638
   11560:	movne	r2, #5
   11564:	movtne	r1, #1
   11568:	beq	11390 <__assert_fail@plt+0x3d4>
   1156c:	b	11bc0 <__assert_fail@plt+0xc04>
   11570:	add	r0, sp, #72	; 0x48
   11574:	ldr	r1, [r6]
   11578:	ldr	r2, [sp, #24]
   1157c:	bl	130ac <__assert_fail@plt+0x20f0>
   11580:	cmp	r0, #0
   11584:	beq	11824 <__assert_fail@plt+0x868>
   11588:	movw	r3, #41316	; 0xa164
   1158c:	movt	r3, #2
   11590:	ldr	r7, [sp, #76]	; 0x4c
   11594:	mov	r2, #0
   11598:	add	r8, sp, #72	; 0x48
   1159c:	ldr	r4, [sp, #80]	; 0x50
   115a0:	add	r5, sp, #60	; 0x3c
   115a4:	str	r3, [sp, #44]	; 0x2c
   115a8:	mov	r3, #1
   115ac:	str	r3, [sp, #36]	; 0x24
   115b0:	mov	r3, #0
   115b4:	mov	r0, r7
   115b8:	mov	r1, r4
   115bc:	strd	r2, [sp, #16]
   115c0:	bl	11ee8 <__assert_fail@plt+0xf2c>
   115c4:	sub	r4, r0, r4
   115c8:	sub	r3, r7, #1
   115cc:	str	r0, [sp, #32]
   115d0:	sub	r9, r3, r4
   115d4:	ldr	r1, [r6]
   115d8:	ldr	r7, [r1]
   115dc:	ands	r3, r7, #16
   115e0:	str	r3, [sp, #28]
   115e4:	bne	117f0 <__assert_fail@plt+0x834>
   115e8:	mov	r0, r5
   115ec:	ldr	r2, [sp, #24]
   115f0:	bl	130ac <__assert_fail@plt+0x20f0>
   115f4:	cmp	r0, #0
   115f8:	beq	117e0 <__assert_fail@plt+0x824>
   115fc:	ldmib	r5, {r4, fp}
   11600:	mov	r0, r4
   11604:	mov	r1, fp
   11608:	bl	11ee8 <__assert_fail@plt+0xf2c>
   1160c:	ldr	r2, [sl, #12]
   11610:	sub	r3, r0, fp
   11614:	sub	r4, r4, #1
   11618:	sub	r4, r4, r3
   1161c:	mov	r7, r0
   11620:	ldrb	fp, [sl, #28]
   11624:	cmp	r4, r2
   11628:	movcc	r3, r4
   1162c:	movcs	r3, r2
   11630:	cmp	r9, r2
   11634:	movcc	r2, r9
   11638:	cmp	fp, #0
   1163c:	beq	116b4 <__assert_fail@plt+0x6f8>
   11640:	cmp	r2, r3
   11644:	beq	11704 <__assert_fail@plt+0x748>
   11648:	ldr	r3, [sl, #20]
   1164c:	cmp	r3, #0
   11650:	bne	11870 <__assert_fail@plt+0x8b4>
   11654:	ldrd	r2, [sp, #16]
   11658:	add	r0, r8, #4
   1165c:	add	r1, r8, #8
   11660:	orrs	r3, r2, r3
   11664:	bne	116fc <__assert_fail@plt+0x740>
   11668:	ldrb	fp, [sl, #17]
   1166c:	cmp	fp, #0
   11670:	movne	r2, #0
   11674:	movne	r3, #0
   11678:	strdne	r2, [sp, #16]
   1167c:	beq	1178c <__assert_fail@plt+0x7d0>
   11680:	ldrd	r2, [sp, #16]
   11684:	mov	r9, r4
   11688:	bl	11e78 <__assert_fail@plt+0xebc>
   1168c:	mov	r3, r5
   11690:	cmp	fp, #0
   11694:	str	r7, [sp, #32]
   11698:	mov	r5, r8
   1169c:	mov	r8, r3
   116a0:	beq	115d4 <__assert_fail@plt+0x618>
   116a4:	mov	r2, #0
   116a8:	mov	r3, #0
   116ac:	strd	r2, [sp, #16]
   116b0:	b	115d4 <__assert_fail@plt+0x618>
   116b4:	cmp	r2, r3
   116b8:	beq	117a4 <__assert_fail@plt+0x7e8>
   116bc:	ldr	r3, [sl, #20]
   116c0:	cmp	r3, #0
   116c4:	beq	11654 <__assert_fail@plt+0x698>
   116c8:	ldrd	r2, [sp, #16]
   116cc:	orrs	r3, r2, r3
   116d0:	add	r2, r8, #4
   116d4:	add	r3, r8, #8
   116d8:	mov	r0, r2
   116dc:	mov	r1, r3
   116e0:	beq	11668 <__assert_fail@plt+0x6ac>
   116e4:	mov	r1, #0
   116e8:	str	r1, [sp, #36]	; 0x24
   116ec:	cmp	fp, #0
   116f0:	mov	r0, r2
   116f4:	mov	r1, r3
   116f8:	bne	11a04 <__assert_fail@plt+0xa48>
   116fc:	mov	fp, #1
   11700:	b	11780 <__assert_fail@plt+0x7c4>
   11704:	ldr	r1, [sp, #32]
   11708:	bl	131e0 <__assert_fail@plt+0x2224>
   1170c:	ldrd	r2, [sp, #16]
   11710:	cmp	r0, #0
   11714:	moveq	fp, #1
   11718:	movne	fp, #0
   1171c:	movne	ip, #1
   11720:	moveq	ip, #0
   11724:	adds	r2, r2, fp
   11728:	adc	r3, r3, #0
   1172c:	mov	r0, r2
   11730:	mov	r1, r3
   11734:	strd	r2, [sp, #16]
   11738:	mvn	r3, #0
   1173c:	mvn	r2, #0
   11740:	cmp	r1, r3
   11744:	cmpeq	r0, r2
   11748:	ldr	r2, [sl, #20]
   1174c:	bne	11bdc <__assert_fail@plt+0xc20>
   11750:	cmp	r2, #0
   11754:	beq	117b0 <__assert_fail@plt+0x7f4>
   11758:	cmp	ip, #0
   1175c:	beq	11878 <__assert_fail@plt+0x8bc>
   11760:	mov	r3, #0
   11764:	mvn	r2, #1
   11768:	mov	fp, ip
   1176c:	add	r0, r8, #4
   11770:	add	r1, r8, #8
   11774:	str	r3, [sp, #36]	; 0x24
   11778:	mvn	r3, #0
   1177c:	strd	r2, [sp, #16]
   11780:	ldrb	r3, [sl, #16]
   11784:	cmp	r3, #0
   11788:	bne	11680 <__assert_fail@plt+0x6c4>
   1178c:	mov	r3, r5
   11790:	mov	r9, r4
   11794:	str	r7, [sp, #32]
   11798:	mov	r5, r8
   1179c:	mov	r8, r3
   117a0:	b	116a4 <__assert_fail@plt+0x6e8>
   117a4:	ldr	r1, [sp, #32]
   117a8:	bl	10db8 <memcmp@plt>
   117ac:	b	1170c <__assert_fail@plt+0x750>
   117b0:	cmp	ip, #0
   117b4:	bne	11a98 <__assert_fail@plt+0xadc>
   117b8:	ldrb	r3, [sl, #18]
   117bc:	cmp	r3, #0
   117c0:	beq	11884 <__assert_fail@plt+0x8c8>
   117c4:	mvn	r2, #1
   117c8:	mvn	r3, #0
   117cc:	add	r0, r8, #4
   117d0:	add	r1, r8, #8
   117d4:	strd	r2, [sp, #16]
   117d8:	mov	fp, #0
   117dc:	b	11680 <__assert_fail@plt+0x6c4>
   117e0:	ldr	r3, [r6]
   117e4:	ldr	r3, [r3]
   117e8:	tst	r3, #32
   117ec:	bne	11998 <__assert_fail@plt+0x9dc>
   117f0:	ldrd	r2, [sp, #16]
   117f4:	orrs	r3, r2, r3
   117f8:	ldrbeq	r3, [sl, #17]
   117fc:	eoreq	r3, r3, #1
   11800:	beq	1180c <__assert_fail@plt+0x850>
   11804:	ldrb	r3, [sl, #16]
   11808:	eor	r3, r3, #1
   1180c:	cmp	r3, #0
   11810:	bne	11824 <__assert_fail@plt+0x868>
   11814:	add	r1, r8, #8
   11818:	add	r0, r8, #4
   1181c:	ldrd	r2, [sp, #16]
   11820:	bl	11e78 <__assert_fail@plt+0xebc>
   11824:	ldr	r0, [r6]
   11828:	ldr	r3, [r0]
   1182c:	tst	r3, #32
   11830:	bne	11998 <__assert_fail@plt+0x9dc>
   11834:	bl	12b14 <__assert_fail@plt+0x1b58>
   11838:	subs	r4, r0, #0
   1183c:	bne	11998 <__assert_fail@plt+0x9dc>
   11840:	ldr	r0, [sp, #68]	; 0x44
   11844:	bl	12c28 <__assert_fail@plt+0x1c6c>
   11848:	ldr	r0, [sp, #80]	; 0x50
   1184c:	bl	12c28 <__assert_fail@plt+0x1c6c>
   11850:	mov	r0, r4
   11854:	add	sp, sp, #92	; 0x5c
   11858:	ldrd	r4, [sp]
   1185c:	ldrd	r6, [sp, #8]
   11860:	ldrd	r8, [sp, #16]
   11864:	ldrd	sl, [sp, #24]
   11868:	add	sp, sp, #32
   1186c:	pop	{pc}		; (ldr pc, [sp], #4)
   11870:	ldr	fp, [sp, #28]
   11874:	b	116c8 <__assert_fail@plt+0x70c>
   11878:	ldrb	r3, [sl, #18]
   1187c:	cmp	r3, #0
   11880:	bne	1191c <__assert_fail@plt+0x960>
   11884:	mvn	r2, #1
   11888:	mvn	r3, #0
   1188c:	strd	r2, [sp, #16]
   11890:	b	115d4 <__assert_fail@plt+0x618>
   11894:	ldr	r3, [sp, #28]
   11898:	cmp	r3, #2
   1189c:	subeq	r2, r0, #48	; 0x30
   118a0:	beq	119e4 <__assert_fail@plt+0xa28>
   118a4:	ldr	r3, [sl, #4]
   118a8:	ldr	r2, [sp, #36]	; 0x24
   118ac:	cmp	r3, r2
   118b0:	bls	119d0 <__assert_fail@plt+0xa14>
   118b4:	mvn	r3, #0
   118b8:	mov	r2, #1
   118bc:	str	r3, [sl, #4]
   118c0:	str	r2, [sp, #28]
   118c4:	b	110ec <__assert_fail@plt+0x130>
   118c8:	mov	r3, #1
   118cc:	strb	r3, [sl, #28]
   118d0:	b	110fc <__assert_fail@plt+0x140>
   118d4:	mov	r3, #1
   118d8:	strb	r7, [sl, #16]
   118dc:	str	r3, [sp, #16]
   118e0:	b	110fc <__assert_fail@plt+0x140>
   118e4:	mov	r3, #1
   118e8:	strb	r7, [sl, #17]
   118ec:	str	r3, [sp, #16]
   118f0:	b	110fc <__assert_fail@plt+0x140>
   118f4:	movw	r3, #41320	; 0xa168
   118f8:	movt	r3, #2
   118fc:	movw	r1, #38268	; 0x957c
   11900:	movt	r1, #1
   11904:	ldr	r0, [r3]
   11908:	bl	11dec <__assert_fail@plt+0xe30>
   1190c:	mov	r3, #2
   11910:	str	r0, [sl, #4]
   11914:	str	r3, [sp, #28]
   11918:	b	110fc <__assert_fail@plt+0x140>
   1191c:	mvn	r2, #1
   11920:	mvn	r3, #0
   11924:	add	r0, r8, #4
   11928:	add	r1, r8, #8
   1192c:	strd	r2, [sp, #16]
   11930:	cmp	fp, #0
   11934:	beq	11780 <__assert_fail@plt+0x7c4>
   11938:	b	117d8 <__assert_fail@plt+0x81c>
   1193c:	bl	1324c <__assert_fail@plt+0x2290>
   11940:	sub	r0, r0, #199680	; 0x30c00
   11944:	sub	r0, r0, #432	; 0x1b0
   11948:	cmp	r0, #696	; 0x2b8
   1194c:	bls	111b4 <__assert_fail@plt+0x1f8>
   11950:	movw	r1, #36560	; 0x8ed0
   11954:	movt	r1, #1
   11958:	ldr	r0, [r7]
   1195c:	add	r3, sp, #72	; 0x48
   11960:	mov	r2, #10
   11964:	str	r1, [sp]
   11968:	mov	r1, #0
   1196c:	bl	17af0 <__assert_fail@plt+0x6b34>
   11970:	cmp	r0, #0
   11974:	bne	111b4 <__assert_fail@plt+0x1f8>
   11978:	ldrd	r2, [sp, #72]	; 0x48
   1197c:	mov	r1, #0
   11980:	mvn	r0, #0
   11984:	cmp	r3, r1
   11988:	cmpeq	r2, r0
   1198c:	strls	r2, [sl, #8]
   11990:	bls	110fc <__assert_fail@plt+0x140>
   11994:	b	111b4 <__assert_fail@plt+0x1f8>
   11998:	mov	r2, #5
   1199c:	movw	r1, #38580	; 0x96b4
   119a0:	movt	r1, #1
   119a4:	mov	r0, #0
   119a8:	bl	10dd0 <dcgettext@plt>
   119ac:	mov	r4, r0
   119b0:	mov	r0, #4
   119b4:	ldr	r1, [sp, #40]	; 0x28
   119b8:	bl	158f4 <__assert_fail@plt+0x4938>
   119bc:	mov	r3, r0
   119c0:	mov	r2, r4
   119c4:	mov	r1, #0
   119c8:	mov	r0, #1
   119cc:	bl	10e48 <error@plt>
   119d0:	mov	r2, #10
   119d4:	sub	r1, r0, #48	; 0x30
   119d8:	mla	r2, r2, r3, r1
   119dc:	cmp	r3, r2
   119e0:	bhi	118b4 <__assert_fail@plt+0x8f8>
   119e4:	mov	r3, #1
   119e8:	str	r2, [sl, #4]
   119ec:	str	r3, [sp, #28]
   119f0:	b	110ec <__assert_fail@plt+0x130>
   119f4:	ldr	r3, [sl, #24]
   119f8:	cmp	r3, #0
   119fc:	bne	11514 <__assert_fail@plt+0x558>
   11a00:	b	11458 <__assert_fail@plt+0x49c>
   11a04:	ldrb	fp, [sl, #18]
   11a08:	cmp	fp, #0
   11a0c:	bne	11680 <__assert_fail@plt+0x6c4>
   11a10:	mov	r3, r5
   11a14:	mov	r9, r4
   11a18:	str	r7, [sp, #32]
   11a1c:	mov	r5, r8
   11a20:	mov	r8, r3
   11a24:	b	115d4 <__assert_fail@plt+0x618>
   11a28:	cmp	r2, r3
   11a2c:	bne	114d8 <__assert_fail@plt+0x51c>
   11a30:	mov	r1, r9
   11a34:	bl	10db8 <memcmp@plt>
   11a38:	adds	r0, r0, #0
   11a3c:	movne	r0, #1
   11a40:	b	114dc <__assert_fail@plt+0x520>
   11a44:	movw	r3, #41312	; 0xa160
   11a48:	movt	r3, #2
   11a4c:	ldr	r0, [sp, #40]	; 0x28
   11a50:	movw	r1, #38572	; 0x96ac
   11a54:	movt	r1, #1
   11a58:	ldr	r2, [r3]
   11a5c:	bl	12c88 <__assert_fail@plt+0x1ccc>
   11a60:	subs	r5, r0, #0
   11a64:	bne	113b4 <__assert_fail@plt+0x3f8>
   11a68:	bl	10ef0 <__errno_location@plt>
   11a6c:	ldr	r4, [r0]
   11a70:	mov	r1, #3
   11a74:	mov	r0, r5
   11a78:	ldr	r2, [sp, #40]	; 0x28
   11a7c:	bl	16474 <__assert_fail@plt+0x54b8>
   11a80:	mov	r3, r0
   11a84:	movw	r2, #36288	; 0x8dc0
   11a88:	movt	r2, #1
   11a8c:	mov	r0, #1
   11a90:	mov	r1, r4
   11a94:	bl	10e48 <error@plt>
   11a98:	mvn	r2, #1
   11a9c:	mvn	r3, #0
   11aa0:	strd	r2, [sp, #16]
   11aa4:	add	r2, r8, #4
   11aa8:	add	r3, r8, #8
   11aac:	b	116ec <__assert_fail@plt+0x730>
   11ab0:	ldr	r3, [sp, #32]
   11ab4:	ldr	r0, [r3]
   11ab8:	ldr	r3, [r0, #20]
   11abc:	ldr	r2, [r0, #24]
   11ac0:	cmp	r3, r2
   11ac4:	addcc	r2, r3, #1
   11ac8:	strcc	r2, [r0, #20]
   11acc:	ldrcc	r2, [sp, #24]
   11ad0:	strbcc	r2, [r3]
   11ad4:	bcc	11514 <__assert_fail@plt+0x558>
   11ad8:	ldr	r1, [sp, #24]
   11adc:	bl	10f5c <__overflow@plt>
   11ae0:	b	11514 <__assert_fail@plt+0x558>
   11ae4:	ldr	r3, [sl, #24]
   11ae8:	sub	r3, r3, #2
   11aec:	bics	r3, r3, #2
   11af0:	ldr	r3, [sp, #28]
   11af4:	movne	r3, #0
   11af8:	andeq	r3, r3, #1
   11afc:	cmp	r3, #0
   11b00:	beq	11824 <__assert_fail@plt+0x868>
   11b04:	movw	r3, #41316	; 0xa164
   11b08:	movt	r3, #2
   11b0c:	ldr	r0, [r3]
   11b10:	ldr	r3, [r0, #20]
   11b14:	ldr	r2, [r0, #24]
   11b18:	cmp	r3, r2
   11b1c:	addcc	r2, r3, #1
   11b20:	strcc	r2, [r0, #20]
   11b24:	ldrcc	r2, [sp, #24]
   11b28:	strbcc	r2, [r3]
   11b2c:	bcc	11824 <__assert_fail@plt+0x868>
   11b30:	ldr	r1, [sp, #24]
   11b34:	bl	10f5c <__overflow@plt>
   11b38:	b	11824 <__assert_fail@plt+0x868>
   11b3c:	mov	r1, r9
   11b40:	bl	131e0 <__assert_fail@plt+0x2224>
   11b44:	adds	r0, r0, #0
   11b48:	movne	r0, #1
   11b4c:	b	114dc <__assert_fail@plt+0x520>
   11b50:	movw	r1, #38224	; 0x9550
   11b54:	movt	r1, #1
   11b58:	mov	r2, #5
   11b5c:	mov	r0, #0
   11b60:	bl	10dd0 <dcgettext@plt>
   11b64:	ldr	r3, [r6]
   11b68:	mov	r4, r0
   11b6c:	ldr	r0, [r8, r3, lsl #2]
   11b70:	bl	16c20 <__assert_fail@plt+0x5c64>
   11b74:	mov	r1, #0
   11b78:	mov	r3, r0
   11b7c:	mov	r2, r4
   11b80:	mov	r0, r1
   11b84:	bl	10e48 <error@plt>
   11b88:	b	111dc <__assert_fail@plt+0x220>
   11b8c:	mov	r0, r7
   11b90:	bl	12040 <__assert_fail@plt+0x1084>
   11b94:	movw	r1, #38224	; 0x9550
   11b98:	movt	r1, #1
   11b9c:	mov	r2, #5
   11ba0:	mov	r0, #0
   11ba4:	bl	10dd0 <dcgettext@plt>
   11ba8:	mov	r4, r0
   11bac:	ldr	r0, [r7]
   11bb0:	b	11b70 <__assert_fail@plt+0xbb4>
   11bb4:	movw	r1, #38408	; 0x9608
   11bb8:	movt	r1, #1
   11bbc:	mov	r2, #5
   11bc0:	mov	r0, #0
   11bc4:	bl	10dd0 <dcgettext@plt>
   11bc8:	mov	r1, #0
   11bcc:	mov	r2, r0
   11bd0:	mov	r0, r1
   11bd4:	bl	10e48 <error@plt>
   11bd8:	b	111dc <__assert_fail@plt+0x220>
   11bdc:	cmp	r2, #0
   11be0:	beq	11c24 <__assert_fail@plt+0xc68>
   11be4:	cmp	ip, #0
   11be8:	bne	116c8 <__assert_fail@plt+0x70c>
   11bec:	ldrd	r0, [sp, #16]
   11bf0:	cmp	r1, #0
   11bf4:	cmpeq	r0, #1
   11bf8:	bne	11c2c <__assert_fail@plt+0xc70>
   11bfc:	cmp	r2, #1
   11c00:	beq	11c5c <__assert_fail@plt+0xca0>
   11c04:	cmp	r2, #2
   11c08:	beq	11c94 <__assert_fail@plt+0xcd8>
   11c0c:	ldrb	r3, [sl, #18]
   11c10:	cmp	r3, #0
   11c14:	beq	115d4 <__assert_fail@plt+0x618>
   11c18:	add	r0, r8, #4
   11c1c:	add	r1, r8, #8
   11c20:	b	117d8 <__assert_fail@plt+0x81c>
   11c24:	cmp	ip, #0
   11c28:	bne	11654 <__assert_fail@plt+0x698>
   11c2c:	ldrb	r3, [sl, #18]
   11c30:	cmp	r3, #0
   11c34:	beq	115d4 <__assert_fail@plt+0x618>
   11c38:	ldrd	r2, [sp, #16]
   11c3c:	add	r0, r8, #4
   11c40:	add	r1, r8, #8
   11c44:	orrs	r3, r2, r3
   11c48:	bne	11930 <__assert_fail@plt+0x974>
   11c4c:	ldrb	r3, [sl, #17]
   11c50:	cmp	r3, #0
   11c54:	bne	117d8 <__assert_fail@plt+0x81c>
   11c58:	b	11a10 <__assert_fail@plt+0xa54>
   11c5c:	ldr	r3, [sp, #44]	; 0x2c
   11c60:	ldr	r0, [r3]
   11c64:	ldr	r3, [r0, #20]
   11c68:	ldr	r2, [r0, #24]
   11c6c:	cmp	r3, r2
   11c70:	bcs	11cb4 <__assert_fail@plt+0xcf8>
   11c74:	add	r1, r3, #1
   11c78:	ldrb	r2, [sl, #18]
   11c7c:	str	r1, [r0, #20]
   11c80:	ldr	r1, [sp, #24]
   11c84:	cmp	r2, #0
   11c88:	strb	r1, [r3]
   11c8c:	beq	115d4 <__assert_fail@plt+0x618>
   11c90:	b	11c18 <__assert_fail@plt+0xc5c>
   11c94:	ldr	r3, [sp, #36]	; 0x24
   11c98:	cmp	r3, #0
   11c9c:	beq	11c5c <__assert_fail@plt+0xca0>
   11ca0:	ldrb	r3, [sl, #18]
   11ca4:	cmp	r3, #0
   11ca8:	beq	115d4 <__assert_fail@plt+0x618>
   11cac:	str	r3, [sp, #36]	; 0x24
   11cb0:	b	11c18 <__assert_fail@plt+0xc5c>
   11cb4:	ldr	r1, [sp, #24]
   11cb8:	bl	10f5c <__overflow@plt>
   11cbc:	b	11c0c <__assert_fail@plt+0xc50>
   11cc0:	bl	10ef0 <__errno_location@plt>
   11cc4:	ldr	r6, [r0]
   11cc8:	mov	r2, r4
   11ccc:	mov	r1, #3
   11cd0:	mov	r0, r5
   11cd4:	bl	16474 <__assert_fail@plt+0x54b8>
   11cd8:	mov	r3, r0
   11cdc:	movw	r2, #36288	; 0x8dc0
   11ce0:	movt	r2, #1
   11ce4:	mov	r0, #1
   11ce8:	mov	r1, r6
   11cec:	bl	10e48 <error@plt>
   11cf0:	andeq	r8, r1, ip, lsr #25
   11cf4:	muleq	r1, r8, sp
   11cf8:	andeq	r8, r1, ip, ror sp
   11cfc:	mov	fp, #0
   11d00:	mov	lr, #0
   11d04:	pop	{r1}		; (ldr r1, [sp], #4)
   11d08:	mov	r2, sp
   11d0c:	push	{r2}		; (str r2, [sp, #-4]!)
   11d10:	push	{r0}		; (str r0, [sp, #-4]!)
   11d14:	ldr	ip, [pc, #16]	; 11d2c <__assert_fail@plt+0xd70>
   11d18:	push	{ip}		; (str ip, [sp, #-4]!)
   11d1c:	ldr	r0, [pc, #12]	; 11d30 <__assert_fail@plt+0xd74>
   11d20:	ldr	r3, [pc, #12]	; 11d34 <__assert_fail@plt+0xd78>
   11d24:	bl	10e78 <__libc_start_main@plt>
   11d28:	bl	10fa4 <abort@plt>
   11d2c:	andeq	r8, r1, ip, asr #24
   11d30:	andeq	r0, r1, r8, asr #31
   11d34:	andeq	r8, r1, ip, ror #23
   11d38:	ldr	r3, [pc, #20]	; 11d54 <__assert_fail@plt+0xd98>
   11d3c:	ldr	r2, [pc, #20]	; 11d58 <__assert_fail@plt+0xd9c>
   11d40:	add	r3, pc, r3
   11d44:	ldr	r2, [r3, r2]
   11d48:	cmp	r2, #0
   11d4c:	bxeq	lr
   11d50:	b	10e9c <__gmon_start__@plt>
   11d54:			; <UNDEFINED> instruction: 0x000182b8
   11d58:	andeq	r0, r0, ip, ror #1
   11d5c:	ldr	r0, [pc, #24]	; 11d7c <__assert_fail@plt+0xdc0>
   11d60:	ldr	r3, [pc, #24]	; 11d80 <__assert_fail@plt+0xdc4>
   11d64:	cmp	r3, r0
   11d68:	bxeq	lr
   11d6c:	ldr	r3, [pc, #16]	; 11d84 <__assert_fail@plt+0xdc8>
   11d70:	cmp	r3, #0
   11d74:	bxeq	lr
   11d78:	bx	r3
   11d7c:	andeq	sl, r2, r4, asr #2
   11d80:	andeq	sl, r2, r4, asr #2
   11d84:	andeq	r0, r0, r0
   11d88:	ldr	r0, [pc, #36]	; 11db4 <__assert_fail@plt+0xdf8>
   11d8c:	ldr	r1, [pc, #36]	; 11db8 <__assert_fail@plt+0xdfc>
   11d90:	sub	r1, r1, r0
   11d94:	asr	r1, r1, #2
   11d98:	add	r1, r1, r1, lsr #31
   11d9c:	asrs	r1, r1, #1
   11da0:	bxeq	lr
   11da4:	ldr	r3, [pc, #16]	; 11dbc <__assert_fail@plt+0xe00>
   11da8:	cmp	r3, #0
   11dac:	bxeq	lr
   11db0:	bx	r3
   11db4:	andeq	sl, r2, r4, asr #2
   11db8:	andeq	sl, r2, r4, asr #2
   11dbc:	andeq	r0, r0, r0
   11dc0:	push	{r4, lr}
   11dc4:	ldr	r4, [pc, #24]	; 11de4 <__assert_fail@plt+0xe28>
   11dc8:	ldrb	r3, [r4]
   11dcc:	cmp	r3, #0
   11dd0:	popne	{r4, pc}
   11dd4:	bl	11d5c <__assert_fail@plt+0xda0>
   11dd8:	mov	r3, #1
   11ddc:	strb	r3, [r4]
   11de0:	pop	{r4, pc}
   11de4:	andeq	sl, r2, ip, ror #2
   11de8:	b	11d88 <__assert_fail@plt+0xdcc>
   11dec:	movw	ip, #36560	; 0x8ed0
   11df0:	movt	ip, #1
   11df4:	strd	r4, [sp, #-12]!
   11df8:	str	lr, [sp, #8]
   11dfc:	sub	sp, sp, #20
   11e00:	mov	r5, r1
   11e04:	mov	r2, #10
   11e08:	mov	r1, #0
   11e0c:	add	r3, sp, #8
   11e10:	str	ip, [sp]
   11e14:	mov	r4, r0
   11e18:	bl	17af0 <__assert_fail@plt+0x6b34>
   11e1c:	cmp	r0, #1
   11e20:	bhi	11e4c <__assert_fail@plt+0xe90>
   11e24:	ldrd	r0, [sp, #8]
   11e28:	mov	r3, #0
   11e2c:	mvn	r2, #0
   11e30:	cmp	r1, r3
   11e34:	cmpeq	r0, r2
   11e38:	movhi	r0, r2
   11e3c:	add	sp, sp, #20
   11e40:	ldrd	r4, [sp]
   11e44:	add	sp, sp, #8
   11e48:	pop	{pc}		; (ldr pc, [sp], #4)
   11e4c:	mov	r1, r5
   11e50:	mov	r2, #5
   11e54:	mov	r0, #0
   11e58:	bl	10dd0 <dcgettext@plt>
   11e5c:	movw	r2, #36284	; 0x8dbc
   11e60:	movt	r2, #1
   11e64:	str	r0, [sp]
   11e68:	mov	r3, r4
   11e6c:	mov	r1, #0
   11e70:	mov	r0, #1
   11e74:	bl	10e48 <error@plt>
   11e78:	movw	ip, #41328	; 0xa170
   11e7c:	movt	ip, #2
   11e80:	strd	r4, [sp, #-16]!
   11e84:	ldr	ip, [ip]
   11e88:	mov	r5, r0
   11e8c:	mov	r4, r1
   11e90:	str	r6, [sp, #8]
   11e94:	str	lr, [sp, #12]
   11e98:	cmp	ip, #0
   11e9c:	beq	11ecc <__assert_fail@plt+0xf10>
   11ea0:	movw	r3, #41316	; 0xa164
   11ea4:	movt	r3, #2
   11ea8:	ldr	r0, [r4]
   11eac:	mov	r1, #1
   11eb0:	ldr	r2, [r5]
   11eb4:	ldr	r3, [r3]
   11eb8:	ldrd	r4, [sp]
   11ebc:	ldr	r6, [sp, #8]
   11ec0:	ldr	lr, [sp, #12]
   11ec4:	add	sp, sp, #16
   11ec8:	b	10dac <fwrite_unlocked@plt>
   11ecc:	adds	r2, r2, #1
   11ed0:	movw	r1, #36292	; 0x8dc4
   11ed4:	movt	r1, #1
   11ed8:	adc	r3, r3, #0
   11edc:	mov	r0, #1
   11ee0:	bl	10f14 <__printf_chk@plt>
   11ee4:	b	11ea0 <__assert_fail@plt+0xee4>
   11ee8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   11eec:	subs	r4, r0, #1
   11ef0:	strd	r6, [sp, #8]
   11ef4:	movw	r6, #41328	; 0xa170
   11ef8:	movt	r6, #2
   11efc:	ldr	r5, [r6, #4]
   11f00:	movne	ip, #1
   11f04:	moveq	ip, #0
   11f08:	mov	r7, r1
   11f0c:	str	r8, [sp, #16]
   11f10:	str	lr, [sp, #20]
   11f14:	cmp	r5, #0
   11f18:	moveq	ip, #0
   11f1c:	cmp	ip, #0
   11f20:	beq	11fd8 <__assert_fail@plt+0x101c>
   11f24:	bl	10ec0 <__ctype_b_loc@plt>
   11f28:	ldrb	r2, [r7]
   11f2c:	mov	ip, #0
   11f30:	mov	r1, ip
   11f34:	ldr	lr, [r0]
   11f38:	lsl	r3, r2, #1
   11f3c:	ldrh	r3, [lr, r3]
   11f40:	and	r3, r3, #1
   11f44:	cmp	r2, #10
   11f48:	movne	r2, r3
   11f4c:	orreq	r2, r3, #1
   11f50:	cmp	r2, #0
   11f54:	beq	11fa0 <__assert_fail@plt+0xfe4>
   11f58:	add	r3, ip, #1
   11f5c:	cmp	r4, r3
   11f60:	bls	12034 <__assert_fail@plt+0x1078>
   11f64:	add	r0, r7, ip
   11f68:	mov	ip, r3
   11f6c:	b	11f7c <__assert_fail@plt+0xfc0>
   11f70:	add	ip, ip, #1
   11f74:	cmp	r4, ip
   11f78:	bls	11fd4 <__assert_fail@plt+0x1018>
   11f7c:	ldrb	r2, [r0, #1]!
   11f80:	lsl	r3, r2, #1
   11f84:	ldrh	r3, [lr, r3]
   11f88:	and	r3, r3, #1
   11f8c:	cmp	r2, #10
   11f90:	movne	r2, r3
   11f94:	orreq	r2, r3, #1
   11f98:	cmp	r2, #0
   11f9c:	bne	11f70 <__assert_fail@plt+0xfb4>
   11fa0:	cmp	r4, ip
   11fa4:	bls	11fd4 <__assert_fail@plt+0x1018>
   11fa8:	ldrb	r2, [r7, ip]
   11fac:	add	r0, r7, ip
   11fb0:	cmp	r2, #10
   11fb4:	movne	r8, r3
   11fb8:	orreq	r8, r3, #1
   11fbc:	cmp	r8, #0
   11fc0:	beq	12000 <__assert_fail@plt+0x1044>
   11fc4:	add	r1, r1, #1
   11fc8:	cmp	r4, ip
   11fcc:	cmphi	r5, r1
   11fd0:	bhi	11f44 <__assert_fail@plt+0xf88>
   11fd4:	sub	r4, r4, ip
   11fd8:	ldr	r0, [r6, #8]
   11fdc:	ldr	r8, [sp, #16]
   11fe0:	cmp	r4, r0
   11fe4:	addls	r0, ip, r4
   11fe8:	addhi	r0, ip, r0
   11fec:	ldrd	r4, [sp]
   11ff0:	add	r0, r7, r0
   11ff4:	ldrd	r6, [sp, #8]
   11ff8:	add	sp, sp, #20
   11ffc:	pop	{pc}		; (ldr pc, [sp], #4)
   12000:	add	ip, ip, #1
   12004:	cmp	r4, ip
   12008:	bls	11fd4 <__assert_fail@plt+0x1018>
   1200c:	ldrb	r2, [r0, #1]!
   12010:	lsl	r3, r2, #1
   12014:	ldrh	r3, [lr, r3]
   12018:	and	r3, r3, #1
   1201c:	cmp	r2, #10
   12020:	movne	r8, r3
   12024:	orreq	r8, r3, #1
   12028:	cmp	r8, #0
   1202c:	bne	11fc4 <__assert_fail@plt+0x1008>
   12030:	b	12000 <__assert_fail@plt+0x1044>
   12034:	mov	ip, r3
   12038:	sub	r4, r4, ip
   1203c:	b	11fd8 <__assert_fail@plt+0x101c>
   12040:	subs	r6, r0, #0
   12044:	str	r7, [sp, #-8]!
   12048:	str	lr, [sp, #4]
   1204c:	sub	sp, sp, #56	; 0x38
   12050:	beq	12098 <__assert_fail@plt+0x10dc>
   12054:	movw	r3, #41304	; 0xa158
   12058:	movt	r3, #2
   1205c:	ldr	r4, [r3]
   12060:	mov	r2, #5
   12064:	movw	r1, #36308	; 0x8dd4
   12068:	movt	r1, #1
   1206c:	mov	r0, #0
   12070:	bl	10dd0 <dcgettext@plt>
   12074:	movw	r3, #41368	; 0xa198
   12078:	movt	r3, #2
   1207c:	mov	r2, r0
   12080:	mov	r1, #1
   12084:	ldr	r3, [r3]
   12088:	mov	r0, r4
   1208c:	bl	10f2c <__fprintf_chk@plt>
   12090:	mov	r0, r6
   12094:	bl	10ecc <exit@plt>
   12098:	mov	r2, #5
   1209c:	movw	r1, #36348	; 0x8dfc
   120a0:	movt	r1, #1
   120a4:	movw	r7, #41316	; 0xa164
   120a8:	movt	r7, #2
   120ac:	bl	10dd0 <dcgettext@plt>
   120b0:	movw	r3, #41368	; 0xa198
   120b4:	movt	r3, #2
   120b8:	mov	r1, r0
   120bc:	mov	r0, #1
   120c0:	ldr	r2, [r3]
   120c4:	bl	10f14 <__printf_chk@plt>
   120c8:	mov	r2, #5
   120cc:	movw	r1, #36388	; 0x8e24
   120d0:	movt	r1, #1
   120d4:	mov	r0, r6
   120d8:	bl	10dd0 <dcgettext@plt>
   120dc:	ldr	r1, [r7]
   120e0:	bl	10d34 <fputs_unlocked@plt>
   120e4:	mov	r2, #5
   120e8:	movw	r1, #36564	; 0x8ed4
   120ec:	movt	r1, #1
   120f0:	mov	r0, r6
   120f4:	bl	10dd0 <dcgettext@plt>
   120f8:	ldr	r1, [r7]
   120fc:	bl	10d34 <fputs_unlocked@plt>
   12100:	mov	r2, #5
   12104:	movw	r1, #36640	; 0x8f20
   12108:	movt	r1, #1
   1210c:	mov	r0, r6
   12110:	bl	10dd0 <dcgettext@plt>
   12114:	ldr	r1, [r7]
   12118:	bl	10d34 <fputs_unlocked@plt>
   1211c:	mov	r2, #5
   12120:	movw	r1, #36780	; 0x8fac
   12124:	movt	r1, #1
   12128:	mov	r0, r6
   1212c:	bl	10dd0 <dcgettext@plt>
   12130:	ldr	r1, [r7]
   12134:	bl	10d34 <fputs_unlocked@plt>
   12138:	mov	r2, #5
   1213c:	movw	r1, #37028	; 0x90a4
   12140:	movt	r1, #1
   12144:	mov	r0, r6
   12148:	bl	10dd0 <dcgettext@plt>
   1214c:	ldr	r1, [r7]
   12150:	bl	10d34 <fputs_unlocked@plt>
   12154:	mov	r2, #5
   12158:	movw	r1, #37088	; 0x90e0
   1215c:	movt	r1, #1
   12160:	mov	r0, r6
   12164:	bl	10dd0 <dcgettext@plt>
   12168:	ldr	r1, [r7]
   1216c:	bl	10d34 <fputs_unlocked@plt>
   12170:	mov	r2, #5
   12174:	movw	r1, #37240	; 0x9178
   12178:	movt	r1, #1
   1217c:	mov	r0, r6
   12180:	bl	10dd0 <dcgettext@plt>
   12184:	ldr	r1, [r7]
   12188:	bl	10d34 <fputs_unlocked@plt>
   1218c:	mov	r2, #5
   12190:	movw	r1, #37420	; 0x922c
   12194:	movt	r1, #1
   12198:	mov	r0, r6
   1219c:	bl	10dd0 <dcgettext@plt>
   121a0:	ldr	r1, [r7]
   121a4:	bl	10d34 <fputs_unlocked@plt>
   121a8:	mov	r2, #5
   121ac:	movw	r1, #37484	; 0x926c
   121b0:	movt	r1, #1
   121b4:	mov	r0, r6
   121b8:	bl	10dd0 <dcgettext@plt>
   121bc:	ldr	r1, [r7]
   121c0:	bl	10d34 <fputs_unlocked@plt>
   121c4:	mov	r2, #5
   121c8:	movw	r1, #37552	; 0x92b0
   121cc:	movt	r1, #1
   121d0:	mov	r0, r6
   121d4:	bl	10dd0 <dcgettext@plt>
   121d8:	ldr	r1, [r7]
   121dc:	bl	10d34 <fputs_unlocked@plt>
   121e0:	mov	r2, #5
   121e4:	movw	r1, #37600	; 0x92e0
   121e8:	movt	r1, #1
   121ec:	mov	r0, r6
   121f0:	bl	10dd0 <dcgettext@plt>
   121f4:	ldr	r1, [r7]
   121f8:	bl	10d34 <fputs_unlocked@plt>
   121fc:	mov	r2, #5
   12200:	movw	r1, #37656	; 0x9318
   12204:	movt	r1, #1
   12208:	mov	r0, r6
   1220c:	bl	10dd0 <dcgettext@plt>
   12210:	ldr	r1, [r7]
   12214:	bl	10d34 <fputs_unlocked@plt>
   12218:	mov	r2, #5
   1221c:	movw	r1, #37776	; 0x9390
   12220:	movt	r1, #1
   12224:	mov	r0, r6
   12228:	bl	10dd0 <dcgettext@plt>
   1222c:	ldr	r1, [r7]
   12230:	bl	10d34 <fputs_unlocked@plt>
   12234:	movw	lr, #35956	; 0x8c74
   12238:	movt	lr, #1
   1223c:	ldr	ip, [lr]
   12240:	ldr	r4, [lr, #4]
   12244:	ldrd	r8, [lr, #8]
   12248:	subs	r1, ip, #0
   1224c:	str	ip, [sp]
   12250:	ldrd	r2, [lr, #16]
   12254:	str	r4, [sp, #4]
   12258:	ldrd	r4, [lr, #24]
   1225c:	strd	r8, [sp, #8]
   12260:	ldrd	r8, [lr, #32]
   12264:	strd	r2, [sp, #16]
   12268:	ldrd	r2, [lr, #40]	; 0x28
   1226c:	strd	r4, [sp, #24]
   12270:	ldrd	r4, [lr, #48]	; 0x30
   12274:	strd	r8, [sp, #32]
   12278:	strd	r2, [sp, #40]	; 0x28
   1227c:	strd	r4, [sp, #48]	; 0x30
   12280:	movwne	r5, #36300	; 0x8dcc
   12284:	mov	r4, sp
   12288:	movtne	r5, #1
   1228c:	bne	12384 <__assert_fail@plt+0x13c8>
   12290:	ldr	r4, [r4, #4]
   12294:	movw	r1, #37920	; 0x9420
   12298:	movt	r1, #1
   1229c:	mov	r2, #5
   122a0:	cmp	r4, #0
   122a4:	beq	12398 <__assert_fail@plt+0x13dc>
   122a8:	mov	r0, #0
   122ac:	bl	10dd0 <dcgettext@plt>
   122b0:	mov	r1, r0
   122b4:	movw	r3, #37944	; 0x9438
   122b8:	movt	r3, #1
   122bc:	movw	r2, #37984	; 0x9460
   122c0:	movt	r2, #1
   122c4:	mov	r0, #1
   122c8:	bl	10f14 <__printf_chk@plt>
   122cc:	mov	r1, #0
   122d0:	mov	r0, #5
   122d4:	bl	10f68 <setlocale@plt>
   122d8:	cmp	r0, #0
   122dc:	movweq	r5, #36300	; 0x8dcc
   122e0:	movteq	r5, #1
   122e4:	beq	12308 <__assert_fail@plt+0x134c>
   122e8:	movw	r1, #38000	; 0x9470
   122ec:	movt	r1, #1
   122f0:	mov	r2, #3
   122f4:	movw	r5, #36300	; 0x8dcc
   122f8:	movt	r5, #1
   122fc:	bl	10f98 <strncmp@plt>
   12300:	cmp	r0, #0
   12304:	bne	12450 <__assert_fail@plt+0x1494>
   12308:	mov	r2, #5
   1230c:	movw	r1, #38076	; 0x94bc
   12310:	movt	r1, #1
   12314:	mov	r0, #0
   12318:	bl	10dd0 <dcgettext@plt>
   1231c:	mov	r1, r0
   12320:	movw	r3, #36300	; 0x8dcc
   12324:	movt	r3, #1
   12328:	movw	r2, #37944	; 0x9438
   1232c:	movt	r2, #1
   12330:	mov	r0, #1
   12334:	bl	10f14 <__printf_chk@plt>
   12338:	mov	r2, #5
   1233c:	movw	r1, #38104	; 0x94d8
   12340:	movt	r1, #1
   12344:	mov	r0, #0
   12348:	bl	10dd0 <dcgettext@plt>
   1234c:	movw	r2, #38608	; 0x96d0
   12350:	movt	r2, #1
   12354:	cmp	r4, r5
   12358:	movw	r3, #36560	; 0x8ed0
   1235c:	movt	r3, #1
   12360:	mov	r1, r0
   12364:	moveq	r3, r2
   12368:	mov	r2, r4
   1236c:	mov	r0, #1
   12370:	bl	10f14 <__printf_chk@plt>
   12374:	b	12090 <__assert_fail@plt+0x10d4>
   12378:	ldr	r1, [r4, #8]!
   1237c:	cmp	r1, #0
   12380:	beq	12290 <__assert_fail@plt+0x12d4>
   12384:	mov	r0, r5
   12388:	bl	10d40 <strcmp@plt>
   1238c:	cmp	r0, #0
   12390:	bne	12378 <__assert_fail@plt+0x13bc>
   12394:	b	12290 <__assert_fail@plt+0x12d4>
   12398:	mov	r0, r4
   1239c:	bl	10dd0 <dcgettext@plt>
   123a0:	mov	r1, r0
   123a4:	movw	r3, #37944	; 0x9438
   123a8:	movt	r3, #1
   123ac:	movw	r2, #37984	; 0x9460
   123b0:	movt	r2, #1
   123b4:	mov	r0, #1
   123b8:	bl	10f14 <__printf_chk@plt>
   123bc:	mov	r1, r4
   123c0:	mov	r0, #5
   123c4:	bl	10f68 <setlocale@plt>
   123c8:	cmp	r0, #0
   123cc:	beq	123e8 <__assert_fail@plt+0x142c>
   123d0:	movw	r1, #38000	; 0x9470
   123d4:	movt	r1, #1
   123d8:	mov	r2, #3
   123dc:	bl	10f98 <strncmp@plt>
   123e0:	cmp	r0, #0
   123e4:	bne	12444 <__assert_fail@plt+0x1488>
   123e8:	mov	r2, #5
   123ec:	movw	r1, #38076	; 0x94bc
   123f0:	movt	r1, #1
   123f4:	mov	r0, #0
   123f8:	bl	10dd0 <dcgettext@plt>
   123fc:	mov	r1, r0
   12400:	movw	r3, #36300	; 0x8dcc
   12404:	movt	r3, #1
   12408:	movw	r2, #37944	; 0x9438
   1240c:	movt	r2, #1
   12410:	mov	r0, #1
   12414:	bl	10f14 <__printf_chk@plt>
   12418:	movw	r1, #38104	; 0x94d8
   1241c:	movt	r1, #1
   12420:	mov	r2, #5
   12424:	mov	r0, #0
   12428:	bl	10dd0 <dcgettext@plt>
   1242c:	movw	r4, #36300	; 0x8dcc
   12430:	movt	r4, #1
   12434:	movw	r3, #38608	; 0x96d0
   12438:	movt	r3, #1
   1243c:	mov	r1, r0
   12440:	b	12368 <__assert_fail@plt+0x13ac>
   12444:	movw	r5, #36300	; 0x8dcc
   12448:	movt	r5, #1
   1244c:	mov	r4, r5
   12450:	mov	r2, #5
   12454:	movw	r1, #38004	; 0x9474
   12458:	movt	r1, #1
   1245c:	mov	r0, #0
   12460:	bl	10dd0 <dcgettext@plt>
   12464:	ldr	r1, [r7]
   12468:	bl	10d34 <fputs_unlocked@plt>
   1246c:	b	12308 <__assert_fail@plt+0x134c>
   12470:	mov	r0, #1
   12474:	b	12040 <__assert_fail@plt+0x1084>
   12478:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1247c:	mov	r4, r1
   12480:	strd	r6, [sp, #8]
   12484:	mov	r6, r2
   12488:	strd	r8, [sp, #16]
   1248c:	mov	r8, r3
   12490:	strd	sl, [sp, #24]
   12494:	mov	sl, r0
   12498:	str	lr, [sp, #32]
   1249c:	sub	sp, sp, #12
   124a0:	str	r2, [sp]
   124a4:	bl	10ed8 <strlen@plt>
   124a8:	ldr	fp, [r4]
   124ac:	cmp	fp, #0
   124b0:	beq	125c0 <__assert_fail@plt+0x1604>
   124b4:	cmp	r6, #0
   124b8:	mov	r7, r0
   124bc:	beq	1256c <__assert_fail@plt+0x15b0>
   124c0:	mov	r5, #0
   124c4:	mvn	r9, #0
   124c8:	str	r5, [sp, #4]
   124cc:	mov	r2, r7
   124d0:	mov	r1, sl
   124d4:	mov	r0, fp
   124d8:	bl	10f98 <strncmp@plt>
   124dc:	cmp	r0, #0
   124e0:	mov	r0, fp
   124e4:	bne	12524 <__assert_fail@plt+0x1568>
   124e8:	bl	10ed8 <strlen@plt>
   124ec:	ldr	r3, [sp]
   124f0:	cmp	r0, r7
   124f4:	mov	r2, r8
   124f8:	mov	r1, r6
   124fc:	mla	r0, r8, r9, r3
   12500:	beq	12564 <__assert_fail@plt+0x15a8>
   12504:	cmn	r9, #1
   12508:	moveq	r9, r5
   1250c:	beq	12524 <__assert_fail@plt+0x1568>
   12510:	bl	10db8 <memcmp@plt>
   12514:	ldr	r3, [sp, #4]
   12518:	cmp	r0, #0
   1251c:	movne	r3, #1
   12520:	str	r3, [sp, #4]
   12524:	ldr	fp, [r4, #4]!
   12528:	add	r5, r5, #1
   1252c:	add	r6, r6, r8
   12530:	cmp	fp, #0
   12534:	bne	124cc <__assert_fail@plt+0x1510>
   12538:	ldr	r3, [sp, #4]
   1253c:	cmp	r3, #0
   12540:	mvnne	r9, #1
   12544:	mov	r0, r9
   12548:	add	sp, sp, #12
   1254c:	ldrd	r4, [sp]
   12550:	ldrd	r6, [sp, #8]
   12554:	ldrd	r8, [sp, #16]
   12558:	ldrd	sl, [sp, #24]
   1255c:	add	sp, sp, #32
   12560:	pop	{pc}		; (ldr pc, [sp], #4)
   12564:	mov	r9, r5
   12568:	b	12544 <__assert_fail@plt+0x1588>
   1256c:	mov	r5, r6
   12570:	mvn	r9, #0
   12574:	mov	r2, r7
   12578:	mov	r1, sl
   1257c:	mov	r0, fp
   12580:	bl	10f98 <strncmp@plt>
   12584:	cmp	r0, #0
   12588:	mov	r0, fp
   1258c:	bne	125a8 <__assert_fail@plt+0x15ec>
   12590:	bl	10ed8 <strlen@plt>
   12594:	cmp	r0, r7
   12598:	beq	12564 <__assert_fail@plt+0x15a8>
   1259c:	cmn	r9, #1
   125a0:	moveq	r9, r5
   125a4:	movne	r6, #1
   125a8:	ldr	fp, [r4, #4]!
   125ac:	add	r5, r5, #1
   125b0:	cmp	fp, #0
   125b4:	bne	12574 <__assert_fail@plt+0x15b8>
   125b8:	str	r6, [sp, #4]
   125bc:	b	12538 <__assert_fail@plt+0x157c>
   125c0:	mvn	r9, #0
   125c4:	b	12544 <__assert_fail@plt+0x1588>
   125c8:	strd	r4, [sp, #-16]!
   125cc:	str	r6, [sp, #8]
   125d0:	mov	r6, r0
   125d4:	ldr	r0, [r1]
   125d8:	str	lr, [sp, #12]
   125dc:	cmp	r0, #0
   125e0:	beq	12624 <__assert_fail@plt+0x1668>
   125e4:	mov	r4, r1
   125e8:	mov	r5, #0
   125ec:	b	12600 <__assert_fail@plt+0x1644>
   125f0:	ldr	r0, [r4, #4]!
   125f4:	add	r5, r5, #1
   125f8:	cmp	r0, #0
   125fc:	beq	12624 <__assert_fail@plt+0x1668>
   12600:	mov	r1, r6
   12604:	bl	10d40 <strcmp@plt>
   12608:	cmp	r0, #0
   1260c:	bne	125f0 <__assert_fail@plt+0x1634>
   12610:	mov	r0, r5
   12614:	ldrd	r4, [sp]
   12618:	ldr	r6, [sp, #8]
   1261c:	add	sp, sp, #12
   12620:	pop	{pc}		; (ldr pc, [sp], #4)
   12624:	ldrd	r4, [sp]
   12628:	mvn	r0, #0
   1262c:	ldr	r6, [sp, #8]
   12630:	add	sp, sp, #12
   12634:	pop	{pc}		; (ldr pc, [sp], #4)
   12638:	cmn	r2, #1
   1263c:	strd	r4, [sp, #-16]!
   12640:	mov	r5, r1
   12644:	movweq	r1, #38888	; 0x97e8
   12648:	movwne	r1, #38916	; 0x9804
   1264c:	str	r6, [sp, #8]
   12650:	movteq	r1, #1
   12654:	movtne	r1, #1
   12658:	str	lr, [sp, #12]
   1265c:	mov	r6, r0
   12660:	sub	sp, sp, #8
   12664:	mov	r2, #5
   12668:	mov	r0, #0
   1266c:	bl	10dd0 <dcgettext@plt>
   12670:	mov	r4, r0
   12674:	mov	r2, r5
   12678:	mov	r1, #8
   1267c:	mov	r0, #0
   12680:	bl	15818 <__assert_fail@plt+0x485c>
   12684:	mov	r5, r0
   12688:	mov	r1, r6
   1268c:	mov	r0, #1
   12690:	bl	16c10 <__assert_fail@plt+0x5c54>
   12694:	mov	r1, #0
   12698:	mov	r3, r5
   1269c:	str	r0, [sp]
   126a0:	mov	r2, r4
   126a4:	mov	r0, r1
   126a8:	bl	10e48 <error@plt>
   126ac:	add	sp, sp, #8
   126b0:	ldrd	r4, [sp]
   126b4:	ldr	r6, [sp, #8]
   126b8:	add	sp, sp, #12
   126bc:	pop	{pc}		; (ldr pc, [sp], #4)
   126c0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   126c4:	mov	r4, r1
   126c8:	movw	r1, #38948	; 0x9824
   126cc:	movt	r1, #1
   126d0:	strd	r6, [sp, #8]
   126d4:	mov	r6, r0
   126d8:	mov	r7, r2
   126dc:	mov	r0, #0
   126e0:	strd	r8, [sp, #16]
   126e4:	mov	r2, #5
   126e8:	strd	sl, [sp, #24]
   126ec:	movw	sl, #41304	; 0xa158
   126f0:	movt	sl, #2
   126f4:	str	lr, [sp, #32]
   126f8:	sub	sp, sp, #12
   126fc:	bl	10dd0 <dcgettext@plt>
   12700:	ldr	r1, [sl]
   12704:	bl	10d34 <fputs_unlocked@plt>
   12708:	ldr	fp, [r6]
   1270c:	cmp	fp, #0
   12710:	beq	127b0 <__assert_fail@plt+0x17f4>
   12714:	movw	r3, #38972	; 0x983c
   12718:	movt	r3, #1
   1271c:	mov	r9, #0
   12720:	str	r3, [sp]
   12724:	movw	r3, #38980	; 0x9844
   12728:	movt	r3, #1
   1272c:	mov	r5, r9
   12730:	str	r3, [sp, #4]
   12734:	b	1276c <__assert_fail@plt+0x17b0>
   12738:	mov	r0, fp
   1273c:	mov	r9, r4
   12740:	bl	16c20 <__assert_fail@plt+0x5c64>
   12744:	mov	r3, r0
   12748:	mov	r1, #1
   1274c:	ldr	r2, [sp]
   12750:	mov	r0, r8
   12754:	bl	10f2c <__fprintf_chk@plt>
   12758:	ldr	fp, [r6, #4]!
   1275c:	add	r5, r5, #1
   12760:	add	r4, r4, r7
   12764:	cmp	fp, #0
   12768:	beq	127b0 <__assert_fail@plt+0x17f4>
   1276c:	cmp	r5, #0
   12770:	mov	r1, r4
   12774:	ldr	r8, [sl]
   12778:	mov	r2, r7
   1277c:	mov	r0, r9
   12780:	beq	12738 <__assert_fail@plt+0x177c>
   12784:	bl	10db8 <memcmp@plt>
   12788:	cmp	r0, #0
   1278c:	bne	12738 <__assert_fail@plt+0x177c>
   12790:	mov	r0, fp
   12794:	bl	16c20 <__assert_fail@plt+0x5c64>
   12798:	mov	r3, r0
   1279c:	mov	r1, #1
   127a0:	ldr	r2, [sp, #4]
   127a4:	mov	r0, r8
   127a8:	bl	10f2c <__fprintf_chk@plt>
   127ac:	b	12758 <__assert_fail@plt+0x179c>
   127b0:	ldr	r0, [sl]
   127b4:	ldr	r3, [r0, #20]
   127b8:	ldr	r2, [r0, #24]
   127bc:	cmp	r3, r2
   127c0:	bcs	127f0 <__assert_fail@plt+0x1834>
   127c4:	add	r1, r3, #1
   127c8:	mov	r2, #10
   127cc:	str	r1, [r0, #20]
   127d0:	strb	r2, [r3]
   127d4:	add	sp, sp, #12
   127d8:	ldrd	r4, [sp]
   127dc:	ldrd	r6, [sp, #8]
   127e0:	ldrd	r8, [sp, #16]
   127e4:	ldrd	sl, [sp, #24]
   127e8:	add	sp, sp, #32
   127ec:	pop	{pc}		; (ldr pc, [sp], #4)
   127f0:	mov	r1, #10
   127f4:	add	sp, sp, #12
   127f8:	ldrd	r4, [sp]
   127fc:	ldrd	r6, [sp, #8]
   12800:	ldrd	r8, [sp, #16]
   12804:	ldrd	sl, [sp, #24]
   12808:	ldr	lr, [sp, #32]
   1280c:	add	sp, sp, #36	; 0x24
   12810:	b	10f5c <__overflow@plt>
   12814:	strd	r4, [sp, #-28]!	; 0xffffffe4
   12818:	mov	r5, r1
   1281c:	strd	r6, [sp, #8]
   12820:	mov	r6, r2
   12824:	mov	r7, r3
   12828:	strd	r8, [sp, #16]
   1282c:	mov	r8, r0
   12830:	str	lr, [sp, #24]
   12834:	sub	sp, sp, #12
   12838:	ldrb	r4, [sp, #48]	; 0x30
   1283c:	cmp	r4, #0
   12840:	bne	128ec <__assert_fail@plt+0x1930>
   12844:	ldr	r0, [r2]
   12848:	cmp	r0, #0
   1284c:	movne	r9, r2
   12850:	bne	128d4 <__assert_fail@plt+0x1918>
   12854:	movw	r1, #38888	; 0x97e8
   12858:	movt	r1, #1
   1285c:	mov	r2, #5
   12860:	mov	r0, #0
   12864:	bl	10dd0 <dcgettext@plt>
   12868:	mov	r9, r0
   1286c:	mov	r2, r5
   12870:	mov	r1, #8
   12874:	mov	r0, #0
   12878:	bl	15818 <__assert_fail@plt+0x485c>
   1287c:	mov	r4, r0
   12880:	mov	r1, r8
   12884:	mov	r0, #1
   12888:	bl	16c10 <__assert_fail@plt+0x5c54>
   1288c:	mov	r1, #0
   12890:	mov	r3, r4
   12894:	str	r0, [sp]
   12898:	mov	r2, r9
   1289c:	mov	r0, r1
   128a0:	bl	10e48 <error@plt>
   128a4:	mov	r0, r6
   128a8:	mov	r1, r7
   128ac:	ldr	r2, [sp, #40]	; 0x28
   128b0:	bl	126c0 <__assert_fail@plt+0x1704>
   128b4:	ldr	r3, [sp, #44]	; 0x2c
   128b8:	blx	r3
   128bc:	mvn	r0, #0
   128c0:	b	12908 <__assert_fail@plt+0x194c>
   128c4:	ldr	r0, [r9, #4]!
   128c8:	add	r4, r4, #1
   128cc:	cmp	r0, #0
   128d0:	beq	12854 <__assert_fail@plt+0x1898>
   128d4:	mov	r1, r5
   128d8:	bl	10d40 <strcmp@plt>
   128dc:	cmp	r0, #0
   128e0:	bne	128c4 <__assert_fail@plt+0x1908>
   128e4:	mov	r0, r4
   128e8:	b	12908 <__assert_fail@plt+0x194c>
   128ec:	mov	r2, r3
   128f0:	mov	r1, r6
   128f4:	ldr	r3, [sp, #40]	; 0x28
   128f8:	mov	r0, r5
   128fc:	bl	12478 <__assert_fail@plt+0x14bc>
   12900:	cmp	r0, #0
   12904:	blt	12920 <__assert_fail@plt+0x1964>
   12908:	add	sp, sp, #12
   1290c:	ldrd	r4, [sp]
   12910:	ldrd	r6, [sp, #8]
   12914:	ldrd	r8, [sp, #16]
   12918:	add	sp, sp, #24
   1291c:	pop	{pc}		; (ldr pc, [sp], #4)
   12920:	cmn	r0, #1
   12924:	beq	12854 <__assert_fail@plt+0x1898>
   12928:	movw	r1, #38916	; 0x9804
   1292c:	movt	r1, #1
   12930:	mov	r2, #5
   12934:	mov	r0, #0
   12938:	bl	10dd0 <dcgettext@plt>
   1293c:	mov	r9, r0
   12940:	b	1286c <__assert_fail@plt+0x18b0>
   12944:	strd	r4, [sp, #-24]!	; 0xffffffe8
   12948:	strd	r6, [sp, #8]
   1294c:	ldr	r7, [r1]
   12950:	str	r8, [sp, #16]
   12954:	str	lr, [sp, #20]
   12958:	cmp	r7, #0
   1295c:	beq	1299c <__assert_fail@plt+0x19e0>
   12960:	mov	r6, r3
   12964:	mov	r8, r0
   12968:	mov	r4, r2
   1296c:	mov	r5, r1
   12970:	b	12980 <__assert_fail@plt+0x19c4>
   12974:	ldr	r7, [r5, #4]!
   12978:	cmp	r7, #0
   1297c:	beq	1299c <__assert_fail@plt+0x19e0>
   12980:	mov	r1, r4
   12984:	mov	r2, r6
   12988:	mov	r0, r8
   1298c:	add	r4, r4, r6
   12990:	bl	10db8 <memcmp@plt>
   12994:	cmp	r0, #0
   12998:	bne	12974 <__assert_fail@plt+0x19b8>
   1299c:	mov	r0, r7
   129a0:	ldrd	r4, [sp]
   129a4:	ldrd	r6, [sp, #8]
   129a8:	ldr	r8, [sp, #16]
   129ac:	add	sp, sp, #20
   129b0:	pop	{pc}		; (ldr pc, [sp], #4)
   129b4:	movw	r3, #41360	; 0xa190
   129b8:	movt	r3, #2
   129bc:	str	r0, [r3]
   129c0:	bx	lr
   129c4:	movw	r3, #41360	; 0xa190
   129c8:	movt	r3, #2
   129cc:	strb	r0, [r3, #4]
   129d0:	bx	lr
   129d4:	movw	r3, #41316	; 0xa164
   129d8:	movt	r3, #2
   129dc:	strd	r4, [sp, #-16]!
   129e0:	ldr	r0, [r3]
   129e4:	str	r6, [sp, #8]
   129e8:	str	lr, [sp, #12]
   129ec:	sub	sp, sp, #8
   129f0:	bl	18954 <__assert_fail@plt+0x7998>
   129f4:	cmp	r0, #0
   129f8:	beq	12a24 <__assert_fail@plt+0x1a68>
   129fc:	movw	r4, #41360	; 0xa190
   12a00:	movt	r4, #2
   12a04:	ldrb	r6, [r4, #4]
   12a08:	bl	10ef0 <__errno_location@plt>
   12a0c:	mov	r5, r0
   12a10:	cmp	r6, #0
   12a14:	beq	12a50 <__assert_fail@plt+0x1a94>
   12a18:	ldr	r3, [r0]
   12a1c:	cmp	r3, #32
   12a20:	bne	12a50 <__assert_fail@plt+0x1a94>
   12a24:	movw	r3, #41304	; 0xa158
   12a28:	movt	r3, #2
   12a2c:	ldr	r0, [r3]
   12a30:	bl	18954 <__assert_fail@plt+0x7998>
   12a34:	cmp	r0, #0
   12a38:	bne	12a98 <__assert_fail@plt+0x1adc>
   12a3c:	add	sp, sp, #8
   12a40:	ldrd	r4, [sp]
   12a44:	ldr	r6, [sp, #8]
   12a48:	add	sp, sp, #12
   12a4c:	pop	{pc}		; (ldr pc, [sp], #4)
   12a50:	movw	r1, #38988	; 0x984c
   12a54:	movt	r1, #1
   12a58:	mov	r2, #5
   12a5c:	mov	r0, #0
   12a60:	bl	10dd0 <dcgettext@plt>
   12a64:	mov	r6, r0
   12a68:	ldr	r0, [r4]
   12a6c:	cmp	r0, #0
   12a70:	beq	12aa8 <__assert_fail@plt+0x1aec>
   12a74:	ldr	r4, [r5]
   12a78:	bl	160a4 <__assert_fail@plt+0x50e8>
   12a7c:	mov	r3, r0
   12a80:	movw	r2, #36284	; 0x8dbc
   12a84:	movt	r2, #1
   12a88:	mov	r0, #0
   12a8c:	str	r6, [sp]
   12a90:	mov	r1, r4
   12a94:	bl	10e48 <error@plt>
   12a98:	movw	r3, #41216	; 0xa100
   12a9c:	movt	r3, #2
   12aa0:	ldr	r0, [r3]
   12aa4:	bl	10d7c <_exit@plt>
   12aa8:	mov	r3, r6
   12aac:	movw	r2, #36288	; 0x8dc0
   12ab0:	movt	r2, #1
   12ab4:	ldr	r1, [r5]
   12ab8:	bl	10e48 <error@plt>
   12abc:	b	12a98 <__assert_fail@plt+0x1adc>
   12ac0:	b	10d58 <posix_fadvise64@plt>
   12ac4:	cmp	r0, #0
   12ac8:	bxeq	lr
   12acc:	str	r4, [sp, #-16]!
   12ad0:	mov	r4, r1
   12ad4:	strd	r6, [sp, #4]
   12ad8:	mov	r6, #0
   12adc:	mov	r7, #0
   12ae0:	str	lr, [sp, #12]
   12ae4:	sub	sp, sp, #16
   12ae8:	bl	10f20 <fileno@plt>
   12aec:	mov	r2, r6
   12af0:	mov	r3, r7
   12af4:	strd	r6, [sp]
   12af8:	str	r4, [sp, #8]
   12afc:	bl	10d58 <posix_fadvise64@plt>
   12b00:	add	sp, sp, #16
   12b04:	ldr	r4, [sp]
   12b08:	ldrd	r6, [sp, #4]
   12b0c:	add	sp, sp, #12
   12b10:	pop	{pc}		; (ldr pc, [sp], #4)
   12b14:	strd	r4, [sp, #-12]!
   12b18:	mov	r4, r0
   12b1c:	str	lr, [sp, #8]
   12b20:	sub	sp, sp, #12
   12b24:	bl	10f20 <fileno@plt>
   12b28:	cmp	r0, #0
   12b2c:	mov	r0, r4
   12b30:	blt	12bb4 <__assert_fail@plt+0x1bf8>
   12b34:	bl	10e84 <__freading@plt>
   12b38:	cmp	r0, #0
   12b3c:	bne	12b80 <__assert_fail@plt+0x1bc4>
   12b40:	mov	r0, r4
   12b44:	bl	12bc8 <__assert_fail@plt+0x1c0c>
   12b48:	cmp	r0, #0
   12b4c:	beq	12bb0 <__assert_fail@plt+0x1bf4>
   12b50:	bl	10ef0 <__errno_location@plt>
   12b54:	mov	r5, r0
   12b58:	mov	r0, r4
   12b5c:	ldr	r4, [r5]
   12b60:	bl	10f38 <fclose@plt>
   12b64:	cmp	r4, #0
   12b68:	mvnne	r0, #0
   12b6c:	strne	r4, [r5]
   12b70:	add	sp, sp, #12
   12b74:	ldrd	r4, [sp]
   12b78:	add	sp, sp, #8
   12b7c:	pop	{pc}		; (ldr pc, [sp], #4)
   12b80:	mov	r0, r4
   12b84:	bl	10f20 <fileno@plt>
   12b88:	mov	r1, #1
   12b8c:	mov	r2, #0
   12b90:	mov	r3, #0
   12b94:	str	r1, [sp]
   12b98:	bl	10e18 <lseek64@plt>
   12b9c:	mvn	r3, #0
   12ba0:	mvn	r2, #0
   12ba4:	cmp	r1, r3
   12ba8:	cmpeq	r0, r2
   12bac:	bne	12b40 <__assert_fail@plt+0x1b84>
   12bb0:	mov	r0, r4
   12bb4:	add	sp, sp, #12
   12bb8:	ldrd	r4, [sp]
   12bbc:	ldr	lr, [sp, #8]
   12bc0:	add	sp, sp, #12
   12bc4:	b	10f38 <fclose@plt>
   12bc8:	str	r4, [sp, #-8]!
   12bcc:	subs	r4, r0, #0
   12bd0:	str	lr, [sp, #4]
   12bd4:	sub	sp, sp, #8
   12bd8:	beq	12bf4 <__assert_fail@plt+0x1c38>
   12bdc:	bl	10e84 <__freading@plt>
   12be0:	cmp	r0, #0
   12be4:	beq	12bf4 <__assert_fail@plt+0x1c38>
   12be8:	ldr	r3, [r4]
   12bec:	tst	r3, #256	; 0x100
   12bf0:	bne	12c0c <__assert_fail@plt+0x1c50>
   12bf4:	mov	r0, r4
   12bf8:	add	sp, sp, #8
   12bfc:	ldr	r4, [sp]
   12c00:	ldr	lr, [sp, #4]
   12c04:	add	sp, sp, #8
   12c08:	b	10d64 <fflush@plt>
   12c0c:	mov	r1, #1
   12c10:	mov	r2, #0
   12c14:	mov	r3, #0
   12c18:	mov	r0, r4
   12c1c:	str	r1, [sp]
   12c20:	bl	12e98 <__assert_fail@plt+0x1edc>
   12c24:	b	12bf4 <__assert_fail@plt+0x1c38>
   12c28:	strd	r4, [sp, #-12]!
   12c2c:	mov	r5, r0
   12c30:	str	lr, [sp, #8]
   12c34:	sub	sp, sp, #12
   12c38:	bl	10ef0 <__errno_location@plt>
   12c3c:	mov	r4, r0
   12c40:	mov	r2, #0
   12c44:	ldr	r3, [r4]
   12c48:	mov	r0, r5
   12c4c:	str	r2, [r4]
   12c50:	str	r3, [sp]
   12c54:	str	r3, [sp, #4]
   12c58:	bl	10d70 <free@plt>
   12c5c:	ldr	r3, [r4]
   12c60:	add	r2, sp, #8
   12c64:	clz	r3, r3
   12c68:	lsr	r3, r3, #5
   12c6c:	add	r3, r2, r3, lsl #2
   12c70:	ldr	r3, [r3, #-8]
   12c74:	str	r3, [r4]
   12c78:	add	sp, sp, #12
   12c7c:	ldrd	r4, [sp]
   12c80:	add	sp, sp, #8
   12c84:	pop	{pc}		; (ldr pc, [sp], #4)
   12c88:	strd	r4, [sp, #-32]!	; 0xffffffe0
   12c8c:	mov	r5, r2
   12c90:	strd	r6, [sp, #8]
   12c94:	strd	r8, [sp, #16]
   12c98:	mov	r9, r0
   12c9c:	mov	r0, r2
   12ca0:	str	sl, [sp, #24]
   12ca4:	mov	sl, r1
   12ca8:	str	lr, [sp, #28]
   12cac:	bl	10f20 <fileno@plt>
   12cb0:	mov	r4, r0
   12cb4:	bl	10ef0 <__errno_location@plt>
   12cb8:	cmp	r4, #1
   12cbc:	mov	r8, r0
   12cc0:	beq	12e48 <__assert_fail@plt+0x1e8c>
   12cc4:	cmp	r4, #2
   12cc8:	beq	12e00 <__assert_fail@plt+0x1e44>
   12ccc:	cmp	r4, #0
   12cd0:	beq	12da4 <__assert_fail@plt+0x1de8>
   12cd4:	mov	r1, #2
   12cd8:	mov	r0, r1
   12cdc:	bl	10ddc <dup2@plt>
   12ce0:	subs	r4, r0, #2
   12ce4:	movne	r4, #1
   12ce8:	mov	r1, #1
   12cec:	mov	r0, r1
   12cf0:	bl	10ddc <dup2@plt>
   12cf4:	subs	r7, r0, #1
   12cf8:	movne	r7, #1
   12cfc:	mov	r1, #0
   12d00:	mov	r0, r1
   12d04:	bl	10ddc <dup2@plt>
   12d08:	subs	r6, r0, #0
   12d0c:	beq	12d40 <__assert_fail@plt+0x1d84>
   12d10:	movw	r0, #39000	; 0x9858
   12d14:	movt	r0, #1
   12d18:	mov	r1, #0
   12d1c:	bl	10e54 <open64@plt>
   12d20:	cmp	r0, #0
   12d24:	beq	12d3c <__assert_fail@plt+0x1d80>
   12d28:	bge	12e68 <__assert_fail@plt+0x1eac>
   12d2c:	mov	r6, #1
   12d30:	mov	r5, #0
   12d34:	ldr	r9, [r8]
   12d38:	b	12dc4 <__assert_fail@plt+0x1e08>
   12d3c:	mov	r6, #1
   12d40:	cmp	r7, #0
   12d44:	bne	12e08 <__assert_fail@plt+0x1e4c>
   12d48:	cmp	r4, #0
   12d4c:	beq	12dac <__assert_fail@plt+0x1df0>
   12d50:	movw	r0, #39000	; 0x9858
   12d54:	movt	r0, #1
   12d58:	mov	r1, #0
   12d5c:	bl	10e54 <open64@plt>
   12d60:	cmp	r0, #2
   12d64:	beq	12dac <__assert_fail@plt+0x1df0>
   12d68:	cmp	r0, #0
   12d6c:	bge	12e54 <__assert_fail@plt+0x1e98>
   12d70:	ldr	r9, [r8]
   12d74:	mov	r5, #0
   12d78:	mov	r0, #2
   12d7c:	bl	10fb0 <close@plt>
   12d80:	cmp	r7, #0
   12d84:	beq	12dd4 <__assert_fail@plt+0x1e18>
   12d88:	mov	r0, #1
   12d8c:	bl	10fb0 <close@plt>
   12d90:	cmp	r6, #0
   12d94:	beq	12ddc <__assert_fail@plt+0x1e20>
   12d98:	mov	r0, #0
   12d9c:	bl	10fb0 <close@plt>
   12da0:	b	12ddc <__assert_fail@plt+0x1e20>
   12da4:	mov	r7, r4
   12da8:	mov	r6, r4
   12dac:	mov	r2, r5
   12db0:	mov	r0, r9
   12db4:	mov	r1, sl
   12db8:	bl	10ea8 <freopen64@plt>
   12dbc:	ldr	r9, [r8]
   12dc0:	mov	r5, r0
   12dc4:	cmp	r4, #0
   12dc8:	bne	12d78 <__assert_fail@plt+0x1dbc>
   12dcc:	cmp	r7, #0
   12dd0:	bne	12d88 <__assert_fail@plt+0x1dcc>
   12dd4:	cmp	r6, #0
   12dd8:	bne	12d98 <__assert_fail@plt+0x1ddc>
   12ddc:	cmp	r5, #0
   12de0:	mov	r0, r5
   12de4:	ldrd	r4, [sp]
   12de8:	streq	r9, [r8]
   12dec:	ldrd	r6, [sp, #8]
   12df0:	ldrd	r8, [sp, #16]
   12df4:	ldr	sl, [sp, #24]
   12df8:	add	sp, sp, #28
   12dfc:	pop	{pc}		; (ldr pc, [sp], #4)
   12e00:	mov	r4, #0
   12e04:	b	12ce8 <__assert_fail@plt+0x1d2c>
   12e08:	movw	r0, #39000	; 0x9858
   12e0c:	movt	r0, #1
   12e10:	mov	r1, #0
   12e14:	bl	10e54 <open64@plt>
   12e18:	cmp	r0, #1
   12e1c:	beq	12d48 <__assert_fail@plt+0x1d8c>
   12e20:	cmp	r0, #0
   12e24:	bge	12e84 <__assert_fail@plt+0x1ec8>
   12e28:	ldr	r9, [r8]
   12e2c:	cmp	r4, #0
   12e30:	moveq	r5, r4
   12e34:	beq	12d88 <__assert_fail@plt+0x1dcc>
   12e38:	mov	r0, #2
   12e3c:	mov	r5, #0
   12e40:	bl	10fb0 <close@plt>
   12e44:	b	12d88 <__assert_fail@plt+0x1dcc>
   12e48:	mov	r4, #0
   12e4c:	mov	r7, r4
   12e50:	b	12cfc <__assert_fail@plt+0x1d40>
   12e54:	bl	10fb0 <close@plt>
   12e58:	mov	r3, #9
   12e5c:	mov	r9, r3
   12e60:	str	r3, [r8]
   12e64:	b	12d74 <__assert_fail@plt+0x1db8>
   12e68:	bl	10fb0 <close@plt>
   12e6c:	mov	r3, #9
   12e70:	mov	r6, #1
   12e74:	mov	r9, r3
   12e78:	mov	r5, #0
   12e7c:	str	r3, [r8]
   12e80:	b	12dc4 <__assert_fail@plt+0x1e08>
   12e84:	bl	10fb0 <close@plt>
   12e88:	mov	r3, #9
   12e8c:	mov	r9, r3
   12e90:	str	r3, [r8]
   12e94:	b	12e2c <__assert_fail@plt+0x1e70>
   12e98:	strd	r4, [sp, #-24]!	; 0xffffffe8
   12e9c:	mov	r4, r0
   12ea0:	ldr	ip, [r0, #4]
   12ea4:	strd	r6, [sp, #8]
   12ea8:	str	lr, [sp, #20]
   12eac:	ldr	lr, [r0, #8]
   12eb0:	str	r8, [sp, #16]
   12eb4:	sub	sp, sp, #8
   12eb8:	ldr	r5, [sp, #32]
   12ebc:	cmp	lr, ip
   12ec0:	beq	12ee8 <__assert_fail@plt+0x1f2c>
   12ec4:	mov	r0, r4
   12ec8:	str	r5, [sp, #32]
   12ecc:	add	sp, sp, #8
   12ed0:	ldrd	r4, [sp]
   12ed4:	ldrd	r6, [sp, #8]
   12ed8:	ldr	r8, [sp, #16]
   12edc:	ldr	lr, [sp, #20]
   12ee0:	add	sp, sp, #24
   12ee4:	b	10f44 <fseeko64@plt>
   12ee8:	ldr	ip, [r0, #16]
   12eec:	ldr	lr, [r0, #20]
   12ef0:	cmp	lr, ip
   12ef4:	bne	12ec4 <__assert_fail@plt+0x1f08>
   12ef8:	ldr	r8, [r0, #36]	; 0x24
   12efc:	cmp	r8, #0
   12f00:	bne	12ec4 <__assert_fail@plt+0x1f08>
   12f04:	mov	r6, r2
   12f08:	mov	r7, r3
   12f0c:	bl	10f20 <fileno@plt>
   12f10:	mov	r2, r6
   12f14:	mov	r3, r7
   12f18:	str	r5, [sp]
   12f1c:	bl	10e18 <lseek64@plt>
   12f20:	mvn	r3, #0
   12f24:	mvn	r2, #0
   12f28:	cmp	r1, r3
   12f2c:	cmpeq	r0, r2
   12f30:	beq	12f60 <__assert_fail@plt+0x1fa4>
   12f34:	ldr	r3, [r4]
   12f38:	strd	r0, [r4, #80]	; 0x50
   12f3c:	bic	r3, r3, #16
   12f40:	str	r3, [r4]
   12f44:	mov	r0, r8
   12f48:	add	sp, sp, #8
   12f4c:	ldrd	r4, [sp]
   12f50:	ldrd	r6, [sp, #8]
   12f54:	ldr	r8, [sp, #16]
   12f58:	add	sp, sp, #20
   12f5c:	pop	{pc}		; (ldr pc, [sp], #4)
   12f60:	mvn	r8, #0
   12f64:	b	12f44 <__assert_fail@plt+0x1f88>
   12f68:	mov	r3, #0
   12f6c:	str	r3, [r0]
   12f70:	str	r3, [r0, #4]
   12f74:	str	r3, [r0, #8]
   12f78:	bx	lr
   12f7c:	ldr	r3, [r1]
   12f80:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12f84:	strd	r6, [sp, #8]
   12f88:	strd	sl, [sp, #24]
   12f8c:	ldr	fp, [r0]
   12f90:	tst	r3, #16
   12f94:	strd	r8, [sp, #16]
   12f98:	ldr	sl, [r0, #8]
   12f9c:	str	lr, [sp, #32]
   12fa0:	sub	sp, sp, #12
   12fa4:	add	fp, sl, fp
   12fa8:	bne	1309c <__assert_fail@plt+0x20e0>
   12fac:	mov	r5, r0
   12fb0:	mov	r6, r1
   12fb4:	mov	r4, sl
   12fb8:	mov	r9, #1
   12fbc:	b	12fe4 <__assert_fail@plt+0x2028>
   12fc0:	add	r2, r3, #1
   12fc4:	str	r2, [r6, #4]
   12fc8:	ldrb	r7, [r3]
   12fcc:	mov	r8, r7
   12fd0:	cmp	r4, fp
   12fd4:	beq	13038 <__assert_fail@plt+0x207c>
   12fd8:	cmp	r8, #10
   12fdc:	strb	r7, [r4], #1
   12fe0:	beq	13074 <__assert_fail@plt+0x20b8>
   12fe4:	ldr	r3, [r6, #4]
   12fe8:	ldr	r2, [r6, #8]
   12fec:	cmp	r3, r2
   12ff0:	bcc	12fc0 <__assert_fail@plt+0x2004>
   12ff4:	mov	r0, r6
   12ff8:	bl	10f50 <__uflow@plt>
   12ffc:	cmn	r0, #1
   13000:	mov	r8, r0
   13004:	bne	130a4 <__assert_fail@plt+0x20e8>
   13008:	cmp	sl, r4
   1300c:	beq	1309c <__assert_fail@plt+0x20e0>
   13010:	ldr	r3, [r6]
   13014:	tst	r3, #32
   13018:	bne	1309c <__assert_fail@plt+0x20e0>
   1301c:	ldrb	r3, [r4, #-1]
   13020:	cmp	r3, #10
   13024:	beq	13074 <__assert_fail@plt+0x20b8>
   13028:	cmp	r4, fp
   1302c:	bne	1306c <__assert_fail@plt+0x20b0>
   13030:	mov	r7, #10
   13034:	mov	r8, r7
   13038:	mov	r0, sl
   1303c:	mvn	r3, #0
   13040:	str	r9, [sp]
   13044:	mov	r2, #1
   13048:	mov	r1, r5
   1304c:	ldr	r4, [r5]
   13050:	bl	177e0 <__assert_fail@plt+0x6824>
   13054:	ldr	fp, [r5]
   13058:	mov	sl, r0
   1305c:	str	r0, [r5, #8]
   13060:	add	r4, r0, r4
   13064:	add	fp, r0, fp
   13068:	b	12fd8 <__assert_fail@plt+0x201c>
   1306c:	mov	r3, #10
   13070:	strb	r3, [r4], #1
   13074:	sub	r4, r4, sl
   13078:	mov	r0, r5
   1307c:	str	r4, [r5, #4]
   13080:	add	sp, sp, #12
   13084:	ldrd	r4, [sp]
   13088:	ldrd	r6, [sp, #8]
   1308c:	ldrd	r8, [sp, #16]
   13090:	ldrd	sl, [sp, #24]
   13094:	add	sp, sp, #32
   13098:	pop	{pc}		; (ldr pc, [sp], #4)
   1309c:	mov	r0, #0
   130a0:	b	13080 <__assert_fail@plt+0x20c4>
   130a4:	uxtb	r7, r0
   130a8:	b	12fd0 <__assert_fail@plt+0x2014>
   130ac:	ldr	ip, [r1]
   130b0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   130b4:	ldr	r3, [r0]
   130b8:	strd	r6, [sp, #8]
   130bc:	strd	sl, [sp, #24]
   130c0:	ldr	fp, [r0, #8]
   130c4:	tst	ip, #16
   130c8:	strd	r8, [sp, #16]
   130cc:	str	lr, [sp, #32]
   130d0:	sub	sp, sp, #12
   130d4:	add	r9, fp, r3
   130d8:	bne	131c8 <__assert_fail@plt+0x220c>
   130dc:	mov	r8, r2
   130e0:	mov	r7, r0
   130e4:	mov	r5, r1
   130e8:	mov	r4, fp
   130ec:	b	13114 <__assert_fail@plt+0x2158>
   130f0:	add	r1, r3, #1
   130f4:	str	r1, [r5, #4]
   130f8:	ldrb	r6, [r3]
   130fc:	mov	sl, r6
   13100:	cmp	r4, r9
   13104:	beq	13168 <__assert_fail@plt+0x21ac>
   13108:	cmp	r8, sl
   1310c:	strb	r6, [r4], #1
   13110:	beq	131a0 <__assert_fail@plt+0x21e4>
   13114:	ldr	r3, [r5, #4]
   13118:	ldr	r1, [r5, #8]
   1311c:	cmp	r3, r1
   13120:	bcc	130f0 <__assert_fail@plt+0x2134>
   13124:	mov	r0, r5
   13128:	bl	10f50 <__uflow@plt>
   1312c:	cmn	r0, #1
   13130:	mov	sl, r0
   13134:	bne	131d0 <__assert_fail@plt+0x2214>
   13138:	cmp	fp, r4
   1313c:	beq	131c8 <__assert_fail@plt+0x220c>
   13140:	ldr	r3, [r5]
   13144:	tst	r3, #32
   13148:	bne	131c8 <__assert_fail@plt+0x220c>
   1314c:	ldrb	r3, [r4, #-1]
   13150:	cmp	r3, r8
   13154:	beq	131a0 <__assert_fail@plt+0x21e4>
   13158:	cmp	r4, r9
   1315c:	mov	sl, r8
   13160:	bne	1319c <__assert_fail@plt+0x21e0>
   13164:	mov	r6, r8
   13168:	mov	r2, #1
   1316c:	mov	r0, fp
   13170:	mvn	r3, #0
   13174:	mov	r1, r7
   13178:	str	r2, [sp]
   1317c:	ldr	r4, [r7]
   13180:	bl	177e0 <__assert_fail@plt+0x6824>
   13184:	ldr	r2, [r7]
   13188:	mov	fp, r0
   1318c:	str	r0, [r7, #8]
   13190:	add	r4, r0, r4
   13194:	add	r9, r0, r2
   13198:	b	13108 <__assert_fail@plt+0x214c>
   1319c:	strb	r8, [r4], #1
   131a0:	sub	r4, r4, fp
   131a4:	mov	r0, r7
   131a8:	str	r4, [r7, #4]
   131ac:	add	sp, sp, #12
   131b0:	ldrd	r4, [sp]
   131b4:	ldrd	r6, [sp, #8]
   131b8:	ldrd	r8, [sp, #16]
   131bc:	ldrd	sl, [sp, #24]
   131c0:	add	sp, sp, #32
   131c4:	pop	{pc}		; (ldr pc, [sp], #4)
   131c8:	mov	r0, #0
   131cc:	b	131ac <__assert_fail@plt+0x21f0>
   131d0:	uxtb	r6, r0
   131d4:	b	13100 <__assert_fail@plt+0x2144>
   131d8:	ldr	r0, [r0, #8]
   131dc:	b	12c28 <__assert_fail@plt+0x1c6c>
   131e0:	strd	r4, [sp, #-16]!
   131e4:	str	r6, [sp, #8]
   131e8:	subs	r6, r2, #0
   131ec:	str	lr, [sp, #12]
   131f0:	beq	13244 <__assert_fail@plt+0x2288>
   131f4:	mov	r4, r0
   131f8:	mov	r5, r1
   131fc:	bl	10e90 <__ctype_toupper_loc@plt>
   13200:	sub	r3, r4, #1
   13204:	sub	r1, r5, #1
   13208:	ldr	ip, [r0]
   1320c:	add	r4, r3, r6
   13210:	b	1321c <__assert_fail@plt+0x2260>
   13214:	cmp	r4, r3
   13218:	beq	13234 <__assert_fail@plt+0x2278>
   1321c:	ldrb	lr, [r3, #1]!
   13220:	ldrb	r2, [r1, #1]!
   13224:	ldr	r0, [ip, lr, lsl #2]
   13228:	ldr	r2, [ip, r2, lsl #2]
   1322c:	subs	r0, r0, r2
   13230:	beq	13214 <__assert_fail@plt+0x2258>
   13234:	ldrd	r4, [sp]
   13238:	ldr	r6, [sp, #8]
   1323c:	add	sp, sp, #12
   13240:	pop	{pc}		; (ldr pc, [sp], #4)
   13244:	mov	r0, r6
   13248:	b	13234 <__assert_fail@plt+0x2278>
   1324c:	movw	r0, #39012	; 0x9864
   13250:	movt	r0, #1
   13254:	push	{lr}		; (str lr, [sp, #-4]!)
   13258:	sub	sp, sp, #12
   1325c:	bl	10e60 <getenv@plt>
   13260:	subs	r3, r0, #0
   13264:	beq	13274 <__assert_fail@plt+0x22b8>
   13268:	ldrb	r3, [r3]
   1326c:	cmp	r3, #0
   13270:	bne	13284 <__assert_fail@plt+0x22c8>
   13274:	movw	r0, #4201	; 0x1069
   13278:	movt	r0, #3
   1327c:	add	sp, sp, #12
   13280:	pop	{pc}		; (ldr pc, [sp], #4)
   13284:	mov	r2, #10
   13288:	add	r1, sp, #4
   1328c:	bl	10d4c <strtol@plt>
   13290:	ldr	r2, [sp, #4]
   13294:	movw	r3, #4201	; 0x1069
   13298:	movt	r3, #3
   1329c:	ldrb	r2, [r2]
   132a0:	cmp	r2, #0
   132a4:	movne	r0, r3
   132a8:	add	sp, sp, #12
   132ac:	pop	{pc}		; (ldr pc, [sp], #4)
   132b0:	strd	r4, [sp, #-16]!
   132b4:	subs	r4, r0, #0
   132b8:	str	r6, [sp, #8]
   132bc:	str	lr, [sp, #12]
   132c0:	beq	13358 <__assert_fail@plt+0x239c>
   132c4:	mov	r1, #47	; 0x2f
   132c8:	bl	10f74 <strrchr@plt>
   132cc:	subs	r5, r0, #0
   132d0:	beq	13330 <__assert_fail@plt+0x2374>
   132d4:	add	r6, r5, #1
   132d8:	sub	r3, r6, r4
   132dc:	cmp	r3, #6
   132e0:	ble	13330 <__assert_fail@plt+0x2374>
   132e4:	movw	r1, #39084	; 0x98ac
   132e8:	movt	r1, #1
   132ec:	mov	r2, #7
   132f0:	sub	r0, r5, #6
   132f4:	bl	10f98 <strncmp@plt>
   132f8:	cmp	r0, #0
   132fc:	bne	13330 <__assert_fail@plt+0x2374>
   13300:	movw	r1, #39092	; 0x98b4
   13304:	movt	r1, #1
   13308:	mov	r2, #3
   1330c:	mov	r0, r6
   13310:	bl	10f98 <strncmp@plt>
   13314:	cmp	r0, #0
   13318:	movne	r4, r6
   1331c:	bne	13330 <__assert_fail@plt+0x2374>
   13320:	add	r4, r5, #4
   13324:	movw	r3, #41288	; 0xa148
   13328:	movt	r3, #2
   1332c:	str	r4, [r3]
   13330:	movw	r2, #41368	; 0xa198
   13334:	movt	r2, #2
   13338:	ldr	r6, [sp, #8]
   1333c:	movw	r3, #41292	; 0xa14c
   13340:	movt	r3, #2
   13344:	str	r4, [r2]
   13348:	str	r4, [r3]
   1334c:	ldrd	r4, [sp]
   13350:	add	sp, sp, #12
   13354:	pop	{pc}		; (ldr pc, [sp], #4)
   13358:	movw	r3, #41304	; 0xa158
   1335c:	movt	r3, #2
   13360:	movw	r0, #39028	; 0x9874
   13364:	movt	r0, #1
   13368:	ldr	r3, [r3]
   1336c:	mov	r2, #55	; 0x37
   13370:	mov	r1, #1
   13374:	bl	10e0c <fwrite@plt>
   13378:	bl	10fa4 <abort@plt>
   1337c:	mov	r2, #5
   13380:	strd	r4, [sp, #-16]!
   13384:	mov	r5, r0
   13388:	str	r6, [sp, #8]
   1338c:	mov	r6, r1
   13390:	mov	r1, r0
   13394:	mov	r0, #0
   13398:	str	lr, [sp, #12]
   1339c:	bl	10dd0 <dcgettext@plt>
   133a0:	cmp	r5, r0
   133a4:	mov	r4, r0
   133a8:	beq	133c0 <__assert_fail@plt+0x2404>
   133ac:	mov	r0, r4
   133b0:	ldrd	r4, [sp]
   133b4:	ldr	r6, [sp, #8]
   133b8:	add	sp, sp, #12
   133bc:	pop	{pc}		; (ldr pc, [sp], #4)
   133c0:	bl	189dc <__assert_fail@plt+0x7a20>
   133c4:	ldrb	r3, [r0]
   133c8:	bic	r3, r3, #32
   133cc:	cmp	r3, #85	; 0x55
   133d0:	bne	13438 <__assert_fail@plt+0x247c>
   133d4:	ldrb	r3, [r0, #1]
   133d8:	bic	r3, r3, #32
   133dc:	cmp	r3, #84	; 0x54
   133e0:	bne	134b8 <__assert_fail@plt+0x24fc>
   133e4:	ldrb	r3, [r0, #2]
   133e8:	bic	r3, r3, #32
   133ec:	cmp	r3, #70	; 0x46
   133f0:	bne	134b8 <__assert_fail@plt+0x24fc>
   133f4:	ldrb	r3, [r0, #3]
   133f8:	cmp	r3, #45	; 0x2d
   133fc:	bne	134b8 <__assert_fail@plt+0x24fc>
   13400:	ldrb	r3, [r0, #4]
   13404:	cmp	r3, #56	; 0x38
   13408:	bne	134b8 <__assert_fail@plt+0x24fc>
   1340c:	ldrb	r3, [r0, #5]
   13410:	cmp	r3, #0
   13414:	bne	134b8 <__assert_fail@plt+0x24fc>
   13418:	ldrb	r2, [r4]
   1341c:	movw	r3, #39184	; 0x9910
   13420:	movt	r3, #1
   13424:	movw	r4, #39196	; 0x991c
   13428:	movt	r4, #1
   1342c:	cmp	r2, #96	; 0x60
   13430:	movne	r4, r3
   13434:	b	133ac <__assert_fail@plt+0x23f0>
   13438:	cmp	r3, #71	; 0x47
   1343c:	bne	134b8 <__assert_fail@plt+0x24fc>
   13440:	ldrb	r3, [r0, #1]
   13444:	bic	r3, r3, #32
   13448:	cmp	r3, #66	; 0x42
   1344c:	bne	134b8 <__assert_fail@plt+0x24fc>
   13450:	ldrb	r3, [r0, #2]
   13454:	cmp	r3, #49	; 0x31
   13458:	bne	134b8 <__assert_fail@plt+0x24fc>
   1345c:	ldrb	r3, [r0, #3]
   13460:	cmp	r3, #56	; 0x38
   13464:	bne	134b8 <__assert_fail@plt+0x24fc>
   13468:	ldrb	r3, [r0, #4]
   1346c:	cmp	r3, #48	; 0x30
   13470:	bne	134b8 <__assert_fail@plt+0x24fc>
   13474:	ldrb	r3, [r0, #5]
   13478:	cmp	r3, #51	; 0x33
   1347c:	bne	134b8 <__assert_fail@plt+0x24fc>
   13480:	ldrb	r3, [r0, #6]
   13484:	cmp	r3, #48	; 0x30
   13488:	bne	134b8 <__assert_fail@plt+0x24fc>
   1348c:	ldrb	r3, [r0, #7]
   13490:	cmp	r3, #0
   13494:	bne	134b8 <__assert_fail@plt+0x24fc>
   13498:	ldrb	r2, [r4]
   1349c:	movw	r3, #39188	; 0x9914
   134a0:	movt	r3, #1
   134a4:	movw	r4, #39192	; 0x9918
   134a8:	movt	r4, #1
   134ac:	cmp	r2, #96	; 0x60
   134b0:	movne	r4, r3
   134b4:	b	133ac <__assert_fail@plt+0x23f0>
   134b8:	movw	r3, #39200	; 0x9920
   134bc:	movt	r3, #1
   134c0:	cmp	r6, #9
   134c4:	movw	r4, #39180	; 0x990c
   134c8:	movt	r4, #1
   134cc:	movne	r4, r3
   134d0:	b	133ac <__assert_fail@plt+0x23f0>
   134d4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   134d8:	strd	r6, [sp, #8]
   134dc:	strd	r8, [sp, #16]
   134e0:	mov	r8, r3
   134e4:	strd	sl, [sp, #24]
   134e8:	mov	fp, r0
   134ec:	mov	sl, r1
   134f0:	str	lr, [sp, #32]
   134f4:	sub	sp, sp, #140	; 0x8c
   134f8:	ldr	r3, [sp, #180]	; 0xb4
   134fc:	str	r2, [sp, #28]
   13500:	and	r4, r3, #2
   13504:	ubfx	r3, r3, #1, #1
   13508:	str	r3, [sp, #44]	; 0x2c
   1350c:	bl	10e24 <__ctype_get_mb_cur_max@plt>
   13510:	ldr	r3, [sp, #176]	; 0xb0
   13514:	str	r0, [sp, #76]	; 0x4c
   13518:	cmp	r3, #10
   1351c:	ldrls	pc, [pc, r3, lsl #2]
   13520:	b	14ebc <__assert_fail@plt+0x3f00>
   13524:	andeq	r3, r1, r4, lsr #19
   13528:	andeq	r3, r1, r0, asr #21
   1352c:	andeq	r4, r1, ip, lsr r0
   13530:	andeq	r3, r1, ip, lsr #22
   13534:	andeq	r3, r1, ip, lsr #17
   13538:	andeq	r3, r1, r8, lsr #18
   1353c:	andeq	r3, r1, r0, lsl #20
   13540:	andeq	r3, r1, r8, ror #20
   13544:	andeq	r3, r1, r0, asr r5
   13548:	andeq	r3, r1, r0, asr r5
   1354c:	andeq	r3, r1, r0, asr r5
   13550:	ldr	r3, [sp, #176]	; 0xb0
   13554:	cmp	r3, #10
   13558:	beq	13584 <__assert_fail@plt+0x25c8>
   1355c:	mov	r1, r3
   13560:	movw	r0, #39204	; 0x9924
   13564:	movt	r0, #1
   13568:	bl	1337c <__assert_fail@plt+0x23c0>
   1356c:	str	r0, [sp, #188]	; 0xbc
   13570:	movw	r0, #39200	; 0x9920
   13574:	movt	r0, #1
   13578:	ldr	r1, [sp, #176]	; 0xb0
   1357c:	bl	1337c <__assert_fail@plt+0x23c0>
   13580:	str	r0, [sp, #192]	; 0xc0
   13584:	cmp	r4, #0
   13588:	movne	r4, #0
   1358c:	beq	14c48 <__assert_fail@plt+0x3c8c>
   13590:	mov	r5, #0
   13594:	ldr	r0, [sp, #192]	; 0xc0
   13598:	mov	r9, r5
   1359c:	str	r5, [sp, #64]	; 0x40
   135a0:	bl	10ed8 <strlen@plt>
   135a4:	mov	r3, #1
   135a8:	ldr	r2, [sp, #44]	; 0x2c
   135ac:	cmp	r0, r5
   135b0:	moveq	r2, r5
   135b4:	str	r3, [sp, #32]
   135b8:	str	r3, [sp, #48]	; 0x30
   135bc:	str	r5, [sp, #52]	; 0x34
   135c0:	str	r3, [sp, #60]	; 0x3c
   135c4:	ldr	r3, [sp, #180]	; 0xb4
   135c8:	str	r0, [sp, #56]	; 0x38
   135cc:	str	r5, [sp, #68]	; 0x44
   135d0:	str	r5, [sp, #80]	; 0x50
   135d4:	str	r5, [sp, #84]	; 0x54
   135d8:	and	r3, r3, #1
   135dc:	str	r2, [sp, #88]	; 0x58
   135e0:	str	r3, [sp, #92]	; 0x5c
   135e4:	ldr	r3, [sp, #180]	; 0xb4
   135e8:	and	r3, r3, #4
   135ec:	str	r3, [sp, #96]	; 0x60
   135f0:	ldr	r3, [sp, #192]	; 0xc0
   135f4:	str	r3, [sp, #72]	; 0x48
   135f8:	mov	r3, fp
   135fc:	mov	r7, #0
   13600:	mov	fp, r9
   13604:	mov	r9, r3
   13608:	cmn	r8, #1
   1360c:	beq	13c10 <__assert_fail@plt+0x2c54>
   13610:	subs	r6, r8, r7
   13614:	movne	r6, #1
   13618:	cmp	r6, #0
   1361c:	beq	13c28 <__assert_fail@plt+0x2c6c>
   13620:	ldr	r0, [sp, #28]
   13624:	ldr	r3, [sp, #48]	; 0x30
   13628:	cmp	r3, #0
   1362c:	add	r3, r0, r7
   13630:	str	r3, [sp, #36]	; 0x24
   13634:	beq	140b4 <__assert_fail@plt+0x30f8>
   13638:	ldr	r2, [sp, #56]	; 0x38
   1363c:	cmp	r2, #0
   13640:	beq	145b4 <__assert_fail@plt+0x35f8>
   13644:	cmp	r2, #1
   13648:	mov	r3, r2
   1364c:	movls	r3, #0
   13650:	movhi	r3, #1
   13654:	cmn	r8, #1
   13658:	add	r5, r7, r2
   1365c:	movne	r3, #0
   13660:	cmp	r3, #0
   13664:	beq	13670 <__assert_fail@plt+0x26b4>
   13668:	bl	10ed8 <strlen@plt>
   1366c:	mov	r8, r0
   13670:	cmp	r5, r8
   13674:	bhi	145b4 <__assert_fail@plt+0x35f8>
   13678:	ldr	r0, [sp, #36]	; 0x24
   1367c:	ldr	r2, [sp, #56]	; 0x38
   13680:	ldr	r1, [sp, #72]	; 0x48
   13684:	bl	10db8 <memcmp@plt>
   13688:	cmp	r0, #0
   1368c:	bne	145b4 <__assert_fail@plt+0x35f8>
   13690:	ldr	r3, [sp, #44]	; 0x2c
   13694:	cmp	r3, #0
   13698:	bne	14d60 <__assert_fail@plt+0x3da4>
   1369c:	ldr	r3, [sp, #36]	; 0x24
   136a0:	ldrb	r5, [r3]
   136a4:	cmp	r5, #126	; 0x7e
   136a8:	ldrls	pc, [pc, r5, lsl #2]
   136ac:	b	14b48 <__assert_fail@plt+0x3b8c>
   136b0:	andeq	r3, r1, r4, lsl #27
   136b4:	andeq	r4, r1, r8, asr #22
   136b8:	andeq	r4, r1, r8, asr #22
   136bc:	andeq	r4, r1, r8, asr #22
   136c0:	andeq	r4, r1, r8, asr #22
   136c4:	andeq	r4, r1, r8, asr #22
   136c8:	andeq	r4, r1, r8, asr #22
   136cc:	ldrdeq	r3, [r1], -ip
   136d0:	ldrdeq	r3, [r1], -r4
   136d4:	andeq	r3, r1, r4, ror #25
   136d8:	andeq	r3, r1, r8, ror #28
   136dc:	andeq	r3, r1, r8, asr lr
   136e0:	andeq	r3, r1, r0, lsl #23
   136e4:	andeq	r3, r1, r4, lsr lr
   136e8:	andeq	r4, r1, r8, asr #22
   136ec:	andeq	r4, r1, r8, asr #22
   136f0:	andeq	r4, r1, r8, asr #22
   136f4:	andeq	r4, r1, r8, asr #22
   136f8:	andeq	r4, r1, r8, asr #22
   136fc:	andeq	r4, r1, r8, asr #22
   13700:	andeq	r4, r1, r8, asr #22
   13704:	andeq	r4, r1, r8, asr #22
   13708:	andeq	r4, r1, r8, asr #22
   1370c:	andeq	r4, r1, r8, asr #22
   13710:	andeq	r4, r1, r8, asr #22
   13714:	andeq	r4, r1, r8, asr #22
   13718:	andeq	r4, r1, r8, asr #22
   1371c:	andeq	r4, r1, r8, asr #22
   13720:	andeq	r4, r1, r8, asr #22
   13724:	andeq	r4, r1, r8, asr #22
   13728:	andeq	r4, r1, r8, asr #22
   1372c:	andeq	r4, r1, r8, asr #22
   13730:	andeq	r3, r1, r0, ror #29
   13734:	ldrdeq	r3, [r1], -r4
   13738:	ldrdeq	r3, [r1], -r4
   1373c:	andeq	r3, r1, r8, asr #29
   13740:	ldrdeq	r3, [r1], -r4
   13744:	andeq	r3, r1, ip, lsr #31
   13748:	ldrdeq	r3, [r1], -r4
   1374c:	andeq	r4, r1, ip, lsl r0
   13750:	ldrdeq	r3, [r1], -r4
   13754:	ldrdeq	r3, [r1], -r4
   13758:	ldrdeq	r3, [r1], -r4
   1375c:	andeq	r3, r1, ip, lsr #31
   13760:	andeq	r3, r1, ip, lsr #31
   13764:	andeq	r3, r1, ip, lsr #31
   13768:	andeq	r3, r1, ip, lsr #31
   1376c:	andeq	r3, r1, ip, lsr #31
   13770:	andeq	r3, r1, ip, lsr #31
   13774:	andeq	r3, r1, ip, lsr #31
   13778:	andeq	r3, r1, ip, lsr #31
   1377c:	andeq	r3, r1, ip, lsr #31
   13780:	andeq	r3, r1, ip, lsr #31
   13784:	andeq	r3, r1, ip, lsr #31
   13788:	andeq	r3, r1, ip, lsr #31
   1378c:	andeq	r3, r1, ip, lsr #31
   13790:	andeq	r3, r1, ip, lsr #31
   13794:	andeq	r3, r1, ip, lsr #31
   13798:	andeq	r3, r1, ip, lsr #31
   1379c:	ldrdeq	r3, [r1], -r4
   137a0:	ldrdeq	r3, [r1], -r4
   137a4:	ldrdeq	r3, [r1], -r4
   137a8:	ldrdeq	r3, [r1], -r4
   137ac:	andeq	r3, r1, ip, asr #31
   137b0:	andeq	r4, r1, r8, asr #22
   137b4:	andeq	r3, r1, ip, lsr #31
   137b8:	andeq	r3, r1, ip, lsr #31
   137bc:	andeq	r3, r1, ip, lsr #31
   137c0:	andeq	r3, r1, ip, lsr #31
   137c4:	andeq	r3, r1, ip, lsr #31
   137c8:	andeq	r3, r1, ip, lsr #31
   137cc:	andeq	r3, r1, ip, lsr #31
   137d0:	andeq	r3, r1, ip, lsr #31
   137d4:	andeq	r3, r1, ip, lsr #31
   137d8:	andeq	r3, r1, ip, lsr #31
   137dc:	andeq	r3, r1, ip, lsr #31
   137e0:	andeq	r3, r1, ip, lsr #31
   137e4:	andeq	r3, r1, ip, lsr #31
   137e8:	andeq	r3, r1, ip, lsr #31
   137ec:	andeq	r3, r1, ip, lsr #31
   137f0:	andeq	r3, r1, ip, lsr #31
   137f4:	andeq	r3, r1, ip, lsr #31
   137f8:	andeq	r3, r1, ip, lsr #31
   137fc:	andeq	r3, r1, ip, lsr #31
   13800:	andeq	r3, r1, ip, lsr #31
   13804:	andeq	r3, r1, ip, lsr #31
   13808:	andeq	r3, r1, ip, lsr #31
   1380c:	andeq	r3, r1, ip, lsr #31
   13810:	andeq	r3, r1, ip, lsr #31
   13814:	andeq	r3, r1, ip, lsr #31
   13818:	andeq	r3, r1, ip, lsr #31
   1381c:	ldrdeq	r3, [r1], -r4
   13820:	andeq	r3, r1, r0, ror pc
   13824:	andeq	r3, r1, ip, lsr #31
   13828:	ldrdeq	r3, [r1], -r4
   1382c:	andeq	r3, r1, ip, lsr #31
   13830:	ldrdeq	r3, [r1], -r4
   13834:	andeq	r3, r1, ip, lsr #31
   13838:	andeq	r3, r1, ip, lsr #31
   1383c:	andeq	r3, r1, ip, lsr #31
   13840:	andeq	r3, r1, ip, lsr #31
   13844:	andeq	r3, r1, ip, lsr #31
   13848:	andeq	r3, r1, ip, lsr #31
   1384c:	andeq	r3, r1, ip, lsr #31
   13850:	andeq	r3, r1, ip, lsr #31
   13854:	andeq	r3, r1, ip, lsr #31
   13858:	andeq	r3, r1, ip, lsr #31
   1385c:	andeq	r3, r1, ip, lsr #31
   13860:	andeq	r3, r1, ip, lsr #31
   13864:	andeq	r3, r1, ip, lsr #31
   13868:	andeq	r3, r1, ip, lsr #31
   1386c:	andeq	r3, r1, ip, lsr #31
   13870:	andeq	r3, r1, ip, lsr #31
   13874:	andeq	r3, r1, ip, lsr #31
   13878:	andeq	r3, r1, ip, lsr #31
   1387c:	andeq	r3, r1, ip, lsr #31
   13880:	andeq	r3, r1, ip, lsr #31
   13884:	andeq	r3, r1, ip, lsr #31
   13888:	andeq	r3, r1, ip, lsr #31
   1388c:	andeq	r3, r1, ip, lsr #31
   13890:	andeq	r3, r1, ip, lsr #31
   13894:	andeq	r3, r1, ip, lsr #31
   13898:	andeq	r3, r1, ip, lsr #31
   1389c:	andeq	r3, r1, ip, ror lr
   138a0:	ldrdeq	r3, [r1], -r4
   138a4:	andeq	r3, r1, ip, ror lr
   138a8:	andeq	r3, r1, r8, asr #29
   138ac:	ldr	r3, [sp, #180]	; 0xb4
   138b0:	cmp	r4, #0
   138b4:	and	r3, r3, #1
   138b8:	str	r3, [sp, #92]	; 0x5c
   138bc:	ldr	r3, [sp, #180]	; 0xb4
   138c0:	and	r3, r3, #4
   138c4:	str	r3, [sp, #96]	; 0x60
   138c8:	moveq	r3, #1
   138cc:	streq	r3, [sp, #60]	; 0x3c
   138d0:	beq	14060 <__assert_fail@plt+0x30a4>
   138d4:	mov	r3, #0
   138d8:	mov	r2, #1
   138dc:	mov	r4, r3
   138e0:	mov	r9, r3
   138e4:	str	r2, [sp, #32]
   138e8:	str	r2, [sp, #44]	; 0x2c
   138ec:	str	r3, [sp, #48]	; 0x30
   138f0:	str	r2, [sp, #52]	; 0x34
   138f4:	str	r2, [sp, #56]	; 0x38
   138f8:	str	r3, [sp, #60]	; 0x3c
   138fc:	str	r2, [sp, #64]	; 0x40
   13900:	str	r2, [sp, #68]	; 0x44
   13904:	str	r3, [sp, #80]	; 0x50
   13908:	str	r3, [sp, #84]	; 0x54
   1390c:	str	r3, [sp, #88]	; 0x58
   13910:	movw	r3, #39200	; 0x9920
   13914:	movt	r3, #1
   13918:	str	r3, [sp, #72]	; 0x48
   1391c:	mov	r3, #2
   13920:	str	r3, [sp, #176]	; 0xb0
   13924:	b	135f8 <__assert_fail@plt+0x263c>
   13928:	ldr	r3, [sp, #180]	; 0xb4
   1392c:	cmp	r4, #0
   13930:	and	r3, r3, #1
   13934:	str	r3, [sp, #92]	; 0x5c
   13938:	ldr	r3, [sp, #180]	; 0xb4
   1393c:	and	r3, r3, #4
   13940:	str	r3, [sp, #96]	; 0x60
   13944:	bne	14d18 <__assert_fail@plt+0x3d5c>
   13948:	cmp	sl, #0
   1394c:	beq	14ac4 <__assert_fail@plt+0x3b08>
   13950:	mov	r3, #34	; 0x22
   13954:	mov	r2, r4
   13958:	mov	r1, #1
   1395c:	mov	r9, r2
   13960:	strb	r3, [fp]
   13964:	movw	r3, #39180	; 0x990c
   13968:	movt	r3, #1
   1396c:	mov	r4, r1
   13970:	str	r1, [sp, #32]
   13974:	str	r2, [sp, #44]	; 0x2c
   13978:	str	r1, [sp, #48]	; 0x30
   1397c:	str	r2, [sp, #52]	; 0x34
   13980:	str	r1, [sp, #56]	; 0x38
   13984:	str	r1, [sp, #60]	; 0x3c
   13988:	str	r2, [sp, #64]	; 0x40
   1398c:	str	r2, [sp, #68]	; 0x44
   13990:	str	r3, [sp, #72]	; 0x48
   13994:	str	r2, [sp, #80]	; 0x50
   13998:	str	r2, [sp, #84]	; 0x54
   1399c:	str	r2, [sp, #88]	; 0x58
   139a0:	b	135f8 <__assert_fail@plt+0x263c>
   139a4:	mov	r3, #0
   139a8:	mov	r2, #1
   139ac:	mov	r9, r3
   139b0:	str	r2, [sp, #32]
   139b4:	str	r3, [sp, #44]	; 0x2c
   139b8:	str	r3, [sp, #48]	; 0x30
   139bc:	str	r3, [sp, #52]	; 0x34
   139c0:	str	r3, [sp, #60]	; 0x3c
   139c4:	strd	r2, [sp, #64]	; 0x40
   139c8:	str	r3, [sp, #72]	; 0x48
   139cc:	str	r3, [sp, #80]	; 0x50
   139d0:	str	r3, [sp, #88]	; 0x58
   139d4:	ldr	r3, [sp, #180]	; 0xb4
   139d8:	and	r3, r3, r2
   139dc:	str	r3, [sp, #92]	; 0x5c
   139e0:	ldr	r3, [sp, #180]	; 0xb4
   139e4:	and	r3, r3, #4
   139e8:	str	r3, [sp, #96]	; 0x60
   139ec:	ldr	r3, [sp, #176]	; 0xb0
   139f0:	mov	r4, r3
   139f4:	str	r3, [sp, #56]	; 0x38
   139f8:	str	r3, [sp, #84]	; 0x54
   139fc:	b	135f8 <__assert_fail@plt+0x263c>
   13a00:	mov	r3, #1
   13a04:	mov	r4, #0
   13a08:	mov	r9, r4
   13a0c:	str	r3, [sp, #32]
   13a10:	str	r3, [sp, #44]	; 0x2c
   13a14:	str	r3, [sp, #48]	; 0x30
   13a18:	str	r4, [sp, #52]	; 0x34
   13a1c:	str	r3, [sp, #56]	; 0x38
   13a20:	str	r3, [sp, #60]	; 0x3c
   13a24:	str	r3, [sp, #88]	; 0x58
   13a28:	movw	r3, #39180	; 0x990c
   13a2c:	movt	r3, #1
   13a30:	str	r4, [sp, #64]	; 0x40
   13a34:	str	r4, [sp, #68]	; 0x44
   13a38:	str	r3, [sp, #72]	; 0x48
   13a3c:	ldr	r3, [sp, #180]	; 0xb4
   13a40:	str	r4, [sp, #80]	; 0x50
   13a44:	str	r4, [sp, #84]	; 0x54
   13a48:	and	r3, r3, #1
   13a4c:	str	r3, [sp, #92]	; 0x5c
   13a50:	ldr	r3, [sp, #180]	; 0xb4
   13a54:	and	r3, r3, #4
   13a58:	str	r3, [sp, #96]	; 0x60
   13a5c:	mov	r3, #5
   13a60:	str	r3, [sp, #176]	; 0xb0
   13a64:	b	135f8 <__assert_fail@plt+0x263c>
   13a68:	mov	r3, #1
   13a6c:	mov	r4, #0
   13a70:	mov	r9, r4
   13a74:	str	r3, [sp, #32]
   13a78:	str	r4, [sp, #44]	; 0x2c
   13a7c:	str	r3, [sp, #48]	; 0x30
   13a80:	str	r3, [sp, #60]	; 0x3c
   13a84:	ldr	r3, [sp, #180]	; 0xb4
   13a88:	str	r4, [sp, #52]	; 0x34
   13a8c:	str	r4, [sp, #56]	; 0x38
   13a90:	str	r4, [sp, #64]	; 0x40
   13a94:	str	r4, [sp, #68]	; 0x44
   13a98:	and	r3, r3, #1
   13a9c:	str	r4, [sp, #72]	; 0x48
   13aa0:	str	r4, [sp, #80]	; 0x50
   13aa4:	str	r4, [sp, #84]	; 0x54
   13aa8:	str	r3, [sp, #92]	; 0x5c
   13aac:	ldr	r3, [sp, #180]	; 0xb4
   13ab0:	str	r4, [sp, #88]	; 0x58
   13ab4:	and	r3, r3, #4
   13ab8:	str	r3, [sp, #96]	; 0x60
   13abc:	b	135f8 <__assert_fail@plt+0x263c>
   13ac0:	mov	r3, #0
   13ac4:	mov	r2, #1
   13ac8:	ldr	r1, [sp, #176]	; 0xb0
   13acc:	mov	r4, r3
   13ad0:	mov	r9, r3
   13ad4:	movw	r3, #39200	; 0x9920
   13ad8:	movt	r3, #1
   13adc:	str	r2, [sp, #32]
   13ae0:	str	r2, [sp, #44]	; 0x2c
   13ae4:	str	r4, [sp, #48]	; 0x30
   13ae8:	strd	r2, [sp, #68]	; 0x44
   13aec:	ldr	r3, [sp, #180]	; 0xb4
   13af0:	str	r2, [sp, #52]	; 0x34
   13af4:	str	r1, [sp, #56]	; 0x38
   13af8:	str	r4, [sp, #60]	; 0x3c
   13afc:	str	r2, [sp, #64]	; 0x40
   13b00:	and	r3, r3, r2
   13b04:	str	r4, [sp, #80]	; 0x50
   13b08:	str	r4, [sp, #84]	; 0x54
   13b0c:	str	r4, [sp, #88]	; 0x58
   13b10:	str	r3, [sp, #92]	; 0x5c
   13b14:	ldr	r3, [sp, #180]	; 0xb4
   13b18:	and	r3, r3, #4
   13b1c:	str	r3, [sp, #96]	; 0x60
   13b20:	mov	r3, #2
   13b24:	str	r3, [sp, #176]	; 0xb0
   13b28:	b	135f8 <__assert_fail@plt+0x263c>
   13b2c:	mov	r3, #1
   13b30:	mov	r2, #0
   13b34:	mov	r4, r2
   13b38:	mov	r9, r2
   13b3c:	str	r3, [sp, #32]
   13b40:	str	r3, [sp, #44]	; 0x2c
   13b44:	str	r2, [sp, #48]	; 0x30
   13b48:	str	r3, [sp, #52]	; 0x34
   13b4c:	str	r3, [sp, #56]	; 0x38
   13b50:	str	r3, [sp, #60]	; 0x3c
   13b54:	str	r3, [sp, #64]	; 0x40
   13b58:	str	r3, [sp, #68]	; 0x44
   13b5c:	str	r3, [sp, #88]	; 0x58
   13b60:	movw	r3, #39200	; 0x9920
   13b64:	movt	r3, #1
   13b68:	str	r3, [sp, #72]	; 0x48
   13b6c:	ldr	r3, [sp, #180]	; 0xb4
   13b70:	str	r2, [sp, #80]	; 0x50
   13b74:	str	r2, [sp, #84]	; 0x54
   13b78:	and	r3, r3, #1
   13b7c:	b	13b10 <__assert_fail@plt+0x2b54>
   13b80:	mov	r5, #102	; 0x66
   13b84:	mov	r6, #0
   13b88:	ldr	r3, [sp, #44]	; 0x2c
   13b8c:	cmp	r3, #0
   13b90:	bne	14a40 <__assert_fail@plt+0x3a84>
   13b94:	ldr	r2, [sp, #52]	; 0x34
   13b98:	eor	r3, fp, #1
   13b9c:	ands	r3, r2, r3
   13ba0:	beq	13bd8 <__assert_fail@plt+0x2c1c>
   13ba4:	cmp	sl, r4
   13ba8:	mov	fp, r3
   13bac:	movhi	r2, #39	; 0x27
   13bb0:	strbhi	r2, [r9, r4]
   13bb4:	add	r2, r4, #1
   13bb8:	cmp	sl, r2
   13bbc:	movhi	r1, #36	; 0x24
   13bc0:	strbhi	r1, [r9, r2]
   13bc4:	add	r2, r4, #2
   13bc8:	add	r4, r4, #3
   13bcc:	cmp	sl, r2
   13bd0:	movhi	r1, #39	; 0x27
   13bd4:	strbhi	r1, [r9, r2]
   13bd8:	cmp	sl, r4
   13bdc:	add	r7, r7, #1
   13be0:	movhi	r3, #92	; 0x5c
   13be4:	strbhi	r3, [r9, r4]
   13be8:	add	r4, r4, #1
   13bec:	cmp	r4, sl
   13bf0:	ldr	r3, [sp, #32]
   13bf4:	strbcc	r5, [r9, r4]
   13bf8:	cmp	r6, #0
   13bfc:	add	r4, r4, #1
   13c00:	moveq	r3, #0
   13c04:	cmn	r8, #1
   13c08:	str	r3, [sp, #32]
   13c0c:	bne	13610 <__assert_fail@plt+0x2654>
   13c10:	ldr	r3, [sp, #28]
   13c14:	ldrb	r6, [r3, r7]
   13c18:	adds	r6, r6, #0
   13c1c:	movne	r6, #1
   13c20:	cmp	r6, #0
   13c24:	bne	13620 <__assert_fail@plt+0x2664>
   13c28:	mov	r3, r9
   13c2c:	mov	r9, fp
   13c30:	mov	fp, r3
   13c34:	ldr	r3, [sp, #68]	; 0x44
   13c38:	cmp	r4, #0
   13c3c:	movne	r3, #0
   13c40:	cmp	r3, #0
   13c44:	bne	14e38 <__assert_fail@plt+0x3e7c>
   13c48:	ldr	r3, [sp, #44]	; 0x2c
   13c4c:	ldr	r2, [sp, #52]	; 0x34
   13c50:	eor	r3, r3, #1
   13c54:	ands	r2, r3, r2
   13c58:	beq	14d70 <__assert_fail@plt+0x3db4>
   13c5c:	ldr	r3, [sp, #80]	; 0x50
   13c60:	cmp	r3, #0
   13c64:	beq	14d74 <__assert_fail@plt+0x3db8>
   13c68:	ldr	r3, [sp, #32]
   13c6c:	cmp	r3, #0
   13c70:	bne	14de8 <__assert_fail@plt+0x3e2c>
   13c74:	ldr	r3, [sp, #84]	; 0x54
   13c78:	adds	r3, r3, #0
   13c7c:	movne	r3, #1
   13c80:	cmp	sl, #0
   13c84:	movne	r3, #0
   13c88:	cmp	r3, #0
   13c8c:	ldreq	r2, [sp, #80]	; 0x50
   13c90:	beq	14d74 <__assert_fail@plt+0x3db8>
   13c94:	ldr	r2, [sp, #84]	; 0x54
   13c98:	mov	sl, r2
   13c9c:	mov	r0, #0
   13ca0:	mov	r4, #1
   13ca4:	mov	r1, #39	; 0x27
   13ca8:	str	r0, [sp, #44]	; 0x2c
   13cac:	strb	r1, [fp]
   13cb0:	str	r0, [sp, #48]	; 0x30
   13cb4:	str	r4, [sp, #52]	; 0x34
   13cb8:	str	r4, [sp, #56]	; 0x38
   13cbc:	str	r4, [sp, #64]	; 0x40
   13cc0:	str	r0, [sp, #68]	; 0x44
   13cc4:	str	r3, [sp, #80]	; 0x50
   13cc8:	str	r2, [sp, #84]	; 0x54
   13ccc:	str	r0, [sp, #88]	; 0x58
   13cd0:	b	13910 <__assert_fail@plt+0x2954>
   13cd4:	mov	r5, #98	; 0x62
   13cd8:	b	13b84 <__assert_fail@plt+0x2bc8>
   13cdc:	mov	r5, #97	; 0x61
   13ce0:	b	13b84 <__assert_fail@plt+0x2bc8>
   13ce4:	ldr	r3, [sp, #48]	; 0x30
   13ce8:	str	r3, [sp, #40]	; 0x28
   13cec:	mov	r3, #116	; 0x74
   13cf0:	ldr	r2, [sp, #68]	; 0x44
   13cf4:	cmp	r2, #0
   13cf8:	bne	13ef4 <__assert_fail@plt+0x2f38>
   13cfc:	ldr	r2, [sp, #60]	; 0x3c
   13d00:	cmp	r2, #0
   13d04:	bne	13e50 <__assert_fail@plt+0x2e94>
   13d08:	ldr	r3, [sp, #44]	; 0x2c
   13d0c:	mov	r6, #0
   13d10:	cmp	r3, #0
   13d14:	beq	13ec0 <__assert_fail@plt+0x2f04>
   13d18:	mov	r3, fp
   13d1c:	ldr	r2, [sp, #184]	; 0xb8
   13d20:	cmp	r2, #0
   13d24:	beq	13d44 <__assert_fail@plt+0x2d88>
   13d28:	ubfx	r1, r5, #5, #8
   13d2c:	mov	r0, r2
   13d30:	and	r2, r5, #31
   13d34:	ldr	r1, [r0, r1, lsl #2]
   13d38:	lsr	r2, r1, r2
   13d3c:	tst	r2, #1
   13d40:	bne	13b88 <__assert_fail@plt+0x2bcc>
   13d44:	ldr	r2, [sp, #40]	; 0x28
   13d48:	cmp	r2, #0
   13d4c:	addeq	r7, r7, #1
   13d50:	bne	13b88 <__assert_fail@plt+0x2bcc>
   13d54:	cmp	r3, #0
   13d58:	beq	13bec <__assert_fail@plt+0x2c30>
   13d5c:	cmp	sl, r4
   13d60:	mov	fp, #0
   13d64:	movhi	r3, #39	; 0x27
   13d68:	strbhi	r3, [r9, r4]
   13d6c:	add	r3, r4, #1
   13d70:	add	r4, r4, #2
   13d74:	cmp	sl, r3
   13d78:	movhi	r2, #39	; 0x27
   13d7c:	strbhi	r2, [r9, r3]
   13d80:	b	13bec <__assert_fail@plt+0x2c30>
   13d84:	ldr	r3, [sp, #48]	; 0x30
   13d88:	str	r3, [sp, #40]	; 0x28
   13d8c:	eor	r3, fp, #1
   13d90:	ldr	r2, [sp, #52]	; 0x34
   13d94:	ands	r2, r2, r3
   13d98:	beq	14a58 <__assert_fail@plt+0x3a9c>
   13d9c:	cmp	sl, r4
   13da0:	movhi	r3, #39	; 0x27
   13da4:	strbhi	r3, [r9, r4]
   13da8:	add	r3, r4, #1
   13dac:	cmp	sl, r3
   13db0:	movhi	r1, #36	; 0x24
   13db4:	strbhi	r1, [r9, r3]
   13db8:	add	r3, r4, #2
   13dbc:	cmp	sl, r3
   13dc0:	movhi	r1, #39	; 0x27
   13dc4:	strbhi	r1, [r9, r3]
   13dc8:	add	r3, r4, #3
   13dcc:	cmp	sl, r3
   13dd0:	bls	14aa4 <__assert_fail@plt+0x3ae8>
   13dd4:	mov	r4, r3
   13dd8:	mov	r3, #92	; 0x5c
   13ddc:	mov	fp, r2
   13de0:	mov	r2, r4
   13de4:	strb	r3, [r9, r4]
   13de8:	ldr	r3, [sp, #176]	; 0xb0
   13dec:	add	r4, r4, #1
   13df0:	cmp	r3, #2
   13df4:	beq	14b0c <__assert_fail@plt+0x3b50>
   13df8:	add	r3, r7, #1
   13dfc:	cmp	r3, r8
   13e00:	bcs	13e18 <__assert_fail@plt+0x2e5c>
   13e04:	ldr	r1, [sp, #28]
   13e08:	ldrb	r3, [r1, r3]
   13e0c:	sub	r3, r3, #48	; 0x30
   13e10:	cmp	r3, #9
   13e14:	bls	14b1c <__assert_fail@plt+0x3b60>
   13e18:	mov	r3, #0
   13e1c:	mov	r5, #48	; 0x30
   13e20:	ldr	r6, [sp, #64]	; 0x40
   13e24:	cmp	r6, #0
   13e28:	beq	13d1c <__assert_fail@plt+0x2d60>
   13e2c:	mov	r6, #0
   13e30:	b	13d44 <__assert_fail@plt+0x2d88>
   13e34:	ldr	r3, [sp, #48]	; 0x30
   13e38:	str	r3, [sp, #40]	; 0x28
   13e3c:	ldr	r2, [sp, #60]	; 0x3c
   13e40:	mov	r5, #13
   13e44:	mov	r3, #114	; 0x72
   13e48:	cmp	r2, #0
   13e4c:	beq	13d08 <__assert_fail@plt+0x2d4c>
   13e50:	mov	r5, r3
   13e54:	b	13b84 <__assert_fail@plt+0x2bc8>
   13e58:	ldr	r3, [sp, #48]	; 0x30
   13e5c:	str	r3, [sp, #40]	; 0x28
   13e60:	mov	r3, #118	; 0x76
   13e64:	b	13cfc <__assert_fail@plt+0x2d40>
   13e68:	ldr	r3, [sp, #48]	; 0x30
   13e6c:	str	r3, [sp, #40]	; 0x28
   13e70:	mov	r5, #10
   13e74:	mov	r3, #110	; 0x6e
   13e78:	b	13cfc <__assert_fail@plt+0x2d40>
   13e7c:	ldr	r3, [sp, #48]	; 0x30
   13e80:	cmn	r8, #1
   13e84:	str	r3, [sp, #40]	; 0x28
   13e88:	beq	142d0 <__assert_fail@plt+0x3314>
   13e8c:	subs	r3, r8, #1
   13e90:	movne	r3, #1
   13e94:	cmp	r3, #0
   13e98:	bne	13ea4 <__assert_fail@plt+0x2ee8>
   13e9c:	cmp	r7, #0
   13ea0:	beq	13ee8 <__assert_fail@plt+0x2f2c>
   13ea4:	mov	r6, #0
   13ea8:	ldr	r3, [sp, #64]	; 0x40
   13eac:	cmp	r3, #0
   13eb0:	beq	13d18 <__assert_fail@plt+0x2d5c>
   13eb4:	ldr	r3, [sp, #44]	; 0x2c
   13eb8:	cmp	r3, #0
   13ebc:	bne	13d18 <__assert_fail@plt+0x2d5c>
   13ec0:	mov	r3, fp
   13ec4:	b	13d44 <__assert_fail@plt+0x2d88>
   13ec8:	ldr	r3, [sp, #48]	; 0x30
   13ecc:	str	r3, [sp, #40]	; 0x28
   13ed0:	b	13e9c <__assert_fail@plt+0x2ee0>
   13ed4:	ldr	r3, [sp, #48]	; 0x30
   13ed8:	str	r3, [sp, #40]	; 0x28
   13edc:	b	13ea4 <__assert_fail@plt+0x2ee8>
   13ee0:	ldr	r6, [sp, #48]	; 0x30
   13ee4:	str	r6, [sp, #40]	; 0x28
   13ee8:	ldr	r3, [sp, #68]	; 0x44
   13eec:	cmp	r3, #0
   13ef0:	beq	13ea8 <__assert_fail@plt+0x2eec>
   13ef4:	mov	r3, #2
   13ef8:	mov	fp, r9
   13efc:	str	r3, [sp, #176]	; 0xb0
   13f00:	ldr	r3, [sp, #60]	; 0x3c
   13f04:	cmp	r3, #0
   13f08:	ldr	r3, [sp, #176]	; 0xb0
   13f0c:	movne	r3, #4
   13f10:	str	r3, [sp, #176]	; 0xb0
   13f14:	mov	lr, #0
   13f18:	mov	r0, fp
   13f1c:	ldr	r2, [sp, #28]
   13f20:	ldr	r3, [sp, #180]	; 0xb4
   13f24:	ldr	r1, [sp, #188]	; 0xbc
   13f28:	bic	ip, r3, #2
   13f2c:	ldr	r3, [sp, #176]	; 0xb0
   13f30:	stm	sp, {r3, ip, lr}
   13f34:	mov	r3, r8
   13f38:	ldr	ip, [sp, #192]	; 0xc0
   13f3c:	str	r1, [sp, #12]
   13f40:	mov	r1, sl
   13f44:	str	ip, [sp, #16]
   13f48:	bl	134d4 <__assert_fail@plt+0x2518>
   13f4c:	mov	r4, r0
   13f50:	mov	r0, r4
   13f54:	add	sp, sp, #140	; 0x8c
   13f58:	ldrd	r4, [sp]
   13f5c:	ldrd	r6, [sp, #8]
   13f60:	ldrd	r8, [sp, #16]
   13f64:	ldrd	sl, [sp, #24]
   13f68:	add	sp, sp, #32
   13f6c:	pop	{pc}		; (ldr pc, [sp], #4)
   13f70:	ldr	r3, [sp, #48]	; 0x30
   13f74:	str	r3, [sp, #40]	; 0x28
   13f78:	ldr	r3, [sp, #176]	; 0xb0
   13f7c:	cmp	r3, #2
   13f80:	beq	142f8 <__assert_fail@plt+0x333c>
   13f84:	ldr	r3, [sp, #88]	; 0x58
   13f88:	cmp	r3, #0
   13f8c:	moveq	r5, #92	; 0x5c
   13f90:	moveq	r3, r5
   13f94:	beq	13cfc <__assert_fail@plt+0x2d40>
   13f98:	add	r7, r7, #1
   13f9c:	mov	r3, fp
   13fa0:	mov	r6, #0
   13fa4:	mov	r5, #92	; 0x5c
   13fa8:	b	13d54 <__assert_fail@plt+0x2d98>
   13fac:	ldr	r3, [sp, #64]	; 0x40
   13fb0:	cmp	r3, #0
   13fb4:	bne	14e2c <__assert_fail@plt+0x3e70>
   13fb8:	ldr	r2, [sp, #48]	; 0x30
   13fbc:	mov	r3, fp
   13fc0:	mov	r6, r2
   13fc4:	str	r2, [sp, #40]	; 0x28
   13fc8:	b	13d1c <__assert_fail@plt+0x2d60>
   13fcc:	ldr	r3, [sp, #176]	; 0xb0
   13fd0:	cmp	r3, #2
   13fd4:	beq	14d68 <__assert_fail@plt+0x3dac>
   13fd8:	cmp	r3, #5
   13fdc:	ldr	r3, [sp, #48]	; 0x30
   13fe0:	str	r3, [sp, #40]	; 0x28
   13fe4:	bne	14010 <__assert_fail@plt+0x3054>
   13fe8:	ldr	r3, [sp, #96]	; 0x60
   13fec:	cmp	r3, #0
   13ff0:	beq	14a6c <__assert_fail@plt+0x3ab0>
   13ff4:	add	r3, r7, #2
   13ff8:	cmp	r3, r8
   13ffc:	bcs	14010 <__assert_fail@plt+0x3054>
   14000:	ldr	r2, [sp, #36]	; 0x24
   14004:	ldrb	r5, [r2, #1]
   14008:	cmp	r5, #63	; 0x3f
   1400c:	beq	14b54 <__assert_fail@plt+0x3b98>
   14010:	mov	r6, #0
   14014:	mov	r5, #63	; 0x3f
   14018:	b	13ea8 <__assert_fail@plt+0x2eec>
   1401c:	ldr	r3, [sp, #176]	; 0xb0
   14020:	cmp	r3, #2
   14024:	ldr	r3, [sp, #48]	; 0x30
   14028:	beq	14810 <__assert_fail@plt+0x3854>
   1402c:	mov	r5, #39	; 0x27
   14030:	str	r3, [sp, #40]	; 0x28
   14034:	str	r6, [sp, #80]	; 0x50
   14038:	b	13ea8 <__assert_fail@plt+0x2eec>
   1403c:	ldr	r3, [sp, #180]	; 0xb4
   14040:	cmp	r4, #0
   14044:	and	r3, r3, #1
   14048:	str	r3, [sp, #92]	; 0x5c
   1404c:	ldr	r3, [sp, #180]	; 0xb4
   14050:	and	r3, r3, #4
   14054:	str	r3, [sp, #96]	; 0x60
   14058:	bne	14e78 <__assert_fail@plt+0x3ebc>
   1405c:	str	r4, [sp, #60]	; 0x3c
   14060:	cmp	sl, #0
   14064:	bne	14e5c <__assert_fail@plt+0x3ea0>
   14068:	mov	r3, #1
   1406c:	movw	r2, #39200	; 0x9920
   14070:	movt	r2, #1
   14074:	mov	r4, r3
   14078:	mov	r3, #2
   1407c:	mov	r9, sl
   14080:	str	r4, [sp, #32]
   14084:	str	sl, [sp, #44]	; 0x2c
   14088:	str	sl, [sp, #48]	; 0x30
   1408c:	str	r4, [sp, #52]	; 0x34
   14090:	str	r4, [sp, #56]	; 0x38
   14094:	str	r4, [sp, #64]	; 0x40
   14098:	str	sl, [sp, #68]	; 0x44
   1409c:	str	r2, [sp, #72]	; 0x48
   140a0:	str	sl, [sp, #80]	; 0x50
   140a4:	str	sl, [sp, #84]	; 0x54
   140a8:	str	sl, [sp, #88]	; 0x58
   140ac:	str	r3, [sp, #176]	; 0xb0
   140b0:	b	135f8 <__assert_fail@plt+0x263c>
   140b4:	ldrb	r5, [r0, r7]
   140b8:	cmp	r5, #126	; 0x7e
   140bc:	ldrls	pc, [pc, r5, lsl #2]
   140c0:	b	14424 <__assert_fail@plt+0x3468>
   140c4:	strdeq	r4, [r1], -r0
   140c8:	andeq	r4, r1, r4, lsr #8
   140cc:	andeq	r4, r1, r4, lsr #8
   140d0:	andeq	r4, r1, r4, lsr #8
   140d4:	andeq	r4, r1, r4, lsr #8
   140d8:	andeq	r4, r1, r4, lsr #8
   140dc:	andeq	r4, r1, r4, lsr #8
   140e0:	andeq	r4, r1, r0, ror #7
   140e4:	ldrdeq	r4, [r1], -r0
   140e8:	andeq	r4, r1, r4, asr r3
   140ec:	andeq	r4, r1, r0, asr #7
   140f0:	andeq	r4, r1, r4, lsr r3
   140f4:	andeq	r4, r1, r4, lsl r4
   140f8:	andeq	r4, r1, r0, lsr #7
   140fc:	andeq	r4, r1, r4, lsr #8
   14100:	andeq	r4, r1, r4, lsr #8
   14104:	andeq	r4, r1, r4, lsr #8
   14108:	andeq	r4, r1, r4, lsr #8
   1410c:	andeq	r4, r1, r4, lsr #8
   14110:	andeq	r4, r1, r4, lsr #8
   14114:	andeq	r4, r1, r4, lsr #8
   14118:	andeq	r4, r1, r4, lsr #8
   1411c:	andeq	r4, r1, r4, lsr #8
   14120:	andeq	r4, r1, r4, lsr #8
   14124:	andeq	r4, r1, r4, lsr #8
   14128:	andeq	r4, r1, r4, lsr #8
   1412c:	andeq	r4, r1, r4, lsr #8
   14130:	andeq	r4, r1, r4, lsr #8
   14134:	andeq	r4, r1, r4, lsr #8
   14138:	andeq	r4, r1, r4, lsr #8
   1413c:	andeq	r4, r1, r4, lsr #8
   14140:	andeq	r4, r1, r4, lsr #8
   14144:	andeq	r4, r1, r8, asr #6
   14148:			; <UNDEFINED> instruction: 0x000143b0
   1414c:			; <UNDEFINED> instruction: 0x000143b0
   14150:	andeq	r4, r1, r8, lsr #6
   14154:			; <UNDEFINED> instruction: 0x000143b0
   14158:	andeq	r4, r1, ip, lsl r3
   1415c:			; <UNDEFINED> instruction: 0x000143b0
   14160:	andeq	r4, r1, ip, lsl #7
   14164:			; <UNDEFINED> instruction: 0x000143b0
   14168:			; <UNDEFINED> instruction: 0x000143b0
   1416c:			; <UNDEFINED> instruction: 0x000143b0
   14170:	andeq	r4, r1, ip, lsl r3
   14174:	andeq	r4, r1, ip, lsl r3
   14178:	andeq	r4, r1, ip, lsl r3
   1417c:	andeq	r4, r1, ip, lsl r3
   14180:	andeq	r4, r1, ip, lsl r3
   14184:	andeq	r4, r1, ip, lsl r3
   14188:	andeq	r4, r1, ip, lsl r3
   1418c:	andeq	r4, r1, ip, lsl r3
   14190:	andeq	r4, r1, ip, lsl r3
   14194:	andeq	r4, r1, ip, lsl r3
   14198:	andeq	r4, r1, ip, lsl r3
   1419c:	andeq	r4, r1, ip, lsl r3
   141a0:	andeq	r4, r1, ip, lsl r3
   141a4:	andeq	r4, r1, ip, lsl r3
   141a8:	andeq	r4, r1, ip, lsl r3
   141ac:	andeq	r4, r1, ip, lsl r3
   141b0:			; <UNDEFINED> instruction: 0x000143b0
   141b4:			; <UNDEFINED> instruction: 0x000143b0
   141b8:			; <UNDEFINED> instruction: 0x000143b0
   141bc:			; <UNDEFINED> instruction: 0x000143b0
   141c0:	andeq	r4, r1, r4, ror #6
   141c4:	andeq	r4, r1, r4, lsr #8
   141c8:	andeq	r4, r1, ip, lsl r3
   141cc:	andeq	r4, r1, ip, lsl r3
   141d0:	andeq	r4, r1, ip, lsl r3
   141d4:	andeq	r4, r1, ip, lsl r3
   141d8:	andeq	r4, r1, ip, lsl r3
   141dc:	andeq	r4, r1, ip, lsl r3
   141e0:	andeq	r4, r1, ip, lsl r3
   141e4:	andeq	r4, r1, ip, lsl r3
   141e8:	andeq	r4, r1, ip, lsl r3
   141ec:	andeq	r4, r1, ip, lsl r3
   141f0:	andeq	r4, r1, ip, lsl r3
   141f4:	andeq	r4, r1, ip, lsl r3
   141f8:	andeq	r4, r1, ip, lsl r3
   141fc:	andeq	r4, r1, ip, lsl r3
   14200:	andeq	r4, r1, ip, lsl r3
   14204:	andeq	r4, r1, ip, lsl r3
   14208:	andeq	r4, r1, ip, lsl r3
   1420c:	andeq	r4, r1, ip, lsl r3
   14210:	andeq	r4, r1, ip, lsl r3
   14214:	andeq	r4, r1, ip, lsl r3
   14218:	andeq	r4, r1, ip, lsl r3
   1421c:	andeq	r4, r1, ip, lsl r3
   14220:	andeq	r4, r1, ip, lsl r3
   14224:	andeq	r4, r1, ip, lsl r3
   14228:	andeq	r4, r1, ip, lsl r3
   1422c:	andeq	r4, r1, ip, lsl r3
   14230:			; <UNDEFINED> instruction: 0x000143b0
   14234:	andeq	r4, r1, r4, ror #5
   14238:	andeq	r4, r1, ip, lsl r3
   1423c:			; <UNDEFINED> instruction: 0x000143b0
   14240:	andeq	r4, r1, ip, lsl r3
   14244:			; <UNDEFINED> instruction: 0x000143b0
   14248:	andeq	r4, r1, ip, lsl r3
   1424c:	andeq	r4, r1, ip, lsl r3
   14250:	andeq	r4, r1, ip, lsl r3
   14254:	andeq	r4, r1, ip, lsl r3
   14258:	andeq	r4, r1, ip, lsl r3
   1425c:	andeq	r4, r1, ip, lsl r3
   14260:	andeq	r4, r1, ip, lsl r3
   14264:	andeq	r4, r1, ip, lsl r3
   14268:	andeq	r4, r1, ip, lsl r3
   1426c:	andeq	r4, r1, ip, lsl r3
   14270:	andeq	r4, r1, ip, lsl r3
   14274:	andeq	r4, r1, ip, lsl r3
   14278:	andeq	r4, r1, ip, lsl r3
   1427c:	andeq	r4, r1, ip, lsl r3
   14280:	andeq	r4, r1, ip, lsl r3
   14284:	andeq	r4, r1, ip, lsl r3
   14288:	andeq	r4, r1, ip, lsl r3
   1428c:	andeq	r4, r1, ip, lsl r3
   14290:	andeq	r4, r1, ip, lsl r3
   14294:	andeq	r4, r1, ip, lsl r3
   14298:	andeq	r4, r1, ip, lsl r3
   1429c:	andeq	r4, r1, ip, lsl r3
   142a0:	andeq	r4, r1, ip, lsl r3
   142a4:	andeq	r4, r1, ip, lsl r3
   142a8:	andeq	r4, r1, ip, lsl r3
   142ac:	andeq	r4, r1, ip, lsl r3
   142b0:	andeq	r4, r1, r0, asr #5
   142b4:			; <UNDEFINED> instruction: 0x000143b0
   142b8:	andeq	r4, r1, r0, asr #5
   142bc:	andeq	r4, r1, r8, lsr #6
   142c0:	mov	r3, #0
   142c4:	cmn	r8, #1
   142c8:	str	r3, [sp, #40]	; 0x28
   142cc:	bne	13e8c <__assert_fail@plt+0x2ed0>
   142d0:	ldr	r3, [sp, #28]
   142d4:	ldrb	r3, [r3, #1]
   142d8:	adds	r3, r3, #0
   142dc:	movne	r3, #1
   142e0:	b	13e94 <__assert_fail@plt+0x2ed8>
   142e4:	mov	r3, #0
   142e8:	str	r3, [sp, #40]	; 0x28
   142ec:	ldr	r3, [sp, #176]	; 0xb0
   142f0:	cmp	r3, #2
   142f4:	bne	13f84 <__assert_fail@plt+0x2fc8>
   142f8:	ldr	r3, [sp, #44]	; 0x2c
   142fc:	cmp	r3, #0
   14300:	bne	14c40 <__assert_fail@plt+0x3c84>
   14304:	mov	r6, r3
   14308:	add	r7, r7, #1
   1430c:	mov	r3, fp
   14310:	mov	r5, #92	; 0x5c
   14314:	b	13d54 <__assert_fail@plt+0x2d98>
   14318:	ldr	r6, [sp, #48]	; 0x30
   1431c:	mov	r3, #0
   14320:	str	r3, [sp, #40]	; 0x28
   14324:	b	13ea8 <__assert_fail@plt+0x2eec>
   14328:	mov	r3, #0
   1432c:	str	r3, [sp, #40]	; 0x28
   14330:	b	13e9c <__assert_fail@plt+0x2ee0>
   14334:	mov	r3, #0
   14338:	str	r3, [sp, #40]	; 0x28
   1433c:	mov	r3, #118	; 0x76
   14340:	b	13cfc <__assert_fail@plt+0x2d40>
   14344:	ldr	r6, [sp, #48]	; 0x30
   14348:	mov	r3, #0
   1434c:	str	r3, [sp, #40]	; 0x28
   14350:	b	13ee8 <__assert_fail@plt+0x2f2c>
   14354:	mov	r3, #0
   14358:	str	r3, [sp, #40]	; 0x28
   1435c:	mov	r3, #116	; 0x74
   14360:	b	13cf0 <__assert_fail@plt+0x2d34>
   14364:	ldr	r3, [sp, #176]	; 0xb0
   14368:	cmp	r3, #2
   1436c:	beq	1487c <__assert_fail@plt+0x38c0>
   14370:	cmp	r3, #5
   14374:	mov	r3, #0
   14378:	str	r3, [sp, #40]	; 0x28
   1437c:	beq	13fe8 <__assert_fail@plt+0x302c>
   14380:	mov	r6, #0
   14384:	mov	r5, #63	; 0x3f
   14388:	b	13ea8 <__assert_fail@plt+0x2eec>
   1438c:	ldr	r3, [sp, #176]	; 0xb0
   14390:	cmp	r3, #2
   14394:	beq	14804 <__assert_fail@plt+0x3848>
   14398:	mov	r3, #0
   1439c:	b	1402c <__assert_fail@plt+0x3070>
   143a0:	mov	r3, #0
   143a4:	str	r3, [sp, #40]	; 0x28
   143a8:	mov	r3, #114	; 0x72
   143ac:	b	13cf0 <__assert_fail@plt+0x2d34>
   143b0:	mov	r3, #0
   143b4:	mov	r6, r3
   143b8:	str	r3, [sp, #40]	; 0x28
   143bc:	b	13ee8 <__assert_fail@plt+0x2f2c>
   143c0:	mov	r3, #0
   143c4:	str	r3, [sp, #40]	; 0x28
   143c8:	mov	r3, #110	; 0x6e
   143cc:	b	13cf0 <__assert_fail@plt+0x2d34>
   143d0:	mov	r3, #0
   143d4:	str	r3, [sp, #40]	; 0x28
   143d8:	mov	r3, #98	; 0x62
   143dc:	b	13cfc <__assert_fail@plt+0x2d40>
   143e0:	mov	r3, #0
   143e4:	str	r3, [sp, #40]	; 0x28
   143e8:	mov	r3, #97	; 0x61
   143ec:	b	13cfc <__assert_fail@plt+0x2d40>
   143f0:	ldr	r3, [sp, #60]	; 0x3c
   143f4:	cmp	r3, #0
   143f8:	bne	147e8 <__assert_fail@plt+0x382c>
   143fc:	ldr	r3, [sp, #92]	; 0x5c
   14400:	cmp	r3, #0
   14404:	addne	r7, r7, #1
   14408:	bne	13608 <__assert_fail@plt+0x264c>
   1440c:	str	r3, [sp, #40]	; 0x28
   14410:	b	13d08 <__assert_fail@plt+0x2d4c>
   14414:	mov	r3, #0
   14418:	str	r3, [sp, #40]	; 0x28
   1441c:	mov	r3, #102	; 0x66
   14420:	b	13cfc <__assert_fail@plt+0x2d40>
   14424:	mov	r3, #0
   14428:	str	r3, [sp, #40]	; 0x28
   1442c:	ldr	r3, [sp, #76]	; 0x4c
   14430:	cmp	r3, #1
   14434:	bne	1489c <__assert_fail@plt+0x38e0>
   14438:	bl	10ec0 <__ctype_b_loc@plt>
   1443c:	ldr	r2, [r0]
   14440:	sxth	r3, r5
   14444:	lsl	r3, r3, #1
   14448:	ldr	r1, [sp, #76]	; 0x4c
   1444c:	ldrh	r3, [r2, r3]
   14450:	mov	r0, r1
   14454:	and	r3, r3, #16384	; 0x4000
   14458:	cmp	r3, #0
   1445c:	ldr	r3, [sp, #60]	; 0x3c
   14460:	movne	r6, #1
   14464:	moveq	r6, #0
   14468:	movne	r2, #0
   1446c:	andeq	r2, r3, #1
   14470:	cmp	r2, #0
   14474:	beq	13ea8 <__assert_fail@plt+0x2eec>
   14478:	ldr	r2, [sp, #60]	; 0x3c
   1447c:	mov	r6, #0
   14480:	add	r1, r0, r7
   14484:	mov	ip, #39	; 0x27
   14488:	str	r6, [sp, #100]	; 0x64
   1448c:	mov	r0, #0
   14490:	ldr	lr, [sp, #36]	; 0x24
   14494:	str	r8, [sp, #36]	; 0x24
   14498:	ldr	r6, [sp, #40]	; 0x28
   1449c:	ldr	r8, [sp, #44]	; 0x2c
   144a0:	b	14550 <__assert_fail@plt+0x3594>
   144a4:	cmp	r8, #0
   144a8:	bne	14a84 <__assert_fail@plt+0x3ac8>
   144ac:	ldr	r0, [sp, #52]	; 0x34
   144b0:	eor	r3, fp, #1
   144b4:	ands	r3, r0, r3
   144b8:	beq	144e8 <__assert_fail@plt+0x352c>
   144bc:	cmp	sl, r4
   144c0:	add	r0, r4, #1
   144c4:	strbhi	ip, [r9, r4]
   144c8:	cmp	sl, r0
   144cc:	movhi	fp, #36	; 0x24
   144d0:	strbhi	fp, [r9, r0]
   144d4:	add	r0, r4, #2
   144d8:	mov	fp, r3
   144dc:	cmp	sl, r0
   144e0:	add	r4, r4, #3
   144e4:	strbhi	ip, [r9, r0]
   144e8:	cmp	sl, r4
   144ec:	movhi	r3, #92	; 0x5c
   144f0:	strbhi	r3, [r9, r4]
   144f4:	add	r3, r4, #1
   144f8:	cmp	sl, r3
   144fc:	bls	1450c <__assert_fail@plt+0x3550>
   14500:	lsr	r0, r5, #6
   14504:	add	r0, r0, #48	; 0x30
   14508:	strb	r0, [r9, r3]
   1450c:	add	r3, r4, #2
   14510:	cmp	sl, r3
   14514:	bls	14524 <__assert_fail@plt+0x3568>
   14518:	ubfx	r0, r5, #3, #3
   1451c:	add	r0, r0, #48	; 0x30
   14520:	strb	r0, [r9, r3]
   14524:	add	r7, r7, #1
   14528:	and	r5, r5, #7
   1452c:	cmp	r1, r7
   14530:	add	r5, r5, #48	; 0x30
   14534:	add	r4, r4, #3
   14538:	bls	14a98 <__assert_fail@plt+0x3adc>
   1453c:	mov	r0, r2
   14540:	cmp	sl, r4
   14544:	strbhi	r5, [r9, r4]
   14548:	add	r4, r4, #1
   1454c:	ldrb	r5, [lr, #1]!
   14550:	cmp	r2, #0
   14554:	bne	144a4 <__assert_fail@plt+0x34e8>
   14558:	eor	r3, r0, #1
   1455c:	cmp	r6, #0
   14560:	and	r3, r3, fp
   14564:	uxtb	r3, r3
   14568:	beq	1457c <__assert_fail@plt+0x35c0>
   1456c:	cmp	sl, r4
   14570:	movhi	r6, #92	; 0x5c
   14574:	strbhi	r6, [r9, r4]
   14578:	add	r4, r4, #1
   1457c:	add	r7, r7, #1
   14580:	cmp	r7, r1
   14584:	bcs	14a78 <__assert_fail@plt+0x3abc>
   14588:	cmp	r3, #0
   1458c:	beq	14abc <__assert_fail@plt+0x3b00>
   14590:	cmp	sl, r4
   14594:	add	r3, r4, #1
   14598:	mov	r6, #0
   1459c:	strbhi	ip, [r9, r4]
   145a0:	cmp	sl, r3
   145a4:	add	r4, r4, #2
   145a8:	mov	fp, r6
   145ac:	strbhi	ip, [r9, r3]
   145b0:	b	14540 <__assert_fail@plt+0x3584>
   145b4:	ldr	r3, [sp, #36]	; 0x24
   145b8:	ldrb	r5, [r3]
   145bc:	cmp	r5, #126	; 0x7e
   145c0:	ldrls	pc, [pc, r5, lsl #2]
   145c4:	b	14424 <__assert_fail@plt+0x3468>
   145c8:	andeq	r4, r1, r8, ror #15
   145cc:	andeq	r4, r1, r4, lsr #8
   145d0:	andeq	r4, r1, r4, lsr #8
   145d4:	andeq	r4, r1, r4, lsr #8
   145d8:	andeq	r4, r1, r4, lsr #8
   145dc:	andeq	r4, r1, r4, lsr #8
   145e0:	andeq	r4, r1, r4, lsr #8
   145e4:	ldrdeq	r3, [r1], -ip
   145e8:	ldrdeq	r3, [r1], -r4
   145ec:	andeq	r4, r1, r4, asr r3
   145f0:	ldrdeq	r4, [r1], -ip
   145f4:	andeq	r4, r1, r4, lsr r3
   145f8:	andeq	r3, r1, r0, lsl #23
   145fc:	ldrdeq	r4, [r1], -r0
   14600:	andeq	r4, r1, r4, lsr #8
   14604:	andeq	r4, r1, r4, lsr #8
   14608:	andeq	r4, r1, r4, lsr #8
   1460c:	andeq	r4, r1, r4, lsr #8
   14610:	andeq	r4, r1, r4, lsr #8
   14614:	andeq	r4, r1, r4, lsr #8
   14618:	andeq	r4, r1, r4, lsr #8
   1461c:	andeq	r4, r1, r4, lsr #8
   14620:	andeq	r4, r1, r4, lsr #8
   14624:	andeq	r4, r1, r4, lsr #8
   14628:	andeq	r4, r1, r4, lsr #8
   1462c:	andeq	r4, r1, r4, lsr #8
   14630:	andeq	r4, r1, r4, lsr #8
   14634:	andeq	r4, r1, r4, lsr #8
   14638:	andeq	r4, r1, r4, lsr #8
   1463c:	andeq	r4, r1, r4, lsr #8
   14640:	andeq	r4, r1, r4, lsr #8
   14644:	andeq	r4, r1, r4, lsr #8
   14648:	andeq	r4, r1, r4, asr #6
   1464c:	andeq	r4, r1, r4, asr #15
   14650:	andeq	r4, r1, r4, asr #15
   14654:	andeq	r4, r1, r8, lsr #6
   14658:	andeq	r4, r1, r4, asr #15
   1465c:	andeq	r4, r1, r8, lsl r3
   14660:	andeq	r4, r1, r4, asr #15
   14664:	andeq	r4, r1, ip, lsl #7
   14668:	andeq	r4, r1, r4, asr #15
   1466c:	andeq	r4, r1, r4, asr #15
   14670:	andeq	r4, r1, r4, asr #15
   14674:	andeq	r4, r1, r8, lsl r3
   14678:	andeq	r4, r1, r8, lsl r3
   1467c:	andeq	r4, r1, r8, lsl r3
   14680:	andeq	r4, r1, r8, lsl r3
   14684:	andeq	r4, r1, r8, lsl r3
   14688:	andeq	r4, r1, r8, lsl r3
   1468c:	andeq	r4, r1, r8, lsl r3
   14690:	andeq	r4, r1, r8, lsl r3
   14694:	andeq	r4, r1, r8, lsl r3
   14698:	andeq	r4, r1, r8, lsl r3
   1469c:	andeq	r4, r1, r8, lsl r3
   146a0:	andeq	r4, r1, r8, lsl r3
   146a4:	andeq	r4, r1, r8, lsl r3
   146a8:	andeq	r4, r1, r8, lsl r3
   146ac:	andeq	r4, r1, r8, lsl r3
   146b0:	andeq	r4, r1, r8, lsl r3
   146b4:	andeq	r4, r1, r4, asr #15
   146b8:	andeq	r4, r1, r4, asr #15
   146bc:	andeq	r4, r1, r4, asr #15
   146c0:	andeq	r4, r1, r4, asr #15
   146c4:	andeq	r4, r1, r4, ror #6
   146c8:	andeq	r4, r1, r4, lsr #8
   146cc:	andeq	r4, r1, r8, lsl r3
   146d0:	andeq	r4, r1, r8, lsl r3
   146d4:	andeq	r4, r1, r8, lsl r3
   146d8:	andeq	r4, r1, r8, lsl r3
   146dc:	andeq	r4, r1, r8, lsl r3
   146e0:	andeq	r4, r1, r8, lsl r3
   146e4:	andeq	r4, r1, r8, lsl r3
   146e8:	andeq	r4, r1, r8, lsl r3
   146ec:	andeq	r4, r1, r8, lsl r3
   146f0:	andeq	r4, r1, r8, lsl r3
   146f4:	andeq	r4, r1, r8, lsl r3
   146f8:	andeq	r4, r1, r8, lsl r3
   146fc:	andeq	r4, r1, r8, lsl r3
   14700:	andeq	r4, r1, r8, lsl r3
   14704:	andeq	r4, r1, r8, lsl r3
   14708:	andeq	r4, r1, r8, lsl r3
   1470c:	andeq	r4, r1, r8, lsl r3
   14710:	andeq	r4, r1, r8, lsl r3
   14714:	andeq	r4, r1, r8, lsl r3
   14718:	andeq	r4, r1, r8, lsl r3
   1471c:	andeq	r4, r1, r8, lsl r3
   14720:	andeq	r4, r1, r8, lsl r3
   14724:	andeq	r4, r1, r8, lsl r3
   14728:	andeq	r4, r1, r8, lsl r3
   1472c:	andeq	r4, r1, r8, lsl r3
   14730:	andeq	r4, r1, r8, lsl r3
   14734:	andeq	r4, r1, r4, asr #15
   14738:	andeq	r4, r1, r4, ror #5
   1473c:	andeq	r4, r1, r8, lsl r3
   14740:	andeq	r4, r1, r4, asr #15
   14744:	andeq	r4, r1, r8, lsl r3
   14748:	andeq	r4, r1, r4, asr #15
   1474c:	andeq	r4, r1, r8, lsl r3
   14750:	andeq	r4, r1, r8, lsl r3
   14754:	andeq	r4, r1, r8, lsl r3
   14758:	andeq	r4, r1, r8, lsl r3
   1475c:	andeq	r4, r1, r8, lsl r3
   14760:	andeq	r4, r1, r8, lsl r3
   14764:	andeq	r4, r1, r8, lsl r3
   14768:	andeq	r4, r1, r8, lsl r3
   1476c:	andeq	r4, r1, r8, lsl r3
   14770:	andeq	r4, r1, r8, lsl r3
   14774:	andeq	r4, r1, r8, lsl r3
   14778:	andeq	r4, r1, r8, lsl r3
   1477c:	andeq	r4, r1, r8, lsl r3
   14780:	andeq	r4, r1, r8, lsl r3
   14784:	andeq	r4, r1, r8, lsl r3
   14788:	andeq	r4, r1, r8, lsl r3
   1478c:	andeq	r4, r1, r8, lsl r3
   14790:	andeq	r4, r1, r8, lsl r3
   14794:	andeq	r4, r1, r8, lsl r3
   14798:	andeq	r4, r1, r8, lsl r3
   1479c:	andeq	r4, r1, r8, lsl r3
   147a0:	andeq	r4, r1, r8, lsl r3
   147a4:	andeq	r4, r1, r8, lsl r3
   147a8:	andeq	r4, r1, r8, lsl r3
   147ac:	andeq	r4, r1, r8, lsl r3
   147b0:	andeq	r4, r1, r8, lsl r3
   147b4:	andeq	r4, r1, r0, asr #5
   147b8:	andeq	r4, r1, r4, asr #15
   147bc:	andeq	r4, r1, r0, asr #5
   147c0:	andeq	r4, r1, r8, lsr #6
   147c4:	mov	r3, #0
   147c8:	str	r3, [sp, #40]	; 0x28
   147cc:	b	13ea4 <__assert_fail@plt+0x2ee8>
   147d0:	mov	r3, #0
   147d4:	str	r3, [sp, #40]	; 0x28
   147d8:	b	13e3c <__assert_fail@plt+0x2e80>
   147dc:	mov	r3, #0
   147e0:	str	r3, [sp, #40]	; 0x28
   147e4:	b	13e70 <__assert_fail@plt+0x2eb4>
   147e8:	ldr	r3, [sp, #44]	; 0x2c
   147ec:	cmp	r3, #0
   147f0:	beq	13d88 <__assert_fail@plt+0x2dcc>
   147f4:	ldr	r3, [sp, #52]	; 0x34
   147f8:	mov	fp, r9
   147fc:	str	r3, [sp, #60]	; 0x3c
   14800:	b	13f00 <__assert_fail@plt+0x2f44>
   14804:	ldr	r3, [sp, #44]	; 0x2c
   14808:	cmp	r3, #0
   1480c:	bne	14c40 <__assert_fail@plt+0x3c84>
   14810:	str	r3, [sp, #40]	; 0x28
   14814:	cmp	sl, #0
   14818:	ldr	r3, [sp, #84]	; 0x54
   1481c:	clz	r3, r3
   14820:	lsr	r3, r3, #5
   14824:	moveq	r3, #0
   14828:	cmp	r3, #0
   1482c:	strne	sl, [sp, #84]	; 0x54
   14830:	movne	sl, #0
   14834:	bne	14864 <__assert_fail@plt+0x38a8>
   14838:	cmp	sl, r4
   1483c:	movhi	r3, #39	; 0x27
   14840:	strbhi	r3, [r9, r4]
   14844:	add	r3, r4, #1
   14848:	cmp	sl, r3
   1484c:	movhi	r2, #92	; 0x5c
   14850:	strbhi	r2, [r9, r3]
   14854:	add	r3, r4, #2
   14858:	cmp	sl, r3
   1485c:	movhi	r2, #39	; 0x27
   14860:	strbhi	r2, [r9, r3]
   14864:	mov	r3, #0
   14868:	add	r4, r4, #3
   1486c:	str	r6, [sp, #80]	; 0x50
   14870:	mov	fp, r3
   14874:	mov	r5, #39	; 0x27
   14878:	b	13d44 <__assert_fail@plt+0x2d88>
   1487c:	ldr	r3, [sp, #44]	; 0x2c
   14880:	cmp	r3, #0
   14884:	bne	14c40 <__assert_fail@plt+0x3c84>
   14888:	mov	r6, #0
   1488c:	mov	r5, #63	; 0x3f
   14890:	str	r3, [sp, #40]	; 0x28
   14894:	mov	r3, fp
   14898:	b	13d44 <__assert_fail@plt+0x2d88>
   1489c:	mov	r2, #0
   148a0:	mov	r3, #0
   148a4:	cmn	r8, #1
   148a8:	strd	r2, [sp, #128]	; 0x80
   148ac:	bne	148bc <__assert_fail@plt+0x3900>
   148b0:	ldr	r0, [sp, #28]
   148b4:	bl	10ed8 <strlen@plt>
   148b8:	mov	r8, r0
   148bc:	str	r9, [sp, #100]	; 0x64
   148c0:	mov	r3, #0
   148c4:	strd	sl, [sp, #104]	; 0x68
   148c8:	ldr	sl, [sp, #28]
   148cc:	str	r5, [sp, #112]	; 0x70
   148d0:	mov	r5, r3
   148d4:	ldr	r9, [sp, #68]	; 0x44
   148d8:	str	r4, [sp, #116]	; 0x74
   148dc:	add	r4, r7, r5
   148e0:	add	r3, sp, #128	; 0x80
   148e4:	add	fp, sl, r4
   148e8:	sub	r2, r8, r4
   148ec:	mov	r1, fp
   148f0:	add	r0, sp, #124	; 0x7c
   148f4:	bl	18a28 <__assert_fail@plt+0x7a6c>
   148f8:	subs	r1, r0, #0
   148fc:	beq	1493c <__assert_fail@plt+0x3980>
   14900:	cmn	r1, #1
   14904:	beq	14c94 <__assert_fail@plt+0x3cd8>
   14908:	cmn	r1, #2
   1490c:	beq	14cb4 <__assert_fail@plt+0x3cf8>
   14910:	cmp	r9, #0
   14914:	bne	1496c <__assert_fail@plt+0x39b0>
   14918:	ldr	r0, [sp, #124]	; 0x7c
   1491c:	add	r5, r5, r1
   14920:	bl	10e00 <iswprint@plt>
   14924:	cmp	r0, #0
   14928:	add	r0, sp, #128	; 0x80
   1492c:	moveq	r6, #0
   14930:	bl	10da0 <mbsinit@plt>
   14934:	cmp	r0, #0
   14938:	beq	148dc <__assert_fail@plt+0x3920>
   1493c:	ldr	r3, [sp, #60]	; 0x3c
   14940:	add	r9, sp, #100	; 0x64
   14944:	mov	r0, r5
   14948:	ldm	r9, {r9, sl, fp}
   1494c:	eor	r2, r6, #1
   14950:	ldr	r5, [sp, #112]	; 0x70
   14954:	and	r2, r2, r3
   14958:	uxtb	r2, r2
   1495c:	ldr	r4, [sp, #116]	; 0x74
   14960:	cmp	r0, #1
   14964:	bhi	14480 <__assert_fail@plt+0x34c4>
   14968:	b	14470 <__assert_fail@plt+0x34b4>
   1496c:	cmp	r1, #1
   14970:	beq	14918 <__assert_fail@plt+0x395c>
   14974:	add	r2, r4, #1
   14978:	add	r3, sl, r1
   1497c:	add	r2, sl, r2
   14980:	add	r4, r3, r4
   14984:	ldrb	r3, [r2], #1
   14988:	sub	r3, r3, #91	; 0x5b
   1498c:	cmp	r3, #33	; 0x21
   14990:	ldrls	pc, [pc, r3, lsl #2]
   14994:	b	14a20 <__assert_fail@plt+0x3a64>
   14998:	andeq	r4, r1, ip, lsr #20
   1499c:	andeq	r4, r1, ip, lsr #20
   149a0:	andeq	r4, r1, r0, lsr #20
   149a4:	andeq	r4, r1, ip, lsr #20
   149a8:	andeq	r4, r1, r0, lsr #20
   149ac:	andeq	r4, r1, ip, lsr #20
   149b0:	andeq	r4, r1, r0, lsr #20
   149b4:	andeq	r4, r1, r0, lsr #20
   149b8:	andeq	r4, r1, r0, lsr #20
   149bc:	andeq	r4, r1, r0, lsr #20
   149c0:	andeq	r4, r1, r0, lsr #20
   149c4:	andeq	r4, r1, r0, lsr #20
   149c8:	andeq	r4, r1, r0, lsr #20
   149cc:	andeq	r4, r1, r0, lsr #20
   149d0:	andeq	r4, r1, r0, lsr #20
   149d4:	andeq	r4, r1, r0, lsr #20
   149d8:	andeq	r4, r1, r0, lsr #20
   149dc:	andeq	r4, r1, r0, lsr #20
   149e0:	andeq	r4, r1, r0, lsr #20
   149e4:	andeq	r4, r1, r0, lsr #20
   149e8:	andeq	r4, r1, r0, lsr #20
   149ec:	andeq	r4, r1, r0, lsr #20
   149f0:	andeq	r4, r1, r0, lsr #20
   149f4:	andeq	r4, r1, r0, lsr #20
   149f8:	andeq	r4, r1, r0, lsr #20
   149fc:	andeq	r4, r1, r0, lsr #20
   14a00:	andeq	r4, r1, r0, lsr #20
   14a04:	andeq	r4, r1, r0, lsr #20
   14a08:	andeq	r4, r1, r0, lsr #20
   14a0c:	andeq	r4, r1, r0, lsr #20
   14a10:	andeq	r4, r1, r0, lsr #20
   14a14:	andeq	r4, r1, r0, lsr #20
   14a18:	andeq	r4, r1, r0, lsr #20
   14a1c:	andeq	r4, r1, ip, lsr #20
   14a20:	cmp	r4, r2
   14a24:	bne	14984 <__assert_fail@plt+0x39c8>
   14a28:	b	14918 <__assert_fail@plt+0x395c>
   14a2c:	mov	r3, #2
   14a30:	ldr	fp, [sp, #100]	; 0x64
   14a34:	str	r3, [sp, #176]	; 0xb0
   14a38:	ldr	sl, [sp, #104]	; 0x68
   14a3c:	b	13f00 <__assert_fail@plt+0x2f44>
   14a40:	ldr	r2, [sp, #52]	; 0x34
   14a44:	mov	fp, r9
   14a48:	ldr	r3, [sp, #60]	; 0x3c
   14a4c:	and	r3, r3, r2
   14a50:	str	r3, [sp, #60]	; 0x3c
   14a54:	b	13f00 <__assert_fail@plt+0x2f44>
   14a58:	cmp	sl, r4
   14a5c:	movhi	r2, fp
   14a60:	bhi	13dd8 <__assert_fail@plt+0x2e1c>
   14a64:	mov	r2, r4
   14a68:	b	13de8 <__assert_fail@plt+0x2e2c>
   14a6c:	mov	r6, r3
   14a70:	mov	r5, #63	; 0x3f
   14a74:	b	13ea8 <__assert_fail@plt+0x2eec>
   14a78:	ldr	r8, [sp, #36]	; 0x24
   14a7c:	ldr	r6, [sp, #100]	; 0x64
   14a80:	b	13d54 <__assert_fail@plt+0x2d98>
   14a84:	mov	fp, r9
   14a88:	ldr	r8, [sp, #36]	; 0x24
   14a8c:	ldr	r3, [sp, #52]	; 0x34
   14a90:	str	r3, [sp, #60]	; 0x3c
   14a94:	b	13f00 <__assert_fail@plt+0x2f44>
   14a98:	ldr	r8, [sp, #36]	; 0x24
   14a9c:	ldr	r6, [sp, #100]	; 0x64
   14aa0:	b	13bec <__assert_fail@plt+0x2c30>
   14aa4:	mov	r3, #0
   14aa8:	add	r4, r4, #4
   14aac:	mov	fp, r2
   14ab0:	mov	r6, r3
   14ab4:	mov	r5, #48	; 0x30
   14ab8:	b	13d44 <__assert_fail@plt+0x2d88>
   14abc:	mov	r6, r3
   14ac0:	b	14540 <__assert_fail@plt+0x3584>
   14ac4:	mov	r3, #1
   14ac8:	movw	r2, #39180	; 0x990c
   14acc:	movt	r2, #1
   14ad0:	mov	r4, r3
   14ad4:	mov	r9, sl
   14ad8:	str	r3, [sp, #32]
   14adc:	str	sl, [sp, #44]	; 0x2c
   14ae0:	str	r3, [sp, #48]	; 0x30
   14ae4:	str	sl, [sp, #52]	; 0x34
   14ae8:	str	r3, [sp, #56]	; 0x38
   14aec:	str	r3, [sp, #60]	; 0x3c
   14af0:	str	sl, [sp, #64]	; 0x40
   14af4:	str	sl, [sp, #68]	; 0x44
   14af8:	str	r2, [sp, #72]	; 0x48
   14afc:	str	sl, [sp, #80]	; 0x50
   14b00:	str	sl, [sp, #84]	; 0x54
   14b04:	str	sl, [sp, #88]	; 0x58
   14b08:	b	135f8 <__assert_fail@plt+0x263c>
   14b0c:	mov	r3, #0
   14b10:	mov	r5, #48	; 0x30
   14b14:	mov	r6, r3
   14b18:	b	13d44 <__assert_fail@plt+0x2d88>
   14b1c:	cmp	sl, r4
   14b20:	mov	r5, #48	; 0x30
   14b24:	movhi	r3, #48	; 0x30
   14b28:	strbhi	r3, [r9, r4]
   14b2c:	add	r3, r2, #2
   14b30:	add	r4, r2, #3
   14b34:	cmp	sl, r3
   14b38:	movhi	r1, #48	; 0x30
   14b3c:	strbhi	r1, [r9, r3]
   14b40:	mov	r3, #0
   14b44:	b	13e20 <__assert_fail@plt+0x2e64>
   14b48:	ldr	r3, [sp, #48]	; 0x30
   14b4c:	str	r3, [sp, #40]	; 0x28
   14b50:	b	1442c <__assert_fail@plt+0x3470>
   14b54:	ldr	r2, [sp, #28]
   14b58:	ldrb	r2, [r2, r3]
   14b5c:	sub	r1, r2, #33	; 0x21
   14b60:	cmp	r1, #29
   14b64:	ldrls	pc, [pc, r1, lsl #2]
   14b68:	b	13ea4 <__assert_fail@plt+0x2ee8>
   14b6c:	andeq	r4, r1, r4, ror #23
   14b70:	andeq	r3, r1, r4, lsr #29
   14b74:	andeq	r3, r1, r4, lsr #29
   14b78:	andeq	r3, r1, r4, lsr #29
   14b7c:	andeq	r3, r1, r4, lsr #29
   14b80:	andeq	r3, r1, r4, lsr #29
   14b84:	andeq	r4, r1, r4, ror #23
   14b88:	andeq	r4, r1, r4, ror #23
   14b8c:	andeq	r4, r1, r4, ror #23
   14b90:	andeq	r3, r1, r4, lsr #29
   14b94:	andeq	r3, r1, r4, lsr #29
   14b98:	andeq	r3, r1, r4, lsr #29
   14b9c:	andeq	r4, r1, r4, ror #23
   14ba0:	andeq	r3, r1, r4, lsr #29
   14ba4:	andeq	r4, r1, r4, ror #23
   14ba8:	andeq	r3, r1, r4, lsr #29
   14bac:	andeq	r3, r1, r4, lsr #29
   14bb0:	andeq	r3, r1, r4, lsr #29
   14bb4:	andeq	r3, r1, r4, lsr #29
   14bb8:	andeq	r3, r1, r4, lsr #29
   14bbc:	andeq	r3, r1, r4, lsr #29
   14bc0:	andeq	r3, r1, r4, lsr #29
   14bc4:	andeq	r3, r1, r4, lsr #29
   14bc8:	andeq	r3, r1, r4, lsr #29
   14bcc:	andeq	r3, r1, r4, lsr #29
   14bd0:	andeq	r3, r1, r4, lsr #29
   14bd4:	andeq	r3, r1, r4, lsr #29
   14bd8:	andeq	r4, r1, r4, ror #23
   14bdc:	andeq	r4, r1, r4, ror #23
   14be0:	andeq	r4, r1, r4, ror #23
   14be4:	ldr	r1, [sp, #44]	; 0x2c
   14be8:	cmp	r1, #0
   14bec:	bne	14e4c <__assert_fail@plt+0x3e90>
   14bf0:	cmp	sl, r4
   14bf4:	mov	r7, r3
   14bf8:	movhi	r1, #63	; 0x3f
   14bfc:	mov	r5, r2
   14c00:	mov	r3, fp
   14c04:	strbhi	r1, [r9, r4]
   14c08:	add	r1, r4, #1
   14c0c:	cmp	sl, r1
   14c10:	movhi	r0, #34	; 0x22
   14c14:	strbhi	r0, [r9, r1]
   14c18:	add	r1, r4, #2
   14c1c:	cmp	sl, r1
   14c20:	movhi	r0, #34	; 0x22
   14c24:	strbhi	r0, [r9, r1]
   14c28:	add	r1, r4, #3
   14c2c:	add	r4, r4, #4
   14c30:	cmp	sl, r1
   14c34:	movhi	r0, #63	; 0x3f
   14c38:	strbhi	r0, [r9, r1]
   14c3c:	b	13e20 <__assert_fail@plt+0x2e64>
   14c40:	mov	fp, r9
   14c44:	b	13f00 <__assert_fail@plt+0x2f44>
   14c48:	ldr	r3, [sp, #188]	; 0xbc
   14c4c:	ldrb	r3, [r3]
   14c50:	cmp	r3, #0
   14c54:	beq	13590 <__assert_fail@plt+0x25d4>
   14c58:	ldr	r2, [sp, #188]	; 0xbc
   14c5c:	cmp	sl, r4
   14c60:	bls	14c80 <__assert_fail@plt+0x3cc4>
   14c64:	strb	r3, [fp, r4]
   14c68:	add	r4, r4, #1
   14c6c:	ldrb	r3, [r2, #1]!
   14c70:	cmp	r3, #0
   14c74:	beq	13590 <__assert_fail@plt+0x25d4>
   14c78:	cmp	sl, r4
   14c7c:	bhi	14c64 <__assert_fail@plt+0x3ca8>
   14c80:	ldrb	r3, [r2, #1]!
   14c84:	add	r4, r4, #1
   14c88:	cmp	r3, #0
   14c8c:	bne	14c5c <__assert_fail@plt+0x3ca0>
   14c90:	b	13590 <__assert_fail@plt+0x25d4>
   14c94:	add	r9, sp, #100	; 0x64
   14c98:	mov	r0, r5
   14c9c:	ldr	r2, [sp, #60]	; 0x3c
   14ca0:	mov	r6, #0
   14ca4:	ldm	r9, {r9, sl, fp}
   14ca8:	ldr	r5, [sp, #112]	; 0x70
   14cac:	ldr	r4, [sp, #116]	; 0x74
   14cb0:	b	14960 <__assert_fail@plt+0x39a4>
   14cb4:	cmp	r4, r8
   14cb8:	add	r9, sp, #100	; 0x64
   14cbc:	mov	r1, r4
   14cc0:	mov	r2, fp
   14cc4:	ldm	r9, {r9, sl, fp}
   14cc8:	mov	r3, r5
   14ccc:	mov	r0, r5
   14cd0:	ldr	r5, [sp, #112]	; 0x70
   14cd4:	ldr	r4, [sp, #116]	; 0x74
   14cd8:	bcs	14d0c <__assert_fail@plt+0x3d50>
   14cdc:	ldrb	r6, [r2]
   14ce0:	cmp	r6, #0
   14ce4:	bne	14cf8 <__assert_fail@plt+0x3d3c>
   14ce8:	b	14e44 <__assert_fail@plt+0x3e88>
   14cec:	ldrb	r6, [r2, #1]!
   14cf0:	cmp	r6, #0
   14cf4:	beq	14ddc <__assert_fail@plt+0x3e20>
   14cf8:	add	r3, r3, #1
   14cfc:	add	r1, r7, r3
   14d00:	cmp	r8, r1
   14d04:	bhi	14cec <__assert_fail@plt+0x3d30>
   14d08:	mov	r0, r3
   14d0c:	mov	r6, #0
   14d10:	ldr	r2, [sp, #60]	; 0x3c
   14d14:	b	14960 <__assert_fail@plt+0x39a4>
   14d18:	mov	r3, #1
   14d1c:	mov	r4, #0
   14d20:	mov	r9, r4
   14d24:	str	r3, [sp, #32]
   14d28:	str	r3, [sp, #44]	; 0x2c
   14d2c:	str	r3, [sp, #48]	; 0x30
   14d30:	str	r4, [sp, #52]	; 0x34
   14d34:	str	r3, [sp, #56]	; 0x38
   14d38:	str	r3, [sp, #60]	; 0x3c
   14d3c:	str	r3, [sp, #88]	; 0x58
   14d40:	movw	r3, #39180	; 0x990c
   14d44:	movt	r3, #1
   14d48:	str	r4, [sp, #64]	; 0x40
   14d4c:	str	r4, [sp, #68]	; 0x44
   14d50:	str	r3, [sp, #72]	; 0x48
   14d54:	str	r4, [sp, #80]	; 0x50
   14d58:	str	r4, [sp, #84]	; 0x54
   14d5c:	b	135f8 <__assert_fail@plt+0x263c>
   14d60:	mov	fp, r9
   14d64:	b	13f14 <__assert_fail@plt+0x2f58>
   14d68:	ldr	r3, [sp, #48]	; 0x30
   14d6c:	b	14888 <__assert_fail@plt+0x38cc>
   14d70:	mov	r2, r3
   14d74:	ldr	r3, [sp, #72]	; 0x48
   14d78:	cmp	r3, #0
   14d7c:	moveq	r2, #0
   14d80:	andne	r2, r2, #1
   14d84:	cmp	r2, #0
   14d88:	beq	14db8 <__assert_fail@plt+0x3dfc>
   14d8c:	mov	r2, r3
   14d90:	ldrb	r3, [r3]
   14d94:	cmp	r3, #0
   14d98:	beq	14db8 <__assert_fail@plt+0x3dfc>
   14d9c:	cmp	sl, r4
   14da0:	bls	14dc8 <__assert_fail@plt+0x3e0c>
   14da4:	strb	r3, [fp, r4]
   14da8:	add	r4, r4, #1
   14dac:	ldrb	r3, [r2, #1]!
   14db0:	cmp	r3, #0
   14db4:	bne	14d9c <__assert_fail@plt+0x3de0>
   14db8:	cmp	sl, r4
   14dbc:	movhi	r3, #0
   14dc0:	strbhi	r3, [fp, r4]
   14dc4:	b	13f50 <__assert_fail@plt+0x2f94>
   14dc8:	ldrb	r3, [r2, #1]!
   14dcc:	add	r4, r4, #1
   14dd0:	cmp	r3, #0
   14dd4:	bne	14d9c <__assert_fail@plt+0x3de0>
   14dd8:	b	14db8 <__assert_fail@plt+0x3dfc>
   14ddc:	mov	r0, r3
   14de0:	ldr	r2, [sp, #60]	; 0x3c
   14de4:	b	14960 <__assert_fail@plt+0x39a4>
   14de8:	mov	ip, #5
   14dec:	mov	r3, r8
   14df0:	ldr	r1, [sp, #84]	; 0x54
   14df4:	str	ip, [sp]
   14df8:	ldr	r2, [sp, #180]	; 0xb4
   14dfc:	ldr	ip, [sp, #188]	; 0xbc
   14e00:	ldr	r0, [sp, #184]	; 0xb8
   14e04:	str	r2, [sp, #4]
   14e08:	ldr	r2, [sp, #28]
   14e0c:	str	ip, [sp, #12]
   14e10:	ldr	ip, [sp, #192]	; 0xc0
   14e14:	str	r0, [sp, #8]
   14e18:	mov	r0, fp
   14e1c:	str	ip, [sp, #16]
   14e20:	bl	134d4 <__assert_fail@plt+0x2518>
   14e24:	mov	r4, r0
   14e28:	b	13f50 <__assert_fail@plt+0x2f94>
   14e2c:	mov	r6, r3
   14e30:	str	r3, [sp, #40]	; 0x28
   14e34:	b	13ec0 <__assert_fail@plt+0x2f04>
   14e38:	mov	r3, #2
   14e3c:	str	r3, [sp, #176]	; 0xb0
   14e40:	b	13f00 <__assert_fail@plt+0x2f44>
   14e44:	ldr	r2, [sp, #60]	; 0x3c
   14e48:	b	14960 <__assert_fail@plt+0x39a4>
   14e4c:	mov	r3, #5
   14e50:	mov	fp, r9
   14e54:	str	r3, [sp, #176]	; 0xb0
   14e58:	b	13f14 <__assert_fail@plt+0x2f58>
   14e5c:	mov	r1, #1
   14e60:	mov	r9, #0
   14e64:	mov	r3, r9
   14e68:	mov	r2, r9
   14e6c:	str	r1, [sp, #32]
   14e70:	str	sl, [sp, #84]	; 0x54
   14e74:	b	13c9c <__assert_fail@plt+0x2ce0>
   14e78:	mov	r3, #0
   14e7c:	mov	r2, #1
   14e80:	mov	r9, r3
   14e84:	mov	r4, r3
   14e88:	str	r2, [sp, #32]
   14e8c:	strd	r2, [sp, #44]	; 0x2c
   14e90:	strd	r2, [sp, #56]	; 0x38
   14e94:	str	r3, [sp, #80]	; 0x50
   14e98:	str	r3, [sp, #84]	; 0x54
   14e9c:	str	r3, [sp, #88]	; 0x58
   14ea0:	movw	r3, #39200	; 0x9920
   14ea4:	movt	r3, #1
   14ea8:	str	r2, [sp, #52]	; 0x34
   14eac:	str	r2, [sp, #64]	; 0x40
   14eb0:	str	r2, [sp, #68]	; 0x44
   14eb4:	str	r3, [sp, #72]	; 0x48
   14eb8:	b	135f8 <__assert_fail@plt+0x263c>
   14ebc:	bl	10fa4 <abort@plt>
   14ec0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14ec4:	mov	r4, r0
   14ec8:	mov	r5, r3
   14ecc:	strd	r6, [sp, #8]
   14ed0:	movw	r7, #41220	; 0xa104
   14ed4:	movt	r7, #2
   14ed8:	strd	r8, [sp, #16]
   14edc:	strd	sl, [sp, #24]
   14ee0:	mov	sl, r1
   14ee4:	mov	fp, r2
   14ee8:	str	lr, [sp, #32]
   14eec:	sub	sp, sp, #60	; 0x3c
   14ef0:	bl	10ef0 <__errno_location@plt>
   14ef4:	mov	r8, r0
   14ef8:	cmn	r4, #-2147483647	; 0x80000001
   14efc:	ldr	r6, [r7]
   14f00:	movne	r0, #0
   14f04:	moveq	r0, #1
   14f08:	ldr	r3, [r8]
   14f0c:	orrs	r0, r0, r4, lsr #31
   14f10:	str	r3, [sp, #28]
   14f14:	bne	150a4 <__assert_fail@plt+0x40e8>
   14f18:	ldr	r3, [r7, #4]
   14f1c:	cmp	r3, r4
   14f20:	bgt	14f80 <__assert_fail@plt+0x3fc4>
   14f24:	add	r1, r7, #8
   14f28:	sub	r2, r4, r3
   14f2c:	str	r3, [sp, #52]	; 0x34
   14f30:	cmp	r6, r1
   14f34:	add	r2, r2, #1
   14f38:	beq	1507c <__assert_fail@plt+0x40c0>
   14f3c:	mov	r1, #8
   14f40:	mov	r0, r6
   14f44:	mvn	r3, #-2147483648	; 0x80000000
   14f48:	str	r1, [sp]
   14f4c:	add	r1, sp, #52	; 0x34
   14f50:	bl	177e0 <__assert_fail@plt+0x6824>
   14f54:	mov	r6, r0
   14f58:	str	r0, [r7]
   14f5c:	ldr	r0, [r7, #4]
   14f60:	mov	r1, #0
   14f64:	ldr	r2, [sp, #52]	; 0x34
   14f68:	sub	r2, r2, r0
   14f6c:	add	r0, r6, r0, lsl #3
   14f70:	lsl	r2, r2, #3
   14f74:	bl	10f08 <memset@plt>
   14f78:	ldr	r3, [sp, #52]	; 0x34
   14f7c:	str	r3, [r7, #4]
   14f80:	ldr	r1, [r5, #4]
   14f84:	add	r0, r6, r4, lsl #3
   14f88:	add	ip, r5, #8
   14f8c:	mov	r3, fp
   14f90:	mov	r2, sl
   14f94:	ldr	r7, [r0, #4]
   14f98:	str	r0, [sp, #36]	; 0x24
   14f9c:	str	ip, [sp, #40]	; 0x28
   14fa0:	orr	r0, r1, #1
   14fa4:	ldr	r9, [r6, r4, lsl #3]
   14fa8:	str	ip, [sp, #8]
   14fac:	ldr	lr, [r5, #44]	; 0x2c
   14fb0:	str	r0, [sp, #4]
   14fb4:	ldr	ip, [r5]
   14fb8:	mov	r1, r9
   14fbc:	str	ip, [sp, #32]
   14fc0:	ldr	ip, [r5, #40]	; 0x28
   14fc4:	str	ip, [sp, #12]
   14fc8:	ldr	ip, [sp, #32]
   14fcc:	str	lr, [sp, #16]
   14fd0:	str	r0, [sp, #44]	; 0x2c
   14fd4:	mov	r0, r7
   14fd8:	str	ip, [sp]
   14fdc:	bl	134d4 <__assert_fail@plt+0x2518>
   14fe0:	cmp	r9, r0
   14fe4:	bhi	15054 <__assert_fail@plt+0x4098>
   14fe8:	add	r9, r0, #1
   14fec:	movw	r3, #41372	; 0xa19c
   14ff0:	movt	r3, #2
   14ff4:	cmp	r7, r3
   14ff8:	str	r9, [r6, r4, lsl #3]
   14ffc:	beq	15008 <__assert_fail@plt+0x404c>
   15000:	mov	r0, r7
   15004:	bl	12c28 <__assert_fail@plt+0x1c6c>
   15008:	mov	r0, r9
   1500c:	bl	1753c <__assert_fail@plt+0x6580>
   15010:	ldr	ip, [r5]
   15014:	mov	r3, fp
   15018:	mov	r2, sl
   1501c:	mov	r1, r9
   15020:	mov	r7, r0
   15024:	ldr	lr, [sp, #36]	; 0x24
   15028:	ldr	r4, [r5, #40]	; 0x28
   1502c:	str	r0, [lr, #4]
   15030:	ldr	lr, [r5, #44]	; 0x2c
   15034:	str	ip, [sp]
   15038:	ldr	ip, [sp, #44]	; 0x2c
   1503c:	str	ip, [sp, #4]
   15040:	ldr	ip, [sp, #40]	; 0x28
   15044:	str	r4, [sp, #12]
   15048:	str	lr, [sp, #16]
   1504c:	str	ip, [sp, #8]
   15050:	bl	134d4 <__assert_fail@plt+0x2518>
   15054:	ldr	r3, [sp, #28]
   15058:	mov	r0, r7
   1505c:	str	r3, [r8]
   15060:	add	sp, sp, #60	; 0x3c
   15064:	ldrd	r4, [sp]
   15068:	ldrd	r6, [sp, #8]
   1506c:	ldrd	r8, [sp, #16]
   15070:	ldrd	sl, [sp, #24]
   15074:	add	sp, sp, #32
   15078:	pop	{pc}		; (ldr pc, [sp], #4)
   1507c:	mov	r1, #8
   15080:	mvn	r3, #-2147483648	; 0x80000000
   15084:	str	r1, [sp]
   15088:	add	r1, sp, #52	; 0x34
   1508c:	bl	177e0 <__assert_fail@plt+0x6824>
   15090:	ldrd	r2, [r7, #8]
   15094:	mov	r6, r0
   15098:	str	r0, [r7]
   1509c:	strd	r2, [r0]
   150a0:	b	14f5c <__assert_fail@plt+0x3fa0>
   150a4:	bl	10fa4 <abort@plt>
   150a8:	strd	r4, [sp, #-16]!
   150ac:	mov	r5, r0
   150b0:	str	r6, [sp, #8]
   150b4:	str	lr, [sp, #12]
   150b8:	bl	10ef0 <__errno_location@plt>
   150bc:	mov	r4, r0
   150c0:	cmp	r5, #0
   150c4:	ldr	r0, [pc, #32]	; 150ec <__assert_fail@plt+0x4130>
   150c8:	mov	r1, #48	; 0x30
   150cc:	movne	r0, r5
   150d0:	ldr	r6, [r4]
   150d4:	bl	17980 <__assert_fail@plt+0x69c4>
   150d8:	str	r6, [r4]
   150dc:	ldrd	r4, [sp]
   150e0:	ldr	r6, [sp, #8]
   150e4:	add	sp, sp, #12
   150e8:	pop	{pc}		; (ldr pc, [sp], #4)
   150ec:	muleq	r2, ip, r2
   150f0:	ldr	r3, [pc, #12]	; 15104 <__assert_fail@plt+0x4148>
   150f4:	cmp	r0, #0
   150f8:	moveq	r0, r3
   150fc:	ldr	r0, [r0]
   15100:	bx	lr
   15104:	muleq	r2, ip, r2
   15108:	ldr	r3, [pc, #12]	; 1511c <__assert_fail@plt+0x4160>
   1510c:	cmp	r0, #0
   15110:	moveq	r0, r3
   15114:	str	r1, [r0]
   15118:	bx	lr
   1511c:	muleq	r2, ip, r2
   15120:	ldr	r3, [pc, #52]	; 1515c <__assert_fail@plt+0x41a0>
   15124:	cmp	r0, #0
   15128:	push	{lr}		; (str lr, [sp, #-4]!)
   1512c:	lsr	lr, r1, #5
   15130:	and	r1, r1, #31
   15134:	moveq	r0, r3
   15138:	add	r3, r0, #8
   1513c:	ldr	ip, [r3, lr, lsl #2]
   15140:	lsr	r0, ip, r1
   15144:	eor	r2, r2, r0
   15148:	and	r0, r0, #1
   1514c:	and	r2, r2, #1
   15150:	eor	r1, ip, r2, lsl r1
   15154:	str	r1, [r3, lr, lsl #2]
   15158:	pop	{pc}		; (ldr pc, [sp], #4)
   1515c:	muleq	r2, ip, r2
   15160:	ldr	r3, [pc, #16]	; 15178 <__assert_fail@plt+0x41bc>
   15164:	cmp	r0, #0
   15168:	movne	r3, r0
   1516c:	ldr	r0, [r3, #4]
   15170:	str	r1, [r3, #4]
   15174:	bx	lr
   15178:	muleq	r2, ip, r2
   1517c:	ldr	r3, [pc, #48]	; 151b4 <__assert_fail@plt+0x41f8>
   15180:	cmp	r0, #0
   15184:	mov	ip, #10
   15188:	moveq	r0, r3
   1518c:	cmp	r2, #0
   15190:	cmpne	r1, #0
   15194:	str	ip, [r0]
   15198:	beq	151a8 <__assert_fail@plt+0x41ec>
   1519c:	str	r1, [r0, #40]	; 0x28
   151a0:	str	r2, [r0, #44]	; 0x2c
   151a4:	bx	lr
   151a8:	str	r4, [sp, #-8]!
   151ac:	str	lr, [sp, #4]
   151b0:	bl	10fa4 <abort@plt>
   151b4:	muleq	r2, ip, r2
   151b8:	strd	r4, [sp, #-28]!	; 0xffffffe4
   151bc:	strd	r6, [sp, #8]
   151c0:	mov	r7, r0
   151c4:	mov	r6, r1
   151c8:	strd	r8, [sp, #16]
   151cc:	mov	r8, r2
   151d0:	mov	r9, r3
   151d4:	str	lr, [sp, #24]
   151d8:	sub	sp, sp, #28
   151dc:	ldr	r4, [sp, #56]	; 0x38
   151e0:	ldr	ip, [pc, #104]	; 15250 <__assert_fail@plt+0x4294>
   151e4:	cmp	r4, #0
   151e8:	moveq	r4, ip
   151ec:	bl	10ef0 <__errno_location@plt>
   151f0:	ldr	ip, [r4, #44]	; 0x2c
   151f4:	mov	r5, r0
   151f8:	mov	r1, r6
   151fc:	add	lr, r4, #8
   15200:	mov	r3, r9
   15204:	ldr	r6, [r5]
   15208:	mov	r2, r8
   1520c:	mov	r0, r7
   15210:	str	ip, [sp, #16]
   15214:	ldr	ip, [r4, #40]	; 0x28
   15218:	str	lr, [sp, #8]
   1521c:	str	ip, [sp, #12]
   15220:	ldr	ip, [r4, #4]
   15224:	str	ip, [sp, #4]
   15228:	ldr	ip, [r4]
   1522c:	str	ip, [sp]
   15230:	bl	134d4 <__assert_fail@plt+0x2518>
   15234:	str	r6, [r5]
   15238:	add	sp, sp, #28
   1523c:	ldrd	r4, [sp]
   15240:	ldrd	r6, [sp, #8]
   15244:	ldrd	r8, [sp, #16]
   15248:	add	sp, sp, #24
   1524c:	pop	{pc}		; (ldr pc, [sp], #4)
   15250:	muleq	r2, ip, r2
   15254:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15258:	cmp	r2, #0
   1525c:	ldr	r4, [pc, #192]	; 15324 <__assert_fail@plt+0x4368>
   15260:	movne	r4, r2
   15264:	strd	r6, [sp, #8]
   15268:	strd	r8, [sp, #16]
   1526c:	mov	r9, r1
   15270:	mov	r8, r0
   15274:	strd	sl, [sp, #24]
   15278:	str	lr, [sp, #32]
   1527c:	sub	sp, sp, #36	; 0x24
   15280:	bl	10ef0 <__errno_location@plt>
   15284:	ldr	r5, [r4, #4]
   15288:	mov	r6, r0
   1528c:	add	r7, r4, #8
   15290:	mov	r1, #0
   15294:	mov	r3, r9
   15298:	ldr	ip, [r4, #44]	; 0x2c
   1529c:	mov	r2, r8
   152a0:	mov	r0, r1
   152a4:	ldr	sl, [r6]
   152a8:	orr	r5, r5, #1
   152ac:	str	ip, [sp, #16]
   152b0:	ldr	ip, [r4, #40]	; 0x28
   152b4:	stmib	sp, {r5, r7, ip}
   152b8:	ldr	ip, [r4]
   152bc:	str	ip, [sp]
   152c0:	bl	134d4 <__assert_fail@plt+0x2518>
   152c4:	add	r1, r0, #1
   152c8:	mov	r0, r1
   152cc:	str	r1, [sp, #28]
   152d0:	bl	1753c <__assert_fail@plt+0x6580>
   152d4:	ldr	ip, [r4, #44]	; 0x2c
   152d8:	mov	fp, r0
   152dc:	mov	r3, r9
   152e0:	mov	r2, r8
   152e4:	ldr	r1, [sp, #28]
   152e8:	str	ip, [sp, #16]
   152ec:	ldr	ip, [r4, #40]	; 0x28
   152f0:	stmib	sp, {r5, r7, ip}
   152f4:	ldr	ip, [r4]
   152f8:	str	ip, [sp]
   152fc:	bl	134d4 <__assert_fail@plt+0x2518>
   15300:	mov	r0, fp
   15304:	str	sl, [r6]
   15308:	add	sp, sp, #36	; 0x24
   1530c:	ldrd	r4, [sp]
   15310:	ldrd	r6, [sp, #8]
   15314:	ldrd	r8, [sp, #16]
   15318:	ldrd	sl, [sp, #24]
   1531c:	add	sp, sp, #32
   15320:	pop	{pc}		; (ldr pc, [sp], #4)
   15324:	muleq	r2, ip, r2
   15328:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1532c:	cmp	r3, #0
   15330:	ldr	r4, [pc, #220]	; 15414 <__assert_fail@plt+0x4458>
   15334:	movne	r4, r3
   15338:	strd	r6, [sp, #8]
   1533c:	mov	r6, r2
   15340:	strd	r8, [sp, #16]
   15344:	mov	r9, r0
   15348:	strd	sl, [sp, #24]
   1534c:	mov	sl, r1
   15350:	str	lr, [sp, #32]
   15354:	sub	sp, sp, #44	; 0x2c
   15358:	bl	10ef0 <__errno_location@plt>
   1535c:	ldr	r5, [r4, #4]
   15360:	mov	r7, r0
   15364:	mov	r1, #0
   15368:	add	r8, r4, #8
   1536c:	mov	r3, sl
   15370:	ldr	ip, [r4, #44]	; 0x2c
   15374:	mov	r2, r9
   15378:	mov	r0, r1
   1537c:	ldr	lr, [r7]
   15380:	cmp	r6, r1
   15384:	orreq	r5, r5, #1
   15388:	str	ip, [sp, #16]
   1538c:	ldr	ip, [r4, #40]	; 0x28
   15390:	stmib	sp, {r5, r8, ip}
   15394:	ldr	ip, [r4]
   15398:	str	lr, [sp, #28]
   1539c:	str	ip, [sp]
   153a0:	bl	134d4 <__assert_fail@plt+0x2518>
   153a4:	add	r1, r0, #1
   153a8:	mov	fp, r0
   153ac:	mov	r0, r1
   153b0:	str	r1, [sp, #36]	; 0x24
   153b4:	bl	1753c <__assert_fail@plt+0x6580>
   153b8:	ldr	ip, [r4, #44]	; 0x2c
   153bc:	mov	r3, sl
   153c0:	mov	r2, r9
   153c4:	ldr	r1, [sp, #36]	; 0x24
   153c8:	str	ip, [sp, #16]
   153cc:	ldr	ip, [r4, #40]	; 0x28
   153d0:	str	r0, [sp, #32]
   153d4:	stmib	sp, {r5, r8, ip}
   153d8:	ldr	ip, [r4]
   153dc:	str	ip, [sp]
   153e0:	bl	134d4 <__assert_fail@plt+0x2518>
   153e4:	ldr	lr, [sp, #28]
   153e8:	cmp	r6, #0
   153ec:	ldr	r0, [sp, #32]
   153f0:	str	lr, [r7]
   153f4:	strne	fp, [r6]
   153f8:	add	sp, sp, #44	; 0x2c
   153fc:	ldrd	r4, [sp]
   15400:	ldrd	r6, [sp, #8]
   15404:	ldrd	r8, [sp, #16]
   15408:	ldrd	sl, [sp, #24]
   1540c:	add	sp, sp, #32
   15410:	pop	{pc}		; (ldr pc, [sp], #4)
   15414:	muleq	r2, ip, r2
   15418:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1541c:	movw	r5, #41220	; 0xa104
   15420:	movt	r5, #2
   15424:	ldr	r3, [r5, #4]
   15428:	strd	r6, [sp, #8]
   1542c:	str	r8, [sp, #16]
   15430:	str	lr, [sp, #20]
   15434:	ldr	r7, [r5]
   15438:	cmp	r3, #1
   1543c:	ble	15460 <__assert_fail@plt+0x44a4>
   15440:	mov	r4, #1
   15444:	add	r6, r7, #4
   15448:	ldr	r0, [r6, r4, lsl #3]
   1544c:	add	r4, r4, #1
   15450:	bl	12c28 <__assert_fail@plt+0x1c6c>
   15454:	ldr	r3, [r5, #4]
   15458:	cmp	r3, r4
   1545c:	bgt	15448 <__assert_fail@plt+0x448c>
   15460:	ldr	r0, [r7, #4]
   15464:	movw	r4, #41372	; 0xa19c
   15468:	movt	r4, #2
   1546c:	cmp	r0, r4
   15470:	beq	15484 <__assert_fail@plt+0x44c8>
   15474:	bl	12c28 <__assert_fail@plt+0x1c6c>
   15478:	mov	r3, #256	; 0x100
   1547c:	str	r3, [r5, #8]
   15480:	str	r4, [r5, #12]
   15484:	ldr	r4, [pc, #44]	; 154b8 <__assert_fail@plt+0x44fc>
   15488:	cmp	r7, r4
   1548c:	beq	1549c <__assert_fail@plt+0x44e0>
   15490:	mov	r0, r7
   15494:	bl	12c28 <__assert_fail@plt+0x1c6c>
   15498:	str	r4, [r5]
   1549c:	mov	r3, #1
   154a0:	ldrd	r6, [sp, #8]
   154a4:	str	r3, [r5, #4]
   154a8:	ldrd	r4, [sp]
   154ac:	ldr	r8, [sp, #16]
   154b0:	add	sp, sp, #20
   154b4:	pop	{pc}		; (ldr pc, [sp], #4)
   154b8:	andeq	sl, r2, ip, lsl #2
   154bc:	ldr	r3, [pc, #4]	; 154c8 <__assert_fail@plt+0x450c>
   154c0:	mvn	r2, #0
   154c4:	b	14ec0 <__assert_fail@plt+0x3f04>
   154c8:	muleq	r2, ip, r2
   154cc:	ldr	r3, [pc]	; 154d4 <__assert_fail@plt+0x4518>
   154d0:	b	14ec0 <__assert_fail@plt+0x3f04>
   154d4:	muleq	r2, ip, r2
   154d8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   154dc:	movw	r4, #41220	; 0xa104
   154e0:	movt	r4, #2
   154e4:	strd	r6, [sp, #8]
   154e8:	strd	r8, [sp, #16]
   154ec:	strd	sl, [sp, #24]
   154f0:	mov	sl, r0
   154f4:	str	lr, [sp, #32]
   154f8:	sub	sp, sp, #44	; 0x2c
   154fc:	bl	10ef0 <__errno_location@plt>
   15500:	ldr	r3, [r0]
   15504:	mov	r8, r0
   15508:	ldr	r2, [r4, #4]
   1550c:	ldr	r5, [r4]
   15510:	str	r3, [sp, #28]
   15514:	cmp	r2, #0
   15518:	bgt	15574 <__assert_fail@plt+0x45b8>
   1551c:	add	r3, r4, #8
   15520:	str	r2, [sp, #36]	; 0x24
   15524:	rsb	r2, r2, #1
   15528:	cmp	r5, r3
   1552c:	beq	15640 <__assert_fail@plt+0x4684>
   15530:	mov	r1, #8
   15534:	mov	r0, r5
   15538:	mvn	r3, #-2147483648	; 0x80000000
   1553c:	str	r1, [sp]
   15540:	add	r1, sp, #36	; 0x24
   15544:	bl	177e0 <__assert_fail@plt+0x6824>
   15548:	mov	r5, r0
   1554c:	str	r0, [r4]
   15550:	ldr	r0, [r4, #4]
   15554:	mov	r1, #0
   15558:	ldr	r2, [sp, #36]	; 0x24
   1555c:	sub	r2, r2, r0
   15560:	add	r0, r5, r0, lsl #3
   15564:	lsl	r2, r2, #3
   15568:	bl	10f08 <memset@plt>
   1556c:	ldr	r3, [sp, #36]	; 0x24
   15570:	str	r3, [r4, #4]
   15574:	movw	r4, #41372	; 0xa19c
   15578:	movt	r4, #2
   1557c:	ldr	r9, [r5]
   15580:	add	fp, r4, #264	; 0x108
   15584:	mvn	r3, #0
   15588:	ldr	r7, [r4, #260]	; 0x104
   1558c:	mov	r2, sl
   15590:	ldr	r6, [r5, #4]
   15594:	str	fp, [sp, #8]
   15598:	mov	r1, r9
   1559c:	ldr	ip, [r4, #256]	; 0x100
   155a0:	orr	r7, r7, #1
   155a4:	ldr	lr, [r4, #300]	; 0x12c
   155a8:	mov	r0, r6
   155ac:	str	ip, [sp]
   155b0:	str	r7, [sp, #4]
   155b4:	str	lr, [sp, #16]
   155b8:	ldr	ip, [r4, #296]	; 0x128
   155bc:	str	ip, [sp, #12]
   155c0:	bl	134d4 <__assert_fail@plt+0x2518>
   155c4:	cmp	r9, r0
   155c8:	bhi	15618 <__assert_fail@plt+0x465c>
   155cc:	add	r9, r0, #1
   155d0:	cmp	r6, r4
   155d4:	str	r9, [r5]
   155d8:	beq	155e4 <__assert_fail@plt+0x4628>
   155dc:	mov	r0, r6
   155e0:	bl	12c28 <__assert_fail@plt+0x1c6c>
   155e4:	mov	r0, r9
   155e8:	bl	1753c <__assert_fail@plt+0x6580>
   155ec:	ldr	r3, [r4, #256]	; 0x100
   155f0:	mov	r2, sl
   155f4:	mov	r1, r9
   155f8:	mov	r6, r0
   155fc:	ldr	lr, [r4, #296]	; 0x128
   15600:	ldr	ip, [r4, #300]	; 0x12c
   15604:	str	r0, [r5, #4]
   15608:	stm	sp, {r3, r7, fp, lr}
   1560c:	mvn	r3, #0
   15610:	str	ip, [sp, #16]
   15614:	bl	134d4 <__assert_fail@plt+0x2518>
   15618:	ldr	r3, [sp, #28]
   1561c:	mov	r0, r6
   15620:	str	r3, [r8]
   15624:	add	sp, sp, #44	; 0x2c
   15628:	ldrd	r4, [sp]
   1562c:	ldrd	r6, [sp, #8]
   15630:	ldrd	r8, [sp, #16]
   15634:	ldrd	sl, [sp, #24]
   15638:	add	sp, sp, #32
   1563c:	pop	{pc}		; (ldr pc, [sp], #4)
   15640:	mov	r0, #8
   15644:	mvn	r3, #-2147483648	; 0x80000000
   15648:	add	r1, sp, #36	; 0x24
   1564c:	str	r0, [sp]
   15650:	mov	r0, #0
   15654:	bl	177e0 <__assert_fail@plt+0x6824>
   15658:	ldrd	r2, [r4, #8]
   1565c:	mov	r5, r0
   15660:	str	r0, [r4]
   15664:	strd	r2, [r0]
   15668:	b	15550 <__assert_fail@plt+0x4594>
   1566c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15670:	movw	r4, #41220	; 0xa104
   15674:	movt	r4, #2
   15678:	strd	r6, [sp, #8]
   1567c:	strd	r8, [sp, #16]
   15680:	strd	sl, [sp, #24]
   15684:	mov	sl, r0
   15688:	mov	fp, r1
   1568c:	str	lr, [sp, #32]
   15690:	sub	sp, sp, #44	; 0x2c
   15694:	bl	10ef0 <__errno_location@plt>
   15698:	ldr	r3, [r0]
   1569c:	mov	r8, r0
   156a0:	ldr	r2, [r4, #4]
   156a4:	ldr	r5, [r4]
   156a8:	str	r3, [sp, #28]
   156ac:	cmp	r2, #0
   156b0:	bgt	1570c <__assert_fail@plt+0x4750>
   156b4:	add	r3, r4, #8
   156b8:	str	r2, [sp, #36]	; 0x24
   156bc:	rsb	r2, r2, #1
   156c0:	cmp	r5, r3
   156c4:	beq	157e8 <__assert_fail@plt+0x482c>
   156c8:	mov	r1, #8
   156cc:	mov	r0, r5
   156d0:	mvn	r3, #-2147483648	; 0x80000000
   156d4:	str	r1, [sp]
   156d8:	add	r1, sp, #36	; 0x24
   156dc:	bl	177e0 <__assert_fail@plt+0x6824>
   156e0:	mov	r5, r0
   156e4:	str	r0, [r4]
   156e8:	ldr	r0, [r4, #4]
   156ec:	mov	r1, #0
   156f0:	ldr	r2, [sp, #36]	; 0x24
   156f4:	sub	r2, r2, r0
   156f8:	add	r0, r5, r0, lsl #3
   156fc:	lsl	r2, r2, #3
   15700:	bl	10f08 <memset@plt>
   15704:	ldr	r3, [sp, #36]	; 0x24
   15708:	str	r3, [r4, #4]
   1570c:	movw	r4, #41372	; 0xa19c
   15710:	movt	r4, #2
   15714:	ldr	r9, [r5]
   15718:	add	r0, r4, #264	; 0x108
   1571c:	mov	r3, fp
   15720:	ldr	r7, [r4, #260]	; 0x104
   15724:	mov	r2, sl
   15728:	ldr	r6, [r5, #4]
   1572c:	str	r0, [sp, #8]
   15730:	mov	r1, r9
   15734:	ldr	ip, [r4, #256]	; 0x100
   15738:	orr	r7, r7, #1
   1573c:	ldr	lr, [r4, #300]	; 0x12c
   15740:	mov	r0, r6
   15744:	str	ip, [sp]
   15748:	str	r7, [sp, #4]
   1574c:	str	lr, [sp, #16]
   15750:	ldr	ip, [r4, #296]	; 0x128
   15754:	str	ip, [sp, #12]
   15758:	bl	134d4 <__assert_fail@plt+0x2518>
   1575c:	cmp	r9, r0
   15760:	bhi	157c0 <__assert_fail@plt+0x4804>
   15764:	add	r9, r0, #1
   15768:	cmp	r6, r4
   1576c:	str	r9, [r5]
   15770:	beq	1577c <__assert_fail@plt+0x47c0>
   15774:	mov	r0, r6
   15778:	bl	12c28 <__assert_fail@plt+0x1c6c>
   1577c:	mov	r0, r9
   15780:	bl	1753c <__assert_fail@plt+0x6580>
   15784:	ldr	ip, [r4, #256]	; 0x100
   15788:	mov	r1, r9
   1578c:	mov	r3, fp
   15790:	mov	r2, sl
   15794:	mov	r6, r0
   15798:	ldr	r9, [r4, #296]	; 0x128
   1579c:	ldr	lr, [r4, #300]	; 0x12c
   157a0:	str	r0, [r5, #4]
   157a4:	str	ip, [sp]
   157a8:	ldr	ip, [pc, #100]	; 15814 <__assert_fail@plt+0x4858>
   157ac:	str	r7, [sp, #4]
   157b0:	str	ip, [sp, #8]
   157b4:	str	r9, [sp, #12]
   157b8:	str	lr, [sp, #16]
   157bc:	bl	134d4 <__assert_fail@plt+0x2518>
   157c0:	ldr	r3, [sp, #28]
   157c4:	mov	r0, r6
   157c8:	str	r3, [r8]
   157cc:	add	sp, sp, #44	; 0x2c
   157d0:	ldrd	r4, [sp]
   157d4:	ldrd	r6, [sp, #8]
   157d8:	ldrd	r8, [sp, #16]
   157dc:	ldrd	sl, [sp, #24]
   157e0:	add	sp, sp, #32
   157e4:	pop	{pc}		; (ldr pc, [sp], #4)
   157e8:	mov	r0, #8
   157ec:	mvn	r3, #-2147483648	; 0x80000000
   157f0:	add	r1, sp, #36	; 0x24
   157f4:	str	r0, [sp]
   157f8:	mov	r0, #0
   157fc:	bl	177e0 <__assert_fail@plt+0x6824>
   15800:	ldrd	r2, [r4, #8]
   15804:	mov	r5, r0
   15808:	str	r0, [r4]
   1580c:	strd	r2, [r0]
   15810:	b	156e8 <__assert_fail@plt+0x472c>
   15814:	andeq	sl, r2, r4, lsr #5
   15818:	strd	r4, [sp, #-20]!	; 0xffffffec
   1581c:	mov	r4, #0
   15820:	mov	r5, #0
   15824:	strd	r6, [sp, #8]
   15828:	cmp	r1, #10
   1582c:	str	lr, [sp, #16]
   15830:	sub	sp, sp, #100	; 0x64
   15834:	strd	r4, [sp, #48]	; 0x30
   15838:	beq	15880 <__assert_fail@plt+0x48c4>
   1583c:	mov	r3, sp
   15840:	strd	r4, [sp, #8]
   15844:	str	r1, [sp, #48]	; 0x30
   15848:	mov	r1, r2
   1584c:	mvn	r2, #0
   15850:	ldrd	r6, [sp, #48]	; 0x30
   15854:	strd	r6, [sp]
   15858:	strd	r4, [sp, #16]
   1585c:	strd	r4, [sp, #24]
   15860:	strd	r4, [sp, #32]
   15864:	strd	r4, [sp, #40]	; 0x28
   15868:	bl	14ec0 <__assert_fail@plt+0x3f04>
   1586c:	add	sp, sp, #100	; 0x64
   15870:	ldrd	r4, [sp]
   15874:	ldrd	r6, [sp, #8]
   15878:	add	sp, sp, #16
   1587c:	pop	{pc}		; (ldr pc, [sp], #4)
   15880:	bl	10fa4 <abort@plt>
   15884:	strd	r4, [sp, #-20]!	; 0xffffffec
   15888:	mov	r4, #0
   1588c:	mov	r5, #0
   15890:	strd	r6, [sp, #8]
   15894:	cmp	r1, #10
   15898:	str	lr, [sp, #16]
   1589c:	sub	sp, sp, #100	; 0x64
   158a0:	strd	r4, [sp, #48]	; 0x30
   158a4:	beq	158f0 <__assert_fail@plt+0x4934>
   158a8:	mov	ip, r2
   158ac:	mov	r2, r3
   158b0:	strd	r4, [sp, #8]
   158b4:	str	r1, [sp, #48]	; 0x30
   158b8:	mov	r3, sp
   158bc:	mov	r1, ip
   158c0:	ldrd	r6, [sp, #48]	; 0x30
   158c4:	strd	r6, [sp]
   158c8:	strd	r4, [sp, #16]
   158cc:	strd	r4, [sp, #24]
   158d0:	strd	r4, [sp, #32]
   158d4:	strd	r4, [sp, #40]	; 0x28
   158d8:	bl	14ec0 <__assert_fail@plt+0x3f04>
   158dc:	add	sp, sp, #100	; 0x64
   158e0:	ldrd	r4, [sp]
   158e4:	ldrd	r6, [sp, #8]
   158e8:	add	sp, sp, #16
   158ec:	pop	{pc}		; (ldr pc, [sp], #4)
   158f0:	bl	10fa4 <abort@plt>
   158f4:	mov	r2, #0
   158f8:	mov	r3, #0
   158fc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15900:	strd	r6, [sp, #8]
   15904:	cmp	r0, #10
   15908:	strd	r8, [sp, #16]
   1590c:	strd	sl, [sp, #24]
   15910:	str	lr, [sp, #32]
   15914:	sub	sp, sp, #124	; 0x7c
   15918:	strd	r2, [sp, #72]	; 0x48
   1591c:	strd	r2, [sp, #80]	; 0x50
   15920:	strd	r2, [sp, #88]	; 0x58
   15924:	strd	r2, [sp, #96]	; 0x60
   15928:	strd	r2, [sp, #104]	; 0x68
   1592c:	strd	r2, [sp, #112]	; 0x70
   15930:	beq	15ad4 <__assert_fail@plt+0x4b18>
   15934:	mov	r6, r1
   15938:	movw	r4, #41220	; 0xa104
   1593c:	movt	r4, #2
   15940:	str	r0, [sp, #72]	; 0x48
   15944:	ldrd	r0, [sp, #72]	; 0x48
   15948:	strd	r0, [sp, #24]
   1594c:	strd	r2, [sp, #32]
   15950:	strd	r2, [sp, #40]	; 0x28
   15954:	strd	r2, [sp, #48]	; 0x30
   15958:	strd	r2, [sp, #56]	; 0x38
   1595c:	strd	r2, [sp, #64]	; 0x40
   15960:	bl	10ef0 <__errno_location@plt>
   15964:	mov	r8, r0
   15968:	ldr	r5, [r4]
   1596c:	ldr	r2, [r4, #4]
   15970:	ldr	r9, [r0]
   15974:	cmp	r2, #0
   15978:	bgt	159d4 <__assert_fail@plt+0x4a18>
   1597c:	add	r3, r4, #8
   15980:	str	r2, [sp, #72]	; 0x48
   15984:	rsb	r2, r2, #1
   15988:	cmp	r5, r3
   1598c:	beq	15aa8 <__assert_fail@plt+0x4aec>
   15990:	mov	r3, #8
   15994:	mov	r0, r5
   15998:	add	r1, sp, #72	; 0x48
   1599c:	str	r3, [sp]
   159a0:	mvn	r3, #-2147483648	; 0x80000000
   159a4:	bl	177e0 <__assert_fail@plt+0x6824>
   159a8:	mov	r5, r0
   159ac:	str	r0, [r4]
   159b0:	ldr	r0, [r4, #4]
   159b4:	mov	r1, #0
   159b8:	ldr	r2, [sp, #72]	; 0x48
   159bc:	sub	r2, r2, r0
   159c0:	add	r0, r5, r0, lsl #3
   159c4:	lsl	r2, r2, #3
   159c8:	bl	10f08 <memset@plt>
   159cc:	ldr	r3, [sp, #72]	; 0x48
   159d0:	str	r3, [r4, #4]
   159d4:	ldr	sl, [r5]
   159d8:	add	r0, sp, #32
   159dc:	mvn	r3, #0
   159e0:	mov	r2, r6
   159e4:	ldr	r7, [sp, #28]
   159e8:	ldr	r4, [r5, #4]
   159ec:	mov	r1, sl
   159f0:	str	r0, [sp, #8]
   159f4:	ldr	lr, [sp, #24]
   159f8:	orr	r7, r7, #1
   159fc:	ldr	ip, [sp, #64]	; 0x40
   15a00:	mov	r0, r4
   15a04:	ldr	fp, [sp, #68]	; 0x44
   15a08:	str	lr, [sp]
   15a0c:	str	r7, [sp, #4]
   15a10:	str	ip, [sp, #12]
   15a14:	str	fp, [sp, #16]
   15a18:	bl	134d4 <__assert_fail@plt+0x2518>
   15a1c:	cmp	sl, r0
   15a20:	bhi	15a84 <__assert_fail@plt+0x4ac8>
   15a24:	add	sl, r0, #1
   15a28:	movw	r3, #41372	; 0xa19c
   15a2c:	movt	r3, #2
   15a30:	cmp	r4, r3
   15a34:	str	sl, [r5]
   15a38:	beq	15a44 <__assert_fail@plt+0x4a88>
   15a3c:	mov	r0, r4
   15a40:	bl	12c28 <__assert_fail@plt+0x1c6c>
   15a44:	mov	r0, sl
   15a48:	bl	1753c <__assert_fail@plt+0x6580>
   15a4c:	ldr	r3, [sp, #24]
   15a50:	mov	r2, r6
   15a54:	mov	r1, sl
   15a58:	mov	r4, r0
   15a5c:	ldr	lr, [sp, #64]	; 0x40
   15a60:	ldr	ip, [sp, #68]	; 0x44
   15a64:	str	r0, [r5, #4]
   15a68:	add	r5, sp, #32
   15a6c:	stm	sp, {r3, r7}
   15a70:	mvn	r3, #0
   15a74:	str	r5, [sp, #8]
   15a78:	str	lr, [sp, #12]
   15a7c:	str	ip, [sp, #16]
   15a80:	bl	134d4 <__assert_fail@plt+0x2518>
   15a84:	mov	r0, r4
   15a88:	str	r9, [r8]
   15a8c:	add	sp, sp, #124	; 0x7c
   15a90:	ldrd	r4, [sp]
   15a94:	ldrd	r6, [sp, #8]
   15a98:	ldrd	r8, [sp, #16]
   15a9c:	ldrd	sl, [sp, #24]
   15aa0:	add	sp, sp, #32
   15aa4:	pop	{pc}		; (ldr pc, [sp], #4)
   15aa8:	mov	r0, #8
   15aac:	mvn	r3, #-2147483648	; 0x80000000
   15ab0:	add	r1, sp, #72	; 0x48
   15ab4:	str	r0, [sp]
   15ab8:	mov	r0, #0
   15abc:	bl	177e0 <__assert_fail@plt+0x6824>
   15ac0:	ldrd	r2, [r4, #8]
   15ac4:	mov	r5, r0
   15ac8:	str	r0, [r4]
   15acc:	strd	r2, [r0]
   15ad0:	b	159b0 <__assert_fail@plt+0x49f4>
   15ad4:	bl	10fa4 <abort@plt>
   15ad8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15adc:	cmp	r0, #10
   15ae0:	strd	r6, [sp, #8]
   15ae4:	mov	r6, #0
   15ae8:	mov	r7, #0
   15aec:	strd	r8, [sp, #16]
   15af0:	strd	sl, [sp, #24]
   15af4:	str	lr, [sp, #32]
   15af8:	sub	sp, sp, #124	; 0x7c
   15afc:	strd	r6, [sp, #72]	; 0x48
   15b00:	strd	r6, [sp, #80]	; 0x50
   15b04:	strd	r6, [sp, #88]	; 0x58
   15b08:	strd	r6, [sp, #96]	; 0x60
   15b0c:	strd	r6, [sp, #104]	; 0x68
   15b10:	strd	r6, [sp, #112]	; 0x70
   15b14:	beq	15cc0 <__assert_fail@plt+0x4d04>
   15b18:	mov	sl, r2
   15b1c:	movw	r5, #41220	; 0xa104
   15b20:	movt	r5, #2
   15b24:	str	r0, [sp, #72]	; 0x48
   15b28:	mov	r9, r1
   15b2c:	ldrd	r2, [sp, #72]	; 0x48
   15b30:	strd	r2, [sp, #24]
   15b34:	strd	r6, [sp, #32]
   15b38:	strd	r6, [sp, #40]	; 0x28
   15b3c:	strd	r6, [sp, #48]	; 0x30
   15b40:	strd	r6, [sp, #56]	; 0x38
   15b44:	strd	r6, [sp, #64]	; 0x40
   15b48:	bl	10ef0 <__errno_location@plt>
   15b4c:	mov	r7, r0
   15b50:	ldr	r4, [r5]
   15b54:	ldr	r2, [r5, #4]
   15b58:	ldr	fp, [r0]
   15b5c:	cmp	r2, #0
   15b60:	bgt	15bbc <__assert_fail@plt+0x4c00>
   15b64:	add	r3, r5, #8
   15b68:	str	r2, [sp, #72]	; 0x48
   15b6c:	rsb	r2, r2, #1
   15b70:	cmp	r4, r3
   15b74:	beq	15c94 <__assert_fail@plt+0x4cd8>
   15b78:	mov	r3, #8
   15b7c:	mov	r0, r4
   15b80:	add	r1, sp, #72	; 0x48
   15b84:	str	r3, [sp]
   15b88:	mvn	r3, #-2147483648	; 0x80000000
   15b8c:	bl	177e0 <__assert_fail@plt+0x6824>
   15b90:	mov	r4, r0
   15b94:	str	r0, [r5]
   15b98:	ldr	r0, [r5, #4]
   15b9c:	mov	r1, #0
   15ba0:	ldr	r2, [sp, #72]	; 0x48
   15ba4:	sub	r2, r2, r0
   15ba8:	add	r0, r4, r0, lsl #3
   15bac:	lsl	r2, r2, #3
   15bb0:	bl	10f08 <memset@plt>
   15bb4:	ldr	r3, [sp, #72]	; 0x48
   15bb8:	str	r3, [r5, #4]
   15bbc:	ldr	ip, [sp, #24]
   15bc0:	add	r0, sp, #32
   15bc4:	mov	r3, sl
   15bc8:	mov	r2, r9
   15bcc:	ldr	r6, [sp, #28]
   15bd0:	ldr	r8, [r4]
   15bd4:	ldr	r5, [r4, #4]
   15bd8:	str	ip, [sp]
   15bdc:	orr	r6, r6, #1
   15be0:	ldr	ip, [sp, #64]	; 0x40
   15be4:	mov	r1, r8
   15be8:	str	r6, [sp, #4]
   15bec:	ldr	lr, [sp, #68]	; 0x44
   15bf0:	str	r0, [sp, #8]
   15bf4:	mov	r0, r5
   15bf8:	str	ip, [sp, #12]
   15bfc:	str	lr, [sp, #16]
   15c00:	bl	134d4 <__assert_fail@plt+0x2518>
   15c04:	cmp	r8, r0
   15c08:	bhi	15c70 <__assert_fail@plt+0x4cb4>
   15c0c:	add	r8, r0, #1
   15c10:	movw	r3, #41372	; 0xa19c
   15c14:	movt	r3, #2
   15c18:	cmp	r5, r3
   15c1c:	str	r8, [r4]
   15c20:	beq	15c2c <__assert_fail@plt+0x4c70>
   15c24:	mov	r0, r5
   15c28:	bl	12c28 <__assert_fail@plt+0x1c6c>
   15c2c:	mov	r0, r8
   15c30:	bl	1753c <__assert_fail@plt+0x6580>
   15c34:	ldr	lr, [sp, #24]
   15c38:	mov	r1, r8
   15c3c:	mov	r3, sl
   15c40:	mov	r2, r9
   15c44:	mov	r5, r0
   15c48:	ldr	r8, [sp, #64]	; 0x40
   15c4c:	ldr	ip, [sp, #68]	; 0x44
   15c50:	str	r0, [r4, #4]
   15c54:	str	lr, [sp]
   15c58:	add	lr, sp, #32
   15c5c:	str	r6, [sp, #4]
   15c60:	str	lr, [sp, #8]
   15c64:	str	r8, [sp, #12]
   15c68:	str	ip, [sp, #16]
   15c6c:	bl	134d4 <__assert_fail@plt+0x2518>
   15c70:	mov	r0, r5
   15c74:	str	fp, [r7]
   15c78:	add	sp, sp, #124	; 0x7c
   15c7c:	ldrd	r4, [sp]
   15c80:	ldrd	r6, [sp, #8]
   15c84:	ldrd	r8, [sp, #16]
   15c88:	ldrd	sl, [sp, #24]
   15c8c:	add	sp, sp, #32
   15c90:	pop	{pc}		; (ldr pc, [sp], #4)
   15c94:	mov	r0, #8
   15c98:	mvn	r3, #-2147483648	; 0x80000000
   15c9c:	add	r1, sp, #72	; 0x48
   15ca0:	str	r0, [sp]
   15ca4:	mov	r0, #0
   15ca8:	bl	177e0 <__assert_fail@plt+0x6824>
   15cac:	ldrd	r2, [r5, #8]
   15cb0:	mov	r4, r0
   15cb4:	str	r0, [r5]
   15cb8:	strd	r2, [r0]
   15cbc:	b	15b98 <__assert_fail@plt+0x4bdc>
   15cc0:	bl	10fa4 <abort@plt>
   15cc4:	ldr	r3, [pc, #492]	; 15eb8 <__assert_fail@plt+0x4efc>
   15cc8:	lsr	ip, r2, #5
   15ccc:	and	r2, r2, #31
   15cd0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15cd4:	movw	r5, #41220	; 0xa104
   15cd8:	movt	r5, #2
   15cdc:	strd	r6, [sp, #8]
   15ce0:	strd	r8, [sp, #16]
   15ce4:	strd	sl, [sp, #24]
   15ce8:	mov	sl, r0
   15cec:	mov	fp, r1
   15cf0:	ldrd	r0, [r3]
   15cf4:	str	lr, [sp, #32]
   15cf8:	sub	sp, sp, #92	; 0x5c
   15cfc:	ldrd	r8, [r3, #8]
   15d00:	add	r6, sp, #48	; 0x30
   15d04:	strd	r0, [sp, #40]	; 0x28
   15d08:	ldrd	r0, [r3, #16]
   15d0c:	strd	r8, [sp, #48]	; 0x30
   15d10:	ldrd	r8, [r3, #24]
   15d14:	strd	r0, [sp, #56]	; 0x38
   15d18:	ldrd	r0, [r3, #32]
   15d1c:	strd	r8, [sp, #64]	; 0x40
   15d20:	ldrd	r8, [r3, #40]	; 0x28
   15d24:	strd	r0, [sp, #72]	; 0x48
   15d28:	strd	r8, [sp, #80]	; 0x50
   15d2c:	ldr	r3, [r6, ip, lsl #2]
   15d30:	mvn	r1, r3, lsr r2
   15d34:	and	r1, r1, #1
   15d38:	eor	r2, r3, r1, lsl r2
   15d3c:	str	r2, [r6, ip, lsl #2]
   15d40:	bl	10ef0 <__errno_location@plt>
   15d44:	ldr	r3, [r0]
   15d48:	mov	r8, r0
   15d4c:	ldr	r2, [r5, #4]
   15d50:	ldr	r4, [r5]
   15d54:	str	r3, [sp, #28]
   15d58:	cmp	r2, #0
   15d5c:	bgt	15db8 <__assert_fail@plt+0x4dfc>
   15d60:	add	r3, r5, #8
   15d64:	str	r2, [sp, #36]	; 0x24
   15d68:	rsb	r2, r2, #1
   15d6c:	cmp	r4, r3
   15d70:	beq	15e8c <__assert_fail@plt+0x4ed0>
   15d74:	mov	r1, #8
   15d78:	mov	r0, r4
   15d7c:	mvn	r3, #-2147483648	; 0x80000000
   15d80:	str	r1, [sp]
   15d84:	add	r1, sp, #36	; 0x24
   15d88:	bl	177e0 <__assert_fail@plt+0x6824>
   15d8c:	mov	r4, r0
   15d90:	str	r0, [r5]
   15d94:	ldr	r0, [r5, #4]
   15d98:	mov	r1, #0
   15d9c:	ldr	r2, [sp, #36]	; 0x24
   15da0:	sub	r2, r2, r0
   15da4:	add	r0, r4, r0, lsl #3
   15da8:	lsl	r2, r2, #3
   15dac:	bl	10f08 <memset@plt>
   15db0:	ldr	r3, [sp, #36]	; 0x24
   15db4:	str	r3, [r5, #4]
   15db8:	ldr	ip, [sp, #40]	; 0x28
   15dbc:	mov	r3, fp
   15dc0:	mov	r2, sl
   15dc4:	ldr	r7, [sp, #44]	; 0x2c
   15dc8:	ldr	r9, [r4]
   15dcc:	ldr	r5, [r4, #4]
   15dd0:	str	ip, [sp]
   15dd4:	orr	r7, r7, #1
   15dd8:	ldr	ip, [sp, #80]	; 0x50
   15ddc:	mov	r1, r9
   15de0:	str	r7, [sp, #4]
   15de4:	ldr	lr, [sp, #84]	; 0x54
   15de8:	mov	r0, r5
   15dec:	str	r6, [sp, #8]
   15df0:	str	ip, [sp, #12]
   15df4:	str	lr, [sp, #16]
   15df8:	bl	134d4 <__assert_fail@plt+0x2518>
   15dfc:	cmp	r9, r0
   15e00:	bhi	15e64 <__assert_fail@plt+0x4ea8>
   15e04:	add	r9, r0, #1
   15e08:	movw	r3, #41372	; 0xa19c
   15e0c:	movt	r3, #2
   15e10:	cmp	r5, r3
   15e14:	str	r9, [r4]
   15e18:	beq	15e24 <__assert_fail@plt+0x4e68>
   15e1c:	mov	r0, r5
   15e20:	bl	12c28 <__assert_fail@plt+0x1c6c>
   15e24:	mov	r0, r9
   15e28:	bl	1753c <__assert_fail@plt+0x6580>
   15e2c:	mov	r1, r9
   15e30:	ldr	ip, [sp, #40]	; 0x28
   15e34:	mov	r3, fp
   15e38:	mov	r2, sl
   15e3c:	mov	r5, r0
   15e40:	ldr	r9, [sp, #80]	; 0x50
   15e44:	ldr	lr, [sp, #84]	; 0x54
   15e48:	str	r0, [r4, #4]
   15e4c:	str	ip, [sp]
   15e50:	str	r7, [sp, #4]
   15e54:	str	r6, [sp, #8]
   15e58:	str	r9, [sp, #12]
   15e5c:	str	lr, [sp, #16]
   15e60:	bl	134d4 <__assert_fail@plt+0x2518>
   15e64:	ldr	r3, [sp, #28]
   15e68:	mov	r0, r5
   15e6c:	str	r3, [r8]
   15e70:	add	sp, sp, #92	; 0x5c
   15e74:	ldrd	r4, [sp]
   15e78:	ldrd	r6, [sp, #8]
   15e7c:	ldrd	r8, [sp, #16]
   15e80:	ldrd	sl, [sp, #24]
   15e84:	add	sp, sp, #32
   15e88:	pop	{pc}		; (ldr pc, [sp], #4)
   15e8c:	mov	r0, #8
   15e90:	mvn	r3, #-2147483648	; 0x80000000
   15e94:	add	r1, sp, #36	; 0x24
   15e98:	str	r0, [sp]
   15e9c:	mov	r0, #0
   15ea0:	bl	177e0 <__assert_fail@plt+0x6824>
   15ea4:	ldrd	r2, [r5, #8]
   15ea8:	mov	r4, r0
   15eac:	str	r0, [r5]
   15eb0:	strd	r2, [r0]
   15eb4:	b	15d94 <__assert_fail@plt+0x4dd8>
   15eb8:	muleq	r2, ip, r2
   15ebc:	ldr	ip, [pc, #476]	; 160a0 <__assert_fail@plt+0x50e4>
   15ec0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15ec4:	movw	r4, #41220	; 0xa104
   15ec8:	movt	r4, #2
   15ecc:	ldrd	r2, [ip, #8]
   15ed0:	strd	r6, [sp, #8]
   15ed4:	lsr	r7, r1, #5
   15ed8:	mov	r6, r0
   15edc:	strd	r8, [sp, #16]
   15ee0:	str	lr, [sp, #32]
   15ee4:	and	lr, r1, #31
   15ee8:	ldrd	r0, [ip]
   15eec:	strd	sl, [sp, #24]
   15ef0:	sub	sp, sp, #84	; 0x54
   15ef4:	add	r5, sp, #40	; 0x28
   15ef8:	strd	r0, [sp, #32]
   15efc:	strd	r2, [sp, #40]	; 0x28
   15f00:	ldrd	r0, [ip, #16]
   15f04:	ldrd	r2, [ip, #24]
   15f08:	strd	r0, [sp, #48]	; 0x30
   15f0c:	ldrd	r0, [ip, #32]
   15f10:	strd	r2, [sp, #56]	; 0x38
   15f14:	ldrd	r2, [ip, #40]	; 0x28
   15f18:	strd	r0, [sp, #64]	; 0x40
   15f1c:	strd	r2, [sp, #72]	; 0x48
   15f20:	ldr	r1, [r5, r7, lsl #2]
   15f24:	mvn	r3, r1, lsr lr
   15f28:	and	r3, r3, #1
   15f2c:	eor	r1, r1, r3, lsl lr
   15f30:	str	r1, [r5, r7, lsl #2]
   15f34:	bl	10ef0 <__errno_location@plt>
   15f38:	mov	r9, r0
   15f3c:	ldr	sl, [r0]
   15f40:	ldr	r2, [r4, #4]
   15f44:	ldr	r7, [r4]
   15f48:	cmp	r2, #0
   15f4c:	bgt	15fa8 <__assert_fail@plt+0x4fec>
   15f50:	add	r3, r4, #8
   15f54:	str	r2, [sp, #28]
   15f58:	rsb	r2, r2, #1
   15f5c:	cmp	r7, r3
   15f60:	beq	16074 <__assert_fail@plt+0x50b8>
   15f64:	mov	r1, #8
   15f68:	mov	r0, r7
   15f6c:	mvn	r3, #-2147483648	; 0x80000000
   15f70:	str	r1, [sp]
   15f74:	add	r1, sp, #28
   15f78:	bl	177e0 <__assert_fail@plt+0x6824>
   15f7c:	mov	r7, r0
   15f80:	str	r0, [r4]
   15f84:	ldr	r0, [r4, #4]
   15f88:	mov	r1, #0
   15f8c:	ldr	r2, [sp, #28]
   15f90:	sub	r2, r2, r0
   15f94:	add	r0, r7, r0, lsl #3
   15f98:	lsl	r2, r2, #3
   15f9c:	bl	10f08 <memset@plt>
   15fa0:	ldr	r3, [sp, #28]
   15fa4:	str	r3, [r4, #4]
   15fa8:	ldr	ip, [sp, #32]
   15fac:	mvn	r3, #0
   15fb0:	mov	r2, r6
   15fb4:	ldr	r8, [sp, #36]	; 0x24
   15fb8:	ldr	fp, [r7]
   15fbc:	ldr	r4, [r7, #4]
   15fc0:	str	ip, [sp]
   15fc4:	orr	r8, r8, #1
   15fc8:	ldr	ip, [sp, #72]	; 0x48
   15fcc:	mov	r1, fp
   15fd0:	str	r8, [sp, #4]
   15fd4:	ldr	lr, [sp, #76]	; 0x4c
   15fd8:	mov	r0, r4
   15fdc:	str	r5, [sp, #8]
   15fe0:	str	ip, [sp, #12]
   15fe4:	str	lr, [sp, #16]
   15fe8:	bl	134d4 <__assert_fail@plt+0x2518>
   15fec:	cmp	fp, r0
   15ff0:	bhi	16050 <__assert_fail@plt+0x5094>
   15ff4:	add	fp, r0, #1
   15ff8:	movw	r3, #41372	; 0xa19c
   15ffc:	movt	r3, #2
   16000:	cmp	r4, r3
   16004:	str	fp, [r7]
   16008:	beq	16014 <__assert_fail@plt+0x5058>
   1600c:	mov	r0, r4
   16010:	bl	12c28 <__assert_fail@plt+0x1c6c>
   16014:	mov	r0, fp
   16018:	bl	1753c <__assert_fail@plt+0x6580>
   1601c:	ldr	r3, [sp, #32]
   16020:	mov	r2, r6
   16024:	mov	r1, fp
   16028:	mov	r4, r0
   1602c:	ldr	lr, [sp, #72]	; 0x48
   16030:	ldr	ip, [sp, #76]	; 0x4c
   16034:	str	r0, [r7, #4]
   16038:	stm	sp, {r3, r8}
   1603c:	mvn	r3, #0
   16040:	str	r5, [sp, #8]
   16044:	str	lr, [sp, #12]
   16048:	str	ip, [sp, #16]
   1604c:	bl	134d4 <__assert_fail@plt+0x2518>
   16050:	mov	r0, r4
   16054:	str	sl, [r9]
   16058:	add	sp, sp, #84	; 0x54
   1605c:	ldrd	r4, [sp]
   16060:	ldrd	r6, [sp, #8]
   16064:	ldrd	r8, [sp, #16]
   16068:	ldrd	sl, [sp, #24]
   1606c:	add	sp, sp, #32
   16070:	pop	{pc}		; (ldr pc, [sp], #4)
   16074:	mov	r0, #8
   16078:	mvn	r3, #-2147483648	; 0x80000000
   1607c:	add	r1, sp, #28
   16080:	str	r0, [sp]
   16084:	mov	r0, #0
   16088:	bl	177e0 <__assert_fail@plt+0x6824>
   1608c:	ldrd	r2, [r4, #8]
   16090:	mov	r7, r0
   16094:	str	r0, [r4]
   16098:	strd	r2, [r0]
   1609c:	b	15f84 <__assert_fail@plt+0x4fc8>
   160a0:	muleq	r2, ip, r2
   160a4:	ldr	ip, [pc, #472]	; 16284 <__assert_fail@plt+0x52c8>
   160a8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   160ac:	mov	r5, r0
   160b0:	movw	r4, #41220	; 0xa104
   160b4:	movt	r4, #2
   160b8:	ldrd	r2, [ip]
   160bc:	ldrd	r0, [ip, #8]
   160c0:	strd	r6, [sp, #8]
   160c4:	strd	r8, [sp, #16]
   160c8:	strd	sl, [sp, #24]
   160cc:	str	lr, [sp, #32]
   160d0:	sub	sp, sp, #84	; 0x54
   160d4:	strd	r2, [sp, #32]
   160d8:	strd	r0, [sp, #40]	; 0x28
   160dc:	ldr	r6, [sp, #44]	; 0x2c
   160e0:	ldrd	r2, [ip, #16]
   160e4:	ldrd	r0, [ip, #24]
   160e8:	mvn	lr, r6
   160ec:	and	lr, lr, #67108864	; 0x4000000
   160f0:	eor	lr, lr, r6
   160f4:	ldrd	r6, [ip, #40]	; 0x28
   160f8:	strd	r2, [sp, #48]	; 0x30
   160fc:	ldrd	r2, [ip, #32]
   16100:	str	lr, [sp, #44]	; 0x2c
   16104:	strd	r0, [sp, #56]	; 0x38
   16108:	strd	r2, [sp, #64]	; 0x40
   1610c:	strd	r6, [sp, #72]	; 0x48
   16110:	bl	10ef0 <__errno_location@plt>
   16114:	mov	r8, r0
   16118:	ldr	r9, [r0]
   1611c:	ldr	r2, [r4, #4]
   16120:	ldr	r6, [r4]
   16124:	cmp	r2, #0
   16128:	bgt	16184 <__assert_fail@plt+0x51c8>
   1612c:	add	r3, r4, #8
   16130:	str	r2, [sp, #28]
   16134:	rsb	r2, r2, #1
   16138:	cmp	r6, r3
   1613c:	beq	16258 <__assert_fail@plt+0x529c>
   16140:	mov	r1, #8
   16144:	mov	r0, r6
   16148:	mvn	r3, #-2147483648	; 0x80000000
   1614c:	str	r1, [sp]
   16150:	add	r1, sp, #28
   16154:	bl	177e0 <__assert_fail@plt+0x6824>
   16158:	mov	r6, r0
   1615c:	str	r0, [r4]
   16160:	ldr	r0, [r4, #4]
   16164:	mov	r1, #0
   16168:	ldr	r2, [sp, #28]
   1616c:	sub	r2, r2, r0
   16170:	add	r0, r6, r0, lsl #3
   16174:	lsl	r2, r2, #3
   16178:	bl	10f08 <memset@plt>
   1617c:	ldr	r3, [sp, #28]
   16180:	str	r3, [r4, #4]
   16184:	ldr	sl, [r6]
   16188:	add	r0, sp, #40	; 0x28
   1618c:	mvn	r3, #0
   16190:	mov	r2, r5
   16194:	ldr	r7, [sp, #36]	; 0x24
   16198:	ldr	r4, [r6, #4]
   1619c:	mov	r1, sl
   161a0:	str	r0, [sp, #8]
   161a4:	ldr	lr, [sp, #32]
   161a8:	orr	r7, r7, #1
   161ac:	ldr	ip, [sp, #72]	; 0x48
   161b0:	mov	r0, r4
   161b4:	ldr	fp, [sp, #76]	; 0x4c
   161b8:	str	lr, [sp]
   161bc:	str	r7, [sp, #4]
   161c0:	str	ip, [sp, #12]
   161c4:	str	fp, [sp, #16]
   161c8:	bl	134d4 <__assert_fail@plt+0x2518>
   161cc:	cmp	sl, r0
   161d0:	bhi	16234 <__assert_fail@plt+0x5278>
   161d4:	add	sl, r0, #1
   161d8:	movw	r3, #41372	; 0xa19c
   161dc:	movt	r3, #2
   161e0:	cmp	r4, r3
   161e4:	str	sl, [r6]
   161e8:	beq	161f4 <__assert_fail@plt+0x5238>
   161ec:	mov	r0, r4
   161f0:	bl	12c28 <__assert_fail@plt+0x1c6c>
   161f4:	mov	r0, sl
   161f8:	bl	1753c <__assert_fail@plt+0x6580>
   161fc:	ldr	r3, [sp, #32]
   16200:	mov	r2, r5
   16204:	add	r5, sp, #40	; 0x28
   16208:	mov	r1, sl
   1620c:	mov	r4, r0
   16210:	ldr	lr, [sp, #72]	; 0x48
   16214:	ldr	ip, [sp, #76]	; 0x4c
   16218:	str	r0, [r6, #4]
   1621c:	stm	sp, {r3, r7}
   16220:	mvn	r3, #0
   16224:	str	r5, [sp, #8]
   16228:	str	lr, [sp, #12]
   1622c:	str	ip, [sp, #16]
   16230:	bl	134d4 <__assert_fail@plt+0x2518>
   16234:	mov	r0, r4
   16238:	str	r9, [r8]
   1623c:	add	sp, sp, #84	; 0x54
   16240:	ldrd	r4, [sp]
   16244:	ldrd	r6, [sp, #8]
   16248:	ldrd	r8, [sp, #16]
   1624c:	ldrd	sl, [sp, #24]
   16250:	add	sp, sp, #32
   16254:	pop	{pc}		; (ldr pc, [sp], #4)
   16258:	mov	r0, #8
   1625c:	mvn	r3, #-2147483648	; 0x80000000
   16260:	add	r1, sp, #28
   16264:	str	r0, [sp]
   16268:	mov	r0, #0
   1626c:	bl	177e0 <__assert_fail@plt+0x6824>
   16270:	ldrd	r2, [r4, #8]
   16274:	mov	r6, r0
   16278:	str	r0, [r4]
   1627c:	strd	r2, [r0]
   16280:	b	16160 <__assert_fail@plt+0x51a4>
   16284:	muleq	r2, ip, r2
   16288:	ldr	ip, [pc, #480]	; 16470 <__assert_fail@plt+0x54b4>
   1628c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16290:	mov	r5, r0
   16294:	movw	r4, #41220	; 0xa104
   16298:	movt	r4, #2
   1629c:	ldrd	r2, [ip]
   162a0:	strd	r6, [sp, #8]
   162a4:	mov	r6, r1
   162a8:	ldrd	r0, [ip, #8]
   162ac:	strd	r8, [sp, #16]
   162b0:	strd	sl, [sp, #24]
   162b4:	str	lr, [sp, #32]
   162b8:	sub	sp, sp, #84	; 0x54
   162bc:	ldrd	r8, [ip, #40]	; 0x28
   162c0:	strd	r2, [sp, #32]
   162c4:	strd	r0, [sp, #40]	; 0x28
   162c8:	ldrd	r2, [ip, #16]
   162cc:	ldr	r7, [sp, #44]	; 0x2c
   162d0:	ldrd	r0, [ip, #24]
   162d4:	strd	r2, [sp, #48]	; 0x30
   162d8:	ldrd	r2, [ip, #32]
   162dc:	mvn	lr, r7
   162e0:	and	lr, lr, #67108864	; 0x4000000
   162e4:	eor	lr, lr, r7
   162e8:	str	lr, [sp, #44]	; 0x2c
   162ec:	strd	r0, [sp, #56]	; 0x38
   162f0:	strd	r2, [sp, #64]	; 0x40
   162f4:	strd	r8, [sp, #72]	; 0x48
   162f8:	bl	10ef0 <__errno_location@plt>
   162fc:	mov	r9, r0
   16300:	ldr	sl, [r0]
   16304:	ldr	r2, [r4, #4]
   16308:	ldr	r7, [r4]
   1630c:	cmp	r2, #0
   16310:	bgt	1636c <__assert_fail@plt+0x53b0>
   16314:	add	r3, r4, #8
   16318:	str	r2, [sp, #28]
   1631c:	rsb	r2, r2, #1
   16320:	cmp	r7, r3
   16324:	beq	16444 <__assert_fail@plt+0x5488>
   16328:	mov	r1, #8
   1632c:	mov	r0, r7
   16330:	mvn	r3, #-2147483648	; 0x80000000
   16334:	str	r1, [sp]
   16338:	add	r1, sp, #28
   1633c:	bl	177e0 <__assert_fail@plt+0x6824>
   16340:	mov	r7, r0
   16344:	str	r0, [r4]
   16348:	ldr	r0, [r4, #4]
   1634c:	mov	r1, #0
   16350:	ldr	r2, [sp, #28]
   16354:	sub	r2, r2, r0
   16358:	add	r0, r7, r0, lsl #3
   1635c:	lsl	r2, r2, #3
   16360:	bl	10f08 <memset@plt>
   16364:	ldr	r3, [sp, #28]
   16368:	str	r3, [r4, #4]
   1636c:	ldr	ip, [sp, #32]
   16370:	add	r0, sp, #40	; 0x28
   16374:	mov	r3, r6
   16378:	mov	r2, r5
   1637c:	ldr	r8, [sp, #36]	; 0x24
   16380:	ldr	fp, [r7]
   16384:	ldr	r4, [r7, #4]
   16388:	str	ip, [sp]
   1638c:	orr	r8, r8, #1
   16390:	ldr	ip, [sp, #72]	; 0x48
   16394:	mov	r1, fp
   16398:	str	r8, [sp, #4]
   1639c:	ldr	lr, [sp, #76]	; 0x4c
   163a0:	str	r0, [sp, #8]
   163a4:	mov	r0, r4
   163a8:	str	ip, [sp, #12]
   163ac:	str	lr, [sp, #16]
   163b0:	bl	134d4 <__assert_fail@plt+0x2518>
   163b4:	cmp	fp, r0
   163b8:	bhi	16420 <__assert_fail@plt+0x5464>
   163bc:	add	fp, r0, #1
   163c0:	movw	r3, #41372	; 0xa19c
   163c4:	movt	r3, #2
   163c8:	cmp	r4, r3
   163cc:	str	fp, [r7]
   163d0:	beq	163dc <__assert_fail@plt+0x5420>
   163d4:	mov	r0, r4
   163d8:	bl	12c28 <__assert_fail@plt+0x1c6c>
   163dc:	mov	r0, fp
   163e0:	bl	1753c <__assert_fail@plt+0x6580>
   163e4:	ldr	lr, [sp, #32]
   163e8:	mov	r2, r5
   163ec:	mov	r3, r6
   163f0:	mov	r1, fp
   163f4:	mov	r4, r0
   163f8:	ldr	r5, [sp, #72]	; 0x48
   163fc:	ldr	ip, [sp, #76]	; 0x4c
   16400:	str	r0, [r7, #4]
   16404:	str	lr, [sp]
   16408:	add	lr, sp, #40	; 0x28
   1640c:	str	r8, [sp, #4]
   16410:	str	lr, [sp, #8]
   16414:	str	r5, [sp, #12]
   16418:	str	ip, [sp, #16]
   1641c:	bl	134d4 <__assert_fail@plt+0x2518>
   16420:	mov	r0, r4
   16424:	str	sl, [r9]
   16428:	add	sp, sp, #84	; 0x54
   1642c:	ldrd	r4, [sp]
   16430:	ldrd	r6, [sp, #8]
   16434:	ldrd	r8, [sp, #16]
   16438:	ldrd	sl, [sp, #24]
   1643c:	add	sp, sp, #32
   16440:	pop	{pc}		; (ldr pc, [sp], #4)
   16444:	mov	r0, #8
   16448:	mvn	r3, #-2147483648	; 0x80000000
   1644c:	add	r1, sp, #28
   16450:	str	r0, [sp]
   16454:	mov	r0, #0
   16458:	bl	177e0 <__assert_fail@plt+0x6824>
   1645c:	ldrd	r2, [r4, #8]
   16460:	mov	r7, r0
   16464:	str	r0, [r4]
   16468:	strd	r2, [r0]
   1646c:	b	16348 <__assert_fail@plt+0x538c>
   16470:	muleq	r2, ip, r2
   16474:	strd	r4, [sp, #-12]!
   16478:	mov	r4, #0
   1647c:	mov	r5, #0
   16480:	str	lr, [sp, #8]
   16484:	sub	sp, sp, #100	; 0x64
   16488:	cmp	r1, #10
   1648c:	strd	r4, [sp]
   16490:	strd	r4, [sp, #8]
   16494:	strd	r4, [sp, #16]
   16498:	strd	r4, [sp, #24]
   1649c:	strd	r4, [sp, #32]
   164a0:	strd	r4, [sp, #40]	; 0x28
   164a4:	beq	164d4 <__assert_fail@plt+0x5518>
   164a8:	mov	ip, #67108864	; 0x4000000
   164ac:	mov	r3, sp
   164b0:	str	r1, [sp]
   164b4:	mov	r1, r2
   164b8:	mvn	r2, #0
   164bc:	str	ip, [sp, #12]
   164c0:	bl	14ec0 <__assert_fail@plt+0x3f04>
   164c4:	add	sp, sp, #100	; 0x64
   164c8:	ldrd	r4, [sp]
   164cc:	add	sp, sp, #8
   164d0:	pop	{pc}		; (ldr pc, [sp], #4)
   164d4:	bl	10fa4 <abort@plt>
   164d8:	ldr	ip, [pc, #156]	; 1657c <__assert_fail@plt+0x55c0>
   164dc:	cmp	r2, #0
   164e0:	cmpne	r1, #0
   164e4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   164e8:	strd	r6, [sp, #8]
   164ec:	mov	r6, r2
   164f0:	str	r8, [sp, #16]
   164f4:	mov	r8, r3
   164f8:	strd	sl, [sp, #20]
   164fc:	ldrd	r4, [ip]
   16500:	str	lr, [sp, #28]
   16504:	sub	sp, sp, #48	; 0x30
   16508:	mov	lr, #10
   1650c:	ldrd	r2, [ip, #8]
   16510:	ldrd	sl, [ip, #16]
   16514:	strd	r4, [sp]
   16518:	ldrd	r4, [ip, #32]
   1651c:	str	lr, [sp]
   16520:	strd	r2, [sp, #8]
   16524:	strd	sl, [sp, #16]
   16528:	ldrd	r2, [ip, #24]
   1652c:	ldrd	sl, [ip, #40]	; 0x28
   16530:	strd	r2, [sp, #24]
   16534:	strd	r4, [sp, #32]
   16538:	strd	sl, [sp, #40]	; 0x28
   1653c:	beq	16578 <__assert_fail@plt+0x55bc>
   16540:	mov	r7, r1
   16544:	mov	r3, sp
   16548:	mov	r1, r8
   1654c:	mvn	r2, #0
   16550:	str	r7, [sp, #40]	; 0x28
   16554:	str	r6, [sp, #44]	; 0x2c
   16558:	bl	14ec0 <__assert_fail@plt+0x3f04>
   1655c:	add	sp, sp, #48	; 0x30
   16560:	ldrd	r4, [sp]
   16564:	ldrd	r6, [sp, #8]
   16568:	ldr	r8, [sp, #16]
   1656c:	ldrd	sl, [sp, #20]
   16570:	add	sp, sp, #28
   16574:	pop	{pc}		; (ldr pc, [sp], #4)
   16578:	bl	10fa4 <abort@plt>
   1657c:	muleq	r2, ip, r2
   16580:	ldr	ip, [pc, #156]	; 16624 <__assert_fail@plt+0x5668>
   16584:	cmp	r2, #0
   16588:	cmpne	r1, #0
   1658c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   16590:	strd	r6, [sp, #8]
   16594:	mov	r6, r2
   16598:	str	r8, [sp, #16]
   1659c:	mov	r8, r3
   165a0:	strd	sl, [sp, #20]
   165a4:	ldrd	r4, [ip]
   165a8:	str	lr, [sp, #28]
   165ac:	sub	sp, sp, #48	; 0x30
   165b0:	mov	lr, #10
   165b4:	ldrd	r2, [ip, #8]
   165b8:	ldrd	sl, [ip, #16]
   165bc:	strd	r4, [sp]
   165c0:	ldrd	r4, [ip, #32]
   165c4:	str	lr, [sp]
   165c8:	strd	r2, [sp, #8]
   165cc:	strd	sl, [sp, #16]
   165d0:	ldrd	r2, [ip, #24]
   165d4:	ldrd	sl, [ip, #40]	; 0x28
   165d8:	strd	r2, [sp, #24]
   165dc:	strd	r4, [sp, #32]
   165e0:	strd	sl, [sp, #40]	; 0x28
   165e4:	beq	16620 <__assert_fail@plt+0x5664>
   165e8:	ldr	r2, [sp, #80]	; 0x50
   165ec:	mov	r7, r1
   165f0:	mov	r3, sp
   165f4:	mov	r1, r8
   165f8:	str	r7, [sp, #40]	; 0x28
   165fc:	str	r6, [sp, #44]	; 0x2c
   16600:	bl	14ec0 <__assert_fail@plt+0x3f04>
   16604:	add	sp, sp, #48	; 0x30
   16608:	ldrd	r4, [sp]
   1660c:	ldrd	r6, [sp, #8]
   16610:	ldr	r8, [sp, #16]
   16614:	ldrd	sl, [sp, #20]
   16618:	add	sp, sp, #28
   1661c:	pop	{pc}		; (ldr pc, [sp], #4)
   16620:	bl	10fa4 <abort@plt>
   16624:	muleq	r2, ip, r2
   16628:	ldr	ip, [pc, #512]	; 16830 <__assert_fail@plt+0x5874>
   1662c:	cmp	r0, #0
   16630:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16634:	ldrd	r4, [ip, #16]
   16638:	strd	r6, [sp, #8]
   1663c:	clz	r6, r1
   16640:	mov	r7, r1
   16644:	strd	r8, [sp, #16]
   16648:	mov	r8, r0
   1664c:	lsr	r6, r6, #5
   16650:	strd	sl, [sp, #24]
   16654:	mov	fp, r2
   16658:	mov	sl, #10
   1665c:	ldrd	r2, [ip]
   16660:	moveq	r6, #1
   16664:	str	lr, [sp, #32]
   16668:	sub	sp, sp, #92	; 0x5c
   1666c:	cmp	r6, #0
   16670:	ldrd	r0, [ip, #8]
   16674:	strd	r2, [sp, #40]	; 0x28
   16678:	strd	r4, [sp, #56]	; 0x38
   1667c:	ldrd	r2, [ip, #24]
   16680:	strd	r0, [sp, #48]	; 0x30
   16684:	ldrd	r0, [ip, #32]
   16688:	str	sl, [sp, #40]	; 0x28
   1668c:	ldrd	r4, [ip, #40]	; 0x28
   16690:	strd	r2, [sp, #64]	; 0x40
   16694:	strd	r0, [sp, #72]	; 0x48
   16698:	strd	r4, [sp, #80]	; 0x50
   1669c:	bne	1682c <__assert_fail@plt+0x5870>
   166a0:	movw	r5, #41220	; 0xa104
   166a4:	movt	r5, #2
   166a8:	str	r8, [sp, #80]	; 0x50
   166ac:	str	r7, [sp, #84]	; 0x54
   166b0:	bl	10ef0 <__errno_location@plt>
   166b4:	ldr	r3, [r0]
   166b8:	mov	r9, r0
   166bc:	ldr	r2, [r5, #4]
   166c0:	ldr	r4, [r5]
   166c4:	str	r3, [sp, #28]
   166c8:	cmp	r2, #0
   166cc:	movgt	r1, sl
   166d0:	bgt	16738 <__assert_fail@plt+0x577c>
   166d4:	add	r3, r5, #8
   166d8:	str	r2, [sp, #36]	; 0x24
   166dc:	rsb	r2, r2, #1
   166e0:	cmp	r4, r3
   166e4:	beq	16800 <__assert_fail@plt+0x5844>
   166e8:	mov	r1, #8
   166ec:	mov	r0, r4
   166f0:	mvn	r3, #-2147483648	; 0x80000000
   166f4:	str	r1, [sp]
   166f8:	add	r1, sp, #36	; 0x24
   166fc:	bl	177e0 <__assert_fail@plt+0x6824>
   16700:	mov	r4, r0
   16704:	str	r0, [r5]
   16708:	ldr	r0, [r5, #4]
   1670c:	mov	r1, #0
   16710:	ldr	r2, [sp, #36]	; 0x24
   16714:	sub	r2, r2, r0
   16718:	add	r0, r4, r0, lsl #3
   1671c:	lsl	r2, r2, #3
   16720:	bl	10f08 <memset@plt>
   16724:	ldr	r3, [sp, #36]	; 0x24
   16728:	ldr	r1, [sp, #40]	; 0x28
   1672c:	ldr	r8, [sp, #80]	; 0x50
   16730:	str	r3, [r5, #4]
   16734:	ldr	r7, [sp, #84]	; 0x54
   16738:	mvn	r3, #0
   1673c:	mov	r2, fp
   16740:	ldr	r6, [sp, #44]	; 0x2c
   16744:	ldr	sl, [r4]
   16748:	ldr	r5, [r4, #4]
   1674c:	orr	r6, r6, #1
   16750:	stm	sp, {r1, r6}
   16754:	add	r1, sp, #48	; 0x30
   16758:	str	r8, [sp, #12]
   1675c:	mov	r0, r5
   16760:	str	r1, [sp, #8]
   16764:	mov	r1, sl
   16768:	str	r7, [sp, #16]
   1676c:	bl	134d4 <__assert_fail@plt+0x2518>
   16770:	cmp	sl, r0
   16774:	bhi	167d8 <__assert_fail@plt+0x581c>
   16778:	add	r7, r0, #1
   1677c:	movw	r3, #41372	; 0xa19c
   16780:	movt	r3, #2
   16784:	cmp	r5, r3
   16788:	str	r7, [r4]
   1678c:	beq	16798 <__assert_fail@plt+0x57dc>
   16790:	mov	r0, r5
   16794:	bl	12c28 <__assert_fail@plt+0x1c6c>
   16798:	mov	r0, r7
   1679c:	bl	1753c <__assert_fail@plt+0x6580>
   167a0:	ldr	r3, [sp, #40]	; 0x28
   167a4:	mov	r2, fp
   167a8:	mov	r1, r7
   167ac:	mov	r5, r0
   167b0:	ldr	lr, [sp, #80]	; 0x50
   167b4:	ldr	ip, [sp, #84]	; 0x54
   167b8:	str	r0, [r4, #4]
   167bc:	add	r4, sp, #48	; 0x30
   167c0:	stm	sp, {r3, r6}
   167c4:	mvn	r3, #0
   167c8:	str	r4, [sp, #8]
   167cc:	str	lr, [sp, #12]
   167d0:	str	ip, [sp, #16]
   167d4:	bl	134d4 <__assert_fail@plt+0x2518>
   167d8:	ldr	r3, [sp, #28]
   167dc:	mov	r0, r5
   167e0:	str	r3, [r9]
   167e4:	add	sp, sp, #92	; 0x5c
   167e8:	ldrd	r4, [sp]
   167ec:	ldrd	r6, [sp, #8]
   167f0:	ldrd	r8, [sp, #16]
   167f4:	ldrd	sl, [sp, #24]
   167f8:	add	sp, sp, #32
   167fc:	pop	{pc}		; (ldr pc, [sp], #4)
   16800:	mov	r1, #8
   16804:	mvn	r3, #-2147483648	; 0x80000000
   16808:	mov	r0, r6
   1680c:	str	r1, [sp]
   16810:	add	r1, sp, #36	; 0x24
   16814:	bl	177e0 <__assert_fail@plt+0x6824>
   16818:	ldrd	r2, [r5, #8]
   1681c:	mov	r4, r0
   16820:	str	r0, [r5]
   16824:	strd	r2, [r0]
   16828:	b	16708 <__assert_fail@plt+0x574c>
   1682c:	bl	10fa4 <abort@plt>
   16830:	muleq	r2, ip, r2
   16834:	ldr	ip, [pc, #536]	; 16a54 <__assert_fail@plt+0x5a98>
   16838:	cmp	r0, #0
   1683c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16840:	ldrd	r4, [ip, #16]
   16844:	strd	r6, [sp, #8]
   16848:	mov	r6, r1
   1684c:	mov	r7, r0
   16850:	strd	r8, [sp, #16]
   16854:	mov	r9, #10
   16858:	strd	sl, [sp, #24]
   1685c:	mov	sl, r2
   16860:	mov	fp, r3
   16864:	str	lr, [sp, #32]
   16868:	clz	lr, r1
   1686c:	sub	sp, sp, #92	; 0x5c
   16870:	ldrd	r2, [ip]
   16874:	lsr	lr, lr, #5
   16878:	moveq	lr, #1
   1687c:	ldrd	r0, [ip, #8]
   16880:	cmp	lr, #0
   16884:	strd	r4, [sp, #56]	; 0x38
   16888:	ldrd	r4, [ip, #40]	; 0x28
   1688c:	str	lr, [sp, #28]
   16890:	strd	r2, [sp, #40]	; 0x28
   16894:	ldrd	r2, [ip, #24]
   16898:	strd	r0, [sp, #48]	; 0x30
   1689c:	ldrd	r0, [ip, #32]
   168a0:	str	r9, [sp, #40]	; 0x28
   168a4:	strd	r2, [sp, #64]	; 0x40
   168a8:	strd	r4, [sp, #80]	; 0x50
   168ac:	strd	r0, [sp, #72]	; 0x48
   168b0:	bne	16a50 <__assert_fail@plt+0x5a94>
   168b4:	movw	r5, #41220	; 0xa104
   168b8:	movt	r5, #2
   168bc:	str	r7, [sp, #80]	; 0x50
   168c0:	str	r6, [sp, #84]	; 0x54
   168c4:	bl	10ef0 <__errno_location@plt>
   168c8:	ldr	r3, [r0]
   168cc:	mov	r8, r0
   168d0:	ldr	r2, [r5, #4]
   168d4:	ldr	r4, [r5]
   168d8:	str	r3, [sp, #24]
   168dc:	cmp	r2, #0
   168e0:	movgt	r1, r9
   168e4:	bgt	1694c <__assert_fail@plt+0x5990>
   168e8:	add	r3, r5, #8
   168ec:	str	r2, [sp, #36]	; 0x24
   168f0:	rsb	r2, r2, #1
   168f4:	cmp	r4, r3
   168f8:	beq	16a24 <__assert_fail@plt+0x5a68>
   168fc:	mov	r1, #8
   16900:	mov	r0, r4
   16904:	mvn	r3, #-2147483648	; 0x80000000
   16908:	str	r1, [sp]
   1690c:	add	r1, sp, #36	; 0x24
   16910:	bl	177e0 <__assert_fail@plt+0x6824>
   16914:	mov	r4, r0
   16918:	str	r0, [r5]
   1691c:	ldr	r0, [r5, #4]
   16920:	mov	r1, #0
   16924:	ldr	r2, [sp, #36]	; 0x24
   16928:	sub	r2, r2, r0
   1692c:	add	r0, r4, r0, lsl #3
   16930:	lsl	r2, r2, #3
   16934:	bl	10f08 <memset@plt>
   16938:	ldr	r3, [sp, #36]	; 0x24
   1693c:	ldr	r1, [sp, #40]	; 0x28
   16940:	ldr	r7, [sp, #80]	; 0x50
   16944:	str	r3, [r5, #4]
   16948:	ldr	r6, [sp, #84]	; 0x54
   1694c:	mov	r3, fp
   16950:	mov	r2, sl
   16954:	ldr	r0, [sp, #44]	; 0x2c
   16958:	ldr	r9, [r4]
   1695c:	ldr	r5, [r4, #4]
   16960:	orr	r0, r0, #1
   16964:	str	r1, [sp]
   16968:	add	r1, sp, #48	; 0x30
   1696c:	str	r0, [sp, #4]
   16970:	str	r1, [sp, #8]
   16974:	mov	r1, r9
   16978:	str	r7, [sp, #12]
   1697c:	str	r6, [sp, #16]
   16980:	str	r0, [sp, #28]
   16984:	mov	r0, r5
   16988:	bl	134d4 <__assert_fail@plt+0x2518>
   1698c:	cmp	r9, r0
   16990:	bhi	169fc <__assert_fail@plt+0x5a40>
   16994:	add	r6, r0, #1
   16998:	movw	r3, #41372	; 0xa19c
   1699c:	movt	r3, #2
   169a0:	cmp	r5, r3
   169a4:	str	r6, [r4]
   169a8:	beq	169b4 <__assert_fail@plt+0x59f8>
   169ac:	mov	r0, r5
   169b0:	bl	12c28 <__assert_fail@plt+0x1c6c>
   169b4:	mov	r0, r6
   169b8:	bl	1753c <__assert_fail@plt+0x6580>
   169bc:	ldr	lr, [sp, #40]	; 0x28
   169c0:	mov	r1, r6
   169c4:	mov	r3, fp
   169c8:	mov	r2, sl
   169cc:	mov	r5, r0
   169d0:	ldr	r6, [sp, #80]	; 0x50
   169d4:	ldr	ip, [sp, #84]	; 0x54
   169d8:	str	r0, [r4, #4]
   169dc:	str	lr, [sp]
   169e0:	ldr	lr, [sp, #28]
   169e4:	str	lr, [sp, #4]
   169e8:	add	lr, sp, #48	; 0x30
   169ec:	str	r6, [sp, #12]
   169f0:	str	lr, [sp, #8]
   169f4:	str	ip, [sp, #16]
   169f8:	bl	134d4 <__assert_fail@plt+0x2518>
   169fc:	ldr	r3, [sp, #24]
   16a00:	mov	r0, r5
   16a04:	str	r3, [r8]
   16a08:	add	sp, sp, #92	; 0x5c
   16a0c:	ldrd	r4, [sp]
   16a10:	ldrd	r6, [sp, #8]
   16a14:	ldrd	r8, [sp, #16]
   16a18:	ldrd	sl, [sp, #24]
   16a1c:	add	sp, sp, #32
   16a20:	pop	{pc}		; (ldr pc, [sp], #4)
   16a24:	mov	r1, #8
   16a28:	mvn	r3, #-2147483648	; 0x80000000
   16a2c:	ldr	r0, [sp, #28]
   16a30:	str	r1, [sp]
   16a34:	add	r1, sp, #36	; 0x24
   16a38:	bl	177e0 <__assert_fail@plt+0x6824>
   16a3c:	ldrd	r2, [r5, #8]
   16a40:	mov	r4, r0
   16a44:	str	r0, [r5]
   16a48:	strd	r2, [r0]
   16a4c:	b	1691c <__assert_fail@plt+0x5960>
   16a50:	bl	10fa4 <abort@plt>
   16a54:	muleq	r2, ip, r2
   16a58:	ldr	r3, [pc]	; 16a60 <__assert_fail@plt+0x5aa4>
   16a5c:	b	14ec0 <__assert_fail@plt+0x3f04>
   16a60:	andeq	sl, r2, r4, lsl r1
   16a64:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16a68:	movw	r4, #41220	; 0xa104
   16a6c:	movt	r4, #2
   16a70:	strd	r6, [sp, #8]
   16a74:	strd	r8, [sp, #16]
   16a78:	strd	sl, [sp, #24]
   16a7c:	mov	sl, r0
   16a80:	mov	fp, r1
   16a84:	str	lr, [sp, #32]
   16a88:	sub	sp, sp, #44	; 0x2c
   16a8c:	bl	10ef0 <__errno_location@plt>
   16a90:	ldr	r3, [r0]
   16a94:	mov	r8, r0
   16a98:	ldr	r2, [r4, #4]
   16a9c:	ldr	r5, [r4]
   16aa0:	str	r3, [sp, #28]
   16aa4:	cmp	r2, #0
   16aa8:	bgt	16b04 <__assert_fail@plt+0x5b48>
   16aac:	add	r3, r4, #8
   16ab0:	str	r2, [sp, #36]	; 0x24
   16ab4:	rsb	r2, r2, #1
   16ab8:	cmp	r5, r3
   16abc:	beq	16be0 <__assert_fail@plt+0x5c24>
   16ac0:	mov	r1, #8
   16ac4:	mov	r0, r5
   16ac8:	mvn	r3, #-2147483648	; 0x80000000
   16acc:	str	r1, [sp]
   16ad0:	add	r1, sp, #36	; 0x24
   16ad4:	bl	177e0 <__assert_fail@plt+0x6824>
   16ad8:	mov	r5, r0
   16adc:	str	r0, [r4]
   16ae0:	ldr	r0, [r4, #4]
   16ae4:	mov	r1, #0
   16ae8:	ldr	r2, [sp, #36]	; 0x24
   16aec:	sub	r2, r2, r0
   16af0:	add	r0, r5, r0, lsl #3
   16af4:	lsl	r2, r2, #3
   16af8:	bl	10f08 <memset@plt>
   16afc:	ldr	r3, [sp, #36]	; 0x24
   16b00:	str	r3, [r4, #4]
   16b04:	ldr	ip, [r4, #16]
   16b08:	mov	r3, fp
   16b0c:	mov	r2, sl
   16b10:	ldr	r7, [r4, #20]
   16b14:	ldr	r0, [pc, #240]	; 16c0c <__assert_fail@plt+0x5c50>
   16b18:	ldr	r9, [r5]
   16b1c:	orr	r7, r7, #1
   16b20:	ldr	r6, [r5, #4]
   16b24:	str	ip, [sp]
   16b28:	ldr	ip, [r4, #56]	; 0x38
   16b2c:	mov	r1, r9
   16b30:	str	r7, [sp, #4]
   16b34:	ldr	lr, [r4, #60]	; 0x3c
   16b38:	str	r0, [sp, #8]
   16b3c:	mov	r0, r6
   16b40:	str	ip, [sp, #12]
   16b44:	str	lr, [sp, #16]
   16b48:	bl	134d4 <__assert_fail@plt+0x2518>
   16b4c:	cmp	r9, r0
   16b50:	bhi	16bb8 <__assert_fail@plt+0x5bfc>
   16b54:	add	r9, r0, #1
   16b58:	movw	r3, #41372	; 0xa19c
   16b5c:	movt	r3, #2
   16b60:	cmp	r6, r3
   16b64:	str	r9, [r5]
   16b68:	beq	16b74 <__assert_fail@plt+0x5bb8>
   16b6c:	mov	r0, r6
   16b70:	bl	12c28 <__assert_fail@plt+0x1c6c>
   16b74:	mov	r0, r9
   16b78:	bl	1753c <__assert_fail@plt+0x6580>
   16b7c:	ldr	ip, [r4, #16]
   16b80:	mov	r1, r9
   16b84:	mov	r3, fp
   16b88:	mov	r2, sl
   16b8c:	mov	r6, r0
   16b90:	ldr	r9, [r4, #56]	; 0x38
   16b94:	ldr	lr, [r4, #60]	; 0x3c
   16b98:	str	r0, [r5, #4]
   16b9c:	str	ip, [sp]
   16ba0:	ldr	ip, [pc, #100]	; 16c0c <__assert_fail@plt+0x5c50>
   16ba4:	str	r7, [sp, #4]
   16ba8:	str	ip, [sp, #8]
   16bac:	str	r9, [sp, #12]
   16bb0:	str	lr, [sp, #16]
   16bb4:	bl	134d4 <__assert_fail@plt+0x2518>
   16bb8:	ldr	r3, [sp, #28]
   16bbc:	mov	r0, r6
   16bc0:	str	r3, [r8]
   16bc4:	add	sp, sp, #44	; 0x2c
   16bc8:	ldrd	r4, [sp]
   16bcc:	ldrd	r6, [sp, #8]
   16bd0:	ldrd	r8, [sp, #16]
   16bd4:	ldrd	sl, [sp, #24]
   16bd8:	add	sp, sp, #32
   16bdc:	pop	{pc}		; (ldr pc, [sp], #4)
   16be0:	mov	r0, #8
   16be4:	mvn	r3, #-2147483648	; 0x80000000
   16be8:	add	r1, sp, #36	; 0x24
   16bec:	str	r0, [sp]
   16bf0:	mov	r0, #0
   16bf4:	bl	177e0 <__assert_fail@plt+0x6824>
   16bf8:	ldrd	r2, [r4, #8]
   16bfc:	mov	r5, r0
   16c00:	str	r0, [r4]
   16c04:	strd	r2, [r0]
   16c08:	b	16ae0 <__assert_fail@plt+0x5b24>
   16c0c:	andeq	sl, r2, ip, lsl r1
   16c10:	ldr	r3, [pc, #4]	; 16c1c <__assert_fail@plt+0x5c60>
   16c14:	mvn	r2, #0
   16c18:	b	14ec0 <__assert_fail@plt+0x3f04>
   16c1c:	andeq	sl, r2, r4, lsl r1
   16c20:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16c24:	movw	r4, #41220	; 0xa104
   16c28:	movt	r4, #2
   16c2c:	strd	r6, [sp, #8]
   16c30:	strd	r8, [sp, #16]
   16c34:	strd	sl, [sp, #24]
   16c38:	mov	sl, r0
   16c3c:	str	lr, [sp, #32]
   16c40:	sub	sp, sp, #44	; 0x2c
   16c44:	bl	10ef0 <__errno_location@plt>
   16c48:	ldr	r3, [r0]
   16c4c:	mov	r8, r0
   16c50:	ldr	r2, [r4, #4]
   16c54:	ldr	r5, [r4]
   16c58:	str	r3, [sp, #28]
   16c5c:	cmp	r2, #0
   16c60:	bgt	16cbc <__assert_fail@plt+0x5d00>
   16c64:	add	r3, r4, #8
   16c68:	str	r2, [sp, #36]	; 0x24
   16c6c:	rsb	r2, r2, #1
   16c70:	cmp	r5, r3
   16c74:	beq	16d84 <__assert_fail@plt+0x5dc8>
   16c78:	mov	r1, #8
   16c7c:	mov	r0, r5
   16c80:	mvn	r3, #-2147483648	; 0x80000000
   16c84:	str	r1, [sp]
   16c88:	add	r1, sp, #36	; 0x24
   16c8c:	bl	177e0 <__assert_fail@plt+0x6824>
   16c90:	mov	r5, r0
   16c94:	str	r0, [r4]
   16c98:	ldr	r0, [r4, #4]
   16c9c:	mov	r1, #0
   16ca0:	ldr	r2, [sp, #36]	; 0x24
   16ca4:	sub	r2, r2, r0
   16ca8:	add	r0, r5, r0, lsl #3
   16cac:	lsl	r2, r2, #3
   16cb0:	bl	10f08 <memset@plt>
   16cb4:	ldr	r3, [sp, #36]	; 0x24
   16cb8:	str	r3, [r4, #4]
   16cbc:	ldr	ip, [r4, #16]
   16cc0:	mvn	r3, #0
   16cc4:	mov	r2, sl
   16cc8:	ldr	r7, [r4, #20]
   16ccc:	ldr	fp, [pc, #220]	; 16db0 <__assert_fail@plt+0x5df4>
   16cd0:	ldr	r9, [r5]
   16cd4:	orr	r7, r7, #1
   16cd8:	ldr	r6, [r5, #4]
   16cdc:	str	ip, [sp]
   16ce0:	ldr	ip, [r4, #56]	; 0x38
   16ce4:	mov	r1, r9
   16ce8:	stmib	sp, {r7, fp}
   16cec:	ldr	lr, [r4, #60]	; 0x3c
   16cf0:	mov	r0, r6
   16cf4:	str	ip, [sp, #12]
   16cf8:	str	lr, [sp, #16]
   16cfc:	bl	134d4 <__assert_fail@plt+0x2518>
   16d00:	cmp	r9, r0
   16d04:	bhi	16d5c <__assert_fail@plt+0x5da0>
   16d08:	add	r9, r0, #1
   16d0c:	movw	r3, #41372	; 0xa19c
   16d10:	movt	r3, #2
   16d14:	cmp	r6, r3
   16d18:	str	r9, [r5]
   16d1c:	beq	16d28 <__assert_fail@plt+0x5d6c>
   16d20:	mov	r0, r6
   16d24:	bl	12c28 <__assert_fail@plt+0x1c6c>
   16d28:	mov	r0, r9
   16d2c:	bl	1753c <__assert_fail@plt+0x6580>
   16d30:	ldr	r3, [r4, #16]
   16d34:	mov	r2, sl
   16d38:	mov	r1, r9
   16d3c:	mov	r6, r0
   16d40:	ldr	lr, [r4, #56]	; 0x38
   16d44:	ldr	ip, [r4, #60]	; 0x3c
   16d48:	str	r0, [r5, #4]
   16d4c:	stm	sp, {r3, r7, fp, lr}
   16d50:	mvn	r3, #0
   16d54:	str	ip, [sp, #16]
   16d58:	bl	134d4 <__assert_fail@plt+0x2518>
   16d5c:	ldr	r3, [sp, #28]
   16d60:	mov	r0, r6
   16d64:	str	r3, [r8]
   16d68:	add	sp, sp, #44	; 0x2c
   16d6c:	ldrd	r4, [sp]
   16d70:	ldrd	r6, [sp, #8]
   16d74:	ldrd	r8, [sp, #16]
   16d78:	ldrd	sl, [sp, #24]
   16d7c:	add	sp, sp, #32
   16d80:	pop	{pc}		; (ldr pc, [sp], #4)
   16d84:	mov	r0, #8
   16d88:	mvn	r3, #-2147483648	; 0x80000000
   16d8c:	add	r1, sp, #36	; 0x24
   16d90:	str	r0, [sp]
   16d94:	mov	r0, #0
   16d98:	bl	177e0 <__assert_fail@plt+0x6824>
   16d9c:	ldrd	r2, [r4, #8]
   16da0:	mov	r5, r0
   16da4:	str	r0, [r4]
   16da8:	strd	r2, [r0]
   16dac:	b	16c98 <__assert_fail@plt+0x5cdc>
   16db0:	andeq	sl, r2, ip, lsl r1
   16db4:	cmp	r1, #0
   16db8:	strd	r4, [sp, #-16]!
   16dbc:	mov	ip, r3
   16dc0:	str	r6, [sp, #8]
   16dc4:	mov	r4, r0
   16dc8:	str	lr, [sp, #12]
   16dcc:	sub	sp, sp, #32
   16dd0:	ldr	r5, [sp, #48]	; 0x30
   16dd4:	ldr	r6, [sp, #52]	; 0x34
   16dd8:	beq	16f1c <__assert_fail@plt+0x5f60>
   16ddc:	mov	r3, r1
   16de0:	mov	r1, #1
   16de4:	stm	sp, {r2, ip}
   16de8:	movw	r2, #39308	; 0x998c
   16dec:	movt	r2, #1
   16df0:	bl	10f2c <__fprintf_chk@plt>
   16df4:	mov	r2, #5
   16df8:	movw	r1, #39328	; 0x99a0
   16dfc:	movt	r1, #1
   16e00:	mov	r0, #0
   16e04:	bl	10dd0 <dcgettext@plt>
   16e08:	movw	ip, #2022	; 0x7e6
   16e0c:	mov	r3, r0
   16e10:	mov	r1, #1
   16e14:	movw	r2, #40056	; 0x9c78
   16e18:	movt	r2, #1
   16e1c:	mov	r0, r4
   16e20:	str	ip, [sp]
   16e24:	bl	10f2c <__fprintf_chk@plt>
   16e28:	mov	r1, r4
   16e2c:	mov	r0, #10
   16e30:	bl	10dc4 <fputc_unlocked@plt>
   16e34:	mov	r2, #5
   16e38:	movw	r1, #39332	; 0x99a4
   16e3c:	movt	r1, #1
   16e40:	mov	r0, #0
   16e44:	bl	10dd0 <dcgettext@plt>
   16e48:	mov	r2, r0
   16e4c:	mov	r1, #1
   16e50:	movw	r3, #39504	; 0x9a50
   16e54:	movt	r3, #1
   16e58:	mov	r0, r4
   16e5c:	bl	10f2c <__fprintf_chk@plt>
   16e60:	mov	r1, r4
   16e64:	mov	r0, #10
   16e68:	bl	10dc4 <fputc_unlocked@plt>
   16e6c:	cmp	r6, #9
   16e70:	ldrls	pc, [pc, r6, lsl #2]
   16e74:	b	17188 <__assert_fail@plt+0x61cc>
   16e78:	andeq	r6, r1, r8, lsl #30
   16e7c:	andeq	r6, r1, r8, lsr pc
   16e80:	andeq	r6, r1, r4, ror pc
   16e84:			; <UNDEFINED> instruction: 0x00016fb4
   16e88:	strdeq	r6, [r1], -ip
   16e8c:	andeq	r7, r1, r4, lsr r0
   16e90:	andeq	r7, r1, ip, ror r0
   16e94:	ldrdeq	r7, [r1], -r0
   16e98:	andeq	r7, r1, r8, lsr #2
   16e9c:	andeq	r6, r1, r0, lsr #29
   16ea0:	movw	r1, #39808	; 0x9b80
   16ea4:	movt	r1, #1
   16ea8:	mov	r2, #5
   16eac:	mov	r0, #0
   16eb0:	bl	10dd0 <dcgettext@plt>
   16eb4:	ldr	lr, [r5, #4]
   16eb8:	mov	r2, r0
   16ebc:	mov	r1, #1
   16ec0:	mov	r0, r4
   16ec4:	ldr	r3, [r5, #8]
   16ec8:	ldr	ip, [r5, #32]
   16ecc:	str	lr, [sp]
   16ed0:	ldr	lr, [r5, #12]
   16ed4:	str	ip, [sp, #28]
   16ed8:	ldr	ip, [r5, #28]
   16edc:	str	r3, [sp, #4]
   16ee0:	ldr	r3, [r5, #16]
   16ee4:	str	lr, [sp, #8]
   16ee8:	ldr	lr, [r5, #20]
   16eec:	str	ip, [sp, #24]
   16ef0:	ldr	ip, [r5, #24]
   16ef4:	str	r3, [sp, #12]
   16ef8:	ldr	r3, [r5]
   16efc:	str	lr, [sp, #16]
   16f00:	str	ip, [sp, #20]
   16f04:	bl	10f2c <__fprintf_chk@plt>
   16f08:	add	sp, sp, #32
   16f0c:	ldrd	r4, [sp]
   16f10:	ldr	r6, [sp, #8]
   16f14:	add	sp, sp, #12
   16f18:	pop	{pc}		; (ldr pc, [sp], #4)
   16f1c:	mov	r3, r2
   16f20:	mov	r1, #1
   16f24:	str	ip, [sp]
   16f28:	movw	r2, #39320	; 0x9998
   16f2c:	movt	r2, #1
   16f30:	bl	10f2c <__fprintf_chk@plt>
   16f34:	b	16df4 <__assert_fail@plt+0x5e38>
   16f38:	mov	r2, #5
   16f3c:	movw	r1, #39540	; 0x9a74
   16f40:	movt	r1, #1
   16f44:	mov	r0, #0
   16f48:	bl	10dd0 <dcgettext@plt>
   16f4c:	ldr	r3, [r5]
   16f50:	mov	r2, r0
   16f54:	mov	r1, #1
   16f58:	mov	r0, r4
   16f5c:	add	sp, sp, #32
   16f60:	ldrd	r4, [sp]
   16f64:	ldr	r6, [sp, #8]
   16f68:	ldr	lr, [sp, #12]
   16f6c:	add	sp, sp, #16
   16f70:	b	10f2c <__fprintf_chk@plt>
   16f74:	mov	r2, #5
   16f78:	movw	r1, #39556	; 0x9a84
   16f7c:	movt	r1, #1
   16f80:	mov	r0, #0
   16f84:	bl	10dd0 <dcgettext@plt>
   16f88:	ldm	r5, {r3, ip}
   16f8c:	mov	r2, r0
   16f90:	mov	r1, #1
   16f94:	mov	r0, r4
   16f98:	str	ip, [sp, #48]	; 0x30
   16f9c:	add	sp, sp, #32
   16fa0:	ldrd	r4, [sp]
   16fa4:	ldr	r6, [sp, #8]
   16fa8:	ldr	lr, [sp, #12]
   16fac:	add	sp, sp, #16
   16fb0:	b	10f2c <__fprintf_chk@plt>
   16fb4:	mov	r2, #5
   16fb8:	movw	r1, #39580	; 0x9a9c
   16fbc:	movt	r1, #1
   16fc0:	mov	r0, #0
   16fc4:	bl	10dd0 <dcgettext@plt>
   16fc8:	ldm	r5, {r3, lr}
   16fcc:	mov	r2, r0
   16fd0:	mov	r1, #1
   16fd4:	mov	r0, r4
   16fd8:	ldr	ip, [r5, #8]
   16fdc:	str	lr, [sp, #48]	; 0x30
   16fe0:	str	ip, [sp, #52]	; 0x34
   16fe4:	add	sp, sp, #32
   16fe8:	ldrd	r4, [sp]
   16fec:	ldr	r6, [sp, #8]
   16ff0:	ldr	lr, [sp, #12]
   16ff4:	add	sp, sp, #16
   16ff8:	b	10f2c <__fprintf_chk@plt>
   16ffc:	mov	r2, #5
   17000:	movw	r1, #39608	; 0x9ab8
   17004:	movt	r1, #1
   17008:	mov	r0, #0
   1700c:	bl	10dd0 <dcgettext@plt>
   17010:	ldmib	r5, {r3, ip, lr}
   17014:	mov	r2, r0
   17018:	mov	r1, #1
   1701c:	mov	r0, r4
   17020:	str	r3, [sp]
   17024:	ldr	r3, [r5]
   17028:	stmib	sp, {ip, lr}
   1702c:	bl	10f2c <__fprintf_chk@plt>
   17030:	b	16f08 <__assert_fail@plt+0x5f4c>
   17034:	mov	r2, #5
   17038:	movw	r1, #39640	; 0x9ad8
   1703c:	movt	r1, #1
   17040:	mov	r0, #0
   17044:	bl	10dd0 <dcgettext@plt>
   17048:	ldmib	r5, {ip, lr}
   1704c:	mov	r2, r0
   17050:	mov	r1, #1
   17054:	mov	r0, r4
   17058:	ldr	r3, [r5, #16]
   1705c:	str	ip, [sp]
   17060:	ldr	ip, [r5, #12]
   17064:	str	r3, [sp, #12]
   17068:	ldr	r3, [r5]
   1706c:	str	lr, [sp, #4]
   17070:	str	ip, [sp, #8]
   17074:	bl	10f2c <__fprintf_chk@plt>
   17078:	b	16f08 <__assert_fail@plt+0x5f4c>
   1707c:	mov	r2, #5
   17080:	movw	r1, #39676	; 0x9afc
   17084:	movt	r1, #1
   17088:	mov	r0, #0
   1708c:	bl	10dd0 <dcgettext@plt>
   17090:	ldr	lr, [r5, #4]
   17094:	mov	r2, r0
   17098:	mov	r1, #1
   1709c:	mov	r0, r4
   170a0:	ldr	r3, [r5, #8]
   170a4:	ldr	ip, [r5, #20]
   170a8:	str	lr, [sp]
   170ac:	ldr	lr, [r5, #12]
   170b0:	str	ip, [sp, #16]
   170b4:	ldr	ip, [r5, #16]
   170b8:	str	r3, [sp, #4]
   170bc:	ldr	r3, [r5]
   170c0:	str	lr, [sp, #8]
   170c4:	str	ip, [sp, #12]
   170c8:	bl	10f2c <__fprintf_chk@plt>
   170cc:	b	16f08 <__assert_fail@plt+0x5f4c>
   170d0:	mov	r2, #5
   170d4:	movw	r1, #39716	; 0x9b24
   170d8:	movt	r1, #1
   170dc:	mov	r0, #0
   170e0:	bl	10dd0 <dcgettext@plt>
   170e4:	ldmib	r5, {r3, ip}
   170e8:	mov	r2, r0
   170ec:	mov	r1, #1
   170f0:	mov	r0, r4
   170f4:	ldr	lr, [r5, #24]
   170f8:	str	r3, [sp]
   170fc:	ldr	r3, [r5, #12]
   17100:	str	lr, [sp, #20]
   17104:	ldr	lr, [r5, #20]
   17108:	str	ip, [sp, #4]
   1710c:	ldr	ip, [r5, #16]
   17110:	str	r3, [sp, #8]
   17114:	ldr	r3, [r5]
   17118:	str	ip, [sp, #12]
   1711c:	str	lr, [sp, #16]
   17120:	bl	10f2c <__fprintf_chk@plt>
   17124:	b	16f08 <__assert_fail@plt+0x5f4c>
   17128:	mov	r2, #5
   1712c:	movw	r1, #39760	; 0x9b50
   17130:	movt	r1, #1
   17134:	mov	r0, #0
   17138:	bl	10dd0 <dcgettext@plt>
   1713c:	ldmib	r5, {ip, lr}
   17140:	mov	r2, r0
   17144:	mov	r1, #1
   17148:	mov	r0, r4
   1714c:	ldr	r3, [r5, #28]
   17150:	str	ip, [sp]
   17154:	ldr	ip, [r5, #12]
   17158:	str	r3, [sp, #24]
   1715c:	ldr	r3, [r5, #24]
   17160:	str	lr, [sp, #4]
   17164:	ldr	lr, [r5, #16]
   17168:	str	ip, [sp, #8]
   1716c:	ldr	ip, [r5, #20]
   17170:	str	r3, [sp, #20]
   17174:	ldr	r3, [r5]
   17178:	str	lr, [sp, #12]
   1717c:	str	ip, [sp, #16]
   17180:	bl	10f2c <__fprintf_chk@plt>
   17184:	b	16f08 <__assert_fail@plt+0x5f4c>
   17188:	movw	r1, #39860	; 0x9bb4
   1718c:	movt	r1, #1
   17190:	b	16ea8 <__assert_fail@plt+0x5eec>
   17194:	strd	r4, [sp, #-12]!
   17198:	str	lr, [sp, #8]
   1719c:	sub	sp, sp, #12
   171a0:	ldr	r5, [sp, #24]
   171a4:	ldr	ip, [r5]
   171a8:	cmp	ip, #0
   171ac:	beq	171c8 <__assert_fail@plt+0x620c>
   171b0:	mov	lr, r5
   171b4:	mov	ip, #0
   171b8:	ldr	r4, [lr, #4]!
   171bc:	add	ip, ip, #1
   171c0:	cmp	r4, #0
   171c4:	bne	171b8 <__assert_fail@plt+0x61fc>
   171c8:	stm	sp, {r5, ip}
   171cc:	bl	16db4 <__assert_fail@plt+0x5df8>
   171d0:	add	sp, sp, #12
   171d4:	ldrd	r4, [sp]
   171d8:	add	sp, sp, #8
   171dc:	pop	{pc}		; (ldr pc, [sp], #4)
   171e0:	push	{lr}		; (str lr, [sp, #-4]!)
   171e4:	sub	sp, sp, #52	; 0x34
   171e8:	ldr	ip, [sp, #56]	; 0x38
   171ec:	ldr	lr, [ip]
   171f0:	cmp	lr, #0
   171f4:	str	lr, [sp, #8]
   171f8:	beq	17290 <__assert_fail@plt+0x62d4>
   171fc:	ldr	lr, [ip, #4]
   17200:	cmp	lr, #0
   17204:	str	lr, [sp, #12]
   17208:	beq	172a4 <__assert_fail@plt+0x62e8>
   1720c:	ldr	lr, [ip, #8]
   17210:	cmp	lr, #0
   17214:	str	lr, [sp, #16]
   17218:	beq	172ac <__assert_fail@plt+0x62f0>
   1721c:	ldr	lr, [ip, #12]
   17220:	cmp	lr, #0
   17224:	str	lr, [sp, #20]
   17228:	beq	172b4 <__assert_fail@plt+0x62f8>
   1722c:	ldr	lr, [ip, #16]
   17230:	cmp	lr, #0
   17234:	str	lr, [sp, #24]
   17238:	beq	172bc <__assert_fail@plt+0x6300>
   1723c:	ldr	lr, [ip, #20]
   17240:	cmp	lr, #0
   17244:	str	lr, [sp, #28]
   17248:	beq	172c4 <__assert_fail@plt+0x6308>
   1724c:	ldr	lr, [ip, #24]
   17250:	cmp	lr, #0
   17254:	str	lr, [sp, #32]
   17258:	beq	172cc <__assert_fail@plt+0x6310>
   1725c:	ldr	lr, [ip, #28]
   17260:	cmp	lr, #0
   17264:	str	lr, [sp, #36]	; 0x24
   17268:	beq	172d4 <__assert_fail@plt+0x6318>
   1726c:	ldr	lr, [ip, #32]
   17270:	cmp	lr, #0
   17274:	str	lr, [sp, #40]	; 0x28
   17278:	beq	172dc <__assert_fail@plt+0x6320>
   1727c:	ldr	ip, [ip, #36]	; 0x24
   17280:	cmp	ip, #0
   17284:	str	ip, [sp, #44]	; 0x2c
   17288:	movne	lr, #10
   1728c:	moveq	lr, #9
   17290:	add	ip, sp, #8
   17294:	stm	sp, {ip, lr}
   17298:	bl	16db4 <__assert_fail@plt+0x5df8>
   1729c:	add	sp, sp, #52	; 0x34
   172a0:	pop	{pc}		; (ldr pc, [sp], #4)
   172a4:	mov	lr, #1
   172a8:	b	17290 <__assert_fail@plt+0x62d4>
   172ac:	mov	lr, #2
   172b0:	b	17290 <__assert_fail@plt+0x62d4>
   172b4:	mov	lr, #3
   172b8:	b	17290 <__assert_fail@plt+0x62d4>
   172bc:	mov	lr, #4
   172c0:	b	17290 <__assert_fail@plt+0x62d4>
   172c4:	mov	lr, #5
   172c8:	b	17290 <__assert_fail@plt+0x62d4>
   172cc:	mov	lr, #6
   172d0:	b	17290 <__assert_fail@plt+0x62d4>
   172d4:	mov	lr, #7
   172d8:	b	17290 <__assert_fail@plt+0x62d4>
   172dc:	mov	lr, #8
   172e0:	b	17290 <__assert_fail@plt+0x62d4>
   172e4:	push	{r3}		; (str r3, [sp, #-4]!)
   172e8:	push	{lr}		; (str lr, [sp, #-4]!)
   172ec:	sub	sp, sp, #56	; 0x38
   172f0:	ldr	ip, [sp, #64]	; 0x40
   172f4:	add	r3, sp, #64	; 0x40
   172f8:	str	r3, [sp, #12]
   172fc:	cmp	ip, #0
   17300:	str	ip, [sp, #16]
   17304:	beq	1739c <__assert_fail@plt+0x63e0>
   17308:	ldr	ip, [sp, #68]	; 0x44
   1730c:	cmp	ip, #0
   17310:	str	ip, [sp, #20]
   17314:	beq	173c0 <__assert_fail@plt+0x6404>
   17318:	ldr	ip, [sp, #72]	; 0x48
   1731c:	cmp	ip, #0
   17320:	str	ip, [sp, #24]
   17324:	beq	173c8 <__assert_fail@plt+0x640c>
   17328:	ldr	ip, [sp, #76]	; 0x4c
   1732c:	cmp	ip, #0
   17330:	str	ip, [sp, #28]
   17334:	beq	173d0 <__assert_fail@plt+0x6414>
   17338:	ldr	ip, [sp, #80]	; 0x50
   1733c:	cmp	ip, #0
   17340:	str	ip, [sp, #32]
   17344:	beq	173d8 <__assert_fail@plt+0x641c>
   17348:	ldr	ip, [sp, #84]	; 0x54
   1734c:	cmp	ip, #0
   17350:	str	ip, [sp, #36]	; 0x24
   17354:	beq	173e0 <__assert_fail@plt+0x6424>
   17358:	ldr	ip, [sp, #88]	; 0x58
   1735c:	cmp	ip, #0
   17360:	str	ip, [sp, #40]	; 0x28
   17364:	beq	173e8 <__assert_fail@plt+0x642c>
   17368:	ldr	ip, [sp, #92]	; 0x5c
   1736c:	cmp	ip, #0
   17370:	str	ip, [sp, #44]	; 0x2c
   17374:	beq	173f0 <__assert_fail@plt+0x6434>
   17378:	ldr	ip, [sp, #96]	; 0x60
   1737c:	cmp	ip, #0
   17380:	str	ip, [sp, #48]	; 0x30
   17384:	beq	173f8 <__assert_fail@plt+0x643c>
   17388:	ldr	r3, [sp, #100]	; 0x64
   1738c:	cmp	r3, #0
   17390:	str	r3, [sp, #52]	; 0x34
   17394:	movne	ip, #10
   17398:	moveq	ip, #9
   1739c:	ldr	r3, [sp, #60]	; 0x3c
   173a0:	add	lr, sp, #16
   173a4:	str	lr, [sp]
   173a8:	str	ip, [sp, #4]
   173ac:	bl	16db4 <__assert_fail@plt+0x5df8>
   173b0:	add	sp, sp, #56	; 0x38
   173b4:	pop	{lr}		; (ldr lr, [sp], #4)
   173b8:	add	sp, sp, #4
   173bc:	bx	lr
   173c0:	mov	ip, #1
   173c4:	b	1739c <__assert_fail@plt+0x63e0>
   173c8:	mov	ip, #2
   173cc:	b	1739c <__assert_fail@plt+0x63e0>
   173d0:	mov	ip, #3
   173d4:	b	1739c <__assert_fail@plt+0x63e0>
   173d8:	mov	ip, #4
   173dc:	b	1739c <__assert_fail@plt+0x63e0>
   173e0:	mov	ip, #5
   173e4:	b	1739c <__assert_fail@plt+0x63e0>
   173e8:	mov	ip, #6
   173ec:	b	1739c <__assert_fail@plt+0x63e0>
   173f0:	mov	ip, #7
   173f4:	b	1739c <__assert_fail@plt+0x63e0>
   173f8:	mov	ip, #8
   173fc:	b	1739c <__assert_fail@plt+0x63e0>
   17400:	movw	r3, #41316	; 0xa164
   17404:	movt	r3, #2
   17408:	str	r4, [sp, #-8]!
   1740c:	mov	r0, #10
   17410:	ldr	r1, [r3]
   17414:	str	lr, [sp, #4]
   17418:	bl	10dc4 <fputc_unlocked@plt>
   1741c:	mov	r2, #5
   17420:	movw	r1, #39920	; 0x9bf0
   17424:	movt	r1, #1
   17428:	mov	r0, #0
   1742c:	bl	10dd0 <dcgettext@plt>
   17430:	mov	r1, r0
   17434:	movw	r2, #39940	; 0x9c04
   17438:	movt	r2, #1
   1743c:	mov	r0, #1
   17440:	bl	10f14 <__printf_chk@plt>
   17444:	mov	r2, #5
   17448:	movw	r1, #39964	; 0x9c1c
   1744c:	movt	r1, #1
   17450:	mov	r0, #0
   17454:	bl	10dd0 <dcgettext@plt>
   17458:	mov	r1, r0
   1745c:	movw	r3, #37944	; 0x9438
   17460:	movt	r3, #1
   17464:	movw	r2, #37984	; 0x9460
   17468:	movt	r2, #1
   1746c:	mov	r0, #1
   17470:	bl	10f14 <__printf_chk@plt>
   17474:	mov	r2, #5
   17478:	movw	r1, #39984	; 0x9c30
   1747c:	movt	r1, #1
   17480:	mov	r0, #0
   17484:	bl	10dd0 <dcgettext@plt>
   17488:	mov	r1, r0
   1748c:	movw	r2, #40024	; 0x9c58
   17490:	movt	r2, #1
   17494:	mov	r0, #1
   17498:	ldr	r4, [sp]
   1749c:	ldr	lr, [sp, #4]
   174a0:	add	sp, sp, #8
   174a4:	b	10f14 <__printf_chk@plt>
   174a8:	strd	r4, [sp, #-16]!
   174ac:	mov	r4, r0
   174b0:	mov	r5, r2
   174b4:	str	r6, [sp, #8]
   174b8:	mov	r6, r1
   174bc:	str	lr, [sp, #12]
   174c0:	bl	18a98 <__assert_fail@plt+0x7adc>
   174c4:	cmp	r0, #0
   174c8:	beq	174dc <__assert_fail@plt+0x6520>
   174cc:	ldrd	r4, [sp]
   174d0:	ldr	r6, [sp, #8]
   174d4:	add	sp, sp, #12
   174d8:	pop	{pc}		; (ldr pc, [sp], #4)
   174dc:	cmp	r4, #0
   174e0:	beq	174f0 <__assert_fail@plt+0x6534>
   174e4:	cmp	r6, #0
   174e8:	cmpne	r5, #0
   174ec:	beq	174cc <__assert_fail@plt+0x6510>
   174f0:	bl	17aac <__assert_fail@plt+0x6af0>
   174f4:	str	r4, [sp, #-8]!
   174f8:	str	lr, [sp, #4]
   174fc:	bl	188c0 <__assert_fail@plt+0x7904>
   17500:	cmp	r0, #0
   17504:	beq	17514 <__assert_fail@plt+0x6558>
   17508:	ldr	r4, [sp]
   1750c:	add	sp, sp, #4
   17510:	pop	{pc}		; (ldr pc, [sp], #4)
   17514:	bl	17aac <__assert_fail@plt+0x6af0>
   17518:	str	r4, [sp, #-8]!
   1751c:	str	lr, [sp, #4]
   17520:	bl	188c0 <__assert_fail@plt+0x7904>
   17524:	cmp	r0, #0
   17528:	beq	17538 <__assert_fail@plt+0x657c>
   1752c:	ldr	r4, [sp]
   17530:	add	sp, sp, #4
   17534:	pop	{pc}		; (ldr pc, [sp], #4)
   17538:	bl	17aac <__assert_fail@plt+0x6af0>
   1753c:	str	r4, [sp, #-8]!
   17540:	str	lr, [sp, #4]
   17544:	bl	188c0 <__assert_fail@plt+0x7904>
   17548:	cmp	r0, #0
   1754c:	beq	1755c <__assert_fail@plt+0x65a0>
   17550:	ldr	r4, [sp]
   17554:	add	sp, sp, #4
   17558:	pop	{pc}		; (ldr pc, [sp], #4)
   1755c:	bl	17aac <__assert_fail@plt+0x6af0>
   17560:	strd	r4, [sp, #-16]!
   17564:	mov	r5, r0
   17568:	mov	r4, r1
   1756c:	str	r6, [sp, #8]
   17570:	str	lr, [sp, #12]
   17574:	bl	188fc <__assert_fail@plt+0x7940>
   17578:	cmp	r0, #0
   1757c:	beq	17590 <__assert_fail@plt+0x65d4>
   17580:	ldrd	r4, [sp]
   17584:	ldr	r6, [sp, #8]
   17588:	add	sp, sp, #12
   1758c:	pop	{pc}		; (ldr pc, [sp], #4)
   17590:	adds	r4, r4, #0
   17594:	movne	r4, #1
   17598:	cmp	r5, #0
   1759c:	moveq	r4, #1
   175a0:	cmp	r4, #0
   175a4:	beq	17580 <__assert_fail@plt+0x65c4>
   175a8:	bl	17aac <__assert_fail@plt+0x6af0>
   175ac:	cmp	r1, #0
   175b0:	orreq	r1, r1, #1
   175b4:	str	r4, [sp, #-8]!
   175b8:	str	lr, [sp, #4]
   175bc:	bl	188fc <__assert_fail@plt+0x7940>
   175c0:	cmp	r0, #0
   175c4:	beq	175d4 <__assert_fail@plt+0x6618>
   175c8:	ldr	r4, [sp]
   175cc:	add	sp, sp, #4
   175d0:	pop	{pc}		; (ldr pc, [sp], #4)
   175d4:	bl	17aac <__assert_fail@plt+0x6af0>
   175d8:	strd	r4, [sp, #-16]!
   175dc:	mov	r4, r0
   175e0:	mov	r5, r2
   175e4:	str	r6, [sp, #8]
   175e8:	mov	r6, r1
   175ec:	str	lr, [sp, #12]
   175f0:	bl	18a98 <__assert_fail@plt+0x7adc>
   175f4:	cmp	r0, #0
   175f8:	beq	1760c <__assert_fail@plt+0x6650>
   175fc:	ldrd	r4, [sp]
   17600:	ldr	r6, [sp, #8]
   17604:	add	sp, sp, #12
   17608:	pop	{pc}		; (ldr pc, [sp], #4)
   1760c:	cmp	r4, #0
   17610:	beq	17620 <__assert_fail@plt+0x6664>
   17614:	cmp	r6, #0
   17618:	cmpne	r5, #0
   1761c:	beq	175fc <__assert_fail@plt+0x6640>
   17620:	bl	17aac <__assert_fail@plt+0x6af0>
   17624:	cmp	r2, #0
   17628:	cmpne	r1, #0
   1762c:	str	r4, [sp, #-8]!
   17630:	moveq	r2, #1
   17634:	str	lr, [sp, #4]
   17638:	moveq	r1, r2
   1763c:	bl	18a98 <__assert_fail@plt+0x7adc>
   17640:	cmp	r0, #0
   17644:	beq	17654 <__assert_fail@plt+0x6698>
   17648:	ldr	r4, [sp]
   1764c:	add	sp, sp, #4
   17650:	pop	{pc}		; (ldr pc, [sp], #4)
   17654:	bl	17aac <__assert_fail@plt+0x6af0>
   17658:	mov	r2, r1
   1765c:	mov	r1, r0
   17660:	str	r4, [sp, #-8]!
   17664:	mov	r0, #0
   17668:	str	lr, [sp, #4]
   1766c:	bl	18a98 <__assert_fail@plt+0x7adc>
   17670:	cmp	r0, #0
   17674:	beq	17684 <__assert_fail@plt+0x66c8>
   17678:	ldr	r4, [sp]
   1767c:	add	sp, sp, #4
   17680:	pop	{pc}		; (ldr pc, [sp], #4)
   17684:	bl	17aac <__assert_fail@plt+0x6af0>
   17688:	cmp	r1, #0
   1768c:	cmpne	r0, #0
   17690:	str	r4, [sp, #-8]!
   17694:	moveq	r2, #1
   17698:	movne	r2, r1
   1769c:	str	lr, [sp, #4]
   176a0:	movne	r1, r0
   176a4:	moveq	r1, r2
   176a8:	mov	r0, #0
   176ac:	bl	18a98 <__assert_fail@plt+0x7adc>
   176b0:	cmp	r0, #0
   176b4:	beq	176c4 <__assert_fail@plt+0x6708>
   176b8:	ldr	r4, [sp]
   176bc:	add	sp, sp, #4
   176c0:	pop	{pc}		; (ldr pc, [sp], #4)
   176c4:	bl	17aac <__assert_fail@plt+0x6af0>
   176c8:	cmp	r0, #0
   176cc:	strd	r4, [sp, #-16]!
   176d0:	mov	r5, r1
   176d4:	ldr	r4, [r1]
   176d8:	str	r6, [sp, #8]
   176dc:	str	lr, [sp, #12]
   176e0:	beq	17728 <__assert_fail@plt+0x676c>
   176e4:	lsr	r3, r4, #1
   176e8:	add	r3, r3, #1
   176ec:	adds	r4, r4, r3
   176f0:	bcs	17724 <__assert_fail@plt+0x6768>
   176f4:	mov	r2, #1
   176f8:	mov	r1, r4
   176fc:	bl	18a98 <__assert_fail@plt+0x7adc>
   17700:	cmp	r0, #0
   17704:	beq	1771c <__assert_fail@plt+0x6760>
   17708:	ldr	r6, [sp, #8]
   1770c:	str	r4, [r5]
   17710:	ldrd	r4, [sp]
   17714:	add	sp, sp, #12
   17718:	pop	{pc}		; (ldr pc, [sp], #4)
   1771c:	cmp	r4, #0
   17720:	beq	17708 <__assert_fail@plt+0x674c>
   17724:	bl	17aac <__assert_fail@plt+0x6af0>
   17728:	cmp	r4, #0
   1772c:	mov	r2, #1
   17730:	moveq	r4, #64	; 0x40
   17734:	mov	r1, r4
   17738:	bl	18a98 <__assert_fail@plt+0x7adc>
   1773c:	cmp	r0, #0
   17740:	bne	17708 <__assert_fail@plt+0x674c>
   17744:	b	17724 <__assert_fail@plt+0x6768>
   17748:	cmp	r0, #0
   1774c:	strd	r4, [sp, #-16]!
   17750:	mov	r5, r1
   17754:	ldr	r4, [r1]
   17758:	str	r6, [sp, #8]
   1775c:	mov	r6, r2
   17760:	str	lr, [sp, #12]
   17764:	beq	177ac <__assert_fail@plt+0x67f0>
   17768:	lsr	r3, r4, #1
   1776c:	add	r3, r3, #1
   17770:	adds	r4, r4, r3
   17774:	bcs	177a8 <__assert_fail@plt+0x67ec>
   17778:	mov	r1, r4
   1777c:	bl	18a98 <__assert_fail@plt+0x7adc>
   17780:	cmp	r0, #0
   17784:	beq	1779c <__assert_fail@plt+0x67e0>
   17788:	ldr	r6, [sp, #8]
   1778c:	str	r4, [r5]
   17790:	ldrd	r4, [sp]
   17794:	add	sp, sp, #12
   17798:	pop	{pc}		; (ldr pc, [sp], #4)
   1779c:	cmp	r4, #0
   177a0:	cmpne	r6, #0
   177a4:	beq	17788 <__assert_fail@plt+0x67cc>
   177a8:	bl	17aac <__assert_fail@plt+0x6af0>
   177ac:	cmp	r4, #0
   177b0:	bne	177c4 <__assert_fail@plt+0x6808>
   177b4:	mov	r4, #64	; 0x40
   177b8:	udiv	r4, r4, r2
   177bc:	cmp	r2, #64	; 0x40
   177c0:	addhi	r4, r4, #1
   177c4:	mov	r2, r6
   177c8:	mov	r1, r4
   177cc:	mov	r0, #0
   177d0:	bl	18a98 <__assert_fail@plt+0x7adc>
   177d4:	cmp	r0, #0
   177d8:	bne	17788 <__assert_fail@plt+0x67cc>
   177dc:	b	177a8 <__assert_fail@plt+0x67ec>
   177e0:	ldr	ip, [r1]
   177e4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   177e8:	strd	r6, [sp, #8]
   177ec:	mov	r7, r1
   177f0:	mov	r6, r0
   177f4:	str	r8, [sp, #16]
   177f8:	mvn	r8, r3
   177fc:	lsr	r8, r8, #31
   17800:	str	lr, [sp, #20]
   17804:	asr	r1, ip, #1
   17808:	ldr	lr, [sp, #24]
   1780c:	adds	r4, ip, r1
   17810:	mvnvs	r4, #-2147483648	; 0x80000000
   17814:	cmp	r3, r4
   17818:	movge	r1, #0
   1781c:	andlt	r1, r8, #1
   17820:	cmp	r1, #0
   17824:	movne	r4, r3
   17828:	smull	r0, r1, r4, lr
   1782c:	cmp	r1, r0, asr #31
   17830:	bne	178e0 <__assert_fail@plt+0x6924>
   17834:	cmp	r0, #63	; 0x3f
   17838:	mov	r5, r0
   1783c:	ble	178ac <__assert_fail@plt+0x68f0>
   17840:	cmp	r6, #0
   17844:	sub	r1, r4, ip
   17848:	streq	r6, [r7]
   1784c:	cmp	r1, r2
   17850:	bge	17880 <__assert_fail@plt+0x68c4>
   17854:	adds	r4, ip, r2
   17858:	bvs	178dc <__assert_fail@plt+0x6920>
   1785c:	cmp	r4, r3
   17860:	movle	r3, #0
   17864:	andgt	r3, r8, #1
   17868:	cmp	r3, #0
   1786c:	bne	178dc <__assert_fail@plt+0x6920>
   17870:	smull	r0, r1, r4, lr
   17874:	cmp	r1, r0, asr #31
   17878:	mov	r5, r0
   1787c:	bne	178dc <__assert_fail@plt+0x6920>
   17880:	mov	r1, r5
   17884:	mov	r0, r6
   17888:	bl	188fc <__assert_fail@plt+0x7940>
   1788c:	cmp	r0, #0
   17890:	beq	178c0 <__assert_fail@plt+0x6904>
   17894:	ldr	r8, [sp, #16]
   17898:	str	r4, [r7]
   1789c:	ldrd	r4, [sp]
   178a0:	ldrd	r6, [sp, #8]
   178a4:	add	sp, sp, #20
   178a8:	pop	{pc}		; (ldr pc, [sp], #4)
   178ac:	mov	r0, #64	; 0x40
   178b0:	sdiv	r4, r0, lr
   178b4:	mls	r5, lr, r4, r0
   178b8:	sub	r5, r0, r5
   178bc:	b	17840 <__assert_fail@plt+0x6884>
   178c0:	adds	r5, r5, #0
   178c4:	movne	r5, #1
   178c8:	cmp	r6, #0
   178cc:	movne	r6, r5
   178d0:	moveq	r6, #1
   178d4:	cmp	r6, #0
   178d8:	beq	17894 <__assert_fail@plt+0x68d8>
   178dc:	bl	17aac <__assert_fail@plt+0x6af0>
   178e0:	mvn	r0, #-2147483648	; 0x80000000
   178e4:	b	178b0 <__assert_fail@plt+0x68f4>
   178e8:	mov	r1, #1
   178ec:	str	r4, [sp, #-8]!
   178f0:	str	lr, [sp, #4]
   178f4:	bl	1884c <__assert_fail@plt+0x7890>
   178f8:	cmp	r0, #0
   178fc:	beq	1790c <__assert_fail@plt+0x6950>
   17900:	ldr	r4, [sp]
   17904:	add	sp, sp, #4
   17908:	pop	{pc}		; (ldr pc, [sp], #4)
   1790c:	bl	17aac <__assert_fail@plt+0x6af0>
   17910:	mov	r1, #1
   17914:	str	r4, [sp, #-8]!
   17918:	str	lr, [sp, #4]
   1791c:	bl	1884c <__assert_fail@plt+0x7890>
   17920:	cmp	r0, #0
   17924:	beq	17934 <__assert_fail@plt+0x6978>
   17928:	ldr	r4, [sp]
   1792c:	add	sp, sp, #4
   17930:	pop	{pc}		; (ldr pc, [sp], #4)
   17934:	bl	17aac <__assert_fail@plt+0x6af0>
   17938:	str	r4, [sp, #-8]!
   1793c:	str	lr, [sp, #4]
   17940:	bl	1884c <__assert_fail@plt+0x7890>
   17944:	cmp	r0, #0
   17948:	beq	17958 <__assert_fail@plt+0x699c>
   1794c:	ldr	r4, [sp]
   17950:	add	sp, sp, #4
   17954:	pop	{pc}		; (ldr pc, [sp], #4)
   17958:	bl	17aac <__assert_fail@plt+0x6af0>
   1795c:	str	r4, [sp, #-8]!
   17960:	str	lr, [sp, #4]
   17964:	bl	1884c <__assert_fail@plt+0x7890>
   17968:	cmp	r0, #0
   1796c:	beq	1797c <__assert_fail@plt+0x69c0>
   17970:	ldr	r4, [sp]
   17974:	add	sp, sp, #4
   17978:	pop	{pc}		; (ldr pc, [sp], #4)
   1797c:	bl	17aac <__assert_fail@plt+0x6af0>
   17980:	strd	r4, [sp, #-16]!
   17984:	mov	r4, r1
   17988:	str	r6, [sp, #8]
   1798c:	mov	r6, r0
   17990:	mov	r0, r1
   17994:	str	lr, [sp, #12]
   17998:	bl	188c0 <__assert_fail@plt+0x7904>
   1799c:	subs	r5, r0, #0
   179a0:	beq	179c4 <__assert_fail@plt+0x6a08>
   179a4:	mov	r2, r4
   179a8:	mov	r1, r6
   179ac:	bl	10d88 <memcpy@plt>
   179b0:	mov	r0, r5
   179b4:	ldrd	r4, [sp]
   179b8:	ldr	r6, [sp, #8]
   179bc:	add	sp, sp, #12
   179c0:	pop	{pc}		; (ldr pc, [sp], #4)
   179c4:	bl	17aac <__assert_fail@plt+0x6af0>
   179c8:	strd	r4, [sp, #-16]!
   179cc:	mov	r4, r1
   179d0:	str	r6, [sp, #8]
   179d4:	mov	r6, r0
   179d8:	mov	r0, r1
   179dc:	str	lr, [sp, #12]
   179e0:	bl	188c0 <__assert_fail@plt+0x7904>
   179e4:	subs	r5, r0, #0
   179e8:	beq	17a0c <__assert_fail@plt+0x6a50>
   179ec:	mov	r2, r4
   179f0:	mov	r1, r6
   179f4:	bl	10d88 <memcpy@plt>
   179f8:	mov	r0, r5
   179fc:	ldrd	r4, [sp]
   17a00:	ldr	r6, [sp, #8]
   17a04:	add	sp, sp, #12
   17a08:	pop	{pc}		; (ldr pc, [sp], #4)
   17a0c:	bl	17aac <__assert_fail@plt+0x6af0>
   17a10:	strd	r4, [sp, #-16]!
   17a14:	mov	r4, r1
   17a18:	str	r6, [sp, #8]
   17a1c:	mov	r6, r0
   17a20:	add	r0, r1, #1
   17a24:	str	lr, [sp, #12]
   17a28:	bl	188c0 <__assert_fail@plt+0x7904>
   17a2c:	subs	r5, r0, #0
   17a30:	beq	17a5c <__assert_fail@plt+0x6aa0>
   17a34:	mov	r3, #0
   17a38:	mov	r1, r6
   17a3c:	mov	r2, r4
   17a40:	strb	r3, [r5, r4]
   17a44:	bl	10d88 <memcpy@plt>
   17a48:	mov	r0, r5
   17a4c:	ldrd	r4, [sp]
   17a50:	ldr	r6, [sp, #8]
   17a54:	add	sp, sp, #12
   17a58:	pop	{pc}		; (ldr pc, [sp], #4)
   17a5c:	bl	17aac <__assert_fail@plt+0x6af0>
   17a60:	strd	r4, [sp, #-16]!
   17a64:	str	r6, [sp, #8]
   17a68:	mov	r6, r0
   17a6c:	str	lr, [sp, #12]
   17a70:	bl	10ed8 <strlen@plt>
   17a74:	add	r4, r0, #1
   17a78:	mov	r0, r4
   17a7c:	bl	188c0 <__assert_fail@plt+0x7904>
   17a80:	subs	r5, r0, #0
   17a84:	beq	17aa8 <__assert_fail@plt+0x6aec>
   17a88:	mov	r2, r4
   17a8c:	mov	r1, r6
   17a90:	bl	10d88 <memcpy@plt>
   17a94:	mov	r0, r5
   17a98:	ldrd	r4, [sp]
   17a9c:	ldr	r6, [sp, #8]
   17aa0:	add	sp, sp, #12
   17aa4:	pop	{pc}		; (ldr pc, [sp], #4)
   17aa8:	bl	17aac <__assert_fail@plt+0x6af0>
   17aac:	movw	r3, #41216	; 0xa100
   17ab0:	movt	r3, #2
   17ab4:	str	r4, [sp, #-8]!
   17ab8:	ldr	r4, [r3]
   17abc:	mov	r2, #5
   17ac0:	movw	r1, #40104	; 0x9ca8
   17ac4:	movt	r1, #1
   17ac8:	mov	r0, #0
   17acc:	str	lr, [sp, #4]
   17ad0:	bl	10dd0 <dcgettext@plt>
   17ad4:	mov	r3, r0
   17ad8:	movw	r2, #36288	; 0x8dc0
   17adc:	movt	r2, #1
   17ae0:	mov	r1, #0
   17ae4:	mov	r0, r4
   17ae8:	bl	10e48 <error@plt>
   17aec:	bl	10fa4 <abort@plt>
   17af0:	cmp	r2, #36	; 0x24
   17af4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   17af8:	strd	r6, [sp, #8]
   17afc:	strd	r8, [sp, #16]
   17b00:	strd	sl, [sp, #24]
   17b04:	str	lr, [sp, #32]
   17b08:	sub	sp, sp, #36	; 0x24
   17b0c:	bhi	18784 <__assert_fail@plt+0x77c8>
   17b10:	cmp	r1, #0
   17b14:	mov	r6, r2
   17b18:	mov	r5, r1
   17b1c:	mov	sl, r0
   17b20:	addeq	r5, sp, #28
   17b24:	mov	r9, r3
   17b28:	bl	10ef0 <__errno_location@plt>
   17b2c:	mov	r3, #0
   17b30:	mov	fp, r0
   17b34:	str	r3, [r0]
   17b38:	ldrb	r4, [sl]
   17b3c:	bl	10ec0 <__ctype_b_loc@plt>
   17b40:	ldr	r2, [r0]
   17b44:	lsl	r3, r4, #1
   17b48:	ldrh	r3, [r2, r3]
   17b4c:	tst	r3, #8192	; 0x2000
   17b50:	beq	17b6c <__assert_fail@plt+0x6bb0>
   17b54:	mov	r3, sl
   17b58:	ldrb	r4, [r3, #1]!
   17b5c:	lsl	r1, r4, #1
   17b60:	ldrh	r1, [r2, r1]
   17b64:	tst	r1, #8192	; 0x2000
   17b68:	bne	17b58 <__assert_fail@plt+0x6b9c>
   17b6c:	cmp	r4, #45	; 0x2d
   17b70:	beq	17c0c <__assert_fail@plt+0x6c50>
   17b74:	mov	r2, r6
   17b78:	mov	r3, #0
   17b7c:	mov	r1, r5
   17b80:	mov	r0, sl
   17b84:	bl	10d94 <__strtoull_internal@plt>
   17b88:	ldr	r8, [r5]
   17b8c:	mov	r6, r0
   17b90:	mov	r7, r1
   17b94:	cmp	r8, sl
   17b98:	beq	17bf4 <__assert_fail@plt+0x6c38>
   17b9c:	ldr	r4, [fp]
   17ba0:	cmp	r4, #0
   17ba4:	bne	17be4 <__assert_fail@plt+0x6c28>
   17ba8:	ldr	r3, [sp, #72]	; 0x48
   17bac:	cmp	r3, #0
   17bb0:	beq	17bc0 <__assert_fail@plt+0x6c04>
   17bb4:	ldrb	sl, [r8]
   17bb8:	cmp	sl, #0
   17bbc:	bne	17f78 <__assert_fail@plt+0x6fbc>
   17bc0:	strd	r6, [r9]
   17bc4:	mov	r0, r4
   17bc8:	add	sp, sp, #36	; 0x24
   17bcc:	ldrd	r4, [sp]
   17bd0:	ldrd	r6, [sp, #8]
   17bd4:	ldrd	r8, [sp, #16]
   17bd8:	ldrd	sl, [sp, #24]
   17bdc:	add	sp, sp, #32
   17be0:	pop	{pc}		; (ldr pc, [sp], #4)
   17be4:	cmp	r4, #34	; 0x22
   17be8:	bne	17c0c <__assert_fail@plt+0x6c50>
   17bec:	mov	r4, #1
   17bf0:	b	17ba8 <__assert_fail@plt+0x6bec>
   17bf4:	ldr	r3, [sp, #72]	; 0x48
   17bf8:	cmp	r3, #0
   17bfc:	beq	17c0c <__assert_fail@plt+0x6c50>
   17c00:	ldrb	sl, [sl]
   17c04:	cmp	sl, #0
   17c08:	bne	17c14 <__assert_fail@plt+0x6c58>
   17c0c:	mov	r4, #4
   17c10:	b	17bc4 <__assert_fail@plt+0x6c08>
   17c14:	mov	r1, sl
   17c18:	mov	r0, r3
   17c1c:	bl	10ee4 <strchr@plt>
   17c20:	cmp	r0, #0
   17c24:	movne	r4, #0
   17c28:	movne	r6, #1
   17c2c:	movne	r7, r4
   17c30:	beq	17c0c <__assert_fail@plt+0x6c50>
   17c34:	sub	r3, sl, #69	; 0x45
   17c38:	cmp	r3, #47	; 0x2f
   17c3c:	ldrls	pc, [pc, r3, lsl #2]
   17c40:	b	17d48 <__assert_fail@plt+0x6d8c>
   17c44:	andeq	r7, r1, r4, lsl #26
   17c48:	andeq	r7, r1, r8, asr #26
   17c4c:	andeq	r7, r1, r4, lsl #26
   17c50:	andeq	r7, r1, r8, asr #26
   17c54:	andeq	r7, r1, r8, asr #26
   17c58:	andeq	r7, r1, r8, asr #26
   17c5c:	andeq	r7, r1, r4, lsl #26
   17c60:	andeq	r7, r1, r8, asr #26
   17c64:	andeq	r7, r1, r4, lsl #26
   17c68:	andeq	r7, r1, r8, asr #26
   17c6c:	andeq	r7, r1, r8, asr #26
   17c70:	andeq	r7, r1, r4, lsl #26
   17c74:	andeq	r7, r1, r8, asr #26
   17c78:	andeq	r7, r1, r8, asr #26
   17c7c:	andeq	r7, r1, r8, asr #26
   17c80:	andeq	r7, r1, r4, lsl #26
   17c84:	andeq	r7, r1, r8, asr #26
   17c88:	andeq	r7, r1, r8, asr #26
   17c8c:	andeq	r7, r1, r8, asr #26
   17c90:	andeq	r7, r1, r8, asr #26
   17c94:	andeq	r7, r1, r4, lsl #26
   17c98:	andeq	r7, r1, r4, lsl #26
   17c9c:	andeq	r7, r1, r8, asr #26
   17ca0:	andeq	r7, r1, r8, asr #26
   17ca4:	andeq	r7, r1, r8, asr #26
   17ca8:	andeq	r7, r1, r8, asr #26
   17cac:	andeq	r7, r1, r8, asr #26
   17cb0:	andeq	r7, r1, r8, asr #26
   17cb4:	andeq	r7, r1, r8, asr #26
   17cb8:	andeq	r7, r1, r8, asr #26
   17cbc:	andeq	r7, r1, r8, asr #26
   17cc0:	andeq	r7, r1, r8, asr #26
   17cc4:	andeq	r7, r1, r8, asr #26
   17cc8:	andeq	r7, r1, r8, asr #26
   17ccc:	andeq	r7, r1, r4, lsl #26
   17cd0:	andeq	r7, r1, r8, asr #26
   17cd4:	andeq	r7, r1, r8, asr #26
   17cd8:	andeq	r7, r1, r8, asr #26
   17cdc:	andeq	r7, r1, r4, lsl #26
   17ce0:	andeq	r7, r1, r8, asr #26
   17ce4:	andeq	r7, r1, r4, lsl #26
   17ce8:	andeq	r7, r1, r8, asr #26
   17cec:	andeq	r7, r1, r8, asr #26
   17cf0:	andeq	r7, r1, r8, asr #26
   17cf4:	andeq	r7, r1, r8, asr #26
   17cf8:	andeq	r7, r1, r8, asr #26
   17cfc:	andeq	r7, r1, r8, asr #26
   17d00:	andeq	r7, r1, r4, lsl #26
   17d04:	mov	r1, #48	; 0x30
   17d08:	ldr	r0, [sp, #72]	; 0x48
   17d0c:	bl	10ee4 <strchr@plt>
   17d10:	cmp	r0, #0
   17d14:	beq	17d48 <__assert_fail@plt+0x6d8c>
   17d18:	ldrb	r3, [r8, #1]
   17d1c:	cmp	r3, #68	; 0x44
   17d20:	beq	182d8 <__assert_fail@plt+0x731c>
   17d24:	cmp	r3, #105	; 0x69
   17d28:	beq	17f90 <__assert_fail@plt+0x6fd4>
   17d2c:	cmp	r3, #66	; 0x42
   17d30:	moveq	r3, #2
   17d34:	movne	r3, #1
   17d38:	moveq	ip, #1000	; 0x3e8
   17d3c:	movne	ip, #1024	; 0x400
   17d40:	str	r3, [sp, #12]
   17d44:	b	17d54 <__assert_fail@plt+0x6d98>
   17d48:	mov	r3, #1
   17d4c:	mov	ip, #1024	; 0x400
   17d50:	str	r3, [sp, #12]
   17d54:	sub	sl, sl, #66	; 0x42
   17d58:	cmp	sl, #53	; 0x35
   17d5c:	ldrls	pc, [pc, sl, lsl #2]
   17d60:	b	17f3c <__assert_fail@plt+0x6f80>
   17d64:	andeq	r8, r1, r4, lsr #4
   17d68:	andeq	r7, r1, ip, lsr pc
   17d6c:	andeq	r7, r1, ip, lsr pc
   17d70:	andeq	r8, r1, r4, asr #3
   17d74:	andeq	r7, r1, ip, lsr pc
   17d78:	andeq	r8, r1, r0, asr #4
   17d7c:	andeq	r7, r1, ip, lsr pc
   17d80:	andeq	r7, r1, ip, lsr pc
   17d84:	andeq	r7, r1, ip, lsr pc
   17d88:	andeq	r7, r1, r4, asr #30
   17d8c:	andeq	r7, r1, ip, lsr pc
   17d90:	andeq	r8, r1, ip, ror #2
   17d94:	andeq	r7, r1, ip, lsr pc
   17d98:	andeq	r7, r1, ip, lsr pc
   17d9c:	andeq	r8, r1, r0, lsl r1
   17da0:	andeq	r7, r1, ip, lsr pc
   17da4:	andeq	r7, r1, ip, lsr pc
   17da8:	andeq	r7, r1, ip, lsr pc
   17dac:	strheq	r8, [r1], -r0
   17db0:	andeq	r7, r1, ip, lsr pc
   17db4:	andeq	r7, r1, ip, lsr pc
   17db8:	andeq	r7, r1, ip, lsr pc
   17dbc:	andeq	r7, r1, ip, lsr pc
   17dc0:	andeq	r7, r1, r4, ror #31
   17dc4:	andeq	r7, r1, ip, lsr lr
   17dc8:	andeq	r7, r1, ip, lsr pc
   17dcc:	andeq	r7, r1, ip, lsr pc
   17dd0:	andeq	r7, r1, ip, lsr pc
   17dd4:	andeq	r7, r1, ip, lsr pc
   17dd8:	andeq	r7, r1, ip, lsr pc
   17ddc:	andeq	r7, r1, ip, lsr pc
   17de0:	andeq	r7, r1, ip, lsr pc
   17de4:	andeq	r7, r1, r4, asr #31
   17de8:	andeq	r7, r1, r4, lsr #30
   17dec:	andeq	r7, r1, ip, lsr pc
   17df0:	andeq	r7, r1, ip, lsr pc
   17df4:	andeq	r7, r1, ip, lsr pc
   17df8:	andeq	r8, r1, r0, asr #4
   17dfc:	andeq	r7, r1, ip, lsr pc
   17e00:	andeq	r7, r1, ip, lsr pc
   17e04:	andeq	r7, r1, ip, lsr pc
   17e08:	andeq	r7, r1, r4, asr #30
   17e0c:	andeq	r7, r1, ip, lsr pc
   17e10:	andeq	r8, r1, ip, ror #2
   17e14:	andeq	r7, r1, ip, lsr pc
   17e18:	andeq	r7, r1, ip, lsr pc
   17e1c:	andeq	r7, r1, ip, lsr pc
   17e20:	andeq	r7, r1, ip, lsr pc
   17e24:	andeq	r7, r1, ip, lsr pc
   17e28:	andeq	r7, r1, ip, lsr pc
   17e2c:	strheq	r8, [r1], -r0
   17e30:	andeq	r7, r1, ip, lsr pc
   17e34:	andeq	r7, r1, ip, lsr pc
   17e38:	andeq	r7, r1, ip, lsr #31
   17e3c:	asr	r3, ip, #31
   17e40:	mov	r2, ip
   17e44:	cmp	r7, #0
   17e48:	mov	r1, #0
   17e4c:	strd	r2, [sp]
   17e50:	bne	18390 <__assert_fail@plt+0x73d4>
   17e54:	umull	r6, r7, r6, ip
   17e58:	mov	r2, r6
   17e5c:	mov	r3, r7
   17e60:	cmp	r1, #0
   17e64:	bne	182a4 <__assert_fail@plt+0x72e8>
   17e68:	cmp	r3, #0
   17e6c:	mov	lr, r1
   17e70:	bne	184bc <__assert_fail@plt+0x7500>
   17e74:	umull	r2, r3, r2, ip
   17e78:	mov	r0, r2
   17e7c:	mov	r1, r3
   17e80:	cmp	lr, #0
   17e84:	bne	182a4 <__assert_fail@plt+0x72e8>
   17e88:	cmp	r1, #0
   17e8c:	bne	18498 <__assert_fail@plt+0x74dc>
   17e90:	umull	r0, r1, r0, ip
   17e94:	mov	r2, r0
   17e98:	mov	r3, r1
   17e9c:	cmp	lr, #0
   17ea0:	bne	182a4 <__assert_fail@plt+0x72e8>
   17ea4:	cmp	r3, #0
   17ea8:	bne	18148 <__assert_fail@plt+0x718c>
   17eac:	umull	r2, r3, r2, ip
   17eb0:	mov	r0, r2
   17eb4:	mov	r1, r3
   17eb8:	cmp	lr, #0
   17ebc:	bne	182a4 <__assert_fail@plt+0x72e8>
   17ec0:	cmp	r1, #0
   17ec4:	bne	18348 <__assert_fail@plt+0x738c>
   17ec8:	umull	r0, r1, r0, ip
   17ecc:	mov	r2, r0
   17ed0:	mov	r3, r1
   17ed4:	cmp	lr, #0
   17ed8:	bne	182a4 <__assert_fail@plt+0x72e8>
   17edc:	cmp	r3, #0
   17ee0:	mov	r7, lr
   17ee4:	bne	18324 <__assert_fail@plt+0x7368>
   17ee8:	umull	r2, r3, r2, ip
   17eec:	mov	r6, r2
   17ef0:	mov	lr, r3
   17ef4:	cmp	r7, #0
   17ef8:	bne	182a4 <__assert_fail@plt+0x72e8>
   17efc:	cmp	lr, #0
   17f00:	bne	182e8 <__assert_fail@plt+0x732c>
   17f04:	umull	r2, r3, r6, ip
   17f08:	mov	r0, r2
   17f0c:	mov	r2, r3
   17f10:	subs	r3, r7, #0
   17f14:	bne	182a4 <__assert_fail@plt+0x72e8>
   17f18:	mov	r6, r0
   17f1c:	mov	r7, r2
   17f20:	orr	r4, r4, r3
   17f24:	ldr	r2, [sp, #12]
   17f28:	add	r3, r8, r2
   17f2c:	str	r3, [r5]
   17f30:	ldrb	r3, [r8, r2]
   17f34:	cmp	r3, #0
   17f38:	beq	17bc0 <__assert_fail@plt+0x6c04>
   17f3c:	orr	r4, r4, #2
   17f40:	b	17bc0 <__assert_fail@plt+0x6c04>
   17f44:	cmp	r7, #0
   17f48:	asr	r1, ip, #31
   17f4c:	mov	lr, #0
   17f50:	bne	182b4 <__assert_fail@plt+0x72f8>
   17f54:	umull	r2, r3, r6, ip
   17f58:	mov	r6, r2
   17f5c:	mov	r7, r3
   17f60:	cmp	lr, #0
   17f64:	beq	17f24 <__assert_fail@plt+0x6f68>
   17f68:	mvn	r6, #0
   17f6c:	mov	r4, #1
   17f70:	mov	r7, r6
   17f74:	b	17f24 <__assert_fail@plt+0x6f68>
   17f78:	mov	r0, r3
   17f7c:	mov	r1, sl
   17f80:	bl	10ee4 <strchr@plt>
   17f84:	cmp	r0, #0
   17f88:	bne	17c34 <__assert_fail@plt+0x6c78>
   17f8c:	b	17f3c <__assert_fail@plt+0x6f80>
   17f90:	ldrb	r3, [r8, #2]
   17f94:	mov	ip, #1024	; 0x400
   17f98:	cmp	r3, #66	; 0x42
   17f9c:	movne	r3, #1
   17fa0:	moveq	r3, #3
   17fa4:	str	r3, [sp, #12]
   17fa8:	b	17d54 <__assert_fail@plt+0x6d98>
   17fac:	lsr	r3, r7, #31
   17fb0:	adds	r6, r6, r6
   17fb4:	adc	r7, r7, r7
   17fb8:	cmp	r3, #0
   17fbc:	beq	17f24 <__assert_fail@plt+0x6f68>
   17fc0:	b	17f68 <__assert_fail@plt+0x6fac>
   17fc4:	lsr	r3, r7, #23
   17fc8:	lsl	r7, r7, #9
   17fcc:	cmp	r3, #0
   17fd0:	lsl	r3, r6, #9
   17fd4:	orr	r7, r7, r6, lsr #23
   17fd8:	bne	17f68 <__assert_fail@plt+0x6fac>
   17fdc:	mov	r6, r3
   17fe0:	b	17f24 <__assert_fail@plt+0x6f68>
   17fe4:	asr	r3, ip, #31
   17fe8:	mov	r2, ip
   17fec:	cmp	r7, #0
   17ff0:	mov	r1, #0
   17ff4:	strd	r2, [sp]
   17ff8:	bne	18404 <__assert_fail@plt+0x7448>
   17ffc:	umull	r6, r7, r6, ip
   18000:	mov	r0, r6
   18004:	mov	fp, r7
   18008:	cmp	r1, #0
   1800c:	bne	182a4 <__assert_fail@plt+0x72e8>
   18010:	cmp	fp, #0
   18014:	mov	lr, r1
   18018:	bne	18594 <__assert_fail@plt+0x75d8>
   1801c:	umull	r0, r1, r0, ip
   18020:	mov	r2, r0
   18024:	mov	r3, r1
   18028:	cmp	lr, #0
   1802c:	bne	182a4 <__assert_fail@plt+0x72e8>
   18030:	cmp	r3, #0
   18034:	bne	185bc <__assert_fail@plt+0x7600>
   18038:	umull	r2, r3, r2, ip
   1803c:	mov	r0, r2
   18040:	mov	r1, r3
   18044:	cmp	lr, #0
   18048:	bne	182a4 <__assert_fail@plt+0x72e8>
   1804c:	cmp	r1, #0
   18050:	bne	1853c <__assert_fail@plt+0x7580>
   18054:	umull	r0, r1, r0, ip
   18058:	mov	r2, r0
   1805c:	mov	r3, r1
   18060:	cmp	lr, #0
   18064:	bne	182a4 <__assert_fail@plt+0x72e8>
   18068:	cmp	r3, #0
   1806c:	bne	1836c <__assert_fail@plt+0x73b0>
   18070:	umull	r2, r3, r2, ip
   18074:	mov	r0, r2
   18078:	mov	r1, r3
   1807c:	cmp	lr, #0
   18080:	bne	182a4 <__assert_fail@plt+0x72e8>
   18084:	cmp	r1, #0
   18088:	beq	17ec8 <__assert_fail@plt+0x6f0c>
   1808c:	umull	r6, r7, r0, ip
   18090:	mov	fp, lr
   18094:	mov	sl, r7
   18098:	umlal	sl, fp, r1, ip
   1809c:	cmp	fp, #0
   180a0:	bne	187a4 <__assert_fail@plt+0x77e8>
   180a4:	mov	r2, r6
   180a8:	mov	r3, sl
   180ac:	b	17ed4 <__assert_fail@plt+0x6f18>
   180b0:	asr	r3, ip, #31
   180b4:	mov	r2, ip
   180b8:	cmp	r7, #0
   180bc:	mov	r1, #0
   180c0:	strd	r2, [sp]
   180c4:	bne	18428 <__assert_fail@plt+0x746c>
   180c8:	umull	r6, r7, r6, ip
   180cc:	mov	r0, r6
   180d0:	mov	fp, r7
   180d4:	cmp	r1, #0
   180d8:	bne	182a4 <__assert_fail@plt+0x72e8>
   180dc:	cmp	fp, #0
   180e0:	mov	lr, r1
   180e4:	beq	17ec8 <__assert_fail@plt+0x6f0c>
   180e8:	umull	r6, r7, r0, ip
   180ec:	mov	r3, r1
   180f0:	mov	r2, r7
   180f4:	umlal	r2, r3, fp, ip
   180f8:	cmp	r3, #0
   180fc:	strd	r2, [sp, #16]
   18100:	bne	18688 <__assert_fail@plt+0x76cc>
   18104:	mov	r2, r6
   18108:	ldr	r3, [sp, #16]
   1810c:	b	17ed4 <__assert_fail@plt+0x6f18>
   18110:	asr	r3, ip, #31
   18114:	mov	r2, ip
   18118:	cmp	r7, #0
   1811c:	mov	r1, #0
   18120:	strd	r2, [sp]
   18124:	bne	18470 <__assert_fail@plt+0x74b4>
   18128:	umull	r6, r7, r6, ip
   1812c:	mov	r2, r6
   18130:	mov	r3, r7
   18134:	cmp	r1, #0
   18138:	bne	182a4 <__assert_fail@plt+0x72e8>
   1813c:	cmp	r3, #0
   18140:	mov	lr, r1
   18144:	beq	17eac <__assert_fail@plt+0x6ef0>
   18148:	umull	r6, r7, r2, ip
   1814c:	mov	fp, lr
   18150:	mov	sl, r7
   18154:	umlal	sl, fp, r3, ip
   18158:	cmp	fp, #0
   1815c:	bne	18768 <__assert_fail@plt+0x77ac>
   18160:	mov	r0, r6
   18164:	mov	r1, sl
   18168:	b	17eb8 <__assert_fail@plt+0x6efc>
   1816c:	asr	r3, ip, #31
   18170:	mov	r2, ip
   18174:	cmp	r7, #0
   18178:	mov	r1, #0
   1817c:	strd	r2, [sp]
   18180:	bne	1844c <__assert_fail@plt+0x7490>
   18184:	umull	r6, r7, r6, ip
   18188:	mov	sl, r6
   1818c:	mov	lr, r7
   18190:	cmp	r1, #0
   18194:	bne	17f68 <__assert_fail@plt+0x6fac>
   18198:	cmp	lr, #0
   1819c:	mov	r7, r1
   181a0:	bne	18560 <__assert_fail@plt+0x75a4>
   181a4:	umull	sl, fp, sl, ip
   181a8:	mov	r0, sl
   181ac:	mov	r2, fp
   181b0:	cmp	r7, #0
   181b4:	mov	r6, r0
   181b8:	mov	r7, r2
   181bc:	beq	17f24 <__assert_fail@plt+0x6f68>
   181c0:	b	17f68 <__assert_fail@plt+0x6fac>
   181c4:	asr	r3, ip, #31
   181c8:	mov	r2, ip
   181cc:	cmp	r7, #0
   181d0:	mov	r1, #0
   181d4:	strd	r2, [sp]
   181d8:	bne	183e0 <__assert_fail@plt+0x7424>
   181dc:	umull	r6, r7, r6, ip
   181e0:	mov	r0, r6
   181e4:	mov	fp, r7
   181e8:	cmp	r1, #0
   181ec:	bne	182a4 <__assert_fail@plt+0x72e8>
   181f0:	cmp	fp, #0
   181f4:	mov	lr, r1
   181f8:	beq	18054 <__assert_fail@plt+0x7098>
   181fc:	umull	r6, r7, r0, ip
   18200:	mov	r3, r1
   18204:	mov	r2, r7
   18208:	umlal	r2, r3, fp, ip
   1820c:	cmp	r3, #0
   18210:	strd	r2, [sp, #16]
   18214:	bne	186f8 <__assert_fail@plt+0x773c>
   18218:	mov	r2, r6
   1821c:	ldr	r3, [sp, #16]
   18220:	b	18060 <__assert_fail@plt+0x70a4>
   18224:	lsr	r3, r7, #22
   18228:	lsl	r7, r7, #10
   1822c:	cmp	r3, #0
   18230:	lsl	r3, r6, #10
   18234:	orr	r7, r7, r6, lsr #22
   18238:	beq	17fdc <__assert_fail@plt+0x7020>
   1823c:	b	17f68 <__assert_fail@plt+0x6fac>
   18240:	asr	r3, ip, #31
   18244:	mov	r2, ip
   18248:	cmp	r7, #0
   1824c:	mov	r1, #0
   18250:	strd	r2, [sp]
   18254:	bne	183b8 <__assert_fail@plt+0x73fc>
   18258:	umull	r6, r7, r6, ip
   1825c:	mov	r2, r6
   18260:	mov	r3, r7
   18264:	cmp	r1, #0
   18268:	bne	17f68 <__assert_fail@plt+0x6fac>
   1826c:	cmp	r3, #0
   18270:	mov	r7, r1
   18274:	bne	1851c <__assert_fail@plt+0x7560>
   18278:	umull	r2, r3, r2, ip
   1827c:	mov	r6, r2
   18280:	mov	lr, r3
   18284:	cmp	r7, #0
   18288:	bne	17f68 <__assert_fail@plt+0x6fac>
   1828c:	cmp	lr, #0
   18290:	bne	184e0 <__assert_fail@plt+0x7524>
   18294:	umull	r2, r3, r6, ip
   18298:	mov	r0, r2
   1829c:	mov	r2, r3
   182a0:	b	181b0 <__assert_fail@plt+0x71f4>
   182a4:	mvn	r6, #0
   182a8:	mov	r3, #1
   182ac:	mov	r7, r6
   182b0:	b	17f20 <__assert_fail@plt+0x6f64>
   182b4:	umull	sl, fp, r6, ip
   182b8:	mov	r3, lr
   182bc:	mov	r2, fp
   182c0:	umlal	r2, r3, r7, ip
   182c4:	cmp	r3, #0
   182c8:	bne	186c0 <__assert_fail@plt+0x7704>
   182cc:	mov	r6, sl
   182d0:	mov	r7, r2
   182d4:	b	17f60 <__assert_fail@plt+0x6fa4>
   182d8:	mov	r3, #2
   182dc:	mov	ip, #1000	; 0x3e8
   182e0:	str	r3, [sp, #12]
   182e4:	b	17d54 <__assert_fail@plt+0x6d98>
   182e8:	umull	r0, r1, r6, ip
   182ec:	mov	r3, r7
   182f0:	mov	r2, r1
   182f4:	strd	r0, [sp, #16]
   182f8:	umlal	r2, r3, lr, ip
   182fc:	cmp	r3, #0
   18300:	beq	17f10 <__assert_fail@plt+0x6f54>
   18304:	ldrd	sl, [sp]
   18308:	mov	r7, #1
   1830c:	ldr	r0, [sp, #16]
   18310:	ldr	r3, [sp, #20]
   18314:	mul	r2, r6, fp
   18318:	mla	r2, lr, sl, r2
   1831c:	add	r2, r2, r3
   18320:	b	17f10 <__assert_fail@plt+0x6f54>
   18324:	umull	sl, fp, r2, ip
   18328:	mov	r1, lr
   1832c:	mov	r0, fp
   18330:	umlal	r0, r1, r3, ip
   18334:	cmp	r1, #0
   18338:	bne	18618 <__assert_fail@plt+0x765c>
   1833c:	mov	r6, sl
   18340:	mov	lr, r0
   18344:	b	17ef4 <__assert_fail@plt+0x6f38>
   18348:	umull	sl, fp, r0, ip
   1834c:	mov	r7, lr
   18350:	mov	r6, fp
   18354:	umlal	r6, r7, r1, ip
   18358:	cmp	r7, #0
   1835c:	bne	187c0 <__assert_fail@plt+0x7804>
   18360:	mov	r2, sl
   18364:	mov	r3, r6
   18368:	b	17ed4 <__assert_fail@plt+0x6f18>
   1836c:	umull	sl, fp, r2, ip
   18370:	mov	r7, lr
   18374:	mov	r6, fp
   18378:	umlal	r6, r7, r3, ip
   1837c:	cmp	r7, #0
   18380:	bne	18650 <__assert_fail@plt+0x7694>
   18384:	mov	r0, sl
   18388:	mov	r1, r6
   1838c:	b	1807c <__assert_fail@plt+0x70c0>
   18390:	umull	sl, fp, r6, ip
   18394:	mov	r3, r1
   18398:	mov	r2, fp
   1839c:	umlal	r2, r3, r7, ip
   183a0:	cmp	r3, #0
   183a4:	strd	r2, [sp, #16]
   183a8:	bne	18634 <__assert_fail@plt+0x7678>
   183ac:	mov	r2, sl
   183b0:	ldr	r3, [sp, #16]
   183b4:	b	17e60 <__assert_fail@plt+0x6ea4>
   183b8:	umull	sl, fp, r6, ip
   183bc:	mov	r3, r1
   183c0:	mov	r2, fp
   183c4:	umlal	r2, r3, r7, ip
   183c8:	cmp	r3, #0
   183cc:	strd	r2, [sp, #16]
   183d0:	bne	18714 <__assert_fail@plt+0x7758>
   183d4:	mov	r2, sl
   183d8:	ldr	r3, [sp, #16]
   183dc:	b	18264 <__assert_fail@plt+0x72a8>
   183e0:	umull	sl, fp, r6, ip
   183e4:	mov	r3, r1
   183e8:	mov	r2, fp
   183ec:	umlal	r2, r3, r7, ip
   183f0:	cmp	r3, #0
   183f4:	bne	185e0 <__assert_fail@plt+0x7624>
   183f8:	mov	r0, sl
   183fc:	mov	fp, r2
   18400:	b	181e8 <__assert_fail@plt+0x722c>
   18404:	umull	sl, fp, r6, ip
   18408:	mov	r3, r1
   1840c:	mov	r2, fp
   18410:	umlal	r2, r3, r7, ip
   18414:	cmp	r3, #0
   18418:	bne	186a4 <__assert_fail@plt+0x76e8>
   1841c:	mov	r0, sl
   18420:	mov	fp, r2
   18424:	b	18008 <__assert_fail@plt+0x704c>
   18428:	umull	sl, fp, r6, ip
   1842c:	mov	r3, r1
   18430:	mov	r2, fp
   18434:	umlal	r2, r3, r7, ip
   18438:	cmp	r3, #0
   1843c:	bne	18730 <__assert_fail@plt+0x7774>
   18440:	mov	r0, sl
   18444:	mov	fp, r2
   18448:	b	180d4 <__assert_fail@plt+0x7118>
   1844c:	umull	sl, fp, r6, ip
   18450:	mov	r3, r1
   18454:	mov	r2, fp
   18458:	strd	sl, [sp, #16]
   1845c:	umlal	r2, r3, r7, ip
   18460:	cmp	r3, #0
   18464:	bne	186d8 <__assert_fail@plt+0x771c>
   18468:	mov	lr, r2
   1846c:	b	18190 <__assert_fail@plt+0x71d4>
   18470:	umull	sl, fp, r6, ip
   18474:	mov	r3, r1
   18478:	mov	r2, fp
   1847c:	umlal	r2, r3, r7, ip
   18480:	cmp	r3, #0
   18484:	strd	r2, [sp, #16]
   18488:	bne	187dc <__assert_fail@plt+0x7820>
   1848c:	mov	r2, sl
   18490:	ldr	r3, [sp, #16]
   18494:	b	18134 <__assert_fail@plt+0x7178>
   18498:	umull	sl, fp, r0, ip
   1849c:	mov	r7, lr
   184a0:	mov	r6, fp
   184a4:	umlal	r6, r7, r1, ip
   184a8:	cmp	r7, #0
   184ac:	bne	187f8 <__assert_fail@plt+0x783c>
   184b0:	mov	r2, sl
   184b4:	mov	r3, r6
   184b8:	b	17e9c <__assert_fail@plt+0x6ee0>
   184bc:	umull	r6, r7, r2, ip
   184c0:	mov	fp, r1
   184c4:	mov	sl, r7
   184c8:	umlal	sl, fp, r3, ip
   184cc:	cmp	fp, #0
   184d0:	bne	1866c <__assert_fail@plt+0x76b0>
   184d4:	mov	r0, r6
   184d8:	mov	r1, sl
   184dc:	b	17e80 <__assert_fail@plt+0x6ec4>
   184e0:	umull	r0, r1, r6, ip
   184e4:	mov	r3, r7
   184e8:	mov	r2, r1
   184ec:	strd	r0, [sp, #16]
   184f0:	umlal	r2, r3, lr, ip
   184f4:	cmp	r3, #0
   184f8:	beq	181b0 <__assert_fail@plt+0x71f4>
   184fc:	ldrd	sl, [sp]
   18500:	mov	r7, #1
   18504:	ldr	r0, [sp, #16]
   18508:	ldr	r3, [sp, #20]
   1850c:	mul	r2, r6, fp
   18510:	mla	r2, lr, sl, r2
   18514:	add	r2, r2, r3
   18518:	b	181b0 <__assert_fail@plt+0x71f4>
   1851c:	umull	sl, fp, r2, ip
   18520:	mov	r0, fp
   18524:	umlal	r0, r1, r3, ip
   18528:	cmp	r1, #0
   1852c:	bne	18814 <__assert_fail@plt+0x7858>
   18530:	mov	r6, sl
   18534:	mov	lr, r0
   18538:	b	18284 <__assert_fail@plt+0x72c8>
   1853c:	umull	r6, r7, r0, ip
   18540:	mov	fp, lr
   18544:	mov	sl, r7
   18548:	umlal	sl, fp, r1, ip
   1854c:	cmp	fp, #0
   18550:	bne	1874c <__assert_fail@plt+0x7790>
   18554:	mov	r2, r6
   18558:	mov	r3, sl
   1855c:	b	18060 <__assert_fail@plt+0x70a4>
   18560:	umull	r0, r1, sl, ip
   18564:	mov	r3, r7
   18568:	mov	r2, r1
   1856c:	umlal	r2, r3, lr, ip
   18570:	cmp	r3, #0
   18574:	beq	181b0 <__assert_fail@plt+0x71f4>
   18578:	ldr	r3, [sp, #4]
   1857c:	mov	r7, #1
   18580:	mul	r2, sl, r3
   18584:	ldr	r3, [sp]
   18588:	mla	r2, lr, r3, r2
   1858c:	add	r2, r2, r1
   18590:	b	181b0 <__assert_fail@plt+0x71f4>
   18594:	umull	r6, r7, r0, ip
   18598:	mov	r3, r1
   1859c:	mov	r2, r7
   185a0:	umlal	r2, r3, fp, ip
   185a4:	cmp	r3, #0
   185a8:	strd	r2, [sp, #16]
   185ac:	bne	18830 <__assert_fail@plt+0x7874>
   185b0:	mov	r2, r6
   185b4:	ldr	r3, [sp, #16]
   185b8:	b	18028 <__assert_fail@plt+0x706c>
   185bc:	umull	sl, fp, r2, ip
   185c0:	mov	r7, lr
   185c4:	mov	r6, fp
   185c8:	umlal	r6, r7, r3, ip
   185cc:	cmp	r7, #0
   185d0:	bne	185fc <__assert_fail@plt+0x7640>
   185d4:	mov	r0, sl
   185d8:	mov	r1, r6
   185dc:	b	18044 <__assert_fail@plt+0x7088>
   185e0:	ldrd	r2, [sp]
   185e4:	mov	r0, sl
   185e8:	mov	r1, #1
   185ec:	mul	r6, r6, r3
   185f0:	mla	r7, r2, r7, r6
   185f4:	add	fp, r7, fp
   185f8:	b	181e8 <__assert_fail@plt+0x722c>
   185fc:	ldrd	r6, [sp]
   18600:	mov	r0, sl
   18604:	mov	lr, #1
   18608:	mul	r2, r2, r7
   1860c:	mla	r1, r3, r6, r2
   18610:	add	r1, r1, fp
   18614:	b	18044 <__assert_fail@plt+0x7088>
   18618:	ldrd	r0, [sp]
   1861c:	mov	r6, sl
   18620:	mov	r7, #1
   18624:	mul	r2, r2, r1
   18628:	mla	lr, r3, r0, r2
   1862c:	add	lr, lr, fp
   18630:	b	17ef4 <__assert_fail@plt+0x6f38>
   18634:	ldm	sp, {r0, r3}
   18638:	mov	r2, sl
   1863c:	mov	r1, #1
   18640:	mul	r3, r6, r3
   18644:	mla	r3, r0, r7, r3
   18648:	add	r3, r3, fp
   1864c:	b	17e60 <__assert_fail@plt+0x6ea4>
   18650:	ldrd	r6, [sp]
   18654:	mov	r0, sl
   18658:	mov	lr, #1
   1865c:	mul	r2, r2, r7
   18660:	mla	r1, r3, r6, r2
   18664:	add	r1, r1, fp
   18668:	b	1807c <__assert_fail@plt+0x70c0>
   1866c:	ldrd	sl, [sp]
   18670:	mov	r0, r6
   18674:	mov	lr, #1
   18678:	mul	r2, r2, fp
   1867c:	mla	r1, r3, sl, r2
   18680:	add	r1, r1, r7
   18684:	b	17e80 <__assert_fail@plt+0x6ec4>
   18688:	ldm	sp, {r1, r3}
   1868c:	mov	r2, r6
   18690:	mov	lr, #1
   18694:	mul	r3, r0, r3
   18698:	mla	r3, fp, r1, r3
   1869c:	add	r3, r3, r7
   186a0:	b	17ed4 <__assert_fail@plt+0x6f18>
   186a4:	ldrd	r2, [sp]
   186a8:	mov	r0, sl
   186ac:	mov	r1, #1
   186b0:	mul	r6, r6, r3
   186b4:	mla	r7, r2, r7, r6
   186b8:	add	fp, r7, fp
   186bc:	b	18008 <__assert_fail@plt+0x704c>
   186c0:	mul	r3, r6, r1
   186c4:	mov	lr, #1
   186c8:	mov	r6, sl
   186cc:	mla	r7, ip, r7, r3
   186d0:	add	r7, r7, fp
   186d4:	b	17f60 <__assert_fail@plt+0x6fa4>
   186d8:	ldrd	r2, [sp]
   186dc:	mov	r1, #1
   186e0:	ldr	sl, [sp, #16]
   186e4:	mul	lr, r6, r3
   186e8:	ldr	r3, [sp, #20]
   186ec:	mla	lr, r2, r7, lr
   186f0:	add	lr, lr, r3
   186f4:	b	18190 <__assert_fail@plt+0x71d4>
   186f8:	ldm	sp, {r1, r3}
   186fc:	mov	r2, r6
   18700:	mov	lr, #1
   18704:	mul	r3, r0, r3
   18708:	mla	r3, fp, r1, r3
   1870c:	add	r3, r3, r7
   18710:	b	18060 <__assert_fail@plt+0x70a4>
   18714:	ldm	sp, {r0, r3}
   18718:	mov	r2, sl
   1871c:	mov	r1, #1
   18720:	mul	r3, r6, r3
   18724:	mla	r3, r0, r7, r3
   18728:	add	r3, r3, fp
   1872c:	b	18264 <__assert_fail@plt+0x72a8>
   18730:	ldrd	r2, [sp]
   18734:	mov	r0, sl
   18738:	mov	r1, #1
   1873c:	mul	r6, r6, r3
   18740:	mla	r7, r2, r7, r6
   18744:	add	fp, r7, fp
   18748:	b	180d4 <__assert_fail@plt+0x7118>
   1874c:	ldrd	sl, [sp]
   18750:	mov	r2, r6
   18754:	mov	lr, #1
   18758:	mul	r3, r0, fp
   1875c:	mla	r3, r1, sl, r3
   18760:	add	r3, r3, r7
   18764:	b	18060 <__assert_fail@plt+0x70a4>
   18768:	ldrd	sl, [sp]
   1876c:	mov	r0, r6
   18770:	mov	lr, #1
   18774:	mul	r2, r2, fp
   18778:	mla	r1, r3, sl, r2
   1877c:	add	r1, r1, r7
   18780:	b	17eb8 <__assert_fail@plt+0x6efc>
   18784:	movw	r3, #40124	; 0x9cbc
   18788:	movt	r3, #1
   1878c:	movw	r1, #40136	; 0x9cc8
   18790:	movt	r1, #1
   18794:	movw	r0, #40152	; 0x9cd8
   18798:	movt	r0, #1
   1879c:	mov	r2, #85	; 0x55
   187a0:	bl	10fbc <__assert_fail@plt>
   187a4:	ldrd	sl, [sp]
   187a8:	mov	r2, r6
   187ac:	mov	lr, #1
   187b0:	mul	r3, r0, fp
   187b4:	mla	r3, r1, sl, r3
   187b8:	add	r3, r3, r7
   187bc:	b	17ed4 <__assert_fail@plt+0x6f18>
   187c0:	ldrd	r6, [sp]
   187c4:	mov	r2, sl
   187c8:	mov	lr, #1
   187cc:	mul	r3, r0, r7
   187d0:	mla	r3, r1, r6, r3
   187d4:	add	r3, r3, fp
   187d8:	b	17ed4 <__assert_fail@plt+0x6f18>
   187dc:	ldm	sp, {r0, r3}
   187e0:	mov	r2, sl
   187e4:	mov	r1, #1
   187e8:	mul	r3, r6, r3
   187ec:	mla	r3, r0, r7, r3
   187f0:	add	r3, r3, fp
   187f4:	b	18134 <__assert_fail@plt+0x7178>
   187f8:	ldrd	r6, [sp]
   187fc:	mov	r2, sl
   18800:	mov	lr, #1
   18804:	mul	r3, r0, r7
   18808:	mla	r3, r1, r6, r3
   1880c:	add	r3, r3, fp
   18810:	b	17e9c <__assert_fail@plt+0x6ee0>
   18814:	ldrd	r0, [sp]
   18818:	mov	r6, sl
   1881c:	mov	r7, #1
   18820:	mul	r2, r2, r1
   18824:	mla	lr, r3, r0, r2
   18828:	add	lr, lr, fp
   1882c:	b	18284 <__assert_fail@plt+0x72c8>
   18830:	ldm	sp, {r1, r3}
   18834:	mov	r2, r6
   18838:	mov	lr, #1
   1883c:	mul	r3, r0, r3
   18840:	mla	r3, fp, r1, r3
   18844:	add	r3, r3, r7
   18848:	b	18028 <__assert_fail@plt+0x706c>
   1884c:	cmp	r1, #0
   18850:	cmpne	r0, #0
   18854:	beq	188a0 <__assert_fail@plt+0x78e4>
   18858:	strd	r4, [sp, #-16]!
   1885c:	umull	r4, r5, r0, r1
   18860:	str	r6, [sp, #8]
   18864:	str	lr, [sp, #12]
   18868:	adds	r3, r5, #0
   1886c:	movne	r3, #1
   18870:	cmp	r4, #0
   18874:	blt	18880 <__assert_fail@plt+0x78c4>
   18878:	cmp	r3, #0
   1887c:	beq	188ac <__assert_fail@plt+0x78f0>
   18880:	bl	10ef0 <__errno_location@plt>
   18884:	mov	r3, #12
   18888:	ldrd	r4, [sp]
   1888c:	ldr	r6, [sp, #8]
   18890:	add	sp, sp, #12
   18894:	str	r3, [r0]
   18898:	mov	r0, #0
   1889c:	pop	{pc}		; (ldr pc, [sp], #4)
   188a0:	mov	r1, #1
   188a4:	mov	r0, r1
   188a8:	b	10d28 <calloc@plt>
   188ac:	ldrd	r4, [sp]
   188b0:	ldr	r6, [sp, #8]
   188b4:	ldr	lr, [sp, #12]
   188b8:	add	sp, sp, #16
   188bc:	b	10d28 <calloc@plt>
   188c0:	cmp	r0, #0
   188c4:	beq	188d0 <__assert_fail@plt+0x7914>
   188c8:	blt	188d8 <__assert_fail@plt+0x791c>
   188cc:	b	10e6c <malloc@plt>
   188d0:	mov	r0, #1
   188d4:	b	10e6c <malloc@plt>
   188d8:	str	r4, [sp, #-8]!
   188dc:	str	lr, [sp, #4]
   188e0:	bl	10ef0 <__errno_location@plt>
   188e4:	mov	r3, #12
   188e8:	ldr	r4, [sp]
   188ec:	add	sp, sp, #4
   188f0:	str	r3, [r0]
   188f4:	mov	r0, #0
   188f8:	pop	{pc}		; (ldr pc, [sp], #4)
   188fc:	cmp	r0, #0
   18900:	beq	18928 <__assert_fail@plt+0x796c>
   18904:	cmp	r1, #0
   18908:	str	r4, [sp, #-8]!
   1890c:	str	lr, [sp, #4]
   18910:	beq	18930 <__assert_fail@plt+0x7974>
   18914:	blt	18944 <__assert_fail@plt+0x7988>
   18918:	ldr	r4, [sp]
   1891c:	ldr	lr, [sp, #4]
   18920:	add	sp, sp, #8
   18924:	b	10de8 <realloc@plt>
   18928:	mov	r0, r1
   1892c:	b	188c0 <__assert_fail@plt+0x7904>
   18930:	bl	12c28 <__assert_fail@plt+0x1c6c>
   18934:	ldr	r4, [sp]
   18938:	add	sp, sp, #4
   1893c:	mov	r0, #0
   18940:	pop	{pc}		; (ldr pc, [sp], #4)
   18944:	bl	10ef0 <__errno_location@plt>
   18948:	mov	r3, #12
   1894c:	str	r3, [r0]
   18950:	b	18934 <__assert_fail@plt+0x7978>
   18954:	strd	r4, [sp, #-16]!
   18958:	mov	r4, r0
   1895c:	str	r6, [sp, #8]
   18960:	str	lr, [sp, #12]
   18964:	bl	10e30 <__fpending@plt>
   18968:	ldr	r5, [r4]
   1896c:	mov	r6, r0
   18970:	mov	r0, r4
   18974:	bl	12b14 <__assert_fail@plt+0x1b58>
   18978:	mov	r4, r0
   1897c:	and	r5, r5, #32
   18980:	cmp	r5, #0
   18984:	bne	189bc <__assert_fail@plt+0x7a00>
   18988:	cmp	r0, #0
   1898c:	beq	189a8 <__assert_fail@plt+0x79ec>
   18990:	cmp	r6, #0
   18994:	bne	189d4 <__assert_fail@plt+0x7a18>
   18998:	bl	10ef0 <__errno_location@plt>
   1899c:	ldr	r4, [r0]
   189a0:	subs	r4, r4, #9
   189a4:	mvnne	r4, #0
   189a8:	mov	r0, r4
   189ac:	ldrd	r4, [sp]
   189b0:	ldr	r6, [sp, #8]
   189b4:	add	sp, sp, #12
   189b8:	pop	{pc}		; (ldr pc, [sp], #4)
   189bc:	cmp	r0, #0
   189c0:	bne	189d4 <__assert_fail@plt+0x7a18>
   189c4:	bl	10ef0 <__errno_location@plt>
   189c8:	str	r4, [r0]
   189cc:	mvn	r4, #0
   189d0:	b	189a8 <__assert_fail@plt+0x79ec>
   189d4:	mvn	r4, #0
   189d8:	b	189a8 <__assert_fail@plt+0x79ec>
   189dc:	mov	r0, #14
   189e0:	str	r4, [sp, #-8]!
   189e4:	str	lr, [sp, #4]
   189e8:	bl	10f80 <nl_langinfo@plt>
   189ec:	cmp	r0, #0
   189f0:	beq	18a14 <__assert_fail@plt+0x7a58>
   189f4:	ldrb	r2, [r0]
   189f8:	movw	r3, #40192	; 0x9d00
   189fc:	movt	r3, #1
   18a00:	ldr	r4, [sp]
   18a04:	add	sp, sp, #4
   18a08:	cmp	r2, #0
   18a0c:	moveq	r0, r3
   18a10:	pop	{pc}		; (ldr pc, [sp], #4)
   18a14:	ldr	r4, [sp]
   18a18:	add	sp, sp, #4
   18a1c:	movw	r0, #40192	; 0x9d00
   18a20:	movt	r0, #1
   18a24:	pop	{pc}		; (ldr pc, [sp], #4)
   18a28:	strd	r4, [sp, #-20]!	; 0xffffffec
   18a2c:	mov	r5, r2
   18a30:	strd	r6, [sp, #8]
   18a34:	subs	r6, r0, #0
   18a38:	mov	r7, r1
   18a3c:	str	lr, [sp, #16]
   18a40:	sub	sp, sp, #12
   18a44:	addeq	r6, sp, #4
   18a48:	mov	r0, r6
   18a4c:	bl	10e3c <mbrtowc@plt>
   18a50:	cmp	r5, #0
   18a54:	cmnne	r0, #3
   18a58:	mov	r4, r0
   18a5c:	bhi	18a78 <__assert_fail@plt+0x7abc>
   18a60:	mov	r0, r4
   18a64:	add	sp, sp, #12
   18a68:	ldrd	r4, [sp]
   18a6c:	ldrd	r6, [sp, #8]
   18a70:	add	sp, sp, #16
   18a74:	pop	{pc}		; (ldr pc, [sp], #4)
   18a78:	mov	r0, #0
   18a7c:	bl	18ad0 <__assert_fail@plt+0x7b14>
   18a80:	cmp	r0, #0
   18a84:	bne	18a60 <__assert_fail@plt+0x7aa4>
   18a88:	ldrb	r3, [r7]
   18a8c:	mov	r4, #1
   18a90:	str	r3, [r6]
   18a94:	b	18a60 <__assert_fail@plt+0x7aa4>
   18a98:	umull	r2, r3, r1, r2
   18a9c:	cmp	r3, #0
   18aa0:	bne	18aac <__assert_fail@plt+0x7af0>
   18aa4:	mov	r1, r2
   18aa8:	b	188fc <__assert_fail@plt+0x7940>
   18aac:	str	r4, [sp, #-8]!
   18ab0:	str	lr, [sp, #4]
   18ab4:	bl	10ef0 <__errno_location@plt>
   18ab8:	mov	r3, #12
   18abc:	ldr	r4, [sp]
   18ac0:	add	sp, sp, #4
   18ac4:	str	r3, [r0]
   18ac8:	mov	r0, #0
   18acc:	pop	{pc}		; (ldr pc, [sp], #4)
   18ad0:	push	{lr}		; (str lr, [sp, #-4]!)
   18ad4:	sub	sp, sp, #268	; 0x10c
   18ad8:	movw	r2, #257	; 0x101
   18adc:	add	r1, sp, #4
   18ae0:	bl	18b28 <__assert_fail@plt+0x7b6c>
   18ae4:	cmp	r0, #0
   18ae8:	movne	r0, #0
   18aec:	bne	18b20 <__assert_fail@plt+0x7b64>
   18af0:	movw	r1, #40200	; 0x9d08
   18af4:	movt	r1, #1
   18af8:	add	r0, sp, #4
   18afc:	bl	10d40 <strcmp@plt>
   18b00:	cmp	r0, #0
   18b04:	beq	18b20 <__assert_fail@plt+0x7b64>
   18b08:	add	r0, sp, #4
   18b0c:	movw	r1, #40204	; 0x9d0c
   18b10:	movt	r1, #1
   18b14:	bl	10d40 <strcmp@plt>
   18b18:	adds	r0, r0, #0
   18b1c:	movne	r0, #1
   18b20:	add	sp, sp, #268	; 0x10c
   18b24:	pop	{pc}		; (ldr pc, [sp], #4)
   18b28:	strd	r4, [sp, #-16]!
   18b2c:	mov	r5, r1
   18b30:	mov	r1, #0
   18b34:	mov	r4, r2
   18b38:	str	r6, [sp, #8]
   18b3c:	str	lr, [sp, #12]
   18b40:	bl	10f68 <setlocale@plt>
   18b44:	subs	r6, r0, #0
   18b48:	beq	18bc8 <__assert_fail@plt+0x7c0c>
   18b4c:	bl	10ed8 <strlen@plt>
   18b50:	cmp	r4, r0
   18b54:	bhi	18b74 <__assert_fail@plt+0x7bb8>
   18b58:	cmp	r4, #0
   18b5c:	moveq	r0, #34	; 0x22
   18b60:	bne	18b98 <__assert_fail@plt+0x7bdc>
   18b64:	ldrd	r4, [sp]
   18b68:	ldr	r6, [sp, #8]
   18b6c:	add	sp, sp, #12
   18b70:	pop	{pc}		; (ldr pc, [sp], #4)
   18b74:	add	r2, r0, #1
   18b78:	mov	r1, r6
   18b7c:	mov	r0, r5
   18b80:	bl	10d88 <memcpy@plt>
   18b84:	ldrd	r4, [sp]
   18b88:	mov	r0, #0
   18b8c:	ldr	r6, [sp, #8]
   18b90:	add	sp, sp, #12
   18b94:	pop	{pc}		; (ldr pc, [sp], #4)
   18b98:	sub	r4, r4, #1
   18b9c:	mov	r1, r6
   18ba0:	mov	r2, r4
   18ba4:	mov	r0, r5
   18ba8:	bl	10d88 <memcpy@plt>
   18bac:	mov	r3, #0
   18bb0:	mov	r0, #34	; 0x22
   18bb4:	strb	r3, [r5, r4]
   18bb8:	ldrd	r4, [sp]
   18bbc:	ldr	r6, [sp, #8]
   18bc0:	add	sp, sp, #12
   18bc4:	pop	{pc}		; (ldr pc, [sp], #4)
   18bc8:	cmp	r4, #0
   18bcc:	mov	r0, #22
   18bd0:	strbne	r6, [r5]
   18bd4:	ldrd	r4, [sp]
   18bd8:	ldr	r6, [sp, #8]
   18bdc:	add	sp, sp, #12
   18be0:	pop	{pc}		; (ldr pc, [sp], #4)
   18be4:	mov	r1, #0
   18be8:	b	10f68 <setlocale@plt>
   18bec:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18bf0:	mov	r7, r0
   18bf4:	ldr	r6, [pc, #72]	; 18c44 <__assert_fail@plt+0x7c88>
   18bf8:	ldr	r5, [pc, #72]	; 18c48 <__assert_fail@plt+0x7c8c>
   18bfc:	add	r6, pc, r6
   18c00:	add	r5, pc, r5
   18c04:	sub	r6, r6, r5
   18c08:	mov	r8, r1
   18c0c:	mov	r9, r2
   18c10:	bl	10d08 <calloc@plt-0x20>
   18c14:	asrs	r6, r6, #2
   18c18:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   18c1c:	mov	r4, #0
   18c20:	add	r4, r4, #1
   18c24:	ldr	r3, [r5], #4
   18c28:	mov	r2, r9
   18c2c:	mov	r1, r8
   18c30:	mov	r0, r7
   18c34:	blx	r3
   18c38:	cmp	r6, r4
   18c3c:	bne	18c20 <__assert_fail@plt+0x7c64>
   18c40:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18c44:	andeq	r1, r1, r0, lsl r3
   18c48:	andeq	r1, r1, r8, lsl #6
   18c4c:	bx	lr
   18c50:	ldr	r3, [pc, #12]	; 18c64 <__assert_fail@plt+0x7ca8>
   18c54:	mov	r1, #0
   18c58:	add	r3, pc, r3
   18c5c:	ldr	r2, [r3]
   18c60:	b	10efc <__cxa_atexit@plt>
   18c64:	muleq	r1, r4, r4

Disassembly of section .fini:

00018c68 <.fini>:
   18c68:	push	{r3, lr}
   18c6c:	pop	{r3, pc}
