
../repos/prog2/0.1:     file format elf32-littlearm


Disassembly of section .init:

0001057c <.init>:
   1057c:	push	{r3, lr}
   10580:	bl	10614 <_start@@Base+0x3c>
   10584:	pop	{r3, pc}

Disassembly of section .plt:

00010588 <printf@plt-0x14>:
   10588:	push	{lr}		; (str lr, [sp, #-4]!)
   1058c:	ldr	lr, [pc, #4]	; 10598 <printf@plt-0x4>
   10590:	add	lr, pc, lr
   10594:	ldr	pc, [lr, #8]!
   10598:	andeq	r0, r1, r8, ror #20

0001059c <printf@plt>:
   1059c:	add	ip, pc, #0, 12
   105a0:	add	ip, ip, #16, 20	; 0x10000
   105a4:	ldr	pc, [ip, #2664]!	; 0xa68

000105a8 <__libc_start_main@plt>:
   105a8:	add	ip, pc, #0, 12
   105ac:	add	ip, ip, #16, 20	; 0x10000
   105b0:	ldr	pc, [ip, #2656]!	; 0xa60

000105b4 <__gmon_start__@plt>:
   105b4:	add	ip, pc, #0, 12
   105b8:	add	ip, ip, #16, 20	; 0x10000
   105bc:	ldr	pc, [ip, #2648]!	; 0xa58

000105c0 <__isoc99_scanf@plt>:
   105c0:	add	ip, pc, #0, 12
   105c4:	add	ip, ip, #16, 20	; 0x10000
   105c8:	ldr	pc, [ip, #2640]!	; 0xa50

000105cc <abort@plt>:
   105cc:	add	ip, pc, #0, 12
   105d0:	add	ip, ip, #16, 20	; 0x10000
   105d4:	ldr	pc, [ip, #2632]!	; 0xa48

Disassembly of section .text:

000105d8 <_start@@Base>:
   105d8:	mov	fp, #0
   105dc:	mov	lr, #0
   105e0:	pop	{r1}		; (ldr r1, [sp], #4)
   105e4:	mov	r2, sp
   105e8:	push	{r2}		; (str r2, [sp, #-4]!)
   105ec:	push	{r0}		; (str r0, [sp, #-4]!)
   105f0:	ldr	ip, [pc, #16]	; 10608 <_start@@Base+0x30>
   105f4:	push	{ip}		; (str ip, [sp, #-4]!)
   105f8:	ldr	r0, [pc, #12]	; 1060c <_start@@Base+0x34>
   105fc:	ldr	r3, [pc, #12]	; 10610 <_start@@Base+0x38>
   10600:	bl	105a8 <__libc_start_main@plt>
   10604:	bl	105cc <abort@plt>
   10608:	andeq	r0, r1, r8, lsr r8
   1060c:	andeq	r0, r1, r0, lsl #14
   10610:	ldrdeq	r0, [r1], -r8
   10614:	ldr	r3, [pc, #20]	; 10630 <_start@@Base+0x58>
   10618:	ldr	r2, [pc, #20]	; 10634 <_start@@Base+0x5c>
   1061c:	add	r3, pc, r3
   10620:	ldr	r2, [r3, r2]
   10624:	cmp	r2, #0
   10628:	bxeq	lr
   1062c:	b	105b4 <__gmon_start__@plt>
   10630:	ldrdeq	r0, [r1], -ip
   10634:	andeq	r0, r0, r0, lsr #32
   10638:	ldr	r3, [pc, #28]	; 1065c <_start@@Base+0x84>
   1063c:	ldr	r0, [pc, #28]	; 10660 <_start@@Base+0x88>
   10640:	sub	r3, r3, r0
   10644:	cmp	r3, #6
   10648:	bxls	lr
   1064c:	ldr	r3, [pc, #16]	; 10664 <_start@@Base+0x8c>
   10650:	cmp	r3, #0
   10654:	bxeq	lr
   10658:	bx	r3
   1065c:	andeq	r1, r2, pc, lsr #32
   10660:	andeq	r1, r2, ip, lsr #32
   10664:	andeq	r0, r0, r0
   10668:	ldr	r1, [pc, #36]	; 10694 <_start@@Base+0xbc>
   1066c:	ldr	r0, [pc, #36]	; 10698 <_start@@Base+0xc0>
   10670:	sub	r1, r1, r0
   10674:	asr	r1, r1, #2
   10678:	add	r1, r1, r1, lsr #31
   1067c:	asrs	r1, r1, #1
   10680:	bxeq	lr
   10684:	ldr	r3, [pc, #16]	; 1069c <_start@@Base+0xc4>
   10688:	cmp	r3, #0
   1068c:	bxeq	lr
   10690:	bx	r3
   10694:	andeq	r1, r2, ip, lsr #32
   10698:	andeq	r1, r2, ip, lsr #32
   1069c:	andeq	r0, r0, r0
   106a0:	push	{r4, lr}
   106a4:	ldr	r4, [pc, #24]	; 106c4 <_start@@Base+0xec>
   106a8:	ldrb	r3, [r4]
   106ac:	cmp	r3, #0
   106b0:	popne	{r4, pc}
   106b4:	bl	10638 <_start@@Base+0x60>
   106b8:	mov	r3, #1
   106bc:	strb	r3, [r4]
   106c0:	pop	{r4, pc}
   106c4:	andeq	r1, r2, ip, lsr #32
   106c8:	ldr	r0, [pc, #40]	; 106f8 <_start@@Base+0x120>
   106cc:	ldr	r3, [r0]
   106d0:	cmp	r3, #0
   106d4:	bne	106dc <_start@@Base+0x104>
   106d8:	b	10668 <_start@@Base+0x90>
   106dc:	ldr	r3, [pc, #24]	; 106fc <_start@@Base+0x124>
   106e0:	cmp	r3, #0
   106e4:	beq	106d8 <_start@@Base+0x100>
   106e8:	push	{r4, lr}
   106ec:	blx	r3
   106f0:	pop	{r4, lr}
   106f4:	b	10668 <_start@@Base+0x90>
   106f8:	andeq	r0, r2, r4, lsl pc
   106fc:	andeq	r0, r0, r0

00010700 <main@@Base>:
   10700:	push	{r4, lr}
   10704:	sub	sp, sp, #24
   10708:	ldr	r0, [pc, #180]	; 107c4 <main@@Base+0xc4>
   1070c:	bl	1059c <printf@plt>
   10710:	ldr	r4, [pc, #176]	; 107c8 <main@@Base+0xc8>
   10714:	add	r1, sp, #8
   10718:	mov	r0, r4
   1071c:	bl	105c0 <__isoc99_scanf@plt>
   10720:	ldr	r0, [pc, #164]	; 107cc <main@@Base+0xcc>
   10724:	bl	1059c <printf@plt>
   10728:	add	r1, sp, #20
   1072c:	mov	r0, r4
   10730:	bl	105c0 <__isoc99_scanf@plt>
   10734:	add	r1, sp, #16
   10738:	mov	r0, r4
   1073c:	bl	105c0 <__isoc99_scanf@plt>
   10740:	ldr	r0, [pc, #136]	; 107d0 <main@@Base+0xd0>
   10744:	bl	1059c <printf@plt>
   10748:	add	r1, sp, #12
   1074c:	mov	r0, r4
   10750:	bl	105c0 <__isoc99_scanf@plt>
   10754:	vldr	s15, [pc, #100]	; 107c0 <main@@Base+0xc0>
   10758:	vstr	s15, [sp, #20]
   1075c:	vldr	s14, [sp, #16]
   10760:	vcmpe.f32	s14, s15
   10764:	vmrs	APSR_nzcv, fpscr
   10768:	blt	107b4 <main@@Base+0xb4>
   1076c:	ldr	r4, [pc, #96]	; 107d4 <main@@Base+0xd4>
   10770:	vldr	s12, [sp, #8]
   10774:	vmul.f32	s12, s15, s12
   10778:	vmul.f32	s12, s12, s15
   1077c:	vcvt.f64.f32	d6, s12
   10780:	vstr	d6, [sp]
   10784:	vcvt.f64.f32	d7, s15
   10788:	vmov	r2, r3, d7
   1078c:	mov	r0, r4
   10790:	bl	1059c <printf@plt>
   10794:	vldr	s14, [sp, #12]
   10798:	vldr	s15, [sp, #20]
   1079c:	vadd.f32	s15, s15, s14
   107a0:	vstr	s15, [sp, #20]
   107a4:	vldr	s14, [sp, #16]
   107a8:	vcmpe.f32	s14, s15
   107ac:	vmrs	APSR_nzcv, fpscr
   107b0:	bge	10770 <main@@Base+0x70>
   107b4:	mov	r0, #0
   107b8:	add	sp, sp, #24
   107bc:	pop	{r4, pc}
   107c0:	andeq	r0, r0, r0
   107c4:	andeq	r0, r1, r8, asr #16
   107c8:	andeq	r0, r1, ip, asr r8
   107cc:	andeq	r0, r1, r0, ror #16
   107d0:	andeq	r0, r1, r4, ror r8
   107d4:	andeq	r0, r1, r8, lsl #17

000107d8 <__libc_csu_init@@Base>:
   107d8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   107dc:	mov	r7, r0
   107e0:	ldr	r6, [pc, #72]	; 10830 <__libc_csu_init@@Base+0x58>
   107e4:	ldr	r5, [pc, #72]	; 10834 <__libc_csu_init@@Base+0x5c>
   107e8:	add	r6, pc, r6
   107ec:	add	r5, pc, r5
   107f0:	sub	r6, r6, r5
   107f4:	mov	r8, r1
   107f8:	mov	r9, r2
   107fc:	bl	1057c <printf@plt-0x20>
   10800:	asrs	r6, r6, #2
   10804:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10808:	mov	r4, #0
   1080c:	add	r4, r4, #1
   10810:	ldr	r3, [r5], #4
   10814:	mov	r2, r9
   10818:	mov	r1, r8
   1081c:	mov	r0, r7
   10820:	blx	r3
   10824:	cmp	r6, r4
   10828:	bne	1080c <__libc_csu_init@@Base+0x34>
   1082c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10830:	andeq	r0, r1, r0, lsr #14
   10834:	andeq	r0, r1, r8, lsl r7

00010838 <__libc_csu_fini@@Base>:
   10838:	bx	lr

Disassembly of section .fini:

0001083c <.fini>:
   1083c:	push	{r3, lr}
   10840:	pop	{r3, pc}
