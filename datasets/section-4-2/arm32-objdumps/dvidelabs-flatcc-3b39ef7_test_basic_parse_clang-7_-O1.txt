
../repos/dvidelabs-flatcc-3b39ef7/test/json_test/test_basic_parse:     file format elf32-littlearm


Disassembly of section .init:

000128d8 <.init>:
   128d8:	push	{r3, lr}
   128dc:	bl	12a0c <_start@@Base+0x3c>
   128e0:	pop	{r3, pc}

Disassembly of section .plt:

000128e4 <free@plt-0x14>:
   128e4:	push	{lr}		; (str lr, [sp, #-4]!)
   128e8:	ldr	lr, [pc, #4]	; 128f4 <free@plt-0x4>
   128ec:	add	lr, pc, lr
   128f0:	ldr	pc, [lr, #8]!
   128f4:	andeq	fp, r1, ip, lsl #14

000128f8 <free@plt>:
   128f8:	add	ip, pc, #0, 12
   128fc:	add	ip, ip, #110592	; 0x1b000
   12900:	ldr	pc, [ip, #1804]!	; 0x70c

00012904 <memcpy@plt>:
   12904:	add	ip, pc, #0, 12
   12908:	add	ip, ip, #110592	; 0x1b000
   1290c:	ldr	pc, [ip, #1796]!	; 0x704

00012910 <memcmp@plt>:
   12910:	add	ip, pc, #0, 12
   12914:	add	ip, ip, #110592	; 0x1b000
   12918:	ldr	pc, [ip, #1788]!	; 0x6fc

0001291c <__isinff@plt>:
   1291c:	add	ip, pc, #0, 12
   12920:	add	ip, ip, #110592	; 0x1b000
   12924:	ldr	pc, [ip, #1780]!	; 0x6f4

00012928 <__isinf@plt>:
   12928:	add	ip, pc, #0, 12
   1292c:	add	ip, ip, #110592	; 0x1b000
   12930:	ldr	pc, [ip, #1772]!	; 0x6ec

00012934 <realloc@plt>:
   12934:	add	ip, pc, #0, 12
   12938:	add	ip, ip, #110592	; 0x1b000
   1293c:	ldr	pc, [ip, #1764]!	; 0x6e4

00012940 <fwrite@plt>:
   12940:	add	ip, pc, #0, 12
   12944:	add	ip, ip, #110592	; 0x1b000
   12948:	ldr	pc, [ip, #1756]!	; 0x6dc

0001294c <malloc@plt>:
   1294c:	add	ip, pc, #0, 12
   12950:	add	ip, ip, #110592	; 0x1b000
   12954:	ldr	pc, [ip, #1748]!	; 0x6d4

00012958 <__libc_start_main@plt>:
   12958:	add	ip, pc, #0, 12
   1295c:	add	ip, ip, #110592	; 0x1b000
   12960:	ldr	pc, [ip, #1740]!	; 0x6cc

00012964 <__gmon_start__@plt>:
   12964:	add	ip, pc, #0, 12
   12968:	add	ip, ip, #110592	; 0x1b000
   1296c:	ldr	pc, [ip, #1732]!	; 0x6c4

00012970 <strlen@plt>:
   12970:	add	ip, pc, #0, 12
   12974:	add	ip, ip, #110592	; 0x1b000
   12978:	ldr	pc, [ip, #1724]!	; 0x6bc

0001297c <fprintf@plt>:
   1297c:	add	ip, pc, #0, 12
   12980:	add	ip, ip, #110592	; 0x1b000
   12984:	ldr	pc, [ip, #1716]!	; 0x6b4

00012988 <posix_memalign@plt>:
   12988:	add	ip, pc, #0, 12
   1298c:	add	ip, ip, #110592	; 0x1b000
   12990:	ldr	pc, [ip, #1708]!	; 0x6ac

00012994 <memset@plt>:
   12994:	add	ip, pc, #0, 12
   12998:	add	ip, ip, #110592	; 0x1b000
   1299c:	ldr	pc, [ip, #1700]!	; 0x6a4

000129a0 <strtod@plt>:
   129a0:	add	ip, pc, #0, 12
   129a4:	add	ip, ip, #110592	; 0x1b000
   129a8:	ldr	pc, [ip, #1692]!	; 0x69c

000129ac <memchr@plt>:
   129ac:	add	ip, pc, #0, 12
   129b0:	add	ip, ip, #110592	; 0x1b000
   129b4:	ldr	pc, [ip, #1684]!	; 0x694

000129b8 <abort@plt>:
   129b8:	add	ip, pc, #0, 12
   129bc:	add	ip, ip, #110592	; 0x1b000
   129c0:	ldr	pc, [ip, #1676]!	; 0x68c

000129c4 <__assert_fail@plt>:
   129c4:	add	ip, pc, #0, 12
   129c8:	add	ip, ip, #110592	; 0x1b000
   129cc:	ldr	pc, [ip, #1668]!	; 0x684

Disassembly of section .text:

000129d0 <_start@@Base>:
   129d0:	mov	fp, #0
   129d4:	mov	lr, #0
   129d8:	pop	{r1}		; (ldr r1, [sp], #4)
   129dc:	mov	r2, sp
   129e0:	push	{r2}		; (str r2, [sp, #-4]!)
   129e4:	push	{r0}		; (str r0, [sp, #-4]!)
   129e8:	ldr	ip, [pc, #16]	; 12a00 <_start@@Base+0x30>
   129ec:	push	{ip}		; (str ip, [sp, #-4]!)
   129f0:	ldr	r0, [pc, #12]	; 12a04 <_start@@Base+0x34>
   129f4:	ldr	r3, [pc, #12]	; 12a08 <_start@@Base+0x38>
   129f8:	bl	12958 <__libc_start_main@plt>
   129fc:	bl	129b8 <abort@plt>
   12a00:	andeq	sl, r1, ip, lsl #22
   12a04:	andeq	r3, r1, r0, lsl r6
   12a08:	andeq	sl, r1, ip, lsr #21
   12a0c:	ldr	r3, [pc, #20]	; 12a28 <_start@@Base+0x58>
   12a10:	ldr	r2, [pc, #20]	; 12a2c <_start@@Base+0x5c>
   12a14:	add	r3, pc, r3
   12a18:	ldr	r2, [r3, r2]
   12a1c:	cmp	r2, #0
   12a20:	bxeq	lr
   12a24:	b	12964 <__gmon_start__@plt>
   12a28:	andeq	fp, r1, r4, ror #11
   12a2c:	andeq	r0, r0, r4, asr r0
   12a30:	ldr	r0, [pc, #24]	; 12a50 <_start@@Base+0x80>
   12a34:	ldr	r3, [pc, #24]	; 12a54 <_start@@Base+0x84>
   12a38:	cmp	r3, r0
   12a3c:	bxeq	lr
   12a40:	ldr	r3, [pc, #16]	; 12a58 <_start@@Base+0x88>
   12a44:	cmp	r3, #0
   12a48:	bxeq	lr
   12a4c:	bx	r3
   12a50:	andeq	lr, r2, r0, rrx
   12a54:	andeq	lr, r2, r0, rrx
   12a58:	andeq	r0, r0, r0
   12a5c:	ldr	r0, [pc, #36]	; 12a88 <_start@@Base+0xb8>
   12a60:	ldr	r1, [pc, #36]	; 12a8c <_start@@Base+0xbc>
   12a64:	sub	r1, r1, r0
   12a68:	asr	r1, r1, #2
   12a6c:	add	r1, r1, r1, lsr #31
   12a70:	asrs	r1, r1, #1
   12a74:	bxeq	lr
   12a78:	ldr	r3, [pc, #16]	; 12a90 <_start@@Base+0xc0>
   12a7c:	cmp	r3, #0
   12a80:	bxeq	lr
   12a84:	bx	r3
   12a88:	andeq	lr, r2, r0, rrx
   12a8c:	andeq	lr, r2, r0, rrx
   12a90:	andeq	r0, r0, r0
   12a94:	push	{r4, lr}
   12a98:	ldr	r4, [pc, #24]	; 12ab8 <_start@@Base+0xe8>
   12a9c:	ldrb	r3, [r4]
   12aa0:	cmp	r3, #0
   12aa4:	popne	{r4, pc}
   12aa8:	bl	12a30 <_start@@Base+0x60>
   12aac:	mov	r3, #1
   12ab0:	strb	r3, [r4]
   12ab4:	pop	{r4, pc}
   12ab8:	andeq	lr, r2, r4, rrx
   12abc:	b	12a5c <_start@@Base+0x8c>

00012ac0 <test@@Base>:
   12ac0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ac4:	add	fp, sp, #28
   12ac8:	sub	sp, sp, #60	; 0x3c
   12acc:	str	r3, [sp, #4]
   12ad0:	mov	r8, r2
   12ad4:	mov	r4, r1
   12ad8:	mov	sl, r0
   12adc:	vmov.i32	q8, #0	; 0x00000000
   12ae0:	add	r6, sp, #16
   12ae4:	add	r0, r6, #16
   12ae8:	vst1.64	{d16-d17}, [r0]
   12aec:	mov	r0, #28
   12af0:	mov	r1, r6
   12af4:	vst1.64	{d16-d17}, [r1], r0
   12af8:	vst1.32	{d16-d17}, [r1]
   12afc:	mov	r0, #1
   12b00:	str	r0, [sp, #32]
   12b04:	str	r4, [sp, #20]
   12b08:	movw	r1, #44458	; 0xadaa
   12b0c:	movt	r1, #1
   12b10:	mov	r0, sl
   12b14:	mov	r2, #0
   12b18:	mov	r3, #0
   12b1c:	bl	14290 <flatcc_builder_start_buffer@@Base>
   12b20:	mov	r0, r6
   12b24:	mov	r1, r4
   12b28:	mov	r2, r8
   12b2c:	bl	13290 <test@@Base+0x7d0>
   12b30:	mov	r7, r0
   12b34:	cmp	r0, r8
   12b38:	beq	130cc <test@@Base+0x60c>
   12b3c:	bcs	1310c <test@@Base+0x64c>
   12b40:	ldrb	r0, [r7]
   12b44:	cmp	r0, #123	; 0x7b
   12b48:	bne	1310c <test@@Base+0x64c>
   12b4c:	add	r1, r7, #1
   12b50:	add	r0, sp, #16
   12b54:	mov	r2, r8
   12b58:	bl	13290 <test@@Base+0x7d0>
   12b5c:	mov	r7, r0
   12b60:	cmp	r0, r8
   12b64:	beq	130cc <test@@Base+0x60c>
   12b68:	mov	r0, sl
   12b6c:	mov	r1, #11
   12b70:	bl	14f78 <flatcc_builder_start_table@@Base>
   12b74:	add	r3, sp, #12
   12b78:	add	r0, r3, #1
   12b7c:	str	r0, [sp, #8]
   12b80:	add	r4, sp, #16
   12b84:	movw	r9, #29299	; 0x7273
   12b88:	movt	r9, #26217	; 0x6669
   12b8c:	mov	r5, r4
   12b90:	mov	r0, r4
   12b94:	mov	r1, r7
   12b98:	mov	r2, r8
   12b9c:	bl	132c8 <test@@Base+0x808>
   12ba0:	mov	r7, r0
   12ba4:	sub	r0, r8, r0
   12ba8:	cmp	r0, #8
   12bac:	mov	r6, r8
   12bb0:	addgt	r6, r7, #8
   12bb4:	mov	r0, r7
   12bb8:	mov	r1, r8
   12bbc:	bl	13310 <test@@Base+0x850>
   12bc0:	mov	r2, r0
   12bc4:	bfc	r2, #0, #16
   12bc8:	movw	r3, #0
   12bcc:	movt	r3, #28260	; 0x6e64
   12bd0:	subs	r3, r2, r3
   12bd4:	movw	r4, #25455	; 0x636f
   12bd8:	movt	r4, #29541	; 0x7365
   12bdc:	sbcs	r3, r1, r4
   12be0:	bcs	12ce4 <test@@Base+0x224>
   12be4:	eor	r1, r1, r9
   12be8:	and	r0, r0, #-16777216	; 0xff000000
   12bec:	eor	r0, r0, #1946157056	; 0x74000000
   12bf0:	orrs	r0, r0, r1
   12bf4:	bne	13188 <test@@Base+0x6c8>
   12bf8:	add	r1, r7, #5
   12bfc:	mov	r4, r5
   12c00:	mov	r0, r5
   12c04:	mov	r2, r8
   12c08:	bl	13314 <test@@Base+0x854>
   12c0c:	mov	r1, r0
   12c10:	mov	r0, r5
   12c14:	mov	r2, r8
   12c18:	bl	13290 <test@@Base+0x7d0>
   12c1c:	mov	r7, r0
   12c20:	cmp	r0, r8
   12c24:	beq	130cc <test@@Base+0x60c>
   12c28:	bcs	130f0 <test@@Base+0x630>
   12c2c:	ldrb	r0, [r7]
   12c30:	cmp	r0, #58	; 0x3a
   12c34:	bne	130f0 <test@@Base+0x630>
   12c38:	add	r1, r7, #1
   12c3c:	mov	r0, r4
   12c40:	mov	r2, r8
   12c44:	bl	13290 <test@@Base+0x7d0>
   12c48:	mov	r6, r0
   12c4c:	cmp	r0, r8
   12c50:	beq	13254 <test@@Base+0x794>
   12c54:	mov	r0, sl
   12c58:	mov	r1, #0
   12c5c:	mov	r2, #1
   12c60:	mov	r3, #1
   12c64:	bl	15d8c <flatcc_builder_table_add@@Base>
   12c68:	cmp	r0, #0
   12c6c:	beq	13274 <test@@Base+0x7b4>
   12c70:	mov	r3, r0
   12c74:	mov	r0, r4
   12c78:	mov	r1, r6
   12c7c:	mov	r2, r8
   12c80:	bl	1341c <test@@Base+0x95c>
   12c84:	mov	r7, r0
   12c88:	cmp	r6, r0
   12c8c:	beq	131d0 <test@@Base+0x710>
   12c90:	mov	r0, r4
   12c94:	mov	r1, r7
   12c98:	mov	r2, r8
   12c9c:	bl	13290 <test@@Base+0x7d0>
   12ca0:	mov	r7, r0
   12ca4:	cmp	r0, r8
   12ca8:	beq	130cc <test@@Base+0x60c>
   12cac:	ldrb	r0, [r7]
   12cb0:	cmp	r0, #44	; 0x2c
   12cb4:	bne	13128 <test@@Base+0x668>
   12cb8:	add	r1, r7, #1
   12cbc:	mov	r0, r4
   12cc0:	mov	r2, r8
   12cc4:	bl	13290 <test@@Base+0x7d0>
   12cc8:	mov	r7, r0
   12ccc:	cmp	r0, r8
   12cd0:	beq	130cc <test@@Base+0x60c>
   12cd4:	ldrb	r0, [r7]
   12cd8:	cmp	r0, #125	; 0x7d
   12cdc:	bne	12b8c <test@@Base+0xcc>
   12ce0:	b	13128 <test@@Base+0x668>
   12ce4:	movw	r3, #27764	; 0x6c74
   12ce8:	movt	r3, #31349	; 0x7a75
   12cec:	cmp	r1, r3
   12cf0:	bhi	12db0 <test@@Base+0x2f0>
   12cf4:	movw	ip, #29472	; 0x7320
   12cf8:	movt	ip, #28260	; 0x6e64
   12cfc:	subs	r3, r0, ip
   12d00:	sbcs	r3, r1, r4
   12d04:	bcs	12e78 <test@@Base+0x3b8>
   12d08:	movw	r0, #0
   12d0c:	movt	r0, #28260	; 0x6e64
   12d10:	eor	r0, r2, r0
   12d14:	eor	r1, r1, r4
   12d18:	orrs	r0, r0, r1
   12d1c:	bne	13188 <test@@Base+0x6c8>
   12d20:	add	r1, r7, #6
   12d24:	mov	r4, r5
   12d28:	mov	r0, r5
   12d2c:	mov	r2, r8
   12d30:	bl	13314 <test@@Base+0x854>
   12d34:	mov	r1, r0
   12d38:	mov	r0, r5
   12d3c:	mov	r2, r8
   12d40:	bl	13290 <test@@Base+0x7d0>
   12d44:	mov	r7, r0
   12d48:	cmp	r0, r8
   12d4c:	beq	130cc <test@@Base+0x60c>
   12d50:	bcs	130f0 <test@@Base+0x630>
   12d54:	ldrb	r0, [r7]
   12d58:	cmp	r0, #58	; 0x3a
   12d5c:	bne	130f0 <test@@Base+0x630>
   12d60:	add	r1, r7, #1
   12d64:	mov	r0, r4
   12d68:	mov	r2, r8
   12d6c:	bl	13290 <test@@Base+0x7d0>
   12d70:	mov	r6, r0
   12d74:	cmp	r0, r8
   12d78:	beq	13254 <test@@Base+0x794>
   12d7c:	mov	r0, sl
   12d80:	mov	r1, #1
   12d84:	mov	r2, #8
   12d88:	mov	r3, #8
   12d8c:	bl	15d8c <flatcc_builder_table_add@@Base>
   12d90:	cmp	r0, #0
   12d94:	beq	13274 <test@@Base+0x7b4>
   12d98:	mov	r3, r0
   12d9c:	mov	r0, r4
   12da0:	mov	r1, r6
   12da4:	mov	r2, r8
   12da8:	bl	18398 <flatcc_json_parser_double@@Base>
   12dac:	b	12c84 <test@@Base+0x1c4>
   12db0:	movw	r0, #27765	; 0x6c75
   12db4:	movt	r0, #31349	; 0x7a75
   12db8:	teq	r1, r0
   12dbc:	bne	13188 <test@@Base+0x6c8>
   12dc0:	add	r1, r7, #4
   12dc4:	mov	r4, r5
   12dc8:	mov	r0, r5
   12dcc:	mov	r2, r8
   12dd0:	bl	13314 <test@@Base+0x854>
   12dd4:	mov	r1, r0
   12dd8:	mov	r0, r5
   12ddc:	mov	r2, r8
   12de0:	bl	13290 <test@@Base+0x7d0>
   12de4:	mov	r7, r0
   12de8:	cmp	r0, r8
   12dec:	beq	130cc <test@@Base+0x60c>
   12df0:	bcs	130f0 <test@@Base+0x630>
   12df4:	ldrb	r0, [r7]
   12df8:	cmp	r0, #58	; 0x3a
   12dfc:	bne	130f0 <test@@Base+0x630>
   12e00:	add	r1, r7, #1
   12e04:	mov	r0, r4
   12e08:	mov	r2, r8
   12e0c:	bl	13290 <test@@Base+0x7d0>
   12e10:	mov	r7, r0
   12e14:	cmp	r0, r8
   12e18:	beq	130cc <test@@Base+0x60c>
   12e1c:	mov	r0, r4
   12e20:	mov	r1, r7
   12e24:	mov	r2, r8
   12e28:	bl	135d0 <test@@Base+0xb10>
   12e2c:	mov	r6, r0
   12e30:	mov	r0, r4
   12e34:	mov	r1, r6
   12e38:	mov	r2, r8
   12e3c:	bl	17798 <flatcc_json_parser_string_part@@Base>
   12e40:	mov	r7, r0
   12e44:	cmp	r0, r8
   12e48:	beq	131d0 <test@@Base+0x710>
   12e4c:	ldrb	r0, [r7]
   12e50:	cmp	r0, #34	; 0x22
   12e54:	bne	12f44 <test@@Base+0x484>
   12e58:	sub	r2, r7, r6
   12e5c:	mov	r0, sl
   12e60:	mov	r1, r6
   12e64:	bl	163d0 <flatcc_builder_create_string@@Base>
   12e68:	mov	r6, r0
   12e6c:	cmp	r6, #0
   12e70:	bne	12ffc <test@@Base+0x53c>
   12e74:	b	131d0 <test@@Base+0x710>
   12e78:	eor	r0, r0, ip
   12e7c:	eor	r1, r1, r4
   12e80:	orrs	r0, r0, r1
   12e84:	bne	13188 <test@@Base+0x6c8>
   12e88:	mov	r0, r6
   12e8c:	mov	r1, r8
   12e90:	bl	13310 <test@@Base+0x850>
   12e94:	movw	r0, #26227	; 0x6673
   12e98:	movt	r0, #27749	; 0x6c65
   12e9c:	cmp	r1, r0
   12ea0:	bhi	1302c <test@@Base+0x56c>
   12ea4:	movw	r0, #24932	; 0x6164
   12ea8:	movt	r0, #27749	; 0x6c65
   12eac:	teq	r1, r0
   12eb0:	bne	1327c <test@@Base+0x7bc>
   12eb4:	mov	r4, r5
   12eb8:	add	r1, r6, #4
   12ebc:	mov	r0, r5
   12ec0:	mov	r2, r8
   12ec4:	bl	13314 <test@@Base+0x854>
   12ec8:	mov	r1, r0
   12ecc:	mov	r0, r5
   12ed0:	mov	r2, r8
   12ed4:	bl	13290 <test@@Base+0x7d0>
   12ed8:	mov	r7, r0
   12edc:	cmp	r0, r8
   12ee0:	beq	130cc <test@@Base+0x60c>
   12ee4:	bcs	130f0 <test@@Base+0x630>
   12ee8:	ldrb	r0, [r7]
   12eec:	cmp	r0, #58	; 0x3a
   12ef0:	bne	130f0 <test@@Base+0x630>
   12ef4:	add	r1, r7, #1
   12ef8:	mov	r0, r4
   12efc:	mov	r2, r8
   12f00:	bl	13290 <test@@Base+0x7d0>
   12f04:	mov	r6, r0
   12f08:	cmp	r0, r8
   12f0c:	beq	13254 <test@@Base+0x794>
   12f10:	mov	r0, sl
   12f14:	mov	r1, #3
   12f18:	mov	r2, #8
   12f1c:	mov	r3, #8
   12f20:	bl	15d8c <flatcc_builder_table_add@@Base>
   12f24:	cmp	r0, #0
   12f28:	beq	13274 <test@@Base+0x7b4>
   12f2c:	mov	r3, r0
   12f30:	mov	r0, r4
   12f34:	mov	r1, r6
   12f38:	mov	r2, r8
   12f3c:	bl	134ac <test@@Base+0x9ec>
   12f40:	b	12c84 <test@@Base+0x1c4>
   12f44:	mov	r0, sl
   12f48:	bl	14e4c <flatcc_builder_start_string@@Base>
   12f4c:	sub	r9, r7, r6
   12f50:	mov	r4, sl
   12f54:	mov	r0, sl
   12f58:	mov	r1, r9
   12f5c:	bl	149a0 <flatcc_builder_extend_string@@Base>
   12f60:	cmp	r0, #0
   12f64:	beq	13288 <test@@Base+0x7c8>
   12f68:	mov	r1, r6
   12f6c:	mov	r2, r9
   12f70:	bl	12904 <memcpy@plt>
   12f74:	add	r9, sp, #12
   12f78:	mov	sl, r4
   12f7c:	mov	r4, r5
   12f80:	mov	r0, r4
   12f84:	mov	r1, r7
   12f88:	mov	r2, r8
   12f8c:	mov	r3, r9
   12f90:	bl	178e0 <flatcc_json_parser_string_escape@@Base>
   12f94:	mov	r6, r0
   12f98:	ldrb	r2, [sp, #12]
   12f9c:	mov	r0, sl
   12fa0:	ldr	r1, [sp, #8]
   12fa4:	bl	14a08 <flatcc_builder_append_string@@Base>
   12fa8:	mov	r0, r4
   12fac:	mov	r1, r6
   12fb0:	mov	r2, r8
   12fb4:	bl	17798 <flatcc_json_parser_string_part@@Base>
   12fb8:	mov	r7, r0
   12fbc:	cmp	r0, r8
   12fc0:	beq	131d0 <test@@Base+0x710>
   12fc4:	sub	r2, r7, r6
   12fc8:	mov	r0, sl
   12fcc:	mov	r1, r6
   12fd0:	bl	14a08 <flatcc_builder_append_string@@Base>
   12fd4:	ldrb	r0, [r7]
   12fd8:	cmp	r0, #34	; 0x22
   12fdc:	bne	12f80 <test@@Base+0x4c0>
   12fe0:	mov	r0, sl
   12fe4:	bl	164e8 <flatcc_builder_end_string@@Base>
   12fe8:	mov	r6, r0
   12fec:	movw	r9, #29299	; 0x7273
   12ff0:	movt	r9, #26217	; 0x6669
   12ff4:	cmp	r6, #0
   12ff8:	beq	131d0 <test@@Base+0x710>
   12ffc:	mov	r0, sl
   13000:	mov	r1, #10
   13004:	bl	15cc8 <flatcc_builder_table_add_offset@@Base>
   13008:	cmp	r0, #0
   1300c:	beq	131d0 <test@@Base+0x710>
   13010:	str	r6, [r0]
   13014:	mov	r0, r4
   13018:	mov	r1, r7
   1301c:	mov	r2, r8
   13020:	bl	135f0 <test@@Base+0xb30>
   13024:	mov	r7, r0
   13028:	b	12c90 <test@@Base+0x1d0>
   1302c:	movw	r0, #26228	; 0x6674
   13030:	movt	r0, #27749	; 0x6c65
   13034:	teq	r1, r0
   13038:	bne	1327c <test@@Base+0x7bc>
   1303c:	mov	r4, r5
   13040:	add	r1, r6, #4
   13044:	mov	r0, r5
   13048:	mov	r2, r8
   1304c:	bl	13314 <test@@Base+0x854>
   13050:	mov	r1, r0
   13054:	mov	r0, r5
   13058:	mov	r2, r8
   1305c:	bl	13290 <test@@Base+0x7d0>
   13060:	mov	r7, r0
   13064:	cmp	r0, r8
   13068:	beq	130cc <test@@Base+0x60c>
   1306c:	bcs	130f0 <test@@Base+0x630>
   13070:	ldrb	r0, [r7]
   13074:	cmp	r0, #58	; 0x3a
   13078:	bne	130f0 <test@@Base+0x630>
   1307c:	add	r1, r7, #1
   13080:	mov	r0, r4
   13084:	mov	r2, r8
   13088:	bl	13290 <test@@Base+0x7d0>
   1308c:	mov	r6, r0
   13090:	cmp	r0, r8
   13094:	beq	13254 <test@@Base+0x794>
   13098:	mov	r0, sl
   1309c:	mov	r1, #2
   130a0:	mov	r2, #4
   130a4:	mov	r3, #4
   130a8:	bl	15d8c <flatcc_builder_table_add@@Base>
   130ac:	cmp	r0, #0
   130b0:	beq	13274 <test@@Base+0x7b4>
   130b4:	mov	r3, r0
   130b8:	mov	r0, r4
   130bc:	mov	r1, r6
   130c0:	mov	r2, r8
   130c4:	bl	13540 <test@@Base+0xa80>
   130c8:	b	12c84 <test@@Base+0x1c4>
   130cc:	movw	r0, #57440	; 0xe060
   130d0:	movt	r0, #2
   130d4:	ldr	r3, [r0]
   130d8:	movw	r0, #44463	; 0xadaf
   130dc:	movt	r0, #1
   130e0:	mov	r1, #13
   130e4:	mov	r2, #1
   130e8:	bl	12940 <fwrite@plt>
   130ec:	b	131d0 <test@@Base+0x710>
   130f0:	movw	r0, #57440	; 0xe060
   130f4:	movt	r0, #2
   130f8:	ldr	r0, [r0]
   130fc:	movw	r1, #44477	; 0xadbd
   13100:	movt	r1, #1
   13104:	mov	r2, #58	; 0x3a
   13108:	b	131b4 <test@@Base+0x6f4>
   1310c:	movw	r0, #57440	; 0xe060
   13110:	movt	r0, #2
   13114:	ldr	r0, [r0]
   13118:	movw	r1, #44477	; 0xadbd
   1311c:	movt	r1, #1
   13120:	mov	r2, #123	; 0x7b
   13124:	b	131b4 <test@@Base+0x6f4>
   13128:	cmp	r7, r8
   1312c:	bcs	1319c <test@@Base+0x6dc>
   13130:	ldrb	r0, [r7]
   13134:	cmp	r0, #125	; 0x7d
   13138:	bne	1319c <test@@Base+0x6dc>
   1313c:	mov	r0, sl
   13140:	bl	15698 <flatcc_builder_end_table@@Base>
   13144:	mov	r1, r0
   13148:	mov	r0, sl
   1314c:	bl	14444 <flatcc_builder_end_buffer@@Base>
   13150:	add	r1, r7, #1
   13154:	add	r0, sp, #16
   13158:	mov	r2, r8
   1315c:	bl	13290 <test@@Base+0x7d0>
   13160:	mov	r7, r0
   13164:	cmp	r0, r8
   13168:	beq	131d0 <test@@Base+0x710>
   1316c:	movw	r0, #57440	; 0xe060
   13170:	movt	r0, #2
   13174:	ldr	r3, [r0]
   13178:	movw	r0, #44499	; 0xadd3
   1317c:	movt	r0, #1
   13180:	mov	r1, #26
   13184:	b	130e4 <test@@Base+0x624>
   13188:	add	r0, sp, #16
   1318c:	mov	r1, r7
   13190:	mov	r2, r8
   13194:	mov	r3, #13
   13198:	b	131c8 <test@@Base+0x708>
   1319c:	movw	r0, #57440	; 0xe060
   131a0:	movt	r0, #2
   131a4:	ldr	r0, [r0]
   131a8:	movw	r1, #44477	; 0xadbd
   131ac:	movt	r1, #1
   131b0:	mov	r2, #125	; 0x7d
   131b4:	bl	1297c <fprintf@plt>
   131b8:	add	r0, sp, #16
   131bc:	mov	r1, r7
   131c0:	mov	r2, r8
   131c4:	mov	r3, #17
   131c8:	bl	17760 <flatcc_json_parser_set_error@@Base>
   131cc:	mov	r7, r0
   131d0:	movw	r0, #57440	; 0xe060
   131d4:	movt	r0, #2
   131d8:	ldr	r4, [r0]
   131dc:	ldr	r0, [sp, #40]	; 0x28
   131e0:	cmp	r0, #0
   131e4:	bne	13204 <test@@Base+0x744>
   131e8:	movw	r0, #44537	; 0xadf9
   131ec:	movt	r0, #1
   131f0:	mov	r1, #15
   131f4:	mov	r2, #1
   131f8:	mov	r3, r4
   131fc:	bl	12940 <fwrite@plt>
   13200:	b	1323c <test@@Base+0x77c>
   13204:	ldr	r5, [sp, #20]
   13208:	ldr	r8, [sp, #32]
   1320c:	ldr	r6, [sp, #52]	; 0x34
   13210:	bl	17740 <flatcc_json_parser_error_string@@Base>
   13214:	str	r0, [sp]
   13218:	add	r0, r6, #1
   1321c:	sub	r3, r0, r5
   13220:	movw	r1, #44526	; 0xadee
   13224:	movt	r1, #1
   13228:	mov	r0, r4
   1322c:	mov	r2, r8
   13230:	bl	1297c <fprintf@plt>
   13234:	mov	r0, sl
   13238:	bl	13aec <flatcc_builder_reset@@Base>
   1323c:	ldr	r0, [sp, #40]	; 0x28
   13240:	ldr	r1, [sp, #4]
   13244:	str	r0, [r1]
   13248:	mov	r0, r7
   1324c:	sub	sp, fp, #28
   13250:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13254:	movw	r0, #57440	; 0xe060
   13258:	movt	r0, #2
   1325c:	ldr	r3, [r0]
   13260:	movw	r0, #44463	; 0xadaf
   13264:	movt	r0, #1
   13268:	mov	r1, #13
   1326c:	mov	r2, #1
   13270:	bl	12940 <fwrite@plt>
   13274:	mov	r7, r6
   13278:	b	131d0 <test@@Base+0x710>
   1327c:	add	r0, sp, #16
   13280:	mov	r1, r6
   13284:	b	13190 <test@@Base+0x6d0>
   13288:	mov	sl, r4
   1328c:	b	131d0 <test@@Base+0x710>
   13290:	sub	r3, r2, r1
   13294:	cmp	r3, #2
   13298:	blt	132c4 <test@@Base+0x804>
   1329c:	ldrb	r3, [r1]
   132a0:	cmp	r3, #32
   132a4:	movhi	r0, r1
   132a8:	bxhi	lr
   132ac:	bne	132c4 <test@@Base+0x804>
   132b0:	mov	ip, r1
   132b4:	ldrb	r3, [ip, #1]!
   132b8:	cmp	r3, #32
   132bc:	movhi	r0, ip
   132c0:	bxhi	lr
   132c4:	b	177dc <flatcc_json_parser_space_ext@@Base>
   132c8:	cmp	r1, r2
   132cc:	beq	13308 <test@@Base+0x848>
   132d0:	ldrb	r3, [r1]
   132d4:	cmp	r3, #46	; 0x2e
   132d8:	beq	132f8 <test@@Base+0x838>
   132dc:	cmp	r3, #34	; 0x22
   132e0:	bne	13300 <test@@Base+0x840>
   132e4:	mov	r2, #0
   132e8:	str	r2, [r0, #12]
   132ec:	add	r1, r1, #1
   132f0:	mov	r0, r1
   132f4:	bx	lr
   132f8:	mov	r3, #5
   132fc:	b	17760 <flatcc_json_parser_set_error@@Base>
   13300:	mov	r2, #1
   13304:	str	r2, [r0, #12]
   13308:	mov	r0, r1
   1330c:	bx	lr
   13310:	b	13660 <main@@Base+0x50>
   13314:	ldr	r3, [r0, #12]
   13318:	cmp	r3, #0
   1331c:	beq	133c8 <test@@Base+0x908>
   13320:	cmp	r1, r2
   13324:	beq	1340c <test@@Base+0x94c>
   13328:	push	{fp, lr}
   1332c:	mov	fp, sp
   13330:	ldrb	lr, [r1]
   13334:	mov	ip, #0
   13338:	cmp	lr, #33	; 0x21
   1333c:	bcc	133ac <test@@Base+0x8ec>
   13340:	add	r3, r1, #1
   13344:	mov	ip, lr
   13348:	mov	r1, r3
   1334c:	uxtb	r3, lr
   13350:	cmp	r3, #46	; 0x2e
   13354:	cmpne	r3, #95	; 0x5f
   13358:	bne	13378 <test@@Base+0x8b8>
   1335c:	cmp	r2, r1
   13360:	beq	133ac <test@@Base+0x8ec>
   13364:	mov	r3, r1
   13368:	ldrb	lr, [r3], #1
   1336c:	cmp	lr, #33	; 0x21
   13370:	bcs	13344 <test@@Base+0x884>
   13374:	b	133ac <test@@Base+0x8ec>
   13378:	sxtb	r3, ip
   1337c:	cmp	r3, #0
   13380:	blt	1335c <test@@Base+0x89c>
   13384:	sub	r3, ip, #48	; 0x30
   13388:	uxtb	r3, r3
   1338c:	cmp	r3, #9
   13390:	bls	1335c <test@@Base+0x89c>
   13394:	orr	r3, ip, #32
   13398:	sub	r3, r3, #97	; 0x61
   1339c:	uxtb	r3, r3
   133a0:	cmp	r3, #26
   133a4:	bcc	1335c <test@@Base+0x89c>
   133a8:	sub	r1, r1, #1
   133ac:	uxtb	r3, ip
   133b0:	cmp	r3, #46	; 0x2e
   133b4:	pop	{fp, lr}
   133b8:	bne	1340c <test@@Base+0x94c>
   133bc:	mov	r3, #5
   133c0:	b	17760 <flatcc_json_parser_set_error@@Base>
   133c4:	add	r1, r1, #1
   133c8:	cmp	r1, r2
   133cc:	beq	13414 <test@@Base+0x954>
   133d0:	ldrb	r3, [r1]
   133d4:	cmp	r3, #92	; 0x5c
   133d8:	beq	133e8 <test@@Base+0x928>
   133dc:	cmp	r3, #34	; 0x22
   133e0:	bne	133c4 <test@@Base+0x904>
   133e4:	b	13408 <test@@Base+0x948>
   133e8:	sub	r3, r2, r1
   133ec:	cmp	r3, #2
   133f0:	blt	133fc <test@@Base+0x93c>
   133f4:	add	r1, r1, #1
   133f8:	b	133c4 <test@@Base+0x904>
   133fc:	ldrb	r3, [r1]
   13400:	cmp	r3, #34	; 0x22
   13404:	bne	13414 <test@@Base+0x954>
   13408:	add	r1, r1, #1
   1340c:	mov	r0, r1
   13410:	bx	lr
   13414:	mov	r3, #20
   13418:	b	17760 <flatcc_json_parser_set_error@@Base>
   1341c:	push	{r4, r5, r6, r7, fp, lr}
   13420:	add	fp, sp, #16
   13424:	sub	sp, sp, #24
   13428:	mov	r7, r1
   1342c:	mov	r6, r0
   13430:	mov	r0, #0
   13434:	str	r0, [sp, #20]
   13438:	str	r0, [sp, #16]
   1343c:	str	r0, [sp, #12]
   13440:	strb	r0, [r3]
   13444:	cmp	r1, r2
   13448:	beq	134a0 <test@@Base+0x9e0>
   1344c:	mov	r5, r3
   13450:	mov	r4, r2
   13454:	add	r0, sp, #16
   13458:	str	r0, [sp]
   1345c:	add	r3, sp, #12
   13460:	mov	r0, r6
   13464:	mov	r1, r7
   13468:	bl	18a1c <flatcc_json_parser_integer@@Base>
   1346c:	mov	r1, r0
   13470:	cmp	r0, r7
   13474:	beq	1349c <test@@Base+0x9dc>
   13478:	ldr	r3, [sp, #12]
   1347c:	ldr	r0, [sp, #16]
   13480:	ldr	r2, [sp, #20]
   13484:	stm	sp, {r0, r2, r5}
   13488:	mov	r0, r6
   1348c:	mov	r2, r4
   13490:	bl	136f0 <main@@Base+0xe0>
   13494:	mov	r7, r0
   13498:	b	134a0 <test@@Base+0x9e0>
   1349c:	mov	r7, r1
   134a0:	mov	r0, r7
   134a4:	sub	sp, fp, #16
   134a8:	pop	{r4, r5, r6, r7, fp, pc}
   134ac:	push	{r4, r5, r6, r7, fp, lr}
   134b0:	add	fp, sp, #16
   134b4:	sub	sp, sp, #24
   134b8:	mov	r7, r1
   134bc:	mov	r6, r0
   134c0:	mov	r0, #0
   134c4:	str	r0, [sp, #20]
   134c8:	str	r0, [sp, #16]
   134cc:	str	r0, [sp, #12]
   134d0:	str	r0, [r3]
   134d4:	str	r0, [r3, #4]
   134d8:	cmp	r1, r2
   134dc:	beq	13534 <test@@Base+0xa74>
   134e0:	mov	r5, r3
   134e4:	mov	r4, r2
   134e8:	add	r0, sp, #16
   134ec:	str	r0, [sp]
   134f0:	add	r3, sp, #12
   134f4:	mov	r0, r6
   134f8:	mov	r1, r7
   134fc:	bl	18a1c <flatcc_json_parser_integer@@Base>
   13500:	mov	r1, r0
   13504:	cmp	r0, r7
   13508:	beq	13530 <test@@Base+0xa70>
   1350c:	ldr	r3, [sp, #12]
   13510:	ldr	r0, [sp, #16]
   13514:	ldr	r2, [sp, #20]
   13518:	stm	sp, {r0, r2, r5}
   1351c:	mov	r0, r6
   13520:	mov	r2, r4
   13524:	bl	13738 <main@@Base+0x128>
   13528:	mov	r7, r0
   1352c:	b	13534 <test@@Base+0xa74>
   13530:	mov	r7, r1
   13534:	mov	r0, r7
   13538:	sub	sp, fp, #16
   1353c:	pop	{r4, r5, r6, r7, fp, pc}
   13540:	push	{r4, r5, r6, r7, fp, lr}
   13544:	add	fp, sp, #16
   13548:	sub	sp, sp, #24
   1354c:	mov	r7, r1
   13550:	mov	r6, r0
   13554:	mov	r0, #0
   13558:	str	r0, [sp, #20]
   1355c:	str	r0, [sp, #16]
   13560:	str	r0, [sp, #12]
   13564:	str	r0, [r3]
   13568:	cmp	r1, r2
   1356c:	beq	135c4 <test@@Base+0xb04>
   13570:	mov	r5, r3
   13574:	mov	r4, r2
   13578:	add	r0, sp, #16
   1357c:	str	r0, [sp]
   13580:	add	r3, sp, #12
   13584:	mov	r0, r6
   13588:	mov	r1, r7
   1358c:	bl	18a1c <flatcc_json_parser_integer@@Base>
   13590:	mov	r1, r0
   13594:	cmp	r0, r7
   13598:	beq	135c0 <test@@Base+0xb00>
   1359c:	ldr	r3, [sp, #12]
   135a0:	ldr	r0, [sp, #16]
   135a4:	ldr	r2, [sp, #20]
   135a8:	stm	sp, {r0, r2, r5}
   135ac:	mov	r0, r6
   135b0:	mov	r2, r4
   135b4:	bl	13790 <main@@Base+0x180>
   135b8:	mov	r7, r0
   135bc:	b	135c4 <test@@Base+0xb04>
   135c0:	mov	r7, r1
   135c4:	mov	r0, r7
   135c8:	sub	sp, fp, #16
   135cc:	pop	{r4, r5, r6, r7, fp, pc}
   135d0:	cmp	r1, r2
   135d4:	beq	135e8 <test@@Base+0xb28>
   135d8:	ldrb	r3, [r1]
   135dc:	cmp	r3, #34	; 0x22
   135e0:	addeq	r0, r1, #1
   135e4:	bxeq	lr
   135e8:	mov	r3, #16
   135ec:	b	17760 <flatcc_json_parser_set_error@@Base>
   135f0:	cmp	r1, r2
   135f4:	beq	13608 <test@@Base+0xb48>
   135f8:	ldrb	r3, [r1]
   135fc:	cmp	r3, #34	; 0x22
   13600:	addeq	r0, r1, #1
   13604:	bxeq	lr
   13608:	mov	r3, #20
   1360c:	b	17760 <flatcc_json_parser_set_error@@Base>

00013610 <main@@Base>:
   13610:	push	{r4, sl, fp, lr}
   13614:	add	fp, sp, #8
   13618:	sub	sp, sp, #240	; 0xf0
   1361c:	mvn	r0, #0
   13620:	str	r0, [fp, #-12]
   13624:	add	r4, sp, #4
   13628:	mov	r0, r4
   1362c:	bl	13980 <flatcc_builder_init@@Base>
   13630:	movw	r0, #645	; 0x285
   13634:	movw	r1, #43812	; 0xab24
   13638:	movt	r1, #1
   1363c:	add	r2, r1, r0
   13640:	sub	r3, fp, #12
   13644:	mov	r0, r4
   13648:	bl	12ac0 <test@@Base>
   1364c:	mov	r0, r4
   13650:	bl	13af8 <flatcc_builder_clear@@Base>
   13654:	ldr	r0, [fp, #-12]
   13658:	sub	sp, fp, #8
   1365c:	pop	{r4, sl, fp, pc}
   13660:	mov	ip, r0
   13664:	sub	r0, r1, r0
   13668:	cmp	r0, #8
   1366c:	movcs	r0, #8
   13670:	and	r0, r0, #15
   13674:	sub	r3, r0, #1
   13678:	mov	r1, #0
   1367c:	mov	r0, #0
   13680:	cmp	r3, #7
   13684:	bxhi	lr
   13688:	add	r2, pc, #0
   1368c:	ldr	pc, [r2, r3, lsl #2]
   13690:	andeq	r3, r1, r4, ror #13
   13694:	ldrdeq	r3, [r1], -ip
   13698:	ldrdeq	r3, [r1], -r4
   1369c:	andeq	r3, r1, ip, asr #13
   136a0:	andeq	r3, r1, r4, asr #13
   136a4:			; <UNDEFINED> instruction: 0x000136bc
   136a8:			; <UNDEFINED> instruction: 0x000136b4
   136ac:			; <UNDEFINED> instruction: 0x000136b0
   136b0:	ldrb	r0, [ip, #7]
   136b4:	ldrb	r2, [ip, #6]
   136b8:	orr	r0, r0, r2, lsl #8
   136bc:	ldrb	r2, [ip, #5]
   136c0:	orr	r0, r0, r2, lsl #16
   136c4:	ldrb	r2, [ip, #4]
   136c8:	orr	r0, r0, r2, lsl #24
   136cc:	ldrb	r2, [ip, #3]
   136d0:	orr	r1, r2, r1
   136d4:	ldrb	r2, [ip, #2]
   136d8:	orr	r1, r1, r2, lsl #8
   136dc:	ldrb	r2, [ip, #1]
   136e0:	orr	r1, r1, r2, lsl #16
   136e4:	ldrb	r2, [ip]
   136e8:	orr	r1, r1, r2, lsl #24
   136ec:	bx	lr
   136f0:	push	{fp, lr}
   136f4:	mov	fp, sp
   136f8:	cmp	r3, #0
   136fc:	beq	1370c <main@@Base+0xfc>
   13700:	mov	r3, #8
   13704:	pop	{fp, lr}
   13708:	b	17760 <flatcc_json_parser_set_error@@Base>
   1370c:	ldr	ip, [fp, #12]
   13710:	ldr	lr, [fp, #8]
   13714:	subs	r3, lr, #256	; 0x100
   13718:	sbcs	r3, ip, #0
   1371c:	ldrcc	r0, [fp, #16]
   13720:	strbcc	lr, [r0]
   13724:	movcc	r0, r1
   13728:	popcc	{fp, pc}
   1372c:	mov	r3, #7
   13730:	pop	{fp, lr}
   13734:	b	17760 <flatcc_json_parser_set_error@@Base>
   13738:	push	{r4, r5, fp, lr}
   1373c:	add	fp, sp, #8
   13740:	add	ip, fp, #8
   13744:	ldm	ip, {r4, r5, ip}
   13748:	cmp	r3, #0
   1374c:	beq	13768 <main@@Base+0x158>
   13750:	subs	r3, r4, #1
   13754:	sbcs	r3, r5, #-2147483648	; 0x80000000
   13758:	bcc	1377c <main@@Base+0x16c>
   1375c:	mov	r3, #8
   13760:	pop	{r4, r5, fp, lr}
   13764:	b	17760 <flatcc_json_parser_set_error@@Base>
   13768:	cmn	r5, #1
   1376c:	bgt	13784 <main@@Base+0x174>
   13770:	mov	r3, #7
   13774:	pop	{r4, r5, fp, lr}
   13778:	b	17760 <flatcc_json_parser_set_error@@Base>
   1377c:	rsbs	r4, r4, #0
   13780:	rsc	r5, r5, #0
   13784:	strd	r4, [ip]
   13788:	mov	r0, r1
   1378c:	pop	{r4, r5, fp, pc}
   13790:	cmp	r3, #0
   13794:	beq	137a0 <main@@Base+0x190>
   13798:	mov	r3, #8
   1379c:	b	17760 <flatcc_json_parser_set_error@@Base>
   137a0:	ldr	r3, [sp, #4]
   137a4:	cmp	r3, #0
   137a8:	beq	137b4 <main@@Base+0x1a4>
   137ac:	mov	r3, #7
   137b0:	b	17760 <flatcc_json_parser_set_error@@Base>
   137b4:	ldr	r0, [sp]
   137b8:	ldr	r2, [sp, #8]
   137bc:	str	r0, [r2]
   137c0:	mov	r0, r1
   137c4:	bx	lr

000137c8 <flatcc_builder_default_alloc@@Base>:
   137c8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   137cc:	add	fp, sp, #24
   137d0:	mov	r4, r1
   137d4:	cmp	r2, #0
   137d8:	beq	13820 <flatcc_builder_default_alloc@@Base+0x58>
   137dc:	mov	r8, r3
   137e0:	ldr	r0, [fp, #8]
   137e4:	sub	r1, r0, #1
   137e8:	cmp	r1, #6
   137ec:	bhi	1384c <flatcc_builder_default_alloc@@Base+0x84>
   137f0:	mov	r0, #256	; 0x100
   137f4:	add	r3, pc, #0
   137f8:	ldr	pc, [r3, r1, lsl #2]
   137fc:	andeq	r3, r1, r0, ror #16
   13800:	andeq	r3, r1, ip, asr #16
   13804:	andeq	r3, r1, ip, asr #16
   13808:	andeq	r3, r1, r8, lsl r8
   1380c:	andeq	r3, r1, r4, asr r8
   13810:	andeq	r3, r1, ip, asr #16
   13814:	andeq	r3, r1, ip, asr r8
   13818:	mov	r0, #288	; 0x120
   1381c:	b	13860 <flatcc_builder_default_alloc@@Base+0x98>
   13820:	ldr	r0, [r4]
   13824:	cmp	r0, #0
   13828:	moveq	r6, #0
   1382c:	moveq	r0, r6
   13830:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   13834:	bl	128f8 <free@plt>
   13838:	mov	r6, #0
   1383c:	str	r6, [r4]
   13840:	str	r6, [r4, #4]
   13844:	mov	r0, r6
   13848:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1384c:	mov	r0, #32
   13850:	b	13860 <flatcc_builder_default_alloc@@Base+0x98>
   13854:	mov	r0, r2
   13858:	b	13860 <flatcc_builder_default_alloc@@Base+0x98>
   1385c:	mov	r0, #64	; 0x40
   13860:	mov	r7, r0
   13864:	lsl	r0, r0, #1
   13868:	cmp	r7, r2
   1386c:	bcc	13860 <flatcc_builder_default_alloc@@Base+0x98>
   13870:	ldr	r0, [r4, #4]
   13874:	mov	r6, #0
   13878:	cmp	r0, r2
   1387c:	lsrcs	r0, r0, #1
   13880:	cmpcs	r0, r7
   13884:	bcs	138bc <flatcc_builder_default_alloc@@Base+0xf4>
   13888:	ldr	r0, [r4]
   1388c:	mov	r1, r7
   13890:	bl	12934 <realloc@plt>
   13894:	cmp	r0, #0
   13898:	mvneq	r6, #0
   1389c:	moveq	r0, r6
   138a0:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   138a4:	mov	r5, r0
   138a8:	cmp	r8, #0
   138ac:	ldrne	r1, [r4, #4]
   138b0:	cmpne	r7, r1
   138b4:	bhi	138c4 <flatcc_builder_default_alloc@@Base+0xfc>
   138b8:	stm	r4, {r5, r7}
   138bc:	mov	r0, r6
   138c0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   138c4:	add	r0, r5, r1
   138c8:	sub	r2, r7, r1
   138cc:	mov	r1, #0
   138d0:	bl	12994 <memset@plt>
   138d4:	b	138b8 <flatcc_builder_default_alloc@@Base+0xf0>

000138d8 <flatcc_builder_flush_vtable_cache@@Base>:
   138d8:	push	{r4, r5, fp, lr}
   138dc:	add	fp, sp, #8
   138e0:	mov	r4, r0
   138e4:	ldr	r0, [r0, #116]	; 0x74
   138e8:	cmp	r0, #0
   138ec:	popeq	{r4, r5, fp, pc}
   138f0:	ldr	r0, [r4, #92]	; 0x5c
   138f4:	ldr	r2, [r4, #96]	; 0x60
   138f8:	mov	r5, #0
   138fc:	mov	r1, #0
   13900:	bl	12994 <memset@plt>
   13904:	mov	r0, #16
   13908:	str	r5, [r4, #120]	; 0x78
   1390c:	str	r0, [r4, #124]	; 0x7c
   13910:	pop	{r4, r5, fp, pc}

00013914 <flatcc_builder_custom_init@@Base>:
   13914:	push	{r4, r5, r6, r7, fp, lr}
   13918:	add	fp, sp, #16
   1391c:	mov	r5, r3
   13920:	mov	r6, r2
   13924:	mov	r7, r1
   13928:	mov	r4, r0
   1392c:	mov	r1, #0
   13930:	mov	r2, #232	; 0xe8
   13934:	bl	12994 <memset@plt>
   13938:	ldr	r0, [fp, #8]
   1393c:	cmp	r7, #0
   13940:	bne	13958 <flatcc_builder_custom_init@@Base+0x44>
   13944:	mov	r1, #1
   13948:	str	r1, [r4, #184]	; 0xb8
   1394c:	add	r6, r4, #188	; 0xbc
   13950:	movw	r7, #27884	; 0x6cec
   13954:	movt	r7, #1
   13958:	movw	r1, #14280	; 0x37c8
   1395c:	movt	r1, #1
   13960:	cmp	r5, #0
   13964:	movne	r1, r5
   13968:	str	r6, [r4, #36]	; 0x24
   1396c:	str	r0, [r4, #40]	; 0x28
   13970:	str	r7, [r4, #44]	; 0x2c
   13974:	str	r1, [r4, #48]	; 0x30
   13978:	mov	r0, #0
   1397c:	pop	{r4, r5, r6, r7, fp, pc}

00013980 <flatcc_builder_init@@Base>:
   13980:	push	{fp, lr}
   13984:	mov	fp, sp
   13988:	sub	sp, sp, #8
   1398c:	mov	r1, #0
   13990:	str	r1, [sp]
   13994:	mov	r1, #0
   13998:	mov	r2, #0
   1399c:	mov	r3, #0
   139a0:	bl	13914 <flatcc_builder_custom_init@@Base>
   139a4:	mov	r0, #0
   139a8:	mov	sp, fp
   139ac:	pop	{fp, pc}

000139b0 <flatcc_builder_custom_reset@@Base>:
   139b0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   139b4:	add	fp, sp, #24
   139b8:	sub	sp, sp, #8
   139bc:	mov	r9, r2
   139c0:	mov	r8, r1
   139c4:	mov	r4, r0
   139c8:	add	r7, r0, #52	; 0x34
   139cc:	mov	r5, #0
   139d0:	ldr	r0, [r7]
   139d4:	cmp	r0, #0
   139d8:	beq	13a1c <flatcc_builder_custom_reset@@Base+0x6c>
   139dc:	cmp	r9, #0
   139e0:	cmpne	r5, #5
   139e4:	beq	13a0c <flatcc_builder_custom_reset@@Base+0x5c>
   139e8:	ldr	r0, [r4, #40]	; 0x28
   139ec:	ldr	r6, [r4, #48]	; 0x30
   139f0:	str	r5, [sp]
   139f4:	mov	r1, r7
   139f8:	mov	r2, #1
   139fc:	mov	r3, #1
   13a00:	blx	r6
   13a04:	cmp	r0, #0
   13a08:	bne	13abc <flatcc_builder_custom_reset@@Base+0x10c>
   13a0c:	ldm	r7, {r0, r2}
   13a10:	mov	r1, #0
   13a14:	bl	12994 <memset@plt>
   13a18:	b	13a28 <flatcc_builder_custom_reset@@Base+0x78>
   13a1c:	ldr	r0, [r7, #4]
   13a20:	cmp	r0, #0
   13a24:	bne	13acc <flatcc_builder_custom_reset@@Base+0x11c>
   13a28:	add	r7, r7, #8
   13a2c:	add	r5, r5, #1
   13a30:	cmp	r5, #8
   13a34:	bcc	139d0 <flatcc_builder_custom_reset@@Base+0x20>
   13a38:	mov	r0, #0
   13a3c:	str	r0, [r4, #120]	; 0x78
   13a40:	ldr	r1, [r4, #124]	; 0x7c
   13a44:	cmp	r1, #0
   13a48:	movne	r1, #16
   13a4c:	strne	r1, [r4, #124]	; 0x7c
   13a50:	vmov.i32	q8, #0	; 0x00000000
   13a54:	strh	r0, [r4, #128]	; 0x80
   13a58:	str	r0, [r4, #136]	; 0x88
   13a5c:	str	r0, [r4, #140]	; 0x8c
   13a60:	str	r0, [r4, #32]
   13a64:	add	r1, r4, #148	; 0x94
   13a68:	vst1.32	{d16-d17}, [r1]
   13a6c:	ldr	r1, [r4, #52]	; 0x34
   13a70:	ldr	r2, [r4, #60]	; 0x3c
   13a74:	ldr	r3, [r4, #76]	; 0x4c
   13a78:	str	r2, [r4, #16]
   13a7c:	str	r0, [r4, #20]
   13a80:	str	r0, [r4, #24]
   13a84:	str	r3, [r4]
   13a88:	str	r1, [r4, #4]
   13a8c:	cmp	r8, #0
   13a90:	movne	r0, #0
   13a94:	strne	r0, [r4, #172]	; 0xac
   13a98:	strne	r0, [r4, #176]	; 0xb0
   13a9c:	strne	r0, [r4, #180]	; 0xb4
   13aa0:	ldr	r0, [r4, #184]	; 0xb8
   13aa4:	mov	r5, #0
   13aa8:	cmp	r0, #0
   13aac:	beq	13ac0 <flatcc_builder_custom_reset@@Base+0x110>
   13ab0:	add	r0, r4, #188	; 0xbc
   13ab4:	bl	16bcc <flatcc_emitter_reset@@Base>
   13ab8:	b	13ac0 <flatcc_builder_custom_reset@@Base+0x110>
   13abc:	mvn	r5, #0
   13ac0:	mov	r0, r5
   13ac4:	sub	sp, fp, #24
   13ac8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13acc:	movw	r0, #45065	; 0xb009
   13ad0:	movt	r0, #1
   13ad4:	movw	r1, #45083	; 0xb01b
   13ad8:	movt	r1, #1
   13adc:	movw	r3, #45153	; 0xb061
   13ae0:	movt	r3, #1
   13ae4:	movw	r2, #434	; 0x1b2
   13ae8:	bl	129c4 <__assert_fail@plt>

00013aec <flatcc_builder_reset@@Base>:
   13aec:	mov	r1, #0
   13af0:	mov	r2, #0
   13af4:	b	139b0 <flatcc_builder_custom_reset@@Base>

00013af8 <flatcc_builder_clear@@Base>:
   13af8:	push	{r4, r5, r6, r7, fp, lr}
   13afc:	add	fp, sp, #16
   13b00:	sub	sp, sp, #8
   13b04:	mov	r7, r0
   13b08:	add	r5, r0, #52	; 0x34
   13b0c:	mov	r6, #0
   13b10:	ldr	r0, [r7, #40]	; 0x28
   13b14:	ldr	r4, [r7, #48]	; 0x30
   13b18:	str	r6, [sp]
   13b1c:	mov	r1, r5
   13b20:	mov	r2, #0
   13b24:	mov	r3, #0
   13b28:	blx	r4
   13b2c:	add	r5, r5, #8
   13b30:	add	r6, r6, #1
   13b34:	cmp	r6, #8
   13b38:	bne	13b10 <flatcc_builder_clear@@Base+0x18>
   13b3c:	ldr	r0, [r7, #184]	; 0xb8
   13b40:	cmp	r0, #0
   13b44:	beq	13b50 <flatcc_builder_clear@@Base+0x58>
   13b48:	add	r0, r7, #188	; 0xbc
   13b4c:	bl	16c88 <flatcc_emitter_clear@@Base>
   13b50:	mov	r0, r7
   13b54:	mov	r1, #0
   13b58:	mov	r2, #232	; 0xe8
   13b5c:	sub	sp, fp, #16
   13b60:	pop	{r4, r5, r6, r7, fp, lr}
   13b64:	b	12994 <memset@plt>

00013b68 <flatcc_builder_enter_user_frame_ptr@@Base>:
   13b68:	push	{r4, r5, r6, r7, fp, lr}
   13b6c:	add	fp, sp, #16
   13b70:	sub	sp, sp, #8
   13b74:	mov	r4, r0
   13b78:	ldr	r2, [r0, #228]	; 0xe4
   13b7c:	mov	r7, #0
   13b80:	str	r7, [sp]
   13b84:	add	r0, r1, #7
   13b88:	bic	r5, r0, #3
   13b8c:	mov	r0, r4
   13b90:	mov	r1, #7
   13b94:	mov	r3, r5
   13b98:	bl	13be0 <flatcc_builder_enter_user_frame_ptr@@Base+0x78>
   13b9c:	cmp	r0, #0
   13ba0:	beq	13bd4 <flatcc_builder_enter_user_frame_ptr@@Base+0x6c>
   13ba4:	mov	r6, r0
   13ba8:	mov	r1, #0
   13bac:	mov	r2, r5
   13bb0:	bl	12994 <memset@plt>
   13bb4:	ldr	r0, [r4, #224]	; 0xe0
   13bb8:	str	r0, [r6], #4
   13bbc:	ldr	r0, [r4, #228]	; 0xe4
   13bc0:	add	r1, r0, #4
   13bc4:	add	r0, r0, r5
   13bc8:	str	r1, [r4, #224]	; 0xe0
   13bcc:	str	r0, [r4, #228]	; 0xe4
   13bd0:	mov	r7, r6
   13bd4:	mov	r0, r7
   13bd8:	sub	sp, fp, #16
   13bdc:	pop	{r4, r5, r6, r7, fp, pc}
   13be0:	push	{r4, r5, fp, lr}
   13be4:	add	fp, sp, #8
   13be8:	sub	sp, sp, #8
   13bec:	mov	r4, r2
   13bf0:	add	r2, r3, r2
   13bf4:	add	r3, r0, r1, lsl #3
   13bf8:	add	r5, r3, #52	; 0x34
   13bfc:	ldr	r3, [r3, #56]	; 0x38
   13c00:	cmp	r2, r3
   13c04:	bls	13c2c <flatcc_builder_enter_user_frame_ptr@@Base+0xc4>
   13c08:	ldr	r3, [fp, #8]
   13c0c:	ldr	ip, [r0, #40]	; 0x28
   13c10:	ldr	lr, [r0, #48]	; 0x30
   13c14:	str	r1, [sp]
   13c18:	mov	r0, ip
   13c1c:	mov	r1, r5
   13c20:	blx	lr
   13c24:	cmp	r0, #0
   13c28:	bne	13c3c <flatcc_builder_enter_user_frame_ptr@@Base+0xd4>
   13c2c:	ldr	r0, [r5]
   13c30:	add	r0, r0, r4
   13c34:	sub	sp, fp, #8
   13c38:	pop	{r4, r5, fp, pc}
   13c3c:	movw	r0, #49601	; 0xc1c1
   13c40:	movt	r0, #1
   13c44:	movw	r1, #45083	; 0xb01b
   13c48:	movt	r1, #1
   13c4c:	movw	r3, #49147	; 0xbffb
   13c50:	movt	r3, #1
   13c54:	mov	r2, #308	; 0x134
   13c58:	bl	129c4 <__assert_fail@plt>

00013c5c <flatcc_builder_enter_user_frame@@Base>:
   13c5c:	push	{r4, r5, r6, r7, fp, lr}
   13c60:	add	fp, sp, #16
   13c64:	sub	sp, sp, #8
   13c68:	mov	r4, r0
   13c6c:	ldr	r2, [r0, #228]	; 0xe4
   13c70:	mov	r6, #0
   13c74:	str	r6, [sp]
   13c78:	add	r0, r1, #7
   13c7c:	bic	r5, r0, #3
   13c80:	mov	r0, r4
   13c84:	mov	r1, #7
   13c88:	mov	r3, r5
   13c8c:	bl	13be0 <flatcc_builder_enter_user_frame_ptr@@Base+0x78>
   13c90:	cmp	r0, #0
   13c94:	beq	13cc4 <flatcc_builder_enter_user_frame@@Base+0x68>
   13c98:	mov	r7, r0
   13c9c:	mov	r1, #0
   13ca0:	mov	r2, r5
   13ca4:	bl	12994 <memset@plt>
   13ca8:	ldr	r0, [r4, #224]	; 0xe0
   13cac:	str	r0, [r7]
   13cb0:	ldr	r0, [r4, #228]	; 0xe4
   13cb4:	add	r6, r0, #4
   13cb8:	add	r0, r0, r5
   13cbc:	str	r6, [r4, #224]	; 0xe0
   13cc0:	str	r0, [r4, #228]	; 0xe4
   13cc4:	mov	r0, r6
   13cc8:	sub	sp, fp, #16
   13ccc:	pop	{r4, r5, r6, r7, fp, pc}

00013cd0 <flatcc_builder_exit_user_frame@@Base>:
   13cd0:	ldr	r1, [r0, #224]	; 0xe0
   13cd4:	cmp	r1, #0
   13cd8:	subne	r2, r1, #4
   13cdc:	strne	r2, [r0, #228]	; 0xe4
   13ce0:	ldrne	r2, [r0, #108]	; 0x6c
   13ce4:	addne	r1, r2, r1
   13ce8:	ldrne	r1, [r1, #-4]
   13cec:	strne	r1, [r0, #224]	; 0xe0
   13cf0:	movne	r0, r1
   13cf4:	bxne	lr
   13cf8:	push	{fp, lr}
   13cfc:	mov	fp, sp
   13d00:	movw	r0, #45215	; 0xb09f
   13d04:	movt	r0, #1
   13d08:	movw	r1, #45083	; 0xb01b
   13d0c:	movt	r1, #1
   13d10:	movw	r3, #45240	; 0xb0b8
   13d14:	movt	r3, #1
   13d18:	movw	r2, #542	; 0x21e
   13d1c:	bl	129c4 <__assert_fail@plt>

00013d20 <flatcc_builder_exit_user_frame_at@@Base>:
   13d20:	ldr	r2, [r0, #224]	; 0xe0
   13d24:	cmp	r2, r1
   13d28:	bcc	13d34 <flatcc_builder_exit_user_frame_at@@Base+0x14>
   13d2c:	str	r1, [r0, #224]	; 0xe0
   13d30:	b	13cd0 <flatcc_builder_exit_user_frame@@Base>
   13d34:	push	{fp, lr}
   13d38:	mov	fp, sp
   13d3c:	movw	r0, #45298	; 0xb0f2
   13d40:	movt	r0, #1
   13d44:	movw	r1, #45083	; 0xb01b
   13d48:	movt	r1, #1
   13d4c:	movw	r3, #45329	; 0xb111
   13d50:	movt	r3, #1
   13d54:	movw	r2, #551	; 0x227
   13d58:	bl	129c4 <__assert_fail@plt>

00013d5c <flatcc_builder_get_current_user_frame@@Base>:
   13d5c:	ldr	r0, [r0, #224]	; 0xe0
   13d60:	bx	lr

00013d64 <flatcc_builder_get_user_frame_ptr@@Base>:
   13d64:	ldr	r0, [r0, #108]	; 0x6c
   13d68:	add	r0, r0, r1
   13d6c:	bx	lr

00013d70 <flatcc_builder_embed_buffer@@Base>:
   13d70:	push	{r4, r5, r6, r7, fp, lr}
   13d74:	add	fp, sp, #16
   13d78:	sub	sp, sp, #80	; 0x50
   13d7c:	mov	r5, r3
   13d80:	mov	r6, r2
   13d84:	mov	r2, r1
   13d88:	mov	r4, r0
   13d8c:	ldr	r0, [fp, #8]
   13d90:	strh	r0, [fp, #-18]	; 0xffffffee
   13d94:	ldr	r3, [r4, #152]	; 0x98
   13d98:	cmp	r3, #0
   13d9c:	movwne	r3, #1
   13da0:	sub	r1, fp, #18
   13da4:	mov	r0, r4
   13da8:	bl	13e7c <flatcc_builder_embed_buffer@@Base+0x10c>
   13dac:	ldr	r0, [fp, #12]
   13db0:	and	r0, r0, #2
   13db4:	add	r1, r5, r0, lsl #1
   13db8:	ldrh	r2, [fp, #-18]	; 0xffffffee
   13dbc:	mov	r0, r4
   13dc0:	bl	13f38 <flatcc_builder_embed_buffer@@Base+0x1c8>
   13dc4:	mov	r7, r0
   13dc8:	add	r0, r0, r5
   13dcc:	bl	13f4c <flatcc_builder_embed_buffer@@Base+0x1dc>
   13dd0:	mov	r1, #0
   13dd4:	str	r1, [sp]
   13dd8:	str	r0, [fp, #-24]	; 0xffffffe8
   13ddc:	str	r1, [sp, #4]
   13de0:	ldr	r0, [r4, #152]	; 0x98
   13de4:	cmp	r0, #0
   13de8:	beq	13e08 <flatcc_builder_embed_buffer@@Base+0x98>
   13dec:	sub	r0, fp, #24
   13df0:	str	r0, [sp, #8]
   13df4:	mov	r0, #4
   13df8:	str	r0, [sp]
   13dfc:	str	r0, [sp, #12]
   13e00:	mov	r0, #1
   13e04:	str	r0, [sp, #4]
   13e08:	cmp	r5, #0
   13e0c:	beq	13e34 <flatcc_builder_embed_buffer@@Base+0xc4>
   13e10:	ldm	sp, {r0, r1}
   13e14:	add	r0, r0, r5
   13e18:	str	r0, [sp]
   13e1c:	mov	r0, sp
   13e20:	add	r0, r0, r1, lsl #3
   13e24:	str	r6, [r0, #8]
   13e28:	str	r5, [r0, #12]
   13e2c:	add	r0, r1, #1
   13e30:	str	r0, [sp, #4]
   13e34:	cmp	r7, #0
   13e38:	beq	13e68 <flatcc_builder_embed_buffer@@Base+0xf8>
   13e3c:	ldm	sp, {r0, r1}
   13e40:	add	r0, r0, r7
   13e44:	str	r0, [sp]
   13e48:	mov	r0, sp
   13e4c:	add	r0, r0, r1, lsl #3
   13e50:	movw	r2, #44553	; 0xae09
   13e54:	movt	r2, #1
   13e58:	str	r2, [r0, #8]
   13e5c:	str	r7, [r0, #12]
   13e60:	add	r0, r1, #1
   13e64:	str	r0, [sp, #4]
   13e68:	mov	r1, sp
   13e6c:	mov	r0, r4
   13e70:	bl	13f50 <flatcc_builder_embed_buffer@@Base+0x1e0>
   13e74:	sub	sp, fp, #16
   13e78:	pop	{r4, r5, r6, r7, fp, pc}
   13e7c:	push	{r4, r5, r6, r7, fp, lr}
   13e80:	add	fp, sp, #16
   13e84:	sub	sp, sp, #72	; 0x48
   13e88:	mov	r6, r3
   13e8c:	mov	r5, r2
   13e90:	mov	r7, r1
   13e94:	mov	r4, r0
   13e98:	cmp	r2, #0
   13e9c:	bne	13eac <flatcc_builder_embed_buffer@@Base+0x13c>
   13ea0:	ldrh	r5, [r4, #132]	; 0x84
   13ea4:	cmp	r5, #0
   13ea8:	movweq	r5, #1
   13eac:	mov	r0, r7
   13eb0:	mov	r1, #4
   13eb4:	bl	14d24 <flatcc_builder_start_vector@@Base+0x80>
   13eb8:	mov	r0, r7
   13ebc:	mov	r1, r5
   13ec0:	bl	14d24 <flatcc_builder_start_vector@@Base+0x80>
   13ec4:	cmp	r6, #0
   13ec8:	bne	13f10 <flatcc_builder_embed_buffer@@Base+0x1a0>
   13ecc:	mov	r0, r4
   13ed0:	mov	r1, r5
   13ed4:	bl	16a20 <flatcc_builder_get_emit_context@@Base+0x8>
   13ed8:	cmp	r0, #0
   13edc:	beq	13f10 <flatcc_builder_embed_buffer@@Base+0x1a0>
   13ee0:	movw	r1, #44553	; 0xae09
   13ee4:	movt	r1, #1
   13ee8:	str	r1, [sp, #8]
   13eec:	str	r0, [sp]
   13ef0:	str	r0, [sp, #12]
   13ef4:	mov	r0, #1
   13ef8:	str	r0, [sp, #4]
   13efc:	mov	r1, sp
   13f00:	mov	r0, r4
   13f04:	bl	150b0 <flatcc_builder_create_vtable@@Base+0x80>
   13f08:	cmp	r0, #0
   13f0c:	beq	13f18 <flatcc_builder_embed_buffer@@Base+0x1a8>
   13f10:	sub	sp, fp, #16
   13f14:	pop	{r4, r5, r6, r7, fp, pc}
   13f18:	movw	r0, #49601	; 0xc1c1
   13f1c:	movt	r0, #1
   13f20:	movw	r1, #45083	; 0xb01b
   13f24:	movt	r1, #1
   13f28:	movw	r3, #49214	; 0xc03e
   13f2c:	movt	r3, #1
   13f30:	movw	r2, #702	; 0x2be
   13f34:	bl	129c4 <__assert_fail@plt>
   13f38:	ldr	r0, [r0, #136]	; 0x88
   13f3c:	sub	r0, r0, r1
   13f40:	sub	r1, r2, #1
   13f44:	and	r0, r0, r1
   13f48:	bx	lr
   13f4c:	bx	lr
   13f50:	push	{r4, r5, fp, lr}
   13f54:	add	fp, sp, #8
   13f58:	sub	sp, sp, #8
   13f5c:	ldr	r3, [r1]
   13f60:	cmp	r3, #0
   13f64:	ble	13fc4 <flatcc_builder_embed_buffer@@Base+0x254>
   13f68:	mov	r4, r0
   13f6c:	ldr	r0, [r0, #136]	; 0x88
   13f70:	sub	r5, r0, r3
   13f74:	ldr	r2, [r1, #4]
   13f78:	ldr	r0, [r4, #36]	; 0x24
   13f7c:	ldr	ip, [r4, #44]	; 0x2c
   13f80:	str	r3, [sp]
   13f84:	add	r1, r1, #8
   13f88:	mov	r3, r5
   13f8c:	blx	ip
   13f90:	cmp	r0, #0
   13f94:	streq	r5, [r4, #136]	; 0x88
   13f98:	moveq	r0, r5
   13f9c:	subeq	sp, fp, #8
   13fa0:	popeq	{r4, r5, fp, pc}
   13fa4:	movw	r0, #49601	; 0xc1c1
   13fa8:	movt	r0, #1
   13fac:	movw	r1, #45083	; 0xb01b
   13fb0:	movt	r1, #1
   13fb4:	movw	r3, #49280	; 0xc080
   13fb8:	movt	r3, #1
   13fbc:	movw	r2, #651	; 0x28b
   13fc0:	bl	129c4 <__assert_fail@plt>
   13fc4:	movw	r0, #49601	; 0xc1c1
   13fc8:	movt	r0, #1
   13fcc:	movw	r1, #45083	; 0xb01b
   13fd0:	movt	r1, #1
   13fd4:	movw	r3, #49280	; 0xc080
   13fd8:	movt	r3, #1
   13fdc:	movw	r2, #647	; 0x287
   13fe0:	bl	129c4 <__assert_fail@plt>

00013fe4 <flatcc_builder_create_buffer@@Base>:
   13fe4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13fe8:	add	fp, sp, #28
   13fec:	sub	sp, sp, #92	; 0x5c
   13ff0:	mov	r6, r3
   13ff4:	mov	r7, r1
   13ff8:	mov	r4, r0
   13ffc:	ldr	r0, [fp, #8]
   14000:	strh	r0, [fp, #-30]	; 0xffffffe2
   14004:	mov	r0, #0
   14008:	str	r0, [sp, #4]
   1400c:	ldr	sl, [fp, #12]
   14010:	and	r9, sl, #1
   14014:	sub	r1, fp, #30
   14018:	mov	r0, r4
   1401c:	mov	r3, r9
   14020:	bl	13e7c <flatcc_builder_embed_buffer@@Base+0x10c>
   14024:	ldrh	r5, [fp, #-30]	; 0xffffffe2
   14028:	mov	r0, r4
   1402c:	mov	r1, r5
   14030:	bl	141b4 <flatcc_builder_create_buffer@@Base+0x1d0>
   14034:	cmp	r7, #0
   14038:	str	r6, [sp]
   1403c:	beq	14058 <flatcc_builder_create_buffer@@Base+0x74>
   14040:	ldr	r7, [r7]
   14044:	mov	r0, r7
   14048:	bl	141c4 <flatcc_builder_create_buffer@@Base+0x1e0>
   1404c:	bl	13f4c <flatcc_builder_embed_buffer@@Base+0x1dc>
   14050:	str	r7, [sp, #4]
   14054:	b	1405c <flatcc_builder_create_buffer@@Base+0x78>
   14058:	ldr	r7, [sp, #4]
   1405c:	mov	r8, #4
   14060:	and	r0, r8, sl, lsl #1
   14064:	cmp	r7, #0
   14068:	mov	r6, r7
   1406c:	movwne	r6, #1
   14070:	add	r0, r0, r6, lsl #2
   14074:	add	r1, r0, #4
   14078:	mov	r0, r4
   1407c:	mov	r2, r5
   14080:	bl	13f38 <flatcc_builder_embed_buffer@@Base+0x1c8>
   14084:	mov	r1, #0
   14088:	str	r1, [sp, #8]
   1408c:	str	r1, [sp, #12]
   14090:	ands	ip, sl, #3
   14094:	beq	140b0 <flatcc_builder_create_buffer@@Base+0xcc>
   14098:	sub	r1, fp, #40	; 0x28
   1409c:	str	r1, [sp, #16]
   140a0:	str	r8, [sp, #8]
   140a4:	str	r8, [sp, #20]
   140a8:	mov	r1, #1
   140ac:	str	r1, [sp, #12]
   140b0:	ldr	r1, [sp, #8]
   140b4:	ldr	r3, [sp, #12]
   140b8:	add	r5, r1, #4
   140bc:	str	r5, [sp, #8]
   140c0:	add	lr, sp, #8
   140c4:	add	r1, lr, r3, lsl #3
   140c8:	sub	r2, fp, #36	; 0x24
   140cc:	str	r2, [r1, #8]
   140d0:	str	r8, [r1, #12]
   140d4:	add	r1, r3, #1
   140d8:	str	r1, [sp, #12]
   140dc:	cmp	r7, #0
   140e0:	beq	14108 <flatcc_builder_create_buffer@@Base+0x124>
   140e4:	lsl	r2, r6, #2
   140e8:	add	r5, r5, r2
   140ec:	str	r5, [sp, #8]
   140f0:	add	r1, lr, r1, lsl #3
   140f4:	add	r5, sp, #4
   140f8:	str	r5, [r1, #8]
   140fc:	str	r2, [r1, #12]
   14100:	add	r1, r3, #2
   14104:	str	r1, [sp, #12]
   14108:	cmp	r0, #0
   1410c:	beq	1413c <flatcc_builder_create_buffer@@Base+0x158>
   14110:	ldr	r1, [sp, #8]
   14114:	ldr	r2, [sp, #12]
   14118:	add	r1, r1, r0
   1411c:	str	r1, [sp, #8]
   14120:	add	r1, lr, r2, lsl #3
   14124:	movw	r3, #44553	; 0xae09
   14128:	movt	r3, #1
   1412c:	str	r3, [r1, #8]
   14130:	str	r0, [r1, #12]
   14134:	add	r0, r2, #1
   14138:	str	r0, [sp, #12]
   1413c:	ldr	r0, [r4, #136]	; 0x88
   14140:	ldr	r1, [sp, #8]
   14144:	sub	r5, r0, r1
   14148:	cmp	ip, #0
   1414c:	addne	r5, r5, #4
   14150:	mov	r0, #144	; 0x90
   14154:	cmp	r9, #0
   14158:	movweq	r0, #140	; 0x8c
   1415c:	ldr	r0, [r4, r0]
   14160:	sub	r0, r0, r5
   14164:	bl	13f4c <flatcc_builder_embed_buffer@@Base+0x1dc>
   14168:	str	r0, [fp, #-40]	; 0xffffffd8
   1416c:	ldr	r0, [sp]
   14170:	sub	r0, r0, r5
   14174:	bl	13f4c <flatcc_builder_embed_buffer@@Base+0x1dc>
   14178:	str	r0, [fp, #-36]	; 0xffffffdc
   1417c:	add	r1, sp, #8
   14180:	mov	r0, r4
   14184:	bl	13f50 <flatcc_builder_embed_buffer@@Base+0x1e0>
   14188:	cmp	r0, #0
   1418c:	subne	sp, fp, #28
   14190:	popne	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14194:	movw	r0, #49601	; 0xc1c1
   14198:	movt	r0, #1
   1419c:	movw	r1, #45083	; 0xb01b
   141a0:	movt	r1, #1
   141a4:	movw	r3, #45398	; 0xb156
   141a8:	movt	r3, #1
   141ac:	mov	r2, #772	; 0x304
   141b0:	bl	129c4 <__assert_fail@plt>
   141b4:	ldrh	r2, [r0, #128]	; 0x80
   141b8:	cmp	r2, r1
   141bc:	strhcc	r1, [r0, #128]	; 0x80
   141c0:	bx	lr
   141c4:	bx	lr

000141c8 <flatcc_builder_create_struct@@Base>:
   141c8:	push	{r4, r5, r6, r7, fp, lr}
   141cc:	add	fp, sp, #16
   141d0:	sub	sp, sp, #72	; 0x48
   141d4:	cmp	r3, #0
   141d8:	beq	14270 <flatcc_builder_create_struct@@Base+0xa8>
   141dc:	mov	r7, r3
   141e0:	mov	r5, r2
   141e4:	mov	r6, r1
   141e8:	mov	r4, r0
   141ec:	mov	r1, r3
   141f0:	bl	141b4 <flatcc_builder_create_buffer@@Base+0x1d0>
   141f4:	mov	r0, r4
   141f8:	mov	r1, r5
   141fc:	mov	r2, r7
   14200:	bl	13f38 <flatcc_builder_embed_buffer@@Base+0x1c8>
   14204:	mov	r1, #0
   14208:	str	r1, [sp]
   1420c:	str	r1, [sp, #4]
   14210:	cmp	r5, #0
   14214:	strne	r6, [sp, #8]
   14218:	strne	r5, [sp]
   1421c:	strne	r5, [sp, #12]
   14220:	movne	r1, #1
   14224:	strne	r1, [sp, #4]
   14228:	cmp	r0, #0
   1422c:	beq	1425c <flatcc_builder_create_struct@@Base+0x94>
   14230:	ldm	sp, {r1, r2}
   14234:	add	r1, r1, r0
   14238:	str	r1, [sp]
   1423c:	mov	r1, sp
   14240:	add	r1, r1, r2, lsl #3
   14244:	movw	r3, #44553	; 0xae09
   14248:	movt	r3, #1
   1424c:	str	r3, [r1, #8]
   14250:	str	r0, [r1, #12]
   14254:	add	r0, r2, #1
   14258:	str	r0, [sp, #4]
   1425c:	mov	r1, sp
   14260:	mov	r0, r4
   14264:	bl	13f50 <flatcc_builder_embed_buffer@@Base+0x1e0>
   14268:	sub	sp, fp, #16
   1426c:	pop	{r4, r5, r6, r7, fp, pc}
   14270:	movw	r0, #45529	; 0xb1d9
   14274:	movt	r0, #1
   14278:	movw	r1, #45083	; 0xb01b
   1427c:	movt	r1, #1
   14280:	movw	r3, #45540	; 0xb1e4
   14284:	movt	r3, #1
   14288:	movw	r2, #783	; 0x30f
   1428c:	bl	129c4 <__assert_fail@plt>

00014290 <flatcc_builder_start_buffer@@Base>:
   14290:	push	{r4, r5, r6, r7, fp, lr}
   14294:	add	fp, sp, #16
   14298:	mov	r6, r3
   1429c:	mov	r7, r2
   142a0:	mov	r5, r1
   142a4:	mov	r4, r0
   142a8:	ldrh	r1, [r0, #128]	; 0x80
   142ac:	bl	1434c <flatcc_builder_start_buffer@@Base+0xbc>
   142b0:	mov	r1, r0
   142b4:	mvn	r0, #0
   142b8:	cmp	r1, #0
   142bc:	popne	{r4, r5, r6, r7, fp, pc}
   142c0:	mov	r0, #1
   142c4:	strh	r0, [r4, #128]	; 0x80
   142c8:	ldrh	r1, [r4, #132]	; 0x84
   142cc:	ldr	r2, [r4, #32]
   142d0:	strh	r1, [r2, #34]	; 0x22
   142d4:	strh	r7, [r4, #132]	; 0x84
   142d8:	ldrh	r1, [r4, #164]	; 0xa4
   142dc:	ldr	r2, [r4, #32]
   142e0:	strh	r1, [r2, #32]
   142e4:	strh	r6, [r4, #164]	; 0xa4
   142e8:	ldr	r1, [r4, #32]
   142ec:	ldr	r2, [r4, #144]	; 0x90
   142f0:	str	r2, [r1, #20]
   142f4:	ldr	r1, [r4, #32]
   142f8:	ldr	r2, [r4, #152]	; 0x98
   142fc:	str	r2, [r1, #28]
   14300:	ldr	r1, [r4, #32]
   14304:	ldr	r2, [r4, #136]	; 0x88
   14308:	ldr	r3, [r4, #148]	; 0x94
   1430c:	ldr	r7, [r4, #168]	; 0xa8
   14310:	add	r6, r3, #1
   14314:	str	r2, [r4, #144]	; 0x90
   14318:	str	r6, [r4, #148]	; 0x94
   1431c:	str	r3, [r4, #152]	; 0x98
   14320:	str	r7, [r1, #16]
   14324:	movw	r1, #44553	; 0xae09
   14328:	movt	r1, #1
   1432c:	cmp	r5, #0
   14330:	movne	r1, r5
   14334:	ldr	r1, [r1]
   14338:	str	r1, [r4, #168]	; 0xa8
   1433c:	ldr	r1, [r4, #32]
   14340:	strh	r0, [r1, #14]
   14344:	mov	r0, #0
   14348:	pop	{r4, r5, r6, r7, fp, pc}
   1434c:	push	{r4, r5, r6, sl, fp, lr}
   14350:	add	fp, sp, #16
   14354:	sub	sp, sp, #8
   14358:	mov	r5, r1
   1435c:	mov	r4, r0
   14360:	ldr	r1, [r0, #156]	; 0x9c
   14364:	ldr	r2, [r0, #160]	; 0xa0
   14368:	add	r0, r1, #1
   1436c:	str	r0, [r4, #156]	; 0x9c
   14370:	cmp	r1, r2
   14374:	bge	14388 <flatcc_builder_start_buffer@@Base+0xf8>
   14378:	ldr	r0, [r4, #32]
   1437c:	add	r0, r0, #36	; 0x24
   14380:	str	r0, [r4, #32]
   14384:	b	143fc <flatcc_builder_start_buffer@@Base+0x16c>
   14388:	ldr	r2, [r4, #176]	; 0xb0
   1438c:	mvn	r6, #0
   14390:	cmp	r2, #1
   14394:	cmpge	r1, r2
   14398:	bge	14438 <flatcc_builder_start_buffer@@Base+0x1a8>
   1439c:	mov	r1, #0
   143a0:	str	r1, [sp]
   143a4:	add	r0, r0, r0, lsl #3
   143a8:	mvn	r1, #35	; 0x23
   143ac:	add	r2, r1, r0, lsl #2
   143b0:	mov	r0, r4
   143b4:	mov	r1, #4
   143b8:	mov	r3, #36	; 0x24
   143bc:	bl	13be0 <flatcc_builder_enter_user_frame_ptr@@Base+0x78>
   143c0:	str	r0, [r4, #32]
   143c4:	cmp	r0, #0
   143c8:	beq	14438 <flatcc_builder_start_buffer@@Base+0x1a8>
   143cc:	ldr	r0, [r4, #88]	; 0x58
   143d0:	ldr	r1, [r4, #176]	; 0xb0
   143d4:	movw	r2, #36409	; 0x8e39
   143d8:	movt	r2, #14563	; 0x38e3
   143dc:	umull	r0, r2, r0, r2
   143e0:	lsr	r0, r2, #3
   143e4:	cmp	r1, r2, lsr #3
   143e8:	mov	r2, r0
   143ec:	movlt	r2, r1
   143f0:	cmp	r1, #0
   143f4:	movle	r2, r0
   143f8:	str	r2, [r4, #160]	; 0xa0
   143fc:	ldr	r0, [r4, #20]
   14400:	ldr	r1, [r4, #32]
   14404:	str	r0, [r1, #8]
   14408:	ldrh	r2, [r4, #130]	; 0x82
   1440c:	strh	r2, [r1, #12]
   14410:	strh	r5, [r4, #130]	; 0x82
   14414:	ldr	r2, [r4, #28]
   14418:	mvn	r3, #3
   1441c:	stm	r1, {r2, r3}
   14420:	mov	r6, #0
   14424:	str	r6, [r4, #20]
   14428:	add	r0, r0, r2
   1442c:	add	r0, r0, #7
   14430:	bic	r0, r0, #7
   14434:	str	r0, [r4, #28]
   14438:	mov	r0, r6
   1443c:	sub	sp, fp, #16
   14440:	pop	{r4, r5, r6, sl, fp, pc}

00014444 <flatcc_builder_end_buffer@@Base>:
   14444:	push	{r4, r5, r6, r7, fp, lr}
   14448:	add	fp, sp, #16
   1444c:	sub	sp, sp, #8
   14450:	mov	r4, r0
   14454:	ldr	r0, [r0, #32]
   14458:	ldrh	r0, [r0, #14]
   1445c:	cmp	r0, #1
   14460:	bne	144ec <flatcc_builder_end_buffer@@Base+0xa8>
   14464:	mov	r5, r1
   14468:	ldr	r6, [r4, #152]	; 0x98
   1446c:	ldrh	r7, [r4, #164]	; 0xa4
   14470:	ldrh	r1, [r4, #132]	; 0x84
   14474:	mov	r0, r4
   14478:	bl	141b4 <flatcc_builder_create_buffer@@Base+0x1d0>
   1447c:	and	r0, r7, #2
   14480:	cmp	r6, #0
   14484:	orrne	r0, r0, #1
   14488:	ldrh	r2, [r4, #132]	; 0x84
   1448c:	ldrh	r1, [r4, #128]	; 0x80
   14490:	str	r1, [sp]
   14494:	str	r0, [sp, #4]
   14498:	add	r1, r4, #168	; 0xa8
   1449c:	mov	r0, r4
   144a0:	mov	r3, r5
   144a4:	bl	13fe4 <flatcc_builder_create_buffer@@Base>
   144a8:	mov	r5, r0
   144ac:	cmp	r0, #0
   144b0:	beq	144e0 <flatcc_builder_end_buffer@@Base+0x9c>
   144b4:	ldr	r0, [r4, #32]
   144b8:	ldr	r1, [r0, #20]
   144bc:	str	r1, [r4, #144]	; 0x90
   144c0:	ldr	r1, [r0, #28]
   144c4:	str	r1, [r4, #152]	; 0x98
   144c8:	ldr	r1, [r0, #16]
   144cc:	str	r1, [r4, #168]	; 0xa8
   144d0:	ldrh	r0, [r0, #32]
   144d4:	strh	r0, [r4, #164]	; 0xa4
   144d8:	mov	r0, r4
   144dc:	bl	1450c <flatcc_builder_end_buffer@@Base+0xc8>
   144e0:	mov	r0, r5
   144e4:	sub	sp, fp, #16
   144e8:	pop	{r4, r5, r6, r7, fp, pc}
   144ec:	movw	r0, #45642	; 0xb24a
   144f0:	movt	r0, #1
   144f4:	movw	r1, #45083	; 0xb01b
   144f8:	movt	r1, #1
   144fc:	movw	r3, #45686	; 0xb276
   14500:	movt	r3, #1
   14504:	movw	r2, #838	; 0x346
   14508:	bl	129c4 <__assert_fail@plt>
   1450c:	push	{r4, sl, fp, lr}
   14510:	add	fp, sp, #8
   14514:	mov	r4, r0
   14518:	ldr	r0, [r0, #16]
   1451c:	ldr	r2, [r4, #20]
   14520:	mov	r1, #0
   14524:	bl	12994 <memset@plt>
   14528:	ldr	r0, [r4, #32]
   1452c:	ldr	r1, [r0, #8]
   14530:	str	r1, [r4, #20]
   14534:	ldr	r1, [r0]
   14538:	str	r1, [r4, #28]
   1453c:	ldr	r1, [r0, #4]
   14540:	mov	r0, r4
   14544:	bl	145c4 <flatcc_builder_start_struct@@Base+0x4c>
   14548:	ldrh	r1, [r4, #130]	; 0x82
   1454c:	mov	r0, r4
   14550:	bl	141b4 <flatcc_builder_create_buffer@@Base+0x1d0>
   14554:	ldr	r0, [r4, #32]
   14558:	ldr	r1, [r4, #156]	; 0x9c
   1455c:	ldrh	r2, [r0, #12]
   14560:	sub	r0, r0, #36	; 0x24
   14564:	str	r0, [r4, #32]
   14568:	sub	r0, r1, #1
   1456c:	str	r0, [r4, #156]	; 0x9c
   14570:	strh	r2, [r4, #130]	; 0x82
   14574:	pop	{r4, sl, fp, pc}

00014578 <flatcc_builder_start_struct@@Base>:
   14578:	push	{r4, r5, fp, lr}
   1457c:	add	fp, sp, #8
   14580:	mov	r4, r1
   14584:	mov	r5, r0
   14588:	mov	r1, r2
   1458c:	bl	1434c <flatcc_builder_start_buffer@@Base+0xbc>
   14590:	cmp	r0, #0
   14594:	movne	r0, #0
   14598:	popne	{r4, r5, fp, pc}
   1459c:	ldr	r0, [r5, #32]
   145a0:	mov	r1, #2
   145a4:	strh	r1, [r0, #14]
   145a8:	mov	r0, r5
   145ac:	mvn	r1, #3
   145b0:	bl	145c4 <flatcc_builder_start_struct@@Base+0x4c>
   145b4:	mov	r0, r5
   145b8:	mov	r1, r4
   145bc:	pop	{r4, r5, fp, lr}
   145c0:	b	145fc <flatcc_builder_start_struct@@Base+0x84>
   145c4:	push	{fp, lr}
   145c8:	mov	fp, sp
   145cc:	ldr	r2, [r0, #28]
   145d0:	ldr	ip, [r0, #32]
   145d4:	ldr	r3, [r0, #60]	; 0x3c
   145d8:	ldr	lr, [r0, #64]	; 0x40
   145dc:	add	r3, r3, r2
   145e0:	str	r3, [r0, #16]
   145e4:	sub	r2, lr, r2
   145e8:	cmp	r2, r1
   145ec:	movhi	r2, r1
   145f0:	str	r2, [r0, #24]
   145f4:	str	r1, [ip, #4]
   145f8:	pop	{fp, pc}
   145fc:	push	{r4, r5, fp, lr}
   14600:	add	fp, sp, #8
   14604:	mov	r4, r0
   14608:	ldr	r5, [r0, #20]
   1460c:	ldr	r2, [r0, #24]
   14610:	add	r0, r5, r1
   14614:	str	r0, [r4, #20]
   14618:	cmp	r0, r2
   1461c:	bcc	14640 <flatcc_builder_start_struct@@Base+0xc8>
   14620:	add	r1, r0, #1
   14624:	mov	r0, r4
   14628:	mvn	r2, #3
   1462c:	bl	16a30 <flatcc_builder_get_emit_context@@Base+0x18>
   14630:	mov	r1, r0
   14634:	mov	r0, #0
   14638:	cmp	r1, #0
   1463c:	popne	{r4, r5, fp, pc}
   14640:	ldr	r0, [r4, #16]
   14644:	add	r0, r0, r5
   14648:	pop	{r4, r5, fp, pc}

0001464c <flatcc_builder_struct_edit@@Base>:
   1464c:	ldr	r0, [r0, #16]
   14650:	bx	lr

00014654 <flatcc_builder_end_struct@@Base>:
   14654:	push	{r4, r5, fp, lr}
   14658:	add	fp, sp, #8
   1465c:	mov	r4, r0
   14660:	ldr	r0, [r0, #32]
   14664:	ldrh	r0, [r0, #14]
   14668:	cmp	r0, #2
   1466c:	bne	1469c <flatcc_builder_end_struct@@Base+0x48>
   14670:	ldrh	r3, [r4, #130]	; 0x82
   14674:	ldr	r1, [r4, #16]
   14678:	ldr	r2, [r4, #20]
   1467c:	mov	r0, r4
   14680:	bl	141c8 <flatcc_builder_create_struct@@Base>
   14684:	mov	r5, r0
   14688:	cmp	r0, #0
   1468c:	movne	r0, r4
   14690:	blne	1450c <flatcc_builder_end_buffer@@Base+0xc8>
   14694:	mov	r0, r5
   14698:	pop	{r4, r5, fp, pc}
   1469c:	movw	r0, #45775	; 0xb2cf
   146a0:	movt	r0, #1
   146a4:	movw	r1, #45083	; 0xb01b
   146a8:	movt	r1, #1
   146ac:	movw	r3, #45819	; 0xb2fb
   146b0:	movt	r3, #1
   146b4:	mov	r2, #872	; 0x368
   146b8:	bl	129c4 <__assert_fail@plt>

000146bc <flatcc_builder_extend_vector@@Base>:
   146bc:	push	{r4, r5, fp, lr}
   146c0:	add	fp, sp, #8
   146c4:	mov	r5, r1
   146c8:	mov	r4, r0
   146cc:	ldr	r0, [r0, #32]
   146d0:	ldr	r2, [r0, #24]
   146d4:	mov	r0, r4
   146d8:	bl	14700 <flatcc_builder_extend_vector@@Base+0x44>
   146dc:	cmp	r0, #0
   146e0:	movne	r0, #0
   146e4:	popne	{r4, r5, fp, pc}
   146e8:	ldr	r0, [r4, #32]
   146ec:	ldr	r0, [r0, #16]
   146f0:	mul	r1, r0, r5
   146f4:	mov	r0, r4
   146f8:	pop	{r4, r5, fp, lr}
   146fc:	b	145fc <flatcc_builder_start_struct@@Base+0x84>
   14700:	ldr	r0, [r0, #32]
   14704:	ldr	r3, [r0, #20]
   14708:	adds	r1, r3, r1
   1470c:	bcs	14720 <flatcc_builder_extend_vector@@Base+0x64>
   14710:	cmp	r1, r2
   14714:	strls	r1, [r0, #20]
   14718:	movls	r0, #0
   1471c:	bxls	lr
   14720:	push	{fp, lr}
   14724:	mov	fp, sp
   14728:	movw	r0, #49354	; 0xc0ca
   1472c:	movt	r0, #1
   14730:	movw	r1, #45083	; 0xb01b
   14734:	movt	r1, #1
   14738:	movw	r3, #49381	; 0xc0e5
   1473c:	movt	r3, #1
   14740:	mov	r2, #892	; 0x37c
   14744:	bl	129c4 <__assert_fail@plt>

00014748 <flatcc_builder_vector_push@@Base>:
   14748:	push	{fp, lr}
   1474c:	mov	fp, sp
   14750:	ldr	r2, [r0, #32]
   14754:	ldrh	r3, [r2, #14]
   14758:	cmp	r3, #4
   1475c:	bne	14788 <flatcc_builder_vector_push@@Base+0x40>
   14760:	ldr	ip, [r2, #20]
   14764:	ldr	r3, [r2, #24]
   14768:	cmp	ip, r3
   1476c:	bhi	147a8 <flatcc_builder_vector_push@@Base+0x60>
   14770:	add	r3, ip, #1
   14774:	str	r3, [r2, #20]
   14778:	ldr	r2, [r0, #32]
   1477c:	ldr	r2, [r2, #16]
   14780:	pop	{fp, lr}
   14784:	b	147c8 <flatcc_builder_vector_push@@Base+0x80>
   14788:	movw	r0, #45886	; 0xb33e
   1478c:	movt	r0, #1
   14790:	movw	r1, #45083	; 0xb01b
   14794:	movt	r1, #1
   14798:	movw	r3, #45930	; 0xb36a
   1479c:	movt	r3, #1
   147a0:	movw	r2, #907	; 0x38b
   147a4:	bl	129c4 <__assert_fail@plt>
   147a8:	movw	r0, #45997	; 0xb3ad
   147ac:	movt	r0, #1
   147b0:	movw	r1, #45083	; 0xb01b
   147b4:	movt	r1, #1
   147b8:	movw	r3, #45930	; 0xb36a
   147bc:	movt	r3, #1
   147c0:	mov	r2, #908	; 0x38c
   147c4:	bl	129c4 <__assert_fail@plt>
   147c8:	push	{r4, r5, r6, sl, fp, lr}
   147cc:	add	fp, sp, #16
   147d0:	mov	r4, r2
   147d4:	mov	r5, r1
   147d8:	mov	r1, r2
   147dc:	bl	145fc <flatcc_builder_start_struct@@Base+0x84>
   147e0:	mov	r6, r0
   147e4:	cmp	r0, #0
   147e8:	beq	147fc <flatcc_builder_vector_push@@Base+0xb4>
   147ec:	mov	r0, r6
   147f0:	mov	r1, r5
   147f4:	mov	r2, r4
   147f8:	bl	12904 <memcpy@plt>
   147fc:	mov	r0, r6
   14800:	pop	{r4, r5, r6, sl, fp, pc}

00014804 <flatcc_builder_append_vector@@Base>:
   14804:	push	{r4, r5, r6, sl, fp, lr}
   14808:	add	fp, sp, #16
   1480c:	mov	r4, r1
   14810:	mov	r6, r0
   14814:	ldr	r0, [r0, #32]
   14818:	ldrh	r1, [r0, #14]
   1481c:	cmp	r1, #4
   14820:	bne	14860 <flatcc_builder_append_vector@@Base+0x5c>
   14824:	mov	r5, r2
   14828:	ldr	r2, [r0, #24]
   1482c:	mov	r0, r6
   14830:	mov	r1, r5
   14834:	bl	14700 <flatcc_builder_extend_vector@@Base+0x44>
   14838:	cmp	r0, #0
   1483c:	movne	r0, #0
   14840:	popne	{r4, r5, r6, sl, fp, pc}
   14844:	ldr	r0, [r6, #32]
   14848:	ldr	r0, [r0, #16]
   1484c:	mul	r2, r0, r5
   14850:	mov	r0, r6
   14854:	mov	r1, r4
   14858:	pop	{r4, r5, r6, sl, fp, lr}
   1485c:	b	147c8 <flatcc_builder_vector_push@@Base+0x80>
   14860:	movw	r0, #45886	; 0xb33e
   14864:	movt	r0, #1
   14868:	movw	r1, #45083	; 0xb01b
   1486c:	movt	r1, #1
   14870:	movw	r3, #46058	; 0xb3ea
   14874:	movt	r3, #1
   14878:	movw	r2, #915	; 0x393
   1487c:	bl	129c4 <__assert_fail@plt>

00014880 <flatcc_builder_extend_offset_vector@@Base>:
   14880:	push	{r4, r5, fp, lr}
   14884:	add	fp, sp, #8
   14888:	mov	r5, r1
   1488c:	mov	r4, r0
   14890:	mvn	r2, #-1073741824	; 0xc0000000
   14894:	bl	14700 <flatcc_builder_extend_vector@@Base+0x44>
   14898:	mov	r1, r0
   1489c:	mov	r0, #0
   148a0:	cmp	r1, #0
   148a4:	popne	{r4, r5, fp, pc}
   148a8:	lsl	r1, r5, #2
   148ac:	mov	r0, r4
   148b0:	bl	145fc <flatcc_builder_start_struct@@Base+0x84>
   148b4:	pop	{r4, r5, fp, pc}

000148b8 <flatcc_builder_offset_vector_push@@Base>:
   148b8:	push	{r4, r5, fp, lr}
   148bc:	add	fp, sp, #8
   148c0:	mov	r4, r1
   148c4:	ldr	r1, [r0, #32]
   148c8:	ldrh	r2, [r1, #14]
   148cc:	cmp	r2, #5
   148d0:	bne	14908 <flatcc_builder_offset_vector_push@@Base+0x50>
   148d4:	ldr	r2, [r1, #20]
   148d8:	mov	r5, #0
   148dc:	cmn	r2, #-1073741823	; 0xc0000001
   148e0:	beq	14900 <flatcc_builder_offset_vector_push@@Base+0x48>
   148e4:	add	r2, r2, #1
   148e8:	str	r2, [r1, #20]
   148ec:	mov	r1, #4
   148f0:	bl	145fc <flatcc_builder_start_struct@@Base+0x84>
   148f4:	cmp	r0, #0
   148f8:	strne	r4, [r0]
   148fc:	movne	r5, r0
   14900:	mov	r0, r5
   14904:	pop	{r4, r5, fp, pc}
   14908:	movw	r0, #46135	; 0xb437
   1490c:	movt	r0, #1
   14910:	movw	r1, #45083	; 0xb01b
   14914:	movt	r1, #1
   14918:	movw	r3, #46186	; 0xb46a
   1491c:	movt	r3, #1
   14920:	movw	r2, #934	; 0x3a6
   14924:	bl	129c4 <__assert_fail@plt>

00014928 <flatcc_builder_append_offset_vector@@Base>:
   14928:	push	{r4, r5, r6, sl, fp, lr}
   1492c:	add	fp, sp, #16
   14930:	mov	r6, r0
   14934:	ldr	r0, [r0, #32]
   14938:	ldrh	r0, [r0, #14]
   1493c:	cmp	r0, #5
   14940:	bne	14980 <flatcc_builder_append_offset_vector@@Base+0x58>
   14944:	mov	r5, r2
   14948:	mov	r4, r1
   1494c:	mov	r0, r6
   14950:	mov	r1, r2
   14954:	mvn	r2, #-1073741824	; 0xc0000000
   14958:	bl	14700 <flatcc_builder_extend_vector@@Base+0x44>
   1495c:	mov	r1, r0
   14960:	mov	r0, #0
   14964:	cmp	r1, #0
   14968:	popne	{r4, r5, r6, sl, fp, pc}
   1496c:	lsl	r2, r5, #2
   14970:	mov	r0, r6
   14974:	mov	r1, r4
   14978:	bl	147c8 <flatcc_builder_vector_push@@Base+0x80>
   1497c:	pop	{r4, r5, r6, sl, fp, pc}
   14980:	movw	r0, #46135	; 0xb437
   14984:	movt	r0, #1
   14988:	movw	r1, #45083	; 0xb01b
   1498c:	movt	r1, #1
   14990:	movw	r3, #46284	; 0xb4cc
   14994:	movt	r3, #1
   14998:	mov	r2, #948	; 0x3b4
   1499c:	bl	129c4 <__assert_fail@plt>

000149a0 <flatcc_builder_extend_string@@Base>:
   149a0:	push	{r4, r5, fp, lr}
   149a4:	add	fp, sp, #8
   149a8:	mov	r5, r0
   149ac:	ldr	r0, [r0, #32]
   149b0:	ldrh	r0, [r0, #14]
   149b4:	cmp	r0, #6
   149b8:	bne	149e8 <flatcc_builder_extend_string@@Base+0x48>
   149bc:	mov	r4, r1
   149c0:	mov	r0, r5
   149c4:	mvn	r2, #0
   149c8:	bl	14700 <flatcc_builder_extend_vector@@Base+0x44>
   149cc:	cmp	r0, #0
   149d0:	movne	r0, #0
   149d4:	popne	{r4, r5, fp, pc}
   149d8:	mov	r0, r5
   149dc:	mov	r1, r4
   149e0:	pop	{r4, r5, fp, lr}
   149e4:	b	145fc <flatcc_builder_start_struct@@Base+0x84>
   149e8:	movw	r0, #46400	; 0xb540
   149ec:	movt	r0, #1
   149f0:	movw	r1, #45083	; 0xb01b
   149f4:	movt	r1, #1
   149f8:	movw	r3, #46444	; 0xb56c
   149fc:	movt	r3, #1
   14a00:	movw	r2, #957	; 0x3bd
   14a04:	bl	129c4 <__assert_fail@plt>

00014a08 <flatcc_builder_append_string@@Base>:
   14a08:	push	{r4, r5, r6, sl, fp, lr}
   14a0c:	add	fp, sp, #16
   14a10:	mov	r6, r0
   14a14:	ldr	r0, [r0, #32]
   14a18:	ldrh	r0, [r0, #14]
   14a1c:	cmp	r0, #6
   14a20:	bne	14a5c <flatcc_builder_append_string@@Base+0x54>
   14a24:	mov	r4, r2
   14a28:	mov	r5, r1
   14a2c:	mov	r0, r6
   14a30:	mov	r1, r2
   14a34:	mvn	r2, #0
   14a38:	bl	14700 <flatcc_builder_extend_vector@@Base+0x44>
   14a3c:	cmp	r0, #0
   14a40:	movne	r0, #0
   14a44:	popne	{r4, r5, r6, sl, fp, pc}
   14a48:	mov	r0, r6
   14a4c:	mov	r1, r5
   14a50:	mov	r2, r4
   14a54:	pop	{r4, r5, r6, sl, fp, lr}
   14a58:	b	147c8 <flatcc_builder_vector_push@@Base+0x80>
   14a5c:	movw	r0, #46400	; 0xb540
   14a60:	movt	r0, #1
   14a64:	movw	r1, #45083	; 0xb01b
   14a68:	movt	r1, #1
   14a6c:	movw	r3, #46507	; 0xb5ab
   14a70:	movt	r3, #1
   14a74:	movw	r2, #966	; 0x3c6
   14a78:	bl	129c4 <__assert_fail@plt>

00014a7c <flatcc_builder_append_string_str@@Base>:
   14a7c:	push	{r4, r5, fp, lr}
   14a80:	add	fp, sp, #8
   14a84:	mov	r4, r1
   14a88:	mov	r5, r0
   14a8c:	mov	r0, r1
   14a90:	bl	12970 <strlen@plt>
   14a94:	mov	r2, r0
   14a98:	mov	r0, r5
   14a9c:	mov	r1, r4
   14aa0:	pop	{r4, r5, fp, lr}
   14aa4:	b	14a08 <flatcc_builder_append_string@@Base>

00014aa8 <flatcc_builder_append_string_strn@@Base>:
   14aa8:	push	{r4, r5, fp, lr}
   14aac:	add	fp, sp, #8
   14ab0:	mov	r4, r1
   14ab4:	mov	r5, r0
   14ab8:	mov	r0, r1
   14abc:	mov	r1, r2
   14ac0:	bl	14ad8 <flatcc_builder_append_string_strn@@Base+0x30>
   14ac4:	mov	r2, r0
   14ac8:	mov	r0, r5
   14acc:	mov	r1, r4
   14ad0:	pop	{r4, r5, fp, lr}
   14ad4:	b	14a08 <flatcc_builder_append_string@@Base>
   14ad8:	push	{r4, r5, fp, lr}
   14adc:	add	fp, sp, #8
   14ae0:	mov	r4, r1
   14ae4:	mov	r5, r0
   14ae8:	mov	r1, #0
   14aec:	mov	r2, r4
   14af0:	bl	129ac <memchr@plt>
   14af4:	cmp	r0, #0
   14af8:	subne	r4, r0, r5
   14afc:	mov	r0, r4
   14b00:	pop	{r4, r5, fp, pc}

00014b04 <flatcc_builder_truncate_vector@@Base>:
   14b04:	push	{fp, lr}
   14b08:	mov	fp, sp
   14b0c:	ldr	r2, [r0, #32]
   14b10:	ldrh	r3, [r2, #14]
   14b14:	cmp	r3, #4
   14b18:	bne	14b48 <flatcc_builder_truncate_vector@@Base+0x44>
   14b1c:	ldr	r3, [r2, #20]
   14b20:	cmp	r3, r1
   14b24:	bcc	14b68 <flatcc_builder_truncate_vector@@Base+0x64>
   14b28:	sub	r3, r3, r1
   14b2c:	str	r3, [r2, #20]
   14b30:	ldr	r2, [r0, #32]
   14b34:	ldr	r2, [r2, #16]
   14b38:	mul	r1, r2, r1
   14b3c:	bl	14b88 <flatcc_builder_truncate_vector@@Base+0x84>
   14b40:	mov	r0, #0
   14b44:	pop	{fp, pc}
   14b48:	movw	r0, #45886	; 0xb33e
   14b4c:	movt	r0, #1
   14b50:	movw	r1, #45083	; 0xb01b
   14b54:	movt	r1, #1
   14b58:	movw	r3, #46584	; 0xb5f8
   14b5c:	movt	r3, #1
   14b60:	movw	r2, #985	; 0x3d9
   14b64:	bl	129c4 <__assert_fail@plt>
   14b68:	movw	r0, #46647	; 0xb637
   14b6c:	movt	r0, #1
   14b70:	movw	r1, #45083	; 0xb01b
   14b74:	movt	r1, #1
   14b78:	movw	r3, #46584	; 0xb5f8
   14b7c:	movt	r3, #1
   14b80:	movw	r2, #986	; 0x3da
   14b84:	bl	129c4 <__assert_fail@plt>
   14b88:	mov	r2, r1
   14b8c:	ldr	r1, [r0, #16]
   14b90:	ldr	r3, [r0, #20]
   14b94:	sub	r3, r3, r2
   14b98:	str	r3, [r0, #20]
   14b9c:	add	r0, r1, r3
   14ba0:	mov	r1, #0
   14ba4:	b	12994 <memset@plt>

00014ba8 <flatcc_builder_truncate_offset_vector@@Base>:
   14ba8:	push	{fp, lr}
   14bac:	mov	fp, sp
   14bb0:	ldr	r2, [r0, #32]
   14bb4:	ldrh	r3, [r2, #14]
   14bb8:	cmp	r3, #5
   14bbc:	bne	14bec <flatcc_builder_truncate_offset_vector@@Base+0x44>
   14bc0:	ldr	r3, [r2, #20]
   14bc4:	cmp	r3, r1
   14bc8:	bcc	14c0c <flatcc_builder_truncate_offset_vector@@Base+0x64>
   14bcc:	sub	r3, r3, r1
   14bd0:	str	r3, [r2, #20]
   14bd4:	ldr	r2, [r0, #32]
   14bd8:	ldr	r2, [r2, #16]
   14bdc:	mul	r1, r2, r1
   14be0:	bl	14b88 <flatcc_builder_truncate_vector@@Base+0x84>
   14be4:	mov	r0, #0
   14be8:	pop	{fp, pc}
   14bec:	movw	r0, #46135	; 0xb437
   14bf0:	movt	r0, #1
   14bf4:	movw	r1, #45083	; 0xb01b
   14bf8:	movt	r1, #1
   14bfc:	movw	r3, #46683	; 0xb65b
   14c00:	movt	r3, #1
   14c04:	movw	r2, #994	; 0x3e2
   14c08:	bl	129c4 <__assert_fail@plt>
   14c0c:	movw	r0, #46753	; 0xb6a1
   14c10:	movt	r0, #1
   14c14:	movw	r1, #45083	; 0xb01b
   14c18:	movt	r1, #1
   14c1c:	movw	r3, #46683	; 0xb65b
   14c20:	movt	r3, #1
   14c24:	movw	r2, #995	; 0x3e3
   14c28:	bl	129c4 <__assert_fail@plt>

00014c2c <flatcc_builder_truncate_string@@Base>:
   14c2c:	push	{fp, lr}
   14c30:	mov	fp, sp
   14c34:	ldr	r2, [r0, #32]
   14c38:	ldrh	r3, [r2, #14]
   14c3c:	cmp	r3, #6
   14c40:	bne	14c64 <flatcc_builder_truncate_string@@Base+0x38>
   14c44:	ldr	r3, [r2, #20]
   14c48:	cmp	r3, r1
   14c4c:	bcc	14c84 <flatcc_builder_truncate_string@@Base+0x58>
   14c50:	sub	r3, r3, r1
   14c54:	str	r3, [r2, #20]
   14c58:	bl	14b88 <flatcc_builder_truncate_vector@@Base+0x84>
   14c5c:	mov	r0, #0
   14c60:	pop	{fp, pc}
   14c64:	movw	r0, #46400	; 0xb540
   14c68:	movt	r0, #1
   14c6c:	movw	r1, #45083	; 0xb01b
   14c70:	movt	r1, #1
   14c74:	movw	r3, #46812	; 0xb6dc
   14c78:	movt	r3, #1
   14c7c:	movw	r2, #1003	; 0x3eb
   14c80:	bl	129c4 <__assert_fail@plt>
   14c84:	movw	r0, #46875	; 0xb71b
   14c88:	movt	r0, #1
   14c8c:	movw	r1, #45083	; 0xb01b
   14c90:	movt	r1, #1
   14c94:	movw	r3, #46812	; 0xb6dc
   14c98:	movt	r3, #1
   14c9c:	mov	r2, #1004	; 0x3ec
   14ca0:	bl	129c4 <__assert_fail@plt>

00014ca4 <flatcc_builder_start_vector@@Base>:
   14ca4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14ca8:	add	fp, sp, #24
   14cac:	sub	sp, sp, #8
   14cb0:	mov	r5, r3
   14cb4:	mov	r6, r1
   14cb8:	mov	r4, r0
   14cbc:	strh	r2, [sp, #6]
   14cc0:	add	r0, sp, #6
   14cc4:	mov	r8, #4
   14cc8:	mov	r1, #4
   14ccc:	bl	14d24 <flatcc_builder_start_vector@@Base+0x80>
   14cd0:	ldrh	r1, [sp, #6]
   14cd4:	mov	r0, r4
   14cd8:	bl	1434c <flatcc_builder_start_buffer@@Base+0xbc>
   14cdc:	mvn	r7, #0
   14ce0:	cmp	r0, #0
   14ce4:	bne	14d18 <flatcc_builder_start_vector@@Base+0x74>
   14ce8:	ldr	r0, [r4, #32]
   14cec:	str	r6, [r0, #16]
   14cf0:	ldr	r0, [r4, #32]
   14cf4:	mov	r7, #0
   14cf8:	str	r7, [r0, #20]
   14cfc:	ldr	r0, [r4, #32]
   14d00:	str	r5, [r0, #24]
   14d04:	ldr	r0, [r4, #32]
   14d08:	strh	r8, [r0, #14]
   14d0c:	mov	r0, r4
   14d10:	mvn	r1, #3
   14d14:	bl	145c4 <flatcc_builder_start_struct@@Base+0x4c>
   14d18:	mov	r0, r7
   14d1c:	sub	sp, fp, #24
   14d20:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14d24:	ldrh	r2, [r0]
   14d28:	cmp	r2, r1
   14d2c:	strhcc	r1, [r0]
   14d30:	bx	lr

00014d34 <flatcc_builder_start_offset_vector@@Base>:
   14d34:	push	{r4, r5, r6, sl, fp, lr}
   14d38:	add	fp, sp, #16
   14d3c:	mov	r4, r0
   14d40:	mov	r6, #4
   14d44:	mov	r1, #4
   14d48:	bl	1434c <flatcc_builder_start_buffer@@Base+0xbc>
   14d4c:	mvn	r5, #0
   14d50:	cmp	r0, #0
   14d54:	beq	14d60 <flatcc_builder_start_offset_vector@@Base+0x2c>
   14d58:	mov	r0, r5
   14d5c:	pop	{r4, r5, r6, sl, fp, pc}
   14d60:	ldr	r0, [r4, #32]
   14d64:	str	r6, [r0, #16]
   14d68:	ldr	r0, [r4, #32]
   14d6c:	mov	r5, #0
   14d70:	str	r5, [r0, #20]
   14d74:	ldr	r0, [r4, #32]
   14d78:	mov	r1, #5
   14d7c:	strh	r1, [r0, #14]
   14d80:	mov	r0, r4
   14d84:	mvn	r1, #3
   14d88:	bl	145c4 <flatcc_builder_start_struct@@Base+0x4c>
   14d8c:	mov	r0, r5
   14d90:	pop	{r4, r5, r6, sl, fp, pc}

00014d94 <flatcc_builder_create_offset_vector@@Base>:
   14d94:	push	{r4, r5, r6, sl, fp, lr}
   14d98:	add	fp, sp, #16
   14d9c:	mov	r6, r2
   14da0:	mov	r5, r1
   14da4:	mov	r4, r0
   14da8:	bl	14d34 <flatcc_builder_start_offset_vector@@Base>
   14dac:	cmp	r0, #0
   14db0:	beq	14dbc <flatcc_builder_create_offset_vector@@Base+0x28>
   14db4:	mov	r0, #0
   14db8:	pop	{r4, r5, r6, sl, fp, pc}
   14dbc:	mov	r0, r4
   14dc0:	mov	r1, r6
   14dc4:	bl	14880 <flatcc_builder_extend_offset_vector@@Base>
   14dc8:	cmp	r0, #0
   14dcc:	beq	14db4 <flatcc_builder_create_offset_vector@@Base+0x20>
   14dd0:	lsl	r2, r6, #2
   14dd4:	mov	r1, r5
   14dd8:	bl	12904 <memcpy@plt>
   14ddc:	mov	r0, r4
   14de0:	pop	{r4, r5, r6, sl, fp, lr}
   14de4:	b	14de8 <flatcc_builder_end_offset_vector@@Base>

00014de8 <flatcc_builder_end_offset_vector@@Base>:
   14de8:	push	{r4, r5, fp, lr}
   14dec:	add	fp, sp, #8
   14df0:	mov	r4, r0
   14df4:	ldr	r0, [r0, #32]
   14df8:	ldrh	r1, [r0, #14]
   14dfc:	cmp	r1, #5
   14e00:	bne	14e2c <flatcc_builder_end_offset_vector@@Base+0x44>
   14e04:	ldr	r2, [r0, #20]
   14e08:	ldr	r1, [r4, #16]
   14e0c:	mov	r0, r4
   14e10:	bl	15988 <flatcc_builder_create_offset_vector_direct@@Base>
   14e14:	mov	r5, r0
   14e18:	cmp	r0, #0
   14e1c:	movne	r0, r4
   14e20:	blne	1450c <flatcc_builder_end_buffer@@Base+0xc8>
   14e24:	mov	r0, r5
   14e28:	pop	{r4, r5, fp, pc}
   14e2c:	movw	r0, #46135	; 0xb437
   14e30:	movt	r0, #1
   14e34:	movw	r1, #45083	; 0xb01b
   14e38:	movt	r1, #1
   14e3c:	movw	r3, #47718	; 0xba66
   14e40:	movt	r3, #1
   14e44:	movw	r2, #1480	; 0x5c8
   14e48:	bl	129c4 <__assert_fail@plt>

00014e4c <flatcc_builder_start_string@@Base>:
   14e4c:	push	{r4, r5, r6, sl, fp, lr}
   14e50:	add	fp, sp, #16
   14e54:	mov	r4, r0
   14e58:	mov	r6, #1
   14e5c:	mov	r1, #1
   14e60:	bl	1434c <flatcc_builder_start_buffer@@Base+0xbc>
   14e64:	mvn	r5, #0
   14e68:	cmp	r0, #0
   14e6c:	beq	14e78 <flatcc_builder_start_string@@Base+0x2c>
   14e70:	mov	r0, r5
   14e74:	pop	{r4, r5, r6, sl, fp, pc}
   14e78:	ldr	r0, [r4, #32]
   14e7c:	str	r6, [r0, #16]
   14e80:	ldr	r0, [r4, #32]
   14e84:	mov	r5, #0
   14e88:	str	r5, [r0, #20]
   14e8c:	ldr	r0, [r4, #32]
   14e90:	mov	r1, #6
   14e94:	strh	r1, [r0, #14]
   14e98:	mov	r0, r4
   14e9c:	mvn	r1, #3
   14ea0:	bl	145c4 <flatcc_builder_start_struct@@Base+0x4c>
   14ea4:	mov	r0, r5
   14ea8:	pop	{r4, r5, r6, sl, fp, pc}

00014eac <flatcc_builder_reserve_table@@Base>:
   14eac:	cmn	r1, #1
   14eb0:	ble	14eb8 <flatcc_builder_reserve_table@@Base+0xc>
   14eb4:	b	14ee0 <flatcc_builder_reserve_table@@Base+0x34>
   14eb8:	push	{fp, lr}
   14ebc:	mov	fp, sp
   14ec0:	movw	r0, #46974	; 0xb77e
   14ec4:	movt	r0, #1
   14ec8:	movw	r1, #45083	; 0xb01b
   14ecc:	movt	r1, #1
   14ed0:	movw	r3, #46909	; 0xb73d
   14ed4:	movt	r3, #1
   14ed8:	movw	r2, #1065	; 0x429
   14edc:	bl	129c4 <__assert_fail@plt>
   14ee0:	push	{r4, r5, r6, sl, fp, lr}
   14ee4:	add	fp, sp, #16
   14ee8:	sub	sp, sp, #8
   14eec:	mov	r6, r1
   14ef0:	mov	r4, r0
   14ef4:	ldr	r0, [r0, #32]
   14ef8:	ldrh	r1, [r0, #28]
   14efc:	ldr	r0, [r0, #16]
   14f00:	mov	r2, #1
   14f04:	str	r2, [sp]
   14f08:	mov	r2, #4
   14f0c:	add	r3, r2, r6, lsl #1
   14f10:	add	r2, r0, r1, lsl #1
   14f14:	mov	r5, #0
   14f18:	mov	r0, r4
   14f1c:	mov	r1, #0
   14f20:	bl	13be0 <flatcc_builder_enter_user_frame_ptr@@Base+0x78>
   14f24:	str	r0, [r4, #4]
   14f28:	cmp	r0, #0
   14f2c:	beq	14f68 <flatcc_builder_reserve_table@@Base+0xbc>
   14f30:	lsl	r1, r6, #1
   14f34:	add	r0, r0, #4
   14f38:	str	r0, [r4, #4]
   14f3c:	ldr	r0, [r4, #32]
   14f40:	ldr	r2, [r0, #20]
   14f44:	str	r5, [sp]
   14f48:	orr	r3, r1, #1
   14f4c:	mov	r0, r4
   14f50:	mov	r1, #3
   14f54:	bl	13be0 <flatcc_builder_enter_user_frame_ptr@@Base+0x78>
   14f58:	str	r0, [r4]
   14f5c:	cmp	r0, #0
   14f60:	mvneq	r5, #0
   14f64:	b	14f6c <flatcc_builder_reserve_table@@Base+0xc0>
   14f68:	mvn	r5, #0
   14f6c:	mov	r0, r5
   14f70:	sub	sp, fp, #16
   14f74:	pop	{r4, r5, r6, sl, fp, pc}

00014f78 <flatcc_builder_start_table@@Base>:
   14f78:	push	{r4, r5, r6, sl, fp, lr}
   14f7c:	add	fp, sp, #16
   14f80:	mov	r6, r1
   14f84:	mov	r4, r0
   14f88:	mov	r1, #4
   14f8c:	bl	1434c <flatcc_builder_start_buffer@@Base+0xbc>
   14f90:	mvn	r5, #0
   14f94:	cmp	r0, #0
   14f98:	bne	15010 <flatcc_builder_start_table@@Base+0x98>
   14f9c:	ldr	r0, [r4, #4]
   14fa0:	ldr	r1, [r4, #32]
   14fa4:	ldr	r2, [r4, #52]	; 0x34
   14fa8:	sub	r0, r0, r2
   14fac:	str	r0, [r1, #16]
   14fb0:	ldr	r0, [r4]
   14fb4:	ldr	r1, [r4, #32]
   14fb8:	ldr	r2, [r4, #76]	; 0x4c
   14fbc:	sub	r0, r0, r2
   14fc0:	str	r0, [r1, #20]
   14fc4:	ldr	r0, [r4, #12]
   14fc8:	ldr	r1, [r4, #32]
   14fcc:	str	r0, [r1, #24]
   14fd0:	ldr	r0, [r4, #32]
   14fd4:	ldrh	r1, [r4, #8]
   14fd8:	strh	r1, [r0, #28]
   14fdc:	mov	r0, #0
   14fe0:	strh	r0, [r4, #8]
   14fe4:	movw	r0, #15186	; 0x3b52
   14fe8:	movt	r0, #12137	; 0x2f69
   14fec:	str	r0, [r4, #12]
   14ff0:	ldr	r0, [r4, #32]
   14ff4:	mov	r1, #3
   14ff8:	strh	r1, [r0, #14]
   14ffc:	mov	r0, r4
   15000:	mov	r1, r6
   15004:	bl	14ee0 <flatcc_builder_reserve_table@@Base+0x34>
   15008:	cmp	r0, #0
   1500c:	beq	15018 <flatcc_builder_start_table@@Base+0xa0>
   15010:	mov	r0, r5
   15014:	pop	{r4, r5, r6, sl, fp, pc}
   15018:	mov	r0, r4
   1501c:	movw	r1, #65532	; 0xfffc
   15020:	bl	145c4 <flatcc_builder_start_struct@@Base+0x4c>
   15024:	mov	r5, #0
   15028:	mov	r0, r5
   1502c:	pop	{r4, r5, r6, sl, fp, pc}

00015030 <flatcc_builder_create_vtable@@Base>:
   15030:	push	{fp, lr}
   15034:	mov	fp, sp
   15038:	sub	sp, sp, #72	; 0x48
   1503c:	mov	r3, #0
   15040:	str	r3, [sp, #4]
   15044:	str	r3, [sp]
   15048:	cmp	r2, #0
   1504c:	strne	r1, [sp, #8]
   15050:	strne	r2, [sp]
   15054:	strne	r2, [sp, #12]
   15058:	movne	r1, #1
   1505c:	strne	r1, [sp, #4]
   15060:	ldr	r1, [r0, #152]	; 0x98
   15064:	cmp	r1, #0
   15068:	bne	15078 <flatcc_builder_create_vtable@@Base+0x48>
   1506c:	ldr	r1, [r0, #180]	; 0xb4
   15070:	cmp	r1, #0
   15074:	beq	15094 <flatcc_builder_create_vtable@@Base+0x64>
   15078:	mov	r1, sp
   1507c:	bl	13f50 <flatcc_builder_embed_buffer@@Base+0x1e0>
   15080:	cmp	r0, #0
   15084:	beq	150a4 <flatcc_builder_create_vtable@@Base+0x74>
   15088:	add	r0, r0, #1
   1508c:	mov	sp, fp
   15090:	pop	{fp, pc}
   15094:	mov	r1, sp
   15098:	bl	150b0 <flatcc_builder_create_vtable@@Base+0x80>
   1509c:	cmp	r0, #0
   150a0:	bne	1508c <flatcc_builder_create_vtable@@Base+0x5c>
   150a4:	mov	r0, #0
   150a8:	mov	sp, fp
   150ac:	pop	{fp, pc}
   150b0:	push	{r4, sl, fp, lr}
   150b4:	add	fp, sp, #8
   150b8:	sub	sp, sp, #8
   150bc:	ldr	r4, [r0, #140]	; 0x8c
   150c0:	ldr	r3, [r1]
   150c4:	add	r2, r3, r4
   150c8:	str	r2, [r0, #140]	; 0x8c
   150cc:	cmn	r3, #1
   150d0:	ble	15124 <flatcc_builder_create_vtable@@Base+0xf4>
   150d4:	ldr	r2, [r1, #4]
   150d8:	ldr	ip, [r0, #36]	; 0x24
   150dc:	ldr	lr, [r0, #44]	; 0x2c
   150e0:	str	r3, [sp]
   150e4:	add	r1, r1, #8
   150e8:	mov	r0, ip
   150ec:	mov	r3, r4
   150f0:	blx	lr
   150f4:	cmp	r0, #0
   150f8:	addeq	r0, r4, #1
   150fc:	subeq	sp, fp, #8
   15100:	popeq	{r4, sl, fp, pc}
   15104:	movw	r0, #49601	; 0xc1c1
   15108:	movt	r0, #1
   1510c:	movw	r1, #45083	; 0xb01b
   15110:	movt	r1, #1
   15114:	movw	r3, #49468	; 0xc13c
   15118:	movt	r3, #1
   1511c:	movw	r2, #677	; 0x2a5
   15120:	bl	129c4 <__assert_fail@plt>
   15124:	movw	r0, #49601	; 0xc1c1
   15128:	movt	r0, #1
   1512c:	movw	r1, #45083	; 0xb01b
   15130:	movt	r1, #1
   15134:	movw	r3, #49468	; 0xc13c
   15138:	movt	r3, #1
   1513c:	movw	r2, #673	; 0x2a1
   15140:	bl	129c4 <__assert_fail@plt>

00015144 <flatcc_builder_create_cached_vtable@@Base>:
   15144:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15148:	add	fp, sp, #28
   1514c:	sub	sp, sp, #20
   15150:	mov	r4, r2
   15154:	mov	r9, r1
   15158:	mov	sl, r0
   1515c:	mov	r1, r3
   15160:	bl	15338 <flatcc_builder_create_cached_vtable@@Base+0x1f4>
   15164:	cmp	r0, #0
   15168:	beq	1528c <flatcc_builder_create_cached_vtable@@Base+0x148>
   1516c:	mov	r7, r0
   15170:	ldr	r6, [r0]
   15174:	mov	r5, #0
   15178:	cmp	r6, #0
   1517c:	mov	r8, #0
   15180:	beq	15218 <flatcc_builder_create_cached_vtable@@Base+0xd4>
   15184:	ldr	r5, [sl, #68]	; 0x44
   15188:	str	sl, [sp, #16]
   1518c:	ldr	sl, [sl, #100]	; 0x64
   15190:	mov	r0, #0
   15194:	str	r7, [sp, #8]
   15198:	str	r0, [sp, #12]
   1519c:	add	r8, sl, r6
   151a0:	ldr	r0, [r8, #8]
   151a4:	mov	r1, r5
   151a8:	ldrh	r0, [r1, r0]!	; <UNPREDICTABLE>
   151ac:	cmp	r0, r4
   151b0:	bne	151c8 <flatcc_builder_create_cached_vtable@@Base+0x84>
   151b4:	mov	r0, r9
   151b8:	mov	r2, r4
   151bc:	bl	12910 <memcmp@plt>
   151c0:	cmp	r0, #0
   151c4:	beq	151dc <flatcc_builder_create_cached_vtable@@Base+0x98>
   151c8:	ldr	r6, [r8, #12]!
   151cc:	cmp	r6, #0
   151d0:	mov	r7, r8
   151d4:	bne	1519c <flatcc_builder_create_cached_vtable@@Base+0x58>
   151d8:	b	15208 <flatcc_builder_create_cached_vtable@@Base+0xc4>
   151dc:	ldr	r0, [sp, #16]
   151e0:	ldr	r0, [r0, #152]	; 0x98
   151e4:	ldr	r1, [r8, #4]
   151e8:	cmp	r1, r0
   151ec:	beq	15314 <flatcc_builder_create_cached_vtable@@Base+0x1d0>
   151f0:	mov	r7, r8
   151f4:	ldr	r6, [r7, #12]!
   151f8:	cmp	r6, #0
   151fc:	mov	r0, r8
   15200:	bne	15198 <flatcc_builder_create_cached_vtable@@Base+0x54>
   15204:	b	1520c <flatcc_builder_create_cached_vtable@@Base+0xc8>
   15208:	ldr	r8, [sp, #12]
   1520c:	ldr	sl, [sp, #16]
   15210:	mov	r5, #0
   15214:	ldr	r7, [sp, #8]
   15218:	ldr	r2, [sl, #124]	; 0x7c
   1521c:	str	r5, [sp]
   15220:	mov	r0, sl
   15224:	mov	r1, #6
   15228:	mov	r3, #16
   1522c:	bl	13be0 <flatcc_builder_enter_user_frame_ptr@@Base+0x78>
   15230:	cmp	r0, #0
   15234:	beq	15300 <flatcc_builder_create_cached_vtable@@Base+0x1bc>
   15238:	mov	r6, r0
   1523c:	ldr	r0, [sl, #124]	; 0x7c
   15240:	ldr	r1, [sl, #152]	; 0x98
   15244:	add	r2, r0, #16
   15248:	str	r2, [sl, #124]	; 0x7c
   1524c:	str	r1, [r6, #4]
   15250:	ldr	r1, [r7]
   15254:	str	r1, [r6, #12]
   15258:	str	r0, [r7]
   1525c:	mov	r0, sl
   15260:	mov	r1, r9
   15264:	mov	r2, r4
   15268:	bl	15030 <flatcc_builder_create_vtable@@Base>
   1526c:	str	r0, [r6]
   15270:	cmp	r0, #0
   15274:	beq	15300 <flatcc_builder_create_cached_vtable@@Base+0x1bc>
   15278:	cmp	r8, #0
   1527c:	beq	15294 <flatcc_builder_create_cached_vtable@@Base+0x150>
   15280:	ldr	r0, [r8, #8]
   15284:	str	r0, [r6, #8]
   15288:	b	152fc <flatcc_builder_create_cached_vtable@@Base+0x1b8>
   1528c:	mov	r5, #0
   15290:	b	15300 <flatcc_builder_create_cached_vtable@@Base+0x1bc>
   15294:	ldr	r0, [sl, #172]	; 0xac
   15298:	cmp	r0, #0
   1529c:	beq	152bc <flatcc_builder_create_cached_vtable@@Base+0x178>
   152a0:	ldr	r1, [sl, #120]	; 0x78
   152a4:	add	r1, r1, r4
   152a8:	cmp	r0, r1
   152ac:	bcs	152bc <flatcc_builder_create_cached_vtable@@Base+0x178>
   152b0:	mov	r0, sl
   152b4:	bl	138d8 <flatcc_builder_flush_vtable_cache@@Base>
   152b8:	b	152fc <flatcc_builder_create_cached_vtable@@Base+0x1b8>
   152bc:	ldr	r2, [sl, #120]	; 0x78
   152c0:	mov	r0, #0
   152c4:	str	r0, [sp]
   152c8:	mov	r0, sl
   152cc:	mov	r1, #2
   152d0:	mov	r3, r4
   152d4:	bl	13be0 <flatcc_builder_enter_user_frame_ptr@@Base+0x78>
   152d8:	cmp	r0, #0
   152dc:	beq	1530c <flatcc_builder_create_cached_vtable@@Base+0x1c8>
   152e0:	ldr	r1, [sl, #120]	; 0x78
   152e4:	str	r1, [r6, #8]
   152e8:	add	r1, r1, r4
   152ec:	str	r1, [sl, #120]	; 0x78
   152f0:	mov	r1, r9
   152f4:	mov	r2, r4
   152f8:	bl	12904 <memcpy@plt>
   152fc:	ldr	r5, [r6]
   15300:	mov	r0, r5
   15304:	sub	sp, fp, #28
   15308:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1530c:	mvn	r5, #0
   15310:	b	15300 <flatcc_builder_create_cached_vtable@@Base+0x1bc>
   15314:	ldr	r1, [sp, #8]
   15318:	cmp	r7, r1
   1531c:	ldrne	r0, [r8, #12]
   15320:	strne	r0, [r7]
   15324:	ldrne	r0, [r1]
   15328:	strne	r0, [r8, #12]
   1532c:	strne	r6, [r1]
   15330:	ldr	r5, [r8]
   15334:	b	15300 <flatcc_builder_create_cached_vtable@@Base+0x1bc>
   15338:	push	{r4, r5, fp, lr}
   1533c:	add	fp, sp, #8
   15340:	mov	r4, r1
   15344:	mov	r5, r0
   15348:	ldr	r0, [r0, #116]	; 0x74
   1534c:	cmp	r0, #0
   15350:	bne	1536c <flatcc_builder_create_cached_vtable@@Base+0x228>
   15354:	mov	r0, r5
   15358:	bl	16a98 <flatcc_builder_get_emit_context@@Base+0x80>
   1535c:	mov	r1, r0
   15360:	mov	r0, #0
   15364:	cmp	r1, #0
   15368:	popne	{r4, r5, fp, pc}
   1536c:	ldr	r0, [r5, #92]	; 0x5c
   15370:	ldr	r1, [r5, #116]	; 0x74
   15374:	rsb	r1, r1, #32
   15378:	lsr	r1, r4, r1
   1537c:	add	r0, r0, r1, lsl #2
   15380:	pop	{r4, r5, fp, pc}

00015384 <flatcc_builder_create_table@@Base>:
   15384:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15388:	add	fp, sp, #28
   1538c:	sub	sp, sp, #84	; 0x54
   15390:	strh	r3, [fp, #-30]	; 0xffffffe2
   15394:	ldr	r4, [fp, #12]
   15398:	cmn	r4, #1
   1539c:	ble	154cc <flatcc_builder_create_table@@Base+0x148>
   153a0:	ldr	r8, [fp, #16]
   153a4:	tst	r8, #1
   153a8:	beq	154ec <flatcc_builder_create_table@@Base+0x168>
   153ac:	mov	sl, r2
   153b0:	mov	r6, r1
   153b4:	mov	r5, r0
   153b8:	sub	r0, fp, #30
   153bc:	mov	r1, #4
   153c0:	bl	14d24 <flatcc_builder_start_vector@@Base+0x80>
   153c4:	ldrh	r7, [fp, #-30]	; 0xffffffe2
   153c8:	mov	r0, r5
   153cc:	mov	r1, r7
   153d0:	bl	141b4 <flatcc_builder_create_buffer@@Base+0x1d0>
   153d4:	mov	r0, r5
   153d8:	mov	r1, sl
   153dc:	mov	r2, r7
   153e0:	bl	13f38 <flatcc_builder_embed_buffer@@Base+0x1c8>
   153e4:	mov	r9, r0
   153e8:	mvn	r0, #3
   153ec:	sub	r0, r0, sl
   153f0:	sub	r0, r0, r9
   153f4:	str	r5, [sp]
   153f8:	ldr	r1, [r5, #136]	; 0x88
   153fc:	add	r5, r0, r1
   15400:	rsb	r0, r8, #1
   15404:	add	r0, r0, r5
   15408:	bl	13f4c <flatcc_builder_embed_buffer@@Base+0x1dc>
   1540c:	str	r0, [fp, #-36]	; 0xffffffdc
   15410:	cmp	r4, #1
   15414:	blt	15444 <flatcc_builder_create_table@@Base+0xc0>
   15418:	mvn	r0, #3
   1541c:	ldr	r7, [fp, #8]
   15420:	sub	r5, r0, r5
   15424:	ldrh	r8, [r7], #2
   15428:	ldr	r0, [r8, r6]
   1542c:	add	r0, r5, r0
   15430:	sub	r0, r0, r8
   15434:	bl	13f4c <flatcc_builder_embed_buffer@@Base+0x1dc>
   15438:	str	r0, [r8, r6]
   1543c:	subs	r4, r4, #1
   15440:	bne	15424 <flatcc_builder_create_table@@Base+0xa0>
   15444:	sub	r0, fp, #36	; 0x24
   15448:	str	r0, [sp, #12]
   1544c:	mov	r0, #4
   15450:	str	r0, [sp, #4]
   15454:	str	r0, [sp, #16]
   15458:	mov	r0, #1
   1545c:	str	r0, [sp, #8]
   15460:	cmp	sl, #0
   15464:	beq	15480 <flatcc_builder_create_table@@Base+0xfc>
   15468:	str	r6, [sp, #20]
   1546c:	str	sl, [sp, #24]
   15470:	mov	r0, #2
   15474:	str	r0, [sp, #8]
   15478:	add	r0, sl, #4
   1547c:	str	r0, [sp, #4]
   15480:	cmp	r9, #0
   15484:	ldr	r0, [sp]
   15488:	beq	154bc <flatcc_builder_create_table@@Base+0x138>
   1548c:	ldr	r2, [sp, #4]
   15490:	ldr	r1, [sp, #8]
   15494:	add	r2, r2, r9
   15498:	str	r2, [sp, #4]
   1549c:	add	r2, sp, #4
   154a0:	add	r3, r2, r1, lsl #3
   154a4:	movw	r2, #44553	; 0xae09
   154a8:	movt	r2, #1
   154ac:	str	r2, [r3, #8]
   154b0:	str	r9, [r3, #12]
   154b4:	add	r1, r1, #1
   154b8:	str	r1, [sp, #8]
   154bc:	add	r1, sp, #4
   154c0:	bl	13f50 <flatcc_builder_embed_buffer@@Base+0x1e0>
   154c4:	sub	sp, fp, #28
   154c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   154cc:	movw	r0, #46967	; 0xb777
   154d0:	movt	r0, #1
   154d4:	movw	r1, #45083	; 0xb01b
   154d8:	movt	r1, #1
   154dc:	movw	r3, #46985	; 0xb789
   154e0:	movt	r3, #1
   154e4:	movw	r2, #1237	; 0x4d5
   154e8:	bl	129c4 <__assert_fail@plt>
   154ec:	movw	r0, #47141	; 0xb825
   154f0:	movt	r0, #1
   154f4:	movw	r1, #45083	; 0xb01b
   154f8:	movt	r1, #1
   154fc:	movw	r3, #46985	; 0xb789
   15500:	movt	r3, #1
   15504:	movw	r2, #1243	; 0x4db
   15508:	bl	129c4 <__assert_fail@plt>

0001550c <flatcc_builder_check_required_field@@Base>:
   1550c:	ldr	r2, [r0, #32]
   15510:	ldrh	r2, [r2, #14]
   15514:	cmp	r2, #3
   15518:	bne	15548 <flatcc_builder_check_required_field@@Base+0x3c>
   1551c:	ldrh	r3, [r0, #8]
   15520:	mov	r2, #0
   15524:	cmp	r3, r1
   15528:	bls	15540 <flatcc_builder_check_required_field@@Base+0x34>
   1552c:	ldr	r0, [r0, #4]
   15530:	add	r0, r0, r1, lsl #1
   15534:	ldrh	r2, [r0]
   15538:	cmp	r2, #0
   1553c:	movwne	r2, #1
   15540:	mov	r0, r2
   15544:	bx	lr
   15548:	push	{fp, lr}
   1554c:	mov	fp, sp
   15550:	movw	r0, #47152	; 0xb830
   15554:	movt	r0, #1
   15558:	movw	r1, #45083	; 0xb01b
   1555c:	movt	r1, #1
   15560:	movw	r3, #47195	; 0xb85b
   15564:	movt	r3, #1
   15568:	movw	r2, #1272	; 0x4f8
   1556c:	bl	129c4 <__assert_fail@plt>

00015570 <flatcc_builder_check_union_field@@Base>:
   15570:	mov	r2, r0
   15574:	ldr	r0, [r0, #32]
   15578:	ldrh	r0, [r0, #14]
   1557c:	cmp	r0, #3
   15580:	bne	155e0 <flatcc_builder_check_union_field@@Base+0x70>
   15584:	mov	r0, #0
   15588:	cmp	r1, #0
   1558c:	ldrhne	r3, [r2, #8]
   15590:	cmpne	r3, r1
   15594:	bhi	1559c <flatcc_builder_check_union_field@@Base+0x2c>
   15598:	bx	lr
   1559c:	ldr	r0, [r2, #4]
   155a0:	add	r0, r0, r1, lsl #1
   155a4:	ldrh	r1, [r0, #-2]
   155a8:	cmp	r1, #0
   155ac:	beq	155d0 <flatcc_builder_check_union_field@@Base+0x60>
   155b0:	ldr	r2, [r2, #16]
   155b4:	ldrb	r1, [r2, r1]
   155b8:	ldrh	r0, [r0]
   155bc:	cmp	r1, #0
   155c0:	beq	155d4 <flatcc_builder_check_union_field@@Base+0x64>
   155c4:	cmp	r0, #0
   155c8:	movwne	r0, #1
   155cc:	bx	lr
   155d0:	ldrh	r0, [r0]
   155d4:	clz	r0, r0
   155d8:	lsr	r0, r0, #5
   155dc:	bx	lr
   155e0:	push	{fp, lr}
   155e4:	mov	fp, sp
   155e8:	movw	r0, #47152	; 0xb830
   155ec:	movt	r0, #1
   155f0:	movw	r1, #45083	; 0xb01b
   155f4:	movt	r1, #1
   155f8:	movw	r3, #47278	; 0xb8ae
   155fc:	movt	r3, #1
   15600:	movw	r2, #1279	; 0x4ff
   15604:	bl	129c4 <__assert_fail@plt>

00015608 <flatcc_builder_check_required@@Base>:
   15608:	push	{fp, lr}
   1560c:	mov	fp, sp
   15610:	mov	r3, r0
   15614:	ldr	r0, [r0, #32]
   15618:	ldrh	r0, [r0, #14]
   1561c:	cmp	r0, #3
   15620:	bne	15678 <flatcc_builder_check_required@@Base+0x70>
   15624:	ldrh	ip, [r3, #8]
   15628:	mov	r0, #0
   1562c:	cmp	ip, r2
   15630:	movge	r0, #1
   15634:	cmpge	r2, #1
   15638:	bge	15640 <flatcc_builder_check_required@@Base+0x38>
   1563c:	pop	{fp, pc}
   15640:	ldr	ip, [r3, #4]
   15644:	mov	lr, #0
   15648:	b	1565c <flatcc_builder_check_required@@Base+0x54>
   1564c:	add	lr, lr, #1
   15650:	add	r1, r1, #2
   15654:	cmp	lr, r2
   15658:	popge	{fp, pc}
   1565c:	ldrh	r3, [r1]
   15660:	add	r3, ip, r3, lsl #1
   15664:	ldrh	r3, [r3]
   15668:	cmp	r3, #0
   1566c:	bne	1564c <flatcc_builder_check_required@@Base+0x44>
   15670:	mov	r0, #0
   15674:	pop	{fp, pc}
   15678:	movw	r0, #47152	; 0xb830
   1567c:	movt	r0, #1
   15680:	movw	r1, #45083	; 0xb01b
   15684:	movt	r1, #1
   15688:	movw	r3, #47358	; 0xb8fe
   1568c:	movt	r3, #1
   15690:	movw	r2, #1297	; 0x511
   15694:	bl	129c4 <__assert_fail@plt>

00015698 <flatcc_builder_end_table@@Base>:
   15698:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1569c:	add	fp, sp, #24
   156a0:	sub	sp, sp, #16
   156a4:	mov	r4, r0
   156a8:	ldr	r0, [r0, #32]
   156ac:	ldrh	r0, [r0, #14]
   156b0:	cmp	r0, #3
   156b4:	bne	157c4 <flatcc_builder_end_table@@Base+0x12c>
   156b8:	ldrh	r0, [r4, #8]
   156bc:	mov	r1, #4
   156c0:	add	r0, r1, r0, lsl #1
   156c4:	ldr	r6, [r4, #4]
   156c8:	strh	r0, [r6, #-4]!
   156cc:	ldrh	r1, [r4, #20]
   156d0:	add	r1, r1, #4
   156d4:	strh	r1, [r6, #2]
   156d8:	uxth	r5, r0
   156dc:	ldr	r0, [r4, #12]
   156e0:	eor	r0, r0, r5
   156e4:	movw	r2, #31153	; 0x79b1
   156e8:	movt	r2, #40503	; 0x9e37
   156ec:	mul	r0, r0, r2
   156f0:	uxth	r1, r1
   156f4:	eor	r0, r0, r1
   156f8:	mul	r3, r0, r2
   156fc:	str	r3, [r4, #12]
   15700:	mov	r0, r4
   15704:	mov	r1, r6
   15708:	mov	r2, r5
   1570c:	bl	15144 <flatcc_builder_create_cached_vtable@@Base>
   15710:	cmp	r0, #0
   15714:	beq	157b4 <flatcc_builder_end_table@@Base+0x11c>
   15718:	mov	r7, r0
   1571c:	mov	r8, #0
   15720:	mov	r0, r6
   15724:	mov	r1, #0
   15728:	mov	r2, r5
   1572c:	bl	12994 <memset@plt>
   15730:	ldrh	r3, [r4, #130]	; 0x82
   15734:	ldr	r0, [r4, #76]	; 0x4c
   15738:	ldr	r6, [r4]
   1573c:	ldr	r1, [r4, #16]
   15740:	ldr	r2, [r4, #20]
   15744:	ldr	r5, [r4, #32]
   15748:	ldr	r5, [r5, #20]
   1574c:	add	r0, r0, r5
   15750:	sub	r6, r6, r0
   15754:	asr	r6, r6, #1
   15758:	stm	sp, {r0, r6, r7}
   1575c:	mov	r0, r4
   15760:	bl	15384 <flatcc_builder_create_table@@Base>
   15764:	cmp	r0, #0
   15768:	beq	157b8 <flatcc_builder_end_table@@Base+0x120>
   1576c:	mov	r5, r0
   15770:	ldr	r0, [r4, #32]
   15774:	ldr	r1, [r4, #52]	; 0x34
   15778:	ldr	r2, [r4, #76]	; 0x4c
   1577c:	ldr	r3, [r0, #24]
   15780:	str	r3, [r4, #12]
   15784:	ldrh	r3, [r0, #28]
   15788:	strh	r3, [r4, #8]
   1578c:	ldr	r3, [r0, #16]
   15790:	add	r1, r1, r3
   15794:	str	r1, [r4, #4]
   15798:	ldr	r0, [r0, #20]
   1579c:	add	r0, r2, r0
   157a0:	str	r0, [r4]
   157a4:	mov	r0, r4
   157a8:	bl	1450c <flatcc_builder_end_buffer@@Base+0xc8>
   157ac:	mov	r8, r5
   157b0:	b	157b8 <flatcc_builder_end_table@@Base+0x120>
   157b4:	mov	r8, #0
   157b8:	mov	r0, r8
   157bc:	sub	sp, fp, #24
   157c0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   157c4:	movw	r0, #47152	; 0xb830
   157c8:	movt	r0, #1
   157cc:	movw	r1, #45083	; 0xb01b
   157d0:	movt	r1, #1
   157d4:	movw	r3, #47448	; 0xb958
   157d8:	movt	r3, #1
   157dc:	movw	r2, #1317	; 0x525
   157e0:	bl	129c4 <__assert_fail@plt>

000157e4 <flatcc_builder_create_vector@@Base>:
   157e4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   157e8:	add	fp, sp, #24
   157ec:	sub	sp, sp, #80	; 0x50
   157f0:	mov	r4, r0
   157f4:	ldr	r0, [fp, #8]
   157f8:	strh	r0, [fp, #-26]	; 0xffffffe6
   157fc:	ldr	r0, [fp, #12]
   15800:	cmp	r2, r0
   15804:	bhi	158d4 <flatcc_builder_create_vector@@Base+0xf0>
   15808:	mov	r6, r3
   1580c:	mov	r7, r2
   15810:	mov	r8, r1
   15814:	sub	r0, fp, #26
   15818:	mov	r9, #4
   1581c:	mov	r1, #4
   15820:	bl	14d24 <flatcc_builder_start_vector@@Base+0x80>
   15824:	ldrh	r5, [fp, #-26]	; 0xffffffe6
   15828:	mov	r0, r4
   1582c:	mov	r1, r5
   15830:	bl	141b4 <flatcc_builder_create_buffer@@Base+0x1d0>
   15834:	mov	r0, r7
   15838:	bl	13f4c <flatcc_builder_embed_buffer@@Base+0x1dc>
   1583c:	str	r7, [fp, #-32]	; 0xffffffe0
   15840:	mul	r6, r6, r7
   15844:	mov	r0, r4
   15848:	mov	r1, r6
   1584c:	mov	r2, r5
   15850:	bl	13f38 <flatcc_builder_embed_buffer@@Base+0x1c8>
   15854:	str	r9, [sp]
   15858:	sub	r1, fp, #32
   1585c:	str	r1, [sp, #8]
   15860:	str	r9, [sp, #12]
   15864:	mov	r1, #1
   15868:	str	r1, [sp, #4]
   1586c:	cmp	r6, #0
   15870:	beq	1588c <flatcc_builder_create_vector@@Base+0xa8>
   15874:	str	r8, [sp, #16]
   15878:	str	r6, [sp, #20]
   1587c:	mov	r1, #2
   15880:	str	r1, [sp, #4]
   15884:	add	r1, r6, #4
   15888:	str	r1, [sp]
   1588c:	cmp	r0, #0
   15890:	beq	158c0 <flatcc_builder_create_vector@@Base+0xdc>
   15894:	ldm	sp, {r1, r2}
   15898:	add	r1, r1, r0
   1589c:	str	r1, [sp]
   158a0:	mov	r1, sp
   158a4:	add	r1, r1, r2, lsl #3
   158a8:	movw	r3, #44553	; 0xae09
   158ac:	movt	r3, #1
   158b0:	str	r3, [r1, #8]
   158b4:	str	r0, [r1, #12]
   158b8:	add	r0, r2, #1
   158bc:	str	r0, [sp, #4]
   158c0:	mov	r1, sp
   158c4:	mov	r0, r4
   158c8:	bl	13f50 <flatcc_builder_embed_buffer@@Base+0x1e0>
   158cc:	sub	sp, fp, #24
   158d0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   158d4:	movw	r0, #47514	; 0xb99a
   158d8:	movt	r0, #1
   158dc:	movw	r1, #45083	; 0xb01b
   158e0:	movt	r1, #1
   158e4:	movw	r3, #47533	; 0xb9ad
   158e8:	movt	r3, #1
   158ec:	movw	r2, #1365	; 0x555
   158f0:	bl	129c4 <__assert_fail@plt>

000158f4 <flatcc_builder_end_vector@@Base>:
   158f4:	push	{r4, r5, fp, lr}
   158f8:	add	fp, sp, #8
   158fc:	sub	sp, sp, #8
   15900:	mov	r4, r0
   15904:	ldr	r0, [r0, #32]
   15908:	ldrh	r1, [r0, #14]
   1590c:	cmp	r1, #4
   15910:	bne	15954 <flatcc_builder_end_vector@@Base+0x60>
   15914:	ldr	r1, [r4, #16]
   15918:	ldrh	r5, [r4, #130]	; 0x82
   1591c:	ldr	r3, [r0, #16]
   15920:	ldr	r2, [r0, #20]
   15924:	ldr	r0, [r0, #24]
   15928:	str	r5, [sp]
   1592c:	str	r0, [sp, #4]
   15930:	mov	r0, r4
   15934:	bl	157e4 <flatcc_builder_create_vector@@Base>
   15938:	mov	r5, r0
   1593c:	cmp	r0, #0
   15940:	movne	r0, r4
   15944:	blne	1450c <flatcc_builder_end_buffer@@Base+0xc8>
   15948:	mov	r0, r5
   1594c:	sub	sp, fp, #8
   15950:	pop	{r4, r5, fp, pc}
   15954:	movw	r0, #45886	; 0xb33e
   15958:	movt	r0, #1
   1595c:	movw	r1, #45083	; 0xb01b
   15960:	movt	r1, #1
   15964:	movw	r3, #47651	; 0xba23
   15968:	movt	r3, #1
   1596c:	movw	r2, #1400	; 0x578
   15970:	bl	129c4 <__assert_fail@plt>

00015974 <flatcc_builder_vector_count@@Base>:
   15974:	ldr	r0, [r0, #32]
   15978:	ldr	r0, [r0, #20]
   1597c:	bx	lr

00015980 <flatcc_builder_vector_edit@@Base>:
   15980:	ldr	r0, [r0, #16]
   15984:	bx	lr

00015988 <flatcc_builder_create_offset_vector_direct@@Base>:
   15988:	mov	r3, #0
   1598c:	b	15990 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   15990:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15994:	add	fp, sp, #24
   15998:	sub	sp, sp, #80	; 0x50
   1599c:	mov	r8, r0
   159a0:	mov	r0, #0
   159a4:	cmn	r2, #-1073741823	; 0xc0000001
   159a8:	bhi	15ad8 <flatcc_builder_create_offset_vector_direct@@Base+0x150>
   159ac:	mov	r5, r3
   159b0:	mov	r9, r2
   159b4:	mov	r7, r1
   159b8:	mov	r6, #4
   159bc:	mov	r0, r8
   159c0:	mov	r1, #4
   159c4:	bl	141b4 <flatcc_builder_create_buffer@@Base+0x1d0>
   159c8:	mov	r0, r9
   159cc:	bl	13f4c <flatcc_builder_embed_buffer@@Base+0x1dc>
   159d0:	str	r9, [fp, #-28]	; 0xffffffe4
   159d4:	lsl	r4, r9, #2
   159d8:	mov	r0, r8
   159dc:	mov	r1, r4
   159e0:	mov	r2, #4
   159e4:	bl	13f38 <flatcc_builder_embed_buffer@@Base+0x1c8>
   159e8:	str	r6, [sp, #4]
   159ec:	sub	r1, fp, #28
   159f0:	str	r1, [sp, #12]
   159f4:	str	r6, [sp, #16]
   159f8:	mov	r1, #1
   159fc:	str	r1, [sp, #8]
   15a00:	mov	r1, #0
   15a04:	cmp	r1, r9, lsl #2
   15a08:	beq	15a24 <flatcc_builder_create_offset_vector_direct@@Base+0x9c>
   15a0c:	str	r7, [sp, #20]
   15a10:	str	r4, [sp, #24]
   15a14:	mov	r1, #2
   15a18:	str	r1, [sp, #8]
   15a1c:	add	r1, r4, #4
   15a20:	str	r1, [sp, #4]
   15a24:	cmp	r0, #0
   15a28:	beq	15a58 <flatcc_builder_create_offset_vector_direct@@Base+0xd0>
   15a2c:	ldmib	sp, {r1, r2}
   15a30:	add	r1, r1, r0
   15a34:	str	r1, [sp, #4]
   15a38:	add	r1, sp, #4
   15a3c:	add	r1, r1, r2, lsl #3
   15a40:	movw	r3, #44553	; 0xae09
   15a44:	movt	r3, #1
   15a48:	str	r3, [r1, #8]
   15a4c:	str	r0, [r1, #12]
   15a50:	add	r0, r2, #1
   15a54:	str	r0, [sp, #8]
   15a58:	cmp	r9, #0
   15a5c:	beq	15acc <flatcc_builder_create_offset_vector_direct@@Base+0x144>
   15a60:	ldr	r0, [r8, #136]	; 0x88
   15a64:	mvn	r1, #3
   15a68:	sub	r0, r1, r0
   15a6c:	ldr	r1, [sp, #4]
   15a70:	add	r4, r0, r1
   15a74:	mov	r6, #0
   15a78:	ldr	r0, [r7, r6, lsl #2]
   15a7c:	cmp	r0, #0
   15a80:	beq	15aa8 <flatcc_builder_create_offset_vector_direct@@Base+0x120>
   15a84:	add	r0, r4, r0
   15a88:	bl	13f4c <flatcc_builder_embed_buffer@@Base+0x1dc>
   15a8c:	str	r0, [r7, r6, lsl #2]
   15a90:	cmp	r5, #0
   15a94:	beq	15abc <flatcc_builder_create_offset_vector_direct@@Base+0x134>
   15a98:	ldrb	r0, [r5, r6]
   15a9c:	cmp	r0, #0
   15aa0:	bne	15abc <flatcc_builder_create_offset_vector_direct@@Base+0x134>
   15aa4:	b	15ae0 <flatcc_builder_create_offset_vector_direct@@Base+0x158>
   15aa8:	cmp	r5, #0
   15aac:	beq	15b00 <flatcc_builder_create_offset_vector_direct@@Base+0x178>
   15ab0:	ldrb	r0, [r5, r6]
   15ab4:	cmp	r0, #0
   15ab8:	bne	15b20 <flatcc_builder_create_offset_vector_direct@@Base+0x198>
   15abc:	sub	r4, r4, #4
   15ac0:	add	r6, r6, #1
   15ac4:	cmp	r6, r9
   15ac8:	bcc	15a78 <flatcc_builder_create_offset_vector_direct@@Base+0xf0>
   15acc:	add	r1, sp, #4
   15ad0:	mov	r0, r8
   15ad4:	bl	13f50 <flatcc_builder_embed_buffer@@Base+0x1e0>
   15ad8:	sub	sp, fp, #24
   15adc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15ae0:	movw	r0, #49589	; 0xc1b5
   15ae4:	movt	r0, #1
   15ae8:	movw	r1, #45083	; 0xb01b
   15aec:	movt	r1, #1
   15af0:	movw	r3, #49603	; 0xc1c3
   15af4:	movt	r3, #1
   15af8:	movw	r2, #1457	; 0x5b1
   15afc:	bl	129c4 <__assert_fail@plt>
   15b00:	movw	r0, #49601	; 0xc1c1
   15b04:	movt	r0, #1
   15b08:	movw	r1, #45083	; 0xb01b
   15b0c:	movt	r1, #1
   15b10:	movw	r3, #49603	; 0xc1c3
   15b14:	movt	r3, #1
   15b18:	movw	r2, #1463	; 0x5b7
   15b1c:	bl	129c4 <__assert_fail@plt>
   15b20:	movw	r0, #49734	; 0xc246
   15b24:	movt	r0, #1
   15b28:	movw	r1, #45083	; 0xb01b
   15b2c:	movt	r1, #1
   15b30:	movw	r3, #49603	; 0xc1c3
   15b34:	movt	r3, #1
   15b38:	movw	r2, #1461	; 0x5b5
   15b3c:	bl	129c4 <__assert_fail@plt>

00015b40 <flatcc_builder_end_offset_vector_for_unions@@Base>:
   15b40:	push	{r4, r5, fp, lr}
   15b44:	add	fp, sp, #8
   15b48:	mov	r3, r1
   15b4c:	mov	r4, r0
   15b50:	ldr	r0, [r0, #32]
   15b54:	ldrh	r1, [r0, #14]
   15b58:	cmp	r1, #5
   15b5c:	bne	15b88 <flatcc_builder_end_offset_vector_for_unions@@Base+0x48>
   15b60:	ldr	r2, [r0, #20]
   15b64:	ldr	r1, [r4, #16]
   15b68:	mov	r0, r4
   15b6c:	bl	15990 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   15b70:	mov	r5, r0
   15b74:	cmp	r0, #0
   15b78:	movne	r0, r4
   15b7c:	blne	1450c <flatcc_builder_end_buffer@@Base+0xc8>
   15b80:	mov	r0, r5
   15b84:	pop	{r4, r5, fp, pc}
   15b88:	movw	r0, #46135	; 0xb437
   15b8c:	movt	r0, #1
   15b90:	movw	r1, #45083	; 0xb01b
   15b94:	movt	r1, #1
   15b98:	movw	r3, #47792	; 0xbab0
   15b9c:	movt	r3, #1
   15ba0:	movw	r2, #1493	; 0x5d5
   15ba4:	bl	129c4 <__assert_fail@plt>

00015ba8 <flatcc_builder_offset_vector_edit@@Base>:
   15ba8:	ldr	r0, [r0, #16]
   15bac:	bx	lr

00015bb0 <flatcc_builder_offset_vector_count@@Base>:
   15bb0:	ldr	r0, [r0, #32]
   15bb4:	ldr	r0, [r0, #20]
   15bb8:	bx	lr

00015bbc <flatcc_builder_table_add_union@@Base>:
   15bbc:	push	{r4, r5, r6, r7, fp, lr}
   15bc0:	add	fp, sp, #16
   15bc4:	mov	r5, r0
   15bc8:	ldr	r0, [r0, #32]
   15bcc:	ldrh	r0, [r0, #14]
   15bd0:	cmp	r0, #3
   15bd4:	bne	15c48 <flatcc_builder_table_add_union@@Base+0x8c>
   15bd8:	mov	r7, r3
   15bdc:	mov	r6, r1
   15be0:	uxtb	r4, r2
   15be4:	cmp	r3, #0
   15be8:	beq	15bf4 <flatcc_builder_table_add_union@@Base+0x38>
   15bec:	cmp	r4, #0
   15bf0:	beq	15c68 <flatcc_builder_table_add_union@@Base+0xac>
   15bf4:	cmp	r7, #0
   15bf8:	beq	15c14 <flatcc_builder_table_add_union@@Base+0x58>
   15bfc:	mov	r0, r5
   15c00:	mov	r1, r6
   15c04:	bl	15cc8 <flatcc_builder_table_add_offset@@Base>
   15c08:	cmp	r0, #0
   15c0c:	beq	15ca8 <flatcc_builder_table_add_union@@Base+0xec>
   15c10:	str	r7, [r0]
   15c14:	sub	r1, r6, #1
   15c18:	mov	r0, r5
   15c1c:	mov	r2, #1
   15c20:	mov	r3, #1
   15c24:	bl	15d8c <flatcc_builder_table_add@@Base>
   15c28:	cmp	r0, #0
   15c2c:	beq	15c88 <flatcc_builder_table_add_union@@Base+0xcc>
   15c30:	mov	r5, r0
   15c34:	mov	r0, r4
   15c38:	bl	15e6c <flatcc_builder_table_add@@Base+0xe0>
   15c3c:	strb	r4, [r5]
   15c40:	mov	r0, #0
   15c44:	pop	{r4, r5, r6, r7, fp, pc}
   15c48:	movw	r0, #47152	; 0xb830
   15c4c:	movt	r0, #1
   15c50:	movw	r1, #45083	; 0xb01b
   15c54:	movt	r1, #1
   15c58:	movw	r3, #47906	; 0xbb22
   15c5c:	movt	r3, #1
   15c60:	movw	r2, #1518	; 0x5ee
   15c64:	bl	129c4 <__assert_fail@plt>
   15c68:	movw	r0, #47994	; 0xbb7a
   15c6c:	movt	r0, #1
   15c70:	movw	r1, #45083	; 0xb01b
   15c74:	movt	r1, #1
   15c78:	movw	r3, #47906	; 0xbb22
   15c7c:	movt	r3, #1
   15c80:	movw	r2, #1519	; 0x5ef
   15c84:	bl	129c4 <__assert_fail@plt>
   15c88:	movw	r0, #48038	; 0xbba6
   15c8c:	movt	r0, #1
   15c90:	movw	r1, #45083	; 0xb01b
   15c94:	movt	r1, #1
   15c98:	movw	r3, #47906	; 0xbb22
   15c9c:	movt	r3, #1
   15ca0:	movw	r2, #1526	; 0x5f6
   15ca4:	bl	129c4 <__assert_fail@plt>
   15ca8:	movw	r0, #48028	; 0xbb9c
   15cac:	movt	r0, #1
   15cb0:	movw	r1, #45083	; 0xb01b
   15cb4:	movt	r1, #1
   15cb8:	movw	r3, #47906	; 0xbb22
   15cbc:	movt	r3, #1
   15cc0:	movw	r2, #1522	; 0x5f2
   15cc4:	bl	129c4 <__assert_fail@plt>

00015cc8 <flatcc_builder_table_add_offset@@Base>:
   15cc8:	push	{fp, lr}
   15ccc:	mov	fp, sp
   15cd0:	ldr	r2, [r0, #32]
   15cd4:	ldrh	r2, [r2, #14]
   15cd8:	cmp	r2, #3
   15cdc:	bne	15d2c <flatcc_builder_table_add_offset@@Base+0x64>
   15ce0:	movw	r2, #32765	; 0x7ffd
   15ce4:	cmp	r1, r2
   15ce8:	bcs	15d4c <flatcc_builder_table_add_offset@@Base+0x84>
   15cec:	ldr	r2, [r0, #4]
   15cf0:	add	r2, r2, r1, lsl #1
   15cf4:	ldrh	r2, [r2]
   15cf8:	cmp	r2, #0
   15cfc:	bne	15d6c <flatcc_builder_table_add_offset@@Base+0xa4>
   15d00:	ldr	r2, [r0, #12]
   15d04:	eor	r2, r2, r1
   15d08:	movw	r3, #31153	; 0x79b1
   15d0c:	movt	r3, #40503	; 0x9e37
   15d10:	mul	r2, r2, r3
   15d14:	eor	r2, r2, #4
   15d18:	mul	r2, r2, r3
   15d1c:	str	r2, [r0, #12]
   15d20:	uxth	r1, r1
   15d24:	pop	{fp, lr}
   15d28:	b	16698 <flatcc_builder_table_add_copy@@Base+0x40>
   15d2c:	movw	r0, #47152	; 0xb830
   15d30:	movt	r0, #1
   15d34:	movw	r1, #45083	; 0xb01b
   15d38:	movt	r1, #1
   15d3c:	movw	r3, #48932	; 0xbf24
   15d40:	movt	r3, #1
   15d44:	movw	r2, #1811	; 0x713
   15d48:	bl	129c4 <__assert_fail@plt>
   15d4c:	movw	r0, #48804	; 0xbea4
   15d50:	movt	r0, #1
   15d54:	movw	r1, #45083	; 0xb01b
   15d58:	movt	r1, #1
   15d5c:	movw	r3, #48932	; 0xbf24
   15d60:	movt	r3, #1
   15d64:	movw	r2, #1812	; 0x714
   15d68:	bl	129c4 <__assert_fail@plt>
   15d6c:	movw	r0, #49601	; 0xc1c1
   15d70:	movt	r0, #1
   15d74:	movw	r1, #45083	; 0xb01b
   15d78:	movt	r1, #1
   15d7c:	movw	r3, #48932	; 0xbf24
   15d80:	movt	r3, #1
   15d84:	movw	r2, #1819	; 0x71b
   15d88:	bl	129c4 <__assert_fail@plt>

00015d8c <flatcc_builder_table_add@@Base>:
   15d8c:	push	{fp, lr}
   15d90:	mov	fp, sp
   15d94:	mov	ip, r3
   15d98:	ldr	r3, [r0, #32]
   15d9c:	ldrh	r3, [r3, #14]
   15da0:	cmp	r3, #3
   15da4:	bne	15e0c <flatcc_builder_table_add@@Base+0x80>
   15da8:	movw	r3, #32765	; 0x7ffd
   15dac:	cmp	r1, r3
   15db0:	bcs	15e2c <flatcc_builder_table_add@@Base+0xa0>
   15db4:	mov	lr, r2
   15db8:	ldrh	r3, [r0, #130]	; 0x82
   15dbc:	cmp	r3, ip
   15dc0:	strhcc	ip, [r0, #130]	; 0x82
   15dc4:	ldr	r3, [r0, #4]
   15dc8:	add	r3, r3, r1, lsl #1
   15dcc:	ldrh	r3, [r3]
   15dd0:	cmp	r3, #0
   15dd4:	bne	15e4c <flatcc_builder_table_add@@Base+0xc0>
   15dd8:	ldr	r3, [r0, #12]
   15ddc:	eor	r3, r3, r1
   15de0:	movw	r2, #31153	; 0x79b1
   15de4:	movt	r2, #40503	; 0x9e37
   15de8:	mul	r3, r3, r2
   15dec:	eor	r3, r3, lr
   15df0:	mul	r2, r3, r2
   15df4:	str	r2, [r0, #12]
   15df8:	uxth	r3, r1
   15dfc:	mov	r1, lr
   15e00:	mov	r2, ip
   15e04:	pop	{fp, lr}
   15e08:	b	1658c <flatcc_builder_string_len@@Base+0xc>
   15e0c:	movw	r0, #47152	; 0xb830
   15e10:	movt	r0, #1
   15e14:	movw	r1, #45083	; 0xb01b
   15e18:	movt	r1, #1
   15e1c:	movw	r3, #48730	; 0xbe5a
   15e20:	movt	r3, #1
   15e24:	movw	r2, #1773	; 0x6ed
   15e28:	bl	129c4 <__assert_fail@plt>
   15e2c:	movw	r0, #48804	; 0xbea4
   15e30:	movt	r0, #1
   15e34:	movw	r1, #45083	; 0xb01b
   15e38:	movt	r1, #1
   15e3c:	movw	r3, #48730	; 0xbe5a
   15e40:	movt	r3, #1
   15e44:	movw	r2, #1774	; 0x6ee
   15e48:	bl	129c4 <__assert_fail@plt>
   15e4c:	movw	r0, #49601	; 0xc1c1
   15e50:	movt	r0, #1
   15e54:	movw	r1, #45083	; 0xb01b
   15e58:	movt	r1, #1
   15e5c:	movw	r3, #48730	; 0xbe5a
   15e60:	movt	r3, #1
   15e64:	movw	r2, #1784	; 0x6f8
   15e68:	bl	129c4 <__assert_fail@plt>
   15e6c:	bx	lr

00015e70 <flatcc_builder_table_add_union_vector@@Base>:
   15e70:	push	{r4, r5, r6, r7, fp, lr}
   15e74:	add	fp, sp, #16
   15e78:	mov	r6, r0
   15e7c:	ldr	r0, [r0, #32]
   15e80:	ldrh	r0, [r0, #14]
   15e84:	cmp	r0, #3
   15e88:	bne	15ef0 <flatcc_builder_table_add_union_vector@@Base+0x80>
   15e8c:	mov	r4, r3
   15e90:	mov	r7, r2
   15e94:	mov	r5, r1
   15e98:	clz	r0, r3
   15e9c:	lsr	r0, r0, #5
   15ea0:	clz	r1, r2
   15ea4:	lsr	r1, r1, #5
   15ea8:	cmp	r1, r0
   15eac:	bne	15f10 <flatcc_builder_table_add_union_vector@@Base+0xa0>
   15eb0:	cmp	r7, #0
   15eb4:	beq	15ee8 <flatcc_builder_table_add_union_vector@@Base+0x78>
   15eb8:	sub	r1, r5, #1
   15ebc:	mov	r0, r6
   15ec0:	bl	15cc8 <flatcc_builder_table_add_offset@@Base>
   15ec4:	cmp	r0, #0
   15ec8:	beq	15f30 <flatcc_builder_table_add_union_vector@@Base+0xc0>
   15ecc:	str	r7, [r0]
   15ed0:	mov	r0, r6
   15ed4:	mov	r1, r5
   15ed8:	bl	15cc8 <flatcc_builder_table_add_offset@@Base>
   15edc:	cmp	r0, #0
   15ee0:	beq	15f50 <flatcc_builder_table_add_union_vector@@Base+0xe0>
   15ee4:	str	r4, [r0]
   15ee8:	mov	r0, #0
   15eec:	pop	{r4, r5, r6, r7, fp, pc}
   15ef0:	movw	r0, #47152	; 0xb830
   15ef4:	movt	r0, #1
   15ef8:	movw	r1, #45083	; 0xb01b
   15efc:	movt	r1, #1
   15f00:	movw	r3, #48050	; 0xbbb2
   15f04:	movt	r3, #1
   15f08:	mov	r2, #1536	; 0x600
   15f0c:	bl	129c4 <__assert_fail@plt>
   15f10:	movw	r0, #48149	; 0xbc15
   15f14:	movt	r0, #1
   15f18:	movw	r1, #45083	; 0xb01b
   15f1c:	movt	r1, #1
   15f20:	movw	r3, #48050	; 0xbbb2
   15f24:	movt	r3, #1
   15f28:	movw	r2, #1537	; 0x601
   15f2c:	bl	129c4 <__assert_fail@plt>
   15f30:	movw	r0, #48028	; 0xbb9c
   15f34:	movt	r0, #1
   15f38:	movw	r1, #45083	; 0xb01b
   15f3c:	movt	r1, #1
   15f40:	movw	r3, #48050	; 0xbbb2
   15f44:	movt	r3, #1
   15f48:	movw	r2, #1540	; 0x604
   15f4c:	bl	129c4 <__assert_fail@plt>
   15f50:	movw	r0, #48028	; 0xbb9c
   15f54:	movt	r0, #1
   15f58:	movw	r1, #45083	; 0xb01b
   15f5c:	movt	r1, #1
   15f60:	movw	r3, #48050	; 0xbbb2
   15f64:	movt	r3, #1
   15f68:	movw	r2, #1544	; 0x608
   15f6c:	bl	129c4 <__assert_fail@plt>

00015f70 <flatcc_builder_create_union_vector@@Base>:
   15f70:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15f74:	add	fp, sp, #24
   15f78:	sub	sp, sp, #16
   15f7c:	mov	r6, r3
   15f80:	mov	r7, r2
   15f84:	mov	r4, r1
   15f88:	mov	r5, r0
   15f8c:	mov	r0, #0
   15f90:	str	r0, [r5]
   15f94:	str	r0, [r5, #4]
   15f98:	mov	r0, r1
   15f9c:	bl	14d34 <flatcc_builder_start_offset_vector@@Base>
   15fa0:	cmp	r0, #0
   15fa4:	beq	15fb0 <flatcc_builder_create_union_vector@@Base+0x40>
   15fa8:	sub	sp, fp, #24
   15fac:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15fb0:	mov	r0, r4
   15fb4:	mov	r1, r6
   15fb8:	bl	14880 <flatcc_builder_extend_offset_vector@@Base>
   15fbc:	cmp	r0, #0
   15fc0:	beq	15fa8 <flatcc_builder_create_union_vector@@Base+0x38>
   15fc4:	mov	r0, r4
   15fc8:	mov	r1, r6
   15fcc:	bl	145fc <flatcc_builder_start_struct@@Base+0x84>
   15fd0:	cmp	r0, #0
   15fd4:	beq	15fa8 <flatcc_builder_create_union_vector@@Base+0x38>
   15fd8:	mov	r8, r0
   15fdc:	mov	r0, r4
   15fe0:	bl	15ba8 <flatcc_builder_offset_vector_edit@@Base>
   15fe4:	mov	ip, r0
   15fe8:	cmp	r6, #0
   15fec:	beq	1601c <flatcc_builder_create_union_vector@@Base+0xac>
   15ff0:	add	r0, r7, #4
   15ff4:	mov	r1, r6
   15ff8:	mov	r2, ip
   15ffc:	mov	r7, r8
   16000:	ldrb	r3, [r0, #-4]
   16004:	strb	r3, [r7], #1
   16008:	ldr	r3, [r0]
   1600c:	str	r3, [r2], #4
   16010:	add	r0, r0, #8
   16014:	subs	r1, r1, #1
   16018:	bne	16000 <flatcc_builder_create_union_vector@@Base+0x90>
   1601c:	str	r6, [sp]
   16020:	add	r0, sp, #8
   16024:	mov	r1, r4
   16028:	mov	r2, r8
   1602c:	mov	r3, ip
   16030:	bl	16050 <flatcc_builder_create_union_vector_direct@@Base>
   16034:	ldr	r0, [sp, #8]
   16038:	ldr	r1, [sp, #12]
   1603c:	stm	r5, {r0, r1}
   16040:	mov	r0, r4
   16044:	bl	1450c <flatcc_builder_end_buffer@@Base+0xc8>
   16048:	sub	sp, fp, #24
   1604c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00016050 <flatcc_builder_create_union_vector_direct@@Base>:
   16050:	push	{r4, r5, r6, r7, fp, lr}
   16054:	add	fp, sp, #16
   16058:	sub	sp, sp, #8
   1605c:	mov	r5, r2
   16060:	mov	r6, r1
   16064:	mov	r4, r0
   16068:	mov	r0, #0
   1606c:	str	r0, [r4]
   16070:	str	r0, [r4, #4]
   16074:	ldr	r7, [fp, #8]
   16078:	mov	r0, r1
   1607c:	mov	r1, r3
   16080:	mov	r2, r7
   16084:	mov	r3, r5
   16088:	bl	15990 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   1608c:	str	r0, [r4, #4]
   16090:	cmp	r0, #0
   16094:	beq	160c0 <flatcc_builder_create_union_vector_direct@@Base+0x70>
   16098:	mvn	r0, #0
   1609c:	mov	r1, #1
   160a0:	str	r1, [sp]
   160a4:	str	r0, [sp, #4]
   160a8:	mov	r0, r6
   160ac:	mov	r1, r5
   160b0:	mov	r2, r7
   160b4:	mov	r3, #1
   160b8:	bl	157e4 <flatcc_builder_create_vector@@Base>
   160bc:	str	r0, [r4]
   160c0:	sub	sp, fp, #16
   160c4:	pop	{r4, r5, r6, r7, fp, pc}

000160c8 <flatcc_builder_start_union_vector@@Base>:
   160c8:	push	{r4, r5, fp, lr}
   160cc:	add	fp, sp, #8
   160d0:	mov	r4, r0
   160d4:	mov	r1, #4
   160d8:	bl	1434c <flatcc_builder_start_buffer@@Base+0xbc>
   160dc:	mvn	r5, #0
   160e0:	cmp	r0, #0
   160e4:	beq	160f0 <flatcc_builder_start_union_vector@@Base+0x28>
   160e8:	mov	r0, r5
   160ec:	pop	{r4, r5, fp, pc}
   160f0:	ldr	r0, [r4, #32]
   160f4:	mov	r1, #8
   160f8:	str	r1, [r0, #16]
   160fc:	ldr	r0, [r4, #32]
   16100:	mov	r5, #0
   16104:	str	r5, [r0, #20]
   16108:	ldr	r0, [r4, #32]
   1610c:	mov	r1, #7
   16110:	strh	r1, [r0, #14]
   16114:	mov	r0, r4
   16118:	mvn	r1, #3
   1611c:	bl	145c4 <flatcc_builder_start_struct@@Base+0x4c>
   16120:	mov	r0, r5
   16124:	pop	{r4, r5, fp, pc}

00016128 <flatcc_builder_end_union_vector@@Base>:
   16128:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1612c:	add	fp, sp, #24
   16130:	sub	sp, sp, #16
   16134:	mov	r9, r0
   16138:	mov	r0, #0
   1613c:	str	r0, [r9]
   16140:	str	r0, [r9, #4]
   16144:	ldr	r0, [r1, #32]
   16148:	ldrh	r0, [r0, #14]
   1614c:	cmp	r0, #7
   16150:	bne	161f0 <flatcc_builder_end_union_vector@@Base+0xc8>
   16154:	mov	r4, r1
   16158:	mov	r0, r1
   1615c:	bl	16210 <flatcc_builder_union_vector_count@@Base>
   16160:	mov	r6, r0
   16164:	add	r1, r0, r0, lsl #2
   16168:	mov	r0, r4
   1616c:	bl	145fc <flatcc_builder_start_struct@@Base+0x84>
   16170:	cmp	r0, #0
   16174:	beq	161e8 <flatcc_builder_end_union_vector@@Base+0xc0>
   16178:	mov	r7, r0
   1617c:	add	r8, r0, r6, lsl #2
   16180:	mov	r0, r4
   16184:	bl	1621c <flatcc_builder_union_vector_edit@@Base>
   16188:	cmp	r6, #0
   1618c:	beq	161bc <flatcc_builder_end_union_vector@@Base+0x94>
   16190:	add	r0, r0, #4
   16194:	mov	r1, r6
   16198:	mov	r2, r7
   1619c:	mov	r3, r8
   161a0:	ldrb	r5, [r0, #-4]
   161a4:	strb	r5, [r3], #1
   161a8:	ldr	r5, [r0]
   161ac:	str	r5, [r2], #4
   161b0:	add	r0, r0, #8
   161b4:	subs	r1, r1, #1
   161b8:	bne	161a0 <flatcc_builder_end_union_vector@@Base+0x78>
   161bc:	str	r6, [sp]
   161c0:	add	r0, sp, #8
   161c4:	mov	r1, r4
   161c8:	mov	r2, r8
   161cc:	mov	r3, r7
   161d0:	bl	16050 <flatcc_builder_create_union_vector_direct@@Base>
   161d4:	ldr	r0, [sp, #8]
   161d8:	ldr	r1, [sp, #12]
   161dc:	stm	r9, {r0, r1}
   161e0:	mov	r0, r4
   161e4:	bl	1450c <flatcc_builder_end_buffer@@Base+0xc8>
   161e8:	sub	sp, fp, #24
   161ec:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   161f0:	movw	r0, #48189	; 0xbc3d
   161f4:	movt	r0, #1
   161f8:	movw	r1, #45083	; 0xb01b
   161fc:	movt	r1, #1
   16200:	movw	r3, #48239	; 0xbc6f
   16204:	movt	r3, #1
   16208:	movw	r2, #1617	; 0x651
   1620c:	bl	129c4 <__assert_fail@plt>

00016210 <flatcc_builder_union_vector_count@@Base>:
   16210:	ldr	r0, [r0, #32]
   16214:	ldr	r0, [r0, #20]
   16218:	bx	lr

0001621c <flatcc_builder_union_vector_edit@@Base>:
   1621c:	ldr	r0, [r0, #16]
   16220:	bx	lr

00016224 <flatcc_builder_extend_union_vector@@Base>:
   16224:	push	{r4, r5, fp, lr}
   16228:	add	fp, sp, #8
   1622c:	mov	r5, r1
   16230:	mov	r4, r0
   16234:	mvn	r2, #-536870912	; 0xe0000000
   16238:	bl	14700 <flatcc_builder_extend_vector@@Base+0x44>
   1623c:	mov	r1, r0
   16240:	mov	r0, #0
   16244:	cmp	r1, #0
   16248:	popne	{r4, r5, fp, pc}
   1624c:	lsl	r1, r5, #3
   16250:	mov	r0, r4
   16254:	bl	145fc <flatcc_builder_start_struct@@Base+0x84>
   16258:	pop	{r4, r5, fp, pc}

0001625c <flatcc_builder_truncate_union_vector@@Base>:
   1625c:	push	{fp, lr}
   16260:	mov	fp, sp
   16264:	ldr	r2, [r0, #32]
   16268:	ldrh	r3, [r2, #14]
   1626c:	cmp	r3, #7
   16270:	bne	162a0 <flatcc_builder_truncate_union_vector@@Base+0x44>
   16274:	ldr	r3, [r2, #20]
   16278:	cmp	r3, r1
   1627c:	bcc	162c0 <flatcc_builder_truncate_union_vector@@Base+0x64>
   16280:	sub	r3, r3, r1
   16284:	str	r3, [r2, #20]
   16288:	ldr	r2, [r0, #32]
   1628c:	ldr	r2, [r2, #16]
   16290:	mul	r1, r2, r1
   16294:	bl	14b88 <flatcc_builder_truncate_vector@@Base+0x84>
   16298:	mov	r0, #0
   1629c:	pop	{fp, pc}
   162a0:	movw	r0, #48189	; 0xbc3d
   162a4:	movt	r0, #1
   162a8:	movw	r1, #45083	; 0xb01b
   162ac:	movt	r1, #1
   162b0:	movw	r3, #48322	; 0xbcc2
   162b4:	movt	r3, #1
   162b8:	movw	r2, #1665	; 0x681
   162bc:	bl	129c4 <__assert_fail@plt>
   162c0:	movw	r0, #46753	; 0xb6a1
   162c4:	movt	r0, #1
   162c8:	movw	r1, #45083	; 0xb01b
   162cc:	movt	r1, #1
   162d0:	movw	r3, #48322	; 0xbcc2
   162d4:	movt	r3, #1
   162d8:	movw	r2, #1666	; 0x682
   162dc:	bl	129c4 <__assert_fail@plt>

000162e0 <flatcc_builder_union_vector_push@@Base>:
   162e0:	push	{r4, r5, r6, sl, fp, lr}
   162e4:	add	fp, sp, #16
   162e8:	mov	r4, r2
   162ec:	mov	r5, r1
   162f0:	ldr	r1, [r0, #32]
   162f4:	ldrh	r2, [r1, #14]
   162f8:	cmp	r2, #7
   162fc:	bne	16338 <flatcc_builder_union_vector_push@@Base+0x58>
   16300:	ldr	r2, [r1, #20]
   16304:	mov	r6, #0
   16308:	cmn	r2, #-536870911	; 0xe0000001
   1630c:	beq	16330 <flatcc_builder_union_vector_push@@Base+0x50>
   16310:	add	r2, r2, #1
   16314:	str	r2, [r1, #20]
   16318:	mov	r1, #8
   1631c:	bl	145fc <flatcc_builder_start_struct@@Base+0x84>
   16320:	cmp	r0, #0
   16324:	strne	r5, [r0]
   16328:	strne	r4, [r0, #4]
   1632c:	movne	r6, r0
   16330:	mov	r0, r6
   16334:	pop	{r4, r5, r6, sl, fp, pc}
   16338:	movw	r0, #48189	; 0xbc3d
   1633c:	movt	r0, #1
   16340:	movw	r1, #45083	; 0xb01b
   16344:	movt	r1, #1
   16348:	movw	r3, #48391	; 0xbd07
   1634c:	movt	r3, #1
   16350:	movw	r2, #1677	; 0x68d
   16354:	bl	129c4 <__assert_fail@plt>

00016358 <flatcc_builder_append_union_vector@@Base>:
   16358:	push	{r4, r5, r6, sl, fp, lr}
   1635c:	add	fp, sp, #16
   16360:	mov	r6, r0
   16364:	ldr	r0, [r0, #32]
   16368:	ldrh	r0, [r0, #14]
   1636c:	cmp	r0, #7
   16370:	bne	163b0 <flatcc_builder_append_union_vector@@Base+0x58>
   16374:	mov	r5, r2
   16378:	mov	r4, r1
   1637c:	mov	r0, r6
   16380:	mov	r1, r2
   16384:	mvn	r2, #-536870912	; 0xe0000000
   16388:	bl	14700 <flatcc_builder_extend_vector@@Base+0x44>
   1638c:	mov	r1, r0
   16390:	mov	r0, #0
   16394:	cmp	r1, #0
   16398:	popne	{r4, r5, r6, sl, fp, pc}
   1639c:	lsl	r2, r5, #3
   163a0:	mov	r0, r6
   163a4:	mov	r1, r4
   163a8:	bl	147c8 <flatcc_builder_vector_push@@Base+0x80>
   163ac:	pop	{r4, r5, r6, sl, fp, pc}
   163b0:	movw	r0, #48189	; 0xbc3d
   163b4:	movt	r0, #1
   163b8:	movw	r1, #45083	; 0xb01b
   163bc:	movt	r1, #1
   163c0:	movw	r3, #48500	; 0xbd74
   163c4:	movt	r3, #1
   163c8:	movw	r2, #1692	; 0x69c
   163cc:	bl	129c4 <__assert_fail@plt>

000163d0 <flatcc_builder_create_string@@Base>:
   163d0:	push	{r4, r5, r6, r7, fp, lr}
   163d4:	add	fp, sp, #16
   163d8:	sub	sp, sp, #80	; 0x50
   163dc:	mov	r5, r2
   163e0:	mov	r6, r1
   163e4:	mov	r4, r0
   163e8:	mov	r0, r2
   163ec:	bl	13f4c <flatcc_builder_embed_buffer@@Base+0x1dc>
   163f0:	str	r5, [fp, #-20]	; 0xffffffec
   163f4:	add	r1, r5, #1
   163f8:	mov	r7, #4
   163fc:	mov	r0, r4
   16400:	mov	r2, #4
   16404:	bl	13f38 <flatcc_builder_embed_buffer@@Base+0x1c8>
   16408:	str	r7, [sp, #4]
   1640c:	sub	r1, fp, #20
   16410:	str	r1, [sp, #12]
   16414:	str	r7, [sp, #16]
   16418:	mov	r1, #1
   1641c:	str	r1, [sp, #8]
   16420:	add	r0, r0, #1
   16424:	cmp	r5, #0
   16428:	beq	16444 <flatcc_builder_create_string@@Base+0x74>
   1642c:	str	r6, [sp, #20]
   16430:	str	r5, [sp, #24]
   16434:	mov	r1, #2
   16438:	str	r1, [sp, #8]
   1643c:	add	r1, r5, #4
   16440:	str	r1, [sp, #4]
   16444:	cmp	r0, #0
   16448:	beq	16478 <flatcc_builder_create_string@@Base+0xa8>
   1644c:	ldmib	sp, {r1, r2}
   16450:	add	r1, r1, r0
   16454:	str	r1, [sp, #4]
   16458:	add	r1, sp, #4
   1645c:	add	r1, r1, r2, lsl #3
   16460:	movw	r3, #44553	; 0xae09
   16464:	movt	r3, #1
   16468:	str	r3, [r1, #8]
   1646c:	str	r0, [r1, #12]
   16470:	add	r0, r2, #1
   16474:	str	r0, [sp, #8]
   16478:	add	r1, sp, #4
   1647c:	mov	r0, r4
   16480:	bl	13f50 <flatcc_builder_embed_buffer@@Base+0x1e0>
   16484:	sub	sp, fp, #16
   16488:	pop	{r4, r5, r6, r7, fp, pc}

0001648c <flatcc_builder_create_string_str@@Base>:
   1648c:	push	{r4, r5, fp, lr}
   16490:	add	fp, sp, #8
   16494:	mov	r4, r1
   16498:	mov	r5, r0
   1649c:	mov	r0, r1
   164a0:	bl	12970 <strlen@plt>
   164a4:	mov	r2, r0
   164a8:	mov	r0, r5
   164ac:	mov	r1, r4
   164b0:	pop	{r4, r5, fp, lr}
   164b4:	b	163d0 <flatcc_builder_create_string@@Base>

000164b8 <flatcc_builder_create_string_strn@@Base>:
   164b8:	push	{r4, r5, fp, lr}
   164bc:	add	fp, sp, #8
   164c0:	mov	r4, r1
   164c4:	mov	r5, r0
   164c8:	mov	r0, r1
   164cc:	mov	r1, r2
   164d0:	bl	14ad8 <flatcc_builder_append_string_strn@@Base+0x30>
   164d4:	mov	r2, r0
   164d8:	mov	r0, r5
   164dc:	mov	r1, r4
   164e0:	pop	{r4, r5, fp, lr}
   164e4:	b	163d0 <flatcc_builder_create_string@@Base>

000164e8 <flatcc_builder_end_string@@Base>:
   164e8:	push	{r4, r5, fp, lr}
   164ec:	add	fp, sp, #8
   164f0:	mov	r4, r0
   164f4:	ldr	r0, [r0, #32]
   164f8:	ldrh	r1, [r0, #14]
   164fc:	cmp	r1, #6
   16500:	bne	16538 <flatcc_builder_end_string@@Base+0x50>
   16504:	ldr	r2, [r4, #20]
   16508:	ldr	r0, [r0, #20]
   1650c:	cmp	r0, r2
   16510:	bne	16558 <flatcc_builder_end_string@@Base+0x70>
   16514:	ldr	r1, [r4, #16]
   16518:	mov	r0, r4
   1651c:	bl	163d0 <flatcc_builder_create_string@@Base>
   16520:	mov	r5, r0
   16524:	cmp	r0, #0
   16528:	movne	r0, r4
   1652c:	blne	1450c <flatcc_builder_end_buffer@@Base+0xc8>
   16530:	mov	r0, r5
   16534:	pop	{r4, r5, fp, pc}
   16538:	movw	r0, #46400	; 0xb540
   1653c:	movt	r0, #1
   16540:	movw	r1, #45083	; 0xb01b
   16544:	movt	r1, #1
   16548:	movw	r3, #48627	; 0xbdf3
   1654c:	movt	r3, #1
   16550:	movw	r2, #1732	; 0x6c4
   16554:	bl	129c4 <__assert_fail@plt>
   16558:	movw	r0, #48694	; 0xbe36
   1655c:	movt	r0, #1
   16560:	movw	r1, #45083	; 0xb01b
   16564:	movt	r1, #1
   16568:	movw	r3, #48627	; 0xbdf3
   1656c:	movt	r3, #1
   16570:	movw	r2, #1733	; 0x6c5
   16574:	bl	129c4 <__assert_fail@plt>

00016578 <flatcc_builder_string_edit@@Base>:
   16578:	ldr	r0, [r0, #16]
   1657c:	bx	lr

00016580 <flatcc_builder_string_len@@Base>:
   16580:	ldr	r0, [r0, #32]
   16584:	ldr	r0, [r0, #20]
   16588:	bx	lr
   1658c:	push	{r4, r5, r6, sl, fp, lr}
   16590:	add	fp, sp, #16
   16594:	mov	r5, r3
   16598:	mov	r4, r0
   1659c:	ldr	r0, [r0, #20]
   165a0:	ldr	r3, [r4, #24]
   165a4:	add	r0, r2, r0
   165a8:	sub	r0, r0, #1
   165ac:	rsb	r2, r2, #0
   165b0:	and	r6, r0, r2
   165b4:	add	r0, r6, r1
   165b8:	str	r0, [r4, #20]
   165bc:	cmp	r0, r3
   165c0:	bcc	165e4 <flatcc_builder_string_len@@Base+0x64>
   165c4:	add	r1, r0, #1
   165c8:	mov	r0, r4
   165cc:	movw	r2, #65532	; 0xfffc
   165d0:	bl	16a30 <flatcc_builder_get_emit_context@@Base+0x18>
   165d4:	mov	r1, r0
   165d8:	mov	r0, #0
   165dc:	cmp	r1, #0
   165e0:	popne	{r4, r5, r6, sl, fp, pc}
   165e4:	ldr	r0, [r4, #4]
   165e8:	add	r0, r0, r5, lsl #1
   165ec:	add	r1, r6, #4
   165f0:	strh	r1, [r0]
   165f4:	ldrh	r0, [r4, #8]
   165f8:	cmp	r0, r5
   165fc:	addls	r0, r5, #1
   16600:	strhls	r0, [r4, #8]
   16604:	ldr	r0, [r4, #16]
   16608:	add	r0, r0, r6
   1660c:	pop	{r4, r5, r6, sl, fp, pc}

00016610 <flatcc_builder_table_edit@@Base>:
   16610:	ldr	r2, [r0, #32]
   16614:	ldrh	r2, [r2, #14]
   16618:	cmp	r2, #3
   1661c:	ldreq	r2, [r0, #16]
   16620:	ldreq	r0, [r0, #20]
   16624:	addeq	r0, r2, r0
   16628:	subeq	r0, r0, r1
   1662c:	bxeq	lr
   16630:	push	{fp, lr}
   16634:	mov	fp, sp
   16638:	movw	r0, #47152	; 0xb830
   1663c:	movt	r0, #1
   16640:	movw	r1, #45083	; 0xb01b
   16644:	movt	r1, #1
   16648:	movw	r3, #48872	; 0xbee8
   1664c:	movt	r3, #1
   16650:	movw	r2, #1794	; 0x702
   16654:	bl	129c4 <__assert_fail@plt>

00016658 <flatcc_builder_table_add_copy@@Base>:
   16658:	push	{r4, r5, r6, sl, fp, lr}
   1665c:	add	fp, sp, #16
   16660:	mov	r4, r3
   16664:	mov	r5, r2
   16668:	ldr	r3, [fp, #8]
   1666c:	mov	r2, r4
   16670:	bl	15d8c <flatcc_builder_table_add@@Base>
   16674:	mov	r6, r0
   16678:	cmp	r0, #0
   1667c:	beq	16690 <flatcc_builder_table_add_copy@@Base+0x38>
   16680:	mov	r0, r6
   16684:	mov	r1, r5
   16688:	mov	r2, r4
   1668c:	bl	12904 <memcpy@plt>
   16690:	mov	r0, r6
   16694:	pop	{r4, r5, r6, sl, fp, pc}
   16698:	push	{r4, r5, r6, r7, fp, lr}
   1669c:	add	fp, sp, #16
   166a0:	mov	r5, r1
   166a4:	mov	r4, r0
   166a8:	ldr	r0, [r0, #20]
   166ac:	ldr	r1, [r4, #24]
   166b0:	add	r0, r0, #3
   166b4:	bic	r7, r0, #3
   166b8:	add	r6, r7, #4
   166bc:	str	r6, [r4, #20]
   166c0:	cmp	r6, r1
   166c4:	bls	166e8 <flatcc_builder_table_add_copy@@Base+0x90>
   166c8:	mov	r0, r4
   166cc:	mov	r1, r6
   166d0:	movw	r2, #65532	; 0xfffc
   166d4:	bl	16a30 <flatcc_builder_get_emit_context@@Base+0x18>
   166d8:	mov	r1, r0
   166dc:	mov	r0, #0
   166e0:	cmp	r1, #0
   166e4:	popne	{r4, r5, r6, r7, fp, pc}
   166e8:	ldr	r0, [r4, #4]
   166ec:	add	r0, r0, r5, lsl #1
   166f0:	strh	r6, [r0]
   166f4:	ldrh	r0, [r4, #8]
   166f8:	cmp	r0, r5
   166fc:	addls	r0, r5, #1
   16700:	strhls	r0, [r4, #8]
   16704:	ldr	r0, [r4]
   16708:	add	r1, r0, #2
   1670c:	str	r1, [r4]
   16710:	strh	r7, [r0]
   16714:	ldr	r0, [r4, #16]
   16718:	add	r0, r0, r7
   1671c:	pop	{r4, r5, r6, r7, fp, pc}

00016720 <flatcc_builder_push_buffer_alignment@@Base>:
   16720:	ldrh	r1, [r0, #128]	; 0x80
   16724:	mov	r2, #4
   16728:	strh	r2, [r0, #128]	; 0x80
   1672c:	mov	r0, r1
   16730:	bx	lr

00016734 <flatcc_builder_pop_buffer_alignment@@Base>:
   16734:	b	141b4 <flatcc_builder_create_buffer@@Base+0x1d0>

00016738 <flatcc_builder_get_buffer_alignment@@Base>:
   16738:	ldrh	r0, [r0, #128]	; 0x80
   1673c:	bx	lr

00016740 <flatcc_builder_set_vtable_clustering@@Base>:
   16740:	clz	r1, r1
   16744:	lsr	r1, r1, #5
   16748:	str	r1, [r0, #180]	; 0xb4
   1674c:	bx	lr

00016750 <flatcc_builder_set_block_align@@Base>:
   16750:	strh	r1, [r0, #132]	; 0x84
   16754:	bx	lr

00016758 <flatcc_builder_get_level@@Base>:
   16758:	ldr	r0, [r0, #156]	; 0x9c
   1675c:	bx	lr

00016760 <flatcc_builder_set_max_level@@Base>:
   16760:	str	r1, [r0, #176]	; 0xb0
   16764:	ldr	r2, [r0, #160]	; 0xa0
   16768:	cmp	r2, r1
   1676c:	strlt	r1, [r0, #160]	; 0xa0
   16770:	bx	lr

00016774 <flatcc_builder_get_buffer_size@@Base>:
   16774:	ldr	r1, [r0, #136]	; 0x88
   16778:	ldr	r0, [r0, #140]	; 0x8c
   1677c:	sub	r0, r0, r1
   16780:	bx	lr

00016784 <flatcc_builder_get_buffer_start@@Base>:
   16784:	ldr	r0, [r0, #136]	; 0x88
   16788:	bx	lr

0001678c <flatcc_builder_get_buffer_end@@Base>:
   1678c:	ldr	r0, [r0, #140]	; 0x8c
   16790:	bx	lr

00016794 <flatcc_builder_set_vtable_cache_limit@@Base>:
   16794:	str	r1, [r0, #172]	; 0xac
   16798:	bx	lr

0001679c <flatcc_builder_set_identifier@@Base>:
   1679c:	movw	r2, #44553	; 0xae09
   167a0:	movt	r2, #1
   167a4:	cmp	r1, #0
   167a8:	movne	r2, r1
   167ac:	ldr	r1, [r2]
   167b0:	str	r1, [r0, #168]	; 0xa8
   167b4:	bx	lr

000167b8 <flatcc_builder_get_type@@Base>:
   167b8:	ldr	r0, [r0, #32]
   167bc:	cmp	r0, #0
   167c0:	ldrhne	r0, [r0, #14]
   167c4:	moveq	r0, #0
   167c8:	bx	lr

000167cc <flatcc_builder_get_type_at@@Base>:
   167cc:	mov	r2, r0
   167d0:	mov	r0, #0
   167d4:	cmp	r1, #1
   167d8:	ldrge	r3, [r2, #156]	; 0x9c
   167dc:	cmpge	r3, r1
   167e0:	bge	167e8 <flatcc_builder_get_type_at@@Base+0x1c>
   167e4:	bx	lr
   167e8:	sub	r0, r1, r3
   167ec:	add	r0, r0, r0, lsl #3
   167f0:	ldr	r1, [r2, #32]
   167f4:	add	r0, r1, r0, lsl #2
   167f8:	ldrh	r0, [r0, #14]
   167fc:	bx	lr

00016800 <flatcc_builder_get_direct_buffer@@Base>:
   16800:	ldr	r2, [r0, #184]	; 0xb8
   16804:	cmp	r2, #0
   16808:	beq	16814 <flatcc_builder_get_direct_buffer@@Base+0x14>
   1680c:	add	r0, r0, #188	; 0xbc
   16810:	b	16828 <flatcc_builder_get_direct_buffer@@Base+0x28>
   16814:	cmp	r1, #0
   16818:	movne	r0, #0
   1681c:	strne	r0, [r1]
   16820:	mov	r0, #0
   16824:	bx	lr
   16828:	ldm	r0, {r2, r3}
   1682c:	cmp	r2, r3
   16830:	beq	16844 <flatcc_builder_get_direct_buffer@@Base+0x44>
   16834:	mov	r0, #0
   16838:	cmp	r1, #0
   1683c:	strne	r0, [r1]
   16840:	bx	lr
   16844:	cmp	r1, #0
   16848:	ldrne	r2, [r0, #24]
   1684c:	strne	r2, [r1]
   16850:	ldr	r0, [r0, #8]
   16854:	bx	lr

00016858 <flatcc_builder_copy_buffer@@Base>:
   16858:	push	{fp, lr}
   1685c:	mov	fp, sp
   16860:	ldr	r3, [r0, #184]	; 0xb8
   16864:	cmp	r3, #0
   16868:	beq	1689c <flatcc_builder_copy_buffer@@Base+0x44>
   1686c:	add	r0, r0, #188	; 0xbc
   16870:	bl	16f74 <flatcc_emitter_copy_buffer@@Base>
   16874:	cmp	r0, #0
   16878:	popne	{fp, pc}
   1687c:	movw	r0, #45679	; 0xb26f
   16880:	movt	r0, #1
   16884:	movw	r1, #45083	; 0xb01b
   16888:	movt	r1, #1
   1688c:	movw	r3, #49011	; 0xbf73
   16890:	movt	r3, #1
   16894:	movw	r2, #1926	; 0x786
   16898:	bl	129c4 <__assert_fail@plt>
   1689c:	mov	r0, #0
   168a0:	pop	{fp, pc}

000168a4 <flatcc_builder_finalize_buffer@@Base>:
   168a4:	push	{r4, r5, r6, sl, fp, lr}
   168a8:	add	fp, sp, #16
   168ac:	mov	r6, r1
   168b0:	mov	r4, r0
   168b4:	bl	16774 <flatcc_builder_get_buffer_size@@Base>
   168b8:	mov	r5, r0
   168bc:	cmp	r6, #0
   168c0:	strne	r5, [r6]
   168c4:	mov	r0, r5
   168c8:	bl	1294c <malloc@plt>
   168cc:	cmp	r0, #0
   168d0:	beq	16914 <flatcc_builder_finalize_buffer@@Base+0x70>
   168d4:	mov	r6, r0
   168d8:	mov	r0, r4
   168dc:	mov	r1, r6
   168e0:	mov	r2, r5
   168e4:	bl	16858 <flatcc_builder_copy_buffer@@Base>
   168e8:	cmp	r0, #0
   168ec:	movne	r0, r6
   168f0:	popne	{r4, r5, r6, sl, fp, pc}
   168f4:	movw	r0, #49601	; 0xc1c1
   168f8:	movt	r0, #1
   168fc:	movw	r1, #45083	; 0xb01b
   16900:	movt	r1, #1
   16904:	movw	r3, #49080	; 0xbfb8
   16908:	movt	r3, #1
   1690c:	movw	r2, #1948	; 0x79c
   16910:	bl	129c4 <__assert_fail@plt>
   16914:	movw	r0, #49601	; 0xc1c1
   16918:	movt	r0, #1
   1691c:	movw	r1, #45083	; 0xb01b
   16920:	movt	r1, #1
   16924:	movw	r3, #49080	; 0xbfb8
   16928:	movt	r3, #1
   1692c:	movw	r2, #1944	; 0x798
   16930:	bl	129c4 <__assert_fail@plt>

00016934 <flatcc_builder_finalize_aligned_buffer@@Base>:
   16934:	push	{r4, r5, r6, r7, fp, lr}
   16938:	add	fp, sp, #16
   1693c:	mov	r4, r1
   16940:	mov	r5, r0
   16944:	bl	16774 <flatcc_builder_get_buffer_size@@Base>
   16948:	mov	r6, r0
   1694c:	cmp	r4, #0
   16950:	strne	r6, [r4]
   16954:	mov	r0, r5
   16958:	bl	16738 <flatcc_builder_get_buffer_alignment@@Base>
   1695c:	add	r1, r6, r0
   16960:	sub	r1, r1, #1
   16964:	rsb	r2, r0, #0
   16968:	and	r7, r1, r2
   1696c:	mov	r1, r7
   16970:	bl	169bc <flatcc_builder_finalize_aligned_buffer@@Base+0x88>
   16974:	cmp	r0, #0
   16978:	beq	169a8 <flatcc_builder_finalize_aligned_buffer@@Base+0x74>
   1697c:	mov	r6, r0
   16980:	mov	r0, r5
   16984:	mov	r1, r6
   16988:	mov	r2, r7
   1698c:	bl	16858 <flatcc_builder_copy_buffer@@Base>
   16990:	cmp	r0, #0
   16994:	beq	169a0 <flatcc_builder_finalize_aligned_buffer@@Base+0x6c>
   16998:	mov	r0, r6
   1699c:	pop	{r4, r5, r6, r7, fp, pc}
   169a0:	mov	r0, r6
   169a4:	bl	128f8 <free@plt>
   169a8:	mov	r6, #0
   169ac:	cmp	r4, #0
   169b0:	strne	r6, [r4]
   169b4:	mov	r0, r6
   169b8:	pop	{r4, r5, r6, r7, fp, pc}
   169bc:	push	{fp, lr}
   169c0:	mov	fp, sp
   169c4:	sub	sp, sp, #8
   169c8:	mov	r2, r1
   169cc:	mov	r1, r0
   169d0:	mov	r0, #0
   169d4:	str	r0, [sp, #4]
   169d8:	cmp	r1, #4
   169dc:	movls	r1, #4
   169e0:	add	r0, sp, #4
   169e4:	bl	12988 <posix_memalign@plt>
   169e8:	cmp	r0, #0
   169ec:	ldrne	r0, [sp, #4]
   169f0:	cmpne	r0, #0
   169f4:	beq	16a04 <flatcc_builder_finalize_aligned_buffer@@Base+0xd0>
   169f8:	bl	128f8 <free@plt>
   169fc:	mov	r0, #0
   16a00:	str	r0, [sp, #4]
   16a04:	ldr	r0, [sp, #4]
   16a08:	mov	sp, fp
   16a0c:	pop	{fp, pc}

00016a10 <flatcc_builder_aligned_alloc@@Base>:
   16a10:	b	169bc <flatcc_builder_finalize_aligned_buffer@@Base+0x88>

00016a14 <flatcc_builder_aligned_free@@Base>:
   16a14:	b	128f8 <free@plt>

00016a18 <flatcc_builder_get_emit_context@@Base>:
   16a18:	ldr	r0, [r0, #36]	; 0x24
   16a1c:	bx	lr
   16a20:	ldr	r0, [r0, #140]	; 0x8c
   16a24:	sub	r1, r1, #1
   16a28:	and	r0, r0, r1
   16a2c:	bx	lr
   16a30:	push	{r4, r5, r6, sl, fp, lr}
   16a34:	add	fp, sp, #16
   16a38:	sub	sp, sp, #8
   16a3c:	mov	r6, r2
   16a40:	mov	r5, r0
   16a44:	ldr	r2, [r0, #28]
   16a48:	ldr	r0, [r0, #40]	; 0x28
   16a4c:	ldr	r4, [r5, #48]	; 0x30
   16a50:	mov	r3, #1
   16a54:	str	r3, [sp]
   16a58:	add	r2, r2, r1
   16a5c:	add	r1, r5, #60	; 0x3c
   16a60:	mov	r3, #1
   16a64:	blx	r4
   16a68:	mov	r1, r0
   16a6c:	mvn	r0, #0
   16a70:	cmp	r1, #0
   16a74:	beq	16a80 <flatcc_builder_get_emit_context@@Base+0x68>
   16a78:	sub	sp, fp, #16
   16a7c:	pop	{r4, r5, r6, sl, fp, pc}
   16a80:	mov	r0, r5
   16a84:	mov	r1, r6
   16a88:	bl	145c4 <flatcc_builder_start_struct@@Base+0x4c>
   16a8c:	mov	r0, #0
   16a90:	sub	sp, fp, #16
   16a94:	pop	{r4, r5, r6, sl, fp, pc}
   16a98:	push	{r4, r5, r6, sl, fp, lr}
   16a9c:	add	fp, sp, #16
   16aa0:	sub	sp, sp, #8
   16aa4:	ldr	r2, [r0, #124]	; 0x7c
   16aa8:	cmp	r2, #0
   16aac:	bne	16b4c <flatcc_builder_get_emit_context@@Base+0x134>
   16ab0:	mov	r4, r0
   16ab4:	mov	r0, #0
   16ab8:	str	r0, [sp]
   16abc:	mov	r6, #16
   16ac0:	mov	r0, r4
   16ac4:	mov	r1, #6
   16ac8:	mov	r3, #16
   16acc:	bl	13be0 <flatcc_builder_enter_user_frame_ptr@@Base+0x78>
   16ad0:	mvn	r5, #0
   16ad4:	cmp	r0, #0
   16ad8:	beq	16b40 <flatcc_builder_get_emit_context@@Base+0x128>
   16adc:	add	r1, r4, #92	; 0x5c
   16ae0:	str	r6, [r4, #124]	; 0x7c
   16ae4:	ldr	r0, [r4, #40]	; 0x28
   16ae8:	ldr	ip, [r4, #48]	; 0x30
   16aec:	mov	r2, #5
   16af0:	str	r2, [sp]
   16af4:	mov	r6, #256	; 0x100
   16af8:	mov	r2, #256	; 0x100
   16afc:	mov	r3, #1
   16b00:	blx	ip
   16b04:	cmp	r0, #0
   16b08:	bne	16b40 <flatcc_builder_get_emit_context@@Base+0x128>
   16b0c:	ldr	r0, [r4, #96]	; 0x60
   16b10:	mov	r1, r6
   16b14:	lsl	r6, r6, #1
   16b18:	cmp	r0, r1, lsl #1
   16b1c:	bcs	16b10 <flatcc_builder_get_emit_context@@Base+0xf8>
   16b20:	lsr	r1, r1, #2
   16b24:	mvn	r0, #0
   16b28:	mov	r2, #1
   16b2c:	add	r0, r0, #1
   16b30:	cmp	r1, r2, lsl r0
   16b34:	bhi	16b2c <flatcc_builder_get_emit_context@@Base+0x114>
   16b38:	str	r0, [r4, #116]	; 0x74
   16b3c:	mov	r5, #0
   16b40:	mov	r0, r5
   16b44:	sub	sp, fp, #16
   16b48:	pop	{r4, r5, r6, sl, fp, pc}
   16b4c:	movw	r0, #49541	; 0xc185
   16b50:	movt	r0, #1
   16b54:	movw	r1, #45083	; 0xb01b
   16b58:	movt	r1, #1
   16b5c:	movw	r3, #49556	; 0xc194
   16b60:	movt	r3, #1
   16b64:	movw	r2, #342	; 0x156
   16b68:	bl	129c4 <__assert_fail@plt>

00016b6c <flatcc_emitter_recycle_page@@Base>:
   16b6c:	ldr	ip, [r0]
   16b70:	mvn	r2, #0
   16b74:	cmp	ip, r1
   16b78:	ldrne	r3, [r0, #4]
   16b7c:	cmpne	r3, r1
   16b80:	bne	16b8c <flatcc_emitter_recycle_page@@Base+0x20>
   16b84:	mov	r0, r2
   16b88:	bx	lr
   16b8c:	ldr	r2, [r1, #2944]	; 0xb80
   16b90:	ldr	r3, [r1, #2948]	; 0xb84
   16b94:	str	r3, [r2, #2948]	; 0xb84
   16b98:	ldr	r2, [r1, #2944]	; 0xb80
   16b9c:	ldr	r3, [r1, #2948]	; 0xb84
   16ba0:	str	r2, [r3, #2944]	; 0xb80
   16ba4:	ldr	r2, [ip, #2948]	; 0xb84
   16ba8:	str	r2, [r1, #2948]	; 0xb84
   16bac:	ldr	r0, [r0]
   16bb0:	str	r0, [r1, #2944]	; 0xb80
   16bb4:	str	r1, [r2, #2944]	; 0xb80
   16bb8:	ldr	r0, [r1, #2944]	; 0xb80
   16bbc:	str	r1, [r0, #2948]	; 0xb84
   16bc0:	mov	r2, #0
   16bc4:	mov	r0, r2
   16bc8:	bx	lr

00016bcc <flatcc_emitter_reset@@Base>:
   16bcc:	push	{r4, sl, fp, lr}
   16bd0:	add	fp, sp, #8
   16bd4:	mov	r4, r0
   16bd8:	ldr	r0, [r0]
   16bdc:	cmp	r0, #0
   16be0:	beq	16c84 <flatcc_emitter_reset@@Base+0xb8>
   16be4:	mov	r1, #1472	; 0x5c0
   16be8:	add	r2, r0, #1472	; 0x5c0
   16bec:	stmib	r4, {r0, r2}
   16bf0:	str	r1, [r4, #12]
   16bf4:	str	r2, [r4, #16]
   16bf8:	str	r1, [r4, #20]
   16bfc:	movw	r1, #64064	; 0xfa40
   16c00:	movt	r1, #65535	; 0xffff
   16c04:	str	r1, [r0, #2952]	; 0xb88
   16c08:	ldr	r0, [r4, #32]
   16c0c:	cmp	r0, #0
   16c10:	ldreq	r0, [r4, #24]
   16c14:	streq	r0, [r4, #32]
   16c18:	add	r2, r4, #24
   16c1c:	ldm	r2, {r0, r1, r2}
   16c20:	mov	r3, #0
   16c24:	str	r3, [r4, #24]
   16c28:	add	r2, r2, r2, lsl #1
   16c2c:	lsr	r2, r2, #2
   16c30:	add	r0, r2, r0, lsr #2
   16c34:	str	r0, [r4, #32]
   16c38:	cmp	r1, r0, lsl #1
   16c3c:	bls	16c84 <flatcc_emitter_reset@@Base+0xb8>
   16c40:	ldr	r2, [r4]
   16c44:	ldr	r1, [r4, #4]
   16c48:	ldr	r0, [r1, #2944]	; 0xb80
   16c4c:	cmp	r0, r2
   16c50:	popeq	{r4, sl, fp, pc}
   16c54:	ldr	r2, [r0, #2944]	; 0xb80
   16c58:	str	r2, [r1, #2944]	; 0xb80
   16c5c:	ldr	r1, [r0, #2944]	; 0xb80
   16c60:	ldr	r2, [r4, #4]
   16c64:	str	r2, [r1, #2948]	; 0xb84
   16c68:	bl	128f8 <free@plt>
   16c6c:	ldr	r0, [r4, #28]
   16c70:	ldr	r1, [r4, #32]
   16c74:	sub	r0, r0, #2944	; 0xb80
   16c78:	str	r0, [r4, #28]
   16c7c:	cmp	r0, r1, lsl #1
   16c80:	bhi	16c40 <flatcc_emitter_reset@@Base+0x74>
   16c84:	pop	{r4, sl, fp, pc}

00016c88 <flatcc_emitter_clear@@Base>:
   16c88:	push	{r4, r5, r6, sl, fp, lr}
   16c8c:	add	fp, sp, #16
   16c90:	ldr	r5, [r0]
   16c94:	cmp	r5, #0
   16c98:	popeq	{r4, r5, r6, sl, fp, pc}
   16c9c:	mov	r4, r0
   16ca0:	ldr	r0, [r5, #2948]	; 0xb84
   16ca4:	mov	r6, #0
   16ca8:	str	r6, [r0, #2944]	; 0xb80
   16cac:	b	16cbc <flatcc_emitter_clear@@Base+0x34>
   16cb0:	mov	r5, r0
   16cb4:	ldr	r0, [r0, #2948]	; 0xb84
   16cb8:	bl	128f8 <free@plt>
   16cbc:	ldr	r0, [r5, #2944]	; 0xb80
   16cc0:	cmp	r0, #0
   16cc4:	bne	16cb0 <flatcc_emitter_clear@@Base+0x28>
   16cc8:	mov	r0, r5
   16ccc:	bl	128f8 <free@plt>
   16cd0:	vmov.i32	q8, #0	; 0x00000000
   16cd4:	add	r0, r4, #16
   16cd8:	vst1.32	{d16-d17}, [r0]
   16cdc:	mov	r0, #32
   16ce0:	vst1.32	{d16-d17}, [r4], r0
   16ce4:	str	r6, [r4]
   16ce8:	pop	{r4, r5, r6, sl, fp, pc}

00016cec <flatcc_emitter@@Base>:
   16cec:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16cf0:	add	fp, sp, #24
   16cf4:	mov	r4, r2
   16cf8:	mov	r5, r1
   16cfc:	mov	r6, r0
   16d00:	ldr	r1, [r0, #24]
   16d04:	ldr	r0, [fp, #8]
   16d08:	add	r1, r1, r0
   16d0c:	str	r1, [r6, #24]
   16d10:	mov	r1, r6
   16d14:	cmn	r3, #1
   16d18:	ble	16d58 <flatcc_emitter@@Base+0x6c>
   16d1c:	ldr	r2, [r1, #20]!
   16d20:	cmp	r2, r0
   16d24:	bcs	16da0 <flatcc_emitter@@Base+0xb4>
   16d28:	mov	r8, #0
   16d2c:	cmp	r4, #0
   16d30:	beq	16df0 <flatcc_emitter@@Base+0x104>
   16d34:	ldm	r5, {r1, r2}
   16d38:	mov	r0, r6
   16d3c:	bl	16ebc <flatcc_emitter@@Base+0x1d0>
   16d40:	cmp	r0, #0
   16d44:	bne	16d94 <flatcc_emitter@@Base+0xa8>
   16d48:	subs	r4, r4, #1
   16d4c:	add	r5, r5, #8
   16d50:	bne	16d34 <flatcc_emitter@@Base+0x48>
   16d54:	b	16df0 <flatcc_emitter@@Base+0x104>
   16d58:	ldr	r2, [r1, #12]!
   16d5c:	cmp	r2, r0
   16d60:	bcs	16db0 <flatcc_emitter@@Base+0xc4>
   16d64:	add	r0, r5, r4, lsl #3
   16d68:	sub	r5, r0, #4
   16d6c:	rsb	r4, r4, #1
   16d70:	cmp	r4, #1
   16d74:	beq	16df8 <flatcc_emitter@@Base+0x10c>
   16d78:	ldmda	r5, {r1, r2}
   16d7c:	mov	r0, r6
   16d80:	bl	16e04 <flatcc_emitter@@Base+0x118>
   16d84:	sub	r5, r5, #8
   16d88:	add	r4, r4, #1
   16d8c:	cmp	r0, #0
   16d90:	beq	16d70 <flatcc_emitter@@Base+0x84>
   16d94:	mvn	r8, #0
   16d98:	mov	r0, r8
   16d9c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16da0:	ldr	r7, [r6, #16]
   16da4:	add	r3, r7, r0
   16da8:	str	r3, [r6, #16]
   16dac:	b	16dbc <flatcc_emitter@@Base+0xd0>
   16db0:	ldr	r3, [r6, #8]
   16db4:	sub	r7, r3, r0
   16db8:	str	r7, [r6, #8]
   16dbc:	sub	r0, r2, r0
   16dc0:	str	r0, [r1]
   16dc4:	mov	r8, #0
   16dc8:	cmp	r4, #0
   16dcc:	beq	16df0 <flatcc_emitter@@Base+0x104>
   16dd0:	ldm	r5, {r1, r2}
   16dd4:	mov	r0, r7
   16dd8:	bl	12904 <memcpy@plt>
   16ddc:	ldr	r0, [r5, #4]
   16de0:	add	r7, r7, r0
   16de4:	add	r5, r5, #8
   16de8:	subs	r4, r4, #1
   16dec:	bne	16dd0 <flatcc_emitter@@Base+0xe4>
   16df0:	mov	r0, r8
   16df4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16df8:	mov	r8, #0
   16dfc:	mov	r0, r8
   16e00:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16e04:	push	{r4, r5, r6, r7, fp, lr}
   16e08:	add	fp, sp, #16
   16e0c:	cmp	r2, #0
   16e10:	moveq	r0, #0
   16e14:	popeq	{r4, r5, r6, r7, fp, pc}
   16e18:	mov	r4, r2
   16e1c:	mov	r5, r0
   16e20:	clz	r0, r2
   16e24:	lsr	r7, r0, #5
   16e28:	add	r6, r1, r2
   16e2c:	b	16e68 <flatcc_emitter@@Base+0x17c>
   16e30:	sub	r0, r0, r7
   16e34:	str	r0, [r5, #12]
   16e38:	ldr	r0, [r5, #8]
   16e3c:	sub	r0, r0, r7
   16e40:	str	r0, [r5, #8]
   16e44:	sub	r6, r6, r7
   16e48:	mov	r1, r6
   16e4c:	mov	r2, r7
   16e50:	bl	12904 <memcpy@plt>
   16e54:	subs	r4, r4, r7
   16e58:	clz	r0, r4
   16e5c:	lsr	r7, r0, #5
   16e60:	moveq	r0, #0
   16e64:	popeq	{r4, r5, r6, r7, fp, pc}
   16e68:	ldr	r0, [r5, #12]
   16e6c:	cmp	r4, r0
   16e70:	bls	16ea0 <flatcc_emitter@@Base+0x1b4>
   16e74:	cmp	r0, #0
   16e78:	bne	16ea8 <flatcc_emitter@@Base+0x1bc>
   16e7c:	mov	r0, r5
   16e80:	bl	17030 <flatcc_emitter_copy_buffer@@Base+0xbc>
   16e84:	cmp	r0, #0
   16e88:	mov	r1, r0
   16e8c:	movwne	r1, #1
   16e90:	orr	r1, r1, r7
   16e94:	tst	r1, #1
   16e98:	beq	16e68 <flatcc_emitter@@Base+0x17c>
   16e9c:	b	16eb0 <flatcc_emitter@@Base+0x1c4>
   16ea0:	mov	r7, r4
   16ea4:	b	16e30 <flatcc_emitter@@Base+0x144>
   16ea8:	mov	r7, r0
   16eac:	b	16e30 <flatcc_emitter@@Base+0x144>
   16eb0:	cmp	r0, #0
   16eb4:	mvnne	r0, #0
   16eb8:	pop	{r4, r5, r6, r7, fp, pc}
   16ebc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16ec0:	add	fp, sp, #24
   16ec4:	cmp	r2, #0
   16ec8:	moveq	r0, #0
   16ecc:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   16ed0:	mov	r4, r2
   16ed4:	mov	r8, r1
   16ed8:	mov	r6, r0
   16edc:	clz	r0, r2
   16ee0:	lsr	r5, r0, #5
   16ee4:	b	16f28 <flatcc_emitter@@Base+0x23c>
   16ee8:	ldr	r0, [r6, #16]
   16eec:	mov	r1, r8
   16ef0:	mov	r2, r7
   16ef4:	bl	12904 <memcpy@plt>
   16ef8:	ldr	r0, [r6, #16]
   16efc:	ldr	r1, [r6, #20]
   16f00:	add	r0, r0, r7
   16f04:	sub	r1, r1, r7
   16f08:	str	r0, [r6, #16]
   16f0c:	str	r1, [r6, #20]
   16f10:	add	r8, r8, r7
   16f14:	subs	r4, r4, r7
   16f18:	clz	r0, r4
   16f1c:	lsr	r5, r0, #5
   16f20:	moveq	r0, #0
   16f24:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   16f28:	ldr	r7, [r6, #20]
   16f2c:	cmp	r4, r7
   16f30:	bls	16f60 <flatcc_emitter@@Base+0x274>
   16f34:	cmp	r7, #0
   16f38:	bne	16ee8 <flatcc_emitter@@Base+0x1fc>
   16f3c:	mov	r0, r6
   16f40:	bl	1711c <flatcc_emitter_copy_buffer@@Base+0x1a8>
   16f44:	cmp	r0, #0
   16f48:	mov	r1, r0
   16f4c:	movwne	r1, #1
   16f50:	orr	r1, r1, r5
   16f54:	tst	r1, #1
   16f58:	beq	16f28 <flatcc_emitter@@Base+0x23c>
   16f5c:	b	16f68 <flatcc_emitter@@Base+0x27c>
   16f60:	mov	r7, r4
   16f64:	b	16ee8 <flatcc_emitter@@Base+0x1fc>
   16f68:	cmp	r0, #0
   16f6c:	mvnne	r0, #0
   16f70:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00016f74 <flatcc_emitter_copy_buffer@@Base>:
   16f74:	push	{r4, r5, r6, sl, fp, lr}
   16f78:	add	fp, sp, #16
   16f7c:	mov	r3, r2
   16f80:	ldr	r2, [r0, #24]
   16f84:	mov	r5, #0
   16f88:	cmp	r2, r3
   16f8c:	bhi	17014 <flatcc_emitter_copy_buffer@@Base+0xa0>
   16f90:	mov	r4, r0
   16f94:	ldr	r0, [r0]
   16f98:	cmp	r0, #0
   16f9c:	beq	17014 <flatcc_emitter_copy_buffer@@Base+0xa0>
   16fa0:	mov	r6, r1
   16fa4:	ldr	r1, [r4, #4]
   16fa8:	cmp	r0, r1
   16fac:	beq	1701c <flatcc_emitter_copy_buffer@@Base+0xa8>
   16fb0:	ldr	r1, [r4, #8]
   16fb4:	ldr	r0, [r4, #12]
   16fb8:	rsb	r5, r0, #2944	; 0xb80
   16fbc:	mov	r0, r6
   16fc0:	mov	r2, r5
   16fc4:	bl	12904 <memcpy@plt>
   16fc8:	add	r5, r6, r5
   16fcc:	ldm	r4, {r0, r1}
   16fd0:	ldr	r6, [r0, #2944]	; 0xb80
   16fd4:	cmp	r6, r1
   16fd8:	beq	17000 <flatcc_emitter_copy_buffer@@Base+0x8c>
   16fdc:	mov	r0, r5
   16fe0:	mov	r1, r6
   16fe4:	mov	r2, #2944	; 0xb80
   16fe8:	bl	12904 <memcpy@plt>
   16fec:	add	r5, r5, #2944	; 0xb80
   16ff0:	ldr	r6, [r6, #2944]	; 0xb80
   16ff4:	ldr	r0, [r4, #4]
   16ff8:	cmp	r6, r0
   16ffc:	bne	16fdc <flatcc_emitter_copy_buffer@@Base+0x68>
   17000:	ldr	r0, [r4, #20]
   17004:	rsb	r2, r0, #2944	; 0xb80
   17008:	mov	r0, r5
   1700c:	mov	r1, r6
   17010:	bl	12904 <memcpy@plt>
   17014:	mov	r0, r5
   17018:	pop	{r4, r5, r6, sl, fp, pc}
   1701c:	ldr	r1, [r4, #8]
   17020:	mov	r0, r6
   17024:	bl	12904 <memcpy@plt>
   17028:	mov	r0, r6
   1702c:	pop	{r4, r5, r6, sl, fp, pc}
   17030:	push	{r4, r5, fp, lr}
   17034:	add	fp, sp, #8
   17038:	mov	r4, r0
   1703c:	ldr	r5, [r0]
   17040:	cmp	r5, #0
   17044:	beq	1706c <flatcc_emitter_copy_buffer@@Base+0xf8>
   17048:	ldr	r0, [r5, #2948]	; 0xb84
   1704c:	ldr	r1, [r4, #4]
   17050:	cmp	r0, r1
   17054:	beq	1706c <flatcc_emitter_copy_buffer@@Base+0xf8>
   17058:	ldr	r1, [r5, #2952]	; 0xb88
   1705c:	sub	r1, r1, #2944	; 0xb80
   17060:	str	r1, [r0, #2952]	; 0xb88
   17064:	ldr	r0, [r5, #2948]	; 0xb84
   17068:	b	170ac <flatcc_emitter_copy_buffer@@Base+0x138>
   1706c:	movw	r0, #2956	; 0xb8c
   17070:	bl	1294c <malloc@plt>
   17074:	cmp	r0, #0
   17078:	mvneq	r0, #0
   1707c:	popeq	{r4, r5, fp, pc}
   17080:	ldr	r1, [r4, #28]
   17084:	add	r1, r1, #2944	; 0xb80
   17088:	str	r1, [r4, #28]
   1708c:	cmp	r5, #0
   17090:	beq	170dc <flatcc_emitter_copy_buffer@@Base+0x168>
   17094:	ldm	r4, {r1, r2}
   17098:	str	r1, [r0, #2944]	; 0xb80
   1709c:	str	r2, [r0, #2948]	; 0xb84
   170a0:	str	r0, [r1, #2948]	; 0xb84
   170a4:	ldr	r1, [r4, #4]
   170a8:	str	r0, [r1, #2944]	; 0xb80
   170ac:	str	r0, [r4]
   170b0:	mov	r0, #2944	; 0xb80
   170b4:	ldr	r1, [r4]
   170b8:	add	r2, r1, #2944	; 0xb80
   170bc:	str	r2, [r4, #8]
   170c0:	str	r0, [r4, #12]
   170c4:	ldr	r0, [r1, #2944]	; 0xb80
   170c8:	ldr	r0, [r0, #2952]	; 0xb88
   170cc:	sub	r0, r0, #2944	; 0xb80
   170d0:	str	r0, [r1, #2952]	; 0xb88
   170d4:	mov	r0, #0
   170d8:	pop	{r4, r5, fp, pc}
   170dc:	str	r0, [r4, #4]
   170e0:	str	r0, [r4]
   170e4:	mov	r1, #1472	; 0x5c0
   170e8:	str	r1, [r4, #12]
   170ec:	str	r1, [r4, #20]
   170f0:	ldr	r1, [r4]
   170f4:	add	r1, r1, #1472	; 0x5c0
   170f8:	str	r1, [r4, #8]
   170fc:	str	r1, [r4, #16]
   17100:	movw	r1, #64064	; 0xfa40
   17104:	movt	r1, #65535	; 0xffff
   17108:	str	r0, [r0, #2944]	; 0xb80
   1710c:	str	r0, [r0, #2948]	; 0xb84
   17110:	str	r1, [r0, #2952]	; 0xb88
   17114:	mov	r0, #0
   17118:	pop	{r4, r5, fp, pc}
   1711c:	push	{r4, r5, fp, lr}
   17120:	add	fp, sp, #8
   17124:	mov	r4, r0
   17128:	ldr	r5, [r0, #4]
   1712c:	cmp	r5, #0
   17130:	beq	17144 <flatcc_emitter_copy_buffer@@Base+0x1d0>
   17134:	ldr	r0, [r5, #2944]	; 0xb80
   17138:	ldr	r1, [r4]
   1713c:	cmp	r0, r1
   17140:	bne	17180 <flatcc_emitter_copy_buffer@@Base+0x20c>
   17144:	movw	r0, #2956	; 0xb8c
   17148:	bl	1294c <malloc@plt>
   1714c:	cmp	r0, #0
   17150:	mvneq	r0, #0
   17154:	popeq	{r4, r5, fp, pc}
   17158:	ldr	r1, [r4, #28]
   1715c:	add	r1, r1, #2944	; 0xb80
   17160:	str	r1, [r4, #28]
   17164:	cmp	r5, #0
   17168:	beq	171ac <flatcc_emitter_copy_buffer@@Base+0x238>
   1716c:	ldr	r1, [r4]
   17170:	str	r1, [r0, #2944]	; 0xb80
   17174:	str	r5, [r0, #2948]	; 0xb84
   17178:	str	r0, [r1, #2948]	; 0xb84
   1717c:	str	r0, [r5, #2944]	; 0xb80
   17180:	str	r0, [r4, #4]
   17184:	mov	r0, #2944	; 0xb80
   17188:	ldr	r1, [r4, #4]
   1718c:	str	r1, [r4, #16]
   17190:	str	r0, [r4, #20]
   17194:	ldr	r0, [r1, #2948]	; 0xb84
   17198:	ldr	r0, [r0, #2952]	; 0xb88
   1719c:	add	r0, r0, #2944	; 0xb80
   171a0:	str	r0, [r1, #2952]	; 0xb88
   171a4:	mov	r0, #0
   171a8:	pop	{r4, r5, fp, pc}
   171ac:	str	r0, [r4, #4]
   171b0:	str	r0, [r4]
   171b4:	mov	r1, #1472	; 0x5c0
   171b8:	str	r1, [r4, #12]
   171bc:	str	r1, [r4, #20]
   171c0:	ldr	r1, [r4]
   171c4:	add	r1, r1, #1472	; 0x5c0
   171c8:	str	r1, [r4, #8]
   171cc:	str	r1, [r4, #16]
   171d0:	movw	r1, #64064	; 0xfa40
   171d4:	movt	r1, #65535	; 0xffff
   171d8:	str	r0, [r0, #2944]	; 0xb80
   171dc:	str	r0, [r0, #2948]	; 0xb84
   171e0:	str	r1, [r0, #2952]	; 0xb88
   171e4:	mov	r0, #0
   171e8:	pop	{r4, r5, fp, pc}
   171ec:	andeq	r0, r0, r0

000171f0 <grisu3_diy_fp_encode_double@@Base>:
   171f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   171f4:	add	fp, sp, #28
   171f8:	sub	sp, sp, #68	; 0x44
   171fc:	mov	r9, r3
   17200:	mov	r7, r2
   17204:	mov	r2, r0
   17208:	mov	r6, #0
   1720c:	str	r6, [sp]
   17210:	str	r6, [sp, #4]
   17214:	add	r0, sp, #48	; 0x30
   17218:	mov	r3, r1
   1721c:	bl	1746c <grisu3_diy_fp_encode_double@@Base+0x27c>
   17220:	ldr	r0, [fp, #8]
   17224:	cmp	r0, #0
   17228:	movwne	r0, #4
   1722c:	ldr	r1, [sp, #48]	; 0x30
   17230:	str	r1, [sp, #28]
   17234:	ldr	sl, [sp, #52]	; 0x34
   17238:	ldr	r5, [sp, #56]	; 0x38
   1723c:	ldr	r8, [sp, #60]	; 0x3c
   17240:	rsb	r1, r5, #0
   17244:	lsl	r4, r0, r1
   17248:	str	r9, [sp, #24]
   1724c:	sub	r7, r7, r9
   17250:	add	r1, sp, #48	; 0x30
   17254:	mov	r0, r7
   17258:	bl	17510 <grisu3_diy_fp_encode_double@@Base+0x320>
   1725c:	cmp	r7, r0
   17260:	bne	1726c <grisu3_diy_fp_encode_double@@Base+0x7c>
   17264:	ldr	r2, [sp, #28]
   17268:	b	172d8 <grisu3_diy_fp_encode_double@@Base+0xe8>
   1726c:	mvn	r0, r0
   17270:	add	r7, r7, r0
   17274:	cmp	r7, #7
   17278:	bcs	1744c <grisu3_diy_fp_encode_double@@Base+0x25c>
   1727c:	stm	sp, {r5, r8}
   17280:	movw	r0, #49760	; 0xc260
   17284:	movt	r0, #1
   17288:	ldr	r1, [r0, r7, lsl #4]!
   1728c:	str	r1, [sp, #8]
   17290:	ldmib	r0, {r1, r2}
   17294:	ldr	r0, [r0, #12]
   17298:	str	r0, [sp, #20]
   1729c:	str	r2, [sp, #16]
   172a0:	str	r1, [sp, #12]
   172a4:	add	r0, sp, #32
   172a8:	ldr	r2, [sp, #28]
   172ac:	mov	r3, sl
   172b0:	bl	175f8 <grisu3_diy_fp_encode_double@@Base+0x408>
   172b4:	ldr	r0, [sp, #24]
   172b8:	add	r0, r0, r7
   172bc:	add	r0, r0, #1
   172c0:	cmp	r0, #19
   172c4:	addgt	r4, r4, #4
   172c8:	ldr	r2, [sp, #32]
   172cc:	ldr	sl, [sp, #36]	; 0x24
   172d0:	ldr	r5, [sp, #40]	; 0x28
   172d4:	ldr	r8, [sp, #44]	; 0x2c
   172d8:	add	r7, sp, #48	; 0x30
   172dc:	ldm	r7, {r0, r1, r7}
   172e0:	ldr	r3, [sp, #60]	; 0x3c
   172e4:	stm	sp, {r5, r8}
   172e8:	add	ip, sp, #8
   172ec:	stm	ip, {r0, r1, r7}
   172f0:	str	r3, [sp, #20]
   172f4:	add	r0, sp, #32
   172f8:	mov	r3, sl
   172fc:	bl	175f8 <grisu3_diy_fp_encode_double@@Base+0x408>
   17300:	add	r5, sp, #32
   17304:	ldm	r5, {r2, r3, r5}
   17308:	ldr	r0, [sp, #44]	; 0x2c
   1730c:	str	r5, [sp]
   17310:	str	r0, [sp, #4]
   17314:	add	r0, sp, #32
   17318:	bl	1746c <grisu3_diy_fp_encode_double@@Base+0x27c>
   1731c:	mov	r0, #9
   17320:	cmp	r4, #0
   17324:	movweq	r0, #8
   17328:	add	r0, r0, r4
   1732c:	ldr	r3, [sp, #32]
   17330:	ldr	r1, [sp, #36]	; 0x24
   17334:	ldr	r2, [sp, #40]	; 0x28
   17338:	sub	r7, r5, r2
   1733c:	lsl	r9, r0, r7
   17340:	movw	r0, #64461	; 0xfbcd
   17344:	movt	r0, #65535	; 0xffff
   17348:	cmp	r2, r0
   1734c:	bgt	173a4 <grisu3_diy_fp_encode_double@@Base+0x1b4>
   17350:	mov	r6, #64	; 0x40
   17354:	mvn	r7, #1136	; 0x470
   17358:	cmp	r2, r7
   1735c:	blt	17370 <grisu3_diy_fp_encode_double@@Base+0x180>
   17360:	add	r0, r0, #1
   17364:	sub	r6, r0, r2
   17368:	cmp	r6, #61	; 0x3d
   1736c:	blt	173a4 <grisu3_diy_fp_encode_double@@Base+0x1b4>
   17370:	sub	r0, r6, #62	; 0x3e
   17374:	mov	r7, #9
   17378:	add	r9, r7, r9, asr r0
   1737c:	lsr	r3, r3, r0
   17380:	rsb	r7, r6, #94	; 0x5e
   17384:	orr	r3, r3, r1, lsl r7
   17388:	sub	r7, r6, #94	; 0x5e
   1738c:	cmp	r7, #0
   17390:	lsrge	r3, r1, r7
   17394:	add	r2, r0, r2
   17398:	lsr	r1, r1, r0
   1739c:	movwge	r1, #0
   173a0:	mov	r6, #62	; 0x3e
   173a4:	ldr	r8, [fp, #12]
   173a8:	lsr	r0, r3, r6
   173ac:	rsb	r7, r6, #32
   173b0:	orr	r0, r0, r1, lsl r7
   173b4:	sub	r7, r6, #32
   173b8:	cmp	r7, #0
   173bc:	lsrge	r0, r1, r7
   173c0:	add	r2, r2, r6
   173c4:	lsr	r1, r1, r6
   173c8:	movwge	r1, #0
   173cc:	sub	r7, r6, #1
   173d0:	mov	r5, #1
   173d4:	lsl	r5, r5, r7
   173d8:	sub	r7, r6, #33	; 0x21
   173dc:	cmp	r7, #0
   173e0:	movwge	r5, #0
   173e4:	add	r7, r9, r5, lsl #3
   173e8:	lsl	sl, r5, #3
   173ec:	and	r3, r5, r3
   173f0:	lsl	r5, r3, #3
   173f4:	mov	r4, #0
   173f8:	cmp	r6, r7
   173fc:	blt	1741c <grisu3_diy_fp_encode_double@@Base+0x22c>
   17400:	adds	r0, r0, #1
   17404:	adc	r1, r1, #0
   17408:	tst	r1, #2097152	; 0x200000
   1740c:	beq	1741c <grisu3_diy_fp_encode_double@@Base+0x22c>
   17410:	lsrs	r1, r1, #1
   17414:	rrx	r0, r0
   17418:	add	r2, r2, #1
   1741c:	mov	r3, r4
   17420:	bl	1765c <grisu3_diy_fp_encode_double@@Base+0x46c>
   17424:	vstr	d0, [r8]
   17428:	cmp	r5, r7
   1742c:	mov	r0, #0
   17430:	movwge	r0, #1
   17434:	sub	r1, sl, r9
   17438:	cmp	r1, r5
   1743c:	movwge	r4, #1
   17440:	orr	r0, r0, r4
   17444:	sub	sp, fp, #28
   17448:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1744c:	movw	r0, #52428	; 0xcccc
   17450:	movt	r0, #1
   17454:	movw	r1, #52456	; 0xcce8
   17458:	movt	r1, #1
   1745c:	movw	r3, #52543	; 0xcd3f
   17460:	movt	r3, #1
   17464:	mov	r2, #185	; 0xb9
   17468:	bl	129c4 <__assert_fail@plt>
   1746c:	push	{r4, sl, fp, lr}
   17470:	add	fp, sp, #8
   17474:	orrs	r1, r2, r3
   17478:	beq	174f0 <grisu3_diy_fp_encode_double@@Base+0x300>
   1747c:	ldr	ip, [fp, #12]
   17480:	ldr	r1, [fp, #8]
   17484:	mov	r4, #0
   17488:	cmp	r4, r3, lsr #22
   1748c:	bne	174a8 <grisu3_diy_fp_encode_double@@Base+0x2b8>
   17490:	lsl	r3, r3, #10
   17494:	orr	r3, r3, r2, lsr #22
   17498:	sub	r1, r1, #10
   1749c:	lsl	r2, r2, #10
   174a0:	cmp	r3, #4194304	; 0x400000
   174a4:	bcc	17490 <grisu3_diy_fp_encode_double@@Base+0x2a0>
   174a8:	cmp	r3, #0
   174ac:	blt	174d8 <grisu3_diy_fp_encode_double@@Base+0x2e8>
   174b0:	mvn	lr, #0
   174b4:	lsl	r3, r3, #1
   174b8:	orr	r3, r3, r2, lsr #31
   174bc:	sub	r1, r1, #1
   174c0:	lsl	r4, r2, #1
   174c4:	subs	r2, lr, r2, lsl #1
   174c8:	sbcs	r2, lr, r3
   174cc:	mov	r2, r4
   174d0:	blt	174b4 <grisu3_diy_fp_encode_double@@Base+0x2c4>
   174d4:	b	174dc <grisu3_diy_fp_encode_double@@Base+0x2ec>
   174d8:	mov	r4, r2
   174dc:	str	r4, [r0]
   174e0:	str	r3, [r0, #4]
   174e4:	str	r1, [r0, #8]
   174e8:	str	ip, [r0, #12]
   174ec:	pop	{r4, sl, fp, pc}
   174f0:	movw	r0, #53803	; 0xd22b
   174f4:	movt	r0, #1
   174f8:	movw	r1, #53812	; 0xd234
   174fc:	movt	r1, #1
   17500:	movw	r3, #53898	; 0xd28a
   17504:	movt	r3, #1
   17508:	mov	r2, #260	; 0x104
   1750c:	bl	129c4 <__assert_fail@plt>
   17510:	push	{fp, lr}
   17514:	mov	fp, sp
   17518:	cmn	r0, #348	; 0x15c
   1751c:	blt	17598 <grisu3_diy_fp_encode_double@@Base+0x3a8>
   17520:	cmp	r0, #348	; 0x15c
   17524:	bge	175b8 <grisu3_diy_fp_encode_double@@Base+0x3c8>
   17528:	add	r2, r0, #348	; 0x15c
   1752c:	asr	r3, r2, #31
   17530:	add	r2, r2, r3, lsr #29
   17534:	mvn	r3, #15
   17538:	and	r2, r3, r2, lsl #1
   1753c:	movw	r3, #49872	; 0xc2d0
   17540:	movt	r3, #1
   17544:	ldr	r2, [r3, r2]!
   17548:	str	r2, [r1]
   1754c:	ldr	r2, [r3, #4]
   17550:	str	r2, [r1, #4]
   17554:	ldrsh	r2, [r3, #8]
   17558:	str	r2, [r1, #8]
   1755c:	ldrsh	r1, [r3, #10]
   17560:	cmp	r1, r0
   17564:	bgt	175d8 <grisu3_diy_fp_encode_double@@Base+0x3e8>
   17568:	add	r2, r1, #8
   1756c:	cmp	r2, r0
   17570:	movgt	r0, r1
   17574:	popgt	{fp, pc}
   17578:	movw	r0, #54101	; 0xd355
   1757c:	movt	r0, #1
   17580:	movw	r1, #52456	; 0xcce8
   17584:	movt	r1, #1
   17588:	movw	r3, #53986	; 0xd2e2
   1758c:	movt	r3, #1
   17590:	mov	r2, #89	; 0x59
   17594:	bl	129c4 <__assert_fail@plt>
   17598:	movw	r0, #53955	; 0xd2c3
   1759c:	movt	r0, #1
   175a0:	movw	r1, #52456	; 0xcce8
   175a4:	movt	r1, #1
   175a8:	movw	r3, #53986	; 0xd2e2
   175ac:	movt	r3, #1
   175b0:	mov	r2, #80	; 0x50
   175b4:	bl	129c4 <__assert_fail@plt>
   175b8:	movw	r0, #54043	; 0xd31b
   175bc:	movt	r0, #1
   175c0:	movw	r1, #52456	; 0xcce8
   175c4:	movt	r1, #1
   175c8:	movw	r3, #53986	; 0xd2e2
   175cc:	movt	r3, #1
   175d0:	mov	r2, #81	; 0x51
   175d4:	bl	129c4 <__assert_fail@plt>
   175d8:	movw	r0, #54086	; 0xd346
   175dc:	movt	r0, #1
   175e0:	movw	r1, #52456	; 0xcce8
   175e4:	movt	r1, #1
   175e8:	movw	r3, #53986	; 0xd2e2
   175ec:	movt	r3, #1
   175f0:	mov	r2, #88	; 0x58
   175f4:	bl	129c4 <__assert_fail@plt>
   175f8:	push	{r4, r5, fp, lr}
   175fc:	add	fp, sp, #8
   17600:	ldr	ip, [fp, #24]
   17604:	ldr	r1, [fp, #8]
   17608:	add	r1, r1, ip
   1760c:	add	r1, r1, #64	; 0x40
   17610:	str	r1, [r0, #8]
   17614:	ldr	ip, [fp, #16]
   17618:	umull	r1, lr, ip, r2
   1761c:	umull	ip, r1, ip, r3
   17620:	mov	r5, #0
   17624:	adds	lr, ip, lr
   17628:	adc	r5, r5, #0
   1762c:	ldr	ip, [fp, #20]
   17630:	umull	r2, r4, ip, r2
   17634:	adds	r2, lr, r2
   17638:	adc	r5, r5, #0
   1763c:	adds	r2, r2, #-2147483648	; 0x80000000
   17640:	adc	r2, r5, #0
   17644:	umaal	r1, r4, ip, r3
   17648:	adds	r1, r1, r2
   1764c:	str	r1, [r0]
   17650:	adc	r1, r4, #0
   17654:	str	r1, [r0, #4]
   17658:	pop	{r4, r5, fp, pc}
   1765c:	push	{r4, r5, fp, lr}
   17660:	add	fp, sp, #8
   17664:	cmp	r1, #2097152	; 0x200000
   17668:	bcc	1768c <grisu3_diy_fp_encode_double@@Base+0x49c>
   1766c:	mov	r5, #0
   17670:	lsrs	r3, r1, #1
   17674:	rrx	r0, r0
   17678:	add	r2, r2, #1
   1767c:	cmp	r5, r1, lsr #22
   17680:	mov	r1, r3
   17684:	bne	17670 <grisu3_diy_fp_encode_double@@Base+0x480>
   17688:	b	17690 <grisu3_diy_fp_encode_double@@Base+0x4a0>
   1768c:	mov	r3, r1
   17690:	movw	ip, #64462	; 0xfbce
   17694:	movt	ip, #65535	; 0xffff
   17698:	cmp	r2, ip
   1769c:	bge	176a8 <grisu3_diy_fp_encode_double@@Base+0x4b8>
   176a0:	vmov.i32	d0, #0	; 0x00000000
   176a4:	pop	{r4, r5, fp, pc}
   176a8:	and	r1, r3, #1048576	; 0x100000
   176ac:	mov	r5, #1
   176b0:	eor	lr, r5, r1, lsr #20
   176b4:	cmp	r2, ip
   176b8:	beq	176fc <grisu3_diy_fp_encode_double@@Base+0x50c>
   176bc:	cmp	r1, #0
   176c0:	bne	176fc <grisu3_diy_fp_encode_double@@Base+0x50c>
   176c4:	mov	r5, #1
   176c8:	lsl	r1, r3, #1
   176cc:	orr	r1, r1, r0, lsr #31
   176d0:	and	r3, r3, #524288	; 0x80000
   176d4:	eor	lr, r5, r3, lsr #19
   176d8:	lsl	r0, r0, #1
   176dc:	sub	r4, r2, #1
   176e0:	cmn	r2, #1072	; 0x430
   176e4:	blt	17704 <grisu3_diy_fp_encode_double@@Base+0x514>
   176e8:	cmp	r3, #0
   176ec:	mov	r3, r1
   176f0:	mov	r2, r4
   176f4:	beq	176c8 <grisu3_diy_fp_encode_double@@Base+0x4d8>
   176f8:	b	17704 <grisu3_diy_fp_encode_double@@Base+0x514>
   176fc:	mov	r4, r2
   17700:	mov	r1, r3
   17704:	cmp	r4, ip
   17708:	bne	1771c <grisu3_diy_fp_encode_double@@Base+0x52c>
   1770c:	mov	r2, #0
   17710:	cmp	lr, #0
   17714:	mov	r3, #0
   17718:	bne	1772c <grisu3_diy_fp_encode_double@@Base+0x53c>
   1771c:	movw	r2, #0
   17720:	movt	r2, #17200	; 0x4330
   17724:	add	r3, r2, r4, lsl #20
   17728:	mov	r2, #0
   1772c:	orr	r0, r2, r0
   17730:	bfc	r1, #20, #12
   17734:	orr	r1, r3, r1
   17738:	pop	{r4, r5, fp, lr}
   1773c:	b	19d48 <flatcc_json_parser_struct_as_root@@Base+0xb4>

00017740 <flatcc_json_parser_error_string@@Base>:
   17740:	cmp	r0, #34	; 0x22
   17744:	movwhi	r0, #53253	; 0xd005
   17748:	movthi	r0, #1
   1774c:	bxhi	lr
   17750:	movw	r1, #52288	; 0xcc40
   17754:	movt	r1, #1
   17758:	ldr	r0, [r1, r0, lsl #2]
   1775c:	bx	lr

00017760 <flatcc_json_parser_set_error@@Base>:
   17760:	mov	ip, r2
   17764:	ldr	r2, [r0, #24]
   17768:	cmp	r2, #0
   1776c:	beq	17778 <flatcc_json_parser_set_error@@Base+0x18>
   17770:	mov	r0, ip
   17774:	bx	lr
   17778:	str	r1, [r0, #36]	; 0x24
   1777c:	ldr	r2, [r0, #4]
   17780:	add	r1, r1, #1
   17784:	sub	r1, r1, r2
   17788:	str	r1, [r0, #20]
   1778c:	str	r3, [r0, #24]
   17790:	mov	r0, ip
   17794:	bx	lr

00017798 <flatcc_json_parser_string_part@@Base>:
   17798:	cmp	r1, r2
   1779c:	beq	177c4 <flatcc_json_parser_string_part@@Base+0x2c>
   177a0:	ldrb	r3, [r1]
   177a4:	cmp	r3, #32
   177a8:	bcc	177d4 <flatcc_json_parser_string_part@@Base+0x3c>
   177ac:	cmp	r3, #34	; 0x22
   177b0:	cmpne	r3, #92	; 0x5c
   177b4:	beq	177cc <flatcc_json_parser_string_part@@Base+0x34>
   177b8:	add	r1, r1, #1
   177bc:	cmp	r2, r1
   177c0:	bne	177a0 <flatcc_json_parser_string_part@@Base+0x8>
   177c4:	mov	r3, #20
   177c8:	b	17760 <flatcc_json_parser_set_error@@Base>
   177cc:	mov	r0, r1
   177d0:	bx	lr
   177d4:	mov	r3, #17
   177d8:	b	17760 <flatcc_json_parser_set_error@@Base>

000177dc <flatcc_json_parser_space_ext@@Base>:
   177dc:	cmp	r1, r2
   177e0:	beq	17814 <flatcc_json_parser_space_ext@@Base+0x38>
   177e4:	ldrb	r3, [r1]
   177e8:	cmp	r3, #32
   177ec:	bne	17814 <flatcc_json_parser_space_ext@@Base+0x38>
   177f0:	add	r1, r1, #1
   177f4:	cmp	r2, r1
   177f8:	bne	177e4 <flatcc_json_parser_space_ext@@Base+0x8>
   177fc:	b	17814 <flatcc_json_parser_space_ext@@Base+0x38>
   17800:	add	r1, r1, #1
   17804:	str	r1, [r0, #4]
   17808:	ldr	r3, [r0, #16]
   1780c:	add	r3, r3, #1
   17810:	str	r3, [r0, #16]
   17814:	cmp	r1, r2
   17818:	beq	178d0 <flatcc_json_parser_space_ext@@Base+0xf4>
   1781c:	ldrb	r3, [r1]
   17820:	cmp	r3, #32
   17824:	bhi	178d0 <flatcc_json_parser_space_ext@@Base+0xf4>
   17828:	sub	ip, r3, #9
   1782c:	cmp	ip, #23
   17830:	bhi	178d8 <flatcc_json_parser_space_ext@@Base+0xfc>
   17834:	add	r3, pc, #0
   17838:	ldr	pc, [r3, ip, lsl #2]
   1783c:	muleq	r1, ip, r8
   17840:	andeq	r7, r1, r0, lsl #16
   17844:	ldrdeq	r7, [r1], -r8
   17848:	ldrdeq	r7, [r1], -r8
   1784c:	andeq	r7, r1, ip, lsr #17
   17850:	ldrdeq	r7, [r1], -r8
   17854:	ldrdeq	r7, [r1], -r8
   17858:	ldrdeq	r7, [r1], -r8
   1785c:	ldrdeq	r7, [r1], -r8
   17860:	ldrdeq	r7, [r1], -r8
   17864:	ldrdeq	r7, [r1], -r8
   17868:	ldrdeq	r7, [r1], -r8
   1786c:	ldrdeq	r7, [r1], -r8
   17870:	ldrdeq	r7, [r1], -r8
   17874:	ldrdeq	r7, [r1], -r8
   17878:	ldrdeq	r7, [r1], -r8
   1787c:	ldrdeq	r7, [r1], -r8
   17880:	ldrdeq	r7, [r1], -r8
   17884:	ldrdeq	r7, [r1], -r8
   17888:	ldrdeq	r7, [r1], -r8
   1788c:	ldrdeq	r7, [r1], -r8
   17890:	ldrdeq	r7, [r1], -r8
   17894:	ldrdeq	r7, [r1], -r8
   17898:	ldrdeq	r7, [r1], -ip
   1789c:	add	r1, r1, #1
   178a0:	cmp	r1, r2
   178a4:	bne	1781c <flatcc_json_parser_space_ext@@Base+0x40>
   178a8:	b	178d0 <flatcc_json_parser_space_ext@@Base+0xf4>
   178ac:	sub	r3, r2, r1
   178b0:	mov	ip, #0
   178b4:	cmp	r3, #2
   178b8:	ldrbge	r3, [r1, #1]
   178bc:	subge	r3, r3, #10
   178c0:	clzge	r3, r3
   178c4:	lsrge	ip, r3, #5
   178c8:	add	r1, r1, ip
   178cc:	b	17800 <flatcc_json_parser_space_ext@@Base+0x24>
   178d0:	mov	r0, r1
   178d4:	bx	lr
   178d8:	mov	r3, #5
   178dc:	b	17760 <flatcc_json_parser_set_error@@Base>

000178e0 <flatcc_json_parser_string_escape@@Base>:
   178e0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   178e4:	add	fp, sp, #24
   178e8:	sub	r7, r2, r1
   178ec:	cmp	r7, #2
   178f0:	blt	17af0 <flatcc_json_parser_string_escape@@Base+0x210>
   178f4:	ldrb	r6, [r1]
   178f8:	cmp	r6, #92	; 0x5c
   178fc:	bne	17af0 <flatcc_json_parser_string_escape@@Base+0x210>
   17900:	ldrb	r6, [r1, #1]
   17904:	sub	r6, r6, #34	; 0x22
   17908:	cmp	r6, #86	; 0x56
   1790c:	bhi	17af0 <flatcc_json_parser_string_escape@@Base+0x210>
   17910:	add	r5, pc, #0
   17914:	ldr	pc, [r5, r6, lsl #2]
   17918:	andeq	r7, r1, r4, ror sl
   1791c:	strdeq	r7, [r1], -r0
   17920:	strdeq	r7, [r1], -r0
   17924:	strdeq	r7, [r1], -r0
   17928:	strdeq	r7, [r1], -r0
   1792c:	strdeq	r7, [r1], -r0
   17930:	strdeq	r7, [r1], -r0
   17934:	strdeq	r7, [r1], -r0
   17938:	strdeq	r7, [r1], -r0
   1793c:	strdeq	r7, [r1], -r0
   17940:	strdeq	r7, [r1], -r0
   17944:	strdeq	r7, [r1], -r0
   17948:	strdeq	r7, [r1], -r0
   1794c:	andeq	r7, r1, ip, ror sl
   17950:	strdeq	r7, [r1], -r0
   17954:	strdeq	r7, [r1], -r0
   17958:	strdeq	r7, [r1], -r0
   1795c:	strdeq	r7, [r1], -r0
   17960:	strdeq	r7, [r1], -r0
   17964:	strdeq	r7, [r1], -r0
   17968:	strdeq	r7, [r1], -r0
   1796c:	strdeq	r7, [r1], -r0
   17970:	strdeq	r7, [r1], -r0
   17974:	strdeq	r7, [r1], -r0
   17978:	strdeq	r7, [r1], -r0
   1797c:	strdeq	r7, [r1], -r0
   17980:	strdeq	r7, [r1], -r0
   17984:	strdeq	r7, [r1], -r0
   17988:	strdeq	r7, [r1], -r0
   1798c:	strdeq	r7, [r1], -r0
   17990:	strdeq	r7, [r1], -r0
   17994:	strdeq	r7, [r1], -r0
   17998:	strdeq	r7, [r1], -r0
   1799c:	strdeq	r7, [r1], -r0
   179a0:	strdeq	r7, [r1], -r0
   179a4:	strdeq	r7, [r1], -r0
   179a8:	strdeq	r7, [r1], -r0
   179ac:	strdeq	r7, [r1], -r0
   179b0:	strdeq	r7, [r1], -r0
   179b4:	strdeq	r7, [r1], -r0
   179b8:	strdeq	r7, [r1], -r0
   179bc:	strdeq	r7, [r1], -r0
   179c0:	strdeq	r7, [r1], -r0
   179c4:	strdeq	r7, [r1], -r0
   179c8:	strdeq	r7, [r1], -r0
   179cc:	strdeq	r7, [r1], -r0
   179d0:	strdeq	r7, [r1], -r0
   179d4:	strdeq	r7, [r1], -r0
   179d8:	strdeq	r7, [r1], -r0
   179dc:	strdeq	r7, [r1], -r0
   179e0:	strdeq	r7, [r1], -r0
   179e4:	strdeq	r7, [r1], -r0
   179e8:	strdeq	r7, [r1], -r0
   179ec:	strdeq	r7, [r1], -r0
   179f0:	strdeq	r7, [r1], -r0
   179f4:	strdeq	r7, [r1], -r0
   179f8:	strdeq	r7, [r1], -r0
   179fc:	strdeq	r7, [r1], -r0
   17a00:	andeq	r7, r1, r4, lsl #21
   17a04:	strdeq	r7, [r1], -r0
   17a08:	strdeq	r7, [r1], -r0
   17a0c:	strdeq	r7, [r1], -r0
   17a10:	strdeq	r7, [r1], -r0
   17a14:	strdeq	r7, [r1], -r0
   17a18:	andeq	r7, r1, ip, lsl #21
   17a1c:	strdeq	r7, [r1], -r0
   17a20:	strdeq	r7, [r1], -r0
   17a24:	strdeq	r7, [r1], -r0
   17a28:	muleq	r1, r4, sl
   17a2c:	strdeq	r7, [r1], -r0
   17a30:	strdeq	r7, [r1], -r0
   17a34:	strdeq	r7, [r1], -r0
   17a38:	strdeq	r7, [r1], -r0
   17a3c:	strdeq	r7, [r1], -r0
   17a40:	strdeq	r7, [r1], -r0
   17a44:	strdeq	r7, [r1], -r0
   17a48:	muleq	r1, ip, sl
   17a4c:	strdeq	r7, [r1], -r0
   17a50:	strdeq	r7, [r1], -r0
   17a54:	strdeq	r7, [r1], -r0
   17a58:	andeq	r7, r1, r4, lsr #21
   17a5c:	strdeq	r7, [r1], -r0
   17a60:	andeq	r7, r1, ip, lsr #21
   17a64:			; <UNDEFINED> instruction: 0x00017abc
   17a68:	strdeq	r7, [r1], -r0
   17a6c:	strdeq	r7, [r1], -r0
   17a70:	andeq	r7, r1, r0, ror #21
   17a74:	movw	r0, #8705	; 0x2201
   17a78:	b	17ab0 <flatcc_json_parser_string_escape@@Base+0x1d0>
   17a7c:	movw	r0, #12033	; 0x2f01
   17a80:	b	17ab0 <flatcc_json_parser_string_escape@@Base+0x1d0>
   17a84:	movw	r0, #23553	; 0x5c01
   17a88:	b	17ab0 <flatcc_json_parser_string_escape@@Base+0x1d0>
   17a8c:	movw	r0, #2049	; 0x801
   17a90:	b	17ab0 <flatcc_json_parser_string_escape@@Base+0x1d0>
   17a94:	movw	r0, #3073	; 0xc01
   17a98:	b	17ab0 <flatcc_json_parser_string_escape@@Base+0x1d0>
   17a9c:	movw	r0, #2561	; 0xa01
   17aa0:	b	17ab0 <flatcc_json_parser_string_escape@@Base+0x1d0>
   17aa4:	movw	r0, #3329	; 0xd01
   17aa8:	b	17ab0 <flatcc_json_parser_string_escape@@Base+0x1d0>
   17aac:	movw	r0, #2305	; 0x901
   17ab0:	strh	r0, [r3]
   17ab4:	add	r0, r1, #2
   17ab8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17abc:	cmp	r7, #5
   17ac0:	ble	17af0 <flatcc_json_parser_string_escape@@Base+0x210>
   17ac4:	ldrb	r7, [r1, #2]
   17ac8:	sub	r6, r7, #48	; 0x30
   17acc:	uxtb	r6, r6
   17ad0:	cmp	r6, #9
   17ad4:	bhi	17b20 <flatcc_json_parser_string_escape@@Base+0x240>
   17ad8:	lsl	ip, r7, #12
   17adc:	b	17b40 <flatcc_json_parser_string_escape@@Base+0x260>
   17ae0:	mov	r6, #1
   17ae4:	strb	r6, [r3]
   17ae8:	cmp	r7, #3
   17aec:	bgt	17b04 <flatcc_json_parser_string_escape@@Base+0x224>
   17af0:	mov	r7, #0
   17af4:	strb	r7, [r3]
   17af8:	mov	r3, #18
   17afc:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   17b00:	b	17760 <flatcc_json_parser_set_error@@Base>
   17b04:	ldrb	r7, [r1, #2]
   17b08:	sub	r6, r7, #48	; 0x30
   17b0c:	uxtb	r6, r6
   17b10:	cmp	r6, #9
   17b14:	bhi	17b5c <flatcc_json_parser_string_escape@@Base+0x27c>
   17b18:	lsl	r6, r7, #4
   17b1c:	b	17b78 <flatcc_json_parser_string_escape@@Base+0x298>
   17b20:	orr	r6, r7, #32
   17b24:	sub	r6, r6, #97	; 0x61
   17b28:	uxtb	r6, r6
   17b2c:	cmp	r6, #5
   17b30:	bhi	17af0 <flatcc_json_parser_string_escape@@Base+0x210>
   17b34:	movw	r6, #36864	; 0x9000
   17b38:	movt	r6, #65535	; 0xffff
   17b3c:	add	ip, r6, r7, lsl #12
   17b40:	ldrb	lr, [r1, #3]
   17b44:	sub	r4, lr, #48	; 0x30
   17b48:	uxtb	r4, r4
   17b4c:	cmp	r4, #10
   17b50:	bcs	17bb4 <flatcc_json_parser_string_escape@@Base+0x2d4>
   17b54:	mov	r8, #53248	; 0xd000
   17b58:	b	17bcc <flatcc_json_parser_string_escape@@Base+0x2ec>
   17b5c:	orr	r6, r7, #32
   17b60:	sub	r6, r6, #97	; 0x61
   17b64:	uxtb	r6, r6
   17b68:	cmp	r6, #5
   17b6c:	bhi	17af0 <flatcc_json_parser_string_escape@@Base+0x210>
   17b70:	mvn	r6, #111	; 0x6f
   17b74:	add	r6, r6, r7, lsl #4
   17b78:	ldrb	r5, [r1, #3]
   17b7c:	sub	r7, r5, #48	; 0x30
   17b80:	uxtb	r4, r7
   17b84:	cmp	r4, #9
   17b88:	bls	17ba4 <flatcc_json_parser_string_escape@@Base+0x2c4>
   17b8c:	orr	r7, r5, #32
   17b90:	sub	r5, r7, #97	; 0x61
   17b94:	uxtb	r5, r5
   17b98:	cmp	r5, #5
   17b9c:	bhi	17af0 <flatcc_json_parser_string_escape@@Base+0x210>
   17ba0:	sub	r7, r7, #87	; 0x57
   17ba4:	orr	r0, r7, r6
   17ba8:	strb	r0, [r3, #1]
   17bac:	add	r0, r1, #4
   17bb0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17bb4:	orr	lr, lr, #32
   17bb8:	sub	r4, lr, #97	; 0x61
   17bbc:	uxtb	r4, r4
   17bc0:	mov	r8, #43264	; 0xa900
   17bc4:	cmp	r4, #6
   17bc8:	bcs	17af0 <flatcc_json_parser_string_escape@@Base+0x210>
   17bcc:	ldrb	r5, [r1, #4]
   17bd0:	sub	r4, r5, #48	; 0x30
   17bd4:	uxtb	r4, r4
   17bd8:	cmp	r4, #10
   17bdc:	bcs	17be8 <flatcc_json_parser_string_escape@@Base+0x308>
   17be0:	mov	r9, #64768	; 0xfd00
   17be4:	b	17c00 <flatcc_json_parser_string_escape@@Base+0x320>
   17be8:	orr	r5, r5, #32
   17bec:	sub	r4, r5, #97	; 0x61
   17bf0:	uxtb	r4, r4
   17bf4:	movw	r9, #64144	; 0xfa90
   17bf8:	cmp	r4, #6
   17bfc:	bcs	17af0 <flatcc_json_parser_string_escape@@Base+0x210>
   17c00:	ldrb	r7, [r1, #5]
   17c04:	sub	r4, r7, #48	; 0x30
   17c08:	uxtb	r4, r4
   17c0c:	cmp	r4, #10
   17c10:	bcs	17c20 <flatcc_json_parser_string_escape@@Base+0x340>
   17c14:	mvn	r0, #86	; 0x56
   17c18:	add	r4, r0, #39	; 0x27
   17c1c:	b	17c38 <flatcc_json_parser_string_escape@@Base+0x358>
   17c20:	movw	r4, #65449	; 0xffa9
   17c24:	orr	r7, r7, #32
   17c28:	sub	r6, r7, #97	; 0x61
   17c2c:	uxtb	r6, r6
   17c30:	cmp	r6, #6
   17c34:	bcs	17af0 <flatcc_json_parser_string_escape@@Base+0x210>
   17c38:	add	r0, r8, lr, lsl #8
   17c3c:	orr	r0, r0, ip
   17c40:	add	r2, r9, r5, lsl #4
   17c44:	orr	r0, r0, r2
   17c48:	add	r2, r4, r7
   17c4c:	orr	r0, r0, r2
   17c50:	uxth	r7, r0
   17c54:	cmp	r7, #127	; 0x7f
   17c58:	bhi	17c68 <flatcc_json_parser_string_escape@@Base+0x388>
   17c5c:	mov	r2, #1
   17c60:	strb	r2, [r3]
   17c64:	b	17cbc <flatcc_json_parser_string_escape@@Base+0x3dc>
   17c68:	and	r2, r0, #63488	; 0xf800
   17c6c:	mov	r6, #0
   17c70:	cmp	r6, r2, lsr #11
   17c74:	bne	17c90 <flatcc_json_parser_string_escape@@Base+0x3b0>
   17c78:	mov	r2, #2
   17c7c:	strb	r2, [r3]
   17c80:	mov	r7, #192	; 0xc0
   17c84:	orr	r7, r7, r0, lsr #6
   17c88:	strb	r7, [r3, #1]
   17c8c:	b	17cb4 <flatcc_json_parser_string_escape@@Base+0x3d4>
   17c90:	mov	r2, #3
   17c94:	strb	r2, [r3]
   17c98:	mov	r6, #224	; 0xe0
   17c9c:	orr	r6, r6, r7, lsr #12
   17ca0:	strb	r6, [r3, #1]
   17ca4:	lsr	r7, r7, #6
   17ca8:	mov	r6, #2
   17cac:	bfi	r7, r6, #6, #26
   17cb0:	strb	r7, [r3, #2]
   17cb4:	mvn	r7, #-67108863	; 0xfc000001
   17cb8:	bfi	r0, r7, #6, #26
   17cbc:	strb	r0, [r3, r2]
   17cc0:	add	r0, r1, #6
   17cc4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

00017cc8 <flatcc_json_parser_skip_constant@@Base>:
   17cc8:	push	{r4, r5, r6, sl, fp, lr}
   17ccc:	add	fp, sp, #16
   17cd0:	mov	r4, r1
   17cd4:	cmp	r1, r2
   17cd8:	beq	17d4c <flatcc_json_parser_skip_constant@@Base+0x84>
   17cdc:	mov	r5, r2
   17ce0:	mov	r6, r0
   17ce4:	ldrsb	r0, [r4]
   17ce8:	cmp	r0, #0
   17cec:	blt	17cfc <flatcc_json_parser_skip_constant@@Base+0x34>
   17cf0:	cmp	r0, #95	; 0x5f
   17cf4:	cmpne	r0, #46	; 0x2e
   17cf8:	bne	17d0c <flatcc_json_parser_skip_constant@@Base+0x44>
   17cfc:	add	r4, r4, #1
   17d00:	cmp	r4, r5
   17d04:	bne	17ce4 <flatcc_json_parser_skip_constant@@Base+0x1c>
   17d08:	b	17d4c <flatcc_json_parser_skip_constant@@Base+0x84>
   17d0c:	sub	r1, r0, #48	; 0x30
   17d10:	uxtb	r1, r1
   17d14:	cmp	r1, #9
   17d18:	bls	17cfc <flatcc_json_parser_skip_constant@@Base+0x34>
   17d1c:	orr	r0, r0, #32
   17d20:	sub	r0, r0, #97	; 0x61
   17d24:	uxtb	r0, r0
   17d28:	cmp	r0, #25
   17d2c:	bls	17cfc <flatcc_json_parser_skip_constant@@Base+0x34>
   17d30:	mov	r0, r6
   17d34:	mov	r1, r4
   17d38:	mov	r2, r5
   17d3c:	bl	17d54 <flatcc_json_parser_skip_constant@@Base+0x8c>
   17d40:	cmp	r0, r4
   17d44:	mov	r4, r0
   17d48:	bne	17d00 <flatcc_json_parser_skip_constant@@Base+0x38>
   17d4c:	mov	r0, r4
   17d50:	pop	{r4, r5, r6, sl, fp, pc}
   17d54:	sub	r3, r2, r1
   17d58:	cmp	r3, #2
   17d5c:	blt	17d88 <flatcc_json_parser_skip_constant@@Base+0xc0>
   17d60:	ldrb	r3, [r1]
   17d64:	cmp	r3, #32
   17d68:	movhi	r0, r1
   17d6c:	bxhi	lr
   17d70:	bne	17d88 <flatcc_json_parser_skip_constant@@Base+0xc0>
   17d74:	mov	ip, r1
   17d78:	ldrb	r3, [ip, #1]!
   17d7c:	cmp	r3, #32
   17d80:	movhi	r0, ip
   17d84:	bxhi	lr
   17d88:	b	177dc <flatcc_json_parser_space_ext@@Base>

00017d8c <flatcc_json_parser_match_constant@@Base>:
   17d8c:	push	{r4, r5, r6, r7, fp, lr}
   17d90:	add	fp, sp, #16
   17d94:	mov	r5, r2
   17d98:	mov	r4, r1
   17d9c:	mov	r2, r0
   17da0:	sub	r0, r5, r1
   17da4:	ldr	r7, [fp, #8]
   17da8:	cmp	r0, r3
   17dac:	ble	17e8c <flatcc_json_parser_match_constant@@Base+0x100>
   17db0:	add	r6, r4, r3
   17db4:	ldr	r0, [r2, #12]
   17db8:	cmp	r0, #0
   17dbc:	beq	17e24 <flatcc_json_parser_match_constant@@Base+0x98>
   17dc0:	mov	r0, r2
   17dc4:	mov	r1, r6
   17dc8:	mov	r2, r5
   17dcc:	bl	17d54 <flatcc_json_parser_skip_constant@@Base+0x8c>
   17dd0:	cmp	r0, r5
   17dd4:	beq	17e9c <flatcc_json_parser_match_constant@@Base+0x110>
   17dd8:	cmp	r0, r6
   17ddc:	beq	17e08 <flatcc_json_parser_match_constant@@Base+0x7c>
   17de0:	ldrsb	r1, [r0]
   17de4:	cmp	r1, #95	; 0x5f
   17de8:	beq	17ea8 <flatcc_json_parser_match_constant@@Base+0x11c>
   17dec:	cmn	r1, #1
   17df0:	ble	17ea8 <flatcc_json_parser_match_constant@@Base+0x11c>
   17df4:	orr	r1, r1, #32
   17df8:	sub	r1, r1, #97	; 0x61
   17dfc:	uxtb	r1, r1
   17e00:	cmp	r1, #25
   17e04:	bls	17ea8 <flatcc_json_parser_match_constant@@Base+0x11c>
   17e08:	mov	r1, #0
   17e0c:	str	r1, [r7]
   17e10:	ldrb	r1, [r0]
   17e14:	cmp	r1, #44	; 0x2c
   17e18:	cmpne	r1, #93	; 0x5d
   17e1c:	bne	17ed4 <flatcc_json_parser_match_constant@@Base+0x148>
   17e20:	pop	{r4, r5, r6, r7, fp, pc}
   17e24:	ldrb	r0, [r6]
   17e28:	cmp	r0, #92	; 0x5c
   17e2c:	beq	17eb4 <flatcc_json_parser_match_constant@@Base+0x128>
   17e30:	cmp	r0, #34	; 0x22
   17e34:	beq	17e70 <flatcc_json_parser_match_constant@@Base+0xe4>
   17e38:	cmp	r0, #32
   17e3c:	bne	17e8c <flatcc_json_parser_match_constant@@Base+0x100>
   17e40:	add	r0, r4, r3
   17e44:	add	r6, r0, #1
   17e48:	mov	r0, r6
   17e4c:	cmp	r5, r6
   17e50:	beq	17e9c <flatcc_json_parser_match_constant@@Base+0x110>
   17e54:	mov	r6, r0
   17e58:	ldrb	r1, [r6], #1
   17e5c:	cmp	r1, #32
   17e60:	beq	17e48 <flatcc_json_parser_match_constant@@Base+0xbc>
   17e64:	ldrb	r1, [r6, #-1]!
   17e68:	cmp	r1, #34	; 0x22
   17e6c:	bne	17ea8 <flatcc_json_parser_match_constant@@Base+0x11c>
   17e70:	add	r1, r6, #1
   17e74:	mov	r4, #0
   17e78:	mov	r0, r2
   17e7c:	mov	r2, #0
   17e80:	bl	17d54 <flatcc_json_parser_skip_constant@@Base+0x8c>
   17e84:	str	r4, [r7]
   17e88:	pop	{r4, r5, r6, r7, fp, pc}
   17e8c:	mov	r0, #0
   17e90:	str	r0, [r7]
   17e94:	mov	r0, r4
   17e98:	pop	{r4, r5, r6, r7, fp, pc}
   17e9c:	mov	r1, #0
   17ea0:	str	r1, [r7]
   17ea4:	pop	{r4, r5, r6, r7, fp, pc}
   17ea8:	mov	r1, #1
   17eac:	str	r1, [r7]
   17eb0:	pop	{r4, r5, r6, r7, fp, pc}
   17eb4:	mov	r0, #0
   17eb8:	str	r0, [r7]
   17ebc:	mov	r0, r2
   17ec0:	mov	r1, r6
   17ec4:	mov	r2, r5
   17ec8:	mov	r3, #18
   17ecc:	pop	{r4, r5, r6, r7, fp, lr}
   17ed0:	b	17760 <flatcc_json_parser_set_error@@Base>
   17ed4:	cmp	r1, #125	; 0x7d
   17ed8:	movne	r0, r4
   17edc:	pop	{r4, r5, r6, r7, fp, pc}

00017ee0 <flatcc_json_parser_unmatched_symbol@@Base>:
   17ee0:	push	{r4, r5, fp, lr}
   17ee4:	add	fp, sp, #8
   17ee8:	mov	r4, r2
   17eec:	mov	r5, r0
   17ef0:	ldrb	r0, [r0, #8]
   17ef4:	tst	r0, #1
   17ef8:	bne	17f10 <flatcc_json_parser_unmatched_symbol@@Base+0x30>
   17efc:	mov	r0, r5
   17f00:	mov	r2, r4
   17f04:	mov	r3, #13
   17f08:	pop	{r4, r5, fp, lr}
   17f0c:	b	17760 <flatcc_json_parser_set_error@@Base>
   17f10:	mov	r0, r5
   17f14:	mov	r2, r4
   17f18:	bl	17f7c <flatcc_json_parser_unmatched_symbol@@Base+0x9c>
   17f1c:	mov	r1, r0
   17f20:	mov	r0, r5
   17f24:	mov	r2, r4
   17f28:	bl	17d54 <flatcc_json_parser_skip_constant@@Base+0x8c>
   17f2c:	mov	r1, r0
   17f30:	cmp	r0, r4
   17f34:	beq	17f68 <flatcc_json_parser_unmatched_symbol@@Base+0x88>
   17f38:	ldrb	r0, [r1]
   17f3c:	cmp	r0, #58	; 0x3a
   17f40:	bne	17f68 <flatcc_json_parser_unmatched_symbol@@Base+0x88>
   17f44:	add	r1, r1, #1
   17f48:	mov	r0, r5
   17f4c:	mov	r2, r4
   17f50:	bl	17d54 <flatcc_json_parser_skip_constant@@Base+0x8c>
   17f54:	mov	r1, r0
   17f58:	mov	r0, r5
   17f5c:	mov	r2, r4
   17f60:	pop	{r4, r5, fp, lr}
   17f64:	b	18084 <flatcc_json_parser_generic_json@@Base>
   17f68:	mov	r0, r5
   17f6c:	mov	r2, r4
   17f70:	mov	r3, #4
   17f74:	pop	{r4, r5, fp, lr}
   17f78:	b	17760 <flatcc_json_parser_set_error@@Base>
   17f7c:	ldr	r3, [r0, #12]
   17f80:	cmp	r3, #0
   17f84:	beq	18030 <flatcc_json_parser_unmatched_symbol@@Base+0x150>
   17f88:	cmp	r1, r2
   17f8c:	beq	18074 <flatcc_json_parser_unmatched_symbol@@Base+0x194>
   17f90:	push	{fp, lr}
   17f94:	mov	fp, sp
   17f98:	ldrb	lr, [r1]
   17f9c:	mov	ip, #0
   17fa0:	cmp	lr, #33	; 0x21
   17fa4:	bcc	18014 <flatcc_json_parser_unmatched_symbol@@Base+0x134>
   17fa8:	add	r3, r1, #1
   17fac:	mov	ip, lr
   17fb0:	mov	r1, r3
   17fb4:	uxtb	r3, lr
   17fb8:	cmp	r3, #46	; 0x2e
   17fbc:	cmpne	r3, #95	; 0x5f
   17fc0:	bne	17fe0 <flatcc_json_parser_unmatched_symbol@@Base+0x100>
   17fc4:	cmp	r2, r1
   17fc8:	beq	18014 <flatcc_json_parser_unmatched_symbol@@Base+0x134>
   17fcc:	mov	r3, r1
   17fd0:	ldrb	lr, [r3], #1
   17fd4:	cmp	lr, #33	; 0x21
   17fd8:	bcs	17fac <flatcc_json_parser_unmatched_symbol@@Base+0xcc>
   17fdc:	b	18014 <flatcc_json_parser_unmatched_symbol@@Base+0x134>
   17fe0:	sxtb	r3, ip
   17fe4:	cmp	r3, #0
   17fe8:	blt	17fc4 <flatcc_json_parser_unmatched_symbol@@Base+0xe4>
   17fec:	sub	r3, ip, #48	; 0x30
   17ff0:	uxtb	r3, r3
   17ff4:	cmp	r3, #9
   17ff8:	bls	17fc4 <flatcc_json_parser_unmatched_symbol@@Base+0xe4>
   17ffc:	orr	r3, ip, #32
   18000:	sub	r3, r3, #97	; 0x61
   18004:	uxtb	r3, r3
   18008:	cmp	r3, #26
   1800c:	bcc	17fc4 <flatcc_json_parser_unmatched_symbol@@Base+0xe4>
   18010:	sub	r1, r1, #1
   18014:	uxtb	r3, ip
   18018:	cmp	r3, #46	; 0x2e
   1801c:	pop	{fp, lr}
   18020:	bne	18074 <flatcc_json_parser_unmatched_symbol@@Base+0x194>
   18024:	mov	r3, #5
   18028:	b	17760 <flatcc_json_parser_set_error@@Base>
   1802c:	add	r1, r1, #1
   18030:	cmp	r1, r2
   18034:	beq	1807c <flatcc_json_parser_unmatched_symbol@@Base+0x19c>
   18038:	ldrb	r3, [r1]
   1803c:	cmp	r3, #92	; 0x5c
   18040:	beq	18050 <flatcc_json_parser_unmatched_symbol@@Base+0x170>
   18044:	cmp	r3, #34	; 0x22
   18048:	bne	1802c <flatcc_json_parser_unmatched_symbol@@Base+0x14c>
   1804c:	b	18070 <flatcc_json_parser_unmatched_symbol@@Base+0x190>
   18050:	sub	r3, r2, r1
   18054:	cmp	r3, #2
   18058:	blt	18064 <flatcc_json_parser_unmatched_symbol@@Base+0x184>
   1805c:	add	r1, r1, #1
   18060:	b	1802c <flatcc_json_parser_unmatched_symbol@@Base+0x14c>
   18064:	ldrb	r3, [r1]
   18068:	cmp	r3, #34	; 0x22
   1806c:	bne	1807c <flatcc_json_parser_unmatched_symbol@@Base+0x19c>
   18070:	add	r1, r1, #1
   18074:	mov	r0, r1
   18078:	bx	lr
   1807c:	mov	r3, #20
   18080:	b	17760 <flatcc_json_parser_set_error@@Base>

00018084 <flatcc_json_parser_generic_json@@Base>:
   18084:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18088:	add	fp, sp, #28
   1808c:	sub	sp, sp, #524	; 0x20c
   18090:	mov	r7, r1
   18094:	mov	r6, #0
   18098:	str	r6, [sp]
   1809c:	cmp	r1, r2
   180a0:	beq	18348 <flatcc_json_parser_generic_json@@Base+0x2c4>
   180a4:	mov	r4, r2
   180a8:	mov	r5, r0
   180ac:	add	sl, sp, #8
   180b0:	sub	r8, sl, #1
   180b4:	mov	r9, sp
   180b8:	mov	r0, sl
   180bc:	cmp	r6, #0
   180c0:	beq	1812c <flatcc_json_parser_generic_json@@Base+0xa8>
   180c4:	ldrb	r0, [r0, #-1]
   180c8:	cmp	r0, #125	; 0x7d
   180cc:	bne	1812c <flatcc_json_parser_generic_json@@Base+0xa8>
   180d0:	mov	r0, r5
   180d4:	mov	r1, r7
   180d8:	mov	r2, r4
   180dc:	bl	185b0 <flatcc_json_parser_float@@Base+0x140>
   180e0:	mov	r1, r0
   180e4:	mov	r0, r5
   180e8:	mov	r2, r4
   180ec:	bl	17f7c <flatcc_json_parser_unmatched_symbol@@Base+0x9c>
   180f0:	mov	r1, r0
   180f4:	mov	r0, r5
   180f8:	mov	r2, r4
   180fc:	bl	17d54 <flatcc_json_parser_skip_constant@@Base+0x8c>
   18100:	mov	r1, r0
   18104:	cmp	r0, r4
   18108:	beq	18354 <flatcc_json_parser_generic_json@@Base+0x2d0>
   1810c:	ldrb	r0, [r1]
   18110:	cmp	r0, #58	; 0x3a
   18114:	bne	18364 <flatcc_json_parser_generic_json@@Base+0x2e0>
   18118:	add	r1, r1, #1
   1811c:	mov	r0, r5
   18120:	mov	r2, r4
   18124:	bl	17d54 <flatcc_json_parser_skip_constant@@Base+0x8c>
   18128:	mov	r7, r0
   1812c:	ldrb	r0, [r7]
   18130:	sub	r1, r0, #48	; 0x30
   18134:	cmp	r1, #10
   18138:	bcs	181b0 <flatcc_json_parser_generic_json@@Base+0x12c>
   1813c:	mov	r0, r5
   18140:	mov	r1, r7
   18144:	mov	r2, r4
   18148:	bl	18638 <flatcc_json_parser_float@@Base+0x1c8>
   1814c:	mov	r7, r0
   18150:	cmp	r6, #0
   18154:	cmpne	r7, r4
   18158:	beq	1830c <flatcc_json_parser_generic_json@@Base+0x288>
   1815c:	ldrb	r0, [r8, r6]
   18160:	cmp	r0, #93	; 0x5d
   18164:	bne	18180 <flatcc_json_parser_generic_json@@Base+0xfc>
   18168:	mov	r0, r5
   1816c:	mov	r1, r7
   18170:	mov	r2, r4
   18174:	mov	r3, r9
   18178:	bl	1889c <flatcc_json_parser_float@@Base+0x42c>
   1817c:	b	18194 <flatcc_json_parser_generic_json@@Base+0x110>
   18180:	mov	r0, r5
   18184:	mov	r1, r7
   18188:	mov	r2, r4
   1818c:	mov	r3, r9
   18190:	bl	1895c <flatcc_json_parser_float@@Base+0x4ec>
   18194:	mov	r7, r0
   18198:	sub	r6, r6, #1
   1819c:	ldr	r0, [sp]
   181a0:	cmp	r0, #0
   181a4:	beq	18150 <flatcc_json_parser_generic_json@@Base+0xcc>
   181a8:	add	r6, r6, #1
   181ac:	b	182d8 <flatcc_json_parser_generic_json@@Base+0x254>
   181b0:	cmp	r0, #90	; 0x5a
   181b4:	bgt	181cc <flatcc_json_parser_generic_json@@Base+0x148>
   181b8:	cmp	r0, #34	; 0x22
   181bc:	beq	1821c <flatcc_json_parser_generic_json@@Base+0x198>
   181c0:	cmp	r0, #45	; 0x2d
   181c4:	beq	1813c <flatcc_json_parser_generic_json@@Base+0xb8>
   181c8:	b	182e8 <flatcc_json_parser_generic_json@@Base+0x264>
   181cc:	cmp	r0, #91	; 0x5b
   181d0:	beq	1829c <flatcc_json_parser_generic_json@@Base+0x218>
   181d4:	cmp	r0, #123	; 0x7b
   181d8:	bne	182e8 <flatcc_json_parser_generic_json@@Base+0x264>
   181dc:	cmp	r6, #512	; 0x200
   181e0:	beq	18374 <flatcc_json_parser_generic_json@@Base+0x2f0>
   181e4:	mov	r0, #125	; 0x7d
   181e8:	strb	r0, [sl, r6]
   181ec:	add	r1, r7, #1
   181f0:	mov	r0, r5
   181f4:	mov	r2, r4
   181f8:	bl	17d54 <flatcc_json_parser_skip_constant@@Base+0x8c>
   181fc:	mov	r7, r0
   18200:	add	r6, r6, #1
   18204:	cmp	r0, r4
   18208:	beq	182d8 <flatcc_json_parser_generic_json@@Base+0x254>
   1820c:	ldrb	r0, [r7]
   18210:	cmp	r0, #125	; 0x7d
   18214:	beq	18150 <flatcc_json_parser_generic_json@@Base+0xcc>
   18218:	b	182d8 <flatcc_json_parser_generic_json@@Base+0x254>
   1821c:	mov	r0, r5
   18220:	mov	r1, r7
   18224:	mov	r2, r4
   18228:	bl	185f8 <flatcc_json_parser_float@@Base+0x188>
   1822c:	mov	r1, r0
   18230:	cmp	r0, r4
   18234:	beq	18288 <flatcc_json_parser_generic_json@@Base+0x204>
   18238:	add	r7, sp, #4
   1823c:	ldrb	r0, [r1]
   18240:	cmp	r0, #34	; 0x22
   18244:	beq	18288 <flatcc_json_parser_generic_json@@Base+0x204>
   18248:	mov	r0, r5
   1824c:	mov	r2, r4
   18250:	bl	17798 <flatcc_json_parser_string_part@@Base>
   18254:	mov	r1, r0
   18258:	cmp	r0, r4
   1825c:	beq	1826c <flatcc_json_parser_generic_json@@Base+0x1e8>
   18260:	ldrb	r0, [r1]
   18264:	cmp	r0, #34	; 0x22
   18268:	beq	18288 <flatcc_json_parser_generic_json@@Base+0x204>
   1826c:	mov	r0, r5
   18270:	mov	r2, r4
   18274:	mov	r3, r7
   18278:	bl	178e0 <flatcc_json_parser_string_escape@@Base>
   1827c:	mov	r1, r0
   18280:	cmp	r0, r4
   18284:	bne	1823c <flatcc_json_parser_generic_json@@Base+0x1b8>
   18288:	mov	r0, r5
   1828c:	mov	r2, r4
   18290:	bl	18618 <flatcc_json_parser_float@@Base+0x1a8>
   18294:	mov	r7, r0
   18298:	b	18150 <flatcc_json_parser_generic_json@@Base+0xcc>
   1829c:	cmp	r6, #512	; 0x200
   182a0:	beq	18374 <flatcc_json_parser_generic_json@@Base+0x2f0>
   182a4:	mov	r0, #93	; 0x5d
   182a8:	strb	r0, [sl, r6]
   182ac:	add	r1, r7, #1
   182b0:	mov	r0, r5
   182b4:	mov	r2, r4
   182b8:	bl	17d54 <flatcc_json_parser_skip_constant@@Base+0x8c>
   182bc:	mov	r7, r0
   182c0:	add	r6, r6, #1
   182c4:	cmp	r0, r4
   182c8:	beq	182d8 <flatcc_json_parser_generic_json@@Base+0x254>
   182cc:	ldrb	r0, [r7]
   182d0:	cmp	r0, #93	; 0x5d
   182d4:	beq	18150 <flatcc_json_parser_generic_json@@Base+0xcc>
   182d8:	add	r0, sl, r6
   182dc:	cmp	r7, r4
   182e0:	bne	180bc <flatcc_json_parser_generic_json@@Base+0x38>
   182e4:	b	18348 <flatcc_json_parser_generic_json@@Base+0x2c4>
   182e8:	mov	r0, r5
   182ec:	mov	r1, r7
   182f0:	mov	r2, r4
   182f4:	bl	17cc8 <flatcc_json_parser_skip_constant@@Base>
   182f8:	mov	r1, r0
   182fc:	cmp	r7, r0
   18300:	beq	18388 <flatcc_json_parser_generic_json@@Base+0x304>
   18304:	mov	r7, r1
   18308:	b	18150 <flatcc_json_parser_generic_json@@Base+0xcc>
   1830c:	cmp	r7, r4
   18310:	bne	18348 <flatcc_json_parser_generic_json@@Base+0x2c4>
   18314:	cmp	r6, #0
   18318:	beq	18348 <flatcc_json_parser_generic_json@@Base+0x2c4>
   1831c:	add	r0, sp, #8
   18320:	add	r0, r0, r6
   18324:	ldrb	r0, [r0, #-1]
   18328:	mov	r3, #10
   1832c:	cmp	r0, #93	; 0x5d
   18330:	movweq	r3, #9
   18334:	mov	r0, r5
   18338:	mov	r1, r7
   1833c:	mov	r2, r4
   18340:	bl	17760 <flatcc_json_parser_set_error@@Base>
   18344:	mov	r7, r0
   18348:	mov	r0, r7
   1834c:	sub	sp, fp, #28
   18350:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18354:	mov	r0, r5
   18358:	mov	r2, r4
   1835c:	mov	r3, #10
   18360:	b	18340 <flatcc_json_parser_generic_json@@Base+0x2bc>
   18364:	mov	r0, r5
   18368:	mov	r2, r4
   1836c:	mov	r3, #4
   18370:	b	18340 <flatcc_json_parser_generic_json@@Base+0x2bc>
   18374:	mov	r0, r5
   18378:	mov	r1, r7
   1837c:	mov	r2, r4
   18380:	mov	r3, #2
   18384:	b	18340 <flatcc_json_parser_generic_json@@Base+0x2bc>
   18388:	mov	r0, r5
   1838c:	mov	r2, r4
   18390:	mov	r3, #5
   18394:	b	18340 <flatcc_json_parser_generic_json@@Base+0x2bc>

00018398 <flatcc_json_parser_double@@Base>:
   18398:	push	{r4, r5, r6, r7, fp, lr}
   1839c:	add	fp, sp, #16
   183a0:	mov	r5, r1
   183a4:	mov	r6, r0
   183a8:	mov	r0, #0
   183ac:	str	r0, [r3]
   183b0:	str	r0, [r3, #4]
   183b4:	cmp	r1, r2
   183b8:	beq	1844c <flatcc_json_parser_double@@Base+0xb4>
   183bc:	mov	r7, r3
   183c0:	mov	r4, r2
   183c4:	mov	r0, r5
   183c8:	ldrb	r1, [r0], #1
   183cc:	cmp	r1, #45	; 0x2d
   183d0:	movne	r0, r5
   183d4:	sub	r2, r2, r0
   183d8:	cmp	r2, #2
   183dc:	blt	18408 <flatcc_json_parser_double@@Base+0x70>
   183e0:	sub	r1, r1, #45	; 0x2d
   183e4:	clz	r1, r1
   183e8:	lsr	r1, r1, #5
   183ec:	ldrb	r1, [r5, r1]
   183f0:	cmp	r1, #46	; 0x2e
   183f4:	beq	18454 <flatcc_json_parser_double@@Base+0xbc>
   183f8:	cmp	r1, #48	; 0x30
   183fc:	ldrbeq	r0, [r0, #1]
   18400:	cmpeq	r0, #48	; 0x30
   18404:	beq	18454 <flatcc_json_parser_double@@Base+0xbc>
   18408:	sub	r1, r4, r5
   1840c:	mov	r0, r5
   18410:	mov	r2, r7
   18414:	bl	1846c <flatcc_json_parser_double@@Base+0xd4>
   18418:	cmp	r0, #0
   1841c:	cmpne	r0, r5
   18420:	popne	{r4, r5, r6, r7, fp, pc}
   18424:	vldr	d0, [r7]
   18428:	bl	12928 <__isinf@plt>
   1842c:	cmp	r0, #0
   18430:	beq	18454 <flatcc_json_parser_double@@Base+0xbc>
   18434:	mov	r0, r6
   18438:	mov	r1, r5
   1843c:	mov	r2, r4
   18440:	mov	r3, #7
   18444:	pop	{r4, r5, r6, r7, fp, lr}
   18448:	b	17760 <flatcc_json_parser_set_error@@Base>
   1844c:	mov	r0, r5
   18450:	pop	{r4, r5, r6, r7, fp, pc}
   18454:	mov	r0, r6
   18458:	mov	r1, r5
   1845c:	mov	r2, r4
   18460:	mov	r3, #6
   18464:	pop	{r4, r5, r6, r7, fp, lr}
   18468:	b	17760 <flatcc_json_parser_set_error@@Base>
   1846c:	b	19d50 <flatcc_json_parser_struct_as_root@@Base+0xbc>

00018470 <flatcc_json_parser_float@@Base>:
   18470:	push	{r4, r5, r6, r7, fp, lr}
   18474:	add	fp, sp, #16
   18478:	mov	r5, r1
   1847c:	mov	r6, r0
   18480:	mov	r0, #0
   18484:	str	r0, [r3]
   18488:	cmp	r1, r2
   1848c:	beq	18520 <flatcc_json_parser_float@@Base+0xb0>
   18490:	mov	r7, r3
   18494:	mov	r4, r2
   18498:	mov	r0, r5
   1849c:	ldrb	r1, [r0], #1
   184a0:	cmp	r1, #45	; 0x2d
   184a4:	movne	r0, r5
   184a8:	sub	r2, r2, r0
   184ac:	cmp	r2, #2
   184b0:	blt	184dc <flatcc_json_parser_float@@Base+0x6c>
   184b4:	sub	r1, r1, #45	; 0x2d
   184b8:	clz	r1, r1
   184bc:	lsr	r1, r1, #5
   184c0:	ldrb	r1, [r5, r1]
   184c4:	cmp	r1, #46	; 0x2e
   184c8:	beq	18528 <flatcc_json_parser_float@@Base+0xb8>
   184cc:	cmp	r1, #48	; 0x30
   184d0:	ldrbeq	r0, [r0, #1]
   184d4:	cmpeq	r0, #48	; 0x30
   184d8:	beq	18528 <flatcc_json_parser_float@@Base+0xb8>
   184dc:	sub	r1, r4, r5
   184e0:	mov	r0, r5
   184e4:	mov	r2, r7
   184e8:	bl	18540 <flatcc_json_parser_float@@Base+0xd0>
   184ec:	cmp	r0, #0
   184f0:	cmpne	r0, r5
   184f4:	popne	{r4, r5, r6, r7, fp, pc}
   184f8:	vldr	s0, [r7]
   184fc:	bl	1291c <__isinff@plt>
   18500:	cmp	r0, #0
   18504:	beq	18528 <flatcc_json_parser_float@@Base+0xb8>
   18508:	mov	r0, r6
   1850c:	mov	r1, r5
   18510:	mov	r2, r4
   18514:	mov	r3, #7
   18518:	pop	{r4, r5, r6, r7, fp, lr}
   1851c:	b	17760 <flatcc_json_parser_set_error@@Base>
   18520:	mov	r0, r5
   18524:	pop	{r4, r5, r6, r7, fp, pc}
   18528:	mov	r0, r6
   1852c:	mov	r1, r5
   18530:	mov	r2, r4
   18534:	mov	r3, #6
   18538:	pop	{r4, r5, r6, r7, fp, lr}
   1853c:	b	17760 <flatcc_json_parser_set_error@@Base>
   18540:	push	{r4, r5, r6, sl, fp, lr}
   18544:	add	fp, sp, #16
   18548:	vpush	{d8-d9}
   1854c:	sub	sp, sp, #8
   18550:	mov	r4, r2
   18554:	mov	r5, r0
   18558:	mov	r2, sp
   1855c:	bl	1846c <flatcc_json_parser_double@@Base+0xd4>
   18560:	mov	r6, r0
   18564:	vldr	d16, [sp]
   18568:	add	r0, pc, #56	; 0x38
   1856c:	vcmpe.f64	d16, #0.0
   18570:	vmrs	APSR_nzcv, fpscr
   18574:	addmi	r0, r0, #4
   18578:	vcvt.f32.f64	s16, d16
   1857c:	vldr	s18, [r0]
   18580:	vmov.f32	s0, s16
   18584:	bl	1291c <__isinff@plt>
   18588:	cmp	r0, #0
   1858c:	vseleq.f32	s0, s16, s18
   18590:	vstr	s0, [r4]
   18594:	movne	r6, r5
   18598:	mov	r0, r6
   1859c:	sub	sp, fp, #32
   185a0:	vpop	{d8-d9}
   185a4:	pop	{r4, r5, r6, sl, fp, pc}
   185a8:	svcvc	0x00800000
   185ac:			; <UNDEFINED> instruction: 0xff800000
   185b0:	cmp	r1, r2
   185b4:	beq	185f0 <flatcc_json_parser_float@@Base+0x180>
   185b8:	ldrb	r3, [r1]
   185bc:	cmp	r3, #46	; 0x2e
   185c0:	beq	185e0 <flatcc_json_parser_float@@Base+0x170>
   185c4:	cmp	r3, #34	; 0x22
   185c8:	bne	185e8 <flatcc_json_parser_float@@Base+0x178>
   185cc:	mov	r2, #0
   185d0:	str	r2, [r0, #12]
   185d4:	add	r1, r1, #1
   185d8:	mov	r0, r1
   185dc:	bx	lr
   185e0:	mov	r3, #5
   185e4:	b	17760 <flatcc_json_parser_set_error@@Base>
   185e8:	mov	r2, #1
   185ec:	str	r2, [r0, #12]
   185f0:	mov	r0, r1
   185f4:	bx	lr
   185f8:	cmp	r1, r2
   185fc:	beq	18610 <flatcc_json_parser_float@@Base+0x1a0>
   18600:	ldrb	r3, [r1]
   18604:	cmp	r3, #34	; 0x22
   18608:	addeq	r0, r1, #1
   1860c:	bxeq	lr
   18610:	mov	r3, #16
   18614:	b	17760 <flatcc_json_parser_set_error@@Base>
   18618:	cmp	r1, r2
   1861c:	beq	18630 <flatcc_json_parser_float@@Base+0x1c0>
   18620:	ldrb	r3, [r1]
   18624:	cmp	r3, #34	; 0x22
   18628:	addeq	r0, r1, #1
   1862c:	bxeq	lr
   18630:	mov	r3, #20
   18634:	b	17760 <flatcc_json_parser_set_error@@Base>
   18638:	push	{fp, lr}
   1863c:	mov	fp, sp
   18640:	cmp	r1, r2
   18644:	beq	1887c <flatcc_json_parser_float@@Base+0x40c>
   18648:	ldrb	r3, [r1]
   1864c:	cmp	r3, #45	; 0x2d
   18650:	bne	18664 <flatcc_json_parser_float@@Base+0x1f4>
   18654:	add	r1, r1, #1
   18658:	cmp	r1, r2
   1865c:	beq	18890 <flatcc_json_parser_float@@Base+0x420>
   18660:	ldrb	r3, [r1]
   18664:	cmp	r3, #48	; 0x30
   18668:	bne	1867c <flatcc_json_parser_float@@Base+0x20c>
   1866c:	add	r1, r1, #1
   18670:	cmp	r1, r2
   18674:	bne	186bc <flatcc_json_parser_float@@Base+0x24c>
   18678:	b	18714 <flatcc_json_parser_float@@Base+0x2a4>
   1867c:	sub	r3, r3, #49	; 0x31
   18680:	uxtb	r3, r3
   18684:	cmp	r3, #8
   18688:	bhi	18890 <flatcc_json_parser_float@@Base+0x420>
   1868c:	add	ip, r1, #1
   18690:	mov	r1, ip
   18694:	cmp	r2, ip
   18698:	beq	186b4 <flatcc_json_parser_float@@Base+0x244>
   1869c:	mov	ip, r1
   186a0:	ldrb	r3, [ip], #1
   186a4:	sub	r3, r3, #48	; 0x30
   186a8:	uxtb	r3, r3
   186ac:	cmp	r3, #10
   186b0:	bcc	18690 <flatcc_json_parser_float@@Base+0x220>
   186b4:	cmp	r1, r2
   186b8:	beq	18714 <flatcc_json_parser_float@@Base+0x2a4>
   186bc:	ldrb	r3, [r1]
   186c0:	cmp	r3, #46	; 0x2e
   186c4:	bne	18714 <flatcc_json_parser_float@@Base+0x2a4>
   186c8:	mov	ip, r1
   186cc:	ldrb	r3, [ip, #1]!
   186d0:	sub	r3, r3, #48	; 0x30
   186d4:	uxtb	r3, r3
   186d8:	cmp	r3, #10
   186dc:	bcc	186e8 <flatcc_json_parser_float@@Base+0x278>
   186e0:	mov	r1, ip
   186e4:	b	18890 <flatcc_json_parser_float@@Base+0x420>
   186e8:	add	r1, r1, #2
   186ec:	cmp	r1, r2
   186f0:	beq	18714 <flatcc_json_parser_float@@Base+0x2a4>
   186f4:	ldrb	r3, [r1]
   186f8:	sub	r3, r3, #48	; 0x30
   186fc:	uxtb	r3, r3
   18700:	cmp	r3, #9
   18704:	bhi	18714 <flatcc_json_parser_float@@Base+0x2a4>
   18708:	add	r1, r1, #1
   1870c:	cmp	r2, r1
   18710:	bne	186f4 <flatcc_json_parser_float@@Base+0x284>
   18714:	cmp	r1, r2
   18718:	beq	18794 <flatcc_json_parser_float@@Base+0x324>
   1871c:	ldrb	r3, [r1]
   18720:	orr	r3, r3, #32
   18724:	cmp	r3, #101	; 0x65
   18728:	bne	18794 <flatcc_json_parser_float@@Base+0x324>
   1872c:	add	r3, r1, #1
   18730:	cmp	r3, r2
   18734:	beq	18764 <flatcc_json_parser_float@@Base+0x2f4>
   18738:	ldrb	ip, [r3]
   1873c:	cmp	ip, #45	; 0x2d
   18740:	cmpne	ip, #43	; 0x2b
   18744:	addeq	r3, r1, #2
   18748:	cmp	r3, r2
   1874c:	beq	18764 <flatcc_json_parser_float@@Base+0x2f4>
   18750:	ldrb	r1, [r3]
   18754:	sub	r1, r1, #48	; 0x30
   18758:	uxtb	r1, r1
   1875c:	cmp	r1, #9
   18760:	bls	1876c <flatcc_json_parser_float@@Base+0x2fc>
   18764:	mov	r1, r3
   18768:	b	18890 <flatcc_json_parser_float@@Base+0x420>
   1876c:	add	ip, r3, #1
   18770:	mov	r1, ip
   18774:	cmp	r2, ip
   18778:	beq	18794 <flatcc_json_parser_float@@Base+0x324>
   1877c:	mov	ip, r1
   18780:	ldrb	r3, [ip], #1
   18784:	sub	r3, r3, #48	; 0x30
   18788:	uxtb	r3, r3
   1878c:	cmp	r3, #10
   18790:	bcc	18770 <flatcc_json_parser_float@@Base+0x300>
   18794:	cmp	r1, r2
   18798:	beq	18890 <flatcc_json_parser_float@@Base+0x420>
   1879c:	ldrb	ip, [r1]
   187a0:	sub	lr, ip, #9
   187a4:	cmp	lr, #49	; 0x31
   187a8:	bhi	18884 <flatcc_json_parser_float@@Base+0x414>
   187ac:	add	r3, pc, #0
   187b0:	ldr	pc, [r3, lr, lsl #2]
   187b4:	andeq	r8, r1, ip, ror r8
   187b8:	andeq	r8, r1, ip, ror r8
   187bc:	andeq	r8, r1, ip, ror r8
   187c0:	muleq	r1, r0, r8
   187c4:	andeq	r8, r1, ip, ror r8
   187c8:	muleq	r1, r0, r8
   187cc:	muleq	r1, r0, r8
   187d0:	muleq	r1, r0, r8
   187d4:	muleq	r1, r0, r8
   187d8:	muleq	r1, r0, r8
   187dc:	muleq	r1, r0, r8
   187e0:	muleq	r1, r0, r8
   187e4:	muleq	r1, r0, r8
   187e8:	muleq	r1, r0, r8
   187ec:	muleq	r1, r0, r8
   187f0:	muleq	r1, r0, r8
   187f4:	muleq	r1, r0, r8
   187f8:	muleq	r1, r0, r8
   187fc:	muleq	r1, r0, r8
   18800:	muleq	r1, r0, r8
   18804:	muleq	r1, r0, r8
   18808:	muleq	r1, r0, r8
   1880c:	muleq	r1, r0, r8
   18810:	andeq	r8, r1, ip, ror r8
   18814:	muleq	r1, r0, r8
   18818:	muleq	r1, r0, r8
   1881c:	muleq	r1, r0, r8
   18820:	muleq	r1, r0, r8
   18824:	muleq	r1, r0, r8
   18828:	muleq	r1, r0, r8
   1882c:	muleq	r1, r0, r8
   18830:	muleq	r1, r0, r8
   18834:	muleq	r1, r0, r8
   18838:	muleq	r1, r0, r8
   1883c:	muleq	r1, r0, r8
   18840:	andeq	r8, r1, ip, ror r8
   18844:	muleq	r1, r0, r8
   18848:	muleq	r1, r0, r8
   1884c:	muleq	r1, r0, r8
   18850:	muleq	r1, r0, r8
   18854:	muleq	r1, r0, r8
   18858:	muleq	r1, r0, r8
   1885c:	muleq	r1, r0, r8
   18860:	muleq	r1, r0, r8
   18864:	muleq	r1, r0, r8
   18868:	muleq	r1, r0, r8
   1886c:	muleq	r1, r0, r8
   18870:	muleq	r1, r0, r8
   18874:	muleq	r1, r0, r8
   18878:	andeq	r8, r1, ip, ror r8
   1887c:	mov	r0, r1
   18880:	pop	{fp, pc}
   18884:	cmp	ip, #93	; 0x5d
   18888:	cmpne	ip, #125	; 0x7d
   1888c:	beq	1887c <flatcc_json_parser_float@@Base+0x40c>
   18890:	mov	r3, #6
   18894:	pop	{fp, lr}
   18898:	b	17760 <flatcc_json_parser_set_error@@Base>
   1889c:	push	{r4, r5, r6, sl, fp, lr}
   188a0:	add	fp, sp, #16
   188a4:	mov	r6, r3
   188a8:	mov	r4, r2
   188ac:	mov	r5, r0
   188b0:	bl	17d54 <flatcc_json_parser_skip_constant@@Base+0x8c>
   188b4:	mov	r1, r0
   188b8:	cmp	r0, r4
   188bc:	beq	18900 <flatcc_json_parser_float@@Base+0x490>
   188c0:	ldrb	r0, [r1]
   188c4:	cmp	r0, #44	; 0x2c
   188c8:	bne	18908 <flatcc_json_parser_float@@Base+0x498>
   188cc:	add	r1, r1, #1
   188d0:	mov	r0, r5
   188d4:	mov	r2, r4
   188d8:	bl	17d54 <flatcc_json_parser_skip_constant@@Base+0x8c>
   188dc:	mov	r1, r0
   188e0:	cmp	r0, r4
   188e4:	beq	18930 <flatcc_json_parser_float@@Base+0x4c0>
   188e8:	ldrb	r0, [r1]
   188ec:	cmp	r0, #93	; 0x5d
   188f0:	bne	1894c <flatcc_json_parser_float@@Base+0x4dc>
   188f4:	mov	r0, #0
   188f8:	str	r0, [r6]
   188fc:	b	1891c <flatcc_json_parser_float@@Base+0x4ac>
   18900:	mov	r0, #0
   18904:	b	18950 <flatcc_json_parser_float@@Base+0x4e0>
   18908:	mov	r0, #0
   1890c:	str	r0, [r6]
   18910:	ldrb	r0, [r1]
   18914:	cmp	r0, #93	; 0x5d
   18918:	bne	18938 <flatcc_json_parser_float@@Base+0x4c8>
   1891c:	add	r1, r1, #1
   18920:	mov	r0, r5
   18924:	mov	r2, r4
   18928:	pop	{r4, r5, r6, sl, fp, lr}
   1892c:	b	17d54 <flatcc_json_parser_skip_constant@@Base+0x8c>
   18930:	mov	r0, #0
   18934:	str	r0, [r6]
   18938:	mov	r0, r5
   1893c:	mov	r2, r4
   18940:	mov	r3, #9
   18944:	pop	{r4, r5, r6, sl, fp, lr}
   18948:	b	17760 <flatcc_json_parser_set_error@@Base>
   1894c:	mov	r0, #1
   18950:	str	r0, [r6]
   18954:	mov	r0, r1
   18958:	pop	{r4, r5, r6, sl, fp, pc}
   1895c:	push	{r4, r5, r6, sl, fp, lr}
   18960:	add	fp, sp, #16
   18964:	mov	r6, r3
   18968:	mov	r4, r2
   1896c:	mov	r5, r0
   18970:	bl	17d54 <flatcc_json_parser_skip_constant@@Base+0x8c>
   18974:	mov	r1, r0
   18978:	cmp	r0, r4
   1897c:	beq	189c0 <flatcc_json_parser_float@@Base+0x550>
   18980:	ldrb	r0, [r1]
   18984:	cmp	r0, #44	; 0x2c
   18988:	bne	189c8 <flatcc_json_parser_float@@Base+0x558>
   1898c:	add	r1, r1, #1
   18990:	mov	r0, r5
   18994:	mov	r2, r4
   18998:	bl	17d54 <flatcc_json_parser_skip_constant@@Base+0x8c>
   1899c:	mov	r1, r0
   189a0:	cmp	r0, r4
   189a4:	beq	189f0 <flatcc_json_parser_float@@Base+0x580>
   189a8:	ldrb	r0, [r1]
   189ac:	cmp	r0, #125	; 0x7d
   189b0:	bne	18a0c <flatcc_json_parser_float@@Base+0x59c>
   189b4:	mov	r0, #0
   189b8:	str	r0, [r6]
   189bc:	b	189dc <flatcc_json_parser_float@@Base+0x56c>
   189c0:	mov	r0, #0
   189c4:	b	18a10 <flatcc_json_parser_float@@Base+0x5a0>
   189c8:	mov	r0, #0
   189cc:	str	r0, [r6]
   189d0:	ldrb	r0, [r1]
   189d4:	cmp	r0, #125	; 0x7d
   189d8:	bne	189f8 <flatcc_json_parser_float@@Base+0x588>
   189dc:	add	r1, r1, #1
   189e0:	mov	r0, r5
   189e4:	mov	r2, r4
   189e8:	pop	{r4, r5, r6, sl, fp, lr}
   189ec:	b	17d54 <flatcc_json_parser_skip_constant@@Base+0x8c>
   189f0:	mov	r0, #0
   189f4:	str	r0, [r6]
   189f8:	mov	r0, r5
   189fc:	mov	r2, r4
   18a00:	mov	r3, #10
   18a04:	pop	{r4, r5, r6, sl, fp, lr}
   18a08:	b	17760 <flatcc_json_parser_set_error@@Base>
   18a0c:	mov	r0, #1
   18a10:	str	r0, [r6]
   18a14:	mov	r0, r1
   18a18:	pop	{r4, r5, r6, sl, fp, pc}

00018a1c <flatcc_json_parser_integer@@Base>:
   18a1c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   18a20:	add	fp, sp, #24
   18a24:	cmp	r1, r2
   18a28:	moveq	r0, r1
   18a2c:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   18a30:	ldr	lr, [fp, #8]
   18a34:	ldrb	r7, [r1]
   18a38:	sub	r7, r7, #45	; 0x2d
   18a3c:	clz	r7, r7
   18a40:	lsr	r7, r7, #5
   18a44:	str	r7, [r3]
   18a48:	add	ip, r1, r7
   18a4c:	mov	r4, #0
   18a50:	cmp	ip, r2
   18a54:	beq	18aec <flatcc_json_parser_integer@@Base+0xd0>
   18a58:	mov	r8, #10
   18a5c:	mov	r9, #0
   18a60:	ldrb	r5, [ip]
   18a64:	sub	r7, r5, #48	; 0x30
   18a68:	uxtb	r7, r7
   18a6c:	cmp	r7, #9
   18a70:	bhi	18b10 <flatcc_json_parser_integer@@Base+0xf4>
   18a74:	add	r7, r9, r9, lsl #2
   18a78:	lsl	r6, r7, #1
   18a7c:	umlal	r5, r6, r4, r8
   18a80:	subs	r7, r5, #48	; 0x30
   18a84:	sbc	r5, r6, #0
   18a88:	subs	r4, r7, r4
   18a8c:	sbcs	r4, r5, r9
   18a90:	bcc	18b20 <flatcc_json_parser_integer@@Base+0x104>
   18a94:	add	ip, ip, #1
   18a98:	cmp	r2, ip
   18a9c:	mov	r4, r7
   18aa0:	mov	r9, r5
   18aa4:	bne	18a60 <flatcc_json_parser_integer@@Base+0x44>
   18aa8:	mov	r3, #0
   18aac:	mov	r4, r7
   18ab0:	mov	r9, r5
   18ab4:	cmp	ip, r1
   18ab8:	beq	18afc <flatcc_json_parser_integer@@Base+0xe0>
   18abc:	cmp	r3, #0
   18ac0:	beq	18b04 <flatcc_json_parser_integer@@Base+0xe8>
   18ac4:	ldrb	r1, [ip]
   18ac8:	cmp	r1, #46	; 0x2e
   18acc:	beq	18adc <flatcc_json_parser_integer@@Base+0xc0>
   18ad0:	cmp	r1, #101	; 0x65
   18ad4:	cmpne	r1, #69	; 0x45
   18ad8:	bne	18b04 <flatcc_json_parser_integer@@Base+0xe8>
   18adc:	mov	r1, ip
   18ae0:	mov	r3, #12
   18ae4:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   18ae8:	b	17760 <flatcc_json_parser_set_error@@Base>
   18aec:	mov	r9, #0
   18af0:	mov	r3, #0
   18af4:	cmp	ip, r1
   18af8:	bne	18abc <flatcc_json_parser_integer@@Base+0xa0>
   18afc:	mov	r0, ip
   18b00:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   18b04:	stm	lr, {r4, r9}
   18b08:	mov	r0, ip
   18b0c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   18b10:	mov	r3, #1
   18b14:	cmp	ip, r1
   18b18:	bne	18abc <flatcc_json_parser_integer@@Base+0xa0>
   18b1c:	b	18afc <flatcc_json_parser_integer@@Base+0xe0>
   18b20:	mov	lr, #8
   18b24:	cmp	r3, #0
   18b28:	movweq	lr, #7
   18b2c:	mov	r1, ip
   18b30:	mov	r3, lr
   18b34:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   18b38:	b	17760 <flatcc_json_parser_set_error@@Base>

00018b3c <flatcc_json_parser_build_uint8_vector_base64@@Base>:
   18b3c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18b40:	add	fp, sp, #28
   18b44:	sub	sp, sp, #20
   18b48:	mov	r8, r3
   18b4c:	mov	r4, r2
   18b50:	mov	r5, r0
   18b54:	bl	185f8 <flatcc_json_parser_float@@Base+0x188>
   18b58:	mov	r6, r0
   18b5c:	mov	r0, r5
   18b60:	mov	r1, r6
   18b64:	mov	r2, r4
   18b68:	bl	17798 <flatcc_json_parser_string_part@@Base>
   18b6c:	mov	r7, r0
   18b70:	ldr	sl, [fp, #8]
   18b74:	cmp	sl, #0
   18b78:	mov	r9, sl
   18b7c:	movwne	r9, #1
   18b80:	cmp	r0, r4
   18b84:	beq	18c7c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x140>
   18b88:	ldrb	r0, [r7]
   18b8c:	cmp	r0, #34	; 0x22
   18b90:	bne	18c7c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x140>
   18b94:	sub	r0, r7, r6
   18b98:	str	r0, [sp, #4]
   18b9c:	bl	18ca8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x16c>
   18ba0:	str	r0, [sp, #8]
   18ba4:	ldr	r0, [r5]
   18ba8:	mov	r1, #1
   18bac:	mov	r2, #1
   18bb0:	mvn	r3, #0
   18bb4:	bl	14ca4 <flatcc_builder_start_vector@@Base>
   18bb8:	cmp	r0, #0
   18bbc:	beq	18bdc <flatcc_json_parser_build_uint8_vector_base64@@Base+0xa0>
   18bc0:	mov	r0, #0
   18bc4:	str	r0, [r8]
   18bc8:	mov	r0, r5
   18bcc:	mov	r1, r7
   18bd0:	mov	r2, r4
   18bd4:	mov	r3, #33	; 0x21
   18bd8:	b	18c9c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x160>
   18bdc:	ldr	r0, [r5]
   18be0:	ldr	r1, [sp, #8]
   18be4:	bl	146bc <flatcc_builder_extend_vector@@Base>
   18be8:	cmp	r0, #0
   18bec:	beq	18bc0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x84>
   18bf0:	ldr	r1, [sp, #8]
   18bf4:	str	r1, [sp, #16]
   18bf8:	ldr	r1, [sp, #4]
   18bfc:	str	r1, [sp, #12]
   18c00:	str	r9, [sp]
   18c04:	add	r2, sp, #16
   18c08:	add	r3, sp, #12
   18c0c:	mov	r1, r6
   18c10:	bl	18cd4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x198>
   18c14:	ldr	r1, [sp, #12]
   18c18:	cmp	r0, #0
   18c1c:	bne	18c78 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x13c>
   18c20:	ldmib	sp, {r0, r2}
   18c24:	cmp	r1, r0
   18c28:	bne	18c78 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x13c>
   18c2c:	ldr	r0, [sp, #16]
   18c30:	cmp	r2, r0
   18c34:	bls	18c4c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x110>
   18c38:	sub	r1, r2, r0
   18c3c:	ldr	r0, [r5]
   18c40:	bl	14b04 <flatcc_builder_truncate_vector@@Base>
   18c44:	cmp	r0, #0
   18c48:	bne	18bc0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x84>
   18c4c:	ldr	r0, [r5]
   18c50:	bl	158f4 <flatcc_builder_end_vector@@Base>
   18c54:	str	r0, [r8]
   18c58:	cmp	r0, #0
   18c5c:	beq	18bc0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x84>
   18c60:	mov	r0, r5
   18c64:	mov	r1, r7
   18c68:	mov	r2, r4
   18c6c:	bl	18618 <flatcc_json_parser_float@@Base+0x1a8>
   18c70:	sub	sp, fp, #28
   18c74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18c78:	add	r7, r6, r1
   18c7c:	mov	r0, #0
   18c80:	str	r0, [r8]
   18c84:	mov	r3, #31
   18c88:	cmp	sl, #0
   18c8c:	movwne	r3, #32
   18c90:	mov	r0, r5
   18c94:	mov	r1, r7
   18c98:	mov	r2, r4
   18c9c:	bl	17760 <flatcc_json_parser_set_error@@Base>
   18ca0:	sub	sp, fp, #28
   18ca4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18ca8:	and	r1, r0, #3
   18cac:	lsr	r0, r0, #2
   18cb0:	add	r0, r0, r0, lsl #1
   18cb4:	cmp	r1, #2
   18cb8:	beq	18ccc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x190>
   18cbc:	cmp	r1, #3
   18cc0:	addeq	r0, r0, #2
   18cc4:	bxeq	lr
   18cc8:	bx	lr
   18ccc:	add	r0, r0, #1
   18cd0:	bx	lr
   18cd4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18cd8:	add	fp, sp, #28
   18cdc:	sub	sp, sp, #4
   18ce0:	ldr	r7, [fp, #8]
   18ce4:	cmp	r3, #0
   18ce8:	ldrne	lr, [r3]
   18cec:	mvneq	lr, #0
   18cf0:	and	r5, r7, #32
   18cf4:	bic	r4, r7, #224	; 0xe0
   18cf8:	cmp	r4, #1
   18cfc:	beq	18d20 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1e4>
   18d00:	mov	ip, #3
   18d04:	cmp	r4, #0
   18d08:	bne	18d50 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x214>
   18d0c:	movw	r4, #51264	; 0xc840
   18d10:	movt	r4, #1
   18d14:	movw	ip, #51776	; 0xca40
   18d18:	movt	ip, #1
   18d1c:	b	18d30 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1f4>
   18d20:	movw	r4, #51520	; 0xc940
   18d24:	movt	r4, #1
   18d28:	movw	ip, #52032	; 0xcb40
   18d2c:	movt	ip, #1
   18d30:	cmp	r5, #0
   18d34:	moveq	ip, r4
   18d38:	cmp	r2, #0
   18d3c:	beq	18d58 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x21c>
   18d40:	ldr	r9, [r2]
   18d44:	cmp	r9, #0
   18d48:	mvneq	r9, #0
   18d4c:	b	18d5c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x220>
   18d50:	mov	r8, r0
   18d54:	b	18ecc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x390>
   18d58:	mvn	r9, #0
   18d5c:	mov	r6, sp
   18d60:	mov	r8, r0
   18d64:	mov	r7, #0
   18d68:	mov	r5, lr
   18d6c:	cmp	r5, r7
   18d70:	beq	18dfc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2c0>
   18d74:	ldrb	r4, [r1, r7]
   18d78:	ldrb	r4, [ip, r4]
   18d7c:	strb	r4, [r6, r7]
   18d80:	cmp	r4, #64	; 0x40
   18d84:	bcc	18d9c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x260>
   18d88:	cmp	r4, #65	; 0x41
   18d8c:	bne	18e44 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x308>
   18d90:	sub	r7, r7, #1
   18d94:	sub	r5, r5, #1
   18d98:	add	r1, r1, #1
   18d9c:	add	r7, r7, #1
   18da0:	cmp	r7, #4
   18da4:	bcc	18d6c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x230>
   18da8:	cmp	r9, #3
   18dac:	bcc	18ef4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3b8>
   18db0:	ldrb	lr, [sp]
   18db4:	ldrb	r4, [sp, #1]
   18db8:	lsr	r7, r4, #4
   18dbc:	orr	r7, r7, lr, lsl #2
   18dc0:	strb	r7, [r8]
   18dc4:	ldrb	r7, [sp, #2]
   18dc8:	lsr	r7, r7, #2
   18dcc:	orr	r7, r7, r4, lsl #4
   18dd0:	strb	r7, [r8, #1]
   18dd4:	ldrb	r7, [sp, #2]
   18dd8:	ldrb	r4, [sp, #3]
   18ddc:	orr	r7, r4, r7, lsl #6
   18de0:	strb	r7, [r8, #2]
   18de4:	sub	lr, r5, #4
   18de8:	subs	r9, r9, #3
   18dec:	add	r1, r1, #4
   18df0:	add	r8, r8, #3
   18df4:	bne	18d64 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x228>
   18df8:	b	18ec8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x38c>
   18dfc:	mov	r4, r7
   18e00:	cmp	r7, #0
   18e04:	beq	18ec4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x388>
   18e08:	cmp	r7, #3
   18e0c:	beq	18e84 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x348>
   18e10:	mov	ip, #4
   18e14:	cmp	r7, #2
   18e18:	bne	18ecc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x390>
   18e1c:	ldrb	r1, [sp, #1]
   18e20:	ands	r7, r1, #15
   18e24:	mov	ip, #1
   18e28:	movwne	ip, #5
   18e2c:	bne	18ecc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x390>
   18e30:	ldrb	r7, [sp]
   18e34:	lsl	r7, r7, #2
   18e38:	orr	r1, r7, r1, lsr #4
   18e3c:	strb	r1, [r8], #1
   18e40:	b	18ec4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x388>
   18e44:	cmp	r4, #66	; 0x42
   18e48:	mov	r4, r7
   18e4c:	bne	18e00 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2c4>
   18e50:	add	r6, r7, #1
   18e54:	mov	r4, r6
   18e58:	cmp	r6, r5
   18e5c:	bcs	18e00 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2c4>
   18e60:	cmp	r4, #7
   18e64:	ldrbls	r6, [r1, r4]
   18e68:	ldrbls	r6, [ip, r6]
   18e6c:	subls	r6, r6, #65	; 0x41
   18e70:	uxtbls	sl, r6
   18e74:	addls	r6, r4, #1
   18e78:	cmpls	sl, #2
   18e7c:	bcc	18e54 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x318>
   18e80:	b	18e00 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2c4>
   18e84:	mov	ip, #5
   18e88:	ldrb	r1, [sp, #2]
   18e8c:	tst	r1, #3
   18e90:	bne	18ecc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x390>
   18e94:	mov	ip, #1
   18e98:	cmp	r9, #2
   18e9c:	bcc	18ecc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x390>
   18ea0:	ldrb	ip, [sp]
   18ea4:	ldrb	r6, [sp, #1]
   18ea8:	lsl	r7, r6, #4
   18eac:	orr	r1, r7, r1, lsr #2
   18eb0:	strb	r1, [r8, #1]
   18eb4:	lsr	r1, r6, #4
   18eb8:	orr	r1, r1, ip, lsl #2
   18ebc:	strb	r1, [r8]
   18ec0:	add	r8, r8, #2
   18ec4:	sub	lr, r5, r4
   18ec8:	mov	ip, #0
   18ecc:	cmp	r2, #0
   18ed0:	subne	r0, r8, r0
   18ed4:	strne	r0, [r2]
   18ed8:	cmp	r3, #0
   18edc:	ldrne	r0, [r3]
   18ee0:	subne	r0, r0, lr
   18ee4:	strne	r0, [r3]
   18ee8:	mov	r0, ip
   18eec:	sub	sp, fp, #28
   18ef0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18ef4:	mov	ip, #1
   18ef8:	b	18ecc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x390>

00018efc <flatcc_json_parser_build_string@@Base>:
   18efc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18f00:	add	fp, sp, #28
   18f04:	sub	sp, sp, #4
   18f08:	mov	r9, r3
   18f0c:	mov	sl, r2
   18f10:	mov	r6, r0
   18f14:	bl	185f8 <flatcc_json_parser_float@@Base+0x188>
   18f18:	mov	r4, r0
   18f1c:	mov	r0, r6
   18f20:	mov	r1, r4
   18f24:	mov	r2, sl
   18f28:	bl	17798 <flatcc_json_parser_string_part@@Base>
   18f2c:	mov	r5, r0
   18f30:	cmp	r0, sl
   18f34:	beq	18f58 <flatcc_json_parser_build_string@@Base+0x5c>
   18f38:	ldrb	r0, [r5]
   18f3c:	cmp	r0, #34	; 0x22
   18f40:	bne	18f58 <flatcc_json_parser_build_string@@Base+0x5c>
   18f44:	sub	r2, r5, r4
   18f48:	ldr	r0, [r6]
   18f4c:	mov	r1, r4
   18f50:	bl	163d0 <flatcc_builder_create_string@@Base>
   18f54:	b	1901c <flatcc_json_parser_build_string@@Base+0x120>
   18f58:	ldr	r0, [r6]
   18f5c:	bl	14e4c <flatcc_builder_start_string@@Base>
   18f60:	cmp	r0, #0
   18f64:	beq	18f74 <flatcc_json_parser_build_string@@Base+0x78>
   18f68:	mov	r0, #0
   18f6c:	str	r0, [r9]
   18f70:	b	19034 <flatcc_json_parser_build_string@@Base+0x138>
   18f74:	sub	r2, r5, r4
   18f78:	ldr	r0, [r6]
   18f7c:	mov	r1, r4
   18f80:	bl	14a08 <flatcc_builder_append_string@@Base>
   18f84:	cmp	r0, #0
   18f88:	beq	18f68 <flatcc_json_parser_build_string@@Base+0x6c>
   18f8c:	cmp	r5, sl
   18f90:	beq	19014 <flatcc_json_parser_build_string@@Base+0x118>
   18f94:	mov	r8, sp
   18f98:	add	r4, r8, #1
   18f9c:	ldrb	r0, [r5]
   18fa0:	cmp	r0, #34	; 0x22
   18fa4:	beq	19014 <flatcc_json_parser_build_string@@Base+0x118>
   18fa8:	mov	r0, r6
   18fac:	mov	r1, r5
   18fb0:	mov	r2, sl
   18fb4:	mov	r3, r8
   18fb8:	bl	178e0 <flatcc_json_parser_string_escape@@Base>
   18fbc:	mov	r7, r0
   18fc0:	ldr	r0, [r6]
   18fc4:	ldrb	r2, [sp]
   18fc8:	mov	r1, r4
   18fcc:	bl	14a08 <flatcc_builder_append_string@@Base>
   18fd0:	cmp	r0, #0
   18fd4:	beq	19040 <flatcc_json_parser_build_string@@Base+0x144>
   18fd8:	mov	r0, r6
   18fdc:	mov	r1, r7
   18fe0:	mov	r2, sl
   18fe4:	bl	17798 <flatcc_json_parser_string_part@@Base>
   18fe8:	mov	r5, r0
   18fec:	cmp	r0, sl
   18ff0:	beq	1900c <flatcc_json_parser_build_string@@Base+0x110>
   18ff4:	sub	r2, r5, r7
   18ff8:	ldr	r0, [r6]
   18ffc:	mov	r1, r7
   19000:	bl	14a08 <flatcc_builder_append_string@@Base>
   19004:	cmp	r0, #0
   19008:	beq	18f68 <flatcc_json_parser_build_string@@Base+0x6c>
   1900c:	cmp	r5, sl
   19010:	bne	18f9c <flatcc_json_parser_build_string@@Base+0xa0>
   19014:	ldr	r0, [r6]
   19018:	bl	164e8 <flatcc_builder_end_string@@Base>
   1901c:	str	r0, [r9]
   19020:	mov	r0, r6
   19024:	mov	r1, r5
   19028:	mov	r2, sl
   1902c:	bl	18618 <flatcc_json_parser_float@@Base+0x1a8>
   19030:	mov	r5, r0
   19034:	mov	r0, r5
   19038:	sub	sp, fp, #28
   1903c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19040:	mov	r5, r7
   19044:	b	18f68 <flatcc_json_parser_build_string@@Base+0x6c>

00019048 <flatcc_json_parser_prepare_unions@@Base>:
   19048:	push	{r4, r5, r6, r7, fp, lr}
   1904c:	add	fp, sp, #16
   19050:	mov	r5, r3
   19054:	mov	r6, r2
   19058:	mov	r4, r1
   1905c:	mov	r7, r0
   19060:	add	r0, r3, r3, lsl #1
   19064:	mov	r1, #8
   19068:	add	r1, r1, r0, lsl #3
   1906c:	ldr	r0, [r7]
   19070:	bl	13c5c <flatcc_builder_enter_user_frame@@Base>
   19074:	mov	r1, r0
   19078:	ldr	r0, [fp, #8]
   1907c:	str	r1, [r0]
   19080:	cmp	r1, #0
   19084:	beq	1909c <flatcc_json_parser_prepare_unions@@Base+0x54>
   19088:	ldr	r0, [r7]
   1908c:	bl	13d64 <flatcc_builder_get_user_frame_ptr@@Base>
   19090:	str	r5, [r0]
   19094:	mov	r0, r4
   19098:	pop	{r4, r5, r6, r7, fp, pc}
   1909c:	mov	r0, r7
   190a0:	mov	r1, r4
   190a4:	mov	r2, r6
   190a8:	mov	r3, #33	; 0x21
   190ac:	pop	{r4, r5, r6, r7, fp, lr}
   190b0:	b	17760 <flatcc_json_parser_set_error@@Base>

000190b4 <flatcc_json_parser_finalize_unions@@Base>:
   190b4:	push	{r4, r5, r6, r7, fp, lr}
   190b8:	add	fp, sp, #16
   190bc:	mov	r4, r3
   190c0:	mov	r7, r2
   190c4:	mov	r5, r1
   190c8:	mov	r6, r0
   190cc:	ldr	r0, [r0]
   190d0:	mov	r1, r3
   190d4:	bl	13d64 <flatcc_builder_get_user_frame_ptr@@Base>
   190d8:	ldr	r0, [r0, #4]
   190dc:	cmp	r0, #0
   190e0:	beq	190fc <flatcc_json_parser_finalize_unions@@Base+0x48>
   190e4:	mov	r0, r6
   190e8:	mov	r1, r5
   190ec:	mov	r2, r7
   190f0:	mov	r3, #27
   190f4:	bl	17760 <flatcc_json_parser_set_error@@Base>
   190f8:	mov	r5, r0
   190fc:	ldr	r0, [r6]
   19100:	mov	r1, r4
   19104:	bl	13d20 <flatcc_builder_exit_user_frame_at@@Base>
   19108:	mov	r0, r5
   1910c:	pop	{r4, r5, r6, r7, fp, pc}

00019110 <flatcc_json_parser_union@@Base>:
   19110:	push	{r4, r5, r6, r7, fp, lr}
   19114:	add	fp, sp, #16
   19118:	sub	sp, sp, #16
   1911c:	mov	r7, r3
   19120:	mov	r4, r2
   19124:	mov	r6, r1
   19128:	mov	r5, r0
   1912c:	ldr	r0, [r0]
   19130:	ldr	r1, [fp, #12]
   19134:	bl	13d64 <flatcc_builder_get_user_frame_ptr@@Base>
   19138:	add	r2, r0, #8
   1913c:	add	r3, r7, r7, lsl #1
   19140:	mov	r1, r2
   19144:	ldr	r7, [r1, r3, lsl #3]!
   19148:	cmp	r7, #0
   1914c:	beq	19174 <flatcc_json_parser_union@@Base+0x64>
   19150:	mov	r0, r5
   19154:	mov	r1, r6
   19158:	mov	r2, r4
   1915c:	mov	r3, #28
   19160:	bl	17760 <flatcc_json_parser_set_error@@Base>
   19164:	mov	r6, r0
   19168:	mov	r0, r6
   1916c:	sub	sp, fp, #16
   19170:	pop	{r4, r5, r6, r7, fp, pc}
   19174:	add	r2, r2, r3, lsl #3
   19178:	ldrb	r3, [r2, #12]
   1917c:	cmp	r3, #0
   19180:	beq	191ec <flatcc_json_parser_union@@Base+0xdc>
   19184:	ldrb	r3, [r2, #13]
   19188:	strb	r3, [sp, #8]
   1918c:	cmp	r3, #0
   19190:	beq	19220 <flatcc_json_parser_union@@Base+0x110>
   19194:	ldr	r7, [fp, #16]
   19198:	ldr	r1, [r0, #4]
   1919c:	sub	r1, r1, #1
   191a0:	str	r1, [r0, #4]
   191a4:	add	r0, sp, #8
   191a8:	add	r0, r0, #4
   191ac:	str	r0, [sp]
   191b0:	mov	r0, r5
   191b4:	mov	r1, r6
   191b8:	mov	r2, r4
   191bc:	blx	r7
   191c0:	mov	r6, r0
   191c4:	cmp	r0, r4
   191c8:	beq	19168 <flatcc_json_parser_union@@Base+0x58>
   191cc:	ldr	r1, [fp, #8]
   191d0:	ldr	r0, [r5]
   191d4:	ldr	r2, [sp, #8]
   191d8:	ldr	r3, [sp, #12]
   191dc:	bl	15bbc <flatcc_builder_table_add_union@@Base>
   191e0:	cmp	r0, #0
   191e4:	bne	19150 <flatcc_json_parser_union@@Base+0x40>
   191e8:	b	19168 <flatcc_json_parser_union@@Base+0x58>
   191ec:	ldr	r3, [r0, #4]
   191f0:	add	r3, r3, #1
   191f4:	str	r3, [r0, #4]
   191f8:	ldr	r0, [r5, #16]
   191fc:	str	r0, [r2, #8]
   19200:	ldr	r0, [r5, #4]
   19204:	str	r0, [r2, #4]
   19208:	str	r6, [r1]
   1920c:	mov	r0, r5
   19210:	mov	r1, r6
   19214:	mov	r2, r4
   19218:	bl	18084 <flatcc_json_parser_generic_json@@Base>
   1921c:	b	19164 <flatcc_json_parser_union@@Base+0x54>
   19220:	mov	r0, r5
   19224:	mov	r1, r6
   19228:	mov	r2, r4
   1922c:	mov	r3, #25
   19230:	b	19160 <flatcc_json_parser_union@@Base+0x50>

00019234 <flatcc_json_parser_union_type@@Base>:
   19234:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19238:	add	fp, sp, #28
   1923c:	sub	sp, sp, #20
   19240:	mov	r6, r3
   19244:	mov	r7, r2
   19248:	mov	r4, r1
   1924c:	mov	r5, r0
   19250:	ldr	r0, [r0]
   19254:	ldr	r1, [fp, #12]
   19258:	bl	13d64 <flatcc_builder_get_user_frame_ptr@@Base>
   1925c:	mov	sl, r0
   19260:	add	r8, r0, #8
   19264:	add	r9, r6, r6, lsl #1
   19268:	add	r6, r8, r9, lsl #3
   1926c:	mov	r0, r6
   19270:	ldrb	r1, [r0, #12]!
   19274:	cmp	r1, #0
   19278:	beq	192a0 <flatcc_json_parser_union_type@@Base+0x6c>
   1927c:	mov	r0, r5
   19280:	mov	r1, r4
   19284:	mov	r2, r7
   19288:	mov	r3, #28
   1928c:	bl	17760 <flatcc_json_parser_set_error@@Base>
   19290:	mov	r7, r0
   19294:	mov	r0, r7
   19298:	sub	sp, fp, #28
   1929c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   192a0:	mov	r1, #1
   192a4:	strb	r1, [r0]
   192a8:	add	r3, r6, #13
   192ac:	mov	r0, r5
   192b0:	mov	r1, r4
   192b4:	mov	r2, r7
   192b8:	str	r3, [sp, #8]
   192bc:	bl	193dc <flatcc_json_parser_union_type@@Base+0x1a8>
   192c0:	mov	r2, r7
   192c4:	mov	r7, r0
   192c8:	cmp	r0, r4
   192cc:	str	r2, [sp, #4]
   192d0:	beq	192dc <flatcc_json_parser_union_type@@Base+0xa8>
   192d4:	ldr	r4, [sp, #8]
   192d8:	b	192fc <flatcc_json_parser_union_type@@Base+0xc8>
   192dc:	ldr	r3, [fp, #16]
   192e0:	ldr	r0, [sp, #8]
   192e4:	mov	r4, r0
   192e8:	str	r0, [sp]
   192ec:	mov	r0, r5
   192f0:	mov	r1, r7
   192f4:	bl	1946c <flatcc_json_parser_union_type@@Base+0x238>
   192f8:	mov	r7, r0
   192fc:	ldr	r1, [r8, r9, lsl #3]
   19300:	cmp	r1, #0
   19304:	beq	19390 <flatcc_json_parser_union_type@@Base+0x15c>
   19308:	ldr	r0, [sl, #4]
   1930c:	cmp	r0, #0
   19310:	beq	193bc <flatcc_json_parser_union_type@@Base+0x188>
   19314:	ldr	ip, [fp, #20]
   19318:	sub	r0, r0, #1
   1931c:	str	r0, [sl, #4]
   19320:	ldr	r0, [r6, #8]
   19324:	ldr	r9, [r5, #4]
   19328:	ldr	r8, [r5, #16]
   1932c:	str	r0, [r5, #16]
   19330:	ldr	r0, [r6, #4]
   19334:	str	r0, [r5, #4]
   19338:	ldrb	r3, [r4]
   1933c:	strb	r3, [sp, #12]
   19340:	add	r0, sp, #12
   19344:	add	r0, r0, #4
   19348:	str	r0, [sp]
   1934c:	mov	r0, r5
   19350:	ldr	r6, [sp, #4]
   19354:	mov	r2, r6
   19358:	blx	ip
   1935c:	cmp	r0, r6
   19360:	beq	193a8 <flatcc_json_parser_union_type@@Base+0x174>
   19364:	ldr	r1, [fp, #8]
   19368:	ldr	r0, [r5]
   1936c:	ldr	r2, [sp, #12]
   19370:	ldr	r3, [sp, #16]
   19374:	bl	15bbc <flatcc_builder_table_add_union@@Base>
   19378:	cmp	r0, #0
   1937c:	beq	193b0 <flatcc_json_parser_union_type@@Base+0x17c>
   19380:	mov	r0, r5
   19384:	mov	r1, r7
   19388:	ldr	r2, [sp, #4]
   1938c:	b	19288 <flatcc_json_parser_union_type@@Base+0x54>
   19390:	ldrb	r0, [r4]
   19394:	ldr	r1, [sl, #4]
   19398:	cmp	r0, #0
   1939c:	addne	r1, r1, #1
   193a0:	str	r1, [sl, #4]
   193a4:	b	19294 <flatcc_json_parser_union_type@@Base+0x60>
   193a8:	mov	r7, r6
   193ac:	b	19294 <flatcc_json_parser_union_type@@Base+0x60>
   193b0:	str	r9, [r5, #4]
   193b4:	str	r8, [r5, #16]
   193b8:	b	19294 <flatcc_json_parser_union_type@@Base+0x60>
   193bc:	movw	r0, #53261	; 0xd00d
   193c0:	movt	r0, #1
   193c4:	movw	r1, #53276	; 0xd01c
   193c8:	movt	r1, #1
   193cc:	movw	r3, #53350	; 0xd066
   193d0:	movt	r3, #1
   193d4:	movw	r2, #965	; 0x3c5
   193d8:	bl	129c4 <__assert_fail@plt>
   193dc:	push	{r4, r5, r6, r7, fp, lr}
   193e0:	add	fp, sp, #16
   193e4:	sub	sp, sp, #24
   193e8:	mov	r7, r1
   193ec:	mov	r6, r0
   193f0:	mov	r0, #0
   193f4:	str	r0, [sp, #20]
   193f8:	str	r0, [sp, #16]
   193fc:	str	r0, [sp, #12]
   19400:	strb	r0, [r3]
   19404:	cmp	r1, r2
   19408:	beq	19460 <flatcc_json_parser_union_type@@Base+0x22c>
   1940c:	mov	r5, r3
   19410:	mov	r4, r2
   19414:	add	r0, sp, #16
   19418:	str	r0, [sp]
   1941c:	add	r3, sp, #12
   19420:	mov	r0, r6
   19424:	mov	r1, r7
   19428:	bl	18a1c <flatcc_json_parser_integer@@Base>
   1942c:	mov	r1, r0
   19430:	cmp	r0, r7
   19434:	beq	1945c <flatcc_json_parser_union_type@@Base+0x228>
   19438:	ldr	r3, [sp, #12]
   1943c:	ldr	r0, [sp, #16]
   19440:	ldr	r2, [sp, #20]
   19444:	stm	sp, {r0, r2, r5}
   19448:	mov	r0, r6
   1944c:	mov	r2, r4
   19450:	bl	1a668 <flatcc_json_parser_struct_as_root@@Base+0x9d4>
   19454:	mov	r7, r0
   19458:	b	19460 <flatcc_json_parser_union_type@@Base+0x22c>
   1945c:	mov	r7, r1
   19460:	mov	r0, r7
   19464:	sub	sp, fp, #16
   19468:	pop	{r4, r5, r6, r7, fp, pc}
   1946c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19470:	add	fp, sp, #28
   19474:	sub	sp, sp, #44	; 0x2c
   19478:	mov	r4, r3
   1947c:	mov	r7, r2
   19480:	mov	r5, r0
   19484:	mov	sl, #0
   19488:	strb	sl, [fp, #-29]	; 0xffffffe3
   1948c:	ldr	r0, [fp, #8]
   19490:	strb	sl, [r0]
   19494:	mov	r0, r5
   19498:	bl	1a6b0 <flatcc_json_parser_struct_as_root@@Base+0xa1c>
   1949c:	mov	r6, r0
   194a0:	cmp	r0, r7
   194a4:	beq	19584 <flatcc_json_parser_union_type@@Base+0x350>
   194a8:	add	r0, r4, #4
   194ac:	add	r9, sp, #32
   194b0:	add	r8, sp, #28
   194b4:	str	r0, [sp, #16]
   194b8:	str	sl, [sp, #20]
   194bc:	mov	sl, r0
   194c0:	ldr	r4, [sl, #-4]
   194c4:	str	r9, [sp]
   194c8:	add	r0, sp, #24
   194cc:	str	r0, [sp, #4]
   194d0:	mov	r0, r5
   194d4:	mov	r1, r6
   194d8:	mov	r2, r7
   194dc:	mov	r3, r8
   194e0:	blx	r4
   194e4:	mov	r4, r0
   194e8:	cmp	r0, r7
   194ec:	beq	195a4 <flatcc_json_parser_union_type@@Base+0x370>
   194f0:	cmp	r4, r6
   194f4:	bne	1950c <flatcc_json_parser_union_type@@Base+0x2d8>
   194f8:	ldr	r0, [sl], #4
   194fc:	cmp	r0, #0
   19500:	mov	r6, r4
   19504:	bne	194c0 <flatcc_json_parser_union_type@@Base+0x28c>
   19508:	b	1958c <flatcc_json_parser_union_type@@Base+0x358>
   1950c:	ldr	sl, [sp, #20]
   19510:	cmp	sl, #0
   19514:	ldrne	r0, [r5, #12]
   19518:	cmpne	r0, #0
   1951c:	bne	195b8 <flatcc_json_parser_union_type@@Base+0x384>
   19520:	ldr	r3, [sp, #28]
   19524:	ldr	r0, [sp, #32]
   19528:	ldr	r1, [sp, #36]	; 0x24
   1952c:	stm	sp, {r0, r1}
   19530:	sub	r0, fp, #29
   19534:	str	r0, [sp, #8]
   19538:	mov	r0, r5
   1953c:	mov	r1, r4
   19540:	mov	r2, r7
   19544:	bl	1a668 <flatcc_json_parser_struct_as_root@@Base+0x9d4>
   19548:	cmp	r0, r7
   1954c:	beq	195b0 <flatcc_json_parser_union_type@@Base+0x37c>
   19550:	add	sl, sl, #1
   19554:	ldr	r0, [fp, #8]
   19558:	mov	r2, r0
   1955c:	ldrb	r0, [r0]
   19560:	ldrb	r1, [fp, #-29]	; 0xffffffe3
   19564:	add	r0, r0, r1
   19568:	strb	r0, [r2]
   1956c:	ldr	r0, [sp, #24]
   19570:	cmp	r0, #0
   19574:	mov	r6, r4
   19578:	ldr	r0, [sp, #16]
   1957c:	bne	194b8 <flatcc_json_parser_union_type@@Base+0x284>
   19580:	b	195a4 <flatcc_json_parser_union_type@@Base+0x370>
   19584:	mov	r4, r6
   19588:	b	195a4 <flatcc_json_parser_union_type@@Base+0x370>
   1958c:	mov	r0, r5
   19590:	mov	r1, r4
   19594:	mov	r2, r7
   19598:	mov	r3, #23
   1959c:	bl	17760 <flatcc_json_parser_set_error@@Base>
   195a0:	mov	r4, r0
   195a4:	mov	r0, r4
   195a8:	sub	sp, fp, #28
   195ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   195b0:	mov	r4, r7
   195b4:	b	195a4 <flatcc_json_parser_union_type@@Base+0x370>
   195b8:	mov	r0, r5
   195bc:	mov	r1, r4
   195c0:	mov	r2, r7
   195c4:	mov	r3, #14
   195c8:	b	1959c <flatcc_json_parser_union_type@@Base+0x368>

000195cc <flatcc_json_parser_union_vector@@Base>:
   195cc:	push	{r4, r5, r6, r7, fp, lr}
   195d0:	add	fp, sp, #16
   195d4:	sub	sp, sp, #16
   195d8:	mov	r7, r3
   195dc:	mov	r4, r2
   195e0:	mov	r5, r1
   195e4:	mov	r6, r0
   195e8:	ldr	r0, [r0]
   195ec:	ldr	r1, [fp, #12]
   195f0:	bl	13d64 <flatcc_builder_get_user_frame_ptr@@Base>
   195f4:	add	r2, r0, #8
   195f8:	add	r3, r7, r7, lsl #1
   195fc:	mov	r1, r2
   19600:	ldr	r7, [r1, r3, lsl #3]!
   19604:	cmp	r7, #0
   19608:	beq	19628 <flatcc_json_parser_union_vector@@Base+0x5c>
   1960c:	mov	r0, r6
   19610:	mov	r1, r5
   19614:	mov	r2, r4
   19618:	mov	r3, #28
   1961c:	sub	sp, fp, #16
   19620:	pop	{r4, r5, r6, r7, fp, lr}
   19624:	b	17760 <flatcc_json_parser_set_error@@Base>
   19628:	add	r2, r2, r3, lsl #3
   1962c:	ldrb	r7, [r2, #12]
   19630:	ldr	r3, [r0, #4]
   19634:	cmp	r7, #0
   19638:	beq	19674 <flatcc_json_parser_union_vector@@Base+0xa8>
   1963c:	ldr	r1, [fp, #16]
   19640:	ldr	r7, [fp, #8]
   19644:	sub	r3, r3, #1
   19648:	str	r3, [r0, #4]
   1964c:	ldr	r0, [r2, #16]
   19650:	ldr	r3, [r2, #20]
   19654:	stm	sp, {r0, r7}
   19658:	str	r1, [sp, #8]
   1965c:	mov	r0, r6
   19660:	mov	r1, r5
   19664:	mov	r2, r4
   19668:	bl	196a8 <flatcc_json_parser_union_vector@@Base+0xdc>
   1966c:	sub	sp, fp, #16
   19670:	pop	{r4, r5, r6, r7, fp, pc}
   19674:	add	r3, r3, #1
   19678:	str	r3, [r0, #4]
   1967c:	ldr	r0, [r6, #16]
   19680:	str	r0, [r2, #8]
   19684:	ldr	r0, [r6, #4]
   19688:	str	r0, [r2, #4]
   1968c:	str	r5, [r1]
   19690:	mov	r0, r6
   19694:	mov	r1, r5
   19698:	mov	r2, r4
   1969c:	sub	sp, fp, #16
   196a0:	pop	{r4, r5, r6, r7, fp, lr}
   196a4:	b	18084 <flatcc_json_parser_generic_json@@Base>
   196a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   196ac:	add	fp, sp, #28
   196b0:	sub	sp, sp, #12
   196b4:	mov	r7, r3
   196b8:	mov	r5, r2
   196bc:	mov	r4, r1
   196c0:	mov	r6, r0
   196c4:	mov	r0, #0
   196c8:	str	r0, [sp, #8]
   196cc:	ldr	r0, [r6]
   196d0:	bl	14d34 <flatcc_builder_start_offset_vector@@Base>
   196d4:	cmp	r0, #0
   196d8:	beq	19700 <flatcc_json_parser_union_vector@@Base+0x134>
   196dc:	mov	r0, r6
   196e0:	mov	r1, r4
   196e4:	mov	r2, r5
   196e8:	mov	r3, #33	; 0x21
   196ec:	bl	17760 <flatcc_json_parser_set_error@@Base>
   196f0:	mov	r4, r0
   196f4:	mov	r0, r4
   196f8:	sub	sp, fp, #28
   196fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19700:	ldr	r8, [fp, #8]
   19704:	add	r3, sp, #4
   19708:	mov	r0, r6
   1970c:	mov	r1, r4
   19710:	mov	r2, r5
   19714:	bl	19af8 <flatcc_json_parser_union_type_vector@@Base+0x2d0>
   19718:	mov	r4, r0
   1971c:	clz	r0, r8
   19720:	lsr	r0, r0, #5
   19724:	ldr	r1, [sp, #4]
   19728:	cmp	r1, #0
   1972c:	beq	197c8 <flatcc_json_parser_union_vector@@Base+0x1fc>
   19730:	sub	sl, r8, #1
   19734:	mov	r9, #0
   19738:	add	r8, sp, #8
   1973c:	tst	r0, #1
   19740:	bne	19814 <flatcc_json_parser_union_vector@@Base+0x248>
   19744:	ldr	r0, [r6]
   19748:	mov	r1, r7
   1974c:	bl	13d64 <flatcc_builder_get_user_frame_ptr@@Base>
   19750:	ldrb	r3, [r0, r9]
   19754:	str	r8, [sp]
   19758:	mov	r0, r6
   1975c:	mov	r1, r4
   19760:	mov	r2, r5
   19764:	ldr	r4, [fp, #16]
   19768:	blx	r4
   1976c:	mov	r4, r0
   19770:	cmp	r0, r5
   19774:	beq	196f4 <flatcc_json_parser_union_vector@@Base+0x128>
   19778:	ldr	r0, [r6]
   1977c:	mov	r1, #1
   19780:	bl	14880 <flatcc_builder_extend_offset_vector@@Base>
   19784:	cmp	r0, #0
   19788:	beq	196dc <flatcc_json_parser_union_vector@@Base+0x110>
   1978c:	ldr	r1, [sp, #8]
   19790:	str	r1, [r0]
   19794:	mov	r0, r6
   19798:	mov	r1, r4
   1979c:	mov	r2, r5
   197a0:	add	r3, sp, #4
   197a4:	bl	1889c <flatcc_json_parser_float@@Base+0x42c>
   197a8:	mov	r4, r0
   197ac:	sub	r0, sl, r9
   197b0:	clz	r0, r0
   197b4:	lsr	r0, r0, #5
   197b8:	add	r9, r9, #1
   197bc:	ldr	r1, [sp, #4]
   197c0:	cmp	r1, #0
   197c4:	bne	1973c <flatcc_json_parser_union_vector@@Base+0x170>
   197c8:	cmp	r0, #0
   197cc:	beq	19814 <flatcc_json_parser_union_vector@@Base+0x248>
   197d0:	ldr	r0, [r6]
   197d4:	mov	r1, r7
   197d8:	bl	13d64 <flatcc_builder_get_user_frame_ptr@@Base>
   197dc:	mov	r1, r0
   197e0:	ldr	r0, [r6]
   197e4:	bl	15b40 <flatcc_builder_end_offset_vector_for_unions@@Base>
   197e8:	str	r0, [sp, #8]
   197ec:	cmp	r0, #0
   197f0:	beq	196dc <flatcc_json_parser_union_vector@@Base+0x110>
   197f4:	ldr	r1, [fp, #12]
   197f8:	ldr	r0, [r6]
   197fc:	bl	15cc8 <flatcc_builder_table_add_offset@@Base>
   19800:	cmp	r0, #0
   19804:	beq	196dc <flatcc_json_parser_union_vector@@Base+0x110>
   19808:	ldr	r1, [sp, #8]
   1980c:	str	r1, [r0]
   19810:	b	196f4 <flatcc_json_parser_union_vector@@Base+0x128>
   19814:	mov	r0, r6
   19818:	mov	r1, r4
   1981c:	mov	r2, r5
   19820:	mov	r3, #30
   19824:	b	196ec <flatcc_json_parser_union_vector@@Base+0x120>

00019828 <flatcc_json_parser_union_type_vector@@Base>:
   19828:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1982c:	add	fp, sp, #28
   19830:	sub	sp, sp, #28
   19834:	mov	r6, r3
   19838:	mov	r9, r2
   1983c:	mov	r4, r1
   19840:	mov	r5, r0
   19844:	ldr	r0, [r0]
   19848:	ldr	r1, [fp, #12]
   1984c:	bl	13d64 <flatcc_builder_get_user_frame_ptr@@Base>
   19850:	add	r0, r0, #8
   19854:	add	sl, r6, r6, lsl #1
   19858:	add	r7, r0, sl, lsl #3
   1985c:	mov	r0, r7
   19860:	ldrb	r1, [r0, #12]!
   19864:	cmp	r1, #0
   19868:	beq	19880 <flatcc_json_parser_union_type_vector@@Base+0x58>
   1986c:	mov	r0, r5
   19870:	mov	r1, r4
   19874:	mov	r2, r9
   19878:	mov	r3, #28
   1987c:	b	19aa0 <flatcc_json_parser_union_type_vector@@Base+0x278>
   19880:	mov	r1, #1
   19884:	strb	r1, [r0]
   19888:	ldr	r0, [r5]
   1988c:	mov	r1, #1
   19890:	mov	r2, #1
   19894:	mvn	r3, #0
   19898:	bl	14ca4 <flatcc_builder_start_vector@@Base>
   1989c:	cmp	r0, #0
   198a0:	bne	19a90 <flatcc_json_parser_union_type_vector@@Base+0x268>
   198a4:	add	r3, sp, #24
   198a8:	mov	r0, r5
   198ac:	mov	r1, r4
   198b0:	mov	r2, r9
   198b4:	bl	19af8 <flatcc_json_parser_union_type_vector@@Base+0x2d0>
   198b8:	mov	r4, r0
   198bc:	ldr	r0, [r5]
   198c0:	ldr	r1, [sp, #24]
   198c4:	cmp	r1, #0
   198c8:	beq	19998 <flatcc_json_parser_union_type_vector@@Base+0x170>
   198cc:	add	r6, sp, #23
   198d0:	mov	r1, #1
   198d4:	bl	146bc <flatcc_builder_extend_vector@@Base>
   198d8:	cmp	r0, #0
   198dc:	beq	19a90 <flatcc_json_parser_union_type_vector@@Base+0x268>
   198e0:	mov	r8, r0
   198e4:	mov	r0, r5
   198e8:	mov	r1, r4
   198ec:	mov	r2, r9
   198f0:	mov	r3, r6
   198f4:	bl	193dc <flatcc_json_parser_union_type@@Base+0x1a8>
   198f8:	mov	r1, r6
   198fc:	mov	r6, r0
   19900:	cmp	r4, r0
   19904:	beq	19910 <flatcc_json_parser_union_type_vector@@Base+0xe8>
   19908:	mov	r4, r6
   1990c:	b	19938 <flatcc_json_parser_union_type_vector@@Base+0x110>
   19910:	str	r1, [sp]
   19914:	mov	r0, r5
   19918:	mov	r1, r6
   1991c:	mov	r2, r9
   19920:	ldr	r3, [fp, #16]
   19924:	bl	1946c <flatcc_json_parser_union_type@@Base+0x238>
   19928:	mov	r4, r0
   1992c:	cmp	r0, r6
   19930:	cmpne	r4, r9
   19934:	beq	19a90 <flatcc_json_parser_union_type_vector@@Base+0x268>
   19938:	ldrb	r0, [sp, #23]
   1993c:	ldr	r1, [fp, #24]
   19940:	blx	r1
   19944:	cmp	r0, #0
   19948:	add	r6, sp, #23
   1994c:	bne	19964 <flatcc_json_parser_union_type_vector@@Base+0x13c>
   19950:	ldrb	r0, [r5, #8]
   19954:	tst	r0, #1
   19958:	beq	19ac4 <flatcc_json_parser_union_type_vector@@Base+0x29c>
   1995c:	mov	r0, #0
   19960:	strb	r0, [sp, #23]
   19964:	ldrb	r1, [sp, #23]
   19968:	mov	r0, r8
   1996c:	bl	19b88 <flatcc_json_parser_union_type_vector@@Base+0x360>
   19970:	mov	r0, r5
   19974:	mov	r1, r4
   19978:	mov	r2, r9
   1997c:	add	r3, sp, #24
   19980:	bl	1889c <flatcc_json_parser_float@@Base+0x42c>
   19984:	mov	r4, r0
   19988:	ldr	r0, [r5]
   1998c:	ldr	r1, [sp, #24]
   19990:	cmp	r1, #0
   19994:	bne	198d0 <flatcc_json_parser_union_type_vector@@Base+0xa8>
   19998:	bl	15974 <flatcc_builder_vector_count@@Base>
   1999c:	mov	r8, r0
   199a0:	str	r0, [r7, #16]
   199a4:	ldr	r0, [r5]
   199a8:	mov	r1, r8
   199ac:	bl	13c5c <flatcc_builder_enter_user_frame@@Base>
   199b0:	mov	r1, r0
   199b4:	ldr	r0, [r5]
   199b8:	str	r1, [sp, #16]
   199bc:	bl	13d64 <flatcc_builder_get_user_frame_ptr@@Base>
   199c0:	mov	r6, r0
   199c4:	ldr	r0, [r5]
   199c8:	bl	15980 <flatcc_builder_vector_edit@@Base>
   199cc:	mov	r1, r0
   199d0:	mov	r0, r6
   199d4:	mov	r2, r8
   199d8:	bl	12904 <memcpy@plt>
   199dc:	ldr	r0, [r5]
   199e0:	bl	158f4 <flatcc_builder_end_vector@@Base>
   199e4:	cmp	r0, #0
   199e8:	beq	19a90 <flatcc_json_parser_union_type_vector@@Base+0x268>
   199ec:	mov	r7, r0
   199f0:	ldr	r6, [fp, #8]
   199f4:	ldr	r0, [r5]
   199f8:	sub	r1, r6, #1
   199fc:	bl	15cc8 <flatcc_builder_table_add_offset@@Base>
   19a00:	cmp	r0, #0
   19a04:	beq	19a90 <flatcc_json_parser_union_type_vector@@Base+0x268>
   19a08:	str	r7, [r0]
   19a0c:	ldr	r0, [r5]
   19a10:	ldr	r1, [fp, #12]
   19a14:	bl	13d64 <flatcc_builder_get_user_frame_ptr@@Base>
   19a18:	add	r7, r0, #8
   19a1c:	mov	r2, r7
   19a20:	ldr	r1, [r2, sl, lsl #3]!
   19a24:	ldr	r3, [sp, #16]
   19a28:	str	r3, [r2, #20]
   19a2c:	ldr	r2, [r0, #4]
   19a30:	cmp	r1, #0
   19a34:	beq	19ab4 <flatcc_json_parser_union_type_vector@@Base+0x28c>
   19a38:	cmp	r2, #0
   19a3c:	beq	19ad8 <flatcc_json_parser_union_type_vector@@Base+0x2b0>
   19a40:	ldr	ip, [fp, #20]
   19a44:	sub	r2, r2, #1
   19a48:	str	r2, [r0, #4]
   19a4c:	add	r0, r7, sl, lsl #3
   19a50:	ldr	r2, [r0, #8]
   19a54:	ldr	sl, [r5, #4]
   19a58:	ldr	r7, [r5, #16]
   19a5c:	str	r2, [r5, #16]
   19a60:	ldr	r0, [r0, #4]
   19a64:	str	r0, [r5, #4]
   19a68:	str	r8, [sp]
   19a6c:	stmib	sp, {r6, ip}
   19a70:	mov	r0, r5
   19a74:	mov	r2, r9
   19a78:	bl	196a8 <flatcc_json_parser_union_vector@@Base+0xdc>
   19a7c:	cmp	r0, r9
   19a80:	strne	sl, [r5, #4]
   19a84:	strne	r7, [r5, #16]
   19a88:	movne	r9, r4
   19a8c:	b	19aa8 <flatcc_json_parser_union_type_vector@@Base+0x280>
   19a90:	mov	r0, r5
   19a94:	mov	r1, r4
   19a98:	mov	r2, r9
   19a9c:	mov	r3, #33	; 0x21
   19aa0:	bl	17760 <flatcc_json_parser_set_error@@Base>
   19aa4:	mov	r9, r0
   19aa8:	mov	r0, r9
   19aac:	sub	sp, fp, #28
   19ab0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19ab4:	add	r1, r2, #1
   19ab8:	str	r1, [r0, #4]
   19abc:	mov	r9, r4
   19ac0:	b	19aa8 <flatcc_json_parser_union_type_vector@@Base+0x280>
   19ac4:	mov	r0, r5
   19ac8:	mov	r1, r4
   19acc:	mov	r2, r9
   19ad0:	mov	r3, #15
   19ad4:	b	19aa0 <flatcc_json_parser_union_type_vector@@Base+0x278>
   19ad8:	movw	r0, #53261	; 0xd00d
   19adc:	movt	r0, #1
   19ae0:	movw	r1, #53276	; 0xd01c
   19ae4:	movt	r1, #1
   19ae8:	movw	r3, #53554	; 0xd132
   19aec:	movt	r3, #1
   19af0:	movw	r2, #1122	; 0x462
   19af4:	bl	129c4 <__assert_fail@plt>
   19af8:	push	{r4, r5, r6, sl, fp, lr}
   19afc:	add	fp, sp, #16
   19b00:	mov	r5, r3
   19b04:	mov	r4, r2
   19b08:	mov	r6, r0
   19b0c:	cmp	r1, r2
   19b10:	beq	19b60 <flatcc_json_parser_union_type_vector@@Base+0x338>
   19b14:	ldrb	r0, [r1]
   19b18:	cmp	r0, #91	; 0x5b
   19b1c:	bne	19b60 <flatcc_json_parser_union_type_vector@@Base+0x338>
   19b20:	add	r1, r1, #1
   19b24:	mov	r0, r6
   19b28:	mov	r2, r4
   19b2c:	bl	17d54 <flatcc_json_parser_skip_constant@@Base+0x8c>
   19b30:	cmp	r0, r4
   19b34:	beq	19b7c <flatcc_json_parser_union_type_vector@@Base+0x354>
   19b38:	ldrb	r1, [r0]
   19b3c:	cmp	r1, #93	; 0x5d
   19b40:	bne	19b7c <flatcc_json_parser_union_type_vector@@Base+0x354>
   19b44:	mov	r1, #0
   19b48:	str	r1, [r5]
   19b4c:	add	r1, r0, #1
   19b50:	mov	r0, r6
   19b54:	mov	r2, r4
   19b58:	pop	{r4, r5, r6, sl, fp, lr}
   19b5c:	b	17d54 <flatcc_json_parser_skip_constant@@Base+0x8c>
   19b60:	mov	r0, #0
   19b64:	str	r0, [r5]
   19b68:	mov	r0, r6
   19b6c:	mov	r2, r4
   19b70:	mov	r3, #22
   19b74:	pop	{r4, r5, r6, sl, fp, lr}
   19b78:	b	17760 <flatcc_json_parser_set_error@@Base>
   19b7c:	mov	r1, #1
   19b80:	str	r1, [r5]
   19b84:	pop	{r4, r5, r6, sl, fp, pc}
   19b88:	push	{r4, r5, fp, lr}
   19b8c:	add	fp, sp, #8
   19b90:	mov	r4, r1
   19b94:	mov	r5, r0
   19b98:	mov	r0, r1
   19b9c:	bl	1a6e8 <flatcc_json_parser_struct_as_root@@Base+0xa54>
   19ba0:	strb	r4, [r5]
   19ba4:	pop	{r4, r5, fp, pc}

00019ba8 <flatcc_json_parser_table_as_root@@Base>:
   19ba8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   19bac:	add	fp, sp, #24
   19bb0:	sub	sp, sp, #56	; 0x38
   19bb4:	mov	r4, r2
   19bb8:	mov	r6, r0
   19bbc:	ldr	r8, [fp, #8]
   19bc0:	str	r8, [sp]
   19bc4:	add	r5, sp, #12
   19bc8:	cmp	r1, #0
   19bcc:	movne	r5, r1
   19bd0:	add	r7, r2, r3
   19bd4:	mov	r0, r5
   19bd8:	mov	r1, r6
   19bdc:	mov	r3, r7
   19be0:	bl	19c5c <flatcc_json_parser_table_as_root@@Base+0xb4>
   19be4:	mov	r0, #2
   19be8:	and	r3, r0, r8, lsr #1
   19bec:	ldr	r1, [fp, #12]
   19bf0:	mov	r0, r6
   19bf4:	mov	r2, #0
   19bf8:	bl	14290 <flatcc_builder_start_buffer@@Base>
   19bfc:	mov	r1, r0
   19c00:	mvn	r0, #0
   19c04:	cmp	r1, #0
   19c08:	bne	19c30 <flatcc_json_parser_table_as_root@@Base+0x88>
   19c0c:	ldr	ip, [fp, #16]
   19c10:	add	r3, sp, #8
   19c14:	mov	r0, r5
   19c18:	mov	r1, r4
   19c1c:	mov	r2, r7
   19c20:	blx	ip
   19c24:	ldr	r0, [r5, #24]
   19c28:	cmp	r0, #0
   19c2c:	beq	19c38 <flatcc_json_parser_table_as_root@@Base+0x90>
   19c30:	sub	sp, fp, #24
   19c34:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19c38:	ldr	r1, [sp, #8]
   19c3c:	mov	r0, r6
   19c40:	bl	14444 <flatcc_builder_end_buffer@@Base>
   19c44:	cmp	r0, #0
   19c48:	mvn	r0, #0
   19c4c:	strne	r4, [r5, #40]	; 0x28
   19c50:	movne	r0, #0
   19c54:	sub	sp, fp, #24
   19c58:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19c5c:	vmov.i32	q8, #0	; 0x00000000
   19c60:	add	ip, r0, #12
   19c64:	vst1.32	{d16-d17}, [ip]
   19c68:	add	ip, r0, #28
   19c6c:	vst1.32	{d16-d17}, [ip]
   19c70:	stm	r0, {r1, r2}
   19c74:	mov	r1, #1
   19c78:	str	r1, [r0, #16]
   19c7c:	ldr	r1, [sp]
   19c80:	str	r1, [r0, #8]
   19c84:	str	r2, [r0, #28]
   19c88:	str	r3, [r0, #32]
   19c8c:	str	r2, [r0, #36]	; 0x24
   19c90:	bx	lr

00019c94 <flatcc_json_parser_struct_as_root@@Base>:
   19c94:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   19c98:	add	fp, sp, #24
   19c9c:	sub	sp, sp, #56	; 0x38
   19ca0:	mov	r4, r2
   19ca4:	mov	r6, r0
   19ca8:	ldr	r8, [fp, #8]
   19cac:	str	r8, [sp]
   19cb0:	add	r5, sp, #12
   19cb4:	cmp	r1, #0
   19cb8:	movne	r5, r1
   19cbc:	add	r7, r2, r3
   19cc0:	mov	r0, r5
   19cc4:	mov	r1, r6
   19cc8:	mov	r3, r7
   19ccc:	bl	19c5c <flatcc_json_parser_table_as_root@@Base+0xb4>
   19cd0:	mov	r0, #2
   19cd4:	and	r3, r0, r8, lsr #1
   19cd8:	ldr	r1, [fp, #12]
   19cdc:	mov	r0, r6
   19ce0:	mov	r2, #0
   19ce4:	bl	14290 <flatcc_builder_start_buffer@@Base>
   19ce8:	mov	r1, r0
   19cec:	mvn	r0, #0
   19cf0:	cmp	r1, #0
   19cf4:	bne	19d1c <flatcc_json_parser_struct_as_root@@Base+0x88>
   19cf8:	ldr	ip, [fp, #16]
   19cfc:	add	r3, sp, #8
   19d00:	mov	r0, r5
   19d04:	mov	r1, r4
   19d08:	mov	r2, r7
   19d0c:	blx	ip
   19d10:	ldr	r0, [r5, #24]
   19d14:	cmp	r0, #0
   19d18:	beq	19d24 <flatcc_json_parser_struct_as_root@@Base+0x90>
   19d1c:	sub	sp, fp, #24
   19d20:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19d24:	ldr	r1, [sp, #8]
   19d28:	mov	r0, r6
   19d2c:	bl	14444 <flatcc_builder_end_buffer@@Base>
   19d30:	cmp	r0, #0
   19d34:	mvn	r0, #0
   19d38:	strne	r4, [r5, #40]	; 0x28
   19d3c:	movne	r0, #0
   19d40:	sub	sp, fp, #24
   19d44:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19d48:	vmov	d0, r0, r1
   19d4c:	bx	lr
   19d50:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19d54:	add	fp, sp, #28
   19d58:	sub	sp, sp, #44	; 0x2c
   19d5c:	mov	lr, r2
   19d60:	mov	r9, r0
   19d64:	mov	r2, #0
   19d68:	str	r2, [lr]
   19d6c:	str	r2, [lr, #4]
   19d70:	cmp	r1, #1000	; 0x3e8
   19d74:	mov	r0, r1
   19d78:	movge	r0, #1000	; 0x3e8
   19d7c:	add	r3, r9, r0
   19d80:	add	ip, r3, #1
   19d84:	cmp	ip, r9
   19d88:	beq	19e00 <flatcc_json_parser_struct_as_root@@Base+0x16c>
   19d8c:	str	r3, [fp, #-32]	; 0xffffffe0
   19d90:	ldrb	r3, [r9]
   19d94:	cmp	r3, #45	; 0x2d
   19d98:	mov	r4, r9
   19d9c:	bne	19db4 <flatcc_json_parser_struct_as_root@@Base+0x120>
   19da0:	cmp	r0, #0
   19da4:	beq	1a224 <flatcc_json_parser_struct_as_root@@Base+0x590>
   19da8:	add	r4, r9, #1
   19dac:	ldrb	r3, [r4]
   19db0:	mov	r2, #1
   19db4:	cmp	r3, #48	; 0x30
   19db8:	bne	19de8 <flatcc_json_parser_struct_as_root@@Base+0x154>
   19dbc:	add	r0, r4, #1
   19dc0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   19dc4:	cmp	r4, r3
   19dc8:	beq	19e0c <flatcc_json_parser_struct_as_root@@Base+0x178>
   19dcc:	ldrb	r3, [r0]
   19dd0:	orr	r3, r3, #32
   19dd4:	cmp	r3, #120	; 0x78
   19dd8:	bne	19e0c <flatcc_json_parser_struct_as_root@@Base+0x178>
   19ddc:	mov	r1, lr
   19de0:	bl	1a250 <flatcc_json_parser_struct_as_root@@Base+0x5bc>
   19de4:	b	19e00 <flatcc_json_parser_struct_as_root@@Base+0x16c>
   19de8:	sub	r0, r3, #49	; 0x31
   19dec:	uxtb	r0, r0
   19df0:	cmp	r0, #9
   19df4:	bcc	19e40 <flatcc_json_parser_struct_as_root@@Base+0x1ac>
   19df8:	cmp	r2, #0
   19dfc:	movne	r9, #0
   19e00:	mov	r0, r9
   19e04:	sub	sp, fp, #28
   19e08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19e0c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   19e10:	cmp	r4, r3
   19e14:	str	r2, [sp, #32]
   19e18:	beq	19e34 <flatcc_json_parser_struct_as_root@@Base+0x1a0>
   19e1c:	ldrb	r3, [r0]
   19e20:	cmp	r3, #48	; 0x30
   19e24:	bne	19e34 <flatcc_json_parser_struct_as_root@@Base+0x1a0>
   19e28:	add	r0, r0, #1
   19e2c:	cmp	ip, r0
   19e30:	bne	19e1c <flatcc_json_parser_struct_as_root@@Base+0x188>
   19e34:	mov	r6, #0
   19e38:	mov	r4, #0
   19e3c:	b	19e50 <flatcc_json_parser_struct_as_root@@Base+0x1bc>
   19e40:	str	r2, [sp, #32]
   19e44:	add	r0, r4, #1
   19e48:	sub	r6, r3, #48	; 0x30
   19e4c:	asr	r4, r6, #31
   19e50:	mov	r5, #0
   19e54:	cmp	r0, ip
   19e58:	beq	19ecc <flatcc_json_parser_struct_as_root@@Base+0x238>
   19e5c:	str	lr, [sp, #24]
   19e60:	str	r9, [sp, #28]
   19e64:	movw	r8, #39321	; 0x9999
   19e68:	movt	r8, #6553	; 0x1999
   19e6c:	movw	r3, #39320	; 0x9998
   19e70:	movt	r3, #39321	; 0x9999
   19e74:	mov	sl, #10
   19e78:	mov	r7, r0
   19e7c:	ldrb	r9, [r7]
   19e80:	sub	lr, r9, #48	; 0x30
   19e84:	uxtb	r2, lr
   19e88:	cmp	r2, #9
   19e8c:	bhi	19ebc <flatcc_json_parser_struct_as_root@@Base+0x228>
   19e90:	subs	r2, r3, r6
   19e94:	sbcs	r2, r8, r4
   19e98:	bcc	19ee4 <flatcc_json_parser_struct_as_root@@Base+0x250>
   19e9c:	add	r2, r4, r4, lsl #2
   19ea0:	lsl	r2, r2, #1
   19ea4:	umlal	r9, r2, r6, sl
   19ea8:	subs	r6, r9, #48	; 0x30
   19eac:	sbc	r4, r2, #0
   19eb0:	add	r7, r7, #1
   19eb4:	cmp	ip, r7
   19eb8:	bne	19e7c <flatcc_json_parser_struct_as_root@@Base+0x1e8>
   19ebc:	mov	r8, r6
   19ec0:	mov	sl, r4
   19ec4:	mov	r2, #0
   19ec8:	b	19efc <flatcc_json_parser_struct_as_root@@Base+0x268>
   19ecc:	mov	r7, r0
   19ed0:	mov	r8, r6
   19ed4:	mov	sl, r4
   19ed8:	mov	r2, #0
   19edc:	str	r2, [sp, #36]	; 0x24
   19ee0:	b	19f08 <flatcc_json_parser_struct_as_root@@Base+0x274>
   19ee4:	adds	r8, r6, #1
   19ee8:	adc	sl, r4, #0
   19eec:	cmp	r9, #52	; 0x34
   19ef0:	movls	r8, r6
   19ef4:	movls	sl, r4
   19ef8:	mov	r2, #1
   19efc:	str	r2, [sp, #36]	; 0x24
   19f00:	ldr	r9, [sp, #28]
   19f04:	ldr	lr, [sp, #24]
   19f08:	ldr	r2, [fp, #-32]	; 0xffffffe0
   19f0c:	cmp	r7, ip
   19f10:	beq	19f60 <flatcc_json_parser_struct_as_root@@Base+0x2cc>
   19f14:	mvn	r1, r1
   19f18:	cmn	r1, #1000	; 0x3e8
   19f1c:	mvnlt	r1, #1000	; 0x3e8
   19f20:	mvn	r1, r1
   19f24:	sub	r1, r1, r7
   19f28:	add	r6, r9, r1
   19f2c:	mov	r5, #0
   19f30:	mov	r1, r7
   19f34:	ldrb	r3, [r1]
   19f38:	cmp	r3, #48	; 0x30
   19f3c:	bne	19f68 <flatcc_json_parser_struct_as_root@@Base+0x2d4>
   19f40:	sub	r6, r6, #1
   19f44:	add	r3, r1, #1
   19f48:	add	r5, r5, #1
   19f4c:	cmp	r1, r2
   19f50:	mov	r1, r3
   19f54:	bne	19f34 <flatcc_json_parser_struct_as_root@@Base+0x2a0>
   19f58:	mov	r1, r3
   19f5c:	b	19fb4 <flatcc_json_parser_struct_as_root@@Base+0x320>
   19f60:	mov	r1, r7
   19f64:	b	19fb4 <flatcc_json_parser_struct_as_root@@Base+0x320>
   19f68:	sub	r2, r3, #49	; 0x31
   19f6c:	uxtb	r2, r2
   19f70:	cmp	r2, #8
   19f74:	bhi	19fb4 <flatcc_json_parser_struct_as_root@@Base+0x320>
   19f78:	mvn	r4, #0
   19f7c:	mov	r3, r4
   19f80:	cmp	r6, #0
   19f84:	beq	19fa4 <flatcc_json_parser_struct_as_root@@Base+0x310>
   19f88:	ldrb	r2, [r1, -r3]
   19f8c:	sub	r2, r2, #48	; 0x30
   19f90:	uxtb	r2, r2
   19f94:	sub	r4, r3, #1
   19f98:	sub	r6, r6, #1
   19f9c:	cmp	r2, #10
   19fa0:	bcc	19f7c <flatcc_json_parser_struct_as_root@@Base+0x2e8>
   19fa4:	sub	r5, r5, r3
   19fa8:	sub	r1, r1, r3
   19fac:	mov	r2, #1
   19fb0:	str	r2, [sp, #36]	; 0x24
   19fb4:	sub	r3, r7, r0
   19fb8:	cmp	r1, ip
   19fbc:	beq	1a10c <flatcc_json_parser_struct_as_root@@Base+0x478>
   19fc0:	ldrb	r0, [r1]
   19fc4:	cmp	r0, #46	; 0x2e
   19fc8:	bne	1a10c <flatcc_json_parser_struct_as_root@@Base+0x478>
   19fcc:	mov	r7, r1
   19fd0:	ldrb	r0, [r7, #1]!
   19fd4:	sub	r0, r0, #48	; 0x30
   19fd8:	uxtb	r2, r0
   19fdc:	mov	r0, #0
   19fe0:	cmp	r2, #9
   19fe4:	bhi	1a228 <flatcc_json_parser_struct_as_root@@Base+0x594>
   19fe8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   19fec:	cmp	r1, r0
   19ff0:	beq	1a058 <flatcc_json_parser_struct_as_root@@Base+0x3c4>
   19ff4:	str	r3, [sp, #28]
   19ff8:	movw	r0, #39321	; 0x9999
   19ffc:	movt	r0, #6553	; 0x1999
   1a000:	movw	r4, #39320	; 0x9998
   1a004:	movt	r4, #39321	; 0x9999
   1a008:	mov	r6, #10
   1a00c:	mov	r1, r7
   1a010:	ldrb	r3, [r1]
   1a014:	sub	r2, r3, #48	; 0x30
   1a018:	uxtb	r2, r2
   1a01c:	cmp	r2, #9
   1a020:	bhi	1a074 <flatcc_json_parser_struct_as_root@@Base+0x3e0>
   1a024:	subs	r2, r4, r8
   1a028:	sbcs	r2, r0, sl
   1a02c:	bcc	1a068 <flatcc_json_parser_struct_as_root@@Base+0x3d4>
   1a030:	add	r2, sl, sl, lsl #2
   1a034:	lsl	r2, r2, #1
   1a038:	umlal	r3, r2, r8, r6
   1a03c:	subs	r8, r3, #48	; 0x30
   1a040:	sbc	sl, r2, #0
   1a044:	sub	r5, r5, #1
   1a048:	add	r1, r1, #1
   1a04c:	cmp	ip, r1
   1a050:	bne	1a010 <flatcc_json_parser_struct_as_root@@Base+0x37c>
   1a054:	b	1a074 <flatcc_json_parser_struct_as_root@@Base+0x3e0>
   1a058:	mov	r1, r7
   1a05c:	mov	r0, r8
   1a060:	mov	r6, sl
   1a064:	b	1a080 <flatcc_json_parser_struct_as_root@@Base+0x3ec>
   1a068:	ldr	r0, [sp, #36]	; 0x24
   1a06c:	cmp	r0, #0
   1a070:	beq	1a230 <flatcc_json_parser_struct_as_root@@Base+0x59c>
   1a074:	mov	r0, r8
   1a078:	mov	r6, sl
   1a07c:	ldr	r3, [sp, #28]
   1a080:	sub	r2, r1, r7
   1a084:	add	r3, r2, r3
   1a088:	cmp	r1, ip
   1a08c:	beq	1a0b4 <flatcc_json_parser_struct_as_root@@Base+0x420>
   1a090:	mov	r4, r3
   1a094:	ldrb	r3, [r1]
   1a098:	cmp	r3, #48	; 0x30
   1a09c:	bne	1a0c0 <flatcc_json_parser_struct_as_root@@Base+0x42c>
   1a0a0:	add	r1, r1, #1
   1a0a4:	add	r5, r5, #1
   1a0a8:	cmp	ip, r1
   1a0ac:	bne	1a094 <flatcc_json_parser_struct_as_root@@Base+0x400>
   1a0b0:	b	1a100 <flatcc_json_parser_struct_as_root@@Base+0x46c>
   1a0b4:	mov	r8, r0
   1a0b8:	mov	sl, r6
   1a0bc:	b	1a10c <flatcc_json_parser_struct_as_root@@Base+0x478>
   1a0c0:	sub	r2, r3, #49	; 0x31
   1a0c4:	uxtb	r2, r2
   1a0c8:	cmp	r2, #8
   1a0cc:	bhi	1a100 <flatcc_json_parser_struct_as_root@@Base+0x46c>
   1a0d0:	add	r3, r1, #1
   1a0d4:	mov	r1, r3
   1a0d8:	cmp	ip, r3
   1a0dc:	beq	1a0f8 <flatcc_json_parser_struct_as_root@@Base+0x464>
   1a0e0:	mov	r3, r1
   1a0e4:	ldrb	r2, [r3], #1
   1a0e8:	sub	r2, r2, #48	; 0x30
   1a0ec:	uxtb	r2, r2
   1a0f0:	cmp	r2, #10
   1a0f4:	bcc	1a0d4 <flatcc_json_parser_struct_as_root@@Base+0x440>
   1a0f8:	mov	r2, #1
   1a0fc:	str	r2, [sp, #36]	; 0x24
   1a100:	mov	r8, r0
   1a104:	mov	sl, r6
   1a108:	mov	r3, r4
   1a10c:	mov	r7, #0
   1a110:	cmp	r1, ip
   1a114:	beq	1a16c <flatcc_json_parser_struct_as_root@@Base+0x4d8>
   1a118:	ldrb	r0, [r1]
   1a11c:	orr	r0, r0, #32
   1a120:	cmp	r0, #101	; 0x65
   1a124:	bne	1a16c <flatcc_json_parser_struct_as_root@@Base+0x4d8>
   1a128:	sub	r2, ip, r1
   1a12c:	mov	r0, #0
   1a130:	cmp	r2, #2
   1a134:	blt	1a228 <flatcc_json_parser_struct_as_root@@Base+0x594>
   1a138:	mov	r4, r1
   1a13c:	ldrb	r0, [r4, #1]!
   1a140:	cmp	r0, #45	; 0x2d
   1a144:	beq	1a1b8 <flatcc_json_parser_struct_as_root@@Base+0x524>
   1a148:	mov	r7, #0
   1a14c:	cmp	r0, #43	; 0x2b
   1a150:	bne	1a1c8 <flatcc_json_parser_struct_as_root@@Base+0x534>
   1a154:	add	r4, r1, #2
   1a158:	mov	r0, #0
   1a15c:	cmp	r4, ip
   1a160:	beq	1a228 <flatcc_json_parser_struct_as_root@@Base+0x594>
   1a164:	mov	r7, #0
   1a168:	b	1a1c8 <flatcc_json_parser_struct_as_root@@Base+0x534>
   1a16c:	mov	r6, #0
   1a170:	cmp	r1, ip
   1a174:	mov	r0, #0
   1a178:	beq	1a228 <flatcc_json_parser_struct_as_root@@Base+0x594>
   1a17c:	add	r0, r3, r5
   1a180:	cmp	r7, #0
   1a184:	rsbne	r6, r6, #0
   1a188:	add	r0, r0, r6
   1a18c:	stm	sp, {r8, sl}
   1a190:	str	r0, [sp, #8]
   1a194:	str	r3, [sp, #12]
   1a198:	ldr	r0, [sp, #36]	; 0x24
   1a19c:	str	r0, [sp, #16]
   1a1a0:	str	lr, [sp, #20]
   1a1a4:	mov	r0, r9
   1a1a8:	ldr	r2, [sp, #32]
   1a1ac:	bl	1a260 <flatcc_json_parser_struct_as_root@@Base+0x5cc>
   1a1b0:	sub	sp, fp, #28
   1a1b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a1b8:	add	r4, r1, #2
   1a1bc:	mov	r7, #1
   1a1c0:	cmp	r4, ip
   1a1c4:	beq	1a224 <flatcc_json_parser_struct_as_root@@Base+0x590>
   1a1c8:	ldrb	r0, [r4]
   1a1cc:	sub	r6, r0, #48	; 0x30
   1a1d0:	uxtb	r1, r6
   1a1d4:	mov	r0, #0
   1a1d8:	cmp	r1, #9
   1a1dc:	bhi	1a228 <flatcc_json_parser_struct_as_root@@Base+0x594>
   1a1e0:	add	r1, r4, #1
   1a1e4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1a1e8:	cmp	r4, r0
   1a1ec:	beq	1a170 <flatcc_json_parser_struct_as_root@@Base+0x4dc>
   1a1f0:	ldrb	r0, [r1]
   1a1f4:	sub	r2, r0, #48	; 0x30
   1a1f8:	uxtb	r2, r2
   1a1fc:	cmp	r2, #9
   1a200:	bhi	1a170 <flatcc_json_parser_struct_as_root@@Base+0x4dc>
   1a204:	cmp	r6, #32768	; 0x8000
   1a208:	addlt	r2, r6, r6, lsl #2
   1a20c:	addlt	r0, r0, r2, lsl #1
   1a210:	sublt	r6, r0, #48	; 0x30
   1a214:	add	r1, r1, #1
   1a218:	cmp	ip, r1
   1a21c:	bne	1a1f0 <flatcc_json_parser_struct_as_root@@Base+0x55c>
   1a220:	b	1a170 <flatcc_json_parser_struct_as_root@@Base+0x4dc>
   1a224:	mov	r0, #0
   1a228:	sub	sp, fp, #28
   1a22c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a230:	adds	r0, r8, #1
   1a234:	adc	r6, sl, #0
   1a238:	cmp	r3, #52	; 0x34
   1a23c:	movls	r0, r8
   1a240:	movls	r6, sl
   1a244:	mov	r2, #1
   1a248:	str	r2, [sp, #36]	; 0x24
   1a24c:	b	1a07c <flatcc_json_parser_struct_as_root@@Base+0x3e8>
   1a250:	mov	r2, #0
   1a254:	str	r2, [r1]
   1a258:	str	r2, [r1, #4]
   1a25c:	bx	lr
   1a260:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1a264:	add	fp, sp, #24
   1a268:	sub	sp, sp, #16
   1a26c:	mov	r5, r2
   1a270:	mov	r4, r1
   1a274:	mov	r6, r0
   1a278:	ldr	r1, [fp, #12]
   1a27c:	ldr	r0, [fp, #8]
   1a280:	vmov.i32	d0, #0	; 0x00000000
   1a284:	orrs	r2, r0, r1
   1a288:	ldr	r9, [fp, #28]
   1a28c:	beq	1a2b8 <flatcc_json_parser_struct_as_root@@Base+0x624>
   1a290:	ldr	r7, [fp, #16]
   1a294:	cmn	r7, #324	; 0x144
   1a298:	blt	1a2b8 <flatcc_json_parser_struct_as_root@@Base+0x624>
   1a29c:	movw	r2, #311	; 0x137
   1a2a0:	cmp	r7, r2
   1a2a4:	blt	1a2d8 <flatcc_json_parser_struct_as_root@@Base+0x644>
   1a2a8:	movw	r1, #0
   1a2ac:	movt	r1, #32752	; 0x7ff0
   1a2b0:	mov	r0, #0
   1a2b4:	bl	19d48 <flatcc_json_parser_struct_as_root@@Base+0xb4>
   1a2b8:	vstr	d0, [r9]
   1a2bc:	cmp	r5, #0
   1a2c0:	vldrne	d16, [r9]
   1a2c4:	vnegne.f64	d16, d16
   1a2c8:	vstrne	d16, [r9]
   1a2cc:	mov	r0, r4
   1a2d0:	sub	sp, fp, #24
   1a2d4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1a2d8:	ldr	r8, [fp, #20]
   1a2dc:	mov	r2, #0
   1a2e0:	cmp	r2, r1, lsr #21
   1a2e4:	bne	1a3cc <flatcc_json_parser_struct_as_root@@Base+0x738>
   1a2e8:	cmp	r7, #22
   1a2ec:	bhi	1a3cc <flatcc_json_parser_struct_as_root@@Base+0x738>
   1a2f0:	bl	1aa38 <flatcc_json_parser_struct_as_root@@Base+0xda4>
   1a2f4:	sub	r2, r7, r8
   1a2f8:	vmov	d0, r0, r1
   1a2fc:	add	r0, r2, #22
   1a300:	cmp	r0, #44	; 0x2c
   1a304:	bhi	1a2b8 <flatcc_json_parser_struct_as_root@@Base+0x624>
   1a308:	add	r1, pc, #0
   1a30c:	ldr	pc, [r1, r0, lsl #2]
   1a310:	andeq	sl, r1, r4, asr #7
   1a314:	andeq	sl, r1, r8, lsl #8
   1a318:	andeq	sl, r1, r0, lsl r4
   1a31c:	andeq	sl, r1, r8, lsl r4
   1a320:	andeq	sl, r1, r0, lsr #8
   1a324:	andeq	sl, r1, r8, lsr #8
   1a328:	andeq	sl, r1, r0, lsr r4
   1a32c:	andeq	sl, r1, r8, lsr r4
   1a330:	andeq	sl, r1, r0, asr #8
   1a334:	andeq	sl, r1, r8, asr #8
   1a338:	andeq	sl, r1, r0, asr r4
   1a33c:	andeq	sl, r1, r8, asr r4
   1a340:	andeq	sl, r1, r0, ror #8
   1a344:	andeq	sl, r1, r8, ror #8
   1a348:	andeq	sl, r1, r0, ror r4
   1a34c:	andeq	sl, r1, r8, ror r4
   1a350:	andeq	sl, r1, r0, lsl #9
   1a354:	andeq	sl, r1, r8, lsl #9
   1a358:	muleq	r1, r0, r4
   1a35c:	muleq	r1, r8, r4
   1a360:	andeq	sl, r1, r0, lsr #9
   1a364:	andeq	sl, r1, r8, lsr #9
   1a368:			; <UNDEFINED> instruction: 0x0001a2b8
   1a36c:			; <UNDEFINED> instruction: 0x0001a4b4
   1a370:	andeq	sl, r1, r0, asr #9
   1a374:	andeq	sl, r1, ip, asr #9
   1a378:	ldrdeq	sl, [r1], -r8
   1a37c:	andeq	sl, r1, r4, ror #9
   1a380:	strdeq	sl, [r1], -r0
   1a384:	strdeq	sl, [r1], -ip
   1a388:	andeq	sl, r1, r8, lsl #10
   1a38c:	andeq	sl, r1, r4, lsl r5
   1a390:	andeq	sl, r1, r0, lsr #10
   1a394:	andeq	sl, r1, ip, lsr #10
   1a398:	andeq	sl, r1, r8, lsr r5
   1a39c:	andeq	sl, r1, r4, asr #10
   1a3a0:	andeq	sl, r1, r0, asr r5
   1a3a4:	andeq	sl, r1, ip, asr r5
   1a3a8:	andeq	sl, r1, r8, ror #10
   1a3ac:	andeq	sl, r1, r4, ror r5
   1a3b0:	andeq	sl, r1, r0, lsl #11
   1a3b4:	andeq	sl, r1, ip, lsl #11
   1a3b8:	muleq	r1, r8, r5
   1a3bc:	andeq	sl, r1, r4, lsr #11
   1a3c0:			; <UNDEFINED> instruction: 0x0001a5b0
   1a3c4:	vldr	d16, [pc, #660]	; 1a660 <flatcc_json_parser_struct_as_root@@Base+0x9cc>
   1a3c8:	b	1a4ac <flatcc_json_parser_struct_as_root@@Base+0x818>
   1a3cc:	ldr	r2, [fp, #24]
   1a3d0:	stm	sp, {r2, r9}
   1a3d4:	mov	r2, r7
   1a3d8:	mov	r3, r8
   1a3dc:	bl	171f0 <grisu3_diy_fp_encode_double@@Base>
   1a3e0:	cmp	r0, #0
   1a3e4:	bne	1a2bc <flatcc_json_parser_struct_as_root@@Base+0x628>
   1a3e8:	add	r1, sp, #12
   1a3ec:	mov	r0, r6
   1a3f0:	bl	129a0 <strtod@plt>
   1a3f4:	vstr	d0, [r9]
   1a3f8:	ldr	r0, [sp, #12]
   1a3fc:	cmp	r0, r4
   1a400:	movcc	r4, r0
   1a404:	b	1a2cc <flatcc_json_parser_struct_as_root@@Base+0x638>
   1a408:	vldr	d16, [pc, #432]	; 1a5c0 <flatcc_json_parser_struct_as_root@@Base+0x92c>
   1a40c:	b	1a4ac <flatcc_json_parser_struct_as_root@@Base+0x818>
   1a410:	vldr	d16, [pc, #432]	; 1a5c8 <flatcc_json_parser_struct_as_root@@Base+0x934>
   1a414:	b	1a4ac <flatcc_json_parser_struct_as_root@@Base+0x818>
   1a418:	vldr	d16, [pc, #432]	; 1a5d0 <flatcc_json_parser_struct_as_root@@Base+0x93c>
   1a41c:	b	1a4ac <flatcc_json_parser_struct_as_root@@Base+0x818>
   1a420:	vldr	d16, [pc, #432]	; 1a5d8 <flatcc_json_parser_struct_as_root@@Base+0x944>
   1a424:	b	1a4ac <flatcc_json_parser_struct_as_root@@Base+0x818>
   1a428:	vldr	d16, [pc, #432]	; 1a5e0 <flatcc_json_parser_struct_as_root@@Base+0x94c>
   1a42c:	b	1a4ac <flatcc_json_parser_struct_as_root@@Base+0x818>
   1a430:	vldr	d16, [pc, #432]	; 1a5e8 <flatcc_json_parser_struct_as_root@@Base+0x954>
   1a434:	b	1a4ac <flatcc_json_parser_struct_as_root@@Base+0x818>
   1a438:	vldr	d16, [pc, #432]	; 1a5f0 <flatcc_json_parser_struct_as_root@@Base+0x95c>
   1a43c:	b	1a4ac <flatcc_json_parser_struct_as_root@@Base+0x818>
   1a440:	vldr	d16, [pc, #432]	; 1a5f8 <flatcc_json_parser_struct_as_root@@Base+0x964>
   1a444:	b	1a4ac <flatcc_json_parser_struct_as_root@@Base+0x818>
   1a448:	vldr	d16, [pc, #432]	; 1a600 <flatcc_json_parser_struct_as_root@@Base+0x96c>
   1a44c:	b	1a4ac <flatcc_json_parser_struct_as_root@@Base+0x818>
   1a450:	vldr	d16, [pc, #432]	; 1a608 <flatcc_json_parser_struct_as_root@@Base+0x974>
   1a454:	b	1a4ac <flatcc_json_parser_struct_as_root@@Base+0x818>
   1a458:	vldr	d16, [pc, #432]	; 1a610 <flatcc_json_parser_struct_as_root@@Base+0x97c>
   1a45c:	b	1a4ac <flatcc_json_parser_struct_as_root@@Base+0x818>
   1a460:	vldr	d16, [pc, #432]	; 1a618 <flatcc_json_parser_struct_as_root@@Base+0x984>
   1a464:	b	1a4ac <flatcc_json_parser_struct_as_root@@Base+0x818>
   1a468:	vldr	d16, [pc, #432]	; 1a620 <flatcc_json_parser_struct_as_root@@Base+0x98c>
   1a46c:	b	1a4ac <flatcc_json_parser_struct_as_root@@Base+0x818>
   1a470:	vldr	d16, [pc, #432]	; 1a628 <flatcc_json_parser_struct_as_root@@Base+0x994>
   1a474:	b	1a4ac <flatcc_json_parser_struct_as_root@@Base+0x818>
   1a478:	vldr	d16, [pc, #432]	; 1a630 <flatcc_json_parser_struct_as_root@@Base+0x99c>
   1a47c:	b	1a4ac <flatcc_json_parser_struct_as_root@@Base+0x818>
   1a480:	vldr	d16, [pc, #432]	; 1a638 <flatcc_json_parser_struct_as_root@@Base+0x9a4>
   1a484:	b	1a4ac <flatcc_json_parser_struct_as_root@@Base+0x818>
   1a488:	vldr	d16, [pc, #432]	; 1a640 <flatcc_json_parser_struct_as_root@@Base+0x9ac>
   1a48c:	b	1a4ac <flatcc_json_parser_struct_as_root@@Base+0x818>
   1a490:	vldr	d16, [pc, #432]	; 1a648 <flatcc_json_parser_struct_as_root@@Base+0x9b4>
   1a494:	b	1a4ac <flatcc_json_parser_struct_as_root@@Base+0x818>
   1a498:	vldr	d16, [pc, #432]	; 1a650 <flatcc_json_parser_struct_as_root@@Base+0x9bc>
   1a49c:	b	1a4ac <flatcc_json_parser_struct_as_root@@Base+0x818>
   1a4a0:	vldr	d16, [pc, #432]	; 1a658 <flatcc_json_parser_struct_as_root@@Base+0x9c4>
   1a4a4:	b	1a4ac <flatcc_json_parser_struct_as_root@@Base+0x818>
   1a4a8:	vmov.f64	d16, #36	; 0x41200000  10.0
   1a4ac:	vdiv.f64	d0, d0, d16
   1a4b0:	b	1a2b8 <flatcc_json_parser_struct_as_root@@Base+0x624>
   1a4b4:	vmov.f64	d16, #36	; 0x41200000  10.0
   1a4b8:	vmul.f64	d0, d0, d16
   1a4bc:	b	1a2b8 <flatcc_json_parser_struct_as_root@@Base+0x624>
   1a4c0:	vldr	d16, [pc, #400]	; 1a658 <flatcc_json_parser_struct_as_root@@Base+0x9c4>
   1a4c4:	vmul.f64	d0, d0, d16
   1a4c8:	b	1a2b8 <flatcc_json_parser_struct_as_root@@Base+0x624>
   1a4cc:	vldr	d16, [pc, #380]	; 1a650 <flatcc_json_parser_struct_as_root@@Base+0x9bc>
   1a4d0:	vmul.f64	d0, d0, d16
   1a4d4:	b	1a2b8 <flatcc_json_parser_struct_as_root@@Base+0x624>
   1a4d8:	vldr	d16, [pc, #360]	; 1a648 <flatcc_json_parser_struct_as_root@@Base+0x9b4>
   1a4dc:	vmul.f64	d0, d0, d16
   1a4e0:	b	1a2b8 <flatcc_json_parser_struct_as_root@@Base+0x624>
   1a4e4:	vldr	d16, [pc, #340]	; 1a640 <flatcc_json_parser_struct_as_root@@Base+0x9ac>
   1a4e8:	vmul.f64	d0, d0, d16
   1a4ec:	b	1a2b8 <flatcc_json_parser_struct_as_root@@Base+0x624>
   1a4f0:	vldr	d16, [pc, #320]	; 1a638 <flatcc_json_parser_struct_as_root@@Base+0x9a4>
   1a4f4:	vmul.f64	d0, d0, d16
   1a4f8:	b	1a2b8 <flatcc_json_parser_struct_as_root@@Base+0x624>
   1a4fc:	vldr	d16, [pc, #300]	; 1a630 <flatcc_json_parser_struct_as_root@@Base+0x99c>
   1a500:	vmul.f64	d0, d0, d16
   1a504:	b	1a2b8 <flatcc_json_parser_struct_as_root@@Base+0x624>
   1a508:	vldr	d16, [pc, #280]	; 1a628 <flatcc_json_parser_struct_as_root@@Base+0x994>
   1a50c:	vmul.f64	d0, d0, d16
   1a510:	b	1a2b8 <flatcc_json_parser_struct_as_root@@Base+0x624>
   1a514:	vldr	d16, [pc, #260]	; 1a620 <flatcc_json_parser_struct_as_root@@Base+0x98c>
   1a518:	vmul.f64	d0, d0, d16
   1a51c:	b	1a2b8 <flatcc_json_parser_struct_as_root@@Base+0x624>
   1a520:	vldr	d16, [pc, #240]	; 1a618 <flatcc_json_parser_struct_as_root@@Base+0x984>
   1a524:	vmul.f64	d0, d0, d16
   1a528:	b	1a2b8 <flatcc_json_parser_struct_as_root@@Base+0x624>
   1a52c:	vldr	d16, [pc, #220]	; 1a610 <flatcc_json_parser_struct_as_root@@Base+0x97c>
   1a530:	vmul.f64	d0, d0, d16
   1a534:	b	1a2b8 <flatcc_json_parser_struct_as_root@@Base+0x624>
   1a538:	vldr	d16, [pc, #200]	; 1a608 <flatcc_json_parser_struct_as_root@@Base+0x974>
   1a53c:	vmul.f64	d0, d0, d16
   1a540:	b	1a2b8 <flatcc_json_parser_struct_as_root@@Base+0x624>
   1a544:	vldr	d16, [pc, #180]	; 1a600 <flatcc_json_parser_struct_as_root@@Base+0x96c>
   1a548:	vmul.f64	d0, d0, d16
   1a54c:	b	1a2b8 <flatcc_json_parser_struct_as_root@@Base+0x624>
   1a550:	vldr	d16, [pc, #160]	; 1a5f8 <flatcc_json_parser_struct_as_root@@Base+0x964>
   1a554:	vmul.f64	d0, d0, d16
   1a558:	b	1a2b8 <flatcc_json_parser_struct_as_root@@Base+0x624>
   1a55c:	vldr	d16, [pc, #140]	; 1a5f0 <flatcc_json_parser_struct_as_root@@Base+0x95c>
   1a560:	vmul.f64	d0, d0, d16
   1a564:	b	1a2b8 <flatcc_json_parser_struct_as_root@@Base+0x624>
   1a568:	vldr	d16, [pc, #120]	; 1a5e8 <flatcc_json_parser_struct_as_root@@Base+0x954>
   1a56c:	vmul.f64	d0, d0, d16
   1a570:	b	1a2b8 <flatcc_json_parser_struct_as_root@@Base+0x624>
   1a574:	vldr	d16, [pc, #100]	; 1a5e0 <flatcc_json_parser_struct_as_root@@Base+0x94c>
   1a578:	vmul.f64	d0, d0, d16
   1a57c:	b	1a2b8 <flatcc_json_parser_struct_as_root@@Base+0x624>
   1a580:	vldr	d16, [pc, #80]	; 1a5d8 <flatcc_json_parser_struct_as_root@@Base+0x944>
   1a584:	vmul.f64	d0, d0, d16
   1a588:	b	1a2b8 <flatcc_json_parser_struct_as_root@@Base+0x624>
   1a58c:	vldr	d16, [pc, #60]	; 1a5d0 <flatcc_json_parser_struct_as_root@@Base+0x93c>
   1a590:	vmul.f64	d0, d0, d16
   1a594:	b	1a2b8 <flatcc_json_parser_struct_as_root@@Base+0x624>
   1a598:	vldr	d16, [pc, #40]	; 1a5c8 <flatcc_json_parser_struct_as_root@@Base+0x934>
   1a59c:	vmul.f64	d0, d0, d16
   1a5a0:	b	1a2b8 <flatcc_json_parser_struct_as_root@@Base+0x624>
   1a5a4:	vldr	d16, [pc, #20]	; 1a5c0 <flatcc_json_parser_struct_as_root@@Base+0x92c>
   1a5a8:	vmul.f64	d0, d0, d16
   1a5ac:	b	1a2b8 <flatcc_json_parser_struct_as_root@@Base+0x624>
   1a5b0:	vldr	d16, [pc, #168]	; 1a660 <flatcc_json_parser_struct_as_root@@Base+0x9cc>
   1a5b4:	vmul.f64	d0, d0, d16
   1a5b8:	b	1a2b8 <flatcc_json_parser_struct_as_root@@Base+0x624>
   1a5bc:	nop	{0}
   1a5c0:	usatle	lr, #2, r0, asr #30
   1a5c4:	strbmi	r1, [fp], #-2788	; 0xfffff51c
   1a5c8:	ldmvc	r5!, {r6, sl, fp, pc}
   1a5cc:	ldrmi	sl, [r5], #-3869	; 0xfffff0e3
   1a5d0:	addsvs	r3, r1, r0, lsl #26
   1a5d4:	mvnmi	r5, #228, 16	; 0xe40000
   1a5d8:	strbvs	ip, [lr, -r0, lsl #16]
   1a5dc:			; <UNDEFINED> instruction: 0x43abc16d
   1a5e0:	ldrbhi	sl, [r8]
   1a5e4:	cmnmi	r6, #1459617792	; 0x57000000
   1a5e8:	strbcc	r8, [r0, r0]!
   1a5ec:	movtmi	ip, #4985	; 0x1379
   1a5f0:	ldrtcs	r0, [r4], -r0
   1a5f4:	movwmi	r6, #52213	; 0xcbf5
   1a5f8:	cdpne	0, 9, cr0, cr0, cr0, {0}
   1a5fc:	sbcsmi	fp, r6, #196, 24	; 0xc400
   1a600:	strb	r0, [r0, #-0]
   1a604:	adcmi	r3, r2, #156	; 0x9c
   1a608:	andge	r0, r0, #0
   1a60c:	rsbmi	r1, sp, #148, 20	; 0x94000
   1a610:	stmda	r0, {}	; <UNPREDICTABLE>
   1a614:	eorsmi	r4, r7, #7733248	; 0x760000
   1a618:	andcs	r0, r0, r0
   1a61c:	andmi	sl, r2, #95	; 0x5f
   1a620:	andeq	r0, r0, r0
   1a624:	bicmi	ip, sp, r5, ror #26
   1a628:	andeq	r0, r0, r0
   1a62c:	orrsmi	sp, r7, r4, lsl #15
   1a630:	andeq	r0, r0, r0
   1a634:	ldrdmi	r1, [r3, #-32]!	; 0xffffffe0
   1a638:	andeq	r0, r0, r0
   1a63c:	smlawbmi	lr, r0, r4, r8
   1a640:	andeq	r0, r0, r0
   1a644:	rscsmi	r6, r8, r0, lsl #20
   1a648:	andeq	r0, r0, r0
   1a64c:	sbcmi	r8, r3, r0, lsl #16
   1a650:	andeq	r0, r0, r0
   1a654:	addmi	r4, pc, r0
   1a658:	andeq	r0, r0, r0
   1a65c:	subsmi	r0, r9, r0
   1a660:			; <UNDEFINED> instruction: 0x064dd592
   1a664:	strmi	pc, [r0], #207	; 0xcf
   1a668:	push	{fp, lr}
   1a66c:	mov	fp, sp
   1a670:	cmp	r3, #0
   1a674:	beq	1a684 <flatcc_json_parser_struct_as_root@@Base+0x9f0>
   1a678:	mov	r3, #8
   1a67c:	pop	{fp, lr}
   1a680:	b	17760 <flatcc_json_parser_set_error@@Base>
   1a684:	ldr	ip, [fp, #12]
   1a688:	ldr	lr, [fp, #8]
   1a68c:	subs	r3, lr, #256	; 0x100
   1a690:	sbcs	r3, ip, #0
   1a694:	ldrcc	r0, [fp, #16]
   1a698:	strbcc	lr, [r0]
   1a69c:	movcc	r0, r1
   1a6a0:	popcc	{fp, pc}
   1a6a4:	mov	r3, #7
   1a6a8:	pop	{fp, lr}
   1a6ac:	b	17760 <flatcc_json_parser_set_error@@Base>
   1a6b0:	push	{r4, r5, fp, lr}
   1a6b4:	add	fp, sp, #8
   1a6b8:	mov	r4, r2
   1a6bc:	mov	r5, r0
   1a6c0:	bl	185b0 <flatcc_json_parser_float@@Base+0x140>
   1a6c4:	mov	r1, r0
   1a6c8:	ldr	r0, [r5, #12]
   1a6cc:	cmp	r0, #0
   1a6d0:	movne	r0, r1
   1a6d4:	popne	{r4, r5, fp, pc}
   1a6d8:	mov	r0, r5
   1a6dc:	mov	r2, r4
   1a6e0:	pop	{r4, r5, fp, lr}
   1a6e4:	b	17d54 <flatcc_json_parser_skip_constant@@Base+0x8c>
   1a6e8:	bx	lr
   1a6ec:	eor	r1, r1, #-2147483648	; 0x80000000
   1a6f0:	b	1a6f8 <flatcc_json_parser_struct_as_root@@Base+0xa64>
   1a6f4:	eor	r3, r3, #-2147483648	; 0x80000000
   1a6f8:	push	{r4, r5, lr}
   1a6fc:	lsl	r4, r1, #1
   1a700:	lsl	r5, r3, #1
   1a704:	teq	r4, r5
   1a708:	teqeq	r0, r2
   1a70c:	orrsne	ip, r4, r0
   1a710:	orrsne	ip, r5, r2
   1a714:	mvnsne	ip, r4, asr #21
   1a718:	mvnsne	ip, r5, asr #21
   1a71c:	beq	1a908 <flatcc_json_parser_struct_as_root@@Base+0xc74>
   1a720:	lsr	r4, r4, #21
   1a724:	rsbs	r5, r4, r5, lsr #21
   1a728:	rsblt	r5, r5, #0
   1a72c:	ble	1a74c <flatcc_json_parser_struct_as_root@@Base+0xab8>
   1a730:	add	r4, r4, r5
   1a734:	eor	r2, r0, r2
   1a738:	eor	r3, r1, r3
   1a73c:	eor	r0, r2, r0
   1a740:	eor	r1, r3, r1
   1a744:	eor	r2, r0, r2
   1a748:	eor	r3, r1, r3
   1a74c:	cmp	r5, #54	; 0x36
   1a750:	pophi	{r4, r5, pc}
   1a754:	tst	r1, #-2147483648	; 0x80000000
   1a758:	lsl	r1, r1, #12
   1a75c:	mov	ip, #1048576	; 0x100000
   1a760:	orr	r1, ip, r1, lsr #12
   1a764:	beq	1a770 <flatcc_json_parser_struct_as_root@@Base+0xadc>
   1a768:	rsbs	r0, r0, #0
   1a76c:	rsc	r1, r1, #0
   1a770:	tst	r3, #-2147483648	; 0x80000000
   1a774:	lsl	r3, r3, #12
   1a778:	orr	r3, ip, r3, lsr #12
   1a77c:	beq	1a788 <flatcc_json_parser_struct_as_root@@Base+0xaf4>
   1a780:	rsbs	r2, r2, #0
   1a784:	rsc	r3, r3, #0
   1a788:	teq	r4, r5
   1a78c:	beq	1a8f0 <flatcc_json_parser_struct_as_root@@Base+0xc5c>
   1a790:	sub	r4, r4, #1
   1a794:	rsbs	lr, r5, #32
   1a798:	blt	1a7b4 <flatcc_json_parser_struct_as_root@@Base+0xb20>
   1a79c:	lsl	ip, r2, lr
   1a7a0:	adds	r0, r0, r2, lsr r5
   1a7a4:	adc	r1, r1, #0
   1a7a8:	adds	r0, r0, r3, lsl lr
   1a7ac:	adcs	r1, r1, r3, asr r5
   1a7b0:	b	1a7d0 <flatcc_json_parser_struct_as_root@@Base+0xb3c>
   1a7b4:	sub	r5, r5, #32
   1a7b8:	add	lr, lr, #32
   1a7bc:	cmp	r2, #1
   1a7c0:	lsl	ip, r3, lr
   1a7c4:	orrcs	ip, ip, #2
   1a7c8:	adds	r0, r0, r3, asr r5
   1a7cc:	adcs	r1, r1, r3, asr #31
   1a7d0:	and	r5, r1, #-2147483648	; 0x80000000
   1a7d4:	bpl	1a7e4 <flatcc_json_parser_struct_as_root@@Base+0xb50>
   1a7d8:	rsbs	ip, ip, #0
   1a7dc:	rscs	r0, r0, #0
   1a7e0:	rsc	r1, r1, #0
   1a7e4:	cmp	r1, #1048576	; 0x100000
   1a7e8:	bcc	1a828 <flatcc_json_parser_struct_as_root@@Base+0xb94>
   1a7ec:	cmp	r1, #2097152	; 0x200000
   1a7f0:	bcc	1a810 <flatcc_json_parser_struct_as_root@@Base+0xb7c>
   1a7f4:	lsrs	r1, r1, #1
   1a7f8:	rrxs	r0, r0
   1a7fc:	rrx	ip, ip
   1a800:	add	r4, r4, #1
   1a804:	lsl	r2, r4, #21
   1a808:	cmn	r2, #4194304	; 0x400000
   1a80c:	bcs	1a968 <flatcc_json_parser_struct_as_root@@Base+0xcd4>
   1a810:	cmp	ip, #-2147483648	; 0x80000000
   1a814:	lsrseq	ip, r0, #1
   1a818:	adcs	r0, r0, #0
   1a81c:	adc	r1, r1, r4, lsl #20
   1a820:	orr	r1, r1, r5
   1a824:	pop	{r4, r5, pc}
   1a828:	lsls	ip, ip, #1
   1a82c:	adcs	r0, r0, r0
   1a830:	adc	r1, r1, r1
   1a834:	tst	r1, #1048576	; 0x100000
   1a838:	sub	r4, r4, #1
   1a83c:	bne	1a810 <flatcc_json_parser_struct_as_root@@Base+0xb7c>
   1a840:	teq	r1, #0
   1a844:	moveq	r1, r0
   1a848:	moveq	r0, #0
   1a84c:	clz	r3, r1
   1a850:	addeq	r3, r3, #32
   1a854:	sub	r3, r3, #11
   1a858:	subs	r2, r3, #32
   1a85c:	bge	1a880 <flatcc_json_parser_struct_as_root@@Base+0xbec>
   1a860:	adds	r2, r2, #12
   1a864:	ble	1a87c <flatcc_json_parser_struct_as_root@@Base+0xbe8>
   1a868:	add	ip, r2, #20
   1a86c:	rsb	r2, r2, #12
   1a870:	lsl	r0, r1, ip
   1a874:	lsr	r1, r1, r2
   1a878:	b	1a890 <flatcc_json_parser_struct_as_root@@Base+0xbfc>
   1a87c:	add	r2, r2, #20
   1a880:	rsble	ip, r2, #32
   1a884:	lsl	r1, r1, r2
   1a888:	orrle	r1, r1, r0, lsr ip
   1a88c:	lslle	r0, r0, r2
   1a890:	subs	r4, r4, r3
   1a894:	addge	r1, r1, r4, lsl #20
   1a898:	orrge	r1, r1, r5
   1a89c:	popge	{r4, r5, pc}
   1a8a0:	mvn	r4, r4
   1a8a4:	subs	r4, r4, #31
   1a8a8:	bge	1a8e4 <flatcc_json_parser_struct_as_root@@Base+0xc50>
   1a8ac:	adds	r4, r4, #12
   1a8b0:	bgt	1a8cc <flatcc_json_parser_struct_as_root@@Base+0xc38>
   1a8b4:	add	r4, r4, #20
   1a8b8:	rsb	r2, r4, #32
   1a8bc:	lsr	r0, r0, r4
   1a8c0:	orr	r0, r0, r1, lsl r2
   1a8c4:	orr	r1, r5, r1, lsr r4
   1a8c8:	pop	{r4, r5, pc}
   1a8cc:	rsb	r4, r4, #12
   1a8d0:	rsb	r2, r4, #32
   1a8d4:	lsr	r0, r0, r2
   1a8d8:	orr	r0, r0, r1, lsl r4
   1a8dc:	mov	r1, r5
   1a8e0:	pop	{r4, r5, pc}
   1a8e4:	lsr	r0, r1, r4
   1a8e8:	mov	r1, r5
   1a8ec:	pop	{r4, r5, pc}
   1a8f0:	teq	r4, #0
   1a8f4:	eor	r3, r3, #1048576	; 0x100000
   1a8f8:	eoreq	r1, r1, #1048576	; 0x100000
   1a8fc:	addeq	r4, r4, #1
   1a900:	subne	r5, r5, #1
   1a904:	b	1a790 <flatcc_json_parser_struct_as_root@@Base+0xafc>
   1a908:	mvns	ip, r4, asr #21
   1a90c:	mvnsne	ip, r5, asr #21
   1a910:	beq	1a978 <flatcc_json_parser_struct_as_root@@Base+0xce4>
   1a914:	teq	r4, r5
   1a918:	teqeq	r0, r2
   1a91c:	beq	1a930 <flatcc_json_parser_struct_as_root@@Base+0xc9c>
   1a920:	orrs	ip, r4, r0
   1a924:	moveq	r1, r3
   1a928:	moveq	r0, r2
   1a92c:	pop	{r4, r5, pc}
   1a930:	teq	r1, r3
   1a934:	movne	r1, #0
   1a938:	movne	r0, #0
   1a93c:	popne	{r4, r5, pc}
   1a940:	lsrs	ip, r4, #21
   1a944:	bne	1a958 <flatcc_json_parser_struct_as_root@@Base+0xcc4>
   1a948:	lsls	r0, r0, #1
   1a94c:	adcs	r1, r1, r1
   1a950:	orrcs	r1, r1, #-2147483648	; 0x80000000
   1a954:	pop	{r4, r5, pc}
   1a958:	adds	r4, r4, #4194304	; 0x400000
   1a95c:	addcc	r1, r1, #1048576	; 0x100000
   1a960:	popcc	{r4, r5, pc}
   1a964:	and	r5, r1, #-2147483648	; 0x80000000
   1a968:	orr	r1, r5, #2130706432	; 0x7f000000
   1a96c:	orr	r1, r1, #15728640	; 0xf00000
   1a970:	mov	r0, #0
   1a974:	pop	{r4, r5, pc}
   1a978:	mvns	ip, r4, asr #21
   1a97c:	movne	r1, r3
   1a980:	movne	r0, r2
   1a984:	mvnseq	ip, r5, asr #21
   1a988:	movne	r3, r1
   1a98c:	movne	r2, r0
   1a990:	orrs	r4, r0, r1, lsl #12
   1a994:	orrseq	r5, r2, r3, lsl #12
   1a998:	teqeq	r1, r3
   1a99c:	orrne	r1, r1, #524288	; 0x80000
   1a9a0:	pop	{r4, r5, pc}
   1a9a4:	teq	r0, #0
   1a9a8:	moveq	r1, #0
   1a9ac:	bxeq	lr
   1a9b0:	push	{r4, r5, lr}
   1a9b4:	mov	r4, #1024	; 0x400
   1a9b8:	add	r4, r4, #50	; 0x32
   1a9bc:	mov	r5, #0
   1a9c0:	mov	r1, #0
   1a9c4:	b	1a840 <flatcc_json_parser_struct_as_root@@Base+0xbac>
   1a9c8:	teq	r0, #0
   1a9cc:	moveq	r1, #0
   1a9d0:	bxeq	lr
   1a9d4:	push	{r4, r5, lr}
   1a9d8:	mov	r4, #1024	; 0x400
   1a9dc:	add	r4, r4, #50	; 0x32
   1a9e0:	ands	r5, r0, #-2147483648	; 0x80000000
   1a9e4:	rsbmi	r0, r0, #0
   1a9e8:	mov	r1, #0
   1a9ec:	b	1a840 <flatcc_json_parser_struct_as_root@@Base+0xbac>
   1a9f0:	lsls	r2, r0, #1
   1a9f4:	asr	r1, r2, #3
   1a9f8:	rrx	r1, r1
   1a9fc:	lsl	r0, r2, #28
   1aa00:	andsne	r3, r2, #-16777216	; 0xff000000
   1aa04:	teqne	r3, #-16777216	; 0xff000000
   1aa08:	eorne	r1, r1, #939524096	; 0x38000000
   1aa0c:	bxne	lr
   1aa10:	bics	r2, r2, #-16777216	; 0xff000000
   1aa14:	bxeq	lr
   1aa18:	teq	r3, #-16777216	; 0xff000000
   1aa1c:	orreq	r1, r1, #524288	; 0x80000
   1aa20:	bxeq	lr
   1aa24:	push	{r4, r5, lr}
   1aa28:	mov	r4, #896	; 0x380
   1aa2c:	and	r5, r1, #-2147483648	; 0x80000000
   1aa30:	bic	r1, r1, #-2147483648	; 0x80000000
   1aa34:	b	1a840 <flatcc_json_parser_struct_as_root@@Base+0xbac>
   1aa38:	orrs	r2, r0, r1
   1aa3c:	bxeq	lr
   1aa40:	push	{r4, r5, lr}
   1aa44:	mov	r5, #0
   1aa48:	b	1aa68 <flatcc_json_parser_struct_as_root@@Base+0xdd4>
   1aa4c:	orrs	r2, r0, r1
   1aa50:	bxeq	lr
   1aa54:	push	{r4, r5, lr}
   1aa58:	ands	r5, r1, #-2147483648	; 0x80000000
   1aa5c:	bpl	1aa68 <flatcc_json_parser_struct_as_root@@Base+0xdd4>
   1aa60:	rsbs	r0, r0, #0
   1aa64:	rsc	r1, r1, #0
   1aa68:	mov	r4, #1024	; 0x400
   1aa6c:	add	r4, r4, #50	; 0x32
   1aa70:	lsrs	ip, r1, #22
   1aa74:	beq	1a7e4 <flatcc_json_parser_struct_as_root@@Base+0xb50>
   1aa78:	mov	r2, #3
   1aa7c:	lsrs	ip, ip, #3
   1aa80:	addne	r2, r2, #3
   1aa84:	lsrs	ip, ip, #3
   1aa88:	addne	r2, r2, #3
   1aa8c:	add	r2, r2, ip, lsr #3
   1aa90:	rsb	r3, r2, #32
   1aa94:	lsl	ip, r0, r3
   1aa98:	lsr	r0, r0, r2
   1aa9c:	orr	r0, r0, r1, lsl r3
   1aaa0:	lsr	r1, r1, r2
   1aaa4:	add	r4, r4, r2
   1aaa8:	b	1a7e4 <flatcc_json_parser_struct_as_root@@Base+0xb50>

0001aaac <__libc_csu_init@@Base>:
   1aaac:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1aab0:	mov	r7, r0
   1aab4:	ldr	r6, [pc, #72]	; 1ab04 <__libc_csu_init@@Base+0x58>
   1aab8:	ldr	r5, [pc, #72]	; 1ab08 <__libc_csu_init@@Base+0x5c>
   1aabc:	add	r6, pc, r6
   1aac0:	add	r5, pc, r5
   1aac4:	sub	r6, r6, r5
   1aac8:	mov	r8, r1
   1aacc:	mov	r9, r2
   1aad0:	bl	128d8 <free@plt-0x20>
   1aad4:	asrs	r6, r6, #2
   1aad8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1aadc:	mov	r4, #0
   1aae0:	add	r4, r4, #1
   1aae4:	ldr	r3, [r5], #4
   1aae8:	mov	r2, r9
   1aaec:	mov	r1, r8
   1aaf0:	mov	r0, r7
   1aaf4:	blx	r3
   1aaf8:	cmp	r6, r4
   1aafc:	bne	1aae0 <__libc_csu_init@@Base+0x34>
   1ab00:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1ab04:	andeq	r3, r1, r8, asr #8
   1ab08:	andeq	r3, r1, r0, asr #8

0001ab0c <__libc_csu_fini@@Base>:
   1ab0c:	bx	lr

Disassembly of section .fini:

0001ab10 <.fini>:
   1ab10:	push	{r3, lr}
   1ab14:	pop	{r3, pc}
