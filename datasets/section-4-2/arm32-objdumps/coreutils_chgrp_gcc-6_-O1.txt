
../repos/coreutils/src/chgrp:     file format elf32-littlearm


Disassembly of section .init:

00010fc8 <.init>:
   10fc8:	push	{r3, lr}
   10fcc:	bl	1137c <__assert_fail@plt+0x4c>
   10fd0:	pop	{r3, pc}

Disassembly of section .plt:

00010fd4 <fstatfs64@plt-0x14>:
   10fd4:	push	{lr}		; (str lr, [sp, #-4]!)
   10fd8:	ldr	lr, [pc, #4]	; 10fe4 <fstatfs64@plt-0x4>
   10fdc:	add	lr, pc, lr
   10fe0:	ldr	pc, [lr, #8]!
   10fe4:	andeq	fp, r1, ip, lsl r0

00010fe8 <fstatfs64@plt>:
   10fe8:	add	ip, pc, #0, 12
   10fec:	add	ip, ip, #110592	; 0x1b000
   10ff0:	ldr	pc, [ip, #28]!

00010ff4 <calloc@plt>:
   10ff4:	add	ip, pc, #0, 12
   10ff8:	add	ip, ip, #110592	; 0x1b000
   10ffc:	ldr	pc, [ip, #20]!

00011000 <endgrent@plt>:
   11000:	add	ip, pc, #0, 12
   11004:	add	ip, ip, #110592	; 0x1b000
   11008:	ldr	pc, [ip, #12]!

0001100c <fputs_unlocked@plt>:
   1100c:	add	ip, pc, #0, 12
   11010:	add	ip, ip, #110592	; 0x1b000
   11014:	ldr	pc, [ip, #4]!

00011018 <raise@plt>:
   11018:	add	ip, pc, #0, 12
   1101c:	add	ip, ip, #106496	; 0x1a000
   11020:	ldr	pc, [ip, #4092]!	; 0xffc

00011024 <strcmp@plt>:
   11024:	add	ip, pc, #0, 12
   11028:	add	ip, ip, #106496	; 0x1a000
   1102c:	ldr	pc, [ip, #4084]!	; 0xff4

00011030 <getpwuid@plt>:
   11030:	add	ip, pc, #0, 12
   11034:	add	ip, ip, #106496	; 0x1a000
   11038:	ldr	pc, [ip, #4076]!	; 0xfec

0001103c <fflush@plt>:
   1103c:	add	ip, pc, #0, 12
   11040:	add	ip, ip, #106496	; 0x1a000
   11044:	ldr	pc, [ip, #4068]!	; 0xfe4

00011048 <memmove@plt>:
   11048:	add	ip, pc, #0, 12
   1104c:	add	ip, ip, #106496	; 0x1a000
   11050:	ldr	pc, [ip, #4060]!	; 0xfdc

00011054 <free@plt>:
   11054:	add	ip, pc, #0, 12
   11058:	add	ip, ip, #106496	; 0x1a000
   1105c:	ldr	pc, [ip, #4052]!	; 0xfd4

00011060 <__openat64_2@plt>:
   11060:	add	ip, pc, #0, 12
   11064:	add	ip, ip, #106496	; 0x1a000
   11068:	ldr	pc, [ip, #4044]!	; 0xfcc

0001106c <_exit@plt>:
   1106c:	add	ip, pc, #0, 12
   11070:	add	ip, ip, #106496	; 0x1a000
   11074:	ldr	pc, [ip, #4036]!	; 0xfc4

00011078 <memcpy@plt>:
   11078:	add	ip, pc, #0, 12
   1107c:	add	ip, ip, #106496	; 0x1a000
   11080:	ldr	pc, [ip, #4028]!	; 0xfbc

00011084 <__strtoull_internal@plt>:
   11084:	add	ip, pc, #0, 12
   11088:	add	ip, ip, #106496	; 0x1a000
   1108c:	ldr	pc, [ip, #4020]!	; 0xfb4

00011090 <mbsinit@plt>:
   11090:	add	ip, pc, #0, 12
   11094:	add	ip, ip, #106496	; 0x1a000
   11098:	ldr	pc, [ip, #4012]!	; 0xfac

0001109c <memcmp@plt>:
   1109c:	add	ip, pc, #0, 12
   110a0:	add	ip, ip, #106496	; 0x1a000
   110a4:	ldr	pc, [ip, #4004]!	; 0xfa4

000110a8 <stpcpy@plt>:
   110a8:	add	ip, pc, #0, 12
   110ac:	add	ip, ip, #106496	; 0x1a000
   110b0:	ldr	pc, [ip, #3996]!	; 0xf9c

000110b4 <fputc_unlocked@plt>:
   110b4:	add	ip, pc, #0, 12
   110b8:	add	ip, ip, #106496	; 0x1a000
   110bc:	ldr	pc, [ip, #3988]!	; 0xf94

000110c0 <dcgettext@plt>:
   110c0:	add	ip, pc, #0, 12
   110c4:	add	ip, ip, #106496	; 0x1a000
   110c8:	ldr	pc, [ip, #3980]!	; 0xf8c

000110cc <realloc@plt>:
   110cc:	add	ip, pc, #0, 12
   110d0:	add	ip, ip, #106496	; 0x1a000
   110d4:	ldr	pc, [ip, #3972]!	; 0xf84

000110d8 <textdomain@plt>:
   110d8:	add	ip, pc, #0, 12
   110dc:	add	ip, ip, #106496	; 0x1a000
   110e0:	ldr	pc, [ip, #3964]!	; 0xf7c

000110e4 <__fxstatat64@plt>:
   110e4:	add	ip, pc, #0, 12
   110e8:	add	ip, ip, #106496	; 0x1a000
   110ec:	ldr	pc, [ip, #3956]!	; 0xf74

000110f0 <iswprint@plt>:
   110f0:	add	ip, pc, #0, 12
   110f4:	add	ip, ip, #106496	; 0x1a000
   110f8:	ldr	pc, [ip, #3948]!	; 0xf6c

000110fc <__fxstat64@plt>:
   110fc:	add	ip, pc, #0, 12
   11100:	add	ip, ip, #106496	; 0x1a000
   11104:	ldr	pc, [ip, #3940]!	; 0xf64

00011108 <fwrite@plt>:
   11108:	add	ip, pc, #0, 12
   1110c:	add	ip, ip, #106496	; 0x1a000
   11110:	ldr	pc, [ip, #3932]!	; 0xf5c

00011114 <lseek64@plt>:
   11114:	add	ip, pc, #0, 12
   11118:	add	ip, ip, #106496	; 0x1a000
   1111c:	ldr	pc, [ip, #3924]!	; 0xf54

00011120 <__ctype_get_mb_cur_max@plt>:
   11120:	add	ip, pc, #0, 12
   11124:	add	ip, ip, #106496	; 0x1a000
   11128:	ldr	pc, [ip, #3916]!	; 0xf4c

0001112c <strcpy@plt>:
   1112c:	add	ip, pc, #0, 12
   11130:	add	ip, ip, #106496	; 0x1a000
   11134:	ldr	pc, [ip, #3908]!	; 0xf44

00011138 <__fpending@plt>:
   11138:	add	ip, pc, #0, 12
   1113c:	add	ip, ip, #106496	; 0x1a000
   11140:	ldr	pc, [ip, #3900]!	; 0xf3c

00011144 <mbrtowc@plt>:
   11144:	add	ip, pc, #0, 12
   11148:	add	ip, ip, #106496	; 0x1a000
   1114c:	ldr	pc, [ip, #3892]!	; 0xf34

00011150 <error@plt>:
   11150:	add	ip, pc, #0, 12
   11154:	add	ip, ip, #106496	; 0x1a000
   11158:	ldr	pc, [ip, #3884]!	; 0xf2c

0001115c <open64@plt>:
   1115c:	add	ip, pc, #0, 12
   11160:	add	ip, ip, #106496	; 0x1a000
   11164:	ldr	pc, [ip, #3876]!	; 0xf24

00011168 <malloc@plt>:
   11168:	add	ip, pc, #0, 12
   1116c:	add	ip, ip, #106496	; 0x1a000
   11170:	ldr	pc, [ip, #3868]!	; 0xf1c

00011174 <__libc_start_main@plt>:
   11174:	add	ip, pc, #0, 12
   11178:	add	ip, ip, #106496	; 0x1a000
   1117c:	ldr	pc, [ip, #3860]!	; 0xf14

00011180 <__freading@plt>:
   11180:	add	ip, pc, #0, 12
   11184:	add	ip, ip, #106496	; 0x1a000
   11188:	ldr	pc, [ip, #3852]!	; 0xf0c

0001118c <__gmon_start__@plt>:
   1118c:	add	ip, pc, #0, 12
   11190:	add	ip, ip, #106496	; 0x1a000
   11194:	ldr	pc, [ip, #3844]!	; 0xf04

00011198 <getopt_long@plt>:
   11198:	add	ip, pc, #0, 12
   1119c:	add	ip, ip, #106496	; 0x1a000
   111a0:	ldr	pc, [ip, #3836]!	; 0xefc

000111a4 <__ctype_b_loc@plt>:
   111a4:	add	ip, pc, #0, 12
   111a8:	add	ip, ip, #106496	; 0x1a000
   111ac:	ldr	pc, [ip, #3828]!	; 0xef4

000111b0 <exit@plt>:
   111b0:	add	ip, pc, #0, 12
   111b4:	add	ip, ip, #106496	; 0x1a000
   111b8:	ldr	pc, [ip, #3820]!	; 0xeec

000111bc <strlen@plt>:
   111bc:	add	ip, pc, #0, 12
   111c0:	add	ip, ip, #106496	; 0x1a000
   111c4:	ldr	pc, [ip, #3812]!	; 0xee4

000111c8 <strchr@plt>:
   111c8:	add	ip, pc, #0, 12
   111cc:	add	ip, ip, #106496	; 0x1a000
   111d0:	ldr	pc, [ip, #3804]!	; 0xedc

000111d4 <openat64@plt>:
   111d4:	add	ip, pc, #0, 12
   111d8:	add	ip, ip, #106496	; 0x1a000
   111dc:	ldr	pc, [ip, #3796]!	; 0xed4

000111e0 <fchown@plt>:
   111e0:	add	ip, pc, #0, 12
   111e4:	add	ip, ip, #106496	; 0x1a000
   111e8:	ldr	pc, [ip, #3788]!	; 0xecc

000111ec <__errno_location@plt>:
   111ec:	add	ip, pc, #0, 12
   111f0:	add	ip, ip, #106496	; 0x1a000
   111f4:	ldr	pc, [ip, #3780]!	; 0xec4

000111f8 <__cxa_atexit@plt>:
   111f8:	add	ip, pc, #0, 12
   111fc:	add	ip, ip, #106496	; 0x1a000
   11200:	ldr	pc, [ip, #3772]!	; 0xebc

00011204 <memset@plt>:
   11204:	add	ip, pc, #0, 12
   11208:	add	ip, ip, #106496	; 0x1a000
   1120c:	ldr	pc, [ip, #3764]!	; 0xeb4

00011210 <__printf_chk@plt>:
   11210:	add	ip, pc, #0, 12
   11214:	add	ip, ip, #106496	; 0x1a000
   11218:	ldr	pc, [ip, #3756]!	; 0xeac

0001121c <fileno@plt>:
   1121c:	add	ip, pc, #0, 12
   11220:	add	ip, ip, #106496	; 0x1a000
   11224:	ldr	pc, [ip, #3748]!	; 0xea4

00011228 <__fprintf_chk@plt>:
   11228:	add	ip, pc, #0, 12
   1122c:	add	ip, ip, #106496	; 0x1a000
   11230:	ldr	pc, [ip, #3740]!	; 0xe9c

00011234 <fclose@plt>:
   11234:	add	ip, pc, #0, 12
   11238:	add	ip, ip, #106496	; 0x1a000
   1123c:	ldr	pc, [ip, #3732]!	; 0xe94

00011240 <fseeko64@plt>:
   11240:	add	ip, pc, #0, 12
   11244:	add	ip, ip, #106496	; 0x1a000
   11248:	ldr	pc, [ip, #3724]!	; 0xe8c

0001124c <fcntl64@plt>:
   1124c:	add	ip, pc, #0, 12
   11250:	add	ip, ip, #106496	; 0x1a000
   11254:	ldr	pc, [ip, #3716]!	; 0xe84

00011258 <setlocale@plt>:
   11258:	add	ip, pc, #0, 12
   1125c:	add	ip, ip, #106496	; 0x1a000
   11260:	ldr	pc, [ip, #3708]!	; 0xe7c

00011264 <strrchr@plt>:
   11264:	add	ip, pc, #0, 12
   11268:	add	ip, ip, #106496	; 0x1a000
   1126c:	ldr	pc, [ip, #3700]!	; 0xe74

00011270 <nl_langinfo@plt>:
   11270:	add	ip, pc, #0, 12
   11274:	add	ip, ip, #106496	; 0x1a000
   11278:	ldr	pc, [ip, #3692]!	; 0xe6c

0001127c <readdir64@plt>:
   1127c:	add	ip, pc, #0, 12
   11280:	add	ip, ip, #106496	; 0x1a000
   11284:	ldr	pc, [ip, #3684]!	; 0xe64

00011288 <fdopendir@plt>:
   11288:	add	ip, pc, #0, 12
   1128c:	add	ip, ip, #106496	; 0x1a000
   11290:	ldr	pc, [ip, #3676]!	; 0xe5c

00011294 <dirfd@plt>:
   11294:	add	ip, pc, #0, 12
   11298:	add	ip, ip, #106496	; 0x1a000
   1129c:	ldr	pc, [ip, #3668]!	; 0xe54

000112a0 <fchdir@plt>:
   112a0:	add	ip, pc, #0, 12
   112a4:	add	ip, ip, #106496	; 0x1a000
   112a8:	ldr	pc, [ip, #3660]!	; 0xe4c

000112ac <qsort@plt>:
   112ac:	add	ip, pc, #0, 12
   112b0:	add	ip, ip, #106496	; 0x1a000
   112b4:	ldr	pc, [ip, #3652]!	; 0xe44

000112b8 <fchownat@plt>:
   112b8:	add	ip, pc, #0, 12
   112bc:	add	ip, ip, #106496	; 0x1a000
   112c0:	ldr	pc, [ip, #3644]!	; 0xe3c

000112c4 <bindtextdomain@plt>:
   112c4:	add	ip, pc, #0, 12
   112c8:	add	ip, ip, #106496	; 0x1a000
   112cc:	ldr	pc, [ip, #3636]!	; 0xe34

000112d0 <__xstat64@plt>:
   112d0:	add	ip, pc, #0, 12
   112d4:	add	ip, ip, #106496	; 0x1a000
   112d8:	ldr	pc, [ip, #3628]!	; 0xe2c

000112dc <strncmp@plt>:
   112dc:	add	ip, pc, #0, 12
   112e0:	add	ip, ip, #106496	; 0x1a000
   112e4:	ldr	pc, [ip, #3620]!	; 0xe24

000112e8 <abort@plt>:
   112e8:	add	ip, pc, #0, 12
   112ec:	add	ip, ip, #106496	; 0x1a000
   112f0:	ldr	pc, [ip, #3612]!	; 0xe1c

000112f4 <close@plt>:
   112f4:	add	ip, pc, #0, 12
   112f8:	add	ip, ip, #106496	; 0x1a000
   112fc:	ldr	pc, [ip, #3604]!	; 0xe14

00011300 <__lxstat64@plt>:
   11300:	add	ip, pc, #0, 12
   11304:	add	ip, ip, #106496	; 0x1a000
   11308:	ldr	pc, [ip, #3596]!	; 0xe0c

0001130c <closedir@plt>:
   1130c:	add	ip, pc, #0, 12
   11310:	add	ip, ip, #106496	; 0x1a000
   11314:	ldr	pc, [ip, #3588]!	; 0xe04

00011318 <getgrgid@plt>:
   11318:	add	ip, pc, #0, 12
   1131c:	add	ip, ip, #106496	; 0x1a000
   11320:	ldr	pc, [ip, #3580]!	; 0xdfc

00011324 <getgrnam@plt>:
   11324:	add	ip, pc, #0, 12
   11328:	add	ip, ip, #106496	; 0x1a000
   1132c:	ldr	pc, [ip, #3572]!	; 0xdf4

00011330 <__assert_fail@plt>:
   11330:	add	ip, pc, #0, 12
   11334:	add	ip, ip, #106496	; 0x1a000
   11338:	ldr	pc, [ip, #3564]!	; 0xdec

Disassembly of section .text:

00011340 <.text>:
   11340:	mov	fp, #0
   11344:	mov	lr, #0
   11348:	pop	{r1}		; (ldr r1, [sp], #4)
   1134c:	mov	r2, sp
   11350:	push	{r2}		; (str r2, [sp, #-4]!)
   11354:	push	{r0}		; (str r0, [sp, #-4]!)
   11358:	ldr	ip, [pc, #16]	; 11370 <__assert_fail@plt+0x40>
   1135c:	push	{ip}		; (str ip, [sp, #-4]!)
   11360:	ldr	r0, [pc, #12]	; 11374 <__assert_fail@plt+0x44>
   11364:	ldr	r3, [pc, #12]	; 11378 <__assert_fail@plt+0x48>
   11368:	bl	11174 <__libc_start_main@plt>
   1136c:	bl	112e8 <abort@plt>
   11370:	ldrdeq	r9, [r1], -ip
   11374:	andeq	r1, r1, r4, ror #16
   11378:	andeq	r9, r1, ip, ror fp
   1137c:	ldr	r3, [pc, #20]	; 11398 <__assert_fail@plt+0x68>
   11380:	ldr	r2, [pc, #20]	; 1139c <__assert_fail@plt+0x6c>
   11384:	add	r3, pc, r3
   11388:	ldr	r2, [r3, r2]
   1138c:	cmp	r2, #0
   11390:	bxeq	lr
   11394:	b	1118c <__gmon_start__@plt>
   11398:	andeq	sl, r1, r4, ror ip
   1139c:	andeq	r0, r0, r8, lsr #2
   113a0:	ldr	r3, [pc, #28]	; 113c4 <__assert_fail@plt+0x94>
   113a4:	ldr	r0, [pc, #28]	; 113c8 <__assert_fail@plt+0x98>
   113a8:	sub	r3, r3, r0
   113ac:	cmp	r3, #6
   113b0:	bxls	lr
   113b4:	ldr	r3, [pc, #16]	; 113cc <__assert_fail@plt+0x9c>
   113b8:	cmp	r3, #0
   113bc:	bxeq	lr
   113c0:	bx	r3
   113c4:	andeq	ip, r2, pc, ror r1
   113c8:	andeq	ip, r2, ip, ror r1
   113cc:	andeq	r0, r0, r0
   113d0:	ldr	r1, [pc, #36]	; 113fc <__assert_fail@plt+0xcc>
   113d4:	ldr	r0, [pc, #36]	; 11400 <__assert_fail@plt+0xd0>
   113d8:	sub	r1, r1, r0
   113dc:	asr	r1, r1, #2
   113e0:	add	r1, r1, r1, lsr #31
   113e4:	asrs	r1, r1, #1
   113e8:	bxeq	lr
   113ec:	ldr	r3, [pc, #16]	; 11404 <__assert_fail@plt+0xd4>
   113f0:	cmp	r3, #0
   113f4:	bxeq	lr
   113f8:	bx	r3
   113fc:	andeq	ip, r2, ip, ror r1
   11400:	andeq	ip, r2, ip, ror r1
   11404:	andeq	r0, r0, r0
   11408:	push	{r4, lr}
   1140c:	ldr	r4, [pc, #24]	; 1142c <__assert_fail@plt+0xfc>
   11410:	ldrb	r3, [r4]
   11414:	cmp	r3, #0
   11418:	popne	{r4, pc}
   1141c:	bl	113a0 <__assert_fail@plt+0x70>
   11420:	mov	r3, #1
   11424:	strb	r3, [r4]
   11428:	pop	{r4, pc}
   1142c:	muleq	r2, ip, r1
   11430:	ldr	r0, [pc, #40]	; 11460 <__assert_fail@plt+0x130>
   11434:	ldr	r3, [r0]
   11438:	cmp	r3, #0
   1143c:	bne	11444 <__assert_fail@plt+0x114>
   11440:	b	113d0 <__assert_fail@plt+0xa0>
   11444:	ldr	r3, [pc, #24]	; 11464 <__assert_fail@plt+0x134>
   11448:	cmp	r3, #0
   1144c:	beq	11440 <__assert_fail@plt+0x110>
   11450:	push	{r4, lr}
   11454:	blx	r3
   11458:	pop	{r4, lr}
   1145c:	b	113d0 <__assert_fail@plt+0xa0>
   11460:	andeq	fp, r2, r4, lsl pc
   11464:	andeq	r0, r0, r0
   11468:	push	{lr}		; (str lr, [sp, #-4]!)
   1146c:	sub	sp, sp, #60	; 0x3c
   11470:	subs	r6, r0, #0
   11474:	beq	114b0 <__assert_fail@plt+0x180>
   11478:	ldr	r3, [pc, #888]	; 117f8 <__assert_fail@plt+0x4c8>
   1147c:	ldr	r4, [r3]
   11480:	mov	r2, #5
   11484:	ldr	r1, [pc, #880]	; 117fc <__assert_fail@plt+0x4cc>
   11488:	mov	r0, #0
   1148c:	bl	110c0 <dcgettext@plt>
   11490:	ldr	r3, [pc, #872]	; 11800 <__assert_fail@plt+0x4d0>
   11494:	ldr	r3, [r3]
   11498:	mov	r2, r0
   1149c:	mov	r1, #1
   114a0:	mov	r0, r4
   114a4:	bl	11228 <__fprintf_chk@plt>
   114a8:	mov	r0, r6
   114ac:	bl	111b0 <exit@plt>
   114b0:	mov	r2, #5
   114b4:	ldr	r1, [pc, #840]	; 11804 <__assert_fail@plt+0x4d4>
   114b8:	mov	r0, #0
   114bc:	bl	110c0 <dcgettext@plt>
   114c0:	ldr	r5, [pc, #824]	; 11800 <__assert_fail@plt+0x4d0>
   114c4:	ldr	r3, [r5]
   114c8:	mov	r2, r3
   114cc:	mov	r1, r0
   114d0:	mov	r0, #1
   114d4:	bl	11210 <__printf_chk@plt>
   114d8:	mov	r2, #5
   114dc:	ldr	r1, [pc, #804]	; 11808 <__assert_fail@plt+0x4d8>
   114e0:	mov	r0, #0
   114e4:	bl	110c0 <dcgettext@plt>
   114e8:	ldr	r4, [pc, #796]	; 1180c <__assert_fail@plt+0x4dc>
   114ec:	ldr	r1, [r4]
   114f0:	bl	1100c <fputs_unlocked@plt>
   114f4:	mov	r2, #5
   114f8:	ldr	r1, [pc, #784]	; 11810 <__assert_fail@plt+0x4e0>
   114fc:	mov	r0, #0
   11500:	bl	110c0 <dcgettext@plt>
   11504:	ldr	r1, [r4]
   11508:	bl	1100c <fputs_unlocked@plt>
   1150c:	mov	r2, #5
   11510:	ldr	r1, [pc, #764]	; 11814 <__assert_fail@plt+0x4e4>
   11514:	mov	r0, #0
   11518:	bl	110c0 <dcgettext@plt>
   1151c:	ldr	r1, [r4]
   11520:	bl	1100c <fputs_unlocked@plt>
   11524:	mov	r2, #5
   11528:	ldr	r1, [pc, #744]	; 11818 <__assert_fail@plt+0x4e8>
   1152c:	mov	r0, #0
   11530:	bl	110c0 <dcgettext@plt>
   11534:	ldr	r1, [r4]
   11538:	bl	1100c <fputs_unlocked@plt>
   1153c:	mov	r2, #5
   11540:	ldr	r1, [pc, #724]	; 1181c <__assert_fail@plt+0x4ec>
   11544:	mov	r0, #0
   11548:	bl	110c0 <dcgettext@plt>
   1154c:	ldr	r1, [r4]
   11550:	bl	1100c <fputs_unlocked@plt>
   11554:	mov	r2, #5
   11558:	ldr	r1, [pc, #704]	; 11820 <__assert_fail@plt+0x4f0>
   1155c:	mov	r0, #0
   11560:	bl	110c0 <dcgettext@plt>
   11564:	ldr	r1, [r4]
   11568:	bl	1100c <fputs_unlocked@plt>
   1156c:	mov	r2, #5
   11570:	ldr	r1, [pc, #684]	; 11824 <__assert_fail@plt+0x4f4>
   11574:	mov	r0, #0
   11578:	bl	110c0 <dcgettext@plt>
   1157c:	ldr	r1, [r4]
   11580:	bl	1100c <fputs_unlocked@plt>
   11584:	mov	r2, #5
   11588:	ldr	r1, [pc, #664]	; 11828 <__assert_fail@plt+0x4f8>
   1158c:	mov	r0, #0
   11590:	bl	110c0 <dcgettext@plt>
   11594:	ldr	r1, [r4]
   11598:	bl	1100c <fputs_unlocked@plt>
   1159c:	mov	r2, #5
   115a0:	ldr	r1, [pc, #644]	; 1182c <__assert_fail@plt+0x4fc>
   115a4:	mov	r0, #0
   115a8:	bl	110c0 <dcgettext@plt>
   115ac:	ldr	r1, [r4]
   115b0:	bl	1100c <fputs_unlocked@plt>
   115b4:	mov	r2, #5
   115b8:	ldr	r1, [pc, #624]	; 11830 <__assert_fail@plt+0x500>
   115bc:	mov	r0, #0
   115c0:	bl	110c0 <dcgettext@plt>
   115c4:	ldr	r1, [r4]
   115c8:	bl	1100c <fputs_unlocked@plt>
   115cc:	mov	r2, #5
   115d0:	ldr	r1, [pc, #604]	; 11834 <__assert_fail@plt+0x504>
   115d4:	mov	r0, #0
   115d8:	bl	110c0 <dcgettext@plt>
   115dc:	ldr	r2, [r5]
   115e0:	mov	r3, r2
   115e4:	mov	r1, r0
   115e8:	mov	r0, #1
   115ec:	bl	11210 <__printf_chk@plt>
   115f0:	mov	ip, sp
   115f4:	ldr	lr, [pc, #572]	; 11838 <__assert_fail@plt+0x508>
   115f8:	ldm	lr!, {r0, r1, r2, r3}
   115fc:	stmia	ip!, {r0, r1, r2, r3}
   11600:	ldm	lr!, {r0, r1, r2, r3}
   11604:	stmia	ip!, {r0, r1, r2, r3}
   11608:	ldm	lr!, {r0, r1, r2, r3}
   1160c:	stmia	ip!, {r0, r1, r2, r3}
   11610:	ldm	lr, {r0, r1}
   11614:	stm	ip, {r0, r1}
   11618:	ldr	r1, [sp]
   1161c:	cmp	r1, #0
   11620:	moveq	r4, sp
   11624:	beq	1164c <__assert_fail@plt+0x31c>
   11628:	mov	r4, sp
   1162c:	ldr	r5, [pc, #520]	; 1183c <__assert_fail@plt+0x50c>
   11630:	mov	r0, r5
   11634:	bl	11024 <strcmp@plt>
   11638:	cmp	r0, #0
   1163c:	beq	1164c <__assert_fail@plt+0x31c>
   11640:	ldr	r1, [r4, #8]!
   11644:	cmp	r1, #0
   11648:	bne	11630 <__assert_fail@plt+0x300>
   1164c:	ldr	r4, [r4, #4]
   11650:	cmp	r4, #0
   11654:	beq	11768 <__assert_fail@plt+0x438>
   11658:	mov	r2, #5
   1165c:	ldr	r1, [pc, #476]	; 11840 <__assert_fail@plt+0x510>
   11660:	mov	r0, #0
   11664:	bl	110c0 <dcgettext@plt>
   11668:	ldr	r3, [pc, #468]	; 11844 <__assert_fail@plt+0x514>
   1166c:	ldr	r2, [pc, #468]	; 11848 <__assert_fail@plt+0x518>
   11670:	mov	r1, r0
   11674:	mov	r0, #1
   11678:	bl	11210 <__printf_chk@plt>
   1167c:	mov	r1, #0
   11680:	mov	r0, #5
   11684:	bl	11258 <setlocale@plt>
   11688:	cmp	r0, #0
   1168c:	beq	116a4 <__assert_fail@plt+0x374>
   11690:	mov	r2, #3
   11694:	ldr	r1, [pc, #432]	; 1184c <__assert_fail@plt+0x51c>
   11698:	bl	112dc <strncmp@plt>
   1169c:	cmp	r0, #0
   116a0:	bne	11704 <__assert_fail@plt+0x3d4>
   116a4:	mov	r2, #5
   116a8:	ldr	r1, [pc, #416]	; 11850 <__assert_fail@plt+0x520>
   116ac:	mov	r0, #0
   116b0:	bl	110c0 <dcgettext@plt>
   116b4:	ldr	r5, [pc, #384]	; 1183c <__assert_fail@plt+0x50c>
   116b8:	mov	r3, r5
   116bc:	ldr	r2, [pc, #384]	; 11844 <__assert_fail@plt+0x514>
   116c0:	mov	r1, r0
   116c4:	mov	r0, #1
   116c8:	bl	11210 <__printf_chk@plt>
   116cc:	mov	r2, #5
   116d0:	ldr	r1, [pc, #380]	; 11854 <__assert_fail@plt+0x524>
   116d4:	mov	r0, #0
   116d8:	bl	110c0 <dcgettext@plt>
   116dc:	mov	r1, r0
   116e0:	ldr	r2, [pc, #368]	; 11858 <__assert_fail@plt+0x528>
   116e4:	ldr	r3, [pc, #368]	; 1185c <__assert_fail@plt+0x52c>
   116e8:	cmp	r4, r5
   116ec:	movne	r3, r2
   116f0:	mov	r2, r4
   116f4:	mov	r0, #1
   116f8:	bl	11210 <__printf_chk@plt>
   116fc:	b	114a8 <__assert_fail@plt+0x178>
   11700:	ldr	r4, [pc, #308]	; 1183c <__assert_fail@plt+0x50c>
   11704:	mov	r2, #5
   11708:	ldr	r1, [pc, #336]	; 11860 <__assert_fail@plt+0x530>
   1170c:	mov	r0, #0
   11710:	bl	110c0 <dcgettext@plt>
   11714:	ldr	r3, [pc, #240]	; 1180c <__assert_fail@plt+0x4dc>
   11718:	ldr	r1, [r3]
   1171c:	bl	1100c <fputs_unlocked@plt>
   11720:	b	116a4 <__assert_fail@plt+0x374>
   11724:	mov	r2, #5
   11728:	ldr	r1, [pc, #288]	; 11850 <__assert_fail@plt+0x520>
   1172c:	mov	r0, #0
   11730:	bl	110c0 <dcgettext@plt>
   11734:	ldr	r4, [pc, #256]	; 1183c <__assert_fail@plt+0x50c>
   11738:	mov	r3, r4
   1173c:	ldr	r2, [pc, #256]	; 11844 <__assert_fail@plt+0x514>
   11740:	mov	r1, r0
   11744:	mov	r0, #1
   11748:	bl	11210 <__printf_chk@plt>
   1174c:	mov	r2, #5
   11750:	ldr	r1, [pc, #252]	; 11854 <__assert_fail@plt+0x524>
   11754:	mov	r0, #0
   11758:	bl	110c0 <dcgettext@plt>
   1175c:	mov	r1, r0
   11760:	ldr	r3, [pc, #244]	; 1185c <__assert_fail@plt+0x52c>
   11764:	b	116f0 <__assert_fail@plt+0x3c0>
   11768:	mov	r2, #5
   1176c:	ldr	r1, [pc, #204]	; 11840 <__assert_fail@plt+0x510>
   11770:	mov	r0, #0
   11774:	bl	110c0 <dcgettext@plt>
   11778:	ldr	r3, [pc, #196]	; 11844 <__assert_fail@plt+0x514>
   1177c:	ldr	r2, [pc, #196]	; 11848 <__assert_fail@plt+0x518>
   11780:	mov	r1, r0
   11784:	mov	r0, #1
   11788:	bl	11210 <__printf_chk@plt>
   1178c:	mov	r1, #0
   11790:	mov	r0, #5
   11794:	bl	11258 <setlocale@plt>
   11798:	cmp	r0, #0
   1179c:	beq	11724 <__assert_fail@plt+0x3f4>
   117a0:	mov	r2, #3
   117a4:	ldr	r1, [pc, #160]	; 1184c <__assert_fail@plt+0x51c>
   117a8:	bl	112dc <strncmp@plt>
   117ac:	cmp	r0, #0
   117b0:	bne	11700 <__assert_fail@plt+0x3d0>
   117b4:	mov	r2, #5
   117b8:	ldr	r1, [pc, #144]	; 11850 <__assert_fail@plt+0x520>
   117bc:	mov	r0, #0
   117c0:	bl	110c0 <dcgettext@plt>
   117c4:	ldr	r4, [pc, #112]	; 1183c <__assert_fail@plt+0x50c>
   117c8:	mov	r3, r4
   117cc:	ldr	r2, [pc, #112]	; 11844 <__assert_fail@plt+0x514>
   117d0:	mov	r1, r0
   117d4:	mov	r0, #1
   117d8:	bl	11210 <__printf_chk@plt>
   117dc:	mov	r2, #5
   117e0:	ldr	r1, [pc, #108]	; 11854 <__assert_fail@plt+0x524>
   117e4:	mov	r0, #0
   117e8:	bl	110c0 <dcgettext@plt>
   117ec:	mov	r1, r0
   117f0:	ldr	r3, [pc, #100]	; 1185c <__assert_fail@plt+0x52c>
   117f4:	b	116f0 <__assert_fail@plt+0x3c0>
   117f8:	muleq	r2, r0, r1
   117fc:	andeq	r9, r1, r4, lsl sp
   11800:	andeq	ip, r2, r0, asr #3
   11804:	andeq	r9, r1, ip, lsr sp
   11808:	muleq	r1, r4, sp
   1180c:	muleq	r2, r4, r1
   11810:	andeq	r9, r1, r0, lsl #28
   11814:	andeq	r9, r1, ip, asr #29
   11818:			; <UNDEFINED> instruction: 0x00019fb4
   1181c:	andeq	sl, r1, ip, lsr #32
   11820:	andeq	sl, r1, ip, lsr #1
   11824:	andeq	sl, r1, r8, lsl r1
   11828:	andeq	sl, r1, r0, ror #2
   1182c:	andeq	sl, r1, r4, lsr r3
   11830:	andeq	sl, r1, r4, ror #6
   11834:	muleq	r1, ip, r3
   11838:	andeq	r9, r1, r4, lsl #24
   1183c:	andeq	r9, r1, ip, lsl #26
   11840:	andeq	sl, r1, r4, lsr #8
   11844:	andeq	sl, r1, ip, lsr r4
   11848:	andeq	sl, r1, r4, ror #8
   1184c:	andeq	sl, r1, r4, ror r4
   11850:	andeq	sl, r1, r0, asr #9
   11854:	ldrdeq	sl, [r1], -ip
   11858:	andeq	sl, r1, r0, lsr r3
   1185c:	andeq	sl, r1, ip, ror #11
   11860:	andeq	sl, r1, r8, ror r4
   11864:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11868:	sub	sp, sp, #156	; 0x9c
   1186c:	str	r0, [sp, #16]
   11870:	mov	r4, r1
   11874:	ldr	r0, [r1]
   11878:	bl	16010 <__assert_fail@plt+0x4ce0>
   1187c:	ldr	r1, [pc, #1124]	; 11ce8 <__assert_fail@plt+0x9b8>
   11880:	mov	r0, #6
   11884:	bl	11258 <setlocale@plt>
   11888:	ldr	r6, [pc, #1116]	; 11cec <__assert_fail@plt+0x9bc>
   1188c:	ldr	r1, [pc, #1116]	; 11cf0 <__assert_fail@plt+0x9c0>
   11890:	mov	r0, r6
   11894:	bl	112c4 <bindtextdomain@plt>
   11898:	mov	r0, r6
   1189c:	bl	110d8 <textdomain@plt>
   118a0:	ldr	r0, [pc, #1100]	; 11cf4 <__assert_fail@plt+0x9c4>
   118a4:	bl	19be0 <__assert_fail@plt+0x88b0>
   118a8:	add	r0, sp, #128	; 0x80
   118ac:	bl	11ddc <__assert_fail@plt+0xaac>
   118b0:	mvn	r5, #0
   118b4:	mov	r9, #16
   118b8:	mov	r3, #0
   118bc:	str	r3, [sp, #20]
   118c0:	ldr	r7, [pc, #1072]	; 11cf8 <__assert_fail@plt+0x9c8>
   118c4:	ldr	r6, [pc, #1072]	; 11cfc <__assert_fail@plt+0x9cc>
   118c8:	mov	r8, #1
   118cc:	ldr	sl, [pc, #1068]	; 11d00 <__assert_fail@plt+0x9d0>
   118d0:	ldr	fp, [pc, #1068]	; 11d04 <__assert_fail@plt+0x9d4>
   118d4:	mov	r3, #0
   118d8:	str	r3, [sp]
   118dc:	mov	r3, r7
   118e0:	mov	r2, r6
   118e4:	mov	r1, r4
   118e8:	ldr	r0, [sp, #16]
   118ec:	bl	11198 <getopt_long@plt>
   118f0:	cmn	r0, #1
   118f4:	beq	11a30 <__assert_fail@plt+0x700>
   118f8:	cmp	r0, #99	; 0x63
   118fc:	beq	119d0 <__assert_fail@plt+0x6a0>
   11900:	ble	11930 <__assert_fail@plt+0x600>
   11904:	cmp	r0, #256	; 0x100
   11908:	beq	119ac <__assert_fail@plt+0x67c>
   1190c:	bgt	11974 <__assert_fail@plt+0x644>
   11910:	cmp	r0, #104	; 0x68
   11914:	beq	119a4 <__assert_fail@plt+0x674>
   11918:	cmp	r0, #118	; 0x76
   1191c:	beq	119d8 <__assert_fail@plt+0x6a8>
   11920:	cmp	r0, #102	; 0x66
   11924:	bne	11954 <__assert_fail@plt+0x624>
   11928:	strb	r8, [sp, #141]	; 0x8d
   1192c:	b	118d4 <__assert_fail@plt+0x5a4>
   11930:	cmp	r0, #72	; 0x48
   11934:	beq	11a20 <__assert_fail@plt+0x6f0>
   11938:	ble	1195c <__assert_fail@plt+0x62c>
   1193c:	cmp	r0, #80	; 0x50
   11940:	beq	11a28 <__assert_fail@plt+0x6f8>
   11944:	cmp	r0, #82	; 0x52
   11948:	beq	119c8 <__assert_fail@plt+0x698>
   1194c:	cmp	r0, #76	; 0x4c
   11950:	beq	1199c <__assert_fail@plt+0x66c>
   11954:	mov	r0, #1
   11958:	bl	11468 <__assert_fail@plt+0x138>
   1195c:	cmn	r0, #3
   11960:	beq	119e4 <__assert_fail@plt+0x6b4>
   11964:	cmn	r0, #2
   11968:	bne	11954 <__assert_fail@plt+0x624>
   1196c:	mov	r0, #0
   11970:	bl	11468 <__assert_fail@plt+0x138>
   11974:	ldr	r3, [pc, #908]	; 11d08 <__assert_fail@plt+0x9d8>
   11978:	cmp	r0, r3
   1197c:	beq	119c0 <__assert_fail@plt+0x690>
   11980:	blt	119b4 <__assert_fail@plt+0x684>
   11984:	cmp	r0, sl
   11988:	bne	11954 <__assert_fail@plt+0x624>
   1198c:	ldr	r3, [fp]
   11990:	ldr	r2, [pc, #884]	; 11d0c <__assert_fail@plt+0x9dc>
   11994:	str	r3, [r2]
   11998:	b	118d4 <__assert_fail@plt+0x5a4>
   1199c:	mov	r9, #2
   119a0:	b	118d4 <__assert_fail@plt+0x5a4>
   119a4:	mov	r5, #0
   119a8:	b	118d4 <__assert_fail@plt+0x5a4>
   119ac:	mov	r5, r8
   119b0:	b	118d4 <__assert_fail@plt+0x5a4>
   119b4:	mov	r3, #0
   119b8:	str	r3, [sp, #20]
   119bc:	b	118d4 <__assert_fail@plt+0x5a4>
   119c0:	str	r8, [sp, #20]
   119c4:	b	118d4 <__assert_fail@plt+0x5a4>
   119c8:	strb	r8, [sp, #132]	; 0x84
   119cc:	b	118d4 <__assert_fail@plt+0x5a4>
   119d0:	str	r8, [sp, #128]	; 0x80
   119d4:	b	118d4 <__assert_fail@plt+0x5a4>
   119d8:	mov	r3, #0
   119dc:	str	r3, [sp, #128]	; 0x80
   119e0:	b	118d4 <__assert_fail@plt+0x5a4>
   119e4:	mov	r4, #0
   119e8:	str	r4, [sp, #8]
   119ec:	ldr	r3, [pc, #796]	; 11d10 <__assert_fail@plt+0x9e0>
   119f0:	str	r3, [sp, #4]
   119f4:	ldr	r3, [pc, #792]	; 11d14 <__assert_fail@plt+0x9e4>
   119f8:	str	r3, [sp]
   119fc:	ldr	r3, [pc, #788]	; 11d18 <__assert_fail@plt+0x9e8>
   11a00:	ldr	r3, [r3]
   11a04:	ldr	r2, [pc, #784]	; 11d1c <__assert_fail@plt+0x9ec>
   11a08:	ldr	r1, [pc, #784]	; 11d20 <__assert_fail@plt+0x9f0>
   11a0c:	ldr	r0, [pc, #784]	; 11d24 <__assert_fail@plt+0x9f4>
   11a10:	ldr	r0, [r0]
   11a14:	bl	180b8 <__assert_fail@plt+0x6d88>
   11a18:	mov	r0, r4
   11a1c:	bl	111b0 <exit@plt>
   11a20:	mov	r9, #17
   11a24:	b	118d4 <__assert_fail@plt+0x5a4>
   11a28:	mov	r9, #16
   11a2c:	b	118d4 <__assert_fail@plt+0x5a4>
   11a30:	ldrb	r3, [sp, #132]	; 0x84
   11a34:	cmp	r3, #0
   11a38:	beq	11a70 <__assert_fail@plt+0x740>
   11a3c:	cmp	r9, #16
   11a40:	bne	11a74 <__assert_fail@plt+0x744>
   11a44:	cmp	r5, #1
   11a48:	movne	r5, #0
   11a4c:	bne	11a74 <__assert_fail@plt+0x744>
   11a50:	mov	r2, #5
   11a54:	ldr	r1, [pc, #716]	; 11d28 <__assert_fail@plt+0x9f8>
   11a58:	mov	r0, #0
   11a5c:	bl	110c0 <dcgettext@plt>
   11a60:	mov	r2, r0
   11a64:	mov	r1, #0
   11a68:	mov	r0, #1
   11a6c:	bl	11150 <error@plt>
   11a70:	mov	r9, #16
   11a74:	adds	r3, r5, #0
   11a78:	movne	r3, #1
   11a7c:	strb	r3, [sp, #140]	; 0x8c
   11a80:	ldr	r3, [pc, #676]	; 11d2c <__assert_fail@plt+0x9fc>
   11a84:	ldr	r3, [r3]
   11a88:	ldr	r2, [sp, #16]
   11a8c:	sub	r1, r2, r3
   11a90:	ldr	r2, [pc, #628]	; 11d0c <__assert_fail@plt+0x9dc>
   11a94:	ldr	r6, [r2]
   11a98:	cmp	r6, #0
   11a9c:	beq	11c94 <__assert_fail@plt+0x964>
   11aa0:	cmp	r1, #0
   11aa4:	bgt	11b18 <__assert_fail@plt+0x7e8>
   11aa8:	ldr	r2, [sp, #16]
   11aac:	cmp	r2, r3
   11ab0:	bgt	11adc <__assert_fail@plt+0x7ac>
   11ab4:	mov	r2, #5
   11ab8:	ldr	r1, [pc, #624]	; 11d30 <__assert_fail@plt+0xa00>
   11abc:	mov	r0, #0
   11ac0:	bl	110c0 <dcgettext@plt>
   11ac4:	mov	r2, r0
   11ac8:	mov	r1, #0
   11acc:	mov	r0, r1
   11ad0:	bl	11150 <error@plt>
   11ad4:	mov	r0, #1
   11ad8:	bl	11468 <__assert_fail@plt+0x138>
   11adc:	mov	r2, #5
   11ae0:	ldr	r1, [pc, #588]	; 11d34 <__assert_fail@plt+0xa04>
   11ae4:	mov	r0, #0
   11ae8:	bl	110c0 <dcgettext@plt>
   11aec:	mov	r6, r0
   11af0:	ldr	r3, [sp, #16]
   11af4:	sub	r5, r3, #-1073741823	; 0xc0000001
   11af8:	ldr	r0, [r4, r5, lsl #2]
   11afc:	bl	17b60 <__assert_fail@plt+0x6830>
   11b00:	mov	r3, r0
   11b04:	mov	r2, r6
   11b08:	mov	r1, #0
   11b0c:	mov	r0, r1
   11b10:	bl	11150 <error@plt>
   11b14:	b	11ad4 <__assert_fail@plt+0x7a4>
   11b18:	add	r2, sp, #24
   11b1c:	mov	r1, r6
   11b20:	mov	r0, #3
   11b24:	bl	112d0 <__xstat64@plt>
   11b28:	cmp	r0, #0
   11b2c:	beq	11b6c <__assert_fail@plt+0x83c>
   11b30:	bl	111ec <__errno_location@plt>
   11b34:	ldr	r4, [r0]
   11b38:	mov	r2, #5
   11b3c:	ldr	r1, [pc, #500]	; 11d38 <__assert_fail@plt+0xa08>
   11b40:	mov	r0, #0
   11b44:	bl	110c0 <dcgettext@plt>
   11b48:	mov	r5, r0
   11b4c:	mov	r1, r6
   11b50:	mov	r0, #4
   11b54:	bl	1792c <__assert_fail@plt+0x65fc>
   11b58:	mov	r3, r0
   11b5c:	mov	r2, r5
   11b60:	mov	r1, r4
   11b64:	mov	r0, #1
   11b68:	bl	11150 <error@plt>
   11b6c:	ldr	r5, [sp, #52]	; 0x34
   11b70:	mov	r0, r5
   11b74:	bl	11e24 <__assert_fail@plt+0xaf4>
   11b78:	str	r0, [sp, #148]	; 0x94
   11b7c:	ldrb	r3, [sp, #132]	; 0x84
   11b80:	ldr	r2, [sp, #20]
   11b84:	tst	r2, r3
   11b88:	bne	11c44 <__assert_fail@plt+0x914>
   11b8c:	ldr	r3, [pc, #408]	; 11d2c <__assert_fail@plt+0x9fc>
   11b90:	ldr	r0, [r3]
   11b94:	add	r3, sp, #128	; 0x80
   11b98:	str	r3, [sp, #8]
   11b9c:	mvn	r2, #0
   11ba0:	str	r2, [sp, #4]
   11ba4:	str	r2, [sp]
   11ba8:	mov	r3, r5
   11bac:	orr	r1, r9, #1024	; 0x400
   11bb0:	add	r0, r4, r0, lsl #2
   11bb4:	bl	11e9c <__assert_fail@plt+0xb6c>
   11bb8:	eor	r0, r0, #1
   11bbc:	uxtb	r0, r0
   11bc0:	bl	111b0 <exit@plt>
   11bc4:	mov	r0, r7
   11bc8:	bl	1870c <__assert_fail@plt+0x73dc>
   11bcc:	mov	r6, r0
   11bd0:	b	11cb8 <__assert_fail@plt+0x988>
   11bd4:	ldr	r3, [pc, #268]	; 11ce8 <__assert_fail@plt+0x9b8>
   11bd8:	str	r3, [sp]
   11bdc:	add	r3, sp, #24
   11be0:	mov	r2, #10
   11be4:	mov	r1, #0
   11be8:	mov	r0, r7
   11bec:	bl	188d0 <__assert_fail@plt+0x75a0>
   11bf0:	cmp	r0, #0
   11bf4:	bne	11c14 <__assert_fail@plt+0x8e4>
   11bf8:	ldrd	r2, [sp, #24]
   11bfc:	mvn	r0, #0
   11c00:	mov	r1, #0
   11c04:	cmp	r3, r1
   11c08:	cmpeq	r2, r0
   11c0c:	movls	r5, r2
   11c10:	bls	11ce0 <__assert_fail@plt+0x9b0>
   11c14:	mov	r2, #5
   11c18:	ldr	r1, [pc, #284]	; 11d3c <__assert_fail@plt+0xa0c>
   11c1c:	mov	r0, #0
   11c20:	bl	110c0 <dcgettext@plt>
   11c24:	mov	r4, r0
   11c28:	mov	r0, r7
   11c2c:	bl	17b60 <__assert_fail@plt+0x6830>
   11c30:	mov	r3, r0
   11c34:	mov	r2, r4
   11c38:	mov	r1, #0
   11c3c:	mov	r0, #1
   11c40:	bl	11150 <error@plt>
   11c44:	ldr	r0, [pc, #244]	; 11d40 <__assert_fail@plt+0xa10>
   11c48:	bl	17b74 <__assert_fail@plt+0x6844>
   11c4c:	str	r0, [sp, #136]	; 0x88
   11c50:	cmp	r0, #0
   11c54:	bne	11b8c <__assert_fail@plt+0x85c>
   11c58:	bl	111ec <__errno_location@plt>
   11c5c:	ldr	r4, [r0]
   11c60:	mov	r2, #5
   11c64:	ldr	r1, [pc, #204]	; 11d38 <__assert_fail@plt+0xa08>
   11c68:	mov	r0, #0
   11c6c:	bl	110c0 <dcgettext@plt>
   11c70:	mov	r5, r0
   11c74:	ldr	r1, [pc, #200]	; 11d44 <__assert_fail@plt+0xa14>
   11c78:	mov	r0, #4
   11c7c:	bl	1792c <__assert_fail@plt+0x65fc>
   11c80:	mov	r3, r0
   11c84:	mov	r2, r5
   11c88:	mov	r1, r4
   11c8c:	mov	r0, #1
   11c90:	bl	11150 <error@plt>
   11c94:	cmp	r1, #1
   11c98:	ble	11aa8 <__assert_fail@plt+0x778>
   11c9c:	add	r1, r3, #1
   11ca0:	ldr	r2, [pc, #132]	; 11d2c <__assert_fail@plt+0x9fc>
   11ca4:	str	r1, [r2]
   11ca8:	ldr	r7, [r4, r3, lsl #2]
   11cac:	ldrb	r3, [r7]
   11cb0:	cmp	r3, #0
   11cb4:	bne	11bc4 <__assert_fail@plt+0x894>
   11cb8:	str	r6, [sp, #148]	; 0x94
   11cbc:	ldrb	r3, [r7]
   11cc0:	cmp	r3, #0
   11cc4:	mvneq	r5, #0
   11cc8:	beq	11b7c <__assert_fail@plt+0x84c>
   11ccc:	mov	r0, r7
   11cd0:	bl	11324 <getgrnam@plt>
   11cd4:	cmp	r0, #0
   11cd8:	beq	11bd4 <__assert_fail@plt+0x8a4>
   11cdc:	ldr	r5, [r0, #8]
   11ce0:	bl	11000 <endgrent@plt>
   11ce4:	b	11b7c <__assert_fail@plt+0x84c>
   11ce8:	andeq	sl, r1, r0, lsr r3
   11cec:	andeq	sl, r1, r8, ror #8
   11cf0:	andeq	sl, r1, r0, lsl r5
   11cf4:	muleq	r1, r4, fp
   11cf8:	andeq	r9, r1, ip, lsr ip
   11cfc:	andeq	sl, r1, r8, asr #10
   11d00:	andeq	r0, r0, r3, lsl #2
   11d04:	muleq	r2, r8, r1
   11d08:	andeq	r0, r0, r2, lsl #2
   11d0c:	andeq	ip, r2, r0, lsr #3
   11d10:	andeq	sl, r1, r8, lsr #10
   11d14:	andeq	sl, r1, r8, lsr r5
   11d18:	andeq	ip, r2, r4, lsr r1
   11d1c:	andeq	sl, r1, r4, ror #8
   11d20:	andeq	r9, r1, ip, lsl #26
   11d24:	muleq	r2, r4, r1
   11d28:	andeq	sl, r1, r4, asr r5
   11d2c:	andeq	ip, r2, r8, lsl #3
   11d30:	andeq	sl, r1, r0, lsl #11
   11d34:	muleq	r1, r0, r5
   11d38:	andeq	sl, r1, ip, lsr #11
   11d3c:	andeq	sl, r1, ip, asr #11
   11d40:	andeq	ip, r2, r8, lsr #3
   11d44:	andeq	sl, r1, r0, ror #11
   11d48:	push	{r4, r5, r6, lr}
   11d4c:	mov	r4, r1
   11d50:	subs	r6, r0, #0
   11d54:	beq	11db8 <__assert_fail@plt+0xa88>
   11d58:	cmp	r1, #0
   11d5c:	beq	11da8 <__assert_fail@plt+0xa78>
   11d60:	mov	r0, r6
   11d64:	bl	111bc <strlen@plt>
   11d68:	mov	r5, r0
   11d6c:	mov	r0, r4
   11d70:	bl	111bc <strlen@plt>
   11d74:	add	r0, r5, r0
   11d78:	add	r0, r0, #2
   11d7c:	bl	18184 <__assert_fail@plt+0x6e54>
   11d80:	mov	r5, r0
   11d84:	mov	r1, r6
   11d88:	bl	110a8 <stpcpy@plt>
   11d8c:	ldr	r3, [pc, #68]	; 11dd8 <__assert_fail@plt+0xaa8>
   11d90:	ldrh	r3, [r3]
   11d94:	strh	r3, [r0], #1
   11d98:	mov	r1, r4
   11d9c:	bl	1112c <strcpy@plt>
   11da0:	mov	r0, r5
   11da4:	pop	{r4, r5, r6, pc}
   11da8:	mov	r0, r6
   11dac:	bl	1870c <__assert_fail@plt+0x73dc>
   11db0:	mov	r5, r0
   11db4:	b	11da0 <__assert_fail@plt+0xa70>
   11db8:	cmp	r1, #0
   11dbc:	beq	11dd0 <__assert_fail@plt+0xaa0>
   11dc0:	mov	r0, r1
   11dc4:	bl	1870c <__assert_fail@plt+0x73dc>
   11dc8:	mov	r5, r0
   11dcc:	b	11da0 <__assert_fail@plt+0xa70>
   11dd0:	mov	r5, #0
   11dd4:	b	11da0 <__assert_fail@plt+0xa70>
   11dd8:	ldrdeq	sl, [r1], -r8
   11ddc:	mov	r3, #2
   11de0:	str	r3, [r0]
   11de4:	mov	r3, #0
   11de8:	str	r3, [r0, #8]
   11dec:	mov	r2, #1
   11df0:	strb	r2, [r0, #12]
   11df4:	strb	r3, [r0, #4]
   11df8:	strb	r3, [r0, #13]
   11dfc:	str	r3, [r0, #16]
   11e00:	str	r3, [r0, #20]
   11e04:	bx	lr
   11e08:	push	{r4, lr}
   11e0c:	mov	r4, r0
   11e10:	ldr	r0, [r0, #16]
   11e14:	bl	12c88 <__assert_fail@plt+0x1958>
   11e18:	ldr	r0, [r4, #20]
   11e1c:	bl	12c88 <__assert_fail@plt+0x1958>
   11e20:	pop	{r4, pc}
   11e24:	push	{r4, lr}
   11e28:	sub	sp, sp, #24
   11e2c:	mov	r4, r0
   11e30:	bl	11318 <getgrgid@plt>
   11e34:	cmp	r0, #0
   11e38:	beq	11e4c <__assert_fail@plt+0xb1c>
   11e3c:	ldr	r0, [r0]
   11e40:	bl	1870c <__assert_fail@plt+0x73dc>
   11e44:	add	sp, sp, #24
   11e48:	pop	{r4, pc}
   11e4c:	mov	r2, sp
   11e50:	mov	r0, r4
   11e54:	mov	r1, #0
   11e58:	bl	15f10 <__assert_fail@plt+0x4be0>
   11e5c:	b	11e40 <__assert_fail@plt+0xb10>
   11e60:	push	{r4, lr}
   11e64:	sub	sp, sp, #24
   11e68:	mov	r4, r0
   11e6c:	bl	11030 <getpwuid@plt>
   11e70:	cmp	r0, #0
   11e74:	beq	11e88 <__assert_fail@plt+0xb58>
   11e78:	ldr	r0, [r0]
   11e7c:	bl	1870c <__assert_fail@plt+0x73dc>
   11e80:	add	sp, sp, #24
   11e84:	pop	{r4, pc}
   11e88:	mov	r2, sp
   11e8c:	mov	r0, r4
   11e90:	mov	r1, #0
   11e94:	bl	15f10 <__assert_fail@plt+0x4be0>
   11e98:	b	11e7c <__assert_fail@plt+0xb4c>
   11e9c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11ea0:	sub	sp, sp, #260	; 0x104
   11ea4:	str	r2, [sp, #24]
   11ea8:	str	r3, [sp, #36]	; 0x24
   11eac:	ldr	r9, [sp, #304]	; 0x130
   11eb0:	ldr	r3, [sp, #300]	; 0x12c
   11eb4:	ldr	r2, [sp, #296]	; 0x128
   11eb8:	cmn	r2, #1
   11ebc:	cmneq	r3, #1
   11ec0:	movne	r3, #0
   11ec4:	bne	11ee8 <__assert_fail@plt+0xbb8>
   11ec8:	ldrb	r3, [r9, #12]
   11ecc:	cmp	r3, #0
   11ed0:	movne	r3, #0
   11ed4:	bne	11ee8 <__assert_fail@plt+0xbb8>
   11ed8:	ldr	r3, [r9]
   11edc:	cmp	r3, #2
   11ee0:	moveq	r3, #8
   11ee4:	movne	r3, #0
   11ee8:	mov	r2, #0
   11eec:	orr	r1, r3, r1
   11ef0:	bl	18768 <__assert_fail@plt+0x7438>
   11ef4:	str	r0, [sp, #12]
   11ef8:	mov	fp, #1
   11efc:	b	127e8 <__assert_fail@plt+0x14b8>
   11f00:	bl	111ec <__errno_location@plt>
   11f04:	mov	r4, r0
   11f08:	ldr	r5, [r0]
   11f0c:	cmp	r5, #0
   11f10:	beq	11f24 <__assert_fail@plt+0xbf4>
   11f14:	ldrb	fp, [r9, #13]
   11f18:	cmp	fp, #0
   11f1c:	movne	fp, #0
   11f20:	beq	11f40 <__assert_fail@plt+0xc10>
   11f24:	ldr	r0, [sp, #12]
   11f28:	bl	14560 <__assert_fail@plt+0x3230>
   11f2c:	cmp	r0, #0
   11f30:	bne	12958 <__assert_fail@plt+0x1628>
   11f34:	mov	r0, fp
   11f38:	add	sp, sp, #260	; 0x104
   11f3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11f40:	mov	r2, #5
   11f44:	ldr	r1, [pc, #3012]	; 12b10 <__assert_fail@plt+0x17e0>
   11f48:	mov	r0, #0
   11f4c:	bl	110c0 <dcgettext@plt>
   11f50:	mov	r2, r0
   11f54:	mov	r1, r5
   11f58:	mov	r0, #0
   11f5c:	bl	11150 <error@plt>
   11f60:	b	11f24 <__assert_fail@plt+0xbf4>
   11f64:	ldrb	r7, [r9, #4]
   11f68:	cmp	r7, #0
   11f6c:	beq	1227c <__assert_fail@plt+0xf4c>
   11f70:	ldr	ip, [r9, #8]
   11f74:	cmp	ip, #0
   11f78:	beq	127e4 <__assert_fail@plt+0x14b4>
   11f7c:	ldrd	r0, [r5, #160]	; 0xa0
   11f80:	ldrd	r2, [ip]
   11f84:	cmp	r1, r3
   11f88:	cmpeq	r0, r2
   11f8c:	bne	127e4 <__assert_fail@plt+0x14b4>
   11f90:	ldrd	r2, [r5, #64]	; 0x40
   11f94:	ldrd	r0, [ip, #8]
   11f98:	cmp	r3, r1
   11f9c:	cmpeq	r2, r0
   11fa0:	bne	127e4 <__assert_fail@plt+0x14b4>
   11fa4:	ldr	r1, [pc, #2920]	; 12b14 <__assert_fail@plt+0x17e4>
   11fa8:	mov	r0, sl
   11fac:	bl	11024 <strcmp@plt>
   11fb0:	cmp	r0, #0
   11fb4:	bne	1202c <__assert_fail@plt+0xcfc>
   11fb8:	mov	r2, #5
   11fbc:	ldr	r1, [pc, #2900]	; 12b18 <__assert_fail@plt+0x17e8>
   11fc0:	bl	110c0 <dcgettext@plt>
   11fc4:	mov	r4, r0
   11fc8:	mov	r1, sl
   11fcc:	mov	r0, #4
   11fd0:	bl	1792c <__assert_fail@plt+0x65fc>
   11fd4:	mov	r3, r0
   11fd8:	mov	r2, r4
   11fdc:	mov	r1, #0
   11fe0:	mov	r0, r1
   11fe4:	bl	11150 <error@plt>
   11fe8:	mov	r2, #5
   11fec:	ldr	r1, [pc, #2856]	; 12b1c <__assert_fail@plt+0x17ec>
   11ff0:	mov	r0, #0
   11ff4:	bl	110c0 <dcgettext@plt>
   11ff8:	mov	r2, r0
   11ffc:	mov	r1, #0
   12000:	mov	r0, r1
   12004:	bl	11150 <error@plt>
   12008:	mov	r2, #4
   1200c:	mov	r1, r5
   12010:	ldr	r4, [sp, #12]
   12014:	mov	r0, r4
   12018:	bl	14d34 <__assert_fail@plt+0x3a04>
   1201c:	mov	r0, r4
   12020:	bl	146c4 <__assert_fail@plt+0x3394>
   12024:	mov	r7, #0
   12028:	b	127e4 <__assert_fail@plt+0x14b4>
   1202c:	mov	r2, #5
   12030:	ldr	r1, [pc, #2792]	; 12b20 <__assert_fail@plt+0x17f0>
   12034:	mov	r0, #0
   12038:	bl	110c0 <dcgettext@plt>
   1203c:	mov	r4, r0
   12040:	mov	r2, sl
   12044:	mov	r1, #4
   12048:	mov	r0, #0
   1204c:	bl	178c0 <__assert_fail@plt+0x6590>
   12050:	mov	r6, r0
   12054:	ldr	r2, [pc, #2744]	; 12b14 <__assert_fail@plt+0x17e4>
   12058:	mov	r1, #4
   1205c:	mov	r0, #1
   12060:	bl	178c0 <__assert_fail@plt+0x6590>
   12064:	str	r0, [sp]
   12068:	mov	r3, r6
   1206c:	mov	r2, r4
   12070:	mov	r1, #0
   12074:	mov	r0, r1
   12078:	bl	11150 <error@plt>
   1207c:	b	11fe8 <__assert_fail@plt+0xcb8>
   12080:	ldrb	r3, [r9, #4]
   12084:	cmp	r3, #0
   12088:	moveq	r7, #1
   1208c:	bne	1227c <__assert_fail@plt+0xf4c>
   12090:	b	127e4 <__assert_fail@plt+0x14b4>
   12094:	ldr	r3, [r5, #48]	; 0x30
   12098:	cmp	r3, #0
   1209c:	bne	120ac <__assert_fail@plt+0xd7c>
   120a0:	ldr	r3, [r5, #16]
   120a4:	cmp	r3, #0
   120a8:	beq	120f4 <__assert_fail@plt+0xdc4>
   120ac:	ldrb	r3, [r9, #13]
   120b0:	cmp	r3, #0
   120b4:	bne	1211c <__assert_fail@plt+0xdec>
   120b8:	ldr	r4, [r5, #32]
   120bc:	mov	r2, #5
   120c0:	ldr	r1, [pc, #2652]	; 12b24 <__assert_fail@plt+0x17f4>
   120c4:	mov	r0, #0
   120c8:	bl	110c0 <dcgettext@plt>
   120cc:	mov	r6, r0
   120d0:	mov	r1, sl
   120d4:	mov	r0, #4
   120d8:	bl	1792c <__assert_fail@plt+0x65fc>
   120dc:	mov	r3, r0
   120e0:	mov	r2, r6
   120e4:	mov	r1, r4
   120e8:	mov	r0, #0
   120ec:	bl	11150 <error@plt>
   120f0:	b	1211c <__assert_fail@plt+0xdec>
   120f4:	mov	r7, #1
   120f8:	str	r7, [r5, #16]
   120fc:	mov	r2, r7
   12100:	mov	r1, r5
   12104:	ldr	r0, [sp, #12]
   12108:	bl	14d34 <__assert_fail@plt+0x3a04>
   1210c:	b	127e4 <__assert_fail@plt+0x14b4>
   12110:	ldrb	r3, [r9, #13]
   12114:	cmp	r3, #0
   12118:	beq	121f4 <__assert_fail@plt+0xec4>
   1211c:	mov	r8, #0
   12120:	mov	r4, r8
   12124:	mov	r7, r8
   12128:	cmp	r8, #0
   1212c:	beq	129e4 <__assert_fail@plt+0x16b4>
   12130:	ldrb	r6, [r9, #12]
   12134:	cmp	r6, #0
   12138:	bne	1253c <__assert_fail@plt+0x120c>
   1213c:	ldr	r3, [sp, #12]
   12140:	ldr	r3, [r3, #32]
   12144:	str	r3, [sp, #20]
   12148:	mov	r3, #256	; 0x100
   1214c:	str	r3, [sp]
   12150:	ldr	r3, [sp, #36]	; 0x24
   12154:	ldr	r2, [sp, #24]
   12158:	ldr	r1, [sp, #16]
   1215c:	ldr	r0, [sp, #20]
   12160:	bl	112b8 <fchownat@plt>
   12164:	cmp	r0, #0
   12168:	moveq	r7, #1
   1216c:	movne	r7, #0
   12170:	beq	12184 <__assert_fail@plt+0xe54>
   12174:	bl	111ec <__errno_location@plt>
   12178:	ldr	r3, [r0]
   1217c:	cmp	r3, #95	; 0x5f
   12180:	beq	1298c <__assert_fail@plt+0x165c>
   12184:	cmp	r7, #0
   12188:	bne	12a20 <__assert_fail@plt+0x16f0>
   1218c:	ldrb	r3, [r9, #13]
   12190:	cmp	r3, #0
   12194:	bne	121e0 <__assert_fail@plt+0xeb0>
   12198:	bl	111ec <__errno_location@plt>
   1219c:	ldr	r6, [r0]
   121a0:	ldr	r3, [sp, #24]
   121a4:	cmn	r3, #1
   121a8:	mov	r2, #5
   121ac:	ldrne	r1, [pc, #2420]	; 12b28 <__assert_fail@plt+0x17f8>
   121b0:	ldreq	r1, [pc, #2420]	; 12b2c <__assert_fail@plt+0x17fc>
   121b4:	mov	r0, #0
   121b8:	bl	110c0 <dcgettext@plt>
   121bc:	mov	r7, r0
   121c0:	mov	r1, sl
   121c4:	mov	r0, #4
   121c8:	bl	1792c <__assert_fail@plt+0x65fc>
   121cc:	mov	r3, r0
   121d0:	mov	r2, r7
   121d4:	mov	r1, r6
   121d8:	mov	r0, #0
   121dc:	bl	11150 <error@plt>
   121e0:	ldr	r3, [r9]
   121e4:	cmp	r3, #2
   121e8:	bne	12764 <__assert_fail@plt+0x1434>
   121ec:	mov	r7, #0
   121f0:	b	127d8 <__assert_fail@plt+0x14a8>
   121f4:	ldr	r4, [r5, #32]
   121f8:	mov	r2, sl
   121fc:	mov	r1, #3
   12200:	mov	r0, #0
   12204:	bl	179f8 <__assert_fail@plt+0x66c8>
   12208:	mov	r3, r0
   1220c:	ldr	r2, [pc, #2332]	; 12b30 <__assert_fail@plt+0x1800>
   12210:	mov	r1, r4
   12214:	mov	r0, #0
   12218:	bl	11150 <error@plt>
   1221c:	b	1211c <__assert_fail@plt+0xdec>
   12220:	ldrb	r3, [r9, #13]
   12224:	cmp	r3, #0
   12228:	bne	1211c <__assert_fail@plt+0xdec>
   1222c:	ldr	r4, [r5, #32]
   12230:	mov	r2, #5
   12234:	ldr	r1, [pc, #2296]	; 12b34 <__assert_fail@plt+0x1804>
   12238:	mov	r0, #0
   1223c:	bl	110c0 <dcgettext@plt>
   12240:	mov	r6, r0
   12244:	mov	r1, sl
   12248:	mov	r0, #4
   1224c:	bl	1792c <__assert_fail@plt+0x65fc>
   12250:	mov	r3, r0
   12254:	mov	r2, r6
   12258:	mov	r1, r4
   1225c:	mov	r0, #0
   12260:	bl	11150 <error@plt>
   12264:	b	1211c <__assert_fail@plt+0xdec>
   12268:	mov	r1, r5
   1226c:	ldr	r0, [sp, #12]
   12270:	bl	187b0 <__assert_fail@plt+0x7480>
   12274:	cmp	r0, #0
   12278:	bne	123b0 <__assert_fail@plt+0x1080>
   1227c:	ldr	r3, [sp, #300]	; 0x12c
   12280:	ldr	r2, [sp, #296]	; 0x128
   12284:	cmn	r3, #1
   12288:	cmneq	r2, #1
   1228c:	moveq	r7, #1
   12290:	movne	r7, #0
   12294:	bne	122a4 <__assert_fail@plt+0xf74>
   12298:	ldr	r3, [r9]
   1229c:	cmp	r3, #2
   122a0:	beq	123f0 <__assert_fail@plt+0x10c0>
   122a4:	add	r4, r5, #64	; 0x40
   122a8:	ldrb	r3, [r9, #12]
   122ac:	cmp	r3, #0
   122b0:	bne	12414 <__assert_fail@plt+0x10e4>
   122b4:	ldr	r3, [sp, #296]	; 0x128
   122b8:	cmn	r3, #1
   122bc:	beq	124b0 <__assert_fail@plt+0x1180>
   122c0:	ldr	r3, [r4, #24]
   122c4:	ldr	r2, [sp, #296]	; 0x128
   122c8:	cmp	r2, r3
   122cc:	movne	r7, #1
   122d0:	movne	r8, #0
   122d4:	beq	124b0 <__assert_fail@plt+0x1180>
   122d8:	cmp	r7, #0
   122dc:	beq	12128 <__assert_fail@plt+0xdf8>
   122e0:	ldrh	r3, [r5, #56]	; 0x38
   122e4:	sub	ip, r3, #1
   122e8:	uxth	ip, ip
   122ec:	bic	r3, r3, #2
   122f0:	uxth	r3, r3
   122f4:	cmp	r3, #4
   122f8:	cmpne	ip, #1
   122fc:	movls	ip, #1
   12300:	movhi	ip, #0
   12304:	bhi	12128 <__assert_fail@plt+0xdf8>
   12308:	ldr	lr, [r9, #8]
   1230c:	cmp	lr, #0
   12310:	beq	12534 <__assert_fail@plt+0x1204>
   12314:	ldrd	r0, [r4, #96]	; 0x60
   12318:	ldrd	r2, [lr]
   1231c:	cmp	r1, r3
   12320:	cmpeq	r0, r2
   12324:	movne	r7, ip
   12328:	bne	12128 <__assert_fail@plt+0xdf8>
   1232c:	ldrd	r0, [r4]
   12330:	ldrd	r2, [lr, #8]
   12334:	cmp	r1, r3
   12338:	cmpeq	r0, r2
   1233c:	movne	r7, ip
   12340:	bne	12128 <__assert_fail@plt+0xdf8>
   12344:	ldr	r1, [pc, #1992]	; 12b14 <__assert_fail@plt+0x17e4>
   12348:	mov	r0, sl
   1234c:	bl	11024 <strcmp@plt>
   12350:	cmp	r0, #0
   12354:	bne	124e0 <__assert_fail@plt+0x11b0>
   12358:	mov	r2, #5
   1235c:	ldr	r1, [pc, #1972]	; 12b18 <__assert_fail@plt+0x17e8>
   12360:	bl	110c0 <dcgettext@plt>
   12364:	mov	r4, r0
   12368:	mov	r1, sl
   1236c:	mov	r0, #4
   12370:	bl	1792c <__assert_fail@plt+0x65fc>
   12374:	mov	r3, r0
   12378:	mov	r2, r4
   1237c:	mov	r1, #0
   12380:	mov	r0, r1
   12384:	bl	11150 <error@plt>
   12388:	mov	r2, #5
   1238c:	ldr	r1, [pc, #1928]	; 12b1c <__assert_fail@plt+0x17ec>
   12390:	mov	r0, #0
   12394:	bl	110c0 <dcgettext@plt>
   12398:	mov	r2, r0
   1239c:	mov	r1, #0
   123a0:	mov	r0, r1
   123a4:	bl	11150 <error@plt>
   123a8:	mov	r7, #0
   123ac:	b	127e4 <__assert_fail@plt+0x14b4>
   123b0:	mov	r2, #5
   123b4:	ldr	r1, [pc, #1916]	; 12b38 <__assert_fail@plt+0x1808>
   123b8:	mov	r0, #0
   123bc:	bl	110c0 <dcgettext@plt>
   123c0:	mov	r4, r0
   123c4:	mov	r2, sl
   123c8:	mov	r1, #3
   123cc:	mov	r0, #0
   123d0:	bl	179f8 <__assert_fail@plt+0x66c8>
   123d4:	mov	r3, r0
   123d8:	mov	r2, r4
   123dc:	mov	r1, #0
   123e0:	mov	r0, r1
   123e4:	bl	11150 <error@plt>
   123e8:	mov	r7, #0
   123ec:	b	127e4 <__assert_fail@plt+0x14b4>
   123f0:	ldr	r3, [r9, #8]
   123f4:	cmp	r3, #0
   123f8:	bne	122a4 <__assert_fail@plt+0xf74>
   123fc:	ldrb	r3, [r9, #12]
   12400:	cmp	r3, #0
   12404:	addeq	r4, r5, #64	; 0x40
   12408:	moveq	r8, r7
   1240c:	beq	12128 <__assert_fail@plt+0xdf8>
   12410:	add	r4, r5, #64	; 0x40
   12414:	ldr	r3, [r5, #80]	; 0x50
   12418:	and	r3, r3, #61440	; 0xf000
   1241c:	cmp	r3, #40960	; 0xa000
   12420:	bne	122b4 <__assert_fail@plt+0xf84>
   12424:	ldr	r3, [sp, #12]
   12428:	ldr	r3, [r3, #32]
   1242c:	str	r3, [sp, #20]
   12430:	mov	r3, #0
   12434:	str	r3, [sp]
   12438:	add	r3, sp, #48	; 0x30
   1243c:	ldr	r2, [sp, #16]
   12440:	ldr	r1, [sp, #20]
   12444:	mov	r0, #3
   12448:	bl	110e4 <__fxstatat64@plt>
   1244c:	cmp	r0, #0
   12450:	beq	12984 <__assert_fail@plt+0x1654>
   12454:	ldrb	r3, [r9, #13]
   12458:	cmp	r3, #0
   1245c:	beq	12470 <__assert_fail@plt+0x1140>
   12460:	add	r4, sp, #48	; 0x30
   12464:	mov	r7, #0
   12468:	mov	r8, r7
   1246c:	b	122d8 <__assert_fail@plt+0xfa8>
   12470:	bl	111ec <__errno_location@plt>
   12474:	ldr	r4, [r0]
   12478:	mov	r2, #5
   1247c:	ldr	r1, [pc, #1720]	; 12b3c <__assert_fail@plt+0x180c>
   12480:	mov	r0, #0
   12484:	bl	110c0 <dcgettext@plt>
   12488:	mov	r6, r0
   1248c:	mov	r1, sl
   12490:	mov	r0, #4
   12494:	bl	1792c <__assert_fail@plt+0x65fc>
   12498:	mov	r3, r0
   1249c:	mov	r2, r6
   124a0:	mov	r1, r4
   124a4:	mov	r0, #0
   124a8:	bl	11150 <error@plt>
   124ac:	b	12460 <__assert_fail@plt+0x1130>
   124b0:	ldr	r3, [sp, #300]	; 0x12c
   124b4:	cmn	r3, #1
   124b8:	beq	124d4 <__assert_fail@plt+0x11a4>
   124bc:	ldr	r8, [r4, #28]
   124c0:	cmp	r8, r3
   124c4:	movne	r8, #0
   124c8:	moveq	r8, #1
   124cc:	mov	r7, #1
   124d0:	b	122d8 <__assert_fail@plt+0xfa8>
   124d4:	mov	r7, #1
   124d8:	mov	r8, r7
   124dc:	b	122d8 <__assert_fail@plt+0xfa8>
   124e0:	mov	r2, #5
   124e4:	ldr	r1, [pc, #1588]	; 12b20 <__assert_fail@plt+0x17f0>
   124e8:	mov	r0, #0
   124ec:	bl	110c0 <dcgettext@plt>
   124f0:	mov	r4, r0
   124f4:	mov	r2, sl
   124f8:	mov	r1, #4
   124fc:	mov	r0, #0
   12500:	bl	178c0 <__assert_fail@plt+0x6590>
   12504:	mov	r5, r0
   12508:	ldr	r2, [pc, #1540]	; 12b14 <__assert_fail@plt+0x17e4>
   1250c:	mov	r1, #4
   12510:	mov	r0, #1
   12514:	bl	178c0 <__assert_fail@plt+0x6590>
   12518:	str	r0, [sp]
   1251c:	mov	r3, r5
   12520:	mov	r2, r4
   12524:	mov	r1, #0
   12528:	mov	r0, r1
   1252c:	bl	11150 <error@plt>
   12530:	b	12388 <__assert_fail@plt+0x1058>
   12534:	mov	r7, ip
   12538:	b	12128 <__assert_fail@plt+0xdf8>
   1253c:	ldr	r3, [sp, #300]	; 0x12c
   12540:	ldr	r2, [sp, #296]	; 0x128
   12544:	cmn	r3, #1
   12548:	cmneq	r2, #1
   1254c:	moveq	r3, #1
   12550:	movne	r3, #0
   12554:	str	r3, [sp, #20]
   12558:	bne	12590 <__assert_fail@plt+0x1260>
   1255c:	ldr	r3, [sp, #12]
   12560:	ldr	r3, [r3, #32]
   12564:	str	r3, [sp, #20]
   12568:	mov	r3, #0
   1256c:	str	r3, [sp]
   12570:	ldr	r3, [sp, #36]	; 0x24
   12574:	ldr	r2, [sp, #24]
   12578:	ldr	r1, [sp, #16]
   1257c:	ldr	r0, [sp, #20]
   12580:	bl	112b8 <fchownat@plt>
   12584:	clz	r7, r0
   12588:	lsr	r7, r7, #5
   1258c:	b	12184 <__assert_fail@plt+0xe54>
   12590:	ldr	r3, [r4, #16]
   12594:	and	r3, r3, #61440	; 0xf000
   12598:	cmp	r3, #32768	; 0x8000
   1259c:	beq	125b4 <__assert_fail@plt+0x1284>
   125a0:	cmp	r3, #16384	; 0x4000
   125a4:	moveq	r3, #18688	; 0x4900
   125a8:	streq	r3, [sp, #32]
   125ac:	bne	1255c <__assert_fail@plt+0x122c>
   125b0:	b	125bc <__assert_fail@plt+0x128c>
   125b4:	mov	r3, #2304	; 0x900
   125b8:	str	r3, [sp, #32]
   125bc:	ldr	r3, [sp, #12]
   125c0:	ldr	r3, [r3, #32]
   125c4:	str	r3, [sp, #40]	; 0x28
   125c8:	ldr	r2, [sp, #32]
   125cc:	ldr	r1, [sp, #16]
   125d0:	mov	r0, r3
   125d4:	bl	11060 <__openat64_2@plt>
   125d8:	subs	r3, r0, #0
   125dc:	str	r3, [sp, #28]
   125e0:	blt	12664 <__assert_fail@plt+0x1334>
   125e4:	add	r2, sp, #152	; 0x98
   125e8:	ldr	r1, [sp, #28]
   125ec:	mov	r0, #3
   125f0:	bl	110fc <__fxstat64@plt>
   125f4:	cmp	r0, #0
   125f8:	bne	12754 <__assert_fail@plt+0x1424>
   125fc:	ldrd	r0, [r4, #96]	; 0x60
   12600:	ldrd	r2, [sp, #248]	; 0xf8
   12604:	cmp	r1, r3
   12608:	cmpeq	r0, r2
   1260c:	movne	r3, #4
   12610:	strne	r3, [sp, #44]	; 0x2c
   12614:	beq	126bc <__assert_fail@plt+0x138c>
   12618:	bl	111ec <__errno_location@plt>
   1261c:	str	r0, [sp, #32]
   12620:	ldr	r2, [r0]
   12624:	str	r2, [sp, #40]	; 0x28
   12628:	ldr	r0, [sp, #28]
   1262c:	bl	112f4 <close@plt>
   12630:	ldr	r3, [sp, #32]
   12634:	ldr	r2, [sp, #40]	; 0x28
   12638:	str	r2, [r3]
   1263c:	ldr	r3, [sp, #44]	; 0x2c
   12640:	sub	r3, r3, #2
   12644:	cmp	r3, #4
   12648:	ldrls	pc, [pc, r3, lsl #2]
   1264c:	b	12760 <__assert_fail@plt+0x1430>
   12650:	andeq	r2, r1, r4, lsl #3
   12654:	ldrdeq	r2, [r1], -ip
   12658:	ldrdeq	r2, [r1], -ip
   1265c:	andeq	r2, r1, ip, asr r5
   12660:	andeq	r2, r1, ip, lsl #3
   12664:	bl	111ec <__errno_location@plt>
   12668:	str	r0, [sp, #44]	; 0x2c
   1266c:	ldr	r3, [r0]
   12670:	cmp	r3, #13
   12674:	bne	1218c <__assert_fail@plt+0xe5c>
   12678:	ldr	r3, [r4, #16]
   1267c:	and	r3, r3, #61440	; 0xf000
   12680:	cmp	r3, #32768	; 0x8000
   12684:	bne	1255c <__assert_fail@plt+0x122c>
   12688:	ldr	r3, [sp, #32]
   1268c:	orr	r2, r3, #1
   12690:	ldr	r1, [sp, #16]
   12694:	ldr	r0, [sp, #40]	; 0x28
   12698:	bl	11060 <__openat64_2@plt>
   1269c:	subs	r3, r0, #0
   126a0:	str	r3, [sp, #28]
   126a4:	bge	125e4 <__assert_fail@plt+0x12b4>
   126a8:	ldr	r3, [sp, #44]	; 0x2c
   126ac:	ldr	r3, [r3]
   126b0:	cmp	r3, #13
   126b4:	beq	1255c <__assert_fail@plt+0x122c>
   126b8:	b	1218c <__assert_fail@plt+0xe5c>
   126bc:	ldrd	r0, [r4]
   126c0:	ldrd	r2, [sp, #152]	; 0x98
   126c4:	cmp	r1, r3
   126c8:	cmpeq	r0, r2
   126cc:	movne	r3, #4
   126d0:	strne	r3, [sp, #44]	; 0x2c
   126d4:	bne	12618 <__assert_fail@plt+0x12e8>
   126d8:	ldr	r3, [sp, #296]	; 0x128
   126dc:	cmn	r3, #1
   126e0:	beq	12708 <__assert_fail@plt+0x13d8>
   126e4:	ldr	r3, [sp, #176]	; 0xb0
   126e8:	ldr	r2, [sp, #296]	; 0x128
   126ec:	cmp	r2, r3
   126f0:	movne	r3, #2
   126f4:	strne	r3, [sp, #44]	; 0x2c
   126f8:	bne	12618 <__assert_fail@plt+0x12e8>
   126fc:	ldr	r3, [sp, #300]	; 0x12c
   12700:	cmn	r3, #1
   12704:	beq	12720 <__assert_fail@plt+0x13f0>
   12708:	ldr	r3, [sp, #180]	; 0xb4
   1270c:	ldr	r2, [sp, #300]	; 0x12c
   12710:	cmp	r2, r3
   12714:	movne	r3, #2
   12718:	strne	r3, [sp, #44]	; 0x2c
   1271c:	bne	12618 <__assert_fail@plt+0x12e8>
   12720:	ldr	r2, [sp, #36]	; 0x24
   12724:	ldr	r1, [sp, #24]
   12728:	ldr	r0, [sp, #28]
   1272c:	bl	111e0 <fchown@plt>
   12730:	cmp	r0, #0
   12734:	movne	r3, #6
   12738:	strne	r3, [sp, #44]	; 0x2c
   1273c:	bne	12618 <__assert_fail@plt+0x12e8>
   12740:	ldr	r0, [sp, #28]
   12744:	bl	112f4 <close@plt>
   12748:	cmp	r0, #0
   1274c:	beq	12184 <__assert_fail@plt+0xe54>
   12750:	b	1218c <__assert_fail@plt+0xe5c>
   12754:	mov	r3, #6
   12758:	str	r3, [sp, #44]	; 0x2c
   1275c:	b	12618 <__assert_fail@plt+0x12e8>
   12760:	bl	112e8 <abort@plt>
   12764:	mov	r6, r8
   12768:	mov	r7, #0
   1276c:	b	129f4 <__assert_fail@plt+0x16c4>
   12770:	cmp	r4, #0
   12774:	beq	12840 <__assert_fail@plt+0x1510>
   12778:	mov	r2, #5
   1277c:	ldr	r1, [pc, #956]	; 12b40 <__assert_fail@plt+0x1810>
   12780:	mov	r0, #0
   12784:	bl	110c0 <dcgettext@plt>
   12788:	mov	r4, r0
   1278c:	mov	r1, sl
   12790:	mov	r0, #4
   12794:	bl	1792c <__assert_fail@plt+0x65fc>
   12798:	ldr	r6, [sp, #32]
   1279c:	str	r6, [sp]
   127a0:	ldr	r8, [sp, #28]
   127a4:	mov	r3, r8
   127a8:	mov	r2, r0
   127ac:	mov	r1, r4
   127b0:	mov	r0, #1
   127b4:	bl	11210 <__printf_chk@plt>
   127b8:	mov	r0, r8
   127bc:	bl	12c88 <__assert_fail@plt+0x1958>
   127c0:	mov	r0, r6
   127c4:	bl	12c88 <__assert_fail@plt+0x1958>
   127c8:	ldr	r0, [sp, #20]
   127cc:	bl	12c88 <__assert_fail@plt+0x1958>
   127d0:	ldr	r0, [sp, #16]
   127d4:	bl	12c88 <__assert_fail@plt+0x1958>
   127d8:	ldrb	r3, [r9, #4]
   127dc:	cmp	r3, #0
   127e0:	beq	12944 <__assert_fail@plt+0x1614>
   127e4:	and	fp, fp, r7
   127e8:	ldr	r0, [sp, #12]
   127ec:	bl	146c4 <__assert_fail@plt+0x3394>
   127f0:	subs	r5, r0, #0
   127f4:	beq	11f00 <__assert_fail@plt+0xbd0>
   127f8:	ldr	sl, [r5, #28]
   127fc:	ldr	r3, [r5, #24]
   12800:	str	r3, [sp, #16]
   12804:	ldrh	r3, [r5, #56]	; 0x38
   12808:	sub	r3, r3, #1
   1280c:	cmp	r3, #9
   12810:	ldrls	pc, [pc, r3, lsl #2]
   12814:	b	1227c <__assert_fail@plt+0xf4c>
   12818:	andeq	r1, r1, r4, ror #30
   1281c:	andeq	r2, r1, r8, ror #4
   12820:	andeq	r2, r1, ip, ror r2
   12824:	andeq	r2, r1, r0, lsr #4
   12828:	andeq	r2, r1, ip, ror r2
   1282c:	andeq	r2, r1, r0, lsl #1
   12830:	andeq	r2, r1, r0, lsl r1
   12834:	andeq	r2, r1, ip, ror r2
   12838:	andeq	r2, r1, ip, ror r2
   1283c:	muleq	r1, r4, r0
   12840:	cmp	r6, #0
   12844:	mov	r2, #5
   12848:	ldrne	r1, [pc, #756]	; 12b44 <__assert_fail@plt+0x1814>
   1284c:	ldreq	r1, [pc, #756]	; 12b48 <__assert_fail@plt+0x1818>
   12850:	mov	r0, #0
   12854:	bl	110c0 <dcgettext@plt>
   12858:	mov	r4, r0
   1285c:	b	1278c <__assert_fail@plt+0x145c>
   12860:	ldr	r3, [sp, #28]
   12864:	cmp	r3, #0
   12868:	beq	128ac <__assert_fail@plt+0x157c>
   1286c:	cmp	r4, #0
   12870:	beq	1288c <__assert_fail@plt+0x155c>
   12874:	mov	r2, #5
   12878:	ldr	r1, [pc, #716]	; 12b4c <__assert_fail@plt+0x181c>
   1287c:	mov	r0, #0
   12880:	bl	110c0 <dcgettext@plt>
   12884:	mov	r4, r0
   12888:	b	1278c <__assert_fail@plt+0x145c>
   1288c:	cmp	r6, #0
   12890:	mov	r2, #5
   12894:	ldrne	r1, [pc, #692]	; 12b50 <__assert_fail@plt+0x1820>
   12898:	ldreq	r1, [pc, #692]	; 12b54 <__assert_fail@plt+0x1824>
   1289c:	mov	r0, #0
   128a0:	bl	110c0 <dcgettext@plt>
   128a4:	mov	r4, r0
   128a8:	b	1278c <__assert_fail@plt+0x145c>
   128ac:	cmp	r4, #0
   128b0:	beq	128e4 <__assert_fail@plt+0x15b4>
   128b4:	mov	r2, #5
   128b8:	ldr	r1, [pc, #664]	; 12b58 <__assert_fail@plt+0x1828>
   128bc:	mov	r0, #0
   128c0:	bl	110c0 <dcgettext@plt>
   128c4:	mov	r4, r0
   128c8:	mov	r0, #0
   128cc:	bl	12c88 <__assert_fail@plt+0x1958>
   128d0:	ldr	r3, [sp, #28]
   128d4:	ldr	r2, [sp, #32]
   128d8:	str	r2, [sp, #28]
   128dc:	str	r3, [sp, #32]
   128e0:	b	1278c <__assert_fail@plt+0x145c>
   128e4:	cmp	r6, #0
   128e8:	mov	r2, #5
   128ec:	ldrne	r1, [pc, #616]	; 12b5c <__assert_fail@plt+0x182c>
   128f0:	ldreq	r1, [pc, #604]	; 12b54 <__assert_fail@plt+0x1824>
   128f4:	mov	r0, #0
   128f8:	bl	110c0 <dcgettext@plt>
   128fc:	mov	r4, r0
   12900:	b	128c8 <__assert_fail@plt+0x1598>
   12904:	cmp	r4, #0
   12908:	beq	12924 <__assert_fail@plt+0x15f4>
   1290c:	mov	r2, #5
   12910:	ldr	r1, [pc, #584]	; 12b60 <__assert_fail@plt+0x1830>
   12914:	mov	r0, #0
   12918:	bl	110c0 <dcgettext@plt>
   1291c:	mov	r4, r0
   12920:	b	1278c <__assert_fail@plt+0x145c>
   12924:	cmp	r6, #0
   12928:	mov	r2, #5
   1292c:	ldrne	r1, [pc, #560]	; 12b64 <__assert_fail@plt+0x1834>
   12930:	ldreq	r1, [pc, #560]	; 12b68 <__assert_fail@plt+0x1838>
   12934:	mov	r0, #0
   12938:	bl	110c0 <dcgettext@plt>
   1293c:	mov	r4, r0
   12940:	b	1278c <__assert_fail@plt+0x145c>
   12944:	mov	r2, #4
   12948:	mov	r1, r5
   1294c:	ldr	r0, [sp, #12]
   12950:	bl	14d34 <__assert_fail@plt+0x3a04>
   12954:	b	127e4 <__assert_fail@plt+0x14b4>
   12958:	ldr	r4, [r4]
   1295c:	mov	r2, #5
   12960:	ldr	r1, [pc, #516]	; 12b6c <__assert_fail@plt+0x183c>
   12964:	mov	r0, #0
   12968:	bl	110c0 <dcgettext@plt>
   1296c:	mov	r2, r0
   12970:	mov	r1, r4
   12974:	mov	r0, #0
   12978:	bl	11150 <error@plt>
   1297c:	mov	fp, #0
   12980:	b	11f34 <__assert_fail@plt+0xc04>
   12984:	add	r4, sp, #48	; 0x30
   12988:	b	122b4 <__assert_fail@plt+0xf84>
   1298c:	mov	r7, r8
   12990:	ldr	r3, [r9]
   12994:	cmp	r3, #2
   12998:	beq	127d8 <__assert_fail@plt+0x14a8>
   1299c:	and	r2, r7, r6
   129a0:	tst	r2, #255	; 0xff
   129a4:	beq	129f4 <__assert_fail@plt+0x16c4>
   129a8:	ldr	r1, [sp, #24]
   129ac:	cmn	r1, #1
   129b0:	beq	129c0 <__assert_fail@plt+0x1690>
   129b4:	ldr	r2, [r4, #24]
   129b8:	cmp	r1, r2
   129bc:	bne	12a00 <__assert_fail@plt+0x16d0>
   129c0:	ldr	r1, [sp, #36]	; 0x24
   129c4:	cmn	r1, #1
   129c8:	beq	129f4 <__assert_fail@plt+0x16c4>
   129cc:	ldr	r2, [r4, #28]
   129d0:	cmp	r1, r2
   129d4:	bne	12a00 <__assert_fail@plt+0x16d0>
   129d8:	b	129f4 <__assert_fail@plt+0x16c4>
   129dc:	ldr	r7, [sp, #20]
   129e0:	b	12990 <__assert_fail@plt+0x1660>
   129e4:	ldr	r3, [r9]
   129e8:	cmp	r3, #2
   129ec:	movne	r6, #1
   129f0:	beq	127d8 <__assert_fail@plt+0x14a8>
   129f4:	cmp	r3, #0
   129f8:	bne	127d8 <__assert_fail@plt+0x14a8>
   129fc:	mov	r8, #0
   12a00:	cmp	r7, #0
   12a04:	beq	12a80 <__assert_fail@plt+0x1750>
   12a08:	cmp	r6, #0
   12a0c:	beq	12a34 <__assert_fail@plt+0x1704>
   12a10:	cmp	r8, #0
   12a14:	moveq	r8, #4
   12a18:	movne	r8, #2
   12a1c:	b	12a84 <__assert_fail@plt+0x1754>
   12a20:	ldr	r3, [r9]
   12a24:	cmp	r3, #2
   12a28:	movne	r6, r7
   12a2c:	bne	129a8 <__assert_fail@plt+0x1678>
   12a30:	b	127d8 <__assert_fail@plt+0x14a8>
   12a34:	cmp	r4, #0
   12a38:	movne	r8, #1
   12a3c:	bne	12a8c <__assert_fail@plt+0x175c>
   12a40:	mov	r3, #0
   12a44:	str	r3, [sp, #20]
   12a48:	str	r3, [sp, #16]
   12a4c:	mov	r2, #5
   12a50:	ldr	r1, [pc, #280]	; 12b70 <__assert_fail@plt+0x1840>
   12a54:	mov	r0, #0
   12a58:	bl	110c0 <dcgettext@plt>
   12a5c:	mov	r4, r0
   12a60:	mov	r1, sl
   12a64:	mov	r0, #4
   12a68:	bl	1792c <__assert_fail@plt+0x65fc>
   12a6c:	mov	r2, r0
   12a70:	mov	r1, r4
   12a74:	mov	r0, #1
   12a78:	bl	11210 <__printf_chk@plt>
   12a7c:	b	127c8 <__assert_fail@plt+0x1498>
   12a80:	mov	r8, #3
   12a84:	cmp	r4, #0
   12a88:	beq	12b00 <__assert_fail@plt+0x17d0>
   12a8c:	ldr	r0, [r4, #24]
   12a90:	bl	11e60 <__assert_fail@plt+0xb30>
   12a94:	str	r0, [sp, #20]
   12a98:	ldr	r0, [r4, #28]
   12a9c:	bl	11e24 <__assert_fail@plt+0xaf4>
   12aa0:	str	r0, [sp, #16]
   12aa4:	cmp	r8, #1
   12aa8:	beq	12a4c <__assert_fail@plt+0x171c>
   12aac:	ldr	r4, [r9, #16]
   12ab0:	ldr	r6, [r9, #20]
   12ab4:	mov	r1, r6
   12ab8:	mov	r0, r4
   12abc:	bl	11d48 <__assert_fail@plt+0xa18>
   12ac0:	str	r0, [sp, #32]
   12ac4:	ldr	r1, [sp, #16]
   12ac8:	cmp	r6, #0
   12acc:	moveq	r1, #0
   12ad0:	ldr	r0, [sp, #20]
   12ad4:	cmp	r4, #0
   12ad8:	moveq	r0, #0
   12adc:	bl	11d48 <__assert_fail@plt+0xa18>
   12ae0:	str	r0, [sp, #28]
   12ae4:	cmp	r8, #3
   12ae8:	beq	12860 <__assert_fail@plt+0x1530>
   12aec:	cmp	r8, #4
   12af0:	beq	12904 <__assert_fail@plt+0x15d4>
   12af4:	cmp	r8, #2
   12af8:	beq	12770 <__assert_fail@plt+0x1440>
   12afc:	bl	112e8 <abort@plt>
   12b00:	mov	r3, #0
   12b04:	str	r3, [sp, #20]
   12b08:	str	r3, [sp, #16]
   12b0c:	b	12aac <__assert_fail@plt+0x177c>
   12b10:	ldrdeq	sl, [r1], -ip
   12b14:	andeq	sl, r1, r0, ror #11
   12b18:	andeq	sl, r1, ip, ror #13
   12b1c:	andeq	sl, r1, r8, asr r7
   12b20:	andeq	sl, r1, ip, lsl r7
   12b24:	andeq	sl, r1, ip, lsl #15
   12b28:	muleq	r1, r0, r8
   12b2c:	andeq	sl, r1, ip, lsr #17
   12b30:	andeq	sl, r1, r0, asr #21
   12b34:	andeq	sl, r1, r0, lsr #15
   12b38:			; <UNDEFINED> instruction: 0x0001a7bc
   12b3c:	andeq	sl, r1, r8, ror r8
   12b40:	strdeq	sl, [r1], -ip
   12b44:	andeq	sl, r1, r4, lsr #18
   12b48:	andeq	sl, r1, r8, asr #18
   12b4c:	andeq	sl, r1, r8, ror #18
   12b50:	muleq	r1, r8, r9
   12b54:	andeq	sl, r1, r4, asr #19
   12b58:	andeq	sl, r1, r8, ror #19
   12b5c:	andeq	sl, r1, r0, lsl sl
   12b60:	andeq	sl, r1, r4, lsr sl
   12b64:	andeq	sl, r1, r4, asr sl
   12b68:	andeq	sl, r1, r0, ror sl
   12b6c:	andeq	sl, r1, ip, lsl #21
   12b70:	andeq	sl, r1, r4, asr #17
   12b74:	ldr	r3, [pc, #4]	; 12b80 <__assert_fail@plt+0x1850>
   12b78:	str	r0, [r3]
   12b7c:	bx	lr
   12b80:			; <UNDEFINED> instruction: 0x0002c1b8
   12b84:	ldr	r3, [pc, #4]	; 12b90 <__assert_fail@plt+0x1860>
   12b88:	strb	r0, [r3, #4]
   12b8c:	bx	lr
   12b90:			; <UNDEFINED> instruction: 0x0002c1b8
   12b94:	push	{r4, r5, r6, lr}
   12b98:	sub	sp, sp, #8
   12b9c:	ldr	r3, [pc, #200]	; 12c6c <__assert_fail@plt+0x193c>
   12ba0:	ldr	r0, [r3]
   12ba4:	bl	18e20 <__assert_fail@plt+0x7af0>
   12ba8:	cmp	r0, #0
   12bac:	beq	12bd0 <__assert_fail@plt+0x18a0>
   12bb0:	ldr	r3, [pc, #184]	; 12c70 <__assert_fail@plt+0x1940>
   12bb4:	ldrb	r3, [r3, #4]
   12bb8:	cmp	r3, #0
   12bbc:	beq	12bec <__assert_fail@plt+0x18bc>
   12bc0:	bl	111ec <__errno_location@plt>
   12bc4:	ldr	r3, [r0]
   12bc8:	cmp	r3, #32
   12bcc:	bne	12bec <__assert_fail@plt+0x18bc>
   12bd0:	ldr	r3, [pc, #156]	; 12c74 <__assert_fail@plt+0x1944>
   12bd4:	ldr	r0, [r3]
   12bd8:	bl	18e20 <__assert_fail@plt+0x7af0>
   12bdc:	cmp	r0, #0
   12be0:	bne	12c60 <__assert_fail@plt+0x1930>
   12be4:	add	sp, sp, #8
   12be8:	pop	{r4, r5, r6, pc}
   12bec:	mov	r2, #5
   12bf0:	ldr	r1, [pc, #128]	; 12c78 <__assert_fail@plt+0x1948>
   12bf4:	mov	r0, #0
   12bf8:	bl	110c0 <dcgettext@plt>
   12bfc:	mov	r4, r0
   12c00:	ldr	r3, [pc, #104]	; 12c70 <__assert_fail@plt+0x1940>
   12c04:	ldr	r5, [r3]
   12c08:	cmp	r5, #0
   12c0c:	beq	12c44 <__assert_fail@plt+0x1914>
   12c10:	bl	111ec <__errno_location@plt>
   12c14:	ldr	r6, [r0]
   12c18:	mov	r0, r5
   12c1c:	bl	179d8 <__assert_fail@plt+0x66a8>
   12c20:	str	r4, [sp]
   12c24:	mov	r3, r0
   12c28:	ldr	r2, [pc, #76]	; 12c7c <__assert_fail@plt+0x194c>
   12c2c:	mov	r1, r6
   12c30:	mov	r0, #0
   12c34:	bl	11150 <error@plt>
   12c38:	ldr	r3, [pc, #64]	; 12c80 <__assert_fail@plt+0x1950>
   12c3c:	ldr	r0, [r3]
   12c40:	bl	1106c <_exit@plt>
   12c44:	bl	111ec <__errno_location@plt>
   12c48:	mov	r3, r4
   12c4c:	ldr	r2, [pc, #48]	; 12c84 <__assert_fail@plt+0x1954>
   12c50:	ldr	r1, [r0]
   12c54:	mov	r0, #0
   12c58:	bl	11150 <error@plt>
   12c5c:	b	12c38 <__assert_fail@plt+0x1908>
   12c60:	ldr	r3, [pc, #24]	; 12c80 <__assert_fail@plt+0x1950>
   12c64:	ldr	r0, [r3]
   12c68:	bl	1106c <_exit@plt>
   12c6c:	muleq	r2, r4, r1
   12c70:			; <UNDEFINED> instruction: 0x0002c1b8
   12c74:	muleq	r2, r0, r1
   12c78:			; <UNDEFINED> instruction: 0x0001aab0
   12c7c:			; <UNDEFINED> instruction: 0x0001aabc
   12c80:	andeq	ip, r2, r8, lsr r1
   12c84:	andeq	sl, r1, r0, asr #21
   12c88:	push	{r4, r5, lr}
   12c8c:	sub	sp, sp, #12
   12c90:	mov	r5, r0
   12c94:	bl	111ec <__errno_location@plt>
   12c98:	mov	r4, r0
   12c9c:	ldr	r3, [r0]
   12ca0:	str	r3, [sp]
   12ca4:	str	r3, [sp, #4]
   12ca8:	mov	r3, #0
   12cac:	str	r3, [r0]
   12cb0:	mov	r0, r5
   12cb4:	bl	11054 <free@plt>
   12cb8:	ldr	r3, [r4]
   12cbc:	cmp	r3, #0
   12cc0:	moveq	r3, #4
   12cc4:	movne	r3, #0
   12cc8:	add	r2, sp, #8
   12ccc:	add	r3, r2, r3
   12cd0:	ldr	r3, [r3, #-8]
   12cd4:	str	r3, [r4]
   12cd8:	add	sp, sp, #12
   12cdc:	pop	{r4, r5, pc}
   12ce0:	push	{r4, r5}
   12ce4:	ldrd	r4, [r0, #8]
   12ce8:	ldrd	r2, [r1, #8]
   12cec:	cmp	r5, r3
   12cf0:	cmpeq	r4, r2
   12cf4:	movne	r0, #0
   12cf8:	beq	12d04 <__assert_fail@plt+0x19d4>
   12cfc:	pop	{r4, r5}
   12d00:	bx	lr
   12d04:	ldrd	r4, [r0]
   12d08:	ldrd	r2, [r1]
   12d0c:	cmp	r5, r3
   12d10:	cmpeq	r4, r2
   12d14:	moveq	r0, #1
   12d18:	movne	r0, #0
   12d1c:	b	12cfc <__assert_fail@plt+0x19cc>
   12d20:	push	{r4, lr}
   12d24:	mov	r2, r1
   12d28:	mov	r3, #0
   12d2c:	ldrd	r0, [r0, #8]
   12d30:	bl	19a08 <__assert_fail@plt+0x86d8>
   12d34:	mov	r0, r2
   12d38:	pop	{r4, pc}
   12d3c:	push	{r4, lr}
   12d40:	mov	r2, r1
   12d44:	mov	r3, #0
   12d48:	ldrd	r0, [r0]
   12d4c:	bl	19a08 <__assert_fail@plt+0x86d8>
   12d50:	mov	r0, r2
   12d54:	pop	{r4, pc}
   12d58:	push	{r4, r5}
   12d5c:	ldrd	r4, [r0]
   12d60:	ldrd	r2, [r1]
   12d64:	cmp	r5, r3
   12d68:	cmpeq	r4, r2
   12d6c:	moveq	r0, #1
   12d70:	movne	r0, #0
   12d74:	pop	{r4, r5}
   12d78:	bx	lr
   12d7c:	push	{r4, r5}
   12d80:	ldr	r3, [r0]
   12d84:	ldrd	r4, [r3, #160]	; 0xa0
   12d88:	ldr	r3, [r1]
   12d8c:	ldrd	r2, [r3, #160]	; 0xa0
   12d90:	cmp	r5, r3
   12d94:	cmpeq	r4, r2
   12d98:	movhi	r0, #1
   12d9c:	movls	r0, #0
   12da0:	movcc	r3, #1
   12da4:	movcs	r3, #0
   12da8:	sub	r0, r0, r3
   12dac:	pop	{r4, r5}
   12db0:	bx	lr
   12db4:	push	{r4, r5, r6, lr}
   12db8:	mov	r4, r0
   12dbc:	ldr	r3, [r0, #36]	; 0x24
   12dc0:	add	r1, r1, #256	; 0x100
   12dc4:	adds	r1, r1, r3
   12dc8:	bcs	12dec <__assert_fail@plt+0x1abc>
   12dcc:	str	r1, [r0, #36]	; 0x24
   12dd0:	ldr	r0, [r0, #24]
   12dd4:	bl	18dd0 <__assert_fail@plt+0x7aa0>
   12dd8:	cmp	r0, #0
   12ddc:	beq	12e10 <__assert_fail@plt+0x1ae0>
   12de0:	str	r0, [r4, #24]
   12de4:	mov	r0, #1
   12de8:	pop	{r4, r5, r6, pc}
   12dec:	ldr	r0, [r0, #24]
   12df0:	bl	12c88 <__assert_fail@plt+0x1958>
   12df4:	mov	r5, #0
   12df8:	str	r5, [r4, #24]
   12dfc:	bl	111ec <__errno_location@plt>
   12e00:	mov	r3, #36	; 0x24
   12e04:	str	r3, [r0]
   12e08:	mov	r0, r5
   12e0c:	pop	{r4, r5, r6, pc}
   12e10:	ldr	r0, [r4, #24]
   12e14:	bl	12c88 <__assert_fail@plt+0x1958>
   12e18:	mov	r0, #0
   12e1c:	str	r0, [r4, #24]
   12e20:	pop	{r4, r5, r6, pc}
   12e24:	push	{r4, r5, r6, lr}
   12e28:	sub	sp, sp, #8
   12e2c:	mov	r4, r1
   12e30:	add	r5, r1, #64	; 0x40
   12e34:	ldr	r3, [r1, #48]	; 0x30
   12e38:	cmp	r3, #0
   12e3c:	bne	12e4c <__assert_fail@plt+0x1b1c>
   12e40:	ldr	r3, [r0, #48]	; 0x30
   12e44:	tst	r3, #1
   12e48:	bne	12e5c <__assert_fail@plt+0x1b2c>
   12e4c:	ldr	r3, [r0, #48]	; 0x30
   12e50:	lsl	r3, r3, #30
   12e54:	orrs	r3, r2, r3, lsr #31
   12e58:	beq	12ed4 <__assert_fail@plt+0x1ba4>
   12e5c:	mov	r2, r5
   12e60:	ldr	r1, [r4, #24]
   12e64:	mov	r0, #3
   12e68:	bl	112d0 <__xstat64@plt>
   12e6c:	cmp	r0, #0
   12e70:	beq	12f08 <__assert_fail@plt+0x1bd8>
   12e74:	bl	111ec <__errno_location@plt>
   12e78:	mov	r6, r0
   12e7c:	ldr	r3, [r0]
   12e80:	cmp	r3, #2
   12e84:	beq	12eac <__assert_fail@plt+0x1b7c>
   12e88:	ldr	r3, [r6]
   12e8c:	str	r3, [r4, #32]
   12e90:	mov	r2, #104	; 0x68
   12e94:	mov	r1, #0
   12e98:	mov	r0, r5
   12e9c:	bl	11204 <memset@plt>
   12ea0:	mov	r0, #10
   12ea4:	add	sp, sp, #8
   12ea8:	pop	{r4, r5, r6, pc}
   12eac:	mov	r2, r5
   12eb0:	ldr	r1, [r4, #24]
   12eb4:	mov	r0, #3
   12eb8:	bl	11300 <__lxstat64@plt>
   12ebc:	cmp	r0, #0
   12ec0:	bne	12e88 <__assert_fail@plt+0x1b58>
   12ec4:	mov	r3, #0
   12ec8:	str	r3, [r6]
   12ecc:	mov	r0, #13
   12ed0:	b	12ea4 <__assert_fail@plt+0x1b74>
   12ed4:	ldr	r1, [r0, #32]
   12ed8:	mov	r3, #256	; 0x100
   12edc:	str	r3, [sp]
   12ee0:	mov	r3, r5
   12ee4:	ldr	r2, [r4, #24]
   12ee8:	mov	r0, #3
   12eec:	bl	110e4 <__fxstatat64@plt>
   12ef0:	cmp	r0, #0
   12ef4:	beq	12f08 <__assert_fail@plt+0x1bd8>
   12ef8:	bl	111ec <__errno_location@plt>
   12efc:	ldr	r3, [r0]
   12f00:	str	r3, [r4, #32]
   12f04:	b	12e90 <__assert_fail@plt+0x1b60>
   12f08:	ldr	r0, [r4, #80]	; 0x50
   12f0c:	and	r0, r0, #61440	; 0xf000
   12f10:	cmp	r0, #16384	; 0x4000
   12f14:	beq	12f34 <__assert_fail@plt+0x1c04>
   12f18:	cmp	r0, #40960	; 0xa000
   12f1c:	moveq	r0, #12
   12f20:	beq	12ea4 <__assert_fail@plt+0x1b74>
   12f24:	cmp	r0, #32768	; 0x8000
   12f28:	moveq	r0, #8
   12f2c:	movne	r0, #3
   12f30:	b	12ea4 <__assert_fail@plt+0x1b74>
   12f34:	ldrb	r3, [r4, #168]	; 0xa8
   12f38:	cmp	r3, #46	; 0x2e
   12f3c:	movne	r0, #1
   12f40:	bne	12ea4 <__assert_fail@plt+0x1b74>
   12f44:	ldrb	r3, [r4, #169]	; 0xa9
   12f48:	cmp	r3, #0
   12f4c:	beq	12f68 <__assert_fail@plt+0x1c38>
   12f50:	ldr	r3, [r4, #168]	; 0xa8
   12f54:	bic	r3, r3, #-16777216	; 0xff000000
   12f58:	bic	r3, r3, #255	; 0xff
   12f5c:	cmp	r3, #11776	; 0x2e00
   12f60:	movne	r0, #1
   12f64:	bne	12ea4 <__assert_fail@plt+0x1b74>
   12f68:	ldr	r0, [r4, #48]	; 0x30
   12f6c:	cmp	r0, #0
   12f70:	moveq	r0, #1
   12f74:	movne	r0, #5
   12f78:	b	12ea4 <__assert_fail@plt+0x1b74>
   12f7c:	push	{r4, r5, r6, r7, r8, lr}
   12f80:	mov	r6, r0
   12f84:	mov	r4, r1
   12f88:	mov	r5, r2
   12f8c:	ldr	r7, [r0, #44]	; 0x2c
   12f90:	ldr	r3, [r0, #40]	; 0x28
   12f94:	cmp	r3, r2
   12f98:	bcs	12fc4 <__assert_fail@plt+0x1c94>
   12f9c:	add	r1, r2, #40	; 0x28
   12fa0:	str	r1, [r0, #40]	; 0x28
   12fa4:	cmn	r1, #-1073741823	; 0xc0000001
   12fa8:	bhi	13034 <__assert_fail@plt+0x1d04>
   12fac:	lsl	r1, r1, #2
   12fb0:	ldr	r0, [r0, #8]
   12fb4:	bl	18dd0 <__assert_fail@plt+0x7aa0>
   12fb8:	cmp	r0, #0
   12fbc:	strne	r0, [r6, #8]
   12fc0:	beq	13034 <__assert_fail@plt+0x1d04>
   12fc4:	ldr	r3, [r6, #8]
   12fc8:	cmp	r4, #0
   12fcc:	beq	12fe0 <__assert_fail@plt+0x1cb0>
   12fd0:	str	r4, [r3], #4
   12fd4:	ldr	r4, [r4, #8]
   12fd8:	cmp	r4, #0
   12fdc:	bne	12fd0 <__assert_fail@plt+0x1ca0>
   12fe0:	mov	r3, r7
   12fe4:	mov	r2, #4
   12fe8:	mov	r1, r5
   12fec:	ldr	r0, [r6, #8]
   12ff0:	bl	112ac <qsort@plt>
   12ff4:	ldr	lr, [r6, #8]
   12ff8:	ldr	r0, [lr]
   12ffc:	subs	r3, r5, #1
   13000:	beq	13024 <__assert_fail@plt+0x1cf4>
   13004:	mov	r2, lr
   13008:	ldr	r1, [r2]
   1300c:	ldr	ip, [r2, #4]!
   13010:	str	ip, [r1, #8]
   13014:	subs	r3, r3, #1
   13018:	bne	13008 <__assert_fail@plt+0x1cd8>
   1301c:	sub	r5, r5, #-1073741823	; 0xc0000001
   13020:	add	lr, lr, r5, lsl #2
   13024:	ldr	r3, [lr]
   13028:	mov	r2, #0
   1302c:	str	r2, [r3, #8]
   13030:	pop	{r4, r5, r6, r7, r8, pc}
   13034:	ldr	r0, [r6, #8]
   13038:	bl	12c88 <__assert_fail@plt+0x1958>
   1303c:	mov	r3, #0
   13040:	str	r3, [r6, #8]
   13044:	str	r3, [r6, #40]	; 0x28
   13048:	mov	r0, r4
   1304c:	pop	{r4, r5, r6, r7, r8, pc}
   13050:	push	{r4, r5, r6, r7, r8, lr}
   13054:	mov	r6, r0
   13058:	mov	r7, r1
   1305c:	mov	r5, r2
   13060:	add	r0, r2, #176	; 0xb0
   13064:	bic	r0, r0, #7
   13068:	bl	18da0 <__assert_fail@plt+0x7a70>
   1306c:	subs	r4, r0, #0
   13070:	beq	130bc <__assert_fail@plt+0x1d8c>
   13074:	mov	r2, r5
   13078:	mov	r1, r7
   1307c:	add	r0, r4, #168	; 0xa8
   13080:	bl	11078 <memcpy@plt>
   13084:	add	r2, r4, r5
   13088:	mov	r3, #0
   1308c:	strb	r3, [r2, #168]	; 0xa8
   13090:	str	r5, [r4, #52]	; 0x34
   13094:	str	r6, [r4, #44]	; 0x2c
   13098:	ldr	r2, [r6, #24]
   1309c:	str	r2, [r4, #28]
   130a0:	str	r3, [r4, #32]
   130a4:	str	r3, [r4, #12]
   130a8:	strh	r3, [r4, #58]	; 0x3a
   130ac:	mov	r2, #3
   130b0:	strh	r2, [r4, #60]	; 0x3c
   130b4:	str	r3, [r4, #16]
   130b8:	str	r3, [r4, #20]
   130bc:	mov	r0, r4
   130c0:	pop	{r4, r5, r6, r7, r8, pc}
   130c4:	push	{r4, lr}
   130c8:	sub	sp, sp, #8
   130cc:	mov	r4, r0
   130d0:	ldr	r2, [r0, #48]	; 0x30
   130d4:	ldr	r3, [pc, #92]	; 13138 <__assert_fail@plt+0x1e08>
   130d8:	and	r3, r3, r2
   130dc:	cmp	r3, #0
   130e0:	beq	13114 <__assert_fail@plt+0x1de4>
   130e4:	ldr	r3, [pc, #80]	; 1313c <__assert_fail@plt+0x1e0c>
   130e8:	str	r3, [sp]
   130ec:	ldr	r3, [pc, #76]	; 13140 <__assert_fail@plt+0x1e10>
   130f0:	ldr	r2, [pc, #76]	; 13144 <__assert_fail@plt+0x1e14>
   130f4:	mov	r1, #0
   130f8:	mov	r0, #31
   130fc:	bl	157b8 <__assert_fail@plt+0x4488>
   13100:	str	r0, [r4, #56]	; 0x38
   13104:	adds	r0, r0, #0
   13108:	movne	r0, #1
   1310c:	add	sp, sp, #8
   13110:	pop	{r4, pc}
   13114:	mov	r0, #32
   13118:	bl	18da0 <__assert_fail@plt+0x7a70>
   1311c:	str	r0, [r4, #56]	; 0x38
   13120:	cmp	r0, #0
   13124:	moveq	r0, #0
   13128:	beq	1310c <__assert_fail@plt+0x1ddc>
   1312c:	bl	18e98 <__assert_fail@plt+0x7b68>
   13130:	mov	r0, #1
   13134:	b	1310c <__assert_fail@plt+0x1ddc>
   13138:	andeq	r0, r0, r2, lsl #2
   1313c:	andeq	r2, r1, r8, lsl #25
   13140:	andeq	r2, r1, r0, ror #25
   13144:	andeq	r2, r1, r0, lsr #26
   13148:	push	{r4, lr}
   1314c:	mov	ip, r1
   13150:	ldr	r3, [r0, #48]	; 0x30
   13154:	and	lr, r3, #16
   13158:	ldr	r2, [pc, #48]	; 13190 <__assert_fail@plt+0x1e60>
   1315c:	ldr	r1, [pc, #48]	; 13194 <__assert_fail@plt+0x1e64>
   13160:	cmp	lr, #0
   13164:	moveq	r1, r2
   13168:	tst	r3, #512	; 0x200
   1316c:	bne	1317c <__assert_fail@plt+0x1e4c>
   13170:	mov	r0, ip
   13174:	bl	19280 <__assert_fail@plt+0x7f50>
   13178:	pop	{r4, pc}
   1317c:	mov	r2, r1
   13180:	mov	r1, ip
   13184:	ldr	r0, [r0, #32]
   13188:	bl	15f78 <__assert_fail@plt+0x4c48>
   1318c:	pop	{r4, pc}
   13190:	andeq	r4, r8, r0, lsl #18
   13194:	andeq	ip, r8, r0, lsl #18
   13198:	push	{r4, r5, r6, lr}
   1319c:	subs	r4, r0, #0
   131a0:	bne	131bc <__assert_fail@plt+0x1e8c>
   131a4:	pop	{r4, r5, r6, pc}
   131a8:	mov	r0, r4
   131ac:	bl	12c88 <__assert_fail@plt+0x1958>
   131b0:	mov	r4, r5
   131b4:	cmp	r5, #0
   131b8:	beq	131d4 <__assert_fail@plt+0x1ea4>
   131bc:	ldr	r5, [r4, #8]
   131c0:	ldr	r0, [r4, #12]
   131c4:	cmp	r0, #0
   131c8:	beq	131a8 <__assert_fail@plt+0x1e78>
   131cc:	bl	1130c <closedir@plt>
   131d0:	b	131a8 <__assert_fail@plt+0x1e78>
   131d4:	pop	{r4, r5, r6, pc}
   131d8:	push	{r4, lr}
   131dc:	ldr	r2, [r0, #48]	; 0x30
   131e0:	ldr	r3, [pc, #40]	; 13210 <__assert_fail@plt+0x1ee0>
   131e4:	and	r3, r3, r2
   131e8:	cmp	r3, #0
   131ec:	beq	13204 <__assert_fail@plt+0x1ed4>
   131f0:	ldr	r0, [r0, #56]	; 0x38
   131f4:	cmp	r0, #0
   131f8:	popeq	{r4, pc}
   131fc:	bl	15948 <__assert_fail@plt+0x4618>
   13200:	pop	{r4, pc}
   13204:	ldr	r0, [r0, #56]	; 0x38
   13208:	bl	12c88 <__assert_fail@plt+0x1958>
   1320c:	pop	{r4, pc}
   13210:	andeq	r0, r0, r2, lsl #2
   13214:	push	{r4, lr}
   13218:	mov	r4, r0
   1321c:	mov	r0, r4
   13220:	bl	15e7c <__assert_fail@plt+0x4b4c>
   13224:	cmp	r0, #0
   13228:	bne	13244 <__assert_fail@plt+0x1f14>
   1322c:	mov	r0, r4
   13230:	bl	15ec8 <__assert_fail@plt+0x4b98>
   13234:	cmp	r0, #0
   13238:	blt	1321c <__assert_fail@plt+0x1eec>
   1323c:	bl	112f4 <close@plt>
   13240:	b	1321c <__assert_fail@plt+0x1eec>
   13244:	pop	{r4, pc}
   13248:	push	{r4, r5, r6, r7, lr}
   1324c:	sub	sp, sp, #116	; 0x74
   13250:	ldr	r4, [r0, #44]	; 0x2c
   13254:	ldr	r3, [r4, #48]	; 0x30
   13258:	tst	r3, #512	; 0x200
   1325c:	beq	1333c <__assert_fail@plt+0x200c>
   13260:	mov	r7, r1
   13264:	mov	r5, r0
   13268:	ldr	r6, [r4, #52]	; 0x34
   1326c:	cmp	r6, #0
   13270:	beq	13298 <__assert_fail@plt+0x1f68>
   13274:	ldrd	r2, [r5, #64]	; 0x40
   13278:	add	r1, sp, #112	; 0x70
   1327c:	strd	r2, [r1, #-104]!	; 0xffffff98
   13280:	mov	r0, r6
   13284:	bl	15500 <__assert_fail@plt+0x41d0>
   13288:	cmp	r0, #0
   1328c:	beq	132c4 <__assert_fail@plt+0x1f94>
   13290:	ldr	r0, [r0, #8]
   13294:	b	13340 <__assert_fail@plt+0x2010>
   13298:	ldr	r3, [pc, #184]	; 13358 <__assert_fail@plt+0x2028>
   1329c:	str	r3, [sp]
   132a0:	ldr	r3, [pc, #180]	; 1335c <__assert_fail@plt+0x202c>
   132a4:	ldr	r2, [pc, #180]	; 13360 <__assert_fail@plt+0x2030>
   132a8:	mov	r1, #0
   132ac:	mov	r0, #13
   132b0:	bl	157b8 <__assert_fail@plt+0x4488>
   132b4:	mov	r6, r0
   132b8:	str	r0, [r4, #52]	; 0x34
   132bc:	cmp	r0, #0
   132c0:	bne	13274 <__assert_fail@plt+0x1f44>
   132c4:	cmp	r7, #0
   132c8:	blt	13348 <__assert_fail@plt+0x2018>
   132cc:	add	r1, sp, #24
   132d0:	mov	r0, r7
   132d4:	bl	10fe8 <fstatfs64@plt>
   132d8:	cmp	r0, #0
   132dc:	bne	13350 <__assert_fail@plt+0x2020>
   132e0:	cmp	r6, #0
   132e4:	beq	13324 <__assert_fail@plt+0x1ff4>
   132e8:	mov	r0, #16
   132ec:	bl	18da0 <__assert_fail@plt+0x7a70>
   132f0:	subs	r4, r0, #0
   132f4:	beq	13324 <__assert_fail@plt+0x1ff4>
   132f8:	ldrd	r2, [r5, #64]	; 0x40
   132fc:	strd	r2, [r4]
   13300:	ldr	r3, [sp, #24]
   13304:	str	r3, [r4, #8]
   13308:	mov	r1, r4
   1330c:	mov	r0, r6
   13310:	bl	15d04 <__assert_fail@plt+0x49d4>
   13314:	cmp	r0, #0
   13318:	beq	13330 <__assert_fail@plt+0x2000>
   1331c:	cmp	r4, r0
   13320:	bne	1332c <__assert_fail@plt+0x1ffc>
   13324:	ldr	r0, [sp, #24]
   13328:	b	13340 <__assert_fail@plt+0x2010>
   1332c:	bl	112e8 <abort@plt>
   13330:	mov	r0, r4
   13334:	bl	12c88 <__assert_fail@plt+0x1958>
   13338:	b	13324 <__assert_fail@plt+0x1ff4>
   1333c:	mov	r0, #0
   13340:	add	sp, sp, #116	; 0x74
   13344:	pop	{r4, r5, r6, r7, pc}
   13348:	mov	r0, #0
   1334c:	b	13340 <__assert_fail@plt+0x2010>
   13350:	mov	r0, #0
   13354:	b	13340 <__assert_fail@plt+0x2010>
   13358:	andeq	r2, r1, r8, lsl #25
   1335c:	andeq	r2, r1, r8, asr sp
   13360:	andeq	r2, r1, ip, lsr sp
   13364:	push	{r4, r5, r6, lr}
   13368:	mov	r5, r0
   1336c:	mov	r4, r1
   13370:	ldr	r2, [r0, #48]	; 0x30
   13374:	ldr	r3, [pc, #176]	; 1342c <__assert_fail@plt+0x20fc>
   13378:	and	r3, r3, r2
   1337c:	cmp	r3, #0
   13380:	beq	133e8 <__assert_fail@plt+0x20b8>
   13384:	mov	r0, #24
   13388:	bl	18da0 <__assert_fail@plt+0x7a70>
   1338c:	subs	r6, r0, #0
   13390:	beq	1340c <__assert_fail@plt+0x20dc>
   13394:	ldrd	r2, [r4, #64]	; 0x40
   13398:	strd	r2, [r6]
   1339c:	ldrd	r2, [r4, #160]	; 0xa0
   133a0:	strd	r2, [r6, #8]
   133a4:	str	r4, [r6, #16]
   133a8:	mov	r1, r6
   133ac:	ldr	r0, [r5, #56]	; 0x38
   133b0:	bl	15d04 <__assert_fail@plt+0x49d4>
   133b4:	mov	r5, r0
   133b8:	cmp	r6, r0
   133bc:	beq	13414 <__assert_fail@plt+0x20e4>
   133c0:	mov	r0, r6
   133c4:	bl	12c88 <__assert_fail@plt+0x1958>
   133c8:	cmp	r5, #0
   133cc:	beq	1341c <__assert_fail@plt+0x20ec>
   133d0:	ldr	r3, [r5, #16]
   133d4:	str	r3, [r4]
   133d8:	mov	r3, #2
   133dc:	strh	r3, [r4, #56]	; 0x38
   133e0:	mov	r0, #1
   133e4:	pop	{r4, r5, r6, pc}
   133e8:	add	r1, r1, #64	; 0x40
   133ec:	ldr	r0, [r0, #56]	; 0x38
   133f0:	bl	18eb4 <__assert_fail@plt+0x7b84>
   133f4:	cmp	r0, #0
   133f8:	beq	13424 <__assert_fail@plt+0x20f4>
   133fc:	str	r4, [r4]
   13400:	mov	r3, #2
   13404:	strh	r3, [r4, #56]	; 0x38
   13408:	pop	{r4, r5, r6, pc}
   1340c:	mov	r0, #0
   13410:	pop	{r4, r5, r6, pc}
   13414:	mov	r0, #1
   13418:	pop	{r4, r5, r6, pc}
   1341c:	mov	r0, #0
   13420:	pop	{r4, r5, r6, pc}
   13424:	mov	r0, #1
   13428:	pop	{r4, r5, r6, pc}
   1342c:	andeq	r0, r0, r2, lsl #2
   13430:	push	{r4, r5, r6, lr}
   13434:	mov	r5, r1
   13438:	ldr	r1, [r0, #32]
   1343c:	cmp	r1, r5
   13440:	movne	r3, #0
   13444:	moveq	r3, #1
   13448:	cmn	r1, #100	; 0x64
   1344c:	moveq	r3, #0
   13450:	cmp	r3, #0
   13454:	bne	13494 <__assert_fail@plt+0x2164>
   13458:	mov	r4, r0
   1345c:	cmp	r2, #0
   13460:	bne	13498 <__assert_fail@plt+0x2168>
   13464:	ldr	r3, [r0, #48]	; 0x30
   13468:	lsr	r3, r3, #2
   1346c:	eor	r3, r3, #1
   13470:	cmp	r1, #0
   13474:	movlt	r3, #0
   13478:	andge	r3, r3, #1
   1347c:	cmp	r3, #0
   13480:	beq	1348c <__assert_fail@plt+0x215c>
   13484:	mov	r0, r1
   13488:	bl	112f4 <close@plt>
   1348c:	str	r5, [r4, #32]
   13490:	pop	{r4, r5, r6, pc}
   13494:	bl	112e8 <abort@plt>
   13498:	add	r0, r0, #60	; 0x3c
   1349c:	bl	15e84 <__assert_fail@plt+0x4b54>
   134a0:	cmp	r0, #0
   134a4:	blt	1348c <__assert_fail@plt+0x215c>
   134a8:	bl	112f4 <close@plt>
   134ac:	b	1348c <__assert_fail@plt+0x215c>
   134b0:	push	{r4, r5, r6, lr}
   134b4:	mov	r4, r0
   134b8:	ldr	r3, [r0, #48]	; 0x30
   134bc:	ands	r5, r3, #4
   134c0:	movne	r5, #0
   134c4:	bne	134e0 <__assert_fail@plt+0x21b0>
   134c8:	tst	r3, #512	; 0x200
   134cc:	bne	134f0 <__assert_fail@plt+0x21c0>
   134d0:	ldr	r0, [r0, #28]
   134d4:	bl	112a0 <fchdir@plt>
   134d8:	adds	r5, r0, #0
   134dc:	movne	r5, #1
   134e0:	add	r0, r4, #60	; 0x3c
   134e4:	bl	13214 <__assert_fail@plt+0x1ee4>
   134e8:	mov	r0, r5
   134ec:	pop	{r4, r5, r6, pc}
   134f0:	mov	r2, #1
   134f4:	mvn	r1, #99	; 0x63
   134f8:	bl	13430 <__assert_fail@plt+0x2100>
   134fc:	b	134e0 <__assert_fail@plt+0x21b0>
   13500:	push	{r4, r5, r6, r7, r8, r9, lr}
   13504:	sub	sp, sp, #108	; 0x6c
   13508:	mov	r4, r0
   1350c:	mov	r6, r1
   13510:	mov	r5, r2
   13514:	subs	r9, r3, #0
   13518:	beq	136b4 <__assert_fail@plt+0x2384>
   1351c:	ldr	r1, [pc, #448]	; 136e4 <__assert_fail@plt+0x23b4>
   13520:	mov	r0, r9
   13524:	bl	11024 <strcmp@plt>
   13528:	cmp	r0, #0
   1352c:	bne	136b4 <__assert_fail@plt+0x2384>
   13530:	ldr	r3, [r4, #48]	; 0x30
   13534:	tst	r3, #4
   13538:	bne	136c0 <__assert_fail@plt+0x2390>
   1353c:	cmp	r5, #0
   13540:	bge	13650 <__assert_fail@plt+0x2320>
   13544:	tst	r3, #512	; 0x200
   13548:	beq	13560 <__assert_fail@plt+0x2230>
   1354c:	add	r7, r4, #60	; 0x3c
   13550:	mov	r0, r7
   13554:	bl	15e7c <__assert_fail@plt+0x4b4c>
   13558:	cmp	r0, #0
   1355c:	beq	13580 <__assert_fail@plt+0x2250>
   13560:	mov	r7, #1
   13564:	mov	r1, r9
   13568:	mov	r0, r4
   1356c:	bl	13148 <__assert_fail@plt+0x1e18>
   13570:	subs	r8, r0, #0
   13574:	bge	135d0 <__assert_fail@plt+0x22a0>
   13578:	mvn	r4, #0
   1357c:	b	1363c <__assert_fail@plt+0x230c>
   13580:	mov	r0, r7
   13584:	bl	15ec8 <__assert_fail@plt+0x4b98>
   13588:	subs	r8, r0, #0
   1358c:	blt	13560 <__assert_fail@plt+0x2230>
   13590:	ldr	r3, [r4, #48]	; 0x30
   13594:	tst	r3, #2
   13598:	bne	1365c <__assert_fail@plt+0x232c>
   1359c:	mov	r5, r8
   135a0:	mov	r7, #1
   135a4:	ldr	r3, [r4, #48]	; 0x30
   135a8:	tst	r3, #512	; 0x200
   135ac:	bne	13680 <__assert_fail@plt+0x2350>
   135b0:	mov	r0, r8
   135b4:	bl	112a0 <fchdir@plt>
   135b8:	mov	r4, r0
   135bc:	b	13634 <__assert_fail@plt+0x2304>
   135c0:	cmp	r5, #0
   135c4:	movge	r8, r5
   135c8:	movge	r7, #0
   135cc:	blt	13648 <__assert_fail@plt+0x2318>
   135d0:	ldr	r3, [r4, #48]	; 0x30
   135d4:	tst	r3, #2
   135d8:	bne	135f8 <__assert_fail@plt+0x22c8>
   135dc:	cmp	r9, #0
   135e0:	beq	135a4 <__assert_fail@plt+0x2274>
   135e4:	ldr	r1, [pc, #248]	; 136e4 <__assert_fail@plt+0x23b4>
   135e8:	mov	r0, r9
   135ec:	bl	11024 <strcmp@plt>
   135f0:	cmp	r0, #0
   135f4:	bne	135a4 <__assert_fail@plt+0x2274>
   135f8:	mov	r2, sp
   135fc:	mov	r1, r8
   13600:	mov	r0, #3
   13604:	bl	110fc <__fxstat64@plt>
   13608:	cmp	r0, #0
   1360c:	bne	13630 <__assert_fail@plt+0x2300>
   13610:	ldrd	r0, [r6, #64]	; 0x40
   13614:	ldrd	r2, [sp]
   13618:	cmp	r1, r3
   1361c:	cmpeq	r0, r2
   13620:	beq	13668 <__assert_fail@plt+0x2338>
   13624:	bl	111ec <__errno_location@plt>
   13628:	mov	r3, #2
   1362c:	str	r3, [r0]
   13630:	mvn	r4, #0
   13634:	cmp	r5, #0
   13638:	blt	13698 <__assert_fail@plt+0x2368>
   1363c:	mov	r0, r4
   13640:	add	sp, sp, #108	; 0x6c
   13644:	pop	{r4, r5, r6, r7, r8, r9, pc}
   13648:	mov	r7, #0
   1364c:	b	13564 <__assert_fail@plt+0x2234>
   13650:	mov	r8, r5
   13654:	mov	r7, #1
   13658:	b	135d0 <__assert_fail@plt+0x22a0>
   1365c:	mov	r5, r8
   13660:	mov	r7, #1
   13664:	b	135f8 <__assert_fail@plt+0x22c8>
   13668:	ldrd	r0, [r6, #160]	; 0xa0
   1366c:	ldrd	r2, [sp, #96]	; 0x60
   13670:	cmp	r1, r3
   13674:	cmpeq	r0, r2
   13678:	bne	13624 <__assert_fail@plt+0x22f4>
   1367c:	b	135a4 <__assert_fail@plt+0x2274>
   13680:	eor	r2, r7, #1
   13684:	mov	r1, r8
   13688:	mov	r0, r4
   1368c:	bl	13430 <__assert_fail@plt+0x2100>
   13690:	mov	r4, #0
   13694:	b	1363c <__assert_fail@plt+0x230c>
   13698:	bl	111ec <__errno_location@plt>
   1369c:	mov	r5, r0
   136a0:	ldr	r6, [r0]
   136a4:	mov	r0, r8
   136a8:	bl	112f4 <close@plt>
   136ac:	str	r6, [r5]
   136b0:	b	1363c <__assert_fail@plt+0x230c>
   136b4:	ldr	r3, [r4, #48]	; 0x30
   136b8:	tst	r3, #4
   136bc:	beq	135c0 <__assert_fail@plt+0x2290>
   136c0:	mvn	r2, r5
   136c4:	lsr	r2, r2, #31
   136c8:	ands	r3, r2, r3, lsr #9
   136cc:	moveq	r4, #0
   136d0:	beq	1363c <__assert_fail@plt+0x230c>
   136d4:	mov	r0, r5
   136d8:	bl	112f4 <close@plt>
   136dc:	mov	r4, #0
   136e0:	b	1363c <__assert_fail@plt+0x230c>
   136e4:	andeq	sl, r1, r4, asr #21
   136e8:	push	{r4, r5, lr}
   136ec:	sub	sp, sp, #28
   136f0:	ldr	r2, [r0, #48]	; 0x30
   136f4:	ldr	r3, [pc, #172]	; 137a8 <__assert_fail@plt+0x2478>
   136f8:	and	r3, r3, r2
   136fc:	cmp	r3, #0
   13700:	bne	13748 <__assert_fail@plt+0x2418>
   13704:	ldr	ip, [r1, #4]
   13708:	cmp	ip, #0
   1370c:	beq	13740 <__assert_fail@plt+0x2410>
   13710:	ldr	r3, [ip, #48]	; 0x30
   13714:	cmp	r3, #0
   13718:	blt	13740 <__assert_fail@plt+0x2410>
   1371c:	ldr	lr, [r0, #56]	; 0x38
   13720:	ldrd	r2, [lr, #16]
   13724:	orrs	r3, r2, r3
   13728:	beq	13778 <__assert_fail@plt+0x2448>
   1372c:	ldrd	r4, [lr]
   13730:	ldrd	r2, [r1, #160]	; 0xa0
   13734:	cmp	r5, r3
   13738:	cmpeq	r4, r2
   1373c:	beq	1377c <__assert_fail@plt+0x244c>
   13740:	add	sp, sp, #28
   13744:	pop	{r4, r5, pc}
   13748:	ldrd	r2, [r1, #64]	; 0x40
   1374c:	strd	r2, [sp]
   13750:	ldrd	r2, [r1, #160]	; 0xa0
   13754:	strd	r2, [sp, #8]
   13758:	mov	r1, sp
   1375c:	ldr	r0, [r0, #56]	; 0x38
   13760:	bl	15d3c <__assert_fail@plt+0x4a0c>
   13764:	cmp	r0, #0
   13768:	beq	13774 <__assert_fail@plt+0x2444>
   1376c:	bl	12c88 <__assert_fail@plt+0x1958>
   13770:	b	13740 <__assert_fail@plt+0x2410>
   13774:	bl	112e8 <abort@plt>
   13778:	bl	112e8 <abort@plt>
   1377c:	ldrd	r2, [lr, #8]
   13780:	ldrd	r4, [r1, #64]	; 0x40
   13784:	cmp	r3, r5
   13788:	cmpeq	r2, r4
   1378c:	bne	13740 <__assert_fail@plt+0x2410>
   13790:	ldrd	r2, [ip, #64]	; 0x40
   13794:	strd	r2, [lr, #8]
   13798:	ldr	r3, [r0, #56]	; 0x38
   1379c:	ldrd	r0, [ip, #160]	; 0xa0
   137a0:	strd	r0, [r3]
   137a4:	b	13740 <__assert_fail@plt+0x2410>
   137a8:	andeq	r0, r0, r2, lsl #2
   137ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   137b0:	sub	sp, sp, #68	; 0x44
   137b4:	mov	r5, r0
   137b8:	str	r1, [sp, #40]	; 0x28
   137bc:	ldr	r9, [r0]
   137c0:	ldr	r3, [r9, #12]
   137c4:	str	r3, [sp, #44]	; 0x2c
   137c8:	cmp	r3, #0
   137cc:	beq	138cc <__assert_fail@plt+0x259c>
   137d0:	mov	r0, r3
   137d4:	bl	11294 <dirfd@plt>
   137d8:	str	r0, [sp, #60]	; 0x3c
   137dc:	cmp	r0, #0
   137e0:	blt	13888 <__assert_fail@plt+0x2558>
   137e4:	ldr	r3, [r5, #44]	; 0x2c
   137e8:	cmp	r3, #0
   137ec:	ldr	r3, [pc, #2472]	; 1419c <__assert_fail@plt+0x2e6c>
   137f0:	mvnne	r3, #0
   137f4:	str	r3, [sp, #24]
   137f8:	mov	r3, #1
   137fc:	str	r3, [sp, #52]	; 0x34
   13800:	ldr	r3, [r9, #40]	; 0x28
   13804:	mov	r1, r3
   13808:	sub	r3, r3, #1
   1380c:	ldr	r2, [r9, #28]
   13810:	ldrb	r2, [r2, r3]
   13814:	cmp	r2, #47	; 0x2f
   13818:	moveq	r1, r3
   1381c:	str	r1, [sp, #32]
   13820:	ldr	r3, [r5, #48]	; 0x30
   13824:	tst	r3, #4
   13828:	ldrne	r3, [r5, #24]
   1382c:	addne	r2, r3, r1
   13830:	addne	r2, r2, #1
   13834:	strne	r2, [sp, #28]
   13838:	movne	r2, #47	; 0x2f
   1383c:	strbne	r2, [r3, r1]
   13840:	moveq	r3, #0
   13844:	streq	r3, [sp, #28]
   13848:	ldr	r3, [sp, #32]
   1384c:	add	r3, r3, #1
   13850:	str	r3, [sp, #12]
   13854:	ldr	fp, [r5, #36]	; 0x24
   13858:	sub	fp, fp, r3
   1385c:	ldr	r3, [r9, #48]	; 0x30
   13860:	add	r3, r3, #1
   13864:	str	r3, [sp, #20]
   13868:	mov	r3, #0
   1386c:	str	r3, [sp, #48]	; 0x30
   13870:	str	r3, [sp, #36]	; 0x24
   13874:	str	r3, [sp, #4]
   13878:	mov	r8, r3
   1387c:	str	r3, [sp, #8]
   13880:	mov	sl, r3
   13884:	b	13dfc <__assert_fail@plt+0x2acc>
   13888:	ldr	r0, [r9, #12]
   1388c:	bl	1130c <closedir@plt>
   13890:	mov	r3, #0
   13894:	str	r3, [r9, #12]
   13898:	ldr	r3, [sp, #40]	; 0x28
   1389c:	cmp	r3, #3
   138a0:	movne	r3, #0
   138a4:	strne	r3, [sp, #8]
   138a8:	bne	13c6c <__assert_fail@plt+0x293c>
   138ac:	mov	r3, #4
   138b0:	strh	r3, [r9, #56]	; 0x38
   138b4:	bl	111ec <__errno_location@plt>
   138b8:	ldr	r3, [r0]
   138bc:	str	r3, [r9, #32]
   138c0:	mov	r3, #0
   138c4:	str	r3, [sp, #8]
   138c8:	b	13c6c <__assert_fail@plt+0x293c>
   138cc:	ldr	r3, [r0, #48]	; 0x30
   138d0:	and	r2, r3, #516	; 0x204
   138d4:	cmp	r2, #512	; 0x200
   138d8:	ldreq	r0, [r0, #32]
   138dc:	mvnne	r0, #99	; 0x63
   138e0:	ldr	r1, [r9, #24]
   138e4:	ands	r2, r3, #16
   138e8:	beq	13908 <__assert_fail@plt+0x25d8>
   138ec:	tst	r3, #1
   138f0:	moveq	r2, #32768	; 0x8000
   138f4:	beq	13908 <__assert_fail@plt+0x25d8>
   138f8:	ldr	r2, [r9, #48]	; 0x30
   138fc:	cmp	r2, #0
   13900:	movne	r2, #32768	; 0x8000
   13904:	moveq	r2, #0
   13908:	add	r3, sp, #60	; 0x3c
   1390c:	bl	15fb4 <__assert_fail@plt+0x4c84>
   13910:	str	r0, [r9, #12]
   13914:	cmp	r0, #0
   13918:	beq	13a0c <__assert_fail@plt+0x26dc>
   1391c:	ldrh	r3, [r9, #56]	; 0x38
   13920:	cmp	r3, #11
   13924:	beq	13a40 <__assert_fail@plt+0x2710>
   13928:	ldr	r3, [r5, #48]	; 0x30
   1392c:	tst	r3, #256	; 0x100
   13930:	bne	13a58 <__assert_fail@plt+0x2728>
   13934:	ldr	r3, [r5, #44]	; 0x2c
   13938:	cmp	r3, #0
   1393c:	ldr	r3, [pc, #2136]	; 1419c <__assert_fail@plt+0x2e6c>
   13940:	mvnne	r3, #0
   13944:	str	r3, [sp, #24]
   13948:	ldr	r3, [sp, #40]	; 0x28
   1394c:	cmp	r3, #2
   13950:	beq	13b48 <__assert_fail@plt+0x2818>
   13954:	ldr	r3, [r5, #48]	; 0x30
   13958:	and	r3, r3, #56	; 0x38
   1395c:	cmp	r3, #24
   13960:	beq	13aa0 <__assert_fail@plt+0x2770>
   13964:	ldr	r3, [sp, #40]	; 0x28
   13968:	cmp	r3, #3
   1396c:	movne	r6, #0
   13970:	moveq	r6, #1
   13974:	mov	r4, #1
   13978:	ldr	r3, [r5, #48]	; 0x30
   1397c:	tst	r3, #512	; 0x200
   13980:	bne	13b30 <__assert_fail@plt+0x2800>
   13984:	ldr	r2, [sp, #60]	; 0x3c
   13988:	cmp	r2, #0
   1398c:	blt	139b0 <__assert_fail@plt+0x2680>
   13990:	mov	r3, #0
   13994:	mov	r1, r9
   13998:	mov	r0, r5
   1399c:	bl	13500 <__assert_fail@plt+0x21d0>
   139a0:	cmp	r0, #0
   139a4:	moveq	r3, #1
   139a8:	streq	r3, [sp, #52]	; 0x34
   139ac:	beq	13800 <__assert_fail@plt+0x24d0>
   139b0:	tst	r4, r6
   139b4:	beq	139c4 <__assert_fail@plt+0x2694>
   139b8:	bl	111ec <__errno_location@plt>
   139bc:	ldr	r3, [r0]
   139c0:	str	r3, [r9, #32]
   139c4:	ldrh	r3, [r9, #58]	; 0x3a
   139c8:	orr	r3, r3, #1
   139cc:	strh	r3, [r9, #58]	; 0x3a
   139d0:	ldr	r0, [r9, #12]
   139d4:	bl	1130c <closedir@plt>
   139d8:	mov	r3, #0
   139dc:	str	r3, [r9, #12]
   139e0:	ldr	r3, [r5, #48]	; 0x30
   139e4:	tst	r3, #512	; 0x200
   139e8:	beq	139fc <__assert_fail@plt+0x26cc>
   139ec:	ldr	r0, [sp, #60]	; 0x3c
   139f0:	cmp	r0, #0
   139f4:	blt	139fc <__assert_fail@plt+0x26cc>
   139f8:	bl	112f4 <close@plt>
   139fc:	mov	r3, #0
   13a00:	str	r3, [r9, #12]
   13a04:	str	r3, [sp, #52]	; 0x34
   13a08:	b	13800 <__assert_fail@plt+0x24d0>
   13a0c:	ldr	r3, [sp, #40]	; 0x28
   13a10:	cmp	r3, #3
   13a14:	movne	r3, #0
   13a18:	strne	r3, [sp, #8]
   13a1c:	bne	13c6c <__assert_fail@plt+0x293c>
   13a20:	mov	r3, #4
   13a24:	strh	r3, [r9, #56]	; 0x38
   13a28:	bl	111ec <__errno_location@plt>
   13a2c:	ldr	r3, [r0]
   13a30:	str	r3, [r9, #32]
   13a34:	mov	r3, #0
   13a38:	str	r3, [sp, #8]
   13a3c:	b	13c6c <__assert_fail@plt+0x293c>
   13a40:	mov	r2, #0
   13a44:	mov	r1, r9
   13a48:	mov	r0, r5
   13a4c:	bl	12e24 <__assert_fail@plt+0x1af4>
   13a50:	strh	r0, [r9, #56]	; 0x38
   13a54:	b	13934 <__assert_fail@plt+0x2604>
   13a58:	mov	r1, r9
   13a5c:	mov	r0, r5
   13a60:	bl	136e8 <__assert_fail@plt+0x23b8>
   13a64:	mov	r2, #0
   13a68:	mov	r1, r9
   13a6c:	mov	r0, r5
   13a70:	bl	12e24 <__assert_fail@plt+0x1af4>
   13a74:	mov	r1, r9
   13a78:	mov	r0, r5
   13a7c:	bl	13364 <__assert_fail@plt+0x2034>
   13a80:	cmp	r0, #0
   13a84:	bne	13934 <__assert_fail@plt+0x2604>
   13a88:	bl	111ec <__errno_location@plt>
   13a8c:	mov	r3, #12
   13a90:	str	r3, [r0]
   13a94:	mov	r3, #0
   13a98:	str	r3, [sp, #8]
   13a9c:	b	13c6c <__assert_fail@plt+0x293c>
   13aa0:	ldr	r3, [r9, #84]	; 0x54
   13aa4:	cmp	r3, #2
   13aa8:	bne	13964 <__assert_fail@plt+0x2634>
   13aac:	ldr	r1, [sp, #60]	; 0x3c
   13ab0:	mov	r0, r9
   13ab4:	bl	13248 <__assert_fail@plt+0x1f18>
   13ab8:	ldr	r3, [pc, #1760]	; 141a0 <__assert_fail@plt+0x2e70>
   13abc:	cmp	r0, r3
   13ac0:	beq	13b18 <__assert_fail@plt+0x27e8>
   13ac4:	bgt	13b00 <__assert_fail@plt+0x27d0>
   13ac8:	ldr	r3, [pc, #1748]	; 141a4 <__assert_fail@plt+0x2e74>
   13acc:	cmp	r0, r3
   13ad0:	beq	13b18 <__assert_fail@plt+0x27e8>
   13ad4:	cmp	r0, #0
   13ad8:	beq	13b18 <__assert_fail@plt+0x27e8>
   13adc:	ldr	r3, [sp, #40]	; 0x28
   13ae0:	cmp	r3, #3
   13ae4:	moveq	r6, #1
   13ae8:	movne	r6, #0
   13aec:	movne	r3, #0
   13af0:	strne	r3, [sp, #52]	; 0x34
   13af4:	bne	13800 <__assert_fail@plt+0x24d0>
   13af8:	mov	r4, #0
   13afc:	b	13978 <__assert_fail@plt+0x2648>
   13b00:	ldr	r3, [pc, #1696]	; 141a8 <__assert_fail@plt+0x2e78>
   13b04:	cmp	r0, r3
   13b08:	beq	13b18 <__assert_fail@plt+0x27e8>
   13b0c:	ldr	r3, [pc, #1688]	; 141ac <__assert_fail@plt+0x2e7c>
   13b10:	cmp	r0, r3
   13b14:	bne	13adc <__assert_fail@plt+0x27ac>
   13b18:	ldr	r3, [sp, #40]	; 0x28
   13b1c:	cmp	r3, #3
   13b20:	movne	r6, #0
   13b24:	moveq	r6, #1
   13b28:	mov	r4, #1
   13b2c:	b	13978 <__assert_fail@plt+0x2648>
   13b30:	mov	r2, #3
   13b34:	ldr	r1, [pc, #1652]	; 141b0 <__assert_fail@plt+0x2e80>
   13b38:	ldr	r0, [sp, #60]	; 0x3c
   13b3c:	bl	19028 <__assert_fail@plt+0x7cf8>
   13b40:	str	r0, [sp, #60]	; 0x3c
   13b44:	b	13984 <__assert_fail@plt+0x2654>
   13b48:	mov	r3, #0
   13b4c:	str	r3, [sp, #52]	; 0x34
   13b50:	b	13800 <__assert_fail@plt+0x24d0>
   13b54:	ldr	r3, [sp, #16]
   13b58:	ldr	r3, [r3]
   13b5c:	cmp	r3, #0
   13b60:	beq	13b8c <__assert_fail@plt+0x285c>
   13b64:	str	r3, [r9, #32]
   13b68:	ldr	r3, [sp, #44]	; 0x2c
   13b6c:	cmp	r8, #0
   13b70:	cmpeq	r3, #0
   13b74:	movne	r3, #1
   13b78:	moveq	r3, #0
   13b7c:	cmp	r3, #0
   13b80:	movne	r3, #7
   13b84:	moveq	r3, #4
   13b88:	strh	r3, [r9, #56]	; 0x38
   13b8c:	ldr	r0, [r9, #12]
   13b90:	cmp	r0, #0
   13b94:	beq	13ba4 <__assert_fail@plt+0x2874>
   13b98:	bl	1130c <closedir@plt>
   13b9c:	mov	r3, #0
   13ba0:	str	r3, [r9, #12]
   13ba4:	ldr	r3, [sp, #36]	; 0x24
   13ba8:	cmp	r3, #0
   13bac:	bne	13fec <__assert_fail@plt+0x2cbc>
   13bb0:	ldr	r3, [r5, #48]	; 0x30
   13bb4:	tst	r3, #4
   13bb8:	beq	13be4 <__assert_fail@plt+0x28b4>
   13bbc:	ldr	r3, [r5, #36]	; 0x24
   13bc0:	ldr	r2, [sp, #12]
   13bc4:	cmp	r8, #0
   13bc8:	cmpne	r3, r2
   13bcc:	ldreq	r3, [sp, #28]
   13bd0:	subeq	r3, r3, #1
   13bd4:	streq	r3, [sp, #28]
   13bd8:	mov	r3, #0
   13bdc:	ldr	r2, [sp, #28]
   13be0:	strb	r3, [r2]
   13be4:	ldr	r3, [sp, #52]	; 0x34
   13be8:	ldr	r2, [sp, #44]	; 0x2c
   13bec:	cmp	r2, #0
   13bf0:	movne	r3, #0
   13bf4:	andeq	r3, r3, #1
   13bf8:	cmp	r3, #0
   13bfc:	beq	13c34 <__assert_fail@plt+0x2904>
   13c00:	ldr	r3, [sp, #40]	; 0x28
   13c04:	cmp	r8, #0
   13c08:	cmpne	r3, #1
   13c0c:	bne	13c34 <__assert_fail@plt+0x2904>
   13c10:	ldr	r3, [r9, #48]	; 0x30
   13c14:	cmp	r3, #0
   13c18:	bne	1406c <__assert_fail@plt+0x2d3c>
   13c1c:	mov	r0, r5
   13c20:	bl	134b0 <__assert_fail@plt+0x2180>
   13c24:	adds	r0, r0, #0
   13c28:	movne	r0, #1
   13c2c:	cmp	r0, #0
   13c30:	bne	1408c <__assert_fail@plt+0x2d5c>
   13c34:	cmp	r8, #0
   13c38:	beq	140b4 <__assert_fail@plt+0x2d84>
   13c3c:	ldr	r3, [sp, #48]	; 0x30
   13c40:	cmp	r3, #0
   13c44:	bne	140ec <__assert_fail@plt+0x2dbc>
   13c48:	ldr	r3, [r5, #44]	; 0x2c
   13c4c:	cmp	r3, #0
   13c50:	cmpne	r8, #1
   13c54:	bls	13c6c <__assert_fail@plt+0x293c>
   13c58:	mov	r2, r8
   13c5c:	ldr	r1, [sp, #8]
   13c60:	mov	r0, r5
   13c64:	bl	12f7c <__assert_fail@plt+0x1c4c>
   13c68:	str	r0, [sp, #8]
   13c6c:	ldr	r0, [sp, #8]
   13c70:	add	sp, sp, #68	; 0x44
   13c74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13c78:	ldrb	r3, [r7, #20]
   13c7c:	cmp	r3, #0
   13c80:	beq	13fe4 <__assert_fail@plt+0x2cb4>
   13c84:	ldrh	r3, [r7, #20]
   13c88:	cmp	r3, #46	; 0x2e
   13c8c:	bne	13e3c <__assert_fail@plt+0x2b0c>
   13c90:	ldr	r4, [sp, #4]
   13c94:	b	13df8 <__assert_fail@plt+0x2ac8>
   13c98:	ldr	fp, [r5, #24]
   13c9c:	ldr	r3, [sp, #32]
   13ca0:	add	r1, r3, #2
   13ca4:	add	r1, r1, r6
   13ca8:	mov	r0, r5
   13cac:	bl	12db4 <__assert_fail@plt+0x1a84>
   13cb0:	cmp	r0, #0
   13cb4:	beq	13cec <__assert_fail@plt+0x29bc>
   13cb8:	ldr	r3, [r5, #24]
   13cbc:	cmp	fp, r3
   13cc0:	beq	13d34 <__assert_fail@plt+0x2a04>
   13cc4:	ldr	r2, [r5, #48]	; 0x30
   13cc8:	tst	r2, #4
   13ccc:	ldrne	r2, [sp, #12]
   13cd0:	addne	r3, r3, r2
   13cd4:	strne	r3, [sp, #28]
   13cd8:	ldr	fp, [r5, #36]	; 0x24
   13cdc:	ldr	r3, [sp, #12]
   13ce0:	sub	fp, fp, r3
   13ce4:	str	r0, [sp, #36]	; 0x24
   13ce8:	b	13e6c <__assert_fail@plt+0x2b3c>
   13cec:	ldr	r7, [sp, #16]
   13cf0:	ldr	r6, [r7]
   13cf4:	mov	r0, r4
   13cf8:	bl	12c88 <__assert_fail@plt+0x1958>
   13cfc:	ldr	r0, [sp, #8]
   13d00:	bl	13198 <__assert_fail@plt+0x1e68>
   13d04:	ldr	r0, [r9, #12]
   13d08:	bl	1130c <closedir@plt>
   13d0c:	mov	r2, #0
   13d10:	str	r2, [r9, #12]
   13d14:	mov	r3, #7
   13d18:	strh	r3, [r9, #56]	; 0x38
   13d1c:	ldr	r3, [r5, #48]	; 0x30
   13d20:	orr	r3, r3, #8192	; 0x2000
   13d24:	str	r3, [r5, #48]	; 0x30
   13d28:	str	r6, [r7]
   13d2c:	str	r2, [sp, #8]
   13d30:	b	13c6c <__assert_fail@plt+0x293c>
   13d34:	ldr	r0, [sp, #36]	; 0x24
   13d38:	b	13cd8 <__assert_fail@plt+0x29a8>
   13d3c:	mov	r0, r4
   13d40:	bl	12c88 <__assert_fail@plt+0x1958>
   13d44:	ldr	r0, [sp, #8]
   13d48:	bl	13198 <__assert_fail@plt+0x1e68>
   13d4c:	ldr	r0, [r9, #12]
   13d50:	bl	1130c <closedir@plt>
   13d54:	mov	r2, #0
   13d58:	str	r2, [r9, #12]
   13d5c:	mov	r3, #7
   13d60:	strh	r3, [r9, #56]	; 0x38
   13d64:	ldr	r3, [r5, #48]	; 0x30
   13d68:	orr	r3, r3, #8192	; 0x2000
   13d6c:	str	r3, [r5, #48]	; 0x30
   13d70:	mov	r3, #36	; 0x24
   13d74:	ldr	r1, [sp, #16]
   13d78:	str	r3, [r1]
   13d7c:	str	r2, [sp, #8]
   13d80:	b	13c6c <__assert_fail@plt+0x293c>
   13d84:	ldr	r3, [r4, #28]
   13d88:	str	r3, [r4, #24]
   13d8c:	ldr	r2, [r4, #52]	; 0x34
   13d90:	add	r2, r2, #1
   13d94:	add	r1, r4, #168	; 0xa8
   13d98:	ldr	r0, [sp, #28]
   13d9c:	bl	11048 <memmove@plt>
   13da0:	b	13ea8 <__assert_fail@plt+0x2b78>
   13da4:	mov	r3, sl
   13da8:	mov	r2, #16384	; 0x4000
   13dac:	str	r2, [r4, #80]	; 0x50
   13db0:	cmp	r3, #0
   13db4:	movne	r2, #1
   13db8:	moveq	r2, #2
   13dbc:	mov	r3, #0
   13dc0:	strd	r2, [r4, #112]	; 0x70
   13dc4:	str	sl, [r4, #8]
   13dc8:	ldr	r3, [sp, #8]
   13dcc:	cmp	r3, #0
   13dd0:	ldrne	r3, [sp, #4]
   13dd4:	strne	r4, [r3, #8]
   13dd8:	streq	r4, [sp, #8]
   13ddc:	ldr	r3, [pc, #976]	; 141b4 <__assert_fail@plt+0x2e84>
   13de0:	cmp	r8, r3
   13de4:	beq	13f98 <__assert_fail@plt+0x2c68>
   13de8:	add	r8, r8, #1
   13dec:	ldr	r3, [sp, #24]
   13df0:	cmp	r8, r3
   13df4:	bcs	13ba4 <__assert_fail@plt+0x2874>
   13df8:	str	r4, [sp, #4]
   13dfc:	ldr	r3, [r9, #12]
   13e00:	cmp	r3, #0
   13e04:	beq	13ba4 <__assert_fail@plt+0x2874>
   13e08:	bl	111ec <__errno_location@plt>
   13e0c:	str	r0, [sp, #16]
   13e10:	str	sl, [r0]
   13e14:	ldr	r0, [r9, #12]
   13e18:	bl	1127c <readdir64@plt>
   13e1c:	subs	r7, r0, #0
   13e20:	beq	13b54 <__assert_fail@plt+0x2824>
   13e24:	ldr	r3, [r5, #48]	; 0x30
   13e28:	tst	r3, #32
   13e2c:	bne	13e3c <__assert_fail@plt+0x2b0c>
   13e30:	ldrb	r3, [r7, #19]
   13e34:	cmp	r3, #46	; 0x2e
   13e38:	beq	13c78 <__assert_fail@plt+0x2948>
   13e3c:	add	r4, r7, #19
   13e40:	mov	r0, r4
   13e44:	bl	111bc <strlen@plt>
   13e48:	mov	r6, r0
   13e4c:	mov	r2, r0
   13e50:	mov	r1, r4
   13e54:	mov	r0, r5
   13e58:	bl	13050 <__assert_fail@plt+0x1d20>
   13e5c:	subs	r4, r0, #0
   13e60:	beq	13cec <__assert_fail@plt+0x29bc>
   13e64:	cmp	fp, r6
   13e68:	bls	13c98 <__assert_fail@plt+0x2968>
   13e6c:	ldr	r3, [sp, #12]
   13e70:	adds	r6, r3, r6
   13e74:	bcs	13d3c <__assert_fail@plt+0x2a0c>
   13e78:	ldr	r3, [sp, #20]
   13e7c:	str	r3, [r4, #48]	; 0x30
   13e80:	ldr	r3, [r5]
   13e84:	str	r3, [r4, #4]
   13e88:	str	r6, [r4, #40]	; 0x28
   13e8c:	ldrd	r2, [r7]
   13e90:	strd	r2, [r4, #160]	; 0xa0
   13e94:	ldr	r3, [r5, #48]	; 0x30
   13e98:	tst	r3, #4
   13e9c:	addeq	r3, r4, #168	; 0xa8
   13ea0:	streq	r3, [r4, #24]
   13ea4:	bne	13d84 <__assert_fail@plt+0x2a54>
   13ea8:	ldr	r3, [r5, #44]	; 0x2c
   13eac:	cmp	r3, #0
   13eb0:	beq	13ec0 <__assert_fail@plt+0x2b90>
   13eb4:	ldr	r3, [r5, #48]	; 0x30
   13eb8:	tst	r3, #1024	; 0x400
   13ebc:	beq	13f80 <__assert_fail@plt+0x2c50>
   13ec0:	ldr	r3, [r5, #48]	; 0x30
   13ec4:	tst	r3, #8
   13ec8:	beq	14150 <__assert_fail@plt+0x2e20>
   13ecc:	ldrb	r2, [r7, #18]
   13ed0:	tst	r2, #251	; 0xfb
   13ed4:	beq	14150 <__assert_fail@plt+0x2e20>
   13ed8:	lsr	r3, r3, #4
   13edc:	and	r3, r3, #1
   13ee0:	cmp	r2, #10
   13ee4:	orrne	r3, r3, #1
   13ee8:	cmp	r3, #0
   13eec:	beq	14150 <__assert_fail@plt+0x2e20>
   13ef0:	mov	r2, #11
   13ef4:	strh	r2, [r4, #56]	; 0x38
   13ef8:	ldrb	r2, [r7, #18]
   13efc:	sub	r2, r2, #1
   13f00:	cmp	r2, #11
   13f04:	ldrls	pc, [pc, r2, lsl #2]
   13f08:	b	13f70 <__assert_fail@plt+0x2c40>
   13f0c:	andeq	r3, r1, r0, asr #30
   13f10:	andeq	r3, r1, r8, ror pc
   13f14:	andeq	r3, r1, r0, ror pc
   13f18:	andeq	r3, r1, r8, lsr #27
   13f1c:	andeq	r3, r1, r0, ror pc
   13f20:	andeq	r4, r1, r4, lsl r1
   13f24:	andeq	r3, r1, r0, ror pc
   13f28:	andeq	r3, r1, r8, asr pc
   13f2c:	andeq	r3, r1, r0, ror pc
   13f30:	andeq	r3, r1, ip, asr #30
   13f34:	andeq	r3, r1, r0, ror pc
   13f38:	andeq	r3, r1, r4, ror #30
   13f3c:	mov	r3, sl
   13f40:	mov	r2, #4096	; 0x1000
   13f44:	b	13dac <__assert_fail@plt+0x2a7c>
   13f48:	mov	r3, sl
   13f4c:	mov	r2, #40960	; 0xa000
   13f50:	b	13dac <__assert_fail@plt+0x2a7c>
   13f54:	mov	r3, sl
   13f58:	mov	r2, #32768	; 0x8000
   13f5c:	b	13dac <__assert_fail@plt+0x2a7c>
   13f60:	mov	r3, sl
   13f64:	mov	r2, #49152	; 0xc000
   13f68:	b	13dac <__assert_fail@plt+0x2a7c>
   13f6c:	mov	r3, sl
   13f70:	mov	r2, sl
   13f74:	b	13dac <__assert_fail@plt+0x2a7c>
   13f78:	mov	r2, #8192	; 0x2000
   13f7c:	b	13dac <__assert_fail@plt+0x2a7c>
   13f80:	mov	r2, sl
   13f84:	mov	r1, r4
   13f88:	mov	r0, r5
   13f8c:	bl	12e24 <__assert_fail@plt+0x1af4>
   13f90:	strh	r0, [r4, #56]	; 0x38
   13f94:	b	13dc4 <__assert_fail@plt+0x2a94>
   13f98:	ldr	r3, [r5, #44]	; 0x2c
   13f9c:	cmp	r3, #0
   13fa0:	bne	13de8 <__assert_fail@plt+0x2ab8>
   13fa4:	ldr	r1, [sp, #60]	; 0x3c
   13fa8:	mov	r0, r9
   13fac:	bl	13248 <__assert_fail@plt+0x1f18>
   13fb0:	ldr	r3, [pc, #488]	; 141a0 <__assert_fail@plt+0x2e70>
   13fb4:	cmp	r0, r3
   13fb8:	beq	13fdc <__assert_fail@plt+0x2cac>
   13fbc:	ldr	r3, [pc, #500]	; 141b8 <__assert_fail@plt+0x2e88>
   13fc0:	cmp	r0, r3
   13fc4:	beq	13fdc <__assert_fail@plt+0x2cac>
   13fc8:	ldr	r3, [pc, #468]	; 141a4 <__assert_fail@plt+0x2e74>
   13fcc:	cmp	r0, r3
   13fd0:	movne	r3, #1
   13fd4:	strne	r3, [sp, #48]	; 0x30
   13fd8:	bne	13de8 <__assert_fail@plt+0x2ab8>
   13fdc:	str	sl, [sp, #48]	; 0x30
   13fe0:	b	13de8 <__assert_fail@plt+0x2ab8>
   13fe4:	ldr	r4, [sp, #4]
   13fe8:	b	13df8 <__assert_fail@plt+0x2ac8>
   13fec:	ldr	r0, [r5, #24]
   13ff0:	ldr	r1, [r5, #4]
   13ff4:	cmp	r1, #0
   13ff8:	beq	14028 <__assert_fail@plt+0x2cf8>
   13ffc:	ldr	r3, [r1, #24]
   14000:	add	r2, r1, #168	; 0xa8
   14004:	cmp	r3, r2
   14008:	ldrne	r2, [r1, #28]
   1400c:	subne	r3, r3, r2
   14010:	addne	r3, r0, r3
   14014:	strne	r3, [r1, #24]
   14018:	str	r0, [r1, #28]
   1401c:	ldr	r1, [r1, #8]
   14020:	cmp	r1, #0
   14024:	bne	13ffc <__assert_fail@plt+0x2ccc>
   14028:	ldr	r3, [sp, #8]
   1402c:	ldr	r2, [r3, #48]	; 0x30
   14030:	cmp	r2, #0
   14034:	blt	13bb0 <__assert_fail@plt+0x2880>
   14038:	ldr	r2, [r3, #24]
   1403c:	add	r1, r3, #168	; 0xa8
   14040:	cmp	r2, r1
   14044:	ldrne	r1, [r3, #28]
   14048:	subne	r2, r2, r1
   1404c:	addne	r2, r0, r2
   14050:	strne	r2, [r3, #24]
   14054:	str	r0, [r3, #28]
   14058:	ldr	r2, [r3, #8]
   1405c:	cmp	r2, #0
   14060:	ldreq	r2, [r3, #4]
   14064:	mov	r3, r2
   14068:	b	1402c <__assert_fail@plt+0x2cfc>
   1406c:	ldr	r3, [pc, #328]	; 141bc <__assert_fail@plt+0x2e8c>
   14070:	mvn	r2, #0
   14074:	ldr	r1, [r9, #4]
   14078:	mov	r0, r5
   1407c:	bl	13500 <__assert_fail@plt+0x21d0>
   14080:	adds	r0, r0, #0
   14084:	movne	r0, #1
   14088:	b	13c2c <__assert_fail@plt+0x28fc>
   1408c:	mov	r3, #7
   14090:	strh	r3, [r9, #56]	; 0x38
   14094:	ldr	r3, [r5, #48]	; 0x30
   14098:	orr	r3, r3, #8192	; 0x2000
   1409c:	str	r3, [r5, #48]	; 0x30
   140a0:	ldr	r0, [sp, #8]
   140a4:	bl	13198 <__assert_fail@plt+0x1e68>
   140a8:	mov	r3, #0
   140ac:	str	r3, [sp, #8]
   140b0:	b	13c6c <__assert_fail@plt+0x293c>
   140b4:	ldr	r3, [sp, #40]	; 0x28
   140b8:	cmp	r3, #3
   140bc:	beq	140d4 <__assert_fail@plt+0x2da4>
   140c0:	ldr	r0, [sp, #8]
   140c4:	bl	13198 <__assert_fail@plt+0x1e68>
   140c8:	mov	r3, #0
   140cc:	str	r3, [sp, #8]
   140d0:	b	13c6c <__assert_fail@plt+0x293c>
   140d4:	ldrh	r3, [r9, #56]	; 0x38
   140d8:	cmp	r3, #4
   140dc:	cmpne	r3, #7
   140e0:	movne	r3, #6
   140e4:	strhne	r3, [r9, #56]	; 0x38
   140e8:	b	140c0 <__assert_fail@plt+0x2d90>
   140ec:	ldr	r3, [pc, #204]	; 141c0 <__assert_fail@plt+0x2e90>
   140f0:	str	r3, [r5, #44]	; 0x2c
   140f4:	mov	r2, r8
   140f8:	ldr	r1, [sp, #8]
   140fc:	mov	r0, r5
   14100:	bl	12f7c <__assert_fail@plt+0x1c4c>
   14104:	str	r0, [sp, #8]
   14108:	mov	r3, #0
   1410c:	str	r3, [r5, #44]	; 0x2c
   14110:	b	13c6c <__assert_fail@plt+0x293c>
   14114:	mov	r3, #24576	; 0x6000
   14118:	str	r3, [r4, #80]	; 0x50
   1411c:	mov	r2, #1
   14120:	mov	r3, #0
   14124:	b	13dc0 <__assert_fail@plt+0x2a90>
   14128:	mov	r3, #24576	; 0x6000
   1412c:	str	r3, [r4, #80]	; 0x50
   14130:	mov	r2, #2
   14134:	mov	r3, #0
   14138:	b	13dc0 <__assert_fail@plt+0x2a90>
   1413c:	mov	r3, #8192	; 0x2000
   14140:	str	r3, [r4, #80]	; 0x50
   14144:	mov	r2, #2
   14148:	mov	r3, #0
   1414c:	b	13dc0 <__assert_fail@plt+0x2a90>
   14150:	mov	r3, #11
   14154:	strh	r3, [r4, #56]	; 0x38
   14158:	ldrb	r3, [r7, #18]
   1415c:	sub	r3, r3, #1
   14160:	cmp	r3, #11
   14164:	ldrls	pc, [pc, r3, lsl #2]
   14168:	b	13f6c <__assert_fail@plt+0x2c3c>
   1416c:	andeq	r3, r1, ip, lsr pc
   14170:	andeq	r4, r1, ip, lsr r1
   14174:	andeq	r3, r1, ip, ror #30
   14178:	andeq	r3, r1, r4, lsr #27
   1417c:	andeq	r3, r1, ip, ror #30
   14180:	andeq	r4, r1, r8, lsr #2
   14184:	andeq	r3, r1, ip, ror #30
   14188:	andeq	r3, r1, r4, asr pc
   1418c:	andeq	r3, r1, ip, ror #30
   14190:	andeq	r3, r1, r8, asr #30
   14194:	andeq	r3, r1, ip, ror #30
   14198:	andeq	r3, r1, r0, ror #30
   1419c:	andeq	r8, r1, r0, lsr #13
   141a0:	andeq	r6, r0, r9, ror #18
   141a4:			; <UNDEFINED> instruction: 0xff534d42
   141a8:	andeq	r9, r0, r0, lsr #31
   141ac:	movtpl	r4, #24911	; 0x614f
   141b0:	andeq	r0, r0, r6, lsl #8
   141b4:	andeq	r2, r0, r0, lsl r7
   141b8:			; <UNDEFINED> instruction: 0x01021994
   141bc:	andeq	sl, r1, r4, asr #21
   141c0:	andeq	r2, r1, ip, ror sp
   141c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   141c8:	sub	sp, sp, #20
   141cc:	bic	r3, r1, #4080	; 0xff0
   141d0:	bics	r3, r3, #15
   141d4:	bne	142f4 <__assert_fail@plt+0x2fc4>
   141d8:	mov	r7, r0
   141dc:	mov	r9, r1
   141e0:	mov	fp, r2
   141e4:	and	r3, r1, #516	; 0x204
   141e8:	cmp	r3, #516	; 0x204
   141ec:	beq	14308 <__assert_fail@plt+0x2fd8>
   141f0:	tst	r1, #18
   141f4:	beq	1431c <__assert_fail@plt+0x2fec>
   141f8:	mov	r1, #96	; 0x60
   141fc:	mov	r0, #1
   14200:	bl	18d50 <__assert_fail@plt+0x7a20>
   14204:	subs	r6, r0, #0
   14208:	beq	14538 <__assert_fail@plt+0x3208>
   1420c:	str	fp, [r6, #44]	; 0x2c
   14210:	tst	r9, #2
   14214:	streq	r9, [r6, #48]	; 0x30
   14218:	bicne	r3, r9, #512	; 0x200
   1421c:	orrne	r3, r3, #4
   14220:	strne	r3, [r6, #48]	; 0x30
   14224:	mvn	r3, #99	; 0x63
   14228:	str	r3, [r6, #32]
   1422c:	ldr	r0, [r7]
   14230:	cmp	r0, #0
   14234:	beq	14330 <__assert_fail@plt+0x3000>
   14238:	mov	r5, r7
   1423c:	mov	r4, #0
   14240:	bl	111bc <strlen@plt>
   14244:	cmp	r4, r0
   14248:	movcc	r4, r0
   1424c:	ldr	r0, [r5, #4]!
   14250:	cmp	r0, #0
   14254:	bne	14240 <__assert_fail@plt+0x2f10>
   14258:	add	r1, r4, #1
   1425c:	cmp	r1, #4096	; 0x1000
   14260:	movcc	r1, #4096	; 0x1000
   14264:	mov	r0, r6
   14268:	bl	12db4 <__assert_fail@plt+0x1a84>
   1426c:	subs	sl, r0, #0
   14270:	beq	1452c <__assert_fail@plt+0x31fc>
   14274:	ldr	r3, [r7]
   14278:	cmp	r3, #0
   1427c:	beq	14544 <__assert_fail@plt+0x3214>
   14280:	mov	r2, #0
   14284:	ldr	r1, [pc, #716]	; 14558 <__assert_fail@plt+0x3228>
   14288:	mov	r0, r6
   1428c:	bl	13050 <__assert_fail@plt+0x1d20>
   14290:	subs	r3, r0, #0
   14294:	mov	r2, r3
   14298:	str	r3, [sp, #8]
   1429c:	beq	14524 <__assert_fail@plt+0x31f4>
   142a0:	mvn	r3, #0
   142a4:	str	r3, [r2, #48]	; 0x30
   142a8:	cmp	fp, #0
   142ac:	beq	142bc <__assert_fail@plt+0x2f8c>
   142b0:	ldr	sl, [r6, #48]	; 0x30
   142b4:	lsr	sl, sl, #10
   142b8:	and	sl, sl, #1
   142bc:	ldr	r4, [r7]
   142c0:	cmp	r4, #0
   142c4:	beq	144d4 <__assert_fail@plt+0x31a4>
   142c8:	mov	r3, #0
   142cc:	mov	r5, r3
   142d0:	str	r3, [sp, #12]
   142d4:	mov	r8, r3
   142d8:	lsr	r9, r9, #11
   142dc:	eor	r9, r9, #1
   142e0:	and	r3, r9, #1
   142e4:	mov	r9, r5
   142e8:	str	r6, [sp, #4]
   142ec:	mov	r6, r3
   142f0:	b	143a8 <__assert_fail@plt+0x3078>
   142f4:	bl	111ec <__errno_location@plt>
   142f8:	mov	r3, #22
   142fc:	str	r3, [r0]
   14300:	mov	r6, #0
   14304:	b	14538 <__assert_fail@plt+0x3208>
   14308:	bl	111ec <__errno_location@plt>
   1430c:	mov	r3, #22
   14310:	str	r3, [r0]
   14314:	mov	r6, #0
   14318:	b	14538 <__assert_fail@plt+0x3208>
   1431c:	bl	111ec <__errno_location@plt>
   14320:	mov	r3, #22
   14324:	str	r3, [r0]
   14328:	mov	r6, #0
   1432c:	b	14538 <__assert_fail@plt+0x3208>
   14330:	mov	r4, #0
   14334:	b	14258 <__assert_fail@plt+0x2f28>
   14338:	mov	r1, r4
   1433c:	ldr	r0, [sp, #4]
   14340:	bl	13050 <__assert_fail@plt+0x1d20>
   14344:	subs	r4, r0, #0
   14348:	beq	14510 <__assert_fail@plt+0x31e0>
   1434c:	str	r9, [r4, #48]	; 0x30
   14350:	ldr	r3, [sp, #8]
   14354:	str	r3, [r4, #4]
   14358:	add	r3, r4, #168	; 0xa8
   1435c:	str	r3, [r4, #24]
   14360:	cmp	r5, #0
   14364:	moveq	r3, #0
   14368:	andne	r3, sl, #1
   1436c:	cmp	r3, #0
   14370:	beq	14410 <__assert_fail@plt+0x30e0>
   14374:	mov	r3, #11
   14378:	strh	r3, [r4, #56]	; 0x38
   1437c:	mov	r2, #2
   14380:	mov	r3, #0
   14384:	strd	r2, [r4, #112]	; 0x70
   14388:	cmp	fp, #0
   1438c:	beq	14428 <__assert_fail@plt+0x30f8>
   14390:	str	r5, [r4, #8]
   14394:	mov	r5, r4
   14398:	add	r8, r8, #1
   1439c:	ldr	r4, [r7, #4]!
   143a0:	cmp	r4, #0
   143a4:	beq	14448 <__assert_fail@plt+0x3118>
   143a8:	mov	r0, r4
   143ac:	bl	111bc <strlen@plt>
   143b0:	mov	r2, r0
   143b4:	cmp	r0, #2
   143b8:	movls	r3, #0
   143bc:	andhi	r3, r6, #1
   143c0:	cmp	r3, #0
   143c4:	beq	14338 <__assert_fail@plt+0x3008>
   143c8:	add	r3, r4, r0
   143cc:	ldrb	r3, [r3, #-1]
   143d0:	cmp	r3, #47	; 0x2f
   143d4:	bne	14338 <__assert_fail@plt+0x3008>
   143d8:	cmp	r0, #1
   143dc:	bls	14338 <__assert_fail@plt+0x3008>
   143e0:	sub	r1, r0, #2
   143e4:	add	r3, r4, r1
   143e8:	ldrb	r1, [r4, r1]
   143ec:	cmp	r1, #47	; 0x2f
   143f0:	bne	14338 <__assert_fail@plt+0x3008>
   143f4:	sub	r2, r2, #1
   143f8:	cmp	r2, #1
   143fc:	beq	14338 <__assert_fail@plt+0x3008>
   14400:	ldrb	r1, [r3, #-1]!
   14404:	cmp	r1, #47	; 0x2f
   14408:	beq	143f4 <__assert_fail@plt+0x30c4>
   1440c:	b	14338 <__assert_fail@plt+0x3008>
   14410:	mov	r2, r9
   14414:	mov	r1, r4
   14418:	ldr	r0, [sp, #4]
   1441c:	bl	12e24 <__assert_fail@plt+0x1af4>
   14420:	strh	r0, [r4, #56]	; 0x38
   14424:	b	14388 <__assert_fail@plt+0x3058>
   14428:	str	r9, [r4, #8]
   1442c:	cmp	r5, #0
   14430:	ldrne	r3, [sp, #12]
   14434:	strne	r4, [r3, #8]
   14438:	strne	r4, [sp, #12]
   1443c:	streq	r4, [sp, #12]
   14440:	moveq	r5, r4
   14444:	b	14398 <__assert_fail@plt+0x3068>
   14448:	ldr	r6, [sp, #4]
   1444c:	cmp	fp, #0
   14450:	cmpne	r8, #1
   14454:	bhi	144bc <__assert_fail@plt+0x318c>
   14458:	mov	r2, #0
   1445c:	ldr	r1, [pc, #244]	; 14558 <__assert_fail@plt+0x3228>
   14460:	mov	r0, r6
   14464:	bl	13050 <__assert_fail@plt+0x1d20>
   14468:	str	r0, [r6]
   1446c:	cmp	r0, #0
   14470:	beq	14514 <__assert_fail@plt+0x31e4>
   14474:	str	r5, [r0, #8]
   14478:	ldr	r3, [r6]
   1447c:	mov	r2, #9
   14480:	strh	r2, [r3, #56]	; 0x38
   14484:	ldr	r3, [r6]
   14488:	mov	r2, #1
   1448c:	str	r2, [r3, #48]	; 0x30
   14490:	mov	r0, r6
   14494:	bl	130c4 <__assert_fail@plt+0x1d94>
   14498:	cmp	r0, #0
   1449c:	beq	14514 <__assert_fail@plt+0x31e4>
   144a0:	ldr	r3, [r6, #48]	; 0x30
   144a4:	tst	r3, #516	; 0x204
   144a8:	beq	144ec <__assert_fail@plt+0x31bc>
   144ac:	mvn	r1, #0
   144b0:	add	r0, r6, #60	; 0x3c
   144b4:	bl	15e50 <__assert_fail@plt+0x4b20>
   144b8:	b	14538 <__assert_fail@plt+0x3208>
   144bc:	mov	r2, r8
   144c0:	mov	r1, r5
   144c4:	mov	r0, r6
   144c8:	bl	12f7c <__assert_fail@plt+0x1c4c>
   144cc:	mov	r5, r0
   144d0:	b	14458 <__assert_fail@plt+0x3128>
   144d4:	mov	r5, #0
   144d8:	b	14458 <__assert_fail@plt+0x3128>
   144dc:	mov	r3, #0
   144e0:	str	r3, [sp, #8]
   144e4:	mov	r5, r3
   144e8:	b	14458 <__assert_fail@plt+0x3128>
   144ec:	ldr	r1, [pc, #104]	; 1455c <__assert_fail@plt+0x322c>
   144f0:	mov	r0, r6
   144f4:	bl	13148 <__assert_fail@plt+0x1e18>
   144f8:	str	r0, [r6, #28]
   144fc:	cmp	r0, #0
   14500:	ldrlt	r3, [r6, #48]	; 0x30
   14504:	orrlt	r3, r3, #4
   14508:	strlt	r3, [r6, #48]	; 0x30
   1450c:	b	144ac <__assert_fail@plt+0x317c>
   14510:	ldr	r6, [sp, #4]
   14514:	mov	r0, r5
   14518:	bl	13198 <__assert_fail@plt+0x1e68>
   1451c:	ldr	r0, [sp, #8]
   14520:	bl	12c88 <__assert_fail@plt+0x1958>
   14524:	ldr	r0, [r6, #24]
   14528:	bl	12c88 <__assert_fail@plt+0x1958>
   1452c:	mov	r0, r6
   14530:	bl	12c88 <__assert_fail@plt+0x1958>
   14534:	mov	r6, #0
   14538:	mov	r0, r6
   1453c:	add	sp, sp, #20
   14540:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14544:	cmp	fp, #0
   14548:	beq	144dc <__assert_fail@plt+0x31ac>
   1454c:	mov	r3, #0
   14550:	str	r3, [sp, #8]
   14554:	b	142b0 <__assert_fail@plt+0x2f80>
   14558:	andeq	sl, r1, r0, lsr r3
   1455c:	andeq	sl, r1, r8, asr #21
   14560:	push	{r4, r5, r6, lr}
   14564:	mov	r5, r0
   14568:	ldr	r0, [r0]
   1456c:	cmp	r0, #0
   14570:	beq	145a8 <__assert_fail@plt+0x3278>
   14574:	ldr	r3, [r0, #48]	; 0x30
   14578:	cmp	r3, #0
   1457c:	blt	1460c <__assert_fail@plt+0x32dc>
   14580:	ldr	r4, [r0, #8]
   14584:	cmp	r4, #0
   14588:	ldreq	r4, [r0, #4]
   1458c:	bl	12c88 <__assert_fail@plt+0x1958>
   14590:	mov	r0, r4
   14594:	ldr	r3, [r4, #48]	; 0x30
   14598:	cmp	r3, #0
   1459c:	bge	14580 <__assert_fail@plt+0x3250>
   145a0:	mov	r0, r4
   145a4:	bl	12c88 <__assert_fail@plt+0x1958>
   145a8:	ldr	r0, [r5, #4]
   145ac:	cmp	r0, #0
   145b0:	beq	145b8 <__assert_fail@plt+0x3288>
   145b4:	bl	13198 <__assert_fail@plt+0x1e68>
   145b8:	ldr	r0, [r5, #8]
   145bc:	bl	12c88 <__assert_fail@plt+0x1958>
   145c0:	ldr	r0, [r5, #24]
   145c4:	bl	12c88 <__assert_fail@plt+0x1958>
   145c8:	ldr	r3, [r5, #48]	; 0x30
   145cc:	tst	r3, #512	; 0x200
   145d0:	beq	14614 <__assert_fail@plt+0x32e4>
   145d4:	ldr	r0, [r5, #32]
   145d8:	cmp	r0, #0
   145dc:	blt	1461c <__assert_fail@plt+0x32ec>
   145e0:	bl	112f4 <close@plt>
   145e4:	cmp	r0, #0
   145e8:	beq	1461c <__assert_fail@plt+0x32ec>
   145ec:	bl	111ec <__errno_location@plt>
   145f0:	ldr	r4, [r0]
   145f4:	add	r0, r5, #60	; 0x3c
   145f8:	bl	13214 <__assert_fail@plt+0x1ee4>
   145fc:	ldr	r0, [r5, #52]	; 0x34
   14600:	cmp	r0, #0
   14604:	bne	14634 <__assert_fail@plt+0x3304>
   14608:	b	14638 <__assert_fail@plt+0x3308>
   1460c:	mov	r4, r0
   14610:	b	145a0 <__assert_fail@plt+0x3270>
   14614:	tst	r3, #4
   14618:	beq	14658 <__assert_fail@plt+0x3328>
   1461c:	add	r0, r5, #60	; 0x3c
   14620:	bl	13214 <__assert_fail@plt+0x1ee4>
   14624:	ldr	r0, [r5, #52]	; 0x34
   14628:	cmp	r0, #0
   1462c:	movne	r4, #0
   14630:	beq	146ac <__assert_fail@plt+0x337c>
   14634:	bl	15948 <__assert_fail@plt+0x4618>
   14638:	mov	r0, r5
   1463c:	bl	131d8 <__assert_fail@plt+0x1ea8>
   14640:	mov	r0, r5
   14644:	bl	12c88 <__assert_fail@plt+0x1958>
   14648:	cmp	r4, #0
   1464c:	bne	1469c <__assert_fail@plt+0x336c>
   14650:	mov	r0, r4
   14654:	pop	{r4, r5, r6, pc}
   14658:	ldr	r0, [r5, #28]
   1465c:	bl	112a0 <fchdir@plt>
   14660:	subs	r4, r0, #0
   14664:	beq	14670 <__assert_fail@plt+0x3340>
   14668:	bl	111ec <__errno_location@plt>
   1466c:	ldr	r4, [r0]
   14670:	ldr	r0, [r5, #28]
   14674:	bl	112f4 <close@plt>
   14678:	clz	r3, r4
   1467c:	lsr	r3, r3, #5
   14680:	cmp	r0, #0
   14684:	moveq	r3, #0
   14688:	cmp	r3, #0
   1468c:	beq	145f4 <__assert_fail@plt+0x32c4>
   14690:	bl	111ec <__errno_location@plt>
   14694:	ldr	r4, [r0]
   14698:	b	145f4 <__assert_fail@plt+0x32c4>
   1469c:	bl	111ec <__errno_location@plt>
   146a0:	str	r4, [r0]
   146a4:	mvn	r4, #0
   146a8:	b	14650 <__assert_fail@plt+0x3320>
   146ac:	mov	r0, r5
   146b0:	bl	131d8 <__assert_fail@plt+0x1ea8>
   146b4:	mov	r0, r5
   146b8:	bl	12c88 <__assert_fail@plt+0x1958>
   146bc:	mov	r4, #0
   146c0:	b	14650 <__assert_fail@plt+0x3320>
   146c4:	push	{r4, r5, r6, r7, r8, lr}
   146c8:	ldr	r5, [r0]
   146cc:	cmp	r5, #0
   146d0:	beq	14d14 <__assert_fail@plt+0x39e4>
   146d4:	ldr	r3, [r0, #48]	; 0x30
   146d8:	tst	r3, #8192	; 0x2000
   146dc:	bne	14d1c <__assert_fail@plt+0x39ec>
   146e0:	mov	r8, r0
   146e4:	ldrh	r3, [r5, #60]	; 0x3c
   146e8:	mov	r2, #3
   146ec:	strh	r2, [r5, #60]	; 0x3c
   146f0:	cmp	r3, #1
   146f4:	beq	14774 <__assert_fail@plt+0x3444>
   146f8:	cmp	r3, #2
   146fc:	beq	1478c <__assert_fail@plt+0x345c>
   14700:	ldrh	r2, [r5, #56]	; 0x38
   14704:	cmp	r2, #1
   14708:	bne	14980 <__assert_fail@plt+0x3650>
   1470c:	cmp	r3, #4
   14710:	beq	14734 <__assert_fail@plt+0x3404>
   14714:	ldr	r1, [r8, #48]	; 0x30
   14718:	tst	r1, #64	; 0x40
   1471c:	beq	1482c <__assert_fail@plt+0x34fc>
   14720:	ldrd	r6, [r5, #64]	; 0x40
   14724:	ldrd	r2, [r8, #16]
   14728:	cmp	r7, r3
   1472c:	cmpeq	r6, r2
   14730:	beq	1482c <__assert_fail@plt+0x34fc>
   14734:	ldrh	r3, [r5, #58]	; 0x3a
   14738:	tst	r3, #2
   1473c:	bne	14820 <__assert_fail@plt+0x34f0>
   14740:	ldr	r0, [r8, #4]
   14744:	cmp	r0, #0
   14748:	beq	14758 <__assert_fail@plt+0x3428>
   1474c:	bl	13198 <__assert_fail@plt+0x1e68>
   14750:	mov	r3, #0
   14754:	str	r3, [r8, #4]
   14758:	mov	r3, #6
   1475c:	strh	r3, [r5, #56]	; 0x38
   14760:	mov	r1, r5
   14764:	mov	r0, r8
   14768:	bl	136e8 <__assert_fail@plt+0x23b8>
   1476c:	mov	r4, r5
   14770:	b	14a5c <__assert_fail@plt+0x372c>
   14774:	mov	r2, #0
   14778:	mov	r1, r5
   1477c:	bl	12e24 <__assert_fail@plt+0x1af4>
   14780:	strh	r0, [r5, #56]	; 0x38
   14784:	mov	r4, r5
   14788:	b	14a5c <__assert_fail@plt+0x372c>
   1478c:	ldrh	r2, [r5, #56]	; 0x38
   14790:	sub	r3, r2, #12
   14794:	uxth	r3, r3
   14798:	cmp	r3, #1
   1479c:	bls	147ac <__assert_fail@plt+0x347c>
   147a0:	cmp	r2, #1
   147a4:	bne	14980 <__assert_fail@plt+0x3650>
   147a8:	b	14714 <__assert_fail@plt+0x33e4>
   147ac:	mov	r2, #1
   147b0:	mov	r1, r5
   147b4:	bl	12e24 <__assert_fail@plt+0x1af4>
   147b8:	strh	r0, [r5, #56]	; 0x38
   147bc:	cmp	r0, #1
   147c0:	movne	r4, r5
   147c4:	bne	14b5c <__assert_fail@plt+0x382c>
   147c8:	ldr	r3, [r8, #48]	; 0x30
   147cc:	tst	r3, #4
   147d0:	movne	r4, r5
   147d4:	bne	14b5c <__assert_fail@plt+0x382c>
   147d8:	ldr	r1, [pc, #1356]	; 14d2c <__assert_fail@plt+0x39fc>
   147dc:	mov	r0, r8
   147e0:	bl	13148 <__assert_fail@plt+0x1e18>
   147e4:	str	r0, [r5, #36]	; 0x24
   147e8:	cmp	r0, #0
   147ec:	blt	14804 <__assert_fail@plt+0x34d4>
   147f0:	ldrh	r3, [r5, #58]	; 0x3a
   147f4:	orr	r3, r3, #2
   147f8:	strh	r3, [r5, #58]	; 0x3a
   147fc:	mov	r4, r5
   14800:	b	14b5c <__assert_fail@plt+0x382c>
   14804:	bl	111ec <__errno_location@plt>
   14808:	ldr	r3, [r0]
   1480c:	str	r3, [r5, #32]
   14810:	mov	r3, #7
   14814:	strh	r3, [r5, #56]	; 0x38
   14818:	mov	r4, r5
   1481c:	b	14b5c <__assert_fail@plt+0x382c>
   14820:	ldr	r0, [r5, #36]	; 0x24
   14824:	bl	112f4 <close@plt>
   14828:	b	14740 <__assert_fail@plt+0x3410>
   1482c:	ldr	r0, [r8, #4]
   14830:	cmp	r0, #0
   14834:	beq	14880 <__assert_fail@plt+0x3550>
   14838:	tst	r1, #4096	; 0x1000
   1483c:	bne	1486c <__assert_fail@plt+0x353c>
   14840:	ldr	r3, [r5, #24]
   14844:	mvn	r2, #0
   14848:	mov	r1, r5
   1484c:	mov	r0, r8
   14850:	bl	13500 <__assert_fail@plt+0x21d0>
   14854:	cmp	r0, #0
   14858:	bne	148d4 <__assert_fail@plt+0x35a4>
   1485c:	ldr	r4, [r8, #4]
   14860:	mov	r3, #0
   14864:	str	r3, [r8, #4]
   14868:	b	14b1c <__assert_fail@plt+0x37ec>
   1486c:	bic	r1, r1, #4096	; 0x1000
   14870:	str	r1, [r8, #48]	; 0x30
   14874:	bl	13198 <__assert_fail@plt+0x1e68>
   14878:	mov	r3, #0
   1487c:	str	r3, [r8, #4]
   14880:	mov	r1, #3
   14884:	mov	r0, r8
   14888:	bl	137ac <__assert_fail@plt+0x247c>
   1488c:	str	r0, [r8, #4]
   14890:	cmp	r0, #0
   14894:	bne	1485c <__assert_fail@plt+0x352c>
   14898:	ldr	r3, [r8, #48]	; 0x30
   1489c:	tst	r3, #8192	; 0x2000
   148a0:	bne	14d24 <__assert_fail@plt+0x39f4>
   148a4:	ldr	r3, [r5, #32]
   148a8:	cmp	r3, #0
   148ac:	beq	148c0 <__assert_fail@plt+0x3590>
   148b0:	ldrh	r3, [r5, #56]	; 0x38
   148b4:	cmp	r3, #4
   148b8:	movne	r3, #7
   148bc:	strhne	r3, [r5, #56]	; 0x38
   148c0:	mov	r1, r5
   148c4:	mov	r0, r8
   148c8:	bl	136e8 <__assert_fail@plt+0x23b8>
   148cc:	mov	r4, r5
   148d0:	b	14a5c <__assert_fail@plt+0x372c>
   148d4:	bl	111ec <__errno_location@plt>
   148d8:	ldr	r3, [r0]
   148dc:	str	r3, [r5, #32]
   148e0:	ldrh	r3, [r5, #58]	; 0x3a
   148e4:	orr	r3, r3, #1
   148e8:	strh	r3, [r5, #58]	; 0x3a
   148ec:	ldr	r3, [r8, #4]
   148f0:	cmp	r3, #0
   148f4:	beq	1485c <__assert_fail@plt+0x352c>
   148f8:	ldr	r2, [r3, #4]
   148fc:	ldr	r2, [r2, #24]
   14900:	str	r2, [r3, #24]
   14904:	ldr	r3, [r3, #8]
   14908:	cmp	r3, #0
   1490c:	bne	148f8 <__assert_fail@plt+0x35c8>
   14910:	b	1485c <__assert_fail@plt+0x352c>
   14914:	str	r3, [r8]
   14918:	ldr	r2, [r8, #24]
   1491c:	ldr	r3, [r3, #40]	; 0x28
   14920:	mov	r1, #0
   14924:	strb	r1, [r2, r3]
   14928:	mov	r1, #3
   1492c:	mov	r0, r8
   14930:	bl	137ac <__assert_fail@plt+0x247c>
   14934:	subs	r4, r0, #0
   14938:	beq	14948 <__assert_fail@plt+0x3618>
   1493c:	mov	r0, r5
   14940:	bl	12c88 <__assert_fail@plt+0x1958>
   14944:	b	14b1c <__assert_fail@plt+0x37ec>
   14948:	ldr	r3, [r8, #48]	; 0x30
   1494c:	tst	r3, #8192	; 0x2000
   14950:	beq	1499c <__assert_fail@plt+0x366c>
   14954:	b	14a5c <__assert_fail@plt+0x372c>
   14958:	str	r4, [r8]
   1495c:	mov	r0, r5
   14960:	bl	12c88 <__assert_fail@plt+0x1958>
   14964:	ldr	r3, [r4, #48]	; 0x30
   14968:	cmp	r3, #0
   1496c:	beq	14a64 <__assert_fail@plt+0x3734>
   14970:	ldrh	r3, [r4, #60]	; 0x3c
   14974:	mov	r5, r4
   14978:	cmp	r3, #4
   1497c:	bne	14b14 <__assert_fail@plt+0x37e4>
   14980:	ldr	r4, [r5, #8]
   14984:	cmp	r4, #0
   14988:	bne	14958 <__assert_fail@plt+0x3628>
   1498c:	ldr	r3, [r5, #4]
   14990:	ldr	r2, [r3, #12]
   14994:	cmp	r2, #0
   14998:	bne	14914 <__assert_fail@plt+0x35e4>
   1499c:	ldr	r4, [r5, #4]
   149a0:	str	r4, [r8]
   149a4:	mov	r0, r5
   149a8:	bl	12c88 <__assert_fail@plt+0x1958>
   149ac:	ldr	r3, [r4, #48]	; 0x30
   149b0:	cmn	r3, #1
   149b4:	beq	14c5c <__assert_fail@plt+0x392c>
   149b8:	ldrh	r3, [r4, #56]	; 0x38
   149bc:	cmp	r3, #11
   149c0:	beq	14c78 <__assert_fail@plt+0x3948>
   149c4:	ldr	r2, [r8, #24]
   149c8:	ldr	r3, [r4, #40]	; 0x28
   149cc:	mov	r1, #0
   149d0:	strb	r1, [r2, r3]
   149d4:	ldr	r3, [r4, #48]	; 0x30
   149d8:	cmp	r3, r1
   149dc:	beq	14c7c <__assert_fail@plt+0x394c>
   149e0:	ldrh	r3, [r4, #58]	; 0x3a
   149e4:	tst	r3, #2
   149e8:	beq	14cd4 <__assert_fail@plt+0x39a4>
   149ec:	ldr	r3, [r8, #48]	; 0x30
   149f0:	tst	r3, #4
   149f4:	bne	14a10 <__assert_fail@plt+0x36e0>
   149f8:	tst	r3, #512	; 0x200
   149fc:	beq	14ca8 <__assert_fail@plt+0x3978>
   14a00:	mov	r2, #1
   14a04:	ldr	r1, [r4, #36]	; 0x24
   14a08:	mov	r0, r8
   14a0c:	bl	13430 <__assert_fail@plt+0x2100>
   14a10:	ldr	r0, [r4, #36]	; 0x24
   14a14:	bl	112f4 <close@plt>
   14a18:	ldrh	r3, [r4, #56]	; 0x38
   14a1c:	cmp	r3, #2
   14a20:	beq	14a4c <__assert_fail@plt+0x371c>
   14a24:	ldr	r3, [r4, #32]
   14a28:	cmp	r3, #0
   14a2c:	movne	r3, #7
   14a30:	strhne	r3, [r4, #56]	; 0x38
   14a34:	bne	14a4c <__assert_fail@plt+0x371c>
   14a38:	mov	r3, #6
   14a3c:	strh	r3, [r4, #56]	; 0x38
   14a40:	mov	r1, r4
   14a44:	mov	r0, r8
   14a48:	bl	136e8 <__assert_fail@plt+0x23b8>
   14a4c:	ldr	r3, [r8, #48]	; 0x30
   14a50:	and	r3, r3, #8192	; 0x2000
   14a54:	cmp	r3, #0
   14a58:	movne	r4, #0
   14a5c:	mov	r0, r4
   14a60:	pop	{r4, r5, r6, r7, r8, pc}
   14a64:	mov	r0, r8
   14a68:	bl	134b0 <__assert_fail@plt+0x2180>
   14a6c:	cmp	r0, #0
   14a70:	bne	14af0 <__assert_fail@plt+0x37c0>
   14a74:	mov	r0, r8
   14a78:	bl	131d8 <__assert_fail@plt+0x1ea8>
   14a7c:	ldr	r2, [r4, #52]	; 0x34
   14a80:	str	r2, [r4, #40]	; 0x28
   14a84:	add	r6, r4, #168	; 0xa8
   14a88:	add	r2, r2, #1
   14a8c:	mov	r1, r6
   14a90:	ldr	r0, [r8, #24]
   14a94:	bl	11048 <memmove@plt>
   14a98:	mov	r1, #47	; 0x2f
   14a9c:	mov	r0, r6
   14aa0:	bl	11264 <strrchr@plt>
   14aa4:	cmp	r0, #0
   14aa8:	beq	14ad8 <__assert_fail@plt+0x37a8>
   14aac:	cmp	r6, r0
   14ab0:	beq	14b04 <__assert_fail@plt+0x37d4>
   14ab4:	add	r5, r0, #1
   14ab8:	mov	r0, r5
   14abc:	bl	111bc <strlen@plt>
   14ac0:	mov	r7, r0
   14ac4:	add	r2, r0, #1
   14ac8:	mov	r1, r5
   14acc:	mov	r0, r6
   14ad0:	bl	11048 <memmove@plt>
   14ad4:	str	r7, [r4, #52]	; 0x34
   14ad8:	ldr	r3, [r8, #24]
   14adc:	str	r3, [r4, #28]
   14ae0:	str	r3, [r4, #24]
   14ae4:	mov	r0, r8
   14ae8:	bl	130c4 <__assert_fail@plt+0x1d94>
   14aec:	b	14b5c <__assert_fail@plt+0x382c>
   14af0:	ldr	r3, [r8, #48]	; 0x30
   14af4:	orr	r3, r3, #8192	; 0x2000
   14af8:	str	r3, [r8, #48]	; 0x30
   14afc:	mov	r4, #0
   14b00:	b	14a5c <__assert_fail@plt+0x372c>
   14b04:	ldrb	r3, [r4, #169]	; 0xa9
   14b08:	cmp	r3, #0
   14b0c:	bne	14ab4 <__assert_fail@plt+0x3784>
   14b10:	b	14ad8 <__assert_fail@plt+0x37a8>
   14b14:	cmp	r3, #2
   14b18:	beq	14bb0 <__assert_fail@plt+0x3880>
   14b1c:	ldr	r2, [r8, #24]
   14b20:	ldr	r0, [r4, #4]
   14b24:	ldr	r1, [r0, #40]	; 0x28
   14b28:	sub	r3, r1, #1
   14b2c:	ldr	r0, [r0, #28]
   14b30:	ldrb	r0, [r0, r3]
   14b34:	cmp	r0, #47	; 0x2f
   14b38:	movne	r3, r1
   14b3c:	add	r0, r2, r3
   14b40:	mov	r1, #47	; 0x2f
   14b44:	strb	r1, [r2, r3]
   14b48:	ldr	r2, [r4, #52]	; 0x34
   14b4c:	add	r2, r2, #1
   14b50:	add	r1, r4, #168	; 0xa8
   14b54:	add	r0, r0, #1
   14b58:	bl	11048 <memmove@plt>
   14b5c:	str	r4, [r8]
   14b60:	ldrh	r3, [r4, #56]	; 0x38
   14b64:	cmp	r3, #11
   14b68:	beq	14c24 <__assert_fail@plt+0x38f4>
   14b6c:	ldrh	r3, [r4, #56]	; 0x38
   14b70:	cmp	r3, #1
   14b74:	bne	14a5c <__assert_fail@plt+0x372c>
   14b78:	ldr	r3, [r4, #48]	; 0x30
   14b7c:	cmp	r3, #0
   14b80:	ldrdeq	r2, [r4, #64]	; 0x40
   14b84:	strdeq	r2, [r8, #16]
   14b88:	mov	r1, r4
   14b8c:	mov	r0, r8
   14b90:	bl	13364 <__assert_fail@plt+0x2034>
   14b94:	cmp	r0, #0
   14b98:	bne	14a5c <__assert_fail@plt+0x372c>
   14b9c:	bl	111ec <__errno_location@plt>
   14ba0:	mov	r3, #12
   14ba4:	str	r3, [r0]
   14ba8:	mov	r4, #0
   14bac:	b	14a5c <__assert_fail@plt+0x372c>
   14bb0:	mov	r2, #1
   14bb4:	mov	r1, r4
   14bb8:	mov	r0, r8
   14bbc:	bl	12e24 <__assert_fail@plt+0x1af4>
   14bc0:	strh	r0, [r4, #56]	; 0x38
   14bc4:	cmp	r0, #1
   14bc8:	beq	14bd8 <__assert_fail@plt+0x38a8>
   14bcc:	mov	r3, #3
   14bd0:	strh	r3, [r4, #60]	; 0x3c
   14bd4:	b	14b1c <__assert_fail@plt+0x37ec>
   14bd8:	ldr	r3, [r8, #48]	; 0x30
   14bdc:	tst	r3, #4
   14be0:	bne	14bcc <__assert_fail@plt+0x389c>
   14be4:	ldr	r1, [pc, #320]	; 14d2c <__assert_fail@plt+0x39fc>
   14be8:	mov	r0, r8
   14bec:	bl	13148 <__assert_fail@plt+0x1e18>
   14bf0:	str	r0, [r4, #36]	; 0x24
   14bf4:	cmp	r0, #0
   14bf8:	bge	14c14 <__assert_fail@plt+0x38e4>
   14bfc:	bl	111ec <__errno_location@plt>
   14c00:	ldr	r3, [r0]
   14c04:	str	r3, [r4, #32]
   14c08:	mov	r3, #7
   14c0c:	strh	r3, [r4, #56]	; 0x38
   14c10:	b	14bcc <__assert_fail@plt+0x389c>
   14c14:	ldrh	r3, [r4, #58]	; 0x3a
   14c18:	orr	r3, r3, #2
   14c1c:	strh	r3, [r4, #58]	; 0x3a
   14c20:	b	14bcc <__assert_fail@plt+0x389c>
   14c24:	ldrd	r2, [r4, #112]	; 0x70
   14c28:	cmp	r3, #0
   14c2c:	cmpeq	r2, #2
   14c30:	beq	14c44 <__assert_fail@plt+0x3914>
   14c34:	cmp	r3, #0
   14c38:	cmpeq	r2, #1
   14c3c:	beq	14a5c <__assert_fail@plt+0x372c>
   14c40:	bl	112e8 <abort@plt>
   14c44:	mov	r2, #0
   14c48:	mov	r1, r4
   14c4c:	mov	r0, r8
   14c50:	bl	12e24 <__assert_fail@plt+0x1af4>
   14c54:	strh	r0, [r4, #56]	; 0x38
   14c58:	b	14b6c <__assert_fail@plt+0x383c>
   14c5c:	mov	r0, r4
   14c60:	bl	12c88 <__assert_fail@plt+0x1958>
   14c64:	bl	111ec <__errno_location@plt>
   14c68:	mov	r4, #0
   14c6c:	str	r4, [r0]
   14c70:	str	r4, [r8]
   14c74:	b	14a5c <__assert_fail@plt+0x372c>
   14c78:	bl	112e8 <abort@plt>
   14c7c:	mov	r0, r8
   14c80:	bl	134b0 <__assert_fail@plt+0x2180>
   14c84:	cmp	r0, #0
   14c88:	beq	14a18 <__assert_fail@plt+0x36e8>
   14c8c:	bl	111ec <__errno_location@plt>
   14c90:	ldr	r3, [r0]
   14c94:	str	r3, [r4, #32]
   14c98:	ldr	r3, [r8, #48]	; 0x30
   14c9c:	orr	r3, r3, #8192	; 0x2000
   14ca0:	str	r3, [r8, #48]	; 0x30
   14ca4:	b	14a18 <__assert_fail@plt+0x36e8>
   14ca8:	ldr	r0, [r4, #36]	; 0x24
   14cac:	bl	112a0 <fchdir@plt>
   14cb0:	cmp	r0, #0
   14cb4:	beq	14a10 <__assert_fail@plt+0x36e0>
   14cb8:	bl	111ec <__errno_location@plt>
   14cbc:	ldr	r3, [r0]
   14cc0:	str	r3, [r4, #32]
   14cc4:	ldr	r3, [r8, #48]	; 0x30
   14cc8:	orr	r3, r3, #8192	; 0x2000
   14ccc:	str	r3, [r8, #48]	; 0x30
   14cd0:	b	14a10 <__assert_fail@plt+0x36e0>
   14cd4:	tst	r3, #1
   14cd8:	bne	14a18 <__assert_fail@plt+0x36e8>
   14cdc:	ldr	r3, [pc, #76]	; 14d30 <__assert_fail@plt+0x3a00>
   14ce0:	mvn	r2, #0
   14ce4:	ldr	r1, [r4, #4]
   14ce8:	mov	r0, r8
   14cec:	bl	13500 <__assert_fail@plt+0x21d0>
   14cf0:	cmp	r0, #0
   14cf4:	beq	14a18 <__assert_fail@plt+0x36e8>
   14cf8:	bl	111ec <__errno_location@plt>
   14cfc:	ldr	r3, [r0]
   14d00:	str	r3, [r4, #32]
   14d04:	ldr	r3, [r8, #48]	; 0x30
   14d08:	orr	r3, r3, #8192	; 0x2000
   14d0c:	str	r3, [r8, #48]	; 0x30
   14d10:	b	14a18 <__assert_fail@plt+0x36e8>
   14d14:	mov	r4, #0
   14d18:	b	14a5c <__assert_fail@plt+0x372c>
   14d1c:	mov	r4, #0
   14d20:	b	14a5c <__assert_fail@plt+0x372c>
   14d24:	mov	r4, #0
   14d28:	b	14a5c <__assert_fail@plt+0x372c>
   14d2c:	andeq	sl, r1, r8, asr #21
   14d30:	andeq	sl, r1, r4, asr #21
   14d34:	cmp	r2, #4
   14d38:	bhi	14d48 <__assert_fail@plt+0x3a18>
   14d3c:	strh	r2, [r1, #60]	; 0x3c
   14d40:	mov	r0, #0
   14d44:	bx	lr
   14d48:	push	{r4, lr}
   14d4c:	bl	111ec <__errno_location@plt>
   14d50:	mov	r3, #22
   14d54:	str	r3, [r0]
   14d58:	mov	r0, #1
   14d5c:	pop	{r4, pc}
   14d60:	push	{r4, r5, r6, r7, r8, lr}
   14d64:	bics	r3, r1, #4096	; 0x1000
   14d68:	bne	14e0c <__assert_fail@plt+0x3adc>
   14d6c:	mov	r4, r0
   14d70:	mov	r6, r1
   14d74:	ldr	r5, [r0]
   14d78:	bl	111ec <__errno_location@plt>
   14d7c:	mov	r7, r0
   14d80:	mov	r3, #0
   14d84:	str	r3, [r0]
   14d88:	ldr	r3, [r4, #48]	; 0x30
   14d8c:	tst	r3, #8192	; 0x2000
   14d90:	bne	14eb0 <__assert_fail@plt+0x3b80>
   14d94:	ldrh	r3, [r5, #56]	; 0x38
   14d98:	cmp	r3, #9
   14d9c:	beq	14e20 <__assert_fail@plt+0x3af0>
   14da0:	cmp	r3, #1
   14da4:	bne	14eb8 <__assert_fail@plt+0x3b88>
   14da8:	ldr	r0, [r4, #4]
   14dac:	cmp	r0, #0
   14db0:	beq	14db8 <__assert_fail@plt+0x3a88>
   14db4:	bl	13198 <__assert_fail@plt+0x1e68>
   14db8:	cmp	r6, #4096	; 0x1000
   14dbc:	ldreq	r3, [r4, #48]	; 0x30
   14dc0:	orreq	r3, r3, #4096	; 0x1000
   14dc4:	streq	r3, [r4, #48]	; 0x30
   14dc8:	moveq	r6, #2
   14dcc:	movne	r6, #1
   14dd0:	ldr	r3, [r5, #48]	; 0x30
   14dd4:	cmp	r3, #0
   14dd8:	bne	14df8 <__assert_fail@plt+0x3ac8>
   14ddc:	ldr	r3, [r5, #24]
   14de0:	ldrb	r3, [r3]
   14de4:	cmp	r3, #47	; 0x2f
   14de8:	beq	14df8 <__assert_fail@plt+0x3ac8>
   14dec:	ldr	r3, [r4, #48]	; 0x30
   14df0:	tst	r3, #4
   14df4:	beq	14e28 <__assert_fail@plt+0x3af8>
   14df8:	mov	r1, r6
   14dfc:	mov	r0, r4
   14e00:	bl	137ac <__assert_fail@plt+0x247c>
   14e04:	str	r0, [r4, #4]
   14e08:	pop	{r4, r5, r6, r7, r8, pc}
   14e0c:	bl	111ec <__errno_location@plt>
   14e10:	mov	r3, #22
   14e14:	str	r3, [r0]
   14e18:	mov	r0, #0
   14e1c:	pop	{r4, r5, r6, r7, r8, pc}
   14e20:	ldr	r0, [r5, #8]
   14e24:	pop	{r4, r5, r6, r7, r8, pc}
   14e28:	ldr	r1, [pc, #144]	; 14ec0 <__assert_fail@plt+0x3b90>
   14e2c:	mov	r0, r4
   14e30:	bl	13148 <__assert_fail@plt+0x1e18>
   14e34:	subs	r5, r0, #0
   14e38:	blt	14e70 <__assert_fail@plt+0x3b40>
   14e3c:	mov	r1, r6
   14e40:	mov	r0, r4
   14e44:	bl	137ac <__assert_fail@plt+0x247c>
   14e48:	str	r0, [r4, #4]
   14e4c:	ldr	r3, [r4, #48]	; 0x30
   14e50:	tst	r3, #512	; 0x200
   14e54:	beq	14e7c <__assert_fail@plt+0x3b4c>
   14e58:	mov	r2, #1
   14e5c:	mov	r1, r5
   14e60:	mov	r0, r4
   14e64:	bl	13430 <__assert_fail@plt+0x2100>
   14e68:	ldr	r0, [r4, #4]
   14e6c:	pop	{r4, r5, r6, r7, r8, pc}
   14e70:	mov	r0, #0
   14e74:	str	r0, [r4, #4]
   14e78:	pop	{r4, r5, r6, r7, r8, pc}
   14e7c:	mov	r0, r5
   14e80:	bl	112a0 <fchdir@plt>
   14e84:	cmp	r0, #0
   14e88:	bne	14e98 <__assert_fail@plt+0x3b68>
   14e8c:	mov	r0, r5
   14e90:	bl	112f4 <close@plt>
   14e94:	b	14e68 <__assert_fail@plt+0x3b38>
   14e98:	ldr	r4, [r7]
   14e9c:	mov	r0, r5
   14ea0:	bl	112f4 <close@plt>
   14ea4:	str	r4, [r7]
   14ea8:	mov	r0, #0
   14eac:	pop	{r4, r5, r6, r7, r8, pc}
   14eb0:	mov	r0, #0
   14eb4:	pop	{r4, r5, r6, r7, r8, pc}
   14eb8:	mov	r0, #0
   14ebc:	pop	{r4, r5, r6, r7, r8, pc}
   14ec0:	andeq	sl, r1, r8, asr #21
   14ec4:	andeq	r0, r0, r0
   14ec8:	push	{r4, lr}
   14ecc:	ror	r0, r0, #3
   14ed0:	bl	197a8 <__assert_fail@plt+0x8478>
   14ed4:	mov	r0, r1
   14ed8:	pop	{r4, pc}
   14edc:	cmp	r1, r0
   14ee0:	movne	r0, #0
   14ee4:	moveq	r0, #1
   14ee8:	bx	lr
   14eec:	ldr	r3, [r0, #20]
   14ef0:	ldr	r2, [pc, #176]	; 14fa8 <__assert_fail@plt+0x3c78>
   14ef4:	cmp	r3, r2
   14ef8:	beq	14f90 <__assert_fail@plt+0x3c60>
   14efc:	vldr	s15, [r3, #8]
   14f00:	vldr	s14, [pc, #144]	; 14f98 <__assert_fail@plt+0x3c68>
   14f04:	vcmpe.f32	s15, s14
   14f08:	vmrs	APSR_nzcv, fpscr
   14f0c:	ble	14f6c <__assert_fail@plt+0x3c3c>
   14f10:	vldr	s14, [pc, #132]	; 14f9c <__assert_fail@plt+0x3c6c>
   14f14:	vcmpe.f32	s15, s14
   14f18:	vmrs	APSR_nzcv, fpscr
   14f1c:	bpl	14f6c <__assert_fail@plt+0x3c3c>
   14f20:	vldr	s13, [r3, #12]
   14f24:	vldr	s14, [pc, #116]	; 14fa0 <__assert_fail@plt+0x3c70>
   14f28:	vcmpe.f32	s13, s14
   14f2c:	vmrs	APSR_nzcv, fpscr
   14f30:	ble	14f6c <__assert_fail@plt+0x3c3c>
   14f34:	vldr	s14, [r3]
   14f38:	vcmpe.f32	s14, #0.0
   14f3c:	vmrs	APSR_nzcv, fpscr
   14f40:	blt	14f6c <__assert_fail@plt+0x3c3c>
   14f44:	vldr	s13, [pc, #76]	; 14f98 <__assert_fail@plt+0x3c68>
   14f48:	vadd.f32	s14, s14, s13
   14f4c:	vldr	s13, [r3, #4]
   14f50:	vcmpe.f32	s14, s13
   14f54:	vmrs	APSR_nzcv, fpscr
   14f58:	bpl	14f6c <__assert_fail@plt+0x3c3c>
   14f5c:	vldr	s12, [pc, #64]	; 14fa4 <__assert_fail@plt+0x3c74>
   14f60:	vcmpe.f32	s13, s12
   14f64:	vmrs	APSR_nzcv, fpscr
   14f68:	bls	14f7c <__assert_fail@plt+0x3c4c>
   14f6c:	ldr	r3, [pc, #52]	; 14fa8 <__assert_fail@plt+0x3c78>
   14f70:	str	r3, [r0, #20]
   14f74:	mov	r0, #0
   14f78:	bx	lr
   14f7c:	vcmpe.f32	s15, s14
   14f80:	vmrs	APSR_nzcv, fpscr
   14f84:	ble	14f6c <__assert_fail@plt+0x3c3c>
   14f88:	mov	r0, #1
   14f8c:	bx	lr
   14f90:	mov	r0, #1
   14f94:	bx	lr
   14f98:	stclcc	12, cr12, [ip, #820]	; 0x334
   14f9c:	svccc	0x00666666
   14fa0:	svccc	0x008ccccd
   14fa4:	svccc	0x00800000
   14fa8:	andeq	sl, r1, ip, asr #21
   14fac:	push	{r4, lr}
   14fb0:	mov	r4, r0
   14fb4:	mov	r0, r1
   14fb8:	ldr	r3, [r4, #24]
   14fbc:	ldr	r1, [r4, #8]
   14fc0:	blx	r3
   14fc4:	ldr	r3, [r4, #8]
   14fc8:	cmp	r0, r3
   14fcc:	bcs	14fdc <__assert_fail@plt+0x3cac>
   14fd0:	ldr	r3, [r4]
   14fd4:	add	r0, r3, r0, lsl #3
   14fd8:	pop	{r4, pc}
   14fdc:	bl	112e8 <abort@plt>
   14fe0:	push	{r4, r5, r6, r7, r8, lr}
   14fe4:	ldrb	r3, [r1, #16]
   14fe8:	cmp	r3, #0
   14fec:	bne	1501c <__assert_fail@plt+0x3cec>
   14ff0:	vmov	s15, r0
   14ff4:	vcvt.f32.u32	s13, s15
   14ff8:	vldr	s14, [r1, #8]
   14ffc:	vdiv.f32	s15, s13, s14
   15000:	vldr	s14, [pc, #204]	; 150d4 <__assert_fail@plt+0x3da4>
   15004:	vcmpe.f32	s15, s14
   15008:	vmrs	APSR_nzcv, fpscr
   1500c:	movge	r7, #0
   15010:	bge	15054 <__assert_fail@plt+0x3d24>
   15014:	vcvt.u32.f32	s15, s15
   15018:	vmov	r0, s15
   1501c:	cmp	r0, #10
   15020:	movcc	r0, #10
   15024:	orr	r7, r0, #1
   15028:	cmn	r7, #1
   1502c:	ldrne	r8, [pc, #164]	; 150d8 <__assert_fail@plt+0x3da8>
   15030:	bne	15080 <__assert_fail@plt+0x3d50>
   15034:	lsr	r3, r7, #30
   15038:	lsl	r2, r7, #2
   1503c:	adds	r3, r3, #0
   15040:	movne	r3, #1
   15044:	cmp	r2, #0
   15048:	movlt	r3, #1
   1504c:	cmp	r3, #0
   15050:	movne	r7, #0
   15054:	mov	r0, r7
   15058:	pop	{r4, r5, r6, r7, r8, pc}
   1505c:	mov	r4, #3
   15060:	mov	r1, r4
   15064:	mov	r0, r7
   15068:	bl	197a8 <__assert_fail@plt+0x8478>
   1506c:	cmp	r1, #0
   15070:	bne	15034 <__assert_fail@plt+0x3d04>
   15074:	add	r7, r7, #2
   15078:	cmn	r7, #1
   1507c:	beq	15034 <__assert_fail@plt+0x3d04>
   15080:	cmp	r7, #9
   15084:	bls	1505c <__assert_fail@plt+0x3d2c>
   15088:	umull	r2, r3, r8, r7
   1508c:	lsr	r3, r3, #1
   15090:	add	r3, r3, r3, lsl #1
   15094:	cmp	r7, r3
   15098:	beq	15074 <__assert_fail@plt+0x3d44>
   1509c:	mov	r6, #16
   150a0:	mov	r5, #9
   150a4:	mov	r4, #3
   150a8:	add	r5, r5, r6
   150ac:	add	r4, r4, #2
   150b0:	cmp	r5, r7
   150b4:	bcs	15060 <__assert_fail@plt+0x3d30>
   150b8:	add	r6, r6, #8
   150bc:	mov	r1, r4
   150c0:	mov	r0, r7
   150c4:	bl	197a8 <__assert_fail@plt+0x8478>
   150c8:	cmp	r1, #0
   150cc:	bne	150a8 <__assert_fail@plt+0x3d78>
   150d0:	b	15074 <__assert_fail@plt+0x3d44>
   150d4:	svcmi	0x00800000
   150d8:	bge	feabfb8c <optarg@@GLIBC_2.4+0xfea939f4>
   150dc:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   150e0:	ldr	r7, [r1]
   150e4:	ldr	r3, [r1, #4]
   150e8:	cmp	r7, r3
   150ec:	bcs	15220 <__assert_fail@plt+0x3ef0>
   150f0:	mov	fp, r2
   150f4:	mov	sl, r1
   150f8:	mov	r6, r0
   150fc:	add	r7, r7, #8
   15100:	mov	r9, #0
   15104:	b	1516c <__assert_fail@plt+0x3e3c>
   15108:	str	r5, [r0]
   1510c:	ldr	r2, [r6, #12]
   15110:	add	r2, r2, #1
   15114:	str	r2, [r6, #12]
   15118:	str	r9, [r4]
   1511c:	ldr	r2, [r6, #36]	; 0x24
   15120:	str	r2, [r4, #4]
   15124:	str	r4, [r6, #36]	; 0x24
   15128:	b	151b4 <__assert_fail@plt+0x3e84>
   1512c:	mov	r0, #8
   15130:	bl	18da0 <__assert_fail@plt+0x7a70>
   15134:	cmp	r0, #0
   15138:	beq	15228 <__assert_fail@plt+0x3ef8>
   1513c:	str	r4, [r0]
   15140:	ldr	r3, [r5, #4]
   15144:	str	r3, [r0, #4]
   15148:	str	r0, [r5, #4]
   1514c:	str	r9, [r8, #-8]
   15150:	ldr	r3, [sl, #12]
   15154:	sub	r3, r3, #1
   15158:	str	r3, [sl, #12]
   1515c:	add	r7, r7, #8
   15160:	ldr	r3, [sl, #4]
   15164:	cmp	r3, r8
   15168:	bls	15218 <__assert_fail@plt+0x3ee8>
   1516c:	mov	r8, r7
   15170:	ldr	r3, [r7, #-8]
   15174:	cmp	r3, #0
   15178:	beq	1515c <__assert_fail@plt+0x3e2c>
   1517c:	ldr	r4, [r7, #-4]
   15180:	cmp	r4, #0
   15184:	beq	151c0 <__assert_fail@plt+0x3e90>
   15188:	ldr	r5, [r4]
   1518c:	mov	r1, r5
   15190:	mov	r0, r6
   15194:	bl	14fac <__assert_fail@plt+0x3c7c>
   15198:	ldr	r3, [r4, #4]
   1519c:	ldr	r2, [r0]
   151a0:	cmp	r2, #0
   151a4:	beq	15108 <__assert_fail@plt+0x3dd8>
   151a8:	ldr	r2, [r0, #4]
   151ac:	str	r2, [r4, #4]
   151b0:	str	r4, [r0, #4]
   151b4:	mov	r4, r3
   151b8:	cmp	r3, #0
   151bc:	bne	15188 <__assert_fail@plt+0x3e58>
   151c0:	ldr	r4, [r8, #-8]
   151c4:	str	r9, [r8, #-4]
   151c8:	cmp	fp, #0
   151cc:	bne	1515c <__assert_fail@plt+0x3e2c>
   151d0:	mov	r1, r4
   151d4:	mov	r0, r6
   151d8:	bl	14fac <__assert_fail@plt+0x3c7c>
   151dc:	mov	r5, r0
   151e0:	ldr	r3, [r0]
   151e4:	cmp	r3, #0
   151e8:	beq	15204 <__assert_fail@plt+0x3ed4>
   151ec:	ldr	r0, [r6, #36]	; 0x24
   151f0:	cmp	r0, #0
   151f4:	beq	1512c <__assert_fail@plt+0x3dfc>
   151f8:	ldr	r3, [r0, #4]
   151fc:	str	r3, [r6, #36]	; 0x24
   15200:	b	1513c <__assert_fail@plt+0x3e0c>
   15204:	str	r4, [r0]
   15208:	ldr	r3, [r6, #12]
   1520c:	add	r3, r3, #1
   15210:	str	r3, [r6, #12]
   15214:	b	1514c <__assert_fail@plt+0x3e1c>
   15218:	mov	r0, #1
   1521c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15220:	mov	r0, #1
   15224:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15228:	mov	r0, fp
   1522c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15230:	push	{r4, r5, r6, r7, r8, lr}
   15234:	mov	r6, r0
   15238:	mov	r5, r1
   1523c:	mov	r8, r2
   15240:	mov	r7, r3
   15244:	bl	14fac <__assert_fail@plt+0x3c7c>
   15248:	str	r0, [r8]
   1524c:	ldr	r3, [r0]
   15250:	cmp	r3, #0
   15254:	beq	1532c <__assert_fail@plt+0x3ffc>
   15258:	mov	r4, r0
   1525c:	cmp	r5, r3
   15260:	beq	152f4 <__assert_fail@plt+0x3fc4>
   15264:	ldr	r2, [r6, #28]
   15268:	mov	r1, r3
   1526c:	mov	r0, r5
   15270:	blx	r2
   15274:	cmp	r0, #0
   15278:	bne	152f4 <__assert_fail@plt+0x3fc4>
   1527c:	ldr	r3, [r4, #4]
   15280:	cmp	r3, #0
   15284:	beq	15334 <__assert_fail@plt+0x4004>
   15288:	ldr	r1, [r3]
   1528c:	cmp	r5, r1
   15290:	beq	152c4 <__assert_fail@plt+0x3f94>
   15294:	ldr	r3, [r6, #28]
   15298:	mov	r0, r5
   1529c:	blx	r3
   152a0:	cmp	r0, #0
   152a4:	bne	152c4 <__assert_fail@plt+0x3f94>
   152a8:	ldr	r4, [r4, #4]
   152ac:	ldr	r3, [r4, #4]
   152b0:	cmp	r3, #0
   152b4:	beq	1532c <__assert_fail@plt+0x3ffc>
   152b8:	ldr	r1, [r3]
   152bc:	cmp	r5, r1
   152c0:	bne	15294 <__assert_fail@plt+0x3f64>
   152c4:	ldr	r2, [r4, #4]
   152c8:	ldr	r3, [r2]
   152cc:	cmp	r7, #0
   152d0:	beq	1532c <__assert_fail@plt+0x3ffc>
   152d4:	ldr	r1, [r2, #4]
   152d8:	str	r1, [r4, #4]
   152dc:	mov	r1, #0
   152e0:	str	r1, [r2]
   152e4:	ldr	r1, [r6, #36]	; 0x24
   152e8:	str	r1, [r2, #4]
   152ec:	str	r2, [r6, #36]	; 0x24
   152f0:	b	1532c <__assert_fail@plt+0x3ffc>
   152f4:	ldr	r3, [r4]
   152f8:	cmp	r7, #0
   152fc:	beq	1532c <__assert_fail@plt+0x3ffc>
   15300:	ldr	r2, [r4, #4]
   15304:	cmp	r2, #0
   15308:	ldmne	r2, {r0, r1}
   1530c:	stmne	r4, {r0, r1}
   15310:	movne	r1, #0
   15314:	strne	r1, [r2]
   15318:	ldrne	r1, [r6, #36]	; 0x24
   1531c:	strne	r1, [r2, #4]
   15320:	strne	r2, [r6, #36]	; 0x24
   15324:	moveq	r2, #0
   15328:	streq	r2, [r4]
   1532c:	mov	r0, r3
   15330:	pop	{r4, r5, r6, r7, r8, pc}
   15334:	mov	r3, #0
   15338:	b	1532c <__assert_fail@plt+0x3ffc>
   1533c:	ldr	r0, [r0, #8]
   15340:	bx	lr
   15344:	ldr	r0, [r0, #12]
   15348:	bx	lr
   1534c:	ldr	r0, [r0, #16]
   15350:	bx	lr
   15354:	ldr	r1, [r0]
   15358:	ldr	ip, [r0, #4]
   1535c:	cmp	r1, ip
   15360:	bcs	153b8 <__assert_fail@plt+0x4088>
   15364:	mov	r0, #0
   15368:	b	15384 <__assert_fail@plt+0x4054>
   1536c:	mov	r2, #1
   15370:	cmp	r0, r2
   15374:	movcc	r0, r2
   15378:	add	r1, r1, #8
   1537c:	cmp	r1, ip
   15380:	bcs	153b4 <__assert_fail@plt+0x4084>
   15384:	ldr	r3, [r1]
   15388:	cmp	r3, #0
   1538c:	beq	15378 <__assert_fail@plt+0x4048>
   15390:	ldr	r3, [r1, #4]
   15394:	cmp	r3, #0
   15398:	beq	1536c <__assert_fail@plt+0x403c>
   1539c:	mov	r2, #1
   153a0:	add	r2, r2, #1
   153a4:	ldr	r3, [r3, #4]
   153a8:	cmp	r3, #0
   153ac:	bne	153a0 <__assert_fail@plt+0x4070>
   153b0:	b	15370 <__assert_fail@plt+0x4040>
   153b4:	bx	lr
   153b8:	mov	r0, #0
   153bc:	bx	lr
   153c0:	push	{lr}		; (str lr, [sp, #-4]!)
   153c4:	ldr	r1, [r0]
   153c8:	ldr	lr, [r0, #4]
   153cc:	cmp	r1, lr
   153d0:	bcs	15420 <__assert_fail@plt+0x40f0>
   153d4:	mov	r2, #0
   153d8:	mov	ip, r2
   153dc:	b	153ec <__assert_fail@plt+0x40bc>
   153e0:	add	r1, r1, #8
   153e4:	cmp	r1, lr
   153e8:	bcs	15428 <__assert_fail@plt+0x40f8>
   153ec:	ldr	r3, [r1]
   153f0:	cmp	r3, #0
   153f4:	beq	153e0 <__assert_fail@plt+0x40b0>
   153f8:	add	ip, ip, #1
   153fc:	add	r2, r2, #1
   15400:	ldr	r3, [r1, #4]
   15404:	cmp	r3, #0
   15408:	beq	153e0 <__assert_fail@plt+0x40b0>
   1540c:	add	r2, r2, #1
   15410:	ldr	r3, [r3, #4]
   15414:	cmp	r3, #0
   15418:	bne	1540c <__assert_fail@plt+0x40dc>
   1541c:	b	153e0 <__assert_fail@plt+0x40b0>
   15420:	mov	r2, #0
   15424:	mov	ip, r2
   15428:	ldr	r3, [r0, #12]
   1542c:	cmp	r3, ip
   15430:	beq	1543c <__assert_fail@plt+0x410c>
   15434:	mov	r0, #0
   15438:	pop	{pc}		; (ldr pc, [sp], #4)
   1543c:	ldr	r0, [r0, #16]
   15440:	cmp	r0, r2
   15444:	movne	r0, #0
   15448:	moveq	r0, #1
   1544c:	pop	{pc}		; (ldr pc, [sp], #4)
   15450:	push	{r4, r5, r6, r7, r8, lr}
   15454:	sub	sp, sp, #8
   15458:	mov	r6, r0
   1545c:	mov	r4, r1
   15460:	ldr	r5, [r0, #8]
   15464:	ldr	r7, [r0, #12]
   15468:	bl	15354 <__assert_fail@plt+0x4024>
   1546c:	mov	r8, r0
   15470:	ldr	r3, [r6, #16]
   15474:	ldr	r2, [pc, #116]	; 154f0 <__assert_fail@plt+0x41c0>
   15478:	mov	r1, #1
   1547c:	mov	r0, r4
   15480:	bl	11228 <__fprintf_chk@plt>
   15484:	mov	r3, r5
   15488:	ldr	r2, [pc, #100]	; 154f4 <__assert_fail@plt+0x41c4>
   1548c:	mov	r1, #1
   15490:	mov	r0, r4
   15494:	bl	11228 <__fprintf_chk@plt>
   15498:	vmov	s15, r7
   1549c:	vcvt.f64.u32	d6, s15
   154a0:	vldr	d7, [pc, #64]	; 154e8 <__assert_fail@plt+0x41b8>
   154a4:	vmul.f64	d6, d6, d7
   154a8:	vmov	s15, r5
   154ac:	vcvt.f64.u32	d7, s15
   154b0:	vdiv.f64	d5, d6, d7
   154b4:	vstr	d5, [sp]
   154b8:	mov	r3, r7
   154bc:	ldr	r2, [pc, #52]	; 154f8 <__assert_fail@plt+0x41c8>
   154c0:	mov	r1, #1
   154c4:	mov	r0, r4
   154c8:	bl	11228 <__fprintf_chk@plt>
   154cc:	mov	r3, r8
   154d0:	ldr	r2, [pc, #36]	; 154fc <__assert_fail@plt+0x41cc>
   154d4:	mov	r1, #1
   154d8:	mov	r0, r4
   154dc:	bl	11228 <__fprintf_chk@plt>
   154e0:	add	sp, sp, #8
   154e4:	pop	{r4, r5, r6, r7, r8, pc}
   154e8:	andeq	r0, r0, r0
   154ec:	subsmi	r0, r9, r0
   154f0:	andeq	sl, r1, r0, ror #21
   154f4:	strdeq	sl, [r1], -r8
   154f8:	andeq	sl, r1, r0, lsl fp
   154fc:	andeq	sl, r1, r4, lsr fp
   15500:	push	{r4, r5, r6, lr}
   15504:	mov	r6, r0
   15508:	mov	r5, r1
   1550c:	bl	14fac <__assert_fail@plt+0x3c7c>
   15510:	ldr	r1, [r0]
   15514:	cmp	r1, #0
   15518:	beq	1556c <__assert_fail@plt+0x423c>
   1551c:	mov	r4, r0
   15520:	cmp	r0, #0
   15524:	beq	15574 <__assert_fail@plt+0x4244>
   15528:	cmp	r5, r1
   1552c:	beq	1555c <__assert_fail@plt+0x422c>
   15530:	ldr	r3, [r6, #28]
   15534:	mov	r0, r5
   15538:	blx	r3
   1553c:	cmp	r0, #0
   15540:	bne	1555c <__assert_fail@plt+0x422c>
   15544:	ldr	r4, [r4, #4]
   15548:	cmp	r4, #0
   1554c:	beq	15564 <__assert_fail@plt+0x4234>
   15550:	ldr	r1, [r4]
   15554:	cmp	r5, r1
   15558:	bne	15530 <__assert_fail@plt+0x4200>
   1555c:	ldr	r0, [r4]
   15560:	pop	{r4, r5, r6, pc}
   15564:	mov	r0, #0
   15568:	pop	{r4, r5, r6, pc}
   1556c:	mov	r0, #0
   15570:	pop	{r4, r5, r6, pc}
   15574:	mov	r0, #0
   15578:	pop	{r4, r5, r6, pc}
   1557c:	ldr	r3, [r0, #16]
   15580:	cmp	r3, #0
   15584:	beq	155c8 <__assert_fail@plt+0x4298>
   15588:	ldr	r3, [r0]
   1558c:	ldr	r2, [r0, #4]
   15590:	cmp	r3, r2
   15594:	bcs	155c0 <__assert_fail@plt+0x4290>
   15598:	ldr	r0, [r3]
   1559c:	cmp	r0, #0
   155a0:	bne	155bc <__assert_fail@plt+0x428c>
   155a4:	add	r3, r3, #8
   155a8:	cmp	r3, r2
   155ac:	bcs	155c0 <__assert_fail@plt+0x4290>
   155b0:	ldr	r0, [r3]
   155b4:	cmp	r0, #0
   155b8:	beq	155a4 <__assert_fail@plt+0x4274>
   155bc:	bx	lr
   155c0:	push	{r4, lr}
   155c4:	bl	112e8 <abort@plt>
   155c8:	mov	r0, #0
   155cc:	b	155bc <__assert_fail@plt+0x428c>
   155d0:	push	{r4, r5, r6, lr}
   155d4:	mov	r5, r0
   155d8:	mov	r4, r1
   155dc:	bl	14fac <__assert_fail@plt+0x3c7c>
   155e0:	mov	r2, r0
   155e4:	mov	r3, r0
   155e8:	ldr	r1, [r3]
   155ec:	cmp	r4, r1
   155f0:	beq	15604 <__assert_fail@plt+0x42d4>
   155f4:	ldr	r3, [r3, #4]
   155f8:	cmp	r3, #0
   155fc:	bne	155e8 <__assert_fail@plt+0x42b8>
   15600:	b	15610 <__assert_fail@plt+0x42e0>
   15604:	ldr	r3, [r3, #4]
   15608:	cmp	r3, #0
   1560c:	bne	15630 <__assert_fail@plt+0x4300>
   15610:	ldr	r3, [r5, #4]
   15614:	add	r2, r2, #8
   15618:	cmp	r2, r3
   1561c:	bcs	15638 <__assert_fail@plt+0x4308>
   15620:	ldr	r0, [r2]
   15624:	cmp	r0, #0
   15628:	beq	15614 <__assert_fail@plt+0x42e4>
   1562c:	pop	{r4, r5, r6, pc}
   15630:	ldr	r0, [r3]
   15634:	pop	{r4, r5, r6, pc}
   15638:	mov	r0, #0
   1563c:	pop	{r4, r5, r6, pc}
   15640:	push	{r4, r5, lr}
   15644:	ldr	r4, [r0]
   15648:	ldr	r3, [r0, #4]
   1564c:	cmp	r4, r3
   15650:	bcs	156bc <__assert_fail@plt+0x438c>
   15654:	mov	r5, r0
   15658:	mov	r0, #0
   1565c:	b	15670 <__assert_fail@plt+0x4340>
   15660:	add	r4, r4, #8
   15664:	ldr	r3, [r5, #4]
   15668:	cmp	r3, r4
   1566c:	bls	156b8 <__assert_fail@plt+0x4388>
   15670:	ldr	r3, [r4]
   15674:	cmp	r3, #0
   15678:	beq	15660 <__assert_fail@plt+0x4330>
   1567c:	cmp	r4, #0
   15680:	beq	15660 <__assert_fail@plt+0x4330>
   15684:	cmp	r2, r0
   15688:	popls	{r4, r5, pc}
   1568c:	add	ip, r1, r0, lsl #2
   15690:	mov	r3, r4
   15694:	add	r0, r0, #1
   15698:	ldr	lr, [r3]
   1569c:	str	lr, [ip], #4
   156a0:	ldr	r3, [r3, #4]
   156a4:	cmp	r3, #0
   156a8:	beq	15660 <__assert_fail@plt+0x4330>
   156ac:	cmp	r2, r0
   156b0:	bne	15694 <__assert_fail@plt+0x4364>
   156b4:	pop	{r4, r5, pc}
   156b8:	pop	{r4, r5, pc}
   156bc:	mov	r0, #0
   156c0:	pop	{r4, r5, pc}
   156c4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   156c8:	ldr	r8, [r0]
   156cc:	ldr	r3, [r0, #4]
   156d0:	cmp	r8, r3
   156d4:	bcs	1573c <__assert_fail@plt+0x440c>
   156d8:	mov	r7, r2
   156dc:	mov	r6, r1
   156e0:	mov	r9, r0
   156e4:	mov	r5, #0
   156e8:	b	156fc <__assert_fail@plt+0x43cc>
   156ec:	add	r8, r8, #8
   156f0:	ldr	r3, [r9, #4]
   156f4:	cmp	r3, r8
   156f8:	bls	15740 <__assert_fail@plt+0x4410>
   156fc:	ldr	r3, [r8]
   15700:	cmp	r3, #0
   15704:	beq	156ec <__assert_fail@plt+0x43bc>
   15708:	cmp	r8, #0
   1570c:	beq	156ec <__assert_fail@plt+0x43bc>
   15710:	mov	r4, r8
   15714:	mov	r1, r7
   15718:	ldr	r0, [r4]
   1571c:	blx	r6
   15720:	cmp	r0, #0
   15724:	beq	15740 <__assert_fail@plt+0x4410>
   15728:	add	r5, r5, #1
   1572c:	ldr	r4, [r4, #4]
   15730:	cmp	r4, #0
   15734:	bne	15714 <__assert_fail@plt+0x43e4>
   15738:	b	156ec <__assert_fail@plt+0x43bc>
   1573c:	mov	r5, #0
   15740:	mov	r0, r5
   15744:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15748:	ldrb	r3, [r0]
   1574c:	cmp	r3, #0
   15750:	beq	15788 <__assert_fail@plt+0x4458>
   15754:	push	{r4, r5, r6, lr}
   15758:	mov	r4, r0
   1575c:	mov	r5, r1
   15760:	mov	r1, #0
   15764:	rsb	r0, r1, r1, lsl #5
   15768:	mov	r1, r5
   1576c:	add	r0, r0, r3
   15770:	bl	197a8 <__assert_fail@plt+0x8478>
   15774:	ldrb	r3, [r4, #1]!
   15778:	cmp	r3, #0
   1577c:	bne	15764 <__assert_fail@plt+0x4434>
   15780:	mov	r0, r1
   15784:	pop	{r4, r5, r6, pc}
   15788:	mov	r1, #0
   1578c:	mov	r0, r1
   15790:	bx	lr
   15794:	push	{lr}		; (str lr, [sp, #-4]!)
   15798:	mov	ip, r0
   1579c:	ldr	lr, [pc, #16]	; 157b4 <__assert_fail@plt+0x4484>
   157a0:	ldm	lr!, {r0, r1, r2, r3}
   157a4:	stmia	ip!, {r0, r1, r2, r3}
   157a8:	ldr	r3, [lr]
   157ac:	str	r3, [ip]
   157b0:	pop	{pc}		; (ldr pc, [sp], #4)
   157b4:	andeq	sl, r1, ip, asr #21
   157b8:	push	{r4, r5, r6, r7, r8, lr}
   157bc:	mov	r8, r0
   157c0:	mov	r5, r1
   157c4:	subs	r7, r2, #0
   157c8:	ldr	r2, [pc, #180]	; 15884 <__assert_fail@plt+0x4554>
   157cc:	cmp	r7, #0
   157d0:	moveq	r7, r2
   157d4:	subs	r6, r3, #0
   157d8:	ldr	r3, [pc, #168]	; 15888 <__assert_fail@plt+0x4558>
   157dc:	cmp	r6, #0
   157e0:	moveq	r6, r3
   157e4:	mov	r0, #40	; 0x28
   157e8:	bl	18da0 <__assert_fail@plt+0x7a70>
   157ec:	subs	r4, r0, #0
   157f0:	beq	1586c <__assert_fail@plt+0x453c>
   157f4:	ldr	r3, [pc, #144]	; 1588c <__assert_fail@plt+0x455c>
   157f8:	cmp	r5, #0
   157fc:	moveq	r5, r3
   15800:	str	r5, [r4, #20]
   15804:	mov	r0, r4
   15808:	bl	14eec <__assert_fail@plt+0x3bbc>
   1580c:	cmp	r0, #0
   15810:	beq	15874 <__assert_fail@plt+0x4544>
   15814:	mov	r1, r5
   15818:	mov	r0, r8
   1581c:	bl	14fe0 <__assert_fail@plt+0x3cb0>
   15820:	str	r0, [r4, #8]
   15824:	cmp	r0, #0
   15828:	beq	15874 <__assert_fail@plt+0x4544>
   1582c:	mov	r1, #8
   15830:	bl	18d50 <__assert_fail@plt+0x7a20>
   15834:	str	r0, [r4]
   15838:	cmp	r0, #0
   1583c:	beq	15874 <__assert_fail@plt+0x4544>
   15840:	ldr	r3, [r4, #8]
   15844:	add	r0, r0, r3, lsl #3
   15848:	str	r0, [r4, #4]
   1584c:	mov	r3, #0
   15850:	str	r3, [r4, #12]
   15854:	str	r3, [r4, #16]
   15858:	str	r7, [r4, #24]
   1585c:	str	r6, [r4, #28]
   15860:	ldr	r2, [sp, #24]
   15864:	str	r2, [r4, #32]
   15868:	str	r3, [r4, #36]	; 0x24
   1586c:	mov	r0, r4
   15870:	pop	{r4, r5, r6, r7, r8, pc}
   15874:	mov	r0, r4
   15878:	bl	12c88 <__assert_fail@plt+0x1958>
   1587c:	mov	r4, #0
   15880:	b	1586c <__assert_fail@plt+0x453c>
   15884:	andeq	r4, r1, r8, asr #29
   15888:	ldrdeq	r4, [r1], -ip
   1588c:	andeq	sl, r1, ip, asr #21
   15890:	push	{r4, r5, r6, r7, r8, lr}
   15894:	mov	r5, r0
   15898:	ldr	r7, [r0]
   1589c:	ldr	r3, [r0, #4]
   158a0:	cmp	r7, r3
   158a4:	bcs	15938 <__assert_fail@plt+0x4608>
   158a8:	add	r7, r7, #8
   158ac:	mov	r6, #0
   158b0:	b	15918 <__assert_fail@plt+0x45e8>
   158b4:	str	r6, [r4]
   158b8:	ldr	r3, [r4, #4]
   158bc:	ldr	r2, [r5, #36]	; 0x24
   158c0:	str	r2, [r4, #4]
   158c4:	str	r4, [r5, #36]	; 0x24
   158c8:	mov	r4, r3
   158cc:	cmp	r3, #0
   158d0:	beq	158ec <__assert_fail@plt+0x45bc>
   158d4:	ldr	r3, [r5, #32]
   158d8:	cmp	r3, #0
   158dc:	beq	158b4 <__assert_fail@plt+0x4584>
   158e0:	ldr	r0, [r4]
   158e4:	blx	r3
   158e8:	b	158b4 <__assert_fail@plt+0x4584>
   158ec:	ldr	r3, [r5, #32]
   158f0:	cmp	r3, #0
   158f4:	beq	15900 <__assert_fail@plt+0x45d0>
   158f8:	ldr	r0, [r8, #-8]
   158fc:	blx	r3
   15900:	str	r6, [r8, #-8]
   15904:	str	r6, [r8, #-4]
   15908:	add	r7, r7, #8
   1590c:	ldr	r3, [r5, #4]
   15910:	cmp	r3, r8
   15914:	bls	15938 <__assert_fail@plt+0x4608>
   15918:	mov	r8, r7
   1591c:	ldr	r3, [r7, #-8]
   15920:	cmp	r3, #0
   15924:	beq	15908 <__assert_fail@plt+0x45d8>
   15928:	ldr	r4, [r7, #-4]
   1592c:	cmp	r4, #0
   15930:	bne	158d4 <__assert_fail@plt+0x45a4>
   15934:	b	158ec <__assert_fail@plt+0x45bc>
   15938:	mov	r3, #0
   1593c:	str	r3, [r5, #12]
   15940:	str	r3, [r5, #16]
   15944:	pop	{r4, r5, r6, r7, r8, pc}
   15948:	push	{r4, r5, r6, lr}
   1594c:	mov	r5, r0
   15950:	ldr	r3, [r0, #32]
   15954:	cmp	r3, #0
   15958:	beq	159c0 <__assert_fail@plt+0x4690>
   1595c:	ldr	r3, [r0, #16]
   15960:	cmp	r3, #0
   15964:	beq	159c0 <__assert_fail@plt+0x4690>
   15968:	ldr	r6, [r0]
   1596c:	ldr	r3, [r0, #4]
   15970:	cmp	r6, r3
   15974:	bcc	1598c <__assert_fail@plt+0x465c>
   15978:	b	15a00 <__assert_fail@plt+0x46d0>
   1597c:	add	r6, r6, #8
   15980:	ldr	r3, [r5, #4]
   15984:	cmp	r3, r6
   15988:	bls	159c0 <__assert_fail@plt+0x4690>
   1598c:	ldr	r3, [r6]
   15990:	cmp	r3, #0
   15994:	beq	1597c <__assert_fail@plt+0x464c>
   15998:	cmp	r6, #0
   1599c:	beq	1597c <__assert_fail@plt+0x464c>
   159a0:	mov	r4, r6
   159a4:	ldr	r3, [r5, #32]
   159a8:	ldr	r0, [r4]
   159ac:	blx	r3
   159b0:	ldr	r4, [r4, #4]
   159b4:	cmp	r4, #0
   159b8:	bne	159a4 <__assert_fail@plt+0x4674>
   159bc:	b	1597c <__assert_fail@plt+0x464c>
   159c0:	ldr	r6, [r5]
   159c4:	ldr	r3, [r5, #4]
   159c8:	cmp	r6, r3
   159cc:	bcs	15a00 <__assert_fail@plt+0x46d0>
   159d0:	ldr	r0, [r6, #4]
   159d4:	cmp	r0, #0
   159d8:	beq	159f0 <__assert_fail@plt+0x46c0>
   159dc:	ldr	r4, [r0, #4]
   159e0:	bl	12c88 <__assert_fail@plt+0x1958>
   159e4:	mov	r0, r4
   159e8:	cmp	r4, #0
   159ec:	bne	159dc <__assert_fail@plt+0x46ac>
   159f0:	add	r6, r6, #8
   159f4:	ldr	r3, [r5, #4]
   159f8:	cmp	r3, r6
   159fc:	bhi	159d0 <__assert_fail@plt+0x46a0>
   15a00:	ldr	r0, [r5, #36]	; 0x24
   15a04:	cmp	r0, #0
   15a08:	beq	15a20 <__assert_fail@plt+0x46f0>
   15a0c:	ldr	r4, [r0, #4]
   15a10:	bl	12c88 <__assert_fail@plt+0x1958>
   15a14:	mov	r0, r4
   15a18:	cmp	r4, #0
   15a1c:	bne	15a0c <__assert_fail@plt+0x46dc>
   15a20:	ldr	r0, [r5]
   15a24:	bl	12c88 <__assert_fail@plt+0x1958>
   15a28:	mov	r0, r5
   15a2c:	bl	12c88 <__assert_fail@plt+0x1958>
   15a30:	pop	{r4, r5, r6, pc}
   15a34:	push	{r4, r5, lr}
   15a38:	sub	sp, sp, #44	; 0x2c
   15a3c:	mov	r4, r0
   15a40:	mov	r0, r1
   15a44:	ldr	r1, [r4, #20]
   15a48:	bl	14fe0 <__assert_fail@plt+0x3cb0>
   15a4c:	subs	r5, r0, #0
   15a50:	beq	15b48 <__assert_fail@plt+0x4818>
   15a54:	ldr	r3, [r4, #8]
   15a58:	cmp	r5, r3
   15a5c:	beq	15b58 <__assert_fail@plt+0x4828>
   15a60:	mov	r1, #8
   15a64:	mov	r0, r5
   15a68:	bl	18d50 <__assert_fail@plt+0x7a20>
   15a6c:	str	r0, [sp]
   15a70:	cmp	r0, #0
   15a74:	beq	15b60 <__assert_fail@plt+0x4830>
   15a78:	str	r5, [sp, #8]
   15a7c:	add	r0, r0, r5, lsl #3
   15a80:	str	r0, [sp, #4]
   15a84:	mov	r2, #0
   15a88:	str	r2, [sp, #12]
   15a8c:	str	r2, [sp, #16]
   15a90:	ldr	r3, [r4, #20]
   15a94:	str	r3, [sp, #20]
   15a98:	ldr	r3, [r4, #24]
   15a9c:	str	r3, [sp, #24]
   15aa0:	ldr	r3, [r4, #28]
   15aa4:	str	r3, [sp, #28]
   15aa8:	ldr	r3, [r4, #32]
   15aac:	str	r3, [sp, #32]
   15ab0:	ldr	r3, [r4, #36]	; 0x24
   15ab4:	str	r3, [sp, #36]	; 0x24
   15ab8:	mov	r1, r4
   15abc:	mov	r0, sp
   15ac0:	bl	150dc <__assert_fail@plt+0x3dac>
   15ac4:	subs	r5, r0, #0
   15ac8:	bne	15b10 <__assert_fail@plt+0x47e0>
   15acc:	ldr	r3, [sp, #36]	; 0x24
   15ad0:	str	r3, [r4, #36]	; 0x24
   15ad4:	mov	r2, #1
   15ad8:	mov	r1, sp
   15adc:	mov	r0, r4
   15ae0:	bl	150dc <__assert_fail@plt+0x3dac>
   15ae4:	cmp	r0, #0
   15ae8:	beq	15b44 <__assert_fail@plt+0x4814>
   15aec:	mov	r2, #0
   15af0:	mov	r1, sp
   15af4:	mov	r0, r4
   15af8:	bl	150dc <__assert_fail@plt+0x3dac>
   15afc:	cmp	r0, #0
   15b00:	beq	15b44 <__assert_fail@plt+0x4814>
   15b04:	ldr	r0, [sp]
   15b08:	bl	12c88 <__assert_fail@plt+0x1958>
   15b0c:	b	15b4c <__assert_fail@plt+0x481c>
   15b10:	ldr	r0, [r4]
   15b14:	bl	12c88 <__assert_fail@plt+0x1958>
   15b18:	ldr	r3, [sp]
   15b1c:	str	r3, [r4]
   15b20:	ldr	r3, [sp, #4]
   15b24:	str	r3, [r4, #4]
   15b28:	ldr	r3, [sp, #8]
   15b2c:	str	r3, [r4, #8]
   15b30:	ldr	r3, [sp, #12]
   15b34:	str	r3, [r4, #12]
   15b38:	ldr	r3, [sp, #36]	; 0x24
   15b3c:	str	r3, [r4, #36]	; 0x24
   15b40:	b	15b4c <__assert_fail@plt+0x481c>
   15b44:	bl	112e8 <abort@plt>
   15b48:	mov	r5, #0
   15b4c:	mov	r0, r5
   15b50:	add	sp, sp, #44	; 0x2c
   15b54:	pop	{r4, r5, pc}
   15b58:	mov	r5, #1
   15b5c:	b	15b4c <__assert_fail@plt+0x481c>
   15b60:	mov	r5, #0
   15b64:	b	15b4c <__assert_fail@plt+0x481c>
   15b68:	push	{r4, r5, r6, lr}
   15b6c:	sub	sp, sp, #8
   15b70:	subs	r6, r1, #0
   15b74:	beq	15bb0 <__assert_fail@plt+0x4880>
   15b78:	mov	r4, r0
   15b7c:	mov	r5, r2
   15b80:	mov	r3, #0
   15b84:	add	r2, sp, #4
   15b88:	mov	r1, r6
   15b8c:	bl	15230 <__assert_fail@plt+0x3f00>
   15b90:	cmp	r0, #0
   15b94:	beq	15bb4 <__assert_fail@plt+0x4884>
   15b98:	cmp	r5, #0
   15b9c:	moveq	r0, #0
   15ba0:	strne	r0, [r5]
   15ba4:	movne	r0, #0
   15ba8:	add	sp, sp, #8
   15bac:	pop	{r4, r5, r6, pc}
   15bb0:	bl	112e8 <abort@plt>
   15bb4:	vldr	s15, [r4, #12]
   15bb8:	vcvt.f32.u32	s14, s15
   15bbc:	ldr	r3, [r4, #20]
   15bc0:	vldr	s15, [r4, #8]
   15bc4:	vcvt.f32.u32	s15, s15
   15bc8:	vldr	s13, [r3, #8]
   15bcc:	vmul.f32	s15, s15, s13
   15bd0:	vcmpe.f32	s14, s15
   15bd4:	vmrs	APSR_nzcv, fpscr
   15bd8:	bgt	15c28 <__assert_fail@plt+0x48f8>
   15bdc:	ldr	r3, [sp, #4]
   15be0:	ldr	r2, [r3]
   15be4:	cmp	r2, #0
   15be8:	beq	15ccc <__assert_fail@plt+0x499c>
   15bec:	ldr	r0, [r4, #36]	; 0x24
   15bf0:	cmp	r0, #0
   15bf4:	beq	15cb4 <__assert_fail@plt+0x4984>
   15bf8:	ldr	r3, [r0, #4]
   15bfc:	str	r3, [r4, #36]	; 0x24
   15c00:	str	r6, [r0]
   15c04:	ldr	r3, [sp, #4]
   15c08:	ldr	r2, [r3, #4]
   15c0c:	str	r2, [r0, #4]
   15c10:	str	r0, [r3, #4]
   15c14:	ldr	r3, [r4, #16]
   15c18:	add	r3, r3, #1
   15c1c:	str	r3, [r4, #16]
   15c20:	mov	r0, #1
   15c24:	b	15ba8 <__assert_fail@plt+0x4878>
   15c28:	mov	r0, r4
   15c2c:	bl	14eec <__assert_fail@plt+0x3bbc>
   15c30:	ldr	r3, [r4, #20]
   15c34:	vldr	s13, [r3, #8]
   15c38:	vldr	s15, [r4, #8]
   15c3c:	vcvt.f32.u32	s15, s15
   15c40:	vldr	s14, [r4, #12]
   15c44:	vcvt.f32.u32	s14, s14
   15c48:	vmul.f32	s12, s13, s15
   15c4c:	vcmpe.f32	s14, s12
   15c50:	vmrs	APSR_nzcv, fpscr
   15c54:	ble	15bdc <__assert_fail@plt+0x48ac>
   15c58:	ldrb	r2, [r3, #16]
   15c5c:	cmp	r2, #0
   15c60:	vldr	s14, [r3, #12]
   15c64:	vmul.f32	s15, s15, s14
   15c68:	vmuleq.f32	s15, s15, s13
   15c6c:	vldr	s14, [pc, #140]	; 15d00 <__assert_fail@plt+0x49d0>
   15c70:	vcmpe.f32	s15, s14
   15c74:	vmrs	APSR_nzcv, fpscr
   15c78:	bge	15cf0 <__assert_fail@plt+0x49c0>
   15c7c:	vcvt.u32.f32	s15, s15
   15c80:	vmov	r1, s15
   15c84:	mov	r0, r4
   15c88:	bl	15a34 <__assert_fail@plt+0x4704>
   15c8c:	cmp	r0, #0
   15c90:	beq	15cf8 <__assert_fail@plt+0x49c8>
   15c94:	mov	r3, #0
   15c98:	add	r2, sp, #4
   15c9c:	mov	r1, r6
   15ca0:	mov	r0, r4
   15ca4:	bl	15230 <__assert_fail@plt+0x3f00>
   15ca8:	cmp	r0, #0
   15cac:	beq	15bdc <__assert_fail@plt+0x48ac>
   15cb0:	bl	112e8 <abort@plt>
   15cb4:	mov	r0, #8
   15cb8:	bl	18da0 <__assert_fail@plt+0x7a70>
   15cbc:	cmp	r0, #0
   15cc0:	bne	15c00 <__assert_fail@plt+0x48d0>
   15cc4:	mvn	r0, #0
   15cc8:	b	15ba8 <__assert_fail@plt+0x4878>
   15ccc:	str	r6, [r3]
   15cd0:	ldr	r3, [r4, #16]
   15cd4:	add	r3, r3, #1
   15cd8:	str	r3, [r4, #16]
   15cdc:	ldr	r3, [r4, #12]
   15ce0:	add	r3, r3, #1
   15ce4:	str	r3, [r4, #12]
   15ce8:	mov	r0, #1
   15cec:	b	15ba8 <__assert_fail@plt+0x4878>
   15cf0:	mvn	r0, #0
   15cf4:	b	15ba8 <__assert_fail@plt+0x4878>
   15cf8:	mvn	r0, #0
   15cfc:	b	15ba8 <__assert_fail@plt+0x4878>
   15d00:	svcmi	0x00800000
   15d04:	push	{r4, lr}
   15d08:	sub	sp, sp, #8
   15d0c:	mov	r4, r1
   15d10:	add	r2, sp, #4
   15d14:	bl	15b68 <__assert_fail@plt+0x4838>
   15d18:	cmn	r0, #1
   15d1c:	beq	15d34 <__assert_fail@plt+0x4a04>
   15d20:	cmp	r0, #0
   15d24:	movne	r0, r4
   15d28:	ldreq	r0, [sp, #4]
   15d2c:	add	sp, sp, #8
   15d30:	pop	{r4, pc}
   15d34:	mov	r0, #0
   15d38:	b	15d2c <__assert_fail@plt+0x49fc>
   15d3c:	push	{r4, r5, r6, lr}
   15d40:	sub	sp, sp, #8
   15d44:	mov	r4, r0
   15d48:	mov	r3, #1
   15d4c:	add	r2, sp, #4
   15d50:	bl	15230 <__assert_fail@plt+0x3f00>
   15d54:	subs	r5, r0, #0
   15d58:	beq	15d78 <__assert_fail@plt+0x4a48>
   15d5c:	ldr	r3, [r4, #16]
   15d60:	sub	r3, r3, #1
   15d64:	str	r3, [r4, #16]
   15d68:	ldr	r3, [sp, #4]
   15d6c:	ldr	r3, [r3]
   15d70:	cmp	r3, #0
   15d74:	beq	15d84 <__assert_fail@plt+0x4a54>
   15d78:	mov	r0, r5
   15d7c:	add	sp, sp, #8
   15d80:	pop	{r4, r5, r6, pc}
   15d84:	ldr	r3, [r4, #12]
   15d88:	sub	r3, r3, #1
   15d8c:	str	r3, [r4, #12]
   15d90:	vmov	s15, r3
   15d94:	vcvt.f32.u32	s15, s15
   15d98:	ldr	r3, [r4, #20]
   15d9c:	vldr	s14, [r4, #8]
   15da0:	vcvt.f32.u32	s14, s14
   15da4:	vldr	s13, [r3]
   15da8:	vmul.f32	s14, s14, s13
   15dac:	vcmpe.f32	s15, s14
   15db0:	vmrs	APSR_nzcv, fpscr
   15db4:	bpl	15d78 <__assert_fail@plt+0x4a48>
   15db8:	mov	r0, r4
   15dbc:	bl	14eec <__assert_fail@plt+0x3bbc>
   15dc0:	ldr	r3, [r4, #20]
   15dc4:	vldr	s15, [r4, #8]
   15dc8:	vcvt.f32.u32	s15, s15
   15dcc:	vldr	s14, [r4, #12]
   15dd0:	vcvt.f32.u32	s13, s14
   15dd4:	vldr	s14, [r3]
   15dd8:	vmul.f32	s14, s15, s14
   15ddc:	vcmpe.f32	s13, s14
   15de0:	vmrs	APSR_nzcv, fpscr
   15de4:	bpl	15d78 <__assert_fail@plt+0x4a48>
   15de8:	ldrb	r2, [r3, #16]
   15dec:	cmp	r2, #0
   15df0:	vldr	s14, [r3, #4]
   15df4:	vmuleq.f32	s15, s15, s14
   15df8:	vldreq	s14, [r3, #8]
   15dfc:	vmul.f32	s15, s15, s14
   15e00:	vcvt.u32.f32	s15, s15
   15e04:	vmov	r1, s15
   15e08:	mov	r0, r4
   15e0c:	bl	15a34 <__assert_fail@plt+0x4704>
   15e10:	cmp	r0, #0
   15e14:	bne	15d78 <__assert_fail@plt+0x4a48>
   15e18:	ldr	r0, [r4, #36]	; 0x24
   15e1c:	cmp	r0, #0
   15e20:	beq	15e38 <__assert_fail@plt+0x4b08>
   15e24:	ldr	r6, [r0, #4]
   15e28:	bl	12c88 <__assert_fail@plt+0x1958>
   15e2c:	mov	r0, r6
   15e30:	cmp	r6, #0
   15e34:	bne	15e24 <__assert_fail@plt+0x4af4>
   15e38:	mov	r3, #0
   15e3c:	str	r3, [r4, #36]	; 0x24
   15e40:	b	15d78 <__assert_fail@plt+0x4a48>
   15e44:	push	{r4, lr}
   15e48:	bl	15d3c <__assert_fail@plt+0x4a0c>
   15e4c:	pop	{r4, pc}
   15e50:	mov	r3, #1
   15e54:	strb	r3, [r0, #28]
   15e58:	mov	r3, #0
   15e5c:	str	r3, [r0, #20]
   15e60:	str	r3, [r0, #24]
   15e64:	str	r1, [r0]
   15e68:	str	r1, [r0, #4]
   15e6c:	str	r1, [r0, #8]
   15e70:	str	r1, [r0, #12]
   15e74:	str	r1, [r0, #16]
   15e78:	bx	lr
   15e7c:	ldrb	r0, [r0, #28]
   15e80:	bx	lr
   15e84:	mov	r2, r0
   15e88:	ldrb	ip, [r0, #28]
   15e8c:	eor	ip, ip, #1
   15e90:	ldr	r3, [r0, #20]
   15e94:	add	r3, ip, r3
   15e98:	and	r3, r3, #3
   15e9c:	ldr	r0, [r0, r3, lsl #2]
   15ea0:	str	r1, [r2, r3, lsl #2]
   15ea4:	str	r3, [r2, #20]
   15ea8:	ldr	r1, [r2, #24]
   15eac:	cmp	r3, r1
   15eb0:	addeq	r3, ip, r3
   15eb4:	andeq	r3, r3, #3
   15eb8:	streq	r3, [r2, #24]
   15ebc:	mov	r3, #0
   15ec0:	strb	r3, [r2, #28]
   15ec4:	bx	lr
   15ec8:	ldrb	r3, [r0, #28]
   15ecc:	cmp	r3, #0
   15ed0:	bne	15f08 <__assert_fail@plt+0x4bd8>
   15ed4:	mov	r2, r0
   15ed8:	ldr	r3, [r0, #20]
   15edc:	ldr	r0, [r0, r3, lsl #2]
   15ee0:	ldr	r1, [r2, #16]
   15ee4:	str	r1, [r2, r3, lsl #2]
   15ee8:	ldr	r1, [r2, #24]
   15eec:	cmp	r3, r1
   15ef0:	moveq	r3, #1
   15ef4:	strbeq	r3, [r2, #28]
   15ef8:	addne	r3, r3, #3
   15efc:	andne	r3, r3, #3
   15f00:	strne	r3, [r2, #20]
   15f04:	bx	lr
   15f08:	push	{r4, lr}
   15f0c:	bl	112e8 <abort@plt>
   15f10:	push	{r4, r5, r6, r8, r9, lr}
   15f14:	mov	r4, r0
   15f18:	mov	r5, r1
   15f1c:	add	r6, r2, #20
   15f20:	mov	r3, #0
   15f24:	strb	r3, [r2, #20]
   15f28:	mov	r8, #10
   15f2c:	mov	r9, #0
   15f30:	mov	r2, r8
   15f34:	mov	r3, r9
   15f38:	mov	r0, r4
   15f3c:	mov	r1, r5
   15f40:	bl	19a08 <__assert_fail@plt+0x86d8>
   15f44:	add	r2, r2, #48	; 0x30
   15f48:	strb	r2, [r6, #-1]!
   15f4c:	mov	r2, r8
   15f50:	mov	r3, r9
   15f54:	mov	r0, r4
   15f58:	mov	r1, r5
   15f5c:	bl	19a08 <__assert_fail@plt+0x86d8>
   15f60:	mov	r4, r0
   15f64:	mov	r5, r1
   15f68:	orrs	r3, r4, r5
   15f6c:	bne	15f30 <__assert_fail@plt+0x4c00>
   15f70:	mov	r0, r6
   15f74:	pop	{r4, r5, r6, r8, r9, pc}
   15f78:	push	{r2, r3}
   15f7c:	push	{lr}		; (str lr, [sp, #-4]!)
   15f80:	sub	sp, sp, #12
   15f84:	ldr	r2, [sp, #16]
   15f88:	tst	r2, #64	; 0x40
   15f8c:	addne	r3, sp, #24
   15f90:	strne	r3, [sp, #4]
   15f94:	ldrne	r3, [sp, #20]
   15f98:	moveq	r3, #0
   15f9c:	bl	111d4 <openat64@plt>
   15fa0:	bl	17bc0 <__assert_fail@plt+0x6890>
   15fa4:	add	sp, sp, #12
   15fa8:	pop	{lr}		; (ldr lr, [sp], #4)
   15fac:	add	sp, sp, #8
   15fb0:	bx	lr
   15fb4:	push	{r4, r5, r6, r7, r8, lr}
   15fb8:	mov	r6, r3
   15fbc:	orr	r2, r2, #540672	; 0x84000
   15fc0:	orr	r2, r2, #2304	; 0x900
   15fc4:	bl	15f78 <__assert_fail@plt+0x4c48>
   15fc8:	subs	r4, r0, #0
   15fcc:	blt	16008 <__assert_fail@plt+0x4cd8>
   15fd0:	mov	r0, r4
   15fd4:	bl	11288 <fdopendir@plt>
   15fd8:	subs	r5, r0, #0
   15fdc:	beq	15fec <__assert_fail@plt+0x4cbc>
   15fe0:	str	r4, [r6]
   15fe4:	mov	r0, r5
   15fe8:	pop	{r4, r5, r6, r7, r8, pc}
   15fec:	bl	111ec <__errno_location@plt>
   15ff0:	mov	r6, r0
   15ff4:	ldr	r7, [r0]
   15ff8:	mov	r0, r4
   15ffc:	bl	112f4 <close@plt>
   16000:	str	r7, [r6]
   16004:	b	15fe4 <__assert_fail@plt+0x4cb4>
   16008:	mov	r5, #0
   1600c:	b	15fe4 <__assert_fail@plt+0x4cb4>
   16010:	push	{r4, r5, r6, lr}
   16014:	subs	r4, r0, #0
   16018:	beq	16090 <__assert_fail@plt+0x4d60>
   1601c:	mov	r1, #47	; 0x2f
   16020:	mov	r0, r4
   16024:	bl	11264 <strrchr@plt>
   16028:	cmp	r0, #0
   1602c:	addne	r5, r0, #1
   16030:	moveq	r5, r4
   16034:	sub	r3, r5, r4
   16038:	cmp	r3, #6
   1603c:	ble	1607c <__assert_fail@plt+0x4d4c>
   16040:	mov	r2, #7
   16044:	ldr	r1, [pc, #96]	; 160ac <__assert_fail@plt+0x4d7c>
   16048:	sub	r0, r5, #7
   1604c:	bl	112dc <strncmp@plt>
   16050:	cmp	r0, #0
   16054:	bne	1607c <__assert_fail@plt+0x4d4c>
   16058:	mov	r2, #3
   1605c:	ldr	r1, [pc, #76]	; 160b0 <__assert_fail@plt+0x4d80>
   16060:	mov	r0, r5
   16064:	bl	112dc <strncmp@plt>
   16068:	cmp	r0, #0
   1606c:	addeq	r4, r5, #3
   16070:	ldreq	r3, [pc, #60]	; 160b4 <__assert_fail@plt+0x4d84>
   16074:	streq	r4, [r3]
   16078:	movne	r4, r5
   1607c:	ldr	r3, [pc, #52]	; 160b8 <__assert_fail@plt+0x4d88>
   16080:	str	r4, [r3]
   16084:	ldr	r3, [pc, #48]	; 160bc <__assert_fail@plt+0x4d8c>
   16088:	str	r4, [r3]
   1608c:	pop	{r4, r5, r6, pc}
   16090:	ldr	r3, [pc, #40]	; 160c0 <__assert_fail@plt+0x4d90>
   16094:	ldr	r3, [r3]
   16098:	mov	r2, #55	; 0x37
   1609c:	mov	r1, #1
   160a0:	ldr	r0, [pc, #28]	; 160c4 <__assert_fail@plt+0x4d94>
   160a4:	bl	11108 <fwrite@plt>
   160a8:	bl	112e8 <abort@plt>
   160ac:	andeq	sl, r1, r4, lsl #23
   160b0:	andeq	sl, r1, ip, lsl #23
   160b4:	andeq	ip, r2, r0, lsl #3
   160b8:	andeq	ip, r2, r0, asr #3
   160bc:	andeq	ip, r2, r4, lsl #3
   160c0:	muleq	r2, r0, r1
   160c4:	andeq	sl, r1, ip, asr #22
   160c8:	push	{r4, r5, r6, lr}
   160cc:	mov	r5, r0
   160d0:	mov	r4, r1
   160d4:	mov	r2, #48	; 0x30
   160d8:	mov	r1, #0
   160dc:	bl	11204 <memset@plt>
   160e0:	cmp	r4, #10
   160e4:	beq	160f4 <__assert_fail@plt+0x4dc4>
   160e8:	str	r4, [r5]
   160ec:	mov	r0, r5
   160f0:	pop	{r4, r5, r6, pc}
   160f4:	bl	112e8 <abort@plt>
   160f8:	push	{r4, r5, r6, lr}
   160fc:	mov	r4, r0
   16100:	mov	r5, r1
   16104:	mov	r2, #5
   16108:	mov	r1, r0
   1610c:	mov	r0, #0
   16110:	bl	110c0 <dcgettext@plt>
   16114:	cmp	r4, r0
   16118:	popne	{r4, r5, r6, pc}
   1611c:	bl	193c8 <__assert_fail@plt+0x8098>
   16120:	ldrb	r3, [r0]
   16124:	bic	r3, r3, #32
   16128:	cmp	r3, #85	; 0x55
   1612c:	beq	161a8 <__assert_fail@plt+0x4e78>
   16130:	cmp	r3, #71	; 0x47
   16134:	bne	16204 <__assert_fail@plt+0x4ed4>
   16138:	ldrb	r3, [r0, #1]
   1613c:	bic	r3, r3, #32
   16140:	cmp	r3, #66	; 0x42
   16144:	bne	16204 <__assert_fail@plt+0x4ed4>
   16148:	ldrb	r3, [r0, #2]
   1614c:	cmp	r3, #49	; 0x31
   16150:	bne	16204 <__assert_fail@plt+0x4ed4>
   16154:	ldrb	r3, [r0, #3]
   16158:	cmp	r3, #56	; 0x38
   1615c:	bne	16204 <__assert_fail@plt+0x4ed4>
   16160:	ldrb	r3, [r0, #4]
   16164:	cmp	r3, #48	; 0x30
   16168:	bne	16204 <__assert_fail@plt+0x4ed4>
   1616c:	ldrb	r3, [r0, #5]
   16170:	cmp	r3, #51	; 0x33
   16174:	bne	16204 <__assert_fail@plt+0x4ed4>
   16178:	ldrb	r3, [r0, #6]
   1617c:	cmp	r3, #48	; 0x30
   16180:	bne	16204 <__assert_fail@plt+0x4ed4>
   16184:	ldrb	r3, [r0, #7]
   16188:	cmp	r3, #0
   1618c:	bne	16204 <__assert_fail@plt+0x4ed4>
   16190:	ldrb	r2, [r4]
   16194:	ldr	r3, [pc, #124]	; 16218 <__assert_fail@plt+0x4ee8>
   16198:	ldr	r0, [pc, #124]	; 1621c <__assert_fail@plt+0x4eec>
   1619c:	cmp	r2, #96	; 0x60
   161a0:	movne	r0, r3
   161a4:	pop	{r4, r5, r6, pc}
   161a8:	ldrb	r3, [r0, #1]
   161ac:	bic	r3, r3, #32
   161b0:	cmp	r3, #84	; 0x54
   161b4:	bne	16204 <__assert_fail@plt+0x4ed4>
   161b8:	ldrb	r3, [r0, #2]
   161bc:	bic	r3, r3, #32
   161c0:	cmp	r3, #70	; 0x46
   161c4:	bne	16204 <__assert_fail@plt+0x4ed4>
   161c8:	ldrb	r3, [r0, #3]
   161cc:	cmp	r3, #45	; 0x2d
   161d0:	bne	16204 <__assert_fail@plt+0x4ed4>
   161d4:	ldrb	r3, [r0, #4]
   161d8:	cmp	r3, #56	; 0x38
   161dc:	bne	16204 <__assert_fail@plt+0x4ed4>
   161e0:	ldrb	r3, [r0, #5]
   161e4:	cmp	r3, #0
   161e8:	bne	16204 <__assert_fail@plt+0x4ed4>
   161ec:	ldrb	r2, [r4]
   161f0:	ldr	r3, [pc, #40]	; 16220 <__assert_fail@plt+0x4ef0>
   161f4:	ldr	r0, [pc, #40]	; 16224 <__assert_fail@plt+0x4ef4>
   161f8:	cmp	r2, #96	; 0x60
   161fc:	movne	r0, r3
   16200:	pop	{r4, r5, r6, pc}
   16204:	ldr	r3, [pc, #28]	; 16228 <__assert_fail@plt+0x4ef8>
   16208:	ldr	r0, [pc, #28]	; 1622c <__assert_fail@plt+0x4efc>
   1620c:	cmp	r5, #9
   16210:	movne	r0, r3
   16214:	pop	{r4, r5, r6, pc}
   16218:	andeq	sl, r1, r8, ror #23
   1621c:	strdeq	sl, [r1], -r4
   16220:	andeq	sl, r1, r4, ror #23
   16224:	strdeq	sl, [r1], -r8
   16228:	andeq	sl, r1, ip, ror #23
   1622c:	strdeq	sl, [r1], -r0
   16230:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16234:	sub	sp, sp, #116	; 0x74
   16238:	str	r0, [sp, #36]	; 0x24
   1623c:	mov	sl, r1
   16240:	str	r2, [sp, #52]	; 0x34
   16244:	str	r3, [sp, #28]
   16248:	ldr	r8, [sp, #152]	; 0x98
   1624c:	bl	11120 <__ctype_get_mb_cur_max@plt>
   16250:	str	r0, [sp, #84]	; 0x54
   16254:	ldr	r3, [sp, #156]	; 0x9c
   16258:	lsr	r3, r3, #1
   1625c:	and	r3, r3, #1
   16260:	str	r3, [sp, #32]
   16264:	mov	r3, #1
   16268:	str	r3, [sp, #40]	; 0x28
   1626c:	mov	r3, #0
   16270:	str	r3, [sp, #80]	; 0x50
   16274:	str	r3, [sp, #44]	; 0x2c
   16278:	str	r3, [sp, #48]	; 0x30
   1627c:	str	r3, [sp, #60]	; 0x3c
   16280:	str	r3, [sp, #72]	; 0x48
   16284:	str	r3, [sp, #76]	; 0x4c
   16288:	mov	r7, sl
   1628c:	mov	sl, r8
   16290:	cmp	sl, #10
   16294:	ldrls	pc, [pc, sl, lsl #2]
   16298:	b	16450 <__assert_fail@plt+0x5120>
   1629c:	andeq	r6, r1, r0, lsl #6
   162a0:	ldrdeq	r6, [r1], -r0
   162a4:	andeq	r6, r1, ip, lsr #8
   162a8:	andeq	r6, r1, r8, asr #5
   162ac:	andeq	r6, r1, r0, ror #7
   162b0:	andeq	r6, r1, r0, lsl r3
   162b4:	andeq	r7, r1, ip, ror r3
   162b8:	andeq	r6, r1, r4, asr r4
   162bc:	andeq	r6, r1, ip, asr #6
   162c0:	andeq	r6, r1, ip, asr #6
   162c4:	andeq	r6, r1, ip, asr #6
   162c8:	mov	r3, #1
   162cc:	str	r3, [sp, #48]	; 0x30
   162d0:	mov	r3, #1
   162d4:	str	r3, [sp, #32]
   162d8:	str	r3, [sp, #60]	; 0x3c
   162dc:	ldr	r3, [pc, #4068]	; 172c8 <__assert_fail@plt+0x5f98>
   162e0:	str	r3, [sp, #72]	; 0x48
   162e4:	mov	fp, #0
   162e8:	mov	sl, #2
   162ec:	mov	r6, #0
   162f0:	ldr	r3, [sp, #48]	; 0x30
   162f4:	eor	r3, r3, #1
   162f8:	str	r3, [sp, #68]	; 0x44
   162fc:	b	16be4 <__assert_fail@plt+0x58b4>
   16300:	mov	r3, #0
   16304:	str	r3, [sp, #32]
   16308:	mov	fp, r3
   1630c:	b	162ec <__assert_fail@plt+0x4fbc>
   16310:	ldr	r3, [sp, #32]
   16314:	cmp	r3, #0
   16318:	bne	1646c <__assert_fail@plt+0x513c>
   1631c:	cmp	r7, #0
   16320:	beq	1648c <__assert_fail@plt+0x515c>
   16324:	ldr	r3, [sp, #36]	; 0x24
   16328:	mov	r2, #34	; 0x22
   1632c:	strb	r2, [r3]
   16330:	mov	r3, #1
   16334:	str	r3, [sp, #48]	; 0x30
   16338:	str	r3, [sp, #60]	; 0x3c
   1633c:	ldr	r3, [pc, #3980]	; 172d0 <__assert_fail@plt+0x5fa0>
   16340:	str	r3, [sp, #72]	; 0x48
   16344:	mov	fp, #1
   16348:	b	162ec <__assert_fail@plt+0x4fbc>
   1634c:	cmp	sl, #10
   16350:	beq	16374 <__assert_fail@plt+0x5044>
   16354:	mov	r1, sl
   16358:	ldr	r0, [pc, #3948]	; 172cc <__assert_fail@plt+0x5f9c>
   1635c:	bl	160f8 <__assert_fail@plt+0x4dc8>
   16360:	str	r0, [sp, #164]	; 0xa4
   16364:	mov	r1, sl
   16368:	ldr	r0, [pc, #3928]	; 172c8 <__assert_fail@plt+0x5f98>
   1636c:	bl	160f8 <__assert_fail@plt+0x4dc8>
   16370:	str	r0, [sp, #168]	; 0xa8
   16374:	ldr	r3, [sp, #32]
   16378:	cmp	r3, #0
   1637c:	movne	fp, #0
   16380:	bne	163b8 <__assert_fail@plt+0x5088>
   16384:	ldr	r3, [sp, #164]	; 0xa4
   16388:	ldrb	r3, [r3]
   1638c:	cmp	r3, #0
   16390:	beq	163d8 <__assert_fail@plt+0x50a8>
   16394:	ldr	r2, [sp, #164]	; 0xa4
   16398:	mov	fp, #0
   1639c:	ldr	r1, [sp, #36]	; 0x24
   163a0:	cmp	r7, fp
   163a4:	strbhi	r3, [r1, fp]
   163a8:	add	fp, fp, #1
   163ac:	ldrb	r3, [r2, #1]!
   163b0:	cmp	r3, #0
   163b4:	bne	163a0 <__assert_fail@plt+0x5070>
   163b8:	ldr	r0, [sp, #168]	; 0xa8
   163bc:	bl	111bc <strlen@plt>
   163c0:	str	r0, [sp, #60]	; 0x3c
   163c4:	ldr	r3, [sp, #168]	; 0xa8
   163c8:	str	r3, [sp, #72]	; 0x48
   163cc:	mov	r3, #1
   163d0:	str	r3, [sp, #48]	; 0x30
   163d4:	b	162ec <__assert_fail@plt+0x4fbc>
   163d8:	mov	fp, #0
   163dc:	b	163b8 <__assert_fail@plt+0x5088>
   163e0:	ldr	r3, [sp, #32]
   163e4:	cmp	r3, #0
   163e8:	bne	164a8 <__assert_fail@plt+0x5178>
   163ec:	mov	r3, #1
   163f0:	str	r3, [sp, #48]	; 0x30
   163f4:	cmp	r7, #0
   163f8:	beq	164c4 <__assert_fail@plt+0x5194>
   163fc:	ldr	r3, [sp, #36]	; 0x24
   16400:	mov	r2, #39	; 0x27
   16404:	strb	r2, [r3]
   16408:	mov	r3, #0
   1640c:	str	r3, [sp, #32]
   16410:	mov	r3, #1
   16414:	str	r3, [sp, #60]	; 0x3c
   16418:	ldr	r3, [pc, #3752]	; 172c8 <__assert_fail@plt+0x5f98>
   1641c:	str	r3, [sp, #72]	; 0x48
   16420:	mov	fp, #1
   16424:	mov	sl, #2
   16428:	b	162ec <__assert_fail@plt+0x4fbc>
   1642c:	ldr	r3, [sp, #32]
   16430:	cmp	r3, #0
   16434:	beq	163f4 <__assert_fail@plt+0x50c4>
   16438:	mov	r3, #1
   1643c:	str	r3, [sp, #60]	; 0x3c
   16440:	ldr	r3, [pc, #3712]	; 172c8 <__assert_fail@plt+0x5f98>
   16444:	str	r3, [sp, #72]	; 0x48
   16448:	mov	fp, #0
   1644c:	b	162ec <__assert_fail@plt+0x4fbc>
   16450:	bl	112e8 <abort@plt>
   16454:	mov	r3, #0
   16458:	str	r3, [sp, #32]
   1645c:	mov	r3, #1
   16460:	str	r3, [sp, #48]	; 0x30
   16464:	mov	fp, #0
   16468:	b	162ec <__assert_fail@plt+0x4fbc>
   1646c:	ldr	r3, [sp, #32]
   16470:	str	r3, [sp, #48]	; 0x30
   16474:	mov	r3, #1
   16478:	str	r3, [sp, #60]	; 0x3c
   1647c:	ldr	r3, [pc, #3660]	; 172d0 <__assert_fail@plt+0x5fa0>
   16480:	str	r3, [sp, #72]	; 0x48
   16484:	mov	fp, #0
   16488:	b	162ec <__assert_fail@plt+0x4fbc>
   1648c:	mov	r3, #1
   16490:	str	r3, [sp, #48]	; 0x30
   16494:	str	r3, [sp, #60]	; 0x3c
   16498:	ldr	r3, [pc, #3632]	; 172d0 <__assert_fail@plt+0x5fa0>
   1649c:	str	r3, [sp, #72]	; 0x48
   164a0:	mov	fp, #1
   164a4:	b	162ec <__assert_fail@plt+0x4fbc>
   164a8:	mov	r3, #1
   164ac:	str	r3, [sp, #60]	; 0x3c
   164b0:	ldr	r3, [pc, #3600]	; 172c8 <__assert_fail@plt+0x5f98>
   164b4:	str	r3, [sp, #72]	; 0x48
   164b8:	mov	fp, #0
   164bc:	mov	sl, #2
   164c0:	b	162ec <__assert_fail@plt+0x4fbc>
   164c4:	mov	r3, #0
   164c8:	str	r3, [sp, #32]
   164cc:	mov	r3, #1
   164d0:	str	r3, [sp, #60]	; 0x3c
   164d4:	ldr	r3, [pc, #3564]	; 172c8 <__assert_fail@plt+0x5f98>
   164d8:	str	r3, [sp, #72]	; 0x48
   164dc:	mov	fp, #1
   164e0:	mov	sl, #2
   164e4:	b	162ec <__assert_fail@plt+0x4fbc>
   164e8:	mov	r3, #0
   164ec:	str	r3, [sp, #56]	; 0x38
   164f0:	ldr	r3, [sp, #52]	; 0x34
   164f4:	add	r2, r3, r6
   164f8:	str	r2, [sp, #64]	; 0x40
   164fc:	ldrb	r4, [r3, r6]
   16500:	cmp	r4, #126	; 0x7e
   16504:	ldrls	pc, [pc, r4, lsl #2]
   16508:	b	16d44 <__assert_fail@plt+0x5a14>
   1650c:	andeq	r6, r1, r4, lsr #14
   16510:	andeq	r6, r1, r4, asr #26
   16514:	andeq	r6, r1, r4, asr #26
   16518:	andeq	r6, r1, r4, asr #26
   1651c:	andeq	r6, r1, r4, asr #26
   16520:	andeq	r6, r1, r4, asr #26
   16524:	andeq	r6, r1, r4, asr #26
   16528:	andeq	r6, r1, r0, lsl #21
   1652c:	andeq	r6, r1, ip, lsl r7
   16530:	andeq	r6, r1, r8, lsr sl
   16534:	andeq	r6, r1, r0, lsr sl
   16538:	andeq	r6, r1, r0, lsr #19
   1653c:	muleq	r1, r8, r9
   16540:	andeq	r6, r1, r4, lsl r7
   16544:	andeq	r6, r1, r4, asr #26
   16548:	andeq	r6, r1, r4, asr #26
   1654c:	andeq	r6, r1, r4, asr #26
   16550:	andeq	r6, r1, r4, asr #26
   16554:	andeq	r6, r1, r4, asr #26
   16558:	andeq	r6, r1, r4, asr #26
   1655c:	andeq	r6, r1, r4, asr #26
   16560:	andeq	r6, r1, r4, asr #26
   16564:	andeq	r6, r1, r4, asr #26
   16568:	andeq	r6, r1, r4, asr #26
   1656c:	andeq	r6, r1, r4, asr #26
   16570:	andeq	r6, r1, r4, asr #26
   16574:	andeq	r6, r1, r4, asr #26
   16578:	andeq	r6, r1, r4, asr #26
   1657c:	andeq	r6, r1, r4, asr #26
   16580:	andeq	r6, r1, r4, asr #26
   16584:	andeq	r6, r1, r4, asr #26
   16588:	andeq	r6, r1, r4, asr #26
   1658c:	ldrdeq	r6, [r1], -r4
   16590:	ldrdeq	r6, [r1], -r0
   16594:	ldrdeq	r6, [r1], -r0
   16598:	andeq	r6, r1, r8, lsr #21
   1659c:	ldrdeq	r6, [r1], -r0
   165a0:	andeq	r7, r1, r8, lsl r1
   165a4:	ldrdeq	r6, [r1], -r0
   165a8:	andeq	r6, r1, r8, lsr #25
   165ac:	ldrdeq	r6, [r1], -r0
   165b0:	ldrdeq	r6, [r1], -r0
   165b4:	ldrdeq	r6, [r1], -r0
   165b8:	andeq	r7, r1, r8, lsl r1
   165bc:	andeq	r7, r1, r8, lsl r1
   165c0:	andeq	r7, r1, r8, lsl r1
   165c4:	andeq	r7, r1, r8, lsl r1
   165c8:	andeq	r7, r1, r8, lsl r1
   165cc:	andeq	r7, r1, r8, lsl r1
   165d0:	andeq	r7, r1, r8, lsl r1
   165d4:	andeq	r7, r1, r8, lsl r1
   165d8:	andeq	r7, r1, r8, lsl r1
   165dc:	andeq	r7, r1, r8, lsl r1
   165e0:	andeq	r7, r1, r8, lsl r1
   165e4:	andeq	r7, r1, r8, lsl r1
   165e8:	andeq	r7, r1, r8, lsl r1
   165ec:	andeq	r7, r1, r8, lsl r1
   165f0:	andeq	r7, r1, r8, lsl r1
   165f4:	andeq	r7, r1, r8, lsl r1
   165f8:	ldrdeq	r6, [r1], -r0
   165fc:	ldrdeq	r6, [r1], -r0
   16600:	ldrdeq	r6, [r1], -r0
   16604:	ldrdeq	r6, [r1], -r0
   16608:	andeq	r6, r1, ip, lsr #16
   1660c:	andeq	r6, r1, r4, asr #26
   16610:	andeq	r7, r1, r8, lsl r1
   16614:	andeq	r7, r1, r8, lsl r1
   16618:	andeq	r7, r1, r8, lsl r1
   1661c:	andeq	r7, r1, r8, lsl r1
   16620:	andeq	r7, r1, r8, lsl r1
   16624:	andeq	r7, r1, r8, lsl r1
   16628:	andeq	r7, r1, r8, lsl r1
   1662c:	andeq	r7, r1, r8, lsl r1
   16630:	andeq	r7, r1, r8, lsl r1
   16634:	andeq	r7, r1, r8, lsl r1
   16638:	andeq	r7, r1, r8, lsl r1
   1663c:	andeq	r7, r1, r8, lsl r1
   16640:	andeq	r7, r1, r8, lsl r1
   16644:	andeq	r7, r1, r8, lsl r1
   16648:	andeq	r7, r1, r8, lsl r1
   1664c:	andeq	r7, r1, r8, lsl r1
   16650:	andeq	r7, r1, r8, lsl r1
   16654:	andeq	r7, r1, r8, lsl r1
   16658:	andeq	r7, r1, r8, lsl r1
   1665c:	andeq	r7, r1, r8, lsl r1
   16660:	andeq	r7, r1, r8, lsl r1
   16664:	andeq	r7, r1, r8, lsl r1
   16668:	andeq	r7, r1, r8, lsl r1
   1666c:	andeq	r7, r1, r8, lsl r1
   16670:	andeq	r7, r1, r8, lsl r1
   16674:	andeq	r7, r1, r8, lsl r1
   16678:	ldrdeq	r6, [r1], -r0
   1667c:	andeq	r6, r1, r8, lsr #19
   16680:	andeq	r7, r1, r8, lsl r1
   16684:	ldrdeq	r6, [r1], -r0
   16688:	andeq	r7, r1, r8, lsl r1
   1668c:	ldrdeq	r6, [r1], -r0
   16690:	andeq	r7, r1, r8, lsl r1
   16694:	andeq	r7, r1, r8, lsl r1
   16698:	andeq	r7, r1, r8, lsl r1
   1669c:	andeq	r7, r1, r8, lsl r1
   166a0:	andeq	r7, r1, r8, lsl r1
   166a4:	andeq	r7, r1, r8, lsl r1
   166a8:	andeq	r7, r1, r8, lsl r1
   166ac:	andeq	r7, r1, r8, lsl r1
   166b0:	andeq	r7, r1, r8, lsl r1
   166b4:	andeq	r7, r1, r8, lsl r1
   166b8:	andeq	r7, r1, r8, lsl r1
   166bc:	andeq	r7, r1, r8, lsl r1
   166c0:	andeq	r7, r1, r8, lsl r1
   166c4:	andeq	r7, r1, r8, lsl r1
   166c8:	andeq	r7, r1, r8, lsl r1
   166cc:	andeq	r7, r1, r8, lsl r1
   166d0:	andeq	r7, r1, r8, lsl r1
   166d4:	andeq	r7, r1, r8, lsl r1
   166d8:	andeq	r7, r1, r8, lsl r1
   166dc:	andeq	r7, r1, r8, lsl r1
   166e0:	andeq	r7, r1, r8, lsl r1
   166e4:	andeq	r7, r1, r8, lsl r1
   166e8:	andeq	r7, r1, r8, lsl r1
   166ec:	andeq	r7, r1, r8, lsl r1
   166f0:	andeq	r7, r1, r8, lsl r1
   166f4:	andeq	r7, r1, r8, lsl r1
   166f8:	andeq	r6, r1, r8, lsl #21
   166fc:	ldrdeq	r6, [r1], -r0
   16700:	andeq	r6, r1, r8, lsl #21
   16704:	andeq	r6, r1, r8, lsr #21
   16708:	mov	r3, #0
   1670c:	str	r3, [sp, #56]	; 0x38
   16710:	b	164f0 <__assert_fail@plt+0x51c0>
   16714:	mov	r3, #114	; 0x72
   16718:	b	16a3c <__assert_fail@plt+0x570c>
   1671c:	mov	r3, #98	; 0x62
   16720:	b	16a54 <__assert_fail@plt+0x5724>
   16724:	ldr	r3, [sp, #48]	; 0x30
   16728:	cmp	r3, #0
   1672c:	beq	16814 <__assert_fail@plt+0x54e4>
   16730:	ldr	r3, [sp, #32]
   16734:	cmp	r3, #0
   16738:	bne	1729c <__assert_fail@plt+0x5f6c>
   1673c:	ldr	r3, [sp, #44]	; 0x2c
   16740:	eor	r3, r3, #1
   16744:	cmp	sl, #2
   16748:	movne	r3, #0
   1674c:	andeq	r3, r3, #1
   16750:	cmp	r3, #0
   16754:	moveq	r2, fp
   16758:	beq	1679c <__assert_fail@plt+0x546c>
   1675c:	cmp	r7, fp
   16760:	ldrhi	r2, [sp, #36]	; 0x24
   16764:	movhi	r1, #39	; 0x27
   16768:	strbhi	r1, [r2, fp]
   1676c:	add	r2, fp, #1
   16770:	cmp	r7, r2
   16774:	ldrhi	r1, [sp, #36]	; 0x24
   16778:	movhi	r0, #36	; 0x24
   1677c:	strbhi	r0, [r1, r2]
   16780:	add	r2, fp, #2
   16784:	cmp	r7, r2
   16788:	ldrhi	r1, [sp, #36]	; 0x24
   1678c:	movhi	r0, #39	; 0x27
   16790:	strbhi	r0, [r1, r2]
   16794:	add	r2, fp, #3
   16798:	str	r3, [sp, #44]	; 0x2c
   1679c:	cmp	r7, r2
   167a0:	ldrhi	r3, [sp, #36]	; 0x24
   167a4:	movhi	r1, #92	; 0x5c
   167a8:	strbhi	r1, [r3, r2]
   167ac:	add	fp, r2, #1
   167b0:	cmp	r5, #0
   167b4:	beq	17120 <__assert_fail@plt+0x5df0>
   167b8:	add	r3, r6, #1
   167bc:	ldr	r1, [sp, #28]
   167c0:	cmp	r1, r3
   167c4:	bls	17130 <__assert_fail@plt+0x5e00>
   167c8:	ldr	r1, [sp, #52]	; 0x34
   167cc:	ldrb	r3, [r1, r3]
   167d0:	sub	r3, r3, #48	; 0x30
   167d4:	uxtb	r3, r3
   167d8:	cmp	r3, #9
   167dc:	bhi	1713c <__assert_fail@plt+0x5e0c>
   167e0:	cmp	r7, fp
   167e4:	movhi	r3, #48	; 0x30
   167e8:	ldrhi	r1, [sp, #36]	; 0x24
   167ec:	strbhi	r3, [r1, fp]
   167f0:	add	r3, r2, #2
   167f4:	cmp	r7, r3
   167f8:	movhi	r1, #48	; 0x30
   167fc:	ldrhi	r0, [sp, #36]	; 0x24
   16800:	strbhi	r1, [r0, r3]
   16804:	add	fp, r2, #3
   16808:	ldr	r8, [sp, #32]
   1680c:	mov	r4, #48	; 0x30
   16810:	b	16aec <__assert_fail@plt+0x57bc>
   16814:	ldr	r3, [sp, #156]	; 0x9c
   16818:	tst	r3, #1
   1681c:	bne	16be0 <__assert_fail@plt+0x58b0>
   16820:	ldr	r5, [sp, #48]	; 0x30
   16824:	mov	r8, r5
   16828:	b	16aec <__assert_fail@plt+0x57bc>
   1682c:	cmp	sl, #2
   16830:	beq	16848 <__assert_fail@plt+0x5518>
   16834:	cmp	sl, #5
   16838:	beq	16860 <__assert_fail@plt+0x5530>
   1683c:	mov	r8, #0
   16840:	mov	r5, r8
   16844:	b	16aec <__assert_fail@plt+0x57bc>
   16848:	ldr	r3, [sp, #32]
   1684c:	cmp	r3, #0
   16850:	bne	172b0 <__assert_fail@plt+0x5f80>
   16854:	mov	r8, r3
   16858:	mov	r5, r3
   1685c:	b	16aec <__assert_fail@plt+0x57bc>
   16860:	ldr	r3, [sp, #156]	; 0x9c
   16864:	tst	r3, #4
   16868:	beq	17148 <__assert_fail@plt+0x5e18>
   1686c:	add	r3, r6, #2
   16870:	ldr	r2, [sp, #28]
   16874:	cmp	r2, r3
   16878:	bls	17154 <__assert_fail@plt+0x5e24>
   1687c:	ldr	r2, [sp, #52]	; 0x34
   16880:	add	r2, r2, r6
   16884:	ldrb	r2, [r2, #1]
   16888:	cmp	r2, #63	; 0x3f
   1688c:	movne	r8, #0
   16890:	movne	r5, r8
   16894:	bne	16aec <__assert_fail@plt+0x57bc>
   16898:	ldr	r2, [sp, #52]	; 0x34
   1689c:	ldrb	r2, [r2, r3]
   168a0:	sub	r1, r2, #33	; 0x21
   168a4:	cmp	r1, #29
   168a8:	ldrls	pc, [pc, r1, lsl #2]
   168ac:	b	17160 <__assert_fail@plt+0x5e30>
   168b0:	andeq	r6, r1, r8, lsr #18
   168b4:	andeq	r7, r1, r0, ror #2
   168b8:	andeq	r7, r1, r0, ror #2
   168bc:	andeq	r7, r1, r0, ror #2
   168c0:	andeq	r7, r1, r0, ror #2
   168c4:	andeq	r7, r1, r0, ror #2
   168c8:	andeq	r6, r1, r8, lsr #18
   168cc:	andeq	r6, r1, r8, lsr #18
   168d0:	andeq	r6, r1, r8, lsr #18
   168d4:	andeq	r7, r1, r0, ror #2
   168d8:	andeq	r7, r1, r0, ror #2
   168dc:	andeq	r7, r1, r0, ror #2
   168e0:	andeq	r6, r1, r8, lsr #18
   168e4:	andeq	r7, r1, r0, ror #2
   168e8:	andeq	r6, r1, r8, lsr #18
   168ec:	andeq	r7, r1, r0, ror #2
   168f0:	andeq	r7, r1, r0, ror #2
   168f4:	andeq	r7, r1, r0, ror #2
   168f8:	andeq	r7, r1, r0, ror #2
   168fc:	andeq	r7, r1, r0, ror #2
   16900:	andeq	r7, r1, r0, ror #2
   16904:	andeq	r7, r1, r0, ror #2
   16908:	andeq	r7, r1, r0, ror #2
   1690c:	andeq	r7, r1, r0, ror #2
   16910:	andeq	r7, r1, r0, ror #2
   16914:	andeq	r7, r1, r0, ror #2
   16918:	andeq	r7, r1, r0, ror #2
   1691c:	andeq	r6, r1, r8, lsr #18
   16920:	andeq	r6, r1, r8, lsr #18
   16924:	andeq	r6, r1, r8, lsr #18
   16928:	ldr	r1, [sp, #32]
   1692c:	cmp	r1, #0
   16930:	bne	17370 <__assert_fail@plt+0x6040>
   16934:	cmp	r7, fp
   16938:	movhi	r1, #63	; 0x3f
   1693c:	ldrhi	r0, [sp, #36]	; 0x24
   16940:	strbhi	r1, [r0, fp]
   16944:	add	r1, fp, #1
   16948:	cmp	r7, r1
   1694c:	ldrhi	r0, [sp, #36]	; 0x24
   16950:	movhi	ip, #34	; 0x22
   16954:	strbhi	ip, [r0, r1]
   16958:	add	r1, fp, #2
   1695c:	cmp	r7, r1
   16960:	ldrhi	r0, [sp, #36]	; 0x24
   16964:	movhi	ip, #34	; 0x22
   16968:	strbhi	ip, [r0, r1]
   1696c:	add	r1, fp, #3
   16970:	cmp	r7, r1
   16974:	movhi	r0, #63	; 0x3f
   16978:	ldrhi	ip, [sp, #36]	; 0x24
   1697c:	strbhi	r0, [ip, r1]
   16980:	add	fp, fp, #4
   16984:	ldr	r5, [sp, #32]
   16988:	mov	r8, r5
   1698c:	mov	r4, r2
   16990:	mov	r6, r3
   16994:	b	16aec <__assert_fail@plt+0x57bc>
   16998:	mov	r3, #102	; 0x66
   1699c:	b	16a54 <__assert_fail@plt+0x5724>
   169a0:	mov	r3, #118	; 0x76
   169a4:	b	16a54 <__assert_fail@plt+0x5724>
   169a8:	cmp	sl, #2
   169ac:	beq	16a18 <__assert_fail@plt+0x56e8>
   169b0:	ldr	r3, [sp, #48]	; 0x30
   169b4:	ldr	r2, [sp, #32]
   169b8:	and	r3, r3, r2
   169bc:	tst	r9, r3
   169c0:	moveq	r3, r4
   169c4:	beq	16a54 <__assert_fail@plt+0x5724>
   169c8:	mov	r8, #0
   169cc:	mov	r5, r8
   169d0:	eor	r5, r5, #1
   169d4:	ldr	r3, [sp, #44]	; 0x2c
   169d8:	and	r5, r5, r3
   169dc:	tst	r5, #255	; 0xff
   169e0:	beq	16bc0 <__assert_fail@plt+0x5890>
   169e4:	cmp	r7, fp
   169e8:	ldrhi	r3, [sp, #36]	; 0x24
   169ec:	movhi	r2, #39	; 0x27
   169f0:	strbhi	r2, [r3, fp]
   169f4:	add	r3, fp, #1
   169f8:	cmp	r7, r3
   169fc:	ldrhi	r2, [sp, #36]	; 0x24
   16a00:	movhi	r1, #39	; 0x27
   16a04:	strbhi	r1, [r2, r3]
   16a08:	add	fp, fp, #2
   16a0c:	mov	r3, #0
   16a10:	str	r3, [sp, #44]	; 0x2c
   16a14:	b	16bc0 <__assert_fail@plt+0x5890>
   16a18:	ldr	r3, [sp, #32]
   16a1c:	cmp	r3, #0
   16a20:	bne	172bc <__assert_fail@plt+0x5f8c>
   16a24:	mov	r8, r3
   16a28:	mov	r5, r3
   16a2c:	b	169d0 <__assert_fail@plt+0x56a0>
   16a30:	mov	r3, #110	; 0x6e
   16a34:	b	16a3c <__assert_fail@plt+0x570c>
   16a38:	mov	r3, #116	; 0x74
   16a3c:	ldr	r2, [sp, #32]
   16a40:	cmp	sl, #2
   16a44:	movne	r2, #0
   16a48:	andeq	r2, r2, #1
   16a4c:	cmp	r2, #0
   16a50:	bne	16a74 <__assert_fail@plt+0x5744>
   16a54:	ldr	r2, [sp, #48]	; 0x30
   16a58:	cmp	r2, #0
   16a5c:	moveq	r8, r2
   16a60:	moveq	r5, r2
   16a64:	beq	16aec <__assert_fail@plt+0x57bc>
   16a68:	mov	r4, r3
   16a6c:	mov	r8, #0
   16a70:	b	16b44 <__assert_fail@plt+0x5814>
   16a74:	mov	r8, sl
   16a78:	mov	sl, r7
   16a7c:	b	172e8 <__assert_fail@plt+0x5fb8>
   16a80:	mov	r3, #97	; 0x61
   16a84:	b	16a54 <__assert_fail@plt+0x5724>
   16a88:	ldr	r3, [sp, #28]
   16a8c:	cmn	r3, #1
   16a90:	beq	16abc <__assert_fail@plt+0x578c>
   16a94:	ldr	r3, [sp, #28]
   16a98:	subs	r3, r3, #1
   16a9c:	movne	r3, #1
   16aa0:	cmp	r3, #0
   16aa4:	bne	1716c <__assert_fail@plt+0x5e3c>
   16aa8:	cmp	r6, #0
   16aac:	beq	16ad4 <__assert_fail@plt+0x57a4>
   16ab0:	mov	r8, #0
   16ab4:	mov	r5, r8
   16ab8:	b	16aec <__assert_fail@plt+0x57bc>
   16abc:	ldr	r3, [sp, #52]	; 0x34
   16ac0:	ldrb	r3, [r3, #1]
   16ac4:	adds	r3, r3, #0
   16ac8:	movne	r3, #1
   16acc:	b	16aa0 <__assert_fail@plt+0x5770>
   16ad0:	mov	r8, #0
   16ad4:	ldr	r5, [sp, #32]
   16ad8:	cmp	sl, #2
   16adc:	movne	r5, #0
   16ae0:	andeq	r5, r5, #1
   16ae4:	cmp	r5, #0
   16ae8:	bne	16c9c <__assert_fail@plt+0x596c>
   16aec:	ldr	r3, [sp, #68]	; 0x44
   16af0:	cmp	sl, #2
   16af4:	orreq	r3, r3, #1
   16af8:	eor	r3, r3, #1
   16afc:	ldr	r2, [sp, #32]
   16b00:	orr	r3, r2, r3
   16b04:	tst	r3, #255	; 0xff
   16b08:	beq	16b38 <__assert_fail@plt+0x5808>
   16b0c:	ldr	r3, [sp, #160]	; 0xa0
   16b10:	cmp	r3, #0
   16b14:	beq	16b38 <__assert_fail@plt+0x5808>
   16b18:	lsr	r2, r4, #5
   16b1c:	uxtb	r2, r2
   16b20:	and	r3, r4, #31
   16b24:	ldr	r1, [sp, #160]	; 0xa0
   16b28:	ldr	r2, [r1, r2, lsl #2]
   16b2c:	lsr	r3, r2, r3
   16b30:	tst	r3, #1
   16b34:	bne	16b44 <__assert_fail@plt+0x5814>
   16b38:	ldr	r3, [sp, #56]	; 0x38
   16b3c:	cmp	r3, #0
   16b40:	beq	169d0 <__assert_fail@plt+0x56a0>
   16b44:	ldr	r3, [sp, #32]
   16b48:	cmp	r3, #0
   16b4c:	bne	17358 <__assert_fail@plt+0x6028>
   16b50:	ldr	r3, [sp, #44]	; 0x2c
   16b54:	eor	r3, r3, #1
   16b58:	cmp	sl, #2
   16b5c:	movne	r3, #0
   16b60:	andeq	r3, r3, #1
   16b64:	cmp	r3, #0
   16b68:	beq	16bac <__assert_fail@plt+0x587c>
   16b6c:	cmp	r7, fp
   16b70:	ldrhi	r2, [sp, #36]	; 0x24
   16b74:	movhi	r1, #39	; 0x27
   16b78:	strbhi	r1, [r2, fp]
   16b7c:	add	r2, fp, #1
   16b80:	cmp	r7, r2
   16b84:	ldrhi	r1, [sp, #36]	; 0x24
   16b88:	movhi	r0, #36	; 0x24
   16b8c:	strbhi	r0, [r1, r2]
   16b90:	add	r2, fp, #2
   16b94:	cmp	r7, r2
   16b98:	ldrhi	r1, [sp, #36]	; 0x24
   16b9c:	movhi	r0, #39	; 0x27
   16ba0:	strbhi	r0, [r1, r2]
   16ba4:	add	fp, fp, #3
   16ba8:	str	r3, [sp, #44]	; 0x2c
   16bac:	cmp	r7, fp
   16bb0:	ldrhi	r3, [sp, #36]	; 0x24
   16bb4:	movhi	r2, #92	; 0x5c
   16bb8:	strbhi	r2, [r3, fp]
   16bbc:	add	fp, fp, #1
   16bc0:	cmp	fp, r7
   16bc4:	ldrcc	r3, [sp, #36]	; 0x24
   16bc8:	strbcc	r4, [r3, fp]
   16bcc:	add	fp, fp, #1
   16bd0:	ldr	r3, [sp, #40]	; 0x28
   16bd4:	cmp	r8, #0
   16bd8:	moveq	r3, #0
   16bdc:	str	r3, [sp, #40]	; 0x28
   16be0:	add	r6, r6, #1
   16be4:	ldr	r3, [sp, #28]
   16be8:	cmn	r3, #1
   16bec:	beq	17178 <__assert_fail@plt+0x5e48>
   16bf0:	ldr	r3, [sp, #28]
   16bf4:	subs	r8, r3, r6
   16bf8:	movne	r8, #1
   16bfc:	cmp	r8, #0
   16c00:	beq	1718c <__assert_fail@plt+0x5e5c>
   16c04:	ldr	r5, [sp, #48]	; 0x30
   16c08:	cmp	sl, #2
   16c0c:	moveq	r5, #0
   16c10:	andne	r5, r5, #1
   16c14:	ldr	r3, [sp, #60]	; 0x3c
   16c18:	adds	r9, r3, #0
   16c1c:	movne	r9, #1
   16c20:	ands	r2, r5, r9
   16c24:	str	r2, [sp, #56]	; 0x38
   16c28:	beq	164f0 <__assert_fail@plt+0x51c0>
   16c2c:	add	r4, r6, r3
   16c30:	ldr	r2, [sp, #28]
   16c34:	cmp	r3, #1
   16c38:	movls	r3, #0
   16c3c:	movhi	r3, #1
   16c40:	cmn	r2, #1
   16c44:	movne	r3, #0
   16c48:	cmp	r3, #0
   16c4c:	beq	16c5c <__assert_fail@plt+0x592c>
   16c50:	ldr	r0, [sp, #52]	; 0x34
   16c54:	bl	111bc <strlen@plt>
   16c58:	str	r0, [sp, #28]
   16c5c:	ldr	r3, [sp, #28]
   16c60:	cmp	r3, r4
   16c64:	bcc	164e8 <__assert_fail@plt+0x51b8>
   16c68:	ldr	r2, [sp, #60]	; 0x3c
   16c6c:	ldr	r1, [sp, #72]	; 0x48
   16c70:	ldr	r3, [sp, #52]	; 0x34
   16c74:	add	r0, r3, r6
   16c78:	bl	1109c <memcmp@plt>
   16c7c:	cmp	r0, #0
   16c80:	bne	16708 <__assert_fail@plt+0x53d8>
   16c84:	ldr	r3, [sp, #32]
   16c88:	cmp	r3, #0
   16c8c:	beq	164f0 <__assert_fail@plt+0x51c0>
   16c90:	mov	r8, sl
   16c94:	mov	sl, r7
   16c98:	b	172e8 <__assert_fail@plt+0x5fb8>
   16c9c:	mov	r8, sl
   16ca0:	mov	sl, r7
   16ca4:	b	172e8 <__assert_fail@plt+0x5fb8>
   16ca8:	cmp	sl, #2
   16cac:	strne	r8, [sp, #80]	; 0x50
   16cb0:	movne	r5, #0
   16cb4:	bne	16aec <__assert_fail@plt+0x57bc>
   16cb8:	ldr	r3, [sp, #32]
   16cbc:	cmp	r3, #0
   16cc0:	bne	172d4 <__assert_fail@plt+0x5fa4>
   16cc4:	ldr	r2, [sp, #76]	; 0x4c
   16cc8:	adds	r3, r7, #0
   16ccc:	movne	r3, #1
   16cd0:	cmp	r2, #0
   16cd4:	movne	r3, #0
   16cd8:	cmp	r3, #0
   16cdc:	movne	r3, #0
   16ce0:	bne	16d10 <__assert_fail@plt+0x59e0>
   16ce4:	cmp	r7, fp
   16ce8:	ldrhi	r3, [sp, #36]	; 0x24
   16cec:	movhi	r2, #39	; 0x27
   16cf0:	strbhi	r2, [r3, fp]
   16cf4:	add	r3, fp, #1
   16cf8:	cmp	r7, r3
   16cfc:	ldrhi	r2, [sp, #36]	; 0x24
   16d00:	movhi	r1, #92	; 0x5c
   16d04:	strbhi	r1, [r2, r3]
   16d08:	mov	r3, r7
   16d0c:	ldr	r7, [sp, #76]	; 0x4c
   16d10:	add	r2, fp, #2
   16d14:	cmp	r2, r3
   16d18:	ldrcc	r1, [sp, #36]	; 0x24
   16d1c:	movcc	r0, #39	; 0x27
   16d20:	strbcc	r0, [r1, r2]
   16d24:	add	fp, fp, #3
   16d28:	ldr	r2, [sp, #32]
   16d2c:	mov	r5, r2
   16d30:	str	r8, [sp, #80]	; 0x50
   16d34:	str	r2, [sp, #44]	; 0x2c
   16d38:	str	r7, [sp, #76]	; 0x4c
   16d3c:	mov	r7, r3
   16d40:	b	16aec <__assert_fail@plt+0x57bc>
   16d44:	ldr	r5, [sp, #84]	; 0x54
   16d48:	cmp	r5, #1
   16d4c:	beq	16d7c <__assert_fail@plt+0x5a4c>
   16d50:	mov	r3, #0
   16d54:	str	r3, [sp, #104]	; 0x68
   16d58:	str	r3, [sp, #108]	; 0x6c
   16d5c:	ldr	r3, [sp, #28]
   16d60:	cmn	r3, #1
   16d64:	beq	16db0 <__assert_fail@plt+0x5a80>
   16d68:	mov	r3, #0
   16d6c:	str	r4, [sp, #88]	; 0x58
   16d70:	str	fp, [sp, #92]	; 0x5c
   16d74:	mov	fp, r3
   16d78:	b	16ed8 <__assert_fail@plt+0x5ba8>
   16d7c:	bl	111a4 <__ctype_b_loc@plt>
   16d80:	ldr	r2, [r0]
   16d84:	lsl	r3, r4, #1
   16d88:	ldrh	r8, [r2, r3]
   16d8c:	lsr	r8, r8, #14
   16d90:	and	r8, r8, #1
   16d94:	mov	r2, r5
   16d98:	eor	r5, r8, #1
   16d9c:	ldr	r3, [sp, #48]	; 0x30
   16da0:	and	r5, r5, r3
   16da4:	ands	r5, r5, #255	; 0xff
   16da8:	beq	16aec <__assert_fail@plt+0x57bc>
   16dac:	b	16f70 <__assert_fail@plt+0x5c40>
   16db0:	ldr	r0, [sp, #52]	; 0x34
   16db4:	bl	111bc <strlen@plt>
   16db8:	str	r0, [sp, #28]
   16dbc:	b	16d68 <__assert_fail@plt+0x5a38>
   16dc0:	mov	r2, fp
   16dc4:	mov	r1, r4
   16dc8:	ldr	r4, [sp, #88]	; 0x58
   16dcc:	ldr	fp, [sp, #92]	; 0x5c
   16dd0:	ldr	r0, [sp, #28]
   16dd4:	cmp	r0, r5
   16dd8:	bls	16fa4 <__assert_fail@plt+0x5c74>
   16ddc:	ldrb	r3, [r1]
   16de0:	cmp	r3, #0
   16de4:	beq	16fac <__assert_fail@plt+0x5c7c>
   16de8:	mov	r3, r1
   16dec:	add	r2, r2, #1
   16df0:	add	r1, r6, r2
   16df4:	cmp	r0, r1
   16df8:	bls	16fb4 <__assert_fail@plt+0x5c84>
   16dfc:	ldrb	r1, [r3, #1]!
   16e00:	cmp	r1, #0
   16e04:	bne	16dec <__assert_fail@plt+0x5abc>
   16e08:	mov	r8, #0
   16e0c:	b	16f68 <__assert_fail@plt+0x5c38>
   16e10:	cmp	r4, r5
   16e14:	beq	16eb4 <__assert_fail@plt+0x5b84>
   16e18:	ldrb	r3, [r4, #1]!
   16e1c:	sub	r3, r3, #91	; 0x5b
   16e20:	cmp	r3, #33	; 0x21
   16e24:	ldrls	pc, [pc, r3, lsl #2]
   16e28:	b	16e10 <__assert_fail@plt+0x5ae0>
   16e2c:	andeq	r7, r1, r0, ror #5
   16e30:	andeq	r7, r1, r0, ror #5
   16e34:	andeq	r6, r1, r0, lsl lr
   16e38:	andeq	r7, r1, r0, ror #5
   16e3c:	andeq	r6, r1, r0, lsl lr
   16e40:	andeq	r7, r1, r0, ror #5
   16e44:	andeq	r6, r1, r0, lsl lr
   16e48:	andeq	r6, r1, r0, lsl lr
   16e4c:	andeq	r6, r1, r0, lsl lr
   16e50:	andeq	r6, r1, r0, lsl lr
   16e54:	andeq	r6, r1, r0, lsl lr
   16e58:	andeq	r6, r1, r0, lsl lr
   16e5c:	andeq	r6, r1, r0, lsl lr
   16e60:	andeq	r6, r1, r0, lsl lr
   16e64:	andeq	r6, r1, r0, lsl lr
   16e68:	andeq	r6, r1, r0, lsl lr
   16e6c:	andeq	r6, r1, r0, lsl lr
   16e70:	andeq	r6, r1, r0, lsl lr
   16e74:	andeq	r6, r1, r0, lsl lr
   16e78:	andeq	r6, r1, r0, lsl lr
   16e7c:	andeq	r6, r1, r0, lsl lr
   16e80:	andeq	r6, r1, r0, lsl lr
   16e84:	andeq	r6, r1, r0, lsl lr
   16e88:	andeq	r6, r1, r0, lsl lr
   16e8c:	andeq	r6, r1, r0, lsl lr
   16e90:	andeq	r6, r1, r0, lsl lr
   16e94:	andeq	r6, r1, r0, lsl lr
   16e98:	andeq	r6, r1, r0, lsl lr
   16e9c:	andeq	r6, r1, r0, lsl lr
   16ea0:	andeq	r6, r1, r0, lsl lr
   16ea4:	andeq	r6, r1, r0, lsl lr
   16ea8:	andeq	r6, r1, r0, lsl lr
   16eac:	andeq	r6, r1, r0, lsl lr
   16eb0:	andeq	r7, r1, r0, ror #5
   16eb4:	ldr	r0, [sp, #100]	; 0x64
   16eb8:	bl	110f0 <iswprint@plt>
   16ebc:	cmp	r0, #0
   16ec0:	moveq	r8, #0
   16ec4:	add	fp, fp, r9
   16ec8:	add	r0, sp, #104	; 0x68
   16ecc:	bl	11090 <mbsinit@plt>
   16ed0:	cmp	r0, #0
   16ed4:	bne	16f48 <__assert_fail@plt+0x5c18>
   16ed8:	add	r5, r6, fp
   16edc:	ldr	r3, [sp, #52]	; 0x34
   16ee0:	add	r4, r3, r5
   16ee4:	add	r3, sp, #104	; 0x68
   16ee8:	ldr	r2, [sp, #28]
   16eec:	sub	r2, r2, r5
   16ef0:	mov	r1, r4
   16ef4:	add	r0, sp, #100	; 0x64
   16ef8:	bl	193fc <__assert_fail@plt+0x80cc>
   16efc:	subs	r9, r0, #0
   16f00:	beq	16fbc <__assert_fail@plt+0x5c8c>
   16f04:	cmn	r9, #1
   16f08:	beq	16f58 <__assert_fail@plt+0x5c28>
   16f0c:	cmn	r9, #2
   16f10:	beq	16dc0 <__assert_fail@plt+0x5a90>
   16f14:	ldr	r3, [sp, #32]
   16f18:	cmp	sl, #2
   16f1c:	movne	r3, #0
   16f20:	andeq	r3, r3, #1
   16f24:	cmp	r3, #0
   16f28:	beq	16eb4 <__assert_fail@plt+0x5b84>
   16f2c:	cmp	r9, #1
   16f30:	bls	16eb4 <__assert_fail@plt+0x5b84>
   16f34:	sub	r3, r9, #1
   16f38:	add	r5, r3, r5
   16f3c:	ldr	r3, [sp, #52]	; 0x34
   16f40:	add	r5, r3, r5
   16f44:	b	16e18 <__assert_fail@plt+0x5ae8>
   16f48:	ldr	r4, [sp, #88]	; 0x58
   16f4c:	mov	r2, fp
   16f50:	ldr	fp, [sp, #92]	; 0x5c
   16f54:	b	16f68 <__assert_fail@plt+0x5c38>
   16f58:	ldr	r4, [sp, #88]	; 0x58
   16f5c:	mov	r2, fp
   16f60:	ldr	fp, [sp, #92]	; 0x5c
   16f64:	mov	r8, #0
   16f68:	cmp	r2, #1
   16f6c:	bls	16d98 <__assert_fail@plt+0x5a68>
   16f70:	add	r1, r6, r2
   16f74:	ldr	ip, [sp, #64]	; 0x40
   16f78:	mov	r5, #0
   16f7c:	eor	r3, r8, #1
   16f80:	ldr	r2, [sp, #48]	; 0x30
   16f84:	and	r3, r3, r2
   16f88:	uxtb	r3, r3
   16f8c:	ldr	r9, [sp, #32]
   16f90:	ldr	lr, [sp, #44]	; 0x2c
   16f94:	ldr	r2, [sp, #56]	; 0x38
   16f98:	str	r8, [sp, #56]	; 0x38
   16f9c:	ldr	r0, [sp, #36]	; 0x24
   16fa0:	b	1703c <__assert_fail@plt+0x5d0c>
   16fa4:	mov	r8, #0
   16fa8:	b	16f68 <__assert_fail@plt+0x5c38>
   16fac:	mov	r8, #0
   16fb0:	b	16f68 <__assert_fail@plt+0x5c38>
   16fb4:	mov	r8, #0
   16fb8:	b	16f68 <__assert_fail@plt+0x5c38>
   16fbc:	ldr	r4, [sp, #88]	; 0x58
   16fc0:	mov	r2, fp
   16fc4:	ldr	fp, [sp, #92]	; 0x5c
   16fc8:	b	16f68 <__assert_fail@plt+0x5c38>
   16fcc:	cmp	r2, #0
   16fd0:	beq	16fe4 <__assert_fail@plt+0x5cb4>
   16fd4:	cmp	r7, fp
   16fd8:	movhi	r2, #92	; 0x5c
   16fdc:	strbhi	r2, [r0, fp]
   16fe0:	add	fp, fp, #1
   16fe4:	add	r8, r6, #1
   16fe8:	cmp	r1, r8
   16fec:	bls	170f4 <__assert_fail@plt+0x5dc4>
   16ff0:	eor	r2, r5, #1
   16ff4:	and	r2, r2, lr
   16ff8:	ands	r2, r2, #255	; 0xff
   16ffc:	beq	17110 <__assert_fail@plt+0x5de0>
   17000:	cmp	r7, fp
   17004:	movhi	r2, #39	; 0x27
   17008:	strbhi	r2, [r0, fp]
   1700c:	add	r2, fp, #1
   17010:	cmp	r7, r2
   17014:	movhi	lr, #39	; 0x27
   17018:	strbhi	lr, [r0, r2]
   1701c:	add	fp, fp, #2
   17020:	mov	r6, r8
   17024:	mov	r2, r3
   17028:	mov	lr, r3
   1702c:	cmp	r7, fp
   17030:	strbhi	r4, [r0, fp]
   17034:	add	fp, fp, #1
   17038:	ldrb	r4, [ip, #1]!
   1703c:	cmp	r3, #0
   17040:	beq	16fcc <__assert_fail@plt+0x5c9c>
   17044:	cmp	r9, #0
   17048:	bne	1734c <__assert_fail@plt+0x601c>
   1704c:	eor	r5, lr, #1
   17050:	cmp	sl, #2
   17054:	movne	r5, #0
   17058:	andeq	r5, r5, #1
   1705c:	cmp	r5, #0
   17060:	beq	17098 <__assert_fail@plt+0x5d68>
   17064:	cmp	r7, fp
   17068:	movhi	lr, #39	; 0x27
   1706c:	strbhi	lr, [r0, fp]
   17070:	add	lr, fp, #1
   17074:	cmp	r7, lr
   17078:	movhi	r8, #36	; 0x24
   1707c:	strbhi	r8, [r0, lr]
   17080:	add	lr, fp, #2
   17084:	cmp	r7, lr
   17088:	movhi	r8, #39	; 0x27
   1708c:	strbhi	r8, [r0, lr]
   17090:	add	fp, fp, #3
   17094:	mov	lr, r5
   17098:	cmp	r7, fp
   1709c:	movhi	r5, #92	; 0x5c
   170a0:	strbhi	r5, [r0, fp]
   170a4:	add	r5, fp, #1
   170a8:	cmp	r7, r5
   170ac:	lsrhi	r8, r4, #6
   170b0:	addhi	r8, r8, #48	; 0x30
   170b4:	strbhi	r8, [r0, r5]
   170b8:	add	r8, fp, #2
   170bc:	cmp	r7, r8
   170c0:	lsrhi	r5, r4, #3
   170c4:	andhi	r5, r5, #7
   170c8:	addhi	r5, r5, #48	; 0x30
   170cc:	strbhi	r5, [r0, r8]
   170d0:	add	fp, fp, #3
   170d4:	and	r4, r4, #7
   170d8:	add	r4, r4, #48	; 0x30
   170dc:	add	r5, r6, #1
   170e0:	cmp	r1, r5
   170e4:	bls	17100 <__assert_fail@plt+0x5dd0>
   170e8:	mov	r6, r5
   170ec:	mov	r5, r3
   170f0:	b	1702c <__assert_fail@plt+0x5cfc>
   170f4:	str	lr, [sp, #44]	; 0x2c
   170f8:	ldr	r8, [sp, #56]	; 0x38
   170fc:	b	169d0 <__assert_fail@plt+0x56a0>
   17100:	str	lr, [sp, #44]	; 0x2c
   17104:	ldr	r8, [sp, #56]	; 0x38
   17108:	mov	r5, r3
   1710c:	b	169d0 <__assert_fail@plt+0x56a0>
   17110:	mov	r6, r8
   17114:	b	1702c <__assert_fail@plt+0x5cfc>
   17118:	mov	r5, #0
   1711c:	b	16aec <__assert_fail@plt+0x57bc>
   17120:	mov	r8, r5
   17124:	ldr	r5, [sp, #48]	; 0x30
   17128:	mov	r4, #48	; 0x30
   1712c:	b	16aec <__assert_fail@plt+0x57bc>
   17130:	ldr	r8, [sp, #32]
   17134:	mov	r4, #48	; 0x30
   17138:	b	16aec <__assert_fail@plt+0x57bc>
   1713c:	ldr	r8, [sp, #32]
   17140:	mov	r4, #48	; 0x30
   17144:	b	16aec <__assert_fail@plt+0x57bc>
   17148:	mov	r8, #0
   1714c:	mov	r5, r8
   17150:	b	16aec <__assert_fail@plt+0x57bc>
   17154:	mov	r8, #0
   17158:	mov	r5, r8
   1715c:	b	16aec <__assert_fail@plt+0x57bc>
   17160:	mov	r8, #0
   17164:	mov	r5, r8
   17168:	b	16aec <__assert_fail@plt+0x57bc>
   1716c:	mov	r8, #0
   17170:	mov	r5, r8
   17174:	b	16aec <__assert_fail@plt+0x57bc>
   17178:	ldr	r3, [sp, #52]	; 0x34
   1717c:	ldrb	r8, [r3, r6]
   17180:	adds	r8, r8, #0
   17184:	movne	r8, #1
   17188:	b	16bfc <__assert_fail@plt+0x58cc>
   1718c:	cmp	sl, #2
   17190:	movne	r3, #0
   17194:	moveq	r3, #1
   17198:	ldr	r1, [sp, #32]
   1719c:	mov	r2, r1
   171a0:	and	r2, r2, r3
   171a4:	cmp	fp, #0
   171a8:	movne	r2, #0
   171ac:	andeq	r2, r2, #1
   171b0:	cmp	r2, #0
   171b4:	bne	17364 <__assert_fail@plt+0x6034>
   171b8:	eor	r2, r1, #1
   171bc:	and	r3, r3, r2
   171c0:	ldr	r1, [sp, #80]	; 0x50
   171c4:	tst	r1, r3
   171c8:	beq	17240 <__assert_fail@plt+0x5f10>
   171cc:	ldr	r3, [sp, #40]	; 0x28
   171d0:	cmp	r3, #0
   171d4:	bne	171fc <__assert_fail@plt+0x5ecc>
   171d8:	ldr	r1, [sp, #76]	; 0x4c
   171dc:	clz	r3, r7
   171e0:	lsr	r3, r3, #5
   171e4:	cmp	r1, #0
   171e8:	moveq	r3, #0
   171ec:	cmp	r3, #0
   171f0:	beq	17240 <__assert_fail@plt+0x5f10>
   171f4:	ldr	r7, [sp, #76]	; 0x4c
   171f8:	b	16290 <__assert_fail@plt+0x4f60>
   171fc:	ldr	r3, [sp, #168]	; 0xa8
   17200:	str	r3, [sp, #16]
   17204:	ldr	r3, [sp, #164]	; 0xa4
   17208:	str	r3, [sp, #12]
   1720c:	ldr	r3, [sp, #160]	; 0xa0
   17210:	str	r3, [sp, #8]
   17214:	ldr	r3, [sp, #156]	; 0x9c
   17218:	str	r3, [sp, #4]
   1721c:	mov	r3, #5
   17220:	str	r3, [sp]
   17224:	ldr	r3, [sp, #28]
   17228:	ldr	r2, [sp, #52]	; 0x34
   1722c:	ldr	r1, [sp, #76]	; 0x4c
   17230:	ldr	r0, [sp, #36]	; 0x24
   17234:	bl	16230 <__assert_fail@plt+0x4f00>
   17238:	mov	fp, r0
   1723c:	b	17340 <__assert_fail@plt+0x6010>
   17240:	mov	sl, r7
   17244:	ldr	r3, [sp, #72]	; 0x48
   17248:	cmp	r3, #0
   1724c:	moveq	r2, #0
   17250:	andne	r2, r2, #1
   17254:	cmp	r2, #0
   17258:	beq	17288 <__assert_fail@plt+0x5f58>
   1725c:	mov	r2, r3
   17260:	ldrb	r3, [r3]
   17264:	cmp	r3, #0
   17268:	beq	17288 <__assert_fail@plt+0x5f58>
   1726c:	ldr	r1, [sp, #36]	; 0x24
   17270:	cmp	sl, fp
   17274:	strbhi	r3, [r1, fp]
   17278:	add	fp, fp, #1
   1727c:	ldrb	r3, [r2, #1]!
   17280:	cmp	r3, #0
   17284:	bne	17270 <__assert_fail@plt+0x5f40>
   17288:	cmp	sl, fp
   1728c:	movhi	r3, #0
   17290:	ldrhi	r2, [sp, #36]	; 0x24
   17294:	strbhi	r3, [r2, fp]
   17298:	b	17340 <__assert_fail@plt+0x6010>
   1729c:	mov	r8, sl
   172a0:	mov	sl, r7
   172a4:	ldr	r3, [sp, #32]
   172a8:	str	r3, [sp, #48]	; 0x30
   172ac:	b	172e8 <__assert_fail@plt+0x5fb8>
   172b0:	mov	r8, sl
   172b4:	mov	sl, r7
   172b8:	b	172e8 <__assert_fail@plt+0x5fb8>
   172bc:	mov	r8, sl
   172c0:	mov	sl, r7
   172c4:	b	172e8 <__assert_fail@plt+0x5fb8>
   172c8:	andeq	sl, r1, ip, ror #23
   172cc:	strdeq	sl, [r1], -ip
   172d0:	strdeq	sl, [r1], -r0
   172d4:	mov	r8, sl
   172d8:	mov	sl, r7
   172dc:	b	172e8 <__assert_fail@plt+0x5fb8>
   172e0:	mov	r8, sl
   172e4:	mov	sl, r7
   172e8:	ldr	r3, [sp, #48]	; 0x30
   172ec:	cmp	r8, #2
   172f0:	movne	r3, #0
   172f4:	andeq	r3, r3, #1
   172f8:	cmp	r3, #0
   172fc:	movne	r8, #4
   17300:	ldr	r3, [sp, #168]	; 0xa8
   17304:	str	r3, [sp, #16]
   17308:	ldr	r3, [sp, #164]	; 0xa4
   1730c:	str	r3, [sp, #12]
   17310:	mov	r3, #0
   17314:	str	r3, [sp, #8]
   17318:	ldr	r3, [sp, #156]	; 0x9c
   1731c:	bic	r3, r3, #2
   17320:	str	r3, [sp, #4]
   17324:	str	r8, [sp]
   17328:	ldr	r3, [sp, #28]
   1732c:	ldr	r2, [sp, #52]	; 0x34
   17330:	mov	r1, sl
   17334:	ldr	r0, [sp, #36]	; 0x24
   17338:	bl	16230 <__assert_fail@plt+0x4f00>
   1733c:	mov	fp, r0
   17340:	mov	r0, fp
   17344:	add	sp, sp, #116	; 0x74
   17348:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1734c:	mov	r8, sl
   17350:	mov	sl, r7
   17354:	b	172e8 <__assert_fail@plt+0x5fb8>
   17358:	mov	r8, sl
   1735c:	mov	sl, r7
   17360:	b	172e8 <__assert_fail@plt+0x5fb8>
   17364:	mov	r8, sl
   17368:	mov	sl, r7
   1736c:	b	172e8 <__assert_fail@plt+0x5fb8>
   17370:	mov	r8, sl
   17374:	mov	sl, r7
   17378:	b	17300 <__assert_fail@plt+0x5fd0>
   1737c:	mov	r3, #1
   17380:	str	r3, [sp, #32]
   17384:	str	r3, [sp, #48]	; 0x30
   17388:	str	r3, [sp, #60]	; 0x3c
   1738c:	ldr	r3, [pc, #-196]	; 172d0 <__assert_fail@plt+0x5fa0>
   17390:	str	r3, [sp, #72]	; 0x48
   17394:	mov	fp, #0
   17398:	mov	sl, #5
   1739c:	b	162ec <__assert_fail@plt+0x4fbc>
   173a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   173a4:	sub	sp, sp, #52	; 0x34
   173a8:	mov	r5, r0
   173ac:	str	r1, [sp, #24]
   173b0:	str	r2, [sp, #28]
   173b4:	mov	r4, r3
   173b8:	bl	111ec <__errno_location@plt>
   173bc:	str	r0, [sp, #32]
   173c0:	ldr	r3, [r0]
   173c4:	str	r3, [sp, #36]	; 0x24
   173c8:	ldr	r3, [pc, #396]	; 1755c <__assert_fail@plt+0x622c>
   173cc:	ldr	r6, [r3]
   173d0:	cmn	r5, #-2147483647	; 0x80000001
   173d4:	movne	r3, #0
   173d8:	moveq	r3, #1
   173dc:	orrs	r3, r3, r5, lsr #31
   173e0:	bne	17520 <__assert_fail@plt+0x61f0>
   173e4:	ldr	r3, [pc, #368]	; 1755c <__assert_fail@plt+0x622c>
   173e8:	ldr	r2, [r3, #4]
   173ec:	cmp	r5, r2
   173f0:	blt	17458 <__assert_fail@plt+0x6128>
   173f4:	str	r2, [sp, #44]	; 0x2c
   173f8:	add	r3, r3, #8
   173fc:	cmp	r6, r3
   17400:	beq	17524 <__assert_fail@plt+0x61f4>
   17404:	sub	r2, r5, r2
   17408:	mov	r3, #8
   1740c:	str	r3, [sp]
   17410:	mvn	r3, #-2147483648	; 0x80000000
   17414:	add	r2, r2, #1
   17418:	add	r1, sp, #44	; 0x2c
   1741c:	mov	r0, r6
   17420:	bl	18330 <__assert_fail@plt+0x7000>
   17424:	mov	r6, r0
   17428:	ldr	r3, [pc, #300]	; 1755c <__assert_fail@plt+0x622c>
   1742c:	str	r0, [r3]
   17430:	ldr	r7, [pc, #292]	; 1755c <__assert_fail@plt+0x622c>
   17434:	ldr	r0, [r7, #4]
   17438:	ldr	r2, [sp, #44]	; 0x2c
   1743c:	sub	r2, r2, r0
   17440:	lsl	r2, r2, #3
   17444:	mov	r1, #0
   17448:	add	r0, r6, r0, lsl #3
   1744c:	bl	11204 <memset@plt>
   17450:	ldr	r3, [sp, #44]	; 0x2c
   17454:	str	r3, [r7, #4]
   17458:	add	fp, r6, r5, lsl #3
   1745c:	ldr	r8, [r6, r5, lsl #3]
   17460:	ldr	r7, [fp, #4]
   17464:	ldr	r9, [r4, #4]
   17468:	orr	r9, r9, #1
   1746c:	add	sl, r4, #8
   17470:	ldr	r3, [r4, #44]	; 0x2c
   17474:	str	r3, [sp, #16]
   17478:	ldr	r3, [r4, #40]	; 0x28
   1747c:	str	r3, [sp, #12]
   17480:	str	sl, [sp, #8]
   17484:	str	r9, [sp, #4]
   17488:	ldr	r3, [r4]
   1748c:	str	r3, [sp]
   17490:	ldr	r3, [sp, #28]
   17494:	ldr	r2, [sp, #24]
   17498:	mov	r1, r8
   1749c:	mov	r0, r7
   174a0:	bl	16230 <__assert_fail@plt+0x4f00>
   174a4:	cmp	r8, r0
   174a8:	bhi	17508 <__assert_fail@plt+0x61d8>
   174ac:	add	r8, r0, #1
   174b0:	str	r8, [r6, r5, lsl #3]
   174b4:	ldr	r3, [pc, #164]	; 17560 <__assert_fail@plt+0x6230>
   174b8:	cmp	r7, r3
   174bc:	beq	174c8 <__assert_fail@plt+0x6198>
   174c0:	mov	r0, r7
   174c4:	bl	12c88 <__assert_fail@plt+0x1958>
   174c8:	mov	r0, r8
   174cc:	bl	181ac <__assert_fail@plt+0x6e7c>
   174d0:	mov	r7, r0
   174d4:	str	r0, [fp, #4]
   174d8:	ldr	r3, [r4, #44]	; 0x2c
   174dc:	str	r3, [sp, #16]
   174e0:	ldr	r3, [r4, #40]	; 0x28
   174e4:	str	r3, [sp, #12]
   174e8:	str	sl, [sp, #8]
   174ec:	str	r9, [sp, #4]
   174f0:	ldr	r3, [r4]
   174f4:	str	r3, [sp]
   174f8:	ldr	r3, [sp, #28]
   174fc:	ldr	r2, [sp, #24]
   17500:	mov	r1, r8
   17504:	bl	16230 <__assert_fail@plt+0x4f00>
   17508:	ldr	r3, [sp, #32]
   1750c:	ldr	r2, [sp, #36]	; 0x24
   17510:	str	r2, [r3]
   17514:	mov	r0, r7
   17518:	add	sp, sp, #52	; 0x34
   1751c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17520:	bl	112e8 <abort@plt>
   17524:	sub	r2, r5, r2
   17528:	mov	r3, #8
   1752c:	str	r3, [sp]
   17530:	mvn	r3, #-2147483648	; 0x80000000
   17534:	add	r2, r2, #1
   17538:	add	r1, sp, #44	; 0x2c
   1753c:	mov	r0, #0
   17540:	bl	18330 <__assert_fail@plt+0x7000>
   17544:	mov	r6, r0
   17548:	ldr	r3, [pc, #12]	; 1755c <__assert_fail@plt+0x622c>
   1754c:	str	r0, [r3], #8
   17550:	ldm	r3, {r0, r1}
   17554:	stm	r6, {r0, r1}
   17558:	b	17430 <__assert_fail@plt+0x6100>
   1755c:	andeq	ip, r2, ip, lsr r1
   17560:	andeq	ip, r2, r4, asr #3
   17564:	push	{r4, r5, r6, lr}
   17568:	mov	r4, r0
   1756c:	bl	111ec <__errno_location@plt>
   17570:	mov	r5, r0
   17574:	ldr	r6, [r0]
   17578:	cmp	r4, #0
   1757c:	ldr	r3, [pc, #20]	; 17598 <__assert_fail@plt+0x6268>
   17580:	moveq	r4, r3
   17584:	mov	r1, #48	; 0x30
   17588:	mov	r0, r4
   1758c:	bl	18698 <__assert_fail@plt+0x7368>
   17590:	str	r6, [r5]
   17594:	pop	{r4, r5, r6, pc}
   17598:	andeq	ip, r2, r4, asr #5
   1759c:	subs	r3, r0, #0
   175a0:	ldr	r2, [pc, #8]	; 175b0 <__assert_fail@plt+0x6280>
   175a4:	moveq	r3, r2
   175a8:	ldr	r0, [r3]
   175ac:	bx	lr
   175b0:	andeq	ip, r2, r4, asr #5
   175b4:	subs	r3, r0, #0
   175b8:	ldr	r2, [pc, #8]	; 175c8 <__assert_fail@plt+0x6298>
   175bc:	moveq	r3, r2
   175c0:	str	r1, [r3]
   175c4:	bx	lr
   175c8:	andeq	ip, r2, r4, asr #5
   175cc:	push	{lr}		; (str lr, [sp, #-4]!)
   175d0:	subs	r3, r0, #0
   175d4:	ldr	r0, [pc, #44]	; 17608 <__assert_fail@plt+0x62d8>
   175d8:	moveq	r3, r0
   175dc:	add	r3, r3, #8
   175e0:	lsr	lr, r1, #5
   175e4:	and	r1, r1, #31
   175e8:	ldr	ip, [r3, lr, lsl #2]
   175ec:	lsr	r0, ip, r1
   175f0:	eor	r2, r2, r0
   175f4:	and	r2, r2, #1
   175f8:	eor	r1, ip, r2, lsl r1
   175fc:	str	r1, [r3, lr, lsl #2]
   17600:	and	r0, r0, #1
   17604:	pop	{pc}		; (ldr pc, [sp], #4)
   17608:	andeq	ip, r2, r4, asr #5
   1760c:	subs	r3, r0, #0
   17610:	ldr	r2, [pc, #12]	; 17624 <__assert_fail@plt+0x62f4>
   17614:	moveq	r3, r2
   17618:	ldr	r0, [r3, #4]
   1761c:	str	r1, [r3, #4]
   17620:	bx	lr
   17624:	andeq	ip, r2, r4, asr #5
   17628:	subs	r3, r0, #0
   1762c:	ldr	r0, [pc, #40]	; 1765c <__assert_fail@plt+0x632c>
   17630:	moveq	r3, r0
   17634:	mov	r0, #10
   17638:	str	r0, [r3]
   1763c:	cmp	r2, #0
   17640:	cmpne	r1, #0
   17644:	beq	17654 <__assert_fail@plt+0x6324>
   17648:	str	r1, [r3, #40]	; 0x28
   1764c:	str	r2, [r3, #44]	; 0x2c
   17650:	bx	lr
   17654:	push	{r4, lr}
   17658:	bl	112e8 <abort@plt>
   1765c:	andeq	ip, r2, r4, asr #5
   17660:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17664:	sub	sp, sp, #24
   17668:	mov	r7, r0
   1766c:	mov	r8, r1
   17670:	mov	r9, r2
   17674:	mov	sl, r3
   17678:	ldr	r4, [sp, #56]	; 0x38
   1767c:	cmp	r4, #0
   17680:	ldr	r3, [pc, #84]	; 176dc <__assert_fail@plt+0x63ac>
   17684:	moveq	r4, r3
   17688:	bl	111ec <__errno_location@plt>
   1768c:	mov	r5, r0
   17690:	ldr	r6, [r0]
   17694:	ldr	r3, [r4, #44]	; 0x2c
   17698:	str	r3, [sp, #16]
   1769c:	ldr	r3, [r4, #40]	; 0x28
   176a0:	str	r3, [sp, #12]
   176a4:	add	r3, r4, #8
   176a8:	str	r3, [sp, #8]
   176ac:	ldr	r3, [r4, #4]
   176b0:	str	r3, [sp, #4]
   176b4:	ldr	r3, [r4]
   176b8:	str	r3, [sp]
   176bc:	mov	r3, sl
   176c0:	mov	r2, r9
   176c4:	mov	r1, r8
   176c8:	mov	r0, r7
   176cc:	bl	16230 <__assert_fail@plt+0x4f00>
   176d0:	str	r6, [r5]
   176d4:	add	sp, sp, #24
   176d8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   176dc:	andeq	ip, r2, r4, asr #5
   176e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   176e4:	sub	sp, sp, #44	; 0x2c
   176e8:	str	r0, [sp, #28]
   176ec:	str	r1, [sp, #32]
   176f0:	mov	r6, r2
   176f4:	subs	r4, r3, #0
   176f8:	ldr	r3, [pc, #172]	; 177ac <__assert_fail@plt+0x647c>
   176fc:	moveq	r4, r3
   17700:	bl	111ec <__errno_location@plt>
   17704:	mov	r7, r0
   17708:	ldr	fp, [r0]
   1770c:	ldr	r5, [r4, #4]
   17710:	cmp	r6, #0
   17714:	orreq	r5, r5, #1
   17718:	add	r9, r4, #8
   1771c:	ldr	r3, [r4, #44]	; 0x2c
   17720:	str	r3, [sp, #16]
   17724:	ldr	r3, [r4, #40]	; 0x28
   17728:	str	r3, [sp, #12]
   1772c:	str	r9, [sp, #8]
   17730:	str	r5, [sp, #4]
   17734:	ldr	r3, [r4]
   17738:	str	r3, [sp]
   1773c:	ldr	r3, [sp, #32]
   17740:	ldr	r2, [sp, #28]
   17744:	mov	r1, #0
   17748:	mov	r0, r1
   1774c:	bl	16230 <__assert_fail@plt+0x4f00>
   17750:	mov	sl, r0
   17754:	add	r8, r0, #1
   17758:	mov	r0, r8
   1775c:	bl	181ac <__assert_fail@plt+0x6e7c>
   17760:	str	r0, [sp, #36]	; 0x24
   17764:	ldr	r3, [r4, #44]	; 0x2c
   17768:	str	r3, [sp, #16]
   1776c:	ldr	r3, [r4, #40]	; 0x28
   17770:	str	r3, [sp, #12]
   17774:	str	r9, [sp, #8]
   17778:	str	r5, [sp, #4]
   1777c:	ldr	r3, [r4]
   17780:	str	r3, [sp]
   17784:	ldr	r3, [sp, #32]
   17788:	ldr	r2, [sp, #28]
   1778c:	mov	r1, r8
   17790:	bl	16230 <__assert_fail@plt+0x4f00>
   17794:	str	fp, [r7]
   17798:	cmp	r6, #0
   1779c:	strne	sl, [r6]
   177a0:	ldr	r0, [sp, #36]	; 0x24
   177a4:	add	sp, sp, #44	; 0x2c
   177a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   177ac:	andeq	ip, r2, r4, asr #5
   177b0:	push	{r4, lr}
   177b4:	mov	r3, r2
   177b8:	mov	r2, #0
   177bc:	bl	176e0 <__assert_fail@plt+0x63b0>
   177c0:	pop	{r4, pc}
   177c4:	push	{r4, r5, r6, r7, r8, lr}
   177c8:	ldr	r3, [pc, #140]	; 1785c <__assert_fail@plt+0x652c>
   177cc:	ldr	r7, [r3]
   177d0:	ldr	r3, [r3, #4]
   177d4:	cmp	r3, #1
   177d8:	ble	17804 <__assert_fail@plt+0x64d4>
   177dc:	mov	r5, r7
   177e0:	mov	r4, #1
   177e4:	ldr	r6, [pc, #112]	; 1785c <__assert_fail@plt+0x652c>
   177e8:	ldr	r0, [r5, #12]
   177ec:	bl	12c88 <__assert_fail@plt+0x1958>
   177f0:	add	r4, r4, #1
   177f4:	add	r5, r5, #8
   177f8:	ldr	r3, [r6, #4]
   177fc:	cmp	r3, r4
   17800:	bgt	177e8 <__assert_fail@plt+0x64b8>
   17804:	ldr	r0, [r7, #4]
   17808:	ldr	r3, [pc, #80]	; 17860 <__assert_fail@plt+0x6530>
   1780c:	cmp	r0, r3
   17810:	beq	1782c <__assert_fail@plt+0x64fc>
   17814:	bl	12c88 <__assert_fail@plt+0x1958>
   17818:	ldr	r3, [pc, #60]	; 1785c <__assert_fail@plt+0x652c>
   1781c:	mov	r2, #256	; 0x100
   17820:	str	r2, [r3, #8]
   17824:	ldr	r2, [pc, #52]	; 17860 <__assert_fail@plt+0x6530>
   17828:	str	r2, [r3, #12]
   1782c:	ldr	r3, [pc, #48]	; 17864 <__assert_fail@plt+0x6534>
   17830:	cmp	r7, r3
   17834:	beq	1784c <__assert_fail@plt+0x651c>
   17838:	mov	r0, r7
   1783c:	bl	12c88 <__assert_fail@plt+0x1958>
   17840:	ldr	r3, [pc, #20]	; 1785c <__assert_fail@plt+0x652c>
   17844:	add	r2, r3, #8
   17848:	str	r2, [r3]
   1784c:	mov	r2, #1
   17850:	ldr	r3, [pc, #4]	; 1785c <__assert_fail@plt+0x652c>
   17854:	str	r2, [r3, #4]
   17858:	pop	{r4, r5, r6, r7, r8, pc}
   1785c:	andeq	ip, r2, ip, lsr r1
   17860:	andeq	ip, r2, r4, asr #3
   17864:	andeq	ip, r2, r4, asr #2
   17868:	push	{r4, lr}
   1786c:	ldr	r3, [pc, #8]	; 1787c <__assert_fail@plt+0x654c>
   17870:	mvn	r2, #0
   17874:	bl	173a0 <__assert_fail@plt+0x6070>
   17878:	pop	{r4, pc}
   1787c:	andeq	ip, r2, r4, asr #5
   17880:	push	{r4, lr}
   17884:	ldr	r3, [pc, #4]	; 17890 <__assert_fail@plt+0x6560>
   17888:	bl	173a0 <__assert_fail@plt+0x6070>
   1788c:	pop	{r4, pc}
   17890:	andeq	ip, r2, r4, asr #5
   17894:	push	{r4, lr}
   17898:	mov	r1, r0
   1789c:	mov	r0, #0
   178a0:	bl	17868 <__assert_fail@plt+0x6538>
   178a4:	pop	{r4, pc}
   178a8:	push	{r4, lr}
   178ac:	mov	r2, r1
   178b0:	mov	r1, r0
   178b4:	mov	r0, #0
   178b8:	bl	17880 <__assert_fail@plt+0x6550>
   178bc:	pop	{r4, pc}
   178c0:	push	{r4, r5, lr}
   178c4:	sub	sp, sp, #52	; 0x34
   178c8:	mov	r4, r0
   178cc:	mov	r5, r2
   178d0:	mov	r0, sp
   178d4:	bl	160c8 <__assert_fail@plt+0x4d98>
   178d8:	mov	r3, sp
   178dc:	mvn	r2, #0
   178e0:	mov	r1, r5
   178e4:	mov	r0, r4
   178e8:	bl	173a0 <__assert_fail@plt+0x6070>
   178ec:	add	sp, sp, #52	; 0x34
   178f0:	pop	{r4, r5, pc}
   178f4:	push	{r4, r5, r6, lr}
   178f8:	sub	sp, sp, #48	; 0x30
   178fc:	mov	r4, r0
   17900:	mov	r5, r2
   17904:	mov	r6, r3
   17908:	mov	r0, sp
   1790c:	bl	160c8 <__assert_fail@plt+0x4d98>
   17910:	mov	r3, sp
   17914:	mov	r2, r6
   17918:	mov	r1, r5
   1791c:	mov	r0, r4
   17920:	bl	173a0 <__assert_fail@plt+0x6070>
   17924:	add	sp, sp, #48	; 0x30
   17928:	pop	{r4, r5, r6, pc}
   1792c:	push	{r4, lr}
   17930:	mov	r2, r1
   17934:	mov	r1, r0
   17938:	mov	r0, #0
   1793c:	bl	178c0 <__assert_fail@plt+0x6590>
   17940:	pop	{r4, pc}
   17944:	push	{r4, lr}
   17948:	mov	r3, r2
   1794c:	mov	r2, r1
   17950:	mov	r1, r0
   17954:	mov	r0, #0
   17958:	bl	178f4 <__assert_fail@plt+0x65c4>
   1795c:	pop	{r4, pc}
   17960:	push	{r4, r5, r6, lr}
   17964:	sub	sp, sp, #48	; 0x30
   17968:	mov	r4, r0
   1796c:	mov	r5, r1
   17970:	mov	r6, r2
   17974:	mov	ip, sp
   17978:	ldr	lr, [pc, #64]	; 179c0 <__assert_fail@plt+0x6690>
   1797c:	ldm	lr!, {r0, r1, r2, r3}
   17980:	stmia	ip!, {r0, r1, r2, r3}
   17984:	ldm	lr!, {r0, r1, r2, r3}
   17988:	stmia	ip!, {r0, r1, r2, r3}
   1798c:	ldm	lr, {r0, r1, r2, r3}
   17990:	stm	ip, {r0, r1, r2, r3}
   17994:	mov	r2, #1
   17998:	mov	r1, r6
   1799c:	mov	r0, sp
   179a0:	bl	175cc <__assert_fail@plt+0x629c>
   179a4:	mov	r3, sp
   179a8:	mov	r2, r5
   179ac:	mov	r1, r4
   179b0:	mov	r0, #0
   179b4:	bl	173a0 <__assert_fail@plt+0x6070>
   179b8:	add	sp, sp, #48	; 0x30
   179bc:	pop	{r4, r5, r6, pc}
   179c0:	andeq	ip, r2, r4, asr #5
   179c4:	push	{r4, lr}
   179c8:	mov	r2, r1
   179cc:	mvn	r1, #0
   179d0:	bl	17960 <__assert_fail@plt+0x6630>
   179d4:	pop	{r4, pc}
   179d8:	push	{r4, lr}
   179dc:	mov	r1, #58	; 0x3a
   179e0:	bl	179c4 <__assert_fail@plt+0x6694>
   179e4:	pop	{r4, pc}
   179e8:	push	{r4, lr}
   179ec:	mov	r2, #58	; 0x3a
   179f0:	bl	17960 <__assert_fail@plt+0x6630>
   179f4:	pop	{r4, pc}
   179f8:	push	{r4, r5, lr}
   179fc:	sub	sp, sp, #100	; 0x64
   17a00:	mov	r4, r0
   17a04:	mov	r5, r2
   17a08:	mov	r0, sp
   17a0c:	bl	160c8 <__assert_fail@plt+0x4d98>
   17a10:	add	lr, sp, #48	; 0x30
   17a14:	mov	ip, sp
   17a18:	ldm	ip!, {r0, r1, r2, r3}
   17a1c:	stmia	lr!, {r0, r1, r2, r3}
   17a20:	ldm	ip!, {r0, r1, r2, r3}
   17a24:	stmia	lr!, {r0, r1, r2, r3}
   17a28:	ldm	ip, {r0, r1, r2, r3}
   17a2c:	stm	lr, {r0, r1, r2, r3}
   17a30:	mov	r2, #1
   17a34:	mov	r1, #58	; 0x3a
   17a38:	add	r0, sp, #48	; 0x30
   17a3c:	bl	175cc <__assert_fail@plt+0x629c>
   17a40:	add	r3, sp, #48	; 0x30
   17a44:	mvn	r2, #0
   17a48:	mov	r1, r5
   17a4c:	mov	r0, r4
   17a50:	bl	173a0 <__assert_fail@plt+0x6070>
   17a54:	add	sp, sp, #100	; 0x64
   17a58:	pop	{r4, r5, pc}
   17a5c:	push	{r4, r5, r6, r7, lr}
   17a60:	sub	sp, sp, #52	; 0x34
   17a64:	mov	r4, r0
   17a68:	mov	r6, r1
   17a6c:	mov	r7, r2
   17a70:	mov	r5, r3
   17a74:	mov	ip, sp
   17a78:	ldr	lr, [pc, #64]	; 17ac0 <__assert_fail@plt+0x6790>
   17a7c:	ldm	lr!, {r0, r1, r2, r3}
   17a80:	stmia	ip!, {r0, r1, r2, r3}
   17a84:	ldm	lr!, {r0, r1, r2, r3}
   17a88:	stmia	ip!, {r0, r1, r2, r3}
   17a8c:	ldm	lr, {r0, r1, r2, r3}
   17a90:	stm	ip, {r0, r1, r2, r3}
   17a94:	mov	r2, r7
   17a98:	mov	r1, r6
   17a9c:	mov	r0, sp
   17aa0:	bl	17628 <__assert_fail@plt+0x62f8>
   17aa4:	mov	r3, sp
   17aa8:	ldr	r2, [sp, #72]	; 0x48
   17aac:	mov	r1, r5
   17ab0:	mov	r0, r4
   17ab4:	bl	173a0 <__assert_fail@plt+0x6070>
   17ab8:	add	sp, sp, #52	; 0x34
   17abc:	pop	{r4, r5, r6, r7, pc}
   17ac0:	andeq	ip, r2, r4, asr #5
   17ac4:	push	{lr}		; (str lr, [sp, #-4]!)
   17ac8:	sub	sp, sp, #12
   17acc:	mvn	ip, #0
   17ad0:	str	ip, [sp]
   17ad4:	bl	17a5c <__assert_fail@plt+0x672c>
   17ad8:	add	sp, sp, #12
   17adc:	pop	{pc}		; (ldr pc, [sp], #4)
   17ae0:	push	{r4, lr}
   17ae4:	mov	r3, r2
   17ae8:	mov	r2, r1
   17aec:	mov	r1, r0
   17af0:	mov	r0, #0
   17af4:	bl	17ac4 <__assert_fail@plt+0x6794>
   17af8:	pop	{r4, pc}
   17afc:	push	{lr}		; (str lr, [sp, #-4]!)
   17b00:	sub	sp, sp, #12
   17b04:	str	r3, [sp]
   17b08:	mov	r3, r2
   17b0c:	mov	r2, r1
   17b10:	mov	r1, r0
   17b14:	mov	r0, #0
   17b18:	bl	17a5c <__assert_fail@plt+0x672c>
   17b1c:	add	sp, sp, #12
   17b20:	pop	{pc}		; (ldr pc, [sp], #4)
   17b24:	push	{r4, lr}
   17b28:	ldr	r3, [pc, #4]	; 17b34 <__assert_fail@plt+0x6804>
   17b2c:	bl	173a0 <__assert_fail@plt+0x6070>
   17b30:	pop	{r4, pc}
   17b34:	andeq	ip, r2, ip, asr #2
   17b38:	push	{r4, lr}
   17b3c:	mov	r2, r1
   17b40:	mov	r1, r0
   17b44:	mov	r0, #0
   17b48:	bl	17b24 <__assert_fail@plt+0x67f4>
   17b4c:	pop	{r4, pc}
   17b50:	push	{r4, lr}
   17b54:	mvn	r2, #0
   17b58:	bl	17b24 <__assert_fail@plt+0x67f4>
   17b5c:	pop	{r4, pc}
   17b60:	push	{r4, lr}
   17b64:	mov	r1, r0
   17b68:	mov	r0, #0
   17b6c:	bl	17b50 <__assert_fail@plt+0x6820>
   17b70:	pop	{r4, pc}
   17b74:	push	{r4, lr}
   17b78:	sub	sp, sp, #104	; 0x68
   17b7c:	mov	r4, r0
   17b80:	mov	r2, sp
   17b84:	ldr	r1, [pc, #48]	; 17bbc <__assert_fail@plt+0x688c>
   17b88:	mov	r0, #3
   17b8c:	bl	11300 <__lxstat64@plt>
   17b90:	cmp	r0, #0
   17b94:	bne	17bb4 <__assert_fail@plt+0x6884>
   17b98:	ldrd	r2, [sp, #96]	; 0x60
   17b9c:	strd	r2, [r4]
   17ba0:	ldrd	r2, [sp]
   17ba4:	strd	r2, [r4, #8]
   17ba8:	mov	r0, r4
   17bac:	add	sp, sp, #104	; 0x68
   17bb0:	pop	{r4, pc}
   17bb4:	mov	r0, #0
   17bb8:	b	17bac <__assert_fail@plt+0x687c>
   17bbc:	andeq	sl, r1, r0, ror #11
   17bc0:	push	{r4, r5, r6, r7, r8, lr}
   17bc4:	mov	r4, r0
   17bc8:	cmp	r0, #2
   17bcc:	bls	17bd8 <__assert_fail@plt+0x68a8>
   17bd0:	mov	r0, r4
   17bd4:	pop	{r4, r5, r6, r7, r8, pc}
   17bd8:	bl	194a0 <__assert_fail@plt+0x8170>
   17bdc:	mov	r6, r0
   17be0:	bl	111ec <__errno_location@plt>
   17be4:	mov	r5, r0
   17be8:	ldr	r7, [r0]
   17bec:	mov	r0, r4
   17bf0:	bl	112f4 <close@plt>
   17bf4:	str	r7, [r5]
   17bf8:	mov	r4, r6
   17bfc:	b	17bd0 <__assert_fail@plt+0x68a0>
   17c00:	push	{r4, r5, r6, lr}
   17c04:	sub	sp, sp, #32
   17c08:	mov	r4, r0
   17c0c:	ldr	r5, [sp, #48]	; 0x30
   17c10:	ldr	r6, [sp, #52]	; 0x34
   17c14:	cmp	r1, #0
   17c18:	beq	17cd0 <__assert_fail@plt+0x69a0>
   17c1c:	str	r3, [sp, #4]
   17c20:	str	r2, [sp]
   17c24:	mov	r3, r1
   17c28:	ldr	r2, [pc, #940]	; 17fdc <__assert_fail@plt+0x6cac>
   17c2c:	mov	r1, #1
   17c30:	bl	11228 <__fprintf_chk@plt>
   17c34:	mov	r2, #5
   17c38:	ldr	r1, [pc, #928]	; 17fe0 <__assert_fail@plt+0x6cb0>
   17c3c:	mov	r0, #0
   17c40:	bl	110c0 <dcgettext@plt>
   17c44:	ldr	r3, [pc, #920]	; 17fe4 <__assert_fail@plt+0x6cb4>
   17c48:	str	r3, [sp]
   17c4c:	mov	r3, r0
   17c50:	ldr	r2, [pc, #912]	; 17fe8 <__assert_fail@plt+0x6cb8>
   17c54:	mov	r1, #1
   17c58:	mov	r0, r4
   17c5c:	bl	11228 <__fprintf_chk@plt>
   17c60:	mov	r1, r4
   17c64:	mov	r0, #10
   17c68:	bl	110b4 <fputc_unlocked@plt>
   17c6c:	mov	r2, #5
   17c70:	ldr	r1, [pc, #884]	; 17fec <__assert_fail@plt+0x6cbc>
   17c74:	mov	r0, #0
   17c78:	bl	110c0 <dcgettext@plt>
   17c7c:	ldr	r3, [pc, #876]	; 17ff0 <__assert_fail@plt+0x6cc0>
   17c80:	mov	r2, r0
   17c84:	mov	r1, #1
   17c88:	mov	r0, r4
   17c8c:	bl	11228 <__fprintf_chk@plt>
   17c90:	mov	r1, r4
   17c94:	mov	r0, #10
   17c98:	bl	110b4 <fputc_unlocked@plt>
   17c9c:	cmp	r6, #9
   17ca0:	ldrls	pc, [pc, r6, lsl #2]
   17ca4:	b	17f74 <__assert_fail@plt+0x6c44>
   17ca8:	andeq	r7, r1, ip, lsl #26
   17cac:	andeq	r7, r1, r8, ror #25
   17cb0:	andeq	r7, r1, r4, lsl sp
   17cb4:	andeq	r7, r1, r4, asr #26
   17cb8:	andeq	r7, r1, ip, ror sp
   17cbc:			; <UNDEFINED> instruction: 0x00017dbc
   17cc0:	andeq	r7, r1, r4, lsl #28
   17cc4:	andeq	r7, r1, r4, asr lr
   17cc8:	andeq	r7, r1, ip, lsr #29
   17ccc:	andeq	r7, r1, ip, lsl #30
   17cd0:	str	r3, [sp]
   17cd4:	mov	r3, r2
   17cd8:	ldr	r2, [pc, #788]	; 17ff4 <__assert_fail@plt+0x6cc4>
   17cdc:	mov	r1, #1
   17ce0:	bl	11228 <__fprintf_chk@plt>
   17ce4:	b	17c34 <__assert_fail@plt+0x6904>
   17ce8:	mov	r2, #5
   17cec:	ldr	r1, [pc, #772]	; 17ff8 <__assert_fail@plt+0x6cc8>
   17cf0:	mov	r0, #0
   17cf4:	bl	110c0 <dcgettext@plt>
   17cf8:	ldr	r3, [r5]
   17cfc:	mov	r2, r0
   17d00:	mov	r1, #1
   17d04:	mov	r0, r4
   17d08:	bl	11228 <__fprintf_chk@plt>
   17d0c:	add	sp, sp, #32
   17d10:	pop	{r4, r5, r6, pc}
   17d14:	mov	r2, #5
   17d18:	ldr	r1, [pc, #732]	; 17ffc <__assert_fail@plt+0x6ccc>
   17d1c:	mov	r0, #0
   17d20:	bl	110c0 <dcgettext@plt>
   17d24:	ldr	r3, [r5]
   17d28:	ldr	r2, [r5, #4]
   17d2c:	str	r2, [sp]
   17d30:	mov	r2, r0
   17d34:	mov	r1, #1
   17d38:	mov	r0, r4
   17d3c:	bl	11228 <__fprintf_chk@plt>
   17d40:	b	17d0c <__assert_fail@plt+0x69dc>
   17d44:	mov	r2, #5
   17d48:	ldr	r1, [pc, #688]	; 18000 <__assert_fail@plt+0x6cd0>
   17d4c:	mov	r0, #0
   17d50:	bl	110c0 <dcgettext@plt>
   17d54:	ldr	r3, [r5]
   17d58:	ldr	r2, [r5, #8]
   17d5c:	str	r2, [sp, #4]
   17d60:	ldr	r2, [r5, #4]
   17d64:	str	r2, [sp]
   17d68:	mov	r2, r0
   17d6c:	mov	r1, #1
   17d70:	mov	r0, r4
   17d74:	bl	11228 <__fprintf_chk@plt>
   17d78:	b	17d0c <__assert_fail@plt+0x69dc>
   17d7c:	mov	r2, #5
   17d80:	ldr	r1, [pc, #636]	; 18004 <__assert_fail@plt+0x6cd4>
   17d84:	mov	r0, #0
   17d88:	bl	110c0 <dcgettext@plt>
   17d8c:	ldr	r3, [r5]
   17d90:	ldr	r2, [r5, #12]
   17d94:	str	r2, [sp, #8]
   17d98:	ldr	r2, [r5, #8]
   17d9c:	str	r2, [sp, #4]
   17da0:	ldr	r2, [r5, #4]
   17da4:	str	r2, [sp]
   17da8:	mov	r2, r0
   17dac:	mov	r1, #1
   17db0:	mov	r0, r4
   17db4:	bl	11228 <__fprintf_chk@plt>
   17db8:	b	17d0c <__assert_fail@plt+0x69dc>
   17dbc:	mov	r2, #5
   17dc0:	ldr	r1, [pc, #576]	; 18008 <__assert_fail@plt+0x6cd8>
   17dc4:	mov	r0, #0
   17dc8:	bl	110c0 <dcgettext@plt>
   17dcc:	ldr	r3, [r5]
   17dd0:	ldr	r2, [r5, #16]
   17dd4:	str	r2, [sp, #12]
   17dd8:	ldr	r2, [r5, #12]
   17ddc:	str	r2, [sp, #8]
   17de0:	ldr	r2, [r5, #8]
   17de4:	str	r2, [sp, #4]
   17de8:	ldr	r2, [r5, #4]
   17dec:	str	r2, [sp]
   17df0:	mov	r2, r0
   17df4:	mov	r1, #1
   17df8:	mov	r0, r4
   17dfc:	bl	11228 <__fprintf_chk@plt>
   17e00:	b	17d0c <__assert_fail@plt+0x69dc>
   17e04:	mov	r2, #5
   17e08:	ldr	r1, [pc, #508]	; 1800c <__assert_fail@plt+0x6cdc>
   17e0c:	mov	r0, #0
   17e10:	bl	110c0 <dcgettext@plt>
   17e14:	ldr	r3, [r5]
   17e18:	ldr	r2, [r5, #20]
   17e1c:	str	r2, [sp, #16]
   17e20:	ldr	r2, [r5, #16]
   17e24:	str	r2, [sp, #12]
   17e28:	ldr	r2, [r5, #12]
   17e2c:	str	r2, [sp, #8]
   17e30:	ldr	r2, [r5, #8]
   17e34:	str	r2, [sp, #4]
   17e38:	ldr	r2, [r5, #4]
   17e3c:	str	r2, [sp]
   17e40:	mov	r2, r0
   17e44:	mov	r1, #1
   17e48:	mov	r0, r4
   17e4c:	bl	11228 <__fprintf_chk@plt>
   17e50:	b	17d0c <__assert_fail@plt+0x69dc>
   17e54:	mov	r2, #5
   17e58:	ldr	r1, [pc, #432]	; 18010 <__assert_fail@plt+0x6ce0>
   17e5c:	mov	r0, #0
   17e60:	bl	110c0 <dcgettext@plt>
   17e64:	ldr	r3, [r5]
   17e68:	ldr	r2, [r5, #24]
   17e6c:	str	r2, [sp, #20]
   17e70:	ldr	r2, [r5, #20]
   17e74:	str	r2, [sp, #16]
   17e78:	ldr	r2, [r5, #16]
   17e7c:	str	r2, [sp, #12]
   17e80:	ldr	r2, [r5, #12]
   17e84:	str	r2, [sp, #8]
   17e88:	ldr	r2, [r5, #8]
   17e8c:	str	r2, [sp, #4]
   17e90:	ldr	r2, [r5, #4]
   17e94:	str	r2, [sp]
   17e98:	mov	r2, r0
   17e9c:	mov	r1, #1
   17ea0:	mov	r0, r4
   17ea4:	bl	11228 <__fprintf_chk@plt>
   17ea8:	b	17d0c <__assert_fail@plt+0x69dc>
   17eac:	mov	r2, #5
   17eb0:	ldr	r1, [pc, #348]	; 18014 <__assert_fail@plt+0x6ce4>
   17eb4:	mov	r0, #0
   17eb8:	bl	110c0 <dcgettext@plt>
   17ebc:	ldr	r3, [r5]
   17ec0:	ldr	r2, [r5, #28]
   17ec4:	str	r2, [sp, #24]
   17ec8:	ldr	r2, [r5, #24]
   17ecc:	str	r2, [sp, #20]
   17ed0:	ldr	r2, [r5, #20]
   17ed4:	str	r2, [sp, #16]
   17ed8:	ldr	r2, [r5, #16]
   17edc:	str	r2, [sp, #12]
   17ee0:	ldr	r2, [r5, #12]
   17ee4:	str	r2, [sp, #8]
   17ee8:	ldr	r2, [r5, #8]
   17eec:	str	r2, [sp, #4]
   17ef0:	ldr	r2, [r5, #4]
   17ef4:	str	r2, [sp]
   17ef8:	mov	r2, r0
   17efc:	mov	r1, #1
   17f00:	mov	r0, r4
   17f04:	bl	11228 <__fprintf_chk@plt>
   17f08:	b	17d0c <__assert_fail@plt+0x69dc>
   17f0c:	mov	r2, #5
   17f10:	ldr	r1, [pc, #256]	; 18018 <__assert_fail@plt+0x6ce8>
   17f14:	mov	r0, #0
   17f18:	bl	110c0 <dcgettext@plt>
   17f1c:	ldr	r3, [r5]
   17f20:	ldr	r2, [r5, #32]
   17f24:	str	r2, [sp, #28]
   17f28:	ldr	r2, [r5, #28]
   17f2c:	str	r2, [sp, #24]
   17f30:	ldr	r2, [r5, #24]
   17f34:	str	r2, [sp, #20]
   17f38:	ldr	r2, [r5, #20]
   17f3c:	str	r2, [sp, #16]
   17f40:	ldr	r2, [r5, #16]
   17f44:	str	r2, [sp, #12]
   17f48:	ldr	r2, [r5, #12]
   17f4c:	str	r2, [sp, #8]
   17f50:	ldr	r2, [r5, #8]
   17f54:	str	r2, [sp, #4]
   17f58:	ldr	r2, [r5, #4]
   17f5c:	str	r2, [sp]
   17f60:	mov	r2, r0
   17f64:	mov	r1, #1
   17f68:	mov	r0, r4
   17f6c:	bl	11228 <__fprintf_chk@plt>
   17f70:	b	17d0c <__assert_fail@plt+0x69dc>
   17f74:	mov	r2, #5
   17f78:	ldr	r1, [pc, #156]	; 1801c <__assert_fail@plt+0x6cec>
   17f7c:	mov	r0, #0
   17f80:	bl	110c0 <dcgettext@plt>
   17f84:	ldr	r3, [r5]
   17f88:	ldr	r2, [r5, #32]
   17f8c:	str	r2, [sp, #28]
   17f90:	ldr	r2, [r5, #28]
   17f94:	str	r2, [sp, #24]
   17f98:	ldr	r2, [r5, #24]
   17f9c:	str	r2, [sp, #20]
   17fa0:	ldr	r2, [r5, #20]
   17fa4:	str	r2, [sp, #16]
   17fa8:	ldr	r2, [r5, #16]
   17fac:	str	r2, [sp, #12]
   17fb0:	ldr	r2, [r5, #12]
   17fb4:	str	r2, [sp, #8]
   17fb8:	ldr	r2, [r5, #8]
   17fbc:	str	r2, [sp, #4]
   17fc0:	ldr	r2, [r5, #4]
   17fc4:	str	r2, [sp]
   17fc8:	mov	r2, r0
   17fcc:	mov	r1, #1
   17fd0:	mov	r0, r4
   17fd4:	bl	11228 <__fprintf_chk@plt>
   17fd8:	b	17d0c <__assert_fail@plt+0x69dc>
   17fdc:	andeq	sl, r1, r4, ror #24
   17fe0:	andeq	sl, r1, r8, ror ip
   17fe4:	andeq	r0, r0, r6, ror #15
   17fe8:	andeq	sl, r1, r0, asr pc
   17fec:	andeq	sl, r1, ip, ror ip
   17ff0:	andeq	sl, r1, r8, lsr #26
   17ff4:	andeq	sl, r1, r0, ror ip
   17ff8:	andeq	sl, r1, ip, asr #26
   17ffc:	andeq	sl, r1, ip, asr sp
   18000:	andeq	sl, r1, r4, ror sp
   18004:	muleq	r1, r0, sp
   18008:			; <UNDEFINED> instruction: 0x0001adb0
   1800c:	ldrdeq	sl, [r1], -r4
   18010:	strdeq	sl, [r1], -ip
   18014:	andeq	sl, r1, r8, lsr #28
   18018:	andeq	sl, r1, r8, asr lr
   1801c:	andeq	sl, r1, ip, lsl #29
   18020:	push	{r4, r5, lr}
   18024:	sub	sp, sp, #12
   18028:	ldr	r5, [sp, #24]
   1802c:	ldr	ip, [r5]
   18030:	cmp	ip, #0
   18034:	beq	18064 <__assert_fail@plt+0x6d34>
   18038:	mov	lr, r5
   1803c:	mov	ip, #0
   18040:	add	ip, ip, #1
   18044:	ldr	r4, [lr, #4]!
   18048:	cmp	r4, #0
   1804c:	bne	18040 <__assert_fail@plt+0x6d10>
   18050:	str	ip, [sp, #4]
   18054:	str	r5, [sp]
   18058:	bl	17c00 <__assert_fail@plt+0x68d0>
   1805c:	add	sp, sp, #12
   18060:	pop	{r4, r5, pc}
   18064:	mov	ip, #0
   18068:	b	18050 <__assert_fail@plt+0x6d20>
   1806c:	push	{r4, r5, lr}
   18070:	sub	sp, sp, #52	; 0x34
   18074:	ldr	r4, [sp, #64]	; 0x40
   18078:	sub	r4, r4, #4
   1807c:	add	r5, sp, #4
   18080:	mov	ip, #0
   18084:	ldr	lr, [r4, #4]!
   18088:	str	lr, [r5, #4]!
   1808c:	cmp	lr, #0
   18090:	beq	180a0 <__assert_fail@plt+0x6d70>
   18094:	add	ip, ip, #1
   18098:	cmp	ip, #10
   1809c:	bne	18084 <__assert_fail@plt+0x6d54>
   180a0:	str	ip, [sp, #4]
   180a4:	add	ip, sp, #8
   180a8:	str	ip, [sp]
   180ac:	bl	17c00 <__assert_fail@plt+0x68d0>
   180b0:	add	sp, sp, #52	; 0x34
   180b4:	pop	{r4, r5, pc}
   180b8:	push	{r3}		; (str r3, [sp, #-4]!)
   180bc:	push	{lr}		; (str lr, [sp, #-4]!)
   180c0:	sub	sp, sp, #16
   180c4:	add	r3, sp, #24
   180c8:	str	r3, [sp, #12]
   180cc:	str	r3, [sp]
   180d0:	ldr	r3, [sp, #20]
   180d4:	bl	1806c <__assert_fail@plt+0x6d3c>
   180d8:	add	sp, sp, #16
   180dc:	pop	{lr}		; (ldr lr, [sp], #4)
   180e0:	add	sp, sp, #4
   180e4:	bx	lr
   180e8:	push	{r4, lr}
   180ec:	ldr	r3, [pc, #112]	; 18164 <__assert_fail@plt+0x6e34>
   180f0:	ldr	r1, [r3]
   180f4:	mov	r0, #10
   180f8:	bl	110b4 <fputc_unlocked@plt>
   180fc:	mov	r2, #5
   18100:	ldr	r1, [pc, #96]	; 18168 <__assert_fail@plt+0x6e38>
   18104:	mov	r0, #0
   18108:	bl	110c0 <dcgettext@plt>
   1810c:	ldr	r2, [pc, #88]	; 1816c <__assert_fail@plt+0x6e3c>
   18110:	mov	r1, r0
   18114:	mov	r0, #1
   18118:	bl	11210 <__printf_chk@plt>
   1811c:	mov	r2, #5
   18120:	ldr	r1, [pc, #72]	; 18170 <__assert_fail@plt+0x6e40>
   18124:	mov	r0, #0
   18128:	bl	110c0 <dcgettext@plt>
   1812c:	ldr	r3, [pc, #64]	; 18174 <__assert_fail@plt+0x6e44>
   18130:	ldr	r2, [pc, #64]	; 18178 <__assert_fail@plt+0x6e48>
   18134:	mov	r1, r0
   18138:	mov	r0, #1
   1813c:	bl	11210 <__printf_chk@plt>
   18140:	mov	r2, #5
   18144:	ldr	r1, [pc, #48]	; 1817c <__assert_fail@plt+0x6e4c>
   18148:	mov	r0, #0
   1814c:	bl	110c0 <dcgettext@plt>
   18150:	ldr	r2, [pc, #40]	; 18180 <__assert_fail@plt+0x6e50>
   18154:	mov	r1, r0
   18158:	mov	r0, #1
   1815c:	bl	11210 <__printf_chk@plt>
   18160:	pop	{r4, pc}
   18164:	muleq	r2, r4, r1
   18168:	andeq	sl, r1, r8, asr #29
   1816c:	ldrdeq	sl, [r1], -ip
   18170:	strdeq	sl, [r1], -r4
   18174:	andeq	sl, r1, ip, lsr r4
   18178:	andeq	sl, r1, r4, ror #8
   1817c:	andeq	sl, r1, r8, lsl #30
   18180:	andeq	sl, r1, r0, lsr pc
   18184:	push	{r4, lr}
   18188:	bl	18da0 <__assert_fail@plt+0x7a70>
   1818c:	cmp	r0, #0
   18190:	popne	{r4, pc}
   18194:	bl	18728 <__assert_fail@plt+0x73f8>
   18198:	push	{r4, lr}
   1819c:	bl	18da0 <__assert_fail@plt+0x7a70>
   181a0:	cmp	r0, #0
   181a4:	popne	{r4, pc}
   181a8:	bl	18728 <__assert_fail@plt+0x73f8>
   181ac:	push	{r4, lr}
   181b0:	bl	18184 <__assert_fail@plt+0x6e54>
   181b4:	pop	{r4, pc}
   181b8:	push	{r4, r5, r6, lr}
   181bc:	mov	r5, r0
   181c0:	mov	r4, r1
   181c4:	bl	18dd0 <__assert_fail@plt+0x7aa0>
   181c8:	cmp	r0, #0
   181cc:	popne	{r4, r5, r6, pc}
   181d0:	adds	r4, r4, #0
   181d4:	movne	r4, #1
   181d8:	cmp	r5, #0
   181dc:	orreq	r4, r4, #1
   181e0:	cmp	r4, #0
   181e4:	popeq	{r4, r5, r6, pc}
   181e8:	bl	18728 <__assert_fail@plt+0x73f8>
   181ec:	push	{r4, lr}
   181f0:	cmp	r1, #0
   181f4:	orreq	r1, r1, #1
   181f8:	bl	18dd0 <__assert_fail@plt+0x7aa0>
   181fc:	cmp	r0, #0
   18200:	popne	{r4, pc}
   18204:	bl	18728 <__assert_fail@plt+0x73f8>
   18208:	push	{r4, r5, r6, lr}
   1820c:	mov	r6, r0
   18210:	mov	r5, r1
   18214:	mov	r4, r2
   18218:	bl	19454 <__assert_fail@plt+0x8124>
   1821c:	cmp	r0, #0
   18220:	popne	{r4, r5, r6, pc}
   18224:	cmp	r6, #0
   18228:	beq	18238 <__assert_fail@plt+0x6f08>
   1822c:	cmp	r5, #0
   18230:	cmpne	r4, #0
   18234:	popeq	{r4, r5, r6, pc}
   18238:	bl	18728 <__assert_fail@plt+0x73f8>
   1823c:	push	{r4, lr}
   18240:	bl	18208 <__assert_fail@plt+0x6ed8>
   18244:	pop	{r4, pc}
   18248:	push	{r4, lr}
   1824c:	mov	ip, r1
   18250:	mov	r3, r2
   18254:	cmp	r2, #0
   18258:	cmpne	r1, #0
   1825c:	moveq	r3, #1
   18260:	moveq	ip, r3
   18264:	mov	r2, r3
   18268:	mov	r1, ip
   1826c:	bl	19454 <__assert_fail@plt+0x8124>
   18270:	cmp	r0, #0
   18274:	popne	{r4, pc}
   18278:	bl	18728 <__assert_fail@plt+0x73f8>
   1827c:	push	{r4, lr}
   18280:	mov	r2, r1
   18284:	mov	r1, r0
   18288:	mov	r0, #0
   1828c:	bl	18208 <__assert_fail@plt+0x6ed8>
   18290:	pop	{r4, pc}
   18294:	push	{r4, lr}
   18298:	mov	r2, r1
   1829c:	mov	r1, r0
   182a0:	mov	r0, #0
   182a4:	bl	18248 <__assert_fail@plt+0x6f18>
   182a8:	pop	{r4, pc}
   182ac:	push	{r4, r5, r6, r7, r8, lr}
   182b0:	mov	r5, r1
   182b4:	mov	r6, r2
   182b8:	ldr	r4, [r1]
   182bc:	subs	r7, r0, #0
   182c0:	beq	182dc <__assert_fail@plt+0x6fac>
   182c4:	lsr	r2, r4, #1
   182c8:	add	r3, r2, #1
   182cc:	mvn	r3, r3
   182d0:	cmp	r4, r3
   182d4:	bls	18300 <__assert_fail@plt+0x6fd0>
   182d8:	bl	18728 <__assert_fail@plt+0x73f8>
   182dc:	cmp	r4, #0
   182e0:	bne	18308 <__assert_fail@plt+0x6fd8>
   182e4:	mov	r1, r2
   182e8:	mov	r0, #64	; 0x40
   182ec:	bl	195bc <__assert_fail@plt+0x828c>
   182f0:	cmp	r0, #0
   182f4:	movne	r4, r0
   182f8:	addeq	r4, r0, #1
   182fc:	b	18308 <__assert_fail@plt+0x6fd8>
   18300:	add	r4, r4, #1
   18304:	add	r4, r4, r2
   18308:	mov	r2, r6
   1830c:	mov	r1, r4
   18310:	mov	r0, r7
   18314:	bl	18208 <__assert_fail@plt+0x6ed8>
   18318:	str	r4, [r5]
   1831c:	pop	{r4, r5, r6, r7, r8, pc}
   18320:	push	{r4, lr}
   18324:	mov	r2, #1
   18328:	bl	182ac <__assert_fail@plt+0x6f7c>
   1832c:	pop	{r4, pc}
   18330:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18334:	sub	sp, sp, #12
   18338:	mov	fp, r0
   1833c:	mov	sl, r1
   18340:	mov	r9, r2
   18344:	mov	r7, r3
   18348:	ldr	r6, [sp, #48]	; 0x30
   1834c:	ldr	r5, [r1]
   18350:	asrs	r4, r5, #1
   18354:	bmi	184b0 <__assert_fail@plt+0x7180>
   18358:	cmp	r5, #0
   1835c:	blt	184c4 <__assert_fail@plt+0x7194>
   18360:	mvn	r3, #-2147483648	; 0x80000000
   18364:	sub	r3, r3, r4
   18368:	cmp	r5, r3
   1836c:	movle	r3, #0
   18370:	movgt	r3, #1
   18374:	cmp	r3, #0
   18378:	addeq	r4, r4, r5
   1837c:	mvnne	r4, #-2147483648	; 0x80000000
   18380:	mvn	r8, r7
   18384:	lsr	r8, r8, #31
   18388:	cmp	r7, r4
   1838c:	movge	r3, #0
   18390:	andlt	r3, r8, #1
   18394:	cmp	r3, #0
   18398:	movne	r4, r7
   1839c:	cmp	r6, #0
   183a0:	blt	184d8 <__assert_fail@plt+0x71a8>
   183a4:	cmp	r6, #0
   183a8:	beq	18584 <__assert_fail@plt+0x7254>
   183ac:	cmp	r4, #0
   183b0:	blt	18534 <__assert_fail@plt+0x7204>
   183b4:	mov	r1, r6
   183b8:	mvn	r0, #-2147483648	; 0x80000000
   183bc:	bl	197c8 <__assert_fail@plt+0x8498>
   183c0:	cmp	r0, r4
   183c4:	movge	r0, #0
   183c8:	movlt	r0, #1
   183cc:	cmp	r0, #0
   183d0:	mvnne	r3, #-2147483648	; 0x80000000
   183d4:	strne	r3, [sp, #4]
   183d8:	beq	1856c <__assert_fail@plt+0x723c>
   183dc:	mov	r1, r6
   183e0:	ldr	r0, [sp, #4]
   183e4:	bl	197c8 <__assert_fail@plt+0x8498>
   183e8:	mov	r4, r0
   183ec:	mov	r1, r6
   183f0:	ldr	r0, [sp, #4]
   183f4:	bl	199e8 <__assert_fail@plt+0x86b8>
   183f8:	ldr	r3, [sp, #4]
   183fc:	sub	r1, r3, r1
   18400:	cmp	fp, #0
   18404:	moveq	r3, #0
   18408:	streq	r3, [sl]
   1840c:	sub	r3, r4, r5
   18410:	cmp	r3, r9
   18414:	bge	1849c <__assert_fail@plt+0x716c>
   18418:	cmp	r9, #0
   1841c:	blt	18590 <__assert_fail@plt+0x7260>
   18420:	cmp	r5, #0
   18424:	blt	185a4 <__assert_fail@plt+0x7274>
   18428:	mvn	r3, #-2147483648	; 0x80000000
   1842c:	sub	r3, r3, r9
   18430:	cmp	r5, r3
   18434:	movle	r3, #0
   18438:	movgt	r3, #1
   1843c:	cmp	r3, #0
   18440:	bne	1864c <__assert_fail@plt+0x731c>
   18444:	add	r5, r5, r9
   18448:	mov	r4, r5
   1844c:	cmp	r7, r5
   18450:	movge	r7, #0
   18454:	andlt	r7, r8, #1
   18458:	cmp	r7, #0
   1845c:	bne	1864c <__assert_fail@plt+0x731c>
   18460:	cmp	r6, #0
   18464:	blt	185b8 <__assert_fail@plt+0x7288>
   18468:	cmp	r6, #0
   1846c:	beq	18498 <__assert_fail@plt+0x7168>
   18470:	cmp	r5, #0
   18474:	blt	18614 <__assert_fail@plt+0x72e4>
   18478:	mov	r1, r6
   1847c:	mvn	r0, #-2147483648	; 0x80000000
   18480:	bl	197c8 <__assert_fail@plt+0x8498>
   18484:	cmp	r5, r0
   18488:	movle	r0, #0
   1848c:	movgt	r0, #1
   18490:	cmp	r0, #0
   18494:	bne	1864c <__assert_fail@plt+0x731c>
   18498:	mul	r1, r5, r6
   1849c:	mov	r0, fp
   184a0:	bl	181b8 <__assert_fail@plt+0x6e88>
   184a4:	str	r4, [sl]
   184a8:	add	sp, sp, #12
   184ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   184b0:	rsb	r3, r4, #-2147483648	; 0x80000000
   184b4:	cmp	r5, r3
   184b8:	movge	r3, #0
   184bc:	movlt	r3, #1
   184c0:	b	18374 <__assert_fail@plt+0x7044>
   184c4:	rsb	r3, r5, #-2147483648	; 0x80000000
   184c8:	cmp	r4, r3
   184cc:	movge	r3, #0
   184d0:	movlt	r3, #1
   184d4:	b	18374 <__assert_fail@plt+0x7044>
   184d8:	cmp	r4, #0
   184dc:	blt	18504 <__assert_fail@plt+0x71d4>
   184e0:	cmn	r6, #1
   184e4:	beq	18520 <__assert_fail@plt+0x71f0>
   184e8:	mov	r1, r6
   184ec:	mov	r0, #-2147483648	; 0x80000000
   184f0:	bl	197c8 <__assert_fail@plt+0x8498>
   184f4:	cmp	r0, r4
   184f8:	movge	r0, #0
   184fc:	movlt	r0, #1
   18500:	b	183cc <__assert_fail@plt+0x709c>
   18504:	mov	r1, r6
   18508:	mvn	r0, #-2147483648	; 0x80000000
   1850c:	bl	197c8 <__assert_fail@plt+0x8498>
   18510:	cmp	r0, r4
   18514:	movle	r0, #0
   18518:	movgt	r0, #1
   1851c:	b	183cc <__assert_fail@plt+0x709c>
   18520:	add	r0, r4, #-2147483648	; 0x80000000
   18524:	cmp	r0, #0
   18528:	movle	r0, #0
   1852c:	movgt	r0, #1
   18530:	b	183cc <__assert_fail@plt+0x709c>
   18534:	cmn	r4, #1
   18538:	beq	18558 <__assert_fail@plt+0x7228>
   1853c:	mov	r1, r4
   18540:	mov	r0, #-2147483648	; 0x80000000
   18544:	bl	197c8 <__assert_fail@plt+0x8498>
   18548:	cmp	r6, r0
   1854c:	movle	r0, #0
   18550:	movgt	r0, #1
   18554:	b	183cc <__assert_fail@plt+0x709c>
   18558:	add	r0, r6, #-2147483648	; 0x80000000
   1855c:	cmp	r0, #0
   18560:	movle	r0, #0
   18564:	movgt	r0, #1
   18568:	b	183cc <__assert_fail@plt+0x709c>
   1856c:	mul	r1, r6, r4
   18570:	cmp	r1, #63	; 0x3f
   18574:	movle	r3, #64	; 0x40
   18578:	strle	r3, [sp, #4]
   1857c:	bgt	18400 <__assert_fail@plt+0x70d0>
   18580:	b	183dc <__assert_fail@plt+0x70ac>
   18584:	mov	r3, #64	; 0x40
   18588:	str	r3, [sp, #4]
   1858c:	b	183dc <__assert_fail@plt+0x70ac>
   18590:	rsb	r3, r9, #-2147483648	; 0x80000000
   18594:	cmp	r5, r3
   18598:	movge	r3, #0
   1859c:	movlt	r3, #1
   185a0:	b	1843c <__assert_fail@plt+0x710c>
   185a4:	rsb	r3, r5, #-2147483648	; 0x80000000
   185a8:	cmp	r9, r3
   185ac:	movge	r3, #0
   185b0:	movlt	r3, #1
   185b4:	b	1843c <__assert_fail@plt+0x710c>
   185b8:	cmp	r5, #0
   185bc:	blt	185e4 <__assert_fail@plt+0x72b4>
   185c0:	cmn	r6, #1
   185c4:	beq	18600 <__assert_fail@plt+0x72d0>
   185c8:	mov	r1, r6
   185cc:	mov	r0, #-2147483648	; 0x80000000
   185d0:	bl	197c8 <__assert_fail@plt+0x8498>
   185d4:	cmp	r5, r0
   185d8:	movle	r0, #0
   185dc:	movgt	r0, #1
   185e0:	b	18490 <__assert_fail@plt+0x7160>
   185e4:	mov	r1, r6
   185e8:	mvn	r0, #-2147483648	; 0x80000000
   185ec:	bl	197c8 <__assert_fail@plt+0x8498>
   185f0:	cmp	r5, r0
   185f4:	movge	r0, #0
   185f8:	movlt	r0, #1
   185fc:	b	18490 <__assert_fail@plt+0x7160>
   18600:	add	r0, r5, #-2147483648	; 0x80000000
   18604:	cmp	r0, #0
   18608:	movle	r0, #0
   1860c:	movgt	r0, #1
   18610:	b	18490 <__assert_fail@plt+0x7160>
   18614:	cmn	r5, #1
   18618:	beq	18638 <__assert_fail@plt+0x7308>
   1861c:	mov	r1, r5
   18620:	mov	r0, #-2147483648	; 0x80000000
   18624:	bl	197c8 <__assert_fail@plt+0x8498>
   18628:	cmp	r6, r0
   1862c:	movle	r0, #0
   18630:	movgt	r0, #1
   18634:	b	18490 <__assert_fail@plt+0x7160>
   18638:	add	r0, r6, #-2147483648	; 0x80000000
   1863c:	cmp	r0, #0
   18640:	movle	r0, #0
   18644:	movgt	r0, #1
   18648:	b	18490 <__assert_fail@plt+0x7160>
   1864c:	bl	18728 <__assert_fail@plt+0x73f8>
   18650:	push	{r4, lr}
   18654:	bl	18d50 <__assert_fail@plt+0x7a20>
   18658:	cmp	r0, #0
   1865c:	popne	{r4, pc}
   18660:	bl	18728 <__assert_fail@plt+0x73f8>
   18664:	push	{r4, lr}
   18668:	mov	r1, #1
   1866c:	bl	18650 <__assert_fail@plt+0x7320>
   18670:	pop	{r4, pc}
   18674:	push	{r4, lr}
   18678:	bl	18d50 <__assert_fail@plt+0x7a20>
   1867c:	cmp	r0, #0
   18680:	popne	{r4, pc}
   18684:	bl	18728 <__assert_fail@plt+0x73f8>
   18688:	push	{r4, lr}
   1868c:	mov	r1, #1
   18690:	bl	18674 <__assert_fail@plt+0x7344>
   18694:	pop	{r4, pc}
   18698:	push	{r4, r5, r6, lr}
   1869c:	mov	r5, r0
   186a0:	mov	r4, r1
   186a4:	mov	r0, r1
   186a8:	bl	18184 <__assert_fail@plt+0x6e54>
   186ac:	mov	r2, r4
   186b0:	mov	r1, r5
   186b4:	bl	11078 <memcpy@plt>
   186b8:	pop	{r4, r5, r6, pc}
   186bc:	push	{r4, r5, r6, lr}
   186c0:	mov	r5, r0
   186c4:	mov	r4, r1
   186c8:	mov	r0, r1
   186cc:	bl	18198 <__assert_fail@plt+0x6e68>
   186d0:	mov	r2, r4
   186d4:	mov	r1, r5
   186d8:	bl	11078 <memcpy@plt>
   186dc:	pop	{r4, r5, r6, pc}
   186e0:	push	{r4, r5, r6, lr}
   186e4:	mov	r5, r0
   186e8:	mov	r4, r1
   186ec:	add	r0, r1, #1
   186f0:	bl	18198 <__assert_fail@plt+0x6e68>
   186f4:	mov	r2, #0
   186f8:	strb	r2, [r0, r4]
   186fc:	mov	r2, r4
   18700:	mov	r1, r5
   18704:	bl	11078 <memcpy@plt>
   18708:	pop	{r4, r5, r6, pc}
   1870c:	push	{r4, lr}
   18710:	mov	r4, r0
   18714:	bl	111bc <strlen@plt>
   18718:	add	r1, r0, #1
   1871c:	mov	r0, r4
   18720:	bl	18698 <__assert_fail@plt+0x7368>
   18724:	pop	{r4, pc}
   18728:	push	{r4, lr}
   1872c:	ldr	r3, [pc, #40]	; 1875c <__assert_fail@plt+0x742c>
   18730:	ldr	r4, [r3]
   18734:	mov	r2, #5
   18738:	ldr	r1, [pc, #32]	; 18760 <__assert_fail@plt+0x7430>
   1873c:	mov	r0, #0
   18740:	bl	110c0 <dcgettext@plt>
   18744:	mov	r3, r0
   18748:	ldr	r2, [pc, #20]	; 18764 <__assert_fail@plt+0x7434>
   1874c:	mov	r1, #0
   18750:	mov	r0, r4
   18754:	bl	11150 <error@plt>
   18758:	bl	112e8 <abort@plt>
   1875c:	andeq	ip, r2, r8, lsr r1
   18760:	andeq	sl, r1, r0, lsl #31
   18764:	andeq	sl, r1, r0, asr #21
   18768:	push	{r4, lr}
   1876c:	orr	r1, r1, #512	; 0x200
   18770:	bl	141c4 <__assert_fail@plt+0x2e94>
   18774:	cmp	r0, #0
   18778:	popne	{r4, pc}
   1877c:	bl	111ec <__errno_location@plt>
   18780:	ldr	r3, [r0]
   18784:	cmp	r3, #22
   18788:	beq	18790 <__assert_fail@plt+0x7460>
   1878c:	bl	18728 <__assert_fail@plt+0x73f8>
   18790:	ldr	r3, [pc, #12]	; 187a4 <__assert_fail@plt+0x7474>
   18794:	mov	r2, #41	; 0x29
   18798:	ldr	r1, [pc, #8]	; 187a8 <__assert_fail@plt+0x7478>
   1879c:	ldr	r0, [pc, #8]	; 187ac <__assert_fail@plt+0x747c>
   187a0:	bl	11330 <__assert_fail@plt>
   187a4:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   187a8:	andeq	sl, r1, r0, lsr #31
   187ac:	andeq	sl, r1, ip, lsr #31
   187b0:	ldr	r3, [r0, #48]	; 0x30
   187b4:	and	r3, r3, #17
   187b8:	cmp	r3, #16
   187bc:	beq	187e0 <__assert_fail@plt+0x74b0>
   187c0:	cmp	r3, #17
   187c4:	beq	187d0 <__assert_fail@plt+0x74a0>
   187c8:	mov	r0, #0
   187cc:	bx	lr
   187d0:	ldr	r0, [r1, #48]	; 0x30
   187d4:	adds	r0, r0, #0
   187d8:	movne	r0, #1
   187dc:	bx	lr
   187e0:	mov	r0, #1
   187e4:	bx	lr
   187e8:	push	{r4, r5, r6, lr}
   187ec:	mov	r5, r0
   187f0:	subs	r4, r1, #0
   187f4:	blt	18848 <__assert_fail@plt+0x7518>
   187f8:	cmp	r4, #0
   187fc:	moveq	r3, #0
   18800:	beq	1882c <__assert_fail@plt+0x74fc>
   18804:	mov	r2, r4
   18808:	asr	r3, r4, #31
   1880c:	mvn	r0, #0
   18810:	mvn	r1, #0
   18814:	bl	19a08 <__assert_fail@plt+0x86d8>
   18818:	ldrd	r2, [r5]
   1881c:	cmp	r1, r3
   18820:	cmpeq	r0, r2
   18824:	movcc	r3, #1
   18828:	movcs	r3, #0
   1882c:	cmp	r3, #0
   18830:	beq	18868 <__assert_fail@plt+0x7538>
   18834:	mvn	r2, #0
   18838:	mvn	r3, #0
   1883c:	strd	r2, [r5]
   18840:	mov	r0, #1
   18844:	pop	{r4, r5, r6, pc}
   18848:	mov	r1, r4
   1884c:	mov	r0, #0
   18850:	bl	197c8 <__assert_fail@plt+0x8498>
   18854:	ldrd	r2, [r5]
   18858:	orrs	r3, r2, r3
   1885c:	movne	r3, #1
   18860:	moveq	r3, #0
   18864:	b	1882c <__assert_fail@plt+0x74fc>
   18868:	asr	r3, r4, #31
   1886c:	ldr	r1, [r5, #4]
   18870:	ldr	r2, [r5]
   18874:	mul	r3, r3, r2
   18878:	mla	r1, r4, r1, r3
   1887c:	umull	r2, r3, r2, r4
   18880:	add	r3, r1, r3
   18884:	strd	r2, [r5]
   18888:	mov	r0, #0
   1888c:	pop	{r4, r5, r6, pc}
   18890:	push	{r4, r5, r6, r7, r8, lr}
   18894:	subs	r4, r2, #0
   18898:	beq	188c8 <__assert_fail@plt+0x7598>
   1889c:	mov	r7, r1
   188a0:	mov	r6, r0
   188a4:	mov	r5, #0
   188a8:	mov	r1, r7
   188ac:	mov	r0, r6
   188b0:	bl	187e8 <__assert_fail@plt+0x74b8>
   188b4:	orr	r5, r5, r0
   188b8:	subs	r4, r4, #1
   188bc:	bne	188a8 <__assert_fail@plt+0x7578>
   188c0:	mov	r0, r5
   188c4:	pop	{r4, r5, r6, r7, r8, pc}
   188c8:	mov	r5, #0
   188cc:	b	188c0 <__assert_fail@plt+0x7590>
   188d0:	push	{r4, r5, r6, r7, r8, r9, lr}
   188d4:	sub	sp, sp, #20
   188d8:	cmp	r2, #36	; 0x24
   188dc:	bhi	1891c <__assert_fail@plt+0x75ec>
   188e0:	mov	r5, r0
   188e4:	mov	r6, r1
   188e8:	mov	r7, r2
   188ec:	mov	r9, r3
   188f0:	cmp	r1, #0
   188f4:	addeq	r6, sp, #12
   188f8:	bl	111ec <__errno_location@plt>
   188fc:	mov	r8, r0
   18900:	mov	r3, #0
   18904:	str	r3, [r0]
   18908:	ldrb	r4, [r5]
   1890c:	bl	111a4 <__ctype_b_loc@plt>
   18910:	ldr	r1, [r0]
   18914:	mov	r2, r5
   18918:	b	18934 <__assert_fail@plt+0x7604>
   1891c:	ldr	r3, [pc, #1056]	; 18d44 <__assert_fail@plt+0x7a14>
   18920:	mov	r2, #85	; 0x55
   18924:	ldr	r1, [pc, #1052]	; 18d48 <__assert_fail@plt+0x7a18>
   18928:	ldr	r0, [pc, #1052]	; 18d4c <__assert_fail@plt+0x7a1c>
   1892c:	bl	11330 <__assert_fail@plt>
   18930:	ldrb	r4, [r2, #1]!
   18934:	lsl	r3, r4, #1
   18938:	ldrh	r3, [r1, r3]
   1893c:	tst	r3, #8192	; 0x2000
   18940:	bne	18930 <__assert_fail@plt+0x7600>
   18944:	cmp	r4, #45	; 0x2d
   18948:	moveq	r4, #4
   1894c:	bne	1895c <__assert_fail@plt+0x762c>
   18950:	mov	r0, r4
   18954:	add	sp, sp, #20
   18958:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1895c:	mov	r3, #0
   18960:	mov	r2, r7
   18964:	mov	r1, r6
   18968:	mov	r0, r5
   1896c:	bl	11084 <__strtoull_internal@plt>
   18970:	strd	r0, [sp]
   18974:	ldr	r7, [r6]
   18978:	cmp	r5, r7
   1897c:	beq	189a0 <__assert_fail@plt+0x7670>
   18980:	ldr	r3, [r8]
   18984:	cmp	r3, #0
   18988:	beq	189e8 <__assert_fail@plt+0x76b8>
   1898c:	cmp	r3, #34	; 0x22
   18990:	moveq	r4, #1
   18994:	beq	189ec <__assert_fail@plt+0x76bc>
   18998:	mov	r4, #4
   1899c:	b	18950 <__assert_fail@plt+0x7620>
   189a0:	ldr	r3, [sp, #48]	; 0x30
   189a4:	cmp	r3, #0
   189a8:	moveq	r4, #4
   189ac:	beq	18950 <__assert_fail@plt+0x7620>
   189b0:	ldrb	r1, [r7]
   189b4:	cmp	r1, #0
   189b8:	moveq	r4, #4
   189bc:	beq	18950 <__assert_fail@plt+0x7620>
   189c0:	mov	r0, r3
   189c4:	bl	111c8 <strchr@plt>
   189c8:	cmp	r0, #0
   189cc:	moveq	r4, #4
   189d0:	beq	18950 <__assert_fail@plt+0x7620>
   189d4:	mov	r2, #1
   189d8:	mov	r3, #0
   189dc:	strd	r2, [sp]
   189e0:	mov	r4, #0
   189e4:	b	189f8 <__assert_fail@plt+0x76c8>
   189e8:	mov	r4, #0
   189ec:	ldr	r3, [sp, #48]	; 0x30
   189f0:	cmp	r3, #0
   189f4:	beq	18ae8 <__assert_fail@plt+0x77b8>
   189f8:	ldrb	r5, [r7]
   189fc:	cmp	r5, #0
   18a00:	beq	18c80 <__assert_fail@plt+0x7950>
   18a04:	mov	r1, r5
   18a08:	ldr	r0, [sp, #48]	; 0x30
   18a0c:	bl	111c8 <strchr@plt>
   18a10:	cmp	r0, #0
   18a14:	beq	18af0 <__assert_fail@plt+0x77c0>
   18a18:	sub	r3, r5, #69	; 0x45
   18a1c:	cmp	r3, #47	; 0x2f
   18a20:	ldrls	pc, [pc, r3, lsl #2]
   18a24:	b	18b5c <__assert_fail@plt+0x782c>
   18a28:	andeq	r8, r1, r0, lsl #22
   18a2c:	andeq	r8, r1, ip, asr fp
   18a30:	andeq	r8, r1, r0, lsl #22
   18a34:	andeq	r8, r1, ip, asr fp
   18a38:	andeq	r8, r1, ip, asr fp
   18a3c:	andeq	r8, r1, ip, asr fp
   18a40:	andeq	r8, r1, r0, lsl #22
   18a44:	andeq	r8, r1, ip, asr fp
   18a48:	andeq	r8, r1, r0, lsl #22
   18a4c:	andeq	r8, r1, ip, asr fp
   18a50:	andeq	r8, r1, ip, asr fp
   18a54:	andeq	r8, r1, r0, lsl #22
   18a58:	andeq	r8, r1, ip, asr fp
   18a5c:	andeq	r8, r1, ip, asr fp
   18a60:	andeq	r8, r1, ip, asr fp
   18a64:	andeq	r8, r1, r0, lsl #22
   18a68:	andeq	r8, r1, ip, asr fp
   18a6c:	andeq	r8, r1, ip, asr fp
   18a70:	andeq	r8, r1, ip, asr fp
   18a74:	andeq	r8, r1, ip, asr fp
   18a78:	andeq	r8, r1, r0, lsl #22
   18a7c:	andeq	r8, r1, r0, lsl #22
   18a80:	andeq	r8, r1, ip, asr fp
   18a84:	andeq	r8, r1, ip, asr fp
   18a88:	andeq	r8, r1, ip, asr fp
   18a8c:	andeq	r8, r1, ip, asr fp
   18a90:	andeq	r8, r1, ip, asr fp
   18a94:	andeq	r8, r1, ip, asr fp
   18a98:	andeq	r8, r1, ip, asr fp
   18a9c:	andeq	r8, r1, ip, asr fp
   18aa0:	andeq	r8, r1, ip, asr fp
   18aa4:	andeq	r8, r1, ip, asr fp
   18aa8:	andeq	r8, r1, ip, asr fp
   18aac:	andeq	r8, r1, ip, asr fp
   18ab0:	andeq	r8, r1, r0, lsl #22
   18ab4:	andeq	r8, r1, ip, asr fp
   18ab8:	andeq	r8, r1, ip, asr fp
   18abc:	andeq	r8, r1, ip, asr fp
   18ac0:	andeq	r8, r1, r0, lsl #22
   18ac4:	andeq	r8, r1, ip, asr fp
   18ac8:	andeq	r8, r1, r0, lsl #22
   18acc:	andeq	r8, r1, ip, asr fp
   18ad0:	andeq	r8, r1, ip, asr fp
   18ad4:	andeq	r8, r1, ip, asr fp
   18ad8:	andeq	r8, r1, ip, asr fp
   18adc:	andeq	r8, r1, ip, asr fp
   18ae0:	andeq	r8, r1, ip, asr fp
   18ae4:	andeq	r8, r1, r0, lsl #22
   18ae8:	strd	r0, [r9]
   18aec:	b	18950 <__assert_fail@plt+0x7620>
   18af0:	ldrd	r2, [sp]
   18af4:	strd	r2, [r9]
   18af8:	orr	r4, r4, #2
   18afc:	b	18950 <__assert_fail@plt+0x7620>
   18b00:	mov	r1, #48	; 0x30
   18b04:	ldr	r0, [sp, #48]	; 0x30
   18b08:	bl	111c8 <strchr@plt>
   18b0c:	cmp	r0, #0
   18b10:	beq	18c4c <__assert_fail@plt+0x791c>
   18b14:	ldrb	r3, [r7, #1]
   18b18:	cmp	r3, #68	; 0x44
   18b1c:	beq	18b38 <__assert_fail@plt+0x7808>
   18b20:	cmp	r3, #105	; 0x69
   18b24:	beq	18b44 <__assert_fail@plt+0x7814>
   18b28:	cmp	r3, #66	; 0x42
   18b2c:	movne	r7, #1
   18b30:	movne	r1, #1024	; 0x400
   18b34:	bne	18b64 <__assert_fail@plt+0x7834>
   18b38:	mov	r7, #2
   18b3c:	mov	r1, #1000	; 0x3e8
   18b40:	b	18b64 <__assert_fail@plt+0x7834>
   18b44:	ldrb	r7, [r7, #2]
   18b48:	cmp	r7, #66	; 0x42
   18b4c:	movne	r7, #1
   18b50:	moveq	r7, #3
   18b54:	mov	r1, #1024	; 0x400
   18b58:	b	18b64 <__assert_fail@plt+0x7834>
   18b5c:	mov	r7, #1
   18b60:	mov	r1, #1024	; 0x400
   18b64:	sub	r5, r5, #66	; 0x42
   18b68:	cmp	r5, #53	; 0x35
   18b6c:	ldrls	pc, [pc, r5, lsl #2]
   18b70:	b	18d2c <__assert_fail@plt+0x79fc>
   18b74:	andeq	r8, r1, ip, lsl #25
   18b78:	andeq	r8, r1, ip, lsr #26
   18b7c:	andeq	r8, r1, ip, lsr #26
   18b80:	muleq	r1, ip, ip
   18b84:	andeq	r8, r1, ip, lsr #26
   18b88:	andeq	r8, r1, ip, lsr #25
   18b8c:	andeq	r8, r1, ip, lsr #26
   18b90:	andeq	r8, r1, ip, lsr #26
   18b94:	andeq	r8, r1, ip, lsr #26
   18b98:			; <UNDEFINED> instruction: 0x00018cbc
   18b9c:	andeq	r8, r1, ip, lsr #26
   18ba0:	andeq	r8, r1, ip, asr #25
   18ba4:	andeq	r8, r1, ip, lsr #26
   18ba8:	andeq	r8, r1, ip, lsr #26
   18bac:	ldrdeq	r8, [r1], -ip
   18bb0:	andeq	r8, r1, ip, lsr #26
   18bb4:	andeq	r8, r1, ip, lsr #26
   18bb8:	andeq	r8, r1, ip, lsr #26
   18bbc:	andeq	r8, r1, ip, ror #25
   18bc0:	andeq	r8, r1, ip, lsr #26
   18bc4:	andeq	r8, r1, ip, lsr #26
   18bc8:	andeq	r8, r1, ip, lsr #26
   18bcc:	andeq	r8, r1, ip, lsr #26
   18bd0:	andeq	r8, r1, ip, lsl #26
   18bd4:	andeq	r8, r1, ip, lsl sp
   18bd8:	andeq	r8, r1, ip, lsr #26
   18bdc:	andeq	r8, r1, ip, lsr #26
   18be0:	andeq	r8, r1, ip, lsr #26
   18be4:	andeq	r8, r1, ip, lsr #26
   18be8:	andeq	r8, r1, ip, lsr #26
   18bec:	andeq	r8, r1, ip, lsr #26
   18bf0:	andeq	r8, r1, ip, lsr #26
   18bf4:	andeq	r8, r1, r8, asr ip
   18bf8:	andeq	r8, r1, ip, lsr sp
   18bfc:	andeq	r8, r1, ip, lsr #26
   18c00:	andeq	r8, r1, ip, lsr #26
   18c04:	andeq	r8, r1, ip, lsr #26
   18c08:	andeq	r8, r1, ip, lsr #25
   18c0c:	andeq	r8, r1, ip, lsr #26
   18c10:	andeq	r8, r1, ip, lsr #26
   18c14:	andeq	r8, r1, ip, lsr #26
   18c18:			; <UNDEFINED> instruction: 0x00018cbc
   18c1c:	andeq	r8, r1, ip, lsr #26
   18c20:	andeq	r8, r1, ip, asr #25
   18c24:	andeq	r8, r1, ip, lsr #26
   18c28:	andeq	r8, r1, ip, lsr #26
   18c2c:	andeq	r8, r1, ip, lsr #26
   18c30:	andeq	r8, r1, ip, lsr #26
   18c34:	andeq	r8, r1, ip, lsr #26
   18c38:	andeq	r8, r1, ip, lsr #26
   18c3c:	andeq	r8, r1, ip, ror #25
   18c40:	andeq	r8, r1, ip, lsr #26
   18c44:	andeq	r8, r1, ip, lsr #26
   18c48:	strdeq	r8, [r1], -ip
   18c4c:	mov	r7, #1
   18c50:	mov	r1, #1024	; 0x400
   18c54:	b	18b64 <__assert_fail@plt+0x7834>
   18c58:	mov	r1, #512	; 0x200
   18c5c:	mov	r0, sp
   18c60:	bl	187e8 <__assert_fail@plt+0x74b8>
   18c64:	orr	r4, r4, r0
   18c68:	ldr	r3, [r6]
   18c6c:	add	r2, r3, r7
   18c70:	str	r2, [r6]
   18c74:	ldrb	r3, [r3, r7]
   18c78:	cmp	r3, #0
   18c7c:	orrne	r4, r4, #2
   18c80:	ldrd	r2, [sp]
   18c84:	strd	r2, [r9]
   18c88:	b	18950 <__assert_fail@plt+0x7620>
   18c8c:	mov	r1, #1024	; 0x400
   18c90:	mov	r0, sp
   18c94:	bl	187e8 <__assert_fail@plt+0x74b8>
   18c98:	b	18c64 <__assert_fail@plt+0x7934>
   18c9c:	mov	r2, #6
   18ca0:	mov	r0, sp
   18ca4:	bl	18890 <__assert_fail@plt+0x7560>
   18ca8:	b	18c64 <__assert_fail@plt+0x7934>
   18cac:	mov	r2, #3
   18cb0:	mov	r0, sp
   18cb4:	bl	18890 <__assert_fail@plt+0x7560>
   18cb8:	b	18c64 <__assert_fail@plt+0x7934>
   18cbc:	mov	r2, #1
   18cc0:	mov	r0, sp
   18cc4:	bl	18890 <__assert_fail@plt+0x7560>
   18cc8:	b	18c64 <__assert_fail@plt+0x7934>
   18ccc:	mov	r2, #2
   18cd0:	mov	r0, sp
   18cd4:	bl	18890 <__assert_fail@plt+0x7560>
   18cd8:	b	18c64 <__assert_fail@plt+0x7934>
   18cdc:	mov	r2, #5
   18ce0:	mov	r0, sp
   18ce4:	bl	18890 <__assert_fail@plt+0x7560>
   18ce8:	b	18c64 <__assert_fail@plt+0x7934>
   18cec:	mov	r2, #4
   18cf0:	mov	r0, sp
   18cf4:	bl	18890 <__assert_fail@plt+0x7560>
   18cf8:	b	18c64 <__assert_fail@plt+0x7934>
   18cfc:	mov	r1, #2
   18d00:	mov	r0, sp
   18d04:	bl	187e8 <__assert_fail@plt+0x74b8>
   18d08:	b	18c64 <__assert_fail@plt+0x7934>
   18d0c:	mov	r2, #8
   18d10:	mov	r0, sp
   18d14:	bl	18890 <__assert_fail@plt+0x7560>
   18d18:	b	18c64 <__assert_fail@plt+0x7934>
   18d1c:	mov	r2, #7
   18d20:	mov	r0, sp
   18d24:	bl	18890 <__assert_fail@plt+0x7560>
   18d28:	b	18c64 <__assert_fail@plt+0x7934>
   18d2c:	ldrd	r2, [sp]
   18d30:	strd	r2, [r9]
   18d34:	orr	r4, r4, #2
   18d38:	b	18950 <__assert_fail@plt+0x7620>
   18d3c:	mov	r0, #0
   18d40:	b	18c64 <__assert_fail@plt+0x7934>
   18d44:			; <UNDEFINED> instruction: 0x0001afbc
   18d48:	andeq	sl, r1, r8, asr #31
   18d4c:	ldrdeq	sl, [r1], -r8
   18d50:	push	{r4, lr}
   18d54:	mov	r2, r0
   18d58:	mov	r3, r1
   18d5c:	cmp	r1, #0
   18d60:	cmpne	r0, #0
   18d64:	moveq	r3, #1
   18d68:	moveq	r2, r3
   18d6c:	umull	r0, r1, r2, r3
   18d70:	cmp	r0, #0
   18d74:	cmpge	r1, #0
   18d78:	bne	18d8c <__assert_fail@plt+0x7a5c>
   18d7c:	mov	r1, r3
   18d80:	mov	r0, r2
   18d84:	bl	10ff4 <calloc@plt>
   18d88:	pop	{r4, pc}
   18d8c:	bl	111ec <__errno_location@plt>
   18d90:	mov	r3, #12
   18d94:	str	r3, [r0]
   18d98:	mov	r0, #0
   18d9c:	pop	{r4, pc}
   18da0:	push	{r4, lr}
   18da4:	cmp	r0, #0
   18da8:	moveq	r0, #1
   18dac:	cmp	r0, #0
   18db0:	blt	18dbc <__assert_fail@plt+0x7a8c>
   18db4:	bl	11168 <malloc@plt>
   18db8:	pop	{r4, pc}
   18dbc:	bl	111ec <__errno_location@plt>
   18dc0:	mov	r3, #12
   18dc4:	str	r3, [r0]
   18dc8:	mov	r0, #0
   18dcc:	pop	{r4, pc}
   18dd0:	push	{r4, lr}
   18dd4:	cmp	r0, #0
   18dd8:	beq	18df4 <__assert_fail@plt+0x7ac4>
   18ddc:	cmp	r1, #0
   18de0:	beq	18e00 <__assert_fail@plt+0x7ad0>
   18de4:	cmp	r1, #0
   18de8:	blt	18e0c <__assert_fail@plt+0x7adc>
   18dec:	bl	110cc <realloc@plt>
   18df0:	pop	{r4, pc}
   18df4:	mov	r0, r1
   18df8:	bl	18da0 <__assert_fail@plt+0x7a70>
   18dfc:	pop	{r4, pc}
   18e00:	bl	12c88 <__assert_fail@plt+0x1958>
   18e04:	mov	r0, #0
   18e08:	pop	{r4, pc}
   18e0c:	bl	111ec <__errno_location@plt>
   18e10:	mov	r3, #12
   18e14:	str	r3, [r0]
   18e18:	mov	r0, #0
   18e1c:	pop	{r4, pc}
   18e20:	push	{r4, r5, r6, lr}
   18e24:	mov	r5, r0
   18e28:	bl	11138 <__fpending@plt>
   18e2c:	mov	r6, r0
   18e30:	ldr	r4, [r5]
   18e34:	and	r4, r4, #32
   18e38:	mov	r0, r5
   18e3c:	bl	18f80 <__assert_fail@plt+0x7c50>
   18e40:	cmp	r4, #0
   18e44:	bne	18e6c <__assert_fail@plt+0x7b3c>
   18e48:	cmp	r0, #0
   18e4c:	popeq	{r4, r5, r6, pc}
   18e50:	cmp	r6, #0
   18e54:	bne	18e88 <__assert_fail@plt+0x7b58>
   18e58:	bl	111ec <__errno_location@plt>
   18e5c:	ldr	r0, [r0]
   18e60:	subs	r0, r0, #9
   18e64:	mvnne	r0, #0
   18e68:	pop	{r4, r5, r6, pc}
   18e6c:	cmp	r0, #0
   18e70:	bne	18e90 <__assert_fail@plt+0x7b60>
   18e74:	bl	111ec <__errno_location@plt>
   18e78:	mov	r3, #0
   18e7c:	str	r3, [r0]
   18e80:	mvn	r0, #0
   18e84:	pop	{r4, r5, r6, pc}
   18e88:	mvn	r0, #0
   18e8c:	pop	{r4, r5, r6, pc}
   18e90:	mvn	r0, #0
   18e94:	pop	{r4, r5, r6, pc}
   18e98:	mov	r2, #0
   18e9c:	mov	r3, #0
   18ea0:	strd	r2, [r0, #16]
   18ea4:	ldr	r3, [pc, #4]	; 18eb0 <__assert_fail@plt+0x7b80>
   18ea8:	str	r3, [r0, #24]
   18eac:	bx	lr
   18eb0:	addseq	pc, r5, r6, lsl r6	; <UNPREDICTABLE>
   18eb4:	push	{r4, r5, r6, r7, r8, lr}
   18eb8:	ldr	r2, [r0, #24]
   18ebc:	ldr	r3, [pc, #172]	; 18f70 <__assert_fail@plt+0x7c40>
   18ec0:	cmp	r2, r3
   18ec4:	bne	18f0c <__assert_fail@plt+0x7bdc>
   18ec8:	ldrd	r6, [r0, #16]
   18ecc:	orrs	r3, r6, r7
   18ed0:	beq	18f4c <__assert_fail@plt+0x7c1c>
   18ed4:	ldrd	r4, [r1, #96]	; 0x60
   18ed8:	ldrd	r2, [r0]
   18edc:	cmp	r5, r3
   18ee0:	cmpeq	r4, r2
   18ee4:	beq	18f20 <__assert_fail@plt+0x7bf0>
   18ee8:	adds	r2, r6, #1
   18eec:	adc	r3, r7, #0
   18ef0:	strd	r2, [r0, #16]
   18ef4:	and	r6, r6, r2
   18ef8:	and	r7, r7, r3
   18efc:	orrs	ip, r6, r7
   18f00:	beq	18f3c <__assert_fail@plt+0x7c0c>
   18f04:	mov	r0, #0
   18f08:	pop	{r4, r5, r6, r7, r8, pc}
   18f0c:	ldr	r3, [pc, #96]	; 18f74 <__assert_fail@plt+0x7c44>
   18f10:	mov	r2, #60	; 0x3c
   18f14:	ldr	r1, [pc, #92]	; 18f78 <__assert_fail@plt+0x7c48>
   18f18:	ldr	r0, [pc, #92]	; 18f7c <__assert_fail@plt+0x7c4c>
   18f1c:	bl	11330 <__assert_fail@plt>
   18f20:	ldrd	r4, [r1]
   18f24:	ldrd	r2, [r0, #8]
   18f28:	cmp	r5, r3
   18f2c:	cmpeq	r4, r2
   18f30:	bne	18ee8 <__assert_fail@plt+0x7bb8>
   18f34:	mov	r0, #1
   18f38:	pop	{r4, r5, r6, r7, r8, pc}
   18f3c:	orrs	r3, r2, r3
   18f40:	bne	18f58 <__assert_fail@plt+0x7c28>
   18f44:	mov	r0, #1
   18f48:	pop	{r4, r5, r6, r7, r8, pc}
   18f4c:	mov	r2, #1
   18f50:	mov	r3, #0
   18f54:	strd	r2, [r0, #16]
   18f58:	ldrd	r2, [r1]
   18f5c:	strd	r2, [r0, #8]
   18f60:	ldrd	r2, [r1, #96]	; 0x60
   18f64:	strd	r2, [r0]
   18f68:	mov	r0, #0
   18f6c:	pop	{r4, r5, r6, r7, r8, pc}
   18f70:	addseq	pc, r5, r6, lsl r6	; <UNPREDICTABLE>
   18f74:	andeq	fp, r1, r0
   18f78:	andeq	fp, r1, ip
   18f7c:	andeq	fp, r1, r0, lsr #32
   18f80:	push	{r4, r5, r6, lr}
   18f84:	sub	sp, sp, #8
   18f88:	mov	r4, r0
   18f8c:	bl	1121c <fileno@plt>
   18f90:	cmp	r0, #0
   18f94:	blt	1900c <__assert_fail@plt+0x7cdc>
   18f98:	mov	r0, r4
   18f9c:	bl	11180 <__freading@plt>
   18fa0:	cmp	r0, #0
   18fa4:	beq	18fd8 <__assert_fail@plt+0x7ca8>
   18fa8:	mov	r0, r4
   18fac:	bl	1121c <fileno@plt>
   18fb0:	mov	r3, #1
   18fb4:	str	r3, [sp]
   18fb8:	mov	r2, #0
   18fbc:	mov	r3, #0
   18fc0:	bl	11114 <lseek64@plt>
   18fc4:	mvn	r2, #0
   18fc8:	mvn	r3, #0
   18fcc:	cmp	r1, r3
   18fd0:	cmpeq	r0, r2
   18fd4:	beq	19018 <__assert_fail@plt+0x7ce8>
   18fd8:	mov	r0, r4
   18fdc:	bl	192bc <__assert_fail@plt+0x7f8c>
   18fe0:	cmp	r0, #0
   18fe4:	beq	19018 <__assert_fail@plt+0x7ce8>
   18fe8:	bl	111ec <__errno_location@plt>
   18fec:	mov	r5, r0
   18ff0:	ldr	r6, [r0]
   18ff4:	mov	r0, r4
   18ff8:	bl	11234 <fclose@plt>
   18ffc:	cmp	r6, #0
   19000:	strne	r6, [r5]
   19004:	mvnne	r0, #0
   19008:	b	19020 <__assert_fail@plt+0x7cf0>
   1900c:	mov	r0, r4
   19010:	bl	11234 <fclose@plt>
   19014:	b	19020 <__assert_fail@plt+0x7cf0>
   19018:	mov	r0, r4
   1901c:	bl	11234 <fclose@plt>
   19020:	add	sp, sp, #8
   19024:	pop	{r4, r5, r6, pc}
   19028:	push	{r1, r2, r3}
   1902c:	push	{r4, r5, r6, lr}
   19030:	sub	sp, sp, #12
   19034:	mov	r5, r0
   19038:	ldr	r1, [sp, #28]
   1903c:	add	r3, sp, #32
   19040:	str	r3, [sp, #4]
   19044:	cmp	r1, #0
   19048:	beq	19090 <__assert_fail@plt+0x7d60>
   1904c:	ldr	r3, [pc, #540]	; 19270 <__assert_fail@plt+0x7f40>
   19050:	cmp	r1, r3
   19054:	beq	190c0 <__assert_fail@plt+0x7d90>
   19058:	cmp	r1, #11
   1905c:	beq	19260 <__assert_fail@plt+0x7f30>
   19060:	bgt	191ec <__assert_fail@plt+0x7ebc>
   19064:	cmp	r1, #3
   19068:	beq	19260 <__assert_fail@plt+0x7f30>
   1906c:	ble	191ac <__assert_fail@plt+0x7e7c>
   19070:	cmp	r1, #8
   19074:	beq	191cc <__assert_fail@plt+0x7e9c>
   19078:	ble	191c4 <__assert_fail@plt+0x7e94>
   1907c:	cmp	r1, #9
   19080:	beq	19260 <__assert_fail@plt+0x7f30>
   19084:	cmp	r1, #10
   19088:	bne	19224 <__assert_fail@plt+0x7ef4>
   1908c:	b	191cc <__assert_fail@plt+0x7e9c>
   19090:	ldr	r3, [sp, #4]
   19094:	add	r2, r3, #4
   19098:	str	r2, [sp, #4]
   1909c:	ldr	r2, [r3]
   190a0:	mov	r1, #0
   190a4:	bl	1124c <fcntl64@plt>
   190a8:	mov	r4, r0
   190ac:	mov	r0, r4
   190b0:	add	sp, sp, #12
   190b4:	pop	{r4, r5, r6, lr}
   190b8:	add	sp, sp, #12
   190bc:	bx	lr
   190c0:	ldr	r3, [sp, #4]
   190c4:	add	r2, r3, #4
   190c8:	str	r2, [sp, #4]
   190cc:	ldr	r6, [r3]
   190d0:	ldr	r3, [pc, #412]	; 19274 <__assert_fail@plt+0x7f44>
   190d4:	ldr	r3, [r3]
   190d8:	cmp	r3, #0
   190dc:	blt	1913c <__assert_fail@plt+0x7e0c>
   190e0:	mov	r2, r6
   190e4:	ldr	r1, [pc, #388]	; 19270 <__assert_fail@plt+0x7f40>
   190e8:	bl	1124c <fcntl64@plt>
   190ec:	subs	r4, r0, #0
   190f0:	blt	19104 <__assert_fail@plt+0x7dd4>
   190f4:	mov	r2, #1
   190f8:	ldr	r3, [pc, #372]	; 19274 <__assert_fail@plt+0x7f44>
   190fc:	str	r2, [r3]
   19100:	b	190ac <__assert_fail@plt+0x7d7c>
   19104:	bl	111ec <__errno_location@plt>
   19108:	ldr	r3, [r0]
   1910c:	cmp	r3, #22
   19110:	bne	190f4 <__assert_fail@plt+0x7dc4>
   19114:	mov	r2, r6
   19118:	mov	r1, #0
   1911c:	mov	r0, r5
   19120:	bl	1124c <fcntl64@plt>
   19124:	subs	r4, r0, #0
   19128:	blt	190ac <__assert_fail@plt+0x7d7c>
   1912c:	mvn	r2, #0
   19130:	ldr	r3, [pc, #316]	; 19274 <__assert_fail@plt+0x7f44>
   19134:	str	r2, [r3]
   19138:	b	19160 <__assert_fail@plt+0x7e30>
   1913c:	mov	r2, r6
   19140:	mov	r1, #0
   19144:	bl	1124c <fcntl64@plt>
   19148:	subs	r4, r0, #0
   1914c:	blt	190ac <__assert_fail@plt+0x7d7c>
   19150:	ldr	r3, [pc, #284]	; 19274 <__assert_fail@plt+0x7f44>
   19154:	ldr	r3, [r3]
   19158:	cmn	r3, #1
   1915c:	bne	190ac <__assert_fail@plt+0x7d7c>
   19160:	mov	r1, #1
   19164:	mov	r0, r4
   19168:	bl	1124c <fcntl64@plt>
   1916c:	subs	r2, r0, #0
   19170:	blt	1918c <__assert_fail@plt+0x7e5c>
   19174:	orr	r2, r2, #1
   19178:	mov	r1, #2
   1917c:	mov	r0, r4
   19180:	bl	1124c <fcntl64@plt>
   19184:	cmn	r0, #1
   19188:	bne	190ac <__assert_fail@plt+0x7d7c>
   1918c:	bl	111ec <__errno_location@plt>
   19190:	mov	r5, r0
   19194:	ldr	r6, [r0]
   19198:	mov	r0, r4
   1919c:	bl	112f4 <close@plt>
   191a0:	str	r6, [r5]
   191a4:	mvn	r4, #0
   191a8:	b	190ac <__assert_fail@plt+0x7d7c>
   191ac:	cmp	r1, #1
   191b0:	beq	19260 <__assert_fail@plt+0x7f30>
   191b4:	bgt	191cc <__assert_fail@plt+0x7e9c>
   191b8:	cmp	r1, #0
   191bc:	bne	19224 <__assert_fail@plt+0x7ef4>
   191c0:	b	191cc <__assert_fail@plt+0x7e9c>
   191c4:	cmp	r1, #4
   191c8:	bne	19224 <__assert_fail@plt+0x7ef4>
   191cc:	ldr	r3, [sp, #4]
   191d0:	add	r2, r3, #4
   191d4:	str	r2, [sp, #4]
   191d8:	ldr	r2, [r3]
   191dc:	mov	r0, r5
   191e0:	bl	1124c <fcntl64@plt>
   191e4:	mov	r4, r0
   191e8:	b	190ac <__assert_fail@plt+0x7d7c>
   191ec:	ldr	r3, [pc, #132]	; 19278 <__assert_fail@plt+0x7f48>
   191f0:	cmp	r1, r3
   191f4:	bgt	19244 <__assert_fail@plt+0x7f14>
   191f8:	sub	r3, r3, #1
   191fc:	cmp	r1, r3
   19200:	bge	191cc <__assert_fail@plt+0x7e9c>
   19204:	sub	r3, r3, #5
   19208:	cmp	r1, r3
   1920c:	beq	19260 <__assert_fail@plt+0x7f30>
   19210:	add	r3, r3, #1
   19214:	cmp	r1, r3
   19218:	beq	191cc <__assert_fail@plt+0x7e9c>
   1921c:	cmp	r1, #1024	; 0x400
   19220:	beq	191cc <__assert_fail@plt+0x7e9c>
   19224:	ldr	r3, [sp, #4]
   19228:	add	r2, r3, #4
   1922c:	str	r2, [sp, #4]
   19230:	ldr	r2, [r3]
   19234:	mov	r0, r5
   19238:	bl	1124c <fcntl64@plt>
   1923c:	mov	r4, r0
   19240:	b	190ac <__assert_fail@plt+0x7d7c>
   19244:	ldr	r3, [pc, #48]	; 1927c <__assert_fail@plt+0x7f4c>
   19248:	cmp	r1, r3
   1924c:	beq	191cc <__assert_fail@plt+0x7e9c>
   19250:	blt	19260 <__assert_fail@plt+0x7f30>
   19254:	add	r3, r3, #1
   19258:	cmp	r1, r3
   1925c:	bne	19224 <__assert_fail@plt+0x7ef4>
   19260:	mov	r0, r5
   19264:	bl	1124c <fcntl64@plt>
   19268:	mov	r4, r0
   1926c:	b	190ac <__assert_fail@plt+0x7d7c>
   19270:	andeq	r0, r0, r6, lsl #8
   19274:	strdeq	ip, [r2], -r4
   19278:	andeq	r0, r0, r7, lsl #8
   1927c:	andeq	r0, r0, r9, lsl #8
   19280:	push	{r1, r2, r3}
   19284:	push	{lr}		; (str lr, [sp, #-4]!)
   19288:	sub	sp, sp, #8
   1928c:	ldr	r1, [sp, #12]
   19290:	tst	r1, #64	; 0x40
   19294:	addne	r3, sp, #20
   19298:	strne	r3, [sp, #4]
   1929c:	ldrne	r2, [sp, #16]
   192a0:	moveq	r2, #0
   192a4:	bl	1115c <open64@plt>
   192a8:	bl	17bc0 <__assert_fail@plt+0x6890>
   192ac:	add	sp, sp, #8
   192b0:	pop	{lr}		; (ldr lr, [sp], #4)
   192b4:	add	sp, sp, #12
   192b8:	bx	lr
   192bc:	push	{r4, lr}
   192c0:	sub	sp, sp, #8
   192c4:	subs	r4, r0, #0
   192c8:	beq	192dc <__assert_fail@plt+0x7fac>
   192cc:	mov	r0, r4
   192d0:	bl	11180 <__freading@plt>
   192d4:	cmp	r0, #0
   192d8:	bne	192ec <__assert_fail@plt+0x7fbc>
   192dc:	mov	r0, r4
   192e0:	bl	1103c <fflush@plt>
   192e4:	add	sp, sp, #8
   192e8:	pop	{r4, pc}
   192ec:	ldr	r3, [r4]
   192f0:	tst	r3, #256	; 0x100
   192f4:	bne	19304 <__assert_fail@plt+0x7fd4>
   192f8:	mov	r0, r4
   192fc:	bl	1103c <fflush@plt>
   19300:	b	192e4 <__assert_fail@plt+0x7fb4>
   19304:	mov	r3, #1
   19308:	str	r3, [sp]
   1930c:	mov	r2, #0
   19310:	mov	r3, #0
   19314:	mov	r0, r4
   19318:	bl	19320 <__assert_fail@plt+0x7ff0>
   1931c:	b	192f8 <__assert_fail@plt+0x7fc8>
   19320:	push	{r4, r5, r6, r7, lr}
   19324:	sub	sp, sp, #12
   19328:	mov	r4, r0
   1932c:	mov	r6, r2
   19330:	mov	r7, r3
   19334:	ldr	r5, [sp, #32]
   19338:	ldr	r2, [r0, #8]
   1933c:	ldr	r3, [r0, #4]
   19340:	cmp	r2, r3
   19344:	beq	19364 <__assert_fail@plt+0x8034>
   19348:	str	r5, [sp]
   1934c:	mov	r2, r6
   19350:	mov	r3, r7
   19354:	mov	r0, r4
   19358:	bl	11240 <fseeko64@plt>
   1935c:	add	sp, sp, #12
   19360:	pop	{r4, r5, r6, r7, pc}
   19364:	ldr	r2, [r0, #20]
   19368:	ldr	r3, [r0, #16]
   1936c:	cmp	r2, r3
   19370:	bne	19348 <__assert_fail@plt+0x8018>
   19374:	ldr	r3, [r0, #36]	; 0x24
   19378:	cmp	r3, #0
   1937c:	bne	19348 <__assert_fail@plt+0x8018>
   19380:	bl	1121c <fileno@plt>
   19384:	str	r5, [sp]
   19388:	mov	r2, r6
   1938c:	mov	r3, r7
   19390:	bl	11114 <lseek64@plt>
   19394:	mvn	r2, #0
   19398:	mvn	r3, #0
   1939c:	cmp	r1, r3
   193a0:	cmpeq	r0, r2
   193a4:	beq	193c0 <__assert_fail@plt+0x8090>
   193a8:	ldr	r3, [r4]
   193ac:	bic	r3, r3, #16
   193b0:	str	r3, [r4]
   193b4:	strd	r0, [r4, #80]	; 0x50
   193b8:	mov	r0, #0
   193bc:	b	1935c <__assert_fail@plt+0x802c>
   193c0:	mvn	r0, #0
   193c4:	b	1935c <__assert_fail@plt+0x802c>
   193c8:	push	{r4, lr}
   193cc:	mov	r0, #14
   193d0:	bl	11270 <nl_langinfo@plt>
   193d4:	cmp	r0, #0
   193d8:	beq	193f0 <__assert_fail@plt+0x80c0>
   193dc:	ldrb	r2, [r0]
   193e0:	ldr	r3, [pc, #16]	; 193f8 <__assert_fail@plt+0x80c8>
   193e4:	cmp	r2, #0
   193e8:	moveq	r0, r3
   193ec:	pop	{r4, pc}
   193f0:	ldr	r0, [pc]	; 193f8 <__assert_fail@plt+0x80c8>
   193f4:	pop	{r4, pc}
   193f8:	andeq	fp, r1, r8, lsr r0
   193fc:	push	{r4, r5, r6, r7, lr}
   19400:	sub	sp, sp, #12
   19404:	mov	r7, r1
   19408:	mov	r5, r2
   1940c:	subs	r6, r0, #0
   19410:	addeq	r6, sp, #4
   19414:	mov	r0, r6
   19418:	bl	11144 <mbrtowc@plt>
   1941c:	mov	r4, r0
   19420:	cmp	r5, #0
   19424:	cmnne	r0, #3
   19428:	bhi	19438 <__assert_fail@plt+0x8108>
   1942c:	mov	r0, r4
   19430:	add	sp, sp, #12
   19434:	pop	{r4, r5, r6, r7, pc}
   19438:	mov	r0, #0
   1943c:	bl	194b4 <__assert_fail@plt+0x8184>
   19440:	cmp	r0, #0
   19444:	ldrbeq	r3, [r7]
   19448:	streq	r3, [r6]
   1944c:	moveq	r4, #1
   19450:	b	1942c <__assert_fail@plt+0x80fc>
   19454:	push	{r4, r5, r6, lr}
   19458:	mov	r6, r0
   1945c:	mov	r5, r1
   19460:	subs	r4, r2, #0
   19464:	beq	19490 <__assert_fail@plt+0x8160>
   19468:	mov	r1, r4
   1946c:	mvn	r0, #0
   19470:	bl	195bc <__assert_fail@plt+0x828c>
   19474:	cmp	r0, r5
   19478:	bcs	19490 <__assert_fail@plt+0x8160>
   1947c:	bl	111ec <__errno_location@plt>
   19480:	mov	r3, #12
   19484:	str	r3, [r0]
   19488:	mov	r0, #0
   1948c:	pop	{r4, r5, r6, pc}
   19490:	mul	r1, r5, r4
   19494:	mov	r0, r6
   19498:	bl	18dd0 <__assert_fail@plt+0x7aa0>
   1949c:	pop	{r4, r5, r6, pc}
   194a0:	push	{r4, lr}
   194a4:	mov	r2, #3
   194a8:	mov	r1, #0
   194ac:	bl	19028 <__assert_fail@plt+0x7cf8>
   194b0:	pop	{r4, pc}
   194b4:	push	{lr}		; (str lr, [sp, #-4]!)
   194b8:	sub	sp, sp, #268	; 0x10c
   194bc:	ldr	r2, [pc, #68]	; 19508 <__assert_fail@plt+0x81d8>
   194c0:	add	r1, sp, #4
   194c4:	bl	19514 <__assert_fail@plt+0x81e4>
   194c8:	cmp	r0, #0
   194cc:	movne	r0, #0
   194d0:	bne	19500 <__assert_fail@plt+0x81d0>
   194d4:	ldr	r1, [pc, #48]	; 1950c <__assert_fail@plt+0x81dc>
   194d8:	add	r0, sp, #4
   194dc:	bl	11024 <strcmp@plt>
   194e0:	cmp	r0, #0
   194e4:	moveq	r0, #0
   194e8:	beq	19500 <__assert_fail@plt+0x81d0>
   194ec:	ldr	r1, [pc, #28]	; 19510 <__assert_fail@plt+0x81e0>
   194f0:	add	r0, sp, #4
   194f4:	bl	11024 <strcmp@plt>
   194f8:	adds	r0, r0, #0
   194fc:	movne	r0, #1
   19500:	add	sp, sp, #268	; 0x10c
   19504:	pop	{pc}		; (ldr pc, [sp], #4)
   19508:	andeq	r0, r0, r1, lsl #2
   1950c:	andeq	fp, r1, r0, asr #32
   19510:	andeq	fp, r1, r4, asr #32
   19514:	push	{r4, r5, r6, lr}
   19518:	mov	r6, r1
   1951c:	mov	r4, r2
   19520:	mov	r1, #0
   19524:	bl	11258 <setlocale@plt>
   19528:	subs	r5, r0, #0
   1952c:	beq	19550 <__assert_fail@plt+0x8220>
   19530:	mov	r0, r5
   19534:	bl	111bc <strlen@plt>
   19538:	cmp	r4, r0
   1953c:	bhi	19568 <__assert_fail@plt+0x8238>
   19540:	cmp	r4, #0
   19544:	bne	19580 <__assert_fail@plt+0x8250>
   19548:	mov	r0, #34	; 0x22
   1954c:	pop	{r4, r5, r6, pc}
   19550:	cmp	r4, #0
   19554:	beq	195a4 <__assert_fail@plt+0x8274>
   19558:	mov	r3, #0
   1955c:	strb	r3, [r6]
   19560:	mov	r0, #22
   19564:	pop	{r4, r5, r6, pc}
   19568:	add	r2, r0, #1
   1956c:	mov	r1, r5
   19570:	mov	r0, r6
   19574:	bl	11078 <memcpy@plt>
   19578:	mov	r0, #0
   1957c:	pop	{r4, r5, r6, pc}
   19580:	sub	r4, r4, #1
   19584:	mov	r2, r4
   19588:	mov	r1, r5
   1958c:	mov	r0, r6
   19590:	bl	11078 <memcpy@plt>
   19594:	mov	r3, #0
   19598:	strb	r3, [r6, r4]
   1959c:	mov	r0, #34	; 0x22
   195a0:	pop	{r4, r5, r6, pc}
   195a4:	mov	r0, #22
   195a8:	pop	{r4, r5, r6, pc}
   195ac:	push	{r4, lr}
   195b0:	mov	r1, #0
   195b4:	bl	11258 <setlocale@plt>
   195b8:	pop	{r4, pc}
   195bc:	subs	r2, r1, #1
   195c0:	bxeq	lr
   195c4:	bcc	1979c <__assert_fail@plt+0x846c>
   195c8:	cmp	r0, r1
   195cc:	bls	19780 <__assert_fail@plt+0x8450>
   195d0:	tst	r1, r2
   195d4:	beq	1978c <__assert_fail@plt+0x845c>
   195d8:	clz	r3, r0
   195dc:	clz	r2, r1
   195e0:	sub	r3, r2, r3
   195e4:	rsbs	r3, r3, #31
   195e8:	addne	r3, r3, r3, lsl #1
   195ec:	mov	r2, #0
   195f0:	addne	pc, pc, r3, lsl #2
   195f4:	nop			; (mov r0, r0)
   195f8:	cmp	r0, r1, lsl #31
   195fc:	adc	r2, r2, r2
   19600:	subcs	r0, r0, r1, lsl #31
   19604:	cmp	r0, r1, lsl #30
   19608:	adc	r2, r2, r2
   1960c:	subcs	r0, r0, r1, lsl #30
   19610:	cmp	r0, r1, lsl #29
   19614:	adc	r2, r2, r2
   19618:	subcs	r0, r0, r1, lsl #29
   1961c:	cmp	r0, r1, lsl #28
   19620:	adc	r2, r2, r2
   19624:	subcs	r0, r0, r1, lsl #28
   19628:	cmp	r0, r1, lsl #27
   1962c:	adc	r2, r2, r2
   19630:	subcs	r0, r0, r1, lsl #27
   19634:	cmp	r0, r1, lsl #26
   19638:	adc	r2, r2, r2
   1963c:	subcs	r0, r0, r1, lsl #26
   19640:	cmp	r0, r1, lsl #25
   19644:	adc	r2, r2, r2
   19648:	subcs	r0, r0, r1, lsl #25
   1964c:	cmp	r0, r1, lsl #24
   19650:	adc	r2, r2, r2
   19654:	subcs	r0, r0, r1, lsl #24
   19658:	cmp	r0, r1, lsl #23
   1965c:	adc	r2, r2, r2
   19660:	subcs	r0, r0, r1, lsl #23
   19664:	cmp	r0, r1, lsl #22
   19668:	adc	r2, r2, r2
   1966c:	subcs	r0, r0, r1, lsl #22
   19670:	cmp	r0, r1, lsl #21
   19674:	adc	r2, r2, r2
   19678:	subcs	r0, r0, r1, lsl #21
   1967c:	cmp	r0, r1, lsl #20
   19680:	adc	r2, r2, r2
   19684:	subcs	r0, r0, r1, lsl #20
   19688:	cmp	r0, r1, lsl #19
   1968c:	adc	r2, r2, r2
   19690:	subcs	r0, r0, r1, lsl #19
   19694:	cmp	r0, r1, lsl #18
   19698:	adc	r2, r2, r2
   1969c:	subcs	r0, r0, r1, lsl #18
   196a0:	cmp	r0, r1, lsl #17
   196a4:	adc	r2, r2, r2
   196a8:	subcs	r0, r0, r1, lsl #17
   196ac:	cmp	r0, r1, lsl #16
   196b0:	adc	r2, r2, r2
   196b4:	subcs	r0, r0, r1, lsl #16
   196b8:	cmp	r0, r1, lsl #15
   196bc:	adc	r2, r2, r2
   196c0:	subcs	r0, r0, r1, lsl #15
   196c4:	cmp	r0, r1, lsl #14
   196c8:	adc	r2, r2, r2
   196cc:	subcs	r0, r0, r1, lsl #14
   196d0:	cmp	r0, r1, lsl #13
   196d4:	adc	r2, r2, r2
   196d8:	subcs	r0, r0, r1, lsl #13
   196dc:	cmp	r0, r1, lsl #12
   196e0:	adc	r2, r2, r2
   196e4:	subcs	r0, r0, r1, lsl #12
   196e8:	cmp	r0, r1, lsl #11
   196ec:	adc	r2, r2, r2
   196f0:	subcs	r0, r0, r1, lsl #11
   196f4:	cmp	r0, r1, lsl #10
   196f8:	adc	r2, r2, r2
   196fc:	subcs	r0, r0, r1, lsl #10
   19700:	cmp	r0, r1, lsl #9
   19704:	adc	r2, r2, r2
   19708:	subcs	r0, r0, r1, lsl #9
   1970c:	cmp	r0, r1, lsl #8
   19710:	adc	r2, r2, r2
   19714:	subcs	r0, r0, r1, lsl #8
   19718:	cmp	r0, r1, lsl #7
   1971c:	adc	r2, r2, r2
   19720:	subcs	r0, r0, r1, lsl #7
   19724:	cmp	r0, r1, lsl #6
   19728:	adc	r2, r2, r2
   1972c:	subcs	r0, r0, r1, lsl #6
   19730:	cmp	r0, r1, lsl #5
   19734:	adc	r2, r2, r2
   19738:	subcs	r0, r0, r1, lsl #5
   1973c:	cmp	r0, r1, lsl #4
   19740:	adc	r2, r2, r2
   19744:	subcs	r0, r0, r1, lsl #4
   19748:	cmp	r0, r1, lsl #3
   1974c:	adc	r2, r2, r2
   19750:	subcs	r0, r0, r1, lsl #3
   19754:	cmp	r0, r1, lsl #2
   19758:	adc	r2, r2, r2
   1975c:	subcs	r0, r0, r1, lsl #2
   19760:	cmp	r0, r1, lsl #1
   19764:	adc	r2, r2, r2
   19768:	subcs	r0, r0, r1, lsl #1
   1976c:	cmp	r0, r1
   19770:	adc	r2, r2, r2
   19774:	subcs	r0, r0, r1
   19778:	mov	r0, r2
   1977c:	bx	lr
   19780:	moveq	r0, #1
   19784:	movne	r0, #0
   19788:	bx	lr
   1978c:	clz	r2, r1
   19790:	rsb	r2, r2, #31
   19794:	lsr	r0, r0, r2
   19798:	bx	lr
   1979c:	cmp	r0, #0
   197a0:	mvnne	r0, #0
   197a4:	b	19a44 <__assert_fail@plt+0x8714>
   197a8:	cmp	r1, #0
   197ac:	beq	1979c <__assert_fail@plt+0x846c>
   197b0:	push	{r0, r1, lr}
   197b4:	bl	195bc <__assert_fail@plt+0x828c>
   197b8:	pop	{r1, r2, lr}
   197bc:	mul	r3, r2, r0
   197c0:	sub	r1, r1, r3
   197c4:	bx	lr
   197c8:	cmp	r1, #0
   197cc:	beq	199d8 <__assert_fail@plt+0x86a8>
   197d0:	eor	ip, r0, r1
   197d4:	rsbmi	r1, r1, #0
   197d8:	subs	r2, r1, #1
   197dc:	beq	199a4 <__assert_fail@plt+0x8674>
   197e0:	movs	r3, r0
   197e4:	rsbmi	r3, r0, #0
   197e8:	cmp	r3, r1
   197ec:	bls	199b0 <__assert_fail@plt+0x8680>
   197f0:	tst	r1, r2
   197f4:	beq	199c0 <__assert_fail@plt+0x8690>
   197f8:	clz	r2, r3
   197fc:	clz	r0, r1
   19800:	sub	r2, r0, r2
   19804:	rsbs	r2, r2, #31
   19808:	addne	r2, r2, r2, lsl #1
   1980c:	mov	r0, #0
   19810:	addne	pc, pc, r2, lsl #2
   19814:	nop			; (mov r0, r0)
   19818:	cmp	r3, r1, lsl #31
   1981c:	adc	r0, r0, r0
   19820:	subcs	r3, r3, r1, lsl #31
   19824:	cmp	r3, r1, lsl #30
   19828:	adc	r0, r0, r0
   1982c:	subcs	r3, r3, r1, lsl #30
   19830:	cmp	r3, r1, lsl #29
   19834:	adc	r0, r0, r0
   19838:	subcs	r3, r3, r1, lsl #29
   1983c:	cmp	r3, r1, lsl #28
   19840:	adc	r0, r0, r0
   19844:	subcs	r3, r3, r1, lsl #28
   19848:	cmp	r3, r1, lsl #27
   1984c:	adc	r0, r0, r0
   19850:	subcs	r3, r3, r1, lsl #27
   19854:	cmp	r3, r1, lsl #26
   19858:	adc	r0, r0, r0
   1985c:	subcs	r3, r3, r1, lsl #26
   19860:	cmp	r3, r1, lsl #25
   19864:	adc	r0, r0, r0
   19868:	subcs	r3, r3, r1, lsl #25
   1986c:	cmp	r3, r1, lsl #24
   19870:	adc	r0, r0, r0
   19874:	subcs	r3, r3, r1, lsl #24
   19878:	cmp	r3, r1, lsl #23
   1987c:	adc	r0, r0, r0
   19880:	subcs	r3, r3, r1, lsl #23
   19884:	cmp	r3, r1, lsl #22
   19888:	adc	r0, r0, r0
   1988c:	subcs	r3, r3, r1, lsl #22
   19890:	cmp	r3, r1, lsl #21
   19894:	adc	r0, r0, r0
   19898:	subcs	r3, r3, r1, lsl #21
   1989c:	cmp	r3, r1, lsl #20
   198a0:	adc	r0, r0, r0
   198a4:	subcs	r3, r3, r1, lsl #20
   198a8:	cmp	r3, r1, lsl #19
   198ac:	adc	r0, r0, r0
   198b0:	subcs	r3, r3, r1, lsl #19
   198b4:	cmp	r3, r1, lsl #18
   198b8:	adc	r0, r0, r0
   198bc:	subcs	r3, r3, r1, lsl #18
   198c0:	cmp	r3, r1, lsl #17
   198c4:	adc	r0, r0, r0
   198c8:	subcs	r3, r3, r1, lsl #17
   198cc:	cmp	r3, r1, lsl #16
   198d0:	adc	r0, r0, r0
   198d4:	subcs	r3, r3, r1, lsl #16
   198d8:	cmp	r3, r1, lsl #15
   198dc:	adc	r0, r0, r0
   198e0:	subcs	r3, r3, r1, lsl #15
   198e4:	cmp	r3, r1, lsl #14
   198e8:	adc	r0, r0, r0
   198ec:	subcs	r3, r3, r1, lsl #14
   198f0:	cmp	r3, r1, lsl #13
   198f4:	adc	r0, r0, r0
   198f8:	subcs	r3, r3, r1, lsl #13
   198fc:	cmp	r3, r1, lsl #12
   19900:	adc	r0, r0, r0
   19904:	subcs	r3, r3, r1, lsl #12
   19908:	cmp	r3, r1, lsl #11
   1990c:	adc	r0, r0, r0
   19910:	subcs	r3, r3, r1, lsl #11
   19914:	cmp	r3, r1, lsl #10
   19918:	adc	r0, r0, r0
   1991c:	subcs	r3, r3, r1, lsl #10
   19920:	cmp	r3, r1, lsl #9
   19924:	adc	r0, r0, r0
   19928:	subcs	r3, r3, r1, lsl #9
   1992c:	cmp	r3, r1, lsl #8
   19930:	adc	r0, r0, r0
   19934:	subcs	r3, r3, r1, lsl #8
   19938:	cmp	r3, r1, lsl #7
   1993c:	adc	r0, r0, r0
   19940:	subcs	r3, r3, r1, lsl #7
   19944:	cmp	r3, r1, lsl #6
   19948:	adc	r0, r0, r0
   1994c:	subcs	r3, r3, r1, lsl #6
   19950:	cmp	r3, r1, lsl #5
   19954:	adc	r0, r0, r0
   19958:	subcs	r3, r3, r1, lsl #5
   1995c:	cmp	r3, r1, lsl #4
   19960:	adc	r0, r0, r0
   19964:	subcs	r3, r3, r1, lsl #4
   19968:	cmp	r3, r1, lsl #3
   1996c:	adc	r0, r0, r0
   19970:	subcs	r3, r3, r1, lsl #3
   19974:	cmp	r3, r1, lsl #2
   19978:	adc	r0, r0, r0
   1997c:	subcs	r3, r3, r1, lsl #2
   19980:	cmp	r3, r1, lsl #1
   19984:	adc	r0, r0, r0
   19988:	subcs	r3, r3, r1, lsl #1
   1998c:	cmp	r3, r1
   19990:	adc	r0, r0, r0
   19994:	subcs	r3, r3, r1
   19998:	cmp	ip, #0
   1999c:	rsbmi	r0, r0, #0
   199a0:	bx	lr
   199a4:	teq	ip, r0
   199a8:	rsbmi	r0, r0, #0
   199ac:	bx	lr
   199b0:	movcc	r0, #0
   199b4:	asreq	r0, ip, #31
   199b8:	orreq	r0, r0, #1
   199bc:	bx	lr
   199c0:	clz	r2, r1
   199c4:	rsb	r2, r2, #31
   199c8:	cmp	ip, #0
   199cc:	lsr	r0, r3, r2
   199d0:	rsbmi	r0, r0, #0
   199d4:	bx	lr
   199d8:	cmp	r0, #0
   199dc:	mvngt	r0, #-2147483648	; 0x80000000
   199e0:	movlt	r0, #-2147483648	; 0x80000000
   199e4:	b	19a44 <__assert_fail@plt+0x8714>
   199e8:	cmp	r1, #0
   199ec:	beq	199d8 <__assert_fail@plt+0x86a8>
   199f0:	push	{r0, r1, lr}
   199f4:	bl	197d0 <__assert_fail@plt+0x84a0>
   199f8:	pop	{r1, r2, lr}
   199fc:	mul	r3, r2, r0
   19a00:	sub	r1, r1, r3
   19a04:	bx	lr
   19a08:	cmp	r3, #0
   19a0c:	cmpeq	r2, #0
   19a10:	bne	19a28 <__assert_fail@plt+0x86f8>
   19a14:	cmp	r1, #0
   19a18:	cmpeq	r0, #0
   19a1c:	mvnne	r1, #0
   19a20:	mvnne	r0, #0
   19a24:	b	19a44 <__assert_fail@plt+0x8714>
   19a28:	sub	sp, sp, #8
   19a2c:	push	{sp, lr}
   19a30:	bl	19a54 <__assert_fail@plt+0x8724>
   19a34:	ldr	lr, [sp, #4]
   19a38:	add	sp, sp, #8
   19a3c:	pop	{r2, r3}
   19a40:	bx	lr
   19a44:	push	{r1, lr}
   19a48:	mov	r0, #8
   19a4c:	bl	11018 <raise@plt>
   19a50:	pop	{r1, pc}
   19a54:	cmp	r1, r3
   19a58:	push	{r4, r5, r6, r7, r8, r9, lr}
   19a5c:	cmpeq	r0, r2
   19a60:	mov	r4, r0
   19a64:	mov	r5, r1
   19a68:	ldr	r9, [sp, #28]
   19a6c:	movcc	r0, #0
   19a70:	movcc	r1, #0
   19a74:	bcc	19b6c <__assert_fail@plt+0x883c>
   19a78:	cmp	r3, #0
   19a7c:	clzeq	ip, r2
   19a80:	clzne	ip, r3
   19a84:	addeq	ip, ip, #32
   19a88:	cmp	r5, #0
   19a8c:	clzeq	r1, r4
   19a90:	addeq	r1, r1, #32
   19a94:	clzne	r1, r5
   19a98:	sub	ip, ip, r1
   19a9c:	sub	lr, ip, #32
   19aa0:	lsl	r7, r3, ip
   19aa4:	rsb	r8, ip, #32
   19aa8:	orr	r7, r7, r2, lsl lr
   19aac:	orr	r7, r7, r2, lsr r8
   19ab0:	lsl	r6, r2, ip
   19ab4:	cmp	r5, r7
   19ab8:	cmpeq	r4, r6
   19abc:	movcc	r0, #0
   19ac0:	movcc	r1, #0
   19ac4:	bcc	19ae0 <__assert_fail@plt+0x87b0>
   19ac8:	mov	r3, #1
   19acc:	subs	r4, r4, r6
   19ad0:	lsl	r1, r3, lr
   19ad4:	lsl	r0, r3, ip
   19ad8:	orr	r1, r1, r3, lsr r8
   19adc:	sbc	r5, r5, r7
   19ae0:	cmp	ip, #0
   19ae4:	beq	19b6c <__assert_fail@plt+0x883c>
   19ae8:	lsrs	r3, r7, #1
   19aec:	rrx	r2, r6
   19af0:	mov	r6, ip
   19af4:	b	19b18 <__assert_fail@plt+0x87e8>
   19af8:	subs	r4, r4, r2
   19afc:	sbc	r5, r5, r3
   19b00:	adds	r4, r4, r4
   19b04:	adc	r5, r5, r5
   19b08:	adds	r4, r4, #1
   19b0c:	adc	r5, r5, #0
   19b10:	subs	r6, r6, #1
   19b14:	beq	19b34 <__assert_fail@plt+0x8804>
   19b18:	cmp	r5, r3
   19b1c:	cmpeq	r4, r2
   19b20:	bcs	19af8 <__assert_fail@plt+0x87c8>
   19b24:	adds	r4, r4, r4
   19b28:	adc	r5, r5, r5
   19b2c:	subs	r6, r6, #1
   19b30:	bne	19b18 <__assert_fail@plt+0x87e8>
   19b34:	lsr	r6, r4, ip
   19b38:	lsr	r7, r5, ip
   19b3c:	orr	r6, r6, r5, lsl r8
   19b40:	adds	r2, r0, r4
   19b44:	orr	r6, r6, r5, lsr lr
   19b48:	adc	r3, r1, r5
   19b4c:	lsl	r1, r7, ip
   19b50:	orr	r1, r1, r6, lsl lr
   19b54:	lsl	r0, r6, ip
   19b58:	orr	r1, r1, r6, lsr r8
   19b5c:	subs	r0, r2, r0
   19b60:	mov	r4, r6
   19b64:	mov	r5, r7
   19b68:	sbc	r1, r3, r1
   19b6c:	cmp	r9, #0
   19b70:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   19b74:	strd	r4, [r9]
   19b78:	pop	{r4, r5, r6, r7, r8, r9, pc}
   19b7c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19b80:	mov	r7, r0
   19b84:	ldr	r6, [pc, #72]	; 19bd4 <__assert_fail@plt+0x88a4>
   19b88:	ldr	r5, [pc, #72]	; 19bd8 <__assert_fail@plt+0x88a8>
   19b8c:	add	r6, pc, r6
   19b90:	add	r5, pc, r5
   19b94:	sub	r6, r6, r5
   19b98:	mov	r8, r1
   19b9c:	mov	r9, r2
   19ba0:	bl	10fc8 <fstatfs64@plt-0x20>
   19ba4:	asrs	r6, r6, #2
   19ba8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   19bac:	mov	r4, #0
   19bb0:	add	r4, r4, #1
   19bb4:	ldr	r3, [r5], #4
   19bb8:	mov	r2, r9
   19bbc:	mov	r1, r8
   19bc0:	mov	r0, r7
   19bc4:	blx	r3
   19bc8:	cmp	r6, r4
   19bcc:	bne	19bb0 <__assert_fail@plt+0x8880>
   19bd0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19bd4:	andeq	r2, r1, ip, ror r3
   19bd8:	andeq	r2, r1, r4, ror r3
   19bdc:	bx	lr
   19be0:	ldr	r3, [pc, #12]	; 19bf4 <__assert_fail@plt+0x88c4>
   19be4:	mov	r1, #0
   19be8:	add	r3, pc, r3
   19bec:	ldr	r2, [r3]
   19bf0:	b	111f8 <__cxa_atexit@plt>
   19bf4:	andeq	r2, r1, r0, asr #10

Disassembly of section .fini:

00019bf8 <.fini>:
   19bf8:	push	{r3, lr}
   19bfc:	pop	{r3, pc}
