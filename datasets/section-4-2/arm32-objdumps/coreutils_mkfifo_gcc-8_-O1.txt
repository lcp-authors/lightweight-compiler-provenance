
../repos/coreutils/src/mkfifo:     file format elf32-littlearm


Disassembly of section .init:

000113ec <.init>:
   113ec:	push	{r3, lr}
   113f0:	bl	11874 <__assert_fail@plt+0x48>
   113f4:	pop	{r3, pc}

Disassembly of section .plt:

000113f8 <fstatfs64@plt-0x14>:
   113f8:	push	{lr}		; (str lr, [sp, #-4]!)
   113fc:	ldr	lr, [pc, #4]	; 11408 <fstatfs64@plt-0x4>
   11400:	add	lr, pc, lr
   11404:	ldr	pc, [lr, #8]!
   11408:	strdeq	sl, [r1], -r8

0001140c <fstatfs64@plt>:
   1140c:	add	ip, pc, #0, 12
   11410:	add	ip, ip, #106496	; 0x1a000
   11414:	ldr	pc, [ip, #3064]!	; 0xbf8

00011418 <selabel_lookup@plt>:
   11418:	add	ip, pc, #0, 12
   1141c:	add	ip, ip, #106496	; 0x1a000
   11420:	ldr	pc, [ip, #3056]!	; 0xbf0

00011424 <calloc@plt>:
   11424:	add	ip, pc, #0, 12
   11428:	add	ip, ip, #106496	; 0x1a000
   1142c:	ldr	pc, [ip, #3048]!	; 0xbe8

00011430 <fputs_unlocked@plt>:
   11430:	add	ip, pc, #0, 12
   11434:	add	ip, ip, #106496	; 0x1a000
   11438:	ldr	pc, [ip, #3040]!	; 0xbe0

0001143c <raise@plt>:
   1143c:	add	ip, pc, #0, 12
   11440:	add	ip, ip, #106496	; 0x1a000
   11444:	ldr	pc, [ip, #3032]!	; 0xbd8

00011448 <is_selinux_enabled@plt>:
   11448:	add	ip, pc, #0, 12
   1144c:	add	ip, ip, #106496	; 0x1a000
   11450:	ldr	pc, [ip, #3024]!	; 0xbd0

00011454 <strcmp@plt>:
   11454:	add	ip, pc, #0, 12
   11458:	add	ip, ip, #106496	; 0x1a000
   1145c:	ldr	pc, [ip, #3016]!	; 0xbc8

00011460 <context_type_get@plt>:
   11460:	add	ip, pc, #0, 12
   11464:	add	ip, ip, #106496	; 0x1a000
   11468:	ldr	pc, [ip, #3008]!	; 0xbc0

0001146c <fflush@plt>:
   1146c:	add	ip, pc, #0, 12
   11470:	add	ip, ip, #106496	; 0x1a000
   11474:	ldr	pc, [ip, #3000]!	; 0xbb8

00011478 <lsetfilecon@plt>:
   11478:	add	ip, pc, #0, 12
   1147c:	add	ip, ip, #106496	; 0x1a000
   11480:	ldr	pc, [ip, #2992]!	; 0xbb0

00011484 <memmove@plt>:
   11484:	add	ip, pc, #0, 12
   11488:	add	ip, ip, #106496	; 0x1a000
   1148c:	ldr	pc, [ip, #2984]!	; 0xba8

00011490 <free@plt>:
   11490:	add	ip, pc, #0, 12
   11494:	add	ip, ip, #106496	; 0x1a000
   11498:	ldr	pc, [ip, #2976]!	; 0xba0

0001149c <faccessat@plt>:
   1149c:	add	ip, pc, #0, 12
   114a0:	add	ip, ip, #106496	; 0x1a000
   114a4:	ldr	pc, [ip, #2968]!	; 0xb98

000114a8 <_exit@plt>:
   114a8:	add	ip, pc, #0, 12
   114ac:	add	ip, ip, #106496	; 0x1a000
   114b0:	ldr	pc, [ip, #2960]!	; 0xb90

000114b4 <memcpy@plt>:
   114b4:	add	ip, pc, #0, 12
   114b8:	add	ip, ip, #106496	; 0x1a000
   114bc:	ldr	pc, [ip, #2952]!	; 0xb88

000114c0 <mbsinit@plt>:
   114c0:	add	ip, pc, #0, 12
   114c4:	add	ip, ip, #106496	; 0x1a000
   114c8:	ldr	pc, [ip, #2944]!	; 0xb80

000114cc <context_new@plt>:
   114cc:	add	ip, pc, #0, 12
   114d0:	add	ip, ip, #106496	; 0x1a000
   114d4:	ldr	pc, [ip, #2936]!	; 0xb78

000114d8 <memcmp@plt>:
   114d8:	add	ip, pc, #0, 12
   114dc:	add	ip, ip, #106496	; 0x1a000
   114e0:	ldr	pc, [ip, #2928]!	; 0xb70

000114e4 <fputc_unlocked@plt>:
   114e4:	add	ip, pc, #0, 12
   114e8:	add	ip, ip, #106496	; 0x1a000
   114ec:	ldr	pc, [ip, #2920]!	; 0xb68

000114f0 <dcgettext@plt>:
   114f0:	add	ip, pc, #0, 12
   114f4:	add	ip, ip, #106496	; 0x1a000
   114f8:	ldr	pc, [ip, #2912]!	; 0xb60

000114fc <context_type_set@plt>:
   114fc:	add	ip, pc, #0, 12
   11500:	add	ip, ip, #106496	; 0x1a000
   11504:	ldr	pc, [ip, #2904]!	; 0xb58

00011508 <realloc@plt>:
   11508:	add	ip, pc, #0, 12
   1150c:	add	ip, ip, #106496	; 0x1a000
   11510:	ldr	pc, [ip, #2896]!	; 0xb50

00011514 <fgetfilecon@plt>:
   11514:	add	ip, pc, #0, 12
   11518:	add	ip, ip, #106496	; 0x1a000
   1151c:	ldr	pc, [ip, #2888]!	; 0xb48

00011520 <textdomain@plt>:
   11520:	add	ip, pc, #0, 12
   11524:	add	ip, ip, #106496	; 0x1a000
   11528:	ldr	pc, [ip, #2880]!	; 0xb40

0001152c <rawmemchr@plt>:
   1152c:	add	ip, pc, #0, 12
   11530:	add	ip, ip, #106496	; 0x1a000
   11534:	ldr	pc, [ip, #2872]!	; 0xb38

00011538 <__fxstatat64@plt>:
   11538:	add	ip, pc, #0, 12
   1153c:	add	ip, ip, #106496	; 0x1a000
   11540:	ldr	pc, [ip, #2864]!	; 0xb30

00011544 <iswprint@plt>:
   11544:	add	ip, pc, #0, 12
   11548:	add	ip, ip, #106496	; 0x1a000
   1154c:	ldr	pc, [ip, #2856]!	; 0xb28

00011550 <__fxstat64@plt>:
   11550:	add	ip, pc, #0, 12
   11554:	add	ip, ip, #106496	; 0x1a000
   11558:	ldr	pc, [ip, #2848]!	; 0xb20

0001155c <readlink@plt>:
   1155c:	add	ip, pc, #0, 12
   11560:	add	ip, ip, #106496	; 0x1a000
   11564:	ldr	pc, [ip, #2840]!	; 0xb18

00011568 <fwrite@plt>:
   11568:	add	ip, pc, #0, 12
   1156c:	add	ip, ip, #106496	; 0x1a000
   11570:	ldr	pc, [ip, #2832]!	; 0xb10

00011574 <lseek64@plt>:
   11574:	add	ip, pc, #0, 12
   11578:	add	ip, ip, #106496	; 0x1a000
   1157c:	ldr	pc, [ip, #2824]!	; 0xb08

00011580 <__ctype_get_mb_cur_max@plt>:
   11580:	add	ip, pc, #0, 12
   11584:	add	ip, ip, #106496	; 0x1a000
   11588:	ldr	pc, [ip, #2816]!	; 0xb00

0001158c <getcon@plt>:
   1158c:	add	ip, pc, #0, 12
   11590:	add	ip, ip, #106496	; 0x1a000
   11594:	ldr	pc, [ip, #2808]!	; 0xaf8

00011598 <__fpending@plt>:
   11598:	add	ip, pc, #0, 12
   1159c:	add	ip, ip, #106496	; 0x1a000
   115a0:	ldr	pc, [ip, #2800]!	; 0xaf0

000115a4 <mbrtowc@plt>:
   115a4:	add	ip, pc, #0, 12
   115a8:	add	ip, ip, #106496	; 0x1a000
   115ac:	ldr	pc, [ip, #2792]!	; 0xae8

000115b0 <error@plt>:
   115b0:	add	ip, pc, #0, 12
   115b4:	add	ip, ip, #106496	; 0x1a000
   115b8:	ldr	pc, [ip, #2784]!	; 0xae0

000115bc <open64@plt>:
   115bc:	add	ip, pc, #0, 12
   115c0:	add	ip, ip, #106496	; 0x1a000
   115c4:	ldr	pc, [ip, #2776]!	; 0xad8

000115c8 <lgetfilecon@plt>:
   115c8:	add	ip, pc, #0, 12
   115cc:	add	ip, ip, #106496	; 0x1a000
   115d0:	ldr	pc, [ip, #2768]!	; 0xad0

000115d4 <malloc@plt>:
   115d4:	add	ip, pc, #0, 12
   115d8:	add	ip, ip, #106496	; 0x1a000
   115dc:	ldr	pc, [ip, #2760]!	; 0xac8

000115e0 <__libc_start_main@plt>:
   115e0:	add	ip, pc, #0, 12
   115e4:	add	ip, ip, #106496	; 0x1a000
   115e8:	ldr	pc, [ip, #2752]!	; 0xac0

000115ec <__freading@plt>:
   115ec:	add	ip, pc, #0, 12
   115f0:	add	ip, ip, #106496	; 0x1a000
   115f4:	ldr	pc, [ip, #2744]!	; 0xab8

000115f8 <__gmon_start__@plt>:
   115f8:	add	ip, pc, #0, 12
   115fc:	add	ip, ip, #106496	; 0x1a000
   11600:	ldr	pc, [ip, #2736]!	; 0xab0

00011604 <context_free@plt>:
   11604:	add	ip, pc, #0, 12
   11608:	add	ip, ip, #106496	; 0x1a000
   1160c:	ldr	pc, [ip, #2728]!	; 0xaa8

00011610 <mempcpy@plt>:
   11610:	add	ip, pc, #0, 12
   11614:	add	ip, ip, #106496	; 0x1a000
   11618:	ldr	pc, [ip, #2720]!	; 0xaa0

0001161c <getopt_long@plt>:
   1161c:	add	ip, pc, #0, 12
   11620:	add	ip, ip, #106496	; 0x1a000
   11624:	ldr	pc, [ip, #2712]!	; 0xa98

00011628 <__ctype_b_loc@plt>:
   11628:	add	ip, pc, #0, 12
   1162c:	add	ip, ip, #106496	; 0x1a000
   11630:	ldr	pc, [ip, #2704]!	; 0xa90

00011634 <getcwd@plt>:
   11634:	add	ip, pc, #0, 12
   11638:	add	ip, ip, #106496	; 0x1a000
   1163c:	ldr	pc, [ip, #2696]!	; 0xa88

00011640 <exit@plt>:
   11640:	add	ip, pc, #0, 12
   11644:	add	ip, ip, #106496	; 0x1a000
   11648:	ldr	pc, [ip, #2688]!	; 0xa80

0001164c <getfilecon@plt>:
   1164c:	add	ip, pc, #0, 12
   11650:	add	ip, ip, #106496	; 0x1a000
   11654:	ldr	pc, [ip, #2680]!	; 0xa78

00011658 <strlen@plt>:
   11658:	add	ip, pc, #0, 12
   1165c:	add	ip, ip, #106496	; 0x1a000
   11660:	ldr	pc, [ip, #2672]!	; 0xa70

00011664 <selabel_open@plt>:
   11664:	add	ip, pc, #0, 12
   11668:	add	ip, ip, #106496	; 0x1a000
   1166c:	ldr	pc, [ip, #2664]!	; 0xa68

00011670 <openat64@plt>:
   11670:	add	ip, pc, #0, 12
   11674:	add	ip, ip, #106496	; 0x1a000
   11678:	ldr	pc, [ip, #2656]!	; 0xa60

0001167c <setfscreatecon@plt>:
   1167c:	add	ip, pc, #0, 12
   11680:	add	ip, ip, #106496	; 0x1a000
   11684:	ldr	pc, [ip, #2648]!	; 0xa58

00011688 <__errno_location@plt>:
   11688:	add	ip, pc, #0, 12
   1168c:	add	ip, ip, #106496	; 0x1a000
   11690:	ldr	pc, [ip, #2640]!	; 0xa50

00011694 <__sprintf_chk@plt>:
   11694:	add	ip, pc, #0, 12
   11698:	add	ip, ip, #106496	; 0x1a000
   1169c:	ldr	pc, [ip, #2632]!	; 0xa48

000116a0 <__cxa_atexit@plt>:
   116a0:	add	ip, pc, #0, 12
   116a4:	add	ip, ip, #106496	; 0x1a000
   116a8:	ldr	pc, [ip, #2624]!	; 0xa40

000116ac <memset@plt>:
   116ac:	add	ip, pc, #0, 12
   116b0:	add	ip, ip, #106496	; 0x1a000
   116b4:	ldr	pc, [ip, #2616]!	; 0xa38

000116b8 <__printf_chk@plt>:
   116b8:	add	ip, pc, #0, 12
   116bc:	add	ip, ip, #106496	; 0x1a000
   116c0:	ldr	pc, [ip, #2608]!	; 0xa30

000116c4 <fileno@plt>:
   116c4:	add	ip, pc, #0, 12
   116c8:	add	ip, ip, #106496	; 0x1a000
   116cc:	ldr	pc, [ip, #2600]!	; 0xa28

000116d0 <__fprintf_chk@plt>:
   116d0:	add	ip, pc, #0, 12
   116d4:	add	ip, ip, #106496	; 0x1a000
   116d8:	ldr	pc, [ip, #2592]!	; 0xa20

000116dc <fclose@plt>:
   116dc:	add	ip, pc, #0, 12
   116e0:	add	ip, ip, #106496	; 0x1a000
   116e4:	ldr	pc, [ip, #2584]!	; 0xa18

000116e8 <fseeko64@plt>:
   116e8:	add	ip, pc, #0, 12
   116ec:	add	ip, ip, #106496	; 0x1a000
   116f0:	ldr	pc, [ip, #2576]!	; 0xa10

000116f4 <fcntl64@plt>:
   116f4:	add	ip, pc, #0, 12
   116f8:	add	ip, ip, #106496	; 0x1a000
   116fc:	ldr	pc, [ip, #2568]!	; 0xa08

00011700 <setlocale@plt>:
   11700:	add	ip, pc, #0, 12
   11704:	add	ip, ip, #106496	; 0x1a000
   11708:	ldr	pc, [ip, #2560]!	; 0xa00

0001170c <fsetfilecon@plt>:
   1170c:	add	ip, pc, #0, 12
   11710:	add	ip, ip, #106496	; 0x1a000
   11714:	ldr	pc, [ip, #2552]!	; 0x9f8

00011718 <strrchr@plt>:
   11718:	add	ip, pc, #0, 12
   1171c:	add	ip, ip, #106496	; 0x1a000
   11720:	ldr	pc, [ip, #2544]!	; 0x9f0

00011724 <nl_langinfo@plt>:
   11724:	add	ip, pc, #0, 12
   11728:	add	ip, ip, #106496	; 0x1a000
   1172c:	ldr	pc, [ip, #2536]!	; 0x9e8

00011730 <readdir64@plt>:
   11730:	add	ip, pc, #0, 12
   11734:	add	ip, ip, #106496	; 0x1a000
   11738:	ldr	pc, [ip, #2528]!	; 0x9e0

0001173c <fdopendir@plt>:
   1173c:	add	ip, pc, #0, 12
   11740:	add	ip, ip, #106496	; 0x1a000
   11744:	ldr	pc, [ip, #2520]!	; 0x9d8

00011748 <security_compute_create@plt>:
   11748:	add	ip, pc, #0, 12
   1174c:	add	ip, ip, #106496	; 0x1a000
   11750:	ldr	pc, [ip, #2512]!	; 0x9d0

00011754 <dirfd@plt>:
   11754:	add	ip, pc, #0, 12
   11758:	add	ip, ip, #106496	; 0x1a000
   1175c:	ldr	pc, [ip, #2504]!	; 0x9c8

00011760 <fchdir@plt>:
   11760:	add	ip, pc, #0, 12
   11764:	add	ip, ip, #106496	; 0x1a000
   11768:	ldr	pc, [ip, #2496]!	; 0x9c0

0001176c <qsort@plt>:
   1176c:	add	ip, pc, #0, 12
   11770:	add	ip, ip, #106496	; 0x1a000
   11774:	ldr	pc, [ip, #2488]!	; 0x9b8

00011778 <freecon@plt>:
   11778:	add	ip, pc, #0, 12
   1177c:	add	ip, ip, #106496	; 0x1a000
   11780:	ldr	pc, [ip, #2480]!	; 0x9b0

00011784 <bindtextdomain@plt>:
   11784:	add	ip, pc, #0, 12
   11788:	add	ip, ip, #106496	; 0x1a000
   1178c:	ldr	pc, [ip, #2472]!	; 0x9a8

00011790 <getfscreatecon@plt>:
   11790:	add	ip, pc, #0, 12
   11794:	add	ip, ip, #106496	; 0x1a000
   11798:	ldr	pc, [ip, #2464]!	; 0x9a0

0001179c <umask@plt>:
   1179c:	add	ip, pc, #0, 12
   117a0:	add	ip, ip, #106496	; 0x1a000
   117a4:	ldr	pc, [ip, #2456]!	; 0x998

000117a8 <context_str@plt>:
   117a8:	add	ip, pc, #0, 12
   117ac:	add	ip, ip, #106496	; 0x1a000
   117b0:	ldr	pc, [ip, #2448]!	; 0x990

000117b4 <chmod@plt>:
   117b4:	add	ip, pc, #0, 12
   117b8:	add	ip, ip, #106496	; 0x1a000
   117bc:	ldr	pc, [ip, #2440]!	; 0x988

000117c0 <__xstat64@plt>:
   117c0:	add	ip, pc, #0, 12
   117c4:	add	ip, ip, #106496	; 0x1a000
   117c8:	ldr	pc, [ip, #2432]!	; 0x980

000117cc <strncmp@plt>:
   117cc:	add	ip, pc, #0, 12
   117d0:	add	ip, ip, #106496	; 0x1a000
   117d4:	ldr	pc, [ip, #2424]!	; 0x978

000117d8 <abort@plt>:
   117d8:	add	ip, pc, #0, 12
   117dc:	add	ip, ip, #106496	; 0x1a000
   117e0:	ldr	pc, [ip, #2416]!	; 0x970

000117e4 <close@plt>:
   117e4:	add	ip, pc, #0, 12
   117e8:	add	ip, ip, #106496	; 0x1a000
   117ec:	ldr	pc, [ip, #2408]!	; 0x968

000117f0 <__lxstat64@plt>:
   117f0:	add	ip, pc, #0, 12
   117f4:	add	ip, ip, #106496	; 0x1a000
   117f8:	ldr	pc, [ip, #2400]!	; 0x960

000117fc <mkfifo@plt>:
   117fc:	add	ip, pc, #0, 12
   11800:	add	ip, ip, #106496	; 0x1a000
   11804:	ldr	pc, [ip, #2392]!	; 0x958

00011808 <mode_to_security_class@plt>:
   11808:	add	ip, pc, #0, 12
   1180c:	add	ip, ip, #106496	; 0x1a000
   11810:	ldr	pc, [ip, #2384]!	; 0x950

00011814 <closedir@plt>:
   11814:	add	ip, pc, #0, 12
   11818:	add	ip, ip, #106496	; 0x1a000
   1181c:	ldr	pc, [ip, #2376]!	; 0x948

00011820 <strspn@plt>:
   11820:	add	ip, pc, #0, 12
   11824:	add	ip, ip, #106496	; 0x1a000
   11828:	ldr	pc, [ip, #2368]!	; 0x940

0001182c <__assert_fail@plt>:
   1182c:	add	ip, pc, #0, 12
   11830:	add	ip, ip, #106496	; 0x1a000
   11834:	ldr	pc, [ip, #2360]!	; 0x938

Disassembly of section .text:

00011838 <lchmod@@Base-0x5088>:
   11838:	mov	fp, #0
   1183c:	mov	lr, #0
   11840:	pop	{r1}		; (ldr r1, [sp], #4)
   11844:	mov	r2, sp
   11848:	push	{r2}		; (str r2, [sp, #-4]!)
   1184c:	push	{r0}		; (str r0, [sp, #-4]!)
   11850:	ldr	ip, [pc, #16]	; 11868 <__assert_fail@plt+0x3c>
   11854:	push	{ip}		; (str ip, [sp, #-4]!)
   11858:	ldr	r0, [pc, #12]	; 1186c <__assert_fail@plt+0x40>
   1185c:	ldr	r3, [pc, #12]	; 11870 <__assert_fail@plt+0x44>
   11860:	bl	115e0 <__libc_start_main@plt>
   11864:	bl	117d8 <abort@plt>
   11868:	andeq	sl, r1, ip, ror sp
   1186c:	andeq	r1, r1, ip, ror #25
   11870:	andeq	sl, r1, ip, lsl sp
   11874:	ldr	r3, [pc, #20]	; 11890 <__assert_fail@plt+0x64>
   11878:	ldr	r2, [pc, #20]	; 11894 <__assert_fail@plt+0x68>
   1187c:	add	r3, pc, r3
   11880:	ldr	r2, [r3, r2]
   11884:	cmp	r2, #0
   11888:	bxeq	lr
   1188c:	b	115f8 <__gmon_start__@plt>
   11890:	andeq	sl, r1, ip, ror r7
   11894:	andeq	r0, r0, r0, ror r1
   11898:	ldr	r0, [pc, #24]	; 118b8 <__assert_fail@plt+0x8c>
   1189c:	ldr	r3, [pc, #24]	; 118bc <__assert_fail@plt+0x90>
   118a0:	cmp	r3, r0
   118a4:	bxeq	lr
   118a8:	ldr	r3, [pc, #16]	; 118c0 <__assert_fail@plt+0x94>
   118ac:	cmp	r3, #0
   118b0:	bxeq	lr
   118b4:	bx	r3
   118b8:	andeq	ip, r2, r4, asr #3
   118bc:	andeq	ip, r2, r4, asr #3
   118c0:	andeq	r0, r0, r0
   118c4:	ldr	r0, [pc, #36]	; 118f0 <__assert_fail@plt+0xc4>
   118c8:	ldr	r1, [pc, #36]	; 118f4 <__assert_fail@plt+0xc8>
   118cc:	sub	r1, r1, r0
   118d0:	asr	r1, r1, #2
   118d4:	add	r1, r1, r1, lsr #31
   118d8:	asrs	r1, r1, #1
   118dc:	bxeq	lr
   118e0:	ldr	r3, [pc, #16]	; 118f8 <__assert_fail@plt+0xcc>
   118e4:	cmp	r3, #0
   118e8:	bxeq	lr
   118ec:	bx	r3
   118f0:	andeq	ip, r2, r4, asr #3
   118f4:	andeq	ip, r2, r4, asr #3
   118f8:	andeq	r0, r0, r0
   118fc:	push	{r4, lr}
   11900:	ldr	r4, [pc, #24]	; 11920 <__assert_fail@plt+0xf4>
   11904:	ldrb	r3, [r4]
   11908:	cmp	r3, #0
   1190c:	popne	{r4, pc}
   11910:	bl	11898 <__assert_fail@plt+0x6c>
   11914:	mov	r3, #1
   11918:	strb	r3, [r4]
   1191c:	pop	{r4, pc}
   11920:	andeq	ip, r2, r4, ror #3
   11924:	b	118c4 <__assert_fail@plt+0x98>
   11928:	push	{lr}		; (str lr, [sp, #-4]!)
   1192c:	sub	sp, sp, #60	; 0x3c
   11930:	subs	r4, r0, #0
   11934:	beq	1197c <__assert_fail@plt+0x150>
   11938:	movw	r3, #49624	; 0xc1d8
   1193c:	movt	r3, #2
   11940:	ldr	r5, [r3]
   11944:	mov	r2, #5
   11948:	movw	r1, #44596	; 0xae34
   1194c:	movt	r1, #1
   11950:	mov	r0, #0
   11954:	bl	114f0 <dcgettext@plt>
   11958:	movw	r3, #49648	; 0xc1f0
   1195c:	movt	r3, #2
   11960:	ldr	r3, [r3]
   11964:	mov	r2, r0
   11968:	mov	r1, #1
   1196c:	mov	r0, r5
   11970:	bl	116d0 <__fprintf_chk@plt>
   11974:	mov	r0, r4
   11978:	bl	11640 <exit@plt>
   1197c:	mov	r2, #5
   11980:	movw	r1, #44636	; 0xae5c
   11984:	movt	r1, #1
   11988:	mov	r0, #0
   1198c:	bl	114f0 <dcgettext@plt>
   11990:	movw	r3, #49648	; 0xc1f0
   11994:	movt	r3, #2
   11998:	ldr	r2, [r3]
   1199c:	mov	r1, r0
   119a0:	mov	r0, #1
   119a4:	bl	116b8 <__printf_chk@plt>
   119a8:	mov	r2, #5
   119ac:	movw	r1, #44668	; 0xae7c
   119b0:	movt	r1, #1
   119b4:	mov	r0, #0
   119b8:	bl	114f0 <dcgettext@plt>
   119bc:	movw	r5, #49628	; 0xc1dc
   119c0:	movt	r5, #2
   119c4:	ldr	r1, [r5]
   119c8:	bl	11430 <fputs_unlocked@plt>
   119cc:	mov	r2, #5
   119d0:	movw	r1, #44720	; 0xaeb0
   119d4:	movt	r1, #1
   119d8:	mov	r0, #0
   119dc:	bl	114f0 <dcgettext@plt>
   119e0:	ldr	r1, [r5]
   119e4:	bl	11430 <fputs_unlocked@plt>
   119e8:	mov	r2, #5
   119ec:	movw	r1, #44796	; 0xaefc
   119f0:	movt	r1, #1
   119f4:	mov	r0, #0
   119f8:	bl	114f0 <dcgettext@plt>
   119fc:	ldr	r1, [r5]
   11a00:	bl	11430 <fputs_unlocked@plt>
   11a04:	mov	r2, #5
   11a08:	movw	r1, #44872	; 0xaf48
   11a0c:	movt	r1, #1
   11a10:	mov	r0, #0
   11a14:	bl	114f0 <dcgettext@plt>
   11a18:	ldr	r1, [r5]
   11a1c:	bl	11430 <fputs_unlocked@plt>
   11a20:	mov	r2, #5
   11a24:	movw	r1, #45080	; 0xb018
   11a28:	movt	r1, #1
   11a2c:	mov	r0, #0
   11a30:	bl	114f0 <dcgettext@plt>
   11a34:	ldr	r1, [r5]
   11a38:	bl	11430 <fputs_unlocked@plt>
   11a3c:	mov	r2, #5
   11a40:	movw	r1, #45128	; 0xb048
   11a44:	movt	r1, #1
   11a48:	mov	r0, #0
   11a4c:	bl	114f0 <dcgettext@plt>
   11a50:	ldr	r1, [r5]
   11a54:	bl	11430 <fputs_unlocked@plt>
   11a58:	movw	r0, #44452	; 0xada4
   11a5c:	movt	r0, #1
   11a60:	ldr	r1, [r0]
   11a64:	ldr	r3, [r0, #4]
   11a68:	str	r1, [sp]
   11a6c:	str	r3, [sp, #4]
   11a70:	ldrd	r2, [r0, #8]
   11a74:	strd	r2, [sp, #8]
   11a78:	ldrd	r2, [r0, #16]
   11a7c:	strd	r2, [sp, #16]
   11a80:	ldrd	r2, [r0, #24]
   11a84:	strd	r2, [sp, #24]
   11a88:	ldrd	r2, [r0, #32]
   11a8c:	strd	r2, [sp, #32]
   11a90:	ldrd	r2, [r0, #40]	; 0x28
   11a94:	strd	r2, [sp, #40]	; 0x28
   11a98:	ldrd	r2, [r0, #48]	; 0x30
   11a9c:	strd	r2, [sp, #48]	; 0x30
   11aa0:	cmp	r1, #0
   11aa4:	moveq	r5, sp
   11aa8:	beq	11ad4 <__assert_fail@plt+0x2a8>
   11aac:	mov	r5, sp
   11ab0:	movw	r6, #44588	; 0xae2c
   11ab4:	movt	r6, #1
   11ab8:	mov	r0, r6
   11abc:	bl	11454 <strcmp@plt>
   11ac0:	cmp	r0, #0
   11ac4:	beq	11ad4 <__assert_fail@plt+0x2a8>
   11ac8:	ldr	r1, [r5, #8]!
   11acc:	cmp	r1, #0
   11ad0:	bne	11ab8 <__assert_fail@plt+0x28c>
   11ad4:	ldr	r5, [r5, #4]
   11ad8:	cmp	r5, #0
   11adc:	beq	11c38 <__assert_fail@plt+0x40c>
   11ae0:	mov	r2, #5
   11ae4:	movw	r1, #45184	; 0xb080
   11ae8:	movt	r1, #1
   11aec:	mov	r0, #0
   11af0:	bl	114f0 <dcgettext@plt>
   11af4:	movw	r3, #45208	; 0xb098
   11af8:	movt	r3, #1
   11afc:	movw	r2, #45248	; 0xb0c0
   11b00:	movt	r2, #1
   11b04:	mov	r1, r0
   11b08:	mov	r0, #1
   11b0c:	bl	116b8 <__printf_chk@plt>
   11b10:	mov	r1, #0
   11b14:	mov	r0, #5
   11b18:	bl	11700 <setlocale@plt>
   11b1c:	cmp	r0, #0
   11b20:	beq	11b3c <__assert_fail@plt+0x310>
   11b24:	mov	r2, #3
   11b28:	movw	r1, #45264	; 0xb0d0
   11b2c:	movt	r1, #1
   11b30:	bl	117cc <strncmp@plt>
   11b34:	cmp	r0, #0
   11b38:	bne	11bb8 <__assert_fail@plt+0x38c>
   11b3c:	mov	r2, #5
   11b40:	movw	r1, #45340	; 0xb11c
   11b44:	movt	r1, #1
   11b48:	mov	r0, #0
   11b4c:	bl	114f0 <dcgettext@plt>
   11b50:	movw	r6, #44588	; 0xae2c
   11b54:	movt	r6, #1
   11b58:	mov	r3, r6
   11b5c:	movw	r2, #45208	; 0xb098
   11b60:	movt	r2, #1
   11b64:	mov	r1, r0
   11b68:	mov	r0, #1
   11b6c:	bl	116b8 <__printf_chk@plt>
   11b70:	mov	r2, #5
   11b74:	movw	r1, #45368	; 0xb138
   11b78:	movt	r1, #1
   11b7c:	mov	r0, #0
   11b80:	bl	114f0 <dcgettext@plt>
   11b84:	mov	r1, r0
   11b88:	movw	r2, #45760	; 0xb2c0
   11b8c:	movt	r2, #1
   11b90:	movw	r3, #46024	; 0xb3c8
   11b94:	movt	r3, #1
   11b98:	cmp	r5, r6
   11b9c:	moveq	r3, r2
   11ba0:	mov	r2, r5
   11ba4:	mov	r0, #1
   11ba8:	bl	116b8 <__printf_chk@plt>
   11bac:	b	11974 <__assert_fail@plt+0x148>
   11bb0:	movw	r5, #44588	; 0xae2c
   11bb4:	movt	r5, #1
   11bb8:	mov	r2, #5
   11bbc:	movw	r1, #45268	; 0xb0d4
   11bc0:	movt	r1, #1
   11bc4:	mov	r0, #0
   11bc8:	bl	114f0 <dcgettext@plt>
   11bcc:	movw	r3, #49628	; 0xc1dc
   11bd0:	movt	r3, #2
   11bd4:	ldr	r1, [r3]
   11bd8:	bl	11430 <fputs_unlocked@plt>
   11bdc:	b	11b3c <__assert_fail@plt+0x310>
   11be0:	mov	r2, #5
   11be4:	movw	r1, #45340	; 0xb11c
   11be8:	movt	r1, #1
   11bec:	mov	r0, #0
   11bf0:	bl	114f0 <dcgettext@plt>
   11bf4:	movw	r5, #44588	; 0xae2c
   11bf8:	movt	r5, #1
   11bfc:	mov	r3, r5
   11c00:	movw	r2, #45208	; 0xb098
   11c04:	movt	r2, #1
   11c08:	mov	r1, r0
   11c0c:	mov	r0, #1
   11c10:	bl	116b8 <__printf_chk@plt>
   11c14:	mov	r2, #5
   11c18:	movw	r1, #45368	; 0xb138
   11c1c:	movt	r1, #1
   11c20:	mov	r0, #0
   11c24:	bl	114f0 <dcgettext@plt>
   11c28:	mov	r1, r0
   11c2c:	movw	r3, #45760	; 0xb2c0
   11c30:	movt	r3, #1
   11c34:	b	11ba0 <__assert_fail@plt+0x374>
   11c38:	mov	r2, #5
   11c3c:	movw	r1, #45184	; 0xb080
   11c40:	movt	r1, #1
   11c44:	mov	r0, #0
   11c48:	bl	114f0 <dcgettext@plt>
   11c4c:	movw	r3, #45208	; 0xb098
   11c50:	movt	r3, #1
   11c54:	movw	r2, #45248	; 0xb0c0
   11c58:	movt	r2, #1
   11c5c:	mov	r1, r0
   11c60:	mov	r0, #1
   11c64:	bl	116b8 <__printf_chk@plt>
   11c68:	mov	r1, #0
   11c6c:	mov	r0, #5
   11c70:	bl	11700 <setlocale@plt>
   11c74:	cmp	r0, #0
   11c78:	beq	11be0 <__assert_fail@plt+0x3b4>
   11c7c:	mov	r2, #3
   11c80:	movw	r1, #45264	; 0xb0d0
   11c84:	movt	r1, #1
   11c88:	bl	117cc <strncmp@plt>
   11c8c:	cmp	r0, #0
   11c90:	bne	11bb0 <__assert_fail@plt+0x384>
   11c94:	mov	r2, #5
   11c98:	movw	r1, #45340	; 0xb11c
   11c9c:	movt	r1, #1
   11ca0:	mov	r0, #0
   11ca4:	bl	114f0 <dcgettext@plt>
   11ca8:	movw	r5, #44588	; 0xae2c
   11cac:	movt	r5, #1
   11cb0:	mov	r3, r5
   11cb4:	movw	r2, #45208	; 0xb098
   11cb8:	movt	r2, #1
   11cbc:	mov	r1, r0
   11cc0:	mov	r0, #1
   11cc4:	bl	116b8 <__printf_chk@plt>
   11cc8:	mov	r2, #5
   11ccc:	movw	r1, #45368	; 0xb138
   11cd0:	movt	r1, #1
   11cd4:	mov	r0, #0
   11cd8:	bl	114f0 <dcgettext@plt>
   11cdc:	mov	r1, r0
   11ce0:	movw	r3, #45760	; 0xb2c0
   11ce4:	movt	r3, #1
   11ce8:	b	11ba0 <__assert_fail@plt+0x374>
   11cec:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11cf0:	strd	r6, [sp, #8]
   11cf4:	strd	r8, [sp, #16]
   11cf8:	strd	sl, [sp, #24]
   11cfc:	str	lr, [sp, #32]
   11d00:	sub	sp, sp, #20
   11d04:	mov	r5, r0
   11d08:	mov	r4, r1
   11d0c:	ldr	r0, [r1]
   11d10:	bl	17030 <lchmod@@Base+0x770>
   11d14:	movw	r1, #46024	; 0xb3c8
   11d18:	movt	r1, #1
   11d1c:	mov	r0, #6
   11d20:	bl	11700 <setlocale@plt>
   11d24:	movw	r6, #45252	; 0xb0c4
   11d28:	movt	r6, #1
   11d2c:	movw	r1, #45420	; 0xb16c
   11d30:	movt	r1, #1
   11d34:	mov	r0, r6
   11d38:	bl	11784 <bindtextdomain@plt>
   11d3c:	mov	r0, r6
   11d40:	bl	11520 <textdomain@plt>
   11d44:	movw	r0, #12084	; 0x2f34
   11d48:	movt	r0, #1
   11d4c:	bl	1ad80 <lchmod@@Base+0x44c0>
   11d50:	mov	r6, #0
   11d54:	mov	fp, r6
   11d58:	mov	r8, r6
   11d5c:	ldr	sl, [pc, #988]	; 12140 <__assert_fail@plt+0x914>
   11d60:	movw	r7, #45564	; 0xb1fc
   11d64:	movt	r7, #1
   11d68:	movw	r9, #49632	; 0xc1e0
   11d6c:	movt	r9, #2
   11d70:	mov	r3, #0
   11d74:	str	r3, [sp]
   11d78:	mov	r3, sl
   11d7c:	mov	r2, r7
   11d80:	mov	r1, r4
   11d84:	mov	r0, r5
   11d88:	bl	1161c <getopt_long@plt>
   11d8c:	cmn	r0, #1
   11d90:	beq	11eb4 <__assert_fail@plt+0x688>
   11d94:	cmn	r0, #2
   11d98:	beq	11ea4 <__assert_fail@plt+0x678>
   11d9c:	ble	11db8 <__assert_fail@plt+0x58c>
   11da0:	cmp	r0, #90	; 0x5a
   11da4:	beq	11e08 <__assert_fail@plt+0x5dc>
   11da8:	cmp	r0, #109	; 0x6d
   11dac:	bne	11eac <__assert_fail@plt+0x680>
   11db0:	ldr	r8, [r9]
   11db4:	b	11d70 <__assert_fail@plt+0x544>
   11db8:	cmn	r0, #3
   11dbc:	bne	11eac <__assert_fail@plt+0x680>
   11dc0:	movw	r3, #49532	; 0xc17c
   11dc4:	movt	r3, #2
   11dc8:	movw	r0, #49628	; 0xc1dc
   11dcc:	movt	r0, #2
   11dd0:	mov	r4, #0
   11dd4:	str	r4, [sp, #4]
   11dd8:	movw	r2, #45548	; 0xb1ec
   11ddc:	movt	r2, #1
   11de0:	str	r2, [sp]
   11de4:	ldr	r3, [r3]
   11de8:	movw	r2, #45248	; 0xb0c0
   11dec:	movt	r2, #1
   11df0:	movw	r1, #44588	; 0xae2c
   11df4:	movt	r1, #1
   11df8:	ldr	r0, [r0]
   11dfc:	bl	19b0c <lchmod@@Base+0x324c>
   11e00:	mov	r0, r4
   11e04:	bl	11640 <exit@plt>
   11e08:	bl	11448 <is_selinux_enabled@plt>
   11e0c:	cmp	r0, #0
   11e10:	ble	11e70 <__assert_fail@plt+0x644>
   11e14:	ldr	r3, [r9]
   11e18:	cmp	r3, #0
   11e1c:	movne	fp, r3
   11e20:	bne	11d70 <__assert_fail@plt+0x544>
   11e24:	mov	r2, #0
   11e28:	mov	r1, r2
   11e2c:	mov	r0, r2
   11e30:	bl	11664 <selabel_open@plt>
   11e34:	subs	r6, r0, #0
   11e38:	bne	11d70 <__assert_fail@plt+0x544>
   11e3c:	bl	11688 <__errno_location@plt>
   11e40:	ldr	r3, [r0]
   11e44:	str	r3, [sp, #8]
   11e48:	mov	r2, #5
   11e4c:	movw	r1, #45444	; 0xb184
   11e50:	movt	r1, #1
   11e54:	mov	r0, #0
   11e58:	bl	114f0 <dcgettext@plt>
   11e5c:	mov	r2, r0
   11e60:	ldr	r1, [sp, #8]
   11e64:	mov	r0, #0
   11e68:	bl	115b0 <error@plt>
   11e6c:	b	11d70 <__assert_fail@plt+0x544>
   11e70:	ldr	r3, [r9]
   11e74:	cmp	r3, #0
   11e78:	beq	11d70 <__assert_fail@plt+0x544>
   11e7c:	mov	r2, #5
   11e80:	movw	r1, #45472	; 0xb1a0
   11e84:	movt	r1, #1
   11e88:	mov	r0, #0
   11e8c:	bl	114f0 <dcgettext@plt>
   11e90:	mov	r2, r0
   11e94:	mov	r1, #0
   11e98:	mov	r0, r1
   11e9c:	bl	115b0 <error@plt>
   11ea0:	b	11d70 <__assert_fail@plt+0x544>
   11ea4:	mov	r0, #0
   11ea8:	bl	11928 <__assert_fail@plt+0xfc>
   11eac:	mov	r0, #1
   11eb0:	bl	11928 <__assert_fail@plt+0xfc>
   11eb4:	movw	r3, #49616	; 0xc1d0
   11eb8:	movt	r3, #2
   11ebc:	ldr	r3, [r3]
   11ec0:	cmp	r3, r5
   11ec4:	beq	11f74 <__assert_fail@plt+0x748>
   11ec8:	cmp	fp, #0
   11ecc:	beq	11ee0 <__assert_fail@plt+0x6b4>
   11ed0:	mov	r0, fp
   11ed4:	bl	1167c <setfscreatecon@plt>
   11ed8:	cmp	r0, #0
   11edc:	blt	11fa0 <__assert_fail@plt+0x774>
   11ee0:	cmp	r8, #0
   11ee4:	beq	12110 <__assert_fail@plt+0x8e4>
   11ee8:	mov	r0, r8
   11eec:	bl	169ec <lchmod@@Base+0x12c>
   11ef0:	subs	r7, r0, #0
   11ef4:	beq	11fdc <__assert_fail@plt+0x7b0>
   11ef8:	mov	r0, #0
   11efc:	bl	1179c <umask@plt>
   11f00:	mov	r9, r0
   11f04:	bl	1179c <umask@plt>
   11f08:	mov	r1, #0
   11f0c:	str	r1, [sp]
   11f10:	mov	r3, r7
   11f14:	mov	r2, r9
   11f18:	movw	r0, #438	; 0x1b6
   11f1c:	bl	16e28 <lchmod@@Base+0x568>
   11f20:	mov	r9, r0
   11f24:	str	r0, [sp, #8]
   11f28:	mov	r0, r7
   11f2c:	bl	1322c <__assert_fail@plt+0x1a00>
   11f30:	bic	r3, r9, #508	; 0x1fc
   11f34:	bic	r3, r3, #3
   11f38:	cmp	r3, #0
   11f3c:	bne	11ffc <__assert_fail@plt+0x7d0>
   11f40:	movw	r3, #49616	; 0xc1d0
   11f44:	movt	r3, #2
   11f48:	ldr	r3, [r3]
   11f4c:	cmp	r5, r3
   11f50:	ble	1211c <__assert_fail@plt+0x8f0>
   11f54:	mov	r9, #0
   11f58:	movw	r7, #49616	; 0xc1d0
   11f5c:	movt	r7, #2
   11f60:	movw	fp, #45720	; 0xb298
   11f64:	movt	fp, #1
   11f68:	movw	sl, #45696	; 0xb280
   11f6c:	movt	sl, #1
   11f70:	b	12078 <__assert_fail@plt+0x84c>
   11f74:	mov	r2, #5
   11f78:	movw	r1, #45568	; 0xb200
   11f7c:	movt	r1, #1
   11f80:	mov	r0, #0
   11f84:	bl	114f0 <dcgettext@plt>
   11f88:	mov	r2, r0
   11f8c:	mov	r1, #0
   11f90:	mov	r0, r1
   11f94:	bl	115b0 <error@plt>
   11f98:	mov	r0, #1
   11f9c:	bl	11928 <__assert_fail@plt+0xfc>
   11fa0:	bl	11688 <__errno_location@plt>
   11fa4:	ldr	r4, [r0]
   11fa8:	mov	r2, #5
   11fac:	movw	r1, #45584	; 0xb210
   11fb0:	movt	r1, #1
   11fb4:	mov	r0, #0
   11fb8:	bl	114f0 <dcgettext@plt>
   11fbc:	mov	r5, r0
   11fc0:	mov	r0, fp
   11fc4:	bl	1932c <lchmod@@Base+0x2a6c>
   11fc8:	mov	r3, r0
   11fcc:	mov	r2, r5
   11fd0:	mov	r1, r4
   11fd4:	mov	r0, #1
   11fd8:	bl	115b0 <error@plt>
   11fdc:	mov	r2, #5
   11fe0:	movw	r1, #45636	; 0xb244
   11fe4:	movt	r1, #1
   11fe8:	bl	114f0 <dcgettext@plt>
   11fec:	mov	r2, r0
   11ff0:	mov	r1, #0
   11ff4:	mov	r0, #1
   11ff8:	bl	115b0 <error@plt>
   11ffc:	mov	r2, #5
   12000:	movw	r1, #45652	; 0xb254
   12004:	movt	r1, #1
   12008:	mov	r0, #0
   1200c:	bl	114f0 <dcgettext@plt>
   12010:	mov	r2, r0
   12014:	mov	r1, #0
   12018:	mov	r0, #1
   1201c:	bl	115b0 <error@plt>
   12020:	bl	11688 <__errno_location@plt>
   12024:	ldr	r9, [r0]
   12028:	mov	r2, #5
   1202c:	mov	r1, sl
   12030:	mov	r0, #0
   12034:	bl	114f0 <dcgettext@plt>
   12038:	str	r0, [sp, #12]
   1203c:	ldr	r3, [r7]
   12040:	ldr	r1, [r4, r3, lsl #2]
   12044:	mov	r0, #4
   12048:	bl	1903c <lchmod@@Base+0x277c>
   1204c:	mov	r3, r0
   12050:	ldr	r2, [sp, #12]
   12054:	mov	r1, r9
   12058:	mov	r0, #0
   1205c:	bl	115b0 <error@plt>
   12060:	mov	r9, #1
   12064:	ldr	r3, [r7]
   12068:	add	r3, r3, #1
   1206c:	str	r3, [r7]
   12070:	cmp	r3, r5
   12074:	bge	12120 <__assert_fail@plt+0x8f4>
   12078:	cmp	r6, #0
   1207c:	beq	12090 <__assert_fail@plt+0x864>
   12080:	mov	r2, #4096	; 0x1000
   12084:	ldr	r1, [r4, r3, lsl #2]
   12088:	mov	r0, r6
   1208c:	bl	1244c <__assert_fail@plt+0xc20>
   12090:	ldr	r3, [r7]
   12094:	ldr	r1, [sp, #8]
   12098:	ldr	r0, [r4, r3, lsl #2]
   1209c:	bl	117fc <mkfifo@plt>
   120a0:	cmp	r0, #0
   120a4:	bne	12020 <__assert_fail@plt+0x7f4>
   120a8:	cmp	r8, #0
   120ac:	beq	12064 <__assert_fail@plt+0x838>
   120b0:	ldr	r3, [r7]
   120b4:	ldr	r1, [sp, #8]
   120b8:	ldr	r0, [r4, r3, lsl #2]
   120bc:	bl	168c0 <lchmod@@Base>
   120c0:	cmp	r0, #0
   120c4:	beq	12064 <__assert_fail@plt+0x838>
   120c8:	bl	11688 <__errno_location@plt>
   120cc:	ldr	r9, [r0]
   120d0:	mov	r2, #5
   120d4:	mov	r1, fp
   120d8:	mov	r0, #0
   120dc:	bl	114f0 <dcgettext@plt>
   120e0:	str	r0, [sp, #12]
   120e4:	ldr	r3, [r7]
   120e8:	ldr	r1, [r4, r3, lsl #2]
   120ec:	mov	r0, #4
   120f0:	bl	1903c <lchmod@@Base+0x277c>
   120f4:	mov	r3, r0
   120f8:	ldr	r2, [sp, #12]
   120fc:	mov	r1, r9
   12100:	mov	r0, #0
   12104:	bl	115b0 <error@plt>
   12108:	mov	r9, #1
   1210c:	b	12064 <__assert_fail@plt+0x838>
   12110:	movw	r3, #438	; 0x1b6
   12114:	str	r3, [sp, #8]
   12118:	b	11f40 <__assert_fail@plt+0x714>
   1211c:	mov	r9, #0
   12120:	mov	r0, r9
   12124:	add	sp, sp, #20
   12128:	ldrd	r4, [sp]
   1212c:	ldrd	r6, [sp, #8]
   12130:	ldrd	r8, [sp, #16]
   12134:	ldrd	sl, [sp, #24]
   12138:	add	sp, sp, #32
   1213c:	pop	{pc}		; (ldr pc, [sp], #4)
   12140:	ldrdeq	sl, [r1], -ip
   12144:	strd	r4, [sp, #-28]!	; 0xffffffe4
   12148:	strd	r6, [sp, #8]
   1214c:	strd	r8, [sp, #16]
   12150:	str	lr, [sp, #24]
   12154:	sub	sp, sp, #116	; 0x74
   12158:	mov	r5, r1
   1215c:	mov	r3, #0
   12160:	str	r3, [sp, #4]
   12164:	str	r3, [sp]
   12168:	subs	r6, r0, #0
   1216c:	beq	12240 <__assert_fail@plt+0xa14>
   12170:	mov	r1, #32768	; 0x8000
   12174:	mov	r0, r5
   12178:	bl	115bc <open64@plt>
   1217c:	mov	r4, r0
   12180:	cmn	r0, #1
   12184:	beq	12298 <__assert_fail@plt+0xa6c>
   12188:	add	r2, sp, #8
   1218c:	mov	r1, r0
   12190:	mov	r0, #3
   12194:	bl	11550 <__fxstat64@plt>
   12198:	cmp	r0, #0
   1219c:	blt	12380 <__assert_fail@plt+0xb54>
   121a0:	ldr	r3, [sp, #24]
   121a4:	mov	r2, r5
   121a8:	add	r1, sp, #4
   121ac:	mov	r0, r6
   121b0:	bl	11418 <selabel_lookup@plt>
   121b4:	cmp	r0, #0
   121b8:	blt	122cc <__assert_fail@plt+0xaa0>
   121bc:	ldr	r0, [sp, #4]
   121c0:	bl	114cc <context_new@plt>
   121c4:	subs	r8, r0, #0
   121c8:	beq	12370 <__assert_fail@plt+0xb44>
   121cc:	cmn	r4, #1
   121d0:	beq	12318 <__assert_fail@plt+0xaec>
   121d4:	mov	r1, sp
   121d8:	mov	r0, r4
   121dc:	bl	195b0 <lchmod@@Base+0x2cf0>
   121e0:	cmp	r0, #0
   121e4:	blt	123e0 <__assert_fail@plt+0xbb4>
   121e8:	ldr	r0, [sp]
   121ec:	bl	114cc <context_new@plt>
   121f0:	subs	r7, r0, #0
   121f4:	beq	12410 <__assert_fail@plt+0xbe4>
   121f8:	mov	r0, r8
   121fc:	bl	11460 <context_type_get@plt>
   12200:	subs	r1, r0, #0
   12204:	beq	12438 <__assert_fail@plt+0xc0c>
   12208:	mov	r0, r7
   1220c:	bl	114fc <context_type_set@plt>
   12210:	cmp	r0, #0
   12214:	bne	122e4 <__assert_fail@plt+0xab8>
   12218:	mov	r0, r7
   1221c:	bl	117a8 <context_str@plt>
   12220:	subs	r1, r0, #0
   12224:	beq	122e4 <__assert_fail@plt+0xab8>
   12228:	cmn	r4, #1
   1222c:	beq	12360 <__assert_fail@plt+0xb34>
   12230:	mov	r0, r4
   12234:	bl	1170c <fsetfilecon@plt>
   12238:	mov	r6, r0
   1223c:	b	1238c <__assert_fail@plt+0xb60>
   12240:	mov	r0, sp
   12244:	bl	11790 <getfscreatecon@plt>
   12248:	cmp	r0, #0
   1224c:	blt	12378 <__assert_fail@plt+0xb4c>
   12250:	ldr	r1, [sp]
   12254:	cmp	r1, #0
   12258:	beq	12284 <__assert_fail@plt+0xa58>
   1225c:	mov	r0, r5
   12260:	bl	11478 <lsetfilecon@plt>
   12264:	mov	r6, r0
   12268:	bl	11688 <__errno_location@plt>
   1226c:	mov	r4, r0
   12270:	ldr	r5, [r0]
   12274:	ldr	r0, [sp]
   12278:	bl	11778 <freecon@plt>
   1227c:	str	r5, [r4]
   12280:	b	123c4 <__assert_fail@plt+0xb98>
   12284:	bl	11688 <__errno_location@plt>
   12288:	mov	r3, #61	; 0x3d
   1228c:	str	r3, [r0]
   12290:	mvn	r6, #0
   12294:	b	123c4 <__assert_fail@plt+0xb98>
   12298:	bl	11688 <__errno_location@plt>
   1229c:	ldr	r3, [r0]
   122a0:	cmp	r3, #40	; 0x28
   122a4:	bne	123ec <__assert_fail@plt+0xbc0>
   122a8:	add	r2, sp, #8
   122ac:	mov	r1, r5
   122b0:	mov	r0, #3
   122b4:	bl	117f0 <__lxstat64@plt>
   122b8:	cmp	r0, #0
   122bc:	bge	121a0 <__assert_fail@plt+0x974>
   122c0:	mov	r7, #0
   122c4:	mov	r8, r7
   122c8:	b	123f4 <__assert_fail@plt+0xbc8>
   122cc:	bl	11688 <__errno_location@plt>
   122d0:	ldr	r3, [r0]
   122d4:	cmp	r3, #2
   122d8:	movne	r7, #0
   122dc:	movne	r8, r7
   122e0:	beq	12304 <__assert_fail@plt+0xad8>
   122e4:	bl	11688 <__errno_location@plt>
   122e8:	mov	r5, r0
   122ec:	ldr	r9, [r0]
   122f0:	cmn	r4, #1
   122f4:	moveq	r6, r4
   122f8:	beq	123a0 <__assert_fail@plt+0xb74>
   122fc:	mvn	r6, #0
   12300:	b	12398 <__assert_fail@plt+0xb6c>
   12304:	mov	r3, #61	; 0x3d
   12308:	str	r3, [r0]
   1230c:	mov	r7, #0
   12310:	mov	r8, r7
   12314:	b	122e4 <__assert_fail@plt+0xab8>
   12318:	mov	r1, sp
   1231c:	mov	r0, r5
   12320:	bl	1958c <lchmod@@Base+0x2ccc>
   12324:	cmp	r0, #0
   12328:	blt	12408 <__assert_fail@plt+0xbdc>
   1232c:	ldr	r0, [sp]
   12330:	bl	114cc <context_new@plt>
   12334:	subs	r7, r0, #0
   12338:	beq	12424 <__assert_fail@plt+0xbf8>
   1233c:	mov	r0, r8
   12340:	bl	11460 <context_type_get@plt>
   12344:	subs	r1, r0, #0
   12348:	bne	12208 <__assert_fail@plt+0x9dc>
   1234c:	bl	11688 <__errno_location@plt>
   12350:	mov	r5, r0
   12354:	ldr	r9, [r0]
   12358:	mov	r6, r4
   1235c:	b	123a0 <__assert_fail@plt+0xb74>
   12360:	mov	r0, r5
   12364:	bl	11478 <lsetfilecon@plt>
   12368:	mov	r4, r0
   1236c:	b	123f4 <__assert_fail@plt+0xbc8>
   12370:	mov	r7, r8
   12374:	b	122e4 <__assert_fail@plt+0xab8>
   12378:	mvn	r6, #0
   1237c:	b	123c4 <__assert_fail@plt+0xb98>
   12380:	mov	r7, #0
   12384:	mov	r8, r7
   12388:	mvn	r6, #0
   1238c:	bl	11688 <__errno_location@plt>
   12390:	mov	r5, r0
   12394:	ldr	r9, [r0]
   12398:	mov	r0, r4
   1239c:	bl	117e4 <close@plt>
   123a0:	mov	r0, r8
   123a4:	bl	11604 <context_free@plt>
   123a8:	mov	r0, r7
   123ac:	bl	11604 <context_free@plt>
   123b0:	ldr	r0, [sp, #4]
   123b4:	bl	11778 <freecon@plt>
   123b8:	ldr	r0, [sp]
   123bc:	bl	11778 <freecon@plt>
   123c0:	str	r9, [r5]
   123c4:	mov	r0, r6
   123c8:	add	sp, sp, #116	; 0x74
   123cc:	ldrd	r4, [sp]
   123d0:	ldrd	r6, [sp, #8]
   123d4:	ldrd	r8, [sp, #16]
   123d8:	add	sp, sp, #24
   123dc:	pop	{pc}		; (ldr pc, [sp], #4)
   123e0:	mov	r7, #0
   123e4:	mvn	r6, #0
   123e8:	b	1238c <__assert_fail@plt+0xb60>
   123ec:	mov	r7, #0
   123f0:	mov	r8, r7
   123f4:	bl	11688 <__errno_location@plt>
   123f8:	mov	r5, r0
   123fc:	ldr	r9, [r0]
   12400:	mov	r6, r4
   12404:	b	123a0 <__assert_fail@plt+0xb74>
   12408:	mov	r7, #0
   1240c:	b	123f4 <__assert_fail@plt+0xbc8>
   12410:	bl	11688 <__errno_location@plt>
   12414:	mov	r5, r0
   12418:	ldr	r9, [r0]
   1241c:	mvn	r6, #0
   12420:	b	12398 <__assert_fail@plt+0xb6c>
   12424:	bl	11688 <__errno_location@plt>
   12428:	mov	r5, r0
   1242c:	ldr	r9, [r0]
   12430:	mov	r6, r4
   12434:	b	123a0 <__assert_fail@plt+0xb74>
   12438:	bl	11688 <__errno_location@plt>
   1243c:	mov	r5, r0
   12440:	ldr	r9, [r0]
   12444:	mvn	r6, #0
   12448:	b	12398 <__assert_fail@plt+0xb6c>
   1244c:	strd	r4, [sp, #-28]!	; 0xffffffe4
   12450:	strd	r6, [sp, #8]
   12454:	strd	r8, [sp, #16]
   12458:	str	lr, [sp, #24]
   1245c:	sub	sp, sp, #20
   12460:	mov	r6, r0
   12464:	mov	r4, r1
   12468:	mov	r5, r2
   1246c:	mov	r3, #0
   12470:	str	r3, [sp, #12]
   12474:	str	r3, [sp, #8]
   12478:	ldrb	r3, [r1]
   1247c:	cmp	r3, #47	; 0x2f
   12480:	beq	125f4 <__assert_fail@plt+0xdc8>
   12484:	mov	r1, #2
   12488:	mov	r0, r4
   1248c:	bl	127d4 <__assert_fail@plt+0xfa8>
   12490:	subs	r4, r0, #0
   12494:	beq	12630 <__assert_fail@plt+0xe04>
   12498:	mov	r7, r4
   1249c:	mov	r3, r5
   124a0:	mov	r2, r4
   124a4:	add	r1, sp, #12
   124a8:	mov	r0, r6
   124ac:	bl	11418 <selabel_lookup@plt>
   124b0:	cmp	r0, #0
   124b4:	blt	125fc <__assert_fail@plt+0xdd0>
   124b8:	mov	r3, #0
   124bc:	str	r3, [sp]
   124c0:	str	r3, [sp, #4]
   124c4:	mov	r0, r4
   124c8:	bl	13044 <__assert_fail@plt+0x1818>
   124cc:	mov	r4, r0
   124d0:	mov	r0, sp
   124d4:	bl	1158c <getcon@plt>
   124d8:	cmp	r0, #0
   124dc:	blt	1267c <__assert_fail@plt+0xe50>
   124e0:	add	r1, sp, #4
   124e4:	mov	r0, r4
   124e8:	bl	19568 <lchmod@@Base+0x2ca8>
   124ec:	cmp	r0, #0
   124f0:	blt	1267c <__assert_fail@plt+0xe50>
   124f4:	mov	r0, r5
   124f8:	bl	11808 <mode_to_security_class@plt>
   124fc:	subs	r2, r0, #0
   12500:	beq	1267c <__assert_fail@plt+0xe50>
   12504:	add	r3, sp, #8
   12508:	ldr	r1, [sp, #4]
   1250c:	ldr	r0, [sp]
   12510:	bl	11748 <security_compute_create@plt>
   12514:	mov	r6, r0
   12518:	bl	11688 <__errno_location@plt>
   1251c:	mov	r5, r0
   12520:	ldr	r8, [r0]
   12524:	mov	r0, r4
   12528:	bl	1322c <__assert_fail@plt+0x1a00>
   1252c:	ldr	r0, [sp]
   12530:	bl	11778 <freecon@plt>
   12534:	ldr	r0, [sp, #4]
   12538:	bl	11778 <freecon@plt>
   1253c:	str	r8, [r5]
   12540:	cmp	r6, #0
   12544:	blt	12640 <__assert_fail@plt+0xe14>
   12548:	ldr	r0, [sp, #12]
   1254c:	bl	114cc <context_new@plt>
   12550:	subs	r4, r0, #0
   12554:	beq	12650 <__assert_fail@plt+0xe24>
   12558:	ldr	r0, [sp, #8]
   1255c:	bl	114cc <context_new@plt>
   12560:	subs	r5, r0, #0
   12564:	beq	1265c <__assert_fail@plt+0xe30>
   12568:	mov	r0, r4
   1256c:	bl	11460 <context_type_get@plt>
   12570:	subs	r1, r0, #0
   12574:	beq	12664 <__assert_fail@plt+0xe38>
   12578:	mov	r0, r5
   1257c:	bl	114fc <context_type_set@plt>
   12580:	cmp	r0, #0
   12584:	bne	1266c <__assert_fail@plt+0xe40>
   12588:	mov	r0, r5
   1258c:	bl	117a8 <context_str@plt>
   12590:	cmp	r0, #0
   12594:	beq	12674 <__assert_fail@plt+0xe48>
   12598:	bl	1167c <setfscreatecon@plt>
   1259c:	mov	r9, r0
   125a0:	bl	11688 <__errno_location@plt>
   125a4:	mov	r6, r0
   125a8:	ldr	r8, [r0]
   125ac:	mov	r0, r4
   125b0:	bl	11604 <context_free@plt>
   125b4:	mov	r0, r5
   125b8:	bl	11604 <context_free@plt>
   125bc:	ldr	r0, [sp, #12]
   125c0:	bl	11778 <freecon@plt>
   125c4:	ldr	r0, [sp, #8]
   125c8:	bl	11778 <freecon@plt>
   125cc:	mov	r0, r7
   125d0:	bl	1322c <__assert_fail@plt+0x1a00>
   125d4:	str	r8, [r6]
   125d8:	mov	r0, r9
   125dc:	add	sp, sp, #20
   125e0:	ldrd	r4, [sp]
   125e4:	ldrd	r6, [sp, #8]
   125e8:	ldrd	r8, [sp, #16]
   125ec:	add	sp, sp, #24
   125f0:	pop	{pc}		; (ldr pc, [sp], #4)
   125f4:	mov	r7, #0
   125f8:	b	1249c <__assert_fail@plt+0xc70>
   125fc:	bl	11688 <__errno_location@plt>
   12600:	ldr	r3, [r0]
   12604:	cmp	r3, #2
   12608:	movne	r5, #0
   1260c:	movne	r4, r5
   12610:	mvnne	r9, #0
   12614:	bne	125a0 <__assert_fail@plt+0xd74>
   12618:	mov	r3, #61	; 0x3d
   1261c:	str	r3, [r0]
   12620:	mov	r5, #0
   12624:	mov	r4, r5
   12628:	mvn	r9, #0
   1262c:	b	125a0 <__assert_fail@plt+0xd74>
   12630:	mov	r7, r4
   12634:	mov	r5, r4
   12638:	mvn	r9, #0
   1263c:	b	125a0 <__assert_fail@plt+0xd74>
   12640:	mov	r5, #0
   12644:	mov	r4, r5
   12648:	mvn	r9, #0
   1264c:	b	125a0 <__assert_fail@plt+0xd74>
   12650:	mov	r5, r4
   12654:	mvn	r9, #0
   12658:	b	125a0 <__assert_fail@plt+0xd74>
   1265c:	mvn	r9, #0
   12660:	b	125a0 <__assert_fail@plt+0xd74>
   12664:	mvn	r9, #0
   12668:	b	125a0 <__assert_fail@plt+0xd74>
   1266c:	mvn	r9, #0
   12670:	b	125a0 <__assert_fail@plt+0xd74>
   12674:	mvn	r9, #0
   12678:	b	125a0 <__assert_fail@plt+0xd74>
   1267c:	bl	11688 <__errno_location@plt>
   12680:	mov	r5, r0
   12684:	ldr	r6, [r0]
   12688:	mov	r0, r4
   1268c:	bl	1322c <__assert_fail@plt+0x1a00>
   12690:	ldr	r0, [sp]
   12694:	bl	11778 <freecon@plt>
   12698:	ldr	r0, [sp, #4]
   1269c:	bl	11778 <freecon@plt>
   126a0:	str	r6, [r5]
   126a4:	mov	r5, #0
   126a8:	mov	r4, r5
   126ac:	mvn	r9, #0
   126b0:	b	125a0 <__assert_fail@plt+0xd74>
   126b4:	strd	r4, [sp, #-20]!	; 0xffffffec
   126b8:	strd	r6, [sp, #8]
   126bc:	str	lr, [sp, #16]
   126c0:	sub	sp, sp, #12
   126c4:	mov	r6, r0
   126c8:	mov	r0, r1
   126cc:	mov	r4, r2
   126d0:	ldrb	r3, [r1]
   126d4:	cmp	r3, #47	; 0x2f
   126d8:	moveq	r7, #0
   126dc:	bne	1270c <__assert_fail@plt+0xee0>
   126e0:	cmp	r4, #0
   126e4:	beq	12728 <__assert_fail@plt+0xefc>
   126e8:	str	r0, [sp]
   126ec:	mov	r5, #0
   126f0:	str	r5, [sp, #4]
   126f4:	mov	r2, r5
   126f8:	mov	r1, #16
   126fc:	mov	r0, sp
   12700:	bl	1a0bc <lchmod@@Base+0x37fc>
   12704:	mov	r4, r0
   12708:	b	12760 <__assert_fail@plt+0xf34>
   1270c:	mov	r1, #2
   12710:	bl	127d4 <__assert_fail@plt+0xfa8>
   12714:	cmp	r0, #0
   12718:	movne	r7, r0
   1271c:	bne	126e0 <__assert_fail@plt+0xeb4>
   12720:	mov	r5, #0
   12724:	b	127bc <__assert_fail@plt+0xf90>
   12728:	mov	r1, r0
   1272c:	mov	r0, r6
   12730:	bl	12144 <__assert_fail@plt+0x918>
   12734:	adds	r5, r0, #1
   12738:	movne	r5, #1
   1273c:	bl	11688 <__errno_location@plt>
   12740:	mov	r4, r0
   12744:	ldr	r6, [r0]
   12748:	mov	r0, r7
   1274c:	bl	1322c <__assert_fail@plt+0x1a00>
   12750:	str	r6, [r4]
   12754:	b	127bc <__assert_fail@plt+0xf90>
   12758:	bl	11688 <__errno_location@plt>
   1275c:	ldr	r5, [r0]
   12760:	mov	r0, r4
   12764:	bl	14dd4 <__assert_fail@plt+0x35a8>
   12768:	cmp	r0, #0
   1276c:	beq	12788 <__assert_fail@plt+0xf5c>
   12770:	ldr	r1, [r4, #24]
   12774:	mov	r0, r6
   12778:	bl	12144 <__assert_fail@plt+0x918>
   1277c:	cmp	r0, #0
   12780:	bge	12760 <__assert_fail@plt+0xf34>
   12784:	b	12758 <__assert_fail@plt+0xf2c>
   12788:	bl	11688 <__errno_location@plt>
   1278c:	mov	r6, r0
   12790:	ldr	r3, [r0]
   12794:	cmp	r3, #0
   12798:	movne	r5, r3
   1279c:	mov	r0, r4
   127a0:	bl	14c58 <__assert_fail@plt+0x342c>
   127a4:	cmp	r0, #0
   127a8:	ldrne	r5, [r6]
   127ac:	mov	r0, r7
   127b0:	bl	1322c <__assert_fail@plt+0x1a00>
   127b4:	clz	r5, r5
   127b8:	lsr	r5, r5, #5
   127bc:	mov	r0, r5
   127c0:	add	sp, sp, #12
   127c4:	ldrd	r4, [sp]
   127c8:	ldrd	r6, [sp, #8]
   127cc:	add	sp, sp, #16
   127d0:	pop	{pc}		; (ldr pc, [sp], #4)
   127d4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   127d8:	strd	r6, [sp, #8]
   127dc:	strd	r8, [sp, #16]
   127e0:	strd	sl, [sp, #24]
   127e4:	str	lr, [sp, #32]
   127e8:	sub	sp, sp, #3232	; 0xca0
   127ec:	sub	sp, sp, #12
   127f0:	and	sl, r1, #3
   127f4:	sub	r3, sl, #1
   127f8:	tst	r3, sl
   127fc:	bne	1289c <__assert_fail@plt+0x1070>
   12800:	mov	r8, r0
   12804:	mov	r5, r1
   12808:	cmp	r0, #0
   1280c:	beq	128b0 <__assert_fail@plt+0x1084>
   12810:	ldrb	r2, [r0]
   12814:	cmp	r2, #0
   12818:	beq	128c4 <__assert_fail@plt+0x1098>
   1281c:	add	r3, sp, #152	; 0x98
   12820:	str	r3, [sp, #144]	; 0x90
   12824:	mov	r3, #1024	; 0x400
   12828:	str	r3, [sp, #148]	; 0x94
   1282c:	add	r1, sp, #1184	; 0x4a0
   12830:	str	r1, [sp, #1176]	; 0x498
   12834:	str	r3, [sp, #1180]	; 0x49c
   12838:	add	r1, sp, #2208	; 0x8a0
   1283c:	add	r1, r1, #8
   12840:	str	r1, [sp, #2208]	; 0x8a0
   12844:	str	r3, [sp, #2212]	; 0x8a4
   12848:	cmp	r2, #47	; 0x2f
   1284c:	addne	r4, sp, #2208	; 0x8a0
   12850:	addne	r4, r4, #8
   12854:	beq	128f4 <__assert_fail@plt+0x10c8>
   12858:	ldr	r1, [sp, #2212]	; 0x8a4
   1285c:	mov	r0, r4
   12860:	bl	11634 <getcwd@plt>
   12864:	cmp	r0, #0
   12868:	bne	128dc <__assert_fail@plt+0x10b0>
   1286c:	bl	11688 <__errno_location@plt>
   12870:	ldr	r3, [r0]
   12874:	cmp	r3, #12
   12878:	beq	128d8 <__assert_fail@plt+0x10ac>
   1287c:	cmp	r3, #34	; 0x22
   12880:	bne	12e50 <__assert_fail@plt+0x1624>
   12884:	add	r0, sp, #2208	; 0x8a0
   12888:	bl	193a8 <lchmod@@Base+0x2ae8>
   1288c:	cmp	r0, #0
   12890:	beq	128d8 <__assert_fail@plt+0x10ac>
   12894:	ldr	r4, [sp, #2208]	; 0x8a0
   12898:	b	12858 <__assert_fail@plt+0x102c>
   1289c:	bl	11688 <__errno_location@plt>
   128a0:	mov	r3, #22
   128a4:	str	r3, [r0]
   128a8:	mov	r0, #0
   128ac:	b	12ea4 <__assert_fail@plt+0x1678>
   128b0:	bl	11688 <__errno_location@plt>
   128b4:	mov	r3, #22
   128b8:	str	r3, [r0]
   128bc:	mov	r0, r8
   128c0:	b	12ea4 <__assert_fail@plt+0x1678>
   128c4:	bl	11688 <__errno_location@plt>
   128c8:	mov	r3, #2
   128cc:	str	r3, [r0]
   128d0:	mov	r0, #0
   128d4:	b	12ea4 <__assert_fail@plt+0x1678>
   128d8:	bl	1a078 <lchmod@@Base+0x37b8>
   128dc:	mov	r1, #0
   128e0:	mov	r0, r4
   128e4:	bl	1152c <rawmemchr@plt>
   128e8:	mov	fp, r4
   128ec:	mov	r4, r0
   128f0:	b	12908 <__assert_fail@plt+0x10dc>
   128f4:	mov	r3, #47	; 0x2f
   128f8:	strb	r3, [sp, #2216]	; 0x8a8
   128fc:	add	fp, sp, #2208	; 0x8a0
   12900:	add	fp, fp, #8
   12904:	add	r4, fp, #1
   12908:	and	r3, r5, #4
   1290c:	str	r3, [sp, #12]
   12910:	mov	r3, #0
   12914:	str	r3, [sp, #16]
   12918:	str	r3, [sp, #20]
   1291c:	str	r3, [sp, #24]
   12920:	movw	r3, #45892	; 0xb344
   12924:	movt	r3, #1
   12928:	str	r3, [sp, #28]
   1292c:	b	12cc8 <__assert_fail@plt+0x149c>
   12930:	ldrb	r3, [r8, #1]
   12934:	cmp	r3, #46	; 0x2e
   12938:	bne	12d3c <__assert_fail@plt+0x1510>
   1293c:	add	r3, fp, #1
   12940:	cmp	r4, r3
   12944:	bls	12cc4 <__assert_fail@plt+0x1498>
   12948:	sub	r3, r4, #1
   1294c:	cmp	fp, r3
   12950:	bcs	12e08 <__assert_fail@plt+0x15dc>
   12954:	ldrb	r2, [r4, #-2]
   12958:	cmp	r2, #47	; 0x2f
   1295c:	moveq	r4, r3
   12960:	beq	12cc4 <__assert_fail@plt+0x1498>
   12964:	sub	r3, r4, #2
   12968:	mov	r1, fp
   1296c:	mov	r4, r3
   12970:	cmp	r3, r1
   12974:	beq	12cc4 <__assert_fail@plt+0x1498>
   12978:	ldrb	r2, [r3, #-1]!
   1297c:	cmp	r2, #47	; 0x2f
   12980:	beq	12cc4 <__assert_fail@plt+0x1498>
   12984:	b	1296c <__assert_fail@plt+0x1140>
   12988:	bl	1a078 <lchmod@@Base+0x37b8>
   1298c:	ldr	r9, [sp, #1176]	; 0x498
   12990:	ldr	r6, [sp, #1180]	; 0x49c
   12994:	sub	r6, r6, #1
   12998:	mov	r2, r6
   1299c:	mov	r1, r9
   129a0:	mov	r0, fp
   129a4:	bl	1155c <readlink@plt>
   129a8:	cmp	r6, r0
   129ac:	bgt	129c8 <__assert_fail@plt+0x119c>
   129b0:	add	r0, sp, #1168	; 0x490
   129b4:	add	r0, r0, #8
   129b8:	bl	193a8 <lchmod@@Base+0x2ae8>
   129bc:	cmp	r0, #0
   129c0:	bne	1298c <__assert_fail@plt+0x1160>
   129c4:	bl	1a078 <lchmod@@Base+0x37b8>
   129c8:	mov	r7, r0
   129cc:	cmp	r0, #0
   129d0:	blt	12dbc <__assert_fail@plt+0x1590>
   129d4:	ldr	r3, [sp, #24]
   129d8:	cmp	r3, #19
   129dc:	addle	r3, r3, #1
   129e0:	strle	r3, [sp, #24]
   129e4:	ble	12acc <__assert_fail@plt+0x12a0>
   129e8:	ldrb	r3, [r8]
   129ec:	cmp	r3, #0
   129f0:	beq	12acc <__assert_fail@plt+0x12a0>
   129f4:	sub	r6, r8, r5
   129f8:	mov	r3, #0
   129fc:	strb	r3, [r4, r6]
   12a00:	ldrb	r1, [fp]
   12a04:	add	r2, sp, #40	; 0x28
   12a08:	ldr	r3, [sp, #28]
   12a0c:	cmp	r1, #0
   12a10:	movne	r3, fp
   12a14:	mov	r1, r3
   12a18:	mov	r0, #3
   12a1c:	bl	117c0 <__xstat64@plt>
   12a20:	cmp	r0, #0
   12a24:	bne	12a6c <__assert_fail@plt+0x1240>
   12a28:	ldrb	r3, [r8]
   12a2c:	strb	r3, [r4, r6]
   12a30:	ldr	r3, [sp, #16]
   12a34:	cmp	r3, #0
   12a38:	beq	12a84 <__assert_fail@plt+0x1258>
   12a3c:	add	r2, sp, #40	; 0x28
   12a40:	mov	r1, r8
   12a44:	ldr	r6, [sp, #16]
   12a48:	mov	r0, r6
   12a4c:	bl	131dc <__assert_fail@plt+0x19b0>
   12a50:	cmp	r0, #0
   12a54:	beq	12abc <__assert_fail@plt+0x1290>
   12a58:	cmp	sl, #2
   12a5c:	beq	12cc4 <__assert_fail@plt+0x1498>
   12a60:	bl	11688 <__errno_location@plt>
   12a64:	mov	r3, #40	; 0x28
   12a68:	str	r3, [r0]
   12a6c:	mov	r6, #1
   12a70:	ldr	r0, [sp, #16]
   12a74:	cmp	r0, #0
   12a78:	beq	12e58 <__assert_fail@plt+0x162c>
   12a7c:	bl	161c0 <__assert_fail@plt+0x4994>
   12a80:	b	12e58 <__assert_fail@plt+0x162c>
   12a84:	movw	r3, #26568	; 0x67c8
   12a88:	movt	r3, #1
   12a8c:	str	r3, [sp]
   12a90:	movw	r3, #26468	; 0x6764
   12a94:	movt	r3, #1
   12a98:	movw	r2, #26396	; 0x671c
   12a9c:	movt	r2, #1
   12aa0:	mov	r1, #0
   12aa4:	mov	r0, #7
   12aa8:	bl	15ff4 <__assert_fail@plt+0x47c8>
   12aac:	subs	r3, r0, #0
   12ab0:	str	r3, [sp, #16]
   12ab4:	bne	12a3c <__assert_fail@plt+0x1210>
   12ab8:	bl	1a078 <lchmod@@Base+0x37b8>
   12abc:	add	r2, sp, #40	; 0x28
   12ac0:	mov	r1, r8
   12ac4:	mov	r0, r6
   12ac8:	bl	13158 <__assert_fail@plt+0x192c>
   12acc:	mov	r3, #0
   12ad0:	strb	r3, [r9, r7]
   12ad4:	ldr	r8, [sp, #144]	; 0x90
   12ad8:	ldr	r3, [sp, #20]
   12adc:	cmp	r3, #0
   12ae0:	beq	12eec <__assert_fail@plt+0x16c0>
   12ae4:	sub	r3, r5, r8
   12ae8:	str	r3, [sp, #36]	; 0x24
   12aec:	mov	r0, r5
   12af0:	bl	11658 <strlen@plt>
   12af4:	str	r0, [sp, #32]
   12af8:	add	r6, r7, r0
   12afc:	ldr	r3, [sp, #148]	; 0x94
   12b00:	cmp	r3, r6
   12b04:	bhi	12b34 <__assert_fail@plt+0x1308>
   12b08:	add	r0, sp, #144	; 0x90
   12b0c:	bl	1942c <lchmod@@Base+0x2b6c>
   12b10:	cmp	r0, #0
   12b14:	beq	12bac <__assert_fail@plt+0x1380>
   12b18:	ldr	r3, [sp, #148]	; 0x94
   12b1c:	cmp	r3, r6
   12b20:	bls	12b08 <__assert_fail@plt+0x12dc>
   12b24:	ldr	r8, [sp, #144]	; 0x90
   12b28:	ldr	r3, [sp, #20]
   12b2c:	cmp	r3, #0
   12b30:	beq	12b3c <__assert_fail@plt+0x1310>
   12b34:	ldr	r3, [sp, #36]	; 0x24
   12b38:	add	r5, r8, r3
   12b3c:	ldr	r3, [sp, #32]
   12b40:	add	r2, r3, #1
   12b44:	mov	r1, r5
   12b48:	add	r0, r8, r7
   12b4c:	bl	11484 <memmove@plt>
   12b50:	mov	r2, r7
   12b54:	mov	r1, r9
   12b58:	mov	r0, r8
   12b5c:	bl	114b4 <memcpy@plt>
   12b60:	mov	r5, r0
   12b64:	ldrb	r3, [r9]
   12b68:	cmp	r3, #47	; 0x2f
   12b6c:	beq	12bb0 <__assert_fail@plt+0x1384>
   12b70:	add	r3, fp, #1
   12b74:	cmp	r4, r3
   12b78:	movls	r3, #1
   12b7c:	strls	r3, [sp, #20]
   12b80:	bls	12cc4 <__assert_fail@plt+0x1498>
   12b84:	sub	r3, r4, #1
   12b88:	cmp	r3, fp
   12b8c:	bls	12e10 <__assert_fail@plt+0x15e4>
   12b90:	ldrb	r2, [r4, #-2]
   12b94:	cmp	r2, #47	; 0x2f
   12b98:	bne	12bc4 <__assert_fail@plt+0x1398>
   12b9c:	mov	r4, r3
   12ba0:	mov	r3, #1
   12ba4:	str	r3, [sp, #20]
   12ba8:	b	12cc4 <__assert_fail@plt+0x1498>
   12bac:	bl	1a078 <lchmod@@Base+0x37b8>
   12bb0:	mov	r4, fp
   12bb4:	strb	r3, [r4], #1
   12bb8:	mov	r3, #1
   12bbc:	str	r3, [sp, #20]
   12bc0:	b	12cc4 <__assert_fail@plt+0x1498>
   12bc4:	sub	r3, r4, #2
   12bc8:	mov	r1, fp
   12bcc:	mov	r4, r3
   12bd0:	cmp	r3, r1
   12bd4:	beq	12e20 <__assert_fail@plt+0x15f4>
   12bd8:	ldrb	r2, [r3, #-1]!
   12bdc:	cmp	r2, #47	; 0x2f
   12be0:	bne	12bcc <__assert_fail@plt+0x13a0>
   12be4:	mov	r3, #1
   12be8:	str	r3, [sp, #20]
   12bec:	b	12cc4 <__assert_fail@plt+0x1498>
   12bf0:	mov	r3, r1
   12bf4:	add	r1, r3, #1
   12bf8:	ldrb	r2, [r3, #1]
   12bfc:	cmp	r2, #47	; 0x2f
   12c00:	beq	12bf0 <__assert_fail@plt+0x13c4>
   12c04:	add	r3, r3, #2
   12c08:	cmp	r2, #0
   12c0c:	beq	12c3c <__assert_fail@plt+0x1410>
   12c10:	cmp	r2, #46	; 0x2e
   12c14:	bne	12c6c <__assert_fail@plt+0x1440>
   12c18:	ldrb	r2, [r1, #1]
   12c1c:	cmp	r2, #0
   12c20:	beq	12c3c <__assert_fail@plt+0x1410>
   12c24:	cmp	r2, #46	; 0x2e
   12c28:	bne	12dc8 <__assert_fail@plt+0x159c>
   12c2c:	ldrb	r2, [r1, #2]
   12c30:	cmp	r2, #47	; 0x2f
   12c34:	cmpne	r2, #0
   12c38:	bne	12dc8 <__assert_fail@plt+0x159c>
   12c3c:	movw	r3, #45896	; 0xb348
   12c40:	movt	r3, #1
   12c44:	ldrh	r3, [r3]
   12c48:	strh	r3, [r4]
   12c4c:	mov	r3, #512	; 0x200
   12c50:	mov	r2, #0
   12c54:	mov	r1, fp
   12c58:	mvn	r0, #99	; 0x63
   12c5c:	bl	1149c <faccessat@plt>
   12c60:	adds	r6, r0, #0
   12c64:	movne	r6, #1
   12c68:	b	12c88 <__assert_fail@plt+0x145c>
   12c6c:	ldr	r3, [sp, #12]
   12c70:	cmp	r3, #0
   12c74:	bne	12dd8 <__assert_fail@plt+0x15ac>
   12c78:	bl	11688 <__errno_location@plt>
   12c7c:	ldr	r6, [r0]
   12c80:	subs	r6, r6, #22
   12c84:	movne	r6, #1
   12c88:	cmp	r6, #0
   12c8c:	beq	12cc4 <__assert_fail@plt+0x1498>
   12c90:	cmp	sl, #1
   12c94:	bne	12a70 <__assert_fail@plt+0x1244>
   12c98:	bl	11688 <__errno_location@plt>
   12c9c:	ldr	r3, [r0]
   12ca0:	cmp	r3, #2
   12ca4:	bne	12a70 <__assert_fail@plt+0x1244>
   12ca8:	movw	r1, #45896	; 0xb348
   12cac:	movt	r1, #1
   12cb0:	mov	r0, r5
   12cb4:	bl	11820 <strspn@plt>
   12cb8:	ldrb	r3, [r5, r0]
   12cbc:	cmp	r3, #0
   12cc0:	bne	12a70 <__assert_fail@plt+0x1244>
   12cc4:	mov	r8, r5
   12cc8:	ldrb	r3, [r8]
   12ccc:	cmp	r3, #0
   12cd0:	beq	12e2c <__assert_fail@plt+0x1600>
   12cd4:	cmp	r3, #47	; 0x2f
   12cd8:	bne	12cf4 <__assert_fail@plt+0x14c8>
   12cdc:	ldrb	r3, [r8, #1]!
   12ce0:	cmp	r3, #47	; 0x2f
   12ce4:	beq	12cdc <__assert_fail@plt+0x14b0>
   12ce8:	cmp	r3, #47	; 0x2f
   12cec:	cmpne	r3, #0
   12cf0:	beq	12e2c <__assert_fail@plt+0x1600>
   12cf4:	mov	r5, r8
   12cf8:	ldrb	r2, [r5, #1]!
   12cfc:	cmp	r2, #0
   12d00:	cmpne	r2, #47	; 0x2f
   12d04:	bne	12cf8 <__assert_fail@plt+0x14cc>
   12d08:	subs	r6, r5, r8
   12d0c:	beq	12e2c <__assert_fail@plt+0x1600>
   12d10:	cmp	r3, #46	; 0x2e
   12d14:	movne	r2, #0
   12d18:	moveq	r2, #1
   12d1c:	cmp	r6, #1
   12d20:	cmpeq	r3, #46	; 0x2e
   12d24:	beq	12cc4 <__assert_fail@plt+0x1498>
   12d28:	cmp	r6, #2
   12d2c:	movne	r3, #0
   12d30:	andeq	r3, r2, #1
   12d34:	cmp	r3, #0
   12d38:	bne	12930 <__assert_fail@plt+0x1104>
   12d3c:	ldrb	r3, [r4, #-1]
   12d40:	cmp	r3, #47	; 0x2f
   12d44:	beq	12d50 <__assert_fail@plt+0x1524>
   12d48:	mov	r3, #47	; 0x2f
   12d4c:	strb	r3, [r4], #1
   12d50:	add	r7, r6, #2
   12d54:	ldr	r3, [sp, #2212]	; 0x8a4
   12d58:	add	r3, fp, r3
   12d5c:	sub	r3, r3, r4
   12d60:	cmp	r3, r7
   12d64:	bcs	12d94 <__assert_fail@plt+0x1568>
   12d68:	sub	r9, r4, fp
   12d6c:	add	r0, sp, #2208	; 0x8a0
   12d70:	bl	1942c <lchmod@@Base+0x2b6c>
   12d74:	cmp	r0, #0
   12d78:	beq	12988 <__assert_fail@plt+0x115c>
   12d7c:	ldr	fp, [sp, #2208]	; 0x8a0
   12d80:	add	r4, fp, r9
   12d84:	ldr	r3, [sp, #2212]	; 0x8a4
   12d88:	sub	r3, r3, r9
   12d8c:	cmp	r3, r7
   12d90:	bcc	12d68 <__assert_fail@plt+0x153c>
   12d94:	mov	r2, r6
   12d98:	mov	r1, r8
   12d9c:	mov	r0, r4
   12da0:	bl	11610 <mempcpy@plt>
   12da4:	mov	r4, r0
   12da8:	mov	r3, #0
   12dac:	strb	r3, [r0]
   12db0:	ldr	r3, [sp, #12]
   12db4:	cmp	r3, #0
   12db8:	beq	1298c <__assert_fail@plt+0x1160>
   12dbc:	cmp	sl, #2
   12dc0:	movne	r3, r5
   12dc4:	beq	12cc4 <__assert_fail@plt+0x1498>
   12dc8:	ldrb	r2, [r3]
   12dcc:	cmp	r2, #47	; 0x2f
   12dd0:	beq	12bf4 <__assert_fail@plt+0x13c8>
   12dd4:	b	12c6c <__assert_fail@plt+0x1440>
   12dd8:	ldrb	r3, [r5]
   12ddc:	cmp	r3, #0
   12de0:	movne	r6, #0
   12de4:	bne	12c88 <__assert_fail@plt+0x145c>
   12de8:	mov	r3, #512	; 0x200
   12dec:	mov	r2, #0
   12df0:	mov	r1, fp
   12df4:	mvn	r0, #99	; 0x63
   12df8:	bl	1149c <faccessat@plt>
   12dfc:	adds	r6, r0, #0
   12e00:	movne	r6, #1
   12e04:	b	12c88 <__assert_fail@plt+0x145c>
   12e08:	mov	r4, r3
   12e0c:	b	12cc4 <__assert_fail@plt+0x1498>
   12e10:	mov	r4, r3
   12e14:	mov	r3, #1
   12e18:	str	r3, [sp, #20]
   12e1c:	b	12cc4 <__assert_fail@plt+0x1498>
   12e20:	mov	r3, #1
   12e24:	str	r3, [sp, #20]
   12e28:	b	12cc4 <__assert_fail@plt+0x1498>
   12e2c:	add	r3, fp, #1
   12e30:	cmp	r4, r3
   12e34:	movls	r6, #0
   12e38:	bls	12a70 <__assert_fail@plt+0x1244>
   12e3c:	ldrb	r3, [r4, #-1]
   12e40:	cmp	r3, #47	; 0x2f
   12e44:	subeq	r4, r4, #1
   12e48:	mov	r6, #0
   12e4c:	b	12a70 <__assert_fail@plt+0x1244>
   12e50:	mov	fp, r4
   12e54:	mov	r6, #1
   12e58:	ldr	r0, [sp, #144]	; 0x90
   12e5c:	add	r3, sp, #152	; 0x98
   12e60:	cmp	r0, r3
   12e64:	beq	12e6c <__assert_fail@plt+0x1640>
   12e68:	bl	1322c <__assert_fail@plt+0x1a00>
   12e6c:	ldr	r0, [sp, #1176]	; 0x498
   12e70:	add	r3, sp, #1184	; 0x4a0
   12e74:	cmp	r0, r3
   12e78:	beq	12e80 <__assert_fail@plt+0x1654>
   12e7c:	bl	1322c <__assert_fail@plt+0x1a00>
   12e80:	cmp	r6, #0
   12e84:	bne	12ec4 <__assert_fail@plt+0x1698>
   12e88:	mov	r3, #0
   12e8c:	strb	r3, [r4], #1
   12e90:	sub	r1, r4, fp
   12e94:	add	r0, sp, #2208	; 0x8a0
   12e98:	bl	1934c <lchmod@@Base+0x2a8c>
   12e9c:	cmp	r0, #0
   12ea0:	beq	12ee8 <__assert_fail@plt+0x16bc>
   12ea4:	add	sp, sp, #3232	; 0xca0
   12ea8:	add	sp, sp, #12
   12eac:	ldrd	r4, [sp]
   12eb0:	ldrd	r6, [sp, #8]
   12eb4:	ldrd	r8, [sp, #16]
   12eb8:	ldrd	sl, [sp, #24]
   12ebc:	add	sp, sp, #32
   12ec0:	pop	{pc}		; (ldr pc, [sp], #4)
   12ec4:	ldr	r0, [sp, #2208]	; 0x8a0
   12ec8:	add	r3, sp, #2208	; 0x8a0
   12ecc:	add	r3, r3, #8
   12ed0:	cmp	r0, r3
   12ed4:	moveq	r0, #0
   12ed8:	beq	12ea4 <__assert_fail@plt+0x1678>
   12edc:	bl	1322c <__assert_fail@plt+0x1a00>
   12ee0:	mov	r0, #0
   12ee4:	b	12ea4 <__assert_fail@plt+0x1678>
   12ee8:	bl	1a078 <lchmod@@Base+0x37b8>
   12eec:	mov	r0, r5
   12ef0:	bl	11658 <strlen@plt>
   12ef4:	str	r0, [sp, #32]
   12ef8:	add	r6, r7, r0
   12efc:	ldr	r3, [sp, #148]	; 0x94
   12f00:	cmp	r3, r6
   12f04:	movls	r3, #0
   12f08:	strls	r3, [sp, #36]	; 0x24
   12f0c:	bls	12b08 <__assert_fail@plt+0x12dc>
   12f10:	b	12b3c <__assert_fail@plt+0x1310>
   12f14:	movw	r3, #49640	; 0xc1e8
   12f18:	movt	r3, #2
   12f1c:	str	r0, [r3]
   12f20:	bx	lr
   12f24:	movw	r3, #49640	; 0xc1e8
   12f28:	movt	r3, #2
   12f2c:	strb	r0, [r3, #4]
   12f30:	bx	lr
   12f34:	strd	r4, [sp, #-16]!
   12f38:	str	r6, [sp, #8]
   12f3c:	str	lr, [sp, #12]
   12f40:	sub	sp, sp, #8
   12f44:	movw	r3, #49628	; 0xc1dc
   12f48:	movt	r3, #2
   12f4c:	ldr	r0, [r3]
   12f50:	bl	1a31c <lchmod@@Base+0x3a5c>
   12f54:	cmp	r0, #0
   12f58:	beq	12f80 <__assert_fail@plt+0x1754>
   12f5c:	movw	r3, #49640	; 0xc1e8
   12f60:	movt	r3, #2
   12f64:	ldrb	r3, [r3, #4]
   12f68:	cmp	r3, #0
   12f6c:	beq	12fac <__assert_fail@plt+0x1780>
   12f70:	bl	11688 <__errno_location@plt>
   12f74:	ldr	r3, [r0]
   12f78:	cmp	r3, #32
   12f7c:	bne	12fac <__assert_fail@plt+0x1780>
   12f80:	movw	r3, #49624	; 0xc1d8
   12f84:	movt	r3, #2
   12f88:	ldr	r0, [r3]
   12f8c:	bl	1a31c <lchmod@@Base+0x3a5c>
   12f90:	cmp	r0, #0
   12f94:	bne	13034 <__assert_fail@plt+0x1808>
   12f98:	add	sp, sp, #8
   12f9c:	ldrd	r4, [sp]
   12fa0:	ldr	r6, [sp, #8]
   12fa4:	add	sp, sp, #12
   12fa8:	pop	{pc}		; (ldr pc, [sp], #4)
   12fac:	mov	r2, #5
   12fb0:	movw	r1, #45900	; 0xb34c
   12fb4:	movt	r1, #1
   12fb8:	mov	r0, #0
   12fbc:	bl	114f0 <dcgettext@plt>
   12fc0:	mov	r4, r0
   12fc4:	movw	r3, #49640	; 0xc1e8
   12fc8:	movt	r3, #2
   12fcc:	ldr	r5, [r3]
   12fd0:	cmp	r5, #0
   12fd4:	beq	13014 <__assert_fail@plt+0x17e8>
   12fd8:	bl	11688 <__errno_location@plt>
   12fdc:	ldr	r6, [r0]
   12fe0:	mov	r0, r5
   12fe4:	bl	19128 <lchmod@@Base+0x2868>
   12fe8:	str	r4, [sp]
   12fec:	mov	r3, r0
   12ff0:	movw	r2, #45912	; 0xb358
   12ff4:	movt	r2, #1
   12ff8:	mov	r1, r6
   12ffc:	mov	r0, #0
   13000:	bl	115b0 <error@plt>
   13004:	movw	r3, #49536	; 0xc180
   13008:	movt	r3, #2
   1300c:	ldr	r0, [r3]
   13010:	bl	114a8 <_exit@plt>
   13014:	bl	11688 <__errno_location@plt>
   13018:	mov	r3, r4
   1301c:	movw	r2, #45916	; 0xb35c
   13020:	movt	r2, #1
   13024:	ldr	r1, [r0]
   13028:	mov	r0, #0
   1302c:	bl	115b0 <error@plt>
   13030:	b	13004 <__assert_fail@plt+0x17d8>
   13034:	movw	r3, #49536	; 0xc180
   13038:	movt	r3, #2
   1303c:	ldr	r0, [r3]
   13040:	bl	114a8 <_exit@plt>
   13044:	str	r4, [sp, #-8]!
   13048:	str	lr, [sp, #4]
   1304c:	bl	130e4 <__assert_fail@plt+0x18b8>
   13050:	cmp	r0, #0
   13054:	beq	13064 <__assert_fail@plt+0x1838>
   13058:	ldr	r4, [sp]
   1305c:	add	sp, sp, #4
   13060:	pop	{pc}		; (ldr pc, [sp], #4)
   13064:	bl	1a078 <lchmod@@Base+0x37b8>
   13068:	strd	r4, [sp, #-16]!
   1306c:	str	r6, [sp, #8]
   13070:	str	lr, [sp, #12]
   13074:	mov	r4, r0
   13078:	ldrb	ip, [r0]
   1307c:	cmp	ip, #47	; 0x2f
   13080:	movne	r5, #0
   13084:	moveq	r5, #1
   13088:	bl	1a258 <lchmod@@Base+0x3998>
   1308c:	sub	r0, r0, r4
   13090:	cmp	r0, r5
   13094:	bls	130d4 <__assert_fail@plt+0x18a8>
   13098:	add	r3, r4, r0
   1309c:	ldrb	r3, [r3, #-1]
   130a0:	cmp	r3, #47	; 0x2f
   130a4:	bne	130d4 <__assert_fail@plt+0x18a8>
   130a8:	sub	r0, r0, #2
   130ac:	add	r3, r4, r0
   130b0:	sub	ip, r4, #1
   130b4:	add	ip, ip, r5
   130b8:	rsb	r2, r4, #1
   130bc:	add	r0, r2, r3
   130c0:	cmp	r3, ip
   130c4:	beq	130d4 <__assert_fail@plt+0x18a8>
   130c8:	ldrb	r1, [r3], #-1
   130cc:	cmp	r1, #47	; 0x2f
   130d0:	beq	130bc <__assert_fail@plt+0x1890>
   130d4:	ldrd	r4, [sp]
   130d8:	ldr	r6, [sp, #8]
   130dc:	add	sp, sp, #12
   130e0:	pop	{pc}		; (ldr pc, [sp], #4)
   130e4:	strd	r4, [sp, #-16]!
   130e8:	str	r6, [sp, #8]
   130ec:	str	lr, [sp, #12]
   130f0:	mov	r6, r0
   130f4:	bl	13068 <__assert_fail@plt+0x183c>
   130f8:	mov	r4, r0
   130fc:	add	r3, r0, #1
   13100:	cmp	r0, #0
   13104:	movne	r0, r3
   13108:	addeq	r0, r3, #1
   1310c:	bl	1a1c0 <lchmod@@Base+0x3900>
   13110:	subs	r5, r0, #0
   13114:	beq	13144 <__assert_fail@plt+0x1918>
   13118:	mov	r2, r4
   1311c:	mov	r1, r6
   13120:	mov	r0, r5
   13124:	bl	114b4 <memcpy@plt>
   13128:	cmp	r4, #0
   1312c:	bne	1313c <__assert_fail@plt+0x1910>
   13130:	mov	r3, #46	; 0x2e
   13134:	strb	r3, [r5]
   13138:	mov	r4, #1
   1313c:	mov	r3, #0
   13140:	strb	r3, [r5, r4]
   13144:	mov	r0, r5
   13148:	ldrd	r4, [sp]
   1314c:	ldr	r6, [sp, #8]
   13150:	add	sp, sp, #12
   13154:	pop	{pc}		; (ldr pc, [sp], #4)
   13158:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1315c:	strd	r6, [sp, #8]
   13160:	str	r8, [sp, #16]
   13164:	str	lr, [sp, #20]
   13168:	subs	r7, r0, #0
   1316c:	beq	131c4 <__assert_fail@plt+0x1998>
   13170:	mov	r5, r2
   13174:	mov	r6, r1
   13178:	mov	r0, #24
   1317c:	bl	19be4 <lchmod@@Base+0x3324>
   13180:	mov	r4, r0
   13184:	mov	r0, r6
   13188:	bl	1a050 <lchmod@@Base+0x3790>
   1318c:	str	r0, [r4]
   13190:	ldrd	r2, [r5, #96]	; 0x60
   13194:	strd	r2, [r4, #8]
   13198:	ldrd	r2, [r5]
   1319c:	strd	r2, [r4, #16]
   131a0:	mov	r1, r4
   131a4:	mov	r0, r7
   131a8:	bl	165a8 <__assert_fail@plt+0x4d7c>
   131ac:	cmp	r0, #0
   131b0:	beq	131d8 <__assert_fail@plt+0x19ac>
   131b4:	cmp	r4, r0
   131b8:	beq	131c4 <__assert_fail@plt+0x1998>
   131bc:	mov	r0, r4
   131c0:	bl	167c8 <__assert_fail@plt+0x4f9c>
   131c4:	ldrd	r4, [sp]
   131c8:	ldrd	r6, [sp, #8]
   131cc:	ldr	r8, [sp, #16]
   131d0:	add	sp, sp, #20
   131d4:	pop	{pc}		; (ldr pc, [sp], #4)
   131d8:	bl	1a078 <lchmod@@Base+0x37b8>
   131dc:	cmp	r0, #0
   131e0:	beq	13224 <__assert_fail@plt+0x19f8>
   131e4:	strd	r4, [sp, #-12]!
   131e8:	str	lr, [sp, #8]
   131ec:	sub	sp, sp, #28
   131f0:	str	r1, [sp]
   131f4:	ldrd	r4, [r2, #96]	; 0x60
   131f8:	strd	r4, [sp, #8]
   131fc:	ldrd	r2, [r2]
   13200:	strd	r2, [sp, #16]
   13204:	mov	r1, sp
   13208:	bl	15d00 <__assert_fail@plt+0x44d4>
   1320c:	adds	r0, r0, #0
   13210:	movne	r0, #1
   13214:	add	sp, sp, #28
   13218:	ldrd	r4, [sp]
   1321c:	add	sp, sp, #8
   13220:	pop	{pc}		; (ldr pc, [sp], #4)
   13224:	mov	r0, #0
   13228:	bx	lr
   1322c:	strd	r4, [sp, #-12]!
   13230:	str	lr, [sp, #8]
   13234:	sub	sp, sp, #12
   13238:	mov	r5, r0
   1323c:	bl	11688 <__errno_location@plt>
   13240:	mov	r4, r0
   13244:	ldr	r3, [r0]
   13248:	str	r3, [sp]
   1324c:	str	r3, [sp, #4]
   13250:	mov	r3, #0
   13254:	str	r3, [r0]
   13258:	mov	r0, r5
   1325c:	bl	11490 <free@plt>
   13260:	ldr	r3, [r4]
   13264:	clz	r3, r3
   13268:	lsr	r3, r3, #5
   1326c:	add	r2, sp, #8
   13270:	add	r3, r2, r3, lsl #2
   13274:	ldr	r3, [r3, #-8]
   13278:	str	r3, [r4]
   1327c:	add	sp, sp, #12
   13280:	ldrd	r4, [sp]
   13284:	add	sp, sp, #8
   13288:	pop	{pc}		; (ldr pc, [sp], #4)
   1328c:	strd	r4, [sp, #-8]!
   13290:	ldrd	r4, [r0, #8]
   13294:	ldrd	r2, [r1, #8]
   13298:	cmp	r5, r3
   1329c:	cmpeq	r4, r2
   132a0:	movne	r0, #0
   132a4:	beq	132b4 <__assert_fail@plt+0x1a88>
   132a8:	ldrd	r4, [sp]
   132ac:	add	sp, sp, #8
   132b0:	bx	lr
   132b4:	ldrd	r4, [r0]
   132b8:	ldrd	r2, [r1]
   132bc:	cmp	r5, r3
   132c0:	cmpeq	r4, r2
   132c4:	moveq	r0, #1
   132c8:	movne	r0, #0
   132cc:	b	132a8 <__assert_fail@plt+0x1a7c>
   132d0:	str	r4, [sp, #-8]!
   132d4:	str	lr, [sp, #4]
   132d8:	mov	r2, r1
   132dc:	mov	r3, #0
   132e0:	ldrd	r0, [r0, #8]
   132e4:	bl	1aba8 <lchmod@@Base+0x42e8>
   132e8:	mov	r0, r2
   132ec:	ldr	r4, [sp]
   132f0:	add	sp, sp, #4
   132f4:	pop	{pc}		; (ldr pc, [sp], #4)
   132f8:	str	r4, [sp, #-8]!
   132fc:	str	lr, [sp, #4]
   13300:	mov	r2, r1
   13304:	mov	r3, #0
   13308:	ldrd	r0, [r0]
   1330c:	bl	1aba8 <lchmod@@Base+0x42e8>
   13310:	mov	r0, r2
   13314:	ldr	r4, [sp]
   13318:	add	sp, sp, #4
   1331c:	pop	{pc}		; (ldr pc, [sp], #4)
   13320:	strd	r4, [sp, #-8]!
   13324:	ldrd	r4, [r0]
   13328:	ldrd	r2, [r1]
   1332c:	cmp	r5, r3
   13330:	cmpeq	r4, r2
   13334:	moveq	r0, #1
   13338:	movne	r0, #0
   1333c:	ldrd	r4, [sp]
   13340:	add	sp, sp, #8
   13344:	bx	lr
   13348:	strd	r4, [sp, #-8]!
   1334c:	ldr	r3, [r0]
   13350:	ldrd	r4, [r3, #160]	; 0xa0
   13354:	ldr	r3, [r1]
   13358:	ldrd	r2, [r3, #160]	; 0xa0
   1335c:	cmp	r5, r3
   13360:	cmpeq	r4, r2
   13364:	movhi	r0, #1
   13368:	movls	r0, #0
   1336c:	movcc	r3, #1
   13370:	movcs	r3, #0
   13374:	sub	r0, r0, r3
   13378:	ldrd	r4, [sp]
   1337c:	add	sp, sp, #8
   13380:	bx	lr
   13384:	strd	r4, [sp, #-16]!
   13388:	str	r6, [sp, #8]
   1338c:	str	lr, [sp, #12]
   13390:	mov	r4, r0
   13394:	ldr	r3, [r0, #36]	; 0x24
   13398:	add	r1, r1, #256	; 0x100
   1339c:	adds	r1, r1, r3
   133a0:	bcs	133d0 <__assert_fail@plt+0x1ba4>
   133a4:	str	r1, [r0, #36]	; 0x24
   133a8:	ldr	r0, [r0, #24]
   133ac:	bl	1a1fc <lchmod@@Base+0x393c>
   133b0:	cmp	r0, #0
   133b4:	strne	r0, [r4, #24]
   133b8:	movne	r0, #1
   133bc:	beq	133f4 <__assert_fail@plt+0x1bc8>
   133c0:	ldrd	r4, [sp]
   133c4:	ldr	r6, [sp, #8]
   133c8:	add	sp, sp, #12
   133cc:	pop	{pc}		; (ldr pc, [sp], #4)
   133d0:	ldr	r0, [r0, #24]
   133d4:	bl	1322c <__assert_fail@plt+0x1a00>
   133d8:	mov	r5, #0
   133dc:	str	r5, [r4, #24]
   133e0:	bl	11688 <__errno_location@plt>
   133e4:	mov	r3, #36	; 0x24
   133e8:	str	r3, [r0]
   133ec:	mov	r0, r5
   133f0:	b	133c0 <__assert_fail@plt+0x1b94>
   133f4:	ldr	r0, [r4, #24]
   133f8:	bl	1322c <__assert_fail@plt+0x1a00>
   133fc:	mov	r0, #0
   13400:	str	r0, [r4, #24]
   13404:	b	133c0 <__assert_fail@plt+0x1b94>
   13408:	strd	r4, [sp, #-16]!
   1340c:	str	r6, [sp, #8]
   13410:	str	lr, [sp, #12]
   13414:	sub	sp, sp, #8
   13418:	mov	r4, r1
   1341c:	add	r5, r1, #64	; 0x40
   13420:	ldr	r3, [r1, #48]	; 0x30
   13424:	cmp	r3, #0
   13428:	bne	13438 <__assert_fail@plt+0x1c0c>
   1342c:	ldr	r3, [r0, #48]	; 0x30
   13430:	tst	r3, #1
   13434:	bne	13448 <__assert_fail@plt+0x1c1c>
   13438:	ldr	r3, [r0, #48]	; 0x30
   1343c:	ubfx	r3, r3, #1, #1
   13440:	orrs	r3, r2, r3
   13444:	beq	134bc <__assert_fail@plt+0x1c90>
   13448:	mov	r2, r5
   1344c:	ldr	r1, [r4, #24]
   13450:	mov	r0, #3
   13454:	bl	117c0 <__xstat64@plt>
   13458:	cmp	r0, #0
   1345c:	beq	134e0 <__assert_fail@plt+0x1cb4>
   13460:	bl	11688 <__errno_location@plt>
   13464:	mov	r6, r0
   13468:	ldr	r3, [r0]
   1346c:	cmp	r3, #2
   13470:	bne	1349c <__assert_fail@plt+0x1c70>
   13474:	mov	r2, r5
   13478:	ldr	r1, [r4, #24]
   1347c:	mov	r0, #3
   13480:	bl	117f0 <__lxstat64@plt>
   13484:	cmp	r0, #0
   13488:	bne	1349c <__assert_fail@plt+0x1c70>
   1348c:	mov	r3, #0
   13490:	str	r3, [r6]
   13494:	mov	r0, #13
   13498:	b	13504 <__assert_fail@plt+0x1cd8>
   1349c:	ldr	r3, [r6]
   134a0:	str	r3, [r4, #32]
   134a4:	mov	r2, #104	; 0x68
   134a8:	mov	r1, #0
   134ac:	mov	r0, r5
   134b0:	bl	116ac <memset@plt>
   134b4:	mov	r0, #10
   134b8:	b	13504 <__assert_fail@plt+0x1cd8>
   134bc:	mov	r3, #256	; 0x100
   134c0:	str	r3, [sp]
   134c4:	mov	r3, r5
   134c8:	ldr	r2, [r4, #24]
   134cc:	ldr	r1, [r0, #32]
   134d0:	mov	r0, #3
   134d4:	bl	11538 <__fxstatat64@plt>
   134d8:	cmp	r0, #0
   134dc:	bne	13518 <__assert_fail@plt+0x1cec>
   134e0:	ldr	r3, [r4, #80]	; 0x50
   134e4:	and	r3, r3, #61440	; 0xf000
   134e8:	cmp	r3, #16384	; 0x4000
   134ec:	beq	13528 <__assert_fail@plt+0x1cfc>
   134f0:	cmp	r3, #40960	; 0xa000
   134f4:	beq	13570 <__assert_fail@plt+0x1d44>
   134f8:	cmp	r3, #32768	; 0x8000
   134fc:	movne	r0, #3
   13500:	moveq	r0, #8
   13504:	add	sp, sp, #8
   13508:	ldrd	r4, [sp]
   1350c:	ldr	r6, [sp, #8]
   13510:	add	sp, sp, #12
   13514:	pop	{pc}		; (ldr pc, [sp], #4)
   13518:	bl	11688 <__errno_location@plt>
   1351c:	ldr	r3, [r0]
   13520:	str	r3, [r4, #32]
   13524:	b	134a4 <__assert_fail@plt+0x1c78>
   13528:	ldrb	r3, [r4, #168]	; 0xa8
   1352c:	cmp	r3, #46	; 0x2e
   13530:	movne	r0, #1
   13534:	bne	13504 <__assert_fail@plt+0x1cd8>
   13538:	ldrb	r3, [r4, #169]	; 0xa9
   1353c:	cmp	r3, #0
   13540:	beq	1355c <__assert_fail@plt+0x1d30>
   13544:	ldr	r3, [r4, #168]	; 0xa8
   13548:	bic	r3, r3, #-16777216	; 0xff000000
   1354c:	bic	r3, r3, #255	; 0xff
   13550:	cmp	r3, #11776	; 0x2e00
   13554:	movne	r0, #1
   13558:	bne	13504 <__assert_fail@plt+0x1cd8>
   1355c:	ldr	r3, [r4, #48]	; 0x30
   13560:	cmp	r3, #0
   13564:	moveq	r0, #1
   13568:	movne	r0, #5
   1356c:	b	13504 <__assert_fail@plt+0x1cd8>
   13570:	mov	r0, #12
   13574:	b	13504 <__assert_fail@plt+0x1cd8>
   13578:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1357c:	strd	r6, [sp, #8]
   13580:	str	r8, [sp, #16]
   13584:	str	lr, [sp, #20]
   13588:	mov	r6, r0
   1358c:	mov	r4, r1
   13590:	mov	r5, r2
   13594:	ldr	r7, [r0, #44]	; 0x2c
   13598:	ldr	r3, [r0, #40]	; 0x28
   1359c:	cmp	r3, r2
   135a0:	bcs	135cc <__assert_fail@plt+0x1da0>
   135a4:	add	r1, r2, #40	; 0x28
   135a8:	str	r1, [r0, #40]	; 0x28
   135ac:	cmn	r1, #-1073741823	; 0xc0000001
   135b0:	bhi	1364c <__assert_fail@plt+0x1e20>
   135b4:	lsl	r1, r1, #2
   135b8:	ldr	r0, [r0, #8]
   135bc:	bl	1a1fc <lchmod@@Base+0x393c>
   135c0:	cmp	r0, #0
   135c4:	strne	r0, [r6, #8]
   135c8:	beq	1364c <__assert_fail@plt+0x1e20>
   135cc:	ldr	r3, [r6, #8]
   135d0:	cmp	r4, #0
   135d4:	beq	135e8 <__assert_fail@plt+0x1dbc>
   135d8:	str	r4, [r3], #4
   135dc:	ldr	r4, [r4, #8]
   135e0:	cmp	r4, #0
   135e4:	bne	135d8 <__assert_fail@plt+0x1dac>
   135e8:	mov	r3, r7
   135ec:	mov	r2, #4
   135f0:	mov	r1, r5
   135f4:	ldr	r0, [r6, #8]
   135f8:	bl	1176c <qsort@plt>
   135fc:	ldr	lr, [r6, #8]
   13600:	ldr	r0, [lr]
   13604:	subs	r3, r5, #1
   13608:	beq	1362c <__assert_fail@plt+0x1e00>
   1360c:	mov	r2, lr
   13610:	ldr	r1, [r2]
   13614:	ldr	ip, [r2, #4]!
   13618:	str	ip, [r1, #8]
   1361c:	subs	r3, r3, #1
   13620:	bne	13610 <__assert_fail@plt+0x1de4>
   13624:	sub	r5, r5, #-1073741823	; 0xc0000001
   13628:	add	lr, lr, r5, lsl #2
   1362c:	ldr	r3, [lr]
   13630:	mov	r2, #0
   13634:	str	r2, [r3, #8]
   13638:	ldrd	r4, [sp]
   1363c:	ldrd	r6, [sp, #8]
   13640:	ldr	r8, [sp, #16]
   13644:	add	sp, sp, #20
   13648:	pop	{pc}		; (ldr pc, [sp], #4)
   1364c:	ldr	r0, [r6, #8]
   13650:	bl	1322c <__assert_fail@plt+0x1a00>
   13654:	mov	r3, #0
   13658:	str	r3, [r6, #8]
   1365c:	str	r3, [r6, #40]	; 0x28
   13660:	mov	r0, r4
   13664:	b	13638 <__assert_fail@plt+0x1e0c>
   13668:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1366c:	strd	r6, [sp, #8]
   13670:	str	r8, [sp, #16]
   13674:	str	lr, [sp, #20]
   13678:	mov	r6, r0
   1367c:	mov	r7, r1
   13680:	mov	r5, r2
   13684:	add	r0, r2, #176	; 0xb0
   13688:	bic	r0, r0, #7
   1368c:	bl	1a1c0 <lchmod@@Base+0x3900>
   13690:	subs	r4, r0, #0
   13694:	beq	136e0 <__assert_fail@plt+0x1eb4>
   13698:	mov	r2, r5
   1369c:	mov	r1, r7
   136a0:	add	r0, r4, #168	; 0xa8
   136a4:	bl	114b4 <memcpy@plt>
   136a8:	add	r2, r4, r5
   136ac:	mov	r3, #0
   136b0:	strb	r3, [r2, #168]	; 0xa8
   136b4:	str	r5, [r4, #52]	; 0x34
   136b8:	str	r6, [r4, #44]	; 0x2c
   136bc:	ldr	r2, [r6, #24]
   136c0:	str	r2, [r4, #28]
   136c4:	str	r3, [r4, #32]
   136c8:	str	r3, [r4, #12]
   136cc:	strh	r3, [r4, #58]	; 0x3a
   136d0:	mov	r2, #3
   136d4:	strh	r2, [r4, #60]	; 0x3c
   136d8:	str	r3, [r4, #16]
   136dc:	str	r3, [r4, #20]
   136e0:	mov	r0, r4
   136e4:	ldrd	r4, [sp]
   136e8:	ldrd	r6, [sp, #8]
   136ec:	ldr	r8, [sp, #16]
   136f0:	add	sp, sp, #20
   136f4:	pop	{pc}		; (ldr pc, [sp], #4)
   136f8:	str	r4, [sp, #-8]!
   136fc:	str	lr, [sp, #4]
   13700:	sub	sp, sp, #8
   13704:	mov	r4, r0
   13708:	ldr	r3, [r0, #48]	; 0x30
   1370c:	movw	r2, #258	; 0x102
   13710:	tst	r2, r3
   13714:	beq	1375c <__assert_fail@plt+0x1f30>
   13718:	movw	r3, #12844	; 0x322c
   1371c:	movt	r3, #1
   13720:	str	r3, [sp]
   13724:	movw	r3, #12940	; 0x328c
   13728:	movt	r3, #1
   1372c:	movw	r2, #13008	; 0x32d0
   13730:	movt	r2, #1
   13734:	mov	r1, #0
   13738:	mov	r0, #31
   1373c:	bl	15ff4 <__assert_fail@plt+0x47c8>
   13740:	str	r0, [r4, #56]	; 0x38
   13744:	adds	r0, r0, #0
   13748:	movne	r0, #1
   1374c:	add	sp, sp, #8
   13750:	ldr	r4, [sp]
   13754:	add	sp, sp, #4
   13758:	pop	{pc}		; (ldr pc, [sp], #4)
   1375c:	mov	r0, #32
   13760:	bl	1a1c0 <lchmod@@Base+0x3900>
   13764:	str	r0, [r4, #56]	; 0x38
   13768:	cmp	r0, #0
   1376c:	moveq	r0, #0
   13770:	beq	1374c <__assert_fail@plt+0x1f20>
   13774:	bl	1a3a8 <lchmod@@Base+0x3ae8>
   13778:	mov	r0, #1
   1377c:	b	1374c <__assert_fail@plt+0x1f20>
   13780:	str	r4, [sp, #-8]!
   13784:	str	lr, [sp, #4]
   13788:	mov	ip, r1
   1378c:	ldr	r3, [r0, #48]	; 0x30
   13790:	lsl	r2, r3, #11
   13794:	and	r2, r2, #32768	; 0x8000
   13798:	orr	r2, r2, #540672	; 0x84000
   1379c:	orr	r2, r2, #2304	; 0x900
   137a0:	tst	r3, #512	; 0x200
   137a4:	beq	137bc <__assert_fail@plt+0x1f90>
   137a8:	ldr	r0, [r0, #32]
   137ac:	bl	16f80 <lchmod@@Base+0x6c0>
   137b0:	ldr	r4, [sp]
   137b4:	add	sp, sp, #4
   137b8:	pop	{pc}		; (ldr pc, [sp], #4)
   137bc:	mov	r1, r2
   137c0:	mov	r0, ip
   137c4:	bl	1a7dc <lchmod@@Base+0x3f1c>
   137c8:	b	137b0 <__assert_fail@plt+0x1f84>
   137cc:	strd	r4, [sp, #-16]!
   137d0:	str	r6, [sp, #8]
   137d4:	str	lr, [sp, #12]
   137d8:	subs	r4, r0, #0
   137dc:	bne	13808 <__assert_fail@plt+0x1fdc>
   137e0:	ldrd	r4, [sp]
   137e4:	ldr	r6, [sp, #8]
   137e8:	add	sp, sp, #12
   137ec:	pop	{pc}		; (ldr pc, [sp], #4)
   137f0:	bl	11814 <closedir@plt>
   137f4:	mov	r0, r4
   137f8:	bl	1322c <__assert_fail@plt+0x1a00>
   137fc:	mov	r4, r5
   13800:	cmp	r5, #0
   13804:	beq	137e0 <__assert_fail@plt+0x1fb4>
   13808:	ldr	r5, [r4, #8]
   1380c:	ldr	r0, [r4, #12]
   13810:	cmp	r0, #0
   13814:	bne	137f0 <__assert_fail@plt+0x1fc4>
   13818:	b	137f4 <__assert_fail@plt+0x1fc8>
   1381c:	str	r4, [sp, #-8]!
   13820:	str	lr, [sp, #4]
   13824:	ldr	r3, [r0, #48]	; 0x30
   13828:	movw	r2, #258	; 0x102
   1382c:	tst	r2, r3
   13830:	beq	13850 <__assert_fail@plt+0x2024>
   13834:	ldr	r0, [r0, #56]	; 0x38
   13838:	cmp	r0, #0
   1383c:	beq	13844 <__assert_fail@plt+0x2018>
   13840:	bl	161c0 <__assert_fail@plt+0x4994>
   13844:	ldr	r4, [sp]
   13848:	add	sp, sp, #4
   1384c:	pop	{pc}		; (ldr pc, [sp], #4)
   13850:	ldr	r0, [r0, #56]	; 0x38
   13854:	bl	1322c <__assert_fail@plt+0x1a00>
   13858:	b	13844 <__assert_fail@plt+0x2018>
   1385c:	str	r4, [sp, #-8]!
   13860:	str	lr, [sp, #4]
   13864:	mov	r4, r0
   13868:	mov	r0, r4
   1386c:	bl	1681c <__assert_fail@plt+0x4ff0>
   13870:	cmp	r0, #0
   13874:	bne	13890 <__assert_fail@plt+0x2064>
   13878:	mov	r0, r4
   1387c:	bl	16870 <__assert_fail@plt+0x5044>
   13880:	cmp	r0, #0
   13884:	blt	13868 <__assert_fail@plt+0x203c>
   13888:	bl	117e4 <close@plt>
   1388c:	b	13868 <__assert_fail@plt+0x203c>
   13890:	ldr	r4, [sp]
   13894:	add	sp, sp, #4
   13898:	pop	{pc}		; (ldr pc, [sp], #4)
   1389c:	strd	r4, [sp, #-20]!	; 0xffffffec
   138a0:	strd	r6, [sp, #8]
   138a4:	str	lr, [sp, #16]
   138a8:	sub	sp, sp, #116	; 0x74
   138ac:	ldr	r7, [r0, #44]	; 0x2c
   138b0:	ldr	r3, [r7, #48]	; 0x30
   138b4:	ands	r3, r3, #512	; 0x200
   138b8:	beq	139a8 <__assert_fail@plt+0x217c>
   138bc:	mov	r6, r1
   138c0:	mov	r5, r0
   138c4:	ldr	r4, [r7, #52]	; 0x34
   138c8:	cmp	r4, #0
   138cc:	beq	138f4 <__assert_fail@plt+0x20c8>
   138d0:	ldrd	r2, [r5, #64]	; 0x40
   138d4:	strd	r2, [sp, #8]
   138d8:	add	r1, sp, #8
   138dc:	mov	r0, r4
   138e0:	bl	15d00 <__assert_fail@plt+0x44d4>
   138e4:	cmp	r0, #0
   138e8:	beq	1392c <__assert_fail@plt+0x2100>
   138ec:	ldr	r3, [r0, #8]
   138f0:	b	139a8 <__assert_fail@plt+0x217c>
   138f4:	movw	r3, #12844	; 0x322c
   138f8:	movt	r3, #1
   138fc:	str	r3, [sp]
   13900:	movw	r3, #13088	; 0x3320
   13904:	movt	r3, #1
   13908:	movw	r2, #13048	; 0x32f8
   1390c:	movt	r2, #1
   13910:	mov	r1, #0
   13914:	mov	r0, #13
   13918:	bl	15ff4 <__assert_fail@plt+0x47c8>
   1391c:	mov	r4, r0
   13920:	str	r0, [r7, #52]	; 0x34
   13924:	cmp	r0, #0
   13928:	bne	138d0 <__assert_fail@plt+0x20a4>
   1392c:	cmp	r6, #0
   13930:	blt	139a4 <__assert_fail@plt+0x2178>
   13934:	add	r1, sp, #24
   13938:	mov	r0, r6
   1393c:	bl	1140c <fstatfs64@plt>
   13940:	cmp	r0, #0
   13944:	bne	139c0 <__assert_fail@plt+0x2194>
   13948:	cmp	r4, #0
   1394c:	beq	1398c <__assert_fail@plt+0x2160>
   13950:	mov	r0, #16
   13954:	bl	1a1c0 <lchmod@@Base+0x3900>
   13958:	subs	r6, r0, #0
   1395c:	beq	1398c <__assert_fail@plt+0x2160>
   13960:	ldrd	r2, [r5, #64]	; 0x40
   13964:	strd	r2, [r6]
   13968:	ldr	r3, [sp, #24]
   1396c:	str	r3, [r6, #8]
   13970:	mov	r1, r6
   13974:	mov	r0, r4
   13978:	bl	165a8 <__assert_fail@plt+0x4d7c>
   1397c:	cmp	r0, #0
   13980:	beq	13998 <__assert_fail@plt+0x216c>
   13984:	cmp	r6, r0
   13988:	bne	13994 <__assert_fail@plt+0x2168>
   1398c:	ldr	r3, [sp, #24]
   13990:	b	139a8 <__assert_fail@plt+0x217c>
   13994:	bl	117d8 <abort@plt>
   13998:	mov	r0, r6
   1399c:	bl	1322c <__assert_fail@plt+0x1a00>
   139a0:	b	1398c <__assert_fail@plt+0x2160>
   139a4:	mov	r3, #0
   139a8:	mov	r0, r3
   139ac:	add	sp, sp, #116	; 0x74
   139b0:	ldrd	r4, [sp]
   139b4:	ldrd	r6, [sp, #8]
   139b8:	add	sp, sp, #16
   139bc:	pop	{pc}		; (ldr pc, [sp], #4)
   139c0:	mov	r3, #0
   139c4:	b	139a8 <__assert_fail@plt+0x217c>
   139c8:	strd	r4, [sp, #-16]!
   139cc:	str	r6, [sp, #8]
   139d0:	str	lr, [sp, #12]
   139d4:	mov	r5, r0
   139d8:	mov	r4, r1
   139dc:	ldr	r3, [r0, #48]	; 0x30
   139e0:	movw	r2, #258	; 0x102
   139e4:	tst	r2, r3
   139e8:	beq	13a5c <__assert_fail@plt+0x2230>
   139ec:	mov	r0, #24
   139f0:	bl	1a1c0 <lchmod@@Base+0x3900>
   139f4:	subs	r6, r0, #0
   139f8:	moveq	r0, #0
   139fc:	beq	13a80 <__assert_fail@plt+0x2254>
   13a00:	ldrd	r2, [r4, #64]	; 0x40
   13a04:	strd	r2, [r6]
   13a08:	ldrd	r2, [r4, #160]	; 0xa0
   13a0c:	strd	r2, [r6, #8]
   13a10:	str	r4, [r6, #16]
   13a14:	mov	r1, r6
   13a18:	ldr	r0, [r5, #56]	; 0x38
   13a1c:	bl	165a8 <__assert_fail@plt+0x4d7c>
   13a20:	mov	r5, r0
   13a24:	cmp	r6, r0
   13a28:	moveq	r0, #1
   13a2c:	beq	13a80 <__assert_fail@plt+0x2254>
   13a30:	mov	r0, r6
   13a34:	bl	1322c <__assert_fail@plt+0x1a00>
   13a38:	cmp	r5, #0
   13a3c:	moveq	r0, #0
   13a40:	beq	13a80 <__assert_fail@plt+0x2254>
   13a44:	ldr	r3, [r5, #16]
   13a48:	str	r3, [r4]
   13a4c:	mov	r3, #2
   13a50:	strh	r3, [r4, #56]	; 0x38
   13a54:	mov	r0, #1
   13a58:	b	13a80 <__assert_fail@plt+0x2254>
   13a5c:	add	r1, r1, #64	; 0x40
   13a60:	ldr	r0, [r0, #56]	; 0x38
   13a64:	bl	1a3c4 <lchmod@@Base+0x3b04>
   13a68:	cmp	r0, #0
   13a6c:	moveq	r0, #1
   13a70:	beq	13a80 <__assert_fail@plt+0x2254>
   13a74:	str	r4, [r4]
   13a78:	mov	r3, #2
   13a7c:	strh	r3, [r4, #56]	; 0x38
   13a80:	ldrd	r4, [sp]
   13a84:	ldr	r6, [sp, #8]
   13a88:	add	sp, sp, #12
   13a8c:	pop	{pc}		; (ldr pc, [sp], #4)
   13a90:	strd	r4, [sp, #-16]!
   13a94:	str	r6, [sp, #8]
   13a98:	str	lr, [sp, #12]
   13a9c:	mov	r5, r1
   13aa0:	ldr	r1, [r0, #32]
   13aa4:	cmp	r1, r5
   13aa8:	movne	r3, #0
   13aac:	moveq	r3, #1
   13ab0:	cmn	r1, #100	; 0x64
   13ab4:	moveq	r3, #0
   13ab8:	cmp	r3, #0
   13abc:	bne	13b00 <__assert_fail@plt+0x22d4>
   13ac0:	mov	r4, r0
   13ac4:	cmp	r2, #0
   13ac8:	bne	13b04 <__assert_fail@plt+0x22d8>
   13acc:	ldr	r3, [r0, #48]	; 0x30
   13ad0:	eor	r3, r3, #4
   13ad4:	ubfx	r3, r3, #2, #1
   13ad8:	cmp	r1, #0
   13adc:	movlt	r3, #0
   13ae0:	andge	r3, r3, #1
   13ae4:	cmp	r3, #0
   13ae8:	bne	13b1c <__assert_fail@plt+0x22f0>
   13aec:	str	r5, [r4, #32]
   13af0:	ldrd	r4, [sp]
   13af4:	ldr	r6, [sp, #8]
   13af8:	add	sp, sp, #12
   13afc:	pop	{pc}		; (ldr pc, [sp], #4)
   13b00:	bl	117d8 <abort@plt>
   13b04:	add	r0, r0, #60	; 0x3c
   13b08:	bl	16824 <__assert_fail@plt+0x4ff8>
   13b0c:	cmp	r0, #0
   13b10:	blt	13aec <__assert_fail@plt+0x22c0>
   13b14:	bl	117e4 <close@plt>
   13b18:	b	13aec <__assert_fail@plt+0x22c0>
   13b1c:	mov	r0, r1
   13b20:	bl	117e4 <close@plt>
   13b24:	b	13aec <__assert_fail@plt+0x22c0>
   13b28:	strd	r4, [sp, #-16]!
   13b2c:	str	r6, [sp, #8]
   13b30:	str	lr, [sp, #12]
   13b34:	mov	r4, r0
   13b38:	ldr	r3, [r0, #48]	; 0x30
   13b3c:	ands	r5, r3, #4
   13b40:	movne	r5, #0
   13b44:	bne	13b5c <__assert_fail@plt+0x2330>
   13b48:	tst	r3, #512	; 0x200
   13b4c:	beq	13b78 <__assert_fail@plt+0x234c>
   13b50:	mov	r2, #1
   13b54:	mvn	r1, #99	; 0x63
   13b58:	bl	13a90 <__assert_fail@plt+0x2264>
   13b5c:	add	r0, r4, #60	; 0x3c
   13b60:	bl	1385c <__assert_fail@plt+0x2030>
   13b64:	mov	r0, r5
   13b68:	ldrd	r4, [sp]
   13b6c:	ldr	r6, [sp, #8]
   13b70:	add	sp, sp, #12
   13b74:	pop	{pc}		; (ldr pc, [sp], #4)
   13b78:	ldr	r0, [r0, #28]
   13b7c:	bl	11760 <fchdir@plt>
   13b80:	adds	r5, r0, #0
   13b84:	movne	r5, #1
   13b88:	b	13b5c <__assert_fail@plt+0x2330>
   13b8c:	strd	r4, [sp, #-28]!	; 0xffffffe4
   13b90:	strd	r6, [sp, #8]
   13b94:	strd	r8, [sp, #16]
   13b98:	str	lr, [sp, #24]
   13b9c:	sub	sp, sp, #108	; 0x6c
   13ba0:	mov	r4, r0
   13ba4:	mov	r7, r1
   13ba8:	mov	r5, r2
   13bac:	subs	r9, r3, #0
   13bb0:	beq	13cdc <__assert_fail@plt+0x24b0>
   13bb4:	movw	r1, #45920	; 0xb360
   13bb8:	movt	r1, #1
   13bbc:	mov	r0, r9
   13bc0:	bl	11454 <strcmp@plt>
   13bc4:	cmp	r0, #0
   13bc8:	bne	13cdc <__assert_fail@plt+0x24b0>
   13bcc:	ldr	r3, [r4, #48]	; 0x30
   13bd0:	tst	r3, #4
   13bd4:	bne	13c1c <__assert_fail@plt+0x23f0>
   13bd8:	cmp	r5, #0
   13bdc:	bge	13c90 <__assert_fail@plt+0x2464>
   13be0:	tst	r3, #512	; 0x200
   13be4:	beq	13bfc <__assert_fail@plt+0x23d0>
   13be8:	add	r6, r4, #60	; 0x3c
   13bec:	mov	r0, r6
   13bf0:	bl	1681c <__assert_fail@plt+0x4ff0>
   13bf4:	cmp	r0, #0
   13bf8:	beq	13c48 <__assert_fail@plt+0x241c>
   13bfc:	mov	r8, #1
   13c00:	mov	r1, r9
   13c04:	mov	r0, r4
   13c08:	bl	13780 <__assert_fail@plt+0x1f54>
   13c0c:	subs	r6, r0, #0
   13c10:	bge	13cf8 <__assert_fail@plt+0x24cc>
   13c14:	mvn	r4, #0
   13c18:	b	13d7c <__assert_fail@plt+0x2550>
   13c1c:	ubfx	r3, r3, #9, #1
   13c20:	cmp	r5, #0
   13c24:	movlt	r3, #0
   13c28:	andge	r3, r3, #1
   13c2c:	cmp	r3, #0
   13c30:	moveq	r4, #0
   13c34:	beq	13d7c <__assert_fail@plt+0x2550>
   13c38:	mov	r0, r5
   13c3c:	bl	117e4 <close@plt>
   13c40:	mov	r4, #0
   13c44:	b	13d7c <__assert_fail@plt+0x2550>
   13c48:	mov	r0, r6
   13c4c:	bl	16870 <__assert_fail@plt+0x5044>
   13c50:	subs	r6, r0, #0
   13c54:	blt	13bfc <__assert_fail@plt+0x23d0>
   13c58:	ldr	r3, [r4, #48]	; 0x30
   13c5c:	tst	r3, #2
   13c60:	bne	13c9c <__assert_fail@plt+0x2470>
   13c64:	mov	r5, r6
   13c68:	mov	r8, #1
   13c6c:	ldr	r3, [r4, #48]	; 0x30
   13c70:	tst	r3, #512	; 0x200
   13c74:	bne	13ca8 <__assert_fail@plt+0x247c>
   13c78:	mov	r0, r6
   13c7c:	bl	11760 <fchdir@plt>
   13c80:	mov	r4, r0
   13c84:	b	13d74 <__assert_fail@plt+0x2548>
   13c88:	mov	r8, #0
   13c8c:	b	13c00 <__assert_fail@plt+0x23d4>
   13c90:	mov	r6, r5
   13c94:	mov	r8, #1
   13c98:	b	13cf8 <__assert_fail@plt+0x24cc>
   13c9c:	mov	r5, r6
   13ca0:	mov	r8, #1
   13ca4:	b	13d24 <__assert_fail@plt+0x24f8>
   13ca8:	eor	r2, r8, #1
   13cac:	mov	r1, r6
   13cb0:	mov	r0, r4
   13cb4:	bl	13a90 <__assert_fail@plt+0x2264>
   13cb8:	mov	r4, #0
   13cbc:	b	13d7c <__assert_fail@plt+0x2550>
   13cc0:	bl	11688 <__errno_location@plt>
   13cc4:	mov	r5, r0
   13cc8:	ldr	r7, [r0]
   13ccc:	mov	r0, r6
   13cd0:	bl	117e4 <close@plt>
   13cd4:	str	r7, [r5]
   13cd8:	b	13d7c <__assert_fail@plt+0x2550>
   13cdc:	ldr	r3, [r4, #48]	; 0x30
   13ce0:	tst	r3, #4
   13ce4:	bne	13c1c <__assert_fail@plt+0x23f0>
   13ce8:	cmp	r5, #0
   13cec:	movge	r6, r5
   13cf0:	movge	r8, #0
   13cf4:	blt	13c88 <__assert_fail@plt+0x245c>
   13cf8:	ldr	r3, [r4, #48]	; 0x30
   13cfc:	tst	r3, #2
   13d00:	bne	13d24 <__assert_fail@plt+0x24f8>
   13d04:	cmp	r9, #0
   13d08:	beq	13c6c <__assert_fail@plt+0x2440>
   13d0c:	movw	r1, #45920	; 0xb360
   13d10:	movt	r1, #1
   13d14:	mov	r0, r9
   13d18:	bl	11454 <strcmp@plt>
   13d1c:	cmp	r0, #0
   13d20:	bne	13c6c <__assert_fail@plt+0x2440>
   13d24:	mov	r2, sp
   13d28:	mov	r1, r6
   13d2c:	mov	r0, #3
   13d30:	bl	11550 <__fxstat64@plt>
   13d34:	cmp	r0, #0
   13d38:	bne	13d70 <__assert_fail@plt+0x2544>
   13d3c:	ldrd	r0, [r7, #64]	; 0x40
   13d40:	ldrd	r2, [sp]
   13d44:	cmp	r1, r3
   13d48:	cmpeq	r0, r2
   13d4c:	bne	13d64 <__assert_fail@plt+0x2538>
   13d50:	ldrd	r0, [r7, #160]	; 0xa0
   13d54:	ldrd	r2, [sp, #96]	; 0x60
   13d58:	cmp	r1, r3
   13d5c:	cmpeq	r0, r2
   13d60:	beq	13c6c <__assert_fail@plt+0x2440>
   13d64:	bl	11688 <__errno_location@plt>
   13d68:	mov	r3, #2
   13d6c:	str	r3, [r0]
   13d70:	mvn	r4, #0
   13d74:	cmp	r5, #0
   13d78:	blt	13cc0 <__assert_fail@plt+0x2494>
   13d7c:	mov	r0, r4
   13d80:	add	sp, sp, #108	; 0x6c
   13d84:	ldrd	r4, [sp]
   13d88:	ldrd	r6, [sp, #8]
   13d8c:	ldrd	r8, [sp, #16]
   13d90:	add	sp, sp, #24
   13d94:	pop	{pc}		; (ldr pc, [sp], #4)
   13d98:	strd	r4, [sp, #-12]!
   13d9c:	str	lr, [sp, #8]
   13da0:	sub	sp, sp, #28
   13da4:	ldr	r3, [r0, #48]	; 0x30
   13da8:	movw	r2, #258	; 0x102
   13dac:	tst	r2, r3
   13db0:	bne	13e1c <__assert_fail@plt+0x25f0>
   13db4:	ldr	ip, [r1, #4]
   13db8:	cmp	ip, #0
   13dbc:	beq	13e44 <__assert_fail@plt+0x2618>
   13dc0:	ldr	r3, [ip, #48]	; 0x30
   13dc4:	cmp	r3, #0
   13dc8:	blt	13e44 <__assert_fail@plt+0x2618>
   13dcc:	ldr	lr, [r0, #56]	; 0x38
   13dd0:	ldrd	r2, [lr, #16]
   13dd4:	orrs	r3, r2, r3
   13dd8:	beq	13e58 <__assert_fail@plt+0x262c>
   13ddc:	ldrd	r4, [lr]
   13de0:	ldrd	r2, [r1, #160]	; 0xa0
   13de4:	cmp	r5, r3
   13de8:	cmpeq	r4, r2
   13dec:	bne	13e44 <__assert_fail@plt+0x2618>
   13df0:	ldrd	r2, [lr, #8]
   13df4:	ldrd	r4, [r1, #64]	; 0x40
   13df8:	cmp	r3, r5
   13dfc:	cmpeq	r2, r4
   13e00:	bne	13e44 <__assert_fail@plt+0x2618>
   13e04:	ldrd	r2, [ip, #64]	; 0x40
   13e08:	strd	r2, [lr, #8]
   13e0c:	ldr	r3, [r0, #56]	; 0x38
   13e10:	ldrd	r0, [ip, #160]	; 0xa0
   13e14:	strd	r0, [r3]
   13e18:	b	13e44 <__assert_fail@plt+0x2618>
   13e1c:	ldrd	r2, [r1, #64]	; 0x40
   13e20:	strd	r2, [sp]
   13e24:	ldrd	r2, [r1, #160]	; 0xa0
   13e28:	strd	r2, [sp, #8]
   13e2c:	mov	r1, sp
   13e30:	ldr	r0, [r0, #56]	; 0x38
   13e34:	bl	165e8 <__assert_fail@plt+0x4dbc>
   13e38:	cmp	r0, #0
   13e3c:	beq	13e54 <__assert_fail@plt+0x2628>
   13e40:	bl	1322c <__assert_fail@plt+0x1a00>
   13e44:	add	sp, sp, #28
   13e48:	ldrd	r4, [sp]
   13e4c:	add	sp, sp, #8
   13e50:	pop	{pc}		; (ldr pc, [sp], #4)
   13e54:	bl	117d8 <abort@plt>
   13e58:	bl	117d8 <abort@plt>
   13e5c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13e60:	strd	r6, [sp, #8]
   13e64:	strd	r8, [sp, #16]
   13e68:	strd	sl, [sp, #24]
   13e6c:	str	lr, [sp, #32]
   13e70:	sub	sp, sp, #68	; 0x44
   13e74:	mov	r5, r0
   13e78:	str	r1, [sp, #32]
   13e7c:	ldr	r9, [r0]
   13e80:	ldr	r0, [r9, #12]
   13e84:	str	r0, [sp, #40]	; 0x28
   13e88:	cmp	r0, #0
   13e8c:	beq	13f9c <__assert_fail@plt+0x2770>
   13e90:	bl	11754 <dirfd@plt>
   13e94:	str	r0, [sp, #60]	; 0x3c
   13e98:	cmp	r0, #0
   13e9c:	blt	13f58 <__assert_fail@plt+0x272c>
   13ea0:	ldr	r2, [r5, #44]	; 0x2c
   13ea4:	movw	r3, #34464	; 0x86a0
   13ea8:	movt	r3, #1
   13eac:	cmp	r2, #0
   13eb0:	mvnne	r3, #0
   13eb4:	str	r3, [sp, #16]
   13eb8:	mov	r3, #1
   13ebc:	str	r3, [sp, #52]	; 0x34
   13ec0:	ldr	r3, [r9, #40]	; 0x28
   13ec4:	sub	r1, r3, #1
   13ec8:	ldr	r2, [r9, #28]
   13ecc:	ldrb	r2, [r2, r1]
   13ed0:	cmp	r2, #47	; 0x2f
   13ed4:	movne	r1, r3
   13ed8:	str	r1, [sp, #28]
   13edc:	ldr	r3, [r5, #48]	; 0x30
   13ee0:	tst	r3, #4
   13ee4:	moveq	r3, #0
   13ee8:	streq	r3, [sp, #20]
   13eec:	beq	13f08 <__assert_fail@plt+0x26dc>
   13ef0:	ldr	r3, [r5, #24]
   13ef4:	add	r2, r3, r1
   13ef8:	add	r2, r2, #1
   13efc:	str	r2, [sp, #20]
   13f00:	mov	r2, #47	; 0x2f
   13f04:	strb	r2, [r3, r1]
   13f08:	ldr	r3, [sp, #28]
   13f0c:	add	sl, r3, #1
   13f10:	ldr	fp, [r5, #36]	; 0x24
   13f14:	sub	fp, fp, sl
   13f18:	ldr	r3, [r9, #48]	; 0x30
   13f1c:	add	r3, r3, #1
   13f20:	str	r3, [sp, #12]
   13f24:	mov	r3, #0
   13f28:	str	r3, [sp, #36]	; 0x24
   13f2c:	str	r3, [sp, #24]
   13f30:	str	r3, [sp]
   13f34:	mov	r8, r3
   13f38:	str	r3, [sp, #4]
   13f3c:	movw	r3, #6548	; 0x1994
   13f40:	movt	r3, #258	; 0x102
   13f44:	str	r3, [sp, #44]	; 0x2c
   13f48:	movw	r3, #19778	; 0x4d42
   13f4c:	movt	r3, #65363	; 0xff53
   13f50:	str	r3, [sp, #48]	; 0x30
   13f54:	b	14534 <__assert_fail@plt+0x2d08>
   13f58:	ldr	r0, [r9, #12]
   13f5c:	bl	11814 <closedir@plt>
   13f60:	mov	r3, #0
   13f64:	str	r3, [r9, #12]
   13f68:	ldr	r3, [sp, #32]
   13f6c:	cmp	r3, #3
   13f70:	movne	r3, #0
   13f74:	strne	r3, [sp, #4]
   13f78:	bne	143e4 <__assert_fail@plt+0x2bb8>
   13f7c:	mov	r3, #4
   13f80:	strh	r3, [r9, #56]	; 0x38
   13f84:	bl	11688 <__errno_location@plt>
   13f88:	ldr	r3, [r0]
   13f8c:	str	r3, [r9, #32]
   13f90:	mov	r3, #0
   13f94:	str	r3, [sp, #4]
   13f98:	b	143e4 <__assert_fail@plt+0x2bb8>
   13f9c:	ldr	r3, [r5, #48]	; 0x30
   13fa0:	and	r2, r3, #516	; 0x204
   13fa4:	cmp	r2, #512	; 0x200
   13fa8:	ldreq	r0, [r5, #32]
   13fac:	mvnne	r0, #99	; 0x63
   13fb0:	ldr	r1, [r9, #24]
   13fb4:	ands	r2, r3, #16
   13fb8:	beq	13fd4 <__assert_fail@plt+0x27a8>
   13fbc:	tst	r3, #1
   13fc0:	moveq	r2, #32768	; 0x8000
   13fc4:	beq	13fd4 <__assert_fail@plt+0x27a8>
   13fc8:	ldr	r2, [r9, #48]	; 0x30
   13fcc:	cmp	r2, #0
   13fd0:	movne	r2, #32768	; 0x8000
   13fd4:	add	r3, sp, #60	; 0x3c
   13fd8:	bl	16fbc <lchmod@@Base+0x6fc>
   13fdc:	str	r0, [sp, #4]
   13fe0:	str	r0, [r9, #12]
   13fe4:	cmp	r0, #0
   13fe8:	beq	140bc <__assert_fail@plt+0x2890>
   13fec:	ldrh	r3, [r9, #56]	; 0x38
   13ff0:	cmp	r3, #11
   13ff4:	beq	140e0 <__assert_fail@plt+0x28b4>
   13ff8:	ldr	r3, [r5, #48]	; 0x30
   13ffc:	tst	r3, #256	; 0x100
   14000:	bne	140f8 <__assert_fail@plt+0x28cc>
   14004:	ldr	r2, [r5, #44]	; 0x2c
   14008:	movw	r3, #34464	; 0x86a0
   1400c:	movt	r3, #1
   14010:	cmp	r2, #0
   14014:	mvnne	r3, #0
   14018:	str	r3, [sp, #16]
   1401c:	ldr	r3, [sp, #32]
   14020:	cmp	r3, #2
   14024:	beq	1421c <__assert_fail@plt+0x29f0>
   14028:	ldr	r3, [r5, #48]	; 0x30
   1402c:	and	r3, r3, #56	; 0x38
   14030:	cmp	r3, #24
   14034:	beq	14140 <__assert_fail@plt+0x2914>
   14038:	ldr	r3, [sp, #32]
   1403c:	cmp	r3, #3
   14040:	movne	r4, #0
   14044:	moveq	r4, #1
   14048:	mov	r6, #1
   1404c:	ldr	r3, [r5, #48]	; 0x30
   14050:	tst	r3, #512	; 0x200
   14054:	bne	141d8 <__assert_fail@plt+0x29ac>
   14058:	ldr	r2, [sp, #60]	; 0x3c
   1405c:	cmp	r2, #0
   14060:	bge	141f0 <__assert_fail@plt+0x29c4>
   14064:	tst	r4, r6
   14068:	beq	14078 <__assert_fail@plt+0x284c>
   1406c:	bl	11688 <__errno_location@plt>
   14070:	ldr	r3, [r0]
   14074:	str	r3, [r9, #32]
   14078:	ldrh	r3, [r9, #58]	; 0x3a
   1407c:	orr	r3, r3, #1
   14080:	strh	r3, [r9, #58]	; 0x3a
   14084:	ldr	r0, [r9, #12]
   14088:	bl	11814 <closedir@plt>
   1408c:	mov	r3, #0
   14090:	str	r3, [r9, #12]
   14094:	ldr	r3, [r5, #48]	; 0x30
   14098:	tst	r3, #512	; 0x200
   1409c:	beq	140ac <__assert_fail@plt+0x2880>
   140a0:	ldr	r0, [sp, #60]	; 0x3c
   140a4:	cmp	r0, #0
   140a8:	bge	14214 <__assert_fail@plt+0x29e8>
   140ac:	mov	r3, #0
   140b0:	str	r3, [r9, #12]
   140b4:	str	r3, [sp, #52]	; 0x34
   140b8:	b	13ec0 <__assert_fail@plt+0x2694>
   140bc:	ldr	r3, [sp, #32]
   140c0:	cmp	r3, #3
   140c4:	bne	143e4 <__assert_fail@plt+0x2bb8>
   140c8:	mov	r3, #4
   140cc:	strh	r3, [r9, #56]	; 0x38
   140d0:	bl	11688 <__errno_location@plt>
   140d4:	ldr	r3, [r0]
   140d8:	str	r3, [r9, #32]
   140dc:	b	143e4 <__assert_fail@plt+0x2bb8>
   140e0:	mov	r2, #0
   140e4:	mov	r1, r9
   140e8:	mov	r0, r5
   140ec:	bl	13408 <__assert_fail@plt+0x1bdc>
   140f0:	strh	r0, [r9, #56]	; 0x38
   140f4:	b	14004 <__assert_fail@plt+0x27d8>
   140f8:	mov	r1, r9
   140fc:	mov	r0, r5
   14100:	bl	13d98 <__assert_fail@plt+0x256c>
   14104:	mov	r2, #0
   14108:	mov	r1, r9
   1410c:	mov	r0, r5
   14110:	bl	13408 <__assert_fail@plt+0x1bdc>
   14114:	mov	r1, r9
   14118:	mov	r0, r5
   1411c:	bl	139c8 <__assert_fail@plt+0x219c>
   14120:	cmp	r0, #0
   14124:	bne	14004 <__assert_fail@plt+0x27d8>
   14128:	bl	11688 <__errno_location@plt>
   1412c:	mov	r3, #12
   14130:	str	r3, [r0]
   14134:	ldr	r3, [sp, #40]	; 0x28
   14138:	str	r3, [sp, #4]
   1413c:	b	143e4 <__assert_fail@plt+0x2bb8>
   14140:	ldr	r3, [r9, #84]	; 0x54
   14144:	cmp	r3, #2
   14148:	bne	14038 <__assert_fail@plt+0x280c>
   1414c:	ldr	r1, [sp, #60]	; 0x3c
   14150:	mov	r0, r9
   14154:	bl	1389c <__assert_fail@plt+0x2070>
   14158:	movw	r3, #26985	; 0x6969
   1415c:	cmp	r0, r3
   14160:	beq	141c0 <__assert_fail@plt+0x2994>
   14164:	bgt	141a4 <__assert_fail@plt+0x2978>
   14168:	movw	r3, #19778	; 0x4d42
   1416c:	movt	r3, #65363	; 0xff53
   14170:	cmp	r0, r3
   14174:	beq	141c0 <__assert_fail@plt+0x2994>
   14178:	cmp	r0, #0
   1417c:	beq	141c0 <__assert_fail@plt+0x2994>
   14180:	ldr	r3, [sp, #32]
   14184:	cmp	r3, #3
   14188:	moveq	r4, #1
   1418c:	movne	r4, #0
   14190:	movne	r3, #0
   14194:	strne	r3, [sp, #52]	; 0x34
   14198:	bne	13ec0 <__assert_fail@plt+0x2694>
   1419c:	mov	r6, #0
   141a0:	b	1404c <__assert_fail@plt+0x2820>
   141a4:	movw	r3, #40864	; 0x9fa0
   141a8:	cmp	r0, r3
   141ac:	beq	141c0 <__assert_fail@plt+0x2994>
   141b0:	movw	r3, #16719	; 0x414f
   141b4:	movt	r3, #21318	; 0x5346
   141b8:	cmp	r0, r3
   141bc:	bne	14180 <__assert_fail@plt+0x2954>
   141c0:	ldr	r3, [sp, #32]
   141c4:	cmp	r3, #3
   141c8:	movne	r4, #0
   141cc:	moveq	r4, #1
   141d0:	mov	r6, #1
   141d4:	b	1404c <__assert_fail@plt+0x2820>
   141d8:	mov	r2, #3
   141dc:	movw	r1, #1030	; 0x406
   141e0:	ldr	r0, [sp, #60]	; 0x3c
   141e4:	bl	1a570 <lchmod@@Base+0x3cb0>
   141e8:	str	r0, [sp, #60]	; 0x3c
   141ec:	b	14058 <__assert_fail@plt+0x282c>
   141f0:	mov	r3, #0
   141f4:	mov	r1, r9
   141f8:	mov	r0, r5
   141fc:	bl	13b8c <__assert_fail@plt+0x2360>
   14200:	cmp	r0, #0
   14204:	moveq	r3, #1
   14208:	streq	r3, [sp, #52]	; 0x34
   1420c:	beq	13ec0 <__assert_fail@plt+0x2694>
   14210:	b	14064 <__assert_fail@plt+0x2838>
   14214:	bl	117e4 <close@plt>
   14218:	b	140ac <__assert_fail@plt+0x2880>
   1421c:	mov	r3, #0
   14220:	str	r3, [sp, #52]	; 0x34
   14224:	b	13ec0 <__assert_fail@plt+0x2694>
   14228:	ldr	r3, [sp, #8]
   1422c:	ldr	r3, [r3]
   14230:	cmp	r3, #0
   14234:	beq	14254 <__assert_fail@plt+0x2a28>
   14238:	str	r3, [r9, #32]
   1423c:	ldr	r3, [sp, #40]	; 0x28
   14240:	orr	r3, r3, r8
   14244:	cmp	r3, #0
   14248:	movne	r3, #7
   1424c:	moveq	r3, #4
   14250:	strh	r3, [r9, #56]	; 0x38
   14254:	ldr	r0, [r9, #12]
   14258:	cmp	r0, #0
   1425c:	beq	1426c <__assert_fail@plt+0x2a40>
   14260:	bl	11814 <closedir@plt>
   14264:	mov	r3, #0
   14268:	str	r3, [r9, #12]
   1426c:	ldr	r3, [sp, #24]
   14270:	cmp	r3, #0
   14274:	bne	14734 <__assert_fail@plt+0x2f08>
   14278:	ldr	r3, [r5, #48]	; 0x30
   1427c:	tst	r3, #4
   14280:	beq	142ac <__assert_fail@plt+0x2a80>
   14284:	ldr	r3, [r5, #36]	; 0x24
   14288:	cmp	r8, #0
   1428c:	cmpne	r3, sl
   14290:	bne	142a0 <__assert_fail@plt+0x2a74>
   14294:	ldr	r3, [sp, #20]
   14298:	sub	r3, r3, #1
   1429c:	str	r3, [sp, #20]
   142a0:	mov	r3, #0
   142a4:	ldr	r2, [sp, #20]
   142a8:	strb	r3, [r2]
   142ac:	ldr	r3, [sp, #52]	; 0x34
   142b0:	ldr	r2, [sp, #40]	; 0x28
   142b4:	cmp	r2, #0
   142b8:	movne	r3, #0
   142bc:	cmp	r3, #0
   142c0:	beq	142f8 <__assert_fail@plt+0x2acc>
   142c4:	ldr	r3, [sp, #32]
   142c8:	cmp	r8, #0
   142cc:	cmpne	r3, #1
   142d0:	bne	14300 <__assert_fail@plt+0x2ad4>
   142d4:	ldr	r3, [r9, #48]	; 0x30
   142d8:	cmp	r3, #0
   142dc:	bne	147c4 <__assert_fail@plt+0x2f98>
   142e0:	mov	r0, r5
   142e4:	bl	13b28 <__assert_fail@plt+0x22fc>
   142e8:	adds	r0, r0, #0
   142ec:	movne	r0, #1
   142f0:	cmp	r0, #0
   142f4:	bne	147e8 <__assert_fail@plt+0x2fbc>
   142f8:	cmp	r8, #0
   142fc:	beq	14810 <__assert_fail@plt+0x2fe4>
   14300:	ldr	r3, [sp, #36]	; 0x24
   14304:	cmp	r3, #0
   14308:	bne	14848 <__assert_fail@plt+0x301c>
   1430c:	ldr	r3, [r5, #44]	; 0x2c
   14310:	cmp	r3, #0
   14314:	cmpne	r8, #1
   14318:	bls	143e4 <__assert_fail@plt+0x2bb8>
   1431c:	mov	r2, r8
   14320:	ldr	r1, [sp, #4]
   14324:	mov	r0, r5
   14328:	bl	13578 <__assert_fail@plt+0x1d4c>
   1432c:	str	r0, [sp, #4]
   14330:	b	143e4 <__assert_fail@plt+0x2bb8>
   14334:	ldrb	r3, [r7, #20]
   14338:	cmp	r3, #0
   1433c:	beq	1472c <__assert_fail@plt+0x2f00>
   14340:	ldrh	r3, [r7, #20]
   14344:	cmp	r3, #46	; 0x2e
   14348:	bne	14578 <__assert_fail@plt+0x2d4c>
   1434c:	ldr	r4, [sp]
   14350:	b	14530 <__assert_fail@plt+0x2d04>
   14354:	ldr	fp, [r5, #24]
   14358:	ldr	r3, [sp, #28]
   1435c:	add	r1, r3, #2
   14360:	add	r1, r1, r6
   14364:	mov	r0, r5
   14368:	bl	13384 <__assert_fail@plt+0x1b58>
   1436c:	cmp	r0, #0
   14370:	beq	143a0 <__assert_fail@plt+0x2b74>
   14374:	ldr	r3, [r5, #24]
   14378:	cmp	r3, fp
   1437c:	beq	14404 <__assert_fail@plt+0x2bd8>
   14380:	ldr	r2, [r5, #48]	; 0x30
   14384:	tst	r2, #4
   14388:	addne	r3, r3, sl
   1438c:	strne	r3, [sp, #20]
   14390:	ldr	fp, [r5, #36]	; 0x24
   14394:	sub	fp, fp, sl
   14398:	str	r0, [sp, #24]
   1439c:	b	145a8 <__assert_fail@plt+0x2d7c>
   143a0:	ldr	r7, [sp, #8]
   143a4:	ldr	r6, [r7]
   143a8:	mov	r0, r4
   143ac:	bl	1322c <__assert_fail@plt+0x1a00>
   143b0:	ldr	r0, [sp, #4]
   143b4:	bl	137cc <__assert_fail@plt+0x1fa0>
   143b8:	ldr	r0, [r9, #12]
   143bc:	bl	11814 <closedir@plt>
   143c0:	mov	r2, #0
   143c4:	str	r2, [r9, #12]
   143c8:	mov	r3, #7
   143cc:	strh	r3, [r9, #56]	; 0x38
   143d0:	ldr	r3, [r5, #48]	; 0x30
   143d4:	orr	r3, r3, #8192	; 0x2000
   143d8:	str	r3, [r5, #48]	; 0x30
   143dc:	str	r6, [r7]
   143e0:	str	r2, [sp, #4]
   143e4:	ldr	r0, [sp, #4]
   143e8:	add	sp, sp, #68	; 0x44
   143ec:	ldrd	r4, [sp]
   143f0:	ldrd	r6, [sp, #8]
   143f4:	ldrd	r8, [sp, #16]
   143f8:	ldrd	sl, [sp, #24]
   143fc:	add	sp, sp, #32
   14400:	pop	{pc}		; (ldr pc, [sp], #4)
   14404:	ldr	r0, [sp, #24]
   14408:	b	14390 <__assert_fail@plt+0x2b64>
   1440c:	mov	r0, r4
   14410:	bl	1322c <__assert_fail@plt+0x1a00>
   14414:	ldr	r0, [sp, #4]
   14418:	bl	137cc <__assert_fail@plt+0x1fa0>
   1441c:	ldr	r0, [r9, #12]
   14420:	bl	11814 <closedir@plt>
   14424:	mov	r2, #0
   14428:	str	r2, [r9, #12]
   1442c:	mov	r3, #7
   14430:	strh	r3, [r9, #56]	; 0x38
   14434:	ldr	r3, [r5, #48]	; 0x30
   14438:	orr	r3, r3, #8192	; 0x2000
   1443c:	str	r3, [r5, #48]	; 0x30
   14440:	mov	r3, #36	; 0x24
   14444:	ldr	r1, [sp, #8]
   14448:	str	r3, [r1]
   1444c:	str	r2, [sp, #4]
   14450:	b	143e4 <__assert_fail@plt+0x2bb8>
   14454:	ldr	r3, [r4, #28]
   14458:	str	r3, [r4, #24]
   1445c:	ldr	r2, [r4, #52]	; 0x34
   14460:	add	r2, r2, #1
   14464:	add	r1, r4, #168	; 0xa8
   14468:	ldr	r0, [sp, #20]
   1446c:	bl	11484 <memmove@plt>
   14470:	b	145e0 <__assert_fail@plt+0x2db4>
   14474:	ubfx	r3, r3, #4, #1
   14478:	cmp	r2, #10
   1447c:	orrne	r3, r3, #1
   14480:	cmp	r3, #0
   14484:	beq	14610 <__assert_fail@plt+0x2de4>
   14488:	mov	r2, #11
   1448c:	strh	r2, [r4, #56]	; 0x38
   14490:	ldrb	r2, [r7, #18]
   14494:	sub	r2, r2, #1
   14498:	cmp	r2, #11
   1449c:	ldrls	pc, [pc, r2, lsl #2]
   144a0:	b	1469c <__assert_fail@plt+0x2e70>
   144a4:	andeq	r4, r1, ip, ror #12
   144a8:	ldrdeq	r4, [r1], -r8
   144ac:	muleq	r1, ip, r6
   144b0:	andeq	r4, r1, r0, ror #12
   144b4:	muleq	r1, ip, r6
   144b8:	andeq	r4, r1, r4, ror r8
   144bc:	muleq	r1, ip, r6
   144c0:	andeq	r4, r1, r4, lsl #13
   144c4:	muleq	r1, ip, r6
   144c8:	andeq	r4, r1, r8, ror r6
   144cc:	muleq	r1, ip, r6
   144d0:	muleq	r1, r0, r6
   144d4:	mov	r3, #0
   144d8:	mov	r2, #8192	; 0x2000
   144dc:	str	r2, [r4, #80]	; 0x50
   144e0:	cmp	r3, #0
   144e4:	movne	r2, #1
   144e8:	moveq	r2, #2
   144ec:	mov	r3, #0
   144f0:	str	r2, [r4, #112]	; 0x70
   144f4:	str	r3, [r4, #116]	; 0x74
   144f8:	mov	r3, #0
   144fc:	str	r3, [r4, #8]
   14500:	ldr	r3, [sp, #4]
   14504:	cmp	r3, #0
   14508:	ldrne	r3, [sp]
   1450c:	strne	r4, [r3, #8]
   14510:	streq	r4, [sp, #4]
   14514:	movw	r3, #10000	; 0x2710
   14518:	cmp	r8, r3
   1451c:	beq	146bc <__assert_fail@plt+0x2e90>
   14520:	add	r8, r8, #1
   14524:	ldr	r3, [sp, #16]
   14528:	cmp	r8, r3
   1452c:	bcs	1426c <__assert_fail@plt+0x2a40>
   14530:	str	r4, [sp]
   14534:	ldr	r3, [r9, #12]
   14538:	cmp	r3, #0
   1453c:	beq	1426c <__assert_fail@plt+0x2a40>
   14540:	bl	11688 <__errno_location@plt>
   14544:	str	r0, [sp, #8]
   14548:	mov	r3, #0
   1454c:	str	r3, [r0]
   14550:	ldr	r0, [r9, #12]
   14554:	bl	11730 <readdir64@plt>
   14558:	subs	r7, r0, #0
   1455c:	beq	14228 <__assert_fail@plt+0x29fc>
   14560:	ldr	r3, [r5, #48]	; 0x30
   14564:	tst	r3, #32
   14568:	bne	14578 <__assert_fail@plt+0x2d4c>
   1456c:	ldrb	r3, [r7, #19]
   14570:	cmp	r3, #46	; 0x2e
   14574:	beq	14334 <__assert_fail@plt+0x2b08>
   14578:	add	r4, r7, #19
   1457c:	mov	r0, r4
   14580:	bl	11658 <strlen@plt>
   14584:	mov	r6, r0
   14588:	mov	r2, r0
   1458c:	mov	r1, r4
   14590:	mov	r0, r5
   14594:	bl	13668 <__assert_fail@plt+0x1e3c>
   14598:	subs	r4, r0, #0
   1459c:	beq	143a0 <__assert_fail@plt+0x2b74>
   145a0:	cmp	fp, r6
   145a4:	bls	14354 <__assert_fail@plt+0x2b28>
   145a8:	adds	r6, sl, r6
   145ac:	bcs	1440c <__assert_fail@plt+0x2be0>
   145b0:	ldr	r3, [sp, #12]
   145b4:	str	r3, [r4, #48]	; 0x30
   145b8:	ldr	r3, [r5]
   145bc:	str	r3, [r4, #4]
   145c0:	str	r6, [r4, #40]	; 0x28
   145c4:	ldrd	r2, [r7]
   145c8:	strd	r2, [r4, #160]	; 0xa0
   145cc:	ldr	r3, [r5, #48]	; 0x30
   145d0:	tst	r3, #4
   145d4:	addeq	r3, r4, #168	; 0xa8
   145d8:	streq	r3, [r4, #24]
   145dc:	bne	14454 <__assert_fail@plt+0x2c28>
   145e0:	ldr	r3, [r5, #44]	; 0x2c
   145e4:	cmp	r3, #0
   145e8:	beq	145f8 <__assert_fail@plt+0x2dcc>
   145ec:	ldr	r3, [r5, #48]	; 0x30
   145f0:	tst	r3, #1024	; 0x400
   145f4:	beq	146a4 <__assert_fail@plt+0x2e78>
   145f8:	ldr	r3, [r5, #48]	; 0x30
   145fc:	tst	r3, #8
   14600:	beq	14610 <__assert_fail@plt+0x2de4>
   14604:	ldrb	r2, [r7, #18]
   14608:	tst	r2, #251	; 0xfb
   1460c:	bne	14474 <__assert_fail@plt+0x2c48>
   14610:	mov	r3, #11
   14614:	strh	r3, [r4, #56]	; 0x38
   14618:	ldrb	r3, [r7, #18]
   1461c:	sub	r3, r3, #1
   14620:	cmp	r3, #11
   14624:	ldrls	pc, [pc, r3, lsl #2]
   14628:	b	14698 <__assert_fail@plt+0x2e6c>
   1462c:	andeq	r4, r1, r8, ror #12
   14630:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14634:	muleq	r1, r8, r6
   14638:	andeq	r4, r1, ip, asr r6
   1463c:	muleq	r1, r8, r6
   14640:	andeq	r4, r1, r8, lsl #17
   14644:	muleq	r1, r8, r6
   14648:	andeq	r4, r1, r0, lsl #13
   1464c:	muleq	r1, r8, r6
   14650:	andeq	r4, r1, r4, ror r6
   14654:	muleq	r1, r8, r6
   14658:	andeq	r4, r1, ip, lsl #13
   1465c:	mov	r3, #0
   14660:	mov	r2, #16384	; 0x4000
   14664:	b	144dc <__assert_fail@plt+0x2cb0>
   14668:	mov	r3, #0
   1466c:	mov	r2, #4096	; 0x1000
   14670:	b	144dc <__assert_fail@plt+0x2cb0>
   14674:	mov	r3, #0
   14678:	mov	r2, #40960	; 0xa000
   1467c:	b	144dc <__assert_fail@plt+0x2cb0>
   14680:	mov	r3, #0
   14684:	mov	r2, #32768	; 0x8000
   14688:	b	144dc <__assert_fail@plt+0x2cb0>
   1468c:	mov	r3, #0
   14690:	mov	r2, #49152	; 0xc000
   14694:	b	144dc <__assert_fail@plt+0x2cb0>
   14698:	mov	r3, #0
   1469c:	mov	r2, #0
   146a0:	b	144dc <__assert_fail@plt+0x2cb0>
   146a4:	mov	r2, #0
   146a8:	mov	r1, r4
   146ac:	mov	r0, r5
   146b0:	bl	13408 <__assert_fail@plt+0x1bdc>
   146b4:	strh	r0, [r4, #56]	; 0x38
   146b8:	b	144f8 <__assert_fail@plt+0x2ccc>
   146bc:	ldr	r3, [r5, #44]	; 0x2c
   146c0:	cmp	r3, #0
   146c4:	beq	146d0 <__assert_fail@plt+0x2ea4>
   146c8:	movw	r8, #10001	; 0x2711
   146cc:	b	14530 <__assert_fail@plt+0x2d04>
   146d0:	ldr	r1, [sp, #60]	; 0x3c
   146d4:	mov	r0, r9
   146d8:	bl	1389c <__assert_fail@plt+0x2070>
   146dc:	movw	r3, #26985	; 0x6969
   146e0:	cmp	r0, r3
   146e4:	beq	14714 <__assert_fail@plt+0x2ee8>
   146e8:	ldr	r3, [sp, #44]	; 0x2c
   146ec:	cmp	r0, r3
   146f0:	beq	14720 <__assert_fail@plt+0x2ef4>
   146f4:	ldr	r3, [sp, #48]	; 0x30
   146f8:	cmp	r0, r3
   146fc:	moveq	r3, #0
   14700:	streq	r3, [sp, #36]	; 0x24
   14704:	beq	14520 <__assert_fail@plt+0x2cf4>
   14708:	mov	r3, #1
   1470c:	str	r3, [sp, #36]	; 0x24
   14710:	b	146c8 <__assert_fail@plt+0x2e9c>
   14714:	mov	r3, #0
   14718:	str	r3, [sp, #36]	; 0x24
   1471c:	b	14520 <__assert_fail@plt+0x2cf4>
   14720:	mov	r3, #0
   14724:	str	r3, [sp, #36]	; 0x24
   14728:	b	14520 <__assert_fail@plt+0x2cf4>
   1472c:	ldr	r4, [sp]
   14730:	b	14530 <__assert_fail@plt+0x2d04>
   14734:	ldr	r1, [r5, #24]
   14738:	ldr	r3, [r5, #4]
   1473c:	cmp	r3, #0
   14740:	bne	1475c <__assert_fail@plt+0x2f30>
   14744:	ldr	r3, [sp, #4]
   14748:	b	14794 <__assert_fail@plt+0x2f68>
   1474c:	str	r1, [r3, #28]
   14750:	ldr	r3, [r3, #8]
   14754:	cmp	r3, #0
   14758:	beq	14744 <__assert_fail@plt+0x2f18>
   1475c:	ldr	r2, [r3, #24]
   14760:	add	r0, r3, #168	; 0xa8
   14764:	cmp	r2, r0
   14768:	beq	1474c <__assert_fail@plt+0x2f20>
   1476c:	ldr	r0, [r3, #28]
   14770:	sub	r2, r2, r0
   14774:	add	r2, r1, r2
   14778:	str	r2, [r3, #24]
   1477c:	b	1474c <__assert_fail@plt+0x2f20>
   14780:	str	r1, [r3, #28]
   14784:	ldr	r2, [r3, #8]
   14788:	cmp	r2, #0
   1478c:	ldreq	r2, [r3, #4]
   14790:	mov	r3, r2
   14794:	ldr	r2, [r3, #48]	; 0x30
   14798:	cmp	r2, #0
   1479c:	blt	14278 <__assert_fail@plt+0x2a4c>
   147a0:	ldr	r2, [r3, #24]
   147a4:	add	r0, r3, #168	; 0xa8
   147a8:	cmp	r2, r0
   147ac:	beq	14780 <__assert_fail@plt+0x2f54>
   147b0:	ldr	r0, [r3, #28]
   147b4:	sub	r2, r2, r0
   147b8:	add	r2, r1, r2
   147bc:	str	r2, [r3, #24]
   147c0:	b	14780 <__assert_fail@plt+0x2f54>
   147c4:	movw	r3, #45920	; 0xb360
   147c8:	movt	r3, #1
   147cc:	mvn	r2, #0
   147d0:	ldr	r1, [r9, #4]
   147d4:	mov	r0, r5
   147d8:	bl	13b8c <__assert_fail@plt+0x2360>
   147dc:	adds	r0, r0, #0
   147e0:	movne	r0, #1
   147e4:	b	142f0 <__assert_fail@plt+0x2ac4>
   147e8:	mov	r3, #7
   147ec:	strh	r3, [r9, #56]	; 0x38
   147f0:	ldr	r3, [r5, #48]	; 0x30
   147f4:	orr	r3, r3, #8192	; 0x2000
   147f8:	str	r3, [r5, #48]	; 0x30
   147fc:	ldr	r0, [sp, #4]
   14800:	bl	137cc <__assert_fail@plt+0x1fa0>
   14804:	mov	r3, #0
   14808:	str	r3, [sp, #4]
   1480c:	b	143e4 <__assert_fail@plt+0x2bb8>
   14810:	ldr	r3, [sp, #32]
   14814:	cmp	r3, #3
   14818:	beq	14830 <__assert_fail@plt+0x3004>
   1481c:	ldr	r0, [sp, #4]
   14820:	bl	137cc <__assert_fail@plt+0x1fa0>
   14824:	mov	r3, #0
   14828:	str	r3, [sp, #4]
   1482c:	b	143e4 <__assert_fail@plt+0x2bb8>
   14830:	ldrh	r3, [r9, #56]	; 0x38
   14834:	cmp	r3, #7
   14838:	cmpne	r3, #4
   1483c:	movne	r3, #6
   14840:	strhne	r3, [r9, #56]	; 0x38
   14844:	b	1481c <__assert_fail@plt+0x2ff0>
   14848:	movw	r3, #13128	; 0x3348
   1484c:	movt	r3, #1
   14850:	str	r3, [r5, #44]	; 0x2c
   14854:	mov	r2, r8
   14858:	ldr	r1, [sp, #4]
   1485c:	mov	r0, r5
   14860:	bl	13578 <__assert_fail@plt+0x1d4c>
   14864:	str	r0, [sp, #4]
   14868:	mov	r3, #0
   1486c:	str	r3, [r5, #44]	; 0x2c
   14870:	b	143e4 <__assert_fail@plt+0x2bb8>
   14874:	mov	r3, #24576	; 0x6000
   14878:	str	r3, [r4, #80]	; 0x50
   1487c:	mov	r2, #1
   14880:	mov	r3, #0
   14884:	b	144f0 <__assert_fail@plt+0x2cc4>
   14888:	mov	r3, #24576	; 0x6000
   1488c:	str	r3, [r4, #80]	; 0x50
   14890:	mov	r2, #2
   14894:	mov	r3, #0
   14898:	b	144f0 <__assert_fail@plt+0x2cc4>
   1489c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   148a0:	strd	r6, [sp, #8]
   148a4:	strd	r8, [sp, #16]
   148a8:	strd	sl, [sp, #24]
   148ac:	str	lr, [sp, #32]
   148b0:	sub	sp, sp, #20
   148b4:	bic	r3, r1, #4080	; 0xff0
   148b8:	bic	r3, r3, #15
   148bc:	cmp	r3, #0
   148c0:	bne	149a0 <__assert_fail@plt+0x3174>
   148c4:	mov	r6, r0
   148c8:	mov	r9, r1
   148cc:	mov	sl, r2
   148d0:	and	r3, r1, #516	; 0x204
   148d4:	cmp	r3, #516	; 0x204
   148d8:	beq	149b4 <__assert_fail@plt+0x3188>
   148dc:	tst	r1, #18
   148e0:	beq	149c8 <__assert_fail@plt+0x319c>
   148e4:	mov	r1, #96	; 0x60
   148e8:	mov	r0, #1
   148ec:	bl	1a14c <lchmod@@Base+0x388c>
   148f0:	subs	r5, r0, #0
   148f4:	beq	14bf0 <__assert_fail@plt+0x33c4>
   148f8:	str	sl, [r5, #44]	; 0x2c
   148fc:	tst	r9, #2
   14900:	streq	r9, [r5, #48]	; 0x30
   14904:	bicne	r3, r9, #512	; 0x200
   14908:	orrne	r3, r3, #4
   1490c:	strne	r3, [r5, #48]	; 0x30
   14910:	mvn	r3, #99	; 0x63
   14914:	str	r3, [r5, #32]
   14918:	ldr	r0, [r6]
   1491c:	cmp	r0, #0
   14920:	beq	149dc <__assert_fail@plt+0x31b0>
   14924:	mov	r7, r6
   14928:	mov	r4, #0
   1492c:	bl	11658 <strlen@plt>
   14930:	cmp	r4, r0
   14934:	movcc	r4, r0
   14938:	ldr	r0, [r7, #4]!
   1493c:	cmp	r0, #0
   14940:	bne	1492c <__assert_fail@plt+0x3100>
   14944:	add	r1, r4, #1
   14948:	cmp	r1, #4096	; 0x1000
   1494c:	movcc	r1, #4096	; 0x1000
   14950:	mov	r0, r5
   14954:	bl	13384 <__assert_fail@plt+0x1b58>
   14958:	cmp	r0, #0
   1495c:	beq	14be4 <__assert_fail@plt+0x33b8>
   14960:	ldr	fp, [r6]
   14964:	cmp	fp, #0
   14968:	beq	14c10 <__assert_fail@plt+0x33e4>
   1496c:	mov	r2, #0
   14970:	movw	r1, #46024	; 0xb3c8
   14974:	movt	r1, #1
   14978:	mov	r0, r5
   1497c:	bl	13668 <__assert_fail@plt+0x1e3c>
   14980:	subs	fp, r0, #0
   14984:	beq	14bdc <__assert_fail@plt+0x33b0>
   14988:	mvn	r3, #0
   1498c:	str	r3, [fp, #48]	; 0x30
   14990:	cmp	sl, #0
   14994:	moveq	r3, #1
   14998:	bne	14c18 <__assert_fail@plt+0x33ec>
   1499c:	b	14c20 <__assert_fail@plt+0x33f4>
   149a0:	bl	11688 <__errno_location@plt>
   149a4:	mov	r3, #22
   149a8:	str	r3, [r0]
   149ac:	mov	r5, #0
   149b0:	b	14bf0 <__assert_fail@plt+0x33c4>
   149b4:	bl	11688 <__errno_location@plt>
   149b8:	mov	r3, #22
   149bc:	str	r3, [r0]
   149c0:	mov	r5, #0
   149c4:	b	14bf0 <__assert_fail@plt+0x33c4>
   149c8:	bl	11688 <__errno_location@plt>
   149cc:	mov	r3, #22
   149d0:	str	r3, [r0]
   149d4:	mov	r5, #0
   149d8:	b	14bf0 <__assert_fail@plt+0x33c4>
   149dc:	mov	r4, #0
   149e0:	b	14944 <__assert_fail@plt+0x3118>
   149e4:	sub	r1, r0, #1
   149e8:	ldrb	r3, [r4, r1]
   149ec:	cmp	r3, #47	; 0x2f
   149f0:	bne	14a7c <__assert_fail@plt+0x3250>
   149f4:	sub	r0, r0, #2
   149f8:	add	r3, r4, r0
   149fc:	ldrb	r0, [r4, r0]
   14a00:	cmp	r0, #47	; 0x2f
   14a04:	moveq	r2, r1
   14a08:	bne	14a7c <__assert_fail@plt+0x3250>
   14a0c:	ldrb	r1, [r3, #-1]!
   14a10:	cmp	r1, #47	; 0x2f
   14a14:	bne	14a7c <__assert_fail@plt+0x3250>
   14a18:	sub	r2, r2, #1
   14a1c:	cmp	r2, #1
   14a20:	bhi	14a0c <__assert_fail@plt+0x31e0>
   14a24:	b	14a7c <__assert_fail@plt+0x3250>
   14a28:	mov	r2, r9
   14a2c:	mov	r1, r4
   14a30:	ldr	r0, [sp, #4]
   14a34:	bl	13408 <__assert_fail@plt+0x1bdc>
   14a38:	strh	r0, [r4, #56]	; 0x38
   14a3c:	cmp	sl, #0
   14a40:	beq	14ae4 <__assert_fail@plt+0x32b8>
   14a44:	str	r7, [r4, #8]
   14a48:	mov	r7, r4
   14a4c:	add	r8, r8, #1
   14a50:	ldr	r4, [r6, #4]!
   14a54:	cmp	r4, #0
   14a58:	beq	14afc <__assert_fail@plt+0x32d0>
   14a5c:	mov	r0, r4
   14a60:	bl	11658 <strlen@plt>
   14a64:	mov	r2, r0
   14a68:	cmp	r0, #2
   14a6c:	movls	r3, #0
   14a70:	andhi	r3, r5, #1
   14a74:	cmp	r3, #0
   14a78:	bne	149e4 <__assert_fail@plt+0x31b8>
   14a7c:	mov	r1, r4
   14a80:	ldr	r0, [sp, #4]
   14a84:	bl	13668 <__assert_fail@plt+0x1e3c>
   14a88:	subs	r4, r0, #0
   14a8c:	beq	14bc8 <__assert_fail@plt+0x339c>
   14a90:	str	r9, [r4, #48]	; 0x30
   14a94:	str	fp, [r4, #4]
   14a98:	add	r3, r4, #168	; 0xa8
   14a9c:	str	r3, [r4, #24]
   14aa0:	ldr	r3, [sp, #8]
   14aa4:	cmp	r7, #0
   14aa8:	moveq	r3, #0
   14aac:	cmp	r3, #0
   14ab0:	beq	14a28 <__assert_fail@plt+0x31fc>
   14ab4:	mov	r3, #11
   14ab8:	strh	r3, [r4, #56]	; 0x38
   14abc:	mov	r2, #2
   14ac0:	mov	r3, #0
   14ac4:	strd	r2, [r4, #112]	; 0x70
   14ac8:	cmp	sl, #0
   14acc:	bne	14a44 <__assert_fail@plt+0x3218>
   14ad0:	str	r9, [r4, #8]
   14ad4:	ldr	r3, [sp, #12]
   14ad8:	str	r4, [r3, #8]
   14adc:	str	r4, [sp, #12]
   14ae0:	b	14a4c <__assert_fail@plt+0x3220>
   14ae4:	str	r9, [r4, #8]
   14ae8:	cmp	r7, #0
   14aec:	streq	r4, [sp, #12]
   14af0:	moveq	r7, r4
   14af4:	beq	14a4c <__assert_fail@plt+0x3220>
   14af8:	b	14ad4 <__assert_fail@plt+0x32a8>
   14afc:	ldr	r5, [sp, #4]
   14b00:	cmp	sl, #0
   14b04:	cmpne	r8, #1
   14b08:	bhi	14b74 <__assert_fail@plt+0x3348>
   14b0c:	mov	r2, #0
   14b10:	movw	r1, #46024	; 0xb3c8
   14b14:	movt	r1, #1
   14b18:	mov	r0, r5
   14b1c:	bl	13668 <__assert_fail@plt+0x1e3c>
   14b20:	str	r0, [r5]
   14b24:	cmp	r0, #0
   14b28:	beq	14bcc <__assert_fail@plt+0x33a0>
   14b2c:	str	r7, [r0, #8]
   14b30:	ldr	r3, [r5]
   14b34:	mov	r2, #9
   14b38:	strh	r2, [r3, #56]	; 0x38
   14b3c:	ldr	r3, [r5]
   14b40:	mov	r2, #1
   14b44:	str	r2, [r3, #48]	; 0x30
   14b48:	mov	r0, r5
   14b4c:	bl	136f8 <__assert_fail@plt+0x1ecc>
   14b50:	cmp	r0, #0
   14b54:	beq	14bcc <__assert_fail@plt+0x33a0>
   14b58:	ldr	r3, [r5, #48]	; 0x30
   14b5c:	tst	r3, #516	; 0x204
   14b60:	beq	14b9c <__assert_fail@plt+0x3370>
   14b64:	mvn	r1, #0
   14b68:	add	r0, r5, #60	; 0x3c
   14b6c:	bl	167f0 <__assert_fail@plt+0x4fc4>
   14b70:	b	14bf0 <__assert_fail@plt+0x33c4>
   14b74:	mov	r2, r8
   14b78:	mov	r1, r7
   14b7c:	mov	r0, r5
   14b80:	bl	13578 <__assert_fail@plt+0x1d4c>
   14b84:	mov	r7, r0
   14b88:	b	14b0c <__assert_fail@plt+0x32e0>
   14b8c:	mov	r7, r4
   14b90:	b	14b0c <__assert_fail@plt+0x32e0>
   14b94:	mov	r7, fp
   14b98:	b	14b0c <__assert_fail@plt+0x32e0>
   14b9c:	movw	r1, #45892	; 0xb344
   14ba0:	movt	r1, #1
   14ba4:	mov	r0, r5
   14ba8:	bl	13780 <__assert_fail@plt+0x1f54>
   14bac:	str	r0, [r5, #28]
   14bb0:	cmp	r0, #0
   14bb4:	bge	14b64 <__assert_fail@plt+0x3338>
   14bb8:	ldr	r3, [r5, #48]	; 0x30
   14bbc:	orr	r3, r3, #4
   14bc0:	str	r3, [r5, #48]	; 0x30
   14bc4:	b	14b64 <__assert_fail@plt+0x3338>
   14bc8:	ldr	r5, [sp, #4]
   14bcc:	mov	r0, r7
   14bd0:	bl	137cc <__assert_fail@plt+0x1fa0>
   14bd4:	mov	r0, fp
   14bd8:	bl	1322c <__assert_fail@plt+0x1a00>
   14bdc:	ldr	r0, [r5, #24]
   14be0:	bl	1322c <__assert_fail@plt+0x1a00>
   14be4:	mov	r0, r5
   14be8:	bl	1322c <__assert_fail@plt+0x1a00>
   14bec:	mov	r5, #0
   14bf0:	mov	r0, r5
   14bf4:	add	sp, sp, #20
   14bf8:	ldrd	r4, [sp]
   14bfc:	ldrd	r6, [sp, #8]
   14c00:	ldrd	r8, [sp, #16]
   14c04:	ldrd	sl, [sp, #24]
   14c08:	add	sp, sp, #32
   14c0c:	pop	{pc}		; (ldr pc, [sp], #4)
   14c10:	cmp	sl, #0
   14c14:	beq	14b94 <__assert_fail@plt+0x3368>
   14c18:	ldr	r3, [r5, #48]	; 0x30
   14c1c:	ubfx	r3, r3, #10, #1
   14c20:	str	r3, [sp, #8]
   14c24:	ldr	r4, [r6]
   14c28:	cmp	r4, #0
   14c2c:	beq	14b8c <__assert_fail@plt+0x3360>
   14c30:	mov	r3, #0
   14c34:	mov	r7, r3
   14c38:	str	r3, [sp, #12]
   14c3c:	mov	r8, r3
   14c40:	eor	r9, r9, #2048	; 0x800
   14c44:	ubfx	r3, r9, #11, #1
   14c48:	mov	r9, r7
   14c4c:	str	r5, [sp, #4]
   14c50:	mov	r5, r3
   14c54:	b	14a5c <__assert_fail@plt+0x3230>
   14c58:	strd	r4, [sp, #-16]!
   14c5c:	str	r6, [sp, #8]
   14c60:	str	lr, [sp, #12]
   14c64:	mov	r5, r0
   14c68:	ldr	r0, [r0]
   14c6c:	cmp	r0, #0
   14c70:	beq	14ca8 <__assert_fail@plt+0x347c>
   14c74:	ldr	r3, [r0, #48]	; 0x30
   14c78:	cmp	r3, #0
   14c7c:	blt	14cf8 <__assert_fail@plt+0x34cc>
   14c80:	ldr	r4, [r0, #8]
   14c84:	cmp	r4, #0
   14c88:	ldreq	r4, [r0, #4]
   14c8c:	bl	1322c <__assert_fail@plt+0x1a00>
   14c90:	mov	r0, r4
   14c94:	ldr	r3, [r4, #48]	; 0x30
   14c98:	cmp	r3, #0
   14c9c:	bge	14c80 <__assert_fail@plt+0x3454>
   14ca0:	mov	r0, r4
   14ca4:	bl	1322c <__assert_fail@plt+0x1a00>
   14ca8:	ldr	r0, [r5, #4]
   14cac:	cmp	r0, #0
   14cb0:	beq	14cb8 <__assert_fail@plt+0x348c>
   14cb4:	bl	137cc <__assert_fail@plt+0x1fa0>
   14cb8:	ldr	r0, [r5, #8]
   14cbc:	bl	1322c <__assert_fail@plt+0x1a00>
   14cc0:	ldr	r0, [r5, #24]
   14cc4:	bl	1322c <__assert_fail@plt+0x1a00>
   14cc8:	ldr	r3, [r5, #48]	; 0x30
   14ccc:	tst	r3, #512	; 0x200
   14cd0:	beq	14d00 <__assert_fail@plt+0x34d4>
   14cd4:	ldr	r0, [r5, #32]
   14cd8:	cmp	r0, #0
   14cdc:	blt	14d08 <__assert_fail@plt+0x34dc>
   14ce0:	bl	117e4 <close@plt>
   14ce4:	cmp	r0, #0
   14ce8:	beq	14d08 <__assert_fail@plt+0x34dc>
   14cec:	bl	11688 <__errno_location@plt>
   14cf0:	ldr	r4, [r0]
   14cf4:	b	14d88 <__assert_fail@plt+0x355c>
   14cf8:	mov	r4, r0
   14cfc:	b	14ca0 <__assert_fail@plt+0x3474>
   14d00:	tst	r3, #4
   14d04:	beq	14d50 <__assert_fail@plt+0x3524>
   14d08:	add	r0, r5, #60	; 0x3c
   14d0c:	bl	1385c <__assert_fail@plt+0x2030>
   14d10:	ldr	r0, [r5, #52]	; 0x34
   14d14:	cmp	r0, #0
   14d18:	movne	r4, #0
   14d1c:	beq	14dbc <__assert_fail@plt+0x3590>
   14d20:	bl	161c0 <__assert_fail@plt+0x4994>
   14d24:	mov	r0, r5
   14d28:	bl	1381c <__assert_fail@plt+0x1ff0>
   14d2c:	mov	r0, r5
   14d30:	bl	1322c <__assert_fail@plt+0x1a00>
   14d34:	cmp	r4, #0
   14d38:	bne	14dac <__assert_fail@plt+0x3580>
   14d3c:	mov	r0, r4
   14d40:	ldrd	r4, [sp]
   14d44:	ldr	r6, [sp, #8]
   14d48:	add	sp, sp, #12
   14d4c:	pop	{pc}		; (ldr pc, [sp], #4)
   14d50:	ldr	r0, [r5, #28]
   14d54:	bl	11760 <fchdir@plt>
   14d58:	subs	r4, r0, #0
   14d5c:	beq	14d68 <__assert_fail@plt+0x353c>
   14d60:	bl	11688 <__errno_location@plt>
   14d64:	ldr	r4, [r0]
   14d68:	ldr	r0, [r5, #28]
   14d6c:	bl	117e4 <close@plt>
   14d70:	adds	r0, r0, #0
   14d74:	movne	r0, #1
   14d78:	cmp	r4, #0
   14d7c:	movne	r0, #0
   14d80:	cmp	r0, #0
   14d84:	bne	14da0 <__assert_fail@plt+0x3574>
   14d88:	add	r0, r5, #60	; 0x3c
   14d8c:	bl	1385c <__assert_fail@plt+0x2030>
   14d90:	ldr	r0, [r5, #52]	; 0x34
   14d94:	cmp	r0, #0
   14d98:	bne	14d20 <__assert_fail@plt+0x34f4>
   14d9c:	b	14d24 <__assert_fail@plt+0x34f8>
   14da0:	bl	11688 <__errno_location@plt>
   14da4:	ldr	r4, [r0]
   14da8:	b	14d88 <__assert_fail@plt+0x355c>
   14dac:	bl	11688 <__errno_location@plt>
   14db0:	str	r4, [r0]
   14db4:	mvn	r4, #0
   14db8:	b	14d3c <__assert_fail@plt+0x3510>
   14dbc:	mov	r0, r5
   14dc0:	bl	1381c <__assert_fail@plt+0x1ff0>
   14dc4:	mov	r0, r5
   14dc8:	bl	1322c <__assert_fail@plt+0x1a00>
   14dcc:	mov	r4, #0
   14dd0:	b	14d3c <__assert_fail@plt+0x3510>
   14dd4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14dd8:	strd	r6, [sp, #8]
   14ddc:	str	r8, [sp, #16]
   14de0:	str	lr, [sp, #20]
   14de4:	ldr	r5, [r0]
   14de8:	cmp	r5, #0
   14dec:	beq	1544c <__assert_fail@plt+0x3c20>
   14df0:	ldr	r3, [r0, #48]	; 0x30
   14df4:	tst	r3, #8192	; 0x2000
   14df8:	bne	15448 <__assert_fail@plt+0x3c1c>
   14dfc:	mov	r8, r0
   14e00:	ldrh	r3, [r5, #60]	; 0x3c
   14e04:	mov	r2, #3
   14e08:	strh	r2, [r5, #60]	; 0x3c
   14e0c:	cmp	r3, #1
   14e10:	beq	14e8c <__assert_fail@plt+0x3660>
   14e14:	cmp	r3, #2
   14e18:	beq	14ea0 <__assert_fail@plt+0x3674>
   14e1c:	ldrh	r2, [r5, #56]	; 0x38
   14e20:	cmp	r2, #1
   14e24:	bne	15120 <__assert_fail@plt+0x38f4>
   14e28:	cmp	r3, #4
   14e2c:	beq	14e50 <__assert_fail@plt+0x3624>
   14e30:	ldr	r1, [r8, #48]	; 0x30
   14e34:	tst	r1, #64	; 0x40
   14e38:	beq	14f34 <__assert_fail@plt+0x3708>
   14e3c:	ldrd	r6, [r5, #64]	; 0x40
   14e40:	ldrd	r2, [r8, #16]
   14e44:	cmp	r7, r3
   14e48:	cmpeq	r6, r2
   14e4c:	beq	14f34 <__assert_fail@plt+0x3708>
   14e50:	ldrh	r3, [r5, #58]	; 0x3a
   14e54:	tst	r3, #2
   14e58:	bne	14f28 <__assert_fail@plt+0x36fc>
   14e5c:	ldr	r0, [r8, #4]
   14e60:	cmp	r0, #0
   14e64:	beq	14e74 <__assert_fail@plt+0x3648>
   14e68:	bl	137cc <__assert_fail@plt+0x1fa0>
   14e6c:	mov	r3, #0
   14e70:	str	r3, [r8, #4]
   14e74:	mov	r3, #6
   14e78:	strh	r3, [r5, #56]	; 0x38
   14e7c:	mov	r1, r5
   14e80:	mov	r0, r8
   14e84:	bl	13d98 <__assert_fail@plt+0x256c>
   14e88:	b	1544c <__assert_fail@plt+0x3c20>
   14e8c:	mov	r2, #0
   14e90:	mov	r1, r5
   14e94:	bl	13408 <__assert_fail@plt+0x1bdc>
   14e98:	strh	r0, [r5, #56]	; 0x38
   14e9c:	b	1544c <__assert_fail@plt+0x3c20>
   14ea0:	ldrh	r2, [r5, #56]	; 0x38
   14ea4:	sub	r3, r2, #12
   14ea8:	uxth	r3, r3
   14eac:	cmp	r3, #1
   14eb0:	bls	14ec0 <__assert_fail@plt+0x3694>
   14eb4:	cmp	r2, #1
   14eb8:	bne	15120 <__assert_fail@plt+0x38f4>
   14ebc:	b	14e30 <__assert_fail@plt+0x3604>
   14ec0:	mov	r2, #1
   14ec4:	mov	r1, r5
   14ec8:	bl	13408 <__assert_fail@plt+0x1bdc>
   14ecc:	strh	r0, [r5, #56]	; 0x38
   14ed0:	cmp	r0, #1
   14ed4:	bne	14fb0 <__assert_fail@plt+0x3784>
   14ed8:	ldr	r3, [r8, #48]	; 0x30
   14edc:	tst	r3, #4
   14ee0:	bne	14fb0 <__assert_fail@plt+0x3784>
   14ee4:	movw	r1, #45892	; 0xb344
   14ee8:	movt	r1, #1
   14eec:	mov	r0, r8
   14ef0:	bl	13780 <__assert_fail@plt+0x1f54>
   14ef4:	str	r0, [r5, #36]	; 0x24
   14ef8:	cmp	r0, #0
   14efc:	blt	14f10 <__assert_fail@plt+0x36e4>
   14f00:	ldrh	r3, [r5, #58]	; 0x3a
   14f04:	orr	r3, r3, #2
   14f08:	strh	r3, [r5, #58]	; 0x3a
   14f0c:	b	14fb0 <__assert_fail@plt+0x3784>
   14f10:	bl	11688 <__errno_location@plt>
   14f14:	ldr	r3, [r0]
   14f18:	str	r3, [r5, #32]
   14f1c:	mov	r3, #7
   14f20:	strh	r3, [r5, #56]	; 0x38
   14f24:	b	14fb0 <__assert_fail@plt+0x3784>
   14f28:	ldr	r0, [r5, #36]	; 0x24
   14f2c:	bl	117e4 <close@plt>
   14f30:	b	14e5c <__assert_fail@plt+0x3630>
   14f34:	ldr	r0, [r8, #4]
   14f38:	cmp	r0, #0
   14f3c:	beq	15018 <__assert_fail@plt+0x37ec>
   14f40:	tst	r1, #4096	; 0x1000
   14f44:	bne	15004 <__assert_fail@plt+0x37d8>
   14f48:	ldr	r3, [r5, #24]
   14f4c:	mvn	r2, #0
   14f50:	mov	r1, r5
   14f54:	mov	r0, r8
   14f58:	bl	13b8c <__assert_fail@plt+0x2360>
   14f5c:	cmp	r0, #0
   14f60:	bne	1506c <__assert_fail@plt+0x3840>
   14f64:	ldr	r5, [r8, #4]
   14f68:	mov	r3, #0
   14f6c:	str	r3, [r8, #4]
   14f70:	ldr	r2, [r8, #24]
   14f74:	ldr	r0, [r5, #4]
   14f78:	ldr	r1, [r0, #40]	; 0x28
   14f7c:	sub	r3, r1, #1
   14f80:	ldr	r0, [r0, #28]
   14f84:	ldrb	r0, [r0, r3]
   14f88:	cmp	r0, #47	; 0x2f
   14f8c:	movne	r3, r1
   14f90:	add	r0, r2, r3
   14f94:	mov	r1, #47	; 0x2f
   14f98:	strb	r1, [r2, r3]
   14f9c:	ldr	r2, [r5, #52]	; 0x34
   14fa0:	add	r2, r2, #1
   14fa4:	add	r1, r5, #168	; 0xa8
   14fa8:	add	r0, r0, #1
   14fac:	bl	11484 <memmove@plt>
   14fb0:	str	r5, [r8]
   14fb4:	ldrh	r3, [r5, #56]	; 0x38
   14fb8:	cmp	r3, #11
   14fbc:	beq	15340 <__assert_fail@plt+0x3b14>
   14fc0:	ldrh	r3, [r5, #56]	; 0x38
   14fc4:	cmp	r3, #1
   14fc8:	bne	1544c <__assert_fail@plt+0x3c20>
   14fcc:	ldr	r3, [r5, #48]	; 0x30
   14fd0:	cmp	r3, #0
   14fd4:	ldrdeq	r2, [r5, #64]	; 0x40
   14fd8:	strdeq	r2, [r8, #16]
   14fdc:	mov	r1, r5
   14fe0:	mov	r0, r8
   14fe4:	bl	139c8 <__assert_fail@plt+0x219c>
   14fe8:	cmp	r0, #0
   14fec:	bne	1544c <__assert_fail@plt+0x3c20>
   14ff0:	bl	11688 <__errno_location@plt>
   14ff4:	mov	r3, #12
   14ff8:	str	r3, [r0]
   14ffc:	mov	r5, #0
   15000:	b	1544c <__assert_fail@plt+0x3c20>
   15004:	bic	r1, r1, #4096	; 0x1000
   15008:	str	r1, [r8, #48]	; 0x30
   1500c:	bl	137cc <__assert_fail@plt+0x1fa0>
   15010:	mov	r3, #0
   15014:	str	r3, [r8, #4]
   15018:	mov	r1, #3
   1501c:	mov	r0, r8
   15020:	bl	13e5c <__assert_fail@plt+0x2630>
   15024:	str	r0, [r8, #4]
   15028:	cmp	r0, #0
   1502c:	bne	14f64 <__assert_fail@plt+0x3738>
   15030:	ldr	r3, [r8, #48]	; 0x30
   15034:	tst	r3, #8192	; 0x2000
   15038:	movne	r5, r0
   1503c:	bne	1544c <__assert_fail@plt+0x3c20>
   15040:	ldr	r3, [r5, #32]
   15044:	cmp	r3, #0
   15048:	beq	1505c <__assert_fail@plt+0x3830>
   1504c:	ldrh	r3, [r5, #56]	; 0x38
   15050:	cmp	r3, #4
   15054:	movne	r3, #7
   15058:	strhne	r3, [r5, #56]	; 0x38
   1505c:	mov	r1, r5
   15060:	mov	r0, r8
   15064:	bl	13d98 <__assert_fail@plt+0x256c>
   15068:	b	1544c <__assert_fail@plt+0x3c20>
   1506c:	bl	11688 <__errno_location@plt>
   15070:	ldr	r3, [r0]
   15074:	str	r3, [r5, #32]
   15078:	ldrh	r3, [r5, #58]	; 0x3a
   1507c:	orr	r3, r3, #1
   15080:	strh	r3, [r5, #58]	; 0x3a
   15084:	ldr	r3, [r8, #4]
   15088:	cmp	r3, #0
   1508c:	beq	14f64 <__assert_fail@plt+0x3738>
   15090:	ldr	r2, [r3, #4]
   15094:	ldr	r2, [r2, #24]
   15098:	str	r2, [r3, #24]
   1509c:	ldr	r3, [r3, #8]
   150a0:	cmp	r3, #0
   150a4:	bne	15090 <__assert_fail@plt+0x3864>
   150a8:	b	14f64 <__assert_fail@plt+0x3738>
   150ac:	str	r3, [r8]
   150b0:	ldr	r2, [r8, #24]
   150b4:	ldr	r3, [r3, #40]	; 0x28
   150b8:	mov	r1, #0
   150bc:	strb	r1, [r2, r3]
   150c0:	mov	r1, #3
   150c4:	mov	r0, r8
   150c8:	bl	13e5c <__assert_fail@plt+0x2630>
   150cc:	subs	r6, r0, #0
   150d0:	bne	150e8 <__assert_fail@plt+0x38bc>
   150d4:	ldr	r3, [r8, #48]	; 0x30
   150d8:	tst	r3, #8192	; 0x2000
   150dc:	beq	1513c <__assert_fail@plt+0x3910>
   150e0:	mov	r5, r6
   150e4:	b	1544c <__assert_fail@plt+0x3c20>
   150e8:	mov	r0, r5
   150ec:	bl	1322c <__assert_fail@plt+0x1a00>
   150f0:	mov	r5, r6
   150f4:	b	14f70 <__assert_fail@plt+0x3744>
   150f8:	str	r4, [r8]
   150fc:	mov	r0, r5
   15100:	bl	1322c <__assert_fail@plt+0x1a00>
   15104:	ldr	r3, [r4, #48]	; 0x30
   15108:	cmp	r3, #0
   1510c:	beq	15204 <__assert_fail@plt+0x39d8>
   15110:	ldrh	r3, [r4, #60]	; 0x3c
   15114:	mov	r5, r4
   15118:	cmp	r3, #4
   1511c:	bne	152b8 <__assert_fail@plt+0x3a8c>
   15120:	ldr	r4, [r5, #8]
   15124:	cmp	r4, #0
   15128:	bne	150f8 <__assert_fail@plt+0x38cc>
   1512c:	ldr	r3, [r5, #4]
   15130:	ldr	r2, [r3, #12]
   15134:	cmp	r2, #0
   15138:	bne	150ac <__assert_fail@plt+0x3880>
   1513c:	ldr	r6, [r5, #4]
   15140:	str	r6, [r8]
   15144:	mov	r0, r5
   15148:	bl	1322c <__assert_fail@plt+0x1a00>
   1514c:	ldr	r3, [r6, #48]	; 0x30
   15150:	cmn	r3, #1
   15154:	beq	15378 <__assert_fail@plt+0x3b4c>
   15158:	ldrh	r3, [r6, #56]	; 0x38
   1515c:	cmp	r3, #11
   15160:	beq	15398 <__assert_fail@plt+0x3b6c>
   15164:	ldr	r2, [r8, #24]
   15168:	ldr	r3, [r6, #40]	; 0x28
   1516c:	mov	r1, #0
   15170:	strb	r1, [r2, r3]
   15174:	ldr	r3, [r6, #48]	; 0x30
   15178:	cmp	r3, r1
   1517c:	beq	1539c <__assert_fail@plt+0x3b70>
   15180:	ldrh	r3, [r6, #58]	; 0x3a
   15184:	tst	r3, #2
   15188:	beq	15404 <__assert_fail@plt+0x3bd8>
   1518c:	ldr	r3, [r8, #48]	; 0x30
   15190:	tst	r3, #4
   15194:	bne	151b0 <__assert_fail@plt+0x3984>
   15198:	tst	r3, #512	; 0x200
   1519c:	beq	153d8 <__assert_fail@plt+0x3bac>
   151a0:	mov	r2, #1
   151a4:	ldr	r1, [r6, #36]	; 0x24
   151a8:	mov	r0, r8
   151ac:	bl	13a90 <__assert_fail@plt+0x2264>
   151b0:	ldr	r0, [r6, #36]	; 0x24
   151b4:	bl	117e4 <close@plt>
   151b8:	ldrh	r3, [r6, #56]	; 0x38
   151bc:	cmp	r3, #2
   151c0:	beq	151ec <__assert_fail@plt+0x39c0>
   151c4:	ldr	r3, [r6, #32]
   151c8:	cmp	r3, #0
   151cc:	movne	r3, #7
   151d0:	strhne	r3, [r6, #56]	; 0x38
   151d4:	bne	151ec <__assert_fail@plt+0x39c0>
   151d8:	mov	r3, #6
   151dc:	strh	r3, [r6, #56]	; 0x38
   151e0:	mov	r1, r6
   151e4:	mov	r0, r8
   151e8:	bl	13d98 <__assert_fail@plt+0x256c>
   151ec:	ldr	r5, [r8, #48]	; 0x30
   151f0:	and	r5, r5, #8192	; 0x2000
   151f4:	cmp	r5, #0
   151f8:	moveq	r5, r6
   151fc:	movne	r5, r4
   15200:	b	1544c <__assert_fail@plt+0x3c20>
   15204:	mov	r0, r8
   15208:	bl	13b28 <__assert_fail@plt+0x22fc>
   1520c:	cmp	r0, #0
   15210:	bne	15294 <__assert_fail@plt+0x3a68>
   15214:	mov	r0, r8
   15218:	bl	1381c <__assert_fail@plt+0x1ff0>
   1521c:	ldr	r2, [r4, #52]	; 0x34
   15220:	str	r2, [r4, #40]	; 0x28
   15224:	add	r5, r4, #168	; 0xa8
   15228:	add	r2, r2, #1
   1522c:	mov	r1, r5
   15230:	ldr	r0, [r8, #24]
   15234:	bl	11484 <memmove@plt>
   15238:	mov	r1, #47	; 0x2f
   1523c:	mov	r0, r5
   15240:	bl	11718 <strrchr@plt>
   15244:	cmp	r0, #0
   15248:	beq	15278 <__assert_fail@plt+0x3a4c>
   1524c:	cmp	r5, r0
   15250:	beq	152a8 <__assert_fail@plt+0x3a7c>
   15254:	add	r6, r0, #1
   15258:	mov	r0, r6
   1525c:	bl	11658 <strlen@plt>
   15260:	mov	r7, r0
   15264:	add	r2, r0, #1
   15268:	mov	r1, r6
   1526c:	mov	r0, r5
   15270:	bl	11484 <memmove@plt>
   15274:	str	r7, [r4, #52]	; 0x34
   15278:	ldr	r3, [r8, #24]
   1527c:	str	r3, [r4, #28]
   15280:	str	r3, [r4, #24]
   15284:	mov	r0, r8
   15288:	bl	136f8 <__assert_fail@plt+0x1ecc>
   1528c:	mov	r5, r4
   15290:	b	14fb0 <__assert_fail@plt+0x3784>
   15294:	ldr	r3, [r8, #48]	; 0x30
   15298:	orr	r3, r3, #8192	; 0x2000
   1529c:	str	r3, [r8, #48]	; 0x30
   152a0:	mov	r5, #0
   152a4:	b	1544c <__assert_fail@plt+0x3c20>
   152a8:	ldrb	r3, [r0, #1]
   152ac:	cmp	r3, #0
   152b0:	beq	15278 <__assert_fail@plt+0x3a4c>
   152b4:	b	15254 <__assert_fail@plt+0x3a28>
   152b8:	cmp	r3, #2
   152bc:	movne	r5, r4
   152c0:	bne	14f70 <__assert_fail@plt+0x3744>
   152c4:	mov	r2, #1
   152c8:	mov	r1, r4
   152cc:	mov	r0, r8
   152d0:	bl	13408 <__assert_fail@plt+0x1bdc>
   152d4:	strh	r0, [r4, #56]	; 0x38
   152d8:	cmp	r0, #1
   152dc:	beq	152f0 <__assert_fail@plt+0x3ac4>
   152e0:	mov	r3, #3
   152e4:	strh	r3, [r4, #60]	; 0x3c
   152e8:	mov	r5, r4
   152ec:	b	14f70 <__assert_fail@plt+0x3744>
   152f0:	ldr	r3, [r8, #48]	; 0x30
   152f4:	tst	r3, #4
   152f8:	bne	152e0 <__assert_fail@plt+0x3ab4>
   152fc:	movw	r1, #45892	; 0xb344
   15300:	movt	r1, #1
   15304:	mov	r0, r8
   15308:	bl	13780 <__assert_fail@plt+0x1f54>
   1530c:	str	r0, [r4, #36]	; 0x24
   15310:	cmp	r0, #0
   15314:	blt	15328 <__assert_fail@plt+0x3afc>
   15318:	ldrh	r3, [r4, #58]	; 0x3a
   1531c:	orr	r3, r3, #2
   15320:	strh	r3, [r4, #58]	; 0x3a
   15324:	b	152e0 <__assert_fail@plt+0x3ab4>
   15328:	bl	11688 <__errno_location@plt>
   1532c:	ldr	r3, [r0]
   15330:	str	r3, [r4, #32]
   15334:	mov	r3, #7
   15338:	strh	r3, [r4, #56]	; 0x38
   1533c:	b	152e0 <__assert_fail@plt+0x3ab4>
   15340:	ldrd	r2, [r5, #112]	; 0x70
   15344:	cmp	r3, #0
   15348:	cmpeq	r2, #2
   1534c:	beq	15360 <__assert_fail@plt+0x3b34>
   15350:	cmp	r3, #0
   15354:	cmpeq	r2, #1
   15358:	beq	1544c <__assert_fail@plt+0x3c20>
   1535c:	bl	117d8 <abort@plt>
   15360:	mov	r2, #0
   15364:	mov	r1, r5
   15368:	mov	r0, r8
   1536c:	bl	13408 <__assert_fail@plt+0x1bdc>
   15370:	strh	r0, [r5, #56]	; 0x38
   15374:	b	14fc0 <__assert_fail@plt+0x3794>
   15378:	mov	r0, r6
   1537c:	bl	1322c <__assert_fail@plt+0x1a00>
   15380:	bl	11688 <__errno_location@plt>
   15384:	mov	r3, #0
   15388:	str	r3, [r0]
   1538c:	str	r3, [r8]
   15390:	mov	r5, r4
   15394:	b	1544c <__assert_fail@plt+0x3c20>
   15398:	bl	117d8 <abort@plt>
   1539c:	mov	r0, r8
   153a0:	bl	13b28 <__assert_fail@plt+0x22fc>
   153a4:	cmp	r0, #0
   153a8:	beq	151b8 <__assert_fail@plt+0x398c>
   153ac:	bl	11688 <__errno_location@plt>
   153b0:	ldr	r3, [r0]
   153b4:	str	r3, [r6, #32]
   153b8:	ldr	r3, [r8, #48]	; 0x30
   153bc:	orr	r3, r3, #8192	; 0x2000
   153c0:	str	r3, [r8, #48]	; 0x30
   153c4:	ldrh	r3, [r6, #56]	; 0x38
   153c8:	cmp	r3, #2
   153cc:	moveq	r5, r4
   153d0:	bne	151c4 <__assert_fail@plt+0x3998>
   153d4:	b	1544c <__assert_fail@plt+0x3c20>
   153d8:	ldr	r0, [r6, #36]	; 0x24
   153dc:	bl	11760 <fchdir@plt>
   153e0:	cmp	r0, #0
   153e4:	beq	151b0 <__assert_fail@plt+0x3984>
   153e8:	bl	11688 <__errno_location@plt>
   153ec:	ldr	r3, [r0]
   153f0:	str	r3, [r6, #32]
   153f4:	ldr	r3, [r8, #48]	; 0x30
   153f8:	orr	r3, r3, #8192	; 0x2000
   153fc:	str	r3, [r8, #48]	; 0x30
   15400:	b	151b0 <__assert_fail@plt+0x3984>
   15404:	tst	r3, #1
   15408:	bne	151b8 <__assert_fail@plt+0x398c>
   1540c:	movw	r3, #45920	; 0xb360
   15410:	movt	r3, #1
   15414:	mvn	r2, #0
   15418:	ldr	r1, [r6, #4]
   1541c:	mov	r0, r8
   15420:	bl	13b8c <__assert_fail@plt+0x2360>
   15424:	cmp	r0, #0
   15428:	beq	151b8 <__assert_fail@plt+0x398c>
   1542c:	bl	11688 <__errno_location@plt>
   15430:	ldr	r3, [r0]
   15434:	str	r3, [r6, #32]
   15438:	ldr	r3, [r8, #48]	; 0x30
   1543c:	orr	r3, r3, #8192	; 0x2000
   15440:	str	r3, [r8, #48]	; 0x30
   15444:	b	153c4 <__assert_fail@plt+0x3b98>
   15448:	mov	r5, #0
   1544c:	mov	r0, r5
   15450:	ldrd	r4, [sp]
   15454:	ldrd	r6, [sp, #8]
   15458:	ldr	r8, [sp, #16]
   1545c:	add	sp, sp, #20
   15460:	pop	{pc}		; (ldr pc, [sp], #4)
   15464:	cmp	r2, #4
   15468:	bhi	15478 <__assert_fail@plt+0x3c4c>
   1546c:	strh	r2, [r1, #60]	; 0x3c
   15470:	mov	r0, #0
   15474:	bx	lr
   15478:	str	r4, [sp, #-8]!
   1547c:	str	lr, [sp, #4]
   15480:	bl	11688 <__errno_location@plt>
   15484:	mov	r3, #22
   15488:	str	r3, [r0]
   1548c:	mov	r0, #1
   15490:	ldr	r4, [sp]
   15494:	add	sp, sp, #4
   15498:	pop	{pc}		; (ldr pc, [sp], #4)
   1549c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   154a0:	strd	r6, [sp, #8]
   154a4:	str	r8, [sp, #16]
   154a8:	str	lr, [sp, #20]
   154ac:	bics	r3, r1, #4096	; 0x1000
   154b0:	bne	15560 <__assert_fail@plt+0x3d34>
   154b4:	mov	r4, r0
   154b8:	mov	r5, r1
   154bc:	ldr	r6, [r0]
   154c0:	bl	11688 <__errno_location@plt>
   154c4:	mov	r7, r0
   154c8:	mov	r3, #0
   154cc:	str	r3, [r0]
   154d0:	ldr	r3, [r4, #48]	; 0x30
   154d4:	tst	r3, #8192	; 0x2000
   154d8:	movne	r0, #0
   154dc:	bne	1554c <__assert_fail@plt+0x3d20>
   154e0:	ldrh	r3, [r6, #56]	; 0x38
   154e4:	cmp	r3, #9
   154e8:	beq	15574 <__assert_fail@plt+0x3d48>
   154ec:	cmp	r3, #1
   154f0:	movne	r0, #0
   154f4:	bne	1554c <__assert_fail@plt+0x3d20>
   154f8:	ldr	r0, [r4, #4]
   154fc:	cmp	r0, #0
   15500:	beq	15508 <__assert_fail@plt+0x3cdc>
   15504:	bl	137cc <__assert_fail@plt+0x1fa0>
   15508:	cmp	r5, #4096	; 0x1000
   1550c:	movne	r5, #1
   15510:	beq	1557c <__assert_fail@plt+0x3d50>
   15514:	ldr	r3, [r6, #48]	; 0x30
   15518:	cmp	r3, #0
   1551c:	bne	1553c <__assert_fail@plt+0x3d10>
   15520:	ldr	r3, [r6, #24]
   15524:	ldrb	r3, [r3]
   15528:	cmp	r3, #47	; 0x2f
   1552c:	beq	1553c <__assert_fail@plt+0x3d10>
   15530:	ldr	r3, [r4, #48]	; 0x30
   15534:	tst	r3, #4
   15538:	beq	15590 <__assert_fail@plt+0x3d64>
   1553c:	mov	r1, r5
   15540:	mov	r0, r4
   15544:	bl	13e5c <__assert_fail@plt+0x2630>
   15548:	str	r0, [r4, #4]
   1554c:	ldrd	r4, [sp]
   15550:	ldrd	r6, [sp, #8]
   15554:	ldr	r8, [sp, #16]
   15558:	add	sp, sp, #20
   1555c:	pop	{pc}		; (ldr pc, [sp], #4)
   15560:	bl	11688 <__errno_location@plt>
   15564:	mov	r3, #22
   15568:	str	r3, [r0]
   1556c:	mov	r0, #0
   15570:	b	1554c <__assert_fail@plt+0x3d20>
   15574:	ldr	r0, [r6, #8]
   15578:	b	1554c <__assert_fail@plt+0x3d20>
   1557c:	ldr	r3, [r4, #48]	; 0x30
   15580:	orr	r3, r3, #4096	; 0x1000
   15584:	str	r3, [r4, #48]	; 0x30
   15588:	mov	r5, #2
   1558c:	b	15514 <__assert_fail@plt+0x3ce8>
   15590:	movw	r1, #45892	; 0xb344
   15594:	movt	r1, #1
   15598:	mov	r0, r4
   1559c:	bl	13780 <__assert_fail@plt+0x1f54>
   155a0:	subs	r6, r0, #0
   155a4:	movlt	r0, #0
   155a8:	strlt	r0, [r4, #4]
   155ac:	blt	1554c <__assert_fail@plt+0x3d20>
   155b0:	mov	r1, r5
   155b4:	mov	r0, r4
   155b8:	bl	13e5c <__assert_fail@plt+0x2630>
   155bc:	str	r0, [r4, #4]
   155c0:	ldr	r3, [r4, #48]	; 0x30
   155c4:	tst	r3, #512	; 0x200
   155c8:	beq	155e4 <__assert_fail@plt+0x3db8>
   155cc:	mov	r2, #1
   155d0:	mov	r1, r6
   155d4:	mov	r0, r4
   155d8:	bl	13a90 <__assert_fail@plt+0x2264>
   155dc:	ldr	r0, [r4, #4]
   155e0:	b	1554c <__assert_fail@plt+0x3d20>
   155e4:	mov	r0, r6
   155e8:	bl	11760 <fchdir@plt>
   155ec:	cmp	r0, #0
   155f0:	bne	15600 <__assert_fail@plt+0x3dd4>
   155f4:	mov	r0, r6
   155f8:	bl	117e4 <close@plt>
   155fc:	b	155dc <__assert_fail@plt+0x3db0>
   15600:	ldr	r4, [r7]
   15604:	mov	r0, r6
   15608:	bl	117e4 <close@plt>
   1560c:	str	r4, [r7]
   15610:	mov	r0, #0
   15614:	b	1554c <__assert_fail@plt+0x3d20>
   15618:	ror	r0, r0, #3
   1561c:	udiv	r3, r0, r1
   15620:	mls	r0, r3, r1, r0
   15624:	bx	lr
   15628:	cmp	r1, r0
   1562c:	movne	r0, #0
   15630:	moveq	r0, #1
   15634:	bx	lr
   15638:	ldr	r2, [r0, #20]
   1563c:	movw	r3, #45924	; 0xb364
   15640:	movt	r3, #1
   15644:	cmp	r2, r3
   15648:	beq	156e4 <__assert_fail@plt+0x3eb8>
   1564c:	vldr	s15, [r2, #8]
   15650:	vldr	s14, [pc, #148]	; 156ec <__assert_fail@plt+0x3ec0>
   15654:	vcmpe.f32	s15, s14
   15658:	vmrs	APSR_nzcv, fpscr
   1565c:	ble	156bc <__assert_fail@plt+0x3e90>
   15660:	vldr	s14, [pc, #136]	; 156f0 <__assert_fail@plt+0x3ec4>
   15664:	vcmpe.f32	s15, s14
   15668:	vmrs	APSR_nzcv, fpscr
   1566c:	bpl	156bc <__assert_fail@plt+0x3e90>
   15670:	vldr	s13, [r2, #12]
   15674:	vldr	s14, [pc, #120]	; 156f4 <__assert_fail@plt+0x3ec8>
   15678:	vcmpe.f32	s13, s14
   1567c:	vmrs	APSR_nzcv, fpscr
   15680:	ble	156bc <__assert_fail@plt+0x3e90>
   15684:	vldr	s14, [r2]
   15688:	vcmpe.f32	s14, #0.0
   1568c:	vmrs	APSR_nzcv, fpscr
   15690:	blt	156bc <__assert_fail@plt+0x3e90>
   15694:	vldr	s13, [pc, #80]	; 156ec <__assert_fail@plt+0x3ec0>
   15698:	vadd.f32	s14, s14, s13
   1569c:	vldr	s13, [r2, #4]
   156a0:	vcmpe.f32	s14, s13
   156a4:	vmrs	APSR_nzcv, fpscr
   156a8:	bpl	156bc <__assert_fail@plt+0x3e90>
   156ac:	vldr	s12, [pc, #68]	; 156f8 <__assert_fail@plt+0x3ecc>
   156b0:	vcmpe.f32	s13, s12
   156b4:	vmrs	APSR_nzcv, fpscr
   156b8:	bls	156d0 <__assert_fail@plt+0x3ea4>
   156bc:	movw	r3, #45924	; 0xb364
   156c0:	movt	r3, #1
   156c4:	str	r3, [r0, #20]
   156c8:	mov	r0, #0
   156cc:	bx	lr
   156d0:	vcmpe.f32	s15, s14
   156d4:	vmrs	APSR_nzcv, fpscr
   156d8:	ble	156bc <__assert_fail@plt+0x3e90>
   156dc:	mov	r0, #1
   156e0:	bx	lr
   156e4:	mov	r0, #1
   156e8:	bx	lr
   156ec:	stclcc	12, cr12, [ip, #820]	; 0x334
   156f0:	svccc	0x00666666
   156f4:	svccc	0x008ccccd
   156f8:	svccc	0x00800000
   156fc:	ldrb	r3, [r1, #16]
   15700:	cmp	r3, #0
   15704:	bne	15730 <__assert_fail@plt+0x3f04>
   15708:	vmov	s15, r0
   1570c:	vcvt.f32.u32	s15, s15
   15710:	vldr	s13, [r1, #8]
   15714:	vdiv.f32	s14, s15, s13
   15718:	vldr	s15, [pc, #224]	; 15800 <__assert_fail@plt+0x3fd4>
   1571c:	vcmpe.f32	s14, s15
   15720:	vmrs	APSR_nzcv, fpscr
   15724:	bge	157f0 <__assert_fail@plt+0x3fc4>
   15728:	vcvt.u32.f32	s15, s14
   1572c:	vmov	r0, s15
   15730:	cmp	r0, #10
   15734:	movcc	r0, #10
   15738:	orr	r0, r0, #1
   1573c:	cmn	r0, #1
   15740:	beq	15754 <__assert_fail@plt+0x3f28>
   15744:	push	{lr}		; (str lr, [sp, #-4]!)
   15748:	movw	lr, #43691	; 0xaaab
   1574c:	movt	lr, #43690	; 0xaaaa
   15750:	b	1577c <__assert_fail@plt+0x3f50>
   15754:	mov	r0, #0
   15758:	bx	lr
   1575c:	mov	r3, #3
   15760:	udiv	r2, r0, r3
   15764:	mls	r3, r3, r2, r0
   15768:	cmp	r3, #0
   1576c:	bne	157cc <__assert_fail@plt+0x3fa0>
   15770:	add	r0, r0, #2
   15774:	cmn	r0, #1
   15778:	beq	157f8 <__assert_fail@plt+0x3fcc>
   1577c:	cmp	r0, #9
   15780:	bls	1575c <__assert_fail@plt+0x3f30>
   15784:	umull	r2, r3, lr, r0
   15788:	lsr	r3, r3, #1
   1578c:	add	r3, r3, r3, lsl #1
   15790:	cmp	r0, r3
   15794:	beq	15770 <__assert_fail@plt+0x3f44>
   15798:	mov	r1, #16
   1579c:	mov	r2, #9
   157a0:	mov	r3, #3
   157a4:	add	r2, r2, r1
   157a8:	add	r3, r3, #2
   157ac:	cmp	r2, r0
   157b0:	bcs	15760 <__assert_fail@plt+0x3f34>
   157b4:	add	r1, r1, #8
   157b8:	udiv	ip, r0, r3
   157bc:	mls	ip, r3, ip, r0
   157c0:	cmp	ip, #0
   157c4:	bne	157a4 <__assert_fail@plt+0x3f78>
   157c8:	b	15770 <__assert_fail@plt+0x3f44>
   157cc:	lsl	r2, r0, #2
   157d0:	lsr	r3, r0, #30
   157d4:	adds	r3, r3, #0
   157d8:	movne	r3, #1
   157dc:	cmp	r2, #0
   157e0:	movlt	r3, #1
   157e4:	cmp	r3, #0
   157e8:	movne	r0, #0
   157ec:	pop	{pc}		; (ldr pc, [sp], #4)
   157f0:	mov	r0, #0
   157f4:	bx	lr
   157f8:	mov	r0, #0
   157fc:	b	157ec <__assert_fail@plt+0x3fc0>
   15800:	svcmi	0x00800000
   15804:	str	r4, [sp, #-8]!
   15808:	str	lr, [sp, #4]
   1580c:	mov	r4, r0
   15810:	mov	r0, r1
   15814:	ldr	r3, [r4, #24]
   15818:	ldr	r1, [r4, #8]
   1581c:	blx	r3
   15820:	ldr	r3, [r4, #8]
   15824:	cmp	r3, r0
   15828:	bls	15840 <__assert_fail@plt+0x4014>
   1582c:	ldr	r3, [r4]
   15830:	add	r0, r3, r0, lsl #3
   15834:	ldr	r4, [sp]
   15838:	add	sp, sp, #4
   1583c:	pop	{pc}		; (ldr pc, [sp], #4)
   15840:	bl	117d8 <abort@plt>
   15844:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15848:	strd	r6, [sp, #8]
   1584c:	strd	r8, [sp, #16]
   15850:	strd	sl, [sp, #24]
   15854:	str	lr, [sp, #32]
   15858:	sub	sp, sp, #4
   1585c:	ldr	r7, [r1]
   15860:	ldr	r3, [r1, #4]
   15864:	cmp	r7, r3
   15868:	bcs	159c0 <__assert_fail@plt+0x4194>
   1586c:	mov	fp, r2
   15870:	mov	r9, r1
   15874:	mov	r6, r0
   15878:	add	r7, r7, #8
   1587c:	mov	sl, #0
   15880:	b	15954 <__assert_fail@plt+0x4128>
   15884:	str	r5, [r0]
   15888:	ldr	r2, [r6, #12]
   1588c:	add	r2, r2, #1
   15890:	str	r2, [r6, #12]
   15894:	str	sl, [r4]
   15898:	ldr	r2, [r6, #36]	; 0x24
   1589c:	str	r2, [r4, #4]
   158a0:	str	r4, [r6, #36]	; 0x24
   158a4:	mov	r4, r3
   158a8:	cmp	r3, #0
   158ac:	beq	158e0 <__assert_fail@plt+0x40b4>
   158b0:	ldr	r5, [r4]
   158b4:	mov	r1, r5
   158b8:	mov	r0, r6
   158bc:	bl	15804 <__assert_fail@plt+0x3fd8>
   158c0:	ldr	r3, [r4, #4]
   158c4:	ldr	r2, [r0]
   158c8:	cmp	r2, #0
   158cc:	beq	15884 <__assert_fail@plt+0x4058>
   158d0:	ldr	r2, [r0, #4]
   158d4:	str	r2, [r4, #4]
   158d8:	str	r4, [r0, #4]
   158dc:	b	158a4 <__assert_fail@plt+0x4078>
   158e0:	ldr	r4, [r8, #-8]
   158e4:	str	sl, [r8, #-4]
   158e8:	cmp	fp, #0
   158ec:	bne	15940 <__assert_fail@plt+0x4114>
   158f0:	mov	r1, r4
   158f4:	mov	r0, r6
   158f8:	bl	15804 <__assert_fail@plt+0x3fd8>
   158fc:	mov	r5, r0
   15900:	ldr	r3, [r0]
   15904:	cmp	r3, #0
   15908:	beq	1598c <__assert_fail@plt+0x4160>
   1590c:	ldr	r0, [r6, #36]	; 0x24
   15910:	cmp	r0, #0
   15914:	beq	15974 <__assert_fail@plt+0x4148>
   15918:	ldr	r3, [r0, #4]
   1591c:	str	r3, [r6, #36]	; 0x24
   15920:	str	r4, [r0]
   15924:	ldr	r3, [r5, #4]
   15928:	str	r3, [r0, #4]
   1592c:	str	r0, [r5, #4]
   15930:	str	sl, [r8, #-8]
   15934:	ldr	r3, [r9, #12]
   15938:	sub	r3, r3, #1
   1593c:	str	r3, [r9, #12]
   15940:	add	r2, r7, #8
   15944:	ldr	r3, [r9, #4]
   15948:	cmp	r3, r7
   1594c:	bls	159a0 <__assert_fail@plt+0x4174>
   15950:	mov	r7, r2
   15954:	mov	r8, r7
   15958:	ldr	r3, [r7, #-8]
   1595c:	cmp	r3, #0
   15960:	beq	15940 <__assert_fail@plt+0x4114>
   15964:	ldr	r4, [r7, #-4]
   15968:	cmp	r4, #0
   1596c:	bne	158b0 <__assert_fail@plt+0x4084>
   15970:	b	158e0 <__assert_fail@plt+0x40b4>
   15974:	mov	r0, #8
   15978:	bl	1a1c0 <lchmod@@Base+0x3900>
   1597c:	cmp	r0, #0
   15980:	bne	15920 <__assert_fail@plt+0x40f4>
   15984:	mov	r0, fp
   15988:	b	159a4 <__assert_fail@plt+0x4178>
   1598c:	str	r4, [r0]
   15990:	ldr	r3, [r6, #12]
   15994:	add	r3, r3, #1
   15998:	str	r3, [r6, #12]
   1599c:	b	15930 <__assert_fail@plt+0x4104>
   159a0:	mov	r0, #1
   159a4:	add	sp, sp, #4
   159a8:	ldrd	r4, [sp]
   159ac:	ldrd	r6, [sp, #8]
   159b0:	ldrd	r8, [sp, #16]
   159b4:	ldrd	sl, [sp, #24]
   159b8:	add	sp, sp, #32
   159bc:	pop	{pc}		; (ldr pc, [sp], #4)
   159c0:	mov	r0, #1
   159c4:	b	159a4 <__assert_fail@plt+0x4178>
   159c8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   159cc:	strd	r6, [sp, #8]
   159d0:	str	r8, [sp, #16]
   159d4:	str	lr, [sp, #20]
   159d8:	mov	r6, r0
   159dc:	mov	r5, r1
   159e0:	mov	r7, r2
   159e4:	mov	r8, r3
   159e8:	bl	15804 <__assert_fail@plt+0x3fd8>
   159ec:	mov	r4, r0
   159f0:	str	r0, [r7]
   159f4:	ldr	r0, [r0]
   159f8:	cmp	r0, #0
   159fc:	beq	15a78 <__assert_fail@plt+0x424c>
   15a00:	cmp	r0, r5
   15a04:	beq	15a8c <__assert_fail@plt+0x4260>
   15a08:	ldr	r3, [r6, #28]
   15a0c:	mov	r1, r0
   15a10:	mov	r0, r5
   15a14:	blx	r3
   15a18:	cmp	r0, #0
   15a1c:	bne	15a8c <__assert_fail@plt+0x4260>
   15a20:	ldr	r0, [r4, #4]
   15a24:	cmp	r0, #0
   15a28:	beq	15a78 <__assert_fail@plt+0x424c>
   15a2c:	ldr	r1, [r0]
   15a30:	cmp	r5, r1
   15a34:	beq	15a68 <__assert_fail@plt+0x423c>
   15a38:	ldr	r3, [r6, #28]
   15a3c:	mov	r0, r5
   15a40:	blx	r3
   15a44:	cmp	r0, #0
   15a48:	bne	15a68 <__assert_fail@plt+0x423c>
   15a4c:	ldr	r4, [r4, #4]
   15a50:	ldr	r0, [r4, #4]
   15a54:	cmp	r0, #0
   15a58:	beq	15a78 <__assert_fail@plt+0x424c>
   15a5c:	ldr	r1, [r0]
   15a60:	cmp	r1, r5
   15a64:	bne	15a38 <__assert_fail@plt+0x420c>
   15a68:	ldr	r3, [r4, #4]
   15a6c:	ldr	r0, [r3]
   15a70:	cmp	r8, #0
   15a74:	bne	15acc <__assert_fail@plt+0x42a0>
   15a78:	ldrd	r4, [sp]
   15a7c:	ldrd	r6, [sp, #8]
   15a80:	ldr	r8, [sp, #16]
   15a84:	add	sp, sp, #20
   15a88:	pop	{pc}		; (ldr pc, [sp], #4)
   15a8c:	ldr	r0, [r4]
   15a90:	cmp	r8, #0
   15a94:	beq	15a78 <__assert_fail@plt+0x424c>
   15a98:	ldr	r1, [r4, #4]
   15a9c:	cmp	r1, #0
   15aa0:	moveq	r3, #0
   15aa4:	streq	r3, [r4]
   15aa8:	beq	15a78 <__assert_fail@plt+0x424c>
   15aac:	ldrd	r2, [r1]
   15ab0:	strd	r2, [r4]
   15ab4:	mov	r3, #0
   15ab8:	str	r3, [r1]
   15abc:	ldr	r3, [r6, #36]	; 0x24
   15ac0:	str	r3, [r1, #4]
   15ac4:	str	r1, [r6, #36]	; 0x24
   15ac8:	b	15a78 <__assert_fail@plt+0x424c>
   15acc:	ldr	r2, [r3, #4]
   15ad0:	str	r2, [r4, #4]
   15ad4:	mov	r2, #0
   15ad8:	str	r2, [r3]
   15adc:	ldr	r2, [r6, #36]	; 0x24
   15ae0:	str	r2, [r3, #4]
   15ae4:	str	r3, [r6, #36]	; 0x24
   15ae8:	b	15a78 <__assert_fail@plt+0x424c>
   15aec:	ldr	r0, [r0, #8]
   15af0:	bx	lr
   15af4:	ldr	r0, [r0, #12]
   15af8:	bx	lr
   15afc:	ldr	r0, [r0, #16]
   15b00:	bx	lr
   15b04:	ldr	r2, [r0]
   15b08:	ldr	r3, [r0, #4]
   15b0c:	cmp	r2, r3
   15b10:	bcs	15b80 <__assert_fail@plt+0x4354>
   15b14:	add	r1, r2, #8
   15b18:	sub	ip, r3, #1
   15b1c:	sub	ip, ip, r2
   15b20:	bic	ip, ip, #7
   15b24:	add	r2, r2, #16
   15b28:	add	ip, ip, r2
   15b2c:	mov	r0, #0
   15b30:	b	15b4c <__assert_fail@plt+0x4320>
   15b34:	mov	r2, #1
   15b38:	cmp	r0, r2
   15b3c:	movcc	r0, r2
   15b40:	add	r1, r1, #8
   15b44:	cmp	r1, ip
   15b48:	beq	15b7c <__assert_fail@plt+0x4350>
   15b4c:	ldr	r3, [r1, #-8]
   15b50:	cmp	r3, #0
   15b54:	beq	15b40 <__assert_fail@plt+0x4314>
   15b58:	ldr	r3, [r1, #-4]
   15b5c:	cmp	r3, #0
   15b60:	beq	15b34 <__assert_fail@plt+0x4308>
   15b64:	mov	r2, #1
   15b68:	add	r2, r2, #1
   15b6c:	ldr	r3, [r3, #4]
   15b70:	cmp	r3, #0
   15b74:	bne	15b68 <__assert_fail@plt+0x433c>
   15b78:	b	15b38 <__assert_fail@plt+0x430c>
   15b7c:	bx	lr
   15b80:	mov	r0, #0
   15b84:	bx	lr
   15b88:	push	{lr}		; (str lr, [sp, #-4]!)
   15b8c:	ldr	r2, [r0]
   15b90:	ldr	r3, [r0, #4]
   15b94:	cmp	r2, r3
   15b98:	bcs	15c00 <__assert_fail@plt+0x43d4>
   15b9c:	add	r1, r2, #8
   15ba0:	sub	ip, r3, #1
   15ba4:	sub	ip, ip, r2
   15ba8:	bic	ip, ip, #7
   15bac:	add	r2, r2, #16
   15bb0:	add	ip, ip, r2
   15bb4:	mov	r2, #0
   15bb8:	mov	lr, r2
   15bbc:	b	15bcc <__assert_fail@plt+0x43a0>
   15bc0:	add	r1, r1, #8
   15bc4:	cmp	r1, ip
   15bc8:	beq	15c08 <__assert_fail@plt+0x43dc>
   15bcc:	ldr	r3, [r1, #-8]
   15bd0:	cmp	r3, #0
   15bd4:	beq	15bc0 <__assert_fail@plt+0x4394>
   15bd8:	add	lr, lr, #1
   15bdc:	add	r2, r2, #1
   15be0:	ldr	r3, [r1, #-4]
   15be4:	cmp	r3, #0
   15be8:	beq	15bc0 <__assert_fail@plt+0x4394>
   15bec:	add	r2, r2, #1
   15bf0:	ldr	r3, [r3, #4]
   15bf4:	cmp	r3, #0
   15bf8:	bne	15bec <__assert_fail@plt+0x43c0>
   15bfc:	b	15bc0 <__assert_fail@plt+0x4394>
   15c00:	mov	r2, #0
   15c04:	mov	lr, r2
   15c08:	ldr	r3, [r0, #12]
   15c0c:	cmp	r3, lr
   15c10:	movne	r0, #0
   15c14:	beq	15c1c <__assert_fail@plt+0x43f0>
   15c18:	pop	{pc}		; (ldr pc, [sp], #4)
   15c1c:	ldr	r0, [r0, #16]
   15c20:	cmp	r0, r2
   15c24:	movne	r0, #0
   15c28:	moveq	r0, #1
   15c2c:	b	15c18 <__assert_fail@plt+0x43ec>
   15c30:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15c34:	strd	r6, [sp, #8]
   15c38:	str	r8, [sp, #16]
   15c3c:	str	lr, [sp, #20]
   15c40:	sub	sp, sp, #8
   15c44:	mov	r6, r0
   15c48:	mov	r4, r1
   15c4c:	ldr	r5, [r0, #8]
   15c50:	ldr	r7, [r0, #12]
   15c54:	bl	15b04 <__assert_fail@plt+0x42d8>
   15c58:	mov	r8, r0
   15c5c:	ldr	r3, [r6, #16]
   15c60:	movw	r2, #45944	; 0xb378
   15c64:	movt	r2, #1
   15c68:	mov	r1, #1
   15c6c:	mov	r0, r4
   15c70:	bl	116d0 <__fprintf_chk@plt>
   15c74:	mov	r3, r5
   15c78:	movw	r2, #45968	; 0xb390
   15c7c:	movt	r2, #1
   15c80:	mov	r1, #1
   15c84:	mov	r0, r4
   15c88:	bl	116d0 <__fprintf_chk@plt>
   15c8c:	vmov	s15, r7
   15c90:	vcvt.f64.u32	d6, s15
   15c94:	vldr	d7, [pc, #92]	; 15cf8 <__assert_fail@plt+0x44cc>
   15c98:	vmul.f64	d6, d6, d7
   15c9c:	vmov	s15, r5
   15ca0:	vcvt.f64.u32	d7, s15
   15ca4:	vdiv.f64	d5, d6, d7
   15ca8:	vstr	d5, [sp]
   15cac:	mov	r3, r7
   15cb0:	movw	r2, #45992	; 0xb3a8
   15cb4:	movt	r2, #1
   15cb8:	mov	r1, #1
   15cbc:	mov	r0, r4
   15cc0:	bl	116d0 <__fprintf_chk@plt>
   15cc4:	mov	r3, r8
   15cc8:	movw	r2, #46028	; 0xb3cc
   15ccc:	movt	r2, #1
   15cd0:	mov	r1, #1
   15cd4:	mov	r0, r4
   15cd8:	bl	116d0 <__fprintf_chk@plt>
   15cdc:	add	sp, sp, #8
   15ce0:	ldrd	r4, [sp]
   15ce4:	ldrd	r6, [sp, #8]
   15ce8:	ldr	r8, [sp, #16]
   15cec:	add	sp, sp, #20
   15cf0:	pop	{pc}		; (ldr pc, [sp], #4)
   15cf4:	nop	{0}
   15cf8:	andeq	r0, r0, r0
   15cfc:	subsmi	r0, r9, r0
   15d00:	strd	r4, [sp, #-16]!
   15d04:	str	r6, [sp, #8]
   15d08:	str	lr, [sp, #12]
   15d0c:	mov	r6, r0
   15d10:	mov	r5, r1
   15d14:	bl	15804 <__assert_fail@plt+0x3fd8>
   15d18:	ldr	r1, [r0]
   15d1c:	cmp	r1, #0
   15d20:	beq	15d74 <__assert_fail@plt+0x4548>
   15d24:	mov	r4, r0
   15d28:	cmp	r1, r5
   15d2c:	beq	15d5c <__assert_fail@plt+0x4530>
   15d30:	ldr	r3, [r6, #28]
   15d34:	mov	r0, r5
   15d38:	blx	r3
   15d3c:	cmp	r0, #0
   15d40:	bne	15d5c <__assert_fail@plt+0x4530>
   15d44:	ldr	r4, [r4, #4]
   15d48:	cmp	r4, #0
   15d4c:	beq	15d60 <__assert_fail@plt+0x4534>
   15d50:	ldr	r1, [r4]
   15d54:	cmp	r1, r5
   15d58:	bne	15d30 <__assert_fail@plt+0x4504>
   15d5c:	ldr	r4, [r4]
   15d60:	mov	r0, r4
   15d64:	ldrd	r4, [sp]
   15d68:	ldr	r6, [sp, #8]
   15d6c:	add	sp, sp, #12
   15d70:	pop	{pc}		; (ldr pc, [sp], #4)
   15d74:	mov	r4, r1
   15d78:	b	15d60 <__assert_fail@plt+0x4534>
   15d7c:	ldr	r3, [r0, #16]
   15d80:	cmp	r3, #0
   15d84:	beq	15ddc <__assert_fail@plt+0x45b0>
   15d88:	ldr	r2, [r0]
   15d8c:	ldr	r1, [r0, #4]
   15d90:	cmp	r2, r1
   15d94:	bcs	15dd0 <__assert_fail@plt+0x45a4>
   15d98:	ldr	r0, [r2]
   15d9c:	cmp	r0, #0
   15da0:	bxne	lr
   15da4:	mov	r3, r2
   15da8:	sub	r1, r1, #1
   15dac:	sub	r1, r1, r2
   15db0:	bic	r1, r1, #7
   15db4:	add	r2, r2, r1
   15db8:	cmp	r3, r2
   15dbc:	beq	15dd0 <__assert_fail@plt+0x45a4>
   15dc0:	ldr	r0, [r3, #8]!
   15dc4:	cmp	r0, #0
   15dc8:	beq	15db8 <__assert_fail@plt+0x458c>
   15dcc:	bx	lr
   15dd0:	str	r4, [sp, #-8]!
   15dd4:	str	lr, [sp, #4]
   15dd8:	bl	117d8 <abort@plt>
   15ddc:	mov	r0, #0
   15de0:	bx	lr
   15de4:	strd	r4, [sp, #-16]!
   15de8:	str	r6, [sp, #8]
   15dec:	str	lr, [sp, #12]
   15df0:	mov	r5, r0
   15df4:	mov	r4, r1
   15df8:	bl	15804 <__assert_fail@plt+0x3fd8>
   15dfc:	mov	r2, r0
   15e00:	mov	r3, r0
   15e04:	b	15e14 <__assert_fail@plt+0x45e8>
   15e08:	ldr	r3, [r3, #4]
   15e0c:	cmp	r3, #0
   15e10:	beq	15e30 <__assert_fail@plt+0x4604>
   15e14:	ldr	r1, [r3]
   15e18:	cmp	r1, r4
   15e1c:	bne	15e08 <__assert_fail@plt+0x45dc>
   15e20:	ldr	r3, [r3, #4]
   15e24:	cmp	r3, #0
   15e28:	ldrne	r0, [r3]
   15e2c:	bne	15e54 <__assert_fail@plt+0x4628>
   15e30:	ldr	r3, [r5, #4]
   15e34:	add	r2, r2, #8
   15e38:	cmp	r3, r2
   15e3c:	bls	15e50 <__assert_fail@plt+0x4624>
   15e40:	ldr	r0, [r2]
   15e44:	cmp	r0, #0
   15e48:	beq	15e34 <__assert_fail@plt+0x4608>
   15e4c:	b	15e54 <__assert_fail@plt+0x4628>
   15e50:	mov	r0, #0
   15e54:	ldrd	r4, [sp]
   15e58:	ldr	r6, [sp, #8]
   15e5c:	add	sp, sp, #12
   15e60:	pop	{pc}		; (ldr pc, [sp], #4)
   15e64:	strd	r4, [sp, #-12]!
   15e68:	str	lr, [sp, #8]
   15e6c:	ldr	r4, [r0]
   15e70:	ldr	r3, [r0, #4]
   15e74:	cmp	r4, r3
   15e78:	bcs	15ee0 <__assert_fail@plt+0x46b4>
   15e7c:	mov	r5, r0
   15e80:	mov	r0, #0
   15e84:	b	15e98 <__assert_fail@plt+0x466c>
   15e88:	add	r4, r4, #8
   15e8c:	ldr	r3, [r5, #4]
   15e90:	cmp	r3, r4
   15e94:	bls	15ed4 <__assert_fail@plt+0x46a8>
   15e98:	ldr	r3, [r4]
   15e9c:	cmp	r3, #0
   15ea0:	beq	15e88 <__assert_fail@plt+0x465c>
   15ea4:	cmp	r2, r0
   15ea8:	bls	15ed4 <__assert_fail@plt+0x46a8>
   15eac:	add	ip, r1, r0, lsl #2
   15eb0:	mov	r3, r4
   15eb4:	add	r0, r0, #1
   15eb8:	ldr	lr, [r3]
   15ebc:	str	lr, [ip], #4
   15ec0:	ldr	r3, [r3, #4]
   15ec4:	cmp	r3, #0
   15ec8:	beq	15e88 <__assert_fail@plt+0x465c>
   15ecc:	cmp	r2, r0
   15ed0:	bne	15eb4 <__assert_fail@plt+0x4688>
   15ed4:	ldrd	r4, [sp]
   15ed8:	add	sp, sp, #8
   15edc:	pop	{pc}		; (ldr pc, [sp], #4)
   15ee0:	mov	r0, #0
   15ee4:	b	15ed4 <__assert_fail@plt+0x46a8>
   15ee8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   15eec:	strd	r6, [sp, #8]
   15ef0:	strd	r8, [sp, #16]
   15ef4:	str	sl, [sp, #24]
   15ef8:	str	lr, [sp, #28]
   15efc:	ldr	r8, [r0]
   15f00:	ldr	r3, [r0, #4]
   15f04:	cmp	r8, r3
   15f08:	bcs	15f68 <__assert_fail@plt+0x473c>
   15f0c:	mov	r7, r2
   15f10:	mov	r6, r1
   15f14:	mov	r9, r0
   15f18:	mov	r5, #0
   15f1c:	b	15f30 <__assert_fail@plt+0x4704>
   15f20:	add	r8, r8, #8
   15f24:	ldr	r3, [r9, #4]
   15f28:	cmp	r3, r8
   15f2c:	bls	15f6c <__assert_fail@plt+0x4740>
   15f30:	ldr	r3, [r8]
   15f34:	cmp	r3, #0
   15f38:	beq	15f20 <__assert_fail@plt+0x46f4>
   15f3c:	mov	r4, r8
   15f40:	mov	r1, r7
   15f44:	ldr	r0, [r4]
   15f48:	blx	r6
   15f4c:	cmp	r0, #0
   15f50:	beq	15f6c <__assert_fail@plt+0x4740>
   15f54:	add	r5, r5, #1
   15f58:	ldr	r4, [r4, #4]
   15f5c:	cmp	r4, #0
   15f60:	bne	15f40 <__assert_fail@plt+0x4714>
   15f64:	b	15f20 <__assert_fail@plt+0x46f4>
   15f68:	mov	r5, #0
   15f6c:	mov	r0, r5
   15f70:	ldrd	r4, [sp]
   15f74:	ldrd	r6, [sp, #8]
   15f78:	ldrd	r8, [sp, #16]
   15f7c:	ldr	sl, [sp, #24]
   15f80:	add	sp, sp, #28
   15f84:	pop	{pc}		; (ldr pc, [sp], #4)
   15f88:	ldrb	r2, [r0]
   15f8c:	cmp	r2, #0
   15f90:	beq	15fbc <__assert_fail@plt+0x4790>
   15f94:	mov	r3, #0
   15f98:	rsb	r3, r3, r3, lsl #5
   15f9c:	add	r3, r3, r2
   15fa0:	udiv	r2, r3, r1
   15fa4:	mls	r3, r1, r2, r3
   15fa8:	ldrb	r2, [r0, #1]!
   15fac:	cmp	r2, #0
   15fb0:	bne	15f98 <__assert_fail@plt+0x476c>
   15fb4:	mov	r0, r3
   15fb8:	bx	lr
   15fbc:	mov	r3, #0
   15fc0:	b	15fb4 <__assert_fail@plt+0x4788>
   15fc4:	strd	r4, [sp, #-8]!
   15fc8:	movw	r3, #45924	; 0xb364
   15fcc:	movt	r3, #1
   15fd0:	ldrd	r4, [r3]
   15fd4:	strd	r4, [r0]
   15fd8:	ldrd	r4, [r3, #8]
   15fdc:	strd	r4, [r0, #8]
   15fe0:	ldr	r3, [r3, #16]
   15fe4:	str	r3, [r0, #16]
   15fe8:	ldrd	r4, [sp]
   15fec:	add	sp, sp, #8
   15ff0:	bx	lr
   15ff4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15ff8:	strd	r6, [sp, #8]
   15ffc:	str	r8, [sp, #16]
   16000:	str	lr, [sp, #20]
   16004:	mov	r8, r0
   16008:	mov	r5, r1
   1600c:	subs	r7, r2, #0
   16010:	movw	r2, #22040	; 0x5618
   16014:	movt	r2, #1
   16018:	cmp	r7, #0
   1601c:	moveq	r7, r2
   16020:	subs	r6, r3, #0
   16024:	movw	r3, #22056	; 0x5628
   16028:	movt	r3, #1
   1602c:	cmp	r6, #0
   16030:	moveq	r6, r3
   16034:	mov	r0, #40	; 0x28
   16038:	bl	1a1c0 <lchmod@@Base+0x3900>
   1603c:	subs	r4, r0, #0
   16040:	beq	160c0 <__assert_fail@plt+0x4894>
   16044:	movw	r3, #45924	; 0xb364
   16048:	movt	r3, #1
   1604c:	cmp	r5, #0
   16050:	moveq	r5, r3
   16054:	str	r5, [r4, #20]
   16058:	mov	r0, r4
   1605c:	bl	15638 <__assert_fail@plt+0x3e0c>
   16060:	cmp	r0, #0
   16064:	beq	160d8 <__assert_fail@plt+0x48ac>
   16068:	mov	r1, r5
   1606c:	mov	r0, r8
   16070:	bl	156fc <__assert_fail@plt+0x3ed0>
   16074:	str	r0, [r4, #8]
   16078:	cmp	r0, #0
   1607c:	beq	160d8 <__assert_fail@plt+0x48ac>
   16080:	mov	r1, #8
   16084:	bl	1a14c <lchmod@@Base+0x388c>
   16088:	str	r0, [r4]
   1608c:	cmp	r0, #0
   16090:	beq	160d8 <__assert_fail@plt+0x48ac>
   16094:	ldr	r3, [r4, #8]
   16098:	add	r0, r0, r3, lsl #3
   1609c:	str	r0, [r4, #4]
   160a0:	mov	r3, #0
   160a4:	str	r3, [r4, #12]
   160a8:	str	r3, [r4, #16]
   160ac:	str	r7, [r4, #24]
   160b0:	str	r6, [r4, #28]
   160b4:	ldr	r2, [sp, #24]
   160b8:	str	r2, [r4, #32]
   160bc:	str	r3, [r4, #36]	; 0x24
   160c0:	mov	r0, r4
   160c4:	ldrd	r4, [sp]
   160c8:	ldrd	r6, [sp, #8]
   160cc:	ldr	r8, [sp, #16]
   160d0:	add	sp, sp, #20
   160d4:	pop	{pc}		; (ldr pc, [sp], #4)
   160d8:	mov	r0, r4
   160dc:	bl	1322c <__assert_fail@plt+0x1a00>
   160e0:	mov	r4, #0
   160e4:	b	160c0 <__assert_fail@plt+0x4894>
   160e8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   160ec:	strd	r6, [sp, #8]
   160f0:	str	r8, [sp, #16]
   160f4:	str	lr, [sp, #20]
   160f8:	mov	r5, r0
   160fc:	ldr	r6, [r0]
   16100:	ldr	r3, [r0, #4]
   16104:	cmp	r6, r3
   16108:	bcs	161a0 <__assert_fail@plt+0x4974>
   1610c:	add	r6, r6, #8
   16110:	mov	r7, #0
   16114:	b	16180 <__assert_fail@plt+0x4954>
   16118:	str	r7, [r4]
   1611c:	ldr	r3, [r4, #4]
   16120:	ldr	r2, [r5, #36]	; 0x24
   16124:	str	r2, [r4, #4]
   16128:	str	r4, [r5, #36]	; 0x24
   1612c:	mov	r4, r3
   16130:	cmp	r3, #0
   16134:	beq	16150 <__assert_fail@plt+0x4924>
   16138:	ldr	r3, [r5, #32]
   1613c:	cmp	r3, #0
   16140:	beq	16118 <__assert_fail@plt+0x48ec>
   16144:	ldr	r0, [r4]
   16148:	blx	r3
   1614c:	b	16118 <__assert_fail@plt+0x48ec>
   16150:	ldr	r3, [r5, #32]
   16154:	cmp	r3, #0
   16158:	beq	16164 <__assert_fail@plt+0x4938>
   1615c:	ldr	r0, [r8, #-8]
   16160:	blx	r3
   16164:	str	r7, [r8, #-8]
   16168:	str	r7, [r8, #-4]
   1616c:	add	r2, r6, #8
   16170:	ldr	r3, [r5, #4]
   16174:	cmp	r3, r6
   16178:	bls	161a0 <__assert_fail@plt+0x4974>
   1617c:	mov	r6, r2
   16180:	mov	r8, r6
   16184:	ldr	r3, [r6, #-8]
   16188:	cmp	r3, #0
   1618c:	beq	1616c <__assert_fail@plt+0x4940>
   16190:	ldr	r4, [r6, #-4]
   16194:	cmp	r4, #0
   16198:	bne	16138 <__assert_fail@plt+0x490c>
   1619c:	b	16150 <__assert_fail@plt+0x4924>
   161a0:	mov	r3, #0
   161a4:	str	r3, [r5, #12]
   161a8:	str	r3, [r5, #16]
   161ac:	ldrd	r4, [sp]
   161b0:	ldrd	r6, [sp, #8]
   161b4:	ldr	r8, [sp, #16]
   161b8:	add	sp, sp, #20
   161bc:	pop	{pc}		; (ldr pc, [sp], #4)
   161c0:	strd	r4, [sp, #-16]!
   161c4:	str	r6, [sp, #8]
   161c8:	str	lr, [sp, #12]
   161cc:	mov	r6, r0
   161d0:	ldr	r3, [r0, #32]
   161d4:	cmp	r3, #0
   161d8:	beq	16238 <__assert_fail@plt+0x4a0c>
   161dc:	ldr	r3, [r0, #16]
   161e0:	cmp	r3, #0
   161e4:	beq	16238 <__assert_fail@plt+0x4a0c>
   161e8:	ldr	r5, [r0]
   161ec:	ldr	r3, [r0, #4]
   161f0:	cmp	r5, r3
   161f4:	bcc	1620c <__assert_fail@plt+0x49e0>
   161f8:	b	16248 <__assert_fail@plt+0x4a1c>
   161fc:	add	r5, r5, #8
   16200:	ldr	r3, [r6, #4]
   16204:	cmp	r3, r5
   16208:	bls	16238 <__assert_fail@plt+0x4a0c>
   1620c:	ldr	r3, [r5]
   16210:	cmp	r3, #0
   16214:	beq	161fc <__assert_fail@plt+0x49d0>
   16218:	mov	r4, r5
   1621c:	ldr	r3, [r6, #32]
   16220:	ldr	r0, [r4]
   16224:	blx	r3
   16228:	ldr	r4, [r4, #4]
   1622c:	cmp	r4, #0
   16230:	bne	1621c <__assert_fail@plt+0x49f0>
   16234:	b	161fc <__assert_fail@plt+0x49d0>
   16238:	ldr	r5, [r6]
   1623c:	ldr	r3, [r6, #4]
   16240:	cmp	r5, r3
   16244:	bcc	16298 <__assert_fail@plt+0x4a6c>
   16248:	ldr	r0, [r6, #36]	; 0x24
   1624c:	cmp	r0, #0
   16250:	beq	16268 <__assert_fail@plt+0x4a3c>
   16254:	ldr	r4, [r0, #4]
   16258:	bl	1322c <__assert_fail@plt+0x1a00>
   1625c:	mov	r0, r4
   16260:	cmp	r4, #0
   16264:	bne	16254 <__assert_fail@plt+0x4a28>
   16268:	ldr	r0, [r6]
   1626c:	bl	1322c <__assert_fail@plt+0x1a00>
   16270:	mov	r0, r6
   16274:	bl	1322c <__assert_fail@plt+0x1a00>
   16278:	ldrd	r4, [sp]
   1627c:	ldr	r6, [sp, #8]
   16280:	add	sp, sp, #12
   16284:	pop	{pc}		; (ldr pc, [sp], #4)
   16288:	add	r5, r5, #8
   1628c:	ldr	r3, [r6, #4]
   16290:	cmp	r3, r5
   16294:	bls	16248 <__assert_fail@plt+0x4a1c>
   16298:	ldr	r0, [r5, #4]
   1629c:	cmp	r0, #0
   162a0:	beq	16288 <__assert_fail@plt+0x4a5c>
   162a4:	ldr	r4, [r0, #4]
   162a8:	bl	1322c <__assert_fail@plt+0x1a00>
   162ac:	mov	r0, r4
   162b0:	cmp	r4, #0
   162b4:	bne	162a4 <__assert_fail@plt+0x4a78>
   162b8:	b	16288 <__assert_fail@plt+0x4a5c>
   162bc:	strd	r4, [sp, #-12]!
   162c0:	str	lr, [sp, #8]
   162c4:	sub	sp, sp, #44	; 0x2c
   162c8:	mov	r4, r0
   162cc:	mov	r0, r1
   162d0:	ldr	r1, [r4, #20]
   162d4:	bl	156fc <__assert_fail@plt+0x3ed0>
   162d8:	subs	r5, r0, #0
   162dc:	beq	163d4 <__assert_fail@plt+0x4ba8>
   162e0:	ldr	r3, [r4, #8]
   162e4:	cmp	r3, r5
   162e8:	beq	163ec <__assert_fail@plt+0x4bc0>
   162ec:	mov	r1, #8
   162f0:	mov	r0, r5
   162f4:	bl	1a14c <lchmod@@Base+0x388c>
   162f8:	str	r0, [sp]
   162fc:	cmp	r0, #0
   16300:	beq	163f4 <__assert_fail@plt+0x4bc8>
   16304:	str	r5, [sp, #8]
   16308:	add	r0, r0, r5, lsl #3
   1630c:	str	r0, [sp, #4]
   16310:	mov	r2, #0
   16314:	str	r2, [sp, #12]
   16318:	str	r2, [sp, #16]
   1631c:	ldr	r3, [r4, #20]
   16320:	str	r3, [sp, #20]
   16324:	ldr	r3, [r4, #24]
   16328:	str	r3, [sp, #24]
   1632c:	ldr	r3, [r4, #28]
   16330:	str	r3, [sp, #28]
   16334:	ldr	r3, [r4, #32]
   16338:	str	r3, [sp, #32]
   1633c:	ldr	r3, [r4, #36]	; 0x24
   16340:	str	r3, [sp, #36]	; 0x24
   16344:	mov	r1, r4
   16348:	mov	r0, sp
   1634c:	bl	15844 <__assert_fail@plt+0x4018>
   16350:	subs	r5, r0, #0
   16354:	bne	1639c <__assert_fail@plt+0x4b70>
   16358:	ldr	r3, [sp, #36]	; 0x24
   1635c:	str	r3, [r4, #36]	; 0x24
   16360:	mov	r2, #1
   16364:	mov	r1, sp
   16368:	mov	r0, r4
   1636c:	bl	15844 <__assert_fail@plt+0x4018>
   16370:	cmp	r0, #0
   16374:	beq	163d0 <__assert_fail@plt+0x4ba4>
   16378:	mov	r2, #0
   1637c:	mov	r1, sp
   16380:	mov	r0, r4
   16384:	bl	15844 <__assert_fail@plt+0x4018>
   16388:	cmp	r0, #0
   1638c:	beq	163d0 <__assert_fail@plt+0x4ba4>
   16390:	ldr	r0, [sp]
   16394:	bl	1322c <__assert_fail@plt+0x1a00>
   16398:	b	163d8 <__assert_fail@plt+0x4bac>
   1639c:	ldr	r0, [r4]
   163a0:	bl	1322c <__assert_fail@plt+0x1a00>
   163a4:	ldr	r3, [sp]
   163a8:	str	r3, [r4]
   163ac:	ldr	r3, [sp, #4]
   163b0:	str	r3, [r4, #4]
   163b4:	ldr	r3, [sp, #8]
   163b8:	str	r3, [r4, #8]
   163bc:	ldr	r3, [sp, #12]
   163c0:	str	r3, [r4, #12]
   163c4:	ldr	r3, [sp, #36]	; 0x24
   163c8:	str	r3, [r4, #36]	; 0x24
   163cc:	b	163d8 <__assert_fail@plt+0x4bac>
   163d0:	bl	117d8 <abort@plt>
   163d4:	mov	r5, #0
   163d8:	mov	r0, r5
   163dc:	add	sp, sp, #44	; 0x2c
   163e0:	ldrd	r4, [sp]
   163e4:	add	sp, sp, #8
   163e8:	pop	{pc}		; (ldr pc, [sp], #4)
   163ec:	mov	r5, #1
   163f0:	b	163d8 <__assert_fail@plt+0x4bac>
   163f4:	mov	r5, #0
   163f8:	b	163d8 <__assert_fail@plt+0x4bac>
   163fc:	strd	r4, [sp, #-16]!
   16400:	str	r6, [sp, #8]
   16404:	str	lr, [sp, #12]
   16408:	sub	sp, sp, #8
   1640c:	subs	r5, r1, #0
   16410:	beq	1645c <__assert_fail@plt+0x4c30>
   16414:	mov	r4, r0
   16418:	mov	r6, r2
   1641c:	mov	r3, #0
   16420:	add	r2, sp, #4
   16424:	mov	r1, r5
   16428:	bl	159c8 <__assert_fail@plt+0x419c>
   1642c:	cmp	r0, #0
   16430:	beq	16460 <__assert_fail@plt+0x4c34>
   16434:	cmp	r6, #0
   16438:	moveq	r0, #0
   1643c:	beq	16448 <__assert_fail@plt+0x4c1c>
   16440:	str	r0, [r6]
   16444:	mov	r0, #0
   16448:	add	sp, sp, #8
   1644c:	ldrd	r4, [sp]
   16450:	ldr	r6, [sp, #8]
   16454:	add	sp, sp, #12
   16458:	pop	{pc}		; (ldr pc, [sp], #4)
   1645c:	bl	117d8 <abort@plt>
   16460:	vldr	s15, [r4, #12]
   16464:	vcvt.f32.u32	s14, s15
   16468:	ldr	r3, [r4, #20]
   1646c:	vldr	s15, [r4, #8]
   16470:	vcvt.f32.u32	s15, s15
   16474:	vldr	s13, [r3, #8]
   16478:	vmul.f32	s15, s15, s13
   1647c:	vcmpe.f32	s14, s15
   16480:	vmrs	APSR_nzcv, fpscr
   16484:	bgt	164d4 <__assert_fail@plt+0x4ca8>
   16488:	ldr	r3, [sp, #4]
   1648c:	ldr	r2, [r3]
   16490:	cmp	r2, #0
   16494:	beq	16580 <__assert_fail@plt+0x4d54>
   16498:	ldr	r0, [r4, #36]	; 0x24
   1649c:	cmp	r0, #0
   164a0:	beq	16568 <__assert_fail@plt+0x4d3c>
   164a4:	ldr	r3, [r0, #4]
   164a8:	str	r3, [r4, #36]	; 0x24
   164ac:	str	r5, [r0]
   164b0:	ldr	r3, [sp, #4]
   164b4:	ldr	r2, [r3, #4]
   164b8:	str	r2, [r0, #4]
   164bc:	str	r0, [r3, #4]
   164c0:	ldr	r3, [r4, #16]
   164c4:	add	r3, r3, #1
   164c8:	str	r3, [r4, #16]
   164cc:	mov	r0, #1
   164d0:	b	16448 <__assert_fail@plt+0x4c1c>
   164d4:	mov	r0, r4
   164d8:	bl	15638 <__assert_fail@plt+0x3e0c>
   164dc:	ldr	r3, [r4, #20]
   164e0:	vldr	s13, [r3, #8]
   164e4:	vldr	s15, [r4, #8]
   164e8:	vcvt.f32.u32	s15, s15
   164ec:	vldr	s14, [r4, #12]
   164f0:	vcvt.f32.u32	s14, s14
   164f4:	vmul.f32	s12, s13, s15
   164f8:	vcmpe.f32	s14, s12
   164fc:	vmrs	APSR_nzcv, fpscr
   16500:	ble	16488 <__assert_fail@plt+0x4c5c>
   16504:	ldrb	r2, [r3, #16]
   16508:	cmp	r2, #0
   1650c:	vldr	s14, [r3, #12]
   16510:	vmul.f32	s15, s15, s14
   16514:	vmuleq.f32	s15, s15, s13
   16518:	vldr	s14, [pc, #132]	; 165a4 <__assert_fail@plt+0x4d78>
   1651c:	vcmpe.f32	s15, s14
   16520:	vmrs	APSR_nzcv, fpscr
   16524:	mvnge	r0, #0
   16528:	bge	16448 <__assert_fail@plt+0x4c1c>
   1652c:	vcvt.u32.f32	s15, s15
   16530:	vmov	r1, s15
   16534:	mov	r0, r4
   16538:	bl	162bc <__assert_fail@plt+0x4a90>
   1653c:	cmp	r0, #0
   16540:	mvneq	r0, #0
   16544:	beq	16448 <__assert_fail@plt+0x4c1c>
   16548:	mov	r3, #0
   1654c:	add	r2, sp, #4
   16550:	mov	r1, r5
   16554:	mov	r0, r4
   16558:	bl	159c8 <__assert_fail@plt+0x419c>
   1655c:	cmp	r0, #0
   16560:	beq	16488 <__assert_fail@plt+0x4c5c>
   16564:	bl	117d8 <abort@plt>
   16568:	mov	r0, #8
   1656c:	bl	1a1c0 <lchmod@@Base+0x3900>
   16570:	cmp	r0, #0
   16574:	mvneq	r0, #0
   16578:	beq	16448 <__assert_fail@plt+0x4c1c>
   1657c:	b	164ac <__assert_fail@plt+0x4c80>
   16580:	str	r5, [r3]
   16584:	ldr	r3, [r4, #16]
   16588:	add	r3, r3, #1
   1658c:	str	r3, [r4, #16]
   16590:	ldr	r3, [r4, #12]
   16594:	add	r3, r3, #1
   16598:	str	r3, [r4, #12]
   1659c:	mov	r0, #1
   165a0:	b	16448 <__assert_fail@plt+0x4c1c>
   165a4:	svcmi	0x00800000
   165a8:	str	r4, [sp, #-8]!
   165ac:	str	lr, [sp, #4]
   165b0:	sub	sp, sp, #8
   165b4:	mov	r4, r1
   165b8:	add	r2, sp, #4
   165bc:	bl	163fc <__assert_fail@plt+0x4bd0>
   165c0:	cmn	r0, #1
   165c4:	moveq	r0, #0
   165c8:	beq	165d8 <__assert_fail@plt+0x4dac>
   165cc:	cmp	r0, #0
   165d0:	ldreq	r0, [sp, #4]
   165d4:	movne	r0, r4
   165d8:	add	sp, sp, #8
   165dc:	ldr	r4, [sp]
   165e0:	add	sp, sp, #4
   165e4:	pop	{pc}		; (ldr pc, [sp], #4)
   165e8:	strd	r4, [sp, #-16]!
   165ec:	str	r6, [sp, #8]
   165f0:	str	lr, [sp, #12]
   165f4:	sub	sp, sp, #8
   165f8:	mov	r4, r0
   165fc:	mov	r3, #1
   16600:	add	r2, sp, #4
   16604:	bl	159c8 <__assert_fail@plt+0x419c>
   16608:	subs	r5, r0, #0
   1660c:	beq	1662c <__assert_fail@plt+0x4e00>
   16610:	ldr	r3, [r4, #16]
   16614:	sub	r3, r3, #1
   16618:	str	r3, [r4, #16]
   1661c:	ldr	r3, [sp, #4]
   16620:	ldr	r3, [r3]
   16624:	cmp	r3, #0
   16628:	beq	16644 <__assert_fail@plt+0x4e18>
   1662c:	mov	r0, r5
   16630:	add	sp, sp, #8
   16634:	ldrd	r4, [sp]
   16638:	ldr	r6, [sp, #8]
   1663c:	add	sp, sp, #12
   16640:	pop	{pc}		; (ldr pc, [sp], #4)
   16644:	ldr	r3, [r4, #12]
   16648:	sub	r3, r3, #1
   1664c:	str	r3, [r4, #12]
   16650:	vmov	s15, r3
   16654:	vcvt.f32.u32	s15, s15
   16658:	ldr	r3, [r4, #20]
   1665c:	vldr	s14, [r4, #8]
   16660:	vcvt.f32.u32	s14, s14
   16664:	vldr	s13, [r3]
   16668:	vmul.f32	s14, s14, s13
   1666c:	vcmpe.f32	s15, s14
   16670:	vmrs	APSR_nzcv, fpscr
   16674:	bpl	1662c <__assert_fail@plt+0x4e00>
   16678:	mov	r0, r4
   1667c:	bl	15638 <__assert_fail@plt+0x3e0c>
   16680:	ldr	r3, [r4, #20]
   16684:	vldr	s15, [r4, #8]
   16688:	vcvt.f32.u32	s15, s15
   1668c:	vldr	s14, [r4, #12]
   16690:	vcvt.f32.u32	s13, s14
   16694:	vldr	s14, [r3]
   16698:	vmul.f32	s14, s15, s14
   1669c:	vcmpe.f32	s13, s14
   166a0:	vmrs	APSR_nzcv, fpscr
   166a4:	bpl	1662c <__assert_fail@plt+0x4e00>
   166a8:	ldrb	r2, [r3, #16]
   166ac:	cmp	r2, #0
   166b0:	vldr	s14, [r3, #4]
   166b4:	vmuleq.f32	s15, s15, s14
   166b8:	vldreq	s14, [r3, #8]
   166bc:	vmul.f32	s15, s15, s14
   166c0:	vcvt.u32.f32	s15, s15
   166c4:	vmov	r1, s15
   166c8:	mov	r0, r4
   166cc:	bl	162bc <__assert_fail@plt+0x4a90>
   166d0:	cmp	r0, #0
   166d4:	bne	1662c <__assert_fail@plt+0x4e00>
   166d8:	ldr	r0, [r4, #36]	; 0x24
   166dc:	cmp	r0, #0
   166e0:	beq	166f8 <__assert_fail@plt+0x4ecc>
   166e4:	ldr	r6, [r0, #4]
   166e8:	bl	1322c <__assert_fail@plt+0x1a00>
   166ec:	mov	r0, r6
   166f0:	cmp	r6, #0
   166f4:	bne	166e4 <__assert_fail@plt+0x4eb8>
   166f8:	mov	r3, #0
   166fc:	str	r3, [r4, #36]	; 0x24
   16700:	b	1662c <__assert_fail@plt+0x4e00>
   16704:	str	r4, [sp, #-8]!
   16708:	str	lr, [sp, #4]
   1670c:	bl	165e8 <__assert_fail@plt+0x4dbc>
   16710:	ldr	r4, [sp]
   16714:	add	sp, sp, #4
   16718:	pop	{pc}		; (ldr pc, [sp], #4)
   1671c:	strd	r4, [sp, #-16]!
   16720:	str	r6, [sp, #8]
   16724:	str	lr, [sp, #12]
   16728:	mov	r4, r0
   1672c:	mov	r5, r1
   16730:	ldr	r0, [r0]
   16734:	bl	1a948 <lchmod@@Base+0x4088>
   16738:	ldr	r1, [r4, #8]
   1673c:	mov	r2, r5
   16740:	mov	r3, #0
   16744:	eor	r0, r0, r1
   16748:	ldr	r1, [r4, #12]
   1674c:	bl	1aba8 <lchmod@@Base+0x42e8>
   16750:	mov	r0, r2
   16754:	ldrd	r4, [sp]
   16758:	ldr	r6, [sp, #8]
   1675c:	add	sp, sp, #12
   16760:	pop	{pc}		; (ldr pc, [sp], #4)
   16764:	strd	r4, [sp, #-16]!
   16768:	str	r6, [sp, #8]
   1676c:	str	lr, [sp, #12]
   16770:	ldrd	r4, [r0, #8]
   16774:	ldrd	r2, [r1, #8]
   16778:	cmp	r5, r3
   1677c:	cmpeq	r4, r2
   16780:	movne	r0, #0
   16784:	beq	16798 <__assert_fail@plt+0x4f6c>
   16788:	ldrd	r4, [sp]
   1678c:	ldr	r6, [sp, #8]
   16790:	add	sp, sp, #12
   16794:	pop	{pc}		; (ldr pc, [sp], #4)
   16798:	ldrd	r4, [r0, #16]
   1679c:	ldrd	r2, [r1, #16]
   167a0:	cmp	r5, r3
   167a4:	cmpeq	r4, r2
   167a8:	movne	r0, #0
   167ac:	bne	16788 <__assert_fail@plt+0x4f5c>
   167b0:	ldr	r1, [r1]
   167b4:	ldr	r0, [r0]
   167b8:	bl	11454 <strcmp@plt>
   167bc:	clz	r0, r0
   167c0:	lsr	r0, r0, #5
   167c4:	b	16788 <__assert_fail@plt+0x4f5c>
   167c8:	str	r4, [sp, #-8]!
   167cc:	str	lr, [sp, #4]
   167d0:	mov	r4, r0
   167d4:	ldr	r0, [r0]
   167d8:	bl	1322c <__assert_fail@plt+0x1a00>
   167dc:	mov	r0, r4
   167e0:	bl	1322c <__assert_fail@plt+0x1a00>
   167e4:	ldr	r4, [sp]
   167e8:	add	sp, sp, #4
   167ec:	pop	{pc}		; (ldr pc, [sp], #4)
   167f0:	mov	r3, #1
   167f4:	strb	r3, [r0, #28]
   167f8:	mov	r3, #0
   167fc:	str	r3, [r0, #20]
   16800:	str	r3, [r0, #24]
   16804:	str	r1, [r0]
   16808:	str	r1, [r0, #4]
   1680c:	str	r1, [r0, #8]
   16810:	str	r1, [r0, #12]
   16814:	str	r1, [r0, #16]
   16818:	bx	lr
   1681c:	ldrb	r0, [r0, #28]
   16820:	bx	lr
   16824:	mov	r2, r0
   16828:	ldrb	ip, [r0, #28]
   1682c:	eor	ip, ip, #1
   16830:	ldr	r3, [r0, #20]
   16834:	add	r3, ip, r3
   16838:	and	r3, r3, #3
   1683c:	ldr	r0, [r0, r3, lsl #2]
   16840:	str	r1, [r2, r3, lsl #2]
   16844:	str	r3, [r2, #20]
   16848:	ldr	r1, [r2, #24]
   1684c:	cmp	r1, r3
   16850:	beq	16860 <__assert_fail@plt+0x5034>
   16854:	mov	r3, #0
   16858:	strb	r3, [r2, #28]
   1685c:	bx	lr
   16860:	add	ip, ip, r1
   16864:	and	ip, ip, #3
   16868:	str	ip, [r2, #24]
   1686c:	b	16854 <__assert_fail@plt+0x5028>
   16870:	ldrb	r3, [r0, #28]
   16874:	cmp	r3, #0
   16878:	bne	168b4 <__assert_fail@plt+0x5088>
   1687c:	ldr	r3, [r0, #20]
   16880:	ldr	r2, [r0, r3, lsl #2]
   16884:	ldr	r1, [r0, #16]
   16888:	str	r1, [r0, r3, lsl #2]
   1688c:	ldr	r1, [r0, #24]
   16890:	cmp	r3, r1
   16894:	moveq	r3, #1
   16898:	strbeq	r3, [r0, #28]
   1689c:	beq	168ac <__assert_fail@plt+0x5080>
   168a0:	add	r3, r3, #3
   168a4:	and	r3, r3, #3
   168a8:	str	r3, [r0, #20]
   168ac:	mov	r0, r2
   168b0:	bx	lr
   168b4:	str	r4, [sp, #-8]!
   168b8:	str	lr, [sp, #4]
   168bc:	bl	117d8 <abort@plt>

000168c0 <lchmod@@Base>:
   168c0:	strd	r4, [sp, #-28]!	; 0xffffffe4
   168c4:	strd	r6, [sp, #8]
   168c8:	strd	r8, [sp, #16]
   168cc:	str	lr, [sp, #24]
   168d0:	sub	sp, sp, #148	; 0x94
   168d4:	mov	r9, r0
   168d8:	mov	r5, r1
   168dc:	mov	r1, #2654208	; 0x288000
   168e0:	bl	115bc <open64@plt>
   168e4:	subs	r4, r0, #0
   168e8:	blt	16980 <lchmod@@Base+0xc0>
   168ec:	mov	r3, #4096	; 0x1000
   168f0:	str	r3, [sp]
   168f4:	add	r3, sp, #40	; 0x28
   168f8:	movw	r2, #46024	; 0xb3c8
   168fc:	movt	r2, #1
   16900:	mov	r1, r4
   16904:	mov	r0, #3
   16908:	bl	11538 <__fxstatat64@plt>
   1690c:	cmp	r0, #0
   16910:	bne	1699c <lchmod@@Base+0xdc>
   16914:	ldr	r3, [sp, #56]	; 0x38
   16918:	and	r3, r3, #61440	; 0xf000
   1691c:	cmp	r3, #40960	; 0xa000
   16920:	beq	169bc <lchmod@@Base+0xfc>
   16924:	str	r4, [sp]
   16928:	movw	r3, #46052	; 0xb3e4
   1692c:	movt	r3, #1
   16930:	mov	r2, #26
   16934:	mov	r1, #1
   16938:	add	r0, sp, #12
   1693c:	bl	11694 <__sprintf_chk@plt>
   16940:	mov	r1, r5
   16944:	add	r0, sp, #12
   16948:	bl	117b4 <chmod@plt>
   1694c:	mov	r6, r0
   16950:	bl	11688 <__errno_location@plt>
   16954:	mov	r7, r0
   16958:	ldr	r8, [r0]
   1695c:	mov	r0, r4
   16960:	bl	117e4 <close@plt>
   16964:	cmp	r6, #0
   16968:	moveq	r4, r6
   1696c:	beq	16980 <lchmod@@Base+0xc0>
   16970:	cmp	r8, #2
   16974:	beq	169d8 <lchmod@@Base+0x118>
   16978:	str	r8, [r7]
   1697c:	mov	r4, r6
   16980:	mov	r0, r4
   16984:	add	sp, sp, #148	; 0x94
   16988:	ldrd	r4, [sp]
   1698c:	ldrd	r6, [sp, #8]
   16990:	ldrd	r8, [sp, #16]
   16994:	add	sp, sp, #24
   16998:	pop	{pc}		; (ldr pc, [sp], #4)
   1699c:	bl	11688 <__errno_location@plt>
   169a0:	mov	r5, r0
   169a4:	ldr	r6, [r0]
   169a8:	mov	r0, r4
   169ac:	bl	117e4 <close@plt>
   169b0:	str	r6, [r5]
   169b4:	mvn	r4, #0
   169b8:	b	16980 <lchmod@@Base+0xc0>
   169bc:	mov	r0, r4
   169c0:	bl	117e4 <close@plt>
   169c4:	bl	11688 <__errno_location@plt>
   169c8:	mov	r3, #95	; 0x5f
   169cc:	str	r3, [r0]
   169d0:	mvn	r4, #0
   169d4:	b	16980 <lchmod@@Base+0xc0>
   169d8:	mov	r1, r5
   169dc:	mov	r0, r9
   169e0:	bl	117b4 <chmod@plt>
   169e4:	mov	r4, r0
   169e8:	b	16980 <lchmod@@Base+0xc0>
   169ec:	strd	r4, [sp, #-36]!	; 0xffffffdc
   169f0:	strd	r6, [sp, #8]
   169f4:	strd	r8, [sp, #16]
   169f8:	strd	sl, [sp, #24]
   169fc:	str	lr, [sp, #32]
   16a00:	sub	sp, sp, #4
   16a04:	mov	r4, r0
   16a08:	ldrb	r3, [r0]
   16a0c:	sub	r2, r3, #48	; 0x30
   16a10:	uxtb	r2, r2
   16a14:	cmp	r2, #7
   16a18:	bls	16aa4 <lchmod@@Base+0x1e4>
   16a1c:	cmp	r3, #0
   16a20:	moveq	r0, #1
   16a24:	beq	16a54 <lchmod@@Base+0x194>
   16a28:	mov	r1, r4
   16a2c:	mov	r0, #1
   16a30:	and	r2, r3, #239	; 0xef
   16a34:	cmp	r3, #43	; 0x2b
   16a38:	cmpne	r2, #45	; 0x2d
   16a3c:	moveq	r3, #1
   16a40:	movne	r3, #0
   16a44:	add	r0, r0, r3
   16a48:	ldrb	r3, [r1, #1]!
   16a4c:	cmp	r3, #0
   16a50:	bne	16a30 <lchmod@@Base+0x170>
   16a54:	mov	r1, #16
   16a58:	bl	19d64 <lchmod@@Base+0x34a4>
   16a5c:	mov	ip, #0
   16a60:	movw	fp, #519	; 0x207
   16a64:	movw	r7, #1080	; 0x438
   16a68:	mov	r9, #3
   16a6c:	mov	r6, #0
   16a70:	mov	r2, r4
   16a74:	ldrb	r3, [r4], #1
   16a78:	cmp	r3, #97	; 0x61
   16a7c:	beq	16b7c <lchmod@@Base+0x2bc>
   16a80:	bls	16b30 <lchmod@@Base+0x270>
   16a84:	cmp	r3, #111	; 0x6f
   16a88:	beq	16b74 <lchmod@@Base+0x2b4>
   16a8c:	cmp	r3, #117	; 0x75
   16a90:	beq	16b6c <lchmod@@Base+0x2ac>
   16a94:	cmp	r3, #103	; 0x67
   16a98:	bne	16b48 <lchmod@@Base+0x288>
   16a9c:	orr	r6, r6, r7
   16aa0:	b	16a70 <lchmod@@Base+0x1b0>
   16aa4:	mov	r2, r0
   16aa8:	mov	r5, #0
   16aac:	lsl	r5, r5, #3
   16ab0:	sub	r5, r5, #48	; 0x30
   16ab4:	ldrb	r3, [r2], #1
   16ab8:	add	r5, r3, r5
   16abc:	cmp	r5, #4096	; 0x1000
   16ac0:	bcs	16db4 <lchmod@@Base+0x4f4>
   16ac4:	ldrb	r1, [r2]
   16ac8:	sub	r3, r1, #48	; 0x30
   16acc:	uxtb	r3, r3
   16ad0:	cmp	r3, #7
   16ad4:	bls	16aac <lchmod@@Base+0x1ec>
   16ad8:	cmp	r1, #0
   16adc:	movne	r0, #0
   16ae0:	bne	16b50 <lchmod@@Base+0x290>
   16ae4:	sub	r2, r2, r4
   16ae8:	cmp	r2, #4
   16aec:	andle	r4, r5, #3072	; 0xc00
   16af0:	mvnle	r4, r4, lsr #10
   16af4:	mvnle	r4, r4, lsl #10
   16af8:	movwgt	r4, #4095	; 0xfff
   16afc:	mov	r0, #32
   16b00:	bl	19be4 <lchmod@@Base+0x3324>
   16b04:	mov	r3, #61	; 0x3d
   16b08:	strb	r3, [r0]
   16b0c:	mov	r3, #1
   16b10:	strb	r3, [r0, #1]
   16b14:	movw	r3, #4095	; 0xfff
   16b18:	str	r3, [r0, #4]
   16b1c:	str	r5, [r0, #8]
   16b20:	str	r4, [r0, #12]
   16b24:	mov	r3, #0
   16b28:	strb	r3, [r0, #17]
   16b2c:	b	16b50 <lchmod@@Base+0x290>
   16b30:	cmp	r3, #45	; 0x2d
   16b34:	beq	16b84 <lchmod@@Base+0x2c4>
   16b38:	cmp	r3, #61	; 0x3d
   16b3c:	beq	16b84 <lchmod@@Base+0x2c4>
   16b40:	cmp	r3, #43	; 0x2b
   16b44:	beq	16b84 <lchmod@@Base+0x2c4>
   16b48:	bl	1322c <__assert_fail@plt+0x1a00>
   16b4c:	mov	r0, #0
   16b50:	add	sp, sp, #4
   16b54:	ldrd	r4, [sp]
   16b58:	ldrd	r6, [sp, #8]
   16b5c:	ldrd	r8, [sp, #16]
   16b60:	ldrd	sl, [sp, #24]
   16b64:	add	sp, sp, #32
   16b68:	pop	{pc}		; (ldr pc, [sp], #4)
   16b6c:	orr	r6, r6, #2496	; 0x9c0
   16b70:	b	16a70 <lchmod@@Base+0x1b0>
   16b74:	orr	r6, r6, fp
   16b78:	b	16a70 <lchmod@@Base+0x1b0>
   16b7c:	movw	r6, #4095	; 0xfff
   16b80:	b	16a70 <lchmod@@Base+0x1b0>
   16b84:	add	r5, ip, #1
   16b88:	add	ip, r0, ip, lsl #4
   16b8c:	mov	sl, #1
   16b90:	b	16d44 <lchmod@@Base+0x484>
   16b94:	sub	r3, r3, #48	; 0x30
   16b98:	uxtb	r3, r3
   16b9c:	cmp	r3, #7
   16ba0:	movls	r3, #0
   16ba4:	bhi	16c10 <lchmod@@Base+0x350>
   16ba8:	lsl	r3, r3, #3
   16bac:	sub	r3, r3, #48	; 0x30
   16bb0:	ldrb	r2, [r1], #1
   16bb4:	add	r3, r2, r3
   16bb8:	cmp	r3, #4096	; 0x1000
   16bbc:	bcs	16b48 <lchmod@@Base+0x288>
   16bc0:	ldrb	r4, [r1]
   16bc4:	sub	r2, r4, #48	; 0x30
   16bc8:	uxtb	r2, r2
   16bcc:	cmp	r2, #7
   16bd0:	bls	16ba8 <lchmod@@Base+0x2e8>
   16bd4:	cmp	r6, #0
   16bd8:	bne	16b48 <lchmod@@Base+0x288>
   16bdc:	cmp	r4, #0
   16be0:	cmpne	r4, #44	; 0x2c
   16be4:	bne	16b48 <lchmod@@Base+0x288>
   16be8:	mov	r8, ip
   16bec:	strb	lr, [ip]
   16bf0:	strb	sl, [ip, #1]
   16bf4:	movw	r2, #4095	; 0xfff
   16bf8:	str	r2, [ip, #4]
   16bfc:	str	r3, [ip, #8]
   16c00:	mov	r2, r1
   16c04:	movw	r6, #4095	; 0xfff
   16c08:	mov	r4, r6
   16c0c:	b	16d20 <lchmod@@Base+0x460>
   16c10:	mov	r8, r1
   16c14:	mov	r1, sl
   16c18:	mov	r4, #0
   16c1c:	b	16c64 <lchmod@@Base+0x3a4>
   16c20:	add	r2, r2, #2
   16c24:	mov	r4, #56	; 0x38
   16c28:	b	16d74 <lchmod@@Base+0x4b4>
   16c2c:	add	r2, r2, #2
   16c30:	mov	r4, #7
   16c34:	b	16d74 <lchmod@@Base+0x4b4>
   16c38:	orr	r4, r4, #292	; 0x124
   16c3c:	b	16c64 <lchmod@@Base+0x3a4>
   16c40:	orr	r4, r4, #146	; 0x92
   16c44:	b	16c64 <lchmod@@Base+0x3a4>
   16c48:	orr	r4, r4, #73	; 0x49
   16c4c:	b	16c64 <lchmod@@Base+0x3a4>
   16c50:	orr	r4, r4, #3072	; 0xc00
   16c54:	b	16c64 <lchmod@@Base+0x3a4>
   16c58:	orr	r4, r4, #512	; 0x200
   16c5c:	b	16c64 <lchmod@@Base+0x3a4>
   16c60:	mov	r1, #2
   16c64:	mov	r2, r8
   16c68:	add	r8, r8, #1
   16c6c:	ldrb	r3, [r2]
   16c70:	sub	r3, r3, #88	; 0x58
   16c74:	cmp	r3, #32
   16c78:	ldrls	pc, [pc, r3, lsl #2]
   16c7c:	b	16d04 <lchmod@@Base+0x444>
   16c80:	andeq	r6, r1, r0, ror #24
   16c84:	andeq	r6, r1, r4, lsl #26
   16c88:	andeq	r6, r1, r4, lsl #26
   16c8c:	andeq	r6, r1, r4, lsl #26
   16c90:	andeq	r6, r1, r4, lsl #26
   16c94:	andeq	r6, r1, r4, lsl #26
   16c98:	andeq	r6, r1, r4, lsl #26
   16c9c:	andeq	r6, r1, r4, lsl #26
   16ca0:	andeq	r6, r1, r4, lsl #26
   16ca4:	andeq	r6, r1, r4, lsl #26
   16ca8:	andeq	r6, r1, r4, lsl #26
   16cac:	andeq	r6, r1, r4, lsl #26
   16cb0:	andeq	r6, r1, r4, lsl #26
   16cb4:	andeq	r6, r1, r4, lsl #26
   16cb8:	andeq	r6, r1, r4, lsl #26
   16cbc:	andeq	r6, r1, r4, lsl #26
   16cc0:	andeq	r6, r1, r4, lsl #26
   16cc4:	andeq	r6, r1, r4, lsl #26
   16cc8:	andeq	r6, r1, r4, lsl #26
   16ccc:	andeq	r6, r1, r4, lsl #26
   16cd0:	andeq	r6, r1, r4, lsl #26
   16cd4:	andeq	r6, r1, r4, lsl #26
   16cd8:	andeq	r6, r1, r4, lsl #26
   16cdc:	andeq	r6, r1, r4, lsl #26
   16ce0:	andeq	r6, r1, r4, lsl #26
   16ce4:	andeq	r6, r1, r4, lsl #26
   16ce8:	andeq	r6, r1, r8, lsr ip
   16cec:	andeq	r6, r1, r0, asr ip
   16cf0:	andeq	r6, r1, r8, asr ip
   16cf4:	andeq	r6, r1, r4, lsl #26
   16cf8:	andeq	r6, r1, r4, lsl #26
   16cfc:	andeq	r6, r1, r0, asr #24
   16d00:	andeq	r6, r1, r8, asr #24
   16d04:	mov	r8, ip
   16d08:	strb	lr, [ip]
   16d0c:	strb	r1, [ip, #1]
   16d10:	str	r6, [ip, #4]
   16d14:	str	r4, [ip, #8]
   16d18:	cmp	r6, #0
   16d1c:	andne	r4, r4, r6
   16d20:	str	r4, [r8, #12]
   16d24:	ldrb	r3, [r2]
   16d28:	add	lr, r5, #1
   16d2c:	add	ip, ip, #16
   16d30:	and	r1, r3, #239	; 0xef
   16d34:	cmp	r3, #43	; 0x2b
   16d38:	cmpne	r1, #45	; 0x2d
   16d3c:	bne	16d8c <lchmod@@Base+0x4cc>
   16d40:	mov	r5, lr
   16d44:	mov	r1, r2
   16d48:	ldrb	lr, [r1], #1
   16d4c:	ldrb	r3, [r2, #1]
   16d50:	cmp	r3, #103	; 0x67
   16d54:	beq	16c20 <lchmod@@Base+0x360>
   16d58:	bls	16b94 <lchmod@@Base+0x2d4>
   16d5c:	cmp	r3, #111	; 0x6f
   16d60:	beq	16c2c <lchmod@@Base+0x36c>
   16d64:	cmp	r3, #117	; 0x75
   16d68:	addeq	r2, r2, #2
   16d6c:	moveq	r4, #448	; 0x1c0
   16d70:	bne	16c10 <lchmod@@Base+0x350>
   16d74:	mov	r8, ip
   16d78:	strb	lr, [ip]
   16d7c:	strb	r9, [ip, #1]
   16d80:	str	r6, [ip, #4]
   16d84:	str	r4, [ip, #8]
   16d88:	b	16d18 <lchmod@@Base+0x458>
   16d8c:	cmp	r3, #44	; 0x2c
   16d90:	bne	16da0 <lchmod@@Base+0x4e0>
   16d94:	add	r4, r2, #1
   16d98:	mov	ip, r5
   16d9c:	b	16a6c <lchmod@@Base+0x1ac>
   16da0:	cmp	r3, #0
   16da4:	addeq	r5, r0, r5, lsl #4
   16da8:	strbeq	r3, [r5, #1]
   16dac:	beq	16b50 <lchmod@@Base+0x290>
   16db0:	b	16b48 <lchmod@@Base+0x288>
   16db4:	mov	r0, #0
   16db8:	b	16b50 <lchmod@@Base+0x290>
   16dbc:	str	r4, [sp, #-8]!
   16dc0:	str	lr, [sp, #4]
   16dc4:	sub	sp, sp, #104	; 0x68
   16dc8:	mov	r2, sp
   16dcc:	mov	r1, r0
   16dd0:	mov	r0, #3
   16dd4:	bl	117c0 <__xstat64@plt>
   16dd8:	cmp	r0, #0
   16ddc:	movne	r0, #0
   16de0:	bne	16e18 <lchmod@@Base+0x558>
   16de4:	ldr	r4, [sp, #16]
   16de8:	mov	r0, #32
   16dec:	bl	19be4 <lchmod@@Base+0x3324>
   16df0:	mov	r3, #61	; 0x3d
   16df4:	strb	r3, [r0]
   16df8:	mov	r3, #1
   16dfc:	strb	r3, [r0, #1]
   16e00:	movw	r3, #4095	; 0xfff
   16e04:	str	r3, [r0, #4]
   16e08:	str	r4, [r0, #8]
   16e0c:	str	r3, [r0, #12]
   16e10:	mov	r3, #0
   16e14:	strb	r3, [r0, #17]
   16e18:	add	sp, sp, #104	; 0x68
   16e1c:	ldr	r4, [sp]
   16e20:	add	sp, sp, #4
   16e24:	pop	{pc}		; (ldr pc, [sp], #4)
   16e28:	strd	r4, [sp, #-32]!	; 0xffffffe0
   16e2c:	strd	r6, [sp, #8]
   16e30:	strd	r8, [sp, #16]
   16e34:	str	sl, [sp, #24]
   16e38:	str	lr, [sp, #28]
   16e3c:	ldr	r6, [sp, #32]
   16e40:	ubfx	r0, r0, #0, #12
   16e44:	ldrb	r9, [r3, #1]
   16e48:	cmp	r9, #0
   16e4c:	beq	16f5c <lchmod@@Base+0x69c>
   16e50:	cmp	r1, #0
   16e54:	movne	r7, #3072	; 0xc00
   16e58:	moveq	r7, #0
   16e5c:	add	r3, r3, #16
   16e60:	mov	r5, #0
   16e64:	mvn	r2, r2
   16e68:	b	16eb8 <lchmod@@Base+0x5f8>
   16e6c:	and	r9, r0, #73	; 0x49
   16e70:	orrs	r9, r9, r1
   16e74:	orrne	ip, ip, #73	; 0x49
   16e78:	cmp	lr, #0
   16e7c:	movne	r9, lr
   16e80:	moveq	r9, r2
   16e84:	bic	ip, ip, r4
   16e88:	and	ip, ip, r9
   16e8c:	ldrb	r8, [r8, #-16]
   16e90:	cmp	r8, #45	; 0x2d
   16e94:	beq	16f50 <lchmod@@Base+0x690>
   16e98:	cmp	r8, #61	; 0x3d
   16e9c:	beq	16f20 <lchmod@@Base+0x660>
   16ea0:	cmp	r8, #43	; 0x2b
   16ea4:	beq	16f44 <lchmod@@Base+0x684>
   16ea8:	add	r3, r3, #16
   16eac:	ldrb	r9, [r3, #-15]
   16eb0:	cmp	r9, #0
   16eb4:	beq	16f60 <lchmod@@Base+0x6a0>
   16eb8:	mov	r8, r3
   16ebc:	ldr	lr, [r3, #-12]
   16ec0:	ldr	r4, [r3, #-4]
   16ec4:	bic	r4, r7, r4
   16ec8:	ldr	ip, [r3, #-8]
   16ecc:	cmp	r9, #2
   16ed0:	beq	16e6c <lchmod@@Base+0x5ac>
   16ed4:	cmp	r9, #3
   16ed8:	bne	16e78 <lchmod@@Base+0x5b8>
   16edc:	and	ip, ip, r0
   16ee0:	and	r9, ip, #292	; 0x124
   16ee4:	cmp	r9, #0
   16ee8:	movne	r9, #292	; 0x124
   16eec:	moveq	r9, #0
   16ef0:	and	sl, ip, #146	; 0x92
   16ef4:	cmp	sl, #0
   16ef8:	movne	sl, #146	; 0x92
   16efc:	moveq	sl, #0
   16f00:	orr	r9, r9, sl
   16f04:	and	sl, ip, #73	; 0x49
   16f08:	cmp	sl, #0
   16f0c:	movne	sl, #73	; 0x49
   16f10:	moveq	sl, #0
   16f14:	orr	r9, r9, sl
   16f18:	orr	ip, r9, ip
   16f1c:	b	16e78 <lchmod@@Base+0x5b8>
   16f20:	cmp	lr, #0
   16f24:	mvnne	lr, lr
   16f28:	orr	lr, lr, r4
   16f2c:	mvn	r4, lr
   16f30:	ubfx	r4, r4, #0, #12
   16f34:	orr	r5, r5, r4
   16f38:	and	lr, lr, r0
   16f3c:	orr	r0, lr, ip
   16f40:	b	16ea8 <lchmod@@Base+0x5e8>
   16f44:	orr	r5, r5, ip
   16f48:	orr	r0, r0, ip
   16f4c:	b	16ea8 <lchmod@@Base+0x5e8>
   16f50:	orr	r5, r5, ip
   16f54:	bic	r0, r0, ip
   16f58:	b	16ea8 <lchmod@@Base+0x5e8>
   16f5c:	mov	r5, #0
   16f60:	cmp	r6, #0
   16f64:	strne	r5, [r6]
   16f68:	ldrd	r4, [sp]
   16f6c:	ldrd	r6, [sp, #8]
   16f70:	ldrd	r8, [sp, #16]
   16f74:	ldr	sl, [sp, #24]
   16f78:	add	sp, sp, #28
   16f7c:	pop	{pc}		; (ldr pc, [sp], #4)
   16f80:	push	{r2, r3}
   16f84:	push	{lr}		; (str lr, [sp, #-4]!)
   16f88:	sub	sp, sp, #12
   16f8c:	ldr	r2, [sp, #16]
   16f90:	tst	r2, #64	; 0x40
   16f94:	addne	r3, sp, #24
   16f98:	strne	r3, [sp, #4]
   16f9c:	ldrne	r3, [sp, #20]
   16fa0:	moveq	r3, #0
   16fa4:	bl	11670 <openat64@plt>
   16fa8:	bl	195d4 <lchmod@@Base+0x2d14>
   16fac:	add	sp, sp, #12
   16fb0:	pop	{lr}		; (ldr lr, [sp], #4)
   16fb4:	add	sp, sp, #8
   16fb8:	bx	lr
   16fbc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   16fc0:	strd	r6, [sp, #8]
   16fc4:	str	r8, [sp, #16]
   16fc8:	str	lr, [sp, #20]
   16fcc:	mov	r6, r3
   16fd0:	orr	r2, r2, #540672	; 0x84000
   16fd4:	orr	r2, r2, #2304	; 0x900
   16fd8:	bl	16f80 <lchmod@@Base+0x6c0>
   16fdc:	subs	r4, r0, #0
   16fe0:	movlt	r5, #0
   16fe4:	blt	16ffc <lchmod@@Base+0x73c>
   16fe8:	mov	r0, r4
   16fec:	bl	1173c <fdopendir@plt>
   16ff0:	subs	r5, r0, #0
   16ff4:	strne	r4, [r6]
   16ff8:	beq	17014 <lchmod@@Base+0x754>
   16ffc:	mov	r0, r5
   17000:	ldrd	r4, [sp]
   17004:	ldrd	r6, [sp, #8]
   17008:	ldr	r8, [sp, #16]
   1700c:	add	sp, sp, #20
   17010:	pop	{pc}		; (ldr pc, [sp], #4)
   17014:	bl	11688 <__errno_location@plt>
   17018:	mov	r6, r0
   1701c:	ldr	r7, [r0]
   17020:	mov	r0, r4
   17024:	bl	117e4 <close@plt>
   17028:	str	r7, [r6]
   1702c:	b	16ffc <lchmod@@Base+0x73c>
   17030:	strd	r4, [sp, #-16]!
   17034:	str	r6, [sp, #8]
   17038:	str	lr, [sp, #12]
   1703c:	subs	r4, r0, #0
   17040:	beq	170dc <lchmod@@Base+0x81c>
   17044:	mov	r1, #47	; 0x2f
   17048:	mov	r0, r4
   1704c:	bl	11718 <strrchr@plt>
   17050:	subs	r5, r0, #0
   17054:	beq	170b4 <lchmod@@Base+0x7f4>
   17058:	add	r6, r5, #1
   1705c:	sub	r3, r6, r4
   17060:	cmp	r3, #6
   17064:	ble	170b4 <lchmod@@Base+0x7f4>
   17068:	mov	r2, #7
   1706c:	movw	r1, #46128	; 0xb430
   17070:	movt	r1, #1
   17074:	sub	r0, r5, #6
   17078:	bl	117cc <strncmp@plt>
   1707c:	cmp	r0, #0
   17080:	bne	170b4 <lchmod@@Base+0x7f4>
   17084:	mov	r2, #3
   17088:	movw	r1, #46136	; 0xb438
   1708c:	movt	r1, #1
   17090:	mov	r0, r6
   17094:	bl	117cc <strncmp@plt>
   17098:	cmp	r0, #0
   1709c:	movne	r4, r6
   170a0:	bne	170b4 <lchmod@@Base+0x7f4>
   170a4:	add	r4, r5, #4
   170a8:	movw	r3, #49608	; 0xc1c8
   170ac:	movt	r3, #2
   170b0:	str	r4, [r3]
   170b4:	movw	r3, #49648	; 0xc1f0
   170b8:	movt	r3, #2
   170bc:	str	r4, [r3]
   170c0:	movw	r3, #49612	; 0xc1cc
   170c4:	movt	r3, #2
   170c8:	str	r4, [r3]
   170cc:	ldrd	r4, [sp]
   170d0:	ldr	r6, [sp, #8]
   170d4:	add	sp, sp, #12
   170d8:	pop	{pc}		; (ldr pc, [sp], #4)
   170dc:	movw	r3, #49624	; 0xc1d8
   170e0:	movt	r3, #2
   170e4:	ldr	r3, [r3]
   170e8:	mov	r2, #55	; 0x37
   170ec:	mov	r1, #1
   170f0:	movw	r0, #46072	; 0xb3f8
   170f4:	movt	r0, #1
   170f8:	bl	11568 <fwrite@plt>
   170fc:	bl	117d8 <abort@plt>
   17100:	mov	r2, #0
   17104:	mov	r3, #0
   17108:	strd	r2, [r0]
   1710c:	strd	r2, [r0, #8]
   17110:	strd	r2, [r0, #16]
   17114:	strd	r2, [r0, #24]
   17118:	strd	r2, [r0, #32]
   1711c:	strd	r2, [r0, #40]	; 0x28
   17120:	cmp	r1, #10
   17124:	beq	17130 <lchmod@@Base+0x870>
   17128:	str	r1, [r0]
   1712c:	bx	lr
   17130:	str	r4, [sp, #-8]!
   17134:	str	lr, [sp, #4]
   17138:	bl	117d8 <abort@plt>
   1713c:	strd	r4, [sp, #-16]!
   17140:	str	r6, [sp, #8]
   17144:	str	lr, [sp, #12]
   17148:	mov	r5, r0
   1714c:	mov	r6, r1
   17150:	mov	r2, #5
   17154:	mov	r1, r0
   17158:	mov	r0, #0
   1715c:	bl	114f0 <dcgettext@plt>
   17160:	mov	r4, r0
   17164:	cmp	r5, r0
   17168:	beq	17180 <lchmod@@Base+0x8c0>
   1716c:	mov	r0, r4
   17170:	ldrd	r4, [sp]
   17174:	ldr	r6, [sp, #8]
   17178:	add	sp, sp, #12
   1717c:	pop	{pc}		; (ldr pc, [sp], #4)
   17180:	bl	1a97c <lchmod@@Base+0x40bc>
   17184:	ldrb	r3, [r0]
   17188:	bic	r3, r3, #32
   1718c:	cmp	r3, #85	; 0x55
   17190:	bne	17214 <lchmod@@Base+0x954>
   17194:	ldrb	r3, [r0, #1]
   17198:	bic	r3, r3, #32
   1719c:	cmp	r3, #84	; 0x54
   171a0:	bne	171d8 <lchmod@@Base+0x918>
   171a4:	ldrb	r3, [r0, #2]
   171a8:	bic	r3, r3, #32
   171ac:	cmp	r3, #70	; 0x46
   171b0:	bne	171d8 <lchmod@@Base+0x918>
   171b4:	ldrb	r3, [r0, #3]
   171b8:	cmp	r3, #45	; 0x2d
   171bc:	bne	171d8 <lchmod@@Base+0x918>
   171c0:	ldrb	r3, [r0, #4]
   171c4:	cmp	r3, #56	; 0x38
   171c8:	bne	171d8 <lchmod@@Base+0x918>
   171cc:	ldrb	r3, [r0, #5]
   171d0:	cmp	r3, #0
   171d4:	beq	171f4 <lchmod@@Base+0x934>
   171d8:	movw	r4, #46224	; 0xb490
   171dc:	movt	r4, #1
   171e0:	movw	r3, #46244	; 0xb4a4
   171e4:	movt	r3, #1
   171e8:	cmp	r6, #9
   171ec:	movne	r4, r3
   171f0:	b	1716c <lchmod@@Base+0x8ac>
   171f4:	ldrb	r2, [r4]
   171f8:	movw	r4, #46240	; 0xb4a0
   171fc:	movt	r4, #1
   17200:	movw	r3, #46228	; 0xb494
   17204:	movt	r3, #1
   17208:	cmp	r2, #96	; 0x60
   1720c:	movne	r4, r3
   17210:	b	1716c <lchmod@@Base+0x8ac>
   17214:	cmp	r3, #71	; 0x47
   17218:	bne	171d8 <lchmod@@Base+0x918>
   1721c:	ldrb	r3, [r0, #1]
   17220:	bic	r3, r3, #32
   17224:	cmp	r3, #66	; 0x42
   17228:	bne	171d8 <lchmod@@Base+0x918>
   1722c:	ldrb	r3, [r0, #2]
   17230:	cmp	r3, #49	; 0x31
   17234:	bne	171d8 <lchmod@@Base+0x918>
   17238:	ldrb	r3, [r0, #3]
   1723c:	cmp	r3, #56	; 0x38
   17240:	bne	171d8 <lchmod@@Base+0x918>
   17244:	ldrb	r3, [r0, #4]
   17248:	cmp	r3, #48	; 0x30
   1724c:	bne	171d8 <lchmod@@Base+0x918>
   17250:	ldrb	r3, [r0, #5]
   17254:	cmp	r3, #51	; 0x33
   17258:	bne	171d8 <lchmod@@Base+0x918>
   1725c:	ldrb	r3, [r0, #6]
   17260:	cmp	r3, #48	; 0x30
   17264:	bne	171d8 <lchmod@@Base+0x918>
   17268:	ldrb	r3, [r0, #7]
   1726c:	cmp	r3, #0
   17270:	bne	171d8 <lchmod@@Base+0x918>
   17274:	ldrb	r2, [r4]
   17278:	movw	r4, #46236	; 0xb49c
   1727c:	movt	r4, #1
   17280:	movw	r3, #46232	; 0xb498
   17284:	movt	r3, #1
   17288:	cmp	r2, #96	; 0x60
   1728c:	movne	r4, r3
   17290:	b	1716c <lchmod@@Base+0x8ac>
   17294:	strd	r4, [sp, #-36]!	; 0xffffffdc
   17298:	strd	r6, [sp, #8]
   1729c:	strd	r8, [sp, #16]
   172a0:	strd	sl, [sp, #24]
   172a4:	str	lr, [sp, #32]
   172a8:	sub	sp, sp, #116	; 0x74
   172ac:	str	r0, [sp, #64]	; 0x40
   172b0:	mov	r8, r1
   172b4:	str	r2, [sp, #48]	; 0x30
   172b8:	str	r3, [sp, #24]
   172bc:	ldr	r7, [sp, #152]	; 0x98
   172c0:	bl	11580 <__ctype_get_mb_cur_max@plt>
   172c4:	str	r0, [sp, #76]	; 0x4c
   172c8:	ldr	r3, [sp, #156]	; 0x9c
   172cc:	ubfx	r3, r3, #1, #1
   172d0:	str	r3, [sp, #32]
   172d4:	mov	r3, #1
   172d8:	str	r3, [sp, #40]	; 0x28
   172dc:	mov	r3, #0
   172e0:	str	r3, [sp, #68]	; 0x44
   172e4:	str	r3, [sp, #36]	; 0x24
   172e8:	str	r3, [sp, #28]
   172ec:	str	r3, [sp, #52]	; 0x34
   172f0:	str	r3, [sp, #60]	; 0x3c
   172f4:	str	r3, [sp, #72]	; 0x48
   172f8:	movw	r3, #46248	; 0xb4a8
   172fc:	movt	r3, #1
   17300:	str	r3, [sp, #80]	; 0x50
   17304:	mov	r9, r8
   17308:	mov	sl, r7
   1730c:	cmp	sl, #10
   17310:	ldrls	pc, [pc, sl, lsl #2]
   17314:	b	174d8 <lchmod@@Base+0xc18>
   17318:	andeq	r7, r1, r8, ror r3
   1731c:	andeq	r7, r1, ip, asr #6
   17320:			; <UNDEFINED> instruction: 0x000174b0
   17324:	andeq	r7, r1, r4, asr #6
   17328:	andeq	r7, r1, r4, ror #8
   1732c:	andeq	r7, r1, r8, lsl #7
   17330:	andeq	r8, r1, r4, asr r7
   17334:	ldrdeq	r7, [r1], -ip
   17338:	andeq	r7, r1, r4, asr #7
   1733c:	andeq	r7, r1, r4, asr #7
   17340:	andeq	r7, r1, r4, asr #7
   17344:	mov	r3, #1
   17348:	str	r3, [sp, #28]
   1734c:	mov	r3, #1
   17350:	str	r3, [sp, #32]
   17354:	str	r3, [sp, #52]	; 0x34
   17358:	movw	r3, #46244	; 0xb4a4
   1735c:	movt	r3, #1
   17360:	str	r3, [sp, #60]	; 0x3c
   17364:	mov	fp, #0
   17368:	mov	sl, #2
   1736c:	mov	r6, #0
   17370:	ldr	r8, [sp, #64]	; 0x40
   17374:	b	17bec <lchmod@@Base+0x132c>
   17378:	mov	fp, sl
   1737c:	mov	r3, #0
   17380:	str	r3, [sp, #32]
   17384:	b	1736c <lchmod@@Base+0xaac>
   17388:	ldr	r3, [sp, #32]
   1738c:	cmp	r3, #0
   17390:	bne	174f0 <lchmod@@Base+0xc30>
   17394:	cmp	r9, #0
   17398:	beq	17514 <lchmod@@Base+0xc54>
   1739c:	mov	r3, #34	; 0x22
   173a0:	ldr	r2, [sp, #64]	; 0x40
   173a4:	strb	r3, [r2]
   173a8:	mov	fp, #1
   173ac:	str	fp, [sp, #28]
   173b0:	str	fp, [sp, #52]	; 0x34
   173b4:	movw	r3, #46224	; 0xb490
   173b8:	movt	r3, #1
   173bc:	str	r3, [sp, #60]	; 0x3c
   173c0:	b	1736c <lchmod@@Base+0xaac>
   173c4:	cmp	sl, #10
   173c8:	bne	173fc <lchmod@@Base+0xb3c>
   173cc:	ldr	r3, [sp, #32]
   173d0:	cmp	r3, #0
   173d4:	movne	fp, #0
   173d8:	beq	17424 <lchmod@@Base+0xb64>
   173dc:	ldr	r0, [sp, #168]	; 0xa8
   173e0:	bl	11658 <strlen@plt>
   173e4:	str	r0, [sp, #52]	; 0x34
   173e8:	ldr	r3, [sp, #168]	; 0xa8
   173ec:	str	r3, [sp, #60]	; 0x3c
   173f0:	mov	r3, #1
   173f4:	str	r3, [sp, #28]
   173f8:	b	1736c <lchmod@@Base+0xaac>
   173fc:	mov	r1, sl
   17400:	ldr	r0, [sp, #80]	; 0x50
   17404:	bl	1713c <lchmod@@Base+0x87c>
   17408:	str	r0, [sp, #164]	; 0xa4
   1740c:	mov	r1, sl
   17410:	movw	r0, #46244	; 0xb4a4
   17414:	movt	r0, #1
   17418:	bl	1713c <lchmod@@Base+0x87c>
   1741c:	str	r0, [sp, #168]	; 0xa8
   17420:	b	173cc <lchmod@@Base+0xb0c>
   17424:	ldr	r3, [sp, #164]	; 0xa4
   17428:	ldrb	r3, [r3]
   1742c:	cmp	r3, #0
   17430:	beq	1745c <lchmod@@Base+0xb9c>
   17434:	ldr	r2, [sp, #164]	; 0xa4
   17438:	mov	fp, #0
   1743c:	ldr	r1, [sp, #64]	; 0x40
   17440:	cmp	r9, fp
   17444:	strbhi	r3, [r1, fp]
   17448:	add	fp, fp, #1
   1744c:	ldrb	r3, [r2, #1]!
   17450:	cmp	r3, #0
   17454:	bne	17440 <lchmod@@Base+0xb80>
   17458:	b	173dc <lchmod@@Base+0xb1c>
   1745c:	mov	fp, #0
   17460:	b	173dc <lchmod@@Base+0xb1c>
   17464:	ldr	r3, [sp, #32]
   17468:	cmp	r3, #0
   1746c:	bne	1734c <lchmod@@Base+0xa8c>
   17470:	mov	r3, #1
   17474:	str	r3, [sp, #28]
   17478:	cmp	r9, #0
   1747c:	beq	17530 <lchmod@@Base+0xc70>
   17480:	mov	r3, #39	; 0x27
   17484:	ldr	r2, [sp, #64]	; 0x40
   17488:	strb	r3, [r2]
   1748c:	mov	r3, #0
   17490:	str	r3, [sp, #32]
   17494:	mov	fp, #1
   17498:	str	fp, [sp, #52]	; 0x34
   1749c:	movw	r3, #46244	; 0xb4a4
   174a0:	movt	r3, #1
   174a4:	str	r3, [sp, #60]	; 0x3c
   174a8:	mov	sl, #2
   174ac:	b	1736c <lchmod@@Base+0xaac>
   174b0:	ldr	r3, [sp, #32]
   174b4:	cmp	r3, #0
   174b8:	beq	17478 <lchmod@@Base+0xbb8>
   174bc:	mov	r3, #1
   174c0:	str	r3, [sp, #52]	; 0x34
   174c4:	movw	r3, #46244	; 0xb4a4
   174c8:	movt	r3, #1
   174cc:	str	r3, [sp, #60]	; 0x3c
   174d0:	mov	fp, #0
   174d4:	b	1736c <lchmod@@Base+0xaac>
   174d8:	bl	117d8 <abort@plt>
   174dc:	mov	fp, #0
   174e0:	str	fp, [sp, #32]
   174e4:	mov	r3, #1
   174e8:	str	r3, [sp, #28]
   174ec:	b	1736c <lchmod@@Base+0xaac>
   174f0:	ldr	r3, [sp, #32]
   174f4:	str	r3, [sp, #28]
   174f8:	mov	r3, #1
   174fc:	str	r3, [sp, #52]	; 0x34
   17500:	movw	r3, #46224	; 0xb490
   17504:	movt	r3, #1
   17508:	str	r3, [sp, #60]	; 0x3c
   1750c:	mov	fp, #0
   17510:	b	1736c <lchmod@@Base+0xaac>
   17514:	mov	fp, #1
   17518:	str	fp, [sp, #28]
   1751c:	str	fp, [sp, #52]	; 0x34
   17520:	movw	r3, #46224	; 0xb490
   17524:	movt	r3, #1
   17528:	str	r3, [sp, #60]	; 0x3c
   1752c:	b	1736c <lchmod@@Base+0xaac>
   17530:	mov	r3, #0
   17534:	str	r3, [sp, #32]
   17538:	mov	fp, #1
   1753c:	str	fp, [sp, #52]	; 0x34
   17540:	movw	r3, #46244	; 0xb4a4
   17544:	movt	r3, #1
   17548:	str	r3, [sp, #60]	; 0x3c
   1754c:	mov	sl, #2
   17550:	b	1736c <lchmod@@Base+0xaac>
   17554:	mov	r3, r2
   17558:	add	r4, r6, r2
   1755c:	ldr	r2, [sp, #24]
   17560:	cmp	r3, #1
   17564:	movls	r3, #0
   17568:	movhi	r3, #1
   1756c:	cmn	r2, #1
   17570:	movne	r3, #0
   17574:	cmp	r3, #0
   17578:	beq	17588 <lchmod@@Base+0xcc8>
   1757c:	ldr	r0, [sp, #48]	; 0x30
   17580:	bl	11658 <strlen@plt>
   17584:	str	r0, [sp, #24]
   17588:	ldr	r3, [sp, #24]
   1758c:	cmp	r4, r3
   17590:	bhi	1877c <lchmod@@Base+0x1ebc>
   17594:	ldr	r3, [sp, #48]	; 0x30
   17598:	add	r4, r3, r6
   1759c:	ldr	r2, [sp, #52]	; 0x34
   175a0:	ldr	r1, [sp, #60]	; 0x3c
   175a4:	mov	r0, r4
   175a8:	bl	114d8 <memcmp@plt>
   175ac:	cmp	r0, #0
   175b0:	bne	1877c <lchmod@@Base+0x1ebc>
   175b4:	ldr	r3, [sp, #32]
   175b8:	cmp	r3, #0
   175bc:	bne	177cc <lchmod@@Base+0xf0c>
   175c0:	ldrb	r4, [r4]
   175c4:	cmp	r4, #126	; 0x7e
   175c8:	ldrls	pc, [pc, r4, lsl #2]
   175cc:	b	18080 <lchmod@@Base+0x17c0>
   175d0:	andeq	r7, r1, r0, lsl r8
   175d4:	andeq	r8, r1, r0, lsl #1
   175d8:	andeq	r8, r1, r0, lsl #1
   175dc:	andeq	r8, r1, r0, lsl #1
   175e0:	andeq	r8, r1, r0, lsl #1
   175e4:	andeq	r8, r1, r0, lsl #1
   175e8:	andeq	r8, r1, r0, lsl #1
   175ec:	andeq	r7, r1, r8, lsr #30
   175f0:	andeq	r7, r1, ip, lsr #21
   175f4:	andeq	r7, r1, r0, asr lr
   175f8:	strdeq	r7, [r1], -ip
   175fc:	andeq	r7, r1, r4, ror #28
   17600:	andeq	r7, r1, r0, asr #21
   17604:	ldrdeq	r7, [r1], -r4
   17608:	andeq	r8, r1, r0, lsl #1
   1760c:	andeq	r8, r1, r0, lsl #1
   17610:	andeq	r8, r1, r0, lsl #1
   17614:	andeq	r8, r1, r0, lsl #1
   17618:	andeq	r8, r1, r0, lsl #1
   1761c:	andeq	r8, r1, r0, lsl #1
   17620:	andeq	r8, r1, r0, lsl #1
   17624:	andeq	r8, r1, r0, lsl #1
   17628:	andeq	r8, r1, r0, lsl #1
   1762c:	andeq	r8, r1, r0, lsl #1
   17630:	andeq	r8, r1, r0, lsl #1
   17634:	andeq	r8, r1, r0, lsl #1
   17638:	andeq	r8, r1, r0, lsl #1
   1763c:	andeq	r8, r1, r0, lsl #1
   17640:	andeq	r8, r1, r0, lsl #1
   17644:	andeq	r8, r1, r0, lsl #1
   17648:	andeq	r8, r1, r0, lsl #1
   1764c:	andeq	r8, r1, r0, lsl #1
   17650:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   17654:	andeq	r7, r1, r0, asr #31
   17658:	andeq	r7, r1, r0, asr #31
   1765c:	andeq	r7, r1, r8, asr pc
   17660:	andeq	r7, r1, r0, asr #31
   17664:	andeq	r8, r1, r0, ror #9
   17668:	andeq	r7, r1, r0, asr #31
   1766c:	andeq	r7, r1, r0, ror #31
   17670:	andeq	r7, r1, r0, asr #31
   17674:	andeq	r7, r1, r0, asr #31
   17678:	andeq	r7, r1, r0, asr #31
   1767c:	andeq	r8, r1, r0, ror #9
   17680:	andeq	r8, r1, r0, ror #9
   17684:	andeq	r8, r1, r0, ror #9
   17688:	andeq	r8, r1, r0, ror #9
   1768c:	andeq	r8, r1, r0, ror #9
   17690:	andeq	r8, r1, r0, ror #9
   17694:	andeq	r8, r1, r0, ror #9
   17698:	andeq	r8, r1, r0, ror #9
   1769c:	andeq	r8, r1, r0, ror #9
   176a0:	andeq	r8, r1, r0, ror #9
   176a4:	andeq	r8, r1, r0, ror #9
   176a8:	andeq	r8, r1, r0, ror #9
   176ac:	andeq	r8, r1, r0, ror #9
   176b0:	andeq	r8, r1, r0, ror #9
   176b4:	andeq	r8, r1, r0, ror #9
   176b8:	andeq	r8, r1, r0, ror #9
   176bc:	andeq	r7, r1, r0, asr #31
   176c0:	andeq	r7, r1, r0, asr #31
   176c4:	andeq	r7, r1, r0, asr #31
   176c8:	andeq	r7, r1, r0, asr #31
   176cc:	andeq	r7, r1, r0, asr #18
   176d0:	andeq	r8, r1, r0, lsl #1
   176d4:	andeq	r8, r1, r0, ror #9
   176d8:	andeq	r8, r1, r0, ror #9
   176dc:	andeq	r8, r1, r0, ror #9
   176e0:	andeq	r8, r1, r0, ror #9
   176e4:	andeq	r8, r1, r0, ror #9
   176e8:	andeq	r8, r1, r0, ror #9
   176ec:	andeq	r8, r1, r0, ror #9
   176f0:	andeq	r8, r1, r0, ror #9
   176f4:	andeq	r8, r1, r0, ror #9
   176f8:	andeq	r8, r1, r0, ror #9
   176fc:	andeq	r8, r1, r0, ror #9
   17700:	andeq	r8, r1, r0, ror #9
   17704:	andeq	r8, r1, r0, ror #9
   17708:	andeq	r8, r1, r0, ror #9
   1770c:	andeq	r8, r1, r0, ror #9
   17710:	andeq	r8, r1, r0, ror #9
   17714:	andeq	r8, r1, r0, ror #9
   17718:	andeq	r8, r1, r0, ror #9
   1771c:	andeq	r8, r1, r0, ror #9
   17720:	andeq	r8, r1, r0, ror #9
   17724:	andeq	r8, r1, r0, ror #9
   17728:	andeq	r8, r1, r0, ror #9
   1772c:	andeq	r8, r1, r0, ror #9
   17730:	andeq	r8, r1, r0, ror #9
   17734:	andeq	r8, r1, r0, ror #9
   17738:	andeq	r8, r1, r0, ror #9
   1773c:	andeq	r7, r1, r0, asr #31
   17740:	andeq	r7, r1, r8, ror lr
   17744:	andeq	r8, r1, r0, ror #9
   17748:	andeq	r7, r1, r0, asr #31
   1774c:	andeq	r8, r1, r0, ror #9
   17750:	andeq	r7, r1, r0, asr #31
   17754:	andeq	r8, r1, r0, ror #9
   17758:	andeq	r8, r1, r0, ror #9
   1775c:	andeq	r8, r1, r0, ror #9
   17760:	andeq	r8, r1, r0, ror #9
   17764:	andeq	r8, r1, r0, ror #9
   17768:	andeq	r8, r1, r0, ror #9
   1776c:	andeq	r8, r1, r0, ror #9
   17770:	andeq	r8, r1, r0, ror #9
   17774:	andeq	r8, r1, r0, ror #9
   17778:	andeq	r8, r1, r0, ror #9
   1777c:	andeq	r8, r1, r0, ror #9
   17780:	andeq	r8, r1, r0, ror #9
   17784:	andeq	r8, r1, r0, ror #9
   17788:	andeq	r8, r1, r0, ror #9
   1778c:	andeq	r8, r1, r0, ror #9
   17790:	andeq	r8, r1, r0, ror #9
   17794:	andeq	r8, r1, r0, ror #9
   17798:	andeq	r8, r1, r0, ror #9
   1779c:	andeq	r8, r1, r0, ror #9
   177a0:	andeq	r8, r1, r0, ror #9
   177a4:	andeq	r8, r1, r0, ror #9
   177a8:	andeq	r8, r1, r0, ror #9
   177ac:	andeq	r8, r1, r0, ror #9
   177b0:	andeq	r8, r1, r0, ror #9
   177b4:	andeq	r8, r1, r0, ror #9
   177b8:	andeq	r8, r1, r0, ror #9
   177bc:	andeq	r7, r1, r8, lsr pc
   177c0:	andeq	r7, r1, r0, asr #31
   177c4:	andeq	r7, r1, r8, lsr pc
   177c8:	andeq	r7, r1, r8, asr pc
   177cc:	mov	r8, r9
   177d0:	mov	r7, sl
   177d4:	b	186d4 <lchmod@@Base+0x1e14>
   177d8:	ldr	r3, [sp, #28]
   177dc:	cmp	r3, #0
   177e0:	bne	17800 <lchmod@@Base+0xf40>
   177e4:	ldr	r3, [sp, #156]	; 0x9c
   177e8:	tst	r3, #1
   177ec:	bne	17be8 <lchmod@@Base+0x1328>
   177f0:	ldr	r3, [sp, #28]
   177f4:	str	r3, [sp, #44]	; 0x2c
   177f8:	mov	r5, r3
   177fc:	b	17b08 <lchmod@@Base+0x1248>
   17800:	ldr	r3, [sp, #32]
   17804:	cmp	r3, #0
   17808:	bne	18684 <lchmod@@Base+0x1dc4>
   1780c:	str	r3, [sp, #44]	; 0x2c
   17810:	ldr	r3, [sp, #36]	; 0x24
   17814:	eor	r3, r3, #1
   17818:	cmp	sl, #2
   1781c:	movne	r3, #0
   17820:	andeq	r3, r3, #1
   17824:	cmp	r3, #0
   17828:	beq	17880 <lchmod@@Base+0xfc0>
   1782c:	cmp	r9, fp
   17830:	movhi	r2, #39	; 0x27
   17834:	strbhi	r2, [r8, fp]
   17838:	add	r2, fp, #1
   1783c:	cmp	r9, r2
   17840:	movhi	r1, #36	; 0x24
   17844:	strbhi	r1, [r8, r2]
   17848:	add	r2, fp, #2
   1784c:	cmp	r9, r2
   17850:	movhi	r1, #39	; 0x27
   17854:	strbhi	r1, [r8, r2]
   17858:	add	r2, fp, #3
   1785c:	cmp	r9, r2
   17860:	bls	18740 <lchmod@@Base+0x1e80>
   17864:	mov	r1, #92	; 0x5c
   17868:	strb	r1, [r8, r2]
   1786c:	add	fp, fp, #4
   17870:	str	r3, [sp, #36]	; 0x24
   17874:	mov	r5, #0
   17878:	mov	r4, #48	; 0x30
   1787c:	b	17b54 <lchmod@@Base+0x1294>
   17880:	cmp	r9, fp
   17884:	bhi	178ac <lchmod@@Base+0xfec>
   17888:	add	r1, fp, #1
   1788c:	ldr	r2, [sp, #56]	; 0x38
   17890:	cmp	r2, #0
   17894:	bne	178d4 <lchmod@@Base+0x1014>
   17898:	mov	r3, r5
   1789c:	ldr	r5, [sp, #56]	; 0x38
   178a0:	mov	fp, r1
   178a4:	mov	r4, #48	; 0x30
   178a8:	b	17b08 <lchmod@@Base+0x1248>
   178ac:	mov	r2, #92	; 0x5c
   178b0:	strb	r2, [r8, fp]
   178b4:	add	r1, fp, #1
   178b8:	ldr	r2, [sp, #56]	; 0x38
   178bc:	cmp	r2, #0
   178c0:	moveq	r3, r5
   178c4:	moveq	r5, r2
   178c8:	moveq	fp, r1
   178cc:	moveq	r4, #48	; 0x30
   178d0:	beq	17b54 <lchmod@@Base+0x1294>
   178d4:	add	r2, r6, #1
   178d8:	ldr	r0, [sp, #24]
   178dc:	cmp	r2, r0
   178e0:	bcs	178fc <lchmod@@Base+0x103c>
   178e4:	ldr	r0, [sp, #48]	; 0x30
   178e8:	ldrb	r2, [r0, r2]
   178ec:	sub	r2, r2, #48	; 0x30
   178f0:	uxtb	r2, r2
   178f4:	cmp	r2, #9
   178f8:	bls	17914 <lchmod@@Base+0x1054>
   178fc:	mov	r2, r3
   17900:	mov	r3, r5
   17904:	mov	r5, r2
   17908:	mov	fp, r1
   1790c:	mov	r4, #48	; 0x30
   17910:	b	17b2c <lchmod@@Base+0x126c>
   17914:	cmp	r9, r1
   17918:	movhi	r2, #48	; 0x30
   1791c:	strbhi	r2, [r8, r1]
   17920:	add	r2, fp, #2
   17924:	cmp	r9, r2
   17928:	movhi	r1, #48	; 0x30
   1792c:	strbhi	r1, [r8, r2]
   17930:	add	r1, fp, #3
   17934:	b	178fc <lchmod@@Base+0x103c>
   17938:	mov	r3, #0
   1793c:	str	r3, [sp, #44]	; 0x2c
   17940:	cmp	sl, #2
   17944:	beq	17960 <lchmod@@Base+0x10a0>
   17948:	cmp	sl, #5
   1794c:	beq	17978 <lchmod@@Base+0x10b8>
   17950:	mov	r5, #0
   17954:	mov	r3, r5
   17958:	mov	r4, #63	; 0x3f
   1795c:	b	17b08 <lchmod@@Base+0x1248>
   17960:	ldr	r3, [sp, #32]
   17964:	cmp	r3, #0
   17968:	bne	18690 <lchmod@@Base+0x1dd0>
   1796c:	mov	r5, r3
   17970:	mov	r4, #63	; 0x3f
   17974:	b	18070 <lchmod@@Base+0x17b0>
   17978:	ldr	r3, [sp, #156]	; 0x9c
   1797c:	tst	r3, #4
   17980:	beq	184a8 <lchmod@@Base+0x1be8>
   17984:	add	r2, r6, #2
   17988:	ldr	r3, [sp, #24]
   1798c:	cmp	r2, r3
   17990:	bcs	184b8 <lchmod@@Base+0x1bf8>
   17994:	ldr	r3, [sp, #48]	; 0x30
   17998:	add	r3, r3, r6
   1799c:	ldrb	r4, [r3, #1]
   179a0:	cmp	r4, #63	; 0x3f
   179a4:	movne	r5, #0
   179a8:	movne	r3, r5
   179ac:	movne	r4, #63	; 0x3f
   179b0:	bne	17b08 <lchmod@@Base+0x1248>
   179b4:	ldr	r3, [sp, #48]	; 0x30
   179b8:	ldrb	r1, [r3, r2]
   179bc:	sub	r3, r1, #33	; 0x21
   179c0:	cmp	r3, #29
   179c4:	ldrls	pc, [pc, r3, lsl #2]
   179c8:	b	184c8 <lchmod@@Base+0x1c08>
   179cc:	andeq	r7, r1, r4, asr #20
   179d0:	andeq	r8, r1, r8, asr #9
   179d4:	andeq	r8, r1, r8, asr #9
   179d8:	andeq	r8, r1, r8, asr #9
   179dc:	andeq	r8, r1, r8, asr #9
   179e0:	andeq	r8, r1, r8, asr #9
   179e4:	andeq	r7, r1, r4, asr #20
   179e8:	andeq	r7, r1, r4, asr #20
   179ec:	andeq	r7, r1, r4, asr #20
   179f0:	andeq	r8, r1, r8, asr #9
   179f4:	andeq	r8, r1, r8, asr #9
   179f8:	andeq	r8, r1, r8, asr #9
   179fc:	andeq	r7, r1, r4, asr #20
   17a00:	andeq	r8, r1, r8, asr #9
   17a04:	andeq	r7, r1, r4, asr #20
   17a08:	andeq	r8, r1, r8, asr #9
   17a0c:	andeq	r8, r1, r8, asr #9
   17a10:	andeq	r8, r1, r8, asr #9
   17a14:	andeq	r8, r1, r8, asr #9
   17a18:	andeq	r8, r1, r8, asr #9
   17a1c:	andeq	r8, r1, r8, asr #9
   17a20:	andeq	r8, r1, r8, asr #9
   17a24:	andeq	r8, r1, r8, asr #9
   17a28:	andeq	r8, r1, r8, asr #9
   17a2c:	andeq	r8, r1, r8, asr #9
   17a30:	andeq	r8, r1, r8, asr #9
   17a34:	andeq	r8, r1, r8, asr #9
   17a38:	andeq	r7, r1, r4, asr #20
   17a3c:	andeq	r7, r1, r4, asr #20
   17a40:	andeq	r7, r1, r4, asr #20
   17a44:	ldr	r3, [sp, #32]
   17a48:	cmp	r3, #0
   17a4c:	bne	18734 <lchmod@@Base+0x1e74>
   17a50:	cmp	r9, fp
   17a54:	movhi	r3, #63	; 0x3f
   17a58:	strbhi	r3, [r8, fp]
   17a5c:	add	r3, fp, #1
   17a60:	cmp	r9, r3
   17a64:	movhi	r0, #34	; 0x22
   17a68:	strbhi	r0, [r8, r3]
   17a6c:	add	r3, fp, #2
   17a70:	cmp	r9, r3
   17a74:	movhi	r0, #34	; 0x22
   17a78:	strbhi	r0, [r8, r3]
   17a7c:	add	r3, fp, #3
   17a80:	cmp	r9, r3
   17a84:	movhi	r0, #63	; 0x3f
   17a88:	strbhi	r0, [r8, r3]
   17a8c:	add	fp, fp, #4
   17a90:	ldr	r3, [sp, #32]
   17a94:	mov	r5, r3
   17a98:	mov	r4, r1
   17a9c:	mov	r6, r2
   17aa0:	b	17b08 <lchmod@@Base+0x1248>
   17aa4:	mov	r3, #0
   17aa8:	str	r3, [sp, #44]	; 0x2c
   17aac:	mov	r4, #8
   17ab0:	mov	r3, #98	; 0x62
   17ab4:	b	17af4 <lchmod@@Base+0x1234>
   17ab8:	mov	r3, #0
   17abc:	str	r3, [sp, #44]	; 0x2c
   17ac0:	mov	r4, #12
   17ac4:	mov	r3, #102	; 0x66
   17ac8:	b	17af4 <lchmod@@Base+0x1234>
   17acc:	mov	r3, #0
   17ad0:	str	r3, [sp, #44]	; 0x2c
   17ad4:	mov	r4, #13
   17ad8:	mov	r3, #114	; 0x72
   17adc:	ldr	r2, [sp, #32]
   17ae0:	cmp	sl, #2
   17ae4:	movne	r2, #0
   17ae8:	andeq	r2, r2, #1
   17aec:	cmp	r2, #0
   17af0:	bne	17f14 <lchmod@@Base+0x1654>
   17af4:	ldr	r2, [sp, #28]
   17af8:	cmp	r2, #0
   17afc:	bne	184fc <lchmod@@Base+0x1c3c>
   17b00:	mov	r5, r2
   17b04:	mov	r3, r2
   17b08:	ldr	r2, [sp, #28]
   17b0c:	eor	r2, r2, #1
   17b10:	cmp	sl, #2
   17b14:	orreq	r2, r2, #1
   17b18:	eor	r2, r2, #1
   17b1c:	ldr	r1, [sp, #32]
   17b20:	orr	r2, r1, r2
   17b24:	tst	r2, #255	; 0xff
   17b28:	beq	17b54 <lchmod@@Base+0x1294>
   17b2c:	ldr	r2, [sp, #160]	; 0xa0
   17b30:	cmp	r2, #0
   17b34:	beq	17b54 <lchmod@@Base+0x1294>
   17b38:	ubfx	r1, r4, #5, #8
   17b3c:	and	r2, r4, #31
   17b40:	ldr	r0, [sp, #160]	; 0xa0
   17b44:	ldr	r1, [r0, r1, lsl #2]
   17b48:	lsr	r2, r1, r2
   17b4c:	tst	r2, #1
   17b50:	bne	17b60 <lchmod@@Base+0x12a0>
   17b54:	ldr	r2, [sp, #44]	; 0x2c
   17b58:	cmp	r2, #0
   17b5c:	beq	17eb4 <lchmod@@Base+0x15f4>
   17b60:	ldr	r3, [sp, #32]
   17b64:	cmp	r3, #0
   17b68:	bne	186b4 <lchmod@@Base+0x1df4>
   17b6c:	ldr	r3, [sp, #36]	; 0x24
   17b70:	eor	r3, r3, #1
   17b74:	cmp	sl, #2
   17b78:	movne	r3, #0
   17b7c:	andeq	r3, r3, #1
   17b80:	cmp	r3, #0
   17b84:	beq	17bbc <lchmod@@Base+0x12fc>
   17b88:	cmp	r9, fp
   17b8c:	movhi	r2, #39	; 0x27
   17b90:	strbhi	r2, [r8, fp]
   17b94:	add	r2, fp, #1
   17b98:	cmp	r9, r2
   17b9c:	movhi	r1, #36	; 0x24
   17ba0:	strbhi	r1, [r8, r2]
   17ba4:	add	r2, fp, #2
   17ba8:	cmp	r9, r2
   17bac:	movhi	r1, #39	; 0x27
   17bb0:	strbhi	r1, [r8, r2]
   17bb4:	add	fp, fp, #3
   17bb8:	str	r3, [sp, #36]	; 0x24
   17bbc:	cmp	r9, fp
   17bc0:	movhi	r3, #92	; 0x5c
   17bc4:	strbhi	r3, [r8, fp]
   17bc8:	add	fp, fp, #1
   17bcc:	cmp	fp, r9
   17bd0:	strbcc	r4, [r8, fp]
   17bd4:	add	fp, fp, #1
   17bd8:	cmp	r5, #0
   17bdc:	ldr	r3, [sp, #40]	; 0x28
   17be0:	moveq	r3, r5
   17be4:	str	r3, [sp, #40]	; 0x28
   17be8:	add	r6, r6, #1
   17bec:	ldr	r3, [sp, #24]
   17bf0:	cmn	r3, #1
   17bf4:	beq	18524 <lchmod@@Base+0x1c64>
   17bf8:	ldr	r3, [sp, #24]
   17bfc:	subs	r5, r3, r6
   17c00:	movne	r5, #1
   17c04:	cmp	r5, #0
   17c08:	beq	18538 <lchmod@@Base+0x1c78>
   17c0c:	ldr	r3, [sp, #28]
   17c10:	cmp	sl, #2
   17c14:	moveq	r3, #0
   17c18:	andne	r3, r3, #1
   17c1c:	str	r3, [sp, #56]	; 0x38
   17c20:	ldr	r2, [sp, #52]	; 0x34
   17c24:	adds	r7, r2, #0
   17c28:	movne	r7, #1
   17c2c:	ands	r3, r3, r7
   17c30:	str	r3, [sp, #44]	; 0x2c
   17c34:	bne	17554 <lchmod@@Base+0xc94>
   17c38:	ldr	r3, [sp, #48]	; 0x30
   17c3c:	ldrb	r4, [r3, r6]
   17c40:	cmp	r4, #126	; 0x7e
   17c44:	ldrls	pc, [pc, r4, lsl #2]
   17c48:	b	18080 <lchmod@@Base+0x17c0>
   17c4c:	ldrdeq	r7, [r1], -r8
   17c50:	andeq	r8, r1, r0, lsl #1
   17c54:	andeq	r8, r1, r0, lsl #1
   17c58:	andeq	r8, r1, r0, lsl #1
   17c5c:	andeq	r8, r1, r0, lsl #1
   17c60:	andeq	r8, r1, r0, lsl #1
   17c64:	andeq	r8, r1, r0, lsl #1
   17c68:	andeq	r7, r1, r0, lsr #30
   17c6c:	andeq	r7, r1, ip, lsr #21
   17c70:	andeq	r7, r1, r0, asr lr
   17c74:	strdeq	r7, [r1], -r4
   17c78:	andeq	r7, r1, r4, ror #28
   17c7c:	andeq	r7, r1, r0, asr #21
   17c80:	ldrdeq	r7, [r1], -r4
   17c84:	andeq	r8, r1, r0, lsl #1
   17c88:	andeq	r8, r1, r0, lsl #1
   17c8c:	andeq	r8, r1, r0, lsl #1
   17c90:	andeq	r8, r1, r0, lsl #1
   17c94:	andeq	r8, r1, r0, lsl #1
   17c98:	andeq	r8, r1, r0, lsl #1
   17c9c:	andeq	r8, r1, r0, lsl #1
   17ca0:	andeq	r8, r1, r0, lsl #1
   17ca4:	andeq	r8, r1, r0, lsl #1
   17ca8:	andeq	r8, r1, r0, lsl #1
   17cac:	andeq	r8, r1, r0, lsl #1
   17cb0:	andeq	r8, r1, r0, lsl #1
   17cb4:	andeq	r8, r1, r0, lsl #1
   17cb8:	andeq	r8, r1, r0, lsl #1
   17cbc:	andeq	r8, r1, r0, lsl #1
   17cc0:	andeq	r8, r1, r0, lsl #1
   17cc4:	andeq	r8, r1, r0, lsl #1
   17cc8:	andeq	r8, r1, r0, lsl #1
   17ccc:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   17cd0:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17cd4:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17cd8:	andeq	r7, r1, r8, asr pc
   17cdc:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17ce0:	andeq	r8, r1, r0, lsr #9
   17ce4:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17ce8:	andeq	r7, r1, r0, ror #31
   17cec:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17cf0:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17cf4:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17cf8:	andeq	r8, r1, r0, lsr #9
   17cfc:	andeq	r8, r1, r0, lsr #9
   17d00:	andeq	r8, r1, r0, lsr #9
   17d04:	andeq	r8, r1, r0, lsr #9
   17d08:	andeq	r8, r1, r0, lsr #9
   17d0c:	andeq	r8, r1, r0, lsr #9
   17d10:	andeq	r8, r1, r0, lsr #9
   17d14:	andeq	r8, r1, r0, lsr #9
   17d18:	andeq	r8, r1, r0, lsr #9
   17d1c:	andeq	r8, r1, r0, lsr #9
   17d20:	andeq	r8, r1, r0, lsr #9
   17d24:	andeq	r8, r1, r0, lsr #9
   17d28:	andeq	r8, r1, r0, lsr #9
   17d2c:	andeq	r8, r1, r0, lsr #9
   17d30:	andeq	r8, r1, r0, lsr #9
   17d34:	andeq	r8, r1, r0, lsr #9
   17d38:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17d3c:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17d40:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17d44:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17d48:	andeq	r7, r1, r0, asr #18
   17d4c:	andeq	r8, r1, r0, lsl #1
   17d50:	andeq	r8, r1, r0, lsr #9
   17d54:	andeq	r8, r1, r0, lsr #9
   17d58:	andeq	r8, r1, r0, lsr #9
   17d5c:	andeq	r8, r1, r0, lsr #9
   17d60:	andeq	r8, r1, r0, lsr #9
   17d64:	andeq	r8, r1, r0, lsr #9
   17d68:	andeq	r8, r1, r0, lsr #9
   17d6c:	andeq	r8, r1, r0, lsr #9
   17d70:	andeq	r8, r1, r0, lsr #9
   17d74:	andeq	r8, r1, r0, lsr #9
   17d78:	andeq	r8, r1, r0, lsr #9
   17d7c:	andeq	r8, r1, r0, lsr #9
   17d80:	andeq	r8, r1, r0, lsr #9
   17d84:	andeq	r8, r1, r0, lsr #9
   17d88:	andeq	r8, r1, r0, lsr #9
   17d8c:	andeq	r8, r1, r0, lsr #9
   17d90:	andeq	r8, r1, r0, lsr #9
   17d94:	andeq	r8, r1, r0, lsr #9
   17d98:	andeq	r8, r1, r0, lsr #9
   17d9c:	andeq	r8, r1, r0, lsr #9
   17da0:	andeq	r8, r1, r0, lsr #9
   17da4:	andeq	r8, r1, r0, lsr #9
   17da8:	andeq	r8, r1, r0, lsr #9
   17dac:	andeq	r8, r1, r0, lsr #9
   17db0:	andeq	r8, r1, r0, lsr #9
   17db4:	andeq	r8, r1, r0, lsr #9
   17db8:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17dbc:	andeq	r7, r1, r8, ror lr
   17dc0:	andeq	r8, r1, r0, lsr #9
   17dc4:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17dc8:	andeq	r8, r1, r0, lsr #9
   17dcc:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17dd0:	andeq	r8, r1, r0, lsr #9
   17dd4:	andeq	r8, r1, r0, lsr #9
   17dd8:	andeq	r8, r1, r0, lsr #9
   17ddc:	andeq	r8, r1, r0, lsr #9
   17de0:	andeq	r8, r1, r0, lsr #9
   17de4:	andeq	r8, r1, r0, lsr #9
   17de8:	andeq	r8, r1, r0, lsr #9
   17dec:	andeq	r8, r1, r0, lsr #9
   17df0:	andeq	r8, r1, r0, lsr #9
   17df4:	andeq	r8, r1, r0, lsr #9
   17df8:	andeq	r8, r1, r0, lsr #9
   17dfc:	andeq	r8, r1, r0, lsr #9
   17e00:	andeq	r8, r1, r0, lsr #9
   17e04:	andeq	r8, r1, r0, lsr #9
   17e08:	andeq	r8, r1, r0, lsr #9
   17e0c:	andeq	r8, r1, r0, lsr #9
   17e10:	andeq	r8, r1, r0, lsr #9
   17e14:	andeq	r8, r1, r0, lsr #9
   17e18:	andeq	r8, r1, r0, lsr #9
   17e1c:	andeq	r8, r1, r0, lsr #9
   17e20:	andeq	r8, r1, r0, lsr #9
   17e24:	andeq	r8, r1, r0, lsr #9
   17e28:	andeq	r8, r1, r0, lsr #9
   17e2c:	andeq	r8, r1, r0, lsr #9
   17e30:	andeq	r8, r1, r0, lsr #9
   17e34:	andeq	r8, r1, r0, lsr #9
   17e38:	andeq	r7, r1, r8, lsr pc
   17e3c:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   17e40:	andeq	r7, r1, r8, lsr pc
   17e44:	andeq	r7, r1, r8, asr pc
   17e48:	mov	r3, #0
   17e4c:	str	r3, [sp, #44]	; 0x2c
   17e50:	mov	r4, #9
   17e54:	mov	r3, #116	; 0x74
   17e58:	b	17adc <lchmod@@Base+0x121c>
   17e5c:	mov	r3, #0
   17e60:	str	r3, [sp, #44]	; 0x2c
   17e64:	mov	r4, #11
   17e68:	mov	r3, #118	; 0x76
   17e6c:	b	17af4 <lchmod@@Base+0x1234>
   17e70:	mov	r3, #0
   17e74:	str	r3, [sp, #44]	; 0x2c
   17e78:	cmp	sl, #2
   17e7c:	beq	17ea0 <lchmod@@Base+0x15e0>
   17e80:	ldr	r3, [sp, #28]
   17e84:	ldr	r2, [sp, #32]
   17e88:	and	r3, r3, r2
   17e8c:	tst	r7, r3
   17e90:	bne	18514 <lchmod@@Base+0x1c54>
   17e94:	mov	r4, #92	; 0x5c
   17e98:	mov	r3, r4
   17e9c:	b	17af4 <lchmod@@Base+0x1234>
   17ea0:	ldr	r3, [sp, #32]
   17ea4:	cmp	r3, #0
   17ea8:	bne	1869c <lchmod@@Base+0x1ddc>
   17eac:	mov	r5, r3
   17eb0:	mov	r4, #92	; 0x5c
   17eb4:	eor	r3, r3, #1
   17eb8:	ldr	r2, [sp, #36]	; 0x24
   17ebc:	and	r3, r3, r2
   17ec0:	tst	r3, #255	; 0xff
   17ec4:	beq	17bcc <lchmod@@Base+0x130c>
   17ec8:	cmp	r9, fp
   17ecc:	movhi	r3, #39	; 0x27
   17ed0:	strbhi	r3, [r8, fp]
   17ed4:	add	r3, fp, #1
   17ed8:	cmp	r9, r3
   17edc:	movhi	r2, #39	; 0x27
   17ee0:	strbhi	r2, [r8, r3]
   17ee4:	add	fp, fp, #2
   17ee8:	mov	r3, #0
   17eec:	str	r3, [sp, #36]	; 0x24
   17ef0:	b	17bcc <lchmod@@Base+0x130c>
   17ef4:	mov	r3, #110	; 0x6e
   17ef8:	b	17adc <lchmod@@Base+0x121c>
   17efc:	mov	r3, #110	; 0x6e
   17f00:	b	17adc <lchmod@@Base+0x121c>
   17f04:	mov	r3, #0
   17f08:	str	r3, [sp, #44]	; 0x2c
   17f0c:	mov	r3, #110	; 0x6e
   17f10:	b	17adc <lchmod@@Base+0x121c>
   17f14:	mov	r8, r9
   17f18:	mov	r7, #2
   17f1c:	b	186bc <lchmod@@Base+0x1dfc>
   17f20:	mov	r3, #97	; 0x61
   17f24:	b	17af4 <lchmod@@Base+0x1234>
   17f28:	mov	r3, #97	; 0x61
   17f2c:	b	17af4 <lchmod@@Base+0x1234>
   17f30:	mov	r3, #0
   17f34:	str	r3, [sp, #44]	; 0x2c
   17f38:	ldr	r3, [sp, #24]
   17f3c:	cmn	r3, #1
   17f40:	beq	17f6c <lchmod@@Base+0x16ac>
   17f44:	ldr	r3, [sp, #24]
   17f48:	subs	r3, r3, #1
   17f4c:	movne	r3, #1
   17f50:	cmp	r3, #0
   17f54:	bne	184d4 <lchmod@@Base+0x1c14>
   17f58:	cmp	r6, #0
   17f5c:	beq	17f9c <lchmod@@Base+0x16dc>
   17f60:	mov	r5, #0
   17f64:	mov	r3, r5
   17f68:	b	17b08 <lchmod@@Base+0x1248>
   17f6c:	ldr	r3, [sp, #48]	; 0x30
   17f70:	ldrb	r3, [r3, #1]
   17f74:	adds	r3, r3, #0
   17f78:	movne	r3, #1
   17f7c:	b	17f50 <lchmod@@Base+0x1690>
   17f80:	mov	r3, #0
   17f84:	str	r3, [sp, #44]	; 0x2c
   17f88:	b	17f58 <lchmod@@Base+0x1698>
   17f8c:	mov	r3, #0
   17f90:	str	r3, [sp, #44]	; 0x2c
   17f94:	b	17f9c <lchmod@@Base+0x16dc>
   17f98:	ldr	r5, [sp, #44]	; 0x2c
   17f9c:	ldr	r3, [sp, #32]
   17fa0:	cmp	sl, #2
   17fa4:	movne	r3, #0
   17fa8:	andeq	r3, r3, #1
   17fac:	cmp	r3, #0
   17fb0:	beq	17b08 <lchmod@@Base+0x1248>
   17fb4:	mov	r8, r9
   17fb8:	mov	r7, #2
   17fbc:	b	186bc <lchmod@@Base+0x1dfc>
   17fc0:	ldr	r5, [sp, #32]
   17fc4:	b	17f9c <lchmod@@Base+0x16dc>
   17fc8:	mov	r3, #0
   17fcc:	str	r3, [sp, #44]	; 0x2c
   17fd0:	mov	r5, r3
   17fd4:	b	17f9c <lchmod@@Base+0x16dc>
   17fd8:	mov	r3, #0
   17fdc:	str	r3, [sp, #44]	; 0x2c
   17fe0:	cmp	sl, #2
   17fe4:	strne	r5, [sp, #68]	; 0x44
   17fe8:	movne	r3, #0
   17fec:	movne	r4, #39	; 0x27
   17ff0:	bne	17b08 <lchmod@@Base+0x1248>
   17ff4:	ldr	r3, [sp, #32]
   17ff8:	cmp	r3, #0
   17ffc:	bne	186a8 <lchmod@@Base+0x1de8>
   18000:	ldr	r3, [sp, #72]	; 0x48
   18004:	clz	r3, r3
   18008:	lsr	r3, r3, #5
   1800c:	cmp	r9, #0
   18010:	moveq	r3, #0
   18014:	cmp	r3, #0
   18018:	movne	r3, #0
   1801c:	bne	18044 <lchmod@@Base+0x1784>
   18020:	cmp	r9, fp
   18024:	movhi	r3, #39	; 0x27
   18028:	strbhi	r3, [r8, fp]
   1802c:	add	r3, fp, #1
   18030:	cmp	r9, r3
   18034:	movhi	r2, #92	; 0x5c
   18038:	strbhi	r2, [r8, r3]
   1803c:	mov	r3, r9
   18040:	ldr	r9, [sp, #72]	; 0x48
   18044:	add	r2, fp, #2
   18048:	cmp	r2, r3
   1804c:	movcc	r1, #39	; 0x27
   18050:	strbcc	r1, [r8, r2]
   18054:	add	fp, fp, #3
   18058:	str	r5, [sp, #68]	; 0x44
   1805c:	ldr	r2, [sp, #32]
   18060:	str	r2, [sp, #36]	; 0x24
   18064:	str	r9, [sp, #72]	; 0x48
   18068:	mov	r9, r3
   1806c:	mov	r4, #39	; 0x27
   18070:	mov	r3, #0
   18074:	b	17b54 <lchmod@@Base+0x1294>
   18078:	mov	r3, #0
   1807c:	str	r3, [sp, #44]	; 0x2c
   18080:	ldr	r7, [sp, #76]	; 0x4c
   18084:	cmp	r7, #1
   18088:	bne	180c0 <lchmod@@Base+0x1800>
   1808c:	bl	11628 <__ctype_b_loc@plt>
   18090:	ldr	r2, [r0]
   18094:	lsl	r3, r4, #1
   18098:	ldrh	r5, [r2, r3]
   1809c:	ubfx	r5, r5, #14, #1
   180a0:	mov	ip, r7
   180a4:	eor	r3, r5, #1
   180a8:	ldr	r2, [sp, #28]
   180ac:	and	r3, r3, r2
   180b0:	ands	r3, r3, #255	; 0xff
   180b4:	beq	17b08 <lchmod@@Base+0x1248>
   180b8:	mov	r5, #0
   180bc:	b	1831c <lchmod@@Base+0x1a5c>
   180c0:	mov	r2, #0
   180c4:	mov	r3, #0
   180c8:	strd	r2, [sp, #104]	; 0x68
   180cc:	ldr	r3, [sp, #24]
   180d0:	cmn	r3, #1
   180d4:	beq	180f8 <lchmod@@Base+0x1838>
   180d8:	mov	r3, #0
   180dc:	str	r4, [sp, #88]	; 0x58
   180e0:	str	fp, [sp, #92]	; 0x5c
   180e4:	str	r8, [sp, #56]	; 0x38
   180e8:	mov	r8, r3
   180ec:	str	r9, [sp, #84]	; 0x54
   180f0:	ldr	r9, [sp, #48]	; 0x30
   180f4:	b	18244 <lchmod@@Base+0x1984>
   180f8:	ldr	r0, [sp, #48]	; 0x30
   180fc:	bl	11658 <strlen@plt>
   18100:	str	r0, [sp, #24]
   18104:	b	180d8 <lchmod@@Base+0x1818>
   18108:	mov	r1, fp
   1810c:	ldr	r4, [sp, #88]	; 0x58
   18110:	mov	r2, r8
   18114:	mov	ip, r8
   18118:	ldr	fp, [sp, #92]	; 0x5c
   1811c:	ldr	r8, [sp, #56]	; 0x38
   18120:	ldr	r9, [sp, #84]	; 0x54
   18124:	ldr	r0, [sp, #24]
   18128:	cmp	r7, r0
   1812c:	bcs	182e4 <lchmod@@Base+0x1a24>
   18130:	ldrb	r3, [r1]
   18134:	cmp	r3, #0
   18138:	beq	182ec <lchmod@@Base+0x1a2c>
   1813c:	mov	r3, r1
   18140:	add	r2, r2, #1
   18144:	add	r1, r6, r2
   18148:	cmp	r0, r1
   1814c:	bls	182f4 <lchmod@@Base+0x1a34>
   18150:	ldrb	r1, [r3, #1]!
   18154:	cmp	r1, #0
   18158:	bne	18140 <lchmod@@Base+0x1880>
   1815c:	mov	ip, r2
   18160:	mov	r5, #0
   18164:	b	18314 <lchmod@@Base+0x1a54>
   18168:	ldr	r3, [sp, #56]	; 0x38
   1816c:	str	r3, [sp, #64]	; 0x40
   18170:	ldr	r8, [sp, #84]	; 0x54
   18174:	mov	r7, #2
   18178:	b	186bc <lchmod@@Base+0x1dfc>
   1817c:	cmp	r2, r7
   18180:	beq	18220 <lchmod@@Base+0x1960>
   18184:	ldrb	r3, [r2], #1
   18188:	sub	r3, r3, #91	; 0x5b
   1818c:	cmp	r3, #33	; 0x21
   18190:	ldrls	pc, [pc, r3, lsl #2]
   18194:	b	1817c <lchmod@@Base+0x18bc>
   18198:	andeq	r8, r1, r8, ror #2
   1819c:	andeq	r8, r1, r8, ror #2
   181a0:	andeq	r8, r1, ip, ror r1
   181a4:	andeq	r8, r1, r8, ror #2
   181a8:	andeq	r8, r1, ip, ror r1
   181ac:	andeq	r8, r1, r8, ror #2
   181b0:	andeq	r8, r1, ip, ror r1
   181b4:	andeq	r8, r1, ip, ror r1
   181b8:	andeq	r8, r1, ip, ror r1
   181bc:	andeq	r8, r1, ip, ror r1
   181c0:	andeq	r8, r1, ip, ror r1
   181c4:	andeq	r8, r1, ip, ror r1
   181c8:	andeq	r8, r1, ip, ror r1
   181cc:	andeq	r8, r1, ip, ror r1
   181d0:	andeq	r8, r1, ip, ror r1
   181d4:	andeq	r8, r1, ip, ror r1
   181d8:	andeq	r8, r1, ip, ror r1
   181dc:	andeq	r8, r1, ip, ror r1
   181e0:	andeq	r8, r1, ip, ror r1
   181e4:	andeq	r8, r1, ip, ror r1
   181e8:	andeq	r8, r1, ip, ror r1
   181ec:	andeq	r8, r1, ip, ror r1
   181f0:	andeq	r8, r1, ip, ror r1
   181f4:	andeq	r8, r1, ip, ror r1
   181f8:	andeq	r8, r1, ip, ror r1
   181fc:	andeq	r8, r1, ip, ror r1
   18200:	andeq	r8, r1, ip, ror r1
   18204:	andeq	r8, r1, ip, ror r1
   18208:	andeq	r8, r1, ip, ror r1
   1820c:	andeq	r8, r1, ip, ror r1
   18210:	andeq	r8, r1, ip, ror r1
   18214:	andeq	r8, r1, ip, ror r1
   18218:	andeq	r8, r1, ip, ror r1
   1821c:	andeq	r8, r1, r8, ror #2
   18220:	ldr	r0, [sp, #100]	; 0x64
   18224:	bl	11544 <iswprint@plt>
   18228:	cmp	r0, #0
   1822c:	moveq	r5, #0
   18230:	add	r8, r8, r4
   18234:	add	r0, sp, #104	; 0x68
   18238:	bl	114c0 <mbsinit@plt>
   1823c:	cmp	r0, #0
   18240:	bne	182b0 <lchmod@@Base+0x19f0>
   18244:	add	r7, r6, r8
   18248:	add	fp, r9, r7
   1824c:	add	r3, sp, #104	; 0x68
   18250:	ldr	r2, [sp, #24]
   18254:	sub	r2, r2, r7
   18258:	mov	r1, fp
   1825c:	add	r0, sp, #100	; 0x64
   18260:	bl	1a9c0 <lchmod@@Base+0x4100>
   18264:	subs	r4, r0, #0
   18268:	beq	18300 <lchmod@@Base+0x1a40>
   1826c:	cmn	r4, #1
   18270:	beq	182c8 <lchmod@@Base+0x1a08>
   18274:	cmn	r4, #2
   18278:	beq	18108 <lchmod@@Base+0x1848>
   1827c:	ldr	r3, [sp, #32]
   18280:	cmp	sl, #2
   18284:	movne	r3, #0
   18288:	andeq	r3, r3, #1
   1828c:	cmp	r3, #0
   18290:	beq	18220 <lchmod@@Base+0x1960>
   18294:	cmp	r4, #1
   18298:	bls	18220 <lchmod@@Base+0x1960>
   1829c:	add	r2, r7, #1
   182a0:	add	r2, r9, r2
   182a4:	add	r3, r9, r4
   182a8:	add	r7, r3, r7
   182ac:	b	18184 <lchmod@@Base+0x18c4>
   182b0:	ldr	r4, [sp, #88]	; 0x58
   182b4:	mov	ip, r8
   182b8:	ldr	fp, [sp, #92]	; 0x5c
   182bc:	ldr	r8, [sp, #56]	; 0x38
   182c0:	ldr	r9, [sp, #84]	; 0x54
   182c4:	b	18314 <lchmod@@Base+0x1a54>
   182c8:	ldr	r4, [sp, #88]	; 0x58
   182cc:	mov	ip, r8
   182d0:	ldr	fp, [sp, #92]	; 0x5c
   182d4:	ldr	r8, [sp, #56]	; 0x38
   182d8:	ldr	r9, [sp, #84]	; 0x54
   182dc:	mov	r5, #0
   182e0:	b	18314 <lchmod@@Base+0x1a54>
   182e4:	mov	r5, #0
   182e8:	b	18314 <lchmod@@Base+0x1a54>
   182ec:	mov	r5, #0
   182f0:	b	18314 <lchmod@@Base+0x1a54>
   182f4:	mov	ip, r2
   182f8:	mov	r5, #0
   182fc:	b	18314 <lchmod@@Base+0x1a54>
   18300:	ldr	r4, [sp, #88]	; 0x58
   18304:	mov	ip, r8
   18308:	ldr	fp, [sp, #92]	; 0x5c
   1830c:	ldr	r8, [sp, #56]	; 0x38
   18310:	ldr	r9, [sp, #84]	; 0x54
   18314:	cmp	ip, #1
   18318:	bls	180a4 <lchmod@@Base+0x17e4>
   1831c:	add	lr, r6, ip
   18320:	ldr	r3, [sp, #48]	; 0x30
   18324:	add	r1, r3, r6
   18328:	mov	r3, #0
   1832c:	eor	r0, r5, #1
   18330:	ldr	r2, [sp, #28]
   18334:	and	r0, r0, r2
   18338:	uxtb	r0, r0
   1833c:	str	r0, [sp, #56]	; 0x38
   18340:	mov	r7, #92	; 0x5c
   18344:	ldr	ip, [sp, #36]	; 0x24
   18348:	str	r5, [sp, #84]	; 0x54
   1834c:	ldr	r2, [sp, #44]	; 0x2c
   18350:	b	183c0 <lchmod@@Base+0x1b00>
   18354:	cmp	r2, #0
   18358:	beq	18368 <lchmod@@Base+0x1aa8>
   1835c:	cmp	r9, fp
   18360:	strbhi	r7, [r8, fp]
   18364:	add	fp, fp, #1
   18368:	add	r5, r6, #1
   1836c:	cmp	r5, lr
   18370:	bcs	1847c <lchmod@@Base+0x1bbc>
   18374:	eor	r2, r3, #1
   18378:	and	r2, r2, ip
   1837c:	ands	r2, r2, #255	; 0xff
   18380:	beq	18498 <lchmod@@Base+0x1bd8>
   18384:	cmp	r9, fp
   18388:	movhi	r2, #39	; 0x27
   1838c:	strbhi	r2, [r8, fp]
   18390:	add	r2, fp, #1
   18394:	cmp	r9, r2
   18398:	movhi	ip, #39	; 0x27
   1839c:	strbhi	ip, [r8, r2]
   183a0:	add	fp, fp, #2
   183a4:	ldr	ip, [sp, #56]	; 0x38
   183a8:	mov	r2, ip
   183ac:	mov	r6, r5
   183b0:	cmp	r9, fp
   183b4:	strbhi	r4, [r8, fp]
   183b8:	add	fp, fp, #1
   183bc:	ldrb	r4, [r1, #1]!
   183c0:	cmp	r0, #0
   183c4:	beq	18354 <lchmod@@Base+0x1a94>
   183c8:	ldr	r3, [sp, #32]
   183cc:	cmp	r3, #0
   183d0:	bne	18664 <lchmod@@Base+0x1da4>
   183d4:	eor	r3, ip, #1
   183d8:	cmp	sl, #2
   183dc:	movne	r3, #0
   183e0:	andeq	r3, r3, #1
   183e4:	cmp	r3, #0
   183e8:	beq	18420 <lchmod@@Base+0x1b60>
   183ec:	cmp	r9, fp
   183f0:	movhi	ip, #39	; 0x27
   183f4:	strbhi	ip, [r8, fp]
   183f8:	add	ip, fp, #1
   183fc:	cmp	r9, ip
   18400:	movhi	r5, #36	; 0x24
   18404:	strbhi	r5, [r8, ip]
   18408:	add	ip, fp, #2
   1840c:	cmp	r9, ip
   18410:	movhi	r5, #39	; 0x27
   18414:	strbhi	r5, [r8, ip]
   18418:	add	fp, fp, #3
   1841c:	mov	ip, r3
   18420:	cmp	r9, fp
   18424:	strbhi	r7, [r8, fp]
   18428:	add	r3, fp, #1
   1842c:	cmp	r9, r3
   18430:	bls	18440 <lchmod@@Base+0x1b80>
   18434:	lsr	r5, r4, #6
   18438:	add	r5, r5, #48	; 0x30
   1843c:	strb	r5, [r8, r3]
   18440:	add	r3, fp, #2
   18444:	cmp	r9, r3
   18448:	bls	18458 <lchmod@@Base+0x1b98>
   1844c:	ubfx	r5, r4, #3, #3
   18450:	add	r5, r5, #48	; 0x30
   18454:	strb	r5, [r8, r3]
   18458:	add	fp, fp, #3
   1845c:	and	r4, r4, #7
   18460:	add	r4, r4, #48	; 0x30
   18464:	add	r5, r6, #1
   18468:	cmp	r5, lr
   1846c:	bcs	18488 <lchmod@@Base+0x1bc8>
   18470:	ldr	r3, [sp, #56]	; 0x38
   18474:	mov	r6, r5
   18478:	b	183b0 <lchmod@@Base+0x1af0>
   1847c:	str	ip, [sp, #36]	; 0x24
   18480:	ldr	r5, [sp, #84]	; 0x54
   18484:	b	17eb4 <lchmod@@Base+0x15f4>
   18488:	str	ip, [sp, #36]	; 0x24
   1848c:	ldr	r5, [sp, #84]	; 0x54
   18490:	mov	r3, r0
   18494:	b	17eb4 <lchmod@@Base+0x15f4>
   18498:	mov	r6, r5
   1849c:	b	183b0 <lchmod@@Base+0x1af0>
   184a0:	ldr	r3, [sp, #44]	; 0x2c
   184a4:	b	17b08 <lchmod@@Base+0x1248>
   184a8:	mov	r5, #0
   184ac:	mov	r3, r5
   184b0:	mov	r4, #63	; 0x3f
   184b4:	b	17b08 <lchmod@@Base+0x1248>
   184b8:	mov	r5, #0
   184bc:	mov	r3, r5
   184c0:	mov	r4, #63	; 0x3f
   184c4:	b	17b08 <lchmod@@Base+0x1248>
   184c8:	mov	r5, #0
   184cc:	mov	r3, r5
   184d0:	b	17b08 <lchmod@@Base+0x1248>
   184d4:	mov	r5, #0
   184d8:	mov	r3, r5
   184dc:	b	17b08 <lchmod@@Base+0x1248>
   184e0:	ldr	r5, [sp, #44]	; 0x2c
   184e4:	ldr	r3, [sp, #32]
   184e8:	b	17b08 <lchmod@@Base+0x1248>
   184ec:	ldr	r5, [sp, #44]	; 0x2c
   184f0:	mov	r3, #0
   184f4:	str	r3, [sp, #44]	; 0x2c
   184f8:	b	17b08 <lchmod@@Base+0x1248>
   184fc:	mov	r4, r3
   18500:	mov	r5, #0
   18504:	b	17b60 <lchmod@@Base+0x12a0>
   18508:	mov	r5, #0
   1850c:	mov	r4, #97	; 0x61
   18510:	b	17b60 <lchmod@@Base+0x12a0>
   18514:	mov	r5, #0
   18518:	mov	r3, r5
   1851c:	mov	r4, #92	; 0x5c
   18520:	b	17eb4 <lchmod@@Base+0x15f4>
   18524:	ldr	r3, [sp, #48]	; 0x30
   18528:	ldrb	r5, [r3, r6]
   1852c:	adds	r5, r5, #0
   18530:	movne	r5, #1
   18534:	b	17c04 <lchmod@@Base+0x1344>
   18538:	cmp	sl, #2
   1853c:	movne	r3, #0
   18540:	moveq	r3, #1
   18544:	ldr	r1, [sp, #32]
   18548:	cmp	fp, #0
   1854c:	andeq	r2, r3, r1
   18550:	movne	r2, #0
   18554:	cmp	r2, #0
   18558:	bne	18678 <lchmod@@Base+0x1db8>
   1855c:	eor	r2, r1, #1
   18560:	uxtb	r2, r2
   18564:	and	r3, r3, r2
   18568:	ldr	r1, [sp, #68]	; 0x44
   1856c:	ands	r3, r1, r3
   18570:	beq	18604 <lchmod@@Base+0x1d44>
   18574:	ldr	r2, [sp, #40]	; 0x28
   18578:	cmp	r2, #0
   1857c:	bne	185b4 <lchmod@@Base+0x1cf4>
   18580:	ldr	r2, [sp, #72]	; 0x48
   18584:	adds	r2, r2, #0
   18588:	movne	r2, #1
   1858c:	cmp	r9, #0
   18590:	movne	r2, #0
   18594:	str	r2, [sp, #68]	; 0x44
   18598:	mov	sl, #2
   1859c:	ldr	r1, [sp, #40]	; 0x28
   185a0:	str	r1, [sp, #32]
   185a4:	cmp	r2, #0
   185a8:	beq	185f8 <lchmod@@Base+0x1d38>
   185ac:	ldr	r9, [sp, #72]	; 0x48
   185b0:	b	1730c <lchmod@@Base+0xa4c>
   185b4:	ldr	r3, [sp, #168]	; 0xa8
   185b8:	str	r3, [sp, #16]
   185bc:	ldr	r3, [sp, #164]	; 0xa4
   185c0:	str	r3, [sp, #12]
   185c4:	ldr	r3, [sp, #160]	; 0xa0
   185c8:	str	r3, [sp, #8]
   185cc:	ldr	r3, [sp, #156]	; 0x9c
   185d0:	str	r3, [sp, #4]
   185d4:	mov	r3, #5
   185d8:	str	r3, [sp]
   185dc:	ldr	r3, [sp, #24]
   185e0:	ldr	r2, [sp, #48]	; 0x30
   185e4:	ldr	r1, [sp, #72]	; 0x48
   185e8:	ldr	r0, [sp, #64]	; 0x40
   185ec:	bl	17294 <lchmod@@Base+0x9d4>
   185f0:	mov	fp, r0
   185f4:	b	18714 <lchmod@@Base+0x1e54>
   185f8:	mov	r8, r9
   185fc:	mov	r2, r3
   18600:	b	18608 <lchmod@@Base+0x1d48>
   18604:	mov	r8, r9
   18608:	ldr	r3, [sp, #60]	; 0x3c
   1860c:	cmp	r3, #0
   18610:	moveq	r2, #0
   18614:	andne	r2, r2, #1
   18618:	cmp	r2, #0
   1861c:	beq	1864c <lchmod@@Base+0x1d8c>
   18620:	mov	r2, r3
   18624:	ldrb	r3, [r3]
   18628:	cmp	r3, #0
   1862c:	beq	1864c <lchmod@@Base+0x1d8c>
   18630:	ldr	r1, [sp, #64]	; 0x40
   18634:	cmp	r8, fp
   18638:	strbhi	r3, [r1, fp]
   1863c:	add	fp, fp, #1
   18640:	ldrb	r3, [r2, #1]!
   18644:	cmp	r3, #0
   18648:	bne	18634 <lchmod@@Base+0x1d74>
   1864c:	cmp	r8, fp
   18650:	bls	18714 <lchmod@@Base+0x1e54>
   18654:	mov	r3, #0
   18658:	ldr	r2, [sp, #64]	; 0x40
   1865c:	strb	r3, [r2, fp]
   18660:	b	18714 <lchmod@@Base+0x1e54>
   18664:	mov	r8, r9
   18668:	mov	r7, sl
   1866c:	ldr	r3, [sp, #32]
   18670:	str	r3, [sp, #28]
   18674:	b	186bc <lchmod@@Base+0x1dfc>
   18678:	mov	r8, r9
   1867c:	mov	r7, #2
   18680:	b	186bc <lchmod@@Base+0x1dfc>
   18684:	mov	r8, r9
   18688:	mov	r7, sl
   1868c:	b	186bc <lchmod@@Base+0x1dfc>
   18690:	mov	r8, r9
   18694:	mov	r7, sl
   18698:	b	186bc <lchmod@@Base+0x1dfc>
   1869c:	mov	r8, r9
   186a0:	mov	r7, sl
   186a4:	b	186bc <lchmod@@Base+0x1dfc>
   186a8:	mov	r8, r9
   186ac:	mov	r7, sl
   186b0:	b	186bc <lchmod@@Base+0x1dfc>
   186b4:	mov	r8, r9
   186b8:	mov	r7, sl
   186bc:	ldr	r3, [sp, #28]
   186c0:	cmp	r7, #2
   186c4:	movne	r3, #0
   186c8:	andeq	r3, r3, #1
   186cc:	cmp	r3, #0
   186d0:	movne	r7, #4
   186d4:	ldr	r3, [sp, #168]	; 0xa8
   186d8:	str	r3, [sp, #16]
   186dc:	ldr	r3, [sp, #164]	; 0xa4
   186e0:	str	r3, [sp, #12]
   186e4:	mov	r3, #0
   186e8:	str	r3, [sp, #8]
   186ec:	ldr	r3, [sp, #156]	; 0x9c
   186f0:	bic	r3, r3, #2
   186f4:	str	r3, [sp, #4]
   186f8:	str	r7, [sp]
   186fc:	ldr	r3, [sp, #24]
   18700:	ldr	r2, [sp, #48]	; 0x30
   18704:	mov	r1, r8
   18708:	ldr	r0, [sp, #64]	; 0x40
   1870c:	bl	17294 <lchmod@@Base+0x9d4>
   18710:	mov	fp, r0
   18714:	mov	r0, fp
   18718:	add	sp, sp, #116	; 0x74
   1871c:	ldrd	r4, [sp]
   18720:	ldrd	r6, [sp, #8]
   18724:	ldrd	r8, [sp, #16]
   18728:	ldrd	sl, [sp, #24]
   1872c:	add	sp, sp, #32
   18730:	pop	{pc}		; (ldr pc, [sp], #4)
   18734:	mov	r8, r9
   18738:	mov	r7, sl
   1873c:	b	186d4 <lchmod@@Base+0x1e14>
   18740:	add	fp, fp, #4
   18744:	str	r3, [sp, #36]	; 0x24
   18748:	mov	r5, #0
   1874c:	mov	r4, #48	; 0x30
   18750:	b	17b08 <lchmod@@Base+0x1248>
   18754:	mov	r3, #1
   18758:	str	r3, [sp, #32]
   1875c:	str	r3, [sp, #28]
   18760:	str	r3, [sp, #52]	; 0x34
   18764:	movw	r3, #46224	; 0xb490
   18768:	movt	r3, #1
   1876c:	str	r3, [sp, #60]	; 0x3c
   18770:	mov	fp, #0
   18774:	mov	sl, #5
   18778:	b	1736c <lchmod@@Base+0xaac>
   1877c:	ldr	r3, [sp, #48]	; 0x30
   18780:	ldrb	r4, [r3, r6]
   18784:	cmp	r4, #126	; 0x7e
   18788:	ldrls	pc, [pc, r4, lsl #2]
   1878c:	b	18078 <lchmod@@Base+0x17b8>
   18790:	andeq	r7, r1, r0, lsl #16
   18794:	andeq	r8, r1, r8, ror r0
   18798:	andeq	r8, r1, r8, ror r0
   1879c:	andeq	r8, r1, r8, ror r0
   187a0:	andeq	r8, r1, r8, ror r0
   187a4:	andeq	r8, r1, r8, ror r0
   187a8:	andeq	r8, r1, r8, ror r0
   187ac:	andeq	r8, r1, r8, lsl #10
   187b0:	andeq	r7, r1, r4, lsr #21
   187b4:	andeq	r7, r1, r8, asr #28
   187b8:	andeq	r7, r1, r4, lsl #30
   187bc:	andeq	r7, r1, ip, asr lr
   187c0:			; <UNDEFINED> instruction: 0x00017ab8
   187c4:	andeq	r7, r1, ip, asr #21
   187c8:	andeq	r8, r1, r8, ror r0
   187cc:	andeq	r8, r1, r8, ror r0
   187d0:	andeq	r8, r1, r8, ror r0
   187d4:	andeq	r8, r1, r8, ror r0
   187d8:	andeq	r8, r1, r8, ror r0
   187dc:	andeq	r8, r1, r8, ror r0
   187e0:	andeq	r8, r1, r8, ror r0
   187e4:	andeq	r8, r1, r8, ror r0
   187e8:	andeq	r8, r1, r8, ror r0
   187ec:	andeq	r8, r1, r8, ror r0
   187f0:	andeq	r8, r1, r8, ror r0
   187f4:	andeq	r8, r1, r8, ror r0
   187f8:	andeq	r8, r1, r8, ror r0
   187fc:	andeq	r8, r1, r8, ror r0
   18800:	andeq	r8, r1, r8, ror r0
   18804:	andeq	r8, r1, r8, ror r0
   18808:	andeq	r8, r1, r8, ror r0
   1880c:	andeq	r8, r1, r8, ror r0
   18810:	andeq	r7, r1, ip, lsl #31
   18814:	andeq	r7, r1, r8, asr #31
   18818:	andeq	r7, r1, r8, asr #31
   1881c:	andeq	r7, r1, r0, lsl #31
   18820:	andeq	r7, r1, r8, asr #31
   18824:	andeq	r8, r1, ip, ror #9
   18828:	andeq	r7, r1, r8, asr #31
   1882c:	ldrdeq	r7, [r1], -r8
   18830:	andeq	r7, r1, r8, asr #31
   18834:	andeq	r7, r1, r8, asr #31
   18838:	andeq	r7, r1, r8, asr #31
   1883c:	andeq	r8, r1, ip, ror #9
   18840:	andeq	r8, r1, ip, ror #9
   18844:	andeq	r8, r1, ip, ror #9
   18848:	andeq	r8, r1, ip, ror #9
   1884c:	andeq	r8, r1, ip, ror #9
   18850:	andeq	r8, r1, ip, ror #9
   18854:	andeq	r8, r1, ip, ror #9
   18858:	andeq	r8, r1, ip, ror #9
   1885c:	andeq	r8, r1, ip, ror #9
   18860:	andeq	r8, r1, ip, ror #9
   18864:	andeq	r8, r1, ip, ror #9
   18868:	andeq	r8, r1, ip, ror #9
   1886c:	andeq	r8, r1, ip, ror #9
   18870:	andeq	r8, r1, ip, ror #9
   18874:	andeq	r8, r1, ip, ror #9
   18878:	andeq	r8, r1, ip, ror #9
   1887c:	andeq	r7, r1, r8, asr #31
   18880:	andeq	r7, r1, r8, asr #31
   18884:	andeq	r7, r1, r8, asr #31
   18888:	andeq	r7, r1, r8, asr #31
   1888c:	andeq	r7, r1, r8, lsr r9
   18890:	andeq	r8, r1, r8, ror r0
   18894:	andeq	r8, r1, ip, ror #9
   18898:	andeq	r8, r1, ip, ror #9
   1889c:	andeq	r8, r1, ip, ror #9
   188a0:	andeq	r8, r1, ip, ror #9
   188a4:	andeq	r8, r1, ip, ror #9
   188a8:	andeq	r8, r1, ip, ror #9
   188ac:	andeq	r8, r1, ip, ror #9
   188b0:	andeq	r8, r1, ip, ror #9
   188b4:	andeq	r8, r1, ip, ror #9
   188b8:	andeq	r8, r1, ip, ror #9
   188bc:	andeq	r8, r1, ip, ror #9
   188c0:	andeq	r8, r1, ip, ror #9
   188c4:	andeq	r8, r1, ip, ror #9
   188c8:	andeq	r8, r1, ip, ror #9
   188cc:	andeq	r8, r1, ip, ror #9
   188d0:	andeq	r8, r1, ip, ror #9
   188d4:	andeq	r8, r1, ip, ror #9
   188d8:	andeq	r8, r1, ip, ror #9
   188dc:	andeq	r8, r1, ip, ror #9
   188e0:	andeq	r8, r1, ip, ror #9
   188e4:	andeq	r8, r1, ip, ror #9
   188e8:	andeq	r8, r1, ip, ror #9
   188ec:	andeq	r8, r1, ip, ror #9
   188f0:	andeq	r8, r1, ip, ror #9
   188f4:	andeq	r8, r1, ip, ror #9
   188f8:	andeq	r8, r1, ip, ror #9
   188fc:	andeq	r7, r1, r8, asr #31
   18900:	andeq	r7, r1, r0, ror lr
   18904:	andeq	r8, r1, ip, ror #9
   18908:	andeq	r7, r1, r8, asr #31
   1890c:	andeq	r8, r1, ip, ror #9
   18910:	andeq	r7, r1, r8, asr #31
   18914:	andeq	r8, r1, ip, ror #9
   18918:	andeq	r8, r1, ip, ror #9
   1891c:	andeq	r8, r1, ip, ror #9
   18920:	andeq	r8, r1, ip, ror #9
   18924:	andeq	r8, r1, ip, ror #9
   18928:	andeq	r8, r1, ip, ror #9
   1892c:	andeq	r8, r1, ip, ror #9
   18930:	andeq	r8, r1, ip, ror #9
   18934:	andeq	r8, r1, ip, ror #9
   18938:	andeq	r8, r1, ip, ror #9
   1893c:	andeq	r8, r1, ip, ror #9
   18940:	andeq	r8, r1, ip, ror #9
   18944:	andeq	r8, r1, ip, ror #9
   18948:	andeq	r8, r1, ip, ror #9
   1894c:	andeq	r8, r1, ip, ror #9
   18950:	andeq	r8, r1, ip, ror #9
   18954:	andeq	r8, r1, ip, ror #9
   18958:	andeq	r8, r1, ip, ror #9
   1895c:	andeq	r8, r1, ip, ror #9
   18960:	andeq	r8, r1, ip, ror #9
   18964:	andeq	r8, r1, ip, ror #9
   18968:	andeq	r8, r1, ip, ror #9
   1896c:	andeq	r8, r1, ip, ror #9
   18970:	andeq	r8, r1, ip, ror #9
   18974:	andeq	r8, r1, ip, ror #9
   18978:	andeq	r8, r1, ip, ror #9
   1897c:	andeq	r7, r1, r0, lsr pc
   18980:	andeq	r7, r1, r8, asr #31
   18984:	andeq	r7, r1, r0, lsr pc
   18988:	andeq	r7, r1, r0, lsl #31
   1898c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18990:	strd	r6, [sp, #8]
   18994:	strd	r8, [sp, #16]
   18998:	strd	sl, [sp, #24]
   1899c:	str	lr, [sp, #32]
   189a0:	sub	sp, sp, #52	; 0x34
   189a4:	mov	r5, r0
   189a8:	str	r1, [sp, #24]
   189ac:	str	r2, [sp, #28]
   189b0:	mov	r4, r3
   189b4:	bl	11688 <__errno_location@plt>
   189b8:	str	r0, [sp, #32]
   189bc:	ldr	r3, [r0]
   189c0:	str	r3, [sp, #36]	; 0x24
   189c4:	movw	r3, #49540	; 0xc184
   189c8:	movt	r3, #2
   189cc:	ldr	r6, [r3]
   189d0:	cmn	r5, #-2147483647	; 0x80000001
   189d4:	movne	r3, #0
   189d8:	moveq	r3, #1
   189dc:	orrs	r3, r3, r5, lsr #31
   189e0:	bne	18b44 <lchmod@@Base+0x2284>
   189e4:	movw	r3, #49540	; 0xc184
   189e8:	movt	r3, #2
   189ec:	ldr	r2, [r3, #4]
   189f0:	cmp	r2, r5
   189f4:	bgt	18a64 <lchmod@@Base+0x21a4>
   189f8:	str	r2, [sp, #44]	; 0x2c
   189fc:	add	r3, r3, #8
   18a00:	cmp	r6, r3
   18a04:	beq	18b48 <lchmod@@Base+0x2288>
   18a08:	sub	r2, r5, r2
   18a0c:	mov	r3, #8
   18a10:	str	r3, [sp]
   18a14:	mvn	r3, #-2147483648	; 0x80000000
   18a18:	add	r2, r2, #1
   18a1c:	add	r1, sp, #44	; 0x2c
   18a20:	mov	r0, r6
   18a24:	bl	19e30 <lchmod@@Base+0x3570>
   18a28:	mov	r6, r0
   18a2c:	movw	r3, #49540	; 0xc184
   18a30:	movt	r3, #2
   18a34:	str	r0, [r3]
   18a38:	movw	r7, #49540	; 0xc184
   18a3c:	movt	r7, #2
   18a40:	ldr	r0, [r7, #4]
   18a44:	ldr	r2, [sp, #44]	; 0x2c
   18a48:	sub	r2, r2, r0
   18a4c:	lsl	r2, r2, #3
   18a50:	mov	r1, #0
   18a54:	add	r0, r6, r0, lsl #3
   18a58:	bl	116ac <memset@plt>
   18a5c:	ldr	r3, [sp, #44]	; 0x2c
   18a60:	str	r3, [r7, #4]
   18a64:	add	fp, r6, r5, lsl #3
   18a68:	ldr	r8, [r6, r5, lsl #3]
   18a6c:	ldr	r7, [fp, #4]
   18a70:	ldr	r3, [r4, #4]
   18a74:	orr	r9, r3, #1
   18a78:	add	sl, r4, #8
   18a7c:	ldr	r3, [r4, #44]	; 0x2c
   18a80:	str	r3, [sp, #16]
   18a84:	ldr	r3, [r4, #40]	; 0x28
   18a88:	str	r3, [sp, #12]
   18a8c:	str	sl, [sp, #8]
   18a90:	str	r9, [sp, #4]
   18a94:	ldr	r3, [r4]
   18a98:	str	r3, [sp]
   18a9c:	ldr	r3, [sp, #28]
   18aa0:	ldr	r2, [sp, #24]
   18aa4:	mov	r1, r8
   18aa8:	mov	r0, r7
   18aac:	bl	17294 <lchmod@@Base+0x9d4>
   18ab0:	cmp	r8, r0
   18ab4:	bhi	18b18 <lchmod@@Base+0x2258>
   18ab8:	add	r8, r0, #1
   18abc:	str	r8, [r6, r5, lsl #3]
   18ac0:	movw	r3, #49652	; 0xc1f4
   18ac4:	movt	r3, #2
   18ac8:	cmp	r7, r3
   18acc:	beq	18ad8 <lchmod@@Base+0x2218>
   18ad0:	mov	r0, r7
   18ad4:	bl	1322c <__assert_fail@plt+0x1a00>
   18ad8:	mov	r0, r8
   18adc:	bl	19c2c <lchmod@@Base+0x336c>
   18ae0:	mov	r7, r0
   18ae4:	str	r0, [fp, #4]
   18ae8:	ldr	r3, [r4, #44]	; 0x2c
   18aec:	str	r3, [sp, #16]
   18af0:	ldr	r3, [r4, #40]	; 0x28
   18af4:	str	r3, [sp, #12]
   18af8:	str	sl, [sp, #8]
   18afc:	str	r9, [sp, #4]
   18b00:	ldr	r3, [r4]
   18b04:	str	r3, [sp]
   18b08:	ldr	r3, [sp, #28]
   18b0c:	ldr	r2, [sp, #24]
   18b10:	mov	r1, r8
   18b14:	bl	17294 <lchmod@@Base+0x9d4>
   18b18:	ldr	r3, [sp, #32]
   18b1c:	ldr	r2, [sp, #36]	; 0x24
   18b20:	str	r2, [r3]
   18b24:	mov	r0, r7
   18b28:	add	sp, sp, #52	; 0x34
   18b2c:	ldrd	r4, [sp]
   18b30:	ldrd	r6, [sp, #8]
   18b34:	ldrd	r8, [sp, #16]
   18b38:	ldrd	sl, [sp, #24]
   18b3c:	add	sp, sp, #32
   18b40:	pop	{pc}		; (ldr pc, [sp], #4)
   18b44:	bl	117d8 <abort@plt>
   18b48:	sub	r2, r5, r2
   18b4c:	mov	r3, #8
   18b50:	str	r3, [sp]
   18b54:	mvn	r3, #-2147483648	; 0x80000000
   18b58:	add	r2, r2, #1
   18b5c:	add	r1, sp, #44	; 0x2c
   18b60:	mov	r0, #0
   18b64:	bl	19e30 <lchmod@@Base+0x3570>
   18b68:	mov	r6, r0
   18b6c:	movw	r3, #49540	; 0xc184
   18b70:	movt	r3, #2
   18b74:	str	r0, [r3]
   18b78:	ldrd	r2, [r3, #8]
   18b7c:	strd	r2, [r0]
   18b80:	b	18a38 <lchmod@@Base+0x2178>
   18b84:	strd	r4, [sp, #-16]!
   18b88:	str	r6, [sp, #8]
   18b8c:	str	lr, [sp, #12]
   18b90:	mov	r4, r0
   18b94:	bl	11688 <__errno_location@plt>
   18b98:	mov	r5, r0
   18b9c:	ldr	r6, [r0]
   18ba0:	cmp	r4, #0
   18ba4:	ldr	r3, [pc, #32]	; 18bcc <lchmod@@Base+0x230c>
   18ba8:	moveq	r4, r3
   18bac:	mov	r1, #48	; 0x30
   18bb0:	mov	r0, r4
   18bb4:	bl	19fa0 <lchmod@@Base+0x36e0>
   18bb8:	str	r6, [r5]
   18bbc:	ldrd	r4, [sp]
   18bc0:	ldr	r6, [sp, #8]
   18bc4:	add	sp, sp, #12
   18bc8:	pop	{pc}		; (ldr pc, [sp], #4)
   18bcc:	strdeq	ip, [r2], -r4
   18bd0:	subs	r3, r0, #0
   18bd4:	ldr	r2, [pc, #8]	; 18be4 <lchmod@@Base+0x2324>
   18bd8:	moveq	r3, r2
   18bdc:	ldr	r0, [r3]
   18be0:	bx	lr
   18be4:	strdeq	ip, [r2], -r4
   18be8:	subs	r3, r0, #0
   18bec:	ldr	r2, [pc, #8]	; 18bfc <lchmod@@Base+0x233c>
   18bf0:	moveq	r3, r2
   18bf4:	str	r1, [r3]
   18bf8:	bx	lr
   18bfc:	strdeq	ip, [r2], -r4
   18c00:	push	{lr}		; (str lr, [sp, #-4]!)
   18c04:	subs	r3, r0, #0
   18c08:	ldr	r0, [pc, #44]	; 18c3c <lchmod@@Base+0x237c>
   18c0c:	moveq	r3, r0
   18c10:	add	r3, r3, #8
   18c14:	lsr	lr, r1, #5
   18c18:	and	r1, r1, #31
   18c1c:	ldr	ip, [r3, lr, lsl #2]
   18c20:	lsr	r0, ip, r1
   18c24:	eor	r2, r2, r0
   18c28:	and	r2, r2, #1
   18c2c:	eor	r1, ip, r2, lsl r1
   18c30:	str	r1, [r3, lr, lsl #2]
   18c34:	and	r0, r0, #1
   18c38:	pop	{pc}		; (ldr pc, [sp], #4)
   18c3c:	strdeq	ip, [r2], -r4
   18c40:	subs	r3, r0, #0
   18c44:	ldr	r2, [pc, #12]	; 18c58 <lchmod@@Base+0x2398>
   18c48:	moveq	r3, r2
   18c4c:	ldr	r0, [r3, #4]
   18c50:	str	r1, [r3, #4]
   18c54:	bx	lr
   18c58:	strdeq	ip, [r2], -r4
   18c5c:	subs	r3, r0, #0
   18c60:	ldr	r0, [pc, #44]	; 18c94 <lchmod@@Base+0x23d4>
   18c64:	moveq	r3, r0
   18c68:	mov	r0, #10
   18c6c:	str	r0, [r3]
   18c70:	cmp	r2, #0
   18c74:	cmpne	r1, #0
   18c78:	beq	18c88 <lchmod@@Base+0x23c8>
   18c7c:	str	r1, [r3, #40]	; 0x28
   18c80:	str	r2, [r3, #44]	; 0x2c
   18c84:	bx	lr
   18c88:	str	r4, [sp, #-8]!
   18c8c:	str	lr, [sp, #4]
   18c90:	bl	117d8 <abort@plt>
   18c94:	strdeq	ip, [r2], -r4
   18c98:	strd	r4, [sp, #-32]!	; 0xffffffe0
   18c9c:	strd	r6, [sp, #8]
   18ca0:	strd	r8, [sp, #16]
   18ca4:	str	sl, [sp, #24]
   18ca8:	str	lr, [sp, #28]
   18cac:	sub	sp, sp, #24
   18cb0:	mov	r7, r0
   18cb4:	mov	r8, r1
   18cb8:	mov	r9, r2
   18cbc:	mov	sl, r3
   18cc0:	ldr	r4, [sp, #56]	; 0x38
   18cc4:	cmp	r4, #0
   18cc8:	ldr	r3, [pc, #104]	; 18d38 <lchmod@@Base+0x2478>
   18ccc:	moveq	r4, r3
   18cd0:	bl	11688 <__errno_location@plt>
   18cd4:	mov	r5, r0
   18cd8:	ldr	r6, [r0]
   18cdc:	ldr	r3, [r4, #44]	; 0x2c
   18ce0:	str	r3, [sp, #16]
   18ce4:	ldr	r3, [r4, #40]	; 0x28
   18ce8:	str	r3, [sp, #12]
   18cec:	add	r3, r4, #8
   18cf0:	str	r3, [sp, #8]
   18cf4:	ldr	r3, [r4, #4]
   18cf8:	str	r3, [sp, #4]
   18cfc:	ldr	r3, [r4]
   18d00:	str	r3, [sp]
   18d04:	mov	r3, sl
   18d08:	mov	r2, r9
   18d0c:	mov	r1, r8
   18d10:	mov	r0, r7
   18d14:	bl	17294 <lchmod@@Base+0x9d4>
   18d18:	str	r6, [r5]
   18d1c:	add	sp, sp, #24
   18d20:	ldrd	r4, [sp]
   18d24:	ldrd	r6, [sp, #8]
   18d28:	ldrd	r8, [sp, #16]
   18d2c:	ldr	sl, [sp, #24]
   18d30:	add	sp, sp, #28
   18d34:	pop	{pc}		; (ldr pc, [sp], #4)
   18d38:	strdeq	ip, [r2], -r4
   18d3c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18d40:	strd	r6, [sp, #8]
   18d44:	strd	r8, [sp, #16]
   18d48:	strd	sl, [sp, #24]
   18d4c:	str	lr, [sp, #32]
   18d50:	sub	sp, sp, #44	; 0x2c
   18d54:	mov	r8, r0
   18d58:	mov	sl, r1
   18d5c:	mov	r6, r2
   18d60:	subs	r4, r3, #0
   18d64:	ldr	r3, [pc, #200]	; 18e34 <lchmod@@Base+0x2574>
   18d68:	moveq	r4, r3
   18d6c:	bl	11688 <__errno_location@plt>
   18d70:	mov	r7, r0
   18d74:	ldr	fp, [r0]
   18d78:	ldr	r5, [r4, #4]
   18d7c:	cmp	r6, #0
   18d80:	orreq	r5, r5, #1
   18d84:	add	r9, r4, #8
   18d88:	ldr	r3, [r4, #44]	; 0x2c
   18d8c:	str	r3, [sp, #16]
   18d90:	ldr	r3, [r4, #40]	; 0x28
   18d94:	str	r3, [sp, #12]
   18d98:	str	r9, [sp, #8]
   18d9c:	str	r5, [sp, #4]
   18da0:	ldr	r3, [r4]
   18da4:	str	r3, [sp]
   18da8:	str	sl, [sp, #36]	; 0x24
   18dac:	mov	r3, sl
   18db0:	str	r8, [sp, #32]
   18db4:	mov	r2, r8
   18db8:	mov	r1, #0
   18dbc:	mov	r0, r1
   18dc0:	bl	17294 <lchmod@@Base+0x9d4>
   18dc4:	mov	sl, r0
   18dc8:	add	r8, r0, #1
   18dcc:	mov	r0, r8
   18dd0:	bl	19c2c <lchmod@@Base+0x336c>
   18dd4:	str	r0, [sp, #28]
   18dd8:	ldr	r3, [r4, #44]	; 0x2c
   18ddc:	str	r3, [sp, #16]
   18de0:	ldr	r3, [r4, #40]	; 0x28
   18de4:	str	r3, [sp, #12]
   18de8:	str	r9, [sp, #8]
   18dec:	str	r5, [sp, #4]
   18df0:	ldr	r3, [r4]
   18df4:	str	r3, [sp]
   18df8:	ldr	r3, [sp, #36]	; 0x24
   18dfc:	ldr	r2, [sp, #32]
   18e00:	mov	r1, r8
   18e04:	bl	17294 <lchmod@@Base+0x9d4>
   18e08:	str	fp, [r7]
   18e0c:	cmp	r6, #0
   18e10:	strne	sl, [r6]
   18e14:	ldr	r0, [sp, #28]
   18e18:	add	sp, sp, #44	; 0x2c
   18e1c:	ldrd	r4, [sp]
   18e20:	ldrd	r6, [sp, #8]
   18e24:	ldrd	r8, [sp, #16]
   18e28:	ldrd	sl, [sp, #24]
   18e2c:	add	sp, sp, #32
   18e30:	pop	{pc}		; (ldr pc, [sp], #4)
   18e34:	strdeq	ip, [r2], -r4
   18e38:	str	r4, [sp, #-8]!
   18e3c:	str	lr, [sp, #4]
   18e40:	mov	r3, r2
   18e44:	mov	r2, #0
   18e48:	bl	18d3c <lchmod@@Base+0x247c>
   18e4c:	ldr	r4, [sp]
   18e50:	add	sp, sp, #4
   18e54:	pop	{pc}		; (ldr pc, [sp], #4)
   18e58:	strd	r4, [sp, #-24]!	; 0xffffffe8
   18e5c:	strd	r6, [sp, #8]
   18e60:	str	r8, [sp, #16]
   18e64:	str	lr, [sp, #20]
   18e68:	movw	r3, #49540	; 0xc184
   18e6c:	movt	r3, #2
   18e70:	ldr	r7, [r3]
   18e74:	ldr	r3, [r3, #4]
   18e78:	cmp	r3, #1
   18e7c:	ble	18ea8 <lchmod@@Base+0x25e8>
   18e80:	mov	r4, #1
   18e84:	add	r6, r7, #4
   18e88:	movw	r5, #49540	; 0xc184
   18e8c:	movt	r5, #2
   18e90:	ldr	r0, [r6, r4, lsl #3]
   18e94:	bl	1322c <__assert_fail@plt+0x1a00>
   18e98:	add	r4, r4, #1
   18e9c:	ldr	r3, [r5, #4]
   18ea0:	cmp	r3, r4
   18ea4:	bgt	18e90 <lchmod@@Base+0x25d0>
   18ea8:	ldr	r0, [r7, #4]
   18eac:	movw	r3, #49652	; 0xc1f4
   18eb0:	movt	r3, #2
   18eb4:	cmp	r0, r3
   18eb8:	beq	18edc <lchmod@@Base+0x261c>
   18ebc:	bl	1322c <__assert_fail@plt+0x1a00>
   18ec0:	movw	r3, #49540	; 0xc184
   18ec4:	movt	r3, #2
   18ec8:	mov	r2, #256	; 0x100
   18ecc:	str	r2, [r3, #8]
   18ed0:	movw	r2, #49652	; 0xc1f4
   18ed4:	movt	r2, #2
   18ed8:	str	r2, [r3, #12]
   18edc:	ldr	r3, [pc, #64]	; 18f24 <lchmod@@Base+0x2664>
   18ee0:	cmp	r7, r3
   18ee4:	beq	18f00 <lchmod@@Base+0x2640>
   18ee8:	mov	r0, r7
   18eec:	bl	1322c <__assert_fail@plt+0x1a00>
   18ef0:	movw	r3, #49540	; 0xc184
   18ef4:	movt	r3, #2
   18ef8:	add	r2, r3, #8
   18efc:	str	r2, [r3]
   18f00:	movw	r3, #49540	; 0xc184
   18f04:	movt	r3, #2
   18f08:	mov	r2, #1
   18f0c:	str	r2, [r3, #4]
   18f10:	ldrd	r4, [sp]
   18f14:	ldrd	r6, [sp, #8]
   18f18:	ldr	r8, [sp, #16]
   18f1c:	add	sp, sp, #20
   18f20:	pop	{pc}		; (ldr pc, [sp], #4)
   18f24:	andeq	ip, r2, ip, lsl #3
   18f28:	str	r4, [sp, #-8]!
   18f2c:	str	lr, [sp, #4]
   18f30:	ldr	r3, [pc, #16]	; 18f48 <lchmod@@Base+0x2688>
   18f34:	mvn	r2, #0
   18f38:	bl	1898c <lchmod@@Base+0x20cc>
   18f3c:	ldr	r4, [sp]
   18f40:	add	sp, sp, #4
   18f44:	pop	{pc}		; (ldr pc, [sp], #4)
   18f48:	strdeq	ip, [r2], -r4
   18f4c:	str	r4, [sp, #-8]!
   18f50:	str	lr, [sp, #4]
   18f54:	ldr	r3, [pc, #12]	; 18f68 <lchmod@@Base+0x26a8>
   18f58:	bl	1898c <lchmod@@Base+0x20cc>
   18f5c:	ldr	r4, [sp]
   18f60:	add	sp, sp, #4
   18f64:	pop	{pc}		; (ldr pc, [sp], #4)
   18f68:	strdeq	ip, [r2], -r4
   18f6c:	str	r4, [sp, #-8]!
   18f70:	str	lr, [sp, #4]
   18f74:	mov	r1, r0
   18f78:	mov	r0, #0
   18f7c:	bl	18f28 <lchmod@@Base+0x2668>
   18f80:	ldr	r4, [sp]
   18f84:	add	sp, sp, #4
   18f88:	pop	{pc}		; (ldr pc, [sp], #4)
   18f8c:	str	r4, [sp, #-8]!
   18f90:	str	lr, [sp, #4]
   18f94:	mov	r2, r1
   18f98:	mov	r1, r0
   18f9c:	mov	r0, #0
   18fa0:	bl	18f4c <lchmod@@Base+0x268c>
   18fa4:	ldr	r4, [sp]
   18fa8:	add	sp, sp, #4
   18fac:	pop	{pc}		; (ldr pc, [sp], #4)
   18fb0:	strd	r4, [sp, #-12]!
   18fb4:	str	lr, [sp, #8]
   18fb8:	sub	sp, sp, #52	; 0x34
   18fbc:	mov	r4, r0
   18fc0:	mov	r5, r2
   18fc4:	mov	r0, sp
   18fc8:	bl	17100 <lchmod@@Base+0x840>
   18fcc:	mov	r3, sp
   18fd0:	mvn	r2, #0
   18fd4:	mov	r1, r5
   18fd8:	mov	r0, r4
   18fdc:	bl	1898c <lchmod@@Base+0x20cc>
   18fe0:	add	sp, sp, #52	; 0x34
   18fe4:	ldrd	r4, [sp]
   18fe8:	add	sp, sp, #8
   18fec:	pop	{pc}		; (ldr pc, [sp], #4)
   18ff0:	strd	r4, [sp, #-16]!
   18ff4:	str	r6, [sp, #8]
   18ff8:	str	lr, [sp, #12]
   18ffc:	sub	sp, sp, #48	; 0x30
   19000:	mov	r4, r0
   19004:	mov	r5, r2
   19008:	mov	r6, r3
   1900c:	mov	r0, sp
   19010:	bl	17100 <lchmod@@Base+0x840>
   19014:	mov	r3, sp
   19018:	mov	r2, r6
   1901c:	mov	r1, r5
   19020:	mov	r0, r4
   19024:	bl	1898c <lchmod@@Base+0x20cc>
   19028:	add	sp, sp, #48	; 0x30
   1902c:	ldrd	r4, [sp]
   19030:	ldr	r6, [sp, #8]
   19034:	add	sp, sp, #12
   19038:	pop	{pc}		; (ldr pc, [sp], #4)
   1903c:	str	r4, [sp, #-8]!
   19040:	str	lr, [sp, #4]
   19044:	mov	r2, r1
   19048:	mov	r1, r0
   1904c:	mov	r0, #0
   19050:	bl	18fb0 <lchmod@@Base+0x26f0>
   19054:	ldr	r4, [sp]
   19058:	add	sp, sp, #4
   1905c:	pop	{pc}		; (ldr pc, [sp], #4)
   19060:	str	r4, [sp, #-8]!
   19064:	str	lr, [sp, #4]
   19068:	mov	r3, r2
   1906c:	mov	r2, r1
   19070:	mov	r1, r0
   19074:	mov	r0, #0
   19078:	bl	18ff0 <lchmod@@Base+0x2730>
   1907c:	ldr	r4, [sp]
   19080:	add	sp, sp, #4
   19084:	pop	{pc}		; (ldr pc, [sp], #4)
   19088:	strd	r4, [sp, #-12]!
   1908c:	str	lr, [sp, #8]
   19090:	sub	sp, sp, #52	; 0x34
   19094:	mov	r4, r0
   19098:	mov	r5, r1
   1909c:	mov	r1, r2
   190a0:	ldr	r0, [pc, #92]	; 19104 <lchmod@@Base+0x2844>
   190a4:	ldrd	r2, [r0]
   190a8:	strd	r2, [sp]
   190ac:	ldrd	r2, [r0, #8]
   190b0:	strd	r2, [sp, #8]
   190b4:	ldrd	r2, [r0, #16]
   190b8:	strd	r2, [sp, #16]
   190bc:	ldrd	r2, [r0, #24]
   190c0:	strd	r2, [sp, #24]
   190c4:	ldrd	r2, [r0, #32]
   190c8:	strd	r2, [sp, #32]
   190cc:	ldrd	r2, [r0, #40]	; 0x28
   190d0:	strd	r2, [sp, #40]	; 0x28
   190d4:	mov	r2, #1
   190d8:	mov	r0, sp
   190dc:	bl	18c00 <lchmod@@Base+0x2340>
   190e0:	mov	r3, sp
   190e4:	mov	r2, r5
   190e8:	mov	r1, r4
   190ec:	mov	r0, #0
   190f0:	bl	1898c <lchmod@@Base+0x20cc>
   190f4:	add	sp, sp, #52	; 0x34
   190f8:	ldrd	r4, [sp]
   190fc:	add	sp, sp, #8
   19100:	pop	{pc}		; (ldr pc, [sp], #4)
   19104:	strdeq	ip, [r2], -r4
   19108:	str	r4, [sp, #-8]!
   1910c:	str	lr, [sp, #4]
   19110:	mov	r2, r1
   19114:	mvn	r1, #0
   19118:	bl	19088 <lchmod@@Base+0x27c8>
   1911c:	ldr	r4, [sp]
   19120:	add	sp, sp, #4
   19124:	pop	{pc}		; (ldr pc, [sp], #4)
   19128:	str	r4, [sp, #-8]!
   1912c:	str	lr, [sp, #4]
   19130:	mov	r1, #58	; 0x3a
   19134:	bl	19108 <lchmod@@Base+0x2848>
   19138:	ldr	r4, [sp]
   1913c:	add	sp, sp, #4
   19140:	pop	{pc}		; (ldr pc, [sp], #4)
   19144:	str	r4, [sp, #-8]!
   19148:	str	lr, [sp, #4]
   1914c:	mov	r2, #58	; 0x3a
   19150:	bl	19088 <lchmod@@Base+0x27c8>
   19154:	ldr	r4, [sp]
   19158:	add	sp, sp, #4
   1915c:	pop	{pc}		; (ldr pc, [sp], #4)
   19160:	strd	r4, [sp, #-12]!
   19164:	str	lr, [sp, #8]
   19168:	sub	sp, sp, #100	; 0x64
   1916c:	mov	r4, r0
   19170:	mov	r5, r2
   19174:	mov	r0, sp
   19178:	bl	17100 <lchmod@@Base+0x840>
   1917c:	ldrd	r2, [sp]
   19180:	strd	r2, [sp, #48]	; 0x30
   19184:	ldrd	r2, [sp, #8]
   19188:	strd	r2, [sp, #56]	; 0x38
   1918c:	ldrd	r2, [sp, #16]
   19190:	strd	r2, [sp, #64]	; 0x40
   19194:	ldrd	r2, [sp, #24]
   19198:	strd	r2, [sp, #72]	; 0x48
   1919c:	ldrd	r2, [sp, #32]
   191a0:	strd	r2, [sp, #80]	; 0x50
   191a4:	ldrd	r2, [sp, #40]	; 0x28
   191a8:	strd	r2, [sp, #88]	; 0x58
   191ac:	mov	r2, #1
   191b0:	mov	r1, #58	; 0x3a
   191b4:	add	r0, sp, #48	; 0x30
   191b8:	bl	18c00 <lchmod@@Base+0x2340>
   191bc:	add	r3, sp, #48	; 0x30
   191c0:	mvn	r2, #0
   191c4:	mov	r1, r5
   191c8:	mov	r0, r4
   191cc:	bl	1898c <lchmod@@Base+0x20cc>
   191d0:	add	sp, sp, #100	; 0x64
   191d4:	ldrd	r4, [sp]
   191d8:	add	sp, sp, #8
   191dc:	pop	{pc}		; (ldr pc, [sp], #4)
   191e0:	strd	r4, [sp, #-20]!	; 0xffffffec
   191e4:	strd	r6, [sp, #8]
   191e8:	str	lr, [sp, #16]
   191ec:	sub	sp, sp, #52	; 0x34
   191f0:	mov	r4, r0
   191f4:	mov	r5, r3
   191f8:	ldr	r3, [pc, #92]	; 1925c <lchmod@@Base+0x299c>
   191fc:	ldrd	r6, [r3]
   19200:	strd	r6, [sp]
   19204:	ldrd	r6, [r3, #8]
   19208:	strd	r6, [sp, #8]
   1920c:	ldrd	r6, [r3, #16]
   19210:	strd	r6, [sp, #16]
   19214:	ldrd	r6, [r3, #24]
   19218:	strd	r6, [sp, #24]
   1921c:	ldrd	r6, [r3, #32]
   19220:	strd	r6, [sp, #32]
   19224:	ldrd	r6, [r3, #40]	; 0x28
   19228:	strd	r6, [sp, #40]	; 0x28
   1922c:	mov	r0, sp
   19230:	bl	18c5c <lchmod@@Base+0x239c>
   19234:	mov	r3, sp
   19238:	ldr	r2, [sp, #72]	; 0x48
   1923c:	mov	r1, r5
   19240:	mov	r0, r4
   19244:	bl	1898c <lchmod@@Base+0x20cc>
   19248:	add	sp, sp, #52	; 0x34
   1924c:	ldrd	r4, [sp]
   19250:	ldrd	r6, [sp, #8]
   19254:	add	sp, sp, #16
   19258:	pop	{pc}		; (ldr pc, [sp], #4)
   1925c:	strdeq	ip, [r2], -r4
   19260:	push	{lr}		; (str lr, [sp, #-4]!)
   19264:	sub	sp, sp, #12
   19268:	mvn	ip, #0
   1926c:	str	ip, [sp]
   19270:	bl	191e0 <lchmod@@Base+0x2920>
   19274:	add	sp, sp, #12
   19278:	pop	{pc}		; (ldr pc, [sp], #4)
   1927c:	str	r4, [sp, #-8]!
   19280:	str	lr, [sp, #4]
   19284:	mov	r3, r2
   19288:	mov	r2, r1
   1928c:	mov	r1, r0
   19290:	mov	r0, #0
   19294:	bl	19260 <lchmod@@Base+0x29a0>
   19298:	ldr	r4, [sp]
   1929c:	add	sp, sp, #4
   192a0:	pop	{pc}		; (ldr pc, [sp], #4)
   192a4:	push	{lr}		; (str lr, [sp, #-4]!)
   192a8:	sub	sp, sp, #12
   192ac:	str	r3, [sp]
   192b0:	mov	r3, r2
   192b4:	mov	r2, r1
   192b8:	mov	r1, r0
   192bc:	mov	r0, #0
   192c0:	bl	191e0 <lchmod@@Base+0x2920>
   192c4:	add	sp, sp, #12
   192c8:	pop	{pc}		; (ldr pc, [sp], #4)
   192cc:	str	r4, [sp, #-8]!
   192d0:	str	lr, [sp, #4]
   192d4:	ldr	r3, [pc, #12]	; 192e8 <lchmod@@Base+0x2a28>
   192d8:	bl	1898c <lchmod@@Base+0x20cc>
   192dc:	ldr	r4, [sp]
   192e0:	add	sp, sp, #4
   192e4:	pop	{pc}		; (ldr pc, [sp], #4)
   192e8:	muleq	r2, r4, r1
   192ec:	str	r4, [sp, #-8]!
   192f0:	str	lr, [sp, #4]
   192f4:	mov	r2, r1
   192f8:	mov	r1, r0
   192fc:	mov	r0, #0
   19300:	bl	192cc <lchmod@@Base+0x2a0c>
   19304:	ldr	r4, [sp]
   19308:	add	sp, sp, #4
   1930c:	pop	{pc}		; (ldr pc, [sp], #4)
   19310:	str	r4, [sp, #-8]!
   19314:	str	lr, [sp, #4]
   19318:	mvn	r2, #0
   1931c:	bl	192cc <lchmod@@Base+0x2a0c>
   19320:	ldr	r4, [sp]
   19324:	add	sp, sp, #4
   19328:	pop	{pc}		; (ldr pc, [sp], #4)
   1932c:	str	r4, [sp, #-8]!
   19330:	str	lr, [sp, #4]
   19334:	mov	r1, r0
   19338:	mov	r0, #0
   1933c:	bl	19310 <lchmod@@Base+0x2a50>
   19340:	ldr	r4, [sp]
   19344:	add	sp, sp, #4
   19348:	pop	{pc}		; (ldr pc, [sp], #4)
   1934c:	strd	r4, [sp, #-16]!
   19350:	str	r6, [sp, #8]
   19354:	str	lr, [sp, #12]
   19358:	mov	r5, r1
   1935c:	ldr	r4, [r0], #8
   19360:	cmp	r4, r0
   19364:	beq	19388 <lchmod@@Base+0x2ac8>
   19368:	mov	r0, r4
   1936c:	bl	1a1fc <lchmod@@Base+0x393c>
   19370:	cmp	r0, #0
   19374:	moveq	r0, r4
   19378:	ldrd	r4, [sp]
   1937c:	ldr	r6, [sp, #8]
   19380:	add	sp, sp, #12
   19384:	pop	{pc}		; (ldr pc, [sp], #4)
   19388:	mov	r0, r1
   1938c:	bl	1a1c0 <lchmod@@Base+0x3900>
   19390:	cmp	r0, #0
   19394:	beq	19378 <lchmod@@Base+0x2ab8>
   19398:	mov	r2, r5
   1939c:	mov	r1, r4
   193a0:	bl	114b4 <memcpy@plt>
   193a4:	b	19378 <lchmod@@Base+0x2ab8>
   193a8:	strd	r4, [sp, #-16]!
   193ac:	str	r6, [sp, #8]
   193b0:	str	lr, [sp, #12]
   193b4:	mov	r4, r0
   193b8:	ldr	r5, [r0, #4]
   193bc:	lsl	r5, r5, #1
   193c0:	mov	r6, r0
   193c4:	ldr	r0, [r6], #8
   193c8:	cmp	r0, r6
   193cc:	beq	193d4 <lchmod@@Base+0x2b14>
   193d0:	bl	1322c <__assert_fail@plt+0x1a00>
   193d4:	ldr	r3, [r4, #4]
   193d8:	cmp	r3, r5
   193dc:	bhi	1940c <lchmod@@Base+0x2b4c>
   193e0:	mov	r0, r5
   193e4:	bl	1a1c0 <lchmod@@Base+0x3900>
   193e8:	cmp	r0, #0
   193ec:	strne	r0, [r4]
   193f0:	strne	r5, [r4, #4]
   193f4:	movne	r0, #1
   193f8:	beq	19418 <lchmod@@Base+0x2b58>
   193fc:	ldrd	r4, [sp]
   19400:	ldr	r6, [sp, #8]
   19404:	add	sp, sp, #12
   19408:	pop	{pc}		; (ldr pc, [sp], #4)
   1940c:	bl	11688 <__errno_location@plt>
   19410:	mov	r3, #12
   19414:	str	r3, [r0]
   19418:	str	r6, [r4]
   1941c:	mov	r3, #1024	; 0x400
   19420:	str	r3, [r4, #4]
   19424:	mov	r0, #0
   19428:	b	193fc <lchmod@@Base+0x2b3c>
   1942c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   19430:	strd	r6, [sp, #8]
   19434:	str	r8, [sp, #16]
   19438:	str	lr, [sp, #20]
   1943c:	mov	r4, r0
   19440:	ldr	r3, [r0, #4]
   19444:	lsl	r6, r3, #1
   19448:	mov	r5, r0
   1944c:	ldr	r0, [r5], #8
   19450:	cmp	r0, r5
   19454:	beq	19490 <lchmod@@Base+0x2bd0>
   19458:	cmp	r3, r6
   1945c:	bhi	194b8 <lchmod@@Base+0x2bf8>
   19460:	mov	r1, r6
   19464:	bl	1a1fc <lchmod@@Base+0x393c>
   19468:	subs	r7, r0, #0
   1946c:	beq	194c4 <lchmod@@Base+0x2c04>
   19470:	str	r7, [r4]
   19474:	str	r6, [r4, #4]
   19478:	mov	r0, #1
   1947c:	ldrd	r4, [sp]
   19480:	ldrd	r6, [sp, #8]
   19484:	ldr	r8, [sp, #16]
   19488:	add	sp, sp, #20
   1948c:	pop	{pc}		; (ldr pc, [sp], #4)
   19490:	mov	r0, r6
   19494:	bl	1a1c0 <lchmod@@Base+0x3900>
   19498:	subs	r7, r0, #0
   1949c:	moveq	r0, #0
   194a0:	beq	1947c <lchmod@@Base+0x2bbc>
   194a4:	ldr	r2, [r4, #4]
   194a8:	mov	r1, r5
   194ac:	mov	r0, r7
   194b0:	bl	114b4 <memcpy@plt>
   194b4:	b	19470 <lchmod@@Base+0x2bb0>
   194b8:	bl	11688 <__errno_location@plt>
   194bc:	mov	r3, #12
   194c0:	str	r3, [r0]
   194c4:	ldr	r0, [r4]
   194c8:	bl	1322c <__assert_fail@plt+0x1a00>
   194cc:	str	r5, [r4]
   194d0:	mov	r3, #1024	; 0x400
   194d4:	str	r3, [r4, #4]
   194d8:	mov	r0, #0
   194dc:	b	1947c <lchmod@@Base+0x2bbc>
   194e0:	strd	r4, [sp, #-16]!
   194e4:	str	r6, [sp, #8]
   194e8:	str	lr, [sp, #12]
   194ec:	subs	r4, r0, #0
   194f0:	beq	19514 <lchmod@@Base+0x2c54>
   194f4:	mov	r5, r1
   194f8:	cmp	r4, #10
   194fc:	beq	19528 <lchmod@@Base+0x2c68>
   19500:	mov	r0, r4
   19504:	ldrd	r4, [sp]
   19508:	ldr	r6, [sp, #8]
   1950c:	add	sp, sp, #12
   19510:	pop	{pc}		; (ldr pc, [sp], #4)
   19514:	bl	11688 <__errno_location@plt>
   19518:	mov	r3, #95	; 0x5f
   1951c:	str	r3, [r0]
   19520:	mvn	r4, #0
   19524:	b	19500 <lchmod@@Base+0x2c40>
   19528:	ldr	r6, [r1]
   1952c:	movw	r1, #46352	; 0xb510
   19530:	movt	r1, #1
   19534:	mov	r0, r6
   19538:	bl	11454 <strcmp@plt>
   1953c:	cmp	r0, #0
   19540:	bne	19500 <lchmod@@Base+0x2c40>
   19544:	mov	r0, r6
   19548:	bl	11778 <freecon@plt>
   1954c:	mov	r3, #0
   19550:	str	r3, [r5]
   19554:	bl	11688 <__errno_location@plt>
   19558:	mov	r3, #61	; 0x3d
   1955c:	str	r3, [r0]
   19560:	mvn	r4, #0
   19564:	b	19500 <lchmod@@Base+0x2c40>
   19568:	str	r4, [sp, #-8]!
   1956c:	str	lr, [sp, #4]
   19570:	mov	r4, r1
   19574:	bl	1164c <getfilecon@plt>
   19578:	mov	r1, r4
   1957c:	bl	194e0 <lchmod@@Base+0x2c20>
   19580:	ldr	r4, [sp]
   19584:	add	sp, sp, #4
   19588:	pop	{pc}		; (ldr pc, [sp], #4)
   1958c:	str	r4, [sp, #-8]!
   19590:	str	lr, [sp, #4]
   19594:	mov	r4, r1
   19598:	bl	115c8 <lgetfilecon@plt>
   1959c:	mov	r1, r4
   195a0:	bl	194e0 <lchmod@@Base+0x2c20>
   195a4:	ldr	r4, [sp]
   195a8:	add	sp, sp, #4
   195ac:	pop	{pc}		; (ldr pc, [sp], #4)
   195b0:	str	r4, [sp, #-8]!
   195b4:	str	lr, [sp, #4]
   195b8:	mov	r4, r1
   195bc:	bl	11514 <fgetfilecon@plt>
   195c0:	mov	r1, r4
   195c4:	bl	194e0 <lchmod@@Base+0x2c20>
   195c8:	ldr	r4, [sp]
   195cc:	add	sp, sp, #4
   195d0:	pop	{pc}		; (ldr pc, [sp], #4)
   195d4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   195d8:	strd	r6, [sp, #8]
   195dc:	str	r8, [sp, #16]
   195e0:	str	lr, [sp, #20]
   195e4:	mov	r4, r0
   195e8:	cmp	r0, #2
   195ec:	bls	19608 <lchmod@@Base+0x2d48>
   195f0:	mov	r0, r4
   195f4:	ldrd	r4, [sp]
   195f8:	ldrd	r6, [sp, #8]
   195fc:	ldr	r8, [sp, #16]
   19600:	add	sp, sp, #20
   19604:	pop	{pc}		; (ldr pc, [sp], #4)
   19608:	bl	1aa6c <lchmod@@Base+0x41ac>
   1960c:	mov	r6, r0
   19610:	bl	11688 <__errno_location@plt>
   19614:	mov	r5, r0
   19618:	ldr	r7, [r0]
   1961c:	mov	r0, r4
   19620:	bl	117e4 <close@plt>
   19624:	str	r7, [r5]
   19628:	mov	r4, r6
   1962c:	b	195f0 <lchmod@@Base+0x2d30>
   19630:	strd	r4, [sp, #-16]!
   19634:	str	r6, [sp, #8]
   19638:	str	lr, [sp, #12]
   1963c:	sub	sp, sp, #32
   19640:	mov	r4, r0
   19644:	ldr	r5, [sp, #48]	; 0x30
   19648:	ldr	r6, [sp, #52]	; 0x34
   1964c:	cmp	r1, #0
   19650:	beq	1971c <lchmod@@Base+0x2e5c>
   19654:	str	r3, [sp, #4]
   19658:	str	r2, [sp]
   1965c:	mov	r3, r1
   19660:	movw	r2, #46364	; 0xb51c
   19664:	movt	r2, #1
   19668:	mov	r1, #1
   1966c:	bl	116d0 <__fprintf_chk@plt>
   19670:	mov	r2, #5
   19674:	movw	r1, #46384	; 0xb530
   19678:	movt	r1, #1
   1967c:	mov	r0, #0
   19680:	bl	114f0 <dcgettext@plt>
   19684:	movw	r3, #2022	; 0x7e6
   19688:	str	r3, [sp]
   1968c:	mov	r3, r0
   19690:	movw	r2, #47112	; 0xb808
   19694:	movt	r2, #1
   19698:	mov	r1, #1
   1969c:	mov	r0, r4
   196a0:	bl	116d0 <__fprintf_chk@plt>
   196a4:	mov	r1, r4
   196a8:	mov	r0, #10
   196ac:	bl	114e4 <fputc_unlocked@plt>
   196b0:	mov	r2, #5
   196b4:	movw	r1, #46388	; 0xb534
   196b8:	movt	r1, #1
   196bc:	mov	r0, #0
   196c0:	bl	114f0 <dcgettext@plt>
   196c4:	movw	r3, #46560	; 0xb5e0
   196c8:	movt	r3, #1
   196cc:	mov	r2, r0
   196d0:	mov	r1, #1
   196d4:	mov	r0, r4
   196d8:	bl	116d0 <__fprintf_chk@plt>
   196dc:	mov	r1, r4
   196e0:	mov	r0, #10
   196e4:	bl	114e4 <fputc_unlocked@plt>
   196e8:	cmp	r6, #9
   196ec:	ldrls	pc, [pc, r6, lsl #2]
   196f0:	b	199f4 <lchmod@@Base+0x3134>
   196f4:	andeq	r9, r1, r0, ror #14
   196f8:	andeq	r9, r1, r8, lsr r7
   196fc:	andeq	r9, r1, r4, ror r7
   19700:	andeq	r9, r1, r8, lsr #15
   19704:	andeq	r9, r1, r4, ror #15
   19708:	andeq	r9, r1, r8, lsr #16
   1970c:	andeq	r9, r1, r4, ror r8
   19710:	andeq	r9, r1, r8, asr #17
   19714:	andeq	r9, r1, r4, lsr #18
   19718:	andeq	r9, r1, r8, lsl #19
   1971c:	str	r3, [sp]
   19720:	mov	r3, r2
   19724:	movw	r2, #46376	; 0xb528
   19728:	movt	r2, #1
   1972c:	mov	r1, #1
   19730:	bl	116d0 <__fprintf_chk@plt>
   19734:	b	19670 <lchmod@@Base+0x2db0>
   19738:	mov	r2, #5
   1973c:	movw	r1, #46596	; 0xb604
   19740:	movt	r1, #1
   19744:	mov	r0, #0
   19748:	bl	114f0 <dcgettext@plt>
   1974c:	ldr	r3, [r5]
   19750:	mov	r2, r0
   19754:	mov	r1, #1
   19758:	mov	r0, r4
   1975c:	bl	116d0 <__fprintf_chk@plt>
   19760:	add	sp, sp, #32
   19764:	ldrd	r4, [sp]
   19768:	ldr	r6, [sp, #8]
   1976c:	add	sp, sp, #12
   19770:	pop	{pc}		; (ldr pc, [sp], #4)
   19774:	mov	r2, #5
   19778:	movw	r1, #46612	; 0xb614
   1977c:	movt	r1, #1
   19780:	mov	r0, #0
   19784:	bl	114f0 <dcgettext@plt>
   19788:	ldr	r3, [r5, #4]
   1978c:	str	r3, [sp]
   19790:	ldr	r3, [r5]
   19794:	mov	r2, r0
   19798:	mov	r1, #1
   1979c:	mov	r0, r4
   197a0:	bl	116d0 <__fprintf_chk@plt>
   197a4:	b	19760 <lchmod@@Base+0x2ea0>
   197a8:	mov	r2, #5
   197ac:	movw	r1, #46636	; 0xb62c
   197b0:	movt	r1, #1
   197b4:	mov	r0, #0
   197b8:	bl	114f0 <dcgettext@plt>
   197bc:	ldr	r3, [r5, #8]
   197c0:	str	r3, [sp, #4]
   197c4:	ldr	r3, [r5, #4]
   197c8:	str	r3, [sp]
   197cc:	ldr	r3, [r5]
   197d0:	mov	r2, r0
   197d4:	mov	r1, #1
   197d8:	mov	r0, r4
   197dc:	bl	116d0 <__fprintf_chk@plt>
   197e0:	b	19760 <lchmod@@Base+0x2ea0>
   197e4:	mov	r2, #5
   197e8:	movw	r1, #46664	; 0xb648
   197ec:	movt	r1, #1
   197f0:	mov	r0, #0
   197f4:	bl	114f0 <dcgettext@plt>
   197f8:	ldr	r3, [r5, #12]
   197fc:	str	r3, [sp, #8]
   19800:	ldr	r3, [r5, #8]
   19804:	str	r3, [sp, #4]
   19808:	ldr	r3, [r5, #4]
   1980c:	str	r3, [sp]
   19810:	ldr	r3, [r5]
   19814:	mov	r2, r0
   19818:	mov	r1, #1
   1981c:	mov	r0, r4
   19820:	bl	116d0 <__fprintf_chk@plt>
   19824:	b	19760 <lchmod@@Base+0x2ea0>
   19828:	mov	r2, #5
   1982c:	movw	r1, #46696	; 0xb668
   19830:	movt	r1, #1
   19834:	mov	r0, #0
   19838:	bl	114f0 <dcgettext@plt>
   1983c:	ldr	r3, [r5, #16]
   19840:	str	r3, [sp, #12]
   19844:	ldr	r3, [r5, #12]
   19848:	str	r3, [sp, #8]
   1984c:	ldr	r3, [r5, #8]
   19850:	str	r3, [sp, #4]
   19854:	ldr	r3, [r5, #4]
   19858:	str	r3, [sp]
   1985c:	ldr	r3, [r5]
   19860:	mov	r2, r0
   19864:	mov	r1, #1
   19868:	mov	r0, r4
   1986c:	bl	116d0 <__fprintf_chk@plt>
   19870:	b	19760 <lchmod@@Base+0x2ea0>
   19874:	mov	r2, #5
   19878:	movw	r1, #46732	; 0xb68c
   1987c:	movt	r1, #1
   19880:	mov	r0, #0
   19884:	bl	114f0 <dcgettext@plt>
   19888:	ldr	r3, [r5, #20]
   1988c:	str	r3, [sp, #16]
   19890:	ldr	r3, [r5, #16]
   19894:	str	r3, [sp, #12]
   19898:	ldr	r3, [r5, #12]
   1989c:	str	r3, [sp, #8]
   198a0:	ldr	r3, [r5, #8]
   198a4:	str	r3, [sp, #4]
   198a8:	ldr	r3, [r5, #4]
   198ac:	str	r3, [sp]
   198b0:	ldr	r3, [r5]
   198b4:	mov	r2, r0
   198b8:	mov	r1, #1
   198bc:	mov	r0, r4
   198c0:	bl	116d0 <__fprintf_chk@plt>
   198c4:	b	19760 <lchmod@@Base+0x2ea0>
   198c8:	mov	r2, #5
   198cc:	movw	r1, #46772	; 0xb6b4
   198d0:	movt	r1, #1
   198d4:	mov	r0, #0
   198d8:	bl	114f0 <dcgettext@plt>
   198dc:	ldr	r3, [r5, #24]
   198e0:	str	r3, [sp, #20]
   198e4:	ldr	r3, [r5, #20]
   198e8:	str	r3, [sp, #16]
   198ec:	ldr	r3, [r5, #16]
   198f0:	str	r3, [sp, #12]
   198f4:	ldr	r3, [r5, #12]
   198f8:	str	r3, [sp, #8]
   198fc:	ldr	r3, [r5, #8]
   19900:	str	r3, [sp, #4]
   19904:	ldr	r3, [r5, #4]
   19908:	str	r3, [sp]
   1990c:	ldr	r3, [r5]
   19910:	mov	r2, r0
   19914:	mov	r1, #1
   19918:	mov	r0, r4
   1991c:	bl	116d0 <__fprintf_chk@plt>
   19920:	b	19760 <lchmod@@Base+0x2ea0>
   19924:	mov	r2, #5
   19928:	movw	r1, #46816	; 0xb6e0
   1992c:	movt	r1, #1
   19930:	mov	r0, #0
   19934:	bl	114f0 <dcgettext@plt>
   19938:	ldr	r3, [r5, #28]
   1993c:	str	r3, [sp, #24]
   19940:	ldr	r3, [r5, #24]
   19944:	str	r3, [sp, #20]
   19948:	ldr	r3, [r5, #20]
   1994c:	str	r3, [sp, #16]
   19950:	ldr	r3, [r5, #16]
   19954:	str	r3, [sp, #12]
   19958:	ldr	r3, [r5, #12]
   1995c:	str	r3, [sp, #8]
   19960:	ldr	r3, [r5, #8]
   19964:	str	r3, [sp, #4]
   19968:	ldr	r3, [r5, #4]
   1996c:	str	r3, [sp]
   19970:	ldr	r3, [r5]
   19974:	mov	r2, r0
   19978:	mov	r1, #1
   1997c:	mov	r0, r4
   19980:	bl	116d0 <__fprintf_chk@plt>
   19984:	b	19760 <lchmod@@Base+0x2ea0>
   19988:	mov	r2, #5
   1998c:	movw	r1, #46864	; 0xb710
   19990:	movt	r1, #1
   19994:	mov	r0, #0
   19998:	bl	114f0 <dcgettext@plt>
   1999c:	ldr	r3, [r5, #32]
   199a0:	str	r3, [sp, #28]
   199a4:	ldr	r3, [r5, #28]
   199a8:	str	r3, [sp, #24]
   199ac:	ldr	r3, [r5, #24]
   199b0:	str	r3, [sp, #20]
   199b4:	ldr	r3, [r5, #20]
   199b8:	str	r3, [sp, #16]
   199bc:	ldr	r3, [r5, #16]
   199c0:	str	r3, [sp, #12]
   199c4:	ldr	r3, [r5, #12]
   199c8:	str	r3, [sp, #8]
   199cc:	ldr	r3, [r5, #8]
   199d0:	str	r3, [sp, #4]
   199d4:	ldr	r3, [r5, #4]
   199d8:	str	r3, [sp]
   199dc:	ldr	r3, [r5]
   199e0:	mov	r2, r0
   199e4:	mov	r1, #1
   199e8:	mov	r0, r4
   199ec:	bl	116d0 <__fprintf_chk@plt>
   199f0:	b	19760 <lchmod@@Base+0x2ea0>
   199f4:	mov	r2, #5
   199f8:	movw	r1, #46916	; 0xb744
   199fc:	movt	r1, #1
   19a00:	mov	r0, #0
   19a04:	bl	114f0 <dcgettext@plt>
   19a08:	ldr	r3, [r5, #32]
   19a0c:	str	r3, [sp, #28]
   19a10:	ldr	r3, [r5, #28]
   19a14:	str	r3, [sp, #24]
   19a18:	ldr	r3, [r5, #24]
   19a1c:	str	r3, [sp, #20]
   19a20:	ldr	r3, [r5, #20]
   19a24:	str	r3, [sp, #16]
   19a28:	ldr	r3, [r5, #16]
   19a2c:	str	r3, [sp, #12]
   19a30:	ldr	r3, [r5, #12]
   19a34:	str	r3, [sp, #8]
   19a38:	ldr	r3, [r5, #8]
   19a3c:	str	r3, [sp, #4]
   19a40:	ldr	r3, [r5, #4]
   19a44:	str	r3, [sp]
   19a48:	ldr	r3, [r5]
   19a4c:	mov	r2, r0
   19a50:	mov	r1, #1
   19a54:	mov	r0, r4
   19a58:	bl	116d0 <__fprintf_chk@plt>
   19a5c:	b	19760 <lchmod@@Base+0x2ea0>
   19a60:	strd	r4, [sp, #-12]!
   19a64:	str	lr, [sp, #8]
   19a68:	sub	sp, sp, #12
   19a6c:	ldr	r5, [sp, #24]
   19a70:	ldr	ip, [r5]
   19a74:	cmp	ip, #0
   19a78:	beq	19ab0 <lchmod@@Base+0x31f0>
   19a7c:	mov	lr, r5
   19a80:	mov	ip, #0
   19a84:	add	ip, ip, #1
   19a88:	ldr	r4, [lr, #4]!
   19a8c:	cmp	r4, #0
   19a90:	bne	19a84 <lchmod@@Base+0x31c4>
   19a94:	str	ip, [sp, #4]
   19a98:	str	r5, [sp]
   19a9c:	bl	19630 <lchmod@@Base+0x2d70>
   19aa0:	add	sp, sp, #12
   19aa4:	ldrd	r4, [sp]
   19aa8:	add	sp, sp, #8
   19aac:	pop	{pc}		; (ldr pc, [sp], #4)
   19ab0:	mov	ip, #0
   19ab4:	b	19a94 <lchmod@@Base+0x31d4>
   19ab8:	strd	r4, [sp, #-12]!
   19abc:	str	lr, [sp, #8]
   19ac0:	sub	sp, sp, #52	; 0x34
   19ac4:	ldr	r5, [sp, #64]	; 0x40
   19ac8:	add	r4, sp, #8
   19acc:	mov	ip, #0
   19ad0:	ldr	lr, [r5], #4
   19ad4:	str	lr, [r4], #4
   19ad8:	cmp	lr, #0
   19adc:	beq	19aec <lchmod@@Base+0x322c>
   19ae0:	add	ip, ip, #1
   19ae4:	cmp	ip, #10
   19ae8:	bne	19ad0 <lchmod@@Base+0x3210>
   19aec:	str	ip, [sp, #4]
   19af0:	add	ip, sp, #8
   19af4:	str	ip, [sp]
   19af8:	bl	19630 <lchmod@@Base+0x2d70>
   19afc:	add	sp, sp, #52	; 0x34
   19b00:	ldrd	r4, [sp]
   19b04:	add	sp, sp, #8
   19b08:	pop	{pc}		; (ldr pc, [sp], #4)
   19b0c:	push	{r3}		; (str r3, [sp, #-4]!)
   19b10:	push	{lr}		; (str lr, [sp, #-4]!)
   19b14:	sub	sp, sp, #16
   19b18:	add	r3, sp, #24
   19b1c:	str	r3, [sp, #12]
   19b20:	str	r3, [sp]
   19b24:	ldr	r3, [sp, #20]
   19b28:	bl	19ab8 <lchmod@@Base+0x31f8>
   19b2c:	add	sp, sp, #16
   19b30:	pop	{lr}		; (ldr lr, [sp], #4)
   19b34:	add	sp, sp, #4
   19b38:	bx	lr
   19b3c:	str	r4, [sp, #-8]!
   19b40:	str	lr, [sp, #4]
   19b44:	movw	r3, #49628	; 0xc1dc
   19b48:	movt	r3, #2
   19b4c:	ldr	r1, [r3]
   19b50:	mov	r0, #10
   19b54:	bl	114e4 <fputc_unlocked@plt>
   19b58:	mov	r2, #5
   19b5c:	movw	r1, #46976	; 0xb780
   19b60:	movt	r1, #1
   19b64:	mov	r0, #0
   19b68:	bl	114f0 <dcgettext@plt>
   19b6c:	movw	r2, #46996	; 0xb794
   19b70:	movt	r2, #1
   19b74:	mov	r1, r0
   19b78:	mov	r0, #1
   19b7c:	bl	116b8 <__printf_chk@plt>
   19b80:	mov	r2, #5
   19b84:	movw	r1, #47020	; 0xb7ac
   19b88:	movt	r1, #1
   19b8c:	mov	r0, #0
   19b90:	bl	114f0 <dcgettext@plt>
   19b94:	movw	r3, #45208	; 0xb098
   19b98:	movt	r3, #1
   19b9c:	movw	r2, #45248	; 0xb0c0
   19ba0:	movt	r2, #1
   19ba4:	mov	r1, r0
   19ba8:	mov	r0, #1
   19bac:	bl	116b8 <__printf_chk@plt>
   19bb0:	mov	r2, #5
   19bb4:	movw	r1, #47040	; 0xb7c0
   19bb8:	movt	r1, #1
   19bbc:	mov	r0, #0
   19bc0:	bl	114f0 <dcgettext@plt>
   19bc4:	movw	r2, #47080	; 0xb7e8
   19bc8:	movt	r2, #1
   19bcc:	mov	r1, r0
   19bd0:	mov	r0, #1
   19bd4:	bl	116b8 <__printf_chk@plt>
   19bd8:	ldr	r4, [sp]
   19bdc:	add	sp, sp, #4
   19be0:	pop	{pc}		; (ldr pc, [sp], #4)
   19be4:	str	r4, [sp, #-8]!
   19be8:	str	lr, [sp, #4]
   19bec:	bl	1a1c0 <lchmod@@Base+0x3900>
   19bf0:	cmp	r0, #0
   19bf4:	beq	19c04 <lchmod@@Base+0x3344>
   19bf8:	ldr	r4, [sp]
   19bfc:	add	sp, sp, #4
   19c00:	pop	{pc}		; (ldr pc, [sp], #4)
   19c04:	bl	1a078 <lchmod@@Base+0x37b8>
   19c08:	str	r4, [sp, #-8]!
   19c0c:	str	lr, [sp, #4]
   19c10:	bl	1a1c0 <lchmod@@Base+0x3900>
   19c14:	cmp	r0, #0
   19c18:	beq	19c28 <lchmod@@Base+0x3368>
   19c1c:	ldr	r4, [sp]
   19c20:	add	sp, sp, #4
   19c24:	pop	{pc}		; (ldr pc, [sp], #4)
   19c28:	bl	1a078 <lchmod@@Base+0x37b8>
   19c2c:	str	r4, [sp, #-8]!
   19c30:	str	lr, [sp, #4]
   19c34:	bl	19be4 <lchmod@@Base+0x3324>
   19c38:	ldr	r4, [sp]
   19c3c:	add	sp, sp, #4
   19c40:	pop	{pc}		; (ldr pc, [sp], #4)
   19c44:	strd	r4, [sp, #-16]!
   19c48:	str	r6, [sp, #8]
   19c4c:	str	lr, [sp, #12]
   19c50:	mov	r5, r0
   19c54:	mov	r4, r1
   19c58:	bl	1a1fc <lchmod@@Base+0x393c>
   19c5c:	cmp	r0, #0
   19c60:	beq	19c74 <lchmod@@Base+0x33b4>
   19c64:	ldrd	r4, [sp]
   19c68:	ldr	r6, [sp, #8]
   19c6c:	add	sp, sp, #12
   19c70:	pop	{pc}		; (ldr pc, [sp], #4)
   19c74:	adds	r4, r4, #0
   19c78:	movne	r4, #1
   19c7c:	cmp	r5, #0
   19c80:	moveq	r4, #1
   19c84:	cmp	r4, #0
   19c88:	beq	19c64 <lchmod@@Base+0x33a4>
   19c8c:	bl	1a078 <lchmod@@Base+0x37b8>
   19c90:	str	r4, [sp, #-8]!
   19c94:	str	lr, [sp, #4]
   19c98:	cmp	r1, #0
   19c9c:	orreq	r1, r1, #1
   19ca0:	bl	1a1fc <lchmod@@Base+0x393c>
   19ca4:	cmp	r0, #0
   19ca8:	beq	19cb8 <lchmod@@Base+0x33f8>
   19cac:	ldr	r4, [sp]
   19cb0:	add	sp, sp, #4
   19cb4:	pop	{pc}		; (ldr pc, [sp], #4)
   19cb8:	bl	1a078 <lchmod@@Base+0x37b8>
   19cbc:	strd	r4, [sp, #-16]!
   19cc0:	str	r6, [sp, #8]
   19cc4:	str	lr, [sp, #12]
   19cc8:	mov	r4, r0
   19ccc:	mov	r6, r1
   19cd0:	mov	r5, r2
   19cd4:	bl	1aa30 <lchmod@@Base+0x4170>
   19cd8:	cmp	r0, #0
   19cdc:	beq	19cf0 <lchmod@@Base+0x3430>
   19ce0:	ldrd	r4, [sp]
   19ce4:	ldr	r6, [sp, #8]
   19ce8:	add	sp, sp, #12
   19cec:	pop	{pc}		; (ldr pc, [sp], #4)
   19cf0:	cmp	r4, #0
   19cf4:	beq	19d04 <lchmod@@Base+0x3444>
   19cf8:	cmp	r6, #0
   19cfc:	cmpne	r5, #0
   19d00:	beq	19ce0 <lchmod@@Base+0x3420>
   19d04:	bl	1a078 <lchmod@@Base+0x37b8>
   19d08:	str	r4, [sp, #-8]!
   19d0c:	str	lr, [sp, #4]
   19d10:	bl	19cbc <lchmod@@Base+0x33fc>
   19d14:	ldr	r4, [sp]
   19d18:	add	sp, sp, #4
   19d1c:	pop	{pc}		; (ldr pc, [sp], #4)
   19d20:	str	r4, [sp, #-8]!
   19d24:	str	lr, [sp, #4]
   19d28:	mov	ip, r1
   19d2c:	mov	r3, r2
   19d30:	cmp	r2, #0
   19d34:	cmpne	r1, #0
   19d38:	moveq	r3, #1
   19d3c:	moveq	ip, r3
   19d40:	mov	r2, r3
   19d44:	mov	r1, ip
   19d48:	bl	1aa30 <lchmod@@Base+0x4170>
   19d4c:	cmp	r0, #0
   19d50:	beq	19d60 <lchmod@@Base+0x34a0>
   19d54:	ldr	r4, [sp]
   19d58:	add	sp, sp, #4
   19d5c:	pop	{pc}		; (ldr pc, [sp], #4)
   19d60:	bl	1a078 <lchmod@@Base+0x37b8>
   19d64:	str	r4, [sp, #-8]!
   19d68:	str	lr, [sp, #4]
   19d6c:	mov	r2, r1
   19d70:	mov	r1, r0
   19d74:	mov	r0, #0
   19d78:	bl	19cbc <lchmod@@Base+0x33fc>
   19d7c:	ldr	r4, [sp]
   19d80:	add	sp, sp, #4
   19d84:	pop	{pc}		; (ldr pc, [sp], #4)
   19d88:	str	r4, [sp, #-8]!
   19d8c:	str	lr, [sp, #4]
   19d90:	mov	r2, r1
   19d94:	mov	r1, r0
   19d98:	mov	r0, #0
   19d9c:	bl	19d20 <lchmod@@Base+0x3460>
   19da0:	ldr	r4, [sp]
   19da4:	add	sp, sp, #4
   19da8:	pop	{pc}		; (ldr pc, [sp], #4)
   19dac:	strd	r4, [sp, #-16]!
   19db0:	str	r6, [sp, #8]
   19db4:	str	lr, [sp, #12]
   19db8:	mov	r5, r1
   19dbc:	ldr	r4, [r1]
   19dc0:	cmp	r0, #0
   19dc4:	beq	19df4 <lchmod@@Base+0x3534>
   19dc8:	lsr	r3, r4, #1
   19dcc:	add	r3, r3, #1
   19dd0:	adds	r4, r4, r3
   19dd4:	bcs	19e10 <lchmod@@Base+0x3550>
   19dd8:	mov	r1, r4
   19ddc:	bl	19cbc <lchmod@@Base+0x33fc>
   19de0:	str	r4, [r5]
   19de4:	ldrd	r4, [sp]
   19de8:	ldr	r6, [sp, #8]
   19dec:	add	sp, sp, #12
   19df0:	pop	{pc}		; (ldr pc, [sp], #4)
   19df4:	cmp	r4, #0
   19df8:	bne	19dd8 <lchmod@@Base+0x3518>
   19dfc:	mov	r4, #64	; 0x40
   19e00:	udiv	r4, r4, r2
   19e04:	cmp	r2, #64	; 0x40
   19e08:	addhi	r4, r4, #1
   19e0c:	b	19dd8 <lchmod@@Base+0x3518>
   19e10:	bl	1a078 <lchmod@@Base+0x37b8>
   19e14:	str	r4, [sp, #-8]!
   19e18:	str	lr, [sp, #4]
   19e1c:	mov	r2, #1
   19e20:	bl	19dac <lchmod@@Base+0x34ec>
   19e24:	ldr	r4, [sp]
   19e28:	add	sp, sp, #4
   19e2c:	pop	{pc}		; (ldr pc, [sp], #4)
   19e30:	strd	r4, [sp, #-24]!	; 0xffffffe8
   19e34:	strd	r6, [sp, #8]
   19e38:	str	r8, [sp, #16]
   19e3c:	str	lr, [sp, #20]
   19e40:	mov	r5, r1
   19e44:	ldr	lr, [sp, #24]
   19e48:	ldr	ip, [r1]
   19e4c:	asr	r4, ip, #1
   19e50:	adds	r4, ip, r4
   19e54:	movvs	r1, #1
   19e58:	movvc	r1, #0
   19e5c:	cmp	r1, #0
   19e60:	mvnne	r4, #-2147483648	; 0x80000000
   19e64:	mvn	r8, r3
   19e68:	lsr	r8, r8, #31
   19e6c:	cmp	r3, r4
   19e70:	movge	r1, #0
   19e74:	andlt	r1, r8, #1
   19e78:	cmp	r1, #0
   19e7c:	movne	r4, r3
   19e80:	smull	r6, r7, r4, lr
   19e84:	asr	r1, r6, #31
   19e88:	cmp	r1, r7
   19e8c:	bne	19ea4 <lchmod@@Base+0x35e4>
   19e90:	mov	r1, r6
   19e94:	cmp	r6, #63	; 0x3f
   19e98:	movle	r1, #64	; 0x40
   19e9c:	ble	19ea8 <lchmod@@Base+0x35e8>
   19ea0:	b	19eb4 <lchmod@@Base+0x35f4>
   19ea4:	mvn	r1, #-2147483648	; 0x80000000
   19ea8:	sdiv	r4, r1, lr
   19eac:	mls	r6, lr, r4, r1
   19eb0:	sub	r1, r1, r6
   19eb4:	cmp	r0, #0
   19eb8:	moveq	r6, #0
   19ebc:	streq	r6, [r5]
   19ec0:	sub	r6, r4, ip
   19ec4:	cmp	r6, r2
   19ec8:	bge	19f00 <lchmod@@Base+0x3640>
   19ecc:	adds	r2, ip, r2
   19ed0:	mov	r4, r2
   19ed4:	bvs	19f1c <lchmod@@Base+0x365c>
   19ed8:	cmp	r2, r3
   19edc:	movle	r3, #0
   19ee0:	andgt	r3, r8, #1
   19ee4:	cmp	r3, #0
   19ee8:	bne	19f1c <lchmod@@Base+0x365c>
   19eec:	smull	r2, r3, r2, lr
   19ef0:	asr	ip, r2, #31
   19ef4:	mov	r1, r2
   19ef8:	cmp	ip, r3
   19efc:	bne	19f1c <lchmod@@Base+0x365c>
   19f00:	bl	19c44 <lchmod@@Base+0x3384>
   19f04:	str	r4, [r5]
   19f08:	ldrd	r4, [sp]
   19f0c:	ldrd	r6, [sp, #8]
   19f10:	ldr	r8, [sp, #16]
   19f14:	add	sp, sp, #20
   19f18:	pop	{pc}		; (ldr pc, [sp], #4)
   19f1c:	bl	1a078 <lchmod@@Base+0x37b8>
   19f20:	str	r4, [sp, #-8]!
   19f24:	str	lr, [sp, #4]
   19f28:	bl	1a14c <lchmod@@Base+0x388c>
   19f2c:	cmp	r0, #0
   19f30:	beq	19f40 <lchmod@@Base+0x3680>
   19f34:	ldr	r4, [sp]
   19f38:	add	sp, sp, #4
   19f3c:	pop	{pc}		; (ldr pc, [sp], #4)
   19f40:	bl	1a078 <lchmod@@Base+0x37b8>
   19f44:	str	r4, [sp, #-8]!
   19f48:	str	lr, [sp, #4]
   19f4c:	mov	r1, #1
   19f50:	bl	19f20 <lchmod@@Base+0x3660>
   19f54:	ldr	r4, [sp]
   19f58:	add	sp, sp, #4
   19f5c:	pop	{pc}		; (ldr pc, [sp], #4)
   19f60:	str	r4, [sp, #-8]!
   19f64:	str	lr, [sp, #4]
   19f68:	bl	1a14c <lchmod@@Base+0x388c>
   19f6c:	cmp	r0, #0
   19f70:	beq	19f80 <lchmod@@Base+0x36c0>
   19f74:	ldr	r4, [sp]
   19f78:	add	sp, sp, #4
   19f7c:	pop	{pc}		; (ldr pc, [sp], #4)
   19f80:	bl	1a078 <lchmod@@Base+0x37b8>
   19f84:	str	r4, [sp, #-8]!
   19f88:	str	lr, [sp, #4]
   19f8c:	mov	r1, #1
   19f90:	bl	19f60 <lchmod@@Base+0x36a0>
   19f94:	ldr	r4, [sp]
   19f98:	add	sp, sp, #4
   19f9c:	pop	{pc}		; (ldr pc, [sp], #4)
   19fa0:	strd	r4, [sp, #-16]!
   19fa4:	str	r6, [sp, #8]
   19fa8:	str	lr, [sp, #12]
   19fac:	mov	r5, r0
   19fb0:	mov	r4, r1
   19fb4:	mov	r0, r1
   19fb8:	bl	19be4 <lchmod@@Base+0x3324>
   19fbc:	mov	r2, r4
   19fc0:	mov	r1, r5
   19fc4:	bl	114b4 <memcpy@plt>
   19fc8:	ldrd	r4, [sp]
   19fcc:	ldr	r6, [sp, #8]
   19fd0:	add	sp, sp, #12
   19fd4:	pop	{pc}		; (ldr pc, [sp], #4)
   19fd8:	strd	r4, [sp, #-16]!
   19fdc:	str	r6, [sp, #8]
   19fe0:	str	lr, [sp, #12]
   19fe4:	mov	r5, r0
   19fe8:	mov	r4, r1
   19fec:	mov	r0, r1
   19ff0:	bl	19c08 <lchmod@@Base+0x3348>
   19ff4:	mov	r2, r4
   19ff8:	mov	r1, r5
   19ffc:	bl	114b4 <memcpy@plt>
   1a000:	ldrd	r4, [sp]
   1a004:	ldr	r6, [sp, #8]
   1a008:	add	sp, sp, #12
   1a00c:	pop	{pc}		; (ldr pc, [sp], #4)
   1a010:	strd	r4, [sp, #-16]!
   1a014:	str	r6, [sp, #8]
   1a018:	str	lr, [sp, #12]
   1a01c:	mov	r5, r0
   1a020:	mov	r4, r1
   1a024:	add	r0, r1, #1
   1a028:	bl	19c08 <lchmod@@Base+0x3348>
   1a02c:	mov	r2, #0
   1a030:	strb	r2, [r0, r4]
   1a034:	mov	r2, r4
   1a038:	mov	r1, r5
   1a03c:	bl	114b4 <memcpy@plt>
   1a040:	ldrd	r4, [sp]
   1a044:	ldr	r6, [sp, #8]
   1a048:	add	sp, sp, #12
   1a04c:	pop	{pc}		; (ldr pc, [sp], #4)
   1a050:	str	r4, [sp, #-8]!
   1a054:	str	lr, [sp, #4]
   1a058:	mov	r4, r0
   1a05c:	bl	11658 <strlen@plt>
   1a060:	add	r1, r0, #1
   1a064:	mov	r0, r4
   1a068:	bl	19fa0 <lchmod@@Base+0x36e0>
   1a06c:	ldr	r4, [sp]
   1a070:	add	sp, sp, #4
   1a074:	pop	{pc}		; (ldr pc, [sp], #4)
   1a078:	str	r4, [sp, #-8]!
   1a07c:	str	lr, [sp, #4]
   1a080:	movw	r3, #49536	; 0xc180
   1a084:	movt	r3, #2
   1a088:	ldr	r4, [r3]
   1a08c:	mov	r2, #5
   1a090:	movw	r1, #47160	; 0xb838
   1a094:	movt	r1, #1
   1a098:	mov	r0, #0
   1a09c:	bl	114f0 <dcgettext@plt>
   1a0a0:	mov	r3, r0
   1a0a4:	movw	r2, #45916	; 0xb35c
   1a0a8:	movt	r2, #1
   1a0ac:	mov	r1, #0
   1a0b0:	mov	r0, r4
   1a0b4:	bl	115b0 <error@plt>
   1a0b8:	bl	117d8 <abort@plt>
   1a0bc:	str	r4, [sp, #-8]!
   1a0c0:	str	lr, [sp, #4]
   1a0c4:	orr	r1, r1, #512	; 0x200
   1a0c8:	bl	1489c <__assert_fail@plt+0x3070>
   1a0cc:	cmp	r0, #0
   1a0d0:	beq	1a0e0 <lchmod@@Base+0x3820>
   1a0d4:	ldr	r4, [sp]
   1a0d8:	add	sp, sp, #4
   1a0dc:	pop	{pc}		; (ldr pc, [sp], #4)
   1a0e0:	bl	11688 <__errno_location@plt>
   1a0e4:	ldr	r3, [r0]
   1a0e8:	cmp	r3, #22
   1a0ec:	beq	1a0f4 <lchmod@@Base+0x3834>
   1a0f0:	bl	1a078 <lchmod@@Base+0x37b8>
   1a0f4:	movw	r3, #47180	; 0xb84c
   1a0f8:	movt	r3, #1
   1a0fc:	mov	r2, #41	; 0x29
   1a100:	movw	r1, #47192	; 0xb858
   1a104:	movt	r1, #1
   1a108:	movw	r0, #47204	; 0xb864
   1a10c:	movt	r0, #1
   1a110:	bl	1182c <__assert_fail@plt>
   1a114:	ldr	r3, [r0, #48]	; 0x30
   1a118:	and	r3, r3, #17
   1a11c:	cmp	r3, #16
   1a120:	beq	1a144 <lchmod@@Base+0x3884>
   1a124:	cmp	r3, #17
   1a128:	beq	1a134 <lchmod@@Base+0x3874>
   1a12c:	mov	r0, #0
   1a130:	bx	lr
   1a134:	ldr	r0, [r1, #48]	; 0x30
   1a138:	adds	r0, r0, #0
   1a13c:	movne	r0, #1
   1a140:	bx	lr
   1a144:	mov	r0, #1
   1a148:	bx	lr
   1a14c:	strd	r4, [sp, #-16]!
   1a150:	str	r6, [sp, #8]
   1a154:	str	lr, [sp, #12]
   1a158:	cmp	r1, #0
   1a15c:	cmpne	r0, #0
   1a160:	beq	1a19c <lchmod@@Base+0x38dc>
   1a164:	mov	r2, r0
   1a168:	mov	r3, r1
   1a16c:	umull	r4, r5, r0, r1
   1a170:	adds	r1, r5, #0
   1a174:	movne	r1, #1
   1a178:	cmp	r4, #0
   1a17c:	movlt	r1, #1
   1a180:	cmp	r1, #0
   1a184:	beq	1a1a4 <lchmod@@Base+0x38e4>
   1a188:	bl	11688 <__errno_location@plt>
   1a18c:	mov	r3, #12
   1a190:	str	r3, [r0]
   1a194:	mov	r0, #0
   1a198:	b	1a1b0 <lchmod@@Base+0x38f0>
   1a19c:	mov	r3, #1
   1a1a0:	mov	r2, r3
   1a1a4:	mov	r1, r3
   1a1a8:	mov	r0, r2
   1a1ac:	bl	11424 <calloc@plt>
   1a1b0:	ldrd	r4, [sp]
   1a1b4:	ldr	r6, [sp, #8]
   1a1b8:	add	sp, sp, #12
   1a1bc:	pop	{pc}		; (ldr pc, [sp], #4)
   1a1c0:	str	r4, [sp, #-8]!
   1a1c4:	str	lr, [sp, #4]
   1a1c8:	cmp	r0, #0
   1a1cc:	beq	1a1e8 <lchmod@@Base+0x3928>
   1a1d0:	bge	1a1ec <lchmod@@Base+0x392c>
   1a1d4:	bl	11688 <__errno_location@plt>
   1a1d8:	mov	r3, #12
   1a1dc:	str	r3, [r0]
   1a1e0:	mov	r0, #0
   1a1e4:	b	1a1f0 <lchmod@@Base+0x3930>
   1a1e8:	mov	r0, #1
   1a1ec:	bl	115d4 <malloc@plt>
   1a1f0:	ldr	r4, [sp]
   1a1f4:	add	sp, sp, #4
   1a1f8:	pop	{pc}		; (ldr pc, [sp], #4)
   1a1fc:	str	r4, [sp, #-8]!
   1a200:	str	lr, [sp, #4]
   1a204:	cmp	r0, #0
   1a208:	beq	1a22c <lchmod@@Base+0x396c>
   1a20c:	cmp	r1, #0
   1a210:	beq	1a238 <lchmod@@Base+0x3978>
   1a214:	cmp	r1, #0
   1a218:	blt	1a244 <lchmod@@Base+0x3984>
   1a21c:	bl	11508 <realloc@plt>
   1a220:	ldr	r4, [sp]
   1a224:	add	sp, sp, #4
   1a228:	pop	{pc}		; (ldr pc, [sp], #4)
   1a22c:	mov	r0, r1
   1a230:	bl	1a1c0 <lchmod@@Base+0x3900>
   1a234:	b	1a220 <lchmod@@Base+0x3960>
   1a238:	bl	1322c <__assert_fail@plt+0x1a00>
   1a23c:	mov	r0, #0
   1a240:	b	1a220 <lchmod@@Base+0x3960>
   1a244:	bl	11688 <__errno_location@plt>
   1a248:	mov	r3, #12
   1a24c:	str	r3, [r0]
   1a250:	mov	r0, #0
   1a254:	b	1a220 <lchmod@@Base+0x3960>
   1a258:	ldrb	r3, [r0]
   1a25c:	cmp	r3, #47	; 0x2f
   1a260:	bne	1a270 <lchmod@@Base+0x39b0>
   1a264:	ldrb	r3, [r0, #1]!
   1a268:	cmp	r3, #47	; 0x2f
   1a26c:	beq	1a264 <lchmod@@Base+0x39a4>
   1a270:	ldrb	r2, [r0]
   1a274:	cmp	r2, #0
   1a278:	bxeq	lr
   1a27c:	push	{lr}		; (str lr, [sp, #-4]!)
   1a280:	mov	r1, r0
   1a284:	mov	r3, #0
   1a288:	mov	lr, #1
   1a28c:	mov	ip, r3
   1a290:	b	1a2ac <lchmod@@Base+0x39ec>
   1a294:	cmp	r3, #0
   1a298:	movne	r0, r1
   1a29c:	movne	r3, ip
   1a2a0:	ldrb	r2, [r1, #1]!
   1a2a4:	cmp	r2, #0
   1a2a8:	beq	1a2bc <lchmod@@Base+0x39fc>
   1a2ac:	cmp	r2, #47	; 0x2f
   1a2b0:	moveq	r3, lr
   1a2b4:	bne	1a294 <lchmod@@Base+0x39d4>
   1a2b8:	b	1a2a0 <lchmod@@Base+0x39e0>
   1a2bc:	pop	{pc}		; (ldr pc, [sp], #4)
   1a2c0:	str	r4, [sp, #-8]!
   1a2c4:	str	lr, [sp, #4]
   1a2c8:	mov	r4, r0
   1a2cc:	bl	11658 <strlen@plt>
   1a2d0:	cmp	r0, #1
   1a2d4:	bls	1a2f4 <lchmod@@Base+0x3a34>
   1a2d8:	add	r3, r4, r0
   1a2dc:	ldrb	r3, [r3, #-1]
   1a2e0:	cmp	r3, #47	; 0x2f
   1a2e4:	subeq	r0, r0, #2
   1a2e8:	addeq	r3, r4, r0
   1a2ec:	rsbeq	r1, r4, #1
   1a2f0:	beq	1a300 <lchmod@@Base+0x3a40>
   1a2f4:	ldr	r4, [sp]
   1a2f8:	add	sp, sp, #4
   1a2fc:	pop	{pc}		; (ldr pc, [sp], #4)
   1a300:	add	r0, r1, r3
   1a304:	cmp	r3, r4
   1a308:	beq	1a2f4 <lchmod@@Base+0x3a34>
   1a30c:	ldrb	r2, [r3], #-1
   1a310:	cmp	r2, #47	; 0x2f
   1a314:	bne	1a2f4 <lchmod@@Base+0x3a34>
   1a318:	b	1a300 <lchmod@@Base+0x3a40>
   1a31c:	strd	r4, [sp, #-16]!
   1a320:	str	r6, [sp, #8]
   1a324:	str	lr, [sp, #12]
   1a328:	mov	r5, r0
   1a32c:	bl	11598 <__fpending@plt>
   1a330:	mov	r6, r0
   1a334:	ldr	r4, [r5]
   1a338:	and	r4, r4, #32
   1a33c:	mov	r0, r5
   1a340:	bl	1a4b4 <lchmod@@Base+0x3bf4>
   1a344:	cmp	r4, #0
   1a348:	bne	1a37c <lchmod@@Base+0x3abc>
   1a34c:	cmp	r0, #0
   1a350:	beq	1a36c <lchmod@@Base+0x3aac>
   1a354:	cmp	r6, #0
   1a358:	bne	1a398 <lchmod@@Base+0x3ad8>
   1a35c:	bl	11688 <__errno_location@plt>
   1a360:	ldr	r0, [r0]
   1a364:	subs	r0, r0, #9
   1a368:	mvnne	r0, #0
   1a36c:	ldrd	r4, [sp]
   1a370:	ldr	r6, [sp, #8]
   1a374:	add	sp, sp, #12
   1a378:	pop	{pc}		; (ldr pc, [sp], #4)
   1a37c:	cmp	r0, #0
   1a380:	bne	1a3a0 <lchmod@@Base+0x3ae0>
   1a384:	bl	11688 <__errno_location@plt>
   1a388:	mov	r3, #0
   1a38c:	str	r3, [r0]
   1a390:	mvn	r0, #0
   1a394:	b	1a36c <lchmod@@Base+0x3aac>
   1a398:	mvn	r0, #0
   1a39c:	b	1a36c <lchmod@@Base+0x3aac>
   1a3a0:	mvn	r0, #0
   1a3a4:	b	1a36c <lchmod@@Base+0x3aac>
   1a3a8:	mov	r2, #0
   1a3ac:	mov	r3, #0
   1a3b0:	strd	r2, [r0, #16]
   1a3b4:	movw	r3, #62998	; 0xf616
   1a3b8:	movt	r3, #149	; 0x95
   1a3bc:	str	r3, [r0, #24]
   1a3c0:	bx	lr
   1a3c4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1a3c8:	strd	r6, [sp, #8]
   1a3cc:	strd	r8, [sp, #16]
   1a3d0:	str	sl, [sp, #24]
   1a3d4:	str	lr, [sp, #28]
   1a3d8:	movw	r3, #62998	; 0xf616
   1a3dc:	movt	r3, #149	; 0x95
   1a3e0:	ldr	r2, [r0, #24]
   1a3e4:	cmp	r2, r3
   1a3e8:	bne	1a444 <lchmod@@Base+0x3b84>
   1a3ec:	ldrd	r6, [r0, #16]
   1a3f0:	orrs	r3, r6, r7
   1a3f4:	beq	1a490 <lchmod@@Base+0x3bd0>
   1a3f8:	ldrd	r4, [r1, #96]	; 0x60
   1a3fc:	ldrd	r2, [r0]
   1a400:	cmp	r5, r3
   1a404:	cmpeq	r4, r2
   1a408:	beq	1a464 <lchmod@@Base+0x3ba4>
   1a40c:	adds	r8, r6, #1
   1a410:	adc	r9, r7, #0
   1a414:	strd	r8, [r0, #16]
   1a418:	and	r2, r6, r8
   1a41c:	and	r3, r7, r9
   1a420:	orrs	r3, r2, r3
   1a424:	movne	r0, #0
   1a428:	beq	1a480 <lchmod@@Base+0x3bc0>
   1a42c:	ldrd	r4, [sp]
   1a430:	ldrd	r6, [sp, #8]
   1a434:	ldrd	r8, [sp, #16]
   1a438:	ldr	sl, [sp, #24]
   1a43c:	add	sp, sp, #28
   1a440:	pop	{pc}		; (ldr pc, [sp], #4)
   1a444:	movw	r3, #47220	; 0xb874
   1a448:	movt	r3, #1
   1a44c:	mov	r2, #60	; 0x3c
   1a450:	movw	r1, #47232	; 0xb880
   1a454:	movt	r1, #1
   1a458:	movw	r0, #47252	; 0xb894
   1a45c:	movt	r0, #1
   1a460:	bl	1182c <__assert_fail@plt>
   1a464:	ldrd	r4, [r1]
   1a468:	ldrd	r2, [r0, #8]
   1a46c:	cmp	r5, r3
   1a470:	cmpeq	r4, r2
   1a474:	moveq	r0, #1
   1a478:	bne	1a40c <lchmod@@Base+0x3b4c>
   1a47c:	b	1a42c <lchmod@@Base+0x3b6c>
   1a480:	orrs	r3, r8, r9
   1a484:	moveq	r0, #1
   1a488:	beq	1a42c <lchmod@@Base+0x3b6c>
   1a48c:	b	1a49c <lchmod@@Base+0x3bdc>
   1a490:	mov	r2, #1
   1a494:	mov	r3, #0
   1a498:	strd	r2, [r0, #16]
   1a49c:	ldrd	r2, [r1]
   1a4a0:	strd	r2, [r0, #8]
   1a4a4:	ldrd	r2, [r1, #96]	; 0x60
   1a4a8:	strd	r2, [r0]
   1a4ac:	mov	r0, #0
   1a4b0:	b	1a42c <lchmod@@Base+0x3b6c>
   1a4b4:	strd	r4, [sp, #-16]!
   1a4b8:	str	r6, [sp, #8]
   1a4bc:	str	lr, [sp, #12]
   1a4c0:	sub	sp, sp, #8
   1a4c4:	mov	r4, r0
   1a4c8:	bl	116c4 <fileno@plt>
   1a4cc:	cmp	r0, #0
   1a4d0:	blt	1a548 <lchmod@@Base+0x3c88>
   1a4d4:	mov	r0, r4
   1a4d8:	bl	115ec <__freading@plt>
   1a4dc:	cmp	r0, #0
   1a4e0:	beq	1a514 <lchmod@@Base+0x3c54>
   1a4e4:	mov	r0, r4
   1a4e8:	bl	116c4 <fileno@plt>
   1a4ec:	mov	r3, #1
   1a4f0:	str	r3, [sp]
   1a4f4:	mov	r2, #0
   1a4f8:	mov	r3, #0
   1a4fc:	bl	11574 <lseek64@plt>
   1a500:	mvn	r2, #0
   1a504:	mvn	r3, #0
   1a508:	cmp	r1, r3
   1a50c:	cmpeq	r0, r2
   1a510:	beq	1a554 <lchmod@@Base+0x3c94>
   1a514:	mov	r0, r4
   1a518:	bl	1a818 <lchmod@@Base+0x3f58>
   1a51c:	cmp	r0, #0
   1a520:	beq	1a554 <lchmod@@Base+0x3c94>
   1a524:	bl	11688 <__errno_location@plt>
   1a528:	mov	r5, r0
   1a52c:	ldr	r6, [r0]
   1a530:	mov	r0, r4
   1a534:	bl	116dc <fclose@plt>
   1a538:	cmp	r6, #0
   1a53c:	strne	r6, [r5]
   1a540:	mvnne	r0, #0
   1a544:	b	1a55c <lchmod@@Base+0x3c9c>
   1a548:	mov	r0, r4
   1a54c:	bl	116dc <fclose@plt>
   1a550:	b	1a55c <lchmod@@Base+0x3c9c>
   1a554:	mov	r0, r4
   1a558:	bl	116dc <fclose@plt>
   1a55c:	add	sp, sp, #8
   1a560:	ldrd	r4, [sp]
   1a564:	ldr	r6, [sp, #8]
   1a568:	add	sp, sp, #12
   1a56c:	pop	{pc}		; (ldr pc, [sp], #4)
   1a570:	push	{r1, r2, r3}
   1a574:	strd	r4, [sp, #-16]!
   1a578:	str	r6, [sp, #8]
   1a57c:	str	lr, [sp, #12]
   1a580:	sub	sp, sp, #12
   1a584:	mov	r5, r0
   1a588:	ldr	r1, [sp, #28]
   1a58c:	add	r3, sp, #32
   1a590:	str	r3, [sp, #4]
   1a594:	cmp	r1, #0
   1a598:	beq	1a5e0 <lchmod@@Base+0x3d20>
   1a59c:	movw	r3, #1030	; 0x406
   1a5a0:	cmp	r1, r3
   1a5a4:	beq	1a61c <lchmod@@Base+0x3d5c>
   1a5a8:	cmp	r1, #11
   1a5ac:	beq	1a7cc <lchmod@@Base+0x3f0c>
   1a5b0:	bgt	1a758 <lchmod@@Base+0x3e98>
   1a5b4:	cmp	r1, #3
   1a5b8:	beq	1a7cc <lchmod@@Base+0x3f0c>
   1a5bc:	ble	1a718 <lchmod@@Base+0x3e58>
   1a5c0:	cmp	r1, #8
   1a5c4:	beq	1a738 <lchmod@@Base+0x3e78>
   1a5c8:	ble	1a730 <lchmod@@Base+0x3e70>
   1a5cc:	cmp	r1, #9
   1a5d0:	beq	1a7cc <lchmod@@Base+0x3f0c>
   1a5d4:	cmp	r1, #10
   1a5d8:	bne	1a790 <lchmod@@Base+0x3ed0>
   1a5dc:	b	1a738 <lchmod@@Base+0x3e78>
   1a5e0:	ldr	r3, [sp, #4]
   1a5e4:	add	r2, r3, #4
   1a5e8:	str	r2, [sp, #4]
   1a5ec:	ldr	r2, [r3]
   1a5f0:	mov	r1, #0
   1a5f4:	bl	116f4 <fcntl64@plt>
   1a5f8:	mov	r4, r0
   1a5fc:	mov	r0, r4
   1a600:	add	sp, sp, #12
   1a604:	ldrd	r4, [sp]
   1a608:	ldr	r6, [sp, #8]
   1a60c:	ldr	lr, [sp, #12]
   1a610:	add	sp, sp, #16
   1a614:	add	sp, sp, #12
   1a618:	bx	lr
   1a61c:	ldr	r3, [sp, #4]
   1a620:	add	r2, r3, #4
   1a624:	str	r2, [sp, #4]
   1a628:	ldr	r6, [r3]
   1a62c:	movw	r3, #49956	; 0xc324
   1a630:	movt	r3, #2
   1a634:	ldr	r3, [r3]
   1a638:	cmp	r3, #0
   1a63c:	blt	1a6a4 <lchmod@@Base+0x3de4>
   1a640:	mov	r2, r6
   1a644:	movw	r1, #1030	; 0x406
   1a648:	bl	116f4 <fcntl64@plt>
   1a64c:	subs	r4, r0, #0
   1a650:	blt	1a668 <lchmod@@Base+0x3da8>
   1a654:	movw	r3, #49956	; 0xc324
   1a658:	movt	r3, #2
   1a65c:	mov	r2, #1
   1a660:	str	r2, [r3]
   1a664:	b	1a5fc <lchmod@@Base+0x3d3c>
   1a668:	bl	11688 <__errno_location@plt>
   1a66c:	ldr	r3, [r0]
   1a670:	cmp	r3, #22
   1a674:	bne	1a654 <lchmod@@Base+0x3d94>
   1a678:	mov	r2, r6
   1a67c:	mov	r1, #0
   1a680:	mov	r0, r5
   1a684:	bl	116f4 <fcntl64@plt>
   1a688:	subs	r4, r0, #0
   1a68c:	blt	1a5fc <lchmod@@Base+0x3d3c>
   1a690:	movw	r3, #49956	; 0xc324
   1a694:	movt	r3, #2
   1a698:	mvn	r2, #0
   1a69c:	str	r2, [r3]
   1a6a0:	b	1a6cc <lchmod@@Base+0x3e0c>
   1a6a4:	mov	r2, r6
   1a6a8:	mov	r1, #0
   1a6ac:	bl	116f4 <fcntl64@plt>
   1a6b0:	subs	r4, r0, #0
   1a6b4:	blt	1a5fc <lchmod@@Base+0x3d3c>
   1a6b8:	movw	r3, #49956	; 0xc324
   1a6bc:	movt	r3, #2
   1a6c0:	ldr	r3, [r3]
   1a6c4:	cmn	r3, #1
   1a6c8:	bne	1a5fc <lchmod@@Base+0x3d3c>
   1a6cc:	mov	r1, #1
   1a6d0:	mov	r0, r4
   1a6d4:	bl	116f4 <fcntl64@plt>
   1a6d8:	subs	r2, r0, #0
   1a6dc:	blt	1a6f8 <lchmod@@Base+0x3e38>
   1a6e0:	orr	r2, r2, #1
   1a6e4:	mov	r1, #2
   1a6e8:	mov	r0, r4
   1a6ec:	bl	116f4 <fcntl64@plt>
   1a6f0:	cmn	r0, #1
   1a6f4:	bne	1a5fc <lchmod@@Base+0x3d3c>
   1a6f8:	bl	11688 <__errno_location@plt>
   1a6fc:	mov	r5, r0
   1a700:	ldr	r6, [r0]
   1a704:	mov	r0, r4
   1a708:	bl	117e4 <close@plt>
   1a70c:	str	r6, [r5]
   1a710:	mvn	r4, #0
   1a714:	b	1a5fc <lchmod@@Base+0x3d3c>
   1a718:	cmp	r1, #1
   1a71c:	beq	1a7cc <lchmod@@Base+0x3f0c>
   1a720:	bgt	1a738 <lchmod@@Base+0x3e78>
   1a724:	cmp	r1, #0
   1a728:	bne	1a790 <lchmod@@Base+0x3ed0>
   1a72c:	b	1a738 <lchmod@@Base+0x3e78>
   1a730:	cmp	r1, #4
   1a734:	bne	1a790 <lchmod@@Base+0x3ed0>
   1a738:	ldr	r3, [sp, #4]
   1a73c:	add	r2, r3, #4
   1a740:	str	r2, [sp, #4]
   1a744:	ldr	r2, [r3]
   1a748:	mov	r0, r5
   1a74c:	bl	116f4 <fcntl64@plt>
   1a750:	mov	r4, r0
   1a754:	b	1a5fc <lchmod@@Base+0x3d3c>
   1a758:	movw	r3, #1031	; 0x407
   1a75c:	cmp	r1, r3
   1a760:	bgt	1a7b0 <lchmod@@Base+0x3ef0>
   1a764:	movw	r3, #1030	; 0x406
   1a768:	cmp	r1, r3
   1a76c:	bge	1a738 <lchmod@@Base+0x3e78>
   1a770:	movw	r3, #1025	; 0x401
   1a774:	cmp	r1, r3
   1a778:	beq	1a7cc <lchmod@@Base+0x3f0c>
   1a77c:	movw	r3, #1026	; 0x402
   1a780:	cmp	r1, r3
   1a784:	beq	1a738 <lchmod@@Base+0x3e78>
   1a788:	cmp	r1, #1024	; 0x400
   1a78c:	beq	1a738 <lchmod@@Base+0x3e78>
   1a790:	ldr	r3, [sp, #4]
   1a794:	add	r2, r3, #4
   1a798:	str	r2, [sp, #4]
   1a79c:	ldr	r2, [r3]
   1a7a0:	mov	r0, r5
   1a7a4:	bl	116f4 <fcntl64@plt>
   1a7a8:	mov	r4, r0
   1a7ac:	b	1a5fc <lchmod@@Base+0x3d3c>
   1a7b0:	movw	r3, #1033	; 0x409
   1a7b4:	cmp	r1, r3
   1a7b8:	beq	1a738 <lchmod@@Base+0x3e78>
   1a7bc:	blt	1a7cc <lchmod@@Base+0x3f0c>
   1a7c0:	movw	r3, #1034	; 0x40a
   1a7c4:	cmp	r1, r3
   1a7c8:	bne	1a790 <lchmod@@Base+0x3ed0>
   1a7cc:	mov	r0, r5
   1a7d0:	bl	116f4 <fcntl64@plt>
   1a7d4:	mov	r4, r0
   1a7d8:	b	1a5fc <lchmod@@Base+0x3d3c>
   1a7dc:	push	{r1, r2, r3}
   1a7e0:	push	{lr}		; (str lr, [sp, #-4]!)
   1a7e4:	sub	sp, sp, #8
   1a7e8:	ldr	r1, [sp, #12]
   1a7ec:	tst	r1, #64	; 0x40
   1a7f0:	addne	r3, sp, #20
   1a7f4:	strne	r3, [sp, #4]
   1a7f8:	ldrne	r2, [sp, #16]
   1a7fc:	moveq	r2, #0
   1a800:	bl	115bc <open64@plt>
   1a804:	bl	195d4 <lchmod@@Base+0x2d14>
   1a808:	add	sp, sp, #8
   1a80c:	pop	{lr}		; (ldr lr, [sp], #4)
   1a810:	add	sp, sp, #12
   1a814:	bx	lr
   1a818:	str	r4, [sp, #-8]!
   1a81c:	str	lr, [sp, #4]
   1a820:	sub	sp, sp, #8
   1a824:	subs	r4, r0, #0
   1a828:	beq	1a83c <lchmod@@Base+0x3f7c>
   1a82c:	mov	r0, r4
   1a830:	bl	115ec <__freading@plt>
   1a834:	cmp	r0, #0
   1a838:	bne	1a854 <lchmod@@Base+0x3f94>
   1a83c:	mov	r0, r4
   1a840:	bl	1146c <fflush@plt>
   1a844:	add	sp, sp, #8
   1a848:	ldr	r4, [sp]
   1a84c:	add	sp, sp, #4
   1a850:	pop	{pc}		; (ldr pc, [sp], #4)
   1a854:	ldr	r3, [r4]
   1a858:	tst	r3, #256	; 0x100
   1a85c:	bne	1a86c <lchmod@@Base+0x3fac>
   1a860:	mov	r0, r4
   1a864:	bl	1146c <fflush@plt>
   1a868:	b	1a844 <lchmod@@Base+0x3f84>
   1a86c:	mov	r3, #1
   1a870:	str	r3, [sp]
   1a874:	mov	r2, #0
   1a878:	mov	r3, #0
   1a87c:	mov	r0, r4
   1a880:	bl	1a888 <lchmod@@Base+0x3fc8>
   1a884:	b	1a860 <lchmod@@Base+0x3fa0>
   1a888:	str	r4, [sp, #-16]!
   1a88c:	strd	r6, [sp, #4]
   1a890:	str	lr, [sp, #12]
   1a894:	sub	sp, sp, #8
   1a898:	mov	r4, r0
   1a89c:	mov	r6, r2
   1a8a0:	mov	r7, r3
   1a8a4:	ldr	r2, [r0, #8]
   1a8a8:	ldr	r3, [r0, #4]
   1a8ac:	cmp	r2, r3
   1a8b0:	beq	1a8e0 <lchmod@@Base+0x4020>
   1a8b4:	ldr	r3, [sp, #24]
   1a8b8:	str	r3, [sp]
   1a8bc:	mov	r2, r6
   1a8c0:	mov	r3, r7
   1a8c4:	mov	r0, r4
   1a8c8:	bl	116e8 <fseeko64@plt>
   1a8cc:	add	sp, sp, #8
   1a8d0:	ldr	r4, [sp]
   1a8d4:	ldrd	r6, [sp, #4]
   1a8d8:	add	sp, sp, #12
   1a8dc:	pop	{pc}		; (ldr pc, [sp], #4)
   1a8e0:	ldr	r2, [r0, #20]
   1a8e4:	ldr	r3, [r0, #16]
   1a8e8:	cmp	r2, r3
   1a8ec:	bne	1a8b4 <lchmod@@Base+0x3ff4>
   1a8f0:	ldr	r3, [r0, #36]	; 0x24
   1a8f4:	cmp	r3, #0
   1a8f8:	bne	1a8b4 <lchmod@@Base+0x3ff4>
   1a8fc:	bl	116c4 <fileno@plt>
   1a900:	ldr	r3, [sp, #24]
   1a904:	str	r3, [sp]
   1a908:	mov	r2, r6
   1a90c:	mov	r3, r7
   1a910:	bl	11574 <lseek64@plt>
   1a914:	mvn	r2, #0
   1a918:	mvn	r3, #0
   1a91c:	cmp	r1, r3
   1a920:	cmpeq	r0, r2
   1a924:	beq	1a940 <lchmod@@Base+0x4080>
   1a928:	ldr	r3, [r4]
   1a92c:	bic	r3, r3, #16
   1a930:	str	r3, [r4]
   1a934:	strd	r0, [r4, #80]	; 0x50
   1a938:	mov	r0, #0
   1a93c:	b	1a8cc <lchmod@@Base+0x400c>
   1a940:	mvn	r0, #0
   1a944:	b	1a8cc <lchmod@@Base+0x400c>
   1a948:	ldrb	r3, [r0]
   1a94c:	cmp	r3, #0
   1a950:	beq	1a974 <lchmod@@Base+0x40b4>
   1a954:	mov	r2, #0
   1a958:	add	r2, r3, r2, ror #23
   1a95c:	ldrb	r3, [r0, #1]!
   1a960:	cmp	r3, #0
   1a964:	bne	1a958 <lchmod@@Base+0x4098>
   1a968:	udiv	r0, r2, r1
   1a96c:	mls	r0, r1, r0, r2
   1a970:	bx	lr
   1a974:	mov	r2, #0
   1a978:	b	1a968 <lchmod@@Base+0x40a8>
   1a97c:	str	r4, [sp, #-8]!
   1a980:	str	lr, [sp, #4]
   1a984:	mov	r0, #14
   1a988:	bl	11724 <nl_langinfo@plt>
   1a98c:	cmp	r0, #0
   1a990:	beq	1a9b4 <lchmod@@Base+0x40f4>
   1a994:	ldrb	r2, [r0]
   1a998:	movw	r3, #47276	; 0xb8ac
   1a99c:	movt	r3, #1
   1a9a0:	cmp	r2, #0
   1a9a4:	moveq	r0, r3
   1a9a8:	ldr	r4, [sp]
   1a9ac:	add	sp, sp, #4
   1a9b0:	pop	{pc}		; (ldr pc, [sp], #4)
   1a9b4:	movw	r0, #47276	; 0xb8ac
   1a9b8:	movt	r0, #1
   1a9bc:	b	1a9a8 <lchmod@@Base+0x40e8>
   1a9c0:	strd	r4, [sp, #-20]!	; 0xffffffec
   1a9c4:	strd	r6, [sp, #8]
   1a9c8:	str	lr, [sp, #16]
   1a9cc:	sub	sp, sp, #12
   1a9d0:	mov	r7, r1
   1a9d4:	mov	r5, r2
   1a9d8:	subs	r6, r0, #0
   1a9dc:	addeq	r6, sp, #4
   1a9e0:	mov	r0, r6
   1a9e4:	bl	115a4 <mbrtowc@plt>
   1a9e8:	mov	r4, r0
   1a9ec:	cmp	r5, #0
   1a9f0:	cmnne	r0, #3
   1a9f4:	bhi	1aa10 <lchmod@@Base+0x4150>
   1a9f8:	mov	r0, r4
   1a9fc:	add	sp, sp, #12
   1aa00:	ldrd	r4, [sp]
   1aa04:	ldrd	r6, [sp, #8]
   1aa08:	add	sp, sp, #16
   1aa0c:	pop	{pc}		; (ldr pc, [sp], #4)
   1aa10:	mov	r0, #0
   1aa14:	bl	1aa8c <lchmod@@Base+0x41cc>
   1aa18:	cmp	r0, #0
   1aa1c:	bne	1a9f8 <lchmod@@Base+0x4138>
   1aa20:	ldrb	r3, [r7]
   1aa24:	str	r3, [r6]
   1aa28:	mov	r4, #1
   1aa2c:	b	1a9f8 <lchmod@@Base+0x4138>
   1aa30:	str	r4, [sp, #-8]!
   1aa34:	str	lr, [sp, #4]
   1aa38:	umull	r2, r3, r1, r2
   1aa3c:	cmp	r3, #0
   1aa40:	bne	1aa58 <lchmod@@Base+0x4198>
   1aa44:	mov	r1, r2
   1aa48:	bl	1a1fc <lchmod@@Base+0x393c>
   1aa4c:	ldr	r4, [sp]
   1aa50:	add	sp, sp, #4
   1aa54:	pop	{pc}		; (ldr pc, [sp], #4)
   1aa58:	bl	11688 <__errno_location@plt>
   1aa5c:	mov	r3, #12
   1aa60:	str	r3, [r0]
   1aa64:	mov	r0, #0
   1aa68:	b	1aa4c <lchmod@@Base+0x418c>
   1aa6c:	str	r4, [sp, #-8]!
   1aa70:	str	lr, [sp, #4]
   1aa74:	mov	r2, #3
   1aa78:	mov	r1, #0
   1aa7c:	bl	1a570 <lchmod@@Base+0x3cb0>
   1aa80:	ldr	r4, [sp]
   1aa84:	add	sp, sp, #4
   1aa88:	pop	{pc}		; (ldr pc, [sp], #4)
   1aa8c:	push	{lr}		; (str lr, [sp, #-4]!)
   1aa90:	sub	sp, sp, #268	; 0x10c
   1aa94:	movw	r2, #257	; 0x101
   1aa98:	add	r1, sp, #4
   1aa9c:	bl	1aae8 <lchmod@@Base+0x4228>
   1aaa0:	cmp	r0, #0
   1aaa4:	movne	r0, #0
   1aaa8:	bne	1aae0 <lchmod@@Base+0x4220>
   1aaac:	movw	r1, #47284	; 0xb8b4
   1aab0:	movt	r1, #1
   1aab4:	add	r0, sp, #4
   1aab8:	bl	11454 <strcmp@plt>
   1aabc:	cmp	r0, #0
   1aac0:	beq	1aadc <lchmod@@Base+0x421c>
   1aac4:	movw	r1, #47288	; 0xb8b8
   1aac8:	movt	r1, #1
   1aacc:	add	r0, sp, #4
   1aad0:	bl	11454 <strcmp@plt>
   1aad4:	adds	r0, r0, #0
   1aad8:	movne	r0, #1
   1aadc:	and	r0, r0, #1
   1aae0:	add	sp, sp, #268	; 0x10c
   1aae4:	pop	{pc}		; (ldr pc, [sp], #4)
   1aae8:	strd	r4, [sp, #-16]!
   1aaec:	str	r6, [sp, #8]
   1aaf0:	str	lr, [sp, #12]
   1aaf4:	mov	r6, r1
   1aaf8:	mov	r4, r2
   1aafc:	mov	r1, #0
   1ab00:	bl	11700 <setlocale@plt>
   1ab04:	subs	r5, r0, #0
   1ab08:	beq	1ab4c <lchmod@@Base+0x428c>
   1ab0c:	mov	r0, r5
   1ab10:	bl	11658 <strlen@plt>
   1ab14:	cmp	r4, r0
   1ab18:	bhi	1ab68 <lchmod@@Base+0x42a8>
   1ab1c:	cmp	r4, #0
   1ab20:	moveq	r0, #34	; 0x22
   1ab24:	beq	1ab7c <lchmod@@Base+0x42bc>
   1ab28:	sub	r4, r4, #1
   1ab2c:	mov	r2, r4
   1ab30:	mov	r1, r5
   1ab34:	mov	r0, r6
   1ab38:	bl	114b4 <memcpy@plt>
   1ab3c:	mov	r3, #0
   1ab40:	strb	r3, [r6, r4]
   1ab44:	mov	r0, #34	; 0x22
   1ab48:	b	1ab7c <lchmod@@Base+0x42bc>
   1ab4c:	cmp	r4, #0
   1ab50:	moveq	r0, #22
   1ab54:	beq	1ab7c <lchmod@@Base+0x42bc>
   1ab58:	mov	r3, #0
   1ab5c:	strb	r3, [r6]
   1ab60:	mov	r0, #22
   1ab64:	b	1ab7c <lchmod@@Base+0x42bc>
   1ab68:	add	r2, r0, #1
   1ab6c:	mov	r1, r5
   1ab70:	mov	r0, r6
   1ab74:	bl	114b4 <memcpy@plt>
   1ab78:	mov	r0, #0
   1ab7c:	ldrd	r4, [sp]
   1ab80:	ldr	r6, [sp, #8]
   1ab84:	add	sp, sp, #12
   1ab88:	pop	{pc}		; (ldr pc, [sp], #4)
   1ab8c:	str	r4, [sp, #-8]!
   1ab90:	str	lr, [sp, #4]
   1ab94:	mov	r1, #0
   1ab98:	bl	11700 <setlocale@plt>
   1ab9c:	ldr	r4, [sp]
   1aba0:	add	sp, sp, #4
   1aba4:	pop	{pc}		; (ldr pc, [sp], #4)
   1aba8:	cmp	r3, #0
   1abac:	cmpeq	r2, #0
   1abb0:	bne	1abc8 <lchmod@@Base+0x4308>
   1abb4:	cmp	r1, #0
   1abb8:	cmpeq	r0, #0
   1abbc:	mvnne	r1, #0
   1abc0:	mvnne	r0, #0
   1abc4:	b	1abe4 <lchmod@@Base+0x4324>
   1abc8:	sub	sp, sp, #8
   1abcc:	push	{sp, lr}
   1abd0:	bl	1abf4 <lchmod@@Base+0x4334>
   1abd4:	ldr	lr, [sp, #4]
   1abd8:	add	sp, sp, #8
   1abdc:	pop	{r2, r3}
   1abe0:	bx	lr
   1abe4:	push	{r1, lr}
   1abe8:	mov	r0, #8
   1abec:	bl	1143c <raise@plt>
   1abf0:	pop	{r1, pc}
   1abf4:	cmp	r1, r3
   1abf8:	cmpeq	r0, r2
   1abfc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ac00:	mov	r4, r0
   1ac04:	movcc	r0, #0
   1ac08:	mov	r5, r1
   1ac0c:	ldr	lr, [sp, #36]	; 0x24
   1ac10:	movcc	r1, r0
   1ac14:	bcc	1ad10 <lchmod@@Base+0x4450>
   1ac18:	cmp	r3, #0
   1ac1c:	clzeq	ip, r2
   1ac20:	clzne	ip, r3
   1ac24:	addeq	ip, ip, #32
   1ac28:	cmp	r5, #0
   1ac2c:	clzeq	r1, r4
   1ac30:	addeq	r1, r1, #32
   1ac34:	clzne	r1, r5
   1ac38:	sub	ip, ip, r1
   1ac3c:	sub	sl, ip, #32
   1ac40:	lsl	r9, r3, ip
   1ac44:	rsb	fp, ip, #32
   1ac48:	orr	r9, r9, r2, lsl sl
   1ac4c:	orr	r9, r9, r2, lsr fp
   1ac50:	lsl	r8, r2, ip
   1ac54:	cmp	r5, r9
   1ac58:	cmpeq	r4, r8
   1ac5c:	movcc	r0, #0
   1ac60:	movcc	r1, r0
   1ac64:	bcc	1ac80 <lchmod@@Base+0x43c0>
   1ac68:	mov	r0, #1
   1ac6c:	subs	r4, r4, r8
   1ac70:	lsl	r1, r0, sl
   1ac74:	orr	r1, r1, r0, lsr fp
   1ac78:	lsl	r0, r0, ip
   1ac7c:	sbc	r5, r5, r9
   1ac80:	cmp	ip, #0
   1ac84:	beq	1ad10 <lchmod@@Base+0x4450>
   1ac88:	lsr	r6, r8, #1
   1ac8c:	orr	r6, r6, r9, lsl #31
   1ac90:	lsr	r7, r9, #1
   1ac94:	mov	r2, ip
   1ac98:	b	1acbc <lchmod@@Base+0x43fc>
   1ac9c:	subs	r3, r4, r6
   1aca0:	sbc	r8, r5, r7
   1aca4:	adds	r3, r3, r3
   1aca8:	adc	r8, r8, r8
   1acac:	adds	r4, r3, #1
   1acb0:	adc	r5, r8, #0
   1acb4:	subs	r2, r2, #1
   1acb8:	beq	1acd8 <lchmod@@Base+0x4418>
   1acbc:	cmp	r5, r7
   1acc0:	cmpeq	r4, r6
   1acc4:	bcs	1ac9c <lchmod@@Base+0x43dc>
   1acc8:	adds	r4, r4, r4
   1accc:	adc	r5, r5, r5
   1acd0:	subs	r2, r2, #1
   1acd4:	bne	1acbc <lchmod@@Base+0x43fc>
   1acd8:	lsr	r3, r4, ip
   1acdc:	orr	r3, r3, r5, lsl fp
   1ace0:	lsr	r2, r5, ip
   1ace4:	orr	r3, r3, r5, lsr sl
   1ace8:	adds	r0, r0, r4
   1acec:	mov	r4, r3
   1acf0:	lsl	r3, r2, ip
   1acf4:	orr	r3, r3, r4, lsl sl
   1acf8:	lsl	ip, r4, ip
   1acfc:	orr	r3, r3, r4, lsr fp
   1ad00:	adc	r1, r1, r5
   1ad04:	subs	r0, r0, ip
   1ad08:	mov	r5, r2
   1ad0c:	sbc	r1, r1, r3
   1ad10:	cmp	lr, #0
   1ad14:	strdne	r4, [lr]
   1ad18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ad1c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1ad20:	mov	r7, r0
   1ad24:	ldr	r6, [pc, #72]	; 1ad74 <lchmod@@Base+0x44b4>
   1ad28:	ldr	r5, [pc, #72]	; 1ad78 <lchmod@@Base+0x44b8>
   1ad2c:	add	r6, pc, r6
   1ad30:	add	r5, pc, r5
   1ad34:	sub	r6, r6, r5
   1ad38:	mov	r8, r1
   1ad3c:	mov	r9, r2
   1ad40:	bl	113ec <fstatfs64@plt-0x20>
   1ad44:	asrs	r6, r6, #2
   1ad48:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1ad4c:	mov	r4, #0
   1ad50:	add	r4, r4, #1
   1ad54:	ldr	r3, [r5], #4
   1ad58:	mov	r2, r9
   1ad5c:	mov	r1, r8
   1ad60:	mov	r0, r7
   1ad64:	blx	r3
   1ad68:	cmp	r6, r4
   1ad6c:	bne	1ad50 <lchmod@@Base+0x4490>
   1ad70:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1ad74:	ldrdeq	r1, [r1], -r8
   1ad78:	ldrdeq	r1, [r1], -r0
   1ad7c:	bx	lr
   1ad80:	ldr	r3, [pc, #12]	; 1ad94 <lchmod@@Base+0x44d4>
   1ad84:	mov	r1, #0
   1ad88:	add	r3, pc, r3
   1ad8c:	ldr	r2, [r3]
   1ad90:	b	116a0 <__cxa_atexit@plt>
   1ad94:	andeq	r1, r1, r8, ror #7

Disassembly of section .fini:

0001ad98 <.fini>:
   1ad98:	push	{r3, lr}
   1ad9c:	pop	{r3, pc}
