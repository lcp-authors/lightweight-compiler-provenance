
../repos/dvidelabs-flatcc-3b39ef7/test/monster_test_concat/monster_test_concat:     file format elf32-littlearm


Disassembly of section .init:

000126ec <.init>:
   126ec:	push	{r3, lr}
   126f0:	bl	127f0 <_start@@Base+0x3c>
   126f4:	pop	{r3, pc}

Disassembly of section .plt:

000126f8 <free@plt-0x14>:
   126f8:	push	{lr}		; (str lr, [sp, #-4]!)
   126fc:	ldr	lr, [pc, #4]	; 12708 <free@plt-0x4>
   12700:	add	lr, pc, lr
   12704:	ldr	pc, [lr, #8]!
   12708:	strdeq	r9, [r1], -r8

0001270c <free@plt>:
   1270c:	add	ip, pc, #0, 12
   12710:	add	ip, ip, #102400	; 0x19000
   12714:	ldr	pc, [ip, #2296]!	; 0x8f8

00012718 <memcpy@plt>:
   12718:	add	ip, pc, #0, 12
   1271c:	add	ip, ip, #102400	; 0x19000
   12720:	ldr	pc, [ip, #2288]!	; 0x8f0

00012724 <realloc@plt>:
   12724:	add	ip, pc, #0, 12
   12728:	add	ip, ip, #102400	; 0x19000
   1272c:	ldr	pc, [ip, #2280]!	; 0x8e8

00012730 <malloc@plt>:
   12730:	add	ip, pc, #0, 12
   12734:	add	ip, ip, #102400	; 0x19000
   12738:	ldr	pc, [ip, #2272]!	; 0x8e0

0001273c <__libc_start_main@plt>:
   1273c:	add	ip, pc, #0, 12
   12740:	add	ip, ip, #102400	; 0x19000
   12744:	ldr	pc, [ip, #2264]!	; 0x8d8

00012748 <__gmon_start__@plt>:
   12748:	add	ip, pc, #0, 12
   1274c:	add	ip, ip, #102400	; 0x19000
   12750:	ldr	pc, [ip, #2256]!	; 0x8d0

00012754 <bcmp@plt>:
   12754:	add	ip, pc, #0, 12
   12758:	add	ip, ip, #102400	; 0x19000
   1275c:	ldr	pc, [ip, #2248]!	; 0x8c8

00012760 <strlen@plt>:
   12760:	add	ip, pc, #0, 12
   12764:	add	ip, ip, #102400	; 0x19000
   12768:	ldr	pc, [ip, #2240]!	; 0x8c0

0001276c <posix_memalign@plt>:
   1276c:	add	ip, pc, #0, 12
   12770:	add	ip, ip, #102400	; 0x19000
   12774:	ldr	pc, [ip, #2232]!	; 0x8b8

00012778 <memset@plt>:
   12778:	add	ip, pc, #0, 12
   1277c:	add	ip, ip, #102400	; 0x19000
   12780:	ldr	pc, [ip, #2224]!	; 0x8b0

00012784 <strncpy@plt>:
   12784:	add	ip, pc, #0, 12
   12788:	add	ip, ip, #102400	; 0x19000
   1278c:	ldr	pc, [ip, #2216]!	; 0x8a8

00012790 <memchr@plt>:
   12790:	add	ip, pc, #0, 12
   12794:	add	ip, ip, #102400	; 0x19000
   12798:	ldr	pc, [ip, #2208]!	; 0x8a0

0001279c <abort@plt>:
   1279c:	add	ip, pc, #0, 12
   127a0:	add	ip, ip, #102400	; 0x19000
   127a4:	ldr	pc, [ip, #2200]!	; 0x898

000127a8 <__assert_fail@plt>:
   127a8:	add	ip, pc, #0, 12
   127ac:	add	ip, ip, #102400	; 0x19000
   127b0:	ldr	pc, [ip, #2192]!	; 0x890

Disassembly of section .text:

000127b4 <_start@@Base>:
   127b4:	mov	fp, #0
   127b8:	mov	lr, #0
   127bc:	pop	{r1}		; (ldr r1, [sp], #4)
   127c0:	mov	r2, sp
   127c4:	push	{r2}		; (str r2, [sp, #-4]!)
   127c8:	push	{r0}		; (str r0, [sp, #-4]!)
   127cc:	ldr	ip, [pc, #16]	; 127e4 <_start@@Base+0x30>
   127d0:	push	{ip}		; (str ip, [sp, #-4]!)
   127d4:	ldr	r0, [pc, #12]	; 127e8 <_start@@Base+0x34>
   127d8:	ldr	r3, [pc, #12]	; 127ec <_start@@Base+0x38>
   127dc:	bl	1273c <__libc_start_main@plt>
   127e0:	bl	1279c <abort@plt>
   127e4:	andeq	sl, r1, r8, rrx
   127e8:	andeq	r2, r1, r4, lsr #17
   127ec:	andeq	sl, r1, r8
   127f0:	ldr	r3, [pc, #20]	; 1280c <_start@@Base+0x58>
   127f4:	ldr	r2, [pc, #20]	; 12810 <_start@@Base+0x5c>
   127f8:	add	r3, pc, r3
   127fc:	ldr	r2, [r3, r2]
   12800:	cmp	r2, #0
   12804:	bxeq	lr
   12808:	b	12748 <__gmon_start__@plt>
   1280c:	andeq	r9, r1, r0, lsl #16
   12810:	andeq	r0, r0, r4, asr #32
   12814:	ldr	r0, [pc, #24]	; 12834 <_start@@Base+0x80>
   12818:	ldr	r3, [pc, #24]	; 12838 <_start@@Base+0x84>
   1281c:	cmp	r3, r0
   12820:	bxeq	lr
   12824:	ldr	r3, [pc, #16]	; 1283c <_start@@Base+0x88>
   12828:	cmp	r3, #0
   1282c:	bxeq	lr
   12830:	bx	r3
   12834:	andeq	ip, r2, r0, asr r0
   12838:	andeq	ip, r2, r0, asr r0
   1283c:	andeq	r0, r0, r0
   12840:	ldr	r0, [pc, #36]	; 1286c <_start@@Base+0xb8>
   12844:	ldr	r1, [pc, #36]	; 12870 <_start@@Base+0xbc>
   12848:	sub	r1, r1, r0
   1284c:	asr	r1, r1, #2
   12850:	add	r1, r1, r1, lsr #31
   12854:	asrs	r1, r1, #1
   12858:	bxeq	lr
   1285c:	ldr	r3, [pc, #16]	; 12874 <_start@@Base+0xc0>
   12860:	cmp	r3, #0
   12864:	bxeq	lr
   12868:	bx	r3
   1286c:	andeq	ip, r2, r0, asr r0
   12870:	andeq	ip, r2, r0, asr r0
   12874:	andeq	r0, r0, r0
   12878:	push	{r4, lr}
   1287c:	ldr	r4, [pc, #24]	; 1289c <_start@@Base+0xe8>
   12880:	ldrb	r3, [r4]
   12884:	cmp	r3, #0
   12888:	popne	{r4, pc}
   1288c:	bl	12814 <_start@@Base+0x60>
   12890:	mov	r3, #1
   12894:	strb	r3, [r4]
   12898:	pop	{r4, pc}
   1289c:	andeq	ip, r2, r0, asr r0
   128a0:	b	12840 <_start@@Base+0x8c>

000128a4 <main@@Base>:
   128a4:	push	{r4, r5, r6, r7, fp, lr}
   128a8:	add	fp, sp, #16
   128ac:	sub	sp, sp, #240	; 0xf0
   128b0:	add	r4, sp, #4
   128b4:	mov	r0, r4
   128b8:	bl	134cc <flatcc_builder_init@@Base>
   128bc:	movw	r1, #41090	; 0xa082
   128c0:	mov	r0, r4
   128c4:	mov	r2, #0
   128c8:	mov	r3, #0
   128cc:	movt	r1, #1
   128d0:	bl	143e4 <flatcc_builder_start_buffer@@Base>
   128d4:	cmp	r0, #0
   128d8:	bne	128e8 <main@@Base+0x44>
   128dc:	add	r0, sp, #4
   128e0:	mov	r1, #36	; 0x24
   128e4:	bl	159e0 <flatcc_builder_start_table@@Base>
   128e8:	movw	r1, #41080	; 0xa078
   128ec:	add	r0, sp, #4
   128f0:	movt	r1, #1
   128f4:	bl	17b2c <flatcc_builder_create_string_str@@Base>
   128f8:	cmp	r0, #0
   128fc:	beq	12918 <main@@Base+0x74>
   12900:	mov	r4, r0
   12904:	add	r0, sp, #4
   12908:	mov	r1, #3
   1290c:	bl	16ba4 <flatcc_builder_table_add_offset@@Base>
   12910:	cmp	r0, #0
   12914:	strne	r4, [r0]
   12918:	movw	r1, #41436	; 0xa1dc
   1291c:	add	r0, sp, #4
   12920:	mov	r2, #1
   12924:	movt	r1, #1
   12928:	bl	16308 <flatcc_builder_check_required@@Base>
   1292c:	cmp	r0, #0
   12930:	beq	12988 <main@@Base+0xe4>
   12934:	add	r4, sp, #4
   12938:	mov	r0, r4
   1293c:	bl	16388 <flatcc_builder_end_table@@Base>
   12940:	mov	r1, r0
   12944:	mov	r0, r4
   12948:	bl	145d4 <flatcc_builder_end_buffer@@Base>
   1294c:	sub	r1, fp, #20
   12950:	mov	r0, r4
   12954:	bl	17e1c <flatcc_builder_get_direct_buffer@@Base>
   12958:	ldr	r1, [fp, #-20]	; 0xffffffec
   1295c:	movw	r2, #41090	; 0xa082
   12960:	movw	r3, #10664	; 0x29a8
   12964:	movt	r2, #1
   12968:	movt	r3, #1
   1296c:	bl	192a8 <flatcc_verify_table_as_root@@Base>
   12970:	mov	r5, r0
   12974:	mov	r0, r4
   12978:	bl	13a74 <flatcc_builder_clear@@Base>
   1297c:	mov	r0, r5
   12980:	sub	sp, fp, #16
   12984:	pop	{r4, r5, r6, r7, fp, pc}
   12988:	movw	r0, #41095	; 0xa087
   1298c:	movw	r1, #41257	; 0xa129
   12990:	movw	r3, #41355	; 0xa18b
   12994:	movw	r2, #2398	; 0x95e
   12998:	movt	r0, #1
   1299c:	movt	r1, #1
   129a0:	movt	r3, #1
   129a4:	bl	127a8 <__assert_fail@plt>
   129a8:	push	{r4, r5, r6, r7, fp, lr}
   129ac:	add	fp, sp, #16
   129b0:	sub	sp, sp, #8
   129b4:	mov	r1, #0
   129b8:	mov	r2, #32
   129bc:	mov	r3, #16
   129c0:	mov	r4, r0
   129c4:	bl	18684 <flatcc_verify_field@@Base>
   129c8:	cmp	r0, #0
   129cc:	bne	12dd4 <main@@Base+0x530>
   129d0:	mov	r0, r4
   129d4:	mov	r1, #2
   129d8:	mov	r2, #2
   129dc:	mov	r3, #2
   129e0:	bl	18684 <flatcc_verify_field@@Base>
   129e4:	cmp	r0, #0
   129e8:	bne	12dd4 <main@@Base+0x530>
   129ec:	mov	r0, r4
   129f0:	mov	r1, #1
   129f4:	mov	r2, #2
   129f8:	mov	r3, #2
   129fc:	bl	18684 <flatcc_verify_field@@Base>
   12a00:	cmp	r0, #0
   12a04:	bne	12dd4 <main@@Base+0x530>
   12a08:	mov	r0, r4
   12a0c:	mov	r1, #3
   12a10:	mov	r2, #1
   12a14:	bl	18708 <flatcc_verify_string_field@@Base>
   12a18:	cmp	r0, #0
   12a1c:	bne	12dd4 <main@@Base+0x530>
   12a20:	mov	r0, r4
   12a24:	mov	r1, #6
   12a28:	mov	r2, #1
   12a2c:	mov	r3, #1
   12a30:	mov	r5, #1
   12a34:	bl	18684 <flatcc_verify_field@@Base>
   12a38:	cmp	r0, #0
   12a3c:	bne	12dd4 <main@@Base+0x530>
   12a40:	mvn	r0, #0
   12a44:	mov	r1, #5
   12a48:	mov	r2, #0
   12a4c:	mov	r3, #1
   12a50:	str	r5, [sp]
   12a54:	str	r0, [sp, #4]
   12a58:	mov	r0, r4
   12a5c:	bl	187e8 <flatcc_verify_vector_field@@Base>
   12a60:	cmp	r0, #0
   12a64:	bne	12dd4 <main@@Base+0x530>
   12a68:	movw	r3, #10664	; 0x29a8
   12a6c:	mov	r0, r4
   12a70:	mov	r1, #11
   12a74:	mov	r2, #0
   12a78:	movt	r3, #1
   12a7c:	bl	18bd0 <flatcc_verify_table_vector_field@@Base>
   12a80:	cmp	r0, #0
   12a84:	bne	12dd4 <main@@Base+0x530>
   12a88:	mov	r0, r4
   12a8c:	mov	r1, #10
   12a90:	mov	r2, #0
   12a94:	bl	188e0 <flatcc_verify_string_vector_field@@Base>
   12a98:	cmp	r0, #0
   12a9c:	bne	12dd4 <main@@Base+0x530>
   12aa0:	mov	r0, r4
   12aa4:	mov	r1, #28
   12aa8:	mov	r2, #0
   12aac:	bl	188e0 <flatcc_verify_string_vector_field@@Base>
   12ab0:	cmp	r0, #0
   12ab4:	bne	12dd4 <main@@Base+0x530>
   12ab8:	mvn	r0, #0
   12abc:	mov	r1, #1
   12ac0:	mov	r2, #0
   12ac4:	mov	r3, #1
   12ac8:	str	r1, [sp]
   12acc:	str	r0, [sp, #4]
   12ad0:	mov	r0, r4
   12ad4:	mov	r1, #24
   12ad8:	bl	187e8 <flatcc_verify_vector_field@@Base>
   12adc:	cmp	r0, #0
   12ae0:	bne	12dd4 <main@@Base+0x530>
   12ae4:	mvn	r0, #-536870912	; 0xe0000000
   12ae8:	mov	r1, #4
   12aec:	mov	r2, #0
   12af0:	mov	r3, #8
   12af4:	str	r1, [sp]
   12af8:	str	r0, [sp, #4]
   12afc:	mov	r0, r4
   12b00:	mov	r1, #29
   12b04:	bl	187e8 <flatcc_verify_vector_field@@Base>
   12b08:	cmp	r0, #0
   12b0c:	bne	12dd4 <main@@Base+0x530>
   12b10:	movw	r5, #10664	; 0x29a8
   12b14:	mov	r0, r4
   12b18:	mov	r1, #12
   12b1c:	mov	r2, #0
   12b20:	movt	r5, #1
   12b24:	mov	r3, r5
   12b28:	bl	18a68 <flatcc_verify_table_field@@Base>
   12b2c:	cmp	r0, #0
   12b30:	bne	12dd4 <main@@Base+0x530>
   12b34:	movw	r3, #11772	; 0x2dfc
   12b38:	mov	r0, r4
   12b3c:	mov	r1, #8
   12b40:	mov	r2, #0
   12b44:	movt	r3, #1
   12b48:	bl	19ad8 <flatcc_verify_union_field@@Base>
   12b4c:	cmp	r0, #0
   12b50:	bne	12dd4 <main@@Base+0x530>
   12b54:	mvn	r6, #-1073741824	; 0xc0000000
   12b58:	mov	r7, #2
   12b5c:	mov	r0, r4
   12b60:	mov	r1, #9
   12b64:	mov	r2, #0
   12b68:	mov	r3, #4
   12b6c:	str	r7, [sp]
   12b70:	str	r6, [sp, #4]
   12b74:	bl	187e8 <flatcc_verify_vector_field@@Base>
   12b78:	cmp	r0, #0
   12b7c:	bne	12dd4 <main@@Base+0x530>
   12b80:	mov	r0, r4
   12b84:	mov	r1, #31
   12b88:	mov	r2, #0
   12b8c:	mov	r3, #4
   12b90:	str	r7, [sp]
   12b94:	str	r6, [sp, #4]
   12b98:	bl	187e8 <flatcc_verify_vector_field@@Base>
   12b9c:	cmp	r0, #0
   12ba0:	bne	12dd4 <main@@Base+0x530>
   12ba4:	mov	r0, #1
   12ba8:	mov	r1, #13
   12bac:	mov	r2, #0
   12bb0:	mov	r3, #0
   12bb4:	stm	sp, {r0, r5}
   12bb8:	mov	r0, r4
   12bbc:	bl	197b8 <flatcc_verify_table_as_nested_root@@Base>
   12bc0:	cmp	r0, #0
   12bc4:	bne	12dd4 <main@@Base+0x530>
   12bc8:	movw	r3, #11816	; 0x2e28
   12bcc:	mov	r0, r4
   12bd0:	mov	r1, #14
   12bd4:	mov	r2, #0
   12bd8:	movt	r3, #1
   12bdc:	bl	18a68 <flatcc_verify_table_field@@Base>
   12be0:	cmp	r0, #0
   12be4:	bne	12dd4 <main@@Base+0x530>
   12be8:	mov	r0, r4
   12bec:	mov	r1, #15
   12bf0:	mov	r2, #1
   12bf4:	mov	r3, #1
   12bf8:	bl	18684 <flatcc_verify_field@@Base>
   12bfc:	cmp	r0, #0
   12c00:	bne	12dd4 <main@@Base+0x530>
   12c04:	mov	r0, r4
   12c08:	mov	r1, #16
   12c0c:	mov	r2, #4
   12c10:	mov	r3, #4
   12c14:	bl	18684 <flatcc_verify_field@@Base>
   12c18:	cmp	r0, #0
   12c1c:	bne	12dd4 <main@@Base+0x530>
   12c20:	mov	r0, r4
   12c24:	mov	r1, #17
   12c28:	mov	r2, #4
   12c2c:	mov	r3, #4
   12c30:	bl	18684 <flatcc_verify_field@@Base>
   12c34:	cmp	r0, #0
   12c38:	bne	12dd4 <main@@Base+0x530>
   12c3c:	mov	r0, r4
   12c40:	mov	r1, #18
   12c44:	mov	r2, #8
   12c48:	mov	r3, #8
   12c4c:	bl	18684 <flatcc_verify_field@@Base>
   12c50:	cmp	r0, #0
   12c54:	bne	12dd4 <main@@Base+0x530>
   12c58:	mov	r0, r4
   12c5c:	mov	r1, #19
   12c60:	mov	r2, #8
   12c64:	mov	r3, #8
   12c68:	bl	18684 <flatcc_verify_field@@Base>
   12c6c:	cmp	r0, #0
   12c70:	bne	12dd4 <main@@Base+0x530>
   12c74:	mov	r0, r4
   12c78:	mov	r1, #20
   12c7c:	mov	r2, #4
   12c80:	mov	r3, #4
   12c84:	bl	18684 <flatcc_verify_field@@Base>
   12c88:	cmp	r0, #0
   12c8c:	bne	12dd4 <main@@Base+0x530>
   12c90:	mov	r0, r4
   12c94:	mov	r1, #21
   12c98:	mov	r2, #4
   12c9c:	mov	r3, #4
   12ca0:	bl	18684 <flatcc_verify_field@@Base>
   12ca4:	cmp	r0, #0
   12ca8:	bne	12dd4 <main@@Base+0x530>
   12cac:	mov	r0, r4
   12cb0:	mov	r1, #22
   12cb4:	mov	r2, #8
   12cb8:	mov	r3, #8
   12cbc:	bl	18684 <flatcc_verify_field@@Base>
   12cc0:	cmp	r0, #0
   12cc4:	bne	12dd4 <main@@Base+0x530>
   12cc8:	mov	r0, r4
   12ccc:	mov	r1, #23
   12cd0:	mov	r2, #8
   12cd4:	mov	r3, #8
   12cd8:	bl	18684 <flatcc_verify_field@@Base>
   12cdc:	cmp	r0, #0
   12ce0:	bne	12dd4 <main@@Base+0x530>
   12ce4:	mov	r0, r4
   12ce8:	mov	r1, #25
   12cec:	mov	r2, #4
   12cf0:	mov	r3, #4
   12cf4:	bl	18684 <flatcc_verify_field@@Base>
   12cf8:	cmp	r0, #0
   12cfc:	bne	12dd4 <main@@Base+0x530>
   12d00:	mov	r0, r4
   12d04:	mov	r1, #26
   12d08:	mov	r2, #4
   12d0c:	mov	r3, #4
   12d10:	bl	18684 <flatcc_verify_field@@Base>
   12d14:	cmp	r0, #0
   12d18:	bne	12dd4 <main@@Base+0x530>
   12d1c:	mov	r0, r4
   12d20:	mov	r1, #27
   12d24:	mov	r2, #4
   12d28:	mov	r3, #4
   12d2c:	bl	18684 <flatcc_verify_field@@Base>
   12d30:	cmp	r0, #0
   12d34:	bne	12dd4 <main@@Base+0x530>
   12d38:	mvn	r0, #0
   12d3c:	mov	r1, #1
   12d40:	mov	r2, #0
   12d44:	mov	r3, #1
   12d48:	str	r1, [sp]
   12d4c:	str	r0, [sp, #4]
   12d50:	mov	r0, r4
   12d54:	mov	r1, #30
   12d58:	bl	187e8 <flatcc_verify_vector_field@@Base>
   12d5c:	cmp	r0, #0
   12d60:	bne	12dd4 <main@@Base+0x530>
   12d64:	mvn	r5, #-536870912	; 0xe0000000
   12d68:	mov	r6, #8
   12d6c:	mov	r0, r4
   12d70:	mov	r1, #32
   12d74:	mov	r2, #0
   12d78:	mov	r3, #8
   12d7c:	str	r6, [sp]
   12d80:	str	r5, [sp, #4]
   12d84:	bl	187e8 <flatcc_verify_vector_field@@Base>
   12d88:	cmp	r0, #0
   12d8c:	bne	12dd4 <main@@Base+0x530>
   12d90:	mov	r0, r4
   12d94:	mov	r1, #33	; 0x21
   12d98:	mov	r2, #0
   12d9c:	mov	r3, #8
   12da0:	str	r6, [sp]
   12da4:	str	r5, [sp, #4]
   12da8:	bl	187e8 <flatcc_verify_vector_field@@Base>
   12dac:	cmp	r0, #0
   12db0:	bne	12dd4 <main@@Base+0x530>
   12db4:	movw	r3, #11904	; 0x2e80
   12db8:	mov	r0, r4
   12dbc:	mov	r1, #34	; 0x22
   12dc0:	mov	r2, #0
   12dc4:	movt	r3, #1
   12dc8:	bl	18a68 <flatcc_verify_table_field@@Base>
   12dcc:	cmp	r0, #0
   12dd0:	beq	12ddc <main@@Base+0x538>
   12dd4:	sub	sp, fp, #16
   12dd8:	pop	{r4, r5, r6, r7, fp, pc}
   12ddc:	movw	r3, #11912	; 0x2e88
   12de0:	mov	r0, r4
   12de4:	mov	r1, #35	; 0x23
   12de8:	mov	r2, #0
   12dec:	movt	r3, #1
   12df0:	sub	sp, fp, #16
   12df4:	pop	{r4, r5, r6, r7, fp, lr}
   12df8:	b	18a68 <flatcc_verify_table_field@@Base>
   12dfc:	ldrb	r1, [r0, #12]
   12e00:	sub	r1, r1, #1
   12e04:	uxtb	r2, r1
   12e08:	cmp	r2, #3
   12e0c:	movhi	r0, #0
   12e10:	bxhi	lr
   12e14:	movw	r2, #41440	; 0xa1e0
   12e18:	sxtb	r1, r1
   12e1c:	movt	r2, #1
   12e20:	ldr	r1, [r2, r1, lsl #2]
   12e24:	b	18eb4 <flatcc_verify_union_table@@Base>
   12e28:	push	{r4, sl, fp, lr}
   12e2c:	add	fp, sp, #8
   12e30:	mov	r1, #0
   12e34:	mov	r2, #0
   12e38:	mov	r4, r0
   12e3c:	bl	18708 <flatcc_verify_string_field@@Base>
   12e40:	cmp	r0, #0
   12e44:	popne	{r4, sl, fp, pc}
   12e48:	mov	r0, r4
   12e4c:	mov	r1, #1
   12e50:	mov	r2, #8
   12e54:	mov	r3, #8
   12e58:	bl	18684 <flatcc_verify_field@@Base>
   12e5c:	cmp	r0, #0
   12e60:	beq	12e68 <main@@Base+0x5c4>
   12e64:	pop	{r4, sl, fp, pc}
   12e68:	mov	r0, r4
   12e6c:	mov	r1, #2
   12e70:	mov	r2, #2
   12e74:	mov	r3, #2
   12e78:	pop	{r4, sl, fp, lr}
   12e7c:	b	18684 <flatcc_verify_field@@Base>
   12e80:	mov	r0, #0
   12e84:	bx	lr
   12e88:	push	{r4, r5, r6, sl, fp, lr}
   12e8c:	add	fp, sp, #16
   12e90:	sub	sp, sp, #8
   12e94:	mvn	r5, #0
   12e98:	mov	r6, #1
   12e9c:	mov	r1, #0
   12ea0:	mov	r2, #0
   12ea4:	mov	r3, #1
   12ea8:	mov	r4, r0
   12eac:	str	r6, [sp]
   12eb0:	str	r5, [sp, #4]
   12eb4:	bl	187e8 <flatcc_verify_vector_field@@Base>
   12eb8:	cmp	r0, #0
   12ebc:	bne	12ee4 <main@@Base+0x640>
   12ec0:	mov	r0, r4
   12ec4:	mov	r1, #1
   12ec8:	mov	r2, #0
   12ecc:	mov	r3, #1
   12ed0:	str	r6, [sp]
   12ed4:	str	r5, [sp, #4]
   12ed8:	bl	187e8 <flatcc_verify_vector_field@@Base>
   12edc:	cmp	r0, #0
   12ee0:	beq	12eec <main@@Base+0x648>
   12ee4:	sub	sp, fp, #16
   12ee8:	pop	{r4, r5, r6, sl, fp, pc}
   12eec:	movw	r0, #10664	; 0x29a8
   12ef0:	mov	r1, #1
   12ef4:	mov	r2, #0
   12ef8:	mov	r3, #0
   12efc:	movt	r0, #1
   12f00:	str	r1, [sp]
   12f04:	mov	r1, #2
   12f08:	str	r0, [sp, #4]
   12f0c:	mov	r0, r4
   12f10:	bl	197b8 <flatcc_verify_table_as_nested_root@@Base>
   12f14:	sub	sp, fp, #16
   12f18:	pop	{r4, r5, r6, sl, fp, pc}
   12f1c:	push	{r4, sl, fp, lr}
   12f20:	add	fp, sp, #8
   12f24:	mov	r1, #0
   12f28:	mov	r2, #1
   12f2c:	mov	r3, #1
   12f30:	mov	r4, r0
   12f34:	bl	18684 <flatcc_verify_field@@Base>
   12f38:	cmp	r0, #0
   12f3c:	bne	12f78 <main@@Base+0x6d4>
   12f40:	mov	r0, r4
   12f44:	mov	r1, #1
   12f48:	mov	r2, #1
   12f4c:	mov	r3, #1
   12f50:	bl	18684 <flatcc_verify_field@@Base>
   12f54:	cmp	r0, #0
   12f58:	popne	{r4, sl, fp, pc}
   12f5c:	mov	r0, r4
   12f60:	mov	r1, #2
   12f64:	mov	r2, #1
   12f68:	mov	r3, #1
   12f6c:	bl	18684 <flatcc_verify_field@@Base>
   12f70:	cmp	r0, #0
   12f74:	beq	12f7c <main@@Base+0x6d8>
   12f78:	pop	{r4, sl, fp, pc}
   12f7c:	mov	r0, r4
   12f80:	mov	r1, #3
   12f84:	mov	r2, #1
   12f88:	mov	r3, #1
   12f8c:	pop	{r4, sl, fp, lr}
   12f90:	b	18684 <flatcc_verify_field@@Base>
   12f94:	mov	r0, #0
   12f98:	bx	lr
   12f9c:	push	{r4, sl, fp, lr}
   12fa0:	add	fp, sp, #8
   12fa4:	movw	r3, #12292	; 0x3004
   12fa8:	mov	r1, #0
   12fac:	mov	r2, #0
   12fb0:	mov	r4, r0
   12fb4:	movt	r3, #1
   12fb8:	bl	18a68 <flatcc_verify_table_field@@Base>
   12fbc:	cmp	r0, #0
   12fc0:	popne	{r4, sl, fp, pc}
   12fc4:	movw	r3, #12396	; 0x306c
   12fc8:	mov	r0, r4
   12fcc:	mov	r1, #1
   12fd0:	mov	r2, #0
   12fd4:	movt	r3, #1
   12fd8:	bl	18a68 <flatcc_verify_table_field@@Base>
   12fdc:	cmp	r0, #0
   12fe0:	beq	12fe8 <main@@Base+0x744>
   12fe4:	pop	{r4, sl, fp, pc}
   12fe8:	movw	r3, #11772	; 0x2dfc
   12fec:	mov	r0, r4
   12ff0:	mov	r1, #3
   12ff4:	mov	r2, #0
   12ff8:	movt	r3, #1
   12ffc:	pop	{r4, sl, fp, lr}
   13000:	b	19c60 <flatcc_verify_union_vector_field@@Base>
   13004:	push	{r4, sl, fp, lr}
   13008:	add	fp, sp, #8
   1300c:	movw	r3, #12564	; 0x3114
   13010:	mov	r1, #0
   13014:	mov	r2, #0
   13018:	mov	r4, r0
   1301c:	movt	r3, #1
   13020:	bl	18a68 <flatcc_verify_table_field@@Base>
   13024:	cmp	r0, #0
   13028:	popne	{r4, sl, fp, pc}
   1302c:	movw	r3, #12812	; 0x320c
   13030:	mov	r0, r4
   13034:	mov	r1, #1
   13038:	mov	r2, #0
   1303c:	movt	r3, #1
   13040:	bl	18a68 <flatcc_verify_table_field@@Base>
   13044:	cmp	r0, #0
   13048:	beq	13050 <main@@Base+0x7ac>
   1304c:	pop	{r4, sl, fp, pc}
   13050:	movw	r3, #12872	; 0x3248
   13054:	mov	r0, r4
   13058:	mov	r1, #2
   1305c:	mov	r2, #0
   13060:	movt	r3, #1
   13064:	pop	{r4, sl, fp, lr}
   13068:	b	18a68 <flatcc_verify_table_field@@Base>
   1306c:	push	{r4, sl, fp, lr}
   13070:	add	fp, sp, #8
   13074:	movw	r3, #12932	; 0x3284
   13078:	mov	r1, #1
   1307c:	mov	r2, #0
   13080:	mov	r4, r0
   13084:	movt	r3, #1
   13088:	bl	19ad8 <flatcc_verify_union_field@@Base>
   1308c:	cmp	r0, #0
   13090:	bne	130f4 <main@@Base+0x850>
   13094:	movw	r3, #12932	; 0x3284
   13098:	mov	r0, r4
   1309c:	mov	r1, #3
   130a0:	mov	r2, #0
   130a4:	movt	r3, #1
   130a8:	bl	19ad8 <flatcc_verify_union_field@@Base>
   130ac:	cmp	r0, #0
   130b0:	bne	130f4 <main@@Base+0x850>
   130b4:	movw	r3, #12932	; 0x3284
   130b8:	mov	r0, r4
   130bc:	mov	r1, #5
   130c0:	mov	r2, #0
   130c4:	movt	r3, #1
   130c8:	bl	19ad8 <flatcc_verify_union_field@@Base>
   130cc:	cmp	r0, #0
   130d0:	popne	{r4, sl, fp, pc}
   130d4:	movw	r3, #12932	; 0x3284
   130d8:	mov	r0, r4
   130dc:	mov	r1, #7
   130e0:	mov	r2, #0
   130e4:	movt	r3, #1
   130e8:	bl	19ad8 <flatcc_verify_union_field@@Base>
   130ec:	cmp	r0, #0
   130f0:	beq	130f8 <main@@Base+0x854>
   130f4:	pop	{r4, sl, fp, pc}
   130f8:	movw	r3, #12932	; 0x3284
   130fc:	mov	r0, r4
   13100:	mov	r1, #9
   13104:	mov	r2, #0
   13108:	movt	r3, #1
   1310c:	pop	{r4, sl, fp, lr}
   13110:	b	19c60 <flatcc_verify_union_vector_field@@Base>
   13114:	push	{r4, sl, fp, lr}
   13118:	add	fp, sp, #8
   1311c:	mov	r1, #0
   13120:	mov	r2, #0
   13124:	mov	r4, r0
   13128:	bl	18708 <flatcc_verify_string_field@@Base>
   1312c:	cmp	r0, #0
   13130:	bne	131f0 <main@@Base+0x94c>
   13134:	mov	r0, r4
   13138:	mov	r1, #1
   1313c:	mov	r2, #4
   13140:	mov	r3, #4
   13144:	bl	18684 <flatcc_verify_field@@Base>
   13148:	cmp	r0, #0
   1314c:	bne	131f0 <main@@Base+0x94c>
   13150:	mov	r0, r4
   13154:	mov	r1, #2
   13158:	mov	r2, #0
   1315c:	bl	18708 <flatcc_verify_string_field@@Base>
   13160:	cmp	r0, #0
   13164:	bne	131f0 <main@@Base+0x94c>
   13168:	mov	r0, r4
   1316c:	mov	r1, #3
   13170:	mov	r2, #8
   13174:	mov	r3, #8
   13178:	bl	18684 <flatcc_verify_field@@Base>
   1317c:	cmp	r0, #0
   13180:	bne	131f0 <main@@Base+0x94c>
   13184:	mov	r0, r4
   13188:	mov	r1, #4
   1318c:	mov	r2, #0
   13190:	bl	18708 <flatcc_verify_string_field@@Base>
   13194:	cmp	r0, #0
   13198:	bne	131f0 <main@@Base+0x94c>
   1319c:	mov	r0, r4
   131a0:	mov	r1, #5
   131a4:	mov	r2, #8
   131a8:	mov	r3, #8
   131ac:	bl	18684 <flatcc_verify_field@@Base>
   131b0:	cmp	r0, #0
   131b4:	bne	131f0 <main@@Base+0x94c>
   131b8:	mov	r0, r4
   131bc:	mov	r1, #6
   131c0:	mov	r2, #4
   131c4:	mov	r3, #4
   131c8:	bl	18684 <flatcc_verify_field@@Base>
   131cc:	cmp	r0, #0
   131d0:	popne	{r4, sl, fp, pc}
   131d4:	mov	r0, r4
   131d8:	mov	r1, #7
   131dc:	mov	r2, #8
   131e0:	mov	r3, #8
   131e4:	bl	18684 <flatcc_verify_field@@Base>
   131e8:	cmp	r0, #0
   131ec:	beq	131f4 <main@@Base+0x950>
   131f0:	pop	{r4, sl, fp, pc}
   131f4:	mov	r0, r4
   131f8:	mov	r1, #8
   131fc:	mov	r2, #4
   13200:	mov	r3, #4
   13204:	pop	{r4, sl, fp, lr}
   13208:	b	18684 <flatcc_verify_field@@Base>
   1320c:	push	{r4, sl, fp, lr}
   13210:	add	fp, sp, #8
   13214:	mov	r1, #0
   13218:	mov	r2, #8
   1321c:	mov	r3, #8
   13220:	mov	r4, r0
   13224:	bl	18684 <flatcc_verify_field@@Base>
   13228:	cmp	r0, #0
   1322c:	popne	{r4, sl, fp, pc}
   13230:	mov	r0, r4
   13234:	mov	r1, #1
   13238:	mov	r2, #4
   1323c:	mov	r3, #4
   13240:	pop	{r4, sl, fp, lr}
   13244:	b	18684 <flatcc_verify_field@@Base>
   13248:	push	{r4, sl, fp, lr}
   1324c:	add	fp, sp, #8
   13250:	mov	r1, #0
   13254:	mov	r2, #8
   13258:	mov	r3, #8
   1325c:	mov	r4, r0
   13260:	bl	18684 <flatcc_verify_field@@Base>
   13264:	cmp	r0, #0
   13268:	popne	{r4, sl, fp, pc}
   1326c:	mov	r0, r4
   13270:	mov	r1, #1
   13274:	mov	r2, #4
   13278:	mov	r3, #4
   1327c:	pop	{r4, sl, fp, lr}
   13280:	b	18684 <flatcc_verify_field@@Base>
   13284:	ldrb	r2, [r0, #12]
   13288:	sub	r1, r2, #2
   1328c:	cmp	r1, #9
   13290:	bhi	132d0 <main@@Base+0xa2c>
   13294:	add	r2, pc, #0
   13298:	ldr	pc, [r2, r1, lsl #2]
   1329c:	andeq	r3, r1, r4, ror #5
   132a0:	ldrdeq	r3, [r1], -ip
   132a4:	ldrdeq	r3, [r1], -ip
   132a8:	ldrdeq	r3, [r1], -ip
   132ac:	ldrdeq	r3, [r1], -ip
   132b0:	ldrdeq	r3, [r1], -ip
   132b4:	strdeq	r3, [r1], -r0
   132b8:	andeq	r3, r1, r4, asr #5
   132bc:	andeq	r3, r1, r4, asr #5
   132c0:	ldrdeq	r3, [r1], -r8
   132c4:	mov	r1, #4
   132c8:	mov	r2, #4
   132cc:	b	18fa0 <flatcc_verify_union_struct@@Base>
   132d0:	cmp	r2, #255	; 0xff
   132d4:	bne	132dc <main@@Base+0xa38>
   132d8:	b	18ff8 <flatcc_verify_union_string@@Base>
   132dc:	mov	r0, #0
   132e0:	bx	lr
   132e4:	movw	r1, #13052	; 0x32fc
   132e8:	movt	r1, #1
   132ec:	b	18eb4 <flatcc_verify_union_table@@Base>
   132f0:	mov	r1, #2
   132f4:	mov	r2, #2
   132f8:	b	18fa0 <flatcc_verify_union_struct@@Base>
   132fc:	mov	r1, #0
   13300:	mov	r2, #4
   13304:	mov	r3, #4
   13308:	b	18684 <flatcc_verify_field@@Base>

0001330c <flatcc_builder_default_alloc@@Base>:
   1330c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13310:	add	fp, sp, #24
   13314:	mov	r4, r1
   13318:	cmp	r2, #0
   1331c:	beq	13364 <flatcc_builder_default_alloc@@Base+0x58>
   13320:	ldr	r0, [fp, #8]
   13324:	mov	r8, r3
   13328:	sub	r1, r0, #1
   1332c:	cmp	r1, #6
   13330:	bhi	13394 <flatcc_builder_default_alloc@@Base+0x88>
   13334:	add	r3, pc, #4
   13338:	mov	r0, #256	; 0x100
   1333c:	ldr	pc, [r3, r1, lsl #2]
   13340:	andeq	r3, r1, r8, lsr #7
   13344:	muleq	r1, r4, r3
   13348:	muleq	r1, r4, r3
   1334c:	andeq	r3, r1, ip, asr r3
   13350:	muleq	r1, ip, r3
   13354:	muleq	r1, r4, r3
   13358:	andeq	r3, r1, r4, lsr #7
   1335c:	mov	r0, #288	; 0x120
   13360:	b	133a8 <flatcc_builder_default_alloc@@Base+0x9c>
   13364:	ldr	r0, [r4]
   13368:	cmp	r0, #0
   1336c:	beq	13388 <flatcc_builder_default_alloc@@Base+0x7c>
   13370:	bl	1270c <free@plt>
   13374:	mov	r6, #0
   13378:	mov	r0, r6
   1337c:	str	r6, [r4]
   13380:	str	r6, [r4, #4]
   13384:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13388:	mov	r6, #0
   1338c:	mov	r0, r6
   13390:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13394:	mov	r0, #32
   13398:	b	133a8 <flatcc_builder_default_alloc@@Base+0x9c>
   1339c:	mov	r0, r2
   133a0:	b	133a8 <flatcc_builder_default_alloc@@Base+0x9c>
   133a4:	mov	r0, #64	; 0x40
   133a8:	mov	r7, r0
   133ac:	lsl	r0, r0, #1
   133b0:	cmp	r7, r2
   133b4:	bcc	133a8 <flatcc_builder_default_alloc@@Base+0x9c>
   133b8:	ldr	r0, [r4, #4]
   133bc:	mov	r6, #0
   133c0:	cmp	r0, r2
   133c4:	lsrcs	r0, r0, #1
   133c8:	cmpcs	r0, r7
   133cc:	bcs	13410 <flatcc_builder_default_alloc@@Base+0x104>
   133d0:	ldr	r0, [r4]
   133d4:	mov	r1, r7
   133d8:	bl	12724 <realloc@plt>
   133dc:	cmp	r0, #0
   133e0:	beq	13418 <flatcc_builder_default_alloc@@Base+0x10c>
   133e4:	mov	r5, r0
   133e8:	cmp	r8, #0
   133ec:	beq	1340c <flatcc_builder_default_alloc@@Base+0x100>
   133f0:	ldr	r1, [r4, #4]
   133f4:	cmp	r7, r1
   133f8:	bls	1340c <flatcc_builder_default_alloc@@Base+0x100>
   133fc:	add	r0, r5, r1
   13400:	sub	r2, r7, r1
   13404:	mov	r1, #0
   13408:	bl	12778 <memset@plt>
   1340c:	stm	r4, {r5, r7}
   13410:	mov	r0, r6
   13414:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13418:	mvn	r6, #0
   1341c:	mov	r0, r6
   13420:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00013424 <flatcc_builder_flush_vtable_cache@@Base>:
   13424:	push	{r4, r5, fp, lr}
   13428:	add	fp, sp, #8
   1342c:	mov	r4, r0
   13430:	ldr	r0, [r0, #116]	; 0x74
   13434:	cmp	r0, #0
   13438:	popeq	{r4, r5, fp, pc}
   1343c:	ldr	r0, [r4, #92]	; 0x5c
   13440:	ldr	r2, [r4, #96]	; 0x60
   13444:	mov	r1, #0
   13448:	mov	r5, #0
   1344c:	bl	12778 <memset@plt>
   13450:	mov	r0, #16
   13454:	str	r5, [r4, #120]	; 0x78
   13458:	str	r0, [r4, #124]	; 0x7c
   1345c:	pop	{r4, r5, fp, pc}

00013460 <flatcc_builder_custom_init@@Base>:
   13460:	push	{r4, r5, r6, r7, fp, lr}
   13464:	add	fp, sp, #16
   13468:	mov	r6, r2
   1346c:	mov	r7, r1
   13470:	mov	r1, #0
   13474:	mov	r2, #232	; 0xe8
   13478:	mov	r5, r3
   1347c:	mov	r4, r0
   13480:	bl	12778 <memset@plt>
   13484:	ldr	r0, [fp, #8]
   13488:	cmp	r7, #0
   1348c:	bne	134a4 <flatcc_builder_custom_init@@Base+0x44>
   13490:	movw	r7, #33348	; 0x8244
   13494:	mov	r1, #1
   13498:	add	r6, r4, #188	; 0xbc
   1349c:	movt	r7, #1
   134a0:	str	r1, [r4, #184]	; 0xb8
   134a4:	movw	r1, #13068	; 0x330c
   134a8:	cmp	r5, #0
   134ac:	str	r6, [r4, #36]	; 0x24
   134b0:	str	r0, [r4, #40]	; 0x28
   134b4:	mov	r0, #0
   134b8:	str	r7, [r4, #44]	; 0x2c
   134bc:	movt	r1, #1
   134c0:	movne	r1, r5
   134c4:	str	r1, [r4, #48]	; 0x30
   134c8:	pop	{r4, r5, r6, r7, fp, pc}

000134cc <flatcc_builder_init@@Base>:
   134cc:	push	{r4, r5, fp, lr}
   134d0:	add	fp, sp, #8
   134d4:	mov	r1, #0
   134d8:	mov	r2, #232	; 0xe8
   134dc:	mov	r4, r0
   134e0:	mov	r5, #0
   134e4:	bl	12778 <memset@plt>
   134e8:	mov	r0, #1
   134ec:	movw	r1, #33348	; 0x8244
   134f0:	add	r2, r4, #188	; 0xbc
   134f4:	str	r0, [r4, #184]	; 0xb8
   134f8:	movw	r0, #13068	; 0x330c
   134fc:	movt	r1, #1
   13500:	str	r2, [r4, #36]	; 0x24
   13504:	str	r5, [r4, #40]	; 0x28
   13508:	movt	r0, #1
   1350c:	str	r1, [r4, #44]	; 0x2c
   13510:	str	r0, [r4, #48]	; 0x30
   13514:	mov	r0, #0
   13518:	pop	{r4, r5, fp, pc}

0001351c <flatcc_builder_custom_reset@@Base>:
   1351c:	push	{r4, r5, r6, sl, fp, lr}
   13520:	add	fp, sp, #16
   13524:	sub	sp, sp, #8
   13528:	mov	r5, r1
   1352c:	mov	r4, r0
   13530:	cmp	r2, #0
   13534:	beq	13594 <flatcc_builder_custom_reset@@Base+0x78>
   13538:	mov	r1, r4
   1353c:	ldr	r0, [r1, #52]!	; 0x34
   13540:	cmp	r0, #0
   13544:	beq	135c0 <flatcc_builder_custom_reset@@Base+0xa4>
   13548:	ldr	r0, [r4, #40]	; 0x28
   1354c:	ldr	r6, [r4, #48]	; 0x30
   13550:	mov	r2, #0
   13554:	mov	r3, #1
   13558:	str	r2, [sp]
   1355c:	mov	r2, #1
   13560:	blx	r6
   13564:	mvn	r6, #0
   13568:	cmp	r0, #0
   1356c:	bne	13874 <flatcc_builder_custom_reset@@Base+0x358>
   13570:	ldr	r0, [r4, #52]	; 0x34
   13574:	ldr	r2, [r4, #56]	; 0x38
   13578:	mov	r1, #0
   1357c:	bl	12778 <memset@plt>
   13580:	mov	r1, r4
   13584:	ldr	r0, [r1, #60]!	; 0x3c
   13588:	cmp	r0, #0
   1358c:	bne	135dc <flatcc_builder_custom_reset@@Base+0xc0>
   13590:	b	13628 <flatcc_builder_custom_reset@@Base+0x10c>
   13594:	ldr	r0, [r4, #52]	; 0x34
   13598:	ldr	r2, [r4, #56]	; 0x38
   1359c:	cmp	r0, #0
   135a0:	beq	13690 <flatcc_builder_custom_reset@@Base+0x174>
   135a4:	mov	r1, #0
   135a8:	bl	12778 <memset@plt>
   135ac:	ldr	r0, [r4, #60]	; 0x3c
   135b0:	ldr	r2, [r4, #64]	; 0x40
   135b4:	cmp	r0, #0
   135b8:	bne	136a8 <flatcc_builder_custom_reset@@Base+0x18c>
   135bc:	b	136c4 <flatcc_builder_custom_reset@@Base+0x1a8>
   135c0:	ldr	r0, [r4, #56]	; 0x38
   135c4:	cmp	r0, #0
   135c8:	bne	13a48 <flatcc_builder_custom_reset@@Base+0x52c>
   135cc:	mov	r1, r4
   135d0:	ldr	r0, [r1, #60]!	; 0x3c
   135d4:	cmp	r0, #0
   135d8:	beq	13628 <flatcc_builder_custom_reset@@Base+0x10c>
   135dc:	ldr	r0, [r4, #40]	; 0x28
   135e0:	ldr	r6, [r4, #48]	; 0x30
   135e4:	mov	r2, #1
   135e8:	mov	r3, #1
   135ec:	str	r2, [sp]
   135f0:	mov	r2, #1
   135f4:	blx	r6
   135f8:	mvn	r6, #0
   135fc:	cmp	r0, #0
   13600:	bne	13874 <flatcc_builder_custom_reset@@Base+0x358>
   13604:	ldr	r0, [r4, #60]	; 0x3c
   13608:	ldr	r2, [r4, #64]	; 0x40
   1360c:	mov	r1, #0
   13610:	bl	12778 <memset@plt>
   13614:	mov	r1, r4
   13618:	ldr	r0, [r1, #68]!	; 0x44
   1361c:	cmp	r0, #0
   13620:	bne	13644 <flatcc_builder_custom_reset@@Base+0x128>
   13624:	b	13880 <flatcc_builder_custom_reset@@Base+0x364>
   13628:	ldr	r0, [r4, #64]	; 0x40
   1362c:	cmp	r0, #0
   13630:	bne	13a48 <flatcc_builder_custom_reset@@Base+0x52c>
   13634:	mov	r1, r4
   13638:	ldr	r0, [r1, #68]!	; 0x44
   1363c:	cmp	r0, #0
   13640:	beq	13880 <flatcc_builder_custom_reset@@Base+0x364>
   13644:	ldr	r0, [r4, #40]	; 0x28
   13648:	ldr	r6, [r4, #48]	; 0x30
   1364c:	mov	r2, #2
   13650:	mov	r3, #1
   13654:	str	r2, [sp]
   13658:	mov	r2, #1
   1365c:	blx	r6
   13660:	mvn	r6, #0
   13664:	cmp	r0, #0
   13668:	bne	13874 <flatcc_builder_custom_reset@@Base+0x358>
   1366c:	ldr	r0, [r4, #68]	; 0x44
   13670:	ldr	r2, [r4, #72]	; 0x48
   13674:	mov	r1, #0
   13678:	bl	12778 <memset@plt>
   1367c:	mov	r1, r4
   13680:	ldr	r0, [r1, #76]!	; 0x4c
   13684:	cmp	r0, #0
   13688:	bne	1389c <flatcc_builder_custom_reset@@Base+0x380>
   1368c:	b	138e8 <flatcc_builder_custom_reset@@Base+0x3cc>
   13690:	cmp	r2, #0
   13694:	bne	13a48 <flatcc_builder_custom_reset@@Base+0x52c>
   13698:	ldr	r0, [r4, #60]	; 0x3c
   1369c:	ldr	r2, [r4, #64]	; 0x40
   136a0:	cmp	r0, #0
   136a4:	beq	136c4 <flatcc_builder_custom_reset@@Base+0x1a8>
   136a8:	mov	r1, #0
   136ac:	bl	12778 <memset@plt>
   136b0:	ldr	r0, [r4, #68]	; 0x44
   136b4:	ldr	r2, [r4, #72]	; 0x48
   136b8:	cmp	r0, #0
   136bc:	bne	136dc <flatcc_builder_custom_reset@@Base+0x1c0>
   136c0:	b	136f8 <flatcc_builder_custom_reset@@Base+0x1dc>
   136c4:	cmp	r2, #0
   136c8:	bne	13a48 <flatcc_builder_custom_reset@@Base+0x52c>
   136cc:	ldr	r0, [r4, #68]	; 0x44
   136d0:	ldr	r2, [r4, #72]	; 0x48
   136d4:	cmp	r0, #0
   136d8:	beq	136f8 <flatcc_builder_custom_reset@@Base+0x1dc>
   136dc:	mov	r1, #0
   136e0:	bl	12778 <memset@plt>
   136e4:	ldr	r0, [r4, #76]	; 0x4c
   136e8:	ldr	r2, [r4, #80]	; 0x50
   136ec:	cmp	r0, #0
   136f0:	bne	13710 <flatcc_builder_custom_reset@@Base+0x1f4>
   136f4:	b	1372c <flatcc_builder_custom_reset@@Base+0x210>
   136f8:	cmp	r2, #0
   136fc:	bne	13a48 <flatcc_builder_custom_reset@@Base+0x52c>
   13700:	ldr	r0, [r4, #76]	; 0x4c
   13704:	ldr	r2, [r4, #80]	; 0x50
   13708:	cmp	r0, #0
   1370c:	beq	1372c <flatcc_builder_custom_reset@@Base+0x210>
   13710:	mov	r1, #0
   13714:	bl	12778 <memset@plt>
   13718:	ldr	r0, [r4, #84]	; 0x54
   1371c:	ldr	r2, [r4, #88]	; 0x58
   13720:	cmp	r0, #0
   13724:	bne	13744 <flatcc_builder_custom_reset@@Base+0x228>
   13728:	b	13760 <flatcc_builder_custom_reset@@Base+0x244>
   1372c:	cmp	r2, #0
   13730:	bne	13a48 <flatcc_builder_custom_reset@@Base+0x52c>
   13734:	ldr	r0, [r4, #84]	; 0x54
   13738:	ldr	r2, [r4, #88]	; 0x58
   1373c:	cmp	r0, #0
   13740:	beq	13760 <flatcc_builder_custom_reset@@Base+0x244>
   13744:	mov	r1, #0
   13748:	bl	12778 <memset@plt>
   1374c:	ldr	r0, [r4, #92]	; 0x5c
   13750:	ldr	r2, [r4, #96]	; 0x60
   13754:	cmp	r0, #0
   13758:	bne	13778 <flatcc_builder_custom_reset@@Base+0x25c>
   1375c:	b	13794 <flatcc_builder_custom_reset@@Base+0x278>
   13760:	cmp	r2, #0
   13764:	bne	13a48 <flatcc_builder_custom_reset@@Base+0x52c>
   13768:	ldr	r0, [r4, #92]	; 0x5c
   1376c:	ldr	r2, [r4, #96]	; 0x60
   13770:	cmp	r0, #0
   13774:	beq	13794 <flatcc_builder_custom_reset@@Base+0x278>
   13778:	mov	r1, #0
   1377c:	bl	12778 <memset@plt>
   13780:	ldr	r0, [r4, #100]	; 0x64
   13784:	ldr	r2, [r4, #104]	; 0x68
   13788:	cmp	r0, #0
   1378c:	bne	137ac <flatcc_builder_custom_reset@@Base+0x290>
   13790:	b	137c8 <flatcc_builder_custom_reset@@Base+0x2ac>
   13794:	cmp	r2, #0
   13798:	bne	13a48 <flatcc_builder_custom_reset@@Base+0x52c>
   1379c:	ldr	r0, [r4, #100]	; 0x64
   137a0:	ldr	r2, [r4, #104]	; 0x68
   137a4:	cmp	r0, #0
   137a8:	beq	137c8 <flatcc_builder_custom_reset@@Base+0x2ac>
   137ac:	mov	r1, #0
   137b0:	bl	12778 <memset@plt>
   137b4:	ldr	r0, [r4, #108]	; 0x6c
   137b8:	ldr	r2, [r4, #112]	; 0x70
   137bc:	cmp	r0, #0
   137c0:	bne	137e0 <flatcc_builder_custom_reset@@Base+0x2c4>
   137c4:	b	137ec <flatcc_builder_custom_reset@@Base+0x2d0>
   137c8:	cmp	r2, #0
   137cc:	bne	13a48 <flatcc_builder_custom_reset@@Base+0x52c>
   137d0:	ldr	r0, [r4, #108]	; 0x6c
   137d4:	ldr	r2, [r4, #112]	; 0x70
   137d8:	cmp	r0, #0
   137dc:	beq	137ec <flatcc_builder_custom_reset@@Base+0x2d0>
   137e0:	mov	r1, #0
   137e4:	bl	12778 <memset@plt>
   137e8:	b	137f4 <flatcc_builder_custom_reset@@Base+0x2d8>
   137ec:	cmp	r2, #0
   137f0:	bne	13a48 <flatcc_builder_custom_reset@@Base+0x52c>
   137f4:	mov	r0, #0
   137f8:	vmov.i32	q8, #0	; 0x00000000
   137fc:	mov	r6, #0
   13800:	str	r0, [r4, #120]	; 0x78
   13804:	ldr	r1, [r4, #124]	; 0x7c
   13808:	cmp	r1, #0
   1380c:	movne	r1, #16
   13810:	strne	r1, [r4, #124]	; 0x7c
   13814:	add	r1, r4, #148	; 0x94
   13818:	str	r0, [r4, #136]	; 0x88
   1381c:	str	r0, [r4, #140]	; 0x8c
   13820:	strh	r0, [r4, #128]	; 0x80
   13824:	str	r0, [r4, #32]
   13828:	cmp	r5, #0
   1382c:	vst1.32	{d16-d17}, [r1]
   13830:	ldr	r2, [r4, #60]	; 0x3c
   13834:	ldr	r1, [r4, #52]	; 0x34
   13838:	ldr	r3, [r4, #76]	; 0x4c
   1383c:	str	r2, [r4, #16]
   13840:	str	r0, [r4, #20]
   13844:	str	r0, [r4, #24]
   13848:	movne	r0, #0
   1384c:	str	r3, [r4]
   13850:	str	r1, [r4, #4]
   13854:	strne	r0, [r4, #172]	; 0xac
   13858:	strne	r0, [r4, #176]	; 0xb0
   1385c:	strne	r0, [r4, #180]	; 0xb4
   13860:	ldr	r0, [r4, #184]	; 0xb8
   13864:	cmp	r0, #0
   13868:	beq	13874 <flatcc_builder_custom_reset@@Base+0x358>
   1386c:	add	r0, r4, #188	; 0xbc
   13870:	bl	1810c <flatcc_emitter_reset@@Base>
   13874:	mov	r0, r6
   13878:	sub	sp, fp, #16
   1387c:	pop	{r4, r5, r6, sl, fp, pc}
   13880:	ldr	r0, [r4, #72]	; 0x48
   13884:	cmp	r0, #0
   13888:	bne	13a48 <flatcc_builder_custom_reset@@Base+0x52c>
   1388c:	mov	r1, r4
   13890:	ldr	r0, [r1, #76]!	; 0x4c
   13894:	cmp	r0, #0
   13898:	beq	138e8 <flatcc_builder_custom_reset@@Base+0x3cc>
   1389c:	ldr	r0, [r4, #40]	; 0x28
   138a0:	ldr	r6, [r4, #48]	; 0x30
   138a4:	mov	r2, #3
   138a8:	mov	r3, #1
   138ac:	str	r2, [sp]
   138b0:	mov	r2, #1
   138b4:	blx	r6
   138b8:	mvn	r6, #0
   138bc:	cmp	r0, #0
   138c0:	bne	13874 <flatcc_builder_custom_reset@@Base+0x358>
   138c4:	ldr	r0, [r4, #76]	; 0x4c
   138c8:	ldr	r2, [r4, #80]	; 0x50
   138cc:	mov	r1, #0
   138d0:	bl	12778 <memset@plt>
   138d4:	mov	r1, r4
   138d8:	ldr	r0, [r1, #84]!	; 0x54
   138dc:	cmp	r0, #0
   138e0:	bne	13904 <flatcc_builder_custom_reset@@Base+0x3e8>
   138e4:	b	13950 <flatcc_builder_custom_reset@@Base+0x434>
   138e8:	ldr	r0, [r4, #80]	; 0x50
   138ec:	cmp	r0, #0
   138f0:	bne	13a48 <flatcc_builder_custom_reset@@Base+0x52c>
   138f4:	mov	r1, r4
   138f8:	ldr	r0, [r1, #84]!	; 0x54
   138fc:	cmp	r0, #0
   13900:	beq	13950 <flatcc_builder_custom_reset@@Base+0x434>
   13904:	ldr	r0, [r4, #40]	; 0x28
   13908:	ldr	r6, [r4, #48]	; 0x30
   1390c:	mov	r2, #4
   13910:	mov	r3, #1
   13914:	str	r2, [sp]
   13918:	mov	r2, #1
   1391c:	blx	r6
   13920:	mvn	r6, #0
   13924:	cmp	r0, #0
   13928:	bne	13874 <flatcc_builder_custom_reset@@Base+0x358>
   1392c:	ldr	r0, [r4, #84]	; 0x54
   13930:	ldr	r2, [r4, #88]	; 0x58
   13934:	mov	r1, #0
   13938:	bl	12778 <memset@plt>
   1393c:	ldr	r0, [r4, #92]	; 0x5c
   13940:	ldr	r2, [r4, #96]	; 0x60
   13944:	cmp	r0, #0
   13948:	bne	1396c <flatcc_builder_custom_reset@@Base+0x450>
   1394c:	b	13988 <flatcc_builder_custom_reset@@Base+0x46c>
   13950:	ldr	r0, [r4, #88]	; 0x58
   13954:	cmp	r0, #0
   13958:	bne	13a48 <flatcc_builder_custom_reset@@Base+0x52c>
   1395c:	ldr	r0, [r4, #92]	; 0x5c
   13960:	ldr	r2, [r4, #96]	; 0x60
   13964:	cmp	r0, #0
   13968:	beq	13988 <flatcc_builder_custom_reset@@Base+0x46c>
   1396c:	mov	r1, #0
   13970:	bl	12778 <memset@plt>
   13974:	mov	r1, r4
   13978:	ldr	r0, [r1, #100]!	; 0x64
   1397c:	cmp	r0, #0
   13980:	bne	139a0 <flatcc_builder_custom_reset@@Base+0x484>
   13984:	b	139ec <flatcc_builder_custom_reset@@Base+0x4d0>
   13988:	cmp	r2, #0
   1398c:	bne	13a48 <flatcc_builder_custom_reset@@Base+0x52c>
   13990:	mov	r1, r4
   13994:	ldr	r0, [r1, #100]!	; 0x64
   13998:	cmp	r0, #0
   1399c:	beq	139ec <flatcc_builder_custom_reset@@Base+0x4d0>
   139a0:	ldr	r0, [r4, #40]	; 0x28
   139a4:	ldr	r6, [r4, #48]	; 0x30
   139a8:	mov	r2, #6
   139ac:	mov	r3, #1
   139b0:	str	r2, [sp]
   139b4:	mov	r2, #1
   139b8:	blx	r6
   139bc:	mvn	r6, #0
   139c0:	cmp	r0, #0
   139c4:	bne	13874 <flatcc_builder_custom_reset@@Base+0x358>
   139c8:	ldr	r0, [r4, #100]	; 0x64
   139cc:	ldr	r2, [r4, #104]	; 0x68
   139d0:	mov	r1, #0
   139d4:	bl	12778 <memset@plt>
   139d8:	mov	r1, r4
   139dc:	ldr	r0, [r1, #108]!	; 0x6c
   139e0:	cmp	r0, #0
   139e4:	bne	13a08 <flatcc_builder_custom_reset@@Base+0x4ec>
   139e8:	b	13a3c <flatcc_builder_custom_reset@@Base+0x520>
   139ec:	ldr	r0, [r4, #104]	; 0x68
   139f0:	cmp	r0, #0
   139f4:	bne	13a48 <flatcc_builder_custom_reset@@Base+0x52c>
   139f8:	mov	r1, r4
   139fc:	ldr	r0, [r1, #108]!	; 0x6c
   13a00:	cmp	r0, #0
   13a04:	beq	13a3c <flatcc_builder_custom_reset@@Base+0x520>
   13a08:	ldr	r0, [r4, #40]	; 0x28
   13a0c:	ldr	r6, [r4, #48]	; 0x30
   13a10:	mov	r2, #7
   13a14:	mov	r3, #1
   13a18:	str	r2, [sp]
   13a1c:	mov	r2, #1
   13a20:	blx	r6
   13a24:	mvn	r6, #0
   13a28:	cmp	r0, #0
   13a2c:	bne	13874 <flatcc_builder_custom_reset@@Base+0x358>
   13a30:	ldr	r0, [r4, #108]	; 0x6c
   13a34:	ldr	r2, [r4, #112]	; 0x70
   13a38:	b	137e0 <flatcc_builder_custom_reset@@Base+0x2c4>
   13a3c:	ldr	r0, [r4, #112]	; 0x70
   13a40:	cmp	r0, #0
   13a44:	beq	137f4 <flatcc_builder_custom_reset@@Base+0x2d8>
   13a48:	movw	r0, #41968	; 0xa3f0
   13a4c:	movw	r1, #41986	; 0xa402
   13a50:	movw	r3, #42056	; 0xa448
   13a54:	movw	r2, #434	; 0x1b2
   13a58:	movt	r0, #1
   13a5c:	movt	r1, #1
   13a60:	movt	r3, #1
   13a64:	bl	127a8 <__assert_fail@plt>

00013a68 <flatcc_builder_reset@@Base>:
   13a68:	mov	r1, #0
   13a6c:	mov	r2, #0
   13a70:	b	1351c <flatcc_builder_custom_reset@@Base>

00013a74 <flatcc_builder_clear@@Base>:
   13a74:	push	{r4, sl, fp, lr}
   13a78:	add	fp, sp, #8
   13a7c:	sub	sp, sp, #8
   13a80:	mov	r4, r0
   13a84:	ldr	r0, [r0, #40]	; 0x28
   13a88:	mov	r1, #0
   13a8c:	mov	r2, #0
   13a90:	mov	r3, #0
   13a94:	ldr	ip, [r4, #48]	; 0x30
   13a98:	str	r1, [sp]
   13a9c:	add	r1, r4, #52	; 0x34
   13aa0:	blx	ip
   13aa4:	ldr	r0, [r4, #40]	; 0x28
   13aa8:	ldr	ip, [r4, #48]	; 0x30
   13aac:	mov	r1, #1
   13ab0:	mov	r2, #0
   13ab4:	mov	r3, #0
   13ab8:	str	r1, [sp]
   13abc:	add	r1, r4, #60	; 0x3c
   13ac0:	blx	ip
   13ac4:	ldr	r0, [r4, #40]	; 0x28
   13ac8:	ldr	ip, [r4, #48]	; 0x30
   13acc:	mov	r1, #2
   13ad0:	mov	r2, #0
   13ad4:	mov	r3, #0
   13ad8:	str	r1, [sp]
   13adc:	add	r1, r4, #68	; 0x44
   13ae0:	blx	ip
   13ae4:	ldr	r0, [r4, #40]	; 0x28
   13ae8:	ldr	ip, [r4, #48]	; 0x30
   13aec:	mov	r1, #3
   13af0:	mov	r2, #0
   13af4:	mov	r3, #0
   13af8:	str	r1, [sp]
   13afc:	add	r1, r4, #76	; 0x4c
   13b00:	blx	ip
   13b04:	ldr	r0, [r4, #40]	; 0x28
   13b08:	ldr	ip, [r4, #48]	; 0x30
   13b0c:	mov	r1, #4
   13b10:	mov	r2, #0
   13b14:	mov	r3, #0
   13b18:	str	r1, [sp]
   13b1c:	add	r1, r4, #84	; 0x54
   13b20:	blx	ip
   13b24:	ldr	r0, [r4, #40]	; 0x28
   13b28:	ldr	ip, [r4, #48]	; 0x30
   13b2c:	mov	r1, #5
   13b30:	mov	r2, #0
   13b34:	mov	r3, #0
   13b38:	str	r1, [sp]
   13b3c:	add	r1, r4, #92	; 0x5c
   13b40:	blx	ip
   13b44:	ldr	r0, [r4, #40]	; 0x28
   13b48:	ldr	ip, [r4, #48]	; 0x30
   13b4c:	mov	r1, #6
   13b50:	mov	r2, #0
   13b54:	mov	r3, #0
   13b58:	str	r1, [sp]
   13b5c:	add	r1, r4, #100	; 0x64
   13b60:	blx	ip
   13b64:	ldr	r0, [r4, #40]	; 0x28
   13b68:	ldr	ip, [r4, #48]	; 0x30
   13b6c:	mov	r1, #7
   13b70:	mov	r2, #0
   13b74:	mov	r3, #0
   13b78:	str	r1, [sp]
   13b7c:	add	r1, r4, #108	; 0x6c
   13b80:	blx	ip
   13b84:	ldr	r0, [r4, #184]	; 0xb8
   13b88:	cmp	r0, #0
   13b8c:	beq	13b98 <flatcc_builder_clear@@Base+0x124>
   13b90:	add	r0, r4, #188	; 0xbc
   13b94:	bl	181d8 <flatcc_emitter_clear@@Base>
   13b98:	mov	r0, r4
   13b9c:	mov	r1, #0
   13ba0:	mov	r2, #232	; 0xe8
   13ba4:	sub	sp, fp, #8
   13ba8:	pop	{r4, sl, fp, lr}
   13bac:	b	12778 <memset@plt>

00013bb0 <flatcc_builder_enter_user_frame_ptr@@Base>:
   13bb0:	push	{r4, r5, r6, r7, fp, lr}
   13bb4:	add	fp, sp, #16
   13bb8:	sub	sp, sp, #8
   13bbc:	mov	r4, r0
   13bc0:	ldr	r0, [r0, #112]	; 0x70
   13bc4:	add	r1, r1, #7
   13bc8:	ldr	r7, [r4, #228]	; 0xe4
   13bcc:	bic	r5, r1, #3
   13bd0:	add	r6, r4, #108	; 0x6c
   13bd4:	add	r2, r7, r5
   13bd8:	cmp	r2, r0
   13bdc:	bls	13c04 <flatcc_builder_enter_user_frame_ptr@@Base+0x54>
   13be0:	ldr	r0, [r4, #40]	; 0x28
   13be4:	ldr	ip, [r4, #48]	; 0x30
   13be8:	mov	r1, #7
   13bec:	mov	r3, #0
   13bf0:	str	r1, [sp]
   13bf4:	mov	r1, r6
   13bf8:	blx	ip
   13bfc:	cmp	r0, #0
   13c00:	bne	13c58 <flatcc_builder_enter_user_frame_ptr@@Base+0xa8>
   13c04:	ldr	r0, [r6]
   13c08:	adds	r6, r0, r7
   13c0c:	beq	13c48 <flatcc_builder_enter_user_frame_ptr@@Base+0x98>
   13c10:	mov	r0, r6
   13c14:	mov	r1, #0
   13c18:	mov	r2, r5
   13c1c:	bl	12778 <memset@plt>
   13c20:	ldr	r0, [r4, #224]	; 0xe0
   13c24:	str	r0, [r6], #4
   13c28:	ldr	r0, [r4, #228]	; 0xe4
   13c2c:	add	r1, r0, #4
   13c30:	add	r0, r0, r5
   13c34:	str	r1, [r4, #224]	; 0xe0
   13c38:	str	r0, [r4, #228]	; 0xe4
   13c3c:	mov	r0, r6
   13c40:	sub	sp, fp, #16
   13c44:	pop	{r4, r5, r6, r7, fp, pc}
   13c48:	mov	r6, #0
   13c4c:	mov	r0, r6
   13c50:	sub	sp, fp, #16
   13c54:	pop	{r4, r5, r6, r7, fp, pc}
   13c58:	movw	r0, #46504	; 0xb5a8
   13c5c:	movw	r1, #41986	; 0xa402
   13c60:	movw	r3, #46050	; 0xb3e2
   13c64:	mov	r2, #308	; 0x134
   13c68:	movt	r0, #1
   13c6c:	movt	r1, #1
   13c70:	movt	r3, #1
   13c74:	bl	127a8 <__assert_fail@plt>

00013c78 <flatcc_builder_enter_user_frame@@Base>:
   13c78:	push	{r4, r5, r6, r7, fp, lr}
   13c7c:	add	fp, sp, #16
   13c80:	sub	sp, sp, #8
   13c84:	mov	r4, r0
   13c88:	ldr	r0, [r0, #112]	; 0x70
   13c8c:	add	r1, r1, #7
   13c90:	ldr	r7, [r4, #228]	; 0xe4
   13c94:	bic	r5, r1, #3
   13c98:	add	r6, r4, #108	; 0x6c
   13c9c:	add	r2, r7, r5
   13ca0:	cmp	r2, r0
   13ca4:	bls	13ccc <flatcc_builder_enter_user_frame@@Base+0x54>
   13ca8:	ldr	r0, [r4, #40]	; 0x28
   13cac:	ldr	ip, [r4, #48]	; 0x30
   13cb0:	mov	r1, #7
   13cb4:	mov	r3, #0
   13cb8:	str	r1, [sp]
   13cbc:	mov	r1, r6
   13cc0:	blx	ip
   13cc4:	cmp	r0, #0
   13cc8:	bne	13d18 <flatcc_builder_enter_user_frame@@Base+0xa0>
   13ccc:	ldr	r0, [r6]
   13cd0:	adds	r6, r0, r7
   13cd4:	beq	13d0c <flatcc_builder_enter_user_frame@@Base+0x94>
   13cd8:	mov	r0, r6
   13cdc:	mov	r1, #0
   13ce0:	mov	r2, r5
   13ce4:	bl	12778 <memset@plt>
   13ce8:	ldr	r0, [r4, #224]	; 0xe0
   13cec:	str	r0, [r6]
   13cf0:	ldr	r1, [r4, #228]	; 0xe4
   13cf4:	add	r0, r1, #4
   13cf8:	add	r1, r1, r5
   13cfc:	str	r0, [r4, #224]	; 0xe0
   13d00:	str	r1, [r4, #228]	; 0xe4
   13d04:	sub	sp, fp, #16
   13d08:	pop	{r4, r5, r6, r7, fp, pc}
   13d0c:	mov	r0, #0
   13d10:	sub	sp, fp, #16
   13d14:	pop	{r4, r5, r6, r7, fp, pc}
   13d18:	movw	r0, #46504	; 0xb5a8
   13d1c:	movw	r1, #41986	; 0xa402
   13d20:	movw	r3, #46050	; 0xb3e2
   13d24:	mov	r2, #308	; 0x134
   13d28:	movt	r0, #1
   13d2c:	movt	r1, #1
   13d30:	movt	r3, #1
   13d34:	bl	127a8 <__assert_fail@plt>

00013d38 <flatcc_builder_exit_user_frame@@Base>:
   13d38:	push	{fp, lr}
   13d3c:	mov	fp, sp
   13d40:	ldr	r1, [r0, #224]	; 0xe0
   13d44:	cmp	r1, #0
   13d48:	subne	r2, r1, #4
   13d4c:	strne	r2, [r0, #228]	; 0xe4
   13d50:	ldrne	r2, [r0, #108]	; 0x6c
   13d54:	addne	r1, r2, r1
   13d58:	ldrne	r1, [r1, #-4]
   13d5c:	strne	r1, [r0, #224]	; 0xe0
   13d60:	movne	r0, r1
   13d64:	popne	{fp, pc}
   13d68:	movw	r0, #42118	; 0xa486
   13d6c:	movw	r1, #41986	; 0xa402
   13d70:	movw	r3, #42143	; 0xa49f
   13d74:	movw	r2, #542	; 0x21e
   13d78:	movt	r0, #1
   13d7c:	movt	r1, #1
   13d80:	movt	r3, #1
   13d84:	bl	127a8 <__assert_fail@plt>

00013d88 <flatcc_builder_exit_user_frame_at@@Base>:
   13d88:	push	{fp, lr}
   13d8c:	mov	fp, sp
   13d90:	ldr	r2, [r0, #224]	; 0xe0
   13d94:	cmp	r2, r1
   13d98:	bcc	13de4 <flatcc_builder_exit_user_frame_at@@Base+0x5c>
   13d9c:	cmp	r1, #0
   13da0:	str	r1, [r0, #224]	; 0xe0
   13da4:	subne	r2, r1, #4
   13da8:	strne	r2, [r0, #228]	; 0xe4
   13dac:	ldrne	r2, [r0, #108]	; 0x6c
   13db0:	addne	r1, r2, r1
   13db4:	ldrne	r1, [r1, #-4]
   13db8:	strne	r1, [r0, #224]	; 0xe0
   13dbc:	movne	r0, r1
   13dc0:	popne	{fp, pc}
   13dc4:	movw	r0, #42118	; 0xa486
   13dc8:	movw	r1, #41986	; 0xa402
   13dcc:	movw	r3, #42143	; 0xa49f
   13dd0:	movw	r2, #542	; 0x21e
   13dd4:	movt	r0, #1
   13dd8:	movt	r1, #1
   13ddc:	movt	r3, #1
   13de0:	bl	127a8 <__assert_fail@plt>
   13de4:	movw	r0, #42201	; 0xa4d9
   13de8:	movw	r1, #41986	; 0xa402
   13dec:	movw	r3, #42232	; 0xa4f8
   13df0:	movw	r2, #551	; 0x227
   13df4:	movt	r0, #1
   13df8:	movt	r1, #1
   13dfc:	movt	r3, #1
   13e00:	bl	127a8 <__assert_fail@plt>

00013e04 <flatcc_builder_get_current_user_frame@@Base>:
   13e04:	ldr	r0, [r0, #224]	; 0xe0
   13e08:	bx	lr

00013e0c <flatcc_builder_get_user_frame_ptr@@Base>:
   13e0c:	ldr	r0, [r0, #108]	; 0x6c
   13e10:	add	r0, r0, r1
   13e14:	bx	lr

00013e18 <flatcc_builder_embed_buffer@@Base>:
   13e18:	push	{r4, r5, r6, r7, fp, lr}
   13e1c:	add	fp, sp, #16
   13e20:	sub	sp, sp, #88	; 0x58
   13e24:	mov	r4, r0
   13e28:	ldr	r0, [fp, #8]
   13e2c:	mov	r5, r3
   13e30:	mov	r7, r2
   13e34:	mov	r2, r1
   13e38:	sub	r1, fp, #18
   13e3c:	strh	r0, [fp, #-18]	; 0xffffffee
   13e40:	mov	r0, r4
   13e44:	ldr	r3, [r4, #152]	; 0x98
   13e48:	cmp	r3, #0
   13e4c:	movwne	r3, #1
   13e50:	bl	13f88 <flatcc_builder_embed_buffer@@Base+0x170>
   13e54:	ldr	r1, [fp, #12]
   13e58:	ldrh	r3, [fp, #-18]	; 0xffffffee
   13e5c:	ldr	r0, [r4, #136]	; 0x88
   13e60:	mov	r2, #0
   13e64:	str	r2, [sp, #12]
   13e68:	str	r2, [sp, #8]
   13e6c:	and	r1, r1, #2
   13e70:	sub	r3, r3, #1
   13e74:	add	r1, r5, r1, lsl #1
   13e78:	sub	r1, r0, r1
   13e7c:	and	r3, r3, r1
   13e80:	add	r1, r3, r5
   13e84:	str	r1, [fp, #-24]	; 0xffffffe8
   13e88:	ldr	r1, [r4, #152]	; 0x98
   13e8c:	cmp	r1, #0
   13e90:	mov	r1, #0
   13e94:	beq	13eb4 <flatcc_builder_embed_buffer@@Base+0x9c>
   13e98:	mov	r1, #4
   13e9c:	sub	r2, fp, #24
   13ea0:	str	r1, [sp, #20]
   13ea4:	str	r2, [sp, #16]
   13ea8:	mov	r2, #1
   13eac:	str	r1, [sp, #8]
   13eb0:	str	r2, [sp, #12]
   13eb4:	cmp	r5, #0
   13eb8:	beq	13edc <flatcc_builder_embed_buffer@@Base+0xc4>
   13ebc:	add	r6, sp, #8
   13ec0:	add	r1, r1, r5
   13ec4:	add	r6, r6, r2, lsl #3
   13ec8:	add	r2, r2, #1
   13ecc:	str	r1, [sp, #8]
   13ed0:	str	r7, [r6, #8]
   13ed4:	str	r5, [r6, #12]
   13ed8:	str	r2, [sp, #12]
   13edc:	cmp	r3, #0
   13ee0:	beq	13f0c <flatcc_builder_embed_buffer@@Base+0xf4>
   13ee4:	add	r7, sp, #8
   13ee8:	movw	r6, #41456	; 0xa1f0
   13eec:	add	r1, r1, r3
   13ef0:	add	r7, r7, r2, lsl #3
   13ef4:	movt	r6, #1
   13ef8:	add	r2, r2, #1
   13efc:	str	r1, [sp, #8]
   13f00:	str	r6, [r7, #8]
   13f04:	str	r3, [r7, #12]
   13f08:	str	r2, [sp, #12]
   13f0c:	cmp	r1, #0
   13f10:	ble	13f68 <flatcc_builder_embed_buffer@@Base+0x150>
   13f14:	sub	r5, r0, r1
   13f18:	ldr	r0, [r4, #36]	; 0x24
   13f1c:	ldr	r7, [r4, #44]	; 0x2c
   13f20:	str	r1, [sp]
   13f24:	add	r1, sp, #8
   13f28:	add	r1, r1, #8
   13f2c:	mov	r3, r5
   13f30:	blx	r7
   13f34:	cmp	r0, #0
   13f38:	streq	r5, [r4, #136]	; 0x88
   13f3c:	moveq	r0, r5
   13f40:	subeq	sp, fp, #16
   13f44:	popeq	{r4, r5, r6, r7, fp, pc}
   13f48:	movw	r0, #46504	; 0xb5a8
   13f4c:	movw	r1, #41986	; 0xa402
   13f50:	movw	r3, #46183	; 0xb467
   13f54:	movw	r2, #651	; 0x28b
   13f58:	movt	r0, #1
   13f5c:	movt	r1, #1
   13f60:	movt	r3, #1
   13f64:	bl	127a8 <__assert_fail@plt>
   13f68:	movw	r0, #46504	; 0xb5a8
   13f6c:	movw	r1, #41986	; 0xa402
   13f70:	movw	r3, #46183	; 0xb467
   13f74:	movw	r2, #647	; 0x287
   13f78:	movt	r0, #1
   13f7c:	movt	r1, #1
   13f80:	movt	r3, #1
   13f84:	bl	127a8 <__assert_fail@plt>
   13f88:	push	{r4, sl, fp, lr}
   13f8c:	add	fp, sp, #8
   13f90:	sub	sp, sp, #80	; 0x50
   13f94:	cmp	r2, #0
   13f98:	bne	13fa8 <flatcc_builder_embed_buffer@@Base+0x190>
   13f9c:	ldrh	r2, [r0, #132]	; 0x84
   13fa0:	cmp	r2, #0
   13fa4:	movweq	r2, #1
   13fa8:	ldrh	r4, [r1]
   13fac:	cmp	r4, #4
   13fb0:	movwcc	r4, #4
   13fb4:	cmpcs	r4, r2
   13fb8:	bcs	13fc8 <flatcc_builder_embed_buffer@@Base+0x1b0>
   13fbc:	cmp	r4, r2
   13fc0:	movcc	r4, r2
   13fc4:	strh	r4, [r1]
   13fc8:	cmp	r3, #0
   13fcc:	bne	14040 <flatcc_builder_embed_buffer@@Base+0x228>
   13fd0:	ldr	r4, [r0, #140]	; 0x8c
   13fd4:	sub	r1, r2, #1
   13fd8:	ands	r1, r4, r1
   13fdc:	beq	14040 <flatcc_builder_embed_buffer@@Base+0x228>
   13fe0:	movw	r2, #41456	; 0xa1f0
   13fe4:	str	r1, [sp, #20]
   13fe8:	cmn	r1, #1
   13fec:	movt	r2, #1
   13ff0:	str	r2, [sp, #16]
   13ff4:	mov	r2, #1
   13ff8:	str	r1, [sp, #8]
   13ffc:	str	r2, [sp, #12]
   14000:	add	r2, r4, r1
   14004:	str	r2, [r0, #140]	; 0x8c
   14008:	ble	14048 <flatcc_builder_embed_buffer@@Base+0x230>
   1400c:	ldr	r2, [r0, #36]	; 0x24
   14010:	ldr	ip, [r0, #44]	; 0x2c
   14014:	add	r0, sp, #8
   14018:	str	r1, [sp]
   1401c:	mov	r3, r4
   14020:	add	r1, r0, #8
   14024:	mov	r0, r2
   14028:	mov	r2, #1
   1402c:	blx	ip
   14030:	cmp	r0, #0
   14034:	bne	14068 <flatcc_builder_embed_buffer@@Base+0x250>
   14038:	cmn	r4, #1
   1403c:	beq	14088 <flatcc_builder_embed_buffer@@Base+0x270>
   14040:	sub	sp, fp, #8
   14044:	pop	{r4, sl, fp, pc}
   14048:	movw	r0, #46504	; 0xb5a8
   1404c:	movw	r1, #41986	; 0xa402
   14050:	movw	r3, #46371	; 0xb523
   14054:	movw	r2, #673	; 0x2a1
   14058:	movt	r0, #1
   1405c:	movt	r1, #1
   14060:	movt	r3, #1
   14064:	bl	127a8 <__assert_fail@plt>
   14068:	movw	r0, #46504	; 0xb5a8
   1406c:	movw	r1, #41986	; 0xa402
   14070:	movw	r3, #46371	; 0xb523
   14074:	movw	r2, #677	; 0x2a5
   14078:	movt	r0, #1
   1407c:	movt	r1, #1
   14080:	movt	r3, #1
   14084:	bl	127a8 <__assert_fail@plt>
   14088:	movw	r0, #46504	; 0xb5a8
   1408c:	movw	r1, #41986	; 0xa402
   14090:	movw	r3, #46117	; 0xb425
   14094:	movw	r2, #702	; 0x2be
   14098:	movt	r0, #1
   1409c:	movt	r1, #1
   140a0:	movt	r3, #1
   140a4:	bl	127a8 <__assert_fail@plt>

000140a8 <flatcc_builder_create_buffer@@Base>:
   140a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   140ac:	add	fp, sp, #28
   140b0:	sub	sp, sp, #100	; 0x64
   140b4:	ldr	sl, [fp, #12]
   140b8:	mov	r4, r0
   140bc:	ldr	r0, [fp, #8]
   140c0:	mov	r7, r1
   140c4:	mov	r5, #0
   140c8:	mov	r6, r3
   140cc:	sub	r1, fp, #30
   140d0:	str	r5, [sp, #12]
   140d4:	and	r9, sl, #1
   140d8:	strh	r0, [fp, #-30]	; 0xffffffe2
   140dc:	mov	r0, r4
   140e0:	mov	r3, r9
   140e4:	bl	13f88 <flatcc_builder_embed_buffer@@Base+0x170>
   140e8:	ldrh	r0, [r4, #128]	; 0x80
   140ec:	ldrh	r1, [fp, #-30]	; 0xffffffe2
   140f0:	str	r6, [sp, #8]
   140f4:	cmp	r0, r1
   140f8:	strhcc	r1, [r4, #128]	; 0x80
   140fc:	cmp	r7, #0
   14100:	beq	1411c <flatcc_builder_create_buffer@@Base+0x74>
   14104:	ldr	r5, [r7]
   14108:	cmp	r5, #0
   1410c:	str	r5, [sp, #12]
   14110:	movwne	r5, #1
   14114:	lsl	r7, r5, #2
   14118:	b	14120 <flatcc_builder_create_buffer@@Base+0x78>
   1411c:	mov	r7, #0
   14120:	ldr	r0, [r4, #136]	; 0x88
   14124:	and	r2, sl, #2
   14128:	mov	r3, #0
   1412c:	sub	r6, r1, #1
   14130:	ands	ip, sl, #3
   14134:	mov	sl, #4
   14138:	mov	r1, #4
   1413c:	str	r3, [sp, #20]
   14140:	str	r3, [sp, #16]
   14144:	sub	r2, r0, r2, lsl #1
   14148:	sub	r2, r2, r7
   1414c:	sub	r2, r2, #4
   14150:	beq	14174 <flatcc_builder_create_buffer@@Base+0xcc>
   14154:	mov	r1, #4
   14158:	sub	r3, fp, #40	; 0x28
   1415c:	str	r1, [sp, #28]
   14160:	str	r3, [sp, #24]
   14164:	str	r1, [sp, #16]
   14168:	mov	r3, #1
   1416c:	mov	r1, #8
   14170:	str	r3, [sp, #20]
   14174:	add	lr, sp, #16
   14178:	and	r6, r2, r6
   1417c:	sub	r8, fp, #36	; 0x24
   14180:	str	r1, [sp, #16]
   14184:	cmp	r5, #0
   14188:	add	r2, lr, r3, lsl #3
   1418c:	str	r8, [r2, #8]
   14190:	str	sl, [r2, #12]
   14194:	add	r2, r3, #1
   14198:	str	r2, [sp, #20]
   1419c:	beq	141c0 <flatcc_builder_create_buffer@@Base+0x118>
   141a0:	add	r2, lr, r2, lsl #3
   141a4:	add	r1, r1, r7
   141a8:	add	r5, sp, #12
   141ac:	str	r1, [sp, #16]
   141b0:	str	r5, [r2, #8]
   141b4:	str	r7, [r2, #12]
   141b8:	orr	r2, r3, #2
   141bc:	str	r2, [sp, #20]
   141c0:	cmp	r6, #0
   141c4:	beq	141ec <flatcc_builder_create_buffer@@Base+0x144>
   141c8:	movw	r5, #41456	; 0xa1f0
   141cc:	add	r3, lr, r2, lsl #3
   141d0:	add	r1, r1, r6
   141d4:	add	r2, r2, #1
   141d8:	movt	r5, #1
   141dc:	str	r1, [sp, #16]
   141e0:	str	r5, [r3, #8]
   141e4:	str	r6, [r3, #12]
   141e8:	str	r2, [sp, #20]
   141ec:	sub	r7, r0, r1
   141f0:	cmp	ip, #0
   141f4:	mov	r6, #144	; 0x90
   141f8:	ldr	r3, [sp, #8]
   141fc:	mov	r0, r7
   14200:	addne	r0, r0, #4
   14204:	cmp	r9, #0
   14208:	movweq	r6, #140	; 0x8c
   1420c:	cmp	r1, #0
   14210:	ldr	r6, [r4, r6]
   14214:	sub	r3, r3, r0
   14218:	str	r3, [fp, #-36]	; 0xffffffdc
   1421c:	sub	r0, r6, r0
   14220:	str	r0, [fp, #-40]	; 0xffffffd8
   14224:	ble	1427c <flatcc_builder_create_buffer@@Base+0x1d4>
   14228:	ldr	r0, [r4, #36]	; 0x24
   1422c:	ldr	r6, [r4, #44]	; 0x2c
   14230:	str	r1, [sp]
   14234:	add	r1, lr, #8
   14238:	mov	r3, r7
   1423c:	blx	r6
   14240:	cmp	r0, #0
   14244:	bne	1429c <flatcc_builder_create_buffer@@Base+0x1f4>
   14248:	cmp	r7, #0
   1424c:	str	r7, [r4, #136]	; 0x88
   14250:	movne	r0, r7
   14254:	subne	sp, fp, #28
   14258:	popne	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1425c:	movw	r0, #46504	; 0xb5a8
   14260:	movw	r1, #41986	; 0xa402
   14264:	movw	r3, #42301	; 0xa53d
   14268:	mov	r2, #772	; 0x304
   1426c:	movt	r0, #1
   14270:	movt	r1, #1
   14274:	movt	r3, #1
   14278:	bl	127a8 <__assert_fail@plt>
   1427c:	movw	r0, #46504	; 0xb5a8
   14280:	movw	r1, #41986	; 0xa402
   14284:	movw	r3, #46183	; 0xb467
   14288:	movw	r2, #647	; 0x287
   1428c:	movt	r0, #1
   14290:	movt	r1, #1
   14294:	movt	r3, #1
   14298:	bl	127a8 <__assert_fail@plt>
   1429c:	movw	r0, #46504	; 0xb5a8
   142a0:	movw	r1, #41986	; 0xa402
   142a4:	movw	r3, #46183	; 0xb467
   142a8:	movw	r2, #651	; 0x28b
   142ac:	movt	r0, #1
   142b0:	movt	r1, #1
   142b4:	movt	r3, #1
   142b8:	bl	127a8 <__assert_fail@plt>

000142bc <flatcc_builder_create_struct@@Base>:
   142bc:	push	{r4, r5, r6, sl, fp, lr}
   142c0:	add	fp, sp, #16
   142c4:	sub	sp, sp, #80	; 0x50
   142c8:	cmp	r3, #0
   142cc:	beq	143a4 <flatcc_builder_create_struct@@Base+0xe8>
   142d0:	mov	r5, r0
   142d4:	ldrh	r0, [r0, #128]	; 0x80
   142d8:	mov	r4, #0
   142dc:	cmp	r0, r3
   142e0:	strhcc	r3, [r5, #128]	; 0x80
   142e4:	sub	r3, r3, #1
   142e8:	cmp	r2, #0
   142ec:	ldr	r0, [r5, #136]	; 0x88
   142f0:	str	r4, [sp, #12]
   142f4:	str	r4, [sp, #8]
   142f8:	movne	r4, #1
   142fc:	strne	r2, [sp, #20]
   14300:	strne	r1, [sp, #16]
   14304:	strne	r2, [sp, #8]
   14308:	strne	r4, [sp, #12]
   1430c:	sub	r6, r0, r2
   14310:	and	r3, r6, r3
   14314:	cmp	r3, #0
   14318:	beq	14344 <flatcc_builder_create_struct@@Base+0x88>
   1431c:	add	r1, sp, #8
   14320:	movw	r6, #41456	; 0xa1f0
   14324:	add	r2, r3, r2
   14328:	add	r1, r1, r4, lsl #3
   1432c:	movt	r6, #1
   14330:	add	r4, r4, #1
   14334:	str	r2, [sp, #8]
   14338:	str	r6, [r1, #8]
   1433c:	str	r3, [r1, #12]
   14340:	str	r4, [sp, #12]
   14344:	cmp	r2, #0
   14348:	ble	143c4 <flatcc_builder_create_struct@@Base+0x108>
   1434c:	sub	r6, r0, r2
   14350:	ldr	r0, [r5, #36]	; 0x24
   14354:	ldr	ip, [r5, #44]	; 0x2c
   14358:	add	r1, sp, #8
   1435c:	str	r2, [sp]
   14360:	mov	r2, r4
   14364:	add	r1, r1, #8
   14368:	mov	r3, r6
   1436c:	blx	ip
   14370:	cmp	r0, #0
   14374:	streq	r6, [r5, #136]	; 0x88
   14378:	moveq	r0, r6
   1437c:	subeq	sp, fp, #16
   14380:	popeq	{r4, r5, r6, sl, fp, pc}
   14384:	movw	r0, #46504	; 0xb5a8
   14388:	movw	r1, #41986	; 0xa402
   1438c:	movw	r3, #46183	; 0xb467
   14390:	movw	r2, #651	; 0x28b
   14394:	movt	r0, #1
   14398:	movt	r1, #1
   1439c:	movt	r3, #1
   143a0:	bl	127a8 <__assert_fail@plt>
   143a4:	movw	r0, #42432	; 0xa5c0
   143a8:	movw	r1, #41986	; 0xa402
   143ac:	movw	r3, #42443	; 0xa5cb
   143b0:	movw	r2, #783	; 0x30f
   143b4:	movt	r0, #1
   143b8:	movt	r1, #1
   143bc:	movt	r3, #1
   143c0:	bl	127a8 <__assert_fail@plt>
   143c4:	movw	r0, #46504	; 0xb5a8
   143c8:	movw	r1, #41986	; 0xa402
   143cc:	movw	r3, #46183	; 0xb467
   143d0:	movw	r2, #647	; 0x287
   143d4:	movt	r0, #1
   143d8:	movt	r1, #1
   143dc:	movt	r3, #1
   143e0:	bl	127a8 <__assert_fail@plt>

000143e4 <flatcc_builder_start_buffer@@Base>:
   143e4:	push	{r4, r5, r6, r7, fp, lr}
   143e8:	add	fp, sp, #16
   143ec:	mov	r5, r1
   143f0:	ldrh	r1, [r0, #128]	; 0x80
   143f4:	mov	r6, r3
   143f8:	mov	r7, r2
   143fc:	mov	r4, r0
   14400:	bl	144a0 <flatcc_builder_start_buffer@@Base+0xbc>
   14404:	mov	r1, r0
   14408:	mvn	r0, #0
   1440c:	cmp	r1, #0
   14410:	popne	{r4, r5, r6, r7, fp, pc}
   14414:	mov	r0, #1
   14418:	cmp	r5, #0
   1441c:	strh	r0, [r4, #128]	; 0x80
   14420:	ldrh	r1, [r4, #132]	; 0x84
   14424:	ldr	r2, [r4, #32]
   14428:	strh	r1, [r2, #34]	; 0x22
   1442c:	strh	r7, [r4, #132]	; 0x84
   14430:	ldrh	r1, [r4, #164]	; 0xa4
   14434:	ldr	r2, [r4, #32]
   14438:	strh	r1, [r2, #32]
   1443c:	strh	r6, [r4, #164]	; 0xa4
   14440:	ldr	r1, [r4, #32]
   14444:	ldr	r2, [r4, #144]	; 0x90
   14448:	str	r2, [r1, #20]
   1444c:	ldr	r1, [r4, #32]
   14450:	ldr	r2, [r4, #152]	; 0x98
   14454:	str	r2, [r1, #28]
   14458:	ldr	r3, [r4, #148]	; 0x94
   1445c:	ldr	r1, [r4, #32]
   14460:	ldr	r2, [r4, #136]	; 0x88
   14464:	ldr	r7, [r4, #168]	; 0xa8
   14468:	add	r6, r3, #1
   1446c:	str	r2, [r4, #144]	; 0x90
   14470:	str	r6, [r4, #148]	; 0x94
   14474:	str	r3, [r4, #152]	; 0x98
   14478:	str	r7, [r1, #16]
   1447c:	movw	r1, #41456	; 0xa1f0
   14480:	movt	r1, #1
   14484:	movne	r1, r5
   14488:	ldr	r1, [r1]
   1448c:	str	r1, [r4, #168]	; 0xa8
   14490:	ldr	r1, [r4, #32]
   14494:	strh	r0, [r1, #14]
   14498:	mov	r0, #0
   1449c:	pop	{r4, r5, r6, r7, fp, pc}
   144a0:	push	{r4, r5, r6, r7, fp, lr}
   144a4:	add	fp, sp, #16
   144a8:	sub	sp, sp, #8
   144ac:	mov	r5, r1
   144b0:	ldr	r1, [r0, #156]	; 0x9c
   144b4:	ldr	r2, [r0, #160]	; 0xa0
   144b8:	mov	r4, r0
   144bc:	add	r0, r1, #1
   144c0:	cmp	r1, r2
   144c4:	str	r0, [r4, #156]	; 0x9c
   144c8:	bge	144dc <flatcc_builder_start_buffer@@Base+0xf8>
   144cc:	ldr	r0, [r4, #32]
   144d0:	add	r0, r0, #36	; 0x24
   144d4:	str	r0, [r4, #32]
   144d8:	b	14570 <flatcc_builder_start_buffer@@Base+0x18c>
   144dc:	ldr	r2, [r4, #176]	; 0xb0
   144e0:	mvn	r6, #0
   144e4:	cmp	r2, #1
   144e8:	cmpge	r1, r2
   144ec:	bge	145a8 <flatcc_builder_start_buffer@@Base+0x1c4>
   144f0:	add	r7, r0, r0, lsl #3
   144f4:	ldr	r0, [r4, #88]	; 0x58
   144f8:	lsl	r2, r7, #2
   144fc:	cmp	r2, r0
   14500:	bls	14528 <flatcc_builder_start_buffer@@Base+0x144>
   14504:	ldr	r0, [r4, #40]	; 0x28
   14508:	ldr	ip, [r4, #48]	; 0x30
   1450c:	mov	r3, #4
   14510:	add	r1, r4, #84	; 0x54
   14514:	str	r3, [sp]
   14518:	mov	r3, #0
   1451c:	blx	ip
   14520:	cmp	r0, #0
   14524:	bne	145b4 <flatcc_builder_start_buffer@@Base+0x1d0>
   14528:	ldr	r1, [r4, #84]	; 0x54
   1452c:	mvn	r0, #35	; 0x23
   14530:	add	r0, r0, r7, lsl #2
   14534:	adds	r0, r0, r1
   14538:	str	r0, [r4, #32]
   1453c:	beq	145a8 <flatcc_builder_start_buffer@@Base+0x1c4>
   14540:	ldr	r1, [r4, #88]	; 0x58
   14544:	movw	r3, #36409	; 0x8e39
   14548:	ldr	r2, [r4, #176]	; 0xb0
   1454c:	movt	r3, #14563	; 0x38e3
   14550:	umull	r1, r3, r1, r3
   14554:	cmp	r2, r3, lsr #3
   14558:	lsr	r1, r3, #3
   1455c:	mov	r3, r1
   14560:	movlt	r3, r2
   14564:	cmp	r2, #0
   14568:	movle	r3, r1
   1456c:	str	r3, [r4, #160]	; 0xa0
   14570:	ldr	r1, [r4, #20]
   14574:	mvn	r3, #3
   14578:	mov	r6, #0
   1457c:	str	r1, [r0, #8]
   14580:	ldrh	r2, [r4, #130]	; 0x82
   14584:	strh	r2, [r0, #12]
   14588:	strh	r5, [r4, #130]	; 0x82
   1458c:	ldr	r2, [r4, #28]
   14590:	stm	r0, {r2, r3}
   14594:	add	r0, r1, r2
   14598:	str	r6, [r4, #20]
   1459c:	add	r0, r0, #7
   145a0:	bic	r0, r0, #7
   145a4:	str	r0, [r4, #28]
   145a8:	mov	r0, r6
   145ac:	sub	sp, fp, #16
   145b0:	pop	{r4, r5, r6, r7, fp, pc}
   145b4:	movw	r0, #46504	; 0xb5a8
   145b8:	movw	r1, #41986	; 0xa402
   145bc:	movw	r3, #46050	; 0xb3e2
   145c0:	mov	r2, #308	; 0x134
   145c4:	movt	r0, #1
   145c8:	movt	r1, #1
   145cc:	movt	r3, #1
   145d0:	bl	127a8 <__assert_fail@plt>

000145d4 <flatcc_builder_end_buffer@@Base>:
   145d4:	push	{r4, r5, r6, sl, fp, lr}
   145d8:	add	fp, sp, #16
   145dc:	sub	sp, sp, #8
   145e0:	mov	r4, r0
   145e4:	ldr	r0, [r0, #32]
   145e8:	ldrh	r0, [r0, #14]
   145ec:	cmp	r0, #1
   145f0:	bne	146e4 <flatcc_builder_end_buffer@@Base+0x110>
   145f4:	mov	r3, r1
   145f8:	ldr	r1, [r4, #152]	; 0x98
   145fc:	ldrh	r0, [r4, #164]	; 0xa4
   14600:	ldrh	r2, [r4, #132]	; 0x84
   14604:	cmp	r1, #0
   14608:	ldrh	r1, [r4, #128]	; 0x80
   1460c:	and	r0, r0, #2
   14610:	orrne	r0, r0, #1
   14614:	cmp	r1, r2
   14618:	movcc	r1, r2
   1461c:	strhcc	r2, [r4, #128]	; 0x80
   14620:	str	r0, [sp, #4]
   14624:	mov	r0, r4
   14628:	str	r1, [sp]
   1462c:	add	r1, r4, #168	; 0xa8
   14630:	bl	140a8 <flatcc_builder_create_buffer@@Base>
   14634:	mov	r6, r0
   14638:	cmp	r0, #0
   1463c:	beq	146d8 <flatcc_builder_end_buffer@@Base+0x104>
   14640:	ldr	r1, [r4, #32]
   14644:	ldr	r0, [r4, #16]
   14648:	ldr	r2, [r4, #20]
   1464c:	ldr	r3, [r1, #20]
   14650:	str	r3, [r4, #144]	; 0x90
   14654:	ldr	r3, [r1, #28]
   14658:	str	r3, [r4, #152]	; 0x98
   1465c:	ldr	r3, [r1, #16]
   14660:	str	r3, [r4, #168]	; 0xa8
   14664:	ldrh	r1, [r1, #32]
   14668:	strh	r1, [r4, #164]	; 0xa4
   1466c:	mov	r1, #0
   14670:	bl	12778 <memset@plt>
   14674:	ldr	r0, [r4, #32]
   14678:	ldr	r1, [r4, #60]	; 0x3c
   1467c:	ldr	r2, [r4, #64]	; 0x40
   14680:	ldr	r3, [r0, #8]
   14684:	str	r3, [r4, #20]
   14688:	ldr	r3, [r0]
   1468c:	str	r3, [r4, #28]
   14690:	add	r1, r1, r3
   14694:	ldr	r5, [r0, #4]
   14698:	str	r1, [r4, #16]
   1469c:	sub	r1, r2, r3
   146a0:	cmp	r1, r5
   146a4:	movhi	r1, r5
   146a8:	str	r1, [r4, #24]
   146ac:	ldrh	r1, [r4, #130]	; 0x82
   146b0:	ldrh	r2, [r4, #128]	; 0x80
   146b4:	cmp	r2, r1
   146b8:	strhcc	r1, [r4, #128]	; 0x80
   146bc:	ldrh	r1, [r0, #12]
   146c0:	sub	r0, r0, #36	; 0x24
   146c4:	str	r0, [r4, #32]
   146c8:	strh	r1, [r4, #130]	; 0x82
   146cc:	ldr	r0, [r4, #156]	; 0x9c
   146d0:	sub	r0, r0, #1
   146d4:	str	r0, [r4, #156]	; 0x9c
   146d8:	mov	r0, r6
   146dc:	sub	sp, fp, #16
   146e0:	pop	{r4, r5, r6, sl, fp, pc}
   146e4:	movw	r0, #42545	; 0xa631
   146e8:	movw	r1, #41986	; 0xa402
   146ec:	movw	r3, #42589	; 0xa65d
   146f0:	movw	r2, #838	; 0x346
   146f4:	movt	r0, #1
   146f8:	movt	r1, #1
   146fc:	movt	r3, #1
   14700:	bl	127a8 <__assert_fail@plt>

00014704 <flatcc_builder_start_struct@@Base>:
   14704:	push	{r4, r5, r6, r7, fp, lr}
   14708:	add	fp, sp, #16
   1470c:	sub	sp, sp, #8
   14710:	mov	r6, r1
   14714:	mov	r1, r2
   14718:	mov	r4, r0
   1471c:	bl	144a0 <flatcc_builder_start_buffer@@Base+0xbc>
   14720:	mov	r5, #0
   14724:	cmp	r0, #0
   14728:	bne	147a4 <flatcc_builder_start_struct@@Base+0xa0>
   1472c:	ldr	r2, [r4, #32]
   14730:	mov	r0, #2
   14734:	mvn	r7, #3
   14738:	strh	r0, [r2, #14]
   1473c:	ldr	r1, [r4, #28]
   14740:	ldr	r3, [r4, #64]	; 0x40
   14744:	ldr	r0, [r4, #60]	; 0x3c
   14748:	sub	r3, r3, r1
   1474c:	add	r0, r0, r1
   14750:	cmn	r3, #4
   14754:	str	r0, [r4, #16]
   14758:	movcs	r3, r7
   1475c:	str	r3, [r4, #24]
   14760:	str	r7, [r2, #4]
   14764:	ldr	r7, [r4, #20]
   14768:	add	r2, r7, r6
   1476c:	cmp	r2, r3
   14770:	str	r2, [r4, #20]
   14774:	bcc	147e0 <flatcc_builder_start_struct@@Base+0xdc>
   14778:	ldr	r0, [r4, #40]	; 0x28
   1477c:	ldr	r6, [r4, #48]	; 0x30
   14780:	add	r1, r1, r2
   14784:	mov	r3, #1
   14788:	str	r3, [sp]
   1478c:	add	r2, r1, #1
   14790:	add	r1, r4, #60	; 0x3c
   14794:	mov	r3, #1
   14798:	blx	r6
   1479c:	cmp	r0, #0
   147a0:	beq	147b0 <flatcc_builder_start_struct@@Base+0xac>
   147a4:	mov	r0, r5
   147a8:	sub	sp, fp, #16
   147ac:	pop	{r4, r5, r6, r7, fp, pc}
   147b0:	ldr	r1, [r4, #28]
   147b4:	ldr	r0, [r4, #60]	; 0x3c
   147b8:	ldr	r3, [r4, #64]	; 0x40
   147bc:	ldr	r2, [r4, #32]
   147c0:	add	r0, r0, r1
   147c4:	sub	r1, r3, r1
   147c8:	mvn	r3, #3
   147cc:	cmn	r1, #4
   147d0:	str	r0, [r4, #16]
   147d4:	movcs	r1, r3
   147d8:	str	r1, [r4, #24]
   147dc:	str	r3, [r2, #4]
   147e0:	add	r5, r0, r7
   147e4:	mov	r0, r5
   147e8:	sub	sp, fp, #16
   147ec:	pop	{r4, r5, r6, r7, fp, pc}

000147f0 <flatcc_builder_struct_edit@@Base>:
   147f0:	ldr	r0, [r0, #16]
   147f4:	bx	lr

000147f8 <flatcc_builder_end_struct@@Base>:
   147f8:	push	{r4, r5, fp, lr}
   147fc:	add	fp, sp, #8
   14800:	mov	r4, r0
   14804:	ldr	r0, [r0, #32]
   14808:	ldrh	r0, [r0, #14]
   1480c:	cmp	r0, #2
   14810:	bne	148b0 <flatcc_builder_end_struct@@Base+0xb8>
   14814:	ldrh	r3, [r4, #130]	; 0x82
   14818:	ldr	r1, [r4, #16]
   1481c:	ldr	r2, [r4, #20]
   14820:	mov	r0, r4
   14824:	bl	142bc <flatcc_builder_create_struct@@Base>
   14828:	mov	r5, r0
   1482c:	cmp	r0, #0
   14830:	beq	148a8 <flatcc_builder_end_struct@@Base+0xb0>
   14834:	ldr	r0, [r4, #16]
   14838:	ldr	r2, [r4, #20]
   1483c:	mov	r1, #0
   14840:	bl	12778 <memset@plt>
   14844:	ldr	r0, [r4, #32]
   14848:	ldr	r1, [r4, #60]	; 0x3c
   1484c:	ldr	ip, [r4, #64]	; 0x40
   14850:	ldr	r3, [r0, #8]
   14854:	str	r3, [r4, #20]
   14858:	ldr	r3, [r0]
   1485c:	str	r3, [r4, #28]
   14860:	add	r1, r1, r3
   14864:	ldr	r2, [r0, #4]
   14868:	str	r1, [r4, #16]
   1486c:	sub	r1, ip, r3
   14870:	cmp	r1, r2
   14874:	movhi	r1, r2
   14878:	str	r1, [r4, #24]
   1487c:	ldrh	r1, [r4, #130]	; 0x82
   14880:	ldrh	r2, [r4, #128]	; 0x80
   14884:	cmp	r2, r1
   14888:	strhcc	r1, [r4, #128]	; 0x80
   1488c:	ldrh	r1, [r0, #12]
   14890:	sub	r0, r0, #36	; 0x24
   14894:	str	r0, [r4, #32]
   14898:	strh	r1, [r4, #130]	; 0x82
   1489c:	ldr	r0, [r4, #156]	; 0x9c
   148a0:	sub	r0, r0, #1
   148a4:	str	r0, [r4, #156]	; 0x9c
   148a8:	mov	r0, r5
   148ac:	pop	{r4, r5, fp, pc}
   148b0:	movw	r0, #42678	; 0xa6b6
   148b4:	movw	r1, #41986	; 0xa402
   148b8:	movw	r3, #42722	; 0xa6e2
   148bc:	mov	r2, #872	; 0x368
   148c0:	movt	r0, #1
   148c4:	movt	r1, #1
   148c8:	movt	r3, #1
   148cc:	bl	127a8 <__assert_fail@plt>

000148d0 <flatcc_builder_extend_vector@@Base>:
   148d0:	push	{r4, r5, fp, lr}
   148d4:	add	fp, sp, #8
   148d8:	sub	sp, sp, #8
   148dc:	mov	r4, r0
   148e0:	ldr	r0, [r0, #32]
   148e4:	ldr	r2, [r0, #20]
   148e8:	adds	r2, r2, r1
   148ec:	bcs	149ac <flatcc_builder_extend_vector@@Base+0xdc>
   148f0:	ldr	r3, [r0, #24]
   148f4:	cmp	r2, r3
   148f8:	bhi	149ac <flatcc_builder_extend_vector@@Base+0xdc>
   148fc:	str	r2, [r0, #20]
   14900:	ldr	r2, [r4, #32]
   14904:	ldr	r5, [r4, #20]
   14908:	ldr	r0, [r4, #24]
   1490c:	ldr	r2, [r2, #16]
   14910:	mla	r1, r2, r1, r5
   14914:	cmp	r1, r0
   14918:	str	r1, [r4, #20]
   1491c:	bcs	14930 <flatcc_builder_extend_vector@@Base+0x60>
   14920:	ldr	r0, [r4, #16]
   14924:	add	r0, r0, r5
   14928:	sub	sp, fp, #8
   1492c:	pop	{r4, r5, fp, pc}
   14930:	ldr	r2, [r4, #28]
   14934:	ldr	r0, [r4, #40]	; 0x28
   14938:	ldr	ip, [r4, #48]	; 0x30
   1493c:	mov	r3, #1
   14940:	str	r3, [sp]
   14944:	mov	r3, #1
   14948:	add	r1, r1, r2
   1494c:	add	r2, r1, #1
   14950:	add	r1, r4, #60	; 0x3c
   14954:	blx	ip
   14958:	mov	r1, r0
   1495c:	mov	r0, #0
   14960:	cmp	r1, #0
   14964:	beq	14970 <flatcc_builder_extend_vector@@Base+0xa0>
   14968:	sub	sp, fp, #8
   1496c:	pop	{r4, r5, fp, pc}
   14970:	ldr	r1, [r4, #28]
   14974:	ldr	r0, [r4, #60]	; 0x3c
   14978:	ldr	r3, [r4, #64]	; 0x40
   1497c:	ldr	r2, [r4, #32]
   14980:	add	r0, r0, r1
   14984:	sub	r1, r3, r1
   14988:	mvn	r3, #3
   1498c:	cmn	r1, #4
   14990:	str	r0, [r4, #16]
   14994:	movcs	r1, r3
   14998:	str	r1, [r4, #24]
   1499c:	str	r3, [r2, #4]
   149a0:	add	r0, r0, r5
   149a4:	sub	sp, fp, #8
   149a8:	pop	{r4, r5, fp, pc}
   149ac:	movw	r0, #46257	; 0xb4b1
   149b0:	movw	r1, #41986	; 0xa402
   149b4:	movw	r3, #46284	; 0xb4cc
   149b8:	mov	r2, #892	; 0x37c
   149bc:	movt	r0, #1
   149c0:	movt	r1, #1
   149c4:	movt	r3, #1
   149c8:	bl	127a8 <__assert_fail@plt>

000149cc <flatcc_builder_vector_push@@Base>:
   149cc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   149d0:	add	fp, sp, #24
   149d4:	sub	sp, sp, #8
   149d8:	mov	r5, r0
   149dc:	ldr	r0, [r0, #32]
   149e0:	mov	r8, r1
   149e4:	ldrh	r1, [r0, #14]
   149e8:	cmp	r1, #4
   149ec:	bne	14ad8 <flatcc_builder_vector_push@@Base+0x10c>
   149f0:	ldr	r1, [r0, #20]
   149f4:	ldr	r2, [r0, #24]
   149f8:	cmp	r1, r2
   149fc:	bhi	14af8 <flatcc_builder_vector_push@@Base+0x12c>
   14a00:	add	r1, r1, #1
   14a04:	str	r1, [r0, #20]
   14a08:	ldr	r1, [r5, #32]
   14a0c:	ldr	r4, [r5, #20]
   14a10:	ldr	r0, [r5, #24]
   14a14:	ldr	r6, [r1, #16]
   14a18:	add	r1, r4, r6
   14a1c:	cmp	r1, r0
   14a20:	str	r1, [r5, #20]
   14a24:	bcs	14a50 <flatcc_builder_vector_push@@Base+0x84>
   14a28:	ldr	r0, [r5, #16]
   14a2c:	adds	r7, r0, r4
   14a30:	beq	14ac8 <flatcc_builder_vector_push@@Base+0xfc>
   14a34:	mov	r0, r7
   14a38:	mov	r1, r8
   14a3c:	mov	r2, r6
   14a40:	bl	12718 <memcpy@plt>
   14a44:	mov	r0, r7
   14a48:	sub	sp, fp, #24
   14a4c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14a50:	ldr	r2, [r5, #28]
   14a54:	ldr	r0, [r5, #40]	; 0x28
   14a58:	ldr	r7, [r5, #48]	; 0x30
   14a5c:	mov	r3, #1
   14a60:	str	r3, [sp]
   14a64:	mov	r3, #1
   14a68:	add	r1, r1, r2
   14a6c:	add	r2, r1, #1
   14a70:	add	r1, r5, #60	; 0x3c
   14a74:	blx	r7
   14a78:	mov	r7, #0
   14a7c:	cmp	r0, #0
   14a80:	beq	14a90 <flatcc_builder_vector_push@@Base+0xc4>
   14a84:	mov	r0, r7
   14a88:	sub	sp, fp, #24
   14a8c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14a90:	ldr	r1, [r5, #28]
   14a94:	ldr	r0, [r5, #60]	; 0x3c
   14a98:	ldr	r3, [r5, #64]	; 0x40
   14a9c:	ldr	r2, [r5, #32]
   14aa0:	add	r0, r0, r1
   14aa4:	sub	r1, r3, r1
   14aa8:	mvn	r3, #3
   14aac:	cmn	r1, #4
   14ab0:	str	r0, [r5, #16]
   14ab4:	movcs	r1, r3
   14ab8:	str	r1, [r5, #24]
   14abc:	str	r3, [r2, #4]
   14ac0:	adds	r7, r0, r4
   14ac4:	bne	14a34 <flatcc_builder_vector_push@@Base+0x68>
   14ac8:	mov	r7, #0
   14acc:	mov	r0, r7
   14ad0:	sub	sp, fp, #24
   14ad4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14ad8:	movw	r0, #42789	; 0xa725
   14adc:	movw	r1, #41986	; 0xa402
   14ae0:	movw	r3, #42833	; 0xa751
   14ae4:	movw	r2, #907	; 0x38b
   14ae8:	movt	r0, #1
   14aec:	movt	r1, #1
   14af0:	movt	r3, #1
   14af4:	bl	127a8 <__assert_fail@plt>
   14af8:	movw	r0, #42900	; 0xa794
   14afc:	movw	r1, #41986	; 0xa402
   14b00:	movw	r3, #42833	; 0xa751
   14b04:	mov	r2, #908	; 0x38c
   14b08:	movt	r0, #1
   14b0c:	movt	r1, #1
   14b10:	movt	r3, #1
   14b14:	bl	127a8 <__assert_fail@plt>

00014b18 <flatcc_builder_append_vector@@Base>:
   14b18:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14b1c:	add	fp, sp, #24
   14b20:	sub	sp, sp, #8
   14b24:	mov	r6, r0
   14b28:	ldr	r0, [r0, #32]
   14b2c:	mov	r8, r1
   14b30:	ldrh	r1, [r0, #14]
   14b34:	cmp	r1, #4
   14b38:	bne	14c4c <flatcc_builder_append_vector@@Base+0x134>
   14b3c:	ldr	r1, [r0, #20]
   14b40:	mov	r5, r2
   14b44:	adds	r1, r1, r2
   14b48:	bcs	14c2c <flatcc_builder_append_vector@@Base+0x114>
   14b4c:	ldr	r2, [r0, #24]
   14b50:	cmp	r1, r2
   14b54:	bhi	14c2c <flatcc_builder_append_vector@@Base+0x114>
   14b58:	str	r1, [r0, #20]
   14b5c:	ldr	r1, [r6, #32]
   14b60:	ldr	r4, [r6, #20]
   14b64:	ldr	r0, [r6, #24]
   14b68:	ldr	r9, [r1, #16]
   14b6c:	mla	r1, r9, r5, r4
   14b70:	cmp	r1, r0
   14b74:	str	r1, [r6, #20]
   14b78:	bcs	14ba4 <flatcc_builder_append_vector@@Base+0x8c>
   14b7c:	ldr	r0, [r6, #16]
   14b80:	adds	r7, r0, r4
   14b84:	beq	14c1c <flatcc_builder_append_vector@@Base+0x104>
   14b88:	mul	r2, r9, r5
   14b8c:	mov	r0, r7
   14b90:	mov	r1, r8
   14b94:	bl	12718 <memcpy@plt>
   14b98:	mov	r0, r7
   14b9c:	sub	sp, fp, #24
   14ba0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14ba4:	ldr	r2, [r6, #28]
   14ba8:	ldr	r0, [r6, #40]	; 0x28
   14bac:	ldr	r7, [r6, #48]	; 0x30
   14bb0:	mov	r3, #1
   14bb4:	str	r3, [sp]
   14bb8:	mov	r3, #1
   14bbc:	add	r1, r1, r2
   14bc0:	add	r2, r1, #1
   14bc4:	add	r1, r6, #60	; 0x3c
   14bc8:	blx	r7
   14bcc:	mov	r7, #0
   14bd0:	cmp	r0, #0
   14bd4:	beq	14be4 <flatcc_builder_append_vector@@Base+0xcc>
   14bd8:	mov	r0, r7
   14bdc:	sub	sp, fp, #24
   14be0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14be4:	ldr	r1, [r6, #28]
   14be8:	ldr	r0, [r6, #60]	; 0x3c
   14bec:	ldr	r3, [r6, #64]	; 0x40
   14bf0:	ldr	r2, [r6, #32]
   14bf4:	add	r0, r0, r1
   14bf8:	sub	r1, r3, r1
   14bfc:	mvn	r3, #3
   14c00:	cmn	r1, #4
   14c04:	str	r0, [r6, #16]
   14c08:	movcs	r1, r3
   14c0c:	str	r1, [r6, #24]
   14c10:	str	r3, [r2, #4]
   14c14:	adds	r7, r0, r4
   14c18:	bne	14b88 <flatcc_builder_append_vector@@Base+0x70>
   14c1c:	mov	r7, #0
   14c20:	mov	r0, r7
   14c24:	sub	sp, fp, #24
   14c28:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14c2c:	movw	r0, #46257	; 0xb4b1
   14c30:	movw	r1, #41986	; 0xa402
   14c34:	movw	r3, #46284	; 0xb4cc
   14c38:	mov	r2, #892	; 0x37c
   14c3c:	movt	r0, #1
   14c40:	movt	r1, #1
   14c44:	movt	r3, #1
   14c48:	bl	127a8 <__assert_fail@plt>
   14c4c:	movw	r0, #42789	; 0xa725
   14c50:	movw	r1, #41986	; 0xa402
   14c54:	movw	r3, #42961	; 0xa7d1
   14c58:	movw	r2, #915	; 0x393
   14c5c:	movt	r0, #1
   14c60:	movt	r1, #1
   14c64:	movt	r3, #1
   14c68:	bl	127a8 <__assert_fail@plt>

00014c6c <flatcc_builder_extend_offset_vector@@Base>:
   14c6c:	push	{r4, r5, fp, lr}
   14c70:	add	fp, sp, #8
   14c74:	sub	sp, sp, #8
   14c78:	mov	r4, r0
   14c7c:	ldr	r0, [r0, #32]
   14c80:	ldr	r2, [r0, #20]
   14c84:	adds	r2, r2, r1
   14c88:	cmpcc	r2, #1073741824	; 0x40000000
   14c8c:	bcc	14cb0 <flatcc_builder_extend_offset_vector@@Base+0x44>
   14c90:	movw	r0, #46257	; 0xb4b1
   14c94:	movw	r1, #41986	; 0xa402
   14c98:	movw	r3, #46284	; 0xb4cc
   14c9c:	mov	r2, #892	; 0x37c
   14ca0:	movt	r0, #1
   14ca4:	movt	r1, #1
   14ca8:	movt	r3, #1
   14cac:	bl	127a8 <__assert_fail@plt>
   14cb0:	str	r2, [r0, #20]
   14cb4:	ldr	r5, [r4, #20]
   14cb8:	ldr	r0, [r4, #24]
   14cbc:	add	r1, r5, r1, lsl #2
   14cc0:	cmp	r1, r0
   14cc4:	str	r1, [r4, #20]
   14cc8:	bcs	14cdc <flatcc_builder_extend_offset_vector@@Base+0x70>
   14ccc:	ldr	r0, [r4, #16]
   14cd0:	add	r0, r0, r5
   14cd4:	sub	sp, fp, #8
   14cd8:	pop	{r4, r5, fp, pc}
   14cdc:	ldr	r2, [r4, #28]
   14ce0:	ldr	r0, [r4, #40]	; 0x28
   14ce4:	ldr	ip, [r4, #48]	; 0x30
   14ce8:	mov	r3, #1
   14cec:	str	r3, [sp]
   14cf0:	mov	r3, #1
   14cf4:	add	r1, r1, r2
   14cf8:	add	r2, r1, #1
   14cfc:	add	r1, r4, #60	; 0x3c
   14d00:	blx	ip
   14d04:	mov	r1, r0
   14d08:	mov	r0, #0
   14d0c:	cmp	r1, #0
   14d10:	beq	14d1c <flatcc_builder_extend_offset_vector@@Base+0xb0>
   14d14:	sub	sp, fp, #8
   14d18:	pop	{r4, r5, fp, pc}
   14d1c:	ldr	r1, [r4, #28]
   14d20:	ldr	r0, [r4, #60]	; 0x3c
   14d24:	ldr	r3, [r4, #64]	; 0x40
   14d28:	ldr	r2, [r4, #32]
   14d2c:	add	r0, r0, r1
   14d30:	sub	r1, r3, r1
   14d34:	mvn	r3, #3
   14d38:	cmn	r1, #4
   14d3c:	str	r0, [r4, #16]
   14d40:	movcs	r1, r3
   14d44:	str	r1, [r4, #24]
   14d48:	str	r3, [r2, #4]
   14d4c:	add	r0, r0, r5
   14d50:	sub	sp, fp, #8
   14d54:	pop	{r4, r5, fp, pc}

00014d58 <flatcc_builder_offset_vector_push@@Base>:
   14d58:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14d5c:	add	fp, sp, #24
   14d60:	sub	sp, sp, #8
   14d64:	mov	r6, r0
   14d68:	ldr	r0, [r0, #32]
   14d6c:	mov	r8, r1
   14d70:	ldrh	r1, [r0, #14]
   14d74:	cmp	r1, #5
   14d78:	bne	14e38 <flatcc_builder_offset_vector_push@@Base+0xe0>
   14d7c:	ldr	r1, [r0, #20]
   14d80:	mov	r5, #0
   14d84:	cmn	r1, #-1073741823	; 0xc0000001
   14d88:	beq	14de4 <flatcc_builder_offset_vector_push@@Base+0x8c>
   14d8c:	add	r1, r1, #1
   14d90:	str	r1, [r0, #20]
   14d94:	ldr	r7, [r6, #20]
   14d98:	ldr	r0, [r6, #24]
   14d9c:	add	r1, r7, #4
   14da0:	cmp	r1, r0
   14da4:	str	r1, [r6, #20]
   14da8:	bcs	14db4 <flatcc_builder_offset_vector_push@@Base+0x5c>
   14dac:	ldr	r0, [r6, #16]
   14db0:	b	14e20 <flatcc_builder_offset_vector_push@@Base+0xc8>
   14db4:	ldr	r1, [r6, #28]
   14db8:	ldr	r0, [r6, #40]	; 0x28
   14dbc:	ldr	r4, [r6, #48]	; 0x30
   14dc0:	mov	r2, #1
   14dc4:	mov	r3, #1
   14dc8:	str	r2, [sp]
   14dcc:	add	r1, r7, r1
   14dd0:	add	r2, r1, #5
   14dd4:	add	r1, r6, #60	; 0x3c
   14dd8:	blx	r4
   14ddc:	cmp	r0, #0
   14de0:	beq	14df0 <flatcc_builder_offset_vector_push@@Base+0x98>
   14de4:	mov	r0, r5
   14de8:	sub	sp, fp, #24
   14dec:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14df0:	ldr	r1, [r6, #28]
   14df4:	ldr	r0, [r6, #60]	; 0x3c
   14df8:	ldr	r3, [r6, #64]	; 0x40
   14dfc:	ldr	r2, [r6, #32]
   14e00:	add	r0, r0, r1
   14e04:	sub	r1, r3, r1
   14e08:	mvn	r3, #3
   14e0c:	cmn	r1, #4
   14e10:	str	r0, [r6, #16]
   14e14:	movcs	r1, r3
   14e18:	str	r1, [r6, #24]
   14e1c:	str	r3, [r2, #4]
   14e20:	adds	r0, r0, r7
   14e24:	movne	r5, r0
   14e28:	strne	r8, [r0]
   14e2c:	mov	r0, r5
   14e30:	sub	sp, fp, #24
   14e34:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14e38:	movw	r0, #43038	; 0xa81e
   14e3c:	movw	r1, #41986	; 0xa402
   14e40:	movw	r3, #43089	; 0xa851
   14e44:	movw	r2, #934	; 0x3a6
   14e48:	movt	r0, #1
   14e4c:	movt	r1, #1
   14e50:	movt	r3, #1
   14e54:	bl	127a8 <__assert_fail@plt>

00014e58 <flatcc_builder_append_offset_vector@@Base>:
   14e58:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14e5c:	add	fp, sp, #24
   14e60:	sub	sp, sp, #8
   14e64:	mov	r6, r0
   14e68:	ldr	r0, [r0, #32]
   14e6c:	mov	r8, r1
   14e70:	ldrh	r1, [r0, #14]
   14e74:	cmp	r1, #5
   14e78:	bne	14f7c <flatcc_builder_append_offset_vector@@Base+0x124>
   14e7c:	ldr	r1, [r0, #20]
   14e80:	mov	r5, r2
   14e84:	adds	r1, r1, r2
   14e88:	cmpcc	r1, #1073741824	; 0x40000000
   14e8c:	bcc	14eb0 <flatcc_builder_append_offset_vector@@Base+0x58>
   14e90:	movw	r0, #46257	; 0xb4b1
   14e94:	movw	r1, #41986	; 0xa402
   14e98:	movw	r3, #46284	; 0xb4cc
   14e9c:	mov	r2, #892	; 0x37c
   14ea0:	movt	r0, #1
   14ea4:	movt	r1, #1
   14ea8:	movt	r3, #1
   14eac:	bl	127a8 <__assert_fail@plt>
   14eb0:	str	r1, [r0, #20]
   14eb4:	ldr	r4, [r6, #20]
   14eb8:	ldr	r0, [r6, #24]
   14ebc:	add	r1, r4, r5, lsl #2
   14ec0:	cmp	r1, r0
   14ec4:	str	r1, [r6, #20]
   14ec8:	bcs	14ef4 <flatcc_builder_append_offset_vector@@Base+0x9c>
   14ecc:	ldr	r0, [r6, #16]
   14ed0:	adds	r7, r0, r4
   14ed4:	beq	14f6c <flatcc_builder_append_offset_vector@@Base+0x114>
   14ed8:	lsl	r2, r5, #2
   14edc:	mov	r0, r7
   14ee0:	mov	r1, r8
   14ee4:	bl	12718 <memcpy@plt>
   14ee8:	mov	r0, r7
   14eec:	sub	sp, fp, #24
   14ef0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14ef4:	ldr	r2, [r6, #28]
   14ef8:	ldr	r0, [r6, #40]	; 0x28
   14efc:	ldr	r7, [r6, #48]	; 0x30
   14f00:	mov	r3, #1
   14f04:	str	r3, [sp]
   14f08:	mov	r3, #1
   14f0c:	add	r1, r1, r2
   14f10:	add	r2, r1, #1
   14f14:	add	r1, r6, #60	; 0x3c
   14f18:	blx	r7
   14f1c:	mov	r7, #0
   14f20:	cmp	r0, #0
   14f24:	beq	14f34 <flatcc_builder_append_offset_vector@@Base+0xdc>
   14f28:	mov	r0, r7
   14f2c:	sub	sp, fp, #24
   14f30:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14f34:	ldr	r1, [r6, #28]
   14f38:	ldr	r0, [r6, #60]	; 0x3c
   14f3c:	ldr	r3, [r6, #64]	; 0x40
   14f40:	ldr	r2, [r6, #32]
   14f44:	add	r0, r0, r1
   14f48:	sub	r1, r3, r1
   14f4c:	mvn	r3, #3
   14f50:	cmn	r1, #4
   14f54:	str	r0, [r6, #16]
   14f58:	movcs	r1, r3
   14f5c:	str	r1, [r6, #24]
   14f60:	str	r3, [r2, #4]
   14f64:	adds	r7, r0, r4
   14f68:	bne	14ed8 <flatcc_builder_append_offset_vector@@Base+0x80>
   14f6c:	mov	r7, #0
   14f70:	mov	r0, r7
   14f74:	sub	sp, fp, #24
   14f78:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14f7c:	movw	r0, #43038	; 0xa81e
   14f80:	movw	r1, #41986	; 0xa402
   14f84:	movw	r3, #43187	; 0xa8b3
   14f88:	mov	r2, #948	; 0x3b4
   14f8c:	movt	r0, #1
   14f90:	movt	r1, #1
   14f94:	movt	r3, #1
   14f98:	bl	127a8 <__assert_fail@plt>

00014f9c <flatcc_builder_extend_string@@Base>:
   14f9c:	push	{r4, r5, fp, lr}
   14fa0:	add	fp, sp, #8
   14fa4:	sub	sp, sp, #8
   14fa8:	mov	r4, r0
   14fac:	ldr	r0, [r0, #32]
   14fb0:	ldrh	r2, [r0, #14]
   14fb4:	cmp	r2, #6
   14fb8:	bne	15070 <flatcc_builder_extend_string@@Base+0xd4>
   14fbc:	ldr	r2, [r0, #20]
   14fc0:	adds	r2, r2, r1
   14fc4:	bcs	15090 <flatcc_builder_extend_string@@Base+0xf4>
   14fc8:	str	r2, [r0, #20]
   14fcc:	ldr	r5, [r4, #20]
   14fd0:	ldr	r0, [r4, #24]
   14fd4:	add	r1, r5, r1
   14fd8:	cmp	r1, r0
   14fdc:	str	r1, [r4, #20]
   14fe0:	bcs	14ff4 <flatcc_builder_extend_string@@Base+0x58>
   14fe4:	ldr	r0, [r4, #16]
   14fe8:	add	r0, r0, r5
   14fec:	sub	sp, fp, #8
   14ff0:	pop	{r4, r5, fp, pc}
   14ff4:	ldr	r2, [r4, #28]
   14ff8:	ldr	r0, [r4, #40]	; 0x28
   14ffc:	ldr	ip, [r4, #48]	; 0x30
   15000:	mov	r3, #1
   15004:	str	r3, [sp]
   15008:	mov	r3, #1
   1500c:	add	r1, r1, r2
   15010:	add	r2, r1, #1
   15014:	add	r1, r4, #60	; 0x3c
   15018:	blx	ip
   1501c:	mov	r1, r0
   15020:	mov	r0, #0
   15024:	cmp	r1, #0
   15028:	beq	15034 <flatcc_builder_extend_string@@Base+0x98>
   1502c:	sub	sp, fp, #8
   15030:	pop	{r4, r5, fp, pc}
   15034:	ldr	r1, [r4, #28]
   15038:	ldr	r0, [r4, #60]	; 0x3c
   1503c:	ldr	r3, [r4, #64]	; 0x40
   15040:	ldr	r2, [r4, #32]
   15044:	add	r0, r0, r1
   15048:	sub	r1, r3, r1
   1504c:	mvn	r3, #3
   15050:	cmn	r1, #4
   15054:	str	r0, [r4, #16]
   15058:	movcs	r1, r3
   1505c:	str	r1, [r4, #24]
   15060:	str	r3, [r2, #4]
   15064:	add	r0, r0, r5
   15068:	sub	sp, fp, #8
   1506c:	pop	{r4, r5, fp, pc}
   15070:	movw	r0, #43303	; 0xa927
   15074:	movw	r1, #41986	; 0xa402
   15078:	movw	r3, #43347	; 0xa953
   1507c:	movw	r2, #957	; 0x3bd
   15080:	movt	r0, #1
   15084:	movt	r1, #1
   15088:	movt	r3, #1
   1508c:	bl	127a8 <__assert_fail@plt>
   15090:	movw	r0, #46257	; 0xb4b1
   15094:	movw	r1, #41986	; 0xa402
   15098:	movw	r3, #46284	; 0xb4cc
   1509c:	mov	r2, #892	; 0x37c
   150a0:	movt	r0, #1
   150a4:	movt	r1, #1
   150a8:	movt	r3, #1
   150ac:	bl	127a8 <__assert_fail@plt>

000150b0 <flatcc_builder_append_string@@Base>:
   150b0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   150b4:	add	fp, sp, #24
   150b8:	sub	sp, sp, #8
   150bc:	mov	r6, r0
   150c0:	ldr	r0, [r0, #32]
   150c4:	mov	r8, r1
   150c8:	ldrh	r1, [r0, #14]
   150cc:	cmp	r1, #6
   150d0:	bne	151b0 <flatcc_builder_append_string@@Base+0x100>
   150d4:	ldr	r1, [r0, #20]
   150d8:	mov	r4, r2
   150dc:	adds	r1, r1, r2
   150e0:	bcs	151d0 <flatcc_builder_append_string@@Base+0x120>
   150e4:	str	r1, [r0, #20]
   150e8:	ldr	r5, [r6, #20]
   150ec:	ldr	r0, [r6, #24]
   150f0:	add	r1, r5, r4
   150f4:	cmp	r1, r0
   150f8:	str	r1, [r6, #20]
   150fc:	bcs	15128 <flatcc_builder_append_string@@Base+0x78>
   15100:	ldr	r0, [r6, #16]
   15104:	adds	r7, r0, r5
   15108:	beq	151a0 <flatcc_builder_append_string@@Base+0xf0>
   1510c:	mov	r0, r7
   15110:	mov	r1, r8
   15114:	mov	r2, r4
   15118:	bl	12718 <memcpy@plt>
   1511c:	mov	r0, r7
   15120:	sub	sp, fp, #24
   15124:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15128:	ldr	r2, [r6, #28]
   1512c:	ldr	r0, [r6, #40]	; 0x28
   15130:	ldr	r7, [r6, #48]	; 0x30
   15134:	mov	r3, #1
   15138:	str	r3, [sp]
   1513c:	mov	r3, #1
   15140:	add	r1, r1, r2
   15144:	add	r2, r1, #1
   15148:	add	r1, r6, #60	; 0x3c
   1514c:	blx	r7
   15150:	mov	r7, #0
   15154:	cmp	r0, #0
   15158:	beq	15168 <flatcc_builder_append_string@@Base+0xb8>
   1515c:	mov	r0, r7
   15160:	sub	sp, fp, #24
   15164:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15168:	ldr	r1, [r6, #28]
   1516c:	ldr	r0, [r6, #60]	; 0x3c
   15170:	ldr	r3, [r6, #64]	; 0x40
   15174:	ldr	r2, [r6, #32]
   15178:	add	r0, r0, r1
   1517c:	sub	r1, r3, r1
   15180:	mvn	r3, #3
   15184:	cmn	r1, #4
   15188:	str	r0, [r6, #16]
   1518c:	movcs	r1, r3
   15190:	str	r1, [r6, #24]
   15194:	str	r3, [r2, #4]
   15198:	adds	r7, r0, r5
   1519c:	bne	1510c <flatcc_builder_append_string@@Base+0x5c>
   151a0:	mov	r7, #0
   151a4:	mov	r0, r7
   151a8:	sub	sp, fp, #24
   151ac:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   151b0:	movw	r0, #43303	; 0xa927
   151b4:	movw	r1, #41986	; 0xa402
   151b8:	movw	r3, #43410	; 0xa992
   151bc:	movw	r2, #966	; 0x3c6
   151c0:	movt	r0, #1
   151c4:	movt	r1, #1
   151c8:	movt	r3, #1
   151cc:	bl	127a8 <__assert_fail@plt>
   151d0:	movw	r0, #46257	; 0xb4b1
   151d4:	movw	r1, #41986	; 0xa402
   151d8:	movw	r3, #46284	; 0xb4cc
   151dc:	mov	r2, #892	; 0x37c
   151e0:	movt	r0, #1
   151e4:	movt	r1, #1
   151e8:	movt	r3, #1
   151ec:	bl	127a8 <__assert_fail@plt>

000151f0 <flatcc_builder_append_string_str@@Base>:
   151f0:	push	{r4, r5, fp, lr}
   151f4:	add	fp, sp, #8
   151f8:	mov	r5, r0
   151fc:	mov	r0, r1
   15200:	mov	r4, r1
   15204:	bl	12760 <strlen@plt>
   15208:	mov	r2, r0
   1520c:	mov	r0, r5
   15210:	mov	r1, r4
   15214:	pop	{r4, r5, fp, lr}
   15218:	b	150b0 <flatcc_builder_append_string@@Base>

0001521c <flatcc_builder_append_string_strn@@Base>:
   1521c:	push	{r4, r5, r6, sl, fp, lr}
   15220:	add	fp, sp, #16
   15224:	mov	r6, r0
   15228:	mov	r5, r1
   1522c:	mov	r0, r1
   15230:	mov	r1, #0
   15234:	mov	r4, r2
   15238:	bl	12790 <memchr@plt>
   1523c:	cmp	r0, #0
   15240:	mov	r1, r5
   15244:	subne	r4, r0, r5
   15248:	mov	r0, r6
   1524c:	mov	r2, r4
   15250:	pop	{r4, r5, r6, sl, fp, lr}
   15254:	b	150b0 <flatcc_builder_append_string@@Base>

00015258 <flatcc_builder_truncate_vector@@Base>:
   15258:	push	{fp, lr}
   1525c:	mov	fp, sp
   15260:	ldr	r2, [r0, #32]
   15264:	ldrh	r3, [r2, #14]
   15268:	cmp	r3, #4
   1526c:	bne	152b4 <flatcc_builder_truncate_vector@@Base+0x5c>
   15270:	ldr	r3, [r2, #20]
   15274:	cmp	r3, r1
   15278:	bcc	152d4 <flatcc_builder_truncate_vector@@Base+0x7c>
   1527c:	sub	r3, r3, r1
   15280:	str	r3, [r2, #20]
   15284:	ldr	r2, [r0, #32]
   15288:	ldr	r3, [r0, #20]
   1528c:	ldr	ip, [r0, #16]
   15290:	ldr	r2, [r2, #16]
   15294:	mls	r3, r2, r1, r3
   15298:	mul	r2, r2, r1
   1529c:	mov	r1, #0
   152a0:	str	r3, [r0, #20]
   152a4:	add	r0, ip, r3
   152a8:	bl	12778 <memset@plt>
   152ac:	mov	r0, #0
   152b0:	pop	{fp, pc}
   152b4:	movw	r0, #42789	; 0xa725
   152b8:	movw	r1, #41986	; 0xa402
   152bc:	movw	r3, #43487	; 0xa9df
   152c0:	movw	r2, #985	; 0x3d9
   152c4:	movt	r0, #1
   152c8:	movt	r1, #1
   152cc:	movt	r3, #1
   152d0:	bl	127a8 <__assert_fail@plt>
   152d4:	movw	r0, #43550	; 0xaa1e
   152d8:	movw	r1, #41986	; 0xa402
   152dc:	movw	r3, #43487	; 0xa9df
   152e0:	movw	r2, #986	; 0x3da
   152e4:	movt	r0, #1
   152e8:	movt	r1, #1
   152ec:	movt	r3, #1
   152f0:	bl	127a8 <__assert_fail@plt>

000152f4 <flatcc_builder_truncate_offset_vector@@Base>:
   152f4:	push	{fp, lr}
   152f8:	mov	fp, sp
   152fc:	ldr	r2, [r0, #32]
   15300:	ldrh	r3, [r2, #14]
   15304:	cmp	r3, #5
   15308:	bne	15350 <flatcc_builder_truncate_offset_vector@@Base+0x5c>
   1530c:	ldr	r3, [r2, #20]
   15310:	cmp	r3, r1
   15314:	bcc	15370 <flatcc_builder_truncate_offset_vector@@Base+0x7c>
   15318:	sub	r3, r3, r1
   1531c:	str	r3, [r2, #20]
   15320:	ldr	r2, [r0, #32]
   15324:	ldr	r3, [r0, #20]
   15328:	ldr	ip, [r0, #16]
   1532c:	ldr	r2, [r2, #16]
   15330:	mls	r3, r2, r1, r3
   15334:	mul	r2, r2, r1
   15338:	mov	r1, #0
   1533c:	str	r3, [r0, #20]
   15340:	add	r0, ip, r3
   15344:	bl	12778 <memset@plt>
   15348:	mov	r0, #0
   1534c:	pop	{fp, pc}
   15350:	movw	r0, #43038	; 0xa81e
   15354:	movw	r1, #41986	; 0xa402
   15358:	movw	r3, #43586	; 0xaa42
   1535c:	movw	r2, #994	; 0x3e2
   15360:	movt	r0, #1
   15364:	movt	r1, #1
   15368:	movt	r3, #1
   1536c:	bl	127a8 <__assert_fail@plt>
   15370:	movw	r0, #43656	; 0xaa88
   15374:	movw	r1, #41986	; 0xa402
   15378:	movw	r3, #43586	; 0xaa42
   1537c:	movw	r2, #995	; 0x3e3
   15380:	movt	r0, #1
   15384:	movt	r1, #1
   15388:	movt	r3, #1
   1538c:	bl	127a8 <__assert_fail@plt>

00015390 <flatcc_builder_truncate_string@@Base>:
   15390:	push	{fp, lr}
   15394:	mov	fp, sp
   15398:	mov	r2, r1
   1539c:	ldr	r1, [r0, #32]
   153a0:	ldrh	r3, [r1, #14]
   153a4:	cmp	r3, #6
   153a8:	bne	153e4 <flatcc_builder_truncate_string@@Base+0x54>
   153ac:	ldr	r3, [r1, #20]
   153b0:	cmp	r3, r2
   153b4:	bcc	15404 <flatcc_builder_truncate_string@@Base+0x74>
   153b8:	sub	r3, r3, r2
   153bc:	str	r3, [r1, #20]
   153c0:	ldr	r3, [r0, #20]
   153c4:	ldr	r1, [r0, #16]
   153c8:	sub	r3, r3, r2
   153cc:	str	r3, [r0, #20]
   153d0:	add	r0, r1, r3
   153d4:	mov	r1, #0
   153d8:	bl	12778 <memset@plt>
   153dc:	mov	r0, #0
   153e0:	pop	{fp, pc}
   153e4:	movw	r0, #43303	; 0xa927
   153e8:	movw	r1, #41986	; 0xa402
   153ec:	movw	r3, #43715	; 0xaac3
   153f0:	movw	r2, #1003	; 0x3eb
   153f4:	movt	r0, #1
   153f8:	movt	r1, #1
   153fc:	movt	r3, #1
   15400:	bl	127a8 <__assert_fail@plt>
   15404:	movw	r0, #43778	; 0xab02
   15408:	movw	r1, #41986	; 0xa402
   1540c:	movw	r3, #43715	; 0xaac3
   15410:	mov	r2, #1004	; 0x3ec
   15414:	movt	r0, #1
   15418:	movt	r1, #1
   1541c:	movt	r3, #1
   15420:	bl	127a8 <__assert_fail@plt>

00015424 <flatcc_builder_start_vector@@Base>:
   15424:	push	{r4, r5, r6, r7, fp, lr}
   15428:	add	fp, sp, #16
   1542c:	mov	r7, #4
   15430:	cmp	r2, #4
   15434:	mov	r6, r1
   15438:	mov	r5, r3
   1543c:	mov	r4, r0
   15440:	movls	r2, r7
   15444:	mov	r1, r2
   15448:	bl	144a0 <flatcc_builder_start_buffer@@Base+0xbc>
   1544c:	mov	r1, r0
   15450:	mvn	r0, #0
   15454:	cmp	r1, #0
   15458:	popne	{r4, r5, r6, r7, fp, pc}
   1545c:	ldr	r0, [r4, #32]
   15460:	str	r6, [r0, #16]
   15464:	mov	r0, #0
   15468:	ldr	r1, [r4, #32]
   1546c:	str	r0, [r1, #20]
   15470:	ldr	r1, [r4, #32]
   15474:	str	r5, [r1, #24]
   15478:	ldr	r1, [r4, #32]
   1547c:	strh	r7, [r1, #14]
   15480:	ldr	r2, [r4, #28]
   15484:	ldr	r3, [r4, #60]	; 0x3c
   15488:	ldr	r7, [r4, #64]	; 0x40
   1548c:	add	r3, r3, r2
   15490:	sub	r2, r7, r2
   15494:	str	r3, [r4, #16]
   15498:	mvn	r3, #3
   1549c:	cmn	r2, #4
   154a0:	movcs	r2, r3
   154a4:	str	r2, [r4, #24]
   154a8:	str	r3, [r1, #4]
   154ac:	pop	{r4, r5, r6, r7, fp, pc}

000154b0 <flatcc_builder_start_offset_vector@@Base>:
   154b0:	push	{r4, r5, fp, lr}
   154b4:	add	fp, sp, #8
   154b8:	mov	r1, #4
   154bc:	mov	r4, r0
   154c0:	mov	r5, #4
   154c4:	bl	144a0 <flatcc_builder_start_buffer@@Base+0xbc>
   154c8:	mov	r1, r0
   154cc:	mvn	r0, #0
   154d0:	cmp	r1, #0
   154d4:	popne	{r4, r5, fp, pc}
   154d8:	ldr	r0, [r4, #32]
   154dc:	mov	r2, #5
   154e0:	str	r5, [r0, #16]
   154e4:	mov	r0, #0
   154e8:	ldr	r1, [r4, #32]
   154ec:	str	r0, [r1, #20]
   154f0:	ldr	r1, [r4, #32]
   154f4:	strh	r2, [r1, #14]
   154f8:	ldr	r2, [r4, #28]
   154fc:	ldr	r3, [r4, #60]	; 0x3c
   15500:	ldr	r5, [r4, #64]	; 0x40
   15504:	add	r3, r3, r2
   15508:	sub	r2, r5, r2
   1550c:	str	r3, [r4, #16]
   15510:	mvn	r3, #3
   15514:	cmn	r2, #4
   15518:	movcs	r2, r3
   1551c:	str	r2, [r4, #24]
   15520:	str	r3, [r1, #4]
   15524:	pop	{r4, r5, fp, pc}

00015528 <flatcc_builder_create_offset_vector@@Base>:
   15528:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1552c:	add	fp, sp, #24
   15530:	sub	sp, sp, #8
   15534:	mov	r8, r1
   15538:	mov	r1, #4
   1553c:	mov	r6, r2
   15540:	mov	r4, r0
   15544:	mov	r5, #4
   15548:	bl	144a0 <flatcc_builder_start_buffer@@Base+0xbc>
   1554c:	mov	r7, #0
   15550:	cmp	r0, #0
   15554:	beq	15564 <flatcc_builder_create_offset_vector@@Base+0x3c>
   15558:	mov	r0, r7
   1555c:	sub	sp, fp, #24
   15560:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15564:	ldr	r0, [r4, #32]
   15568:	mov	r1, #0
   1556c:	str	r5, [r0, #16]
   15570:	ldr	r0, [r4, #32]
   15574:	str	r1, [r0, #20]
   15578:	mov	r1, #5
   1557c:	ldr	r0, [r4, #32]
   15580:	strh	r1, [r0, #14]
   15584:	ldr	r1, [r4, #28]
   15588:	ldr	r2, [r4, #60]	; 0x3c
   1558c:	ldr	r3, [r4, #64]	; 0x40
   15590:	add	r2, r2, r1
   15594:	sub	r1, r3, r1
   15598:	str	r2, [r4, #16]
   1559c:	mvn	r2, #3
   155a0:	cmn	r1, #4
   155a4:	movcs	r1, r2
   155a8:	str	r1, [r4, #24]
   155ac:	str	r2, [r0, #4]
   155b0:	ldr	r1, [r0, #20]
   155b4:	adds	r1, r1, r6
   155b8:	cmpcc	r1, #1073741824	; 0x40000000
   155bc:	bcc	155e0 <flatcc_builder_create_offset_vector@@Base+0xb8>
   155c0:	movw	r0, #46257	; 0xb4b1
   155c4:	movw	r1, #41986	; 0xa402
   155c8:	movw	r3, #46284	; 0xb4cc
   155cc:	mov	r2, #892	; 0x37c
   155d0:	movt	r0, #1
   155d4:	movt	r1, #1
   155d8:	movt	r3, #1
   155dc:	bl	127a8 <__assert_fail@plt>
   155e0:	str	r1, [r0, #20]
   155e4:	ldr	r5, [r4, #20]
   155e8:	ldr	r0, [r4, #24]
   155ec:	add	r1, r5, r6, lsl #2
   155f0:	cmp	r1, r0
   155f4:	str	r1, [r4, #20]
   155f8:	bcs	156cc <flatcc_builder_create_offset_vector@@Base+0x1a4>
   155fc:	ldr	r0, [r4, #16]
   15600:	adds	r0, r0, r5
   15604:	beq	15738 <flatcc_builder_create_offset_vector@@Base+0x210>
   15608:	lsl	r2, r6, #2
   1560c:	mov	r1, r8
   15610:	bl	12718 <memcpy@plt>
   15614:	ldr	r0, [r4, #32]
   15618:	ldrh	r1, [r0, #14]
   1561c:	cmp	r1, #5
   15620:	bne	15748 <flatcc_builder_create_offset_vector@@Base+0x220>
   15624:	ldr	r2, [r0, #20]
   15628:	ldr	r1, [r4, #16]
   1562c:	mov	r0, r4
   15630:	mov	r3, #0
   15634:	mov	r7, #0
   15638:	bl	167a8 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   1563c:	cmp	r0, #0
   15640:	beq	15558 <flatcc_builder_create_offset_vector@@Base+0x30>
   15644:	mov	r5, r0
   15648:	ldr	r0, [r4, #16]
   1564c:	ldr	r2, [r4, #20]
   15650:	mov	r1, #0
   15654:	bl	12778 <memset@plt>
   15658:	ldr	r0, [r4, #32]
   1565c:	ldr	r1, [r4, #60]	; 0x3c
   15660:	ldr	r2, [r4, #64]	; 0x40
   15664:	ldr	r3, [r0, #8]
   15668:	str	r3, [r4, #20]
   1566c:	ldr	r3, [r0]
   15670:	str	r3, [r4, #28]
   15674:	add	r1, r1, r3
   15678:	ldr	r7, [r0, #4]
   1567c:	str	r1, [r4, #16]
   15680:	sub	r1, r2, r3
   15684:	cmp	r1, r7
   15688:	movhi	r1, r7
   1568c:	mov	r7, r5
   15690:	str	r1, [r4, #24]
   15694:	ldrh	r1, [r4, #130]	; 0x82
   15698:	ldrh	r2, [r4, #128]	; 0x80
   1569c:	cmp	r2, r1
   156a0:	strhcc	r1, [r4, #128]	; 0x80
   156a4:	ldrh	r1, [r0, #12]
   156a8:	sub	r0, r0, #36	; 0x24
   156ac:	str	r0, [r4, #32]
   156b0:	strh	r1, [r4, #130]	; 0x82
   156b4:	ldr	r0, [r4, #156]	; 0x9c
   156b8:	sub	r0, r0, #1
   156bc:	str	r0, [r4, #156]	; 0x9c
   156c0:	mov	r0, r7
   156c4:	sub	sp, fp, #24
   156c8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   156cc:	ldr	r2, [r4, #28]
   156d0:	ldr	r0, [r4, #40]	; 0x28
   156d4:	ldr	r7, [r4, #48]	; 0x30
   156d8:	mov	r3, #1
   156dc:	str	r3, [sp]
   156e0:	mov	r3, #1
   156e4:	add	r1, r1, r2
   156e8:	add	r2, r1, #1
   156ec:	add	r1, r4, #60	; 0x3c
   156f0:	blx	r7
   156f4:	mov	r7, #0
   156f8:	cmp	r0, #0
   156fc:	bne	15558 <flatcc_builder_create_offset_vector@@Base+0x30>
   15700:	ldr	r1, [r4, #28]
   15704:	ldr	r0, [r4, #60]	; 0x3c
   15708:	ldr	r3, [r4, #64]	; 0x40
   1570c:	ldr	r2, [r4, #32]
   15710:	add	r0, r0, r1
   15714:	sub	r1, r3, r1
   15718:	mvn	r3, #3
   1571c:	cmn	r1, #4
   15720:	str	r0, [r4, #16]
   15724:	movcs	r1, r3
   15728:	str	r1, [r4, #24]
   1572c:	str	r3, [r2, #4]
   15730:	adds	r0, r0, r5
   15734:	bne	15608 <flatcc_builder_create_offset_vector@@Base+0xe0>
   15738:	mov	r7, #0
   1573c:	mov	r0, r7
   15740:	sub	sp, fp, #24
   15744:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15748:	movw	r0, #43038	; 0xa81e
   1574c:	movw	r1, #41986	; 0xa402
   15750:	movw	r3, #44621	; 0xae4d
   15754:	movw	r2, #1480	; 0x5c8
   15758:	movt	r0, #1
   1575c:	movt	r1, #1
   15760:	movt	r3, #1
   15764:	bl	127a8 <__assert_fail@plt>

00015768 <flatcc_builder_end_offset_vector@@Base>:
   15768:	push	{r4, r5, fp, lr}
   1576c:	add	fp, sp, #8
   15770:	mov	r4, r0
   15774:	ldr	r0, [r0, #32]
   15778:	ldrh	r1, [r0, #14]
   1577c:	cmp	r1, #5
   15780:	bne	15820 <flatcc_builder_end_offset_vector@@Base+0xb8>
   15784:	ldr	r2, [r0, #20]
   15788:	ldr	r1, [r4, #16]
   1578c:	mov	r0, r4
   15790:	mov	r3, #0
   15794:	bl	167a8 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   15798:	mov	r5, r0
   1579c:	cmp	r0, #0
   157a0:	beq	15818 <flatcc_builder_end_offset_vector@@Base+0xb0>
   157a4:	ldr	r0, [r4, #16]
   157a8:	ldr	r2, [r4, #20]
   157ac:	mov	r1, #0
   157b0:	bl	12778 <memset@plt>
   157b4:	ldr	r0, [r4, #32]
   157b8:	ldr	r1, [r4, #60]	; 0x3c
   157bc:	ldr	ip, [r4, #64]	; 0x40
   157c0:	ldr	r3, [r0, #8]
   157c4:	str	r3, [r4, #20]
   157c8:	ldr	r3, [r0]
   157cc:	str	r3, [r4, #28]
   157d0:	add	r1, r1, r3
   157d4:	ldr	r2, [r0, #4]
   157d8:	str	r1, [r4, #16]
   157dc:	sub	r1, ip, r3
   157e0:	cmp	r1, r2
   157e4:	movhi	r1, r2
   157e8:	str	r1, [r4, #24]
   157ec:	ldrh	r1, [r4, #130]	; 0x82
   157f0:	ldrh	r2, [r4, #128]	; 0x80
   157f4:	cmp	r2, r1
   157f8:	strhcc	r1, [r4, #128]	; 0x80
   157fc:	ldrh	r1, [r0, #12]
   15800:	sub	r0, r0, #36	; 0x24
   15804:	str	r0, [r4, #32]
   15808:	strh	r1, [r4, #130]	; 0x82
   1580c:	ldr	r0, [r4, #156]	; 0x9c
   15810:	sub	r0, r0, #1
   15814:	str	r0, [r4, #156]	; 0x9c
   15818:	mov	r0, r5
   1581c:	pop	{r4, r5, fp, pc}
   15820:	movw	r0, #43038	; 0xa81e
   15824:	movw	r1, #41986	; 0xa402
   15828:	movw	r3, #44621	; 0xae4d
   1582c:	movw	r2, #1480	; 0x5c8
   15830:	movt	r0, #1
   15834:	movt	r1, #1
   15838:	movt	r3, #1
   1583c:	bl	127a8 <__assert_fail@plt>

00015840 <flatcc_builder_start_string@@Base>:
   15840:	push	{r4, r5, fp, lr}
   15844:	add	fp, sp, #8
   15848:	mov	r1, #1
   1584c:	mov	r4, r0
   15850:	mov	r5, #1
   15854:	bl	144a0 <flatcc_builder_start_buffer@@Base+0xbc>
   15858:	mov	r1, r0
   1585c:	mvn	r0, #0
   15860:	cmp	r1, #0
   15864:	popne	{r4, r5, fp, pc}
   15868:	ldr	r0, [r4, #32]
   1586c:	mov	r2, #6
   15870:	str	r5, [r0, #16]
   15874:	mov	r0, #0
   15878:	ldr	r1, [r4, #32]
   1587c:	str	r0, [r1, #20]
   15880:	ldr	r1, [r4, #32]
   15884:	strh	r2, [r1, #14]
   15888:	ldr	r2, [r4, #28]
   1588c:	ldr	r3, [r4, #60]	; 0x3c
   15890:	ldr	r5, [r4, #64]	; 0x40
   15894:	add	r3, r3, r2
   15898:	sub	r2, r5, r2
   1589c:	str	r3, [r4, #16]
   158a0:	mvn	r3, #3
   158a4:	cmn	r2, #4
   158a8:	movcs	r2, r3
   158ac:	str	r2, [r4, #24]
   158b0:	str	r3, [r1, #4]
   158b4:	pop	{r4, r5, fp, pc}

000158b8 <flatcc_builder_reserve_table@@Base>:
   158b8:	push	{r4, r5, r6, sl, fp, lr}
   158bc:	add	fp, sp, #16
   158c0:	sub	sp, sp, #8
   158c4:	cmn	r1, #1
   158c8:	ble	159a0 <flatcc_builder_reserve_table@@Base+0xe8>
   158cc:	mov	r4, r0
   158d0:	ldr	r0, [r0, #32]
   158d4:	mov	r5, r1
   158d8:	ldr	r1, [r4, #56]	; 0x38
   158dc:	ldrh	r2, [r0, #28]
   158e0:	ldr	r0, [r0, #16]
   158e4:	add	r6, r0, r2, lsl #1
   158e8:	add	r0, r6, r5, lsl #1
   158ec:	add	r2, r0, #4
   158f0:	cmp	r2, r1
   158f4:	bls	1591c <flatcc_builder_reserve_table@@Base+0x64>
   158f8:	ldr	r0, [r4, #40]	; 0x28
   158fc:	ldr	ip, [r4, #48]	; 0x30
   15900:	mov	r3, #0
   15904:	add	r1, r4, #52	; 0x34
   15908:	str	r3, [sp]
   1590c:	mov	r3, #1
   15910:	blx	ip
   15914:	cmp	r0, #0
   15918:	bne	159c0 <flatcc_builder_reserve_table@@Base+0x108>
   1591c:	ldr	r0, [r4, #52]	; 0x34
   15920:	adds	r0, r0, r6
   15924:	str	r0, [r4, #4]
   15928:	beq	15994 <flatcc_builder_reserve_table@@Base+0xdc>
   1592c:	add	r0, r0, #4
   15930:	lsl	r1, r5, #1
   15934:	str	r0, [r4, #4]
   15938:	ldr	r0, [r4, #32]
   1593c:	ldr	r3, [r4, #80]	; 0x50
   15940:	ldr	r5, [r0, #20]
   15944:	orr	r0, r1, #1
   15948:	add	r2, r5, r0
   1594c:	cmp	r2, r3
   15950:	bls	15978 <flatcc_builder_reserve_table@@Base+0xc0>
   15954:	ldr	r0, [r4, #40]	; 0x28
   15958:	ldr	r6, [r4, #48]	; 0x30
   1595c:	mov	r3, #3
   15960:	add	r1, r4, #76	; 0x4c
   15964:	str	r3, [sp]
   15968:	mov	r3, #0
   1596c:	blx	r6
   15970:	cmp	r0, #0
   15974:	bne	159c0 <flatcc_builder_reserve_table@@Base+0x108>
   15978:	ldr	r0, [r4, #76]	; 0x4c
   1597c:	adds	r0, r0, r5
   15980:	str	r0, [r4]
   15984:	mov	r0, #0
   15988:	mvneq	r0, #0
   1598c:	sub	sp, fp, #16
   15990:	pop	{r4, r5, r6, sl, fp, pc}
   15994:	mvn	r0, #0
   15998:	sub	sp, fp, #16
   1599c:	pop	{r4, r5, r6, sl, fp, pc}
   159a0:	movw	r0, #43877	; 0xab65
   159a4:	movw	r1, #41986	; 0xa402
   159a8:	movw	r3, #43812	; 0xab24
   159ac:	movw	r2, #1065	; 0x429
   159b0:	movt	r0, #1
   159b4:	movt	r1, #1
   159b8:	movt	r3, #1
   159bc:	bl	127a8 <__assert_fail@plt>
   159c0:	movw	r0, #46504	; 0xb5a8
   159c4:	movw	r1, #41986	; 0xa402
   159c8:	movw	r3, #46050	; 0xb3e2
   159cc:	mov	r2, #308	; 0x134
   159d0:	movt	r0, #1
   159d4:	movt	r1, #1
   159d8:	movt	r3, #1
   159dc:	bl	127a8 <__assert_fail@plt>

000159e0 <flatcc_builder_start_table@@Base>:
   159e0:	push	{r4, r5, r6, r7, fp, lr}
   159e4:	add	fp, sp, #16
   159e8:	sub	sp, sp, #8
   159ec:	mov	r6, r1
   159f0:	mov	r1, #4
   159f4:	mov	r4, r0
   159f8:	bl	144a0 <flatcc_builder_start_buffer@@Base+0xbc>
   159fc:	mvn	r5, #0
   15a00:	cmp	r0, #0
   15a04:	beq	15a14 <flatcc_builder_start_table@@Base+0x34>
   15a08:	mov	r0, r5
   15a0c:	sub	sp, fp, #16
   15a10:	pop	{r4, r5, r6, r7, fp, pc}
   15a14:	mov	r1, r4
   15a18:	ldr	r2, [r4, #4]
   15a1c:	ldr	r3, [r4, #32]
   15a20:	ldr	r0, [r1, #52]!	; 0x34
   15a24:	sub	r0, r2, r0
   15a28:	str	r0, [r3, #16]
   15a2c:	ldr	r0, [r4]
   15a30:	ldr	r3, [r4, #76]	; 0x4c
   15a34:	ldr	r2, [r4, #32]
   15a38:	sub	r0, r0, r3
   15a3c:	mov	r3, #0
   15a40:	str	r0, [r2, #20]
   15a44:	ldr	r0, [r4, #12]
   15a48:	ldr	r2, [r4, #32]
   15a4c:	str	r0, [r2, #24]
   15a50:	ldr	r0, [r4, #32]
   15a54:	ldrh	r2, [r4, #8]
   15a58:	strh	r2, [r0, #28]
   15a5c:	movw	r0, #15186	; 0x3b52
   15a60:	strh	r3, [r4, #8]
   15a64:	mov	r2, #3
   15a68:	movt	r0, #12137	; 0x2f69
   15a6c:	str	r0, [r4, #12]
   15a70:	ldr	r0, [r4, #32]
   15a74:	strh	r2, [r0, #14]
   15a78:	ldrh	r2, [r0, #28]
   15a7c:	ldr	r0, [r0, #16]
   15a80:	add	r7, r0, r2, lsl #1
   15a84:	add	r0, r7, r6, lsl #1
   15a88:	add	r2, r0, #4
   15a8c:	ldr	r0, [r4, #56]	; 0x38
   15a90:	cmp	r2, r0
   15a94:	bls	15ab4 <flatcc_builder_start_table@@Base+0xd4>
   15a98:	ldr	r0, [r4, #40]	; 0x28
   15a9c:	ldr	ip, [r4, #48]	; 0x30
   15aa0:	str	r3, [sp]
   15aa4:	mov	r3, #1
   15aa8:	blx	ip
   15aac:	cmp	r0, #0
   15ab0:	bne	15b60 <flatcc_builder_start_table@@Base+0x180>
   15ab4:	ldr	r0, [r4, #52]	; 0x34
   15ab8:	adds	r0, r0, r7
   15abc:	str	r0, [r4, #4]
   15ac0:	beq	15a08 <flatcc_builder_start_table@@Base+0x28>
   15ac4:	add	r0, r0, #4
   15ac8:	lsl	r1, r6, #1
   15acc:	str	r0, [r4, #4]
   15ad0:	ldr	r0, [r4, #32]
   15ad4:	ldr	r3, [r4, #80]	; 0x50
   15ad8:	ldr	r6, [r0, #20]
   15adc:	orr	r0, r1, #1
   15ae0:	add	r2, r6, r0
   15ae4:	cmp	r2, r3
   15ae8:	bls	15b10 <flatcc_builder_start_table@@Base+0x130>
   15aec:	ldr	r0, [r4, #40]	; 0x28
   15af0:	ldr	r7, [r4, #48]	; 0x30
   15af4:	mov	r3, #3
   15af8:	add	r1, r4, #76	; 0x4c
   15afc:	str	r3, [sp]
   15b00:	mov	r3, #0
   15b04:	blx	r7
   15b08:	cmp	r0, #0
   15b0c:	bne	15b60 <flatcc_builder_start_table@@Base+0x180>
   15b10:	ldr	r0, [r4, #76]	; 0x4c
   15b14:	adds	r0, r0, r6
   15b18:	str	r0, [r4]
   15b1c:	beq	15a08 <flatcc_builder_start_table@@Base+0x28>
   15b20:	ldr	r0, [r4, #28]
   15b24:	ldr	r2, [r4, #60]	; 0x3c
   15b28:	ldr	r3, [r4, #64]	; 0x40
   15b2c:	ldr	r1, [r4, #32]
   15b30:	mov	r5, #0
   15b34:	add	r2, r2, r0
   15b38:	sub	r0, r3, r0
   15b3c:	str	r2, [r4, #16]
   15b40:	movw	r2, #65532	; 0xfffc
   15b44:	cmp	r0, r2
   15b48:	movcs	r0, r2
   15b4c:	str	r0, [r4, #24]
   15b50:	str	r2, [r1, #4]
   15b54:	mov	r0, r5
   15b58:	sub	sp, fp, #16
   15b5c:	pop	{r4, r5, r6, r7, fp, pc}
   15b60:	movw	r0, #46504	; 0xb5a8
   15b64:	movw	r1, #41986	; 0xa402
   15b68:	movw	r3, #46050	; 0xb3e2
   15b6c:	mov	r2, #308	; 0x134
   15b70:	movt	r0, #1
   15b74:	movt	r1, #1
   15b78:	movt	r3, #1
   15b7c:	bl	127a8 <__assert_fail@plt>

00015b80 <flatcc_builder_create_vtable@@Base>:
   15b80:	push	{r4, r5, fp, lr}
   15b84:	add	fp, sp, #8
   15b88:	sub	sp, sp, #80	; 0x50
   15b8c:	mov	r3, r2
   15b90:	mov	r2, #0
   15b94:	mov	r4, r0
   15b98:	cmp	r3, #0
   15b9c:	str	r2, [sp, #12]
   15ba0:	str	r2, [sp, #8]
   15ba4:	movne	r2, #1
   15ba8:	strne	r3, [sp, #20]
   15bac:	strne	r1, [sp, #16]
   15bb0:	strne	r3, [sp, #8]
   15bb4:	strne	r2, [sp, #12]
   15bb8:	ldr	r0, [r4, #152]	; 0x98
   15bbc:	cmp	r0, #0
   15bc0:	bne	15bd0 <flatcc_builder_create_vtable@@Base+0x50>
   15bc4:	ldr	r0, [r4, #180]	; 0xb4
   15bc8:	cmp	r0, #0
   15bcc:	beq	15c2c <flatcc_builder_create_vtable@@Base+0xac>
   15bd0:	cmp	r3, #0
   15bd4:	beq	15c70 <flatcc_builder_create_vtable@@Base+0xf0>
   15bd8:	ldr	r0, [r4, #136]	; 0x88
   15bdc:	ldr	ip, [r4, #44]	; 0x2c
   15be0:	add	r1, sp, #8
   15be4:	add	r1, r1, #8
   15be8:	sub	r5, r0, r3
   15bec:	ldr	r0, [r4, #36]	; 0x24
   15bf0:	str	r3, [sp]
   15bf4:	mov	r3, r5
   15bf8:	blx	ip
   15bfc:	cmp	r0, #0
   15c00:	bne	15c90 <flatcc_builder_create_vtable@@Base+0x110>
   15c04:	cmp	r5, #0
   15c08:	str	r5, [r4, #136]	; 0x88
   15c0c:	beq	15c20 <flatcc_builder_create_vtable@@Base+0xa0>
   15c10:	add	r1, r5, #1
   15c14:	mov	r0, r1
   15c18:	sub	sp, fp, #8
   15c1c:	pop	{r4, r5, fp, pc}
   15c20:	mov	r0, #0
   15c24:	sub	sp, fp, #8
   15c28:	pop	{r4, r5, fp, pc}
   15c2c:	ldr	r5, [r4, #140]	; 0x8c
   15c30:	ldr	r0, [r4, #36]	; 0x24
   15c34:	ldr	ip, [r4, #44]	; 0x2c
   15c38:	add	r1, r5, r3
   15c3c:	str	r1, [r4, #140]	; 0x8c
   15c40:	add	r1, sp, #8
   15c44:	str	r3, [sp]
   15c48:	mov	r3, r5
   15c4c:	add	r1, r1, #8
   15c50:	blx	ip
   15c54:	cmp	r0, #0
   15c58:	bne	15cb0 <flatcc_builder_create_vtable@@Base+0x130>
   15c5c:	adds	r1, r5, #1
   15c60:	mov	r0, #0
   15c64:	movcc	r0, r1
   15c68:	sub	sp, fp, #8
   15c6c:	pop	{r4, r5, fp, pc}
   15c70:	movw	r0, #46504	; 0xb5a8
   15c74:	movw	r1, #41986	; 0xa402
   15c78:	movw	r3, #46183	; 0xb467
   15c7c:	movw	r2, #647	; 0x287
   15c80:	movt	r0, #1
   15c84:	movt	r1, #1
   15c88:	movt	r3, #1
   15c8c:	bl	127a8 <__assert_fail@plt>
   15c90:	movw	r0, #46504	; 0xb5a8
   15c94:	movw	r1, #41986	; 0xa402
   15c98:	movw	r3, #46183	; 0xb467
   15c9c:	movw	r2, #651	; 0x28b
   15ca0:	movt	r0, #1
   15ca4:	movt	r1, #1
   15ca8:	movt	r3, #1
   15cac:	bl	127a8 <__assert_fail@plt>
   15cb0:	movw	r0, #46504	; 0xb5a8
   15cb4:	movw	r1, #41986	; 0xa402
   15cb8:	movw	r3, #46371	; 0xb523
   15cbc:	movw	r2, #677	; 0x2a5
   15cc0:	movt	r0, #1
   15cc4:	movt	r1, #1
   15cc8:	movt	r3, #1
   15ccc:	bl	127a8 <__assert_fail@plt>

00015cd0 <flatcc_builder_create_cached_vtable@@Base>:
   15cd0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15cd4:	add	fp, sp, #28
   15cd8:	sub	sp, sp, #20
   15cdc:	mov	sl, r0
   15ce0:	ldr	r0, [r0, #116]	; 0x74
   15ce4:	mov	r8, r3
   15ce8:	mov	r5, r2
   15cec:	str	r1, [sp, #16]
   15cf0:	cmp	r0, #0
   15cf4:	beq	15d98 <flatcc_builder_create_cached_vtable@@Base+0xc8>
   15cf8:	ldr	r1, [sl, #92]	; 0x5c
   15cfc:	rsb	r0, r0, #32
   15d00:	lsr	r0, r8, r0
   15d04:	add	r6, r1, r0, lsl #2
   15d08:	cmp	r6, #0
   15d0c:	beq	15e5c <flatcc_builder_create_cached_vtable@@Base+0x18c>
   15d10:	ldr	r7, [r6]
   15d14:	str	r6, [sp, #12]
   15d18:	cmp	r7, #0
   15d1c:	beq	15e6c <flatcc_builder_create_cached_vtable@@Base+0x19c>
   15d20:	ldr	r4, [sl, #68]	; 0x44
   15d24:	ldr	r8, [sl, #100]	; 0x64
   15d28:	mov	r0, #0
   15d2c:	str	r0, [sp, #8]
   15d30:	b	15d44 <flatcc_builder_create_cached_vtable@@Base+0x74>
   15d34:	ldr	r7, [r9, #12]!
   15d38:	mov	r6, r9
   15d3c:	cmp	r7, #0
   15d40:	beq	15e54 <flatcc_builder_create_cached_vtable@@Base+0x184>
   15d44:	add	r9, r8, r7
   15d48:	mov	r1, r4
   15d4c:	ldr	r0, [r9, #8]
   15d50:	ldrh	r0, [r1, r0]!	; <UNPREDICTABLE>
   15d54:	cmp	r0, r5
   15d58:	bne	15d34 <flatcc_builder_create_cached_vtable@@Base+0x64>
   15d5c:	ldr	r0, [sp, #16]
   15d60:	mov	r2, r5
   15d64:	bl	12754 <bcmp@plt>
   15d68:	cmp	r0, #0
   15d6c:	bne	15d34 <flatcc_builder_create_cached_vtable@@Base+0x64>
   15d70:	ldr	r0, [sl, #152]	; 0x98
   15d74:	ldr	r1, [r9, #4]
   15d78:	cmp	r1, r0
   15d7c:	beq	15fd8 <flatcc_builder_create_cached_vtable@@Base+0x308>
   15d80:	mov	r6, r9
   15d84:	mov	r0, r9
   15d88:	ldr	r7, [r6, #12]!
   15d8c:	cmp	r7, #0
   15d90:	bne	15d2c <flatcc_builder_create_cached_vtable@@Base+0x5c>
   15d94:	b	15e70 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
   15d98:	ldr	r0, [sl, #124]	; 0x7c
   15d9c:	cmp	r0, #0
   15da0:	bne	1602c <flatcc_builder_create_cached_vtable@@Base+0x35c>
   15da4:	ldr	r0, [sl, #104]	; 0x68
   15da8:	add	r7, sl, #100	; 0x64
   15dac:	cmp	r0, #15
   15db0:	bhi	15ddc <flatcc_builder_create_cached_vtable@@Base+0x10c>
   15db4:	ldr	r0, [sl, #40]	; 0x28
   15db8:	ldr	r6, [sl, #48]	; 0x30
   15dbc:	mov	r1, #6
   15dc0:	mov	r2, #16
   15dc4:	mov	r3, #0
   15dc8:	str	r1, [sp]
   15dcc:	mov	r1, r7
   15dd0:	blx	r6
   15dd4:	cmp	r0, #0
   15dd8:	bne	1600c <flatcc_builder_create_cached_vtable@@Base+0x33c>
   15ddc:	ldr	r0, [r7]
   15de0:	mov	r7, #0
   15de4:	cmp	r0, #0
   15de8:	beq	15f10 <flatcc_builder_create_cached_vtable@@Base+0x240>
   15dec:	mov	r0, #16
   15df0:	mov	r2, #5
   15df4:	add	r1, sl, #92	; 0x5c
   15df8:	mov	r3, #1
   15dfc:	mov	r4, #256	; 0x100
   15e00:	str	r0, [sl, #124]	; 0x7c
   15e04:	ldr	r0, [sl, #40]	; 0x28
   15e08:	ldr	r6, [sl, #48]	; 0x30
   15e0c:	str	r2, [sp]
   15e10:	mov	r2, #256	; 0x100
   15e14:	blx	r6
   15e18:	cmp	r0, #0
   15e1c:	bne	15f10 <flatcc_builder_create_cached_vtable@@Base+0x240>
   15e20:	ldr	r0, [sl, #96]	; 0x60
   15e24:	mov	r1, r4
   15e28:	lsl	r4, r4, #1
   15e2c:	cmp	r0, r1, lsl #1
   15e30:	bcs	15e24 <flatcc_builder_create_cached_vtable@@Base+0x154>
   15e34:	lsr	r1, r1, #2
   15e38:	mvn	r0, #0
   15e3c:	mov	r2, #1
   15e40:	add	r0, r0, #1
   15e44:	cmp	r1, r2, lsl r0
   15e48:	bhi	15e40 <flatcc_builder_create_cached_vtable@@Base+0x170>
   15e4c:	str	r0, [sl, #116]	; 0x74
   15e50:	b	15cf8 <flatcc_builder_create_cached_vtable@@Base+0x28>
   15e54:	ldr	r9, [sp, #8]
   15e58:	b	15e70 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
   15e5c:	mov	r7, #0
   15e60:	mov	r0, r7
   15e64:	sub	sp, fp, #28
   15e68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15e6c:	mov	r9, #0
   15e70:	ldr	r4, [sl, #124]	; 0x7c
   15e74:	ldr	r0, [sl, #104]	; 0x68
   15e78:	add	r7, sl, #100	; 0x64
   15e7c:	add	r2, r4, #16
   15e80:	cmp	r2, r0
   15e84:	bls	15eac <flatcc_builder_create_cached_vtable@@Base+0x1dc>
   15e88:	ldr	r0, [sl, #40]	; 0x28
   15e8c:	ldr	r6, [sl, #48]	; 0x30
   15e90:	mov	r1, #6
   15e94:	mov	r3, #0
   15e98:	str	r1, [sp]
   15e9c:	mov	r1, r7
   15ea0:	blx	r6
   15ea4:	cmp	r0, #0
   15ea8:	bne	1600c <flatcc_builder_create_cached_vtable@@Base+0x33c>
   15eac:	ldr	r0, [r7]
   15eb0:	mov	r7, #0
   15eb4:	adds	r4, r0, r4
   15eb8:	beq	15f10 <flatcc_builder_create_cached_vtable@@Base+0x240>
   15ebc:	ldr	r0, [sl, #124]	; 0x7c
   15ec0:	ldr	r1, [sl, #152]	; 0x98
   15ec4:	add	r2, r0, #16
   15ec8:	str	r2, [sl, #124]	; 0x7c
   15ecc:	ldr	r2, [sp, #12]
   15ed0:	str	r1, [r4, #4]
   15ed4:	ldr	r1, [r2]
   15ed8:	str	r1, [r4, #12]
   15edc:	ldr	r1, [sp, #16]
   15ee0:	str	r0, [r2]
   15ee4:	mov	r0, sl
   15ee8:	mov	r2, r5
   15eec:	bl	15b80 <flatcc_builder_create_vtable@@Base>
   15ef0:	cmp	r0, #0
   15ef4:	str	r0, [r4]
   15ef8:	beq	15f10 <flatcc_builder_create_cached_vtable@@Base+0x240>
   15efc:	cmp	r9, #0
   15f00:	beq	15f1c <flatcc_builder_create_cached_vtable@@Base+0x24c>
   15f04:	ldr	r0, [r9, #8]
   15f08:	str	r0, [r4, #8]
   15f0c:	ldr	r7, [r4]
   15f10:	mov	r0, r7
   15f14:	sub	sp, fp, #28
   15f18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15f1c:	ldr	r6, [sl, #120]	; 0x78
   15f20:	ldr	r0, [sl, #172]	; 0xac
   15f24:	add	r2, r6, r5
   15f28:	cmp	r0, #0
   15f2c:	beq	15f68 <flatcc_builder_create_cached_vtable@@Base+0x298>
   15f30:	cmp	r0, r2
   15f34:	bcs	15f68 <flatcc_builder_create_cached_vtable@@Base+0x298>
   15f38:	ldr	r0, [sl, #116]	; 0x74
   15f3c:	cmp	r0, #0
   15f40:	beq	15f0c <flatcc_builder_create_cached_vtable@@Base+0x23c>
   15f44:	ldr	r0, [sl, #92]	; 0x5c
   15f48:	ldr	r2, [sl, #96]	; 0x60
   15f4c:	mov	r1, #0
   15f50:	mov	r5, #0
   15f54:	bl	12778 <memset@plt>
   15f58:	mov	r0, #16
   15f5c:	str	r5, [sl, #120]	; 0x78
   15f60:	str	r0, [sl, #124]	; 0x7c
   15f64:	b	15f0c <flatcc_builder_create_cached_vtable@@Base+0x23c>
   15f68:	ldr	r0, [sl, #72]	; 0x48
   15f6c:	add	r7, sl, #68	; 0x44
   15f70:	cmp	r2, r0
   15f74:	bls	15f9c <flatcc_builder_create_cached_vtable@@Base+0x2cc>
   15f78:	ldr	r0, [sl, #40]	; 0x28
   15f7c:	ldr	ip, [sl, #48]	; 0x30
   15f80:	mov	r1, #2
   15f84:	mov	r3, #0
   15f88:	str	r1, [sp]
   15f8c:	mov	r1, r7
   15f90:	blx	ip
   15f94:	cmp	r0, #0
   15f98:	bne	1600c <flatcc_builder_create_cached_vtable@@Base+0x33c>
   15f9c:	ldr	r0, [r7]
   15fa0:	adds	r0, r0, r6
   15fa4:	beq	15fc8 <flatcc_builder_create_cached_vtable@@Base+0x2f8>
   15fa8:	ldr	r1, [sl, #120]	; 0x78
   15fac:	mov	r2, r5
   15fb0:	str	r1, [r4, #8]
   15fb4:	add	r1, r1, r5
   15fb8:	str	r1, [sl, #120]	; 0x78
   15fbc:	ldr	r1, [sp, #16]
   15fc0:	bl	12718 <memcpy@plt>
   15fc4:	b	15f0c <flatcc_builder_create_cached_vtable@@Base+0x23c>
   15fc8:	mvn	r7, #0
   15fcc:	mov	r0, r7
   15fd0:	sub	sp, fp, #28
   15fd4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15fd8:	ldr	r0, [sp, #12]
   15fdc:	cmp	r6, r0
   15fe0:	beq	15ffc <flatcc_builder_create_cached_vtable@@Base+0x32c>
   15fe4:	mov	r1, r0
   15fe8:	ldr	r0, [r9, #12]
   15fec:	str	r0, [r6]
   15ff0:	ldr	r0, [r1]
   15ff4:	str	r0, [r9, #12]
   15ff8:	str	r7, [r1]
   15ffc:	ldr	r7, [r9]
   16000:	mov	r0, r7
   16004:	sub	sp, fp, #28
   16008:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1600c:	movw	r0, #46504	; 0xb5a8
   16010:	movw	r1, #41986	; 0xa402
   16014:	movw	r3, #46050	; 0xb3e2
   16018:	mov	r2, #308	; 0x134
   1601c:	movt	r0, #1
   16020:	movt	r1, #1
   16024:	movt	r3, #1
   16028:	bl	127a8 <__assert_fail@plt>
   1602c:	movw	r0, #46444	; 0xb56c
   16030:	movw	r1, #41986	; 0xa402
   16034:	movw	r3, #46459	; 0xb57b
   16038:	movw	r2, #342	; 0x156
   1603c:	movt	r0, #1
   16040:	movt	r1, #1
   16044:	movt	r3, #1
   16048:	bl	127a8 <__assert_fail@plt>

0001604c <flatcc_builder_create_table@@Base>:
   1604c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16050:	add	fp, sp, #24
   16054:	sub	sp, sp, #80	; 0x50
   16058:	ldr	r5, [fp, #12]
   1605c:	cmn	r5, #1
   16060:	ble	161ac <flatcc_builder_create_table@@Base+0x160>
   16064:	ldr	ip, [fp, #16]
   16068:	tst	ip, #1
   1606c:	beq	161cc <flatcc_builder_create_table@@Base+0x180>
   16070:	mov	r8, r0
   16074:	ldrh	r0, [r0, #128]	; 0x80
   16078:	cmp	r3, #4
   1607c:	movls	r3, #4
   16080:	cmp	r0, r3
   16084:	strhcc	r3, [r8, #128]	; 0x80
   16088:	cmp	r5, #1
   1608c:	ldr	r0, [r8, #136]	; 0x88
   16090:	sub	r4, r0, r2
   16094:	sub	r0, r3, #1
   16098:	and	r0, r4, r0
   1609c:	sub	r4, r4, #4
   160a0:	add	r3, ip, r0
   160a4:	sub	r3, r4, r3
   160a8:	add	r3, r3, #1
   160ac:	str	r3, [fp, #-28]	; 0xffffffe4
   160b0:	blt	160e0 <flatcc_builder_create_table@@Base+0x94>
   160b4:	ldr	r3, [fp, #8]
   160b8:	sub	ip, r4, r0
   160bc:	mvn	r4, #3
   160c0:	sub	r4, r4, ip
   160c4:	ldrh	r6, [r3], #2
   160c8:	subs	r5, r5, #1
   160cc:	ldr	r7, [r6, r1]
   160d0:	add	r7, r4, r7
   160d4:	sub	r7, r7, r6
   160d8:	str	r7, [r6, r1]
   160dc:	bne	160c4 <flatcc_builder_create_table@@Base+0x78>
   160e0:	mov	r4, #4
   160e4:	sub	r3, fp, #28
   160e8:	cmp	r2, #0
   160ec:	str	r4, [sp, #16]
   160f0:	str	r3, [sp, #12]
   160f4:	mov	r3, #1
   160f8:	str	r4, [sp, #4]
   160fc:	addne	r4, r2, #4
   16100:	str	r3, [sp, #8]
   16104:	movne	r3, #2
   16108:	strne	r2, [sp, #24]
   1610c:	strne	r1, [sp, #20]
   16110:	strne	r3, [sp, #8]
   16114:	strne	r4, [sp, #4]
   16118:	cmp	r0, #0
   1611c:	beq	16148 <flatcc_builder_create_table@@Base+0xfc>
   16120:	add	r1, sp, #4
   16124:	movw	r2, #41456	; 0xa1f0
   16128:	add	r4, r4, r0
   1612c:	add	r1, r1, r3, lsl #3
   16130:	movt	r2, #1
   16134:	add	r3, r3, #1
   16138:	str	r4, [sp, #4]
   1613c:	str	r2, [r1, #8]
   16140:	str	r0, [r1, #12]
   16144:	str	r3, [sp, #8]
   16148:	cmp	r4, #0
   1614c:	ble	161ec <flatcc_builder_create_table@@Base+0x1a0>
   16150:	ldr	r0, [r8, #136]	; 0x88
   16154:	ldr	r7, [r8, #44]	; 0x2c
   16158:	add	r1, sp, #4
   1615c:	mov	r2, r3
   16160:	add	r1, r1, #8
   16164:	sub	r5, r0, r4
   16168:	ldr	r0, [r8, #36]	; 0x24
   1616c:	str	r4, [sp]
   16170:	mov	r3, r5
   16174:	blx	r7
   16178:	cmp	r0, #0
   1617c:	streq	r5, [r8, #136]	; 0x88
   16180:	moveq	r0, r5
   16184:	subeq	sp, fp, #24
   16188:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   1618c:	movw	r0, #46504	; 0xb5a8
   16190:	movw	r1, #41986	; 0xa402
   16194:	movw	r3, #46183	; 0xb467
   16198:	movw	r2, #651	; 0x28b
   1619c:	movt	r0, #1
   161a0:	movt	r1, #1
   161a4:	movt	r3, #1
   161a8:	bl	127a8 <__assert_fail@plt>
   161ac:	movw	r0, #43870	; 0xab5e
   161b0:	movw	r1, #41986	; 0xa402
   161b4:	movw	r3, #43888	; 0xab70
   161b8:	movw	r2, #1237	; 0x4d5
   161bc:	movt	r0, #1
   161c0:	movt	r1, #1
   161c4:	movt	r3, #1
   161c8:	bl	127a8 <__assert_fail@plt>
   161cc:	movw	r0, #44044	; 0xac0c
   161d0:	movw	r1, #41986	; 0xa402
   161d4:	movw	r3, #43888	; 0xab70
   161d8:	movw	r2, #1243	; 0x4db
   161dc:	movt	r0, #1
   161e0:	movt	r1, #1
   161e4:	movt	r3, #1
   161e8:	bl	127a8 <__assert_fail@plt>
   161ec:	movw	r0, #46504	; 0xb5a8
   161f0:	movw	r1, #41986	; 0xa402
   161f4:	movw	r3, #46183	; 0xb467
   161f8:	movw	r2, #647	; 0x287
   161fc:	movt	r0, #1
   16200:	movt	r1, #1
   16204:	movt	r3, #1
   16208:	bl	127a8 <__assert_fail@plt>

0001620c <flatcc_builder_check_required_field@@Base>:
   1620c:	push	{fp, lr}
   16210:	mov	fp, sp
   16214:	ldr	r2, [r0, #32]
   16218:	ldrh	r2, [r2, #14]
   1621c:	cmp	r2, #3
   16220:	bne	16250 <flatcc_builder_check_required_field@@Base+0x44>
   16224:	ldrh	r3, [r0, #8]
   16228:	mov	r2, #0
   1622c:	cmp	r3, r1
   16230:	bls	16248 <flatcc_builder_check_required_field@@Base+0x3c>
   16234:	ldr	r0, [r0, #4]
   16238:	add	r0, r0, r1, lsl #1
   1623c:	ldrh	r2, [r0]
   16240:	cmp	r2, #0
   16244:	movwne	r2, #1
   16248:	mov	r0, r2
   1624c:	pop	{fp, pc}
   16250:	movw	r0, #44055	; 0xac17
   16254:	movw	r1, #41986	; 0xa402
   16258:	movw	r3, #44098	; 0xac42
   1625c:	movw	r2, #1272	; 0x4f8
   16260:	movt	r0, #1
   16264:	movt	r1, #1
   16268:	movt	r3, #1
   1626c:	bl	127a8 <__assert_fail@plt>

00016270 <flatcc_builder_check_union_field@@Base>:
   16270:	push	{fp, lr}
   16274:	mov	fp, sp
   16278:	mov	r2, r0
   1627c:	ldr	r0, [r0, #32]
   16280:	ldrh	r0, [r0, #14]
   16284:	cmp	r0, #3
   16288:	bne	162e8 <flatcc_builder_check_union_field@@Base+0x78>
   1628c:	mov	r0, #0
   16290:	cmp	r1, #0
   16294:	beq	162d4 <flatcc_builder_check_union_field@@Base+0x64>
   16298:	ldrh	r3, [r2, #8]
   1629c:	cmp	r3, r1
   162a0:	popls	{fp, pc}
   162a4:	ldr	r0, [r2, #4]
   162a8:	add	r0, r0, r1, lsl #1
   162ac:	ldrh	r1, [r0, #-2]
   162b0:	cmp	r1, #0
   162b4:	beq	162d8 <flatcc_builder_check_union_field@@Base+0x68>
   162b8:	ldr	r2, [r2, #16]
   162bc:	ldrh	r0, [r0]
   162c0:	ldrb	r1, [r2, r1]
   162c4:	cmp	r1, #0
   162c8:	beq	162dc <flatcc_builder_check_union_field@@Base+0x6c>
   162cc:	cmp	r0, #0
   162d0:	movwne	r0, #1
   162d4:	pop	{fp, pc}
   162d8:	ldrh	r0, [r0]
   162dc:	clz	r0, r0
   162e0:	lsr	r0, r0, #5
   162e4:	pop	{fp, pc}
   162e8:	movw	r0, #44055	; 0xac17
   162ec:	movw	r1, #41986	; 0xa402
   162f0:	movw	r3, #44181	; 0xac95
   162f4:	movw	r2, #1279	; 0x4ff
   162f8:	movt	r0, #1
   162fc:	movt	r1, #1
   16300:	movt	r3, #1
   16304:	bl	127a8 <__assert_fail@plt>

00016308 <flatcc_builder_check_required@@Base>:
   16308:	push	{fp, lr}
   1630c:	mov	fp, sp
   16310:	mov	r3, r0
   16314:	ldr	r0, [r0, #32]
   16318:	ldrh	r0, [r0, #14]
   1631c:	cmp	r0, #3
   16320:	bne	16368 <flatcc_builder_check_required@@Base+0x60>
   16324:	ldrh	ip, [r3, #8]
   16328:	mov	r0, #0
   1632c:	cmp	ip, r2
   16330:	poplt	{fp, pc}
   16334:	cmp	r2, #1
   16338:	blt	16360 <flatcc_builder_check_required@@Base+0x58>
   1633c:	ldr	ip, [r3, #4]
   16340:	ldrh	r3, [r1]
   16344:	add	r3, ip, r3, lsl #1
   16348:	ldrh	r3, [r3]
   1634c:	cmp	r3, #0
   16350:	beq	16364 <flatcc_builder_check_required@@Base+0x5c>
   16354:	add	r1, r1, #2
   16358:	subs	r2, r2, #1
   1635c:	bne	16340 <flatcc_builder_check_required@@Base+0x38>
   16360:	mov	r0, #1
   16364:	pop	{fp, pc}
   16368:	movw	r0, #44055	; 0xac17
   1636c:	movw	r1, #41986	; 0xa402
   16370:	movw	r3, #44261	; 0xace5
   16374:	movw	r2, #1297	; 0x511
   16378:	movt	r0, #1
   1637c:	movt	r1, #1
   16380:	movt	r3, #1
   16384:	bl	127a8 <__assert_fail@plt>

00016388 <flatcc_builder_end_table@@Base>:
   16388:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1638c:	add	fp, sp, #24
   16390:	sub	sp, sp, #16
   16394:	mov	r4, r0
   16398:	ldr	r0, [r0, #32]
   1639c:	ldrh	r0, [r0, #14]
   163a0:	cmp	r0, #3
   163a4:	bne	16528 <flatcc_builder_end_table@@Base+0x1a0>
   163a8:	ldrh	r0, [r4, #8]
   163ac:	ldr	r5, [r4, #4]
   163b0:	mov	r1, #4
   163b4:	movw	r2, #31153	; 0x79b1
   163b8:	movt	r2, #40503	; 0x9e37
   163bc:	add	r0, r1, r0, lsl #1
   163c0:	strh	r0, [r5, #-4]!
   163c4:	ldrh	r1, [r4, #20]
   163c8:	uxth	r6, r0
   163cc:	add	r1, r1, #4
   163d0:	strh	r1, [r5, #2]
   163d4:	uxth	r1, r1
   163d8:	ldr	r0, [r4, #12]
   163dc:	eor	r0, r0, r6
   163e0:	mul	r0, r0, r2
   163e4:	eor	r0, r0, r1
   163e8:	mov	r1, r5
   163ec:	mul	r3, r0, r2
   163f0:	mov	r0, r4
   163f4:	mov	r2, r6
   163f8:	str	r3, [r4, #12]
   163fc:	bl	15cd0 <flatcc_builder_create_cached_vtable@@Base>
   16400:	cmp	r0, #0
   16404:	beq	16518 <flatcc_builder_end_table@@Base+0x190>
   16408:	mov	r7, r0
   1640c:	mov	r0, r5
   16410:	mov	r1, #0
   16414:	mov	r2, r6
   16418:	mov	r8, #0
   1641c:	bl	12778 <memset@plt>
   16420:	ldr	r5, [r4, #32]
   16424:	ldr	r0, [r4, #76]	; 0x4c
   16428:	ldr	r6, [r4]
   1642c:	ldrh	r3, [r4, #130]	; 0x82
   16430:	ldr	r1, [r4, #16]
   16434:	ldr	r2, [r4, #20]
   16438:	ldr	r5, [r5, #20]
   1643c:	add	r0, r0, r5
   16440:	sub	r6, r6, r0
   16444:	asr	r6, r6, #1
   16448:	stm	sp, {r0, r6, r7}
   1644c:	mov	r0, r4
   16450:	bl	1604c <flatcc_builder_create_table@@Base>
   16454:	cmp	r0, #0
   16458:	beq	1650c <flatcc_builder_end_table@@Base+0x184>
   1645c:	ldr	r1, [r4, #32]
   16460:	mov	r5, r0
   16464:	ldr	r0, [r4, #16]
   16468:	ldr	r2, [r4, #20]
   1646c:	ldr	r3, [r4, #52]	; 0x34
   16470:	ldr	r7, [r1, #24]
   16474:	str	r7, [r4, #12]
   16478:	ldrh	r7, [r1, #28]
   1647c:	strh	r7, [r4, #8]
   16480:	ldr	r7, [r1, #16]
   16484:	add	r3, r3, r7
   16488:	str	r3, [r4, #4]
   1648c:	ldr	r3, [r4, #76]	; 0x4c
   16490:	ldr	r1, [r1, #20]
   16494:	add	r1, r3, r1
   16498:	str	r1, [r4]
   1649c:	mov	r1, #0
   164a0:	bl	12778 <memset@plt>
   164a4:	ldr	r0, [r4, #32]
   164a8:	ldr	r1, [r4, #60]	; 0x3c
   164ac:	ldr	r2, [r4, #64]	; 0x40
   164b0:	mov	r8, r5
   164b4:	ldr	r3, [r0, #8]
   164b8:	str	r3, [r4, #20]
   164bc:	ldr	r3, [r0]
   164c0:	str	r3, [r4, #28]
   164c4:	add	r1, r1, r3
   164c8:	ldr	r7, [r0, #4]
   164cc:	str	r1, [r4, #16]
   164d0:	sub	r1, r2, r3
   164d4:	cmp	r1, r7
   164d8:	movhi	r1, r7
   164dc:	str	r1, [r4, #24]
   164e0:	ldrh	r1, [r4, #130]	; 0x82
   164e4:	ldrh	r2, [r4, #128]	; 0x80
   164e8:	cmp	r2, r1
   164ec:	strhcc	r1, [r4, #128]	; 0x80
   164f0:	ldrh	r1, [r0, #12]
   164f4:	sub	r0, r0, #36	; 0x24
   164f8:	str	r0, [r4, #32]
   164fc:	strh	r1, [r4, #130]	; 0x82
   16500:	ldr	r0, [r4, #156]	; 0x9c
   16504:	sub	r0, r0, #1
   16508:	str	r0, [r4, #156]	; 0x9c
   1650c:	mov	r0, r8
   16510:	sub	sp, fp, #24
   16514:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16518:	mov	r8, #0
   1651c:	mov	r0, r8
   16520:	sub	sp, fp, #24
   16524:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16528:	movw	r0, #44055	; 0xac17
   1652c:	movw	r1, #41986	; 0xa402
   16530:	movw	r3, #44351	; 0xad3f
   16534:	movw	r2, #1317	; 0x525
   16538:	movt	r0, #1
   1653c:	movt	r1, #1
   16540:	movt	r3, #1
   16544:	bl	127a8 <__assert_fail@plt>

00016548 <flatcc_builder_create_vector@@Base>:
   16548:	push	{r4, r5, r6, r7, fp, lr}
   1654c:	add	fp, sp, #16
   16550:	sub	sp, sp, #80	; 0x50
   16554:	mov	r7, r0
   16558:	ldr	r0, [fp, #12]
   1655c:	cmp	r2, r0
   16560:	bhi	1665c <flatcc_builder_create_vector@@Base+0x114>
   16564:	ldr	r0, [fp, #8]
   16568:	mov	r4, r2
   1656c:	ldrh	r2, [r7, #128]	; 0x80
   16570:	mov	r5, #4
   16574:	cmp	r0, #4
   16578:	movls	r0, r5
   1657c:	cmp	r2, r0
   16580:	sub	r2, fp, #20
   16584:	strhcc	r0, [r7, #128]	; 0x80
   16588:	str	r4, [fp, #-20]	; 0xffffffec
   1658c:	sub	r0, r0, #1
   16590:	ldr	ip, [r7, #136]	; 0x88
   16594:	str	r5, [sp, #16]
   16598:	str	r2, [sp, #12]
   1659c:	mov	r2, #1
   165a0:	str	r5, [sp, #4]
   165a4:	str	r2, [sp, #8]
   165a8:	mls	r6, r3, r4, ip
   165ac:	mul	r3, r3, r4
   165b0:	cmp	r3, #0
   165b4:	and	r0, r6, r0
   165b8:	movne	r2, #2
   165bc:	addne	r5, r3, #4
   165c0:	strne	r3, [sp, #24]
   165c4:	strne	r1, [sp, #20]
   165c8:	strne	r2, [sp, #8]
   165cc:	strne	r5, [sp, #4]
   165d0:	cmp	r0, #0
   165d4:	beq	16600 <flatcc_builder_create_vector@@Base+0xb8>
   165d8:	add	r1, sp, #4
   165dc:	movw	r3, #41456	; 0xa1f0
   165e0:	add	r5, r5, r0
   165e4:	add	r1, r1, r2, lsl #3
   165e8:	movt	r3, #1
   165ec:	add	r2, r2, #1
   165f0:	str	r5, [sp, #4]
   165f4:	str	r3, [r1, #8]
   165f8:	str	r0, [r1, #12]
   165fc:	str	r2, [sp, #8]
   16600:	cmp	r5, #0
   16604:	ble	1667c <flatcc_builder_create_vector@@Base+0x134>
   16608:	ldr	r0, [r7, #36]	; 0x24
   1660c:	ldr	r6, [r7, #44]	; 0x2c
   16610:	add	r1, sp, #4
   16614:	sub	r4, ip, r5
   16618:	str	r5, [sp]
   1661c:	add	r1, r1, #8
   16620:	mov	r3, r4
   16624:	blx	r6
   16628:	cmp	r0, #0
   1662c:	streq	r4, [r7, #136]	; 0x88
   16630:	moveq	r0, r4
   16634:	subeq	sp, fp, #16
   16638:	popeq	{r4, r5, r6, r7, fp, pc}
   1663c:	movw	r0, #46504	; 0xb5a8
   16640:	movw	r1, #41986	; 0xa402
   16644:	movw	r3, #46183	; 0xb467
   16648:	movw	r2, #651	; 0x28b
   1664c:	movt	r0, #1
   16650:	movt	r1, #1
   16654:	movt	r3, #1
   16658:	bl	127a8 <__assert_fail@plt>
   1665c:	movw	r0, #44417	; 0xad81
   16660:	movw	r1, #41986	; 0xa402
   16664:	movw	r3, #44436	; 0xad94
   16668:	movw	r2, #1365	; 0x555
   1666c:	movt	r0, #1
   16670:	movt	r1, #1
   16674:	movt	r3, #1
   16678:	bl	127a8 <__assert_fail@plt>
   1667c:	movw	r0, #46504	; 0xb5a8
   16680:	movw	r1, #41986	; 0xa402
   16684:	movw	r3, #46183	; 0xb467
   16688:	movw	r2, #647	; 0x287
   1668c:	movt	r0, #1
   16690:	movt	r1, #1
   16694:	movt	r3, #1
   16698:	bl	127a8 <__assert_fail@plt>

0001669c <flatcc_builder_end_vector@@Base>:
   1669c:	push	{r4, r5, fp, lr}
   166a0:	add	fp, sp, #8
   166a4:	sub	sp, sp, #8
   166a8:	mov	r4, r0
   166ac:	ldr	r0, [r0, #32]
   166b0:	ldrh	r1, [r0, #14]
   166b4:	cmp	r1, #4
   166b8:	bne	1676c <flatcc_builder_end_vector@@Base+0xd0>
   166bc:	ldr	r3, [r0, #16]
   166c0:	ldr	r2, [r0, #20]
   166c4:	ldr	r0, [r0, #24]
   166c8:	ldr	r1, [r4, #16]
   166cc:	ldrh	r5, [r4, #130]	; 0x82
   166d0:	str	r0, [sp, #4]
   166d4:	mov	r0, r4
   166d8:	str	r5, [sp]
   166dc:	bl	16548 <flatcc_builder_create_vector@@Base>
   166e0:	mov	r5, r0
   166e4:	cmp	r0, #0
   166e8:	beq	16760 <flatcc_builder_end_vector@@Base+0xc4>
   166ec:	ldr	r0, [r4, #16]
   166f0:	ldr	r2, [r4, #20]
   166f4:	mov	r1, #0
   166f8:	bl	12778 <memset@plt>
   166fc:	ldr	r0, [r4, #32]
   16700:	ldr	r1, [r4, #60]	; 0x3c
   16704:	ldr	ip, [r4, #64]	; 0x40
   16708:	ldr	r3, [r0, #8]
   1670c:	str	r3, [r4, #20]
   16710:	ldr	r3, [r0]
   16714:	str	r3, [r4, #28]
   16718:	add	r1, r1, r3
   1671c:	ldr	r2, [r0, #4]
   16720:	str	r1, [r4, #16]
   16724:	sub	r1, ip, r3
   16728:	cmp	r1, r2
   1672c:	movhi	r1, r2
   16730:	str	r1, [r4, #24]
   16734:	ldrh	r1, [r4, #130]	; 0x82
   16738:	ldrh	r2, [r4, #128]	; 0x80
   1673c:	cmp	r2, r1
   16740:	strhcc	r1, [r4, #128]	; 0x80
   16744:	ldrh	r1, [r0, #12]
   16748:	sub	r0, r0, #36	; 0x24
   1674c:	str	r0, [r4, #32]
   16750:	strh	r1, [r4, #130]	; 0x82
   16754:	ldr	r0, [r4, #156]	; 0x9c
   16758:	sub	r0, r0, #1
   1675c:	str	r0, [r4, #156]	; 0x9c
   16760:	mov	r0, r5
   16764:	sub	sp, fp, #8
   16768:	pop	{r4, r5, fp, pc}
   1676c:	movw	r0, #42789	; 0xa725
   16770:	movw	r1, #41986	; 0xa402
   16774:	movw	r3, #44554	; 0xae0a
   16778:	movw	r2, #1400	; 0x578
   1677c:	movt	r0, #1
   16780:	movt	r1, #1
   16784:	movt	r3, #1
   16788:	bl	127a8 <__assert_fail@plt>

0001678c <flatcc_builder_vector_count@@Base>:
   1678c:	ldr	r0, [r0, #32]
   16790:	ldr	r0, [r0, #20]
   16794:	bx	lr

00016798 <flatcc_builder_vector_edit@@Base>:
   16798:	ldr	r0, [r0, #16]
   1679c:	bx	lr

000167a0 <flatcc_builder_create_offset_vector_direct@@Base>:
   167a0:	mov	r3, #0
   167a4:	b	167a8 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   167a8:	push	{r4, r5, r6, r7, fp, lr}
   167ac:	add	fp, sp, #16
   167b0:	sub	sp, sp, #80	; 0x50
   167b4:	mov	r5, #0
   167b8:	cmn	r2, #-1073741823	; 0xc0000001
   167bc:	bhi	1692c <flatcc_builder_create_offset_vector_direct@@Base+0x18c>
   167c0:	mov	r6, r0
   167c4:	ldrh	r0, [r0, #128]	; 0x80
   167c8:	mov	r4, #4
   167cc:	sub	r5, fp, #20
   167d0:	mov	ip, #1
   167d4:	cmp	r0, #3
   167d8:	movls	r0, #4
   167dc:	strhls	r0, [r6, #128]	; 0x80
   167e0:	str	r2, [fp, #-20]	; 0xffffffec
   167e4:	mov	r0, #0
   167e8:	ldr	lr, [r6, #136]	; 0x88
   167ec:	cmp	r0, r2, lsl #2
   167f0:	str	r4, [sp, #16]
   167f4:	str	r5, [sp, #12]
   167f8:	str	r4, [sp, #4]
   167fc:	str	ip, [sp, #8]
   16800:	and	r5, lr, #3
   16804:	beq	16824 <flatcc_builder_create_offset_vector_direct@@Base+0x84>
   16808:	lsl	r0, r2, #2
   1680c:	mov	ip, #2
   16810:	add	r4, r0, #4
   16814:	str	r0, [sp, #24]
   16818:	str	r1, [sp, #20]
   1681c:	str	ip, [sp, #8]
   16820:	str	r4, [sp, #4]
   16824:	cmp	r5, #0
   16828:	beq	16854 <flatcc_builder_create_offset_vector_direct@@Base+0xb4>
   1682c:	add	r0, sp, #4
   16830:	movw	r7, #41456	; 0xa1f0
   16834:	add	r4, r4, r5
   16838:	add	r0, r0, ip, lsl #3
   1683c:	movt	r7, #1
   16840:	add	ip, ip, #1
   16844:	str	r4, [sp, #4]
   16848:	str	r7, [r0, #8]
   1684c:	str	r5, [r0, #12]
   16850:	str	ip, [sp, #8]
   16854:	cmp	r2, #0
   16858:	beq	168f0 <flatcc_builder_create_offset_vector_direct@@Base+0x150>
   1685c:	sub	r0, r4, lr
   16860:	cmp	r3, #0
   16864:	sub	r0, r0, #4
   16868:	bne	168b0 <flatcc_builder_create_offset_vector_direct@@Base+0x110>
   1686c:	ldr	r3, [r1]
   16870:	cmp	r3, #0
   16874:	beq	16938 <flatcc_builder_create_offset_vector_direct@@Base+0x198>
   16878:	add	r3, r0, r3
   1687c:	sub	r0, r0, #4
   16880:	subs	r2, r2, #1
   16884:	str	r3, [r1], #4
   16888:	bne	1686c <flatcc_builder_create_offset_vector_direct@@Base+0xcc>
   1688c:	b	168f0 <flatcc_builder_create_offset_vector_direct@@Base+0x150>
   16890:	ldrb	r7, [r3]
   16894:	cmp	r7, #0
   16898:	bne	16958 <flatcc_builder_create_offset_vector_direct@@Base+0x1b8>
   1689c:	sub	r0, r0, #4
   168a0:	add	r1, r1, #4
   168a4:	add	r3, r3, #1
   168a8:	subs	r2, r2, #1
   168ac:	beq	168f0 <flatcc_builder_create_offset_vector_direct@@Base+0x150>
   168b0:	ldr	r5, [r1]
   168b4:	cmp	r5, #0
   168b8:	beq	16890 <flatcc_builder_create_offset_vector_direct@@Base+0xf0>
   168bc:	add	r7, r0, r5
   168c0:	str	r7, [r1]
   168c4:	ldrb	r7, [r3]
   168c8:	cmp	r7, #0
   168cc:	bne	1689c <flatcc_builder_create_offset_vector_direct@@Base+0xfc>
   168d0:	movw	r0, #46492	; 0xb59c
   168d4:	movw	r1, #41986	; 0xa402
   168d8:	movw	r3, #46506	; 0xb5aa
   168dc:	movw	r2, #1457	; 0x5b1
   168e0:	movt	r0, #1
   168e4:	movt	r1, #1
   168e8:	movt	r3, #1
   168ec:	bl	127a8 <__assert_fail@plt>
   168f0:	cmp	r4, #0
   168f4:	ble	16978 <flatcc_builder_create_offset_vector_direct@@Base+0x1d8>
   168f8:	ldr	r0, [r6, #136]	; 0x88
   168fc:	ldr	r7, [r6, #44]	; 0x2c
   16900:	add	r1, sp, #4
   16904:	mov	r2, ip
   16908:	add	r1, r1, #8
   1690c:	sub	r5, r0, r4
   16910:	ldr	r0, [r6, #36]	; 0x24
   16914:	str	r4, [sp]
   16918:	mov	r3, r5
   1691c:	blx	r7
   16920:	cmp	r0, #0
   16924:	bne	16998 <flatcc_builder_create_offset_vector_direct@@Base+0x1f8>
   16928:	str	r5, [r6, #136]	; 0x88
   1692c:	mov	r0, r5
   16930:	sub	sp, fp, #16
   16934:	pop	{r4, r5, r6, r7, fp, pc}
   16938:	movw	r0, #46504	; 0xb5a8
   1693c:	movw	r1, #41986	; 0xa402
   16940:	movw	r3, #46506	; 0xb5aa
   16944:	movw	r2, #1463	; 0x5b7
   16948:	movt	r0, #1
   1694c:	movt	r1, #1
   16950:	movt	r3, #1
   16954:	bl	127a8 <__assert_fail@plt>
   16958:	movw	r0, #46637	; 0xb62d
   1695c:	movw	r1, #41986	; 0xa402
   16960:	movw	r3, #46506	; 0xb5aa
   16964:	movw	r2, #1461	; 0x5b5
   16968:	movt	r0, #1
   1696c:	movt	r1, #1
   16970:	movt	r3, #1
   16974:	bl	127a8 <__assert_fail@plt>
   16978:	movw	r0, #46504	; 0xb5a8
   1697c:	movw	r1, #41986	; 0xa402
   16980:	movw	r3, #46183	; 0xb467
   16984:	movw	r2, #647	; 0x287
   16988:	movt	r0, #1
   1698c:	movt	r1, #1
   16990:	movt	r3, #1
   16994:	bl	127a8 <__assert_fail@plt>
   16998:	movw	r0, #46504	; 0xb5a8
   1699c:	movw	r1, #41986	; 0xa402
   169a0:	movw	r3, #46183	; 0xb467
   169a4:	movw	r2, #651	; 0x28b
   169a8:	movt	r0, #1
   169ac:	movt	r1, #1
   169b0:	movt	r3, #1
   169b4:	bl	127a8 <__assert_fail@plt>

000169b8 <flatcc_builder_end_offset_vector_for_unions@@Base>:
   169b8:	push	{r4, r5, fp, lr}
   169bc:	add	fp, sp, #8
   169c0:	mov	r4, r0
   169c4:	ldr	r0, [r0, #32]
   169c8:	mov	r3, r1
   169cc:	ldrh	r1, [r0, #14]
   169d0:	cmp	r1, #5
   169d4:	bne	16a70 <flatcc_builder_end_offset_vector_for_unions@@Base+0xb8>
   169d8:	ldr	r2, [r0, #20]
   169dc:	ldr	r1, [r4, #16]
   169e0:	mov	r0, r4
   169e4:	bl	167a8 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   169e8:	mov	r5, r0
   169ec:	cmp	r0, #0
   169f0:	beq	16a68 <flatcc_builder_end_offset_vector_for_unions@@Base+0xb0>
   169f4:	ldr	r0, [r4, #16]
   169f8:	ldr	r2, [r4, #20]
   169fc:	mov	r1, #0
   16a00:	bl	12778 <memset@plt>
   16a04:	ldr	r0, [r4, #32]
   16a08:	ldr	r1, [r4, #60]	; 0x3c
   16a0c:	ldr	ip, [r4, #64]	; 0x40
   16a10:	ldr	r3, [r0, #8]
   16a14:	str	r3, [r4, #20]
   16a18:	ldr	r3, [r0]
   16a1c:	str	r3, [r4, #28]
   16a20:	add	r1, r1, r3
   16a24:	ldr	r2, [r0, #4]
   16a28:	str	r1, [r4, #16]
   16a2c:	sub	r1, ip, r3
   16a30:	cmp	r1, r2
   16a34:	movhi	r1, r2
   16a38:	str	r1, [r4, #24]
   16a3c:	ldrh	r1, [r4, #130]	; 0x82
   16a40:	ldrh	r2, [r4, #128]	; 0x80
   16a44:	cmp	r2, r1
   16a48:	strhcc	r1, [r4, #128]	; 0x80
   16a4c:	ldrh	r1, [r0, #12]
   16a50:	sub	r0, r0, #36	; 0x24
   16a54:	str	r0, [r4, #32]
   16a58:	strh	r1, [r4, #130]	; 0x82
   16a5c:	ldr	r0, [r4, #156]	; 0x9c
   16a60:	sub	r0, r0, #1
   16a64:	str	r0, [r4, #156]	; 0x9c
   16a68:	mov	r0, r5
   16a6c:	pop	{r4, r5, fp, pc}
   16a70:	movw	r0, #43038	; 0xa81e
   16a74:	movw	r1, #41986	; 0xa402
   16a78:	movw	r3, #44695	; 0xae97
   16a7c:	movw	r2, #1493	; 0x5d5
   16a80:	movt	r0, #1
   16a84:	movt	r1, #1
   16a88:	movt	r3, #1
   16a8c:	bl	127a8 <__assert_fail@plt>

00016a90 <flatcc_builder_offset_vector_edit@@Base>:
   16a90:	ldr	r0, [r0, #16]
   16a94:	bx	lr

00016a98 <flatcc_builder_offset_vector_count@@Base>:
   16a98:	ldr	r0, [r0, #32]
   16a9c:	ldr	r0, [r0, #20]
   16aa0:	bx	lr

00016aa4 <flatcc_builder_table_add_union@@Base>:
   16aa4:	push	{r4, r5, r6, r7, fp, lr}
   16aa8:	add	fp, sp, #16
   16aac:	mov	r5, r0
   16ab0:	ldr	r0, [r0, #32]
   16ab4:	ldrh	r0, [r0, #14]
   16ab8:	cmp	r0, #3
   16abc:	bne	16b44 <flatcc_builder_table_add_union@@Base+0xa0>
   16ac0:	mov	r7, r3
   16ac4:	mov	r4, r2
   16ac8:	mov	r6, r1
   16acc:	cmp	r3, #0
   16ad0:	beq	16ae0 <flatcc_builder_table_add_union@@Base+0x3c>
   16ad4:	uxtb	r0, r4
   16ad8:	cmp	r0, #0
   16adc:	beq	16b64 <flatcc_builder_table_add_union@@Base+0xc0>
   16ae0:	cmp	r7, #0
   16ae4:	beq	16b00 <flatcc_builder_table_add_union@@Base+0x5c>
   16ae8:	mov	r0, r5
   16aec:	mov	r1, r6
   16af0:	bl	16ba4 <flatcc_builder_table_add_offset@@Base>
   16af4:	cmp	r0, #0
   16af8:	beq	16b84 <flatcc_builder_table_add_union@@Base+0xe0>
   16afc:	str	r7, [r0]
   16b00:	sub	r1, r6, #1
   16b04:	mov	r0, r5
   16b08:	mov	r2, #1
   16b0c:	mov	r3, #1
   16b10:	bl	16d34 <flatcc_builder_table_add@@Base>
   16b14:	cmp	r0, #0
   16b18:	strbne	r4, [r0]
   16b1c:	movne	r0, #0
   16b20:	popne	{r4, r5, r6, r7, fp, pc}
   16b24:	movw	r0, #44941	; 0xaf8d
   16b28:	movw	r1, #41986	; 0xa402
   16b2c:	movw	r3, #44809	; 0xaf09
   16b30:	movw	r2, #1526	; 0x5f6
   16b34:	movt	r0, #1
   16b38:	movt	r1, #1
   16b3c:	movt	r3, #1
   16b40:	bl	127a8 <__assert_fail@plt>
   16b44:	movw	r0, #44055	; 0xac17
   16b48:	movw	r1, #41986	; 0xa402
   16b4c:	movw	r3, #44809	; 0xaf09
   16b50:	movw	r2, #1518	; 0x5ee
   16b54:	movt	r0, #1
   16b58:	movt	r1, #1
   16b5c:	movt	r3, #1
   16b60:	bl	127a8 <__assert_fail@plt>
   16b64:	movw	r0, #44897	; 0xaf61
   16b68:	movw	r1, #41986	; 0xa402
   16b6c:	movw	r3, #44809	; 0xaf09
   16b70:	movw	r2, #1519	; 0x5ef
   16b74:	movt	r0, #1
   16b78:	movt	r1, #1
   16b7c:	movt	r3, #1
   16b80:	bl	127a8 <__assert_fail@plt>
   16b84:	movw	r0, #44931	; 0xaf83
   16b88:	movw	r1, #41986	; 0xa402
   16b8c:	movw	r3, #44809	; 0xaf09
   16b90:	movw	r2, #1522	; 0x5f2
   16b94:	movt	r0, #1
   16b98:	movt	r1, #1
   16b9c:	movt	r3, #1
   16ba0:	bl	127a8 <__assert_fail@plt>

00016ba4 <flatcc_builder_table_add_offset@@Base>:
   16ba4:	push	{r4, r5, r6, r7, fp, lr}
   16ba8:	add	fp, sp, #16
   16bac:	sub	sp, sp, #8
   16bb0:	mov	r4, r0
   16bb4:	ldr	r0, [r0, #32]
   16bb8:	ldrh	r0, [r0, #14]
   16bbc:	cmp	r0, #3
   16bc0:	bne	16cd4 <flatcc_builder_table_add_offset@@Base+0x130>
   16bc4:	movw	r0, #32765	; 0x7ffd
   16bc8:	mov	r5, r1
   16bcc:	cmp	r1, r0
   16bd0:	bcs	16cf4 <flatcc_builder_table_add_offset@@Base+0x150>
   16bd4:	ldr	r0, [r4, #4]
   16bd8:	add	r1, r0, r5, lsl #1
   16bdc:	ldrh	r1, [r1]
   16be0:	cmp	r1, #0
   16be4:	bne	16d14 <flatcc_builder_table_add_offset@@Base+0x170>
   16be8:	ldr	r2, [r4, #20]
   16bec:	ldr	r1, [r4, #12]
   16bf0:	ldr	r3, [r4, #24]
   16bf4:	add	r2, r2, #3
   16bf8:	eor	r1, r1, r5
   16bfc:	bic	r6, r2, #3
   16c00:	movw	r2, #31153	; 0x79b1
   16c04:	movt	r2, #40503	; 0x9e37
   16c08:	add	r7, r6, #4
   16c0c:	cmp	r7, r3
   16c10:	str	r7, [r4, #20]
   16c14:	mul	r1, r1, r2
   16c18:	eor	r1, r1, #4
   16c1c:	mul	r1, r1, r2
   16c20:	str	r1, [r4, #12]
   16c24:	bls	16c98 <flatcc_builder_table_add_offset@@Base+0xf4>
   16c28:	ldr	r1, [r4, #28]
   16c2c:	ldr	r0, [r4, #40]	; 0x28
   16c30:	ldr	ip, [r4, #48]	; 0x30
   16c34:	mov	r2, #1
   16c38:	mov	r3, #1
   16c3c:	str	r2, [sp]
   16c40:	add	r2, r1, r7
   16c44:	add	r1, r4, #60	; 0x3c
   16c48:	blx	ip
   16c4c:	mov	r1, r0
   16c50:	mov	r0, #0
   16c54:	cmp	r1, #0
   16c58:	beq	16c64 <flatcc_builder_table_add_offset@@Base+0xc0>
   16c5c:	sub	sp, fp, #16
   16c60:	pop	{r4, r5, r6, r7, fp, pc}
   16c64:	ldr	r0, [r4, #28]
   16c68:	ldr	r2, [r4, #60]	; 0x3c
   16c6c:	ldr	r3, [r4, #64]	; 0x40
   16c70:	ldr	r1, [r4, #32]
   16c74:	add	r2, r2, r0
   16c78:	sub	r0, r3, r0
   16c7c:	str	r2, [r4, #16]
   16c80:	movw	r2, #65532	; 0xfffc
   16c84:	cmp	r0, r2
   16c88:	movcs	r0, r2
   16c8c:	str	r0, [r4, #24]
   16c90:	str	r2, [r1, #4]
   16c94:	ldr	r0, [r4, #4]
   16c98:	uxth	r1, r5
   16c9c:	add	r0, r0, r1, lsl #1
   16ca0:	strh	r7, [r0]
   16ca4:	ldrh	r0, [r4, #8]
   16ca8:	cmp	r0, r1
   16cac:	addls	r0, r5, #1
   16cb0:	strhls	r0, [r4, #8]
   16cb4:	ldr	r0, [r4]
   16cb8:	add	r1, r0, #2
   16cbc:	str	r1, [r4]
   16cc0:	strh	r6, [r0]
   16cc4:	ldr	r0, [r4, #16]
   16cc8:	add	r0, r0, r6
   16ccc:	sub	sp, fp, #16
   16cd0:	pop	{r4, r5, r6, r7, fp, pc}
   16cd4:	movw	r0, #44055	; 0xac17
   16cd8:	movw	r1, #41986	; 0xa402
   16cdc:	movw	r3, #45835	; 0xb30b
   16ce0:	movw	r2, #1811	; 0x713
   16ce4:	movt	r0, #1
   16ce8:	movt	r1, #1
   16cec:	movt	r3, #1
   16cf0:	bl	127a8 <__assert_fail@plt>
   16cf4:	movw	r0, #45707	; 0xb28b
   16cf8:	movw	r1, #41986	; 0xa402
   16cfc:	movw	r3, #45835	; 0xb30b
   16d00:	movw	r2, #1812	; 0x714
   16d04:	movt	r0, #1
   16d08:	movt	r1, #1
   16d0c:	movt	r3, #1
   16d10:	bl	127a8 <__assert_fail@plt>
   16d14:	movw	r0, #46504	; 0xb5a8
   16d18:	movw	r1, #41986	; 0xa402
   16d1c:	movw	r3, #45835	; 0xb30b
   16d20:	movw	r2, #1819	; 0x71b
   16d24:	movt	r0, #1
   16d28:	movt	r1, #1
   16d2c:	movt	r3, #1
   16d30:	bl	127a8 <__assert_fail@plt>

00016d34 <flatcc_builder_table_add@@Base>:
   16d34:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16d38:	add	fp, sp, #24
   16d3c:	sub	sp, sp, #8
   16d40:	mov	r4, r0
   16d44:	ldr	r0, [r0, #32]
   16d48:	ldrh	r0, [r0, #14]
   16d4c:	cmp	r0, #3
   16d50:	bne	16e70 <flatcc_builder_table_add@@Base+0x13c>
   16d54:	movw	r0, #32765	; 0x7ffd
   16d58:	mov	r8, r1
   16d5c:	cmp	r1, r0
   16d60:	bcs	16e90 <flatcc_builder_table_add@@Base+0x15c>
   16d64:	ldrh	r0, [r4, #130]	; 0x82
   16d68:	cmp	r0, r3
   16d6c:	strhcc	r3, [r4, #130]	; 0x82
   16d70:	ldr	r0, [r4, #4]
   16d74:	add	r1, r0, r8, lsl #1
   16d78:	ldrh	r1, [r1]
   16d7c:	cmp	r1, #0
   16d80:	bne	16eb0 <flatcc_builder_table_add@@Base+0x17c>
   16d84:	ldr	r1, [r4, #12]
   16d88:	movw	r7, #31153	; 0x79b1
   16d8c:	ldr	r6, [r4, #20]
   16d90:	ldr	r5, [r4, #24]
   16d94:	movt	r7, #40503	; 0x9e37
   16d98:	eor	r1, r1, r8
   16d9c:	mul	r1, r1, r7
   16da0:	eor	r1, r1, r2
   16da4:	mul	r1, r1, r7
   16da8:	str	r1, [r4, #12]
   16dac:	add	r1, r3, r6
   16db0:	rsb	r3, r3, #0
   16db4:	sub	r1, r1, #1
   16db8:	and	r6, r1, r3
   16dbc:	add	r1, r6, r2
   16dc0:	cmp	r1, r5
   16dc4:	str	r1, [r4, #20]
   16dc8:	bcc	16e40 <flatcc_builder_table_add@@Base+0x10c>
   16dcc:	ldr	r2, [r4, #28]
   16dd0:	ldr	r0, [r4, #40]	; 0x28
   16dd4:	ldr	r7, [r4, #48]	; 0x30
   16dd8:	mov	r3, #1
   16ddc:	str	r3, [sp]
   16de0:	mov	r3, #1
   16de4:	add	r1, r1, r2
   16de8:	add	r2, r1, #1
   16dec:	add	r1, r4, #60	; 0x3c
   16df0:	blx	r7
   16df4:	mov	r1, r0
   16df8:	mov	r0, #0
   16dfc:	cmp	r1, #0
   16e00:	beq	16e0c <flatcc_builder_table_add@@Base+0xd8>
   16e04:	sub	sp, fp, #24
   16e08:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16e0c:	ldr	r0, [r4, #28]
   16e10:	ldr	r2, [r4, #60]	; 0x3c
   16e14:	ldr	r3, [r4, #64]	; 0x40
   16e18:	ldr	r1, [r4, #32]
   16e1c:	add	r2, r2, r0
   16e20:	sub	r0, r3, r0
   16e24:	str	r2, [r4, #16]
   16e28:	movw	r2, #65532	; 0xfffc
   16e2c:	cmp	r0, r2
   16e30:	movcs	r0, r2
   16e34:	str	r0, [r4, #24]
   16e38:	str	r2, [r1, #4]
   16e3c:	ldr	r0, [r4, #4]
   16e40:	uxth	r1, r8
   16e44:	add	r2, r6, #4
   16e48:	add	r0, r0, r1, lsl #1
   16e4c:	strh	r2, [r0]
   16e50:	ldrh	r0, [r4, #8]
   16e54:	cmp	r0, r1
   16e58:	addls	r0, r8, #1
   16e5c:	strhls	r0, [r4, #8]
   16e60:	ldr	r0, [r4, #16]
   16e64:	add	r0, r0, r6
   16e68:	sub	sp, fp, #24
   16e6c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16e70:	movw	r0, #44055	; 0xac17
   16e74:	movw	r1, #41986	; 0xa402
   16e78:	movw	r3, #45633	; 0xb241
   16e7c:	movw	r2, #1773	; 0x6ed
   16e80:	movt	r0, #1
   16e84:	movt	r1, #1
   16e88:	movt	r3, #1
   16e8c:	bl	127a8 <__assert_fail@plt>
   16e90:	movw	r0, #45707	; 0xb28b
   16e94:	movw	r1, #41986	; 0xa402
   16e98:	movw	r3, #45633	; 0xb241
   16e9c:	movw	r2, #1774	; 0x6ee
   16ea0:	movt	r0, #1
   16ea4:	movt	r1, #1
   16ea8:	movt	r3, #1
   16eac:	bl	127a8 <__assert_fail@plt>
   16eb0:	movw	r0, #46504	; 0xb5a8
   16eb4:	movw	r1, #41986	; 0xa402
   16eb8:	movw	r3, #45633	; 0xb241
   16ebc:	movw	r2, #1784	; 0x6f8
   16ec0:	movt	r0, #1
   16ec4:	movt	r1, #1
   16ec8:	movt	r3, #1
   16ecc:	bl	127a8 <__assert_fail@plt>

00016ed0 <flatcc_builder_table_add_union_vector@@Base>:
   16ed0:	push	{r4, r5, r6, r7, fp, lr}
   16ed4:	add	fp, sp, #16
   16ed8:	mov	r6, r0
   16edc:	ldr	r0, [r0, #32]
   16ee0:	ldrh	r0, [r0, #14]
   16ee4:	cmp	r0, #3
   16ee8:	bne	16f54 <flatcc_builder_table_add_union_vector@@Base+0x84>
   16eec:	mov	r5, r1
   16ef0:	clz	r1, r3
   16ef4:	cmp	r2, #0
   16ef8:	mov	r0, r2
   16efc:	mov	r4, r3
   16f00:	mov	r7, r2
   16f04:	movwne	r0, #1
   16f08:	lsr	r1, r1, #5
   16f0c:	teq	r1, r0
   16f10:	beq	16f74 <flatcc_builder_table_add_union_vector@@Base+0xa4>
   16f14:	cmp	r7, #0
   16f18:	beq	16f4c <flatcc_builder_table_add_union_vector@@Base+0x7c>
   16f1c:	sub	r1, r5, #1
   16f20:	mov	r0, r6
   16f24:	bl	16ba4 <flatcc_builder_table_add_offset@@Base>
   16f28:	cmp	r0, #0
   16f2c:	beq	16f94 <flatcc_builder_table_add_union_vector@@Base+0xc4>
   16f30:	str	r7, [r0]
   16f34:	mov	r0, r6
   16f38:	mov	r1, r5
   16f3c:	bl	16ba4 <flatcc_builder_table_add_offset@@Base>
   16f40:	cmp	r0, #0
   16f44:	beq	16fb4 <flatcc_builder_table_add_union_vector@@Base+0xe4>
   16f48:	str	r4, [r0]
   16f4c:	mov	r0, #0
   16f50:	pop	{r4, r5, r6, r7, fp, pc}
   16f54:	movw	r0, #44055	; 0xac17
   16f58:	movw	r1, #41986	; 0xa402
   16f5c:	movw	r3, #44953	; 0xaf99
   16f60:	mov	r2, #1536	; 0x600
   16f64:	movt	r0, #1
   16f68:	movt	r1, #1
   16f6c:	movt	r3, #1
   16f70:	bl	127a8 <__assert_fail@plt>
   16f74:	movw	r0, #45052	; 0xaffc
   16f78:	movw	r1, #41986	; 0xa402
   16f7c:	movw	r3, #44953	; 0xaf99
   16f80:	movw	r2, #1537	; 0x601
   16f84:	movt	r0, #1
   16f88:	movt	r1, #1
   16f8c:	movt	r3, #1
   16f90:	bl	127a8 <__assert_fail@plt>
   16f94:	movw	r0, #44931	; 0xaf83
   16f98:	movw	r1, #41986	; 0xa402
   16f9c:	movw	r3, #44953	; 0xaf99
   16fa0:	movw	r2, #1540	; 0x604
   16fa4:	movt	r0, #1
   16fa8:	movt	r1, #1
   16fac:	movt	r3, #1
   16fb0:	bl	127a8 <__assert_fail@plt>
   16fb4:	movw	r0, #44931	; 0xaf83
   16fb8:	movw	r1, #41986	; 0xa402
   16fbc:	movw	r3, #44953	; 0xaf99
   16fc0:	movw	r2, #1544	; 0x608
   16fc4:	movt	r0, #1
   16fc8:	movt	r1, #1
   16fcc:	movt	r3, #1
   16fd0:	bl	127a8 <__assert_fail@plt>

00016fd4 <flatcc_builder_create_union_vector@@Base>:
   16fd4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16fd8:	add	fp, sp, #28
   16fdc:	sub	sp, sp, #12
   16fe0:	mov	r6, #0
   16fe4:	mov	r4, r1
   16fe8:	mov	r8, r0
   16fec:	mov	sl, r3
   16ff0:	mov	r9, r2
   16ff4:	mov	r7, #4
   16ff8:	str	r6, [r0]
   16ffc:	str	r6, [r0, #4]
   17000:	mov	r0, r1
   17004:	mov	r1, #4
   17008:	bl	144a0 <flatcc_builder_start_buffer@@Base+0xbc>
   1700c:	cmp	r0, #0
   17010:	beq	1701c <flatcc_builder_create_union_vector@@Base+0x48>
   17014:	sub	sp, fp, #28
   17018:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1701c:	ldr	r0, [r4, #32]
   17020:	mov	r1, #5
   17024:	str	r7, [r0, #16]
   17028:	ldr	r0, [r4, #32]
   1702c:	str	r6, [r0, #20]
   17030:	ldr	r0, [r4, #32]
   17034:	strh	r1, [r0, #14]
   17038:	ldr	r1, [r4, #28]
   1703c:	ldr	r2, [r4, #60]	; 0x3c
   17040:	ldr	r3, [r4, #64]	; 0x40
   17044:	add	r2, r2, r1
   17048:	sub	r1, r3, r1
   1704c:	str	r2, [r4, #16]
   17050:	mvn	r2, #3
   17054:	cmn	r1, #4
   17058:	movcs	r1, r2
   1705c:	str	r1, [r4, #24]
   17060:	str	r2, [r0, #4]
   17064:	ldr	r1, [r0, #20]
   17068:	adds	r1, r1, sl
   1706c:	cmpcc	r1, #1073741824	; 0x40000000
   17070:	bcc	17094 <flatcc_builder_create_union_vector@@Base+0xc0>
   17074:	movw	r0, #46257	; 0xb4b1
   17078:	movw	r1, #41986	; 0xa402
   1707c:	movw	r3, #46284	; 0xb4cc
   17080:	mov	r2, #892	; 0x37c
   17084:	movt	r0, #1
   17088:	movt	r1, #1
   1708c:	movt	r3, #1
   17090:	bl	127a8 <__assert_fail@plt>
   17094:	str	r1, [r0, #20]
   17098:	ldr	r7, [r4, #20]
   1709c:	ldr	r0, [r4, #24]
   170a0:	add	r1, r7, sl, lsl #2
   170a4:	cmp	r1, r0
   170a8:	str	r1, [r4, #20]
   170ac:	bcs	170c0 <flatcc_builder_create_union_vector@@Base+0xec>
   170b0:	ldr	r1, [r4, #16]
   170b4:	adds	r2, r1, r7
   170b8:	bne	17128 <flatcc_builder_create_union_vector@@Base+0x154>
   170bc:	b	17014 <flatcc_builder_create_union_vector@@Base+0x40>
   170c0:	ldr	r2, [r4, #28]
   170c4:	ldr	r0, [r4, #40]	; 0x28
   170c8:	ldr	r6, [r4, #48]	; 0x30
   170cc:	mov	r3, #1
   170d0:	str	r3, [sp]
   170d4:	mov	r3, #1
   170d8:	add	r1, r1, r2
   170dc:	add	r2, r1, #1
   170e0:	add	r1, r4, #60	; 0x3c
   170e4:	blx	r6
   170e8:	cmp	r0, #0
   170ec:	bne	17014 <flatcc_builder_create_union_vector@@Base+0x40>
   170f0:	ldr	r0, [r4, #28]
   170f4:	ldr	r1, [r4, #60]	; 0x3c
   170f8:	ldr	r3, [r4, #64]	; 0x40
   170fc:	ldr	r2, [r4, #32]
   17100:	add	r1, r1, r0
   17104:	sub	r0, r3, r0
   17108:	mvn	r3, #3
   1710c:	cmn	r0, #4
   17110:	str	r1, [r4, #16]
   17114:	movcs	r0, r3
   17118:	str	r0, [r4, #24]
   1711c:	str	r3, [r2, #4]
   17120:	adds	r2, r1, r7
   17124:	beq	17014 <flatcc_builder_create_union_vector@@Base+0x40>
   17128:	ldr	r7, [r4, #20]
   1712c:	add	r2, r7, sl
   17130:	cmp	r2, r0
   17134:	str	r2, [r4, #20]
   17138:	bcc	1719c <flatcc_builder_create_union_vector@@Base+0x1c8>
   1713c:	ldr	r1, [r4, #28]
   17140:	ldr	r0, [r4, #40]	; 0x28
   17144:	ldr	r6, [r4, #48]	; 0x30
   17148:	mov	r3, #1
   1714c:	str	r3, [sp]
   17150:	mov	r3, #1
   17154:	add	r1, r2, r1
   17158:	add	r2, r1, #1
   1715c:	add	r1, r4, #60	; 0x3c
   17160:	blx	r6
   17164:	cmp	r0, #0
   17168:	bne	17014 <flatcc_builder_create_union_vector@@Base+0x40>
   1716c:	ldr	r0, [r4, #28]
   17170:	ldr	r1, [r4, #60]	; 0x3c
   17174:	ldr	r3, [r4, #64]	; 0x40
   17178:	ldr	r2, [r4, #32]
   1717c:	add	r1, r1, r0
   17180:	sub	r0, r3, r0
   17184:	mvn	r3, #3
   17188:	cmn	r0, #4
   1718c:	str	r1, [r4, #16]
   17190:	movcs	r0, r3
   17194:	str	r0, [r4, #24]
   17198:	str	r3, [r2, #4]
   1719c:	adds	r5, r1, r7
   171a0:	beq	17014 <flatcc_builder_create_union_vector@@Base+0x40>
   171a4:	cmp	sl, #0
   171a8:	beq	17230 <flatcc_builder_create_union_vector@@Base+0x25c>
   171ac:	and	ip, sl, #1
   171b0:	mov	r0, #0
   171b4:	cmp	sl, #1
   171b8:	str	r5, [sp, #8]
   171bc:	beq	17214 <flatcc_builder_create_union_vector@@Base+0x240>
   171c0:	ldr	r0, [sp, #8]
   171c4:	sub	lr, sl, ip
   171c8:	add	r2, r1, #4
   171cc:	add	r6, r9, #8
   171d0:	add	r7, r0, #1
   171d4:	mov	r0, #0
   171d8:	ldrb	r3, [r6, #-8]
   171dc:	add	r5, r7, r0
   171e0:	strb	r3, [r5, #-1]
   171e4:	add	r3, r9, r0, lsl #3
   171e8:	ldr	r5, [r3, #4]
   171ec:	str	r5, [r2, #-4]
   171f0:	ldrb	r5, [r6]
   171f4:	add	r6, r6, #16
   171f8:	strb	r5, [r7, r0]
   171fc:	add	r0, r0, #2
   17200:	ldr	r3, [r3, #12]
   17204:	cmp	lr, r0
   17208:	str	r3, [r2]
   1720c:	add	r2, r2, #8
   17210:	bne	171d8 <flatcc_builder_create_union_vector@@Base+0x204>
   17214:	ldr	r5, [sp, #8]
   17218:	cmp	ip, #0
   1721c:	beq	17230 <flatcc_builder_create_union_vector@@Base+0x25c>
   17220:	ldrb	r2, [r9, r0, lsl #3]!
   17224:	strb	r2, [r5, r0]
   17228:	ldr	r2, [r9, #4]
   1722c:	str	r2, [r1, r0, lsl #2]
   17230:	mov	r0, r4
   17234:	mov	r2, sl
   17238:	mov	r3, r5
   1723c:	bl	167a8 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   17240:	mov	r7, r0
   17244:	mov	r6, #0
   17248:	cmp	r0, #0
   1724c:	beq	17278 <flatcc_builder_create_union_vector@@Base+0x2a4>
   17250:	mvn	r0, #0
   17254:	mov	r1, #1
   17258:	mov	r2, sl
   1725c:	mov	r3, #1
   17260:	str	r1, [sp]
   17264:	str	r0, [sp, #4]
   17268:	mov	r0, r4
   1726c:	mov	r1, r5
   17270:	bl	16548 <flatcc_builder_create_vector@@Base>
   17274:	b	1727c <flatcc_builder_create_union_vector@@Base+0x2a8>
   17278:	mov	r0, #0
   1727c:	orr	r1, r6, r7
   17280:	stm	r8, {r0, r1}
   17284:	mov	r1, #0
   17288:	ldr	r0, [r4, #16]
   1728c:	ldr	r2, [r4, #20]
   17290:	bl	12778 <memset@plt>
   17294:	ldr	r0, [r4, #32]
   17298:	ldr	r1, [r4, #60]	; 0x3c
   1729c:	ldr	r2, [r4, #64]	; 0x40
   172a0:	ldr	r3, [r0, #8]
   172a4:	str	r3, [r4, #20]
   172a8:	ldr	r3, [r0]
   172ac:	str	r3, [r4, #28]
   172b0:	add	r1, r1, r3
   172b4:	ldr	r7, [r0, #4]
   172b8:	str	r1, [r4, #16]
   172bc:	sub	r1, r2, r3
   172c0:	cmp	r1, r7
   172c4:	movhi	r1, r7
   172c8:	str	r1, [r4, #24]
   172cc:	ldrh	r1, [r4, #130]	; 0x82
   172d0:	ldrh	r2, [r4, #128]	; 0x80
   172d4:	cmp	r2, r1
   172d8:	strhcc	r1, [r4, #128]	; 0x80
   172dc:	ldrh	r1, [r0, #12]
   172e0:	sub	r0, r0, #36	; 0x24
   172e4:	str	r0, [r4, #32]
   172e8:	strh	r1, [r4, #130]	; 0x82
   172ec:	ldr	r0, [r4, #156]	; 0x9c
   172f0:	sub	r0, r0, #1
   172f4:	str	r0, [r4, #156]	; 0x9c
   172f8:	sub	sp, fp, #28
   172fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00017300 <flatcc_builder_create_union_vector_direct@@Base>:
   17300:	push	{r4, r5, r6, r7, fp, lr}
   17304:	add	fp, sp, #16
   17308:	sub	sp, sp, #8
   1730c:	ldr	r7, [fp, #8]
   17310:	mov	r5, r2
   17314:	mov	r4, r0
   17318:	mov	r0, #0
   1731c:	mov	r6, r1
   17320:	str	r0, [r4]
   17324:	str	r0, [r4, #4]
   17328:	mov	r0, r1
   1732c:	mov	r1, r3
   17330:	mov	r3, r5
   17334:	mov	r2, r7
   17338:	bl	167a8 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   1733c:	cmp	r0, #0
   17340:	str	r0, [r4, #4]
   17344:	beq	17370 <flatcc_builder_create_union_vector_direct@@Base+0x70>
   17348:	mvn	r0, #0
   1734c:	mov	r1, #1
   17350:	mov	r2, r7
   17354:	mov	r3, #1
   17358:	str	r1, [sp]
   1735c:	str	r0, [sp, #4]
   17360:	mov	r0, r6
   17364:	mov	r1, r5
   17368:	bl	16548 <flatcc_builder_create_vector@@Base>
   1736c:	str	r0, [r4]
   17370:	sub	sp, fp, #16
   17374:	pop	{r4, r5, r6, r7, fp, pc}

00017378 <flatcc_builder_start_union_vector@@Base>:
   17378:	push	{r4, sl, fp, lr}
   1737c:	add	fp, sp, #8
   17380:	mov	r1, #4
   17384:	mov	r4, r0
   17388:	bl	144a0 <flatcc_builder_start_buffer@@Base+0xbc>
   1738c:	mov	r1, r0
   17390:	mvn	r0, #0
   17394:	cmp	r1, #0
   17398:	popne	{r4, sl, fp, pc}
   1739c:	ldr	r0, [r4, #32]
   173a0:	mov	r1, #8
   173a4:	mov	r2, #7
   173a8:	str	r1, [r0, #16]
   173ac:	mov	r0, #0
   173b0:	ldr	r1, [r4, #32]
   173b4:	str	r0, [r1, #20]
   173b8:	ldr	r1, [r4, #32]
   173bc:	strh	r2, [r1, #14]
   173c0:	ldr	r2, [r4, #28]
   173c4:	ldr	r3, [r4, #60]	; 0x3c
   173c8:	ldr	ip, [r4, #64]	; 0x40
   173cc:	add	r3, r3, r2
   173d0:	sub	r2, ip, r2
   173d4:	str	r3, [r4, #16]
   173d8:	mvn	r3, #3
   173dc:	cmn	r2, #4
   173e0:	movcs	r2, r3
   173e4:	str	r2, [r4, #24]
   173e8:	str	r3, [r1, #4]
   173ec:	pop	{r4, sl, fp, pc}

000173f0 <flatcc_builder_end_union_vector@@Base>:
   173f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   173f4:	add	fp, sp, #28
   173f8:	sub	sp, sp, #20
   173fc:	mov	r4, r0
   17400:	mov	r0, #0
   17404:	mov	r8, r1
   17408:	str	r0, [r4]
   1740c:	str	r0, [r4, #4]
   17410:	ldr	r0, [r1, #32]
   17414:	ldrh	r1, [r0, #14]
   17418:	cmp	r1, #7
   1741c:	bne	17624 <flatcc_builder_end_union_vector@@Base+0x234>
   17420:	ldr	r9, [r0, #20]
   17424:	ldr	r5, [r8, #20]
   17428:	ldr	r2, [r8, #24]
   1742c:	add	r0, r9, r9, lsl #2
   17430:	add	r1, r5, r0
   17434:	cmp	r1, r2
   17438:	str	r1, [r8, #20]
   1743c:	bcs	1752c <flatcc_builder_end_union_vector@@Base+0x13c>
   17440:	ldr	r0, [r8, #16]
   17444:	adds	r1, r0, r5
   17448:	beq	17594 <flatcc_builder_end_union_vector@@Base+0x1a4>
   1744c:	add	sl, r1, r9, lsl #2
   17450:	cmp	r9, #0
   17454:	beq	174e4 <flatcc_builder_end_union_vector@@Base+0xf4>
   17458:	and	r2, r9, #1
   1745c:	cmp	r9, #1
   17460:	str	r4, [sp, #12]
   17464:	str	r2, [sp, #16]
   17468:	mov	r2, #0
   1746c:	beq	174c4 <flatcc_builder_end_union_vector@@Base+0xd4>
   17470:	ldr	r2, [sp, #16]
   17474:	add	r5, r5, #4
   17478:	add	r6, r0, #8
   1747c:	sub	lr, r9, r2
   17480:	mov	r2, #0
   17484:	ldrb	r7, [r6, #-8]
   17488:	mov	r4, sl
   1748c:	add	r3, r0, r2, lsl #3
   17490:	strb	r7, [r4, r2]!
   17494:	add	r7, r0, r5
   17498:	add	r2, r2, #2
   1749c:	ldr	ip, [r3, #4]
   174a0:	cmp	lr, r2
   174a4:	str	ip, [r7, #-4]
   174a8:	ldrb	r7, [r6]
   174ac:	add	r6, r6, #16
   174b0:	strb	r7, [r4, #1]
   174b4:	ldr	r3, [r3, #12]
   174b8:	str	r3, [r0, r5]
   174bc:	add	r5, r5, #8
   174c0:	bne	17484 <flatcc_builder_end_union_vector@@Base+0x94>
   174c4:	ldr	r3, [sp, #16]
   174c8:	ldr	r4, [sp, #12]
   174cc:	cmp	r3, #0
   174d0:	beq	174e4 <flatcc_builder_end_union_vector@@Base+0xf4>
   174d4:	ldrb	r3, [r0, r2, lsl #3]!
   174d8:	strb	r3, [sl, r2]
   174dc:	ldr	r0, [r0, #4]
   174e0:	str	r0, [r1, r2, lsl #2]
   174e4:	mov	r0, r8
   174e8:	mov	r2, r9
   174ec:	mov	r3, sl
   174f0:	bl	167a8 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   174f4:	mov	r5, r0
   174f8:	mov	r6, #0
   174fc:	cmp	r0, #0
   17500:	beq	1759c <flatcc_builder_end_union_vector@@Base+0x1ac>
   17504:	mvn	r0, #0
   17508:	mov	r1, #1
   1750c:	mov	r2, r9
   17510:	mov	r3, #1
   17514:	str	r1, [sp]
   17518:	str	r0, [sp, #4]
   1751c:	mov	r0, r8
   17520:	mov	r1, sl
   17524:	bl	16548 <flatcc_builder_create_vector@@Base>
   17528:	b	175a0 <flatcc_builder_end_union_vector@@Base+0x1b0>
   1752c:	ldr	r2, [r8, #28]
   17530:	ldr	r0, [r8, #40]	; 0x28
   17534:	ldr	r7, [r8, #48]	; 0x30
   17538:	mov	r3, #1
   1753c:	str	r3, [sp]
   17540:	mov	r3, #1
   17544:	add	r1, r1, r2
   17548:	add	r2, r1, #1
   1754c:	add	r1, r8, #60	; 0x3c
   17550:	blx	r7
   17554:	cmp	r0, #0
   17558:	bne	17594 <flatcc_builder_end_union_vector@@Base+0x1a4>
   1755c:	ldr	r1, [r8, #28]
   17560:	ldr	r0, [r8, #60]	; 0x3c
   17564:	ldr	r3, [r8, #64]	; 0x40
   17568:	ldr	r2, [r8, #32]
   1756c:	add	r0, r0, r1
   17570:	sub	r1, r3, r1
   17574:	mvn	r3, #3
   17578:	cmn	r1, #4
   1757c:	str	r0, [r8, #16]
   17580:	movcs	r1, r3
   17584:	str	r1, [r8, #24]
   17588:	str	r3, [r2, #4]
   1758c:	adds	r1, r0, r5
   17590:	bne	1744c <flatcc_builder_end_union_vector@@Base+0x5c>
   17594:	sub	sp, fp, #28
   17598:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1759c:	mov	r0, #0
   175a0:	orr	r1, r6, r5
   175a4:	stm	r4, {r0, r1}
   175a8:	mov	r1, #0
   175ac:	ldr	r0, [r8, #16]
   175b0:	ldr	r2, [r8, #20]
   175b4:	bl	12778 <memset@plt>
   175b8:	ldr	r0, [r8, #32]
   175bc:	ldr	r1, [r8, #60]	; 0x3c
   175c0:	ldr	r2, [r8, #64]	; 0x40
   175c4:	ldr	r3, [r0, #8]
   175c8:	str	r3, [r8, #20]
   175cc:	ldr	r3, [r0]
   175d0:	str	r3, [r8, #28]
   175d4:	add	r1, r1, r3
   175d8:	ldr	r7, [r0, #4]
   175dc:	str	r1, [r8, #16]
   175e0:	sub	r1, r2, r3
   175e4:	cmp	r1, r7
   175e8:	movhi	r1, r7
   175ec:	str	r1, [r8, #24]
   175f0:	ldrh	r1, [r8, #130]	; 0x82
   175f4:	ldrh	r2, [r8, #128]	; 0x80
   175f8:	cmp	r2, r1
   175fc:	strhcc	r1, [r8, #128]	; 0x80
   17600:	ldrh	r1, [r0, #12]
   17604:	sub	r0, r0, #36	; 0x24
   17608:	str	r0, [r8, #32]
   1760c:	strh	r1, [r8, #130]	; 0x82
   17610:	ldr	r0, [r8, #156]	; 0x9c
   17614:	sub	r0, r0, #1
   17618:	str	r0, [r8, #156]	; 0x9c
   1761c:	sub	sp, fp, #28
   17620:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17624:	movw	r0, #45092	; 0xb024
   17628:	movw	r1, #41986	; 0xa402
   1762c:	movw	r3, #45142	; 0xb056
   17630:	movw	r2, #1617	; 0x651
   17634:	movt	r0, #1
   17638:	movt	r1, #1
   1763c:	movt	r3, #1
   17640:	bl	127a8 <__assert_fail@plt>

00017644 <flatcc_builder_union_vector_count@@Base>:
   17644:	ldr	r0, [r0, #32]
   17648:	ldr	r0, [r0, #20]
   1764c:	bx	lr

00017650 <flatcc_builder_union_vector_edit@@Base>:
   17650:	ldr	r0, [r0, #16]
   17654:	bx	lr

00017658 <flatcc_builder_extend_union_vector@@Base>:
   17658:	push	{r4, r5, fp, lr}
   1765c:	add	fp, sp, #8
   17660:	sub	sp, sp, #8
   17664:	mov	r4, r0
   17668:	ldr	r0, [r0, #32]
   1766c:	ldr	r2, [r0, #20]
   17670:	adds	r2, r2, r1
   17674:	cmpcc	r2, #536870912	; 0x20000000
   17678:	bcc	1769c <flatcc_builder_extend_union_vector@@Base+0x44>
   1767c:	movw	r0, #46257	; 0xb4b1
   17680:	movw	r1, #41986	; 0xa402
   17684:	movw	r3, #46284	; 0xb4cc
   17688:	mov	r2, #892	; 0x37c
   1768c:	movt	r0, #1
   17690:	movt	r1, #1
   17694:	movt	r3, #1
   17698:	bl	127a8 <__assert_fail@plt>
   1769c:	str	r2, [r0, #20]
   176a0:	ldr	r5, [r4, #20]
   176a4:	ldr	r0, [r4, #24]
   176a8:	add	r1, r5, r1, lsl #3
   176ac:	cmp	r1, r0
   176b0:	str	r1, [r4, #20]
   176b4:	bcs	176c8 <flatcc_builder_extend_union_vector@@Base+0x70>
   176b8:	ldr	r0, [r4, #16]
   176bc:	add	r0, r0, r5
   176c0:	sub	sp, fp, #8
   176c4:	pop	{r4, r5, fp, pc}
   176c8:	ldr	r2, [r4, #28]
   176cc:	ldr	r0, [r4, #40]	; 0x28
   176d0:	ldr	ip, [r4, #48]	; 0x30
   176d4:	mov	r3, #1
   176d8:	str	r3, [sp]
   176dc:	mov	r3, #1
   176e0:	add	r1, r1, r2
   176e4:	add	r2, r1, #1
   176e8:	add	r1, r4, #60	; 0x3c
   176ec:	blx	ip
   176f0:	mov	r1, r0
   176f4:	mov	r0, #0
   176f8:	cmp	r1, #0
   176fc:	beq	17708 <flatcc_builder_extend_union_vector@@Base+0xb0>
   17700:	sub	sp, fp, #8
   17704:	pop	{r4, r5, fp, pc}
   17708:	ldr	r1, [r4, #28]
   1770c:	ldr	r0, [r4, #60]	; 0x3c
   17710:	ldr	r3, [r4, #64]	; 0x40
   17714:	ldr	r2, [r4, #32]
   17718:	add	r0, r0, r1
   1771c:	sub	r1, r3, r1
   17720:	mvn	r3, #3
   17724:	cmn	r1, #4
   17728:	str	r0, [r4, #16]
   1772c:	movcs	r1, r3
   17730:	str	r1, [r4, #24]
   17734:	str	r3, [r2, #4]
   17738:	add	r0, r0, r5
   1773c:	sub	sp, fp, #8
   17740:	pop	{r4, r5, fp, pc}

00017744 <flatcc_builder_truncate_union_vector@@Base>:
   17744:	push	{fp, lr}
   17748:	mov	fp, sp
   1774c:	ldr	r2, [r0, #32]
   17750:	ldrh	r3, [r2, #14]
   17754:	cmp	r3, #7
   17758:	bne	177a0 <flatcc_builder_truncate_union_vector@@Base+0x5c>
   1775c:	ldr	r3, [r2, #20]
   17760:	cmp	r3, r1
   17764:	bcc	177c0 <flatcc_builder_truncate_union_vector@@Base+0x7c>
   17768:	sub	r3, r3, r1
   1776c:	str	r3, [r2, #20]
   17770:	ldr	r2, [r0, #32]
   17774:	ldr	r3, [r0, #20]
   17778:	ldr	ip, [r0, #16]
   1777c:	ldr	r2, [r2, #16]
   17780:	mls	r3, r2, r1, r3
   17784:	mul	r2, r2, r1
   17788:	mov	r1, #0
   1778c:	str	r3, [r0, #20]
   17790:	add	r0, ip, r3
   17794:	bl	12778 <memset@plt>
   17798:	mov	r0, #0
   1779c:	pop	{fp, pc}
   177a0:	movw	r0, #45092	; 0xb024
   177a4:	movw	r1, #41986	; 0xa402
   177a8:	movw	r3, #45225	; 0xb0a9
   177ac:	movw	r2, #1665	; 0x681
   177b0:	movt	r0, #1
   177b4:	movt	r1, #1
   177b8:	movt	r3, #1
   177bc:	bl	127a8 <__assert_fail@plt>
   177c0:	movw	r0, #43656	; 0xaa88
   177c4:	movw	r1, #41986	; 0xa402
   177c8:	movw	r3, #45225	; 0xb0a9
   177cc:	movw	r2, #1666	; 0x682
   177d0:	movt	r0, #1
   177d4:	movt	r1, #1
   177d8:	movt	r3, #1
   177dc:	bl	127a8 <__assert_fail@plt>

000177e0 <flatcc_builder_union_vector_push@@Base>:
   177e0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   177e4:	add	fp, sp, #24
   177e8:	sub	sp, sp, #8
   177ec:	mov	r7, r0
   177f0:	ldr	r0, [r0, #32]
   177f4:	mov	r9, r1
   177f8:	ldrh	r1, [r0, #14]
   177fc:	cmp	r1, #7
   17800:	bne	178c8 <flatcc_builder_union_vector_push@@Base+0xe8>
   17804:	ldr	r1, [r0, #20]
   17808:	mov	r6, #0
   1780c:	cmn	r1, #-536870911	; 0xe0000001
   17810:	beq	17870 <flatcc_builder_union_vector_push@@Base+0x90>
   17814:	add	r1, r1, #1
   17818:	mov	r8, r2
   1781c:	str	r1, [r0, #20]
   17820:	ldr	r4, [r7, #20]
   17824:	ldr	r0, [r7, #24]
   17828:	add	r1, r4, #8
   1782c:	cmp	r1, r0
   17830:	str	r1, [r7, #20]
   17834:	bcs	17840 <flatcc_builder_union_vector_push@@Base+0x60>
   17838:	ldr	r0, [r7, #16]
   1783c:	b	178ac <flatcc_builder_union_vector_push@@Base+0xcc>
   17840:	ldr	r1, [r7, #28]
   17844:	ldr	r0, [r7, #40]	; 0x28
   17848:	ldr	r5, [r7, #48]	; 0x30
   1784c:	mov	r2, #1
   17850:	mov	r3, #1
   17854:	str	r2, [sp]
   17858:	add	r1, r4, r1
   1785c:	add	r2, r1, #9
   17860:	add	r1, r7, #60	; 0x3c
   17864:	blx	r5
   17868:	cmp	r0, #0
   1786c:	beq	1787c <flatcc_builder_union_vector_push@@Base+0x9c>
   17870:	mov	r0, r6
   17874:	sub	sp, fp, #24
   17878:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1787c:	ldr	r1, [r7, #28]
   17880:	ldr	r0, [r7, #60]	; 0x3c
   17884:	ldr	r3, [r7, #64]	; 0x40
   17888:	ldr	r2, [r7, #32]
   1788c:	add	r0, r0, r1
   17890:	sub	r1, r3, r1
   17894:	mvn	r3, #3
   17898:	cmn	r1, #4
   1789c:	str	r0, [r7, #16]
   178a0:	movcs	r1, r3
   178a4:	str	r1, [r7, #24]
   178a8:	str	r3, [r2, #4]
   178ac:	adds	r0, r0, r4
   178b0:	movne	r6, r0
   178b4:	strne	r9, [r0]
   178b8:	strne	r8, [r0, #4]
   178bc:	mov	r0, r6
   178c0:	sub	sp, fp, #24
   178c4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   178c8:	movw	r0, #45092	; 0xb024
   178cc:	movw	r1, #41986	; 0xa402
   178d0:	movw	r3, #45294	; 0xb0ee
   178d4:	movw	r2, #1677	; 0x68d
   178d8:	movt	r0, #1
   178dc:	movt	r1, #1
   178e0:	movt	r3, #1
   178e4:	bl	127a8 <__assert_fail@plt>

000178e8 <flatcc_builder_append_union_vector@@Base>:
   178e8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   178ec:	add	fp, sp, #24
   178f0:	sub	sp, sp, #8
   178f4:	mov	r6, r0
   178f8:	ldr	r0, [r0, #32]
   178fc:	mov	r8, r1
   17900:	ldrh	r1, [r0, #14]
   17904:	cmp	r1, #7
   17908:	bne	17a0c <flatcc_builder_append_union_vector@@Base+0x124>
   1790c:	ldr	r1, [r0, #20]
   17910:	mov	r5, r2
   17914:	adds	r1, r1, r2
   17918:	cmpcc	r1, #536870912	; 0x20000000
   1791c:	bcc	17940 <flatcc_builder_append_union_vector@@Base+0x58>
   17920:	movw	r0, #46257	; 0xb4b1
   17924:	movw	r1, #41986	; 0xa402
   17928:	movw	r3, #46284	; 0xb4cc
   1792c:	mov	r2, #892	; 0x37c
   17930:	movt	r0, #1
   17934:	movt	r1, #1
   17938:	movt	r3, #1
   1793c:	bl	127a8 <__assert_fail@plt>
   17940:	str	r1, [r0, #20]
   17944:	ldr	r4, [r6, #20]
   17948:	ldr	r0, [r6, #24]
   1794c:	add	r1, r4, r5, lsl #3
   17950:	cmp	r1, r0
   17954:	str	r1, [r6, #20]
   17958:	bcs	17984 <flatcc_builder_append_union_vector@@Base+0x9c>
   1795c:	ldr	r0, [r6, #16]
   17960:	adds	r7, r0, r4
   17964:	beq	179fc <flatcc_builder_append_union_vector@@Base+0x114>
   17968:	lsl	r2, r5, #3
   1796c:	mov	r0, r7
   17970:	mov	r1, r8
   17974:	bl	12718 <memcpy@plt>
   17978:	mov	r0, r7
   1797c:	sub	sp, fp, #24
   17980:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17984:	ldr	r2, [r6, #28]
   17988:	ldr	r0, [r6, #40]	; 0x28
   1798c:	ldr	r7, [r6, #48]	; 0x30
   17990:	mov	r3, #1
   17994:	str	r3, [sp]
   17998:	mov	r3, #1
   1799c:	add	r1, r1, r2
   179a0:	add	r2, r1, #1
   179a4:	add	r1, r6, #60	; 0x3c
   179a8:	blx	r7
   179ac:	mov	r7, #0
   179b0:	cmp	r0, #0
   179b4:	beq	179c4 <flatcc_builder_append_union_vector@@Base+0xdc>
   179b8:	mov	r0, r7
   179bc:	sub	sp, fp, #24
   179c0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   179c4:	ldr	r1, [r6, #28]
   179c8:	ldr	r0, [r6, #60]	; 0x3c
   179cc:	ldr	r3, [r6, #64]	; 0x40
   179d0:	ldr	r2, [r6, #32]
   179d4:	add	r0, r0, r1
   179d8:	sub	r1, r3, r1
   179dc:	mvn	r3, #3
   179e0:	cmn	r1, #4
   179e4:	str	r0, [r6, #16]
   179e8:	movcs	r1, r3
   179ec:	str	r1, [r6, #24]
   179f0:	str	r3, [r2, #4]
   179f4:	adds	r7, r0, r4
   179f8:	bne	17968 <flatcc_builder_append_union_vector@@Base+0x80>
   179fc:	mov	r7, #0
   17a00:	mov	r0, r7
   17a04:	sub	sp, fp, #24
   17a08:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17a0c:	movw	r0, #45092	; 0xb024
   17a10:	movw	r1, #41986	; 0xa402
   17a14:	movw	r3, #45403	; 0xb15b
   17a18:	movw	r2, #1692	; 0x69c
   17a1c:	movt	r0, #1
   17a20:	movt	r1, #1
   17a24:	movt	r3, #1
   17a28:	bl	127a8 <__assert_fail@plt>

00017a2c <flatcc_builder_create_string@@Base>:
   17a2c:	push	{r4, r5, r6, sl, fp, lr}
   17a30:	add	fp, sp, #16
   17a34:	sub	sp, sp, #80	; 0x50
   17a38:	str	r2, [fp, #-20]	; 0xffffffec
   17a3c:	mvn	r5, r2
   17a40:	mov	r6, r0
   17a44:	sub	r3, fp, #20
   17a48:	cmp	r2, #0
   17a4c:	add	lr, sp, #4
   17a50:	ldr	ip, [r0, #136]	; 0x88
   17a54:	mov	r0, #4
   17a58:	str	r0, [sp, #16]
   17a5c:	str	r3, [sp, #12]
   17a60:	mov	r3, #1
   17a64:	str	r0, [sp, #4]
   17a68:	addne	r0, r2, #4
   17a6c:	str	r3, [sp, #8]
   17a70:	strne	r2, [sp, #24]
   17a74:	movw	r2, #41456	; 0xa1f0
   17a78:	movne	r3, #2
   17a7c:	strne	r1, [sp, #20]
   17a80:	strne	r3, [sp, #8]
   17a84:	strne	r0, [sp, #4]
   17a88:	movt	r2, #1
   17a8c:	add	r5, ip, r5
   17a90:	and	r5, r5, #3
   17a94:	add	r5, r5, #1
   17a98:	add	r1, r0, r5
   17a9c:	add	r0, lr, r3, lsl #3
   17aa0:	str	r1, [sp, #4]
   17aa4:	cmp	r1, #0
   17aa8:	str	r2, [r0, #8]
   17aac:	add	r2, r3, #1
   17ab0:	str	r5, [r0, #12]
   17ab4:	str	r2, [sp, #8]
   17ab8:	ble	17b0c <flatcc_builder_create_string@@Base+0xe0>
   17abc:	ldr	r0, [r6, #36]	; 0x24
   17ac0:	ldr	r4, [r6, #44]	; 0x2c
   17ac4:	sub	r5, ip, r1
   17ac8:	str	r1, [sp]
   17acc:	add	r1, lr, #8
   17ad0:	mov	r3, r5
   17ad4:	blx	r4
   17ad8:	cmp	r0, #0
   17adc:	streq	r5, [r6, #136]	; 0x88
   17ae0:	moveq	r0, r5
   17ae4:	subeq	sp, fp, #16
   17ae8:	popeq	{r4, r5, r6, sl, fp, pc}
   17aec:	movw	r0, #46504	; 0xb5a8
   17af0:	movw	r1, #41986	; 0xa402
   17af4:	movw	r3, #46183	; 0xb467
   17af8:	movw	r2, #651	; 0x28b
   17afc:	movt	r0, #1
   17b00:	movt	r1, #1
   17b04:	movt	r3, #1
   17b08:	bl	127a8 <__assert_fail@plt>
   17b0c:	movw	r0, #46504	; 0xb5a8
   17b10:	movw	r1, #41986	; 0xa402
   17b14:	movw	r3, #46183	; 0xb467
   17b18:	movw	r2, #647	; 0x287
   17b1c:	movt	r0, #1
   17b20:	movt	r1, #1
   17b24:	movt	r3, #1
   17b28:	bl	127a8 <__assert_fail@plt>

00017b2c <flatcc_builder_create_string_str@@Base>:
   17b2c:	push	{r4, r5, fp, lr}
   17b30:	add	fp, sp, #8
   17b34:	mov	r5, r0
   17b38:	mov	r0, r1
   17b3c:	mov	r4, r1
   17b40:	bl	12760 <strlen@plt>
   17b44:	mov	r2, r0
   17b48:	mov	r0, r5
   17b4c:	mov	r1, r4
   17b50:	pop	{r4, r5, fp, lr}
   17b54:	b	17a2c <flatcc_builder_create_string@@Base>

00017b58 <flatcc_builder_create_string_strn@@Base>:
   17b58:	push	{r4, r5, r6, sl, fp, lr}
   17b5c:	add	fp, sp, #16
   17b60:	mov	r6, r0
   17b64:	mov	r5, r1
   17b68:	mov	r0, r1
   17b6c:	mov	r1, #0
   17b70:	mov	r4, r2
   17b74:	bl	12790 <memchr@plt>
   17b78:	cmp	r0, #0
   17b7c:	mov	r1, r5
   17b80:	subne	r4, r0, r5
   17b84:	mov	r0, r6
   17b88:	mov	r2, r4
   17b8c:	pop	{r4, r5, r6, sl, fp, lr}
   17b90:	b	17a2c <flatcc_builder_create_string@@Base>

00017b94 <flatcc_builder_end_string@@Base>:
   17b94:	push	{r4, r5, fp, lr}
   17b98:	add	fp, sp, #8
   17b9c:	mov	r4, r0
   17ba0:	ldr	r0, [r0, #32]
   17ba4:	ldrh	r1, [r0, #14]
   17ba8:	cmp	r1, #6
   17bac:	bne	17c54 <flatcc_builder_end_string@@Base+0xc0>
   17bb0:	ldr	r2, [r0, #20]
   17bb4:	ldr	r0, [r4, #20]
   17bb8:	cmp	r2, r0
   17bbc:	bne	17c74 <flatcc_builder_end_string@@Base+0xe0>
   17bc0:	ldr	r1, [r4, #16]
   17bc4:	mov	r0, r4
   17bc8:	bl	17a2c <flatcc_builder_create_string@@Base>
   17bcc:	mov	r5, r0
   17bd0:	cmp	r0, #0
   17bd4:	beq	17c4c <flatcc_builder_end_string@@Base+0xb8>
   17bd8:	ldr	r0, [r4, #16]
   17bdc:	ldr	r2, [r4, #20]
   17be0:	mov	r1, #0
   17be4:	bl	12778 <memset@plt>
   17be8:	ldr	r0, [r4, #32]
   17bec:	ldr	r1, [r4, #60]	; 0x3c
   17bf0:	ldr	ip, [r4, #64]	; 0x40
   17bf4:	ldr	r3, [r0, #8]
   17bf8:	str	r3, [r4, #20]
   17bfc:	ldr	r3, [r0]
   17c00:	str	r3, [r4, #28]
   17c04:	add	r1, r1, r3
   17c08:	ldr	r2, [r0, #4]
   17c0c:	str	r1, [r4, #16]
   17c10:	sub	r1, ip, r3
   17c14:	cmp	r1, r2
   17c18:	movhi	r1, r2
   17c1c:	str	r1, [r4, #24]
   17c20:	ldrh	r1, [r4, #130]	; 0x82
   17c24:	ldrh	r2, [r4, #128]	; 0x80
   17c28:	cmp	r2, r1
   17c2c:	strhcc	r1, [r4, #128]	; 0x80
   17c30:	ldrh	r1, [r0, #12]
   17c34:	sub	r0, r0, #36	; 0x24
   17c38:	str	r0, [r4, #32]
   17c3c:	strh	r1, [r4, #130]	; 0x82
   17c40:	ldr	r0, [r4, #156]	; 0x9c
   17c44:	sub	r0, r0, #1
   17c48:	str	r0, [r4, #156]	; 0x9c
   17c4c:	mov	r0, r5
   17c50:	pop	{r4, r5, fp, pc}
   17c54:	movw	r0, #43303	; 0xa927
   17c58:	movw	r1, #41986	; 0xa402
   17c5c:	movw	r3, #45530	; 0xb1da
   17c60:	movw	r2, #1732	; 0x6c4
   17c64:	movt	r0, #1
   17c68:	movt	r1, #1
   17c6c:	movt	r3, #1
   17c70:	bl	127a8 <__assert_fail@plt>
   17c74:	movw	r0, #45597	; 0xb21d
   17c78:	movw	r1, #41986	; 0xa402
   17c7c:	movw	r3, #45530	; 0xb1da
   17c80:	movw	r2, #1733	; 0x6c5
   17c84:	movt	r0, #1
   17c88:	movt	r1, #1
   17c8c:	movt	r3, #1
   17c90:	bl	127a8 <__assert_fail@plt>

00017c94 <flatcc_builder_string_edit@@Base>:
   17c94:	ldr	r0, [r0, #16]
   17c98:	bx	lr

00017c9c <flatcc_builder_string_len@@Base>:
   17c9c:	ldr	r0, [r0, #32]
   17ca0:	ldr	r0, [r0, #20]
   17ca4:	bx	lr

00017ca8 <flatcc_builder_table_edit@@Base>:
   17ca8:	push	{fp, lr}
   17cac:	mov	fp, sp
   17cb0:	ldr	r2, [r0, #32]
   17cb4:	ldrh	r2, [r2, #14]
   17cb8:	cmp	r2, #3
   17cbc:	ldreq	r2, [r0, #16]
   17cc0:	ldreq	r0, [r0, #20]
   17cc4:	addeq	r0, r2, r0
   17cc8:	subeq	r0, r0, r1
   17ccc:	popeq	{fp, pc}
   17cd0:	movw	r0, #44055	; 0xac17
   17cd4:	movw	r1, #41986	; 0xa402
   17cd8:	movw	r3, #45775	; 0xb2cf
   17cdc:	movw	r2, #1794	; 0x702
   17ce0:	movt	r0, #1
   17ce4:	movt	r1, #1
   17ce8:	movt	r3, #1
   17cec:	bl	127a8 <__assert_fail@plt>

00017cf0 <flatcc_builder_table_add_copy@@Base>:
   17cf0:	push	{r4, r5, r6, sl, fp, lr}
   17cf4:	add	fp, sp, #16
   17cf8:	mov	r4, r3
   17cfc:	ldr	r3, [fp, #8]
   17d00:	mov	r5, r2
   17d04:	mov	r2, r4
   17d08:	bl	16d34 <flatcc_builder_table_add@@Base>
   17d0c:	mov	r6, r0
   17d10:	cmp	r0, #0
   17d14:	beq	17d28 <flatcc_builder_table_add_copy@@Base+0x38>
   17d18:	mov	r0, r6
   17d1c:	mov	r1, r5
   17d20:	mov	r2, r4
   17d24:	bl	12718 <memcpy@plt>
   17d28:	mov	r0, r6
   17d2c:	pop	{r4, r5, r6, sl, fp, pc}

00017d30 <flatcc_builder_push_buffer_alignment@@Base>:
   17d30:	ldrh	r1, [r0, #128]	; 0x80
   17d34:	mov	r2, #4
   17d38:	strh	r2, [r0, #128]	; 0x80
   17d3c:	mov	r0, r1
   17d40:	bx	lr

00017d44 <flatcc_builder_pop_buffer_alignment@@Base>:
   17d44:	ldrh	r2, [r0, #128]	; 0x80
   17d48:	cmp	r2, r1
   17d4c:	strhcc	r1, [r0, #128]	; 0x80
   17d50:	bx	lr

00017d54 <flatcc_builder_get_buffer_alignment@@Base>:
   17d54:	ldrh	r0, [r0, #128]	; 0x80
   17d58:	bx	lr

00017d5c <flatcc_builder_set_vtable_clustering@@Base>:
   17d5c:	clz	r1, r1
   17d60:	lsr	r1, r1, #5
   17d64:	str	r1, [r0, #180]	; 0xb4
   17d68:	bx	lr

00017d6c <flatcc_builder_set_block_align@@Base>:
   17d6c:	strh	r1, [r0, #132]	; 0x84
   17d70:	bx	lr

00017d74 <flatcc_builder_get_level@@Base>:
   17d74:	ldr	r0, [r0, #156]	; 0x9c
   17d78:	bx	lr

00017d7c <flatcc_builder_set_max_level@@Base>:
   17d7c:	str	r1, [r0, #176]	; 0xb0
   17d80:	ldr	r2, [r0, #160]	; 0xa0
   17d84:	cmp	r2, r1
   17d88:	strlt	r1, [r0, #160]	; 0xa0
   17d8c:	bx	lr

00017d90 <flatcc_builder_get_buffer_size@@Base>:
   17d90:	ldr	r1, [r0, #136]	; 0x88
   17d94:	ldr	r0, [r0, #140]	; 0x8c
   17d98:	sub	r0, r0, r1
   17d9c:	bx	lr

00017da0 <flatcc_builder_get_buffer_start@@Base>:
   17da0:	ldr	r0, [r0, #136]	; 0x88
   17da4:	bx	lr

00017da8 <flatcc_builder_get_buffer_end@@Base>:
   17da8:	ldr	r0, [r0, #140]	; 0x8c
   17dac:	bx	lr

00017db0 <flatcc_builder_set_vtable_cache_limit@@Base>:
   17db0:	str	r1, [r0, #172]	; 0xac
   17db4:	bx	lr

00017db8 <flatcc_builder_set_identifier@@Base>:
   17db8:	movw	r2, #41456	; 0xa1f0
   17dbc:	cmp	r1, #0
   17dc0:	movt	r2, #1
   17dc4:	movne	r2, r1
   17dc8:	ldr	r1, [r2]
   17dcc:	str	r1, [r0, #168]	; 0xa8
   17dd0:	bx	lr

00017dd4 <flatcc_builder_get_type@@Base>:
   17dd4:	ldr	r0, [r0, #32]
   17dd8:	cmp	r0, #0
   17ddc:	ldrhne	r0, [r0, #14]
   17de0:	moveq	r0, #0
   17de4:	bx	lr

00017de8 <flatcc_builder_get_type_at@@Base>:
   17de8:	mov	r2, r0
   17dec:	mov	r0, #0
   17df0:	cmp	r1, #1
   17df4:	blt	17e18 <flatcc_builder_get_type_at@@Base+0x30>
   17df8:	ldr	r3, [r2, #156]	; 0x9c
   17dfc:	cmp	r3, r1
   17e00:	bxlt	lr
   17e04:	sub	r0, r1, r3
   17e08:	ldr	r1, [r2, #32]
   17e0c:	add	r0, r0, r0, lsl #3
   17e10:	add	r0, r1, r0, lsl #2
   17e14:	ldrh	r0, [r0, #14]
   17e18:	bx	lr

00017e1c <flatcc_builder_get_direct_buffer@@Base>:
   17e1c:	ldr	r2, [r0, #184]	; 0xb8
   17e20:	cmp	r2, #0
   17e24:	beq	17e38 <flatcc_builder_get_direct_buffer@@Base+0x1c>
   17e28:	ldr	r2, [r0, #188]	; 0xbc
   17e2c:	ldr	r3, [r0, #192]	; 0xc0
   17e30:	cmp	r2, r3
   17e34:	beq	17e50 <flatcc_builder_get_direct_buffer@@Base+0x34>
   17e38:	cmp	r1, #0
   17e3c:	moveq	r0, #0
   17e40:	bxeq	lr
   17e44:	mov	r0, #0
   17e48:	str	r0, [r1]
   17e4c:	bx	lr
   17e50:	cmp	r1, #0
   17e54:	ldrne	r2, [r0, #212]	; 0xd4
   17e58:	strne	r2, [r1]
   17e5c:	ldr	r0, [r0, #196]	; 0xc4
   17e60:	bx	lr

00017e64 <flatcc_builder_copy_buffer@@Base>:
   17e64:	push	{fp, lr}
   17e68:	mov	fp, sp
   17e6c:	ldr	r3, [r0, #184]	; 0xb8
   17e70:	cmp	r3, #0
   17e74:	beq	17ea8 <flatcc_builder_copy_buffer@@Base+0x44>
   17e78:	add	r0, r0, #188	; 0xbc
   17e7c:	bl	185a8 <flatcc_emitter_copy_buffer@@Base>
   17e80:	cmp	r0, #0
   17e84:	popne	{fp, pc}
   17e88:	movw	r0, #42582	; 0xa656
   17e8c:	movw	r1, #41986	; 0xa402
   17e90:	movw	r3, #45914	; 0xb35a
   17e94:	movw	r2, #1926	; 0x786
   17e98:	movt	r0, #1
   17e9c:	movt	r1, #1
   17ea0:	movt	r3, #1
   17ea4:	bl	127a8 <__assert_fail@plt>
   17ea8:	mov	r0, #0
   17eac:	pop	{fp, pc}

00017eb0 <flatcc_builder_finalize_buffer@@Base>:
   17eb0:	push	{r4, r5, r6, sl, fp, lr}
   17eb4:	add	fp, sp, #16
   17eb8:	mov	r5, r0
   17ebc:	ldr	r0, [r0, #136]	; 0x88
   17ec0:	cmp	r1, #0
   17ec4:	ldr	r2, [r5, #140]	; 0x8c
   17ec8:	sub	r4, r2, r0
   17ecc:	mov	r0, r4
   17ed0:	strne	r4, [r1]
   17ed4:	bl	12730 <malloc@plt>
   17ed8:	cmp	r0, #0
   17edc:	beq	17f2c <flatcc_builder_finalize_buffer@@Base+0x7c>
   17ee0:	mov	r6, r0
   17ee4:	ldr	r0, [r5, #184]	; 0xb8
   17ee8:	cmp	r0, #0
   17eec:	beq	17f4c <flatcc_builder_finalize_buffer@@Base+0x9c>
   17ef0:	add	r0, r5, #188	; 0xbc
   17ef4:	mov	r1, r6
   17ef8:	mov	r2, r4
   17efc:	bl	185a8 <flatcc_emitter_copy_buffer@@Base>
   17f00:	cmp	r0, #0
   17f04:	movne	r0, r6
   17f08:	popne	{r4, r5, r6, sl, fp, pc}
   17f0c:	movw	r0, #42582	; 0xa656
   17f10:	movw	r1, #41986	; 0xa402
   17f14:	movw	r3, #45914	; 0xb35a
   17f18:	movw	r2, #1926	; 0x786
   17f1c:	movt	r0, #1
   17f20:	movt	r1, #1
   17f24:	movt	r3, #1
   17f28:	bl	127a8 <__assert_fail@plt>
   17f2c:	movw	r0, #46504	; 0xb5a8
   17f30:	movw	r1, #41986	; 0xa402
   17f34:	movw	r3, #45983	; 0xb39f
   17f38:	movw	r2, #1944	; 0x798
   17f3c:	movt	r0, #1
   17f40:	movt	r1, #1
   17f44:	movt	r3, #1
   17f48:	bl	127a8 <__assert_fail@plt>
   17f4c:	movw	r0, #46504	; 0xb5a8
   17f50:	movw	r1, #41986	; 0xa402
   17f54:	movw	r3, #45983	; 0xb39f
   17f58:	movw	r2, #1948	; 0x79c
   17f5c:	movt	r0, #1
   17f60:	movt	r1, #1
   17f64:	movt	r3, #1
   17f68:	bl	127a8 <__assert_fail@plt>

00017f6c <flatcc_builder_finalize_aligned_buffer@@Base>:
   17f6c:	push	{r4, r5, r6, r7, fp, lr}
   17f70:	add	fp, sp, #16
   17f74:	sub	sp, sp, #8
   17f78:	mov	r5, r0
   17f7c:	mov	r4, r1
   17f80:	ldr	r0, [r0, #136]	; 0x88
   17f84:	ldr	r1, [r5, #140]	; 0x8c
   17f88:	cmp	r4, #0
   17f8c:	sub	r0, r1, r0
   17f90:	mov	r1, #0
   17f94:	strne	r0, [r4]
   17f98:	ldrh	r2, [r5, #128]	; 0x80
   17f9c:	str	r1, [sp, #4]
   17fa0:	add	r0, r0, r2
   17fa4:	cmp	r2, #4
   17fa8:	mov	r1, r2
   17fac:	rsb	r2, r2, #0
   17fb0:	sub	r0, r0, #1
   17fb4:	movls	r1, #4
   17fb8:	and	r7, r0, r2
   17fbc:	add	r0, sp, #4
   17fc0:	mov	r2, r7
   17fc4:	bl	1276c <posix_memalign@plt>
   17fc8:	ldr	r6, [sp, #4]
   17fcc:	cmp	r0, #0
   17fd0:	cmpne	r6, #0
   17fd4:	bne	18010 <flatcc_builder_finalize_aligned_buffer@@Base+0xa4>
   17fd8:	cmp	r6, #0
   17fdc:	beq	18018 <flatcc_builder_finalize_aligned_buffer@@Base+0xac>
   17fe0:	ldr	r0, [r5, #184]	; 0xb8
   17fe4:	cmp	r0, #0
   17fe8:	beq	18010 <flatcc_builder_finalize_aligned_buffer@@Base+0xa4>
   17fec:	add	r0, r5, #188	; 0xbc
   17ff0:	mov	r1, r6
   17ff4:	mov	r2, r7
   17ff8:	bl	185a8 <flatcc_emitter_copy_buffer@@Base>
   17ffc:	cmp	r0, #0
   18000:	beq	18030 <flatcc_builder_finalize_aligned_buffer@@Base+0xc4>
   18004:	mov	r0, r6
   18008:	sub	sp, fp, #16
   1800c:	pop	{r4, r5, r6, r7, fp, pc}
   18010:	mov	r0, r6
   18014:	bl	1270c <free@plt>
   18018:	mov	r6, #0
   1801c:	cmp	r4, #0
   18020:	strne	r6, [r4]
   18024:	mov	r0, r6
   18028:	sub	sp, fp, #16
   1802c:	pop	{r4, r5, r6, r7, fp, pc}
   18030:	movw	r0, #42582	; 0xa656
   18034:	movw	r1, #41986	; 0xa402
   18038:	movw	r3, #45914	; 0xb35a
   1803c:	movw	r2, #1926	; 0x786
   18040:	movt	r0, #1
   18044:	movt	r1, #1
   18048:	movt	r3, #1
   1804c:	bl	127a8 <__assert_fail@plt>

00018050 <flatcc_builder_aligned_alloc@@Base>:
   18050:	push	{fp, lr}
   18054:	mov	fp, sp
   18058:	sub	sp, sp, #8
   1805c:	mov	r2, r1
   18060:	mov	r1, r0
   18064:	mov	r0, #0
   18068:	cmp	r1, #4
   1806c:	str	r0, [sp, #4]
   18070:	add	r0, sp, #4
   18074:	movls	r1, #4
   18078:	bl	1276c <posix_memalign@plt>
   1807c:	mov	r1, r0
   18080:	ldr	r0, [sp, #4]
   18084:	cmp	r1, #0
   18088:	cmpne	r0, #0
   1808c:	bne	18098 <flatcc_builder_aligned_alloc@@Base+0x48>
   18090:	mov	sp, fp
   18094:	pop	{fp, pc}
   18098:	bl	1270c <free@plt>
   1809c:	mov	r0, #0
   180a0:	str	r0, [sp, #4]
   180a4:	mov	sp, fp
   180a8:	pop	{fp, pc}

000180ac <flatcc_builder_aligned_free@@Base>:
   180ac:	b	1270c <free@plt>

000180b0 <flatcc_builder_get_emit_context@@Base>:
   180b0:	ldr	r0, [r0, #36]	; 0x24
   180b4:	bx	lr

000180b8 <flatcc_emitter_recycle_page@@Base>:
   180b8:	ldr	r3, [r0]
   180bc:	mov	r2, r0
   180c0:	mvn	r0, #0
   180c4:	cmp	r3, r1
   180c8:	beq	18108 <flatcc_emitter_recycle_page@@Base+0x50>
   180cc:	ldr	r2, [r2, #4]
   180d0:	cmp	r2, r1
   180d4:	bxeq	lr
   180d8:	ldr	r0, [r1, #2944]	; 0xb80
   180dc:	ldr	r2, [r1, #2948]	; 0xb84
   180e0:	str	r2, [r0, #2948]	; 0xb84
   180e4:	ldr	r2, [r1, #2948]	; 0xb84
   180e8:	str	r0, [r2, #2944]	; 0xb80
   180ec:	ldr	r0, [r3, #2948]	; 0xb84
   180f0:	str	r3, [r1, #2944]	; 0xb80
   180f4:	str	r0, [r1, #2948]	; 0xb84
   180f8:	str	r1, [r0, #2944]	; 0xb80
   180fc:	ldr	r0, [r1, #2944]	; 0xb80
   18100:	str	r1, [r0, #2948]	; 0xb84
   18104:	mov	r0, #0
   18108:	bx	lr

0001810c <flatcc_emitter_reset@@Base>:
   1810c:	push	{r4, sl, fp, lr}
   18110:	add	fp, sp, #8
   18114:	ldr	r1, [r0]
   18118:	cmp	r1, #0
   1811c:	beq	181d4 <flatcc_emitter_reset@@Base+0xc8>
   18120:	mov	r4, r0
   18124:	add	r2, r1, #1472	; 0x5c0
   18128:	mov	r0, #1472	; 0x5c0
   1812c:	mov	r3, #0
   18130:	stmib	r4, {r1, r2}
   18134:	str	r0, [r4, #12]
   18138:	str	r2, [r4, #16]
   1813c:	str	r0, [r4, #20]
   18140:	movw	r0, #64064	; 0xfa40
   18144:	movt	r0, #65535	; 0xffff
   18148:	str	r0, [r1, #2952]	; 0xb88
   1814c:	ldr	r2, [r4, #32]
   18150:	ldr	r0, [r4, #24]
   18154:	cmp	r2, #0
   18158:	moveq	r2, r0
   1815c:	streq	r0, [r4, #32]
   18160:	str	r3, [r4, #24]
   18164:	add	r2, r2, r2, lsl #1
   18168:	lsr	r2, r2, #2
   1816c:	add	r0, r2, r0, lsr #2
   18170:	str	r0, [r4, #32]
   18174:	ldr	r2, [r4, #28]
   18178:	cmp	r2, r0, lsl #1
   1817c:	bls	181d4 <flatcc_emitter_reset@@Base+0xc8>
   18180:	mov	r2, r1
   18184:	ldr	r0, [r2, #2944]!	; 0xb80
   18188:	cmp	r0, r1
   1818c:	popeq	{r4, sl, fp, pc}
   18190:	ldr	r3, [r0, #2944]	; 0xb80
   18194:	str	r3, [r2]
   18198:	ldr	r2, [r0, #2944]	; 0xb80
   1819c:	str	r1, [r2, #2948]	; 0xb84
   181a0:	bl	1270c <free@plt>
   181a4:	ldr	r0, [r4, #28]
   181a8:	ldr	r1, [r4, #32]
   181ac:	sub	r0, r0, #2944	; 0xb80
   181b0:	cmp	r0, r1, lsl #1
   181b4:	str	r0, [r4, #28]
   181b8:	bls	181d4 <flatcc_emitter_reset@@Base+0xc8>
   181bc:	ldr	r1, [r4, #4]
   181c0:	ldr	r3, [r4]
   181c4:	mov	r2, r1
   181c8:	ldr	r0, [r2, #2944]!	; 0xb80
   181cc:	cmp	r0, r3
   181d0:	bne	18190 <flatcc_emitter_reset@@Base+0x84>
   181d4:	pop	{r4, sl, fp, pc}

000181d8 <flatcc_emitter_clear@@Base>:
   181d8:	push	{r4, r5, r6, sl, fp, lr}
   181dc:	add	fp, sp, #16
   181e0:	ldr	r5, [r0]
   181e4:	cmp	r5, #0
   181e8:	beq	18240 <flatcc_emitter_clear@@Base+0x68>
   181ec:	mov	r4, r0
   181f0:	ldr	r0, [r5, #2948]	; 0xb84
   181f4:	mov	r6, #0
   181f8:	str	r6, [r0, #2944]	; 0xb80
   181fc:	ldr	r0, [r5, #2944]	; 0xb80
   18200:	cmp	r0, #0
   18204:	beq	18220 <flatcc_emitter_clear@@Base+0x48>
   18208:	mov	r5, r0
   1820c:	ldr	r0, [r0, #2948]	; 0xb84
   18210:	bl	1270c <free@plt>
   18214:	ldr	r0, [r5, #2944]	; 0xb80
   18218:	cmp	r0, #0
   1821c:	bne	18208 <flatcc_emitter_clear@@Base+0x30>
   18220:	mov	r0, r5
   18224:	bl	1270c <free@plt>
   18228:	vmov.i32	q8, #0	; 0x00000000
   1822c:	add	r0, r4, #16
   18230:	vst1.32	{d16-d17}, [r0]
   18234:	mov	r0, #32
   18238:	vst1.32	{d16-d17}, [r4], r0
   1823c:	str	r6, [r4]
   18240:	pop	{r4, r5, r6, sl, fp, pc}

00018244 <flatcc_emitter@@Base>:
   18244:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18248:	add	fp, sp, #28
   1824c:	sub	sp, sp, #4
   18250:	mov	r6, r0
   18254:	mov	r7, r1
   18258:	ldr	r0, [r0, #24]
   1825c:	ldr	r1, [fp, #8]
   18260:	mov	r4, r2
   18264:	cmn	r3, #1
   18268:	mov	r9, r6
   1826c:	add	r0, r0, r1
   18270:	str	r0, [r6, #24]
   18274:	ble	183dc <flatcc_emitter@@Base+0x198>
   18278:	ldr	r0, [r9, #20]!
   1827c:	cmp	r0, r1
   18280:	bcs	1853c <flatcc_emitter@@Base+0x2f8>
   18284:	mov	r8, #0
   18288:	cmp	r4, #0
   1828c:	beq	1859c <flatcc_emitter@@Base+0x358>
   18290:	movw	sl, #64064	; 0xfa40
   18294:	movt	sl, #65535	; 0xffff
   18298:	ldr	r8, [r7, #4]
   1829c:	cmp	r8, #0
   182a0:	beq	183c0 <flatcc_emitter@@Base+0x17c>
   182a4:	ldr	r9, [r7]
   182a8:	cmp	r8, r0
   182ac:	mov	r5, r8
   182b0:	bls	182bc <flatcc_emitter@@Base+0x78>
   182b4:	b	182fc <flatcc_emitter@@Base+0xb8>
   182b8:	mov	r5, r8
   182bc:	ldr	r0, [r6, #16]
   182c0:	mov	r1, r9
   182c4:	mov	r2, r5
   182c8:	bl	12718 <memcpy@plt>
   182cc:	ldr	r0, [r6, #16]
   182d0:	ldr	r1, [r6, #20]
   182d4:	add	r9, r9, r5
   182d8:	subs	r8, r8, r5
   182dc:	add	r2, r0, r5
   182e0:	sub	r0, r1, r5
   182e4:	str	r2, [r6, #16]
   182e8:	str	r0, [r6, #20]
   182ec:	beq	183c0 <flatcc_emitter@@Base+0x17c>
   182f0:	cmp	r8, r0
   182f4:	mov	r5, r8
   182f8:	bls	182bc <flatcc_emitter@@Base+0x78>
   182fc:	mov	r5, r0
   18300:	cmp	r5, #0
   18304:	beq	18350 <flatcc_emitter@@Base+0x10c>
   18308:	b	182bc <flatcc_emitter@@Base+0x78>
   1830c:	ldr	r1, [r6]
   18310:	str	r1, [r0, #2944]	; 0xb80
   18314:	str	r5, [r0, #2948]	; 0xb84
   18318:	str	r0, [r1, #2948]	; 0xb84
   1831c:	str	r0, [r5, #2944]	; 0xb80
   18320:	mov	r5, #2944	; 0xb80
   18324:	str	r0, [r6, #4]
   18328:	str	r0, [r6, #16]
   1832c:	str	r5, [r6, #20]
   18330:	ldr	r1, [r0, #2948]	; 0xb84
   18334:	ldr	r1, [r1, #2952]	; 0xb88
   18338:	add	r1, r1, #2944	; 0xb80
   1833c:	str	r1, [r0, #2952]	; 0xb88
   18340:	cmp	r8, r5
   18344:	bls	182b8 <flatcc_emitter@@Base+0x74>
   18348:	cmp	r5, #0
   1834c:	bne	182bc <flatcc_emitter@@Base+0x78>
   18350:	ldr	r5, [r6, #4]
   18354:	cmp	r5, #0
   18358:	beq	1836c <flatcc_emitter@@Base+0x128>
   1835c:	ldr	r0, [r5, #2944]	; 0xb80
   18360:	ldr	r1, [r6]
   18364:	cmp	r0, r1
   18368:	bne	18320 <flatcc_emitter@@Base+0xdc>
   1836c:	movw	r0, #2956	; 0xb8c
   18370:	bl	12730 <malloc@plt>
   18374:	cmp	r0, #0
   18378:	beq	1854c <flatcc_emitter@@Base+0x308>
   1837c:	ldr	r1, [r6, #28]
   18380:	cmp	r5, #0
   18384:	add	r1, r1, #2944	; 0xb80
   18388:	str	r1, [r6, #28]
   1838c:	bne	1830c <flatcc_emitter@@Base+0xc8>
   18390:	add	r1, r0, #1472	; 0x5c0
   18394:	mov	r5, #1472	; 0x5c0
   18398:	str	r0, [r6]
   1839c:	stmib	r6, {r0, r1, r5}
   183a0:	str	r1, [r6, #16]
   183a4:	str	r5, [r6, #20]
   183a8:	str	r0, [r0, #2944]	; 0xb80
   183ac:	str	r0, [r0, #2948]	; 0xb84
   183b0:	str	sl, [r0, #2952]	; 0xb88
   183b4:	cmp	r8, r5
   183b8:	bhi	18348 <flatcc_emitter@@Base+0x104>
   183bc:	b	182b8 <flatcc_emitter@@Base+0x74>
   183c0:	subs	r4, r4, #1
   183c4:	add	r7, r7, #8
   183c8:	bne	18298 <flatcc_emitter@@Base+0x54>
   183cc:	mov	r8, #0
   183d0:	mov	r0, r8
   183d4:	sub	sp, fp, #28
   183d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   183dc:	ldr	r0, [r9, #12]!
   183e0:	cmp	r0, r1
   183e4:	bcs	1855c <flatcc_emitter@@Base+0x318>
   183e8:	mov	r8, #0
   183ec:	cmp	r4, #0
   183f0:	beq	1859c <flatcc_emitter@@Base+0x358>
   183f4:	add	r0, r7, r4, lsl #3
   183f8:	ldr	sl, [r0, #-4]
   183fc:	sub	r1, r0, #8
   18400:	str	r1, [sp]
   18404:	cmp	sl, #0
   18408:	beq	1852c <flatcc_emitter@@Base+0x2e8>
   1840c:	ldr	r0, [sp]
   18410:	ldr	r0, [r0]
   18414:	add	r7, r0, sl
   18418:	ldr	r1, [r9]
   1841c:	cmp	sl, r1
   18420:	bhi	18460 <flatcc_emitter@@Base+0x21c>
   18424:	b	184fc <flatcc_emitter@@Base+0x2b8>
   18428:	ldr	r1, [r5, #2952]	; 0xb88
   1842c:	sub	r1, r1, #2944	; 0xb80
   18430:	str	r1, [r0, #2952]	; 0xb88
   18434:	mov	r1, #2944	; 0xb80
   18438:	add	r2, r0, #2944	; 0xb80
   1843c:	str	r0, [r6]
   18440:	str	r2, [r6, #8]
   18444:	str	r1, [r6, #12]
   18448:	ldr	r2, [r0, #2944]	; 0xb80
   1844c:	ldr	r2, [r2, #2952]	; 0xb88
   18450:	sub	r2, r2, #2944	; 0xb80
   18454:	str	r2, [r0, #2952]	; 0xb88
   18458:	cmp	sl, r1
   1845c:	bls	184fc <flatcc_emitter@@Base+0x2b8>
   18460:	cmp	r1, #0
   18464:	mov	r5, r1
   18468:	bne	18500 <flatcc_emitter@@Base+0x2bc>
   1846c:	ldr	r5, [r6]
   18470:	cmp	r5, #0
   18474:	beq	18488 <flatcc_emitter@@Base+0x244>
   18478:	ldr	r0, [r5, #2948]	; 0xb84
   1847c:	ldr	r1, [r6, #4]
   18480:	cmp	r0, r1
   18484:	bne	18428 <flatcc_emitter@@Base+0x1e4>
   18488:	movw	r0, #2956	; 0xb8c
   1848c:	bl	12730 <malloc@plt>
   18490:	cmp	r0, #0
   18494:	beq	1854c <flatcc_emitter@@Base+0x308>
   18498:	ldr	r1, [r6, #28]
   1849c:	cmp	r5, #0
   184a0:	add	r1, r1, #2944	; 0xb80
   184a4:	str	r1, [r6, #28]
   184a8:	beq	184c4 <flatcc_emitter@@Base+0x280>
   184ac:	ldr	r1, [r6, #4]
   184b0:	str	r5, [r0, #2944]	; 0xb80
   184b4:	str	r1, [r0, #2948]	; 0xb84
   184b8:	str	r0, [r5, #2948]	; 0xb84
   184bc:	str	r0, [r1, #2944]	; 0xb80
   184c0:	b	18434 <flatcc_emitter@@Base+0x1f0>
   184c4:	add	r2, r0, #1472	; 0x5c0
   184c8:	mov	r1, #1472	; 0x5c0
   184cc:	str	r0, [r6]
   184d0:	stmib	r6, {r0, r2}
   184d4:	str	r1, [r6, #12]
   184d8:	str	r2, [r6, #16]
   184dc:	movw	r2, #64064	; 0xfa40
   184e0:	str	r1, [r6, #20]
   184e4:	str	r0, [r0, #2944]	; 0xb80
   184e8:	str	r0, [r0, #2948]	; 0xb84
   184ec:	movt	r2, #65535	; 0xffff
   184f0:	str	r2, [r0, #2952]	; 0xb88
   184f4:	cmp	sl, r1
   184f8:	bhi	18460 <flatcc_emitter@@Base+0x21c>
   184fc:	mov	r5, sl
   18500:	sub	r0, r1, r5
   18504:	sub	r7, r7, r5
   18508:	mov	r2, r5
   1850c:	str	r0, [r6, #12]
   18510:	mov	r1, r7
   18514:	ldr	r0, [r6, #8]
   18518:	sub	r0, r0, r5
   1851c:	str	r0, [r6, #8]
   18520:	bl	12718 <memcpy@plt>
   18524:	subs	sl, sl, r5
   18528:	bne	18418 <flatcc_emitter@@Base+0x1d4>
   1852c:	ldr	r0, [sp]
   18530:	subs	r4, r4, #1
   18534:	bne	183f8 <flatcc_emitter@@Base+0x1b4>
   18538:	b	1859c <flatcc_emitter@@Base+0x358>
   1853c:	ldr	r5, [r6, #16]
   18540:	add	r2, r5, r1
   18544:	str	r2, [r6, #16]
   18548:	b	18568 <flatcc_emitter@@Base+0x324>
   1854c:	mvn	r8, #0
   18550:	mov	r0, r8
   18554:	sub	sp, fp, #28
   18558:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1855c:	ldr	r2, [r6, #8]
   18560:	sub	r5, r2, r1
   18564:	str	r5, [r6, #8]
   18568:	sub	r0, r0, r1
   1856c:	mov	r8, #0
   18570:	cmp	r4, #0
   18574:	str	r0, [r9]
   18578:	beq	1859c <flatcc_emitter@@Base+0x358>
   1857c:	ldm	r7, {r1, r2}
   18580:	mov	r0, r5
   18584:	bl	12718 <memcpy@plt>
   18588:	ldr	r0, [r7, #4]
   1858c:	add	r7, r7, #8
   18590:	subs	r4, r4, #1
   18594:	add	r5, r5, r0
   18598:	bne	1857c <flatcc_emitter@@Base+0x338>
   1859c:	mov	r0, r8
   185a0:	sub	sp, fp, #28
   185a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

000185a8 <flatcc_emitter_copy_buffer@@Base>:
   185a8:	push	{r4, r5, r6, sl, fp, lr}
   185ac:	add	fp, sp, #16
   185b0:	mov	r3, r2
   185b4:	ldr	r2, [r0, #24]
   185b8:	mov	r5, #0
   185bc:	cmp	r2, r3
   185c0:	bhi	18648 <flatcc_emitter_copy_buffer@@Base+0xa0>
   185c4:	mov	r4, r0
   185c8:	ldr	r0, [r0]
   185cc:	cmp	r0, #0
   185d0:	beq	18648 <flatcc_emitter_copy_buffer@@Base+0xa0>
   185d4:	mov	r6, r1
   185d8:	ldr	r1, [r4, #4]
   185dc:	cmp	r0, r1
   185e0:	beq	18650 <flatcc_emitter_copy_buffer@@Base+0xa8>
   185e4:	ldr	r0, [r4, #12]
   185e8:	ldr	r1, [r4, #8]
   185ec:	rsb	r5, r0, #2944	; 0xb80
   185f0:	mov	r0, r6
   185f4:	mov	r2, r5
   185f8:	bl	12718 <memcpy@plt>
   185fc:	ldm	r4, {r0, r1}
   18600:	add	r5, r6, r5
   18604:	ldr	r6, [r0, #2944]	; 0xb80
   18608:	cmp	r6, r1
   1860c:	beq	18634 <flatcc_emitter_copy_buffer@@Base+0x8c>
   18610:	mov	r0, r5
   18614:	mov	r1, r6
   18618:	mov	r2, #2944	; 0xb80
   1861c:	bl	12718 <memcpy@plt>
   18620:	ldr	r6, [r6, #2944]	; 0xb80
   18624:	ldr	r0, [r4, #4]
   18628:	add	r5, r5, #2944	; 0xb80
   1862c:	cmp	r6, r0
   18630:	bne	18610 <flatcc_emitter_copy_buffer@@Base+0x68>
   18634:	ldr	r0, [r4, #20]
   18638:	mov	r1, r6
   1863c:	rsb	r2, r0, #2944	; 0xb80
   18640:	mov	r0, r5
   18644:	bl	12718 <memcpy@plt>
   18648:	mov	r0, r5
   1864c:	pop	{r4, r5, r6, sl, fp, pc}
   18650:	ldr	r1, [r4, #8]
   18654:	mov	r0, r6
   18658:	bl	12718 <memcpy@plt>
   1865c:	mov	r0, r6
   18660:	pop	{r4, r5, r6, sl, fp, pc}

00018664 <flatcc_verify_error_string@@Base>:
   18664:	cmp	r0, #36	; 0x24
   18668:	movwhi	r0, #47718	; 0xba66
   1866c:	movthi	r0, #1
   18670:	bxhi	lr
   18674:	movw	r1, #47728	; 0xba70
   18678:	movt	r1, #1
   1867c:	ldr	r0, [r1, r0, lsl #2]
   18680:	bx	lr

00018684 <flatcc_verify_field@@Base>:
   18684:	push	{r4, sl, fp, lr}
   18688:	add	fp, sp, #8
   1868c:	mov	ip, #4
   18690:	ldrh	r4, [r0, #22]
   18694:	mov	lr, #0
   18698:	add	r1, ip, r1, lsl #1
   1869c:	uxth	ip, r1
   186a0:	cmp	ip, r4
   186a4:	bcs	18700 <flatcc_verify_field@@Base+0x7c>
   186a8:	ldr	r4, [r0, #12]
   186ac:	uxtah	r1, r4, r1
   186b0:	ldrh	ip, [r1]
   186b4:	cmp	ip, #0
   186b8:	beq	18700 <flatcc_verify_field@@Base+0x7c>
   186bc:	add	r1, ip, r2
   186c0:	ldrh	r2, [r0, #20]
   186c4:	mov	lr, #13
   186c8:	cmp	r1, r2
   186cc:	bhi	18700 <flatcc_verify_field@@Base+0x7c>
   186d0:	ldr	r1, [r0]
   186d4:	mov	lr, #0
   186d8:	add	r2, r1, ip
   186dc:	ldr	r1, [r0, #16]
   186e0:	add	r4, r2, r1
   186e4:	sub	r1, r3, #1
   186e8:	tst	r4, r1
   186ec:	beq	18700 <flatcc_verify_field@@Base+0x7c>
   186f0:	ldr	r0, [r0, #16]
   186f4:	add	r0, r2, r0
   186f8:	ands	lr, r0, r1
   186fc:	movwne	lr, #12
   18700:	mov	r0, lr
   18704:	pop	{r4, sl, fp, pc}

00018708 <flatcc_verify_string_field@@Base>:
   18708:	push	{fp, lr}
   1870c:	mov	fp, sp
   18710:	mov	lr, r0
   18714:	mov	r0, #4
   18718:	add	r0, r0, r1, lsl #1
   1871c:	ldrh	r3, [lr, #22]
   18720:	uxth	r1, r0
   18724:	cmp	r1, r3
   18728:	bcs	1876c <flatcc_verify_string_field@@Base+0x64>
   1872c:	ldr	r1, [lr, #12]
   18730:	uxtah	r0, r1, r0
   18734:	ldrh	r1, [r0]
   18738:	cmp	r1, #0
   1873c:	beq	1876c <flatcc_verify_string_field@@Base+0x64>
   18740:	ldrh	r2, [lr, #20]
   18744:	add	r3, r1, #4
   18748:	mov	r0, #13
   1874c:	cmp	r3, r2
   18750:	bhi	18768 <flatcc_verify_string_field@@Base+0x60>
   18754:	ldr	r0, [lr, #16]
   18758:	add	r2, r0, r1
   1875c:	mov	r0, #12
   18760:	tst	r2, #3
   18764:	beq	1877c <flatcc_verify_string_field@@Base+0x74>
   18768:	pop	{fp, pc}
   1876c:	cmp	r2, #0
   18770:	movwne	r2, #1
   18774:	lsl	r0, r2, #2
   18778:	pop	{fp, pc}
   1877c:	cmp	r2, #0
   18780:	beq	187e0 <flatcc_verify_string_field@@Base+0xd8>
   18784:	ldr	ip, [lr]
   18788:	ldr	r0, [ip, r2]
   1878c:	add	r1, r0, r2
   18790:	mov	r0, #17
   18794:	tst	r1, #3
   18798:	bne	18768 <flatcc_verify_string_field@@Base+0x60>
   1879c:	cmp	r1, r2
   187a0:	bls	18768 <flatcc_verify_string_field@@Base+0x60>
   187a4:	ldr	r3, [lr, #4]
   187a8:	add	r2, r1, #4
   187ac:	cmp	r3, r2
   187b0:	bcc	18768 <flatcc_verify_string_field@@Base+0x60>
   187b4:	ldr	r1, [ip, r1]
   187b8:	sub	lr, r3, r2
   187bc:	mov	r0, #8
   187c0:	add	r3, r1, #1
   187c4:	cmp	lr, r3
   187c8:	popcc	{fp, pc}
   187cc:	add	r0, ip, r2
   187d0:	ldrb	r0, [r0, r1]
   187d4:	cmp	r0, #0
   187d8:	movwne	r0, #7
   187dc:	pop	{fp, pc}
   187e0:	mov	r0, #0
   187e4:	pop	{fp, pc}

000187e8 <flatcc_verify_vector_field@@Base>:
   187e8:	push	{r4, sl, fp, lr}
   187ec:	add	fp, sp, #8
   187f0:	mov	ip, r0
   187f4:	mov	r0, #4
   187f8:	add	r0, r0, r1, lsl #1
   187fc:	ldrh	r4, [ip, #22]
   18800:	uxth	r1, r0
   18804:	cmp	r1, r4
   18808:	bcs	1884c <flatcc_verify_vector_field@@Base+0x64>
   1880c:	ldr	r1, [ip, #12]
   18810:	uxtah	r0, r1, r0
   18814:	ldrh	r1, [r0]
   18818:	cmp	r1, #0
   1881c:	beq	1884c <flatcc_verify_vector_field@@Base+0x64>
   18820:	ldrh	r2, [ip, #20]
   18824:	add	r4, r1, #4
   18828:	mov	r0, #13
   1882c:	cmp	r4, r2
   18830:	bhi	18848 <flatcc_verify_vector_field@@Base+0x60>
   18834:	ldr	r0, [ip, #16]
   18838:	add	r2, r0, r1
   1883c:	mov	r0, #12
   18840:	tst	r2, #3
   18844:	beq	1885c <flatcc_verify_vector_field@@Base+0x74>
   18848:	pop	{r4, sl, fp, pc}
   1884c:	cmp	r2, #0
   18850:	movwne	r2, #1
   18854:	lsl	r0, r2, #2
   18858:	pop	{r4, sl, fp, pc}
   1885c:	cmp	r2, #0
   18860:	beq	188d8 <flatcc_verify_vector_field@@Base+0xf0>
   18864:	ldr	lr, [ip]
   18868:	ldr	r4, [fp, #8]
   1886c:	ldr	r0, [lr, r2]
   18870:	cmp	r4, #4
   18874:	movls	r4, #4
   18878:	add	r1, r0, r2
   1887c:	mov	r0, #16
   18880:	cmp	r1, r2
   18884:	bls	18848 <flatcc_verify_vector_field@@Base+0x60>
   18888:	ldr	ip, [ip, #4]
   1888c:	add	r2, r1, #4
   18890:	cmp	r2, ip
   18894:	bhi	18848 <flatcc_verify_vector_field@@Base+0x60>
   18898:	sub	r4, r4, #1
   1889c:	orr	r4, r4, #3
   188a0:	tst	r2, r4
   188a4:	bne	18848 <flatcc_verify_vector_field@@Base+0x60>
   188a8:	ldr	r4, [fp, #12]
   188ac:	ldr	r2, [lr, r1]
   188b0:	mov	r0, #25
   188b4:	cmp	r2, r4
   188b8:	pophi	{r4, sl, fp, pc}
   188bc:	mul	r2, r2, r3
   188c0:	sub	r0, ip, r1
   188c4:	sub	r1, r0, #4
   188c8:	mov	r0, #0
   188cc:	cmp	r1, r2
   188d0:	movwcc	r0, #26
   188d4:	pop	{r4, sl, fp, pc}
   188d8:	mov	r0, #0
   188dc:	pop	{r4, sl, fp, pc}

000188e0 <flatcc_verify_string_vector_field@@Base>:
   188e0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   188e4:	add	fp, sp, #24
   188e8:	mov	r3, r0
   188ec:	mov	r0, #4
   188f0:	add	r0, r0, r1, lsl #1
   188f4:	ldrh	r7, [r3, #22]
   188f8:	uxth	r1, r0
   188fc:	cmp	r1, r7
   18900:	bcs	18944 <flatcc_verify_string_vector_field@@Base+0x64>
   18904:	ldr	r1, [r3, #12]
   18908:	uxtah	r0, r1, r0
   1890c:	ldrh	r1, [r0]
   18910:	cmp	r1, #0
   18914:	beq	18944 <flatcc_verify_string_vector_field@@Base+0x64>
   18918:	ldrh	r2, [r3, #20]
   1891c:	add	r7, r1, #4
   18920:	mov	r0, #13
   18924:	cmp	r7, r2
   18928:	bhi	18940 <flatcc_verify_string_vector_field@@Base+0x60>
   1892c:	ldr	r4, [r3, #16]
   18930:	mov	r0, #12
   18934:	add	r6, r4, r1
   18938:	tst	r6, #3
   1893c:	beq	18954 <flatcc_verify_string_vector_field@@Base+0x74>
   18940:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18944:	cmp	r2, #0
   18948:	movwne	r2, #1
   1894c:	lsl	r0, r2, #2
   18950:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18954:	cmp	r6, #0
   18958:	beq	18a50 <flatcc_verify_string_vector_field@@Base+0x170>
   1895c:	ldr	r5, [r3]
   18960:	mov	r0, #16
   18964:	ldr	r7, [r5, r6]
   18968:	add	r2, r7, r6
   1896c:	cmp	r2, r6
   18970:	bls	18940 <flatcc_verify_string_vector_field@@Base+0x60>
   18974:	ldr	ip, [r3, #4]
   18978:	add	r3, r2, #4
   1897c:	cmp	r3, ip
   18980:	bhi	18940 <flatcc_verify_string_vector_field@@Base+0x60>
   18984:	ands	r3, r3, #3
   18988:	bne	18940 <flatcc_verify_string_vector_field@@Base+0x60>
   1898c:	ldr	lr, [r5, r2]
   18990:	mov	r0, #25
   18994:	cmn	lr, #-1073741823	; 0xc0000001
   18998:	bhi	18940 <flatcc_verify_string_vector_field@@Base+0x60>
   1899c:	sub	r0, ip, r2
   189a0:	sub	r2, r0, #4
   189a4:	mov	r0, #26
   189a8:	cmp	r2, lr, lsl #2
   189ac:	bcc	18940 <flatcc_verify_string_vector_field@@Base+0x60>
   189b0:	cmp	lr, #0
   189b4:	beq	18a50 <flatcc_verify_string_vector_field@@Base+0x170>
   189b8:	sub	r0, ip, r7
   189bc:	add	r8, r7, r4
   189c0:	sub	r0, r0, r4
   189c4:	add	r3, r5, r8
   189c8:	sub	r0, r0, r1
   189cc:	sub	r4, r0, #8
   189d0:	add	r0, r3, r1
   189d4:	add	r7, r1, r8
   189d8:	ldr	r5, [r0, #4]
   189dc:	mov	r0, #17
   189e0:	add	r6, r7, r5
   189e4:	add	r2, r6, #4
   189e8:	tst	r2, #3
   189ec:	bne	18940 <flatcc_verify_string_vector_field@@Base+0x60>
   189f0:	add	r7, r7, #4
   189f4:	cmp	r2, r7
   189f8:	bls	18940 <flatcc_verify_string_vector_field@@Base+0x60>
   189fc:	add	r2, r6, #8
   18a00:	cmp	ip, r2
   18a04:	bcc	18940 <flatcc_verify_string_vector_field@@Base+0x60>
   18a08:	add	r0, r1, r5
   18a0c:	sub	r2, r4, r5
   18a10:	add	r0, r3, r0
   18a14:	ldr	r0, [r0, #4]
   18a18:	add	r6, r0, #1
   18a1c:	cmp	r2, r6
   18a20:	bcc	18a58 <flatcc_verify_string_vector_field@@Base+0x178>
   18a24:	add	r0, r5, r0
   18a28:	add	r0, r1, r0
   18a2c:	add	r0, r3, r0
   18a30:	ldrb	r0, [r0, #8]
   18a34:	cmp	r0, #0
   18a38:	bne	18a60 <flatcc_verify_string_vector_field@@Base+0x180>
   18a3c:	subs	lr, lr, #1
   18a40:	sub	r4, r4, #4
   18a44:	add	r8, r8, #4
   18a48:	add	r3, r3, #4
   18a4c:	bne	189d0 <flatcc_verify_string_vector_field@@Base+0xf0>
   18a50:	mov	r0, #0
   18a54:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18a58:	mov	r0, #8
   18a5c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18a60:	mov	r0, #7
   18a64:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00018a68 <flatcc_verify_table_field@@Base>:
   18a68:	push	{r4, r5, r6, sl, fp, lr}
   18a6c:	add	fp, sp, #16
   18a70:	sub	sp, sp, #24
   18a74:	mov	ip, r0
   18a78:	mov	r0, #4
   18a7c:	add	r0, r0, r1, lsl #1
   18a80:	ldrh	r6, [ip, #22]
   18a84:	uxth	r1, r0
   18a88:	cmp	r1, r6
   18a8c:	bcs	18ad4 <flatcc_verify_table_field@@Base+0x6c>
   18a90:	ldr	r1, [ip, #12]
   18a94:	uxtah	r0, r1, r0
   18a98:	ldrh	r1, [r0]
   18a9c:	cmp	r1, #0
   18aa0:	beq	18ad4 <flatcc_verify_table_field@@Base+0x6c>
   18aa4:	ldrh	r2, [ip, #20]
   18aa8:	add	r6, r1, #4
   18aac:	mov	r0, #13
   18ab0:	cmp	r6, r2
   18ab4:	bhi	18acc <flatcc_verify_table_field@@Base+0x64>
   18ab8:	ldr	r0, [ip, #16]
   18abc:	add	r4, r0, r1
   18ac0:	mov	r0, #12
   18ac4:	tst	r4, #3
   18ac8:	beq	18ae8 <flatcc_verify_table_field@@Base+0x80>
   18acc:	sub	sp, fp, #16
   18ad0:	pop	{r4, r5, r6, sl, fp, pc}
   18ad4:	cmp	r2, #0
   18ad8:	movwne	r2, #1
   18adc:	lsl	r0, r2, #2
   18ae0:	sub	sp, fp, #16
   18ae4:	pop	{r4, r5, r6, sl, fp, pc}
   18ae8:	cmp	r4, #0
   18aec:	beq	18bb8 <flatcc_verify_table_field@@Base+0x150>
   18af0:	ldm	ip, {r1, lr}
   18af4:	ldr	r2, [ip, #8]
   18af8:	ldr	r0, [r1, r4]
   18afc:	subs	r2, r2, #1
   18b00:	str	r2, [sp, #8]
   18b04:	beq	18bc4 <flatcc_verify_table_field@@Base+0x15c>
   18b08:	add	r2, r0, r4
   18b0c:	mov	r0, #15
   18b10:	tst	r2, #3
   18b14:	bne	18acc <flatcc_verify_table_field@@Base+0x64>
   18b18:	cmp	r2, r4
   18b1c:	bls	18acc <flatcc_verify_table_field@@Base+0x64>
   18b20:	add	r6, r2, #4
   18b24:	cmp	r6, lr
   18b28:	bhi	18acc <flatcc_verify_table_field@@Base+0x64>
   18b2c:	str	r2, [sp, #16]
   18b30:	ldr	r0, [r1, r2]
   18b34:	sub	r5, r2, r0
   18b38:	mov	r0, #29
   18b3c:	tst	r5, #-2147483647	; 0x80000001
   18b40:	bne	18acc <flatcc_verify_table_field@@Base+0x64>
   18b44:	add	r4, r5, #2
   18b48:	mov	r0, #27
   18b4c:	cmp	r4, lr
   18b50:	bhi	18acc <flatcc_verify_table_field@@Base+0x64>
   18b54:	mov	ip, r1
   18b58:	mov	r0, #30
   18b5c:	ldrh	r6, [ip, r5]!
   18b60:	tst	r6, #1
   18b64:	strh	r6, [sp, #22]
   18b68:	bne	18acc <flatcc_verify_table_field@@Base+0x64>
   18b6c:	add	r5, r5, r6
   18b70:	cmp	r5, lr
   18b74:	bhi	18acc <flatcc_verify_table_field@@Base+0x64>
   18b78:	mov	r0, #28
   18b7c:	cmp	r6, #4
   18b80:	bcc	18acc <flatcc_verify_table_field@@Base+0x64>
   18b84:	add	r0, r1, r4
   18b88:	sub	r2, lr, r2
   18b8c:	ldrh	r4, [r0]
   18b90:	mov	r0, #20
   18b94:	cmp	r2, r4
   18b98:	strh	r4, [sp, #20]
   18b9c:	bcc	18acc <flatcc_verify_table_field@@Base+0x64>
   18ba0:	mov	r0, sp
   18ba4:	stm	sp, {r1, lr}
   18ba8:	str	ip, [sp, #12]
   18bac:	blx	r3
   18bb0:	sub	sp, fp, #16
   18bb4:	pop	{r4, r5, r6, sl, fp, pc}
   18bb8:	mov	r0, #0
   18bbc:	sub	sp, fp, #16
   18bc0:	pop	{r4, r5, r6, sl, fp, pc}
   18bc4:	mov	r0, #3
   18bc8:	sub	sp, fp, #16
   18bcc:	pop	{r4, r5, r6, sl, fp, pc}

00018bd0 <flatcc_verify_table_vector_field@@Base>:
   18bd0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18bd4:	add	fp, sp, #28
   18bd8:	sub	sp, sp, #28
   18bdc:	mov	r4, r3
   18be0:	mov	r3, r0
   18be4:	mov	r0, #4
   18be8:	add	r0, r0, r1, lsl #1
   18bec:	ldrh	r7, [r3, #22]
   18bf0:	uxth	r1, r0
   18bf4:	cmp	r1, r7
   18bf8:	bcs	18c40 <flatcc_verify_table_vector_field@@Base+0x70>
   18bfc:	ldr	r1, [r3, #12]
   18c00:	uxtah	r0, r1, r0
   18c04:	ldrh	r1, [r0]
   18c08:	cmp	r1, #0
   18c0c:	beq	18c40 <flatcc_verify_table_vector_field@@Base+0x70>
   18c10:	ldrh	r2, [r3, #20]
   18c14:	add	r7, r1, #4
   18c18:	mov	r0, #13
   18c1c:	cmp	r7, r2
   18c20:	bhi	18c38 <flatcc_verify_table_vector_field@@Base+0x68>
   18c24:	ldr	r2, [r3, #16]
   18c28:	mov	r0, #12
   18c2c:	add	r6, r2, r1
   18c30:	tst	r6, #3
   18c34:	beq	18c54 <flatcc_verify_table_vector_field@@Base+0x84>
   18c38:	sub	sp, fp, #28
   18c3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18c40:	cmp	r2, #0
   18c44:	movwne	r2, #1
   18c48:	lsl	r0, r2, #2
   18c4c:	sub	sp, fp, #28
   18c50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18c54:	cmp	r6, #0
   18c58:	beq	18db4 <flatcc_verify_table_vector_field@@Base+0x1e4>
   18c5c:	ldr	r7, [r3, #8]
   18c60:	cmp	r7, #1
   18c64:	blt	18e80 <flatcc_verify_table_vector_field@@Base+0x2b0>
   18c68:	ldr	r8, [r3]
   18c6c:	mov	r0, #16
   18c70:	ldr	ip, [r8, r6]
   18c74:	add	r5, ip, r6
   18c78:	cmp	r5, r6
   18c7c:	bls	18c38 <flatcc_verify_table_vector_field@@Base+0x68>
   18c80:	ldr	r6, [r3, #4]
   18c84:	add	r9, r5, #4
   18c88:	cmp	r9, r6
   18c8c:	bhi	18c38 <flatcc_verify_table_vector_field@@Base+0x68>
   18c90:	ands	r3, r9, #3
   18c94:	bne	18c38 <flatcc_verify_table_vector_field@@Base+0x68>
   18c98:	ldr	sl, [r8, r5]
   18c9c:	mov	r0, #25
   18ca0:	cmn	sl, #-1073741823	; 0xc0000001
   18ca4:	bhi	18c38 <flatcc_verify_table_vector_field@@Base+0x68>
   18ca8:	sub	r0, r6, r5
   18cac:	sub	r3, r0, #4
   18cb0:	mov	r0, #26
   18cb4:	cmp	r3, sl, lsl #2
   18cb8:	bcc	18c38 <flatcc_verify_table_vector_field@@Base+0x68>
   18cbc:	cmp	sl, #0
   18cc0:	beq	18db4 <flatcc_verify_table_vector_field@@Base+0x1e4>
   18cc4:	subs	r0, r7, #2
   18cc8:	str	r0, [sp]
   18ccc:	beq	18e78 <flatcc_verify_table_vector_field@@Base+0x2a8>
   18cd0:	sub	r0, r6, ip
   18cd4:	sub	r0, r0, r2
   18cd8:	sub	r0, r0, r1
   18cdc:	sub	r7, r0, #4
   18ce0:	ldr	r0, [r8, r9]
   18ce4:	ldr	r1, [sp]
   18ce8:	add	lr, r9, r0
   18cec:	str	r1, [sp, #12]
   18cf0:	add	ip, lr, #4
   18cf4:	tst	lr, #3
   18cf8:	bne	18dc0 <flatcc_verify_table_vector_field@@Base+0x1f0>
   18cfc:	cmp	lr, r9
   18d00:	bls	18dc0 <flatcc_verify_table_vector_field@@Base+0x1f0>
   18d04:	cmp	ip, r6
   18d08:	bhi	18dc0 <flatcc_verify_table_vector_field@@Base+0x1f0>
   18d0c:	str	lr, [sp, #20]
   18d10:	add	r3, r8, r0
   18d14:	ldr	r1, [r3, r9]
   18d18:	sub	r5, r0, r1
   18d1c:	add	r3, r9, r5
   18d20:	tst	r3, #-2147483647	; 0x80000001
   18d24:	bne	18dc0 <flatcc_verify_table_vector_field@@Base+0x1f0>
   18d28:	add	r2, r3, #2
   18d2c:	cmp	r2, r6
   18d30:	bhi	18dc0 <flatcc_verify_table_vector_field@@Base+0x1f0>
   18d34:	add	r2, r8, r5
   18d38:	add	r2, r2, r9
   18d3c:	ldrh	r5, [r2]
   18d40:	cmp	r5, #4
   18d44:	strh	r5, [sp, #26]
   18d48:	bcc	18dc0 <flatcc_verify_table_vector_field@@Base+0x1f0>
   18d4c:	ands	r2, r5, #1
   18d50:	bne	18dc0 <flatcc_verify_table_vector_field@@Base+0x1f0>
   18d54:	add	r2, r0, r5
   18d58:	sub	r2, r2, r1
   18d5c:	add	r2, r9, r2
   18d60:	cmp	r2, r6
   18d64:	bhi	18dc0 <flatcc_verify_table_vector_field@@Base+0x1f0>
   18d68:	add	r3, r8, r3
   18d6c:	sub	r0, r7, r0
   18d70:	ldrh	r2, [r3, #2]
   18d74:	cmp	r0, r2
   18d78:	strh	r2, [sp, #24]
   18d7c:	bcc	18dc0 <flatcc_verify_table_vector_field@@Base+0x1f0>
   18d80:	add	r0, sp, #4
   18d84:	str	r6, [sp, #8]
   18d88:	str	r8, [sp, #4]
   18d8c:	mov	r5, r6
   18d90:	str	r3, [sp, #16]
   18d94:	blx	r4
   18d98:	cmp	r0, #0
   18d9c:	bne	18e8c <flatcc_verify_table_vector_field@@Base+0x2bc>
   18da0:	subs	sl, sl, #1
   18da4:	sub	r7, r7, #4
   18da8:	add	r9, r9, #4
   18dac:	mov	r6, r5
   18db0:	bne	18ce0 <flatcc_verify_table_vector_field@@Base+0x110>
   18db4:	mov	r0, #0
   18db8:	sub	sp, fp, #28
   18dbc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18dc0:	ldr	r0, [sp]
   18dc4:	str	r0, [sp, #12]
   18dc8:	mov	r0, #15
   18dcc:	tst	lr, #3
   18dd0:	bne	18c38 <flatcc_verify_table_vector_field@@Base+0x68>
   18dd4:	cmp	lr, r9
   18dd8:	bls	18c38 <flatcc_verify_table_vector_field@@Base+0x68>
   18ddc:	cmp	ip, r6
   18de0:	bhi	18c38 <flatcc_verify_table_vector_field@@Base+0x68>
   18de4:	str	lr, [sp, #20]
   18de8:	ldr	r0, [r8, lr]
   18dec:	sub	r7, lr, r0
   18df0:	mov	r0, #29
   18df4:	tst	r7, #-2147483647	; 0x80000001
   18df8:	bne	18c38 <flatcc_verify_table_vector_field@@Base+0x68>
   18dfc:	add	r3, r7, #2
   18e00:	mov	r0, #27
   18e04:	cmp	r3, r6
   18e08:	bhi	18c38 <flatcc_verify_table_vector_field@@Base+0x68>
   18e0c:	mov	r2, r8
   18e10:	mov	r5, r6
   18e14:	mov	r0, #30
   18e18:	ldrh	r6, [r2, r7]!
   18e1c:	tst	r6, #1
   18e20:	strh	r6, [sp, #26]
   18e24:	bne	18c38 <flatcc_verify_table_vector_field@@Base+0x68>
   18e28:	add	r7, r7, r6
   18e2c:	cmp	r7, r5
   18e30:	bhi	18c38 <flatcc_verify_table_vector_field@@Base+0x68>
   18e34:	mov	r0, #28
   18e38:	cmp	r6, #4
   18e3c:	bcc	18c38 <flatcc_verify_table_vector_field@@Base+0x68>
   18e40:	add	r0, r8, r3
   18e44:	sub	r1, r5, lr
   18e48:	ldrh	r3, [r0]
   18e4c:	mov	r0, #20
   18e50:	cmp	r1, r3
   18e54:	strh	r3, [sp, #24]
   18e58:	bcc	18c38 <flatcc_verify_table_vector_field@@Base+0x68>
   18e5c:	add	r0, sp, #4
   18e60:	str	r5, [sp, #8]
   18e64:	str	r8, [sp, #4]
   18e68:	str	r2, [sp, #16]
   18e6c:	blx	r4
   18e70:	sub	sp, fp, #28
   18e74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18e78:	mov	r0, #0
   18e7c:	str	r0, [sp, #12]
   18e80:	mov	r0, #3
   18e84:	sub	sp, fp, #28
   18e88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18e8c:	ldr	r0, [r8, r9]
   18e90:	ldr	r1, [sp]
   18e94:	mov	r6, r5
   18e98:	add	lr, r0, r9
   18e9c:	str	r1, [sp, #12]
   18ea0:	add	ip, lr, #4
   18ea4:	mov	r0, #15
   18ea8:	tst	lr, #3
   18eac:	beq	18dd4 <flatcc_verify_table_vector_field@@Base+0x204>
   18eb0:	b	18c38 <flatcc_verify_table_vector_field@@Base+0x68>

00018eb4 <flatcc_verify_union_table@@Base>:
   18eb4:	push	{r4, r5, r6, sl, fp, lr}
   18eb8:	add	fp, sp, #16
   18ebc:	sub	sp, sp, #24
   18ec0:	ldr	r5, [r0, #16]
   18ec4:	ldr	r2, [r0, #20]
   18ec8:	ldr	ip, [r0]
   18ecc:	ldr	r3, [r0, #4]
   18ed0:	ldr	r0, [r0, #8]
   18ed4:	subs	r0, r0, #1
   18ed8:	str	r0, [sp, #8]
   18edc:	beq	18f94 <flatcc_verify_union_table@@Base+0xe0>
   18ee0:	add	r2, r2, r5
   18ee4:	mov	r0, #15
   18ee8:	tst	r2, #3
   18eec:	bne	18f8c <flatcc_verify_union_table@@Base+0xd8>
   18ef0:	cmp	r2, r5
   18ef4:	bls	18f8c <flatcc_verify_union_table@@Base+0xd8>
   18ef8:	add	r6, r2, #4
   18efc:	cmp	r6, r3
   18f00:	bhi	18f8c <flatcc_verify_union_table@@Base+0xd8>
   18f04:	str	r2, [sp, #16]
   18f08:	ldr	r0, [ip, r2]
   18f0c:	sub	r5, r2, r0
   18f10:	mov	r0, #29
   18f14:	tst	r5, #-2147483647	; 0x80000001
   18f18:	bne	18f8c <flatcc_verify_union_table@@Base+0xd8>
   18f1c:	add	r4, r5, #2
   18f20:	mov	r0, #27
   18f24:	cmp	r4, r3
   18f28:	bhi	18f8c <flatcc_verify_union_table@@Base+0xd8>
   18f2c:	mov	lr, ip
   18f30:	mov	r0, #30
   18f34:	ldrh	r6, [lr, r5]!
   18f38:	tst	r6, #1
   18f3c:	strh	r6, [sp, #22]
   18f40:	bne	18f8c <flatcc_verify_union_table@@Base+0xd8>
   18f44:	add	r5, r5, r6
   18f48:	cmp	r5, r3
   18f4c:	bhi	18f8c <flatcc_verify_union_table@@Base+0xd8>
   18f50:	mov	r0, #28
   18f54:	cmp	r6, #4
   18f58:	bcc	18f8c <flatcc_verify_union_table@@Base+0xd8>
   18f5c:	add	r0, ip, r4
   18f60:	sub	r2, r3, r2
   18f64:	ldrh	r4, [r0]
   18f68:	mov	r0, #20
   18f6c:	cmp	r2, r4
   18f70:	strh	r4, [sp, #20]
   18f74:	bcc	18f8c <flatcc_verify_union_table@@Base+0xd8>
   18f78:	mov	r0, sp
   18f7c:	str	r3, [sp, #4]
   18f80:	str	ip, [sp]
   18f84:	str	lr, [sp, #12]
   18f88:	blx	r1
   18f8c:	sub	sp, fp, #16
   18f90:	pop	{r4, r5, r6, sl, fp, pc}
   18f94:	mov	r0, #3
   18f98:	sub	sp, fp, #16
   18f9c:	pop	{r4, r5, r6, sl, fp, pc}

00018fa0 <flatcc_verify_union_struct@@Base>:
   18fa0:	push	{fp, lr}
   18fa4:	mov	fp, sp
   18fa8:	ldr	lr, [r0, #20]
   18fac:	mov	r3, r0
   18fb0:	mov	r0, #18
   18fb4:	cmp	lr, #0
   18fb8:	beq	18ff4 <flatcc_verify_union_struct@@Base+0x54>
   18fbc:	ldr	ip, [r3, #4]
   18fc0:	ldr	r3, [r3, #16]
   18fc4:	add	r3, r3, lr
   18fc8:	cmp	r3, ip
   18fcc:	bhi	18ff4 <flatcc_verify_union_struct@@Base+0x54>
   18fd0:	adds	r1, r3, r1
   18fd4:	mov	r0, #10
   18fd8:	bcs	18ff4 <flatcc_verify_union_struct@@Base+0x54>
   18fdc:	mov	r0, #9
   18fe0:	cmp	r1, ip
   18fe4:	pophi	{fp, pc}
   18fe8:	sub	r0, r2, #1
   18fec:	ands	r0, r3, r0
   18ff0:	movwne	r0, #11
   18ff4:	pop	{fp, pc}

00018ff8 <flatcc_verify_union_string@@Base>:
   18ff8:	push	{fp, lr}
   18ffc:	mov	fp, sp
   19000:	mov	r1, r0
   19004:	ldr	r3, [r0, #16]
   19008:	ldr	r0, [r0, #20]
   1900c:	add	r2, r0, r3
   19010:	mov	r0, #17
   19014:	tst	r2, #3
   19018:	bne	19060 <flatcc_verify_union_string@@Base+0x68>
   1901c:	cmp	r2, r3
   19020:	bls	19060 <flatcc_verify_union_string@@Base+0x68>
   19024:	ldr	r3, [r1, #4]
   19028:	add	ip, r2, #4
   1902c:	cmp	r3, ip
   19030:	bcc	19060 <flatcc_verify_union_string@@Base+0x68>
   19034:	ldr	r1, [r1]
   19038:	sub	lr, r3, ip
   1903c:	mov	r0, #8
   19040:	ldr	r2, [r1, r2]
   19044:	add	r3, r2, #1
   19048:	cmp	lr, r3
   1904c:	popcc	{fp, pc}
   19050:	add	r0, r1, ip
   19054:	ldrb	r0, [r0, r2]
   19058:	cmp	r0, #0
   1905c:	movwne	r0, #7
   19060:	pop	{fp, pc}

00019064 <flatcc_verify_buffer_header@@Base>:
   19064:	push	{r4, sl, fp, lr}
   19068:	add	fp, sp, #8
   1906c:	sub	sp, sp, #8
   19070:	mov	r4, r0
   19074:	mov	r0, #5
   19078:	tst	r4, #3
   1907c:	bne	190d0 <flatcc_verify_buffer_header@@Base+0x6c>
   19080:	mov	r0, #6
   19084:	cmn	r1, #9
   19088:	bhi	190d0 <flatcc_verify_buffer_header@@Base+0x6c>
   1908c:	mov	r0, #1
   19090:	cmp	r1, #8
   19094:	bcc	190d0 <flatcc_verify_buffer_header@@Base+0x6c>
   19098:	cmp	r2, #0
   1909c:	beq	190d8 <flatcc_verify_buffer_header@@Base+0x74>
   190a0:	mov	r0, #0
   190a4:	mov	r1, r2
   190a8:	mov	r2, #4
   190ac:	str	r0, [sp, #4]
   190b0:	add	r0, sp, #4
   190b4:	bl	12784 <strncpy@plt>
   190b8:	ldr	r1, [sp, #4]
   190bc:	cmp	r1, #0
   190c0:	ldrne	r2, [r4, #4]
   190c4:	movne	r0, #2
   190c8:	cmpne	r2, r1
   190cc:	moveq	r0, #0
   190d0:	sub	sp, fp, #8
   190d4:	pop	{r4, sl, fp, pc}
   190d8:	mov	r0, #0
   190dc:	sub	sp, fp, #8
   190e0:	pop	{r4, sl, fp, pc}

000190e4 <flatcc_verify_typed_buffer_header@@Base>:
   190e4:	mov	r3, r0
   190e8:	mov	r0, #5
   190ec:	tst	r3, #3
   190f0:	bne	19124 <flatcc_verify_typed_buffer_header@@Base+0x40>
   190f4:	mov	r0, #6
   190f8:	cmn	r1, #9
   190fc:	bhi	19124 <flatcc_verify_typed_buffer_header@@Base+0x40>
   19100:	mov	r0, #1
   19104:	cmp	r1, #8
   19108:	bxcc	lr
   1910c:	cmp	r2, #0
   19110:	beq	19128 <flatcc_verify_typed_buffer_header@@Base+0x44>
   19114:	ldr	r1, [r3, #4]
   19118:	mov	r0, #2
   1911c:	cmp	r1, r2
   19120:	moveq	r0, #0
   19124:	bx	lr
   19128:	mov	r0, #0
   1912c:	bx	lr

00019130 <flatcc_verify_struct_as_root@@Base>:
   19130:	push	{r4, r5, r6, r7, fp, lr}
   19134:	add	fp, sp, #16
   19138:	sub	sp, sp, #8
   1913c:	mov	r5, r0
   19140:	mov	r0, #5
   19144:	tst	r5, #3
   19148:	bne	191e0 <flatcc_verify_struct_as_root@@Base+0xb0>
   1914c:	mov	r4, r1
   19150:	mov	r0, #6
   19154:	cmn	r1, #9
   19158:	bhi	191e0 <flatcc_verify_struct_as_root@@Base+0xb0>
   1915c:	mov	r0, #1
   19160:	cmp	r4, #8
   19164:	bcc	191e0 <flatcc_verify_struct_as_root@@Base+0xb0>
   19168:	mov	r6, r3
   1916c:	mov	r7, r2
   19170:	cmp	r2, #0
   19174:	beq	191a4 <flatcc_verify_struct_as_root@@Base+0x74>
   19178:	mov	r0, #0
   1917c:	mov	r1, r7
   19180:	mov	r2, #4
   19184:	str	r0, [sp]
   19188:	mov	r0, sp
   1918c:	bl	12784 <strncpy@plt>
   19190:	ldr	r0, [sp]
   19194:	cmp	r0, #0
   19198:	ldrne	r1, [r5, #4]
   1919c:	cmpne	r1, r0
   191a0:	bne	191e8 <flatcc_verify_struct_as_root@@Base+0xb8>
   191a4:	ldr	r1, [r5]
   191a8:	mov	r0, #18
   191ac:	sub	r2, r1, #1
   191b0:	cmp	r2, r4
   191b4:	bcs	191e0 <flatcc_verify_struct_as_root@@Base+0xb0>
   191b8:	adds	r2, r1, r6
   191bc:	mov	r0, #10
   191c0:	bcs	191e0 <flatcc_verify_struct_as_root@@Base+0xb0>
   191c4:	mov	r0, #9
   191c8:	cmp	r2, r4
   191cc:	bhi	191e0 <flatcc_verify_struct_as_root@@Base+0xb0>
   191d0:	ldr	r0, [fp, #8]
   191d4:	sub	r0, r0, #1
   191d8:	ands	r0, r1, r0
   191dc:	movwne	r0, #11
   191e0:	sub	sp, fp, #16
   191e4:	pop	{r4, r5, r6, r7, fp, pc}
   191e8:	mov	r0, #0
   191ec:	mov	r1, r7
   191f0:	mov	r2, #4
   191f4:	str	r0, [sp, #4]
   191f8:	add	r0, sp, #4
   191fc:	bl	12784 <strncpy@plt>
   19200:	ldr	r0, [sp, #4]
   19204:	ldr	r1, [r5, #4]
   19208:	subs	r1, r1, r0
   1920c:	movwne	r1, #1
   19210:	cmp	r0, #0
   19214:	lslne	r0, r1, #1
   19218:	sub	sp, fp, #16
   1921c:	pop	{r4, r5, r6, r7, fp, pc}

00019220 <flatcc_verify_struct_as_typed_root@@Base>:
   19220:	push	{fp, lr}
   19224:	mov	fp, sp
   19228:	mov	ip, r0
   1922c:	mov	r0, #5
   19230:	tst	ip, #3
   19234:	bne	192a4 <flatcc_verify_struct_as_typed_root@@Base+0x84>
   19238:	mov	r0, #6
   1923c:	cmn	r1, #9
   19240:	bhi	192a4 <flatcc_verify_struct_as_typed_root@@Base+0x84>
   19244:	mov	r0, #1
   19248:	cmp	r1, #8
   1924c:	bcc	192a4 <flatcc_verify_struct_as_typed_root@@Base+0x84>
   19250:	cmp	r2, #0
   19254:	beq	19268 <flatcc_verify_struct_as_typed_root@@Base+0x48>
   19258:	ldr	lr, [ip, #4]
   1925c:	mov	r0, #2
   19260:	cmp	lr, r2
   19264:	bne	192a4 <flatcc_verify_struct_as_typed_root@@Base+0x84>
   19268:	ldr	ip, [ip]
   1926c:	mov	r0, #18
   19270:	sub	r2, ip, #1
   19274:	cmp	r2, r1
   19278:	bcs	192a4 <flatcc_verify_struct_as_typed_root@@Base+0x84>
   1927c:	adds	r3, ip, r3
   19280:	mov	r0, #10
   19284:	bcs	192a4 <flatcc_verify_struct_as_typed_root@@Base+0x84>
   19288:	mov	r0, #9
   1928c:	cmp	r3, r1
   19290:	pophi	{fp, pc}
   19294:	ldr	r0, [fp, #8]
   19298:	sub	r0, r0, #1
   1929c:	ands	r0, ip, r0
   192a0:	movwne	r0, #11
   192a4:	pop	{fp, pc}

000192a8 <flatcc_verify_table_as_root@@Base>:
   192a8:	push	{r4, r5, r6, r7, fp, lr}
   192ac:	add	fp, sp, #16
   192b0:	sub	sp, sp, #24
   192b4:	mov	r4, r0
   192b8:	mov	r0, #5
   192bc:	tst	r4, #3
   192c0:	bne	193cc <flatcc_verify_table_as_root@@Base+0x124>
   192c4:	mov	r6, r1
   192c8:	mov	r0, #6
   192cc:	cmn	r1, #9
   192d0:	bhi	193cc <flatcc_verify_table_as_root@@Base+0x124>
   192d4:	mov	r0, #1
   192d8:	cmp	r6, #8
   192dc:	bcc	193cc <flatcc_verify_table_as_root@@Base+0x124>
   192e0:	mov	r5, r3
   192e4:	mov	r7, r2
   192e8:	cmp	r2, #0
   192ec:	beq	1931c <flatcc_verify_table_as_root@@Base+0x74>
   192f0:	mov	r0, #0
   192f4:	mov	r1, r7
   192f8:	mov	r2, #4
   192fc:	str	r0, [sp]
   19300:	mov	r0, sp
   19304:	bl	12784 <strncpy@plt>
   19308:	ldr	r0, [sp]
   1930c:	cmp	r0, #0
   19310:	ldrne	r1, [r4, #4]
   19314:	cmpne	r1, r0
   19318:	bne	193d4 <flatcc_verify_table_as_root@@Base+0x12c>
   1931c:	ldr	r1, [r4]
   19320:	mov	r0, #99	; 0x63
   19324:	str	r0, [sp, #8]
   19328:	mov	r0, #15
   1932c:	tst	r1, #3
   19330:	bne	193cc <flatcc_verify_table_as_root@@Base+0x124>
   19334:	cmp	r1, #0
   19338:	beq	193cc <flatcc_verify_table_as_root@@Base+0x124>
   1933c:	add	r2, r1, #4
   19340:	cmp	r2, r6
   19344:	bhi	193cc <flatcc_verify_table_as_root@@Base+0x124>
   19348:	str	r1, [sp, #16]
   1934c:	ldr	r0, [r4, r1]
   19350:	sub	r7, r1, r0
   19354:	mov	r0, #29
   19358:	tst	r7, #-2147483647	; 0x80000001
   1935c:	bne	193cc <flatcc_verify_table_as_root@@Base+0x124>
   19360:	add	r3, r7, #2
   19364:	mov	r0, #27
   19368:	cmp	r3, r6
   1936c:	bhi	193cc <flatcc_verify_table_as_root@@Base+0x124>
   19370:	mov	ip, r4
   19374:	mov	r0, #30
   19378:	ldrh	r2, [ip, r7]!
   1937c:	tst	r2, #1
   19380:	strh	r2, [sp, #22]
   19384:	bne	193cc <flatcc_verify_table_as_root@@Base+0x124>
   19388:	add	r7, r7, r2
   1938c:	cmp	r7, r6
   19390:	bhi	193cc <flatcc_verify_table_as_root@@Base+0x124>
   19394:	mov	r0, #28
   19398:	cmp	r2, #4
   1939c:	bcc	193cc <flatcc_verify_table_as_root@@Base+0x124>
   193a0:	add	r0, r4, r3
   193a4:	sub	r1, r6, r1
   193a8:	ldrh	r2, [r0]
   193ac:	mov	r0, #20
   193b0:	cmp	r1, r2
   193b4:	strh	r2, [sp, #20]
   193b8:	bcc	193cc <flatcc_verify_table_as_root@@Base+0x124>
   193bc:	mov	r0, sp
   193c0:	stm	sp, {r4, r6}
   193c4:	str	ip, [sp, #12]
   193c8:	blx	r5
   193cc:	sub	sp, fp, #16
   193d0:	pop	{r4, r5, r6, r7, fp, pc}
   193d4:	mov	r0, #0
   193d8:	mov	r1, r7
   193dc:	mov	r2, #4
   193e0:	str	r0, [sp]
   193e4:	mov	r0, sp
   193e8:	bl	12784 <strncpy@plt>
   193ec:	ldr	r0, [sp]
   193f0:	ldr	r1, [r4, #4]
   193f4:	subs	r1, r1, r0
   193f8:	movwne	r1, #1
   193fc:	cmp	r0, #0
   19400:	lslne	r0, r1, #1
   19404:	sub	sp, fp, #16
   19408:	pop	{r4, r5, r6, r7, fp, pc}

0001940c <flatcc_verify_table_as_typed_root@@Base>:
   1940c:	push	{r4, r5, r6, sl, fp, lr}
   19410:	add	fp, sp, #16
   19414:	sub	sp, sp, #24
   19418:	mov	ip, #5
   1941c:	tst	r0, #3
   19420:	bne	19508 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   19424:	mov	ip, #6
   19428:	cmn	r1, #9
   1942c:	bhi	19508 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   19430:	mov	ip, #1
   19434:	cmp	r1, #8
   19438:	bcc	19508 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   1943c:	cmp	r2, #0
   19440:	beq	19454 <flatcc_verify_table_as_typed_root@@Base+0x48>
   19444:	ldr	r6, [r0, #4]
   19448:	mov	ip, #2
   1944c:	cmp	r6, r2
   19450:	bne	19508 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   19454:	ldr	r2, [r0]
   19458:	mov	r6, #99	; 0x63
   1945c:	mov	ip, #15
   19460:	str	r6, [sp, #8]
   19464:	tst	r2, #3
   19468:	bne	19508 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   1946c:	cmp	r2, #0
   19470:	beq	19508 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   19474:	add	r6, r2, #4
   19478:	cmp	r6, r1
   1947c:	bhi	19508 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   19480:	str	r2, [sp, #16]
   19484:	mov	ip, #29
   19488:	ldr	r6, [r0, r2]
   1948c:	sub	r5, r2, r6
   19490:	tst	r5, #-2147483647	; 0x80000001
   19494:	bne	19508 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   19498:	add	r4, r5, #2
   1949c:	mov	ip, #27
   194a0:	cmp	r4, r1
   194a4:	bhi	19508 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   194a8:	mov	lr, r0
   194ac:	mov	ip, #30
   194b0:	ldrh	r6, [lr, r5]!
   194b4:	tst	r6, #1
   194b8:	strh	r6, [sp, #22]
   194bc:	bne	19508 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   194c0:	add	r5, r5, r6
   194c4:	cmp	r5, r1
   194c8:	bhi	19508 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   194cc:	mov	ip, #28
   194d0:	cmp	r6, #4
   194d4:	bcc	19508 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   194d8:	add	r6, r0, r4
   194dc:	sub	r2, r1, r2
   194e0:	mov	ip, #20
   194e4:	ldrh	r4, [r6]
   194e8:	cmp	r2, r4
   194ec:	strh	r4, [sp, #20]
   194f0:	bcc	19508 <flatcc_verify_table_as_typed_root@@Base+0xfc>
   194f4:	stm	sp, {r0, r1}
   194f8:	mov	r0, sp
   194fc:	str	lr, [sp, #12]
   19500:	blx	r3
   19504:	mov	ip, r0
   19508:	mov	r0, ip
   1950c:	sub	sp, fp, #16
   19510:	pop	{r4, r5, r6, sl, fp, pc}

00019514 <flatcc_verify_struct_as_nested_root@@Base>:
   19514:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   19518:	add	fp, sp, #24
   1951c:	sub	sp, sp, #8
   19520:	mov	r4, r3
   19524:	mov	r3, #4
   19528:	ldrh	r7, [r0, #22]
   1952c:	ldr	r9, [fp, #12]
   19530:	add	r6, r3, r1, lsl #1
   19534:	uxth	r3, r6
   19538:	cmp	r3, r7
   1953c:	bcs	195c4 <flatcc_verify_struct_as_nested_root@@Base+0xb0>
   19540:	ldr	r1, [r0, #12]
   19544:	uxtah	r6, r1, r6
   19548:	ldrh	r6, [r6]
   1954c:	cmp	r6, #0
   19550:	beq	195c4 <flatcc_verify_struct_as_nested_root@@Base+0xb0>
   19554:	ldrh	r7, [r0, #20]
   19558:	add	r5, r6, #4
   1955c:	cmp	r5, r7
   19560:	bhi	195d8 <flatcc_verify_struct_as_nested_root@@Base+0xc4>
   19564:	ldr	r7, [r0, #16]
   19568:	add	r5, r7, r6
   1956c:	tst	r5, #3
   19570:	bne	195d8 <flatcc_verify_struct_as_nested_root@@Base+0xc4>
   19574:	cmp	r5, #0
   19578:	beq	19698 <flatcc_verify_struct_as_nested_root@@Base+0x184>
   1957c:	ldr	r7, [r0]
   19580:	ldr	r6, [r7, r5]
   19584:	add	r6, r6, r5
   19588:	cmp	r6, r5
   1958c:	bls	195d8 <flatcc_verify_struct_as_nested_root@@Base+0xc4>
   19590:	ldr	ip, [r0, #4]
   19594:	add	r5, r6, #4
   19598:	cmp	r5, ip
   1959c:	bhi	195d8 <flatcc_verify_struct_as_nested_root@@Base+0xc4>
   195a0:	ands	r5, r5, #3
   195a4:	bne	195d8 <flatcc_verify_struct_as_nested_root@@Base+0xc4>
   195a8:	ldr	r7, [r7, r6]
   195ac:	sub	r6, ip, r6
   195b0:	sub	r6, r6, #4
   195b4:	mul	r7, r7, r9
   195b8:	cmp	r6, r7
   195bc:	bcc	195d8 <flatcc_verify_struct_as_nested_root@@Base+0xc4>
   195c0:	b	19698 <flatcc_verify_struct_as_nested_root@@Base+0x184>
   195c4:	cmp	r2, #0
   195c8:	beq	19688 <flatcc_verify_struct_as_nested_root@@Base+0x174>
   195cc:	cmp	r3, r7
   195d0:	bcs	19670 <flatcc_verify_struct_as_nested_root@@Base+0x15c>
   195d4:	ldr	r1, [r0, #12]
   195d8:	add	r1, r1, r3
   195dc:	ldrh	r3, [r1]
   195e0:	cmp	r3, #0
   195e4:	beq	19670 <flatcc_verify_struct_as_nested_root@@Base+0x15c>
   195e8:	ldrh	r2, [r0, #20]
   195ec:	add	r7, r3, #4
   195f0:	mov	r1, #13
   195f4:	cmp	r7, r2
   195f8:	bhi	19770 <flatcc_verify_struct_as_nested_root@@Base+0x25c>
   195fc:	ldr	r1, [r0, #16]
   19600:	add	r7, r1, r3
   19604:	mov	r1, #12
   19608:	tst	r7, #3
   1960c:	bne	19770 <flatcc_verify_struct_as_nested_root@@Base+0x25c>
   19610:	cmp	r7, #0
   19614:	beq	1976c <flatcc_verify_struct_as_nested_root@@Base+0x258>
   19618:	ldr	r2, [r0]
   1961c:	ldr	r1, [r2, r7]
   19620:	add	r3, r1, r7
   19624:	mov	r1, #16
   19628:	cmp	r3, r7
   1962c:	bls	19770 <flatcc_verify_struct_as_nested_root@@Base+0x25c>
   19630:	ldr	r0, [r0, #4]
   19634:	add	r7, r3, #4
   19638:	cmp	r7, r0
   1963c:	bhi	19770 <flatcc_verify_struct_as_nested_root@@Base+0x25c>
   19640:	ands	r7, r7, #3
   19644:	bne	19770 <flatcc_verify_struct_as_nested_root@@Base+0x25c>
   19648:	ldr	r1, [r2, r3]
   1964c:	sub	r0, r0, r3
   19650:	sub	r0, r0, #4
   19654:	mul	r2, r1, r9
   19658:	mov	r1, #0
   1965c:	cmp	r0, r2
   19660:	movwcc	r1, #26
   19664:	mov	r0, r1
   19668:	sub	sp, fp, #24
   1966c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   19670:	cmp	r2, #0
   19674:	movwne	r2, #1
   19678:	lsl	r1, r2, #2
   1967c:	mov	r0, r1
   19680:	sub	sp, fp, #24
   19684:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   19688:	mov	r1, #0
   1968c:	cmp	r3, r7
   19690:	bcs	19770 <flatcc_verify_struct_as_nested_root@@Base+0x25c>
   19694:	ldr	r1, [r0, #12]
   19698:	add	r1, r1, r3
   1969c:	ldrh	r2, [r1]
   196a0:	mov	r1, #0
   196a4:	cmp	r2, #0
   196a8:	beq	19770 <flatcc_verify_struct_as_nested_root@@Base+0x25c>
   196ac:	ldr	r3, [r0]
   196b0:	ldr	r0, [r0, #16]
   196b4:	add	r0, r3, r0
   196b8:	adds	r0, r0, r2
   196bc:	beq	19770 <flatcc_verify_struct_as_nested_root@@Base+0x25c>
   196c0:	ldr	r7, [r0]
   196c4:	mov	r1, #5
   196c8:	ldr	r8, [r7, r0]!
   196cc:	add	r6, r7, #4
   196d0:	tst	r6, #3
   196d4:	bne	19770 <flatcc_verify_struct_as_nested_root@@Base+0x25c>
   196d8:	mov	r1, #6
   196dc:	cmn	r8, #9
   196e0:	bhi	19770 <flatcc_verify_struct_as_nested_root@@Base+0x25c>
   196e4:	mov	r1, #1
   196e8:	cmp	r8, #8
   196ec:	bcc	19770 <flatcc_verify_struct_as_nested_root@@Base+0x25c>
   196f0:	cmp	r4, #0
   196f4:	beq	19724 <flatcc_verify_struct_as_nested_root@@Base+0x210>
   196f8:	mov	r0, #0
   196fc:	mov	r1, r4
   19700:	mov	r2, #4
   19704:	str	r0, [sp]
   19708:	mov	r0, sp
   1970c:	bl	12784 <strncpy@plt>
   19710:	ldr	r0, [sp]
   19714:	cmp	r0, #0
   19718:	ldrne	r1, [r7, #8]
   1971c:	cmpne	r1, r0
   19720:	bne	1977c <flatcc_verify_struct_as_nested_root@@Base+0x268>
   19724:	ldr	r0, [r6]
   19728:	mov	r1, #18
   1972c:	sub	r2, r0, #1
   19730:	cmp	r2, r8
   19734:	bcs	19770 <flatcc_verify_struct_as_nested_root@@Base+0x25c>
   19738:	ldr	r1, [fp, #8]
   1973c:	adds	r2, r0, r1
   19740:	mov	r1, #10
   19744:	bcs	19770 <flatcc_verify_struct_as_nested_root@@Base+0x25c>
   19748:	mov	r1, #9
   1974c:	cmp	r2, r8
   19750:	bhi	19770 <flatcc_verify_struct_as_nested_root@@Base+0x25c>
   19754:	sub	r1, r9, #1
   19758:	ands	r1, r0, r1
   1975c:	movwne	r1, #11
   19760:	mov	r0, r1
   19764:	sub	sp, fp, #24
   19768:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1976c:	mov	r1, #0
   19770:	mov	r0, r1
   19774:	sub	sp, fp, #24
   19778:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1977c:	mov	r0, #0
   19780:	mov	r1, r4
   19784:	mov	r2, #4
   19788:	str	r0, [sp, #4]
   1978c:	add	r0, sp, #4
   19790:	bl	12784 <strncpy@plt>
   19794:	ldr	r1, [sp, #4]
   19798:	ldr	r0, [r7, #8]
   1979c:	subs	r0, r0, r1
   197a0:	movwne	r0, #1
   197a4:	cmp	r1, #0
   197a8:	lslne	r1, r0, #1
   197ac:	mov	r0, r1
   197b0:	sub	sp, fp, #24
   197b4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

000197b8 <flatcc_verify_table_as_nested_root@@Base>:
   197b8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   197bc:	add	fp, sp, #24
   197c0:	sub	sp, sp, #24
   197c4:	mov	r4, r0
   197c8:	mov	r0, #4
   197cc:	ldr	r8, [fp, #8]
   197d0:	mov	r5, r3
   197d4:	add	r6, r0, r1, lsl #1
   197d8:	ldrh	r7, [r4, #22]
   197dc:	uxth	r3, r6
   197e0:	cmp	r3, r7
   197e4:	bcs	1986c <flatcc_verify_table_as_nested_root@@Base+0xb4>
   197e8:	ldr	r0, [r4, #12]
   197ec:	uxtah	r6, r0, r6
   197f0:	ldrh	r6, [r6]
   197f4:	cmp	r6, #0
   197f8:	beq	1986c <flatcc_verify_table_as_nested_root@@Base+0xb4>
   197fc:	ldrh	r7, [r4, #20]
   19800:	add	r1, r6, #4
   19804:	cmp	r1, r7
   19808:	bhi	19880 <flatcc_verify_table_as_nested_root@@Base+0xc8>
   1980c:	ldr	r1, [r4, #16]
   19810:	add	r7, r1, r6
   19814:	tst	r7, #3
   19818:	bne	19880 <flatcc_verify_table_as_nested_root@@Base+0xc8>
   1981c:	cmp	r7, #0
   19820:	beq	19938 <flatcc_verify_table_as_nested_root@@Base+0x180>
   19824:	ldr	ip, [r4]
   19828:	ldr	r1, [ip, r7]
   1982c:	add	r6, r1, r7
   19830:	cmp	r6, r7
   19834:	bls	19880 <flatcc_verify_table_as_nested_root@@Base+0xc8>
   19838:	ldr	lr, [r4, #4]
   1983c:	add	r7, r6, #4
   19840:	cmp	r7, lr
   19844:	bhi	19880 <flatcc_verify_table_as_nested_root@@Base+0xc8>
   19848:	ands	r1, r7, #3
   1984c:	bne	19880 <flatcc_verify_table_as_nested_root@@Base+0xc8>
   19850:	ldr	r1, [ip, r6]
   19854:	sub	r7, lr, r6
   19858:	sub	r7, r7, #4
   1985c:	mul	r1, r1, r8
   19860:	cmp	r7, r1
   19864:	bcc	19880 <flatcc_verify_table_as_nested_root@@Base+0xc8>
   19868:	b	19938 <flatcc_verify_table_as_nested_root@@Base+0x180>
   1986c:	cmp	r2, #0
   19870:	beq	19928 <flatcc_verify_table_as_nested_root@@Base+0x170>
   19874:	cmp	r3, r7
   19878:	bcs	19914 <flatcc_verify_table_as_nested_root@@Base+0x15c>
   1987c:	ldr	r0, [r4, #12]
   19880:	add	r0, r0, r3
   19884:	ldrh	r3, [r0]
   19888:	cmp	r3, #0
   1988c:	beq	19914 <flatcc_verify_table_as_nested_root@@Base+0x15c>
   19890:	ldrh	r1, [r4, #20]
   19894:	add	r2, r3, #4
   19898:	mov	r0, #13
   1989c:	cmp	r2, r1
   198a0:	bhi	19a80 <flatcc_verify_table_as_nested_root@@Base+0x2c8>
   198a4:	ldr	r0, [r4, #16]
   198a8:	add	r7, r0, r3
   198ac:	mov	r0, #12
   198b0:	tst	r7, #3
   198b4:	bne	19a80 <flatcc_verify_table_as_nested_root@@Base+0x2c8>
   198b8:	cmp	r7, #0
   198bc:	beq	19a88 <flatcc_verify_table_as_nested_root@@Base+0x2d0>
   198c0:	ldr	r2, [r4]
   198c4:	ldr	r0, [r2, r7]
   198c8:	add	r3, r0, r7
   198cc:	mov	r0, #16
   198d0:	cmp	r3, r7
   198d4:	bls	19a80 <flatcc_verify_table_as_nested_root@@Base+0x2c8>
   198d8:	ldr	r7, [r4, #4]
   198dc:	add	r6, r3, #4
   198e0:	cmp	r6, r7
   198e4:	bhi	19a80 <flatcc_verify_table_as_nested_root@@Base+0x2c8>
   198e8:	ands	r1, r6, #3
   198ec:	bne	19a80 <flatcc_verify_table_as_nested_root@@Base+0x2c8>
   198f0:	ldr	r0, [r2, r3]
   198f4:	mul	r1, r0, r8
   198f8:	sub	r0, r7, r3
   198fc:	sub	r2, r0, #4
   19900:	mov	r0, #0
   19904:	cmp	r2, r1
   19908:	movwcc	r0, #26
   1990c:	sub	sp, fp, #24
   19910:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19914:	cmp	r2, #0
   19918:	movwne	r2, #1
   1991c:	lsl	r0, r2, #2
   19920:	sub	sp, fp, #24
   19924:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19928:	mov	r0, #0
   1992c:	cmp	r3, r7
   19930:	bcs	19a80 <flatcc_verify_table_as_nested_root@@Base+0x2c8>
   19934:	ldr	r0, [r4, #12]
   19938:	add	r0, r0, r3
   1993c:	ldrh	r1, [r0]
   19940:	mov	r0, #0
   19944:	cmp	r1, #0
   19948:	beq	19a80 <flatcc_verify_table_as_nested_root@@Base+0x2c8>
   1994c:	ldr	r2, [r4]
   19950:	ldr	r3, [r4, #16]
   19954:	add	r2, r2, r3
   19958:	adds	r1, r2, r1
   1995c:	beq	19a80 <flatcc_verify_table_as_nested_root@@Base+0x2c8>
   19960:	ldr	r6, [r1]
   19964:	mov	r0, #5
   19968:	ldr	r8, [r6, r1]!
   1996c:	add	r7, r6, #4
   19970:	tst	r7, #3
   19974:	bne	19a80 <flatcc_verify_table_as_nested_root@@Base+0x2c8>
   19978:	mov	r0, #6
   1997c:	cmn	r8, #9
   19980:	bhi	19a80 <flatcc_verify_table_as_nested_root@@Base+0x2c8>
   19984:	mov	r0, #1
   19988:	cmp	r8, #8
   1998c:	bcc	19a80 <flatcc_verify_table_as_nested_root@@Base+0x2c8>
   19990:	cmp	r5, #0
   19994:	beq	199c4 <flatcc_verify_table_as_nested_root@@Base+0x20c>
   19998:	mov	r0, #0
   1999c:	mov	r1, r5
   199a0:	mov	r2, #4
   199a4:	str	r0, [sp]
   199a8:	mov	r0, sp
   199ac:	bl	12784 <strncpy@plt>
   199b0:	ldr	r0, [sp]
   199b4:	cmp	r0, #0
   199b8:	ldrne	r1, [r6, #8]
   199bc:	cmpne	r1, r0
   199c0:	bne	19a94 <flatcc_verify_table_as_nested_root@@Base+0x2dc>
   199c4:	ldr	r0, [r4, #8]
   199c8:	ldr	r1, [r7]
   199cc:	subs	r0, r0, #1
   199d0:	str	r0, [sp, #8]
   199d4:	beq	19acc <flatcc_verify_table_as_nested_root@@Base+0x314>
   199d8:	mov	r0, #15
   199dc:	tst	r1, #3
   199e0:	bne	19a80 <flatcc_verify_table_as_nested_root@@Base+0x2c8>
   199e4:	cmp	r1, #0
   199e8:	beq	19a80 <flatcc_verify_table_as_nested_root@@Base+0x2c8>
   199ec:	add	r2, r1, #4
   199f0:	cmp	r2, r8
   199f4:	bhi	19a80 <flatcc_verify_table_as_nested_root@@Base+0x2c8>
   199f8:	str	r1, [sp, #16]
   199fc:	ldr	r0, [r7, r1]
   19a00:	sub	r6, r1, r0
   19a04:	mov	r0, #29
   19a08:	tst	r6, #-2147483647	; 0x80000001
   19a0c:	bne	19a80 <flatcc_verify_table_as_nested_root@@Base+0x2c8>
   19a10:	add	r3, r6, #2
   19a14:	mov	r0, #27
   19a18:	cmp	r3, r8
   19a1c:	bhi	19a80 <flatcc_verify_table_as_nested_root@@Base+0x2c8>
   19a20:	mov	r2, r7
   19a24:	mov	r0, #30
   19a28:	ldrh	r5, [r2, r6]!
   19a2c:	tst	r5, #1
   19a30:	strh	r5, [sp, #22]
   19a34:	bne	19a80 <flatcc_verify_table_as_nested_root@@Base+0x2c8>
   19a38:	add	r6, r6, r5
   19a3c:	cmp	r6, r8
   19a40:	bhi	19a80 <flatcc_verify_table_as_nested_root@@Base+0x2c8>
   19a44:	mov	r0, #28
   19a48:	cmp	r5, #4
   19a4c:	bcc	19a80 <flatcc_verify_table_as_nested_root@@Base+0x2c8>
   19a50:	add	r0, r7, r3
   19a54:	sub	r1, r8, r1
   19a58:	ldrh	r3, [r0]
   19a5c:	mov	r0, #20
   19a60:	cmp	r1, r3
   19a64:	strh	r3, [sp, #20]
   19a68:	bcc	19a80 <flatcc_verify_table_as_nested_root@@Base+0x2c8>
   19a6c:	ldr	r1, [fp, #12]
   19a70:	mov	r0, sp
   19a74:	stm	sp, {r7, r8}
   19a78:	str	r2, [sp, #12]
   19a7c:	blx	r1
   19a80:	sub	sp, fp, #24
   19a84:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19a88:	mov	r0, #0
   19a8c:	sub	sp, fp, #24
   19a90:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19a94:	mov	r0, #0
   19a98:	mov	r1, r5
   19a9c:	mov	r2, #4
   19aa0:	str	r0, [sp]
   19aa4:	mov	r0, sp
   19aa8:	bl	12784 <strncpy@plt>
   19aac:	ldr	r0, [sp]
   19ab0:	ldr	r1, [r6, #8]
   19ab4:	subs	r1, r1, r0
   19ab8:	movwne	r1, #1
   19abc:	cmp	r0, #0
   19ac0:	lslne	r0, r1, #1
   19ac4:	sub	sp, fp, #24
   19ac8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19acc:	mov	r0, #3
   19ad0:	sub	sp, fp, #24
   19ad4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00019ad8 <flatcc_verify_union_field@@Base>:
   19ad8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19adc:	add	fp, sp, #28
   19ae0:	sub	sp, sp, #28
   19ae4:	mov	r7, #2
   19ae8:	ldrh	r4, [r0, #22]
   19aec:	lsl	r5, r1, #1
   19af0:	add	r7, r7, r1, lsl #1
   19af4:	uxth	r6, r7
   19af8:	cmp	r6, r4
   19afc:	bcs	19bfc <flatcc_verify_union_field@@Base+0x124>
   19b00:	ldr	r6, [r0, #12]
   19b04:	uxtah	r1, r6, r7
   19b08:	ldrh	ip, [r1]
   19b0c:	cmp	ip, #0
   19b10:	beq	19bfc <flatcc_verify_union_field@@Base+0x124>
   19b14:	ldrh	r7, [r0, #20]
   19b18:	mov	r1, #13
   19b1c:	cmp	ip, r7
   19b20:	bcs	19c24 <flatcc_verify_union_field@@Base+0x14c>
   19b24:	add	r7, r5, #4
   19b28:	ldr	lr, [r0]
   19b2c:	mov	r1, #1
   19b30:	uxth	sl, r7
   19b34:	cmp	sl, r4
   19b38:	bcs	19b4c <flatcc_verify_union_field@@Base+0x74>
   19b3c:	uxtah	r1, r6, r7
   19b40:	ldrh	r1, [r1]
   19b44:	clz	r1, r1
   19b48:	lsr	r1, r1, #5
   19b4c:	ldr	r9, [r0, #16]
   19b50:	cmp	r1, #0
   19b54:	moveq	r1, #24
   19b58:	add	r8, lr, r9
   19b5c:	ldrb	r5, [r8, ip]
   19b60:	cmpeq	r5, #0
   19b64:	beq	19c24 <flatcc_verify_union_field@@Base+0x14c>
   19b68:	mov	r1, #0
   19b6c:	cmp	r5, #0
   19b70:	beq	19c24 <flatcc_verify_union_field@@Base+0x14c>
   19b74:	cmp	sl, r4
   19b78:	bcs	19c48 <flatcc_verify_union_field@@Base+0x170>
   19b7c:	uxtah	r1, r6, r7
   19b80:	ldrh	r4, [r1]
   19b84:	cmp	r4, #0
   19b88:	beq	19c48 <flatcc_verify_union_field@@Base+0x170>
   19b8c:	ldrh	r1, [r0, #20]
   19b90:	add	r2, r4, #4
   19b94:	cmp	r2, r1
   19b98:	mov	r1, #13
   19b9c:	bhi	19c24 <flatcc_verify_union_field@@Base+0x14c>
   19ba0:	add	r2, r9, r4
   19ba4:	mov	r1, #12
   19ba8:	tst	r2, #3
   19bac:	bne	19c24 <flatcc_verify_union_field@@Base+0x14c>
   19bb0:	cmp	r2, #0
   19bb4:	mov	r1, #0
   19bb8:	beq	19c24 <flatcc_verify_union_field@@Base+0x14c>
   19bbc:	str	lr, [sp, #4]
   19bc0:	ldr	r1, [r0, #4]
   19bc4:	ldr	r0, [r0, #8]
   19bc8:	str	r1, [sp, #8]
   19bcc:	str	r2, [sp, #20]
   19bd0:	str	r0, [sp, #12]
   19bd4:	ldr	r0, [lr, r2]
   19bd8:	str	r0, [sp, #24]
   19bdc:	ldrb	r0, [r8, ip]
   19be0:	strb	r0, [sp, #16]
   19be4:	add	r0, sp, #4
   19be8:	blx	r3
   19bec:	mov	r1, r0
   19bf0:	mov	r0, r1
   19bf4:	sub	sp, fp, #28
   19bf8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19bfc:	add	r1, r5, #4
   19c00:	uxth	r3, r1
   19c04:	cmp	r3, r4
   19c08:	bcs	19c30 <flatcc_verify_union_field@@Base+0x158>
   19c0c:	ldr	r0, [r0, #12]
   19c10:	uxtah	r0, r0, r1
   19c14:	mov	r1, #23
   19c18:	ldrh	r0, [r0]
   19c1c:	cmp	r0, #0
   19c20:	beq	19c30 <flatcc_verify_union_field@@Base+0x158>
   19c24:	mov	r0, r1
   19c28:	sub	sp, fp, #28
   19c2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19c30:	cmp	r2, #0
   19c34:	movwne	r2, #21
   19c38:	mov	r1, r2
   19c3c:	mov	r0, r1
   19c40:	sub	sp, fp, #28
   19c44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19c48:	cmp	r2, #0
   19c4c:	movwne	r2, #1
   19c50:	lsl	r1, r2, #2
   19c54:	mov	r0, r1
   19c58:	sub	sp, fp, #28
   19c5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00019c60 <flatcc_verify_union_vector_field@@Base>:
   19c60:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19c64:	add	fp, sp, #28
   19c68:	sub	sp, sp, #28
   19c6c:	mov	r9, r3
   19c70:	mov	r3, #2
   19c74:	lsl	sl, r1, #1
   19c78:	add	r5, r3, r1, lsl #1
   19c7c:	ldrh	r1, [r0, #22]
   19c80:	uxth	r3, r5
   19c84:	cmp	r3, r1
   19c88:	bcs	19d1c <flatcc_verify_union_vector_field@@Base+0xbc>
   19c8c:	ldr	r7, [r0, #12]
   19c90:	uxtah	r5, r7, r5
   19c94:	ldrh	r5, [r5]
   19c98:	cmp	r5, #0
   19c9c:	beq	19d1c <flatcc_verify_union_vector_field@@Base+0xbc>
   19ca0:	add	r5, r7, r3
   19ca4:	ldrh	r5, [r5]
   19ca8:	cmp	r5, #0
   19cac:	beq	19d68 <flatcc_verify_union_vector_field@@Base+0x108>
   19cb0:	ldrh	r4, [r0, #20]
   19cb4:	add	r6, r5, #4
   19cb8:	cmp	r6, r4
   19cbc:	bhi	19d7c <flatcc_verify_union_vector_field@@Base+0x11c>
   19cc0:	ldr	r6, [r0, #16]
   19cc4:	add	r5, r6, r5
   19cc8:	tst	r5, #3
   19ccc:	bne	19d7c <flatcc_verify_union_vector_field@@Base+0x11c>
   19cd0:	cmp	r5, #0
   19cd4:	beq	19e30 <flatcc_verify_union_vector_field@@Base+0x1d0>
   19cd8:	ldr	ip, [r0]
   19cdc:	ldr	r6, [ip, r5]
   19ce0:	add	lr, r6, r5
   19ce4:	cmp	lr, r5
   19ce8:	bls	19d7c <flatcc_verify_union_vector_field@@Base+0x11c>
   19cec:	ldr	r8, [r0, #4]
   19cf0:	add	r5, lr, #4
   19cf4:	cmp	r5, r8
   19cf8:	bhi	19d7c <flatcc_verify_union_vector_field@@Base+0x11c>
   19cfc:	ands	r4, r5, #3
   19d00:	bne	19d7c <flatcc_verify_union_vector_field@@Base+0x11c>
   19d04:	ldr	r6, [ip, lr]
   19d08:	sub	r5, r8, lr
   19d0c:	sub	r5, r5, #4
   19d10:	cmp	r5, r6
   19d14:	bcc	19d7c <flatcc_verify_union_vector_field@@Base+0x11c>
   19d18:	b	19e30 <flatcc_verify_union_vector_field@@Base+0x1d0>
   19d1c:	add	r7, sl, #4
   19d20:	uxth	r5, r7
   19d24:	cmp	r5, r1
   19d28:	bcs	19e10 <flatcc_verify_union_vector_field@@Base+0x1b0>
   19d2c:	cmp	r2, #0
   19d30:	beq	19d4c <flatcc_verify_union_vector_field@@Base+0xec>
   19d34:	ldr	r5, [r0, #12]
   19d38:	uxtah	r7, r5, r7
   19d3c:	mov	r5, #22
   19d40:	ldrh	r7, [r7]
   19d44:	cmp	r7, #0
   19d48:	beq	19fbc <flatcc_verify_union_vector_field@@Base+0x35c>
   19d4c:	cmp	r3, r1
   19d50:	bcs	19d68 <flatcc_verify_union_vector_field@@Base+0x108>
   19d54:	ldr	r7, [r0, #12]
   19d58:	add	r5, r7, r3
   19d5c:	ldrh	r5, [r5]
   19d60:	cmp	r5, #0
   19d64:	bne	19cb0 <flatcc_verify_union_vector_field@@Base+0x50>
   19d68:	cmp	r2, #0
   19d6c:	beq	19e20 <flatcc_verify_union_vector_field@@Base+0x1c0>
   19d70:	cmp	r3, r1
   19d74:	bcs	19fb0 <flatcc_verify_union_vector_field@@Base+0x350>
   19d78:	ldr	r7, [r0, #12]
   19d7c:	add	r1, r7, r3
   19d80:	ldrh	r1, [r1]
   19d84:	cmp	r1, #0
   19d88:	beq	19fb0 <flatcc_verify_union_vector_field@@Base+0x350>
   19d8c:	ldrh	r2, [r0, #20]
   19d90:	add	r3, r1, #4
   19d94:	mov	r5, #13
   19d98:	cmp	r3, r2
   19d9c:	bhi	19fbc <flatcc_verify_union_vector_field@@Base+0x35c>
   19da0:	ldr	r2, [r0, #16]
   19da4:	mov	r5, #12
   19da8:	add	r3, r2, r1
   19dac:	tst	r3, #3
   19db0:	bne	19fbc <flatcc_verify_union_vector_field@@Base+0x35c>
   19db4:	cmp	r3, #0
   19db8:	beq	19fc8 <flatcc_verify_union_vector_field@@Base+0x368>
   19dbc:	ldr	r1, [r0]
   19dc0:	mov	r5, #16
   19dc4:	ldr	r2, [r1, r3]
   19dc8:	add	r2, r2, r3
   19dcc:	cmp	r2, r3
   19dd0:	bls	19fbc <flatcc_verify_union_vector_field@@Base+0x35c>
   19dd4:	ldr	r0, [r0, #4]
   19dd8:	add	r3, r2, #4
   19ddc:	cmp	r3, r0
   19de0:	bhi	19fbc <flatcc_verify_union_vector_field@@Base+0x35c>
   19de4:	ands	r3, r3, #3
   19de8:	bne	19fbc <flatcc_verify_union_vector_field@@Base+0x35c>
   19dec:	ldr	r1, [r1, r2]
   19df0:	sub	r0, r0, r2
   19df4:	mov	r5, #0
   19df8:	sub	r0, r0, #4
   19dfc:	cmp	r0, r1
   19e00:	movwcc	r5, #26
   19e04:	mov	r0, r5
   19e08:	sub	sp, fp, #28
   19e0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19e10:	mov	r5, #22
   19e14:	cmp	r2, #0
   19e18:	bne	19fbc <flatcc_verify_union_vector_field@@Base+0x35c>
   19e1c:	b	19d4c <flatcc_verify_union_vector_field@@Base+0xec>
   19e20:	mov	r5, #0
   19e24:	cmp	r3, r1
   19e28:	bcs	19fbc <flatcc_verify_union_vector_field@@Base+0x35c>
   19e2c:	ldr	r7, [r0, #12]
   19e30:	add	r3, r7, r3
   19e34:	mov	r5, #0
   19e38:	ldrh	r3, [r3]
   19e3c:	cmp	r3, #0
   19e40:	beq	19fbc <flatcc_verify_union_vector_field@@Base+0x35c>
   19e44:	ldr	r8, [r0]
   19e48:	ldr	lr, [r0, #16]
   19e4c:	add	r6, r8, lr
   19e50:	adds	ip, r6, r3
   19e54:	beq	19fbc <flatcc_verify_union_vector_field@@Base+0x35c>
   19e58:	add	r3, sl, #4
   19e5c:	uxth	r4, r3
   19e60:	cmp	r4, r1
   19e64:	bcs	19fb0 <flatcc_verify_union_vector_field@@Base+0x350>
   19e68:	uxtah	r1, r7, r3
   19e6c:	ldrh	r1, [r1]
   19e70:	cmp	r1, #0
   19e74:	beq	19fb0 <flatcc_verify_union_vector_field@@Base+0x350>
   19e78:	ldrh	r2, [r0, #20]
   19e7c:	add	r3, r1, #4
   19e80:	mov	r5, #13
   19e84:	cmp	r3, r2
   19e88:	bhi	19fbc <flatcc_verify_union_vector_field@@Base+0x35c>
   19e8c:	add	r3, lr, r1
   19e90:	mov	r5, #12
   19e94:	tst	r3, #3
   19e98:	bne	19fbc <flatcc_verify_union_vector_field@@Base+0x35c>
   19e9c:	cmp	r3, #0
   19ea0:	mov	r5, #0
   19ea4:	beq	19fbc <flatcc_verify_union_vector_field@@Base+0x35c>
   19ea8:	ldr	r1, [r0, #8]
   19eac:	cmp	r1, #1
   19eb0:	blt	19fd8 <flatcc_verify_union_vector_field@@Base+0x378>
   19eb4:	ldr	r2, [r8, r3]
   19eb8:	mov	r5, #16
   19ebc:	add	r2, r2, r3
   19ec0:	cmp	r2, r3
   19ec4:	bls	19fbc <flatcc_verify_union_vector_field@@Base+0x35c>
   19ec8:	ldr	r0, [r0, #4]
   19ecc:	add	r7, r2, #4
   19ed0:	cmp	r7, r0
   19ed4:	bhi	19fbc <flatcc_verify_union_vector_field@@Base+0x35c>
   19ed8:	ands	r3, r7, #3
   19edc:	bne	19fbc <flatcc_verify_union_vector_field@@Base+0x35c>
   19ee0:	ldr	r3, [r8, r2]
   19ee4:	mov	r5, #25
   19ee8:	cmn	r3, #-1073741823	; 0xc0000001
   19eec:	bhi	19fbc <flatcc_verify_union_vector_field@@Base+0x35c>
   19ef0:	sub	r2, r0, r2
   19ef4:	mov	r5, #26
   19ef8:	sub	r2, r2, #4
   19efc:	cmp	r2, r3, lsl #2
   19f00:	bcc	19fbc <flatcc_verify_union_vector_field@@Base+0x35c>
   19f04:	ldr	r2, [ip]
   19f08:	mov	r5, #34	; 0x22
   19f0c:	ldr	sl, [r2, ip]!
   19f10:	cmp	r3, sl
   19f14:	bne	19fbc <flatcc_verify_union_vector_field@@Base+0x35c>
   19f18:	sub	r1, r1, #1
   19f1c:	mov	r5, #0
   19f20:	cmp	sl, #0
   19f24:	str	r1, [sp, #12]
   19f28:	str	r0, [sp, #8]
   19f2c:	str	r8, [sp, #4]
   19f30:	beq	19fbc <flatcc_verify_union_vector_field@@Base+0x35c>
   19f34:	add	r6, r2, #4
   19f38:	add	r4, sp, #4
   19f3c:	ldr	r1, [r8, r7]
   19f40:	ldrb	r0, [r6]
   19f44:	cmp	r1, #0
   19f48:	bne	19f74 <flatcc_verify_union_vector_field@@Base+0x314>
   19f4c:	cmp	r0, #0
   19f50:	bne	19ff8 <flatcc_verify_union_vector_field@@Base+0x398>
   19f54:	add	r6, r6, #1
   19f58:	subs	sl, sl, #1
   19f5c:	add	r7, r7, #4
   19f60:	beq	19fbc <flatcc_verify_union_vector_field@@Base+0x35c>
   19f64:	ldr	r1, [r8, r7]
   19f68:	ldrb	r0, [r6]
   19f6c:	cmp	r1, #0
   19f70:	beq	19f4c <flatcc_verify_union_vector_field@@Base+0x2ec>
   19f74:	cmp	r0, #0
   19f78:	beq	19fe8 <flatcc_verify_union_vector_field@@Base+0x388>
   19f7c:	str	r1, [sp, #24]
   19f80:	str	r7, [sp, #20]
   19f84:	strb	r0, [sp, #16]
   19f88:	mov	r0, r4
   19f8c:	blx	r9
   19f90:	cmp	r0, #0
   19f94:	beq	19f54 <flatcc_verify_union_vector_field@@Base+0x2f4>
   19f98:	add	r0, sp, #4
   19f9c:	blx	r9
   19fa0:	mov	r5, r0
   19fa4:	mov	r0, r5
   19fa8:	sub	sp, fp, #28
   19fac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19fb0:	cmp	r2, #0
   19fb4:	movwne	r2, #1
   19fb8:	lsl	r5, r2, #2
   19fbc:	mov	r0, r5
   19fc0:	sub	sp, fp, #28
   19fc4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19fc8:	mov	r5, #0
   19fcc:	mov	r0, r5
   19fd0:	sub	sp, fp, #28
   19fd4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19fd8:	mov	r5, #3
   19fdc:	mov	r0, r5
   19fe0:	sub	sp, fp, #28
   19fe4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19fe8:	mov	r5, #33	; 0x21
   19fec:	mov	r0, r5
   19ff0:	sub	sp, fp, #28
   19ff4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19ff8:	mov	r5, #32
   19ffc:	mov	r0, r5
   1a000:	sub	sp, fp, #28
   1a004:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001a008 <__libc_csu_init@@Base>:
   1a008:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a00c:	mov	r7, r0
   1a010:	ldr	r6, [pc, #72]	; 1a060 <__libc_csu_init@@Base+0x58>
   1a014:	ldr	r5, [pc, #72]	; 1a064 <__libc_csu_init@@Base+0x5c>
   1a018:	add	r6, pc, r6
   1a01c:	add	r5, pc, r5
   1a020:	sub	r6, r6, r5
   1a024:	mov	r8, r1
   1a028:	mov	r9, r2
   1a02c:	bl	126ec <free@plt-0x20>
   1a030:	asrs	r6, r6, #2
   1a034:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a038:	mov	r4, #0
   1a03c:	add	r4, r4, #1
   1a040:	ldr	r3, [r5], #4
   1a044:	mov	r2, r9
   1a048:	mov	r1, r8
   1a04c:	mov	r0, r7
   1a050:	blx	r3
   1a054:	cmp	r6, r4
   1a058:	bne	1a03c <__libc_csu_init@@Base+0x34>
   1a05c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a060:	andeq	r1, r1, ip, ror #29
   1a064:	andeq	r1, r1, r4, ror #29

0001a068 <__libc_csu_fini@@Base>:
   1a068:	bx	lr

Disassembly of section .fini:

0001a06c <.fini>:
   1a06c:	push	{r3, lr}
   1a070:	pop	{r3, pc}
