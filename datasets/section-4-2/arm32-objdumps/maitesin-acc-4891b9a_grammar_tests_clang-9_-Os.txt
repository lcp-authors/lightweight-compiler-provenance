
../repos/maitesin-acc-4891b9a/bin/grammar_tests:     file format elf32-littlearm


Disassembly of section .init:

00011e48 <.init>:
   11e48:	push	{r3, lr}
   11e4c:	bl	1209c <_start@@Base+0x3c>
   11e50:	pop	{r3, pc}

Disassembly of section .plt:

00011e54 <fdopen@plt-0x14>:
   11e54:	push	{lr}		; (str lr, [sp, #-4]!)
   11e58:	ldr	lr, [pc, #4]	; 11e64 <fdopen@plt-0x4>
   11e5c:	add	lr, pc, lr
   11e60:	ldr	pc, [lr, #8]!
   11e64:	muleq	r1, ip, r1

00011e68 <fdopen@plt>:
   11e68:	add	ip, pc, #0, 12
   11e6c:	add	ip, ip, #102400	; 0x19000
   11e70:	ldr	pc, [ip, #412]!	; 0x19c

00011e74 <setbuf@plt>:
   11e74:	add	ip, pc, #0, 12
   11e78:	add	ip, ip, #102400	; 0x19000
   11e7c:	ldr	pc, [ip, #404]!	; 0x194

00011e80 <strtol@plt>:
   11e80:	add	ip, pc, #0, 12
   11e84:	add	ip, ip, #102400	; 0x19000
   11e88:	ldr	pc, [ip, #396]!	; 0x18c

00011e8c <printf@plt>:
   11e8c:	add	ip, pc, #0, 12
   11e90:	add	ip, ip, #102400	; 0x19000
   11e94:	ldr	pc, [ip, #388]!	; 0x184

00011e98 <fflush@plt>:
   11e98:	add	ip, pc, #0, 12
   11e9c:	add	ip, ip, #102400	; 0x19000
   11ea0:	ldr	pc, [ip, #380]!	; 0x17c

00011ea4 <free@plt>:
   11ea4:	add	ip, pc, #0, 12
   11ea8:	add	ip, ip, #102400	; 0x19000
   11eac:	ldr	pc, [ip, #372]!	; 0x174

00011eb0 <memcpy@plt>:
   11eb0:	add	ip, pc, #0, 12
   11eb4:	add	ip, ip, #102400	; 0x19000
   11eb8:	ldr	pc, [ip, #364]!	; 0x16c

00011ebc <mmap64@plt>:
   11ebc:	add	ip, pc, #0, 12
   11ec0:	add	ip, ip, #102400	; 0x19000
   11ec4:	ldr	pc, [ip, #356]!	; 0x164

00011ec8 <ftell@plt>:
   11ec8:	add	ip, pc, #0, 12
   11ecc:	add	ip, ip, #102400	; 0x19000
   11ed0:	ldr	pc, [ip, #348]!	; 0x15c

00011ed4 <uname@plt>:
   11ed4:	add	ip, pc, #0, 12
   11ed8:	add	ip, ip, #102400	; 0x19000
   11edc:	ldr	pc, [ip, #340]!	; 0x154

00011ee0 <strdup@plt>:
   11ee0:	add	ip, pc, #0, 12
   11ee4:	add	ip, ip, #102400	; 0x19000
   11ee8:	ldr	pc, [ip, #332]!	; 0x14c

00011eec <realloc@plt>:
   11eec:	add	ip, pc, #0, 12
   11ef0:	add	ip, ip, #102400	; 0x19000
   11ef4:	ldr	pc, [ip, #324]!	; 0x144

00011ef8 <fwrite@plt>:
   11ef8:	add	ip, pc, #0, 12
   11efc:	add	ip, ip, #102400	; 0x19000
   11f00:	ldr	pc, [ip, #316]!	; 0x13c

00011f04 <open64@plt>:
   11f04:	add	ip, pc, #0, 12
   11f08:	add	ip, ip, #102400	; 0x19000
   11f0c:	ldr	pc, [ip, #308]!	; 0x134

00011f10 <getenv@plt>:
   11f10:	add	ip, pc, #0, 12
   11f14:	add	ip, ip, #102400	; 0x19000
   11f18:	ldr	pc, [ip, #300]!	; 0x12c

00011f1c <puts@plt>:
   11f1c:	add	ip, pc, #0, 12
   11f20:	add	ip, ip, #102400	; 0x19000
   11f24:	ldr	pc, [ip, #292]!	; 0x124

00011f28 <malloc@plt>:
   11f28:	add	ip, pc, #0, 12
   11f2c:	add	ip, ip, #102400	; 0x19000
   11f30:	ldr	pc, [ip, #284]!	; 0x11c

00011f34 <__libc_start_main@plt>:
   11f34:	add	ip, pc, #0, 12
   11f38:	add	ip, ip, #102400	; 0x19000
   11f3c:	ldr	pc, [ip, #276]!	; 0x114

00011f40 <strerror@plt>:
   11f40:	add	ip, pc, #0, 12
   11f44:	add	ip, ip, #102400	; 0x19000
   11f48:	ldr	pc, [ip, #268]!	; 0x10c

00011f4c <__gmon_start__@plt>:
   11f4c:	add	ip, pc, #0, 12
   11f50:	add	ip, ip, #102400	; 0x19000
   11f54:	ldr	pc, [ip, #260]!	; 0x104

00011f58 <getpid@plt>:
   11f58:	add	ip, pc, #0, 12
   11f5c:	add	ip, ip, #102400	; 0x19000
   11f60:	ldr	pc, [ip, #252]!	; 0xfc

00011f64 <exit@plt>:
   11f64:	add	ip, pc, #0, 12
   11f68:	add	ip, ip, #102400	; 0x19000
   11f6c:	ldr	pc, [ip, #244]!	; 0xf4

00011f70 <strlen@plt>:
   11f70:	add	ip, pc, #0, 12
   11f74:	add	ip, ip, #102400	; 0x19000
   11f78:	ldr	pc, [ip, #236]!	; 0xec

00011f7c <strchr@plt>:
   11f7c:	add	ip, pc, #0, 12
   11f80:	add	ip, ip, #102400	; 0x19000
   11f84:	ldr	pc, [ip, #228]!	; 0xe4

00011f88 <fprintf@plt>:
   11f88:	add	ip, pc, #0, 12
   11f8c:	add	ip, ip, #102400	; 0x19000
   11f90:	ldr	pc, [ip, #220]!	; 0xdc

00011f94 <__errno_location@plt>:
   11f94:	add	ip, pc, #0, 12
   11f98:	add	ip, ip, #102400	; 0x19000
   11f9c:	ldr	pc, [ip, #212]!	; 0xd4

00011fa0 <__cxa_atexit@plt>:
   11fa0:	add	ip, pc, #0, 12
   11fa4:	add	ip, ip, #102400	; 0x19000
   11fa8:	ldr	pc, [ip, #204]!	; 0xcc

00011fac <mkdir@plt>:
   11fac:	add	ip, pc, #0, 12
   11fb0:	add	ip, ip, #102400	; 0x19000
   11fb4:	ldr	pc, [ip, #196]!	; 0xc4

00011fb8 <memset@plt>:
   11fb8:	add	ip, pc, #0, 12
   11fbc:	add	ip, ip, #102400	; 0x19000
   11fc0:	ldr	pc, [ip, #188]!	; 0xbc

00011fc4 <strncpy@plt>:
   11fc4:	add	ip, pc, #0, 12
   11fc8:	add	ip, ip, #102400	; 0x19000
   11fcc:	ldr	pc, [ip, #180]!	; 0xb4

00011fd0 <prctl@plt>:
   11fd0:	add	ip, pc, #0, 12
   11fd4:	add	ip, ip, #102400	; 0x19000
   11fd8:	ldr	pc, [ip, #172]!	; 0xac

00011fdc <fileno@plt>:
   11fdc:	add	ip, pc, #0, 12
   11fe0:	add	ip, ip, #102400	; 0x19000
   11fe4:	ldr	pc, [ip, #164]!	; 0xa4

00011fe8 <fclose@plt>:
   11fe8:	add	ip, pc, #0, 12
   11fec:	add	ip, ip, #102400	; 0x19000
   11ff0:	ldr	pc, [ip, #156]!	; 0x9c

00011ff4 <strnlen@plt>:
   11ff4:	add	ip, pc, #0, 12
   11ff8:	add	ip, ip, #102400	; 0x19000
   11ffc:	ldr	pc, [ip, #148]!	; 0x94

00012000 <munmap@plt>:
   12000:	add	ip, pc, #0, 12
   12004:	add	ip, ip, #102400	; 0x19000
   12008:	ldr	pc, [ip, #140]!	; 0x8c

0001200c <fcntl64@plt>:
   1200c:	add	ip, pc, #0, 12
   12010:	add	ip, ip, #102400	; 0x19000
   12014:	ldr	pc, [ip, #132]!	; 0x84

00012018 <strrchr@plt>:
   12018:	add	ip, pc, #0, 12
   1201c:	add	ip, ip, #102400	; 0x19000
   12020:	ldr	pc, [ip, #124]!	; 0x7c

00012024 <msync@plt>:
   12024:	add	ip, pc, #0, 12
   12028:	add	ip, ip, #102400	; 0x19000
   1202c:	ldr	pc, [ip, #116]!	; 0x74

00012030 <fseek@plt>:
   12030:	add	ip, pc, #0, 12
   12034:	add	ip, ip, #102400	; 0x19000
   12038:	ldr	pc, [ip, #108]!	; 0x6c

0001203c <strncmp@plt>:
   1203c:	add	ip, pc, #0, 12
   12040:	add	ip, ip, #102400	; 0x19000
   12044:	ldr	pc, [ip, #100]!	; 0x64

00012048 <abort@plt>:
   12048:	add	ip, pc, #0, 12
   1204c:	add	ip, ip, #102400	; 0x19000
   12050:	ldr	pc, [ip, #92]!	; 0x5c

00012054 <__assert_fail@plt>:
   12054:	add	ip, pc, #0, 12
   12058:	add	ip, ip, #102400	; 0x19000
   1205c:	ldr	pc, [ip, #84]!	; 0x54

Disassembly of section .text:

00012060 <_start@@Base>:
   12060:	mov	fp, #0
   12064:	mov	lr, #0
   12068:	pop	{r1}		; (ldr r1, [sp], #4)
   1206c:	mov	r2, sp
   12070:	push	{r2}		; (str r2, [sp, #-4]!)
   12074:	push	{r0}		; (str r0, [sp, #-4]!)
   12078:	ldr	ip, [pc, #16]	; 12090 <_start@@Base+0x30>
   1207c:	push	{ip}		; (str ip, [sp, #-4]!)
   12080:	ldr	r0, [pc, #12]	; 12094 <_start@@Base+0x34>
   12084:	ldr	r3, [pc, #12]	; 12098 <_start@@Base+0x38>
   12088:	bl	11f34 <__libc_start_main@plt>
   1208c:	bl	12048 <abort@plt>
   12090:	andeq	r9, r1, r8, lsl #15
   12094:			; <UNDEFINED> instruction: 0x00013eb8
   12098:	andeq	r9, r1, r8, lsr #14
   1209c:	ldr	r3, [pc, #20]	; 120b8 <_start@@Base+0x58>
   120a0:	ldr	r2, [pc, #20]	; 120bc <_start@@Base+0x5c>
   120a4:	add	r3, pc, r3
   120a8:	ldr	r2, [r3, r2]
   120ac:	cmp	r2, #0
   120b0:	bxeq	lr
   120b4:	b	11f4c <__gmon_start__@plt>
   120b8:	andeq	r8, r1, r4, asr pc
   120bc:	andeq	r0, r0, r4, asr #1
   120c0:	ldr	r0, [pc, #24]	; 120e0 <_start@@Base+0x80>
   120c4:	ldr	r3, [pc, #24]	; 120e4 <_start@@Base+0x84>
   120c8:	cmp	r3, r0
   120cc:	bxeq	lr
   120d0:	ldr	r3, [pc, #16]	; 120e8 <_start@@Base+0x88>
   120d4:	cmp	r3, #0
   120d8:	bxeq	lr
   120dc:	bx	r3
   120e0:	ldrdeq	fp, [r2], -r8
   120e4:	ldrdeq	fp, [r2], -r8
   120e8:	andeq	r0, r0, r0
   120ec:	ldr	r0, [pc, #36]	; 12118 <_start@@Base+0xb8>
   120f0:	ldr	r1, [pc, #36]	; 1211c <_start@@Base+0xbc>
   120f4:	sub	r1, r1, r0
   120f8:	asr	r1, r1, #2
   120fc:	add	r1, r1, r1, lsr #31
   12100:	asrs	r1, r1, #1
   12104:	bxeq	lr
   12108:	ldr	r3, [pc, #16]	; 12120 <_start@@Base+0xc0>
   1210c:	cmp	r3, #0
   12110:	bxeq	lr
   12114:	bx	r3
   12118:	ldrdeq	fp, [r2], -r8
   1211c:	ldrdeq	fp, [r2], -r8
   12120:	andeq	r0, r0, r0
   12124:	push	{r4, lr}
   12128:	ldr	r4, [pc, #24]	; 12148 <_start@@Base+0xe8>
   1212c:	ldrb	r3, [r4]
   12130:	cmp	r3, #0
   12134:	popne	{r4, pc}
   12138:	bl	120c0 <_start@@Base+0x60>
   1213c:	mov	r3, #1
   12140:	strb	r3, [r4]
   12144:	pop	{r4, pc}
   12148:	andeq	fp, r2, r8, ror #1
   1214c:	b	120ec <_start@@Base+0x8c>

00012150 <next@@Base>:
   12150:	push	{r4, r6, r7, sl, fp, lr}
   12154:	add	fp, sp, #16
   12158:	movw	r4, #45296	; 0xb0f0
   1215c:	movw	r1, #49032	; 0xbf88
   12160:	movt	r4, #2
   12164:	movt	r1, #2
   12168:	ldrd	r2, [r4]
   1216c:	str	r0, [r1]
   12170:	adds	r2, r2, #1
   12174:	adc	r3, r3, #0
   12178:	strd	r2, [r4]
   1217c:	ldr	r2, [r1, #204]	; 0xcc
   12180:	cmp	r2, #49	; 0x31
   12184:	bhi	121ac <next@@Base+0x5c>
   12188:	ldrd	r6, [r4, #8]
   1218c:	add	r2, r1, r2, lsl #2
   12190:	add	r3, r4, #24
   12194:	str	r0, [r2, #4]
   12198:	ldr	r2, [r1, #204]	; 0xcc
   1219c:	adds	r6, r6, #1
   121a0:	adc	r7, r7, #0
   121a4:	strd	r6, [r4, #8]
   121a8:	b	121cc <next@@Base+0x7c>
   121ac:	ldrd	r6, [r4, #16]
   121b0:	ldr	r3, [r1, #212]	; 0xd4
   121b4:	adds	r6, r6, #1
   121b8:	add	r3, r3, #1
   121bc:	str	r3, [r1, #212]	; 0xd4
   121c0:	adc	r7, r7, #0
   121c4:	add	r3, r4, #32
   121c8:	strd	r6, [r4, #16]
   121cc:	ldrd	r6, [r3]
   121d0:	add	r2, r2, #1
   121d4:	str	r2, [r1, #204]	; 0xcc
   121d8:	movw	r2, #49268	; 0xc074
   121dc:	movt	r2, #2
   121e0:	adds	r6, r6, #1
   121e4:	adc	r7, r7, #0
   121e8:	strd	r6, [r3]
   121ec:	ldr	r3, [r2, #200]	; 0xc8
   121f0:	cmp	r3, #49	; 0x31
   121f4:	bhi	12224 <next@@Base+0xd4>
   121f8:	add	r7, r3, #1
   121fc:	str	r7, [r2, #200]	; 0xc8
   12200:	ldrd	r6, [r4, #40]	; 0x28
   12204:	adds	r6, r6, #1
   12208:	adc	r7, r7, #0
   1220c:	strd	r6, [r4, #40]	; 0x28
   12210:	movw	r7, #8528	; 0x2150
   12214:	movt	r7, #1
   12218:	str	r7, [r2, r3, lsl #2]
   1221c:	add	r2, r4, #56	; 0x38
   12220:	b	12228 <next@@Base+0xd8>
   12224:	add	r2, r4, #48	; 0x30
   12228:	ldrd	r6, [r2]
   1222c:	adds	r6, r6, #1
   12230:	adc	r7, r7, #0
   12234:	strd	r6, [r2]
   12238:	ldr	r2, [r1, #232]	; 0xe8
   1223c:	cmp	r2, #0
   12240:	beq	12280 <next@@Base+0x130>
   12244:	ldrd	r6, [r4, #64]	; 0x40
   12248:	adds	r6, r6, #1
   1224c:	adc	r7, r7, #0
   12250:	strd	r6, [r4, #64]	; 0x40
   12254:	blx	r2
   12258:	add	r2, r4, #80	; 0x50
   1225c:	ldrd	r6, [r2]
   12260:	adds	r6, r6, #1
   12264:	adc	r7, r7, #0
   12268:	strd	r6, [r2]
   1226c:	ldrd	r2, [r4, #144]	; 0x90
   12270:	adds	r2, r2, #1
   12274:	adc	r3, r3, #0
   12278:	strd	r2, [r4, #144]	; 0x90
   1227c:	pop	{r4, r6, r7, sl, fp, pc}
   12280:	ldr	r0, [r4, #72]	; 0x48
   12284:	ldr	r3, [r4, #76]	; 0x4c
   12288:	adds	r0, r0, #1
   1228c:	str	r0, [r4, #72]	; 0x48
   12290:	ldr	r0, [r1, #220]	; 0xdc
   12294:	adc	r3, r3, #0
   12298:	str	r3, [r4, #76]	; 0x4c
   1229c:	cmp	r0, #0
   122a0:	beq	122e8 <next@@Base+0x198>
   122a4:	ldrd	r2, [r4, #88]	; 0x58
   122a8:	adds	r2, r2, #1
   122ac:	adc	r3, r3, #0
   122b0:	strd	r2, [r4, #88]	; 0x58
   122b4:	ldr	r3, [r1, #224]	; 0xe0
   122b8:	ldr	r2, [r1, #228]	; 0xe4
   122bc:	cmp	r3, r0
   122c0:	bge	1230c <next@@Base+0x1bc>
   122c4:	add	r0, r3, #1
   122c8:	str	r0, [r1, #224]	; 0xe0
   122cc:	ldrd	r0, [r4, #104]	; 0x68
   122d0:	adds	r0, r0, #1
   122d4:	adc	r1, r1, #0
   122d8:	strd	r0, [r4, #104]	; 0x68
   122dc:	ldr	r0, [r2, r3, lsl #2]
   122e0:	add	r2, r4, #120	; 0x78
   122e4:	b	1225c <next@@Base+0x10c>
   122e8:	ldr	r0, [r4, #96]	; 0x60
   122ec:	ldr	r3, [r4, #100]	; 0x64
   122f0:	add	r2, r4, #136	; 0x88
   122f4:	adds	r0, r0, #1
   122f8:	str	r0, [r4, #96]	; 0x60
   122fc:	ldr	r0, [r1, #216]	; 0xd8
   12300:	adc	r3, r3, #0
   12304:	str	r3, [r4, #100]	; 0x64
   12308:	b	1225c <next@@Base+0x10c>
   1230c:	ldrd	r6, [r4, #112]	; 0x70
   12310:	add	r0, r2, r0, lsl #2
   12314:	add	r2, r4, #128	; 0x80
   12318:	adds	r6, r6, #1
   1231c:	adc	r7, r7, #0
   12320:	strd	r6, [r4, #112]	; 0x70
   12324:	ldr	r0, [r0, #-4]
   12328:	b	1225c <next@@Base+0x10c>
   1232c:	nop	{0}

00012330 <next_reset@@Base>:
   12330:	push	{r4, sl, fp, lr}
   12334:	add	fp, sp, #8
   12338:	movw	r0, #45456	; 0xb190
   1233c:	add	r1, pc, #52	; 0x34
   12340:	movw	r4, #49032	; 0xbf88
   12344:	mov	r2, #236	; 0xec
   12348:	movt	r0, #2
   1234c:	vld1.64	{d16-d17}, [r1]
   12350:	movt	r4, #2
   12354:	mov	r1, #0
   12358:	vld1.64	{d18-d19}, [r0 :128]
   1235c:	vadd.i64	q8, q9, q8
   12360:	vst1.64	{d16-d17}, [r0 :128]
   12364:	mov	r0, r4
   12368:	bl	11fb8 <memset@plt>
   1236c:	mov	r0, #50	; 0x32
   12370:	str	r0, [r4, #208]	; 0xd0
   12374:	pop	{r4, sl, fp, pc}
   12378:	andeq	r0, r0, r1
   1237c:	andeq	r0, r0, r0
   12380:	andeq	r0, r0, r1
   12384:	andeq	r0, r0, r0

00012388 <push_back@@Base>:
   12388:	push	{r4, r5, r6, r7, fp, lr}
   1238c:	add	fp, sp, #16
   12390:	movw	r4, #45472	; 0xb1a0
   12394:	movw	ip, #48608	; 0xbde0
   12398:	movt	r4, #2
   1239c:	movt	ip, #2
   123a0:	ldrd	r2, [r4]
   123a4:	str	r1, [ip, #204]	; 0xcc
   123a8:	str	r0, [ip]
   123ac:	adds	r2, r2, #1
   123b0:	adc	r3, r3, #0
   123b4:	strd	r2, [r4]
   123b8:	ldr	r3, [ip, #408]	; 0x198
   123bc:	cmp	r3, #49	; 0x31
   123c0:	bhi	123fc <push_back@@Base+0x74>
   123c4:	ldr	r2, [r4, #8]
   123c8:	ldr	r5, [r4, #12]
   123cc:	adds	r2, r2, #1
   123d0:	str	r2, [r4, #8]
   123d4:	add	r2, ip, r3, lsl #2
   123d8:	adc	r5, r5, #0
   123dc:	str	r5, [r4, #12]
   123e0:	str	r0, [r2, #4]
   123e4:	ldr	r2, [ip, #408]	; 0x198
   123e8:	add	r2, ip, r2, lsl #2
   123ec:	str	r1, [r2, #208]	; 0xd0
   123f0:	add	r2, r4, #24
   123f4:	ldr	r3, [ip, #408]	; 0x198
   123f8:	b	12420 <push_back@@Base+0x98>
   123fc:	ldr	r2, [r4, #16]
   12400:	ldr	r5, [r4, #20]
   12404:	adds	r6, r2, #1
   12408:	ldr	r2, [ip, #416]	; 0x1a0
   1240c:	adc	r7, r5, #0
   12410:	strd	r6, [r4, #16]
   12414:	add	r2, r2, #1
   12418:	str	r2, [ip, #416]	; 0x1a0
   1241c:	add	r2, r4, #32
   12420:	ldrd	r6, [r2]
   12424:	adds	r6, r6, #1
   12428:	adc	r7, r7, #0
   1242c:	strd	r6, [r2]
   12430:	add	r2, r3, #1
   12434:	str	r2, [ip, #408]	; 0x198
   12438:	movw	r2, #49268	; 0xc074
   1243c:	movt	r2, #2
   12440:	ldr	r3, [r2, #200]	; 0xc8
   12444:	cmp	r3, #49	; 0x31
   12448:	bhi	12478 <push_back@@Base+0xf0>
   1244c:	add	r7, r3, #1
   12450:	str	r7, [r2, #200]	; 0xc8
   12454:	ldrd	r6, [r4, #40]	; 0x28
   12458:	adds	r6, r6, #1
   1245c:	adc	r7, r7, #0
   12460:	strd	r6, [r4, #40]	; 0x28
   12464:	movw	r7, #9096	; 0x2388
   12468:	movt	r7, #1
   1246c:	str	r7, [r2, r3, lsl #2]
   12470:	add	r2, r4, #56	; 0x38
   12474:	b	1247c <push_back@@Base+0xf4>
   12478:	add	r2, r4, #48	; 0x30
   1247c:	ldrd	r6, [r2]
   12480:	adds	r6, r6, #1
   12484:	adc	r7, r7, #0
   12488:	strd	r6, [r2]
   1248c:	ldr	r2, [ip, #420]	; 0x1a4
   12490:	cmp	r2, #0
   12494:	beq	124b4 <push_back@@Base+0x12c>
   12498:	ldrd	r6, [r4, #64]	; 0x40
   1249c:	adds	r6, r6, #1
   124a0:	adc	r7, r7, #0
   124a4:	strd	r6, [r4, #64]	; 0x40
   124a8:	blx	r2
   124ac:	add	r0, r4, #80	; 0x50
   124b0:	b	124b8 <push_back@@Base+0x130>
   124b4:	add	r0, r4, #72	; 0x48
   124b8:	ldrd	r2, [r0]
   124bc:	adds	r2, r2, #1
   124c0:	adc	r3, r3, #0
   124c4:	strd	r2, [r0]
   124c8:	ldrd	r0, [r4, #88]	; 0x58
   124cc:	adds	r0, r0, #1
   124d0:	adc	r1, r1, #0
   124d4:	strd	r0, [r4, #88]	; 0x58
   124d8:	pop	{r4, r5, r6, r7, fp, pc}
   124dc:	nop	{0}

000124e0 <push_back_reset@@Base>:
   124e0:	push	{r4, sl, fp, lr}
   124e4:	add	fp, sp, #8
   124e8:	movw	r0, #45568	; 0xb200
   124ec:	add	r1, pc, #52	; 0x34
   124f0:	movw	r4, #48608	; 0xbde0
   124f4:	mov	r2, #424	; 0x1a8
   124f8:	movt	r0, #2
   124fc:	vld1.64	{d16-d17}, [r1]
   12500:	movt	r4, #2
   12504:	mov	r1, #0
   12508:	vld1.64	{d18-d19}, [r0 :128]
   1250c:	vadd.i64	q8, q9, q8
   12510:	vst1.64	{d16-d17}, [r0 :128]
   12514:	mov	r0, r4
   12518:	bl	11fb8 <memset@plt>
   1251c:	mov	r0, #50	; 0x32
   12520:	str	r0, [r4, #412]	; 0x19c
   12524:	pop	{r4, sl, fp, pc}
   12528:	andeq	r0, r0, r1
   1252c:	andeq	r0, r0, r0
   12530:	andeq	r0, r0, r1
   12534:	andeq	r0, r0, r0

00012538 <setup@@Base>:
   12538:	push	{r4, r5, fp, lr}
   1253c:	add	fp, sp, #8
   12540:	vpush	{d8-d9}
   12544:	movw	r0, #45456	; 0xb190
   12548:	movw	r1, #45584	; 0xb210
   1254c:	add	r2, pc, #124	; 0x7c
   12550:	movw	r4, #49032	; 0xbf88
   12554:	movt	r0, #2
   12558:	movt	r1, #2
   1255c:	vld1.64	{d8-d9}, [r2]
   12560:	movt	r4, #2
   12564:	mov	r2, #236	; 0xec
   12568:	vld1.64	{d16-d17}, [r1 :128]
   1256c:	vld1.64	{d18-d19}, [r0 :128]
   12570:	vadd.i64	q8, q8, q4
   12574:	vadd.i64	q9, q9, q4
   12578:	vst1.64	{d16-d17}, [r1 :128]
   1257c:	vst1.64	{d18-d19}, [r0 :128]
   12580:	mov	r0, r4
   12584:	mov	r1, #0
   12588:	bl	11fb8 <memset@plt>
   1258c:	movw	r0, #45568	; 0xb200
   12590:	mov	r5, #50	; 0x32
   12594:	mov	r1, #0
   12598:	mov	r2, #424	; 0x1a8
   1259c:	movt	r0, #2
   125a0:	str	r5, [r4, #208]	; 0xd0
   125a4:	movw	r4, #48608	; 0xbde0
   125a8:	movt	r4, #2
   125ac:	vld1.64	{d16-d17}, [r0 :128]
   125b0:	vadd.i64	q8, q8, q4
   125b4:	vst1.64	{d16-d17}, [r0 :128]
   125b8:	mov	r0, r4
   125bc:	bl	11fb8 <memset@plt>
   125c0:	str	r5, [r4, #412]	; 0x19c
   125c4:	vpop	{d8-d9}
   125c8:	pop	{r4, r5, fp, pc}
   125cc:	nop	{0}
   125d0:	andeq	r0, r0, r1
   125d4:	andeq	r0, r0, r0
   125d8:	andeq	r0, r0, r1
   125dc:	andeq	r0, r0, r0

000125e0 <no_int_as_first_stuff@@Base>:
   125e0:	push	{r4, r5, r6, r7, fp, lr}
   125e4:	add	fp, sp, #16
   125e8:	sub	sp, sp, #16
   125ec:	movw	r6, #45600	; 0xb220
   125f0:	mov	r4, sp
   125f4:	movt	r6, #2
   125f8:	ldrd	r0, [r6]
   125fc:	adds	r0, r0, #1
   12600:	adc	r1, r1, #0
   12604:	strd	r0, [r6]
   12608:	add	r1, sp, #4
   1260c:	mov	r0, r4
   12610:	bl	15848 <init_grammar@@Base>
   12614:	mov	r0, #4
   12618:	bl	11f28 <malloc@plt>
   1261c:	mov	r5, r0
   12620:	bl	144d8 <init_token_opar@@Base>
   12624:	movw	r7, #49032	; 0xbf88
   12628:	mov	r0, r4
   1262c:	movt	r7, #2
   12630:	str	r5, [r7, #216]	; 0xd8
   12634:	bl	158e0 <read_function_ast_node@@Base>
   12638:	ldr	r1, [r7, #204]	; 0xcc
   1263c:	cmp	r1, #1
   12640:	bne	12688 <no_int_as_first_stuff@@Base+0xa8>
   12644:	ldrd	r2, [r6, #8]
   12648:	adds	r2, r2, #1
   1264c:	adc	r3, r3, #0
   12650:	cmp	r0, #0
   12654:	strd	r2, [r6, #8]
   12658:	bne	126b4 <no_int_as_first_stuff@@Base+0xd4>
   1265c:	ldrd	r0, [r6, #24]
   12660:	ldrd	r2, [r6, #40]	; 0x28
   12664:	adds	r0, r0, #1
   12668:	adc	r1, r1, #0
   1266c:	adds	r2, r2, #1
   12670:	str	r2, [r6, #40]	; 0x28
   12674:	strd	r0, [r6, #24]
   12678:	adc	r0, r3, #0
   1267c:	str	r0, [r6, #44]	; 0x2c
   12680:	sub	sp, fp, #16
   12684:	pop	{r4, r5, r6, r7, fp, pc}
   12688:	ldrd	r0, [r6, #16]
   1268c:	movw	r3, #38930	; 0x9812
   12690:	mov	r2, #41	; 0x29
   12694:	movt	r3, #1
   12698:	adds	r0, r0, #1
   1269c:	adc	r1, r1, #0
   126a0:	strd	r0, [r6, #16]
   126a4:	movw	r0, #38836	; 0x97b4
   126a8:	movw	r1, #38862	; 0x97ce
   126ac:	movt	r0, #1
   126b0:	b	126dc <no_int_as_first_stuff@@Base+0xfc>
   126b4:	ldrd	r0, [r6, #32]
   126b8:	movw	r3, #38930	; 0x9812
   126bc:	mov	r2, #42	; 0x2a
   126c0:	movt	r3, #1
   126c4:	adds	r0, r0, #1
   126c8:	adc	r1, r1, #0
   126cc:	strd	r0, [r6, #32]
   126d0:	movw	r0, #38959	; 0x982f
   126d4:	movw	r1, #38862	; 0x97ce
   126d8:	movt	r0, #1
   126dc:	movt	r1, #1
   126e0:	bl	12054 <__assert_fail@plt>

000126e4 <int_but_not_followed_by_function@@Base>:
   126e4:	push	{r4, r5, r6, r7, fp, lr}
   126e8:	add	fp, sp, #16
   126ec:	sub	sp, sp, #16
   126f0:	movw	r6, #45648	; 0xb250
   126f4:	mov	r4, sp
   126f8:	movt	r6, #2
   126fc:	ldrd	r0, [r6]
   12700:	adds	r0, r0, #1
   12704:	adc	r1, r1, #0
   12708:	strd	r0, [r6]
   1270c:	add	r1, sp, #4
   12710:	mov	r0, r4
   12714:	bl	15848 <init_grammar@@Base>
   12718:	mov	r0, #8
   1271c:	bl	11f28 <malloc@plt>
   12720:	mov	r5, r0
   12724:	mov	r0, #4
   12728:	bl	11f28 <malloc@plt>
   1272c:	str	r0, [r5]
   12730:	bl	14420 <init_token_int_type@@Base>
   12734:	mov	r0, #4
   12738:	bl	11f28 <malloc@plt>
   1273c:	str	r0, [r5, #4]
   12740:	bl	144d8 <init_token_opar@@Base>
   12744:	movw	r7, #49032	; 0xbf88
   12748:	mov	r0, #2
   1274c:	movt	r7, #2
   12750:	str	r0, [r7, #220]	; 0xdc
   12754:	mov	r0, r4
   12758:	str	r5, [r7, #228]	; 0xe4
   1275c:	bl	158e0 <read_function_ast_node@@Base>
   12760:	ldr	r1, [r7, #204]	; 0xcc
   12764:	cmp	r1, #2
   12768:	bne	127b0 <int_but_not_followed_by_function@@Base+0xcc>
   1276c:	ldrd	r2, [r6, #8]
   12770:	adds	r2, r2, #1
   12774:	adc	r3, r3, #0
   12778:	cmp	r0, #0
   1277c:	strd	r2, [r6, #8]
   12780:	bne	127dc <int_but_not_followed_by_function@@Base+0xf8>
   12784:	ldrd	r0, [r6, #24]
   12788:	ldrd	r2, [r6, #40]	; 0x28
   1278c:	adds	r0, r0, #1
   12790:	adc	r1, r1, #0
   12794:	adds	r2, r2, #1
   12798:	str	r2, [r6, #40]	; 0x28
   1279c:	strd	r0, [r6, #24]
   127a0:	adc	r0, r3, #0
   127a4:	str	r0, [r6, #44]	; 0x2c
   127a8:	sub	sp, fp, #16
   127ac:	pop	{r4, r5, r6, r7, fp, pc}
   127b0:	ldrd	r0, [r6, #16]
   127b4:	movw	r3, #38997	; 0x9855
   127b8:	mov	r2, #67	; 0x43
   127bc:	movt	r3, #1
   127c0:	adds	r0, r0, #1
   127c4:	adc	r1, r1, #0
   127c8:	strd	r0, [r6, #16]
   127cc:	movw	r0, #38971	; 0x983b
   127d0:	movw	r1, #38862	; 0x97ce
   127d4:	movt	r0, #1
   127d8:	b	12804 <int_but_not_followed_by_function@@Base+0x120>
   127dc:	ldrd	r0, [r6, #32]
   127e0:	movw	r3, #38997	; 0x9855
   127e4:	mov	r2, #68	; 0x44
   127e8:	movt	r3, #1
   127ec:	adds	r0, r0, #1
   127f0:	adc	r1, r1, #0
   127f4:	strd	r0, [r6, #32]
   127f8:	movw	r0, #38959	; 0x982f
   127fc:	movw	r1, #38862	; 0x97ce
   12800:	movt	r0, #1
   12804:	movt	r1, #1
   12808:	bl	12054 <__assert_fail@plt>

0001280c <boolean_expression_is_read_properly@@Base>:
   1280c:	push	{r4, r5, r6, r7, fp, lr}
   12810:	add	fp, sp, #16
   12814:	sub	sp, sp, #16
   12818:	movw	r7, #45696	; 0xb280
   1281c:	movt	r7, #2
   12820:	ldrd	r0, [r7]
   12824:	adds	r0, r0, #1
   12828:	adc	r1, r1, #0
   1282c:	strd	r0, [r7]
   12830:	mov	r0, #3
   12834:	bl	11f28 <malloc@plt>
   12838:	mov	r6, r0
   1283c:	mov	r0, #0
   12840:	mov	r4, sp
   12844:	add	r1, sp, #4
   12848:	strb	r0, [r6, #2]
   1284c:	movw	r0, #15649	; 0x3d21
   12850:	strh	r0, [r6]
   12854:	mov	r0, r4
   12858:	bl	15848 <init_grammar@@Base>
   1285c:	mov	r0, #20
   12860:	bl	11f28 <malloc@plt>
   12864:	mov	r5, r0
   12868:	mov	r0, #8
   1286c:	bl	11f28 <malloc@plt>
   12870:	mov	r1, #2
   12874:	str	r0, [r5]
   12878:	bl	14458 <init_token_int_value@@Base>
   1287c:	mov	r0, #8
   12880:	bl	11f28 <malloc@plt>
   12884:	mov	r1, #2
   12888:	str	r0, [r5, #4]
   1288c:	bl	14458 <init_token_int_value@@Base>
   12890:	mov	r0, #8
   12894:	bl	11f28 <malloc@plt>
   12898:	mov	r1, r6
   1289c:	str	r0, [r5, #8]
   128a0:	bl	146d0 <init_token_boolean_op@@Base>
   128a4:	mov	r0, #8
   128a8:	bl	11f28 <malloc@plt>
   128ac:	mov	r1, #1
   128b0:	str	r0, [r5, #12]
   128b4:	bl	14458 <init_token_int_value@@Base>
   128b8:	mov	r0, #4
   128bc:	bl	11f28 <malloc@plt>
   128c0:	str	r0, [r5, #16]
   128c4:	bl	14510 <init_token_cpar@@Base>
   128c8:	movw	r6, #49032	; 0xbf88
   128cc:	mov	r0, #5
   128d0:	movt	r6, #2
   128d4:	str	r0, [r6, #220]	; 0xdc
   128d8:	mov	r0, r4
   128dc:	str	r5, [r6, #228]	; 0xe4
   128e0:	bl	15f00 <read_boolean_expression@@Base>
   128e4:	ldr	r1, [r6, #204]	; 0xcc
   128e8:	cmp	r1, #5
   128ec:	bne	1295c <boolean_expression_is_read_properly@@Base+0x150>
   128f0:	movw	r1, #48608	; 0xbde0
   128f4:	ldrd	r2, [r7, #8]
   128f8:	movt	r1, #2
   128fc:	ldr	r1, [r1, #408]	; 0x198
   12900:	adds	r2, r2, #1
   12904:	adc	r3, r3, #0
   12908:	strd	r2, [r7, #8]
   1290c:	cmp	r1, #1
   12910:	bne	12988 <boolean_expression_is_read_properly@@Base+0x17c>
   12914:	ldrd	r2, [r7, #24]
   12918:	adds	r2, r2, #1
   1291c:	adc	r3, r3, #0
   12920:	strd	r2, [r7, #24]
   12924:	ldr	r0, [r0]
   12928:	cmp	r0, #5
   1292c:	bne	129b4 <boolean_expression_is_read_properly@@Base+0x1a8>
   12930:	ldrd	r0, [r7, #40]	; 0x28
   12934:	ldrd	r2, [r7, #56]	; 0x38
   12938:	adds	r0, r0, #1
   1293c:	adc	r1, r1, #0
   12940:	adds	r2, r2, #1
   12944:	str	r2, [r7, #56]	; 0x38
   12948:	strd	r0, [r7, #40]	; 0x28
   1294c:	adc	r0, r3, #0
   12950:	str	r0, [r7, #60]	; 0x3c
   12954:	sub	sp, fp, #16
   12958:	pop	{r4, r5, r6, r7, fp, pc}
   1295c:	ldrd	r0, [r7, #16]
   12960:	movw	r3, #39063	; 0x9897
   12964:	mov	r2, #105	; 0x69
   12968:	movt	r3, #1
   1296c:	adds	r0, r0, #1
   12970:	adc	r1, r1, #0
   12974:	strd	r0, [r7, #16]
   12978:	movw	r0, #39037	; 0x987d
   1297c:	movw	r1, #38862	; 0x97ce
   12980:	movt	r0, #1
   12984:	b	129dc <boolean_expression_is_read_properly@@Base+0x1d0>
   12988:	ldrd	r0, [r7, #32]
   1298c:	movw	r3, #39063	; 0x9897
   12990:	mov	r2, #106	; 0x6a
   12994:	movt	r3, #1
   12998:	adds	r0, r0, #1
   1299c:	adc	r1, r1, #0
   129a0:	strd	r0, [r7, #32]
   129a4:	movw	r0, #39106	; 0x98c2
   129a8:	movw	r1, #38862	; 0x97ce
   129ac:	movt	r0, #1
   129b0:	b	129dc <boolean_expression_is_read_properly@@Base+0x1d0>
   129b4:	ldrd	r0, [r7, #48]	; 0x30
   129b8:	movw	r3, #39063	; 0x9897
   129bc:	mov	r2, #107	; 0x6b
   129c0:	movt	r3, #1
   129c4:	adds	r0, r0, #1
   129c8:	adc	r1, r1, #0
   129cc:	strd	r0, [r7, #48]	; 0x30
   129d0:	movw	r0, #39137	; 0x98e1
   129d4:	movw	r1, #38862	; 0x97ce
   129d8:	movt	r0, #1
   129dc:	movt	r1, #1
   129e0:	bl	12054 <__assert_fail@plt>

000129e4 <boolean_expression_complex@@Base>:
   129e4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   129e8:	add	fp, sp, #24
   129ec:	sub	sp, sp, #16
   129f0:	movw	r9, #45760	; 0xb2c0
   129f4:	movt	r9, #2
   129f8:	ldrd	r0, [r9]
   129fc:	adds	r0, r0, #1
   12a00:	adc	r1, r1, #0
   12a04:	strd	r0, [r9]
   12a08:	mov	r0, #3
   12a0c:	bl	11f28 <malloc@plt>
   12a10:	mov	r4, r0
   12a14:	mov	r0, #3
   12a18:	bl	11f28 <malloc@plt>
   12a1c:	mov	r7, r0
   12a20:	mov	r0, #3
   12a24:	bl	11f28 <malloc@plt>
   12a28:	mov	r6, r0
   12a2c:	mov	r0, #0
   12a30:	movw	r1, #15676	; 0x3d3c
   12a34:	mov	r8, sp
   12a38:	strb	r0, [r4, #2]
   12a3c:	strh	r1, [r4]
   12a40:	strb	r0, [r7, #2]
   12a44:	movw	r1, #9766	; 0x2626
   12a48:	strb	r0, [r6, #2]
   12a4c:	movw	r0, #15677	; 0x3d3d
   12a50:	strh	r1, [r7]
   12a54:	strh	r0, [r6]
   12a58:	add	r1, sp, #4
   12a5c:	mov	r0, r8
   12a60:	bl	15848 <init_grammar@@Base>
   12a64:	mov	r0, #40	; 0x28
   12a68:	bl	11f28 <malloc@plt>
   12a6c:	mov	r5, r0
   12a70:	mov	r0, #8
   12a74:	bl	11f28 <malloc@plt>
   12a78:	mov	r1, #2
   12a7c:	str	r0, [r5]
   12a80:	bl	14458 <init_token_int_value@@Base>
   12a84:	mov	r0, #8
   12a88:	bl	11f28 <malloc@plt>
   12a8c:	mov	r1, #2
   12a90:	str	r0, [r5, #4]
   12a94:	bl	14458 <init_token_int_value@@Base>
   12a98:	mov	r0, #8
   12a9c:	bl	11f28 <malloc@plt>
   12aa0:	mov	r1, r4
   12aa4:	str	r0, [r5, #8]
   12aa8:	bl	146d0 <init_token_boolean_op@@Base>
   12aac:	mov	r0, #8
   12ab0:	bl	11f28 <malloc@plt>
   12ab4:	mov	r1, #1
   12ab8:	str	r0, [r5, #12]
   12abc:	bl	14458 <init_token_int_value@@Base>
   12ac0:	mov	r0, #8
   12ac4:	bl	11f28 <malloc@plt>
   12ac8:	mov	r1, r7
   12acc:	str	r0, [r5, #16]
   12ad0:	bl	146d0 <init_token_boolean_op@@Base>
   12ad4:	mov	r0, #8
   12ad8:	bl	11f28 <malloc@plt>
   12adc:	mov	r1, #4
   12ae0:	str	r0, [r5, #20]
   12ae4:	bl	14458 <init_token_int_value@@Base>
   12ae8:	mov	r0, #8
   12aec:	bl	11f28 <malloc@plt>
   12af0:	mov	r1, #4
   12af4:	str	r0, [r5, #24]
   12af8:	bl	14458 <init_token_int_value@@Base>
   12afc:	mov	r0, #8
   12b00:	bl	11f28 <malloc@plt>
   12b04:	mov	r1, r6
   12b08:	str	r0, [r5, #28]
   12b0c:	bl	146d0 <init_token_boolean_op@@Base>
   12b10:	mov	r0, #8
   12b14:	bl	11f28 <malloc@plt>
   12b18:	mov	r1, #4
   12b1c:	str	r0, [r5, #32]
   12b20:	bl	14458 <init_token_int_value@@Base>
   12b24:	mov	r0, #4
   12b28:	bl	11f28 <malloc@plt>
   12b2c:	str	r0, [r5, #36]	; 0x24
   12b30:	bl	14510 <init_token_cpar@@Base>
   12b34:	movw	r4, #49032	; 0xbf88
   12b38:	mov	r0, #10
   12b3c:	movt	r4, #2
   12b40:	str	r0, [r4, #220]	; 0xdc
   12b44:	mov	r0, r8
   12b48:	str	r5, [r4, #228]	; 0xe4
   12b4c:	bl	15f00 <read_boolean_expression@@Base>
   12b50:	ldr	r1, [r4, #204]	; 0xcc
   12b54:	cmp	r1, #10
   12b58:	bne	12ba4 <boolean_expression_complex@@Base+0x1c0>
   12b5c:	ldrd	r2, [r9, #8]
   12b60:	adds	r2, r2, #1
   12b64:	adc	r3, r3, #0
   12b68:	strd	r2, [r9, #8]
   12b6c:	ldr	r0, [r0]
   12b70:	cmp	r0, #5
   12b74:	bne	12bd0 <boolean_expression_complex@@Base+0x1ec>
   12b78:	ldrd	r0, [r9, #24]
   12b7c:	ldrd	r2, [r9, #40]	; 0x28
   12b80:	adds	r0, r0, #1
   12b84:	adc	r1, r1, #0
   12b88:	adds	r2, r2, #1
   12b8c:	str	r2, [r9, #40]	; 0x28
   12b90:	strd	r0, [r9, #24]
   12b94:	adc	r0, r3, #0
   12b98:	str	r0, [r9, #44]	; 0x2c
   12b9c:	sub	sp, fp, #24
   12ba0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12ba4:	ldrd	r0, [r9, #16]
   12ba8:	movw	r3, #39196	; 0x991c
   12bac:	mov	r2, #166	; 0xa6
   12bb0:	movt	r3, #1
   12bb4:	adds	r0, r0, #1
   12bb8:	adc	r1, r1, #0
   12bbc:	strd	r0, [r9, #16]
   12bc0:	movw	r0, #39169	; 0x9901
   12bc4:	movw	r1, #38862	; 0x97ce
   12bc8:	movt	r0, #1
   12bcc:	b	12bf8 <boolean_expression_complex@@Base+0x214>
   12bd0:	ldrd	r0, [r9, #32]
   12bd4:	movw	r3, #39196	; 0x991c
   12bd8:	mov	r2, #167	; 0xa7
   12bdc:	movt	r3, #1
   12be0:	adds	r0, r0, #1
   12be4:	adc	r1, r1, #0
   12be8:	strd	r0, [r9, #32]
   12bec:	movw	r0, #39137	; 0x98e1
   12bf0:	movw	r1, #38862	; 0x97ce
   12bf4:	movt	r0, #1
   12bf8:	movt	r1, #1
   12bfc:	bl	12054 <__assert_fail@plt>

00012c00 <boolean_binary_operator_is_read_properly@@Base>:
   12c00:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12c04:	add	fp, sp, #24
   12c08:	sub	sp, sp, #16
   12c0c:	movw	r7, #45808	; 0xb2f0
   12c10:	mov	r8, #3
   12c14:	movt	r7, #2
   12c18:	ldrd	r0, [r7]
   12c1c:	adds	r0, r0, #1
   12c20:	adc	r1, r1, #0
   12c24:	strd	r0, [r7]
   12c28:	mov	r0, #3
   12c2c:	bl	11f28 <malloc@plt>
   12c30:	mov	r5, r0
   12c34:	mov	r0, #0
   12c38:	mov	r4, sp
   12c3c:	add	r1, sp, #4
   12c40:	strb	r0, [r5, #2]
   12c44:	movw	r0, #15649	; 0x3d21
   12c48:	strh	r0, [r5]
   12c4c:	mov	r0, r4
   12c50:	bl	15848 <init_grammar@@Base>
   12c54:	mov	r0, #12
   12c58:	bl	11f28 <malloc@plt>
   12c5c:	mov	r6, r0
   12c60:	mov	r0, #8
   12c64:	bl	11f28 <malloc@plt>
   12c68:	mov	r1, #2
   12c6c:	str	r0, [r6]
   12c70:	bl	14458 <init_token_int_value@@Base>
   12c74:	mov	r0, #8
   12c78:	bl	11f28 <malloc@plt>
   12c7c:	mov	r1, r5
   12c80:	str	r0, [r6, #4]
   12c84:	bl	146d0 <init_token_boolean_op@@Base>
   12c88:	mov	r0, #8
   12c8c:	bl	11f28 <malloc@plt>
   12c90:	mov	r1, #1
   12c94:	str	r0, [r6, #8]
   12c98:	bl	14458 <init_token_int_value@@Base>
   12c9c:	movw	r5, #49032	; 0xbf88
   12ca0:	mov	r0, r4
   12ca4:	movt	r5, #2
   12ca8:	str	r8, [r5, #220]	; 0xdc
   12cac:	str	r6, [r5, #228]	; 0xe4
   12cb0:	bl	161fc <read_boolean_binary_expression@@Base>
   12cb4:	ldr	r1, [r5, #204]	; 0xcc
   12cb8:	cmp	r1, #3
   12cbc:	bne	12d64 <boolean_binary_operator_is_read_properly@@Base+0x164>
   12cc0:	ldrd	r2, [r7, #8]
   12cc4:	adds	r2, r2, #1
   12cc8:	adc	r3, r3, #0
   12ccc:	strd	r2, [r7, #8]
   12cd0:	ldr	r1, [r0]
   12cd4:	cmp	r1, #5
   12cd8:	bne	12d90 <boolean_binary_operator_is_read_properly@@Base+0x190>
   12cdc:	ldrd	r2, [r7, #24]
   12ce0:	adds	r2, r2, #1
   12ce4:	adc	r3, r3, #0
   12ce8:	strd	r2, [r7, #24]
   12cec:	ldr	r1, [r0, #8]
   12cf0:	ldr	r1, [r1]
   12cf4:	cmp	r1, #1
   12cf8:	bne	12dbc <boolean_binary_operator_is_read_properly@@Base+0x1bc>
   12cfc:	ldrd	r2, [r7, #40]	; 0x28
   12d00:	adds	r2, r2, #1
   12d04:	adc	r3, r3, #0
   12d08:	strd	r2, [r7, #40]	; 0x28
   12d0c:	ldr	r1, [r0, #16]
   12d10:	cmp	r1, #1
   12d14:	bne	12de8 <boolean_binary_operator_is_read_properly@@Base+0x1e8>
   12d18:	ldrd	r2, [r7, #56]	; 0x38
   12d1c:	adds	r2, r2, #1
   12d20:	adc	r3, r3, #0
   12d24:	strd	r2, [r7, #56]	; 0x38
   12d28:	ldr	r0, [r0, #12]
   12d2c:	ldr	r0, [r0]
   12d30:	cmp	r0, #1
   12d34:	bne	12e14 <boolean_binary_operator_is_read_properly@@Base+0x214>
   12d38:	ldrd	r0, [r7, #72]	; 0x48
   12d3c:	ldrd	r2, [r7, #88]	; 0x58
   12d40:	adds	r0, r0, #1
   12d44:	adc	r1, r1, #0
   12d48:	adds	r2, r2, #1
   12d4c:	str	r2, [r7, #88]	; 0x58
   12d50:	strd	r0, [r7, #72]	; 0x48
   12d54:	adc	r0, r3, #0
   12d58:	str	r0, [r7, #92]	; 0x5c
   12d5c:	sub	sp, fp, #24
   12d60:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12d64:	ldrd	r0, [r7, #16]
   12d68:	movw	r3, #39256	; 0x9958
   12d6c:	mov	r2, #200	; 0xc8
   12d70:	movt	r3, #1
   12d74:	adds	r0, r0, #1
   12d78:	adc	r1, r1, #0
   12d7c:	strd	r0, [r7, #16]
   12d80:	movw	r0, #39230	; 0x993e
   12d84:	movw	r1, #38862	; 0x97ce
   12d88:	movt	r0, #1
   12d8c:	b	12e3c <boolean_binary_operator_is_read_properly@@Base+0x23c>
   12d90:	ldrd	r0, [r7, #32]
   12d94:	movw	r3, #39256	; 0x9958
   12d98:	mov	r2, #201	; 0xc9
   12d9c:	movt	r3, #1
   12da0:	adds	r0, r0, #1
   12da4:	adc	r1, r1, #0
   12da8:	strd	r0, [r7, #32]
   12dac:	movw	r0, #39137	; 0x98e1
   12db0:	movw	r1, #38862	; 0x97ce
   12db4:	movt	r0, #1
   12db8:	b	12e3c <boolean_binary_operator_is_read_properly@@Base+0x23c>
   12dbc:	ldrd	r0, [r7, #48]	; 0x30
   12dc0:	movw	r3, #39256	; 0x9958
   12dc4:	mov	r2, #203	; 0xcb
   12dc8:	movt	r3, #1
   12dcc:	adds	r0, r0, #1
   12dd0:	adc	r1, r1, #0
   12dd4:	strd	r0, [r7, #48]	; 0x30
   12dd8:	movw	r0, #39304	; 0x9988
   12ddc:	movw	r1, #38862	; 0x97ce
   12de0:	movt	r0, #1
   12de4:	b	12e3c <boolean_binary_operator_is_read_properly@@Base+0x23c>
   12de8:	ldrd	r0, [r7, #64]	; 0x40
   12dec:	movw	r3, #39256	; 0x9958
   12df0:	mov	r2, #204	; 0xcc
   12df4:	movt	r3, #1
   12df8:	adds	r0, r0, #1
   12dfc:	adc	r1, r1, #0
   12e00:	strd	r0, [r7, #64]	; 0x40
   12e04:	movw	r0, #39331	; 0x99a3
   12e08:	movw	r1, #38862	; 0x97ce
   12e0c:	movt	r0, #1
   12e10:	b	12e3c <boolean_binary_operator_is_read_properly@@Base+0x23c>
   12e14:	ldrd	r0, [r7, #80]	; 0x50
   12e18:	movw	r3, #39256	; 0x9958
   12e1c:	mov	r2, #205	; 0xcd
   12e20:	movt	r3, #1
   12e24:	adds	r0, r0, #1
   12e28:	adc	r1, r1, #0
   12e2c:	strd	r0, [r7, #80]	; 0x50
   12e30:	movw	r0, #39356	; 0x99bc
   12e34:	movw	r1, #38862	; 0x97ce
   12e38:	movt	r0, #1
   12e3c:	movt	r1, #1
   12e40:	bl	12054 <__assert_fail@plt>

00012e44 <boolean_unary_operator_is_read_properly@@Base>:
   12e44:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12e48:	add	fp, sp, #24
   12e4c:	sub	sp, sp, #16
   12e50:	movw	r7, #45904	; 0xb350
   12e54:	mov	r8, #2
   12e58:	movt	r7, #2
   12e5c:	ldrd	r0, [r7]
   12e60:	adds	r0, r0, #1
   12e64:	adc	r1, r1, #0
   12e68:	strd	r0, [r7]
   12e6c:	mov	r0, #2
   12e70:	bl	11f28 <malloc@plt>
   12e74:	mov	r5, r0
   12e78:	mov	r0, #33	; 0x21
   12e7c:	mov	r4, sp
   12e80:	add	r1, sp, #4
   12e84:	strh	r0, [r5]
   12e88:	mov	r0, r4
   12e8c:	bl	15848 <init_grammar@@Base>
   12e90:	mov	r0, #8
   12e94:	bl	11f28 <malloc@plt>
   12e98:	mov	r6, r0
   12e9c:	mov	r0, #8
   12ea0:	bl	11f28 <malloc@plt>
   12ea4:	mov	r1, r5
   12ea8:	str	r0, [r6]
   12eac:	bl	146d0 <init_token_boolean_op@@Base>
   12eb0:	mov	r0, #8
   12eb4:	bl	11f28 <malloc@plt>
   12eb8:	mov	r1, #1
   12ebc:	str	r0, [r6, #4]
   12ec0:	bl	14458 <init_token_int_value@@Base>
   12ec4:	movw	r5, #49032	; 0xbf88
   12ec8:	mov	r0, r4
   12ecc:	movt	r5, #2
   12ed0:	str	r8, [r5, #220]	; 0xdc
   12ed4:	str	r6, [r5, #228]	; 0xe4
   12ed8:	bl	163d4 <read_boolean_unary_expression@@Base>
   12edc:	ldr	r1, [r5, #204]	; 0xcc
   12ee0:	cmp	r1, #2
   12ee4:	bne	12f88 <boolean_unary_operator_is_read_properly@@Base+0x144>
   12ee8:	ldrd	r2, [r7, #8]
   12eec:	adds	r2, r2, #1
   12ef0:	adc	r3, r3, #0
   12ef4:	strd	r2, [r7, #8]
   12ef8:	ldr	r1, [r0]
   12efc:	cmp	r1, #5
   12f00:	bne	12fb4 <boolean_unary_operator_is_read_properly@@Base+0x170>
   12f04:	ldrd	r2, [r7, #24]
   12f08:	adds	r2, r2, #1
   12f0c:	adc	r3, r3, #0
   12f10:	strd	r2, [r7, #24]
   12f14:	ldr	r1, [r0, #8]
   12f18:	ldr	r1, [r1]
   12f1c:	cmp	r1, #1
   12f20:	bne	12fe0 <boolean_unary_operator_is_read_properly@@Base+0x19c>
   12f24:	ldrd	r2, [r7, #40]	; 0x28
   12f28:	adds	r2, r2, #1
   12f2c:	adc	r3, r3, #0
   12f30:	strd	r2, [r7, #40]	; 0x28
   12f34:	ldr	r1, [r0, #16]
   12f38:	cmp	r1, #8
   12f3c:	bne	1300c <boolean_unary_operator_is_read_properly@@Base+0x1c8>
   12f40:	ldrd	r2, [r7, #56]	; 0x38
   12f44:	adds	r2, r2, #1
   12f48:	adc	r3, r3, #0
   12f4c:	strd	r2, [r7, #56]	; 0x38
   12f50:	ldr	r0, [r0, #12]
   12f54:	cmp	r0, #0
   12f58:	bne	13038 <boolean_unary_operator_is_read_properly@@Base+0x1f4>
   12f5c:	ldrd	r0, [r7, #72]	; 0x48
   12f60:	ldrd	r2, [r7, #88]	; 0x58
   12f64:	adds	r0, r0, #1
   12f68:	adc	r1, r1, #0
   12f6c:	adds	r2, r2, #1
   12f70:	str	r2, [r7, #88]	; 0x58
   12f74:	strd	r0, [r7, #72]	; 0x48
   12f78:	adc	r0, r3, #0
   12f7c:	str	r0, [r7, #92]	; 0x5c
   12f80:	sub	sp, fp, #24
   12f84:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12f88:	ldrd	r0, [r7, #16]
   12f8c:	movw	r3, #39384	; 0x99d8
   12f90:	mov	r2, #235	; 0xeb
   12f94:	movt	r3, #1
   12f98:	adds	r0, r0, #1
   12f9c:	adc	r1, r1, #0
   12fa0:	strd	r0, [r7, #16]
   12fa4:	movw	r0, #38971	; 0x983b
   12fa8:	movw	r1, #38862	; 0x97ce
   12fac:	movt	r0, #1
   12fb0:	b	13060 <boolean_unary_operator_is_read_properly@@Base+0x21c>
   12fb4:	ldrd	r0, [r7, #32]
   12fb8:	movw	r3, #39384	; 0x99d8
   12fbc:	mov	r2, #236	; 0xec
   12fc0:	movt	r3, #1
   12fc4:	adds	r0, r0, #1
   12fc8:	adc	r1, r1, #0
   12fcc:	strd	r0, [r7, #32]
   12fd0:	movw	r0, #39137	; 0x98e1
   12fd4:	movw	r1, #38862	; 0x97ce
   12fd8:	movt	r0, #1
   12fdc:	b	13060 <boolean_unary_operator_is_read_properly@@Base+0x21c>
   12fe0:	ldrd	r0, [r7, #48]	; 0x30
   12fe4:	movw	r3, #39384	; 0x99d8
   12fe8:	mov	r2, #238	; 0xee
   12fec:	movt	r3, #1
   12ff0:	adds	r0, r0, #1
   12ff4:	adc	r1, r1, #0
   12ff8:	strd	r0, [r7, #48]	; 0x30
   12ffc:	movw	r0, #39304	; 0x9988
   13000:	movw	r1, #38862	; 0x97ce
   13004:	movt	r0, #1
   13008:	b	13060 <boolean_unary_operator_is_read_properly@@Base+0x21c>
   1300c:	ldrd	r0, [r7, #64]	; 0x40
   13010:	movw	r3, #39384	; 0x99d8
   13014:	mov	r2, #239	; 0xef
   13018:	movt	r3, #1
   1301c:	adds	r0, r0, #1
   13020:	adc	r1, r1, #0
   13024:	strd	r0, [r7, #64]	; 0x40
   13028:	movw	r0, #39431	; 0x9a07
   1302c:	movw	r1, #38862	; 0x97ce
   13030:	movt	r0, #1
   13034:	b	13060 <boolean_unary_operator_is_read_properly@@Base+0x21c>
   13038:	ldrd	r0, [r7, #80]	; 0x50
   1303c:	movw	r3, #39384	; 0x99d8
   13040:	mov	r2, #240	; 0xf0
   13044:	movt	r3, #1
   13048:	adds	r0, r0, #1
   1304c:	adc	r1, r1, #0
   13050:	strd	r0, [r7, #80]	; 0x50
   13054:	movw	r0, #39451	; 0x9a1b
   13058:	movw	r1, #38862	; 0x97ce
   1305c:	movt	r0, #1
   13060:	movt	r1, #1
   13064:	bl	12054 <__assert_fail@plt>

00013068 <if_statement_only@@Base>:
   13068:	push	{r4, r5, r6, r7, fp, lr}
   1306c:	add	fp, sp, #16
   13070:	sub	sp, sp, #16
   13074:	movw	r7, #46000	; 0xb3b0
   13078:	mov	r4, sp
   1307c:	movt	r7, #2
   13080:	ldrd	r0, [r7]
   13084:	adds	r0, r0, #1
   13088:	adc	r1, r1, #0
   1308c:	strd	r0, [r7]
   13090:	add	r1, sp, #4
   13094:	mov	r0, r4
   13098:	bl	15848 <init_grammar@@Base>
   1309c:	mov	r0, #3
   130a0:	bl	11f28 <malloc@plt>
   130a4:	mov	r6, r0
   130a8:	mov	r0, #0
   130ac:	strb	r0, [r6, #2]
   130b0:	movw	r0, #15649	; 0x3d21
   130b4:	strh	r0, [r6]
   130b8:	mov	r0, #36	; 0x24
   130bc:	bl	11f28 <malloc@plt>
   130c0:	mov	r5, r0
   130c4:	mov	r0, #4
   130c8:	bl	11f28 <malloc@plt>
   130cc:	str	r0, [r5]
   130d0:	bl	144d8 <init_token_opar@@Base>
   130d4:	mov	r0, #8
   130d8:	bl	11f28 <malloc@plt>
   130dc:	mov	r1, #1
   130e0:	str	r0, [r5, #4]
   130e4:	bl	14458 <init_token_int_value@@Base>
   130e8:	mov	r0, #8
   130ec:	bl	11f28 <malloc@plt>
   130f0:	mov	r1, #1
   130f4:	str	r0, [r5, #8]
   130f8:	bl	14458 <init_token_int_value@@Base>
   130fc:	mov	r0, #8
   13100:	bl	11f28 <malloc@plt>
   13104:	mov	r1, r6
   13108:	str	r0, [r5, #12]
   1310c:	bl	146d0 <init_token_boolean_op@@Base>
   13110:	mov	r0, #8
   13114:	bl	11f28 <malloc@plt>
   13118:	mov	r1, #1
   1311c:	str	r0, [r5, #16]
   13120:	bl	14458 <init_token_int_value@@Base>
   13124:	mov	r0, #4
   13128:	bl	11f28 <malloc@plt>
   1312c:	str	r0, [r5, #20]
   13130:	bl	14510 <init_token_cpar@@Base>
   13134:	mov	r0, #4
   13138:	bl	11f28 <malloc@plt>
   1313c:	str	r0, [r5, #24]
   13140:	bl	14548 <init_token_obra@@Base>
   13144:	mov	r0, #4
   13148:	bl	11f28 <malloc@plt>
   1314c:	str	r0, [r5, #28]
   13150:	bl	14580 <init_token_cbra@@Base>
   13154:	mov	r0, #4
   13158:	bl	11f28 <malloc@plt>
   1315c:	str	r0, [r5, #32]
   13160:	bl	14628 <init_token_eof@@Base>
   13164:	movw	r6, #49032	; 0xbf88
   13168:	mov	r0, #9
   1316c:	movt	r6, #2
   13170:	str	r0, [r6, #220]	; 0xdc
   13174:	mov	r0, r4
   13178:	str	r5, [r6, #228]	; 0xe4
   1317c:	bl	15db4 <read_if_statement@@Base>
   13180:	ldr	r1, [r6, #204]	; 0xcc
   13184:	cmp	r1, #9
   13188:	bne	131ec <if_statement_only@@Base+0x184>
   1318c:	ldrd	r2, [r7, #8]
   13190:	adds	r2, r2, #1
   13194:	adc	r3, r3, #0
   13198:	cmp	r0, #0
   1319c:	strd	r2, [r7, #8]
   131a0:	beq	13218 <if_statement_only@@Base+0x1b0>
   131a4:	ldrd	r2, [r7, #24]
   131a8:	adds	r2, r2, #1
   131ac:	adc	r3, r3, #0
   131b0:	strd	r2, [r7, #24]
   131b4:	ldr	r0, [r0]
   131b8:	cmp	r0, #4
   131bc:	bne	13244 <if_statement_only@@Base+0x1dc>
   131c0:	ldrd	r0, [r7, #40]	; 0x28
   131c4:	ldrd	r2, [r7, #56]	; 0x38
   131c8:	adds	r0, r0, #1
   131cc:	adc	r1, r1, #0
   131d0:	adds	r2, r2, #1
   131d4:	str	r2, [r7, #56]	; 0x38
   131d8:	strd	r0, [r7, #40]	; 0x28
   131dc:	adc	r0, r3, #0
   131e0:	str	r0, [r7, #60]	; 0x3c
   131e4:	sub	sp, fp, #16
   131e8:	pop	{r4, r5, r6, r7, fp, pc}
   131ec:	ldrd	r0, [r7, #16]
   131f0:	movw	r3, #39498	; 0x9a4a
   131f4:	movw	r2, #283	; 0x11b
   131f8:	movt	r3, #1
   131fc:	adds	r0, r0, #1
   13200:	adc	r1, r1, #0
   13204:	strd	r0, [r7, #16]
   13208:	movw	r0, #39472	; 0x9a30
   1320c:	movw	r1, #38862	; 0x97ce
   13210:	movt	r0, #1
   13214:	b	1326c <if_statement_only@@Base+0x204>
   13218:	ldrd	r0, [r7, #32]
   1321c:	movw	r3, #39498	; 0x9a4a
   13220:	mov	r2, #284	; 0x11c
   13224:	movt	r3, #1
   13228:	adds	r0, r0, #1
   1322c:	adc	r1, r1, #0
   13230:	strd	r0, [r7, #32]
   13234:	movw	r0, #39523	; 0x9a63
   13238:	movw	r1, #38862	; 0x97ce
   1323c:	movt	r0, #1
   13240:	b	1326c <if_statement_only@@Base+0x204>
   13244:	ldrd	r0, [r7, #48]	; 0x30
   13248:	movw	r3, #39498	; 0x9a4a
   1324c:	movw	r2, #285	; 0x11d
   13250:	movt	r3, #1
   13254:	adds	r0, r0, #1
   13258:	adc	r1, r1, #0
   1325c:	strd	r0, [r7, #48]	; 0x30
   13260:	movw	r0, #39535	; 0x9a6f
   13264:	movw	r1, #38862	; 0x97ce
   13268:	movt	r0, #1
   1326c:	movt	r1, #1
   13270:	bl	12054 <__assert_fail@plt>

00013274 <if_else_statements@@Base>:
   13274:	push	{r4, r5, r6, r7, fp, lr}
   13278:	add	fp, sp, #16
   1327c:	sub	sp, sp, #16
   13280:	movw	r7, #46064	; 0xb3f0
   13284:	mov	r4, sp
   13288:	movt	r7, #2
   1328c:	ldrd	r0, [r7]
   13290:	adds	r0, r0, #1
   13294:	adc	r1, r1, #0
   13298:	strd	r0, [r7]
   1329c:	add	r1, sp, #4
   132a0:	mov	r0, r4
   132a4:	bl	15848 <init_grammar@@Base>
   132a8:	mov	r0, #3
   132ac:	bl	11f28 <malloc@plt>
   132b0:	mov	r6, r0
   132b4:	mov	r0, #0
   132b8:	strb	r0, [r6, #2]
   132bc:	movw	r0, #15649	; 0x3d21
   132c0:	strh	r0, [r6]
   132c4:	mov	r0, #44	; 0x2c
   132c8:	bl	11f28 <malloc@plt>
   132cc:	mov	r5, r0
   132d0:	mov	r0, #4
   132d4:	bl	11f28 <malloc@plt>
   132d8:	str	r0, [r5]
   132dc:	bl	144d8 <init_token_opar@@Base>
   132e0:	mov	r0, #8
   132e4:	bl	11f28 <malloc@plt>
   132e8:	mov	r1, #1
   132ec:	str	r0, [r5, #4]
   132f0:	bl	14458 <init_token_int_value@@Base>
   132f4:	mov	r0, #8
   132f8:	bl	11f28 <malloc@plt>
   132fc:	mov	r1, #1
   13300:	str	r0, [r5, #8]
   13304:	bl	14458 <init_token_int_value@@Base>
   13308:	mov	r0, #8
   1330c:	bl	11f28 <malloc@plt>
   13310:	mov	r1, r6
   13314:	str	r0, [r5, #12]
   13318:	bl	146d0 <init_token_boolean_op@@Base>
   1331c:	mov	r0, #8
   13320:	bl	11f28 <malloc@plt>
   13324:	mov	r1, #1
   13328:	str	r0, [r5, #16]
   1332c:	bl	14458 <init_token_int_value@@Base>
   13330:	mov	r0, #4
   13334:	bl	11f28 <malloc@plt>
   13338:	str	r0, [r5, #20]
   1333c:	bl	14510 <init_token_cpar@@Base>
   13340:	mov	r0, #4
   13344:	bl	11f28 <malloc@plt>
   13348:	str	r0, [r5, #24]
   1334c:	bl	14548 <init_token_obra@@Base>
   13350:	mov	r0, #4
   13354:	bl	11f28 <malloc@plt>
   13358:	str	r0, [r5, #28]
   1335c:	bl	14580 <init_token_cbra@@Base>
   13360:	mov	r0, #4
   13364:	bl	11f28 <malloc@plt>
   13368:	str	r0, [r5, #32]
   1336c:	bl	14698 <init_token_else@@Base>
   13370:	mov	r0, #4
   13374:	bl	11f28 <malloc@plt>
   13378:	str	r0, [r5, #36]	; 0x24
   1337c:	bl	14548 <init_token_obra@@Base>
   13380:	mov	r0, #4
   13384:	bl	11f28 <malloc@plt>
   13388:	str	r0, [r5, #40]	; 0x28
   1338c:	bl	14580 <init_token_cbra@@Base>
   13390:	movw	r6, #49032	; 0xbf88
   13394:	mov	r0, #11
   13398:	movt	r6, #2
   1339c:	str	r0, [r6, #220]	; 0xdc
   133a0:	mov	r0, r4
   133a4:	str	r5, [r6, #228]	; 0xe4
   133a8:	bl	15db4 <read_if_statement@@Base>
   133ac:	ldr	r1, [r6, #204]	; 0xcc
   133b0:	cmp	r1, #11
   133b4:	bne	13418 <if_else_statements@@Base+0x1a4>
   133b8:	ldrd	r2, [r7, #8]
   133bc:	adds	r2, r2, #1
   133c0:	adc	r3, r3, #0
   133c4:	cmp	r0, #0
   133c8:	strd	r2, [r7, #8]
   133cc:	beq	13444 <if_else_statements@@Base+0x1d0>
   133d0:	ldrd	r2, [r7, #24]
   133d4:	adds	r2, r2, #1
   133d8:	adc	r3, r3, #0
   133dc:	strd	r2, [r7, #24]
   133e0:	ldr	r0, [r0]
   133e4:	cmp	r0, #4
   133e8:	bne	13470 <if_else_statements@@Base+0x1fc>
   133ec:	ldrd	r0, [r7, #40]	; 0x28
   133f0:	ldrd	r2, [r7, #56]	; 0x38
   133f4:	adds	r0, r0, #1
   133f8:	adc	r1, r1, #0
   133fc:	adds	r2, r2, #1
   13400:	str	r2, [r7, #56]	; 0x38
   13404:	strd	r0, [r7, #40]	; 0x28
   13408:	adc	r0, r3, #0
   1340c:	str	r0, [r7, #60]	; 0x3c
   13410:	sub	sp, fp, #16
   13414:	pop	{r4, r5, r6, r7, fp, pc}
   13418:	ldrd	r0, [r7, #16]
   1341c:	movw	r3, #39580	; 0x9a9c
   13420:	mov	r2, #332	; 0x14c
   13424:	movt	r3, #1
   13428:	adds	r0, r0, #1
   1342c:	adc	r1, r1, #0
   13430:	strd	r0, [r7, #16]
   13434:	movw	r0, #39553	; 0x9a81
   13438:	movw	r1, #38862	; 0x97ce
   1343c:	movt	r0, #1
   13440:	b	13498 <if_else_statements@@Base+0x224>
   13444:	ldrd	r0, [r7, #32]
   13448:	movw	r3, #39580	; 0x9a9c
   1344c:	movw	r2, #333	; 0x14d
   13450:	movt	r3, #1
   13454:	adds	r0, r0, #1
   13458:	adc	r1, r1, #0
   1345c:	strd	r0, [r7, #32]
   13460:	movw	r0, #39523	; 0x9a63
   13464:	movw	r1, #38862	; 0x97ce
   13468:	movt	r0, #1
   1346c:	b	13498 <if_else_statements@@Base+0x224>
   13470:	ldrd	r0, [r7, #48]	; 0x30
   13474:	movw	r3, #39580	; 0x9a9c
   13478:	movw	r2, #334	; 0x14e
   1347c:	movt	r3, #1
   13480:	adds	r0, r0, #1
   13484:	adc	r1, r1, #0
   13488:	strd	r0, [r7, #48]	; 0x30
   1348c:	movw	r0, #39535	; 0x9a6f
   13490:	movw	r1, #38862	; 0x97ce
   13494:	movt	r0, #1
   13498:	movt	r1, #1
   1349c:	bl	12054 <__assert_fail@plt>

000134a0 <body_with_two_returns@@Base>:
   134a0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   134a4:	add	fp, sp, #24
   134a8:	sub	sp, sp, #16
   134ac:	movw	r6, #46128	; 0xb430
   134b0:	mov	r4, sp
   134b4:	movt	r6, #2
   134b8:	ldrd	r0, [r6]
   134bc:	adds	r0, r0, #1
   134c0:	adc	r1, r1, #0
   134c4:	strd	r0, [r6]
   134c8:	add	r1, sp, #4
   134cc:	mov	r0, r4
   134d0:	bl	15848 <init_grammar@@Base>
   134d4:	mov	r0, #32
   134d8:	bl	11f28 <malloc@plt>
   134dc:	mov	r5, r0
   134e0:	mov	r0, #4
   134e4:	bl	11f28 <malloc@plt>
   134e8:	str	r0, [r5]
   134ec:	bl	14548 <init_token_obra@@Base>
   134f0:	mov	r0, #4
   134f4:	bl	11f28 <malloc@plt>
   134f8:	str	r0, [r5, #4]
   134fc:	bl	145b8 <init_token_return@@Base>
   13500:	mov	r0, #8
   13504:	mov	r8, #8
   13508:	bl	11f28 <malloc@plt>
   1350c:	mov	r1, #1
   13510:	str	r0, [r5, #8]
   13514:	bl	14458 <init_token_int_value@@Base>
   13518:	mov	r0, #4
   1351c:	bl	11f28 <malloc@plt>
   13520:	str	r0, [r5, #12]
   13524:	bl	145f0 <init_token_semicolon@@Base>
   13528:	mov	r0, #4
   1352c:	bl	11f28 <malloc@plt>
   13530:	str	r0, [r5, #16]
   13534:	bl	145b8 <init_token_return@@Base>
   13538:	mov	r0, #8
   1353c:	bl	11f28 <malloc@plt>
   13540:	mov	r1, #1
   13544:	str	r0, [r5, #20]
   13548:	bl	14458 <init_token_int_value@@Base>
   1354c:	mov	r0, #4
   13550:	bl	11f28 <malloc@plt>
   13554:	str	r0, [r5, #24]
   13558:	bl	145f0 <init_token_semicolon@@Base>
   1355c:	mov	r0, #4
   13560:	bl	11f28 <malloc@plt>
   13564:	str	r0, [r5, #28]
   13568:	bl	14580 <init_token_cbra@@Base>
   1356c:	movw	r7, #49032	; 0xbf88
   13570:	mov	r0, r4
   13574:	movt	r7, #2
   13578:	str	r8, [r7, #220]	; 0xdc
   1357c:	str	r5, [r7, #228]	; 0xe4
   13580:	bl	15a6c <read_body@@Base>
   13584:	ldr	r1, [r7, #204]	; 0xcc
   13588:	cmp	r1, #8
   1358c:	bne	1362c <body_with_two_returns@@Base+0x18c>
   13590:	ldrd	r2, [r6, #8]
   13594:	adds	r2, r2, #1
   13598:	adc	r3, r3, #0
   1359c:	cmp	r0, #0
   135a0:	strd	r2, [r6, #8]
   135a4:	beq	13658 <body_with_two_returns@@Base+0x1b8>
   135a8:	ldrd	r2, [r6, #24]
   135ac:	adds	r2, r2, #1
   135b0:	adc	r3, r3, #0
   135b4:	strd	r2, [r6, #24]
   135b8:	ldr	r1, [r0]
   135bc:	cmp	r1, #3
   135c0:	bne	13684 <body_with_two_returns@@Base+0x1e4>
   135c4:	ldrd	r2, [r6, #40]	; 0x28
   135c8:	adds	r2, r2, #1
   135cc:	adc	r3, r3, #0
   135d0:	strd	r2, [r6, #40]	; 0x28
   135d4:	ldr	r0, [r0, #4]
   135d8:	ldr	r1, [r0]
   135dc:	cmp	r1, #3
   135e0:	bne	136b0 <body_with_two_returns@@Base+0x210>
   135e4:	ldrd	r2, [r6, #56]	; 0x38
   135e8:	adds	r2, r2, #1
   135ec:	adc	r3, r3, #0
   135f0:	strd	r2, [r6, #56]	; 0x38
   135f4:	ldr	r0, [r0, #4]
   135f8:	cmp	r0, #0
   135fc:	bne	136dc <body_with_two_returns@@Base+0x23c>
   13600:	ldrd	r0, [r6, #72]	; 0x48
   13604:	ldrd	r2, [r6, #88]	; 0x58
   13608:	adds	r0, r0, #1
   1360c:	adc	r1, r1, #0
   13610:	adds	r2, r2, #1
   13614:	str	r2, [r6, #88]	; 0x58
   13618:	strd	r0, [r6, #72]	; 0x48
   1361c:	adc	r0, r3, #0
   13620:	str	r0, [r6, #92]	; 0x5c
   13624:	sub	sp, fp, #24
   13628:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1362c:	ldrd	r0, [r6, #16]
   13630:	movw	r3, #39632	; 0x9ad0
   13634:	movw	r2, #371	; 0x173
   13638:	movt	r3, #1
   1363c:	adds	r0, r0, #1
   13640:	adc	r1, r1, #0
   13644:	strd	r0, [r6, #16]
   13648:	movw	r0, #39606	; 0x9ab6
   1364c:	movw	r1, #38862	; 0x97ce
   13650:	movt	r0, #1
   13654:	b	13704 <body_with_two_returns@@Base+0x264>
   13658:	ldrd	r0, [r6, #32]
   1365c:	movw	r3, #39632	; 0x9ad0
   13660:	mov	r2, #372	; 0x174
   13664:	movt	r3, #1
   13668:	adds	r0, r0, #1
   1366c:	adc	r1, r1, #0
   13670:	strd	r0, [r6, #32]
   13674:	movw	r0, #39523	; 0x9a63
   13678:	movw	r1, #38862	; 0x97ce
   1367c:	movt	r0, #1
   13680:	b	13704 <body_with_two_returns@@Base+0x264>
   13684:	ldrd	r0, [r6, #48]	; 0x30
   13688:	movw	r3, #39632	; 0x9ad0
   1368c:	movw	r2, #373	; 0x175
   13690:	movt	r3, #1
   13694:	adds	r0, r0, #1
   13698:	adc	r1, r1, #0
   1369c:	strd	r0, [r6, #48]	; 0x30
   136a0:	movw	r0, #39661	; 0x9aed
   136a4:	movw	r1, #38862	; 0x97ce
   136a8:	movt	r0, #1
   136ac:	b	13704 <body_with_two_returns@@Base+0x264>
   136b0:	ldrd	r0, [r6, #64]	; 0x40
   136b4:	movw	r3, #39632	; 0x9ad0
   136b8:	movw	r2, #374	; 0x176
   136bc:	movt	r3, #1
   136c0:	adds	r0, r0, #1
   136c4:	adc	r1, r1, #0
   136c8:	strd	r0, [r6, #64]	; 0x40
   136cc:	movw	r0, #39683	; 0x9b03
   136d0:	movw	r1, #38862	; 0x97ce
   136d4:	movt	r0, #1
   136d8:	b	13704 <body_with_two_returns@@Base+0x264>
   136dc:	ldrd	r0, [r6, #80]	; 0x50
   136e0:	movw	r3, #39632	; 0x9ad0
   136e4:	movw	r2, #375	; 0x177
   136e8:	movt	r3, #1
   136ec:	adds	r0, r0, #1
   136f0:	adc	r1, r1, #0
   136f4:	strd	r0, [r6, #80]	; 0x50
   136f8:	movw	r0, #39711	; 0x9b1f
   136fc:	movw	r1, #38862	; 0x97ce
   13700:	movt	r0, #1
   13704:	movt	r1, #1
   13708:	bl	12054 <__assert_fail@plt>

0001370c <body_with_one_return@@Base>:
   1370c:	push	{r4, r5, r6, r7, fp, lr}
   13710:	add	fp, sp, #16
   13714:	sub	sp, sp, #16
   13718:	movw	r6, #46224	; 0xb490
   1371c:	mov	r4, sp
   13720:	movt	r6, #2
   13724:	ldrd	r0, [r6]
   13728:	adds	r0, r0, #1
   1372c:	adc	r1, r1, #0
   13730:	strd	r0, [r6]
   13734:	add	r1, sp, #4
   13738:	mov	r0, r4
   1373c:	bl	15848 <init_grammar@@Base>
   13740:	mov	r0, #20
   13744:	bl	11f28 <malloc@plt>
   13748:	mov	r5, r0
   1374c:	mov	r0, #4
   13750:	bl	11f28 <malloc@plt>
   13754:	str	r0, [r5]
   13758:	bl	14548 <init_token_obra@@Base>
   1375c:	mov	r0, #4
   13760:	bl	11f28 <malloc@plt>
   13764:	str	r0, [r5, #4]
   13768:	bl	145b8 <init_token_return@@Base>
   1376c:	mov	r0, #8
   13770:	bl	11f28 <malloc@plt>
   13774:	mov	r1, #1
   13778:	str	r0, [r5, #8]
   1377c:	bl	14458 <init_token_int_value@@Base>
   13780:	mov	r0, #4
   13784:	bl	11f28 <malloc@plt>
   13788:	str	r0, [r5, #12]
   1378c:	bl	145f0 <init_token_semicolon@@Base>
   13790:	mov	r0, #4
   13794:	bl	11f28 <malloc@plt>
   13798:	str	r0, [r5, #16]
   1379c:	bl	14580 <init_token_cbra@@Base>
   137a0:	movw	r7, #49032	; 0xbf88
   137a4:	mov	r0, #5
   137a8:	movt	r7, #2
   137ac:	str	r0, [r7, #220]	; 0xdc
   137b0:	mov	r0, r4
   137b4:	str	r5, [r7, #228]	; 0xe4
   137b8:	bl	15a6c <read_body@@Base>
   137bc:	ldr	r1, [r7, #204]	; 0xcc
   137c0:	cmp	r1, #5
   137c4:	bne	13844 <body_with_one_return@@Base+0x138>
   137c8:	ldrd	r2, [r6, #8]
   137cc:	adds	r2, r2, #1
   137d0:	adc	r3, r3, #0
   137d4:	cmp	r0, #0
   137d8:	strd	r2, [r6, #8]
   137dc:	beq	13870 <body_with_one_return@@Base+0x164>
   137e0:	ldrd	r2, [r6, #24]
   137e4:	adds	r2, r2, #1
   137e8:	adc	r3, r3, #0
   137ec:	strd	r2, [r6, #24]
   137f0:	ldr	r1, [r0]
   137f4:	cmp	r1, #3
   137f8:	bne	1389c <body_with_one_return@@Base+0x190>
   137fc:	ldrd	r2, [r6, #40]	; 0x28
   13800:	adds	r2, r2, #1
   13804:	adc	r3, r3, #0
   13808:	strd	r2, [r6, #40]	; 0x28
   1380c:	ldr	r0, [r0, #4]
   13810:	cmp	r0, #0
   13814:	bne	138c8 <body_with_one_return@@Base+0x1bc>
   13818:	ldrd	r0, [r6, #56]	; 0x38
   1381c:	ldrd	r2, [r6, #72]	; 0x48
   13820:	adds	r0, r0, #1
   13824:	adc	r1, r1, #0
   13828:	adds	r2, r2, #1
   1382c:	str	r2, [r6, #72]	; 0x48
   13830:	strd	r0, [r6, #56]	; 0x38
   13834:	adc	r0, r3, #0
   13838:	str	r0, [r6, #76]	; 0x4c
   1383c:	sub	sp, fp, #16
   13840:	pop	{r4, r5, r6, r7, fp, pc}
   13844:	ldrd	r0, [r6, #16]
   13848:	movw	r3, #39735	; 0x9b37
   1384c:	movw	r2, #406	; 0x196
   13850:	movt	r3, #1
   13854:	adds	r0, r0, #1
   13858:	adc	r1, r1, #0
   1385c:	strd	r0, [r6, #16]
   13860:	movw	r0, #39037	; 0x987d
   13864:	movw	r1, #38862	; 0x97ce
   13868:	movt	r0, #1
   1386c:	b	138f0 <body_with_one_return@@Base+0x1e4>
   13870:	ldrd	r0, [r6, #32]
   13874:	movw	r3, #39735	; 0x9b37
   13878:	movw	r2, #407	; 0x197
   1387c:	movt	r3, #1
   13880:	adds	r0, r0, #1
   13884:	adc	r1, r1, #0
   13888:	strd	r0, [r6, #32]
   1388c:	movw	r0, #39523	; 0x9a63
   13890:	movw	r1, #38862	; 0x97ce
   13894:	movt	r0, #1
   13898:	b	138f0 <body_with_one_return@@Base+0x1e4>
   1389c:	ldrd	r0, [r6, #48]	; 0x30
   138a0:	movw	r3, #39735	; 0x9b37
   138a4:	mov	r2, #408	; 0x198
   138a8:	movt	r3, #1
   138ac:	adds	r0, r0, #1
   138b0:	adc	r1, r1, #0
   138b4:	strd	r0, [r6, #48]	; 0x30
   138b8:	movw	r0, #39661	; 0x9aed
   138bc:	movw	r1, #38862	; 0x97ce
   138c0:	movt	r0, #1
   138c4:	b	138f0 <body_with_one_return@@Base+0x1e4>
   138c8:	ldrd	r0, [r6, #64]	; 0x40
   138cc:	movw	r3, #39735	; 0x9b37
   138d0:	movw	r2, #409	; 0x199
   138d4:	movt	r3, #1
   138d8:	adds	r0, r0, #1
   138dc:	adc	r1, r1, #0
   138e0:	strd	r0, [r6, #64]	; 0x40
   138e4:	movw	r0, #39763	; 0x9b53
   138e8:	movw	r1, #38862	; 0x97ce
   138ec:	movt	r0, #1
   138f0:	movt	r1, #1
   138f4:	bl	12054 <__assert_fail@plt>

000138f8 <if_statement_inside_if_statement@@Base>:
   138f8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   138fc:	add	fp, sp, #24
   13900:	sub	sp, sp, #16
   13904:	movw	r4, #46304	; 0xb4e0
   13908:	mov	r8, sp
   1390c:	movt	r4, #2
   13910:	ldrd	r0, [r4]
   13914:	adds	r0, r0, #1
   13918:	adc	r1, r1, #0
   1391c:	strd	r0, [r4]
   13920:	add	r1, sp, #4
   13924:	mov	r0, r8
   13928:	bl	15848 <init_grammar@@Base>
   1392c:	mov	r0, #3
   13930:	bl	11f28 <malloc@plt>
   13934:	mov	r7, r0
   13938:	mov	r0, #3
   1393c:	bl	11f28 <malloc@plt>
   13940:	mov	r6, r0
   13944:	mov	r0, #0
   13948:	movw	r1, #15649	; 0x3d21
   1394c:	strb	r0, [r7, #2]
   13950:	strb	r0, [r6, #2]
   13954:	mov	r0, #76	; 0x4c
   13958:	strh	r1, [r7]
   1395c:	strh	r1, [r6]
   13960:	bl	11f28 <malloc@plt>
   13964:	mov	r5, r0
   13968:	mov	r0, #4
   1396c:	bl	11f28 <malloc@plt>
   13970:	str	r0, [r5]
   13974:	bl	144d8 <init_token_opar@@Base>
   13978:	mov	r0, #8
   1397c:	bl	11f28 <malloc@plt>
   13980:	mov	r1, #1
   13984:	str	r0, [r5, #4]
   13988:	bl	14458 <init_token_int_value@@Base>
   1398c:	mov	r0, #8
   13990:	bl	11f28 <malloc@plt>
   13994:	mov	r1, #1
   13998:	str	r0, [r5, #8]
   1399c:	bl	14458 <init_token_int_value@@Base>
   139a0:	mov	r0, #8
   139a4:	bl	11f28 <malloc@plt>
   139a8:	mov	r1, r7
   139ac:	str	r0, [r5, #12]
   139b0:	bl	146d0 <init_token_boolean_op@@Base>
   139b4:	mov	r0, #8
   139b8:	bl	11f28 <malloc@plt>
   139bc:	mov	r1, #1
   139c0:	str	r0, [r5, #16]
   139c4:	bl	14458 <init_token_int_value@@Base>
   139c8:	mov	r0, #4
   139cc:	bl	11f28 <malloc@plt>
   139d0:	str	r0, [r5, #20]
   139d4:	bl	14510 <init_token_cpar@@Base>
   139d8:	mov	r0, #4
   139dc:	bl	11f28 <malloc@plt>
   139e0:	str	r0, [r5, #24]
   139e4:	bl	14548 <init_token_obra@@Base>
   139e8:	mov	r0, #4
   139ec:	bl	11f28 <malloc@plt>
   139f0:	str	r0, [r5, #28]
   139f4:	bl	14660 <init_token_if@@Base>
   139f8:	mov	r0, #4
   139fc:	bl	11f28 <malloc@plt>
   13a00:	str	r0, [r5, #32]
   13a04:	bl	144d8 <init_token_opar@@Base>
   13a08:	mov	r0, #8
   13a0c:	bl	11f28 <malloc@plt>
   13a10:	mov	r1, #1
   13a14:	str	r0, [r5, #36]	; 0x24
   13a18:	bl	14458 <init_token_int_value@@Base>
   13a1c:	mov	r0, #8
   13a20:	bl	11f28 <malloc@plt>
   13a24:	mov	r1, #1
   13a28:	str	r0, [r5, #40]	; 0x28
   13a2c:	bl	14458 <init_token_int_value@@Base>
   13a30:	mov	r0, #8
   13a34:	bl	11f28 <malloc@plt>
   13a38:	mov	r1, r6
   13a3c:	str	r0, [r5, #44]	; 0x2c
   13a40:	bl	146d0 <init_token_boolean_op@@Base>
   13a44:	mov	r0, #8
   13a48:	bl	11f28 <malloc@plt>
   13a4c:	mov	r1, #1
   13a50:	str	r0, [r5, #48]	; 0x30
   13a54:	bl	14458 <init_token_int_value@@Base>
   13a58:	mov	r0, #4
   13a5c:	bl	11f28 <malloc@plt>
   13a60:	str	r0, [r5, #52]	; 0x34
   13a64:	bl	14510 <init_token_cpar@@Base>
   13a68:	mov	r0, #4
   13a6c:	bl	11f28 <malloc@plt>
   13a70:	str	r0, [r5, #56]	; 0x38
   13a74:	bl	14548 <init_token_obra@@Base>
   13a78:	mov	r0, #4
   13a7c:	bl	11f28 <malloc@plt>
   13a80:	str	r0, [r5, #60]	; 0x3c
   13a84:	bl	14580 <init_token_cbra@@Base>
   13a88:	mov	r0, #4
   13a8c:	bl	11f28 <malloc@plt>
   13a90:	str	r0, [r5, #64]	; 0x40
   13a94:	bl	14580 <init_token_cbra@@Base>
   13a98:	mov	r0, #4
   13a9c:	bl	11f28 <malloc@plt>
   13aa0:	str	r0, [r5, #68]	; 0x44
   13aa4:	bl	14580 <init_token_cbra@@Base>
   13aa8:	mov	r0, #4
   13aac:	bl	11f28 <malloc@plt>
   13ab0:	str	r0, [r5, #72]	; 0x48
   13ab4:	bl	14628 <init_token_eof@@Base>
   13ab8:	movw	r6, #49032	; 0xbf88
   13abc:	mov	r0, #19
   13ac0:	movt	r6, #2
   13ac4:	str	r0, [r6, #220]	; 0xdc
   13ac8:	mov	r0, r8
   13acc:	str	r5, [r6, #228]	; 0xe4
   13ad0:	bl	15db4 <read_if_statement@@Base>
   13ad4:	ldr	r1, [r6, #204]	; 0xcc
   13ad8:	cmp	r1, #19
   13adc:	bne	13b40 <if_statement_inside_if_statement@@Base+0x248>
   13ae0:	ldrd	r2, [r4, #8]
   13ae4:	adds	r2, r2, #1
   13ae8:	adc	r3, r3, #0
   13aec:	cmp	r0, #0
   13af0:	strd	r2, [r4, #8]
   13af4:	beq	13b6c <if_statement_inside_if_statement@@Base+0x274>
   13af8:	ldrd	r2, [r4, #24]
   13afc:	adds	r2, r2, #1
   13b00:	adc	r3, r3, #0
   13b04:	strd	r2, [r4, #24]
   13b08:	ldr	r0, [r0]
   13b0c:	cmp	r0, #4
   13b10:	bne	13b98 <if_statement_inside_if_statement@@Base+0x2a0>
   13b14:	ldrd	r0, [r4, #40]	; 0x28
   13b18:	ldrd	r2, [r4, #56]	; 0x38
   13b1c:	adds	r0, r0, #1
   13b20:	adc	r1, r1, #0
   13b24:	adds	r2, r2, #1
   13b28:	str	r2, [r4, #56]	; 0x38
   13b2c:	strd	r0, [r4, #40]	; 0x28
   13b30:	adc	r0, r3, #0
   13b34:	str	r0, [r4, #60]	; 0x3c
   13b38:	sub	sp, fp, #24
   13b3c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13b40:	ldrd	r0, [r4, #16]
   13b44:	movw	r3, #39808	; 0x9b80
   13b48:	mov	r2, #480	; 0x1e0
   13b4c:	movt	r3, #1
   13b50:	adds	r0, r0, #1
   13b54:	adc	r1, r1, #0
   13b58:	strd	r0, [r4, #16]
   13b5c:	movw	r0, #39781	; 0x9b65
   13b60:	movw	r1, #38862	; 0x97ce
   13b64:	movt	r0, #1
   13b68:	b	13bc0 <if_statement_inside_if_statement@@Base+0x2c8>
   13b6c:	ldrd	r0, [r4, #32]
   13b70:	movw	r3, #39808	; 0x9b80
   13b74:	movw	r2, #481	; 0x1e1
   13b78:	movt	r3, #1
   13b7c:	adds	r0, r0, #1
   13b80:	adc	r1, r1, #0
   13b84:	strd	r0, [r4, #32]
   13b88:	movw	r0, #39523	; 0x9a63
   13b8c:	movw	r1, #38862	; 0x97ce
   13b90:	movt	r0, #1
   13b94:	b	13bc0 <if_statement_inside_if_statement@@Base+0x2c8>
   13b98:	ldrd	r0, [r4, #48]	; 0x30
   13b9c:	movw	r3, #39808	; 0x9b80
   13ba0:	movw	r2, #482	; 0x1e2
   13ba4:	movt	r3, #1
   13ba8:	adds	r0, r0, #1
   13bac:	adc	r1, r1, #0
   13bb0:	strd	r0, [r4, #48]	; 0x30
   13bb4:	movw	r0, #39535	; 0x9a6f
   13bb8:	movw	r1, #38862	; 0x97ce
   13bbc:	movt	r0, #1
   13bc0:	movt	r1, #1
   13bc4:	bl	12054 <__assert_fail@plt>

00013bc8 <if_statement_inside_else_statement@@Base>:
   13bc8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13bcc:	add	fp, sp, #24
   13bd0:	sub	sp, sp, #16
   13bd4:	movw	r4, #46368	; 0xb520
   13bd8:	mov	r8, sp
   13bdc:	movt	r4, #2
   13be0:	ldrd	r0, [r4]
   13be4:	adds	r0, r0, #1
   13be8:	adc	r1, r1, #0
   13bec:	strd	r0, [r4]
   13bf0:	add	r1, sp, #4
   13bf4:	mov	r0, r8
   13bf8:	bl	15848 <init_grammar@@Base>
   13bfc:	mov	r0, #3
   13c00:	bl	11f28 <malloc@plt>
   13c04:	mov	r7, r0
   13c08:	mov	r0, #3
   13c0c:	bl	11f28 <malloc@plt>
   13c10:	mov	r6, r0
   13c14:	mov	r0, #0
   13c18:	movw	r1, #15649	; 0x3d21
   13c1c:	strb	r0, [r7, #2]
   13c20:	strb	r0, [r6, #2]
   13c24:	mov	r0, #84	; 0x54
   13c28:	strh	r1, [r7]
   13c2c:	strh	r1, [r6]
   13c30:	bl	11f28 <malloc@plt>
   13c34:	mov	r5, r0
   13c38:	mov	r0, #4
   13c3c:	bl	11f28 <malloc@plt>
   13c40:	str	r0, [r5]
   13c44:	bl	144d8 <init_token_opar@@Base>
   13c48:	mov	r0, #8
   13c4c:	bl	11f28 <malloc@plt>
   13c50:	mov	r1, #1
   13c54:	str	r0, [r5, #4]
   13c58:	bl	14458 <init_token_int_value@@Base>
   13c5c:	mov	r0, #8
   13c60:	bl	11f28 <malloc@plt>
   13c64:	mov	r1, #1
   13c68:	str	r0, [r5, #8]
   13c6c:	bl	14458 <init_token_int_value@@Base>
   13c70:	mov	r0, #8
   13c74:	bl	11f28 <malloc@plt>
   13c78:	mov	r1, r7
   13c7c:	str	r0, [r5, #12]
   13c80:	bl	146d0 <init_token_boolean_op@@Base>
   13c84:	mov	r0, #8
   13c88:	bl	11f28 <malloc@plt>
   13c8c:	mov	r1, #1
   13c90:	str	r0, [r5, #16]
   13c94:	bl	14458 <init_token_int_value@@Base>
   13c98:	mov	r0, #4
   13c9c:	bl	11f28 <malloc@plt>
   13ca0:	str	r0, [r5, #20]
   13ca4:	bl	14510 <init_token_cpar@@Base>
   13ca8:	mov	r0, #4
   13cac:	bl	11f28 <malloc@plt>
   13cb0:	str	r0, [r5, #24]
   13cb4:	bl	14548 <init_token_obra@@Base>
   13cb8:	mov	r0, #4
   13cbc:	bl	11f28 <malloc@plt>
   13cc0:	str	r0, [r5, #28]
   13cc4:	bl	14580 <init_token_cbra@@Base>
   13cc8:	mov	r0, #4
   13ccc:	bl	11f28 <malloc@plt>
   13cd0:	str	r0, [r5, #32]
   13cd4:	bl	14698 <init_token_else@@Base>
   13cd8:	mov	r0, #4
   13cdc:	bl	11f28 <malloc@plt>
   13ce0:	str	r0, [r5, #36]	; 0x24
   13ce4:	bl	14548 <init_token_obra@@Base>
   13ce8:	mov	r0, #4
   13cec:	bl	11f28 <malloc@plt>
   13cf0:	str	r0, [r5, #40]	; 0x28
   13cf4:	bl	14660 <init_token_if@@Base>
   13cf8:	mov	r0, #4
   13cfc:	bl	11f28 <malloc@plt>
   13d00:	str	r0, [r5, #44]	; 0x2c
   13d04:	bl	144d8 <init_token_opar@@Base>
   13d08:	mov	r0, #8
   13d0c:	bl	11f28 <malloc@plt>
   13d10:	mov	r1, #1
   13d14:	str	r0, [r5, #48]	; 0x30
   13d18:	bl	14458 <init_token_int_value@@Base>
   13d1c:	mov	r0, #8
   13d20:	bl	11f28 <malloc@plt>
   13d24:	mov	r1, #1
   13d28:	str	r0, [r5, #52]	; 0x34
   13d2c:	bl	14458 <init_token_int_value@@Base>
   13d30:	mov	r0, #8
   13d34:	bl	11f28 <malloc@plt>
   13d38:	mov	r1, r6
   13d3c:	str	r0, [r5, #56]	; 0x38
   13d40:	bl	146d0 <init_token_boolean_op@@Base>
   13d44:	mov	r0, #8
   13d48:	bl	11f28 <malloc@plt>
   13d4c:	mov	r1, #1
   13d50:	str	r0, [r5, #60]	; 0x3c
   13d54:	bl	14458 <init_token_int_value@@Base>
   13d58:	mov	r0, #4
   13d5c:	bl	11f28 <malloc@plt>
   13d60:	str	r0, [r5, #64]	; 0x40
   13d64:	bl	14510 <init_token_cpar@@Base>
   13d68:	mov	r0, #4
   13d6c:	bl	11f28 <malloc@plt>
   13d70:	str	r0, [r5, #68]	; 0x44
   13d74:	bl	14548 <init_token_obra@@Base>
   13d78:	mov	r0, #4
   13d7c:	bl	11f28 <malloc@plt>
   13d80:	str	r0, [r5, #72]	; 0x48
   13d84:	bl	14580 <init_token_cbra@@Base>
   13d88:	mov	r0, #4
   13d8c:	bl	11f28 <malloc@plt>
   13d90:	str	r0, [r5, #76]	; 0x4c
   13d94:	bl	14580 <init_token_cbra@@Base>
   13d98:	mov	r0, #4
   13d9c:	bl	11f28 <malloc@plt>
   13da0:	str	r0, [r5, #80]	; 0x50
   13da4:	bl	14580 <init_token_cbra@@Base>
   13da8:	movw	r6, #49032	; 0xbf88
   13dac:	mov	r0, #21
   13db0:	movt	r6, #2
   13db4:	str	r0, [r6, #220]	; 0xdc
   13db8:	mov	r0, r8
   13dbc:	str	r5, [r6, #228]	; 0xe4
   13dc0:	bl	15db4 <read_if_statement@@Base>
   13dc4:	ldr	r1, [r6, #204]	; 0xcc
   13dc8:	cmp	r1, #21
   13dcc:	bne	13e30 <if_statement_inside_else_statement@@Base+0x268>
   13dd0:	ldrd	r2, [r4, #8]
   13dd4:	adds	r2, r2, #1
   13dd8:	adc	r3, r3, #0
   13ddc:	cmp	r0, #0
   13de0:	strd	r2, [r4, #8]
   13de4:	beq	13e5c <if_statement_inside_else_statement@@Base+0x294>
   13de8:	ldrd	r2, [r4, #24]
   13dec:	adds	r2, r2, #1
   13df0:	adc	r3, r3, #0
   13df4:	strd	r2, [r4, #24]
   13df8:	ldr	r0, [r0]
   13dfc:	cmp	r0, #4
   13e00:	bne	13e88 <if_statement_inside_else_statement@@Base+0x2c0>
   13e04:	ldrd	r0, [r4, #40]	; 0x28
   13e08:	ldrd	r2, [r4, #56]	; 0x38
   13e0c:	adds	r0, r0, #1
   13e10:	adc	r1, r1, #0
   13e14:	adds	r2, r2, #1
   13e18:	str	r2, [r4, #56]	; 0x38
   13e1c:	strd	r0, [r4, #40]	; 0x28
   13e20:	adc	r0, r3, #0
   13e24:	str	r0, [r4, #60]	; 0x3c
   13e28:	sub	sp, fp, #24
   13e2c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13e30:	ldrd	r0, [r4, #16]
   13e34:	movw	r3, #39875	; 0x9bc3
   13e38:	movw	r2, #558	; 0x22e
   13e3c:	movt	r3, #1
   13e40:	adds	r0, r0, #1
   13e44:	adc	r1, r1, #0
   13e48:	strd	r0, [r4, #16]
   13e4c:	movw	r0, #39848	; 0x9ba8
   13e50:	movw	r1, #38862	; 0x97ce
   13e54:	movt	r0, #1
   13e58:	b	13eb0 <if_statement_inside_else_statement@@Base+0x2e8>
   13e5c:	ldrd	r0, [r4, #32]
   13e60:	movw	r3, #39875	; 0x9bc3
   13e64:	movw	r2, #559	; 0x22f
   13e68:	movt	r3, #1
   13e6c:	adds	r0, r0, #1
   13e70:	adc	r1, r1, #0
   13e74:	strd	r0, [r4, #32]
   13e78:	movw	r0, #39523	; 0x9a63
   13e7c:	movw	r1, #38862	; 0x97ce
   13e80:	movt	r0, #1
   13e84:	b	13eb0 <if_statement_inside_else_statement@@Base+0x2e8>
   13e88:	ldrd	r0, [r4, #48]	; 0x30
   13e8c:	movw	r3, #39875	; 0x9bc3
   13e90:	mov	r2, #560	; 0x230
   13e94:	movt	r3, #1
   13e98:	adds	r0, r0, #1
   13e9c:	adc	r1, r1, #0
   13ea0:	strd	r0, [r4, #48]	; 0x30
   13ea4:	movw	r0, #39535	; 0x9a6f
   13ea8:	movw	r1, #38862	; 0x97ce
   13eac:	movt	r0, #1
   13eb0:	movt	r1, #1
   13eb4:	bl	12054 <__assert_fail@plt>

00013eb8 <main@@Base>:
   13eb8:	push	{r4, r5, r6, r7, fp, lr}
   13ebc:	add	fp, sp, #16
   13ec0:	movw	r0, #46432	; 0xb560
   13ec4:	add	r1, pc, #620	; 0x26c
   13ec8:	movw	r5, #45284	; 0xb0e4
   13ecc:	movt	r0, #2
   13ed0:	vld1.64	{d16-d17}, [r1]
   13ed4:	movt	r5, #2
   13ed8:	mov	r1, #0
   13edc:	vld1.64	{d18-d19}, [r0 :128]
   13ee0:	vadd.i64	q8, q9, q8
   13ee4:	vst1.64	{d16-d17}, [r0 :128]
   13ee8:	ldr	r0, [r5]
   13eec:	bl	11e74 <setbuf@plt>
   13ef0:	movw	r4, #40518	; 0x9e46
   13ef4:	ldr	r3, [r5]
   13ef8:	mov	r1, #14
   13efc:	mov	r2, #1
   13f00:	movt	r4, #1
   13f04:	mov	r0, r4
   13f08:	bl	11ef8 <fwrite@plt>
   13f0c:	ldr	r3, [r5]
   13f10:	movw	r0, #39917	; 0x9bed
   13f14:	mov	r1, #14
   13f18:	mov	r2, #1
   13f1c:	movt	r0, #1
   13f20:	bl	11ef8 <fwrite@plt>
   13f24:	ldr	r3, [r5]
   13f28:	movw	r0, #39932	; 0x9bfc
   13f2c:	mov	r1, #15
   13f30:	mov	r2, #1
   13f34:	movt	r0, #1
   13f38:	bl	11ef8 <fwrite@plt>
   13f3c:	mov	r0, #0
   13f40:	bl	11e98 <fflush@plt>
   13f44:	movw	r5, #39948	; 0x9c0c
   13f48:	movw	r6, #39966	; 0x9c1e
   13f4c:	movw	r2, #40133	; 0x9cc5
   13f50:	movt	r5, #1
   13f54:	movt	r6, #1
   13f58:	movt	r2, #1
   13f5c:	mov	r0, r5
   13f60:	mov	r1, r6
   13f64:	bl	11e8c <printf@plt>
   13f68:	bl	12538 <setup@@Base>
   13f6c:	bl	125e0 <no_int_as_first_stuff@@Base>
   13f70:	movw	r7, #40485	; 0x9e25
   13f74:	movt	r7, #1
   13f78:	mov	r0, r7
   13f7c:	bl	11f1c <puts@plt>
   13f80:	movw	r2, #40155	; 0x9cdb
   13f84:	mov	r0, r5
   13f88:	mov	r1, r6
   13f8c:	movt	r2, #1
   13f90:	bl	11e8c <printf@plt>
   13f94:	bl	12538 <setup@@Base>
   13f98:	bl	126e4 <int_but_not_followed_by_function@@Base>
   13f9c:	mov	r0, r7
   13fa0:	bl	11f1c <puts@plt>
   13fa4:	movw	r2, #40292	; 0x9d64
   13fa8:	mov	r0, r5
   13fac:	mov	r1, r6
   13fb0:	movt	r2, #1
   13fb4:	bl	11e8c <printf@plt>
   13fb8:	bl	12538 <setup@@Base>
   13fbc:	bl	12e44 <boolean_unary_operator_is_read_properly@@Base>
   13fc0:	mov	r0, r7
   13fc4:	bl	11f1c <puts@plt>
   13fc8:	movw	r2, #40251	; 0x9d3b
   13fcc:	mov	r0, r5
   13fd0:	mov	r1, r6
   13fd4:	movt	r2, #1
   13fd8:	bl	11e8c <printf@plt>
   13fdc:	bl	12538 <setup@@Base>
   13fe0:	bl	12c00 <boolean_binary_operator_is_read_properly@@Base>
   13fe4:	mov	r0, r7
   13fe8:	bl	11f1c <puts@plt>
   13fec:	movw	r2, #40188	; 0x9cfc
   13ff0:	mov	r0, r5
   13ff4:	mov	r1, r6
   13ff8:	movt	r2, #1
   13ffc:	bl	11e8c <printf@plt>
   14000:	bl	12538 <setup@@Base>
   14004:	bl	1280c <boolean_expression_is_read_properly@@Base>
   14008:	mov	r0, r7
   1400c:	bl	11f1c <puts@plt>
   14010:	movw	r2, #40224	; 0x9d20
   14014:	mov	r0, r5
   14018:	mov	r1, r6
   1401c:	movt	r2, #1
   14020:	bl	11e8c <printf@plt>
   14024:	bl	12538 <setup@@Base>
   14028:	bl	129e4 <boolean_expression_complex@@Base>
   1402c:	mov	r0, r7
   14030:	bl	11f1c <puts@plt>
   14034:	movw	r2, #40332	; 0x9d8c
   14038:	mov	r0, r5
   1403c:	mov	r1, r6
   14040:	movt	r2, #1
   14044:	bl	11e8c <printf@plt>
   14048:	bl	12538 <setup@@Base>
   1404c:	bl	13068 <if_statement_only@@Base>
   14050:	mov	r0, r7
   14054:	bl	11f1c <puts@plt>
   14058:	movw	r2, #40350	; 0x9d9e
   1405c:	mov	r0, r5
   14060:	mov	r1, r6
   14064:	movt	r2, #1
   14068:	bl	11e8c <printf@plt>
   1406c:	bl	12538 <setup@@Base>
   14070:	bl	13274 <if_else_statements@@Base>
   14074:	mov	r0, r7
   14078:	bl	11f1c <puts@plt>
   1407c:	movw	r2, #40412	; 0x9ddc
   14080:	mov	r0, r5
   14084:	mov	r1, r6
   14088:	movt	r2, #1
   1408c:	bl	11e8c <printf@plt>
   14090:	bl	12538 <setup@@Base>
   14094:	bl	138f8 <if_statement_inside_if_statement@@Base>
   14098:	mov	r0, r7
   1409c:	bl	11f1c <puts@plt>
   140a0:	movw	r2, #40445	; 0x9dfd
   140a4:	mov	r0, r5
   140a8:	mov	r1, r6
   140ac:	movt	r2, #1
   140b0:	bl	11e8c <printf@plt>
   140b4:	bl	12538 <setup@@Base>
   140b8:	bl	13bc8 <if_statement_inside_else_statement@@Base>
   140bc:	mov	r0, r7
   140c0:	bl	11f1c <puts@plt>
   140c4:	movw	r2, #40391	; 0x9dc7
   140c8:	mov	r0, r5
   140cc:	mov	r1, r6
   140d0:	movt	r2, #1
   140d4:	bl	11e8c <printf@plt>
   140d8:	bl	12538 <setup@@Base>
   140dc:	bl	1370c <body_with_one_return@@Base>
   140e0:	mov	r0, r7
   140e4:	bl	11f1c <puts@plt>
   140e8:	movw	r2, #40369	; 0x9db1
   140ec:	mov	r0, r5
   140f0:	mov	r1, r6
   140f4:	movt	r2, #1
   140f8:	bl	11e8c <printf@plt>
   140fc:	bl	12538 <setup@@Base>
   14100:	bl	134a0 <body_with_two_returns@@Base>
   14104:	mov	r0, r7
   14108:	bl	11f1c <puts@plt>
   1410c:	movw	r0, #40494	; 0x9e2e
   14110:	movt	r0, #1
   14114:	bl	11f1c <puts@plt>
   14118:	movw	r0, #40509	; 0x9e3d
   1411c:	movt	r0, #1
   14120:	bl	11f1c <puts@plt>
   14124:	mov	r0, r4
   14128:	bl	11f1c <puts@plt>
   1412c:	mov	r0, #0
   14130:	pop	{r4, r5, r6, r7, fp, pc}
   14134:	nop	{0}
   14138:	andeq	r0, r0, r1
   1413c:	andeq	r0, r0, r0
   14140:	andeq	r0, r0, r1
   14144:	andeq	r0, r0, r0
   14148:	push	{r4, r5, r6, lr}
   1414c:	sub	sp, sp, #8
   14150:	movw	r0, #39978	; 0x9c2a
   14154:	movw	r1, #40080	; 0x9c90
   14158:	movw	r2, #18153	; 0x46e9
   1415c:	movt	r0, #1
   14160:	movt	r1, #1
   14164:	movt	r2, #26806	; 0x68b6
   14168:	bl	16770 <read_boolean_unary_expression@@Base+0x39c>
   1416c:	movw	r0, #40912	; 0x9fd0
   14170:	movw	r6, #40544	; 0x9e60
   14174:	mov	r5, #0
   14178:	movt	r0, #1
   1417c:	movt	r6, #1
   14180:	add	r4, r0, #4
   14184:	mov	r3, r6
   14188:	ldr	r0, [r3, r5]!
   1418c:	ldr	r1, [r3, #16]
   14190:	str	r1, [sp]
   14194:	ldmib	r3, {r1, r2}
   14198:	ldrb	r3, [r3, #12]
   1419c:	bl	16e90 <read_boolean_unary_expression@@Base+0xabc>
   141a0:	ldrd	r0, [r4, #-4]
   141a4:	bl	17744 <read_boolean_unary_expression@@Base+0x1370>
   141a8:	add	r5, r5, #20
   141ac:	add	r4, r4, #8
   141b0:	cmp	r5, #360	; 0x168
   141b4:	bne	14184 <main@@Base+0x2cc>
   141b8:	bl	17ecc <read_boolean_unary_expression@@Base+0x1af8>
   141bc:	add	sp, sp, #8
   141c0:	pop	{r4, r5, r6, lr}
   141c4:	b	18c38 <read_boolean_unary_expression@@Base+0x2864>
   141c8:	push	{fp, lr}
   141cc:	bl	14148 <main@@Base+0x290>
   141d0:	movw	r0, #45296	; 0xb0f0
   141d4:	mov	r1, #0
   141d8:	mov	r2, #152	; 0x98
   141dc:	movt	r0, #2
   141e0:	bl	11fb8 <memset@plt>
   141e4:	movw	r0, #45456	; 0xb190
   141e8:	vmov.i32	q8, #0	; 0x00000000
   141ec:	movw	lr, #45600	; 0xb220
   141f0:	movw	r3, #45648	; 0xb250
   141f4:	mov	ip, #80	; 0x50
   141f8:	movt	r0, #2
   141fc:	movt	lr, #2
   14200:	movt	r3, #2
   14204:	vst1.64	{d16-d17}, [r0 :128]
   14208:	movw	r0, #45472	; 0xb1a0
   1420c:	movt	r0, #2
   14210:	add	r1, r0, #16
   14214:	vst1.64	{d16-d17}, [r1 :128]
   14218:	add	r1, r0, #32
   1421c:	vst1.64	{d16-d17}, [r1 :128]
   14220:	add	r1, r0, #48	; 0x30
   14224:	vst1.64	{d16-d17}, [r1 :128]
   14228:	add	r1, r0, #64	; 0x40
   1422c:	vst1.64	{d16-d17}, [r0 :128], ip
   14230:	vst1.64	{d16-d17}, [r1 :128]
   14234:	movw	r1, #45568	; 0xb200
   14238:	vst1.64	{d16-d17}, [r0 :128]
   1423c:	mov	r0, #48	; 0x30
   14240:	movt	r1, #2
   14244:	vst1.64	{d16-d17}, [r1 :128]
   14248:	movw	r1, #45584	; 0xb210
   1424c:	movt	r1, #2
   14250:	vst1.64	{d16-d17}, [r1 :128]
   14254:	add	r1, lr, #16
   14258:	vst1.64	{d16-d17}, [r1 :128]
   1425c:	add	r1, r3, #16
   14260:	vst1.64	{d16-d17}, [r1 :128]
   14264:	movw	r1, #45696	; 0xb280
   14268:	movt	r1, #2
   1426c:	add	r2, r1, #16
   14270:	vst1.64	{d16-d17}, [r2 :128]
   14274:	add	r2, r1, #32
   14278:	vst1.64	{d16-d17}, [r1 :128], r0
   1427c:	vst1.64	{d16-d17}, [r1 :128]
   14280:	movw	r1, #45760	; 0xb2c0
   14284:	vst1.64	{d16-d17}, [r2 :128]
   14288:	mov	r2, #32
   1428c:	movt	r1, #2
   14290:	vst1.64	{d16-d17}, [r3 :128], r2
   14294:	vst1.64	{d16-d17}, [lr :128], r2
   14298:	vst1.64	{d16-d17}, [r3 :128]
   1429c:	vst1.64	{d16-d17}, [lr :128]
   142a0:	add	r3, r1, #16
   142a4:	vst1.64	{d16-d17}, [r1 :128], r2
   142a8:	vst1.64	{d16-d17}, [r1 :128]
   142ac:	movw	r1, #45808	; 0xb2f0
   142b0:	vst1.64	{d16-d17}, [r3 :128]
   142b4:	movt	r1, #2
   142b8:	add	r2, r1, #16
   142bc:	vst1.64	{d16-d17}, [r2 :128]
   142c0:	add	r2, r1, #32
   142c4:	vst1.64	{d16-d17}, [r2 :128]
   142c8:	add	r2, r1, #48	; 0x30
   142cc:	vst1.64	{d16-d17}, [r2 :128]
   142d0:	add	r2, r1, #64	; 0x40
   142d4:	vst1.64	{d16-d17}, [r1 :128], ip
   142d8:	vst1.64	{d16-d17}, [r1 :128]
   142dc:	movw	r1, #45904	; 0xb350
   142e0:	vst1.64	{d16-d17}, [r2 :128]
   142e4:	movt	r1, #2
   142e8:	mov	r2, r1
   142ec:	vst1.64	{d16-d17}, [r2 :128], ip
   142f0:	vst1.64	{d16-d17}, [r2 :128]
   142f4:	add	r2, r1, #16
   142f8:	vst1.64	{d16-d17}, [r2 :128]
   142fc:	add	r2, r1, #32
   14300:	vst1.64	{d16-d17}, [r2 :128]
   14304:	add	r2, r1, #48	; 0x30
   14308:	add	r1, r1, #64	; 0x40
   1430c:	vst1.64	{d16-d17}, [r1 :128]
   14310:	movw	r1, #46000	; 0xb3b0
   14314:	vst1.64	{d16-d17}, [r2 :128]
   14318:	movt	r1, #2
   1431c:	add	r2, r1, #16
   14320:	vst1.64	{d16-d17}, [r2 :128]
   14324:	add	r2, r1, #32
   14328:	vst1.64	{d16-d17}, [r1 :128], r0
   1432c:	vst1.64	{d16-d17}, [r1 :128]
   14330:	movw	r1, #46064	; 0xb3f0
   14334:	vst1.64	{d16-d17}, [r2 :128]
   14338:	movt	r1, #2
   1433c:	mov	r2, r1
   14340:	vst1.64	{d16-d17}, [r2 :128], r0
   14344:	vst1.64	{d16-d17}, [r2 :128]
   14348:	add	r2, r1, #16
   1434c:	add	r1, r1, #32
   14350:	vst1.64	{d16-d17}, [r1 :128]
   14354:	movw	r1, #46128	; 0xb430
   14358:	vst1.64	{d16-d17}, [r2 :128]
   1435c:	movt	r1, #2
   14360:	add	r2, r1, #64	; 0x40
   14364:	vst1.64	{d16-d17}, [r2 :128]
   14368:	add	r2, r1, #48	; 0x30
   1436c:	vst1.64	{d16-d17}, [r2 :128]
   14370:	add	r2, r1, #32
   14374:	vst1.64	{d16-d17}, [r2 :128]
   14378:	add	r2, r1, #16
   1437c:	vst1.64	{d16-d17}, [r1 :128], ip
   14380:	vst1.64	{d16-d17}, [r2 :128]
   14384:	movw	r2, #46224	; 0xb490
   14388:	vst1.64	{d16-d17}, [r1 :128]
   1438c:	mov	r1, #64	; 0x40
   14390:	movt	r2, #2
   14394:	mov	r3, r2
   14398:	vst1.64	{d16-d17}, [r3 :128], r1
   1439c:	add	r1, r2, #16
   143a0:	vst1.64	{d16-d17}, [r1 :128]
   143a4:	add	r1, r2, #32
   143a8:	vst1.64	{d16-d17}, [r3 :128]
   143ac:	vst1.64	{d16-d17}, [r1 :128]
   143b0:	add	r1, r2, #48	; 0x30
   143b4:	vst1.64	{d16-d17}, [r1 :128]
   143b8:	movw	r1, #46304	; 0xb4e0
   143bc:	movt	r1, #2
   143c0:	add	r2, r1, #16
   143c4:	vst1.64	{d16-d17}, [r2 :128]
   143c8:	add	r2, r1, #32
   143cc:	vst1.64	{d16-d17}, [r1 :128], r0
   143d0:	vst1.64	{d16-d17}, [r1 :128]
   143d4:	movw	r1, #46368	; 0xb520
   143d8:	vst1.64	{d16-d17}, [r2 :128]
   143dc:	movt	r1, #2
   143e0:	mov	r2, r1
   143e4:	vst1.64	{d16-d17}, [r2 :128], r0
   143e8:	add	r0, r1, #16
   143ec:	vst1.64	{d16-d17}, [r0 :128]
   143f0:	add	r0, r1, #32
   143f4:	vst1.64	{d16-d17}, [r2 :128]
   143f8:	vst1.64	{d16-d17}, [r0 :128]
   143fc:	movw	r0, #46432	; 0xb560
   14400:	movt	r0, #2
   14404:	vst1.64	{d16-d17}, [r0 :128]
   14408:	pop	{fp, pc}
   1440c:	movw	r0, #16712	; 0x4148
   14410:	movw	r1, #16840	; 0x41c8
   14414:	movt	r0, #1
   14418:	movt	r1, #1
   1441c:	b	190ec <__gcov_flush@@Base+0xb8>

00014420 <init_token_int_type@@Base>:
   14420:	movw	r1, #46448	; 0xb570
   14424:	add	r2, pc, #28
   14428:	movt	r1, #2
   1442c:	vld1.64	{d16-d17}, [r2]
   14430:	vld1.64	{d18-d19}, [r1 :128]
   14434:	vadd.i64	q8, q9, q8
   14438:	vst1.64	{d16-d17}, [r1 :128]
   1443c:	mov	r1, #0
   14440:	str	r1, [r0]
   14444:	bx	lr
   14448:	andeq	r0, r0, r1
   1444c:	andeq	r0, r0, r0
   14450:	andeq	r0, r0, r1
   14454:	andeq	r0, r0, r0

00014458 <init_token_int_value@@Base>:
   14458:	movw	r2, #46464	; 0xb580
   1445c:	add	r3, pc, #36	; 0x24
   14460:	movt	r2, #2
   14464:	vld1.64	{d16-d17}, [r3]
   14468:	vld1.64	{d18-d19}, [r2 :128]
   1446c:	vadd.i64	q8, q9, q8
   14470:	vst1.64	{d16-d17}, [r2 :128]
   14474:	mov	r2, #1
   14478:	str	r2, [r0]
   1447c:	str	r1, [r0, #4]
   14480:	bx	lr
   14484:	nop	{0}
   14488:	andeq	r0, r0, r1
   1448c:	andeq	r0, r0, r0
   14490:	andeq	r0, r0, r1
   14494:	andeq	r0, r0, r0

00014498 <init_token_function@@Base>:
   14498:	movw	r2, #46480	; 0xb590
   1449c:	add	r3, pc, #36	; 0x24
   144a0:	movt	r2, #2
   144a4:	vld1.64	{d16-d17}, [r3]
   144a8:	vld1.64	{d18-d19}, [r2 :128]
   144ac:	vadd.i64	q8, q9, q8
   144b0:	vst1.64	{d16-d17}, [r2 :128]
   144b4:	mov	r2, #2
   144b8:	str	r2, [r0]
   144bc:	str	r1, [r0, #4]
   144c0:	bx	lr
   144c4:	nop	{0}
   144c8:	andeq	r0, r0, r1
   144cc:	andeq	r0, r0, r0
   144d0:	andeq	r0, r0, r1
   144d4:	andeq	r0, r0, r0

000144d8 <init_token_opar@@Base>:
   144d8:	movw	r1, #46496	; 0xb5a0
   144dc:	add	r2, pc, #28
   144e0:	movt	r1, #2
   144e4:	vld1.64	{d16-d17}, [r2]
   144e8:	vld1.64	{d18-d19}, [r1 :128]
   144ec:	vadd.i64	q8, q9, q8
   144f0:	vst1.64	{d16-d17}, [r1 :128]
   144f4:	mov	r1, #3
   144f8:	str	r1, [r0]
   144fc:	bx	lr
   14500:	andeq	r0, r0, r1
   14504:	andeq	r0, r0, r0
   14508:	andeq	r0, r0, r1
   1450c:	andeq	r0, r0, r0

00014510 <init_token_cpar@@Base>:
   14510:	movw	r1, #46512	; 0xb5b0
   14514:	add	r2, pc, #28
   14518:	movt	r1, #2
   1451c:	vld1.64	{d16-d17}, [r2]
   14520:	vld1.64	{d18-d19}, [r1 :128]
   14524:	vadd.i64	q8, q9, q8
   14528:	vst1.64	{d16-d17}, [r1 :128]
   1452c:	mov	r1, #4
   14530:	str	r1, [r0]
   14534:	bx	lr
   14538:	andeq	r0, r0, r1
   1453c:	andeq	r0, r0, r0
   14540:	andeq	r0, r0, r1
   14544:	andeq	r0, r0, r0

00014548 <init_token_obra@@Base>:
   14548:	movw	r1, #46528	; 0xb5c0
   1454c:	add	r2, pc, #28
   14550:	movt	r1, #2
   14554:	vld1.64	{d16-d17}, [r2]
   14558:	vld1.64	{d18-d19}, [r1 :128]
   1455c:	vadd.i64	q8, q9, q8
   14560:	vst1.64	{d16-d17}, [r1 :128]
   14564:	mov	r1, #5
   14568:	str	r1, [r0]
   1456c:	bx	lr
   14570:	andeq	r0, r0, r1
   14574:	andeq	r0, r0, r0
   14578:	andeq	r0, r0, r1
   1457c:	andeq	r0, r0, r0

00014580 <init_token_cbra@@Base>:
   14580:	movw	r1, #46544	; 0xb5d0
   14584:	add	r2, pc, #28
   14588:	movt	r1, #2
   1458c:	vld1.64	{d16-d17}, [r2]
   14590:	vld1.64	{d18-d19}, [r1 :128]
   14594:	vadd.i64	q8, q9, q8
   14598:	vst1.64	{d16-d17}, [r1 :128]
   1459c:	mov	r1, #6
   145a0:	str	r1, [r0]
   145a4:	bx	lr
   145a8:	andeq	r0, r0, r1
   145ac:	andeq	r0, r0, r0
   145b0:	andeq	r0, r0, r1
   145b4:	andeq	r0, r0, r0

000145b8 <init_token_return@@Base>:
   145b8:	movw	r1, #46560	; 0xb5e0
   145bc:	add	r2, pc, #28
   145c0:	movt	r1, #2
   145c4:	vld1.64	{d16-d17}, [r2]
   145c8:	vld1.64	{d18-d19}, [r1 :128]
   145cc:	vadd.i64	q8, q9, q8
   145d0:	vst1.64	{d16-d17}, [r1 :128]
   145d4:	mov	r1, #7
   145d8:	str	r1, [r0]
   145dc:	bx	lr
   145e0:	andeq	r0, r0, r1
   145e4:	andeq	r0, r0, r0
   145e8:	andeq	r0, r0, r1
   145ec:	andeq	r0, r0, r0

000145f0 <init_token_semicolon@@Base>:
   145f0:	movw	r1, #46576	; 0xb5f0
   145f4:	add	r2, pc, #28
   145f8:	movt	r1, #2
   145fc:	vld1.64	{d16-d17}, [r2]
   14600:	vld1.64	{d18-d19}, [r1 :128]
   14604:	vadd.i64	q8, q9, q8
   14608:	vst1.64	{d16-d17}, [r1 :128]
   1460c:	mov	r1, #8
   14610:	str	r1, [r0]
   14614:	bx	lr
   14618:	andeq	r0, r0, r1
   1461c:	andeq	r0, r0, r0
   14620:	andeq	r0, r0, r1
   14624:	andeq	r0, r0, r0

00014628 <init_token_eof@@Base>:
   14628:	movw	r1, #46592	; 0xb600
   1462c:	add	r2, pc, #28
   14630:	movt	r1, #2
   14634:	vld1.64	{d16-d17}, [r2]
   14638:	vld1.64	{d18-d19}, [r1 :128]
   1463c:	vadd.i64	q8, q9, q8
   14640:	vst1.64	{d16-d17}, [r1 :128]
   14644:	mov	r1, #9
   14648:	str	r1, [r0]
   1464c:	bx	lr
   14650:	andeq	r0, r0, r1
   14654:	andeq	r0, r0, r0
   14658:	andeq	r0, r0, r1
   1465c:	andeq	r0, r0, r0

00014660 <init_token_if@@Base>:
   14660:	movw	r1, #46608	; 0xb610
   14664:	add	r2, pc, #28
   14668:	movt	r1, #2
   1466c:	vld1.64	{d16-d17}, [r2]
   14670:	vld1.64	{d18-d19}, [r1 :128]
   14674:	vadd.i64	q8, q9, q8
   14678:	vst1.64	{d16-d17}, [r1 :128]
   1467c:	mov	r1, #10
   14680:	str	r1, [r0]
   14684:	bx	lr
   14688:	andeq	r0, r0, r1
   1468c:	andeq	r0, r0, r0
   14690:	andeq	r0, r0, r1
   14694:	andeq	r0, r0, r0

00014698 <init_token_else@@Base>:
   14698:	movw	r1, #46624	; 0xb620
   1469c:	add	r2, pc, #28
   146a0:	movt	r1, #2
   146a4:	vld1.64	{d16-d17}, [r2]
   146a8:	vld1.64	{d18-d19}, [r1 :128]
   146ac:	vadd.i64	q8, q9, q8
   146b0:	vst1.64	{d16-d17}, [r1 :128]
   146b4:	mov	r1, #11
   146b8:	str	r1, [r0]
   146bc:	bx	lr
   146c0:	andeq	r0, r0, r1
   146c4:	andeq	r0, r0, r0
   146c8:	andeq	r0, r0, r1
   146cc:	andeq	r0, r0, r0

000146d0 <init_token_boolean_op@@Base>:
   146d0:	movw	r2, #46640	; 0xb630
   146d4:	add	r3, pc, #36	; 0x24
   146d8:	movt	r2, #2
   146dc:	vld1.64	{d16-d17}, [r3]
   146e0:	vld1.64	{d18-d19}, [r2 :128]
   146e4:	vadd.i64	q8, q9, q8
   146e8:	vst1.64	{d16-d17}, [r2 :128]
   146ec:	mov	r2, #12
   146f0:	str	r2, [r0]
   146f4:	str	r1, [r0, #4]
   146f8:	bx	lr
   146fc:	nop	{0}
   14700:	andeq	r0, r0, r1
   14704:	andeq	r0, r0, r0
   14708:	andeq	r0, r0, r1
   1470c:	andeq	r0, r0, r0

00014710 <free_token_int_type@@Base>:
   14710:	movw	r1, #46656	; 0xb640
   14714:	add	r2, pc, #20
   14718:	movt	r1, #2
   1471c:	vld1.64	{d16-d17}, [r2]
   14720:	vld1.64	{d18-d19}, [r1 :128]
   14724:	vadd.i64	q8, q9, q8
   14728:	vst1.64	{d16-d17}, [r1 :128]
   1472c:	b	11ea4 <free@plt>
   14730:	andeq	r0, r0, r1
   14734:	andeq	r0, r0, r0
   14738:	andeq	r0, r0, r1
   1473c:	andeq	r0, r0, r0

00014740 <free_token_int_value@@Base>:
   14740:	movw	r1, #46672	; 0xb650
   14744:	add	r2, pc, #20
   14748:	movt	r1, #2
   1474c:	vld1.64	{d16-d17}, [r2]
   14750:	vld1.64	{d18-d19}, [r1 :128]
   14754:	vadd.i64	q8, q9, q8
   14758:	vst1.64	{d16-d17}, [r1 :128]
   1475c:	b	11ea4 <free@plt>
   14760:	andeq	r0, r0, r1
   14764:	andeq	r0, r0, r0
   14768:	andeq	r0, r0, r1
   1476c:	andeq	r0, r0, r0

00014770 <free_token_function@@Base>:
   14770:	movw	r1, #46688	; 0xb660
   14774:	add	r2, pc, #20
   14778:	movt	r1, #2
   1477c:	vld1.64	{d16-d17}, [r2]
   14780:	vld1.64	{d18-d19}, [r1 :128]
   14784:	vadd.i64	q8, q9, q8
   14788:	vst1.64	{d16-d17}, [r1 :128]
   1478c:	b	11ea4 <free@plt>
   14790:	andeq	r0, r0, r1
   14794:	andeq	r0, r0, r0
   14798:	andeq	r0, r0, r1
   1479c:	andeq	r0, r0, r0

000147a0 <free_token_opar@@Base>:
   147a0:	movw	r1, #46704	; 0xb670
   147a4:	add	r2, pc, #20
   147a8:	movt	r1, #2
   147ac:	vld1.64	{d16-d17}, [r2]
   147b0:	vld1.64	{d18-d19}, [r1 :128]
   147b4:	vadd.i64	q8, q9, q8
   147b8:	vst1.64	{d16-d17}, [r1 :128]
   147bc:	b	11ea4 <free@plt>
   147c0:	andeq	r0, r0, r1
   147c4:	andeq	r0, r0, r0
   147c8:	andeq	r0, r0, r1
   147cc:	andeq	r0, r0, r0

000147d0 <free_token_cpar@@Base>:
   147d0:	movw	r1, #46720	; 0xb680
   147d4:	add	r2, pc, #20
   147d8:	movt	r1, #2
   147dc:	vld1.64	{d16-d17}, [r2]
   147e0:	vld1.64	{d18-d19}, [r1 :128]
   147e4:	vadd.i64	q8, q9, q8
   147e8:	vst1.64	{d16-d17}, [r1 :128]
   147ec:	b	11ea4 <free@plt>
   147f0:	andeq	r0, r0, r1
   147f4:	andeq	r0, r0, r0
   147f8:	andeq	r0, r0, r1
   147fc:	andeq	r0, r0, r0

00014800 <free_token_obra@@Base>:
   14800:	movw	r1, #46736	; 0xb690
   14804:	add	r2, pc, #20
   14808:	movt	r1, #2
   1480c:	vld1.64	{d16-d17}, [r2]
   14810:	vld1.64	{d18-d19}, [r1 :128]
   14814:	vadd.i64	q8, q9, q8
   14818:	vst1.64	{d16-d17}, [r1 :128]
   1481c:	b	11ea4 <free@plt>
   14820:	andeq	r0, r0, r1
   14824:	andeq	r0, r0, r0
   14828:	andeq	r0, r0, r1
   1482c:	andeq	r0, r0, r0

00014830 <free_token_cbra@@Base>:
   14830:	movw	r1, #46752	; 0xb6a0
   14834:	add	r2, pc, #20
   14838:	movt	r1, #2
   1483c:	vld1.64	{d16-d17}, [r2]
   14840:	vld1.64	{d18-d19}, [r1 :128]
   14844:	vadd.i64	q8, q9, q8
   14848:	vst1.64	{d16-d17}, [r1 :128]
   1484c:	b	11ea4 <free@plt>
   14850:	andeq	r0, r0, r1
   14854:	andeq	r0, r0, r0
   14858:	andeq	r0, r0, r1
   1485c:	andeq	r0, r0, r0

00014860 <free_token_return@@Base>:
   14860:	movw	r1, #46768	; 0xb6b0
   14864:	add	r2, pc, #20
   14868:	movt	r1, #2
   1486c:	vld1.64	{d16-d17}, [r2]
   14870:	vld1.64	{d18-d19}, [r1 :128]
   14874:	vadd.i64	q8, q9, q8
   14878:	vst1.64	{d16-d17}, [r1 :128]
   1487c:	b	11ea4 <free@plt>
   14880:	andeq	r0, r0, r1
   14884:	andeq	r0, r0, r0
   14888:	andeq	r0, r0, r1
   1488c:	andeq	r0, r0, r0

00014890 <free_token_semicolon@@Base>:
   14890:	movw	r1, #46784	; 0xb6c0
   14894:	add	r2, pc, #20
   14898:	movt	r1, #2
   1489c:	vld1.64	{d16-d17}, [r2]
   148a0:	vld1.64	{d18-d19}, [r1 :128]
   148a4:	vadd.i64	q8, q9, q8
   148a8:	vst1.64	{d16-d17}, [r1 :128]
   148ac:	b	11ea4 <free@plt>
   148b0:	andeq	r0, r0, r1
   148b4:	andeq	r0, r0, r0
   148b8:	andeq	r0, r0, r1
   148bc:	andeq	r0, r0, r0

000148c0 <free_token_eof@@Base>:
   148c0:	movw	r1, #46800	; 0xb6d0
   148c4:	add	r2, pc, #20
   148c8:	movt	r1, #2
   148cc:	vld1.64	{d16-d17}, [r2]
   148d0:	vld1.64	{d18-d19}, [r1 :128]
   148d4:	vadd.i64	q8, q9, q8
   148d8:	vst1.64	{d16-d17}, [r1 :128]
   148dc:	b	11ea4 <free@plt>
   148e0:	andeq	r0, r0, r1
   148e4:	andeq	r0, r0, r0
   148e8:	andeq	r0, r0, r1
   148ec:	andeq	r0, r0, r0

000148f0 <free_token_if@@Base>:
   148f0:	movw	r1, #46816	; 0xb6e0
   148f4:	add	r2, pc, #20
   148f8:	movt	r1, #2
   148fc:	vld1.64	{d16-d17}, [r2]
   14900:	vld1.64	{d18-d19}, [r1 :128]
   14904:	vadd.i64	q8, q9, q8
   14908:	vst1.64	{d16-d17}, [r1 :128]
   1490c:	b	11ea4 <free@plt>
   14910:	andeq	r0, r0, r1
   14914:	andeq	r0, r0, r0
   14918:	andeq	r0, r0, r1
   1491c:	andeq	r0, r0, r0

00014920 <free_token_else@@Base>:
   14920:	movw	r1, #46832	; 0xb6f0
   14924:	add	r2, pc, #20
   14928:	movt	r1, #2
   1492c:	vld1.64	{d16-d17}, [r2]
   14930:	vld1.64	{d18-d19}, [r1 :128]
   14934:	vadd.i64	q8, q9, q8
   14938:	vst1.64	{d16-d17}, [r1 :128]
   1493c:	b	11ea4 <free@plt>
   14940:	andeq	r0, r0, r1
   14944:	andeq	r0, r0, r0
   14948:	andeq	r0, r0, r1
   1494c:	andeq	r0, r0, r0

00014950 <free_token_boolean_op@@Base>:
   14950:	push	{r4, r5, fp, lr}
   14954:	add	fp, sp, #8
   14958:	movw	r5, #46848	; 0xb700
   1495c:	mov	r4, r0
   14960:	movt	r5, #2
   14964:	ldrd	r0, [r5]
   14968:	adds	r0, r0, #1
   1496c:	adc	r1, r1, #0
   14970:	strd	r0, [r5]
   14974:	ldr	r0, [r4, #4]
   14978:	cmp	r0, #0
   1497c:	beq	1499c <free_token_boolean_op@@Base+0x4c>
   14980:	ldrd	r2, [r5, #8]
   14984:	adds	r2, r2, #1
   14988:	adc	r3, r3, #0
   1498c:	strd	r2, [r5, #8]
   14990:	bl	11ea4 <free@plt>
   14994:	add	r0, r5, #24
   14998:	b	149a0 <free_token_boolean_op@@Base+0x50>
   1499c:	add	r0, r5, #16
   149a0:	ldrd	r2, [r0]
   149a4:	adds	r2, r2, #1
   149a8:	adc	r3, r3, #0
   149ac:	strd	r2, [r0]
   149b0:	ldrd	r0, [r5, #32]
   149b4:	adds	r0, r0, #1
   149b8:	adc	r1, r1, #0
   149bc:	strd	r0, [r5, #32]
   149c0:	mov	r0, r4
   149c4:	pop	{r4, r5, fp, lr}
   149c8:	b	11ea4 <free@plt>
   149cc:	push	{r4, r5, r6, lr}
   149d0:	sub	sp, sp, #8
   149d4:	movw	r0, #41056	; 0xa060
   149d8:	movw	r1, #40080	; 0x9c90
   149dc:	movw	r2, #23366	; 0x5b46
   149e0:	movt	r0, #1
   149e4:	movt	r1, #1
   149e8:	movt	r2, #47030	; 0xb7b6
   149ec:	bl	16770 <read_boolean_unary_expression@@Base+0x39c>
   149f0:	movw	r0, #42144	; 0xa4a0
   149f4:	movw	r6, #41616	; 0xa290
   149f8:	mov	r5, #0
   149fc:	movt	r0, #1
   14a00:	movt	r6, #1
   14a04:	add	r4, r0, #4
   14a08:	mov	r3, r6
   14a0c:	ldr	r0, [r3, r5]!
   14a10:	ldr	r1, [r3, #16]
   14a14:	str	r1, [sp]
   14a18:	ldmib	r3, {r1, r2}
   14a1c:	ldrb	r3, [r3, #12]
   14a20:	bl	16e90 <read_boolean_unary_expression@@Base+0xabc>
   14a24:	ldrd	r0, [r4, #-4]
   14a28:	bl	17744 <read_boolean_unary_expression@@Base+0x1370>
   14a2c:	add	r5, r5, #20
   14a30:	add	r4, r4, #8
   14a34:	cmp	r5, #520	; 0x208
   14a38:	bne	14a08 <free_token_boolean_op@@Base+0xb8>
   14a3c:	bl	17ecc <read_boolean_unary_expression@@Base+0x1af8>
   14a40:	add	sp, sp, #8
   14a44:	pop	{r4, r5, r6, lr}
   14a48:	b	18c38 <read_boolean_unary_expression@@Base+0x2864>
   14a4c:	push	{fp, lr}
   14a50:	bl	149cc <free_token_boolean_op@@Base+0x7c>
   14a54:	movw	r0, #46464	; 0xb580
   14a58:	vmov.i32	q8, #0	; 0x00000000
   14a5c:	mov	r1, #0
   14a60:	movt	r0, #2
   14a64:	vst1.64	{d16-d17}, [r0 :128]
   14a68:	movw	r0, #46448	; 0xb570
   14a6c:	movt	r0, #2
   14a70:	vst1.64	{d16-d17}, [r0 :128]
   14a74:	movw	r0, #46480	; 0xb590
   14a78:	movt	r0, #2
   14a7c:	vst1.64	{d16-d17}, [r0 :128]
   14a80:	movw	r0, #46496	; 0xb5a0
   14a84:	movt	r0, #2
   14a88:	vst1.64	{d16-d17}, [r0 :128]
   14a8c:	movw	r0, #46512	; 0xb5b0
   14a90:	movt	r0, #2
   14a94:	vst1.64	{d16-d17}, [r0 :128]
   14a98:	movw	r0, #46528	; 0xb5c0
   14a9c:	movt	r0, #2
   14aa0:	vst1.64	{d16-d17}, [r0 :128]
   14aa4:	movw	r0, #46544	; 0xb5d0
   14aa8:	movt	r0, #2
   14aac:	vst1.64	{d16-d17}, [r0 :128]
   14ab0:	movw	r0, #46560	; 0xb5e0
   14ab4:	movt	r0, #2
   14ab8:	vst1.64	{d16-d17}, [r0 :128]
   14abc:	movw	r0, #46576	; 0xb5f0
   14ac0:	movt	r0, #2
   14ac4:	vst1.64	{d16-d17}, [r0 :128]
   14ac8:	movw	r0, #46592	; 0xb600
   14acc:	movt	r0, #2
   14ad0:	vst1.64	{d16-d17}, [r0 :128]
   14ad4:	movw	r0, #46608	; 0xb610
   14ad8:	movt	r0, #2
   14adc:	vst1.64	{d16-d17}, [r0 :128]
   14ae0:	movw	r0, #46624	; 0xb620
   14ae4:	movt	r0, #2
   14ae8:	vst1.64	{d16-d17}, [r0 :128]
   14aec:	movw	r0, #46640	; 0xb630
   14af0:	movt	r0, #2
   14af4:	vst1.64	{d16-d17}, [r0 :128]
   14af8:	movw	r0, #46656	; 0xb640
   14afc:	movt	r0, #2
   14b00:	vst1.64	{d16-d17}, [r0 :128]
   14b04:	movw	r0, #46672	; 0xb650
   14b08:	movt	r0, #2
   14b0c:	vst1.64	{d16-d17}, [r0 :128]
   14b10:	movw	r0, #46688	; 0xb660
   14b14:	movt	r0, #2
   14b18:	vst1.64	{d16-d17}, [r0 :128]
   14b1c:	movw	r0, #46704	; 0xb670
   14b20:	movt	r0, #2
   14b24:	vst1.64	{d16-d17}, [r0 :128]
   14b28:	movw	r0, #46720	; 0xb680
   14b2c:	movt	r0, #2
   14b30:	vst1.64	{d16-d17}, [r0 :128]
   14b34:	movw	r0, #46736	; 0xb690
   14b38:	movt	r0, #2
   14b3c:	vst1.64	{d16-d17}, [r0 :128]
   14b40:	movw	r0, #46752	; 0xb6a0
   14b44:	movt	r0, #2
   14b48:	vst1.64	{d16-d17}, [r0 :128]
   14b4c:	movw	r0, #46768	; 0xb6b0
   14b50:	movt	r0, #2
   14b54:	vst1.64	{d16-d17}, [r0 :128]
   14b58:	movw	r0, #46784	; 0xb6c0
   14b5c:	movt	r0, #2
   14b60:	vst1.64	{d16-d17}, [r0 :128]
   14b64:	movw	r0, #46800	; 0xb6d0
   14b68:	movt	r0, #2
   14b6c:	vst1.64	{d16-d17}, [r0 :128]
   14b70:	movw	r0, #46816	; 0xb6e0
   14b74:	movt	r0, #2
   14b78:	vst1.64	{d16-d17}, [r0 :128]
   14b7c:	movw	r0, #46832	; 0xb6f0
   14b80:	movt	r0, #2
   14b84:	vst1.64	{d16-d17}, [r0 :128]
   14b88:	movw	r0, #46848	; 0xb700
   14b8c:	movt	r0, #2
   14b90:	add	r2, r0, #16
   14b94:	str	r1, [r0, #32]
   14b98:	vst1.64	{d16-d17}, [r2 :128]
   14b9c:	mov	r2, #36	; 0x24
   14ba0:	vst1.64	{d16-d17}, [r0 :128], r2
   14ba4:	str	r1, [r0]
   14ba8:	pop	{fp, pc}
   14bac:	movw	r0, #18892	; 0x49cc
   14bb0:	movw	r1, #19020	; 0x4a4c
   14bb4:	movt	r0, #1
   14bb8:	movt	r1, #1
   14bbc:	b	190ec <__gcov_flush@@Base+0xb8>

00014bc0 <init_ast_base@@Base>:
   14bc0:	movw	ip, #46896	; 0xb730
   14bc4:	add	r3, pc, #28
   14bc8:	movt	ip, #2
   14bcc:	vld1.64	{d16-d17}, [r3]
   14bd0:	vld1.64	{d18-d19}, [ip :128]
   14bd4:	vadd.i64	q8, q9, q8
   14bd8:	vst1.64	{d16-d17}, [ip :128]
   14bdc:	stm	r0, {r1, r2}
   14be0:	bx	lr
   14be4:	nop	{0}
   14be8:	andeq	r0, r0, r1
   14bec:	andeq	r0, r0, r0
   14bf0:	andeq	r0, r0, r1
   14bf4:	andeq	r0, r0, r0

00014bf8 <init_ast_base_single@@Base>:
   14bf8:	movw	ip, #46896	; 0xb730
   14bfc:	movw	r3, #46912	; 0xb740
   14c00:	add	r2, pc, #48	; 0x30
   14c04:	movt	ip, #2
   14c08:	movt	r3, #2
   14c0c:	vld1.64	{d16-d17}, [r2]
   14c10:	mov	r2, #0
   14c14:	vld1.64	{d18-d19}, [r3 :128]
   14c18:	vld1.64	{d20-d21}, [ip :128]
   14c1c:	vadd.i64	q9, q9, q8
   14c20:	vadd.i64	q8, q10, q8
   14c24:	vst1.64	{d18-d19}, [r3 :128]
   14c28:	vst1.64	{d16-d17}, [ip :128]
   14c2c:	stm	r0, {r1, r2}
   14c30:	bx	lr
   14c34:	nop	{0}
   14c38:	andeq	r0, r0, r1
   14c3c:	andeq	r0, r0, r0
   14c40:	andeq	r0, r0, r1
   14c44:	andeq	r0, r0, r0

00014c48 <init_node_id@@Base>:
   14c48:	movw	r2, #46912	; 0xb740
   14c4c:	add	r3, pc, #76	; 0x4c
   14c50:	movw	ip, #46928	; 0xb750
   14c54:	vld1.64	{d16-d17}, [r3]
   14c58:	movw	r3, #46896	; 0xb730
   14c5c:	movt	r2, #2
   14c60:	movt	ip, #2
   14c64:	movt	r3, #2
   14c68:	vld1.64	{d20-d21}, [r2 :128]
   14c6c:	vld1.64	{d18-d19}, [ip :128]
   14c70:	vld1.64	{d22-d23}, [r3 :128]
   14c74:	vadd.i64	q10, q10, q8
   14c78:	vadd.i64	q9, q9, q8
   14c7c:	vadd.i64	q8, q11, q8
   14c80:	vst1.64	{d20-d21}, [r2 :128]
   14c84:	mov	r2, #0
   14c88:	vst1.64	{d18-d19}, [ip :128]
   14c8c:	vst1.64	{d16-d17}, [r3 :128]
   14c90:	str	r2, [r0]
   14c94:	str	r2, [r0, #4]
   14c98:	str	r1, [r0, #8]
   14c9c:	bx	lr
   14ca0:	andeq	r0, r0, r1
   14ca4:	andeq	r0, r0, r0
   14ca8:	andeq	r0, r0, r1
   14cac:	andeq	r0, r0, r0

00014cb0 <init_node_int@@Base>:
   14cb0:	add	r3, pc, #88	; 0x58
   14cb4:	movw	ip, #46944	; 0xb760
   14cb8:	movw	r2, #46912	; 0xb740
   14cbc:	vld1.64	{d16-d17}, [r3]
   14cc0:	movw	r3, #46896	; 0xb730
   14cc4:	movt	ip, #2
   14cc8:	movt	r2, #2
   14ccc:	movt	r3, #2
   14cd0:	vld1.64	{d18-d19}, [ip :128]
   14cd4:	vld1.64	{d20-d21}, [r2 :128]
   14cd8:	vld1.64	{d22-d23}, [r3 :128]
   14cdc:	vadd.i64	q9, q9, q8
   14ce0:	vadd.i64	q10, q10, q8
   14ce4:	vadd.i64	q8, q11, q8
   14ce8:	vst1.64	{d20-d21}, [r2 :128]
   14cec:	mov	r2, #0
   14cf0:	vst1.64	{d18-d19}, [ip :128]
   14cf4:	vst1.64	{d16-d17}, [r3 :128]
   14cf8:	mov	r3, #1
   14cfc:	str	r3, [r0]
   14d00:	str	r2, [r0, #4]
   14d04:	str	r1, [r0, #8]
   14d08:	bx	lr
   14d0c:	nop	{0}
   14d10:	andeq	r0, r0, r1
   14d14:	andeq	r0, r0, r0
   14d18:	andeq	r0, r0, r1
   14d1c:	andeq	r0, r0, r0

00014d20 <init_node_function@@Base>:
   14d20:	push	{fp, lr}
   14d24:	mov	fp, sp
   14d28:	add	r3, pc, #88	; 0x58
   14d2c:	movw	ip, #46960	; 0xb770
   14d30:	movw	lr, #46896	; 0xb730
   14d34:	vld1.64	{d16-d17}, [r3]
   14d38:	movw	r3, #46912	; 0xb740
   14d3c:	movt	ip, #2
   14d40:	movt	lr, #2
   14d44:	movt	r3, #2
   14d48:	vld1.64	{d18-d19}, [ip :128]
   14d4c:	vld1.64	{d22-d23}, [lr :128]
   14d50:	vld1.64	{d20-d21}, [r3 :128]
   14d54:	vadd.i64	q9, q9, q8
   14d58:	vadd.i64	q10, q10, q8
   14d5c:	vadd.i64	q8, q11, q8
   14d60:	vst1.64	{d18-d19}, [ip :128]
   14d64:	mov	ip, #0
   14d68:	vst1.64	{d20-d21}, [r3 :128]
   14d6c:	mov	r3, #2
   14d70:	vst1.64	{d16-d17}, [lr :128]
   14d74:	stm	r0, {r3, ip}
   14d78:	str	r1, [r0, #8]
   14d7c:	str	r2, [r0, #12]
   14d80:	pop	{fp, pc}
   14d84:	nop	{0}
   14d88:	andeq	r0, r0, r1
   14d8c:	andeq	r0, r0, r0
   14d90:	andeq	r0, r0, r1
   14d94:	andeq	r0, r0, r0

00014d98 <init_node_return@@Base>:
   14d98:	add	r3, pc, #88	; 0x58
   14d9c:	movw	ip, #46976	; 0xb780
   14da0:	movw	r2, #46912	; 0xb740
   14da4:	vld1.64	{d16-d17}, [r3]
   14da8:	movw	r3, #46896	; 0xb730
   14dac:	movt	ip, #2
   14db0:	movt	r2, #2
   14db4:	movt	r3, #2
   14db8:	vld1.64	{d18-d19}, [ip :128]
   14dbc:	vld1.64	{d20-d21}, [r2 :128]
   14dc0:	vld1.64	{d22-d23}, [r3 :128]
   14dc4:	vadd.i64	q9, q9, q8
   14dc8:	vadd.i64	q10, q10, q8
   14dcc:	vadd.i64	q8, q11, q8
   14dd0:	vst1.64	{d20-d21}, [r2 :128]
   14dd4:	mov	r2, #0
   14dd8:	vst1.64	{d18-d19}, [ip :128]
   14ddc:	vst1.64	{d16-d17}, [r3 :128]
   14de0:	mov	r3, #3
   14de4:	str	r3, [r0]
   14de8:	str	r2, [r0, #4]
   14dec:	str	r1, [r0, #8]
   14df0:	bx	lr
   14df4:	nop	{0}
   14df8:	andeq	r0, r0, r1
   14dfc:	andeq	r0, r0, r0
   14e00:	andeq	r0, r0, r1
   14e04:	andeq	r0, r0, r0

00014e08 <init_node_if@@Base>:
   14e08:	push	{r4, sl, fp, lr}
   14e0c:	add	fp, sp, #8
   14e10:	movw	r4, #46912	; 0xb740
   14e14:	add	lr, pc, #76	; 0x4c
   14e18:	movw	ip, #46992	; 0xb790
   14e1c:	vld1.64	{d16-d17}, [lr]
   14e20:	movw	lr, #46896	; 0xb730
   14e24:	movt	r4, #2
   14e28:	movt	ip, #2
   14e2c:	movt	lr, #2
   14e30:	vld1.64	{d20-d21}, [r4 :128]
   14e34:	vld1.64	{d18-d19}, [ip :128]
   14e38:	vld1.64	{d22-d23}, [lr :128]
   14e3c:	vadd.i64	q10, q10, q8
   14e40:	vadd.i64	q9, q9, q8
   14e44:	vadd.i64	q8, q11, q8
   14e48:	vst1.64	{d20-d21}, [r4 :128]
   14e4c:	mov	r4, #4
   14e50:	vst1.64	{d18-d19}, [ip :128]
   14e54:	mov	ip, #0
   14e58:	vst1.64	{d16-d17}, [lr :128]
   14e5c:	stmia	r0!, {r4, ip}
   14e60:	stm	r0, {r1, r2, r3}
   14e64:	pop	{r4, sl, fp, pc}
   14e68:	andeq	r0, r0, r1
   14e6c:	andeq	r0, r0, r0
   14e70:	andeq	r0, r0, r1
   14e74:	andeq	r0, r0, r0

00014e78 <init_node_boolean_operator@@Base>:
   14e78:	push	{r4, sl, fp, lr}
   14e7c:	add	fp, sp, #8
   14e80:	movw	r4, #46912	; 0xb740
   14e84:	add	lr, pc, #84	; 0x54
   14e88:	movw	ip, #47008	; 0xb7a0
   14e8c:	vld1.64	{d16-d17}, [lr]
   14e90:	movw	lr, #46896	; 0xb730
   14e94:	movt	r4, #2
   14e98:	movt	ip, #2
   14e9c:	movt	lr, #2
   14ea0:	vld1.64	{d20-d21}, [r4 :128]
   14ea4:	vld1.64	{d18-d19}, [ip :128]
   14ea8:	vld1.64	{d22-d23}, [lr :128]
   14eac:	vadd.i64	q10, q10, q8
   14eb0:	vadd.i64	q9, q9, q8
   14eb4:	vadd.i64	q8, q11, q8
   14eb8:	vst1.64	{d20-d21}, [r4 :128]
   14ebc:	mov	r4, #5
   14ec0:	vst1.64	{d18-d19}, [ip :128]
   14ec4:	mov	ip, #0
   14ec8:	vst1.64	{d16-d17}, [lr :128]
   14ecc:	stm	r0, {r4, ip}
   14ed0:	str	r2, [r0, #8]
   14ed4:	str	r3, [r0, #12]
   14ed8:	str	r1, [r0, #16]
   14edc:	pop	{r4, sl, fp, pc}
   14ee0:	andeq	r0, r0, r1
   14ee4:	andeq	r0, r0, r0
   14ee8:	andeq	r0, r0, r1
   14eec:	andeq	r0, r0, r0

00014ef0 <free_node@@Base>:
   14ef0:	push	{r4, sl, fp, lr}
   14ef4:	add	fp, sp, #8
   14ef8:	movw	r4, #47024	; 0xb7b0
   14efc:	movt	r4, #2
   14f00:	ldrd	r2, [r4]
   14f04:	adds	r2, r2, #1
   14f08:	adc	r3, r3, #0
   14f0c:	strd	r2, [r4]
   14f10:	ldr	r1, [r0]
   14f14:	cmp	r1, #5
   14f18:	bhi	15004 <free_node@@Base+0x114>
   14f1c:	add	r2, pc, #0
   14f20:	ldr	pc, [r2, r1, lsl #2]
   14f24:	andeq	r4, r1, ip, lsr pc
   14f28:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   14f2c:	andeq	r4, r1, r4, ror pc
   14f30:	andeq	r4, r1, ip, lsr #31
   14f34:	andeq	r4, r1, r8, asr pc
   14f38:	andeq	r4, r1, r8, asr #31
   14f3c:	ldrd	r2, [r4, #16]
   14f40:	adds	r2, r2, #1
   14f44:	adc	r3, r3, #0
   14f48:	strd	r2, [r4, #16]
   14f4c:	bl	1503c <free_node_id@@Base>
   14f50:	add	r0, r4, #64	; 0x40
   14f54:	b	14fe0 <free_node@@Base+0xf0>
   14f58:	ldrd	r2, [r4, #48]	; 0x30
   14f5c:	adds	r2, r2, #1
   14f60:	adc	r3, r3, #0
   14f64:	strd	r2, [r4, #48]	; 0x30
   14f68:	bl	15234 <free_node_if@@Base>
   14f6c:	add	r0, r4, #96	; 0x60
   14f70:	b	14fe0 <free_node@@Base+0xf0>
   14f74:	ldrd	r2, [r4, #32]
   14f78:	adds	r2, r2, #1
   14f7c:	adc	r3, r3, #0
   14f80:	strd	r2, [r4, #32]
   14f84:	bl	15134 <free_node_function@@Base>
   14f88:	add	r0, r4, #80	; 0x50
   14f8c:	b	14fe0 <free_node@@Base+0xf0>
   14f90:	ldrd	r2, [r4, #24]
   14f94:	adds	r2, r2, #1
   14f98:	adc	r3, r3, #0
   14f9c:	strd	r2, [r4, #24]
   14fa0:	bl	150b8 <free_node_int@@Base>
   14fa4:	add	r0, r4, #72	; 0x48
   14fa8:	b	14fe0 <free_node@@Base+0xf0>
   14fac:	ldrd	r2, [r4, #40]	; 0x28
   14fb0:	adds	r2, r2, #1
   14fb4:	adc	r3, r3, #0
   14fb8:	strd	r2, [r4, #40]	; 0x28
   14fbc:	bl	151b8 <free_node_return@@Base>
   14fc0:	add	r0, r4, #88	; 0x58
   14fc4:	b	14fe0 <free_node@@Base+0xf0>
   14fc8:	ldrd	r2, [r4, #56]	; 0x38
   14fcc:	adds	r2, r2, #1
   14fd0:	adc	r3, r3, #0
   14fd4:	strd	r2, [r4, #56]	; 0x38
   14fd8:	bl	152c8 <free_node_boolean_operator@@Base>
   14fdc:	add	r0, r4, #104	; 0x68
   14fe0:	ldrd	r2, [r0]
   14fe4:	adds	r2, r2, #1
   14fe8:	adc	r3, r3, #0
   14fec:	strd	r2, [r0]
   14ff0:	ldrd	r0, [r4, #112]	; 0x70
   14ff4:	adds	r0, r0, #1
   14ff8:	adc	r1, r1, #0
   14ffc:	strd	r0, [r4, #112]	; 0x70
   15000:	pop	{r4, sl, fp, pc}
   15004:	ldrd	r0, [r4, #8]
   15008:	mov	r2, #1
   1500c:	adds	r0, r0, #1
   15010:	adc	r1, r1, #0
   15014:	strd	r0, [r4, #8]
   15018:	movw	r0, #45280	; 0xb0e0
   1501c:	mov	r1, #31
   15020:	movt	r0, #2
   15024:	ldr	r3, [r0]
   15028:	movw	r0, #42352	; 0xa570
   1502c:	movt	r0, #1
   15030:	bl	11ef8 <fwrite@plt>
   15034:	mov	r0, #1
   15038:	bl	11f64 <exit@plt>

0001503c <free_node_id@@Base>:
   1503c:	push	{r4, r5, fp, lr}
   15040:	add	fp, sp, #8
   15044:	movw	r5, #47152	; 0xb830
   15048:	mov	r4, r0
   1504c:	movt	r5, #2
   15050:	ldrd	r0, [r5]
   15054:	adds	r0, r0, #1
   15058:	adc	r1, r1, #0
   1505c:	strd	r0, [r5]
   15060:	ldr	r0, [r4, #4]
   15064:	cmp	r0, #0
   15068:	beq	15088 <free_node_id@@Base+0x4c>
   1506c:	ldrd	r2, [r5, #8]
   15070:	adds	r2, r2, #1
   15074:	adc	r3, r3, #0
   15078:	strd	r2, [r5, #8]
   1507c:	bl	14ef0 <free_node@@Base>
   15080:	add	r0, r5, #24
   15084:	b	1508c <free_node_id@@Base+0x50>
   15088:	add	r0, r5, #16
   1508c:	ldrd	r2, [r0]
   15090:	adds	r2, r2, #1
   15094:	adc	r3, r3, #0
   15098:	strd	r2, [r0]
   1509c:	ldrd	r0, [r5, #32]
   150a0:	adds	r0, r0, #1
   150a4:	adc	r1, r1, #0
   150a8:	strd	r0, [r5, #32]
   150ac:	mov	r0, r4
   150b0:	pop	{r4, r5, fp, lr}
   150b4:	b	11ea4 <free@plt>

000150b8 <free_node_int@@Base>:
   150b8:	push	{r4, r5, fp, lr}
   150bc:	add	fp, sp, #8
   150c0:	movw	r5, #47200	; 0xb860
   150c4:	mov	r4, r0
   150c8:	movt	r5, #2
   150cc:	ldrd	r0, [r5]
   150d0:	adds	r0, r0, #1
   150d4:	adc	r1, r1, #0
   150d8:	strd	r0, [r5]
   150dc:	ldr	r0, [r4, #4]
   150e0:	cmp	r0, #0
   150e4:	beq	15104 <free_node_int@@Base+0x4c>
   150e8:	ldrd	r2, [r5, #8]
   150ec:	adds	r2, r2, #1
   150f0:	adc	r3, r3, #0
   150f4:	strd	r2, [r5, #8]
   150f8:	bl	14ef0 <free_node@@Base>
   150fc:	add	r0, r5, #24
   15100:	b	15108 <free_node_int@@Base+0x50>
   15104:	add	r0, r5, #16
   15108:	ldrd	r2, [r0]
   1510c:	adds	r2, r2, #1
   15110:	adc	r3, r3, #0
   15114:	strd	r2, [r0]
   15118:	ldrd	r0, [r5, #32]
   1511c:	adds	r0, r0, #1
   15120:	adc	r1, r1, #0
   15124:	strd	r0, [r5, #32]
   15128:	mov	r0, r4
   1512c:	pop	{r4, r5, fp, lr}
   15130:	b	11ea4 <free@plt>

00015134 <free_node_function@@Base>:
   15134:	push	{r4, r5, fp, lr}
   15138:	add	fp, sp, #8
   1513c:	movw	r5, #47248	; 0xb890
   15140:	mov	r4, r0
   15144:	movt	r5, #2
   15148:	ldrd	r0, [r5]
   1514c:	adds	r0, r0, #1
   15150:	adc	r1, r1, #0
   15154:	strd	r0, [r5]
   15158:	ldr	r0, [r4, #4]
   1515c:	cmp	r0, #0
   15160:	beq	15180 <free_node_function@@Base+0x4c>
   15164:	ldrd	r2, [r5, #8]
   15168:	adds	r2, r2, #1
   1516c:	adc	r3, r3, #0
   15170:	strd	r2, [r5, #8]
   15174:	bl	14ef0 <free_node@@Base>
   15178:	add	r0, r5, #24
   1517c:	b	15184 <free_node_function@@Base+0x50>
   15180:	add	r0, r5, #16
   15184:	ldrd	r2, [r0]
   15188:	adds	r2, r2, #1
   1518c:	adc	r3, r3, #0
   15190:	strd	r2, [r0]
   15194:	ldrd	r0, [r5, #32]
   15198:	adds	r0, r0, #1
   1519c:	adc	r1, r1, #0
   151a0:	strd	r0, [r5, #32]
   151a4:	ldr	r0, [r4, #8]
   151a8:	bl	11ea4 <free@plt>
   151ac:	mov	r0, r4
   151b0:	pop	{r4, r5, fp, lr}
   151b4:	b	11ea4 <free@plt>

000151b8 <free_node_return@@Base>:
   151b8:	push	{r4, r5, fp, lr}
   151bc:	add	fp, sp, #8
   151c0:	movw	r5, #47296	; 0xb8c0
   151c4:	mov	r4, r0
   151c8:	movt	r5, #2
   151cc:	ldrd	r0, [r5]
   151d0:	adds	r0, r0, #1
   151d4:	adc	r1, r1, #0
   151d8:	strd	r0, [r5]
   151dc:	ldr	r0, [r4, #4]
   151e0:	cmp	r0, #0
   151e4:	beq	15204 <free_node_return@@Base+0x4c>
   151e8:	ldrd	r2, [r5, #8]
   151ec:	adds	r2, r2, #1
   151f0:	adc	r3, r3, #0
   151f4:	strd	r2, [r5, #8]
   151f8:	bl	14ef0 <free_node@@Base>
   151fc:	add	r0, r5, #24
   15200:	b	15208 <free_node_return@@Base+0x50>
   15204:	add	r0, r5, #16
   15208:	ldrd	r2, [r0]
   1520c:	adds	r2, r2, #1
   15210:	adc	r3, r3, #0
   15214:	strd	r2, [r0]
   15218:	ldrd	r0, [r5, #32]
   1521c:	adds	r0, r0, #1
   15220:	adc	r1, r1, #0
   15224:	strd	r0, [r5, #32]
   15228:	mov	r0, r4
   1522c:	pop	{r4, r5, fp, lr}
   15230:	b	11ea4 <free@plt>

00015234 <free_node_if@@Base>:
   15234:	push	{r4, r5, fp, lr}
   15238:	add	fp, sp, #8
   1523c:	movw	r5, #47344	; 0xb8f0
   15240:	mov	r4, r0
   15244:	movt	r5, #2
   15248:	ldrd	r0, [r5]
   1524c:	adds	r0, r0, #1
   15250:	adc	r1, r1, #0
   15254:	strd	r0, [r5]
   15258:	ldr	r0, [r4, #4]
   1525c:	cmp	r0, #0
   15260:	beq	15280 <free_node_if@@Base+0x4c>
   15264:	ldrd	r2, [r5, #8]
   15268:	adds	r2, r2, #1
   1526c:	adc	r3, r3, #0
   15270:	strd	r2, [r5, #8]
   15274:	bl	14ef0 <free_node@@Base>
   15278:	add	r0, r5, #24
   1527c:	b	15284 <free_node_if@@Base+0x50>
   15280:	add	r0, r5, #16
   15284:	ldrd	r2, [r0]
   15288:	adds	r2, r2, #1
   1528c:	adc	r3, r3, #0
   15290:	strd	r2, [r0]
   15294:	ldrd	r0, [r5, #32]
   15298:	adds	r0, r0, #1
   1529c:	adc	r1, r1, #0
   152a0:	strd	r0, [r5, #32]
   152a4:	ldr	r0, [r4, #8]
   152a8:	bl	14ef0 <free_node@@Base>
   152ac:	ldr	r0, [r4, #12]
   152b0:	bl	14ef0 <free_node@@Base>
   152b4:	ldr	r0, [r4, #16]
   152b8:	bl	14ef0 <free_node@@Base>
   152bc:	mov	r0, r4
   152c0:	pop	{r4, r5, fp, lr}
   152c4:	b	11ea4 <free@plt>

000152c8 <free_node_boolean_operator@@Base>:
   152c8:	push	{r4, r5, fp, lr}
   152cc:	add	fp, sp, #8
   152d0:	movw	r5, #47392	; 0xb920
   152d4:	mov	r4, r0
   152d8:	movt	r5, #2
   152dc:	ldrd	r0, [r5]
   152e0:	adds	r0, r0, #1
   152e4:	adc	r1, r1, #0
   152e8:	strd	r0, [r5]
   152ec:	ldr	r0, [r4, #4]
   152f0:	cmp	r0, #0
   152f4:	beq	15314 <free_node_boolean_operator@@Base+0x4c>
   152f8:	ldrd	r2, [r5, #8]
   152fc:	adds	r2, r2, #1
   15300:	adc	r3, r3, #0
   15304:	strd	r2, [r5, #8]
   15308:	bl	14ef0 <free_node@@Base>
   1530c:	add	r0, r5, #24
   15310:	b	15318 <free_node_boolean_operator@@Base+0x50>
   15314:	add	r0, r5, #16
   15318:	ldrd	r2, [r0]
   1531c:	adds	r2, r2, #1
   15320:	adc	r3, r3, #0
   15324:	strd	r2, [r0]
   15328:	ldrd	r0, [r5, #32]
   1532c:	adds	r0, r0, #1
   15330:	adc	r1, r1, #0
   15334:	strd	r0, [r5, #32]
   15338:	ldr	r0, [r4, #8]
   1533c:	bl	14ef0 <free_node@@Base>
   15340:	ldr	r0, [r4, #12]
   15344:	bl	14ef0 <free_node@@Base>
   15348:	mov	r0, r4
   1534c:	pop	{r4, r5, fp, lr}
   15350:	b	11ea4 <free@plt>

00015354 <get_boolean_op_value@@Base>:
   15354:	push	{r4, r5, r6, sl, fp, lr}
   15358:	add	fp, sp, #16
   1535c:	movw	r6, #47440	; 0xb950
   15360:	mov	r1, #2
   15364:	movt	r6, #2
   15368:	ldrd	r2, [r6]
   1536c:	adds	r2, r2, #1
   15370:	adc	r3, r3, #0
   15374:	strd	r2, [r6]
   15378:	ldr	r4, [r0, #4]
   1537c:	mov	r0, r4
   15380:	bl	11ff4 <strnlen@plt>
   15384:	cmp	r0, #2
   15388:	bne	154b4 <get_boolean_op_value@@Base+0x160>
   1538c:	ldrd	r0, [r6, #8]
   15390:	mov	r2, #2
   15394:	adds	r0, r0, #1
   15398:	adc	r1, r1, #0
   1539c:	strd	r0, [r6, #8]
   153a0:	movw	r1, #42384	; 0xa590
   153a4:	mov	r0, r4
   153a8:	movt	r1, #1
   153ac:	bl	1203c <strncmp@plt>
   153b0:	cmp	r0, #0
   153b4:	beq	154fc <get_boolean_op_value@@Base+0x1a8>
   153b8:	ldrd	r0, [r6, #32]
   153bc:	mov	r2, #2
   153c0:	adds	r0, r0, #1
   153c4:	adc	r1, r1, #0
   153c8:	strd	r0, [r6, #32]
   153cc:	movw	r1, #42387	; 0xa593
   153d0:	mov	r0, r4
   153d4:	movt	r1, #1
   153d8:	bl	1203c <strncmp@plt>
   153dc:	cmp	r0, #0
   153e0:	beq	15550 <get_boolean_op_value@@Base+0x1fc>
   153e4:	ldrd	r0, [r6, #56]	; 0x38
   153e8:	mov	r2, #2
   153ec:	mov	r5, #2
   153f0:	adds	r0, r0, #1
   153f4:	adc	r1, r1, #0
   153f8:	strd	r0, [r6, #56]	; 0x38
   153fc:	movw	r1, #42390	; 0xa596
   15400:	mov	r0, r4
   15404:	movt	r1, #1
   15408:	bl	1203c <strncmp@plt>
   1540c:	cmp	r0, #0
   15410:	beq	1556c <get_boolean_op_value@@Base+0x218>
   15414:	ldrd	r0, [r6, #80]	; 0x50
   15418:	mov	r2, #2
   1541c:	adds	r0, r0, #1
   15420:	adc	r1, r1, #0
   15424:	strd	r0, [r6, #80]	; 0x50
   15428:	movw	r1, #42393	; 0xa599
   1542c:	mov	r0, r4
   15430:	movt	r1, #1
   15434:	bl	1203c <strncmp@plt>
   15438:	cmp	r0, #0
   1543c:	beq	15584 <get_boolean_op_value@@Base+0x230>
   15440:	ldrd	r0, [r6, #104]	; 0x68
   15444:	mov	r2, #2
   15448:	adds	r0, r0, #1
   1544c:	adc	r1, r1, #0
   15450:	strd	r0, [r6, #104]	; 0x68
   15454:	movw	r1, #42396	; 0xa59c
   15458:	mov	r0, r4
   1545c:	movt	r1, #1
   15460:	bl	1203c <strncmp@plt>
   15464:	cmp	r0, #0
   15468:	beq	155a0 <get_boolean_op_value@@Base+0x24c>
   1546c:	ldrd	r0, [r6, #128]	; 0x80
   15470:	mov	r2, #2
   15474:	adds	r0, r0, #1
   15478:	adc	r1, r1, #0
   1547c:	strd	r0, [r6, #128]	; 0x80
   15480:	movw	r1, #42399	; 0xa59f
   15484:	mov	r0, r4
   15488:	movt	r1, #1
   1548c:	bl	1203c <strncmp@plt>
   15490:	cmp	r0, #0
   15494:	bne	15614 <get_boolean_op_value@@Base+0x2c0>
   15498:	ldrd	r0, [r6, #144]	; 0x90
   1549c:	mov	r5, #5
   154a0:	adds	r0, r0, #1
   154a4:	adc	r1, r1, #0
   154a8:	strd	r0, [r6, #144]	; 0x90
   154ac:	add	r0, r6, #160	; 0xa0
   154b0:	b	155b8 <get_boolean_op_value@@Base+0x264>
   154b4:	ldrd	r0, [r6, #16]
   154b8:	adds	r0, r0, #1
   154bc:	adc	r1, r1, #0
   154c0:	strd	r0, [r6, #16]
   154c4:	ldrb	r0, [r4]
   154c8:	cmp	r0, #62	; 0x3e
   154cc:	beq	15534 <get_boolean_op_value@@Base+0x1e0>
   154d0:	cmp	r0, #60	; 0x3c
   154d4:	beq	15518 <get_boolean_op_value@@Base+0x1c4>
   154d8:	cmp	r0, #33	; 0x21
   154dc:	bne	155e0 <get_boolean_op_value@@Base+0x28c>
   154e0:	ldrd	r0, [r6, #176]	; 0xb0
   154e4:	mov	r5, #8
   154e8:	adds	r0, r0, #1
   154ec:	adc	r1, r1, #0
   154f0:	strd	r0, [r6, #176]	; 0xb0
   154f4:	add	r0, r6, #200	; 0xc8
   154f8:	b	155b8 <get_boolean_op_value@@Base+0x264>
   154fc:	ldrd	r0, [r6, #24]
   15500:	mov	r5, #0
   15504:	adds	r0, r0, #1
   15508:	adc	r1, r1, #0
   1550c:	strd	r0, [r6, #24]
   15510:	add	r0, r6, #40	; 0x28
   15514:	b	155b8 <get_boolean_op_value@@Base+0x264>
   15518:	ldrd	r0, [r6, #184]	; 0xb8
   1551c:	mov	r5, #6
   15520:	adds	r0, r0, #1
   15524:	adc	r1, r1, #0
   15528:	strd	r0, [r6, #184]	; 0xb8
   1552c:	add	r0, r6, #208	; 0xd0
   15530:	b	155b8 <get_boolean_op_value@@Base+0x264>
   15534:	ldrd	r0, [r6, #192]	; 0xc0
   15538:	mov	r5, #7
   1553c:	adds	r0, r0, #1
   15540:	adc	r1, r1, #0
   15544:	strd	r0, [r6, #192]	; 0xc0
   15548:	add	r0, r6, #216	; 0xd8
   1554c:	b	155b8 <get_boolean_op_value@@Base+0x264>
   15550:	ldrd	r0, [r6, #48]	; 0x30
   15554:	mov	r5, #1
   15558:	adds	r0, r0, #1
   1555c:	adc	r1, r1, #0
   15560:	strd	r0, [r6, #48]	; 0x30
   15564:	add	r0, r6, #64	; 0x40
   15568:	b	155b8 <get_boolean_op_value@@Base+0x264>
   1556c:	ldrd	r0, [r6, #72]	; 0x48
   15570:	adds	r0, r0, #1
   15574:	adc	r1, r1, #0
   15578:	strd	r0, [r6, #72]	; 0x48
   1557c:	add	r0, r6, #88	; 0x58
   15580:	b	155b8 <get_boolean_op_value@@Base+0x264>
   15584:	ldrd	r0, [r6, #96]	; 0x60
   15588:	mov	r5, #3
   1558c:	adds	r0, r0, #1
   15590:	adc	r1, r1, #0
   15594:	strd	r0, [r6, #96]	; 0x60
   15598:	add	r0, r6, #112	; 0x70
   1559c:	b	155b8 <get_boolean_op_value@@Base+0x264>
   155a0:	ldrd	r0, [r6, #120]	; 0x78
   155a4:	mov	r5, #4
   155a8:	adds	r0, r0, #1
   155ac:	adc	r1, r1, #0
   155b0:	strd	r0, [r6, #120]	; 0x78
   155b4:	add	r0, r6, #136	; 0x88
   155b8:	ldrd	r2, [r0]
   155bc:	adds	r2, r2, #1
   155c0:	adc	r3, r3, #0
   155c4:	strd	r2, [r0]
   155c8:	ldrd	r0, [r6, #224]	; 0xe0
   155cc:	adds	r0, r0, #1
   155d0:	adc	r1, r1, #0
   155d4:	strd	r0, [r6, #224]	; 0xe0
   155d8:	mov	r0, r5
   155dc:	pop	{r4, r5, r6, sl, fp, pc}
   155e0:	ldrd	r0, [r6, #168]	; 0xa8
   155e4:	adds	r0, r0, #1
   155e8:	adc	r1, r1, #0
   155ec:	strd	r0, [r6, #168]	; 0xa8
   155f0:	movw	r0, #45280	; 0xb0e0
   155f4:	movw	r1, #42402	; 0xa5a2
   155f8:	mov	r2, r4
   155fc:	movt	r0, #2
   15600:	movt	r1, #1
   15604:	ldr	r0, [r0]
   15608:	bl	11f88 <fprintf@plt>
   1560c:	mov	r0, #1
   15610:	bl	11f64 <exit@plt>
   15614:	ldrd	r0, [r6, #152]	; 0x98
   15618:	adds	r0, r0, #1
   1561c:	adc	r1, r1, #0
   15620:	strd	r0, [r6, #152]	; 0x98
   15624:	b	155f0 <get_boolean_op_value@@Base+0x29c>
   15628:	push	{r4, r5, r6, lr}
   1562c:	sub	sp, sp, #8
   15630:	movw	r0, #42456	; 0xa5d8
   15634:	movw	r1, #40080	; 0x9c90
   15638:	movw	r2, #31856	; 0x7c70
   1563c:	movt	r0, #1
   15640:	movt	r1, #1
   15644:	movt	r2, #15338	; 0x3bea
   15648:	bl	16770 <read_boolean_unary_expression@@Base+0x39c>
   1564c:	movw	r0, #43136	; 0xa880
   15650:	movw	r6, #42816	; 0xa740
   15654:	mov	r5, #0
   15658:	movt	r0, #1
   1565c:	movt	r6, #1
   15660:	add	r4, r0, #4
   15664:	mov	r3, r6
   15668:	ldr	r0, [r3, r5]!
   1566c:	ldr	r1, [r3, #16]
   15670:	str	r1, [sp]
   15674:	ldmib	r3, {r1, r2}
   15678:	ldrb	r3, [r3, #12]
   1567c:	bl	16e90 <read_boolean_unary_expression@@Base+0xabc>
   15680:	ldrd	r0, [r4, #-4]
   15684:	bl	17744 <read_boolean_unary_expression@@Base+0x1370>
   15688:	add	r5, r5, #20
   1568c:	add	r4, r4, #8
   15690:	cmp	r5, #320	; 0x140
   15694:	bne	15664 <get_boolean_op_value@@Base+0x310>
   15698:	bl	17ecc <read_boolean_unary_expression@@Base+0x1af8>
   1569c:	add	sp, sp, #8
   156a0:	pop	{r4, r5, r6, lr}
   156a4:	b	18c38 <read_boolean_unary_expression@@Base+0x2864>
   156a8:	push	{fp, lr}
   156ac:	bl	15628 <get_boolean_op_value@@Base+0x2d4>
   156b0:	movw	ip, #47152	; 0xb830
   156b4:	vmov.i32	q8, #0	; 0x00000000
   156b8:	mov	r0, #36	; 0x24
   156bc:	mov	r1, #0
   156c0:	movt	ip, #2
   156c4:	mov	r3, ip
   156c8:	str	r1, [ip, #32]
   156cc:	vst1.64	{d16-d17}, [r3 :128], r0
   156d0:	str	r1, [r3]
   156d4:	movw	r3, #46912	; 0xb740
   156d8:	movt	r3, #2
   156dc:	vst1.64	{d16-d17}, [r3 :128]
   156e0:	movw	r3, #46896	; 0xb730
   156e4:	movt	r3, #2
   156e8:	vst1.64	{d16-d17}, [r3 :128]
   156ec:	movw	r3, #46928	; 0xb750
   156f0:	movt	r3, #2
   156f4:	vst1.64	{d16-d17}, [r3 :128]
   156f8:	movw	r3, #46944	; 0xb760
   156fc:	movt	r3, #2
   15700:	vst1.64	{d16-d17}, [r3 :128]
   15704:	movw	r3, #46960	; 0xb770
   15708:	movt	r3, #2
   1570c:	vst1.64	{d16-d17}, [r3 :128]
   15710:	movw	r3, #46976	; 0xb780
   15714:	movt	r3, #2
   15718:	vst1.64	{d16-d17}, [r3 :128]
   1571c:	movw	r3, #46992	; 0xb790
   15720:	movt	r3, #2
   15724:	vst1.64	{d16-d17}, [r3 :128]
   15728:	movw	r3, #47008	; 0xb7a0
   1572c:	movt	r3, #2
   15730:	vst1.64	{d16-d17}, [r3 :128]
   15734:	movw	r3, #47024	; 0xb7b0
   15738:	movt	r3, #2
   1573c:	add	r2, r3, #16
   15740:	str	r1, [r3, #112]	; 0x70
   15744:	vst1.64	{d16-d17}, [r2 :128]
   15748:	add	r2, r3, #32
   1574c:	vst1.64	{d16-d17}, [r2 :128]
   15750:	add	r2, r3, #48	; 0x30
   15754:	vst1.64	{d16-d17}, [r2 :128]
   15758:	add	r2, r3, #64	; 0x40
   1575c:	vst1.64	{d16-d17}, [r2 :128]
   15760:	add	r2, r3, #80	; 0x50
   15764:	vst1.64	{d16-d17}, [r2 :128]
   15768:	add	r2, r3, #96	; 0x60
   1576c:	vst1.64	{d16-d17}, [r2 :128]
   15770:	add	r2, ip, #16
   15774:	vst1.64	{d16-d17}, [r2 :128]
   15778:	mov	r2, #116	; 0x74
   1577c:	vst1.64	{d16-d17}, [r3 :128], r2
   15780:	movw	r2, #47200	; 0xb860
   15784:	movt	r2, #2
   15788:	str	r1, [r3]
   1578c:	add	r3, r2, #16
   15790:	str	r1, [r2, #32]
   15794:	vst1.64	{d16-d17}, [r2 :128], r0
   15798:	str	r1, [r2]
   1579c:	movw	r2, #47248	; 0xb890
   157a0:	vst1.64	{d16-d17}, [r3 :128]
   157a4:	movt	r2, #2
   157a8:	mov	r3, r2
   157ac:	str	r1, [r2, #32]
   157b0:	vst1.64	{d16-d17}, [r3 :128], r0
   157b4:	str	r1, [r3]
   157b8:	add	r3, r2, #16
   157bc:	movw	r2, #47296	; 0xb8c0
   157c0:	movt	r2, #2
   157c4:	vst1.64	{d16-d17}, [r3 :128]
   157c8:	add	r3, r2, #16
   157cc:	str	r1, [r2, #32]
   157d0:	vst1.64	{d16-d17}, [r2 :128], r0
   157d4:	str	r1, [r2]
   157d8:	movw	r2, #47344	; 0xb8f0
   157dc:	vst1.64	{d16-d17}, [r3 :128]
   157e0:	movt	r2, #2
   157e4:	mov	r3, r2
   157e8:	str	r1, [r2, #32]
   157ec:	add	r2, r2, #16
   157f0:	vst1.64	{d16-d17}, [r2 :128]
   157f4:	movw	r2, #47392	; 0xb920
   157f8:	vst1.64	{d16-d17}, [r3 :128], r0
   157fc:	movt	r2, #2
   15800:	str	r1, [r3]
   15804:	add	r3, r2, #16
   15808:	str	r1, [r2, #32]
   1580c:	vst1.64	{d16-d17}, [r2 :128], r0
   15810:	movw	r0, #47440	; 0xb950
   15814:	movt	r0, #2
   15818:	str	r1, [r2]
   1581c:	mov	r1, #0
   15820:	mov	r2, #232	; 0xe8
   15824:	vst1.64	{d16-d17}, [r3 :128]
   15828:	bl	11fb8 <memset@plt>
   1582c:	pop	{fp, pc}
   15830:	movw	r0, #22056	; 0x5628
   15834:	movw	r1, #22184	; 0x56a8
   15838:	movt	r0, #1
   1583c:	movt	r1, #1
   15840:	b	190ec <__gcov_flush@@Base+0xb8>
   15844:	andeq	r0, r0, r0

00015848 <init_grammar@@Base>:
   15848:	movw	r2, #47680	; 0xba40
   1584c:	add	r3, pc, #28
   15850:	movt	r2, #2
   15854:	vld1.64	{d16-d17}, [r3]
   15858:	vld1.64	{d18-d19}, [r2 :128]
   1585c:	vadd.i64	q8, q9, q8
   15860:	vst1.64	{d16-d17}, [r2 :128]
   15864:	str	r1, [r0]
   15868:	bx	lr
   1586c:	nop	{0}
   15870:	andeq	r0, r0, r1
   15874:	andeq	r0, r0, r0
   15878:	andeq	r0, r0, r1
   1587c:	andeq	r0, r0, r0

00015880 <destroy_grammar@@Base>:
   15880:	movw	r0, #47696	; 0xba50
   15884:	add	r1, pc, #20
   15888:	movt	r0, #2
   1588c:	vld1.64	{d16-d17}, [r1]
   15890:	vld1.64	{d18-d19}, [r0 :128]
   15894:	vadd.i64	q8, q9, q8
   15898:	vst1.64	{d16-d17}, [r0 :128]
   1589c:	bx	lr
   158a0:	andeq	r0, r0, r1
   158a4:	andeq	r0, r0, r0
   158a8:	andeq	r0, r0, r1
   158ac:	andeq	r0, r0, r0

000158b0 <build_ast@@Base>:
   158b0:	movw	r1, #47712	; 0xba60
   158b4:	add	r2, pc, #20
   158b8:	movt	r1, #2
   158bc:	vld1.64	{d16-d17}, [r2]
   158c0:	vld1.64	{d18-d19}, [r1 :128]
   158c4:	vadd.i64	q8, q9, q8
   158c8:	vst1.64	{d16-d17}, [r1 :128]
   158cc:	b	158e0 <read_function_ast_node@@Base>
   158d0:	andeq	r0, r0, r1
   158d4:	andeq	r0, r0, r0
   158d8:	andeq	r0, r0, r1
   158dc:	andeq	r0, r0, r0

000158e0 <read_function_ast_node@@Base>:
   158e0:	push	{r4, r5, r6, r7, fp, lr}
   158e4:	add	fp, sp, #16
   158e8:	movw	r7, #47728	; 0xba70
   158ec:	mov	r4, r0
   158f0:	movt	r7, #2
   158f4:	ldrd	r0, [r7]
   158f8:	adds	r0, r0, #1
   158fc:	adc	r1, r1, #0
   15900:	strd	r0, [r7]
   15904:	ldr	r0, [r4]
   15908:	bl	12150 <next@@Base>
   1590c:	ldr	r1, [r0]
   15910:	cmp	r1, #0
   15914:	beq	15934 <read_function_ast_node@@Base+0x54>
   15918:	ldrd	r0, [r7, #8]
   1591c:	mov	r4, #0
   15920:	adds	r0, r0, #1
   15924:	adc	r1, r1, #0
   15928:	strd	r0, [r7, #8]
   1592c:	add	r0, r7, #24
   15930:	b	15a44 <read_function_ast_node@@Base+0x164>
   15934:	ldrd	r2, [r7, #16]
   15938:	adds	r2, r2, #1
   1593c:	adc	r3, r3, #0
   15940:	strd	r2, [r7, #16]
   15944:	bl	14710 <free_token_int_type@@Base>
   15948:	ldr	r0, [r4]
   1594c:	bl	12150 <next@@Base>
   15950:	mov	r5, r0
   15954:	ldr	r0, [r0]
   15958:	cmp	r0, #2
   1595c:	bne	159f4 <read_function_ast_node@@Base+0x114>
   15960:	ldrd	r0, [r7, #40]	; 0x28
   15964:	adds	r0, r0, #1
   15968:	adc	r1, r1, #0
   1596c:	strd	r0, [r7, #40]	; 0x28
   15970:	ldr	r0, [r4]
   15974:	bl	12150 <next@@Base>
   15978:	ldr	r1, [r0]
   1597c:	cmp	r1, #3
   15980:	bne	15a10 <read_function_ast_node@@Base+0x130>
   15984:	ldrd	r2, [r7, #64]	; 0x40
   15988:	adds	r2, r2, #1
   1598c:	adc	r3, r3, #0
   15990:	strd	r2, [r7, #64]	; 0x40
   15994:	bl	147a0 <free_token_opar@@Base>
   15998:	ldr	r0, [r4]
   1599c:	bl	12150 <next@@Base>
   159a0:	ldr	r1, [r0]
   159a4:	cmp	r1, #4
   159a8:	bne	15a2c <read_function_ast_node@@Base+0x14c>
   159ac:	ldrd	r2, [r7, #88]	; 0x58
   159b0:	adds	r2, r2, #1
   159b4:	adc	r3, r3, #0
   159b8:	strd	r2, [r7, #88]	; 0x58
   159bc:	bl	147d0 <free_token_cpar@@Base>
   159c0:	mov	r0, r4
   159c4:	bl	15a6c <read_body@@Base>
   159c8:	mov	r6, r0
   159cc:	mov	r0, #16
   159d0:	bl	11f28 <malloc@plt>
   159d4:	ldr	r1, [r5, #4]
   159d8:	mov	r2, r6
   159dc:	mov	r4, r0
   159e0:	bl	14d20 <init_node_function@@Base>
   159e4:	mov	r0, r5
   159e8:	bl	14770 <free_token_function@@Base>
   159ec:	add	r0, r7, #104	; 0x68
   159f0:	b	15a44 <read_function_ast_node@@Base+0x164>
   159f4:	ldrd	r0, [r7, #32]
   159f8:	mov	r4, #0
   159fc:	adds	r0, r0, #1
   15a00:	adc	r1, r1, #0
   15a04:	strd	r0, [r7, #32]
   15a08:	add	r0, r7, #48	; 0x30
   15a0c:	b	15a44 <read_function_ast_node@@Base+0x164>
   15a10:	ldrd	r0, [r7, #56]	; 0x38
   15a14:	mov	r4, #0
   15a18:	adds	r0, r0, #1
   15a1c:	adc	r1, r1, #0
   15a20:	strd	r0, [r7, #56]	; 0x38
   15a24:	add	r0, r7, #72	; 0x48
   15a28:	b	15a44 <read_function_ast_node@@Base+0x164>
   15a2c:	ldrd	r0, [r7, #80]	; 0x50
   15a30:	mov	r4, #0
   15a34:	adds	r0, r0, #1
   15a38:	adc	r1, r1, #0
   15a3c:	strd	r0, [r7, #80]	; 0x50
   15a40:	add	r0, r7, #96	; 0x60
   15a44:	ldrd	r2, [r0]
   15a48:	adds	r2, r2, #1
   15a4c:	adc	r3, r3, #0
   15a50:	strd	r2, [r0]
   15a54:	ldrd	r0, [r7, #112]	; 0x70
   15a58:	adds	r0, r0, #1
   15a5c:	adc	r1, r1, #0
   15a60:	strd	r0, [r7, #112]	; 0x70
   15a64:	mov	r0, r4
   15a68:	pop	{r4, r5, r6, r7, fp, pc}

00015a6c <read_body@@Base>:
   15a6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15a70:	add	fp, sp, #28
   15a74:	sub	sp, sp, #4
   15a78:	movw	r7, #47856	; 0xbaf0
   15a7c:	mov	r4, r0
   15a80:	movt	r7, #2
   15a84:	ldrd	r0, [r7]
   15a88:	adds	r0, r0, #1
   15a8c:	adc	r1, r1, #0
   15a90:	strd	r0, [r7]
   15a94:	ldr	r0, [r4]
   15a98:	bl	12150 <next@@Base>
   15a9c:	ldr	r1, [r0]
   15aa0:	cmp	r1, #5
   15aa4:	bne	15c40 <read_body@@Base+0x1d4>
   15aa8:	ldrd	r2, [r7, #16]
   15aac:	adds	r2, r2, #1
   15ab0:	adc	r3, r3, #0
   15ab4:	strd	r2, [r7, #16]
   15ab8:	bl	14800 <free_token_obra@@Base>
   15abc:	ldr	r0, [r4]
   15ac0:	bl	12150 <next@@Base>
   15ac4:	mov	r1, r0
   15ac8:	ldr	r0, [r7, #32]
   15acc:	ldr	r3, [r7, #36]	; 0x24
   15ad0:	mov	sl, #0
   15ad4:	adds	r0, r0, #1
   15ad8:	adc	r3, r3, #0
   15adc:	str	r0, [r7, #32]
   15ae0:	str	r3, [r7, #36]	; 0x24
   15ae4:	ldr	r0, [r1]
   15ae8:	cmp	r0, #6
   15aec:	beq	15c18 <read_body@@Base+0x1ac>
   15af0:	add	r2, r7, #128	; 0x80
   15af4:	mov	r5, #0
   15af8:	add	r9, r7, #88	; 0x58
   15afc:	mov	sl, #0
   15b00:	str	r2, [sp]
   15b04:	ldrd	r2, [r7, #40]	; 0x28
   15b08:	adds	r2, r2, #1
   15b0c:	adc	r3, r3, #0
   15b10:	cmp	r0, #10
   15b14:	strd	r2, [r7, #40]	; 0x28
   15b18:	beq	15b58 <read_body@@Base+0xec>
   15b1c:	cmp	r0, #7
   15b20:	bne	15c5c <read_body@@Base+0x1f0>
   15b24:	ldr	r0, [r7, #64]	; 0x40
   15b28:	ldr	r3, [r7, #68]	; 0x44
   15b2c:	adds	r0, r0, #1
   15b30:	str	r0, [r7, #64]	; 0x40
   15b34:	adc	r3, r3, #0
   15b38:	mov	r0, r1
   15b3c:	str	r3, [r7, #68]	; 0x44
   15b40:	bl	14860 <free_token_return@@Base>
   15b44:	mov	r0, r4
   15b48:	add	r8, r7, #80	; 0x50
   15b4c:	bl	15cac <read_return_expression@@Base>
   15b50:	mov	r6, r0
   15b54:	b	15b88 <read_body@@Base+0x11c>
   15b58:	ldr	r0, [r7, #72]	; 0x48
   15b5c:	ldr	r3, [r7, #76]	; 0x4c
   15b60:	adds	r0, r0, #1
   15b64:	str	r0, [r7, #72]	; 0x48
   15b68:	adc	r3, r3, #0
   15b6c:	mov	r0, r1
   15b70:	str	r3, [r7, #76]	; 0x4c
   15b74:	bl	148f0 <free_token_if@@Base>
   15b78:	mov	r0, r4
   15b7c:	bl	15db4 <read_if_statement@@Base>
   15b80:	mov	r6, r0
   15b84:	mov	r8, r9
   15b88:	ldrd	r0, [r8]
   15b8c:	adds	r0, r0, #1
   15b90:	adc	r1, r1, #0
   15b94:	cmp	sl, #0
   15b98:	strd	r0, [r8]
   15b9c:	beq	15bbc <read_body@@Base+0x150>
   15ba0:	ldrd	r0, [r7, #104]	; 0x68
   15ba4:	adds	r0, r0, #1
   15ba8:	adc	r1, r1, #0
   15bac:	strd	r0, [r7, #104]	; 0x68
   15bb0:	str	r6, [r5, #4]
   15bb4:	add	r0, r7, #120	; 0x78
   15bb8:	b	15bd4 <read_body@@Base+0x168>
   15bbc:	ldrd	r0, [r7, #112]	; 0x70
   15bc0:	mov	sl, r6
   15bc4:	adds	r0, r0, #1
   15bc8:	adc	r1, r1, #0
   15bcc:	strd	r0, [r7, #112]	; 0x70
   15bd0:	ldr	r0, [sp]
   15bd4:	ldrd	r2, [r0]
   15bd8:	adds	r2, r2, #1
   15bdc:	adc	r3, r3, #0
   15be0:	strd	r2, [r0]
   15be4:	ldr	r0, [r4]
   15be8:	bl	12150 <next@@Base>
   15bec:	mov	r1, r0
   15bf0:	ldr	r0, [r7, #136]	; 0x88
   15bf4:	ldr	r3, [r7, #140]	; 0x8c
   15bf8:	mov	r5, r6
   15bfc:	adds	r0, r0, #1
   15c00:	adc	r3, r3, #0
   15c04:	str	r0, [r7, #136]	; 0x88
   15c08:	str	r3, [r7, #140]	; 0x8c
   15c0c:	ldr	r0, [r1]
   15c10:	cmp	r0, #6
   15c14:	bne	15b04 <read_body@@Base+0x98>
   15c18:	ldr	r0, [r7, #48]	; 0x30
   15c1c:	ldr	r3, [r7, #52]	; 0x34
   15c20:	adds	r0, r0, #1
   15c24:	str	r0, [r7, #48]	; 0x30
   15c28:	adc	r3, r3, #0
   15c2c:	mov	r0, r1
   15c30:	str	r3, [r7, #52]	; 0x34
   15c34:	bl	14830 <free_token_cbra@@Base>
   15c38:	add	r0, r7, #144	; 0x90
   15c3c:	b	15c80 <read_body@@Base+0x214>
   15c40:	ldrd	r0, [r7, #8]
   15c44:	mov	sl, #0
   15c48:	adds	r0, r0, #1
   15c4c:	adc	r1, r1, #0
   15c50:	strd	r0, [r7, #8]
   15c54:	add	r0, r7, #24
   15c58:	b	15c80 <read_body@@Base+0x214>
   15c5c:	ldr	r0, [r7, #56]	; 0x38
   15c60:	ldr	r3, [r7, #60]	; 0x3c
   15c64:	adds	r0, r0, #1
   15c68:	adc	r3, r3, #0
   15c6c:	str	r0, [r7, #56]	; 0x38
   15c70:	str	r3, [r7, #60]	; 0x3c
   15c74:	ldr	r0, [r4]
   15c78:	bl	12388 <push_back@@Base>
   15c7c:	add	r0, r7, #96	; 0x60
   15c80:	ldrd	r2, [r0]
   15c84:	adds	r2, r2, #1
   15c88:	adc	r3, r3, #0
   15c8c:	strd	r2, [r0]
   15c90:	ldrd	r0, [r7, #152]	; 0x98
   15c94:	adds	r0, r0, #1
   15c98:	adc	r1, r1, #0
   15c9c:	strd	r0, [r7, #152]	; 0x98
   15ca0:	mov	r0, sl
   15ca4:	sub	sp, fp, #28
   15ca8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00015cac <read_return_expression@@Base>:
   15cac:	push	{r4, r5, r6, r7, fp, lr}
   15cb0:	add	fp, sp, #16
   15cb4:	movw	r7, #48016	; 0xbb90
   15cb8:	mov	r5, r0
   15cbc:	movt	r7, #2
   15cc0:	ldrd	r0, [r7]
   15cc4:	adds	r0, r0, #1
   15cc8:	adc	r1, r1, #0
   15ccc:	strd	r0, [r7]
   15cd0:	ldr	r0, [r5]
   15cd4:	bl	12150 <next@@Base>
   15cd8:	mov	r4, r0
   15cdc:	ldr	r0, [r0]
   15ce0:	cmp	r0, #1
   15ce4:	bne	15d58 <read_return_expression@@Base+0xac>
   15ce8:	ldrd	r0, [r7, #16]
   15cec:	adds	r0, r0, #1
   15cf0:	adc	r1, r1, #0
   15cf4:	strd	r0, [r7, #16]
   15cf8:	mov	r0, #12
   15cfc:	bl	11f28 <malloc@plt>
   15d00:	ldr	r1, [r4, #4]
   15d04:	mov	r6, r0
   15d08:	bl	14cb0 <init_node_int@@Base>
   15d0c:	mov	r0, r4
   15d10:	bl	14740 <free_token_int_value@@Base>
   15d14:	mov	r0, #12
   15d18:	bl	11f28 <malloc@plt>
   15d1c:	mov	r1, r6
   15d20:	mov	r4, r0
   15d24:	bl	14d98 <init_node_return@@Base>
   15d28:	ldr	r0, [r5]
   15d2c:	bl	12150 <next@@Base>
   15d30:	ldr	r1, [r0]
   15d34:	cmp	r1, #8
   15d38:	bne	15d74 <read_return_expression@@Base+0xc8>
   15d3c:	ldrd	r2, [r7, #40]	; 0x28
   15d40:	adds	r2, r2, #1
   15d44:	adc	r3, r3, #0
   15d48:	strd	r2, [r7, #40]	; 0x28
   15d4c:	bl	14890 <free_token_semicolon@@Base>
   15d50:	add	r0, r7, #56	; 0x38
   15d54:	b	15d8c <read_return_expression@@Base+0xe0>
   15d58:	ldrd	r0, [r7, #8]
   15d5c:	mov	r4, #0
   15d60:	adds	r0, r0, #1
   15d64:	adc	r1, r1, #0
   15d68:	strd	r0, [r7, #8]
   15d6c:	add	r0, r7, #24
   15d70:	b	15d8c <read_return_expression@@Base+0xe0>
   15d74:	ldrd	r0, [r7, #32]
   15d78:	mov	r4, #0
   15d7c:	adds	r0, r0, #1
   15d80:	adc	r1, r1, #0
   15d84:	strd	r0, [r7, #32]
   15d88:	add	r0, r7, #48	; 0x30
   15d8c:	ldrd	r2, [r0]
   15d90:	adds	r2, r2, #1
   15d94:	adc	r3, r3, #0
   15d98:	strd	r2, [r0]
   15d9c:	ldrd	r0, [r7, #64]	; 0x40
   15da0:	adds	r0, r0, #1
   15da4:	adc	r1, r1, #0
   15da8:	strd	r0, [r7, #64]	; 0x40
   15dac:	mov	r0, r4
   15db0:	pop	{r4, r5, r6, r7, fp, pc}

00015db4 <read_if_statement@@Base>:
   15db4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15db8:	add	fp, sp, #24
   15dbc:	movw	r4, #48096	; 0xbbe0
   15dc0:	mov	r5, r0
   15dc4:	movt	r4, #2
   15dc8:	ldrd	r0, [r4]
   15dcc:	adds	r0, r0, #1
   15dd0:	adc	r1, r1, #0
   15dd4:	strd	r0, [r4]
   15dd8:	ldr	r0, [r5]
   15ddc:	bl	12150 <next@@Base>
   15de0:	ldr	r1, [r0]
   15de4:	cmp	r1, #3
   15de8:	bne	15e64 <read_if_statement@@Base+0xb0>
   15dec:	ldrd	r2, [r4, #16]
   15df0:	adds	r2, r2, #1
   15df4:	adc	r3, r3, #0
   15df8:	strd	r2, [r4, #16]
   15dfc:	bl	147a0 <free_token_opar@@Base>
   15e00:	mov	r0, r5
   15e04:	bl	15f00 <read_boolean_expression@@Base>
   15e08:	mov	r8, r0
   15e0c:	mov	r0, r5
   15e10:	bl	15a6c <read_body@@Base>
   15e14:	mov	r9, r0
   15e18:	ldr	r0, [r5]
   15e1c:	bl	12150 <next@@Base>
   15e20:	mov	r1, r0
   15e24:	ldr	r0, [r0]
   15e28:	cmp	r0, #11
   15e2c:	bne	15e80 <read_if_statement@@Base+0xcc>
   15e30:	ldr	r0, [r4, #32]
   15e34:	ldr	r3, [r4, #36]	; 0x24
   15e38:	adds	r0, r0, #1
   15e3c:	str	r0, [r4, #32]
   15e40:	adc	r3, r3, #0
   15e44:	mov	r0, r1
   15e48:	str	r3, [r4, #36]	; 0x24
   15e4c:	bl	14920 <free_token_else@@Base>
   15e50:	mov	r0, r5
   15e54:	add	r6, r4, #48	; 0x30
   15e58:	bl	15a6c <read_body@@Base>
   15e5c:	mov	r7, r0
   15e60:	b	15ea8 <read_if_statement@@Base+0xf4>
   15e64:	ldrd	r0, [r4, #8]
   15e68:	mov	r5, #0
   15e6c:	adds	r0, r0, #1
   15e70:	adc	r1, r1, #0
   15e74:	strd	r0, [r4, #8]
   15e78:	add	r0, r4, #24
   15e7c:	b	15ed8 <read_if_statement@@Base+0x124>
   15e80:	ldr	r0, [r4, #40]	; 0x28
   15e84:	ldr	r3, [r4, #44]	; 0x2c
   15e88:	adds	r0, r0, #1
   15e8c:	adc	r3, r3, #0
   15e90:	str	r0, [r4, #40]	; 0x28
   15e94:	str	r3, [r4, #44]	; 0x2c
   15e98:	ldr	r0, [r5]
   15e9c:	bl	12388 <push_back@@Base>
   15ea0:	add	r6, r4, #56	; 0x38
   15ea4:	mov	r7, #0
   15ea8:	ldrd	r0, [r6]
   15eac:	adds	r0, r0, #1
   15eb0:	adc	r1, r1, #0
   15eb4:	strd	r0, [r6]
   15eb8:	mov	r0, #20
   15ebc:	bl	11f28 <malloc@plt>
   15ec0:	mov	r1, r8
   15ec4:	mov	r2, r9
   15ec8:	mov	r3, r7
   15ecc:	mov	r5, r0
   15ed0:	bl	14e08 <init_node_if@@Base>
   15ed4:	add	r0, r4, #64	; 0x40
   15ed8:	ldrd	r2, [r0]
   15edc:	adds	r2, r2, #1
   15ee0:	adc	r3, r3, #0
   15ee4:	strd	r2, [r0]
   15ee8:	ldrd	r0, [r4, #72]	; 0x48
   15eec:	adds	r0, r0, #1
   15ef0:	adc	r1, r1, #0
   15ef4:	strd	r0, [r4, #72]	; 0x48
   15ef8:	mov	r0, r5
   15efc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

00015f00 <read_boolean_expression@@Base>:
   15f00:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15f04:	add	fp, sp, #28
   15f08:	sub	sp, sp, #4
   15f0c:	movw	r6, #48176	; 0xbc30
   15f10:	mov	r5, r0
   15f14:	mov	r4, #0
   15f18:	movt	r6, #2
   15f1c:	str	r4, [sp]
   15f20:	ldrd	r0, [r6]
   15f24:	adds	r0, r0, #1
   15f28:	adc	r1, r1, #0
   15f2c:	strd	r0, [r6]
   15f30:	ldr	r0, [r5]
   15f34:	bl	12150 <next@@Base>
   15f38:	mov	r1, r0
   15f3c:	ldr	r0, [r6, #8]
   15f40:	ldr	r3, [r6, #12]
   15f44:	adds	r0, r0, #1
   15f48:	adc	r3, r3, #0
   15f4c:	str	r0, [r6, #8]
   15f50:	str	r3, [r6, #12]
   15f54:	ldr	r0, [r1]
   15f58:	cmp	r0, #4
   15f5c:	beq	16074 <read_boolean_expression@@Base+0x174>
   15f60:	mov	r4, #0
   15f64:	mov	r9, #1
   15f68:	add	sl, r6, #72	; 0x48
   15f6c:	mov	r8, sp
   15f70:	ldrd	r2, [r6, #16]
   15f74:	adds	r2, r2, #1
   15f78:	adc	r3, r3, #0
   15f7c:	cmp	r0, #12
   15f80:	strd	r2, [r6, #16]
   15f84:	beq	16008 <read_boolean_expression@@Base+0x108>
   15f88:	cmp	r0, #3
   15f8c:	beq	15fd8 <read_boolean_expression@@Base+0xd8>
   15f90:	cmp	r0, #1
   15f94:	bne	160b8 <read_boolean_expression@@Base+0x1b8>
   15f98:	ldr	r0, [r6, #40]	; 0x28
   15f9c:	ldr	r3, [r6, #44]	; 0x2c
   15fa0:	adds	r0, r0, #1
   15fa4:	adc	r3, r3, #0
   15fa8:	str	r0, [r6, #40]	; 0x28
   15fac:	str	r3, [r6, #44]	; 0x2c
   15fb0:	ldr	r0, [r5]
   15fb4:	bl	12388 <push_back@@Base>
   15fb8:	mov	r0, r5
   15fbc:	mov	r1, r4
   15fc0:	mov	r2, r8
   15fc4:	mov	r3, r7
   15fc8:	bl	160f0 <read_single_boolean_expression@@Base>
   15fcc:	mov	r4, r0
   15fd0:	add	r0, r6, #64	; 0x40
   15fd4:	b	16034 <read_boolean_expression@@Base+0x134>
   15fd8:	ldrd	r0, [r6, #56]	; 0x38
   15fdc:	mov	r2, r8
   15fe0:	mov	r3, r7
   15fe4:	adds	r0, r0, #1
   15fe8:	adc	r1, r1, #0
   15fec:	strd	r0, [r6, #56]	; 0x38
   15ff0:	mov	r0, r5
   15ff4:	mov	r1, r4
   15ff8:	bl	160f0 <read_single_boolean_expression@@Base>
   15ffc:	mov	r4, r0
   16000:	add	r0, r6, #80	; 0x50
   16004:	b	16034 <read_boolean_expression@@Base+0x134>
   16008:	ldr	r0, [r6, #48]	; 0x30
   1600c:	ldr	r3, [r6, #52]	; 0x34
   16010:	adds	r0, r0, #1
   16014:	str	r0, [r6, #48]	; 0x30
   16018:	adc	r3, r3, #0
   1601c:	mov	r0, r1
   16020:	str	r3, [r6, #52]	; 0x34
   16024:	bl	15354 <get_boolean_op_value@@Base>
   16028:	mov	r7, r0
   1602c:	mov	r0, sl
   16030:	str	r9, [sp]
   16034:	ldrd	r2, [r0]
   16038:	adds	r2, r2, #1
   1603c:	adc	r3, r3, #0
   16040:	strd	r2, [r0]
   16044:	ldr	r0, [r5]
   16048:	bl	12150 <next@@Base>
   1604c:	mov	r1, r0
   16050:	ldr	r0, [r6, #88]	; 0x58
   16054:	ldr	r3, [r6, #92]	; 0x5c
   16058:	adds	r0, r0, #1
   1605c:	adc	r3, r3, #0
   16060:	str	r0, [r6, #88]	; 0x58
   16064:	str	r3, [r6, #92]	; 0x5c
   16068:	ldr	r0, [r1]
   1606c:	cmp	r0, #4
   16070:	bne	15f70 <read_boolean_expression@@Base+0x70>
   16074:	ldr	r0, [r6, #24]
   16078:	ldr	r3, [r6, #28]
   1607c:	ldr	r2, [r6, #96]	; 0x60
   16080:	ldr	r5, [r6, #100]	; 0x64
   16084:	adds	r0, r0, #1
   16088:	adc	r3, r3, #0
   1608c:	adds	r2, r2, #1
   16090:	str	r2, [r6, #96]	; 0x60
   16094:	str	r0, [r6, #24]
   16098:	adc	r0, r5, #0
   1609c:	str	r3, [r6, #28]
   160a0:	str	r0, [r6, #100]	; 0x64
   160a4:	mov	r0, r1
   160a8:	bl	147d0 <free_token_cpar@@Base>
   160ac:	mov	r0, r4
   160b0:	sub	sp, fp, #28
   160b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   160b8:	ldrd	r0, [r6, #32]
   160bc:	mov	r2, #1
   160c0:	adds	r0, r0, #1
   160c4:	adc	r1, r1, #0
   160c8:	strd	r0, [r6, #32]
   160cc:	movw	r0, #45280	; 0xb0e0
   160d0:	mov	r1, #33	; 0x21
   160d4:	movt	r0, #2
   160d8:	ldr	r3, [r0]
   160dc:	movw	r0, #43264	; 0xa900
   160e0:	movt	r0, #1
   160e4:	bl	11ef8 <fwrite@plt>
   160e8:	mov	r0, #1
   160ec:	bl	11f64 <exit@plt>

000160f0 <read_single_boolean_expression@@Base>:
   160f0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   160f4:	add	fp, sp, #24
   160f8:	movw	r5, #48288	; 0xbca0
   160fc:	mov	r8, r3
   16100:	mov	r4, r2
   16104:	movt	r5, #2
   16108:	ldrd	r2, [r5]
   1610c:	adds	r2, r2, #1
   16110:	adc	r3, r3, #0
   16114:	cmp	r1, #0
   16118:	strd	r2, [r5]
   1611c:	beq	16180 <read_single_boolean_expression@@Base+0x90>
   16120:	ldrd	r2, [r5, #16]
   16124:	adds	r2, r2, #1
   16128:	adc	r3, r3, #0
   1612c:	strd	r2, [r5, #16]
   16130:	ldr	r1, [r4]
   16134:	cmp	r1, #0
   16138:	beq	161c4 <read_single_boolean_expression@@Base+0xd4>
   1613c:	ldrd	r2, [r5, #32]
   16140:	adds	r2, r2, #1
   16144:	adc	r3, r3, #0
   16148:	strd	r2, [r5, #32]
   1614c:	bl	161fc <read_boolean_binary_expression@@Base>
   16150:	mov	r7, r0
   16154:	mov	r0, #20
   16158:	bl	11f28 <malloc@plt>
   1615c:	mov	r1, r8
   16160:	mov	r2, #0
   16164:	mov	r3, r7
   16168:	mov	r6, r0
   1616c:	mov	r9, #0
   16170:	bl	14e78 <init_node_boolean_operator@@Base>
   16174:	str	r9, [r4]
   16178:	add	r4, r5, #48	; 0x30
   1617c:	b	1619c <read_single_boolean_expression@@Base+0xac>
   16180:	ldrd	r2, [r5, #8]
   16184:	add	r4, r5, #24
   16188:	adds	r2, r2, #1
   1618c:	adc	r3, r3, #0
   16190:	strd	r2, [r5, #8]
   16194:	bl	161fc <read_boolean_binary_expression@@Base>
   16198:	mov	r6, r0
   1619c:	ldrd	r0, [r4]
   161a0:	adds	r0, r0, #1
   161a4:	adc	r1, r1, #0
   161a8:	strd	r0, [r4]
   161ac:	ldrd	r0, [r5, #56]	; 0x38
   161b0:	adds	r0, r0, #1
   161b4:	adc	r1, r1, #0
   161b8:	strd	r0, [r5, #56]	; 0x38
   161bc:	mov	r0, r6
   161c0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   161c4:	ldrd	r0, [r5, #40]	; 0x28
   161c8:	adds	r0, r0, #1
   161cc:	adc	r1, r1, #0
   161d0:	strd	r0, [r5, #40]	; 0x28
   161d4:	movw	r0, #45280	; 0xb0e0
   161d8:	mov	r1, #4
   161dc:	movt	r0, #2
   161e0:	ldr	r2, [r1]
   161e4:	movw	r1, #43298	; 0xa922
   161e8:	movt	r1, #1
   161ec:	ldr	r0, [r0]
   161f0:	bl	11f88 <fprintf@plt>
   161f4:	mov	r0, #1
   161f8:	bl	11f64 <exit@plt>

000161fc <read_boolean_binary_expression@@Base>:
   161fc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16200:	add	fp, sp, #24
   16204:	movw	r4, #48352	; 0xbce0
   16208:	mov	r5, r0
   1620c:	movt	r4, #2
   16210:	ldrd	r0, [r4]
   16214:	adds	r0, r0, #1
   16218:	adc	r1, r1, #0
   1621c:	strd	r0, [r4]
   16220:	ldr	r0, [r5]
   16224:	bl	12150 <next@@Base>
   16228:	mov	r6, r0
   1622c:	ldr	r0, [r0]
   16230:	cmp	r0, #1
   16234:	bne	16308 <read_boolean_binary_expression@@Base+0x10c>
   16238:	ldrd	r0, [r4, #16]
   1623c:	adds	r0, r0, #1
   16240:	adc	r1, r1, #0
   16244:	strd	r0, [r4, #16]
   16248:	mov	r0, #12
   1624c:	bl	11f28 <malloc@plt>
   16250:	ldr	r1, [r6, #4]
   16254:	mov	r8, r0
   16258:	bl	14cb0 <init_node_int@@Base>
   1625c:	mov	r0, r6
   16260:	bl	14740 <free_token_int_value@@Base>
   16264:	ldr	r0, [r5]
   16268:	bl	12150 <next@@Base>
   1626c:	mov	r7, r0
   16270:	ldr	r0, [r0]
   16274:	cmp	r0, #12
   16278:	bne	16350 <read_boolean_binary_expression@@Base+0x154>
   1627c:	ldrd	r0, [r4, #64]	; 0x40
   16280:	adds	r0, r0, #1
   16284:	adc	r1, r1, #0
   16288:	strd	r0, [r4, #64]	; 0x40
   1628c:	mov	r0, r7
   16290:	bl	15354 <get_boolean_op_value@@Base>
   16294:	mov	r6, r0
   16298:	mov	r0, r7
   1629c:	bl	14950 <free_token_boolean_op@@Base>
   162a0:	ldr	r0, [r5]
   162a4:	bl	12150 <next@@Base>
   162a8:	mov	r5, r0
   162ac:	ldr	r0, [r0]
   162b0:	cmp	r0, #1
   162b4:	bne	1638c <read_boolean_binary_expression@@Base+0x190>
   162b8:	ldrd	r0, [r4, #88]	; 0x58
   162bc:	adds	r0, r0, #1
   162c0:	adc	r1, r1, #0
   162c4:	strd	r0, [r4, #88]	; 0x58
   162c8:	mov	r0, #12
   162cc:	bl	11f28 <malloc@plt>
   162d0:	ldr	r1, [r5, #4]
   162d4:	mov	r7, r0
   162d8:	bl	14cb0 <init_node_int@@Base>
   162dc:	mov	r0, r5
   162e0:	bl	14740 <free_token_int_value@@Base>
   162e4:	mov	r0, #20
   162e8:	bl	11f28 <malloc@plt>
   162ec:	mov	r1, r6
   162f0:	mov	r2, r8
   162f4:	mov	r3, r7
   162f8:	mov	r5, r0
   162fc:	bl	14e78 <init_node_boolean_operator@@Base>
   16300:	add	r6, r4, #104	; 0x68
   16304:	b	163ac <read_boolean_binary_expression@@Base+0x1b0>
   16308:	ldrd	r2, [r4, #8]
   1630c:	adds	r2, r2, #1
   16310:	adc	r3, r3, #0
   16314:	cmp	r0, #12
   16318:	strd	r2, [r4, #8]
   1631c:	bne	16370 <read_boolean_binary_expression@@Base+0x174>
   16320:	ldrd	r0, [r4, #24]
   16324:	adds	r0, r0, #1
   16328:	adc	r1, r1, #0
   1632c:	strd	r0, [r4, #24]
   16330:	mov	r1, r6
   16334:	ldr	r0, [r5]
   16338:	bl	12388 <push_back@@Base>
   1633c:	mov	r0, r5
   16340:	add	r6, r4, #40	; 0x28
   16344:	bl	163d4 <read_boolean_unary_expression@@Base>
   16348:	mov	r5, r0
   1634c:	b	163ac <read_boolean_binary_expression@@Base+0x1b0>
   16350:	ldrd	r0, [r4, #56]	; 0x38
   16354:	adds	r0, r0, #1
   16358:	adc	r1, r1, #0
   1635c:	strd	r0, [r4, #56]	; 0x38
   16360:	mov	r0, r8
   16364:	bl	14ef0 <free_node@@Base>
   16368:	add	r6, r4, #72	; 0x48
   1636c:	b	163a8 <read_boolean_binary_expression@@Base+0x1ac>
   16370:	ldrd	r0, [r4, #32]
   16374:	add	r6, r4, #48	; 0x30
   16378:	mov	r5, #0
   1637c:	adds	r0, r0, #1
   16380:	adc	r1, r1, #0
   16384:	strd	r0, [r4, #32]
   16388:	b	163ac <read_boolean_binary_expression@@Base+0x1b0>
   1638c:	ldrd	r0, [r4, #80]	; 0x50
   16390:	adds	r0, r0, #1
   16394:	adc	r1, r1, #0
   16398:	strd	r0, [r4, #80]	; 0x50
   1639c:	mov	r0, r8
   163a0:	bl	14ef0 <free_node@@Base>
   163a4:	add	r6, r4, #96	; 0x60
   163a8:	mov	r5, #0
   163ac:	ldrd	r0, [r6]
   163b0:	adds	r0, r0, #1
   163b4:	adc	r1, r1, #0
   163b8:	strd	r0, [r6]
   163bc:	ldrd	r0, [r4, #112]	; 0x70
   163c0:	adds	r0, r0, #1
   163c4:	adc	r1, r1, #0
   163c8:	strd	r0, [r4, #112]	; 0x70
   163cc:	mov	r0, r5
   163d0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

000163d4 <read_boolean_unary_expression@@Base>:
   163d4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   163d8:	add	fp, sp, #24
   163dc:	movw	r5, #48480	; 0xbd60
   163e0:	mov	r6, r0
   163e4:	movt	r5, #2
   163e8:	ldrd	r0, [r5]
   163ec:	adds	r0, r0, #1
   163f0:	adc	r1, r1, #0
   163f4:	strd	r0, [r5]
   163f8:	mov	r0, #20
   163fc:	bl	11f28 <malloc@plt>
   16400:	mov	r4, r0
   16404:	ldr	r0, [r6]
   16408:	bl	12150 <next@@Base>
   1640c:	mov	r7, r0
   16410:	ldr	r0, [r0]
   16414:	cmp	r0, #12
   16418:	bne	164a0 <read_boolean_unary_expression@@Base+0xcc>
   1641c:	ldrd	r0, [r5, #16]
   16420:	adds	r0, r0, #1
   16424:	adc	r1, r1, #0
   16428:	strd	r0, [r5, #16]
   1642c:	mov	r0, r7
   16430:	bl	15354 <get_boolean_op_value@@Base>
   16434:	mov	r8, r0
   16438:	mov	r0, r7
   1643c:	bl	14950 <free_token_boolean_op@@Base>
   16440:	ldr	r0, [r6]
   16444:	bl	12150 <next@@Base>
   16448:	mov	r6, r0
   1644c:	ldr	r0, [r0]
   16450:	cmp	r0, #1
   16454:	bne	164c0 <read_boolean_unary_expression@@Base+0xec>
   16458:	ldrd	r0, [r5, #40]	; 0x28
   1645c:	adds	r0, r0, #1
   16460:	adc	r1, r1, #0
   16464:	strd	r0, [r5, #40]	; 0x28
   16468:	mov	r0, #12
   1646c:	bl	11f28 <malloc@plt>
   16470:	ldr	r1, [r6, #4]
   16474:	mov	r7, r0
   16478:	bl	14cb0 <init_node_int@@Base>
   1647c:	mov	r0, r6
   16480:	bl	14740 <free_token_int_value@@Base>
   16484:	mov	r0, r4
   16488:	mov	r1, r8
   1648c:	mov	r2, r7
   16490:	mov	r3, #0
   16494:	bl	14e78 <init_node_boolean_operator@@Base>
   16498:	add	r0, r5, #56	; 0x38
   1649c:	b	164e0 <read_boolean_unary_expression@@Base+0x10c>
   164a0:	ldrd	r0, [r5, #8]
   164a4:	adds	r0, r0, #1
   164a8:	adc	r1, r1, #0
   164ac:	strd	r0, [r5, #8]
   164b0:	mov	r0, r4
   164b4:	bl	152c8 <free_node_boolean_operator@@Base>
   164b8:	add	r0, r5, #24
   164bc:	b	164dc <read_boolean_unary_expression@@Base+0x108>
   164c0:	ldrd	r0, [r5, #32]
   164c4:	adds	r0, r0, #1
   164c8:	adc	r1, r1, #0
   164cc:	strd	r0, [r5, #32]
   164d0:	mov	r0, r4
   164d4:	bl	152c8 <free_node_boolean_operator@@Base>
   164d8:	add	r0, r5, #48	; 0x30
   164dc:	mov	r4, #0
   164e0:	ldrd	r2, [r0]
   164e4:	adds	r2, r2, #1
   164e8:	adc	r3, r3, #0
   164ec:	strd	r2, [r0]
   164f0:	ldrd	r0, [r5, #64]	; 0x40
   164f4:	adds	r0, r0, #1
   164f8:	adc	r1, r1, #0
   164fc:	strd	r0, [r5, #64]	; 0x40
   16500:	mov	r0, r4
   16504:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16508:	push	{r4, r5, r6, lr}
   1650c:	sub	sp, sp, #8
   16510:	movw	r0, #43354	; 0xa95a
   16514:	movw	r1, #40080	; 0x9c90
   16518:	movw	r2, #51015	; 0xc747
   1651c:	movt	r0, #1
   16520:	movt	r1, #1
   16524:	movt	r2, #42604	; 0xa66c
   16528:	bl	16770 <read_boolean_unary_expression@@Base+0x39c>
   1652c:	movw	r0, #43904	; 0xab80
   16530:	movw	r6, #43680	; 0xaaa0
   16534:	mov	r5, #0
   16538:	movt	r0, #1
   1653c:	movt	r6, #1
   16540:	add	r4, r0, #4
   16544:	mov	r3, r6
   16548:	ldr	r0, [r3, r5]!
   1654c:	ldr	r1, [r3, #16]
   16550:	str	r1, [sp]
   16554:	ldmib	r3, {r1, r2}
   16558:	ldrb	r3, [r3, #12]
   1655c:	bl	16e90 <read_boolean_unary_expression@@Base+0xabc>
   16560:	ldrd	r0, [r4, #-4]
   16564:	bl	17744 <read_boolean_unary_expression@@Base+0x1370>
   16568:	add	r5, r5, #20
   1656c:	add	r4, r4, #8
   16570:	cmp	r5, #220	; 0xdc
   16574:	bne	16544 <read_boolean_unary_expression@@Base+0x170>
   16578:	bl	17ecc <read_boolean_unary_expression@@Base+0x1af8>
   1657c:	add	sp, sp, #8
   16580:	pop	{r4, r5, r6, lr}
   16584:	b	18c38 <read_boolean_unary_expression@@Base+0x2864>
   16588:	push	{r4, r5, fp, lr}
   1658c:	vpush	{d8-d9}
   16590:	bl	16508 <read_boolean_unary_expression@@Base+0x134>
   16594:	movw	r0, #47696	; 0xba50
   16598:	vmov.i32	q4, #0	; 0x00000000
   1659c:	mov	r4, #0
   165a0:	mov	r5, #116	; 0x74
   165a4:	mov	r2, #160	; 0xa0
   165a8:	movt	r0, #2
   165ac:	vst1.64	{d8-d9}, [r0 :128]
   165b0:	movw	r0, #47680	; 0xba40
   165b4:	movt	r0, #2
   165b8:	vst1.64	{d8-d9}, [r0 :128]
   165bc:	movw	r0, #47712	; 0xba60
   165c0:	movt	r0, #2
   165c4:	vst1.64	{d8-d9}, [r0 :128]
   165c8:	movw	r0, #47728	; 0xba70
   165cc:	movt	r0, #2
   165d0:	add	r1, r0, #16
   165d4:	str	r4, [r0, #112]	; 0x70
   165d8:	vst1.64	{d8-d9}, [r1 :128]
   165dc:	add	r1, r0, #32
   165e0:	vst1.64	{d8-d9}, [r1 :128]
   165e4:	add	r1, r0, #48	; 0x30
   165e8:	vst1.64	{d8-d9}, [r1 :128]
   165ec:	add	r1, r0, #64	; 0x40
   165f0:	vst1.64	{d8-d9}, [r1 :128]
   165f4:	add	r1, r0, #80	; 0x50
   165f8:	vst1.64	{d8-d9}, [r1 :128]
   165fc:	add	r1, r0, #96	; 0x60
   16600:	vst1.64	{d8-d9}, [r0 :128], r5
   16604:	str	r4, [r0]
   16608:	movw	r0, #47856	; 0xbaf0
   1660c:	vst1.64	{d8-d9}, [r1 :128]
   16610:	mov	r1, #0
   16614:	movt	r0, #2
   16618:	bl	11fb8 <memset@plt>
   1661c:	movw	r1, #48176	; 0xbc30
   16620:	mov	r0, #100	; 0x64
   16624:	movw	r3, #48096	; 0xbbe0
   16628:	movt	r1, #2
   1662c:	movt	r3, #2
   16630:	mov	r2, r1
   16634:	str	r4, [r1, #96]	; 0x60
   16638:	vst1.64	{d8-d9}, [r2 :128], r0
   1663c:	str	r4, [r2]
   16640:	movw	r2, #48016	; 0xbb90
   16644:	movt	r2, #2
   16648:	add	r0, r2, #16
   1664c:	str	r4, [r2, #64]	; 0x40
   16650:	vst1.64	{d8-d9}, [r0 :128]
   16654:	add	r0, r2, #32
   16658:	vst1.64	{d8-d9}, [r0 :128]
   1665c:	add	r0, r2, #48	; 0x30
   16660:	vst1.64	{d8-d9}, [r0 :128]
   16664:	add	r0, r3, #16
   16668:	vst1.64	{d8-d9}, [r0 :128]
   1666c:	add	r0, r3, #32
   16670:	vst1.64	{d8-d9}, [r0 :128]
   16674:	add	r0, r3, #48	; 0x30
   16678:	vst1.64	{d8-d9}, [r0 :128]
   1667c:	add	r0, r1, #16
   16680:	vst1.64	{d8-d9}, [r0 :128]
   16684:	add	r0, r1, #32
   16688:	vst1.64	{d8-d9}, [r0 :128]
   1668c:	add	r0, r1, #48	; 0x30
   16690:	vst1.64	{d8-d9}, [r0 :128]
   16694:	add	r0, r1, #64	; 0x40
   16698:	vst1.64	{d8-d9}, [r0 :128]
   1669c:	add	r0, r1, #80	; 0x50
   166a0:	mov	r1, #64	; 0x40
   166a4:	vst1.64	{d8-d9}, [r3 :128], r1
   166a8:	movw	r1, #48288	; 0xbca0
   166ac:	vst1.64	{d8-d9}, [r0 :128]
   166b0:	mov	r0, #68	; 0x44
   166b4:	movt	r1, #2
   166b8:	vst1.64	{d8-d9}, [r2 :128], r0
   166bc:	vst1.64	{d8-d9}, [r3 :128]
   166c0:	str	r4, [r2]
   166c4:	add	r2, r1, #16
   166c8:	vst1.64	{d8-d9}, [r2 :128]
   166cc:	add	r2, r1, #32
   166d0:	vst1.64	{d8-d9}, [r2 :128]
   166d4:	mov	r2, #48	; 0x30
   166d8:	vst1.64	{d8-d9}, [r1 :128], r2
   166dc:	vst1.64	{d8-d9}, [r1 :128]
   166e0:	movw	r1, #48352	; 0xbce0
   166e4:	movt	r1, #2
   166e8:	mov	r2, r1
   166ec:	str	r4, [r1, #112]	; 0x70
   166f0:	vst1.64	{d8-d9}, [r2 :128], r5
   166f4:	str	r4, [r2]
   166f8:	add	r2, r1, #96	; 0x60
   166fc:	vst1.64	{d8-d9}, [r2 :128]
   16700:	add	r2, r1, #80	; 0x50
   16704:	vst1.64	{d8-d9}, [r2 :128]
   16708:	add	r2, r1, #64	; 0x40
   1670c:	vst1.64	{d8-d9}, [r2 :128]
   16710:	add	r2, r1, #48	; 0x30
   16714:	vst1.64	{d8-d9}, [r2 :128]
   16718:	add	r2, r1, #32
   1671c:	add	r1, r1, #16
   16720:	vst1.64	{d8-d9}, [r1 :128]
   16724:	movw	r1, #48480	; 0xbd60
   16728:	vst1.64	{d8-d9}, [r2 :128]
   1672c:	movt	r1, #2
   16730:	add	r2, r1, #48	; 0x30
   16734:	str	r4, [r1, #64]	; 0x40
   16738:	vst1.64	{d8-d9}, [r2 :128]
   1673c:	add	r2, r1, #32
   16740:	vst1.64	{d8-d9}, [r2 :128]
   16744:	add	r2, r1, #16
   16748:	vst1.64	{d8-d9}, [r1 :128], r0
   1674c:	vst1.64	{d8-d9}, [r2 :128]
   16750:	str	r4, [r1]
   16754:	vpop	{d8-d9}
   16758:	pop	{r4, r5, fp, pc}
   1675c:	movw	r0, #25864	; 0x6508
   16760:	movw	r1, #25992	; 0x6588
   16764:	movt	r0, #1
   16768:	movt	r1, #1
   1676c:	b	190ec <__gcov_flush@@Base+0xb8>
   16770:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16774:	add	fp, sp, #28
   16778:	sub	sp, sp, #36	; 0x24
   1677c:	mov	r9, r1
   16780:	mov	r6, r0
   16784:	add	r0, sp, #28
   16788:	add	r1, sp, #32
   1678c:	mov	r8, r2
   16790:	bl	19584 <__gcov_flush@@Base+0x550>
   16794:	cmp	r0, #0
   16798:	beq	167dc <read_boolean_unary_expression@@Base+0x408>
   1679c:	mov	r4, r0
   167a0:	mov	r0, r6
   167a4:	ldr	r5, [sp, #32]
   167a8:	bl	11f70 <strlen@plt>
   167ac:	add	r0, r5, r0
   167b0:	add	r0, r0, #2
   167b4:	bl	11f28 <malloc@plt>
   167b8:	mov	r7, r0
   167bc:	ldr	r0, [sp, #28]
   167c0:	mov	r1, r6
   167c4:	mov	r2, r4
   167c8:	str	r0, [sp]
   167cc:	mov	r0, r7
   167d0:	mov	r3, r5
   167d4:	bl	19618 <__gcov_flush@@Base+0x5e4>
   167d8:	b	167e8 <read_boolean_unary_expression@@Base+0x414>
   167dc:	mov	r0, r6
   167e0:	bl	11ee0 <strdup@plt>
   167e4:	mov	r7, r0
   167e8:	ldr	r0, [pc, #1492]	; 16dc4 <read_boolean_unary_expression@@Base+0x9f0>
   167ec:	ldr	r6, [pc, #1492]	; 16dc8 <read_boolean_unary_expression@@Base+0x9f4>
   167f0:	mov	r1, #2
   167f4:	add	r0, pc, r0
   167f8:	add	r6, pc, r6
   167fc:	str	r7, [r0]
   16800:	mov	r0, r7
   16804:	mov	r5, #0
   16808:	strb	r5, [r6]
   1680c:	bl	11f04 <open64@plt>
   16810:	ldr	r4, [pc, #1460]	; 16dcc <read_boolean_unary_expression@@Base+0x9f8>
   16814:	cmn	r0, #1
   16818:	add	r4, pc, r4
   1681c:	str	r0, [r4]
   16820:	beq	16830 <read_boolean_unary_expression@@Base+0x45c>
   16824:	ldr	r6, [pc, #1444]	; 16dd0 <read_boolean_unary_expression@@Base+0x9fc>
   16828:	add	r6, pc, r6
   1682c:	b	1688c <read_boolean_unary_expression@@Base+0x4b8>
   16830:	mov	r0, #1
   16834:	strb	r0, [r6]
   16838:	ldr	r0, [pc, #1488]	; 16e10 <read_boolean_unary_expression@@Base+0xa3c>
   1683c:	mov	r1, #66	; 0x42
   16840:	mov	r2, #420	; 0x1a4
   16844:	ldr	r0, [pc, r0]
   16848:	bl	11f04 <open64@plt>
   1684c:	ldr	r6, [pc, #1472]	; 16e14 <read_boolean_unary_expression@@Base+0xa40>
   16850:	cmn	r0, #1
   16854:	str	r0, [r4]
   16858:	add	r6, pc, r6
   1685c:	bne	1688c <read_boolean_unary_expression@@Base+0x4b8>
   16860:	ldr	r0, [pc, #1456]	; 16e18 <read_boolean_unary_expression@@Base+0xa44>
   16864:	ldr	r0, [pc, r0]
   16868:	bl	191fc <__gcov_flush@@Base+0x1c8>
   1686c:	ldr	r0, [pc, #1448]	; 16e1c <read_boolean_unary_expression@@Base+0xa48>
   16870:	mov	r1, #66	; 0x42
   16874:	mov	r2, #420	; 0x1a4
   16878:	ldr	r0, [pc, r0]
   1687c:	bl	11f04 <open64@plt>
   16880:	cmn	r0, #1
   16884:	str	r0, [r4]
   16888:	beq	16d7c <read_boolean_unary_expression@@Base+0x9a8>
   1688c:	str	r9, [sp, #20]
   16890:	str	r8, [sp, #24]
   16894:	bl	192c0 <__gcov_flush@@Base+0x28c>
   16898:	ldr	r0, [pc, #1332]	; 16dd4 <read_boolean_unary_expression@@Base+0xa00>
   1689c:	mov	r1, r6
   168a0:	ldr	r0, [pc, r0]
   168a4:	bl	11e68 <fdopen@plt>
   168a8:	ldr	r7, [pc, #1320]	; 16dd8 <read_boolean_unary_expression@@Base+0xa04>
   168ac:	ldr	r9, [pc, #1320]	; 16ddc <read_boolean_unary_expression@@Base+0xa08>
   168b0:	ldr	r1, [pc, #1320]	; 16de0 <read_boolean_unary_expression@@Base+0xa0c>
   168b4:	ldr	sl, [pc, #1320]	; 16de4 <read_boolean_unary_expression@@Base+0xa10>
   168b8:	add	r7, pc, r7
   168bc:	add	r9, pc, r9
   168c0:	add	r1, pc, r1
   168c4:	add	sl, pc, sl
   168c8:	str	r5, [r7]
   168cc:	str	r5, [r7, #4]
   168d0:	str	r5, [r9]
   168d4:	str	r5, [r9, #4]
   168d8:	str	r0, [r1]
   168dc:	str	r5, [sl]
   168e0:	ldr	r6, [pc, #1280]	; 16de8 <read_boolean_unary_expression@@Base+0xa14>
   168e4:	mov	r4, #131072	; 0x20000
   168e8:	add	r6, pc, r6
   168ec:	ldrb	r1, [r6]
   168f0:	cmp	r1, #0
   168f4:	beq	169e8 <read_boolean_unary_expression@@Base+0x614>
   168f8:	mov	r0, r4
   168fc:	bl	11f28 <malloc@plt>
   16900:	mov	r8, r0
   16904:	strd	r4, [r7]
   16908:	str	r0, [sl]
   1690c:	mov	r0, r8
   16910:	mov	r1, #0
   16914:	mov	r2, #131072	; 0x20000
   16918:	bl	11fb8 <memset@plt>
   1691c:	ldr	r0, [r9, #4]
   16920:	ldr	r1, [pc, #1284]	; 16e2c <read_boolean_unary_expression@@Base+0xa58>
   16924:	mov	r7, #7
   16928:	orr	r7, r7, #131072	; 0x20000
   1692c:	ldr	r1, [pc, r1]
   16930:	ldr	sl, [pc, #1272]	; 16e30 <read_boolean_unary_expression@@Base+0xa5c>
   16934:	adds	r2, r1, #4
   16938:	add	sl, pc, sl
   1693c:	adc	r3, r0, #0
   16940:	ldr	r5, [sl, #4]
   16944:	ldr	r4, [pc, #1256]	; 16e34 <read_boolean_unary_expression@@Base+0xa60>
   16948:	ldr	r4, [pc, r4]
   1694c:	subs	r2, r4, r2
   16950:	sbcs	r2, r5, r3
   16954:	bcs	16a68 <read_boolean_unary_expression@@Base+0x694>
   16958:	adds	r1, r7, r1
   1695c:	adc	r0, r0, #0
   16960:	subs	r1, r1, #4
   16964:	sbc	r0, r0, #0
   16968:	mvn	r2, #0
   1696c:	and	r5, r0, r2
   16970:	mov	r0, #16646144	; 0xfe0000
   16974:	orr	r0, r0, #-16777216	; 0xff000000
   16978:	and	r4, r1, r0
   1697c:	mov	r0, r8
   16980:	mov	r1, r4
   16984:	bl	11eec <realloc@plt>
   16988:	ldr	r1, [pc, #1068]	; 16dbc <read_boolean_unary_expression@@Base+0x9e8>
   1698c:	strd	r4, [sl]
   16990:	mov	r3, r0
   16994:	mov	r7, r1
   16998:	lsr	r2, r1, #24
   1699c:	ldr	r1, [pc, #1176]	; 16e3c <read_boolean_unary_expression@@Base+0xa68>
   169a0:	ldrb	r6, [r6]
   169a4:	lsr	r4, r7, #16
   169a8:	add	r1, pc, r1
   169ac:	str	r0, [r1]
   169b0:	ldr	r1, [r9, #4]
   169b4:	ldr	r5, [pc, #1156]	; 16e40 <read_boolean_unary_expression@@Base+0xa6c>
   169b8:	ldr	r5, [pc, r5]
   169bc:	strb	r7, [r3, r5]!
   169c0:	strb	r2, [r3, #3]
   169c4:	lsr	r2, r7, #8
   169c8:	strb	r2, [r3, #1]
   169cc:	adds	r2, r5, #4
   169d0:	adc	ip, r1, #0
   169d4:	cmp	r6, #1
   169d8:	strb	r4, [r3, #2]
   169dc:	stm	r9, {r2, ip}
   169e0:	beq	16aac <read_boolean_unary_expression@@Base+0x6d8>
   169e4:	b	16c64 <read_boolean_unary_expression@@Base+0x890>
   169e8:	mov	r1, #0
   169ec:	mov	r2, #2
   169f0:	mov	r8, #0
   169f4:	bl	12030 <fseek@plt>
   169f8:	ldr	r0, [pc, #1004]	; 16dec <read_boolean_unary_expression@@Base+0xa18>
   169fc:	ldr	r0, [pc, r0]
   16a00:	bl	11ec8 <ftell@plt>
   16a04:	mov	r2, r0
   16a08:	ldr	r0, [pc, #992]	; 16df0 <read_boolean_unary_expression@@Base+0xa1c>
   16a0c:	asr	r3, r2, #31
   16a10:	add	r0, pc, r0
   16a14:	cmp	r2, #0
   16a18:	strd	r2, [r0]
   16a1c:	beq	16d0c <read_boolean_unary_expression@@Base+0x938>
   16a20:	ldr	r0, [pc, #972]	; 16df4 <read_boolean_unary_expression@@Base+0xa20>
   16a24:	mov	r1, r2
   16a28:	mov	r2, #3
   16a2c:	mov	r3, #1
   16a30:	ldr	r0, [pc, r0]
   16a34:	str	r8, [sp, #8]
   16a38:	str	r8, [sp, #12]
   16a3c:	str	r0, [sp]
   16a40:	mov	r0, #0
   16a44:	bl	11ebc <mmap64@plt>
   16a48:	cmn	r0, #1
   16a4c:	str	r0, [sl]
   16a50:	beq	16cd4 <read_boolean_unary_expression@@Base+0x900>
   16a54:	ldrb	r1, [r6]
   16a58:	cmp	r1, #0
   16a5c:	beq	16c24 <read_boolean_unary_expression@@Base+0x850>
   16a60:	mov	r8, r0
   16a64:	b	1691c <read_boolean_unary_expression@@Base+0x548>
   16a68:	ldr	r1, [r9, #4]
   16a6c:	ldr	r5, [pc, #964]	; 16e38 <read_boolean_unary_expression@@Base+0xa64>
   16a70:	ldr	r0, [pc, #836]	; 16dbc <read_boolean_unary_expression@@Base+0x9e8>
   16a74:	mov	r6, r8
   16a78:	ldr	r5, [pc, r5]
   16a7c:	mov	r7, r0
   16a80:	lsr	r2, r7, #16
   16a84:	strb	r7, [r6, r5]!
   16a88:	lsr	r0, r0, #24
   16a8c:	lsr	r3, r7, #8
   16a90:	strb	r2, [r6, #2]
   16a94:	adds	r2, r5, #4
   16a98:	strb	r0, [r6, #3]
   16a9c:	strb	r3, [r6, #1]
   16aa0:	adc	ip, r1, #0
   16aa4:	stm	r9, {r2, ip}
   16aa8:	mov	r0, r8
   16aac:	ldr	r7, [sl, #4]
   16ab0:	ldr	r3, [pc, #908]	; 16e44 <read_boolean_unary_expression@@Base+0xa70>
   16ab4:	adds	r6, r5, #8
   16ab8:	adc	r4, r1, #0
   16abc:	ldr	r3, [pc, r3]
   16ac0:	subs	r3, r3, r6
   16ac4:	sbcs	r3, r7, r4
   16ac8:	bcs	16b6c <read_boolean_unary_expression@@Base+0x798>
   16acc:	mov	r2, #7
   16ad0:	orr	r2, r2, #131072	; 0x20000
   16ad4:	adds	r2, r5, r2
   16ad8:	adc	r1, r1, #0
   16adc:	mvn	r3, #0
   16ae0:	and	r5, r1, r3
   16ae4:	mov	r1, #16646144	; 0xfe0000
   16ae8:	orr	r1, r1, #-16777216	; 0xff000000
   16aec:	and	r4, r2, r1
   16af0:	mov	r1, r4
   16af4:	bl	11eec <realloc@plt>
   16af8:	strd	r4, [sl]
   16afc:	ldr	r1, [pc, #840]	; 16e4c <read_boolean_unary_expression@@Base+0xa78>
   16b00:	mov	r4, r0
   16b04:	mov	lr, r9
   16b08:	add	r1, pc, r1
   16b0c:	str	r0, [r1]
   16b10:	ldr	r1, [pc, #824]	; 16e50 <read_boolean_unary_expression@@Base+0xa7c>
   16b14:	ldr	r2, [sp, #20]
   16b18:	ldr	ip, [r9, #4]
   16b1c:	add	r1, pc, r1
   16b20:	ldrb	r3, [r1]
   16b24:	ldrb	r1, [r2]
   16b28:	ldrb	r7, [r2, #1]
   16b2c:	ldrb	r6, [r2, #2]
   16b30:	ldrb	r5, [r2, #3]
   16b34:	ldr	r2, [pc, #792]	; 16e54 <read_boolean_unary_expression@@Base+0xa80>
   16b38:	ldr	r2, [pc, r2]
   16b3c:	strb	r1, [r4, r2]!
   16b40:	strb	r5, [r4, #3]
   16b44:	ldr	r5, [sp, #24]
   16b48:	strb	r6, [r4, #2]
   16b4c:	adds	r6, r2, #4
   16b50:	adc	r1, ip, #0
   16b54:	cmp	r3, #1
   16b58:	str	r6, [lr]
   16b5c:	strb	r7, [r4, #1]
   16b60:	str	r1, [lr, #4]
   16b64:	beq	16bac <read_boolean_unary_expression@@Base+0x7d8>
   16b68:	b	16ca4 <read_boolean_unary_expression@@Base+0x8d0>
   16b6c:	ldr	r6, [sp, #20]
   16b70:	mov	r5, r0
   16b74:	ldrb	r1, [r6]
   16b78:	ldrb	r3, [r6, #1]
   16b7c:	ldrb	r7, [r6, #2]
   16b80:	ldrb	r6, [r6, #3]
   16b84:	strb	r1, [r5, r2]!
   16b88:	strb	r6, [r5, #3]
   16b8c:	strb	r3, [r5, #1]
   16b90:	adds	r6, r2, #4
   16b94:	mov	r3, r9
   16b98:	adc	r1, ip, #0
   16b9c:	strb	r7, [r5, #2]
   16ba0:	str	r6, [r3]
   16ba4:	str	r1, [r3, #4]
   16ba8:	ldr	r5, [sp, #24]
   16bac:	ldr	r7, [sl, #4]
   16bb0:	ldr	r4, [pc, #672]	; 16e58 <read_boolean_unary_expression@@Base+0xa84>
   16bb4:	adds	r3, r2, #8
   16bb8:	adc	lr, ip, #0
   16bbc:	ldr	r4, [pc, r4]
   16bc0:	subs	r3, r4, r3
   16bc4:	sbcs	r3, r7, lr
   16bc8:	bcs	16c1c <read_boolean_unary_expression@@Base+0x848>
   16bcc:	mov	r1, #7
   16bd0:	orr	r1, r1, #131072	; 0x20000
   16bd4:	adds	r1, r2, r1
   16bd8:	adc	r2, ip, #0
   16bdc:	mvn	r3, #0
   16be0:	and	r7, r2, r3
   16be4:	mov	r2, #16646144	; 0xfe0000
   16be8:	orr	r2, r2, #-16777216	; 0xff000000
   16bec:	and	r4, r1, r2
   16bf0:	mov	r1, r4
   16bf4:	bl	11eec <realloc@plt>
   16bf8:	stm	sl, {r4, r7}
   16bfc:	ldr	r1, [r9, #4]
   16c00:	ldr	r2, [pc, #596]	; 16e5c <read_boolean_unary_expression@@Base+0xa88>
   16c04:	mov	lr, r9
   16c08:	add	r2, pc, r2
   16c0c:	str	r0, [r2]
   16c10:	ldr	r6, [pc, #584]	; 16e60 <read_boolean_unary_expression@@Base+0xa8c>
   16c14:	ldr	r6, [pc, r6]
   16c18:	b	16ca4 <read_boolean_unary_expression@@Base+0x8d0>
   16c1c:	mov	lr, r9
   16c20:	b	16ca4 <read_boolean_unary_expression@@Base+0x8d0>
   16c24:	ldr	r6, [r9, #4]
   16c28:	ldr	r5, [pc, #536]	; 16e48 <read_boolean_unary_expression@@Base+0xa74>
   16c2c:	ldr	r1, [pc, #392]	; 16dbc <read_boolean_unary_expression@@Base+0x9e8>
   16c30:	mov	r4, r0
   16c34:	ldr	r5, [pc, r5]
   16c38:	mov	r7, r1
   16c3c:	lsr	r2, r7, #16
   16c40:	strb	r7, [r4, r5]!
   16c44:	lsr	r1, r1, #24
   16c48:	strb	r2, [r4, #2]
   16c4c:	adds	r2, r5, #4
   16c50:	lsr	r3, r7, #8
   16c54:	adc	ip, r6, #0
   16c58:	strb	r1, [r4, #3]
   16c5c:	strb	r3, [r4, #1]
   16c60:	stm	r9, {r2, ip}
   16c64:	ldr	r4, [sp, #20]
   16c68:	mov	r5, r0
   16c6c:	mov	lr, r9
   16c70:	ldrb	r1, [r4]
   16c74:	ldrb	r6, [r4, #3]
   16c78:	ldrb	r3, [r4, #1]
   16c7c:	ldrb	r7, [r4, #2]
   16c80:	strb	r1, [r5, r2]!
   16c84:	strb	r6, [r5, #3]
   16c88:	adds	r6, r2, #4
   16c8c:	adc	r1, ip, #0
   16c90:	strb	r7, [r5, #2]
   16c94:	strb	r3, [r5, #1]
   16c98:	str	r6, [lr]
   16c9c:	str	r1, [lr, #4]
   16ca0:	ldr	r5, [sp, #24]
   16ca4:	lsr	r2, r5, #24
   16ca8:	strb	r5, [r0, r6]!
   16cac:	lsr	r3, r5, #16
   16cb0:	lsr	r7, r5, #8
   16cb4:	strb	r2, [r0, #3]
   16cb8:	strb	r3, [r0, #2]
   16cbc:	strb	r7, [r0, #1]
   16cc0:	adds	r0, r6, #4
   16cc4:	adc	r1, r1, #0
   16cc8:	strd	r0, [lr]
   16ccc:	sub	sp, fp, #28
   16cd0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16cd4:	bl	11f94 <__errno_location@plt>
   16cd8:	ldr	r1, [pc, #280]	; 16df8 <read_boolean_unary_expression@@Base+0xa24>
   16cdc:	ldr	r1, [pc, r1]
   16ce0:	ldr	r0, [r0]
   16ce4:	ldr	r4, [r1]
   16ce8:	ldr	r5, [pc, #268]	; 16dfc <read_boolean_unary_expression@@Base+0xa28>
   16cec:	ldr	r5, [pc, r5]
   16cf0:	bl	11f40 <strerror@plt>
   16cf4:	ldr	r1, [pc, #260]	; 16e00 <read_boolean_unary_expression@@Base+0xa2c>
   16cf8:	mov	r3, r0
   16cfc:	mov	r0, r4
   16d00:	add	r1, pc, r1
   16d04:	mov	r2, r5
   16d08:	bl	11f88 <fprintf@plt>
   16d0c:	ldr	r0, [pc, #240]	; 16e04 <read_boolean_unary_expression@@Base+0xa30>
   16d10:	str	r8, [sl]
   16d14:	mov	r2, #16646144	; 0xfe0000
   16d18:	add	r0, pc, r0
   16d1c:	orr	r2, r2, #-16777216	; 0xff000000
   16d20:	str	r8, [r0]
   16d24:	str	r8, [r0, #4]
   16d28:	mov	r0, #1
   16d2c:	strb	r0, [r6]
   16d30:	ldr	r0, [r9, #4]
   16d34:	ldr	r1, [pc, #204]	; 16e08 <read_boolean_unary_expression@@Base+0xa34>
   16d38:	mvn	r3, #0
   16d3c:	eor	r3, r0, r3
   16d40:	ldr	r1, [pc, r1]
   16d44:	eor	r2, r1, r2
   16d48:	orrs	r2, r2, r3
   16d4c:	beq	1690c <read_boolean_unary_expression@@Base+0x538>
   16d50:	ldr	r2, [pc, #104]	; 16dc0 <read_boolean_unary_expression@@Base+0x9ec>
   16d54:	ldr	r7, [pc, #176]	; 16e0c <read_boolean_unary_expression@@Base+0xa38>
   16d58:	adds	r1, r1, r2
   16d5c:	mov	r2, #16646144	; 0xfe0000
   16d60:	orr	r2, r2, #-16777216	; 0xff000000
   16d64:	and	r4, r1, r2
   16d68:	adc	r0, r0, #0
   16d6c:	mvn	r1, #0
   16d70:	and	r5, r0, r1
   16d74:	add	r7, pc, r7
   16d78:	b	168f8 <read_boolean_unary_expression@@Base+0x524>
   16d7c:	bl	11f94 <__errno_location@plt>
   16d80:	ldr	r1, [pc, #152]	; 16e20 <read_boolean_unary_expression@@Base+0xa4c>
   16d84:	ldr	r1, [pc, r1]
   16d88:	ldr	r0, [r0]
   16d8c:	ldr	r4, [r1]
   16d90:	ldr	r5, [pc, #140]	; 16e24 <read_boolean_unary_expression@@Base+0xa50>
   16d94:	ldr	r5, [pc, r5]
   16d98:	bl	11f40 <strerror@plt>
   16d9c:	ldr	r1, [pc, #132]	; 16e28 <read_boolean_unary_expression@@Base+0xa54>
   16da0:	mov	r3, r0
   16da4:	mov	r0, r4
   16da8:	add	r1, pc, r1
   16dac:	mov	r2, r5
   16db0:	bl	11f88 <fprintf@plt>
   16db4:	sub	sp, fp, #28
   16db8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16dbc:	strbvs	r6, [r3, -r1, ror #8]!
   16dc0:	strdeq	pc, [r3], -pc	; <UNPREDICTABLE>
   16dc4:	andeq	r5, r1, ip, lsr #11
   16dc8:	andeq	r5, r1, ip, lsr #11
   16dcc:			; <UNDEFINED> instruction: 0x000148b0
   16dd0:	andeq	r4, r0, r8, lsr #7
   16dd4:	andeq	r4, r1, r8, lsr #16
   16dd8:	strdeq	r5, [r1], -r8
   16ddc:	strdeq	r5, [r1], -ip
   16de0:	andeq	r5, r1, r8, ror #9
   16de4:	andeq	r5, r1, r8, ror #9
   16de8:			; <UNDEFINED> instruction: 0x000154bc
   16dec:	andeq	r5, r1, ip, lsr #7
   16df0:	andeq	r5, r1, r0, asr #7
   16df4:	muleq	r1, r8, r6
   16df8:	ldrdeq	r4, [r1], -ip
   16dfc:	strheq	r5, [r1], -r4
   16e00:	andeq	r4, r0, r2, lsr r0
   16e04:	muleq	r1, r8, r0
   16e08:	andeq	r5, r1, r8, ror r0
   16e0c:	andeq	r5, r1, ip, lsr r0
   16e10:	andeq	r5, r1, ip, asr r5
   16e14:	andeq	r4, r0, ip, ror r3
   16e18:	andeq	r5, r1, ip, lsr r5
   16e1c:	andeq	r5, r1, r8, lsr #10
   16e20:	andeq	r4, r1, r4, lsr r3
   16e24:	andeq	r5, r1, ip
   16e28:	andeq	r3, r0, r0, lsr lr
   16e2c:	andeq	r5, r1, ip, lsl #9
   16e30:	andeq	r5, r1, r8, ror r4
   16e34:	andeq	r5, r1, r8, ror #8
   16e38:	andeq	r5, r1, r0, asr #6
   16e3c:	andeq	r5, r1, r4, lsl #8
   16e40:	andeq	r5, r1, r0, lsl #8
   16e44:	strdeq	r5, [r1], -r4
   16e48:	andeq	r5, r1, r4, lsl #3
   16e4c:	andeq	r5, r1, r4, lsr #5
   16e50:	andeq	r5, r1, r8, lsl #5
   16e54:	andeq	r5, r1, r0, lsl #5
   16e58:	strdeq	r5, [r1], -r4
   16e5c:	andeq	r5, r1, r4, lsr #3
   16e60:	andeq	r5, r1, r4, lsr #3
   16e64:	ldr	r0, [r0]
   16e68:	cmn	r0, #1
   16e6c:	beq	16e8c <read_boolean_unary_expression@@Base+0xab8>
   16e70:	ldr	r0, [r1, r0, lsl #2]
   16e74:	cmp	r0, #0
   16e78:	bxeq	lr
   16e7c:	ldrd	r2, [r0]
   16e80:	adds	r2, r2, #1
   16e84:	adc	r3, r3, #0
   16e88:	strd	r2, [r0]
   16e8c:	bx	lr
   16e90:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16e94:	add	fp, sp, #28
   16e98:	sub	sp, sp, #12
   16e9c:	ldr	r7, [pc, #2008]	; 1767c <read_boolean_unary_expression@@Base+0x12a8>
   16ea0:	mov	sl, #2
   16ea4:	cmp	r3, #0
   16ea8:	movne	sl, #3
   16eac:	ldr	r7, [pc, r7]
   16eb0:	cmp	r7, #0
   16eb4:	beq	17674 <read_boolean_unary_expression@@Base+0x12a0>
   16eb8:	stm	sp, {r0, r2, r3}
   16ebc:	ldr	r0, [pc, #1980]	; 17680 <read_boolean_unary_expression@@Base+0x12ac>
   16ec0:	mov	r5, r1
   16ec4:	add	r0, pc, r0
   16ec8:	ldrb	r0, [r0]
   16ecc:	ldr	r8, [pc, #1968]	; 17684 <read_boolean_unary_expression@@Base+0x12b0>
   16ed0:	cmp	r0, #1
   16ed4:	add	r8, pc, r8
   16ed8:	bne	16f5c <read_boolean_unary_expression@@Base+0xb88>
   16edc:	ldr	r4, [pc, #1956]	; 17688 <read_boolean_unary_expression@@Base+0x12b4>
   16ee0:	ldr	r0, [r8, #4]
   16ee4:	ldr	r1, [pc, #1952]	; 1768c <read_boolean_unary_expression@@Base+0x12b8>
   16ee8:	add	r4, pc, r4
   16eec:	ldr	r1, [pc, r1]
   16ef0:	ldr	r7, [r4, #4]
   16ef4:	ldr	r6, [pc, #1940]	; 17690 <read_boolean_unary_expression@@Base+0x12bc>
   16ef8:	adds	r2, r1, #4
   16efc:	adc	r3, r0, #0
   16f00:	ldr	r6, [pc, r6]
   16f04:	subs	r2, r6, r2
   16f08:	sbcs	r2, r7, r3
   16f0c:	bcs	16f5c <read_boolean_unary_expression@@Base+0xb88>
   16f10:	mov	r2, #7
   16f14:	orr	r2, r2, #131072	; 0x20000
   16f18:	adds	r1, r2, r1
   16f1c:	adc	r0, r0, #0
   16f20:	subs	r1, r1, #4
   16f24:	sbc	r0, r0, #0
   16f28:	mvn	r2, #0
   16f2c:	and	r7, r0, r2
   16f30:	mov	r0, #16646144	; 0xfe0000
   16f34:	orr	r0, r0, #-16777216	; 0xff000000
   16f38:	ldr	r9, [pc, #1876]	; 17694 <read_boolean_unary_expression@@Base+0x12c0>
   16f3c:	and	r6, r1, r0
   16f40:	ldr	r0, [pc, #1872]	; 17698 <read_boolean_unary_expression@@Base+0x12c4>
   16f44:	mov	r1, r6
   16f48:	add	r9, pc, r9
   16f4c:	ldr	r0, [pc, r0]
   16f50:	bl	11eec <realloc@plt>
   16f54:	strd	r6, [r4]
   16f58:	str	r0, [r9]
   16f5c:	ldr	r7, [pc, #1848]	; 1769c <read_boolean_unary_expression@@Base+0x12c8>
   16f60:	mov	r0, #0
   16f64:	mov	r2, #1
   16f68:	ldr	r7, [pc, r7]
   16f6c:	ldr	ip, [pc, #1836]	; 176a0 <read_boolean_unary_expression@@Base+0x12cc>
   16f70:	adds	r4, r7, #4
   16f74:	ldr	ip, [pc, ip]
   16f78:	ldr	r6, [r8, #4]
   16f7c:	mov	r1, ip
   16f80:	adc	r9, r6, #0
   16f84:	strb	r0, [r1, r7]!
   16f88:	cmp	r5, #0
   16f8c:	strb	r2, [r1, #3]
   16f90:	strb	r0, [r1, #2]
   16f94:	strb	r0, [r1, #1]
   16f98:	stm	r8, {r4, r9}
   16f9c:	mov	r8, r5
   16fa0:	beq	16fbc <read_boolean_unary_expression@@Base+0xbe8>
   16fa4:	mov	r0, r8
   16fa8:	mov	r5, ip
   16fac:	bl	11f70 <strlen@plt>
   16fb0:	add	r0, sl, r0, lsr #2
   16fb4:	mov	ip, r5
   16fb8:	add	sl, r0, #2
   16fbc:	ldr	r0, [pc, #1760]	; 176a4 <read_boolean_unary_expression@@Base+0x12d0>
   16fc0:	add	r0, pc, r0
   16fc4:	ldrb	r0, [r0]
   16fc8:	cmp	r0, #0
   16fcc:	beq	170a8 <read_boolean_unary_expression@@Base+0xcd4>
   16fd0:	ldr	lr, [pc, #1748]	; 176ac <read_boolean_unary_expression@@Base+0x12d8>
   16fd4:	adds	r0, r7, #8
   16fd8:	adc	r1, r6, #0
   16fdc:	add	lr, pc, lr
   16fe0:	ldr	r2, [lr, #4]
   16fe4:	ldr	r3, [pc, #1732]	; 176b0 <read_boolean_unary_expression@@Base+0x12dc>
   16fe8:	ldr	r3, [pc, r3]
   16fec:	subs	r0, r3, r0
   16ff0:	sbcs	r0, r2, r1
   16ff4:	bcs	17114 <read_boolean_unary_expression@@Base+0xd40>
   16ff8:	mov	r0, #7
   16ffc:	orr	r0, r0, #131072	; 0x20000
   17000:	adds	r0, r7, r0
   17004:	adc	r1, r6, #0
   17008:	mvn	r2, #0
   1700c:	and	r5, r1, r2
   17010:	mov	r1, #16646144	; 0xfe0000
   17014:	orr	r1, r1, #-16777216	; 0xff000000
   17018:	and	r6, r0, r1
   1701c:	ldr	r4, [pc, #1684]	; 176b8 <read_boolean_unary_expression@@Base+0x12e4>
   17020:	mov	r0, ip
   17024:	mov	r1, r6
   17028:	add	r4, pc, r4
   1702c:	mov	r7, lr
   17030:	bl	11eec <realloc@plt>
   17034:	mov	lr, r7
   17038:	mov	ip, r0
   1703c:	str	r6, [lr]
   17040:	str	r5, [lr, #4]
   17044:	str	ip, [r4]
   17048:	ldr	r1, [pc, #1644]	; 176bc <read_boolean_unary_expression@@Base+0x12e8>
   1704c:	lsr	r0, sl, #24
   17050:	add	r1, pc, r1
   17054:	lsr	r3, sl, #16
   17058:	ldrb	r2, [r1]
   1705c:	ldr	r1, [pc, #1628]	; 176c0 <read_boolean_unary_expression@@Base+0x12ec>
   17060:	add	r1, pc, r1
   17064:	mov	r7, r1
   17068:	ldr	r9, [r1, #4]
   1706c:	ldr	r4, [pc, #1616]	; 176c4 <read_boolean_unary_expression@@Base+0x12f0>
   17070:	mov	r1, ip
   17074:	ldr	r4, [pc, r4]
   17078:	strb	sl, [r1, r4]!
   1707c:	strb	r0, [r1, #3]
   17080:	lsr	r0, sl, #8
   17084:	strb	r0, [r1, #1]
   17088:	adds	r0, r4, #4
   1708c:	strb	r3, [r1, #2]
   17090:	adc	r1, r9, #0
   17094:	mov	sl, r7
   17098:	cmp	r2, #1
   1709c:	strd	r0, [sl]
   170a0:	bne	170dc <read_boolean_unary_expression@@Base+0xd08>
   170a4:	b	17148 <read_boolean_unary_expression@@Base+0xd74>
   170a8:	mov	r3, ip
   170ac:	lsr	r0, sl, #24
   170b0:	strb	sl, [r3, r4]!
   170b4:	lsr	r1, sl, #16
   170b8:	lsr	r2, sl, #8
   170bc:	strb	r0, [r3, #3]
   170c0:	strb	r1, [r3, #2]
   170c4:	strb	r2, [r3, #1]
   170c8:	ldr	sl, [pc, #1496]	; 176a8 <read_boolean_unary_expression@@Base+0x12d4>
   170cc:	adds	r0, r7, #8
   170d0:	adc	r1, r6, #0
   170d4:	add	sl, pc, sl
   170d8:	strd	r0, [sl]
   170dc:	ldr	r5, [sp]
   170e0:	mov	r6, ip
   170e4:	lsr	r2, r5, #24
   170e8:	strb	r5, [r6, r0]!
   170ec:	lsr	r3, r5, #16
   170f0:	lsr	r7, r5, #8
   170f4:	strb	r2, [r6, #3]
   170f8:	strb	r3, [r6, #2]
   170fc:	strb	r7, [r6, #1]
   17100:	adds	r2, r0, #4
   17104:	adc	r3, r1, #0
   17108:	ldmib	sp, {r5, r9}
   1710c:	strd	r2, [sl]
   17110:	b	172bc <read_boolean_unary_expression@@Base+0xee8>
   17114:	mov	r3, ip
   17118:	lsr	r0, sl, #24
   1711c:	strb	sl, [r3, r4]!
   17120:	lsr	r1, sl, #16
   17124:	lsr	r2, sl, #8
   17128:	strb	r0, [r3, #3]
   1712c:	strb	r1, [r3, #2]
   17130:	strb	r2, [r3, #1]
   17134:	ldr	sl, [pc, #1400]	; 176b4 <read_boolean_unary_expression@@Base+0x12e0>
   17138:	adds	r0, r7, #8
   1713c:	adc	r1, r6, #0
   17140:	add	sl, pc, sl
   17144:	strd	r0, [sl]
   17148:	ldr	r7, [lr, #4]
   1714c:	ldr	r6, [pc, #1396]	; 176c8 <read_boolean_unary_expression@@Base+0x12f4>
   17150:	adds	r2, r4, #8
   17154:	adc	r3, r9, #0
   17158:	ldr	r6, [pc, r6]
   1715c:	subs	r2, r6, r2
   17160:	sbcs	r2, r7, r3
   17164:	bcs	1720c <read_boolean_unary_expression@@Base+0xe38>
   17168:	mov	r0, #7
   1716c:	orr	r0, r0, #131072	; 0x20000
   17170:	adds	r0, r4, r0
   17174:	adc	r1, r9, #0
   17178:	mvn	r2, #0
   1717c:	and	r5, r1, r2
   17180:	mov	r1, #16646144	; 0xfe0000
   17184:	orr	r1, r1, #-16777216	; 0xff000000
   17188:	and	r4, r0, r1
   1718c:	ldr	r7, [pc, #1336]	; 176cc <read_boolean_unary_expression@@Base+0x12f8>
   17190:	mov	r0, ip
   17194:	mov	r1, r4
   17198:	add	r7, pc, r7
   1719c:	mov	r6, lr
   171a0:	bl	11eec <realloc@plt>
   171a4:	mov	lr, r6
   171a8:	str	r0, [r7]
   171ac:	strd	r4, [lr]
   171b0:	mov	ip, r0
   171b4:	ldr	r6, [sp]
   171b8:	ldr	r0, [pc, #1296]	; 176d0 <read_boolean_unary_expression@@Base+0x12fc>
   171bc:	ldr	r1, [sl, #4]
   171c0:	mov	r3, ip
   171c4:	add	r0, pc, r0
   171c8:	lsr	r2, r6, #24
   171cc:	ldrb	r7, [r0]
   171d0:	ldr	r0, [pc, #1276]	; 176d4 <read_boolean_unary_expression@@Base+0x1300>
   171d4:	ldr	r0, [pc, r0]
   171d8:	strb	r6, [r3, r0]!
   171dc:	ldmib	sp, {r5, r9}
   171e0:	strb	r2, [r3, #3]
   171e4:	lsr	r2, r6, #8
   171e8:	lsr	r6, r6, #16
   171ec:	strb	r2, [r3, #1]
   171f0:	adds	r2, r0, #4
   171f4:	strb	r6, [r3, #2]
   171f8:	adc	r3, r1, #0
   171fc:	cmp	r7, #1
   17200:	strd	r2, [sl]
   17204:	beq	17240 <read_boolean_unary_expression@@Base+0xe6c>
   17208:	b	172bc <read_boolean_unary_expression@@Base+0xee8>
   1720c:	ldr	r5, [sp]
   17210:	mov	r6, ip
   17214:	lsr	r2, r5, #24
   17218:	strb	r5, [r6, r0]!
   1721c:	lsr	r3, r5, #16
   17220:	lsr	r7, r5, #8
   17224:	strb	r2, [r6, #3]
   17228:	strb	r3, [r6, #2]
   1722c:	strb	r7, [r6, #1]
   17230:	adds	r2, r0, #4
   17234:	adc	r3, r1, #0
   17238:	ldmib	sp, {r5, r9}
   1723c:	strd	r2, [sl]
   17240:	str	r8, [sp, #8]
   17244:	mov	r8, lr
   17248:	adds	r7, r0, #8
   1724c:	ldr	r6, [r8, #4]
   17250:	ldr	r4, [pc, #1152]	; 176d8 <read_boolean_unary_expression@@Base+0x1304>
   17254:	adc	lr, r1, #0
   17258:	ldr	r4, [pc, r4]
   1725c:	subs	r7, r4, r7
   17260:	sbcs	r7, r6, lr
   17264:	bcs	172b8 <read_boolean_unary_expression@@Base+0xee4>
   17268:	mov	r2, #7
   1726c:	orr	r2, r2, #131072	; 0x20000
   17270:	adds	r0, r0, r2
   17274:	adc	r1, r1, #0
   17278:	mvn	r2, #0
   1727c:	and	r7, r1, r2
   17280:	mov	r1, #16646144	; 0xfe0000
   17284:	orr	r1, r1, #-16777216	; 0xff000000
   17288:	and	r6, r0, r1
   1728c:	ldr	r4, [pc, #1096]	; 176dc <read_boolean_unary_expression@@Base+0x1308>
   17290:	mov	r0, ip
   17294:	mov	r1, r6
   17298:	add	r4, pc, r4
   1729c:	bl	11eec <realloc@plt>
   172a0:	strd	r6, [r8]
   172a4:	str	r0, [r4]
   172a8:	ldr	r3, [sl, #4]
   172ac:	ldr	r2, [pc, #1068]	; 176e0 <read_boolean_unary_expression@@Base+0x130c>
   172b0:	mov	ip, r0
   172b4:	ldr	r2, [pc, r2]
   172b8:	ldr	r8, [sp, #8]
   172bc:	mov	r6, ip
   172c0:	lsr	r7, r5, #8
   172c4:	strb	r5, [r6, r2]!
   172c8:	adds	r4, r2, #4
   172cc:	lsr	r0, r5, #24
   172d0:	lsr	r1, r5, #16
   172d4:	strb	r7, [r6, #1]
   172d8:	adc	r7, r3, #0
   172dc:	cmp	r9, #0
   172e0:	strb	r0, [r6, #3]
   172e4:	strb	r1, [r6, #2]
   172e8:	stm	sl, {r4, r7}
   172ec:	beq	173c0 <read_boolean_unary_expression@@Base+0xfec>
   172f0:	ldr	r0, [pc, #1004]	; 176e4 <read_boolean_unary_expression@@Base+0x1310>
   172f4:	ldr	sl, [fp, #8]
   172f8:	add	r0, pc, r0
   172fc:	ldrb	r0, [r0]
   17300:	cmp	r0, #1
   17304:	bne	1738c <read_boolean_unary_expression@@Base+0xfb8>
   17308:	ldr	r9, [pc, #984]	; 176e8 <read_boolean_unary_expression@@Base+0x1314>
   1730c:	adds	r0, r2, #8
   17310:	adc	r1, r3, #0
   17314:	add	r9, pc, r9
   17318:	ldr	r6, [r9, #4]
   1731c:	ldr	r5, [pc, #968]	; 176ec <read_boolean_unary_expression@@Base+0x1318>
   17320:	ldr	r5, [pc, r5]
   17324:	subs	r0, r5, r0
   17328:	sbcs	r0, r6, r1
   1732c:	bcs	1738c <read_boolean_unary_expression@@Base+0xfb8>
   17330:	mov	r0, #7
   17334:	orr	r0, r0, #131072	; 0x20000
   17338:	adds	r0, r2, r0
   1733c:	adc	r1, r3, #0
   17340:	mvn	r2, #0
   17344:	and	r5, r1, r2
   17348:	mov	r1, #16646144	; 0xfe0000
   1734c:	orr	r1, r1, #-16777216	; 0xff000000
   17350:	and	r6, r0, r1
   17354:	ldr	r4, [pc, #916]	; 176f0 <read_boolean_unary_expression@@Base+0x131c>
   17358:	mov	r0, ip
   1735c:	mov	r1, r6
   17360:	add	r4, pc, r4
   17364:	bl	11eec <realloc@plt>
   17368:	str	r6, [r9]
   1736c:	str	r5, [r9, #4]
   17370:	mov	ip, r0
   17374:	ldr	r0, [pc, #888]	; 176f4 <read_boolean_unary_expression@@Base+0x1320>
   17378:	str	ip, [r4]
   1737c:	add	r0, pc, r0
   17380:	ldr	r7, [r0, #4]
   17384:	ldr	r4, [pc, #876]	; 176f8 <read_boolean_unary_expression@@Base+0x1324>
   17388:	ldr	r4, [pc, r4]
   1738c:	mov	r3, ip
   17390:	lsr	r0, sl, #24
   17394:	strb	sl, [r3, r4]!
   17398:	lsr	r1, sl, #16
   1739c:	lsr	r2, sl, #8
   173a0:	strb	r0, [r3, #3]
   173a4:	strb	r1, [r3, #2]
   173a8:	strb	r2, [r3, #1]
   173ac:	ldr	sl, [pc, #840]	; 176fc <read_boolean_unary_expression@@Base+0x1328>
   173b0:	adds	r4, r4, #4
   173b4:	adc	r7, r7, #0
   173b8:	add	sl, pc, sl
   173bc:	stm	sl, {r4, r7}
   173c0:	cmp	r8, #0
   173c4:	beq	17674 <read_boolean_unary_expression@@Base+0x12a0>
   173c8:	mov	r0, r8
   173cc:	mov	r9, ip
   173d0:	bl	11f70 <strlen@plt>
   173d4:	mov	r6, #1
   173d8:	add	r5, r6, r0, lsr #2
   173dc:	ldr	r0, [pc, #796]	; 17700 <read_boolean_unary_expression@@Base+0x132c>
   173e0:	add	r0, pc, r0
   173e4:	ldrb	r0, [r0]
   173e8:	cmp	r0, #1
   173ec:	bne	17490 <read_boolean_unary_expression@@Base+0x10bc>
   173f0:	ldr	sl, [pc, #780]	; 17704 <read_boolean_unary_expression@@Base+0x1330>
   173f4:	adds	r0, r4, #4
   173f8:	adc	r1, r7, #0
   173fc:	add	sl, pc, sl
   17400:	ldr	r2, [sl, #4]
   17404:	ldr	r3, [pc, #764]	; 17708 <read_boolean_unary_expression@@Base+0x1334>
   17408:	ldr	r3, [pc, r3]
   1740c:	subs	r0, r3, r0
   17410:	sbcs	r0, r2, r1
   17414:	bcs	174a4 <read_boolean_unary_expression@@Base+0x10d0>
   17418:	mov	r0, #0
   1741c:	str	r0, [sp, #8]
   17420:	mov	r0, #7
   17424:	orr	r0, r0, #131072	; 0x20000
   17428:	adds	r0, r0, r4
   1742c:	adc	r1, r7, #0
   17430:	subs	r0, r0, #4
   17434:	sbc	r1, r1, #0
   17438:	mvn	r2, #0
   1743c:	and	r7, r1, r2
   17440:	mov	r1, #16646144	; 0xfe0000
   17444:	orr	r1, r1, #-16777216	; 0xff000000
   17448:	and	r4, r0, r1
   1744c:	ldr	r6, [pc, #700]	; 17710 <read_boolean_unary_expression@@Base+0x133c>
   17450:	mov	r0, r9
   17454:	mov	r1, r4
   17458:	add	r6, pc, r6
   1745c:	bl	11eec <realloc@plt>
   17460:	stm	sl, {r4, r7}
   17464:	str	r0, [r6]
   17468:	ldr	sl, [pc, #676]	; 17714 <read_boolean_unary_expression@@Base+0x1340>
   1746c:	mov	r3, r0
   17470:	add	sl, pc, sl
   17474:	ldr	r7, [sl, #4]
   17478:	ldr	r0, [pc, #664]	; 17718 <read_boolean_unary_expression@@Base+0x1344>
   1747c:	add	r0, pc, r0
   17480:	ldrb	r6, [r0]
   17484:	ldr	r4, [pc, #656]	; 1771c <read_boolean_unary_expression@@Base+0x1348>
   17488:	ldr	r4, [pc, r4]
   1748c:	b	174b8 <read_boolean_unary_expression@@Base+0x10e4>
   17490:	mov	r0, #0
   17494:	str	r0, [sp, #8]
   17498:	mov	r6, #0
   1749c:	mov	r3, r9
   174a0:	b	174b8 <read_boolean_unary_expression@@Base+0x10e4>
   174a4:	mov	r0, #0
   174a8:	str	r0, [sp, #8]
   174ac:	ldr	sl, [pc, #600]	; 1770c <read_boolean_unary_expression@@Base+0x1338>
   174b0:	mov	r3, r9
   174b4:	add	sl, pc, sl
   174b8:	mov	r9, r3
   174bc:	strb	r5, [r3, r4]!
   174c0:	lsr	r0, r5, #24
   174c4:	adds	r4, r4, #4
   174c8:	lsr	r1, r5, #16
   174cc:	lsr	r2, r5, #8
   174d0:	strb	r0, [r3, #3]
   174d4:	mov	r0, r8
   174d8:	adc	r5, r7, #0
   174dc:	strb	r1, [r3, #2]
   174e0:	strb	r2, [r3, #1]
   174e4:	strd	r4, [sl]
   174e8:	bl	11f70 <strlen@plt>
   174ec:	mov	r7, r0
   174f0:	cmp	r6, #0
   174f4:	beq	17590 <read_boolean_unary_expression@@Base+0x11bc>
   174f8:	ldr	r6, [pc, #544]	; 17720 <read_boolean_unary_expression@@Base+0x134c>
   174fc:	adds	r0, r4, r7
   17500:	adc	r1, r5, #0
   17504:	add	r6, pc, r6
   17508:	ldr	r2, [r6, #4]
   1750c:	ldr	r3, [pc, #528]	; 17724 <read_boolean_unary_expression@@Base+0x1350>
   17510:	ldr	r3, [pc, r3]
   17514:	subs	r3, r3, r0
   17518:	sbcs	r2, r2, r1
   1751c:	bcs	17588 <read_boolean_unary_expression@@Base+0x11b4>
   17520:	mov	r2, #7
   17524:	orr	r2, r2, #131072	; 0x20000
   17528:	adds	r0, r2, r0
   1752c:	adc	r1, r1, #0
   17530:	subs	r0, r0, #8
   17534:	sbc	r1, r1, #0
   17538:	mvn	r2, #0
   1753c:	and	r5, r1, r2
   17540:	mov	r1, #16646144	; 0xfe0000
   17544:	orr	r1, r1, #-16777216	; 0xff000000
   17548:	and	r4, r0, r1
   1754c:	mov	r0, r9
   17550:	mov	r1, r4
   17554:	bl	11eec <realloc@plt>
   17558:	strd	r4, [r6]
   1755c:	ldr	r1, [pc, #452]	; 17728 <read_boolean_unary_expression@@Base+0x1354>
   17560:	ldr	r5, [sl, #4]
   17564:	add	r1, pc, r1
   17568:	str	r0, [r1]
   1756c:	ldr	r1, [pc, #440]	; 1772c <read_boolean_unary_expression@@Base+0x1358>
   17570:	add	r1, pc, r1
   17574:	ldrb	r1, [r1]
   17578:	str	r1, [sp, #8]
   1757c:	ldr	r4, [pc, #428]	; 17730 <read_boolean_unary_expression@@Base+0x135c>
   17580:	ldr	r4, [pc, r4]
   17584:	b	17594 <read_boolean_unary_expression@@Base+0x11c0>
   17588:	mov	r0, #1
   1758c:	str	r0, [sp, #8]
   17590:	mov	r0, r9
   17594:	mov	r9, r0
   17598:	add	r0, r0, r4
   1759c:	mov	r1, r8
   175a0:	mov	r2, r7
   175a4:	bl	11eb0 <memcpy@plt>
   175a8:	adds	r6, r4, r7
   175ac:	mov	r0, r8
   175b0:	adc	r5, r5, #0
   175b4:	str	r6, [sl]
   175b8:	str	r5, [sl, #4]
   175bc:	bl	11f70 <strlen@plt>
   175c0:	and	r0, r0, #3
   175c4:	rsb	r4, r0, #4
   175c8:	ldr	r0, [sp, #8]
   175cc:	cmp	r0, #0
   175d0:	beq	17658 <read_boolean_unary_expression@@Base+0x1284>
   175d4:	ldr	r7, [pc, #344]	; 17734 <read_boolean_unary_expression@@Base+0x1360>
   175d8:	adds	r0, r6, r4
   175dc:	adc	r1, r5, #0
   175e0:	add	r7, pc, r7
   175e4:	ldr	r2, [r7, #4]
   175e8:	ldr	r3, [pc, #328]	; 17738 <read_boolean_unary_expression@@Base+0x1364>
   175ec:	ldr	r3, [pc, r3]
   175f0:	subs	r3, r3, r0
   175f4:	sbcs	r2, r2, r1
   175f8:	bcs	17658 <read_boolean_unary_expression@@Base+0x1284>
   175fc:	mov	r2, #7
   17600:	orr	r2, r2, #131072	; 0x20000
   17604:	adds	r0, r2, r0
   17608:	adc	r1, r1, #0
   1760c:	subs	r0, r0, #8
   17610:	sbc	r1, r1, #0
   17614:	mvn	r2, #0
   17618:	and	r5, r1, r2
   1761c:	mov	r1, #16646144	; 0xfe0000
   17620:	orr	r1, r1, #-16777216	; 0xff000000
   17624:	and	r6, r0, r1
   17628:	ldr	r8, [pc, #268]	; 1773c <read_boolean_unary_expression@@Base+0x1368>
   1762c:	mov	r0, r9
   17630:	mov	r1, r6
   17634:	add	r8, pc, r8
   17638:	bl	11eec <realloc@plt>
   1763c:	str	r6, [r7]
   17640:	str	r5, [r7, #4]
   17644:	str	r0, [r8]
   17648:	ldr	r5, [sl, #4]
   1764c:	ldr	r6, [pc, #236]	; 17740 <read_boolean_unary_expression@@Base+0x136c>
   17650:	mov	r9, r0
   17654:	ldr	r6, [pc, r6]
   17658:	add	r0, r9, r6
   1765c:	mov	r1, #0
   17660:	mov	r2, r4
   17664:	bl	11fb8 <memset@plt>
   17668:	adds	r0, r6, r4
   1766c:	adc	r1, r5, #0
   17670:	strd	r0, [sl]
   17674:	sub	sp, fp, #28
   17678:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1767c:	strdeq	r4, [r1], -ip
   17680:	andeq	r4, r1, r0, ror #29
   17684:	andeq	r4, r1, r4, ror #29
   17688:	andeq	r4, r1, r8, asr #29
   1768c:	andeq	r4, r1, ip, asr #29
   17690:			; <UNDEFINED> instruction: 0x00014eb0
   17694:	andeq	r4, r1, r4, ror #28
   17698:	andeq	r4, r1, r0, ror #28
   1769c:	andeq	r4, r1, r0, asr lr
   176a0:	andeq	r4, r1, r8, lsr lr
   176a4:	andeq	r4, r1, r4, ror #27
   176a8:	andeq	r4, r1, r4, ror #25
   176ac:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   176b0:	andeq	r4, r1, r8, asr #27
   176b4:	andeq	r4, r1, r8, ror ip
   176b8:	andeq	r4, r1, r4, lsl #27
   176bc:	andeq	r4, r1, r4, asr sp
   176c0:	andeq	r4, r1, r8, asr sp
   176c4:	andeq	r4, r1, r4, asr #26
   176c8:	andeq	r4, r1, r8, asr ip
   176cc:	andeq	r4, r1, r4, lsl ip
   176d0:	andeq	r4, r1, r0, ror #23
   176d4:	andeq	r4, r1, r4, ror #23
   176d8:	andeq	r4, r1, r8, asr fp
   176dc:	andeq	r4, r1, r4, lsl fp
   176e0:	andeq	r4, r1, r4, lsl #22
   176e4:	andeq	r4, r1, ip, lsr #21
   176e8:	muleq	r1, ip, sl
   176ec:	muleq	r1, r0, sl
   176f0:	andeq	r4, r1, ip, asr #20
   176f4:	andeq	r4, r1, ip, lsr sl
   176f8:	andeq	r4, r1, r0, lsr sl
   176fc:	andeq	r4, r1, r0, lsl #20
   17700:	andeq	r4, r1, r4, asr #19
   17704:			; <UNDEFINED> instruction: 0x000149b4
   17708:	andeq	r4, r1, r8, lsr #19
   1770c:	andeq	r4, r1, r4, lsl #18
   17710:	andeq	r4, r1, r4, asr r9
   17714:	andeq	r4, r1, r8, asr #18
   17718:	andeq	r4, r1, r8, lsr #18
   1771c:	andeq	r4, r1, r0, lsr r9
   17720:	andeq	r4, r1, ip, lsr #17
   17724:	andeq	r4, r1, r0, lsr #17
   17728:	andeq	r4, r1, r8, asr #16
   1772c:	andeq	r4, r1, r4, lsr r8
   17730:	andeq	r4, r1, r8, lsr r8
   17734:	ldrdeq	r4, [r1], -r0
   17738:	andeq	r4, r1, r4, asr #15
   1773c:	andeq	r4, r1, r8, ror r7
   17740:	andeq	r4, r1, r4, ror #14
   17744:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17748:	add	fp, sp, #28
   1774c:	sub	sp, sp, #28
   17750:	mov	ip, r0
   17754:	ldr	r0, [pc, #1740]	; 17e28 <read_boolean_unary_expression@@Base+0x1a54>
   17758:	ldr	r0, [pc, r0]
   1775c:	cmp	r0, #0
   17760:	beq	1787c <read_boolean_unary_expression@@Base+0x14a8>
   17764:	ldr	r5, [pc, #1728]	; 17e2c <read_boolean_unary_expression@@Base+0x1a58>
   17768:	mov	sl, r1
   1776c:	add	r5, pc, r5
   17770:	ldr	r3, [r5, #4]
   17774:	ldr	r4, [pc, #1716]	; 17e30 <read_boolean_unary_expression@@Base+0x1a5c>
   17778:	ldr	r4, [pc, r4]
   1777c:	ldr	r6, [pc, #1712]	; 17e34 <read_boolean_unary_expression@@Base+0x1a60>
   17780:	add	r6, pc, r6
   17784:	ldrb	r0, [r6]
   17788:	cmp	r0, #0
   1778c:	beq	17884 <read_boolean_unary_expression@@Base+0x14b0>
   17790:	ldr	r8, [pc, #1732]	; 17e5c <read_boolean_unary_expression@@Base+0x1a88>
   17794:	mov	r5, #10551296	; 0xa10000
   17798:	adds	r9, r4, #4
   1779c:	add	r8, pc, r8
   177a0:	adc	r2, r3, #0
   177a4:	ldr	r0, [r8, #4]
   177a8:	ldr	r1, [pc, #1712]	; 17e60 <read_boolean_unary_expression@@Base+0x1a8c>
   177ac:	orr	r5, r5, #16777216	; 0x1000000
   177b0:	ldr	r1, [pc, r1]
   177b4:	subs	r1, r1, r9
   177b8:	sbcs	r0, r0, r2
   177bc:	bcs	17988 <read_boolean_unary_expression@@Base+0x15b4>
   177c0:	mov	r0, #3
   177c4:	orr	r0, r0, #131072	; 0x20000
   177c8:	adds	r0, r4, r0
   177cc:	adc	r1, r3, #0
   177d0:	mvn	r2, #0
   177d4:	and	r9, r1, r2
   177d8:	mov	r1, #16646144	; 0xfe0000
   177dc:	orr	r1, r1, #-16777216	; 0xff000000
   177e0:	and	r4, r0, r1
   177e4:	ldr	r0, [pc, #1664]	; 17e6c <read_boolean_unary_expression@@Base+0x1a98>
   177e8:	mov	r1, r4
   177ec:	mov	r7, ip
   177f0:	ldr	r0, [pc, r0]
   177f4:	bl	11eec <realloc@plt>
   177f8:	ldr	ip, [pc, #1648]	; 17e70 <read_boolean_unary_expression@@Base+0x1a9c>
   177fc:	ldr	lr, [pc, #1648]	; 17e74 <read_boolean_unary_expression@@Base+0x1aa0>
   17800:	stm	r8, {r4, r9}
   17804:	ldr	r1, [pc, #1644]	; 17e78 <read_boolean_unary_expression@@Base+0x1aa4>
   17808:	add	ip, pc, ip
   1780c:	add	lr, pc, lr
   17810:	add	r1, pc, r1
   17814:	mov	r2, r0
   17818:	str	r2, [r1]
   1781c:	mov	r6, ip
   17820:	ldrb	ip, [ip]
   17824:	ldr	r3, [lr, #4]
   17828:	ldr	r4, [pc, #1612]	; 17e7c <read_boolean_unary_expression@@Base+0x1aa8>
   1782c:	lsr	r0, r5, #24
   17830:	mov	r1, r8
   17834:	ldr	r4, [pc, r4]
   17838:	str	r2, [sp, #20]
   1783c:	lsl	r8, r7, #1
   17840:	strb	r5, [r2, r4]!
   17844:	adds	r9, r4, #4
   17848:	strb	r0, [r2, #3]
   1784c:	lsr	r0, r5, #16
   17850:	strb	r0, [r2, #2]
   17854:	lsr	r0, r5, #8
   17858:	strb	r0, [r2, #1]
   1785c:	adc	r5, r3, #0
   17860:	mov	r0, #0
   17864:	cmp	ip, #1
   17868:	str	r3, [sp, #16]
   1786c:	str	r9, [lr]
   17870:	str	r5, [lr, #4]
   17874:	beq	179dc <read_boolean_unary_expression@@Base+0x1608>
   17878:	b	17b40 <read_boolean_unary_expression@@Base+0x176c>
   1787c:	sub	sp, fp, #28
   17880:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17884:	ldr	r0, [pc, #1452]	; 17e38 <read_boolean_unary_expression@@Base+0x1a64>
   17888:	mov	r7, r3
   1788c:	mov	r9, #0
   17890:	ldr	r0, [pc, r0]
   17894:	str	r0, [sp, #20]
   17898:	ldrb	r1, [r0, r4]!
   1789c:	str	r7, [sp, #16]
   178a0:	ldrb	r2, [r0, #1]
   178a4:	ldrb	r3, [r0, #2]
   178a8:	ldrb	r0, [r0, #3]
   178ac:	orr	r1, r1, r2, lsl #8
   178b0:	orr	r1, r1, r3, lsl #16
   178b4:	adds	r2, r4, #4
   178b8:	orr	r3, r1, r0, lsl #24
   178bc:	adc	r7, r7, #0
   178c0:	mov	r1, r5
   178c4:	stm	r5, {r2, r7}
   178c8:	mov	r5, #10551296	; 0xa10000
   178cc:	orr	r5, r5, #16777216	; 0x1000000
   178d0:	cmn	r3, #1
   178d4:	beq	17a88 <read_boolean_unary_expression@@Base+0x16b4>
   178d8:	cmp	r3, r5
   178dc:	bne	17a98 <read_boolean_unary_expression@@Base+0x16c4>
   178e0:	str	r7, [sp, #8]
   178e4:	ldr	r0, [sp, #20]
   178e8:	str	r4, [sp, #4]
   178ec:	mov	r8, r5
   178f0:	ldr	r3, [r0, r2]
   178f4:	ldr	r0, [sp, #16]
   178f8:	adds	r5, r4, #8
   178fc:	adc	r9, r0, #0
   17900:	cmn	r3, #1
   17904:	stm	r1, {r5, r9}
   17908:	beq	17aa4 <read_boolean_unary_expression@@Base+0x16d0>
   1790c:	lsr	r0, r3, #1
   17910:	mov	r7, ip
   17914:	cmp	r0, ip
   17918:	bne	17aa4 <read_boolean_unary_expression@@Base+0x16d0>
   1791c:	lsl	r0, r7, #3
   17920:	mov	r4, r2
   17924:	bl	11f28 <malloc@plt>
   17928:	cmp	r7, #0
   1792c:	beq	17acc <read_boolean_unary_expression@@Base+0x16f8>
   17930:	str	r0, [sp, #12]
   17934:	str	r7, [sp, #24]
   17938:	ldr	r2, [sp, #20]
   1793c:	ldr	r3, [r2, r5]!
   17940:	adds	r5, r5, #8
   17944:	ldr	r2, [r2, #4]
   17948:	str	r3, [r0]
   1794c:	adc	r9, r9, #0
   17950:	str	r2, [r0, #4]
   17954:	add	r0, r0, #8
   17958:	subs	r7, r7, #1
   1795c:	bne	17938 <read_boolean_unary_expression@@Base+0x1564>
   17960:	ldr	lr, [pc, #1260]	; 17e54 <read_boolean_unary_expression@@Base+0x1a80>
   17964:	add	lr, pc, lr
   17968:	stm	lr, {r5, r9}
   1796c:	ldr	ip, [pc, #1252]	; 17e58 <read_boolean_unary_expression@@Base+0x1a84>
   17970:	mov	r1, lr
   17974:	ldr	r0, [sp, #12]
   17978:	add	ip, pc, ip
   1797c:	mov	r6, ip
   17980:	ldr	ip, [sp, #24]
   17984:	b	17ae8 <read_boolean_unary_expression@@Base+0x1714>
   17988:	str	r3, [sp, #16]
   1798c:	ldr	r3, [pc, #1232]	; 17e64 <read_boolean_unary_expression@@Base+0x1a90>
   17990:	mov	lr, r5
   17994:	mov	r7, ip
   17998:	lsr	ip, r5, #16
   1799c:	ldr	r3, [pc, r3]
   179a0:	lsr	r1, r5, #8
   179a4:	str	r3, [sp, #20]
   179a8:	strb	lr, [r3, r4]!
   179ac:	lsr	r0, lr, #24
   179b0:	strb	r1, [r3, #1]
   179b4:	strb	r0, [r3, #3]
   179b8:	strb	ip, [r3, #2]
   179bc:	ldr	lr, [pc, #1188]	; 17e68 <read_boolean_unary_expression@@Base+0x1a94>
   179c0:	lsl	r5, r7, #1
   179c4:	add	lr, pc, lr
   179c8:	mov	r1, r8
   179cc:	mov	r8, r5
   179d0:	str	r9, [lr]
   179d4:	str	r2, [lr, #4]
   179d8:	mov	r5, r2
   179dc:	str	r8, [sp, #24]
   179e0:	mov	r8, r1
   179e4:	ldr	r0, [sp, #16]
   179e8:	ldr	r2, [r8, #4]
   179ec:	ldr	r3, [pc, #1164]	; 17e80 <read_boolean_unary_expression@@Base+0x1aac>
   179f0:	adds	ip, r4, #8
   179f4:	adc	r1, r0, #0
   179f8:	mov	r0, #0
   179fc:	ldr	r3, [pc, r3]
   17a00:	subs	r3, r3, ip
   17a04:	sbcs	r1, r2, r1
   17a08:	bcs	17a80 <read_boolean_unary_expression@@Base+0x16ac>
   17a0c:	ldr	r5, [pc, #1136]	; 17e84 <read_boolean_unary_expression@@Base+0x1ab0>
   17a10:	mov	r0, #3
   17a14:	ldr	r1, [sp, #16]
   17a18:	orr	r0, r0, #131072	; 0x20000
   17a1c:	adds	r0, r0, r4
   17a20:	adc	r1, r1, #0
   17a24:	adds	r0, r0, #4
   17a28:	adc	r1, r1, #0
   17a2c:	mvn	r2, #0
   17a30:	and	r9, r1, r2
   17a34:	mov	r1, #16646144	; 0xfe0000
   17a38:	orr	r1, r1, #-16777216	; 0xff000000
   17a3c:	and	r4, r0, r1
   17a40:	ldr	r0, [sp, #20]
   17a44:	mov	r1, r4
   17a48:	add	r5, pc, r5
   17a4c:	bl	11eec <realloc@plt>
   17a50:	ldr	ip, [pc, #1072]	; 17e88 <read_boolean_unary_expression@@Base+0x1ab4>
   17a54:	ldr	lr, [pc, #1072]	; 17e8c <read_boolean_unary_expression@@Base+0x1ab8>
   17a58:	stm	r8, {r4, r9}
   17a5c:	add	lr, pc, lr
   17a60:	str	r0, [r5]
   17a64:	str	r0, [sp, #20]
   17a68:	ldr	r5, [lr, #4]
   17a6c:	ldr	r9, [pc, #1052]	; 17e90 <read_boolean_unary_expression@@Base+0x1abc>
   17a70:	add	ip, pc, ip
   17a74:	mov	r6, ip
   17a78:	mov	r0, #0
   17a7c:	ldr	r9, [pc, r9]
   17a80:	ldr	r8, [sp, #24]
   17a84:	b	17b40 <read_boolean_unary_expression@@Base+0x176c>
   17a88:	mov	r3, r2
   17a8c:	ldr	r2, [sp, #16]
   17a90:	mov	r0, #0
   17a94:	b	17b00 <read_boolean_unary_expression@@Base+0x172c>
   17a98:	ldr	r1, [pc, #924]	; 17e3c <read_boolean_unary_expression@@Base+0x1a68>
   17a9c:	add	r1, pc, r1
   17aa0:	b	17aac <read_boolean_unary_expression@@Base+0x16d8>
   17aa4:	ldr	r1, [pc, #924]	; 17e48 <read_boolean_unary_expression@@Base+0x1a74>
   17aa8:	add	r1, pc, r1
   17aac:	ldr	r0, [pc, #908]	; 17e40 <read_boolean_unary_expression@@Base+0x1a6c>
   17ab0:	ldr	r0, [pc, r0]
   17ab4:	ldr	r0, [r0]
   17ab8:	ldr	r2, [pc, #900]	; 17e44 <read_boolean_unary_expression@@Base+0x1a70>
   17abc:	ldr	r2, [pc, r2]
   17ac0:	sub	sp, fp, #28
   17ac4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17ac8:	b	11f88 <fprintf@plt>
   17acc:	ldr	lr, [pc, #888]	; 17e4c <read_boolean_unary_expression@@Base+0x1a78>
   17ad0:	ldr	ip, [pc, #888]	; 17e50 <read_boolean_unary_expression@@Base+0x1a7c>
   17ad4:	add	lr, pc, lr
   17ad8:	add	ip, pc, ip
   17adc:	mov	r6, ip
   17ae0:	mov	r1, lr
   17ae4:	mov	ip, r7
   17ae8:	mov	r3, r4
   17aec:	ldr	r7, [sp, #8]
   17af0:	ldr	r4, [sp, #4]
   17af4:	ldr	r2, [sp, #16]
   17af8:	mov	r9, #0
   17afc:	mov	r5, r8
   17b00:	mov	lr, r1
   17b04:	mov	r1, #1
   17b08:	str	r4, [lr]
   17b0c:	str	r2, [lr, #4]
   17b10:	ldr	r2, [sp, #20]
   17b14:	lsl	r8, ip, #1
   17b18:	strb	r5, [r2, r4]!
   17b1c:	mov	r5, r7
   17b20:	strb	r1, [r2, #3]
   17b24:	mov	r1, #161	; 0xa1
   17b28:	strb	r9, [r2, #1]
   17b2c:	mov	r9, r3
   17b30:	strb	r1, [r2, #2]
   17b34:	str	r9, [lr]
   17b38:	str	r7, [lr, #4]
   17b3c:	mov	r7, ip
   17b40:	ldr	r3, [sp, #20]
   17b44:	lsr	r1, r8, #16
   17b48:	mov	ip, r3
   17b4c:	strb	r8, [r3, r9]!
   17b50:	lsr	r4, r8, #24
   17b54:	lsr	r2, r8, #8
   17b58:	adds	r8, r9, #4
   17b5c:	strb	r1, [r3, #2]
   17b60:	adc	r1, r5, #0
   17b64:	cmp	r7, #0
   17b68:	strb	r4, [r3, #3]
   17b6c:	strb	r2, [r3, #1]
   17b70:	str	r8, [lr]
   17b74:	str	r1, [lr, #4]
   17b78:	str	r7, [sp, #24]
   17b7c:	beq	17e1c <read_boolean_unary_expression@@Base+0x1a48>
   17b80:	ldr	r7, [pc, #780]	; 17e94 <read_boolean_unary_expression@@Base+0x1ac0>
   17b84:	mov	r4, lr
   17b88:	mov	r2, r0
   17b8c:	add	r7, pc, r7
   17b90:	str	r0, [sp, #12]
   17b94:	b	17c30 <read_boolean_unary_expression@@Base+0x185c>
   17b98:	mov	r7, ip
   17b9c:	lsr	r2, r4, #24
   17ba0:	strb	r4, [r7, r8]!
   17ba4:	mov	lr, r6
   17ba8:	lsr	r9, r4, #16
   17bac:	lsr	r6, r4, #8
   17bb0:	strb	r2, [r7, #3]
   17bb4:	adds	r2, r8, #4
   17bb8:	mov	r4, r0
   17bbc:	strb	r9, [r7, #2]
   17bc0:	mov	r3, ip
   17bc4:	strb	r6, [r7, #1]
   17bc8:	adc	r9, r1, #0
   17bcc:	stm	r4, {r2, r9}
   17bd0:	mov	ip, r3
   17bd4:	lsr	r1, r5, #16
   17bd8:	strb	r5, [r3, r2]!
   17bdc:	lsr	r0, r5, #24
   17be0:	lsr	r7, r5, #8
   17be4:	adds	r8, r2, #4
   17be8:	strb	r1, [r3, #2]
   17bec:	adc	r1, r9, #0
   17bf0:	strb	r0, [r3, #3]
   17bf4:	strb	r7, [r3, #1]
   17bf8:	str	r8, [r4]
   17bfc:	str	r1, [r4, #4]
   17c00:	ldr	r0, [sp, #24]
   17c04:	ldr	r2, [sp, #16]
   17c08:	mov	r6, lr
   17c0c:	subs	r0, r0, #1
   17c10:	str	r0, [sp, #24]
   17c14:	ldr	sl, [sp, #20]
   17c18:	ldr	r0, [sp, #12]
   17c1c:	ldr	r7, [pc, #676]	; 17ec8 <read_boolean_unary_expression@@Base+0x1af4>
   17c20:	add	r2, r2, #8
   17c24:	add	sl, sl, #8
   17c28:	add	r7, pc, r7
   17c2c:	beq	17e1c <read_boolean_unary_expression@@Base+0x1a48>
   17c30:	cmp	r0, #0
   17c34:	mov	r0, r4
   17c38:	str	r2, [sp, #16]
   17c3c:	beq	17c48 <read_boolean_unary_expression@@Base+0x1874>
   17c40:	ldrd	r2, [r2]
   17c44:	b	17c50 <read_boolean_unary_expression@@Base+0x187c>
   17c48:	mov	r2, #0
   17c4c:	mov	r3, #0
   17c50:	ldrd	r4, [sl]
   17c54:	adds	r4, r4, r2
   17c58:	adc	r5, r5, r3
   17c5c:	strd	r4, [sl]
   17c60:	ldrb	r2, [r6]
   17c64:	str	sl, [sp, #20]
   17c68:	cmp	r2, #0
   17c6c:	beq	17b98 <read_boolean_unary_expression@@Base+0x17c4>
   17c70:	ldr	r3, [r7, #4]
   17c74:	ldr	r6, [pc, #540]	; 17e98 <read_boolean_unary_expression@@Base+0x1ac4>
   17c78:	adds	r2, r8, #4
   17c7c:	adc	r9, r1, #0
   17c80:	ldr	r6, [pc, r6]
   17c84:	subs	r2, r6, r2
   17c88:	sbcs	r2, r3, r9
   17c8c:	bcs	17d38 <read_boolean_unary_expression@@Base+0x1964>
   17c90:	mov	r2, #3
   17c94:	orr	r2, r2, #131072	; 0x20000
   17c98:	adds	r0, r8, r2
   17c9c:	adc	r1, r1, #0
   17ca0:	mvn	r2, #0
   17ca4:	and	r8, r1, r2
   17ca8:	mov	r1, #16646144	; 0xfe0000
   17cac:	orr	r1, r1, #-16777216	; 0xff000000
   17cb0:	and	r6, r0, r1
   17cb4:	mov	r0, ip
   17cb8:	mov	r1, r6
   17cbc:	bl	11eec <realloc@plt>
   17cc0:	ldr	ip, [pc, #468]	; 17e9c <read_boolean_unary_expression@@Base+0x1ac8>
   17cc4:	ldr	lr, [pc, #468]	; 17ea0 <read_boolean_unary_expression@@Base+0x1acc>
   17cc8:	stm	r7, {r6, r8}
   17ccc:	mov	r3, r0
   17cd0:	ldr	r0, [pc, #460]	; 17ea4 <read_boolean_unary_expression@@Base+0x1ad0>
   17cd4:	add	lr, pc, lr
   17cd8:	mov	r9, lr
   17cdc:	add	r0, pc, r0
   17ce0:	add	ip, pc, ip
   17ce4:	str	r3, [r0]
   17ce8:	mov	lr, ip
   17cec:	ldrb	ip, [ip]
   17cf0:	ldr	r1, [r9, #4]
   17cf4:	ldr	r8, [pc, #428]	; 17ea8 <read_boolean_unary_expression@@Base+0x1ad4>
   17cf8:	mov	r7, r3
   17cfc:	lsr	r2, r4, #24
   17d00:	ldr	r8, [pc, r8]
   17d04:	lsr	r6, r4, #16
   17d08:	strb	r4, [r7, r8]!
   17d0c:	strb	r2, [r7, #3]
   17d10:	lsr	r2, r4, #8
   17d14:	strb	r2, [r7, #1]
   17d18:	adds	r2, r8, #4
   17d1c:	mov	r4, r9
   17d20:	adc	r9, r1, #0
   17d24:	cmp	ip, #1
   17d28:	strb	r6, [r7, #2]
   17d2c:	stm	r4, {r2, r9}
   17d30:	bne	17bd0 <read_boolean_unary_expression@@Base+0x17fc>
   17d34:	b	17d6c <read_boolean_unary_expression@@Base+0x1998>
   17d38:	mov	r6, ip
   17d3c:	lsr	r2, r4, #24
   17d40:	strb	r4, [r6, r8]!
   17d44:	lsr	r9, r4, #16
   17d48:	lsr	r7, r4, #8
   17d4c:	strb	r2, [r6, #3]
   17d50:	adds	r2, r8, #4
   17d54:	mov	r4, r0
   17d58:	strb	r9, [r6, #2]
   17d5c:	mov	r3, ip
   17d60:	strb	r7, [r6, #1]
   17d64:	adc	r9, r1, #0
   17d68:	stm	r4, {r2, r9}
   17d6c:	ldr	lr, [pc, #312]	; 17eac <read_boolean_unary_expression@@Base+0x1ad8>
   17d70:	mov	r0, r4
   17d74:	adds	r7, r8, #8
   17d78:	add	lr, pc, lr
   17d7c:	adc	ip, r1, #0
   17d80:	ldr	r4, [lr, #4]
   17d84:	ldr	r6, [pc, #292]	; 17eb0 <read_boolean_unary_expression@@Base+0x1adc>
   17d88:	ldr	r6, [pc, r6]
   17d8c:	subs	r7, r6, r7
   17d90:	sbcs	r7, r4, ip
   17d94:	bcs	17e0c <read_boolean_unary_expression@@Base+0x1a38>
   17d98:	mov	r2, #3
   17d9c:	orr	r2, r2, #131072	; 0x20000
   17da0:	adds	r0, r2, r8
   17da4:	adc	r1, r1, #0
   17da8:	adds	r0, r0, #4
   17dac:	adc	r1, r1, #0
   17db0:	mvn	r2, #0
   17db4:	and	r7, r1, r2
   17db8:	mov	r1, #16646144	; 0xfe0000
   17dbc:	orr	r1, r1, #-16777216	; 0xff000000
   17dc0:	and	r6, r0, r1
   17dc4:	mov	r0, r3
   17dc8:	mov	r1, r6
   17dcc:	mov	r8, lr
   17dd0:	bl	11eec <realloc@plt>
   17dd4:	ldr	lr, [pc, #220]	; 17eb8 <read_boolean_unary_expression@@Base+0x1ae4>
   17dd8:	strd	r6, [r8]
   17ddc:	mov	r3, r0
   17de0:	add	lr, pc, lr
   17de4:	mov	r4, lr
   17de8:	ldr	r9, [lr, #4]
   17dec:	ldr	r0, [pc, #200]	; 17ebc <read_boolean_unary_expression@@Base+0x1ae8>
   17df0:	add	r0, pc, r0
   17df4:	str	r3, [r0]
   17df8:	ldr	r2, [pc, #192]	; 17ec0 <read_boolean_unary_expression@@Base+0x1aec>
   17dfc:	ldr	r2, [pc, r2]
   17e00:	ldr	lr, [pc, #188]	; 17ec4 <read_boolean_unary_expression@@Base+0x1af0>
   17e04:	add	lr, pc, lr
   17e08:	b	17bd0 <read_boolean_unary_expression@@Base+0x17fc>
   17e0c:	ldr	lr, [pc, #160]	; 17eb4 <read_boolean_unary_expression@@Base+0x1ae0>
   17e10:	mov	r4, r0
   17e14:	add	lr, pc, lr
   17e18:	b	17bd0 <read_boolean_unary_expression@@Base+0x17fc>
   17e1c:	sub	sp, fp, #28
   17e20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17e24:	b	11ea4 <free@plt>
   17e28:	andeq	r4, r1, r0, asr r6
   17e2c:	andeq	r4, r1, ip, asr #12
   17e30:	andeq	r4, r1, r0, asr #12
   17e34:	andeq	r4, r1, r4, lsr #12
   17e38:	andeq	r4, r1, ip, lsl r5
   17e3c:	andeq	r3, r0, ip, asr r1
   17e40:	andeq	r3, r1, r8, lsl #12
   17e44:	andeq	r4, r1, r4, ror #5
   17e48:	muleq	r0, sl, r1
   17e4c:	andeq	r4, r1, r4, ror #5
   17e50:	andeq	r4, r1, ip, asr #5
   17e54:	andeq	r4, r1, r4, asr r4
   17e58:	andeq	r4, r1, ip, lsr #8
   17e5c:	andeq	r4, r1, r4, lsl r6
   17e60:	andeq	r4, r1, r0, lsl #12
   17e64:	andeq	r4, r1, r0, lsl r4
   17e68:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   17e6c:			; <UNDEFINED> instruction: 0x000145bc
   17e70:	muleq	r1, ip, r5
   17e74:	andeq	r4, r1, ip, lsr #11
   17e78:	muleq	r1, ip, r5
   17e7c:	andeq	r4, r1, r4, lsl #11
   17e80:			; <UNDEFINED> instruction: 0x000143b4
   17e84:	andeq	r4, r1, r4, ror #6
   17e88:	andeq	r4, r1, r4, lsr r3
   17e8c:	andeq	r4, r1, ip, asr r3
   17e90:	andeq	r4, r1, ip, lsr r3
   17e94:	andeq	r4, r1, r4, lsr #4
   17e98:	andeq	r4, r1, r0, lsr r1
   17e9c:	andeq	r4, r1, r4, asr #1
   17ea0:	andeq	r4, r1, r4, ror #1
   17ea4:	ldrdeq	r4, [r1], -r0
   17ea8:	strheq	r4, [r1], -r8
   17eac:	andeq	r4, r1, r8, lsr r0
   17eb0:	andeq	r4, r1, r8, lsr #32
   17eb4:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   17eb8:	ldrdeq	r3, [r1], -r8
   17ebc:			; <UNDEFINED> instruction: 0x00013fbc
   17ec0:			; <UNDEFINED> instruction: 0x00013fbc
   17ec4:	andeq	r3, r1, r0, lsr #31
   17ec8:	andeq	r4, r1, r8, lsl #3
   17ecc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17ed0:	add	fp, sp, #28
   17ed4:	sub	sp, sp, #4
   17ed8:	ldr	r0, [pc, #3180]	; 18b4c <read_boolean_unary_expression@@Base+0x2778>
   17edc:	ldr	r0, [pc, r0]
   17ee0:	cmp	r0, #0
   17ee4:	beq	18540 <read_boolean_unary_expression@@Base+0x216c>
   17ee8:	ldr	sl, [pc, #3168]	; 18b50 <read_boolean_unary_expression@@Base+0x277c>
   17eec:	add	sl, pc, sl
   17ef0:	ldr	r6, [sl, #4]
   17ef4:	ldr	r5, [pc, #3160]	; 18b54 <read_boolean_unary_expression@@Base+0x2780>
   17ef8:	ldr	r5, [pc, r5]
   17efc:	ldr	r8, [pc, #3156]	; 18b58 <read_boolean_unary_expression@@Base+0x2784>
   17f00:	add	r8, pc, r8
   17f04:	ldrb	r0, [r8]
   17f08:	cmp	r0, #0
   17f0c:	beq	17fd0 <read_boolean_unary_expression@@Base+0x1bfc>
   17f10:	ldr	r9, [pc, #3164]	; 18b74 <read_boolean_unary_expression@@Base+0x27a0>
   17f14:	adds	r2, r5, #4
   17f18:	adc	ip, r6, #0
   17f1c:	add	r9, pc, r9
   17f20:	ldr	r0, [r9, #4]
   17f24:	ldr	r3, [pc, #3148]	; 18b78 <read_boolean_unary_expression@@Base+0x27a4>
   17f28:	ldr	r3, [pc, r3]
   17f2c:	subs	r3, r3, r2
   17f30:	sbcs	r0, r0, ip
   17f34:	bcs	18024 <read_boolean_unary_expression@@Base+0x1c50>
   17f38:	mov	r0, #7
   17f3c:	orr	r0, r0, #131072	; 0x20000
   17f40:	adds	r0, r0, r5
   17f44:	adc	r1, r6, #0
   17f48:	subs	r0, r0, #4
   17f4c:	sbc	r1, r1, #0
   17f50:	mvn	r2, #0
   17f54:	and	r5, r1, r2
   17f58:	mov	r1, #16646144	; 0xfe0000
   17f5c:	orr	r1, r1, #-16777216	; 0xff000000
   17f60:	ldr	r4, [pc, #3096]	; 18b80 <read_boolean_unary_expression@@Base+0x27ac>
   17f64:	and	r6, r0, r1
   17f68:	ldr	r0, [pc, #3092]	; 18b84 <read_boolean_unary_expression@@Base+0x27b0>
   17f6c:	mov	r1, r6
   17f70:	add	r4, pc, r4
   17f74:	ldr	r0, [pc, r0]
   17f78:	bl	11eec <realloc@plt>
   17f7c:	str	r6, [r9]
   17f80:	str	r5, [r9, #4]
   17f84:	str	r0, [r4]
   17f88:	ldrb	r3, [r8]
   17f8c:	ldr	r6, [sl, #4]
   17f90:	ldr	r5, [pc, #3056]	; 18b88 <read_boolean_unary_expression@@Base+0x27b4>
   17f94:	mov	r2, r0
   17f98:	mov	r1, #0
   17f9c:	mov	r7, #161	; 0xa1
   17fa0:	ldr	r5, [pc, r5]
   17fa4:	strb	r1, [r2, r5]!
   17fa8:	strb	r7, [r2, #3]
   17fac:	strb	r1, [r2, #2]
   17fb0:	strb	r1, [r2, #1]
   17fb4:	adds	r2, r5, #4
   17fb8:	adc	ip, r6, #0
   17fbc:	mov	r7, #1
   17fc0:	cmp	r3, #1
   17fc4:	stm	sl, {r2, ip}
   17fc8:	beq	1804c <read_boolean_unary_expression@@Base+0x1c78>
   17fcc:	b	18224 <read_boolean_unary_expression@@Base+0x1e50>
   17fd0:	ldr	r0, [pc, #2948]	; 18b5c <read_boolean_unary_expression@@Base+0x2788>
   17fd4:	ldr	r0, [pc, r0]
   17fd8:	mov	r1, r0
   17fdc:	ldrb	r2, [r1, r5]!
   17fe0:	ldrb	r3, [r1, #1]
   17fe4:	ldrb	r7, [r1, #2]
   17fe8:	ldrb	r1, [r1, #3]
   17fec:	orr	r2, r2, r3, lsl #8
   17ff0:	orr	r2, r2, r7, lsl #16
   17ff4:	orr	r3, r2, r1, lsl #24
   17ff8:	adds	r2, r5, #4
   17ffc:	adc	ip, r6, #0
   18000:	cmp	r3, #-1593835520	; 0xa1000000
   18004:	stm	sl, {r2, ip}
   18008:	beq	181c4 <read_boolean_unary_expression@@Base+0x1df0>
   1800c:	mov	r7, #1
   18010:	cmn	r3, #1
   18014:	beq	18204 <read_boolean_unary_expression@@Base+0x1e30>
   18018:	ldr	r1, [pc, #2880]	; 18b60 <read_boolean_unary_expression@@Base+0x278c>
   1801c:	add	r1, pc, r1
   18020:	b	18904 <read_boolean_unary_expression@@Base+0x2530>
   18024:	ldr	r0, [pc, #2896]	; 18b7c <read_boolean_unary_expression@@Base+0x27a8>
   18028:	mov	r3, #0
   1802c:	mov	r4, #161	; 0xa1
   18030:	ldr	r0, [pc, r0]
   18034:	mov	r7, r0
   18038:	strb	r3, [r7, r5]!
   1803c:	strb	r4, [r7, #3]
   18040:	strb	r3, [r7, #2]
   18044:	strb	r3, [r7, #1]
   18048:	stm	sl, {r2, ip}
   1804c:	ldr	r4, [r9, #4]
   18050:	ldr	r1, [pc, #2868]	; 18b8c <read_boolean_unary_expression@@Base+0x27b8>
   18054:	adds	r3, r5, #8
   18058:	adc	r7, r6, #0
   1805c:	ldr	r1, [pc, r1]
   18060:	subs	r1, r1, r3
   18064:	sbcs	r1, r4, r7
   18068:	bcs	180f4 <read_boolean_unary_expression@@Base+0x1d20>
   1806c:	mov	r1, #7
   18070:	orr	r1, r1, #131072	; 0x20000
   18074:	adds	r1, r5, r1
   18078:	adc	r2, r6, #0
   1807c:	mvn	r3, #0
   18080:	and	r5, r2, r3
   18084:	mov	r2, #16646144	; 0xfe0000
   18088:	orr	r2, r2, #-16777216	; 0xff000000
   1808c:	ldr	r4, [pc, #2812]	; 18b90 <read_boolean_unary_expression@@Base+0x27bc>
   18090:	and	r6, r1, r2
   18094:	mov	r1, r6
   18098:	add	r4, pc, r4
   1809c:	bl	11eec <realloc@plt>
   180a0:	str	r6, [r9]
   180a4:	str	r5, [r9, #4]
   180a8:	str	r0, [r4]
   180ac:	ldrb	r1, [r8]
   180b0:	ldr	ip, [sl, #4]
   180b4:	ldr	r2, [pc, #2776]	; 18b94 <read_boolean_unary_expression@@Base+0x27c0>
   180b8:	mov	r7, r0
   180bc:	mov	r3, #9
   180c0:	ldr	r2, [pc, r2]
   180c4:	strb	r3, [r7, r2]!
   180c8:	mov	r3, #0
   180cc:	strb	r3, [r7, #3]
   180d0:	strb	r3, [r7, #2]
   180d4:	strb	r3, [r7, #1]
   180d8:	adds	r3, r2, #4
   180dc:	adc	r5, ip, #0
   180e0:	mov	r7, #1
   180e4:	cmp	r1, #1
   180e8:	stm	sl, {r3, r5}
   180ec:	beq	1811c <read_boolean_unary_expression@@Base+0x1d48>
   180f0:	b	1824c <read_boolean_unary_expression@@Base+0x1e78>
   180f4:	mov	r3, r0
   180f8:	mov	r1, #9
   180fc:	strb	r1, [r3, r2]!
   18100:	mov	r1, #0
   18104:	strb	r1, [r3, #3]
   18108:	strb	r1, [r3, #2]
   1810c:	strb	r1, [r3, #1]
   18110:	adds	r3, r2, #4
   18114:	adc	r5, ip, #0
   18118:	stm	sl, {r3, r5}
   1811c:	ldr	r6, [r9, #4]
   18120:	ldr	r4, [pc, #2672]	; 18b98 <read_boolean_unary_expression@@Base+0x27c4>
   18124:	adds	r1, r2, #8
   18128:	adc	r7, ip, #0
   1812c:	ldr	r4, [pc, r4]
   18130:	subs	r1, r4, r1
   18134:	sbcs	r1, r6, r7
   18138:	bcs	18610 <read_boolean_unary_expression@@Base+0x223c>
   1813c:	mov	r1, #7
   18140:	orr	r1, r1, #131072	; 0x20000
   18144:	adds	r1, r2, r1
   18148:	adc	r2, ip, #0
   1814c:	mvn	r3, #0
   18150:	and	r5, r2, r3
   18154:	mov	r2, #16646144	; 0xfe0000
   18158:	orr	r2, r2, #-16777216	; 0xff000000
   1815c:	ldr	r4, [pc, #2616]	; 18b9c <read_boolean_unary_expression@@Base+0x27c8>
   18160:	and	r6, r1, r2
   18164:	mov	r1, r6
   18168:	add	r4, pc, r4
   1816c:	bl	11eec <realloc@plt>
   18170:	str	r6, [r9]
   18174:	str	r5, [r9, #4]
   18178:	str	r0, [r4]
   1817c:	ldrb	r2, [r8]
   18180:	ldr	r5, [sl, #4]
   18184:	ldr	r3, [pc, #2580]	; 18ba0 <read_boolean_unary_expression@@Base+0x27cc>
   18188:	mov	r7, r0
   1818c:	mov	r1, #0
   18190:	ldr	r3, [pc, r3]
   18194:	adds	r6, r3, #4
   18198:	strb	r1, [r7, r3]!
   1819c:	str	r6, [sl]
   181a0:	strb	r1, [r7, #3]
   181a4:	strb	r1, [r7, #2]
   181a8:	strb	r1, [r7, #1]
   181ac:	adc	r1, r5, #0
   181b0:	mov	r7, #1
   181b4:	cmp	r2, #1
   181b8:	str	r1, [sl, #4]
   181bc:	bne	18274 <read_boolean_unary_expression@@Base+0x1ea0>
   181c0:	b	18638 <read_boolean_unary_expression@@Base+0x2264>
   181c4:	ldr	r3, [r0, r2]
   181c8:	adds	r4, r5, #8
   181cc:	adc	r7, r6, #0
   181d0:	cmp	r3, #9
   181d4:	stm	sl, {r4, r7}
   181d8:	bne	188fc <read_boolean_unary_expression@@Base+0x2528>
   181dc:	ldr	r3, [pc, #2444]	; 18b70 <read_boolean_unary_expression@@Base+0x279c>
   181e0:	adds	r4, r5, #20
   181e4:	adc	r7, r6, #0
   181e8:	add	r3, pc, r3
   181ec:	add	r6, r5, r0
   181f0:	ldrb	r3, [r3]
   181f4:	ldr	r6, [r6, #16]
   181f8:	stm	sl, {r4, r7}
   181fc:	eor	r3, r3, #1
   18200:	add	r7, r6, r3
   18204:	mov	r6, r0
   18208:	mov	r3, #0
   1820c:	strb	r3, [r6, r5]!
   18210:	mov	r5, #161	; 0xa1
   18214:	strb	r5, [r6, #3]
   18218:	strb	r3, [r6, #2]
   1821c:	strb	r3, [r6, #1]
   18220:	stm	sl, {r2, ip}
   18224:	mov	r3, r0
   18228:	mov	r1, #9
   1822c:	strb	r1, [r3, r2]!
   18230:	mov	r1, #0
   18234:	strb	r1, [r3, #3]
   18238:	strb	r1, [r3, #2]
   1823c:	strb	r1, [r3, #1]
   18240:	adds	r3, r2, #4
   18244:	adc	r5, ip, #0
   18248:	stm	sl, {r3, r5}
   1824c:	mov	r2, r0
   18250:	mov	r1, #0
   18254:	strb	r1, [r2, r3]!
   18258:	adds	r6, r3, #4
   1825c:	strb	r1, [r2, #3]
   18260:	strb	r1, [r2, #2]
   18264:	strb	r1, [r2, #1]
   18268:	adc	r1, r5, #0
   1826c:	str	r6, [sl]
   18270:	str	r1, [sl, #4]
   18274:	mov	r3, r0
   18278:	mov	r2, #0
   1827c:	strb	r2, [r3, r6]!
   18280:	strb	r2, [r3, #3]
   18284:	strb	r2, [r3, #2]
   18288:	strb	r2, [r3, #1]
   1828c:	adds	r2, r6, #4
   18290:	adc	r3, r1, #0
   18294:	strd	r2, [sl]
   18298:	lsr	r1, r7, #24
   1829c:	strb	r7, [r0, r2]!
   182a0:	lsr	r6, r7, #16
   182a4:	lsr	r5, r7, #8
   182a8:	strb	r1, [r0, #3]
   182ac:	strb	r6, [r0, #2]
   182b0:	strb	r5, [r0, #1]
   182b4:	ldrb	r0, [r8]
   182b8:	adds	r4, r2, #4
   182bc:	adc	r5, r3, #0
   182c0:	cmp	r0, #0
   182c4:	strd	r4, [sl]
   182c8:	beq	1837c <read_boolean_unary_expression@@Base+0x1fa8>
   182cc:	ldr	r9, [pc, #2284]	; 18bc0 <read_boolean_unary_expression@@Base+0x27ec>
   182d0:	adds	r0, r2, #8
   182d4:	adc	r1, r3, #0
   182d8:	add	r9, pc, r9
   182dc:	ldr	r7, [r9, #4]
   182e0:	ldr	r6, [pc, #2268]	; 18bc4 <read_boolean_unary_expression@@Base+0x27f0>
   182e4:	ldr	r6, [pc, r6]
   182e8:	subs	r0, r6, r0
   182ec:	sbcs	r0, r7, r1
   182f0:	bcs	18548 <read_boolean_unary_expression@@Base+0x2174>
   182f4:	mov	r0, #7
   182f8:	orr	r0, r0, #131072	; 0x20000
   182fc:	adds	r0, r2, r0
   18300:	adc	r1, r3, #0
   18304:	mvn	r2, #0
   18308:	and	r5, r1, r2
   1830c:	mov	r1, #16646144	; 0xfe0000
   18310:	orr	r1, r1, #-16777216	; 0xff000000
   18314:	ldr	r4, [pc, #2268]	; 18bf8 <read_boolean_unary_expression@@Base+0x2824>
   18318:	and	r6, r0, r1
   1831c:	ldr	r0, [pc, #2264]	; 18bfc <read_boolean_unary_expression@@Base+0x2828>
   18320:	mov	r1, r6
   18324:	add	r4, pc, r4
   18328:	ldr	r0, [pc, r0]
   1832c:	bl	11eec <realloc@plt>
   18330:	str	r6, [r9]
   18334:	str	r5, [r9, #4]
   18338:	str	r0, [r4]
   1833c:	ldrb	r1, [r8]
   18340:	ldr	r5, [sl, #4]
   18344:	ldr	r4, [pc, #2228]	; 18c00 <read_boolean_unary_expression@@Base+0x282c>
   18348:	mov	r3, r0
   1834c:	mov	r2, #0
   18350:	ldr	r4, [pc, r4]
   18354:	strb	r2, [r3, r4]!
   18358:	strb	r2, [r3, #3]
   1835c:	strb	r2, [r3, #2]
   18360:	strb	r2, [r3, #1]
   18364:	adds	r2, r4, #4
   18368:	adc	r3, r5, #0
   1836c:	cmp	r1, #0
   18370:	strd	r2, [sl]
   18374:	beq	183a8 <read_boolean_unary_expression@@Base+0x1fd4>
   18378:	b	18574 <read_boolean_unary_expression@@Base+0x21a0>
   1837c:	ldr	r0, [pc, #2104]	; 18bbc <read_boolean_unary_expression@@Base+0x27e8>
   18380:	adds	r2, r2, #8
   18384:	mov	r1, #0
   18388:	adc	r3, r3, #0
   1838c:	ldr	r0, [pc, r0]
   18390:	mov	r7, r0
   18394:	strb	r1, [r7, r4]!
   18398:	strb	r1, [r7, #3]
   1839c:	strb	r1, [r7, #2]
   183a0:	strb	r1, [r7, #1]
   183a4:	strd	r2, [sl]
   183a8:	mov	r7, r0
   183ac:	mov	r1, #0
   183b0:	strb	r1, [r7, r2]!
   183b4:	strb	r1, [r7, #3]
   183b8:	strb	r1, [r7, #2]
   183bc:	strb	r1, [r7, #1]
   183c0:	adds	r1, r2, #4
   183c4:	adc	r5, r3, #0
   183c8:	stm	sl, {r1, r5}
   183cc:	mov	r3, r0
   183d0:	mov	r2, #0
   183d4:	strb	r2, [r3, r1]!
   183d8:	strb	r2, [r3, #3]
   183dc:	strb	r2, [r3, #2]
   183e0:	strb	r2, [r3, #1]
   183e4:	adds	r2, r1, #4
   183e8:	adc	r3, r5, #0
   183ec:	strd	r2, [sl]
   183f0:	mov	r7, r0
   183f4:	mov	r1, #0
   183f8:	strb	r1, [r7, r2]!
   183fc:	strb	r1, [r7, #3]
   18400:	strb	r1, [r7, #2]
   18404:	strb	r1, [r7, #1]
   18408:	adds	r1, r2, #4
   1840c:	adc	r5, r3, #0
   18410:	stm	sl, {r1, r5}
   18414:	mov	r3, r0
   18418:	mov	r2, #0
   1841c:	strb	r2, [r3, r1]!
   18420:	adds	r4, r1, #4
   18424:	strb	r2, [r3, #3]
   18428:	strb	r2, [r3, #2]
   1842c:	strb	r2, [r3, #1]
   18430:	adc	r3, r5, #0
   18434:	str	r4, [sl]
   18438:	str	r3, [sl, #4]
   1843c:	mov	r2, r0
   18440:	mov	r1, #0
   18444:	strb	r1, [r2, r4]!
   18448:	strb	r1, [r2, #3]
   1844c:	strb	r1, [r2, #2]
   18450:	strb	r1, [r2, #1]
   18454:	adds	r2, r4, #4
   18458:	adc	r1, r3, #0
   1845c:	str	r2, [sl]
   18460:	str	r1, [sl, #4]
   18464:	mov	r3, r0
   18468:	mov	r4, #0
   1846c:	strb	r4, [r3, r2]!
   18470:	mov	r7, #163	; 0xa3
   18474:	strb	r7, [r3, #3]
   18478:	strb	r4, [r3, #2]
   1847c:	strb	r4, [r3, #1]
   18480:	ldrb	r7, [r8]
   18484:	adds	r6, r2, #4
   18488:	adc	r3, r1, #0
   1848c:	cmp	r7, #1
   18490:	str	r6, [sl]
   18494:	str	r3, [sl, #4]
   18498:	bne	1850c <read_boolean_unary_expression@@Base+0x2138>
   1849c:	ldr	r8, [pc, #1852]	; 18be0 <read_boolean_unary_expression@@Base+0x280c>
   184a0:	adds	lr, r2, #8
   184a4:	adc	ip, r1, #0
   184a8:	add	r8, pc, r8
   184ac:	ldr	r5, [r8, #4]
   184b0:	ldr	r7, [pc, #1836]	; 18be4 <read_boolean_unary_expression@@Base+0x2810>
   184b4:	ldr	r7, [pc, r7]
   184b8:	subs	r7, r7, lr
   184bc:	sbcs	r7, r5, ip
   184c0:	bcs	1850c <read_boolean_unary_expression@@Base+0x2138>
   184c4:	mov	r3, #7
   184c8:	orr	r3, r3, #131072	; 0x20000
   184cc:	adds	r2, r2, r3
   184d0:	adc	r1, r1, #0
   184d4:	mvn	r3, #0
   184d8:	and	r7, r1, r3
   184dc:	mov	r1, #16646144	; 0xfe0000
   184e0:	orr	r1, r1, #-16777216	; 0xff000000
   184e4:	ldr	r5, [pc, #1788]	; 18be8 <read_boolean_unary_expression@@Base+0x2814>
   184e8:	and	r6, r2, r1
   184ec:	mov	r1, r6
   184f0:	add	r5, pc, r5
   184f4:	bl	11eec <realloc@plt>
   184f8:	strd	r6, [r8]
   184fc:	str	r0, [r5]
   18500:	ldr	r3, [sl, #4]
   18504:	ldr	r6, [pc, #1760]	; 18bec <read_boolean_unary_expression@@Base+0x2818>
   18508:	ldr	r6, [pc, r6]
   1850c:	ldr	r0, [pc, #1756]	; 18bf0 <read_boolean_unary_expression@@Base+0x281c>
   18510:	ldr	r1, [pc, #1756]	; 18bf4 <read_boolean_unary_expression@@Base+0x2820>
   18514:	adds	r2, r6, #4
   18518:	add	r0, pc, r0
   1851c:	adc	r3, r3, #0
   18520:	ldr	r1, [pc, r1]
   18524:	strb	r4, [r1, r6]!
   18528:	strb	r4, [r1, #3]
   1852c:	strb	r4, [r1, #2]
   18530:	strb	r4, [r1, #1]
   18534:	mov	r1, #1
   18538:	strd	r2, [sl]
   1853c:	strb	r1, [r0]
   18540:	sub	sp, fp, #28
   18544:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18548:	ldr	r0, [pc, #1656]	; 18bc8 <read_boolean_unary_expression@@Base+0x27f4>
   1854c:	adds	r2, r2, #8
   18550:	mov	r1, #0
   18554:	adc	r3, r3, #0
   18558:	ldr	r0, [pc, r0]
   1855c:	mov	r7, r0
   18560:	strb	r1, [r7, r4]!
   18564:	strb	r1, [r7, #3]
   18568:	strb	r1, [r7, #2]
   1856c:	strb	r1, [r7, #1]
   18570:	strd	r2, [sl]
   18574:	ldr	r6, [r9, #4]
   18578:	ldr	r1, [pc, #1668]	; 18c04 <read_boolean_unary_expression@@Base+0x2830>
   1857c:	adds	ip, r4, #8
   18580:	adc	r7, r5, #0
   18584:	ldr	r1, [pc, r1]
   18588:	subs	r1, r1, ip
   1858c:	sbcs	r1, r6, r7
   18590:	bcs	186dc <read_boolean_unary_expression@@Base+0x2308>
   18594:	mov	r1, #7
   18598:	orr	r1, r1, #131072	; 0x20000
   1859c:	adds	r1, r4, r1
   185a0:	adc	r2, r5, #0
   185a4:	mvn	r3, #0
   185a8:	and	r5, r2, r3
   185ac:	mov	r2, #16646144	; 0xfe0000
   185b0:	orr	r2, r2, #-16777216	; 0xff000000
   185b4:	ldr	r6, [pc, #1612]	; 18c08 <read_boolean_unary_expression@@Base+0x2834>
   185b8:	and	r4, r1, r2
   185bc:	mov	r1, r4
   185c0:	add	r6, pc, r6
   185c4:	bl	11eec <realloc@plt>
   185c8:	str	r0, [r6]
   185cc:	strd	r4, [r9]
   185d0:	ldrb	r7, [r8]
   185d4:	ldr	r3, [sl, #4]
   185d8:	ldr	r2, [pc, #1580]	; 18c0c <read_boolean_unary_expression@@Base+0x2838>
   185dc:	mov	r6, r0
   185e0:	mov	r1, #0
   185e4:	ldr	r2, [pc, r2]
   185e8:	strb	r1, [r6, r2]!
   185ec:	strb	r1, [r6, #3]
   185f0:	strb	r1, [r6, #2]
   185f4:	strb	r1, [r6, #1]
   185f8:	adds	r1, r2, #4
   185fc:	adc	r5, r3, #0
   18600:	cmp	r7, #1
   18604:	stm	sl, {r1, r5}
   18608:	bne	183cc <read_boolean_unary_expression@@Base+0x1ff8>
   1860c:	b	18700 <read_boolean_unary_expression@@Base+0x232c>
   18610:	mov	r2, r0
   18614:	mov	r1, #0
   18618:	strb	r1, [r2, r3]!
   1861c:	adds	r6, r3, #4
   18620:	strb	r1, [r2, #3]
   18624:	strb	r1, [r2, #2]
   18628:	strb	r1, [r2, #1]
   1862c:	adc	r1, r5, #0
   18630:	str	r6, [sl]
   18634:	str	r1, [sl, #4]
   18638:	ldr	r4, [r9, #4]
   1863c:	ldr	r2, [pc, #1376]	; 18ba4 <read_boolean_unary_expression@@Base+0x27d0>
   18640:	adds	ip, r3, #8
   18644:	adc	r7, r5, #0
   18648:	ldr	r2, [pc, r2]
   1864c:	subs	r2, r2, ip
   18650:	sbcs	r2, r4, r7
   18654:	bcs	187a0 <read_boolean_unary_expression@@Base+0x23cc>
   18658:	mov	r1, #7
   1865c:	orr	r1, r1, #131072	; 0x20000
   18660:	adds	r1, r3, r1
   18664:	adc	r2, r5, #0
   18668:	mvn	r3, #0
   1866c:	and	r5, r2, r3
   18670:	mov	r2, #16646144	; 0xfe0000
   18674:	orr	r2, r2, #-16777216	; 0xff000000
   18678:	ldr	r4, [pc, #1320]	; 18ba8 <read_boolean_unary_expression@@Base+0x27d4>
   1867c:	and	r6, r1, r2
   18680:	mov	r1, r6
   18684:	add	r4, pc, r4
   18688:	bl	11eec <realloc@plt>
   1868c:	str	r6, [r9]
   18690:	str	r5, [r9, #4]
   18694:	str	r0, [r4]
   18698:	ldrb	r5, [r8]
   1869c:	ldr	r1, [sl, #4]
   186a0:	ldr	r6, [pc, #1284]	; 18bac <read_boolean_unary_expression@@Base+0x27d8>
   186a4:	mov	r3, r0
   186a8:	mov	r2, #0
   186ac:	mov	r7, #1
   186b0:	ldr	r6, [pc, r6]
   186b4:	strb	r2, [r3, r6]!
   186b8:	strb	r2, [r3, #3]
   186bc:	strb	r2, [r3, #2]
   186c0:	strb	r2, [r3, #1]
   186c4:	adds	r2, r6, #4
   186c8:	adc	r3, r1, #0
   186cc:	cmp	r5, #1
   186d0:	strd	r2, [sl]
   186d4:	bne	18298 <read_boolean_unary_expression@@Base+0x1ec4>
   186d8:	b	187c4 <read_boolean_unary_expression@@Base+0x23f0>
   186dc:	mov	r7, r0
   186e0:	mov	r1, #0
   186e4:	strb	r1, [r7, r2]!
   186e8:	strb	r1, [r7, #3]
   186ec:	strb	r1, [r7, #2]
   186f0:	strb	r1, [r7, #1]
   186f4:	adds	r1, r2, #4
   186f8:	adc	r5, r3, #0
   186fc:	stm	sl, {r1, r5}
   18700:	ldr	r4, [r9, #4]
   18704:	ldr	r6, [pc, #1284]	; 18c10 <read_boolean_unary_expression@@Base+0x283c>
   18708:	adds	r7, r2, #8
   1870c:	adc	ip, r3, #0
   18710:	ldr	r6, [pc, r6]
   18714:	subs	r7, r6, r7
   18718:	sbcs	r7, r4, ip
   1871c:	bcs	18838 <read_boolean_unary_expression@@Base+0x2464>
   18720:	mov	r1, #7
   18724:	orr	r1, r1, #131072	; 0x20000
   18728:	adds	r1, r2, r1
   1872c:	adc	r2, r3, #0
   18730:	mvn	r3, #0
   18734:	and	r5, r2, r3
   18738:	mov	r2, #16646144	; 0xfe0000
   1873c:	orr	r2, r2, #-16777216	; 0xff000000
   18740:	ldr	r4, [pc, #1228]	; 18c14 <read_boolean_unary_expression@@Base+0x2840>
   18744:	and	r6, r1, r2
   18748:	mov	r1, r6
   1874c:	add	r4, pc, r4
   18750:	bl	11eec <realloc@plt>
   18754:	str	r6, [r9]
   18758:	str	r5, [r9, #4]
   1875c:	str	r0, [r4]
   18760:	ldrb	r7, [r8]
   18764:	ldr	r5, [sl, #4]
   18768:	ldr	r1, [pc, #1192]	; 18c18 <read_boolean_unary_expression@@Base+0x2844>
   1876c:	mov	r3, r0
   18770:	mov	r2, #0
   18774:	ldr	r1, [pc, r1]
   18778:	strb	r2, [r3, r1]!
   1877c:	strb	r2, [r3, #3]
   18780:	strb	r2, [r3, #2]
   18784:	strb	r2, [r3, #1]
   18788:	adds	r2, r1, #4
   1878c:	adc	r3, r5, #0
   18790:	cmp	r7, #1
   18794:	strd	r2, [sl]
   18798:	bne	183f0 <read_boolean_unary_expression@@Base+0x201c>
   1879c:	b	1885c <read_boolean_unary_expression@@Base+0x2488>
   187a0:	mov	r3, r0
   187a4:	mov	r2, #0
   187a8:	strb	r2, [r3, r6]!
   187ac:	strb	r2, [r3, #3]
   187b0:	strb	r2, [r3, #2]
   187b4:	strb	r2, [r3, #1]
   187b8:	adds	r2, r6, #4
   187bc:	adc	r3, r1, #0
   187c0:	strd	r2, [sl]
   187c4:	ldr	r4, [r9, #4]
   187c8:	ldr	r5, [pc, #992]	; 18bb0 <read_boolean_unary_expression@@Base+0x27dc>
   187cc:	adds	lr, r6, #8
   187d0:	adc	ip, r1, #0
   187d4:	mov	r7, #1
   187d8:	ldr	r5, [pc, r5]
   187dc:	subs	r5, r5, lr
   187e0:	sbcs	r5, r4, ip
   187e4:	bcs	18298 <read_boolean_unary_expression@@Base+0x1ec4>
   187e8:	mov	r2, #7
   187ec:	orr	r2, r2, #131072	; 0x20000
   187f0:	adds	r2, r6, r2
   187f4:	adc	r1, r1, #0
   187f8:	mvn	r3, #0
   187fc:	and	r5, r1, r3
   18800:	mov	r1, #16646144	; 0xfe0000
   18804:	orr	r1, r1, #-16777216	; 0xff000000
   18808:	ldr	r4, [pc, #932]	; 18bb4 <read_boolean_unary_expression@@Base+0x27e0>
   1880c:	and	r6, r2, r1
   18810:	mov	r1, r6
   18814:	add	r4, pc, r4
   18818:	bl	11eec <realloc@plt>
   1881c:	str	r6, [r9]
   18820:	str	r5, [r9, #4]
   18824:	str	r0, [r4]
   18828:	ldr	r3, [sl, #4]
   1882c:	ldr	r2, [pc, #900]	; 18bb8 <read_boolean_unary_expression@@Base+0x27e4>
   18830:	ldr	r2, [pc, r2]
   18834:	b	18298 <read_boolean_unary_expression@@Base+0x1ec4>
   18838:	mov	r3, r0
   1883c:	mov	r2, #0
   18840:	strb	r2, [r3, r1]!
   18844:	strb	r2, [r3, #3]
   18848:	strb	r2, [r3, #2]
   1884c:	strb	r2, [r3, #1]
   18850:	adds	r2, r1, #4
   18854:	adc	r3, r5, #0
   18858:	strd	r2, [sl]
   1885c:	ldr	r4, [r9, #4]
   18860:	ldr	r6, [pc, #948]	; 18c1c <read_boolean_unary_expression@@Base+0x2848>
   18864:	adds	r7, r1, #8
   18868:	adc	ip, r5, #0
   1886c:	ldr	r6, [pc, r6]
   18870:	subs	r7, r6, r7
   18874:	sbcs	r7, r4, ip
   18878:	bcs	18924 <read_boolean_unary_expression@@Base+0x2550>
   1887c:	mov	r2, #7
   18880:	orr	r2, r2, #131072	; 0x20000
   18884:	adds	r1, r1, r2
   18888:	adc	r2, r5, #0
   1888c:	mvn	r3, #0
   18890:	and	r5, r2, r3
   18894:	mov	r2, #16646144	; 0xfe0000
   18898:	orr	r2, r2, #-16777216	; 0xff000000
   1889c:	ldr	r4, [pc, #892]	; 18c20 <read_boolean_unary_expression@@Base+0x284c>
   188a0:	and	r6, r1, r2
   188a4:	mov	r1, r6
   188a8:	add	r4, pc, r4
   188ac:	bl	11eec <realloc@plt>
   188b0:	str	r6, [r9]
   188b4:	str	r5, [r9, #4]
   188b8:	str	r0, [r4]
   188bc:	ldrb	r7, [r8]
   188c0:	ldr	r3, [sl, #4]
   188c4:	ldr	r2, [pc, #856]	; 18c24 <read_boolean_unary_expression@@Base+0x2850>
   188c8:	mov	r6, r0
   188cc:	mov	r1, #0
   188d0:	ldr	r2, [pc, r2]
   188d4:	strb	r1, [r6, r2]!
   188d8:	strb	r1, [r6, #3]
   188dc:	strb	r1, [r6, #2]
   188e0:	strb	r1, [r6, #1]
   188e4:	adds	r1, r2, #4
   188e8:	adc	r5, r3, #0
   188ec:	cmp	r7, #1
   188f0:	stm	sl, {r1, r5}
   188f4:	bne	18414 <read_boolean_unary_expression@@Base+0x2040>
   188f8:	b	18948 <read_boolean_unary_expression@@Base+0x2574>
   188fc:	ldr	r1, [pc, #616]	; 18b6c <read_boolean_unary_expression@@Base+0x2798>
   18900:	add	r1, pc, r1
   18904:	ldr	r0, [pc, #600]	; 18b64 <read_boolean_unary_expression@@Base+0x2790>
   18908:	ldr	r0, [pc, r0]
   1890c:	ldr	r0, [r0]
   18910:	ldr	r2, [pc, #592]	; 18b68 <read_boolean_unary_expression@@Base+0x2794>
   18914:	ldr	r2, [pc, r2]
   18918:	sub	sp, fp, #28
   1891c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18920:	b	11f88 <fprintf@plt>
   18924:	mov	r7, r0
   18928:	mov	r1, #0
   1892c:	strb	r1, [r7, r2]!
   18930:	strb	r1, [r7, #3]
   18934:	strb	r1, [r7, #2]
   18938:	strb	r1, [r7, #1]
   1893c:	adds	r1, r2, #4
   18940:	adc	r5, r3, #0
   18944:	stm	sl, {r1, r5}
   18948:	ldr	r4, [r9, #4]
   1894c:	ldr	r6, [pc, #724]	; 18c28 <read_boolean_unary_expression@@Base+0x2854>
   18950:	adds	r7, r2, #8
   18954:	adc	ip, r3, #0
   18958:	ldr	r6, [pc, r6]
   1895c:	subs	r7, r6, r7
   18960:	sbcs	r7, r4, ip
   18964:	bcs	189ec <read_boolean_unary_expression@@Base+0x2618>
   18968:	mov	r1, #7
   1896c:	orr	r1, r1, #131072	; 0x20000
   18970:	adds	r1, r2, r1
   18974:	adc	r2, r3, #0
   18978:	mvn	r3, #0
   1897c:	and	r5, r2, r3
   18980:	mov	r2, #16646144	; 0xfe0000
   18984:	orr	r2, r2, #-16777216	; 0xff000000
   18988:	ldr	r4, [pc, #668]	; 18c2c <read_boolean_unary_expression@@Base+0x2858>
   1898c:	and	r6, r1, r2
   18990:	mov	r1, r6
   18994:	add	r4, pc, r4
   18998:	bl	11eec <realloc@plt>
   1899c:	str	r6, [r9]
   189a0:	str	r5, [r9, #4]
   189a4:	str	r0, [r4]
   189a8:	ldrb	r2, [r8]
   189ac:	ldr	r5, [sl, #4]
   189b0:	ldr	r1, [pc, #632]	; 18c30 <read_boolean_unary_expression@@Base+0x285c>
   189b4:	mov	r7, r0
   189b8:	mov	r3, #0
   189bc:	ldr	r1, [pc, r1]
   189c0:	adds	r4, r1, #4
   189c4:	strb	r3, [r7, r1]!
   189c8:	str	r4, [sl]
   189cc:	strb	r3, [r7, #3]
   189d0:	strb	r3, [r7, #2]
   189d4:	strb	r3, [r7, #1]
   189d8:	adc	r3, r5, #0
   189dc:	cmp	r2, #1
   189e0:	str	r3, [sl, #4]
   189e4:	bne	1843c <read_boolean_unary_expression@@Base+0x2068>
   189e8:	b	18a14 <read_boolean_unary_expression@@Base+0x2640>
   189ec:	mov	r3, r0
   189f0:	mov	r2, #0
   189f4:	strb	r2, [r3, r1]!
   189f8:	adds	r4, r1, #4
   189fc:	strb	r2, [r3, #3]
   18a00:	strb	r2, [r3, #2]
   18a04:	strb	r2, [r3, #1]
   18a08:	adc	r3, r5, #0
   18a0c:	str	r4, [sl]
   18a10:	str	r3, [sl, #4]
   18a14:	ldr	r6, [r9, #4]
   18a18:	ldr	r2, [pc, #532]	; 18c34 <read_boolean_unary_expression@@Base+0x2860>
   18a1c:	adds	ip, r1, #8
   18a20:	adc	r7, r5, #0
   18a24:	ldr	r2, [pc, r2]
   18a28:	subs	r2, r2, ip
   18a2c:	sbcs	r2, r6, r7
   18a30:	bcs	18ab8 <read_boolean_unary_expression@@Base+0x26e4>
   18a34:	mov	r2, #7
   18a38:	orr	r2, r2, #131072	; 0x20000
   18a3c:	adds	r1, r1, r2
   18a40:	adc	r2, r5, #0
   18a44:	mvn	r3, #0
   18a48:	and	r5, r2, r3
   18a4c:	mov	r2, #16646144	; 0xfe0000
   18a50:	orr	r2, r2, #-16777216	; 0xff000000
   18a54:	ldr	r4, [pc, #368]	; 18bcc <read_boolean_unary_expression@@Base+0x27f8>
   18a58:	and	r6, r1, r2
   18a5c:	mov	r1, r6
   18a60:	add	r4, pc, r4
   18a64:	bl	11eec <realloc@plt>
   18a68:	str	r6, [r9]
   18a6c:	str	r5, [r9, #4]
   18a70:	str	r0, [r4]
   18a74:	ldrb	r7, [r8]
   18a78:	ldr	r3, [sl, #4]
   18a7c:	ldr	r4, [pc, #332]	; 18bd0 <read_boolean_unary_expression@@Base+0x27fc>
   18a80:	mov	r2, r0
   18a84:	mov	r1, #0
   18a88:	ldr	r4, [pc, r4]
   18a8c:	strb	r1, [r2, r4]!
   18a90:	strb	r1, [r2, #3]
   18a94:	strb	r1, [r2, #2]
   18a98:	strb	r1, [r2, #1]
   18a9c:	adds	r2, r4, #4
   18aa0:	adc	r1, r3, #0
   18aa4:	cmp	r7, #0
   18aa8:	str	r2, [sl]
   18aac:	str	r1, [sl, #4]
   18ab0:	beq	18464 <read_boolean_unary_expression@@Base+0x2090>
   18ab4:	b	18ae0 <read_boolean_unary_expression@@Base+0x270c>
   18ab8:	mov	r2, r0
   18abc:	mov	r1, #0
   18ac0:	strb	r1, [r2, r4]!
   18ac4:	strb	r1, [r2, #3]
   18ac8:	strb	r1, [r2, #2]
   18acc:	strb	r1, [r2, #1]
   18ad0:	adds	r2, r4, #4
   18ad4:	adc	r1, r3, #0
   18ad8:	str	r2, [sl]
   18adc:	str	r1, [sl, #4]
   18ae0:	ldr	r5, [r9, #4]
   18ae4:	ldr	r6, [pc, #232]	; 18bd4 <read_boolean_unary_expression@@Base+0x2800>
   18ae8:	adds	r7, r4, #8
   18aec:	adc	ip, r3, #0
   18af0:	ldr	r6, [pc, r6]
   18af4:	subs	r7, r6, r7
   18af8:	sbcs	r7, r5, ip
   18afc:	bcs	18464 <read_boolean_unary_expression@@Base+0x2090>
   18b00:	mov	r1, #7
   18b04:	orr	r1, r1, #131072	; 0x20000
   18b08:	adds	r1, r4, r1
   18b0c:	adc	r2, r3, #0
   18b10:	mvn	r3, #0
   18b14:	and	r7, r2, r3
   18b18:	mov	r2, #16646144	; 0xfe0000
   18b1c:	orr	r2, r2, #-16777216	; 0xff000000
   18b20:	ldr	r5, [pc, #176]	; 18bd8 <read_boolean_unary_expression@@Base+0x2804>
   18b24:	and	r6, r1, r2
   18b28:	mov	r1, r6
   18b2c:	add	r5, pc, r5
   18b30:	bl	11eec <realloc@plt>
   18b34:	strd	r6, [r9]
   18b38:	str	r0, [r5]
   18b3c:	ldr	r1, [sl, #4]
   18b40:	ldr	r2, [pc, #148]	; 18bdc <read_boolean_unary_expression@@Base+0x2808>
   18b44:	ldr	r2, [pc, r2]
   18b48:	b	18464 <read_boolean_unary_expression@@Base+0x2090>
   18b4c:	andeq	r3, r1, ip, asr #29
   18b50:	andeq	r3, r1, ip, asr #29
   18b54:	andeq	r3, r1, r0, asr #29
   18b58:	andeq	r3, r1, r4, lsr #29
   18b5c:	ldrdeq	r3, [r1], -r8
   18b60:	andeq	r2, r0, sl, ror ip
   18b64:			; <UNDEFINED> instruction: 0x000127b0
   18b68:	andeq	r3, r1, ip, lsl #9
   18b6c:	andeq	r2, r0, r3, ror #7
   18b70:	ldrdeq	r3, [r1], -r8
   18b74:	muleq	r1, r4, lr
   18b78:	andeq	r3, r1, r8, lsl #29
   18b7c:	andeq	r3, r1, ip, ror sp
   18b80:	andeq	r3, r1, ip, lsr lr
   18b84:	andeq	r3, r1, r8, lsr lr
   18b88:	andeq	r3, r1, r8, lsl lr
   18b8c:	andeq	r3, r1, r4, asr sp
   18b90:	andeq	r3, r1, r4, lsl sp
   18b94:	strdeq	r3, [r1], -r8
   18b98:	andeq	r3, r1, r4, lsl #25
   18b9c:	andeq	r3, r1, r4, asr #24
   18ba0:	andeq	r3, r1, r8, lsr #24
   18ba4:	andeq	r3, r1, r8, ror #14
   18ba8:	andeq	r3, r1, r8, lsr #14
   18bac:	andeq	r3, r1, r8, lsl #14
   18bb0:	ldrdeq	r3, [r1], -r8
   18bb4:	muleq	r1, r8, r5
   18bb8:	andeq	r3, r1, r8, lsl #11
   18bbc:	andeq	r3, r1, r0, lsr #20
   18bc0:	ldrdeq	r3, [r1], -r8
   18bc4:	andeq	r3, r1, ip, asr #21
   18bc8:	andeq	r3, r1, r4, asr r8
   18bcc:	andeq	r3, r1, ip, asr #6
   18bd0:	andeq	r3, r1, r0, lsr r3
   18bd4:	andeq	r3, r1, r0, asr #5
   18bd8:	andeq	r3, r1, r0, lsl #5
   18bdc:	andeq	r3, r1, r4, ror r2
   18be0:	andeq	r3, r1, r8, lsl #18
   18be4:	strdeq	r3, [r1], -ip
   18be8:			; <UNDEFINED> instruction: 0x000138bc
   18bec:			; <UNDEFINED> instruction: 0x000138b0
   18bf0:	andeq	r3, r1, r8, lsr #17
   18bf4:	andeq	r3, r1, ip, lsl #17
   18bf8:	andeq	r3, r1, r8, lsl #21
   18bfc:	andeq	r3, r1, r4, lsl #21
   18c00:	andeq	r3, r1, r8, ror #20
   18c04:	andeq	r3, r1, ip, lsr #16
   18c08:	andeq	r3, r1, ip, ror #15
   18c0c:	ldrdeq	r3, [r1], -r4
   18c10:	andeq	r3, r1, r0, lsr #13
   18c14:	andeq	r3, r1, r0, ror #12
   18c18:	andeq	r3, r1, r4, asr #12
   18c1c:	andeq	r3, r1, r4, asr #10
   18c20:	andeq	r3, r1, r4, lsl #10
   18c24:	andeq	r3, r1, r8, ror #9
   18c28:	andeq	r3, r1, r8, asr r4
   18c2c:	andeq	r3, r1, r8, lsl r4
   18c30:	strdeq	r3, [r1], -ip
   18c34:	andeq	r3, r1, ip, lsl #7
   18c38:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18c3c:	add	fp, sp, #28
   18c40:	sub	sp, sp, #4
   18c44:	ldr	r0, [pc, #496]	; 18e3c <read_boolean_unary_expression@@Base+0x2a68>
   18c48:	ldr	r0, [pc, r0]
   18c4c:	cmp	r0, #0
   18c50:	beq	18de4 <read_boolean_unary_expression@@Base+0x2a10>
   18c54:	ldr	sl, [pc, #484]	; 18e40 <read_boolean_unary_expression@@Base+0x2a6c>
   18c58:	mov	r5, #0
   18c5c:	mov	r1, #0
   18c60:	add	sl, pc, sl
   18c64:	ldrb	r0, [sl]
   18c68:	ldr	r8, [pc, #468]	; 18e44 <read_boolean_unary_expression@@Base+0x2a70>
   18c6c:	ldr	r4, [pc, #468]	; 18e48 <read_boolean_unary_expression@@Base+0x2a74>
   18c70:	cmp	r0, #1
   18c74:	add	r8, pc, r8
   18c78:	add	r4, pc, r4
   18c7c:	bne	18cf8 <read_boolean_unary_expression@@Base+0x2924>
   18c80:	ldr	r9, [pc, #452]	; 18e4c <read_boolean_unary_expression@@Base+0x2a78>
   18c84:	ldr	r0, [r8, #4]
   18c88:	ldr	r2, [pc, #448]	; 18e50 <read_boolean_unary_expression@@Base+0x2a7c>
   18c8c:	add	r9, pc, r9
   18c90:	mov	ip, r4
   18c94:	mov	r1, #1
   18c98:	ldr	r2, [pc, r2]
   18c9c:	ldr	r7, [r9, #4]
   18ca0:	ldr	r4, [pc, #428]	; 18e54 <read_boolean_unary_expression@@Base+0x2a80>
   18ca4:	adds	r3, r2, #8
   18ca8:	adc	r6, r0, #0
   18cac:	ldr	r4, [pc, r4]
   18cb0:	subs	r3, r4, r3
   18cb4:	mov	r4, ip
   18cb8:	sbcs	r3, r7, r6
   18cbc:	bcs	18cf8 <read_boolean_unary_expression@@Base+0x2924>
   18cc0:	mov	r1, #7
   18cc4:	orr	r1, r1, #131072	; 0x20000
   18cc8:	adds	r1, r2, r1
   18ccc:	adc	r7, r0, #0
   18cd0:	mov	r0, #16646144	; 0xfe0000
   18cd4:	orr	r0, r0, #-16777216	; 0xff000000
   18cd8:	and	r6, r1, r0
   18cdc:	ldr	r0, [pc, #372]	; 18e58 <read_boolean_unary_expression@@Base+0x2a84>
   18ce0:	mov	r1, r6
   18ce4:	ldr	r0, [pc, r0]
   18ce8:	bl	11eec <realloc@plt>
   18cec:	ldrb	r1, [sl]
   18cf0:	strd	r6, [r9]
   18cf4:	str	r0, [r4]
   18cf8:	ldr	r2, [pc, #348]	; 18e5c <read_boolean_unary_expression@@Base+0x2a88>
   18cfc:	ldr	r2, [pc, r2]
   18d00:	ldr	r0, [pc, #344]	; 18e60 <read_boolean_unary_expression@@Base+0x2a8c>
   18d04:	ldr	r0, [pc, r0]
   18d08:	ldr	r3, [r8, #4]
   18d0c:	mov	r7, r0
   18d10:	strb	r5, [r7, r2]!
   18d14:	adds	r2, r2, #8
   18d18:	adc	r3, r3, #0
   18d1c:	strb	r5, [r7, #5]
   18d20:	strb	r5, [r7, #3]
   18d24:	strb	r5, [r7, #2]
   18d28:	strb	r5, [r7, #1]
   18d2c:	strb	r5, [r7, #4]!
   18d30:	cmp	r1, #0
   18d34:	strb	r5, [r7, #3]
   18d38:	strb	r5, [r7, #2]
   18d3c:	strd	r2, [r8]
   18d40:	beq	18d68 <read_boolean_unary_expression@@Base+0x2994>
   18d44:	ldr	r3, [pc, #280]	; 18e64 <read_boolean_unary_expression@@Base+0x2a90>
   18d48:	mov	r1, r2
   18d4c:	mov	r2, #1
   18d50:	ldr	r3, [pc, r3]
   18d54:	bl	11ef8 <fwrite@plt>
   18d58:	ldr	r0, [pc, #264]	; 18e68 <read_boolean_unary_expression@@Base+0x2a94>
   18d5c:	ldr	r0, [pc, r0]
   18d60:	bl	11ea4 <free@plt>
   18d64:	b	18dac <read_boolean_unary_expression@@Base+0x29d8>
   18d68:	ldr	r1, [pc, #252]	; 18e6c <read_boolean_unary_expression@@Base+0x2a98>
   18d6c:	mov	r2, #4
   18d70:	ldr	r1, [pc, r1]
   18d74:	bl	12024 <msync@plt>
   18d78:	cmn	r0, #1
   18d7c:	beq	18df8 <read_boolean_unary_expression@@Base+0x2a24>
   18d80:	ldr	r1, [pc, #244]	; 18e7c <read_boolean_unary_expression@@Base+0x2aa8>
   18d84:	ldr	r1, [pc, r1]
   18d88:	ldr	r0, [pc, #240]	; 18e80 <read_boolean_unary_expression@@Base+0x2aac>
   18d8c:	ldr	r0, [pc, r0]
   18d90:	bl	12000 <munmap@plt>
   18d94:	ldr	r0, [pc, #232]	; 18e84 <read_boolean_unary_expression@@Base+0x2ab0>
   18d98:	mov	r1, #0
   18d9c:	str	r1, [r4]
   18da0:	add	r0, pc, r0
   18da4:	str	r1, [r0]
   18da8:	str	r1, [r0, #4]
   18dac:	ldr	r0, [pc, #212]	; 18e88 <read_boolean_unary_expression@@Base+0x2ab4>
   18db0:	ldr	r0, [pc, r0]
   18db4:	bl	11e98 <fflush@plt>
   18db8:	ldr	r0, [pc, #204]	; 18e8c <read_boolean_unary_expression@@Base+0x2ab8>
   18dbc:	ldr	r0, [pc, r0]
   18dc0:	bl	19338 <__gcov_flush@@Base+0x304>
   18dc4:	ldr	r0, [pc, #196]	; 18e90 <read_boolean_unary_expression@@Base+0x2abc>
   18dc8:	ldr	r0, [pc, r0]
   18dcc:	bl	11fe8 <fclose@plt>
   18dd0:	ldr	r0, [pc, #188]	; 18e94 <read_boolean_unary_expression@@Base+0x2ac0>
   18dd4:	mov	r1, #0
   18dd8:	str	r1, [r4]
   18ddc:	add	r0, pc, r0
   18de0:	str	r1, [r0]
   18de4:	ldr	r0, [pc, #172]	; 18e98 <read_boolean_unary_expression@@Base+0x2ac4>
   18de8:	ldr	r0, [pc, r0]
   18dec:	sub	sp, fp, #28
   18df0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18df4:	b	11ea4 <free@plt>
   18df8:	bl	11f94 <__errno_location@plt>
   18dfc:	ldr	r1, [pc, #108]	; 18e70 <read_boolean_unary_expression@@Base+0x2a9c>
   18e00:	mov	r6, r4
   18e04:	ldr	r1, [pc, r1]
   18e08:	ldr	r0, [r0]
   18e0c:	ldr	r4, [r1]
   18e10:	ldr	r5, [pc, #92]	; 18e74 <read_boolean_unary_expression@@Base+0x2aa0>
   18e14:	ldr	r5, [pc, r5]
   18e18:	bl	11f40 <strerror@plt>
   18e1c:	ldr	r1, [pc, #84]	; 18e78 <read_boolean_unary_expression@@Base+0x2aa4>
   18e20:	mov	r3, r0
   18e24:	mov	r0, r4
   18e28:	add	r1, pc, r1
   18e2c:	mov	r2, r5
   18e30:	mov	r4, r6
   18e34:	bl	11f88 <fprintf@plt>
   18e38:	b	18d80 <read_boolean_unary_expression@@Base+0x29ac>
   18e3c:	andeq	r3, r1, r0, ror #2
   18e40:	andeq	r3, r1, r4, asr #2
   18e44:	andeq	r3, r1, r4, asr #2
   18e48:	andeq	r3, r1, r4, lsr r1
   18e4c:	andeq	r3, r1, r4, lsr #2
   18e50:	andeq	r3, r1, r0, lsr #2
   18e54:	andeq	r3, r1, r4, lsl #2
   18e58:	andeq	r3, r1, r8, asr #1
   18e5c:	strheq	r3, [r1], -ip
   18e60:	andeq	r3, r1, r8, lsr #1
   18e64:	andeq	r3, r1, r8, asr r0
   18e68:	andeq	r3, r1, r0, asr r0
   18e6c:	andeq	r3, r1, r0, rrx
   18e70:			; <UNDEFINED> instruction: 0x000122b4
   18e74:	andeq	r2, r1, ip, lsl #31
   18e78:	andeq	r1, r0, r9, lsr #30
   18e7c:	andeq	r3, r1, ip, asr #32
   18e80:	andeq	r3, r1, r0, lsr #32
   18e84:	andeq	r3, r1, r0, lsr r0
   18e88:	strdeq	r2, [r1], -r8
   18e8c:	andeq	r2, r1, ip, lsl #6
   18e90:	andeq	r2, r1, r0, ror #31
   18e94:	andeq	r2, r1, ip, asr #31
   18e98:			; <UNDEFINED> instruction: 0x00012fb8
   18e9c:	push	{r4, sl, fp, lr}
   18ea0:	add	fp, sp, #8
   18ea4:	mov	r4, r0
   18ea8:	mov	r0, #12
   18eac:	bl	11f28 <malloc@plt>
   18eb0:	ldr	r1, [pc, #60]	; 18ef4 <read_boolean_unary_expression@@Base+0x2b20>
   18eb4:	mov	r2, #0
   18eb8:	add	r1, pc, r1
   18ebc:	stm	r0, {r1, r4}
   18ec0:	str	r2, [r0, #8]
   18ec4:	ldr	r1, [pc, #44]	; 18ef8 <read_boolean_unary_expression@@Base+0x2b24>
   18ec8:	ldr	r1, [pc, r1]
   18ecc:	mov	r2, r1
   18ed0:	ldr	r3, [r2], #4
   18ed4:	ldr	r4, [r2]
   18ed8:	cmp	r3, #0
   18edc:	mov	r3, r2
   18ee0:	addne	r3, r4, #8
   18ee4:	moveq	r2, r1
   18ee8:	str	r0, [r3]
   18eec:	str	r0, [r2]
   18ef0:	pop	{r4, sl, fp, pc}
   18ef4:	andeq	r2, r1, ip, lsl #30
   18ef8:	andeq	r2, r1, ip, ror #3
   18efc:	push	{r4, r5, fp, lr}
   18f00:	add	fp, sp, #8
   18f04:	ldr	r0, [pc, #64]	; 18f4c <read_boolean_unary_expression@@Base+0x2b78>
   18f08:	ldr	r0, [pc, r0]
   18f0c:	ldr	r4, [r0]
   18f10:	cmp	r4, #0
   18f14:	beq	18f48 <read_boolean_unary_expression@@Base+0x2b74>
   18f18:	ldr	r5, [pc, #48]	; 18f50 <read_boolean_unary_expression@@Base+0x2b7c>
   18f1c:	add	r5, pc, r5
   18f20:	b	18f30 <read_boolean_unary_expression@@Base+0x2b5c>
   18f24:	ldr	r4, [r4, #8]
   18f28:	cmp	r4, #0
   18f2c:	beq	18f48 <read_boolean_unary_expression@@Base+0x2b74>
   18f30:	ldr	r0, [r4]
   18f34:	cmp	r0, r5
   18f38:	bne	18f24 <read_boolean_unary_expression@@Base+0x2b50>
   18f3c:	ldr	r0, [r4, #4]
   18f40:	blx	r0
   18f44:	b	18f24 <read_boolean_unary_expression@@Base+0x2b50>
   18f48:	pop	{r4, r5, fp, pc}
   18f4c:	andeq	r2, r1, ip, lsr #3
   18f50:	andeq	r2, r1, r8, lsr #29
   18f54:	push	{r4, r5, r6, r7, fp, lr}
   18f58:	add	fp, sp, #16
   18f5c:	ldr	r4, [pc, #104]	; 18fcc <read_boolean_unary_expression@@Base+0x2bf8>
   18f60:	ldr	r4, [pc, r4]
   18f64:	ldr	r0, [r4]
   18f68:	cmp	r0, #0
   18f6c:	beq	18fc8 <read_boolean_unary_expression@@Base+0x2bf4>
   18f70:	ldr	r5, [pc, #88]	; 18fd0 <read_boolean_unary_expression@@Base+0x2bfc>
   18f74:	mov	r6, #0
   18f78:	add	r5, pc, r5
   18f7c:	b	18fb0 <read_boolean_unary_expression@@Base+0x2bdc>
   18f80:	ldr	r1, [r4]
   18f84:	cmp	r0, r1
   18f88:	streq	r7, [r4]
   18f8c:	ldr	r1, [r4, #4]
   18f90:	cmp	r0, r1
   18f94:	streq	r6, [r4, #4]
   18f98:	cmp	r6, #0
   18f9c:	strne	r7, [r6, #8]
   18fa0:	bl	11ea4 <free@plt>
   18fa4:	mov	r0, r7
   18fa8:	cmp	r7, #0
   18fac:	beq	18fc8 <read_boolean_unary_expression@@Base+0x2bf4>
   18fb0:	ldr	r1, [r0]
   18fb4:	ldr	r7, [r0, #8]
   18fb8:	cmp	r1, r5
   18fbc:	beq	18f80 <read_boolean_unary_expression@@Base+0x2bac>
   18fc0:	mov	r6, r0
   18fc4:	b	18fa4 <read_boolean_unary_expression@@Base+0x2bd0>
   18fc8:	pop	{r4, r5, r6, r7, fp, pc}
   18fcc:	andeq	r2, r1, r4, asr r1
   18fd0:	andeq	r2, r1, ip, asr #28
   18fd4:	push	{r4, sl, fp, lr}
   18fd8:	add	fp, sp, #8
   18fdc:	mov	r4, r0
   18fe0:	mov	r0, #12
   18fe4:	bl	11f28 <malloc@plt>
   18fe8:	ldr	r1, [pc, #60]	; 1902c <read_boolean_unary_expression@@Base+0x2c58>
   18fec:	mov	r2, #0
   18ff0:	add	r1, pc, r1
   18ff4:	stm	r0, {r1, r4}
   18ff8:	str	r2, [r0, #8]
   18ffc:	ldr	r1, [pc, #44]	; 19030 <read_boolean_unary_expression@@Base+0x2c5c>
   19000:	ldr	r1, [pc, r1]
   19004:	mov	r2, r1
   19008:	ldr	r3, [r2], #4
   1900c:	ldr	r4, [r2]
   19010:	cmp	r3, #0
   19014:	mov	r3, r2
   19018:	addne	r3, r4, #8
   1901c:	moveq	r2, r1
   19020:	str	r0, [r3]
   19024:	str	r0, [r2]
   19028:	pop	{r4, sl, fp, pc}
   1902c:	ldrdeq	r2, [r1], -r4
   19030:	strheq	r2, [r1], -r0

00019034 <__gcov_flush@@Base>:
   19034:	push	{r4, sl, fp, lr}
   19038:	add	fp, sp, #8
   1903c:	ldr	r0, [pc, #36]	; 19068 <__gcov_flush@@Base+0x34>
   19040:	ldr	r0, [pc, r0]
   19044:	ldr	r4, [r0]
   19048:	cmp	r4, #0
   1904c:	beq	19064 <__gcov_flush@@Base+0x30>
   19050:	ldr	r0, [r4, #4]
   19054:	blx	r0
   19058:	ldr	r4, [r4, #8]
   1905c:	cmp	r4, #0
   19060:	bne	19050 <__gcov_flush@@Base+0x1c>
   19064:	pop	{r4, sl, fp, pc}
   19068:	andeq	r2, r1, r0, ror r0
   1906c:	push	{r4, r5, r6, r7, fp, lr}
   19070:	add	fp, sp, #16
   19074:	ldr	r4, [pc, #104]	; 190e4 <__gcov_flush@@Base+0xb0>
   19078:	ldr	r4, [pc, r4]
   1907c:	ldr	r0, [r4]
   19080:	cmp	r0, #0
   19084:	beq	190e0 <__gcov_flush@@Base+0xac>
   19088:	ldr	r5, [pc, #88]	; 190e8 <__gcov_flush@@Base+0xb4>
   1908c:	mov	r6, #0
   19090:	add	r5, pc, r5
   19094:	b	190c8 <__gcov_flush@@Base+0x94>
   19098:	ldr	r1, [r4]
   1909c:	cmp	r0, r1
   190a0:	streq	r7, [r4]
   190a4:	ldr	r1, [r4, #4]
   190a8:	cmp	r0, r1
   190ac:	streq	r6, [r4, #4]
   190b0:	cmp	r6, #0
   190b4:	strne	r7, [r6, #8]
   190b8:	bl	11ea4 <free@plt>
   190bc:	mov	r0, r7
   190c0:	cmp	r7, #0
   190c4:	beq	190e0 <__gcov_flush@@Base+0xac>
   190c8:	ldr	r1, [r0]
   190cc:	ldr	r7, [r0, #8]
   190d0:	cmp	r1, r5
   190d4:	beq	19098 <__gcov_flush@@Base+0x64>
   190d8:	mov	r6, r0
   190dc:	b	190bc <__gcov_flush@@Base+0x88>
   190e0:	pop	{r4, r5, r6, r7, fp, pc}
   190e4:	andeq	r2, r1, r8, lsr r0
   190e8:	andeq	r2, r1, r4, lsr sp
   190ec:	push	{r4, r5, r6, sl, fp, lr}
   190f0:	add	fp, sp, #16
   190f4:	ldr	r6, [pc, #228]	; 191e0 <__gcov_flush@@Base+0x1ac>
   190f8:	mov	r4, r1
   190fc:	cmp	r0, #0
   19100:	add	r6, pc, r6
   19104:	beq	19150 <__gcov_flush@@Base+0x11c>
   19108:	mov	r5, r0
   1910c:	mov	r0, #12
   19110:	bl	11f28 <malloc@plt>
   19114:	mov	r1, #0
   19118:	str	r6, [r0]
   1911c:	str	r5, [r0, #4]
   19120:	str	r1, [r0, #8]
   19124:	ldr	r1, [pc, #184]	; 191e4 <__gcov_flush@@Base+0x1b0>
   19128:	ldr	r1, [pc, r1]
   1912c:	mov	r2, r1
   19130:	ldr	r3, [r2], #4
   19134:	ldr	r5, [r2]
   19138:	cmp	r3, #0
   1913c:	mov	r3, r2
   19140:	addne	r3, r5, #8
   19144:	moveq	r2, r1
   19148:	str	r0, [r3]
   1914c:	str	r0, [r2]
   19150:	cmp	r4, #0
   19154:	beq	1919c <__gcov_flush@@Base+0x168>
   19158:	mov	r0, #12
   1915c:	bl	11f28 <malloc@plt>
   19160:	mov	r1, #0
   19164:	str	r6, [r0]
   19168:	str	r4, [r0, #4]
   1916c:	str	r1, [r0, #8]
   19170:	ldr	r1, [pc, #112]	; 191e8 <__gcov_flush@@Base+0x1b4>
   19174:	ldr	r1, [pc, r1]
   19178:	mov	r2, r1
   1917c:	ldr	r3, [r2], #4
   19180:	ldr	r6, [r2]
   19184:	cmp	r3, #0
   19188:	mov	r3, r2
   1918c:	addne	r3, r6, #8
   19190:	moveq	r2, r1
   19194:	str	r0, [r3]
   19198:	str	r0, [r2]
   1919c:	ldr	r1, [pc, #72]	; 191ec <__gcov_flush@@Base+0x1b8>
   191a0:	add	r1, pc, r1
   191a4:	ldrb	r0, [r1]
   191a8:	cmp	r0, #0
   191ac:	popne	{r4, r5, r6, sl, fp, pc}
   191b0:	ldr	r0, [pc, #56]	; 191f0 <__gcov_flush@@Base+0x1bc>
   191b4:	mov	r2, #1
   191b8:	strb	r2, [r1]
   191bc:	add	r0, pc, r0
   191c0:	bl	1978c <__libc_csu_fini@@Base+0x4>
   191c4:	ldr	r0, [pc, #40]	; 191f4 <__gcov_flush@@Base+0x1c0>
   191c8:	add	r0, pc, r0
   191cc:	bl	1978c <__libc_csu_fini@@Base+0x4>
   191d0:	ldr	r0, [pc, #32]	; 191f8 <__gcov_flush@@Base+0x1c4>
   191d4:	add	r0, pc, r0
   191d8:	pop	{r4, r5, r6, sl, fp, lr}
   191dc:	b	1978c <__libc_csu_fini@@Base+0x4>
   191e0:	andeq	r2, r1, r4, asr #25
   191e4:	andeq	r1, r1, ip, lsl #31
   191e8:	andeq	r1, r1, ip, lsr pc
   191ec:	andeq	r2, r1, r8, lsr #24
   191f0:			; <UNDEFINED> instruction: 0xfffffea8
   191f4:			; <UNDEFINED> instruction: 0xfffffd84
   191f8:			; <UNDEFINED> instruction: 0xfffffd20
   191fc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   19200:	add	fp, sp, #24
   19204:	ldr	r7, [pc, #68]	; 19250 <__gcov_flush@@Base+0x21c>
   19208:	mov	r4, r0
   1920c:	mov	r5, #1
   19210:	mov	r8, #0
   19214:	ldr	r7, [pc, r7]
   19218:	mov	r6, #47	; 0x2f
   1921c:	b	19238 <__gcov_flush@@Base+0x204>
   19220:	strb	r8, [r4, r5]
   19224:	ldr	r1, [r7]
   19228:	mov	r0, r4
   1922c:	bl	11fac <mkdir@plt>
   19230:	strb	r6, [r4, r5]
   19234:	add	r5, r5, #1
   19238:	ldrb	r0, [r4, r5]
   1923c:	cmp	r0, #47	; 0x2f
   19240:	beq	19220 <__gcov_flush@@Base+0x1ec>
   19244:	cmp	r0, #0
   19248:	bne	19234 <__gcov_flush@@Base+0x200>
   1924c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19250:	muleq	r1, r8, lr
   19254:	ldr	r0, [pc, #8]	; 19264 <__gcov_flush@@Base+0x230>
   19258:	ldr	r0, [pc, r0]
   1925c:	ldr	r0, [r0]
   19260:	bx	lr
   19264:	andeq	r1, r1, r4, asr lr
   19268:	ldr	r1, [pc, #8]	; 19278 <__gcov_flush@@Base+0x244>
   1926c:	ldr	r1, [pc, r1]
   19270:	str	r0, [r1]
   19274:	bx	lr
   19278:	andeq	r1, r1, r0, asr #28
   1927c:	push	{r4, r5, r6, sl, fp, lr}
   19280:	add	fp, sp, #16
   19284:	sub	sp, sp, #392	; 0x188
   19288:	mov	r6, sp
   1928c:	mov	r5, r0
   19290:	mov	r0, r6
   19294:	mov	r4, r1
   19298:	bl	11ed4 <uname@plt>
   1929c:	cmp	r0, #0
   192a0:	bmi	192b8 <__gcov_flush@@Base+0x284>
   192a4:	add	r1, r6, #65	; 0x41
   192a8:	mov	r0, r5
   192ac:	mov	r2, r4
   192b0:	bl	11fc4 <strncpy@plt>
   192b4:	mov	r0, #0
   192b8:	sub	sp, fp, #16
   192bc:	pop	{r4, r5, r6, sl, fp, pc}
   192c0:	push	{r4, r5, r6, sl, fp, lr}
   192c4:	add	fp, sp, #16
   192c8:	sub	sp, sp, #32
   192cc:	mov	r4, #0
   192d0:	str	r4, [sp, #8]
   192d4:	strh	r4, [sp, #2]
   192d8:	mov	r5, r0
   192dc:	str	r4, [sp, #12]
   192e0:	str	r4, [sp, #16]
   192e4:	str	r4, [sp, #20]
   192e8:	bl	11f58 <getpid@plt>
   192ec:	mov	r6, sp
   192f0:	str	r0, [sp, #24]
   192f4:	mov	r0, #1
   192f8:	strh	r0, [sp]
   192fc:	mov	r0, r5
   19300:	mov	r1, #14
   19304:	mov	r2, r6
   19308:	bl	1200c <fcntl64@plt>
   1930c:	cmn	r0, #1
   19310:	bne	1932c <__gcov_flush@@Base+0x2f8>
   19314:	bl	11f94 <__errno_location@plt>
   19318:	ldr	r0, [r0]
   1931c:	cmp	r0, #4
   19320:	beq	192fc <__gcov_flush@@Base+0x2c8>
   19324:	cmp	r0, #37	; 0x25
   19328:	mvneq	r4, #0
   1932c:	mov	r0, r4
   19330:	sub	sp, fp, #16
   19334:	pop	{r4, r5, r6, sl, fp, pc}
   19338:	push	{r4, r5, r6, sl, fp, lr}
   1933c:	add	fp, sp, #16
   19340:	sub	sp, sp, #32
   19344:	mov	r4, #0
   19348:	str	r4, [sp, #8]
   1934c:	strh	r4, [sp, #2]
   19350:	mov	r5, r0
   19354:	str	r4, [sp, #12]
   19358:	str	r4, [sp, #16]
   1935c:	str	r4, [sp, #20]
   19360:	bl	11f58 <getpid@plt>
   19364:	mov	r6, sp
   19368:	str	r0, [sp, #24]
   1936c:	mov	r0, #2
   19370:	strh	r0, [sp]
   19374:	mov	r0, r5
   19378:	mov	r1, #14
   1937c:	mov	r2, r6
   19380:	bl	1200c <fcntl64@plt>
   19384:	cmn	r0, #1
   19388:	bne	193a4 <__gcov_flush@@Base+0x370>
   1938c:	bl	11f94 <__errno_location@plt>
   19390:	ldr	r0, [r0]
   19394:	cmp	r0, #4
   19398:	beq	19374 <__gcov_flush@@Base+0x340>
   1939c:	cmp	r0, #37	; 0x25
   193a0:	mvneq	r4, #0
   193a4:	mov	r0, r4
   193a8:	sub	sp, fp, #16
   193ac:	pop	{r4, r5, r6, sl, fp, pc}
   193b0:	push	{r4, r5, r6, sl, fp, lr}
   193b4:	add	fp, sp, #16
   193b8:	sub	sp, sp, #32
   193bc:	bl	11fdc <fileno@plt>
   193c0:	mov	r4, #0
   193c4:	str	r4, [sp, #8]
   193c8:	strh	r4, [sp, #2]
   193cc:	mov	r5, r0
   193d0:	str	r4, [sp, #12]
   193d4:	str	r4, [sp, #16]
   193d8:	str	r4, [sp, #20]
   193dc:	bl	11f58 <getpid@plt>
   193e0:	mov	r6, sp
   193e4:	str	r0, [sp, #24]
   193e8:	mov	r0, #1
   193ec:	strh	r0, [sp]
   193f0:	mov	r0, r5
   193f4:	mov	r1, #14
   193f8:	mov	r2, r6
   193fc:	bl	1200c <fcntl64@plt>
   19400:	cmn	r0, #1
   19404:	bne	19420 <__gcov_flush@@Base+0x3ec>
   19408:	bl	11f94 <__errno_location@plt>
   1940c:	ldr	r0, [r0]
   19410:	cmp	r0, #4
   19414:	beq	193f0 <__gcov_flush@@Base+0x3bc>
   19418:	cmp	r0, #37	; 0x25
   1941c:	mvneq	r4, #0
   19420:	mov	r0, r4
   19424:	sub	sp, fp, #16
   19428:	pop	{r4, r5, r6, sl, fp, pc}
   1942c:	push	{r4, r5, r6, sl, fp, lr}
   19430:	add	fp, sp, #16
   19434:	sub	sp, sp, #32
   19438:	bl	11fdc <fileno@plt>
   1943c:	mov	r4, #0
   19440:	str	r4, [sp, #8]
   19444:	strh	r4, [sp, #2]
   19448:	mov	r5, r0
   1944c:	str	r4, [sp, #12]
   19450:	str	r4, [sp, #16]
   19454:	str	r4, [sp, #20]
   19458:	bl	11f58 <getpid@plt>
   1945c:	mov	r6, sp
   19460:	str	r0, [sp, #24]
   19464:	mov	r0, #2
   19468:	strh	r0, [sp]
   1946c:	mov	r0, r5
   19470:	mov	r1, #14
   19474:	mov	r2, r6
   19478:	bl	1200c <fcntl64@plt>
   1947c:	cmn	r0, #1
   19480:	bne	1949c <__gcov_flush@@Base+0x468>
   19484:	bl	11f94 <__errno_location@plt>
   19488:	ldr	r0, [r0]
   1948c:	cmp	r0, #4
   19490:	beq	1946c <__gcov_flush@@Base+0x438>
   19494:	cmp	r0, #37	; 0x25
   19498:	mvneq	r4, #0
   1949c:	mov	r0, r4
   194a0:	sub	sp, fp, #16
   194a4:	pop	{r4, r5, r6, sl, fp, pc}
   194a8:	push	{r4, r5, fp, lr}
   194ac:	add	fp, sp, #8
   194b0:	sub	sp, sp, #32
   194b4:	mov	r2, #182	; 0xb6
   194b8:	orr	r2, r2, #256	; 0x100
   194bc:	mov	r1, #66	; 0x42
   194c0:	bl	11f04 <open64@plt>
   194c4:	cmp	r0, #0
   194c8:	bmi	19544 <__gcov_flush@@Base+0x510>
   194cc:	mov	r4, r0
   194d0:	mov	r0, #0
   194d4:	str	r0, [sp, #8]
   194d8:	strh	r0, [sp, #2]
   194dc:	str	r0, [sp, #12]
   194e0:	str	r0, [sp, #16]
   194e4:	str	r0, [sp, #20]
   194e8:	bl	11f58 <getpid@plt>
   194ec:	mov	r5, sp
   194f0:	str	r0, [sp, #24]
   194f4:	mov	r0, #1
   194f8:	strh	r0, [sp]
   194fc:	mov	r0, r4
   19500:	mov	r1, #14
   19504:	mov	r2, r5
   19508:	bl	1200c <fcntl64@plt>
   1950c:	cmn	r0, #1
   19510:	bne	1952c <__gcov_flush@@Base+0x4f8>
   19514:	bl	11f94 <__errno_location@plt>
   19518:	ldr	r0, [r0]
   1951c:	cmp	r0, #4
   19520:	beq	194fc <__gcov_flush@@Base+0x4c8>
   19524:	cmp	r0, #37	; 0x25
   19528:	beq	19550 <__gcov_flush@@Base+0x51c>
   1952c:	ldr	r1, [pc, #76]	; 19580 <__gcov_flush@@Base+0x54c>
   19530:	mov	r0, r4
   19534:	add	r1, pc, r1
   19538:	bl	11e68 <fdopen@plt>
   1953c:	sub	sp, fp, #8
   19540:	pop	{r4, r5, fp, pc}
   19544:	mov	r0, #0
   19548:	sub	sp, fp, #8
   1954c:	pop	{r4, r5, fp, pc}
   19550:	ldr	r1, [pc, #28]	; 19574 <__gcov_flush@@Base+0x540>
   19554:	ldr	r2, [pc, #28]	; 19578 <__gcov_flush@@Base+0x544>
   19558:	ldr	r0, [pc, #28]	; 1957c <__gcov_flush@@Base+0x548>
   1955c:	add	r1, pc, r1
   19560:	add	r2, pc, r2
   19564:	ldr	r0, [pc, r0]
   19568:	ldr	r0, [r0]
   1956c:	bl	11f88 <fprintf@plt>
   19570:	b	1952c <__gcov_flush@@Base+0x4f8>
   19574:	andeq	r1, r0, r6, lsl r8
   19578:	andeq	r1, r0, fp, asr r8
   1957c:	andeq	r1, r1, r4, asr fp
   19580:	muleq	r0, ip, r6
   19584:	push	{r4, r5, r6, sl, fp, lr}
   19588:	add	fp, sp, #16
   1958c:	mov	r6, r0
   19590:	ldr	r0, [pc, #120]	; 19610 <__gcov_flush@@Base+0x5dc>
   19594:	mov	r4, r1
   19598:	add	r0, pc, r0
   1959c:	bl	11f10 <getenv@plt>
   195a0:	mov	r5, r0
   195a4:	ldr	r0, [pc, #104]	; 19614 <__gcov_flush@@Base+0x5e0>
   195a8:	add	r0, pc, r0
   195ac:	bl	11f10 <getenv@plt>
   195b0:	mov	r1, #0
   195b4:	str	r1, [r4]
   195b8:	str	r1, [r6]
   195bc:	cmp	r5, #0
   195c0:	ldrbne	r2, [r5]
   195c4:	cmpne	r2, #0
   195c8:	bne	195d4 <__gcov_flush@@Base+0x5a0>
   195cc:	mov	r0, r1
   195d0:	pop	{r4, r5, r6, sl, fp, pc}
   195d4:	cmp	r0, #0
   195d8:	beq	195f0 <__gcov_flush@@Base+0x5bc>
   195dc:	mov	r1, #0
   195e0:	mov	r2, #10
   195e4:	bl	11e80 <strtol@plt>
   195e8:	bic	r0, r0, r0, asr #31
   195ec:	b	195f4 <__gcov_flush@@Base+0x5c0>
   195f0:	mov	r0, #0
   195f4:	str	r0, [r6]
   195f8:	mov	r0, r5
   195fc:	bl	11f70 <strlen@plt>
   19600:	mov	r1, r5
   19604:	str	r0, [r4]
   19608:	mov	r0, r1
   1960c:	pop	{r4, r5, r6, sl, fp, pc}
   19610:	andeq	r1, r0, r1, asr r8
   19614:	andeq	r1, r0, sp, asr #16
   19618:	push	{r4, r5, r6, r7, fp, lr}
   1961c:	add	fp, sp, #16
   19620:	mov	r6, r0
   19624:	ldr	r0, [fp, #8]
   19628:	mov	r5, r3
   1962c:	mov	r7, r2
   19630:	mov	r4, r1
   19634:	cmp	r0, #1
   19638:	blt	19670 <__gcov_flush@@Base+0x63c>
   1963c:	add	r1, r4, #1
   19640:	mov	r2, #0
   19644:	b	1965c <__gcov_flush@@Base+0x628>
   19648:	add	r2, r2, #1
   1964c:	mov	r4, r1
   19650:	add	r1, r1, #1
   19654:	cmp	r2, r0
   19658:	bge	19670 <__gcov_flush@@Base+0x63c>
   1965c:	ldrb	r3, [r1]
   19660:	cmp	r3, #47	; 0x2f
   19664:	beq	19648 <__gcov_flush@@Base+0x614>
   19668:	cmp	r3, #0
   1966c:	bne	19650 <__gcov_flush@@Base+0x61c>
   19670:	mov	r0, r6
   19674:	mov	r1, r7
   19678:	mov	r2, r5
   1967c:	bl	11eb0 <memcpy@plt>
   19680:	add	r0, r5, r7
   19684:	ldrb	r0, [r0, #-1]
   19688:	cmp	r0, #47	; 0x2f
   1968c:	movne	r0, #47	; 0x2f
   19690:	strbne	r0, [r6, r5]
   19694:	mov	r0, r4
   19698:	addne	r5, r5, #1
   1969c:	add	r5, r6, r5
   196a0:	bl	11f70 <strlen@plt>
   196a4:	add	r2, r0, #1
   196a8:	mov	r0, r5
   196ac:	mov	r1, r4
   196b0:	pop	{r4, r5, r6, r7, fp, lr}
   196b4:	b	11eb0 <memcpy@plt>
   196b8:	mov	r1, #47	; 0x2f
   196bc:	b	11f7c <strchr@plt>
   196c0:	mov	r1, #47	; 0x2f
   196c4:	b	12018 <strrchr@plt>
   196c8:	push	{fp, lr}
   196cc:	mov	fp, sp
   196d0:	sub	sp, sp, #8
   196d4:	mov	r0, #0
   196d8:	str	r0, [sp, #4]
   196dc:	add	r1, sp, #4
   196e0:	mov	r0, #2
   196e4:	bl	11fd0 <prctl@plt>
   196e8:	ldr	r1, [sp, #4]
   196ec:	cmp	r0, #0
   196f0:	cmpeq	r1, #9
   196f4:	bne	19708 <__gcov_flush@@Base+0x6d4>
   196f8:	mov	r0, #1
   196fc:	mov	r1, #0
   19700:	bl	11fd0 <prctl@plt>
   19704:	ldr	r1, [sp, #4]
   19708:	sub	r0, r1, #9
   1970c:	clz	r0, r0
   19710:	lsr	r0, r0, #5
   19714:	mov	sp, fp
   19718:	pop	{fp, pc}
   1971c:	mov	r0, #1
   19720:	mov	r1, #9
   19724:	b	11fd0 <prctl@plt>

00019728 <__libc_csu_init@@Base>:
   19728:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1972c:	mov	r7, r0
   19730:	ldr	r6, [pc, #72]	; 19780 <__libc_csu_init@@Base+0x58>
   19734:	ldr	r5, [pc, #72]	; 19784 <__libc_csu_init@@Base+0x5c>
   19738:	add	r6, pc, r6
   1973c:	add	r5, pc, r5
   19740:	sub	r6, r6, r5
   19744:	mov	r8, r1
   19748:	mov	r9, r2
   1974c:	bl	11e48 <fdopen@plt-0x20>
   19750:	asrs	r6, r6, #2
   19754:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   19758:	mov	r4, #0
   1975c:	add	r4, r4, #1
   19760:	ldr	r3, [r5], #4
   19764:	mov	r2, r9
   19768:	mov	r1, r8
   1976c:	mov	r0, r7
   19770:	blx	r3
   19774:	cmp	r6, r4
   19778:	bne	1975c <__libc_csu_init@@Base+0x34>
   1977c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19780:	andeq	r1, r1, r4, asr #15
   19784:	andeq	r1, r1, ip, lsr #15

00019788 <__libc_csu_fini@@Base>:
   19788:	bx	lr
   1978c:	ldr	r3, [pc, #12]	; 197a0 <__libc_csu_fini@@Base+0x18>
   19790:	mov	r1, #0
   19794:	add	r3, pc, r3
   19798:	ldr	r2, [r3]
   1979c:	b	11fa0 <__cxa_atexit@plt>
   197a0:	andeq	r1, r1, r0, lsr r9

Disassembly of section .fini:

000197a4 <.fini>:
   197a4:	push	{r3, lr}
   197a8:	pop	{r3, pc}
