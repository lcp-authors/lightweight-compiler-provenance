
../repos/coreutils/src/b2sum:     file format elf32-littlearm


Disassembly of section .init:

00010e90 <.init>:
   10e90:	push	{r3, lr}
   10e94:	bl	12584 <__assert_fail@plt+0x13f8>
   10e98:	pop	{r3, pc}

Disassembly of section .plt:

00010e9c <fdopen@plt-0x14>:
   10e9c:	push	{lr}		; (str lr, [sp, #-4]!)
   10ea0:	ldr	lr, [pc, #4]	; 10eac <fdopen@plt-0x4>
   10ea4:	add	lr, pc, lr
   10ea8:	ldr	pc, [lr, #8]!
   10eac:	andeq	pc, r1, r4, asr r1	; <UNPREDICTABLE>

00010eb0 <fdopen@plt>:
   10eb0:	add	ip, pc, #0, 12
   10eb4:	add	ip, ip, #126976	; 0x1f000
   10eb8:	ldr	pc, [ip, #340]!	; 0x154

00010ebc <calloc@plt>:
   10ebc:	add	ip, pc, #0, 12
   10ec0:	add	ip, ip, #126976	; 0x1f000
   10ec4:	ldr	pc, [ip, #332]!	; 0x14c

00010ec8 <fputs_unlocked@plt>:
   10ec8:	add	ip, pc, #0, 12
   10ecc:	add	ip, ip, #126976	; 0x1f000
   10ed0:	ldr	pc, [ip, #324]!	; 0x144

00010ed4 <raise@plt>:
   10ed4:	add	ip, pc, #0, 12
   10ed8:	add	ip, ip, #126976	; 0x1f000
   10edc:	ldr	pc, [ip, #316]!	; 0x13c

00010ee0 <__getdelim@plt>:
   10ee0:	add	ip, pc, #0, 12
   10ee4:	add	ip, ip, #126976	; 0x1f000
   10ee8:	ldr	pc, [ip, #308]!	; 0x134

00010eec <strcmp@plt>:
   10eec:	add	ip, pc, #0, 12
   10ef0:	add	ip, ip, #126976	; 0x1f000
   10ef4:	ldr	pc, [ip, #300]!	; 0x12c

00010ef8 <posix_fadvise64@plt>:
   10ef8:	add	ip, pc, #0, 12
   10efc:	add	ip, ip, #126976	; 0x1f000
   10f00:	ldr	pc, [ip, #292]!	; 0x124

00010f04 <fflush@plt>:
   10f04:	add	ip, pc, #0, 12
   10f08:	add	ip, ip, #126976	; 0x1f000
   10f0c:	ldr	pc, [ip, #284]!	; 0x11c

00010f10 <free@plt>:
   10f10:	add	ip, pc, #0, 12
   10f14:	add	ip, ip, #126976	; 0x1f000
   10f18:	ldr	pc, [ip, #276]!	; 0x114

00010f1c <ferror@plt>:
   10f1c:	add	ip, pc, #0, 12
   10f20:	add	ip, ip, #126976	; 0x1f000
   10f24:	ldr	pc, [ip, #268]!	; 0x10c

00010f28 <_exit@plt>:
   10f28:	add	ip, pc, #0, 12
   10f2c:	add	ip, ip, #126976	; 0x1f000
   10f30:	ldr	pc, [ip, #260]!	; 0x104

00010f34 <memcpy@plt>:
   10f34:	add	ip, pc, #0, 12
   10f38:	add	ip, ip, #126976	; 0x1f000
   10f3c:	ldr	pc, [ip, #252]!	; 0xfc

00010f40 <__strtoull_internal@plt>:
   10f40:	add	ip, pc, #0, 12
   10f44:	add	ip, ip, #126976	; 0x1f000
   10f48:	ldr	pc, [ip, #244]!	; 0xf4

00010f4c <mbsinit@plt>:
   10f4c:	add	ip, pc, #0, 12
   10f50:	add	ip, ip, #126976	; 0x1f000
   10f54:	ldr	pc, [ip, #236]!	; 0xec

00010f58 <fwrite_unlocked@plt>:
   10f58:	add	ip, pc, #0, 12
   10f5c:	add	ip, ip, #126976	; 0x1f000
   10f60:	ldr	pc, [ip, #228]!	; 0xe4

00010f64 <memcmp@plt>:
   10f64:	add	ip, pc, #0, 12
   10f68:	add	ip, ip, #126976	; 0x1f000
   10f6c:	ldr	pc, [ip, #220]!	; 0xdc

00010f70 <fputc_unlocked@plt>:
   10f70:	add	ip, pc, #0, 12
   10f74:	add	ip, ip, #126976	; 0x1f000
   10f78:	ldr	pc, [ip, #212]!	; 0xd4

00010f7c <dcgettext@plt>:
   10f7c:	add	ip, pc, #0, 12
   10f80:	add	ip, ip, #126976	; 0x1f000
   10f84:	ldr	pc, [ip, #204]!	; 0xcc

00010f88 <realloc@plt>:
   10f88:	add	ip, pc, #0, 12
   10f8c:	add	ip, ip, #126976	; 0x1f000
   10f90:	ldr	pc, [ip, #196]!	; 0xc4

00010f94 <textdomain@plt>:
   10f94:	add	ip, pc, #0, 12
   10f98:	add	ip, ip, #126976	; 0x1f000
   10f9c:	ldr	pc, [ip, #188]!	; 0xbc

00010fa0 <iswprint@plt>:
   10fa0:	add	ip, pc, #0, 12
   10fa4:	add	ip, ip, #126976	; 0x1f000
   10fa8:	ldr	pc, [ip, #180]!	; 0xb4

00010fac <__memcpy_chk@plt>:
   10fac:	add	ip, pc, #0, 12
   10fb0:	add	ip, ip, #126976	; 0x1f000
   10fb4:	ldr	pc, [ip, #172]!	; 0xac

00010fb8 <fwrite@plt>:
   10fb8:	add	ip, pc, #0, 12
   10fbc:	add	ip, ip, #126976	; 0x1f000
   10fc0:	ldr	pc, [ip, #164]!	; 0xa4

00010fc4 <lseek64@plt>:
   10fc4:	add	ip, pc, #0, 12
   10fc8:	add	ip, ip, #126976	; 0x1f000
   10fcc:	ldr	pc, [ip, #156]!	; 0x9c

00010fd0 <__ctype_get_mb_cur_max@plt>:
   10fd0:	add	ip, pc, #0, 12
   10fd4:	add	ip, ip, #126976	; 0x1f000
   10fd8:	ldr	pc, [ip, #148]!	; 0x94

00010fdc <fread@plt>:
   10fdc:	add	ip, pc, #0, 12
   10fe0:	add	ip, ip, #126976	; 0x1f000
   10fe4:	ldr	pc, [ip, #140]!	; 0x8c

00010fe8 <__fpending@plt>:
   10fe8:	add	ip, pc, #0, 12
   10fec:	add	ip, ip, #126976	; 0x1f000
   10ff0:	ldr	pc, [ip, #132]!	; 0x84

00010ff4 <mbrtowc@plt>:
   10ff4:	add	ip, pc, #0, 12
   10ff8:	add	ip, ip, #126976	; 0x1f000
   10ffc:	ldr	pc, [ip, #124]!	; 0x7c

00011000 <error@plt>:
   11000:	add	ip, pc, #0, 12
   11004:	add	ip, ip, #126976	; 0x1f000
   11008:	ldr	pc, [ip, #116]!	; 0x74

0001100c <malloc@plt>:
   1100c:	add	ip, pc, #0, 12
   11010:	add	ip, ip, #126976	; 0x1f000
   11014:	ldr	pc, [ip, #108]!	; 0x6c

00011018 <__libc_start_main@plt>:
   11018:	add	ip, pc, #0, 12
   1101c:	add	ip, ip, #126976	; 0x1f000
   11020:	ldr	pc, [ip, #100]!	; 0x64

00011024 <__freading@plt>:
   11024:	add	ip, pc, #0, 12
   11028:	add	ip, ip, #126976	; 0x1f000
   1102c:	ldr	pc, [ip, #92]!	; 0x5c

00011030 <__ctype_tolower_loc@plt>:
   11030:	add	ip, pc, #0, 12
   11034:	add	ip, ip, #126976	; 0x1f000
   11038:	ldr	pc, [ip, #84]!	; 0x54

0001103c <__gmon_start__@plt>:
   1103c:	add	ip, pc, #0, 12
   11040:	add	ip, ip, #126976	; 0x1f000
   11044:	ldr	pc, [ip, #76]!	; 0x4c

00011048 <getopt_long@plt>:
   11048:	add	ip, pc, #0, 12
   1104c:	add	ip, ip, #126976	; 0x1f000
   11050:	ldr	pc, [ip, #68]!	; 0x44

00011054 <__ctype_b_loc@plt>:
   11054:	add	ip, pc, #0, 12
   11058:	add	ip, ip, #126976	; 0x1f000
   1105c:	ldr	pc, [ip, #60]!	; 0x3c

00011060 <exit@plt>:
   11060:	add	ip, pc, #0, 12
   11064:	add	ip, ip, #126976	; 0x1f000
   11068:	ldr	pc, [ip, #52]!	; 0x34

0001106c <feof@plt>:
   1106c:	add	ip, pc, #0, 12
   11070:	add	ip, ip, #126976	; 0x1f000
   11074:	ldr	pc, [ip, #44]!	; 0x2c

00011078 <strlen@plt>:
   11078:	add	ip, pc, #0, 12
   1107c:	add	ip, ip, #126976	; 0x1f000
   11080:	ldr	pc, [ip, #36]!	; 0x24

00011084 <strchr@plt>:
   11084:	add	ip, pc, #0, 12
   11088:	add	ip, ip, #126976	; 0x1f000
   1108c:	ldr	pc, [ip, #28]!

00011090 <__errno_location@plt>:
   11090:	add	ip, pc, #0, 12
   11094:	add	ip, ip, #126976	; 0x1f000
   11098:	ldr	pc, [ip, #20]!

0001109c <__cxa_atexit@plt>:
   1109c:	add	ip, pc, #0, 12
   110a0:	add	ip, ip, #126976	; 0x1f000
   110a4:	ldr	pc, [ip, #12]!

000110a8 <setvbuf@plt>:
   110a8:	add	ip, pc, #0, 12
   110ac:	add	ip, ip, #126976	; 0x1f000
   110b0:	ldr	pc, [ip, #4]!

000110b4 <memset@plt>:
   110b4:	add	ip, pc, #0, 12
   110b8:	add	ip, ip, #122880	; 0x1e000
   110bc:	ldr	pc, [ip, #4092]!	; 0xffc

000110c0 <__printf_chk@plt>:
   110c0:	add	ip, pc, #0, 12
   110c4:	add	ip, ip, #122880	; 0x1e000
   110c8:	ldr	pc, [ip, #4084]!	; 0xff4

000110cc <fileno@plt>:
   110cc:	add	ip, pc, #0, 12
   110d0:	add	ip, ip, #122880	; 0x1e000
   110d4:	ldr	pc, [ip, #4076]!	; 0xfec

000110d8 <__fprintf_chk@plt>:
   110d8:	add	ip, pc, #0, 12
   110dc:	add	ip, ip, #122880	; 0x1e000
   110e0:	ldr	pc, [ip, #4068]!	; 0xfe4

000110e4 <fclose@plt>:
   110e4:	add	ip, pc, #0, 12
   110e8:	add	ip, ip, #122880	; 0x1e000
   110ec:	ldr	pc, [ip, #4060]!	; 0xfdc

000110f0 <fseeko64@plt>:
   110f0:	add	ip, pc, #0, 12
   110f4:	add	ip, ip, #122880	; 0x1e000
   110f8:	ldr	pc, [ip, #4052]!	; 0xfd4

000110fc <fcntl64@plt>:
   110fc:	add	ip, pc, #0, 12
   11100:	add	ip, ip, #122880	; 0x1e000
   11104:	ldr	pc, [ip, #4044]!	; 0xfcc

00011108 <__overflow@plt>:
   11108:	add	ip, pc, #0, 12
   1110c:	add	ip, ip, #122880	; 0x1e000
   11110:	ldr	pc, [ip, #4036]!	; 0xfc4

00011114 <setlocale@plt>:
   11114:	add	ip, pc, #0, 12
   11118:	add	ip, ip, #122880	; 0x1e000
   1111c:	ldr	pc, [ip, #4028]!	; 0xfbc

00011120 <strrchr@plt>:
   11120:	add	ip, pc, #0, 12
   11124:	add	ip, ip, #122880	; 0x1e000
   11128:	ldr	pc, [ip, #4020]!	; 0xfb4

0001112c <nl_langinfo@plt>:
   1112c:	add	ip, pc, #0, 12
   11130:	add	ip, ip, #122880	; 0x1e000
   11134:	ldr	pc, [ip, #4012]!	; 0xfac

00011138 <clearerr_unlocked@plt>:
   11138:	add	ip, pc, #0, 12
   1113c:	add	ip, ip, #122880	; 0x1e000
   11140:	ldr	pc, [ip, #4004]!	; 0xfa4

00011144 <fopen64@plt>:
   11144:	add	ip, pc, #0, 12
   11148:	add	ip, ip, #122880	; 0x1e000
   1114c:	ldr	pc, [ip, #3996]!	; 0xf9c

00011150 <bindtextdomain@plt>:
   11150:	add	ip, pc, #0, 12
   11154:	add	ip, ip, #122880	; 0x1e000
   11158:	ldr	pc, [ip, #3988]!	; 0xf94

0001115c <strncmp@plt>:
   1115c:	add	ip, pc, #0, 12
   11160:	add	ip, ip, #122880	; 0x1e000
   11164:	ldr	pc, [ip, #3980]!	; 0xf8c

00011168 <abort@plt>:
   11168:	add	ip, pc, #0, 12
   1116c:	add	ip, ip, #122880	; 0x1e000
   11170:	ldr	pc, [ip, #3972]!	; 0xf84

00011174 <close@plt>:
   11174:	add	ip, pc, #0, 12
   11178:	add	ip, ip, #122880	; 0x1e000
   1117c:	ldr	pc, [ip, #3964]!	; 0xf7c

00011180 <dcngettext@plt>:
   11180:	add	ip, pc, #0, 12
   11184:	add	ip, ip, #122880	; 0x1e000
   11188:	ldr	pc, [ip, #3956]!	; 0xf74

0001118c <__assert_fail@plt>:
   1118c:	add	ip, pc, #0, 12
   11190:	add	ip, ip, #122880	; 0x1e000
   11194:	ldr	pc, [ip, #3948]!	; 0xf6c

Disassembly of section .text:

00011198 <.text>:
   11198:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1119c:	mov	r6, r0
   111a0:	sub	sp, sp, #292	; 0x124
   111a4:	ldr	r0, [r1]
   111a8:	mov	r5, r1
   111ac:	bl	1a058 <__assert_fail@plt+0x8ecc>
   111b0:	ldr	r1, [pc, #3920]	; 12108 <__assert_fail@plt+0xf7c>
   111b4:	mov	r0, #6
   111b8:	bl	11114 <setlocale@plt>
   111bc:	ldr	r1, [pc, #3912]	; 1210c <__assert_fail@plt+0xf80>
   111c0:	ldr	r0, [pc, #3912]	; 12110 <__assert_fail@plt+0xf84>
   111c4:	bl	11150 <bindtextdomain@plt>
   111c8:	ldr	r0, [pc, #3904]	; 12110 <__assert_fail@plt+0xf84>
   111cc:	bl	10f94 <textdomain@plt>
   111d0:	ldr	r0, [pc, #3900]	; 12114 <__assert_fail@plt+0xf88>
   111d4:	bl	1dc7c <__assert_fail@plt+0xcaf0>
   111d8:	ldr	r2, [pc, #3896]	; 12118 <__assert_fail@plt+0xf8c>
   111dc:	ldr	r8, [pc, #3896]	; 1211c <__assert_fail@plt+0xf90>
   111e0:	ldr	r7, [pc, #3896]	; 12120 <__assert_fail@plt+0xf94>
   111e4:	ldr	r9, [pc, #3896]	; 12124 <__assert_fail@plt+0xf98>
   111e8:	mov	r3, #0
   111ec:	ldr	fp, [pc, #3860]	; 12108 <__assert_fail@plt+0xf7c>
   111f0:	mvn	sl, #0
   111f4:	ldr	r0, [r2]
   111f8:	mov	r4, r3
   111fc:	mov	r1, r3
   11200:	mov	r2, #1
   11204:	str	r3, [sp, #36]	; 0x24
   11208:	bl	110a8 <setvbuf@plt>
   1120c:	str	fp, [sp, #28]
   11210:	str	r4, [sp, #24]
   11214:	mov	r4, #0
   11218:	str	r4, [sp]
   1121c:	mov	r3, r8
   11220:	mov	r2, r7
   11224:	mov	r1, r5
   11228:	mov	r0, r6
   1122c:	bl	11048 <getopt_long@plt>
   11230:	cmn	r0, #1
   11234:	beq	11424 <__assert_fail@plt+0x298>
   11238:	cmp	r0, #119	; 0x77
   1123c:	beq	11410 <__assert_fail@plt+0x284>
   11240:	bgt	11270 <__assert_fail@plt+0xe4>
   11244:	cmp	r0, #98	; 0x62
   11248:	beq	11408 <__assert_fail@plt+0x27c>
   1124c:	ble	112a8 <__assert_fail@plt+0x11c>
   11250:	cmp	r0, #108	; 0x6c
   11254:	beq	11368 <__assert_fail@plt+0x1dc>
   11258:	cmp	r0, #116	; 0x74
   1125c:	beq	112dc <__assert_fail@plt+0x150>
   11260:	cmp	r0, #99	; 0x63
   11264:	beq	1133c <__assert_fail@plt+0x1b0>
   11268:	mov	r0, #1
   1126c:	bl	12a34 <__assert_fail@plt+0x18a8>
   11270:	ldr	r3, [pc, #3760]	; 12128 <__assert_fail@plt+0xf9c>
   11274:	cmp	r0, r3
   11278:	beq	11354 <__assert_fail@plt+0x1c8>
   1127c:	ble	112c0 <__assert_fail@plt+0x134>
   11280:	ldr	r3, [pc, #3748]	; 1212c <__assert_fail@plt+0xfa0>
   11284:	cmp	r0, r3
   11288:	beq	11348 <__assert_fail@plt+0x1bc>
   1128c:	blt	11328 <__assert_fail@plt+0x19c>
   11290:	cmp	r0, #260	; 0x104
   11294:	bne	11268 <__assert_fail@plt+0xdc>
   11298:	mov	r3, #1
   1129c:	str	r3, [sp, #36]	; 0x24
   112a0:	mov	sl, r3
   112a4:	b	11214 <__assert_fail@plt+0x88>
   112a8:	cmn	r0, #3
   112ac:	beq	112f0 <__assert_fail@plt+0x164>
   112b0:	cmn	r0, #2
   112b4:	bne	11268 <__assert_fail@plt+0xdc>
   112b8:	mov	r0, r4
   112bc:	bl	12a34 <__assert_fail@plt+0x18a8>
   112c0:	cmp	r0, #122	; 0x7a
   112c4:	beq	112e4 <__assert_fail@plt+0x158>
   112c8:	cmp	r0, #256	; 0x100
   112cc:	bne	11268 <__assert_fail@plt+0xdc>
   112d0:	mov	r3, #1
   112d4:	strb	r3, [r9, #16]
   112d8:	b	11214 <__assert_fail@plt+0x88>
   112dc:	mov	sl, r4
   112e0:	b	11214 <__assert_fail@plt+0x88>
   112e4:	ldr	r3, [pc, #3824]	; 121dc <__assert_fail@plt+0x1050>
   112e8:	strb	r4, [r3]
   112ec:	b	11214 <__assert_fail@plt+0x88>
   112f0:	ldr	r3, [pc, #3640]	; 12130 <__assert_fail@plt+0xfa4>
   112f4:	ldr	r0, [pc, #3612]	; 12118 <__assert_fail@plt+0xf8c>
   112f8:	ldr	r1, [pc, #3636]	; 12134 <__assert_fail@plt+0xfa8>
   112fc:	ldr	r2, [pc, #3636]	; 12138 <__assert_fail@plt+0xfac>
   11300:	str	r4, [sp, #8]
   11304:	ldr	r0, [r0]
   11308:	ldr	r3, [r3]
   1130c:	str	r1, [sp, #4]
   11310:	str	r2, [sp]
   11314:	ldr	r1, [pc, #3616]	; 1213c <__assert_fail@plt+0xfb0>
   11318:	ldr	r2, [pc, #3616]	; 12140 <__assert_fail@plt+0xfb4>
   1131c:	bl	1c360 <__assert_fail@plt+0xb1d4>
   11320:	mov	r0, r4
   11324:	bl	11060 <exit@plt>
   11328:	mov	r3, #1
   1132c:	strb	r4, [r9, #17]
   11330:	strb	r4, [r9, #18]
   11334:	strb	r3, [r9, #19]
   11338:	b	11214 <__assert_fail@plt+0x88>
   1133c:	mov	r3, #1
   11340:	str	r3, [sp, #24]
   11344:	b	11214 <__assert_fail@plt+0x88>
   11348:	mov	r3, #1
   1134c:	strb	r3, [r9, #20]
   11350:	b	11214 <__assert_fail@plt+0x88>
   11354:	mov	r3, #1
   11358:	strb	r4, [r9, #18]
   1135c:	strb	r4, [r9, #19]
   11360:	strb	r3, [r9, #17]
   11364:	b	11214 <__assert_fail@plt+0x88>
   11368:	ldr	r3, [pc, #3540]	; 12144 <__assert_fail@plt+0xfb8>
   1136c:	mov	r2, #5
   11370:	ldr	r1, [pc, #3536]	; 12148 <__assert_fail@plt+0xfbc>
   11374:	ldr	r3, [r3]
   11378:	mov	r0, r4
   1137c:	str	r3, [sp, #28]
   11380:	bl	10f7c <dcgettext@plt>
   11384:	mvn	r2, #0
   11388:	mvn	r3, #0
   1138c:	str	r4, [sp, #16]
   11390:	strd	r2, [sp]
   11394:	str	fp, [sp, #8]
   11398:	mov	r2, #0
   1139c:	mov	r3, #0
   113a0:	str	r0, [sp, #12]
   113a4:	ldr	r0, [sp, #28]
   113a8:	bl	1cb20 <__assert_fail@plt+0xb994>
   113ac:	mov	r3, #0
   113b0:	and	r2, r0, #7
   113b4:	orrs	r3, r2, r3
   113b8:	ldr	r3, [pc, #3460]	; 12144 <__assert_fail@plt+0xfb8>
   113bc:	strd	r0, [r9, #8]
   113c0:	ldr	r3, [r3]
   113c4:	str	r3, [sp, #28]
   113c8:	beq	11214 <__assert_fail@plt+0x88>
   113cc:	mov	r2, #5
   113d0:	ldr	r1, [pc, #3600]	; 121e8 <__assert_fail@plt+0x105c>
   113d4:	mov	r0, r4
   113d8:	bl	10f7c <dcgettext@plt>
   113dc:	mov	r5, r0
   113e0:	ldr	r0, [sp, #28]
   113e4:	bl	1bf18 <__assert_fail@plt+0xad8c>
   113e8:	mov	r2, r5
   113ec:	mov	r1, r4
   113f0:	mov	r3, r0
   113f4:	mov	r0, r4
   113f8:	bl	11000 <error@plt>
   113fc:	mov	r2, #5
   11400:	ldr	r1, [pc, #3396]	; 1214c <__assert_fail@plt+0xfc0>
   11404:	b	11fa0 <__assert_fail@plt+0xe14>
   11408:	mov	sl, #1
   1140c:	b	11214 <__assert_fail@plt+0x88>
   11410:	mov	r3, #1
   11414:	strb	r4, [r9, #17]
   11418:	strb	r4, [r9, #19]
   1141c:	strb	r3, [r9, #18]
   11420:	b	11214 <__assert_fail@plt+0x88>
   11424:	ldr	r9, [pc, #3320]	; 12124 <__assert_fail@plt+0xf98>
   11428:	mov	r1, #3
   1142c:	ldrd	r2, [r9, #8]
   11430:	str	r1, [r9, #24]
   11434:	cmp	r3, #0
   11438:	cmpeq	r2, #512	; 0x200
   1143c:	bhi	124ac <__assert_fail@plt+0x1320>
   11440:	orrs	r3, r2, r3
   11444:	beq	11de4 <__assert_fail@plt+0xc58>
   11448:	ldr	r3, [r9, #8]
   1144c:	ldr	r2, [r9, #12]
   11450:	ldr	r7, [sp, #36]	; 0x24
   11454:	lsr	r3, r3, #2
   11458:	cmp	sl, #0
   1145c:	movne	r7, #0
   11460:	andeq	r7, r7, #1
   11464:	orr	r3, r3, r2, lsl #30
   11468:	cmp	r7, #0
   1146c:	str	r3, [r9]
   11470:	bne	12514 <__assert_fail@plt+0x1388>
   11474:	ldr	r3, [pc, #3424]	; 121dc <__assert_fail@plt+0x1050>
   11478:	ldrb	r4, [r3]
   1147c:	ldr	r3, [sp, #24]
   11480:	cmp	r4, #10
   11484:	moveq	r3, #0
   11488:	andne	r3, r3, #1
   1148c:	cmp	r3, #0
   11490:	movne	r2, #5
   11494:	ldrne	r1, [pc, #3252]	; 12150 <__assert_fail@plt+0xfc4>
   11498:	bne	1251c <__assert_fail@plt+0x1390>
   1149c:	ldr	r2, [sp, #36]	; 0x24
   114a0:	ldr	r3, [sp, #24]
   114a4:	ands	r7, r3, r2
   114a8:	movne	r2, #5
   114ac:	ldrne	r1, [pc, #3232]	; 12154 <__assert_fail@plt+0xfc8>
   114b0:	bne	1251c <__assert_fail@plt+0x1390>
   114b4:	ldr	r4, [sp, #24]
   114b8:	cmp	sl, #0
   114bc:	movlt	r4, #0
   114c0:	andge	r4, r4, #1
   114c4:	cmp	r4, #0
   114c8:	movne	r2, #5
   114cc:	ldrne	r1, [pc, #3204]	; 12158 <__assert_fail@plt+0xfcc>
   114d0:	bne	1251c <__assert_fail@plt+0x1390>
   114d4:	ldrb	r7, [r9, #16]
   114d8:	ldr	r3, [sp, #24]
   114dc:	eor	r7, r7, #1
   114e0:	orrs	r7, r3, r7
   114e4:	moveq	r2, #5
   114e8:	ldreq	r1, [pc, #3180]	; 1215c <__assert_fail@plt+0xfd0>
   114ec:	beq	1251c <__assert_fail@plt+0x1390>
   114f0:	ldrb	r7, [r9, #17]
   114f4:	ldr	r3, [sp, #24]
   114f8:	eor	r7, r7, #1
   114fc:	orrs	r7, r3, r7
   11500:	moveq	r2, #5
   11504:	ldreq	r1, [pc, #3156]	; 12160 <__assert_fail@plt+0xfd4>
   11508:	beq	1251c <__assert_fail@plt+0x1390>
   1150c:	ldrb	r7, [r9, #18]
   11510:	ldr	r3, [sp, #24]
   11514:	eor	r7, r7, #1
   11518:	orrs	r7, r3, r7
   1151c:	moveq	r2, #5
   11520:	ldreq	r1, [pc, #3132]	; 12164 <__assert_fail@plt+0xfd8>
   11524:	beq	1251c <__assert_fail@plt+0x1390>
   11528:	ldrb	r3, [r9, #19]
   1152c:	ldr	r2, [sp, #24]
   11530:	eor	r3, r3, #1
   11534:	orrs	r3, r2, r3
   11538:	str	r3, [sp, #56]	; 0x38
   1153c:	moveq	r2, #5
   11540:	ldreq	r1, [pc, #3104]	; 12168 <__assert_fail@plt+0xfdc>
   11544:	beq	1251c <__assert_fail@plt+0x1390>
   11548:	ldrb	r2, [r9, #20]
   1154c:	ldr	r3, [sp, #24]
   11550:	eor	r3, r3, #1
   11554:	ands	r3, r2, r3
   11558:	str	r3, [sp, #48]	; 0x30
   1155c:	movne	r2, #5
   11560:	ldrne	r1, [pc, #3076]	; 1216c <__assert_fail@plt+0xfe0>
   11564:	bne	1251c <__assert_fail@plt+0x1390>
   11568:	ldr	r3, [pc, #3072]	; 12170 <__assert_fail@plt+0xfe4>
   1156c:	cmn	sl, #1
   11570:	add	r2, r5, r6, lsl #2
   11574:	ldr	r3, [r3]
   11578:	moveq	sl, #0
   1157c:	cmp	r6, r3
   11580:	str	r2, [sp, #68]	; 0x44
   11584:	addeq	r2, r2, #4
   11588:	streq	r2, [sp, #68]	; 0x44
   1158c:	ldreq	r2, [pc, #3040]	; 12174 <__assert_fail@plt+0xfe8>
   11590:	add	r3, r5, r3, lsl #2
   11594:	streq	r2, [r5, r6, lsl #2]
   11598:	cmp	sl, #0
   1159c:	movne	r2, #42	; 0x2a
   115a0:	moveq	r2, #32
   115a4:	str	r3, [sp, #32]
   115a8:	uxtb	r3, r2
   115ac:	str	r3, [sp, #112]	; 0x70
   115b0:	add	r3, sp, #216	; 0xd8
   115b4:	str	r2, [sp, #116]	; 0x74
   115b8:	str	r3, [sp, #104]	; 0x68
   115bc:	ldr	r3, [sp, #68]	; 0x44
   115c0:	ldr	r2, [sp, #32]
   115c4:	cmp	r3, r2
   115c8:	bls	11dc4 <__assert_fail@plt+0xc38>
   115cc:	ldr	r3, [sp, #24]
   115d0:	cmp	r3, #0
   115d4:	ldr	r3, [sp, #32]
   115d8:	ldr	r5, [r3], #4
   115dc:	str	r3, [sp, #32]
   115e0:	beq	119c8 <__assert_fail@plt+0x83c>
   115e4:	ldr	r1, [pc, #2952]	; 12174 <__assert_fail@plt+0xfe8>
   115e8:	mov	r0, r5
   115ec:	bl	10eec <strcmp@plt>
   115f0:	subs	r3, r0, #0
   115f4:	str	r3, [sp, #60]	; 0x3c
   115f8:	bne	11c00 <__assert_fail@plt+0xa74>
   115fc:	mov	r3, #1
   11600:	mov	r2, #5
   11604:	ldr	r1, [pc, #2924]	; 12178 <__assert_fail@plt+0xfec>
   11608:	strb	r3, [r9, #4]
   1160c:	bl	10f7c <dcgettext@plt>
   11610:	ldr	r3, [pc, #2916]	; 1217c <__assert_fail@plt+0xff0>
   11614:	ldr	fp, [r3]
   11618:	str	r0, [sp, #72]	; 0x48
   1161c:	mov	r2, #0
   11620:	mov	r3, #0
   11624:	add	sl, sp, #288	; 0x120
   11628:	strd	r2, [sp, #88]	; 0x58
   1162c:	strd	r2, [sp, #80]	; 0x50
   11630:	strd	r2, [sp, #40]	; 0x28
   11634:	ldr	r3, [sp, #48]	; 0x30
   11638:	mov	r1, #0
   1163c:	str	r3, [sp, #108]	; 0x6c
   11640:	str	r3, [sp, #76]	; 0x4c
   11644:	mov	r2, #1
   11648:	mov	r3, #0
   1164c:	str	r9, [sp, #28]
   11650:	str	r1, [sl, #-160]!	; 0xffffff60
   11654:	str	r1, [sp, #124]	; 0x7c
   11658:	mov	r8, r2
   1165c:	mov	r9, r3
   11660:	b	11680 <__assert_fail@plt+0x4f4>
   11664:	ldr	r3, [fp]
   11668:	ands	r3, r3, #48	; 0x30
   1166c:	bne	119e8 <__assert_fail@plt+0x85c>
   11670:	adds	r8, r8, #1
   11674:	adc	r9, r9, #0
   11678:	orrs	r2, r8, r9
   1167c:	beq	121f8 <__assert_fail@plt+0x106c>
   11680:	mov	r3, fp
   11684:	mov	r2, #10
   11688:	mov	r1, sl
   1168c:	add	r0, sp, #124	; 0x7c
   11690:	bl	10ee0 <__getdelim@plt>
   11694:	subs	r4, r0, #0
   11698:	ble	119e8 <__assert_fail@plt+0x85c>
   1169c:	ldr	r3, [sp, #124]	; 0x7c
   116a0:	ldrb	r2, [r3]
   116a4:	cmp	r2, #35	; 0x23
   116a8:	beq	11664 <__assert_fail@plt+0x4d8>
   116ac:	add	r2, r3, r4
   116b0:	ldrb	r0, [r2, #-1]
   116b4:	cmp	r0, #10
   116b8:	subeq	r4, r4, #1
   116bc:	cmp	r4, #0
   116c0:	movle	r2, r4
   116c4:	subgt	r2, r4, #1
   116c8:	ldrb	r0, [r3, r2]
   116cc:	cmp	r0, #13
   116d0:	subeq	r4, r4, #1
   116d4:	cmp	r4, #0
   116d8:	beq	11664 <__assert_fail@plt+0x4d8>
   116dc:	mov	r2, #0
   116e0:	strb	r2, [r3, r4]
   116e4:	ldr	r6, [sp, #124]	; 0x7c
   116e8:	ldrb	r3, [r6]
   116ec:	cmp	r3, #32
   116f0:	cmpne	r3, #9
   116f4:	moveq	r5, #1
   116f8:	movne	r5, #0
   116fc:	bne	1171c <__assert_fail@plt+0x590>
   11700:	mov	r2, r6
   11704:	mov	r5, #0
   11708:	ldrb	r3, [r2, #1]!
   1170c:	add	r5, r5, #1
   11710:	cmp	r3, #9
   11714:	cmpne	r3, #32
   11718:	beq	11708 <__assert_fail@plt+0x57c>
   1171c:	cmp	r3, #92	; 0x5c
   11720:	addeq	r5, r5, #1
   11724:	ldreq	r3, [sp, #24]
   11728:	ldrne	r3, [sp, #48]	; 0x30
   1172c:	add	r7, r6, r5
   11730:	mov	r0, r7
   11734:	mov	r2, #7
   11738:	ldr	r1, [pc, #2736]	; 121f0 <__assert_fail@plt+0x1064>
   1173c:	str	r3, [sp, #64]	; 0x40
   11740:	str	r7, [sp, #52]	; 0x34
   11744:	bl	1115c <strncmp@plt>
   11748:	subs	r3, r0, #0
   1174c:	bne	11880 <__assert_fail@plt+0x6f4>
   11750:	add	r2, r5, #7
   11754:	mov	r0, r7
   11758:	ldr	r1, [pc, #2704]	; 121f0 <__assert_fail@plt+0x1064>
   1175c:	ldrb	r7, [r6, r2]
   11760:	strb	r3, [r6, r2]
   11764:	str	r2, [sp, #52]	; 0x34
   11768:	bl	10eec <strcmp@plt>
   1176c:	ldr	r2, [sp, #52]	; 0x34
   11770:	add	r1, r6, r2
   11774:	subs	ip, r0, #0
   11778:	bne	11960 <__assert_fail@plt+0x7d4>
   1177c:	cmp	r7, #40	; 0x28
   11780:	beq	11dac <__assert_fail@plt+0xc20>
   11784:	ldr	r3, [sp, #28]
   11788:	mov	r0, #512	; 0x200
   1178c:	mov	r1, #0
   11790:	cmp	r7, #45	; 0x2d
   11794:	add	r2, r5, #8
   11798:	strd	r0, [r3, #8]
   1179c:	beq	12234 <__assert_fail@plt+0x10a8>
   117a0:	ldr	ip, [sp, #28]
   117a4:	ldrb	r1, [r6, r2]
   117a8:	ldr	r3, [ip, #8]
   117ac:	ldr	r0, [ip, #12]
   117b0:	cmp	r1, #32
   117b4:	addeq	r2, r2, #1
   117b8:	lsr	r3, r3, #2
   117bc:	orr	r3, r3, r0, lsl #30
   117c0:	str	r3, [ip]
   117c4:	ldrb	r3, [r6, r2]
   117c8:	cmp	r3, #40	; 0x28
   117cc:	bne	11960 <__assert_fail@plt+0x7d4>
   117d0:	add	r1, r2, #1
   117d4:	subs	r4, r4, r1
   117d8:	beq	11960 <__assert_fail@plt+0x7d4>
   117dc:	sub	r4, r4, #1
   117e0:	add	r5, r6, r1
   117e4:	add	r3, r5, r4
   117e8:	b	11800 <__assert_fail@plt+0x674>
   117ec:	mov	r7, r3
   117f0:	sub	r3, r3, #1
   117f4:	ldrb	r2, [r7]
   117f8:	cmp	r2, #41	; 0x29
   117fc:	beq	11820 <__assert_fail@plt+0x694>
   11800:	cmp	r5, r3
   11804:	sub	r4, r3, r5
   11808:	bne	117ec <__assert_fail@plt+0x660>
   1180c:	ldrb	r3, [r6, r1]
   11810:	cmp	r3, #41	; 0x29
   11814:	bne	11960 <__assert_fail@plt+0x7d4>
   11818:	mov	r7, r5
   1181c:	mov	r4, #0
   11820:	ldr	r3, [sp, #64]	; 0x40
   11824:	cmp	r3, #0
   11828:	bne	12494 <__assert_fail@plt+0x1308>
   1182c:	mov	r3, #0
   11830:	add	r4, r4, #1
   11834:	strb	r3, [r7]
   11838:	b	11840 <__assert_fail@plt+0x6b4>
   1183c:	add	r4, r4, #1
   11840:	ldrb	r3, [r5, r4]
   11844:	cmp	r3, #9
   11848:	cmpne	r3, #32
   1184c:	beq	1183c <__assert_fail@plt+0x6b0>
   11850:	cmp	r3, #61	; 0x3d
   11854:	bne	11960 <__assert_fail@plt+0x7d4>
   11858:	add	r4, r4, #1
   1185c:	add	r3, r5, r4
   11860:	mov	r7, r3
   11864:	ldrb	r2, [r3], #1
   11868:	cmp	r2, #9
   1186c:	cmpne	r2, #32
   11870:	beq	11860 <__assert_fail@plt+0x6d4>
   11874:	mov	r0, r7
   11878:	bl	1272c <__assert_fail@plt+0x15a0>
   1187c:	b	11e74 <__assert_fail@plt+0xce8>
   11880:	ldr	r0, [sp, #28]
   11884:	ldrb	r1, [r6, r5]
   11888:	sub	r2, r4, r5
   1188c:	ldr	r3, [r0, #24]
   11890:	cmp	r1, #92	; 0x5c
   11894:	addeq	r3, r3, #1
   11898:	cmp	r2, r3
   1189c:	bcc	11960 <__assert_fail@plt+0x7d4>
   118a0:	mov	r2, #0
   118a4:	str	r2, [r0]
   118a8:	bl	11054 <__ctype_b_loc@plt>
   118ac:	ldr	lr, [sp, #48]	; 0x30
   118b0:	mov	r2, #0
   118b4:	strd	r8, [sp, #96]	; 0x60
   118b8:	ldr	r1, [sp, #52]	; 0x34
   118bc:	mov	r9, sl
   118c0:	mov	ip, r2
   118c4:	mov	sl, r5
   118c8:	mov	r5, r4
   118cc:	mov	r4, lr
   118d0:	ldr	lr, [sp, #24]
   118d4:	ldr	r7, [r0]
   118d8:	b	118e8 <__assert_fail@plt+0x75c>
   118dc:	mov	ip, r0
   118e0:	mov	r2, r0
   118e4:	mov	r4, lr
   118e8:	ldrb	r3, [r1], #1
   118ec:	add	r0, r2, #1
   118f0:	lsl	r3, r3, #1
   118f4:	ldrh	r3, [r7, r3]
   118f8:	tst	r3, #4096	; 0x1000
   118fc:	bne	118dc <__assert_fail@plt+0x750>
   11900:	mov	lr, r4
   11904:	cmp	lr, #0
   11908:	mov	r4, r5
   1190c:	ldrne	r3, [sp, #28]
   11910:	mov	r5, sl
   11914:	mov	sl, r9
   11918:	strne	ip, [r3]
   1191c:	sub	r3, r2, #2
   11920:	cmp	r3, #126	; 0x7e
   11924:	ldrd	r8, [sp, #96]	; 0x60
   11928:	bhi	11960 <__assert_fail@plt+0x7d4>
   1192c:	ands	r1, r2, #1
   11930:	bne	11960 <__assert_fail@plt+0x7d4>
   11934:	add	r5, r5, r2
   11938:	ldr	r0, [sp, #28]
   1193c:	ldrb	r3, [r6, r5]
   11940:	lsl	r2, r2, #2
   11944:	str	r2, [r0, #8]
   11948:	cmp	r3, #32
   1194c:	cmpne	r3, #9
   11950:	str	r1, [r0, #12]
   11954:	movne	r3, #1
   11958:	moveq	r3, #0
   1195c:	beq	11df4 <__assert_fail@plt+0xc68>
   11960:	ldr	r3, [sp, #28]
   11964:	ldrd	r0, [sp, #40]	; 0x28
   11968:	ldrb	r3, [r3, #18]
   1196c:	adds	r0, r0, #1
   11970:	adc	r1, r1, #0
   11974:	cmp	r3, #0
   11978:	strd	r0, [sp, #40]	; 0x28
   1197c:	beq	11664 <__assert_fail@plt+0x4d8>
   11980:	mov	r2, #5
   11984:	ldr	r1, [pc, #2036]	; 12180 <__assert_fail@plt+0xff4>
   11988:	mov	r0, #0
   1198c:	bl	10f7c <dcgettext@plt>
   11990:	ldr	r2, [sp, #72]	; 0x48
   11994:	mov	r1, #3
   11998:	mov	r4, r0
   1199c:	mov	r0, #0
   119a0:	bl	1bd94 <__assert_fail@plt+0xac08>
   119a4:	ldr	r3, [pc, #2116]	; 121f0 <__assert_fail@plt+0x1064>
   119a8:	mov	r1, #0
   119ac:	str	r3, [sp, #8]
   119b0:	mov	r2, r4
   119b4:	strd	r8, [sp]
   119b8:	mov	r3, r0
   119bc:	mov	r0, r1
   119c0:	bl	11000 <error@plt>
   119c4:	b	11664 <__assert_fail@plt+0x4d8>
   119c8:	add	r2, sp, #216	; 0xd8
   119cc:	add	r1, sp, #144	; 0x90
   119d0:	mov	r0, r5
   119d4:	bl	12880 <__assert_fail@plt+0x16f4>
   119d8:	subs	r8, r0, #0
   119dc:	bne	11cb0 <__assert_fail@plt+0xb24>
   119e0:	str	r8, [sp, #56]	; 0x38
   119e4:	b	115bc <__assert_fail@plt+0x430>
   119e8:	ldr	r0, [sp, #124]	; 0x7c
   119ec:	ldr	r9, [sp, #28]
   119f0:	bl	19f60 <__assert_fail@plt+0x8dd4>
   119f4:	ldr	r4, [fp]
   119f8:	ldr	r3, [sp, #60]	; 0x3c
   119fc:	ands	r4, r4, #32
   11a00:	mov	r0, fp
   11a04:	bne	11c4c <__assert_fail@plt+0xac0>
   11a08:	cmp	r3, #0
   11a0c:	beq	11a38 <__assert_fail@plt+0x8ac>
   11a10:	bl	19dc8 <__assert_fail@plt+0x8c3c>
   11a14:	cmp	r0, #0
   11a18:	beq	11a3c <__assert_fail@plt+0x8b0>
   11a1c:	bl	11090 <__errno_location@plt>
   11a20:	ldr	r5, [r0]
   11a24:	cmp	r5, #0
   11a28:	blt	11a3c <__assert_fail@plt+0x8b0>
   11a2c:	ldrne	r4, [pc, #1872]	; 12184 <__assert_fail@plt+0xff8>
   11a30:	bne	11c70 <__assert_fail@plt+0xae4>
   11a34:	b	11c58 <__assert_fail@plt+0xacc>
   11a38:	bl	11138 <clearerr_unlocked@plt>
   11a3c:	ldr	r3, [sp, #76]	; 0x4c
   11a40:	cmp	r3, #0
   11a44:	beq	11fb8 <__assert_fail@plt+0xe2c>
   11a48:	ldrb	r3, [r9, #17]
   11a4c:	cmp	r3, #0
   11a50:	bne	11bbc <__assert_fail@plt+0xa30>
   11a54:	ldrd	r0, [sp, #40]	; 0x28
   11a58:	mov	r2, r0
   11a5c:	mov	r3, r1
   11a60:	orrs	r3, r2, r3
   11a64:	beq	11ac4 <__assert_fail@plt+0x938>
   11a68:	mov	r3, #0
   11a6c:	cmp	r1, r3
   11a70:	mvn	r2, #0
   11a74:	cmpeq	r0, r2
   11a78:	ldrls	r3, [sp, #40]	; 0x28
   11a7c:	bls	11a94 <__assert_fail@plt+0x908>
   11a80:	ldr	r2, [pc, #1792]	; 12188 <__assert_fail@plt+0xffc>
   11a84:	mov	r3, #0
   11a88:	bl	1daa4 <__assert_fail@plt+0xc918>
   11a8c:	add	r3, r2, #999424	; 0xf4000
   11a90:	add	r3, r3, #576	; 0x240
   11a94:	mov	r2, #5
   11a98:	str	r2, [sp]
   11a9c:	ldr	r1, [pc, #1768]	; 1218c <__assert_fail@plt+0x1000>
   11aa0:	ldr	r2, [pc, #1768]	; 12190 <__assert_fail@plt+0x1004>
   11aa4:	mov	r0, #0
   11aa8:	bl	11180 <dcngettext@plt>
   11aac:	ldrd	r2, [sp, #40]	; 0x28
   11ab0:	mov	r1, #0
   11ab4:	strd	r2, [sp]
   11ab8:	mov	r2, r0
   11abc:	mov	r0, r1
   11ac0:	bl	11000 <error@plt>
   11ac4:	ldrd	r0, [sp, #80]	; 0x50
   11ac8:	mov	r2, r0
   11acc:	mov	r3, r1
   11ad0:	orrs	r3, r2, r3
   11ad4:	beq	11b34 <__assert_fail@plt+0x9a8>
   11ad8:	mov	r3, #0
   11adc:	cmp	r1, r3
   11ae0:	mvn	r2, #0
   11ae4:	cmpeq	r0, r2
   11ae8:	ldrls	r3, [sp, #80]	; 0x50
   11aec:	bls	11b04 <__assert_fail@plt+0x978>
   11af0:	ldr	r2, [pc, #1680]	; 12188 <__assert_fail@plt+0xffc>
   11af4:	mov	r3, #0
   11af8:	bl	1daa4 <__assert_fail@plt+0xc918>
   11afc:	add	r3, r2, #999424	; 0xf4000
   11b00:	add	r3, r3, #576	; 0x240
   11b04:	mov	r2, #5
   11b08:	str	r2, [sp]
   11b0c:	ldr	r1, [pc, #1664]	; 12194 <__assert_fail@plt+0x1008>
   11b10:	ldr	r2, [pc, #1664]	; 12198 <__assert_fail@plt+0x100c>
   11b14:	mov	r0, #0
   11b18:	bl	11180 <dcngettext@plt>
   11b1c:	ldrd	r2, [sp, #80]	; 0x50
   11b20:	mov	r1, #0
   11b24:	strd	r2, [sp]
   11b28:	mov	r2, r0
   11b2c:	mov	r0, r1
   11b30:	bl	11000 <error@plt>
   11b34:	ldrd	r0, [sp, #88]	; 0x58
   11b38:	mov	r2, r0
   11b3c:	mov	r3, r1
   11b40:	orrs	r3, r2, r3
   11b44:	beq	11ba4 <__assert_fail@plt+0xa18>
   11b48:	mov	r3, #0
   11b4c:	cmp	r1, r3
   11b50:	mvn	r2, #0
   11b54:	cmpeq	r0, r2
   11b58:	ldrls	r3, [sp, #88]	; 0x58
   11b5c:	bls	11b74 <__assert_fail@plt+0x9e8>
   11b60:	ldr	r2, [pc, #1568]	; 12188 <__assert_fail@plt+0xffc>
   11b64:	mov	r3, #0
   11b68:	bl	1daa4 <__assert_fail@plt+0xc918>
   11b6c:	add	r3, r2, #999424	; 0xf4000
   11b70:	add	r3, r3, #576	; 0x240
   11b74:	mov	r2, #5
   11b78:	str	r2, [sp]
   11b7c:	ldr	r1, [pc, #1560]	; 1219c <__assert_fail@plt+0x1010>
   11b80:	ldr	r2, [pc, #1560]	; 121a0 <__assert_fail@plt+0x1014>
   11b84:	mov	r0, #0
   11b88:	bl	11180 <dcngettext@plt>
   11b8c:	ldrd	r2, [sp, #88]	; 0x58
   11b90:	mov	r1, #0
   11b94:	strd	r2, [sp]
   11b98:	mov	r2, r0
   11b9c:	mov	r0, r1
   11ba0:	bl	11000 <error@plt>
   11ba4:	ldrb	r5, [r9, #16]
   11ba8:	ldr	r3, [sp, #108]	; 0x6c
   11bac:	eor	r5, r5, #1
   11bb0:	orr	r5, r3, r5
   11bb4:	ands	r5, r5, #255	; 0xff
   11bb8:	beq	12414 <__assert_fail@plt+0x1288>
   11bbc:	ldr	r3, [sp, #108]	; 0x6c
   11bc0:	cmp	r3, #0
   11bc4:	beq	11bf8 <__assert_fail@plt+0xa6c>
   11bc8:	ldrd	r2, [sp, #80]	; 0x50
   11bcc:	ldrd	r0, [sp, #88]	; 0x58
   11bd0:	orr	r2, r2, r0
   11bd4:	orr	r3, r3, r1
   11bd8:	orrs	r3, r2, r3
   11bdc:	bne	11bf8 <__assert_fail@plt+0xa6c>
   11be0:	ldrd	r2, [sp, #40]	; 0x28
   11be4:	ldrb	r4, [r9, #20]
   11be8:	mov	r1, r2
   11bec:	orrs	r3, r1, r3
   11bf0:	eor	r4, r4, #1
   11bf4:	orreq	r4, r4, #1
   11bf8:	and	r4, r4, #1
   11bfc:	b	11c98 <__assert_fail@plt+0xb0c>
   11c00:	ldr	r1, [pc, #1436]	; 121a4 <__assert_fail@plt+0x1018>
   11c04:	mov	r0, r5
   11c08:	bl	19ec8 <__assert_fail@plt+0x8d3c>
   11c0c:	subs	fp, r0, #0
   11c10:	strne	r5, [sp, #72]	; 0x48
   11c14:	bne	1161c <__assert_fail@plt+0x490>
   11c18:	bl	11090 <__errno_location@plt>
   11c1c:	mov	r2, r5
   11c20:	mov	r1, #3
   11c24:	ldr	r4, [r0]
   11c28:	mov	r0, fp
   11c2c:	bl	1bd94 <__assert_fail@plt+0xac08>
   11c30:	mov	r1, r4
   11c34:	ldr	r2, [pc, #1352]	; 12184 <__assert_fail@plt+0xff8>
   11c38:	mov	r3, r0
   11c3c:	mov	r0, fp
   11c40:	bl	11000 <error@plt>
   11c44:	ldr	r4, [sp, #48]	; 0x30
   11c48:	b	11c98 <__assert_fail@plt+0xb0c>
   11c4c:	cmp	r3, #0
   11c50:	beq	11ca8 <__assert_fail@plt+0xb1c>
   11c54:	bl	19dc8 <__assert_fail@plt+0x8c3c>
   11c58:	mov	r2, #5
   11c5c:	ldr	r1, [pc, #1348]	; 121a8 <__assert_fail@plt+0x101c>
   11c60:	mov	r0, #0
   11c64:	bl	10f7c <dcgettext@plt>
   11c68:	mov	r5, #0
   11c6c:	mov	r4, r0
   11c70:	ldr	r2, [sp, #72]	; 0x48
   11c74:	mov	r1, #3
   11c78:	mov	r0, #0
   11c7c:	bl	1bd94 <__assert_fail@plt+0xac08>
   11c80:	mov	r2, r4
   11c84:	mov	r1, r5
   11c88:	mov	r3, r0
   11c8c:	mov	r0, #0
   11c90:	bl	11000 <error@plt>
   11c94:	ldr	r4, [sp, #48]	; 0x30
   11c98:	ldr	r3, [sp, #56]	; 0x38
   11c9c:	and	r3, r3, r4
   11ca0:	str	r3, [sp, #56]	; 0x38
   11ca4:	b	115bc <__assert_fail@plt+0x430>
   11ca8:	bl	11138 <clearerr_unlocked@plt>
   11cac:	b	11c58 <__assert_fail@plt+0xacc>
   11cb0:	ldr	r3, [pc, #1316]	; 121dc <__assert_fail@plt+0x1050>
   11cb4:	ldrb	sl, [r3]
   11cb8:	cmp	sl, #10
   11cbc:	beq	12374 <__assert_fail@plt+0x11e8>
   11cc0:	ldr	r8, [sp, #24]
   11cc4:	ldr	r3, [sp, #36]	; 0x24
   11cc8:	cmp	r3, #0
   11ccc:	bne	122f8 <__assert_fail@plt+0x116c>
   11cd0:	ldr	r3, [r9]
   11cd4:	lsrs	r3, r3, #1
   11cd8:	beq	11d18 <__assert_fail@plt+0xb8c>
   11cdc:	ldr	r7, [pc, #1224]	; 121ac <__assert_fail@plt+0x1020>
   11ce0:	add	fp, sp, #143	; 0x8f
   11ce4:	mov	r4, #0
   11ce8:	mov	r6, #1
   11cec:	ldrb	r2, [fp, #1]!
   11cf0:	mov	r1, r7
   11cf4:	mov	r0, r6
   11cf8:	bl	110c0 <__printf_chk@plt>
   11cfc:	ldr	r3, [r9]
   11d00:	add	r4, r4, #1
   11d04:	cmp	r4, r3, lsr #1
   11d08:	bcc	11cec <__assert_fail@plt+0xb60>
   11d0c:	ldr	r3, [sp, #36]	; 0x24
   11d10:	cmp	r3, #0
   11d14:	bne	11d74 <__assert_fail@plt+0xbe8>
   11d18:	ldr	r3, [pc, #1016]	; 12118 <__assert_fail@plt+0xf8c>
   11d1c:	ldr	r0, [r3]
   11d20:	ldr	r3, [r0, #20]
   11d24:	ldr	r2, [r0, #24]
   11d28:	cmp	r3, r2
   11d2c:	addcc	r1, r3, #1
   11d30:	movcc	r2, #32
   11d34:	strcc	r1, [r0, #20]
   11d38:	strbcc	r2, [r3]
   11d3c:	bcs	12408 <__assert_fail@plt+0x127c>
   11d40:	ldr	r3, [pc, #976]	; 12118 <__assert_fail@plt+0xf8c>
   11d44:	ldr	r0, [r3]
   11d48:	ldr	r2, [r0, #24]
   11d4c:	ldr	r3, [r0, #20]
   11d50:	cmp	r3, r2
   11d54:	addcc	r2, r3, #1
   11d58:	strcc	r2, [r0, #20]
   11d5c:	ldrbcc	r2, [sp, #112]	; 0x70
   11d60:	strbcc	r2, [r3]
   11d64:	bcs	123fc <__assert_fail@plt+0x1270>
   11d68:	mov	r1, r8
   11d6c:	mov	r0, r5
   11d70:	bl	12788 <__assert_fail@plt+0x15fc>
   11d74:	ldr	r3, [pc, #924]	; 12118 <__assert_fail@plt+0xf8c>
   11d78:	ldr	r0, [r3]
   11d7c:	ldr	r3, [r0, #20]
   11d80:	ldr	r2, [r0, #24]
   11d84:	cmp	r3, r2
   11d88:	addcc	r2, r3, #1
   11d8c:	strcc	r2, [r0, #20]
   11d90:	ldrcc	r8, [sp, #56]	; 0x38
   11d94:	strbcc	sl, [r3]
   11d98:	bcc	119e0 <__assert_fail@plt+0x854>
   11d9c:	mov	r1, sl
   11da0:	bl	11108 <__overflow@plt>
   11da4:	ldr	r8, [sp, #56]	; 0x38
   11da8:	b	119e0 <__assert_fail@plt+0x854>
   11dac:	ldr	r3, [sp, #28]
   11db0:	strb	r7, [r1]
   11db4:	mov	r0, #512	; 0x200
   11db8:	mov	r1, #0
   11dbc:	strd	r0, [r3, #8]
   11dc0:	b	117a0 <__assert_fail@plt+0x614>
   11dc4:	ldrb	r3, [r9, #4]
   11dc8:	cmp	r3, #0
   11dcc:	bne	11f7c <__assert_fail@plt+0xdf0>
   11dd0:	ldr	r3, [sp, #56]	; 0x38
   11dd4:	eor	r0, r3, #1
   11dd8:	uxtb	r0, r0
   11ddc:	add	sp, sp, #292	; 0x124
   11de0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11de4:	mov	r2, #512	; 0x200
   11de8:	mov	r3, #0
   11dec:	strd	r2, [r9, #8]
   11df0:	b	11448 <__assert_fail@plt+0x2bc>
   11df4:	strb	r3, [r6, r5]
   11df8:	ldr	r0, [sp, #52]	; 0x34
   11dfc:	bl	1272c <__assert_fail@plt+0x15a0>
   11e00:	cmp	r0, #0
   11e04:	beq	11960 <__assert_fail@plt+0x7d4>
   11e08:	add	r1, r5, #1
   11e0c:	sub	r3, r4, r1
   11e10:	cmp	r3, #1
   11e14:	beq	123bc <__assert_fail@plt+0x1230>
   11e18:	ldrb	r3, [r6, r1]
   11e1c:	cmp	r3, #32
   11e20:	cmpne	r3, #42	; 0x2a
   11e24:	movne	r3, #1
   11e28:	moveq	r3, #0
   11e2c:	bne	123bc <__assert_fail@plt+0x1230>
   11e30:	ldr	r2, [pc, #932]	; 121dc <__assert_fail@plt+0x1050>
   11e34:	ldr	r2, [r2, #4]
   11e38:	cmp	r2, #1
   11e3c:	ldrne	r2, [pc, #920]	; 121dc <__assert_fail@plt+0x1050>
   11e40:	addne	r1, r5, #2
   11e44:	strne	r3, [r2, #4]
   11e48:	ldr	r3, [sp, #64]	; 0x40
   11e4c:	add	r5, r6, r1
   11e50:	cmp	r3, #0
   11e54:	ldreq	r7, [sp, #52]	; 0x34
   11e58:	beq	11e7c <__assert_fail@plt+0xcf0>
   11e5c:	sub	r1, r4, r1
   11e60:	mov	r0, r5
   11e64:	bl	12670 <__assert_fail@plt+0x14e4>
   11e68:	ldr	r7, [sp, #52]	; 0x34
   11e6c:	adds	r0, r0, #0
   11e70:	movne	r0, #1
   11e74:	cmp	r0, #0
   11e78:	beq	11960 <__assert_fail@plt+0x7d4>
   11e7c:	ldr	r3, [sp, #60]	; 0x3c
   11e80:	cmp	r3, #0
   11e84:	bne	11e9c <__assert_fail@plt+0xd10>
   11e88:	ldr	r1, [pc, #740]	; 12174 <__assert_fail@plt+0xfe8>
   11e8c:	mov	r0, r5
   11e90:	bl	10eec <strcmp@plt>
   11e94:	cmp	r0, #0
   11e98:	beq	11960 <__assert_fail@plt+0x7d4>
   11e9c:	ldr	r3, [sp, #28]
   11ea0:	ldrb	r3, [r3, #17]
   11ea4:	cmp	r3, #0
   11ea8:	ldrne	r3, [sp, #48]	; 0x30
   11eac:	strne	r3, [sp, #52]	; 0x34
   11eb0:	bne	11ecc <__assert_fail@plt+0xd40>
   11eb4:	mov	r1, #10
   11eb8:	mov	r0, r5
   11ebc:	bl	11084 <strchr@plt>
   11ec0:	adds	r3, r0, #0
   11ec4:	movne	r3, #1
   11ec8:	str	r3, [sp, #52]	; 0x34
   11ecc:	add	r2, sp, #136	; 0x88
   11ed0:	ldr	r1, [sp, #104]	; 0x68
   11ed4:	mov	r0, r5
   11ed8:	bl	12880 <__assert_fail@plt+0x16f4>
   11edc:	ldr	r2, [sp, #52]	; 0x34
   11ee0:	and	r3, r2, #1
   11ee4:	str	r3, [sp, #64]	; 0x40
   11ee8:	subs	r3, r0, #0
   11eec:	str	r3, [sp, #76]	; 0x4c
   11ef0:	ldr	r3, [sp, #28]
   11ef4:	bne	11ff8 <__assert_fail@plt+0xe6c>
   11ef8:	ldrd	r0, [sp, #80]	; 0x50
   11efc:	ldrb	r3, [r3, #17]
   11f00:	adds	r0, r0, #1
   11f04:	adc	r1, r1, #0
   11f08:	cmp	r3, #0
   11f0c:	strd	r0, [sp, #80]	; 0x50
   11f10:	bne	11f70 <__assert_fail@plt+0xde4>
   11f14:	cmp	r2, #0
   11f18:	beq	11f44 <__assert_fail@plt+0xdb8>
   11f1c:	ldr	r3, [pc, #500]	; 12118 <__assert_fail@plt+0xf8c>
   11f20:	ldr	r0, [r3]
   11f24:	ldr	r3, [r0, #20]
   11f28:	ldr	r2, [r0, #24]
   11f2c:	cmp	r3, r2
   11f30:	addcc	r1, r3, #1
   11f34:	movcc	r2, #92	; 0x5c
   11f38:	strcc	r1, [r0, #20]
   11f3c:	strbcc	r2, [r3]
   11f40:	bcs	12450 <__assert_fail@plt+0x12c4>
   11f44:	ldr	r1, [sp, #64]	; 0x40
   11f48:	mov	r0, r5
   11f4c:	bl	12788 <__assert_fail@plt+0x15fc>
   11f50:	ldr	r1, [pc, #600]	; 121b0 <__assert_fail@plt+0x1024>
   11f54:	mov	r2, #5
   11f58:	mov	r0, #0
   11f5c:	bl	10f7c <dcgettext@plt>
   11f60:	ldr	r1, [pc, #588]	; 121b4 <__assert_fail@plt+0x1028>
   11f64:	mov	r2, r0
   11f68:	mov	r0, #1
   11f6c:	bl	110c0 <__printf_chk@plt>
   11f70:	ldr	r3, [sp, #24]
   11f74:	str	r3, [sp, #76]	; 0x4c
   11f78:	b	11664 <__assert_fail@plt+0x4d8>
   11f7c:	ldr	r3, [pc, #504]	; 1217c <__assert_fail@plt+0xff0>
   11f80:	ldr	r0, [r3]
   11f84:	bl	19dc8 <__assert_fail@plt+0x8c3c>
   11f88:	cmn	r0, #1
   11f8c:	bne	11dd0 <__assert_fail@plt+0xc44>
   11f90:	bl	11090 <__errno_location@plt>
   11f94:	ldr	r1, [pc, #476]	; 12178 <__assert_fail@plt+0xfec>
   11f98:	mov	r2, #5
   11f9c:	ldr	r4, [r0]
   11fa0:	mov	r0, #0
   11fa4:	bl	10f7c <dcgettext@plt>
   11fa8:	mov	r1, r4
   11fac:	mov	r2, r0
   11fb0:	mov	r0, #1
   11fb4:	bl	11000 <error@plt>
   11fb8:	mov	r0, r3
   11fbc:	mov	r2, #5
   11fc0:	ldr	r1, [pc, #496]	; 121b8 <__assert_fail@plt+0x102c>
   11fc4:	mov	r6, r3
   11fc8:	bl	10f7c <dcgettext@plt>
   11fcc:	ldr	r2, [sp, #72]	; 0x48
   11fd0:	mov	r1, #3
   11fd4:	mov	r5, r0
   11fd8:	mov	r0, r6
   11fdc:	bl	1bd94 <__assert_fail@plt+0xac08>
   11fe0:	mov	r2, r5
   11fe4:	mov	r1, r6
   11fe8:	mov	r3, r0
   11fec:	mov	r0, r6
   11ff0:	bl	11000 <error@plt>
   11ff4:	b	11bf8 <__assert_fail@plt+0xa6c>
   11ff8:	ldrb	r3, [r3, #16]
   11ffc:	cmp	r3, #0
   12000:	beq	12010 <__assert_fail@plt+0xe84>
   12004:	ldrb	r3, [sp, #136]	; 0x88
   12008:	cmp	r3, #0
   1200c:	bne	11f70 <__assert_fail@plt+0xde4>
   12010:	ldr	r3, [sp, #28]
   12014:	ldr	r3, [r3]
   12018:	lsrs	r4, r3, #1
   1201c:	beq	12294 <__assert_fail@plt+0x1108>
   12020:	bl	11030 <__ctype_tolower_loc@plt>
   12024:	ldr	r3, [sp, #104]	; 0x68
   12028:	mov	r6, #0
   1202c:	mov	r2, r7
   12030:	sub	r1, r3, #1
   12034:	ldr	r0, [r0]
   12038:	b	1206c <__assert_fail@plt+0xee0>
   1203c:	ldr	lr, [pc, #376]	; 121bc <__assert_fail@plt+0x1030>
   12040:	and	r3, r3, #15
   12044:	ldrb	ip, [r2, #1]
   12048:	add	r3, lr, r3
   1204c:	ldrb	r3, [r3, #280]	; 0x118
   12050:	ldr	ip, [r0, ip, lsl #2]
   12054:	cmp	ip, r3
   12058:	bne	1208c <__assert_fail@plt+0xf00>
   1205c:	add	r6, r6, #1
   12060:	cmp	r4, r6
   12064:	add	r2, r2, #2
   12068:	beq	12294 <__assert_fail@plt+0x1108>
   1206c:	ldrb	r3, [r1, #1]!
   12070:	ldr	ip, [pc, #324]	; 121bc <__assert_fail@plt+0x1030>
   12074:	ldrb	lr, [r7, r6, lsl #1]
   12078:	add	ip, ip, r3, lsr #4
   1207c:	ldrb	ip, [ip, #280]	; 0x118
   12080:	ldr	lr, [r0, lr, lsl #2]
   12084:	cmp	lr, ip
   12088:	beq	1203c <__assert_fail@plt+0xeb0>
   1208c:	cmp	r4, r6
   12090:	beq	12294 <__assert_fail@plt+0x1108>
   12094:	ldr	r3, [sp, #28]
   12098:	ldrd	r0, [sp, #88]	; 0x58
   1209c:	ldrb	r3, [r3, #17]
   120a0:	adds	r0, r0, #1
   120a4:	adc	r1, r1, #0
   120a8:	cmp	r3, #0
   120ac:	strd	r0, [sp, #88]	; 0x58
   120b0:	bne	11f70 <__assert_fail@plt+0xde4>
   120b4:	ldr	r3, [sp, #52]	; 0x34
   120b8:	cmp	r3, #0
   120bc:	beq	123dc <__assert_fail@plt+0x1250>
   120c0:	ldr	r3, [pc, #80]	; 12118 <__assert_fail@plt+0xf8c>
   120c4:	ldr	r0, [r3]
   120c8:	ldr	r3, [r0, #20]
   120cc:	ldr	r2, [r0, #24]
   120d0:	cmp	r3, r2
   120d4:	addcc	r1, r3, #1
   120d8:	movcc	r2, #92	; 0x5c
   120dc:	strcc	r1, [r0, #20]
   120e0:	strbcc	r2, [r3]
   120e4:	bcs	12488 <__assert_fail@plt+0x12fc>
   120e8:	ldr	r1, [sp, #64]	; 0x40
   120ec:	mov	r0, r5
   120f0:	bl	12788 <__assert_fail@plt+0x15fc>
   120f4:	cmp	r4, r6
   120f8:	beq	122dc <__assert_fail@plt+0x1150>
   120fc:	mov	r2, #5
   12100:	ldr	r1, [pc, #184]	; 121c0 <__assert_fail@plt+0x1034>
   12104:	b	11f58 <__assert_fail@plt+0xdcc>
   12108:	andeq	lr, r1, r4, rrx
   1210c:	andeq	lr, r1, ip, ror r5
   12110:	ldrdeq	lr, [r1], -r4
   12114:	andeq	r9, r1, r4, lsr #25
   12118:	andeq	r0, r3, r4, lsl #3
   1211c:	ldrdeq	sp, [r1], -ip
   12120:	strdeq	lr, [r1], -r8
   12124:	muleq	r3, r0, r1
   12128:	andeq	r0, r0, r1, lsl #2
   1212c:	andeq	r0, r0, r3, lsl #2
   12130:	andeq	r0, r3, ip, lsl r1
   12134:	ldrdeq	lr, [r1], -r8
   12138:	andeq	lr, r1, r8, ror #11
   1213c:	andeq	sp, r1, r0, ror #27
   12140:	ldrdeq	lr, [r1], -r0
   12144:	andeq	r0, r3, r8, lsl #3
   12148:	muleq	r1, r4, r5
   1214c:			; <UNDEFINED> instruction: 0x0001e5b8
   12150:	andeq	lr, r1, ip, asr #12
   12154:	andeq	lr, r1, r8, lsl #13
   12158:	andeq	lr, r1, r4, asr #13
   1215c:	andeq	lr, r1, r0, lsl r7
   12160:	andeq	lr, r1, r8, asr r7
   12164:	muleq	r1, r8, r7
   12168:	ldrdeq	lr, [r1], -r8
   1216c:	andeq	lr, r1, r8, lsl r8
   12170:	andeq	r0, r3, r0, ror r1
   12174:	ldrdeq	sp, [r1], -r8
   12178:	andeq	lr, r1, r8, asr r8
   1217c:	andeq	r0, r3, r0, lsl #3
   12180:	andeq	lr, r1, r4, lsl #17
   12184:			; <UNDEFINED> instruction: 0x0001e5b4
   12188:	andeq	r4, pc, r0, asr #4
   1218c:	andeq	lr, r1, ip, asr #18
   12190:	andeq	lr, r1, ip, lsl r9
   12194:	andeq	lr, r1, r8, lsr #19
   12198:	andeq	lr, r1, r8, ror r9
   1219c:	andeq	lr, r1, r4, lsl #20
   121a0:	ldrdeq	lr, [r1], -r4
   121a4:	ldrdeq	sp, [r1], -ip
   121a8:	ldrdeq	lr, [r1], -ip
   121ac:	andeq	lr, r1, r4, ror #20
   121b0:			; <UNDEFINED> instruction: 0x0001e8b4
   121b4:	andeq	lr, r1, r8, asr #17
   121b8:	andeq	lr, r1, ip, ror #17
   121bc:	andeq	sp, r1, r4, lsr #25
   121c0:	ldrdeq	lr, [r1], -r0
   121c4:	andeq	lr, r1, r8, ror #16
   121c8:	ldrdeq	lr, [r1], -r8
   121cc:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   121d0:	andeq	lr, r1, r8, asr sl
   121d4:	andeq	lr, r1, ip, asr sl
   121d8:	andeq	r0, r3, r4, lsl #3
   121dc:	andeq	r0, r3, r0, lsl r1
   121e0:	andeq	lr, r1, r0, asr sl
   121e4:	andeq	lr, r1, r4, lsr sl
   121e8:	andeq	lr, r1, r4, lsr #11
   121ec:	andeq	lr, r1, r0, lsl #12
   121f0:	andeq	sp, r1, ip, asr lr
   121f4:	andeq	lr, r1, r8, lsr #12
   121f8:	mov	r0, r3
   121fc:	mov	r2, #5
   12200:	ldr	r1, [pc, #-68]	; 121c4 <__assert_fail@plt+0x1038>
   12204:	mov	r4, r3
   12208:	bl	10f7c <dcgettext@plt>
   1220c:	ldr	r2, [sp, #72]	; 0x48
   12210:	mov	r1, #3
   12214:	mov	r5, r0
   12218:	mov	r0, r4
   1221c:	bl	1bd94 <__assert_fail@plt+0xac08>
   12220:	mov	r2, r5
   12224:	mov	r1, r4
   12228:	mov	r3, r0
   1222c:	mov	r0, #1
   12230:	bl	11000 <error@plt>
   12234:	add	r0, r6, r2
   12238:	str	ip, [sp]
   1223c:	add	r3, sp, #136	; 0x88
   12240:	mov	r2, #0
   12244:	add	r1, sp, #132	; 0x84
   12248:	bl	1cbc8 <__assert_fail@plt+0xba3c>
   1224c:	cmp	r0, #0
   12250:	bne	11960 <__assert_fail@plt+0x7d4>
   12254:	ldrd	r0, [sp, #136]	; 0x88
   12258:	orrs	r3, r0, r1
   1225c:	beq	11960 <__assert_fail@plt+0x7d4>
   12260:	ldr	ip, [sp, #28]
   12264:	ldrd	r2, [ip, #8]
   12268:	cmp	r1, r3
   1226c:	cmpeq	r0, r2
   12270:	bhi	11960 <__assert_fail@plt+0x7d4>
   12274:	and	r2, r0, #7
   12278:	mov	r3, #0
   1227c:	orrs	r3, r2, r3
   12280:	bne	11960 <__assert_fail@plt+0x7d4>
   12284:	ldr	r3, [sp, #132]	; 0x84
   12288:	strd	r0, [ip, #8]
   1228c:	sub	r2, r3, r6
   12290:	b	117a0 <__assert_fail@plt+0x614>
   12294:	ldr	r3, [sp, #28]
   12298:	ldrb	r3, [r3, #17]
   1229c:	cmp	r3, #0
   122a0:	str	r3, [sp, #108]	; 0x6c
   122a4:	bne	11f70 <__assert_fail@plt+0xde4>
   122a8:	ldr	r3, [sp, #28]
   122ac:	ldrb	r3, [r3, #19]
   122b0:	cmp	r3, #0
   122b4:	str	r3, [sp, #108]	; 0x6c
   122b8:	bne	11f70 <__assert_fail@plt+0xde4>
   122bc:	ldr	r3, [sp, #52]	; 0x34
   122c0:	cmp	r3, #0
   122c4:	bne	12538 <__assert_fail@plt+0x13ac>
   122c8:	ldr	r3, [sp, #76]	; 0x4c
   122cc:	mov	r0, r5
   122d0:	mov	r1, #0
   122d4:	str	r3, [sp, #108]	; 0x6c
   122d8:	bl	12788 <__assert_fail@plt+0x15fc>
   122dc:	ldr	r3, [sp, #28]
   122e0:	ldrb	r3, [r3, #19]
   122e4:	cmp	r3, #0
   122e8:	bne	11f70 <__assert_fail@plt+0xde4>
   122ec:	mov	r2, #5
   122f0:	ldr	r1, [pc, #-304]	; 121c8 <__assert_fail@plt+0x103c>
   122f4:	b	11f58 <__assert_fail@plt+0xdcc>
   122f8:	ldr	r3, [pc, #-296]	; 121d8 <__assert_fail@plt+0x104c>
   122fc:	mov	r2, #7
   12300:	mov	r1, #1
   12304:	ldr	r3, [r3]
   12308:	ldr	r0, [pc, #-288]	; 121f0 <__assert_fail@plt+0x1064>
   1230c:	bl	10f58 <fwrite_unlocked@plt>
   12310:	ldrd	r2, [r9, #8]
   12314:	ldr	r0, [pc, #-336]	; 121cc <__assert_fail@plt+0x1040>
   12318:	mov	r1, #0
   1231c:	cmp	r3, r1
   12320:	cmpeq	r2, r0
   12324:	bls	123ec <__assert_fail@plt+0x1260>
   12328:	ldr	r3, [pc, #-344]	; 121d8 <__assert_fail@plt+0x104c>
   1232c:	mov	r2, #2
   12330:	mov	r1, #1
   12334:	ldr	r3, [r3]
   12338:	ldr	r0, [pc, #-368]	; 121d0 <__assert_fail@plt+0x1044>
   1233c:	bl	10f58 <fwrite_unlocked@plt>
   12340:	mov	r1, r8
   12344:	mov	r0, r5
   12348:	bl	12788 <__assert_fail@plt+0x15fc>
   1234c:	ldr	r3, [pc, #-380]	; 121d8 <__assert_fail@plt+0x104c>
   12350:	mov	r2, #4
   12354:	mov	r1, #1
   12358:	ldr	r3, [r3]
   1235c:	ldr	r0, [pc, #-400]	; 121d4 <__assert_fail@plt+0x1048>
   12360:	bl	10f58 <fwrite_unlocked@plt>
   12364:	ldr	r3, [r9]
   12368:	lsrs	r3, r3, #1
   1236c:	bne	11cdc <__assert_fail@plt+0xb50>
   12370:	b	11d74 <__assert_fail@plt+0xbe8>
   12374:	mov	r1, #92	; 0x5c
   12378:	mov	r0, r5
   1237c:	bl	11084 <strchr@plt>
   12380:	cmp	r0, #0
   12384:	beq	1245c <__assert_fail@plt+0x12d0>
   12388:	ldr	r3, [pc, #-440]	; 121d8 <__assert_fail@plt+0x104c>
   1238c:	ldr	r0, [r3]
   12390:	ldr	r3, [r0, #20]
   12394:	ldr	r2, [r0, #24]
   12398:	cmp	r3, r2
   1239c:	addcc	r1, r3, #1
   123a0:	movcc	r2, #92	; 0x5c
   123a4:	strcc	r1, [r0, #20]
   123a8:	strbcc	r2, [r3]
   123ac:	bcc	11cc4 <__assert_fail@plt+0xb38>
   123b0:	mov	r1, #92	; 0x5c
   123b4:	bl	11108 <__overflow@plt>
   123b8:	b	11cc4 <__assert_fail@plt+0xb38>
   123bc:	ldr	r3, [pc, #-488]	; 121dc <__assert_fail@plt+0x1050>
   123c0:	ldr	r3, [r3, #4]
   123c4:	cmp	r3, #0
   123c8:	movne	r3, #1
   123cc:	ldrne	r2, [pc, #-504]	; 121dc <__assert_fail@plt+0x1050>
   123d0:	strne	r3, [r2, #4]
   123d4:	bne	11e48 <__assert_fail@plt+0xcbc>
   123d8:	b	11960 <__assert_fail@plt+0x7d4>
   123dc:	mov	r0, r5
   123e0:	mov	r1, #0
   123e4:	bl	12788 <__assert_fail@plt+0x15fc>
   123e8:	b	120fc <__assert_fail@plt+0xf70>
   123ec:	ldr	r1, [pc, #-532]	; 121e0 <__assert_fail@plt+0x1054>
   123f0:	mov	r0, #1
   123f4:	bl	110c0 <__printf_chk@plt>
   123f8:	b	12328 <__assert_fail@plt+0x119c>
   123fc:	ldr	r1, [sp, #116]	; 0x74
   12400:	bl	11108 <__overflow@plt>
   12404:	b	11d68 <__assert_fail@plt+0xbdc>
   12408:	mov	r1, #32
   1240c:	bl	11108 <__overflow@plt>
   12410:	b	11d40 <__assert_fail@plt+0xbb4>
   12414:	mov	r2, #5
   12418:	ldr	r1, [pc, #-572]	; 121e4 <__assert_fail@plt+0x1058>
   1241c:	mov	r0, r5
   12420:	bl	10f7c <dcgettext@plt>
   12424:	ldr	r2, [sp, #72]	; 0x48
   12428:	mov	r1, #3
   1242c:	mov	r6, r0
   12430:	mov	r0, r5
   12434:	bl	1bd94 <__assert_fail@plt+0xac08>
   12438:	mov	r2, r6
   1243c:	mov	r1, r5
   12440:	mov	r3, r0
   12444:	mov	r0, r5
   12448:	bl	11000 <error@plt>
   1244c:	b	11bf8 <__assert_fail@plt+0xa6c>
   12450:	mov	r1, #92	; 0x5c
   12454:	bl	11108 <__overflow@plt>
   12458:	b	11f44 <__assert_fail@plt+0xdb8>
   1245c:	mov	r1, sl
   12460:	mov	r0, r5
   12464:	bl	11084 <strchr@plt>
   12468:	cmp	r0, #0
   1246c:	bne	12388 <__assert_fail@plt+0x11fc>
   12470:	mov	r1, #13
   12474:	mov	r0, r5
   12478:	bl	11084 <strchr@plt>
   1247c:	cmp	r0, #0
   12480:	bne	12388 <__assert_fail@plt+0x11fc>
   12484:	b	11cc0 <__assert_fail@plt+0xb34>
   12488:	mov	r1, #92	; 0x5c
   1248c:	bl	11108 <__overflow@plt>
   12490:	b	120e8 <__assert_fail@plt+0xf5c>
   12494:	mov	r1, r4
   12498:	mov	r0, r5
   1249c:	bl	12670 <__assert_fail@plt+0x14e4>
   124a0:	cmp	r0, #0
   124a4:	bne	1182c <__assert_fail@plt+0x6a0>
   124a8:	b	11960 <__assert_fail@plt+0x7d4>
   124ac:	mov	r2, #5
   124b0:	ldr	r1, [pc, #-720]	; 121e8 <__assert_fail@plt+0x105c>
   124b4:	mov	r0, r4
   124b8:	bl	10f7c <dcgettext@plt>
   124bc:	mov	r5, r0
   124c0:	ldr	r0, [sp, #28]
   124c4:	bl	1bf18 <__assert_fail@plt+0xad8c>
   124c8:	mov	r2, r5
   124cc:	mov	r1, r4
   124d0:	mov	r3, r0
   124d4:	mov	r0, r4
   124d8:	bl	11000 <error@plt>
   124dc:	mov	r2, #5
   124e0:	ldr	r1, [pc, #-764]	; 121ec <__assert_fail@plt+0x1060>
   124e4:	mov	r0, r4
   124e8:	bl	10f7c <dcgettext@plt>
   124ec:	mov	r5, r0
   124f0:	ldr	r0, [pc, #-776]	; 121f0 <__assert_fail@plt+0x1064>
   124f4:	bl	1bf18 <__assert_fail@plt+0xad8c>
   124f8:	mov	r3, #512	; 0x200
   124fc:	str	r3, [sp]
   12500:	mov	r2, r5
   12504:	mov	r1, r4
   12508:	mov	r3, r0
   1250c:	mov	r0, #1
   12510:	bl	11000 <error@plt>
   12514:	ldr	r1, [pc, #-808]	; 121f4 <__assert_fail@plt+0x1068>
   12518:	mov	r2, #5
   1251c:	mov	r0, #0
   12520:	bl	10f7c <dcgettext@plt>
   12524:	mov	r1, #0
   12528:	mov	r2, r0
   1252c:	mov	r0, r1
   12530:	bl	11000 <error@plt>
   12534:	b	11268 <__assert_fail@plt+0xdc>
   12538:	ldr	r3, [sp, #76]	; 0x4c
   1253c:	mov	r6, r4
   12540:	str	r3, [sp, #108]	; 0x6c
   12544:	b	120c0 <__assert_fail@plt+0xf34>
   12548:	mov	fp, #0
   1254c:	mov	lr, #0
   12550:	pop	{r1}		; (ldr r1, [sp], #4)
   12554:	mov	r2, sp
   12558:	push	{r2}		; (str r2, [sp, #-4]!)
   1255c:	push	{r0}		; (str r0, [sp, #-4]!)
   12560:	ldr	ip, [pc, #16]	; 12578 <__assert_fail@plt+0x13ec>
   12564:	push	{ip}		; (str ip, [sp, #-4]!)
   12568:	ldr	r0, [pc, #12]	; 1257c <__assert_fail@plt+0x13f0>
   1256c:	ldr	r3, [pc, #12]	; 12580 <__assert_fail@plt+0x13f4>
   12570:	bl	11018 <__libc_start_main@plt>
   12574:	bl	11168 <abort@plt>
   12578:	andeq	sp, r1, r8, ror ip
   1257c:	muleq	r1, r8, r1
   12580:	andeq	sp, r1, r8, lsl ip
   12584:	ldr	r3, [pc, #20]	; 125a0 <__assert_fail@plt+0x1414>
   12588:	ldr	r2, [pc, #20]	; 125a4 <__assert_fail@plt+0x1418>
   1258c:	add	r3, pc, r3
   12590:	ldr	r2, [r3, r2]
   12594:	cmp	r2, #0
   12598:	bxeq	lr
   1259c:	b	1103c <__gmon_start__@plt>
   125a0:	andeq	sp, r1, ip, ror #20
   125a4:	andeq	r0, r0, r4, lsl #2
   125a8:	ldr	r3, [pc, #28]	; 125cc <__assert_fail@plt+0x1440>
   125ac:	ldr	r0, [pc, #28]	; 125d0 <__assert_fail@plt+0x1444>
   125b0:	sub	r3, r3, r0
   125b4:	cmp	r3, #6
   125b8:	bxls	lr
   125bc:	ldr	r3, [pc, #16]	; 125d4 <__assert_fail@plt+0x1448>
   125c0:	cmp	r3, #0
   125c4:	bxeq	lr
   125c8:	bx	r3
   125cc:	andeq	r0, r3, r7, ror #2
   125d0:	andeq	r0, r3, r4, ror #2
   125d4:	andeq	r0, r0, r0
   125d8:	ldr	r1, [pc, #36]	; 12604 <__assert_fail@plt+0x1478>
   125dc:	ldr	r0, [pc, #36]	; 12608 <__assert_fail@plt+0x147c>
   125e0:	sub	r1, r1, r0
   125e4:	asr	r1, r1, #2
   125e8:	add	r1, r1, r1, lsr #31
   125ec:	asrs	r1, r1, #1
   125f0:	bxeq	lr
   125f4:	ldr	r3, [pc, #16]	; 1260c <__assert_fail@plt+0x1480>
   125f8:	cmp	r3, #0
   125fc:	bxeq	lr
   12600:	bx	r3
   12604:	andeq	r0, r3, r4, ror #2
   12608:	andeq	r0, r3, r4, ror #2
   1260c:	andeq	r0, r0, r0
   12610:	push	{r4, lr}
   12614:	ldr	r4, [pc, #24]	; 12634 <__assert_fail@plt+0x14a8>
   12618:	ldrb	r3, [r4]
   1261c:	cmp	r3, #0
   12620:	popne	{r4, pc}
   12624:	bl	125a8 <__assert_fail@plt+0x141c>
   12628:	mov	r3, #1
   1262c:	strb	r3, [r4]
   12630:	pop	{r4, pc}
   12634:	andeq	r0, r3, ip, lsl #3
   12638:	ldr	r0, [pc, #40]	; 12668 <__assert_fail@plt+0x14dc>
   1263c:	ldr	r3, [r0]
   12640:	cmp	r3, #0
   12644:	bne	1264c <__assert_fail@plt+0x14c0>
   12648:	b	125d8 <__assert_fail@plt+0x144c>
   1264c:	ldr	r3, [pc, #24]	; 1266c <__assert_fail@plt+0x14e0>
   12650:	cmp	r3, #0
   12654:	beq	12648 <__assert_fail@plt+0x14bc>
   12658:	push	{r4, lr}
   1265c:	blx	r3
   12660:	pop	{r4, lr}
   12664:	b	125d8 <__assert_fail@plt+0x144c>
   12668:	andeq	pc, r2, r4, lsl pc	; <UNPREDICTABLE>
   1266c:	andeq	r0, r0, r0
   12670:	cmp	r1, #0
   12674:	bxeq	lr
   12678:	push	{r4, r5, r6, r7, lr}
   1267c:	mov	ip, r0
   12680:	add	lr, r0, #1
   12684:	mov	r3, #0
   12688:	sub	r4, r1, #1
   1268c:	mov	r7, #10
   12690:	mov	r6, #13
   12694:	ldrb	r2, [r0, r3]
   12698:	cmp	r2, #0
   1269c:	beq	126d0 <__assert_fail@plt+0x1544>
   126a0:	cmp	r2, #92	; 0x5c
   126a4:	bne	126d8 <__assert_fail@plt+0x154c>
   126a8:	cmp	r4, r3
   126ac:	beq	126d0 <__assert_fail@plt+0x1544>
   126b0:	add	r3, r3, #1
   126b4:	ldrb	r2, [r0, r3]
   126b8:	cmp	r2, #110	; 0x6e
   126bc:	beq	12720 <__assert_fail@plt+0x1594>
   126c0:	cmp	r2, #114	; 0x72
   126c4:	beq	12708 <__assert_fail@plt+0x157c>
   126c8:	cmp	r2, #92	; 0x5c
   126cc:	beq	12714 <__assert_fail@plt+0x1588>
   126d0:	mov	r0, #0
   126d4:	pop	{r4, r5, r6, r7, pc}
   126d8:	mov	r5, lr
   126dc:	strb	r2, [ip]
   126e0:	add	r3, r3, #1
   126e4:	cmp	r1, r3
   126e8:	add	lr, lr, #1
   126ec:	add	ip, ip, #1
   126f0:	bhi	12694 <__assert_fail@plt+0x1508>
   126f4:	add	r1, r0, r1
   126f8:	cmp	r5, r1
   126fc:	movcc	r3, #0
   12700:	strbcc	r3, [r5]
   12704:	pop	{r4, r5, r6, r7, pc}
   12708:	strb	r6, [ip]
   1270c:	mov	r5, lr
   12710:	b	126e0 <__assert_fail@plt+0x1554>
   12714:	strb	r2, [ip]
   12718:	mov	r5, lr
   1271c:	b	126e0 <__assert_fail@plt+0x1554>
   12720:	strb	r7, [ip]
   12724:	mov	r5, lr
   12728:	b	126e0 <__assert_fail@plt+0x1554>
   1272c:	ldr	r3, [pc, #80]	; 12784 <__assert_fail@plt+0x15f8>
   12730:	push	{r4, r5, r6, lr}
   12734:	mov	r5, r0
   12738:	ldr	r4, [r3]
   1273c:	cmp	r4, #0
   12740:	beq	12774 <__assert_fail@plt+0x15e8>
   12744:	bl	11054 <__ctype_b_loc@plt>
   12748:	mov	r3, r5
   1274c:	add	r1, r5, r4
   12750:	ldr	ip, [r0]
   12754:	ldrb	r2, [r3], #1
   12758:	mov	r5, r3
   1275c:	lsl	r2, r2, #1
   12760:	ldrh	r0, [ip, r2]
   12764:	ands	r0, r0, #4096	; 0x1000
   12768:	popeq	{r4, r5, r6, pc}
   1276c:	cmp	r1, r3
   12770:	bne	12754 <__assert_fail@plt+0x15c8>
   12774:	ldrb	r0, [r5]
   12778:	clz	r0, r0
   1277c:	lsr	r0, r0, #5
   12780:	pop	{r4, r5, r6, pc}
   12784:	muleq	r3, r0, r1
   12788:	cmp	r1, #0
   1278c:	beq	12858 <__assert_fail@plt+0x16cc>
   12790:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12794:	mov	r4, r0
   12798:	ldrb	r1, [r0]
   1279c:	cmp	r1, #0
   127a0:	beq	1286c <__assert_fail@plt+0x16e0>
   127a4:	ldr	r5, [pc, #196]	; 12870 <__assert_fail@plt+0x16e4>
   127a8:	ldr	sl, [pc, #196]	; 12874 <__assert_fail@plt+0x16e8>
   127ac:	ldr	r9, [pc, #196]	; 12878 <__assert_fail@plt+0x16ec>
   127b0:	ldr	r8, [pc, #196]	; 1287c <__assert_fail@plt+0x16f0>
   127b4:	mov	r7, #2
   127b8:	mov	r6, #1
   127bc:	b	127fc <__assert_fail@plt+0x1670>
   127c0:	cmp	r1, #92	; 0x5c
   127c4:	beq	12840 <__assert_fail@plt+0x16b4>
   127c8:	cmp	r1, #10
   127cc:	beq	12828 <__assert_fail@plt+0x169c>
   127d0:	ldr	r0, [r5]
   127d4:	ldr	r3, [r0, #20]
   127d8:	ldr	r2, [r0, #24]
   127dc:	add	ip, r3, #1
   127e0:	cmp	r3, r2
   127e4:	strcc	ip, [r0, #20]
   127e8:	strbcc	r1, [r3]
   127ec:	bcs	12864 <__assert_fail@plt+0x16d8>
   127f0:	ldrb	r1, [r4, #1]!
   127f4:	cmp	r1, #0
   127f8:	beq	12824 <__assert_fail@plt+0x1698>
   127fc:	cmp	r1, #13
   12800:	bne	127c0 <__assert_fail@plt+0x1634>
   12804:	mov	r1, r6
   12808:	ldr	r3, [r5]
   1280c:	mov	r2, r7
   12810:	mov	r0, sl
   12814:	bl	10f58 <fwrite_unlocked@plt>
   12818:	ldrb	r1, [r4, #1]!
   1281c:	cmp	r1, #0
   12820:	bne	127fc <__assert_fail@plt+0x1670>
   12824:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12828:	ldr	r3, [r5]
   1282c:	mov	r2, r7
   12830:	mov	r1, r6
   12834:	mov	r0, r8
   12838:	bl	10f58 <fwrite_unlocked@plt>
   1283c:	b	127f0 <__assert_fail@plt+0x1664>
   12840:	ldr	r3, [r5]
   12844:	mov	r2, r7
   12848:	mov	r1, r6
   1284c:	mov	r0, r9
   12850:	bl	10f58 <fwrite_unlocked@plt>
   12854:	b	127f0 <__assert_fail@plt+0x1664>
   12858:	ldr	r3, [pc, #16]	; 12870 <__assert_fail@plt+0x16e4>
   1285c:	ldr	r1, [r3]
   12860:	b	10ec8 <fputs_unlocked@plt>
   12864:	bl	11108 <__overflow@plt>
   12868:	b	127f0 <__assert_fail@plt+0x1664>
   1286c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12870:	andeq	r0, r3, r4, lsl #3
   12874:	ldrdeq	sp, [r1], -r0
   12878:	ldrdeq	sp, [r1], -r4
   1287c:	andeq	sp, r1, ip, asr #27
   12880:	push	{r4, r5, r6, r7, r8, lr}
   12884:	mov	r7, r1
   12888:	ldr	r1, [pc, #400]	; 12a20 <__assert_fail@plt+0x1894>
   1288c:	mov	r5, r2
   12890:	mov	r6, r0
   12894:	bl	10eec <strcmp@plt>
   12898:	mov	r3, #0
   1289c:	strb	r3, [r5]
   128a0:	cmp	r0, r3
   128a4:	bne	12960 <__assert_fail@plt+0x17d4>
   128a8:	ldr	r2, [pc, #372]	; 12a24 <__assert_fail@plt+0x1898>
   128ac:	ldr	r4, [pc, #372]	; 12a28 <__assert_fail@plt+0x189c>
   128b0:	mov	r3, #1
   128b4:	ldr	r5, [r2]
   128b8:	mov	r1, #2
   128bc:	mov	r0, r5
   128c0:	strb	r3, [r4, #4]
   128c4:	bl	19d94 <__assert_fail@plt+0x8c08>
   128c8:	ldr	r3, [r4, #8]
   128cc:	ldr	r2, [r4, #12]
   128d0:	mov	r1, r7
   128d4:	lsr	r3, r3, #3
   128d8:	orr	r2, r3, r2, lsl #29
   128dc:	mov	r0, r5
   128e0:	bl	19b98 <__assert_fail@plt+0x8a0c>
   128e4:	subs	r4, r0, #0
   128e8:	beq	128f4 <__assert_fail@plt+0x1768>
   128ec:	bl	11090 <__errno_location@plt>
   128f0:	ldr	r4, [r0]
   128f4:	mov	r0, r5
   128f8:	bl	11138 <clearerr_unlocked@plt>
   128fc:	cmp	r4, #0
   12900:	bne	12930 <__assert_fail@plt+0x17a4>
   12904:	mov	r4, #1
   12908:	mov	r0, r4
   1290c:	pop	{r4, r5, r6, r7, r8, pc}
   12910:	bl	11090 <__errno_location@plt>
   12914:	ldr	r4, [r0]
   12918:	mov	r0, r8
   1291c:	bl	19dc8 <__assert_fail@plt+0x8c3c>
   12920:	cmp	r0, #0
   12924:	beq	128fc <__assert_fail@plt+0x1770>
   12928:	cmp	r4, #0
   1292c:	beq	129b4 <__assert_fail@plt+0x1828>
   12930:	mov	r2, r6
   12934:	mov	r1, #3
   12938:	mov	r0, #0
   1293c:	bl	1bd94 <__assert_fail@plt+0xac08>
   12940:	mov	r1, r4
   12944:	ldr	r2, [pc, #224]	; 12a2c <__assert_fail@plt+0x18a0>
   12948:	mov	r4, #0
   1294c:	mov	r3, r0
   12950:	mov	r0, #0
   12954:	bl	11000 <error@plt>
   12958:	mov	r0, r4
   1295c:	pop	{r4, r5, r6, r7, r8, pc}
   12960:	ldr	r1, [pc, #200]	; 12a30 <__assert_fail@plt+0x18a4>
   12964:	mov	r0, r6
   12968:	bl	19ec8 <__assert_fail@plt+0x8d3c>
   1296c:	subs	r8, r0, #0
   12970:	beq	129c0 <__assert_fail@plt+0x1834>
   12974:	mov	r1, #2
   12978:	bl	19d94 <__assert_fail@plt+0x8c08>
   1297c:	ldr	r2, [pc, #164]	; 12a28 <__assert_fail@plt+0x189c>
   12980:	mov	r1, r7
   12984:	mov	r0, r8
   12988:	ldr	r3, [r2, #8]
   1298c:	ldr	r2, [r2, #12]
   12990:	lsr	r3, r3, #3
   12994:	orr	r2, r3, r2, lsl #29
   12998:	bl	19b98 <__assert_fail@plt+0x8a0c>
   1299c:	cmp	r0, #0
   129a0:	bne	12910 <__assert_fail@plt+0x1784>
   129a4:	mov	r0, r8
   129a8:	bl	19dc8 <__assert_fail@plt+0x8c3c>
   129ac:	cmp	r0, #0
   129b0:	beq	12904 <__assert_fail@plt+0x1778>
   129b4:	bl	11090 <__errno_location@plt>
   129b8:	ldr	r4, [r0]
   129bc:	b	128fc <__assert_fail@plt+0x1770>
   129c0:	ldr	r3, [pc, #96]	; 12a28 <__assert_fail@plt+0x189c>
   129c4:	ldrb	r4, [r3, #16]
   129c8:	cmp	r4, #0
   129cc:	beq	12a14 <__assert_fail@plt+0x1888>
   129d0:	bl	11090 <__errno_location@plt>
   129d4:	ldr	r7, [r0]
   129d8:	cmp	r7, #2
   129dc:	moveq	r3, #1
   129e0:	strbeq	r3, [r5]
   129e4:	beq	12908 <__assert_fail@plt+0x177c>
   129e8:	mov	r2, r6
   129ec:	mov	r1, #3
   129f0:	mov	r0, #0
   129f4:	bl	1bd94 <__assert_fail@plt+0xac08>
   129f8:	mov	r1, r7
   129fc:	ldr	r2, [pc, #40]	; 12a2c <__assert_fail@plt+0x18a0>
   12a00:	mov	r4, #0
   12a04:	mov	r3, r0
   12a08:	mov	r0, #0
   12a0c:	bl	11000 <error@plt>
   12a10:	b	12908 <__assert_fail@plt+0x177c>
   12a14:	bl	11090 <__errno_location@plt>
   12a18:	ldr	r7, [r0]
   12a1c:	b	129e8 <__assert_fail@plt+0x185c>
   12a20:	ldrdeq	sp, [r1], -r8
   12a24:	andeq	r0, r3, r0, lsl #3
   12a28:	muleq	r3, r0, r1
   12a2c:			; <UNDEFINED> instruction: 0x0001e5b4
   12a30:	ldrdeq	sp, [r1], -ip
   12a34:	subs	r5, r0, #0
   12a38:	push	{r7, lr}
   12a3c:	sub	sp, sp, #56	; 0x38
   12a40:	beq	12a7c <__assert_fail@plt+0x18f0>
   12a44:	ldr	r3, [pc, #896]	; 12dcc <__assert_fail@plt+0x1c40>
   12a48:	mov	r2, #5
   12a4c:	ldr	r1, [pc, #892]	; 12dd0 <__assert_fail@plt+0x1c44>
   12a50:	mov	r0, #0
   12a54:	ldr	r4, [r3]
   12a58:	bl	10f7c <dcgettext@plt>
   12a5c:	ldr	r3, [pc, #880]	; 12dd4 <__assert_fail@plt+0x1c48>
   12a60:	mov	r1, #1
   12a64:	ldr	r3, [r3]
   12a68:	mov	r2, r0
   12a6c:	mov	r0, r4
   12a70:	bl	110d8 <__fprintf_chk@plt>
   12a74:	mov	r0, r5
   12a78:	bl	11060 <exit@plt>
   12a7c:	mov	r2, #5
   12a80:	ldr	r1, [pc, #848]	; 12dd8 <__assert_fail@plt+0x1c4c>
   12a84:	bl	10f7c <dcgettext@plt>
   12a88:	ldr	r3, [pc, #836]	; 12dd4 <__assert_fail@plt+0x1c48>
   12a8c:	ldr	r6, [pc, #840]	; 12ddc <__assert_fail@plt+0x1c50>
   12a90:	ldr	r4, [pc, #840]	; 12de0 <__assert_fail@plt+0x1c54>
   12a94:	ldr	r2, [r3]
   12a98:	mov	r1, r0
   12a9c:	mov	r0, #1
   12aa0:	bl	110c0 <__printf_chk@plt>
   12aa4:	mov	r2, #5
   12aa8:	ldr	r1, [pc, #820]	; 12de4 <__assert_fail@plt+0x1c58>
   12aac:	mov	r0, r5
   12ab0:	bl	10f7c <dcgettext@plt>
   12ab4:	mov	r3, #512	; 0x200
   12ab8:	ldr	r2, [pc, #808]	; 12de8 <__assert_fail@plt+0x1c5c>
   12abc:	mov	r1, r0
   12ac0:	mov	r0, #1
   12ac4:	bl	110c0 <__printf_chk@plt>
   12ac8:	mov	r2, #5
   12acc:	ldr	r1, [pc, #792]	; 12dec <__assert_fail@plt+0x1c60>
   12ad0:	mov	r0, r5
   12ad4:	bl	10f7c <dcgettext@plt>
   12ad8:	ldr	r1, [r6]
   12adc:	bl	10ec8 <fputs_unlocked@plt>
   12ae0:	mov	r2, #5
   12ae4:	ldr	r1, [pc, #772]	; 12df0 <__assert_fail@plt+0x1c64>
   12ae8:	mov	r0, r5
   12aec:	bl	10f7c <dcgettext@plt>
   12af0:	ldr	r1, [r6]
   12af4:	bl	10ec8 <fputs_unlocked@plt>
   12af8:	mov	r2, #5
   12afc:	ldr	r1, [pc, #752]	; 12df4 <__assert_fail@plt+0x1c68>
   12b00:	mov	r0, r5
   12b04:	bl	10f7c <dcgettext@plt>
   12b08:	ldr	r1, [r6]
   12b0c:	bl	10ec8 <fputs_unlocked@plt>
   12b10:	mov	r2, #5
   12b14:	ldr	r1, [pc, #732]	; 12df8 <__assert_fail@plt+0x1c6c>
   12b18:	mov	r0, r5
   12b1c:	bl	10f7c <dcgettext@plt>
   12b20:	ldr	r1, [r6]
   12b24:	bl	10ec8 <fputs_unlocked@plt>
   12b28:	mov	r2, #5
   12b2c:	ldr	r1, [pc, #712]	; 12dfc <__assert_fail@plt+0x1c70>
   12b30:	mov	r0, r5
   12b34:	bl	10f7c <dcgettext@plt>
   12b38:	ldr	r1, [r6]
   12b3c:	bl	10ec8 <fputs_unlocked@plt>
   12b40:	mov	r2, #5
   12b44:	ldr	r1, [pc, #692]	; 12e00 <__assert_fail@plt+0x1c74>
   12b48:	mov	r0, r5
   12b4c:	bl	10f7c <dcgettext@plt>
   12b50:	ldr	r1, [r6]
   12b54:	bl	10ec8 <fputs_unlocked@plt>
   12b58:	mov	r2, #5
   12b5c:	ldr	r1, [pc, #672]	; 12e04 <__assert_fail@plt+0x1c78>
   12b60:	mov	r0, r5
   12b64:	bl	10f7c <dcgettext@plt>
   12b68:	ldr	r1, [r6]
   12b6c:	bl	10ec8 <fputs_unlocked@plt>
   12b70:	mov	r2, #5
   12b74:	ldr	r1, [pc, #652]	; 12e08 <__assert_fail@plt+0x1c7c>
   12b78:	mov	r0, r5
   12b7c:	bl	10f7c <dcgettext@plt>
   12b80:	ldr	r1, [r6]
   12b84:	bl	10ec8 <fputs_unlocked@plt>
   12b88:	mov	r2, #5
   12b8c:	ldr	r1, [pc, #632]	; 12e0c <__assert_fail@plt+0x1c80>
   12b90:	mov	r0, r5
   12b94:	bl	10f7c <dcgettext@plt>
   12b98:	ldr	r1, [r6]
   12b9c:	bl	10ec8 <fputs_unlocked@plt>
   12ba0:	mov	r2, #5
   12ba4:	ldr	r1, [pc, #612]	; 12e10 <__assert_fail@plt+0x1c84>
   12ba8:	mov	r0, r5
   12bac:	bl	10f7c <dcgettext@plt>
   12bb0:	ldr	r1, [r6]
   12bb4:	bl	10ec8 <fputs_unlocked@plt>
   12bb8:	mov	r2, #5
   12bbc:	ldr	r1, [pc, #592]	; 12e14 <__assert_fail@plt+0x1c88>
   12bc0:	mov	r0, r5
   12bc4:	bl	10f7c <dcgettext@plt>
   12bc8:	ldr	r1, [r6]
   12bcc:	bl	10ec8 <fputs_unlocked@plt>
   12bd0:	mov	r2, #5
   12bd4:	ldr	r1, [pc, #572]	; 12e18 <__assert_fail@plt+0x1c8c>
   12bd8:	mov	r0, r5
   12bdc:	bl	10f7c <dcgettext@plt>
   12be0:	ldr	r2, [pc, #564]	; 12e1c <__assert_fail@plt+0x1c90>
   12be4:	mov	r1, r0
   12be8:	mov	r0, #1
   12bec:	bl	110c0 <__printf_chk@plt>
   12bf0:	mov	r2, #5
   12bf4:	ldr	r1, [pc, #548]	; 12e20 <__assert_fail@plt+0x1c94>
   12bf8:	mov	r0, r5
   12bfc:	bl	10f7c <dcgettext@plt>
   12c00:	ldr	r1, [r6]
   12c04:	bl	10ec8 <fputs_unlocked@plt>
   12c08:	ldm	r4!, {r0, r1, r2, r3}
   12c0c:	mov	lr, sp
   12c10:	stmia	lr!, {r0, r1, r2, r3}
   12c14:	ldm	r4!, {r0, r1, r2, r3}
   12c18:	ldr	ip, [sp]
   12c1c:	stmia	lr!, {r0, r1, r2, r3}
   12c20:	cmp	ip, #0
   12c24:	ldm	r4!, {r0, r1, r2, r3}
   12c28:	stmia	lr!, {r0, r1, r2, r3}
   12c2c:	ldm	r4, {r0, r1}
   12c30:	moveq	r4, sp
   12c34:	stm	lr, {r0, r1}
   12c38:	beq	12c68 <__assert_fail@plt+0x1adc>
   12c3c:	ldr	r7, [pc, #480]	; 12e24 <__assert_fail@plt+0x1c98>
   12c40:	mov	r4, sp
   12c44:	b	12c54 <__assert_fail@plt+0x1ac8>
   12c48:	ldr	ip, [r4, #8]!
   12c4c:	cmp	ip, #0
   12c50:	beq	12c68 <__assert_fail@plt+0x1adc>
   12c54:	mov	r1, ip
   12c58:	mov	r0, r7
   12c5c:	bl	10eec <strcmp@plt>
   12c60:	cmp	r0, #0
   12c64:	bne	12c48 <__assert_fail@plt+0x1abc>
   12c68:	ldr	r4, [r4, #4]
   12c6c:	mov	r2, #5
   12c70:	cmp	r4, #0
   12c74:	ldr	r1, [pc, #428]	; 12e28 <__assert_fail@plt+0x1c9c>
   12c78:	beq	12d20 <__assert_fail@plt+0x1b94>
   12c7c:	mov	r0, #0
   12c80:	bl	10f7c <dcgettext@plt>
   12c84:	ldr	r3, [pc, #416]	; 12e2c <__assert_fail@plt+0x1ca0>
   12c88:	ldr	r2, [pc, #416]	; 12e30 <__assert_fail@plt+0x1ca4>
   12c8c:	mov	r1, r0
   12c90:	mov	r0, #1
   12c94:	bl	110c0 <__printf_chk@plt>
   12c98:	mov	r1, #0
   12c9c:	mov	r0, #5
   12ca0:	bl	11114 <setlocale@plt>
   12ca4:	cmp	r0, #0
   12ca8:	ldreq	r7, [pc, #372]	; 12e24 <__assert_fail@plt+0x1c98>
   12cac:	beq	12cc8 <__assert_fail@plt+0x1b3c>
   12cb0:	mov	r2, #3
   12cb4:	ldr	r1, [pc, #376]	; 12e34 <__assert_fail@plt+0x1ca8>
   12cb8:	bl	1115c <strncmp@plt>
   12cbc:	ldr	r7, [pc, #352]	; 12e24 <__assert_fail@plt+0x1c98>
   12cc0:	cmp	r0, #0
   12cc4:	bne	12db0 <__assert_fail@plt+0x1c24>
   12cc8:	mov	r2, #5
   12ccc:	ldr	r1, [pc, #356]	; 12e38 <__assert_fail@plt+0x1cac>
   12cd0:	mov	r0, #0
   12cd4:	bl	10f7c <dcgettext@plt>
   12cd8:	ldr	r3, [pc, #324]	; 12e24 <__assert_fail@plt+0x1c98>
   12cdc:	ldr	r2, [pc, #328]	; 12e2c <__assert_fail@plt+0x1ca0>
   12ce0:	mov	r1, r0
   12ce4:	mov	r0, #1
   12ce8:	bl	110c0 <__printf_chk@plt>
   12cec:	mov	r2, #5
   12cf0:	ldr	r1, [pc, #324]	; 12e3c <__assert_fail@plt+0x1cb0>
   12cf4:	mov	r0, #0
   12cf8:	bl	10f7c <dcgettext@plt>
   12cfc:	ldr	r2, [pc, #316]	; 12e40 <__assert_fail@plt+0x1cb4>
   12d00:	cmp	r4, r7
   12d04:	ldr	r3, [pc, #312]	; 12e44 <__assert_fail@plt+0x1cb8>
   12d08:	movne	r3, r2
   12d0c:	mov	r1, r0
   12d10:	mov	r2, r4
   12d14:	mov	r0, #1
   12d18:	bl	110c0 <__printf_chk@plt>
   12d1c:	b	12a74 <__assert_fail@plt+0x18e8>
   12d20:	mov	r0, r4
   12d24:	bl	10f7c <dcgettext@plt>
   12d28:	ldr	r3, [pc, #252]	; 12e2c <__assert_fail@plt+0x1ca0>
   12d2c:	ldr	r2, [pc, #252]	; 12e30 <__assert_fail@plt+0x1ca4>
   12d30:	mov	r1, r0
   12d34:	mov	r0, #1
   12d38:	bl	110c0 <__printf_chk@plt>
   12d3c:	mov	r1, r4
   12d40:	mov	r0, #5
   12d44:	bl	11114 <setlocale@plt>
   12d48:	cmp	r0, #0
   12d4c:	beq	12d64 <__assert_fail@plt+0x1bd8>
   12d50:	mov	r2, #3
   12d54:	ldr	r1, [pc, #216]	; 12e34 <__assert_fail@plt+0x1ca8>
   12d58:	bl	1115c <strncmp@plt>
   12d5c:	cmp	r0, #0
   12d60:	bne	12da8 <__assert_fail@plt+0x1c1c>
   12d64:	mov	r2, #5
   12d68:	ldr	r1, [pc, #200]	; 12e38 <__assert_fail@plt+0x1cac>
   12d6c:	mov	r0, #0
   12d70:	bl	10f7c <dcgettext@plt>
   12d74:	ldr	r3, [pc, #168]	; 12e24 <__assert_fail@plt+0x1c98>
   12d78:	ldr	r2, [pc, #172]	; 12e2c <__assert_fail@plt+0x1ca0>
   12d7c:	mov	r4, r3
   12d80:	mov	r1, r0
   12d84:	mov	r0, #1
   12d88:	bl	110c0 <__printf_chk@plt>
   12d8c:	ldr	r1, [pc, #168]	; 12e3c <__assert_fail@plt+0x1cb0>
   12d90:	mov	r2, #5
   12d94:	mov	r0, #0
   12d98:	bl	10f7c <dcgettext@plt>
   12d9c:	ldr	r3, [pc, #160]	; 12e44 <__assert_fail@plt+0x1cb8>
   12da0:	mov	r1, r0
   12da4:	b	12d10 <__assert_fail@plt+0x1b84>
   12da8:	ldr	r7, [pc, #116]	; 12e24 <__assert_fail@plt+0x1c98>
   12dac:	mov	r4, r7
   12db0:	mov	r2, #5
   12db4:	ldr	r1, [pc, #140]	; 12e48 <__assert_fail@plt+0x1cbc>
   12db8:	mov	r0, #0
   12dbc:	bl	10f7c <dcgettext@plt>
   12dc0:	ldr	r1, [r6]
   12dc4:	bl	10ec8 <fputs_unlocked@plt>
   12dc8:	b	12cc8 <__assert_fail@plt+0x1b3c>
   12dcc:	andeq	r0, r3, r8, ror r1
   12dd0:	andeq	sp, r1, r8, ror #27
   12dd4:			; <UNDEFINED> instruction: 0x000301b4
   12dd8:	andeq	sp, r1, r0, lsl lr
   12ddc:	andeq	r0, r3, r4, lsl #3
   12de0:	andeq	sp, r1, r4, lsr #25
   12de4:	andeq	sp, r1, r4, lsr lr
   12de8:	andeq	sp, r1, ip, asr lr
   12dec:	andeq	sp, r1, r4, ror #28
   12df0:	muleq	r1, ip, lr
   12df4:	andeq	sp, r1, r8, ror #29
   12df8:	andeq	sp, r1, r8, lsl pc
   12dfc:	andeq	sp, r1, r0, ror #30
   12e00:	strdeq	sp, [r1], -r8
   12e04:	andeq	lr, r1, r0, lsr r0
   12e08:	andeq	lr, r1, r8, rrx
   12e0c:	andeq	lr, r1, r8, ror #1
   12e10:	andeq	lr, r1, r0, lsr #5
   12e14:	ldrdeq	lr, [r1], -r0
   12e18:	andeq	lr, r1, r8, lsl #6
   12e1c:	andeq	lr, r1, r4, lsr r3
   12e20:	andeq	lr, r1, r0, asr #6
   12e24:	andeq	sp, r1, r0, ror #27
   12e28:	muleq	r1, r0, r4
   12e2c:	andeq	lr, r1, r8, lsr #9
   12e30:	ldrdeq	lr, [r1], -r0
   12e34:	andeq	lr, r1, r0, ror #9
   12e38:	andeq	lr, r1, ip, lsr #10
   12e3c:	andeq	lr, r1, r8, asr #10
   12e40:	andeq	lr, r1, r4, rrx
   12e44:	andeq	lr, r1, r4, ror sl
   12e48:	andeq	lr, r1, r4, ror #9
   12e4c:	andeq	r0, r0, r0
   12e50:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12e54:	sub	sp, sp, #556	; 0x22c
   12e58:	mov	ip, r0
   12e5c:	mov	r2, r1
   12e60:	add	lr, sp, #296	; 0x128
   12e64:	add	r4, sp, #424	; 0x1a8
   12e68:	ldr	r0, [r2]
   12e6c:	ldr	r1, [r2, #4]
   12e70:	mov	r3, r4
   12e74:	add	r2, r2, #8
   12e78:	stmia	r3!, {r0, r1}
   12e7c:	add	r3, sp, #424	; 0x1a8
   12e80:	ldrd	r0, [r3]
   12e84:	strd	r0, [lr], #8
   12e88:	cmp	lr, r4
   12e8c:	bne	12e68 <__assert_fail@plt+0x1cdc>
   12e90:	mov	r3, lr
   12e94:	add	r2, ip, #56	; 0x38
   12e98:	sub	r1, ip, #8
   12e9c:	str	lr, [sp, #280]	; 0x118
   12ea0:	str	r1, [sp, #236]	; 0xec
   12ea4:	ldrd	r4, [r1, #8]!
   12ea8:	cmp	r1, r2
   12eac:	strd	r4, [r3], #8
   12eb0:	bne	12ea4 <__assert_fail@plt+0x1d18>
   12eb4:	str	r1, [sp, #284]	; 0x11c
   12eb8:	add	r1, sp, #432	; 0x1b0
   12ebc:	add	r3, sp, #464	; 0x1d0
   12ec0:	ldrd	r4, [r1]
   12ec4:	add	r1, sp, #312	; 0x138
   12ec8:	ldrd	r2, [r3]
   12ecc:	ldrd	r0, [r1]
   12ed0:	ldrd	r6, [ip, #72]	; 0x48
   12ed4:	adds	r4, r4, r2
   12ed8:	mov	r8, r0
   12edc:	mov	r9, r1
   12ee0:	add	r1, pc, #768	; 0x300
   12ee4:	ldrd	r0, [r1]
   12ee8:	adc	r5, r5, r3
   12eec:	strd	r8, [sp, #104]	; 0x68
   12ef0:	adds	r8, r8, r4
   12ef4:	adc	r9, r9, r5
   12ef8:	eor	r0, r0, r8
   12efc:	eor	r1, r1, r9
   12f00:	eor	r0, r0, r6
   12f04:	eor	r1, r1, r7
   12f08:	str	r1, [sp, #8]
   12f0c:	str	r0, [sp, #12]
   12f10:	add	r5, pc, #728	; 0x2d8
   12f14:	ldrd	r4, [r5]
   12f18:	ldrd	sl, [sp, #8]
   12f1c:	add	lr, sp, #448	; 0x1c0
   12f20:	add	r1, sp, #344	; 0x158
   12f24:	adds	sl, sl, r4
   12f28:	adc	fp, fp, r5
   12f2c:	mov	r4, sl
   12f30:	mov	r5, fp
   12f34:	ldrd	r6, [lr]
   12f38:	add	lr, sp, #480	; 0x1e0
   12f3c:	strd	r4, [sp, #48]	; 0x30
   12f40:	eor	r4, r4, r2
   12f44:	eor	r5, r5, r3
   12f48:	mov	r2, r4
   12f4c:	mov	r3, r5
   12f50:	ldrd	r4, [lr]
   12f54:	add	lr, sp, #328	; 0x148
   12f58:	ldrd	r0, [r1]
   12f5c:	ldrd	sl, [lr]
   12f60:	add	lr, sp, #320	; 0x140
   12f64:	strd	r0, [sp, #40]	; 0x28
   12f68:	strd	sl, [sp, #24]
   12f6c:	ldrd	sl, [lr]
   12f70:	add	lr, sp, #296	; 0x128
   12f74:	adds	r4, r4, r6
   12f78:	strd	sl, [sp, #16]
   12f7c:	ldrd	sl, [lr]
   12f80:	adc	r5, r5, r7
   12f84:	add	r1, pc, #620	; 0x26c
   12f88:	ldrd	r0, [r1]
   12f8c:	strd	sl, [sp]
   12f90:	ldrd	sl, [sp, #40]	; 0x28
   12f94:	ldrd	r6, [ip, #88]	; 0x58
   12f98:	lsr	lr, r2, #24
   12f9c:	adds	sl, sl, r4
   12fa0:	adc	fp, fp, r5
   12fa4:	mov	r4, sl
   12fa8:	mov	r5, fp
   12fac:	strd	r6, [sp, #88]	; 0x58
   12fb0:	strd	r4, [sp, #72]	; 0x48
   12fb4:	eor	r4, r4, r0
   12fb8:	eor	r5, r5, r1
   12fbc:	add	r1, sp, #472	; 0x1d8
   12fc0:	strd	r4, [sp, #56]	; 0x38
   12fc4:	ldrd	r4, [r1]
   12fc8:	add	r1, sp, #440	; 0x1b8
   12fcc:	orr	sl, lr, r3, lsl #8
   12fd0:	ldrd	r6, [r1]
   12fd4:	add	r1, sp, #456	; 0x1c8
   12fd8:	lsr	r3, r3, #24
   12fdc:	adds	r4, r4, r6
   12fe0:	adc	r5, r5, r7
   12fe4:	ldrd	r6, [ip, #80]	; 0x50
   12fe8:	orr	fp, r3, r2, lsl #8
   12fec:	strd	r6, [sp, #64]	; 0x40
   12ff0:	ldrd	r6, [r1]
   12ff4:	add	r1, sp, #424	; 0x1a8
   12ff8:	ldrd	r0, [r1]
   12ffc:	adds	r6, r6, r0
   13000:	adc	r7, r7, r1
   13004:	strd	r6, [sp, #32]
   13008:	ldrd	r6, [ip, #64]	; 0x40
   1300c:	ldrd	r0, [sp, #56]	; 0x38
   13010:	ldrd	r2, [sp, #16]
   13014:	strd	r6, [sp, #80]	; 0x50
   13018:	ldrd	r6, [sp, #88]	; 0x58
   1301c:	add	ip, sp, #480	; 0x1e0
   13020:	eor	r6, r6, r0
   13024:	eor	r7, r7, r1
   13028:	ldrd	r0, [sp, #24]
   1302c:	str	r7, [sp, #56]	; 0x38
   13030:	str	r6, [sp, #60]	; 0x3c
   13034:	adds	r0, r0, r4
   13038:	adc	r1, r1, r5
   1303c:	adds	r2, r2, r8
   13040:	mov	r4, r0
   13044:	mov	r5, r1
   13048:	adc	r3, r3, r9
   1304c:	ldrd	r0, [sp, #32]
   13050:	ldrd	r8, [sp]
   13054:	ldrd	r6, [sp, #64]	; 0x40
   13058:	strd	r4, [sp, #144]	; 0x90
   1305c:	adds	r8, r8, r0
   13060:	adc	r9, r9, r1
   13064:	add	r1, pc, #404	; 0x194
   13068:	ldrd	r0, [r1]
   1306c:	strd	r8, [sp, #128]	; 0x80
   13070:	add	r9, pc, #400	; 0x190
   13074:	ldrd	r8, [r9]
   13078:	eor	r8, r8, r4
   1307c:	adds	r4, r2, sl
   13080:	eor	r9, r9, r5
   13084:	adc	r5, r3, fp
   13088:	ldrd	r2, [sp, #128]	; 0x80
   1308c:	eor	r6, r6, r8
   13090:	eor	r7, r7, r9
   13094:	eor	r0, r0, r2
   13098:	eor	r1, r1, r3
   1309c:	mov	r8, r6
   130a0:	mov	r9, r7
   130a4:	ldrd	r2, [sp, #8]
   130a8:	ldrd	r6, [sp, #80]	; 0x50
   130ac:	strd	r4, [sp, #168]	; 0xa8
   130b0:	eor	r2, r2, r4
   130b4:	eor	r3, r3, r5
   130b8:	eor	r6, r6, r0
   130bc:	eor	r7, r7, r1
   130c0:	mov	r4, r2
   130c4:	mov	r5, r3
   130c8:	mov	r0, r6
   130cc:	mov	r1, r7
   130d0:	add	r3, pc, #312	; 0x138
   130d4:	ldrd	r2, [r3]
   130d8:	ldrd	r6, [sp, #56]	; 0x38
   130dc:	str	r1, [sp, #96]	; 0x60
   130e0:	add	r1, sp, #352	; 0x160
   130e4:	adds	r2, r2, r6
   130e8:	adc	r3, r3, r7
   130ec:	ldrd	r6, [ip]
   130f0:	str	r9, [sp, #64]	; 0x40
   130f4:	str	r8, [sp, #68]	; 0x44
   130f8:	eor	r6, r6, r2
   130fc:	eor	r7, r7, r3
   13100:	ldrd	r8, [r1]
   13104:	strd	r2, [sp, #184]	; 0xb8
   13108:	str	r0, [sp, #100]	; 0x64
   1310c:	mov	r2, r6
   13110:	ldrd	r0, [sp, #64]	; 0x40
   13114:	mov	r3, r7
   13118:	add	r7, pc, #248	; 0xf8
   1311c:	ldrd	r6, [r7]
   13120:	lsr	lr, r4, #16
   13124:	orr	lr, lr, r5, lsl #16
   13128:	adds	r6, r6, r0
   1312c:	adc	r7, r7, r1
   13130:	mov	r0, r6
   13134:	mov	r1, r7
   13138:	add	r7, pc, #224	; 0xe0
   1313c:	ldrd	r6, [r7]
   13140:	strd	r0, [sp, #152]	; 0x98
   13144:	ldrd	r0, [sp, #96]	; 0x60
   13148:	str	lr, [sp, #88]	; 0x58
   1314c:	lsr	lr, r5, #16
   13150:	adds	r6, r6, r0
   13154:	adc	r7, r7, r1
   13158:	add	r1, sp, #472	; 0x1d8
   1315c:	strd	r6, [sp, #160]	; 0xa0
   13160:	ldrd	r6, [r1]
   13164:	ldrd	r0, [sp, #152]	; 0x98
   13168:	orr	lr, lr, r4, lsl #16
   1316c:	str	lr, [sp, #92]	; 0x5c
   13170:	add	lr, sp, #456	; 0x1c8
   13174:	eor	r6, r6, r0
   13178:	eor	r7, r7, r1
   1317c:	ldrd	r4, [lr]
   13180:	mov	r0, r6
   13184:	mov	r1, r7
   13188:	ldrd	r6, [sp, #160]	; 0xa0
   1318c:	lsr	ip, r2, #24
   13190:	orr	lr, ip, r3, lsl #8
   13194:	eor	r4, r4, r6
   13198:	eor	r5, r5, r7
   1319c:	add	ip, sp, #336	; 0x150
   131a0:	strd	r4, [sp, #120]	; 0x78
   131a4:	ldrd	r4, [ip]
   131a8:	ldrd	r6, [sp, #88]	; 0x58
   131ac:	lsr	r3, r3, #24
   131b0:	strd	r4, [sp, #32]
   131b4:	ldrd	r4, [sp, #48]	; 0x30
   131b8:	add	ip, sp, #304	; 0x130
   131bc:	orr	r3, r3, r2, lsl #8
   131c0:	adds	r4, r4, r6
   131c4:	adc	r5, r5, r7
   131c8:	str	r3, [sp, #140]	; 0x8c
   131cc:	ldrd	r2, [sp, #72]	; 0x48
   131d0:	mov	r6, r4
   131d4:	mov	r7, r5
   131d8:	ldrd	r4, [ip]
   131dc:	adds	r2, r2, r8
   131e0:	strd	r8, [sp, #112]	; 0x70
   131e4:	b	13228 <__assert_fail@plt+0x209c>
   131e8:	blcs	fae26c <optarg@@GLIBC_2.4+0xf7e0e4>
   131ec:	blls	16d424 <optarg@@GLIBC_2.4+0x13d29c>
   131f0:	strbhi	sl, [sl], #1851	; 0x73b
   131f4:	bllt	19fec10 <optarg@@GLIBC_2.4+0x19cea88>
   131f8:	cmnne	lr, #1073741854	; 0x4000001e
   131fc:	blpl	ff846668 <optarg@@GLIBC_2.4+0xff8164e0>
   13200:	sfmge	f0, 3, [r6, #836]!	; 0x344
   13204:	tstpl	lr, pc, ror r2
   13208:	blx	10827be <optarg@@GLIBC_2.4+0x1052636>
   1320c:	svcne	0x0083d9ab
   13210:	svcpl	0x001d36f1
   13214:	strbge	pc, [pc, #-1338]	; 12ce2 <__assert_fail@plt+0x1b56>	; <UNPREDICTABLE>
   13218:	vcmla.f32	d15, d4, d27[0], #90
   1321c:	stclcc	3, cr15, [lr], #-456	; 0xfffffe38
   13220:	vtbl.8	d12, {d12-d13}, d8
   13224:	bvs	28cbc8 <optarg@@GLIBC_2.4+0x25ca40>
   13228:	strd	r4, [sp, #8]
   1322c:	mov	r8, r2
   13230:	mov	r4, r6
   13234:	mov	r5, r7
   13238:	ldr	r2, [sp, #120]	; 0x78
   1323c:	str	lr, [sp, #136]	; 0x88
   13240:	adc	r3, r3, r9
   13244:	strd	r6, [sp, #200]	; 0xc8
   13248:	eor	r4, r4, sl
   1324c:	ldrd	r6, [sp, #120]	; 0x78
   13250:	eor	r5, r5, fp
   13254:	mov	sl, r4
   13258:	mov	fp, r5
   1325c:	mov	r9, r3
   13260:	ldrd	r4, [sp, #136]	; 0x88
   13264:	lsr	r3, r0, #24
   13268:	orr	r3, r3, r1, lsl #8
   1326c:	lsr	r2, r2, #24
   13270:	str	r3, [sp, #80]	; 0x50
   13274:	orr	r3, r2, r7, lsl #8
   13278:	adds	r4, r4, r8
   1327c:	str	r3, [sp, #72]	; 0x48
   13280:	add	r3, sp, #360	; 0x168
   13284:	adc	r5, r5, r9
   13288:	ldrd	r8, [sp, #56]	; 0x38
   1328c:	ldrd	r2, [r3]
   13290:	lsr	r1, r1, #24
   13294:	eor	r8, r8, r4
   13298:	eor	r9, r9, r5
   1329c:	orr	r0, r1, r0, lsl #8
   132a0:	strd	r2, [sp, #48]	; 0x30
   132a4:	str	r0, [sp, #84]	; 0x54
   132a8:	mov	r2, r8
   132ac:	ldrd	r0, [sp, #32]
   132b0:	mov	r3, r9
   132b4:	ldrd	r8, [sp, #144]	; 0x90
   132b8:	strd	r4, [sp, #216]	; 0xd8
   132bc:	ldrd	r4, [sp, #8]
   132c0:	adds	r8, r8, r0
   132c4:	adc	r9, r9, r1
   132c8:	ldr	r0, [sp, #120]	; 0x78
   132cc:	strd	r8, [sp, #144]	; 0x90
   132d0:	ldrd	r8, [sp, #128]	; 0x80
   132d4:	lsr	ip, r7, #24
   132d8:	orr	lr, ip, r0, lsl #8
   132dc:	adds	r8, r8, r4
   132e0:	ldrd	r6, [sp, #144]	; 0x90
   132e4:	adc	r9, r9, r5
   132e8:	str	lr, [sp, #76]	; 0x4c
   132ec:	ldrd	r4, [sp, #80]	; 0x50
   132f0:	lsl	r1, fp, #1
   132f4:	orr	lr, r1, sl, lsr #31
   132f8:	adds	r4, r4, r6
   132fc:	adc	r5, r5, r7
   13300:	str	lr, [sp, #60]	; 0x3c
   13304:	mov	r6, r4
   13308:	mov	r7, r5
   1330c:	lsl	lr, sl, #1
   13310:	ldrd	r4, [sp, #72]	; 0x48
   13314:	orr	lr, lr, fp, lsr #31
   13318:	ldrd	sl, [sp, #48]	; 0x30
   1331c:	ldrd	r0, [sp, #64]	; 0x40
   13320:	adds	r4, r4, r8
   13324:	lsr	ip, r2, #16
   13328:	str	lr, [sp, #56]	; 0x38
   1332c:	adc	r5, r5, r9
   13330:	orr	lr, ip, r3, lsl #16
   13334:	adds	sl, sl, r4
   13338:	lsr	r3, r3, #16
   1333c:	eor	r0, r0, r6
   13340:	adc	fp, fp, r5
   13344:	mov	r8, r4
   13348:	mov	r9, r5
   1334c:	orr	r3, r3, r2, lsl #16
   13350:	ldrd	r4, [sp, #56]	; 0x38
   13354:	eor	r1, r1, r7
   13358:	str	lr, [sp, #144]	; 0x90
   1335c:	str	r3, [sp, #148]	; 0x94
   13360:	lsr	ip, r0, #16
   13364:	ldrd	r2, [sp, #144]	; 0x90
   13368:	adds	r4, r4, sl
   1336c:	orr	lr, ip, r1, lsl #16
   13370:	lsr	r1, r1, #16
   13374:	adc	r5, r5, fp
   13378:	str	lr, [sp, #120]	; 0x78
   1337c:	orr	lr, r1, r0, lsl #16
   13380:	eor	r2, r2, r4
   13384:	eor	r3, r3, r5
   13388:	str	lr, [sp, #124]	; 0x7c
   1338c:	ldrd	r0, [sp, #120]	; 0x78
   13390:	strd	r6, [sp, #208]	; 0xd0
   13394:	mov	r6, r3
   13398:	mov	r7, r2
   1339c:	ldrd	r2, [sp, #152]	; 0x98
   133a0:	mov	sl, r4
   133a4:	mov	fp, r5
   133a8:	adds	r2, r2, r0
   133ac:	adc	r3, r3, r1
   133b0:	adds	r0, r2, r6
   133b4:	adc	r1, r3, r7
   133b8:	mov	r4, r0
   133bc:	mov	r5, r1
   133c0:	ldrd	r0, [sp, #56]	; 0x38
   133c4:	strd	r4, [sp, #192]	; 0xc0
   133c8:	add	ip, sp, #368	; 0x170
   133cc:	eor	r0, r0, r4
   133d0:	eor	r1, r1, r5
   133d4:	ldrd	r4, [sp, #96]	; 0x60
   133d8:	eor	r4, r4, r8
   133dc:	eor	r5, r5, r9
   133e0:	mov	r8, r4
   133e4:	mov	r9, r5
   133e8:	ldrd	r4, [ip]
   133ec:	lsr	ip, r0, #24
   133f0:	lsr	lr, r8, #16
   133f4:	strd	r4, [sp, #56]	; 0x38
   133f8:	ldrd	r4, [sp, #80]	; 0x50
   133fc:	orr	lr, lr, r9, lsl #16
   13400:	str	lr, [sp, #80]	; 0x50
   13404:	eor	r4, r4, r2
   13408:	mov	r2, r4
   1340c:	eor	r5, r5, r3
   13410:	add	r4, sp, #376	; 0x178
   13414:	mov	r3, r5
   13418:	orr	r5, ip, r1, lsl #8
   1341c:	str	r5, [sp, #152]	; 0x98
   13420:	ldrd	r4, [r4]
   13424:	lsr	ip, r1, #24
   13428:	orr	lr, ip, r0, lsl #8
   1342c:	lsr	r1, r9, #16
   13430:	str	lr, [sp, #156]	; 0x9c
   13434:	lsl	r0, r3, #1
   13438:	orr	lr, r1, r8, lsl #16
   1343c:	strd	r4, [sp, #64]	; 0x40
   13440:	ldrd	r4, [sp, #56]	; 0x38
   13444:	str	lr, [sp, #84]	; 0x54
   13448:	orr	lr, r0, r2, lsr #31
   1344c:	ldrd	r0, [sp, #152]	; 0x98
   13450:	adds	r4, r4, sl
   13454:	adc	r5, r5, fp
   13458:	adds	r0, r0, r4
   1345c:	adc	r1, r1, r5
   13460:	mov	sl, r0
   13464:	mov	fp, r1
   13468:	ldrd	r4, [sp, #80]	; 0x50
   1346c:	ldrd	r0, [sp, #160]	; 0xa0
   13470:	lsl	r2, r2, #1
   13474:	orr	r3, r2, r3, lsr #31
   13478:	adds	r4, r4, r0
   1347c:	adc	r5, r5, r1
   13480:	mov	r0, r4
   13484:	mov	r1, r5
   13488:	str	lr, [sp, #132]	; 0x84
   1348c:	mov	r2, sl
   13490:	str	r3, [sp, #128]	; 0x80
   13494:	ldrd	r4, [sp, #64]	; 0x40
   13498:	strd	sl, [sp, #224]	; 0xe0
   1349c:	mov	r3, fp
   134a0:	ldrd	sl, [sp, #168]	; 0xa8
   134a4:	eor	r2, r2, r6
   134a8:	eor	r3, r3, r7
   134ac:	adds	sl, sl, r4
   134b0:	adc	fp, fp, r5
   134b4:	mov	r8, r2
   134b8:	mov	r9, r3
   134bc:	mov	r2, sl
   134c0:	mov	r3, fp
   134c4:	ldrd	sl, [sp, #72]	; 0x48
   134c8:	strd	r0, [sp, #176]	; 0xb0
   134cc:	lsr	ip, r9, #16
   134d0:	eor	sl, sl, r0
   134d4:	eor	fp, fp, r1
   134d8:	mov	r6, sl
   134dc:	mov	r7, fp
   134e0:	ldrd	sl, [sp, #128]	; 0x80
   134e4:	ldrd	r0, [sp, #80]	; 0x50
   134e8:	lsl	lr, r6, #1
   134ec:	adds	sl, sl, r2
   134f0:	adc	fp, fp, r3
   134f4:	add	r2, sp, #408	; 0x198
   134f8:	eor	r0, r0, sl
   134fc:	eor	r1, r1, fp
   13500:	strd	sl, [sp, #240]	; 0xf0
   13504:	mov	sl, r0
   13508:	mov	fp, r1
   1350c:	ldrd	r0, [r2]
   13510:	lsr	r3, r8, #16
   13514:	lsl	r2, r7, #1
   13518:	orr	r3, r3, r9, lsl #16
   1351c:	strd	r0, [sp, #96]	; 0x60
   13520:	str	r3, [sp, #160]	; 0xa0
   13524:	ldrd	r0, [sp, #184]	; 0xb8
   13528:	str	fp, [sp, #168]	; 0xa8
   1352c:	orr	fp, r2, r6, lsr #31
   13530:	ldrd	r2, [sp, #144]	; 0x90
   13534:	str	sl, [sp, #172]	; 0xac
   13538:	orr	sl, lr, r7, lsr #31
   1353c:	adds	r0, r0, r2
   13540:	adc	r1, r1, r3
   13544:	orr	r3, ip, r8, lsl #16
   13548:	str	r3, [sp, #164]	; 0xa4
   1354c:	ldrd	r8, [sp, #160]	; 0xa0
   13550:	ldrd	r2, [sp, #192]	; 0xc0
   13554:	ldrd	r6, [sp, #216]	; 0xd8
   13558:	add	ip, sp, #392	; 0x188
   1355c:	adds	r2, r2, r8
   13560:	adc	r3, r3, r9
   13564:	ldrd	r8, [sp, #120]	; 0x78
   13568:	strd	r2, [sp, #184]	; 0xb8
   1356c:	ldrd	r2, [sp, #168]	; 0xa8
   13570:	adds	r2, r2, r0
   13574:	adc	r3, r3, r1
   13578:	strd	r2, [sp, #192]	; 0xc0
   1357c:	ldrd	r2, [sp, #96]	; 0x60
   13580:	adds	r6, r6, r2
   13584:	adc	r7, r7, r3
   13588:	adds	r2, r6, sl
   1358c:	adc	r3, r7, fp
   13590:	ldrd	r6, [sp, #136]	; 0x88
   13594:	eor	r8, r8, r2
   13598:	eor	r9, r9, r3
   1359c:	eor	r6, r6, r0
   135a0:	eor	r7, r7, r1
   135a4:	mov	r1, r7
   135a8:	mov	r0, r6
   135ac:	ldrd	r6, [ip]
   135b0:	str	r9, [sp, #72]	; 0x48
   135b4:	str	r8, [sp, #76]	; 0x4c
   135b8:	ldrd	r4, [sp, #72]	; 0x48
   135bc:	strd	r6, [sp, #80]	; 0x50
   135c0:	ldrd	r6, [sp, #200]	; 0xc8
   135c4:	lsl	ip, r1, #1
   135c8:	orr	r9, ip, r0, lsr #31
   135cc:	adds	r6, r6, r4
   135d0:	adc	r7, r7, r5
   135d4:	lsl	r0, r0, #1
   135d8:	strd	r6, [sp, #248]	; 0xf8
   135dc:	eor	r6, r6, sl
   135e0:	eor	r7, r7, fp
   135e4:	mov	r4, r6
   135e8:	mov	r5, r7
   135ec:	orr	r8, r0, r1, lsr #31
   135f0:	ldrd	r6, [sp, #208]	; 0xd0
   135f4:	ldrd	r0, [sp, #80]	; 0x50
   135f8:	lsr	ip, r4, #24
   135fc:	adds	r6, r6, r0
   13600:	adc	r7, r7, r1
   13604:	mov	sl, r6
   13608:	add	r1, sp, #416	; 0x1a0
   1360c:	adds	r0, sl, r8
   13610:	mov	fp, r7
   13614:	ldrd	r6, [r1]
   13618:	adc	r1, fp, r9
   1361c:	mov	sl, r0
   13620:	mov	fp, r1
   13624:	ldrd	r0, [sp, #88]	; 0x58
   13628:	strd	sl, [sp, #208]	; 0xd0
   1362c:	strd	r6, [sp, #120]	; 0x78
   13630:	eor	r1, r1, fp
   13634:	eor	r0, r0, sl
   13638:	str	r1, [sp, #144]	; 0x90
   1363c:	orr	sl, ip, r5, lsl #8
   13640:	adds	r6, r6, r2
   13644:	lsr	r1, r5, #24
   13648:	orr	fp, r1, r4, lsl #8
   1364c:	adc	r7, r7, r3
   13650:	adds	r6, r6, sl
   13654:	adc	r7, r7, fp
   13658:	str	r0, [sp, #148]	; 0x94
   1365c:	ldrd	r4, [sp, #144]	; 0x90
   13660:	ldrd	r0, [sp, #176]	; 0xb0
   13664:	ldrd	r2, [sp, #192]	; 0xc0
   13668:	strd	r6, [sp, #200]	; 0xc8
   1366c:	ldrd	r6, [sp, #128]	; 0x80
   13670:	adds	r0, r0, r4
   13674:	adc	r1, r1, r5
   13678:	eor	r6, r6, r2
   1367c:	eor	r7, r7, r3
   13680:	ldrd	r4, [sp, #72]	; 0x48
   13684:	ldrd	r2, [sp, #200]	; 0xc8
   13688:	strd	r0, [sp, #216]	; 0xd8
   1368c:	eor	r0, r0, r8
   13690:	eor	r5, r5, r3
   13694:	add	r3, sp, #384	; 0x180
   13698:	eor	r4, r4, r2
   1369c:	ldrd	r2, [r3]
   136a0:	eor	r1, r1, r9
   136a4:	ldrd	r8, [sp, #240]	; 0xf0
   136a8:	strd	r2, [sp, #72]	; 0x48
   136ac:	lsr	r3, r6, #24
   136b0:	orr	r3, r3, r7, lsl #8
   136b4:	str	r3, [sp, #136]	; 0x88
   136b8:	add	r3, sp, #400	; 0x190
   136bc:	lsr	ip, r4, #16
   136c0:	ldrd	r2, [r3]
   136c4:	orr	lr, ip, r5, lsl #16
   136c8:	lsr	ip, r7, #24
   136cc:	strd	r2, [sp, #88]	; 0x58
   136d0:	ldrd	r2, [sp, #72]	; 0x48
   136d4:	str	lr, [sp, #176]	; 0xb0
   136d8:	orr	lr, ip, r6, lsl #8
   136dc:	adds	r8, r8, r2
   136e0:	adc	r9, r9, r3
   136e4:	ldrd	r2, [sp, #88]	; 0x58
   136e8:	strd	r8, [sp, #128]	; 0x80
   136ec:	ldrd	r8, [sp, #208]	; 0xd0
   136f0:	str	lr, [sp, #140]	; 0x8c
   136f4:	ldrd	r6, [sp, #136]	; 0x88
   136f8:	adds	r8, r8, r2
   136fc:	adc	r9, r9, r3
   13700:	ldrd	r2, [sp, #152]	; 0x98
   13704:	strd	r8, [sp, #208]	; 0xd0
   13708:	ldrd	r8, [sp, #184]	; 0xb8
   1370c:	lsr	ip, r0, #24
   13710:	orr	lr, ip, r1, lsl #8
   13714:	eor	r2, r2, r8
   13718:	eor	r3, r3, r9
   1371c:	ldrd	r8, [sp, #128]	; 0x80
   13720:	lsr	ip, r5, #16
   13724:	str	lr, [sp, #152]	; 0x98
   13728:	adds	r8, r8, r6
   1372c:	adc	r9, r9, r7
   13730:	ldrd	r6, [sp, #168]	; 0xa8
   13734:	orr	lr, ip, r4, lsl #16
   13738:	str	lr, [sp, #180]	; 0xb4
   1373c:	eor	r6, r6, r8
   13740:	eor	r7, r7, r9
   13744:	ldrd	r4, [sp, #248]	; 0xf8
   13748:	strd	r6, [sp, #168]	; 0xa8
   1374c:	ldrd	r6, [sp, #176]	; 0xb0
   13750:	lsr	r1, r1, #24
   13754:	orr	lr, r1, r0, lsl #8
   13758:	adds	r4, r4, r6
   1375c:	str	lr, [sp, #156]	; 0x9c
   13760:	adc	r5, r5, r7
   13764:	ldrd	r0, [sp, #208]	; 0xd0
   13768:	ldrd	r6, [sp, #152]	; 0x98
   1376c:	strd	r4, [sp, #248]	; 0xf8
   13770:	eor	r4, r4, sl
   13774:	adds	r0, r0, r6
   13778:	adc	r1, r1, r7
   1377c:	eor	r5, r5, fp
   13780:	mov	sl, r4
   13784:	mov	fp, r5
   13788:	mov	r4, r0
   1378c:	mov	r5, r1
   13790:	ldrd	r0, [sp, #144]	; 0x90
   13794:	ldrd	r6, [sp, #168]	; 0xa8
   13798:	strd	r4, [sp, #240]	; 0xf0
   1379c:	eor	r0, r0, r4
   137a0:	eor	r1, r1, r5
   137a4:	lsl	lr, r3, #1
   137a8:	ldrd	r4, [sp, #24]
   137ac:	lsr	ip, r6, #16
   137b0:	orr	lr, lr, r2, lsr #31
   137b4:	lsl	r2, r2, #1
   137b8:	orr	r3, r2, r3, lsr #31
   137bc:	orr	r2, ip, r7, lsl #16
   137c0:	adds	r4, r4, r8
   137c4:	str	r2, [sp, #144]	; 0x90
   137c8:	lsr	r2, r7, #16
   137cc:	adc	r5, r5, r9
   137d0:	orr	r2, r2, r6, lsl #16
   137d4:	ldrd	r8, [sp, #224]	; 0xe0
   137d8:	ldrd	r6, [sp, #96]	; 0x60
   137dc:	str	lr, [sp, #132]	; 0x84
   137e0:	str	r3, [sp, #128]	; 0x80
   137e4:	adds	r8, r8, r6
   137e8:	adc	r9, r9, r7
   137ec:	ldrd	r6, [sp, #128]	; 0x80
   137f0:	lsl	r3, fp, #1
   137f4:	str	r2, [sp, #148]	; 0x94
   137f8:	adds	r6, r6, r4
   137fc:	strd	r8, [sp, #168]	; 0xa8
   13800:	adc	r7, r7, r5
   13804:	orr	r9, r3, sl, lsr #31
   13808:	ldrd	r4, [sp, #144]	; 0x90
   1380c:	ldrd	r2, [sp, #192]	; 0xc0
   13810:	strd	r6, [sp, #208]	; 0xd0
   13814:	lsr	ip, r0, #16
   13818:	adds	r6, r4, r2
   1381c:	adc	r7, r5, r3
   13820:	ldrd	r2, [sp, #136]	; 0x88
   13824:	strd	r6, [sp, #224]	; 0xe0
   13828:	eor	r2, r2, r6
   1382c:	orr	r6, ip, r1, lsl #16
   13830:	lsl	ip, sl, #1
   13834:	orr	r8, ip, fp, lsr #31
   13838:	ldrd	sl, [sp, #168]	; 0xa8
   1383c:	add	ip, sp, #256	; 0x100
   13840:	lsr	r1, r1, #16
   13844:	adds	sl, sl, r8
   13848:	adc	fp, fp, r9
   1384c:	eor	r4, r4, sl
   13850:	strd	sl, [ip]
   13854:	eor	r5, r5, fp
   13858:	ldrd	sl, [sp, #208]	; 0xd0
   1385c:	eor	r3, r3, r7
   13860:	orr	r7, r1, r0, lsl #16
   13864:	eor	sl, sl, r6
   13868:	eor	fp, fp, r7
   1386c:	mov	r0, sl
   13870:	mov	r1, fp
   13874:	ldrd	sl, [sp, #216]	; 0xd8
   13878:	lsl	ip, r3, #1
   1387c:	orr	lr, ip, r2, lsr #31
   13880:	adds	sl, sl, r6
   13884:	adc	fp, fp, r7
   13888:	lsl	r2, r2, #1
   1388c:	strd	sl, [sp, #192]	; 0xc0
   13890:	str	r1, [sp, #168]	; 0xa8
   13894:	str	r0, [sp, #172]	; 0xac
   13898:	ldrd	sl, [sp, #168]	; 0xa8
   1389c:	ldrd	r0, [sp, #248]	; 0xf8
   138a0:	ldrd	r6, [sp, #56]	; 0x38
   138a4:	str	r5, [sp, #144]	; 0x90
   138a8:	adds	r0, r0, sl
   138ac:	adc	r1, r1, fp
   138b0:	ldrd	sl, [sp, #240]	; 0xf0
   138b4:	str	r4, [sp, #148]	; 0x94
   138b8:	orr	r3, r2, r3, lsr #31
   138bc:	adds	r6, r6, sl
   138c0:	adc	r7, r7, fp
   138c4:	ldrd	sl, [sp, #128]	; 0x80
   138c8:	str	r3, [sp, #136]	; 0x88
   138cc:	mov	r2, r6
   138d0:	mov	r3, r7
   138d4:	eor	sl, sl, r0
   138d8:	eor	fp, fp, r1
   138dc:	ldrd	r6, [sp, #192]	; 0xc0
   138e0:	strd	r0, [sp, #216]	; 0xd8
   138e4:	ldrd	r0, [sp, #144]	; 0x90
   138e8:	str	lr, [sp, #140]	; 0x8c
   138ec:	mov	r4, sl
   138f0:	adds	r6, r6, r0
   138f4:	adc	r7, r7, r1
   138f8:	mov	r0, r6
   138fc:	mov	r1, r7
   13900:	mov	r5, fp
   13904:	strd	r0, [sp, #240]	; 0xf0
   13908:	eor	r0, r0, r8
   1390c:	eor	r1, r1, r9
   13910:	ldrd	r8, [sp, #136]	; 0x88
   13914:	ldrd	sl, [sp, #176]	; 0xb0
   13918:	add	ip, sp, #264	; 0x108
   1391c:	adds	r8, r8, r2
   13920:	adc	r9, r9, r3
   13924:	mov	r2, r8
   13928:	mov	r3, r9
   1392c:	mov	r6, r8
   13930:	mov	r7, r9
   13934:	eor	r6, r6, sl
   13938:	eor	r7, r7, fp
   1393c:	strd	r2, [ip]
   13940:	ldrd	sl, [sp, #208]	; 0xd0
   13944:	mov	r2, r6
   13948:	mov	r3, r7
   1394c:	ldrd	r6, [sp, #48]	; 0x30
   13950:	lsr	lr, r4, #24
   13954:	lsr	ip, r0, #24
   13958:	adds	r6, r6, sl
   1395c:	add	sl, sp, #256	; 0x100
   13960:	adc	r7, r7, fp
   13964:	mov	r8, r6
   13968:	mov	r9, r7
   1396c:	ldrd	sl, [sl]
   13970:	ldrd	r6, [sp, #64]	; 0x40
   13974:	orr	lr, lr, r5, lsl #8
   13978:	str	lr, [sp, #176]	; 0xb0
   1397c:	adds	sl, sl, r6
   13980:	adc	fp, fp, r7
   13984:	mov	r6, sl
   13988:	mov	r7, fp
   1398c:	ldrd	sl, [sp, #152]	; 0x98
   13990:	strd	r6, [sp, #208]	; 0xd0
   13994:	ldrd	r6, [sp, #192]	; 0xc0
   13998:	str	r3, [sp, #152]	; 0x98
   1399c:	str	r2, [sp, #156]	; 0x9c
   139a0:	eor	r7, r7, fp
   139a4:	eor	r6, r6, sl
   139a8:	ldrd	r2, [sp, #184]	; 0xb8
   139ac:	ldrd	sl, [sp, #152]	; 0x98
   139b0:	orr	lr, ip, r1, lsl #8
   139b4:	add	ip, sp, #272	; 0x110
   139b8:	adds	r2, r2, sl
   139bc:	adc	r3, r3, fp
   139c0:	str	lr, [sp, #128]	; 0x80
   139c4:	ldrd	sl, [sp, #136]	; 0x88
   139c8:	strd	r2, [ip]
   139cc:	lsr	ip, r5, #24
   139d0:	orr	lr, ip, r4, lsl #8
   139d4:	str	lr, [sp, #180]	; 0xb4
   139d8:	mov	r4, r8
   139dc:	mov	r5, r9
   139e0:	ldrd	r8, [sp, #176]	; 0xb0
   139e4:	lsr	r1, r1, #24
   139e8:	eor	sl, sl, r2
   139ec:	eor	fp, fp, r3
   139f0:	orr	lr, r1, r0, lsl #8
   139f4:	adds	r4, r4, r8
   139f8:	str	lr, [sp, #132]	; 0x84
   139fc:	strd	sl, [sp, #184]	; 0xb8
   13a00:	adc	r5, r5, r9
   13a04:	ldrd	sl, [sp, #168]	; 0xa8
   13a08:	ldrd	r8, [sp, #128]	; 0x80
   13a0c:	ldrd	r0, [sp, #208]	; 0xd0
   13a10:	add	r3, sp, #256	; 0x100
   13a14:	eor	sl, sl, r4
   13a18:	adds	r0, r0, r8
   13a1c:	eor	fp, fp, r5
   13a20:	strd	r4, [r3]
   13a24:	adc	r1, r1, r9
   13a28:	mov	r4, sl
   13a2c:	mov	r5, fp
   13a30:	ldrd	sl, [sp, #144]	; 0x90
   13a34:	mov	r8, r0
   13a38:	mov	r9, r1
   13a3c:	add	r3, sp, #264	; 0x108
   13a40:	eor	sl, sl, r8
   13a44:	eor	fp, fp, r9
   13a48:	ldrd	r2, [r3]
   13a4c:	strd	r8, [sp, #248]	; 0xf8
   13a50:	ldrd	r8, [sp, #120]	; 0x78
   13a54:	lsr	lr, r4, #16
   13a58:	orr	lr, lr, r5, lsl #16
   13a5c:	adds	r2, r2, r8
   13a60:	adc	r3, r3, r9
   13a64:	mov	r9, r3
   13a68:	ldr	r3, [sp, #184]	; 0xb8
   13a6c:	mov	r1, fp
   13a70:	lsl	ip, r7, #1
   13a74:	str	lr, [sp, #144]	; 0x90
   13a78:	lsr	lr, r5, #16
   13a7c:	orr	fp, ip, r6, lsr #31
   13a80:	orr	lr, lr, r4, lsl #16
   13a84:	lsr	ip, sl, #16
   13a88:	str	lr, [sp, #148]	; 0x94
   13a8c:	orr	lr, ip, r1, lsl #16
   13a90:	lsr	ip, r3, #24
   13a94:	ldr	r3, [sp, #188]	; 0xbc
   13a98:	lsl	r6, r6, #1
   13a9c:	ldrd	r4, [sp, #144]	; 0x90
   13aa0:	mov	r0, sl
   13aa4:	orr	sl, r6, r7, lsr #31
   13aa8:	ldrd	r6, [sp, #216]	; 0xd8
   13aac:	str	lr, [sp, #136]	; 0x88
   13ab0:	lsr	r1, r1, #16
   13ab4:	orr	lr, ip, r3, lsl #8
   13ab8:	str	lr, [sp, #168]	; 0xa8
   13abc:	orr	lr, r1, r0, lsl #16
   13ac0:	adds	r6, r6, r4
   13ac4:	str	lr, [sp, #140]	; 0x8c
   13ac8:	adc	r7, r7, r5
   13acc:	mov	r8, r2
   13ad0:	ldrd	r4, [sp, #136]	; 0x88
   13ad4:	ldrd	r0, [sp, #240]	; 0xf0
   13ad8:	ldr	r2, [sp, #184]	; 0xb8
   13adc:	lsr	r3, r3, #24
   13ae0:	adds	r0, r0, r4
   13ae4:	orr	r3, r3, r2, lsl #8
   13ae8:	adc	r1, r1, r5
   13aec:	str	r3, [sp, #172]	; 0xac
   13af0:	ldrd	r4, [sp, #168]	; 0xa8
   13af4:	ldrd	r2, [sp, #88]	; 0x58
   13af8:	strd	r0, [sp, #208]	; 0xd0
   13afc:	ldrd	r0, [sp, #200]	; 0xc8
   13b00:	adds	r4, r4, r8
   13b04:	adc	r5, r5, r9
   13b08:	adds	r0, r0, r2
   13b0c:	adc	r1, r1, r3
   13b10:	ldrd	r2, [sp, #160]	; 0xa0
   13b14:	adds	r0, r0, sl
   13b18:	adc	r1, r1, fp
   13b1c:	eor	r2, r2, r0
   13b20:	eor	r3, r3, r1
   13b24:	strd	r4, [sp, #192]	; 0xc0
   13b28:	mov	r4, r2
   13b2c:	strd	r6, [sp, #216]	; 0xd8
   13b30:	mov	r2, r3
   13b34:	mov	r3, r4
   13b38:	ldrd	r4, [sp, #224]	; 0xe0
   13b3c:	ldrd	r6, [sp, #40]	; 0x28
   13b40:	adds	r4, r4, r2
   13b44:	adc	r5, r5, r3
   13b48:	adds	r6, r6, r0
   13b4c:	strd	r4, [sp, #184]	; 0xb8
   13b50:	eor	r4, r4, sl
   13b54:	eor	r5, r5, fp
   13b58:	lsr	ip, r4, #24
   13b5c:	orr	r8, ip, r5, lsl #8
   13b60:	lsr	ip, r5, #24
   13b64:	orr	r9, ip, r4, lsl #8
   13b68:	adc	r7, r7, r1
   13b6c:	adds	sl, r6, r8
   13b70:	adc	fp, r7, r9
   13b74:	ldrd	r0, [sp, #152]	; 0x98
   13b78:	mov	r6, sl
   13b7c:	mov	r7, fp
   13b80:	ldrd	sl, [sp, #192]	; 0xc0
   13b84:	strd	r6, [sp, #240]	; 0xf0
   13b88:	eor	r0, r0, sl
   13b8c:	eor	r1, r1, fp
   13b90:	mov	sl, r6
   13b94:	mov	fp, r7
   13b98:	eor	sl, sl, r2
   13b9c:	eor	fp, fp, r3
   13ba0:	mov	r4, r0
   13ba4:	mov	r5, r1
   13ba8:	mov	r2, sl
   13bac:	mov	r3, fp
   13bb0:	ldrd	r0, [sp, #176]	; 0xb0
   13bb4:	ldrd	sl, [sp, #216]	; 0xd8
   13bb8:	lsr	lr, r4, #16
   13bbc:	orr	lr, lr, r5, lsl #16
   13bc0:	eor	r1, r1, fp
   13bc4:	eor	r0, r0, sl
   13bc8:	lsl	ip, r1, #1
   13bcc:	orr	r7, ip, r0, lsr #31
   13bd0:	lsl	r0, r0, #1
   13bd4:	str	r7, [sp, #156]	; 0x9c
   13bd8:	ldrd	sl, [sp, #8]
   13bdc:	orr	r7, r0, r1, lsr #31
   13be0:	ldrd	r0, [sp, #248]	; 0xf8
   13be4:	str	r7, [sp, #152]	; 0x98
   13be8:	ldrd	r6, [sp, #128]	; 0x80
   13bec:	adds	sl, sl, r0
   13bf0:	adc	fp, fp, r1
   13bf4:	ldrd	r0, [sp, #208]	; 0xd0
   13bf8:	lsr	ip, r2, #16
   13bfc:	str	lr, [sp, #160]	; 0xa0
   13c00:	eor	r6, r6, r0
   13c04:	eor	r7, r7, r1
   13c08:	ldrd	r0, [sp, #152]	; 0x98
   13c0c:	adds	r0, r0, sl
   13c10:	adc	r1, r1, fp
   13c14:	strd	r0, [sp, #200]	; 0xc8
   13c18:	orr	r0, ip, r3, lsl #16
   13c1c:	lsr	ip, r5, #16
   13c20:	orr	lr, ip, r4, lsl #16
   13c24:	add	ip, sp, #272	; 0x110
   13c28:	str	lr, [sp, #164]	; 0xa4
   13c2c:	ldrd	sl, [ip]
   13c30:	ldrd	r4, [sp, #160]	; 0xa0
   13c34:	lsr	r3, r3, #16
   13c38:	orr	r1, r3, r2, lsl #16
   13c3c:	adds	sl, sl, r4
   13c40:	adc	fp, fp, r5
   13c44:	ldrd	r4, [sp, #168]	; 0xa8
   13c48:	ldrd	r2, [sp, #184]	; 0xb8
   13c4c:	strd	sl, [sp, #224]	; 0xe0
   13c50:	eor	sl, sl, r4
   13c54:	eor	fp, fp, r5
   13c58:	mov	r4, sl
   13c5c:	mov	r5, fp
   13c60:	ldrd	sl, [sp, #200]	; 0xc8
   13c64:	adds	r2, r2, r0
   13c68:	lsl	ip, r7, #1
   13c6c:	adc	r3, r3, r1
   13c70:	orr	lr, ip, r6, lsr #31
   13c74:	eor	fp, fp, r1
   13c78:	lsl	ip, r6, #1
   13c7c:	lsl	r1, r5, #1
   13c80:	add	r6, sp, #256	; 0x100
   13c84:	orr	r1, r1, r4, lsr #31
   13c88:	strd	r2, [sp, #248]	; 0xf8
   13c8c:	eor	sl, sl, r0
   13c90:	eor	r2, r2, r8
   13c94:	eor	r3, r3, r9
   13c98:	str	r1, [sp, #172]	; 0xac
   13c9c:	ldrd	r8, [r6]
   13ca0:	ldrd	r0, [sp]
   13ca4:	str	lr, [sp, #132]	; 0x84
   13ca8:	orr	lr, ip, r7, lsr #31
   13cac:	adds	r0, r0, r8
   13cb0:	adc	r1, r1, r9
   13cb4:	str	fp, [sp, #184]	; 0xb8
   13cb8:	str	sl, [sp, #188]	; 0xbc
   13cbc:	str	lr, [sp, #128]	; 0x80
   13cc0:	ldrd	r8, [sp, #72]	; 0x48
   13cc4:	ldrd	sl, [sp, #192]	; 0xc0
   13cc8:	lsl	lr, r4, #1
   13ccc:	lsl	ip, r3, #1
   13cd0:	mov	r7, r1
   13cd4:	orr	r1, lr, r5, lsr #31
   13cd8:	adds	r8, r8, sl
   13cdc:	str	r1, [sp, #168]	; 0xa8
   13ce0:	orr	r1, ip, r2, lsr #31
   13ce4:	adc	r9, r9, fp
   13ce8:	mov	r6, r0
   13cec:	str	r1, [sp, #180]	; 0xb4
   13cf0:	ldrd	sl, [sp, #32]
   13cf4:	ldrd	r0, [sp, #240]	; 0xf0
   13cf8:	lsl	r2, r2, #1
   13cfc:	orr	r3, r2, r3, lsr #31
   13d00:	adds	sl, sl, r0
   13d04:	adc	fp, fp, r1
   13d08:	str	r3, [sp, #176]	; 0xb0
   13d0c:	ldrd	r0, [sp, #224]	; 0xe0
   13d10:	ldrd	r2, [sp, #184]	; 0xb8
   13d14:	ldrd	r4, [sp, #168]	; 0xa8
   13d18:	add	ip, sp, #264	; 0x108
   13d1c:	adds	r0, r0, r2
   13d20:	adc	r1, r1, r3
   13d24:	mov	r2, r0
   13d28:	mov	r3, r1
   13d2c:	ldrd	r0, [sp, #128]	; 0x80
   13d30:	adds	r4, r4, r6
   13d34:	adc	r5, r5, r7
   13d38:	adds	r0, r0, sl
   13d3c:	adc	r1, r1, fp
   13d40:	mov	sl, r0
   13d44:	mov	fp, r1
   13d48:	ldrd	r0, [sp, #176]	; 0xb0
   13d4c:	strd	r2, [sp, #224]	; 0xe0
   13d50:	strd	sl, [ip]
   13d54:	adds	r0, r0, r8
   13d58:	adc	r1, r1, r9
   13d5c:	ldrd	r8, [sp, #152]	; 0x98
   13d60:	mov	r6, r0
   13d64:	mov	r7, r1
   13d68:	eor	r8, r8, r2
   13d6c:	eor	r9, r9, r3
   13d70:	mov	r2, r8
   13d74:	mov	r3, r9
   13d78:	ldrd	r8, [sp, #136]	; 0x88
   13d7c:	ldrd	r0, [sp, #160]	; 0xa0
   13d80:	strd	r4, [sp, #152]	; 0x98
   13d84:	eor	r8, r8, r4
   13d88:	eor	r9, r9, r5
   13d8c:	mov	r4, r8
   13d90:	mov	r5, r9
   13d94:	ldrd	r8, [sp, #144]	; 0x90
   13d98:	eor	r0, r0, sl
   13d9c:	eor	r1, r1, fp
   13da0:	mov	sl, r6
   13da4:	mov	fp, r7
   13da8:	eor	sl, sl, r8
   13dac:	eor	fp, fp, r9
   13db0:	add	ip, sp, #256	; 0x100
   13db4:	str	fp, [sp, #160]	; 0xa0
   13db8:	str	sl, [sp, #164]	; 0xa4
   13dbc:	str	r1, [sp, #192]	; 0xc0
   13dc0:	ldrd	sl, [sp, #200]	; 0xc8
   13dc4:	str	r0, [sp, #196]	; 0xc4
   13dc8:	ldrd	r0, [sp, #80]	; 0x50
   13dcc:	strd	r6, [ip]
   13dd0:	lsr	ip, r2, #24
   13dd4:	orr	lr, ip, r3, lsl #8
   13dd8:	lsr	r3, r3, #24
   13ddc:	adds	r0, r0, sl
   13de0:	str	r5, [sp, #144]	; 0x90
   13de4:	str	r4, [sp, #148]	; 0x94
   13de8:	orr	r3, r3, r2, lsl #8
   13dec:	adc	r1, r1, fp
   13df0:	str	r3, [sp, #140]	; 0x8c
   13df4:	ldrd	sl, [sp, #144]	; 0x90
   13df8:	ldrd	r2, [sp, #248]	; 0xf8
   13dfc:	str	lr, [sp, #136]	; 0x88
   13e00:	mov	r4, r0
   13e04:	adds	r2, r2, sl
   13e08:	adc	r3, r3, fp
   13e0c:	ldrd	sl, [sp, #208]	; 0xd0
   13e10:	ldrd	r8, [sp, #160]	; 0xa0
   13e14:	mov	r5, r1
   13e18:	ldrd	r0, [sp, #192]	; 0xc0
   13e1c:	adds	sl, sl, r8
   13e20:	adc	fp, fp, r9
   13e24:	mov	r8, sl
   13e28:	mov	r9, fp
   13e2c:	ldrd	sl, [sp, #216]	; 0xd8
   13e30:	strd	r2, [sp, #240]	; 0xf0
   13e34:	strd	r8, [sp, #248]	; 0xf8
   13e38:	adds	sl, sl, r0
   13e3c:	adc	fp, fp, r1
   13e40:	ldrd	r0, [sp, #136]	; 0x88
   13e44:	adds	r4, r4, r0
   13e48:	adc	r5, r5, r1
   13e4c:	ldrd	r0, [sp, #168]	; 0xa8
   13e50:	mov	r7, r5
   13e54:	mov	r6, r4
   13e58:	eor	r0, r0, r2
   13e5c:	eor	r1, r1, r3
   13e60:	mov	r2, r0
   13e64:	mov	r3, r1
   13e68:	ldrd	r0, [sp, #128]	; 0x80
   13e6c:	strd	r2, [sp, #200]	; 0xc8
   13e70:	ldrd	r2, [sp, #176]	; 0xb0
   13e74:	strd	r6, [sp, #208]	; 0xd0
   13e78:	eor	r0, r0, sl
   13e7c:	eor	r3, r3, r9
   13e80:	mov	r5, r3
   13e84:	add	r3, sp, #272	; 0x110
   13e88:	eor	r2, r2, r8
   13e8c:	strd	sl, [r3]
   13e90:	mov	r4, r2
   13e94:	ldrd	r2, [sp, #184]	; 0xb8
   13e98:	eor	r1, r1, fp
   13e9c:	ldrd	r8, [sp, #104]	; 0x68
   13ea0:	eor	r3, r3, r7
   13ea4:	mov	r7, r3
   13ea8:	ldr	r3, [sp, #200]	; 0xc8
   13eac:	ldrd	sl, [sp, #152]	; 0x98
   13eb0:	eor	r2, r2, r6
   13eb4:	lsr	lr, r3, #24
   13eb8:	add	r3, sp, #264	; 0x108
   13ebc:	adds	r8, r8, sl
   13ec0:	mov	r6, r2
   13ec4:	lsr	ip, r2, #16
   13ec8:	adc	r9, r9, fp
   13ecc:	ldrd	r2, [r3]
   13ed0:	ldrd	sl, [sp, #16]
   13ed4:	adds	sl, sl, r2
   13ed8:	adc	fp, fp, r3
   13edc:	add	r3, sp, #264	; 0x108
   13ee0:	strd	sl, [r3]
   13ee4:	add	r3, sp, #256	; 0x100
   13ee8:	ldrd	sl, [sp, #112]	; 0x70
   13eec:	ldrd	r2, [r3]
   13ef0:	adds	r2, r2, sl
   13ef4:	adc	r3, r3, fp
   13ef8:	mov	fp, r3
   13efc:	orr	r3, ip, r7, lsl #16
   13f00:	str	r3, [sp, #128]	; 0x80
   13f04:	lsr	r3, r7, #16
   13f08:	orr	r3, r3, r6, lsl #16
   13f0c:	str	r3, [sp, #132]	; 0x84
   13f10:	ldr	r3, [sp, #204]	; 0xcc
   13f14:	ldrd	r6, [sp, #128]	; 0x80
   13f18:	mov	sl, r2
   13f1c:	orr	r3, lr, r3, lsl #8
   13f20:	str	r3, [sp, #152]	; 0x98
   13f24:	ldrd	r2, [sp, #224]	; 0xe0
   13f28:	lsr	ip, r4, #24
   13f2c:	lsr	lr, r0, #24
   13f30:	adds	r2, r2, r6
   13f34:	adc	r3, r3, r7
   13f38:	ldrd	r6, [sp, #136]	; 0x88
   13f3c:	strd	r2, [sp, #216]	; 0xd8
   13f40:	orr	lr, lr, r1, lsl #8
   13f44:	eor	r7, r7, r3
   13f48:	mov	r3, r7
   13f4c:	eor	r6, r6, r2
   13f50:	orr	r7, ip, r5, lsl #8
   13f54:	lsl	ip, r3, #1
   13f58:	str	lr, [sp, #176]	; 0xb0
   13f5c:	orr	lr, ip, r6, lsr #31
   13f60:	mov	r2, r6
   13f64:	str	r7, [sp, #168]	; 0xa8
   13f68:	str	lr, [sp, #188]	; 0xbc
   13f6c:	ldrd	r6, [sp, #200]	; 0xc8
   13f70:	lsr	r1, r1, #24
   13f74:	lsl	r2, r2, #1
   13f78:	lsr	ip, r7, #24
   13f7c:	orr	lr, ip, r6, lsl #8
   13f80:	str	lr, [sp, #156]	; 0x9c
   13f84:	ldrd	r6, [sp, #152]	; 0x98
   13f88:	lsr	ip, r5, #24
   13f8c:	orr	lr, ip, r4, lsl #8
   13f90:	str	lr, [sp, #172]	; 0xac
   13f94:	adds	r8, r8, r6
   13f98:	ldrd	r4, [sp, #168]	; 0xa8
   13f9c:	adc	r9, r9, r7
   13fa0:	ldrd	r6, [sp, #144]	; 0x90
   13fa4:	adds	r4, r4, sl
   13fa8:	orr	lr, r1, r0, lsl #8
   13fac:	add	r1, sp, #264	; 0x108
   13fb0:	strd	r8, [sp, #144]	; 0x90
   13fb4:	adc	r5, r5, fp
   13fb8:	str	lr, [sp, #180]	; 0xb4
   13fbc:	eor	r8, r8, r6
   13fc0:	eor	r9, r9, r7
   13fc4:	mov	r6, r8
   13fc8:	mov	r7, r9
   13fcc:	mov	sl, r4
   13fd0:	mov	fp, r5
   13fd4:	ldrd	r8, [sp, #176]	; 0xb0
   13fd8:	ldrd	r4, [r1]
   13fdc:	lsr	lr, r6, #16
   13fe0:	orr	r3, r2, r3, lsr #31
   13fe4:	adds	r4, r4, r8
   13fe8:	adc	r5, r5, r9
   13fec:	mov	r0, r4
   13ff0:	mov	r1, r5
   13ff4:	ldrd	r8, [sp, #192]	; 0xc0
   13ff8:	ldrd	r4, [sp, #160]	; 0xa0
   13ffc:	str	r3, [sp, #184]	; 0xb8
   14000:	eor	r8, r8, r0
   14004:	eor	r4, r4, sl
   14008:	orr	r3, lr, r7, lsl #16
   1400c:	eor	r5, r5, fp
   14010:	eor	r9, r9, r1
   14014:	str	r3, [sp, #136]	; 0x88
   14018:	lsr	r3, r7, #16
   1401c:	lsr	ip, r4, #16
   14020:	orr	r3, r3, r6, lsl #16
   14024:	lsr	lr, r8, #16
   14028:	orr	r2, ip, r5, lsl #16
   1402c:	strd	r0, [sp, #224]	; 0xe0
   14030:	str	r3, [sp, #140]	; 0x8c
   14034:	lsr	ip, r5, #16
   14038:	orr	lr, lr, r9, lsl #16
   1403c:	lsr	r1, r9, #16
   14040:	orr	r3, ip, r4, lsl #16
   14044:	str	lr, [sp, #160]	; 0xa0
   14048:	ldrd	r4, [sp, #240]	; 0xf0
   1404c:	orr	lr, r1, r8, lsl #16
   14050:	ldrd	r8, [sp, #136]	; 0x88
   14054:	ldrd	r0, [sp, #248]	; 0xf8
   14058:	str	lr, [sp, #164]	; 0xa4
   1405c:	adds	r4, r4, r8
   14060:	adc	r5, r5, r9
   14064:	adds	r0, r0, r2
   14068:	adc	r1, r1, r3
   1406c:	ldrd	r8, [sp, #160]	; 0xa0
   14070:	strd	r0, [sp, #200]	; 0xc8
   14074:	add	r1, sp, #272	; 0x110
   14078:	ldrd	r6, [sp, #72]	; 0x48
   1407c:	ldrd	r0, [r1]
   14080:	add	ip, sp, #256	; 0x100
   14084:	strd	r4, [sp, #192]	; 0xc0
   14088:	adds	r0, r0, r8
   1408c:	adc	r1, r1, r9
   14090:	ldrd	r8, [sp, #208]	; 0xd0
   14094:	ldrd	r4, [sp, #80]	; 0x50
   14098:	adds	r6, r6, r8
   1409c:	adc	r7, r7, r9
   140a0:	strd	r6, [ip]
   140a4:	ldrd	r6, [sp, #144]	; 0x90
   140a8:	adds	r6, r6, r4
   140ac:	adc	r7, r7, r5
   140b0:	mov	r8, r6
   140b4:	mov	r9, r7
   140b8:	ldrd	r6, [sp, #184]	; 0xb8
   140bc:	adds	r4, r6, r8
   140c0:	adc	r5, r7, r9
   140c4:	mov	r8, r4
   140c8:	mov	r9, r5
   140cc:	strd	r8, [sp, #184]	; 0xb8
   140d0:	eor	r8, r8, r2
   140d4:	eor	r9, r9, r3
   140d8:	mov	r4, r8
   140dc:	mov	r5, r9
   140e0:	ldrd	r8, [sp, #168]	; 0xa8
   140e4:	ldrd	r2, [sp, #200]	; 0xc8
   140e8:	str	r5, [sp, #168]	; 0xa8
   140ec:	str	r4, [sp, #172]	; 0xac
   140f0:	eor	r8, r8, r2
   140f4:	eor	r9, r9, r3
   140f8:	ldrd	r4, [sp, #152]	; 0x98
   140fc:	mov	r2, r8
   14100:	mov	r3, r9
   14104:	ldrd	r8, [sp, #192]	; 0xc0
   14108:	lsl	ip, r3, #1
   1410c:	orr	lr, ip, r2, lsr #31
   14110:	eor	r4, r4, r8
   14114:	eor	r5, r5, r9
   14118:	mov	r8, r4
   1411c:	mov	r9, r5
   14120:	ldrd	r4, [sp, #176]	; 0xb0
   14124:	lsl	r2, r2, #1
   14128:	orr	r3, r2, r3, lsr #31
   1412c:	eor	r4, r4, r0
   14130:	eor	r5, r5, r1
   14134:	str	lr, [sp, #156]	; 0x9c
   14138:	strd	r4, [sp, #176]	; 0xb0
   1413c:	ldrd	r4, [sp, #168]	; 0xa8
   14140:	str	r3, [sp, #152]	; 0x98
   14144:	lsl	r3, r9, #1
   14148:	adds	r4, r4, r0
   1414c:	adc	r5, r5, r1
   14150:	mov	r0, r4
   14154:	mov	r1, r5
   14158:	mov	r4, r6
   1415c:	mov	r5, r7
   14160:	eor	r4, r4, r0
   14164:	eor	r5, r5, r1
   14168:	strd	r0, [sp, #208]	; 0xd0
   1416c:	ldrd	r6, [sp, #120]	; 0x78
   14170:	mov	r0, r4
   14174:	mov	r1, r5
   14178:	ldrd	r4, [sp, #224]	; 0xe0
   1417c:	orr	r3, r3, r8, lsr #31
   14180:	str	r3, [sp, #148]	; 0x94
   14184:	adds	r6, r6, r4
   14188:	adc	r7, r7, r5
   1418c:	mov	r4, r6
   14190:	mov	r5, r7
   14194:	ldrd	r6, [sp, #152]	; 0x98
   14198:	ldr	r3, [sp, #180]	; 0xb4
   1419c:	lsl	ip, r8, #1
   141a0:	adds	r6, r6, r4
   141a4:	adc	r7, r7, r5
   141a8:	mov	r4, r6
   141ac:	mov	r5, r7
   141b0:	ldrd	r6, [sp, #128]	; 0x80
   141b4:	strd	r4, [sp, #248]	; 0xf8
   141b8:	lsl	lr, r3, #1
   141bc:	eor	r7, r7, r5
   141c0:	ldrd	r2, [sp, #32]
   141c4:	orr	r5, ip, r9, lsr #31
   141c8:	eor	r6, r6, r4
   141cc:	str	r5, [sp, #144]	; 0x90
   141d0:	ldrd	r4, [sp, #176]	; 0xb0
   141d4:	adds	r2, r2, sl
   141d8:	adc	r3, r3, fp
   141dc:	orr	lr, lr, r4, lsr #31
   141e0:	mov	fp, r3
   141e4:	ldrd	r8, [sp]
   141e8:	mov	r3, r7
   141ec:	str	lr, [sp, #132]	; 0x84
   141f0:	mov	r7, r5
   141f4:	lsl	lr, r4, #1
   141f8:	ldrd	r4, [sp, #184]	; 0xb8
   141fc:	mov	sl, r2
   14200:	orr	lr, lr, r7, lsr #31
   14204:	adds	r8, r8, r4
   14208:	adc	r9, r9, r5
   1420c:	mov	r2, r6
   14210:	strd	r8, [sp, #184]	; 0xb8
   14214:	ldrd	r8, [sp, #144]	; 0x90
   14218:	ldrd	r6, [sp, #160]	; 0xa0
   1421c:	lsr	ip, r0, #24
   14220:	adds	r8, r8, sl
   14224:	adc	r9, r9, fp
   14228:	orr	sl, ip, r1, lsl #8
   1422c:	mov	r4, r8
   14230:	mov	r5, r9
   14234:	add	ip, sp, #256	; 0x100
   14238:	eor	r6, r6, r8
   1423c:	eor	r7, r7, r9
   14240:	str	lr, [sp, #128]	; 0x80
   14244:	lsr	r1, r1, #24
   14248:	orr	fp, r1, r0, lsl #8
   1424c:	str	r3, [sp, #176]	; 0xb0
   14250:	mov	r0, r6
   14254:	mov	r1, r7
   14258:	strd	r4, [sp, #240]	; 0xf0
   1425c:	ldrd	r6, [ip]
   14260:	ldrd	r4, [sp, #128]	; 0x80
   14264:	str	r2, [sp, #180]	; 0xb4
   14268:	str	r1, [sp, #160]	; 0xa0
   1426c:	adds	r6, r6, r4
   14270:	adc	r7, r7, r5
   14274:	mov	r8, r6
   14278:	mov	r9, r7
   1427c:	ldrd	r6, [sp, #136]	; 0x88
   14280:	ldrd	r4, [sp, #184]	; 0xb8
   14284:	strd	r8, [sp, #184]	; 0xb8
   14288:	eor	r6, r6, r8
   1428c:	eor	r7, r7, r9
   14290:	mov	r2, r6
   14294:	mov	r3, r7
   14298:	ldrd	r6, [sp, #168]	; 0xa8
   1429c:	adds	r4, r4, sl
   142a0:	adc	r5, r5, fp
   142a4:	eor	r6, r6, r4
   142a8:	eor	r7, r7, r5
   142ac:	strd	r4, [sp, #224]	; 0xe0
   142b0:	ldrd	r8, [sp, #176]	; 0xb0
   142b4:	mov	r4, r6
   142b8:	mov	r5, r7
   142bc:	ldrd	r6, [sp, #192]	; 0xc0
   142c0:	str	r0, [sp, #164]	; 0xa4
   142c4:	str	r3, [sp, #136]	; 0x88
   142c8:	adds	r8, r8, r6
   142cc:	adc	r9, r9, r7
   142d0:	str	r2, [sp, #140]	; 0x8c
   142d4:	ldrd	r0, [sp, #216]	; 0xd8
   142d8:	ldrd	r2, [sp, #160]	; 0xa0
   142dc:	strd	r8, [ip]
   142e0:	mov	r6, r8
   142e4:	mov	r7, r9
   142e8:	ldrd	r8, [sp, #152]	; 0x98
   142ec:	adds	r0, r0, r2
   142f0:	lsr	lr, r4, #16
   142f4:	adc	r1, r1, r3
   142f8:	eor	r8, r8, r6
   142fc:	orr	r3, lr, r5, lsl #16
   14300:	eor	r9, r9, r7
   14304:	mov	r6, r8
   14308:	mov	r7, r9
   1430c:	mov	r8, r0
   14310:	mov	r9, r1
   14314:	str	r3, [sp, #152]	; 0x98
   14318:	ldrd	r0, [sp, #136]	; 0x88
   1431c:	ldrd	r2, [sp, #200]	; 0xc8
   14320:	lsr	lr, r5, #16
   14324:	strd	r8, [sp, #200]	; 0xc8
   14328:	adds	r2, r2, r0
   1432c:	adc	r3, r3, r1
   14330:	ldrd	r0, [sp, #144]	; 0x90
   14334:	strd	r2, [sp, #192]	; 0xc0
   14338:	orr	r3, lr, r4, lsl #16
   1433c:	eor	r0, r0, r8
   14340:	eor	r1, r1, r9
   14344:	mov	r8, r0
   14348:	mov	r9, r1
   1434c:	ldrd	r4, [sp, #128]	; 0x80
   14350:	ldrd	r0, [sp, #192]	; 0xc0
   14354:	str	r3, [sp, #156]	; 0x9c
   14358:	ldrd	r2, [sp, #152]	; 0x98
   1435c:	eor	r4, r4, r0
   14360:	eor	r5, r5, r1
   14364:	ldrd	r0, [sp, #88]	; 0x58
   14368:	strd	r4, [sp, #128]	; 0x80
   1436c:	ldrd	r4, [sp, #248]	; 0xf8
   14370:	lsr	ip, r6, #24
   14374:	adds	r0, r0, r4
   14378:	adc	r1, r1, r5
   1437c:	mov	r4, r0
   14380:	mov	r5, r1
   14384:	ldrd	r0, [sp, #208]	; 0xd0
   14388:	adds	r0, r0, r2
   1438c:	adc	r1, r1, r3
   14390:	orr	r3, ip, r7, lsl #8
   14394:	lsr	ip, r7, #24
   14398:	str	r3, [sp, #168]	; 0xa8
   1439c:	orr	r3, ip, r6, lsl #8
   143a0:	strd	r0, [sp, #216]	; 0xd8
   143a4:	str	r3, [sp, #172]	; 0xac
   143a8:	eor	r0, r0, sl
   143ac:	eor	r1, r1, fp
   143b0:	mov	sl, r0
   143b4:	mov	fp, r1
   143b8:	ldrd	r0, [sp, #168]	; 0xa8
   143bc:	ldrd	r6, [sp, #104]	; 0x68
   143c0:	mov	r2, r8
   143c4:	adds	r0, r0, r4
   143c8:	adc	r1, r1, r5
   143cc:	ldrd	r4, [sp, #240]	; 0xf0
   143d0:	mov	r3, r9
   143d4:	lsr	ip, r8, #24
   143d8:	adds	r6, r6, r4
   143dc:	adc	r7, r7, r5
   143e0:	ldrd	r4, [sp, #176]	; 0xb0
   143e4:	strd	r2, [sp, #176]	; 0xb0
   143e8:	orr	r3, ip, r9, lsl #8
   143ec:	eor	r4, r4, r0
   143f0:	eor	r5, r5, r1
   143f4:	strd	r6, [sp, #208]	; 0xd0
   143f8:	str	r3, [sp, #144]	; 0x90
   143fc:	mov	r6, r4
   14400:	ldrd	r2, [sp, #128]	; 0x80
   14404:	mov	r7, r5
   14408:	ldrd	r8, [sp, #48]	; 0x30
   1440c:	ldrd	r4, [sp, #184]	; 0xb8
   14410:	lsl	lr, sl, #1
   14414:	lsl	ip, fp, #1
   14418:	adds	r8, r8, r4
   1441c:	orr	r4, lr, fp, lsr #31
   14420:	mov	fp, r3
   14424:	adc	r9, r9, r5
   14428:	orr	r5, ip, sl, lsr #31
   1442c:	lsr	ip, r2, #24
   14430:	mov	sl, r2
   14434:	strd	r0, [sp, #248]	; 0xf8
   14438:	orr	r3, ip, r3, lsl #8
   1443c:	lsr	r1, fp, #24
   14440:	str	r3, [sp, #128]	; 0x80
   14444:	orr	r3, r1, sl, lsl #8
   14448:	ldrd	r0, [sp, #176]	; 0xb0
   1444c:	str	r3, [sp, #132]	; 0x84
   14450:	lsr	r3, r1, #24
   14454:	orr	r3, r3, r0, lsl #8
   14458:	str	r3, [sp, #148]	; 0x94
   1445c:	ldrd	sl, [sp, #144]	; 0x90
   14460:	ldrd	r2, [sp, #208]	; 0xd0
   14464:	adds	r2, r2, sl
   14468:	adc	r3, r3, fp
   1446c:	ldrd	sl, [sp, #128]	; 0x80
   14470:	mov	r0, r2
   14474:	mov	r1, r3
   14478:	adds	sl, sl, r8
   1447c:	ldrd	r2, [sp, #160]	; 0xa0
   14480:	adc	fp, fp, r9
   14484:	strd	r0, [sp, #240]	; 0xf0
   14488:	strd	sl, [sp, #184]	; 0xb8
   1448c:	eor	r3, r3, r1
   14490:	ldrd	sl, [sp, #64]	; 0x40
   14494:	lsr	r1, r6, #16
   14498:	ldrd	r8, [sp, #184]	; 0xb8
   1449c:	eor	r2, r2, r0
   144a0:	orr	lr, r1, r7, lsl #16
   144a4:	lsr	r1, r7, #16
   144a8:	str	lr, [sp, #176]	; 0xb0
   144ac:	orr	lr, r1, r6, lsl #16
   144b0:	adds	r8, r8, sl
   144b4:	str	lr, [sp, #180]	; 0xb4
   144b8:	lsr	r1, r2, #16
   144bc:	orr	lr, r1, r3, lsl #16
   144c0:	ldrd	r6, [sp, #176]	; 0xb0
   144c4:	adc	r9, r9, fp
   144c8:	lsr	r3, r3, #16
   144cc:	adds	r8, r8, r4
   144d0:	adc	r9, r9, r5
   144d4:	orr	r3, r3, r2, lsl #16
   144d8:	str	lr, [sp, #160]	; 0xa0
   144dc:	str	r3, [sp, #164]	; 0xa4
   144e0:	mov	r0, r8
   144e4:	mov	r1, r9
   144e8:	eor	r0, r0, r6
   144ec:	eor	r1, r1, r7
   144f0:	ldrd	r2, [sp, #200]	; 0xc8
   144f4:	ldrd	r6, [sp, #160]	; 0xa0
   144f8:	strd	r8, [sp, #208]	; 0xd0
   144fc:	adds	r2, r2, r6
   14500:	adc	r3, r3, r7
   14504:	mov	r6, r1
   14508:	mov	r7, r0
   1450c:	ldrd	r0, [sp, #136]	; 0x88
   14510:	ldrd	r8, [sp, #184]	; 0xb8
   14514:	ldrd	sl, [sp, #208]	; 0xd0
   14518:	eor	r8, r8, r0
   1451c:	eor	r9, r9, r1
   14520:	ldrd	r0, [sp, #144]	; 0x90
   14524:	eor	r0, r0, r2
   14528:	eor	r1, r1, r3
   1452c:	strd	r0, [sp, #184]	; 0xb8
   14530:	adds	r0, r2, r6
   14534:	adc	r1, r3, r7
   14538:	mov	r2, r0
   1453c:	mov	r3, r1
   14540:	ldrd	r0, [sp, #96]	; 0x60
   14544:	strd	r2, [sp, #200]	; 0xc8
   14548:	eor	r3, r3, r5
   1454c:	mov	r5, r3
   14550:	lsr	r3, r8, #16
   14554:	orr	r3, r3, r9, lsl #16
   14558:	str	r3, [sp, #136]	; 0x88
   1455c:	adds	sl, sl, r0
   14560:	lsr	r3, r9, #16
   14564:	adc	fp, fp, r1
   14568:	orr	r3, r3, r8, lsl #16
   1456c:	ldrd	r0, [sp, #16]
   14570:	ldrd	r8, [sp, #224]	; 0xe0
   14574:	eor	r2, r2, r4
   14578:	str	r3, [sp, #140]	; 0x8c
   1457c:	adds	r0, r0, r8
   14580:	adc	r1, r1, r9
   14584:	mov	r4, r2
   14588:	lsr	r3, r2, #24
   1458c:	add	r2, sp, #264	; 0x108
   14590:	ldrd	r8, [sp, #192]	; 0xc0
   14594:	strd	r0, [r2]
   14598:	ldrd	r0, [sp, #136]	; 0x88
   1459c:	lsr	ip, r5, #24
   145a0:	orr	lr, ip, r4, lsl #8
   145a4:	adds	r8, r8, r0
   145a8:	adc	r9, r9, r1
   145ac:	ldrd	r0, [sp, #128]	; 0x80
   145b0:	orr	r3, r3, r5, lsl #8
   145b4:	str	r3, [sp, #144]	; 0x90
   145b8:	str	lr, [sp, #148]	; 0x94
   145bc:	eor	r1, r1, r9
   145c0:	eor	r0, r0, r8
   145c4:	strd	r8, [sp, #208]	; 0xd0
   145c8:	ldrd	r8, [sp, #144]	; 0x90
   145cc:	mov	r3, r1
   145d0:	mov	r2, r0
   145d4:	adds	r8, r8, sl
   145d8:	adc	r9, r9, fp
   145dc:	mov	sl, r8
   145e0:	mov	fp, r9
   145e4:	ldrd	r8, [sp, #184]	; 0xb8
   145e8:	strd	sl, [sp, #224]	; 0xe0
   145ec:	eor	fp, fp, r7
   145f0:	lsl	ip, r9, #1
   145f4:	orr	r7, ip, r8, lsr #31
   145f8:	lsl	ip, r1, #1
   145fc:	add	r1, sp, #256	; 0x100
   14600:	eor	sl, sl, r6
   14604:	ldrd	r8, [r1]
   14608:	ldrd	r0, [sp, #176]	; 0xb0
   1460c:	mov	r5, fp
   14610:	orr	fp, ip, r2, lsr #31
   14614:	adds	r8, r8, r0
   14618:	adc	r9, r9, r1
   1461c:	add	r1, sp, #264	; 0x108
   14620:	strd	r8, [sp, #128]	; 0x80
   14624:	ldrd	r8, [sp, #184]	; 0xb8
   14628:	lsr	ip, sl, #16
   1462c:	lsl	r2, r2, #1
   14630:	lsl	r0, r8, #1
   14634:	orr	r6, r0, r9, lsr #31
   14638:	ldrd	r0, [r1]
   1463c:	ldrd	r8, [sp, #136]	; 0x88
   14640:	mov	r4, sl
   14644:	adds	r0, r0, r6
   14648:	orr	sl, r2, r3, lsr #31
   1464c:	orr	r3, ip, r5, lsl #16
   14650:	adc	r1, r1, r7
   14654:	str	r3, [sp, #136]	; 0x88
   14658:	lsr	r3, r5, #16
   1465c:	eor	r8, r8, r0
   14660:	eor	r9, r9, r1
   14664:	orr	r3, r3, r4, lsl #16
   14668:	strd	r0, [sp, #184]	; 0xb8
   1466c:	str	r9, [sp, #176]	; 0xb0
   14670:	str	r8, [sp, #180]	; 0xb4
   14674:	str	r3, [sp, #140]	; 0x8c
   14678:	ldrd	r2, [sp, #200]	; 0xc8
   1467c:	ldrd	r8, [sp, #136]	; 0x88
   14680:	ldrd	r4, [sp, #248]	; 0xf8
   14684:	adds	r2, r2, r8
   14688:	adc	r3, r3, r9
   1468c:	ldrd	r8, [sp, #128]	; 0x80
   14690:	strd	r2, [sp, #192]	; 0xc0
   14694:	ldrd	r2, [sp, #176]	; 0xb0
   14698:	adds	r0, r8, r2
   1469c:	adc	r1, r9, r3
   146a0:	mov	r2, r0
   146a4:	mov	r3, r1
   146a8:	ldrd	r0, [sp, #168]	; 0xa8
   146ac:	strd	r2, [sp, #200]	; 0xc8
   146b0:	ldrd	r2, [sp, #56]	; 0x38
   146b4:	eor	r9, r9, r1
   146b8:	eor	r8, r8, r0
   146bc:	adds	r2, r2, r4
   146c0:	adc	r3, r3, r5
   146c4:	ldrd	r4, [sp, #160]	; 0xa0
   146c8:	adds	r2, r2, sl
   146cc:	adc	r3, r3, fp
   146d0:	lsl	ip, r9, #1
   146d4:	orr	lr, ip, r8, lsr #31
   146d8:	eor	r4, r4, r2
   146dc:	eor	r5, r5, r3
   146e0:	lsl	r0, r8, #1
   146e4:	str	lr, [sp, #132]	; 0x84
   146e8:	mov	r8, r5
   146ec:	orr	lr, r0, r9, lsr #31
   146f0:	mov	r9, r4
   146f4:	ldrd	r4, [sp, #216]	; 0xd8
   146f8:	str	lr, [sp, #128]	; 0x80
   146fc:	adds	r4, r4, r8
   14700:	adc	r5, r5, r9
   14704:	strd	r4, [sp, #216]	; 0xd8
   14708:	eor	r4, r4, sl
   1470c:	eor	r5, r5, fp
   14710:	mov	r0, r4
   14714:	mov	r1, r5
   14718:	ldrd	sl, [sp, #112]	; 0x70
   1471c:	ldrd	r4, [sp, #240]	; 0xf0
   14720:	lsr	ip, r0, #24
   14724:	adds	sl, sl, r4
   14728:	adc	fp, fp, r5
   1472c:	ldrd	r4, [sp, #128]	; 0x80
   14730:	adds	r4, r4, sl
   14734:	adc	r5, r5, fp
   14738:	mov	sl, r4
   1473c:	mov	fp, r5
   14740:	ldrd	r4, [sp, #152]	; 0x98
   14744:	strd	sl, [sp, #152]	; 0x98
   14748:	eor	r4, r4, sl
   1474c:	eor	r5, r5, fp
   14750:	ldrd	sl, [sp, #24]
   14754:	str	r4, [sp, #164]	; 0xa4
   14758:	str	r5, [sp, #160]	; 0xa0
   1475c:	adds	sl, sl, r2
   14760:	adc	fp, fp, r3
   14764:	mov	r2, sl
   14768:	orr	sl, ip, r1, lsl #8
   1476c:	lsr	r1, r1, #24
   14770:	adds	r4, r2, sl
   14774:	mov	r3, fp
   14778:	orr	fp, r1, r0, lsl #8
   1477c:	adc	r5, r3, fp
   14780:	mov	r0, r4
   14784:	mov	r1, r5
   14788:	ldrd	r4, [sp, #200]	; 0xc8
   1478c:	ldrd	r2, [sp, #208]	; 0xd0
   14790:	strd	r0, [sp, #248]	; 0xf8
   14794:	eor	r4, r4, r6
   14798:	eor	r5, r5, r7
   1479c:	mov	r6, r4
   147a0:	mov	r7, r5
   147a4:	ldrd	r4, [sp, #160]	; 0xa0
   147a8:	lsr	lr, r6, #24
   147ac:	adds	r2, r2, r4
   147b0:	adc	r3, r3, r5
   147b4:	mov	r4, r0
   147b8:	mov	r5, r1
   147bc:	ldrd	r0, [sp, #128]	; 0x80
   147c0:	eor	r4, r4, r8
   147c4:	eor	r5, r5, r9
   147c8:	eor	r0, r0, r2
   147cc:	eor	r1, r1, r3
   147d0:	ldrd	r8, [sp, #40]	; 0x28
   147d4:	strd	r2, [sp, #208]	; 0xd0
   147d8:	ldrd	r2, [sp, #184]	; 0xb8
   147dc:	lsr	ip, r4, #16
   147e0:	adds	r8, r8, r2
   147e4:	adc	r9, r9, r3
   147e8:	ldrd	r2, [sp, #8]
   147ec:	strd	r8, [sp, #128]	; 0x80
   147f0:	ldrd	r8, [sp, #152]	; 0x98
   147f4:	adds	r2, r2, r8
   147f8:	adc	r3, r3, r9
   147fc:	ldrd	r8, [sp, #144]	; 0x90
   14800:	strd	r2, [sp, #240]	; 0xf0
   14804:	orr	r3, lr, r7, lsl #8
   14808:	str	r3, [sp, #152]	; 0x98
   1480c:	ldrd	r2, [sp, #192]	; 0xc0
   14810:	orr	lr, ip, r5, lsl #16
   14814:	lsr	ip, r7, #24
   14818:	str	lr, [sp, #184]	; 0xb8
   1481c:	orr	lr, ip, r6, lsl #8
   14820:	str	lr, [sp, #156]	; 0x9c
   14824:	eor	r8, r8, r2
   14828:	eor	r9, r9, r3
   1482c:	ldrd	r6, [sp, #128]	; 0x80
   14830:	mov	r2, r8
   14834:	mov	r3, r9
   14838:	ldrd	r8, [sp, #152]	; 0x98
   1483c:	lsr	ip, r0, #24
   14840:	orr	lr, ip, r1, lsl #8
   14844:	adds	r6, r6, r8
   14848:	adc	r7, r7, r9
   1484c:	mov	r8, r6
   14850:	mov	r9, r7
   14854:	ldrd	r6, [sp, #176]	; 0xb0
   14858:	lsr	ip, r5, #16
   1485c:	str	lr, [sp, #168]	; 0xa8
   14860:	eor	r6, r6, r8
   14864:	orr	lr, ip, r4, lsl #16
   14868:	eor	r7, r7, r9
   1486c:	str	lr, [sp, #188]	; 0xbc
   14870:	strd	r6, [sp, #144]	; 0x90
   14874:	ldrd	r4, [sp, #216]	; 0xd8
   14878:	ldrd	r6, [sp, #184]	; 0xb8
   1487c:	add	ip, sp, #256	; 0x100
   14880:	lsr	r1, r1, #24
   14884:	adds	r4, r4, r6
   14888:	adc	r5, r5, r7
   1488c:	orr	lr, r1, r0, lsl #8
   14890:	strd	r4, [ip]
   14894:	eor	r4, r4, sl
   14898:	eor	r5, r5, fp
   1489c:	str	lr, [sp, #172]	; 0xac
   148a0:	ldrd	r6, [sp, #168]	; 0xa8
   148a4:	strd	r4, [sp, #176]	; 0xb0
   148a8:	lsl	lr, r3, #1
   148ac:	ldrd	r4, [sp, #240]	; 0xf0
   148b0:	orr	lr, lr, r2, lsr #31
   148b4:	lsl	r2, r2, #1
   148b8:	ldrd	sl, [sp, #144]	; 0x90
   148bc:	orr	r3, r2, r3, lsr #31
   148c0:	adds	r4, r4, r6
   148c4:	ldrd	r0, [sp, #160]	; 0xa0
   148c8:	str	r3, [sp, #128]	; 0x80
   148cc:	ldr	r3, [sp, #180]	; 0xb4
   148d0:	adc	r5, r5, r7
   148d4:	lsr	ip, sl, #16
   148d8:	eor	r0, r0, r4
   148dc:	strd	r4, [sp, #240]	; 0xf0
   148e0:	lsl	r7, r3, #1
   148e4:	orr	r4, ip, fp, lsl #16
   148e8:	ldrd	r2, [sp, #112]	; 0x70
   148ec:	str	lr, [sp, #132]	; 0x84
   148f0:	lsr	lr, fp, #16
   148f4:	ldrd	sl, [sp, #224]	; 0xe0
   148f8:	ldr	r6, [sp, #144]	; 0x90
   148fc:	eor	r1, r1, r5
   14900:	adds	r2, r2, sl
   14904:	adc	r3, r3, fp
   14908:	orr	r5, lr, r6, lsl #16
   1490c:	strd	r2, [sp, #224]	; 0xe0
   14910:	ldrd	r2, [sp, #16]
   14914:	ldr	lr, [sp, #176]	; 0xb0
   14918:	ldrd	sl, [sp, #128]	; 0x80
   1491c:	adds	r2, r2, r8
   14920:	adc	r3, r3, r9
   14924:	orr	r9, r7, lr, lsr #31
   14928:	adds	sl, sl, r2
   1492c:	ldrd	r6, [sp, #200]	; 0xc8
   14930:	adc	fp, fp, r3
   14934:	lsr	ip, r0, #16
   14938:	adds	r6, r6, r4
   1493c:	strd	sl, [sp, #160]	; 0xa0
   14940:	ldrd	sl, [sp, #152]	; 0x98
   14944:	adc	r7, r7, r5
   14948:	eor	sl, sl, r6
   1494c:	strd	r6, [sp, #216]	; 0xd8
   14950:	eor	fp, fp, r7
   14954:	orr	r6, ip, r1, lsl #16
   14958:	lsr	r1, r1, #16
   1495c:	orr	r7, r1, r0, lsl #16
   14960:	mov	r2, sl
   14964:	mov	r3, fp
   14968:	ldrd	r0, [sp, #160]	; 0xa0
   1496c:	ldrd	sl, [sp, #176]	; 0xb0
   14970:	eor	r0, r0, r6
   14974:	lsl	ip, sl, #1
   14978:	eor	r1, r1, r7
   1497c:	orr	r8, ip, fp, lsr #31
   14980:	ldrd	sl, [sp, #224]	; 0xe0
   14984:	strd	r0, [sp, #152]	; 0x98
   14988:	ldrd	r0, [sp, #208]	; 0xd0
   1498c:	adds	sl, sl, r8
   14990:	adc	fp, fp, r9
   14994:	adds	r0, r0, r6
   14998:	adc	r1, r1, r7
   1499c:	mov	r6, r0
   149a0:	mov	r7, r1
   149a4:	ldrd	r0, [sp, #152]	; 0x98
   149a8:	eor	r4, r4, sl
   149ac:	eor	r5, r5, fp
   149b0:	str	r1, [sp, #176]	; 0xb0
   149b4:	add	r1, sp, #256	; 0x100
   149b8:	str	r0, [sp, #180]	; 0xb4
   149bc:	str	r5, [sp, #152]	; 0x98
   149c0:	ldrd	r0, [r1]
   149c4:	str	r4, [sp, #156]	; 0x9c
   149c8:	ldrd	r4, [sp, #176]	; 0xb0
   149cc:	lsl	ip, r3, #1
   149d0:	orr	lr, ip, r2, lsr #31
   149d4:	adds	r0, r0, r4
   149d8:	adc	r1, r1, r5
   149dc:	ldrd	r4, [sp, #240]	; 0xf0
   149e0:	strd	r0, [sp, #200]	; 0xc8
   149e4:	ldrd	r0, [sp, #88]	; 0x58
   149e8:	lsl	r2, r2, #1
   149ec:	orr	r3, r2, r3, lsr #31
   149f0:	adds	r0, r0, r4
   149f4:	adc	r1, r1, r5
   149f8:	str	r3, [sp, #144]	; 0x90
   149fc:	ldrd	r4, [sp, #200]	; 0xc8
   14a00:	mov	r2, r0
   14a04:	mov	r3, r1
   14a08:	ldrd	r0, [sp, #128]	; 0x80
   14a0c:	str	lr, [sp, #148]	; 0x94
   14a10:	add	ip, sp, #256	; 0x100
   14a14:	eor	r0, r0, r4
   14a18:	eor	r1, r1, r5
   14a1c:	ldrd	r4, [sp, #152]	; 0x98
   14a20:	strd	r0, [sp, #128]	; 0x80
   14a24:	adds	r4, r4, r6
   14a28:	adc	r5, r5, r7
   14a2c:	mov	r0, r4
   14a30:	mov	r1, r5
   14a34:	eor	r0, r0, r8
   14a38:	eor	r1, r1, r9
   14a3c:	ldrd	r8, [sp, #144]	; 0x90
   14a40:	strd	r4, [sp, #208]	; 0xd0
   14a44:	ldrd	r4, [sp, #8]
   14a48:	adds	r8, r8, r2
   14a4c:	adc	r9, r9, r3
   14a50:	ldrd	r2, [sp, #184]	; 0xb8
   14a54:	eor	r2, r2, r8
   14a58:	eor	r3, r3, r9
   14a5c:	strd	r2, [ip]
   14a60:	ldr	r3, [sp, #128]	; 0x80
   14a64:	lsr	ip, r0, #24
   14a68:	lsr	lr, r3, #24
   14a6c:	ldrd	r2, [sp, #160]	; 0xa0
   14a70:	adds	r4, r4, r2
   14a74:	adc	r5, r5, r3
   14a78:	ldr	r3, [sp, #132]	; 0x84
   14a7c:	strd	r4, [sp, #240]	; 0xf0
   14a80:	ldrd	r4, [sp, #56]	; 0x38
   14a84:	orr	r3, lr, r3, lsl #8
   14a88:	str	r3, [sp, #184]	; 0xb8
   14a8c:	orr	r3, ip, r1, lsl #8
   14a90:	str	r3, [sp, #160]	; 0xa0
   14a94:	ldrd	r2, [sp, #168]	; 0xa8
   14a98:	adds	r4, r4, sl
   14a9c:	adc	r5, r5, fp
   14aa0:	eor	r3, r3, r7
   14aa4:	mov	r7, r3
   14aa8:	add	r3, sp, #256	; 0x100
   14aac:	eor	r2, r2, r6
   14ab0:	mov	r6, r2
   14ab4:	ldrd	r2, [r3]
   14ab8:	strd	r4, [sp, #224]	; 0xe0
   14abc:	add	ip, sp, #256	; 0x100
   14ac0:	str	r3, [sp, #168]	; 0xa8
   14ac4:	str	r2, [sp, #172]	; 0xac
   14ac8:	ldrd	r4, [sp, #168]	; 0xa8
   14acc:	ldrd	r2, [sp, #192]	; 0xc0
   14ad0:	lsr	r1, r1, #24
   14ad4:	adds	r2, r2, r4
   14ad8:	adc	r3, r3, r5
   14adc:	ldrd	r4, [sp, #144]	; 0x90
   14ae0:	strd	r2, [ip]
   14ae4:	eor	r4, r4, r2
   14ae8:	eor	r5, r5, r3
   14aec:	mov	r2, r4
   14af0:	mov	r3, r5
   14af4:	ldrd	r4, [sp, #128]	; 0x80
   14af8:	lsr	ip, r5, #24
   14afc:	orr	lr, ip, r4, lsl #8
   14b00:	str	lr, [sp, #188]	; 0xbc
   14b04:	ldrd	sl, [sp, #184]	; 0xb8
   14b08:	ldrd	r4, [sp, #240]	; 0xf0
   14b0c:	orr	lr, r1, r0, lsl #8
   14b10:	str	lr, [sp, #164]	; 0xa4
   14b14:	adds	r4, r4, sl
   14b18:	adc	r5, r5, fp
   14b1c:	ldrd	r0, [sp, #160]	; 0xa0
   14b20:	ldrd	sl, [sp, #224]	; 0xe0
   14b24:	strd	r4, [sp, #224]	; 0xe0
   14b28:	lsl	ip, r7, #1
   14b2c:	adds	sl, sl, r0
   14b30:	adc	fp, fp, r1
   14b34:	mov	r0, sl
   14b38:	mov	r1, fp
   14b3c:	ldrd	sl, [sp, #176]	; 0xb0
   14b40:	strd	r0, [sp, #192]	; 0xc0
   14b44:	ldrd	r0, [sp, #192]	; 0xc0
   14b48:	eor	sl, sl, r4
   14b4c:	eor	fp, fp, r5
   14b50:	mov	r4, sl
   14b54:	mov	r5, fp
   14b58:	ldrd	sl, [sp, #152]	; 0x98
   14b5c:	lsr	lr, r4, #16
   14b60:	orr	lr, lr, r5, lsl #16
   14b64:	eor	sl, sl, r0
   14b68:	mov	r0, sl
   14b6c:	eor	fp, fp, r1
   14b70:	orr	sl, ip, r6, lsr #31
   14b74:	mov	r1, fp
   14b78:	str	sl, [sp, #132]	; 0x84
   14b7c:	ldrd	sl, [sp, #80]	; 0x50
   14b80:	str	lr, [sp, #152]	; 0x98
   14b84:	lsr	lr, r5, #16
   14b88:	adds	sl, sl, r8
   14b8c:	lsr	ip, r0, #16
   14b90:	orr	lr, lr, r4, lsl #16
   14b94:	lsl	r6, r6, #1
   14b98:	adc	fp, fp, r9
   14b9c:	orr	r6, r6, r7, lsr #31
   14ba0:	str	lr, [sp, #156]	; 0x9c
   14ba4:	orr	lr, ip, r1, lsl #16
   14ba8:	mov	r8, sl
   14bac:	mov	r9, fp
   14bb0:	str	r6, [sp, #128]	; 0x80
   14bb4:	str	lr, [sp, #144]	; 0x90
   14bb8:	ldrd	r4, [sp, #200]	; 0xc8
   14bbc:	ldrd	sl, [sp, #152]	; 0x98
   14bc0:	lsr	ip, r2, #24
   14bc4:	orr	lr, ip, r3, lsl #8
   14bc8:	lsr	r1, r1, #16
   14bcc:	adds	r4, r4, sl
   14bd0:	str	lr, [sp, #176]	; 0xb0
   14bd4:	orr	lr, r1, r0, lsl #16
   14bd8:	adc	r5, r5, fp
   14bdc:	str	lr, [sp, #148]	; 0x94
   14be0:	mov	r6, r4
   14be4:	mov	r7, r5
   14be8:	ldrd	sl, [sp, #144]	; 0x90
   14bec:	ldrd	r4, [sp, #208]	; 0xd0
   14bf0:	lsr	r3, r3, #24
   14bf4:	orr	r3, r3, r2, lsl #8
   14bf8:	adds	r4, r4, sl
   14bfc:	adc	r5, r5, fp
   14c00:	str	r3, [sp, #180]	; 0xb4
   14c04:	ldrd	sl, [sp, #176]	; 0xb0
   14c08:	strd	r4, [sp, #200]	; 0xc8
   14c0c:	ldrd	r0, [sp, #72]	; 0x48
   14c10:	ldrd	r4, [sp, #248]	; 0xf8
   14c14:	ldrd	r2, [sp, #128]	; 0x80
   14c18:	adds	sl, sl, r8
   14c1c:	adc	fp, fp, r9
   14c20:	ldrd	r8, [sp, #136]	; 0x88
   14c24:	adds	r0, r0, r4
   14c28:	adc	r1, r1, r5
   14c2c:	adds	r2, r2, r0
   14c30:	adc	r3, r3, r1
   14c34:	eor	r8, r8, r2
   14c38:	eor	r9, r9, r3
   14c3c:	mov	r0, r2
   14c40:	mov	r1, r3
   14c44:	mov	r4, r8
   14c48:	mov	r5, r9
   14c4c:	mov	r2, r9
   14c50:	mov	r3, r8
   14c54:	ldrd	r8, [sp, #216]	; 0xd8
   14c58:	strd	sl, [sp, #208]	; 0xd0
   14c5c:	strd	r6, [sp, #240]	; 0xf0
   14c60:	adds	r8, r8, r5
   14c64:	adc	r9, r9, r4
   14c68:	ldrd	r4, [sp, #128]	; 0x80
   14c6c:	strd	r8, [sp, #216]	; 0xd8
   14c70:	eor	r4, r4, r8
   14c74:	eor	r5, r5, r9
   14c78:	mov	sl, r4
   14c7c:	mov	fp, r5
   14c80:	ldrd	r4, [sp, #96]	; 0x60
   14c84:	lsr	ip, sl, #24
   14c88:	orr	r8, ip, fp, lsl #8
   14c8c:	adds	r4, r4, r0
   14c90:	lsr	ip, fp, #24
   14c94:	orr	r9, ip, sl, lsl #8
   14c98:	adc	r5, r5, r1
   14c9c:	adds	r4, r4, r8
   14ca0:	adc	r5, r5, r9
   14ca4:	mov	r0, r4
   14ca8:	mov	r1, r5
   14cac:	ldrd	sl, [sp, #208]	; 0xd0
   14cb0:	strd	r0, [sp, #248]	; 0xf8
   14cb4:	eor	r0, r0, r2
   14cb8:	eor	r1, r1, r3
   14cbc:	mov	r2, r0
   14cc0:	mov	r3, r1
   14cc4:	ldrd	r0, [sp, #184]	; 0xb8
   14cc8:	ldrd	r4, [sp, #168]	; 0xa8
   14ccc:	eor	r1, r1, r7
   14cd0:	eor	r0, r0, r6
   14cd4:	lsl	ip, r1, #1
   14cd8:	orr	r7, ip, r0, lsr #31
   14cdc:	lsl	r0, r0, #1
   14ce0:	str	r7, [sp, #140]	; 0x8c
   14ce4:	orr	r7, r0, r1, lsr #31
   14ce8:	str	r7, [sp, #136]	; 0x88
   14cec:	ldrd	r0, [sp, #104]	; 0x68
   14cf0:	ldrd	r6, [sp, #192]	; 0xc0
   14cf4:	eor	r4, r4, sl
   14cf8:	eor	r5, r5, fp
   14cfc:	adds	r0, r0, r6
   14d00:	adc	r1, r1, r7
   14d04:	mov	sl, r0
   14d08:	mov	fp, r1
   14d0c:	ldrd	r6, [sp, #160]	; 0xa0
   14d10:	ldrd	r0, [sp, #200]	; 0xc8
   14d14:	lsr	ip, r2, #16
   14d18:	lsr	lr, r4, #16
   14d1c:	eor	r6, r6, r0
   14d20:	eor	r7, r7, r1
   14d24:	ldrd	r0, [sp, #136]	; 0x88
   14d28:	orr	lr, lr, r5, lsl #16
   14d2c:	str	lr, [sp, #168]	; 0xa8
   14d30:	adds	r0, r0, sl
   14d34:	adc	r1, r1, fp
   14d38:	strd	r0, [sp, #192]	; 0xc0
   14d3c:	orr	r0, ip, r3, lsl #16
   14d40:	lsr	ip, r5, #16
   14d44:	orr	lr, ip, r4, lsl #16
   14d48:	add	ip, sp, #256	; 0x100
   14d4c:	str	lr, [sp, #172]	; 0xac
   14d50:	lsr	r3, r3, #16
   14d54:	ldrd	sl, [ip]
   14d58:	ldrd	r4, [sp, #168]	; 0xa8
   14d5c:	orr	r1, r3, r2, lsl #16
   14d60:	ldrd	r2, [sp, #216]	; 0xd8
   14d64:	adds	sl, sl, r4
   14d68:	adc	fp, fp, r5
   14d6c:	adds	r2, r2, r0
   14d70:	ldrd	r4, [sp, #176]	; 0xb0
   14d74:	adc	r3, r3, r1
   14d78:	strd	sl, [sp, #184]	; 0xb8
   14d7c:	strd	r2, [sp, #216]	; 0xd8
   14d80:	eor	r2, r2, r8
   14d84:	eor	r3, r3, r9
   14d88:	ldrd	r8, [sp, #192]	; 0xc0
   14d8c:	eor	fp, fp, r5
   14d90:	eor	sl, sl, r4
   14d94:	lsl	ip, r7, #1
   14d98:	orr	lr, ip, r6, lsr #31
   14d9c:	eor	r8, r8, r0
   14da0:	eor	r9, r9, r1
   14da4:	lsl	ip, r6, #1
   14da8:	lsl	r1, fp, #1
   14dac:	str	r9, [sp, #176]	; 0xb0
   14db0:	str	lr, [sp, #132]	; 0x84
   14db4:	str	r8, [sp, #180]	; 0xb4
   14db8:	orr	lr, ip, r7, lsr #31
   14dbc:	ldrd	r8, [sp, #32]
   14dc0:	orr	r7, r1, sl, lsr #31
   14dc4:	ldrd	r0, [sp, #224]	; 0xe0
   14dc8:	mov	r5, fp
   14dcc:	str	lr, [sp, #128]	; 0x80
   14dd0:	adds	r8, r8, r0
   14dd4:	adc	r9, r9, r1
   14dd8:	lsl	lr, sl, #1
   14ddc:	mov	r0, r8
   14de0:	ldrd	sl, [sp, #208]	; 0xd0
   14de4:	mov	r1, r9
   14de8:	ldrd	r8, [sp, #24]
   14dec:	orr	r6, lr, r5, lsr #31
   14df0:	ldrd	r4, [sp, #120]	; 0x78
   14df4:	adds	r8, r8, sl
   14df8:	adc	r9, r9, fp
   14dfc:	ldrd	sl, [sp, #248]	; 0xf8
   14e00:	lsl	ip, r3, #1
   14e04:	orr	lr, ip, r2, lsr #31
   14e08:	lsl	r2, r2, #1
   14e0c:	adds	r4, r4, sl
   14e10:	orr	r3, r2, r3, lsr #31
   14e14:	adc	r5, r5, fp
   14e18:	str	r3, [sp, #160]	; 0xa0
   14e1c:	ldrd	sl, [sp, #184]	; 0xb8
   14e20:	ldrd	r2, [sp, #176]	; 0xb0
   14e24:	str	lr, [sp, #164]	; 0xa4
   14e28:	adds	sl, sl, r2
   14e2c:	mov	r2, sl
   14e30:	adc	fp, fp, r3
   14e34:	adds	sl, r0, r6
   14e38:	mov	r3, fp
   14e3c:	adc	fp, r1, r7
   14e40:	ldrd	r0, [sp, #136]	; 0x88
   14e44:	strd	sl, [sp, #208]	; 0xd0
   14e48:	ldrd	sl, [sp, #128]	; 0x80
   14e4c:	eor	r0, r0, r2
   14e50:	eor	r1, r1, r3
   14e54:	adds	sl, sl, r4
   14e58:	adc	fp, fp, r5
   14e5c:	mov	r4, sl
   14e60:	mov	r5, fp
   14e64:	ldrd	sl, [sp, #160]	; 0xa0
   14e68:	strd	r2, [sp, #248]	; 0xf8
   14e6c:	mov	r2, r0
   14e70:	adds	sl, sl, r8
   14e74:	adc	fp, fp, r9
   14e78:	mov	r3, r1
   14e7c:	ldrd	r8, [sp, #208]	; 0xd0
   14e80:	ldrd	r0, [sp, #144]	; 0x90
   14e84:	lsr	ip, r2, #24
   14e88:	eor	r0, r0, r8
   14e8c:	eor	r1, r1, r9
   14e90:	ldrd	r8, [sp, #168]	; 0xa8
   14e94:	strd	r0, [sp, #184]	; 0xb8
   14e98:	add	r1, sp, #256	; 0x100
   14e9c:	eor	r8, r8, r4
   14ea0:	eor	r9, r9, r5
   14ea4:	strd	r4, [r1]
   14ea8:	strd	r8, [sp, #224]	; 0xe0
   14eac:	ldrd	r8, [sp, #152]	; 0x98
   14eb0:	ldrd	r0, [sp, #184]	; 0xb8
   14eb4:	strd	r2, [sp, #136]	; 0x88
   14eb8:	eor	r8, r8, sl
   14ebc:	str	r1, [sp, #144]	; 0x90
   14ec0:	str	r0, [sp, #148]	; 0x94
   14ec4:	ldrd	r0, [sp, #224]	; 0xe0
   14ec8:	mov	r4, r8
   14ecc:	ldrd	r2, [sp, #136]	; 0x88
   14ed0:	str	r4, [sp, #172]	; 0xac
   14ed4:	str	r1, [sp, #184]	; 0xb8
   14ed8:	ldrd	r4, [sp, #192]	; 0xc0
   14edc:	str	r0, [sp, #188]	; 0xbc
   14ee0:	ldrd	r0, [sp, #40]	; 0x28
   14ee4:	ldr	lr, [sp, #136]	; 0x88
   14ee8:	orr	r8, ip, r3, lsl #8
   14eec:	adds	r0, r0, r4
   14ef0:	eor	r9, r9, fp
   14ef4:	lsr	r3, r3, #24
   14ef8:	adc	r1, r1, r5
   14efc:	str	r9, [sp, #168]	; 0xa8
   14f00:	ldrd	r4, [sp, #144]	; 0x90
   14f04:	orr	r9, r3, lr, lsl #8
   14f08:	ldrd	r2, [sp, #216]	; 0xd8
   14f0c:	strd	r0, [sp, #152]	; 0x98
   14f10:	ldrd	r0, [sp, #168]	; 0xa8
   14f14:	adds	r2, r2, r4
   14f18:	adc	r3, r3, r5
   14f1c:	ldrd	r4, [sp, #200]	; 0xc8
   14f20:	adds	r4, r4, r0
   14f24:	adc	r5, r5, r1
   14f28:	ldrd	r0, [sp, #184]	; 0xb8
   14f2c:	strd	r4, [sp, #216]	; 0xd8
   14f30:	ldrd	r4, [sp, #240]	; 0xf0
   14f34:	strd	r2, [sp, #240]	; 0xf0
   14f38:	eor	r2, r2, r6
   14f3c:	adds	r4, r4, r0
   14f40:	adc	r5, r5, r1
   14f44:	ldrd	r0, [sp, #152]	; 0x98
   14f48:	strd	r4, [sp, #224]	; 0xe0
   14f4c:	eor	r3, r3, r7
   14f50:	adds	r0, r0, r8
   14f54:	adc	r1, r1, r9
   14f58:	mov	r4, r0
   14f5c:	mov	r5, r1
   14f60:	strd	r2, [sp, #192]	; 0xc0
   14f64:	strd	r4, [sp, #200]	; 0xc8
   14f68:	ldrd	r2, [sp, #160]	; 0xa0
   14f6c:	ldrd	r4, [sp, #216]	; 0xd8
   14f70:	ldrd	r0, [sp, #128]	; 0x80
   14f74:	eor	r2, r2, r4
   14f78:	eor	r3, r3, r5
   14f7c:	mov	r4, r2
   14f80:	mov	r5, r3
   14f84:	ldrd	r2, [sp, #224]	; 0xe0
   14f88:	eor	r0, r0, r2
   14f8c:	eor	r1, r1, r3
   14f90:	ldrd	r2, [sp, #176]	; 0xb0
   14f94:	ldrd	r6, [sp, #200]	; 0xc8
   14f98:	ldr	lr, [sp, #192]	; 0xc0
   14f9c:	eor	r2, r2, r6
   14fa0:	eor	r3, r3, r7
   14fa4:	lsr	ip, r2, #16
   14fa8:	ldrd	r6, [sp, #208]	; 0xd0
   14fac:	strd	r2, [sp, #136]	; 0x88
   14fb0:	ldrd	r2, [sp, #64]	; 0x40
   14fb4:	lsr	lr, lr, #24
   14fb8:	adds	r2, r2, r6
   14fbc:	adc	r3, r3, r7
   14fc0:	add	r6, sp, #264	; 0x108
   14fc4:	strd	r2, [r6]
   14fc8:	add	r6, sp, #256	; 0x100
   14fcc:	ldrd	r2, [sp, #48]	; 0x30
   14fd0:	ldrd	r6, [r6]
   14fd4:	adds	r2, r2, r6
   14fd8:	adc	r3, r3, r7
   14fdc:	add	r6, sp, #256	; 0x100
   14fe0:	strd	r2, [r6]
   14fe4:	ldrd	r2, [sp]
   14fe8:	ldrd	r6, [sp, #136]	; 0x88
   14fec:	adds	r2, r2, sl
   14ff0:	adc	r3, r3, fp
   14ff4:	mov	fp, r3
   14ff8:	orr	r3, ip, r7, lsl #16
   14ffc:	str	r3, [sp, #128]	; 0x80
   15000:	lsr	r3, r7, #16
   15004:	orr	r3, r3, r6, lsl #16
   15008:	str	r3, [sp, #132]	; 0x84
   1500c:	ldr	r3, [sp, #196]	; 0xc4
   15010:	ldrd	r6, [sp, #128]	; 0x80
   15014:	mov	sl, r2
   15018:	orr	r3, lr, r3, lsl #8
   1501c:	str	r3, [sp, #152]	; 0x98
   15020:	ldrd	r2, [sp, #248]	; 0xf8
   15024:	lsr	ip, r4, #24
   15028:	lsr	lr, r0, #24
   1502c:	adds	r2, r2, r6
   15030:	adc	r3, r3, r7
   15034:	orr	r7, ip, r5, lsl #8
   15038:	strd	r2, [sp, #208]	; 0xd0
   1503c:	str	r7, [sp, #160]	; 0xa0
   15040:	eor	r3, r3, r9
   15044:	ldrd	r6, [sp, #192]	; 0xc0
   15048:	eor	r2, r2, r8
   1504c:	orr	lr, lr, r1, lsl #8
   15050:	lsl	ip, r3, #1
   15054:	str	lr, [sp, #176]	; 0xb0
   15058:	orr	lr, ip, r2, lsr #31
   1505c:	lsr	ip, r7, #24
   15060:	str	lr, [sp, #140]	; 0x8c
   15064:	orr	lr, ip, r6, lsl #8
   15068:	add	ip, sp, #264	; 0x108
   1506c:	str	lr, [sp, #156]	; 0x9c
   15070:	ldrd	r8, [sp, #152]	; 0x98
   15074:	ldrd	r6, [ip]
   15078:	lsr	ip, r5, #24
   1507c:	orr	lr, ip, r4, lsl #8
   15080:	adds	r6, r6, r8
   15084:	str	lr, [sp, #164]	; 0xa4
   15088:	adc	r7, r7, r9
   1508c:	ldrd	r4, [sp, #160]	; 0xa0
   15090:	mov	r8, r6
   15094:	mov	r9, r7
   15098:	ldrd	r6, [sp, #144]	; 0x90
   1509c:	lsr	r1, r1, #24
   150a0:	adds	r4, r4, sl
   150a4:	orr	lr, r1, r0, lsl #8
   150a8:	add	r1, sp, #256	; 0x100
   150ac:	strd	r8, [sp, #248]	; 0xf8
   150b0:	adc	r5, r5, fp
   150b4:	str	lr, [sp, #180]	; 0xb4
   150b8:	eor	r8, r8, r6
   150bc:	eor	r9, r9, r7
   150c0:	mov	r6, r8
   150c4:	mov	r7, r9
   150c8:	mov	sl, r4
   150cc:	mov	fp, r5
   150d0:	ldrd	r8, [sp, #176]	; 0xb0
   150d4:	ldrd	r4, [r1]
   150d8:	lsl	r2, r2, #1
   150dc:	lsr	lr, r6, #16
   150e0:	adds	r4, r4, r8
   150e4:	adc	r5, r5, r9
   150e8:	mov	r0, r4
   150ec:	mov	r1, r5
   150f0:	ldrd	r4, [sp, #168]	; 0xa8
   150f4:	ldrd	r8, [sp, #184]	; 0xb8
   150f8:	orr	r3, r2, r3, lsr #31
   150fc:	str	r3, [sp, #136]	; 0x88
   15100:	eor	r8, r8, r0
   15104:	orr	r3, lr, r7, lsl #16
   15108:	eor	r9, r9, r1
   1510c:	str	r3, [sp, #144]	; 0x90
   15110:	add	ip, sp, #256	; 0x100
   15114:	lsr	r3, r7, #16
   15118:	orr	r3, r3, r6, lsl #16
   1511c:	lsr	lr, r8, #16
   15120:	strd	r0, [ip]
   15124:	str	r3, [sp, #148]	; 0x94
   15128:	orr	lr, lr, r9, lsl #16
   1512c:	lsr	r1, r9, #16
   15130:	str	lr, [sp, #168]	; 0xa8
   15134:	ldrd	r6, [sp, #240]	; 0xf0
   15138:	orr	lr, r1, r8, lsl #16
   1513c:	ldrd	r8, [sp, #144]	; 0x90
   15140:	eor	r4, r4, sl
   15144:	eor	r5, r5, fp
   15148:	adds	r6, r6, r8
   1514c:	adc	r7, r7, r9
   15150:	lsr	ip, r4, #16
   15154:	strd	r6, [sp, #184]	; 0xb8
   15158:	ldrd	r6, [sp, #216]	; 0xd8
   1515c:	orr	r2, ip, r5, lsl #16
   15160:	lsr	ip, r5, #16
   15164:	orr	r3, ip, r4, lsl #16
   15168:	adds	r6, r6, r2
   1516c:	adc	r7, r7, r3
   15170:	str	lr, [sp, #172]	; 0xac
   15174:	ldrd	r4, [sp, #224]	; 0xe0
   15178:	strd	r6, [sp, #192]	; 0xc0
   1517c:	ldrd	r6, [sp, #168]	; 0xa8
   15180:	adds	r4, r4, r6
   15184:	adc	r5, r5, r7
   15188:	mov	r0, r4
   1518c:	ldrd	r6, [sp, #200]	; 0xc8
   15190:	mov	r1, r5
   15194:	ldrd	r4, [sp, #56]	; 0x38
   15198:	adds	r4, r4, r6
   1519c:	adc	r5, r5, r7
   151a0:	ldrd	r6, [sp, #32]
   151a4:	strd	r4, [sp, #224]	; 0xe0
   151a8:	ldrd	r4, [sp, #248]	; 0xf8
   151ac:	adds	r4, r4, r6
   151b0:	adc	r5, r5, r7
   151b4:	mov	r6, r4
   151b8:	mov	r7, r5
   151bc:	ldrd	r4, [sp, #136]	; 0x88
   151c0:	adds	r4, r4, r6
   151c4:	adc	r5, r5, r7
   151c8:	mov	r8, r4
   151cc:	mov	r9, r5
   151d0:	ldrd	r6, [sp, #160]	; 0xa0
   151d4:	strd	r8, [sp, #200]	; 0xc8
   151d8:	eor	r8, r8, r2
   151dc:	eor	r9, r9, r3
   151e0:	mov	r4, r8
   151e4:	mov	r5, r9
   151e8:	str	r5, [sp, #160]	; 0xa0
   151ec:	str	r4, [sp, #164]	; 0xa4
   151f0:	ldrd	r4, [sp, #176]	; 0xb0
   151f4:	ldrd	r8, [sp, #192]	; 0xc0
   151f8:	eor	r4, r4, r0
   151fc:	eor	r5, r5, r1
   15200:	eor	r7, r7, r9
   15204:	eor	r6, r6, r8
   15208:	mov	r3, r7
   1520c:	strd	r4, [sp, #176]	; 0xb0
   15210:	ldrd	r4, [sp, #160]	; 0xa0
   15214:	ldrd	r8, [sp, #152]	; 0x98
   15218:	mov	r2, r6
   1521c:	ldrd	r6, [sp, #184]	; 0xb8
   15220:	lsl	ip, r3, #1
   15224:	adds	r4, r4, r0
   15228:	orr	r0, ip, r2, lsr #31
   1522c:	eor	r8, r8, r6
   15230:	eor	r9, r9, r7
   15234:	str	r0, [sp, #156]	; 0x9c
   15238:	ldrd	r6, [sp, #136]	; 0x88
   1523c:	adc	r5, r5, r1
   15240:	add	ip, sp, #256	; 0x100
   15244:	eor	r6, r6, r4
   15248:	eor	r7, r7, r5
   1524c:	mov	r0, r6
   15250:	mov	r1, r7
   15254:	strd	r4, [sp, #216]	; 0xd8
   15258:	ldrd	r6, [ip]
   1525c:	ldrd	r4, [sp, #64]	; 0x40
   15260:	lsl	r2, r2, #1
   15264:	orr	r3, r2, r3, lsr #31
   15268:	adds	r4, r4, r6
   1526c:	adc	r5, r5, r7
   15270:	str	r3, [sp, #152]	; 0x98
   15274:	mov	r6, r4
   15278:	mov	r7, r5
   1527c:	ldrd	r4, [sp, #152]	; 0x98
   15280:	lsl	r3, r9, #1
   15284:	orr	r3, r3, r8, lsr #31
   15288:	adds	r4, r4, r6
   1528c:	adc	r5, r5, r7
   15290:	mov	r6, r4
   15294:	mov	r7, r5
   15298:	ldrd	r4, [sp, #104]	; 0x68
   1529c:	str	r3, [sp, #140]	; 0x8c
   152a0:	ldr	r3, [sp, #180]	; 0xb4
   152a4:	adds	r4, r4, sl
   152a8:	lsl	ip, r8, #1
   152ac:	adc	r5, r5, fp
   152b0:	mov	fp, r5
   152b4:	orr	r5, ip, r9, lsr #31
   152b8:	ldrd	r8, [sp, #176]	; 0xb0
   152bc:	lsl	lr, r3, #1
   152c0:	ldrd	r2, [sp, #128]	; 0x80
   152c4:	orr	lr, lr, r8, lsr #31
   152c8:	str	lr, [sp, #132]	; 0x84
   152cc:	eor	r2, r2, r6
   152d0:	eor	r3, r3, r7
   152d4:	strd	r6, [sp, #240]	; 0xf0
   152d8:	lsl	lr, r8, #1
   152dc:	ldrd	r6, [sp, #112]	; 0x70
   152e0:	ldrd	r8, [sp, #200]	; 0xc8
   152e4:	str	r5, [sp, #136]	; 0x88
   152e8:	lsr	ip, r0, #24
   152ec:	adds	r6, r6, r8
   152f0:	adc	r7, r7, r9
   152f4:	mov	r5, r7
   152f8:	ldr	r7, [sp, #180]	; 0xb4
   152fc:	ldrd	r8, [sp, #136]	; 0x88
   15300:	mov	sl, r4
   15304:	orr	lr, lr, r7, lsr #31
   15308:	str	lr, [sp, #128]	; 0x80
   1530c:	orr	lr, ip, r1, lsl #8
   15310:	lsr	r1, r1, #24
   15314:	adds	r8, r8, sl
   15318:	orr	r0, r1, r0, lsl #8
   1531c:	adc	r9, r9, fp
   15320:	str	r0, [sp, #180]	; 0xb4
   15324:	ldrd	r0, [sp, #168]	; 0xa8
   15328:	mov	sl, r8
   1532c:	mov	fp, r9
   15330:	mov	r4, r6
   15334:	eor	r0, r0, sl
   15338:	ldrd	r6, [sp, #224]	; 0xe0
   1533c:	strd	sl, [sp, #248]	; 0xf8
   15340:	ldrd	sl, [sp, #128]	; 0x80
   15344:	str	lr, [sp, #176]	; 0xb0
   15348:	mov	r8, r3
   1534c:	adds	r6, r6, sl
   15350:	adc	r7, r7, fp
   15354:	ldrd	sl, [sp, #176]	; 0xb0
   15358:	eor	r1, r1, r9
   1535c:	mov	r9, r2
   15360:	adds	sl, sl, r4
   15364:	adc	fp, fp, r5
   15368:	mov	r4, sl
   1536c:	mov	r5, fp
   15370:	ldrd	sl, [sp, #144]	; 0x90
   15374:	strd	r4, [sp, #224]	; 0xe0
   15378:	add	ip, sp, #256	; 0x100
   1537c:	eor	sl, sl, r6
   15380:	eor	fp, fp, r7
   15384:	mov	r2, sl
   15388:	mov	r3, fp
   1538c:	ldrd	sl, [sp, #160]	; 0xa0
   15390:	strd	r6, [sp, #200]	; 0xc8
   15394:	str	r1, [sp, #160]	; 0xa0
   15398:	eor	sl, sl, r4
   1539c:	eor	fp, fp, r5
   153a0:	mov	r4, sl
   153a4:	mov	r5, fp
   153a8:	ldrd	sl, [sp, #184]	; 0xb8
   153ac:	lsr	lr, r5, #16
   153b0:	orr	lr, lr, r4, lsl #16
   153b4:	adds	sl, sl, r8
   153b8:	adc	fp, fp, r9
   153bc:	strd	sl, [ip]
   153c0:	ldrd	r6, [sp, #152]	; 0x98
   153c4:	str	r0, [sp, #164]	; 0xa4
   153c8:	ldrd	r0, [sp, #208]	; 0xd0
   153cc:	eor	r6, r6, sl
   153d0:	eor	r7, r7, fp
   153d4:	ldrd	sl, [sp, #160]	; 0xa0
   153d8:	str	r3, [sp, #144]	; 0x90
   153dc:	lsr	r3, r4, #16
   153e0:	adds	r0, r0, sl
   153e4:	adc	r1, r1, fp
   153e8:	str	r2, [sp, #148]	; 0x94
   153ec:	orr	r3, r3, r5, lsl #16
   153f0:	strd	r0, [sp, #184]	; 0xb8
   153f4:	str	r3, [sp, #152]	; 0x98
   153f8:	ldrd	r0, [sp, #144]	; 0x90
   153fc:	ldrd	r2, [sp, #192]	; 0xc0
   15400:	ldrd	r4, [sp, #240]	; 0xf0
   15404:	str	lr, [sp, #156]	; 0x9c
   15408:	adds	r2, r2, r0
   1540c:	adc	r3, r3, r1
   15410:	mov	sl, r2
   15414:	mov	fp, r3
   15418:	ldrd	r0, [sp, #136]	; 0x88
   1541c:	ldrd	r2, [sp, #184]	; 0xb8
   15420:	strd	sl, [sp, #208]	; 0xd0
   15424:	lsr	ip, r6, #24
   15428:	eor	r0, r0, r2
   1542c:	eor	r1, r1, r3
   15430:	mov	r2, r0
   15434:	mov	r3, r1
   15438:	ldrd	r0, [sp, #128]	; 0x80
   1543c:	orr	lr, ip, r7, lsl #8
   15440:	lsr	ip, r7, #24
   15444:	eor	r0, r0, sl
   15448:	eor	r1, r1, fp
   1544c:	ldrd	sl, [sp, #120]	; 0x78
   15450:	str	lr, [sp, #168]	; 0xa8
   15454:	orr	lr, ip, r6, lsl #8
   15458:	adds	sl, sl, r4
   1545c:	adc	fp, fp, r5
   15460:	ldrd	r4, [sp, #152]	; 0x98
   15464:	strd	sl, [sp, #128]	; 0x80
   15468:	ldrd	sl, [sp, #216]	; 0xd8
   1546c:	str	lr, [sp, #172]	; 0xac
   15470:	ldrd	r6, [sp, #168]	; 0xa8
   15474:	adds	sl, sl, r4
   15478:	adc	fp, fp, r5
   1547c:	ldrd	r4, [sp, #176]	; 0xb0
   15480:	strd	sl, [sp, #240]	; 0xf0
   15484:	lsr	ip, r2, #24
   15488:	eor	r4, r4, sl
   1548c:	eor	r5, r5, fp
   15490:	mov	sl, r4
   15494:	mov	fp, r5
   15498:	ldrd	r4, [sp, #128]	; 0x80
   1549c:	orr	lr, ip, r3, lsl #8
   154a0:	str	lr, [sp, #136]	; 0x88
   154a4:	adds	r4, r4, r6
   154a8:	adc	r5, r5, r7
   154ac:	mov	r6, r4
   154b0:	mov	r7, r5
   154b4:	ldrd	r4, [sp, #24]
   154b8:	strd	r6, [sp, #192]	; 0xc0
   154bc:	ldrd	r6, [sp, #248]	; 0xf8
   154c0:	lsl	ip, fp, #1
   154c4:	lsr	r3, r3, #24
   154c8:	adds	r4, r4, r6
   154cc:	adc	r5, r5, r7
   154d0:	ldrd	r6, [sp, #192]	; 0xc0
   154d4:	strd	r4, [sp, #176]	; 0xb0
   154d8:	lsl	lr, sl, #1
   154dc:	eor	r6, r6, r8
   154e0:	eor	r7, r7, r9
   154e4:	ldrd	r8, [sp]
   154e8:	ldrd	r4, [sp, #200]	; 0xc8
   154ec:	orr	r3, r3, r2, lsl #8
   154f0:	str	r3, [sp, #140]	; 0x8c
   154f4:	adds	r8, r8, r4
   154f8:	adc	r9, r9, r5
   154fc:	orr	r5, ip, sl, lsr #31
   15500:	lsr	ip, r0, #24
   15504:	orr	r4, lr, fp, lsr #31
   15508:	orr	lr, ip, r1, lsl #8
   1550c:	lsr	r1, r1, #24
   15510:	ldrd	r2, [sp, #176]	; 0xb0
   15514:	str	lr, [sp, #128]	; 0x80
   15518:	orr	lr, r1, r0, lsl #8
   1551c:	ldrd	r0, [sp, #136]	; 0x88
   15520:	str	lr, [sp, #132]	; 0x84
   15524:	ldrd	sl, [sp, #96]	; 0x60
   15528:	adds	r2, r2, r0
   1552c:	adc	r3, r3, r1
   15530:	mov	r0, r2
   15534:	mov	r1, r3
   15538:	ldrd	r2, [sp, #128]	; 0x80
   1553c:	strd	r0, [sp, #248]	; 0xf8
   15540:	add	ip, sp, #264	; 0x108
   15544:	adds	r2, r2, r8
   15548:	adc	r3, r3, r9
   1554c:	mov	r8, r2
   15550:	mov	r9, r3
   15554:	ldrd	r2, [sp, #160]	; 0xa0
   15558:	strd	r8, [sp, #200]	; 0xc8
   1555c:	adds	r8, r8, sl
   15560:	eor	r3, r3, r1
   15564:	lsr	r1, r6, #16
   15568:	orr	lr, r1, r7, lsl #16
   1556c:	lsr	r1, r7, #16
   15570:	eor	r2, r2, r0
   15574:	str	lr, [sp, #176]	; 0xb0
   15578:	orr	lr, r1, r6, lsl #16
   1557c:	str	lr, [sp, #180]	; 0xb4
   15580:	lsr	r1, r2, #16
   15584:	ldrd	r6, [sp, #176]	; 0xb0
   15588:	orr	lr, r1, r3, lsl #16
   1558c:	adc	r9, r9, fp
   15590:	lsr	r3, r3, #16
   15594:	adds	sl, r8, r4
   15598:	adc	fp, r9, r5
   1559c:	orr	r3, r3, r2, lsl #16
   155a0:	str	lr, [sp, #160]	; 0xa0
   155a4:	eor	r6, r6, sl
   155a8:	eor	r7, r7, fp
   155ac:	str	r3, [sp, #164]	; 0xa4
   155b0:	mov	r0, r6
   155b4:	ldrd	r2, [sp, #184]	; 0xb8
   155b8:	mov	r1, r7
   155bc:	ldrd	r6, [sp, #160]	; 0xa0
   155c0:	str	r1, [sp, #184]	; 0xb8
   155c4:	str	r0, [sp, #188]	; 0xbc
   155c8:	adds	r2, r2, r6
   155cc:	adc	r3, r3, r7
   155d0:	ldrd	r0, [sp, #144]	; 0x90
   155d4:	ldrd	r8, [sp, #200]	; 0xc8
   155d8:	ldrd	r6, [sp, #184]	; 0xb8
   155dc:	eor	r8, r8, r0
   155e0:	adds	r6, r6, r2
   155e4:	eor	r9, r9, r1
   155e8:	ldrd	r0, [sp, #136]	; 0x88
   155ec:	adc	r7, r7, r3
   155f0:	eor	r0, r0, r2
   155f4:	eor	r1, r1, r3
   155f8:	strd	r6, [sp, #200]	; 0xc8
   155fc:	mov	r2, r6
   15600:	mov	r3, r7
   15604:	ldrd	r6, [sp, #8]
   15608:	eor	r3, r3, r5
   1560c:	mov	r5, r3
   15610:	lsr	r3, r8, #16
   15614:	adds	r6, r6, sl
   15618:	orr	r3, r3, r9, lsl #16
   1561c:	adc	r7, r7, fp
   15620:	str	r3, [sp, #136]	; 0x88
   15624:	lsr	r3, r9, #16
   15628:	mov	sl, r6
   1562c:	mov	fp, r7
   15630:	orr	r3, r3, r8, lsl #16
   15634:	ldrd	r6, [sp, #72]	; 0x48
   15638:	ldrd	r8, [sp, #224]	; 0xe0
   1563c:	eor	r2, r2, r4
   15640:	mov	r4, r2
   15644:	adds	r6, r6, r8
   15648:	adc	r7, r7, r9
   1564c:	str	r3, [sp, #140]	; 0x8c
   15650:	lsr	r3, r2, #24
   15654:	add	r2, sp, #272	; 0x110
   15658:	strd	r0, [ip]
   1565c:	strd	r6, [r2]
   15660:	ldrd	r8, [sp, #136]	; 0x88
   15664:	ldrd	r6, [sp, #208]	; 0xd0
   15668:	lsr	ip, r5, #24
   1566c:	orr	lr, ip, r4, lsl #8
   15670:	orr	r3, r3, r5, lsl #8
   15674:	adds	r6, r6, r8
   15678:	str	r3, [sp, #144]	; 0x90
   1567c:	str	lr, [sp, #148]	; 0x94
   15680:	adc	r7, r7, r9
   15684:	ldrd	r8, [sp, #144]	; 0x90
   15688:	ldrd	r0, [sp, #184]	; 0xb8
   1568c:	ldrd	r2, [sp, #128]	; 0x80
   15690:	adds	r8, r8, sl
   15694:	adc	r9, r9, fp
   15698:	eor	r1, r1, r9
   1569c:	mov	r5, r1
   156a0:	add	r1, sp, #264	; 0x108
   156a4:	eor	r3, r3, r7
   156a8:	ldrd	sl, [r1]
   156ac:	eor	r2, r2, r6
   156b0:	strd	r6, [sp, #216]	; 0xd8
   156b4:	lsl	ip, fp, #1
   156b8:	orr	r7, ip, sl, lsr #31
   156bc:	eor	r0, r0, r8
   156c0:	lsl	ip, r3, #1
   156c4:	add	r1, sp, #256	; 0x100
   156c8:	mov	r4, r0
   156cc:	orr	r0, ip, r2, lsr #31
   156d0:	str	r0, [sp, #132]	; 0x84
   156d4:	strd	r8, [sp, #224]	; 0xe0
   156d8:	ldrd	r8, [r1]
   156dc:	ldrd	r0, [sp, #176]	; 0xb0
   156e0:	add	ip, sp, #256	; 0x100
   156e4:	lsl	r2, r2, #1
   156e8:	adds	r8, r8, r0
   156ec:	adc	r9, r9, r1
   156f0:	add	r1, sp, #272	; 0x110
   156f4:	lsl	r0, sl, #1
   156f8:	orr	r6, r0, fp, lsr #31
   156fc:	ldrd	r0, [r1]
   15700:	orr	r3, r2, r3, lsr #31
   15704:	ldrd	sl, [sp, #136]	; 0x88
   15708:	adds	r0, r0, r6
   1570c:	adc	r1, r1, r7
   15710:	str	r3, [sp, #128]	; 0x80
   15714:	strd	r0, [ip]
   15718:	lsr	ip, r4, #16
   1571c:	orr	r3, ip, r5, lsl #16
   15720:	str	r3, [sp, #176]	; 0xb0
   15724:	lsr	r3, r5, #16
   15728:	orr	r3, r3, r4, lsl #16
   1572c:	eor	sl, sl, r0
   15730:	eor	fp, fp, r1
   15734:	str	r3, [sp, #180]	; 0xb4
   15738:	str	fp, [sp, #184]	; 0xb8
   1573c:	ldrd	r2, [sp, #200]	; 0xc8
   15740:	str	sl, [sp, #188]	; 0xbc
   15744:	ldrd	sl, [sp, #176]	; 0xb0
   15748:	ldrd	r4, [sp, #192]	; 0xc0
   1574c:	ldrd	r0, [sp, #128]	; 0x80
   15750:	adds	r2, r2, sl
   15754:	adc	r3, r3, fp
   15758:	strd	r2, [sp, #200]	; 0xc8
   1575c:	ldrd	r2, [sp, #184]	; 0xb8
   15760:	adds	r2, r2, r8
   15764:	adc	r3, r3, r9
   15768:	strd	r2, [sp, #208]	; 0xd0
   1576c:	ldrd	r2, [sp, #16]
   15770:	adds	r2, r2, r4
   15774:	adc	r3, r3, r5
   15778:	ldrd	r4, [sp, #160]	; 0xa0
   1577c:	adds	r0, r0, r2
   15780:	adc	r1, r1, r3
   15784:	mov	r2, r0
   15788:	mov	r3, r1
   1578c:	eor	r4, r4, r0
   15790:	eor	r5, r5, r1
   15794:	ldrd	r0, [sp, #168]	; 0xa8
   15798:	eor	r1, r1, r9
   1579c:	eor	r0, r0, r8
   157a0:	lsl	ip, r1, #1
   157a4:	orr	lr, ip, r0, lsr #31
   157a8:	lsl	r0, r0, #1
   157ac:	str	lr, [sp, #140]	; 0x8c
   157b0:	orr	lr, r0, r1, lsr #31
   157b4:	str	lr, [sp, #136]	; 0x88
   157b8:	mov	r8, r5
   157bc:	mov	r9, r4
   157c0:	ldrd	r4, [sp, #240]	; 0xf0
   157c4:	ldrd	sl, [sp, #40]	; 0x28
   157c8:	adds	r4, r4, r8
   157cc:	adc	r5, r5, r9
   157d0:	mov	r0, r4
   157d4:	mov	r1, r5
   157d8:	strd	r4, [sp, #240]	; 0xf0
   157dc:	ldrd	r4, [sp, #128]	; 0x80
   157e0:	eor	r4, r4, r0
   157e4:	eor	r5, r5, r1
   157e8:	mov	r0, r4
   157ec:	mov	r1, r5
   157f0:	ldrd	r4, [sp, #248]	; 0xf8
   157f4:	lsr	ip, r0, #24
   157f8:	adds	sl, sl, r4
   157fc:	adc	fp, fp, r5
   15800:	ldrd	r4, [sp, #136]	; 0x88
   15804:	adds	r4, r4, sl
   15808:	adc	r5, r5, fp
   1580c:	mov	sl, r4
   15810:	mov	fp, r5
   15814:	ldrd	r4, [sp, #152]	; 0x98
   15818:	strd	sl, [sp, #152]	; 0x98
   1581c:	eor	r4, r4, sl
   15820:	eor	r5, r5, fp
   15824:	ldrd	sl, [sp, #88]	; 0x58
   15828:	str	r5, [sp, #128]	; 0x80
   1582c:	str	r4, [sp, #132]	; 0x84
   15830:	adds	sl, sl, r2
   15834:	adc	fp, fp, r3
   15838:	mov	r2, sl
   1583c:	orr	sl, ip, r1, lsl #8
   15840:	lsr	r1, r1, #24
   15844:	mov	r3, fp
   15848:	orr	fp, r1, r0, lsl #8
   1584c:	ldrd	r0, [sp, #208]	; 0xd0
   15850:	adds	r4, r2, sl
   15854:	adc	r5, r3, fp
   15858:	eor	r0, r0, r6
   1585c:	ldrd	r2, [sp, #128]	; 0x80
   15860:	eor	r1, r1, r7
   15864:	ldrd	r6, [sp, #216]	; 0xd8
   15868:	strd	r0, [sp, #160]	; 0xa0
   1586c:	ldrd	r0, [sp, #136]	; 0x88
   15870:	adds	r6, r6, r2
   15874:	adc	r7, r7, r3
   15878:	add	r2, sp, #256	; 0x100
   1587c:	strd	r4, [sp, #248]	; 0xf8
   15880:	eor	r0, r0, r6
   15884:	eor	r4, r4, r8
   15888:	eor	r5, r5, r9
   1588c:	eor	r1, r1, r7
   15890:	ldrd	r8, [sp, #80]	; 0x50
   15894:	strd	r6, [sp, #192]	; 0xc0
   15898:	ldrd	r6, [r2]
   1589c:	ldr	r3, [sp, #160]	; 0xa0
   158a0:	ldr	r2, [sp, #164]	; 0xa4
   158a4:	adds	r8, r8, r6
   158a8:	adc	r9, r9, r7
   158ac:	strd	r0, [sp, #168]	; 0xa8
   158b0:	ldrd	r6, [sp, #48]	; 0x30
   158b4:	ldrd	r0, [sp, #152]	; 0x98
   158b8:	lsr	r3, r3, #24
   158bc:	orr	r3, r3, r2, lsl #8
   158c0:	adds	r6, r6, r0
   158c4:	adc	r7, r7, r1
   158c8:	str	r3, [sp, #136]	; 0x88
   158cc:	ldrd	r0, [sp, #200]	; 0xc8
   158d0:	ldrd	r2, [sp, #144]	; 0x90
   158d4:	lsr	ip, r4, #16
   158d8:	orr	lr, ip, r5, lsl #16
   158dc:	eor	r2, r2, r0
   158e0:	eor	r3, r3, r1
   158e4:	ldrd	r0, [sp, #160]	; 0xa0
   158e8:	str	lr, [sp, #152]	; 0x98
   158ec:	lsr	ip, r1, #24
   158f0:	orr	lr, ip, r0, lsl #8
   158f4:	str	lr, [sp, #140]	; 0x8c
   158f8:	ldrd	r0, [sp, #136]	; 0x88
   158fc:	adds	r0, r0, r8
   15900:	mov	r8, r0
   15904:	ldr	r0, [sp, #168]	; 0xa8
   15908:	adc	r1, r1, r9
   1590c:	mov	r9, r1
   15910:	lsr	ip, r0, #24
   15914:	ldrd	r0, [sp, #184]	; 0xb8
   15918:	strd	r8, [sp, #160]	; 0xa0
   1591c:	eor	r8, r8, r0
   15920:	ldr	r0, [sp, #172]	; 0xac
   15924:	eor	r9, r9, r1
   15928:	orr	lr, ip, r0, lsl #8
   1592c:	lsr	ip, r5, #16
   15930:	str	lr, [sp, #144]	; 0x90
   15934:	orr	lr, ip, r4, lsl #16
   15938:	str	lr, [sp, #156]	; 0x9c
   1593c:	ldrd	r0, [sp, #240]	; 0xf0
   15940:	ldrd	r4, [sp, #152]	; 0x98
   15944:	add	ip, sp, #256	; 0x100
   15948:	adds	r0, r0, r4
   1594c:	adc	r1, r1, r5
   15950:	ldrd	r4, [sp, #168]	; 0xa8
   15954:	strd	r0, [ip]
   15958:	eor	r1, r1, fp
   1595c:	mov	fp, r1
   15960:	lsr	r1, r5, #24
   15964:	orr	lr, r1, r4, lsl #8
   15968:	str	lr, [sp, #148]	; 0x94
   1596c:	eor	r0, r0, sl
   15970:	mov	sl, r0
   15974:	ldrd	r0, [sp, #144]	; 0x90
   15978:	lsl	lr, r3, #1
   1597c:	lsr	ip, r8, #16
   15980:	adds	r6, r6, r0
   15984:	adc	r7, r7, r1
   15988:	ldrd	r0, [sp, #128]	; 0x80
   1598c:	strd	r6, [sp, #240]	; 0xf0
   15990:	orr	lr, lr, r2, lsr #31
   15994:	eor	r0, r0, r6
   15998:	eor	r1, r1, r7
   1599c:	mov	r6, r8
   159a0:	mov	r7, r9
   159a4:	lsl	r2, r2, #1
   159a8:	orr	r4, ip, r9, lsl #16
   159ac:	orr	r3, r2, r3, lsr #31
   159b0:	strd	r6, [sp, #168]	; 0xa8
   159b4:	lsr	r2, r9, #16
   159b8:	ldrd	r6, [sp, #104]	; 0x68
   159bc:	ldrd	r8, [sp, #224]	; 0xe0
   159c0:	str	lr, [sp, #132]	; 0x84
   159c4:	ldr	lr, [sp, #168]	; 0xa8
   159c8:	adds	r6, r6, r8
   159cc:	adc	r7, r7, r9
   159d0:	ldrd	r8, [sp, #160]	; 0xa0
   159d4:	strd	r6, [sp, #224]	; 0xe0
   159d8:	ldrd	r6, [sp, #40]	; 0x28
   159dc:	str	r3, [sp, #128]	; 0x80
   159e0:	lsl	r3, fp, #1
   159e4:	adds	r8, r8, r6
   159e8:	adc	r9, r9, r7
   159ec:	orr	r5, r2, lr, lsl #16
   159f0:	mov	r7, r9
   159f4:	orr	r9, r3, sl, lsr #31
   159f8:	ldrd	r2, [sp, #128]	; 0x80
   159fc:	lsr	ip, r0, #16
   15a00:	adds	r2, r2, r8
   15a04:	adc	r3, r3, r7
   15a08:	ldrd	r6, [sp, #136]	; 0x88
   15a0c:	strd	r2, [sp, #184]	; 0xb8
   15a10:	ldrd	r2, [sp, #208]	; 0xd0
   15a14:	adds	r2, r2, r4
   15a18:	adc	r3, r3, r5
   15a1c:	eor	r6, r6, r2
   15a20:	strd	r2, [sp, #216]	; 0xd8
   15a24:	mov	r2, r6
   15a28:	orr	r6, ip, r1, lsl #16
   15a2c:	lsl	ip, sl, #1
   15a30:	orr	r8, ip, fp, lsr #31
   15a34:	ldrd	sl, [sp, #224]	; 0xe0
   15a38:	eor	r7, r7, r3
   15a3c:	lsr	r1, r1, #16
   15a40:	adds	sl, sl, r8
   15a44:	adc	fp, fp, r9
   15a48:	mov	r3, r7
   15a4c:	strd	sl, [sp, #208]	; 0xd0
   15a50:	eor	sl, sl, r4
   15a54:	eor	fp, fp, r5
   15a58:	mov	r4, sl
   15a5c:	mov	r5, fp
   15a60:	ldrd	sl, [sp, #184]	; 0xb8
   15a64:	orr	r7, r1, r0, lsl #16
   15a68:	lsl	ip, r3, #1
   15a6c:	eor	sl, sl, r6
   15a70:	eor	fp, fp, r7
   15a74:	mov	r0, sl
   15a78:	mov	r1, fp
   15a7c:	ldrd	sl, [sp, #192]	; 0xc0
   15a80:	str	r1, [sp, #160]	; 0xa0
   15a84:	add	r1, sp, #256	; 0x100
   15a88:	adds	sl, sl, r6
   15a8c:	adc	fp, fp, r7
   15a90:	str	r0, [sp, #164]	; 0xa4
   15a94:	mov	r6, sl
   15a98:	mov	r7, fp
   15a9c:	ldrd	r0, [r1]
   15aa0:	ldrd	sl, [sp, #160]	; 0xa0
   15aa4:	orr	lr, ip, r2, lsr #31
   15aa8:	lsl	r2, r2, #1
   15aac:	adds	r0, r0, sl
   15ab0:	adc	r1, r1, fp
   15ab4:	orr	r3, r2, r3, lsr #31
   15ab8:	str	r3, [sp, #168]	; 0xa8
   15abc:	mov	sl, r0
   15ac0:	mov	fp, r1
   15ac4:	ldrd	r2, [sp]
   15ac8:	ldrd	r0, [sp, #240]	; 0xf0
   15acc:	str	r5, [sp, #136]	; 0x88
   15ad0:	str	r4, [sp, #140]	; 0x8c
   15ad4:	adds	r2, r2, r0
   15ad8:	adc	r3, r3, r1
   15adc:	ldrd	r4, [sp, #128]	; 0x80
   15ae0:	add	r1, sp, #256	; 0x100
   15ae4:	str	lr, [sp, #172]	; 0xac
   15ae8:	strd	sl, [r1]
   15aec:	ldrd	r0, [sp, #136]	; 0x88
   15af0:	eor	r4, r4, sl
   15af4:	eor	r5, r5, fp
   15af8:	adds	r0, r0, r6
   15afc:	strd	r4, [sp, #192]	; 0xc0
   15b00:	ldrd	r4, [sp, #168]	; 0xa8
   15b04:	adc	r1, r1, r7
   15b08:	add	ip, sp, #272	; 0x110
   15b0c:	strd	r0, [sp, #224]	; 0xe0
   15b10:	eor	r0, r0, r8
   15b14:	adds	r8, r4, r2
   15b18:	eor	r1, r1, r9
   15b1c:	adc	r9, r5, r3
   15b20:	mov	r2, r8
   15b24:	mov	r3, r9
   15b28:	ldrd	r8, [sp, #152]	; 0x98
   15b2c:	mov	sl, r2
   15b30:	mov	fp, r3
   15b34:	eor	sl, sl, r8
   15b38:	eor	fp, fp, r9
   15b3c:	strd	r2, [ip]
   15b40:	ldrd	r8, [sp, #184]	; 0xb8
   15b44:	mov	r2, sl
   15b48:	mov	r3, fp
   15b4c:	ldrd	sl, [sp, #64]	; 0x40
   15b50:	ldr	lr, [sp, #192]	; 0xc0
   15b54:	str	r3, [sp, #168]	; 0xa8
   15b58:	adds	sl, sl, r8
   15b5c:	adc	fp, fp, r9
   15b60:	ldrd	r8, [sp, #208]	; 0xd0
   15b64:	strd	sl, [sp, #240]	; 0xf0
   15b68:	ldrd	sl, [sp, #80]	; 0x50
   15b6c:	lsr	lr, lr, #24
   15b70:	str	r2, [sp, #172]	; 0xac
   15b74:	adds	r8, r8, sl
   15b78:	mov	sl, r8
   15b7c:	ldr	r8, [sp, #196]	; 0xc4
   15b80:	adc	r9, r9, fp
   15b84:	mov	fp, r9
   15b88:	orr	lr, lr, r8, lsl #8
   15b8c:	ldrd	r8, [sp, #144]	; 0x90
   15b90:	ldrd	r2, [sp, #200]	; 0xc8
   15b94:	lsr	ip, r0, #24
   15b98:	eor	r8, r8, r6
   15b9c:	eor	r9, r9, r7
   15ba0:	mov	r7, r9
   15ba4:	mov	r6, r8
   15ba8:	ldrd	r8, [sp, #168]	; 0xa8
   15bac:	str	lr, [sp, #152]	; 0x98
   15bb0:	orr	lr, ip, r1, lsl #8
   15bb4:	adds	r2, r2, r8
   15bb8:	adc	r3, r3, r9
   15bbc:	eor	r4, r4, r2
   15bc0:	eor	r5, r5, r3
   15bc4:	add	ip, sp, #288	; 0x120
   15bc8:	str	lr, [sp, #128]	; 0x80
   15bcc:	strd	r2, [ip]
   15bd0:	strd	r4, [sp, #184]	; 0xb8
   15bd4:	ldrd	r4, [sp, #192]	; 0xc0
   15bd8:	ldrd	r8, [sp, #240]	; 0xf0
   15bdc:	lsr	r1, r1, #24
   15be0:	lsr	ip, r5, #24
   15be4:	orr	lr, ip, r4, lsl #8
   15be8:	str	lr, [sp, #156]	; 0x9c
   15bec:	ldrd	r4, [sp, #152]	; 0x98
   15bf0:	orr	lr, r1, r0, lsl #8
   15bf4:	str	lr, [sp, #132]	; 0x84
   15bf8:	adds	r8, r8, r4
   15bfc:	adc	r9, r9, r5
   15c00:	ldrd	r4, [sp, #128]	; 0x80
   15c04:	add	r3, sp, #264	; 0x108
   15c08:	ldrd	r0, [sp, #136]	; 0x88
   15c0c:	adds	r4, r4, sl
   15c10:	adc	r5, r5, fp
   15c14:	mov	sl, r4
   15c18:	mov	fp, r5
   15c1c:	ldrd	r4, [sp, #160]	; 0xa0
   15c20:	strd	r8, [r3]
   15c24:	add	r3, sp, #272	; 0x110
   15c28:	eor	r4, r4, r8
   15c2c:	eor	r5, r5, r9
   15c30:	ldrd	r2, [r3]
   15c34:	ldrd	r8, [sp, #72]	; 0x48
   15c38:	lsr	lr, r4, #16
   15c3c:	eor	r0, r0, sl
   15c40:	adds	r2, r2, r8
   15c44:	adc	r3, r3, r9
   15c48:	mov	r9, r3
   15c4c:	orr	lr, lr, r5, lsl #16
   15c50:	ldr	r3, [sp, #184]	; 0xb8
   15c54:	eor	r1, r1, fp
   15c58:	lsl	ip, r7, #1
   15c5c:	str	lr, [sp, #144]	; 0x90
   15c60:	lsr	lr, r5, #16
   15c64:	strd	sl, [sp, #240]	; 0xf0
   15c68:	orr	lr, lr, r4, lsl #16
   15c6c:	orr	fp, ip, r6, lsr #31
   15c70:	lsr	ip, r0, #16
   15c74:	str	lr, [sp, #148]	; 0x94
   15c78:	orr	lr, ip, r1, lsl #16
   15c7c:	lsr	ip, r3, #24
   15c80:	add	r3, sp, #256	; 0x100
   15c84:	lsl	r6, r6, #1
   15c88:	orr	sl, r6, r7, lsr #31
   15c8c:	ldrd	r4, [sp, #144]	; 0x90
   15c90:	ldrd	r6, [r3]
   15c94:	ldr	r3, [sp, #188]	; 0xbc
   15c98:	str	lr, [sp, #136]	; 0x88
   15c9c:	adds	r6, r6, r4
   15ca0:	orr	lr, ip, r3, lsl #8
   15ca4:	lsr	r1, r1, #16
   15ca8:	adc	r7, r7, r5
   15cac:	str	lr, [sp, #160]	; 0xa0
   15cb0:	orr	lr, r1, r0, lsl #16
   15cb4:	str	lr, [sp, #140]	; 0x8c
   15cb8:	ldrd	r0, [sp, #224]	; 0xe0
   15cbc:	strd	r6, [sp, #208]	; 0xd0
   15cc0:	ldrd	r6, [sp, #136]	; 0x88
   15cc4:	mov	r8, r2
   15cc8:	ldr	r2, [sp, #184]	; 0xb8
   15ccc:	adds	r0, r0, r6
   15cd0:	lsr	r3, r3, #24
   15cd4:	adc	r1, r1, r7
   15cd8:	orr	r3, r3, r2, lsl #8
   15cdc:	str	r3, [sp, #164]	; 0xa4
   15ce0:	strd	r0, [sp, #200]	; 0xc8
   15ce4:	ldrd	r0, [sp, #160]	; 0xa0
   15ce8:	ldrd	r2, [sp, #176]	; 0xb0
   15cec:	adds	r0, r0, r8
   15cf0:	adc	r1, r1, r9
   15cf4:	ldrd	r8, [sp, #248]	; 0xf8
   15cf8:	strd	r0, [sp, #192]	; 0xc0
   15cfc:	ldrd	r0, [sp, #48]	; 0x30
   15d00:	adds	r0, r0, r8
   15d04:	adc	r1, r1, r9
   15d08:	adds	r0, r0, sl
   15d0c:	adc	r1, r1, fp
   15d10:	eor	r2, r2, r0
   15d14:	eor	r3, r3, r1
   15d18:	mov	r4, r2
   15d1c:	mov	r2, r3
   15d20:	mov	r3, r4
   15d24:	ldrd	r4, [sp, #216]	; 0xd8
   15d28:	adds	r4, r4, r2
   15d2c:	adc	r5, r5, r3
   15d30:	mov	r6, r4
   15d34:	eor	r6, r6, sl
   15d38:	strd	r4, [sp, #176]	; 0xb0
   15d3c:	mov	r7, r5
   15d40:	ldrd	r4, [sp, #16]
   15d44:	eor	r7, r7, fp
   15d48:	lsr	ip, r6, #24
   15d4c:	orr	r8, ip, r7, lsl #8
   15d50:	adds	r4, r4, r0
   15d54:	lsr	ip, r7, #24
   15d58:	orr	r9, ip, r6, lsl #8
   15d5c:	adc	r5, r5, r1
   15d60:	adds	sl, r4, r8
   15d64:	adc	fp, r5, r9
   15d68:	mov	r6, sl
   15d6c:	ldrd	r4, [sp, #168]	; 0xa8
   15d70:	mov	r7, fp
   15d74:	ldrd	sl, [sp, #192]	; 0xc0
   15d78:	ldrd	r0, [sp, #208]	; 0xd0
   15d7c:	strd	r6, [sp, #248]	; 0xf8
   15d80:	eor	r4, r4, sl
   15d84:	eor	r5, r5, fp
   15d88:	mov	sl, r6
   15d8c:	mov	fp, r7
   15d90:	eor	sl, sl, r2
   15d94:	eor	fp, fp, r3
   15d98:	mov	r2, sl
   15d9c:	mov	r3, fp
   15da0:	ldrd	sl, [sp, #152]	; 0x98
   15da4:	lsr	lr, r4, #16
   15da8:	orr	lr, lr, r5, lsl #16
   15dac:	eor	fp, fp, r1
   15db0:	eor	sl, sl, r0
   15db4:	lsl	ip, fp, #1
   15db8:	orr	r7, ip, sl, lsr #31
   15dbc:	lsl	r0, sl, #1
   15dc0:	str	r7, [sp, #156]	; 0x9c
   15dc4:	orr	r7, r0, fp, lsr #31
   15dc8:	ldrd	r0, [sp, #240]	; 0xf0
   15dcc:	ldrd	sl, [sp, #24]
   15dd0:	str	r7, [sp, #152]	; 0x98
   15dd4:	ldrd	r6, [sp, #128]	; 0x80
   15dd8:	adds	sl, sl, r0
   15ddc:	adc	fp, fp, r1
   15de0:	ldrd	r0, [sp, #200]	; 0xc8
   15de4:	lsr	ip, r2, #16
   15de8:	str	lr, [sp, #168]	; 0xa8
   15dec:	eor	r6, r6, r0
   15df0:	eor	r7, r7, r1
   15df4:	ldrd	r0, [sp, #152]	; 0x98
   15df8:	adds	r0, r0, sl
   15dfc:	adc	r1, r1, fp
   15e00:	strd	r0, [sp, #216]	; 0xd8
   15e04:	orr	r0, ip, r3, lsl #16
   15e08:	lsr	ip, r5, #16
   15e0c:	orr	lr, ip, r4, lsl #16
   15e10:	add	ip, sp, #288	; 0x120
   15e14:	str	lr, [sp, #172]	; 0xac
   15e18:	ldrd	sl, [ip]
   15e1c:	ldrd	r4, [sp, #168]	; 0xa8
   15e20:	lsr	r3, r3, #16
   15e24:	orr	r1, r3, r2, lsl #16
   15e28:	ldrd	r2, [sp, #176]	; 0xb0
   15e2c:	adds	sl, sl, r4
   15e30:	adc	fp, fp, r5
   15e34:	adds	r2, r2, r0
   15e38:	ldrd	r4, [sp, #160]	; 0xa0
   15e3c:	adc	r3, r3, r1
   15e40:	strd	sl, [sp, #224]	; 0xe0
   15e44:	strd	r2, [sp, #240]	; 0xf0
   15e48:	eor	r2, r2, r8
   15e4c:	eor	r3, r3, r9
   15e50:	ldrd	r8, [sp, #216]	; 0xd8
   15e54:	eor	fp, fp, r5
   15e58:	eor	sl, sl, r4
   15e5c:	lsl	ip, r7, #1
   15e60:	orr	lr, ip, r6, lsr #31
   15e64:	eor	r9, r9, r1
   15e68:	lsl	ip, r6, #1
   15e6c:	lsl	r1, fp, #1
   15e70:	add	r6, sp, #264	; 0x108
   15e74:	eor	r8, r8, r0
   15e78:	orr	r1, r1, sl, lsr #31
   15e7c:	str	r9, [sp, #184]	; 0xb8
   15e80:	str	r8, [sp, #188]	; 0xbc
   15e84:	str	r1, [sp, #164]	; 0xa4
   15e88:	ldrd	r8, [r6]
   15e8c:	ldrd	r0, [sp, #112]	; 0x70
   15e90:	str	lr, [sp, #132]	; 0x84
   15e94:	orr	lr, ip, r7, lsr #31
   15e98:	adds	r0, r0, r8
   15e9c:	adc	r1, r1, r9
   15ea0:	mov	r6, r0
   15ea4:	mov	r7, r1
   15ea8:	str	lr, [sp, #128]	; 0x80
   15eac:	ldrd	r8, [sp, #120]	; 0x78
   15eb0:	ldrd	r0, [sp, #192]	; 0xc0
   15eb4:	lsl	lr, sl, #1
   15eb8:	lsl	ip, r3, #1
   15ebc:	adds	r8, r8, r0
   15ec0:	adc	r9, r9, r1
   15ec4:	orr	r1, lr, fp, lsr #31
   15ec8:	str	r1, [sp, #160]	; 0xa0
   15ecc:	orr	r1, ip, r2, lsr #31
   15ed0:	ldrd	sl, [sp, #248]	; 0xf8
   15ed4:	str	r1, [sp, #180]	; 0xb4
   15ed8:	ldrd	r0, [sp, #8]
   15edc:	lsl	r2, r2, #1
   15ee0:	orr	r3, r2, r3, lsr #31
   15ee4:	adds	r0, r0, sl
   15ee8:	adc	r1, r1, fp
   15eec:	str	r3, [sp, #176]	; 0xb0
   15ef0:	ldrd	sl, [sp, #224]	; 0xe0
   15ef4:	ldrd	r2, [sp, #184]	; 0xb8
   15ef8:	ldrd	r4, [sp, #160]	; 0xa0
   15efc:	adds	sl, sl, r2
   15f00:	adc	fp, fp, r3
   15f04:	mov	r2, sl
   15f08:	mov	r3, fp
   15f0c:	ldrd	sl, [sp, #128]	; 0x80
   15f10:	adds	r4, r4, r6
   15f14:	adc	r5, r5, r7
   15f18:	strd	r2, [sp, #224]	; 0xe0
   15f1c:	adds	sl, sl, r0
   15f20:	adc	fp, fp, r1
   15f24:	ldrd	r2, [sp, #152]	; 0x98
   15f28:	ldrd	r0, [sp, #224]	; 0xe0
   15f2c:	mov	r6, sl
   15f30:	mov	r7, fp
   15f34:	ldrd	sl, [sp, #176]	; 0xb0
   15f38:	eor	r2, r2, r0
   15f3c:	eor	r3, r3, r1
   15f40:	ldrd	r0, [sp, #136]	; 0x88
   15f44:	adds	sl, sl, r8
   15f48:	adc	fp, fp, r9
   15f4c:	ldrd	r8, [sp, #168]	; 0xa8
   15f50:	eor	r1, r1, r5
   15f54:	strd	r4, [sp, #248]	; 0xf8
   15f58:	mov	r5, r1
   15f5c:	add	r1, sp, #256	; 0x100
   15f60:	eor	r8, r8, r6
   15f64:	eor	r9, r9, r7
   15f68:	strd	r2, [sp, #152]	; 0x98
   15f6c:	eor	r0, r0, r4
   15f70:	strd	r6, [r1]
   15f74:	mov	r4, r0
   15f78:	mov	r1, r9
   15f7c:	mov	r0, r8
   15f80:	lsr	ip, r2, #24
   15f84:	ldrd	r8, [sp, #144]	; 0x90
   15f88:	ldrd	r2, [sp, #152]	; 0x98
   15f8c:	str	r1, [sp, #192]	; 0xc0
   15f90:	eor	r8, r8, sl
   15f94:	orr	lr, ip, r3, lsl #8
   15f98:	eor	r9, r9, fp
   15f9c:	str	lr, [sp, #136]	; 0x88
   15fa0:	str	r9, [sp, #168]	; 0xa8
   15fa4:	lsr	lr, r3, #24
   15fa8:	str	r8, [sp, #172]	; 0xac
   15fac:	str	r0, [sp, #196]	; 0xc4
   15fb0:	ldrd	r8, [sp, #216]	; 0xd8
   15fb4:	ldrd	r0, [sp, #88]	; 0x58
   15fb8:	ldr	r3, [sp, #152]	; 0x98
   15fbc:	str	r5, [sp, #144]	; 0x90
   15fc0:	adds	r0, r0, r8
   15fc4:	orr	r3, lr, r3, lsl #8
   15fc8:	adc	r1, r1, r9
   15fcc:	str	r4, [sp, #148]	; 0x94
   15fd0:	str	r3, [sp, #140]	; 0x8c
   15fd4:	ldrd	r2, [sp, #240]	; 0xf0
   15fd8:	ldrd	r8, [sp, #144]	; 0x90
   15fdc:	mov	r6, r0
   15fe0:	mov	r7, r1
   15fe4:	adds	r2, r2, r8
   15fe8:	adc	r3, r3, r9
   15fec:	ldrd	r0, [sp, #168]	; 0xa8
   15ff0:	ldrd	r8, [sp, #200]	; 0xc8
   15ff4:	strd	r2, [sp, #240]	; 0xf0
   15ff8:	adds	r8, r8, r0
   15ffc:	adc	r9, r9, r1
   16000:	ldrd	r0, [sp, #192]	; 0xc0
   16004:	strd	r8, [sp, #200]	; 0xc8
   16008:	ldrd	r8, [sp, #208]	; 0xd0
   1600c:	adds	r8, r8, r0
   16010:	adc	r9, r9, r1
   16014:	ldrd	r0, [sp, #136]	; 0x88
   16018:	adds	r6, r6, r0
   1601c:	adc	r7, r7, r1
   16020:	ldrd	r0, [sp, #160]	; 0xa0
   16024:	mov	r4, r6
   16028:	mov	r5, r7
   1602c:	eor	r0, r0, r2
   16030:	eor	r1, r1, r3
   16034:	mov	r6, r0
   16038:	ldrd	r2, [sp, #200]	; 0xc8
   1603c:	mov	r7, r1
   16040:	ldrd	r0, [sp, #176]	; 0xb0
   16044:	strd	r4, [sp, #208]	; 0xd0
   16048:	lsr	lr, r6, #24
   1604c:	eor	r0, r0, r2
   16050:	eor	r1, r1, r3
   16054:	mov	r2, r0
   16058:	mov	r3, r1
   1605c:	ldrd	r0, [sp, #128]	; 0x80
   16060:	strd	r2, [sp, #152]	; 0x98
   16064:	add	r3, sp, #264	; 0x108
   16068:	eor	r0, r0, r8
   1606c:	strd	r8, [r3]
   16070:	eor	r1, r1, r9
   16074:	ldrd	r8, [sp, #184]	; 0xb8
   16078:	eor	r8, r8, r4
   1607c:	eor	r9, r9, r5
   16080:	mov	r2, r8
   16084:	ldrd	r4, [sp, #248]	; 0xf8
   16088:	mov	r3, r9
   1608c:	lsr	ip, r8, #16
   16090:	ldrd	r8, [sp, #32]
   16094:	adds	r8, r8, r4
   16098:	adc	r9, r9, r5
   1609c:	add	r4, sp, #256	; 0x100
   160a0:	strd	r8, [sp, #248]	; 0xf8
   160a4:	ldrd	r4, [r4]
   160a8:	ldrd	r8, [sp, #56]	; 0x38
   160ac:	adds	r8, r8, r4
   160b0:	adc	r9, r9, r5
   160b4:	add	r4, sp, #256	; 0x100
   160b8:	orr	r5, ip, r3, lsl #16
   160bc:	strd	r8, [r4]
   160c0:	ldrd	r8, [sp, #96]	; 0x60
   160c4:	lsr	r3, r3, #16
   160c8:	orr	r3, r3, r2, lsl #16
   160cc:	adds	r8, r8, sl
   160d0:	adc	r9, r9, fp
   160d4:	str	r3, [sp, #132]	; 0x84
   160d8:	str	r5, [sp, #128]	; 0x80
   160dc:	orr	r3, lr, r7, lsl #8
   160e0:	ldrd	r4, [sp, #128]	; 0x80
   160e4:	mov	sl, r8
   160e8:	mov	fp, r9
   160ec:	ldrd	r8, [sp, #152]	; 0x98
   160f0:	str	r3, [sp, #152]	; 0x98
   160f4:	ldrd	r2, [sp, #224]	; 0xe0
   160f8:	lsr	ip, r8, #24
   160fc:	lsr	lr, r0, #24
   16100:	adds	r2, r2, r4
   16104:	adc	r3, r3, r5
   16108:	ldrd	r4, [sp, #136]	; 0x88
   1610c:	strd	r2, [sp, #216]	; 0xd8
   16110:	orr	lr, lr, r1, lsl #8
   16114:	eor	r5, r5, r3
   16118:	mov	r3, r5
   1611c:	eor	r4, r4, r2
   16120:	orr	r5, ip, r9, lsl #8
   16124:	lsl	ip, r3, #1
   16128:	str	r5, [sp, #160]	; 0xa0
   1612c:	str	lr, [sp, #176]	; 0xb0
   16130:	orr	lr, ip, r4, lsr #31
   16134:	lsr	ip, r7, #24
   16138:	str	lr, [sp, #188]	; 0xbc
   1613c:	orr	lr, ip, r6, lsl #8
   16140:	str	lr, [sp, #156]	; 0x9c
   16144:	ldrd	r6, [sp, #248]	; 0xf8
   16148:	mov	r2, r4
   1614c:	ldrd	r4, [sp, #152]	; 0x98
   16150:	lsr	ip, r9, #24
   16154:	orr	lr, ip, r8, lsl #8
   16158:	adds	r6, r6, r4
   1615c:	adc	r7, r7, r5
   16160:	ldrd	r4, [sp, #144]	; 0x90
   16164:	str	lr, [sp, #164]	; 0xa4
   16168:	strd	r6, [sp, #144]	; 0x90
   1616c:	eor	r6, r6, r4
   16170:	eor	r7, r7, r5
   16174:	ldrd	r4, [sp, #160]	; 0xa0
   16178:	lsr	r1, r1, #24
   1617c:	orr	lr, r1, r0, lsl #8
   16180:	adds	r4, r4, sl
   16184:	add	r1, sp, #256	; 0x100
   16188:	adc	r5, r5, fp
   1618c:	str	lr, [sp, #180]	; 0xb4
   16190:	mov	sl, r4
   16194:	mov	fp, r5
   16198:	ldrd	r0, [r1]
   1619c:	ldrd	r4, [sp, #176]	; 0xb0
   161a0:	lsl	r2, r2, #1
   161a4:	lsr	lr, r6, #16
   161a8:	adds	r0, r0, r4
   161ac:	adc	r1, r1, r5
   161b0:	ldrd	r4, [sp, #168]	; 0xa8
   161b4:	orr	r3, r2, r3, lsr #31
   161b8:	str	r3, [sp, #184]	; 0xb8
   161bc:	eor	r4, r4, sl
   161c0:	orr	r3, lr, r7, lsl #16
   161c4:	eor	r5, r5, fp
   161c8:	str	r3, [sp, #136]	; 0x88
   161cc:	lsr	r3, r7, #16
   161d0:	lsr	ip, r4, #16
   161d4:	orr	r3, r3, r6, lsl #16
   161d8:	orr	r2, ip, r5, lsl #16
   161dc:	str	r3, [sp, #140]	; 0x8c
   161e0:	lsr	ip, r5, #16
   161e4:	orr	r3, ip, r4, lsl #16
   161e8:	ldrd	r6, [sp, #136]	; 0x88
   161ec:	ldrd	r4, [sp, #240]	; 0xf0
   161f0:	ldrd	r8, [sp, #192]	; 0xc0
   161f4:	strd	r0, [sp, #224]	; 0xe0
   161f8:	adds	r4, r4, r6
   161fc:	eor	r8, r8, r0
   16200:	adc	r5, r5, r7
   16204:	ldrd	r6, [sp, #200]	; 0xc8
   16208:	eor	r9, r9, r1
   1620c:	lsr	lr, r8, #16
   16210:	adds	r6, r6, r2
   16214:	orr	lr, lr, r9, lsl #16
   16218:	lsr	r1, r9, #16
   1621c:	adc	r7, r7, r3
   16220:	str	lr, [sp, #168]	; 0xa8
   16224:	orr	lr, r1, r8, lsl #16
   16228:	add	r1, sp, #264	; 0x108
   1622c:	str	lr, [sp, #172]	; 0xac
   16230:	ldrd	r0, [r1]
   16234:	strd	r6, [sp, #200]	; 0xc8
   16238:	ldrd	r6, [sp, #168]	; 0xa8
   1623c:	ldrd	r8, [sp, #208]	; 0xd0
   16240:	add	ip, sp, #256	; 0x100
   16244:	adds	r0, r0, r6
   16248:	adc	r1, r1, r7
   1624c:	ldrd	r6, [sp, #80]	; 0x50
   16250:	strd	r4, [sp, #192]	; 0xc0
   16254:	ldrd	r4, [sp, #144]	; 0x90
   16258:	adds	r6, r6, r8
   1625c:	adc	r7, r7, r9
   16260:	strd	r6, [ip]
   16264:	ldrd	r6, [sp, #8]
   16268:	adds	r4, r4, r6
   1626c:	adc	r5, r5, r7
   16270:	ldrd	r6, [sp, #184]	; 0xb8
   16274:	mov	r8, r4
   16278:	mov	r9, r5
   1627c:	adds	r4, r6, r8
   16280:	adc	r5, r7, r9
   16284:	mov	r8, r4
   16288:	mov	r9, r5
   1628c:	strd	r8, [sp, #208]	; 0xd0
   16290:	eor	r8, r8, r2
   16294:	eor	r9, r9, r3
   16298:	mov	r4, r8
   1629c:	ldrd	r2, [sp, #200]	; 0xc8
   162a0:	mov	r5, r9
   162a4:	ldrd	r8, [sp, #160]	; 0xa0
   162a8:	str	r5, [sp, #160]	; 0xa0
   162ac:	str	r4, [sp, #164]	; 0xa4
   162b0:	eor	r8, r8, r2
   162b4:	eor	r9, r9, r3
   162b8:	ldrd	r4, [sp, #192]	; 0xc0
   162bc:	mov	r2, r8
   162c0:	mov	r3, r9
   162c4:	ldrd	r8, [sp, #152]	; 0x98
   162c8:	lsl	ip, r3, #1
   162cc:	orr	lr, ip, r2, lsr #31
   162d0:	eor	r8, r8, r4
   162d4:	eor	r9, r9, r5
   162d8:	ldrd	r4, [sp, #176]	; 0xb0
   162dc:	lsl	r2, r2, #1
   162e0:	orr	r3, r2, r3, lsr #31
   162e4:	eor	r4, r4, r0
   162e8:	eor	r5, r5, r1
   162ec:	str	lr, [sp, #156]	; 0x9c
   162f0:	strd	r4, [sp, #176]	; 0xb0
   162f4:	ldrd	r4, [sp, #160]	; 0xa0
   162f8:	str	r3, [sp, #152]	; 0x98
   162fc:	lsl	r3, r9, #1
   16300:	adds	r4, r4, r0
   16304:	adc	r5, r5, r1
   16308:	mov	r0, r4
   1630c:	mov	r1, r5
   16310:	eor	r6, r6, r4
   16314:	eor	r7, r7, r5
   16318:	strd	r0, [sp, #240]	; 0xf0
   1631c:	ldrd	r4, [sp, #224]	; 0xe0
   16320:	mov	r0, r6
   16324:	mov	r1, r7
   16328:	ldrd	r6, [sp, #24]
   1632c:	orr	r3, r3, r8, lsr #31
   16330:	str	r3, [sp, #148]	; 0x94
   16334:	adds	r6, r6, r4
   16338:	adc	r7, r7, r5
   1633c:	mov	r4, r6
   16340:	mov	r5, r7
   16344:	ldrd	r6, [sp, #152]	; 0x98
   16348:	ldrd	r2, [sp, #96]	; 0x60
   1634c:	lsl	ip, r8, #1
   16350:	adds	r6, r6, r4
   16354:	adc	r7, r7, r5
   16358:	adds	r2, r2, sl
   1635c:	adc	r3, r3, fp
   16360:	mov	sl, r2
   16364:	mov	fp, r3
   16368:	ldrd	r2, [sp, #128]	; 0x80
   1636c:	mov	r4, r6
   16370:	mov	r5, r7
   16374:	ldrd	r6, [sp, #176]	; 0xb0
   16378:	eor	r2, r2, r4
   1637c:	eor	r3, r3, r5
   16380:	lsl	lr, r7, #1
   16384:	strd	r2, [sp, #184]	; 0xb8
   16388:	orr	r3, ip, r9, lsr #31
   1638c:	str	r3, [sp, #144]	; 0x90
   16390:	ldrd	r8, [sp, #120]	; 0x78
   16394:	orr	r3, lr, r6, lsr #31
   16398:	strd	r4, [sp, #248]	; 0xf8
   1639c:	lsl	lr, r6, #1
   163a0:	mov	r5, r7
   163a4:	ldrd	r6, [sp, #208]	; 0xd0
   163a8:	lsr	ip, r0, #24
   163ac:	str	r3, [sp, #132]	; 0x84
   163b0:	adds	r8, r8, r6
   163b4:	adc	r9, r9, r7
   163b8:	mov	r6, r8
   163bc:	mov	r7, r9
   163c0:	ldrd	r8, [sp, #144]	; 0x90
   163c4:	orr	r3, lr, r5, lsr #31
   163c8:	str	r3, [sp, #128]	; 0x80
   163cc:	orr	r3, ip, r1, lsl #8
   163d0:	lsr	r1, r1, #24
   163d4:	adds	r8, r8, sl
   163d8:	str	r3, [sp, #176]	; 0xb0
   163dc:	orr	r3, r1, r0, lsl #8
   163e0:	mov	sl, r8
   163e4:	str	r3, [sp, #180]	; 0xb4
   163e8:	ldr	r8, [sp, #188]	; 0xbc
   163ec:	ldrd	r4, [sp, #168]	; 0xa8
   163f0:	adc	r9, r9, fp
   163f4:	add	r3, sp, #256	; 0x100
   163f8:	eor	r4, r4, sl
   163fc:	eor	r5, r5, r9
   16400:	mov	r0, r4
   16404:	mov	r1, r5
   16408:	ldrd	r4, [r3]
   1640c:	ldrd	r2, [sp, #128]	; 0x80
   16410:	mov	fp, r9
   16414:	ldr	r9, [sp, #184]	; 0xb8
   16418:	adds	r4, r4, r2
   1641c:	adc	r5, r5, r3
   16420:	ldrd	r2, [sp, #176]	; 0xb0
   16424:	strd	sl, [sp, #224]	; 0xe0
   16428:	strd	r4, [sp, #184]	; 0xb8
   1642c:	adds	r2, r2, r6
   16430:	adc	r3, r3, r7
   16434:	ldrd	r6, [sp, #136]	; 0x88
   16438:	mov	sl, r2
   1643c:	mov	fp, r3
   16440:	eor	r6, r6, r4
   16444:	eor	r7, r7, r5
   16448:	mov	r2, r6
   1644c:	ldrd	r4, [sp, #160]	; 0xa0
   16450:	mov	r3, r7
   16454:	str	r1, [sp, #160]	; 0xa0
   16458:	ldrd	r6, [sp, #192]	; 0xc0
   1645c:	str	r0, [sp, #164]	; 0xa4
   16460:	str	r3, [sp, #136]	; 0x88
   16464:	str	r2, [sp, #140]	; 0x8c
   16468:	ldrd	r0, [sp, #216]	; 0xd8
   1646c:	ldrd	r2, [sp, #160]	; 0xa0
   16470:	adds	r6, r6, r8
   16474:	eor	r4, r4, sl
   16478:	adc	r7, r7, r9
   1647c:	eor	r5, r5, fp
   16480:	adds	r0, r0, r2
   16484:	adc	r1, r1, r3
   16488:	lsr	lr, r4, #16
   1648c:	orr	r3, lr, r5, lsl #16
   16490:	strd	r0, [sp, #192]	; 0xc0
   16494:	strd	sl, [sp, #208]	; 0xd0
   16498:	ldrd	r0, [sp, #136]	; 0x88
   1649c:	ldrd	sl, [sp, #152]	; 0x98
   164a0:	str	r3, [sp, #152]	; 0x98
   164a4:	ldrd	r2, [sp, #200]	; 0xc8
   164a8:	add	ip, sp, #256	; 0x100
   164ac:	eor	sl, sl, r6
   164b0:	adds	r2, r2, r0
   164b4:	adc	r3, r3, r1
   164b8:	eor	fp, fp, r7
   164bc:	strd	r6, [ip]
   164c0:	ldrd	r0, [sp, #144]	; 0x90
   164c4:	mov	r6, sl
   164c8:	mov	r7, fp
   164cc:	mov	sl, r2
   164d0:	mov	fp, r3
   164d4:	ldrd	r2, [sp, #192]	; 0xc0
   164d8:	lsr	lr, r5, #16
   164dc:	orr	lr, lr, r4, lsl #16
   164e0:	eor	r0, r0, r2
   164e4:	eor	r1, r1, r3
   164e8:	mov	r2, r0
   164ec:	mov	r3, r1
   164f0:	ldrd	r0, [sp, #128]	; 0x80
   164f4:	ldrd	r4, [sp, #248]	; 0xf8
   164f8:	strd	sl, [sp, #200]	; 0xc8
   164fc:	eor	r0, r0, sl
   16500:	eor	r1, r1, fp
   16504:	str	lr, [sp, #156]	; 0x9c
   16508:	strd	r0, [sp, #128]	; 0x80
   1650c:	ldrd	r0, [sp, #64]	; 0x40
   16510:	lsr	ip, r6, #24
   16514:	orr	lr, ip, r7, lsl #8
   16518:	adds	r0, r0, r4
   1651c:	adc	r1, r1, r5
   16520:	lsr	ip, r7, #24
   16524:	strd	r0, [sp, #144]	; 0x90
   16528:	ldrd	r0, [sp, #240]	; 0xf0
   1652c:	ldrd	r4, [sp, #152]	; 0x98
   16530:	str	lr, [sp, #168]	; 0xa8
   16534:	orr	lr, ip, r6, lsl #8
   16538:	adds	r0, r0, r4
   1653c:	adc	r1, r1, r5
   16540:	ldrd	r4, [sp, #176]	; 0xb0
   16544:	str	lr, [sp, #172]	; 0xac
   16548:	strd	r0, [sp, #216]	; 0xd8
   1654c:	eor	r4, r4, r0
   16550:	eor	r5, r5, r1
   16554:	mov	sl, r4
   16558:	ldrd	r0, [sp, #168]	; 0xa8
   1655c:	mov	fp, r5
   16560:	ldrd	r4, [sp, #144]	; 0x90
   16564:	ldrd	r6, [sp, #224]	; 0xe0
   16568:	lsr	ip, r2, #24
   1656c:	adds	r4, r4, r0
   16570:	adc	r5, r5, r1
   16574:	mov	r0, r4
   16578:	mov	r1, r5
   1657c:	ldrd	r4, [sp, #88]	; 0x58
   16580:	strd	r0, [sp, #240]	; 0xf0
   16584:	orr	lr, ip, r3, lsl #8
   16588:	adds	r4, r4, r6
   1658c:	adc	r5, r5, r7
   16590:	lsl	ip, fp, #1
   16594:	strd	r4, [sp, #176]	; 0xb0
   16598:	mov	r4, r0
   1659c:	mov	r5, r1
   165a0:	eor	r4, r4, r8
   165a4:	ldrd	r0, [sp, #184]	; 0xb8
   165a8:	eor	r5, r5, r9
   165ac:	ldrd	r8, [sp, #32]
   165b0:	lsr	r3, r3, #24
   165b4:	mov	r7, r5
   165b8:	adds	r8, r8, r0
   165bc:	adc	r9, r9, r1
   165c0:	ldrd	r0, [sp, #128]	; 0x80
   165c4:	orr	r5, ip, sl, lsr #31
   165c8:	str	lr, [sp, #144]	; 0x90
   165cc:	lsr	ip, r0, #24
   165d0:	lsl	lr, sl, #1
   165d4:	orr	r3, r3, r2, lsl #8
   165d8:	mov	sl, r0
   165dc:	mov	r6, r4
   165e0:	str	r3, [sp, #148]	; 0x94
   165e4:	orr	r4, lr, fp, lsr #31
   165e8:	orr	lr, ip, r1, lsl #8
   165ec:	lsr	r1, r1, #24
   165f0:	ldrd	r2, [sp, #144]	; 0x90
   165f4:	str	lr, [sp, #128]	; 0x80
   165f8:	orr	lr, r1, sl, lsl #8
   165fc:	ldrd	sl, [sp, #176]	; 0xb0
   16600:	str	lr, [sp, #132]	; 0x84
   16604:	lsr	r1, r6, #16
   16608:	adds	sl, sl, r2
   1660c:	adc	fp, fp, r3
   16610:	ldrd	r2, [sp, #128]	; 0x80
   16614:	strd	sl, [sp, #224]	; 0xe0
   16618:	orr	lr, r1, r7, lsl #16
   1661c:	adds	r2, r2, r8
   16620:	adc	r3, r3, r9
   16624:	lsr	r1, r7, #16
   16628:	strd	r2, [sp, #184]	; 0xb8
   1662c:	ldrd	r2, [sp, #160]	; 0xa0
   16630:	ldrd	r8, [sp, #184]	; 0xb8
   16634:	str	lr, [sp, #176]	; 0xb0
   16638:	eor	r2, r2, sl
   1663c:	eor	r3, r3, fp
   16640:	ldrd	sl, [sp]
   16644:	orr	lr, r1, r6, lsl #16
   16648:	str	lr, [sp, #180]	; 0xb4
   1664c:	adds	r8, r8, sl
   16650:	ldrd	r6, [sp, #176]	; 0xb0
   16654:	adc	r9, r9, fp
   16658:	lsr	r1, r2, #16
   1665c:	adds	r8, r8, r4
   16660:	adc	r9, r9, r5
   16664:	orr	lr, r1, r3, lsl #16
   16668:	lsr	r3, r3, #16
   1666c:	mov	r0, r8
   16670:	mov	r1, r9
   16674:	orr	r3, r3, r2, lsl #16
   16678:	eor	r0, r0, r6
   1667c:	eor	r1, r1, r7
   16680:	str	lr, [sp, #160]	; 0xa0
   16684:	strd	r8, [sp, #248]	; 0xf8
   16688:	str	r3, [sp, #164]	; 0xa4
   1668c:	ldrd	r6, [sp, #160]	; 0xa0
   16690:	ldrd	r2, [sp, #192]	; 0xc0
   16694:	ldrd	r8, [sp, #184]	; 0xb8
   16698:	adds	r2, r2, r6
   1669c:	adc	r3, r3, r7
   166a0:	mov	r6, r1
   166a4:	mov	r7, r0
   166a8:	ldrd	r0, [sp, #136]	; 0x88
   166ac:	eor	r8, r8, r0
   166b0:	eor	r9, r9, r1
   166b4:	mov	r0, r8
   166b8:	mov	r1, r9
   166bc:	ldrd	r8, [sp, #144]	; 0x90
   166c0:	lsr	lr, r1, #16
   166c4:	eor	r8, r8, r2
   166c8:	eor	r9, r9, r3
   166cc:	strd	r8, [sp, #184]	; 0xb8
   166d0:	adds	r8, r2, r6
   166d4:	adc	r9, r3, r7
   166d8:	mov	r2, r8
   166dc:	mov	r3, r9
   166e0:	ldrd	r8, [sp, #248]	; 0xf8
   166e4:	strd	r2, [sp, #192]	; 0xc0
   166e8:	eor	r3, r3, r5
   166ec:	mov	r5, r3
   166f0:	lsr	r3, r0, #16
   166f4:	orr	r3, r3, r1, lsl #16
   166f8:	eor	r2, r2, r4
   166fc:	str	r3, [sp, #136]	; 0x88
   16700:	mov	r4, r2
   16704:	ldrd	r2, [sp, #112]	; 0x70
   16708:	lsr	ip, r5, #24
   1670c:	add	r1, sp, #256	; 0x100
   16710:	adds	r8, r8, r2
   16714:	adc	r9, r9, r3
   16718:	orr	r3, lr, r0, lsl #16
   1671c:	str	r3, [sp, #140]	; 0x8c
   16720:	mov	sl, r8
   16724:	ldrd	r2, [sp, #208]	; 0xd0
   16728:	mov	fp, r9
   1672c:	ldrd	r8, [sp, #40]	; 0x28
   16730:	lsr	lr, r4, #24
   16734:	orr	lr, lr, r5, lsl #8
   16738:	adds	r8, r8, r2
   1673c:	adc	r9, r9, r3
   16740:	add	r3, sp, #264	; 0x108
   16744:	str	lr, [sp, #144]	; 0x90
   16748:	strd	r8, [r3]
   1674c:	ldrd	r8, [sp, #136]	; 0x88
   16750:	ldrd	r2, [sp, #200]	; 0xc8
   16754:	orr	lr, ip, r4, lsl #8
   16758:	str	lr, [sp, #148]	; 0x94
   1675c:	adds	r2, r2, r8
   16760:	adc	r3, r3, r9
   16764:	ldrd	r8, [sp, #128]	; 0x80
   16768:	ldrd	r4, [sp, #144]	; 0x90
   1676c:	strd	r2, [sp, #208]	; 0xd0
   16770:	eor	r8, r8, r2
   16774:	eor	r9, r9, r3
   16778:	mov	r3, r9
   1677c:	adds	r4, r4, sl
   16780:	mov	r2, r8
   16784:	ldrd	r8, [sp, #184]	; 0xb8
   16788:	adc	r5, r5, fp
   1678c:	mov	sl, r4
   16790:	mov	fp, r5
   16794:	lsl	ip, r9, #1
   16798:	strd	sl, [sp, #248]	; 0xf8
   1679c:	eor	fp, fp, r7
   167a0:	orr	r7, ip, r8, lsr #31
   167a4:	ldrd	r8, [r1]
   167a8:	ldrd	r0, [sp, #176]	; 0xb0
   167ac:	eor	sl, sl, r6
   167b0:	mov	r5, fp
   167b4:	adds	r8, r8, r0
   167b8:	adc	r9, r9, r1
   167bc:	add	r1, sp, #264	; 0x108
   167c0:	strd	r8, [sp, #128]	; 0x80
   167c4:	ldrd	r8, [sp, #184]	; 0xb8
   167c8:	lsl	ip, r3, #1
   167cc:	orr	fp, ip, r2, lsr #31
   167d0:	lsl	r0, r8, #1
   167d4:	orr	r6, r0, r9, lsr #31
   167d8:	ldrd	r0, [r1]
   167dc:	ldrd	r8, [sp, #136]	; 0x88
   167e0:	lsr	ip, sl, #16
   167e4:	lsl	r2, r2, #1
   167e8:	adds	r0, r0, r6
   167ec:	mov	r4, sl
   167f0:	orr	sl, r2, r3, lsr #31
   167f4:	orr	r3, ip, r5, lsl #16
   167f8:	adc	r1, r1, r7
   167fc:	str	r3, [sp, #136]	; 0x88
   16800:	lsr	r3, r5, #16
   16804:	eor	r8, r8, r0
   16808:	eor	r9, r9, r1
   1680c:	orr	r3, r3, r4, lsl #16
   16810:	strd	r0, [sp, #184]	; 0xb8
   16814:	str	r9, [sp, #176]	; 0xb0
   16818:	str	r8, [sp, #180]	; 0xb4
   1681c:	str	r3, [sp, #140]	; 0x8c
   16820:	ldrd	r8, [sp, #136]	; 0x88
   16824:	ldrd	r2, [sp, #192]	; 0xc0
   16828:	ldrd	r4, [sp, #240]	; 0xf0
   1682c:	adds	r2, r2, r8
   16830:	adc	r3, r3, r9
   16834:	ldrd	r8, [sp, #128]	; 0x80
   16838:	strd	r2, [sp, #192]	; 0xc0
   1683c:	ldrd	r2, [sp, #176]	; 0xb0
   16840:	adds	r0, r8, r2
   16844:	adc	r1, r9, r3
   16848:	mov	r2, r0
   1684c:	mov	r3, r1
   16850:	ldrd	r0, [sp, #168]	; 0xa8
   16854:	strd	r2, [sp, #200]	; 0xc8
   16858:	ldrd	r2, [sp, #48]	; 0x30
   1685c:	eor	r9, r9, r1
   16860:	eor	r8, r8, r0
   16864:	adds	r2, r2, r4
   16868:	lsl	ip, r9, #1
   1686c:	orr	lr, ip, r8, lsr #31
   16870:	adc	r3, r3, r5
   16874:	lsl	r0, r8, #1
   16878:	ldrd	r4, [sp, #160]	; 0xa0
   1687c:	adds	r2, r2, sl
   16880:	str	lr, [sp, #132]	; 0x84
   16884:	orr	lr, r0, r9, lsr #31
   16888:	ldrd	r0, [sp, #216]	; 0xd8
   1688c:	adc	r3, r3, fp
   16890:	eor	r5, r5, r3
   16894:	adds	r0, r0, r5
   16898:	eor	r4, r4, r2
   1689c:	adc	r1, r1, r4
   168a0:	mov	r8, r5
   168a4:	mov	r9, r4
   168a8:	strd	r0, [sp, #216]	; 0xd8
   168ac:	ldrd	r4, [sp, #224]	; 0xe0
   168b0:	eor	r0, r0, sl
   168b4:	eor	r1, r1, fp
   168b8:	ldrd	sl, [sp, #56]	; 0x38
   168bc:	str	lr, [sp, #128]	; 0x80
   168c0:	lsr	ip, r0, #24
   168c4:	adds	sl, sl, r4
   168c8:	adc	fp, fp, r5
   168cc:	ldrd	r4, [sp, #128]	; 0x80
   168d0:	adds	r4, r4, sl
   168d4:	adc	r5, r5, fp
   168d8:	mov	sl, r4
   168dc:	mov	fp, r5
   168e0:	ldrd	r4, [sp, #152]	; 0x98
   168e4:	strd	sl, [sp, #152]	; 0x98
   168e8:	eor	r4, r4, sl
   168ec:	eor	r5, r5, fp
   168f0:	ldrd	sl, [sp, #72]	; 0x48
   168f4:	str	r4, [sp, #164]	; 0xa4
   168f8:	str	r5, [sp, #160]	; 0xa0
   168fc:	adds	sl, sl, r2
   16900:	adc	fp, fp, r3
   16904:	mov	r2, sl
   16908:	orr	sl, ip, r1, lsl #8
   1690c:	lsr	r1, r1, #24
   16910:	adds	r4, r2, sl
   16914:	mov	r3, fp
   16918:	orr	fp, r1, r0, lsl #8
   1691c:	adc	r5, r3, fp
   16920:	mov	r0, r4
   16924:	mov	r1, r5
   16928:	ldrd	r4, [sp, #200]	; 0xc8
   1692c:	ldrd	r2, [sp, #160]	; 0xa0
   16930:	eor	r4, r4, r6
   16934:	eor	r5, r5, r7
   16938:	mov	r6, r4
   1693c:	mov	r7, r5
   16940:	ldrd	r4, [sp, #208]	; 0xd0
   16944:	adds	r4, r4, r2
   16948:	adc	r5, r5, r3
   1694c:	add	r3, sp, #256	; 0x100
   16950:	mov	r2, r0
   16954:	strd	r0, [r3]
   16958:	mov	r3, r1
   1695c:	eor	r2, r2, r8
   16960:	ldrd	r0, [sp, #128]	; 0x80
   16964:	eor	r3, r3, r9
   16968:	mov	r8, r2
   1696c:	mov	r9, r3
   16970:	eor	r0, r0, r4
   16974:	eor	r1, r1, r5
   16978:	strd	r4, [sp, #224]	; 0xe0
   1697c:	strd	r8, [sp, #128]	; 0x80
   16980:	ldrd	r4, [sp, #16]
   16984:	ldrd	r8, [sp, #184]	; 0xb8
   16988:	lsr	r3, r6, #24
   1698c:	orr	r3, r3, r7, lsl #8
   16990:	adds	r4, r4, r8
   16994:	adc	r5, r5, r9
   16998:	lsr	ip, r2, #16
   1699c:	strd	r4, [sp, #168]	; 0xa8
   169a0:	ldrd	r8, [sp, #152]	; 0x98
   169a4:	ldrd	r4, [sp, #104]	; 0x68
   169a8:	ldr	lr, [sp, #132]	; 0x84
   169ac:	str	r3, [sp, #152]	; 0x98
   169b0:	adds	r4, r4, r8
   169b4:	ldrd	r2, [sp, #192]	; 0xc0
   169b8:	adc	r5, r5, r9
   169bc:	ldrd	r8, [sp, #144]	; 0x90
   169c0:	orr	lr, ip, lr, lsl #16
   169c4:	lsr	ip, r7, #24
   169c8:	str	lr, [sp, #184]	; 0xb8
   169cc:	orr	lr, ip, r6, lsl #8
   169d0:	str	lr, [sp, #156]	; 0x9c
   169d4:	eor	r8, r8, r2
   169d8:	eor	r9, r9, r3
   169dc:	ldrd	r6, [sp, #168]	; 0xa8
   169e0:	mov	r2, r8
   169e4:	mov	r3, r9
   169e8:	ldrd	r8, [sp, #152]	; 0x98
   169ec:	lsr	ip, r0, #24
   169f0:	orr	lr, ip, r1, lsl #8
   169f4:	adds	r6, r6, r8
   169f8:	adc	r7, r7, r9
   169fc:	mov	r8, r6
   16a00:	mov	r9, r7
   16a04:	ldrd	r6, [sp, #176]	; 0xb0
   16a08:	strd	r8, [sp, #208]	; 0xd0
   16a0c:	str	lr, [sp, #168]	; 0xa8
   16a10:	eor	r8, r8, r6
   16a14:	eor	r9, r9, r7
   16a18:	mov	r6, r8
   16a1c:	mov	r7, r9
   16a20:	lsr	r1, r1, #24
   16a24:	strd	r6, [sp, #144]	; 0x90
   16a28:	ldrd	r6, [sp, #128]	; 0x80
   16a2c:	lsr	ip, r7, #16
   16a30:	orr	lr, ip, r6, lsl #16
   16a34:	str	lr, [sp, #188]	; 0xbc
   16a38:	ldrd	r8, [sp, #184]	; 0xb8
   16a3c:	ldrd	r6, [sp, #216]	; 0xd8
   16a40:	add	ip, sp, #264	; 0x108
   16a44:	orr	lr, r1, r0, lsl #8
   16a48:	adds	r6, r6, r8
   16a4c:	adc	r7, r7, r9
   16a50:	str	lr, [sp, #172]	; 0xac
   16a54:	strd	r6, [ip]
   16a58:	eor	r6, r6, sl
   16a5c:	eor	r7, r7, fp
   16a60:	mov	sl, r6
   16a64:	mov	fp, r7
   16a68:	ldrd	r6, [sp, #168]	; 0xa8
   16a6c:	lsl	lr, r3, #1
   16a70:	orr	lr, lr, r2, lsr #31
   16a74:	adds	r0, r4, r6
   16a78:	adc	r1, r5, r7
   16a7c:	ldrd	r6, [sp, #160]	; 0xa0
   16a80:	lsl	r2, r2, #1
   16a84:	ldrd	r8, [sp, #248]	; 0xf8
   16a88:	eor	r6, r6, r0
   16a8c:	eor	r7, r7, r1
   16a90:	orr	r3, r2, r3, lsr #31
   16a94:	strd	r6, [sp, #176]	; 0xb0
   16a98:	ldrd	r6, [sp, #144]	; 0x90
   16a9c:	strd	r0, [sp, #240]	; 0xf0
   16aa0:	ldrd	r0, [sp, #208]	; 0xd0
   16aa4:	lsr	ip, r6, #16
   16aa8:	orr	r4, ip, r7, lsl #16
   16aac:	lsr	r2, r7, #16
   16ab0:	ldrd	r6, [sp, #88]	; 0x58
   16ab4:	str	r3, [sp, #128]	; 0x80
   16ab8:	lsl	r3, fp, #1
   16abc:	adds	r6, r6, r8
   16ac0:	adc	r7, r7, r9
   16ac4:	mov	r8, r6
   16ac8:	mov	r9, r7
   16acc:	ldrd	r6, [sp, #112]	; 0x70
   16ad0:	orr	r3, r3, sl, lsr #31
   16ad4:	str	lr, [sp, #132]	; 0x84
   16ad8:	adds	r0, r0, r6
   16adc:	adc	r1, r1, r7
   16ae0:	mov	r6, r0
   16ae4:	mov	r7, r1
   16ae8:	ldr	lr, [sp, #144]	; 0x90
   16aec:	str	r3, [sp, #164]	; 0xa4
   16af0:	ldrd	r0, [sp, #128]	; 0x80
   16af4:	orr	r5, r2, lr, lsl #16
   16af8:	ldrd	r2, [sp, #200]	; 0xc8
   16afc:	adds	r0, r0, r6
   16b00:	adc	r1, r1, r7
   16b04:	adds	r2, r2, r4
   16b08:	strd	r0, [sp, #208]	; 0xd0
   16b0c:	ldrd	r0, [sp, #152]	; 0x98
   16b10:	adc	r3, r3, r5
   16b14:	ldr	lr, [sp, #176]	; 0xb0
   16b18:	eor	r0, r0, r2
   16b1c:	eor	r1, r1, r3
   16b20:	strd	r2, [sp, #216]	; 0xd8
   16b24:	mov	r2, r0
   16b28:	mov	r3, r1
   16b2c:	ldrd	r0, [sp, #176]	; 0xb0
   16b30:	lsr	ip, lr, #16
   16b34:	orr	r6, ip, r1, lsl #16
   16b38:	lsl	ip, sl, #1
   16b3c:	orr	ip, ip, fp, lsr #31
   16b40:	str	ip, [sp, #160]	; 0xa0
   16b44:	mov	sl, r8
   16b48:	mov	fp, r9
   16b4c:	ldrd	r8, [sp, #160]	; 0xa0
   16b50:	lsr	r1, r1, #16
   16b54:	lsl	ip, r3, #1
   16b58:	adds	r8, r8, sl
   16b5c:	mov	sl, r8
   16b60:	eor	r8, r4, r8
   16b64:	mov	r4, r0
   16b68:	adc	r9, r9, fp
   16b6c:	orr	r7, r1, r4, lsl #16
   16b70:	ldrd	r0, [sp, #208]	; 0xd0
   16b74:	mov	fp, r9
   16b78:	eor	r9, r5, r9
   16b7c:	ldrd	r4, [sp, #224]	; 0xe0
   16b80:	eor	r1, r1, r7
   16b84:	eor	r0, r0, r6
   16b88:	adds	r4, r4, r6
   16b8c:	str	r1, [sp, #176]	; 0xb0
   16b90:	add	r1, sp, #264	; 0x108
   16b94:	adc	r5, r5, r7
   16b98:	str	r0, [sp, #180]	; 0xb4
   16b9c:	mov	r6, r4
   16ba0:	mov	r7, r5
   16ba4:	ldrd	r4, [r1]
   16ba8:	ldrd	r0, [sp, #176]	; 0xb0
   16bac:	orr	lr, ip, r2, lsr #31
   16bb0:	lsl	r2, r2, #1
   16bb4:	adds	r4, r4, r0
   16bb8:	orr	r3, r2, r3, lsr #31
   16bbc:	adc	r5, r5, r1
   16bc0:	str	r3, [sp, #144]	; 0x90
   16bc4:	ldrd	r0, [sp, #240]	; 0xf0
   16bc8:	ldrd	r2, [sp, #80]	; 0x50
   16bcc:	str	r9, [sp, #152]	; 0x98
   16bd0:	str	r8, [sp, #156]	; 0x9c
   16bd4:	adds	r2, r2, r0
   16bd8:	mov	r8, r4
   16bdc:	mov	r9, r5
   16be0:	ldrd	r4, [sp, #128]	; 0x80
   16be4:	adc	r3, r3, r1
   16be8:	ldrd	r0, [sp, #152]	; 0x98
   16bec:	eor	r4, r4, r8
   16bf0:	eor	r5, r5, r9
   16bf4:	strd	r8, [sp, #200]	; 0xc8
   16bf8:	ldrd	r8, [sp, #160]	; 0xa0
   16bfc:	adds	r0, r0, r6
   16c00:	adc	r1, r1, r7
   16c04:	str	lr, [sp, #148]	; 0x94
   16c08:	eor	r8, r8, r0
   16c0c:	eor	r9, r9, r1
   16c10:	strd	r0, [sp, #224]	; 0xe0
   16c14:	mov	r0, r8
   16c18:	mov	r1, r9
   16c1c:	ldrd	r8, [sp, #144]	; 0x90
   16c20:	lsr	lr, r4, #24
   16c24:	lsr	ip, r0, #24
   16c28:	adds	r8, r8, r2
   16c2c:	adc	r9, r9, r3
   16c30:	ldrd	r2, [sp, #184]	; 0xb8
   16c34:	strd	r8, [sp, #184]	; 0xb8
   16c38:	eor	r8, r8, r2
   16c3c:	eor	r9, r9, r3
   16c40:	mov	r2, r8
   16c44:	mov	r3, r9
   16c48:	ldrd	r8, [sp, #208]	; 0xd0
   16c4c:	strd	r2, [sp, #240]	; 0xf0
   16c50:	ldrd	r2, [sp, #96]	; 0x60
   16c54:	adds	r2, r2, r8
   16c58:	adc	r3, r3, r9
   16c5c:	strd	r2, [sp, #208]	; 0xd0
   16c60:	ldrd	r2, [sp, #72]	; 0x48
   16c64:	ldrd	r8, [sp, #168]	; 0xa8
   16c68:	adds	r2, r2, sl
   16c6c:	adc	r3, r3, fp
   16c70:	mov	fp, r3
   16c74:	orr	r3, lr, r5, lsl #8
   16c78:	str	r3, [sp, #160]	; 0xa0
   16c7c:	orr	r3, ip, r1, lsl #8
   16c80:	mov	sl, r2
   16c84:	str	r3, [sp, #128]	; 0x80
   16c88:	ldrd	r2, [sp, #240]	; 0xf0
   16c8c:	eor	r8, r8, r6
   16c90:	eor	r9, r9, r7
   16c94:	str	r3, [sp, #168]	; 0xa8
   16c98:	str	r2, [sp, #172]	; 0xac
   16c9c:	mov	r7, r9
   16ca0:	ldrd	r2, [sp, #192]	; 0xc0
   16ca4:	mov	r6, r8
   16ca8:	ldrd	r8, [sp, #168]	; 0xa8
   16cac:	lsr	ip, r5, #24
   16cb0:	lsr	r1, r1, #24
   16cb4:	adds	r2, r2, r8
   16cb8:	adc	r3, r3, r9
   16cbc:	ldrd	r8, [sp, #144]	; 0x90
   16cc0:	strd	r2, [sp, #248]	; 0xf8
   16cc4:	eor	r8, r8, r2
   16cc8:	eor	r9, r9, r3
   16ccc:	orr	r3, ip, r4, lsl #8
   16cd0:	str	r3, [sp, #164]	; 0xa4
   16cd4:	ldrd	r4, [sp, #208]	; 0xd0
   16cd8:	strd	r8, [sp, #192]	; 0xc0
   16cdc:	ldrd	r8, [sp, #160]	; 0xa0
   16ce0:	orr	r3, r1, r0, lsl #8
   16ce4:	str	r3, [sp, #132]	; 0x84
   16ce8:	adds	r4, r4, r8
   16cec:	adc	r5, r5, r9
   16cf0:	ldrd	r8, [sp, #128]	; 0x80
   16cf4:	ldrd	r0, [sp, #152]	; 0x98
   16cf8:	ldrd	r2, [sp, #8]
   16cfc:	adds	r8, r8, sl
   16d00:	adc	r9, r9, fp
   16d04:	mov	sl, r8
   16d08:	mov	fp, r9
   16d0c:	ldrd	r8, [sp, #176]	; 0xb0
   16d10:	strd	r4, [sp, #240]	; 0xf0
   16d14:	eor	r0, r0, sl
   16d18:	eor	r8, r8, r4
   16d1c:	eor	r9, r9, r5
   16d20:	mov	r5, r9
   16d24:	mov	r4, r8
   16d28:	lsr	lr, r8, #16
   16d2c:	ldrd	r8, [sp, #184]	; 0xb8
   16d30:	eor	r1, r1, fp
   16d34:	lsl	ip, r7, #1
   16d38:	adds	r8, r8, r2
   16d3c:	adc	r9, r9, r3
   16d40:	orr	r3, lr, r5, lsl #16
   16d44:	lsr	lr, r5, #16
   16d48:	strd	sl, [sp, #208]	; 0xd0
   16d4c:	str	r3, [sp, #152]	; 0x98
   16d50:	orr	fp, ip, r6, lsr #31
   16d54:	orr	r3, lr, r4, lsl #16
   16d58:	lsr	ip, r0, #16
   16d5c:	str	r3, [sp, #156]	; 0x9c
   16d60:	lsl	r6, r6, #1
   16d64:	orr	r3, ip, r1, lsl #16
   16d68:	orr	sl, r6, r7, lsr #31
   16d6c:	ldrd	r4, [sp, #200]	; 0xc8
   16d70:	ldrd	r6, [sp, #152]	; 0x98
   16d74:	str	r3, [sp, #144]	; 0x90
   16d78:	ldrd	r2, [sp, #192]	; 0xc0
   16d7c:	adds	r4, r4, r6
   16d80:	adc	r5, r5, r7
   16d84:	lsr	ip, r2, #24
   16d88:	mov	r7, r3
   16d8c:	lsr	r1, r1, #16
   16d90:	orr	r3, ip, r3, lsl #8
   16d94:	str	r3, [sp, #176]	; 0xb0
   16d98:	orr	r3, r1, r0, lsl #16
   16d9c:	mov	lr, r2
   16da0:	strd	r4, [sp, #200]	; 0xc8
   16da4:	str	r3, [sp, #148]	; 0x94
   16da8:	ldrd	r0, [sp, #224]	; 0xe0
   16dac:	ldrd	r4, [sp, #144]	; 0x90
   16db0:	lsr	r3, r7, #24
   16db4:	orr	r3, r3, lr, lsl #8
   16db8:	adds	r0, r0, r4
   16dbc:	str	r3, [sp, #180]	; 0xb4
   16dc0:	adc	r1, r1, r5
   16dc4:	add	r3, sp, #256	; 0x100
   16dc8:	ldrd	r4, [sp, #176]	; 0xb0
   16dcc:	ldrd	r6, [r3]
   16dd0:	strd	r0, [sp, #192]	; 0xc0
   16dd4:	ldrd	r0, [sp, #16]
   16dd8:	adds	r4, r4, r8
   16ddc:	adc	r5, r5, r9
   16de0:	ldrd	r8, [sp, #136]	; 0x88
   16de4:	adds	r0, r0, r6
   16de8:	strd	r4, [sp, #184]	; 0xb8
   16dec:	adc	r1, r1, r7
   16df0:	ldrd	r4, [sp, #216]	; 0xd8
   16df4:	adds	r0, r0, sl
   16df8:	adc	r1, r1, fp
   16dfc:	eor	r9, r9, r1
   16e00:	adds	r4, r4, r9
   16e04:	eor	r8, r8, r0
   16e08:	adc	r5, r5, r8
   16e0c:	ldrd	r6, [sp, #56]	; 0x38
   16e10:	strd	r4, [sp, #216]	; 0xd8
   16e14:	eor	r4, r4, sl
   16e18:	eor	r5, r5, fp
   16e1c:	lsr	ip, r4, #24
   16e20:	adds	r6, r6, r0
   16e24:	mov	r3, r8
   16e28:	orr	r8, ip, r5, lsl #8
   16e2c:	lsr	ip, r5, #24
   16e30:	adc	r7, r7, r1
   16e34:	mov	r2, r9
   16e38:	adds	sl, r6, r8
   16e3c:	orr	r9, ip, r4, lsl #8
   16e40:	adc	fp, r7, r9
   16e44:	ldrd	r0, [sp, #184]	; 0xb8
   16e48:	ldrd	r6, [sp, #168]	; 0xa8
   16e4c:	strd	sl, [sp, #224]	; 0xe0
   16e50:	eor	r6, r6, r0
   16e54:	eor	r7, r7, r1
   16e58:	mov	r0, sl
   16e5c:	mov	r1, fp
   16e60:	eor	r0, r0, r2
   16e64:	eor	r1, r1, r3
   16e68:	mov	r2, r0
   16e6c:	ldrd	sl, [sp, #200]	; 0xc8
   16e70:	mov	r3, r1
   16e74:	ldrd	r0, [sp, #160]	; 0xa0
   16e78:	mov	r5, r7
   16e7c:	mov	r4, r6
   16e80:	eor	r1, r1, fp
   16e84:	eor	r0, r0, sl
   16e88:	lsl	ip, r1, #1
   16e8c:	orr	r7, ip, r0, lsr #31
   16e90:	lsl	r0, r0, #1
   16e94:	str	r7, [sp, #140]	; 0x8c
   16e98:	ldrd	sl, [sp, #32]
   16e9c:	orr	r7, r0, r1, lsr #31
   16ea0:	ldrd	r0, [sp, #208]	; 0xd0
   16ea4:	str	r7, [sp, #136]	; 0x88
   16ea8:	lsr	lr, r6, #16
   16eac:	adds	sl, sl, r0
   16eb0:	adc	fp, fp, r1
   16eb4:	ldrd	r6, [sp, #128]	; 0x80
   16eb8:	ldrd	r0, [sp, #192]	; 0xc0
   16ebc:	lsr	ip, r2, #16
   16ec0:	orr	lr, lr, r5, lsl #16
   16ec4:	eor	r6, r6, r0
   16ec8:	eor	r7, r7, r1
   16ecc:	ldrd	r0, [sp, #136]	; 0x88
   16ed0:	str	lr, [sp, #160]	; 0xa0
   16ed4:	adds	r0, r0, sl
   16ed8:	adc	r1, r1, fp
   16edc:	ldrd	sl, [sp, #248]	; 0xf8
   16ee0:	strd	r0, [sp, #208]	; 0xd0
   16ee4:	orr	r0, ip, r3, lsl #16
   16ee8:	lsr	ip, r5, #16
   16eec:	orr	lr, ip, r4, lsl #16
   16ef0:	str	lr, [sp, #164]	; 0xa4
   16ef4:	ldrd	r4, [sp, #160]	; 0xa0
   16ef8:	lsr	r3, r3, #16
   16efc:	orr	r1, r3, r2, lsl #16
   16f00:	adds	sl, sl, r4
   16f04:	adc	fp, fp, r5
   16f08:	ldrd	r4, [sp, #216]	; 0xd8
   16f0c:	lsl	ip, r7, #1
   16f10:	orr	lr, ip, r6, lsr #31
   16f14:	adds	r4, r4, r0
   16f18:	adc	r5, r5, r1
   16f1c:	mov	r2, r4
   16f20:	mov	r3, r5
   16f24:	ldrd	r4, [sp, #176]	; 0xb0
   16f28:	lsl	ip, r6, #1
   16f2c:	eor	r4, r4, sl
   16f30:	eor	r5, r5, fp
   16f34:	strd	r4, [sp, #168]	; 0xa8
   16f38:	strd	r2, [sp, #248]	; 0xf8
   16f3c:	ldrd	r4, [sp, #168]	; 0xa8
   16f40:	eor	r2, r2, r8
   16f44:	eor	r3, r3, r9
   16f48:	ldrd	r8, [sp, #208]	; 0xd0
   16f4c:	str	lr, [sp, #132]	; 0x84
   16f50:	orr	lr, ip, r7, lsr #31
   16f54:	eor	r8, r8, r0
   16f58:	eor	r9, r9, r1
   16f5c:	lsl	r1, r5, #1
   16f60:	orr	r7, r1, r4, lsr #31
   16f64:	str	r9, [sp, #176]	; 0xb0
   16f68:	str	r8, [sp, #180]	; 0xb4
   16f6c:	ldrd	r0, [sp, #120]	; 0x78
   16f70:	ldrd	r8, [sp, #240]	; 0xf0
   16f74:	str	lr, [sp, #128]	; 0x80
   16f78:	lsl	lr, r4, #1
   16f7c:	adds	r0, r0, r8
   16f80:	adc	r1, r1, r9
   16f84:	ldrd	r4, [sp, #184]	; 0xb8
   16f88:	ldrd	r8, [sp, #48]	; 0x30
   16f8c:	strd	r0, [sp, #216]	; 0xd8
   16f90:	ldr	r0, [sp, #172]	; 0xac
   16f94:	adds	r8, r8, r4
   16f98:	lsl	ip, r3, #1
   16f9c:	orr	r6, lr, r0, lsr #31
   16fa0:	adc	r9, r9, r5
   16fa4:	orr	r0, ip, r2, lsr #31
   16fa8:	lsl	r2, r2, #1
   16fac:	mov	r4, r8
   16fb0:	mov	r5, r9
   16fb4:	str	r0, [sp, #172]	; 0xac
   16fb8:	ldrd	r8, [sp, #104]	; 0x68
   16fbc:	ldrd	r0, [sp, #224]	; 0xe0
   16fc0:	orr	r3, r2, r3, lsr #31
   16fc4:	str	r3, [sp, #168]	; 0xa8
   16fc8:	ldrd	r2, [sp, #176]	; 0xb0
   16fcc:	adds	r8, r8, r0
   16fd0:	adc	r9, r9, r1
   16fd4:	adds	r2, r2, sl
   16fd8:	adc	r3, r3, fp
   16fdc:	mov	sl, r2
   16fe0:	mov	fp, r3
   16fe4:	ldrd	r2, [sp, #216]	; 0xd8
   16fe8:	strd	sl, [sp, #240]	; 0xf0
   16fec:	adds	r2, r2, r6
   16ff0:	adc	r3, r3, r7
   16ff4:	mov	r0, r2
   16ff8:	mov	r1, r3
   16ffc:	ldrd	r2, [sp, #168]	; 0xa8
   17000:	strd	r0, [sp, #216]	; 0xd8
   17004:	ldrd	r0, [sp, #128]	; 0x80
   17008:	adds	r0, r0, r8
   1700c:	adc	r1, r1, r9
   17010:	ldrd	r8, [sp, #136]	; 0x88
   17014:	adds	r2, r2, r4
   17018:	adc	r3, r3, r5
   1701c:	eor	r8, r8, sl
   17020:	eor	r9, r9, fp
   17024:	strd	r0, [sp, #224]	; 0xe0
   17028:	mov	r4, r2
   1702c:	ldrd	r0, [sp, #216]	; 0xd8
   17030:	mov	r2, r8
   17034:	mov	r5, r3
   17038:	mov	r3, r9
   1703c:	ldrd	r8, [sp, #144]	; 0x90
   17040:	ldrd	sl, [sp, #160]	; 0xa0
   17044:	lsr	ip, r2, #24
   17048:	eor	r8, r8, r0
   1704c:	eor	r9, r9, r1
   17050:	ldrd	r0, [sp, #224]	; 0xe0
   17054:	orr	lr, ip, r3, lsl #8
   17058:	str	r9, [sp, #144]	; 0x90
   1705c:	eor	sl, sl, r0
   17060:	eor	fp, fp, r1
   17064:	mov	r0, sl
   17068:	mov	r1, fp
   1706c:	str	lr, [sp, #136]	; 0x88
   17070:	ldrd	sl, [sp, #152]	; 0x98
   17074:	strd	r4, [sp, #152]	; 0x98
   17078:	str	r8, [sp, #148]	; 0x94
   1707c:	ldrd	r8, [sp, #208]	; 0xd0
   17080:	str	r1, [sp, #184]	; 0xb8
   17084:	str	r0, [sp, #188]	; 0xbc
   17088:	ldrd	r0, [sp]
   1708c:	eor	r4, r4, sl
   17090:	eor	r5, r5, fp
   17094:	adds	r0, r0, r8
   17098:	adc	r1, r1, r9
   1709c:	ldrd	sl, [sp, #144]	; 0x90
   170a0:	ldrd	r8, [sp, #248]	; 0xf8
   170a4:	lsr	r3, r3, #24
   170a8:	str	r5, [sp, #160]	; 0xa0
   170ac:	adds	r8, r8, sl
   170b0:	str	r4, [sp, #164]	; 0xa4
   170b4:	orr	r3, r3, r2, lsl #8
   170b8:	adc	r9, r9, fp
   170bc:	str	r3, [sp, #140]	; 0x8c
   170c0:	ldrd	sl, [sp, #192]	; 0xc0
   170c4:	ldrd	r2, [sp, #160]	; 0xa0
   170c8:	mov	r4, r0
   170cc:	mov	r5, r1
   170d0:	adds	sl, sl, r2
   170d4:	adc	fp, fp, r3
   170d8:	mov	r2, sl
   170dc:	mov	r3, fp
   170e0:	ldrd	r0, [sp, #184]	; 0xb8
   170e4:	ldrd	sl, [sp, #200]	; 0xc8
   170e8:	strd	r8, [sp, #248]	; 0xf8
   170ec:	adds	sl, sl, r0
   170f0:	adc	fp, fp, r1
   170f4:	ldrd	r0, [sp, #136]	; 0x88
   170f8:	adds	r0, r0, r4
   170fc:	adc	r1, r1, r5
   17100:	strd	r0, [sp, #200]	; 0xc8
   17104:	mov	r1, r9
   17108:	eor	r1, r1, r7
   1710c:	mov	r7, r1
   17110:	mov	r0, r8
   17114:	add	r1, sp, #256	; 0x100
   17118:	eor	r0, r0, r6
   1711c:	mov	r6, r0
   17120:	strd	r2, [r1]
   17124:	ldrd	r0, [sp, #168]	; 0xa8
   17128:	ldrd	r8, [sp, #176]	; 0xb0
   1712c:	lsr	lr, r6, #24
   17130:	eor	r0, r0, r2
   17134:	eor	r1, r1, r3
   17138:	mov	r4, r0
   1713c:	mov	r5, r1
   17140:	ldrd	r0, [sp, #128]	; 0x80
   17144:	add	r3, sp, #264	; 0x108
   17148:	eor	r0, r0, sl
   1714c:	strd	sl, [r3]
   17150:	eor	r1, r1, fp
   17154:	ldrd	sl, [sp, #200]	; 0xc8
   17158:	strd	r0, [sp, #192]	; 0xc0
   1715c:	ldrd	r0, [sp, #216]	; 0xd8
   17160:	eor	r8, r8, sl
   17164:	eor	r9, r9, fp
   17168:	lsr	ip, r8, #16
   1716c:	strd	r8, [sp, #168]	; 0xa8
   17170:	ldrd	r8, [sp, #24]
   17174:	ldrd	r2, [sp, #224]	; 0xe0
   17178:	ldrd	sl, [sp, #64]	; 0x40
   1717c:	adds	r8, r8, r0
   17180:	adc	r9, r9, r1
   17184:	adds	sl, sl, r2
   17188:	adc	fp, fp, r3
   1718c:	ldrd	r2, [sp, #152]	; 0x98
   17190:	strd	sl, [sp, #224]	; 0xe0
   17194:	ldrd	sl, [sp, #40]	; 0x28
   17198:	ldrd	r0, [sp, #168]	; 0xa8
   1719c:	adds	r2, r2, sl
   171a0:	adc	r3, r3, fp
   171a4:	mov	fp, r3
   171a8:	orr	r3, ip, r1, lsl #16
   171ac:	str	r3, [sp, #128]	; 0x80
   171b0:	lsr	r3, r1, #16
   171b4:	orr	r3, r3, r0, lsl #16
   171b8:	str	r3, [sp, #132]	; 0x84
   171bc:	orr	r3, lr, r7, lsl #8
   171c0:	str	r3, [sp, #152]	; 0x98
   171c4:	ldr	r3, [sp, #192]	; 0xc0
   171c8:	ldrd	r0, [sp, #128]	; 0x80
   171cc:	mov	sl, r2
   171d0:	lsr	lr, r3, #24
   171d4:	ldrd	r2, [sp, #240]	; 0xf0
   171d8:	lsr	ip, r4, #24
   171dc:	adds	r2, r2, r0
   171e0:	adc	r3, r3, r1
   171e4:	ldrd	r0, [sp, #136]	; 0x88
   171e8:	strd	r2, [sp, #208]	; 0xd0
   171ec:	eor	r0, r0, r2
   171f0:	mov	r2, r0
   171f4:	eor	r1, r1, r3
   171f8:	ldr	r0, [sp, #196]	; 0xc4
   171fc:	mov	r3, r1
   17200:	orr	r1, ip, r5, lsl #8
   17204:	orr	lr, lr, r0, lsl #8
   17208:	lsl	ip, r3, #1
   1720c:	str	lr, [sp, #176]	; 0xb0
   17210:	orr	lr, ip, r2, lsr #31
   17214:	lsr	ip, r7, #24
   17218:	str	lr, [sp, #140]	; 0x8c
   1721c:	orr	lr, ip, r6, lsl #8
   17220:	lsr	ip, r5, #24
   17224:	str	lr, [sp, #156]	; 0x9c
   17228:	orr	lr, ip, r4, lsl #8
   1722c:	str	r1, [sp, #168]	; 0xa8
   17230:	str	lr, [sp, #172]	; 0xac
   17234:	ldrd	r0, [sp, #152]	; 0x98
   17238:	ldrd	r4, [sp, #168]	; 0xa8
   1723c:	ldrd	r6, [sp, #144]	; 0x90
   17240:	adds	r8, r8, r0
   17244:	adc	r9, r9, r1
   17248:	adds	r4, r4, sl
   1724c:	adc	r5, r5, fp
   17250:	mov	sl, r4
   17254:	mov	fp, r5
   17258:	mov	r0, r8
   1725c:	ldrd	r4, [sp, #192]	; 0xc0
   17260:	mov	r1, r9
   17264:	lsl	r2, r2, #1
   17268:	strd	r0, [sp, #216]	; 0xd8
   1726c:	eor	r1, r1, r7
   17270:	mov	r9, r1
   17274:	lsr	r1, r5, #24
   17278:	orr	lr, r1, r4, lsl #8
   1727c:	str	lr, [sp, #180]	; 0xb4
   17280:	ldrd	r4, [sp, #224]	; 0xe0
   17284:	eor	r0, r0, r6
   17288:	ldrd	r6, [sp, #176]	; 0xb0
   1728c:	mov	r8, r0
   17290:	orr	r3, r2, r3, lsr #31
   17294:	adds	r4, r4, r6
   17298:	adc	r5, r5, r7
   1729c:	mov	r0, r4
   172a0:	mov	r1, r5
   172a4:	ldrd	r4, [sp, #160]	; 0xa0
   172a8:	ldrd	r6, [sp, #184]	; 0xb8
   172ac:	lsr	lr, r8, #16
   172b0:	eor	r4, r4, sl
   172b4:	str	r3, [sp, #136]	; 0x88
   172b8:	orr	r3, lr, r9, lsl #16
   172bc:	eor	r5, r5, fp
   172c0:	str	r3, [sp, #144]	; 0x90
   172c4:	lsr	r3, r9, #16
   172c8:	lsr	ip, r4, #16
   172cc:	orr	r3, r3, r8, lsl #16
   172d0:	eor	r6, r6, r0
   172d4:	orr	r2, ip, r5, lsl #16
   172d8:	strd	r0, [sp, #224]	; 0xe0
   172dc:	str	r3, [sp, #148]	; 0x94
   172e0:	mov	r0, r6
   172e4:	lsr	ip, r5, #16
   172e8:	eor	r7, r7, r1
   172ec:	orr	r3, ip, r4, lsl #16
   172f0:	mov	r1, r7
   172f4:	ldrd	r4, [sp, #248]	; 0xf8
   172f8:	ldrd	r6, [sp, #144]	; 0x90
   172fc:	lsr	lr, r0, #16
   17300:	orr	lr, lr, r1, lsl #16
   17304:	lsr	r1, r1, #16
   17308:	adds	r4, r4, r6
   1730c:	str	lr, [sp, #160]	; 0xa0
   17310:	orr	lr, r1, r0, lsl #16
   17314:	add	r1, sp, #256	; 0x100
   17318:	adc	r5, r5, r7
   1731c:	mov	r6, r4
   17320:	mov	r7, r5
   17324:	ldrd	r4, [r1]
   17328:	add	r1, sp, #264	; 0x108
   1732c:	str	lr, [sp, #164]	; 0xa4
   17330:	adds	r4, r4, r2
   17334:	adc	r5, r5, r3
   17338:	add	ip, sp, #256	; 0x100
   1733c:	strd	r4, [sp, #184]	; 0xb8
   17340:	ldrd	r4, [r1]
   17344:	ldrd	r0, [sp, #160]	; 0xa0
   17348:	ldrd	r8, [sp, #200]	; 0xc8
   1734c:	strd	r6, [sp, #192]	; 0xc0
   17350:	adds	r4, r4, r0
   17354:	adc	r5, r5, r1
   17358:	mov	r0, r4
   1735c:	mov	r1, r5
   17360:	ldrd	r4, [sp, #40]	; 0x28
   17364:	adds	r4, r4, r8
   17368:	adc	r5, r5, r9
   1736c:	ldrd	r8, [sp, #216]	; 0xd8
   17370:	strd	r4, [ip]
   17374:	ldrd	r4, [sp, #96]	; 0x60
   17378:	adds	r8, r8, r4
   1737c:	adc	r9, r9, r5
   17380:	ldrd	r4, [sp, #136]	; 0x88
   17384:	adds	r4, r4, r8
   17388:	adc	r5, r5, r9
   1738c:	mov	r8, r4
   17390:	mov	r9, r5
   17394:	strd	r8, [sp, #200]	; 0xc8
   17398:	eor	r8, r8, r2
   1739c:	eor	r9, r9, r3
   173a0:	mov	r4, r8
   173a4:	mov	r5, r9
   173a8:	ldrd	r2, [sp, #168]	; 0xa8
   173ac:	str	r5, [sp, #168]	; 0xa8
   173b0:	str	r4, [sp, #172]	; 0xac
   173b4:	ldrd	r4, [sp, #176]	; 0xb0
   173b8:	ldrd	r8, [sp, #184]	; 0xb8
   173bc:	eor	r4, r4, r0
   173c0:	eor	r5, r5, r1
   173c4:	eor	r2, r2, r8
   173c8:	strd	r4, [sp, #176]	; 0xb0
   173cc:	ldrd	r4, [sp, #168]	; 0xa8
   173d0:	eor	r3, r3, r9
   173d4:	ldrd	r8, [sp, #152]	; 0x98
   173d8:	adds	r4, r4, r0
   173dc:	adc	r5, r5, r1
   173e0:	mov	r0, r4
   173e4:	mov	r1, r5
   173e8:	ldrd	r4, [sp, #136]	; 0x88
   173ec:	eor	r8, r8, r6
   173f0:	eor	r9, r9, r7
   173f4:	eor	r4, r4, r0
   173f8:	eor	r5, r5, r1
   173fc:	ldrd	r6, [sp, #224]	; 0xe0
   17400:	lsl	ip, r3, #1
   17404:	strd	r0, [sp, #240]	; 0xf0
   17408:	mov	r0, r4
   1740c:	mov	r1, r5
   17410:	ldrd	r4, [sp]
   17414:	orr	lr, ip, r2, lsr #31
   17418:	lsl	r2, r2, #1
   1741c:	orr	r3, r2, r3, lsr #31
   17420:	adds	r4, r4, r6
   17424:	str	lr, [sp, #156]	; 0x9c
   17428:	str	r3, [sp, #152]	; 0x98
   1742c:	adc	r5, r5, r7
   17430:	ldrd	r6, [sp, #152]	; 0x98
   17434:	lsl	r3, r9, #1
   17438:	orr	r3, r3, r8, lsr #31
   1743c:	adds	r6, r6, r4
   17440:	adc	r7, r7, r5
   17444:	mov	r4, r6
   17448:	mov	r5, r7
   1744c:	str	r3, [sp, #140]	; 0x8c
   17450:	ldrd	r6, [sp, #128]	; 0x80
   17454:	ldr	r3, [sp, #180]	; 0xb4
   17458:	lsl	ip, r8, #1
   1745c:	strd	r4, [sp, #248]	; 0xf8
   17460:	eor	r7, r7, r5
   17464:	lsl	lr, r3, #1
   17468:	orr	r5, ip, r9, lsr #31
   1746c:	ldrd	r2, [sp, #72]	; 0x48
   17470:	eor	r6, r6, r4
   17474:	str	r5, [sp, #136]	; 0x88
   17478:	ldrd	r4, [sp, #176]	; 0xb0
   1747c:	adds	r2, r2, sl
   17480:	adc	r3, r3, fp
   17484:	orr	lr, lr, r4, lsr #31
   17488:	str	lr, [sp, #132]	; 0x84
   1748c:	mov	sl, r2
   17490:	ldrd	r8, [sp, #200]	; 0xc8
   17494:	mov	fp, r3
   17498:	mov	r2, r6
   1749c:	mov	r3, r7
   174a0:	ldrd	r6, [sp, #56]	; 0x38
   174a4:	lsr	ip, r0, #24
   174a8:	lsl	lr, r4, #1
   174ac:	adds	r6, r6, r8
   174b0:	adc	r7, r7, r9
   174b4:	ldrd	r8, [sp, #136]	; 0x88
   174b8:	mov	r5, r7
   174bc:	ldr	r7, [sp, #180]	; 0xb4
   174c0:	adds	r8, r8, sl
   174c4:	adc	r9, r9, fp
   174c8:	orr	sl, ip, r1, lsl #8
   174cc:	strd	r8, [sp, #200]	; 0xc8
   174d0:	lsr	r1, r1, #24
   174d4:	orr	fp, r1, r0, lsl #8
   174d8:	orr	lr, lr, r7, lsr #31
   174dc:	ldrd	r0, [sp, #200]	; 0xc8
   174e0:	mov	r4, r6
   174e4:	ldrd	r6, [sp, #160]	; 0xa0
   174e8:	str	lr, [sp, #128]	; 0x80
   174ec:	mov	r8, r3
   174f0:	eor	r6, r6, r0
   174f4:	eor	r7, r7, r1
   174f8:	add	r1, sp, #256	; 0x100
   174fc:	strd	r6, [sp, #176]	; 0xb0
   17500:	ldrd	r6, [r1]
   17504:	ldrd	r0, [sp, #128]	; 0x80
   17508:	mov	r9, r2
   1750c:	ldrd	r2, [sp, #144]	; 0x90
   17510:	adds	r6, r6, r0
   17514:	adc	r7, r7, r1
   17518:	adds	r4, r4, sl
   1751c:	adc	r5, r5, fp
   17520:	eor	r2, r2, r6
   17524:	eor	r3, r3, r7
   17528:	strd	r6, [sp, #216]	; 0xd8
   1752c:	ldrd	r6, [sp, #192]	; 0xc0
   17530:	mov	r0, r4
   17534:	mov	r1, r5
   17538:	ldrd	r4, [sp, #168]	; 0xa8
   1753c:	adds	r6, r6, r8
   17540:	adc	r7, r7, r9
   17544:	eor	r5, r5, r1
   17548:	strd	r0, [sp, #224]	; 0xe0
   1754c:	add	r1, sp, #256	; 0x100
   17550:	eor	r4, r4, r0
   17554:	strd	r6, [r1]
   17558:	ldrd	r0, [sp, #152]	; 0x98
   1755c:	ldr	lr, [sp, #180]	; 0xb4
   17560:	str	r3, [sp, #144]	; 0x90
   17564:	eor	r0, r0, r6
   17568:	mov	r6, r0
   1756c:	ldr	r0, [sp, #176]	; 0xb0
   17570:	str	lr, [sp, #160]	; 0xa0
   17574:	str	r0, [sp, #164]	; 0xa4
   17578:	eor	r1, r1, r7
   1757c:	mov	r7, r1
   17580:	str	r2, [sp, #148]	; 0x94
   17584:	ldrd	r0, [sp, #208]	; 0xd0
   17588:	ldrd	r2, [sp, #160]	; 0xa0
   1758c:	lsr	lr, r4, #16
   17590:	lsr	ip, r6, #24
   17594:	adds	r0, r0, r2
   17598:	adc	r1, r1, r3
   1759c:	orr	r3, lr, r5, lsl #16
   175a0:	strd	r0, [sp, #208]	; 0xd0
   175a4:	str	r3, [sp, #152]	; 0x98
   175a8:	ldrd	r0, [sp, #144]	; 0x90
   175ac:	ldrd	r2, [sp, #184]	; 0xb8
   175b0:	lsr	lr, r5, #16
   175b4:	adds	r2, r2, r0
   175b8:	adc	r3, r3, r1
   175bc:	strd	r2, [sp, #192]	; 0xc0
   175c0:	ldrd	r2, [sp, #136]	; 0x88
   175c4:	ldrd	r0, [sp, #208]	; 0xd0
   175c8:	eor	r2, r2, r0
   175cc:	eor	r3, r3, r1
   175d0:	ldrd	r0, [sp, #192]	; 0xc0
   175d4:	strd	r2, [sp, #176]	; 0xb0
   175d8:	orr	r3, lr, r4, lsl #16
   175dc:	str	r3, [sp, #156]	; 0x9c
   175e0:	ldrd	r2, [sp, #128]	; 0x80
   175e4:	ldrd	r4, [sp, #248]	; 0xf8
   175e8:	orr	lr, ip, r7, lsl #8
   175ec:	eor	r2, r2, r0
   175f0:	eor	r3, r3, r1
   175f4:	mov	r0, r2
   175f8:	mov	r1, r3
   175fc:	ldrd	r2, [sp, #48]	; 0x30
   17600:	lsr	ip, r7, #24
   17604:	str	lr, [sp, #168]	; 0xa8
   17608:	adds	r2, r2, r4
   1760c:	adc	r3, r3, r5
   17610:	ldrd	r4, [sp, #152]	; 0x98
   17614:	strd	r2, [sp, #128]	; 0x80
   17618:	ldrd	r2, [sp, #240]	; 0xf0
   1761c:	adds	r2, r2, r4
   17620:	adc	r3, r3, r5
   17624:	ldrd	r4, [sp, #128]	; 0x80
   17628:	strd	r2, [sp, #240]	; 0xf0
   1762c:	eor	r3, r3, fp
   17630:	mov	fp, r3
   17634:	orr	r3, ip, r6, lsl #8
   17638:	str	r3, [sp, #172]	; 0xac
   1763c:	ldr	r3, [sp, #176]	; 0xb0
   17640:	eor	r2, r2, sl
   17644:	mov	sl, r2
   17648:	lsr	ip, r3, #24
   1764c:	ldrd	r2, [sp, #168]	; 0xa8
   17650:	ldrd	r6, [sp, #200]	; 0xc8
   17654:	lsl	lr, sl, #1
   17658:	adds	r4, r4, r2
   1765c:	adc	r5, r5, r3
   17660:	mov	r2, r4
   17664:	mov	r3, r5
   17668:	ldrd	r4, [sp, #16]
   1766c:	strd	r2, [sp, #248]	; 0xf8
   17670:	adds	r4, r4, r6
   17674:	adc	r5, r5, r7
   17678:	strd	r4, [sp, #184]	; 0xb8
   1767c:	mov	r5, r3
   17680:	ldr	r3, [sp, #180]	; 0xb4
   17684:	mov	r4, r2
   17688:	eor	r4, r4, r8
   1768c:	orr	r3, ip, r3, lsl #8
   17690:	eor	r5, r5, r9
   17694:	str	r3, [sp, #136]	; 0x88
   17698:	ldrd	r8, [sp, #216]	; 0xd8
   1769c:	ldrd	r2, [sp, #120]	; 0x78
   176a0:	lsl	ip, fp, #1
   176a4:	mov	r7, r5
   176a8:	adds	r2, r2, r8
   176ac:	orr	r5, ip, sl, lsr #31
   176b0:	adc	r3, r3, r9
   176b4:	lsr	ip, r0, #24
   176b8:	mov	r9, r3
   176bc:	orr	r3, ip, r1, lsl #8
   176c0:	lsr	r1, r1, #24
   176c4:	str	r3, [sp, #128]	; 0x80
   176c8:	orr	r3, r1, r0, lsl #8
   176cc:	ldrd	r0, [sp, #176]	; 0xb0
   176d0:	str	r3, [sp, #132]	; 0x84
   176d4:	mov	r6, r4
   176d8:	lsr	r3, r1, #24
   176dc:	orr	r3, r3, r0, lsl #8
   176e0:	str	r3, [sp, #140]	; 0x8c
   176e4:	orr	r4, lr, fp, lsr #31
   176e8:	mov	r8, r2
   176ec:	ldrd	sl, [sp, #136]	; 0x88
   176f0:	ldrd	r2, [sp, #184]	; 0xb8
   176f4:	ldrd	r0, [sp, #128]	; 0x80
   176f8:	adds	r2, r2, sl
   176fc:	adc	r3, r3, fp
   17700:	adds	r0, r0, r8
   17704:	adc	r1, r1, r9
   17708:	mov	r8, r0
   1770c:	mov	r9, r1
   17710:	ldrd	r0, [sp, #160]	; 0xa0
   17714:	mov	sl, r2
   17718:	mov	fp, r3
   1771c:	eor	r1, r1, r3
   17720:	mov	r3, r1
   17724:	lsr	r1, r6, #16
   17728:	strd	sl, [sp, #216]	; 0xd8
   1772c:	orr	lr, r1, r7, lsl #16
   17730:	ldrd	sl, [sp, #80]	; 0x50
   17734:	lsr	r1, r7, #16
   17738:	eor	r0, r0, r2
   1773c:	str	lr, [sp, #176]	; 0xb0
   17740:	orr	lr, r1, r6, lsl #16
   17744:	str	lr, [sp, #180]	; 0xb4
   17748:	strd	r8, [sp, #184]	; 0xb8
   1774c:	mov	r2, r0
   17750:	adds	r8, r8, sl
   17754:	lsr	r1, r0, #16
   17758:	ldrd	r6, [sp, #176]	; 0xb0
   1775c:	orr	lr, r1, r3, lsl #16
   17760:	adc	r9, r9, fp
   17764:	lsr	r3, r3, #16
   17768:	adds	sl, r8, r4
   1776c:	adc	fp, r9, r5
   17770:	orr	r3, r3, r2, lsl #16
   17774:	str	lr, [sp, #160]	; 0xa0
   17778:	eor	r6, r6, sl
   1777c:	eor	r7, r7, fp
   17780:	str	r3, [sp, #164]	; 0xa4
   17784:	ldrd	r2, [sp, #160]	; 0xa0
   17788:	mov	r0, r6
   1778c:	mov	r1, r7
   17790:	ldrd	r6, [sp, #208]	; 0xd0
   17794:	ldrd	r8, [sp, #184]	; 0xb8
   17798:	adds	r6, r6, r2
   1779c:	adc	r7, r7, r3
   177a0:	mov	r2, r6
   177a4:	mov	r3, r7
   177a8:	mov	r6, r1
   177ac:	mov	r7, r0
   177b0:	ldrd	r0, [sp, #144]	; 0x90
   177b4:	eor	r8, r8, r0
   177b8:	eor	r9, r9, r1
   177bc:	ldrd	r0, [sp, #136]	; 0x88
   177c0:	lsr	lr, r9, #16
   177c4:	eor	r0, r0, r2
   177c8:	eor	r1, r1, r3
   177cc:	strd	r0, [sp, #184]	; 0xb8
   177d0:	adds	r0, r2, r6
   177d4:	adc	r1, r3, r7
   177d8:	lsr	r3, r8, #16
   177dc:	orr	r3, r3, r9, lsl #16
   177e0:	str	r3, [sp, #136]	; 0x88
   177e4:	ldrd	r2, [sp, #104]	; 0x68
   177e8:	strd	r0, [sp, #200]	; 0xc8
   177ec:	eor	r1, r1, r5
   177f0:	adds	r2, r2, sl
   177f4:	mov	r5, r1
   177f8:	adc	r3, r3, fp
   177fc:	add	r1, sp, #264	; 0x108
   17800:	ldrd	sl, [sp, #88]	; 0x58
   17804:	strd	r2, [r1]
   17808:	orr	r3, lr, r8, lsl #16
   1780c:	ldrd	r8, [sp, #224]	; 0xe0
   17810:	add	r2, sp, #272	; 0x110
   17814:	str	r3, [sp, #140]	; 0x8c
   17818:	adds	sl, sl, r8
   1781c:	adc	fp, fp, r9
   17820:	eor	r0, r0, r4
   17824:	strd	sl, [r2]
   17828:	ldrd	r8, [sp, #192]	; 0xc0
   1782c:	ldrd	sl, [sp, #136]	; 0x88
   17830:	mov	r4, r0
   17834:	lsr	r3, r0, #24
   17838:	ldrd	r0, [sp, #128]	; 0x80
   1783c:	adds	r8, r8, sl
   17840:	adc	r9, r9, fp
   17844:	orr	r3, r3, r5, lsl #8
   17848:	eor	r1, r1, r9
   1784c:	lsr	ip, r5, #24
   17850:	orr	lr, ip, r4, lsl #8
   17854:	str	r3, [sp, #144]	; 0x90
   17858:	mov	r3, r1
   1785c:	add	r1, sp, #264	; 0x108
   17860:	eor	r0, r0, r8
   17864:	str	lr, [sp, #148]	; 0x94
   17868:	mov	r2, r0
   1786c:	strd	r8, [sp, #208]	; 0xd0
   17870:	ldrd	r0, [r1]
   17874:	ldrd	r8, [sp, #144]	; 0x90
   17878:	adds	r0, r0, r8
   1787c:	adc	r1, r1, r9
   17880:	mov	r8, r0
   17884:	mov	r9, r1
   17888:	mov	r5, r1
   1788c:	strd	r8, [sp, #224]	; 0xe0
   17890:	ldrd	r8, [sp, #184]	; 0xb8
   17894:	add	r1, sp, #256	; 0x100
   17898:	eor	r5, r5, r7
   1789c:	lsl	ip, r9, #1
   178a0:	orr	r7, ip, r8, lsr #31
   178a4:	mov	r4, r0
   178a8:	ldrd	r8, [r1]
   178ac:	ldrd	r0, [sp, #176]	; 0xb0
   178b0:	eor	r4, r4, r6
   178b4:	lsl	ip, r3, #1
   178b8:	adds	r8, r8, r0
   178bc:	adc	r9, r9, r1
   178c0:	add	r1, sp, #272	; 0x110
   178c4:	strd	r8, [sp, #128]	; 0x80
   178c8:	ldrd	r8, [sp, #184]	; 0xb8
   178cc:	orr	fp, ip, r2, lsr #31
   178d0:	lsr	ip, r4, #16
   178d4:	lsl	r0, r8, #1
   178d8:	orr	r6, r0, r9, lsr #31
   178dc:	ldrd	r0, [r1]
   178e0:	lsl	r2, r2, #1
   178e4:	ldrd	r8, [sp, #136]	; 0x88
   178e8:	orr	sl, r2, r3, lsr #31
   178ec:	orr	r3, ip, r5, lsl #16
   178f0:	adds	r0, r0, r6
   178f4:	str	r3, [sp, #136]	; 0x88
   178f8:	lsr	r3, r5, #16
   178fc:	adc	r1, r1, r7
   17900:	orr	r3, r3, r4, lsl #16
   17904:	eor	r8, r8, r0
   17908:	eor	r9, r9, r1
   1790c:	str	r3, [sp, #140]	; 0x8c
   17910:	str	r9, [sp, #176]	; 0xb0
   17914:	str	r8, [sp, #180]	; 0xb4
   17918:	strd	r0, [sp, #184]	; 0xb8
   1791c:	ldrd	r8, [sp, #136]	; 0x88
   17920:	ldrd	r0, [sp, #200]	; 0xc8
   17924:	ldrd	r4, [sp, #248]	; 0xf8
   17928:	adds	r0, r0, r8
   1792c:	adc	r1, r1, r9
   17930:	ldrd	r8, [sp, #128]	; 0x80
   17934:	strd	r0, [sp, #192]	; 0xc0
   17938:	ldrd	r0, [sp, #176]	; 0xb0
   1793c:	adds	r2, r8, r0
   17940:	adc	r3, r9, r1
   17944:	mov	r0, r2
   17948:	mov	r1, r3
   1794c:	ldrd	r2, [sp, #64]	; 0x40
   17950:	strd	r0, [sp, #200]	; 0xc8
   17954:	ldrd	r0, [sp, #168]	; 0xa8
   17958:	adds	r2, r2, r4
   1795c:	adc	r3, r3, r5
   17960:	eor	r9, r9, r1
   17964:	ldrd	r4, [sp, #160]	; 0xa0
   17968:	adds	r2, r2, sl
   1796c:	eor	r8, r8, r0
   17970:	adc	r3, r3, fp
   17974:	lsl	ip, r9, #1
   17978:	orr	lr, ip, r8, lsr #31
   1797c:	eor	r4, r4, r2
   17980:	eor	r5, r5, r3
   17984:	lsl	r0, r8, #1
   17988:	str	lr, [sp, #132]	; 0x84
   1798c:	mov	r8, r5
   17990:	orr	lr, r0, r9, lsr #31
   17994:	mov	r9, r4
   17998:	ldrd	r4, [sp, #240]	; 0xf0
   1799c:	str	lr, [sp, #128]	; 0x80
   179a0:	adds	r4, r4, r8
   179a4:	adc	r5, r5, r9
   179a8:	strd	r4, [sp, #240]	; 0xf0
   179ac:	eor	r4, r4, sl
   179b0:	eor	r5, r5, fp
   179b4:	mov	r0, r4
   179b8:	ldrd	sl, [sp, #216]	; 0xd8
   179bc:	mov	r1, r5
   179c0:	ldrd	r4, [sp, #8]
   179c4:	lsr	ip, r0, #24
   179c8:	adds	r4, r4, sl
   179cc:	adc	r5, r5, fp
   179d0:	mov	sl, r4
   179d4:	mov	fp, r5
   179d8:	ldrd	r4, [sp, #128]	; 0x80
   179dc:	adds	r4, r4, sl
   179e0:	adc	r5, r5, fp
   179e4:	mov	sl, r4
   179e8:	mov	fp, r5
   179ec:	ldrd	r4, [sp, #152]	; 0x98
   179f0:	strd	sl, [sp, #152]	; 0x98
   179f4:	eor	r4, r4, sl
   179f8:	eor	r5, r5, fp
   179fc:	ldrd	sl, [sp, #32]
   17a00:	str	r5, [sp, #160]	; 0xa0
   17a04:	str	r4, [sp, #164]	; 0xa4
   17a08:	adds	sl, sl, r2
   17a0c:	adc	fp, fp, r3
   17a10:	mov	r2, sl
   17a14:	orr	sl, ip, r1, lsl #8
   17a18:	lsr	r1, r1, #24
   17a1c:	mov	r3, fp
   17a20:	orr	fp, r1, r0, lsl #8
   17a24:	adds	r0, r2, sl
   17a28:	adc	r1, r3, fp
   17a2c:	mov	r2, r0
   17a30:	mov	r3, r1
   17a34:	ldrd	r0, [sp, #200]	; 0xc8
   17a38:	ldrd	r4, [sp, #160]	; 0xa0
   17a3c:	strd	r2, [sp, #248]	; 0xf8
   17a40:	eor	r0, r0, r6
   17a44:	eor	r1, r1, r7
   17a48:	mov	r6, r0
   17a4c:	mov	r7, r1
   17a50:	ldrd	r0, [sp, #208]	; 0xd0
   17a54:	lsr	lr, r6, #24
   17a58:	adds	r0, r0, r4
   17a5c:	adc	r1, r1, r5
   17a60:	mov	r4, r2
   17a64:	mov	r5, r3
   17a68:	eor	r4, r4, r8
   17a6c:	eor	r5, r5, r9
   17a70:	ldrd	r2, [sp, #128]	; 0x80
   17a74:	lsr	ip, r4, #16
   17a78:	strd	r4, [sp, #128]	; 0x80
   17a7c:	ldrd	r8, [sp, #112]	; 0x70
   17a80:	ldrd	r4, [sp, #184]	; 0xb8
   17a84:	eor	r2, r2, r0
   17a88:	eor	r3, r3, r1
   17a8c:	adds	r8, r8, r4
   17a90:	adc	r9, r9, r5
   17a94:	strd	r0, [sp, #216]	; 0xd8
   17a98:	strd	r8, [sp, #168]	; 0xa8
   17a9c:	mov	r0, r2
   17aa0:	ldrd	r8, [sp, #152]	; 0x98
   17aa4:	mov	r1, r3
   17aa8:	ldrd	r2, [sp, #24]
   17aac:	adds	r2, r2, r8
   17ab0:	adc	r3, r3, r9
   17ab4:	mov	r5, r3
   17ab8:	orr	r3, lr, r7, lsl #8
   17abc:	ldr	lr, [sp, #132]	; 0x84
   17ac0:	ldrd	r8, [sp, #144]	; 0x90
   17ac4:	mov	r4, r2
   17ac8:	str	r3, [sp, #152]	; 0x98
   17acc:	ldrd	r2, [sp, #192]	; 0xc0
   17ad0:	orr	lr, ip, lr, lsl #16
   17ad4:	lsr	ip, r7, #24
   17ad8:	str	lr, [sp, #184]	; 0xb8
   17adc:	orr	lr, ip, r6, lsl #8
   17ae0:	str	lr, [sp, #156]	; 0x9c
   17ae4:	eor	r8, r8, r2
   17ae8:	eor	r9, r9, r3
   17aec:	ldrd	r6, [sp, #168]	; 0xa8
   17af0:	mov	r2, r8
   17af4:	mov	r3, r9
   17af8:	ldrd	r8, [sp, #152]	; 0x98
   17afc:	lsr	ip, r0, #24
   17b00:	orr	lr, ip, r1, lsl #8
   17b04:	adds	r6, r6, r8
   17b08:	adc	r7, r7, r9
   17b0c:	mov	r8, r6
   17b10:	mov	r9, r7
   17b14:	ldrd	r6, [sp, #176]	; 0xb0
   17b18:	strd	r8, [sp, #176]	; 0xb0
   17b1c:	str	lr, [sp, #168]	; 0xa8
   17b20:	eor	r8, r8, r6
   17b24:	eor	r9, r9, r7
   17b28:	mov	r6, r8
   17b2c:	mov	r7, r9
   17b30:	lsr	r1, r1, #24
   17b34:	strd	r6, [sp, #144]	; 0x90
   17b38:	ldrd	r6, [sp, #128]	; 0x80
   17b3c:	lsr	ip, r7, #16
   17b40:	orr	lr, ip, r6, lsl #16
   17b44:	str	lr, [sp, #188]	; 0xbc
   17b48:	ldrd	r8, [sp, #184]	; 0xb8
   17b4c:	ldrd	r6, [sp, #240]	; 0xf0
   17b50:	add	ip, sp, #256	; 0x100
   17b54:	orr	lr, r1, r0, lsl #8
   17b58:	adds	r6, r6, r8
   17b5c:	adc	r7, r7, r9
   17b60:	str	lr, [sp, #172]	; 0xac
   17b64:	strd	r6, [ip]
   17b68:	eor	r6, r6, sl
   17b6c:	eor	r7, r7, fp
   17b70:	mov	sl, r6
   17b74:	mov	fp, r7
   17b78:	ldrd	r6, [sp, #168]	; 0xa8
   17b7c:	lsl	lr, r3, #1
   17b80:	orr	lr, lr, r2, lsr #31
   17b84:	adds	r0, r4, r6
   17b88:	adc	r1, r5, r7
   17b8c:	ldrd	r6, [sp, #160]	; 0xa0
   17b90:	mov	r4, r0
   17b94:	mov	r5, r1
   17b98:	eor	r6, r6, r0
   17b9c:	eor	r7, r7, r1
   17ba0:	strd	r4, [sp, #240]	; 0xf0
   17ba4:	mov	r0, r6
   17ba8:	mov	r1, r7
   17bac:	ldrd	r6, [sp, #144]	; 0x90
   17bb0:	lsl	r2, r2, #1
   17bb4:	ldrd	r8, [sp, #224]	; 0xe0
   17bb8:	lsr	ip, r6, #16
   17bbc:	orr	r4, ip, r7, lsl #16
   17bc0:	orr	r3, r2, r3, lsr #31
   17bc4:	lsr	r2, r7, #16
   17bc8:	ldrd	r6, [sp, #64]	; 0x40
   17bcc:	str	lr, [sp, #132]	; 0x84
   17bd0:	ldr	lr, [sp, #144]	; 0x90
   17bd4:	adds	r6, r6, r8
   17bd8:	adc	r7, r7, r9
   17bdc:	ldrd	r8, [sp, #176]	; 0xb0
   17be0:	strd	r6, [sp, #160]	; 0xa0
   17be4:	ldrd	r6, [sp, #48]	; 0x30
   17be8:	str	r3, [sp, #128]	; 0x80
   17bec:	lsl	r3, fp, #1
   17bf0:	adds	r8, r8, r6
   17bf4:	adc	r9, r9, r7
   17bf8:	orr	r5, r2, lr, lsl #16
   17bfc:	mov	r7, r9
   17c00:	orr	r9, r3, sl, lsr #31
   17c04:	ldrd	r2, [sp, #128]	; 0x80
   17c08:	lsr	ip, r0, #16
   17c0c:	adds	r2, r2, r8
   17c10:	adc	r3, r3, r7
   17c14:	ldrd	r6, [sp, #200]	; 0xc8
   17c18:	strd	r2, [sp, #176]	; 0xb0
   17c1c:	ldrd	r2, [sp, #152]	; 0x98
   17c20:	adds	r6, r6, r4
   17c24:	adc	r7, r7, r5
   17c28:	eor	r2, r2, r6
   17c2c:	strd	r6, [sp, #208]	; 0xd0
   17c30:	orr	r6, ip, r1, lsl #16
   17c34:	lsr	r1, r1, #16
   17c38:	eor	r3, r3, r7
   17c3c:	orr	r7, r1, r0, lsl #16
   17c40:	ldrd	r0, [sp, #176]	; 0xb0
   17c44:	lsl	ip, sl, #1
   17c48:	orr	r8, ip, fp, lsr #31
   17c4c:	eor	r0, r0, r6
   17c50:	eor	r1, r1, r7
   17c54:	ldrd	sl, [sp, #160]	; 0xa0
   17c58:	strd	r0, [sp, #152]	; 0x98
   17c5c:	ldrd	r0, [sp, #216]	; 0xd8
   17c60:	adds	sl, sl, r8
   17c64:	adc	fp, fp, r9
   17c68:	adds	r0, r0, r6
   17c6c:	adc	r1, r1, r7
   17c70:	eor	r4, r4, sl
   17c74:	strd	r0, [sp, #200]	; 0xc8
   17c78:	ldrd	r0, [sp, #152]	; 0x98
   17c7c:	eor	r5, r5, fp
   17c80:	str	r5, [sp, #152]	; 0x98
   17c84:	str	r1, [sp, #160]	; 0xa0
   17c88:	add	r1, sp, #256	; 0x100
   17c8c:	str	r0, [sp, #164]	; 0xa4
   17c90:	ldrd	r6, [sp, #160]	; 0xa0
   17c94:	ldrd	r0, [r1]
   17c98:	str	r4, [sp, #156]	; 0x9c
   17c9c:	ldrd	r4, [sp, #240]	; 0xf0
   17ca0:	adds	r0, r0, r6
   17ca4:	adc	r1, r1, r7
   17ca8:	mov	r6, r0
   17cac:	mov	r7, r1
   17cb0:	ldrd	r0, [sp, #112]	; 0x70
   17cb4:	lsl	ip, r3, #1
   17cb8:	orr	lr, ip, r2, lsr #31
   17cbc:	adds	r0, r0, r4
   17cc0:	adc	r1, r1, r5
   17cc4:	ldrd	r4, [sp, #128]	; 0x80
   17cc8:	lsl	r2, r2, #1
   17ccc:	orr	r3, r2, r3, lsr #31
   17cd0:	eor	r4, r4, r6
   17cd4:	eor	r5, r5, r7
   17cd8:	mov	r2, r0
   17cdc:	str	lr, [sp, #148]	; 0x94
   17ce0:	str	r3, [sp, #144]	; 0x90
   17ce4:	strd	r6, [sp, #240]	; 0xf0
   17ce8:	mov	r3, r1
   17cec:	ldrd	r0, [sp, #152]	; 0x98
   17cf0:	ldrd	r6, [sp, #200]	; 0xc8
   17cf4:	add	ip, sp, #264	; 0x108
   17cf8:	lsr	lr, r4, #24
   17cfc:	adds	r6, r6, r0
   17d00:	adc	r7, r7, r1
   17d04:	mov	r0, r6
   17d08:	mov	r1, r7
   17d0c:	ldrd	r6, [sp, #184]	; 0xb8
   17d10:	strd	r0, [sp, #216]	; 0xd8
   17d14:	eor	r0, r0, r8
   17d18:	eor	r1, r1, r9
   17d1c:	ldrd	r8, [sp, #144]	; 0x90
   17d20:	orr	lr, lr, r5, lsl #8
   17d24:	adds	r8, r8, r2
   17d28:	adc	r9, r9, r3
   17d2c:	mov	r2, r8
   17d30:	mov	r3, r9
   17d34:	eor	r8, r8, r6
   17d38:	eor	r9, r9, r7
   17d3c:	strd	r2, [ip]
   17d40:	ldrd	r6, [sp, #24]
   17d44:	mov	r2, r8
   17d48:	mov	r3, r9
   17d4c:	ldrd	r8, [sp, #176]	; 0xb0
   17d50:	lsr	ip, r0, #24
   17d54:	str	lr, [sp, #176]	; 0xb0
   17d58:	adds	r6, r6, r8
   17d5c:	adc	r7, r7, r9
   17d60:	ldrd	r8, [sp, #168]	; 0xa8
   17d64:	strd	r6, [sp, #224]	; 0xe0
   17d68:	ldrd	r6, [sp, #104]	; 0x68
   17d6c:	str	r3, [sp, #168]	; 0xa8
   17d70:	str	r2, [sp, #172]	; 0xac
   17d74:	adds	r6, r6, sl
   17d78:	adc	r7, r7, fp
   17d7c:	mov	sl, r6
   17d80:	mov	fp, r7
   17d84:	ldrd	r6, [sp, #200]	; 0xc8
   17d88:	ldrd	r2, [sp, #192]	; 0xc0
   17d8c:	orr	lr, ip, r1, lsl #8
   17d90:	eor	r7, r7, r9
   17d94:	eor	r6, r6, r8
   17d98:	ldrd	r8, [sp, #168]	; 0xa8
   17d9c:	add	ip, sp, #272	; 0x110
   17da0:	str	lr, [sp, #128]	; 0x80
   17da4:	adds	r2, r2, r8
   17da8:	adc	r3, r3, r9
   17dac:	ldrd	r8, [sp, #144]	; 0x90
   17db0:	strd	r2, [ip]
   17db4:	lsr	ip, r5, #24
   17db8:	orr	lr, ip, r4, lsl #8
   17dbc:	eor	r8, r8, r2
   17dc0:	eor	r9, r9, r3
   17dc4:	str	lr, [sp, #180]	; 0xb4
   17dc8:	ldrd	r4, [sp, #224]	; 0xe0
   17dcc:	strd	r8, [sp, #184]	; 0xb8
   17dd0:	ldrd	r8, [sp, #176]	; 0xb0
   17dd4:	lsr	r1, r1, #24
   17dd8:	orr	lr, r1, r0, lsl #8
   17ddc:	adds	r4, r4, r8
   17de0:	str	lr, [sp, #132]	; 0x84
   17de4:	adc	r5, r5, r9
   17de8:	ldrd	r8, [sp, #128]	; 0x80
   17dec:	add	r3, sp, #256	; 0x100
   17df0:	lsl	ip, r7, #1
   17df4:	adds	r8, r8, sl
   17df8:	adc	r9, r9, fp
   17dfc:	mov	sl, r8
   17e00:	mov	fp, r9
   17e04:	ldrd	r8, [sp, #160]	; 0xa0
   17e08:	strd	r4, [r3]
   17e0c:	add	r3, sp, #264	; 0x108
   17e10:	eor	r8, r8, r4
   17e14:	eor	r9, r9, r5
   17e18:	mov	r4, r8
   17e1c:	mov	r5, r9
   17e20:	ldrd	r8, [sp, #152]	; 0x98
   17e24:	strd	sl, [sp, #224]	; 0xe0
   17e28:	ldrd	r2, [r3]
   17e2c:	eor	r8, r8, sl
   17e30:	eor	r9, r9, fp
   17e34:	mov	r0, r8
   17e38:	orr	fp, ip, r6, lsr #31
   17e3c:	mov	r1, r9
   17e40:	lsr	ip, r8, #16
   17e44:	ldrd	r8, [sp, #40]	; 0x28
   17e48:	lsr	lr, r4, #16
   17e4c:	orr	lr, lr, r5, lsl #16
   17e50:	adds	r2, r2, r8
   17e54:	adc	r3, r3, r9
   17e58:	str	lr, [sp, #152]	; 0x98
   17e5c:	mov	r9, r3
   17e60:	ldr	r3, [sp, #184]	; 0xb8
   17e64:	lsr	lr, r5, #16
   17e68:	orr	lr, lr, r4, lsl #16
   17e6c:	str	lr, [sp, #156]	; 0x9c
   17e70:	lsl	r6, r6, #1
   17e74:	orr	lr, ip, r1, lsl #16
   17e78:	lsr	ip, r3, #24
   17e7c:	ldr	r3, [sp, #188]	; 0xbc
   17e80:	orr	sl, r6, r7, lsr #31
   17e84:	ldrd	r4, [sp, #240]	; 0xf0
   17e88:	ldrd	r6, [sp, #152]	; 0x98
   17e8c:	str	lr, [sp, #144]	; 0x90
   17e90:	lsr	r1, r1, #16
   17e94:	orr	lr, ip, r3, lsl #8
   17e98:	adds	r4, r4, r6
   17e9c:	str	lr, [sp, #160]	; 0xa0
   17ea0:	orr	lr, r1, r0, lsl #16
   17ea4:	mov	r8, r2
   17ea8:	adc	r5, r5, r7
   17eac:	ldr	r2, [sp, #184]	; 0xb8
   17eb0:	str	lr, [sp, #148]	; 0x94
   17eb4:	mov	r6, r4
   17eb8:	mov	r7, r5
   17ebc:	ldrd	r0, [sp, #216]	; 0xd8
   17ec0:	ldrd	r4, [sp, #144]	; 0x90
   17ec4:	lsr	r3, r3, #24
   17ec8:	orr	r3, r3, r2, lsl #8
   17ecc:	adds	r0, r0, r4
   17ed0:	str	r3, [sp, #164]	; 0xa4
   17ed4:	adc	r1, r1, r5
   17ed8:	ldrd	r4, [sp, #160]	; 0xa0
   17edc:	strd	r0, [sp, #200]	; 0xc8
   17ee0:	ldrd	r0, [sp, #248]	; 0xf8
   17ee4:	adds	r4, r4, r8
   17ee8:	adc	r5, r5, r9
   17eec:	ldrd	r8, [sp, #8]
   17ef0:	strd	r4, [sp, #192]	; 0xc0
   17ef4:	strd	r6, [sp, #240]	; 0xf0
   17ef8:	adds	r8, r8, r0
   17efc:	adc	r9, r9, r1
   17f00:	adds	r0, r8, sl
   17f04:	adc	r1, r9, fp
   17f08:	ldrd	r8, [sp, #136]	; 0x88
   17f0c:	eor	r8, r8, r0
   17f10:	eor	r9, r9, r1
   17f14:	mov	r4, r8
   17f18:	mov	r5, r9
   17f1c:	mov	r2, r9
   17f20:	mov	r3, r8
   17f24:	ldrd	r8, [sp, #208]	; 0xd0
   17f28:	adds	r8, r8, r5
   17f2c:	adc	r9, r9, r4
   17f30:	ldrd	r4, [sp, #32]
   17f34:	strd	r8, [sp, #184]	; 0xb8
   17f38:	eor	r8, r8, sl
   17f3c:	eor	r9, r9, fp
   17f40:	mov	sl, r8
   17f44:	lsr	ip, r8, #24
   17f48:	orr	r8, ip, r9, lsl #8
   17f4c:	adds	r4, r4, r0
   17f50:	lsr	ip, r9, #24
   17f54:	orr	r9, ip, sl, lsl #8
   17f58:	adc	r5, r5, r1
   17f5c:	adds	sl, r4, r8
   17f60:	adc	fp, r5, r9
   17f64:	ldrd	r0, [sp, #168]	; 0xa8
   17f68:	strd	sl, [sp, #208]	; 0xd0
   17f6c:	ldrd	sl, [sp, #192]	; 0xc0
   17f70:	eor	r0, r0, sl
   17f74:	eor	r1, r1, fp
   17f78:	mov	r4, r0
   17f7c:	mov	r5, r1
   17f80:	ldrd	r0, [sp, #176]	; 0xb0
   17f84:	ldrd	sl, [sp, #208]	; 0xd0
   17f88:	lsr	lr, r4, #16
   17f8c:	eor	r1, r1, r7
   17f90:	eor	r0, r0, r6
   17f94:	lsl	ip, r1, #1
   17f98:	orr	r7, ip, r0, lsr #31
   17f9c:	eor	sl, sl, r2
   17fa0:	eor	fp, fp, r3
   17fa4:	lsl	r0, r0, #1
   17fa8:	mov	r2, sl
   17fac:	mov	r3, fp
   17fb0:	str	r7, [sp, #140]	; 0x8c
   17fb4:	ldrd	sl, [sp, #120]	; 0x78
   17fb8:	orr	r7, r0, r1, lsr #31
   17fbc:	ldrd	r0, [sp, #224]	; 0xe0
   17fc0:	orr	lr, lr, r5, lsl #16
   17fc4:	str	lr, [sp, #168]	; 0xa8
   17fc8:	adds	sl, sl, r0
   17fcc:	adc	fp, fp, r1
   17fd0:	str	r7, [sp, #136]	; 0x88
   17fd4:	ldrd	r6, [sp, #128]	; 0x80
   17fd8:	ldrd	r0, [sp, #200]	; 0xc8
   17fdc:	lsr	ip, r2, #16
   17fe0:	eor	r6, r6, r0
   17fe4:	eor	r7, r7, r1
   17fe8:	ldrd	r0, [sp, #136]	; 0x88
   17fec:	adds	r0, r0, sl
   17ff0:	adc	r1, r1, fp
   17ff4:	strd	r0, [sp, #216]	; 0xd8
   17ff8:	orr	r0, ip, r3, lsl #16
   17ffc:	lsr	ip, r5, #16
   18000:	orr	lr, ip, r4, lsl #16
   18004:	add	ip, sp, #272	; 0x110
   18008:	str	lr, [sp, #172]	; 0xac
   1800c:	ldrd	sl, [sp, #168]	; 0xa8
   18010:	ldrd	r4, [ip]
   18014:	lsr	r3, r3, #16
   18018:	orr	r1, r3, r2, lsl #16
   1801c:	adds	r4, r4, sl
   18020:	adc	r5, r5, fp
   18024:	mov	sl, r4
   18028:	mov	fp, r5
   1802c:	ldrd	r4, [sp, #184]	; 0xb8
   18030:	lsl	ip, r7, #1
   18034:	adds	r4, r4, r0
   18038:	adc	r5, r5, r1
   1803c:	mov	r2, r4
   18040:	mov	r3, r5
   18044:	ldrd	r4, [sp, #160]	; 0xa0
   18048:	strd	r2, [sp, #224]	; 0xe0
   1804c:	eor	r2, r2, r8
   18050:	eor	r3, r3, r9
   18054:	ldrd	r8, [sp, #216]	; 0xd8
   18058:	eor	r5, r5, fp
   1805c:	eor	r4, r4, sl
   18060:	strd	r2, [sp, #176]	; 0xb0
   18064:	eor	r9, r9, r1
   18068:	orr	r3, ip, r6, lsr #31
   1806c:	lsl	r1, r5, #1
   18070:	lsl	ip, r6, #1
   18074:	add	r6, sp, #256	; 0x100
   18078:	eor	r8, r8, r0
   1807c:	orr	r1, r1, r4, lsr #31
   18080:	str	r9, [sp, #184]	; 0xb8
   18084:	str	r8, [sp, #188]	; 0xbc
   18088:	str	r1, [sp, #164]	; 0xa4
   1808c:	ldrd	r8, [r6]
   18090:	ldrd	r0, [sp, #56]	; 0x38
   18094:	str	r3, [sp, #132]	; 0x84
   18098:	orr	r3, ip, r7, lsr #31
   1809c:	adds	r0, r0, r8
   180a0:	adc	r1, r1, r9
   180a4:	ldrd	r8, [sp, #16]
   180a8:	strd	r0, [sp, #248]	; 0xf8
   180ac:	ldrd	r0, [sp, #192]	; 0xc0
   180b0:	str	r3, [sp, #128]	; 0x80
   180b4:	ldrd	r2, [sp, #176]	; 0xb0
   180b8:	adds	r8, r8, r0
   180bc:	lsl	lr, r4, #1
   180c0:	adc	r9, r9, r1
   180c4:	lsl	ip, r3, #1
   180c8:	orr	r1, lr, r5, lsr #31
   180cc:	str	r1, [sp, #160]	; 0xa0
   180d0:	orr	r1, ip, r2, lsr #31
   180d4:	mov	r5, r3
   180d8:	lsl	lr, r2, #1
   180dc:	str	r1, [sp, #180]	; 0xb4
   180e0:	ldrd	r2, [sp, #208]	; 0xd0
   180e4:	ldrd	r0, [sp, #88]	; 0x58
   180e8:	add	ip, sp, #256	; 0x100
   180ec:	adds	r0, r0, r2
   180f0:	adc	r1, r1, r3
   180f4:	orr	r3, lr, r5, lsr #31
   180f8:	str	r3, [sp, #176]	; 0xb0
   180fc:	ldrd	r2, [sp, #184]	; 0xb8
   18100:	mov	r6, r0
   18104:	mov	r7, r1
   18108:	ldrd	r4, [sp, #160]	; 0xa0
   1810c:	ldrd	r0, [sp, #248]	; 0xf8
   18110:	adds	r2, r2, sl
   18114:	adc	r3, r3, fp
   18118:	adds	r4, r4, r0
   1811c:	adc	r5, r5, r1
   18120:	ldrd	r0, [sp, #128]	; 0x80
   18124:	adds	r0, r0, r6
   18128:	adc	r1, r1, r7
   1812c:	mov	sl, r0
   18130:	mov	fp, r1
   18134:	ldrd	r0, [sp, #176]	; 0xb0
   18138:	strd	r2, [sp, #208]	; 0xd0
   1813c:	strd	r4, [sp, #248]	; 0xf8
   18140:	adds	r0, r0, r8
   18144:	adc	r1, r1, r9
   18148:	mov	r6, r0
   1814c:	mov	r7, r1
   18150:	ldrd	r0, [sp, #136]	; 0x88
   18154:	ldrd	r8, [sp, #144]	; 0x90
   18158:	strd	sl, [ip]
   1815c:	eor	r0, r0, r2
   18160:	eor	r1, r1, r3
   18164:	mov	r2, r0
   18168:	mov	r3, r1
   1816c:	eor	r8, r8, r4
   18170:	ldrd	r0, [sp, #168]	; 0xa8
   18174:	eor	r9, r9, r5
   18178:	mov	r4, r8
   1817c:	mov	r5, r9
   18180:	ldrd	r8, [sp, #152]	; 0x98
   18184:	eor	r0, r0, sl
   18188:	eor	r1, r1, fp
   1818c:	mov	sl, r6
   18190:	mov	fp, r7
   18194:	eor	sl, sl, r8
   18198:	eor	fp, fp, r9
   1819c:	str	fp, [sp, #168]	; 0xa8
   181a0:	str	sl, [sp, #172]	; 0xac
   181a4:	str	r1, [sp, #192]	; 0xc0
   181a8:	str	r0, [sp, #196]	; 0xc4
   181ac:	ldrd	sl, [sp, #72]	; 0x48
   181b0:	ldrd	r0, [sp, #216]	; 0xd8
   181b4:	str	r5, [sp, #144]	; 0x90
   181b8:	str	r4, [sp, #148]	; 0x94
   181bc:	adds	sl, sl, r0
   181c0:	adc	fp, fp, r1
   181c4:	ldrd	r8, [sp, #224]	; 0xe0
   181c8:	mov	r4, sl
   181cc:	mov	r5, fp
   181d0:	ldrd	sl, [sp, #144]	; 0x90
   181d4:	lsr	ip, r2, #24
   181d8:	orr	lr, ip, r3, lsl #8
   181dc:	lsr	r3, r3, #24
   181e0:	adds	r8, r8, sl
   181e4:	orr	r3, r3, r2, lsl #8
   181e8:	adc	r9, r9, fp
   181ec:	str	r3, [sp, #140]	; 0x8c
   181f0:	ldrd	sl, [sp, #168]	; 0xa8
   181f4:	ldrd	r2, [sp, #200]	; 0xc8
   181f8:	ldrd	r0, [sp, #192]	; 0xc0
   181fc:	str	lr, [sp, #136]	; 0x88
   18200:	adds	r2, r2, sl
   18204:	adc	r3, r3, fp
   18208:	ldrd	sl, [sp, #240]	; 0xf0
   1820c:	strd	r8, [sp, #216]	; 0xd8
   18210:	strd	r2, [sp, #224]	; 0xe0
   18214:	adds	sl, sl, r0
   18218:	adc	fp, fp, r1
   1821c:	ldrd	r0, [sp, #136]	; 0x88
   18220:	strd	r6, [sp, #152]	; 0x98
   18224:	adds	r4, r4, r0
   18228:	adc	r5, r5, r1
   1822c:	mov	r0, r4
   18230:	mov	r1, r5
   18234:	ldrd	r4, [sp, #160]	; 0xa0
   18238:	strd	r0, [sp, #200]	; 0xc8
   1823c:	ldrd	r0, [sp, #128]	; 0x80
   18240:	eor	r4, r4, r8
   18244:	eor	r5, r5, r9
   18248:	mov	r8, r2
   1824c:	mov	r9, r3
   18250:	ldrd	r2, [sp, #176]	; 0xb0
   18254:	mov	r6, r4
   18258:	strd	sl, [sp, #240]	; 0xf0
   1825c:	eor	r2, r2, r8
   18260:	eor	r3, r3, r9
   18264:	mov	r7, r5
   18268:	mov	r4, r2
   1826c:	mov	r5, r3
   18270:	ldrd	r8, [sp, #200]	; 0xc8
   18274:	ldrd	r2, [sp, #184]	; 0xb8
   18278:	eor	r0, r0, sl
   1827c:	eor	r1, r1, fp
   18280:	eor	r2, r2, r8
   18284:	eor	r3, r3, r9
   18288:	ldrd	sl, [sp, #96]	; 0x60
   1828c:	ldrd	r8, [sp, #248]	; 0xf8
   18290:	lsr	ip, r2, #16
   18294:	lsr	lr, r6, #24
   18298:	adds	sl, sl, r8
   1829c:	adc	fp, fp, r9
   182a0:	ldrd	r8, [sp]
   182a4:	strd	sl, [sp, #184]	; 0xb8
   182a8:	add	sl, sp, #256	; 0x100
   182ac:	ldrd	sl, [sl]
   182b0:	adds	r8, r8, sl
   182b4:	adc	r9, r9, fp
   182b8:	ldrd	sl, [sp, #80]	; 0x50
   182bc:	strd	r8, [sp, #248]	; 0xf8
   182c0:	ldrd	r8, [sp, #152]	; 0x98
   182c4:	adds	r8, r8, sl
   182c8:	adc	r9, r9, fp
   182cc:	mov	fp, r9
   182d0:	orr	r9, ip, r3, lsl #16
   182d4:	lsr	r3, r3, #16
   182d8:	orr	r3, r3, r2, lsl #16
   182dc:	str	r3, [sp, #132]	; 0x84
   182e0:	str	r9, [sp, #128]	; 0x80
   182e4:	orr	r3, lr, r7, lsl #8
   182e8:	mov	sl, r8
   182ec:	str	r3, [sp, #152]	; 0x98
   182f0:	ldrd	r8, [sp, #128]	; 0x80
   182f4:	ldrd	r2, [sp, #208]	; 0xd0
   182f8:	lsr	ip, r4, #24
   182fc:	lsr	lr, r0, #24
   18300:	adds	r2, r2, r8
   18304:	adc	r3, r3, r9
   18308:	ldrd	r8, [sp, #136]	; 0x88
   1830c:	strd	r2, [sp, #208]	; 0xd0
   18310:	orr	lr, lr, r1, lsl #8
   18314:	eor	r9, r9, r3
   18318:	mov	r3, r9
   1831c:	eor	r8, r8, r2
   18320:	orr	r9, ip, r5, lsl #8
   18324:	lsl	ip, r3, #1
   18328:	str	lr, [sp, #176]	; 0xb0
   1832c:	orr	lr, ip, r8, lsr #31
   18330:	lsr	ip, r7, #24
   18334:	str	lr, [sp, #140]	; 0x8c
   18338:	orr	lr, ip, r6, lsl #8
   1833c:	lsr	ip, r5, #24
   18340:	str	lr, [sp, #156]	; 0x9c
   18344:	orr	lr, ip, r4, lsl #8
   18348:	ldrd	r6, [sp, #184]	; 0xb8
   1834c:	str	r9, [sp, #160]	; 0xa0
   18350:	str	lr, [sp, #164]	; 0xa4
   18354:	mov	r2, r8
   18358:	ldrd	r8, [sp, #152]	; 0x98
   1835c:	ldrd	r4, [sp, #160]	; 0xa0
   18360:	lsr	r1, r1, #24
   18364:	adds	r6, r6, r8
   18368:	adc	r7, r7, r9
   1836c:	adds	r4, r4, sl
   18370:	adc	r5, r5, fp
   18374:	orr	lr, r1, r0, lsl #8
   18378:	str	lr, [sp, #180]	; 0xb4
   1837c:	strd	r4, [sp, #184]	; 0xb8
   18380:	ldrd	r0, [sp, #248]	; 0xf8
   18384:	ldrd	r4, [sp, #176]	; 0xb0
   18388:	mov	r8, r6
   1838c:	mov	r9, r7
   18390:	ldrd	r6, [sp, #144]	; 0x90
   18394:	adds	r0, r0, r4
   18398:	adc	r1, r1, r5
   1839c:	eor	r6, r6, r8
   183a0:	ldrd	sl, [sp, #168]	; 0xa8
   183a4:	ldrd	r4, [sp, #184]	; 0xb8
   183a8:	eor	r7, r7, r9
   183ac:	lsl	r2, r2, #1
   183b0:	lsr	lr, r6, #16
   183b4:	orr	r3, r2, r3, lsr #31
   183b8:	eor	r4, r4, sl
   183bc:	eor	r5, r5, fp
   183c0:	ldrd	sl, [sp, #192]	; 0xc0
   183c4:	str	r3, [sp, #136]	; 0x88
   183c8:	orr	r3, lr, r7, lsl #16
   183cc:	str	r3, [sp, #144]	; 0x90
   183d0:	lsr	r3, r7, #16
   183d4:	lsr	ip, r4, #16
   183d8:	orr	r3, r3, r6, lsl #16
   183dc:	orr	r2, ip, r5, lsl #16
   183e0:	str	r3, [sp, #148]	; 0x94
   183e4:	lsr	ip, r5, #16
   183e8:	orr	r3, ip, r4, lsl #16
   183ec:	ldrd	r6, [sp, #144]	; 0x90
   183f0:	ldrd	r4, [sp, #216]	; 0xd8
   183f4:	eor	sl, sl, r0
   183f8:	eor	fp, fp, r1
   183fc:	adds	r4, r4, r6
   18400:	adc	r5, r5, r7
   18404:	mov	r6, r4
   18408:	mov	r7, r5
   1840c:	ldrd	r4, [sp, #224]	; 0xe0
   18410:	lsr	lr, sl, #16
   18414:	strd	r0, [sp, #248]	; 0xf8
   18418:	adds	r4, r4, r2
   1841c:	orr	lr, lr, fp, lsl #16
   18420:	lsr	r1, fp, #16
   18424:	adc	r5, r5, r3
   18428:	str	lr, [sp, #168]	; 0xa8
   1842c:	orr	lr, r1, sl, lsl #16
   18430:	str	lr, [sp, #172]	; 0xac
   18434:	ldrd	sl, [sp, #168]	; 0xa8
   18438:	strd	r4, [sp, #192]	; 0xc0
   1843c:	ldrd	r4, [sp, #240]	; 0xf0
   18440:	adds	r4, r4, sl
   18444:	adc	r5, r5, fp
   18448:	mov	r0, r4
   1844c:	ldrd	sl, [sp, #200]	; 0xc8
   18450:	mov	r1, r5
   18454:	ldrd	r4, [sp]
   18458:	strd	r6, [sp, #200]	; 0xc8
   1845c:	adds	r4, r4, sl
   18460:	adc	r5, r5, fp
   18464:	ldrd	sl, [sp, #104]	; 0x68
   18468:	strd	r4, [sp, #240]	; 0xf0
   1846c:	ldrd	r4, [sp, #136]	; 0x88
   18470:	adds	sl, sl, r8
   18474:	adc	fp, fp, r9
   18478:	adds	r4, r4, sl
   1847c:	adc	r5, r5, fp
   18480:	mov	r8, r4
   18484:	mov	r9, r5
   18488:	strd	r8, [sp, #216]	; 0xd8
   1848c:	eor	r8, r8, r2
   18490:	eor	r9, r9, r3
   18494:	mov	r4, r8
   18498:	mov	r5, r9
   1849c:	ldrd	r2, [sp, #160]	; 0xa0
   184a0:	str	r5, [sp, #160]	; 0xa0
   184a4:	str	r4, [sp, #164]	; 0xa4
   184a8:	ldrd	sl, [sp, #160]	; 0xa0
   184ac:	ldrd	r4, [sp, #176]	; 0xb0
   184b0:	ldrd	r8, [sp, #192]	; 0xc0
   184b4:	adds	sl, sl, r0
   184b8:	adc	fp, fp, r1
   184bc:	eor	r4, r4, r0
   184c0:	eor	r5, r5, r1
   184c4:	mov	r0, sl
   184c8:	mov	r1, fp
   184cc:	ldrd	sl, [sp, #136]	; 0x88
   184d0:	eor	r2, r2, r8
   184d4:	eor	r3, r3, r9
   184d8:	ldrd	r8, [sp, #152]	; 0x98
   184dc:	eor	sl, sl, r0
   184e0:	eor	fp, fp, r1
   184e4:	eor	r8, r8, r6
   184e8:	eor	r9, r9, r7
   184ec:	strd	r0, [sp, #224]	; 0xe0
   184f0:	ldrd	r6, [sp, #248]	; 0xf8
   184f4:	mov	r0, sl
   184f8:	mov	r1, fp
   184fc:	ldrd	sl, [sp, #40]	; 0x28
   18500:	lsl	ip, r3, #1
   18504:	orr	lr, ip, r2, lsr #31
   18508:	lsl	r2, r2, #1
   1850c:	adds	sl, sl, r6
   18510:	orr	r3, r2, r3, lsr #31
   18514:	adc	fp, fp, r7
   18518:	str	lr, [sp, #156]	; 0x9c
   1851c:	str	r3, [sp, #152]	; 0x98
   18520:	ldrd	r6, [sp, #152]	; 0x98
   18524:	lsl	r3, r9, #1
   18528:	orr	r3, r3, r8, lsr #31
   1852c:	adds	r6, r6, sl
   18530:	adc	r7, r7, fp
   18534:	str	r3, [sp, #140]	; 0x8c
   18538:	ldrd	sl, [sp, #184]	; 0xb8
   1853c:	ldrd	r2, [sp, #24]
   18540:	lsl	ip, r8, #1
   18544:	strd	r6, [sp, #184]	; 0xb8
   18548:	adds	sl, sl, r2
   1854c:	adc	fp, fp, r3
   18550:	ldrd	r2, [sp, #128]	; 0x80
   18554:	lsl	lr, r5, #1
   18558:	orr	lr, lr, r4, lsr #31
   1855c:	eor	r3, r3, r7
   18560:	orr	r7, ip, r9, lsr #31
   18564:	eor	r2, r2, r6
   18568:	str	r7, [sp, #136]	; 0x88
   1856c:	ldrd	r8, [sp, #16]
   18570:	ldrd	r6, [sp, #216]	; 0xd8
   18574:	str	lr, [sp, #132]	; 0x84
   18578:	lsl	lr, r4, #1
   1857c:	adds	r8, r8, r6
   18580:	adc	r9, r9, r7
   18584:	orr	lr, lr, r5, lsr #31
   18588:	strd	r8, [sp, #216]	; 0xd8
   1858c:	ldrd	r8, [sp, #136]	; 0x88
   18590:	ldrd	r4, [sp, #168]	; 0xa8
   18594:	lsr	ip, r0, #24
   18598:	adds	r8, r8, sl
   1859c:	adc	r9, r9, fp
   185a0:	mov	r6, r8
   185a4:	mov	r7, r9
   185a8:	orr	sl, ip, r1, lsl #8
   185ac:	str	lr, [sp, #128]	; 0x80
   185b0:	eor	r4, r4, r8
   185b4:	eor	r5, r5, r9
   185b8:	lsr	r1, r1, #24
   185bc:	orr	fp, r1, r0, lsl #8
   185c0:	strd	r6, [sp, #168]	; 0xa8
   185c4:	mov	r0, r4
   185c8:	ldrd	r6, [sp, #240]	; 0xf0
   185cc:	mov	r1, r5
   185d0:	ldrd	r4, [sp, #128]	; 0x80
   185d4:	str	r3, [sp, #176]	; 0xb0
   185d8:	str	r2, [sp, #180]	; 0xb4
   185dc:	adds	r6, r6, r4
   185e0:	ldrd	r2, [sp, #144]	; 0x90
   185e4:	adc	r7, r7, r5
   185e8:	ldrd	r4, [sp, #216]	; 0xd8
   185ec:	eor	r2, r2, r6
   185f0:	eor	r3, r3, r7
   185f4:	strd	r6, [sp, #216]	; 0xd8
   185f8:	ldrd	r6, [sp, #160]	; 0xa0
   185fc:	adds	r4, r4, sl
   18600:	adc	r5, r5, fp
   18604:	eor	r6, r6, r4
   18608:	eor	r7, r7, r5
   1860c:	strd	r4, [sp, #240]	; 0xf0
   18610:	ldrd	r8, [sp, #176]	; 0xb0
   18614:	mov	r4, r6
   18618:	mov	r5, r7
   1861c:	ldrd	r6, [sp, #200]	; 0xc8
   18620:	str	r3, [sp, #144]	; 0x90
   18624:	str	r2, [sp, #148]	; 0x94
   18628:	adds	r8, r8, r6
   1862c:	adc	r9, r9, r7
   18630:	mov	r6, r8
   18634:	mov	r7, r9
   18638:	strd	r8, [sp, #248]	; 0xf8
   1863c:	str	r1, [sp, #160]	; 0xa0
   18640:	ldrd	r8, [sp, #152]	; 0x98
   18644:	str	r0, [sp, #164]	; 0xa4
   18648:	ldrd	r0, [sp, #208]	; 0xd0
   1864c:	ldrd	r2, [sp, #160]	; 0xa0
   18650:	lsr	lr, r4, #16
   18654:	eor	r8, r8, r6
   18658:	adds	r0, r0, r2
   1865c:	adc	r1, r1, r3
   18660:	eor	r9, r9, r7
   18664:	orr	r3, lr, r5, lsl #16
   18668:	mov	r6, r8
   1866c:	mov	r7, r9
   18670:	mov	r8, r0
   18674:	mov	r9, r1
   18678:	str	r3, [sp, #152]	; 0x98
   1867c:	ldrd	r0, [sp, #144]	; 0x90
   18680:	ldrd	r2, [sp, #192]	; 0xc0
   18684:	lsr	lr, r5, #16
   18688:	strd	r8, [sp, #200]	; 0xc8
   1868c:	adds	r2, r2, r0
   18690:	adc	r3, r3, r1
   18694:	ldrd	r0, [sp, #136]	; 0x88
   18698:	strd	r2, [sp, #192]	; 0xc0
   1869c:	orr	r3, lr, r4, lsl #16
   186a0:	eor	r0, r0, r8
   186a4:	eor	r1, r1, r9
   186a8:	ldrd	r4, [sp, #128]	; 0x80
   186ac:	mov	r8, r0
   186b0:	mov	r9, r1
   186b4:	ldrd	r0, [sp, #192]	; 0xc0
   186b8:	str	r3, [sp, #156]	; 0x9c
   186bc:	ldrd	r2, [sp, #152]	; 0x98
   186c0:	eor	r4, r4, r0
   186c4:	eor	r5, r5, r1
   186c8:	ldrd	r0, [sp, #112]	; 0x70
   186cc:	strd	r4, [sp, #128]	; 0x80
   186d0:	ldrd	r4, [sp, #184]	; 0xb8
   186d4:	lsr	ip, r6, #24
   186d8:	adds	r0, r0, r4
   186dc:	adc	r1, r1, r5
   186e0:	ldrd	r4, [sp, #224]	; 0xe0
   186e4:	adds	r4, r4, r2
   186e8:	adc	r5, r5, r3
   186ec:	orr	r3, ip, r7, lsl #8
   186f0:	lsr	ip, r7, #24
   186f4:	str	r3, [sp, #184]	; 0xb8
   186f8:	orr	r3, ip, r6, lsl #8
   186fc:	str	r3, [sp, #188]	; 0xbc
   18700:	ldrd	r2, [sp, #184]	; 0xb8
   18704:	strd	r4, [sp, #224]	; 0xe0
   18708:	ldrd	r6, [sp, #32]
   1870c:	adds	r0, r0, r2
   18710:	adc	r1, r1, r3
   18714:	add	r3, sp, #256	; 0x100
   18718:	eor	r4, r4, sl
   1871c:	eor	r5, r5, fp
   18720:	ldrd	sl, [sp, #168]	; 0xa8
   18724:	strd	r0, [r3]
   18728:	ldrd	r2, [sp, #176]	; 0xb0
   1872c:	adds	r6, r6, sl
   18730:	lsr	ip, r8, #24
   18734:	adc	r7, r7, fp
   18738:	eor	r3, r3, r1
   1873c:	mov	fp, r7
   18740:	eor	r2, r2, r0
   18744:	mov	r7, r3
   18748:	ldrd	r0, [sp, #8]
   1874c:	orr	r3, ip, r9, lsl #8
   18750:	strd	r8, [sp, #176]	; 0xb0
   18754:	ldrd	r8, [sp, #216]	; 0xd8
   18758:	lsl	ip, r5, #1
   1875c:	lsl	lr, r4, #1
   18760:	adds	r0, r0, r8
   18764:	adc	r1, r1, r9
   18768:	mov	r8, r0
   1876c:	mov	r9, r1
   18770:	ldrd	r0, [sp, #128]	; 0x80
   18774:	str	r3, [sp, #168]	; 0xa8
   18778:	orr	r3, ip, r4, lsr #31
   1877c:	str	r3, [sp, #140]	; 0x8c
   18780:	lsr	ip, r0, #24
   18784:	orr	r3, lr, r5, lsr #31
   18788:	mov	r4, r0
   1878c:	str	r3, [sp, #136]	; 0x88
   18790:	orr	r3, ip, r1, lsl #8
   18794:	lsr	r1, r1, #24
   18798:	str	r3, [sp, #128]	; 0x80
   1879c:	orr	r3, r1, r4, lsl #8
   187a0:	str	r3, [sp, #132]	; 0x84
   187a4:	ldrd	r0, [sp, #176]	; 0xb0
   187a8:	mov	sl, r6
   187ac:	mov	r6, r2
   187b0:	lsr	r3, r1, #24
   187b4:	orr	r3, r3, r0, lsl #8
   187b8:	str	r3, [sp, #172]	; 0xac
   187bc:	ldrd	r2, [sp, #168]	; 0xa8
   187c0:	ldrd	r0, [sp, #160]	; 0xa0
   187c4:	lsr	ip, r6, #16
   187c8:	adds	r2, r2, sl
   187cc:	adc	r3, r3, fp
   187d0:	ldrd	sl, [sp, #128]	; 0x80
   187d4:	eor	r0, r0, r2
   187d8:	orr	lr, ip, r7, lsl #16
   187dc:	eor	r1, r1, r3
   187e0:	lsr	ip, r7, #16
   187e4:	strd	r2, [sp, #216]	; 0xd8
   187e8:	ldrd	r2, [sp, #48]	; 0x30
   187ec:	ldrd	r4, [sp, #136]	; 0x88
   187f0:	str	lr, [sp, #176]	; 0xb0
   187f4:	orr	lr, ip, r6, lsl #16
   187f8:	adds	sl, sl, r8
   187fc:	str	lr, [sp, #180]	; 0xb4
   18800:	lsr	ip, r0, #16
   18804:	adc	fp, fp, r9
   18808:	orr	lr, ip, r1, lsl #16
   1880c:	adds	r2, r2, sl
   18810:	ldrd	r6, [sp, #176]	; 0xb0
   18814:	lsr	r1, r1, #16
   18818:	adc	r3, r3, fp
   1881c:	str	lr, [sp, #160]	; 0xa0
   18820:	adds	r4, r4, r2
   18824:	orr	lr, r1, r0, lsl #16
   18828:	adc	r5, r5, r3
   1882c:	str	lr, [sp, #164]	; 0xa4
   18830:	mov	r8, sl
   18834:	mov	r9, fp
   18838:	mov	r2, r4
   1883c:	ldrd	sl, [sp, #160]	; 0xa0
   18840:	mov	r3, r5
   18844:	eor	r6, r6, r4
   18848:	eor	r7, r7, r5
   1884c:	ldrd	r4, [sp, #200]	; 0xc8
   18850:	ldrd	r0, [sp, #144]	; 0x90
   18854:	adds	r4, r4, sl
   18858:	adc	r5, r5, fp
   1885c:	mov	sl, r7
   18860:	mov	fp, r6
   18864:	ldrd	r6, [sp, #168]	; 0xa8
   18868:	eor	r0, r0, r8
   1886c:	eor	r1, r1, r9
   18870:	eor	r6, r6, r4
   18874:	eor	r7, r7, r5
   18878:	ldrd	r8, [sp, #240]	; 0xf0
   1887c:	strd	r6, [sp, #168]	; 0xa8
   18880:	adds	r6, r4, sl
   18884:	adc	r7, r5, fp
   18888:	ldrd	r4, [sp, #136]	; 0x88
   1888c:	strd	r6, [sp, #200]	; 0xc8
   18890:	lsr	ip, r0, #16
   18894:	eor	r4, r4, r6
   18898:	eor	r5, r5, r7
   1889c:	ldrd	r6, [sp, #56]	; 0x38
   188a0:	orr	lr, ip, r1, lsl #16
   188a4:	lsr	ip, r1, #16
   188a8:	adds	r6, r6, r2
   188ac:	adc	r7, r7, r3
   188b0:	add	r3, sp, #264	; 0x108
   188b4:	str	lr, [sp, #136]	; 0x88
   188b8:	strd	r6, [r3]
   188bc:	ldrd	r6, [sp, #64]	; 0x40
   188c0:	orr	r3, ip, r0, lsl #16
   188c4:	str	r3, [sp, #140]	; 0x8c
   188c8:	adds	r6, r6, r8
   188cc:	ldrd	r0, [sp, #136]	; 0x88
   188d0:	adc	r7, r7, r9
   188d4:	ldrd	r8, [sp, #192]	; 0xc0
   188d8:	lsr	r3, r4, #24
   188dc:	add	r2, sp, #272	; 0x110
   188e0:	adds	r8, r8, r0
   188e4:	orr	r3, r3, r5, lsl #8
   188e8:	adc	r9, r9, r1
   188ec:	strd	r6, [r2]
   188f0:	lsr	ip, r5, #24
   188f4:	str	r3, [sp, #144]	; 0x90
   188f8:	add	r1, sp, #264	; 0x108
   188fc:	ldrd	r2, [sp, #128]	; 0x80
   18900:	orr	lr, ip, r4, lsl #8
   18904:	strd	r8, [sp, #208]	; 0xd0
   18908:	str	lr, [sp, #148]	; 0x94
   1890c:	ldrd	r4, [sp, #144]	; 0x90
   18910:	ldrd	r0, [r1]
   18914:	eor	r3, r3, r9
   18918:	eor	r2, r2, r8
   1891c:	ldrd	r8, [sp, #168]	; 0xa8
   18920:	adds	r0, r0, r4
   18924:	adc	r1, r1, r5
   18928:	lsl	ip, r9, #1
   1892c:	orr	r7, ip, r8, lsr #31
   18930:	mov	r4, r0
   18934:	ldrd	r8, [sp, #248]	; 0xf8
   18938:	mov	r5, r1
   1893c:	ldrd	r0, [sp, #176]	; 0xb0
   18940:	strd	r4, [sp, #240]	; 0xf0
   18944:	eor	r4, r4, sl
   18948:	adds	r8, r8, r0
   1894c:	adc	r9, r9, r1
   18950:	add	r1, sp, #272	; 0x110
   18954:	strd	r8, [sp, #128]	; 0x80
   18958:	ldrd	r8, [sp, #168]	; 0xa8
   1895c:	eor	r5, r5, fp
   18960:	lsl	ip, r3, #1
   18964:	lsl	r0, r8, #1
   18968:	orr	r6, r0, r9, lsr #31
   1896c:	ldrd	r0, [r1]
   18970:	orr	fp, ip, r2, lsr #31
   18974:	lsr	ip, r4, #16
   18978:	lsl	r2, r2, #1
   1897c:	ldrd	r8, [sp, #136]	; 0x88
   18980:	orr	sl, r2, r3, lsr #31
   18984:	orr	r3, ip, r5, lsl #16
   18988:	adds	r0, r0, r6
   1898c:	str	r3, [sp, #136]	; 0x88
   18990:	lsr	r3, r5, #16
   18994:	adc	r1, r1, r7
   18998:	orr	r3, r3, r4, lsl #16
   1899c:	eor	r8, r8, r0
   189a0:	eor	r9, r9, r1
   189a4:	str	r3, [sp, #140]	; 0x8c
   189a8:	str	r9, [sp, #168]	; 0xa8
   189ac:	ldrd	r2, [sp, #200]	; 0xc8
   189b0:	str	r8, [sp, #172]	; 0xac
   189b4:	ldrd	r8, [sp, #136]	; 0x88
   189b8:	strd	r0, [sp, #248]	; 0xf8
   189bc:	adds	r2, r2, r8
   189c0:	adc	r3, r3, r9
   189c4:	ldrd	r8, [sp, #128]	; 0x80
   189c8:	strd	r2, [sp, #192]	; 0xc0
   189cc:	ldrd	r2, [sp, #168]	; 0xa8
   189d0:	adds	r0, r8, r2
   189d4:	adc	r1, r9, r3
   189d8:	mov	r2, r0
   189dc:	mov	r3, r1
   189e0:	add	r1, sp, #256	; 0x100
   189e4:	strd	r2, [sp, #200]	; 0xc8
   189e8:	ldrd	r4, [r1]
   189ec:	ldrd	r2, [sp, #96]	; 0x60
   189f0:	ldrd	r0, [sp, #184]	; 0xb8
   189f4:	adds	r2, r2, r4
   189f8:	eor	r9, r9, r1
   189fc:	adc	r3, r3, r5
   18a00:	ldrd	r4, [sp, #160]	; 0xa0
   18a04:	adds	r2, r2, sl
   18a08:	eor	r8, r8, r0
   18a0c:	adc	r3, r3, fp
   18a10:	lsl	ip, r9, #1
   18a14:	orr	lr, ip, r8, lsr #31
   18a18:	eor	r4, r4, r2
   18a1c:	eor	r5, r5, r3
   18a20:	lsl	r0, r8, #1
   18a24:	str	lr, [sp, #132]	; 0x84
   18a28:	mov	r8, r5
   18a2c:	orr	lr, r0, r9, lsr #31
   18a30:	mov	r9, r4
   18a34:	ldrd	r4, [sp, #224]	; 0xe0
   18a38:	str	lr, [sp, #128]	; 0x80
   18a3c:	adds	r4, r4, r8
   18a40:	adc	r5, r5, r9
   18a44:	strd	r4, [sp, #224]	; 0xe0
   18a48:	eor	r4, r4, sl
   18a4c:	eor	r5, r5, fp
   18a50:	mov	r0, r4
   18a54:	ldrd	sl, [sp, #216]	; 0xd8
   18a58:	mov	r1, r5
   18a5c:	ldrd	r4, [sp, #80]	; 0x50
   18a60:	lsr	ip, r0, #24
   18a64:	orr	lr, ip, r1, lsl #8
   18a68:	adds	r4, r4, sl
   18a6c:	adc	r5, r5, fp
   18a70:	mov	sl, r4
   18a74:	mov	fp, r5
   18a78:	ldrd	r4, [sp, #128]	; 0x80
   18a7c:	lsr	r1, r1, #24
   18a80:	add	ip, sp, #256	; 0x100
   18a84:	adds	r4, r4, sl
   18a88:	adc	r5, r5, fp
   18a8c:	mov	sl, r4
   18a90:	mov	fp, r5
   18a94:	ldrd	r4, [sp, #152]	; 0x98
   18a98:	str	lr, [sp, #176]	; 0xb0
   18a9c:	orr	lr, r1, r0, lsl #8
   18aa0:	eor	r4, r4, sl
   18aa4:	eor	r5, r5, fp
   18aa8:	str	lr, [sp, #180]	; 0xb4
   18aac:	strd	r4, [sp, #152]	; 0x98
   18ab0:	ldrd	r0, [sp, #152]	; 0x98
   18ab4:	ldrd	r4, [sp, #120]	; 0x78
   18ab8:	str	r1, [sp, #160]	; 0xa0
   18abc:	str	r0, [sp, #164]	; 0xa4
   18ac0:	ldrd	r0, [sp, #176]	; 0xb0
   18ac4:	adds	r4, r4, r2
   18ac8:	adc	r5, r5, r3
   18acc:	adds	r0, r0, r4
   18ad0:	adc	r1, r1, r5
   18ad4:	ldrd	r4, [sp, #200]	; 0xc8
   18ad8:	ldrd	r2, [sp, #160]	; 0xa0
   18adc:	strd	r0, [ip]
   18ae0:	eor	r4, r4, r6
   18ae4:	eor	r5, r5, r7
   18ae8:	mov	r6, r4
   18aec:	mov	r7, r5
   18af0:	ldrd	r4, [sp, #208]	; 0xd0
   18af4:	lsr	lr, r6, #24
   18af8:	adds	r4, r4, r2
   18afc:	adc	r5, r5, r3
   18b00:	mov	r2, r4
   18b04:	mov	r3, r5
   18b08:	mov	r4, r0
   18b0c:	mov	r5, r1
   18b10:	ldrd	r0, [sp, #128]	; 0x80
   18b14:	eor	r4, r4, r8
   18b18:	eor	r5, r5, r9
   18b1c:	eor	r0, r0, r2
   18b20:	ldrd	r8, [sp, #248]	; 0xf8
   18b24:	eor	r1, r1, r3
   18b28:	strd	r2, [sp, #216]	; 0xd8
   18b2c:	ldrd	r2, [sp, #72]	; 0x48
   18b30:	lsr	ip, r4, #16
   18b34:	adds	r2, r2, r8
   18b38:	adc	r3, r3, r9
   18b3c:	ldrd	r8, [sp, #144]	; 0x90
   18b40:	strd	r2, [sp, #128]	; 0x80
   18b44:	ldrd	r2, [sp, #88]	; 0x58
   18b48:	adds	r2, r2, sl
   18b4c:	adc	r3, r3, fp
   18b50:	mov	fp, r3
   18b54:	orr	r3, lr, r7, lsl #8
   18b58:	mov	sl, r2
   18b5c:	str	r3, [sp, #152]	; 0x98
   18b60:	ldrd	r2, [sp, #192]	; 0xc0
   18b64:	orr	lr, ip, r5, lsl #16
   18b68:	lsr	ip, r7, #24
   18b6c:	str	lr, [sp, #184]	; 0xb8
   18b70:	orr	lr, ip, r6, lsl #8
   18b74:	str	lr, [sp, #156]	; 0x9c
   18b78:	eor	r8, r8, r2
   18b7c:	eor	r9, r9, r3
   18b80:	mov	r2, r8
   18b84:	mov	r3, r9
   18b88:	ldrd	r6, [sp, #128]	; 0x80
   18b8c:	ldrd	r8, [sp, #152]	; 0x98
   18b90:	lsr	ip, r0, #24
   18b94:	orr	lr, ip, r1, lsl #8
   18b98:	adds	r6, r6, r8
   18b9c:	adc	r7, r7, r9
   18ba0:	mov	r8, r6
   18ba4:	mov	r9, r7
   18ba8:	ldrd	r6, [sp, #168]	; 0xa8
   18bac:	lsr	ip, r5, #16
   18bb0:	str	lr, [sp, #144]	; 0x90
   18bb4:	orr	lr, ip, r4, lsl #16
   18bb8:	strd	r8, [sp, #208]	; 0xd0
   18bbc:	str	lr, [sp, #188]	; 0xbc
   18bc0:	eor	r8, r8, r6
   18bc4:	eor	r9, r9, r7
   18bc8:	mov	r6, r8
   18bcc:	mov	r7, r9
   18bd0:	ldrd	r4, [sp, #224]	; 0xe0
   18bd4:	ldrd	r8, [sp, #184]	; 0xb8
   18bd8:	lsr	r1, r1, #24
   18bdc:	orr	lr, r1, r0, lsl #8
   18be0:	adds	r4, r4, r8
   18be4:	adc	r5, r5, r9
   18be8:	ldrd	r8, [sp, #176]	; 0xb0
   18bec:	str	lr, [sp, #148]	; 0x94
   18bf0:	lsl	lr, r3, #1
   18bf4:	eor	r8, r8, r4
   18bf8:	eor	r9, r9, r5
   18bfc:	strd	r4, [sp, #248]	; 0xf8
   18c00:	orr	lr, lr, r2, lsr #31
   18c04:	mov	r5, r9
   18c08:	mov	r4, r8
   18c0c:	lsl	r2, r2, #1
   18c10:	ldrd	r8, [sp, #144]	; 0x90
   18c14:	orr	r3, r2, r3, lsr #31
   18c18:	lsr	ip, r6, #16
   18c1c:	str	r3, [sp, #128]	; 0x80
   18c20:	lsl	r3, r5, #1
   18c24:	adds	r8, r8, sl
   18c28:	orr	r2, ip, r7, lsl #16
   18c2c:	orr	r3, r3, r4, lsr #31
   18c30:	adc	r9, r9, fp
   18c34:	ldrd	r0, [sp, #160]	; 0xa0
   18c38:	ldrd	sl, [sp, #240]	; 0xf0
   18c3c:	str	r2, [sp, #168]	; 0xa8
   18c40:	str	r3, [sp, #164]	; 0xa4
   18c44:	ldrd	r2, [sp, #96]	; 0x60
   18c48:	eor	r0, r0, r8
   18c4c:	eor	r1, r1, r9
   18c50:	adds	r2, r2, sl
   18c54:	adc	r3, r3, fp
   18c58:	str	lr, [sp, #132]	; 0x84
   18c5c:	ldrd	sl, [sp, #24]
   18c60:	strd	r8, [sp, #224]	; 0xe0
   18c64:	lsr	lr, r7, #16
   18c68:	ldrd	r8, [sp, #208]	; 0xd0
   18c6c:	orr	lr, lr, r6, lsl #16
   18c70:	ldrd	r6, [sp, #128]	; 0x80
   18c74:	adds	r8, r8, sl
   18c78:	adc	r9, r9, fp
   18c7c:	adds	r6, r6, r8
   18c80:	adc	r7, r7, r9
   18c84:	str	lr, [sp, #172]	; 0xac
   18c88:	ldrd	r8, [sp, #168]	; 0xa8
   18c8c:	strd	r6, [sp, #176]	; 0xb0
   18c90:	ldrd	r6, [sp, #200]	; 0xc8
   18c94:	lsl	r4, r4, #1
   18c98:	orr	lr, r4, r5, lsr #31
   18c9c:	adds	sl, r8, r6
   18ca0:	adc	fp, r9, r7
   18ca4:	str	lr, [sp, #160]	; 0xa0
   18ca8:	mov	r6, sl
   18cac:	mov	r7, fp
   18cb0:	ldrd	sl, [sp, #160]	; 0xa0
   18cb4:	lsr	ip, r0, #16
   18cb8:	orr	r4, ip, r1, lsl #16
   18cbc:	adds	sl, sl, r2
   18cc0:	adc	fp, fp, r3
   18cc4:	ldrd	r2, [sp, #152]	; 0x98
   18cc8:	lsr	r1, r1, #16
   18ccc:	orr	r5, r1, r0, lsl #16
   18cd0:	eor	r3, r3, r7
   18cd4:	strd	r6, [sp, #200]	; 0xc8
   18cd8:	eor	r2, r2, r6
   18cdc:	ldrd	r0, [sp, #176]	; 0xb0
   18ce0:	mov	r6, r8
   18ce4:	mov	r7, r9
   18ce8:	eor	r6, r6, sl
   18cec:	eor	r7, r7, fp
   18cf0:	strd	sl, [sp, #208]	; 0xd0
   18cf4:	ldrd	sl, [sp, #216]	; 0xd8
   18cf8:	eor	r0, r0, r4
   18cfc:	eor	r1, r1, r5
   18d00:	adds	sl, sl, r4
   18d04:	str	r1, [sp, #96]	; 0x60
   18d08:	str	r0, [sp, #100]	; 0x64
   18d0c:	lsl	r1, r3, #1
   18d10:	adc	fp, fp, r5
   18d14:	str	r7, [sp, #24]
   18d18:	orr	r5, r1, r2, lsr #31
   18d1c:	str	r6, [sp, #28]
   18d20:	ldrd	r0, [sp, #248]	; 0xf8
   18d24:	ldrd	r6, [sp, #96]	; 0x60
   18d28:	lsl	r2, r2, #1
   18d2c:	orr	r4, r2, r3, lsr #31
   18d30:	adds	r6, r6, r0
   18d34:	adc	r7, r7, r1
   18d38:	ldrd	r0, [sp, #24]
   18d3c:	mov	r8, r6
   18d40:	ldrd	r2, [sp, #224]	; 0xe0
   18d44:	adds	r0, r0, sl
   18d48:	adc	r1, r1, fp
   18d4c:	mov	r9, r7
   18d50:	mov	r6, r0
   18d54:	mov	r7, r1
   18d58:	ldrd	r0, [sp, #56]	; 0x38
   18d5c:	strd	sl, [sp, #168]	; 0xa8
   18d60:	strd	r8, [sp, #224]	; 0xe0
   18d64:	adds	r0, r0, r2
   18d68:	adc	r1, r1, r3
   18d6c:	mov	sl, r0
   18d70:	mov	fp, r1
   18d74:	ldrd	r0, [sp, #128]	; 0x80
   18d78:	strd	r6, [sp, #216]	; 0xd8
   18d7c:	eor	r0, r0, r8
   18d80:	eor	r1, r1, r9
   18d84:	ldrd	r8, [sp, #160]	; 0xa0
   18d88:	lsr	lr, r0, #24
   18d8c:	orr	lr, lr, r1, lsl #8
   18d90:	eor	r8, r8, r6
   18d94:	mov	r2, r8
   18d98:	eor	r9, r9, r7
   18d9c:	adds	r8, sl, r4
   18da0:	mov	r3, r9
   18da4:	adc	r9, fp, r5
   18da8:	mov	sl, r8
   18dac:	mov	fp, r9
   18db0:	ldrd	r8, [sp, #184]	; 0xb8
   18db4:	strd	sl, [sp, #160]	; 0xa0
   18db8:	lsr	ip, r2, #24
   18dbc:	eor	sl, sl, r8
   18dc0:	eor	fp, fp, r9
   18dc4:	mov	r6, sl
   18dc8:	ldrd	r8, [sp, #176]	; 0xb0
   18dcc:	mov	r7, fp
   18dd0:	ldrd	sl, [sp, #48]	; 0x30
   18dd4:	str	lr, [sp, #128]	; 0x80
   18dd8:	lsr	r1, r1, #24
   18ddc:	orr	lr, ip, r3, lsl #8
   18de0:	adds	r8, r8, sl
   18de4:	str	lr, [sp, #56]	; 0x38
   18de8:	lsr	r3, r3, #24
   18dec:	orr	lr, r1, r0, lsl #8
   18df0:	adc	r9, r9, fp
   18df4:	str	lr, [sp, #132]	; 0x84
   18df8:	ldrd	sl, [sp, #208]	; 0xd0
   18dfc:	ldrd	r0, [sp, #64]	; 0x40
   18e00:	orr	r3, r3, r2, lsl #8
   18e04:	str	r3, [sp, #60]	; 0x3c
   18e08:	ldrd	r2, [sp, #128]	; 0x80
   18e0c:	adds	r0, r0, sl
   18e10:	adc	r1, r1, fp
   18e14:	adds	r2, r2, r8
   18e18:	adc	r3, r3, r9
   18e1c:	mov	r8, r2
   18e20:	mov	r9, r3
   18e24:	ldrd	r2, [sp, #56]	; 0x38
   18e28:	str	r7, [sp, #152]	; 0x98
   18e2c:	str	r6, [sp, #156]	; 0x9c
   18e30:	adds	r2, r2, r0
   18e34:	adc	r3, r3, r1
   18e38:	mov	sl, r2
   18e3c:	mov	fp, r3
   18e40:	ldrd	r0, [sp, #192]	; 0xc0
   18e44:	ldrd	r2, [sp, #152]	; 0x98
   18e48:	strd	sl, [sp, #176]	; 0xb0
   18e4c:	strd	r8, [sp, #184]	; 0xb8
   18e50:	adds	r0, r0, r2
   18e54:	adc	r1, r1, r3
   18e58:	mov	r2, r0
   18e5c:	mov	r3, r1
   18e60:	ldrd	r0, [sp, #96]	; 0x60
   18e64:	strd	r2, [sp, #192]	; 0xc0
   18e68:	eor	r2, r2, r4
   18e6c:	eor	r0, r0, r8
   18e70:	eor	r1, r1, r9
   18e74:	mov	r6, r0
   18e78:	mov	r7, r1
   18e7c:	ldrd	r0, [sp, #24]
   18e80:	eor	r3, r3, r5
   18e84:	ldrd	r4, [sp, #144]	; 0x90
   18e88:	eor	r0, r0, sl
   18e8c:	eor	r1, r1, fp
   18e90:	ldrd	sl, [sp, #168]	; 0xa8
   18e94:	lsr	lr, r0, #16
   18e98:	lsr	r9, r2, #24
   18e9c:	eor	r4, r4, sl
   18ea0:	eor	r5, r5, fp
   18ea4:	lsr	ip, r6, #16
   18ea8:	strd	r4, [sp, #96]	; 0x60
   18eac:	mov	r4, lr
   18eb0:	orr	fp, r4, r1, lsl #16
   18eb4:	ldr	lr, [sp, #100]	; 0x64
   18eb8:	str	fp, [sp, #24]
   18ebc:	orr	fp, r9, r3, lsl #8
   18ec0:	ldrd	r4, [sp, #160]	; 0xa0
   18ec4:	str	fp, [sp, #64]	; 0x40
   18ec8:	ldrd	sl, [sp, #120]	; 0x78
   18ecc:	orr	ip, ip, r7, lsl #16
   18ed0:	str	ip, [sp, #48]	; 0x30
   18ed4:	adds	r4, r4, sl
   18ed8:	mov	sl, r4
   18edc:	lsr	ip, r7, #16
   18ee0:	ldr	r4, [sp, #96]	; 0x60
   18ee4:	orr	r7, ip, r6, lsl #16
   18ee8:	adc	r5, r5, fp
   18eec:	str	r7, [sp, #52]	; 0x34
   18ef0:	lsl	lr, lr, #1
   18ef4:	lsr	r1, r1, #16
   18ef8:	orr	r9, lr, r4, lsr #31
   18efc:	mov	fp, r5
   18f00:	lsl	lr, r4, #1
   18f04:	orr	r7, r1, r0, lsl #16
   18f08:	ldrd	r4, [sp, #224]	; 0xe0
   18f0c:	ldrd	r0, [sp, #48]	; 0x30
   18f10:	str	r7, [sp, #28]
   18f14:	ldrd	r6, [sp, #216]	; 0xd8
   18f18:	adds	r4, r4, r0
   18f1c:	adc	r5, r5, r1
   18f20:	ldrd	r0, [sp, #24]
   18f24:	lsr	r3, r3, #24
   18f28:	orr	r3, r3, r2, lsl #8
   18f2c:	adds	r6, r6, r0
   18f30:	str	r3, [sp, #68]	; 0x44
   18f34:	adc	r7, r7, r1
   18f38:	ldrd	r0, [sp, #64]	; 0x40
   18f3c:	ldr	r3, [sp, #100]	; 0x64
   18f40:	strd	r4, [sp, #160]	; 0xa0
   18f44:	adds	r0, r0, sl
   18f48:	adc	r1, r1, fp
   18f4c:	orr	r8, lr, r3, lsr #31
   18f50:	strd	r0, [sp, #168]	; 0xa8
   18f54:	add	r1, sp, #256	; 0x100
   18f58:	ldrd	r2, [sp, #88]	; 0x58
   18f5c:	ldrd	sl, [r1]
   18f60:	ldrd	r0, [sp, #136]	; 0x88
   18f64:	strd	r6, [sp, #144]	; 0x90
   18f68:	adds	r2, r2, sl
   18f6c:	adc	r3, r3, fp
   18f70:	adds	r2, r2, r8
   18f74:	adc	r3, r3, r9
   18f78:	eor	r0, r0, r2
   18f7c:	eor	r1, r1, r3
   18f80:	mov	r4, r0
   18f84:	mov	r0, r1
   18f88:	mov	r1, r4
   18f8c:	ldrd	r4, [sp, #200]	; 0xc8
   18f90:	adds	r4, r4, r0
   18f94:	adc	r5, r5, r1
   18f98:	eor	r6, r8, r4
   18f9c:	eor	r7, r9, r5
   18fa0:	ldrd	r8, [sp, #40]	; 0x28
   18fa4:	lsr	ip, r6, #24
   18fa8:	orr	sl, ip, r7, lsl #8
   18fac:	adds	r8, r8, r2
   18fb0:	lsr	ip, r7, #24
   18fb4:	orr	fp, ip, r6, lsl #8
   18fb8:	adc	r9, r9, r3
   18fbc:	adds	r6, r8, sl
   18fc0:	adc	r7, r9, fp
   18fc4:	mov	r8, r6
   18fc8:	mov	r9, r7
   18fcc:	ldrd	r2, [sp, #152]	; 0x98
   18fd0:	ldrd	r6, [sp, #168]	; 0xa8
   18fd4:	strd	r8, [sp, #152]	; 0x98
   18fd8:	eor	r2, r2, r6
   18fdc:	eor	r3, r3, r7
   18fe0:	mov	r6, r8
   18fe4:	mov	r7, r9
   18fe8:	eor	r6, r6, r0
   18fec:	eor	r7, r7, r1
   18ff0:	lsr	lr, r2, #16
   18ff4:	orr	lr, lr, r3, lsl #16
   18ff8:	lsr	r3, r3, #16
   18ffc:	lsr	ip, r6, #16
   19000:	lsr	r1, r7, #16
   19004:	orr	r3, r3, r2, lsl #16
   19008:	str	lr, [sp, #88]	; 0x58
   1900c:	str	r3, [sp, #92]	; 0x5c
   19010:	orr	lr, ip, r7, lsl #16
   19014:	orr	r3, r1, r6, lsl #16
   19018:	str	lr, [sp, #96]	; 0x60
   1901c:	str	r3, [sp, #100]	; 0x64
   19020:	ldrd	r2, [sp, #192]	; 0xc0
   19024:	ldrd	r0, [sp, #88]	; 0x58
   19028:	ldrd	r8, [sp, #128]	; 0x80
   1902c:	ldrd	r6, [sp, #144]	; 0x90
   19030:	adds	r2, r2, r0
   19034:	adc	r3, r3, r1
   19038:	mov	r0, r2
   1903c:	mov	r1, r3
   19040:	ldrd	r2, [sp, #96]	; 0x60
   19044:	strd	r0, [sp, #128]	; 0x80
   19048:	adds	r2, r2, r4
   1904c:	adc	r3, r3, r5
   19050:	ldrd	r4, [sp, #160]	; 0xa0
   19054:	strd	r2, [sp, #136]	; 0x88
   19058:	eor	r8, r8, r4
   1905c:	eor	r9, r9, r5
   19060:	ldrd	r4, [sp, #56]	; 0x38
   19064:	mov	r2, r8
   19068:	mov	r3, r9
   1906c:	eor	r4, r4, r6
   19070:	eor	r5, r5, r7
   19074:	mov	r8, r4
   19078:	mov	r9, r5
   1907c:	ldrd	r4, [sp, #64]	; 0x40
   19080:	lsl	lr, r3, #1
   19084:	orr	lr, lr, r2, lsr #31
   19088:	eor	r4, r4, r0
   1908c:	eor	r5, r5, r1
   19090:	mov	r7, r5
   19094:	mov	r6, r4
   19098:	ldrd	r4, [sp, #136]	; 0x88
   1909c:	lsl	r0, r7, #1
   190a0:	lsl	r2, r2, #1
   190a4:	eor	r5, r5, fp
   190a8:	eor	r4, r4, sl
   190ac:	orr	fp, r0, r6, lsr #31
   190b0:	lsl	r1, r5, #1
   190b4:	str	fp, [sp, #68]	; 0x44
   190b8:	orr	r3, r2, r3, lsr #31
   190bc:	orr	fp, r1, r4, lsr #31
   190c0:	str	fp, [sp, #124]	; 0x7c
   190c4:	str	r3, [sp, #56]	; 0x38
   190c8:	ldrd	sl, [sp, #184]	; 0xb8
   190cc:	ldrd	r2, [sp]
   190d0:	ldrd	r0, [sp, #8]
   190d4:	lsl	ip, r9, #1
   190d8:	adds	r2, r2, sl
   190dc:	adc	r3, r3, fp
   190e0:	ldrd	sl, [sp, #176]	; 0xb0
   190e4:	strd	r2, [sp]
   190e8:	ldrd	r2, [sp, #168]	; 0xa8
   190ec:	adds	r0, r0, sl
   190f0:	adc	r1, r1, fp
   190f4:	ldrd	sl, [sp, #72]	; 0x48
   190f8:	str	lr, [sp, #60]	; 0x3c
   190fc:	orr	lr, ip, r8, lsr #31
   19100:	adds	sl, sl, r2
   19104:	str	lr, [sp, #44]	; 0x2c
   19108:	lsl	lr, r8, #1
   1910c:	adc	fp, fp, r3
   19110:	lsl	r6, r6, #1
   19114:	orr	r3, lr, r9, lsr #31
   19118:	str	r3, [sp, #40]	; 0x28
   1911c:	orr	r3, r6, r7, lsr #31
   19120:	str	r3, [sp, #64]	; 0x40
   19124:	ldrd	r6, [sp, #32]
   19128:	ldrd	r2, [sp, #152]	; 0x98
   1912c:	ldrd	r8, [sp, #56]	; 0x38
   19130:	lsl	ip, r4, #1
   19134:	adds	r6, r6, r2
   19138:	adc	r7, r7, r3
   1913c:	adds	r8, r8, r0
   19140:	orr	r3, ip, r5, lsr #31
   19144:	adc	r9, r9, r1
   19148:	str	r3, [sp, #120]	; 0x78
   1914c:	ldrd	r0, [sp]
   19150:	ldrd	r2, [sp, #64]	; 0x40
   19154:	ldrd	r4, [sp, #120]	; 0x78
   19158:	adds	r0, r0, r2
   1915c:	adc	r1, r1, r3
   19160:	mov	r2, r0
   19164:	mov	r3, r1
   19168:	ldrd	r0, [sp, #40]	; 0x28
   1916c:	adds	r0, r0, r6
   19170:	adc	r1, r1, r7
   19174:	adds	r4, r4, sl
   19178:	adc	r5, r5, fp
   1917c:	strd	r4, [sp, #72]	; 0x48
   19180:	ldrd	r6, [sp, #88]	; 0x58
   19184:	ldrd	sl, [sp, #48]	; 0x30
   19188:	strd	r0, [sp, #152]	; 0x98
   1918c:	eor	r6, r6, r0
   19190:	eor	r7, r7, r1
   19194:	ldrd	r0, [sp, #72]	; 0x48
   19198:	strd	r6, [sp, #168]	; 0xa8
   1919c:	ldrd	r6, [sp, #96]	; 0x60
   191a0:	ldrd	r4, [sp, #24]
   191a4:	eor	r0, r0, sl
   191a8:	eor	r6, r6, r8
   191ac:	eor	r7, r7, r9
   191b0:	str	r7, [sp]
   191b4:	str	r6, [sp, #4]
   191b8:	eor	r1, r1, fp
   191bc:	ldrd	r6, [sp, #128]	; 0x80
   191c0:	ldrd	sl, [sp]
   191c4:	eor	r4, r4, r2
   191c8:	eor	r5, r5, r3
   191cc:	adds	r6, r6, sl
   191d0:	str	r5, [sp, #24]
   191d4:	str	r4, [sp, #28]
   191d8:	adc	r7, r7, fp
   191dc:	ldrd	r4, [sp, #136]	; 0x88
   191e0:	ldrd	sl, [sp, #24]
   191e4:	strd	r6, [sp, #88]	; 0x58
   191e8:	str	r1, [sp, #48]	; 0x30
   191ec:	adds	r4, r4, sl
   191f0:	adc	r5, r5, fp
   191f4:	ldrd	sl, [sp, #56]	; 0x38
   191f8:	strd	r4, [sp, #96]	; 0x60
   191fc:	str	r0, [sp, #52]	; 0x34
   19200:	eor	sl, sl, r6
   19204:	eor	fp, fp, r7
   19208:	mov	r6, sl
   1920c:	mov	r7, fp
   19210:	ldrd	sl, [sp, #64]	; 0x40
   19214:	lsr	ip, r6, #24
   19218:	ldrd	r0, [sp, #144]	; 0x90
   1921c:	eor	sl, sl, r4
   19220:	eor	fp, fp, r5
   19224:	mov	r5, fp
   19228:	mov	fp, r7
   1922c:	orr	r7, ip, r7, lsl #8
   19230:	mov	r4, sl
   19234:	lsr	lr, sl, #24
   19238:	str	r7, [sp, #8]
   1923c:	mov	sl, r6
   19240:	ldrd	r6, [sp, #80]	; 0x50
   19244:	lsr	ip, fp, #24
   19248:	strd	sl, [sp, #64]	; 0x40
   1924c:	adds	r6, r6, r8
   19250:	adc	r7, r7, r9
   19254:	ldrd	r8, [sp, #48]	; 0x30
   19258:	ldrd	sl, [sp, #120]	; 0x78
   1925c:	orr	lr, lr, r5, lsl #8
   19260:	adds	r0, r0, r8
   19264:	adc	r1, r1, r9
   19268:	ldrd	r8, [sp, #104]	; 0x68
   1926c:	eor	sl, sl, r0
   19270:	eor	fp, fp, r1
   19274:	adds	r8, r8, r2
   19278:	adc	r9, r9, r3
   1927c:	str	lr, [sp, #32]
   19280:	lsr	lr, r5, #24
   19284:	lsr	r5, sl, #24
   19288:	strd	r6, [sp, #128]	; 0x80
   1928c:	orr	r7, r5, fp, lsl #8
   19290:	strd	r0, [sp, #80]	; 0x50
   19294:	str	r7, [sp, #56]	; 0x38
   19298:	strd	r8, [sp, #120]	; 0x78
   1929c:	ldrd	r8, [sp, #16]
   192a0:	ldrd	r2, [sp, #152]	; 0x98
   192a4:	ldrd	r6, [sp, #40]	; 0x28
   192a8:	mov	r0, sl
   192ac:	adds	r8, r8, r2
   192b0:	adc	r9, r9, r3
   192b4:	ldrd	r2, [sp, #168]	; 0xa8
   192b8:	strd	r8, [sp, #16]
   192bc:	lsr	r1, fp, #24
   192c0:	mov	r8, r3
   192c4:	mov	r9, r2
   192c8:	ldrd	r2, [sp, #160]	; 0xa0
   192cc:	ldrd	sl, [sp, #72]	; 0x48
   192d0:	orr	lr, lr, r4, lsl #8
   192d4:	adds	r2, r2, r8
   192d8:	adc	r3, r3, r9
   192dc:	eor	r6, r6, r2
   192e0:	eor	r7, r7, r3
   192e4:	lsr	r5, r6, #24
   192e8:	strd	r2, [sp, #104]	; 0x68
   192ec:	mov	r3, r7
   192f0:	orr	r7, r5, r7, lsl #8
   192f4:	mov	r2, r6
   192f8:	str	r7, [sp, #40]	; 0x28
   192fc:	ldrd	r6, [sp, #112]	; 0x70
   19300:	str	lr, [sp, #36]	; 0x24
   19304:	orr	lr, r1, r0, lsl #8
   19308:	adds	sl, sl, r6
   1930c:	mov	r6, sl
   19310:	ldr	sl, [sp, #64]	; 0x40
   19314:	adc	fp, fp, r7
   19318:	mov	r7, fp
   1931c:	orr	fp, ip, sl, lsl #8
   19320:	str	fp, [sp, #12]
   19324:	ldrd	r0, [sp, #128]	; 0x80
   19328:	ldrd	sl, [sp, #8]
   1932c:	lsr	r3, r3, #24
   19330:	orr	r3, r3, r2, lsl #8
   19334:	adds	sl, sl, r0
   19338:	adc	fp, fp, r1
   1933c:	str	r3, [sp, #44]	; 0x2c
   19340:	ldrd	r0, [sp, #32]
   19344:	ldrd	r2, [sp, #120]	; 0x78
   19348:	str	lr, [sp, #60]	; 0x3c
   1934c:	ldrd	r4, [sp, #16]
   19350:	adds	r0, r0, r2
   19354:	adc	r1, r1, r3
   19358:	add	r3, sp, #432	; 0x1b0
   1935c:	strd	sl, [sp, #64]	; 0x40
   19360:	strd	r0, [r3]
   19364:	ldrd	r2, [sp, #56]	; 0x38
   19368:	add	r1, sp, #440	; 0x1b8
   1936c:	adds	r2, r2, r6
   19370:	adc	r3, r3, r7
   19374:	ldrd	r6, [sp]
   19378:	strd	r2, [r1]
   1937c:	ldrd	r0, [sp, #40]	; 0x28
   19380:	add	r3, sp, #448	; 0x1c0
   19384:	mov	r2, sl
   19388:	adds	r4, r4, r0
   1938c:	adc	r5, r5, r1
   19390:	ldrd	r0, [sp, #24]
   19394:	strd	r4, [r3]
   19398:	mov	r3, fp
   1939c:	eor	r3, r3, r7
   193a0:	mov	r7, r3
   193a4:	add	r3, sp, #432	; 0x1b0
   193a8:	eor	r2, r2, r6
   193ac:	ldrd	r4, [r3]
   193b0:	add	r3, sp, #440	; 0x1b8
   193b4:	mov	r6, r2
   193b8:	eor	r4, r4, r0
   193bc:	eor	r5, r5, r1
   193c0:	ldrd	r0, [r3]
   193c4:	ldrd	r2, [sp, #48]	; 0x30
   193c8:	eor	r1, r1, r3
   193cc:	add	r3, sp, #448	; 0x1c0
   193d0:	eor	r0, r0, r2
   193d4:	ldrd	r2, [r3]
   193d8:	lsr	lr, r0, #16
   193dc:	orr	lr, lr, r1, lsl #16
   193e0:	eor	r2, r2, r8
   193e4:	eor	r3, r3, r9
   193e8:	lsr	r9, r6, #16
   193ec:	lsr	ip, r2, #16
   193f0:	orr	r9, r9, r7, lsl #16
   193f4:	str	r9, [sp]
   193f8:	lsr	r7, r7, #16
   193fc:	str	lr, [sp, #24]
   19400:	orr	lr, ip, r3, lsl #16
   19404:	lsr	r8, r4, #16
   19408:	str	lr, [sp, #48]	; 0x30
   1940c:	orr	lr, r7, r6, lsl #16
   19410:	orr	r9, r8, r5, lsl #16
   19414:	str	lr, [sp, #4]
   19418:	str	r9, [sp, #16]
   1941c:	ldrd	r6, [sp, #88]	; 0x58
   19420:	ldrd	r8, [sp]
   19424:	lsr	r3, r3, #16
   19428:	orr	r3, r3, r2, lsl #16
   1942c:	adds	r6, r6, r8
   19430:	lsr	r5, r5, #16
   19434:	adc	r7, r7, r9
   19438:	orr	lr, r5, r4, lsl #16
   1943c:	str	r3, [sp, #52]	; 0x34
   19440:	add	r3, sp, #504	; 0x1f8
   19444:	str	lr, [sp, #20]
   19448:	strd	r6, [r3]
   1944c:	ldrd	r4, [sp, #96]	; 0x60
   19450:	ldrd	r6, [sp, #16]
   19454:	lsr	r1, r1, #16
   19458:	orr	lr, r1, r0, lsl #16
   1945c:	adds	r4, r4, r6
   19460:	adc	r5, r5, r7
   19464:	add	r3, sp, #512	; 0x200
   19468:	str	lr, [sp, #28]
   1946c:	strd	r4, [r3]
   19470:	ldrd	r0, [sp, #80]	; 0x50
   19474:	ldrd	r4, [sp, #24]
   19478:	ldrd	r2, [sp, #104]	; 0x68
   1947c:	add	ip, sp, #496	; 0x1f0
   19480:	adds	r0, r0, r4
   19484:	adc	r1, r1, r5
   19488:	ldrd	r4, [sp, #48]	; 0x30
   1948c:	ldrd	r6, [sp, #8]
   19490:	adds	r2, r2, r4
   19494:	adc	r3, r3, r5
   19498:	strd	r2, [ip]
   1949c:	add	r3, sp, #504	; 0x1f8
   194a0:	ldrd	r8, [r3]
   194a4:	add	r3, sp, #512	; 0x200
   194a8:	eor	r8, r8, r6
   194ac:	eor	r9, r9, r7
   194b0:	ldrd	r6, [r3]
   194b4:	ldrd	r2, [sp, #56]	; 0x38
   194b8:	mov	r4, r8
   194bc:	mov	r5, r9
   194c0:	ldrd	r8, [sp, #32]
   194c4:	strd	r0, [sp, #56]	; 0x38
   194c8:	eor	r0, r0, r2
   194cc:	eor	r1, r1, r3
   194d0:	eor	r6, r6, r8
   194d4:	eor	r7, r7, r9
   194d8:	mov	fp, r1
   194dc:	ldrd	r8, [ip]
   194e0:	mov	sl, r0
   194e4:	ldrd	r0, [sp, #40]	; 0x28
   194e8:	strd	sl, [sp, #32]
   194ec:	lsl	lr, fp, #1
   194f0:	eor	r8, r8, r0
   194f4:	eor	r9, r9, r1
   194f8:	mov	sl, lr
   194fc:	strd	r8, [sp, #8]
   19500:	ldr	r1, [sp, #8]
   19504:	ldr	lr, [sp, #32]
   19508:	lsl	r0, r5, #1
   1950c:	lsl	r3, r4, #1
   19510:	lsl	ip, r1, #1
   19514:	orr	r4, r0, r4, lsr #31
   19518:	ldrd	r0, [sp, #32]
   1951c:	lsl	lr, lr, #1
   19520:	mov	fp, lr
   19524:	lsl	r9, r7, #1
   19528:	lsl	r8, r6, #1
   1952c:	ldr	lr, [sp, #12]
   19530:	orr	r5, r3, r5, lsr #31
   19534:	orr	r9, r9, r6, lsr #31
   19538:	ldrd	r2, [sp, #8]
   1953c:	orr	r6, fp, r1, lsr #31
   19540:	orr	r8, r8, r7, lsr #31
   19544:	orr	r7, sl, r0, lsr #31
   19548:	ldrd	sl, [sp, #64]	; 0x40
   1954c:	lsl	lr, lr, #1
   19550:	orr	ip, ip, r3, lsr #31
   19554:	orr	lr, lr, r2, lsr #31
   19558:	mov	r3, fp
   1955c:	mov	r2, sl
   19560:	add	r1, sp, #424	; 0x1a8
   19564:	str	r5, [sp, #464]	; 0x1d0
   19568:	strd	r2, [r1]
   1956c:	ldrd	r2, [sp]
   19570:	add	r1, sp, #544	; 0x220
   19574:	str	r4, [sp, #468]	; 0x1d4
   19578:	strd	r2, [r1]
   1957c:	ldrd	r2, [sp, #16]
   19580:	add	r1, sp, #520	; 0x208
   19584:	ldrd	r4, [sp, #24]
   19588:	strd	r2, [r1]
   1958c:	ldrd	r0, [sp, #56]	; 0x38
   19590:	add	r3, sp, #488	; 0x1e8
   19594:	str	ip, [sp, #456]	; 0x1c8
   19598:	strd	r0, [r3]
   1959c:	add	r3, sp, #528	; 0x210
   195a0:	str	r9, [sp, #476]	; 0x1dc
   195a4:	strd	r4, [r3]
   195a8:	ldrd	r4, [sp, #48]	; 0x30
   195ac:	add	r3, sp, #536	; 0x218
   195b0:	str	r8, [sp, #472]	; 0x1d8
   195b4:	strd	r4, [r3]
   195b8:	str	r7, [sp, #484]	; 0x1e4
   195bc:	str	r6, [sp, #480]	; 0x1e0
   195c0:	str	lr, [sp, #460]	; 0x1cc
   195c4:	ldr	r3, [sp, #236]	; 0xec
   195c8:	ldr	r2, [sp, #280]	; 0x118
   195cc:	ldr	ip, [sp, #284]	; 0x11c
   195d0:	b	195dc <__assert_fail@plt+0x8450>
   195d4:	ldrd	sl, [r2, #8]!
   195d8:	ldrd	r0, [r2, #64]	; 0x40
   195dc:	ldrd	r4, [r3, #8]
   195e0:	eor	r0, r0, sl
   195e4:	eor	r1, r1, fp
   195e8:	eor	r0, r0, r4
   195ec:	eor	r1, r1, r5
   195f0:	strd	r0, [r3, #8]!
   195f4:	cmp	r3, ip
   195f8:	bne	195d4 <__assert_fail@plt+0x8448>
   195fc:	add	sp, sp, #556	; 0x22c
   19600:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19604:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19608:	mov	r4, r0
   1960c:	ldr	r0, [r0, #224]	; 0xe0
   19610:	mov	r5, r2
   19614:	rsb	r8, r0, #128	; 0x80
   19618:	cmp	r8, r2
   1961c:	mov	r6, r1
   19620:	addcs	r7, r4, #96	; 0x60
   19624:	bcc	19648 <__assert_fail@plt+0x84bc>
   19628:	mov	r2, r5
   1962c:	mov	r1, r6
   19630:	add	r0, r7, r0
   19634:	bl	10f34 <memcpy@plt>
   19638:	ldr	r3, [r4, #224]	; 0xe0
   1963c:	add	r5, r3, r5
   19640:	str	r5, [r4, #224]	; 0xe0
   19644:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19648:	mov	r3, #0
   1964c:	add	r7, r4, #96	; 0x60
   19650:	str	r3, [r4, #224]	; 0xe0
   19654:	mov	r2, r8
   19658:	add	r0, r7, r0
   1965c:	bl	10f34 <memcpy@plt>
   19660:	ldrd	r2, [r4, #64]	; 0x40
   19664:	ldrd	r0, [r4, #72]	; 0x48
   19668:	sub	r5, r5, r8
   1966c:	adds	r2, r2, #128	; 0x80
   19670:	adc	r3, r3, #0
   19674:	cmp	r3, #0
   19678:	cmpeq	r2, #127	; 0x7f
   1967c:	movls	ip, #1
   19680:	movhi	ip, #0
   19684:	strd	r2, [r4, #64]	; 0x40
   19688:	add	r6, r6, r8
   1968c:	adds	r2, r0, ip
   19690:	adc	r3, r1, #0
   19694:	mov	r0, r4
   19698:	mov	r1, r7
   1969c:	strd	r2, [r4, #72]	; 0x48
   196a0:	bl	12e50 <__assert_fail@plt+0x1cc4>
   196a4:	cmp	r5, #128	; 0x80
   196a8:	ldrls	r0, [r4, #224]	; 0xe0
   196ac:	bls	19628 <__assert_fail@plt+0x849c>
   196b0:	mov	r9, r5
   196b4:	mov	r8, r6
   196b8:	ldrd	r2, [r4, #64]	; 0x40
   196bc:	ldrd	r0, [r4, #72]	; 0x48
   196c0:	sub	r9, r9, #128	; 0x80
   196c4:	adds	r2, r2, #128	; 0x80
   196c8:	adc	r3, r3, #0
   196cc:	cmp	r3, #0
   196d0:	cmpeq	r2, #127	; 0x7f
   196d4:	movls	ip, #1
   196d8:	movhi	ip, #0
   196dc:	adds	r0, r0, ip
   196e0:	adc	r1, r1, #0
   196e4:	strd	r2, [r4, #64]	; 0x40
   196e8:	strd	r0, [r4, #72]	; 0x48
   196ec:	mov	r1, r8
   196f0:	mov	r0, r4
   196f4:	bl	12e50 <__assert_fail@plt+0x1cc4>
   196f8:	cmp	r9, #128	; 0x80
   196fc:	add	r8, r8, #128	; 0x80
   19700:	bhi	196b8 <__assert_fail@plt+0x852c>
   19704:	sub	r3, r5, #129	; 0x81
   19708:	bic	r2, r3, #127	; 0x7f
   1970c:	mov	r3, r2
   19710:	sub	r5, r5, #128	; 0x80
   19714:	add	r2, r2, #128	; 0x80
   19718:	ldr	r0, [r4, #224]	; 0xe0
   1971c:	sub	r5, r5, r3
   19720:	add	r6, r6, r2
   19724:	b	19628 <__assert_fail@plt+0x849c>
   19728:	push	{r4, r5, r6, r7, lr}
   1972c:	mov	r2, #240	; 0xf0
   19730:	mov	r6, r0
   19734:	sub	sp, sp, #12
   19738:	mov	r7, r1
   1973c:	mov	r1, #0
   19740:	bl	110b4 <memset@plt>
   19744:	sub	r2, r6, #8
   19748:	ldr	r3, [pc, #112]	; 197c0 <__assert_fail@plt+0x8634>
   1974c:	add	r1, pc, #100	; 0x64
   19750:	ldrd	r0, [r1]
   19754:	mov	lr, r2
   19758:	add	ip, r6, #56	; 0x38
   1975c:	b	19764 <__assert_fail@plt+0x85d8>
   19760:	ldrd	r0, [r3, #8]!
   19764:	strd	r0, [lr, #8]!
   19768:	cmp	lr, ip
   1976c:	bne	19760 <__assert_fail@plt+0x85d4>
   19770:	mov	ip, r7
   19774:	ldr	r0, [ip]
   19778:	ldr	r1, [ip, #4]
   1977c:	mov	r3, sp
   19780:	ldrd	r4, [r2, #8]
   19784:	stmia	r3!, {r0, r1}
   19788:	ldrd	r0, [sp]
   1978c:	add	ip, ip, #8
   19790:	eor	r4, r4, r0
   19794:	eor	r5, r5, r1
   19798:	strd	r4, [r2, #8]!
   1979c:	cmp	r2, lr
   197a0:	bne	19774 <__assert_fail@plt+0x85e8>
   197a4:	ldrb	r3, [r7]
   197a8:	mov	r0, #0
   197ac:	str	r3, [r6, #228]	; 0xe4
   197b0:	add	sp, sp, #12
   197b4:	pop	{r4, r5, r6, r7, pc}
   197b8:	vtbl.8	d12, {d12-d13}, d8
   197bc:	bvs	293160 <optarg@@GLIBC_2.4+0x262fd8>
   197c0:	andeq	lr, r1, r0, asr #22
   197c4:	sub	r3, r1, #1
   197c8:	cmp	r3, #63	; 0x3f
   197cc:	bhi	19848 <__assert_fail@plt+0x86bc>
   197d0:	push	{lr}		; (str lr, [sp, #-4]!)
   197d4:	sub	sp, sp, #68	; 0x44
   197d8:	mov	r3, #0
   197dc:	mov	r2, r1
   197e0:	mov	ip, #1
   197e4:	mov	r1, sp
   197e8:	strb	r2, [sp]
   197ec:	str	r3, [sp, #22]
   197f0:	strb	r3, [sp, #1]
   197f4:	str	r3, [sp, #4]
   197f8:	str	r3, [sp, #8]
   197fc:	str	r3, [sp, #12]
   19800:	strb	r3, [sp, #16]
   19804:	strb	r3, [sp, #17]
   19808:	str	r3, [sp, #18]
   1980c:	str	r3, [sp, #26]
   19810:	strh	r3, [sp, #30]
   19814:	str	r3, [sp, #32]
   19818:	str	r3, [sp, #48]	; 0x30
   1981c:	str	r3, [sp, #36]	; 0x24
   19820:	str	r3, [sp, #40]	; 0x28
   19824:	str	r3, [sp, #44]	; 0x2c
   19828:	str	r3, [sp, #52]	; 0x34
   1982c:	str	r3, [sp, #56]	; 0x38
   19830:	str	r3, [sp, #60]	; 0x3c
   19834:	strb	ip, [sp, #2]
   19838:	strb	ip, [sp, #3]
   1983c:	bl	19728 <__assert_fail@plt+0x859c>
   19840:	add	sp, sp, #68	; 0x44
   19844:	pop	{pc}		; (ldr pc, [sp], #4)
   19848:	mvn	r0, #0
   1984c:	bx	lr
   19850:	sub	ip, r1, #1
   19854:	cmp	ip, #63	; 0x3f
   19858:	bhi	1995c <__assert_fail@plt+0x87d0>
   1985c:	push	{r4, r5, r6, r7, lr}
   19860:	clz	ip, r2
   19864:	sub	r4, r3, #1
   19868:	lsr	ip, ip, #5
   1986c:	cmp	r4, #63	; 0x3f
   19870:	movls	r4, ip
   19874:	orrhi	r4, ip, #1
   19878:	cmp	r4, #0
   1987c:	sub	sp, sp, #196	; 0xc4
   19880:	bne	19950 <__assert_fail@plt+0x87c4>
   19884:	strb	r1, [sp]
   19888:	strb	r3, [sp, #1]
   1988c:	mov	r5, r3
   19890:	mov	r1, sp
   19894:	mov	r3, #1
   19898:	mov	r7, r0
   1989c:	mov	r6, r2
   198a0:	str	r4, [sp, #4]
   198a4:	str	r4, [sp, #8]
   198a8:	str	r4, [sp, #12]
   198ac:	strb	r4, [sp, #16]
   198b0:	strb	r4, [sp, #17]
   198b4:	str	r4, [sp, #18]
   198b8:	str	r4, [sp, #32]
   198bc:	str	r4, [sp, #48]	; 0x30
   198c0:	str	r4, [sp, #22]
   198c4:	str	r4, [sp, #26]
   198c8:	strh	r4, [sp, #30]
   198cc:	str	r4, [sp, #36]	; 0x24
   198d0:	str	r4, [sp, #40]	; 0x28
   198d4:	str	r4, [sp, #44]	; 0x2c
   198d8:	str	r4, [sp, #52]	; 0x34
   198dc:	str	r4, [sp, #56]	; 0x38
   198e0:	str	r4, [sp, #60]	; 0x3c
   198e4:	strb	r3, [sp, #2]
   198e8:	strb	r3, [sp, #3]
   198ec:	bl	19728 <__assert_fail@plt+0x859c>
   198f0:	cmp	r0, #0
   198f4:	blt	19950 <__assert_fail@plt+0x87c4>
   198f8:	mov	r1, r4
   198fc:	add	r0, sp, #64	; 0x40
   19900:	mov	r2, #128	; 0x80
   19904:	bl	110b4 <memset@plt>
   19908:	mov	r2, r5
   1990c:	mov	r1, r6
   19910:	mov	r3, #128	; 0x80
   19914:	add	r0, sp, #64	; 0x40
   19918:	bl	10fac <__memcpy_chk@plt>
   1991c:	mov	r0, r7
   19920:	add	r1, sp, #64	; 0x40
   19924:	mov	r2, #128	; 0x80
   19928:	bl	19604 <__assert_fail@plt+0x8478>
   1992c:	ldr	r3, [pc, #48]	; 19964 <__assert_fail@plt+0x87d8>
   19930:	add	r0, sp, #64	; 0x40
   19934:	mov	r2, #128	; 0x80
   19938:	ldr	r3, [r3]
   1993c:	mov	r1, r4
   19940:	blx	r3
   19944:	mov	r0, r4
   19948:	add	sp, sp, #196	; 0xc4
   1994c:	pop	{r4, r5, r6, r7, pc}
   19950:	mvn	r0, #0
   19954:	add	sp, sp, #196	; 0xc4
   19958:	pop	{r4, r5, r6, r7, pc}
   1995c:	mvn	r0, #0
   19960:	bx	lr
   19964:	andeq	r0, r3, r8, lsl r1
   19968:	cmp	r2, #0
   1996c:	beq	19980 <__assert_fail@plt+0x87f4>
   19970:	push	{r4, lr}
   19974:	bl	19604 <__assert_fail@plt+0x8478>
   19978:	mov	r0, #0
   1997c:	pop	{r4, pc}
   19980:	mov	r0, #0
   19984:	bx	lr
   19988:	push	{r4, r5, r6, r7, r8, r9, lr}
   1998c:	sub	sp, sp, #76	; 0x4c
   19990:	mov	r6, r1
   19994:	mov	r7, r0
   19998:	mov	r4, r2
   1999c:	add	r0, sp, #8
   199a0:	mov	r2, #64	; 0x40
   199a4:	mov	r1, #0
   199a8:	bl	110b4 <memset@plt>
   199ac:	cmp	r6, #0
   199b0:	beq	19aac <__assert_fail@plt+0x8920>
   199b4:	ldr	r3, [r7, #228]	; 0xe4
   199b8:	cmp	r3, r4
   199bc:	bhi	19aac <__assert_fail@plt+0x8920>
   199c0:	ldrd	r2, [r7, #80]	; 0x50
   199c4:	orrs	r3, r2, r3
   199c8:	bne	19aac <__assert_fail@plt+0x8920>
   199cc:	ldrd	r0, [r7, #64]	; 0x40
   199d0:	ldr	r2, [r7, #224]	; 0xe0
   199d4:	mov	r9, #0
   199d8:	adds	r0, r0, r2
   199dc:	adc	r1, r1, r9
   199e0:	cmp	r9, r1
   199e4:	ldrd	r4, [r7, #72]	; 0x48
   199e8:	cmpeq	r2, r0
   199ec:	ldrb	r3, [r7, #232]	; 0xe8
   199f0:	movhi	ip, #1
   199f4:	movls	ip, #0
   199f8:	adds	r4, r4, ip
   199fc:	adc	r5, r5, #0
   19a00:	cmp	r3, #0
   19a04:	strd	r0, [r7, #64]	; 0x40
   19a08:	strd	r4, [r7, #72]	; 0x48
   19a0c:	bne	19a9c <__assert_fail@plt+0x8910>
   19a10:	mvn	r0, #0
   19a14:	mvn	r1, #0
   19a18:	add	r4, r7, #96	; 0x60
   19a1c:	strd	r0, [r7, #80]	; 0x50
   19a20:	add	r0, r4, r2
   19a24:	mov	r1, #0
   19a28:	rsb	r2, r2, #128	; 0x80
   19a2c:	bl	110b4 <memset@plt>
   19a30:	mov	r1, r4
   19a34:	mov	r0, r7
   19a38:	bl	12e50 <__assert_fail@plt+0x1cc4>
   19a3c:	sub	r2, r7, #8
   19a40:	add	r3, sp, #8
   19a44:	add	lr, r7, #56	; 0x38
   19a48:	mov	ip, sp
   19a4c:	ldrd	r0, [r2, #8]!
   19a50:	strd	r0, [sp]
   19a54:	ldm	ip, {r0, r1}
   19a58:	cmp	r2, lr
   19a5c:	stm	r3, {r0, r1}
   19a60:	add	r3, r3, #8
   19a64:	bne	19a4c <__assert_fail@plt+0x88c0>
   19a68:	ldr	r2, [r7, #228]	; 0xe4
   19a6c:	add	r1, sp, #8
   19a70:	mov	r0, r6
   19a74:	bl	10f34 <memcpy@plt>
   19a78:	ldr	r3, [pc, #52]	; 19ab4 <__assert_fail@plt+0x8928>
   19a7c:	add	r0, sp, #8
   19a80:	mov	r2, #64	; 0x40
   19a84:	ldr	r3, [r3]
   19a88:	mov	r1, #0
   19a8c:	blx	r3
   19a90:	mov	r0, #0
   19a94:	add	sp, sp, #76	; 0x4c
   19a98:	pop	{r4, r5, r6, r7, r8, r9, pc}
   19a9c:	mvn	r0, #0
   19aa0:	mvn	r1, #0
   19aa4:	strd	r0, [r7, #88]	; 0x58
   19aa8:	b	19a10 <__assert_fail@plt+0x8884>
   19aac:	mvn	r0, #0
   19ab0:	b	19a94 <__assert_fail@plt+0x8908>
   19ab4:	andeq	r0, r3, r8, lsl r1
   19ab8:	cmp	r3, #0
   19abc:	clz	ip, r2
   19ac0:	lsr	ip, ip, #5
   19ac4:	moveq	ip, #0
   19ac8:	cmp	r0, #0
   19acc:	orreq	ip, ip, #1
   19ad0:	push	{r4, r5, r6, r7, r8, lr}
   19ad4:	sub	sp, sp, #240	; 0xf0
   19ad8:	cmp	ip, #0
   19adc:	ldr	ip, [sp, #268]	; 0x10c
   19ae0:	bne	19b78 <__assert_fail@plt+0x89ec>
   19ae4:	cmp	ip, #0
   19ae8:	ldr	r4, [sp, #264]	; 0x108
   19aec:	clz	r4, r4
   19af0:	lsr	r4, r4, #5
   19af4:	moveq	r4, #0
   19af8:	cmp	r4, #0
   19afc:	bne	19b78 <__assert_fail@plt+0x89ec>
   19b00:	sub	r4, r1, #1
   19b04:	cmp	ip, #64	; 0x40
   19b08:	cmpls	r4, #63	; 0x3f
   19b0c:	mov	r7, r1
   19b10:	bhi	19b78 <__assert_fail@plt+0x89ec>
   19b14:	cmp	ip, #0
   19b18:	mov	r5, r0
   19b1c:	mov	r4, r3
   19b20:	mov	r6, r2
   19b24:	mov	r8, sp
   19b28:	bne	19b60 <__assert_fail@plt+0x89d4>
   19b2c:	mov	r0, sp
   19b30:	bl	197c4 <__assert_fail@plt+0x8638>
   19b34:	cmp	r0, #0
   19b38:	blt	19b78 <__assert_fail@plt+0x89ec>
   19b3c:	cmp	r4, #0
   19b40:	bne	19b80 <__assert_fail@plt+0x89f4>
   19b44:	mov	r2, r7
   19b48:	mov	r1, r5
   19b4c:	mov	r0, r8
   19b50:	bl	19988 <__assert_fail@plt+0x87fc>
   19b54:	mov	r0, #0
   19b58:	add	sp, sp, #240	; 0xf0
   19b5c:	pop	{r4, r5, r6, r7, r8, pc}
   19b60:	mov	r3, ip
   19b64:	mov	r0, sp
   19b68:	ldr	r2, [sp, #264]	; 0x108
   19b6c:	bl	19850 <__assert_fail@plt+0x86c4>
   19b70:	cmp	r0, #0
   19b74:	bge	19b3c <__assert_fail@plt+0x89b0>
   19b78:	mvn	r0, #0
   19b7c:	b	19b58 <__assert_fail@plt+0x89cc>
   19b80:	mov	r2, r4
   19b84:	mov	r1, r6
   19b88:	mov	r0, r8
   19b8c:	bl	19604 <__assert_fail@plt+0x8478>
   19b90:	b	19b44 <__assert_fail@plt+0x89b8>
   19b94:	b	19ab8 <__assert_fail@plt+0x892c>
   19b98:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19b9c:	mov	r5, r0
   19ba0:	sub	sp, sp, #240	; 0xf0
   19ba4:	mov	r0, #32768	; 0x8000
   19ba8:	mov	r9, r1
   19bac:	mov	r8, r2
   19bb0:	bl	1d1b8 <__assert_fail@plt+0xc02c>
   19bb4:	subs	r6, r0, #0
   19bb8:	beq	19c7c <__assert_fail@plt+0x8af0>
   19bbc:	mov	r0, sp
   19bc0:	mov	r1, r8
   19bc4:	bl	197c4 <__assert_fail@plt+0x8638>
   19bc8:	mov	r7, #1
   19bcc:	mov	sl, #32768	; 0x8000
   19bd0:	mov	r4, #0
   19bd4:	b	19bec <__assert_fail@plt+0x8a60>
   19bd8:	cmp	r3, #0
   19bdc:	beq	19c28 <__assert_fail@plt+0x8a9c>
   19be0:	bl	1106c <feof@plt>
   19be4:	cmp	r0, #0
   19be8:	bne	19c38 <__assert_fail@plt+0x8aac>
   19bec:	mov	r3, r5
   19bf0:	rsb	r2, r4, #32768	; 0x8000
   19bf4:	add	r0, r6, r4
   19bf8:	mov	r1, r7
   19bfc:	bl	10fdc <fread@plt>
   19c00:	mov	r3, r0
   19c04:	add	r4, r4, r3
   19c08:	cmp	r4, #32768	; 0x8000
   19c0c:	mov	r0, r5
   19c10:	bne	19bd8 <__assert_fail@plt+0x8a4c>
   19c14:	mov	r2, sl
   19c18:	mov	r1, r6
   19c1c:	mov	r0, sp
   19c20:	bl	19968 <__assert_fail@plt+0x87dc>
   19c24:	b	19bd0 <__assert_fail@plt+0x8a44>
   19c28:	bl	10f1c <ferror@plt>
   19c2c:	cmp	r0, #0
   19c30:	mvnne	r4, #0
   19c34:	bne	19c54 <__assert_fail@plt+0x8ac8>
   19c38:	cmp	r4, #0
   19c3c:	bne	19c68 <__assert_fail@plt+0x8adc>
   19c40:	mov	r2, r8
   19c44:	mov	r1, r9
   19c48:	mov	r0, sp
   19c4c:	bl	19988 <__assert_fail@plt+0x87fc>
   19c50:	mov	r4, #0
   19c54:	mov	r0, r6
   19c58:	bl	19f60 <__assert_fail@plt+0x8dd4>
   19c5c:	mov	r0, r4
   19c60:	add	sp, sp, #240	; 0xf0
   19c64:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19c68:	mov	r2, r4
   19c6c:	mov	r1, r6
   19c70:	mov	r0, sp
   19c74:	bl	19968 <__assert_fail@plt+0x87dc>
   19c78:	b	19c40 <__assert_fail@plt+0x8ab4>
   19c7c:	mvn	r4, #0
   19c80:	b	19c5c <__assert_fail@plt+0x8ad0>
   19c84:	ldr	r3, [pc, #4]	; 19c90 <__assert_fail@plt+0x8b04>
   19c88:	str	r0, [r3]
   19c8c:	bx	lr
   19c90:	andeq	r0, r3, ip, lsr #3
   19c94:	ldr	r3, [pc, #4]	; 19ca0 <__assert_fail@plt+0x8b14>
   19c98:	strb	r0, [r3, #4]
   19c9c:	bx	lr
   19ca0:	andeq	r0, r3, ip, lsr #3
   19ca4:	ldr	r3, [pc, #192]	; 19d6c <__assert_fail@plt+0x8be0>
   19ca8:	push	{r4, r5, r6, lr}
   19cac:	sub	sp, sp, #8
   19cb0:	ldr	r0, [r3]
   19cb4:	bl	1d240 <__assert_fail@plt+0xc0b4>
   19cb8:	cmp	r0, #0
   19cbc:	beq	19ce0 <__assert_fail@plt+0x8b54>
   19cc0:	ldr	r4, [pc, #168]	; 19d70 <__assert_fail@plt+0x8be4>
   19cc4:	ldrb	r3, [r4, #4]
   19cc8:	cmp	r3, #0
   19ccc:	beq	19cfc <__assert_fail@plt+0x8b70>
   19cd0:	bl	11090 <__errno_location@plt>
   19cd4:	ldr	r3, [r0]
   19cd8:	cmp	r3, #32
   19cdc:	bne	19cfc <__assert_fail@plt+0x8b70>
   19ce0:	ldr	r3, [pc, #140]	; 19d74 <__assert_fail@plt+0x8be8>
   19ce4:	ldr	r0, [r3]
   19ce8:	bl	1d240 <__assert_fail@plt+0xc0b4>
   19cec:	cmp	r0, #0
   19cf0:	bne	19d44 <__assert_fail@plt+0x8bb8>
   19cf4:	add	sp, sp, #8
   19cf8:	pop	{r4, r5, r6, pc}
   19cfc:	mov	r2, #5
   19d00:	ldr	r1, [pc, #112]	; 19d78 <__assert_fail@plt+0x8bec>
   19d04:	mov	r0, #0
   19d08:	bl	10f7c <dcgettext@plt>
   19d0c:	ldr	r4, [r4]
   19d10:	cmp	r4, #0
   19d14:	mov	r5, r0
   19d18:	beq	19d50 <__assert_fail@plt+0x8bc4>
   19d1c:	bl	11090 <__errno_location@plt>
   19d20:	ldr	r6, [r0]
   19d24:	mov	r0, r4
   19d28:	bl	1bd80 <__assert_fail@plt+0xabf4>
   19d2c:	mov	r1, r6
   19d30:	str	r5, [sp]
   19d34:	ldr	r2, [pc, #64]	; 19d7c <__assert_fail@plt+0x8bf0>
   19d38:	mov	r3, r0
   19d3c:	mov	r0, #0
   19d40:	bl	11000 <error@plt>
   19d44:	ldr	r3, [pc, #52]	; 19d80 <__assert_fail@plt+0x8bf4>
   19d48:	ldr	r0, [r3]
   19d4c:	bl	10f28 <_exit@plt>
   19d50:	bl	11090 <__errno_location@plt>
   19d54:	mov	r3, r5
   19d58:	ldr	r2, [pc, #36]	; 19d84 <__assert_fail@plt+0x8bf8>
   19d5c:	ldr	r1, [r0]
   19d60:	mov	r0, r4
   19d64:	bl	11000 <error@plt>
   19d68:	b	19d44 <__assert_fail@plt+0x8bb8>
   19d6c:	andeq	r0, r3, r4, lsl #3
   19d70:	andeq	r0, r3, ip, lsr #3
   19d74:	andeq	r0, r3, r8, ror r1
   19d78:	muleq	r1, r0, fp
   19d7c:	muleq	r1, ip, fp
   19d80:	andeq	r0, r3, r0, lsr #2
   19d84:			; <UNDEFINED> instruction: 0x0001e5b4
   19d88:	push	{r4, r5}
   19d8c:	pop	{r4, r5}
   19d90:	b	10ef8 <posix_fadvise64@plt>
   19d94:	cmp	r0, #0
   19d98:	bxeq	lr
   19d9c:	push	{r4, lr}
   19da0:	sub	sp, sp, #16
   19da4:	mov	r4, r1
   19da8:	bl	110cc <fileno@plt>
   19dac:	mov	r2, #0
   19db0:	mov	r3, #0
   19db4:	str	r4, [sp, #8]
   19db8:	strd	r2, [sp]
   19dbc:	bl	10ef8 <posix_fadvise64@plt>
   19dc0:	add	sp, sp, #16
   19dc4:	pop	{r4, pc}
   19dc8:	push	{r4, r5, lr}
   19dcc:	sub	sp, sp, #12
   19dd0:	mov	r4, r0
   19dd4:	bl	110cc <fileno@plt>
   19dd8:	cmp	r0, #0
   19ddc:	mov	r0, r4
   19de0:	blt	19e5c <__assert_fail@plt+0x8cd0>
   19de4:	bl	11024 <__freading@plt>
   19de8:	cmp	r0, #0
   19dec:	bne	19e28 <__assert_fail@plt+0x8c9c>
   19df0:	mov	r0, r4
   19df4:	bl	19e68 <__assert_fail@plt+0x8cdc>
   19df8:	cmp	r0, #0
   19dfc:	beq	19e58 <__assert_fail@plt+0x8ccc>
   19e00:	bl	11090 <__errno_location@plt>
   19e04:	mov	r5, r0
   19e08:	mov	r0, r4
   19e0c:	ldr	r4, [r5]
   19e10:	bl	110e4 <fclose@plt>
   19e14:	cmp	r4, #0
   19e18:	mvnne	r0, #0
   19e1c:	strne	r4, [r5]
   19e20:	add	sp, sp, #12
   19e24:	pop	{r4, r5, pc}
   19e28:	mov	r0, r4
   19e2c:	bl	110cc <fileno@plt>
   19e30:	mov	r3, #1
   19e34:	str	r3, [sp]
   19e38:	mov	r2, #0
   19e3c:	mov	r3, #0
   19e40:	bl	10fc4 <lseek64@plt>
   19e44:	mvn	r3, #0
   19e48:	mvn	r2, #0
   19e4c:	cmp	r1, r3
   19e50:	cmpeq	r0, r2
   19e54:	bne	19df0 <__assert_fail@plt+0x8c64>
   19e58:	mov	r0, r4
   19e5c:	add	sp, sp, #12
   19e60:	pop	{r4, r5, lr}
   19e64:	b	110e4 <fclose@plt>
   19e68:	push	{r4, lr}
   19e6c:	subs	r4, r0, #0
   19e70:	sub	sp, sp, #8
   19e74:	beq	19e90 <__assert_fail@plt+0x8d04>
   19e78:	bl	11024 <__freading@plt>
   19e7c:	cmp	r0, #0
   19e80:	beq	19e90 <__assert_fail@plt+0x8d04>
   19e84:	ldr	r3, [r4]
   19e88:	tst	r3, #256	; 0x100
   19e8c:	bne	19ea0 <__assert_fail@plt+0x8d14>
   19e90:	mov	r0, r4
   19e94:	add	sp, sp, #8
   19e98:	pop	{r4, lr}
   19e9c:	b	10f04 <fflush@plt>
   19ea0:	mov	r3, #1
   19ea4:	str	r3, [sp]
   19ea8:	mov	r2, #0
   19eac:	mov	r3, #0
   19eb0:	mov	r0, r4
   19eb4:	bl	19fb8 <__assert_fail@plt+0x8e2c>
   19eb8:	mov	r0, r4
   19ebc:	add	sp, sp, #8
   19ec0:	pop	{r4, lr}
   19ec4:	b	10f04 <fflush@plt>
   19ec8:	push	{r4, r5, r6, lr}
   19ecc:	mov	r5, r1
   19ed0:	bl	11144 <fopen64@plt>
   19ed4:	subs	r4, r0, #0
   19ed8:	beq	19ee8 <__assert_fail@plt+0x8d5c>
   19edc:	bl	110cc <fileno@plt>
   19ee0:	cmp	r0, #2
   19ee4:	bls	19ef0 <__assert_fail@plt+0x8d64>
   19ee8:	mov	r0, r4
   19eec:	pop	{r4, r5, r6, pc}
   19ef0:	bl	1bf30 <__assert_fail@plt+0xada4>
   19ef4:	subs	r6, r0, #0
   19ef8:	blt	19f40 <__assert_fail@plt+0x8db4>
   19efc:	mov	r0, r4
   19f00:	bl	19dc8 <__assert_fail@plt+0x8c3c>
   19f04:	cmp	r0, #0
   19f08:	bne	19f20 <__assert_fail@plt+0x8d94>
   19f0c:	mov	r1, r5
   19f10:	mov	r0, r6
   19f14:	bl	10eb0 <fdopen@plt>
   19f18:	subs	r4, r0, #0
   19f1c:	bne	19ee8 <__assert_fail@plt+0x8d5c>
   19f20:	bl	11090 <__errno_location@plt>
   19f24:	mov	r4, #0
   19f28:	mov	r5, r0
   19f2c:	mov	r0, r6
   19f30:	ldr	r6, [r5]
   19f34:	bl	11174 <close@plt>
   19f38:	str	r6, [r5]
   19f3c:	b	19ee8 <__assert_fail@plt+0x8d5c>
   19f40:	bl	11090 <__errno_location@plt>
   19f44:	mov	r5, r0
   19f48:	mov	r0, r4
   19f4c:	ldr	r6, [r5]
   19f50:	mov	r4, #0
   19f54:	bl	19dc8 <__assert_fail@plt+0x8c3c>
   19f58:	str	r6, [r5]
   19f5c:	b	19ee8 <__assert_fail@plt+0x8d5c>
   19f60:	push	{r4, r5, lr}
   19f64:	sub	sp, sp, #12
   19f68:	mov	r5, r0
   19f6c:	bl	11090 <__errno_location@plt>
   19f70:	mov	r2, #0
   19f74:	mov	r4, r0
   19f78:	ldr	r3, [r0]
   19f7c:	str	r2, [r4]
   19f80:	mov	r0, r5
   19f84:	str	r3, [sp]
   19f88:	str	r3, [sp, #4]
   19f8c:	bl	10f10 <free@plt>
   19f90:	ldr	r3, [r4]
   19f94:	add	r2, sp, #8
   19f98:	cmp	r3, #0
   19f9c:	moveq	r3, #4
   19fa0:	movne	r3, #0
   19fa4:	add	r3, r2, r3
   19fa8:	ldr	r3, [r3, #-8]
   19fac:	str	r3, [r4]
   19fb0:	add	sp, sp, #12
   19fb4:	pop	{r4, r5, pc}
   19fb8:	push	{r4, r5, r6, r7, r8, lr}
   19fbc:	sub	sp, sp, #8
   19fc0:	ldmib	r0, {ip, lr}
   19fc4:	mov	r4, r0
   19fc8:	ldr	r5, [sp, #32]
   19fcc:	cmp	lr, ip
   19fd0:	beq	19fe8 <__assert_fail@plt+0x8e5c>
   19fd4:	str	r5, [sp, #32]
   19fd8:	mov	r0, r4
   19fdc:	add	sp, sp, #8
   19fe0:	pop	{r4, r5, r6, r7, r8, lr}
   19fe4:	b	110f0 <fseeko64@plt>
   19fe8:	ldr	lr, [r0, #20]
   19fec:	ldr	ip, [r0, #16]
   19ff0:	cmp	lr, ip
   19ff4:	bne	19fd4 <__assert_fail@plt+0x8e48>
   19ff8:	ldr	r8, [r0, #36]	; 0x24
   19ffc:	cmp	r8, #0
   1a000:	bne	19fd4 <__assert_fail@plt+0x8e48>
   1a004:	mov	r6, r2
   1a008:	mov	r7, r3
   1a00c:	bl	110cc <fileno@plt>
   1a010:	mov	r2, r6
   1a014:	mov	r3, r7
   1a018:	str	r5, [sp]
   1a01c:	bl	10fc4 <lseek64@plt>
   1a020:	mvn	r3, #0
   1a024:	mvn	r2, #0
   1a028:	cmp	r1, r3
   1a02c:	cmpeq	r0, r2
   1a030:	beq	1a050 <__assert_fail@plt+0x8ec4>
   1a034:	ldr	r3, [r4]
   1a038:	strd	r0, [r4, #80]	; 0x50
   1a03c:	mov	r0, r8
   1a040:	bic	r3, r3, #16
   1a044:	str	r3, [r4]
   1a048:	add	sp, sp, #8
   1a04c:	pop	{r4, r5, r6, r7, r8, pc}
   1a050:	mvn	r0, #0
   1a054:	b	1a048 <__assert_fail@plt+0x8ebc>
   1a058:	push	{r4, r5, r6, lr}
   1a05c:	subs	r4, r0, #0
   1a060:	beq	1a0d4 <__assert_fail@plt+0x8f48>
   1a064:	mov	r1, #47	; 0x2f
   1a068:	bl	11120 <strrchr@plt>
   1a06c:	subs	r5, r0, #0
   1a070:	beq	1a0c0 <__assert_fail@plt+0x8f34>
   1a074:	add	r6, r5, #1
   1a078:	sub	r3, r6, r4
   1a07c:	cmp	r3, #6
   1a080:	ble	1a0c0 <__assert_fail@plt+0x8f34>
   1a084:	mov	r2, #7
   1a088:	ldr	r1, [pc, #96]	; 1a0f0 <__assert_fail@plt+0x8f64>
   1a08c:	sub	r0, r5, #6
   1a090:	bl	1115c <strncmp@plt>
   1a094:	cmp	r0, #0
   1a098:	bne	1a0c0 <__assert_fail@plt+0x8f34>
   1a09c:	mov	r2, #3
   1a0a0:	ldr	r1, [pc, #76]	; 1a0f4 <__assert_fail@plt+0x8f68>
   1a0a4:	mov	r0, r6
   1a0a8:	bl	1115c <strncmp@plt>
   1a0ac:	cmp	r0, #0
   1a0b0:	movne	r4, r6
   1a0b4:	ldreq	r3, [pc, #60]	; 1a0f8 <__assert_fail@plt+0x8f6c>
   1a0b8:	addeq	r4, r5, #4
   1a0bc:	streq	r4, [r3]
   1a0c0:	ldr	r2, [pc, #52]	; 1a0fc <__assert_fail@plt+0x8f70>
   1a0c4:	ldr	r3, [pc, #52]	; 1a100 <__assert_fail@plt+0x8f74>
   1a0c8:	str	r4, [r2]
   1a0cc:	str	r4, [r3]
   1a0d0:	pop	{r4, r5, r6, pc}
   1a0d4:	ldr	r3, [pc, #40]	; 1a104 <__assert_fail@plt+0x8f78>
   1a0d8:	mov	r2, #55	; 0x37
   1a0dc:	mov	r1, #1
   1a0e0:	ldr	r3, [r3]
   1a0e4:	ldr	r0, [pc, #28]	; 1a108 <__assert_fail@plt+0x8f7c>
   1a0e8:	bl	10fb8 <fwrite@plt>
   1a0ec:	bl	11168 <abort@plt>
   1a0f0:	ldrdeq	lr, [r1], -ip
   1a0f4:	andeq	lr, r1, r4, ror #23
   1a0f8:	andeq	r0, r3, r8, ror #2
   1a0fc:			; <UNDEFINED> instruction: 0x000301b4
   1a100:	andeq	r0, r3, ip, ror #2
   1a104:	andeq	r0, r3, r8, ror r1
   1a108:	andeq	lr, r1, r4, lsr #23
   1a10c:	push	{r4, r5, r6, lr}
   1a110:	mov	r2, #48	; 0x30
   1a114:	mov	r4, r1
   1a118:	mov	r1, #0
   1a11c:	mov	r5, r0
   1a120:	bl	110b4 <memset@plt>
   1a124:	cmp	r4, #10
   1a128:	beq	1a138 <__assert_fail@plt+0x8fac>
   1a12c:	str	r4, [r5]
   1a130:	mov	r0, r5
   1a134:	pop	{r4, r5, r6, pc}
   1a138:	bl	11168 <abort@plt>
   1a13c:	push	{r4, r5, r6, lr}
   1a140:	mov	r4, r0
   1a144:	mov	r5, r1
   1a148:	bl	1d490 <__assert_fail@plt+0xc304>
   1a14c:	ldrb	r3, [r0]
   1a150:	bic	r3, r3, #32
   1a154:	cmp	r3, #85	; 0x55
   1a158:	bne	1a1b8 <__assert_fail@plt+0x902c>
   1a15c:	ldrb	r3, [r0, #1]
   1a160:	bic	r3, r3, #32
   1a164:	cmp	r3, #84	; 0x54
   1a168:	bne	1a1f4 <__assert_fail@plt+0x9068>
   1a16c:	ldrb	r3, [r0, #2]
   1a170:	bic	r3, r3, #32
   1a174:	cmp	r3, #70	; 0x46
   1a178:	bne	1a1f4 <__assert_fail@plt+0x9068>
   1a17c:	ldrb	r3, [r0, #3]
   1a180:	cmp	r3, #45	; 0x2d
   1a184:	bne	1a1f4 <__assert_fail@plt+0x9068>
   1a188:	ldrb	r3, [r0, #4]
   1a18c:	cmp	r3, #56	; 0x38
   1a190:	bne	1a1f4 <__assert_fail@plt+0x9068>
   1a194:	ldrb	r3, [r0, #5]
   1a198:	cmp	r3, #0
   1a19c:	bne	1a1f4 <__assert_fail@plt+0x9068>
   1a1a0:	ldrb	r2, [r4]
   1a1a4:	ldr	r3, [pc, #152]	; 1a244 <__assert_fail@plt+0x90b8>
   1a1a8:	ldr	r0, [pc, #152]	; 1a248 <__assert_fail@plt+0x90bc>
   1a1ac:	cmp	r2, #96	; 0x60
   1a1b0:	movne	r0, r3
   1a1b4:	pop	{r4, r5, r6, pc}
   1a1b8:	cmp	r3, #71	; 0x47
   1a1bc:	bne	1a1f4 <__assert_fail@plt+0x9068>
   1a1c0:	ldrb	r3, [r0, #1]
   1a1c4:	bic	r3, r3, #32
   1a1c8:	cmp	r3, #66	; 0x42
   1a1cc:	bne	1a1f4 <__assert_fail@plt+0x9068>
   1a1d0:	ldrb	r3, [r0, #2]
   1a1d4:	cmp	r3, #49	; 0x31
   1a1d8:	bne	1a1f4 <__assert_fail@plt+0x9068>
   1a1dc:	ldrb	r3, [r0, #3]
   1a1e0:	cmp	r3, #56	; 0x38
   1a1e4:	bne	1a1f4 <__assert_fail@plt+0x9068>
   1a1e8:	ldrb	r3, [r0, #4]
   1a1ec:	cmp	r3, #48	; 0x30
   1a1f0:	beq	1a208 <__assert_fail@plt+0x907c>
   1a1f4:	ldr	r3, [pc, #80]	; 1a24c <__assert_fail@plt+0x90c0>
   1a1f8:	cmp	r5, #9
   1a1fc:	ldr	r0, [pc, #76]	; 1a250 <__assert_fail@plt+0x90c4>
   1a200:	movne	r0, r3
   1a204:	pop	{r4, r5, r6, pc}
   1a208:	ldrb	r3, [r0, #5]
   1a20c:	cmp	r3, #51	; 0x33
   1a210:	bne	1a1f4 <__assert_fail@plt+0x9068>
   1a214:	ldrb	r3, [r0, #6]
   1a218:	cmp	r3, #48	; 0x30
   1a21c:	bne	1a1f4 <__assert_fail@plt+0x9068>
   1a220:	ldrb	r3, [r0, #7]
   1a224:	cmp	r3, #0
   1a228:	bne	1a1f4 <__assert_fail@plt+0x9068>
   1a22c:	ldrb	r2, [r4]
   1a230:	ldr	r3, [pc, #28]	; 1a254 <__assert_fail@plt+0x90c8>
   1a234:	ldr	r0, [pc, #28]	; 1a258 <__assert_fail@plt+0x90cc>
   1a238:	cmp	r2, #96	; 0x60
   1a23c:	movne	r0, r3
   1a240:	pop	{r4, r5, r6, pc}
   1a244:	andeq	lr, r1, r0, asr #24
   1a248:	andeq	lr, r1, ip, lsr ip
   1a24c:	andeq	lr, r1, r0, asr ip
   1a250:	andeq	lr, r1, ip, asr #24
   1a254:	andeq	lr, r1, r8, asr #24
   1a258:	andeq	lr, r1, r4, asr #24
   1a25c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a260:	sub	sp, sp, #116	; 0x74
   1a264:	mov	sl, r0
   1a268:	str	r3, [sp, #24]
   1a26c:	mov	r3, #1
   1a270:	mov	r8, r1
   1a274:	str	r2, [sp, #56]	; 0x38
   1a278:	str	r3, [sp, #36]	; 0x24
   1a27c:	bl	10fd0 <__ctype_get_mb_cur_max@plt>
   1a280:	ldr	r3, [sp, #156]	; 0x9c
   1a284:	mov	fp, r8
   1a288:	mov	r2, #0
   1a28c:	lsr	r3, r3, #1
   1a290:	and	r3, r3, #1
   1a294:	str	r2, [sp, #68]	; 0x44
   1a298:	str	r3, [sp, #28]
   1a29c:	str	r2, [sp, #40]	; 0x28
   1a2a0:	str	r2, [sp, #44]	; 0x2c
   1a2a4:	str	r2, [sp, #52]	; 0x34
   1a2a8:	str	r2, [sp, #64]	; 0x40
   1a2ac:	str	r2, [sp, #72]	; 0x48
   1a2b0:	str	sl, [sp, #32]
   1a2b4:	str	r0, [sp, #76]	; 0x4c
   1a2b8:	ldr	r3, [sp, #152]	; 0x98
   1a2bc:	cmp	r3, #10
   1a2c0:	ldrls	pc, [pc, r3, lsl #2]
   1a2c4:	b	1b484 <__assert_fail@plt+0xa2f8>
   1a2c8:	strdeq	sl, [r1], -r4
   1a2cc:	ldrdeq	sl, [r1], -ip
   1a2d0:	andeq	sl, r1, r0, lsl #12
   1a2d4:	andeq	sl, r1, r4, lsr #12
   1a2d8:	andeq	sl, r1, r0, asr r7
   1a2dc:	andeq	sl, r1, r4, lsr #14
   1a2e0:	strdeq	sl, [r1], -ip
   1a2e4:	andeq	sl, r1, r8, lsr r6
   1a2e8:	andeq	sl, r1, r0, asr r6
   1a2ec:	andeq	sl, r1, r0, asr r6
   1a2f0:	andeq	sl, r1, r0, asr r6
   1a2f4:	mov	r3, #0
   1a2f8:	mov	r7, r3
   1a2fc:	str	r3, [sp, #28]
   1a300:	ldr	r3, [sp, #44]	; 0x2c
   1a304:	mov	sl, #0
   1a308:	eor	r3, r3, #1
   1a30c:	str	r3, [sp, #60]	; 0x3c
   1a310:	ldr	r3, [sp, #24]
   1a314:	cmn	r3, #1
   1a318:	beq	1a87c <__assert_fail@plt+0x96f0>
   1a31c:	ldr	r3, [sp, #24]
   1a320:	subs	r5, r3, sl
   1a324:	movne	r5, #1
   1a328:	cmp	r5, #0
   1a32c:	beq	1a894 <__assert_fail@plt+0x9708>
   1a330:	ldr	r3, [sp, #152]	; 0x98
   1a334:	ldr	r8, [sp, #44]	; 0x2c
   1a338:	cmp	r3, #2
   1a33c:	moveq	r8, #0
   1a340:	andne	r8, r8, #1
   1a344:	ldr	r3, [sp, #52]	; 0x34
   1a348:	adds	r9, r3, #0
   1a34c:	movne	r9, #1
   1a350:	ands	r6, r9, r8
   1a354:	beq	1acfc <__assert_fail@plt+0x9b70>
   1a358:	ldr	r2, [sp, #52]	; 0x34
   1a35c:	ldr	r1, [sp, #24]
   1a360:	cmp	r2, #1
   1a364:	mov	r3, r2
   1a368:	movls	r3, #0
   1a36c:	movhi	r3, #1
   1a370:	cmn	r1, #1
   1a374:	movne	r3, #0
   1a378:	cmp	r3, #0
   1a37c:	add	r4, sl, r2
   1a380:	beq	1a390 <__assert_fail@plt+0x9204>
   1a384:	ldr	r0, [sp, #56]	; 0x38
   1a388:	bl	11078 <strlen@plt>
   1a38c:	str	r0, [sp, #24]
   1a390:	ldr	r3, [sp, #24]
   1a394:	cmp	r3, r4
   1a398:	ldr	r3, [sp, #56]	; 0x38
   1a39c:	add	r3, r3, sl
   1a3a0:	str	r3, [sp, #48]	; 0x30
   1a3a4:	bcc	1ad08 <__assert_fail@plt+0x9b7c>
   1a3a8:	mov	r0, r3
   1a3ac:	ldr	r2, [sp, #52]	; 0x34
   1a3b0:	ldr	r1, [sp, #64]	; 0x40
   1a3b4:	bl	10f64 <memcmp@plt>
   1a3b8:	cmp	r0, #0
   1a3bc:	bne	1ad08 <__assert_fail@plt+0x9b7c>
   1a3c0:	ldr	r3, [sp, #28]
   1a3c4:	cmp	r3, #0
   1a3c8:	bne	1b584 <__assert_fail@plt+0xa3f8>
   1a3cc:	ldr	r3, [sp, #48]	; 0x30
   1a3d0:	ldrb	r4, [r3]
   1a3d4:	cmp	r4, #126	; 0x7e
   1a3d8:	ldrls	pc, [pc, r4, lsl #2]
   1a3dc:	b	1ac9c <__assert_fail@plt+0x9b10>
   1a3e0:	andeq	sl, r1, r0, asr #21
   1a3e4:	muleq	r1, ip, ip
   1a3e8:	muleq	r1, ip, ip
   1a3ec:	muleq	r1, ip, ip
   1a3f0:	muleq	r1, ip, ip
   1a3f4:	muleq	r1, ip, ip
   1a3f8:	muleq	r1, ip, ip
   1a3fc:	andeq	sl, r1, r4, lsr #21
   1a400:	andeq	sl, r1, r8, lsl #21
   1a404:	andeq	sl, r1, r4, lsl #25
   1a408:	andeq	sl, r1, r8, ror #19
   1a40c:	andeq	sl, r1, ip, asr #19
   1a410:	andeq	sl, r1, r0, ror #24
   1a414:	andeq	sl, r1, ip, lsr ip
   1a418:	muleq	r1, ip, ip
   1a41c:	muleq	r1, ip, ip
   1a420:	muleq	r1, ip, ip
   1a424:	muleq	r1, ip, ip
   1a428:	muleq	r1, ip, ip
   1a42c:	muleq	r1, ip, ip
   1a430:	muleq	r1, ip, ip
   1a434:	muleq	r1, ip, ip
   1a438:	muleq	r1, ip, ip
   1a43c:	muleq	r1, ip, ip
   1a440:	muleq	r1, ip, ip
   1a444:	muleq	r1, ip, ip
   1a448:	muleq	r1, ip, ip
   1a44c:	muleq	r1, ip, ip
   1a450:	muleq	r1, ip, ip
   1a454:	muleq	r1, ip, ip
   1a458:	muleq	r1, ip, ip
   1a45c:	muleq	r1, ip, ip
   1a460:	andeq	sl, r1, ip, ror ip
   1a464:			; <UNDEFINED> instruction: 0x0001abb0
   1a468:			; <UNDEFINED> instruction: 0x0001abb0
   1a46c:	andeq	sl, r1, r0, asr #15
   1a470:			; <UNDEFINED> instruction: 0x0001abb0
   1a474:	andeq	sl, r1, r8, asr #24
   1a478:			; <UNDEFINED> instruction: 0x0001abb0
   1a47c:	andeq	sl, r1, ip, lsl ip
   1a480:			; <UNDEFINED> instruction: 0x0001abb0
   1a484:			; <UNDEFINED> instruction: 0x0001abb0
   1a488:			; <UNDEFINED> instruction: 0x0001abb0
   1a48c:	andeq	sl, r1, r8, asr #24
   1a490:	andeq	sl, r1, r8, asr #24
   1a494:	andeq	sl, r1, r8, asr #24
   1a498:	andeq	sl, r1, r8, asr #24
   1a49c:	andeq	sl, r1, r8, asr #24
   1a4a0:	andeq	sl, r1, r8, asr #24
   1a4a4:	andeq	sl, r1, r8, asr #24
   1a4a8:	andeq	sl, r1, r8, asr #24
   1a4ac:	andeq	sl, r1, r8, asr #24
   1a4b0:	andeq	sl, r1, r8, asr #24
   1a4b4:	andeq	sl, r1, r8, asr #24
   1a4b8:	andeq	sl, r1, r8, asr #24
   1a4bc:	andeq	sl, r1, r8, asr #24
   1a4c0:	andeq	sl, r1, r8, asr #24
   1a4c4:	andeq	sl, r1, r8, asr #24
   1a4c8:	andeq	sl, r1, r8, asr #24
   1a4cc:			; <UNDEFINED> instruction: 0x0001abb0
   1a4d0:			; <UNDEFINED> instruction: 0x0001abb0
   1a4d4:			; <UNDEFINED> instruction: 0x0001abb0
   1a4d8:			; <UNDEFINED> instruction: 0x0001abb0
   1a4dc:	andeq	sl, r1, ip, ror #23
   1a4e0:	muleq	r1, ip, ip
   1a4e4:	andeq	sl, r1, r8, asr #24
   1a4e8:	andeq	sl, r1, r8, asr #24
   1a4ec:	andeq	sl, r1, r8, asr #24
   1a4f0:	andeq	sl, r1, r8, asr #24
   1a4f4:	andeq	sl, r1, r8, asr #24
   1a4f8:	andeq	sl, r1, r8, asr #24
   1a4fc:	andeq	sl, r1, r8, asr #24
   1a500:	andeq	sl, r1, r8, asr #24
   1a504:	andeq	sl, r1, r8, asr #24
   1a508:	andeq	sl, r1, r8, asr #24
   1a50c:	andeq	sl, r1, r8, asr #24
   1a510:	andeq	sl, r1, r8, asr #24
   1a514:	andeq	sl, r1, r8, asr #24
   1a518:	andeq	sl, r1, r8, asr #24
   1a51c:	andeq	sl, r1, r8, asr #24
   1a520:	andeq	sl, r1, r8, asr #24
   1a524:	andeq	sl, r1, r8, asr #24
   1a528:	andeq	sl, r1, r8, asr #24
   1a52c:	andeq	sl, r1, r8, asr #24
   1a530:	andeq	sl, r1, r8, asr #24
   1a534:	andeq	sl, r1, r8, asr #24
   1a538:	andeq	sl, r1, r8, asr #24
   1a53c:	andeq	sl, r1, r8, asr #24
   1a540:	andeq	sl, r1, r8, asr #24
   1a544:	andeq	sl, r1, r8, asr #24
   1a548:	andeq	sl, r1, r8, asr #24
   1a54c:			; <UNDEFINED> instruction: 0x0001abb0
   1a550:	andeq	sl, r1, ip, lsl #18
   1a554:	andeq	sl, r1, r8, asr #24
   1a558:			; <UNDEFINED> instruction: 0x0001abb0
   1a55c:	andeq	sl, r1, r8, asr #24
   1a560:			; <UNDEFINED> instruction: 0x0001abb0
   1a564:	andeq	sl, r1, r8, asr #24
   1a568:	andeq	sl, r1, r8, asr #24
   1a56c:	andeq	sl, r1, r8, asr #24
   1a570:	andeq	sl, r1, r8, asr #24
   1a574:	andeq	sl, r1, r8, asr #24
   1a578:	andeq	sl, r1, r8, asr #24
   1a57c:	andeq	sl, r1, r8, asr #24
   1a580:	andeq	sl, r1, r8, asr #24
   1a584:	andeq	sl, r1, r8, asr #24
   1a588:	andeq	sl, r1, r8, asr #24
   1a58c:	andeq	sl, r1, r8, asr #24
   1a590:	andeq	sl, r1, r8, asr #24
   1a594:	andeq	sl, r1, r8, asr #24
   1a598:	andeq	sl, r1, r8, asr #24
   1a59c:	andeq	sl, r1, r8, asr #24
   1a5a0:	andeq	sl, r1, r8, asr #24
   1a5a4:	andeq	sl, r1, r8, asr #24
   1a5a8:	andeq	sl, r1, r8, asr #24
   1a5ac:	andeq	sl, r1, r8, asr #24
   1a5b0:	andeq	sl, r1, r8, asr #24
   1a5b4:	andeq	sl, r1, r8, asr #24
   1a5b8:	andeq	sl, r1, r8, asr #24
   1a5bc:	andeq	sl, r1, r8, asr #24
   1a5c0:	andeq	sl, r1, r8, asr #24
   1a5c4:	andeq	sl, r1, r8, asr #24
   1a5c8:	andeq	sl, r1, r8, asr #24
   1a5cc:	andeq	sl, r1, r0, lsr #15
   1a5d0:			; <UNDEFINED> instruction: 0x0001abb0
   1a5d4:	andeq	sl, r1, r0, lsr #15
   1a5d8:	andeq	sl, r1, r0, asr #15
   1a5dc:	mov	r3, #1
   1a5e0:	str	r3, [sp, #28]
   1a5e4:	str	r3, [sp, #52]	; 0x34
   1a5e8:	ldr	r3, [pc, #4000]	; 1b590 <__assert_fail@plt+0xa404>
   1a5ec:	mov	r7, #0
   1a5f0:	str	r3, [sp, #64]	; 0x40
   1a5f4:	mov	r3, #2
   1a5f8:	str	r3, [sp, #152]	; 0x98
   1a5fc:	b	1a300 <__assert_fail@plt+0x9174>
   1a600:	ldr	r3, [sp, #28]
   1a604:	cmp	r3, #0
   1a608:	beq	1a764 <__assert_fail@plt+0x95d8>
   1a60c:	mov	r3, #1
   1a610:	str	r3, [sp, #52]	; 0x34
   1a614:	ldr	r3, [pc, #3956]	; 1b590 <__assert_fail@plt+0xa404>
   1a618:	mov	r7, #0
   1a61c:	str	r3, [sp, #64]	; 0x40
   1a620:	b	1a300 <__assert_fail@plt+0x9174>
   1a624:	mov	r3, #1
   1a628:	str	r3, [sp, #44]	; 0x2c
   1a62c:	str	r3, [sp, #52]	; 0x34
   1a630:	str	r3, [sp, #28]
   1a634:	b	1a5e8 <__assert_fail@plt+0x945c>
   1a638:	mov	r3, #0
   1a63c:	str	r3, [sp, #28]
   1a640:	mov	r3, #1
   1a644:	str	r3, [sp, #44]	; 0x2c
   1a648:	mov	r7, #0
   1a64c:	b	1a300 <__assert_fail@plt+0x9174>
   1a650:	ldr	r3, [sp, #152]	; 0x98
   1a654:	cmp	r3, #10
   1a658:	beq	1a69c <__assert_fail@plt+0x9510>
   1a65c:	mov	r2, #5
   1a660:	ldr	r1, [pc, #3884]	; 1b594 <__assert_fail@plt+0xa408>
   1a664:	mov	r0, #0
   1a668:	bl	10f7c <dcgettext@plt>
   1a66c:	ldr	r2, [pc, #3872]	; 1b594 <__assert_fail@plt+0xa408>
   1a670:	cmp	r0, r2
   1a674:	str	r0, [sp, #164]	; 0xa4
   1a678:	beq	1b680 <__assert_fail@plt+0xa4f4>
   1a67c:	mov	r2, #5
   1a680:	ldr	r1, [pc, #3848]	; 1b590 <__assert_fail@plt+0xa404>
   1a684:	mov	r0, #0
   1a688:	bl	10f7c <dcgettext@plt>
   1a68c:	ldr	r2, [pc, #3836]	; 1b590 <__assert_fail@plt+0xa404>
   1a690:	cmp	r0, r2
   1a694:	str	r0, [sp, #168]	; 0xa8
   1a698:	beq	1b670 <__assert_fail@plt+0xa4e4>
   1a69c:	ldr	r7, [sp, #28]
   1a6a0:	cmp	r7, #0
   1a6a4:	movne	r7, #0
   1a6a8:	bne	1a6dc <__assert_fail@plt+0x9550>
   1a6ac:	ldr	r3, [sp, #164]	; 0xa4
   1a6b0:	ldrb	r3, [r3]
   1a6b4:	cmp	r3, #0
   1a6b8:	beq	1b690 <__assert_fail@plt+0xa504>
   1a6bc:	ldr	r2, [sp, #164]	; 0xa4
   1a6c0:	ldr	r1, [sp, #32]
   1a6c4:	cmp	fp, r7
   1a6c8:	strbhi	r3, [r1, r7]
   1a6cc:	ldrb	r3, [r2, #1]!
   1a6d0:	add	r7, r7, #1
   1a6d4:	cmp	r3, #0
   1a6d8:	bne	1a6c4 <__assert_fail@plt+0x9538>
   1a6dc:	ldr	r0, [sp, #168]	; 0xa8
   1a6e0:	bl	11078 <strlen@plt>
   1a6e4:	ldr	r3, [sp, #168]	; 0xa8
   1a6e8:	str	r3, [sp, #64]	; 0x40
   1a6ec:	mov	r3, #1
   1a6f0:	str	r3, [sp, #44]	; 0x2c
   1a6f4:	str	r0, [sp, #52]	; 0x34
   1a6f8:	b	1a300 <__assert_fail@plt+0x9174>
   1a6fc:	mov	r3, #1
   1a700:	str	r3, [sp, #44]	; 0x2c
   1a704:	str	r3, [sp, #52]	; 0x34
   1a708:	str	r3, [sp, #28]
   1a70c:	ldr	r3, [pc, #3716]	; 1b598 <__assert_fail@plt+0xa40c>
   1a710:	mov	r7, #0
   1a714:	str	r3, [sp, #64]	; 0x40
   1a718:	mov	r3, #5
   1a71c:	str	r3, [sp, #152]	; 0x98
   1a720:	b	1a300 <__assert_fail@plt+0x9174>
   1a724:	ldr	r3, [sp, #28]
   1a728:	cmp	r3, #0
   1a72c:	beq	1b42c <__assert_fail@plt+0xa2a0>
   1a730:	ldr	r3, [sp, #28]
   1a734:	mov	r7, #0
   1a738:	str	r3, [sp, #44]	; 0x2c
   1a73c:	mov	r3, #1
   1a740:	str	r3, [sp, #52]	; 0x34
   1a744:	ldr	r3, [pc, #3660]	; 1b598 <__assert_fail@plt+0xa40c>
   1a748:	str	r3, [sp, #64]	; 0x40
   1a74c:	b	1a300 <__assert_fail@plt+0x9174>
   1a750:	ldr	r3, [sp, #28]
   1a754:	cmp	r3, #0
   1a758:	mov	r3, #1
   1a75c:	streq	r3, [sp, #44]	; 0x2c
   1a760:	bne	1a5e4 <__assert_fail@plt+0x9458>
   1a764:	cmp	fp, #0
   1a768:	beq	1b45c <__assert_fail@plt+0xa2d0>
   1a76c:	ldr	r3, [sp, #32]
   1a770:	mov	r2, #39	; 0x27
   1a774:	mov	r7, #1
   1a778:	strb	r2, [r3]
   1a77c:	mov	r3, #0
   1a780:	str	r3, [sp, #28]
   1a784:	mov	r3, #1
   1a788:	str	r3, [sp, #52]	; 0x34
   1a78c:	ldr	r3, [pc, #3580]	; 1b590 <__assert_fail@plt+0xa404>
   1a790:	str	r3, [sp, #64]	; 0x40
   1a794:	mov	r3, #2
   1a798:	str	r3, [sp, #152]	; 0x98
   1a79c:	b	1a300 <__assert_fail@plt+0x9174>
   1a7a0:	ldr	r3, [sp, #24]
   1a7a4:	cmn	r3, #1
   1a7a8:	beq	1b3c0 <__assert_fail@plt+0xa234>
   1a7ac:	ldr	r3, [sp, #24]
   1a7b0:	subs	r3, r3, #1
   1a7b4:	movne	r3, #1
   1a7b8:	cmp	r3, #0
   1a7bc:	bne	1a7c8 <__assert_fail@plt+0x963c>
   1a7c0:	cmp	sl, #0
   1a7c4:	beq	1abb4 <__assert_fail@plt+0x9a28>
   1a7c8:	ldr	r3, [sp, #152]	; 0x98
   1a7cc:	mov	r5, #0
   1a7d0:	sub	r2, r3, #2
   1a7d4:	mov	r8, r5
   1a7d8:	clz	r2, r2
   1a7dc:	lsr	r2, r2, #5
   1a7e0:	ldr	r3, [sp, #60]	; 0x3c
   1a7e4:	ldr	r1, [sp, #28]
   1a7e8:	orr	r3, r2, r3
   1a7ec:	eor	r3, r3, #1
   1a7f0:	orr	r3, r1, r3
   1a7f4:	tst	r3, #255	; 0xff
   1a7f8:	bne	1af24 <__assert_fail@plt+0x9d98>
   1a7fc:	cmp	r6, #0
   1a800:	bne	1a950 <__assert_fail@plt+0x97c4>
   1a804:	ldr	r3, [sp, #40]	; 0x28
   1a808:	eor	r8, r8, #1
   1a80c:	and	r8, r8, r3
   1a810:	add	sl, sl, #1
   1a814:	uxtb	r6, r8
   1a818:	cmp	r6, #0
   1a81c:	beq	1a850 <__assert_fail@plt+0x96c4>
   1a820:	cmp	fp, r7
   1a824:	movhi	r2, #39	; 0x27
   1a828:	ldrhi	r3, [sp, #32]
   1a82c:	strbhi	r2, [r3, r7]
   1a830:	add	r3, r7, #1
   1a834:	cmp	fp, r3
   1a838:	movhi	r1, #39	; 0x27
   1a83c:	ldrhi	r2, [sp, #32]
   1a840:	add	r7, r7, #2
   1a844:	strbhi	r1, [r2, r3]
   1a848:	mov	r3, #0
   1a84c:	str	r3, [sp, #40]	; 0x28
   1a850:	cmp	r7, fp
   1a854:	ldrcc	r3, [sp, #32]
   1a858:	strbcc	r4, [r3, r7]
   1a85c:	ldr	r3, [sp, #36]	; 0x24
   1a860:	cmp	r5, #0
   1a864:	moveq	r3, #0
   1a868:	str	r3, [sp, #36]	; 0x24
   1a86c:	ldr	r3, [sp, #24]
   1a870:	add	r7, r7, #1
   1a874:	cmn	r3, #1
   1a878:	bne	1a31c <__assert_fail@plt+0x9190>
   1a87c:	ldr	r3, [sp, #56]	; 0x38
   1a880:	ldrb	r5, [r3, sl]
   1a884:	adds	r5, r5, #0
   1a888:	movne	r5, #1
   1a88c:	cmp	r5, #0
   1a890:	bne	1a330 <__assert_fail@plt+0x91a4>
   1a894:	ldr	r3, [sp, #152]	; 0x98
   1a898:	ldr	r1, [sp, #28]
   1a89c:	sub	r3, r3, #2
   1a8a0:	clz	r3, r3
   1a8a4:	lsr	r3, r3, #5
   1a8a8:	and	r9, r1, r3
   1a8ac:	cmp	r7, #0
   1a8b0:	movne	r2, #0
   1a8b4:	andeq	r2, r9, #1
   1a8b8:	cmp	r2, #0
   1a8bc:	bne	1b298 <__assert_fail@plt+0xa10c>
   1a8c0:	eor	r2, r1, #1
   1a8c4:	ands	r3, r3, r2
   1a8c8:	beq	1b754 <__assert_fail@plt+0xa5c8>
   1a8cc:	ldr	r2, [sp, #68]	; 0x44
   1a8d0:	cmp	r2, #0
   1a8d4:	beq	1b740 <__assert_fail@plt+0xa5b4>
   1a8d8:	ldr	r3, [sp, #36]	; 0x24
   1a8dc:	cmp	r3, #0
   1a8e0:	bne	1b6f8 <__assert_fail@plt+0xa56c>
   1a8e4:	ldr	r2, [sp, #72]	; 0x48
   1a8e8:	clz	r3, fp
   1a8ec:	cmp	r2, #0
   1a8f0:	lsr	r3, r3, #5
   1a8f4:	moveq	r3, #0
   1a8f8:	cmp	r3, #0
   1a8fc:	beq	1b698 <__assert_fail@plt+0xa50c>
   1a900:	str	r3, [sp, #68]	; 0x44
   1a904:	ldr	fp, [sp, #72]	; 0x48
   1a908:	b	1a2b8 <__assert_fail@plt+0x912c>
   1a90c:	ldr	r3, [sp, #152]	; 0x98
   1a910:	cmp	r3, #2
   1a914:	beq	1af68 <__assert_fail@plt+0x9ddc>
   1a918:	ldr	r3, [sp, #44]	; 0x2c
   1a91c:	ldr	r2, [sp, #28]
   1a920:	and	r2, r3, r2
   1a924:	ands	r2, r9, r2
   1a928:	bne	1af74 <__assert_fail@plt+0x9de8>
   1a92c:	mov	r4, #92	; 0x5c
   1a930:	mov	r3, r4
   1a934:	ldr	r1, [sp, #44]	; 0x2c
   1a938:	cmp	r1, #0
   1a93c:	moveq	r5, #0
   1a940:	moveq	r8, r1
   1a944:	beq	1a7e0 <__assert_fail@plt+0x9654>
   1a948:	mov	r4, r3
   1a94c:	mov	r5, #0
   1a950:	ldr	r3, [sp, #28]
   1a954:	cmp	r3, #0
   1a958:	bne	1af5c <__assert_fail@plt+0x9dd0>
   1a95c:	ldr	r3, [sp, #40]	; 0x28
   1a960:	eor	r9, r3, #1
   1a964:	and	r9, r9, r2
   1a968:	ands	r9, r9, #255	; 0xff
   1a96c:	beq	1a9b0 <__assert_fail@plt+0x9824>
   1a970:	cmp	fp, r7
   1a974:	movhi	r2, #39	; 0x27
   1a978:	ldrhi	r3, [sp, #32]
   1a97c:	str	r9, [sp, #40]	; 0x28
   1a980:	strbhi	r2, [r3, r7]
   1a984:	add	r3, r7, #1
   1a988:	cmp	fp, r3
   1a98c:	movhi	r1, #36	; 0x24
   1a990:	ldrhi	r2, [sp, #32]
   1a994:	strbhi	r1, [r2, r3]
   1a998:	add	r3, r7, #2
   1a99c:	cmp	fp, r3
   1a9a0:	add	r7, r7, #3
   1a9a4:	ldrhi	r2, [sp, #32]
   1a9a8:	movhi	r1, #39	; 0x27
   1a9ac:	strbhi	r1, [r2, r3]
   1a9b0:	cmp	fp, r7
   1a9b4:	movhi	r2, #92	; 0x5c
   1a9b8:	ldrhi	r3, [sp, #32]
   1a9bc:	add	sl, sl, #1
   1a9c0:	strbhi	r2, [r3, r7]
   1a9c4:	add	r7, r7, #1
   1a9c8:	b	1a850 <__assert_fail@plt+0x96c4>
   1a9cc:	ldr	r3, [sp, #152]	; 0x98
   1a9d0:	mov	r4, #11
   1a9d4:	sub	r2, r3, #2
   1a9d8:	mov	r3, #118	; 0x76
   1a9dc:	clz	r2, r2
   1a9e0:	lsr	r2, r2, #5
   1a9e4:	b	1a934 <__assert_fail@plt+0x97a8>
   1a9e8:	mov	r4, #10
   1a9ec:	mov	r3, #110	; 0x6e
   1a9f0:	ldr	r2, [sp, #152]	; 0x98
   1a9f4:	ldr	r1, [sp, #28]
   1a9f8:	sub	r2, r2, #2
   1a9fc:	clz	r2, r2
   1aa00:	lsr	r2, r2, #5
   1aa04:	ands	r1, r1, r2
   1aa08:	beq	1a934 <__assert_fail@plt+0x97a8>
   1aa0c:	ldr	sl, [sp, #32]
   1aa10:	mov	r8, fp
   1aa14:	mov	r2, r1
   1aa18:	mov	r3, #2
   1aa1c:	str	r3, [sp, #152]	; 0x98
   1aa20:	ldr	r9, [sp, #44]	; 0x2c
   1aa24:	ldr	r3, [sp, #152]	; 0x98
   1aa28:	and	r9, r9, r2
   1aa2c:	tst	r9, #255	; 0xff
   1aa30:	movne	r3, #4
   1aa34:	str	r3, [sp, #152]	; 0x98
   1aa38:	ldr	r3, [sp, #156]	; 0x9c
   1aa3c:	mov	ip, #0
   1aa40:	bic	r3, r3, #2
   1aa44:	str	r3, [sp, #4]
   1aa48:	ldr	r3, [sp, #168]	; 0xa8
   1aa4c:	ldr	r2, [sp, #56]	; 0x38
   1aa50:	str	r3, [sp, #16]
   1aa54:	ldr	r3, [sp, #164]	; 0xa4
   1aa58:	mov	r1, r8
   1aa5c:	str	r3, [sp, #12]
   1aa60:	ldr	r3, [sp, #152]	; 0x98
   1aa64:	mov	r0, sl
   1aa68:	str	r3, [sp]
   1aa6c:	str	ip, [sp, #8]
   1aa70:	ldr	r3, [sp, #24]
   1aa74:	bl	1a25c <__assert_fail@plt+0x90d0>
   1aa78:	mov	fp, r0
   1aa7c:	mov	r0, fp
   1aa80:	add	sp, sp, #116	; 0x74
   1aa84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1aa88:	ldr	r3, [sp, #152]	; 0x98
   1aa8c:	mov	r4, #8
   1aa90:	sub	r2, r3, #2
   1aa94:	mov	r3, #98	; 0x62
   1aa98:	clz	r2, r2
   1aa9c:	lsr	r2, r2, #5
   1aaa0:	b	1a934 <__assert_fail@plt+0x97a8>
   1aaa4:	ldr	r3, [sp, #152]	; 0x98
   1aaa8:	mov	r4, #7
   1aaac:	sub	r2, r3, #2
   1aab0:	mov	r3, #97	; 0x61
   1aab4:	clz	r2, r2
   1aab8:	lsr	r2, r2, #5
   1aabc:	b	1a934 <__assert_fail@plt+0x97a8>
   1aac0:	ldr	r3, [sp, #44]	; 0x2c
   1aac4:	cmp	r3, #0
   1aac8:	beq	1b2ac <__assert_fail@plt+0xa120>
   1aacc:	ldr	r3, [sp, #28]
   1aad0:	cmp	r3, #0
   1aad4:	bne	1b584 <__assert_fail@plt+0xa3f8>
   1aad8:	ldr	r3, [sp, #152]	; 0x98
   1aadc:	sub	r2, r3, #2
   1aae0:	ldr	r3, [sp, #40]	; 0x28
   1aae4:	clz	r2, r2
   1aae8:	eor	r3, r3, #1
   1aaec:	lsr	r2, r2, #5
   1aaf0:	ands	r3, r2, r3
   1aaf4:	moveq	r1, r7
   1aaf8:	beq	1ab3c <__assert_fail@plt+0x99b0>
   1aafc:	cmp	fp, r7
   1ab00:	movhi	r0, #39	; 0x27
   1ab04:	ldrhi	r1, [sp, #32]
   1ab08:	str	r3, [sp, #40]	; 0x28
   1ab0c:	strbhi	r0, [r1, r7]
   1ab10:	add	r1, r7, #1
   1ab14:	cmp	fp, r1
   1ab18:	movhi	ip, #36	; 0x24
   1ab1c:	ldrhi	r0, [sp, #32]
   1ab20:	strbhi	ip, [r0, r1]
   1ab24:	add	r1, r7, #2
   1ab28:	cmp	fp, r1
   1ab2c:	movhi	ip, #39	; 0x27
   1ab30:	ldrhi	r0, [sp, #32]
   1ab34:	strbhi	ip, [r0, r1]
   1ab38:	add	r1, r7, #3
   1ab3c:	cmp	fp, r1
   1ab40:	movhi	r0, #92	; 0x5c
   1ab44:	ldrhi	r3, [sp, #32]
   1ab48:	add	r7, r1, #1
   1ab4c:	strbhi	r0, [r3, r1]
   1ab50:	cmp	r8, #0
   1ab54:	beq	1b498 <__assert_fail@plt+0xa30c>
   1ab58:	ldr	r0, [sp, #24]
   1ab5c:	add	r3, sl, #1
   1ab60:	cmp	r3, r0
   1ab64:	bcs	1b3d4 <__assert_fail@plt+0xa248>
   1ab68:	ldr	r0, [sp, #56]	; 0x38
   1ab6c:	ldrb	r3, [r0, r3]
   1ab70:	sub	r3, r3, #48	; 0x30
   1ab74:	cmp	r3, #9
   1ab78:	bhi	1b3d4 <__assert_fail@plt+0xa248>
   1ab7c:	cmp	fp, r7
   1ab80:	movhi	r3, #48	; 0x30
   1ab84:	ldrhi	r0, [sp, #32]
   1ab88:	ldr	r5, [sp, #28]
   1ab8c:	mov	r4, #48	; 0x30
   1ab90:	strbhi	r3, [r0, r7]
   1ab94:	add	r3, r1, #2
   1ab98:	cmp	fp, r3
   1ab9c:	movhi	r0, #48	; 0x30
   1aba0:	ldrhi	ip, [sp, #32]
   1aba4:	add	r7, r1, #3
   1aba8:	strbhi	r0, [ip, r3]
   1abac:	b	1a7e0 <__assert_fail@plt+0x9654>
   1abb0:	mov	r5, #0
   1abb4:	ldr	r3, [sp, #152]	; 0x98
   1abb8:	sub	r2, r3, #2
   1abbc:	ldr	r3, [sp, #28]
   1abc0:	clz	r2, r2
   1abc4:	lsr	r2, r2, #5
   1abc8:	ands	r8, r3, r2
   1abcc:	beq	1a7e0 <__assert_fail@plt+0x9654>
   1abd0:	mov	r3, r8
   1abd4:	mov	r2, r3
   1abd8:	mov	r3, #2
   1abdc:	ldr	sl, [sp, #32]
   1abe0:	mov	r8, fp
   1abe4:	str	r3, [sp, #152]	; 0x98
   1abe8:	b	1aa20 <__assert_fail@plt+0x9894>
   1abec:	ldr	r3, [sp, #152]	; 0x98
   1abf0:	cmp	r3, #2
   1abf4:	beq	1b318 <__assert_fail@plt+0xa18c>
   1abf8:	cmp	r3, #5
   1abfc:	beq	1b2d8 <__assert_fail@plt+0xa14c>
   1ac00:	mov	r5, #0
   1ac04:	sub	r2, r3, #2
   1ac08:	mov	r8, r5
   1ac0c:	clz	r2, r2
   1ac10:	mov	r4, #63	; 0x3f
   1ac14:	lsr	r2, r2, #5
   1ac18:	b	1a7e0 <__assert_fail@plt+0x9654>
   1ac1c:	ldr	r3, [sp, #152]	; 0x98
   1ac20:	cmp	r3, #2
   1ac24:	beq	1b338 <__assert_fail@plt+0xa1ac>
   1ac28:	mov	r2, #0
   1ac2c:	str	r5, [sp, #68]	; 0x44
   1ac30:	mov	r8, r2
   1ac34:	mov	r4, #39	; 0x27
   1ac38:	b	1a7e0 <__assert_fail@plt+0x9654>
   1ac3c:	mov	r4, #13
   1ac40:	mov	r3, #114	; 0x72
   1ac44:	b	1a9f0 <__assert_fail@plt+0x9864>
   1ac48:	ldr	r3, [sp, #152]	; 0x98
   1ac4c:	mov	r8, #0
   1ac50:	sub	r2, r3, #2
   1ac54:	clz	r2, r2
   1ac58:	lsr	r2, r2, #5
   1ac5c:	b	1a7e0 <__assert_fail@plt+0x9654>
   1ac60:	ldr	r3, [sp, #152]	; 0x98
   1ac64:	mov	r4, #12
   1ac68:	sub	r2, r3, #2
   1ac6c:	mov	r3, #102	; 0x66
   1ac70:	clz	r2, r2
   1ac74:	lsr	r2, r2, #5
   1ac78:	b	1a934 <__assert_fail@plt+0x97a8>
   1ac7c:	mov	r5, r6
   1ac80:	b	1abb4 <__assert_fail@plt+0x9a28>
   1ac84:	ldr	r3, [sp, #152]	; 0x98
   1ac88:	sub	r2, r3, #2
   1ac8c:	mov	r3, #116	; 0x74
   1ac90:	clz	r2, r2
   1ac94:	lsr	r2, r2, #5
   1ac98:	b	1a934 <__assert_fail@plt+0x97a8>
   1ac9c:	ldr	r8, [sp, #76]	; 0x4c
   1aca0:	cmp	r8, #1
   1aca4:	bne	1b154 <__assert_fail@plt+0x9fc8>
   1aca8:	bl	11054 <__ctype_b_loc@plt>
   1acac:	sxth	r3, r4
   1acb0:	mov	ip, r8
   1acb4:	lsl	r3, r3, #1
   1acb8:	ldr	r2, [r0]
   1acbc:	ldrh	r3, [r2, r3]
   1acc0:	and	r3, r3, #16384	; 0x4000
   1acc4:	cmp	r3, #0
   1acc8:	movne	r5, #1
   1accc:	moveq	r5, #0
   1acd0:	moveq	r3, #1
   1acd4:	movne	r3, #0
   1acd8:	ldr	r2, [sp, #44]	; 0x2c
   1acdc:	and	r3, r3, r2
   1ace0:	ands	r8, r3, #255	; 0xff
   1ace4:	bne	1afe8 <__assert_fail@plt+0x9e5c>
   1ace8:	ldr	r3, [sp, #152]	; 0x98
   1acec:	sub	r2, r3, #2
   1acf0:	clz	r2, r2
   1acf4:	lsr	r2, r2, #5
   1acf8:	b	1a7e0 <__assert_fail@plt+0x9654>
   1acfc:	ldr	r3, [sp, #56]	; 0x38
   1ad00:	add	r3, r3, sl
   1ad04:	str	r3, [sp, #48]	; 0x30
   1ad08:	ldr	r3, [sp, #48]	; 0x30
   1ad0c:	mov	r6, #0
   1ad10:	ldrb	r4, [r3]
   1ad14:	cmp	r4, #126	; 0x7e
   1ad18:	ldrls	pc, [pc, r4, lsl #2]
   1ad1c:	b	1ac9c <__assert_fail@plt+0x9b10>
   1ad20:	andeq	sl, r1, r0, asr #21
   1ad24:	muleq	r1, ip, ip
   1ad28:	muleq	r1, ip, ip
   1ad2c:	muleq	r1, ip, ip
   1ad30:	muleq	r1, ip, ip
   1ad34:	muleq	r1, ip, ip
   1ad38:	muleq	r1, ip, ip
   1ad3c:	andeq	sl, r1, r4, lsr #21
   1ad40:	andeq	sl, r1, r8, lsl #21
   1ad44:	andeq	sl, r1, ip, lsl pc
   1ad48:	andeq	sl, r1, r8, ror #19
   1ad4c:	andeq	sl, r1, ip, asr #19
   1ad50:	andeq	sl, r1, r0, ror #24
   1ad54:	andeq	sl, r1, ip, lsr ip
   1ad58:	muleq	r1, ip, ip
   1ad5c:	muleq	r1, ip, ip
   1ad60:	muleq	r1, ip, ip
   1ad64:	muleq	r1, ip, ip
   1ad68:	muleq	r1, ip, ip
   1ad6c:	muleq	r1, ip, ip
   1ad70:	muleq	r1, ip, ip
   1ad74:	muleq	r1, ip, ip
   1ad78:	muleq	r1, ip, ip
   1ad7c:	muleq	r1, ip, ip
   1ad80:	muleq	r1, ip, ip
   1ad84:	muleq	r1, ip, ip
   1ad88:	muleq	r1, ip, ip
   1ad8c:	muleq	r1, ip, ip
   1ad90:	muleq	r1, ip, ip
   1ad94:	muleq	r1, ip, ip
   1ad98:	muleq	r1, ip, ip
   1ad9c:	muleq	r1, ip, ip
   1ada0:			; <UNDEFINED> instruction: 0x0001abb4
   1ada4:			; <UNDEFINED> instruction: 0x0001abb0
   1ada8:			; <UNDEFINED> instruction: 0x0001abb0
   1adac:	andeq	sl, r1, r0, asr #15
   1adb0:			; <UNDEFINED> instruction: 0x0001abb0
   1adb4:	andeq	sl, r1, r8, asr #24
   1adb8:			; <UNDEFINED> instruction: 0x0001abb0
   1adbc:	andeq	sl, r1, ip, lsl ip
   1adc0:			; <UNDEFINED> instruction: 0x0001abb0
   1adc4:			; <UNDEFINED> instruction: 0x0001abb0
   1adc8:			; <UNDEFINED> instruction: 0x0001abb0
   1adcc:	andeq	sl, r1, r8, asr #24
   1add0:	andeq	sl, r1, r8, asr #24
   1add4:	andeq	sl, r1, r8, asr #24
   1add8:	andeq	sl, r1, r8, asr #24
   1addc:	andeq	sl, r1, r8, asr #24
   1ade0:	andeq	sl, r1, r8, asr #24
   1ade4:	andeq	sl, r1, r8, asr #24
   1ade8:	andeq	sl, r1, r8, asr #24
   1adec:	andeq	sl, r1, r8, asr #24
   1adf0:	andeq	sl, r1, r8, asr #24
   1adf4:	andeq	sl, r1, r8, asr #24
   1adf8:	andeq	sl, r1, r8, asr #24
   1adfc:	andeq	sl, r1, r8, asr #24
   1ae00:	andeq	sl, r1, r8, asr #24
   1ae04:	andeq	sl, r1, r8, asr #24
   1ae08:	andeq	sl, r1, r8, asr #24
   1ae0c:			; <UNDEFINED> instruction: 0x0001abb0
   1ae10:			; <UNDEFINED> instruction: 0x0001abb0
   1ae14:			; <UNDEFINED> instruction: 0x0001abb0
   1ae18:			; <UNDEFINED> instruction: 0x0001abb0
   1ae1c:	andeq	sl, r1, ip, ror #23
   1ae20:	muleq	r1, ip, ip
   1ae24:	andeq	sl, r1, r8, asr #24
   1ae28:	andeq	sl, r1, r8, asr #24
   1ae2c:	andeq	sl, r1, r8, asr #24
   1ae30:	andeq	sl, r1, r8, asr #24
   1ae34:	andeq	sl, r1, r8, asr #24
   1ae38:	andeq	sl, r1, r8, asr #24
   1ae3c:	andeq	sl, r1, r8, asr #24
   1ae40:	andeq	sl, r1, r8, asr #24
   1ae44:	andeq	sl, r1, r8, asr #24
   1ae48:	andeq	sl, r1, r8, asr #24
   1ae4c:	andeq	sl, r1, r8, asr #24
   1ae50:	andeq	sl, r1, r8, asr #24
   1ae54:	andeq	sl, r1, r8, asr #24
   1ae58:	andeq	sl, r1, r8, asr #24
   1ae5c:	andeq	sl, r1, r8, asr #24
   1ae60:	andeq	sl, r1, r8, asr #24
   1ae64:	andeq	sl, r1, r8, asr #24
   1ae68:	andeq	sl, r1, r8, asr #24
   1ae6c:	andeq	sl, r1, r8, asr #24
   1ae70:	andeq	sl, r1, r8, asr #24
   1ae74:	andeq	sl, r1, r8, asr #24
   1ae78:	andeq	sl, r1, r8, asr #24
   1ae7c:	andeq	sl, r1, r8, asr #24
   1ae80:	andeq	sl, r1, r8, asr #24
   1ae84:	andeq	sl, r1, r8, asr #24
   1ae88:	andeq	sl, r1, r8, asr #24
   1ae8c:			; <UNDEFINED> instruction: 0x0001abb0
   1ae90:	andeq	sl, r1, ip, lsl #18
   1ae94:	andeq	sl, r1, r8, asr #24
   1ae98:			; <UNDEFINED> instruction: 0x0001abb0
   1ae9c:	andeq	sl, r1, r8, asr #24
   1aea0:			; <UNDEFINED> instruction: 0x0001abb0
   1aea4:	andeq	sl, r1, r8, asr #24
   1aea8:	andeq	sl, r1, r8, asr #24
   1aeac:	andeq	sl, r1, r8, asr #24
   1aeb0:	andeq	sl, r1, r8, asr #24
   1aeb4:	andeq	sl, r1, r8, asr #24
   1aeb8:	andeq	sl, r1, r8, asr #24
   1aebc:	andeq	sl, r1, r8, asr #24
   1aec0:	andeq	sl, r1, r8, asr #24
   1aec4:	andeq	sl, r1, r8, asr #24
   1aec8:	andeq	sl, r1, r8, asr #24
   1aecc:	andeq	sl, r1, r8, asr #24
   1aed0:	andeq	sl, r1, r8, asr #24
   1aed4:	andeq	sl, r1, r8, asr #24
   1aed8:	andeq	sl, r1, r8, asr #24
   1aedc:	andeq	sl, r1, r8, asr #24
   1aee0:	andeq	sl, r1, r8, asr #24
   1aee4:	andeq	sl, r1, r8, asr #24
   1aee8:	andeq	sl, r1, r8, asr #24
   1aeec:	andeq	sl, r1, r8, asr #24
   1aef0:	andeq	sl, r1, r8, asr #24
   1aef4:	andeq	sl, r1, r8, asr #24
   1aef8:	andeq	sl, r1, r8, asr #24
   1aefc:	andeq	sl, r1, r8, asr #24
   1af00:	andeq	sl, r1, r8, asr #24
   1af04:	andeq	sl, r1, r8, asr #24
   1af08:	andeq	sl, r1, r8, asr #24
   1af0c:	andeq	sl, r1, r0, lsr #15
   1af10:			; <UNDEFINED> instruction: 0x0001abb0
   1af14:	andeq	sl, r1, r0, lsr #15
   1af18:	andeq	sl, r1, r0, asr #15
   1af1c:	mov	r3, #116	; 0x74
   1af20:	b	1a9f0 <__assert_fail@plt+0x9864>
   1af24:	ldr	r3, [sp, #160]	; 0xa0
   1af28:	cmp	r3, #0
   1af2c:	beq	1a7fc <__assert_fail@plt+0x9670>
   1af30:	lsr	r3, r4, #5
   1af34:	ldr	r0, [sp, #160]	; 0xa0
   1af38:	uxtb	r3, r3
   1af3c:	and	r1, r4, #31
   1af40:	ldr	r0, [r0, r3, lsl #2]
   1af44:	lsr	r3, r0, r1
   1af48:	tst	r3, #1
   1af4c:	beq	1a7fc <__assert_fail@plt+0x9670>
   1af50:	ldr	r3, [sp, #28]
   1af54:	cmp	r3, #0
   1af58:	beq	1a95c <__assert_fail@plt+0x97d0>
   1af5c:	ldr	sl, [sp, #32]
   1af60:	mov	r8, fp
   1af64:	b	1aa20 <__assert_fail@plt+0x9894>
   1af68:	ldr	r3, [sp, #28]
   1af6c:	cmp	r3, #0
   1af70:	bne	1b4c4 <__assert_fail@plt+0xa338>
   1af74:	add	sl, sl, #1
   1af78:	ldr	r6, [sp, #40]	; 0x28
   1af7c:	mov	r5, #0
   1af80:	mov	r4, #92	; 0x5c
   1af84:	b	1a818 <__assert_fail@plt+0x968c>
   1af88:	cmp	r9, r8
   1af8c:	bne	1b1fc <__assert_fail@plt+0xa070>
   1af90:	ldr	r0, [sp, #100]	; 0x64
   1af94:	bl	10fa0 <iswprint@plt>
   1af98:	add	r5, r5, r4
   1af9c:	cmp	r0, #0
   1afa0:	add	r0, sp, #104	; 0x68
   1afa4:	moveq	r6, #0
   1afa8:	bl	10f4c <mbsinit@plt>
   1afac:	cmp	r0, #0
   1afb0:	beq	1b190 <__assert_fail@plt+0xa004>
   1afb4:	mov	r2, r6
   1afb8:	mov	ip, r5
   1afbc:	eor	r5, r2, #1
   1afc0:	ldr	r4, [sp, #80]	; 0x50
   1afc4:	ldr	r6, [sp, #84]	; 0x54
   1afc8:	ldr	r7, [sp, #88]	; 0x58
   1afcc:	uxtb	r5, r5
   1afd0:	cmp	ip, #1
   1afd4:	bls	1b4d4 <__assert_fail@plt+0xa348>
   1afd8:	ldr	r3, [sp, #44]	; 0x2c
   1afdc:	and	r8, r3, r5
   1afe0:	mov	r5, r2
   1afe4:	uxtb	r8, r8
   1afe8:	add	r2, sl, ip
   1afec:	ldr	r0, [sp, #48]	; 0x30
   1aff0:	mov	r1, #0
   1aff4:	str	r5, [sp, #48]	; 0x30
   1aff8:	ldr	r9, [sp, #28]
   1affc:	ldr	ip, [sp, #40]	; 0x28
   1b000:	ldr	r3, [sp, #32]
   1b004:	ldr	r5, [sp, #152]	; 0x98
   1b008:	b	1b0c4 <__assert_fail@plt+0x9f38>
   1b00c:	cmp	r9, #0
   1b010:	bne	1b3e8 <__assert_fail@plt+0xa25c>
   1b014:	eor	r1, ip, #1
   1b018:	cmp	r5, #2
   1b01c:	movne	r1, #0
   1b020:	andeq	r1, r1, #1
   1b024:	cmp	r1, #0
   1b028:	beq	1b060 <__assert_fail@plt+0x9ed4>
   1b02c:	cmp	fp, r7
   1b030:	movhi	ip, #39	; 0x27
   1b034:	strbhi	ip, [r3, r7]
   1b038:	add	ip, r7, #1
   1b03c:	cmp	fp, ip
   1b040:	movhi	lr, #36	; 0x24
   1b044:	strbhi	lr, [r3, ip]
   1b048:	add	ip, r7, #2
   1b04c:	cmp	fp, ip
   1b050:	movhi	lr, #39	; 0x27
   1b054:	strbhi	lr, [r3, ip]
   1b058:	add	r7, r7, #3
   1b05c:	mov	ip, r1
   1b060:	cmp	fp, r7
   1b064:	movhi	r1, #92	; 0x5c
   1b068:	strbhi	r1, [r3, r7]
   1b06c:	add	r1, r7, #1
   1b070:	cmp	fp, r1
   1b074:	lsrhi	lr, r4, #6
   1b078:	addhi	lr, lr, #48	; 0x30
   1b07c:	strbhi	lr, [r3, r1]
   1b080:	add	lr, r7, #2
   1b084:	cmp	fp, lr
   1b088:	lsrhi	r1, r4, #3
   1b08c:	andhi	r1, r1, #7
   1b090:	addhi	r1, r1, #48	; 0x30
   1b094:	add	sl, sl, #1
   1b098:	strbhi	r1, [r3, lr]
   1b09c:	and	r4, r4, #7
   1b0a0:	cmp	r2, sl
   1b0a4:	add	r4, r4, #48	; 0x30
   1b0a8:	add	r7, r7, #3
   1b0ac:	bls	1b40c <__assert_fail@plt+0xa280>
   1b0b0:	mov	r1, r8
   1b0b4:	cmp	fp, r7
   1b0b8:	strbhi	r4, [r3, r7]
   1b0bc:	ldrb	r4, [r0, #1]!
   1b0c0:	add	r7, r7, #1
   1b0c4:	cmp	r8, #0
   1b0c8:	bne	1b00c <__assert_fail@plt+0x9e80>
   1b0cc:	cmp	r6, #0
   1b0d0:	bne	1b120 <__assert_fail@plt+0x9f94>
   1b0d4:	eor	r6, r1, #1
   1b0d8:	and	r6, r6, ip
   1b0dc:	add	sl, sl, #1
   1b0e0:	cmp	r2, sl
   1b0e4:	uxtb	r6, r6
   1b0e8:	bls	1b148 <__assert_fail@plt+0x9fbc>
   1b0ec:	cmp	r6, #0
   1b0f0:	beq	1b0b4 <__assert_fail@plt+0x9f28>
   1b0f4:	cmp	fp, r7
   1b0f8:	movhi	ip, #39	; 0x27
   1b0fc:	strbhi	ip, [r3, r7]
   1b100:	add	ip, r7, #1
   1b104:	cmp	fp, ip
   1b108:	movhi	lr, #39	; 0x27
   1b10c:	strbhi	lr, [r3, ip]
   1b110:	add	r7, r7, #2
   1b114:	mov	r6, r8
   1b118:	mov	ip, r8
   1b11c:	b	1b0b4 <__assert_fail@plt+0x9f28>
   1b120:	cmp	fp, r7
   1b124:	eor	r6, r1, #1
   1b128:	movhi	lr, #92	; 0x5c
   1b12c:	and	r6, r6, ip
   1b130:	add	sl, sl, #1
   1b134:	strbhi	lr, [r3, r7]
   1b138:	cmp	r2, sl
   1b13c:	add	r7, r7, #1
   1b140:	uxtb	r6, r6
   1b144:	bhi	1b0ec <__assert_fail@plt+0x9f60>
   1b148:	str	ip, [sp, #40]	; 0x28
   1b14c:	ldr	r5, [sp, #48]	; 0x30
   1b150:	b	1a818 <__assert_fail@plt+0x968c>
   1b154:	ldr	r3, [sp, #24]
   1b158:	cmn	r3, #1
   1b15c:	mov	r3, #0
   1b160:	str	r3, [sp, #104]	; 0x68
   1b164:	str	r3, [sp, #108]	; 0x6c
   1b168:	beq	1b488 <__assert_fail@plt+0xa2fc>
   1b16c:	mov	r2, r5
   1b170:	mov	r3, #0
   1b174:	str	r7, [sp, #88]	; 0x58
   1b178:	ldr	r7, [sp, #152]	; 0x98
   1b17c:	str	r5, [sp, #92]	; 0x5c
   1b180:	str	r6, [sp, #84]	; 0x54
   1b184:	mov	r5, r3
   1b188:	mov	r6, r2
   1b18c:	str	r4, [sp, #80]	; 0x50
   1b190:	ldr	r3, [sp, #56]	; 0x38
   1b194:	add	r9, sl, r5
   1b198:	add	r8, r3, r9
   1b19c:	ldr	r3, [sp, #24]
   1b1a0:	mov	r1, r8
   1b1a4:	sub	r2, r3, r9
   1b1a8:	add	r0, sp, #100	; 0x64
   1b1ac:	add	r3, sp, #104	; 0x68
   1b1b0:	bl	1d4c4 <__assert_fail@plt+0xc338>
   1b1b4:	subs	r4, r0, #0
   1b1b8:	beq	1b560 <__assert_fail@plt+0xa3d4>
   1b1bc:	cmn	r4, #1
   1b1c0:	beq	1b540 <__assert_fail@plt+0xa3b4>
   1b1c4:	cmn	r4, #2
   1b1c8:	beq	1b4e0 <__assert_fail@plt+0xa354>
   1b1cc:	ldr	r2, [sp, #28]
   1b1d0:	cmp	r7, #2
   1b1d4:	movne	r2, #0
   1b1d8:	andeq	r2, r2, #1
   1b1dc:	cmp	r2, #0
   1b1e0:	beq	1af90 <__assert_fail@plt+0x9e04>
   1b1e4:	cmp	r4, #1
   1b1e8:	beq	1af90 <__assert_fail@plt+0x9e04>
   1b1ec:	sub	r3, r4, #1
   1b1f0:	add	r9, r3, r9
   1b1f4:	ldr	r3, [sp, #56]	; 0x38
   1b1f8:	add	r9, r3, r9
   1b1fc:	ldrb	r3, [r8, #1]!
   1b200:	sub	r3, r3, #91	; 0x5b
   1b204:	cmp	r3, #33	; 0x21
   1b208:	ldrls	pc, [pc, r3, lsl #2]
   1b20c:	b	1af88 <__assert_fail@plt+0x9dfc>
   1b210:	muleq	r1, r8, r2
   1b214:	muleq	r1, r8, r2
   1b218:	andeq	sl, r1, r8, lsl #31
   1b21c:	muleq	r1, r8, r2
   1b220:	andeq	sl, r1, r8, lsl #31
   1b224:	muleq	r1, r8, r2
   1b228:	andeq	sl, r1, r8, lsl #31
   1b22c:	andeq	sl, r1, r8, lsl #31
   1b230:	andeq	sl, r1, r8, lsl #31
   1b234:	andeq	sl, r1, r8, lsl #31
   1b238:	andeq	sl, r1, r8, lsl #31
   1b23c:	andeq	sl, r1, r8, lsl #31
   1b240:	andeq	sl, r1, r8, lsl #31
   1b244:	andeq	sl, r1, r8, lsl #31
   1b248:	andeq	sl, r1, r8, lsl #31
   1b24c:	andeq	sl, r1, r8, lsl #31
   1b250:	andeq	sl, r1, r8, lsl #31
   1b254:	andeq	sl, r1, r8, lsl #31
   1b258:	andeq	sl, r1, r8, lsl #31
   1b25c:	andeq	sl, r1, r8, lsl #31
   1b260:	andeq	sl, r1, r8, lsl #31
   1b264:	andeq	sl, r1, r8, lsl #31
   1b268:	andeq	sl, r1, r8, lsl #31
   1b26c:	andeq	sl, r1, r8, lsl #31
   1b270:	andeq	sl, r1, r8, lsl #31
   1b274:	andeq	sl, r1, r8, lsl #31
   1b278:	andeq	sl, r1, r8, lsl #31
   1b27c:	andeq	sl, r1, r8, lsl #31
   1b280:	andeq	sl, r1, r8, lsl #31
   1b284:	andeq	sl, r1, r8, lsl #31
   1b288:	andeq	sl, r1, r8, lsl #31
   1b28c:	andeq	sl, r1, r8, lsl #31
   1b290:	andeq	sl, r1, r8, lsl #31
   1b294:	muleq	r1, r8, r2
   1b298:	mov	r3, #2
   1b29c:	ldr	sl, [sp, #32]
   1b2a0:	mov	r8, fp
   1b2a4:	str	r3, [sp, #152]	; 0x98
   1b2a8:	b	1aa20 <__assert_fail@plt+0x9894>
   1b2ac:	ldr	r3, [sp, #156]	; 0x9c
   1b2b0:	tst	r3, #1
   1b2b4:	bne	1b3e0 <__assert_fail@plt+0xa254>
   1b2b8:	ldr	r3, [sp, #152]	; 0x98
   1b2bc:	ldr	r4, [sp, #44]	; 0x2c
   1b2c0:	sub	r2, r3, #2
   1b2c4:	mov	r5, #0
   1b2c8:	clz	r2, r2
   1b2cc:	mov	r8, r4
   1b2d0:	lsr	r2, r2, #5
   1b2d4:	b	1a7e0 <__assert_fail@plt+0x9654>
   1b2d8:	ldr	r3, [sp, #156]	; 0x9c
   1b2dc:	ands	r9, r3, #4
   1b2e0:	beq	1b418 <__assert_fail@plt+0xa28c>
   1b2e4:	ldr	r2, [sp, #24]
   1b2e8:	add	r3, sl, #2
   1b2ec:	cmp	r3, r2
   1b2f0:	bcs	1b304 <__assert_fail@plt+0xa178>
   1b2f4:	ldr	r2, [sp, #48]	; 0x30
   1b2f8:	ldrb	r4, [r2, #1]
   1b2fc:	cmp	r4, #63	; 0x3f
   1b300:	beq	1b5a0 <__assert_fail@plt+0xa414>
   1b304:	mov	r2, #0
   1b308:	mov	r8, r2
   1b30c:	mov	r5, r2
   1b310:	mov	r4, #63	; 0x3f
   1b314:	b	1a7e0 <__assert_fail@plt+0x9654>
   1b318:	ldr	r3, [sp, #28]
   1b31c:	cmp	r3, #0
   1b320:	bne	1b644 <__assert_fail@plt+0xa4b8>
   1b324:	mov	r2, r5
   1b328:	mov	r8, r3
   1b32c:	mov	r5, #0
   1b330:	mov	r4, #63	; 0x3f
   1b334:	b	1a7e0 <__assert_fail@plt+0x9654>
   1b338:	ldr	r3, [sp, #28]
   1b33c:	cmp	r3, #0
   1b340:	bne	1b644 <__assert_fail@plt+0xa4b8>
   1b344:	ldr	r2, [sp, #72]	; 0x48
   1b348:	adds	r3, fp, #0
   1b34c:	movne	r3, #1
   1b350:	cmp	r2, #0
   1b354:	movne	r3, #0
   1b358:	cmp	r3, #0
   1b35c:	strne	fp, [sp, #72]	; 0x48
   1b360:	movne	fp, #0
   1b364:	bne	1b3a0 <__assert_fail@plt+0xa214>
   1b368:	cmp	fp, r7
   1b36c:	movhi	r2, #39	; 0x27
   1b370:	ldrhi	r3, [sp, #32]
   1b374:	strbhi	r2, [r3, r7]
   1b378:	add	r3, r7, #1
   1b37c:	cmp	fp, r3
   1b380:	movhi	r1, #92	; 0x5c
   1b384:	ldrhi	r2, [sp, #32]
   1b388:	strbhi	r1, [r2, r3]
   1b38c:	add	r3, r7, #2
   1b390:	cmp	fp, r3
   1b394:	movhi	r1, #39	; 0x27
   1b398:	ldrhi	r2, [sp, #32]
   1b39c:	strbhi	r1, [r2, r3]
   1b3a0:	ldr	r3, [sp, #28]
   1b3a4:	add	r7, r7, #3
   1b3a8:	mov	r2, r5
   1b3ac:	mov	r8, r3
   1b3b0:	str	r5, [sp, #68]	; 0x44
   1b3b4:	str	r3, [sp, #40]	; 0x28
   1b3b8:	mov	r4, #39	; 0x27
   1b3bc:	b	1a7e0 <__assert_fail@plt+0x9654>
   1b3c0:	ldr	r3, [sp, #56]	; 0x38
   1b3c4:	ldrb	r3, [r3, #1]
   1b3c8:	adds	r3, r3, #0
   1b3cc:	movne	r3, #1
   1b3d0:	b	1a7b8 <__assert_fail@plt+0x962c>
   1b3d4:	ldr	r5, [sp, #28]
   1b3d8:	mov	r4, #48	; 0x30
   1b3dc:	b	1a7e0 <__assert_fail@plt+0x9654>
   1b3e0:	add	sl, sl, #1
   1b3e4:	b	1a310 <__assert_fail@plt+0x9184>
   1b3e8:	mov	sl, r3
   1b3ec:	ldr	r3, [sp, #28]
   1b3f0:	mov	r8, fp
   1b3f4:	str	r3, [sp, #44]	; 0x2c
   1b3f8:	ldr	r3, [sp, #152]	; 0x98
   1b3fc:	sub	r2, r3, #2
   1b400:	clz	r2, r2
   1b404:	lsr	r2, r2, #5
   1b408:	b	1aa20 <__assert_fail@plt+0x9894>
   1b40c:	str	ip, [sp, #40]	; 0x28
   1b410:	ldr	r5, [sp, #48]	; 0x30
   1b414:	b	1a850 <__assert_fail@plt+0x96c4>
   1b418:	mov	r2, r9
   1b41c:	mov	r8, r9
   1b420:	mov	r5, #0
   1b424:	mov	r4, #63	; 0x3f
   1b428:	b	1a7e0 <__assert_fail@plt+0x9654>
   1b42c:	cmp	fp, #0
   1b430:	beq	1b4a8 <__assert_fail@plt+0xa31c>
   1b434:	ldr	r1, [sp, #32]
   1b438:	mov	r3, #34	; 0x22
   1b43c:	mov	r2, #1
   1b440:	strb	r3, [r1]
   1b444:	ldr	r3, [pc, #332]	; 1b598 <__assert_fail@plt+0xa40c>
   1b448:	str	r2, [sp, #52]	; 0x34
   1b44c:	mov	r7, r2
   1b450:	str	r2, [sp, #44]	; 0x2c
   1b454:	str	r3, [sp, #64]	; 0x40
   1b458:	b	1a300 <__assert_fail@plt+0x9174>
   1b45c:	ldr	r3, [pc, #300]	; 1b590 <__assert_fail@plt+0xa404>
   1b460:	str	r3, [sp, #64]	; 0x40
   1b464:	mov	r3, #0
   1b468:	str	r3, [sp, #28]
   1b46c:	mov	r3, #1
   1b470:	str	r3, [sp, #52]	; 0x34
   1b474:	mov	r7, r3
   1b478:	mov	r3, #2
   1b47c:	str	r3, [sp, #152]	; 0x98
   1b480:	b	1a300 <__assert_fail@plt+0x9174>
   1b484:	bl	11168 <abort@plt>
   1b488:	ldr	r0, [sp, #56]	; 0x38
   1b48c:	bl	11078 <strlen@plt>
   1b490:	str	r0, [sp, #24]
   1b494:	b	1b16c <__assert_fail@plt+0x9fe0>
   1b498:	mov	r5, r8
   1b49c:	mov	r4, #48	; 0x30
   1b4a0:	ldr	r8, [sp, #44]	; 0x2c
   1b4a4:	b	1a7e0 <__assert_fail@plt+0x9654>
   1b4a8:	mov	r3, #1
   1b4ac:	str	r3, [sp, #52]	; 0x34
   1b4b0:	mov	r7, r3
   1b4b4:	str	r3, [sp, #44]	; 0x2c
   1b4b8:	ldr	r3, [pc, #216]	; 1b598 <__assert_fail@plt+0xa40c>
   1b4bc:	str	r3, [sp, #64]	; 0x40
   1b4c0:	b	1a300 <__assert_fail@plt+0x9174>
   1b4c4:	ldr	sl, [sp, #32]
   1b4c8:	mov	r8, fp
   1b4cc:	mov	r2, r3
   1b4d0:	b	1aa20 <__assert_fail@plt+0x9894>
   1b4d4:	mov	r3, r5
   1b4d8:	mov	r5, r2
   1b4dc:	b	1acd8 <__assert_fail@plt+0x9b4c>
   1b4e0:	ldr	r1, [sp, #24]
   1b4e4:	mov	r2, r5
   1b4e8:	cmp	r1, r9
   1b4ec:	mov	ip, r5
   1b4f0:	ldr	r4, [sp, #80]	; 0x50
   1b4f4:	ldr	r5, [sp, #92]	; 0x5c
   1b4f8:	ldr	r6, [sp, #84]	; 0x54
   1b4fc:	ldr	r7, [sp, #88]	; 0x58
   1b500:	bls	1b534 <__assert_fail@plt+0xa3a8>
   1b504:	ldrb	r3, [r8]
   1b508:	cmp	r3, #0
   1b50c:	bne	1b520 <__assert_fail@plt+0xa394>
   1b510:	b	1b538 <__assert_fail@plt+0xa3ac>
   1b514:	ldrb	r3, [r8, #1]!
   1b518:	cmp	r3, #0
   1b51c:	beq	1b638 <__assert_fail@plt+0xa4ac>
   1b520:	add	r2, r2, #1
   1b524:	add	r3, sl, r2
   1b528:	cmp	r1, r3
   1b52c:	bhi	1b514 <__assert_fail@plt+0xa388>
   1b530:	mov	ip, r2
   1b534:	mov	r3, #0
   1b538:	mov	r2, r3
   1b53c:	b	1afd0 <__assert_fail@plt+0x9e44>
   1b540:	mov	r3, #0
   1b544:	mov	ip, r5
   1b548:	ldr	r4, [sp, #80]	; 0x50
   1b54c:	ldr	r5, [sp, #92]	; 0x5c
   1b550:	ldr	r6, [sp, #84]	; 0x54
   1b554:	ldr	r7, [sp, #88]	; 0x58
   1b558:	mov	r2, r3
   1b55c:	b	1afd0 <__assert_fail@plt+0x9e44>
   1b560:	mov	r3, r6
   1b564:	mov	ip, r5
   1b568:	eor	r5, r3, #1
   1b56c:	mov	r2, r6
   1b570:	ldr	r4, [sp, #80]	; 0x50
   1b574:	ldr	r6, [sp, #84]	; 0x54
   1b578:	ldr	r7, [sp, #88]	; 0x58
   1b57c:	uxtb	r5, r5
   1b580:	b	1afd0 <__assert_fail@plt+0x9e44>
   1b584:	ldr	sl, [sp, #32]
   1b588:	mov	r8, fp
   1b58c:	b	1b3f4 <__assert_fail@plt+0xa268>
   1b590:	andeq	lr, r1, r0, asr ip
   1b594:	andeq	lr, r1, r4, asr ip
   1b598:	andeq	lr, r1, ip, asr #24
   1b59c:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   1b5a0:	ldr	r2, [sp, #56]	; 0x38
   1b5a4:	ldrb	r1, [r2, r3]
   1b5a8:	sub	r2, r1, #33	; 0x21
   1b5ac:	uxtb	r2, r2
   1b5b0:	cmp	r2, #29
   1b5b4:	bhi	1b654 <__assert_fail@plt+0xa4c8>
   1b5b8:	ldr	r0, [pc, #-36]	; 1b59c <__assert_fail@plt+0xa410>
   1b5bc:	mov	ip, #1
   1b5c0:	ands	r2, r0, ip, lsl r2
   1b5c4:	beq	1b664 <__assert_fail@plt+0xa4d8>
   1b5c8:	ldr	r2, [sp, #28]
   1b5cc:	cmp	r2, #0
   1b5d0:	bne	1b764 <__assert_fail@plt+0xa5d8>
   1b5d4:	cmp	fp, r7
   1b5d8:	ldr	r8, [sp, #28]
   1b5dc:	ldrhi	r2, [sp, #32]
   1b5e0:	mov	sl, r3
   1b5e4:	mov	r5, r8
   1b5e8:	strbhi	r4, [r2, r7]
   1b5ec:	add	r2, r7, #1
   1b5f0:	cmp	fp, r2
   1b5f4:	movhi	r0, #34	; 0x22
   1b5f8:	ldrhi	ip, [sp, #32]
   1b5fc:	mov	r4, r1
   1b600:	strbhi	r0, [ip, r2]
   1b604:	add	r2, r7, #2
   1b608:	cmp	fp, r2
   1b60c:	movhi	r0, #34	; 0x22
   1b610:	ldrhi	ip, [sp, #32]
   1b614:	strbhi	r0, [ip, r2]
   1b618:	add	r2, r7, #3
   1b61c:	cmp	fp, r2
   1b620:	movhi	r0, #63	; 0x3f
   1b624:	ldrhi	ip, [sp, #32]
   1b628:	add	r7, r7, #4
   1b62c:	strbhi	r0, [ip, r2]
   1b630:	mov	r2, r8
   1b634:	b	1a7e0 <__assert_fail@plt+0x9654>
   1b638:	mov	ip, r2
   1b63c:	mov	r2, r3
   1b640:	b	1afd0 <__assert_fail@plt+0x9e44>
   1b644:	ldr	sl, [sp, #32]
   1b648:	mov	r8, fp
   1b64c:	ldr	r2, [sp, #28]
   1b650:	b	1aa20 <__assert_fail@plt+0x9894>
   1b654:	mov	r2, #0
   1b658:	mov	r8, r2
   1b65c:	mov	r5, r2
   1b660:	b	1a7e0 <__assert_fail@plt+0x9654>
   1b664:	mov	r8, r2
   1b668:	mov	r5, #0
   1b66c:	b	1a7e0 <__assert_fail@plt+0x9654>
   1b670:	ldr	r1, [sp, #152]	; 0x98
   1b674:	bl	1a13c <__assert_fail@plt+0x8fb0>
   1b678:	str	r0, [sp, #168]	; 0xa8
   1b67c:	b	1a69c <__assert_fail@plt+0x9510>
   1b680:	ldr	r1, [sp, #152]	; 0x98
   1b684:	bl	1a13c <__assert_fail@plt+0x8fb0>
   1b688:	str	r0, [sp, #164]	; 0xa4
   1b68c:	b	1a67c <__assert_fail@plt+0x94f0>
   1b690:	ldr	r7, [sp, #28]
   1b694:	b	1a6dc <__assert_fail@plt+0x9550>
   1b698:	ldr	sl, [sp, #32]
   1b69c:	ldr	r2, [sp, #68]	; 0x44
   1b6a0:	mov	r8, fp
   1b6a4:	mov	fp, r7
   1b6a8:	ldr	r3, [sp, #64]	; 0x40
   1b6ac:	cmp	r3, #0
   1b6b0:	moveq	r2, #0
   1b6b4:	andne	r2, r2, #1
   1b6b8:	cmp	r2, #0
   1b6bc:	beq	1b6e8 <__assert_fail@plt+0xa55c>
   1b6c0:	mov	r2, r3
   1b6c4:	ldrb	r3, [r3]
   1b6c8:	cmp	r3, #0
   1b6cc:	beq	1b6e8 <__assert_fail@plt+0xa55c>
   1b6d0:	cmp	r8, fp
   1b6d4:	strbhi	r3, [sl, fp]
   1b6d8:	ldrb	r3, [r2, #1]!
   1b6dc:	add	fp, fp, #1
   1b6e0:	cmp	r3, #0
   1b6e4:	bne	1b6d0 <__assert_fail@plt+0xa544>
   1b6e8:	cmp	r8, fp
   1b6ec:	movhi	r3, #0
   1b6f0:	strbhi	r3, [sl, fp]
   1b6f4:	b	1aa7c <__assert_fail@plt+0x98f0>
   1b6f8:	ldr	r3, [sp, #168]	; 0xa8
   1b6fc:	ldr	sl, [sp, #32]
   1b700:	str	r3, [sp, #16]
   1b704:	ldr	r3, [sp, #164]	; 0xa4
   1b708:	mov	ip, #5
   1b70c:	str	r3, [sp, #12]
   1b710:	ldr	r3, [sp, #160]	; 0xa0
   1b714:	ldr	r2, [sp, #56]	; 0x38
   1b718:	str	r3, [sp, #8]
   1b71c:	ldr	r3, [sp, #156]	; 0x9c
   1b720:	ldr	r1, [sp, #72]	; 0x48
   1b724:	str	r3, [sp, #4]
   1b728:	mov	r0, sl
   1b72c:	ldr	r3, [sp, #24]
   1b730:	str	ip, [sp]
   1b734:	bl	1a25c <__assert_fail@plt+0x90d0>
   1b738:	mov	fp, r0
   1b73c:	b	1aa7c <__assert_fail@plt+0x98f0>
   1b740:	mov	r8, fp
   1b744:	ldr	sl, [sp, #32]
   1b748:	mov	fp, r7
   1b74c:	mov	r2, r3
   1b750:	b	1b6a8 <__assert_fail@plt+0xa51c>
   1b754:	mov	r8, fp
   1b758:	ldr	sl, [sp, #32]
   1b75c:	mov	fp, r7
   1b760:	b	1b6a8 <__assert_fail@plt+0xa51c>
   1b764:	ldr	sl, [sp, #32]
   1b768:	mov	r8, fp
   1b76c:	b	1aa38 <__assert_fail@plt+0x98ac>
   1b770:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b774:	sub	sp, sp, #52	; 0x34
   1b778:	mov	r4, r0
   1b77c:	mov	r5, r3
   1b780:	mov	sl, r1
   1b784:	mov	fp, r2
   1b788:	bl	11090 <__errno_location@plt>
   1b78c:	ldr	r7, [pc, #412]	; 1b930 <__assert_fail@plt+0xa7a4>
   1b790:	cmn	r4, #-2147483647	; 0x80000001
   1b794:	ldr	r6, [r7]
   1b798:	mov	r8, r0
   1b79c:	movne	r0, #0
   1b7a0:	moveq	r0, #1
   1b7a4:	ldr	r3, [r8]
   1b7a8:	orrs	r0, r0, r4, lsr #31
   1b7ac:	str	r3, [sp, #24]
   1b7b0:	bne	1b92c <__assert_fail@plt+0xa7a0>
   1b7b4:	ldr	r2, [r7, #4]
   1b7b8:	cmp	r4, r2
   1b7bc:	blt	1b81c <__assert_fail@plt+0xa690>
   1b7c0:	add	r9, r7, #8
   1b7c4:	cmp	r6, r9
   1b7c8:	str	r2, [sp, #44]	; 0x2c
   1b7cc:	beq	1b8fc <__assert_fail@plt+0xa770>
   1b7d0:	mov	r3, #8
   1b7d4:	sub	r2, r4, r2
   1b7d8:	mov	r0, r6
   1b7dc:	str	r3, [sp]
   1b7e0:	add	r2, r2, #1
   1b7e4:	mvn	r3, #-2147483648	; 0x80000000
   1b7e8:	add	r1, sp, #44	; 0x2c
   1b7ec:	bl	1c5e8 <__assert_fail@plt+0xb45c>
   1b7f0:	mov	r6, r0
   1b7f4:	str	r0, [r7]
   1b7f8:	ldr	r0, [r7, #4]
   1b7fc:	ldr	r2, [sp, #44]	; 0x2c
   1b800:	mov	r1, #0
   1b804:	sub	r2, r2, r0
   1b808:	add	r0, r6, r0, lsl #3
   1b80c:	lsl	r2, r2, #3
   1b810:	bl	110b4 <memset@plt>
   1b814:	ldr	r3, [sp, #44]	; 0x2c
   1b818:	str	r3, [r7, #4]
   1b81c:	add	r3, r6, r4, lsl #3
   1b820:	ldr	r1, [r5, #4]
   1b824:	ldr	r7, [r3, #4]
   1b828:	ldr	r9, [r6, r4, lsl #3]
   1b82c:	ldr	r2, [r5, #40]	; 0x28
   1b830:	ldr	ip, [r5, #44]	; 0x2c
   1b834:	add	r0, r5, #8
   1b838:	str	r3, [sp, #28]
   1b83c:	ldr	r3, [r5]
   1b840:	orr	r1, r1, #1
   1b844:	mov	lr, r0
   1b848:	str	r1, [sp, #32]
   1b84c:	str	r0, [sp, #36]	; 0x24
   1b850:	str	r1, [sp, #4]
   1b854:	str	r2, [sp, #12]
   1b858:	str	r3, [sp]
   1b85c:	mov	r0, r7
   1b860:	mov	r1, r9
   1b864:	str	ip, [sp, #16]
   1b868:	str	lr, [sp, #8]
   1b86c:	mov	r3, fp
   1b870:	mov	r2, sl
   1b874:	bl	1a25c <__assert_fail@plt+0x90d0>
   1b878:	cmp	r9, r0
   1b87c:	bhi	1b8e8 <__assert_fail@plt+0xa75c>
   1b880:	ldr	r3, [pc, #172]	; 1b934 <__assert_fail@plt+0xa7a8>
   1b884:	add	r9, r0, #1
   1b888:	cmp	r7, r3
   1b88c:	str	r9, [r6, r4, lsl #3]
   1b890:	beq	1b89c <__assert_fail@plt+0xa710>
   1b894:	mov	r0, r7
   1b898:	bl	19f60 <__assert_fail@plt+0x8dd4>
   1b89c:	mov	r0, r9
   1b8a0:	bl	1c484 <__assert_fail@plt+0xb2f8>
   1b8a4:	ldr	lr, [sp, #28]
   1b8a8:	ldr	ip, [r5, #44]	; 0x2c
   1b8ac:	ldr	r4, [r5, #40]	; 0x28
   1b8b0:	mov	r3, fp
   1b8b4:	mov	r2, sl
   1b8b8:	mov	r1, r9
   1b8bc:	str	r0, [lr, #4]
   1b8c0:	ldr	lr, [r5]
   1b8c4:	ldr	r5, [sp, #36]	; 0x24
   1b8c8:	str	ip, [sp, #16]
   1b8cc:	str	r5, [sp, #8]
   1b8d0:	ldr	r5, [sp, #32]
   1b8d4:	str	r4, [sp, #12]
   1b8d8:	str	r5, [sp, #4]
   1b8dc:	str	lr, [sp]
   1b8e0:	mov	r7, r0
   1b8e4:	bl	1a25c <__assert_fail@plt+0x90d0>
   1b8e8:	ldr	r3, [sp, #24]
   1b8ec:	mov	r0, r7
   1b8f0:	str	r3, [r8]
   1b8f4:	add	sp, sp, #52	; 0x34
   1b8f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b8fc:	mov	r3, #8
   1b900:	sub	r2, r4, r2
   1b904:	str	r3, [sp]
   1b908:	add	r1, sp, #44	; 0x2c
   1b90c:	add	r2, r2, #1
   1b910:	mvn	r3, #-2147483648	; 0x80000000
   1b914:	bl	1c5e8 <__assert_fail@plt+0xb45c>
   1b918:	mov	r6, r0
   1b91c:	ldm	r9, {r0, r1}
   1b920:	str	r6, [r7]
   1b924:	stm	r6, {r0, r1}
   1b928:	b	1b7f8 <__assert_fail@plt+0xa66c>
   1b92c:	bl	11168 <abort@plt>
   1b930:	andeq	r0, r3, r4, lsr #2
   1b934:			; <UNDEFINED> instruction: 0x000301b8
   1b938:	push	{r4, r5, r6, lr}
   1b93c:	mov	r5, r0
   1b940:	bl	11090 <__errno_location@plt>
   1b944:	cmp	r5, #0
   1b948:	mov	r1, #48	; 0x30
   1b94c:	mov	r4, r0
   1b950:	ldr	r0, [pc, #16]	; 1b968 <__assert_fail@plt+0xa7dc>
   1b954:	ldr	r6, [r4]
   1b958:	movne	r0, r5
   1b95c:	bl	1c8e4 <__assert_fail@plt+0xb758>
   1b960:	str	r6, [r4]
   1b964:	pop	{r4, r5, r6, pc}
   1b968:			; <UNDEFINED> instruction: 0x000302b8
   1b96c:	ldr	r3, [pc, #12]	; 1b980 <__assert_fail@plt+0xa7f4>
   1b970:	cmp	r0, #0
   1b974:	moveq	r0, r3
   1b978:	ldr	r0, [r0]
   1b97c:	bx	lr
   1b980:			; <UNDEFINED> instruction: 0x000302b8
   1b984:	ldr	r3, [pc, #12]	; 1b998 <__assert_fail@plt+0xa80c>
   1b988:	cmp	r0, #0
   1b98c:	moveq	r0, r3
   1b990:	str	r1, [r0]
   1b994:	bx	lr
   1b998:			; <UNDEFINED> instruction: 0x000302b8
   1b99c:	ldr	r3, [pc, #52]	; 1b9d8 <__assert_fail@plt+0xa84c>
   1b9a0:	cmp	r0, #0
   1b9a4:	moveq	r0, r3
   1b9a8:	add	r3, r0, #8
   1b9ac:	push	{lr}		; (str lr, [sp, #-4]!)
   1b9b0:	lsr	lr, r1, #5
   1b9b4:	and	r1, r1, #31
   1b9b8:	ldr	ip, [r3, lr, lsl #2]
   1b9bc:	lsr	r0, ip, r1
   1b9c0:	eor	r2, r2, r0
   1b9c4:	and	r2, r2, #1
   1b9c8:	and	r0, r0, #1
   1b9cc:	eor	r1, ip, r2, lsl r1
   1b9d0:	str	r1, [r3, lr, lsl #2]
   1b9d4:	pop	{pc}		; (ldr pc, [sp], #4)
   1b9d8:			; <UNDEFINED> instruction: 0x000302b8
   1b9dc:	ldr	r3, [pc, #16]	; 1b9f4 <__assert_fail@plt+0xa868>
   1b9e0:	cmp	r0, #0
   1b9e4:	movne	r3, r0
   1b9e8:	ldr	r0, [r3, #4]
   1b9ec:	str	r1, [r3, #4]
   1b9f0:	bx	lr
   1b9f4:			; <UNDEFINED> instruction: 0x000302b8
   1b9f8:	ldr	r3, [pc, #44]	; 1ba2c <__assert_fail@plt+0xa8a0>
   1b9fc:	cmp	r0, #0
   1ba00:	moveq	r0, r3
   1ba04:	mov	ip, #10
   1ba08:	cmp	r2, #0
   1ba0c:	cmpne	r1, #0
   1ba10:	str	ip, [r0]
   1ba14:	beq	1ba24 <__assert_fail@plt+0xa898>
   1ba18:	str	r1, [r0, #40]	; 0x28
   1ba1c:	str	r2, [r0, #44]	; 0x2c
   1ba20:	bx	lr
   1ba24:	push	{r4, lr}
   1ba28:	bl	11168 <abort@plt>
   1ba2c:			; <UNDEFINED> instruction: 0x000302b8
   1ba30:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1ba34:	sub	sp, sp, #24
   1ba38:	ldr	ip, [pc, #108]	; 1baac <__assert_fail@plt+0xa920>
   1ba3c:	ldr	r4, [sp, #56]	; 0x38
   1ba40:	mov	r9, r2
   1ba44:	cmp	r4, #0
   1ba48:	moveq	r4, ip
   1ba4c:	mov	sl, r3
   1ba50:	mov	r7, r0
   1ba54:	mov	r8, r1
   1ba58:	bl	11090 <__errno_location@plt>
   1ba5c:	ldr	r3, [r4, #44]	; 0x2c
   1ba60:	mov	r1, r8
   1ba64:	ldr	r6, [r0]
   1ba68:	str	r3, [sp, #16]
   1ba6c:	ldr	r2, [r4, #40]	; 0x28
   1ba70:	add	r3, r4, #8
   1ba74:	str	r3, [sp, #8]
   1ba78:	str	r2, [sp, #12]
   1ba7c:	ldr	r2, [r4, #4]
   1ba80:	mov	r5, r0
   1ba84:	str	r2, [sp, #4]
   1ba88:	ldr	ip, [r4]
   1ba8c:	mov	r3, sl
   1ba90:	mov	r2, r9
   1ba94:	mov	r0, r7
   1ba98:	str	ip, [sp]
   1ba9c:	bl	1a25c <__assert_fail@plt+0x90d0>
   1baa0:	str	r6, [r5]
   1baa4:	add	sp, sp, #24
   1baa8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1baac:			; <UNDEFINED> instruction: 0x000302b8
   1bab0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bab4:	cmp	r3, #0
   1bab8:	sub	sp, sp, #44	; 0x2c
   1babc:	ldr	r4, [pc, #192]	; 1bb84 <__assert_fail@plt+0xa9f8>
   1bac0:	mov	r6, r2
   1bac4:	movne	r4, r3
   1bac8:	mov	r9, r1
   1bacc:	mov	r8, r0
   1bad0:	bl	11090 <__errno_location@plt>
   1bad4:	ldr	r3, [r4, #44]	; 0x2c
   1bad8:	ldr	r5, [r4, #4]
   1badc:	add	sl, r4, #8
   1bae0:	cmp	r6, #0
   1bae4:	orreq	r5, r5, #1
   1bae8:	mov	r1, #0
   1baec:	ldr	r2, [r0]
   1baf0:	str	r3, [sp, #16]
   1baf4:	ldr	r3, [r4, #40]	; 0x28
   1baf8:	stmib	sp, {r5, sl}
   1bafc:	str	r3, [sp, #12]
   1bb00:	ldr	r3, [r4]
   1bb04:	mov	r7, r0
   1bb08:	str	r2, [sp, #28]
   1bb0c:	str	r3, [sp]
   1bb10:	mov	r2, r8
   1bb14:	mov	r3, r9
   1bb18:	mov	r0, r1
   1bb1c:	bl	1a25c <__assert_fail@plt+0x90d0>
   1bb20:	add	r1, r0, #1
   1bb24:	mov	fp, r0
   1bb28:	mov	r0, r1
   1bb2c:	str	r1, [sp, #36]	; 0x24
   1bb30:	bl	1c484 <__assert_fail@plt+0xb2f8>
   1bb34:	ldr	r3, [r4, #44]	; 0x2c
   1bb38:	mov	r2, r8
   1bb3c:	str	r3, [sp, #16]
   1bb40:	ldr	r3, [r4, #40]	; 0x28
   1bb44:	str	r5, [sp, #4]
   1bb48:	str	r3, [sp, #12]
   1bb4c:	str	sl, [sp, #8]
   1bb50:	ldr	ip, [r4]
   1bb54:	ldr	r1, [sp, #36]	; 0x24
   1bb58:	mov	r3, r9
   1bb5c:	str	ip, [sp]
   1bb60:	str	r0, [sp, #32]
   1bb64:	bl	1a25c <__assert_fail@plt+0x90d0>
   1bb68:	ldr	r2, [sp, #28]
   1bb6c:	cmp	r6, #0
   1bb70:	str	r2, [r7]
   1bb74:	ldr	r0, [sp, #32]
   1bb78:	strne	fp, [r6]
   1bb7c:	add	sp, sp, #44	; 0x2c
   1bb80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bb84:			; <UNDEFINED> instruction: 0x000302b8
   1bb88:	mov	r3, r2
   1bb8c:	mov	r2, #0
   1bb90:	b	1bab0 <__assert_fail@plt+0xa924>
   1bb94:	push	{r4, r5, r6, r7, r8, lr}
   1bb98:	ldr	r6, [pc, #116]	; 1bc14 <__assert_fail@plt+0xaa88>
   1bb9c:	ldr	r3, [r6, #4]
   1bba0:	ldr	r7, [r6]
   1bba4:	cmp	r3, #1
   1bba8:	movgt	r5, r7
   1bbac:	movgt	r4, #1
   1bbb0:	ble	1bbd0 <__assert_fail@plt+0xaa44>
   1bbb4:	ldr	r0, [r5, #12]
   1bbb8:	bl	19f60 <__assert_fail@plt+0x8dd4>
   1bbbc:	ldr	r3, [r6, #4]
   1bbc0:	add	r4, r4, #1
   1bbc4:	cmp	r3, r4
   1bbc8:	add	r5, r5, #8
   1bbcc:	bgt	1bbb4 <__assert_fail@plt+0xaa28>
   1bbd0:	ldr	r0, [r7, #4]
   1bbd4:	ldr	r4, [pc, #60]	; 1bc18 <__assert_fail@plt+0xaa8c>
   1bbd8:	cmp	r0, r4
   1bbdc:	beq	1bbf0 <__assert_fail@plt+0xaa64>
   1bbe0:	bl	19f60 <__assert_fail@plt+0x8dd4>
   1bbe4:	mov	r3, #256	; 0x100
   1bbe8:	str	r4, [r6, #12]
   1bbec:	str	r3, [r6, #8]
   1bbf0:	ldr	r4, [pc, #36]	; 1bc1c <__assert_fail@plt+0xaa90>
   1bbf4:	cmp	r7, r4
   1bbf8:	beq	1bc08 <__assert_fail@plt+0xaa7c>
   1bbfc:	mov	r0, r7
   1bc00:	bl	19f60 <__assert_fail@plt+0x8dd4>
   1bc04:	str	r4, [r6]
   1bc08:	mov	r3, #1
   1bc0c:	str	r3, [r6, #4]
   1bc10:	pop	{r4, r5, r6, r7, r8, pc}
   1bc14:	andeq	r0, r3, r4, lsr #2
   1bc18:			; <UNDEFINED> instruction: 0x000301b8
   1bc1c:	andeq	r0, r3, ip, lsr #2
   1bc20:	ldr	r3, [pc, #4]	; 1bc2c <__assert_fail@plt+0xaaa0>
   1bc24:	mvn	r2, #0
   1bc28:	b	1b770 <__assert_fail@plt+0xa5e4>
   1bc2c:			; <UNDEFINED> instruction: 0x000302b8
   1bc30:	ldr	r3, [pc]	; 1bc38 <__assert_fail@plt+0xaaac>
   1bc34:	b	1b770 <__assert_fail@plt+0xa5e4>
   1bc38:			; <UNDEFINED> instruction: 0x000302b8
   1bc3c:	mov	r1, r0
   1bc40:	ldr	r3, [pc, #8]	; 1bc50 <__assert_fail@plt+0xaac4>
   1bc44:	mvn	r2, #0
   1bc48:	mov	r0, #0
   1bc4c:	b	1b770 <__assert_fail@plt+0xa5e4>
   1bc50:			; <UNDEFINED> instruction: 0x000302b8
   1bc54:	mov	r2, r1
   1bc58:	ldr	r3, [pc, #8]	; 1bc68 <__assert_fail@plt+0xaadc>
   1bc5c:	mov	r1, r0
   1bc60:	mov	r0, #0
   1bc64:	b	1b770 <__assert_fail@plt+0xa5e4>
   1bc68:			; <UNDEFINED> instruction: 0x000302b8
   1bc6c:	push	{r4, r5, lr}
   1bc70:	sub	sp, sp, #52	; 0x34
   1bc74:	mov	r5, r2
   1bc78:	mov	r4, r0
   1bc7c:	mov	r0, sp
   1bc80:	bl	1a10c <__assert_fail@plt+0x8f80>
   1bc84:	mov	r3, sp
   1bc88:	mov	r1, r5
   1bc8c:	mov	r0, r4
   1bc90:	mvn	r2, #0
   1bc94:	bl	1b770 <__assert_fail@plt+0xa5e4>
   1bc98:	add	sp, sp, #52	; 0x34
   1bc9c:	pop	{r4, r5, pc}
   1bca0:	push	{r4, r5, r6, lr}
   1bca4:	sub	sp, sp, #48	; 0x30
   1bca8:	mov	r5, r2
   1bcac:	mov	r6, r3
   1bcb0:	mov	r4, r0
   1bcb4:	mov	r0, sp
   1bcb8:	bl	1a10c <__assert_fail@plt+0x8f80>
   1bcbc:	mov	r3, sp
   1bcc0:	mov	r2, r6
   1bcc4:	mov	r1, r5
   1bcc8:	mov	r0, r4
   1bccc:	bl	1b770 <__assert_fail@plt+0xa5e4>
   1bcd0:	add	sp, sp, #48	; 0x30
   1bcd4:	pop	{r4, r5, r6, pc}
   1bcd8:	mov	r2, r1
   1bcdc:	mov	r1, r0
   1bce0:	mov	r0, #0
   1bce4:	b	1bc6c <__assert_fail@plt+0xaae0>
   1bce8:	mov	r3, r2
   1bcec:	mov	r2, r1
   1bcf0:	mov	r1, r0
   1bcf4:	mov	r0, #0
   1bcf8:	b	1bca0 <__assert_fail@plt+0xab14>
   1bcfc:	push	{r4, r5, r6, r7, r8, lr}
   1bd00:	mov	r7, r0
   1bd04:	ldr	lr, [pc, #100]	; 1bd70 <__assert_fail@plt+0xabe4>
   1bd08:	mov	r8, r1
   1bd0c:	mov	r4, r2
   1bd10:	ldm	lr!, {r0, r1, r2, r3}
   1bd14:	sub	sp, sp, #48	; 0x30
   1bd18:	mov	ip, sp
   1bd1c:	lsr	r5, r4, #5
   1bd20:	stmia	ip!, {r0, r1, r2, r3}
   1bd24:	add	r6, sp, #8
   1bd28:	ldm	lr!, {r0, r1, r2, r3}
   1bd2c:	and	r4, r4, #31
   1bd30:	stmia	ip!, {r0, r1, r2, r3}
   1bd34:	ldm	lr, {r0, r1, r2, r3}
   1bd38:	stm	ip, {r0, r1, r2, r3}
   1bd3c:	mov	r2, r8
   1bd40:	ldr	lr, [r6, r5, lsl #2]
   1bd44:	mov	r1, r7
   1bd48:	mov	r3, sp
   1bd4c:	lsr	ip, lr, r4
   1bd50:	eor	ip, ip, #1
   1bd54:	and	ip, ip, #1
   1bd58:	mov	r0, #0
   1bd5c:	eor	r4, lr, ip, lsl r4
   1bd60:	str	r4, [r6, r5, lsl #2]
   1bd64:	bl	1b770 <__assert_fail@plt+0xa5e4>
   1bd68:	add	sp, sp, #48	; 0x30
   1bd6c:	pop	{r4, r5, r6, r7, r8, pc}
   1bd70:			; <UNDEFINED> instruction: 0x000302b8
   1bd74:	mov	r2, r1
   1bd78:	mvn	r1, #0
   1bd7c:	b	1bcfc <__assert_fail@plt+0xab70>
   1bd80:	mov	r2, #58	; 0x3a
   1bd84:	mvn	r1, #0
   1bd88:	b	1bcfc <__assert_fail@plt+0xab70>
   1bd8c:	mov	r2, #58	; 0x3a
   1bd90:	b	1bcfc <__assert_fail@plt+0xab70>
   1bd94:	push	{r4, r5, r6, r7, lr}
   1bd98:	sub	sp, sp, #100	; 0x64
   1bd9c:	mov	r6, r0
   1bda0:	mov	r0, sp
   1bda4:	mov	r7, r2
   1bda8:	bl	1a10c <__assert_fail@plt+0x8f80>
   1bdac:	mov	ip, sp
   1bdb0:	add	lr, sp, #48	; 0x30
   1bdb4:	ldm	ip!, {r0, r1, r2, r3}
   1bdb8:	stmia	lr!, {r0, r1, r2, r3}
   1bdbc:	ldm	ip!, {r0, r1, r2, r3}
   1bdc0:	ldr	r5, [sp, #60]	; 0x3c
   1bdc4:	stmia	lr!, {r0, r1, r2, r3}
   1bdc8:	mvn	r4, r5
   1bdcc:	ldm	ip, {r0, r1, r2, r3}
   1bdd0:	and	ip, r4, #67108864	; 0x4000000
   1bdd4:	eor	ip, ip, r5
   1bdd8:	str	ip, [sp, #60]	; 0x3c
   1bddc:	stm	lr, {r0, r1, r2, r3}
   1bde0:	mov	r1, r7
   1bde4:	mov	r0, r6
   1bde8:	add	r3, sp, #48	; 0x30
   1bdec:	mvn	r2, #0
   1bdf0:	bl	1b770 <__assert_fail@plt+0xa5e4>
   1bdf4:	add	sp, sp, #100	; 0x64
   1bdf8:	pop	{r4, r5, r6, r7, pc}
   1bdfc:	push	{r4, r5, r6, r7, r8, lr}
   1be00:	mov	r5, r1
   1be04:	ldr	lr, [pc, #100]	; 1be70 <__assert_fail@plt+0xace4>
   1be08:	mov	r4, r2
   1be0c:	mov	r7, r0
   1be10:	mov	r8, r3
   1be14:	ldm	lr!, {r0, r1, r2, r3}
   1be18:	sub	sp, sp, #48	; 0x30
   1be1c:	mov	ip, sp
   1be20:	mov	r6, #10
   1be24:	stmia	ip!, {r0, r1, r2, r3}
   1be28:	cmp	r4, #0
   1be2c:	cmpne	r5, #0
   1be30:	ldm	lr!, {r0, r1, r2, r3}
   1be34:	str	r6, [sp]
   1be38:	stmia	ip!, {r0, r1, r2, r3}
   1be3c:	ldm	lr, {r0, r1, r2, r3}
   1be40:	stm	ip, {r0, r1, r2, r3}
   1be44:	beq	1be6c <__assert_fail@plt+0xace0>
   1be48:	mov	r3, sp
   1be4c:	mov	r1, r8
   1be50:	mov	r0, r7
   1be54:	ldr	r2, [sp, #72]	; 0x48
   1be58:	str	r5, [sp, #40]	; 0x28
   1be5c:	str	r4, [sp, #44]	; 0x2c
   1be60:	bl	1b770 <__assert_fail@plt+0xa5e4>
   1be64:	add	sp, sp, #48	; 0x30
   1be68:	pop	{r4, r5, r6, r7, r8, pc}
   1be6c:	bl	11168 <abort@plt>
   1be70:			; <UNDEFINED> instruction: 0x000302b8
   1be74:	push	{lr}		; (str lr, [sp, #-4]!)
   1be78:	sub	sp, sp, #12
   1be7c:	mvn	ip, #0
   1be80:	str	ip, [sp]
   1be84:	bl	1bdfc <__assert_fail@plt+0xac70>
   1be88:	add	sp, sp, #12
   1be8c:	pop	{pc}		; (ldr pc, [sp], #4)
   1be90:	push	{lr}		; (str lr, [sp, #-4]!)
   1be94:	sub	sp, sp, #12
   1be98:	mvn	ip, #0
   1be9c:	mov	r3, r2
   1bea0:	str	ip, [sp]
   1bea4:	mov	r2, r1
   1bea8:	mov	r1, r0
   1beac:	mov	r0, #0
   1beb0:	bl	1bdfc <__assert_fail@plt+0xac70>
   1beb4:	add	sp, sp, #12
   1beb8:	pop	{pc}		; (ldr pc, [sp], #4)
   1bebc:	push	{lr}		; (str lr, [sp, #-4]!)
   1bec0:	sub	sp, sp, #12
   1bec4:	str	r3, [sp]
   1bec8:	mov	r3, r2
   1becc:	mov	r2, r1
   1bed0:	mov	r1, r0
   1bed4:	mov	r0, #0
   1bed8:	bl	1bdfc <__assert_fail@plt+0xac70>
   1bedc:	add	sp, sp, #12
   1bee0:	pop	{pc}		; (ldr pc, [sp], #4)
   1bee4:	ldr	r3, [pc]	; 1beec <__assert_fail@plt+0xad60>
   1bee8:	b	1b770 <__assert_fail@plt+0xa5e4>
   1beec:	andeq	r0, r3, r4, lsr r1
   1bef0:	mov	r2, r1
   1bef4:	ldr	r3, [pc, #8]	; 1bf04 <__assert_fail@plt+0xad78>
   1bef8:	mov	r1, r0
   1befc:	mov	r0, #0
   1bf00:	b	1b770 <__assert_fail@plt+0xa5e4>
   1bf04:	andeq	r0, r3, r4, lsr r1
   1bf08:	ldr	r3, [pc, #4]	; 1bf14 <__assert_fail@plt+0xad88>
   1bf0c:	mvn	r2, #0
   1bf10:	b	1b770 <__assert_fail@plt+0xa5e4>
   1bf14:	andeq	r0, r3, r4, lsr r1
   1bf18:	mov	r1, r0
   1bf1c:	ldr	r3, [pc, #8]	; 1bf2c <__assert_fail@plt+0xada0>
   1bf20:	mvn	r2, #0
   1bf24:	mov	r0, #0
   1bf28:	b	1b770 <__assert_fail@plt+0xa5e4>
   1bf2c:	andeq	r0, r3, r4, lsr r1
   1bf30:	mov	r2, #3
   1bf34:	mov	r1, #0
   1bf38:	b	1d2bc <__assert_fail@plt+0xc130>
   1bf3c:	push	{r4, r5, r6, lr}
   1bf40:	sub	sp, sp, #32
   1bf44:	cmp	r1, #0
   1bf48:	mov	r4, r0
   1bf4c:	ldr	r5, [sp, #48]	; 0x30
   1bf50:	ldr	r6, [sp, #52]	; 0x34
   1bf54:	beq	1c26c <__assert_fail@plt+0xb0e0>
   1bf58:	stm	sp, {r2, r3}
   1bf5c:	mov	r3, r1
   1bf60:	ldr	r2, [pc, #808]	; 1c290 <__assert_fail@plt+0xb104>
   1bf64:	mov	r1, #1
   1bf68:	bl	110d8 <__fprintf_chk@plt>
   1bf6c:	mov	r2, #5
   1bf70:	ldr	r1, [pc, #796]	; 1c294 <__assert_fail@plt+0xb108>
   1bf74:	mov	r0, #0
   1bf78:	bl	10f7c <dcgettext@plt>
   1bf7c:	ldr	r3, [pc, #788]	; 1c298 <__assert_fail@plt+0xb10c>
   1bf80:	ldr	r2, [pc, #788]	; 1c29c <__assert_fail@plt+0xb110>
   1bf84:	str	r3, [sp]
   1bf88:	mov	r1, #1
   1bf8c:	mov	r3, r0
   1bf90:	mov	r0, r4
   1bf94:	bl	110d8 <__fprintf_chk@plt>
   1bf98:	mov	r1, r4
   1bf9c:	mov	r0, #10
   1bfa0:	bl	10f70 <fputc_unlocked@plt>
   1bfa4:	mov	r2, #5
   1bfa8:	ldr	r1, [pc, #752]	; 1c2a0 <__assert_fail@plt+0xb114>
   1bfac:	mov	r0, #0
   1bfb0:	bl	10f7c <dcgettext@plt>
   1bfb4:	mov	r1, #1
   1bfb8:	ldr	r3, [pc, #740]	; 1c2a4 <__assert_fail@plt+0xb118>
   1bfbc:	mov	r2, r0
   1bfc0:	mov	r0, r4
   1bfc4:	bl	110d8 <__fprintf_chk@plt>
   1bfc8:	mov	r1, r4
   1bfcc:	mov	r0, #10
   1bfd0:	bl	10f70 <fputc_unlocked@plt>
   1bfd4:	cmp	r6, #9
   1bfd8:	ldrls	pc, [pc, r6, lsl #2]
   1bfdc:	b	1c284 <__assert_fail@plt+0xb0f8>
   1bfe0:	andeq	ip, r1, r4, rrx
   1bfe4:	andeq	ip, r1, ip, rrx
   1bfe8:	muleq	r1, r8, r0
   1bfec:	andeq	ip, r1, ip, asr #1
   1bff0:	andeq	ip, r1, r8, lsl #2
   1bff4:	andeq	ip, r1, r4, asr #2
   1bff8:	andeq	ip, r1, r0, lsl #3
   1bffc:	andeq	ip, r1, r4, asr #3
   1c000:	andeq	ip, r1, r4, lsl r2
   1c004:	andeq	ip, r1, r8
   1c008:	ldr	r1, [pc, #664]	; 1c2a8 <__assert_fail@plt+0xb11c>
   1c00c:	mov	r2, #5
   1c010:	mov	r0, #0
   1c014:	bl	10f7c <dcgettext@plt>
   1c018:	ldr	ip, [r5, #32]
   1c01c:	ldr	r1, [r5, #28]
   1c020:	ldr	r2, [r5, #24]
   1c024:	ldr	r3, [r5]
   1c028:	ldr	r6, [r5, #20]
   1c02c:	str	ip, [sp, #28]
   1c030:	ldr	lr, [r5, #16]
   1c034:	str	r1, [sp, #24]
   1c038:	ldr	ip, [r5, #12]
   1c03c:	str	r2, [sp, #20]
   1c040:	ldr	r1, [r5, #8]
   1c044:	ldr	r2, [r5, #4]
   1c048:	str	r6, [sp, #16]
   1c04c:	stmib	sp, {r1, ip, lr}
   1c050:	mov	r1, #1
   1c054:	str	r2, [sp]
   1c058:	mov	r2, r0
   1c05c:	mov	r0, r4
   1c060:	bl	110d8 <__fprintf_chk@plt>
   1c064:	add	sp, sp, #32
   1c068:	pop	{r4, r5, r6, pc}
   1c06c:	mov	r2, #5
   1c070:	ldr	r1, [pc, #564]	; 1c2ac <__assert_fail@plt+0xb120>
   1c074:	mov	r0, #0
   1c078:	bl	10f7c <dcgettext@plt>
   1c07c:	ldr	r3, [r5]
   1c080:	mov	r1, #1
   1c084:	mov	r2, r0
   1c088:	mov	r0, r4
   1c08c:	add	sp, sp, #32
   1c090:	pop	{r4, r5, r6, lr}
   1c094:	b	110d8 <__fprintf_chk@plt>
   1c098:	mov	r2, #5
   1c09c:	ldr	r1, [pc, #524]	; 1c2b0 <__assert_fail@plt+0xb124>
   1c0a0:	mov	r0, #0
   1c0a4:	bl	10f7c <dcgettext@plt>
   1c0a8:	ldr	r2, [r5, #4]
   1c0ac:	ldr	r3, [r5]
   1c0b0:	mov	r1, #1
   1c0b4:	str	r2, [sp, #48]	; 0x30
   1c0b8:	mov	r2, r0
   1c0bc:	mov	r0, r4
   1c0c0:	add	sp, sp, #32
   1c0c4:	pop	{r4, r5, r6, lr}
   1c0c8:	b	110d8 <__fprintf_chk@plt>
   1c0cc:	mov	r2, #5
   1c0d0:	ldr	r1, [pc, #476]	; 1c2b4 <__assert_fail@plt+0xb128>
   1c0d4:	mov	r0, #0
   1c0d8:	bl	10f7c <dcgettext@plt>
   1c0dc:	ldr	r1, [r5, #8]
   1c0e0:	ldr	r2, [r5, #4]
   1c0e4:	ldr	r3, [r5]
   1c0e8:	str	r1, [sp, #52]	; 0x34
   1c0ec:	str	r2, [sp, #48]	; 0x30
   1c0f0:	mov	r1, #1
   1c0f4:	mov	r2, r0
   1c0f8:	mov	r0, r4
   1c0fc:	add	sp, sp, #32
   1c100:	pop	{r4, r5, r6, lr}
   1c104:	b	110d8 <__fprintf_chk@plt>
   1c108:	mov	r2, #5
   1c10c:	ldr	r1, [pc, #420]	; 1c2b8 <__assert_fail@plt+0xb12c>
   1c110:	mov	r0, #0
   1c114:	bl	10f7c <dcgettext@plt>
   1c118:	ldr	r1, [r5, #8]
   1c11c:	ldr	ip, [r5, #12]
   1c120:	ldr	r2, [r5, #4]
   1c124:	ldr	r3, [r5]
   1c128:	stmib	sp, {r1, ip}
   1c12c:	str	r2, [sp]
   1c130:	mov	r1, #1
   1c134:	mov	r2, r0
   1c138:	mov	r0, r4
   1c13c:	bl	110d8 <__fprintf_chk@plt>
   1c140:	b	1c064 <__assert_fail@plt+0xaed8>
   1c144:	mov	r2, #5
   1c148:	ldr	r1, [pc, #364]	; 1c2bc <__assert_fail@plt+0xb130>
   1c14c:	mov	r0, #0
   1c150:	bl	10f7c <dcgettext@plt>
   1c154:	add	r1, r5, #8
   1c158:	ldr	r2, [r5, #4]
   1c15c:	ldm	r1, {r1, ip, lr}
   1c160:	ldr	r3, [r5]
   1c164:	str	r2, [sp]
   1c168:	stmib	sp, {r1, ip, lr}
   1c16c:	mov	r1, #1
   1c170:	mov	r2, r0
   1c174:	mov	r0, r4
   1c178:	bl	110d8 <__fprintf_chk@plt>
   1c17c:	b	1c064 <__assert_fail@plt+0xaed8>
   1c180:	mov	r2, #5
   1c184:	ldr	r1, [pc, #308]	; 1c2c0 <__assert_fail@plt+0xb134>
   1c188:	mov	r0, #0
   1c18c:	bl	10f7c <dcgettext@plt>
   1c190:	add	r1, r5, #8
   1c194:	ldr	r2, [r5, #4]
   1c198:	ldm	r1, {r1, ip, lr}
   1c19c:	ldr	r6, [r5, #20]
   1c1a0:	ldr	r3, [r5]
   1c1a4:	stmib	sp, {r1, ip, lr}
   1c1a8:	mov	r1, #1
   1c1ac:	str	r2, [sp]
   1c1b0:	str	r6, [sp, #16]
   1c1b4:	mov	r2, r0
   1c1b8:	mov	r0, r4
   1c1bc:	bl	110d8 <__fprintf_chk@plt>
   1c1c0:	b	1c064 <__assert_fail@plt+0xaed8>
   1c1c4:	mov	r2, #5
   1c1c8:	ldr	r1, [pc, #244]	; 1c2c4 <__assert_fail@plt+0xb138>
   1c1cc:	mov	r0, #0
   1c1d0:	bl	10f7c <dcgettext@plt>
   1c1d4:	ldr	r2, [r5, #24]
   1c1d8:	ldr	r3, [r5]
   1c1dc:	ldr	r6, [r5, #20]
   1c1e0:	ldr	lr, [r5, #16]
   1c1e4:	ldr	ip, [r5, #12]
   1c1e8:	str	r2, [sp, #20]
   1c1ec:	ldr	r1, [r5, #8]
   1c1f0:	ldr	r2, [r5, #4]
   1c1f4:	str	r6, [sp, #16]
   1c1f8:	stmib	sp, {r1, ip, lr}
   1c1fc:	mov	r1, #1
   1c200:	str	r2, [sp]
   1c204:	mov	r2, r0
   1c208:	mov	r0, r4
   1c20c:	bl	110d8 <__fprintf_chk@plt>
   1c210:	b	1c064 <__assert_fail@plt+0xaed8>
   1c214:	mov	r2, #5
   1c218:	ldr	r1, [pc, #168]	; 1c2c8 <__assert_fail@plt+0xb13c>
   1c21c:	mov	r0, #0
   1c220:	bl	10f7c <dcgettext@plt>
   1c224:	ldr	r1, [r5, #28]
   1c228:	ldr	r2, [r5, #24]
   1c22c:	ldr	r3, [r5]
   1c230:	ldr	r6, [r5, #20]
   1c234:	ldr	lr, [r5, #16]
   1c238:	str	r1, [sp, #24]
   1c23c:	ldr	ip, [r5, #12]
   1c240:	str	r2, [sp, #20]
   1c244:	ldr	r1, [r5, #8]
   1c248:	ldr	r2, [r5, #4]
   1c24c:	str	r6, [sp, #16]
   1c250:	stmib	sp, {r1, ip, lr}
   1c254:	mov	r1, #1
   1c258:	str	r2, [sp]
   1c25c:	mov	r2, r0
   1c260:	mov	r0, r4
   1c264:	bl	110d8 <__fprintf_chk@plt>
   1c268:	b	1c064 <__assert_fail@plt+0xaed8>
   1c26c:	str	r3, [sp]
   1c270:	mov	r1, #1
   1c274:	mov	r3, r2
   1c278:	ldr	r2, [pc, #76]	; 1c2cc <__assert_fail@plt+0xb140>
   1c27c:	bl	110d8 <__fprintf_chk@plt>
   1c280:	b	1bf6c <__assert_fail@plt+0xade0>
   1c284:	mov	r2, #5
   1c288:	ldr	r1, [pc, #64]	; 1c2d0 <__assert_fail@plt+0xb144>
   1c28c:	b	1c010 <__assert_fail@plt+0xae84>
   1c290:			; <UNDEFINED> instruction: 0x0001ecbc
   1c294:	ldrdeq	lr, [r1], -r0
   1c298:	andeq	r0, r0, r6, ror #15
   1c29c:	andeq	lr, r1, r8, lsr #31
   1c2a0:	ldrdeq	lr, [r1], -r4
   1c2a4:	andeq	lr, r1, r0, lsl #27
   1c2a8:			; <UNDEFINED> instruction: 0x0001eeb0
   1c2ac:	andeq	lr, r1, r4, lsr #27
   1c2b0:			; <UNDEFINED> instruction: 0x0001edb4
   1c2b4:	andeq	lr, r1, ip, asr #27
   1c2b8:	andeq	lr, r1, r8, ror #27
   1c2bc:	andeq	lr, r1, r8, lsl #28
   1c2c0:	andeq	lr, r1, ip, lsr #28
   1c2c4:	andeq	lr, r1, r4, asr lr
   1c2c8:	andeq	lr, r1, r0, lsl #29
   1c2cc:	andeq	lr, r1, r8, asr #25
   1c2d0:	andeq	lr, r1, r4, ror #29
   1c2d4:	push	{r4, r5, lr}
   1c2d8:	sub	sp, sp, #12
   1c2dc:	ldr	r5, [sp, #24]
   1c2e0:	ldr	ip, [r5]
   1c2e4:	cmp	ip, #0
   1c2e8:	beq	1c304 <__assert_fail@plt+0xb178>
   1c2ec:	mov	lr, r5
   1c2f0:	mov	ip, #0
   1c2f4:	ldr	r4, [lr, #4]!
   1c2f8:	add	ip, ip, #1
   1c2fc:	cmp	r4, #0
   1c300:	bne	1c2f4 <__assert_fail@plt+0xb168>
   1c304:	stm	sp, {r5, ip}
   1c308:	bl	1bf3c <__assert_fail@plt+0xadb0>
   1c30c:	add	sp, sp, #12
   1c310:	pop	{r4, r5, pc}
   1c314:	push	{r4, r5, lr}
   1c318:	sub	sp, sp, #52	; 0x34
   1c31c:	add	r5, sp, #4
   1c320:	ldr	r4, [sp, #64]	; 0x40
   1c324:	mov	ip, #0
   1c328:	sub	r4, r4, #4
   1c32c:	ldr	lr, [r4, #4]!
   1c330:	cmp	lr, #0
   1c334:	str	lr, [r5, #4]!
   1c338:	beq	1c348 <__assert_fail@plt+0xb1bc>
   1c33c:	add	ip, ip, #1
   1c340:	cmp	ip, #10
   1c344:	bne	1c32c <__assert_fail@plt+0xb1a0>
   1c348:	add	lr, sp, #8
   1c34c:	str	ip, [sp, #4]
   1c350:	str	lr, [sp]
   1c354:	bl	1bf3c <__assert_fail@plt+0xadb0>
   1c358:	add	sp, sp, #52	; 0x34
   1c35c:	pop	{r4, r5, pc}
   1c360:	push	{r3}		; (str r3, [sp, #-4]!)
   1c364:	push	{r4, lr}
   1c368:	sub	sp, sp, #60	; 0x3c
   1c36c:	add	lr, sp, #56	; 0x38
   1c370:	add	r3, sp, #72	; 0x48
   1c374:	str	r3, [lr, #-44]!	; 0xffffffd4
   1c378:	add	r4, sp, #68	; 0x44
   1c37c:	mov	r3, #0
   1c380:	ldr	ip, [r4, #4]!
   1c384:	cmp	ip, #0
   1c388:	str	ip, [lr, #4]!
   1c38c:	beq	1c39c <__assert_fail@plt+0xb210>
   1c390:	add	r3, r3, #1
   1c394:	cmp	r3, #10
   1c398:	bne	1c380 <__assert_fail@plt+0xb1f4>
   1c39c:	add	ip, sp, #16
   1c3a0:	str	r3, [sp, #4]
   1c3a4:	str	ip, [sp]
   1c3a8:	ldr	r3, [sp, #68]	; 0x44
   1c3ac:	bl	1bf3c <__assert_fail@plt+0xadb0>
   1c3b0:	add	sp, sp, #60	; 0x3c
   1c3b4:	pop	{r4, lr}
   1c3b8:	add	sp, sp, #4
   1c3bc:	bx	lr
   1c3c0:	ldr	r3, [pc, #116]	; 1c43c <__assert_fail@plt+0xb2b0>
   1c3c4:	push	{r4, lr}
   1c3c8:	mov	r0, #10
   1c3cc:	ldr	r1, [r3]
   1c3d0:	bl	10f70 <fputc_unlocked@plt>
   1c3d4:	mov	r2, #5
   1c3d8:	ldr	r1, [pc, #96]	; 1c440 <__assert_fail@plt+0xb2b4>
   1c3dc:	mov	r0, #0
   1c3e0:	bl	10f7c <dcgettext@plt>
   1c3e4:	ldr	r2, [pc, #88]	; 1c444 <__assert_fail@plt+0xb2b8>
   1c3e8:	mov	r1, r0
   1c3ec:	mov	r0, #1
   1c3f0:	bl	110c0 <__printf_chk@plt>
   1c3f4:	mov	r2, #5
   1c3f8:	ldr	r1, [pc, #72]	; 1c448 <__assert_fail@plt+0xb2bc>
   1c3fc:	mov	r0, #0
   1c400:	bl	10f7c <dcgettext@plt>
   1c404:	ldr	r3, [pc, #64]	; 1c44c <__assert_fail@plt+0xb2c0>
   1c408:	ldr	r2, [pc, #64]	; 1c450 <__assert_fail@plt+0xb2c4>
   1c40c:	mov	r1, r0
   1c410:	mov	r0, #1
   1c414:	bl	110c0 <__printf_chk@plt>
   1c418:	mov	r2, #5
   1c41c:	ldr	r1, [pc, #48]	; 1c454 <__assert_fail@plt+0xb2c8>
   1c420:	mov	r0, #0
   1c424:	bl	10f7c <dcgettext@plt>
   1c428:	ldr	r2, [pc, #40]	; 1c458 <__assert_fail@plt+0xb2cc>
   1c42c:	pop	{r4, lr}
   1c430:	mov	r1, r0
   1c434:	mov	r0, #1
   1c438:	b	110c0 <__printf_chk@plt>
   1c43c:	andeq	r0, r3, r4, lsl #3
   1c440:	andeq	lr, r1, r0, lsr #30
   1c444:	andeq	lr, r1, r4, lsr pc
   1c448:	andeq	lr, r1, ip, asr #30
   1c44c:	andeq	lr, r1, r8, lsr #9
   1c450:	ldrdeq	lr, [r1], -r0
   1c454:	andeq	lr, r1, r0, ror #30
   1c458:	andeq	lr, r1, r8, lsl #31
   1c45c:	push	{r4, lr}
   1c460:	bl	1d1b8 <__assert_fail@plt+0xc02c>
   1c464:	cmp	r0, #0
   1c468:	popne	{r4, pc}
   1c46c:	bl	1c9a4 <__assert_fail@plt+0xb818>
   1c470:	push	{r4, lr}
   1c474:	bl	1d1b8 <__assert_fail@plt+0xc02c>
   1c478:	cmp	r0, #0
   1c47c:	popne	{r4, pc}
   1c480:	bl	1c9a4 <__assert_fail@plt+0xb818>
   1c484:	push	{r4, lr}
   1c488:	bl	1d1b8 <__assert_fail@plt+0xc02c>
   1c48c:	cmp	r0, #0
   1c490:	popne	{r4, pc}
   1c494:	bl	1c9a4 <__assert_fail@plt+0xb818>
   1c498:	push	{r4, r5, r6, lr}
   1c49c:	mov	r5, r0
   1c4a0:	mov	r4, r1
   1c4a4:	bl	1d1e4 <__assert_fail@plt+0xc058>
   1c4a8:	cmp	r0, #0
   1c4ac:	popne	{r4, r5, r6, pc}
   1c4b0:	adds	r4, r4, #0
   1c4b4:	movne	r4, #1
   1c4b8:	cmp	r5, #0
   1c4bc:	orreq	r4, r4, #1
   1c4c0:	cmp	r4, #0
   1c4c4:	popeq	{r4, r5, r6, pc}
   1c4c8:	bl	1c9a4 <__assert_fail@plt+0xb818>
   1c4cc:	push	{r4, lr}
   1c4d0:	cmp	r1, #0
   1c4d4:	orreq	r1, r1, #1
   1c4d8:	bl	1d1e4 <__assert_fail@plt+0xc058>
   1c4dc:	cmp	r0, #0
   1c4e0:	popne	{r4, pc}
   1c4e4:	bl	1c9a4 <__assert_fail@plt+0xb818>
   1c4e8:	push	{r4, r5, r6, lr}
   1c4ec:	mov	r6, r0
   1c4f0:	mov	r5, r1
   1c4f4:	mov	r4, r2
   1c4f8:	bl	1d518 <__assert_fail@plt+0xc38c>
   1c4fc:	cmp	r0, #0
   1c500:	popne	{r4, r5, r6, pc}
   1c504:	cmp	r6, #0
   1c508:	beq	1c518 <__assert_fail@plt+0xb38c>
   1c50c:	cmp	r5, #0
   1c510:	cmpne	r4, #0
   1c514:	popeq	{r4, r5, r6, pc}
   1c518:	bl	1c9a4 <__assert_fail@plt+0xb818>
   1c51c:	b	1c4e8 <__assert_fail@plt+0xb35c>
   1c520:	cmp	r2, #0
   1c524:	cmpne	r1, #0
   1c528:	moveq	r2, #1
   1c52c:	moveq	r1, r2
   1c530:	push	{r4, lr}
   1c534:	bl	1d518 <__assert_fail@plt+0xc38c>
   1c538:	cmp	r0, #0
   1c53c:	popne	{r4, pc}
   1c540:	bl	1c9a4 <__assert_fail@plt+0xb818>
   1c544:	mov	r2, r1
   1c548:	mov	r1, r0
   1c54c:	mov	r0, #0
   1c550:	b	1c4e8 <__assert_fail@plt+0xb35c>
   1c554:	mov	r2, r1
   1c558:	mov	r1, r0
   1c55c:	mov	r0, #0
   1c560:	b	1c520 <__assert_fail@plt+0xb394>
   1c564:	push	{r4, r5, r6, lr}
   1c568:	subs	r6, r0, #0
   1c56c:	sub	sp, sp, #8
   1c570:	mov	r5, r1
   1c574:	ldr	r4, [r1]
   1c578:	beq	1c5b4 <__assert_fail@plt+0xb428>
   1c57c:	lsr	r1, r4, #1
   1c580:	add	r3, r1, #1
   1c584:	mvn	r3, r3
   1c588:	cmp	r4, r3
   1c58c:	bhi	1c5b0 <__assert_fail@plt+0xb424>
   1c590:	add	r4, r4, #1
   1c594:	add	r4, r4, r1
   1c598:	mov	r0, r6
   1c59c:	mov	r1, r4
   1c5a0:	bl	1c4e8 <__assert_fail@plt+0xb35c>
   1c5a4:	str	r4, [r5]
   1c5a8:	add	sp, sp, #8
   1c5ac:	pop	{r4, r5, r6, pc}
   1c5b0:	bl	1c9a4 <__assert_fail@plt+0xb818>
   1c5b4:	cmp	r4, #0
   1c5b8:	bne	1c598 <__assert_fail@plt+0xb40c>
   1c5bc:	mov	r1, r2
   1c5c0:	mov	r0, #64	; 0x40
   1c5c4:	str	r2, [sp, #4]
   1c5c8:	bl	1d658 <__assert_fail@plt+0xc4cc>
   1c5cc:	ldr	r2, [sp, #4]
   1c5d0:	cmp	r0, #0
   1c5d4:	movne	r4, r0
   1c5d8:	addeq	r4, r0, #1
   1c5dc:	b	1c598 <__assert_fail@plt+0xb40c>
   1c5e0:	mov	r2, #1
   1c5e4:	b	1c564 <__assert_fail@plt+0xb3d8>
   1c5e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c5ec:	sub	sp, sp, #12
   1c5f0:	ldr	r6, [r1]
   1c5f4:	mov	sl, r1
   1c5f8:	mov	r9, r0
   1c5fc:	asrs	r4, r6, #1
   1c600:	mov	r5, r2
   1c604:	mov	fp, r3
   1c608:	ldr	r7, [sp, #48]	; 0x30
   1c60c:	bmi	1c778 <__assert_fail@plt+0xb5ec>
   1c610:	mvn	r3, #-2147483648	; 0x80000000
   1c614:	sub	r3, r3, r4
   1c618:	cmp	r6, r3
   1c61c:	movle	r3, #0
   1c620:	movgt	r3, #1
   1c624:	mvn	r8, fp
   1c628:	cmp	r3, #0
   1c62c:	addeq	r4, r4, r6
   1c630:	mvnne	r4, #-2147483648	; 0x80000000
   1c634:	lsr	r8, r8, #31
   1c638:	cmp	fp, r4
   1c63c:	movge	r3, #0
   1c640:	andlt	r3, r8, #1
   1c644:	cmp	r3, #0
   1c648:	beq	1c730 <__assert_fail@plt+0xb5a4>
   1c64c:	cmp	r7, #0
   1c650:	blt	1c800 <__assert_fail@plt+0xb674>
   1c654:	bne	1c7f8 <__assert_fail@plt+0xb66c>
   1c658:	mov	r2, #64	; 0x40
   1c65c:	mov	r1, r7
   1c660:	mov	r0, r2
   1c664:	str	r2, [sp, #4]
   1c668:	bl	1d864 <__assert_fail@plt+0xc6d8>
   1c66c:	ldr	r2, [sp, #4]
   1c670:	mov	r1, r7
   1c674:	mov	r4, r0
   1c678:	mov	r0, r2
   1c67c:	bl	1da84 <__assert_fail@plt+0xc8f8>
   1c680:	ldr	r2, [sp, #4]
   1c684:	sub	r1, r2, r1
   1c688:	cmp	r9, #0
   1c68c:	sub	r3, r4, r6
   1c690:	streq	r9, [sl]
   1c694:	cmp	r3, r5
   1c698:	bge	1c71c <__assert_fail@plt+0xb590>
   1c69c:	cmp	r5, #0
   1c6a0:	blt	1c78c <__assert_fail@plt+0xb600>
   1c6a4:	cmp	r6, #0
   1c6a8:	blt	1c6c8 <__assert_fail@plt+0xb53c>
   1c6ac:	mvn	r3, #-2147483648	; 0x80000000
   1c6b0:	sub	r3, r3, r5
   1c6b4:	cmp	r6, r3
   1c6b8:	movle	r3, #0
   1c6bc:	movgt	r3, #1
   1c6c0:	cmp	r3, #0
   1c6c4:	bne	1c888 <__assert_fail@plt+0xb6fc>
   1c6c8:	add	r5, r6, r5
   1c6cc:	cmp	fp, r5
   1c6d0:	movge	r8, #0
   1c6d4:	andlt	r8, r8, #1
   1c6d8:	cmp	r8, #0
   1c6dc:	mov	r4, r5
   1c6e0:	bne	1c888 <__assert_fail@plt+0xb6fc>
   1c6e4:	cmp	r7, #0
   1c6e8:	blt	1c7a0 <__assert_fail@plt+0xb614>
   1c6ec:	beq	1c718 <__assert_fail@plt+0xb58c>
   1c6f0:	cmp	r5, #0
   1c6f4:	blt	1c848 <__assert_fail@plt+0xb6bc>
   1c6f8:	mov	r1, r7
   1c6fc:	mvn	r0, #-2147483648	; 0x80000000
   1c700:	bl	1d864 <__assert_fail@plt+0xc6d8>
   1c704:	cmp	r5, r0
   1c708:	movle	r0, #0
   1c70c:	movgt	r0, #1
   1c710:	cmp	r0, #0
   1c714:	bne	1c888 <__assert_fail@plt+0xb6fc>
   1c718:	mul	r1, r5, r7
   1c71c:	mov	r0, r9
   1c720:	bl	1c498 <__assert_fail@plt+0xb30c>
   1c724:	str	r4, [sl]
   1c728:	add	sp, sp, #12
   1c72c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c730:	cmp	r7, #0
   1c734:	blt	1c7cc <__assert_fail@plt+0xb640>
   1c738:	beq	1c658 <__assert_fail@plt+0xb4cc>
   1c73c:	cmp	r4, #0
   1c740:	blt	1c808 <__assert_fail@plt+0xb67c>
   1c744:	mov	r1, r7
   1c748:	mvn	r0, #-2147483648	; 0x80000000
   1c74c:	bl	1d864 <__assert_fail@plt+0xc6d8>
   1c750:	cmp	r0, r4
   1c754:	movge	r0, #0
   1c758:	movlt	r0, #1
   1c75c:	cmp	r0, #0
   1c760:	mvnne	r2, #-2147483648	; 0x80000000
   1c764:	bne	1c65c <__assert_fail@plt+0xb4d0>
   1c768:	mul	r1, r7, r4
   1c76c:	cmp	r1, #63	; 0x3f
   1c770:	bgt	1c688 <__assert_fail@plt+0xb4fc>
   1c774:	b	1c658 <__assert_fail@plt+0xb4cc>
   1c778:	rsb	r3, r4, #-2147483648	; 0x80000000
   1c77c:	cmp	r6, r3
   1c780:	movge	r3, #0
   1c784:	movlt	r3, #1
   1c788:	b	1c624 <__assert_fail@plt+0xb498>
   1c78c:	rsb	r3, r5, #-2147483648	; 0x80000000
   1c790:	cmp	r6, r3
   1c794:	movge	r3, #0
   1c798:	movlt	r3, #1
   1c79c:	b	1c6c0 <__assert_fail@plt+0xb534>
   1c7a0:	cmp	r5, #0
   1c7a4:	blt	1c82c <__assert_fail@plt+0xb6a0>
   1c7a8:	cmn	r7, #1
   1c7ac:	beq	1c718 <__assert_fail@plt+0xb58c>
   1c7b0:	mov	r1, r7
   1c7b4:	mov	r0, #-2147483648	; 0x80000000
   1c7b8:	bl	1d864 <__assert_fail@plt+0xc6d8>
   1c7bc:	cmp	r5, r0
   1c7c0:	movle	r0, #0
   1c7c4:	movgt	r0, #1
   1c7c8:	b	1c710 <__assert_fail@plt+0xb584>
   1c7cc:	cmp	r4, #0
   1c7d0:	blt	1c86c <__assert_fail@plt+0xb6e0>
   1c7d4:	cmn	r7, #1
   1c7d8:	beq	1c768 <__assert_fail@plt+0xb5dc>
   1c7dc:	mov	r1, r7
   1c7e0:	mov	r0, #-2147483648	; 0x80000000
   1c7e4:	bl	1d864 <__assert_fail@plt+0xc6d8>
   1c7e8:	cmp	r0, r4
   1c7ec:	movge	r0, #0
   1c7f0:	movlt	r0, #1
   1c7f4:	b	1c75c <__assert_fail@plt+0xb5d0>
   1c7f8:	mov	r4, fp
   1c7fc:	b	1c744 <__assert_fail@plt+0xb5b8>
   1c800:	mov	r4, fp
   1c804:	b	1c7d4 <__assert_fail@plt+0xb648>
   1c808:	cmn	r4, #1
   1c80c:	beq	1c768 <__assert_fail@plt+0xb5dc>
   1c810:	mov	r1, r4
   1c814:	mov	r0, #-2147483648	; 0x80000000
   1c818:	bl	1d864 <__assert_fail@plt+0xc6d8>
   1c81c:	cmp	r7, r0
   1c820:	movle	r0, #0
   1c824:	movgt	r0, #1
   1c828:	b	1c75c <__assert_fail@plt+0xb5d0>
   1c82c:	mov	r1, r7
   1c830:	mvn	r0, #-2147483648	; 0x80000000
   1c834:	bl	1d864 <__assert_fail@plt+0xc6d8>
   1c838:	cmp	r5, r0
   1c83c:	movge	r0, #0
   1c840:	movlt	r0, #1
   1c844:	b	1c710 <__assert_fail@plt+0xb584>
   1c848:	cmn	r5, #1
   1c84c:	beq	1c718 <__assert_fail@plt+0xb58c>
   1c850:	mov	r1, r5
   1c854:	mov	r0, #-2147483648	; 0x80000000
   1c858:	bl	1d864 <__assert_fail@plt+0xc6d8>
   1c85c:	cmp	r7, r0
   1c860:	movle	r0, #0
   1c864:	movgt	r0, #1
   1c868:	b	1c710 <__assert_fail@plt+0xb584>
   1c86c:	mov	r1, r7
   1c870:	mvn	r0, #-2147483648	; 0x80000000
   1c874:	bl	1d864 <__assert_fail@plt+0xc6d8>
   1c878:	cmp	r0, r4
   1c87c:	movle	r0, #0
   1c880:	movgt	r0, #1
   1c884:	b	1c75c <__assert_fail@plt+0xb5d0>
   1c888:	bl	1c9a4 <__assert_fail@plt+0xb818>
   1c88c:	push	{r4, lr}
   1c890:	mov	r1, #1
   1c894:	bl	1d170 <__assert_fail@plt+0xbfe4>
   1c898:	cmp	r0, #0
   1c89c:	popne	{r4, pc}
   1c8a0:	bl	1c9a4 <__assert_fail@plt+0xb818>
   1c8a4:	push	{r4, lr}
   1c8a8:	mov	r1, #1
   1c8ac:	bl	1d170 <__assert_fail@plt+0xbfe4>
   1c8b0:	cmp	r0, #0
   1c8b4:	popne	{r4, pc}
   1c8b8:	bl	1c9a4 <__assert_fail@plt+0xb818>
   1c8bc:	push	{r4, lr}
   1c8c0:	bl	1d170 <__assert_fail@plt+0xbfe4>
   1c8c4:	cmp	r0, #0
   1c8c8:	popne	{r4, pc}
   1c8cc:	bl	1c9a4 <__assert_fail@plt+0xb818>
   1c8d0:	push	{r4, lr}
   1c8d4:	bl	1d170 <__assert_fail@plt+0xbfe4>
   1c8d8:	cmp	r0, #0
   1c8dc:	popne	{r4, pc}
   1c8e0:	bl	1c9a4 <__assert_fail@plt+0xb818>
   1c8e4:	push	{r4, r5, r6, lr}
   1c8e8:	mov	r6, r0
   1c8ec:	mov	r0, r1
   1c8f0:	mov	r4, r1
   1c8f4:	bl	1d1b8 <__assert_fail@plt+0xc02c>
   1c8f8:	subs	r5, r0, #0
   1c8fc:	beq	1c914 <__assert_fail@plt+0xb788>
   1c900:	mov	r2, r4
   1c904:	mov	r1, r6
   1c908:	bl	10f34 <memcpy@plt>
   1c90c:	mov	r0, r5
   1c910:	pop	{r4, r5, r6, pc}
   1c914:	bl	1c9a4 <__assert_fail@plt+0xb818>
   1c918:	push	{r4, r5, r6, lr}
   1c91c:	mov	r6, r0
   1c920:	mov	r0, r1
   1c924:	mov	r4, r1
   1c928:	bl	1d1b8 <__assert_fail@plt+0xc02c>
   1c92c:	subs	r5, r0, #0
   1c930:	beq	1c948 <__assert_fail@plt+0xb7bc>
   1c934:	mov	r2, r4
   1c938:	mov	r1, r6
   1c93c:	bl	10f34 <memcpy@plt>
   1c940:	mov	r0, r5
   1c944:	pop	{r4, r5, r6, pc}
   1c948:	bl	1c9a4 <__assert_fail@plt+0xb818>
   1c94c:	push	{r4, r5, r6, lr}
   1c950:	mov	r6, r0
   1c954:	add	r0, r1, #1
   1c958:	mov	r4, r1
   1c95c:	bl	1d1b8 <__assert_fail@plt+0xc02c>
   1c960:	subs	r5, r0, #0
   1c964:	beq	1c984 <__assert_fail@plt+0xb7f8>
   1c968:	mov	r3, #0
   1c96c:	mov	r1, r6
   1c970:	strb	r3, [r5, r4]
   1c974:	mov	r2, r4
   1c978:	bl	10f34 <memcpy@plt>
   1c97c:	mov	r0, r5
   1c980:	pop	{r4, r5, r6, pc}
   1c984:	bl	1c9a4 <__assert_fail@plt+0xb818>
   1c988:	push	{r4, lr}
   1c98c:	mov	r4, r0
   1c990:	bl	11078 <strlen@plt>
   1c994:	add	r1, r0, #1
   1c998:	mov	r0, r4
   1c99c:	pop	{r4, lr}
   1c9a0:	b	1c8e4 <__assert_fail@plt+0xb758>
   1c9a4:	ldr	r3, [pc, #44]	; 1c9d8 <__assert_fail@plt+0xb84c>
   1c9a8:	push	{r4, lr}
   1c9ac:	mov	r2, #5
   1c9b0:	ldr	r1, [pc, #36]	; 1c9dc <__assert_fail@plt+0xb850>
   1c9b4:	mov	r0, #0
   1c9b8:	ldr	r4, [r3]
   1c9bc:	bl	10f7c <dcgettext@plt>
   1c9c0:	ldr	r2, [pc, #24]	; 1c9e0 <__assert_fail@plt+0xb854>
   1c9c4:	mov	r1, #0
   1c9c8:	mov	r3, r0
   1c9cc:	mov	r0, r4
   1c9d0:	bl	11000 <error@plt>
   1c9d4:	bl	11168 <abort@plt>
   1c9d8:	andeq	r0, r3, r0, lsr #2
   1c9dc:	ldrdeq	lr, [r1], -r8
   1c9e0:			; <UNDEFINED> instruction: 0x0001e5b4
   1c9e4:	push	{r4, r5, r6, r7, lr}
   1c9e8:	sub	sp, sp, #20
   1c9ec:	mov	r6, r2
   1c9f0:	ldr	ip, [sp, #48]	; 0x30
   1c9f4:	mov	r2, r1
   1c9f8:	mov	r7, r3
   1c9fc:	str	ip, [sp]
   1ca00:	add	r3, sp, #8
   1ca04:	mov	r1, #0
   1ca08:	mov	r5, r0
   1ca0c:	ldr	r4, [sp, #56]	; 0x38
   1ca10:	bl	1cbc8 <__assert_fail@plt+0xba3c>
   1ca14:	cmp	r0, #0
   1ca18:	bne	1ca9c <__assert_fail@plt+0xb910>
   1ca1c:	ldrd	r0, [sp, #8]
   1ca20:	cmp	r1, r7
   1ca24:	cmpeq	r0, r6
   1ca28:	ldrd	r6, [sp, #40]	; 0x28
   1ca2c:	movcc	r3, #1
   1ca30:	movcs	r3, #0
   1ca34:	cmp	r1, r7
   1ca38:	cmpeq	r0, r6
   1ca3c:	orrhi	r3, r3, #1
   1ca40:	cmp	r3, #0
   1ca44:	beq	1ca94 <__assert_fail@plt+0xb908>
   1ca48:	mov	r3, #0
   1ca4c:	mvn	r2, #-1073741824	; 0xc0000000
   1ca50:	cmp	r1, r3
   1ca54:	cmpeq	r0, r2
   1ca58:	bhi	1cac8 <__assert_fail@plt+0xb93c>
   1ca5c:	bl	11090 <__errno_location@plt>
   1ca60:	mov	r3, #34	; 0x22
   1ca64:	mov	r6, r3
   1ca68:	str	r3, [r0]
   1ca6c:	cmp	r4, #0
   1ca70:	moveq	r4, #1
   1ca74:	mov	r0, r5
   1ca78:	bl	1bf18 <__assert_fail@plt+0xad8c>
   1ca7c:	mov	r1, r6
   1ca80:	ldr	r3, [sp, #52]	; 0x34
   1ca84:	ldr	r2, [pc, #144]	; 1cb1c <__assert_fail@plt+0xb990>
   1ca88:	str	r0, [sp]
   1ca8c:	mov	r0, r4
   1ca90:	bl	11000 <error@plt>
   1ca94:	add	sp, sp, #20
   1ca98:	pop	{r4, r5, r6, r7, pc}
   1ca9c:	cmp	r0, #1
   1caa0:	beq	1cadc <__assert_fail@plt+0xb950>
   1caa4:	cmp	r0, #3
   1caa8:	beq	1cb0c <__assert_fail@plt+0xb980>
   1caac:	cmp	r4, #0
   1cab0:	beq	1cafc <__assert_fail@plt+0xb970>
   1cab4:	bl	11090 <__errno_location@plt>
   1cab8:	ldr	r6, [r0]
   1cabc:	cmp	r6, #22
   1cac0:	moveq	r6, #0
   1cac4:	b	1ca74 <__assert_fail@plt+0xb8e8>
   1cac8:	bl	11090 <__errno_location@plt>
   1cacc:	mov	r3, #75	; 0x4b
   1cad0:	mov	r6, r3
   1cad4:	str	r3, [r0]
   1cad8:	b	1ca6c <__assert_fail@plt+0xb8e0>
   1cadc:	bl	11090 <__errno_location@plt>
   1cae0:	mov	r3, #75	; 0x4b
   1cae4:	mov	r6, r3
   1cae8:	str	r3, [r0]
   1caec:	cmp	r4, #0
   1caf0:	moveq	r4, #1
   1caf4:	bne	1cabc <__assert_fail@plt+0xb930>
   1caf8:	b	1ca74 <__assert_fail@plt+0xb8e8>
   1cafc:	bl	11090 <__errno_location@plt>
   1cb00:	mov	r4, #1
   1cb04:	ldr	r6, [r0]
   1cb08:	b	1cabc <__assert_fail@plt+0xb930>
   1cb0c:	bl	11090 <__errno_location@plt>
   1cb10:	mov	r6, #0
   1cb14:	str	r6, [r0]
   1cb18:	b	1caec <__assert_fail@plt+0xb960>
   1cb1c:	muleq	r1, ip, fp
   1cb20:	push	{r4, r5}
   1cb24:	mov	r1, #10
   1cb28:	pop	{r4, r5}
   1cb2c:	b	1c9e4 <__assert_fail@plt+0xb858>
   1cb30:	push	{r4, r5, r6, r7, r8, lr}
   1cb34:	subs	r5, r1, #0
   1cb38:	mov	r4, r0
   1cb3c:	blt	1cbb0 <__assert_fail@plt+0xba24>
   1cb40:	moveq	r6, #0
   1cb44:	moveq	r7, #0
   1cb48:	bne	1cb70 <__assert_fail@plt+0xb9e4>
   1cb4c:	ldr	r2, [r4]
   1cb50:	ldr	r1, [r4, #4]
   1cb54:	mov	r0, #0
   1cb58:	mul	ip, r2, r7
   1cb5c:	umull	r2, r3, r2, r5
   1cb60:	mla	r5, r5, r1, ip
   1cb64:	add	r3, r5, r3
   1cb68:	strd	r2, [r4]
   1cb6c:	pop	{r4, r5, r6, r7, r8, pc}
   1cb70:	asr	r7, r5, #31
   1cb74:	mov	r2, r5
   1cb78:	mov	r3, r7
   1cb7c:	mvn	r0, #0
   1cb80:	mvn	r1, #0
   1cb84:	bl	1daa4 <__assert_fail@plt+0xc918>
   1cb88:	ldrd	r2, [r4]
   1cb8c:	mov	r6, r5
   1cb90:	cmp	r1, r3
   1cb94:	cmpeq	r0, r2
   1cb98:	bcs	1cb4c <__assert_fail@plt+0xb9c0>
   1cb9c:	mvn	r2, #0
   1cba0:	mvn	r3, #0
   1cba4:	mov	r0, #1
   1cba8:	strd	r2, [r4]
   1cbac:	pop	{r4, r5, r6, r7, r8, pc}
   1cbb0:	ldrd	r2, [r0]
   1cbb4:	orrs	r3, r2, r3
   1cbb8:	moveq	r6, r5
   1cbbc:	asreq	r7, r6, #31
   1cbc0:	bne	1cb9c <__assert_fail@plt+0xba10>
   1cbc4:	b	1cb4c <__assert_fail@plt+0xb9c0>
   1cbc8:	cmp	r2, #36	; 0x24
   1cbcc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cbd0:	sub	sp, sp, #20
   1cbd4:	bhi	1d148 <__assert_fail@plt+0xbfbc>
   1cbd8:	cmp	r1, #0
   1cbdc:	mov	r8, r2
   1cbe0:	mov	r7, r0
   1cbe4:	mov	r5, r1
   1cbe8:	mov	r6, r3
   1cbec:	addeq	r5, sp, #4
   1cbf0:	bl	11090 <__errno_location@plt>
   1cbf4:	mov	r3, #0
   1cbf8:	str	r3, [r0]
   1cbfc:	mov	r9, r0
   1cc00:	bl	11054 <__ctype_b_loc@plt>
   1cc04:	ldrb	r3, [r7]
   1cc08:	mov	r2, r7
   1cc0c:	ldr	r0, [r0]
   1cc10:	b	1cc18 <__assert_fail@plt+0xba8c>
   1cc14:	ldrb	r3, [r2, #1]!
   1cc18:	lsl	r1, r3, #1
   1cc1c:	ldrh	r4, [r0, r1]
   1cc20:	ands	r4, r4, #8192	; 0x2000
   1cc24:	bne	1cc14 <__assert_fail@plt+0xba88>
   1cc28:	cmp	r3, #45	; 0x2d
   1cc2c:	bne	1cc40 <__assert_fail@plt+0xbab4>
   1cc30:	mov	r4, #4
   1cc34:	mov	r0, r4
   1cc38:	add	sp, sp, #20
   1cc3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cc40:	mov	r2, r8
   1cc44:	mov	r3, r4
   1cc48:	mov	r1, r5
   1cc4c:	mov	r0, r7
   1cc50:	bl	10f40 <__strtoull_internal@plt>
   1cc54:	ldr	r8, [r5]
   1cc58:	cmp	r7, r8
   1cc5c:	mov	r2, r0
   1cc60:	str	r0, [sp, #8]
   1cc64:	str	r1, [sp, #12]
   1cc68:	beq	1ccb4 <__assert_fail@plt+0xbb28>
   1cc6c:	ldr	r4, [r9]
   1cc70:	cmp	r4, #0
   1cc74:	bne	1cca4 <__assert_fail@plt+0xbb18>
   1cc78:	ldr	r3, [sp, #56]	; 0x38
   1cc7c:	cmp	r3, #0
   1cc80:	beq	1cc90 <__assert_fail@plt+0xbb04>
   1cc84:	ldrb	r9, [r8]
   1cc88:	cmp	r9, #0
   1cc8c:	bne	1ccec <__assert_fail@plt+0xbb60>
   1cc90:	mov	r0, r4
   1cc94:	str	r2, [r6]
   1cc98:	str	r1, [r6, #4]
   1cc9c:	add	sp, sp, #20
   1cca0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cca4:	cmp	r4, #34	; 0x22
   1cca8:	bne	1cc30 <__assert_fail@plt+0xbaa4>
   1ccac:	mov	r4, #1
   1ccb0:	b	1cc78 <__assert_fail@plt+0xbaec>
   1ccb4:	ldr	r3, [sp, #56]	; 0x38
   1ccb8:	cmp	r3, #0
   1ccbc:	beq	1cc30 <__assert_fail@plt+0xbaa4>
   1ccc0:	ldrb	r1, [r8]
   1ccc4:	cmp	r1, #0
   1ccc8:	beq	1cc30 <__assert_fail@plt+0xbaa4>
   1cccc:	mov	r0, r3
   1ccd0:	bl	11084 <strchr@plt>
   1ccd4:	cmp	r0, #0
   1ccd8:	beq	1cc30 <__assert_fail@plt+0xbaa4>
   1ccdc:	ldrb	r9, [r8]
   1cce0:	mov	r2, #1
   1cce4:	mov	r3, #0
   1cce8:	strd	r2, [sp, #8]
   1ccec:	mov	r1, r9
   1ccf0:	ldr	r0, [sp, #56]	; 0x38
   1ccf4:	bl	11084 <strchr@plt>
   1ccf8:	cmp	r0, #0
   1ccfc:	beq	1d104 <__assert_fail@plt+0xbf78>
   1cd00:	sub	r3, r9, #69	; 0x45
   1cd04:	cmp	r3, #47	; 0x2f
   1cd08:	ldrls	pc, [pc, r3, lsl #2]
   1cd0c:	b	1cdd0 <__assert_fail@plt+0xbc44>
   1cd10:	andeq	ip, r1, r0, asr #29
   1cd14:	ldrdeq	ip, [r1], -r0
   1cd18:	andeq	ip, r1, r0, asr #29
   1cd1c:	ldrdeq	ip, [r1], -r0
   1cd20:	ldrdeq	ip, [r1], -r0
   1cd24:	ldrdeq	ip, [r1], -r0
   1cd28:	andeq	ip, r1, r0, asr #29
   1cd2c:	ldrdeq	ip, [r1], -r0
   1cd30:	andeq	ip, r1, r0, asr #29
   1cd34:	ldrdeq	ip, [r1], -r0
   1cd38:	ldrdeq	ip, [r1], -r0
   1cd3c:	andeq	ip, r1, r0, asr #29
   1cd40:	ldrdeq	ip, [r1], -r0
   1cd44:	ldrdeq	ip, [r1], -r0
   1cd48:	ldrdeq	ip, [r1], -r0
   1cd4c:	andeq	ip, r1, r0, asr #29
   1cd50:	ldrdeq	ip, [r1], -r0
   1cd54:	ldrdeq	ip, [r1], -r0
   1cd58:	ldrdeq	ip, [r1], -r0
   1cd5c:	ldrdeq	ip, [r1], -r0
   1cd60:	andeq	ip, r1, r0, asr #29
   1cd64:	andeq	ip, r1, r0, asr #29
   1cd68:	ldrdeq	ip, [r1], -r0
   1cd6c:	ldrdeq	ip, [r1], -r0
   1cd70:	ldrdeq	ip, [r1], -r0
   1cd74:	ldrdeq	ip, [r1], -r0
   1cd78:	ldrdeq	ip, [r1], -r0
   1cd7c:	ldrdeq	ip, [r1], -r0
   1cd80:	ldrdeq	ip, [r1], -r0
   1cd84:	ldrdeq	ip, [r1], -r0
   1cd88:	ldrdeq	ip, [r1], -r0
   1cd8c:	ldrdeq	ip, [r1], -r0
   1cd90:	ldrdeq	ip, [r1], -r0
   1cd94:	ldrdeq	ip, [r1], -r0
   1cd98:	andeq	ip, r1, r0, asr #29
   1cd9c:	ldrdeq	ip, [r1], -r0
   1cda0:	ldrdeq	ip, [r1], -r0
   1cda4:	ldrdeq	ip, [r1], -r0
   1cda8:	andeq	ip, r1, r0, asr #29
   1cdac:	ldrdeq	ip, [r1], -r0
   1cdb0:	andeq	ip, r1, r0, asr #29
   1cdb4:	ldrdeq	ip, [r1], -r0
   1cdb8:	ldrdeq	ip, [r1], -r0
   1cdbc:	ldrdeq	ip, [r1], -r0
   1cdc0:	ldrdeq	ip, [r1], -r0
   1cdc4:	ldrdeq	ip, [r1], -r0
   1cdc8:	ldrdeq	ip, [r1], -r0
   1cdcc:	andeq	ip, r1, r0, asr #29
   1cdd0:	mov	r7, #1
   1cdd4:	mov	sl, #1024	; 0x400
   1cdd8:	sub	r9, r9, #66	; 0x42
   1cddc:	cmp	r9, #53	; 0x35
   1cde0:	ldrls	pc, [pc, r9, lsl #2]
   1cde4:	b	1d104 <__assert_fail@plt+0xbf78>
   1cde8:	andeq	sp, r1, r0, asr r0
   1cdec:	andeq	sp, r1, r4, lsl #2
   1cdf0:	andeq	sp, r1, r4, lsl #2
   1cdf4:	andeq	sp, r1, r8, lsr #32
   1cdf8:	andeq	sp, r1, r4, lsl #2
   1cdfc:	andeq	sp, r1, r0
   1ce00:	andeq	sp, r1, r4, lsl #2
   1ce04:	andeq	sp, r1, r4, lsl #2
   1ce08:	andeq	sp, r1, r4, lsl #2
   1ce0c:	andeq	ip, r1, r0, ror #31
   1ce10:	andeq	sp, r1, r4, lsl #2
   1ce14:	andeq	sp, r1, ip, lsr #1
   1ce18:	andeq	sp, r1, r4, lsl #2
   1ce1c:	andeq	sp, r1, r4, lsl #2
   1ce20:	andeq	sp, r1, r4, lsl #1
   1ce24:	andeq	sp, r1, r4, lsl #2
   1ce28:	andeq	sp, r1, r4, lsl #2
   1ce2c:	andeq	sp, r1, r4, lsl #2
   1ce30:	ldrdeq	sp, [r1], -ip
   1ce34:	andeq	sp, r1, r4, lsl #2
   1ce38:	andeq	sp, r1, r4, lsl #2
   1ce3c:	andeq	sp, r1, r4, lsl #2
   1ce40:	andeq	sp, r1, r4, lsl #2
   1ce44:			; <UNDEFINED> instruction: 0x0001cfb8
   1ce48:	andeq	ip, r1, r4, lsl #31
   1ce4c:	andeq	sp, r1, r4, lsl #2
   1ce50:	andeq	sp, r1, r4, lsl #2
   1ce54:	andeq	sp, r1, r4, lsl #2
   1ce58:	andeq	sp, r1, r4, lsl #2
   1ce5c:	andeq	sp, r1, r4, lsl #2
   1ce60:	andeq	sp, r1, r4, lsl #2
   1ce64:	andeq	sp, r1, r4, lsl #2
   1ce68:	andeq	ip, r1, r0, asr pc
   1ce6c:	andeq	ip, r1, r0, asr #30
   1ce70:	andeq	sp, r1, r4, lsl #2
   1ce74:	andeq	sp, r1, r4, lsl #2
   1ce78:	andeq	sp, r1, r4, lsl #2
   1ce7c:	andeq	sp, r1, r0
   1ce80:	andeq	sp, r1, r4, lsl #2
   1ce84:	andeq	sp, r1, r4, lsl #2
   1ce88:	andeq	sp, r1, r4, lsl #2
   1ce8c:	andeq	ip, r1, r0, ror #31
   1ce90:	andeq	sp, r1, r4, lsl #2
   1ce94:	andeq	sp, r1, ip, lsr #1
   1ce98:	andeq	sp, r1, r4, lsl #2
   1ce9c:	andeq	sp, r1, r4, lsl #2
   1cea0:	andeq	sp, r1, r4, lsl #2
   1cea4:	andeq	sp, r1, r4, lsl #2
   1cea8:	andeq	sp, r1, r4, lsl #2
   1ceac:	andeq	sp, r1, r4, lsl #2
   1ceb0:	ldrdeq	sp, [r1], -ip
   1ceb4:	andeq	sp, r1, r4, lsl #2
   1ceb8:	andeq	sp, r1, r4, lsl #2
   1cebc:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1cec0:	mov	r1, #48	; 0x30
   1cec4:	ldr	r0, [sp, #56]	; 0x38
   1cec8:	bl	11084 <strchr@plt>
   1cecc:	cmp	r0, #0
   1ced0:	beq	1cdd0 <__assert_fail@plt+0xbc44>
   1ced4:	ldrb	r3, [r8, #1]
   1ced8:	cmp	r3, #68	; 0x44
   1cedc:	beq	1cef0 <__assert_fail@plt+0xbd64>
   1cee0:	cmp	r3, #105	; 0x69
   1cee4:	beq	1d114 <__assert_fail@plt+0xbf88>
   1cee8:	cmp	r3, #66	; 0x42
   1ceec:	bne	1cdd0 <__assert_fail@plt+0xbc44>
   1cef0:	mov	r7, #2
   1cef4:	mov	sl, #1000	; 0x3e8
   1cef8:	b	1cdd8 <__assert_fail@plt+0xbc4c>
   1cefc:	ldrd	r2, [sp, #8]
   1cf00:	cmp	r2, #0
   1cf04:	sbcs	r1, r3, #0
   1cf08:	blt	1d12c <__assert_fail@plt+0xbfa0>
   1cf0c:	adds	r2, r2, r2
   1cf10:	adc	r3, r3, r3
   1cf14:	mov	r1, r3
   1cf18:	mov	r9, #0
   1cf1c:	str	r2, [sp, #8]
   1cf20:	str	r3, [sp, #12]
   1cf24:	add	r3, r8, r7
   1cf28:	str	r3, [r5]
   1cf2c:	ldrb	r3, [r8, r7]
   1cf30:	orr	r4, r4, r9
   1cf34:	cmp	r3, #0
   1cf38:	orrne	r4, r4, #2
   1cf3c:	b	1cc90 <__assert_fail@plt+0xbb04>
   1cf40:	ldr	r2, [sp, #8]
   1cf44:	ldr	r1, [sp, #12]
   1cf48:	mov	r9, #0
   1cf4c:	b	1cf24 <__assert_fail@plt+0xbd98>
   1cf50:	ldrd	r2, [sp, #8]
   1cf54:	ldr	r1, [pc, #512]	; 1d15c <__assert_fail@plt+0xbfd0>
   1cf58:	mvn	r0, #0
   1cf5c:	cmp	r3, r1
   1cf60:	cmpeq	r2, r0
   1cf64:	bhi	1d12c <__assert_fail@plt+0xbfa0>
   1cf68:	lsl	r1, r3, #9
   1cf6c:	orr	r1, r1, r2, lsr #23
   1cf70:	lsl	r2, r2, #9
   1cf74:	str	r1, [sp, #12]
   1cf78:	str	r2, [sp, #8]
   1cf7c:	mov	r9, #0
   1cf80:	b	1cf24 <__assert_fail@plt+0xbd98>
   1cf84:	mov	fp, #7
   1cf88:	mov	r9, #0
   1cf8c:	add	r8, sp, #8
   1cf90:	mov	r1, sl
   1cf94:	mov	r0, r8
   1cf98:	bl	1cb30 <__assert_fail@plt+0xb9a4>
   1cf9c:	subs	fp, fp, #1
   1cfa0:	orr	r9, r9, r0
   1cfa4:	bne	1cf90 <__assert_fail@plt+0xbe04>
   1cfa8:	ldr	r8, [r5]
   1cfac:	ldr	r2, [sp, #8]
   1cfb0:	ldr	r1, [sp, #12]
   1cfb4:	b	1cf24 <__assert_fail@plt+0xbd98>
   1cfb8:	mov	fp, #8
   1cfbc:	mov	r9, #0
   1cfc0:	add	r8, sp, fp
   1cfc4:	mov	r1, sl
   1cfc8:	mov	r0, r8
   1cfcc:	bl	1cb30 <__assert_fail@plt+0xb9a4>
   1cfd0:	subs	fp, fp, #1
   1cfd4:	orr	r9, r9, r0
   1cfd8:	bne	1cfc4 <__assert_fail@plt+0xbe38>
   1cfdc:	b	1cfa8 <__assert_fail@plt+0xbe1c>
   1cfe0:	mov	r1, sl
   1cfe4:	add	r0, sp, #8
   1cfe8:	bl	1cb30 <__assert_fail@plt+0xb9a4>
   1cfec:	ldr	r8, [r5]
   1cff0:	ldr	r2, [sp, #8]
   1cff4:	ldr	r1, [sp, #12]
   1cff8:	mov	r9, r0
   1cffc:	b	1cf24 <__assert_fail@plt+0xbd98>
   1d000:	mov	fp, #3
   1d004:	mov	r9, #0
   1d008:	add	r8, sp, #8
   1d00c:	mov	r1, sl
   1d010:	mov	r0, r8
   1d014:	bl	1cb30 <__assert_fail@plt+0xb9a4>
   1d018:	subs	fp, fp, #1
   1d01c:	orr	r9, r9, r0
   1d020:	bne	1d00c <__assert_fail@plt+0xbe80>
   1d024:	b	1cfa8 <__assert_fail@plt+0xbe1c>
   1d028:	mov	fp, #6
   1d02c:	mov	r9, #0
   1d030:	add	r8, sp, #8
   1d034:	mov	r1, sl
   1d038:	mov	r0, r8
   1d03c:	bl	1cb30 <__assert_fail@plt+0xb9a4>
   1d040:	subs	fp, fp, #1
   1d044:	orr	r9, r9, r0
   1d048:	bne	1d034 <__assert_fail@plt+0xbea8>
   1d04c:	b	1cfa8 <__assert_fail@plt+0xbe1c>
   1d050:	ldrd	r0, [sp, #8]
   1d054:	ldr	r3, [pc, #260]	; 1d160 <__assert_fail@plt+0xbfd4>
   1d058:	mvn	r2, #0
   1d05c:	cmp	r1, r3
   1d060:	cmpeq	r0, r2
   1d064:	bhi	1d12c <__assert_fail@plt+0xbfa0>
   1d068:	lsl	r1, r1, #10
   1d06c:	orr	r1, r1, r0, lsr #22
   1d070:	lsl	r2, r0, #10
   1d074:	str	r1, [sp, #12]
   1d078:	str	r2, [sp, #8]
   1d07c:	mov	r9, #0
   1d080:	b	1cf24 <__assert_fail@plt+0xbd98>
   1d084:	mov	fp, #5
   1d088:	mov	r9, #0
   1d08c:	add	r8, sp, #8
   1d090:	mov	r1, sl
   1d094:	mov	r0, r8
   1d098:	bl	1cb30 <__assert_fail@plt+0xb9a4>
   1d09c:	subs	fp, fp, #1
   1d0a0:	orr	r9, r9, r0
   1d0a4:	bne	1d090 <__assert_fail@plt+0xbf04>
   1d0a8:	b	1cfa8 <__assert_fail@plt+0xbe1c>
   1d0ac:	mov	r1, sl
   1d0b0:	add	r0, sp, #8
   1d0b4:	bl	1cb30 <__assert_fail@plt+0xb9a4>
   1d0b8:	mov	r1, sl
   1d0bc:	mov	r9, r0
   1d0c0:	add	r0, sp, #8
   1d0c4:	bl	1cb30 <__assert_fail@plt+0xb9a4>
   1d0c8:	ldr	r8, [r5]
   1d0cc:	ldr	r2, [sp, #8]
   1d0d0:	ldr	r1, [sp, #12]
   1d0d4:	orr	r9, r9, r0
   1d0d8:	b	1cf24 <__assert_fail@plt+0xbd98>
   1d0dc:	mov	fp, #4
   1d0e0:	mov	r9, #0
   1d0e4:	add	r8, sp, #8
   1d0e8:	mov	r1, sl
   1d0ec:	mov	r0, r8
   1d0f0:	bl	1cb30 <__assert_fail@plt+0xb9a4>
   1d0f4:	subs	fp, fp, #1
   1d0f8:	orr	r9, r9, r0
   1d0fc:	bne	1d0e8 <__assert_fail@plt+0xbf5c>
   1d100:	b	1cfa8 <__assert_fail@plt+0xbe1c>
   1d104:	ldrd	r2, [sp, #8]
   1d108:	orr	r4, r4, #2
   1d10c:	strd	r2, [r6]
   1d110:	b	1cc34 <__assert_fail@plt+0xbaa8>
   1d114:	ldrb	r7, [r8, #2]
   1d118:	mov	sl, #1024	; 0x400
   1d11c:	cmp	r7, #66	; 0x42
   1d120:	movne	r7, #1
   1d124:	moveq	r7, #3
   1d128:	b	1cdd8 <__assert_fail@plt+0xbc4c>
   1d12c:	mvn	r1, #0
   1d130:	mvn	r0, #0
   1d134:	mvn	r2, #0
   1d138:	strd	r0, [sp, #8]
   1d13c:	mov	r9, #1
   1d140:	mov	r1, r2
   1d144:	b	1cf24 <__assert_fail@plt+0xbd98>
   1d148:	ldr	r3, [pc, #20]	; 1d164 <__assert_fail@plt+0xbfd8>
   1d14c:	mov	r2, #85	; 0x55
   1d150:	ldr	r1, [pc, #16]	; 1d168 <__assert_fail@plt+0xbfdc>
   1d154:	ldr	r0, [pc, #16]	; 1d16c <__assert_fail@plt+0xbfe0>
   1d158:	bl	1118c <__assert_fail@plt>
   1d15c:	ldrshteq	pc, [pc], #-255	; <UNPREDICTABLE>
   1d160:	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
   1d164:	andeq	lr, r1, ip, ror #31
   1d168:	strdeq	lr, [r1], -r8
   1d16c:	andeq	pc, r1, r8
   1d170:	cmp	r1, #0
   1d174:	cmpne	r0, #0
   1d178:	moveq	r1, #1
   1d17c:	moveq	r0, r1
   1d180:	umull	r2, r3, r0, r1
   1d184:	adds	r3, r3, #0
   1d188:	movne	r3, #1
   1d18c:	cmp	r2, #0
   1d190:	blt	1d1a0 <__assert_fail@plt+0xc014>
   1d194:	cmp	r3, #0
   1d198:	bne	1d1a0 <__assert_fail@plt+0xc014>
   1d19c:	b	10ebc <calloc@plt>
   1d1a0:	push	{r4, lr}
   1d1a4:	bl	11090 <__errno_location@plt>
   1d1a8:	mov	r3, #12
   1d1ac:	str	r3, [r0]
   1d1b0:	mov	r0, #0
   1d1b4:	pop	{r4, pc}
   1d1b8:	cmp	r0, #0
   1d1bc:	moveq	r0, #1
   1d1c0:	cmp	r0, #0
   1d1c4:	blt	1d1cc <__assert_fail@plt+0xc040>
   1d1c8:	b	1100c <malloc@plt>
   1d1cc:	push	{r4, lr}
   1d1d0:	bl	11090 <__errno_location@plt>
   1d1d4:	mov	r3, #12
   1d1d8:	str	r3, [r0]
   1d1dc:	mov	r0, #0
   1d1e0:	pop	{r4, pc}
   1d1e4:	cmp	r0, #0
   1d1e8:	beq	1d20c <__assert_fail@plt+0xc080>
   1d1ec:	cmp	r1, #0
   1d1f0:	push	{lr}		; (str lr, [sp, #-4]!)
   1d1f4:	sub	sp, sp, #12
   1d1f8:	beq	1d214 <__assert_fail@plt+0xc088>
   1d1fc:	blt	1d22c <__assert_fail@plt+0xc0a0>
   1d200:	add	sp, sp, #12
   1d204:	pop	{lr}		; (ldr lr, [sp], #4)
   1d208:	b	10f88 <realloc@plt>
   1d20c:	mov	r0, r1
   1d210:	b	1d1b8 <__assert_fail@plt+0xc02c>
   1d214:	str	r1, [sp, #4]
   1d218:	bl	19f60 <__assert_fail@plt+0x8dd4>
   1d21c:	ldr	r3, [sp, #4]
   1d220:	mov	r0, r3
   1d224:	add	sp, sp, #12
   1d228:	pop	{pc}		; (ldr pc, [sp], #4)
   1d22c:	bl	11090 <__errno_location@plt>
   1d230:	mov	r2, #12
   1d234:	mov	r3, #0
   1d238:	str	r2, [r0]
   1d23c:	b	1d220 <__assert_fail@plt+0xc094>
   1d240:	push	{r4, r5, r6, lr}
   1d244:	mov	r4, r0
   1d248:	bl	10fe8 <__fpending@plt>
   1d24c:	ldr	r5, [r4]
   1d250:	and	r5, r5, #32
   1d254:	mov	r6, r0
   1d258:	mov	r0, r4
   1d25c:	bl	19dc8 <__assert_fail@plt+0x8c3c>
   1d260:	cmp	r5, #0
   1d264:	mov	r4, r0
   1d268:	bne	1d288 <__assert_fail@plt+0xc0fc>
   1d26c:	cmp	r0, #0
   1d270:	beq	1d280 <__assert_fail@plt+0xc0f4>
   1d274:	cmp	r6, #0
   1d278:	beq	1d2a4 <__assert_fail@plt+0xc118>
   1d27c:	mvn	r4, #0
   1d280:	mov	r0, r4
   1d284:	pop	{r4, r5, r6, pc}
   1d288:	cmp	r0, #0
   1d28c:	bne	1d27c <__assert_fail@plt+0xc0f0>
   1d290:	bl	11090 <__errno_location@plt>
   1d294:	str	r4, [r0]
   1d298:	mvn	r4, #0
   1d29c:	mov	r0, r4
   1d2a0:	pop	{r4, r5, r6, pc}
   1d2a4:	bl	11090 <__errno_location@plt>
   1d2a8:	ldr	r4, [r0]
   1d2ac:	subs	r4, r4, #9
   1d2b0:	mvnne	r4, #0
   1d2b4:	mov	r0, r4
   1d2b8:	pop	{r4, r5, r6, pc}
   1d2bc:	push	{r1, r2, r3}
   1d2c0:	push	{r4, r5, r6, r7, lr}
   1d2c4:	sub	sp, sp, #8
   1d2c8:	add	r3, sp, #32
   1d2cc:	ldr	r1, [sp, #28]
   1d2d0:	str	r3, [sp, #4]
   1d2d4:	cmp	r1, #0
   1d2d8:	beq	1d370 <__assert_fail@plt+0xc1e4>
   1d2dc:	ldr	r2, [pc, #412]	; 1d480 <__assert_fail@plt+0xc2f4>
   1d2e0:	mov	r5, r0
   1d2e4:	cmp	r1, r2
   1d2e8:	bne	1d334 <__assert_fail@plt+0xc1a8>
   1d2ec:	ldr	r6, [pc, #400]	; 1d484 <__assert_fail@plt+0xc2f8>
   1d2f0:	ldr	r7, [r3]
   1d2f4:	add	r2, sp, #36	; 0x24
   1d2f8:	ldr	r3, [r6]
   1d2fc:	str	r2, [sp, #4]
   1d300:	cmp	r3, #0
   1d304:	mov	r2, r7
   1d308:	blt	1d434 <__assert_fail@plt+0xc2a8>
   1d30c:	bl	110fc <fcntl64@plt>
   1d310:	subs	r4, r0, #0
   1d314:	blt	1d3b8 <__assert_fail@plt+0xc22c>
   1d318:	mov	r3, #1
   1d31c:	str	r3, [r6]
   1d320:	mov	r0, r4
   1d324:	add	sp, sp, #8
   1d328:	pop	{r4, r5, r6, r7, lr}
   1d32c:	add	sp, sp, #12
   1d330:	bx	lr
   1d334:	cmp	r1, #11
   1d338:	beq	1d360 <__assert_fail@plt+0xc1d4>
   1d33c:	bgt	1d380 <__assert_fail@plt+0xc1f4>
   1d340:	cmp	r1, #3
   1d344:	beq	1d360 <__assert_fail@plt+0xc1d4>
   1d348:	ble	1d474 <__assert_fail@plt+0xc2e8>
   1d34c:	cmp	r1, #8
   1d350:	beq	1d3a0 <__assert_fail@plt+0xc214>
   1d354:	ble	1d3a0 <__assert_fail@plt+0xc214>
   1d358:	cmp	r1, #9
   1d35c:	bne	1d3a0 <__assert_fail@plt+0xc214>
   1d360:	mov	r0, r5
   1d364:	bl	110fc <fcntl64@plt>
   1d368:	mov	r4, r0
   1d36c:	b	1d320 <__assert_fail@plt+0xc194>
   1d370:	ldr	r2, [sp, #32]
   1d374:	bl	110fc <fcntl64@plt>
   1d378:	mov	r4, r0
   1d37c:	b	1d320 <__assert_fail@plt+0xc194>
   1d380:	ldr	r3, [pc, #256]	; 1d488 <__assert_fail@plt+0xc2fc>
   1d384:	cmp	r1, r3
   1d388:	bgt	1d454 <__assert_fail@plt+0xc2c8>
   1d38c:	cmp	r1, r2
   1d390:	bge	1d3a0 <__assert_fail@plt+0xc214>
   1d394:	sub	r3, r3, #6
   1d398:	cmp	r1, r3
   1d39c:	beq	1d360 <__assert_fail@plt+0xc1d4>
   1d3a0:	ldr	r3, [sp, #4]
   1d3a4:	mov	r0, r5
   1d3a8:	ldr	r2, [r3]
   1d3ac:	bl	110fc <fcntl64@plt>
   1d3b0:	mov	r4, r0
   1d3b4:	b	1d320 <__assert_fail@plt+0xc194>
   1d3b8:	bl	11090 <__errno_location@plt>
   1d3bc:	ldr	r3, [r0]
   1d3c0:	cmp	r3, #22
   1d3c4:	bne	1d318 <__assert_fail@plt+0xc18c>
   1d3c8:	mov	r2, r7
   1d3cc:	mov	r0, r5
   1d3d0:	mov	r1, #0
   1d3d4:	bl	110fc <fcntl64@plt>
   1d3d8:	subs	r4, r0, #0
   1d3dc:	blt	1d320 <__assert_fail@plt+0xc194>
   1d3e0:	mvn	r3, #0
   1d3e4:	str	r3, [r6]
   1d3e8:	mov	r1, #1
   1d3ec:	mov	r0, r4
   1d3f0:	bl	110fc <fcntl64@plt>
   1d3f4:	subs	r2, r0, #0
   1d3f8:	blt	1d414 <__assert_fail@plt+0xc288>
   1d3fc:	orr	r2, r2, #1
   1d400:	mov	r1, #2
   1d404:	mov	r0, r4
   1d408:	bl	110fc <fcntl64@plt>
   1d40c:	cmn	r0, #1
   1d410:	bne	1d320 <__assert_fail@plt+0xc194>
   1d414:	bl	11090 <__errno_location@plt>
   1d418:	mov	r5, r0
   1d41c:	mov	r0, r4
   1d420:	ldr	r6, [r5]
   1d424:	mvn	r4, #0
   1d428:	bl	11174 <close@plt>
   1d42c:	str	r6, [r5]
   1d430:	b	1d320 <__assert_fail@plt+0xc194>
   1d434:	mov	r1, #0
   1d438:	bl	110fc <fcntl64@plt>
   1d43c:	subs	r4, r0, #0
   1d440:	blt	1d320 <__assert_fail@plt+0xc194>
   1d444:	ldr	r3, [r6]
   1d448:	cmn	r3, #1
   1d44c:	beq	1d3e8 <__assert_fail@plt+0xc25c>
   1d450:	b	1d320 <__assert_fail@plt+0xc194>
   1d454:	ldr	r3, [pc, #48]	; 1d48c <__assert_fail@plt+0xc300>
   1d458:	cmp	r1, r3
   1d45c:	beq	1d3a0 <__assert_fail@plt+0xc214>
   1d460:	blt	1d360 <__assert_fail@plt+0xc1d4>
   1d464:	add	r3, r3, #1
   1d468:	cmp	r1, r3
   1d46c:	bne	1d3a0 <__assert_fail@plt+0xc214>
   1d470:	b	1d360 <__assert_fail@plt+0xc1d4>
   1d474:	cmp	r1, #1
   1d478:	bne	1d3a0 <__assert_fail@plt+0xc214>
   1d47c:	b	1d360 <__assert_fail@plt+0xc1d4>
   1d480:	andeq	r0, r0, r6, lsl #8
   1d484:	andeq	r0, r3, r8, ror #5
   1d488:	andeq	r0, r0, r7, lsl #8
   1d48c:	andeq	r0, r0, r9, lsl #8
   1d490:	push	{r4, lr}
   1d494:	mov	r0, #14
   1d498:	bl	1112c <nl_langinfo@plt>
   1d49c:	cmp	r0, #0
   1d4a0:	beq	1d4b8 <__assert_fail@plt+0xc32c>
   1d4a4:	ldrb	r2, [r0]
   1d4a8:	ldr	r3, [pc, #16]	; 1d4c0 <__assert_fail@plt+0xc334>
   1d4ac:	cmp	r2, #0
   1d4b0:	moveq	r0, r3
   1d4b4:	pop	{r4, pc}
   1d4b8:	ldr	r0, [pc]	; 1d4c0 <__assert_fail@plt+0xc334>
   1d4bc:	pop	{r4, pc}
   1d4c0:	andeq	pc, r1, r0, lsr r0	; <UNPREDICTABLE>
   1d4c4:	push	{r4, r5, r6, r7, lr}
   1d4c8:	subs	r6, r0, #0
   1d4cc:	sub	sp, sp, #12
   1d4d0:	addeq	r6, sp, #4
   1d4d4:	mov	r0, r6
   1d4d8:	mov	r5, r2
   1d4dc:	mov	r7, r1
   1d4e0:	bl	10ff4 <mbrtowc@plt>
   1d4e4:	cmp	r5, #0
   1d4e8:	cmnne	r0, #3
   1d4ec:	mov	r4, r0
   1d4f0:	bls	1d50c <__assert_fail@plt+0xc380>
   1d4f4:	mov	r0, #0
   1d4f8:	bl	1d564 <__assert_fail@plt+0xc3d8>
   1d4fc:	cmp	r0, #0
   1d500:	moveq	r4, #1
   1d504:	ldrbeq	r3, [r7]
   1d508:	streq	r3, [r6]
   1d50c:	mov	r0, r4
   1d510:	add	sp, sp, #12
   1d514:	pop	{r4, r5, r6, r7, pc}
   1d518:	push	{r4, r5, r6, lr}
   1d51c:	subs	r4, r2, #0
   1d520:	mov	r6, r0
   1d524:	mov	r5, r1
   1d528:	beq	1d554 <__assert_fail@plt+0xc3c8>
   1d52c:	mov	r1, r4
   1d530:	mvn	r0, #0
   1d534:	bl	1d658 <__assert_fail@plt+0xc4cc>
   1d538:	cmp	r0, r5
   1d53c:	bcs	1d554 <__assert_fail@plt+0xc3c8>
   1d540:	bl	11090 <__errno_location@plt>
   1d544:	mov	r3, #12
   1d548:	str	r3, [r0]
   1d54c:	mov	r0, #0
   1d550:	pop	{r4, r5, r6, pc}
   1d554:	mul	r1, r5, r4
   1d558:	mov	r0, r6
   1d55c:	pop	{r4, r5, r6, lr}
   1d560:	b	1d1e4 <__assert_fail@plt+0xc058>
   1d564:	push	{lr}		; (str lr, [sp, #-4]!)
   1d568:	sub	sp, sp, #268	; 0x10c
   1d56c:	add	r1, sp, #4
   1d570:	ldr	r2, [pc, #60]	; 1d5b4 <__assert_fail@plt+0xc428>
   1d574:	bl	1d5c0 <__assert_fail@plt+0xc434>
   1d578:	cmp	r0, #0
   1d57c:	movne	r0, #0
   1d580:	bne	1d5ac <__assert_fail@plt+0xc420>
   1d584:	ldr	r1, [pc, #44]	; 1d5b8 <__assert_fail@plt+0xc42c>
   1d588:	add	r0, sp, #4
   1d58c:	bl	10eec <strcmp@plt>
   1d590:	cmp	r0, #0
   1d594:	beq	1d5ac <__assert_fail@plt+0xc420>
   1d598:	add	r0, sp, #4
   1d59c:	ldr	r1, [pc, #24]	; 1d5bc <__assert_fail@plt+0xc430>
   1d5a0:	bl	10eec <strcmp@plt>
   1d5a4:	adds	r0, r0, #0
   1d5a8:	movne	r0, #1
   1d5ac:	add	sp, sp, #268	; 0x10c
   1d5b0:	pop	{pc}		; (ldr pc, [sp], #4)
   1d5b4:	andeq	r0, r0, r1, lsl #2
   1d5b8:	andeq	pc, r1, r8, lsr r0	; <UNPREDICTABLE>
   1d5bc:	andeq	pc, r1, ip, lsr r0	; <UNPREDICTABLE>
   1d5c0:	push	{r4, r5, r6, lr}
   1d5c4:	mov	r5, r1
   1d5c8:	mov	r1, #0
   1d5cc:	mov	r4, r2
   1d5d0:	bl	11114 <setlocale@plt>
   1d5d4:	subs	r6, r0, #0
   1d5d8:	beq	1d634 <__assert_fail@plt+0xc4a8>
   1d5dc:	bl	11078 <strlen@plt>
   1d5e0:	cmp	r4, r0
   1d5e4:	bhi	1d61c <__assert_fail@plt+0xc490>
   1d5e8:	cmp	r4, #0
   1d5ec:	bne	1d5f8 <__assert_fail@plt+0xc46c>
   1d5f0:	mov	r0, #34	; 0x22
   1d5f4:	pop	{r4, r5, r6, pc}
   1d5f8:	sub	r4, r4, #1
   1d5fc:	mov	r1, r6
   1d600:	mov	r2, r4
   1d604:	mov	r0, r5
   1d608:	bl	10f34 <memcpy@plt>
   1d60c:	mov	r3, #0
   1d610:	strb	r3, [r5, r4]
   1d614:	mov	r0, #34	; 0x22
   1d618:	pop	{r4, r5, r6, pc}
   1d61c:	add	r2, r0, #1
   1d620:	mov	r1, r6
   1d624:	mov	r0, r5
   1d628:	bl	10f34 <memcpy@plt>
   1d62c:	mov	r0, #0
   1d630:	pop	{r4, r5, r6, pc}
   1d634:	cmp	r4, #0
   1d638:	beq	1d648 <__assert_fail@plt+0xc4bc>
   1d63c:	strb	r6, [r5]
   1d640:	mov	r0, #22
   1d644:	pop	{r4, r5, r6, pc}
   1d648:	mov	r0, #22
   1d64c:	pop	{r4, r5, r6, pc}
   1d650:	mov	r1, #0
   1d654:	b	11114 <setlocale@plt>
   1d658:	subs	r2, r1, #1
   1d65c:	bxeq	lr
   1d660:	bcc	1d838 <__assert_fail@plt+0xc6ac>
   1d664:	cmp	r0, r1
   1d668:	bls	1d81c <__assert_fail@plt+0xc690>
   1d66c:	tst	r1, r2
   1d670:	beq	1d828 <__assert_fail@plt+0xc69c>
   1d674:	clz	r3, r0
   1d678:	clz	r2, r1
   1d67c:	sub	r3, r2, r3
   1d680:	rsbs	r3, r3, #31
   1d684:	addne	r3, r3, r3, lsl #1
   1d688:	mov	r2, #0
   1d68c:	addne	pc, pc, r3, lsl #2
   1d690:	nop			; (mov r0, r0)
   1d694:	cmp	r0, r1, lsl #31
   1d698:	adc	r2, r2, r2
   1d69c:	subcs	r0, r0, r1, lsl #31
   1d6a0:	cmp	r0, r1, lsl #30
   1d6a4:	adc	r2, r2, r2
   1d6a8:	subcs	r0, r0, r1, lsl #30
   1d6ac:	cmp	r0, r1, lsl #29
   1d6b0:	adc	r2, r2, r2
   1d6b4:	subcs	r0, r0, r1, lsl #29
   1d6b8:	cmp	r0, r1, lsl #28
   1d6bc:	adc	r2, r2, r2
   1d6c0:	subcs	r0, r0, r1, lsl #28
   1d6c4:	cmp	r0, r1, lsl #27
   1d6c8:	adc	r2, r2, r2
   1d6cc:	subcs	r0, r0, r1, lsl #27
   1d6d0:	cmp	r0, r1, lsl #26
   1d6d4:	adc	r2, r2, r2
   1d6d8:	subcs	r0, r0, r1, lsl #26
   1d6dc:	cmp	r0, r1, lsl #25
   1d6e0:	adc	r2, r2, r2
   1d6e4:	subcs	r0, r0, r1, lsl #25
   1d6e8:	cmp	r0, r1, lsl #24
   1d6ec:	adc	r2, r2, r2
   1d6f0:	subcs	r0, r0, r1, lsl #24
   1d6f4:	cmp	r0, r1, lsl #23
   1d6f8:	adc	r2, r2, r2
   1d6fc:	subcs	r0, r0, r1, lsl #23
   1d700:	cmp	r0, r1, lsl #22
   1d704:	adc	r2, r2, r2
   1d708:	subcs	r0, r0, r1, lsl #22
   1d70c:	cmp	r0, r1, lsl #21
   1d710:	adc	r2, r2, r2
   1d714:	subcs	r0, r0, r1, lsl #21
   1d718:	cmp	r0, r1, lsl #20
   1d71c:	adc	r2, r2, r2
   1d720:	subcs	r0, r0, r1, lsl #20
   1d724:	cmp	r0, r1, lsl #19
   1d728:	adc	r2, r2, r2
   1d72c:	subcs	r0, r0, r1, lsl #19
   1d730:	cmp	r0, r1, lsl #18
   1d734:	adc	r2, r2, r2
   1d738:	subcs	r0, r0, r1, lsl #18
   1d73c:	cmp	r0, r1, lsl #17
   1d740:	adc	r2, r2, r2
   1d744:	subcs	r0, r0, r1, lsl #17
   1d748:	cmp	r0, r1, lsl #16
   1d74c:	adc	r2, r2, r2
   1d750:	subcs	r0, r0, r1, lsl #16
   1d754:	cmp	r0, r1, lsl #15
   1d758:	adc	r2, r2, r2
   1d75c:	subcs	r0, r0, r1, lsl #15
   1d760:	cmp	r0, r1, lsl #14
   1d764:	adc	r2, r2, r2
   1d768:	subcs	r0, r0, r1, lsl #14
   1d76c:	cmp	r0, r1, lsl #13
   1d770:	adc	r2, r2, r2
   1d774:	subcs	r0, r0, r1, lsl #13
   1d778:	cmp	r0, r1, lsl #12
   1d77c:	adc	r2, r2, r2
   1d780:	subcs	r0, r0, r1, lsl #12
   1d784:	cmp	r0, r1, lsl #11
   1d788:	adc	r2, r2, r2
   1d78c:	subcs	r0, r0, r1, lsl #11
   1d790:	cmp	r0, r1, lsl #10
   1d794:	adc	r2, r2, r2
   1d798:	subcs	r0, r0, r1, lsl #10
   1d79c:	cmp	r0, r1, lsl #9
   1d7a0:	adc	r2, r2, r2
   1d7a4:	subcs	r0, r0, r1, lsl #9
   1d7a8:	cmp	r0, r1, lsl #8
   1d7ac:	adc	r2, r2, r2
   1d7b0:	subcs	r0, r0, r1, lsl #8
   1d7b4:	cmp	r0, r1, lsl #7
   1d7b8:	adc	r2, r2, r2
   1d7bc:	subcs	r0, r0, r1, lsl #7
   1d7c0:	cmp	r0, r1, lsl #6
   1d7c4:	adc	r2, r2, r2
   1d7c8:	subcs	r0, r0, r1, lsl #6
   1d7cc:	cmp	r0, r1, lsl #5
   1d7d0:	adc	r2, r2, r2
   1d7d4:	subcs	r0, r0, r1, lsl #5
   1d7d8:	cmp	r0, r1, lsl #4
   1d7dc:	adc	r2, r2, r2
   1d7e0:	subcs	r0, r0, r1, lsl #4
   1d7e4:	cmp	r0, r1, lsl #3
   1d7e8:	adc	r2, r2, r2
   1d7ec:	subcs	r0, r0, r1, lsl #3
   1d7f0:	cmp	r0, r1, lsl #2
   1d7f4:	adc	r2, r2, r2
   1d7f8:	subcs	r0, r0, r1, lsl #2
   1d7fc:	cmp	r0, r1, lsl #1
   1d800:	adc	r2, r2, r2
   1d804:	subcs	r0, r0, r1, lsl #1
   1d808:	cmp	r0, r1
   1d80c:	adc	r2, r2, r2
   1d810:	subcs	r0, r0, r1
   1d814:	mov	r0, r2
   1d818:	bx	lr
   1d81c:	moveq	r0, #1
   1d820:	movne	r0, #0
   1d824:	bx	lr
   1d828:	clz	r2, r1
   1d82c:	rsb	r2, r2, #31
   1d830:	lsr	r0, r0, r2
   1d834:	bx	lr
   1d838:	cmp	r0, #0
   1d83c:	mvnne	r0, #0
   1d840:	b	1dae0 <__assert_fail@plt+0xc954>
   1d844:	cmp	r1, #0
   1d848:	beq	1d838 <__assert_fail@plt+0xc6ac>
   1d84c:	push	{r0, r1, lr}
   1d850:	bl	1d658 <__assert_fail@plt+0xc4cc>
   1d854:	pop	{r1, r2, lr}
   1d858:	mul	r3, r2, r0
   1d85c:	sub	r1, r1, r3
   1d860:	bx	lr
   1d864:	cmp	r1, #0
   1d868:	beq	1da74 <__assert_fail@plt+0xc8e8>
   1d86c:	eor	ip, r0, r1
   1d870:	rsbmi	r1, r1, #0
   1d874:	subs	r2, r1, #1
   1d878:	beq	1da40 <__assert_fail@plt+0xc8b4>
   1d87c:	movs	r3, r0
   1d880:	rsbmi	r3, r0, #0
   1d884:	cmp	r3, r1
   1d888:	bls	1da4c <__assert_fail@plt+0xc8c0>
   1d88c:	tst	r1, r2
   1d890:	beq	1da5c <__assert_fail@plt+0xc8d0>
   1d894:	clz	r2, r3
   1d898:	clz	r0, r1
   1d89c:	sub	r2, r0, r2
   1d8a0:	rsbs	r2, r2, #31
   1d8a4:	addne	r2, r2, r2, lsl #1
   1d8a8:	mov	r0, #0
   1d8ac:	addne	pc, pc, r2, lsl #2
   1d8b0:	nop			; (mov r0, r0)
   1d8b4:	cmp	r3, r1, lsl #31
   1d8b8:	adc	r0, r0, r0
   1d8bc:	subcs	r3, r3, r1, lsl #31
   1d8c0:	cmp	r3, r1, lsl #30
   1d8c4:	adc	r0, r0, r0
   1d8c8:	subcs	r3, r3, r1, lsl #30
   1d8cc:	cmp	r3, r1, lsl #29
   1d8d0:	adc	r0, r0, r0
   1d8d4:	subcs	r3, r3, r1, lsl #29
   1d8d8:	cmp	r3, r1, lsl #28
   1d8dc:	adc	r0, r0, r0
   1d8e0:	subcs	r3, r3, r1, lsl #28
   1d8e4:	cmp	r3, r1, lsl #27
   1d8e8:	adc	r0, r0, r0
   1d8ec:	subcs	r3, r3, r1, lsl #27
   1d8f0:	cmp	r3, r1, lsl #26
   1d8f4:	adc	r0, r0, r0
   1d8f8:	subcs	r3, r3, r1, lsl #26
   1d8fc:	cmp	r3, r1, lsl #25
   1d900:	adc	r0, r0, r0
   1d904:	subcs	r3, r3, r1, lsl #25
   1d908:	cmp	r3, r1, lsl #24
   1d90c:	adc	r0, r0, r0
   1d910:	subcs	r3, r3, r1, lsl #24
   1d914:	cmp	r3, r1, lsl #23
   1d918:	adc	r0, r0, r0
   1d91c:	subcs	r3, r3, r1, lsl #23
   1d920:	cmp	r3, r1, lsl #22
   1d924:	adc	r0, r0, r0
   1d928:	subcs	r3, r3, r1, lsl #22
   1d92c:	cmp	r3, r1, lsl #21
   1d930:	adc	r0, r0, r0
   1d934:	subcs	r3, r3, r1, lsl #21
   1d938:	cmp	r3, r1, lsl #20
   1d93c:	adc	r0, r0, r0
   1d940:	subcs	r3, r3, r1, lsl #20
   1d944:	cmp	r3, r1, lsl #19
   1d948:	adc	r0, r0, r0
   1d94c:	subcs	r3, r3, r1, lsl #19
   1d950:	cmp	r3, r1, lsl #18
   1d954:	adc	r0, r0, r0
   1d958:	subcs	r3, r3, r1, lsl #18
   1d95c:	cmp	r3, r1, lsl #17
   1d960:	adc	r0, r0, r0
   1d964:	subcs	r3, r3, r1, lsl #17
   1d968:	cmp	r3, r1, lsl #16
   1d96c:	adc	r0, r0, r0
   1d970:	subcs	r3, r3, r1, lsl #16
   1d974:	cmp	r3, r1, lsl #15
   1d978:	adc	r0, r0, r0
   1d97c:	subcs	r3, r3, r1, lsl #15
   1d980:	cmp	r3, r1, lsl #14
   1d984:	adc	r0, r0, r0
   1d988:	subcs	r3, r3, r1, lsl #14
   1d98c:	cmp	r3, r1, lsl #13
   1d990:	adc	r0, r0, r0
   1d994:	subcs	r3, r3, r1, lsl #13
   1d998:	cmp	r3, r1, lsl #12
   1d99c:	adc	r0, r0, r0
   1d9a0:	subcs	r3, r3, r1, lsl #12
   1d9a4:	cmp	r3, r1, lsl #11
   1d9a8:	adc	r0, r0, r0
   1d9ac:	subcs	r3, r3, r1, lsl #11
   1d9b0:	cmp	r3, r1, lsl #10
   1d9b4:	adc	r0, r0, r0
   1d9b8:	subcs	r3, r3, r1, lsl #10
   1d9bc:	cmp	r3, r1, lsl #9
   1d9c0:	adc	r0, r0, r0
   1d9c4:	subcs	r3, r3, r1, lsl #9
   1d9c8:	cmp	r3, r1, lsl #8
   1d9cc:	adc	r0, r0, r0
   1d9d0:	subcs	r3, r3, r1, lsl #8
   1d9d4:	cmp	r3, r1, lsl #7
   1d9d8:	adc	r0, r0, r0
   1d9dc:	subcs	r3, r3, r1, lsl #7
   1d9e0:	cmp	r3, r1, lsl #6
   1d9e4:	adc	r0, r0, r0
   1d9e8:	subcs	r3, r3, r1, lsl #6
   1d9ec:	cmp	r3, r1, lsl #5
   1d9f0:	adc	r0, r0, r0
   1d9f4:	subcs	r3, r3, r1, lsl #5
   1d9f8:	cmp	r3, r1, lsl #4
   1d9fc:	adc	r0, r0, r0
   1da00:	subcs	r3, r3, r1, lsl #4
   1da04:	cmp	r3, r1, lsl #3
   1da08:	adc	r0, r0, r0
   1da0c:	subcs	r3, r3, r1, lsl #3
   1da10:	cmp	r3, r1, lsl #2
   1da14:	adc	r0, r0, r0
   1da18:	subcs	r3, r3, r1, lsl #2
   1da1c:	cmp	r3, r1, lsl #1
   1da20:	adc	r0, r0, r0
   1da24:	subcs	r3, r3, r1, lsl #1
   1da28:	cmp	r3, r1
   1da2c:	adc	r0, r0, r0
   1da30:	subcs	r3, r3, r1
   1da34:	cmp	ip, #0
   1da38:	rsbmi	r0, r0, #0
   1da3c:	bx	lr
   1da40:	teq	ip, r0
   1da44:	rsbmi	r0, r0, #0
   1da48:	bx	lr
   1da4c:	movcc	r0, #0
   1da50:	asreq	r0, ip, #31
   1da54:	orreq	r0, r0, #1
   1da58:	bx	lr
   1da5c:	clz	r2, r1
   1da60:	rsb	r2, r2, #31
   1da64:	cmp	ip, #0
   1da68:	lsr	r0, r3, r2
   1da6c:	rsbmi	r0, r0, #0
   1da70:	bx	lr
   1da74:	cmp	r0, #0
   1da78:	mvngt	r0, #-2147483648	; 0x80000000
   1da7c:	movlt	r0, #-2147483648	; 0x80000000
   1da80:	b	1dae0 <__assert_fail@plt+0xc954>
   1da84:	cmp	r1, #0
   1da88:	beq	1da74 <__assert_fail@plt+0xc8e8>
   1da8c:	push	{r0, r1, lr}
   1da90:	bl	1d86c <__assert_fail@plt+0xc6e0>
   1da94:	pop	{r1, r2, lr}
   1da98:	mul	r3, r2, r0
   1da9c:	sub	r1, r1, r3
   1daa0:	bx	lr
   1daa4:	cmp	r3, #0
   1daa8:	cmpeq	r2, #0
   1daac:	bne	1dac4 <__assert_fail@plt+0xc938>
   1dab0:	cmp	r1, #0
   1dab4:	cmpeq	r0, #0
   1dab8:	mvnne	r1, #0
   1dabc:	mvnne	r0, #0
   1dac0:	b	1dae0 <__assert_fail@plt+0xc954>
   1dac4:	sub	sp, sp, #8
   1dac8:	push	{sp, lr}
   1dacc:	bl	1daf0 <__assert_fail@plt+0xc964>
   1dad0:	ldr	lr, [sp, #4]
   1dad4:	add	sp, sp, #8
   1dad8:	pop	{r2, r3}
   1dadc:	bx	lr
   1dae0:	push	{r1, lr}
   1dae4:	mov	r0, #8
   1dae8:	bl	10ed4 <raise@plt>
   1daec:	pop	{r1, pc}
   1daf0:	cmp	r1, r3
   1daf4:	push	{r4, r5, r6, r7, r8, r9, lr}
   1daf8:	cmpeq	r0, r2
   1dafc:	mov	r4, r0
   1db00:	mov	r5, r1
   1db04:	ldr	r9, [sp, #28]
   1db08:	movcc	r0, #0
   1db0c:	movcc	r1, #0
   1db10:	bcc	1dc08 <__assert_fail@plt+0xca7c>
   1db14:	cmp	r3, #0
   1db18:	clzeq	ip, r2
   1db1c:	clzne	ip, r3
   1db20:	addeq	ip, ip, #32
   1db24:	cmp	r5, #0
   1db28:	clzeq	r1, r4
   1db2c:	addeq	r1, r1, #32
   1db30:	clzne	r1, r5
   1db34:	sub	ip, ip, r1
   1db38:	sub	lr, ip, #32
   1db3c:	lsl	r7, r3, ip
   1db40:	rsb	r8, ip, #32
   1db44:	orr	r7, r7, r2, lsl lr
   1db48:	orr	r7, r7, r2, lsr r8
   1db4c:	lsl	r6, r2, ip
   1db50:	cmp	r5, r7
   1db54:	cmpeq	r4, r6
   1db58:	movcc	r0, #0
   1db5c:	movcc	r1, #0
   1db60:	bcc	1db7c <__assert_fail@plt+0xc9f0>
   1db64:	mov	r3, #1
   1db68:	subs	r4, r4, r6
   1db6c:	lsl	r1, r3, lr
   1db70:	lsl	r0, r3, ip
   1db74:	orr	r1, r1, r3, lsr r8
   1db78:	sbc	r5, r5, r7
   1db7c:	cmp	ip, #0
   1db80:	beq	1dc08 <__assert_fail@plt+0xca7c>
   1db84:	lsrs	r3, r7, #1
   1db88:	rrx	r2, r6
   1db8c:	mov	r6, ip
   1db90:	b	1dbb4 <__assert_fail@plt+0xca28>
   1db94:	subs	r4, r4, r2
   1db98:	sbc	r5, r5, r3
   1db9c:	adds	r4, r4, r4
   1dba0:	adc	r5, r5, r5
   1dba4:	adds	r4, r4, #1
   1dba8:	adc	r5, r5, #0
   1dbac:	subs	r6, r6, #1
   1dbb0:	beq	1dbd0 <__assert_fail@plt+0xca44>
   1dbb4:	cmp	r5, r3
   1dbb8:	cmpeq	r4, r2
   1dbbc:	bcs	1db94 <__assert_fail@plt+0xca08>
   1dbc0:	adds	r4, r4, r4
   1dbc4:	adc	r5, r5, r5
   1dbc8:	subs	r6, r6, #1
   1dbcc:	bne	1dbb4 <__assert_fail@plt+0xca28>
   1dbd0:	lsr	r6, r4, ip
   1dbd4:	lsr	r7, r5, ip
   1dbd8:	orr	r6, r6, r5, lsl r8
   1dbdc:	adds	r2, r0, r4
   1dbe0:	orr	r6, r6, r5, lsr lr
   1dbe4:	adc	r3, r1, r5
   1dbe8:	lsl	r1, r7, ip
   1dbec:	orr	r1, r1, r6, lsl lr
   1dbf0:	lsl	r0, r6, ip
   1dbf4:	orr	r1, r1, r6, lsr r8
   1dbf8:	subs	r0, r2, r0
   1dbfc:	mov	r4, r6
   1dc00:	mov	r5, r7
   1dc04:	sbc	r1, r3, r1
   1dc08:	cmp	r9, #0
   1dc0c:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   1dc10:	strd	r4, [r9]
   1dc14:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1dc18:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1dc1c:	mov	r7, r0
   1dc20:	ldr	r6, [pc, #72]	; 1dc70 <__assert_fail@plt+0xcae4>
   1dc24:	ldr	r5, [pc, #72]	; 1dc74 <__assert_fail@plt+0xcae8>
   1dc28:	add	r6, pc, r6
   1dc2c:	add	r5, pc, r5
   1dc30:	sub	r6, r6, r5
   1dc34:	mov	r8, r1
   1dc38:	mov	r9, r2
   1dc3c:	bl	10e90 <fdopen@plt-0x20>
   1dc40:	asrs	r6, r6, #2
   1dc44:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1dc48:	mov	r4, #0
   1dc4c:	add	r4, r4, #1
   1dc50:	ldr	r3, [r5], #4
   1dc54:	mov	r2, r9
   1dc58:	mov	r1, r8
   1dc5c:	mov	r0, r7
   1dc60:	blx	r3
   1dc64:	cmp	r6, r4
   1dc68:	bne	1dc4c <__assert_fail@plt+0xcac0>
   1dc6c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1dc70:	andeq	r2, r1, r0, ror #5
   1dc74:	ldrdeq	r2, [r1], -r8
   1dc78:	bx	lr
   1dc7c:	ldr	r3, [pc, #12]	; 1dc90 <__assert_fail@plt+0xcb04>
   1dc80:	mov	r1, #0
   1dc84:	add	r3, pc, r3
   1dc88:	ldr	r2, [r3]
   1dc8c:	b	1109c <__cxa_atexit@plt>
   1dc90:	andeq	r2, r1, r0, lsl #9

Disassembly of section .fini:

0001dc94 <.fini>:
   1dc94:	push	{r3, lr}
   1dc98:	pop	{r3, pc}
