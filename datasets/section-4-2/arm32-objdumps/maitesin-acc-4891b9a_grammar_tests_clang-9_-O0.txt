
../repos/maitesin-acc-4891b9a/bin/grammar_tests:     file format elf32-littlearm


Disassembly of section .init:

00011e10 <.init>:
   11e10:	push	{r3, lr}
   11e14:	bl	12058 <_start@@Base+0x3c>
   11e18:	pop	{r3, pc}

Disassembly of section .plt:

00011e1c <fdopen@plt-0x14>:
   11e1c:	push	{lr}		; (str lr, [sp, #-4]!)
   11e20:	ldr	lr, [pc, #4]	; 11e2c <fdopen@plt-0x4>
   11e24:	add	lr, pc, lr
   11e28:	ldr	pc, [lr, #8]!
   11e2c:	ldrdeq	pc, [r1], -r4

00011e30 <fdopen@plt>:
   11e30:	add	ip, pc, #0, 12
   11e34:	add	ip, ip, #126976	; 0x1f000
   11e38:	ldr	pc, [ip, #468]!	; 0x1d4

00011e3c <setbuf@plt>:
   11e3c:	add	ip, pc, #0, 12
   11e40:	add	ip, ip, #126976	; 0x1f000
   11e44:	ldr	pc, [ip, #460]!	; 0x1cc

00011e48 <strtol@plt>:
   11e48:	add	ip, pc, #0, 12
   11e4c:	add	ip, ip, #126976	; 0x1f000
   11e50:	ldr	pc, [ip, #452]!	; 0x1c4

00011e54 <printf@plt>:
   11e54:	add	ip, pc, #0, 12
   11e58:	add	ip, ip, #126976	; 0x1f000
   11e5c:	ldr	pc, [ip, #444]!	; 0x1bc

00011e60 <fflush@plt>:
   11e60:	add	ip, pc, #0, 12
   11e64:	add	ip, ip, #126976	; 0x1f000
   11e68:	ldr	pc, [ip, #436]!	; 0x1b4

00011e6c <free@plt>:
   11e6c:	add	ip, pc, #0, 12
   11e70:	add	ip, ip, #126976	; 0x1f000
   11e74:	ldr	pc, [ip, #428]!	; 0x1ac

00011e78 <memcpy@plt>:
   11e78:	add	ip, pc, #0, 12
   11e7c:	add	ip, ip, #126976	; 0x1f000
   11e80:	ldr	pc, [ip, #420]!	; 0x1a4

00011e84 <mmap64@plt>:
   11e84:	add	ip, pc, #0, 12
   11e88:	add	ip, ip, #126976	; 0x1f000
   11e8c:	ldr	pc, [ip, #412]!	; 0x19c

00011e90 <ftell@plt>:
   11e90:	add	ip, pc, #0, 12
   11e94:	add	ip, ip, #126976	; 0x1f000
   11e98:	ldr	pc, [ip, #404]!	; 0x194

00011e9c <uname@plt>:
   11e9c:	add	ip, pc, #0, 12
   11ea0:	add	ip, ip, #126976	; 0x1f000
   11ea4:	ldr	pc, [ip, #396]!	; 0x18c

00011ea8 <strdup@plt>:
   11ea8:	add	ip, pc, #0, 12
   11eac:	add	ip, ip, #126976	; 0x1f000
   11eb0:	ldr	pc, [ip, #388]!	; 0x184

00011eb4 <realloc@plt>:
   11eb4:	add	ip, pc, #0, 12
   11eb8:	add	ip, ip, #126976	; 0x1f000
   11ebc:	ldr	pc, [ip, #380]!	; 0x17c

00011ec0 <fwrite@plt>:
   11ec0:	add	ip, pc, #0, 12
   11ec4:	add	ip, ip, #126976	; 0x1f000
   11ec8:	ldr	pc, [ip, #372]!	; 0x174

00011ecc <open64@plt>:
   11ecc:	add	ip, pc, #0, 12
   11ed0:	add	ip, ip, #126976	; 0x1f000
   11ed4:	ldr	pc, [ip, #364]!	; 0x16c

00011ed8 <getenv@plt>:
   11ed8:	add	ip, pc, #0, 12
   11edc:	add	ip, ip, #126976	; 0x1f000
   11ee0:	ldr	pc, [ip, #356]!	; 0x164

00011ee4 <malloc@plt>:
   11ee4:	add	ip, pc, #0, 12
   11ee8:	add	ip, ip, #126976	; 0x1f000
   11eec:	ldr	pc, [ip, #348]!	; 0x15c

00011ef0 <__libc_start_main@plt>:
   11ef0:	add	ip, pc, #0, 12
   11ef4:	add	ip, ip, #126976	; 0x1f000
   11ef8:	ldr	pc, [ip, #340]!	; 0x154

00011efc <strerror@plt>:
   11efc:	add	ip, pc, #0, 12
   11f00:	add	ip, ip, #126976	; 0x1f000
   11f04:	ldr	pc, [ip, #332]!	; 0x14c

00011f08 <__gmon_start__@plt>:
   11f08:	add	ip, pc, #0, 12
   11f0c:	add	ip, ip, #126976	; 0x1f000
   11f10:	ldr	pc, [ip, #324]!	; 0x144

00011f14 <getpid@plt>:
   11f14:	add	ip, pc, #0, 12
   11f18:	add	ip, ip, #126976	; 0x1f000
   11f1c:	ldr	pc, [ip, #316]!	; 0x13c

00011f20 <exit@plt>:
   11f20:	add	ip, pc, #0, 12
   11f24:	add	ip, ip, #126976	; 0x1f000
   11f28:	ldr	pc, [ip, #308]!	; 0x134

00011f2c <strlen@plt>:
   11f2c:	add	ip, pc, #0, 12
   11f30:	add	ip, ip, #126976	; 0x1f000
   11f34:	ldr	pc, [ip, #300]!	; 0x12c

00011f38 <strchr@plt>:
   11f38:	add	ip, pc, #0, 12
   11f3c:	add	ip, ip, #126976	; 0x1f000
   11f40:	ldr	pc, [ip, #292]!	; 0x124

00011f44 <fprintf@plt>:
   11f44:	add	ip, pc, #0, 12
   11f48:	add	ip, ip, #126976	; 0x1f000
   11f4c:	ldr	pc, [ip, #284]!	; 0x11c

00011f50 <__errno_location@plt>:
   11f50:	add	ip, pc, #0, 12
   11f54:	add	ip, ip, #126976	; 0x1f000
   11f58:	ldr	pc, [ip, #276]!	; 0x114

00011f5c <__cxa_atexit@plt>:
   11f5c:	add	ip, pc, #0, 12
   11f60:	add	ip, ip, #126976	; 0x1f000
   11f64:	ldr	pc, [ip, #268]!	; 0x10c

00011f68 <mkdir@plt>:
   11f68:	add	ip, pc, #0, 12
   11f6c:	add	ip, ip, #126976	; 0x1f000
   11f70:	ldr	pc, [ip, #260]!	; 0x104

00011f74 <memset@plt>:
   11f74:	add	ip, pc, #0, 12
   11f78:	add	ip, ip, #126976	; 0x1f000
   11f7c:	ldr	pc, [ip, #252]!	; 0xfc

00011f80 <strncpy@plt>:
   11f80:	add	ip, pc, #0, 12
   11f84:	add	ip, ip, #126976	; 0x1f000
   11f88:	ldr	pc, [ip, #244]!	; 0xf4

00011f8c <prctl@plt>:
   11f8c:	add	ip, pc, #0, 12
   11f90:	add	ip, ip, #126976	; 0x1f000
   11f94:	ldr	pc, [ip, #236]!	; 0xec

00011f98 <fileno@plt>:
   11f98:	add	ip, pc, #0, 12
   11f9c:	add	ip, ip, #126976	; 0x1f000
   11fa0:	ldr	pc, [ip, #228]!	; 0xe4

00011fa4 <fclose@plt>:
   11fa4:	add	ip, pc, #0, 12
   11fa8:	add	ip, ip, #126976	; 0x1f000
   11fac:	ldr	pc, [ip, #220]!	; 0xdc

00011fb0 <strnlen@plt>:
   11fb0:	add	ip, pc, #0, 12
   11fb4:	add	ip, ip, #126976	; 0x1f000
   11fb8:	ldr	pc, [ip, #212]!	; 0xd4

00011fbc <munmap@plt>:
   11fbc:	add	ip, pc, #0, 12
   11fc0:	add	ip, ip, #126976	; 0x1f000
   11fc4:	ldr	pc, [ip, #204]!	; 0xcc

00011fc8 <fcntl64@plt>:
   11fc8:	add	ip, pc, #0, 12
   11fcc:	add	ip, ip, #126976	; 0x1f000
   11fd0:	ldr	pc, [ip, #196]!	; 0xc4

00011fd4 <strrchr@plt>:
   11fd4:	add	ip, pc, #0, 12
   11fd8:	add	ip, ip, #126976	; 0x1f000
   11fdc:	ldr	pc, [ip, #188]!	; 0xbc

00011fe0 <msync@plt>:
   11fe0:	add	ip, pc, #0, 12
   11fe4:	add	ip, ip, #126976	; 0x1f000
   11fe8:	ldr	pc, [ip, #180]!	; 0xb4

00011fec <fseek@plt>:
   11fec:	add	ip, pc, #0, 12
   11ff0:	add	ip, ip, #126976	; 0x1f000
   11ff4:	ldr	pc, [ip, #172]!	; 0xac

00011ff8 <strncmp@plt>:
   11ff8:	add	ip, pc, #0, 12
   11ffc:	add	ip, ip, #126976	; 0x1f000
   12000:	ldr	pc, [ip, #164]!	; 0xa4

00012004 <abort@plt>:
   12004:	add	ip, pc, #0, 12
   12008:	add	ip, ip, #126976	; 0x1f000
   1200c:	ldr	pc, [ip, #156]!	; 0x9c

00012010 <__assert_fail@plt>:
   12010:	add	ip, pc, #0, 12
   12014:	add	ip, ip, #126976	; 0x1f000
   12018:	ldr	pc, [ip, #148]!	; 0x94

Disassembly of section .text:

0001201c <_start@@Base>:
   1201c:	mov	fp, #0
   12020:	mov	lr, #0
   12024:	pop	{r1}		; (ldr r1, [sp], #4)
   12028:	mov	r2, sp
   1202c:	push	{r2}		; (str r2, [sp, #-4]!)
   12030:	push	{r0}		; (str r0, [sp, #-4]!)
   12034:	ldr	ip, [pc, #16]	; 1204c <_start@@Base+0x30>
   12038:	push	{ip}		; (str ip, [sp, #-4]!)
   1203c:	ldr	r0, [pc, #12]	; 12050 <_start@@Base+0x34>
   12040:	ldr	r3, [pc, #12]	; 12054 <_start@@Base+0x38>
   12044:	bl	11ef0 <__libc_start_main@plt>
   12048:	bl	12004 <abort@plt>
   1204c:	andeq	lr, r1, r8, lsr #15
   12050:	muleq	r1, r8, r0
   12054:	andeq	lr, r1, r8, asr #14
   12058:	ldr	r3, [pc, #20]	; 12074 <_start@@Base+0x58>
   1205c:	ldr	r2, [pc, #20]	; 12078 <_start@@Base+0x5c>
   12060:	add	r3, pc, r3
   12064:	ldr	r2, [r3, r2]
   12068:	cmp	r2, #0
   1206c:	bxeq	lr
   12070:	b	11f08 <__gmon_start__@plt>
   12074:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   12078:	andeq	r0, r0, r8, asr #1
   1207c:	ldr	r0, [pc, #24]	; 1209c <_start@@Base+0x80>
   12080:	ldr	r3, [pc, #24]	; 120a0 <_start@@Base+0x84>
   12084:	cmp	r3, r0
   12088:	bxeq	lr
   1208c:	ldr	r3, [pc, #16]	; 120a4 <_start@@Base+0x88>
   12090:	cmp	r3, #0
   12094:	bxeq	lr
   12098:	bx	r3
   1209c:	andeq	r1, r3, ip, ror #1
   120a0:	andeq	r1, r3, ip, ror #1
   120a4:	andeq	r0, r0, r0
   120a8:	ldr	r0, [pc, #36]	; 120d4 <_start@@Base+0xb8>
   120ac:	ldr	r1, [pc, #36]	; 120d8 <_start@@Base+0xbc>
   120b0:	sub	r1, r1, r0
   120b4:	asr	r1, r1, #2
   120b8:	add	r1, r1, r1, lsr #31
   120bc:	asrs	r1, r1, #1
   120c0:	bxeq	lr
   120c4:	ldr	r3, [pc, #16]	; 120dc <_start@@Base+0xc0>
   120c8:	cmp	r3, #0
   120cc:	bxeq	lr
   120d0:	bx	r3
   120d4:	andeq	r1, r3, ip, ror #1
   120d8:	andeq	r1, r3, ip, ror #1
   120dc:	andeq	r0, r0, r0
   120e0:	push	{r4, lr}
   120e4:	ldr	r4, [pc, #24]	; 12104 <_start@@Base+0xe8>
   120e8:	ldrb	r3, [r4]
   120ec:	cmp	r3, #0
   120f0:	popne	{r4, pc}
   120f4:	bl	1207c <_start@@Base+0x60>
   120f8:	mov	r3, #1
   120fc:	strb	r3, [r4]
   12100:	pop	{r4, pc}
   12104:	strdeq	r1, [r3], -r0
   12108:	b	120a8 <_start@@Base+0x8c>

0001210c <next@@Base>:
   1210c:	push	{r4, sl, fp, lr}
   12110:	add	fp, sp, #8
   12114:	sub	sp, sp, #72	; 0x48
   12118:	ldr	r1, [pc, #1080]	; 12558 <next@@Base+0x44c>
   1211c:	add	r1, pc, r1
   12120:	str	r0, [fp, #-20]	; 0xffffffec
   12124:	str	r1, [fp, #-24]	; 0xffffffe8
   12128:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1212c:	ldr	r1, [pc, #1064]	; 1255c <next@@Base+0x450>
   12130:	add	r1, pc, r1
   12134:	add	r2, r1, #8
   12138:	add	r1, r1, #16
   1213c:	ldr	r3, [pc, #1052]	; 12560 <next@@Base+0x454>
   12140:	ldr	r3, [pc, r3]
   12144:	ldr	ip, [r0]
   12148:	ldr	lr, [r0, #4]
   1214c:	adds	ip, ip, #1
   12150:	adc	lr, lr, #0
   12154:	str	ip, [r0]
   12158:	str	lr, [r0, #4]
   1215c:	ldr	r0, [fp, #-20]	; 0xffffffec
   12160:	str	r0, [fp, #-16]
   12164:	ldrb	ip, [fp, #-16]
   12168:	strb	ip, [r3]
   1216c:	ldrb	ip, [fp, #-15]
   12170:	strb	ip, [r3, #1]
   12174:	ldrb	ip, [fp, #-14]
   12178:	strb	ip, [r3, #2]
   1217c:	ldrb	ip, [fp, #-13]
   12180:	strb	ip, [r3, #3]
   12184:	ldr	r3, [r3, #204]	; 0xcc
   12188:	cmp	r3, #50	; 0x32
   1218c:	str	r2, [fp, #-28]	; 0xffffffe4
   12190:	str	r1, [fp, #-32]	; 0xffffffe0
   12194:	bcs	12208 <next@@Base+0xfc>
   12198:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1219c:	ldr	r1, [pc, #968]	; 1256c <next@@Base+0x460>
   121a0:	add	r1, pc, r1
   121a4:	add	r1, r1, #24
   121a8:	ldr	r2, [pc, #960]	; 12570 <next@@Base+0x464>
   121ac:	ldr	r2, [pc, r2]
   121b0:	add	r2, r2, #4
   121b4:	ldr	r3, [r0]
   121b8:	ldr	ip, [r0, #4]
   121bc:	adds	r3, r3, #1
   121c0:	adc	ip, ip, #0
   121c4:	str	r3, [r0]
   121c8:	str	ip, [r0, #4]
   121cc:	ldr	r0, [pc, #1000]	; 125bc <next@@Base+0x4b0>
   121d0:	ldr	r0, [pc, r0]
   121d4:	ldr	r3, [r0, #204]	; 0xcc
   121d8:	add	r0, r0, r3, lsl #2
   121dc:	add	r0, r0, #4
   121e0:	ldrb	r3, [fp, #-16]
   121e4:	strb	r3, [r0]
   121e8:	ldrb	r3, [fp, #-15]
   121ec:	strb	r3, [r0, #1]
   121f0:	ldrb	r3, [fp, #-14]
   121f4:	strb	r3, [r0, #2]
   121f8:	ldrb	r3, [fp, #-13]
   121fc:	strb	r3, [r0, #3]
   12200:	str	r1, [fp, #-36]	; 0xffffffdc
   12204:	b	12248 <next@@Base+0x13c>
   12208:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1220c:	ldr	r1, [pc, #848]	; 12564 <next@@Base+0x458>
   12210:	add	r1, pc, r1
   12214:	add	r1, r1, #32
   12218:	ldr	r2, [pc, #840]	; 12568 <next@@Base+0x45c>
   1221c:	ldr	r2, [pc, r2]
   12220:	ldr	r3, [r0]
   12224:	ldr	ip, [r0, #4]
   12228:	adds	r3, r3, #1
   1222c:	adc	ip, ip, #0
   12230:	str	r3, [r0]
   12234:	str	ip, [r0, #4]
   12238:	ldr	r0, [r2, #212]	; 0xd4
   1223c:	add	r0, r0, #1
   12240:	str	r0, [r2, #212]	; 0xd4
   12244:	str	r1, [fp, #-36]	; 0xffffffdc
   12248:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1224c:	ldr	r1, [pc, #800]	; 12574 <next@@Base+0x468>
   12250:	add	r1, pc, r1
   12254:	add	r2, r1, #40	; 0x28
   12258:	add	r1, r1, #48	; 0x30
   1225c:	ldr	r3, [pc, #788]	; 12578 <next@@Base+0x46c>
   12260:	ldr	r3, [pc, r3]
   12264:	ldr	ip, [pc, #784]	; 1257c <next@@Base+0x470>
   12268:	ldr	ip, [pc, ip]
   1226c:	ldr	lr, [r0]
   12270:	ldr	r4, [r0, #4]
   12274:	adds	lr, lr, #1
   12278:	adc	r4, r4, #0
   1227c:	str	lr, [r0]
   12280:	str	r4, [r0, #4]
   12284:	ldr	r0, [ip, #204]	; 0xcc
   12288:	add	r0, r0, #1
   1228c:	str	r0, [ip, #204]	; 0xcc
   12290:	ldr	r0, [r3, #200]	; 0xc8
   12294:	cmp	r0, #50	; 0x32
   12298:	str	r2, [sp, #40]	; 0x28
   1229c:	str	r1, [sp, #36]	; 0x24
   122a0:	bcs	122fc <next@@Base+0x1f0>
   122a4:	ldr	r0, [sp, #40]	; 0x28
   122a8:	ldr	r1, [pc, #720]	; 12580 <next@@Base+0x474>
   122ac:	add	r1, pc, r1
   122b0:	add	r1, r1, #56	; 0x38
   122b4:	ldr	r2, [pc, #712]	; 12584 <next@@Base+0x478>
   122b8:	ldr	r2, [pc, r2]
   122bc:	ldr	r3, [pc, #708]	; 12588 <next@@Base+0x47c>
   122c0:	ldr	r3, [pc, r3]
   122c4:	ldr	ip, [r0]
   122c8:	ldr	lr, [r0, #4]
   122cc:	adds	ip, ip, #1
   122d0:	adc	lr, lr, #0
   122d4:	str	ip, [r0]
   122d8:	str	lr, [r0, #4]
   122dc:	ldr	r0, [pc, #732]	; 125c0 <next@@Base+0x4b4>
   122e0:	ldr	r0, [pc, r0]
   122e4:	ldr	ip, [r0, #200]	; 0xc8
   122e8:	add	lr, ip, #1
   122ec:	str	lr, [r0, #200]	; 0xc8
   122f0:	add	r0, r0, ip, lsl #2
   122f4:	str	r2, [r0]
   122f8:	str	r1, [sp, #36]	; 0x24
   122fc:	ldr	r0, [sp, #36]	; 0x24
   12300:	ldr	r1, [pc, #644]	; 1258c <next@@Base+0x480>
   12304:	add	r1, pc, r1
   12308:	add	r2, r1, #64	; 0x40
   1230c:	add	r1, r1, #72	; 0x48
   12310:	ldr	r3, [pc, #632]	; 12590 <next@@Base+0x484>
   12314:	ldr	r3, [pc, r3]
   12318:	ldr	ip, [r0]
   1231c:	ldr	lr, [r0, #4]
   12320:	adds	ip, ip, #1
   12324:	adc	lr, lr, #0
   12328:	str	ip, [r0]
   1232c:	str	lr, [r0, #4]
   12330:	ldr	r0, [r3, #232]	; 0xe8
   12334:	movw	r3, #0
   12338:	cmp	r0, r3
   1233c:	str	r2, [sp, #32]
   12340:	str	r1, [sp, #28]
   12344:	beq	1239c <next@@Base+0x290>
   12348:	ldr	r0, [sp, #32]
   1234c:	ldr	r1, [pc, #612]	; 125b8 <next@@Base+0x4ac>
   12350:	ldr	r1, [pc, r1]
   12354:	ldr	r2, [r0]
   12358:	ldr	r3, [r0, #4]
   1235c:	adds	r2, r2, #1
   12360:	adc	r3, r3, #0
   12364:	str	r2, [r0]
   12368:	str	r3, [r0, #4]
   1236c:	ldr	r0, [r1, #232]	; 0xe8
   12370:	ldr	r1, [fp, #-16]
   12374:	str	r0, [sp, #24]
   12378:	mov	r0, r1
   1237c:	ldr	r1, [sp, #24]
   12380:	blx	r1
   12384:	ldr	r1, [pc, #552]	; 125b4 <next@@Base+0x4a8>
   12388:	add	r1, pc, r1
   1238c:	add	r1, r1, #80	; 0x50
   12390:	str	r0, [fp, #-12]
   12394:	str	r1, [sp, #20]
   12398:	b	12510 <next@@Base+0x404>
   1239c:	ldr	r0, [sp, #28]
   123a0:	ldr	r1, [pc, #492]	; 12594 <next@@Base+0x488>
   123a4:	add	r1, pc, r1
   123a8:	add	r2, r1, #88	; 0x58
   123ac:	add	r1, r1, #96	; 0x60
   123b0:	ldr	r3, [pc, #480]	; 12598 <next@@Base+0x48c>
   123b4:	ldr	r3, [pc, r3]
   123b8:	ldr	ip, [r0]
   123bc:	ldr	lr, [r0, #4]
   123c0:	adds	ip, ip, #1
   123c4:	adc	lr, lr, #0
   123c8:	str	ip, [r0]
   123cc:	str	lr, [r0, #4]
   123d0:	ldr	r0, [r3, #220]	; 0xdc
   123d4:	cmp	r0, #0
   123d8:	str	r2, [sp, #16]
   123dc:	str	r1, [sp, #12]
   123e0:	beq	124d4 <next@@Base+0x3c8>
   123e4:	ldr	r0, [sp, #16]
   123e8:	ldr	r1, [pc, #436]	; 125a4 <next@@Base+0x498>
   123ec:	add	r1, pc, r1
   123f0:	add	r2, r1, #104	; 0x68
   123f4:	add	r1, r1, #112	; 0x70
   123f8:	ldr	r3, [pc, #424]	; 125a8 <next@@Base+0x49c>
   123fc:	ldr	r3, [pc, r3]
   12400:	ldr	ip, [r0]
   12404:	ldr	lr, [r0, #4]
   12408:	adds	ip, ip, #1
   1240c:	adc	lr, lr, #0
   12410:	str	ip, [r0]
   12414:	str	lr, [r0, #4]
   12418:	ldr	r0, [r3, #224]	; 0xe0
   1241c:	ldr	r3, [r3, #220]	; 0xdc
   12420:	cmp	r0, r3
   12424:	str	r2, [sp, #8]
   12428:	str	r1, [sp, #4]
   1242c:	bge	12484 <next@@Base+0x378>
   12430:	ldr	r0, [sp, #8]
   12434:	ldr	r1, [pc, #372]	; 125b0 <next@@Base+0x4a4>
   12438:	add	r1, pc, r1
   1243c:	add	r1, r1, #120	; 0x78
   12440:	ldr	r2, [r0]
   12444:	ldr	r3, [r0, #4]
   12448:	adds	r2, r2, #1
   1244c:	adc	r3, r3, #0
   12450:	str	r2, [r0]
   12454:	str	r3, [r0, #4]
   12458:	ldr	r0, [pc, #356]	; 125c4 <next@@Base+0x4b8>
   1245c:	ldr	r0, [pc, r0]
   12460:	ldr	r2, [r0, #224]	; 0xe0
   12464:	ldr	r3, [r0, #228]	; 0xe4
   12468:	add	ip, r2, #1
   1246c:	str	ip, [r0, #224]	; 0xe0
   12470:	add	r0, r3, r2, lsl #2
   12474:	ldr	r0, [r0]
   12478:	str	r0, [fp, #-12]
   1247c:	str	r1, [sp, #20]
   12480:	b	12510 <next@@Base+0x404>
   12484:	ldr	r0, [sp, #4]
   12488:	ldr	r1, [pc, #284]	; 125ac <next@@Base+0x4a0>
   1248c:	add	r1, pc, r1
   12490:	add	r1, r1, #128	; 0x80
   12494:	ldr	r2, [r0]
   12498:	ldr	r3, [r0, #4]
   1249c:	adds	r2, r2, #1
   124a0:	adc	r3, r3, #0
   124a4:	str	r2, [r0]
   124a8:	str	r3, [r0, #4]
   124ac:	ldr	r0, [pc, #276]	; 125c8 <next@@Base+0x4bc>
   124b0:	ldr	r0, [pc, r0]
   124b4:	ldr	r2, [r0, #220]	; 0xdc
   124b8:	ldr	r0, [r0, #228]	; 0xe4
   124bc:	sub	r2, r2, #1
   124c0:	add	r0, r0, r2, lsl #2
   124c4:	ldr	r0, [r0]
   124c8:	str	r0, [fp, #-12]
   124cc:	str	r1, [sp, #20]
   124d0:	b	12510 <next@@Base+0x404>
   124d4:	ldr	r0, [sp, #12]
   124d8:	ldr	r1, [pc, #188]	; 1259c <next@@Base+0x490>
   124dc:	add	r1, pc, r1
   124e0:	add	r1, r1, #136	; 0x88
   124e4:	ldr	r2, [pc, #180]	; 125a0 <next@@Base+0x494>
   124e8:	ldr	r2, [pc, r2]
   124ec:	ldr	r3, [r0]
   124f0:	ldr	ip, [r0, #4]
   124f4:	adds	r3, r3, #1
   124f8:	adc	ip, ip, #0
   124fc:	str	r3, [r0]
   12500:	str	ip, [r0, #4]
   12504:	ldr	r0, [r2, #216]	; 0xd8
   12508:	str	r0, [fp, #-12]
   1250c:	str	r1, [sp, #20]
   12510:	ldr	r0, [sp, #20]
   12514:	ldr	r1, [r0]
   12518:	ldr	r2, [r0, #4]
   1251c:	adds	r1, r1, #1
   12520:	adc	r2, r2, #0
   12524:	str	r1, [r0]
   12528:	str	r2, [r0, #4]
   1252c:	ldr	r0, [pc, #152]	; 125cc <next@@Base+0x4c0>
   12530:	add	r0, pc, r0
   12534:	ldr	r1, [r0, #144]	; 0x90
   12538:	ldr	r2, [r0, #148]	; 0x94
   1253c:	adds	r1, r1, #1
   12540:	adc	r2, r2, #0
   12544:	str	r1, [r0, #144]	; 0x90
   12548:	str	r2, [r0, #148]	; 0x94
   1254c:	ldr	r0, [fp, #-12]
   12550:	sub	sp, fp, #8
   12554:	pop	{r4, sl, fp, pc}
   12558:	ldrdeq	lr, [r1], -ip
   1255c:	andeq	lr, r1, r8, asr #31
   12560:	andeq	lr, r1, r4, lsl #31
   12564:	andeq	lr, r1, r8, ror #29
   12568:	andeq	lr, r1, r8, lsr #29
   1256c:	andeq	lr, r1, r8, asr pc
   12570:	andeq	lr, r1, r8, lsl pc
   12574:	andeq	lr, r1, r8, lsr #29
   12578:	andeq	lr, r1, r0, ror lr
   1257c:	andeq	lr, r1, ip, asr lr
   12580:	andeq	lr, r1, ip, asr #28
   12584:	andeq	lr, r1, r4, lsl #28
   12588:	andeq	lr, r1, r0, lsl lr
   1258c:	strdeq	lr, [r1], -r4
   12590:			; <UNDEFINED> instruction: 0x0001edb0
   12594:	andeq	lr, r1, r4, asr sp
   12598:	andeq	lr, r1, r0, lsl sp
   1259c:	andeq	lr, r1, ip, lsl ip
   125a0:	ldrdeq	lr, [r1], -ip
   125a4:	andeq	lr, r1, ip, lsl #26
   125a8:	andeq	lr, r1, r8, asr #25
   125ac:	andeq	lr, r1, ip, ror #24
   125b0:	andeq	lr, r1, r0, asr #25
   125b4:	andeq	lr, r1, r0, ror sp
   125b8:	andeq	lr, r1, r4, ror sp
   125bc:	strdeq	lr, [r1], -r4
   125c0:	strdeq	lr, [r1], -r0
   125c4:	andeq	lr, r1, r8, ror #24
   125c8:	andeq	lr, r1, r4, lsl ip
   125cc:	andeq	lr, r1, r8, asr #23

000125d0 <next_reset@@Base>:
   125d0:	push	{fp, lr}
   125d4:	mov	fp, sp
   125d8:	sub	sp, sp, #8
   125dc:	ldr	r0, [pc, #128]	; 12664 <next_reset@@Base+0x94>
   125e0:	add	r0, pc, r0
   125e4:	str	r0, [sp, #4]
   125e8:	b	125ec <next_reset@@Base+0x1c>
   125ec:	ldr	r0, [sp, #4]
   125f0:	ldr	r1, [pc, #112]	; 12668 <next_reset@@Base+0x98>
   125f4:	ldr	r1, [pc, r1]
   125f8:	mov	r2, r1
   125fc:	ldr	r3, [r0]
   12600:	ldr	ip, [r0, #4]
   12604:	adds	r3, r3, #1
   12608:	adc	ip, ip, #0
   1260c:	str	r3, [r0]
   12610:	str	ip, [r0, #4]
   12614:	ldr	r0, [pc, #80]	; 1266c <next_reset@@Base+0x9c>
   12618:	add	r0, pc, r0
   1261c:	ldr	r3, [r0, #8]
   12620:	ldr	ip, [r0, #12]
   12624:	adds	r3, r3, #1
   12628:	adc	ip, ip, #0
   1262c:	str	r3, [r0, #8]
   12630:	str	ip, [r0, #12]
   12634:	mov	r0, r2
   12638:	movw	r2, #0
   1263c:	and	r2, r2, #255	; 0xff
   12640:	str	r1, [sp]
   12644:	mov	r1, r2
   12648:	movw	r2, #236	; 0xec
   1264c:	bl	11f74 <memset@plt>
   12650:	movw	r0, #50	; 0x32
   12654:	ldr	r1, [sp]
   12658:	str	r0, [r1, #208]	; 0xd0
   1265c:	mov	sp, fp
   12660:	pop	{fp, pc}
   12664:			; <UNDEFINED> instruction: 0x0001ebb0
   12668:	ldrdeq	lr, [r1], -r0
   1266c:	andeq	lr, r1, r8, ror fp

00012670 <push_back@@Base>:
   12670:	push	{r4, sl, fp, lr}
   12674:	add	fp, sp, #8
   12678:	sub	sp, sp, #56	; 0x38
   1267c:	ldr	r2, [pc, #764]	; 12980 <push_back@@Base+0x310>
   12680:	add	r2, pc, r2
   12684:	str	r0, [fp, #-20]	; 0xffffffec
   12688:	str	r1, [fp, #-24]	; 0xffffffe8
   1268c:	str	r2, [fp, #-28]	; 0xffffffe4
   12690:	ldr	r0, [fp, #-28]	; 0xffffffe4
   12694:	ldr	r1, [pc, #744]	; 12984 <push_back@@Base+0x314>
   12698:	add	r1, pc, r1
   1269c:	add	r2, r1, #8
   126a0:	add	r1, r1, #16
   126a4:	ldr	r3, [pc, #732]	; 12988 <push_back@@Base+0x318>
   126a8:	ldr	r3, [pc, r3]
   126ac:	ldr	ip, [r0]
   126b0:	ldr	lr, [r0, #4]
   126b4:	adds	ip, ip, #1
   126b8:	adc	lr, lr, #0
   126bc:	str	ip, [r0]
   126c0:	str	lr, [r0, #4]
   126c4:	ldr	r0, [fp, #-20]	; 0xffffffec
   126c8:	str	r0, [fp, #-12]
   126cc:	ldr	ip, [fp, #-24]	; 0xffffffe8
   126d0:	str	ip, [fp, #-16]
   126d4:	ldrb	lr, [fp, #-12]
   126d8:	strb	lr, [r3]
   126dc:	ldrb	lr, [fp, #-11]
   126e0:	strb	lr, [r3, #1]
   126e4:	ldrb	lr, [fp, #-10]
   126e8:	strb	lr, [r3, #2]
   126ec:	ldrb	lr, [fp, #-9]
   126f0:	strb	lr, [r3, #3]
   126f4:	ldrb	lr, [fp, #-16]
   126f8:	strb	lr, [r3, #204]	; 0xcc
   126fc:	ldrb	lr, [fp, #-15]
   12700:	strb	lr, [r3, #205]	; 0xcd
   12704:	ldrb	lr, [fp, #-14]
   12708:	strb	lr, [r3, #206]	; 0xce
   1270c:	ldrb	lr, [fp, #-13]
   12710:	strb	lr, [r3, #207]	; 0xcf
   12714:	ldr	r3, [r3, #408]	; 0x198
   12718:	cmp	r3, #50	; 0x32
   1271c:	str	r2, [sp, #32]
   12720:	str	r1, [sp, #28]
   12724:	bcs	127a8 <push_back@@Base+0x138>
   12728:	ldr	r0, [sp, #32]
   1272c:	ldr	r1, [pc, #608]	; 12994 <push_back@@Base+0x324>
   12730:	add	r1, pc, r1
   12734:	add	r1, r1, #24
   12738:	ldr	r2, [pc, #600]	; 12998 <push_back@@Base+0x328>
   1273c:	ldr	r2, [pc, r2]
   12740:	add	r2, r2, #208	; 0xd0
   12744:	ldr	r3, [r0]
   12748:	ldr	ip, [r0, #4]
   1274c:	adds	r3, r3, #1
   12750:	adc	ip, ip, #0
   12754:	str	r3, [r0]
   12758:	str	ip, [r0, #4]
   1275c:	ldr	r0, [pc, #608]	; 129c4 <push_back@@Base+0x354>
   12760:	ldr	r0, [pc, r0]
   12764:	ldr	r3, [r0, #408]	; 0x198
   12768:	add	r3, r0, r3, lsl #2
   1276c:	ldr	ip, [fp, #-12]
   12770:	str	ip, [r3, #4]
   12774:	ldr	r3, [r0, #408]	; 0x198
   12778:	add	r0, r0, r3, lsl #2
   1277c:	add	r0, r0, #208	; 0xd0
   12780:	ldrb	r3, [fp, #-16]
   12784:	strb	r3, [r0]
   12788:	ldrb	r3, [fp, #-15]
   1278c:	strb	r3, [r0, #1]
   12790:	ldrb	r3, [fp, #-14]
   12794:	strb	r3, [r0, #2]
   12798:	ldrb	r3, [fp, #-13]
   1279c:	strb	r3, [r0, #3]
   127a0:	str	r1, [sp, #24]
   127a4:	b	127e8 <push_back@@Base+0x178>
   127a8:	ldr	r0, [sp, #28]
   127ac:	ldr	r1, [pc, #472]	; 1298c <push_back@@Base+0x31c>
   127b0:	add	r1, pc, r1
   127b4:	add	r1, r1, #32
   127b8:	ldr	r2, [pc, #464]	; 12990 <push_back@@Base+0x320>
   127bc:	ldr	r2, [pc, r2]
   127c0:	ldr	r3, [r0]
   127c4:	ldr	ip, [r0, #4]
   127c8:	adds	r3, r3, #1
   127cc:	adc	ip, ip, #0
   127d0:	str	r3, [r0]
   127d4:	str	ip, [r0, #4]
   127d8:	ldr	r0, [r2, #416]	; 0x1a0
   127dc:	add	r0, r0, #1
   127e0:	str	r0, [r2, #416]	; 0x1a0
   127e4:	str	r1, [sp, #24]
   127e8:	ldr	r0, [sp, #24]
   127ec:	ldr	r1, [pc, #424]	; 1299c <push_back@@Base+0x32c>
   127f0:	add	r1, pc, r1
   127f4:	add	r2, r1, #40	; 0x28
   127f8:	add	r1, r1, #48	; 0x30
   127fc:	ldr	r3, [pc, #412]	; 129a0 <push_back@@Base+0x330>
   12800:	ldr	r3, [pc, r3]
   12804:	ldr	ip, [pc, #408]	; 129a4 <push_back@@Base+0x334>
   12808:	ldr	ip, [pc, ip]
   1280c:	ldr	lr, [r0]
   12810:	ldr	r4, [r0, #4]
   12814:	adds	lr, lr, #1
   12818:	adc	r4, r4, #0
   1281c:	str	lr, [r0]
   12820:	str	r4, [r0, #4]
   12824:	ldr	r0, [ip, #408]	; 0x198
   12828:	add	r0, r0, #1
   1282c:	str	r0, [ip, #408]	; 0x198
   12830:	ldr	r0, [r3, #200]	; 0xc8
   12834:	cmp	r0, #50	; 0x32
   12838:	str	r2, [sp, #20]
   1283c:	str	r1, [sp, #16]
   12840:	bcs	1289c <push_back@@Base+0x22c>
   12844:	ldr	r0, [sp, #20]
   12848:	ldr	r1, [pc, #344]	; 129a8 <push_back@@Base+0x338>
   1284c:	add	r1, pc, r1
   12850:	add	r1, r1, #56	; 0x38
   12854:	ldr	r2, [pc, #336]	; 129ac <push_back@@Base+0x33c>
   12858:	ldr	r2, [pc, r2]
   1285c:	ldr	r3, [pc, #332]	; 129b0 <push_back@@Base+0x340>
   12860:	ldr	r3, [pc, r3]
   12864:	ldr	ip, [r0]
   12868:	ldr	lr, [r0, #4]
   1286c:	adds	ip, ip, #1
   12870:	adc	lr, lr, #0
   12874:	str	ip, [r0]
   12878:	str	lr, [r0, #4]
   1287c:	ldr	r0, [pc, #324]	; 129c8 <push_back@@Base+0x358>
   12880:	ldr	r0, [pc, r0]
   12884:	ldr	ip, [r0, #200]	; 0xc8
   12888:	add	lr, ip, #1
   1288c:	str	lr, [r0, #200]	; 0xc8
   12890:	add	r0, r0, ip, lsl #2
   12894:	str	r2, [r0]
   12898:	str	r1, [sp, #16]
   1289c:	ldr	r0, [sp, #16]
   128a0:	ldr	r1, [pc, #268]	; 129b4 <push_back@@Base+0x344>
   128a4:	add	r1, pc, r1
   128a8:	add	r2, r1, #64	; 0x40
   128ac:	add	r1, r1, #72	; 0x48
   128b0:	ldr	r3, [pc, #256]	; 129b8 <push_back@@Base+0x348>
   128b4:	ldr	r3, [pc, r3]
   128b8:	ldr	ip, [r0]
   128bc:	ldr	lr, [r0, #4]
   128c0:	adds	ip, ip, #1
   128c4:	adc	lr, lr, #0
   128c8:	str	ip, [r0]
   128cc:	str	lr, [r0, #4]
   128d0:	ldr	r0, [r3, #420]	; 0x1a4
   128d4:	movw	r3, #0
   128d8:	cmp	r0, r3
   128dc:	str	r2, [sp, #12]
   128e0:	str	r1, [sp, #8]
   128e4:	beq	1293c <push_back@@Base+0x2cc>
   128e8:	ldr	r0, [sp, #12]
   128ec:	ldr	r1, [pc, #204]	; 129c0 <push_back@@Base+0x350>
   128f0:	ldr	r1, [pc, r1]
   128f4:	ldr	r2, [r0]
   128f8:	ldr	r3, [r0, #4]
   128fc:	adds	r2, r2, #1
   12900:	adc	r3, r3, #0
   12904:	str	r2, [r0]
   12908:	str	r3, [r0, #4]
   1290c:	ldr	r0, [r1, #420]	; 0x1a4
   12910:	ldr	r1, [fp, #-12]
   12914:	ldr	r2, [fp, #-16]
   12918:	str	r0, [sp, #4]
   1291c:	mov	r0, r1
   12920:	mov	r1, r2
   12924:	ldr	r2, [sp, #4]
   12928:	blx	r2
   1292c:	ldr	r0, [pc, #136]	; 129bc <push_back@@Base+0x34c>
   12930:	add	r0, pc, r0
   12934:	add	r0, r0, #80	; 0x50
   12938:	str	r0, [sp, #8]
   1293c:	ldr	r0, [sp, #8]
   12940:	ldr	r1, [r0]
   12944:	ldr	r2, [r0, #4]
   12948:	adds	r1, r1, #1
   1294c:	adc	r2, r2, #0
   12950:	str	r1, [r0]
   12954:	str	r2, [r0, #4]
   12958:	ldr	r0, [pc, #108]	; 129cc <push_back@@Base+0x35c>
   1295c:	add	r0, pc, r0
   12960:	ldr	r1, [r0, #88]	; 0x58
   12964:	ldr	r2, [r0, #92]	; 0x5c
   12968:	adds	r1, r1, #1
   1296c:	adc	r2, r2, #0
   12970:	str	r1, [r0, #88]	; 0x58
   12974:	str	r2, [r0, #92]	; 0x5c
   12978:	sub	sp, fp, #8
   1297c:	pop	{r4, sl, fp, pc}
   12980:	andeq	lr, r1, r8, lsr #22
   12984:	andeq	lr, r1, r0, lsl fp
   12988:	andeq	lr, r1, ip, lsl #20
   1298c:	strdeq	lr, [r1], -r8
   12990:	strdeq	lr, [r1], -r8
   12994:	andeq	lr, r1, r8, ror sl
   12998:	andeq	lr, r1, r8, ror r9
   1299c:			; <UNDEFINED> instruction: 0x0001e9b8
   129a0:	ldrdeq	lr, [r1], -r0
   129a4:	andeq	lr, r1, ip, lsr #17
   129a8:	andeq	lr, r1, ip, asr r9
   129ac:	andeq	lr, r1, r4, ror r8
   129b0:	andeq	lr, r1, r0, ror r8
   129b4:	andeq	lr, r1, r4, lsl #18
   129b8:	andeq	lr, r1, r0, lsl #16
   129bc:	andeq	lr, r1, r8, ror r8
   129c0:	andeq	lr, r1, r4, asr #15
   129c4:	andeq	lr, r1, r4, asr r9
   129c8:	andeq	lr, r1, r0, asr r8
   129cc:	andeq	lr, r1, ip, asr #16

000129d0 <push_back_reset@@Base>:
   129d0:	push	{fp, lr}
   129d4:	mov	fp, sp
   129d8:	sub	sp, sp, #8
   129dc:	ldr	r0, [pc, #128]	; 12a64 <push_back_reset@@Base+0x94>
   129e0:	add	r0, pc, r0
   129e4:	str	r0, [sp, #4]
   129e8:	b	129ec <push_back_reset@@Base+0x1c>
   129ec:	ldr	r0, [sp, #4]
   129f0:	ldr	r1, [pc, #112]	; 12a68 <push_back_reset@@Base+0x98>
   129f4:	ldr	r1, [pc, r1]
   129f8:	mov	r2, r1
   129fc:	ldr	r3, [r0]
   12a00:	ldr	ip, [r0, #4]
   12a04:	adds	r3, r3, #1
   12a08:	adc	ip, ip, #0
   12a0c:	str	r3, [r0]
   12a10:	str	ip, [r0, #4]
   12a14:	ldr	r0, [pc, #80]	; 12a6c <push_back_reset@@Base+0x9c>
   12a18:	add	r0, pc, r0
   12a1c:	ldr	r3, [r0, #8]
   12a20:	ldr	ip, [r0, #12]
   12a24:	adds	r3, r3, #1
   12a28:	adc	ip, ip, #0
   12a2c:	str	r3, [r0, #8]
   12a30:	str	ip, [r0, #12]
   12a34:	mov	r0, r2
   12a38:	movw	r2, #0
   12a3c:	and	r2, r2, #255	; 0xff
   12a40:	str	r1, [sp]
   12a44:	mov	r1, r2
   12a48:	movw	r2, #424	; 0x1a8
   12a4c:	bl	11f74 <memset@plt>
   12a50:	movw	r0, #50	; 0x32
   12a54:	ldr	r1, [sp]
   12a58:	str	r0, [r1, #412]	; 0x19c
   12a5c:	mov	sp, fp
   12a60:	pop	{fp, pc}
   12a64:	andeq	lr, r1, r8, lsr #16
   12a68:	andeq	lr, r1, r0, asr #13
   12a6c:	strdeq	lr, [r1], -r0

00012a70 <setup@@Base>:
   12a70:	push	{fp, lr}
   12a74:	mov	fp, sp
   12a78:	sub	sp, sp, #8
   12a7c:	ldr	r0, [pc, #84]	; 12ad8 <setup@@Base+0x68>
   12a80:	add	r0, pc, r0
   12a84:	str	r0, [sp, #4]
   12a88:	b	12a8c <setup@@Base+0x1c>
   12a8c:	ldr	r0, [sp, #4]
   12a90:	ldr	r1, [r0]
   12a94:	ldr	r2, [r0, #4]
   12a98:	adds	r1, r1, #1
   12a9c:	adc	r2, r2, #0
   12aa0:	str	r1, [r0]
   12aa4:	str	r2, [r0, #4]
   12aa8:	ldr	r0, [pc, #44]	; 12adc <setup@@Base+0x6c>
   12aac:	add	r0, pc, r0
   12ab0:	ldr	r1, [r0, #8]
   12ab4:	ldr	r2, [r0, #12]
   12ab8:	adds	r1, r1, #1
   12abc:	adc	r2, r2, #0
   12ac0:	str	r1, [r0, #8]
   12ac4:	str	r2, [r0, #12]
   12ac8:	bl	125d0 <next_reset@@Base>
   12acc:	bl	129d0 <push_back_reset@@Base>
   12ad0:	mov	sp, fp
   12ad4:	pop	{fp, pc}
   12ad8:	muleq	r1, r8, r7
   12adc:	andeq	lr, r1, ip, ror #14

00012ae0 <no_int_as_first_stuff@@Base>:
   12ae0:	push	{fp, lr}
   12ae4:	mov	fp, sp
   12ae8:	sub	sp, sp, #56	; 0x38
   12aec:	ldr	r0, [pc, #512]	; 12cf4 <no_int_as_first_stuff@@Base+0x214>
   12af0:	add	r0, pc, r0
   12af4:	str	r0, [sp, #28]
   12af8:	ldr	r0, [sp, #28]
   12afc:	ldr	r1, [r0]
   12b00:	ldr	r2, [r0, #4]
   12b04:	adds	r1, r1, #1
   12b08:	adc	r2, r2, #0
   12b0c:	str	r1, [r0]
   12b10:	str	r2, [r0, #4]
   12b14:	sub	r0, fp, #16
   12b18:	sub	r1, fp, #12
   12b1c:	bl	198c0 <init_grammar@@Base>
   12b20:	movw	r0, #0
   12b24:	str	r0, [fp, #-20]	; 0xffffffec
   12b28:	movw	r0, #4
   12b2c:	bl	11ee4 <malloc@plt>
   12b30:	str	r0, [fp, #-24]	; 0xffffffe8
   12b34:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12b38:	bl	16f5c <init_token_opar@@Base>
   12b3c:	ldr	r0, [pc, #444]	; 12d00 <no_int_as_first_stuff@@Base+0x220>
   12b40:	ldr	r0, [pc, r0]
   12b44:	ldr	r1, [fp, #-24]	; 0xffffffe8
   12b48:	str	r1, [r0, #216]	; 0xd8
   12b4c:	sub	r0, fp, #16
   12b50:	bl	19a20 <read_function_ast_node@@Base>
   12b54:	ldr	r1, [pc, #412]	; 12cf8 <no_int_as_first_stuff@@Base+0x218>
   12b58:	add	r1, pc, r1
   12b5c:	add	r2, r1, #8
   12b60:	add	r1, r1, #16
   12b64:	ldr	r3, [pc, #400]	; 12cfc <no_int_as_first_stuff@@Base+0x21c>
   12b68:	ldr	r3, [pc, r3]
   12b6c:	str	r0, [fp, #-20]	; 0xffffffec
   12b70:	ldr	r0, [r3, #204]	; 0xcc
   12b74:	cmp	r0, #1
   12b78:	str	r2, [sp, #24]
   12b7c:	str	r1, [sp, #20]
   12b80:	bne	12bb4 <no_int_as_first_stuff@@Base+0xd4>
   12b84:	ldr	r0, [sp, #24]
   12b88:	ldr	r1, [pc, #384]	; 12d10 <no_int_as_first_stuff@@Base+0x230>
   12b8c:	add	r1, pc, r1
   12b90:	add	r1, r1, #24
   12b94:	ldr	r2, [r0]
   12b98:	ldr	r3, [r0, #4]
   12b9c:	adds	r2, r2, #1
   12ba0:	adc	r3, r3, #0
   12ba4:	str	r2, [r0]
   12ba8:	str	r3, [r0, #4]
   12bac:	str	r1, [sp, #16]
   12bb0:	b	12bf8 <no_int_as_first_stuff@@Base+0x118>
   12bb4:	ldr	r0, [sp, #20]
   12bb8:	ldr	r1, [pc, #324]	; 12d04 <no_int_as_first_stuff@@Base+0x224>
   12bbc:	add	r1, pc, r1
   12bc0:	ldr	r2, [pc, #320]	; 12d08 <no_int_as_first_stuff@@Base+0x228>
   12bc4:	add	r2, pc, r2
   12bc8:	ldr	r3, [pc, #316]	; 12d0c <no_int_as_first_stuff@@Base+0x22c>
   12bcc:	add	r3, pc, r3
   12bd0:	ldr	ip, [r0]
   12bd4:	ldr	lr, [r0, #4]
   12bd8:	adds	ip, ip, #1
   12bdc:	adc	lr, lr, #0
   12be0:	str	ip, [r0]
   12be4:	str	lr, [r0, #4]
   12be8:	mov	r0, r1
   12bec:	mov	r1, r2
   12bf0:	movw	r2, #41	; 0x29
   12bf4:	bl	12010 <__assert_fail@plt>
   12bf8:	ldr	r0, [sp, #16]
   12bfc:	ldr	r1, [pc, #272]	; 12d14 <no_int_as_first_stuff@@Base+0x234>
   12c00:	add	r1, pc, r1
   12c04:	add	r2, r1, #32
   12c08:	add	r1, r1, #40	; 0x28
   12c0c:	ldr	r3, [r0]
   12c10:	ldr	ip, [r0, #4]
   12c14:	adds	r3, r3, #1
   12c18:	adc	ip, ip, #0
   12c1c:	str	r3, [r0]
   12c20:	str	ip, [r0, #4]
   12c24:	ldr	r0, [fp, #-20]	; 0xffffffec
   12c28:	movw	r3, #0
   12c2c:	cmp	r0, r3
   12c30:	str	r2, [sp, #12]
   12c34:	str	r1, [sp, #8]
   12c38:	bne	12c6c <no_int_as_first_stuff@@Base+0x18c>
   12c3c:	ldr	r0, [sp, #12]
   12c40:	ldr	r1, [pc, #220]	; 12d24 <no_int_as_first_stuff@@Base+0x244>
   12c44:	add	r1, pc, r1
   12c48:	add	r1, r1, #48	; 0x30
   12c4c:	ldr	r2, [r0]
   12c50:	ldr	r3, [r0, #4]
   12c54:	adds	r2, r2, #1
   12c58:	adc	r3, r3, #0
   12c5c:	str	r2, [r0]
   12c60:	str	r3, [r0, #4]
   12c64:	str	r1, [sp, #4]
   12c68:	b	12cb0 <no_int_as_first_stuff@@Base+0x1d0>
   12c6c:	ldr	r0, [sp, #8]
   12c70:	ldr	r1, [pc, #160]	; 12d18 <no_int_as_first_stuff@@Base+0x238>
   12c74:	add	r1, pc, r1
   12c78:	ldr	r2, [pc, #156]	; 12d1c <no_int_as_first_stuff@@Base+0x23c>
   12c7c:	add	r2, pc, r2
   12c80:	ldr	r3, [pc, #152]	; 12d20 <no_int_as_first_stuff@@Base+0x240>
   12c84:	add	r3, pc, r3
   12c88:	ldr	ip, [r0]
   12c8c:	ldr	lr, [r0, #4]
   12c90:	adds	ip, ip, #1
   12c94:	adc	lr, lr, #0
   12c98:	str	ip, [r0]
   12c9c:	str	lr, [r0, #4]
   12ca0:	mov	r0, r1
   12ca4:	mov	r1, r2
   12ca8:	movw	r2, #42	; 0x2a
   12cac:	bl	12010 <__assert_fail@plt>
   12cb0:	ldr	r0, [sp, #4]
   12cb4:	ldr	r1, [r0]
   12cb8:	ldr	r2, [r0, #4]
   12cbc:	adds	r1, r1, #1
   12cc0:	adc	r2, r2, #0
   12cc4:	str	r1, [r0]
   12cc8:	str	r2, [r0, #4]
   12ccc:	ldr	r0, [pc, #84]	; 12d28 <no_int_as_first_stuff@@Base+0x248>
   12cd0:	add	r0, pc, r0
   12cd4:	ldr	r1, [r0, #56]	; 0x38
   12cd8:	ldr	r2, [r0, #60]	; 0x3c
   12cdc:	adds	r1, r1, #1
   12ce0:	adc	r2, r2, #0
   12ce4:	str	r1, [r0, #56]	; 0x38
   12ce8:	str	r2, [r0, #60]	; 0x3c
   12cec:	mov	sp, fp
   12cf0:	pop	{fp, pc}
   12cf4:	andeq	lr, r1, r8, lsr r7
   12cf8:	ldrdeq	lr, [r1], -r0
   12cfc:	andeq	lr, r1, ip, asr r5
   12d00:	andeq	lr, r1, r4, lsl #11
   12d04:	andeq	fp, r0, ip, lsl #24
   12d08:	andeq	fp, r0, lr, lsl ip
   12d0c:	andeq	fp, r0, r1, ror ip
   12d10:	muleq	r1, ip, r6
   12d14:	andeq	lr, r1, r8, lsr #12
   12d18:	andeq	fp, r0, r6, ror #23
   12d1c:	andeq	fp, r0, r6, ror #22
   12d20:			; <UNDEFINED> instruction: 0x0000bbb9
   12d24:	andeq	lr, r1, r4, ror #11
   12d28:	andeq	lr, r1, r8, asr r5

00012d2c <int_but_not_followed_by_function@@Base>:
   12d2c:	push	{fp, lr}
   12d30:	mov	fp, sp
   12d34:	sub	sp, sp, #56	; 0x38
   12d38:	ldr	r0, [pc, #568]	; 12f78 <int_but_not_followed_by_function@@Base+0x24c>
   12d3c:	add	r0, pc, r0
   12d40:	str	r0, [sp, #28]
   12d44:	ldr	r0, [sp, #28]
   12d48:	ldr	r1, [r0]
   12d4c:	ldr	r2, [r0, #4]
   12d50:	adds	r1, r1, #1
   12d54:	adc	r2, r2, #0
   12d58:	str	r1, [r0]
   12d5c:	str	r2, [r0, #4]
   12d60:	movw	r0, #0
   12d64:	str	r0, [fp, #-24]	; 0xffffffe8
   12d68:	sub	r0, fp, #16
   12d6c:	sub	r1, fp, #12
   12d70:	bl	198c0 <init_grammar@@Base>
   12d74:	movw	r0, #8
   12d78:	bl	11ee4 <malloc@plt>
   12d7c:	str	r0, [fp, #-20]	; 0xffffffec
   12d80:	movw	r0, #4
   12d84:	bl	11ee4 <malloc@plt>
   12d88:	ldr	r1, [fp, #-20]	; 0xffffffec
   12d8c:	str	r0, [r1]
   12d90:	ldr	r0, [fp, #-20]	; 0xffffffec
   12d94:	ldr	r0, [r0]
   12d98:	bl	16dd0 <init_token_int_type@@Base>
   12d9c:	movw	r0, #4
   12da0:	bl	11ee4 <malloc@plt>
   12da4:	ldr	r1, [fp, #-20]	; 0xffffffec
   12da8:	str	r0, [r1, #4]
   12dac:	ldr	r0, [fp, #-20]	; 0xffffffec
   12db0:	ldr	r0, [r0, #4]
   12db4:	bl	16f5c <init_token_opar@@Base>
   12db8:	ldr	r0, [pc, #452]	; 12f84 <int_but_not_followed_by_function@@Base+0x258>
   12dbc:	ldr	r0, [pc, r0]
   12dc0:	ldr	r1, [fp, #-20]	; 0xffffffec
   12dc4:	str	r1, [r0, #228]	; 0xe4
   12dc8:	movw	r1, #2
   12dcc:	str	r1, [r0, #220]	; 0xdc
   12dd0:	sub	r0, fp, #16
   12dd4:	bl	19a20 <read_function_ast_node@@Base>
   12dd8:	ldr	r1, [pc, #412]	; 12f7c <int_but_not_followed_by_function@@Base+0x250>
   12ddc:	add	r1, pc, r1
   12de0:	add	r2, r1, #8
   12de4:	add	r1, r1, #16
   12de8:	ldr	r3, [pc, #400]	; 12f80 <int_but_not_followed_by_function@@Base+0x254>
   12dec:	ldr	r3, [pc, r3]
   12df0:	str	r0, [fp, #-24]	; 0xffffffe8
   12df4:	ldr	r0, [r3, #204]	; 0xcc
   12df8:	cmp	r0, #2
   12dfc:	str	r2, [sp, #24]
   12e00:	str	r1, [sp, #20]
   12e04:	bne	12e38 <int_but_not_followed_by_function@@Base+0x10c>
   12e08:	ldr	r0, [sp, #24]
   12e0c:	ldr	r1, [pc, #384]	; 12f94 <int_but_not_followed_by_function@@Base+0x268>
   12e10:	add	r1, pc, r1
   12e14:	add	r1, r1, #24
   12e18:	ldr	r2, [r0]
   12e1c:	ldr	r3, [r0, #4]
   12e20:	adds	r2, r2, #1
   12e24:	adc	r3, r3, #0
   12e28:	str	r2, [r0]
   12e2c:	str	r3, [r0, #4]
   12e30:	str	r1, [sp, #16]
   12e34:	b	12e7c <int_but_not_followed_by_function@@Base+0x150>
   12e38:	ldr	r0, [sp, #20]
   12e3c:	ldr	r1, [pc, #324]	; 12f88 <int_but_not_followed_by_function@@Base+0x25c>
   12e40:	add	r1, pc, r1
   12e44:	ldr	r2, [pc, #320]	; 12f8c <int_but_not_followed_by_function@@Base+0x260>
   12e48:	add	r2, pc, r2
   12e4c:	ldr	r3, [pc, #316]	; 12f90 <int_but_not_followed_by_function@@Base+0x264>
   12e50:	add	r3, pc, r3
   12e54:	ldr	ip, [r0]
   12e58:	ldr	lr, [r0, #4]
   12e5c:	adds	ip, ip, #1
   12e60:	adc	lr, lr, #0
   12e64:	str	ip, [r0]
   12e68:	str	lr, [r0, #4]
   12e6c:	mov	r0, r1
   12e70:	mov	r1, r2
   12e74:	movw	r2, #67	; 0x43
   12e78:	bl	12010 <__assert_fail@plt>
   12e7c:	ldr	r0, [sp, #16]
   12e80:	ldr	r1, [pc, #272]	; 12f98 <int_but_not_followed_by_function@@Base+0x26c>
   12e84:	add	r1, pc, r1
   12e88:	add	r2, r1, #32
   12e8c:	add	r1, r1, #40	; 0x28
   12e90:	ldr	r3, [r0]
   12e94:	ldr	ip, [r0, #4]
   12e98:	adds	r3, r3, #1
   12e9c:	adc	ip, ip, #0
   12ea0:	str	r3, [r0]
   12ea4:	str	ip, [r0, #4]
   12ea8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12eac:	movw	r3, #0
   12eb0:	cmp	r0, r3
   12eb4:	str	r2, [sp, #12]
   12eb8:	str	r1, [sp, #8]
   12ebc:	bne	12ef0 <int_but_not_followed_by_function@@Base+0x1c4>
   12ec0:	ldr	r0, [sp, #12]
   12ec4:	ldr	r1, [pc, #220]	; 12fa8 <int_but_not_followed_by_function@@Base+0x27c>
   12ec8:	add	r1, pc, r1
   12ecc:	add	r1, r1, #48	; 0x30
   12ed0:	ldr	r2, [r0]
   12ed4:	ldr	r3, [r0, #4]
   12ed8:	adds	r2, r2, #1
   12edc:	adc	r3, r3, #0
   12ee0:	str	r2, [r0]
   12ee4:	str	r3, [r0, #4]
   12ee8:	str	r1, [sp, #4]
   12eec:	b	12f34 <int_but_not_followed_by_function@@Base+0x208>
   12ef0:	ldr	r0, [sp, #8]
   12ef4:	ldr	r1, [pc, #160]	; 12f9c <int_but_not_followed_by_function@@Base+0x270>
   12ef8:	add	r1, pc, r1
   12efc:	ldr	r2, [pc, #156]	; 12fa0 <int_but_not_followed_by_function@@Base+0x274>
   12f00:	add	r2, pc, r2
   12f04:	ldr	r3, [pc, #152]	; 12fa4 <int_but_not_followed_by_function@@Base+0x278>
   12f08:	add	r3, pc, r3
   12f0c:	ldr	ip, [r0]
   12f10:	ldr	lr, [r0, #4]
   12f14:	adds	ip, ip, #1
   12f18:	adc	lr, lr, #0
   12f1c:	str	ip, [r0]
   12f20:	str	lr, [r0, #4]
   12f24:	mov	r0, r1
   12f28:	mov	r1, r2
   12f2c:	movw	r2, #68	; 0x44
   12f30:	bl	12010 <__assert_fail@plt>
   12f34:	ldr	r0, [sp, #4]
   12f38:	ldr	r1, [r0]
   12f3c:	ldr	r2, [r0, #4]
   12f40:	adds	r1, r1, #1
   12f44:	adc	r2, r2, #0
   12f48:	str	r1, [r0]
   12f4c:	str	r2, [r0, #4]
   12f50:	ldr	r0, [pc, #84]	; 12fac <int_but_not_followed_by_function@@Base+0x280>
   12f54:	add	r0, pc, r0
   12f58:	ldr	r1, [r0, #56]	; 0x38
   12f5c:	ldr	r2, [r0, #60]	; 0x3c
   12f60:	adds	r1, r1, #1
   12f64:	adc	r2, r2, #0
   12f68:	str	r1, [r0, #56]	; 0x38
   12f6c:	str	r2, [r0, #60]	; 0x3c
   12f70:	mov	sp, fp
   12f74:	pop	{fp, pc}
   12f78:	andeq	lr, r1, ip, lsr #10
   12f7c:	andeq	lr, r1, ip, lsl #9
   12f80:	ldrdeq	lr, [r1], -r8
   12f84:	andeq	lr, r1, r8, lsl #6
   12f88:	andeq	fp, r0, r6, lsr #20
   12f8c:	muleq	r0, sl, r9
   12f90:	andeq	fp, r0, r0, lsr sl
   12f94:	andeq	lr, r1, r8, asr r4
   12f98:	andeq	lr, r1, r4, ror #7
   12f9c:	andeq	fp, r0, r2, ror #18
   12fa0:	andeq	fp, r0, r2, ror #17
   12fa4:	andeq	fp, r0, r8, ror r9
   12fa8:	andeq	lr, r1, r0, lsr #7
   12fac:	andeq	lr, r1, r4, lsl r3

00012fb0 <boolean_expression_is_read_properly@@Base>:
   12fb0:	push	{fp, lr}
   12fb4:	mov	fp, sp
   12fb8:	sub	sp, sp, #72	; 0x48
   12fbc:	ldr	r0, [pc, #908]	; 13350 <boolean_expression_is_read_properly@@Base+0x3a0>
   12fc0:	add	r0, pc, r0
   12fc4:	str	r0, [sp, #36]	; 0x24
   12fc8:	ldr	r0, [sp, #36]	; 0x24
   12fcc:	ldr	r1, [r0]
   12fd0:	ldr	r2, [r0, #4]
   12fd4:	adds	r1, r1, #1
   12fd8:	adc	r2, r2, #0
   12fdc:	str	r1, [r0]
   12fe0:	str	r2, [r0, #4]
   12fe4:	movw	r0, #0
   12fe8:	str	r0, [fp, #-24]	; 0xffffffe8
   12fec:	str	r0, [fp, #-28]	; 0xffffffe4
   12ff0:	movw	r0, #3
   12ff4:	bl	11ee4 <malloc@plt>
   12ff8:	str	r0, [fp, #-32]	; 0xffffffe0
   12ffc:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13000:	movw	r1, #33	; 0x21
   13004:	strb	r1, [r0]
   13008:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1300c:	movw	r1, #61	; 0x3d
   13010:	strb	r1, [r0, #1]
   13014:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13018:	movw	r1, #0
   1301c:	strb	r1, [r0, #2]
   13020:	sub	r0, fp, #16
   13024:	sub	r1, fp, #12
   13028:	bl	198c0 <init_grammar@@Base>
   1302c:	movw	r0, #20
   13030:	bl	11ee4 <malloc@plt>
   13034:	str	r0, [fp, #-20]	; 0xffffffec
   13038:	movw	r0, #8
   1303c:	bl	11ee4 <malloc@plt>
   13040:	ldr	r1, [fp, #-20]	; 0xffffffec
   13044:	str	r0, [r1]
   13048:	ldr	r0, [fp, #-20]	; 0xffffffec
   1304c:	ldr	r0, [r0]
   13050:	movw	r1, #2
   13054:	bl	16e44 <init_token_int_value@@Base>
   13058:	movw	r0, #8
   1305c:	bl	11ee4 <malloc@plt>
   13060:	ldr	r1, [fp, #-20]	; 0xffffffec
   13064:	str	r0, [r1, #4]
   13068:	ldr	r0, [fp, #-20]	; 0xffffffec
   1306c:	ldr	r0, [r0, #4]
   13070:	movw	r1, #2
   13074:	bl	16e44 <init_token_int_value@@Base>
   13078:	movw	r0, #8
   1307c:	bl	11ee4 <malloc@plt>
   13080:	ldr	r1, [fp, #-20]	; 0xffffffec
   13084:	str	r0, [r1, #8]
   13088:	ldr	r0, [fp, #-20]	; 0xffffffec
   1308c:	ldr	r0, [r0, #8]
   13090:	ldr	r1, [fp, #-32]	; 0xffffffe0
   13094:	bl	17370 <init_token_boolean_op@@Base>
   13098:	movw	r0, #8
   1309c:	bl	11ee4 <malloc@plt>
   130a0:	ldr	r1, [fp, #-20]	; 0xffffffec
   130a4:	str	r0, [r1, #12]
   130a8:	ldr	r0, [fp, #-20]	; 0xffffffec
   130ac:	ldr	r0, [r0, #12]
   130b0:	movw	r1, #1
   130b4:	bl	16e44 <init_token_int_value@@Base>
   130b8:	movw	r0, #4
   130bc:	bl	11ee4 <malloc@plt>
   130c0:	ldr	r1, [fp, #-20]	; 0xffffffec
   130c4:	str	r0, [r1, #16]
   130c8:	ldr	r0, [fp, #-20]	; 0xffffffec
   130cc:	ldr	r0, [r0, #16]
   130d0:	bl	16fd0 <init_token_cpar@@Base>
   130d4:	ldr	r0, [pc, #640]	; 1335c <boolean_expression_is_read_properly@@Base+0x3ac>
   130d8:	ldr	r0, [pc, r0]
   130dc:	ldr	r1, [fp, #-20]	; 0xffffffec
   130e0:	str	r1, [r0, #228]	; 0xe4
   130e4:	movw	r1, #5
   130e8:	str	r1, [r0, #220]	; 0xdc
   130ec:	sub	r0, fp, #16
   130f0:	bl	1a684 <read_boolean_expression@@Base>
   130f4:	ldr	r1, [pc, #600]	; 13354 <boolean_expression_is_read_properly@@Base+0x3a4>
   130f8:	add	r1, pc, r1
   130fc:	add	r2, r1, #8
   13100:	add	r1, r1, #16
   13104:	ldr	r3, [pc, #588]	; 13358 <boolean_expression_is_read_properly@@Base+0x3a8>
   13108:	ldr	r3, [pc, r3]
   1310c:	str	r0, [fp, #-24]	; 0xffffffe8
   13110:	ldr	r0, [r3, #204]	; 0xcc
   13114:	cmp	r0, #5
   13118:	str	r2, [sp, #32]
   1311c:	str	r1, [sp, #28]
   13120:	bne	13154 <boolean_expression_is_read_properly@@Base+0x1a4>
   13124:	ldr	r0, [sp, #32]
   13128:	ldr	r1, [pc, #572]	; 1336c <boolean_expression_is_read_properly@@Base+0x3bc>
   1312c:	add	r1, pc, r1
   13130:	add	r1, r1, #24
   13134:	ldr	r2, [r0]
   13138:	ldr	r3, [r0, #4]
   1313c:	adds	r2, r2, #1
   13140:	adc	r3, r3, #0
   13144:	str	r2, [r0]
   13148:	str	r3, [r0, #4]
   1314c:	str	r1, [sp, #24]
   13150:	b	13198 <boolean_expression_is_read_properly@@Base+0x1e8>
   13154:	ldr	r0, [sp, #28]
   13158:	ldr	r1, [pc, #512]	; 13360 <boolean_expression_is_read_properly@@Base+0x3b0>
   1315c:	add	r1, pc, r1
   13160:	ldr	r2, [pc, #508]	; 13364 <boolean_expression_is_read_properly@@Base+0x3b4>
   13164:	add	r2, pc, r2
   13168:	ldr	r3, [pc, #504]	; 13368 <boolean_expression_is_read_properly@@Base+0x3b8>
   1316c:	add	r3, pc, r3
   13170:	ldr	ip, [r0]
   13174:	ldr	lr, [r0, #4]
   13178:	adds	ip, ip, #1
   1317c:	adc	lr, lr, #0
   13180:	str	ip, [r0]
   13184:	str	lr, [r0, #4]
   13188:	mov	r0, r1
   1318c:	mov	r1, r2
   13190:	movw	r2, #105	; 0x69
   13194:	bl	12010 <__assert_fail@plt>
   13198:	ldr	r0, [sp, #24]
   1319c:	ldr	r1, [pc, #460]	; 13370 <boolean_expression_is_read_properly@@Base+0x3c0>
   131a0:	add	r1, pc, r1
   131a4:	add	r2, r1, #32
   131a8:	add	r1, r1, #40	; 0x28
   131ac:	ldr	r3, [pc, #448]	; 13374 <boolean_expression_is_read_properly@@Base+0x3c4>
   131b0:	ldr	r3, [pc, r3]
   131b4:	ldr	ip, [r0]
   131b8:	ldr	lr, [r0, #4]
   131bc:	adds	ip, ip, #1
   131c0:	adc	lr, lr, #0
   131c4:	str	ip, [r0]
   131c8:	str	lr, [r0, #4]
   131cc:	ldr	r0, [r3, #408]	; 0x198
   131d0:	cmp	r0, #1
   131d4:	str	r2, [sp, #20]
   131d8:	str	r1, [sp, #16]
   131dc:	bne	13210 <boolean_expression_is_read_properly@@Base+0x260>
   131e0:	ldr	r0, [sp, #20]
   131e4:	ldr	r1, [pc, #408]	; 13384 <boolean_expression_is_read_properly@@Base+0x3d4>
   131e8:	add	r1, pc, r1
   131ec:	add	r1, r1, #48	; 0x30
   131f0:	ldr	r2, [r0]
   131f4:	ldr	r3, [r0, #4]
   131f8:	adds	r2, r2, #1
   131fc:	adc	r3, r3, #0
   13200:	str	r2, [r0]
   13204:	str	r3, [r0, #4]
   13208:	str	r1, [sp, #12]
   1320c:	b	13254 <boolean_expression_is_read_properly@@Base+0x2a4>
   13210:	ldr	r0, [sp, #16]
   13214:	ldr	r1, [pc, #348]	; 13378 <boolean_expression_is_read_properly@@Base+0x3c8>
   13218:	add	r1, pc, r1
   1321c:	ldr	r2, [pc, #344]	; 1337c <boolean_expression_is_read_properly@@Base+0x3cc>
   13220:	add	r2, pc, r2
   13224:	ldr	r3, [pc, #340]	; 13380 <boolean_expression_is_read_properly@@Base+0x3d0>
   13228:	add	r3, pc, r3
   1322c:	ldr	ip, [r0]
   13230:	ldr	lr, [r0, #4]
   13234:	adds	ip, ip, #1
   13238:	adc	lr, lr, #0
   1323c:	str	ip, [r0]
   13240:	str	lr, [r0, #4]
   13244:	mov	r0, r1
   13248:	mov	r1, r2
   1324c:	movw	r2, #106	; 0x6a
   13250:	bl	12010 <__assert_fail@plt>
   13254:	ldr	r0, [sp, #12]
   13258:	ldr	r1, [pc, #296]	; 13388 <boolean_expression_is_read_properly@@Base+0x3d8>
   1325c:	add	r1, pc, r1
   13260:	add	r2, r1, #56	; 0x38
   13264:	add	r1, r1, #64	; 0x40
   13268:	ldr	r3, [r0]
   1326c:	ldr	ip, [r0, #4]
   13270:	adds	r3, r3, #1
   13274:	adc	ip, ip, #0
   13278:	str	r3, [r0]
   1327c:	str	ip, [r0, #4]
   13280:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13284:	ldr	r0, [r0]
   13288:	cmp	r0, #5
   1328c:	str	r2, [sp, #8]
   13290:	str	r1, [sp, #4]
   13294:	bne	132c8 <boolean_expression_is_read_properly@@Base+0x318>
   13298:	ldr	r0, [sp, #8]
   1329c:	ldr	r1, [pc, #244]	; 13398 <boolean_expression_is_read_properly@@Base+0x3e8>
   132a0:	add	r1, pc, r1
   132a4:	add	r1, r1, #72	; 0x48
   132a8:	ldr	r2, [r0]
   132ac:	ldr	r3, [r0, #4]
   132b0:	adds	r2, r2, #1
   132b4:	adc	r3, r3, #0
   132b8:	str	r2, [r0]
   132bc:	str	r3, [r0, #4]
   132c0:	str	r1, [sp]
   132c4:	b	1330c <boolean_expression_is_read_properly@@Base+0x35c>
   132c8:	ldr	r0, [sp, #4]
   132cc:	ldr	r1, [pc, #184]	; 1338c <boolean_expression_is_read_properly@@Base+0x3dc>
   132d0:	add	r1, pc, r1
   132d4:	ldr	r2, [pc, #180]	; 13390 <boolean_expression_is_read_properly@@Base+0x3e0>
   132d8:	add	r2, pc, r2
   132dc:	ldr	r3, [pc, #176]	; 13394 <boolean_expression_is_read_properly@@Base+0x3e4>
   132e0:	add	r3, pc, r3
   132e4:	ldr	ip, [r0]
   132e8:	ldr	lr, [r0, #4]
   132ec:	adds	ip, ip, #1
   132f0:	adc	lr, lr, #0
   132f4:	str	ip, [r0]
   132f8:	str	lr, [r0, #4]
   132fc:	mov	r0, r1
   13300:	mov	r1, r2
   13304:	movw	r2, #107	; 0x6b
   13308:	bl	12010 <__assert_fail@plt>
   1330c:	ldr	r0, [sp]
   13310:	ldr	r1, [r0]
   13314:	ldr	r2, [r0, #4]
   13318:	adds	r1, r1, #1
   1331c:	adc	r2, r2, #0
   13320:	str	r1, [r0]
   13324:	str	r2, [r0, #4]
   13328:	ldr	r0, [pc, #108]	; 1339c <boolean_expression_is_read_properly@@Base+0x3ec>
   1332c:	add	r0, pc, r0
   13330:	ldr	r1, [r0, #80]	; 0x50
   13334:	ldr	r2, [r0, #84]	; 0x54
   13338:	adds	r1, r1, #1
   1333c:	adc	r2, r2, #0
   13340:	str	r1, [r0, #80]	; 0x50
   13344:	str	r2, [r0, #84]	; 0x54
   13348:	mov	sp, fp
   1334c:	pop	{fp, pc}
   13350:	andeq	lr, r1, r8, ror #5
   13354:			; <UNDEFINED> instruction: 0x0001e1b0
   13358:			; <UNDEFINED> instruction: 0x0001dfbc
   1335c:	andeq	sp, r1, ip, ror #31
   13360:	andeq	fp, r0, ip, asr #14
   13364:	andeq	fp, r0, lr, ror r6
   13368:	andeq	fp, r0, r6, asr r7
   1336c:	andeq	lr, r1, ip, ror r1
   13370:	andeq	lr, r1, r8, lsl #2
   13374:	andeq	sp, r1, r4, lsl #30
   13378:	ldrdeq	fp, [r0], -r5
   1337c:	andeq	fp, r0, r2, asr #11
   13380:	muleq	r0, sl, r6
   13384:	andeq	lr, r1, r0, asr #1
   13388:	andeq	lr, r1, ip, asr #32
   1338c:	andeq	fp, r0, ip, lsr r6
   13390:	andeq	fp, r0, sl, lsl #10
   13394:	andeq	fp, r0, r2, ror #11
   13398:	andeq	lr, r1, r8
   1339c:	andeq	sp, r1, ip, ror pc

000133a0 <boolean_expression_complex@@Base>:
   133a0:	push	{fp, lr}
   133a4:	mov	fp, sp
   133a8:	sub	sp, sp, #72	; 0x48
   133ac:	ldr	r0, [pc, #956]	; 13770 <boolean_expression_complex@@Base+0x3d0>
   133b0:	add	r0, pc, r0
   133b4:	str	r0, [sp, #28]
   133b8:	ldr	r0, [sp, #28]
   133bc:	ldr	r1, [r0]
   133c0:	ldr	r2, [r0, #4]
   133c4:	adds	r1, r1, #1
   133c8:	adc	r2, r2, #0
   133cc:	str	r1, [r0]
   133d0:	str	r2, [r0, #4]
   133d4:	movw	r0, #0
   133d8:	str	r0, [fp, #-24]	; 0xffffffe8
   133dc:	str	r0, [fp, #-28]	; 0xffffffe4
   133e0:	movw	r0, #3
   133e4:	bl	11ee4 <malloc@plt>
   133e8:	str	r0, [fp, #-32]	; 0xffffffe0
   133ec:	movw	r0, #3
   133f0:	bl	11ee4 <malloc@plt>
   133f4:	str	r0, [sp, #36]	; 0x24
   133f8:	movw	r0, #3
   133fc:	bl	11ee4 <malloc@plt>
   13400:	str	r0, [sp, #32]
   13404:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13408:	movw	r1, #60	; 0x3c
   1340c:	strb	r1, [r0]
   13410:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13414:	movw	r1, #61	; 0x3d
   13418:	strb	r1, [r0, #1]
   1341c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13420:	movw	r2, #0
   13424:	strb	r2, [r0, #2]
   13428:	ldr	r0, [sp, #36]	; 0x24
   1342c:	movw	r3, #38	; 0x26
   13430:	strb	r3, [r0]
   13434:	ldr	r0, [sp, #36]	; 0x24
   13438:	strb	r3, [r0, #1]
   1343c:	ldr	r0, [sp, #36]	; 0x24
   13440:	strb	r2, [r0, #2]
   13444:	ldr	r0, [sp, #32]
   13448:	strb	r1, [r0]
   1344c:	ldr	r0, [sp, #32]
   13450:	strb	r1, [r0, #1]
   13454:	ldr	r0, [sp, #32]
   13458:	strb	r2, [r0, #2]
   1345c:	sub	r0, fp, #16
   13460:	sub	r1, fp, #12
   13464:	bl	198c0 <init_grammar@@Base>
   13468:	movw	r0, #40	; 0x28
   1346c:	bl	11ee4 <malloc@plt>
   13470:	str	r0, [fp, #-20]	; 0xffffffec
   13474:	movw	r0, #8
   13478:	bl	11ee4 <malloc@plt>
   1347c:	ldr	r1, [fp, #-20]	; 0xffffffec
   13480:	str	r0, [r1]
   13484:	ldr	r0, [fp, #-20]	; 0xffffffec
   13488:	ldr	r0, [r0]
   1348c:	movw	r1, #2
   13490:	bl	16e44 <init_token_int_value@@Base>
   13494:	movw	r0, #8
   13498:	bl	11ee4 <malloc@plt>
   1349c:	ldr	r1, [fp, #-20]	; 0xffffffec
   134a0:	str	r0, [r1, #4]
   134a4:	ldr	r0, [fp, #-20]	; 0xffffffec
   134a8:	ldr	r0, [r0, #4]
   134ac:	movw	r1, #2
   134b0:	bl	16e44 <init_token_int_value@@Base>
   134b4:	movw	r0, #8
   134b8:	bl	11ee4 <malloc@plt>
   134bc:	ldr	r1, [fp, #-20]	; 0xffffffec
   134c0:	str	r0, [r1, #8]
   134c4:	ldr	r0, [fp, #-20]	; 0xffffffec
   134c8:	ldr	r0, [r0, #8]
   134cc:	ldr	r1, [fp, #-32]	; 0xffffffe0
   134d0:	bl	17370 <init_token_boolean_op@@Base>
   134d4:	movw	r0, #8
   134d8:	bl	11ee4 <malloc@plt>
   134dc:	ldr	r1, [fp, #-20]	; 0xffffffec
   134e0:	str	r0, [r1, #12]
   134e4:	ldr	r0, [fp, #-20]	; 0xffffffec
   134e8:	ldr	r0, [r0, #12]
   134ec:	movw	r1, #1
   134f0:	bl	16e44 <init_token_int_value@@Base>
   134f4:	movw	r0, #8
   134f8:	bl	11ee4 <malloc@plt>
   134fc:	ldr	r1, [fp, #-20]	; 0xffffffec
   13500:	str	r0, [r1, #16]
   13504:	ldr	r0, [fp, #-20]	; 0xffffffec
   13508:	ldr	r0, [r0, #16]
   1350c:	ldr	r1, [sp, #36]	; 0x24
   13510:	bl	17370 <init_token_boolean_op@@Base>
   13514:	movw	r0, #8
   13518:	bl	11ee4 <malloc@plt>
   1351c:	ldr	r1, [fp, #-20]	; 0xffffffec
   13520:	str	r0, [r1, #20]
   13524:	ldr	r0, [fp, #-20]	; 0xffffffec
   13528:	ldr	r0, [r0, #20]
   1352c:	movw	r1, #4
   13530:	bl	16e44 <init_token_int_value@@Base>
   13534:	movw	r0, #8
   13538:	bl	11ee4 <malloc@plt>
   1353c:	ldr	r1, [fp, #-20]	; 0xffffffec
   13540:	str	r0, [r1, #24]
   13544:	ldr	r0, [fp, #-20]	; 0xffffffec
   13548:	ldr	r0, [r0, #24]
   1354c:	movw	r1, #4
   13550:	bl	16e44 <init_token_int_value@@Base>
   13554:	movw	r0, #8
   13558:	bl	11ee4 <malloc@plt>
   1355c:	ldr	r1, [fp, #-20]	; 0xffffffec
   13560:	str	r0, [r1, #28]
   13564:	ldr	r0, [fp, #-20]	; 0xffffffec
   13568:	ldr	r0, [r0, #28]
   1356c:	ldr	r1, [sp, #32]
   13570:	bl	17370 <init_token_boolean_op@@Base>
   13574:	movw	r0, #8
   13578:	bl	11ee4 <malloc@plt>
   1357c:	ldr	r1, [fp, #-20]	; 0xffffffec
   13580:	str	r0, [r1, #32]
   13584:	ldr	r0, [fp, #-20]	; 0xffffffec
   13588:	ldr	r0, [r0, #32]
   1358c:	movw	r1, #4
   13590:	bl	16e44 <init_token_int_value@@Base>
   13594:	movw	r0, #4
   13598:	bl	11ee4 <malloc@plt>
   1359c:	ldr	r1, [fp, #-20]	; 0xffffffec
   135a0:	str	r0, [r1, #36]	; 0x24
   135a4:	ldr	r0, [fp, #-20]	; 0xffffffec
   135a8:	ldr	r0, [r0, #36]	; 0x24
   135ac:	bl	16fd0 <init_token_cpar@@Base>
   135b0:	ldr	r0, [pc, #452]	; 1377c <boolean_expression_complex@@Base+0x3dc>
   135b4:	ldr	r0, [pc, r0]
   135b8:	ldr	r1, [fp, #-20]	; 0xffffffec
   135bc:	str	r1, [r0, #228]	; 0xe4
   135c0:	movw	r1, #10
   135c4:	str	r1, [r0, #220]	; 0xdc
   135c8:	sub	r0, fp, #16
   135cc:	bl	1a684 <read_boolean_expression@@Base>
   135d0:	ldr	r1, [pc, #412]	; 13774 <boolean_expression_complex@@Base+0x3d4>
   135d4:	add	r1, pc, r1
   135d8:	add	r2, r1, #8
   135dc:	add	r1, r1, #16
   135e0:	ldr	r3, [pc, #400]	; 13778 <boolean_expression_complex@@Base+0x3d8>
   135e4:	ldr	r3, [pc, r3]
   135e8:	str	r0, [fp, #-24]	; 0xffffffe8
   135ec:	ldr	r0, [r3, #204]	; 0xcc
   135f0:	cmp	r0, #10
   135f4:	str	r2, [sp, #24]
   135f8:	str	r1, [sp, #20]
   135fc:	bne	13630 <boolean_expression_complex@@Base+0x290>
   13600:	ldr	r0, [sp, #24]
   13604:	ldr	r1, [pc, #384]	; 1378c <boolean_expression_complex@@Base+0x3ec>
   13608:	add	r1, pc, r1
   1360c:	add	r1, r1, #24
   13610:	ldr	r2, [r0]
   13614:	ldr	r3, [r0, #4]
   13618:	adds	r2, r2, #1
   1361c:	adc	r3, r3, #0
   13620:	str	r2, [r0]
   13624:	str	r3, [r0, #4]
   13628:	str	r1, [sp, #16]
   1362c:	b	13674 <boolean_expression_complex@@Base+0x2d4>
   13630:	ldr	r0, [sp, #20]
   13634:	ldr	r1, [pc, #324]	; 13780 <boolean_expression_complex@@Base+0x3e0>
   13638:	add	r1, pc, r1
   1363c:	ldr	r2, [pc, #320]	; 13784 <boolean_expression_complex@@Base+0x3e4>
   13640:	add	r2, pc, r2
   13644:	ldr	r3, [pc, #316]	; 13788 <boolean_expression_complex@@Base+0x3e8>
   13648:	add	r3, pc, r3
   1364c:	ldr	ip, [r0]
   13650:	ldr	lr, [r0, #4]
   13654:	adds	ip, ip, #1
   13658:	adc	lr, lr, #0
   1365c:	str	ip, [r0]
   13660:	str	lr, [r0, #4]
   13664:	mov	r0, r1
   13668:	mov	r1, r2
   1366c:	movw	r2, #166	; 0xa6
   13670:	bl	12010 <__assert_fail@plt>
   13674:	ldr	r0, [sp, #16]
   13678:	ldr	r1, [pc, #272]	; 13790 <boolean_expression_complex@@Base+0x3f0>
   1367c:	add	r1, pc, r1
   13680:	add	r2, r1, #32
   13684:	add	r1, r1, #40	; 0x28
   13688:	ldr	r3, [r0]
   1368c:	ldr	ip, [r0, #4]
   13690:	adds	r3, r3, #1
   13694:	adc	ip, ip, #0
   13698:	str	r3, [r0]
   1369c:	str	ip, [r0, #4]
   136a0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   136a4:	ldr	r0, [r0]
   136a8:	cmp	r0, #5
   136ac:	str	r2, [sp, #12]
   136b0:	str	r1, [sp, #8]
   136b4:	bne	136e8 <boolean_expression_complex@@Base+0x348>
   136b8:	ldr	r0, [sp, #12]
   136bc:	ldr	r1, [pc, #220]	; 137a0 <boolean_expression_complex@@Base+0x400>
   136c0:	add	r1, pc, r1
   136c4:	add	r1, r1, #48	; 0x30
   136c8:	ldr	r2, [r0]
   136cc:	ldr	r3, [r0, #4]
   136d0:	adds	r2, r2, #1
   136d4:	adc	r3, r3, #0
   136d8:	str	r2, [r0]
   136dc:	str	r3, [r0, #4]
   136e0:	str	r1, [sp, #4]
   136e4:	b	1372c <boolean_expression_complex@@Base+0x38c>
   136e8:	ldr	r0, [sp, #8]
   136ec:	ldr	r1, [pc, #160]	; 13794 <boolean_expression_complex@@Base+0x3f4>
   136f0:	add	r1, pc, r1
   136f4:	ldr	r2, [pc, #156]	; 13798 <boolean_expression_complex@@Base+0x3f8>
   136f8:	add	r2, pc, r2
   136fc:	ldr	r3, [pc, #152]	; 1379c <boolean_expression_complex@@Base+0x3fc>
   13700:	add	r3, pc, r3
   13704:	ldr	ip, [r0]
   13708:	ldr	lr, [r0, #4]
   1370c:	adds	ip, ip, #1
   13710:	adc	lr, lr, #0
   13714:	str	ip, [r0]
   13718:	str	lr, [r0, #4]
   1371c:	mov	r0, r1
   13720:	mov	r1, r2
   13724:	movw	r2, #167	; 0xa7
   13728:	bl	12010 <__assert_fail@plt>
   1372c:	ldr	r0, [sp, #4]
   13730:	ldr	r1, [r0]
   13734:	ldr	r2, [r0, #4]
   13738:	adds	r1, r1, #1
   1373c:	adc	r2, r2, #0
   13740:	str	r1, [r0]
   13744:	str	r2, [r0, #4]
   13748:	ldr	r0, [pc, #84]	; 137a4 <boolean_expression_complex@@Base+0x404>
   1374c:	add	r0, pc, r0
   13750:	ldr	r1, [r0, #56]	; 0x38
   13754:	ldr	r2, [r0, #60]	; 0x3c
   13758:	adds	r1, r1, #1
   1375c:	adc	r2, r2, #0
   13760:	str	r1, [r0, #56]	; 0x38
   13764:	str	r2, [r0, #60]	; 0x3c
   13768:	mov	sp, fp
   1376c:	pop	{fp, pc}
   13770:	andeq	sp, r1, r8, asr pc
   13774:	andeq	sp, r1, r4, lsr sp
   13778:	andeq	sp, r1, r0, ror #21
   1377c:	andeq	sp, r1, r0, lsl fp
   13780:	strdeq	fp, [r0], -r4
   13784:	andeq	fp, r0, r2, lsr #3
   13788:	strdeq	fp, [r0], -pc	; <UNPREDICTABLE>
   1378c:	andeq	sp, r1, r0, lsl #26
   13790:	andeq	sp, r1, ip, lsl #25
   13794:	andeq	fp, r0, ip, lsl r2
   13798:	andeq	fp, r0, sl, ror #1
   1379c:	andeq	fp, r0, r7, asr #4
   137a0:	andeq	sp, r1, r8, asr #24
   137a4:			; <UNDEFINED> instruction: 0x0001dbbc

000137a8 <boolean_binary_operator_is_read_properly@@Base>:
   137a8:	push	{fp, lr}
   137ac:	mov	fp, sp
   137b0:	sub	sp, sp, #96	; 0x60
   137b4:	ldr	r0, [pc, #1228]	; 13c88 <boolean_binary_operator_is_read_properly@@Base+0x4e0>
   137b8:	add	r0, pc, r0
   137bc:	str	r0, [fp, #-36]	; 0xffffffdc
   137c0:	ldr	r0, [fp, #-36]	; 0xffffffdc
   137c4:	ldr	r1, [r0]
   137c8:	ldr	r2, [r0, #4]
   137cc:	adds	r1, r1, #1
   137d0:	adc	r2, r2, #0
   137d4:	str	r1, [r0]
   137d8:	str	r2, [r0, #4]
   137dc:	movw	r0, #0
   137e0:	str	r0, [fp, #-24]	; 0xffffffe8
   137e4:	str	r0, [fp, #-28]	; 0xffffffe4
   137e8:	movw	r0, #3
   137ec:	bl	11ee4 <malloc@plt>
   137f0:	str	r0, [fp, #-32]	; 0xffffffe0
   137f4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   137f8:	movw	r1, #33	; 0x21
   137fc:	strb	r1, [r0]
   13800:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13804:	movw	r1, #61	; 0x3d
   13808:	strb	r1, [r0, #1]
   1380c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13810:	movw	r1, #0
   13814:	strb	r1, [r0, #2]
   13818:	sub	r0, fp, #16
   1381c:	sub	r1, fp, #12
   13820:	bl	198c0 <init_grammar@@Base>
   13824:	movw	r0, #12
   13828:	bl	11ee4 <malloc@plt>
   1382c:	str	r0, [fp, #-20]	; 0xffffffec
   13830:	movw	r0, #8
   13834:	bl	11ee4 <malloc@plt>
   13838:	ldr	r1, [fp, #-20]	; 0xffffffec
   1383c:	str	r0, [r1]
   13840:	ldr	r0, [fp, #-20]	; 0xffffffec
   13844:	ldr	r0, [r0]
   13848:	movw	r1, #2
   1384c:	bl	16e44 <init_token_int_value@@Base>
   13850:	movw	r0, #8
   13854:	bl	11ee4 <malloc@plt>
   13858:	ldr	r1, [fp, #-20]	; 0xffffffec
   1385c:	str	r0, [r1, #4]
   13860:	ldr	r0, [fp, #-20]	; 0xffffffec
   13864:	ldr	r0, [r0, #4]
   13868:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1386c:	bl	17370 <init_token_boolean_op@@Base>
   13870:	movw	r0, #8
   13874:	bl	11ee4 <malloc@plt>
   13878:	ldr	r1, [fp, #-20]	; 0xffffffec
   1387c:	str	r0, [r1, #8]
   13880:	ldr	r0, [fp, #-20]	; 0xffffffec
   13884:	ldr	r0, [r0, #8]
   13888:	movw	r1, #1
   1388c:	bl	16e44 <init_token_int_value@@Base>
   13890:	ldr	r0, [pc, #1020]	; 13c94 <boolean_binary_operator_is_read_properly@@Base+0x4ec>
   13894:	ldr	r0, [pc, r0]
   13898:	ldr	r1, [fp, #-20]	; 0xffffffec
   1389c:	str	r1, [r0, #228]	; 0xe4
   138a0:	movw	r1, #3
   138a4:	str	r1, [r0, #220]	; 0xdc
   138a8:	sub	r0, fp, #16
   138ac:	bl	1ac2c <read_boolean_binary_expression@@Base>
   138b0:	ldr	r1, [pc, #980]	; 13c8c <boolean_binary_operator_is_read_properly@@Base+0x4e4>
   138b4:	add	r1, pc, r1
   138b8:	add	r2, r1, #8
   138bc:	add	r1, r1, #16
   138c0:	ldr	r3, [pc, #968]	; 13c90 <boolean_binary_operator_is_read_properly@@Base+0x4e8>
   138c4:	ldr	r3, [pc, r3]
   138c8:	str	r0, [fp, #-24]	; 0xffffffe8
   138cc:	ldr	r0, [r3, #204]	; 0xcc
   138d0:	cmp	r0, #3
   138d4:	str	r2, [fp, #-40]	; 0xffffffd8
   138d8:	str	r1, [fp, #-44]	; 0xffffffd4
   138dc:	bne	13910 <boolean_binary_operator_is_read_properly@@Base+0x168>
   138e0:	ldr	r0, [fp, #-40]	; 0xffffffd8
   138e4:	ldr	r1, [pc, #952]	; 13ca4 <boolean_binary_operator_is_read_properly@@Base+0x4fc>
   138e8:	add	r1, pc, r1
   138ec:	add	r1, r1, #24
   138f0:	ldr	r2, [r0]
   138f4:	ldr	r3, [r0, #4]
   138f8:	adds	r2, r2, #1
   138fc:	adc	r3, r3, #0
   13900:	str	r2, [r0]
   13904:	str	r3, [r0, #4]
   13908:	str	r1, [sp, #48]	; 0x30
   1390c:	b	13954 <boolean_binary_operator_is_read_properly@@Base+0x1ac>
   13910:	ldr	r0, [fp, #-44]	; 0xffffffd4
   13914:	ldr	r1, [pc, #892]	; 13c98 <boolean_binary_operator_is_read_properly@@Base+0x4f0>
   13918:	add	r1, pc, r1
   1391c:	ldr	r2, [pc, #888]	; 13c9c <boolean_binary_operator_is_read_properly@@Base+0x4f4>
   13920:	add	r2, pc, r2
   13924:	ldr	r3, [pc, #884]	; 13ca0 <boolean_binary_operator_is_read_properly@@Base+0x4f8>
   13928:	add	r3, pc, r3
   1392c:	ldr	ip, [r0]
   13930:	ldr	lr, [r0, #4]
   13934:	adds	ip, ip, #1
   13938:	adc	lr, lr, #0
   1393c:	str	ip, [r0]
   13940:	str	lr, [r0, #4]
   13944:	mov	r0, r1
   13948:	mov	r1, r2
   1394c:	movw	r2, #200	; 0xc8
   13950:	bl	12010 <__assert_fail@plt>
   13954:	ldr	r0, [sp, #48]	; 0x30
   13958:	ldr	r1, [pc, #840]	; 13ca8 <boolean_binary_operator_is_read_properly@@Base+0x500>
   1395c:	add	r1, pc, r1
   13960:	add	r2, r1, #32
   13964:	add	r1, r1, #40	; 0x28
   13968:	ldr	r3, [r0]
   1396c:	ldr	ip, [r0, #4]
   13970:	adds	r3, r3, #1
   13974:	adc	ip, ip, #0
   13978:	str	r3, [r0]
   1397c:	str	ip, [r0, #4]
   13980:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13984:	ldr	r0, [r0]
   13988:	cmp	r0, #5
   1398c:	str	r2, [sp, #44]	; 0x2c
   13990:	str	r1, [sp, #40]	; 0x28
   13994:	bne	139c8 <boolean_binary_operator_is_read_properly@@Base+0x220>
   13998:	ldr	r0, [sp, #44]	; 0x2c
   1399c:	ldr	r1, [pc, #788]	; 13cb8 <boolean_binary_operator_is_read_properly@@Base+0x510>
   139a0:	add	r1, pc, r1
   139a4:	add	r1, r1, #48	; 0x30
   139a8:	ldr	r2, [r0]
   139ac:	ldr	r3, [r0, #4]
   139b0:	adds	r2, r2, #1
   139b4:	adc	r3, r3, #0
   139b8:	str	r2, [r0]
   139bc:	str	r3, [r0, #4]
   139c0:	str	r1, [sp, #36]	; 0x24
   139c4:	b	13a0c <boolean_binary_operator_is_read_properly@@Base+0x264>
   139c8:	ldr	r0, [sp, #40]	; 0x28
   139cc:	ldr	r1, [pc, #728]	; 13cac <boolean_binary_operator_is_read_properly@@Base+0x504>
   139d0:	add	r1, pc, r1
   139d4:	ldr	r2, [pc, #724]	; 13cb0 <boolean_binary_operator_is_read_properly@@Base+0x508>
   139d8:	add	r2, pc, r2
   139dc:	ldr	r3, [pc, #720]	; 13cb4 <boolean_binary_operator_is_read_properly@@Base+0x50c>
   139e0:	add	r3, pc, r3
   139e4:	ldr	ip, [r0]
   139e8:	ldr	lr, [r0, #4]
   139ec:	adds	ip, ip, #1
   139f0:	adc	lr, lr, #0
   139f4:	str	ip, [r0]
   139f8:	str	lr, [r0, #4]
   139fc:	mov	r0, r1
   13a00:	mov	r1, r2
   13a04:	movw	r2, #201	; 0xc9
   13a08:	bl	12010 <__assert_fail@plt>
   13a0c:	ldr	r0, [sp, #36]	; 0x24
   13a10:	ldr	r1, [pc, #676]	; 13cbc <boolean_binary_operator_is_read_properly@@Base+0x514>
   13a14:	add	r1, pc, r1
   13a18:	add	r2, r1, #56	; 0x38
   13a1c:	add	r1, r1, #64	; 0x40
   13a20:	ldr	r3, [r0]
   13a24:	ldr	ip, [r0, #4]
   13a28:	adds	r3, r3, #1
   13a2c:	adc	ip, ip, #0
   13a30:	str	r3, [r0]
   13a34:	str	ip, [r0, #4]
   13a38:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13a3c:	str	r0, [fp, #-28]	; 0xffffffe4
   13a40:	ldr	r0, [fp, #-28]	; 0xffffffe4
   13a44:	ldr	r0, [r0, #8]
   13a48:	ldr	r0, [r0]
   13a4c:	cmp	r0, #1
   13a50:	str	r2, [sp, #32]
   13a54:	str	r1, [sp, #28]
   13a58:	bne	13a8c <boolean_binary_operator_is_read_properly@@Base+0x2e4>
   13a5c:	ldr	r0, [sp, #32]
   13a60:	ldr	r1, [pc, #612]	; 13ccc <boolean_binary_operator_is_read_properly@@Base+0x524>
   13a64:	add	r1, pc, r1
   13a68:	add	r1, r1, #72	; 0x48
   13a6c:	ldr	r2, [r0]
   13a70:	ldr	r3, [r0, #4]
   13a74:	adds	r2, r2, #1
   13a78:	adc	r3, r3, #0
   13a7c:	str	r2, [r0]
   13a80:	str	r3, [r0, #4]
   13a84:	str	r1, [sp, #24]
   13a88:	b	13ad0 <boolean_binary_operator_is_read_properly@@Base+0x328>
   13a8c:	ldr	r0, [sp, #28]
   13a90:	ldr	r1, [pc, #552]	; 13cc0 <boolean_binary_operator_is_read_properly@@Base+0x518>
   13a94:	add	r1, pc, r1
   13a98:	ldr	r2, [pc, #548]	; 13cc4 <boolean_binary_operator_is_read_properly@@Base+0x51c>
   13a9c:	add	r2, pc, r2
   13aa0:	ldr	r3, [pc, #544]	; 13cc8 <boolean_binary_operator_is_read_properly@@Base+0x520>
   13aa4:	add	r3, pc, r3
   13aa8:	ldr	ip, [r0]
   13aac:	ldr	lr, [r0, #4]
   13ab0:	adds	ip, ip, #1
   13ab4:	adc	lr, lr, #0
   13ab8:	str	ip, [r0]
   13abc:	str	lr, [r0, #4]
   13ac0:	mov	r0, r1
   13ac4:	mov	r1, r2
   13ac8:	movw	r2, #203	; 0xcb
   13acc:	bl	12010 <__assert_fail@plt>
   13ad0:	ldr	r0, [sp, #24]
   13ad4:	ldr	r1, [pc, #500]	; 13cd0 <boolean_binary_operator_is_read_properly@@Base+0x528>
   13ad8:	add	r1, pc, r1
   13adc:	add	r2, r1, #80	; 0x50
   13ae0:	add	r1, r1, #88	; 0x58
   13ae4:	ldr	r3, [r0]
   13ae8:	ldr	ip, [r0, #4]
   13aec:	adds	r3, r3, #1
   13af0:	adc	ip, ip, #0
   13af4:	str	r3, [r0]
   13af8:	str	ip, [r0, #4]
   13afc:	ldr	r0, [fp, #-28]	; 0xffffffe4
   13b00:	ldr	r0, [r0, #16]
   13b04:	cmp	r0, #1
   13b08:	str	r2, [sp, #20]
   13b0c:	str	r1, [sp, #16]
   13b10:	bne	13b44 <boolean_binary_operator_is_read_properly@@Base+0x39c>
   13b14:	ldr	r0, [sp, #20]
   13b18:	ldr	r1, [pc, #448]	; 13ce0 <boolean_binary_operator_is_read_properly@@Base+0x538>
   13b1c:	add	r1, pc, r1
   13b20:	add	r1, r1, #96	; 0x60
   13b24:	ldr	r2, [r0]
   13b28:	ldr	r3, [r0, #4]
   13b2c:	adds	r2, r2, #1
   13b30:	adc	r3, r3, #0
   13b34:	str	r2, [r0]
   13b38:	str	r3, [r0, #4]
   13b3c:	str	r1, [sp, #12]
   13b40:	b	13b88 <boolean_binary_operator_is_read_properly@@Base+0x3e0>
   13b44:	ldr	r0, [sp, #16]
   13b48:	ldr	r1, [pc, #388]	; 13cd4 <boolean_binary_operator_is_read_properly@@Base+0x52c>
   13b4c:	add	r1, pc, r1
   13b50:	ldr	r2, [pc, #384]	; 13cd8 <boolean_binary_operator_is_read_properly@@Base+0x530>
   13b54:	add	r2, pc, r2
   13b58:	ldr	r3, [pc, #380]	; 13cdc <boolean_binary_operator_is_read_properly@@Base+0x534>
   13b5c:	add	r3, pc, r3
   13b60:	ldr	ip, [r0]
   13b64:	ldr	lr, [r0, #4]
   13b68:	adds	ip, ip, #1
   13b6c:	adc	lr, lr, #0
   13b70:	str	ip, [r0]
   13b74:	str	lr, [r0, #4]
   13b78:	mov	r0, r1
   13b7c:	mov	r1, r2
   13b80:	movw	r2, #204	; 0xcc
   13b84:	bl	12010 <__assert_fail@plt>
   13b88:	ldr	r0, [sp, #12]
   13b8c:	ldr	r1, [pc, #336]	; 13ce4 <boolean_binary_operator_is_read_properly@@Base+0x53c>
   13b90:	add	r1, pc, r1
   13b94:	add	r2, r1, #104	; 0x68
   13b98:	add	r1, r1, #112	; 0x70
   13b9c:	ldr	r3, [r0]
   13ba0:	ldr	ip, [r0, #4]
   13ba4:	adds	r3, r3, #1
   13ba8:	adc	ip, ip, #0
   13bac:	str	r3, [r0]
   13bb0:	str	ip, [r0, #4]
   13bb4:	ldr	r0, [fp, #-28]	; 0xffffffe4
   13bb8:	ldr	r0, [r0, #12]
   13bbc:	ldr	r0, [r0]
   13bc0:	cmp	r0, #1
   13bc4:	str	r2, [sp, #8]
   13bc8:	str	r1, [sp, #4]
   13bcc:	bne	13c00 <boolean_binary_operator_is_read_properly@@Base+0x458>
   13bd0:	ldr	r0, [sp, #8]
   13bd4:	ldr	r1, [pc, #280]	; 13cf4 <boolean_binary_operator_is_read_properly@@Base+0x54c>
   13bd8:	add	r1, pc, r1
   13bdc:	add	r1, r1, #120	; 0x78
   13be0:	ldr	r2, [r0]
   13be4:	ldr	r3, [r0, #4]
   13be8:	adds	r2, r2, #1
   13bec:	adc	r3, r3, #0
   13bf0:	str	r2, [r0]
   13bf4:	str	r3, [r0, #4]
   13bf8:	str	r1, [sp]
   13bfc:	b	13c44 <boolean_binary_operator_is_read_properly@@Base+0x49c>
   13c00:	ldr	r0, [sp, #4]
   13c04:	ldr	r1, [pc, #220]	; 13ce8 <boolean_binary_operator_is_read_properly@@Base+0x540>
   13c08:	add	r1, pc, r1
   13c0c:	ldr	r2, [pc, #216]	; 13cec <boolean_binary_operator_is_read_properly@@Base+0x544>
   13c10:	add	r2, pc, r2
   13c14:	ldr	r3, [pc, #212]	; 13cf0 <boolean_binary_operator_is_read_properly@@Base+0x548>
   13c18:	add	r3, pc, r3
   13c1c:	ldr	ip, [r0]
   13c20:	ldr	lr, [r0, #4]
   13c24:	adds	ip, ip, #1
   13c28:	adc	lr, lr, #0
   13c2c:	str	ip, [r0]
   13c30:	str	lr, [r0, #4]
   13c34:	mov	r0, r1
   13c38:	mov	r1, r2
   13c3c:	movw	r2, #205	; 0xcd
   13c40:	bl	12010 <__assert_fail@plt>
   13c44:	ldr	r0, [sp]
   13c48:	ldr	r1, [r0]
   13c4c:	ldr	r2, [r0, #4]
   13c50:	adds	r1, r1, #1
   13c54:	adc	r2, r2, #0
   13c58:	str	r1, [r0]
   13c5c:	str	r2, [r0, #4]
   13c60:	ldr	r0, [pc, #144]	; 13cf8 <boolean_binary_operator_is_read_properly@@Base+0x550>
   13c64:	add	r0, pc, r0
   13c68:	ldr	r1, [r0, #128]	; 0x80
   13c6c:	ldr	r2, [r0, #132]	; 0x84
   13c70:	adds	r1, r1, #1
   13c74:	adc	r2, r2, #0
   13c78:	str	r1, [r0, #128]	; 0x80
   13c7c:	str	r2, [r0, #132]	; 0x84
   13c80:	mov	sp, fp
   13c84:	pop	{fp, pc}
   13c88:	muleq	r1, r0, fp
   13c8c:	muleq	r1, r4, sl
   13c90:	andeq	sp, r1, r0, lsl #16
   13c94:	andeq	sp, r1, r0, lsr r8
   13c98:	andeq	fp, r0, r1, asr r0
   13c9c:	andeq	sl, r0, r2, asr #29
   13ca0:	andeq	fp, r0, fp, asr r0
   13ca4:	andeq	sp, r1, r0, ror #20
   13ca8:	andeq	sp, r1, ip, ror #19
   13cac:	andeq	sl, r0, ip, lsr pc
   13cb0:	andeq	sl, r0, sl, lsl #28
   13cb4:	andeq	sl, r0, r3, lsr #31
   13cb8:	andeq	sp, r1, r8, lsr #19
   13cbc:	andeq	sp, r1, r4, lsr r9
   13cc0:	andeq	sl, r0, pc, lsl pc
   13cc4:	andeq	sl, r0, r6, asr #26
   13cc8:	ldrdeq	sl, [r0], -pc	; <UNPREDICTABLE>
   13ccc:	andeq	sp, r1, r4, ror #17
   13cd0:	andeq	sp, r1, r0, ror r8
   13cd4:	andeq	sl, r0, r2, lsl #29
   13cd8:	andeq	sl, r0, lr, lsl #25
   13cdc:	andeq	sl, r0, r7, lsr #28
   13ce0:	andeq	sp, r1, ip, lsr #16
   13ce4:			; <UNDEFINED> instruction: 0x0001d7b8
   13ce8:	ldrdeq	sl, [r0], -pc	; <UNPREDICTABLE>
   13cec:	ldrdeq	sl, [r0], -r2
   13cf0:	andeq	sl, r0, fp, ror #26
   13cf4:	andeq	sp, r1, r0, ror r7
   13cf8:	andeq	sp, r1, r4, ror #13

00013cfc <boolean_unary_operator_is_read_properly@@Base>:
   13cfc:	push	{fp, lr}
   13d00:	mov	fp, sp
   13d04:	sub	sp, sp, #96	; 0x60
   13d08:	ldr	r0, [pc, #1184]	; 141b0 <boolean_unary_operator_is_read_properly@@Base+0x4b4>
   13d0c:	add	r0, pc, r0
   13d10:	str	r0, [fp, #-36]	; 0xffffffdc
   13d14:	ldr	r0, [fp, #-36]	; 0xffffffdc
   13d18:	ldr	r1, [r0]
   13d1c:	ldr	r2, [r0, #4]
   13d20:	adds	r1, r1, #1
   13d24:	adc	r2, r2, #0
   13d28:	str	r1, [r0]
   13d2c:	str	r2, [r0, #4]
   13d30:	movw	r0, #0
   13d34:	str	r0, [fp, #-24]	; 0xffffffe8
   13d38:	str	r0, [fp, #-28]	; 0xffffffe4
   13d3c:	movw	r0, #2
   13d40:	bl	11ee4 <malloc@plt>
   13d44:	str	r0, [fp, #-32]	; 0xffffffe0
   13d48:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13d4c:	movw	r1, #33	; 0x21
   13d50:	strb	r1, [r0]
   13d54:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13d58:	movw	r1, #0
   13d5c:	strb	r1, [r0, #1]
   13d60:	sub	r0, fp, #16
   13d64:	sub	r1, fp, #12
   13d68:	bl	198c0 <init_grammar@@Base>
   13d6c:	movw	r0, #8
   13d70:	bl	11ee4 <malloc@plt>
   13d74:	str	r0, [fp, #-20]	; 0xffffffec
   13d78:	movw	r0, #8
   13d7c:	bl	11ee4 <malloc@plt>
   13d80:	ldr	r1, [fp, #-20]	; 0xffffffec
   13d84:	str	r0, [r1]
   13d88:	ldr	r0, [fp, #-20]	; 0xffffffec
   13d8c:	ldr	r0, [r0]
   13d90:	ldr	r1, [fp, #-32]	; 0xffffffe0
   13d94:	bl	17370 <init_token_boolean_op@@Base>
   13d98:	movw	r0, #8
   13d9c:	bl	11ee4 <malloc@plt>
   13da0:	ldr	r1, [fp, #-20]	; 0xffffffec
   13da4:	str	r0, [r1, #4]
   13da8:	ldr	r0, [fp, #-20]	; 0xffffffec
   13dac:	ldr	r0, [r0, #4]
   13db0:	movw	r1, #1
   13db4:	bl	16e44 <init_token_int_value@@Base>
   13db8:	ldr	r0, [pc, #1020]	; 141bc <boolean_unary_operator_is_read_properly@@Base+0x4c0>
   13dbc:	ldr	r0, [pc, r0]
   13dc0:	ldr	r1, [fp, #-20]	; 0xffffffec
   13dc4:	str	r1, [r0, #228]	; 0xe4
   13dc8:	movw	r1, #2
   13dcc:	str	r1, [r0, #220]	; 0xdc
   13dd0:	sub	r0, fp, #16
   13dd4:	bl	1b000 <read_boolean_unary_expression@@Base>
   13dd8:	ldr	r1, [pc, #980]	; 141b4 <boolean_unary_operator_is_read_properly@@Base+0x4b8>
   13ddc:	add	r1, pc, r1
   13de0:	add	r2, r1, #8
   13de4:	add	r1, r1, #16
   13de8:	ldr	r3, [pc, #968]	; 141b8 <boolean_unary_operator_is_read_properly@@Base+0x4bc>
   13dec:	ldr	r3, [pc, r3]
   13df0:	str	r0, [fp, #-24]	; 0xffffffe8
   13df4:	ldr	r0, [r3, #204]	; 0xcc
   13df8:	cmp	r0, #2
   13dfc:	str	r2, [fp, #-40]	; 0xffffffd8
   13e00:	str	r1, [fp, #-44]	; 0xffffffd4
   13e04:	bne	13e38 <boolean_unary_operator_is_read_properly@@Base+0x13c>
   13e08:	ldr	r0, [fp, #-40]	; 0xffffffd8
   13e0c:	ldr	r1, [pc, #952]	; 141cc <boolean_unary_operator_is_read_properly@@Base+0x4d0>
   13e10:	add	r1, pc, r1
   13e14:	add	r1, r1, #24
   13e18:	ldr	r2, [r0]
   13e1c:	ldr	r3, [r0, #4]
   13e20:	adds	r2, r2, #1
   13e24:	adc	r3, r3, #0
   13e28:	str	r2, [r0]
   13e2c:	str	r3, [r0, #4]
   13e30:	str	r1, [sp, #48]	; 0x30
   13e34:	b	13e7c <boolean_unary_operator_is_read_properly@@Base+0x180>
   13e38:	ldr	r0, [fp, #-44]	; 0xffffffd4
   13e3c:	ldr	r1, [pc, #892]	; 141c0 <boolean_unary_operator_is_read_properly@@Base+0x4c4>
   13e40:	add	r1, pc, r1
   13e44:	ldr	r2, [pc, #888]	; 141c4 <boolean_unary_operator_is_read_properly@@Base+0x4c8>
   13e48:	add	r2, pc, r2
   13e4c:	ldr	r3, [pc, #884]	; 141c8 <boolean_unary_operator_is_read_properly@@Base+0x4cc>
   13e50:	add	r3, pc, r3
   13e54:	ldr	ip, [r0]
   13e58:	ldr	lr, [r0, #4]
   13e5c:	adds	ip, ip, #1
   13e60:	adc	lr, lr, #0
   13e64:	str	ip, [r0]
   13e68:	str	lr, [r0, #4]
   13e6c:	mov	r0, r1
   13e70:	mov	r1, r2
   13e74:	movw	r2, #235	; 0xeb
   13e78:	bl	12010 <__assert_fail@plt>
   13e7c:	ldr	r0, [sp, #48]	; 0x30
   13e80:	ldr	r1, [pc, #840]	; 141d0 <boolean_unary_operator_is_read_properly@@Base+0x4d4>
   13e84:	add	r1, pc, r1
   13e88:	add	r2, r1, #32
   13e8c:	add	r1, r1, #40	; 0x28
   13e90:	ldr	r3, [r0]
   13e94:	ldr	ip, [r0, #4]
   13e98:	adds	r3, r3, #1
   13e9c:	adc	ip, ip, #0
   13ea0:	str	r3, [r0]
   13ea4:	str	ip, [r0, #4]
   13ea8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13eac:	ldr	r0, [r0]
   13eb0:	cmp	r0, #5
   13eb4:	str	r2, [sp, #44]	; 0x2c
   13eb8:	str	r1, [sp, #40]	; 0x28
   13ebc:	bne	13ef0 <boolean_unary_operator_is_read_properly@@Base+0x1f4>
   13ec0:	ldr	r0, [sp, #44]	; 0x2c
   13ec4:	ldr	r1, [pc, #788]	; 141e0 <boolean_unary_operator_is_read_properly@@Base+0x4e4>
   13ec8:	add	r1, pc, r1
   13ecc:	add	r1, r1, #48	; 0x30
   13ed0:	ldr	r2, [r0]
   13ed4:	ldr	r3, [r0, #4]
   13ed8:	adds	r2, r2, #1
   13edc:	adc	r3, r3, #0
   13ee0:	str	r2, [r0]
   13ee4:	str	r3, [r0, #4]
   13ee8:	str	r1, [sp, #36]	; 0x24
   13eec:	b	13f34 <boolean_unary_operator_is_read_properly@@Base+0x238>
   13ef0:	ldr	r0, [sp, #40]	; 0x28
   13ef4:	ldr	r1, [pc, #728]	; 141d4 <boolean_unary_operator_is_read_properly@@Base+0x4d8>
   13ef8:	add	r1, pc, r1
   13efc:	ldr	r2, [pc, #724]	; 141d8 <boolean_unary_operator_is_read_properly@@Base+0x4dc>
   13f00:	add	r2, pc, r2
   13f04:	ldr	r3, [pc, #720]	; 141dc <boolean_unary_operator_is_read_properly@@Base+0x4e0>
   13f08:	add	r3, pc, r3
   13f0c:	ldr	ip, [r0]
   13f10:	ldr	lr, [r0, #4]
   13f14:	adds	ip, ip, #1
   13f18:	adc	lr, lr, #0
   13f1c:	str	ip, [r0]
   13f20:	str	lr, [r0, #4]
   13f24:	mov	r0, r1
   13f28:	mov	r1, r2
   13f2c:	movw	r2, #236	; 0xec
   13f30:	bl	12010 <__assert_fail@plt>
   13f34:	ldr	r0, [sp, #36]	; 0x24
   13f38:	ldr	r1, [pc, #676]	; 141e4 <boolean_unary_operator_is_read_properly@@Base+0x4e8>
   13f3c:	add	r1, pc, r1
   13f40:	add	r2, r1, #56	; 0x38
   13f44:	add	r1, r1, #64	; 0x40
   13f48:	ldr	r3, [r0]
   13f4c:	ldr	ip, [r0, #4]
   13f50:	adds	r3, r3, #1
   13f54:	adc	ip, ip, #0
   13f58:	str	r3, [r0]
   13f5c:	str	ip, [r0, #4]
   13f60:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13f64:	str	r0, [fp, #-28]	; 0xffffffe4
   13f68:	ldr	r0, [fp, #-28]	; 0xffffffe4
   13f6c:	ldr	r0, [r0, #8]
   13f70:	ldr	r0, [r0]
   13f74:	cmp	r0, #1
   13f78:	str	r2, [sp, #32]
   13f7c:	str	r1, [sp, #28]
   13f80:	bne	13fb4 <boolean_unary_operator_is_read_properly@@Base+0x2b8>
   13f84:	ldr	r0, [sp, #32]
   13f88:	ldr	r1, [pc, #612]	; 141f4 <boolean_unary_operator_is_read_properly@@Base+0x4f8>
   13f8c:	add	r1, pc, r1
   13f90:	add	r1, r1, #72	; 0x48
   13f94:	ldr	r2, [r0]
   13f98:	ldr	r3, [r0, #4]
   13f9c:	adds	r2, r2, #1
   13fa0:	adc	r3, r3, #0
   13fa4:	str	r2, [r0]
   13fa8:	str	r3, [r0, #4]
   13fac:	str	r1, [sp, #24]
   13fb0:	b	13ff8 <boolean_unary_operator_is_read_properly@@Base+0x2fc>
   13fb4:	ldr	r0, [sp, #28]
   13fb8:	ldr	r1, [pc, #552]	; 141e8 <boolean_unary_operator_is_read_properly@@Base+0x4ec>
   13fbc:	add	r1, pc, r1
   13fc0:	ldr	r2, [pc, #548]	; 141ec <boolean_unary_operator_is_read_properly@@Base+0x4f0>
   13fc4:	add	r2, pc, r2
   13fc8:	ldr	r3, [pc, #544]	; 141f0 <boolean_unary_operator_is_read_properly@@Base+0x4f4>
   13fcc:	add	r3, pc, r3
   13fd0:	ldr	ip, [r0]
   13fd4:	ldr	lr, [r0, #4]
   13fd8:	adds	ip, ip, #1
   13fdc:	adc	lr, lr, #0
   13fe0:	str	ip, [r0]
   13fe4:	str	lr, [r0, #4]
   13fe8:	mov	r0, r1
   13fec:	mov	r1, r2
   13ff0:	movw	r2, #238	; 0xee
   13ff4:	bl	12010 <__assert_fail@plt>
   13ff8:	ldr	r0, [sp, #24]
   13ffc:	ldr	r1, [pc, #500]	; 141f8 <boolean_unary_operator_is_read_properly@@Base+0x4fc>
   14000:	add	r1, pc, r1
   14004:	add	r2, r1, #80	; 0x50
   14008:	add	r1, r1, #88	; 0x58
   1400c:	ldr	r3, [r0]
   14010:	ldr	ip, [r0, #4]
   14014:	adds	r3, r3, #1
   14018:	adc	ip, ip, #0
   1401c:	str	r3, [r0]
   14020:	str	ip, [r0, #4]
   14024:	ldr	r0, [fp, #-28]	; 0xffffffe4
   14028:	ldr	r0, [r0, #16]
   1402c:	cmp	r0, #8
   14030:	str	r2, [sp, #20]
   14034:	str	r1, [sp, #16]
   14038:	bne	1406c <boolean_unary_operator_is_read_properly@@Base+0x370>
   1403c:	ldr	r0, [sp, #20]
   14040:	ldr	r1, [pc, #448]	; 14208 <boolean_unary_operator_is_read_properly@@Base+0x50c>
   14044:	add	r1, pc, r1
   14048:	add	r1, r1, #96	; 0x60
   1404c:	ldr	r2, [r0]
   14050:	ldr	r3, [r0, #4]
   14054:	adds	r2, r2, #1
   14058:	adc	r3, r3, #0
   1405c:	str	r2, [r0]
   14060:	str	r3, [r0, #4]
   14064:	str	r1, [sp, #12]
   14068:	b	140b0 <boolean_unary_operator_is_read_properly@@Base+0x3b4>
   1406c:	ldr	r0, [sp, #16]
   14070:	ldr	r1, [pc, #388]	; 141fc <boolean_unary_operator_is_read_properly@@Base+0x500>
   14074:	add	r1, pc, r1
   14078:	ldr	r2, [pc, #384]	; 14200 <boolean_unary_operator_is_read_properly@@Base+0x504>
   1407c:	add	r2, pc, r2
   14080:	ldr	r3, [pc, #380]	; 14204 <boolean_unary_operator_is_read_properly@@Base+0x508>
   14084:	add	r3, pc, r3
   14088:	ldr	ip, [r0]
   1408c:	ldr	lr, [r0, #4]
   14090:	adds	ip, ip, #1
   14094:	adc	lr, lr, #0
   14098:	str	ip, [r0]
   1409c:	str	lr, [r0, #4]
   140a0:	mov	r0, r1
   140a4:	mov	r1, r2
   140a8:	movw	r2, #239	; 0xef
   140ac:	bl	12010 <__assert_fail@plt>
   140b0:	ldr	r0, [sp, #12]
   140b4:	ldr	r1, [pc, #336]	; 1420c <boolean_unary_operator_is_read_properly@@Base+0x510>
   140b8:	add	r1, pc, r1
   140bc:	add	r2, r1, #104	; 0x68
   140c0:	add	r1, r1, #112	; 0x70
   140c4:	ldr	r3, [r0]
   140c8:	ldr	ip, [r0, #4]
   140cc:	adds	r3, r3, #1
   140d0:	adc	ip, ip, #0
   140d4:	str	r3, [r0]
   140d8:	str	ip, [r0, #4]
   140dc:	ldr	r0, [fp, #-28]	; 0xffffffe4
   140e0:	ldr	r0, [r0, #12]
   140e4:	movw	r3, #0
   140e8:	cmp	r0, r3
   140ec:	str	r2, [sp, #8]
   140f0:	str	r1, [sp, #4]
   140f4:	bne	14128 <boolean_unary_operator_is_read_properly@@Base+0x42c>
   140f8:	ldr	r0, [sp, #8]
   140fc:	ldr	r1, [pc, #280]	; 1421c <boolean_unary_operator_is_read_properly@@Base+0x520>
   14100:	add	r1, pc, r1
   14104:	add	r1, r1, #120	; 0x78
   14108:	ldr	r2, [r0]
   1410c:	ldr	r3, [r0, #4]
   14110:	adds	r2, r2, #1
   14114:	adc	r3, r3, #0
   14118:	str	r2, [r0]
   1411c:	str	r3, [r0, #4]
   14120:	str	r1, [sp]
   14124:	b	1416c <boolean_unary_operator_is_read_properly@@Base+0x470>
   14128:	ldr	r0, [sp, #4]
   1412c:	ldr	r1, [pc, #220]	; 14210 <boolean_unary_operator_is_read_properly@@Base+0x514>
   14130:	add	r1, pc, r1
   14134:	ldr	r2, [pc, #216]	; 14214 <boolean_unary_operator_is_read_properly@@Base+0x518>
   14138:	add	r2, pc, r2
   1413c:	ldr	r3, [pc, #212]	; 14218 <boolean_unary_operator_is_read_properly@@Base+0x51c>
   14140:	add	r3, pc, r3
   14144:	ldr	ip, [r0]
   14148:	ldr	lr, [r0, #4]
   1414c:	adds	ip, ip, #1
   14150:	adc	lr, lr, #0
   14154:	str	ip, [r0]
   14158:	str	lr, [r0, #4]
   1415c:	mov	r0, r1
   14160:	mov	r1, r2
   14164:	movw	r2, #240	; 0xf0
   14168:	bl	12010 <__assert_fail@plt>
   1416c:	ldr	r0, [sp]
   14170:	ldr	r1, [r0]
   14174:	ldr	r2, [r0, #4]
   14178:	adds	r1, r1, #1
   1417c:	adc	r2, r2, #0
   14180:	str	r1, [r0]
   14184:	str	r2, [r0, #4]
   14188:	ldr	r0, [pc, #144]	; 14220 <boolean_unary_operator_is_read_properly@@Base+0x524>
   1418c:	add	r0, pc, r0
   14190:	ldr	r1, [r0, #128]	; 0x80
   14194:	ldr	r2, [r0, #132]	; 0x84
   14198:	adds	r1, r1, #1
   1419c:	adc	r2, r2, #0
   141a0:	str	r1, [r0, #128]	; 0x80
   141a4:	str	r2, [r0, #132]	; 0x84
   141a8:	mov	sp, fp
   141ac:	pop	{fp, pc}
   141b0:	andeq	sp, r1, ip, asr #13
   141b4:	strdeq	sp, [r1], -ip
   141b8:	ldrdeq	sp, [r1], -r8
   141bc:	andeq	sp, r1, r8, lsl #6
   141c0:	andeq	sl, r0, r6, lsr #20
   141c4:	muleq	r0, sl, r9
   141c8:			; <UNDEFINED> instruction: 0x0000abb3
   141cc:	andeq	sp, r1, r8, asr #11
   141d0:	andeq	sp, r1, r4, asr r5
   141d4:	andeq	sl, r0, r4, lsl sl
   141d8:	andeq	sl, r0, r2, ror #17
   141dc:	strdeq	sl, [r0], -fp
   141e0:	andeq	sp, r1, r0, lsl r5
   141e4:	muleq	r1, ip, r4
   141e8:	strdeq	sl, [r0], -r7
   141ec:	andeq	sl, r0, lr, lsl r8
   141f0:	andeq	sl, r0, r7, lsr sl
   141f4:	andeq	sp, r1, ip, asr #8
   141f8:	ldrdeq	sp, [r1], -r8
   141fc:			; <UNDEFINED> instruction: 0x0000a9be
   14200:	andeq	sl, r0, r6, ror #14
   14204:	andeq	sl, r0, pc, ror r9
   14208:	muleq	r1, r4, r3
   1420c:	andeq	sp, r1, r0, lsr #6
   14210:	andeq	sl, r0, r6, lsl r9
   14214:	andeq	sl, r0, sl, lsr #13
   14218:	andeq	sl, r0, r3, asr #17
   1421c:	ldrdeq	sp, [r1], -r8
   14220:	andeq	sp, r1, ip, asr #4

00014224 <if_statement_only@@Base>:
   14224:	push	{fp, lr}
   14228:	mov	fp, sp
   1422c:	sub	sp, sp, #72	; 0x48
   14230:	ldr	r0, [pc, #1012]	; 1462c <if_statement_only@@Base+0x408>
   14234:	add	r0, pc, r0
   14238:	str	r0, [fp, #-32]	; 0xffffffe0
   1423c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14240:	ldr	r1, [r0]
   14244:	ldr	r2, [r0, #4]
   14248:	adds	r1, r1, #1
   1424c:	adc	r2, r2, #0
   14250:	str	r1, [r0]
   14254:	str	r2, [r0, #4]
   14258:	movw	r0, #0
   1425c:	str	r0, [fp, #-24]	; 0xffffffe8
   14260:	sub	r0, fp, #16
   14264:	sub	r1, fp, #12
   14268:	bl	198c0 <init_grammar@@Base>
   1426c:	movw	r0, #3
   14270:	bl	11ee4 <malloc@plt>
   14274:	str	r0, [fp, #-28]	; 0xffffffe4
   14278:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1427c:	movw	r1, #33	; 0x21
   14280:	strb	r1, [r0]
   14284:	ldr	r0, [fp, #-28]	; 0xffffffe4
   14288:	movw	r1, #61	; 0x3d
   1428c:	strb	r1, [r0, #1]
   14290:	ldr	r0, [fp, #-28]	; 0xffffffe4
   14294:	movw	r1, #0
   14298:	strb	r1, [r0, #2]
   1429c:	movw	r0, #36	; 0x24
   142a0:	bl	11ee4 <malloc@plt>
   142a4:	str	r0, [fp, #-20]	; 0xffffffec
   142a8:	movw	r0, #4
   142ac:	bl	11ee4 <malloc@plt>
   142b0:	ldr	r1, [fp, #-20]	; 0xffffffec
   142b4:	str	r0, [r1]
   142b8:	ldr	r0, [fp, #-20]	; 0xffffffec
   142bc:	ldr	r0, [r0]
   142c0:	bl	16f5c <init_token_opar@@Base>
   142c4:	movw	r0, #8
   142c8:	bl	11ee4 <malloc@plt>
   142cc:	ldr	r1, [fp, #-20]	; 0xffffffec
   142d0:	str	r0, [r1, #4]
   142d4:	ldr	r0, [fp, #-20]	; 0xffffffec
   142d8:	ldr	r0, [r0, #4]
   142dc:	movw	r1, #1
   142e0:	bl	16e44 <init_token_int_value@@Base>
   142e4:	movw	r0, #8
   142e8:	bl	11ee4 <malloc@plt>
   142ec:	ldr	r1, [fp, #-20]	; 0xffffffec
   142f0:	str	r0, [r1, #8]
   142f4:	ldr	r0, [fp, #-20]	; 0xffffffec
   142f8:	ldr	r0, [r0, #8]
   142fc:	movw	r1, #1
   14300:	bl	16e44 <init_token_int_value@@Base>
   14304:	movw	r0, #8
   14308:	bl	11ee4 <malloc@plt>
   1430c:	ldr	r1, [fp, #-20]	; 0xffffffec
   14310:	str	r0, [r1, #12]
   14314:	ldr	r0, [fp, #-20]	; 0xffffffec
   14318:	ldr	r0, [r0, #12]
   1431c:	ldr	r1, [fp, #-28]	; 0xffffffe4
   14320:	bl	17370 <init_token_boolean_op@@Base>
   14324:	movw	r0, #8
   14328:	bl	11ee4 <malloc@plt>
   1432c:	ldr	r1, [fp, #-20]	; 0xffffffec
   14330:	str	r0, [r1, #16]
   14334:	ldr	r0, [fp, #-20]	; 0xffffffec
   14338:	ldr	r0, [r0, #16]
   1433c:	movw	r1, #1
   14340:	bl	16e44 <init_token_int_value@@Base>
   14344:	movw	r0, #4
   14348:	bl	11ee4 <malloc@plt>
   1434c:	ldr	r1, [fp, #-20]	; 0xffffffec
   14350:	str	r0, [r1, #20]
   14354:	ldr	r0, [fp, #-20]	; 0xffffffec
   14358:	ldr	r0, [r0, #20]
   1435c:	bl	16fd0 <init_token_cpar@@Base>
   14360:	movw	r0, #4
   14364:	bl	11ee4 <malloc@plt>
   14368:	ldr	r1, [fp, #-20]	; 0xffffffec
   1436c:	str	r0, [r1, #24]
   14370:	ldr	r0, [fp, #-20]	; 0xffffffec
   14374:	ldr	r0, [r0, #24]
   14378:	bl	17044 <init_token_obra@@Base>
   1437c:	movw	r0, #4
   14380:	bl	11ee4 <malloc@plt>
   14384:	ldr	r1, [fp, #-20]	; 0xffffffec
   14388:	str	r0, [r1, #28]
   1438c:	ldr	r0, [fp, #-20]	; 0xffffffec
   14390:	ldr	r0, [r0, #28]
   14394:	bl	170b8 <init_token_cbra@@Base>
   14398:	movw	r0, #4
   1439c:	bl	11ee4 <malloc@plt>
   143a0:	ldr	r1, [fp, #-20]	; 0xffffffec
   143a4:	str	r0, [r1, #32]
   143a8:	ldr	r0, [fp, #-20]	; 0xffffffec
   143ac:	ldr	r0, [r0, #32]
   143b0:	bl	17214 <init_token_eof@@Base>
   143b4:	ldr	r0, [pc, #636]	; 14638 <if_statement_only@@Base+0x414>
   143b8:	ldr	r0, [pc, r0]
   143bc:	ldr	r1, [fp, #-20]	; 0xffffffec
   143c0:	str	r1, [r0, #228]	; 0xe4
   143c4:	movw	r1, #9
   143c8:	str	r1, [r0, #220]	; 0xdc
   143cc:	sub	r0, fp, #16
   143d0:	bl	1a40c <read_if_statement@@Base>
   143d4:	ldr	r1, [pc, #596]	; 14630 <if_statement_only@@Base+0x40c>
   143d8:	add	r1, pc, r1
   143dc:	add	r2, r1, #8
   143e0:	add	r1, r1, #16
   143e4:	ldr	r3, [pc, #584]	; 14634 <if_statement_only@@Base+0x410>
   143e8:	ldr	r3, [pc, r3]
   143ec:	str	r0, [fp, #-24]	; 0xffffffe8
   143f0:	ldr	r0, [r3, #204]	; 0xcc
   143f4:	cmp	r0, #9
   143f8:	str	r2, [sp, #36]	; 0x24
   143fc:	str	r1, [sp, #32]
   14400:	bne	14434 <if_statement_only@@Base+0x210>
   14404:	ldr	r0, [sp, #36]	; 0x24
   14408:	ldr	r1, [pc, #568]	; 14648 <if_statement_only@@Base+0x424>
   1440c:	add	r1, pc, r1
   14410:	add	r1, r1, #24
   14414:	ldr	r2, [r0]
   14418:	ldr	r3, [r0, #4]
   1441c:	adds	r2, r2, #1
   14420:	adc	r3, r3, #0
   14424:	str	r2, [r0]
   14428:	str	r3, [r0, #4]
   1442c:	str	r1, [sp, #28]
   14430:	b	14478 <if_statement_only@@Base+0x254>
   14434:	ldr	r0, [sp, #32]
   14438:	ldr	r1, [pc, #508]	; 1463c <if_statement_only@@Base+0x418>
   1443c:	add	r1, pc, r1
   14440:	ldr	r2, [pc, #504]	; 14640 <if_statement_only@@Base+0x41c>
   14444:	add	r2, pc, r2
   14448:	ldr	r3, [pc, #500]	; 14644 <if_statement_only@@Base+0x420>
   1444c:	add	r3, pc, r3
   14450:	ldr	ip, [r0]
   14454:	ldr	lr, [r0, #4]
   14458:	adds	ip, ip, #1
   1445c:	adc	lr, lr, #0
   14460:	str	ip, [r0]
   14464:	str	lr, [r0, #4]
   14468:	mov	r0, r1
   1446c:	mov	r1, r2
   14470:	movw	r2, #283	; 0x11b
   14474:	bl	12010 <__assert_fail@plt>
   14478:	ldr	r0, [sp, #28]
   1447c:	ldr	r1, [pc, #456]	; 1464c <if_statement_only@@Base+0x428>
   14480:	add	r1, pc, r1
   14484:	add	r2, r1, #32
   14488:	add	r1, r1, #40	; 0x28
   1448c:	ldr	r3, [r0]
   14490:	ldr	ip, [r0, #4]
   14494:	adds	r3, r3, #1
   14498:	adc	ip, ip, #0
   1449c:	str	r3, [r0]
   144a0:	str	ip, [r0, #4]
   144a4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   144a8:	movw	r3, #0
   144ac:	cmp	r0, r3
   144b0:	str	r2, [sp, #24]
   144b4:	str	r1, [sp, #20]
   144b8:	beq	144ec <if_statement_only@@Base+0x2c8>
   144bc:	ldr	r0, [sp, #24]
   144c0:	ldr	r1, [pc, #404]	; 1465c <if_statement_only@@Base+0x438>
   144c4:	add	r1, pc, r1
   144c8:	add	r1, r1, #48	; 0x30
   144cc:	ldr	r2, [r0]
   144d0:	ldr	r3, [r0, #4]
   144d4:	adds	r2, r2, #1
   144d8:	adc	r3, r3, #0
   144dc:	str	r2, [r0]
   144e0:	str	r3, [r0, #4]
   144e4:	str	r1, [sp, #16]
   144e8:	b	14530 <if_statement_only@@Base+0x30c>
   144ec:	ldr	r0, [sp, #20]
   144f0:	ldr	r1, [pc, #344]	; 14650 <if_statement_only@@Base+0x42c>
   144f4:	add	r1, pc, r1
   144f8:	ldr	r2, [pc, #340]	; 14654 <if_statement_only@@Base+0x430>
   144fc:	add	r2, pc, r2
   14500:	ldr	r3, [pc, #336]	; 14658 <if_statement_only@@Base+0x434>
   14504:	add	r3, pc, r3
   14508:	ldr	ip, [r0]
   1450c:	ldr	lr, [r0, #4]
   14510:	adds	ip, ip, #1
   14514:	adc	lr, lr, #0
   14518:	str	ip, [r0]
   1451c:	str	lr, [r0, #4]
   14520:	mov	r0, r1
   14524:	mov	r1, r2
   14528:	movw	r2, #284	; 0x11c
   1452c:	bl	12010 <__assert_fail@plt>
   14530:	ldr	r0, [sp, #16]
   14534:	ldr	r1, [pc, #292]	; 14660 <if_statement_only@@Base+0x43c>
   14538:	add	r1, pc, r1
   1453c:	add	r2, r1, #56	; 0x38
   14540:	add	r1, r1, #64	; 0x40
   14544:	ldr	r3, [r0]
   14548:	ldr	ip, [r0, #4]
   1454c:	adds	r3, r3, #1
   14550:	adc	ip, ip, #0
   14554:	str	r3, [r0]
   14558:	str	ip, [r0, #4]
   1455c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14560:	ldr	r0, [r0]
   14564:	cmp	r0, #4
   14568:	str	r2, [sp, #12]
   1456c:	str	r1, [sp, #8]
   14570:	bne	145a4 <if_statement_only@@Base+0x380>
   14574:	ldr	r0, [sp, #12]
   14578:	ldr	r1, [pc, #240]	; 14670 <if_statement_only@@Base+0x44c>
   1457c:	add	r1, pc, r1
   14580:	add	r1, r1, #72	; 0x48
   14584:	ldr	r2, [r0]
   14588:	ldr	r3, [r0, #4]
   1458c:	adds	r2, r2, #1
   14590:	adc	r3, r3, #0
   14594:	str	r2, [r0]
   14598:	str	r3, [r0, #4]
   1459c:	str	r1, [sp, #4]
   145a0:	b	145e8 <if_statement_only@@Base+0x3c4>
   145a4:	ldr	r0, [sp, #8]
   145a8:	ldr	r1, [pc, #180]	; 14664 <if_statement_only@@Base+0x440>
   145ac:	add	r1, pc, r1
   145b0:	ldr	r2, [pc, #176]	; 14668 <if_statement_only@@Base+0x444>
   145b4:	add	r2, pc, r2
   145b8:	ldr	r3, [pc, #172]	; 1466c <if_statement_only@@Base+0x448>
   145bc:	add	r3, pc, r3
   145c0:	ldr	ip, [r0]
   145c4:	ldr	lr, [r0, #4]
   145c8:	adds	ip, ip, #1
   145cc:	adc	lr, lr, #0
   145d0:	str	ip, [r0]
   145d4:	str	lr, [r0, #4]
   145d8:	mov	r0, r1
   145dc:	mov	r1, r2
   145e0:	movw	r2, #285	; 0x11d
   145e4:	bl	12010 <__assert_fail@plt>
   145e8:	ldr	r0, [sp, #4]
   145ec:	ldr	r1, [r0]
   145f0:	ldr	r2, [r0, #4]
   145f4:	adds	r1, r1, #1
   145f8:	adc	r2, r2, #0
   145fc:	str	r1, [r0]
   14600:	str	r2, [r0, #4]
   14604:	ldr	r0, [pc, #104]	; 14674 <if_statement_only@@Base+0x450>
   14608:	add	r0, pc, r0
   1460c:	ldr	r1, [r0, #80]	; 0x50
   14610:	ldr	r2, [r0, #84]	; 0x54
   14614:	adds	r1, r1, #1
   14618:	adc	r2, r2, #0
   1461c:	str	r1, [r0, #80]	; 0x50
   14620:	str	r2, [r0, #84]	; 0x54
   14624:	mov	sp, fp
   14628:	pop	{fp, pc}
   1462c:	andeq	sp, r1, r4, lsr r2
   14630:	muleq	r1, r0, r0
   14634:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   14638:	andeq	ip, r1, ip, lsl #26
   1463c:	andeq	sl, r0, pc, lsl r6
   14640:	muleq	r0, lr, r3
   14644:	andeq	sl, r0, r9, lsr #12
   14648:	andeq	sp, r1, ip, asr r0
   1464c:	andeq	ip, r1, r8, ror #31
   14650:	muleq	r0, sl, r5
   14654:	andeq	sl, r0, r6, ror #5
   14658:	andeq	sl, r0, r1, ror r5
   1465c:	andeq	ip, r1, r4, lsr #31
   14660:	andeq	ip, r1, r0, lsr pc
   14664:	andeq	sl, r0, lr, ror #9
   14668:	andeq	sl, r0, lr, lsr #4
   1466c:			; <UNDEFINED> instruction: 0x0000a4b9
   14670:	andeq	ip, r1, ip, ror #29
   14674:	andeq	ip, r1, r0, ror #28

00014678 <if_else_statements@@Base>:
   14678:	push	{fp, lr}
   1467c:	mov	fp, sp
   14680:	sub	sp, sp, #72	; 0x48
   14684:	ldr	r0, [pc, #1068]	; 14ab8 <if_else_statements@@Base+0x440>
   14688:	add	r0, pc, r0
   1468c:	str	r0, [fp, #-32]	; 0xffffffe0
   14690:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14694:	ldr	r1, [r0]
   14698:	ldr	r2, [r0, #4]
   1469c:	adds	r1, r1, #1
   146a0:	adc	r2, r2, #0
   146a4:	str	r1, [r0]
   146a8:	str	r2, [r0, #4]
   146ac:	movw	r0, #0
   146b0:	str	r0, [fp, #-24]	; 0xffffffe8
   146b4:	sub	r0, fp, #16
   146b8:	sub	r1, fp, #12
   146bc:	bl	198c0 <init_grammar@@Base>
   146c0:	movw	r0, #3
   146c4:	bl	11ee4 <malloc@plt>
   146c8:	str	r0, [fp, #-28]	; 0xffffffe4
   146cc:	ldr	r0, [fp, #-28]	; 0xffffffe4
   146d0:	movw	r1, #33	; 0x21
   146d4:	strb	r1, [r0]
   146d8:	ldr	r0, [fp, #-28]	; 0xffffffe4
   146dc:	movw	r1, #61	; 0x3d
   146e0:	strb	r1, [r0, #1]
   146e4:	ldr	r0, [fp, #-28]	; 0xffffffe4
   146e8:	movw	r1, #0
   146ec:	strb	r1, [r0, #2]
   146f0:	movw	r0, #44	; 0x2c
   146f4:	bl	11ee4 <malloc@plt>
   146f8:	str	r0, [fp, #-20]	; 0xffffffec
   146fc:	movw	r0, #4
   14700:	bl	11ee4 <malloc@plt>
   14704:	ldr	r1, [fp, #-20]	; 0xffffffec
   14708:	str	r0, [r1]
   1470c:	ldr	r0, [fp, #-20]	; 0xffffffec
   14710:	ldr	r0, [r0]
   14714:	bl	16f5c <init_token_opar@@Base>
   14718:	movw	r0, #8
   1471c:	bl	11ee4 <malloc@plt>
   14720:	ldr	r1, [fp, #-20]	; 0xffffffec
   14724:	str	r0, [r1, #4]
   14728:	ldr	r0, [fp, #-20]	; 0xffffffec
   1472c:	ldr	r0, [r0, #4]
   14730:	movw	r1, #1
   14734:	bl	16e44 <init_token_int_value@@Base>
   14738:	movw	r0, #8
   1473c:	bl	11ee4 <malloc@plt>
   14740:	ldr	r1, [fp, #-20]	; 0xffffffec
   14744:	str	r0, [r1, #8]
   14748:	ldr	r0, [fp, #-20]	; 0xffffffec
   1474c:	ldr	r0, [r0, #8]
   14750:	movw	r1, #1
   14754:	bl	16e44 <init_token_int_value@@Base>
   14758:	movw	r0, #8
   1475c:	bl	11ee4 <malloc@plt>
   14760:	ldr	r1, [fp, #-20]	; 0xffffffec
   14764:	str	r0, [r1, #12]
   14768:	ldr	r0, [fp, #-20]	; 0xffffffec
   1476c:	ldr	r0, [r0, #12]
   14770:	ldr	r1, [fp, #-28]	; 0xffffffe4
   14774:	bl	17370 <init_token_boolean_op@@Base>
   14778:	movw	r0, #8
   1477c:	bl	11ee4 <malloc@plt>
   14780:	ldr	r1, [fp, #-20]	; 0xffffffec
   14784:	str	r0, [r1, #16]
   14788:	ldr	r0, [fp, #-20]	; 0xffffffec
   1478c:	ldr	r0, [r0, #16]
   14790:	movw	r1, #1
   14794:	bl	16e44 <init_token_int_value@@Base>
   14798:	movw	r0, #4
   1479c:	bl	11ee4 <malloc@plt>
   147a0:	ldr	r1, [fp, #-20]	; 0xffffffec
   147a4:	str	r0, [r1, #20]
   147a8:	ldr	r0, [fp, #-20]	; 0xffffffec
   147ac:	ldr	r0, [r0, #20]
   147b0:	bl	16fd0 <init_token_cpar@@Base>
   147b4:	movw	r0, #4
   147b8:	bl	11ee4 <malloc@plt>
   147bc:	ldr	r1, [fp, #-20]	; 0xffffffec
   147c0:	str	r0, [r1, #24]
   147c4:	ldr	r0, [fp, #-20]	; 0xffffffec
   147c8:	ldr	r0, [r0, #24]
   147cc:	bl	17044 <init_token_obra@@Base>
   147d0:	movw	r0, #4
   147d4:	bl	11ee4 <malloc@plt>
   147d8:	ldr	r1, [fp, #-20]	; 0xffffffec
   147dc:	str	r0, [r1, #28]
   147e0:	ldr	r0, [fp, #-20]	; 0xffffffec
   147e4:	ldr	r0, [r0, #28]
   147e8:	bl	170b8 <init_token_cbra@@Base>
   147ec:	movw	r0, #4
   147f0:	bl	11ee4 <malloc@plt>
   147f4:	ldr	r1, [fp, #-20]	; 0xffffffec
   147f8:	str	r0, [r1, #32]
   147fc:	ldr	r0, [fp, #-20]	; 0xffffffec
   14800:	ldr	r0, [r0, #32]
   14804:	bl	172fc <init_token_else@@Base>
   14808:	movw	r0, #4
   1480c:	bl	11ee4 <malloc@plt>
   14810:	ldr	r1, [fp, #-20]	; 0xffffffec
   14814:	str	r0, [r1, #36]	; 0x24
   14818:	ldr	r0, [fp, #-20]	; 0xffffffec
   1481c:	ldr	r0, [r0, #36]	; 0x24
   14820:	bl	17044 <init_token_obra@@Base>
   14824:	movw	r0, #4
   14828:	bl	11ee4 <malloc@plt>
   1482c:	ldr	r1, [fp, #-20]	; 0xffffffec
   14830:	str	r0, [r1, #40]	; 0x28
   14834:	ldr	r0, [fp, #-20]	; 0xffffffec
   14838:	ldr	r0, [r0, #40]	; 0x28
   1483c:	bl	170b8 <init_token_cbra@@Base>
   14840:	ldr	r0, [pc, #636]	; 14ac4 <if_else_statements@@Base+0x44c>
   14844:	ldr	r0, [pc, r0]
   14848:	ldr	r1, [fp, #-20]	; 0xffffffec
   1484c:	str	r1, [r0, #228]	; 0xe4
   14850:	movw	r1, #11
   14854:	str	r1, [r0, #220]	; 0xdc
   14858:	sub	r0, fp, #16
   1485c:	bl	1a40c <read_if_statement@@Base>
   14860:	ldr	r1, [pc, #596]	; 14abc <if_else_statements@@Base+0x444>
   14864:	add	r1, pc, r1
   14868:	add	r2, r1, #8
   1486c:	add	r1, r1, #16
   14870:	ldr	r3, [pc, #584]	; 14ac0 <if_else_statements@@Base+0x448>
   14874:	ldr	r3, [pc, r3]
   14878:	str	r0, [fp, #-24]	; 0xffffffe8
   1487c:	ldr	r0, [r3, #204]	; 0xcc
   14880:	cmp	r0, #11
   14884:	str	r2, [sp, #36]	; 0x24
   14888:	str	r1, [sp, #32]
   1488c:	bne	148c0 <if_else_statements@@Base+0x248>
   14890:	ldr	r0, [sp, #36]	; 0x24
   14894:	ldr	r1, [pc, #568]	; 14ad4 <if_else_statements@@Base+0x45c>
   14898:	add	r1, pc, r1
   1489c:	add	r1, r1, #24
   148a0:	ldr	r2, [r0]
   148a4:	ldr	r3, [r0, #4]
   148a8:	adds	r2, r2, #1
   148ac:	adc	r3, r3, #0
   148b0:	str	r2, [r0]
   148b4:	str	r3, [r0, #4]
   148b8:	str	r1, [sp, #28]
   148bc:	b	14904 <if_else_statements@@Base+0x28c>
   148c0:	ldr	r0, [sp, #32]
   148c4:	ldr	r1, [pc, #508]	; 14ac8 <if_else_statements@@Base+0x450>
   148c8:	add	r1, pc, r1
   148cc:	ldr	r2, [pc, #504]	; 14acc <if_else_statements@@Base+0x454>
   148d0:	add	r2, pc, r2
   148d4:	ldr	r3, [pc, #500]	; 14ad0 <if_else_statements@@Base+0x458>
   148d8:	add	r3, pc, r3
   148dc:	ldr	ip, [r0]
   148e0:	ldr	lr, [r0, #4]
   148e4:	adds	ip, ip, #1
   148e8:	adc	lr, lr, #0
   148ec:	str	ip, [r0]
   148f0:	str	lr, [r0, #4]
   148f4:	mov	r0, r1
   148f8:	mov	r1, r2
   148fc:	movw	r2, #332	; 0x14c
   14900:	bl	12010 <__assert_fail@plt>
   14904:	ldr	r0, [sp, #28]
   14908:	ldr	r1, [pc, #456]	; 14ad8 <if_else_statements@@Base+0x460>
   1490c:	add	r1, pc, r1
   14910:	add	r2, r1, #32
   14914:	add	r1, r1, #40	; 0x28
   14918:	ldr	r3, [r0]
   1491c:	ldr	ip, [r0, #4]
   14920:	adds	r3, r3, #1
   14924:	adc	ip, ip, #0
   14928:	str	r3, [r0]
   1492c:	str	ip, [r0, #4]
   14930:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14934:	movw	r3, #0
   14938:	cmp	r0, r3
   1493c:	str	r2, [sp, #24]
   14940:	str	r1, [sp, #20]
   14944:	beq	14978 <if_else_statements@@Base+0x300>
   14948:	ldr	r0, [sp, #24]
   1494c:	ldr	r1, [pc, #404]	; 14ae8 <if_else_statements@@Base+0x470>
   14950:	add	r1, pc, r1
   14954:	add	r1, r1, #48	; 0x30
   14958:	ldr	r2, [r0]
   1495c:	ldr	r3, [r0, #4]
   14960:	adds	r2, r2, #1
   14964:	adc	r3, r3, #0
   14968:	str	r2, [r0]
   1496c:	str	r3, [r0, #4]
   14970:	str	r1, [sp, #16]
   14974:	b	149bc <if_else_statements@@Base+0x344>
   14978:	ldr	r0, [sp, #20]
   1497c:	ldr	r1, [pc, #344]	; 14adc <if_else_statements@@Base+0x464>
   14980:	add	r1, pc, r1
   14984:	ldr	r2, [pc, #340]	; 14ae0 <if_else_statements@@Base+0x468>
   14988:	add	r2, pc, r2
   1498c:	ldr	r3, [pc, #336]	; 14ae4 <if_else_statements@@Base+0x46c>
   14990:	add	r3, pc, r3
   14994:	ldr	ip, [r0]
   14998:	ldr	lr, [r0, #4]
   1499c:	adds	ip, ip, #1
   149a0:	adc	lr, lr, #0
   149a4:	str	ip, [r0]
   149a8:	str	lr, [r0, #4]
   149ac:	mov	r0, r1
   149b0:	mov	r1, r2
   149b4:	movw	r2, #333	; 0x14d
   149b8:	bl	12010 <__assert_fail@plt>
   149bc:	ldr	r0, [sp, #16]
   149c0:	ldr	r1, [pc, #292]	; 14aec <if_else_statements@@Base+0x474>
   149c4:	add	r1, pc, r1
   149c8:	add	r2, r1, #56	; 0x38
   149cc:	add	r1, r1, #64	; 0x40
   149d0:	ldr	r3, [r0]
   149d4:	ldr	ip, [r0, #4]
   149d8:	adds	r3, r3, #1
   149dc:	adc	ip, ip, #0
   149e0:	str	r3, [r0]
   149e4:	str	ip, [r0, #4]
   149e8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   149ec:	ldr	r0, [r0]
   149f0:	cmp	r0, #4
   149f4:	str	r2, [sp, #12]
   149f8:	str	r1, [sp, #8]
   149fc:	bne	14a30 <if_else_statements@@Base+0x3b8>
   14a00:	ldr	r0, [sp, #12]
   14a04:	ldr	r1, [pc, #240]	; 14afc <if_else_statements@@Base+0x484>
   14a08:	add	r1, pc, r1
   14a0c:	add	r1, r1, #72	; 0x48
   14a10:	ldr	r2, [r0]
   14a14:	ldr	r3, [r0, #4]
   14a18:	adds	r2, r2, #1
   14a1c:	adc	r3, r3, #0
   14a20:	str	r2, [r0]
   14a24:	str	r3, [r0, #4]
   14a28:	str	r1, [sp, #4]
   14a2c:	b	14a74 <if_else_statements@@Base+0x3fc>
   14a30:	ldr	r0, [sp, #8]
   14a34:	ldr	r1, [pc, #180]	; 14af0 <if_else_statements@@Base+0x478>
   14a38:	add	r1, pc, r1
   14a3c:	ldr	r2, [pc, #176]	; 14af4 <if_else_statements@@Base+0x47c>
   14a40:	add	r2, pc, r2
   14a44:	ldr	r3, [pc, #172]	; 14af8 <if_else_statements@@Base+0x480>
   14a48:	add	r3, pc, r3
   14a4c:	ldr	ip, [r0]
   14a50:	ldr	lr, [r0, #4]
   14a54:	adds	ip, ip, #1
   14a58:	adc	lr, lr, #0
   14a5c:	str	ip, [r0]
   14a60:	str	lr, [r0, #4]
   14a64:	mov	r0, r1
   14a68:	mov	r1, r2
   14a6c:	movw	r2, #334	; 0x14e
   14a70:	bl	12010 <__assert_fail@plt>
   14a74:	ldr	r0, [sp, #4]
   14a78:	ldr	r1, [r0]
   14a7c:	ldr	r2, [r0, #4]
   14a80:	adds	r1, r1, #1
   14a84:	adc	r2, r2, #0
   14a88:	str	r1, [r0]
   14a8c:	str	r2, [r0, #4]
   14a90:	ldr	r0, [pc, #104]	; 14b00 <if_else_statements@@Base+0x488>
   14a94:	add	r0, pc, r0
   14a98:	ldr	r1, [r0, #80]	; 0x50
   14a9c:	ldr	r2, [r0, #84]	; 0x54
   14aa0:	adds	r1, r1, #1
   14aa4:	adc	r2, r2, #0
   14aa8:	str	r1, [r0, #80]	; 0x50
   14aac:	str	r2, [r0, #84]	; 0x54
   14ab0:	mov	sp, fp
   14ab4:	pop	{fp, pc}
   14ab8:	andeq	ip, r1, r0, asr #28
   14abc:	andeq	ip, r1, r4, ror #24
   14ac0:	andeq	ip, r1, r0, asr r8
   14ac4:	andeq	ip, r1, r0, lsl #17
   14ac8:	andeq	sl, r0, r4, ror #3
   14acc:	andeq	r9, r0, r2, lsl pc
   14ad0:	andeq	sl, r0, pc, ror #3
   14ad4:	andeq	ip, r1, r0, lsr ip
   14ad8:			; <UNDEFINED> instruction: 0x0001cbbc
   14adc:	andeq	sl, r0, lr, lsl #2
   14ae0:	andeq	r9, r0, sl, asr lr
   14ae4:	andeq	sl, r0, r7, lsr r1
   14ae8:	andeq	ip, r1, r8, ror fp
   14aec:	andeq	ip, r1, r4, lsl #22
   14af0:	andeq	sl, r0, r2, rrx
   14af4:	andeq	r9, r0, r2, lsr #27
   14af8:	andeq	sl, r0, pc, ror r0
   14afc:	andeq	ip, r1, r0, asr #21
   14b00:	andeq	ip, r1, r4, lsr sl

00014b04 <body_with_two_returns@@Base>:
   14b04:	push	{fp, lr}
   14b08:	mov	fp, sp
   14b0c:	sub	sp, sp, #88	; 0x58
   14b10:	ldr	r0, [pc, #1308]	; 15034 <body_with_two_returns@@Base+0x530>
   14b14:	add	r0, pc, r0
   14b18:	str	r0, [fp, #-28]	; 0xffffffe4
   14b1c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   14b20:	ldr	r1, [r0]
   14b24:	ldr	r2, [r0, #4]
   14b28:	adds	r1, r1, #1
   14b2c:	adc	r2, r2, #0
   14b30:	str	r1, [r0]
   14b34:	str	r2, [r0, #4]
   14b38:	movw	r0, #0
   14b3c:	str	r0, [fp, #-24]	; 0xffffffe8
   14b40:	sub	r0, fp, #16
   14b44:	sub	r1, fp, #12
   14b48:	bl	198c0 <init_grammar@@Base>
   14b4c:	movw	r0, #32
   14b50:	bl	11ee4 <malloc@plt>
   14b54:	str	r0, [fp, #-20]	; 0xffffffec
   14b58:	movw	r0, #4
   14b5c:	bl	11ee4 <malloc@plt>
   14b60:	ldr	r1, [fp, #-20]	; 0xffffffec
   14b64:	str	r0, [r1]
   14b68:	ldr	r0, [fp, #-20]	; 0xffffffec
   14b6c:	ldr	r0, [r0]
   14b70:	bl	17044 <init_token_obra@@Base>
   14b74:	movw	r0, #4
   14b78:	bl	11ee4 <malloc@plt>
   14b7c:	ldr	r1, [fp, #-20]	; 0xffffffec
   14b80:	str	r0, [r1, #4]
   14b84:	ldr	r0, [fp, #-20]	; 0xffffffec
   14b88:	ldr	r0, [r0, #4]
   14b8c:	bl	1712c <init_token_return@@Base>
   14b90:	movw	r0, #8
   14b94:	bl	11ee4 <malloc@plt>
   14b98:	ldr	r1, [fp, #-20]	; 0xffffffec
   14b9c:	str	r0, [r1, #8]
   14ba0:	ldr	r0, [fp, #-20]	; 0xffffffec
   14ba4:	ldr	r0, [r0, #8]
   14ba8:	movw	r1, #1
   14bac:	bl	16e44 <init_token_int_value@@Base>
   14bb0:	movw	r0, #4
   14bb4:	bl	11ee4 <malloc@plt>
   14bb8:	ldr	r1, [fp, #-20]	; 0xffffffec
   14bbc:	str	r0, [r1, #12]
   14bc0:	ldr	r0, [fp, #-20]	; 0xffffffec
   14bc4:	ldr	r0, [r0, #12]
   14bc8:	bl	171a0 <init_token_semicolon@@Base>
   14bcc:	movw	r0, #4
   14bd0:	bl	11ee4 <malloc@plt>
   14bd4:	ldr	r1, [fp, #-20]	; 0xffffffec
   14bd8:	str	r0, [r1, #16]
   14bdc:	ldr	r0, [fp, #-20]	; 0xffffffec
   14be0:	ldr	r0, [r0, #16]
   14be4:	bl	1712c <init_token_return@@Base>
   14be8:	movw	r0, #8
   14bec:	bl	11ee4 <malloc@plt>
   14bf0:	ldr	r1, [fp, #-20]	; 0xffffffec
   14bf4:	str	r0, [r1, #20]
   14bf8:	ldr	r0, [fp, #-20]	; 0xffffffec
   14bfc:	ldr	r0, [r0, #20]
   14c00:	movw	r1, #1
   14c04:	bl	16e44 <init_token_int_value@@Base>
   14c08:	movw	r0, #4
   14c0c:	bl	11ee4 <malloc@plt>
   14c10:	ldr	r1, [fp, #-20]	; 0xffffffec
   14c14:	str	r0, [r1, #24]
   14c18:	ldr	r0, [fp, #-20]	; 0xffffffec
   14c1c:	ldr	r0, [r0, #24]
   14c20:	bl	171a0 <init_token_semicolon@@Base>
   14c24:	movw	r0, #4
   14c28:	bl	11ee4 <malloc@plt>
   14c2c:	ldr	r1, [fp, #-20]	; 0xffffffec
   14c30:	str	r0, [r1, #28]
   14c34:	ldr	r0, [fp, #-20]	; 0xffffffec
   14c38:	ldr	r0, [r0, #28]
   14c3c:	bl	170b8 <init_token_cbra@@Base>
   14c40:	ldr	r0, [pc, #1016]	; 15040 <body_with_two_returns@@Base+0x53c>
   14c44:	ldr	r0, [pc, r0]
   14c48:	ldr	r1, [fp, #-20]	; 0xffffffec
   14c4c:	str	r1, [r0, #228]	; 0xe4
   14c50:	movw	r1, #8
   14c54:	str	r1, [r0, #220]	; 0xdc
   14c58:	sub	r0, fp, #16
   14c5c:	bl	19d84 <read_body@@Base>
   14c60:	ldr	r1, [pc, #976]	; 15038 <body_with_two_returns@@Base+0x534>
   14c64:	add	r1, pc, r1
   14c68:	add	r2, r1, #8
   14c6c:	add	r1, r1, #16
   14c70:	ldr	r3, [pc, #964]	; 1503c <body_with_two_returns@@Base+0x538>
   14c74:	ldr	r3, [pc, r3]
   14c78:	str	r0, [fp, #-24]	; 0xffffffe8
   14c7c:	ldr	r0, [r3, #204]	; 0xcc
   14c80:	cmp	r0, #8
   14c84:	str	r2, [fp, #-32]	; 0xffffffe0
   14c88:	str	r1, [fp, #-36]	; 0xffffffdc
   14c8c:	bne	14cc0 <body_with_two_returns@@Base+0x1bc>
   14c90:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14c94:	ldr	r1, [pc, #948]	; 15050 <body_with_two_returns@@Base+0x54c>
   14c98:	add	r1, pc, r1
   14c9c:	add	r1, r1, #24
   14ca0:	ldr	r2, [r0]
   14ca4:	ldr	r3, [r0, #4]
   14ca8:	adds	r2, r2, #1
   14cac:	adc	r3, r3, #0
   14cb0:	str	r2, [r0]
   14cb4:	str	r3, [r0, #4]
   14cb8:	str	r1, [fp, #-40]	; 0xffffffd8
   14cbc:	b	14d04 <body_with_two_returns@@Base+0x200>
   14cc0:	ldr	r0, [fp, #-36]	; 0xffffffdc
   14cc4:	ldr	r1, [pc, #888]	; 15044 <body_with_two_returns@@Base+0x540>
   14cc8:	add	r1, pc, r1
   14ccc:	ldr	r2, [pc, #884]	; 15048 <body_with_two_returns@@Base+0x544>
   14cd0:	add	r2, pc, r2
   14cd4:	ldr	r3, [pc, #880]	; 1504c <body_with_two_returns@@Base+0x548>
   14cd8:	add	r3, pc, r3
   14cdc:	ldr	ip, [r0]
   14ce0:	ldr	lr, [r0, #4]
   14ce4:	adds	ip, ip, #1
   14ce8:	adc	lr, lr, #0
   14cec:	str	ip, [r0]
   14cf0:	str	lr, [r0, #4]
   14cf4:	mov	r0, r1
   14cf8:	mov	r1, r2
   14cfc:	movw	r2, #371	; 0x173
   14d00:	bl	12010 <__assert_fail@plt>
   14d04:	ldr	r0, [fp, #-40]	; 0xffffffd8
   14d08:	ldr	r1, [pc, #836]	; 15054 <body_with_two_returns@@Base+0x550>
   14d0c:	add	r1, pc, r1
   14d10:	add	r2, r1, #32
   14d14:	add	r1, r1, #40	; 0x28
   14d18:	ldr	r3, [r0]
   14d1c:	ldr	ip, [r0, #4]
   14d20:	adds	r3, r3, #1
   14d24:	adc	ip, ip, #0
   14d28:	str	r3, [r0]
   14d2c:	str	ip, [r0, #4]
   14d30:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14d34:	movw	r3, #0
   14d38:	cmp	r0, r3
   14d3c:	str	r2, [sp, #44]	; 0x2c
   14d40:	str	r1, [sp, #40]	; 0x28
   14d44:	beq	14d78 <body_with_two_returns@@Base+0x274>
   14d48:	ldr	r0, [sp, #44]	; 0x2c
   14d4c:	ldr	r1, [pc, #784]	; 15064 <body_with_two_returns@@Base+0x560>
   14d50:	add	r1, pc, r1
   14d54:	add	r1, r1, #48	; 0x30
   14d58:	ldr	r2, [r0]
   14d5c:	ldr	r3, [r0, #4]
   14d60:	adds	r2, r2, #1
   14d64:	adc	r3, r3, #0
   14d68:	str	r2, [r0]
   14d6c:	str	r3, [r0, #4]
   14d70:	str	r1, [sp, #36]	; 0x24
   14d74:	b	14dbc <body_with_two_returns@@Base+0x2b8>
   14d78:	ldr	r0, [sp, #40]	; 0x28
   14d7c:	ldr	r1, [pc, #724]	; 15058 <body_with_two_returns@@Base+0x554>
   14d80:	add	r1, pc, r1
   14d84:	ldr	r2, [pc, #720]	; 1505c <body_with_two_returns@@Base+0x558>
   14d88:	add	r2, pc, r2
   14d8c:	ldr	r3, [pc, #716]	; 15060 <body_with_two_returns@@Base+0x55c>
   14d90:	add	r3, pc, r3
   14d94:	ldr	ip, [r0]
   14d98:	ldr	lr, [r0, #4]
   14d9c:	adds	ip, ip, #1
   14da0:	adc	lr, lr, #0
   14da4:	str	ip, [r0]
   14da8:	str	lr, [r0, #4]
   14dac:	mov	r0, r1
   14db0:	mov	r1, r2
   14db4:	movw	r2, #372	; 0x174
   14db8:	bl	12010 <__assert_fail@plt>
   14dbc:	ldr	r0, [sp, #36]	; 0x24
   14dc0:	ldr	r1, [pc, #672]	; 15068 <body_with_two_returns@@Base+0x564>
   14dc4:	add	r1, pc, r1
   14dc8:	add	r2, r1, #56	; 0x38
   14dcc:	add	r1, r1, #64	; 0x40
   14dd0:	ldr	r3, [r0]
   14dd4:	ldr	ip, [r0, #4]
   14dd8:	adds	r3, r3, #1
   14ddc:	adc	ip, ip, #0
   14de0:	str	r3, [r0]
   14de4:	str	ip, [r0, #4]
   14de8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14dec:	ldr	r0, [r0]
   14df0:	cmp	r0, #3
   14df4:	str	r2, [sp, #32]
   14df8:	str	r1, [sp, #28]
   14dfc:	bne	14e30 <body_with_two_returns@@Base+0x32c>
   14e00:	ldr	r0, [sp, #32]
   14e04:	ldr	r1, [pc, #620]	; 15078 <body_with_two_returns@@Base+0x574>
   14e08:	add	r1, pc, r1
   14e0c:	add	r1, r1, #72	; 0x48
   14e10:	ldr	r2, [r0]
   14e14:	ldr	r3, [r0, #4]
   14e18:	adds	r2, r2, #1
   14e1c:	adc	r3, r3, #0
   14e20:	str	r2, [r0]
   14e24:	str	r3, [r0, #4]
   14e28:	str	r1, [sp, #24]
   14e2c:	b	14e74 <body_with_two_returns@@Base+0x370>
   14e30:	ldr	r0, [sp, #28]
   14e34:	ldr	r1, [pc, #560]	; 1506c <body_with_two_returns@@Base+0x568>
   14e38:	add	r1, pc, r1
   14e3c:	ldr	r2, [pc, #556]	; 15070 <body_with_two_returns@@Base+0x56c>
   14e40:	add	r2, pc, r2
   14e44:	ldr	r3, [pc, #552]	; 15074 <body_with_two_returns@@Base+0x570>
   14e48:	add	r3, pc, r3
   14e4c:	ldr	ip, [r0]
   14e50:	ldr	lr, [r0, #4]
   14e54:	adds	ip, ip, #1
   14e58:	adc	lr, lr, #0
   14e5c:	str	ip, [r0]
   14e60:	str	lr, [r0, #4]
   14e64:	mov	r0, r1
   14e68:	mov	r1, r2
   14e6c:	movw	r2, #373	; 0x175
   14e70:	bl	12010 <__assert_fail@plt>
   14e74:	ldr	r0, [sp, #24]
   14e78:	ldr	r1, [pc, #508]	; 1507c <body_with_two_returns@@Base+0x578>
   14e7c:	add	r1, pc, r1
   14e80:	add	r2, r1, #80	; 0x50
   14e84:	add	r1, r1, #88	; 0x58
   14e88:	ldr	r3, [r0]
   14e8c:	ldr	ip, [r0, #4]
   14e90:	adds	r3, r3, #1
   14e94:	adc	ip, ip, #0
   14e98:	str	r3, [r0]
   14e9c:	str	ip, [r0, #4]
   14ea0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14ea4:	ldr	r0, [r0, #4]
   14ea8:	ldr	r0, [r0]
   14eac:	cmp	r0, #3
   14eb0:	str	r2, [sp, #20]
   14eb4:	str	r1, [sp, #16]
   14eb8:	bne	14eec <body_with_two_returns@@Base+0x3e8>
   14ebc:	ldr	r0, [sp, #20]
   14ec0:	ldr	r1, [pc, #452]	; 1508c <body_with_two_returns@@Base+0x588>
   14ec4:	add	r1, pc, r1
   14ec8:	add	r1, r1, #96	; 0x60
   14ecc:	ldr	r2, [r0]
   14ed0:	ldr	r3, [r0, #4]
   14ed4:	adds	r2, r2, #1
   14ed8:	adc	r3, r3, #0
   14edc:	str	r2, [r0]
   14ee0:	str	r3, [r0, #4]
   14ee4:	str	r1, [sp, #12]
   14ee8:	b	14f30 <body_with_two_returns@@Base+0x42c>
   14eec:	ldr	r0, [sp, #16]
   14ef0:	ldr	r1, [pc, #392]	; 15080 <body_with_two_returns@@Base+0x57c>
   14ef4:	add	r1, pc, r1
   14ef8:	ldr	r2, [pc, #388]	; 15084 <body_with_two_returns@@Base+0x580>
   14efc:	add	r2, pc, r2
   14f00:	ldr	r3, [pc, #384]	; 15088 <body_with_two_returns@@Base+0x584>
   14f04:	add	r3, pc, r3
   14f08:	ldr	ip, [r0]
   14f0c:	ldr	lr, [r0, #4]
   14f10:	adds	ip, ip, #1
   14f14:	adc	lr, lr, #0
   14f18:	str	ip, [r0]
   14f1c:	str	lr, [r0, #4]
   14f20:	mov	r0, r1
   14f24:	mov	r1, r2
   14f28:	movw	r2, #374	; 0x176
   14f2c:	bl	12010 <__assert_fail@plt>
   14f30:	ldr	r0, [sp, #12]
   14f34:	ldr	r1, [pc, #340]	; 15090 <body_with_two_returns@@Base+0x58c>
   14f38:	add	r1, pc, r1
   14f3c:	add	r2, r1, #104	; 0x68
   14f40:	add	r1, r1, #112	; 0x70
   14f44:	ldr	r3, [r0]
   14f48:	ldr	ip, [r0, #4]
   14f4c:	adds	r3, r3, #1
   14f50:	adc	ip, ip, #0
   14f54:	str	r3, [r0]
   14f58:	str	ip, [r0, #4]
   14f5c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14f60:	ldr	r0, [r0, #4]
   14f64:	ldr	r0, [r0, #4]
   14f68:	movw	r3, #0
   14f6c:	cmp	r0, r3
   14f70:	str	r2, [sp, #8]
   14f74:	str	r1, [sp, #4]
   14f78:	bne	14fac <body_with_two_returns@@Base+0x4a8>
   14f7c:	ldr	r0, [sp, #8]
   14f80:	ldr	r1, [pc, #280]	; 150a0 <body_with_two_returns@@Base+0x59c>
   14f84:	add	r1, pc, r1
   14f88:	add	r1, r1, #120	; 0x78
   14f8c:	ldr	r2, [r0]
   14f90:	ldr	r3, [r0, #4]
   14f94:	adds	r2, r2, #1
   14f98:	adc	r3, r3, #0
   14f9c:	str	r2, [r0]
   14fa0:	str	r3, [r0, #4]
   14fa4:	str	r1, [sp]
   14fa8:	b	14ff0 <body_with_two_returns@@Base+0x4ec>
   14fac:	ldr	r0, [sp, #4]
   14fb0:	ldr	r1, [pc, #220]	; 15094 <body_with_two_returns@@Base+0x590>
   14fb4:	add	r1, pc, r1
   14fb8:	ldr	r2, [pc, #216]	; 15098 <body_with_two_returns@@Base+0x594>
   14fbc:	add	r2, pc, r2
   14fc0:	ldr	r3, [pc, #212]	; 1509c <body_with_two_returns@@Base+0x598>
   14fc4:	add	r3, pc, r3
   14fc8:	ldr	ip, [r0]
   14fcc:	ldr	lr, [r0, #4]
   14fd0:	adds	ip, ip, #1
   14fd4:	adc	lr, lr, #0
   14fd8:	str	ip, [r0]
   14fdc:	str	lr, [r0, #4]
   14fe0:	mov	r0, r1
   14fe4:	mov	r1, r2
   14fe8:	movw	r2, #375	; 0x177
   14fec:	bl	12010 <__assert_fail@plt>
   14ff0:	ldr	r0, [sp]
   14ff4:	ldr	r1, [r0]
   14ff8:	ldr	r2, [r0, #4]
   14ffc:	adds	r1, r1, #1
   15000:	adc	r2, r2, #0
   15004:	str	r1, [r0]
   15008:	str	r2, [r0, #4]
   1500c:	ldr	r0, [pc, #144]	; 150a4 <body_with_two_returns@@Base+0x5a0>
   15010:	add	r0, pc, r0
   15014:	ldr	r1, [r0, #128]	; 0x80
   15018:	ldr	r2, [r0, #132]	; 0x84
   1501c:	adds	r1, r1, #1
   15020:	adc	r2, r2, #0
   15024:	str	r1, [r0, #128]	; 0x80
   15028:	str	r2, [r0, #132]	; 0x84
   1502c:	mov	sp, fp
   15030:	pop	{fp, pc}
   15034:	andeq	ip, r1, r4, lsl sl
   15038:	andeq	ip, r1, r4, asr #17
   1503c:	andeq	ip, r1, r0, asr r4
   15040:	andeq	ip, r1, r0, lsl #9
   15044:	andeq	r9, r0, r9, lsl lr
   15048:	andeq	r9, r0, r2, lsl fp
   1504c:	andeq	r9, r0, r3, lsr #28
   15050:	muleq	r1, r0, r8
   15054:	andeq	ip, r1, ip, lsl r8
   15058:	andeq	r9, r0, lr, lsl #26
   1505c:	andeq	r9, r0, sl, asr sl
   15060:	andeq	r9, r0, fp, ror #26
   15064:	ldrdeq	ip, [r1], -r8
   15068:	andeq	ip, r1, r4, ror #14
   1506c:	andeq	r9, r0, r0, ror #25
   15070:	andeq	r9, r0, r2, lsr #19
   15074:			; <UNDEFINED> instruction: 0x00009cb3
   15078:	andeq	ip, r1, r0, lsr #14
   1507c:	andeq	ip, r1, ip, lsr #13
   15080:	andeq	r9, r0, sl, lsr ip
   15084:	andeq	r9, r0, r6, ror #17
   15088:	strdeq	r9, [r0], -r7
   1508c:	andeq	ip, r1, r4, ror #12
   15090:	strdeq	ip, [r1], -r0
   15094:	muleq	r0, r6, fp
   15098:	andeq	r9, r0, r6, lsr #16
   1509c:	andeq	r9, r0, r7, lsr fp
   150a0:	andeq	ip, r1, r4, lsr #11
   150a4:	andeq	ip, r1, r8, lsl r5

000150a8 <body_with_one_return@@Base>:
   150a8:	push	{fp, lr}
   150ac:	mov	fp, sp
   150b0:	sub	sp, sp, #80	; 0x50
   150b4:	ldr	r0, [pc, #1028]	; 154c0 <body_with_one_return@@Base+0x418>
   150b8:	add	r0, pc, r0
   150bc:	str	r0, [fp, #-28]	; 0xffffffe4
   150c0:	ldr	r0, [fp, #-28]	; 0xffffffe4
   150c4:	ldr	r1, [r0]
   150c8:	ldr	r2, [r0, #4]
   150cc:	adds	r1, r1, #1
   150d0:	adc	r2, r2, #0
   150d4:	str	r1, [r0]
   150d8:	str	r2, [r0, #4]
   150dc:	movw	r0, #0
   150e0:	str	r0, [fp, #-24]	; 0xffffffe8
   150e4:	sub	r0, fp, #16
   150e8:	sub	r1, fp, #12
   150ec:	bl	198c0 <init_grammar@@Base>
   150f0:	movw	r0, #20
   150f4:	bl	11ee4 <malloc@plt>
   150f8:	str	r0, [fp, #-20]	; 0xffffffec
   150fc:	movw	r0, #4
   15100:	bl	11ee4 <malloc@plt>
   15104:	ldr	r1, [fp, #-20]	; 0xffffffec
   15108:	str	r0, [r1]
   1510c:	ldr	r0, [fp, #-20]	; 0xffffffec
   15110:	ldr	r0, [r0]
   15114:	bl	17044 <init_token_obra@@Base>
   15118:	movw	r0, #4
   1511c:	bl	11ee4 <malloc@plt>
   15120:	ldr	r1, [fp, #-20]	; 0xffffffec
   15124:	str	r0, [r1, #4]
   15128:	ldr	r0, [fp, #-20]	; 0xffffffec
   1512c:	ldr	r0, [r0, #4]
   15130:	bl	1712c <init_token_return@@Base>
   15134:	movw	r0, #8
   15138:	bl	11ee4 <malloc@plt>
   1513c:	ldr	r1, [fp, #-20]	; 0xffffffec
   15140:	str	r0, [r1, #8]
   15144:	ldr	r0, [fp, #-20]	; 0xffffffec
   15148:	ldr	r0, [r0, #8]
   1514c:	movw	r1, #1
   15150:	bl	16e44 <init_token_int_value@@Base>
   15154:	movw	r0, #4
   15158:	bl	11ee4 <malloc@plt>
   1515c:	ldr	r1, [fp, #-20]	; 0xffffffec
   15160:	str	r0, [r1, #12]
   15164:	ldr	r0, [fp, #-20]	; 0xffffffec
   15168:	ldr	r0, [r0, #12]
   1516c:	bl	171a0 <init_token_semicolon@@Base>
   15170:	movw	r0, #4
   15174:	bl	11ee4 <malloc@plt>
   15178:	ldr	r1, [fp, #-20]	; 0xffffffec
   1517c:	str	r0, [r1, #16]
   15180:	ldr	r0, [fp, #-20]	; 0xffffffec
   15184:	ldr	r0, [r0, #16]
   15188:	bl	170b8 <init_token_cbra@@Base>
   1518c:	ldr	r0, [pc, #824]	; 154cc <body_with_one_return@@Base+0x424>
   15190:	ldr	r0, [pc, r0]
   15194:	ldr	r1, [fp, #-20]	; 0xffffffec
   15198:	str	r1, [r0, #228]	; 0xe4
   1519c:	movw	r1, #5
   151a0:	str	r1, [r0, #220]	; 0xdc
   151a4:	sub	r0, fp, #16
   151a8:	bl	19d84 <read_body@@Base>
   151ac:	ldr	r1, [pc, #784]	; 154c4 <body_with_one_return@@Base+0x41c>
   151b0:	add	r1, pc, r1
   151b4:	add	r2, r1, #8
   151b8:	add	r1, r1, #16
   151bc:	ldr	r3, [pc, #772]	; 154c8 <body_with_one_return@@Base+0x420>
   151c0:	ldr	r3, [pc, r3]
   151c4:	str	r0, [fp, #-24]	; 0xffffffe8
   151c8:	ldr	r0, [r3, #204]	; 0xcc
   151cc:	cmp	r0, #5
   151d0:	str	r2, [fp, #-32]	; 0xffffffe0
   151d4:	str	r1, [fp, #-36]	; 0xffffffdc
   151d8:	bne	1520c <body_with_one_return@@Base+0x164>
   151dc:	ldr	r0, [fp, #-32]	; 0xffffffe0
   151e0:	ldr	r1, [pc, #756]	; 154dc <body_with_one_return@@Base+0x434>
   151e4:	add	r1, pc, r1
   151e8:	add	r1, r1, #24
   151ec:	ldr	r2, [r0]
   151f0:	ldr	r3, [r0, #4]
   151f4:	adds	r2, r2, #1
   151f8:	adc	r3, r3, #0
   151fc:	str	r2, [r0]
   15200:	str	r3, [r0, #4]
   15204:	str	r1, [sp, #40]	; 0x28
   15208:	b	15250 <body_with_one_return@@Base+0x1a8>
   1520c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   15210:	ldr	r1, [pc, #696]	; 154d0 <body_with_one_return@@Base+0x428>
   15214:	add	r1, pc, r1
   15218:	ldr	r2, [pc, #692]	; 154d4 <body_with_one_return@@Base+0x42c>
   1521c:	add	r2, pc, r2
   15220:	ldr	r3, [pc, #688]	; 154d8 <body_with_one_return@@Base+0x430>
   15224:	add	r3, pc, r3
   15228:	ldr	ip, [r0]
   1522c:	ldr	lr, [r0, #4]
   15230:	adds	ip, ip, #1
   15234:	adc	lr, lr, #0
   15238:	str	ip, [r0]
   1523c:	str	lr, [r0, #4]
   15240:	mov	r0, r1
   15244:	mov	r1, r2
   15248:	movw	r2, #406	; 0x196
   1524c:	bl	12010 <__assert_fail@plt>
   15250:	ldr	r0, [sp, #40]	; 0x28
   15254:	ldr	r1, [pc, #644]	; 154e0 <body_with_one_return@@Base+0x438>
   15258:	add	r1, pc, r1
   1525c:	add	r2, r1, #32
   15260:	add	r1, r1, #40	; 0x28
   15264:	ldr	r3, [r0]
   15268:	ldr	ip, [r0, #4]
   1526c:	adds	r3, r3, #1
   15270:	adc	ip, ip, #0
   15274:	str	r3, [r0]
   15278:	str	ip, [r0, #4]
   1527c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15280:	movw	r3, #0
   15284:	cmp	r0, r3
   15288:	str	r2, [sp, #36]	; 0x24
   1528c:	str	r1, [sp, #32]
   15290:	beq	152c4 <body_with_one_return@@Base+0x21c>
   15294:	ldr	r0, [sp, #36]	; 0x24
   15298:	ldr	r1, [pc, #592]	; 154f0 <body_with_one_return@@Base+0x448>
   1529c:	add	r1, pc, r1
   152a0:	add	r1, r1, #48	; 0x30
   152a4:	ldr	r2, [r0]
   152a8:	ldr	r3, [r0, #4]
   152ac:	adds	r2, r2, #1
   152b0:	adc	r3, r3, #0
   152b4:	str	r2, [r0]
   152b8:	str	r3, [r0, #4]
   152bc:	str	r1, [sp, #28]
   152c0:	b	15308 <body_with_one_return@@Base+0x260>
   152c4:	ldr	r0, [sp, #32]
   152c8:	ldr	r1, [pc, #532]	; 154e4 <body_with_one_return@@Base+0x43c>
   152cc:	add	r1, pc, r1
   152d0:	ldr	r2, [pc, #528]	; 154e8 <body_with_one_return@@Base+0x440>
   152d4:	add	r2, pc, r2
   152d8:	ldr	r3, [pc, #524]	; 154ec <body_with_one_return@@Base+0x444>
   152dc:	add	r3, pc, r3
   152e0:	ldr	ip, [r0]
   152e4:	ldr	lr, [r0, #4]
   152e8:	adds	ip, ip, #1
   152ec:	adc	lr, lr, #0
   152f0:	str	ip, [r0]
   152f4:	str	lr, [r0, #4]
   152f8:	mov	r0, r1
   152fc:	mov	r1, r2
   15300:	movw	r2, #407	; 0x197
   15304:	bl	12010 <__assert_fail@plt>
   15308:	ldr	r0, [sp, #28]
   1530c:	ldr	r1, [pc, #480]	; 154f4 <body_with_one_return@@Base+0x44c>
   15310:	add	r1, pc, r1
   15314:	add	r2, r1, #56	; 0x38
   15318:	add	r1, r1, #64	; 0x40
   1531c:	ldr	r3, [r0]
   15320:	ldr	ip, [r0, #4]
   15324:	adds	r3, r3, #1
   15328:	adc	ip, ip, #0
   1532c:	str	r3, [r0]
   15330:	str	ip, [r0, #4]
   15334:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15338:	ldr	r0, [r0]
   1533c:	cmp	r0, #3
   15340:	str	r2, [sp, #24]
   15344:	str	r1, [sp, #20]
   15348:	bne	1537c <body_with_one_return@@Base+0x2d4>
   1534c:	ldr	r0, [sp, #24]
   15350:	ldr	r1, [pc, #428]	; 15504 <body_with_one_return@@Base+0x45c>
   15354:	add	r1, pc, r1
   15358:	add	r1, r1, #72	; 0x48
   1535c:	ldr	r2, [r0]
   15360:	ldr	r3, [r0, #4]
   15364:	adds	r2, r2, #1
   15368:	adc	r3, r3, #0
   1536c:	str	r2, [r0]
   15370:	str	r3, [r0, #4]
   15374:	str	r1, [sp, #16]
   15378:	b	153c0 <body_with_one_return@@Base+0x318>
   1537c:	ldr	r0, [sp, #20]
   15380:	ldr	r1, [pc, #368]	; 154f8 <body_with_one_return@@Base+0x450>
   15384:	add	r1, pc, r1
   15388:	ldr	r2, [pc, #364]	; 154fc <body_with_one_return@@Base+0x454>
   1538c:	add	r2, pc, r2
   15390:	ldr	r3, [pc, #360]	; 15500 <body_with_one_return@@Base+0x458>
   15394:	add	r3, pc, r3
   15398:	ldr	ip, [r0]
   1539c:	ldr	lr, [r0, #4]
   153a0:	adds	ip, ip, #1
   153a4:	adc	lr, lr, #0
   153a8:	str	ip, [r0]
   153ac:	str	lr, [r0, #4]
   153b0:	mov	r0, r1
   153b4:	mov	r1, r2
   153b8:	movw	r2, #408	; 0x198
   153bc:	bl	12010 <__assert_fail@plt>
   153c0:	ldr	r0, [sp, #16]
   153c4:	ldr	r1, [pc, #316]	; 15508 <body_with_one_return@@Base+0x460>
   153c8:	add	r1, pc, r1
   153cc:	add	r2, r1, #80	; 0x50
   153d0:	add	r1, r1, #88	; 0x58
   153d4:	ldr	r3, [r0]
   153d8:	ldr	ip, [r0, #4]
   153dc:	adds	r3, r3, #1
   153e0:	adc	ip, ip, #0
   153e4:	str	r3, [r0]
   153e8:	str	ip, [r0, #4]
   153ec:	ldr	r0, [fp, #-24]	; 0xffffffe8
   153f0:	ldr	r0, [r0, #4]
   153f4:	movw	r3, #0
   153f8:	cmp	r0, r3
   153fc:	str	r2, [sp, #12]
   15400:	str	r1, [sp, #8]
   15404:	bne	15438 <body_with_one_return@@Base+0x390>
   15408:	ldr	r0, [sp, #12]
   1540c:	ldr	r1, [pc, #260]	; 15518 <body_with_one_return@@Base+0x470>
   15410:	add	r1, pc, r1
   15414:	add	r1, r1, #96	; 0x60
   15418:	ldr	r2, [r0]
   1541c:	ldr	r3, [r0, #4]
   15420:	adds	r2, r2, #1
   15424:	adc	r3, r3, #0
   15428:	str	r2, [r0]
   1542c:	str	r3, [r0, #4]
   15430:	str	r1, [sp, #4]
   15434:	b	1547c <body_with_one_return@@Base+0x3d4>
   15438:	ldr	r0, [sp, #8]
   1543c:	ldr	r1, [pc, #200]	; 1550c <body_with_one_return@@Base+0x464>
   15440:	add	r1, pc, r1
   15444:	ldr	r2, [pc, #196]	; 15510 <body_with_one_return@@Base+0x468>
   15448:	add	r2, pc, r2
   1544c:	ldr	r3, [pc, #192]	; 15514 <body_with_one_return@@Base+0x46c>
   15450:	add	r3, pc, r3
   15454:	ldr	ip, [r0]
   15458:	ldr	lr, [r0, #4]
   1545c:	adds	ip, ip, #1
   15460:	adc	lr, lr, #0
   15464:	str	ip, [r0]
   15468:	str	lr, [r0, #4]
   1546c:	mov	r0, r1
   15470:	mov	r1, r2
   15474:	movw	r2, #409	; 0x199
   15478:	bl	12010 <__assert_fail@plt>
   1547c:	ldr	r0, [sp, #4]
   15480:	ldr	r1, [r0]
   15484:	ldr	r2, [r0, #4]
   15488:	adds	r1, r1, #1
   1548c:	adc	r2, r2, #0
   15490:	str	r1, [r0]
   15494:	str	r2, [r0, #4]
   15498:	ldr	r0, [pc, #124]	; 1551c <body_with_one_return@@Base+0x474>
   1549c:	add	r0, pc, r0
   154a0:	ldr	r1, [r0, #104]	; 0x68
   154a4:	ldr	r2, [r0, #108]	; 0x6c
   154a8:	adds	r1, r1, #1
   154ac:	adc	r2, r2, #0
   154b0:	str	r1, [r0, #104]	; 0x68
   154b4:	str	r2, [r0, #108]	; 0x6c
   154b8:	mov	sp, fp
   154bc:	pop	{fp, pc}
   154c0:	andeq	ip, r1, r0, lsl #10
   154c4:	andeq	ip, r1, r8, lsl #8
   154c8:	andeq	fp, r1, r4, lsl #30
   154cc:	andeq	fp, r1, r4, lsr pc
   154d0:	muleq	r0, r4, r6
   154d4:	andeq	r9, r0, r6, asr #11
   154d8:	andeq	r9, r0, lr, lsr r9
   154dc:	ldrdeq	ip, [r1], -r4
   154e0:	andeq	ip, r1, r0, ror #6
   154e4:	andeq	r9, r0, r2, asr #15
   154e8:	andeq	r9, r0, lr, lsl #10
   154ec:	andeq	r9, r0, r6, lsl #17
   154f0:	andeq	ip, r1, ip, lsl r3
   154f4:	andeq	ip, r1, r8, lsr #5
   154f8:	muleq	r0, r4, r7
   154fc:	andeq	r9, r0, r6, asr r4
   15500:	andeq	r9, r0, lr, asr #15
   15504:	andeq	ip, r1, r4, ror #4
   15508:	strdeq	ip, [r1], -r0
   1550c:	andeq	r9, r0, lr, lsr r7
   15510:	muleq	r0, sl, r3
   15514:	andeq	r9, r0, r2, lsl r7
   15518:	andeq	ip, r1, r8, lsr #3
   1551c:	andeq	ip, r1, ip, lsl r1

00015520 <if_statement_inside_if_statement@@Base>:
   15520:	push	{fp, lr}
   15524:	mov	fp, sp
   15528:	sub	sp, sp, #72	; 0x48
   1552c:	ldr	r0, [pc, #1344]	; 15a74 <if_statement_inside_if_statement@@Base+0x554>
   15530:	add	r0, pc, r0
   15534:	str	r0, [sp, #36]	; 0x24
   15538:	ldr	r0, [sp, #36]	; 0x24
   1553c:	ldr	r1, [r0]
   15540:	ldr	r2, [r0, #4]
   15544:	adds	r1, r1, #1
   15548:	adc	r2, r2, #0
   1554c:	str	r1, [r0]
   15550:	str	r2, [r0, #4]
   15554:	movw	r0, #0
   15558:	str	r0, [fp, #-24]	; 0xffffffe8
   1555c:	sub	r0, fp, #16
   15560:	sub	r1, fp, #12
   15564:	bl	198c0 <init_grammar@@Base>
   15568:	movw	r0, #3
   1556c:	bl	11ee4 <malloc@plt>
   15570:	str	r0, [fp, #-28]	; 0xffffffe4
   15574:	movw	r0, #3
   15578:	bl	11ee4 <malloc@plt>
   1557c:	str	r0, [fp, #-32]	; 0xffffffe0
   15580:	ldr	r0, [fp, #-28]	; 0xffffffe4
   15584:	movw	r1, #33	; 0x21
   15588:	strb	r1, [r0]
   1558c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   15590:	movw	r2, #61	; 0x3d
   15594:	strb	r2, [r0, #1]
   15598:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1559c:	movw	r3, #0
   155a0:	strb	r3, [r0, #2]
   155a4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   155a8:	strb	r1, [r0]
   155ac:	ldr	r0, [fp, #-32]	; 0xffffffe0
   155b0:	strb	r2, [r0, #1]
   155b4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   155b8:	strb	r3, [r0, #2]
   155bc:	movw	r0, #76	; 0x4c
   155c0:	bl	11ee4 <malloc@plt>
   155c4:	str	r0, [fp, #-20]	; 0xffffffec
   155c8:	movw	r0, #4
   155cc:	bl	11ee4 <malloc@plt>
   155d0:	ldr	r1, [fp, #-20]	; 0xffffffec
   155d4:	str	r0, [r1]
   155d8:	ldr	r0, [fp, #-20]	; 0xffffffec
   155dc:	ldr	r0, [r0]
   155e0:	bl	16f5c <init_token_opar@@Base>
   155e4:	movw	r0, #8
   155e8:	bl	11ee4 <malloc@plt>
   155ec:	ldr	r1, [fp, #-20]	; 0xffffffec
   155f0:	str	r0, [r1, #4]
   155f4:	ldr	r0, [fp, #-20]	; 0xffffffec
   155f8:	ldr	r0, [r0, #4]
   155fc:	movw	r1, #1
   15600:	bl	16e44 <init_token_int_value@@Base>
   15604:	movw	r0, #8
   15608:	bl	11ee4 <malloc@plt>
   1560c:	ldr	r1, [fp, #-20]	; 0xffffffec
   15610:	str	r0, [r1, #8]
   15614:	ldr	r0, [fp, #-20]	; 0xffffffec
   15618:	ldr	r0, [r0, #8]
   1561c:	movw	r1, #1
   15620:	bl	16e44 <init_token_int_value@@Base>
   15624:	movw	r0, #8
   15628:	bl	11ee4 <malloc@plt>
   1562c:	ldr	r1, [fp, #-20]	; 0xffffffec
   15630:	str	r0, [r1, #12]
   15634:	ldr	r0, [fp, #-20]	; 0xffffffec
   15638:	ldr	r0, [r0, #12]
   1563c:	ldr	r1, [fp, #-28]	; 0xffffffe4
   15640:	bl	17370 <init_token_boolean_op@@Base>
   15644:	movw	r0, #8
   15648:	bl	11ee4 <malloc@plt>
   1564c:	ldr	r1, [fp, #-20]	; 0xffffffec
   15650:	str	r0, [r1, #16]
   15654:	ldr	r0, [fp, #-20]	; 0xffffffec
   15658:	ldr	r0, [r0, #16]
   1565c:	movw	r1, #1
   15660:	bl	16e44 <init_token_int_value@@Base>
   15664:	movw	r0, #4
   15668:	bl	11ee4 <malloc@plt>
   1566c:	ldr	r1, [fp, #-20]	; 0xffffffec
   15670:	str	r0, [r1, #20]
   15674:	ldr	r0, [fp, #-20]	; 0xffffffec
   15678:	ldr	r0, [r0, #20]
   1567c:	bl	16fd0 <init_token_cpar@@Base>
   15680:	movw	r0, #4
   15684:	bl	11ee4 <malloc@plt>
   15688:	ldr	r1, [fp, #-20]	; 0xffffffec
   1568c:	str	r0, [r1, #24]
   15690:	ldr	r0, [fp, #-20]	; 0xffffffec
   15694:	ldr	r0, [r0, #24]
   15698:	bl	17044 <init_token_obra@@Base>
   1569c:	movw	r0, #4
   156a0:	bl	11ee4 <malloc@plt>
   156a4:	ldr	r1, [fp, #-20]	; 0xffffffec
   156a8:	str	r0, [r1, #28]
   156ac:	ldr	r0, [fp, #-20]	; 0xffffffec
   156b0:	ldr	r0, [r0, #28]
   156b4:	bl	17288 <init_token_if@@Base>
   156b8:	movw	r0, #4
   156bc:	bl	11ee4 <malloc@plt>
   156c0:	ldr	r1, [fp, #-20]	; 0xffffffec
   156c4:	str	r0, [r1, #32]
   156c8:	ldr	r0, [fp, #-20]	; 0xffffffec
   156cc:	ldr	r0, [r0, #32]
   156d0:	bl	16f5c <init_token_opar@@Base>
   156d4:	movw	r0, #8
   156d8:	bl	11ee4 <malloc@plt>
   156dc:	ldr	r1, [fp, #-20]	; 0xffffffec
   156e0:	str	r0, [r1, #36]	; 0x24
   156e4:	ldr	r0, [fp, #-20]	; 0xffffffec
   156e8:	ldr	r0, [r0, #36]	; 0x24
   156ec:	movw	r1, #1
   156f0:	bl	16e44 <init_token_int_value@@Base>
   156f4:	movw	r0, #8
   156f8:	bl	11ee4 <malloc@plt>
   156fc:	ldr	r1, [fp, #-20]	; 0xffffffec
   15700:	str	r0, [r1, #40]	; 0x28
   15704:	ldr	r0, [fp, #-20]	; 0xffffffec
   15708:	ldr	r0, [r0, #40]	; 0x28
   1570c:	movw	r1, #1
   15710:	bl	16e44 <init_token_int_value@@Base>
   15714:	movw	r0, #8
   15718:	bl	11ee4 <malloc@plt>
   1571c:	ldr	r1, [fp, #-20]	; 0xffffffec
   15720:	str	r0, [r1, #44]	; 0x2c
   15724:	ldr	r0, [fp, #-20]	; 0xffffffec
   15728:	ldr	r0, [r0, #44]	; 0x2c
   1572c:	ldr	r1, [fp, #-32]	; 0xffffffe0
   15730:	bl	17370 <init_token_boolean_op@@Base>
   15734:	movw	r0, #8
   15738:	bl	11ee4 <malloc@plt>
   1573c:	ldr	r1, [fp, #-20]	; 0xffffffec
   15740:	str	r0, [r1, #48]	; 0x30
   15744:	ldr	r0, [fp, #-20]	; 0xffffffec
   15748:	ldr	r0, [r0, #48]	; 0x30
   1574c:	movw	r1, #1
   15750:	bl	16e44 <init_token_int_value@@Base>
   15754:	movw	r0, #4
   15758:	bl	11ee4 <malloc@plt>
   1575c:	ldr	r1, [fp, #-20]	; 0xffffffec
   15760:	str	r0, [r1, #52]	; 0x34
   15764:	ldr	r0, [fp, #-20]	; 0xffffffec
   15768:	ldr	r0, [r0, #52]	; 0x34
   1576c:	bl	16fd0 <init_token_cpar@@Base>
   15770:	movw	r0, #4
   15774:	bl	11ee4 <malloc@plt>
   15778:	ldr	r1, [fp, #-20]	; 0xffffffec
   1577c:	str	r0, [r1, #56]	; 0x38
   15780:	ldr	r0, [fp, #-20]	; 0xffffffec
   15784:	ldr	r0, [r0, #56]	; 0x38
   15788:	bl	17044 <init_token_obra@@Base>
   1578c:	movw	r0, #4
   15790:	bl	11ee4 <malloc@plt>
   15794:	ldr	r1, [fp, #-20]	; 0xffffffec
   15798:	str	r0, [r1, #60]	; 0x3c
   1579c:	ldr	r0, [fp, #-20]	; 0xffffffec
   157a0:	ldr	r0, [r0, #60]	; 0x3c
   157a4:	bl	170b8 <init_token_cbra@@Base>
   157a8:	movw	r0, #4
   157ac:	bl	11ee4 <malloc@plt>
   157b0:	ldr	r1, [fp, #-20]	; 0xffffffec
   157b4:	str	r0, [r1, #64]	; 0x40
   157b8:	ldr	r0, [fp, #-20]	; 0xffffffec
   157bc:	ldr	r0, [r0, #64]	; 0x40
   157c0:	bl	170b8 <init_token_cbra@@Base>
   157c4:	movw	r0, #4
   157c8:	bl	11ee4 <malloc@plt>
   157cc:	ldr	r1, [fp, #-20]	; 0xffffffec
   157d0:	str	r0, [r1, #68]	; 0x44
   157d4:	ldr	r0, [fp, #-20]	; 0xffffffec
   157d8:	ldr	r0, [r0, #68]	; 0x44
   157dc:	bl	170b8 <init_token_cbra@@Base>
   157e0:	movw	r0, #4
   157e4:	bl	11ee4 <malloc@plt>
   157e8:	ldr	r1, [fp, #-20]	; 0xffffffec
   157ec:	str	r0, [r1, #72]	; 0x48
   157f0:	ldr	r0, [fp, #-20]	; 0xffffffec
   157f4:	ldr	r0, [r0, #72]	; 0x48
   157f8:	bl	17214 <init_token_eof@@Base>
   157fc:	ldr	r0, [pc, #636]	; 15a80 <if_statement_inside_if_statement@@Base+0x560>
   15800:	ldr	r0, [pc, r0]
   15804:	ldr	r1, [fp, #-20]	; 0xffffffec
   15808:	str	r1, [r0, #228]	; 0xe4
   1580c:	movw	r1, #19
   15810:	str	r1, [r0, #220]	; 0xdc
   15814:	sub	r0, fp, #16
   15818:	bl	1a40c <read_if_statement@@Base>
   1581c:	ldr	r1, [pc, #596]	; 15a78 <if_statement_inside_if_statement@@Base+0x558>
   15820:	add	r1, pc, r1
   15824:	add	r2, r1, #8
   15828:	add	r1, r1, #16
   1582c:	ldr	r3, [pc, #584]	; 15a7c <if_statement_inside_if_statement@@Base+0x55c>
   15830:	ldr	r3, [pc, r3]
   15834:	str	r0, [fp, #-24]	; 0xffffffe8
   15838:	ldr	r0, [r3, #204]	; 0xcc
   1583c:	cmp	r0, #19
   15840:	str	r2, [sp, #32]
   15844:	str	r1, [sp, #28]
   15848:	bne	1587c <if_statement_inside_if_statement@@Base+0x35c>
   1584c:	ldr	r0, [sp, #32]
   15850:	ldr	r1, [pc, #568]	; 15a90 <if_statement_inside_if_statement@@Base+0x570>
   15854:	add	r1, pc, r1
   15858:	add	r1, r1, #24
   1585c:	ldr	r2, [r0]
   15860:	ldr	r3, [r0, #4]
   15864:	adds	r2, r2, #1
   15868:	adc	r3, r3, #0
   1586c:	str	r2, [r0]
   15870:	str	r3, [r0, #4]
   15874:	str	r1, [sp, #24]
   15878:	b	158c0 <if_statement_inside_if_statement@@Base+0x3a0>
   1587c:	ldr	r0, [sp, #28]
   15880:	ldr	r1, [pc, #508]	; 15a84 <if_statement_inside_if_statement@@Base+0x564>
   15884:	add	r1, pc, r1
   15888:	ldr	r2, [pc, #504]	; 15a88 <if_statement_inside_if_statement@@Base+0x568>
   1588c:	add	r2, pc, r2
   15890:	ldr	r3, [pc, #500]	; 15a8c <if_statement_inside_if_statement@@Base+0x56c>
   15894:	add	r3, pc, r3
   15898:	ldr	ip, [r0]
   1589c:	ldr	lr, [r0, #4]
   158a0:	adds	ip, ip, #1
   158a4:	adc	lr, lr, #0
   158a8:	str	ip, [r0]
   158ac:	str	lr, [r0, #4]
   158b0:	mov	r0, r1
   158b4:	mov	r1, r2
   158b8:	movw	r2, #480	; 0x1e0
   158bc:	bl	12010 <__assert_fail@plt>
   158c0:	ldr	r0, [sp, #24]
   158c4:	ldr	r1, [pc, #456]	; 15a94 <if_statement_inside_if_statement@@Base+0x574>
   158c8:	add	r1, pc, r1
   158cc:	add	r2, r1, #32
   158d0:	add	r1, r1, #40	; 0x28
   158d4:	ldr	r3, [r0]
   158d8:	ldr	ip, [r0, #4]
   158dc:	adds	r3, r3, #1
   158e0:	adc	ip, ip, #0
   158e4:	str	r3, [r0]
   158e8:	str	ip, [r0, #4]
   158ec:	ldr	r0, [fp, #-24]	; 0xffffffe8
   158f0:	movw	r3, #0
   158f4:	cmp	r0, r3
   158f8:	str	r2, [sp, #20]
   158fc:	str	r1, [sp, #16]
   15900:	beq	15934 <if_statement_inside_if_statement@@Base+0x414>
   15904:	ldr	r0, [sp, #20]
   15908:	ldr	r1, [pc, #404]	; 15aa4 <if_statement_inside_if_statement@@Base+0x584>
   1590c:	add	r1, pc, r1
   15910:	add	r1, r1, #48	; 0x30
   15914:	ldr	r2, [r0]
   15918:	ldr	r3, [r0, #4]
   1591c:	adds	r2, r2, #1
   15920:	adc	r3, r3, #0
   15924:	str	r2, [r0]
   15928:	str	r3, [r0, #4]
   1592c:	str	r1, [sp, #12]
   15930:	b	15978 <if_statement_inside_if_statement@@Base+0x458>
   15934:	ldr	r0, [sp, #16]
   15938:	ldr	r1, [pc, #344]	; 15a98 <if_statement_inside_if_statement@@Base+0x578>
   1593c:	add	r1, pc, r1
   15940:	ldr	r2, [pc, #340]	; 15a9c <if_statement_inside_if_statement@@Base+0x57c>
   15944:	add	r2, pc, r2
   15948:	ldr	r3, [pc, #336]	; 15aa0 <if_statement_inside_if_statement@@Base+0x580>
   1594c:	add	r3, pc, r3
   15950:	ldr	ip, [r0]
   15954:	ldr	lr, [r0, #4]
   15958:	adds	ip, ip, #1
   1595c:	adc	lr, lr, #0
   15960:	str	ip, [r0]
   15964:	str	lr, [r0, #4]
   15968:	mov	r0, r1
   1596c:	mov	r1, r2
   15970:	movw	r2, #481	; 0x1e1
   15974:	bl	12010 <__assert_fail@plt>
   15978:	ldr	r0, [sp, #12]
   1597c:	ldr	r1, [pc, #292]	; 15aa8 <if_statement_inside_if_statement@@Base+0x588>
   15980:	add	r1, pc, r1
   15984:	add	r2, r1, #56	; 0x38
   15988:	add	r1, r1, #64	; 0x40
   1598c:	ldr	r3, [r0]
   15990:	ldr	ip, [r0, #4]
   15994:	adds	r3, r3, #1
   15998:	adc	ip, ip, #0
   1599c:	str	r3, [r0]
   159a0:	str	ip, [r0, #4]
   159a4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   159a8:	ldr	r0, [r0]
   159ac:	cmp	r0, #4
   159b0:	str	r2, [sp, #8]
   159b4:	str	r1, [sp, #4]
   159b8:	bne	159ec <if_statement_inside_if_statement@@Base+0x4cc>
   159bc:	ldr	r0, [sp, #8]
   159c0:	ldr	r1, [pc, #240]	; 15ab8 <if_statement_inside_if_statement@@Base+0x598>
   159c4:	add	r1, pc, r1
   159c8:	add	r1, r1, #72	; 0x48
   159cc:	ldr	r2, [r0]
   159d0:	ldr	r3, [r0, #4]
   159d4:	adds	r2, r2, #1
   159d8:	adc	r3, r3, #0
   159dc:	str	r2, [r0]
   159e0:	str	r3, [r0, #4]
   159e4:	str	r1, [sp]
   159e8:	b	15a30 <if_statement_inside_if_statement@@Base+0x510>
   159ec:	ldr	r0, [sp, #4]
   159f0:	ldr	r1, [pc, #180]	; 15aac <if_statement_inside_if_statement@@Base+0x58c>
   159f4:	add	r1, pc, r1
   159f8:	ldr	r2, [pc, #176]	; 15ab0 <if_statement_inside_if_statement@@Base+0x590>
   159fc:	add	r2, pc, r2
   15a00:	ldr	r3, [pc, #172]	; 15ab4 <if_statement_inside_if_statement@@Base+0x594>
   15a04:	add	r3, pc, r3
   15a08:	ldr	ip, [r0]
   15a0c:	ldr	lr, [r0, #4]
   15a10:	adds	ip, ip, #1
   15a14:	adc	lr, lr, #0
   15a18:	str	ip, [r0]
   15a1c:	str	lr, [r0, #4]
   15a20:	mov	r0, r1
   15a24:	mov	r1, r2
   15a28:	movw	r2, #482	; 0x1e2
   15a2c:	bl	12010 <__assert_fail@plt>
   15a30:	ldr	r0, [sp]
   15a34:	ldr	r1, [r0]
   15a38:	ldr	r2, [r0, #4]
   15a3c:	adds	r1, r1, #1
   15a40:	adc	r2, r2, #0
   15a44:	str	r1, [r0]
   15a48:	str	r2, [r0, #4]
   15a4c:	ldr	r0, [pc, #104]	; 15abc <if_statement_inside_if_statement@@Base+0x59c>
   15a50:	add	r0, pc, r0
   15a54:	ldr	r1, [r0, #80]	; 0x50
   15a58:	ldr	r2, [r0, #84]	; 0x54
   15a5c:	adds	r1, r1, #1
   15a60:	adc	r2, r2, #0
   15a64:	str	r1, [r0, #80]	; 0x50
   15a68:	str	r2, [r0, #84]	; 0x54
   15a6c:	mov	sp, fp
   15a70:	pop	{fp, pc}
   15a74:	strdeq	ip, [r1], -r8
   15a78:	andeq	fp, r1, r8, lsl #28
   15a7c:	muleq	r1, r4, r8
   15a80:	andeq	fp, r1, r4, asr #17
   15a84:	andeq	r9, r0, ip, lsl #6
   15a88:	andeq	r8, r0, r6, asr pc
   15a8c:	andeq	r9, r0, r7, lsl r3
   15a90:	ldrdeq	fp, [r1], -r4
   15a94:	andeq	fp, r1, r0, ror #26
   15a98:	andeq	r9, r0, r2, asr r1
   15a9c:	muleq	r0, lr, lr
   15aa0:	andeq	r9, r0, pc, asr r2
   15aa4:	andeq	fp, r1, ip, lsl sp
   15aa8:	andeq	fp, r1, r8, lsr #25
   15aac:	andeq	r9, r0, r6, lsr #1
   15ab0:	andeq	r8, r0, r6, ror #27
   15ab4:	andeq	r9, r0, r7, lsr #3
   15ab8:	andeq	fp, r1, r4, ror #24
   15abc:	ldrdeq	fp, [r1], -r8

00015ac0 <if_statement_inside_else_statement@@Base>:
   15ac0:	push	{fp, lr}
   15ac4:	mov	fp, sp
   15ac8:	sub	sp, sp, #72	; 0x48
   15acc:	ldr	r0, [pc, #1400]	; 1604c <if_statement_inside_else_statement@@Base+0x58c>
   15ad0:	add	r0, pc, r0
   15ad4:	str	r0, [sp, #36]	; 0x24
   15ad8:	ldr	r0, [sp, #36]	; 0x24
   15adc:	ldr	r1, [r0]
   15ae0:	ldr	r2, [r0, #4]
   15ae4:	adds	r1, r1, #1
   15ae8:	adc	r2, r2, #0
   15aec:	str	r1, [r0]
   15af0:	str	r2, [r0, #4]
   15af4:	movw	r0, #0
   15af8:	str	r0, [fp, #-24]	; 0xffffffe8
   15afc:	sub	r0, fp, #16
   15b00:	sub	r1, fp, #12
   15b04:	bl	198c0 <init_grammar@@Base>
   15b08:	movw	r0, #3
   15b0c:	bl	11ee4 <malloc@plt>
   15b10:	str	r0, [fp, #-28]	; 0xffffffe4
   15b14:	movw	r0, #3
   15b18:	bl	11ee4 <malloc@plt>
   15b1c:	str	r0, [fp, #-32]	; 0xffffffe0
   15b20:	ldr	r0, [fp, #-28]	; 0xffffffe4
   15b24:	movw	r1, #33	; 0x21
   15b28:	strb	r1, [r0]
   15b2c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   15b30:	movw	r2, #61	; 0x3d
   15b34:	strb	r2, [r0, #1]
   15b38:	ldr	r0, [fp, #-28]	; 0xffffffe4
   15b3c:	movw	r3, #0
   15b40:	strb	r3, [r0, #2]
   15b44:	ldr	r0, [fp, #-32]	; 0xffffffe0
   15b48:	strb	r1, [r0]
   15b4c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   15b50:	strb	r2, [r0, #1]
   15b54:	ldr	r0, [fp, #-32]	; 0xffffffe0
   15b58:	strb	r3, [r0, #2]
   15b5c:	movw	r0, #84	; 0x54
   15b60:	bl	11ee4 <malloc@plt>
   15b64:	str	r0, [fp, #-20]	; 0xffffffec
   15b68:	movw	r0, #4
   15b6c:	bl	11ee4 <malloc@plt>
   15b70:	ldr	r1, [fp, #-20]	; 0xffffffec
   15b74:	str	r0, [r1]
   15b78:	ldr	r0, [fp, #-20]	; 0xffffffec
   15b7c:	ldr	r0, [r0]
   15b80:	bl	16f5c <init_token_opar@@Base>
   15b84:	movw	r0, #8
   15b88:	bl	11ee4 <malloc@plt>
   15b8c:	ldr	r1, [fp, #-20]	; 0xffffffec
   15b90:	str	r0, [r1, #4]
   15b94:	ldr	r0, [fp, #-20]	; 0xffffffec
   15b98:	ldr	r0, [r0, #4]
   15b9c:	movw	r1, #1
   15ba0:	bl	16e44 <init_token_int_value@@Base>
   15ba4:	movw	r0, #8
   15ba8:	bl	11ee4 <malloc@plt>
   15bac:	ldr	r1, [fp, #-20]	; 0xffffffec
   15bb0:	str	r0, [r1, #8]
   15bb4:	ldr	r0, [fp, #-20]	; 0xffffffec
   15bb8:	ldr	r0, [r0, #8]
   15bbc:	movw	r1, #1
   15bc0:	bl	16e44 <init_token_int_value@@Base>
   15bc4:	movw	r0, #8
   15bc8:	bl	11ee4 <malloc@plt>
   15bcc:	ldr	r1, [fp, #-20]	; 0xffffffec
   15bd0:	str	r0, [r1, #12]
   15bd4:	ldr	r0, [fp, #-20]	; 0xffffffec
   15bd8:	ldr	r0, [r0, #12]
   15bdc:	ldr	r1, [fp, #-28]	; 0xffffffe4
   15be0:	bl	17370 <init_token_boolean_op@@Base>
   15be4:	movw	r0, #8
   15be8:	bl	11ee4 <malloc@plt>
   15bec:	ldr	r1, [fp, #-20]	; 0xffffffec
   15bf0:	str	r0, [r1, #16]
   15bf4:	ldr	r0, [fp, #-20]	; 0xffffffec
   15bf8:	ldr	r0, [r0, #16]
   15bfc:	movw	r1, #1
   15c00:	bl	16e44 <init_token_int_value@@Base>
   15c04:	movw	r0, #4
   15c08:	bl	11ee4 <malloc@plt>
   15c0c:	ldr	r1, [fp, #-20]	; 0xffffffec
   15c10:	str	r0, [r1, #20]
   15c14:	ldr	r0, [fp, #-20]	; 0xffffffec
   15c18:	ldr	r0, [r0, #20]
   15c1c:	bl	16fd0 <init_token_cpar@@Base>
   15c20:	movw	r0, #4
   15c24:	bl	11ee4 <malloc@plt>
   15c28:	ldr	r1, [fp, #-20]	; 0xffffffec
   15c2c:	str	r0, [r1, #24]
   15c30:	ldr	r0, [fp, #-20]	; 0xffffffec
   15c34:	ldr	r0, [r0, #24]
   15c38:	bl	17044 <init_token_obra@@Base>
   15c3c:	movw	r0, #4
   15c40:	bl	11ee4 <malloc@plt>
   15c44:	ldr	r1, [fp, #-20]	; 0xffffffec
   15c48:	str	r0, [r1, #28]
   15c4c:	ldr	r0, [fp, #-20]	; 0xffffffec
   15c50:	ldr	r0, [r0, #28]
   15c54:	bl	170b8 <init_token_cbra@@Base>
   15c58:	movw	r0, #4
   15c5c:	bl	11ee4 <malloc@plt>
   15c60:	ldr	r1, [fp, #-20]	; 0xffffffec
   15c64:	str	r0, [r1, #32]
   15c68:	ldr	r0, [fp, #-20]	; 0xffffffec
   15c6c:	ldr	r0, [r0, #32]
   15c70:	bl	172fc <init_token_else@@Base>
   15c74:	movw	r0, #4
   15c78:	bl	11ee4 <malloc@plt>
   15c7c:	ldr	r1, [fp, #-20]	; 0xffffffec
   15c80:	str	r0, [r1, #36]	; 0x24
   15c84:	ldr	r0, [fp, #-20]	; 0xffffffec
   15c88:	ldr	r0, [r0, #36]	; 0x24
   15c8c:	bl	17044 <init_token_obra@@Base>
   15c90:	movw	r0, #4
   15c94:	bl	11ee4 <malloc@plt>
   15c98:	ldr	r1, [fp, #-20]	; 0xffffffec
   15c9c:	str	r0, [r1, #40]	; 0x28
   15ca0:	ldr	r0, [fp, #-20]	; 0xffffffec
   15ca4:	ldr	r0, [r0, #40]	; 0x28
   15ca8:	bl	17288 <init_token_if@@Base>
   15cac:	movw	r0, #4
   15cb0:	bl	11ee4 <malloc@plt>
   15cb4:	ldr	r1, [fp, #-20]	; 0xffffffec
   15cb8:	str	r0, [r1, #44]	; 0x2c
   15cbc:	ldr	r0, [fp, #-20]	; 0xffffffec
   15cc0:	ldr	r0, [r0, #44]	; 0x2c
   15cc4:	bl	16f5c <init_token_opar@@Base>
   15cc8:	movw	r0, #8
   15ccc:	bl	11ee4 <malloc@plt>
   15cd0:	ldr	r1, [fp, #-20]	; 0xffffffec
   15cd4:	str	r0, [r1, #48]	; 0x30
   15cd8:	ldr	r0, [fp, #-20]	; 0xffffffec
   15cdc:	ldr	r0, [r0, #48]	; 0x30
   15ce0:	movw	r1, #1
   15ce4:	bl	16e44 <init_token_int_value@@Base>
   15ce8:	movw	r0, #8
   15cec:	bl	11ee4 <malloc@plt>
   15cf0:	ldr	r1, [fp, #-20]	; 0xffffffec
   15cf4:	str	r0, [r1, #52]	; 0x34
   15cf8:	ldr	r0, [fp, #-20]	; 0xffffffec
   15cfc:	ldr	r0, [r0, #52]	; 0x34
   15d00:	movw	r1, #1
   15d04:	bl	16e44 <init_token_int_value@@Base>
   15d08:	movw	r0, #8
   15d0c:	bl	11ee4 <malloc@plt>
   15d10:	ldr	r1, [fp, #-20]	; 0xffffffec
   15d14:	str	r0, [r1, #56]	; 0x38
   15d18:	ldr	r0, [fp, #-20]	; 0xffffffec
   15d1c:	ldr	r0, [r0, #56]	; 0x38
   15d20:	ldr	r1, [fp, #-32]	; 0xffffffe0
   15d24:	bl	17370 <init_token_boolean_op@@Base>
   15d28:	movw	r0, #8
   15d2c:	bl	11ee4 <malloc@plt>
   15d30:	ldr	r1, [fp, #-20]	; 0xffffffec
   15d34:	str	r0, [r1, #60]	; 0x3c
   15d38:	ldr	r0, [fp, #-20]	; 0xffffffec
   15d3c:	ldr	r0, [r0, #60]	; 0x3c
   15d40:	movw	r1, #1
   15d44:	bl	16e44 <init_token_int_value@@Base>
   15d48:	movw	r0, #4
   15d4c:	bl	11ee4 <malloc@plt>
   15d50:	ldr	r1, [fp, #-20]	; 0xffffffec
   15d54:	str	r0, [r1, #64]	; 0x40
   15d58:	ldr	r0, [fp, #-20]	; 0xffffffec
   15d5c:	ldr	r0, [r0, #64]	; 0x40
   15d60:	bl	16fd0 <init_token_cpar@@Base>
   15d64:	movw	r0, #4
   15d68:	bl	11ee4 <malloc@plt>
   15d6c:	ldr	r1, [fp, #-20]	; 0xffffffec
   15d70:	str	r0, [r1, #68]	; 0x44
   15d74:	ldr	r0, [fp, #-20]	; 0xffffffec
   15d78:	ldr	r0, [r0, #68]	; 0x44
   15d7c:	bl	17044 <init_token_obra@@Base>
   15d80:	movw	r0, #4
   15d84:	bl	11ee4 <malloc@plt>
   15d88:	ldr	r1, [fp, #-20]	; 0xffffffec
   15d8c:	str	r0, [r1, #72]	; 0x48
   15d90:	ldr	r0, [fp, #-20]	; 0xffffffec
   15d94:	ldr	r0, [r0, #72]	; 0x48
   15d98:	bl	170b8 <init_token_cbra@@Base>
   15d9c:	movw	r0, #4
   15da0:	bl	11ee4 <malloc@plt>
   15da4:	ldr	r1, [fp, #-20]	; 0xffffffec
   15da8:	str	r0, [r1, #76]	; 0x4c
   15dac:	ldr	r0, [fp, #-20]	; 0xffffffec
   15db0:	ldr	r0, [r0, #76]	; 0x4c
   15db4:	bl	170b8 <init_token_cbra@@Base>
   15db8:	movw	r0, #4
   15dbc:	bl	11ee4 <malloc@plt>
   15dc0:	ldr	r1, [fp, #-20]	; 0xffffffec
   15dc4:	str	r0, [r1, #80]	; 0x50
   15dc8:	ldr	r0, [fp, #-20]	; 0xffffffec
   15dcc:	ldr	r0, [r0, #80]	; 0x50
   15dd0:	bl	170b8 <init_token_cbra@@Base>
   15dd4:	ldr	r0, [pc, #636]	; 16058 <if_statement_inside_else_statement@@Base+0x598>
   15dd8:	ldr	r0, [pc, r0]
   15ddc:	ldr	r1, [fp, #-20]	; 0xffffffec
   15de0:	str	r1, [r0, #228]	; 0xe4
   15de4:	movw	r1, #21
   15de8:	str	r1, [r0, #220]	; 0xdc
   15dec:	sub	r0, fp, #16
   15df0:	bl	1a40c <read_if_statement@@Base>
   15df4:	ldr	r1, [pc, #596]	; 16050 <if_statement_inside_else_statement@@Base+0x590>
   15df8:	add	r1, pc, r1
   15dfc:	add	r2, r1, #8
   15e00:	add	r1, r1, #16
   15e04:	ldr	r3, [pc, #584]	; 16054 <if_statement_inside_else_statement@@Base+0x594>
   15e08:	ldr	r3, [pc, r3]
   15e0c:	str	r0, [fp, #-24]	; 0xffffffe8
   15e10:	ldr	r0, [r3, #204]	; 0xcc
   15e14:	cmp	r0, #21
   15e18:	str	r2, [sp, #32]
   15e1c:	str	r1, [sp, #28]
   15e20:	bne	15e54 <if_statement_inside_else_statement@@Base+0x394>
   15e24:	ldr	r0, [sp, #32]
   15e28:	ldr	r1, [pc, #568]	; 16068 <if_statement_inside_else_statement@@Base+0x5a8>
   15e2c:	add	r1, pc, r1
   15e30:	add	r1, r1, #24
   15e34:	ldr	r2, [r0]
   15e38:	ldr	r3, [r0, #4]
   15e3c:	adds	r2, r2, #1
   15e40:	adc	r3, r3, #0
   15e44:	str	r2, [r0]
   15e48:	str	r3, [r0, #4]
   15e4c:	str	r1, [sp, #24]
   15e50:	b	15e98 <if_statement_inside_else_statement@@Base+0x3d8>
   15e54:	ldr	r0, [sp, #28]
   15e58:	ldr	r1, [pc, #508]	; 1605c <if_statement_inside_else_statement@@Base+0x59c>
   15e5c:	add	r1, pc, r1
   15e60:	ldr	r2, [pc, #504]	; 16060 <if_statement_inside_else_statement@@Base+0x5a0>
   15e64:	add	r2, pc, r2
   15e68:	ldr	r3, [pc, #500]	; 16064 <if_statement_inside_else_statement@@Base+0x5a4>
   15e6c:	add	r3, pc, r3
   15e70:	ldr	ip, [r0]
   15e74:	ldr	lr, [r0, #4]
   15e78:	adds	ip, ip, #1
   15e7c:	adc	lr, lr, #0
   15e80:	str	ip, [r0]
   15e84:	str	lr, [r0, #4]
   15e88:	mov	r0, r1
   15e8c:	mov	r1, r2
   15e90:	movw	r2, #558	; 0x22e
   15e94:	bl	12010 <__assert_fail@plt>
   15e98:	ldr	r0, [sp, #24]
   15e9c:	ldr	r1, [pc, #456]	; 1606c <if_statement_inside_else_statement@@Base+0x5ac>
   15ea0:	add	r1, pc, r1
   15ea4:	add	r2, r1, #32
   15ea8:	add	r1, r1, #40	; 0x28
   15eac:	ldr	r3, [r0]
   15eb0:	ldr	ip, [r0, #4]
   15eb4:	adds	r3, r3, #1
   15eb8:	adc	ip, ip, #0
   15ebc:	str	r3, [r0]
   15ec0:	str	ip, [r0, #4]
   15ec4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15ec8:	movw	r3, #0
   15ecc:	cmp	r0, r3
   15ed0:	str	r2, [sp, #20]
   15ed4:	str	r1, [sp, #16]
   15ed8:	beq	15f0c <if_statement_inside_else_statement@@Base+0x44c>
   15edc:	ldr	r0, [sp, #20]
   15ee0:	ldr	r1, [pc, #404]	; 1607c <if_statement_inside_else_statement@@Base+0x5bc>
   15ee4:	add	r1, pc, r1
   15ee8:	add	r1, r1, #48	; 0x30
   15eec:	ldr	r2, [r0]
   15ef0:	ldr	r3, [r0, #4]
   15ef4:	adds	r2, r2, #1
   15ef8:	adc	r3, r3, #0
   15efc:	str	r2, [r0]
   15f00:	str	r3, [r0, #4]
   15f04:	str	r1, [sp, #12]
   15f08:	b	15f50 <if_statement_inside_else_statement@@Base+0x490>
   15f0c:	ldr	r0, [sp, #16]
   15f10:	ldr	r1, [pc, #344]	; 16070 <if_statement_inside_else_statement@@Base+0x5b0>
   15f14:	add	r1, pc, r1
   15f18:	ldr	r2, [pc, #340]	; 16074 <if_statement_inside_else_statement@@Base+0x5b4>
   15f1c:	add	r2, pc, r2
   15f20:	ldr	r3, [pc, #336]	; 16078 <if_statement_inside_else_statement@@Base+0x5b8>
   15f24:	add	r3, pc, r3
   15f28:	ldr	ip, [r0]
   15f2c:	ldr	lr, [r0, #4]
   15f30:	adds	ip, ip, #1
   15f34:	adc	lr, lr, #0
   15f38:	str	ip, [r0]
   15f3c:	str	lr, [r0, #4]
   15f40:	mov	r0, r1
   15f44:	mov	r1, r2
   15f48:	movw	r2, #559	; 0x22f
   15f4c:	bl	12010 <__assert_fail@plt>
   15f50:	ldr	r0, [sp, #12]
   15f54:	ldr	r1, [pc, #292]	; 16080 <if_statement_inside_else_statement@@Base+0x5c0>
   15f58:	add	r1, pc, r1
   15f5c:	add	r2, r1, #56	; 0x38
   15f60:	add	r1, r1, #64	; 0x40
   15f64:	ldr	r3, [r0]
   15f68:	ldr	ip, [r0, #4]
   15f6c:	adds	r3, r3, #1
   15f70:	adc	ip, ip, #0
   15f74:	str	r3, [r0]
   15f78:	str	ip, [r0, #4]
   15f7c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15f80:	ldr	r0, [r0]
   15f84:	cmp	r0, #4
   15f88:	str	r2, [sp, #8]
   15f8c:	str	r1, [sp, #4]
   15f90:	bne	15fc4 <if_statement_inside_else_statement@@Base+0x504>
   15f94:	ldr	r0, [sp, #8]
   15f98:	ldr	r1, [pc, #240]	; 16090 <if_statement_inside_else_statement@@Base+0x5d0>
   15f9c:	add	r1, pc, r1
   15fa0:	add	r1, r1, #72	; 0x48
   15fa4:	ldr	r2, [r0]
   15fa8:	ldr	r3, [r0, #4]
   15fac:	adds	r2, r2, #1
   15fb0:	adc	r3, r3, #0
   15fb4:	str	r2, [r0]
   15fb8:	str	r3, [r0, #4]
   15fbc:	str	r1, [sp]
   15fc0:	b	16008 <if_statement_inside_else_statement@@Base+0x548>
   15fc4:	ldr	r0, [sp, #4]
   15fc8:	ldr	r1, [pc, #180]	; 16084 <if_statement_inside_else_statement@@Base+0x5c4>
   15fcc:	add	r1, pc, r1
   15fd0:	ldr	r2, [pc, #176]	; 16088 <if_statement_inside_else_statement@@Base+0x5c8>
   15fd4:	add	r2, pc, r2
   15fd8:	ldr	r3, [pc, #172]	; 1608c <if_statement_inside_else_statement@@Base+0x5cc>
   15fdc:	add	r3, pc, r3
   15fe0:	ldr	ip, [r0]
   15fe4:	ldr	lr, [r0, #4]
   15fe8:	adds	ip, ip, #1
   15fec:	adc	lr, lr, #0
   15ff0:	str	ip, [r0]
   15ff4:	str	lr, [r0, #4]
   15ff8:	mov	r0, r1
   15ffc:	mov	r1, r2
   16000:	movw	r2, #560	; 0x230
   16004:	bl	12010 <__assert_fail@plt>
   16008:	ldr	r0, [sp]
   1600c:	ldr	r1, [r0]
   16010:	ldr	r2, [r0, #4]
   16014:	adds	r1, r1, #1
   16018:	adc	r2, r2, #0
   1601c:	str	r1, [r0]
   16020:	str	r2, [r0, #4]
   16024:	ldr	r0, [pc, #104]	; 16094 <if_statement_inside_else_statement@@Base+0x5d4>
   16028:	add	r0, pc, r0
   1602c:	ldr	r1, [r0, #80]	; 0x50
   16030:	ldr	r2, [r0, #84]	; 0x54
   16034:	adds	r1, r1, #1
   16038:	adc	r2, r2, #0
   1603c:	str	r1, [r0, #80]	; 0x50
   16040:	str	r2, [r0, #84]	; 0x54
   16044:	mov	sp, fp
   16048:	pop	{fp, pc}
   1604c:			; <UNDEFINED> instruction: 0x0001bbb8
   16050:	muleq	r1, r0, r8
   16054:			; <UNDEFINED> instruction: 0x0001b2bc
   16058:	andeq	fp, r1, ip, ror #5
   1605c:	andeq	r8, r0, r7, ror sp
   16060:	andeq	r8, r0, lr, ror r9
   16064:	andeq	r8, r0, r2, lsl #27
   16068:	andeq	fp, r1, ip, asr r8
   1606c:	andeq	fp, r1, r8, ror #15
   16070:	andeq	r8, r0, sl, ror fp
   16074:	andeq	r8, r0, r6, asr #17
   16078:	andeq	r8, r0, sl, asr #25
   1607c:	andeq	fp, r1, r4, lsr #15
   16080:	andeq	fp, r1, r0, lsr r7
   16084:	andeq	r8, r0, lr, asr #21
   16088:	andeq	r8, r0, lr, lsl #16
   1608c:	andeq	r8, r0, r2, lsl ip
   16090:	andeq	fp, r1, ip, ror #13
   16094:	andeq	fp, r1, r0, ror #12

00016098 <main@@Base>:
   16098:	push	{fp, lr}
   1609c:	mov	fp, sp
   160a0:	sub	sp, sp, #136	; 0x88
   160a4:	ldr	r0, [pc, #1100]	; 164f8 <main@@Base+0x460>
   160a8:	add	r0, pc, r0
   160ac:	str	r0, [fp, #-8]
   160b0:	ldr	r0, [fp, #-8]
   160b4:	ldr	r1, [pc, #1316]	; 165e0 <main@@Base+0x548>
   160b8:	ldr	r1, [pc, r1]
   160bc:	ldr	r2, [r0]
   160c0:	ldr	r3, [r0, #4]
   160c4:	adds	r2, r2, #1
   160c8:	adc	r3, r3, #0
   160cc:	str	r2, [r0]
   160d0:	str	r3, [r0, #4]
   160d4:	ldr	r0, [pc, #1288]	; 165e4 <main@@Base+0x54c>
   160d8:	add	r0, pc, r0
   160dc:	ldr	r2, [r0, #8]
   160e0:	ldr	r3, [r0, #12]
   160e4:	adds	r2, r2, #1
   160e8:	adc	r3, r3, #0
   160ec:	str	r2, [r0, #8]
   160f0:	str	r3, [r0, #12]
   160f4:	movw	r0, #0
   160f8:	str	r0, [fp, #-4]
   160fc:	ldr	r1, [r1]
   16100:	str	r0, [fp, #-12]
   16104:	mov	r0, r1
   16108:	ldr	r1, [fp, #-12]
   1610c:	bl	11e3c <setbuf@plt>
   16110:	ldr	r0, [pc, #1216]	; 165d8 <main@@Base+0x540>
   16114:	add	r1, pc, r0
   16118:	ldr	r0, [pc, #1212]	; 165dc <main@@Base+0x544>
   1611c:	ldr	r0, [pc, r0]
   16120:	ldr	r0, [r0]
   16124:	bl	11f44 <fprintf@plt>
   16128:	ldr	r1, [pc, #1184]	; 165d0 <main@@Base+0x538>
   1612c:	add	r1, pc, r1
   16130:	ldr	r2, [pc, #1180]	; 165d4 <main@@Base+0x53c>
   16134:	ldr	r2, [pc, r2]
   16138:	ldr	r2, [r2]
   1613c:	str	r0, [fp, #-16]
   16140:	mov	r0, r2
   16144:	bl	11f44 <fprintf@plt>
   16148:	ldr	r1, [pc, #1144]	; 165c8 <main@@Base+0x530>
   1614c:	add	r1, pc, r1
   16150:	ldr	r2, [pc, #1140]	; 165cc <main@@Base+0x534>
   16154:	ldr	r2, [pc, r2]
   16158:	ldr	r2, [r2]
   1615c:	str	r0, [fp, #-20]	; 0xffffffec
   16160:	mov	r0, r2
   16164:	bl	11f44 <fprintf@plt>
   16168:	movw	r1, #0
   1616c:	str	r0, [fp, #-24]	; 0xffffffe8
   16170:	mov	r0, r1
   16174:	bl	11e60 <fflush@plt>
   16178:	ldr	r1, [pc, #1084]	; 165bc <main@@Base+0x524>
   1617c:	add	r1, pc, r1
   16180:	ldr	r2, [pc, #1080]	; 165c0 <main@@Base+0x528>
   16184:	add	r2, pc, r2
   16188:	ldr	r3, [pc, #1076]	; 165c4 <main@@Base+0x52c>
   1618c:	add	r3, pc, r3
   16190:	str	r0, [fp, #-28]	; 0xffffffe4
   16194:	mov	r0, r1
   16198:	mov	r1, r2
   1619c:	mov	r2, r3
   161a0:	bl	11e54 <printf@plt>
   161a4:	str	r0, [fp, #-32]	; 0xffffffe0
   161a8:	bl	12a70 <setup@@Base>
   161ac:	bl	12ae0 <no_int_as_first_stuff@@Base>
   161b0:	ldr	r0, [pc, #1024]	; 165b8 <main@@Base+0x520>
   161b4:	add	r0, pc, r0
   161b8:	bl	11e54 <printf@plt>
   161bc:	ldr	r1, [pc, #1000]	; 165ac <main@@Base+0x514>
   161c0:	add	r1, pc, r1
   161c4:	ldr	r2, [pc, #996]	; 165b0 <main@@Base+0x518>
   161c8:	add	r2, pc, r2
   161cc:	ldr	r3, [pc, #992]	; 165b4 <main@@Base+0x51c>
   161d0:	add	r3, pc, r3
   161d4:	str	r0, [fp, #-36]	; 0xffffffdc
   161d8:	mov	r0, r1
   161dc:	mov	r1, r2
   161e0:	mov	r2, r3
   161e4:	bl	11e54 <printf@plt>
   161e8:	str	r0, [fp, #-40]	; 0xffffffd8
   161ec:	bl	12a70 <setup@@Base>
   161f0:	bl	12d2c <int_but_not_followed_by_function@@Base>
   161f4:	ldr	r0, [pc, #940]	; 165a8 <main@@Base+0x510>
   161f8:	add	r0, pc, r0
   161fc:	bl	11e54 <printf@plt>
   16200:	ldr	r1, [pc, #916]	; 1659c <main@@Base+0x504>
   16204:	add	r1, pc, r1
   16208:	ldr	r2, [pc, #912]	; 165a0 <main@@Base+0x508>
   1620c:	add	r2, pc, r2
   16210:	ldr	r3, [pc, #908]	; 165a4 <main@@Base+0x50c>
   16214:	add	r3, pc, r3
   16218:	str	r0, [fp, #-44]	; 0xffffffd4
   1621c:	mov	r0, r1
   16220:	mov	r1, r2
   16224:	mov	r2, r3
   16228:	bl	11e54 <printf@plt>
   1622c:	str	r0, [fp, #-48]	; 0xffffffd0
   16230:	bl	12a70 <setup@@Base>
   16234:	bl	13cfc <boolean_unary_operator_is_read_properly@@Base>
   16238:	ldr	r0, [pc, #856]	; 16598 <main@@Base+0x500>
   1623c:	add	r0, pc, r0
   16240:	bl	11e54 <printf@plt>
   16244:	ldr	r1, [pc, #832]	; 1658c <main@@Base+0x4f4>
   16248:	add	r1, pc, r1
   1624c:	ldr	r2, [pc, #828]	; 16590 <main@@Base+0x4f8>
   16250:	add	r2, pc, r2
   16254:	ldr	r3, [pc, #824]	; 16594 <main@@Base+0x4fc>
   16258:	add	r3, pc, r3
   1625c:	str	r0, [fp, #-52]	; 0xffffffcc
   16260:	mov	r0, r1
   16264:	mov	r1, r2
   16268:	mov	r2, r3
   1626c:	bl	11e54 <printf@plt>
   16270:	str	r0, [fp, #-56]	; 0xffffffc8
   16274:	bl	12a70 <setup@@Base>
   16278:	bl	137a8 <boolean_binary_operator_is_read_properly@@Base>
   1627c:	ldr	r0, [pc, #772]	; 16588 <main@@Base+0x4f0>
   16280:	add	r0, pc, r0
   16284:	bl	11e54 <printf@plt>
   16288:	ldr	r1, [pc, #748]	; 1657c <main@@Base+0x4e4>
   1628c:	add	r1, pc, r1
   16290:	ldr	r2, [pc, #744]	; 16580 <main@@Base+0x4e8>
   16294:	add	r2, pc, r2
   16298:	ldr	r3, [pc, #740]	; 16584 <main@@Base+0x4ec>
   1629c:	add	r3, pc, r3
   162a0:	str	r0, [fp, #-60]	; 0xffffffc4
   162a4:	mov	r0, r1
   162a8:	mov	r1, r2
   162ac:	mov	r2, r3
   162b0:	bl	11e54 <printf@plt>
   162b4:	str	r0, [fp, #-64]	; 0xffffffc0
   162b8:	bl	12a70 <setup@@Base>
   162bc:	bl	12fb0 <boolean_expression_is_read_properly@@Base>
   162c0:	ldr	r0, [pc, #688]	; 16578 <main@@Base+0x4e0>
   162c4:	add	r0, pc, r0
   162c8:	bl	11e54 <printf@plt>
   162cc:	ldr	r1, [pc, #664]	; 1656c <main@@Base+0x4d4>
   162d0:	add	r1, pc, r1
   162d4:	ldr	r2, [pc, #660]	; 16570 <main@@Base+0x4d8>
   162d8:	add	r2, pc, r2
   162dc:	ldr	r3, [pc, #656]	; 16574 <main@@Base+0x4dc>
   162e0:	add	r3, pc, r3
   162e4:	str	r0, [sp, #68]	; 0x44
   162e8:	mov	r0, r1
   162ec:	mov	r1, r2
   162f0:	mov	r2, r3
   162f4:	bl	11e54 <printf@plt>
   162f8:	str	r0, [sp, #64]	; 0x40
   162fc:	bl	12a70 <setup@@Base>
   16300:	bl	133a0 <boolean_expression_complex@@Base>
   16304:	ldr	r0, [pc, #604]	; 16568 <main@@Base+0x4d0>
   16308:	add	r0, pc, r0
   1630c:	bl	11e54 <printf@plt>
   16310:	ldr	r1, [pc, #580]	; 1655c <main@@Base+0x4c4>
   16314:	add	r1, pc, r1
   16318:	ldr	r2, [pc, #576]	; 16560 <main@@Base+0x4c8>
   1631c:	add	r2, pc, r2
   16320:	ldr	r3, [pc, #572]	; 16564 <main@@Base+0x4cc>
   16324:	add	r3, pc, r3
   16328:	str	r0, [sp, #60]	; 0x3c
   1632c:	mov	r0, r1
   16330:	mov	r1, r2
   16334:	mov	r2, r3
   16338:	bl	11e54 <printf@plt>
   1633c:	str	r0, [sp, #56]	; 0x38
   16340:	bl	12a70 <setup@@Base>
   16344:	bl	14224 <if_statement_only@@Base>
   16348:	ldr	r0, [pc, #520]	; 16558 <main@@Base+0x4c0>
   1634c:	add	r0, pc, r0
   16350:	bl	11e54 <printf@plt>
   16354:	ldr	r1, [pc, #496]	; 1654c <main@@Base+0x4b4>
   16358:	add	r1, pc, r1
   1635c:	ldr	r2, [pc, #492]	; 16550 <main@@Base+0x4b8>
   16360:	add	r2, pc, r2
   16364:	ldr	r3, [pc, #488]	; 16554 <main@@Base+0x4bc>
   16368:	add	r3, pc, r3
   1636c:	str	r0, [sp, #52]	; 0x34
   16370:	mov	r0, r1
   16374:	mov	r1, r2
   16378:	mov	r2, r3
   1637c:	bl	11e54 <printf@plt>
   16380:	str	r0, [sp, #48]	; 0x30
   16384:	bl	12a70 <setup@@Base>
   16388:	bl	14678 <if_else_statements@@Base>
   1638c:	ldr	r0, [pc, #436]	; 16548 <main@@Base+0x4b0>
   16390:	add	r0, pc, r0
   16394:	bl	11e54 <printf@plt>
   16398:	ldr	r1, [pc, #412]	; 1653c <main@@Base+0x4a4>
   1639c:	add	r1, pc, r1
   163a0:	ldr	r2, [pc, #408]	; 16540 <main@@Base+0x4a8>
   163a4:	add	r2, pc, r2
   163a8:	ldr	r3, [pc, #404]	; 16544 <main@@Base+0x4ac>
   163ac:	add	r3, pc, r3
   163b0:	str	r0, [sp, #44]	; 0x2c
   163b4:	mov	r0, r1
   163b8:	mov	r1, r2
   163bc:	mov	r2, r3
   163c0:	bl	11e54 <printf@plt>
   163c4:	str	r0, [sp, #40]	; 0x28
   163c8:	bl	12a70 <setup@@Base>
   163cc:	bl	15520 <if_statement_inside_if_statement@@Base>
   163d0:	ldr	r0, [pc, #352]	; 16538 <main@@Base+0x4a0>
   163d4:	add	r0, pc, r0
   163d8:	bl	11e54 <printf@plt>
   163dc:	ldr	r1, [pc, #328]	; 1652c <main@@Base+0x494>
   163e0:	add	r1, pc, r1
   163e4:	ldr	r2, [pc, #324]	; 16530 <main@@Base+0x498>
   163e8:	add	r2, pc, r2
   163ec:	ldr	r3, [pc, #320]	; 16534 <main@@Base+0x49c>
   163f0:	add	r3, pc, r3
   163f4:	str	r0, [sp, #36]	; 0x24
   163f8:	mov	r0, r1
   163fc:	mov	r1, r2
   16400:	mov	r2, r3
   16404:	bl	11e54 <printf@plt>
   16408:	str	r0, [sp, #32]
   1640c:	bl	12a70 <setup@@Base>
   16410:	bl	15ac0 <if_statement_inside_else_statement@@Base>
   16414:	ldr	r0, [pc, #268]	; 16528 <main@@Base+0x490>
   16418:	add	r0, pc, r0
   1641c:	bl	11e54 <printf@plt>
   16420:	ldr	r1, [pc, #244]	; 1651c <main@@Base+0x484>
   16424:	add	r1, pc, r1
   16428:	ldr	r2, [pc, #240]	; 16520 <main@@Base+0x488>
   1642c:	add	r2, pc, r2
   16430:	ldr	r3, [pc, #236]	; 16524 <main@@Base+0x48c>
   16434:	add	r3, pc, r3
   16438:	str	r0, [sp, #28]
   1643c:	mov	r0, r1
   16440:	mov	r1, r2
   16444:	mov	r2, r3
   16448:	bl	11e54 <printf@plt>
   1644c:	str	r0, [sp, #24]
   16450:	bl	12a70 <setup@@Base>
   16454:	bl	150a8 <body_with_one_return@@Base>
   16458:	ldr	r0, [pc, #184]	; 16518 <main@@Base+0x480>
   1645c:	add	r0, pc, r0
   16460:	bl	11e54 <printf@plt>
   16464:	ldr	r1, [pc, #160]	; 1650c <main@@Base+0x474>
   16468:	add	r1, pc, r1
   1646c:	ldr	r2, [pc, #156]	; 16510 <main@@Base+0x478>
   16470:	add	r2, pc, r2
   16474:	ldr	r3, [pc, #152]	; 16514 <main@@Base+0x47c>
   16478:	add	r3, pc, r3
   1647c:	str	r0, [sp, #20]
   16480:	mov	r0, r1
   16484:	mov	r1, r2
   16488:	mov	r2, r3
   1648c:	bl	11e54 <printf@plt>
   16490:	str	r0, [sp, #16]
   16494:	bl	12a70 <setup@@Base>
   16498:	bl	14b04 <body_with_two_returns@@Base>
   1649c:	ldr	r0, [pc, #100]	; 16508 <main@@Base+0x470>
   164a0:	add	r0, pc, r0
   164a4:	bl	11e54 <printf@plt>
   164a8:	ldr	r1, [pc, #84]	; 16504 <main@@Base+0x46c>
   164ac:	add	r1, pc, r1
   164b0:	str	r0, [sp, #12]
   164b4:	mov	r0, r1
   164b8:	bl	11e54 <printf@plt>
   164bc:	ldr	r1, [pc, #60]	; 16500 <main@@Base+0x468>
   164c0:	add	r1, pc, r1
   164c4:	str	r0, [sp, #8]
   164c8:	mov	r0, r1
   164cc:	bl	11e54 <printf@plt>
   164d0:	ldr	r1, [pc, #36]	; 164fc <main@@Base+0x464>
   164d4:	add	r1, pc, r1
   164d8:	str	r0, [sp, #4]
   164dc:	mov	r0, r1
   164e0:	bl	11e54 <printf@plt>
   164e4:	movw	r1, #0
   164e8:	str	r0, [sp]
   164ec:	mov	r0, r1
   164f0:	mov	sp, fp
   164f4:	pop	{fp, pc}
   164f8:	andeq	fp, r1, r8, lsr r6
   164fc:	andeq	r8, r0, r3, asr r7
   16500:	andeq	r8, r0, sl, lsl #18
   16504:	andeq	r8, r0, lr, lsl #18
   16508:	andeq	r8, r0, fp, asr #15
   1650c:	andeq	r8, r0, pc, asr #15
   16510:	ldrdeq	r8, [r0], -r9
   16514:	andeq	r8, r0, ip, lsr #18
   16518:	andeq	r8, r0, pc, lsl #16
   1651c:	andeq	r8, r0, r3, lsl r8
   16520:	andeq	r8, r0, sp, lsl r8
   16524:	andeq	r8, r0, fp, asr r9
   16528:	andeq	r8, r0, r3, asr r8
   1652c:	andeq	r8, r0, r7, asr r8
   16530:	andeq	r8, r0, r1, ror #16
   16534:	andeq	r8, r0, ip, ror r9
   16538:	muleq	r0, r7, r8
   1653c:	muleq	r0, fp, r8
   16540:	andeq	r8, r0, r5, lsr #17
   16544:	muleq	r0, pc, r9	; <UNPREDICTABLE>
   16548:	ldrdeq	r8, [r0], -fp
   1654c:	ldrdeq	r8, [r0], -pc	; <UNPREDICTABLE>
   16550:	andeq	r8, r0, r9, ror #17
   16554:	ldrdeq	r8, [r0], -r0
   16558:	andeq	r8, r0, pc, lsl r9
   1655c:	andeq	r8, r0, r3, lsr #18
   16560:	andeq	r8, r0, sp, lsr #18
   16564:	andeq	r8, r0, r2, lsl #20
   16568:	andeq	r8, r0, r3, ror #18
   1656c:	andeq	r8, r0, r7, ror #18
   16570:	andeq	r8, r0, r1, ror r9
   16574:	andeq	r8, r0, fp, lsr #20
   16578:	andeq	r8, r0, r7, lsr #19
   1657c:	andeq	r8, r0, fp, lsr #19
   16580:			; <UNDEFINED> instruction: 0x000089b5
   16584:	andeq	r8, r0, fp, asr #20
   16588:	andeq	r8, r0, fp, ror #19
   1658c:	andeq	r8, r0, pc, ror #19
   16590:	strdeq	r8, [r0], -r9
   16594:	andeq	r8, r0, r6, ror #20
   16598:	andeq	r8, r0, pc, lsr #20
   1659c:	andeq	r8, r0, r3, lsr sl
   165a0:	andeq	r8, r0, sp, lsr sl
   165a4:	andeq	r8, r0, r2, lsl #21
   165a8:	andeq	r8, r0, r3, ror sl
   165ac:	andeq	r8, r0, r7, ror sl
   165b0:	andeq	r8, r0, r1, lsl #21
   165b4:	andeq	r8, r0, r5, lsr #21
   165b8:			; <UNDEFINED> instruction: 0x00008ab7
   165bc:			; <UNDEFINED> instruction: 0x00008abb
   165c0:	andeq	r8, r0, r5, asr #21
   165c4:	andeq	r8, r0, r9, asr #21
   165c8:	ldrdeq	r8, [r0], -fp
   165cc:	andeq	sl, r1, r4, ror pc
   165d0:	andeq	r8, r0, ip, ror #21
   165d4:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   165d8:	andeq	r8, r0, r7, lsr #25
   165dc:	andeq	sl, r1, ip, lsr #31
   165e0:	andeq	fp, r1, r0, lsl r0
   165e4:	andeq	fp, r1, r8, lsl #12
   165e8:	push	{r4, sl, fp, lr}
   165ec:	add	fp, sp, #8
   165f0:	sub	sp, sp, #40	; 0x28
   165f4:	movw	r0, #0
   165f8:	str	r0, [fp, #-12]
   165fc:	b	16600 <main@@Base+0x568>
   16600:	ldr	r0, [fp, #-12]
   16604:	ldr	r1, [pc, #244]	; 16700 <main@@Base+0x668>
   16608:	add	r1, pc, r1
   1660c:	movw	r2, #24
   16610:	mul	r2, r0, r2
   16614:	add	r1, r1, r2
   16618:	ldr	r2, [r1]
   1661c:	ldr	r3, [r1, #4]
   16620:	ldr	ip, [r1, #8]
   16624:	str	r0, [fp, #-16]
   16628:	mov	r0, r2
   1662c:	str	r1, [fp, #-20]	; 0xffffffec
   16630:	mov	r1, r3
   16634:	mov	r2, ip
   16638:	bl	1b790 <read_boolean_unary_expression@@Base+0x790>
   1663c:	ldr	r0, [fp, #-20]	; 0xffffffec
   16640:	ldr	r1, [r0, #12]
   16644:	ldr	r2, [r0, #16]
   16648:	ldr	r3, [r0, #20]
   1664c:	movw	ip, #0
   16650:	cmp	ip, r1
   16654:	str	r1, [sp, #24]
   16658:	str	r2, [sp, #20]
   1665c:	str	r3, [sp, #16]
   16660:	str	ip, [sp, #12]
   16664:	bge	166dc <main@@Base+0x644>
   16668:	ldr	r0, [sp, #12]
   1666c:	add	r1, r0, r0, lsl #2
   16670:	ldr	r2, [sp, #20]
   16674:	ldr	r1, [r2, r1, lsl #2]!
   16678:	ldr	r3, [r2, #4]
   1667c:	ldr	ip, [r2, #8]
   16680:	ldr	lr, [r2, #16]
   16684:	ldrb	r2, [r2, #12]
   16688:	mov	r4, sp
   1668c:	str	lr, [r4]
   16690:	str	r0, [sp, #8]
   16694:	mov	r0, r1
   16698:	mov	r1, r3
   1669c:	str	r2, [sp, #4]
   166a0:	mov	r2, ip
   166a4:	ldr	r3, [sp, #4]
   166a8:	bl	1beb0 <read_boolean_unary_expression@@Base+0xeb0>
   166ac:	ldr	r0, [sp, #16]
   166b0:	ldr	r1, [sp, #8]
   166b4:	add	r2, r0, r1, lsl #3
   166b8:	ldr	r0, [r2]
   166bc:	ldr	r1, [r2, #4]
   166c0:	bl	1c764 <read_boolean_unary_expression@@Base+0x1764>
   166c4:	ldr	r0, [sp, #8]
   166c8:	add	r1, r0, #1
   166cc:	ldr	r2, [sp, #24]
   166d0:	cmp	r1, r2
   166d4:	str	r1, [sp, #12]
   166d8:	blt	16668 <main@@Base+0x5d0>
   166dc:	bl	1ceec <read_boolean_unary_expression@@Base+0x1eec>
   166e0:	bl	1dc58 <read_boolean_unary_expression@@Base+0x2c58>
   166e4:	ldr	r0, [fp, #-16]
   166e8:	add	r1, r0, #1
   166ec:	cmp	r1, #1
   166f0:	str	r1, [fp, #-12]
   166f4:	blt	16600 <main@@Base+0x568>
   166f8:	sub	sp, fp, #8
   166fc:	pop	{r4, sl, fp, pc}
   16700:	andeq	sl, r1, r0, lsr #5
   16704:	push	{fp, lr}
   16708:	mov	fp, sp
   1670c:	bl	165e8 <main@@Base+0x550>
   16710:	ldr	r0, [pc, #1608]	; 16d60 <main@@Base+0xcc8>
   16714:	add	r0, pc, r0
   16718:	mov	r1, #0
   1671c:	str	r1, [r0, #148]	; 0x94
   16720:	str	r1, [r0, #144]	; 0x90
   16724:	str	r1, [r0, #140]	; 0x8c
   16728:	str	r1, [r0, #136]	; 0x88
   1672c:	str	r1, [r0, #132]	; 0x84
   16730:	str	r1, [r0, #128]	; 0x80
   16734:	str	r1, [r0, #124]	; 0x7c
   16738:	str	r1, [r0, #120]	; 0x78
   1673c:	str	r1, [r0, #116]	; 0x74
   16740:	str	r1, [r0, #112]	; 0x70
   16744:	str	r1, [r0, #108]	; 0x6c
   16748:	str	r1, [r0, #104]	; 0x68
   1674c:	str	r1, [r0, #100]	; 0x64
   16750:	str	r1, [r0, #96]	; 0x60
   16754:	str	r1, [r0, #92]	; 0x5c
   16758:	str	r1, [r0, #88]	; 0x58
   1675c:	str	r1, [r0, #84]	; 0x54
   16760:	str	r1, [r0, #80]	; 0x50
   16764:	str	r1, [r0, #76]	; 0x4c
   16768:	str	r1, [r0, #72]	; 0x48
   1676c:	str	r1, [r0, #68]	; 0x44
   16770:	str	r1, [r0, #64]	; 0x40
   16774:	str	r1, [r0, #60]	; 0x3c
   16778:	str	r1, [r0, #56]	; 0x38
   1677c:	str	r1, [r0, #52]	; 0x34
   16780:	str	r1, [r0, #48]	; 0x30
   16784:	str	r1, [r0, #44]	; 0x2c
   16788:	str	r1, [r0, #40]	; 0x28
   1678c:	str	r1, [r0, #36]	; 0x24
   16790:	str	r1, [r0, #32]
   16794:	str	r1, [r0, #28]
   16798:	str	r1, [r0, #24]
   1679c:	str	r1, [r0, #20]
   167a0:	str	r1, [r0, #16]
   167a4:	str	r1, [r0, #12]
   167a8:	str	r1, [r0, #8]
   167ac:	str	r1, [r0, #4]
   167b0:	str	r1, [r0]
   167b4:	ldr	r0, [pc, #1448]	; 16d64 <main@@Base+0xccc>
   167b8:	add	r0, pc, r0
   167bc:	str	r1, [r0, #12]
   167c0:	str	r1, [r0, #8]
   167c4:	str	r1, [r0, #4]
   167c8:	str	r1, [r0]
   167cc:	ldr	r0, [pc, #1428]	; 16d68 <main@@Base+0xcd0>
   167d0:	add	r0, pc, r0
   167d4:	str	r1, [r0, #92]	; 0x5c
   167d8:	str	r1, [r0, #88]	; 0x58
   167dc:	str	r1, [r0, #84]	; 0x54
   167e0:	str	r1, [r0, #80]	; 0x50
   167e4:	str	r1, [r0, #76]	; 0x4c
   167e8:	str	r1, [r0, #72]	; 0x48
   167ec:	str	r1, [r0, #68]	; 0x44
   167f0:	str	r1, [r0, #64]	; 0x40
   167f4:	str	r1, [r0, #60]	; 0x3c
   167f8:	str	r1, [r0, #56]	; 0x38
   167fc:	str	r1, [r0, #52]	; 0x34
   16800:	str	r1, [r0, #48]	; 0x30
   16804:	str	r1, [r0, #44]	; 0x2c
   16808:	str	r1, [r0, #40]	; 0x28
   1680c:	str	r1, [r0, #36]	; 0x24
   16810:	str	r1, [r0, #32]
   16814:	str	r1, [r0, #28]
   16818:	str	r1, [r0, #24]
   1681c:	str	r1, [r0, #20]
   16820:	str	r1, [r0, #16]
   16824:	str	r1, [r0, #12]
   16828:	str	r1, [r0, #8]
   1682c:	str	r1, [r0, #4]
   16830:	str	r1, [r0]
   16834:	ldr	r0, [pc, #1328]	; 16d6c <main@@Base+0xcd4>
   16838:	add	r0, pc, r0
   1683c:	str	r1, [r0, #12]
   16840:	str	r1, [r0, #8]
   16844:	str	r1, [r0, #4]
   16848:	str	r1, [r0]
   1684c:	ldr	r0, [pc, #1308]	; 16d70 <main@@Base+0xcd8>
   16850:	add	r0, pc, r0
   16854:	str	r1, [r0, #12]
   16858:	str	r1, [r0, #8]
   1685c:	str	r1, [r0, #4]
   16860:	str	r1, [r0]
   16864:	ldr	r0, [pc, #1288]	; 16d74 <main@@Base+0xcdc>
   16868:	add	r0, pc, r0
   1686c:	str	r1, [r0, #60]	; 0x3c
   16870:	str	r1, [r0, #56]	; 0x38
   16874:	str	r1, [r0, #52]	; 0x34
   16878:	str	r1, [r0, #48]	; 0x30
   1687c:	str	r1, [r0, #44]	; 0x2c
   16880:	str	r1, [r0, #40]	; 0x28
   16884:	str	r1, [r0, #36]	; 0x24
   16888:	str	r1, [r0, #32]
   1688c:	str	r1, [r0, #28]
   16890:	str	r1, [r0, #24]
   16894:	str	r1, [r0, #20]
   16898:	str	r1, [r0, #16]
   1689c:	str	r1, [r0, #12]
   168a0:	str	r1, [r0, #8]
   168a4:	str	r1, [r0, #4]
   168a8:	str	r1, [r0]
   168ac:	ldr	r0, [pc, #1220]	; 16d78 <main@@Base+0xce0>
   168b0:	add	r0, pc, r0
   168b4:	str	r1, [r0, #60]	; 0x3c
   168b8:	str	r1, [r0, #56]	; 0x38
   168bc:	str	r1, [r0, #52]	; 0x34
   168c0:	str	r1, [r0, #48]	; 0x30
   168c4:	str	r1, [r0, #44]	; 0x2c
   168c8:	str	r1, [r0, #40]	; 0x28
   168cc:	str	r1, [r0, #36]	; 0x24
   168d0:	str	r1, [r0, #32]
   168d4:	str	r1, [r0, #28]
   168d8:	str	r1, [r0, #24]
   168dc:	str	r1, [r0, #20]
   168e0:	str	r1, [r0, #16]
   168e4:	str	r1, [r0, #12]
   168e8:	str	r1, [r0, #8]
   168ec:	str	r1, [r0, #4]
   168f0:	str	r1, [r0]
   168f4:	ldr	r0, [pc, #1152]	; 16d7c <main@@Base+0xce4>
   168f8:	add	r0, pc, r0
   168fc:	str	r1, [r0, #84]	; 0x54
   16900:	str	r1, [r0, #80]	; 0x50
   16904:	str	r1, [r0, #76]	; 0x4c
   16908:	str	r1, [r0, #72]	; 0x48
   1690c:	str	r1, [r0, #68]	; 0x44
   16910:	str	r1, [r0, #64]	; 0x40
   16914:	str	r1, [r0, #60]	; 0x3c
   16918:	str	r1, [r0, #56]	; 0x38
   1691c:	str	r1, [r0, #52]	; 0x34
   16920:	str	r1, [r0, #48]	; 0x30
   16924:	str	r1, [r0, #44]	; 0x2c
   16928:	str	r1, [r0, #40]	; 0x28
   1692c:	str	r1, [r0, #36]	; 0x24
   16930:	str	r1, [r0, #32]
   16934:	str	r1, [r0, #28]
   16938:	str	r1, [r0, #24]
   1693c:	str	r1, [r0, #20]
   16940:	str	r1, [r0, #16]
   16944:	str	r1, [r0, #12]
   16948:	str	r1, [r0, #8]
   1694c:	str	r1, [r0, #4]
   16950:	str	r1, [r0]
   16954:	ldr	r0, [pc, #1060]	; 16d80 <main@@Base+0xce8>
   16958:	add	r0, pc, r0
   1695c:	str	r1, [r0, #60]	; 0x3c
   16960:	str	r1, [r0, #56]	; 0x38
   16964:	str	r1, [r0, #52]	; 0x34
   16968:	str	r1, [r0, #48]	; 0x30
   1696c:	str	r1, [r0, #44]	; 0x2c
   16970:	str	r1, [r0, #40]	; 0x28
   16974:	str	r1, [r0, #36]	; 0x24
   16978:	str	r1, [r0, #32]
   1697c:	str	r1, [r0, #28]
   16980:	str	r1, [r0, #24]
   16984:	str	r1, [r0, #20]
   16988:	str	r1, [r0, #16]
   1698c:	str	r1, [r0, #12]
   16990:	str	r1, [r0, #8]
   16994:	str	r1, [r0, #4]
   16998:	str	r1, [r0]
   1699c:	ldr	r0, [pc, #992]	; 16d84 <main@@Base+0xcec>
   169a0:	add	r0, pc, r0
   169a4:	str	r1, [r0, #132]	; 0x84
   169a8:	str	r1, [r0, #128]	; 0x80
   169ac:	str	r1, [r0, #124]	; 0x7c
   169b0:	str	r1, [r0, #120]	; 0x78
   169b4:	str	r1, [r0, #116]	; 0x74
   169b8:	str	r1, [r0, #112]	; 0x70
   169bc:	str	r1, [r0, #108]	; 0x6c
   169c0:	str	r1, [r0, #104]	; 0x68
   169c4:	str	r1, [r0, #100]	; 0x64
   169c8:	str	r1, [r0, #96]	; 0x60
   169cc:	str	r1, [r0, #92]	; 0x5c
   169d0:	str	r1, [r0, #88]	; 0x58
   169d4:	str	r1, [r0, #84]	; 0x54
   169d8:	str	r1, [r0, #80]	; 0x50
   169dc:	str	r1, [r0, #76]	; 0x4c
   169e0:	str	r1, [r0, #72]	; 0x48
   169e4:	str	r1, [r0, #68]	; 0x44
   169e8:	str	r1, [r0, #64]	; 0x40
   169ec:	str	r1, [r0, #60]	; 0x3c
   169f0:	str	r1, [r0, #56]	; 0x38
   169f4:	str	r1, [r0, #52]	; 0x34
   169f8:	str	r1, [r0, #48]	; 0x30
   169fc:	str	r1, [r0, #44]	; 0x2c
   16a00:	str	r1, [r0, #40]	; 0x28
   16a04:	str	r1, [r0, #36]	; 0x24
   16a08:	str	r1, [r0, #32]
   16a0c:	str	r1, [r0, #28]
   16a10:	str	r1, [r0, #24]
   16a14:	str	r1, [r0, #20]
   16a18:	str	r1, [r0, #16]
   16a1c:	str	r1, [r0, #12]
   16a20:	str	r1, [r0, #8]
   16a24:	str	r1, [r0, #4]
   16a28:	str	r1, [r0]
   16a2c:	ldr	r0, [pc, #852]	; 16d88 <main@@Base+0xcf0>
   16a30:	add	r0, pc, r0
   16a34:	str	r1, [r0, #132]	; 0x84
   16a38:	str	r1, [r0, #128]	; 0x80
   16a3c:	str	r1, [r0, #124]	; 0x7c
   16a40:	str	r1, [r0, #120]	; 0x78
   16a44:	str	r1, [r0, #116]	; 0x74
   16a48:	str	r1, [r0, #112]	; 0x70
   16a4c:	str	r1, [r0, #108]	; 0x6c
   16a50:	str	r1, [r0, #104]	; 0x68
   16a54:	str	r1, [r0, #100]	; 0x64
   16a58:	str	r1, [r0, #96]	; 0x60
   16a5c:	str	r1, [r0, #92]	; 0x5c
   16a60:	str	r1, [r0, #88]	; 0x58
   16a64:	str	r1, [r0, #84]	; 0x54
   16a68:	str	r1, [r0, #80]	; 0x50
   16a6c:	str	r1, [r0, #76]	; 0x4c
   16a70:	str	r1, [r0, #72]	; 0x48
   16a74:	str	r1, [r0, #68]	; 0x44
   16a78:	str	r1, [r0, #64]	; 0x40
   16a7c:	str	r1, [r0, #60]	; 0x3c
   16a80:	str	r1, [r0, #56]	; 0x38
   16a84:	str	r1, [r0, #52]	; 0x34
   16a88:	str	r1, [r0, #48]	; 0x30
   16a8c:	str	r1, [r0, #44]	; 0x2c
   16a90:	str	r1, [r0, #40]	; 0x28
   16a94:	str	r1, [r0, #36]	; 0x24
   16a98:	str	r1, [r0, #32]
   16a9c:	str	r1, [r0, #28]
   16aa0:	str	r1, [r0, #24]
   16aa4:	str	r1, [r0, #20]
   16aa8:	str	r1, [r0, #16]
   16aac:	str	r1, [r0, #12]
   16ab0:	str	r1, [r0, #8]
   16ab4:	str	r1, [r0, #4]
   16ab8:	str	r1, [r0]
   16abc:	ldr	r0, [pc, #712]	; 16d8c <main@@Base+0xcf4>
   16ac0:	add	r0, pc, r0
   16ac4:	str	r1, [r0, #84]	; 0x54
   16ac8:	str	r1, [r0, #80]	; 0x50
   16acc:	str	r1, [r0, #76]	; 0x4c
   16ad0:	str	r1, [r0, #72]	; 0x48
   16ad4:	str	r1, [r0, #68]	; 0x44
   16ad8:	str	r1, [r0, #64]	; 0x40
   16adc:	str	r1, [r0, #60]	; 0x3c
   16ae0:	str	r1, [r0, #56]	; 0x38
   16ae4:	str	r1, [r0, #52]	; 0x34
   16ae8:	str	r1, [r0, #48]	; 0x30
   16aec:	str	r1, [r0, #44]	; 0x2c
   16af0:	str	r1, [r0, #40]	; 0x28
   16af4:	str	r1, [r0, #36]	; 0x24
   16af8:	str	r1, [r0, #32]
   16afc:	str	r1, [r0, #28]
   16b00:	str	r1, [r0, #24]
   16b04:	str	r1, [r0, #20]
   16b08:	str	r1, [r0, #16]
   16b0c:	str	r1, [r0, #12]
   16b10:	str	r1, [r0, #8]
   16b14:	str	r1, [r0, #4]
   16b18:	str	r1, [r0]
   16b1c:	ldr	r0, [pc, #620]	; 16d90 <main@@Base+0xcf8>
   16b20:	add	r0, pc, r0
   16b24:	str	r1, [r0, #84]	; 0x54
   16b28:	str	r1, [r0, #80]	; 0x50
   16b2c:	str	r1, [r0, #76]	; 0x4c
   16b30:	str	r1, [r0, #72]	; 0x48
   16b34:	str	r1, [r0, #68]	; 0x44
   16b38:	str	r1, [r0, #64]	; 0x40
   16b3c:	str	r1, [r0, #60]	; 0x3c
   16b40:	str	r1, [r0, #56]	; 0x38
   16b44:	str	r1, [r0, #52]	; 0x34
   16b48:	str	r1, [r0, #48]	; 0x30
   16b4c:	str	r1, [r0, #44]	; 0x2c
   16b50:	str	r1, [r0, #40]	; 0x28
   16b54:	str	r1, [r0, #36]	; 0x24
   16b58:	str	r1, [r0, #32]
   16b5c:	str	r1, [r0, #28]
   16b60:	str	r1, [r0, #24]
   16b64:	str	r1, [r0, #20]
   16b68:	str	r1, [r0, #16]
   16b6c:	str	r1, [r0, #12]
   16b70:	str	r1, [r0, #8]
   16b74:	str	r1, [r0, #4]
   16b78:	str	r1, [r0]
   16b7c:	ldr	r0, [pc, #528]	; 16d94 <main@@Base+0xcfc>
   16b80:	add	r0, pc, r0
   16b84:	str	r1, [r0, #132]	; 0x84
   16b88:	str	r1, [r0, #128]	; 0x80
   16b8c:	str	r1, [r0, #124]	; 0x7c
   16b90:	str	r1, [r0, #120]	; 0x78
   16b94:	str	r1, [r0, #116]	; 0x74
   16b98:	str	r1, [r0, #112]	; 0x70
   16b9c:	str	r1, [r0, #108]	; 0x6c
   16ba0:	str	r1, [r0, #104]	; 0x68
   16ba4:	str	r1, [r0, #100]	; 0x64
   16ba8:	str	r1, [r0, #96]	; 0x60
   16bac:	str	r1, [r0, #92]	; 0x5c
   16bb0:	str	r1, [r0, #88]	; 0x58
   16bb4:	str	r1, [r0, #84]	; 0x54
   16bb8:	str	r1, [r0, #80]	; 0x50
   16bbc:	str	r1, [r0, #76]	; 0x4c
   16bc0:	str	r1, [r0, #72]	; 0x48
   16bc4:	str	r1, [r0, #68]	; 0x44
   16bc8:	str	r1, [r0, #64]	; 0x40
   16bcc:	str	r1, [r0, #60]	; 0x3c
   16bd0:	str	r1, [r0, #56]	; 0x38
   16bd4:	str	r1, [r0, #52]	; 0x34
   16bd8:	str	r1, [r0, #48]	; 0x30
   16bdc:	str	r1, [r0, #44]	; 0x2c
   16be0:	str	r1, [r0, #40]	; 0x28
   16be4:	str	r1, [r0, #36]	; 0x24
   16be8:	str	r1, [r0, #32]
   16bec:	str	r1, [r0, #28]
   16bf0:	str	r1, [r0, #24]
   16bf4:	str	r1, [r0, #20]
   16bf8:	str	r1, [r0, #16]
   16bfc:	str	r1, [r0, #12]
   16c00:	str	r1, [r0, #8]
   16c04:	str	r1, [r0, #4]
   16c08:	str	r1, [r0]
   16c0c:	ldr	r0, [pc, #388]	; 16d98 <main@@Base+0xd00>
   16c10:	add	r0, pc, r0
   16c14:	str	r1, [r0, #108]	; 0x6c
   16c18:	str	r1, [r0, #104]	; 0x68
   16c1c:	str	r1, [r0, #100]	; 0x64
   16c20:	str	r1, [r0, #96]	; 0x60
   16c24:	str	r1, [r0, #92]	; 0x5c
   16c28:	str	r1, [r0, #88]	; 0x58
   16c2c:	str	r1, [r0, #84]	; 0x54
   16c30:	str	r1, [r0, #80]	; 0x50
   16c34:	str	r1, [r0, #76]	; 0x4c
   16c38:	str	r1, [r0, #72]	; 0x48
   16c3c:	str	r1, [r0, #68]	; 0x44
   16c40:	str	r1, [r0, #64]	; 0x40
   16c44:	str	r1, [r0, #60]	; 0x3c
   16c48:	str	r1, [r0, #56]	; 0x38
   16c4c:	str	r1, [r0, #52]	; 0x34
   16c50:	str	r1, [r0, #48]	; 0x30
   16c54:	str	r1, [r0, #44]	; 0x2c
   16c58:	str	r1, [r0, #40]	; 0x28
   16c5c:	str	r1, [r0, #36]	; 0x24
   16c60:	str	r1, [r0, #32]
   16c64:	str	r1, [r0, #28]
   16c68:	str	r1, [r0, #24]
   16c6c:	str	r1, [r0, #20]
   16c70:	str	r1, [r0, #16]
   16c74:	str	r1, [r0, #12]
   16c78:	str	r1, [r0, #8]
   16c7c:	str	r1, [r0, #4]
   16c80:	str	r1, [r0]
   16c84:	ldr	r0, [pc, #272]	; 16d9c <main@@Base+0xd04>
   16c88:	add	r0, pc, r0
   16c8c:	str	r1, [r0, #84]	; 0x54
   16c90:	str	r1, [r0, #80]	; 0x50
   16c94:	str	r1, [r0, #76]	; 0x4c
   16c98:	str	r1, [r0, #72]	; 0x48
   16c9c:	str	r1, [r0, #68]	; 0x44
   16ca0:	str	r1, [r0, #64]	; 0x40
   16ca4:	str	r1, [r0, #60]	; 0x3c
   16ca8:	str	r1, [r0, #56]	; 0x38
   16cac:	str	r1, [r0, #52]	; 0x34
   16cb0:	str	r1, [r0, #48]	; 0x30
   16cb4:	str	r1, [r0, #44]	; 0x2c
   16cb8:	str	r1, [r0, #40]	; 0x28
   16cbc:	str	r1, [r0, #36]	; 0x24
   16cc0:	str	r1, [r0, #32]
   16cc4:	str	r1, [r0, #28]
   16cc8:	str	r1, [r0, #24]
   16ccc:	str	r1, [r0, #20]
   16cd0:	str	r1, [r0, #16]
   16cd4:	str	r1, [r0, #12]
   16cd8:	str	r1, [r0, #8]
   16cdc:	str	r1, [r0, #4]
   16ce0:	str	r1, [r0]
   16ce4:	ldr	r0, [pc, #180]	; 16da0 <main@@Base+0xd08>
   16ce8:	add	r0, pc, r0
   16cec:	str	r1, [r0, #84]	; 0x54
   16cf0:	str	r1, [r0, #80]	; 0x50
   16cf4:	str	r1, [r0, #76]	; 0x4c
   16cf8:	str	r1, [r0, #72]	; 0x48
   16cfc:	str	r1, [r0, #68]	; 0x44
   16d00:	str	r1, [r0, #64]	; 0x40
   16d04:	str	r1, [r0, #60]	; 0x3c
   16d08:	str	r1, [r0, #56]	; 0x38
   16d0c:	str	r1, [r0, #52]	; 0x34
   16d10:	str	r1, [r0, #48]	; 0x30
   16d14:	str	r1, [r0, #44]	; 0x2c
   16d18:	str	r1, [r0, #40]	; 0x28
   16d1c:	str	r1, [r0, #36]	; 0x24
   16d20:	str	r1, [r0, #32]
   16d24:	str	r1, [r0, #28]
   16d28:	str	r1, [r0, #24]
   16d2c:	str	r1, [r0, #20]
   16d30:	str	r1, [r0, #16]
   16d34:	str	r1, [r0, #12]
   16d38:	str	r1, [r0, #8]
   16d3c:	str	r1, [r0, #4]
   16d40:	str	r1, [r0]
   16d44:	ldr	r0, [pc, #88]	; 16da4 <main@@Base+0xd0c>
   16d48:	add	r0, pc, r0
   16d4c:	str	r1, [r0, #12]
   16d50:	str	r1, [r0, #8]
   16d54:	str	r1, [r0, #4]
   16d58:	str	r1, [r0]
   16d5c:	pop	{fp, pc}
   16d60:	andeq	sl, r1, r4, ror #19
   16d64:	ldrdeq	sl, [r1], -r8
   16d68:	ldrdeq	sl, [r1], -r8
   16d6c:	ldrdeq	sl, [r1], -r0
   16d70:	andeq	sl, r1, r8, asr #19
   16d74:	andeq	sl, r1, r0, asr #19
   16d78:			; <UNDEFINED> instruction: 0x0001a9b8
   16d7c:			; <UNDEFINED> instruction: 0x0001a9b0
   16d80:			; <UNDEFINED> instruction: 0x0001a9b0
   16d84:	andeq	sl, r1, r8, lsr #19
   16d88:	andeq	sl, r1, r8, lsr #19
   16d8c:	andeq	sl, r1, r8, lsr #19
   16d90:	andeq	sl, r1, r8, lsr #19
   16d94:	andeq	sl, r1, r8, lsr #19
   16d98:	andeq	sl, r1, r8, lsr #19
   16d9c:	andeq	sl, r1, r0, lsr #19
   16da0:	andeq	sl, r1, r0, lsr #19
   16da4:	muleq	r1, r8, r9
   16da8:	push	{fp, lr}
   16dac:	mov	fp, sp
   16db0:	ldr	r0, [pc, #16]	; 16dc8 <main@@Base+0xd30>
   16db4:	add	r0, pc, r0
   16db8:	ldr	r1, [pc, #12]	; 16dcc <main@@Base+0xd34>
   16dbc:	add	r1, pc, r1
   16dc0:	bl	1e10c <__gcov_flush@@Base+0xb8>
   16dc4:	pop	{fp, pc}
   16dc8:			; <UNDEFINED> instruction: 0xfffff82c
   16dcc:			; <UNDEFINED> instruction: 0xfffff940

00016dd0 <init_token_int_type@@Base>:
   16dd0:	sub	sp, sp, #12
   16dd4:	ldr	r1, [pc, #96]	; 16e3c <init_token_int_type@@Base+0x6c>
   16dd8:	add	r1, pc, r1
   16ddc:	str	r0, [sp, #4]
   16de0:	str	r1, [sp]
   16de4:	ldr	r0, [sp]
   16de8:	ldr	r1, [r0]
   16dec:	ldr	r2, [r0, #4]
   16df0:	adds	r1, r1, #1
   16df4:	adc	r2, r2, #0
   16df8:	str	r1, [r0]
   16dfc:	str	r2, [r0, #4]
   16e00:	ldr	r0, [pc, #56]	; 16e40 <init_token_int_type@@Base+0x70>
   16e04:	add	r0, pc, r0
   16e08:	ldr	r1, [r0, #8]
   16e0c:	ldr	r2, [r0, #12]
   16e10:	adds	r1, r1, #1
   16e14:	adc	r2, r2, #0
   16e18:	str	r1, [r0, #8]
   16e1c:	str	r2, [r0, #12]
   16e20:	ldr	r0, [sp, #4]
   16e24:	str	r0, [sp, #8]
   16e28:	ldr	r1, [sp, #8]
   16e2c:	movw	r2, #0
   16e30:	str	r2, [r1]
   16e34:	add	sp, sp, #12
   16e38:	bx	lr
   16e3c:	andeq	sl, r1, r0, lsr #18
   16e40:	strdeq	sl, [r1], -r4

00016e44 <init_token_int_value@@Base>:
   16e44:	sub	sp, sp, #20
   16e48:	ldr	r2, [pc, #120]	; 16ec8 <init_token_int_value@@Base+0x84>
   16e4c:	add	r2, pc, r2
   16e50:	str	r0, [sp, #8]
   16e54:	str	r1, [sp, #4]
   16e58:	str	r2, [sp]
   16e5c:	ldr	r0, [sp]
   16e60:	ldr	r1, [r0]
   16e64:	ldr	r2, [r0, #4]
   16e68:	adds	r1, r1, #1
   16e6c:	adc	r2, r2, #0
   16e70:	str	r1, [r0]
   16e74:	str	r2, [r0, #4]
   16e78:	ldr	r0, [pc, #76]	; 16ecc <init_token_int_value@@Base+0x88>
   16e7c:	add	r0, pc, r0
   16e80:	ldr	r1, [r0, #8]
   16e84:	ldr	r2, [r0, #12]
   16e88:	adds	r1, r1, #1
   16e8c:	adc	r2, r2, #0
   16e90:	str	r1, [r0, #8]
   16e94:	str	r2, [r0, #12]
   16e98:	ldr	r0, [sp, #8]
   16e9c:	str	r0, [sp, #16]
   16ea0:	ldr	r1, [sp, #4]
   16ea4:	str	r1, [sp, #12]
   16ea8:	ldr	r2, [sp, #16]
   16eac:	movw	r3, #1
   16eb0:	str	r3, [r2]
   16eb4:	ldr	r2, [sp, #12]
   16eb8:	ldr	r3, [sp, #16]
   16ebc:	str	r2, [r3, #4]
   16ec0:	add	sp, sp, #20
   16ec4:	bx	lr
   16ec8:			; <UNDEFINED> instruction: 0x0001a8bc
   16ecc:	andeq	sl, r1, ip, lsl #17

00016ed0 <init_token_function@@Base>:
   16ed0:	sub	sp, sp, #20
   16ed4:	ldr	r2, [pc, #120]	; 16f54 <init_token_function@@Base+0x84>
   16ed8:	add	r2, pc, r2
   16edc:	str	r0, [sp, #8]
   16ee0:	str	r1, [sp, #4]
   16ee4:	str	r2, [sp]
   16ee8:	ldr	r0, [sp]
   16eec:	ldr	r1, [r0]
   16ef0:	ldr	r2, [r0, #4]
   16ef4:	adds	r1, r1, #1
   16ef8:	adc	r2, r2, #0
   16efc:	str	r1, [r0]
   16f00:	str	r2, [r0, #4]
   16f04:	ldr	r0, [pc, #76]	; 16f58 <init_token_function@@Base+0x88>
   16f08:	add	r0, pc, r0
   16f0c:	ldr	r1, [r0, #8]
   16f10:	ldr	r2, [r0, #12]
   16f14:	adds	r1, r1, #1
   16f18:	adc	r2, r2, #0
   16f1c:	str	r1, [r0, #8]
   16f20:	str	r2, [r0, #12]
   16f24:	ldr	r0, [sp, #8]
   16f28:	str	r0, [sp, #16]
   16f2c:	ldr	r1, [sp, #4]
   16f30:	str	r1, [sp, #12]
   16f34:	ldr	r2, [sp, #16]
   16f38:	movw	r3, #2
   16f3c:	str	r3, [r2]
   16f40:	ldr	r2, [sp, #12]
   16f44:	ldr	r3, [sp, #16]
   16f48:	str	r2, [r3, #4]
   16f4c:	add	sp, sp, #20
   16f50:	bx	lr
   16f54:	andeq	sl, r1, r0, asr #16
   16f58:	andeq	sl, r1, r0, lsl r8

00016f5c <init_token_opar@@Base>:
   16f5c:	sub	sp, sp, #12
   16f60:	ldr	r1, [pc, #96]	; 16fc8 <init_token_opar@@Base+0x6c>
   16f64:	add	r1, pc, r1
   16f68:	str	r0, [sp, #4]
   16f6c:	str	r1, [sp]
   16f70:	ldr	r0, [sp]
   16f74:	ldr	r1, [r0]
   16f78:	ldr	r2, [r0, #4]
   16f7c:	adds	r1, r1, #1
   16f80:	adc	r2, r2, #0
   16f84:	str	r1, [r0]
   16f88:	str	r2, [r0, #4]
   16f8c:	ldr	r0, [pc, #56]	; 16fcc <init_token_opar@@Base+0x70>
   16f90:	add	r0, pc, r0
   16f94:	ldr	r1, [r0, #8]
   16f98:	ldr	r2, [r0, #12]
   16f9c:	adds	r1, r1, #1
   16fa0:	adc	r2, r2, #0
   16fa4:	str	r1, [r0, #8]
   16fa8:	str	r2, [r0, #12]
   16fac:	ldr	r0, [sp, #4]
   16fb0:	str	r0, [sp, #8]
   16fb4:	ldr	r1, [sp, #8]
   16fb8:	movw	r2, #3
   16fbc:	str	r2, [r1]
   16fc0:	add	sp, sp, #12
   16fc4:	bx	lr
   16fc8:	andeq	sl, r1, r4, asr #15
   16fcc:	muleq	r1, r8, r7

00016fd0 <init_token_cpar@@Base>:
   16fd0:	sub	sp, sp, #12
   16fd4:	ldr	r1, [pc, #96]	; 1703c <init_token_cpar@@Base+0x6c>
   16fd8:	add	r1, pc, r1
   16fdc:	str	r0, [sp, #4]
   16fe0:	str	r1, [sp]
   16fe4:	ldr	r0, [sp]
   16fe8:	ldr	r1, [r0]
   16fec:	ldr	r2, [r0, #4]
   16ff0:	adds	r1, r1, #1
   16ff4:	adc	r2, r2, #0
   16ff8:	str	r1, [r0]
   16ffc:	str	r2, [r0, #4]
   17000:	ldr	r0, [pc, #56]	; 17040 <init_token_cpar@@Base+0x70>
   17004:	add	r0, pc, r0
   17008:	ldr	r1, [r0, #8]
   1700c:	ldr	r2, [r0, #12]
   17010:	adds	r1, r1, #1
   17014:	adc	r2, r2, #0
   17018:	str	r1, [r0, #8]
   1701c:	str	r2, [r0, #12]
   17020:	ldr	r0, [sp, #4]
   17024:	str	r0, [sp, #8]
   17028:	ldr	r1, [sp, #8]
   1702c:	movw	r2, #4
   17030:	str	r2, [r1]
   17034:	add	sp, sp, #12
   17038:	bx	lr
   1703c:	andeq	sl, r1, r0, ror #14
   17040:	andeq	sl, r1, r4, lsr r7

00017044 <init_token_obra@@Base>:
   17044:	sub	sp, sp, #12
   17048:	ldr	r1, [pc, #96]	; 170b0 <init_token_obra@@Base+0x6c>
   1704c:	add	r1, pc, r1
   17050:	str	r0, [sp, #4]
   17054:	str	r1, [sp]
   17058:	ldr	r0, [sp]
   1705c:	ldr	r1, [r0]
   17060:	ldr	r2, [r0, #4]
   17064:	adds	r1, r1, #1
   17068:	adc	r2, r2, #0
   1706c:	str	r1, [r0]
   17070:	str	r2, [r0, #4]
   17074:	ldr	r0, [pc, #56]	; 170b4 <init_token_obra@@Base+0x70>
   17078:	add	r0, pc, r0
   1707c:	ldr	r1, [r0, #8]
   17080:	ldr	r2, [r0, #12]
   17084:	adds	r1, r1, #1
   17088:	adc	r2, r2, #0
   1708c:	str	r1, [r0, #8]
   17090:	str	r2, [r0, #12]
   17094:	ldr	r0, [sp, #4]
   17098:	str	r0, [sp, #8]
   1709c:	ldr	r1, [sp, #8]
   170a0:	movw	r2, #5
   170a4:	str	r2, [r1]
   170a8:	add	sp, sp, #12
   170ac:	bx	lr
   170b0:	strdeq	sl, [r1], -ip
   170b4:	ldrdeq	sl, [r1], -r0

000170b8 <init_token_cbra@@Base>:
   170b8:	sub	sp, sp, #12
   170bc:	ldr	r1, [pc, #96]	; 17124 <init_token_cbra@@Base+0x6c>
   170c0:	add	r1, pc, r1
   170c4:	str	r0, [sp, #4]
   170c8:	str	r1, [sp]
   170cc:	ldr	r0, [sp]
   170d0:	ldr	r1, [r0]
   170d4:	ldr	r2, [r0, #4]
   170d8:	adds	r1, r1, #1
   170dc:	adc	r2, r2, #0
   170e0:	str	r1, [r0]
   170e4:	str	r2, [r0, #4]
   170e8:	ldr	r0, [pc, #56]	; 17128 <init_token_cbra@@Base+0x70>
   170ec:	add	r0, pc, r0
   170f0:	ldr	r1, [r0, #8]
   170f4:	ldr	r2, [r0, #12]
   170f8:	adds	r1, r1, #1
   170fc:	adc	r2, r2, #0
   17100:	str	r1, [r0, #8]
   17104:	str	r2, [r0, #12]
   17108:	ldr	r0, [sp, #4]
   1710c:	str	r0, [sp, #8]
   17110:	ldr	r1, [sp, #8]
   17114:	movw	r2, #6
   17118:	str	r2, [r1]
   1711c:	add	sp, sp, #12
   17120:	bx	lr
   17124:	muleq	r1, r8, r6
   17128:	andeq	sl, r1, ip, ror #12

0001712c <init_token_return@@Base>:
   1712c:	sub	sp, sp, #12
   17130:	ldr	r1, [pc, #96]	; 17198 <init_token_return@@Base+0x6c>
   17134:	add	r1, pc, r1
   17138:	str	r0, [sp, #4]
   1713c:	str	r1, [sp]
   17140:	ldr	r0, [sp]
   17144:	ldr	r1, [r0]
   17148:	ldr	r2, [r0, #4]
   1714c:	adds	r1, r1, #1
   17150:	adc	r2, r2, #0
   17154:	str	r1, [r0]
   17158:	str	r2, [r0, #4]
   1715c:	ldr	r0, [pc, #56]	; 1719c <init_token_return@@Base+0x70>
   17160:	add	r0, pc, r0
   17164:	ldr	r1, [r0, #8]
   17168:	ldr	r2, [r0, #12]
   1716c:	adds	r1, r1, #1
   17170:	adc	r2, r2, #0
   17174:	str	r1, [r0, #8]
   17178:	str	r2, [r0, #12]
   1717c:	ldr	r0, [sp, #4]
   17180:	str	r0, [sp, #8]
   17184:	ldr	r1, [sp, #8]
   17188:	movw	r2, #7
   1718c:	str	r2, [r1]
   17190:	add	sp, sp, #12
   17194:	bx	lr
   17198:	andeq	sl, r1, r4, lsr r6
   1719c:	andeq	sl, r1, r8, lsl #12

000171a0 <init_token_semicolon@@Base>:
   171a0:	sub	sp, sp, #12
   171a4:	ldr	r1, [pc, #96]	; 1720c <init_token_semicolon@@Base+0x6c>
   171a8:	add	r1, pc, r1
   171ac:	str	r0, [sp, #4]
   171b0:	str	r1, [sp]
   171b4:	ldr	r0, [sp]
   171b8:	ldr	r1, [r0]
   171bc:	ldr	r2, [r0, #4]
   171c0:	adds	r1, r1, #1
   171c4:	adc	r2, r2, #0
   171c8:	str	r1, [r0]
   171cc:	str	r2, [r0, #4]
   171d0:	ldr	r0, [pc, #56]	; 17210 <init_token_semicolon@@Base+0x70>
   171d4:	add	r0, pc, r0
   171d8:	ldr	r1, [r0, #8]
   171dc:	ldr	r2, [r0, #12]
   171e0:	adds	r1, r1, #1
   171e4:	adc	r2, r2, #0
   171e8:	str	r1, [r0, #8]
   171ec:	str	r2, [r0, #12]
   171f0:	ldr	r0, [sp, #4]
   171f4:	str	r0, [sp, #8]
   171f8:	ldr	r1, [sp, #8]
   171fc:	movw	r2, #8
   17200:	str	r2, [r1]
   17204:	add	sp, sp, #12
   17208:	bx	lr
   1720c:	ldrdeq	sl, [r1], -r0
   17210:	andeq	sl, r1, r4, lsr #11

00017214 <init_token_eof@@Base>:
   17214:	sub	sp, sp, #12
   17218:	ldr	r1, [pc, #96]	; 17280 <init_token_eof@@Base+0x6c>
   1721c:	add	r1, pc, r1
   17220:	str	r0, [sp, #4]
   17224:	str	r1, [sp]
   17228:	ldr	r0, [sp]
   1722c:	ldr	r1, [r0]
   17230:	ldr	r2, [r0, #4]
   17234:	adds	r1, r1, #1
   17238:	adc	r2, r2, #0
   1723c:	str	r1, [r0]
   17240:	str	r2, [r0, #4]
   17244:	ldr	r0, [pc, #56]	; 17284 <init_token_eof@@Base+0x70>
   17248:	add	r0, pc, r0
   1724c:	ldr	r1, [r0, #8]
   17250:	ldr	r2, [r0, #12]
   17254:	adds	r1, r1, #1
   17258:	adc	r2, r2, #0
   1725c:	str	r1, [r0, #8]
   17260:	str	r2, [r0, #12]
   17264:	ldr	r0, [sp, #4]
   17268:	str	r0, [sp, #8]
   1726c:	ldr	r1, [sp, #8]
   17270:	movw	r2, #9
   17274:	str	r2, [r1]
   17278:	add	sp, sp, #12
   1727c:	bx	lr
   17280:	andeq	sl, r1, ip, ror #10
   17284:	andeq	sl, r1, r0, asr #10

00017288 <init_token_if@@Base>:
   17288:	sub	sp, sp, #12
   1728c:	ldr	r1, [pc, #96]	; 172f4 <init_token_if@@Base+0x6c>
   17290:	add	r1, pc, r1
   17294:	str	r0, [sp, #4]
   17298:	str	r1, [sp]
   1729c:	ldr	r0, [sp]
   172a0:	ldr	r1, [r0]
   172a4:	ldr	r2, [r0, #4]
   172a8:	adds	r1, r1, #1
   172ac:	adc	r2, r2, #0
   172b0:	str	r1, [r0]
   172b4:	str	r2, [r0, #4]
   172b8:	ldr	r0, [pc, #56]	; 172f8 <init_token_if@@Base+0x70>
   172bc:	add	r0, pc, r0
   172c0:	ldr	r1, [r0, #8]
   172c4:	ldr	r2, [r0, #12]
   172c8:	adds	r1, r1, #1
   172cc:	adc	r2, r2, #0
   172d0:	str	r1, [r0, #8]
   172d4:	str	r2, [r0, #12]
   172d8:	ldr	r0, [sp, #4]
   172dc:	str	r0, [sp, #8]
   172e0:	ldr	r1, [sp, #8]
   172e4:	movw	r2, #10
   172e8:	str	r2, [r1]
   172ec:	add	sp, sp, #12
   172f0:	bx	lr
   172f4:	andeq	sl, r1, r8, lsl #10
   172f8:	ldrdeq	sl, [r1], -ip

000172fc <init_token_else@@Base>:
   172fc:	sub	sp, sp, #12
   17300:	ldr	r1, [pc, #96]	; 17368 <init_token_else@@Base+0x6c>
   17304:	add	r1, pc, r1
   17308:	str	r0, [sp, #4]
   1730c:	str	r1, [sp]
   17310:	ldr	r0, [sp]
   17314:	ldr	r1, [r0]
   17318:	ldr	r2, [r0, #4]
   1731c:	adds	r1, r1, #1
   17320:	adc	r2, r2, #0
   17324:	str	r1, [r0]
   17328:	str	r2, [r0, #4]
   1732c:	ldr	r0, [pc, #56]	; 1736c <init_token_else@@Base+0x70>
   17330:	add	r0, pc, r0
   17334:	ldr	r1, [r0, #8]
   17338:	ldr	r2, [r0, #12]
   1733c:	adds	r1, r1, #1
   17340:	adc	r2, r2, #0
   17344:	str	r1, [r0, #8]
   17348:	str	r2, [r0, #12]
   1734c:	ldr	r0, [sp, #4]
   17350:	str	r0, [sp, #8]
   17354:	ldr	r1, [sp, #8]
   17358:	movw	r2, #11
   1735c:	str	r2, [r1]
   17360:	add	sp, sp, #12
   17364:	bx	lr
   17368:	andeq	sl, r1, r4, lsr #9
   1736c:	andeq	sl, r1, r8, ror r4

00017370 <init_token_boolean_op@@Base>:
   17370:	sub	sp, sp, #20
   17374:	ldr	r2, [pc, #120]	; 173f4 <init_token_boolean_op@@Base+0x84>
   17378:	add	r2, pc, r2
   1737c:	str	r0, [sp, #8]
   17380:	str	r1, [sp, #4]
   17384:	str	r2, [sp]
   17388:	ldr	r0, [sp]
   1738c:	ldr	r1, [r0]
   17390:	ldr	r2, [r0, #4]
   17394:	adds	r1, r1, #1
   17398:	adc	r2, r2, #0
   1739c:	str	r1, [r0]
   173a0:	str	r2, [r0, #4]
   173a4:	ldr	r0, [pc, #76]	; 173f8 <init_token_boolean_op@@Base+0x88>
   173a8:	add	r0, pc, r0
   173ac:	ldr	r1, [r0, #8]
   173b0:	ldr	r2, [r0, #12]
   173b4:	adds	r1, r1, #1
   173b8:	adc	r2, r2, #0
   173bc:	str	r1, [r0, #8]
   173c0:	str	r2, [r0, #12]
   173c4:	ldr	r0, [sp, #8]
   173c8:	str	r0, [sp, #16]
   173cc:	ldr	r1, [sp, #4]
   173d0:	str	r1, [sp, #12]
   173d4:	ldr	r2, [sp, #16]
   173d8:	movw	r3, #12
   173dc:	str	r3, [r2]
   173e0:	ldr	r2, [sp, #12]
   173e4:	ldr	r3, [sp, #16]
   173e8:	str	r2, [r3, #4]
   173ec:	add	sp, sp, #20
   173f0:	bx	lr
   173f4:	andeq	sl, r1, r0, asr #8
   173f8:	andeq	sl, r1, r0, lsl r4

000173fc <free_token_int_type@@Base>:
   173fc:	push	{fp, lr}
   17400:	mov	fp, sp
   17404:	sub	sp, sp, #16
   17408:	ldr	r1, [pc, #96]	; 17470 <free_token_int_type@@Base+0x74>
   1740c:	add	r1, pc, r1
   17410:	str	r0, [sp, #8]
   17414:	str	r1, [sp, #4]
   17418:	ldr	r0, [sp, #4]
   1741c:	ldr	r1, [r0]
   17420:	ldr	r2, [r0, #4]
   17424:	adds	r1, r1, #1
   17428:	adc	r2, r2, #0
   1742c:	str	r1, [r0]
   17430:	str	r2, [r0, #4]
   17434:	ldr	r0, [pc, #56]	; 17474 <free_token_int_type@@Base+0x78>
   17438:	add	r0, pc, r0
   1743c:	ldr	r1, [r0, #8]
   17440:	ldr	r2, [r0, #12]
   17444:	adds	r1, r1, #1
   17448:	adc	r2, r2, #0
   1744c:	str	r1, [r0, #8]
   17450:	str	r2, [r0, #12]
   17454:	ldr	r0, [sp, #8]
   17458:	str	r0, [fp, #-4]
   1745c:	ldr	r1, [fp, #-4]
   17460:	mov	r0, r1
   17464:	bl	11e6c <free@plt>
   17468:	mov	sp, fp
   1746c:	pop	{fp, pc}
   17470:			; <UNDEFINED> instruction: 0x0001a3bc
   17474:	muleq	r1, r0, r3

00017478 <free_token_int_value@@Base>:
   17478:	push	{fp, lr}
   1747c:	mov	fp, sp
   17480:	sub	sp, sp, #16
   17484:	ldr	r1, [pc, #96]	; 174ec <free_token_int_value@@Base+0x74>
   17488:	add	r1, pc, r1
   1748c:	str	r0, [sp, #8]
   17490:	str	r1, [sp, #4]
   17494:	ldr	r0, [sp, #4]
   17498:	ldr	r1, [r0]
   1749c:	ldr	r2, [r0, #4]
   174a0:	adds	r1, r1, #1
   174a4:	adc	r2, r2, #0
   174a8:	str	r1, [r0]
   174ac:	str	r2, [r0, #4]
   174b0:	ldr	r0, [pc, #56]	; 174f0 <free_token_int_value@@Base+0x78>
   174b4:	add	r0, pc, r0
   174b8:	ldr	r1, [r0, #8]
   174bc:	ldr	r2, [r0, #12]
   174c0:	adds	r1, r1, #1
   174c4:	adc	r2, r2, #0
   174c8:	str	r1, [r0, #8]
   174cc:	str	r2, [r0, #12]
   174d0:	ldr	r0, [sp, #8]
   174d4:	str	r0, [fp, #-4]
   174d8:	ldr	r1, [fp, #-4]
   174dc:	mov	r0, r1
   174e0:	bl	11e6c <free@plt>
   174e4:	mov	sp, fp
   174e8:	pop	{fp, pc}
   174ec:	andeq	sl, r1, r0, asr r3
   174f0:	andeq	sl, r1, r4, lsr #6

000174f4 <free_token_function@@Base>:
   174f4:	push	{fp, lr}
   174f8:	mov	fp, sp
   174fc:	sub	sp, sp, #16
   17500:	ldr	r1, [pc, #96]	; 17568 <free_token_function@@Base+0x74>
   17504:	add	r1, pc, r1
   17508:	str	r0, [sp, #8]
   1750c:	str	r1, [sp, #4]
   17510:	ldr	r0, [sp, #4]
   17514:	ldr	r1, [r0]
   17518:	ldr	r2, [r0, #4]
   1751c:	adds	r1, r1, #1
   17520:	adc	r2, r2, #0
   17524:	str	r1, [r0]
   17528:	str	r2, [r0, #4]
   1752c:	ldr	r0, [pc, #56]	; 1756c <free_token_function@@Base+0x78>
   17530:	add	r0, pc, r0
   17534:	ldr	r1, [r0, #8]
   17538:	ldr	r2, [r0, #12]
   1753c:	adds	r1, r1, #1
   17540:	adc	r2, r2, #0
   17544:	str	r1, [r0, #8]
   17548:	str	r2, [r0, #12]
   1754c:	ldr	r0, [sp, #8]
   17550:	str	r0, [fp, #-4]
   17554:	ldr	r1, [fp, #-4]
   17558:	mov	r0, r1
   1755c:	bl	11e6c <free@plt>
   17560:	mov	sp, fp
   17564:	pop	{fp, pc}
   17568:	andeq	sl, r1, r4, ror #5
   1756c:			; <UNDEFINED> instruction: 0x0001a2b8

00017570 <free_token_opar@@Base>:
   17570:	push	{fp, lr}
   17574:	mov	fp, sp
   17578:	sub	sp, sp, #16
   1757c:	ldr	r1, [pc, #96]	; 175e4 <free_token_opar@@Base+0x74>
   17580:	add	r1, pc, r1
   17584:	str	r0, [sp, #8]
   17588:	str	r1, [sp, #4]
   1758c:	ldr	r0, [sp, #4]
   17590:	ldr	r1, [r0]
   17594:	ldr	r2, [r0, #4]
   17598:	adds	r1, r1, #1
   1759c:	adc	r2, r2, #0
   175a0:	str	r1, [r0]
   175a4:	str	r2, [r0, #4]
   175a8:	ldr	r0, [pc, #56]	; 175e8 <free_token_opar@@Base+0x78>
   175ac:	add	r0, pc, r0
   175b0:	ldr	r1, [r0, #8]
   175b4:	ldr	r2, [r0, #12]
   175b8:	adds	r1, r1, #1
   175bc:	adc	r2, r2, #0
   175c0:	str	r1, [r0, #8]
   175c4:	str	r2, [r0, #12]
   175c8:	ldr	r0, [sp, #8]
   175cc:	str	r0, [fp, #-4]
   175d0:	ldr	r1, [fp, #-4]
   175d4:	mov	r0, r1
   175d8:	bl	11e6c <free@plt>
   175dc:	mov	sp, fp
   175e0:	pop	{fp, pc}
   175e4:	andeq	sl, r1, r8, ror r2
   175e8:	andeq	sl, r1, ip, asr #4

000175ec <free_token_cpar@@Base>:
   175ec:	push	{fp, lr}
   175f0:	mov	fp, sp
   175f4:	sub	sp, sp, #16
   175f8:	ldr	r1, [pc, #96]	; 17660 <free_token_cpar@@Base+0x74>
   175fc:	add	r1, pc, r1
   17600:	str	r0, [sp, #8]
   17604:	str	r1, [sp, #4]
   17608:	ldr	r0, [sp, #4]
   1760c:	ldr	r1, [r0]
   17610:	ldr	r2, [r0, #4]
   17614:	adds	r1, r1, #1
   17618:	adc	r2, r2, #0
   1761c:	str	r1, [r0]
   17620:	str	r2, [r0, #4]
   17624:	ldr	r0, [pc, #56]	; 17664 <free_token_cpar@@Base+0x78>
   17628:	add	r0, pc, r0
   1762c:	ldr	r1, [r0, #8]
   17630:	ldr	r2, [r0, #12]
   17634:	adds	r1, r1, #1
   17638:	adc	r2, r2, #0
   1763c:	str	r1, [r0, #8]
   17640:	str	r2, [r0, #12]
   17644:	ldr	r0, [sp, #8]
   17648:	str	r0, [fp, #-4]
   1764c:	ldr	r1, [fp, #-4]
   17650:	mov	r0, r1
   17654:	bl	11e6c <free@plt>
   17658:	mov	sp, fp
   1765c:	pop	{fp, pc}
   17660:	andeq	sl, r1, ip, lsl #4
   17664:	andeq	sl, r1, r0, ror #3

00017668 <free_token_obra@@Base>:
   17668:	push	{fp, lr}
   1766c:	mov	fp, sp
   17670:	sub	sp, sp, #16
   17674:	ldr	r1, [pc, #96]	; 176dc <free_token_obra@@Base+0x74>
   17678:	add	r1, pc, r1
   1767c:	str	r0, [sp, #8]
   17680:	str	r1, [sp, #4]
   17684:	ldr	r0, [sp, #4]
   17688:	ldr	r1, [r0]
   1768c:	ldr	r2, [r0, #4]
   17690:	adds	r1, r1, #1
   17694:	adc	r2, r2, #0
   17698:	str	r1, [r0]
   1769c:	str	r2, [r0, #4]
   176a0:	ldr	r0, [pc, #56]	; 176e0 <free_token_obra@@Base+0x78>
   176a4:	add	r0, pc, r0
   176a8:	ldr	r1, [r0, #8]
   176ac:	ldr	r2, [r0, #12]
   176b0:	adds	r1, r1, #1
   176b4:	adc	r2, r2, #0
   176b8:	str	r1, [r0, #8]
   176bc:	str	r2, [r0, #12]
   176c0:	ldr	r0, [sp, #8]
   176c4:	str	r0, [fp, #-4]
   176c8:	ldr	r1, [fp, #-4]
   176cc:	mov	r0, r1
   176d0:	bl	11e6c <free@plt>
   176d4:	mov	sp, fp
   176d8:	pop	{fp, pc}
   176dc:	andeq	sl, r1, r0, lsr #3
   176e0:	andeq	sl, r1, r4, ror r1

000176e4 <free_token_cbra@@Base>:
   176e4:	push	{fp, lr}
   176e8:	mov	fp, sp
   176ec:	sub	sp, sp, #16
   176f0:	ldr	r1, [pc, #96]	; 17758 <free_token_cbra@@Base+0x74>
   176f4:	add	r1, pc, r1
   176f8:	str	r0, [sp, #8]
   176fc:	str	r1, [sp, #4]
   17700:	ldr	r0, [sp, #4]
   17704:	ldr	r1, [r0]
   17708:	ldr	r2, [r0, #4]
   1770c:	adds	r1, r1, #1
   17710:	adc	r2, r2, #0
   17714:	str	r1, [r0]
   17718:	str	r2, [r0, #4]
   1771c:	ldr	r0, [pc, #56]	; 1775c <free_token_cbra@@Base+0x78>
   17720:	add	r0, pc, r0
   17724:	ldr	r1, [r0, #8]
   17728:	ldr	r2, [r0, #12]
   1772c:	adds	r1, r1, #1
   17730:	adc	r2, r2, #0
   17734:	str	r1, [r0, #8]
   17738:	str	r2, [r0, #12]
   1773c:	ldr	r0, [sp, #8]
   17740:	str	r0, [fp, #-4]
   17744:	ldr	r1, [fp, #-4]
   17748:	mov	r0, r1
   1774c:	bl	11e6c <free@plt>
   17750:	mov	sp, fp
   17754:	pop	{fp, pc}
   17758:	andeq	sl, r1, r4, lsr r1
   1775c:	andeq	sl, r1, r8, lsl #2

00017760 <free_token_return@@Base>:
   17760:	push	{fp, lr}
   17764:	mov	fp, sp
   17768:	sub	sp, sp, #16
   1776c:	ldr	r1, [pc, #96]	; 177d4 <free_token_return@@Base+0x74>
   17770:	add	r1, pc, r1
   17774:	str	r0, [sp, #8]
   17778:	str	r1, [sp, #4]
   1777c:	ldr	r0, [sp, #4]
   17780:	ldr	r1, [r0]
   17784:	ldr	r2, [r0, #4]
   17788:	adds	r1, r1, #1
   1778c:	adc	r2, r2, #0
   17790:	str	r1, [r0]
   17794:	str	r2, [r0, #4]
   17798:	ldr	r0, [pc, #56]	; 177d8 <free_token_return@@Base+0x78>
   1779c:	add	r0, pc, r0
   177a0:	ldr	r1, [r0, #8]
   177a4:	ldr	r2, [r0, #12]
   177a8:	adds	r1, r1, #1
   177ac:	adc	r2, r2, #0
   177b0:	str	r1, [r0, #8]
   177b4:	str	r2, [r0, #12]
   177b8:	ldr	r0, [sp, #8]
   177bc:	str	r0, [fp, #-4]
   177c0:	ldr	r1, [fp, #-4]
   177c4:	mov	r0, r1
   177c8:	bl	11e6c <free@plt>
   177cc:	mov	sp, fp
   177d0:	pop	{fp, pc}
   177d4:	andeq	sl, r1, r8, asr #1
   177d8:	muleq	r1, ip, r0

000177dc <free_token_semicolon@@Base>:
   177dc:	push	{fp, lr}
   177e0:	mov	fp, sp
   177e4:	sub	sp, sp, #16
   177e8:	ldr	r1, [pc, #96]	; 17850 <free_token_semicolon@@Base+0x74>
   177ec:	add	r1, pc, r1
   177f0:	str	r0, [sp, #8]
   177f4:	str	r1, [sp, #4]
   177f8:	ldr	r0, [sp, #4]
   177fc:	ldr	r1, [r0]
   17800:	ldr	r2, [r0, #4]
   17804:	adds	r1, r1, #1
   17808:	adc	r2, r2, #0
   1780c:	str	r1, [r0]
   17810:	str	r2, [r0, #4]
   17814:	ldr	r0, [pc, #56]	; 17854 <free_token_semicolon@@Base+0x78>
   17818:	add	r0, pc, r0
   1781c:	ldr	r1, [r0, #8]
   17820:	ldr	r2, [r0, #12]
   17824:	adds	r1, r1, #1
   17828:	adc	r2, r2, #0
   1782c:	str	r1, [r0, #8]
   17830:	str	r2, [r0, #12]
   17834:	ldr	r0, [sp, #8]
   17838:	str	r0, [fp, #-4]
   1783c:	ldr	r1, [fp, #-4]
   17840:	mov	r0, r1
   17844:	bl	11e6c <free@plt>
   17848:	mov	sp, fp
   1784c:	pop	{fp, pc}
   17850:	andeq	sl, r1, ip, asr r0
   17854:	andeq	sl, r1, r0, lsr r0

00017858 <free_token_eof@@Base>:
   17858:	push	{fp, lr}
   1785c:	mov	fp, sp
   17860:	sub	sp, sp, #16
   17864:	ldr	r1, [pc, #96]	; 178cc <free_token_eof@@Base+0x74>
   17868:	add	r1, pc, r1
   1786c:	str	r0, [sp, #8]
   17870:	str	r1, [sp, #4]
   17874:	ldr	r0, [sp, #4]
   17878:	ldr	r1, [r0]
   1787c:	ldr	r2, [r0, #4]
   17880:	adds	r1, r1, #1
   17884:	adc	r2, r2, #0
   17888:	str	r1, [r0]
   1788c:	str	r2, [r0, #4]
   17890:	ldr	r0, [pc, #56]	; 178d0 <free_token_eof@@Base+0x78>
   17894:	add	r0, pc, r0
   17898:	ldr	r1, [r0, #8]
   1789c:	ldr	r2, [r0, #12]
   178a0:	adds	r1, r1, #1
   178a4:	adc	r2, r2, #0
   178a8:	str	r1, [r0, #8]
   178ac:	str	r2, [r0, #12]
   178b0:	ldr	r0, [sp, #8]
   178b4:	str	r0, [fp, #-4]
   178b8:	ldr	r1, [fp, #-4]
   178bc:	mov	r0, r1
   178c0:	bl	11e6c <free@plt>
   178c4:	mov	sp, fp
   178c8:	pop	{fp, pc}
   178cc:	strdeq	r9, [r1], -r0
   178d0:	andeq	r9, r1, r4, asr #31

000178d4 <free_token_if@@Base>:
   178d4:	push	{fp, lr}
   178d8:	mov	fp, sp
   178dc:	sub	sp, sp, #16
   178e0:	ldr	r1, [pc, #96]	; 17948 <free_token_if@@Base+0x74>
   178e4:	add	r1, pc, r1
   178e8:	str	r0, [sp, #8]
   178ec:	str	r1, [sp, #4]
   178f0:	ldr	r0, [sp, #4]
   178f4:	ldr	r1, [r0]
   178f8:	ldr	r2, [r0, #4]
   178fc:	adds	r1, r1, #1
   17900:	adc	r2, r2, #0
   17904:	str	r1, [r0]
   17908:	str	r2, [r0, #4]
   1790c:	ldr	r0, [pc, #56]	; 1794c <free_token_if@@Base+0x78>
   17910:	add	r0, pc, r0
   17914:	ldr	r1, [r0, #8]
   17918:	ldr	r2, [r0, #12]
   1791c:	adds	r1, r1, #1
   17920:	adc	r2, r2, #0
   17924:	str	r1, [r0, #8]
   17928:	str	r2, [r0, #12]
   1792c:	ldr	r0, [sp, #8]
   17930:	str	r0, [fp, #-4]
   17934:	ldr	r1, [fp, #-4]
   17938:	mov	r0, r1
   1793c:	bl	11e6c <free@plt>
   17940:	mov	sp, fp
   17944:	pop	{fp, pc}
   17948:	andeq	r9, r1, r4, lsl #31
   1794c:	andeq	r9, r1, r8, asr pc

00017950 <free_token_else@@Base>:
   17950:	push	{fp, lr}
   17954:	mov	fp, sp
   17958:	sub	sp, sp, #16
   1795c:	ldr	r1, [pc, #96]	; 179c4 <free_token_else@@Base+0x74>
   17960:	add	r1, pc, r1
   17964:	str	r0, [sp, #8]
   17968:	str	r1, [sp, #4]
   1796c:	ldr	r0, [sp, #4]
   17970:	ldr	r1, [r0]
   17974:	ldr	r2, [r0, #4]
   17978:	adds	r1, r1, #1
   1797c:	adc	r2, r2, #0
   17980:	str	r1, [r0]
   17984:	str	r2, [r0, #4]
   17988:	ldr	r0, [pc, #56]	; 179c8 <free_token_else@@Base+0x78>
   1798c:	add	r0, pc, r0
   17990:	ldr	r1, [r0, #8]
   17994:	ldr	r2, [r0, #12]
   17998:	adds	r1, r1, #1
   1799c:	adc	r2, r2, #0
   179a0:	str	r1, [r0, #8]
   179a4:	str	r2, [r0, #12]
   179a8:	ldr	r0, [sp, #8]
   179ac:	str	r0, [fp, #-4]
   179b0:	ldr	r1, [fp, #-4]
   179b4:	mov	r0, r1
   179b8:	bl	11e6c <free@plt>
   179bc:	mov	sp, fp
   179c0:	pop	{fp, pc}
   179c4:	andeq	r9, r1, r8, lsl pc
   179c8:	andeq	r9, r1, ip, ror #29

000179cc <free_token_boolean_op@@Base>:
   179cc:	push	{fp, lr}
   179d0:	mov	fp, sp
   179d4:	sub	sp, sp, #24
   179d8:	ldr	r1, [pc, #220]	; 17abc <free_token_boolean_op@@Base+0xf0>
   179dc:	add	r1, pc, r1
   179e0:	str	r0, [fp, #-8]
   179e4:	str	r1, [sp, #12]
   179e8:	ldr	r0, [sp, #12]
   179ec:	ldr	r1, [pc, #204]	; 17ac0 <free_token_boolean_op@@Base+0xf4>
   179f0:	add	r1, pc, r1
   179f4:	add	r2, r1, #8
   179f8:	add	r1, r1, #16
   179fc:	ldr	r3, [r0]
   17a00:	ldr	ip, [r0, #4]
   17a04:	adds	r3, r3, #1
   17a08:	adc	ip, ip, #0
   17a0c:	str	r3, [r0]
   17a10:	str	ip, [r0, #4]
   17a14:	ldr	r0, [fp, #-8]
   17a18:	str	r0, [fp, #-4]
   17a1c:	ldr	r3, [fp, #-4]
   17a20:	ldr	r3, [r3, #4]
   17a24:	movw	ip, #0
   17a28:	cmp	r3, ip
   17a2c:	str	r2, [sp, #8]
   17a30:	str	r1, [sp, #4]
   17a34:	beq	17a70 <free_token_boolean_op@@Base+0xa4>
   17a38:	ldr	r0, [sp, #8]
   17a3c:	ldr	r1, [r0]
   17a40:	ldr	r2, [r0, #4]
   17a44:	adds	r1, r1, #1
   17a48:	adc	r2, r2, #0
   17a4c:	str	r1, [r0]
   17a50:	str	r2, [r0, #4]
   17a54:	ldr	r0, [fp, #-4]
   17a58:	ldr	r0, [r0, #4]
   17a5c:	bl	11e6c <free@plt>
   17a60:	ldr	r0, [pc, #92]	; 17ac4 <free_token_boolean_op@@Base+0xf8>
   17a64:	add	r0, pc, r0
   17a68:	add	r0, r0, #24
   17a6c:	str	r0, [sp, #4]
   17a70:	ldr	r0, [sp, #4]
   17a74:	ldr	r1, [r0]
   17a78:	ldr	r2, [r0, #4]
   17a7c:	adds	r1, r1, #1
   17a80:	adc	r2, r2, #0
   17a84:	str	r1, [r0]
   17a88:	str	r2, [r0, #4]
   17a8c:	ldr	r0, [pc, #52]	; 17ac8 <free_token_boolean_op@@Base+0xfc>
   17a90:	add	r0, pc, r0
   17a94:	ldr	r1, [r0, #32]
   17a98:	ldr	r2, [r0, #36]	; 0x24
   17a9c:	adds	r1, r1, #1
   17aa0:	adc	r2, r2, #0
   17aa4:	str	r1, [r0, #32]
   17aa8:	str	r2, [r0, #36]	; 0x24
   17aac:	ldr	r0, [fp, #-4]
   17ab0:	bl	11e6c <free@plt>
   17ab4:	mov	sp, fp
   17ab8:	pop	{fp, pc}
   17abc:	andeq	r9, r1, ip, lsr #29
   17ac0:	muleq	r1, r8, lr
   17ac4:	andeq	r9, r1, r4, lsr #28
   17ac8:	strdeq	r9, [r1], -r8
   17acc:	push	{r4, sl, fp, lr}
   17ad0:	add	fp, sp, #8
   17ad4:	sub	sp, sp, #40	; 0x28
   17ad8:	movw	r0, #0
   17adc:	str	r0, [fp, #-12]
   17ae0:	b	17ae4 <free_token_boolean_op@@Base+0x118>
   17ae4:	ldr	r0, [fp, #-12]
   17ae8:	ldr	r1, [pc, #244]	; 17be4 <free_token_boolean_op@@Base+0x218>
   17aec:	add	r1, pc, r1
   17af0:	movw	r2, #24
   17af4:	mul	r2, r0, r2
   17af8:	add	r1, r1, r2
   17afc:	ldr	r2, [r1]
   17b00:	ldr	r3, [r1, #4]
   17b04:	ldr	ip, [r1, #8]
   17b08:	str	r0, [fp, #-16]
   17b0c:	mov	r0, r2
   17b10:	str	r1, [fp, #-20]	; 0xffffffec
   17b14:	mov	r1, r3
   17b18:	mov	r2, ip
   17b1c:	bl	1b790 <read_boolean_unary_expression@@Base+0x790>
   17b20:	ldr	r0, [fp, #-20]	; 0xffffffec
   17b24:	ldr	r1, [r0, #12]
   17b28:	ldr	r2, [r0, #16]
   17b2c:	ldr	r3, [r0, #20]
   17b30:	movw	ip, #0
   17b34:	cmp	ip, r1
   17b38:	str	r1, [sp, #24]
   17b3c:	str	r2, [sp, #20]
   17b40:	str	r3, [sp, #16]
   17b44:	str	ip, [sp, #12]
   17b48:	bge	17bc0 <free_token_boolean_op@@Base+0x1f4>
   17b4c:	ldr	r0, [sp, #12]
   17b50:	add	r1, r0, r0, lsl #2
   17b54:	ldr	r2, [sp, #20]
   17b58:	ldr	r1, [r2, r1, lsl #2]!
   17b5c:	ldr	r3, [r2, #4]
   17b60:	ldr	ip, [r2, #8]
   17b64:	ldr	lr, [r2, #16]
   17b68:	ldrb	r2, [r2, #12]
   17b6c:	mov	r4, sp
   17b70:	str	lr, [r4]
   17b74:	str	r0, [sp, #8]
   17b78:	mov	r0, r1
   17b7c:	mov	r1, r3
   17b80:	str	r2, [sp, #4]
   17b84:	mov	r2, ip
   17b88:	ldr	r3, [sp, #4]
   17b8c:	bl	1beb0 <read_boolean_unary_expression@@Base+0xeb0>
   17b90:	ldr	r0, [sp, #16]
   17b94:	ldr	r1, [sp, #8]
   17b98:	add	r2, r0, r1, lsl #3
   17b9c:	ldr	r0, [r2]
   17ba0:	ldr	r1, [r2, #4]
   17ba4:	bl	1c764 <read_boolean_unary_expression@@Base+0x1764>
   17ba8:	ldr	r0, [sp, #8]
   17bac:	add	r1, r0, #1
   17bb0:	ldr	r2, [sp, #24]
   17bb4:	cmp	r1, r2
   17bb8:	str	r1, [sp, #12]
   17bbc:	blt	17b4c <free_token_boolean_op@@Base+0x180>
   17bc0:	bl	1ceec <read_boolean_unary_expression@@Base+0x1eec>
   17bc4:	bl	1dc58 <read_boolean_unary_expression@@Base+0x2c58>
   17bc8:	ldr	r0, [fp, #-16]
   17bcc:	add	r1, r0, #1
   17bd0:	cmp	r1, #1
   17bd4:	str	r1, [fp, #-12]
   17bd8:	blt	17ae4 <free_token_boolean_op@@Base+0x118>
   17bdc:	sub	sp, fp, #8
   17be0:	pop	{r4, sl, fp, pc}
   17be4:	strheq	r9, [r1], -ip
   17be8:	push	{fp, lr}
   17bec:	mov	fp, sp
   17bf0:	bl	17acc <free_token_boolean_op@@Base+0x100>
   17bf4:	ldr	r0, [pc, #648]	; 17e84 <free_token_boolean_op@@Base+0x4b8>
   17bf8:	add	r0, pc, r0
   17bfc:	mov	r1, #0
   17c00:	str	r1, [r0, #12]
   17c04:	str	r1, [r0, #8]
   17c08:	str	r1, [r0, #4]
   17c0c:	str	r1, [r0]
   17c10:	ldr	r0, [pc, #624]	; 17e88 <free_token_boolean_op@@Base+0x4bc>
   17c14:	add	r0, pc, r0
   17c18:	str	r1, [r0, #12]
   17c1c:	str	r1, [r0, #8]
   17c20:	str	r1, [r0, #4]
   17c24:	str	r1, [r0]
   17c28:	ldr	r0, [pc, #604]	; 17e8c <free_token_boolean_op@@Base+0x4c0>
   17c2c:	add	r0, pc, r0
   17c30:	str	r1, [r0, #12]
   17c34:	str	r1, [r0, #8]
   17c38:	str	r1, [r0, #4]
   17c3c:	str	r1, [r0]
   17c40:	ldr	r0, [pc, #584]	; 17e90 <free_token_boolean_op@@Base+0x4c4>
   17c44:	add	r0, pc, r0
   17c48:	str	r1, [r0, #12]
   17c4c:	str	r1, [r0, #8]
   17c50:	str	r1, [r0, #4]
   17c54:	str	r1, [r0]
   17c58:	ldr	r0, [pc, #564]	; 17e94 <free_token_boolean_op@@Base+0x4c8>
   17c5c:	add	r0, pc, r0
   17c60:	str	r1, [r0, #12]
   17c64:	str	r1, [r0, #8]
   17c68:	str	r1, [r0, #4]
   17c6c:	str	r1, [r0]
   17c70:	ldr	r0, [pc, #544]	; 17e98 <free_token_boolean_op@@Base+0x4cc>
   17c74:	add	r0, pc, r0
   17c78:	str	r1, [r0, #12]
   17c7c:	str	r1, [r0, #8]
   17c80:	str	r1, [r0, #4]
   17c84:	str	r1, [r0]
   17c88:	ldr	r0, [pc, #524]	; 17e9c <free_token_boolean_op@@Base+0x4d0>
   17c8c:	add	r0, pc, r0
   17c90:	str	r1, [r0, #12]
   17c94:	str	r1, [r0, #8]
   17c98:	str	r1, [r0, #4]
   17c9c:	str	r1, [r0]
   17ca0:	ldr	r0, [pc, #504]	; 17ea0 <free_token_boolean_op@@Base+0x4d4>
   17ca4:	add	r0, pc, r0
   17ca8:	str	r1, [r0, #12]
   17cac:	str	r1, [r0, #8]
   17cb0:	str	r1, [r0, #4]
   17cb4:	str	r1, [r0]
   17cb8:	ldr	r0, [pc, #484]	; 17ea4 <free_token_boolean_op@@Base+0x4d8>
   17cbc:	add	r0, pc, r0
   17cc0:	str	r1, [r0, #12]
   17cc4:	str	r1, [r0, #8]
   17cc8:	str	r1, [r0, #4]
   17ccc:	str	r1, [r0]
   17cd0:	ldr	r0, [pc, #464]	; 17ea8 <free_token_boolean_op@@Base+0x4dc>
   17cd4:	add	r0, pc, r0
   17cd8:	str	r1, [r0, #12]
   17cdc:	str	r1, [r0, #8]
   17ce0:	str	r1, [r0, #4]
   17ce4:	str	r1, [r0]
   17ce8:	ldr	r0, [pc, #444]	; 17eac <free_token_boolean_op@@Base+0x4e0>
   17cec:	add	r0, pc, r0
   17cf0:	str	r1, [r0, #12]
   17cf4:	str	r1, [r0, #8]
   17cf8:	str	r1, [r0, #4]
   17cfc:	str	r1, [r0]
   17d00:	ldr	r0, [pc, #424]	; 17eb0 <free_token_boolean_op@@Base+0x4e4>
   17d04:	add	r0, pc, r0
   17d08:	str	r1, [r0, #12]
   17d0c:	str	r1, [r0, #8]
   17d10:	str	r1, [r0, #4]
   17d14:	str	r1, [r0]
   17d18:	ldr	r0, [pc, #404]	; 17eb4 <free_token_boolean_op@@Base+0x4e8>
   17d1c:	add	r0, pc, r0
   17d20:	str	r1, [r0, #12]
   17d24:	str	r1, [r0, #8]
   17d28:	str	r1, [r0, #4]
   17d2c:	str	r1, [r0]
   17d30:	ldr	r0, [pc, #384]	; 17eb8 <free_token_boolean_op@@Base+0x4ec>
   17d34:	add	r0, pc, r0
   17d38:	str	r1, [r0, #12]
   17d3c:	str	r1, [r0, #8]
   17d40:	str	r1, [r0, #4]
   17d44:	str	r1, [r0]
   17d48:	ldr	r0, [pc, #364]	; 17ebc <free_token_boolean_op@@Base+0x4f0>
   17d4c:	add	r0, pc, r0
   17d50:	str	r1, [r0, #12]
   17d54:	str	r1, [r0, #8]
   17d58:	str	r1, [r0, #4]
   17d5c:	str	r1, [r0]
   17d60:	ldr	r0, [pc, #344]	; 17ec0 <free_token_boolean_op@@Base+0x4f4>
   17d64:	add	r0, pc, r0
   17d68:	str	r1, [r0, #12]
   17d6c:	str	r1, [r0, #8]
   17d70:	str	r1, [r0, #4]
   17d74:	str	r1, [r0]
   17d78:	ldr	r0, [pc, #324]	; 17ec4 <free_token_boolean_op@@Base+0x4f8>
   17d7c:	add	r0, pc, r0
   17d80:	str	r1, [r0, #12]
   17d84:	str	r1, [r0, #8]
   17d88:	str	r1, [r0, #4]
   17d8c:	str	r1, [r0]
   17d90:	ldr	r0, [pc, #304]	; 17ec8 <free_token_boolean_op@@Base+0x4fc>
   17d94:	add	r0, pc, r0
   17d98:	str	r1, [r0, #12]
   17d9c:	str	r1, [r0, #8]
   17da0:	str	r1, [r0, #4]
   17da4:	str	r1, [r0]
   17da8:	ldr	r0, [pc, #284]	; 17ecc <free_token_boolean_op@@Base+0x500>
   17dac:	add	r0, pc, r0
   17db0:	str	r1, [r0, #12]
   17db4:	str	r1, [r0, #8]
   17db8:	str	r1, [r0, #4]
   17dbc:	str	r1, [r0]
   17dc0:	ldr	r0, [pc, #264]	; 17ed0 <free_token_boolean_op@@Base+0x504>
   17dc4:	add	r0, pc, r0
   17dc8:	str	r1, [r0, #12]
   17dcc:	str	r1, [r0, #8]
   17dd0:	str	r1, [r0, #4]
   17dd4:	str	r1, [r0]
   17dd8:	ldr	r0, [pc, #244]	; 17ed4 <free_token_boolean_op@@Base+0x508>
   17ddc:	add	r0, pc, r0
   17de0:	str	r1, [r0, #12]
   17de4:	str	r1, [r0, #8]
   17de8:	str	r1, [r0, #4]
   17dec:	str	r1, [r0]
   17df0:	ldr	r0, [pc, #224]	; 17ed8 <free_token_boolean_op@@Base+0x50c>
   17df4:	add	r0, pc, r0
   17df8:	str	r1, [r0, #12]
   17dfc:	str	r1, [r0, #8]
   17e00:	str	r1, [r0, #4]
   17e04:	str	r1, [r0]
   17e08:	ldr	r0, [pc, #204]	; 17edc <free_token_boolean_op@@Base+0x510>
   17e0c:	add	r0, pc, r0
   17e10:	str	r1, [r0, #12]
   17e14:	str	r1, [r0, #8]
   17e18:	str	r1, [r0, #4]
   17e1c:	str	r1, [r0]
   17e20:	ldr	r0, [pc, #184]	; 17ee0 <free_token_boolean_op@@Base+0x514>
   17e24:	add	r0, pc, r0
   17e28:	str	r1, [r0, #12]
   17e2c:	str	r1, [r0, #8]
   17e30:	str	r1, [r0, #4]
   17e34:	str	r1, [r0]
   17e38:	ldr	r0, [pc, #164]	; 17ee4 <free_token_boolean_op@@Base+0x518>
   17e3c:	add	r0, pc, r0
   17e40:	str	r1, [r0, #12]
   17e44:	str	r1, [r0, #8]
   17e48:	str	r1, [r0, #4]
   17e4c:	str	r1, [r0]
   17e50:	ldr	r0, [pc, #144]	; 17ee8 <free_token_boolean_op@@Base+0x51c>
   17e54:	add	r0, pc, r0
   17e58:	str	r1, [r0, #36]	; 0x24
   17e5c:	str	r1, [r0, #32]
   17e60:	str	r1, [r0, #28]
   17e64:	str	r1, [r0, #24]
   17e68:	str	r1, [r0, #20]
   17e6c:	str	r1, [r0, #16]
   17e70:	str	r1, [r0, #12]
   17e74:	str	r1, [r0, #8]
   17e78:	str	r1, [r0, #4]
   17e7c:	str	r1, [r0]
   17e80:	pop	{fp, pc}
   17e84:	andeq	r9, r1, r0, lsl #22
   17e88:	strdeq	r9, [r1], -r4
   17e8c:	andeq	r9, r1, ip, ror #21
   17e90:	andeq	r9, r1, r4, ror #21
   17e94:	ldrdeq	r9, [r1], -ip
   17e98:	ldrdeq	r9, [r1], -r4
   17e9c:	andeq	r9, r1, ip, asr #21
   17ea0:	andeq	r9, r1, r4, asr #21
   17ea4:			; <UNDEFINED> instruction: 0x00019abc
   17ea8:			; <UNDEFINED> instruction: 0x00019ab4
   17eac:	andeq	r9, r1, ip, lsr #21
   17eb0:	andeq	r9, r1, r4, lsr #21
   17eb4:	muleq	r1, ip, sl
   17eb8:	muleq	r1, r4, sl
   17ebc:	andeq	r9, r1, ip, lsl #21
   17ec0:	andeq	r9, r1, r4, lsl #21
   17ec4:	andeq	r9, r1, ip, ror sl
   17ec8:	andeq	r9, r1, r4, ror sl
   17ecc:	andeq	r9, r1, ip, ror #20
   17ed0:	andeq	r9, r1, r4, ror #20
   17ed4:	andeq	r9, r1, ip, asr sl
   17ed8:	andeq	r9, r1, r4, asr sl
   17edc:	andeq	r9, r1, ip, asr #20
   17ee0:	andeq	r9, r1, r4, asr #20
   17ee4:	andeq	r9, r1, ip, lsr sl
   17ee8:	andeq	r9, r1, r4, lsr sl
   17eec:	push	{fp, lr}
   17ef0:	mov	fp, sp
   17ef4:	ldr	r0, [pc, #16]	; 17f0c <free_token_boolean_op@@Base+0x540>
   17ef8:	add	r0, pc, r0
   17efc:	ldr	r1, [pc, #12]	; 17f10 <free_token_boolean_op@@Base+0x544>
   17f00:	add	r1, pc, r1
   17f04:	bl	1e10c <__gcov_flush@@Base+0xb8>
   17f08:	pop	{fp, pc}
   17f0c:			; <UNDEFINED> instruction: 0xfffffbcc
   17f10:			; <UNDEFINED> instruction: 0xfffffce0

00017f14 <init_ast_base@@Base>:
   17f14:	sub	sp, sp, #28
   17f18:	ldr	r3, [pc, #132]	; 17fa4 <init_ast_base@@Base+0x90>
   17f1c:	add	r3, pc, r3
   17f20:	str	r0, [sp, #12]
   17f24:	str	r1, [sp, #8]
   17f28:	str	r2, [sp, #4]
   17f2c:	str	r3, [sp]
   17f30:	ldr	r0, [sp]
   17f34:	ldr	r1, [r0]
   17f38:	ldr	r2, [r0, #4]
   17f3c:	adds	r1, r1, #1
   17f40:	adc	r2, r2, #0
   17f44:	str	r1, [r0]
   17f48:	str	r2, [r0, #4]
   17f4c:	ldr	r0, [pc, #84]	; 17fa8 <init_ast_base@@Base+0x94>
   17f50:	add	r0, pc, r0
   17f54:	ldr	r1, [r0, #8]
   17f58:	ldr	r2, [r0, #12]
   17f5c:	adds	r1, r1, #1
   17f60:	adc	r2, r2, #0
   17f64:	str	r1, [r0, #8]
   17f68:	str	r2, [r0, #12]
   17f6c:	ldr	r0, [sp, #12]
   17f70:	str	r0, [sp, #24]
   17f74:	ldr	r1, [sp, #8]
   17f78:	str	r1, [sp, #20]
   17f7c:	ldr	r2, [sp, #4]
   17f80:	str	r2, [sp, #16]
   17f84:	ldr	r3, [sp, #20]
   17f88:	ldr	ip, [sp, #24]
   17f8c:	str	r3, [ip]
   17f90:	ldr	r3, [sp, #16]
   17f94:	ldr	ip, [sp, #24]
   17f98:	str	r3, [ip, #4]
   17f9c:	add	sp, sp, #28
   17fa0:	bx	lr
   17fa4:	muleq	r1, ip, r9
   17fa8:	andeq	r9, r1, r8, ror #18

00017fac <init_ast_base_single@@Base>:
   17fac:	push	{fp, lr}
   17fb0:	mov	fp, sp
   17fb4:	sub	sp, sp, #24
   17fb8:	ldr	r2, [pc, #112]	; 18030 <init_ast_base_single@@Base+0x84>
   17fbc:	add	r2, pc, r2
   17fc0:	str	r0, [sp, #12]
   17fc4:	str	r1, [sp, #8]
   17fc8:	str	r2, [sp, #4]
   17fcc:	ldr	r0, [sp, #4]
   17fd0:	ldr	r1, [r0]
   17fd4:	ldr	r2, [r0, #4]
   17fd8:	adds	r1, r1, #1
   17fdc:	adc	r2, r2, #0
   17fe0:	str	r1, [r0]
   17fe4:	str	r2, [r0, #4]
   17fe8:	ldr	r0, [pc, #68]	; 18034 <init_ast_base_single@@Base+0x88>
   17fec:	add	r0, pc, r0
   17ff0:	ldr	r1, [r0, #8]
   17ff4:	ldr	r2, [r0, #12]
   17ff8:	adds	r1, r1, #1
   17ffc:	adc	r2, r2, #0
   18000:	str	r1, [r0, #8]
   18004:	str	r2, [r0, #12]
   18008:	ldr	r0, [sp, #12]
   1800c:	str	r0, [fp, #-4]
   18010:	ldr	r1, [sp, #8]
   18014:	str	r1, [fp, #-8]
   18018:	ldr	r0, [fp, #-4]
   1801c:	ldr	r1, [fp, #-8]
   18020:	movw	r2, #0
   18024:	bl	17f14 <init_ast_base@@Base>
   18028:	mov	sp, fp
   1802c:	pop	{fp, pc}
   18030:	andeq	r9, r1, ip, lsl #18
   18034:	ldrdeq	r9, [r1], -ip

00018038 <init_node_id@@Base>:
   18038:	push	{fp, lr}
   1803c:	mov	fp, sp
   18040:	sub	sp, sp, #24
   18044:	ldr	r2, [pc, #120]	; 180c4 <init_node_id@@Base+0x8c>
   18048:	add	r2, pc, r2
   1804c:	str	r0, [sp, #12]
   18050:	str	r1, [sp, #8]
   18054:	str	r2, [sp, #4]
   18058:	ldr	r0, [sp, #4]
   1805c:	ldr	r1, [r0]
   18060:	ldr	r2, [r0, #4]
   18064:	adds	r1, r1, #1
   18068:	adc	r2, r2, #0
   1806c:	str	r1, [r0]
   18070:	str	r2, [r0, #4]
   18074:	ldr	r0, [pc, #76]	; 180c8 <init_node_id@@Base+0x90>
   18078:	add	r0, pc, r0
   1807c:	ldr	r1, [r0, #8]
   18080:	ldr	r2, [r0, #12]
   18084:	adds	r1, r1, #1
   18088:	adc	r2, r2, #0
   1808c:	str	r1, [r0, #8]
   18090:	str	r2, [r0, #12]
   18094:	ldr	r0, [sp, #12]
   18098:	str	r0, [fp, #-4]
   1809c:	ldr	r1, [sp, #8]
   180a0:	str	r1, [fp, #-8]
   180a4:	ldr	r0, [fp, #-4]
   180a8:	movw	r1, #0
   180ac:	bl	17fac <init_ast_base_single@@Base>
   180b0:	ldr	r0, [fp, #-8]
   180b4:	ldr	r1, [fp, #-4]
   180b8:	str	r0, [r1, #8]
   180bc:	mov	sp, fp
   180c0:	pop	{fp, pc}
   180c4:	muleq	r1, r0, r8
   180c8:	andeq	r9, r1, r0, ror #16

000180cc <init_node_int@@Base>:
   180cc:	push	{fp, lr}
   180d0:	mov	fp, sp
   180d4:	sub	sp, sp, #24
   180d8:	ldr	r2, [pc, #120]	; 18158 <init_node_int@@Base+0x8c>
   180dc:	add	r2, pc, r2
   180e0:	str	r0, [sp, #12]
   180e4:	str	r1, [sp, #8]
   180e8:	str	r2, [sp, #4]
   180ec:	ldr	r0, [sp, #4]
   180f0:	ldr	r1, [r0]
   180f4:	ldr	r2, [r0, #4]
   180f8:	adds	r1, r1, #1
   180fc:	adc	r2, r2, #0
   18100:	str	r1, [r0]
   18104:	str	r2, [r0, #4]
   18108:	ldr	r0, [pc, #76]	; 1815c <init_node_int@@Base+0x90>
   1810c:	add	r0, pc, r0
   18110:	ldr	r1, [r0, #8]
   18114:	ldr	r2, [r0, #12]
   18118:	adds	r1, r1, #1
   1811c:	adc	r2, r2, #0
   18120:	str	r1, [r0, #8]
   18124:	str	r2, [r0, #12]
   18128:	ldr	r0, [sp, #12]
   1812c:	str	r0, [fp, #-4]
   18130:	ldr	r1, [sp, #8]
   18134:	str	r1, [fp, #-8]
   18138:	ldr	r0, [fp, #-4]
   1813c:	movw	r1, #1
   18140:	bl	17fac <init_ast_base_single@@Base>
   18144:	ldr	r0, [fp, #-8]
   18148:	ldr	r1, [fp, #-4]
   1814c:	str	r0, [r1, #8]
   18150:	mov	sp, fp
   18154:	pop	{fp, pc}
   18158:	andeq	r9, r1, ip, lsl #16
   1815c:	ldrdeq	r9, [r1], -ip

00018160 <init_node_function@@Base>:
   18160:	push	{fp, lr}
   18164:	mov	fp, sp
   18168:	sub	sp, sp, #32
   1816c:	ldr	r3, [pc, #144]	; 18204 <init_node_function@@Base+0xa4>
   18170:	add	r3, pc, r3
   18174:	str	r0, [sp, #16]
   18178:	str	r1, [sp, #12]
   1817c:	str	r2, [sp, #8]
   18180:	str	r3, [sp, #4]
   18184:	ldr	r0, [sp, #4]
   18188:	ldr	r1, [r0]
   1818c:	ldr	r2, [r0, #4]
   18190:	adds	r1, r1, #1
   18194:	adc	r2, r2, #0
   18198:	str	r1, [r0]
   1819c:	str	r2, [r0, #4]
   181a0:	ldr	r0, [pc, #96]	; 18208 <init_node_function@@Base+0xa8>
   181a4:	add	r0, pc, r0
   181a8:	ldr	r1, [r0, #8]
   181ac:	ldr	r2, [r0, #12]
   181b0:	adds	r1, r1, #1
   181b4:	adc	r2, r2, #0
   181b8:	str	r1, [r0, #8]
   181bc:	str	r2, [r0, #12]
   181c0:	ldr	r0, [sp, #16]
   181c4:	str	r0, [fp, #-4]
   181c8:	ldr	r1, [sp, #12]
   181cc:	str	r1, [fp, #-8]
   181d0:	ldr	r2, [sp, #8]
   181d4:	str	r2, [fp, #-12]
   181d8:	ldr	r0, [fp, #-4]
   181dc:	movw	r1, #2
   181e0:	bl	17fac <init_ast_base_single@@Base>
   181e4:	ldr	r0, [fp, #-8]
   181e8:	ldr	r1, [fp, #-4]
   181ec:	str	r0, [r1, #8]
   181f0:	ldr	r0, [fp, #-12]
   181f4:	ldr	r1, [fp, #-4]
   181f8:	str	r0, [r1, #12]
   181fc:	mov	sp, fp
   18200:	pop	{fp, pc}
   18204:	andeq	r9, r1, r8, lsl #15
   18208:	andeq	r9, r1, r4, asr r7

0001820c <init_node_return@@Base>:
   1820c:	push	{fp, lr}
   18210:	mov	fp, sp
   18214:	sub	sp, sp, #24
   18218:	ldr	r2, [pc, #120]	; 18298 <init_node_return@@Base+0x8c>
   1821c:	add	r2, pc, r2
   18220:	str	r0, [sp, #12]
   18224:	str	r1, [sp, #8]
   18228:	str	r2, [sp, #4]
   1822c:	ldr	r0, [sp, #4]
   18230:	ldr	r1, [r0]
   18234:	ldr	r2, [r0, #4]
   18238:	adds	r1, r1, #1
   1823c:	adc	r2, r2, #0
   18240:	str	r1, [r0]
   18244:	str	r2, [r0, #4]
   18248:	ldr	r0, [pc, #76]	; 1829c <init_node_return@@Base+0x90>
   1824c:	add	r0, pc, r0
   18250:	ldr	r1, [r0, #8]
   18254:	ldr	r2, [r0, #12]
   18258:	adds	r1, r1, #1
   1825c:	adc	r2, r2, #0
   18260:	str	r1, [r0, #8]
   18264:	str	r2, [r0, #12]
   18268:	ldr	r0, [sp, #12]
   1826c:	str	r0, [fp, #-4]
   18270:	ldr	r1, [sp, #8]
   18274:	str	r1, [fp, #-8]
   18278:	ldr	r0, [fp, #-4]
   1827c:	movw	r1, #3
   18280:	bl	17fac <init_ast_base_single@@Base>
   18284:	ldr	r0, [fp, #-8]
   18288:	ldr	r1, [fp, #-4]
   1828c:	str	r0, [r1, #8]
   18290:	mov	sp, fp
   18294:	pop	{fp, pc}
   18298:	andeq	r9, r1, ip, ror #13
   1829c:			; <UNDEFINED> instruction: 0x000196bc

000182a0 <init_node_if@@Base>:
   182a0:	push	{fp, lr}
   182a4:	mov	fp, sp
   182a8:	sub	sp, sp, #40	; 0x28
   182ac:	ldr	ip, [pc, #168]	; 1835c <init_node_if@@Base+0xbc>
   182b0:	add	ip, pc, ip
   182b4:	str	r0, [sp, #20]
   182b8:	str	r1, [sp, #16]
   182bc:	str	r2, [sp, #12]
   182c0:	str	r3, [sp, #8]
   182c4:	str	ip, [sp, #4]
   182c8:	ldr	r0, [sp, #4]
   182cc:	ldr	r1, [r0]
   182d0:	ldr	r2, [r0, #4]
   182d4:	adds	r1, r1, #1
   182d8:	adc	r2, r2, #0
   182dc:	str	r1, [r0]
   182e0:	str	r2, [r0, #4]
   182e4:	ldr	r0, [pc, #116]	; 18360 <init_node_if@@Base+0xc0>
   182e8:	add	r0, pc, r0
   182ec:	ldr	r1, [r0, #8]
   182f0:	ldr	r2, [r0, #12]
   182f4:	adds	r1, r1, #1
   182f8:	adc	r2, r2, #0
   182fc:	str	r1, [r0, #8]
   18300:	str	r2, [r0, #12]
   18304:	ldr	r0, [sp, #20]
   18308:	str	r0, [fp, #-4]
   1830c:	ldr	r1, [sp, #16]
   18310:	str	r1, [fp, #-8]
   18314:	ldr	r2, [sp, #12]
   18318:	str	r2, [fp, #-12]
   1831c:	ldr	r3, [sp, #8]
   18320:	str	r3, [fp, #-16]
   18324:	ldr	r0, [fp, #-4]
   18328:	movw	r1, #4
   1832c:	bl	17fac <init_ast_base_single@@Base>
   18330:	ldr	r0, [fp, #-8]
   18334:	ldr	r1, [fp, #-4]
   18338:	str	r0, [r1, #8]
   1833c:	ldr	r0, [fp, #-12]
   18340:	ldr	r1, [fp, #-4]
   18344:	str	r0, [r1, #12]
   18348:	ldr	r0, [fp, #-16]
   1834c:	ldr	r1, [fp, #-4]
   18350:	str	r0, [r1, #16]
   18354:	mov	sp, fp
   18358:	pop	{fp, pc}
   1835c:	andeq	r9, r1, r8, ror #12
   18360:	andeq	r9, r1, r0, lsr r6

00018364 <init_node_boolean_operator@@Base>:
   18364:	push	{fp, lr}
   18368:	mov	fp, sp
   1836c:	sub	sp, sp, #40	; 0x28
   18370:	ldr	ip, [pc, #180]	; 1842c <init_node_boolean_operator@@Base+0xc8>
   18374:	add	ip, pc, ip
   18378:	str	r0, [sp, #20]
   1837c:	str	r1, [sp, #16]
   18380:	str	r2, [sp, #12]
   18384:	str	r3, [sp, #8]
   18388:	str	ip, [sp, #4]
   1838c:	ldr	r0, [sp, #4]
   18390:	ldr	r1, [r0]
   18394:	ldr	r2, [r0, #4]
   18398:	adds	r1, r1, #1
   1839c:	adc	r2, r2, #0
   183a0:	str	r1, [r0]
   183a4:	str	r2, [r0, #4]
   183a8:	ldr	r0, [pc, #128]	; 18430 <init_node_boolean_operator@@Base+0xcc>
   183ac:	add	r0, pc, r0
   183b0:	ldr	r1, [r0, #8]
   183b4:	ldr	r2, [r0, #12]
   183b8:	adds	r1, r1, #1
   183bc:	adc	r2, r2, #0
   183c0:	str	r1, [r0, #8]
   183c4:	str	r2, [r0, #12]
   183c8:	ldr	r0, [sp, #20]
   183cc:	str	r0, [fp, #-4]
   183d0:	ldr	r1, [sp, #16]
   183d4:	str	r1, [fp, #-8]
   183d8:	ldr	r2, [sp, #12]
   183dc:	str	r2, [fp, #-12]
   183e0:	ldr	r3, [sp, #8]
   183e4:	str	r3, [fp, #-16]
   183e8:	ldr	r0, [fp, #-4]
   183ec:	movw	r1, #0
   183f0:	bl	17fac <init_ast_base_single@@Base>
   183f4:	ldr	r0, [fp, #-4]
   183f8:	movw	r1, #5
   183fc:	str	r1, [r0]
   18400:	ldr	r0, [fp, #-8]
   18404:	ldr	r1, [fp, #-4]
   18408:	str	r0, [r1, #16]
   1840c:	ldr	r0, [fp, #-12]
   18410:	ldr	r1, [fp, #-4]
   18414:	str	r0, [r1, #8]
   18418:	ldr	r0, [fp, #-16]
   1841c:	ldr	r1, [fp, #-4]
   18420:	str	r0, [r1, #12]
   18424:	mov	sp, fp
   18428:	pop	{fp, pc}
   1842c:			; <UNDEFINED> instruction: 0x000195b4
   18430:	andeq	r9, r1, ip, ror r5

00018434 <free_node@@Base>:
   18434:	push	{r4, r5, r6, sl, fp, lr}
   18438:	add	fp, sp, #16
   1843c:	sub	sp, sp, #80	; 0x50
   18440:	ldr	r1, [pc, #688]	; 186f8 <free_node@@Base+0x2c4>
   18444:	add	r1, pc, r1
   18448:	str	r0, [fp, #-24]	; 0xffffffe8
   1844c:	str	r1, [fp, #-28]	; 0xffffffe4
   18450:	ldr	r0, [fp, #-28]	; 0xffffffe4
   18454:	ldr	r1, [r0]
   18458:	ldr	r2, [r0, #4]
   1845c:	adds	r1, r1, #1
   18460:	adc	r2, r2, #0
   18464:	str	r1, [r0]
   18468:	str	r2, [r0, #4]
   1846c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   18470:	str	r0, [fp, #-20]	; 0xffffffec
   18474:	ldr	r1, [fp, #-20]	; 0xffffffec
   18478:	ldr	r2, [pc, #668]	; 1871c <free_node@@Base+0x2e8>
   1847c:	add	r2, pc, r2
   18480:	add	r3, r2, #56	; 0x38
   18484:	add	ip, r2, #48	; 0x30
   18488:	add	lr, r2, #40	; 0x28
   1848c:	add	r4, r2, #32
   18490:	add	r5, r2, #24
   18494:	add	r6, r2, #16
   18498:	add	r2, r2, #8
   1849c:	ldr	r1, [r1]
   184a0:	cmp	r1, #5
   184a4:	str	r3, [fp, #-32]	; 0xffffffe0
   184a8:	str	ip, [fp, #-36]	; 0xffffffdc
   184ac:	str	lr, [fp, #-40]	; 0xffffffd8
   184b0:	str	r4, [fp, #-44]	; 0xffffffd4
   184b4:	str	r5, [sp, #48]	; 0x30
   184b8:	str	r6, [sp, #44]	; 0x2c
   184bc:	str	r1, [sp, #40]	; 0x28
   184c0:	str	r2, [sp, #36]	; 0x24
   184c4:	bhi	18670 <free_node@@Base+0x23c>
   184c8:	add	r0, pc, #56	; 0x38
   184cc:	ldr	r1, [sp, #40]	; 0x28
   184d0:	ldr	r2, [r0, r1, lsl #2]
   184d4:	ldr	r3, [sp, #44]	; 0x2c
   184d8:	ldr	ip, [sp, #48]	; 0x30
   184dc:	ldr	lr, [fp, #-44]	; 0xffffffd4
   184e0:	ldr	r4, [fp, #-40]	; 0xffffffd8
   184e4:	ldr	r5, [fp, #-36]	; 0xffffffdc
   184e8:	ldr	r6, [fp, #-32]	; 0xffffffe0
   184ec:	str	r3, [sp, #32]
   184f0:	str	ip, [sp, #28]
   184f4:	str	lr, [sp, #24]
   184f8:	str	r4, [sp, #20]
   184fc:	str	r5, [sp, #16]
   18500:	str	r6, [sp, #12]
   18504:	add	pc, r0, r2
   18508:	andeq	r0, r0, r8, lsl r0
   1850c:	andeq	r0, r0, r0, asr r0
   18510:	andeq	r0, r0, r8, lsl #1
   18514:	andeq	r0, r0, r0, asr #1
   18518:	strdeq	r0, [r0], -r8
   1851c:	andeq	r0, r0, r0, lsr r1
   18520:	ldr	r0, [sp, #32]
   18524:	ldr	r1, [r0]
   18528:	ldr	r2, [r0, #4]
   1852c:	adds	r1, r1, #1
   18530:	adc	r2, r2, #0
   18534:	str	r1, [r0]
   18538:	str	r2, [r0, #4]
   1853c:	ldr	r0, [fp, #-20]	; 0xffffffec
   18540:	bl	18724 <free_node_id@@Base>
   18544:	ldr	r0, [pc, #452]	; 18710 <free_node@@Base+0x2dc>
   18548:	add	r0, pc, r0
   1854c:	add	r0, r0, #64	; 0x40
   18550:	str	r0, [sp, #8]
   18554:	b	186b4 <free_node@@Base+0x280>
   18558:	ldr	r0, [sp, #28]
   1855c:	ldr	r1, [r0]
   18560:	ldr	r2, [r0, #4]
   18564:	adds	r1, r1, #1
   18568:	adc	r2, r2, #0
   1856c:	str	r1, [r0]
   18570:	str	r2, [r0, #4]
   18574:	ldr	r0, [fp, #-20]	; 0xffffffec
   18578:	bl	18824 <free_node_int@@Base>
   1857c:	ldr	r0, [pc, #392]	; 1870c <free_node@@Base+0x2d8>
   18580:	add	r0, pc, r0
   18584:	add	r0, r0, #72	; 0x48
   18588:	str	r0, [sp, #8]
   1858c:	b	186b4 <free_node@@Base+0x280>
   18590:	ldr	r0, [sp, #24]
   18594:	ldr	r1, [r0]
   18598:	ldr	r2, [r0, #4]
   1859c:	adds	r1, r1, #1
   185a0:	adc	r2, r2, #0
   185a4:	str	r1, [r0]
   185a8:	str	r2, [r0, #4]
   185ac:	ldr	r0, [fp, #-20]	; 0xffffffec
   185b0:	bl	18924 <free_node_function@@Base>
   185b4:	ldr	r0, [pc, #332]	; 18708 <free_node@@Base+0x2d4>
   185b8:	add	r0, pc, r0
   185bc:	add	r0, r0, #80	; 0x50
   185c0:	str	r0, [sp, #8]
   185c4:	b	186b4 <free_node@@Base+0x280>
   185c8:	ldr	r0, [sp, #20]
   185cc:	ldr	r1, [r0]
   185d0:	ldr	r2, [r0, #4]
   185d4:	adds	r1, r1, #1
   185d8:	adc	r2, r2, #0
   185dc:	str	r1, [r0]
   185e0:	str	r2, [r0, #4]
   185e4:	ldr	r0, [fp, #-20]	; 0xffffffec
   185e8:	bl	18a30 <free_node_return@@Base>
   185ec:	ldr	r0, [pc, #272]	; 18704 <free_node@@Base+0x2d0>
   185f0:	add	r0, pc, r0
   185f4:	add	r0, r0, #88	; 0x58
   185f8:	str	r0, [sp, #8]
   185fc:	b	186b4 <free_node@@Base+0x280>
   18600:	ldr	r0, [sp, #16]
   18604:	ldr	r1, [r0]
   18608:	ldr	r2, [r0, #4]
   1860c:	adds	r1, r1, #1
   18610:	adc	r2, r2, #0
   18614:	str	r1, [r0]
   18618:	str	r2, [r0, #4]
   1861c:	ldr	r0, [fp, #-20]	; 0xffffffec
   18620:	bl	18b30 <free_node_if@@Base>
   18624:	ldr	r0, [pc, #212]	; 18700 <free_node@@Base+0x2cc>
   18628:	add	r0, pc, r0
   1862c:	add	r0, r0, #96	; 0x60
   18630:	str	r0, [sp, #8]
   18634:	b	186b4 <free_node@@Base+0x280>
   18638:	ldr	r0, [sp, #12]
   1863c:	ldr	r1, [r0]
   18640:	ldr	r2, [r0, #4]
   18644:	adds	r1, r1, #1
   18648:	adc	r2, r2, #0
   1864c:	str	r1, [r0]
   18650:	str	r2, [r0, #4]
   18654:	ldr	r0, [fp, #-20]	; 0xffffffec
   18658:	bl	18c54 <free_node_boolean_operator@@Base>
   1865c:	ldr	r0, [pc, #152]	; 186fc <free_node@@Base+0x2c8>
   18660:	add	r0, pc, r0
   18664:	add	r0, r0, #104	; 0x68
   18668:	str	r0, [sp, #8]
   1866c:	b	186b4 <free_node@@Base+0x280>
   18670:	ldr	r0, [sp, #36]	; 0x24
   18674:	ldr	r1, [pc, #152]	; 18714 <free_node@@Base+0x2e0>
   18678:	add	r1, pc, r1
   1867c:	ldr	r2, [pc, #148]	; 18718 <free_node@@Base+0x2e4>
   18680:	ldr	r2, [pc, r2]
   18684:	ldr	r3, [r0]
   18688:	ldr	ip, [r0, #4]
   1868c:	adds	r3, r3, #1
   18690:	adc	ip, ip, #0
   18694:	str	r3, [r0]
   18698:	str	ip, [r0, #4]
   1869c:	ldr	r0, [r2]
   186a0:	bl	11f44 <fprintf@plt>
   186a4:	movw	r1, #1
   186a8:	str	r0, [sp, #4]
   186ac:	mov	r0, r1
   186b0:	bl	11f20 <exit@plt>
   186b4:	ldr	r0, [sp, #8]
   186b8:	ldr	r1, [r0]
   186bc:	ldr	r2, [r0, #4]
   186c0:	adds	r1, r1, #1
   186c4:	adc	r2, r2, #0
   186c8:	str	r1, [r0]
   186cc:	str	r2, [r0, #4]
   186d0:	ldr	r0, [pc, #72]	; 18720 <free_node@@Base+0x2ec>
   186d4:	add	r0, pc, r0
   186d8:	ldr	r1, [r0, #112]	; 0x70
   186dc:	ldr	r2, [r0, #116]	; 0x74
   186e0:	adds	r1, r1, #1
   186e4:	adc	r2, r2, #0
   186e8:	str	r1, [r0, #112]	; 0x70
   186ec:	str	r2, [r0, #116]	; 0x74
   186f0:	sub	sp, fp, #16
   186f4:	pop	{r4, r5, r6, sl, fp, pc}
   186f8:	strdeq	r9, [r1], -r4
   186fc:	ldrdeq	r9, [r1], -r8
   18700:	andeq	r9, r1, r0, lsl r3
   18704:	andeq	r9, r1, r8, asr #6
   18708:	andeq	r9, r1, r0, lsl #7
   1870c:			; <UNDEFINED> instruction: 0x000193b8
   18710:	strdeq	r9, [r1], -r0
   18714:	andeq	r6, r0, r2, asr sl
   18718:	andeq	r8, r1, r8, lsr sl
   1871c:			; <UNDEFINED> instruction: 0x000194bc
   18720:	andeq	r9, r1, r4, ror #4

00018724 <free_node_id@@Base>:
   18724:	push	{fp, lr}
   18728:	mov	fp, sp
   1872c:	sub	sp, sp, #24
   18730:	ldr	r1, [pc, #220]	; 18814 <free_node_id@@Base+0xf0>
   18734:	add	r1, pc, r1
   18738:	str	r0, [fp, #-8]
   1873c:	str	r1, [sp, #12]
   18740:	ldr	r0, [sp, #12]
   18744:	ldr	r1, [pc, #204]	; 18818 <free_node_id@@Base+0xf4>
   18748:	add	r1, pc, r1
   1874c:	add	r2, r1, #8
   18750:	add	r1, r1, #16
   18754:	ldr	r3, [r0]
   18758:	ldr	ip, [r0, #4]
   1875c:	adds	r3, r3, #1
   18760:	adc	ip, ip, #0
   18764:	str	r3, [r0]
   18768:	str	ip, [r0, #4]
   1876c:	ldr	r0, [fp, #-8]
   18770:	str	r0, [fp, #-4]
   18774:	ldr	r3, [fp, #-4]
   18778:	ldr	r3, [r3, #4]
   1877c:	movw	ip, #0
   18780:	cmp	r3, ip
   18784:	str	r2, [sp, #8]
   18788:	str	r1, [sp, #4]
   1878c:	beq	187c8 <free_node_id@@Base+0xa4>
   18790:	ldr	r0, [sp, #8]
   18794:	ldr	r1, [r0]
   18798:	ldr	r2, [r0, #4]
   1879c:	adds	r1, r1, #1
   187a0:	adc	r2, r2, #0
   187a4:	str	r1, [r0]
   187a8:	str	r2, [r0, #4]
   187ac:	ldr	r0, [fp, #-4]
   187b0:	ldr	r0, [r0, #4]
   187b4:	bl	18434 <free_node@@Base>
   187b8:	ldr	r0, [pc, #92]	; 1881c <free_node_id@@Base+0xf8>
   187bc:	add	r0, pc, r0
   187c0:	add	r0, r0, #24
   187c4:	str	r0, [sp, #4]
   187c8:	ldr	r0, [sp, #4]
   187cc:	ldr	r1, [r0]
   187d0:	ldr	r2, [r0, #4]
   187d4:	adds	r1, r1, #1
   187d8:	adc	r2, r2, #0
   187dc:	str	r1, [r0]
   187e0:	str	r2, [r0, #4]
   187e4:	ldr	r0, [pc, #52]	; 18820 <free_node_id@@Base+0xfc>
   187e8:	add	r0, pc, r0
   187ec:	ldr	r1, [r0, #32]
   187f0:	ldr	r2, [r0, #36]	; 0x24
   187f4:	adds	r1, r1, #1
   187f8:	adc	r2, r2, #0
   187fc:	str	r1, [r0, #32]
   18800:	str	r2, [r0, #36]	; 0x24
   18804:	ldr	r0, [fp, #-4]
   18808:	bl	11e6c <free@plt>
   1880c:	mov	sp, fp
   18810:	pop	{fp, pc}
   18814:	andeq	r9, r1, r4, lsl #5
   18818:	andeq	r9, r1, r0, ror r2
   1881c:	strdeq	r9, [r1], -ip
   18820:	ldrdeq	r9, [r1], -r0

00018824 <free_node_int@@Base>:
   18824:	push	{fp, lr}
   18828:	mov	fp, sp
   1882c:	sub	sp, sp, #24
   18830:	ldr	r1, [pc, #220]	; 18914 <free_node_int@@Base+0xf0>
   18834:	add	r1, pc, r1
   18838:	str	r0, [fp, #-8]
   1883c:	str	r1, [sp, #12]
   18840:	ldr	r0, [sp, #12]
   18844:	ldr	r1, [pc, #204]	; 18918 <free_node_int@@Base+0xf4>
   18848:	add	r1, pc, r1
   1884c:	add	r2, r1, #8
   18850:	add	r1, r1, #16
   18854:	ldr	r3, [r0]
   18858:	ldr	ip, [r0, #4]
   1885c:	adds	r3, r3, #1
   18860:	adc	ip, ip, #0
   18864:	str	r3, [r0]
   18868:	str	ip, [r0, #4]
   1886c:	ldr	r0, [fp, #-8]
   18870:	str	r0, [fp, #-4]
   18874:	ldr	r3, [fp, #-4]
   18878:	ldr	r3, [r3, #4]
   1887c:	movw	ip, #0
   18880:	cmp	r3, ip
   18884:	str	r2, [sp, #8]
   18888:	str	r1, [sp, #4]
   1888c:	beq	188c8 <free_node_int@@Base+0xa4>
   18890:	ldr	r0, [sp, #8]
   18894:	ldr	r1, [r0]
   18898:	ldr	r2, [r0, #4]
   1889c:	adds	r1, r1, #1
   188a0:	adc	r2, r2, #0
   188a4:	str	r1, [r0]
   188a8:	str	r2, [r0, #4]
   188ac:	ldr	r0, [fp, #-4]
   188b0:	ldr	r0, [r0, #4]
   188b4:	bl	18434 <free_node@@Base>
   188b8:	ldr	r0, [pc, #92]	; 1891c <free_node_int@@Base+0xf8>
   188bc:	add	r0, pc, r0
   188c0:	add	r0, r0, #24
   188c4:	str	r0, [sp, #4]
   188c8:	ldr	r0, [sp, #4]
   188cc:	ldr	r1, [r0]
   188d0:	ldr	r2, [r0, #4]
   188d4:	adds	r1, r1, #1
   188d8:	adc	r2, r2, #0
   188dc:	str	r1, [r0]
   188e0:	str	r2, [r0, #4]
   188e4:	ldr	r0, [pc, #52]	; 18920 <free_node_int@@Base+0xfc>
   188e8:	add	r0, pc, r0
   188ec:	ldr	r1, [r0, #32]
   188f0:	ldr	r2, [r0, #36]	; 0x24
   188f4:	adds	r1, r1, #1
   188f8:	adc	r2, r2, #0
   188fc:	str	r1, [r0, #32]
   18900:	str	r2, [r0, #36]	; 0x24
   18904:	ldr	r0, [fp, #-4]
   18908:	bl	11e6c <free@plt>
   1890c:	mov	sp, fp
   18910:	pop	{fp, pc}
   18914:			; <UNDEFINED> instruction: 0x000191b4
   18918:	andeq	r9, r1, r0, lsr #3
   1891c:	andeq	r9, r1, ip, lsr #2
   18920:	andeq	r9, r1, r0, lsl #2

00018924 <free_node_function@@Base>:
   18924:	push	{fp, lr}
   18928:	mov	fp, sp
   1892c:	sub	sp, sp, #24
   18930:	ldr	r1, [pc, #232]	; 18a20 <free_node_function@@Base+0xfc>
   18934:	add	r1, pc, r1
   18938:	str	r0, [fp, #-8]
   1893c:	str	r1, [sp, #12]
   18940:	ldr	r0, [sp, #12]
   18944:	ldr	r1, [pc, #216]	; 18a24 <free_node_function@@Base+0x100>
   18948:	add	r1, pc, r1
   1894c:	add	r2, r1, #8
   18950:	add	r1, r1, #16
   18954:	ldr	r3, [r0]
   18958:	ldr	ip, [r0, #4]
   1895c:	adds	r3, r3, #1
   18960:	adc	ip, ip, #0
   18964:	str	r3, [r0]
   18968:	str	ip, [r0, #4]
   1896c:	ldr	r0, [fp, #-8]
   18970:	str	r0, [fp, #-4]
   18974:	ldr	r3, [fp, #-4]
   18978:	ldr	r3, [r3, #4]
   1897c:	movw	ip, #0
   18980:	cmp	r3, ip
   18984:	str	r2, [sp, #8]
   18988:	str	r1, [sp, #4]
   1898c:	beq	189c8 <free_node_function@@Base+0xa4>
   18990:	ldr	r0, [sp, #8]
   18994:	ldr	r1, [r0]
   18998:	ldr	r2, [r0, #4]
   1899c:	adds	r1, r1, #1
   189a0:	adc	r2, r2, #0
   189a4:	str	r1, [r0]
   189a8:	str	r2, [r0, #4]
   189ac:	ldr	r0, [fp, #-4]
   189b0:	ldr	r0, [r0, #4]
   189b4:	bl	18434 <free_node@@Base>
   189b8:	ldr	r0, [pc, #104]	; 18a28 <free_node_function@@Base+0x104>
   189bc:	add	r0, pc, r0
   189c0:	add	r0, r0, #24
   189c4:	str	r0, [sp, #4]
   189c8:	ldr	r0, [sp, #4]
   189cc:	ldr	r1, [r0]
   189d0:	ldr	r2, [r0, #4]
   189d4:	adds	r1, r1, #1
   189d8:	adc	r2, r2, #0
   189dc:	str	r1, [r0]
   189e0:	str	r2, [r0, #4]
   189e4:	ldr	r0, [pc, #64]	; 18a2c <free_node_function@@Base+0x108>
   189e8:	add	r0, pc, r0
   189ec:	ldr	r1, [r0, #32]
   189f0:	ldr	r2, [r0, #36]	; 0x24
   189f4:	adds	r1, r1, #1
   189f8:	adc	r2, r2, #0
   189fc:	str	r1, [r0, #32]
   18a00:	str	r2, [r0, #36]	; 0x24
   18a04:	ldr	r0, [fp, #-4]
   18a08:	ldr	r0, [r0, #8]
   18a0c:	bl	11e6c <free@plt>
   18a10:	ldr	r0, [fp, #-4]
   18a14:	bl	11e6c <free@plt>
   18a18:	mov	sp, fp
   18a1c:	pop	{fp, pc}
   18a20:	andeq	r9, r1, r4, ror #1
   18a24:	ldrdeq	r9, [r1], -r0
   18a28:	andeq	r9, r1, ip, asr r0
   18a2c:	andeq	r9, r1, r0, lsr r0

00018a30 <free_node_return@@Base>:
   18a30:	push	{fp, lr}
   18a34:	mov	fp, sp
   18a38:	sub	sp, sp, #24
   18a3c:	ldr	r1, [pc, #220]	; 18b20 <free_node_return@@Base+0xf0>
   18a40:	add	r1, pc, r1
   18a44:	str	r0, [fp, #-8]
   18a48:	str	r1, [sp, #12]
   18a4c:	ldr	r0, [sp, #12]
   18a50:	ldr	r1, [pc, #204]	; 18b24 <free_node_return@@Base+0xf4>
   18a54:	add	r1, pc, r1
   18a58:	add	r2, r1, #8
   18a5c:	add	r1, r1, #16
   18a60:	ldr	r3, [r0]
   18a64:	ldr	ip, [r0, #4]
   18a68:	adds	r3, r3, #1
   18a6c:	adc	ip, ip, #0
   18a70:	str	r3, [r0]
   18a74:	str	ip, [r0, #4]
   18a78:	ldr	r0, [fp, #-8]
   18a7c:	str	r0, [fp, #-4]
   18a80:	ldr	r3, [fp, #-4]
   18a84:	ldr	r3, [r3, #4]
   18a88:	movw	ip, #0
   18a8c:	cmp	r3, ip
   18a90:	str	r2, [sp, #8]
   18a94:	str	r1, [sp, #4]
   18a98:	beq	18ad4 <free_node_return@@Base+0xa4>
   18a9c:	ldr	r0, [sp, #8]
   18aa0:	ldr	r1, [r0]
   18aa4:	ldr	r2, [r0, #4]
   18aa8:	adds	r1, r1, #1
   18aac:	adc	r2, r2, #0
   18ab0:	str	r1, [r0]
   18ab4:	str	r2, [r0, #4]
   18ab8:	ldr	r0, [fp, #-4]
   18abc:	ldr	r0, [r0, #4]
   18ac0:	bl	18434 <free_node@@Base>
   18ac4:	ldr	r0, [pc, #92]	; 18b28 <free_node_return@@Base+0xf8>
   18ac8:	add	r0, pc, r0
   18acc:	add	r0, r0, #24
   18ad0:	str	r0, [sp, #4]
   18ad4:	ldr	r0, [sp, #4]
   18ad8:	ldr	r1, [r0]
   18adc:	ldr	r2, [r0, #4]
   18ae0:	adds	r1, r1, #1
   18ae4:	adc	r2, r2, #0
   18ae8:	str	r1, [r0]
   18aec:	str	r2, [r0, #4]
   18af0:	ldr	r0, [pc, #52]	; 18b2c <free_node_return@@Base+0xfc>
   18af4:	add	r0, pc, r0
   18af8:	ldr	r1, [r0, #32]
   18afc:	ldr	r2, [r0, #36]	; 0x24
   18b00:	adds	r1, r1, #1
   18b04:	adc	r2, r2, #0
   18b08:	str	r1, [r0, #32]
   18b0c:	str	r2, [r0, #36]	; 0x24
   18b10:	ldr	r0, [fp, #-4]
   18b14:	bl	11e6c <free@plt>
   18b18:	mov	sp, fp
   18b1c:	pop	{fp, pc}
   18b20:	andeq	r9, r1, r8
   18b24:	strdeq	r8, [r1], -r4
   18b28:	andeq	r8, r1, r0, lsl #31
   18b2c:	andeq	r8, r1, r4, asr pc

00018b30 <free_node_if@@Base>:
   18b30:	push	{fp, lr}
   18b34:	mov	fp, sp
   18b38:	sub	sp, sp, #24
   18b3c:	ldr	r1, [pc, #256]	; 18c44 <free_node_if@@Base+0x114>
   18b40:	add	r1, pc, r1
   18b44:	str	r0, [fp, #-8]
   18b48:	str	r1, [sp, #12]
   18b4c:	ldr	r0, [sp, #12]
   18b50:	ldr	r1, [pc, #240]	; 18c48 <free_node_if@@Base+0x118>
   18b54:	add	r1, pc, r1
   18b58:	add	r2, r1, #8
   18b5c:	add	r1, r1, #16
   18b60:	ldr	r3, [r0]
   18b64:	ldr	ip, [r0, #4]
   18b68:	adds	r3, r3, #1
   18b6c:	adc	ip, ip, #0
   18b70:	str	r3, [r0]
   18b74:	str	ip, [r0, #4]
   18b78:	ldr	r0, [fp, #-8]
   18b7c:	str	r0, [fp, #-4]
   18b80:	ldr	r3, [fp, #-4]
   18b84:	ldr	r3, [r3, #4]
   18b88:	movw	ip, #0
   18b8c:	cmp	r3, ip
   18b90:	str	r2, [sp, #8]
   18b94:	str	r1, [sp, #4]
   18b98:	beq	18bd4 <free_node_if@@Base+0xa4>
   18b9c:	ldr	r0, [sp, #8]
   18ba0:	ldr	r1, [r0]
   18ba4:	ldr	r2, [r0, #4]
   18ba8:	adds	r1, r1, #1
   18bac:	adc	r2, r2, #0
   18bb0:	str	r1, [r0]
   18bb4:	str	r2, [r0, #4]
   18bb8:	ldr	r0, [fp, #-4]
   18bbc:	ldr	r0, [r0, #4]
   18bc0:	bl	18434 <free_node@@Base>
   18bc4:	ldr	r0, [pc, #128]	; 18c4c <free_node_if@@Base+0x11c>
   18bc8:	add	r0, pc, r0
   18bcc:	add	r0, r0, #24
   18bd0:	str	r0, [sp, #4]
   18bd4:	ldr	r0, [sp, #4]
   18bd8:	ldr	r1, [r0]
   18bdc:	ldr	r2, [r0, #4]
   18be0:	adds	r1, r1, #1
   18be4:	adc	r2, r2, #0
   18be8:	str	r1, [r0]
   18bec:	str	r2, [r0, #4]
   18bf0:	ldr	r0, [pc, #88]	; 18c50 <free_node_if@@Base+0x120>
   18bf4:	add	r0, pc, r0
   18bf8:	ldr	r1, [r0, #32]
   18bfc:	ldr	r2, [r0, #36]	; 0x24
   18c00:	adds	r1, r1, #1
   18c04:	adc	r2, r2, #0
   18c08:	str	r1, [r0, #32]
   18c0c:	str	r2, [r0, #36]	; 0x24
   18c10:	ldr	r0, [fp, #-4]
   18c14:	ldr	r0, [r0, #8]
   18c18:	bl	18434 <free_node@@Base>
   18c1c:	ldr	r0, [fp, #-4]
   18c20:	ldr	r0, [r0, #12]
   18c24:	bl	18434 <free_node@@Base>
   18c28:	ldr	r0, [fp, #-4]
   18c2c:	ldr	r0, [r0, #16]
   18c30:	bl	18434 <free_node@@Base>
   18c34:	ldr	r0, [fp, #-4]
   18c38:	bl	11e6c <free@plt>
   18c3c:	mov	sp, fp
   18c40:	pop	{fp, pc}
   18c44:	andeq	r8, r1, r8, lsr pc
   18c48:	andeq	r8, r1, r4, lsr #30
   18c4c:			; <UNDEFINED> instruction: 0x00018eb0
   18c50:	andeq	r8, r1, r4, lsl #29

00018c54 <free_node_boolean_operator@@Base>:
   18c54:	push	{fp, lr}
   18c58:	mov	fp, sp
   18c5c:	sub	sp, sp, #24
   18c60:	ldr	r1, [pc, #244]	; 18d5c <free_node_boolean_operator@@Base+0x108>
   18c64:	add	r1, pc, r1
   18c68:	str	r0, [fp, #-8]
   18c6c:	str	r1, [sp, #12]
   18c70:	ldr	r0, [sp, #12]
   18c74:	ldr	r1, [pc, #228]	; 18d60 <free_node_boolean_operator@@Base+0x10c>
   18c78:	add	r1, pc, r1
   18c7c:	add	r2, r1, #8
   18c80:	add	r1, r1, #16
   18c84:	ldr	r3, [r0]
   18c88:	ldr	ip, [r0, #4]
   18c8c:	adds	r3, r3, #1
   18c90:	adc	ip, ip, #0
   18c94:	str	r3, [r0]
   18c98:	str	ip, [r0, #4]
   18c9c:	ldr	r0, [fp, #-8]
   18ca0:	str	r0, [fp, #-4]
   18ca4:	ldr	r3, [fp, #-4]
   18ca8:	ldr	r3, [r3, #4]
   18cac:	movw	ip, #0
   18cb0:	cmp	r3, ip
   18cb4:	str	r2, [sp, #8]
   18cb8:	str	r1, [sp, #4]
   18cbc:	beq	18cf8 <free_node_boolean_operator@@Base+0xa4>
   18cc0:	ldr	r0, [sp, #8]
   18cc4:	ldr	r1, [r0]
   18cc8:	ldr	r2, [r0, #4]
   18ccc:	adds	r1, r1, #1
   18cd0:	adc	r2, r2, #0
   18cd4:	str	r1, [r0]
   18cd8:	str	r2, [r0, #4]
   18cdc:	ldr	r0, [fp, #-4]
   18ce0:	ldr	r0, [r0, #4]
   18ce4:	bl	18434 <free_node@@Base>
   18ce8:	ldr	r0, [pc, #116]	; 18d64 <free_node_boolean_operator@@Base+0x110>
   18cec:	add	r0, pc, r0
   18cf0:	add	r0, r0, #24
   18cf4:	str	r0, [sp, #4]
   18cf8:	ldr	r0, [sp, #4]
   18cfc:	ldr	r1, [r0]
   18d00:	ldr	r2, [r0, #4]
   18d04:	adds	r1, r1, #1
   18d08:	adc	r2, r2, #0
   18d0c:	str	r1, [r0]
   18d10:	str	r2, [r0, #4]
   18d14:	ldr	r0, [pc, #76]	; 18d68 <free_node_boolean_operator@@Base+0x114>
   18d18:	add	r0, pc, r0
   18d1c:	ldr	r1, [r0, #32]
   18d20:	ldr	r2, [r0, #36]	; 0x24
   18d24:	adds	r1, r1, #1
   18d28:	adc	r2, r2, #0
   18d2c:	str	r1, [r0, #32]
   18d30:	str	r2, [r0, #36]	; 0x24
   18d34:	ldr	r0, [fp, #-4]
   18d38:	ldr	r0, [r0, #8]
   18d3c:	bl	18434 <free_node@@Base>
   18d40:	ldr	r0, [fp, #-4]
   18d44:	ldr	r0, [r0, #12]
   18d48:	bl	18434 <free_node@@Base>
   18d4c:	ldr	r0, [fp, #-4]
   18d50:	bl	11e6c <free@plt>
   18d54:	mov	sp, fp
   18d58:	pop	{fp, pc}
   18d5c:	andeq	r8, r1, r4, asr #28
   18d60:	andeq	r8, r1, r0, lsr lr
   18d64:			; <UNDEFINED> instruction: 0x00018dbc
   18d68:	muleq	r1, r0, sp

00018d6c <get_boolean_op_value@@Base>:
   18d6c:	push	{fp, lr}
   18d70:	mov	fp, sp
   18d74:	sub	sp, sp, #128	; 0x80
   18d78:	ldr	r1, [pc, #1508]	; 19364 <get_boolean_op_value@@Base+0x5f8>
   18d7c:	add	r1, pc, r1
   18d80:	str	r0, [fp, #-16]
   18d84:	str	r1, [fp, #-20]	; 0xffffffec
   18d88:	ldr	r0, [fp, #-20]	; 0xffffffec
   18d8c:	ldr	r1, [pc, #1492]	; 19368 <get_boolean_op_value@@Base+0x5fc>
   18d90:	add	r1, pc, r1
   18d94:	add	r2, r1, #8
   18d98:	add	r1, r1, #16
   18d9c:	ldr	r3, [r0]
   18da0:	ldr	ip, [r0, #4]
   18da4:	adds	r3, r3, #1
   18da8:	adc	ip, ip, #0
   18dac:	str	r3, [r0]
   18db0:	str	ip, [r0, #4]
   18db4:	ldr	r0, [fp, #-16]
   18db8:	str	r0, [fp, #-8]
   18dbc:	ldr	r3, [fp, #-8]
   18dc0:	ldr	r0, [r3, #4]
   18dc4:	mov	r3, #2
   18dc8:	str	r1, [fp, #-24]	; 0xffffffe8
   18dcc:	mov	r1, r3
   18dd0:	str	r2, [fp, #-28]	; 0xffffffe4
   18dd4:	bl	11fb0 <strnlen@plt>
   18dd8:	str	r0, [fp, #-12]
   18ddc:	ldr	r0, [fp, #-12]
   18de0:	cmp	r0, #2
   18de4:	ldr	r0, [fp, #-28]	; 0xffffffe4
   18de8:	ldr	r1, [fp, #-24]	; 0xffffffe8
   18dec:	str	r0, [fp, #-32]	; 0xffffffe0
   18df0:	str	r1, [fp, #-36]	; 0xffffffdc
   18df4:	bne	1918c <get_boolean_op_value@@Base+0x420>
   18df8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   18dfc:	ldr	r1, [pc, #1408]	; 19384 <get_boolean_op_value@@Base+0x618>
   18e00:	add	r1, pc, r1
   18e04:	ldr	r2, [r0]
   18e08:	ldr	r3, [r0, #4]
   18e0c:	adds	r2, r2, #1
   18e10:	adc	r3, r3, #0
   18e14:	str	r2, [r0]
   18e18:	str	r3, [r0, #4]
   18e1c:	ldr	r0, [fp, #-8]
   18e20:	ldr	r0, [r0, #4]
   18e24:	movw	r2, #2
   18e28:	bl	11ff8 <strncmp@plt>
   18e2c:	ldr	r1, [pc, #1356]	; 19380 <get_boolean_op_value@@Base+0x614>
   18e30:	add	r1, pc, r1
   18e34:	add	r2, r1, #24
   18e38:	add	r1, r1, #32
   18e3c:	cmp	r0, #0
   18e40:	str	r2, [fp, #-40]	; 0xffffffd8
   18e44:	str	r1, [fp, #-44]	; 0xffffffd4
   18e48:	bne	18e84 <get_boolean_op_value@@Base+0x118>
   18e4c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   18e50:	ldr	r1, [pc, #1396]	; 193cc <get_boolean_op_value@@Base+0x660>
   18e54:	add	r1, pc, r1
   18e58:	add	r1, r1, #40	; 0x28
   18e5c:	ldr	r2, [r0]
   18e60:	ldr	r3, [r0, #4]
   18e64:	adds	r2, r2, #1
   18e68:	adc	r3, r3, #0
   18e6c:	str	r2, [r0]
   18e70:	str	r3, [r0, #4]
   18e74:	movw	r0, #0
   18e78:	str	r0, [fp, #-4]
   18e7c:	str	r1, [fp, #-48]	; 0xffffffd0
   18e80:	b	1931c <get_boolean_op_value@@Base+0x5b0>
   18e84:	ldr	r0, [fp, #-44]	; 0xffffffd4
   18e88:	ldr	r1, [pc, #1276]	; 1938c <get_boolean_op_value@@Base+0x620>
   18e8c:	add	r1, pc, r1
   18e90:	ldr	r2, [r0]
   18e94:	ldr	r3, [r0, #4]
   18e98:	adds	r2, r2, #1
   18e9c:	adc	r3, r3, #0
   18ea0:	str	r2, [r0]
   18ea4:	str	r3, [r0, #4]
   18ea8:	ldr	r0, [fp, #-8]
   18eac:	ldr	r0, [r0, #4]
   18eb0:	movw	r2, #2
   18eb4:	bl	11ff8 <strncmp@plt>
   18eb8:	ldr	r1, [pc, #1224]	; 19388 <get_boolean_op_value@@Base+0x61c>
   18ebc:	add	r1, pc, r1
   18ec0:	add	r2, r1, #48	; 0x30
   18ec4:	add	r1, r1, #56	; 0x38
   18ec8:	cmp	r0, #0
   18ecc:	str	r2, [fp, #-52]	; 0xffffffcc
   18ed0:	str	r1, [fp, #-56]	; 0xffffffc8
   18ed4:	bne	18f10 <get_boolean_op_value@@Base+0x1a4>
   18ed8:	ldr	r0, [fp, #-52]	; 0xffffffcc
   18edc:	ldr	r1, [pc, #1252]	; 193c8 <get_boolean_op_value@@Base+0x65c>
   18ee0:	add	r1, pc, r1
   18ee4:	add	r1, r1, #64	; 0x40
   18ee8:	ldr	r2, [r0]
   18eec:	ldr	r3, [r0, #4]
   18ef0:	adds	r2, r2, #1
   18ef4:	adc	r3, r3, #0
   18ef8:	str	r2, [r0]
   18efc:	str	r3, [r0, #4]
   18f00:	movw	r0, #1
   18f04:	str	r0, [fp, #-4]
   18f08:	str	r1, [fp, #-48]	; 0xffffffd0
   18f0c:	b	1931c <get_boolean_op_value@@Base+0x5b0>
   18f10:	ldr	r0, [fp, #-56]	; 0xffffffc8
   18f14:	ldr	r1, [pc, #1144]	; 19394 <get_boolean_op_value@@Base+0x628>
   18f18:	add	r1, pc, r1
   18f1c:	ldr	r2, [r0]
   18f20:	ldr	r3, [r0, #4]
   18f24:	adds	r2, r2, #1
   18f28:	adc	r3, r3, #0
   18f2c:	str	r2, [r0]
   18f30:	str	r3, [r0, #4]
   18f34:	ldr	r0, [fp, #-8]
   18f38:	ldr	r0, [r0, #4]
   18f3c:	movw	r2, #2
   18f40:	bl	11ff8 <strncmp@plt>
   18f44:	ldr	r1, [pc, #1092]	; 19390 <get_boolean_op_value@@Base+0x624>
   18f48:	add	r1, pc, r1
   18f4c:	add	r2, r1, #72	; 0x48
   18f50:	add	r1, r1, #80	; 0x50
   18f54:	cmp	r0, #0
   18f58:	str	r2, [fp, #-60]	; 0xffffffc4
   18f5c:	str	r1, [sp, #64]	; 0x40
   18f60:	bne	18f9c <get_boolean_op_value@@Base+0x230>
   18f64:	ldr	r0, [fp, #-60]	; 0xffffffc4
   18f68:	ldr	r1, [pc, #1108]	; 193c4 <get_boolean_op_value@@Base+0x658>
   18f6c:	add	r1, pc, r1
   18f70:	add	r1, r1, #88	; 0x58
   18f74:	ldr	r2, [r0]
   18f78:	ldr	r3, [r0, #4]
   18f7c:	adds	r2, r2, #1
   18f80:	adc	r3, r3, #0
   18f84:	str	r2, [r0]
   18f88:	str	r3, [r0, #4]
   18f8c:	movw	r0, #2
   18f90:	str	r0, [fp, #-4]
   18f94:	str	r1, [fp, #-48]	; 0xffffffd0
   18f98:	b	1931c <get_boolean_op_value@@Base+0x5b0>
   18f9c:	ldr	r0, [sp, #64]	; 0x40
   18fa0:	ldr	r1, [pc, #1012]	; 1939c <get_boolean_op_value@@Base+0x630>
   18fa4:	add	r1, pc, r1
   18fa8:	ldr	r2, [r0]
   18fac:	ldr	r3, [r0, #4]
   18fb0:	adds	r2, r2, #1
   18fb4:	adc	r3, r3, #0
   18fb8:	str	r2, [r0]
   18fbc:	str	r3, [r0, #4]
   18fc0:	ldr	r0, [fp, #-8]
   18fc4:	ldr	r0, [r0, #4]
   18fc8:	movw	r2, #2
   18fcc:	bl	11ff8 <strncmp@plt>
   18fd0:	ldr	r1, [pc, #960]	; 19398 <get_boolean_op_value@@Base+0x62c>
   18fd4:	add	r1, pc, r1
   18fd8:	add	r2, r1, #96	; 0x60
   18fdc:	add	r1, r1, #104	; 0x68
   18fe0:	cmp	r0, #0
   18fe4:	str	r2, [sp, #60]	; 0x3c
   18fe8:	str	r1, [sp, #56]	; 0x38
   18fec:	bne	19028 <get_boolean_op_value@@Base+0x2bc>
   18ff0:	ldr	r0, [sp, #60]	; 0x3c
   18ff4:	ldr	r1, [pc, #964]	; 193c0 <get_boolean_op_value@@Base+0x654>
   18ff8:	add	r1, pc, r1
   18ffc:	add	r1, r1, #112	; 0x70
   19000:	ldr	r2, [r0]
   19004:	ldr	r3, [r0, #4]
   19008:	adds	r2, r2, #1
   1900c:	adc	r3, r3, #0
   19010:	str	r2, [r0]
   19014:	str	r3, [r0, #4]
   19018:	movw	r0, #3
   1901c:	str	r0, [fp, #-4]
   19020:	str	r1, [fp, #-48]	; 0xffffffd0
   19024:	b	1931c <get_boolean_op_value@@Base+0x5b0>
   19028:	ldr	r0, [sp, #56]	; 0x38
   1902c:	ldr	r1, [pc, #880]	; 193a4 <get_boolean_op_value@@Base+0x638>
   19030:	add	r1, pc, r1
   19034:	ldr	r2, [r0]
   19038:	ldr	r3, [r0, #4]
   1903c:	adds	r2, r2, #1
   19040:	adc	r3, r3, #0
   19044:	str	r2, [r0]
   19048:	str	r3, [r0, #4]
   1904c:	ldr	r0, [fp, #-8]
   19050:	ldr	r0, [r0, #4]
   19054:	movw	r2, #2
   19058:	bl	11ff8 <strncmp@plt>
   1905c:	ldr	r1, [pc, #828]	; 193a0 <get_boolean_op_value@@Base+0x634>
   19060:	add	r1, pc, r1
   19064:	add	r2, r1, #120	; 0x78
   19068:	add	r1, r1, #128	; 0x80
   1906c:	cmp	r0, #0
   19070:	str	r2, [sp, #52]	; 0x34
   19074:	str	r1, [sp, #48]	; 0x30
   19078:	bne	190b4 <get_boolean_op_value@@Base+0x348>
   1907c:	ldr	r0, [sp, #52]	; 0x34
   19080:	ldr	r1, [pc, #820]	; 193bc <get_boolean_op_value@@Base+0x650>
   19084:	add	r1, pc, r1
   19088:	add	r1, r1, #136	; 0x88
   1908c:	ldr	r2, [r0]
   19090:	ldr	r3, [r0, #4]
   19094:	adds	r2, r2, #1
   19098:	adc	r3, r3, #0
   1909c:	str	r2, [r0]
   190a0:	str	r3, [r0, #4]
   190a4:	movw	r0, #4
   190a8:	str	r0, [fp, #-4]
   190ac:	str	r1, [fp, #-48]	; 0xffffffd0
   190b0:	b	1931c <get_boolean_op_value@@Base+0x5b0>
   190b4:	ldr	r0, [sp, #48]	; 0x30
   190b8:	ldr	r1, [pc, #748]	; 193ac <get_boolean_op_value@@Base+0x640>
   190bc:	add	r1, pc, r1
   190c0:	ldr	r2, [r0]
   190c4:	ldr	r3, [r0, #4]
   190c8:	adds	r2, r2, #1
   190cc:	adc	r3, r3, #0
   190d0:	str	r2, [r0]
   190d4:	str	r3, [r0, #4]
   190d8:	ldr	r0, [fp, #-8]
   190dc:	ldr	r0, [r0, #4]
   190e0:	movw	r2, #2
   190e4:	bl	11ff8 <strncmp@plt>
   190e8:	ldr	r1, [pc, #696]	; 193a8 <get_boolean_op_value@@Base+0x63c>
   190ec:	add	r1, pc, r1
   190f0:	add	r2, r1, #144	; 0x90
   190f4:	add	r1, r1, #152	; 0x98
   190f8:	cmp	r0, #0
   190fc:	str	r2, [sp, #44]	; 0x2c
   19100:	str	r1, [sp, #40]	; 0x28
   19104:	bne	19140 <get_boolean_op_value@@Base+0x3d4>
   19108:	ldr	r0, [sp, #44]	; 0x2c
   1910c:	ldr	r1, [pc, #676]	; 193b8 <get_boolean_op_value@@Base+0x64c>
   19110:	add	r1, pc, r1
   19114:	add	r1, r1, #160	; 0xa0
   19118:	ldr	r2, [r0]
   1911c:	ldr	r3, [r0, #4]
   19120:	adds	r2, r2, #1
   19124:	adc	r3, r3, #0
   19128:	str	r2, [r0]
   1912c:	str	r3, [r0, #4]
   19130:	movw	r0, #5
   19134:	str	r0, [fp, #-4]
   19138:	str	r1, [fp, #-48]	; 0xffffffd0
   1913c:	b	1931c <get_boolean_op_value@@Base+0x5b0>
   19140:	ldr	r0, [sp, #40]	; 0x28
   19144:	ldr	r1, [pc, #612]	; 193b0 <get_boolean_op_value@@Base+0x644>
   19148:	add	r1, pc, r1
   1914c:	ldr	r2, [pc, #608]	; 193b4 <get_boolean_op_value@@Base+0x648>
   19150:	ldr	r2, [pc, r2]
   19154:	ldr	r3, [r0]
   19158:	ldr	ip, [r0, #4]
   1915c:	adds	r3, r3, #1
   19160:	adc	ip, ip, #0
   19164:	str	r3, [r0]
   19168:	str	ip, [r0, #4]
   1916c:	ldr	r0, [r2]
   19170:	ldr	r2, [fp, #-8]
   19174:	ldr	r2, [r2, #4]
   19178:	bl	11f44 <fprintf@plt>
   1917c:	movw	r1, #1
   19180:	str	r0, [sp, #36]	; 0x24
   19184:	mov	r0, r1
   19188:	bl	11f20 <exit@plt>
   1918c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   19190:	ldr	r1, [r0]
   19194:	ldr	r2, [r0, #4]
   19198:	adds	r1, r1, #1
   1919c:	adc	r2, r2, #0
   191a0:	str	r1, [r0]
   191a4:	str	r2, [r0, #4]
   191a8:	ldr	r0, [fp, #-8]
   191ac:	ldr	r0, [r0, #4]
   191b0:	ldrb	r0, [r0]
   191b4:	ldr	r1, [pc, #532]	; 193d0 <get_boolean_op_value@@Base+0x664>
   191b8:	add	r1, pc, r1
   191bc:	add	r2, r1, #192	; 0xc0
   191c0:	add	r3, r1, #184	; 0xb8
   191c4:	add	ip, r1, #176	; 0xb0
   191c8:	add	r1, r1, #168	; 0xa8
   191cc:	mov	lr, r0
   191d0:	cmp	r0, #33	; 0x21
   191d4:	str	r2, [sp, #32]
   191d8:	str	r3, [sp, #28]
   191dc:	str	r1, [sp, #24]
   191e0:	str	lr, [sp, #20]
   191e4:	str	ip, [sp, #16]
   191e8:	beq	19228 <get_boolean_op_value@@Base+0x4bc>
   191ec:	b	191f0 <get_boolean_op_value@@Base+0x484>
   191f0:	ldr	r0, [sp, #20]
   191f4:	cmp	r0, #60	; 0x3c
   191f8:	ldr	r1, [sp, #28]
   191fc:	str	r1, [sp, #12]
   19200:	beq	19260 <get_boolean_op_value@@Base+0x4f4>
   19204:	b	19208 <get_boolean_op_value@@Base+0x49c>
   19208:	ldr	r0, [sp, #20]
   1920c:	cmp	r0, #62	; 0x3e
   19210:	ldr	r1, [sp, #32]
   19214:	ldr	r2, [sp, #24]
   19218:	str	r1, [sp, #8]
   1921c:	str	r2, [sp, #4]
   19220:	beq	19298 <get_boolean_op_value@@Base+0x52c>
   19224:	b	192d0 <get_boolean_op_value@@Base+0x564>
   19228:	ldr	r0, [sp, #16]
   1922c:	ldr	r1, [pc, #320]	; 19374 <get_boolean_op_value@@Base+0x608>
   19230:	add	r1, pc, r1
   19234:	add	r1, r1, #200	; 0xc8
   19238:	ldr	r2, [r0]
   1923c:	ldr	r3, [r0, #4]
   19240:	adds	r2, r2, #1
   19244:	adc	r3, r3, #0
   19248:	str	r2, [r0]
   1924c:	str	r3, [r0, #4]
   19250:	movw	r0, #8
   19254:	str	r0, [fp, #-4]
   19258:	str	r1, [fp, #-48]	; 0xffffffd0
   1925c:	b	1931c <get_boolean_op_value@@Base+0x5b0>
   19260:	ldr	r0, [sp, #12]
   19264:	ldr	r1, [pc, #260]	; 19370 <get_boolean_op_value@@Base+0x604>
   19268:	add	r1, pc, r1
   1926c:	add	r1, r1, #208	; 0xd0
   19270:	ldr	r2, [r0]
   19274:	ldr	r3, [r0, #4]
   19278:	adds	r2, r2, #1
   1927c:	adc	r3, r3, #0
   19280:	str	r2, [r0]
   19284:	str	r3, [r0, #4]
   19288:	movw	r0, #6
   1928c:	str	r0, [fp, #-4]
   19290:	str	r1, [fp, #-48]	; 0xffffffd0
   19294:	b	1931c <get_boolean_op_value@@Base+0x5b0>
   19298:	ldr	r0, [sp, #8]
   1929c:	ldr	r1, [pc, #200]	; 1936c <get_boolean_op_value@@Base+0x600>
   192a0:	add	r1, pc, r1
   192a4:	add	r1, r1, #216	; 0xd8
   192a8:	ldr	r2, [r0]
   192ac:	ldr	r3, [r0, #4]
   192b0:	adds	r2, r2, #1
   192b4:	adc	r3, r3, #0
   192b8:	str	r2, [r0]
   192bc:	str	r3, [r0, #4]
   192c0:	movw	r0, #7
   192c4:	str	r0, [fp, #-4]
   192c8:	str	r1, [fp, #-48]	; 0xffffffd0
   192cc:	b	1931c <get_boolean_op_value@@Base+0x5b0>
   192d0:	ldr	r0, [sp, #4]
   192d4:	ldr	r1, [pc, #156]	; 19378 <get_boolean_op_value@@Base+0x60c>
   192d8:	add	r1, pc, r1
   192dc:	ldr	r2, [pc, #152]	; 1937c <get_boolean_op_value@@Base+0x610>
   192e0:	ldr	r2, [pc, r2]
   192e4:	ldr	r3, [r0]
   192e8:	ldr	ip, [r0, #4]
   192ec:	adds	r3, r3, #1
   192f0:	adc	ip, ip, #0
   192f4:	str	r3, [r0]
   192f8:	str	ip, [r0, #4]
   192fc:	ldr	r0, [r2]
   19300:	ldr	r2, [fp, #-8]
   19304:	ldr	r2, [r2, #4]
   19308:	bl	11f44 <fprintf@plt>
   1930c:	movw	r1, #1
   19310:	str	r0, [sp]
   19314:	mov	r0, r1
   19318:	bl	11f20 <exit@plt>
   1931c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   19320:	ldr	r1, [r0]
   19324:	ldr	r2, [r0, #4]
   19328:	adds	r1, r1, #1
   1932c:	adc	r2, r2, #0
   19330:	str	r1, [r0]
   19334:	str	r2, [r0, #4]
   19338:	ldr	r0, [pc, #148]	; 193d4 <get_boolean_op_value@@Base+0x668>
   1933c:	add	r0, pc, r0
   19340:	ldr	r1, [r0, #224]	; 0xe0
   19344:	ldr	r2, [r0, #228]	; 0xe4
   19348:	adds	r1, r1, #1
   1934c:	adc	r2, r2, #0
   19350:	str	r1, [r0, #224]	; 0xe0
   19354:	str	r2, [r0, #228]	; 0xe4
   19358:	ldr	r0, [fp, #-4]
   1935c:	mov	sp, fp
   19360:	pop	{fp, pc}
   19364:	andeq	r8, r1, ip, asr sp
   19368:	andeq	r8, r1, r8, asr #26
   1936c:	andeq	r8, r1, r8, lsr r8
   19370:	andeq	r8, r1, r0, ror r8
   19374:	andeq	r8, r1, r8, lsr #17
   19378:	andeq	r5, r0, r4, lsr #28
   1937c:	ldrdeq	r7, [r1], -r8
   19380:	andeq	r8, r1, r8, lsr #25
   19384:	andeq	r6, r0, sl, ror #5
   19388:	andeq	r8, r1, ip, lsl ip
   1938c:	andeq	r6, r0, r1, ror #4
   19390:	muleq	r1, r0, fp
   19394:	ldrdeq	r6, [r0], -r8
   19398:	andeq	r8, r1, r4, lsl #22
   1939c:	andeq	r6, r0, pc, asr #2
   193a0:	andeq	r8, r1, r8, ror sl
   193a4:	andeq	r6, r0, r6, asr #1
   193a8:	andeq	r8, r1, ip, ror #19
   193ac:	andeq	r6, r0, sp, lsr r0
   193b0:			; <UNDEFINED> instruction: 0x00005fb4
   193b4:	andeq	r7, r1, r8, ror #30
   193b8:	andeq	r8, r1, r8, asr #19
   193bc:	andeq	r8, r1, r4, asr sl
   193c0:	andeq	r8, r1, r0, ror #21
   193c4:	andeq	r8, r1, ip, ror #22
   193c8:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   193cc:	andeq	r8, r1, r4, lsl #25
   193d0:	andeq	r8, r1, r0, lsr #18
   193d4:	muleq	r1, ip, r7
   193d8:	push	{r4, sl, fp, lr}
   193dc:	add	fp, sp, #8
   193e0:	sub	sp, sp, #40	; 0x28
   193e4:	movw	r0, #0
   193e8:	str	r0, [fp, #-12]
   193ec:	b	193f0 <get_boolean_op_value@@Base+0x684>
   193f0:	ldr	r0, [fp, #-12]
   193f4:	ldr	r1, [pc, #244]	; 194f0 <get_boolean_op_value@@Base+0x784>
   193f8:	add	r1, pc, r1
   193fc:	movw	r2, #24
   19400:	mul	r2, r0, r2
   19404:	add	r1, r1, r2
   19408:	ldr	r2, [r1]
   1940c:	ldr	r3, [r1, #4]
   19410:	ldr	ip, [r1, #8]
   19414:	str	r0, [fp, #-16]
   19418:	mov	r0, r2
   1941c:	str	r1, [fp, #-20]	; 0xffffffec
   19420:	mov	r1, r3
   19424:	mov	r2, ip
   19428:	bl	1b790 <read_boolean_unary_expression@@Base+0x790>
   1942c:	ldr	r0, [fp, #-20]	; 0xffffffec
   19430:	ldr	r1, [r0, #12]
   19434:	ldr	r2, [r0, #16]
   19438:	ldr	r3, [r0, #20]
   1943c:	movw	ip, #0
   19440:	cmp	ip, r1
   19444:	str	r1, [sp, #24]
   19448:	str	r2, [sp, #20]
   1944c:	str	r3, [sp, #16]
   19450:	str	ip, [sp, #12]
   19454:	bge	194cc <get_boolean_op_value@@Base+0x760>
   19458:	ldr	r0, [sp, #12]
   1945c:	add	r1, r0, r0, lsl #2
   19460:	ldr	r2, [sp, #20]
   19464:	ldr	r1, [r2, r1, lsl #2]!
   19468:	ldr	r3, [r2, #4]
   1946c:	ldr	ip, [r2, #8]
   19470:	ldr	lr, [r2, #16]
   19474:	ldrb	r2, [r2, #12]
   19478:	mov	r4, sp
   1947c:	str	lr, [r4]
   19480:	str	r0, [sp, #8]
   19484:	mov	r0, r1
   19488:	mov	r1, r3
   1948c:	str	r2, [sp, #4]
   19490:	mov	r2, ip
   19494:	ldr	r3, [sp, #4]
   19498:	bl	1beb0 <read_boolean_unary_expression@@Base+0xeb0>
   1949c:	ldr	r0, [sp, #16]
   194a0:	ldr	r1, [sp, #8]
   194a4:	add	r2, r0, r1, lsl #3
   194a8:	ldr	r0, [r2]
   194ac:	ldr	r1, [r2, #4]
   194b0:	bl	1c764 <read_boolean_unary_expression@@Base+0x1764>
   194b4:	ldr	r0, [sp, #8]
   194b8:	add	r1, r0, #1
   194bc:	ldr	r2, [sp, #24]
   194c0:	cmp	r1, r2
   194c4:	str	r1, [sp, #12]
   194c8:	blt	19458 <get_boolean_op_value@@Base+0x6ec>
   194cc:	bl	1ceec <read_boolean_unary_expression@@Base+0x1eec>
   194d0:	bl	1dc58 <read_boolean_unary_expression@@Base+0x2c58>
   194d4:	ldr	r0, [fp, #-16]
   194d8:	add	r1, r0, #1
   194dc:	cmp	r1, #1
   194e0:	str	r1, [fp, #-12]
   194e4:	blt	193f0 <get_boolean_op_value@@Base+0x684>
   194e8:	sub	sp, fp, #8
   194ec:	pop	{r4, sl, fp, pc}
   194f0:	muleq	r1, r0, r9
   194f4:	push	{fp, lr}
   194f8:	mov	fp, sp
   194fc:	bl	193d8 <get_boolean_op_value@@Base+0x66c>
   19500:	ldr	r0, [pc, #848]	; 19858 <get_boolean_op_value@@Base+0xaec>
   19504:	add	r0, pc, r0
   19508:	mov	r1, #0
   1950c:	str	r1, [r0, #12]
   19510:	str	r1, [r0, #8]
   19514:	str	r1, [r0, #4]
   19518:	str	r1, [r0]
   1951c:	ldr	r0, [pc, #824]	; 1985c <get_boolean_op_value@@Base+0xaf0>
   19520:	add	r0, pc, r0
   19524:	str	r1, [r0, #12]
   19528:	str	r1, [r0, #8]
   1952c:	str	r1, [r0, #4]
   19530:	str	r1, [r0]
   19534:	ldr	r0, [pc, #804]	; 19860 <get_boolean_op_value@@Base+0xaf4>
   19538:	add	r0, pc, r0
   1953c:	str	r1, [r0, #12]
   19540:	str	r1, [r0, #8]
   19544:	str	r1, [r0, #4]
   19548:	str	r1, [r0]
   1954c:	ldr	r0, [pc, #784]	; 19864 <get_boolean_op_value@@Base+0xaf8>
   19550:	add	r0, pc, r0
   19554:	str	r1, [r0, #12]
   19558:	str	r1, [r0, #8]
   1955c:	str	r1, [r0, #4]
   19560:	str	r1, [r0]
   19564:	ldr	r0, [pc, #764]	; 19868 <get_boolean_op_value@@Base+0xafc>
   19568:	add	r0, pc, r0
   1956c:	str	r1, [r0, #12]
   19570:	str	r1, [r0, #8]
   19574:	str	r1, [r0, #4]
   19578:	str	r1, [r0]
   1957c:	ldr	r0, [pc, #744]	; 1986c <get_boolean_op_value@@Base+0xb00>
   19580:	add	r0, pc, r0
   19584:	str	r1, [r0, #12]
   19588:	str	r1, [r0, #8]
   1958c:	str	r1, [r0, #4]
   19590:	str	r1, [r0]
   19594:	ldr	r0, [pc, #724]	; 19870 <get_boolean_op_value@@Base+0xb04>
   19598:	add	r0, pc, r0
   1959c:	str	r1, [r0, #12]
   195a0:	str	r1, [r0, #8]
   195a4:	str	r1, [r0, #4]
   195a8:	str	r1, [r0]
   195ac:	ldr	r0, [pc, #704]	; 19874 <get_boolean_op_value@@Base+0xb08>
   195b0:	add	r0, pc, r0
   195b4:	str	r1, [r0, #12]
   195b8:	str	r1, [r0, #8]
   195bc:	str	r1, [r0, #4]
   195c0:	str	r1, [r0]
   195c4:	ldr	r0, [pc, #684]	; 19878 <get_boolean_op_value@@Base+0xb0c>
   195c8:	add	r0, pc, r0
   195cc:	str	r1, [r0, #116]	; 0x74
   195d0:	str	r1, [r0, #112]	; 0x70
   195d4:	str	r1, [r0, #108]	; 0x6c
   195d8:	str	r1, [r0, #104]	; 0x68
   195dc:	str	r1, [r0, #100]	; 0x64
   195e0:	str	r1, [r0, #96]	; 0x60
   195e4:	str	r1, [r0, #92]	; 0x5c
   195e8:	str	r1, [r0, #88]	; 0x58
   195ec:	str	r1, [r0, #84]	; 0x54
   195f0:	str	r1, [r0, #80]	; 0x50
   195f4:	str	r1, [r0, #76]	; 0x4c
   195f8:	str	r1, [r0, #72]	; 0x48
   195fc:	str	r1, [r0, #68]	; 0x44
   19600:	str	r1, [r0, #64]	; 0x40
   19604:	str	r1, [r0, #60]	; 0x3c
   19608:	str	r1, [r0, #56]	; 0x38
   1960c:	str	r1, [r0, #52]	; 0x34
   19610:	str	r1, [r0, #48]	; 0x30
   19614:	str	r1, [r0, #44]	; 0x2c
   19618:	str	r1, [r0, #40]	; 0x28
   1961c:	str	r1, [r0, #36]	; 0x24
   19620:	str	r1, [r0, #32]
   19624:	str	r1, [r0, #28]
   19628:	str	r1, [r0, #24]
   1962c:	str	r1, [r0, #20]
   19630:	str	r1, [r0, #16]
   19634:	str	r1, [r0, #12]
   19638:	str	r1, [r0, #8]
   1963c:	str	r1, [r0, #4]
   19640:	str	r1, [r0]
   19644:	ldr	r0, [pc, #560]	; 1987c <get_boolean_op_value@@Base+0xb10>
   19648:	add	r0, pc, r0
   1964c:	str	r1, [r0, #36]	; 0x24
   19650:	str	r1, [r0, #32]
   19654:	str	r1, [r0, #28]
   19658:	str	r1, [r0, #24]
   1965c:	str	r1, [r0, #20]
   19660:	str	r1, [r0, #16]
   19664:	str	r1, [r0, #12]
   19668:	str	r1, [r0, #8]
   1966c:	str	r1, [r0, #4]
   19670:	str	r1, [r0]
   19674:	ldr	r0, [pc, #516]	; 19880 <get_boolean_op_value@@Base+0xb14>
   19678:	add	r0, pc, r0
   1967c:	str	r1, [r0, #36]	; 0x24
   19680:	str	r1, [r0, #32]
   19684:	str	r1, [r0, #28]
   19688:	str	r1, [r0, #24]
   1968c:	str	r1, [r0, #20]
   19690:	str	r1, [r0, #16]
   19694:	str	r1, [r0, #12]
   19698:	str	r1, [r0, #8]
   1969c:	str	r1, [r0, #4]
   196a0:	str	r1, [r0]
   196a4:	ldr	r0, [pc, #472]	; 19884 <get_boolean_op_value@@Base+0xb18>
   196a8:	add	r0, pc, r0
   196ac:	str	r1, [r0, #36]	; 0x24
   196b0:	str	r1, [r0, #32]
   196b4:	str	r1, [r0, #28]
   196b8:	str	r1, [r0, #24]
   196bc:	str	r1, [r0, #20]
   196c0:	str	r1, [r0, #16]
   196c4:	str	r1, [r0, #12]
   196c8:	str	r1, [r0, #8]
   196cc:	str	r1, [r0, #4]
   196d0:	str	r1, [r0]
   196d4:	ldr	r0, [pc, #428]	; 19888 <get_boolean_op_value@@Base+0xb1c>
   196d8:	add	r0, pc, r0
   196dc:	str	r1, [r0, #36]	; 0x24
   196e0:	str	r1, [r0, #32]
   196e4:	str	r1, [r0, #28]
   196e8:	str	r1, [r0, #24]
   196ec:	str	r1, [r0, #20]
   196f0:	str	r1, [r0, #16]
   196f4:	str	r1, [r0, #12]
   196f8:	str	r1, [r0, #8]
   196fc:	str	r1, [r0, #4]
   19700:	str	r1, [r0]
   19704:	ldr	r0, [pc, #384]	; 1988c <get_boolean_op_value@@Base+0xb20>
   19708:	add	r0, pc, r0
   1970c:	str	r1, [r0, #36]	; 0x24
   19710:	str	r1, [r0, #32]
   19714:	str	r1, [r0, #28]
   19718:	str	r1, [r0, #24]
   1971c:	str	r1, [r0, #20]
   19720:	str	r1, [r0, #16]
   19724:	str	r1, [r0, #12]
   19728:	str	r1, [r0, #8]
   1972c:	str	r1, [r0, #4]
   19730:	str	r1, [r0]
   19734:	ldr	r0, [pc, #340]	; 19890 <get_boolean_op_value@@Base+0xb24>
   19738:	add	r0, pc, r0
   1973c:	str	r1, [r0, #36]	; 0x24
   19740:	str	r1, [r0, #32]
   19744:	str	r1, [r0, #28]
   19748:	str	r1, [r0, #24]
   1974c:	str	r1, [r0, #20]
   19750:	str	r1, [r0, #16]
   19754:	str	r1, [r0, #12]
   19758:	str	r1, [r0, #8]
   1975c:	str	r1, [r0, #4]
   19760:	str	r1, [r0]
   19764:	ldr	r0, [pc, #296]	; 19894 <get_boolean_op_value@@Base+0xb28>
   19768:	add	r0, pc, r0
   1976c:	str	r1, [r0, #228]	; 0xe4
   19770:	str	r1, [r0, #224]	; 0xe0
   19774:	str	r1, [r0, #220]	; 0xdc
   19778:	str	r1, [r0, #216]	; 0xd8
   1977c:	str	r1, [r0, #212]	; 0xd4
   19780:	str	r1, [r0, #208]	; 0xd0
   19784:	str	r1, [r0, #204]	; 0xcc
   19788:	str	r1, [r0, #200]	; 0xc8
   1978c:	str	r1, [r0, #196]	; 0xc4
   19790:	str	r1, [r0, #192]	; 0xc0
   19794:	str	r1, [r0, #188]	; 0xbc
   19798:	str	r1, [r0, #184]	; 0xb8
   1979c:	str	r1, [r0, #180]	; 0xb4
   197a0:	str	r1, [r0, #176]	; 0xb0
   197a4:	str	r1, [r0, #172]	; 0xac
   197a8:	str	r1, [r0, #168]	; 0xa8
   197ac:	str	r1, [r0, #164]	; 0xa4
   197b0:	str	r1, [r0, #160]	; 0xa0
   197b4:	str	r1, [r0, #156]	; 0x9c
   197b8:	str	r1, [r0, #152]	; 0x98
   197bc:	str	r1, [r0, #148]	; 0x94
   197c0:	str	r1, [r0, #144]	; 0x90
   197c4:	str	r1, [r0, #140]	; 0x8c
   197c8:	str	r1, [r0, #136]	; 0x88
   197cc:	str	r1, [r0, #132]	; 0x84
   197d0:	str	r1, [r0, #128]	; 0x80
   197d4:	str	r1, [r0, #124]	; 0x7c
   197d8:	str	r1, [r0, #120]	; 0x78
   197dc:	str	r1, [r0, #116]	; 0x74
   197e0:	str	r1, [r0, #112]	; 0x70
   197e4:	str	r1, [r0, #108]	; 0x6c
   197e8:	str	r1, [r0, #104]	; 0x68
   197ec:	str	r1, [r0, #100]	; 0x64
   197f0:	str	r1, [r0, #96]	; 0x60
   197f4:	str	r1, [r0, #92]	; 0x5c
   197f8:	str	r1, [r0, #88]	; 0x58
   197fc:	str	r1, [r0, #84]	; 0x54
   19800:	str	r1, [r0, #80]	; 0x50
   19804:	str	r1, [r0, #76]	; 0x4c
   19808:	str	r1, [r0, #72]	; 0x48
   1980c:	str	r1, [r0, #68]	; 0x44
   19810:	str	r1, [r0, #64]	; 0x40
   19814:	str	r1, [r0, #60]	; 0x3c
   19818:	str	r1, [r0, #56]	; 0x38
   1981c:	str	r1, [r0, #52]	; 0x34
   19820:	str	r1, [r0, #48]	; 0x30
   19824:	str	r1, [r0, #44]	; 0x2c
   19828:	str	r1, [r0, #40]	; 0x28
   1982c:	str	r1, [r0, #36]	; 0x24
   19830:	str	r1, [r0, #32]
   19834:	str	r1, [r0, #28]
   19838:	str	r1, [r0, #24]
   1983c:	str	r1, [r0, #20]
   19840:	str	r1, [r0, #16]
   19844:	str	r1, [r0, #12]
   19848:	str	r1, [r0, #8]
   1984c:	str	r1, [r0, #4]
   19850:	str	r1, [r0]
   19854:	pop	{fp, pc}
   19858:			; <UNDEFINED> instruction: 0x000183b4
   1985c:	andeq	r8, r1, r8, lsr #7
   19860:	andeq	r8, r1, r0, lsr #7
   19864:	muleq	r1, r8, r3
   19868:	muleq	r1, r0, r3
   1986c:	andeq	r8, r1, r8, lsl #7
   19870:	andeq	r8, r1, r0, lsl #7
   19874:	andeq	r8, r1, r8, ror r3
   19878:	andeq	r8, r1, r0, ror r3
   1987c:	andeq	r8, r1, r0, ror r3
   19880:	andeq	r8, r1, r0, ror r3
   19884:	andeq	r8, r1, r0, ror r3
   19888:	andeq	r8, r1, r0, ror r3
   1988c:	andeq	r8, r1, r0, ror r3
   19890:	andeq	r8, r1, r0, ror r3
   19894:	andeq	r8, r1, r0, ror r3
   19898:	push	{fp, lr}
   1989c:	mov	fp, sp
   198a0:	ldr	r0, [pc, #16]	; 198b8 <get_boolean_op_value@@Base+0xb4c>
   198a4:	add	r0, pc, r0
   198a8:	ldr	r1, [pc, #12]	; 198bc <get_boolean_op_value@@Base+0xb50>
   198ac:	add	r1, pc, r1
   198b0:	bl	1e10c <__gcov_flush@@Base+0xb8>
   198b4:	pop	{fp, pc}
   198b8:			; <UNDEFINED> instruction: 0xfffffb2c
   198bc:			; <UNDEFINED> instruction: 0xfffffc40

000198c0 <init_grammar@@Base>:
   198c0:	sub	sp, sp, #20
   198c4:	ldr	r2, [pc, #108]	; 19938 <init_grammar@@Base+0x78>
   198c8:	add	r2, pc, r2
   198cc:	str	r0, [sp, #8]
   198d0:	str	r1, [sp, #4]
   198d4:	str	r2, [sp]
   198d8:	ldr	r0, [sp]
   198dc:	ldr	r1, [r0]
   198e0:	ldr	r2, [r0, #4]
   198e4:	adds	r1, r1, #1
   198e8:	adc	r2, r2, #0
   198ec:	str	r1, [r0]
   198f0:	str	r2, [r0, #4]
   198f4:	ldr	r0, [pc, #64]	; 1993c <init_grammar@@Base+0x7c>
   198f8:	add	r0, pc, r0
   198fc:	ldr	r1, [r0, #8]
   19900:	ldr	r2, [r0, #12]
   19904:	adds	r1, r1, #1
   19908:	adc	r2, r2, #0
   1990c:	str	r1, [r0, #8]
   19910:	str	r2, [r0, #12]
   19914:	ldr	r0, [sp, #8]
   19918:	str	r0, [sp, #16]
   1991c:	ldr	r1, [sp, #4]
   19920:	str	r1, [sp, #12]
   19924:	ldr	r2, [sp, #12]
   19928:	ldr	r3, [sp, #16]
   1992c:	str	r2, [r3]
   19930:	add	sp, sp, #20
   19934:	bx	lr
   19938:	andeq	r8, r1, r0, lsl #6
   1993c:	ldrdeq	r8, [r1], -r0

00019940 <destroy_grammar@@Base>:
   19940:	sub	sp, sp, #12
   19944:	ldr	r1, [pc, #84]	; 199a0 <destroy_grammar@@Base+0x60>
   19948:	add	r1, pc, r1
   1994c:	str	r0, [sp, #4]
   19950:	str	r1, [sp]
   19954:	ldr	r0, [sp]
   19958:	ldr	r1, [r0]
   1995c:	ldr	r2, [r0, #4]
   19960:	adds	r1, r1, #1
   19964:	adc	r2, r2, #0
   19968:	str	r1, [r0]
   1996c:	str	r2, [r0, #4]
   19970:	ldr	r0, [pc, #44]	; 199a4 <destroy_grammar@@Base+0x64>
   19974:	add	r0, pc, r0
   19978:	ldr	r1, [r0, #8]
   1997c:	ldr	r2, [r0, #12]
   19980:	adds	r1, r1, #1
   19984:	adc	r2, r2, #0
   19988:	str	r1, [r0, #8]
   1998c:	str	r2, [r0, #12]
   19990:	ldr	r0, [sp, #4]
   19994:	str	r0, [sp, #8]
   19998:	add	sp, sp, #12
   1999c:	bx	lr
   199a0:	muleq	r1, r0, r2
   199a4:	andeq	r8, r1, r4, ror #4

000199a8 <build_ast@@Base>:
   199a8:	push	{fp, lr}
   199ac:	mov	fp, sp
   199b0:	sub	sp, sp, #16
   199b4:	ldr	r1, [pc, #92]	; 19a18 <build_ast@@Base+0x70>
   199b8:	add	r1, pc, r1
   199bc:	str	r0, [sp, #8]
   199c0:	str	r1, [sp, #4]
   199c4:	ldr	r0, [sp, #4]
   199c8:	ldr	r1, [r0]
   199cc:	ldr	r2, [r0, #4]
   199d0:	adds	r1, r1, #1
   199d4:	adc	r2, r2, #0
   199d8:	str	r1, [r0]
   199dc:	str	r2, [r0, #4]
   199e0:	ldr	r0, [pc, #52]	; 19a1c <build_ast@@Base+0x74>
   199e4:	add	r0, pc, r0
   199e8:	ldr	r1, [r0, #8]
   199ec:	ldr	r2, [r0, #12]
   199f0:	adds	r1, r1, #1
   199f4:	adc	r2, r2, #0
   199f8:	str	r1, [r0, #8]
   199fc:	str	r2, [r0, #12]
   19a00:	ldr	r0, [sp, #8]
   19a04:	str	r0, [fp, #-4]
   19a08:	ldr	r0, [fp, #-4]
   19a0c:	bl	19a20 <read_function_ast_node@@Base>
   19a10:	mov	sp, fp
   19a14:	pop	{fp, pc}
   19a18:	andeq	r8, r1, r0, lsr r2
   19a1c:	andeq	r8, r1, r4, lsl #4

00019a20 <read_function_ast_node@@Base>:
   19a20:	push	{fp, lr}
   19a24:	mov	fp, sp
   19a28:	sub	sp, sp, #72	; 0x48
   19a2c:	ldr	r1, [pc, #804]	; 19d58 <read_function_ast_node@@Base+0x338>
   19a30:	add	r1, pc, r1
   19a34:	str	r0, [fp, #-28]	; 0xffffffe4
   19a38:	str	r1, [fp, #-32]	; 0xffffffe0
   19a3c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   19a40:	ldr	r1, [r0]
   19a44:	ldr	r2, [r0, #4]
   19a48:	adds	r1, r1, #1
   19a4c:	adc	r2, r2, #0
   19a50:	str	r1, [r0]
   19a54:	str	r2, [r0, #4]
   19a58:	ldr	r0, [fp, #-28]	; 0xffffffe4
   19a5c:	str	r0, [fp, #-8]
   19a60:	movw	r1, #0
   19a64:	str	r1, [fp, #-12]
   19a68:	str	r1, [fp, #-16]
   19a6c:	str	r1, [fp, #-20]	; 0xffffffec
   19a70:	str	r1, [fp, #-24]	; 0xffffffe8
   19a74:	ldr	r1, [fp, #-8]
   19a78:	ldr	r0, [r1]
   19a7c:	bl	1210c <next@@Base>
   19a80:	ldr	r1, [pc, #724]	; 19d5c <read_function_ast_node@@Base+0x33c>
   19a84:	add	r1, pc, r1
   19a88:	add	r2, r1, #8
   19a8c:	add	r1, r1, #16
   19a90:	str	r0, [fp, #-20]	; 0xffffffec
   19a94:	ldr	r0, [fp, #-20]	; 0xffffffec
   19a98:	ldr	r0, [r0]
   19a9c:	cmp	r0, #0
   19aa0:	str	r2, [sp, #36]	; 0x24
   19aa4:	str	r1, [sp, #32]
   19aa8:	beq	19ae4 <read_function_ast_node@@Base+0xc4>
   19aac:	ldr	r0, [sp, #36]	; 0x24
   19ab0:	ldr	r1, [pc, #708]	; 19d7c <read_function_ast_node@@Base+0x35c>
   19ab4:	add	r1, pc, r1
   19ab8:	add	r1, r1, #24
   19abc:	ldr	r2, [r0]
   19ac0:	ldr	r3, [r0, #4]
   19ac4:	adds	r2, r2, #1
   19ac8:	adc	r3, r3, #0
   19acc:	str	r2, [r0]
   19ad0:	str	r3, [r0, #4]
   19ad4:	movw	r0, #0
   19ad8:	str	r0, [fp, #-4]
   19adc:	str	r1, [sp, #28]
   19ae0:	b	19d10 <read_function_ast_node@@Base+0x2f0>
   19ae4:	ldr	r0, [sp, #32]
   19ae8:	ldr	r1, [r0]
   19aec:	ldr	r2, [r0, #4]
   19af0:	adds	r1, r1, #1
   19af4:	adc	r2, r2, #0
   19af8:	str	r1, [r0]
   19afc:	str	r2, [r0, #4]
   19b00:	ldr	r0, [fp, #-20]	; 0xffffffec
   19b04:	bl	173fc <free_token_int_type@@Base>
   19b08:	ldr	r0, [fp, #-8]
   19b0c:	ldr	r0, [r0]
   19b10:	bl	1210c <next@@Base>
   19b14:	ldr	r1, [pc, #580]	; 19d60 <read_function_ast_node@@Base+0x340>
   19b18:	add	r1, pc, r1
   19b1c:	add	r2, r1, #32
   19b20:	add	r1, r1, #40	; 0x28
   19b24:	str	r0, [fp, #-20]	; 0xffffffec
   19b28:	ldr	r0, [fp, #-20]	; 0xffffffec
   19b2c:	ldr	r0, [r0]
   19b30:	cmp	r0, #2
   19b34:	str	r2, [sp, #24]
   19b38:	str	r1, [sp, #20]
   19b3c:	beq	19b78 <read_function_ast_node@@Base+0x158>
   19b40:	ldr	r0, [sp, #24]
   19b44:	ldr	r1, [pc, #556]	; 19d78 <read_function_ast_node@@Base+0x358>
   19b48:	add	r1, pc, r1
   19b4c:	add	r1, r1, #48	; 0x30
   19b50:	ldr	r2, [r0]
   19b54:	ldr	r3, [r0, #4]
   19b58:	adds	r2, r2, #1
   19b5c:	adc	r3, r3, #0
   19b60:	str	r2, [r0]
   19b64:	str	r3, [r0, #4]
   19b68:	movw	r0, #0
   19b6c:	str	r0, [fp, #-4]
   19b70:	str	r1, [sp, #28]
   19b74:	b	19d10 <read_function_ast_node@@Base+0x2f0>
   19b78:	ldr	r0, [sp, #20]
   19b7c:	ldr	r1, [r0]
   19b80:	ldr	r2, [r0, #4]
   19b84:	adds	r1, r1, #1
   19b88:	adc	r2, r2, #0
   19b8c:	str	r1, [r0]
   19b90:	str	r2, [r0, #4]
   19b94:	ldr	r0, [fp, #-20]	; 0xffffffec
   19b98:	str	r0, [fp, #-24]	; 0xffffffe8
   19b9c:	ldr	r0, [fp, #-8]
   19ba0:	ldr	r0, [r0]
   19ba4:	bl	1210c <next@@Base>
   19ba8:	ldr	r1, [pc, #436]	; 19d64 <read_function_ast_node@@Base+0x344>
   19bac:	add	r1, pc, r1
   19bb0:	add	r2, r1, #56	; 0x38
   19bb4:	add	r1, r1, #64	; 0x40
   19bb8:	str	r0, [fp, #-20]	; 0xffffffec
   19bbc:	ldr	r0, [fp, #-20]	; 0xffffffec
   19bc0:	ldr	r0, [r0]
   19bc4:	cmp	r0, #3
   19bc8:	str	r2, [sp, #16]
   19bcc:	str	r1, [sp, #12]
   19bd0:	beq	19c0c <read_function_ast_node@@Base+0x1ec>
   19bd4:	ldr	r0, [sp, #16]
   19bd8:	ldr	r1, [pc, #404]	; 19d74 <read_function_ast_node@@Base+0x354>
   19bdc:	add	r1, pc, r1
   19be0:	add	r1, r1, #72	; 0x48
   19be4:	ldr	r2, [r0]
   19be8:	ldr	r3, [r0, #4]
   19bec:	adds	r2, r2, #1
   19bf0:	adc	r3, r3, #0
   19bf4:	str	r2, [r0]
   19bf8:	str	r3, [r0, #4]
   19bfc:	movw	r0, #0
   19c00:	str	r0, [fp, #-4]
   19c04:	str	r1, [sp, #28]
   19c08:	b	19d10 <read_function_ast_node@@Base+0x2f0>
   19c0c:	ldr	r0, [sp, #12]
   19c10:	ldr	r1, [r0]
   19c14:	ldr	r2, [r0, #4]
   19c18:	adds	r1, r1, #1
   19c1c:	adc	r2, r2, #0
   19c20:	str	r1, [r0]
   19c24:	str	r2, [r0, #4]
   19c28:	ldr	r0, [fp, #-20]	; 0xffffffec
   19c2c:	bl	17570 <free_token_opar@@Base>
   19c30:	ldr	r0, [fp, #-8]
   19c34:	ldr	r0, [r0]
   19c38:	bl	1210c <next@@Base>
   19c3c:	ldr	r1, [pc, #292]	; 19d68 <read_function_ast_node@@Base+0x348>
   19c40:	add	r1, pc, r1
   19c44:	add	r2, r1, #80	; 0x50
   19c48:	add	r1, r1, #88	; 0x58
   19c4c:	str	r0, [fp, #-20]	; 0xffffffec
   19c50:	ldr	r0, [fp, #-20]	; 0xffffffec
   19c54:	ldr	r0, [r0]
   19c58:	cmp	r0, #4
   19c5c:	str	r2, [sp, #8]
   19c60:	str	r1, [sp, #4]
   19c64:	beq	19ca0 <read_function_ast_node@@Base+0x280>
   19c68:	ldr	r0, [sp, #8]
   19c6c:	ldr	r1, [pc, #252]	; 19d70 <read_function_ast_node@@Base+0x350>
   19c70:	add	r1, pc, r1
   19c74:	add	r1, r1, #96	; 0x60
   19c78:	ldr	r2, [r0]
   19c7c:	ldr	r3, [r0, #4]
   19c80:	adds	r2, r2, #1
   19c84:	adc	r3, r3, #0
   19c88:	str	r2, [r0]
   19c8c:	str	r3, [r0, #4]
   19c90:	movw	r0, #0
   19c94:	str	r0, [fp, #-4]
   19c98:	str	r1, [sp, #28]
   19c9c:	b	19d10 <read_function_ast_node@@Base+0x2f0>
   19ca0:	ldr	r0, [sp, #4]
   19ca4:	ldr	r1, [r0]
   19ca8:	ldr	r2, [r0, #4]
   19cac:	adds	r1, r1, #1
   19cb0:	adc	r2, r2, #0
   19cb4:	str	r1, [r0]
   19cb8:	str	r2, [r0, #4]
   19cbc:	ldr	r0, [fp, #-20]	; 0xffffffec
   19cc0:	bl	175ec <free_token_cpar@@Base>
   19cc4:	ldr	r0, [fp, #-8]
   19cc8:	bl	19d84 <read_body@@Base>
   19ccc:	str	r0, [fp, #-16]
   19cd0:	movw	r0, #16
   19cd4:	bl	11ee4 <malloc@plt>
   19cd8:	str	r0, [fp, #-12]
   19cdc:	ldr	r0, [fp, #-12]
   19ce0:	ldr	r1, [fp, #-24]	; 0xffffffe8
   19ce4:	ldr	r1, [r1, #4]
   19ce8:	ldr	r2, [fp, #-16]
   19cec:	bl	18160 <init_node_function@@Base>
   19cf0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   19cf4:	bl	174f4 <free_token_function@@Base>
   19cf8:	ldr	r0, [pc, #108]	; 19d6c <read_function_ast_node@@Base+0x34c>
   19cfc:	add	r0, pc, r0
   19d00:	add	r0, r0, #104	; 0x68
   19d04:	ldr	r1, [fp, #-12]
   19d08:	str	r1, [fp, #-4]
   19d0c:	str	r0, [sp, #28]
   19d10:	ldr	r0, [sp, #28]
   19d14:	ldr	r1, [r0]
   19d18:	ldr	r2, [r0, #4]
   19d1c:	adds	r1, r1, #1
   19d20:	adc	r2, r2, #0
   19d24:	str	r1, [r0]
   19d28:	str	r2, [r0, #4]
   19d2c:	ldr	r0, [pc, #76]	; 19d80 <read_function_ast_node@@Base+0x360>
   19d30:	add	r0, pc, r0
   19d34:	ldr	r1, [r0, #112]	; 0x70
   19d38:	ldr	r2, [r0, #116]	; 0x74
   19d3c:	adds	r1, r1, #1
   19d40:	adc	r2, r2, #0
   19d44:	str	r1, [r0, #112]	; 0x70
   19d48:	str	r2, [r0, #116]	; 0x74
   19d4c:	ldr	r0, [fp, #-4]
   19d50:	mov	sp, fp
   19d54:	pop	{fp, pc}
   19d58:	andeq	r8, r1, r8, asr #3
   19d5c:	andeq	r8, r1, r4, ror r1
   19d60:	andeq	r8, r1, r0, ror #1
   19d64:	andeq	r8, r1, ip, asr #32
   19d68:			; <UNDEFINED> instruction: 0x00017fb8
   19d6c:	strdeq	r7, [r1], -ip
   19d70:	andeq	r7, r1, r8, lsl #31
   19d74:	andeq	r8, r1, ip, lsl r0
   19d78:	strheq	r8, [r1], -r0
   19d7c:	andeq	r8, r1, r4, asr #2
   19d80:	andeq	r7, r1, r8, asr #29

00019d84 <read_body@@Base>:
   19d84:	push	{fp, lr}
   19d88:	mov	fp, sp
   19d8c:	sub	sp, sp, #96	; 0x60
   19d90:	ldr	r1, [pc, #1028]	; 1a19c <read_body@@Base+0x418>
   19d94:	add	r1, pc, r1
   19d98:	str	r0, [fp, #-28]	; 0xffffffe4
   19d9c:	str	r1, [fp, #-32]	; 0xffffffe0
   19da0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   19da4:	ldr	r1, [r0]
   19da8:	ldr	r2, [r0, #4]
   19dac:	adds	r1, r1, #1
   19db0:	adc	r2, r2, #0
   19db4:	str	r1, [r0]
   19db8:	str	r2, [r0, #4]
   19dbc:	ldr	r0, [fp, #-28]	; 0xffffffe4
   19dc0:	str	r0, [fp, #-8]
   19dc4:	movw	r1, #0
   19dc8:	str	r1, [fp, #-12]
   19dcc:	str	r1, [fp, #-16]
   19dd0:	str	r1, [fp, #-20]	; 0xffffffec
   19dd4:	str	r1, [fp, #-24]	; 0xffffffe8
   19dd8:	ldr	r1, [fp, #-8]
   19ddc:	ldr	r0, [r1]
   19de0:	bl	1210c <next@@Base>
   19de4:	ldr	r1, [pc, #948]	; 1a1a0 <read_body@@Base+0x41c>
   19de8:	add	r1, pc, r1
   19dec:	add	r2, r1, #8
   19df0:	add	r1, r1, #16
   19df4:	str	r0, [fp, #-24]	; 0xffffffe8
   19df8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   19dfc:	ldr	r0, [r0]
   19e00:	cmp	r0, #5
   19e04:	str	r2, [fp, #-36]	; 0xffffffdc
   19e08:	str	r1, [fp, #-40]	; 0xffffffd8
   19e0c:	beq	19e48 <read_body@@Base+0xc4>
   19e10:	ldr	r0, [fp, #-36]	; 0xffffffdc
   19e14:	ldr	r1, [pc, #944]	; 1a1cc <read_body@@Base+0x448>
   19e18:	add	r1, pc, r1
   19e1c:	add	r1, r1, #24
   19e20:	ldr	r2, [r0]
   19e24:	ldr	r3, [r0, #4]
   19e28:	adds	r2, r2, #1
   19e2c:	adc	r3, r3, #0
   19e30:	str	r2, [r0]
   19e34:	str	r3, [r0, #4]
   19e38:	movw	r0, #0
   19e3c:	str	r0, [fp, #-4]
   19e40:	str	r1, [fp, #-44]	; 0xffffffd4
   19e44:	b	1a154 <read_body@@Base+0x3d0>
   19e48:	ldr	r0, [fp, #-40]	; 0xffffffd8
   19e4c:	ldr	r1, [r0]
   19e50:	ldr	r2, [r0, #4]
   19e54:	adds	r1, r1, #1
   19e58:	adc	r2, r2, #0
   19e5c:	str	r1, [r0]
   19e60:	str	r2, [r0, #4]
   19e64:	ldr	r0, [fp, #-24]	; 0xffffffe8
   19e68:	bl	17668 <free_token_obra@@Base>
   19e6c:	ldr	r0, [fp, #-8]
   19e70:	ldr	r0, [r0]
   19e74:	bl	1210c <next@@Base>
   19e78:	ldr	r1, [pc, #804]	; 1a1a4 <read_body@@Base+0x420>
   19e7c:	add	r1, pc, r1
   19e80:	add	r1, r1, #32
   19e84:	str	r0, [fp, #-24]	; 0xffffffe8
   19e88:	str	r1, [sp, #48]	; 0x30
   19e8c:	ldr	r0, [sp, #48]	; 0x30
   19e90:	ldr	r1, [pc, #784]	; 1a1a8 <read_body@@Base+0x424>
   19e94:	add	r1, pc, r1
   19e98:	add	r2, r1, #40	; 0x28
   19e9c:	add	r1, r1, #48	; 0x30
   19ea0:	ldr	r3, [r0]
   19ea4:	ldr	ip, [r0, #4]
   19ea8:	adds	r3, r3, #1
   19eac:	adc	ip, ip, #0
   19eb0:	str	r3, [r0]
   19eb4:	str	ip, [r0, #4]
   19eb8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   19ebc:	ldr	r0, [r0]
   19ec0:	cmp	r0, #6
   19ec4:	str	r2, [sp, #44]	; 0x2c
   19ec8:	str	r1, [sp, #40]	; 0x28
   19ecc:	beq	1a118 <read_body@@Base+0x394>
   19ed0:	ldr	r0, [sp, #44]	; 0x2c
   19ed4:	ldr	r1, [r0]
   19ed8:	ldr	r2, [r0, #4]
   19edc:	adds	r1, r1, #1
   19ee0:	adc	r2, r2, #0
   19ee4:	str	r1, [r0]
   19ee8:	str	r2, [r0, #4]
   19eec:	ldr	r0, [fp, #-24]	; 0xffffffe8
   19ef0:	ldr	r1, [pc, #728]	; 1a1d0 <read_body@@Base+0x44c>
   19ef4:	add	r1, pc, r1
   19ef8:	add	r2, r1, #72	; 0x48
   19efc:	add	r3, r1, #64	; 0x40
   19f00:	add	r1, r1, #56	; 0x38
   19f04:	ldr	r0, [r0]
   19f08:	cmp	r0, #7
   19f0c:	str	r2, [sp, #36]	; 0x24
   19f10:	str	r1, [sp, #32]
   19f14:	str	r0, [sp, #28]
   19f18:	str	r3, [sp, #24]
   19f1c:	beq	19f44 <read_body@@Base+0x1c0>
   19f20:	b	19f24 <read_body@@Base+0x1a0>
   19f24:	ldr	r0, [sp, #28]
   19f28:	cmp	r0, #10
   19f2c:	ldr	r1, [sp, #36]	; 0x24
   19f30:	ldr	r2, [sp, #32]
   19f34:	str	r1, [sp, #20]
   19f38:	str	r2, [sp, #16]
   19f3c:	beq	19f88 <read_body@@Base+0x204>
   19f40:	b	19fcc <read_body@@Base+0x248>
   19f44:	ldr	r0, [sp, #24]
   19f48:	ldr	r1, [r0]
   19f4c:	ldr	r2, [r0, #4]
   19f50:	adds	r1, r1, #1
   19f54:	adc	r2, r2, #0
   19f58:	str	r1, [r0]
   19f5c:	str	r2, [r0, #4]
   19f60:	ldr	r0, [fp, #-24]	; 0xffffffe8
   19f64:	bl	17760 <free_token_return@@Base>
   19f68:	ldr	r0, [fp, #-8]
   19f6c:	bl	1a1d8 <read_return_expression@@Base>
   19f70:	ldr	r1, [pc, #572]	; 1a1b4 <read_body@@Base+0x430>
   19f74:	add	r1, pc, r1
   19f78:	add	r1, r1, #80	; 0x50
   19f7c:	str	r0, [fp, #-16]
   19f80:	str	r1, [sp, #12]
   19f84:	b	1a014 <read_body@@Base+0x290>
   19f88:	ldr	r0, [sp, #20]
   19f8c:	ldr	r1, [r0]
   19f90:	ldr	r2, [r0, #4]
   19f94:	adds	r1, r1, #1
   19f98:	adc	r2, r2, #0
   19f9c:	str	r1, [r0]
   19fa0:	str	r2, [r0, #4]
   19fa4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   19fa8:	bl	178d4 <free_token_if@@Base>
   19fac:	ldr	r0, [fp, #-8]
   19fb0:	bl	1a40c <read_if_statement@@Base>
   19fb4:	ldr	r1, [pc, #500]	; 1a1b0 <read_body@@Base+0x42c>
   19fb8:	add	r1, pc, r1
   19fbc:	add	r1, r1, #88	; 0x58
   19fc0:	str	r0, [fp, #-16]
   19fc4:	str	r1, [sp, #12]
   19fc8:	b	1a014 <read_body@@Base+0x290>
   19fcc:	ldr	r0, [sp, #16]
   19fd0:	ldr	r1, [r0]
   19fd4:	ldr	r2, [r0, #4]
   19fd8:	adds	r1, r1, #1
   19fdc:	adc	r2, r2, #0
   19fe0:	str	r1, [r0]
   19fe4:	str	r2, [r0, #4]
   19fe8:	ldr	r0, [fp, #-8]
   19fec:	ldr	r0, [r0]
   19ff0:	ldr	r1, [fp, #-24]	; 0xffffffe8
   19ff4:	bl	12670 <push_back@@Base>
   19ff8:	ldr	r0, [pc, #456]	; 1a1c8 <read_body@@Base+0x444>
   19ffc:	add	r0, pc, r0
   1a000:	add	r0, r0, #96	; 0x60
   1a004:	ldr	r1, [fp, #-12]
   1a008:	str	r1, [fp, #-4]
   1a00c:	str	r0, [fp, #-44]	; 0xffffffd4
   1a010:	b	1a154 <read_body@@Base+0x3d0>
   1a014:	ldr	r0, [sp, #12]
   1a018:	ldr	r1, [pc, #408]	; 1a1b8 <read_body@@Base+0x434>
   1a01c:	add	r1, pc, r1
   1a020:	add	r2, r1, #104	; 0x68
   1a024:	add	r1, r1, #112	; 0x70
   1a028:	ldr	r3, [r0]
   1a02c:	ldr	ip, [r0, #4]
   1a030:	adds	r3, r3, #1
   1a034:	adc	ip, ip, #0
   1a038:	str	r3, [r0]
   1a03c:	str	ip, [r0, #4]
   1a040:	ldr	r0, [fp, #-12]
   1a044:	movw	r3, #0
   1a048:	cmp	r0, r3
   1a04c:	str	r2, [sp, #8]
   1a050:	str	r1, [sp, #4]
   1a054:	beq	1a09c <read_body@@Base+0x318>
   1a058:	ldr	r0, [sp, #8]
   1a05c:	ldr	r1, [pc, #348]	; 1a1c0 <read_body@@Base+0x43c>
   1a060:	add	r1, pc, r1
   1a064:	add	r1, r1, #120	; 0x78
   1a068:	ldr	r2, [r0]
   1a06c:	ldr	r3, [r0, #4]
   1a070:	adds	r2, r2, #1
   1a074:	adc	r3, r3, #0
   1a078:	str	r2, [r0]
   1a07c:	str	r3, [r0, #4]
   1a080:	ldr	r0, [fp, #-16]
   1a084:	ldr	r2, [fp, #-20]	; 0xffffffec
   1a088:	str	r0, [r2, #4]
   1a08c:	ldr	r0, [fp, #-16]
   1a090:	str	r0, [fp, #-20]	; 0xffffffec
   1a094:	str	r1, [sp]
   1a098:	b	1a0d8 <read_body@@Base+0x354>
   1a09c:	ldr	r0, [sp, #4]
   1a0a0:	ldr	r1, [pc, #276]	; 1a1bc <read_body@@Base+0x438>
   1a0a4:	add	r1, pc, r1
   1a0a8:	add	r1, r1, #128	; 0x80
   1a0ac:	ldr	r2, [r0]
   1a0b0:	ldr	r3, [r0, #4]
   1a0b4:	adds	r2, r2, #1
   1a0b8:	adc	r3, r3, #0
   1a0bc:	str	r2, [r0]
   1a0c0:	str	r3, [r0, #4]
   1a0c4:	ldr	r0, [fp, #-16]
   1a0c8:	str	r0, [fp, #-12]
   1a0cc:	ldr	r0, [fp, #-16]
   1a0d0:	str	r0, [fp, #-20]	; 0xffffffec
   1a0d4:	str	r1, [sp]
   1a0d8:	ldr	r0, [sp]
   1a0dc:	ldr	r1, [r0]
   1a0e0:	ldr	r2, [r0, #4]
   1a0e4:	adds	r1, r1, #1
   1a0e8:	adc	r2, r2, #0
   1a0ec:	str	r1, [r0]
   1a0f0:	str	r2, [r0, #4]
   1a0f4:	ldr	r0, [fp, #-8]
   1a0f8:	ldr	r0, [r0]
   1a0fc:	bl	1210c <next@@Base>
   1a100:	ldr	r1, [pc, #188]	; 1a1c4 <read_body@@Base+0x440>
   1a104:	add	r1, pc, r1
   1a108:	add	r1, r1, #136	; 0x88
   1a10c:	str	r0, [fp, #-24]	; 0xffffffe8
   1a110:	str	r1, [sp, #48]	; 0x30
   1a114:	b	19e8c <read_body@@Base+0x108>
   1a118:	ldr	r0, [sp, #40]	; 0x28
   1a11c:	ldr	r1, [r0]
   1a120:	ldr	r2, [r0, #4]
   1a124:	adds	r1, r1, #1
   1a128:	adc	r2, r2, #0
   1a12c:	str	r1, [r0]
   1a130:	str	r2, [r0, #4]
   1a134:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1a138:	bl	176e4 <free_token_cbra@@Base>
   1a13c:	ldr	r0, [pc, #104]	; 1a1ac <read_body@@Base+0x428>
   1a140:	add	r0, pc, r0
   1a144:	add	r0, r0, #144	; 0x90
   1a148:	ldr	r1, [fp, #-12]
   1a14c:	str	r1, [fp, #-4]
   1a150:	str	r0, [fp, #-44]	; 0xffffffd4
   1a154:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1a158:	ldr	r1, [r0]
   1a15c:	ldr	r2, [r0, #4]
   1a160:	adds	r1, r1, #1
   1a164:	adc	r2, r2, #0
   1a168:	str	r1, [r0]
   1a16c:	str	r2, [r0, #4]
   1a170:	ldr	r0, [pc, #92]	; 1a1d4 <read_body@@Base+0x450>
   1a174:	add	r0, pc, r0
   1a178:	ldr	r1, [r0, #152]	; 0x98
   1a17c:	ldr	r2, [r0, #156]	; 0x9c
   1a180:	adds	r1, r1, #1
   1a184:	adc	r2, r2, #0
   1a188:	str	r1, [r0, #152]	; 0x98
   1a18c:	str	r2, [r0, #156]	; 0x9c
   1a190:	ldr	r0, [fp, #-4]
   1a194:	mov	sp, fp
   1a198:	pop	{fp, pc}
   1a19c:	andeq	r7, r1, r4, ror #29
   1a1a0:	muleq	r1, r0, lr
   1a1a4:	strdeq	r7, [r1], -ip
   1a1a8:	andeq	r7, r1, r4, ror #27
   1a1ac:	andeq	r7, r1, r8, lsr fp
   1a1b0:	andeq	r7, r1, r0, asr #25
   1a1b4:	andeq	r7, r1, r4, lsl #26
   1a1b8:	andeq	r7, r1, ip, asr ip
   1a1bc:	ldrdeq	r7, [r1], -r4
   1a1c0:	andeq	r7, r1, r8, lsl ip
   1a1c4:	andeq	r7, r1, r4, ror fp
   1a1c8:	andeq	r7, r1, ip, ror ip
   1a1cc:	andeq	r7, r1, r0, ror #28
   1a1d0:	andeq	r7, r1, r4, lsl #27
   1a1d4:	andeq	r7, r1, r4, lsl #22

0001a1d8 <read_return_expression@@Base>:
   1a1d8:	push	{fp, lr}
   1a1dc:	mov	fp, sp
   1a1e0:	sub	sp, sp, #56	; 0x38
   1a1e4:	ldr	r1, [pc, #516]	; 1a3f0 <read_return_expression@@Base+0x218>
   1a1e8:	add	r1, pc, r1
   1a1ec:	str	r0, [sp, #28]
   1a1f0:	str	r1, [sp, #24]
   1a1f4:	ldr	r0, [sp, #24]
   1a1f8:	ldr	r1, [r0]
   1a1fc:	ldr	r2, [r0, #4]
   1a200:	adds	r1, r1, #1
   1a204:	adc	r2, r2, #0
   1a208:	str	r1, [r0]
   1a20c:	str	r2, [r0, #4]
   1a210:	ldr	r0, [sp, #28]
   1a214:	str	r0, [fp, #-8]
   1a218:	movw	r1, #0
   1a21c:	str	r1, [fp, #-12]
   1a220:	str	r1, [fp, #-16]
   1a224:	str	r1, [fp, #-20]	; 0xffffffec
   1a228:	str	r1, [fp, #-24]	; 0xffffffe8
   1a22c:	ldr	r1, [fp, #-8]
   1a230:	ldr	r0, [r1]
   1a234:	bl	1210c <next@@Base>
   1a238:	ldr	r1, [pc, #436]	; 1a3f4 <read_return_expression@@Base+0x21c>
   1a23c:	add	r1, pc, r1
   1a240:	add	r2, r1, #8
   1a244:	add	r1, r1, #16
   1a248:	str	r0, [fp, #-20]	; 0xffffffec
   1a24c:	ldr	r0, [fp, #-20]	; 0xffffffec
   1a250:	ldr	r0, [r0]
   1a254:	cmp	r0, #1
   1a258:	str	r2, [sp, #20]
   1a25c:	str	r1, [sp, #16]
   1a260:	beq	1a29c <read_return_expression@@Base+0xc4>
   1a264:	ldr	r0, [sp, #20]
   1a268:	ldr	r1, [pc, #404]	; 1a404 <read_return_expression@@Base+0x22c>
   1a26c:	add	r1, pc, r1
   1a270:	add	r1, r1, #24
   1a274:	ldr	r2, [r0]
   1a278:	ldr	r3, [r0, #4]
   1a27c:	adds	r2, r2, #1
   1a280:	adc	r3, r3, #0
   1a284:	str	r2, [r0]
   1a288:	str	r3, [r0, #4]
   1a28c:	movw	r0, #0
   1a290:	str	r0, [fp, #-4]
   1a294:	str	r1, [sp, #12]
   1a298:	b	1a3a8 <read_return_expression@@Base+0x1d0>
   1a29c:	ldr	r0, [sp, #16]
   1a2a0:	ldr	r1, [r0]
   1a2a4:	ldr	r2, [r0, #4]
   1a2a8:	adds	r1, r1, #1
   1a2ac:	adc	r2, r2, #0
   1a2b0:	str	r1, [r0]
   1a2b4:	str	r2, [r0, #4]
   1a2b8:	ldr	r0, [fp, #-20]	; 0xffffffec
   1a2bc:	str	r0, [fp, #-24]	; 0xffffffe8
   1a2c0:	movw	r0, #12
   1a2c4:	bl	11ee4 <malloc@plt>
   1a2c8:	str	r0, [fp, #-16]
   1a2cc:	ldr	r0, [fp, #-16]
   1a2d0:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1a2d4:	ldr	r1, [r1, #4]
   1a2d8:	bl	180cc <init_node_int@@Base>
   1a2dc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1a2e0:	bl	17478 <free_token_int_value@@Base>
   1a2e4:	movw	r0, #12
   1a2e8:	bl	11ee4 <malloc@plt>
   1a2ec:	str	r0, [fp, #-12]
   1a2f0:	ldr	r0, [fp, #-12]
   1a2f4:	ldr	r1, [fp, #-16]
   1a2f8:	bl	1820c <init_node_return@@Base>
   1a2fc:	ldr	r0, [fp, #-8]
   1a300:	ldr	r0, [r0]
   1a304:	bl	1210c <next@@Base>
   1a308:	ldr	r1, [pc, #232]	; 1a3f8 <read_return_expression@@Base+0x220>
   1a30c:	add	r1, pc, r1
   1a310:	add	r2, r1, #32
   1a314:	add	r1, r1, #40	; 0x28
   1a318:	str	r0, [fp, #-20]	; 0xffffffec
   1a31c:	ldr	r0, [fp, #-20]	; 0xffffffec
   1a320:	ldr	r0, [r0]
   1a324:	cmp	r0, #8
   1a328:	str	r2, [sp, #8]
   1a32c:	str	r1, [sp, #4]
   1a330:	beq	1a36c <read_return_expression@@Base+0x194>
   1a334:	ldr	r0, [sp, #8]
   1a338:	ldr	r1, [pc, #192]	; 1a400 <read_return_expression@@Base+0x228>
   1a33c:	add	r1, pc, r1
   1a340:	add	r1, r1, #48	; 0x30
   1a344:	ldr	r2, [r0]
   1a348:	ldr	r3, [r0, #4]
   1a34c:	adds	r2, r2, #1
   1a350:	adc	r3, r3, #0
   1a354:	str	r2, [r0]
   1a358:	str	r3, [r0, #4]
   1a35c:	movw	r0, #0
   1a360:	str	r0, [fp, #-4]
   1a364:	str	r1, [sp, #12]
   1a368:	b	1a3a8 <read_return_expression@@Base+0x1d0>
   1a36c:	ldr	r0, [sp, #4]
   1a370:	ldr	r1, [r0]
   1a374:	ldr	r2, [r0, #4]
   1a378:	adds	r1, r1, #1
   1a37c:	adc	r2, r2, #0
   1a380:	str	r1, [r0]
   1a384:	str	r2, [r0, #4]
   1a388:	ldr	r0, [fp, #-20]	; 0xffffffec
   1a38c:	bl	177dc <free_token_semicolon@@Base>
   1a390:	ldr	r0, [pc, #100]	; 1a3fc <read_return_expression@@Base+0x224>
   1a394:	add	r0, pc, r0
   1a398:	add	r0, r0, #56	; 0x38
   1a39c:	ldr	r1, [fp, #-12]
   1a3a0:	str	r1, [fp, #-4]
   1a3a4:	str	r0, [sp, #12]
   1a3a8:	ldr	r0, [sp, #12]
   1a3ac:	ldr	r1, [r0]
   1a3b0:	ldr	r2, [r0, #4]
   1a3b4:	adds	r1, r1, #1
   1a3b8:	adc	r2, r2, #0
   1a3bc:	str	r1, [r0]
   1a3c0:	str	r2, [r0, #4]
   1a3c4:	ldr	r0, [pc, #60]	; 1a408 <read_return_expression@@Base+0x230>
   1a3c8:	add	r0, pc, r0
   1a3cc:	ldr	r1, [r0, #64]	; 0x40
   1a3d0:	ldr	r2, [r0, #68]	; 0x44
   1a3d4:	adds	r1, r1, #1
   1a3d8:	adc	r2, r2, #0
   1a3dc:	str	r1, [r0, #64]	; 0x40
   1a3e0:	str	r2, [r0, #68]	; 0x44
   1a3e4:	ldr	r0, [fp, #-4]
   1a3e8:	mov	sp, fp
   1a3ec:	pop	{fp, pc}
   1a3f0:	andeq	r7, r1, r0, lsr fp
   1a3f4:	ldrdeq	r7, [r1], -ip
   1a3f8:	andeq	r7, r1, ip, lsl #20
   1a3fc:	andeq	r7, r1, r4, lsl #19
   1a400:	ldrdeq	r7, [r1], -ip
   1a404:	andeq	r7, r1, ip, lsr #21
   1a408:	andeq	r7, r1, r0, asr r9

0001a40c <read_if_statement@@Base>:
   1a40c:	push	{fp, lr}
   1a410:	mov	fp, sp
   1a414:	sub	sp, sp, #64	; 0x40
   1a418:	ldr	r1, [pc, #580]	; 1a664 <read_if_statement@@Base+0x258>
   1a41c:	add	r1, pc, r1
   1a420:	str	r0, [sp, #32]
   1a424:	str	r1, [sp, #28]
   1a428:	ldr	r0, [sp, #28]
   1a42c:	ldr	r1, [r0]
   1a430:	ldr	r2, [r0, #4]
   1a434:	adds	r1, r1, #1
   1a438:	adc	r2, r2, #0
   1a43c:	str	r1, [r0]
   1a440:	str	r2, [r0, #4]
   1a444:	ldr	r0, [sp, #32]
   1a448:	str	r0, [fp, #-8]
   1a44c:	movw	r1, #0
   1a450:	str	r1, [fp, #-12]
   1a454:	str	r1, [fp, #-16]
   1a458:	str	r1, [fp, #-20]	; 0xffffffec
   1a45c:	str	r1, [fp, #-24]	; 0xffffffe8
   1a460:	str	r1, [fp, #-28]	; 0xffffffe4
   1a464:	ldr	r1, [fp, #-8]
   1a468:	ldr	r0, [r1]
   1a46c:	bl	1210c <next@@Base>
   1a470:	ldr	r1, [pc, #496]	; 1a668 <read_if_statement@@Base+0x25c>
   1a474:	add	r1, pc, r1
   1a478:	add	r2, r1, #8
   1a47c:	add	r1, r1, #16
   1a480:	str	r0, [fp, #-28]	; 0xffffffe4
   1a484:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1a488:	ldr	r0, [r0]
   1a48c:	cmp	r0, #3
   1a490:	str	r2, [sp, #24]
   1a494:	str	r1, [sp, #20]
   1a498:	beq	1a4d4 <read_if_statement@@Base+0xc8>
   1a49c:	ldr	r0, [sp, #24]
   1a4a0:	ldr	r1, [pc, #468]	; 1a67c <read_if_statement@@Base+0x270>
   1a4a4:	add	r1, pc, r1
   1a4a8:	add	r1, r1, #24
   1a4ac:	ldr	r2, [r0]
   1a4b0:	ldr	r3, [r0, #4]
   1a4b4:	adds	r2, r2, #1
   1a4b8:	adc	r3, r3, #0
   1a4bc:	str	r2, [r0]
   1a4c0:	str	r3, [r0, #4]
   1a4c4:	movw	r0, #0
   1a4c8:	str	r0, [fp, #-4]
   1a4cc:	str	r1, [sp, #16]
   1a4d0:	b	1a61c <read_if_statement@@Base+0x210>
   1a4d4:	ldr	r0, [sp, #20]
   1a4d8:	ldr	r1, [r0]
   1a4dc:	ldr	r2, [r0, #4]
   1a4e0:	adds	r1, r1, #1
   1a4e4:	adc	r2, r2, #0
   1a4e8:	str	r1, [r0]
   1a4ec:	str	r2, [r0, #4]
   1a4f0:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1a4f4:	bl	17570 <free_token_opar@@Base>
   1a4f8:	ldr	r0, [fp, #-8]
   1a4fc:	bl	1a684 <read_boolean_expression@@Base>
   1a500:	str	r0, [fp, #-16]
   1a504:	ldr	r0, [fp, #-8]
   1a508:	bl	19d84 <read_body@@Base>
   1a50c:	str	r0, [fp, #-20]	; 0xffffffec
   1a510:	ldr	r0, [fp, #-8]
   1a514:	ldr	r0, [r0]
   1a518:	bl	1210c <next@@Base>
   1a51c:	ldr	r1, [pc, #328]	; 1a66c <read_if_statement@@Base+0x260>
   1a520:	add	r1, pc, r1
   1a524:	add	r2, r1, #32
   1a528:	add	r1, r1, #40	; 0x28
   1a52c:	str	r0, [fp, #-28]	; 0xffffffe4
   1a530:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1a534:	ldr	r0, [r0]
   1a538:	cmp	r0, #11
   1a53c:	str	r2, [sp, #12]
   1a540:	str	r1, [sp, #8]
   1a544:	bne	1a58c <read_if_statement@@Base+0x180>
   1a548:	ldr	r0, [sp, #12]
   1a54c:	ldr	r1, [r0]
   1a550:	ldr	r2, [r0, #4]
   1a554:	adds	r1, r1, #1
   1a558:	adc	r2, r2, #0
   1a55c:	str	r1, [r0]
   1a560:	str	r2, [r0, #4]
   1a564:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1a568:	bl	17950 <free_token_else@@Base>
   1a56c:	ldr	r0, [fp, #-8]
   1a570:	bl	19d84 <read_body@@Base>
   1a574:	ldr	r1, [pc, #248]	; 1a674 <read_if_statement@@Base+0x268>
   1a578:	add	r1, pc, r1
   1a57c:	add	r1, r1, #48	; 0x30
   1a580:	str	r0, [fp, #-24]	; 0xffffffe8
   1a584:	str	r1, [sp, #4]
   1a588:	b	1a5c8 <read_if_statement@@Base+0x1bc>
   1a58c:	ldr	r0, [sp, #8]
   1a590:	ldr	r1, [r0]
   1a594:	ldr	r2, [r0, #4]
   1a598:	adds	r1, r1, #1
   1a59c:	adc	r2, r2, #0
   1a5a0:	str	r1, [r0]
   1a5a4:	str	r2, [r0, #4]
   1a5a8:	ldr	r0, [fp, #-8]
   1a5ac:	ldr	r0, [r0]
   1a5b0:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1a5b4:	bl	12670 <push_back@@Base>
   1a5b8:	ldr	r0, [pc, #176]	; 1a670 <read_if_statement@@Base+0x264>
   1a5bc:	add	r0, pc, r0
   1a5c0:	add	r0, r0, #56	; 0x38
   1a5c4:	str	r0, [sp, #4]
   1a5c8:	ldr	r0, [sp, #4]
   1a5cc:	ldr	r1, [r0]
   1a5d0:	ldr	r2, [r0, #4]
   1a5d4:	adds	r1, r1, #1
   1a5d8:	adc	r2, r2, #0
   1a5dc:	str	r1, [r0]
   1a5e0:	str	r2, [r0, #4]
   1a5e4:	movw	r0, #20
   1a5e8:	bl	11ee4 <malloc@plt>
   1a5ec:	str	r0, [fp, #-12]
   1a5f0:	ldr	r0, [fp, #-12]
   1a5f4:	ldr	r1, [fp, #-16]
   1a5f8:	ldr	r2, [fp, #-20]	; 0xffffffec
   1a5fc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a600:	bl	182a0 <init_node_if@@Base>
   1a604:	ldr	r0, [pc, #108]	; 1a678 <read_if_statement@@Base+0x26c>
   1a608:	add	r0, pc, r0
   1a60c:	add	r0, r0, #64	; 0x40
   1a610:	ldr	r1, [fp, #-12]
   1a614:	str	r1, [fp, #-4]
   1a618:	str	r0, [sp, #16]
   1a61c:	ldr	r0, [sp, #16]
   1a620:	ldr	r1, [r0]
   1a624:	ldr	r2, [r0, #4]
   1a628:	adds	r1, r1, #1
   1a62c:	adc	r2, r2, #0
   1a630:	str	r1, [r0]
   1a634:	str	r2, [r0, #4]
   1a638:	ldr	r0, [pc, #64]	; 1a680 <read_if_statement@@Base+0x274>
   1a63c:	add	r0, pc, r0
   1a640:	ldr	r1, [r0, #72]	; 0x48
   1a644:	ldr	r2, [r0, #76]	; 0x4c
   1a648:	adds	r1, r1, #1
   1a64c:	adc	r2, r2, #0
   1a650:	str	r1, [r0, #72]	; 0x48
   1a654:	str	r2, [r0, #76]	; 0x4c
   1a658:	ldr	r0, [fp, #-4]
   1a65c:	mov	sp, fp
   1a660:	pop	{fp, pc}
   1a664:	andeq	r7, r1, ip, asr #18
   1a668:	strdeq	r7, [r1], -r4
   1a66c:	andeq	r7, r1, r8, asr #16
   1a670:	andeq	r7, r1, ip, lsr #15
   1a674:	strdeq	r7, [r1], -r0
   1a678:	andeq	r7, r1, r0, ror #14
   1a67c:	andeq	r7, r1, r4, asr #17
   1a680:	andeq	r7, r1, ip, lsr #14

0001a684 <read_boolean_expression@@Base>:
   1a684:	push	{fp, lr}
   1a688:	mov	fp, sp
   1a68c:	sub	sp, sp, #80	; 0x50
   1a690:	ldr	r1, [pc, #748]	; 1a984 <read_boolean_expression@@Base+0x300>
   1a694:	add	r1, pc, r1
   1a698:	str	r0, [fp, #-24]	; 0xffffffe8
   1a69c:	str	r1, [fp, #-28]	; 0xffffffe4
   1a6a0:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1a6a4:	ldr	r1, [r0]
   1a6a8:	ldr	r2, [r0, #4]
   1a6ac:	adds	r1, r1, #1
   1a6b0:	adc	r2, r2, #0
   1a6b4:	str	r1, [r0]
   1a6b8:	str	r2, [r0, #4]
   1a6bc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1a6c0:	str	r0, [fp, #-4]
   1a6c4:	movw	r1, #0
   1a6c8:	str	r1, [fp, #-8]
   1a6cc:	str	r1, [fp, #-12]
   1a6d0:	str	r1, [fp, #-20]	; 0xffffffec
   1a6d4:	ldr	r1, [fp, #-4]
   1a6d8:	ldr	r0, [r1]
   1a6dc:	bl	1210c <next@@Base>
   1a6e0:	ldr	r1, [pc, #672]	; 1a988 <read_boolean_expression@@Base+0x304>
   1a6e4:	add	r1, pc, r1
   1a6e8:	add	r1, r1, #8
   1a6ec:	str	r0, [fp, #-12]
   1a6f0:	str	r1, [fp, #-32]	; 0xffffffe0
   1a6f4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1a6f8:	ldr	r1, [pc, #652]	; 1a98c <read_boolean_expression@@Base+0x308>
   1a6fc:	add	r1, pc, r1
   1a700:	add	r2, r1, #16
   1a704:	add	r1, r1, #24
   1a708:	ldr	r3, [r0]
   1a70c:	ldr	ip, [r0, #4]
   1a710:	adds	r3, r3, #1
   1a714:	adc	ip, ip, #0
   1a718:	str	r3, [r0]
   1a71c:	str	ip, [r0, #4]
   1a720:	ldr	r0, [fp, #-12]
   1a724:	ldr	r0, [r0]
   1a728:	cmp	r0, #4
   1a72c:	str	r2, [fp, #-36]	; 0xffffffdc
   1a730:	str	r1, [sp, #40]	; 0x28
   1a734:	beq	1a934 <read_boolean_expression@@Base+0x2b0>
   1a738:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1a73c:	ldr	r1, [r0]
   1a740:	ldr	r2, [r0, #4]
   1a744:	adds	r1, r1, #1
   1a748:	adc	r2, r2, #0
   1a74c:	str	r1, [r0]
   1a750:	str	r2, [r0, #4]
   1a754:	ldr	r0, [fp, #-12]
   1a758:	ldr	r1, [pc, #584]	; 1a9a8 <read_boolean_expression@@Base+0x324>
   1a75c:	add	r1, pc, r1
   1a760:	add	r2, r1, #56	; 0x38
   1a764:	add	r3, r1, #48	; 0x30
   1a768:	add	ip, r1, #40	; 0x28
   1a76c:	add	r1, r1, #32
   1a770:	ldr	r0, [r0]
   1a774:	cmp	r0, #1
   1a778:	str	r2, [sp, #36]	; 0x24
   1a77c:	str	r3, [sp, #32]
   1a780:	str	r1, [sp, #28]
   1a784:	str	r0, [sp, #24]
   1a788:	str	ip, [sp, #20]
   1a78c:	beq	1a7cc <read_boolean_expression@@Base+0x148>
   1a790:	b	1a794 <read_boolean_expression@@Base+0x110>
   1a794:	ldr	r0, [sp, #24]
   1a798:	cmp	r0, #3
   1a79c:	ldr	r1, [sp, #36]	; 0x24
   1a7a0:	str	r1, [sp, #16]
   1a7a4:	beq	1a868 <read_boolean_expression@@Base+0x1e4>
   1a7a8:	b	1a7ac <read_boolean_expression@@Base+0x128>
   1a7ac:	ldr	r0, [sp, #24]
   1a7b0:	cmp	r0, #12
   1a7b4:	ldr	r1, [sp, #32]
   1a7b8:	ldr	r2, [sp, #28]
   1a7bc:	str	r1, [sp, #12]
   1a7c0:	str	r2, [sp, #8]
   1a7c4:	beq	1a824 <read_boolean_expression@@Base+0x1a0>
   1a7c8:	b	1a8b0 <read_boolean_expression@@Base+0x22c>
   1a7cc:	ldr	r0, [sp, #20]
   1a7d0:	ldr	r1, [r0]
   1a7d4:	ldr	r2, [r0, #4]
   1a7d8:	adds	r1, r1, #1
   1a7dc:	adc	r2, r2, #0
   1a7e0:	str	r1, [r0]
   1a7e4:	str	r2, [r0, #4]
   1a7e8:	ldr	r0, [fp, #-4]
   1a7ec:	ldr	r0, [r0]
   1a7f0:	ldr	r1, [fp, #-12]
   1a7f4:	bl	12670 <push_back@@Base>
   1a7f8:	ldr	r0, [fp, #-4]
   1a7fc:	ldr	r1, [fp, #-8]
   1a800:	ldr	r3, [fp, #-16]
   1a804:	sub	r2, fp, #20
   1a808:	bl	1a9b0 <read_single_boolean_expression@@Base>
   1a80c:	ldr	r1, [pc, #388]	; 1a998 <read_boolean_expression@@Base+0x314>
   1a810:	add	r1, pc, r1
   1a814:	add	r1, r1, #64	; 0x40
   1a818:	str	r0, [fp, #-8]
   1a81c:	str	r1, [sp, #4]
   1a820:	b	1a8f4 <read_boolean_expression@@Base+0x270>
   1a824:	ldr	r0, [sp, #12]
   1a828:	ldr	r1, [r0]
   1a82c:	ldr	r2, [r0, #4]
   1a830:	adds	r1, r1, #1
   1a834:	adc	r2, r2, #0
   1a838:	str	r1, [r0]
   1a83c:	str	r2, [r0, #4]
   1a840:	ldr	r0, [fp, #-12]
   1a844:	bl	18d6c <get_boolean_op_value@@Base>
   1a848:	ldr	r1, [pc, #324]	; 1a994 <read_boolean_expression@@Base+0x310>
   1a84c:	add	r1, pc, r1
   1a850:	add	r1, r1, #72	; 0x48
   1a854:	str	r0, [fp, #-16]
   1a858:	movw	r0, #1
   1a85c:	str	r0, [fp, #-20]	; 0xffffffec
   1a860:	str	r1, [sp, #4]
   1a864:	b	1a8f4 <read_boolean_expression@@Base+0x270>
   1a868:	ldr	r0, [sp, #16]
   1a86c:	ldr	r1, [r0]
   1a870:	ldr	r2, [r0, #4]
   1a874:	adds	r1, r1, #1
   1a878:	adc	r2, r2, #0
   1a87c:	str	r1, [r0]
   1a880:	str	r2, [r0, #4]
   1a884:	ldr	r0, [fp, #-4]
   1a888:	ldr	r1, [fp, #-8]
   1a88c:	ldr	r3, [fp, #-16]
   1a890:	sub	r2, fp, #20
   1a894:	bl	1a9b0 <read_single_boolean_expression@@Base>
   1a898:	ldr	r1, [pc, #240]	; 1a990 <read_boolean_expression@@Base+0x30c>
   1a89c:	add	r1, pc, r1
   1a8a0:	add	r1, r1, #80	; 0x50
   1a8a4:	str	r0, [fp, #-8]
   1a8a8:	str	r1, [sp, #4]
   1a8ac:	b	1a8f4 <read_boolean_expression@@Base+0x270>
   1a8b0:	ldr	r0, [sp, #8]
   1a8b4:	ldr	r1, [pc, #228]	; 1a9a0 <read_boolean_expression@@Base+0x31c>
   1a8b8:	add	r1, pc, r1
   1a8bc:	ldr	r2, [pc, #224]	; 1a9a4 <read_boolean_expression@@Base+0x320>
   1a8c0:	ldr	r2, [pc, r2]
   1a8c4:	ldr	r3, [r0]
   1a8c8:	ldr	ip, [r0, #4]
   1a8cc:	adds	r3, r3, #1
   1a8d0:	adc	ip, ip, #0
   1a8d4:	str	r3, [r0]
   1a8d8:	str	ip, [r0, #4]
   1a8dc:	ldr	r0, [r2]
   1a8e0:	bl	11f44 <fprintf@plt>
   1a8e4:	movw	r1, #1
   1a8e8:	str	r0, [sp]
   1a8ec:	mov	r0, r1
   1a8f0:	bl	11f20 <exit@plt>
   1a8f4:	ldr	r0, [sp, #4]
   1a8f8:	ldr	r1, [r0]
   1a8fc:	ldr	r2, [r0, #4]
   1a900:	adds	r1, r1, #1
   1a904:	adc	r2, r2, #0
   1a908:	str	r1, [r0]
   1a90c:	str	r2, [r0, #4]
   1a910:	ldr	r0, [fp, #-4]
   1a914:	ldr	r0, [r0]
   1a918:	bl	1210c <next@@Base>
   1a91c:	ldr	r1, [pc, #120]	; 1a99c <read_boolean_expression@@Base+0x318>
   1a920:	add	r1, pc, r1
   1a924:	add	r1, r1, #88	; 0x58
   1a928:	str	r0, [fp, #-12]
   1a92c:	str	r1, [fp, #-32]	; 0xffffffe0
   1a930:	b	1a6f4 <read_boolean_expression@@Base+0x70>
   1a934:	ldr	r0, [sp, #40]	; 0x28
   1a938:	ldr	r1, [r0]
   1a93c:	ldr	r2, [r0, #4]
   1a940:	adds	r1, r1, #1
   1a944:	adc	r2, r2, #0
   1a948:	str	r1, [r0]
   1a94c:	str	r2, [r0, #4]
   1a950:	ldr	r0, [pc, #84]	; 1a9ac <read_boolean_expression@@Base+0x328>
   1a954:	add	r0, pc, r0
   1a958:	ldr	r1, [r0, #96]	; 0x60
   1a95c:	ldr	r2, [r0, #100]	; 0x64
   1a960:	adds	r1, r1, #1
   1a964:	adc	r2, r2, #0
   1a968:	str	r1, [r0, #96]	; 0x60
   1a96c:	str	r2, [r0, #100]	; 0x64
   1a970:	ldr	r0, [fp, #-12]
   1a974:	bl	175ec <free_token_cpar@@Base>
   1a978:	ldr	r0, [fp, #-8]
   1a97c:	mov	sp, fp
   1a980:	pop	{fp, pc}
   1a984:	andeq	r7, r1, r4, lsr #14
   1a988:	ldrdeq	r7, [r1], -r4
   1a98c:			; <UNDEFINED> instruction: 0x000176bc
   1a990:	andeq	r7, r1, ip, lsl r5
   1a994:	andeq	r7, r1, ip, ror #10
   1a998:	andeq	r7, r1, r8, lsr #11
   1a99c:	muleq	r1, r8, r4
   1a9a0:	strdeq	r4, [r0], -r9
   1a9a4:	strdeq	r6, [r1], -r8
   1a9a8:	andeq	r7, r1, ip, asr r6
   1a9ac:	andeq	r7, r1, r4, ror #8

0001a9b0 <read_single_boolean_expression@@Base>:
   1a9b0:	push	{r4, r5, fp, lr}
   1a9b4:	add	fp, sp, #8
   1a9b8:	sub	sp, sp, #88	; 0x58
   1a9bc:	ldr	ip, [pc, #580]	; 1ac08 <read_single_boolean_expression@@Base+0x258>
   1a9c0:	add	ip, pc, ip
   1a9c4:	str	r0, [sp, #48]	; 0x30
   1a9c8:	str	r1, [sp, #44]	; 0x2c
   1a9cc:	str	r2, [sp, #40]	; 0x28
   1a9d0:	str	r3, [sp, #36]	; 0x24
   1a9d4:	str	ip, [sp, #32]
   1a9d8:	ldr	r0, [sp, #32]
   1a9dc:	ldr	r1, [pc, #552]	; 1ac0c <read_single_boolean_expression@@Base+0x25c>
   1a9e0:	add	r1, pc, r1
   1a9e4:	add	r2, r1, #8
   1a9e8:	add	r1, r1, #16
   1a9ec:	ldr	r3, [r0]
   1a9f0:	ldr	ip, [r0, #4]
   1a9f4:	adds	r3, r3, #1
   1a9f8:	adc	ip, ip, #0
   1a9fc:	str	r3, [r0]
   1aa00:	str	ip, [r0, #4]
   1aa04:	ldr	r0, [sp, #48]	; 0x30
   1aa08:	str	r0, [fp, #-12]
   1aa0c:	ldr	r3, [sp, #44]	; 0x2c
   1aa10:	str	r3, [fp, #-16]
   1aa14:	ldr	ip, [sp, #40]	; 0x28
   1aa18:	str	ip, [fp, #-20]	; 0xffffffec
   1aa1c:	ldr	lr, [sp, #36]	; 0x24
   1aa20:	str	lr, [fp, #-24]	; 0xffffffe8
   1aa24:	movw	r4, #0
   1aa28:	str	r4, [fp, #-28]	; 0xffffffe4
   1aa2c:	str	r4, [fp, #-32]	; 0xffffffe0
   1aa30:	str	r4, [fp, #-36]	; 0xffffffdc
   1aa34:	str	r4, [fp, #-40]	; 0xffffffd8
   1aa38:	str	r4, [fp, #-44]	; 0xffffffd4
   1aa3c:	ldr	r5, [fp, #-16]
   1aa40:	cmp	r5, r4
   1aa44:	str	r2, [sp, #28]
   1aa48:	str	r1, [sp, #24]
   1aa4c:	bne	1aa8c <read_single_boolean_expression@@Base+0xdc>
   1aa50:	ldr	r0, [sp, #28]
   1aa54:	ldr	r1, [r0]
   1aa58:	ldr	r2, [r0, #4]
   1aa5c:	adds	r1, r1, #1
   1aa60:	adc	r2, r2, #0
   1aa64:	str	r1, [r0]
   1aa68:	str	r2, [r0, #4]
   1aa6c:	ldr	r0, [fp, #-12]
   1aa70:	bl	1ac2c <read_boolean_binary_expression@@Base>
   1aa74:	ldr	r1, [pc, #424]	; 1ac24 <read_single_boolean_expression@@Base+0x274>
   1aa78:	add	r1, pc, r1
   1aa7c:	add	r1, r1, #24
   1aa80:	str	r0, [fp, #-32]	; 0xffffffe0
   1aa84:	str	r1, [sp, #20]
   1aa88:	b	1abc0 <read_single_boolean_expression@@Base+0x210>
   1aa8c:	ldr	r0, [sp, #24]
   1aa90:	ldr	r1, [pc, #376]	; 1ac10 <read_single_boolean_expression@@Base+0x260>
   1aa94:	add	r1, pc, r1
   1aa98:	add	r2, r1, #32
   1aa9c:	add	r1, r1, #40	; 0x28
   1aaa0:	ldr	r3, [r0]
   1aaa4:	ldr	ip, [r0, #4]
   1aaa8:	adds	r3, r3, #1
   1aaac:	adc	ip, ip, #0
   1aab0:	str	r3, [r0]
   1aab4:	str	ip, [r0, #4]
   1aab8:	ldr	r0, [fp, #-20]	; 0xffffffec
   1aabc:	ldr	r0, [r0]
   1aac0:	cmp	r0, #0
   1aac4:	str	r2, [sp, #16]
   1aac8:	str	r1, [sp, #12]
   1aacc:	beq	1ab48 <read_single_boolean_expression@@Base+0x198>
   1aad0:	ldr	r0, [sp, #16]
   1aad4:	ldr	r1, [r0]
   1aad8:	ldr	r2, [r0, #4]
   1aadc:	adds	r1, r1, #1
   1aae0:	adc	r2, r2, #0
   1aae4:	str	r1, [r0]
   1aae8:	str	r2, [r0, #4]
   1aaec:	ldr	r0, [fp, #-12]
   1aaf0:	bl	1ac2c <read_boolean_binary_expression@@Base>
   1aaf4:	str	r0, [fp, #-36]	; 0xffffffdc
   1aaf8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1aafc:	str	r0, [fp, #-40]	; 0xffffffd8
   1ab00:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1ab04:	str	r0, [fp, #-44]	; 0xffffffd4
   1ab08:	movw	r0, #20
   1ab0c:	bl	11ee4 <malloc@plt>
   1ab10:	str	r0, [fp, #-32]	; 0xffffffe0
   1ab14:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1ab18:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1ab1c:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1ab20:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1ab24:	bl	18364 <init_node_boolean_operator@@Base>
   1ab28:	ldr	r0, [pc, #236]	; 1ac1c <read_single_boolean_expression@@Base+0x26c>
   1ab2c:	add	r0, pc, r0
   1ab30:	add	r0, r0, #48	; 0x30
   1ab34:	ldr	r1, [fp, #-20]	; 0xffffffec
   1ab38:	movw	r2, #0
   1ab3c:	str	r2, [r1]
   1ab40:	str	r0, [sp, #8]
   1ab44:	b	1ab94 <read_single_boolean_expression@@Base+0x1e4>
   1ab48:	ldr	r0, [sp, #12]
   1ab4c:	ldr	r1, [pc, #192]	; 1ac14 <read_single_boolean_expression@@Base+0x264>
   1ab50:	add	r1, pc, r1
   1ab54:	ldr	r2, [pc, #188]	; 1ac18 <read_single_boolean_expression@@Base+0x268>
   1ab58:	ldr	r2, [pc, r2]
   1ab5c:	ldr	r3, [r0]
   1ab60:	ldr	ip, [r0, #4]
   1ab64:	adds	r3, r3, #1
   1ab68:	adc	ip, ip, #0
   1ab6c:	str	r3, [r0]
   1ab70:	str	ip, [r0, #4]
   1ab74:	ldr	r0, [r2]
   1ab78:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1ab7c:	ldr	r2, [r2, #4]
   1ab80:	bl	11f44 <fprintf@plt>
   1ab84:	movw	r1, #1
   1ab88:	str	r0, [sp, #4]
   1ab8c:	mov	r0, r1
   1ab90:	bl	11f20 <exit@plt>
   1ab94:	ldr	r0, [sp, #8]
   1ab98:	ldr	r1, [pc, #128]	; 1ac20 <read_single_boolean_expression@@Base+0x270>
   1ab9c:	add	r1, pc, r1
   1aba0:	add	r1, r1, #56	; 0x38
   1aba4:	ldr	r2, [r0]
   1aba8:	ldr	r3, [r0, #4]
   1abac:	adds	r2, r2, #1
   1abb0:	adc	r3, r3, #0
   1abb4:	str	r2, [r0]
   1abb8:	str	r3, [r0, #4]
   1abbc:	str	r1, [sp, #20]
   1abc0:	ldr	r0, [sp, #20]
   1abc4:	ldr	r1, [r0]
   1abc8:	ldr	r2, [r0, #4]
   1abcc:	adds	r1, r1, #1
   1abd0:	adc	r2, r2, #0
   1abd4:	str	r1, [r0]
   1abd8:	str	r2, [r0, #4]
   1abdc:	ldr	r0, [pc, #68]	; 1ac28 <read_single_boolean_expression@@Base+0x278>
   1abe0:	add	r0, pc, r0
   1abe4:	ldr	r1, [r0, #64]	; 0x40
   1abe8:	ldr	r2, [r0, #68]	; 0x44
   1abec:	adds	r1, r1, #1
   1abf0:	adc	r2, r2, #0
   1abf4:	str	r1, [r0, #64]	; 0x40
   1abf8:	str	r2, [r0, #68]	; 0x44
   1abfc:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1ac00:	sub	sp, fp, #8
   1ac04:	pop	{r4, r5, fp, pc}
   1ac08:	andeq	r7, r1, r8, ror #8
   1ac0c:	andeq	r7, r1, r8, asr #8
   1ac10:	muleq	r1, r4, r3
   1ac14:	andeq	r4, r0, r3, lsl #15
   1ac18:	andeq	r6, r1, r0, ror #10
   1ac1c:	strdeq	r7, [r1], -ip
   1ac20:	andeq	r7, r1, ip, lsl #5
   1ac24:			; <UNDEFINED> instruction: 0x000173b0
   1ac28:	andeq	r7, r1, r8, asr #4

0001ac2c <read_boolean_binary_expression@@Base>:
   1ac2c:	push	{fp, lr}
   1ac30:	mov	fp, sp
   1ac34:	sub	sp, sp, #88	; 0x58
   1ac38:	ldr	r1, [pc, #916]	; 1afd4 <read_boolean_binary_expression@@Base+0x3a8>
   1ac3c:	add	r1, pc, r1
   1ac40:	str	r0, [sp, #44]	; 0x2c
   1ac44:	str	r1, [sp, #40]	; 0x28
   1ac48:	ldr	r0, [sp, #40]	; 0x28
   1ac4c:	ldr	r1, [r0]
   1ac50:	ldr	r2, [r0, #4]
   1ac54:	adds	r1, r1, #1
   1ac58:	adc	r2, r2, #0
   1ac5c:	str	r1, [r0]
   1ac60:	str	r2, [r0, #4]
   1ac64:	ldr	r0, [sp, #44]	; 0x2c
   1ac68:	str	r0, [fp, #-8]
   1ac6c:	movw	r1, #0
   1ac70:	str	r1, [fp, #-12]
   1ac74:	str	r1, [fp, #-16]
   1ac78:	str	r1, [fp, #-20]	; 0xffffffec
   1ac7c:	str	r1, [fp, #-24]	; 0xffffffe8
   1ac80:	str	r1, [fp, #-28]	; 0xffffffe4
   1ac84:	str	r1, [fp, #-32]	; 0xffffffe0
   1ac88:	str	r1, [fp, #-36]	; 0xffffffdc
   1ac8c:	ldr	r1, [fp, #-8]
   1ac90:	ldr	r0, [r1]
   1ac94:	bl	1210c <next@@Base>
   1ac98:	ldr	r1, [pc, #824]	; 1afd8 <read_boolean_binary_expression@@Base+0x3ac>
   1ac9c:	add	r1, pc, r1
   1aca0:	add	r2, r1, #8
   1aca4:	add	r1, r1, #16
   1aca8:	str	r0, [fp, #-28]	; 0xffffffe4
   1acac:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1acb0:	ldr	r0, [r0]
   1acb4:	cmp	r0, #1
   1acb8:	str	r2, [sp, #36]	; 0x24
   1acbc:	str	r1, [sp, #32]
   1acc0:	beq	1ad8c <read_boolean_binary_expression@@Base+0x160>
   1acc4:	ldr	r0, [sp, #36]	; 0x24
   1acc8:	ldr	r1, [pc, #800]	; 1aff0 <read_boolean_binary_expression@@Base+0x3c4>
   1accc:	add	r1, pc, r1
   1acd0:	add	r2, r1, #24
   1acd4:	add	r1, r1, #32
   1acd8:	ldr	r3, [r0]
   1acdc:	ldr	ip, [r0, #4]
   1ace0:	adds	r3, r3, #1
   1ace4:	adc	ip, ip, #0
   1ace8:	str	r3, [r0]
   1acec:	str	ip, [r0, #4]
   1acf0:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1acf4:	ldr	r0, [r0]
   1acf8:	cmp	r0, #12
   1acfc:	str	r2, [sp, #28]
   1ad00:	str	r1, [sp, #24]
   1ad04:	bne	1ad54 <read_boolean_binary_expression@@Base+0x128>
   1ad08:	ldr	r0, [sp, #28]
   1ad0c:	ldr	r1, [r0]
   1ad10:	ldr	r2, [r0, #4]
   1ad14:	adds	r1, r1, #1
   1ad18:	adc	r2, r2, #0
   1ad1c:	str	r1, [r0]
   1ad20:	str	r2, [r0, #4]
   1ad24:	ldr	r0, [fp, #-8]
   1ad28:	ldr	r0, [r0]
   1ad2c:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1ad30:	bl	12670 <push_back@@Base>
   1ad34:	ldr	r0, [fp, #-8]
   1ad38:	bl	1b000 <read_boolean_unary_expression@@Base>
   1ad3c:	ldr	r1, [pc, #692]	; 1aff8 <read_boolean_binary_expression@@Base+0x3cc>
   1ad40:	add	r1, pc, r1
   1ad44:	add	r1, r1, #40	; 0x28
   1ad48:	str	r0, [fp, #-4]
   1ad4c:	str	r1, [sp, #20]
   1ad50:	b	1af8c <read_boolean_binary_expression@@Base+0x360>
   1ad54:	ldr	r0, [sp, #24]
   1ad58:	ldr	r1, [pc, #660]	; 1aff4 <read_boolean_binary_expression@@Base+0x3c8>
   1ad5c:	add	r1, pc, r1
   1ad60:	add	r1, r1, #48	; 0x30
   1ad64:	ldr	r2, [r0]
   1ad68:	ldr	r3, [r0, #4]
   1ad6c:	adds	r2, r2, #1
   1ad70:	adc	r3, r3, #0
   1ad74:	str	r2, [r0]
   1ad78:	str	r3, [r0, #4]
   1ad7c:	movw	r0, #0
   1ad80:	str	r0, [fp, #-4]
   1ad84:	str	r1, [sp, #20]
   1ad88:	b	1af8c <read_boolean_binary_expression@@Base+0x360>
   1ad8c:	ldr	r0, [sp, #32]
   1ad90:	ldr	r1, [r0]
   1ad94:	ldr	r2, [r0, #4]
   1ad98:	adds	r1, r1, #1
   1ad9c:	adc	r2, r2, #0
   1ada0:	str	r1, [r0]
   1ada4:	str	r2, [r0, #4]
   1ada8:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1adac:	str	r0, [fp, #-32]	; 0xffffffe0
   1adb0:	movw	r0, #12
   1adb4:	bl	11ee4 <malloc@plt>
   1adb8:	str	r0, [fp, #-16]
   1adbc:	ldr	r0, [fp, #-16]
   1adc0:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1adc4:	ldr	r1, [r1, #4]
   1adc8:	bl	180cc <init_node_int@@Base>
   1adcc:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1add0:	bl	17478 <free_token_int_value@@Base>
   1add4:	ldr	r0, [fp, #-16]
   1add8:	str	r0, [fp, #-20]	; 0xffffffec
   1addc:	ldr	r0, [fp, #-8]
   1ade0:	ldr	r0, [r0]
   1ade4:	bl	1210c <next@@Base>
   1ade8:	ldr	r1, [pc, #492]	; 1afdc <read_boolean_binary_expression@@Base+0x3b0>
   1adec:	add	r1, pc, r1
   1adf0:	add	r2, r1, #56	; 0x38
   1adf4:	add	r1, r1, #64	; 0x40
   1adf8:	str	r0, [fp, #-28]	; 0xffffffe4
   1adfc:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1ae00:	ldr	r0, [r0]
   1ae04:	cmp	r0, #12
   1ae08:	str	r2, [sp, #16]
   1ae0c:	str	r1, [sp, #12]
   1ae10:	beq	1ae54 <read_boolean_binary_expression@@Base+0x228>
   1ae14:	ldr	r0, [sp, #16]
   1ae18:	ldr	r1, [r0]
   1ae1c:	ldr	r2, [r0, #4]
   1ae20:	adds	r1, r1, #1
   1ae24:	adc	r2, r2, #0
   1ae28:	str	r1, [r0]
   1ae2c:	str	r2, [r0, #4]
   1ae30:	ldr	r0, [fp, #-20]	; 0xffffffec
   1ae34:	bl	18434 <free_node@@Base>
   1ae38:	ldr	r0, [pc, #428]	; 1afec <read_boolean_binary_expression@@Base+0x3c0>
   1ae3c:	add	r0, pc, r0
   1ae40:	add	r0, r0, #72	; 0x48
   1ae44:	movw	r1, #0
   1ae48:	str	r1, [fp, #-4]
   1ae4c:	str	r0, [sp, #20]
   1ae50:	b	1af8c <read_boolean_binary_expression@@Base+0x360>
   1ae54:	ldr	r0, [sp, #12]
   1ae58:	ldr	r1, [r0]
   1ae5c:	ldr	r2, [r0, #4]
   1ae60:	adds	r1, r1, #1
   1ae64:	adc	r2, r2, #0
   1ae68:	str	r1, [r0]
   1ae6c:	str	r2, [r0, #4]
   1ae70:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1ae74:	str	r0, [fp, #-36]	; 0xffffffdc
   1ae78:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1ae7c:	bl	18d6c <get_boolean_op_value@@Base>
   1ae80:	str	r0, [fp, #-40]	; 0xffffffd8
   1ae84:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1ae88:	bl	179cc <free_token_boolean_op@@Base>
   1ae8c:	ldr	r0, [fp, #-8]
   1ae90:	ldr	r0, [r0]
   1ae94:	bl	1210c <next@@Base>
   1ae98:	ldr	r1, [pc, #320]	; 1afe0 <read_boolean_binary_expression@@Base+0x3b4>
   1ae9c:	add	r1, pc, r1
   1aea0:	add	r2, r1, #80	; 0x50
   1aea4:	add	r1, r1, #88	; 0x58
   1aea8:	str	r0, [fp, #-28]	; 0xffffffe4
   1aeac:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1aeb0:	ldr	r0, [r0]
   1aeb4:	cmp	r0, #1
   1aeb8:	str	r2, [sp, #8]
   1aebc:	str	r1, [sp, #4]
   1aec0:	beq	1af04 <read_boolean_binary_expression@@Base+0x2d8>
   1aec4:	ldr	r0, [sp, #8]
   1aec8:	ldr	r1, [r0]
   1aecc:	ldr	r2, [r0, #4]
   1aed0:	adds	r1, r1, #1
   1aed4:	adc	r2, r2, #0
   1aed8:	str	r1, [r0]
   1aedc:	str	r2, [r0, #4]
   1aee0:	ldr	r0, [fp, #-20]	; 0xffffffec
   1aee4:	bl	18434 <free_node@@Base>
   1aee8:	ldr	r0, [pc, #248]	; 1afe8 <read_boolean_binary_expression@@Base+0x3bc>
   1aeec:	add	r0, pc, r0
   1aef0:	add	r0, r0, #96	; 0x60
   1aef4:	movw	r1, #0
   1aef8:	str	r1, [fp, #-4]
   1aefc:	str	r0, [sp, #20]
   1af00:	b	1af8c <read_boolean_binary_expression@@Base+0x360>
   1af04:	ldr	r0, [sp, #4]
   1af08:	ldr	r1, [r0]
   1af0c:	ldr	r2, [r0, #4]
   1af10:	adds	r1, r1, #1
   1af14:	adc	r2, r2, #0
   1af18:	str	r1, [r0]
   1af1c:	str	r2, [r0, #4]
   1af20:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1af24:	str	r0, [fp, #-32]	; 0xffffffe0
   1af28:	movw	r0, #12
   1af2c:	bl	11ee4 <malloc@plt>
   1af30:	str	r0, [fp, #-16]
   1af34:	ldr	r0, [fp, #-16]
   1af38:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1af3c:	ldr	r1, [r1, #4]
   1af40:	bl	180cc <init_node_int@@Base>
   1af44:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1af48:	bl	17478 <free_token_int_value@@Base>
   1af4c:	ldr	r0, [fp, #-16]
   1af50:	str	r0, [fp, #-24]	; 0xffffffe8
   1af54:	movw	r0, #20
   1af58:	bl	11ee4 <malloc@plt>
   1af5c:	str	r0, [fp, #-12]
   1af60:	ldr	r0, [fp, #-12]
   1af64:	ldr	r1, [fp, #-40]	; 0xffffffd8
   1af68:	ldr	r2, [fp, #-20]	; 0xffffffec
   1af6c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1af70:	bl	18364 <init_node_boolean_operator@@Base>
   1af74:	ldr	r0, [pc, #104]	; 1afe4 <read_boolean_binary_expression@@Base+0x3b8>
   1af78:	add	r0, pc, r0
   1af7c:	add	r0, r0, #104	; 0x68
   1af80:	ldr	r1, [fp, #-12]
   1af84:	str	r1, [fp, #-4]
   1af88:	str	r0, [sp, #20]
   1af8c:	ldr	r0, [sp, #20]
   1af90:	ldr	r1, [r0]
   1af94:	ldr	r2, [r0, #4]
   1af98:	adds	r1, r1, #1
   1af9c:	adc	r2, r2, #0
   1afa0:	str	r1, [r0]
   1afa4:	str	r2, [r0, #4]
   1afa8:	ldr	r0, [pc, #76]	; 1affc <read_boolean_binary_expression@@Base+0x3d0>
   1afac:	add	r0, pc, r0
   1afb0:	ldr	r1, [r0, #112]	; 0x70
   1afb4:	ldr	r2, [r0, #116]	; 0x74
   1afb8:	adds	r1, r1, #1
   1afbc:	adc	r2, r2, #0
   1afc0:	str	r1, [r0, #112]	; 0x70
   1afc4:	str	r2, [r0, #116]	; 0x74
   1afc8:	ldr	r0, [fp, #-4]
   1afcc:	mov	sp, fp
   1afd0:	pop	{fp, pc}
   1afd4:	andeq	r7, r1, ip, lsr r2
   1afd8:	ldrdeq	r7, [r1], -ip
   1afdc:	andeq	r7, r1, ip, lsl #1
   1afe0:	ldrdeq	r6, [r1], -ip
   1afe4:	andeq	r6, r1, r0, lsl #30
   1afe8:	andeq	r6, r1, ip, lsl #31
   1afec:	andeq	r7, r1, ip, lsr r0
   1aff0:	andeq	r7, r1, ip, lsr #3
   1aff4:	andeq	r7, r1, ip, lsl r1
   1aff8:	andeq	r7, r1, r8, lsr r1
   1affc:	andeq	r6, r1, ip, asr #29

0001b000 <read_boolean_unary_expression@@Base>:
   1b000:	push	{fp, lr}
   1b004:	mov	fp, sp
   1b008:	sub	sp, sp, #64	; 0x40
   1b00c:	ldr	r1, [pc, #564]	; 1b248 <read_boolean_unary_expression@@Base+0x248>
   1b010:	add	r1, pc, r1
   1b014:	str	r0, [sp, #28]
   1b018:	str	r1, [sp, #24]
   1b01c:	ldr	r0, [sp, #24]
   1b020:	ldr	r1, [r0]
   1b024:	ldr	r2, [r0, #4]
   1b028:	adds	r1, r1, #1
   1b02c:	adc	r2, r2, #0
   1b030:	str	r1, [r0]
   1b034:	str	r2, [r0, #4]
   1b038:	ldr	r0, [sp, #28]
   1b03c:	str	r0, [fp, #-8]
   1b040:	movw	r1, #0
   1b044:	str	r1, [fp, #-12]
   1b048:	str	r1, [fp, #-16]
   1b04c:	str	r1, [fp, #-20]	; 0xffffffec
   1b050:	str	r1, [fp, #-24]	; 0xffffffe8
   1b054:	str	r1, [fp, #-28]	; 0xffffffe4
   1b058:	movw	r0, #20
   1b05c:	bl	11ee4 <malloc@plt>
   1b060:	str	r0, [fp, #-12]
   1b064:	ldr	r0, [fp, #-8]
   1b068:	ldr	r0, [r0]
   1b06c:	bl	1210c <next@@Base>
   1b070:	ldr	r1, [pc, #468]	; 1b24c <read_boolean_unary_expression@@Base+0x24c>
   1b074:	add	r1, pc, r1
   1b078:	add	r2, r1, #8
   1b07c:	add	r1, r1, #16
   1b080:	str	r0, [fp, #-24]	; 0xffffffe8
   1b084:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b088:	ldr	r0, [r0]
   1b08c:	cmp	r0, #12
   1b090:	str	r2, [sp, #20]
   1b094:	str	r1, [sp, #16]
   1b098:	beq	1b0dc <read_boolean_unary_expression@@Base+0xdc>
   1b09c:	ldr	r0, [sp, #20]
   1b0a0:	ldr	r1, [r0]
   1b0a4:	ldr	r2, [r0, #4]
   1b0a8:	adds	r1, r1, #1
   1b0ac:	adc	r2, r2, #0
   1b0b0:	str	r1, [r0]
   1b0b4:	str	r2, [r0, #4]
   1b0b8:	ldr	r0, [fp, #-12]
   1b0bc:	bl	18c54 <free_node_boolean_operator@@Base>
   1b0c0:	ldr	r0, [pc, #404]	; 1b25c <read_boolean_unary_expression@@Base+0x25c>
   1b0c4:	add	r0, pc, r0
   1b0c8:	add	r0, r0, #24
   1b0cc:	movw	r1, #0
   1b0d0:	str	r1, [fp, #-4]
   1b0d4:	str	r0, [sp, #12]
   1b0d8:	b	1b200 <read_boolean_unary_expression@@Base+0x200>
   1b0dc:	ldr	r0, [sp, #16]
   1b0e0:	ldr	r1, [r0]
   1b0e4:	ldr	r2, [r0, #4]
   1b0e8:	adds	r1, r1, #1
   1b0ec:	adc	r2, r2, #0
   1b0f0:	str	r1, [r0]
   1b0f4:	str	r2, [r0, #4]
   1b0f8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b0fc:	bl	18d6c <get_boolean_op_value@@Base>
   1b100:	str	r0, [sp, #32]
   1b104:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b108:	bl	179cc <free_token_boolean_op@@Base>
   1b10c:	ldr	r0, [fp, #-8]
   1b110:	ldr	r0, [r0]
   1b114:	bl	1210c <next@@Base>
   1b118:	ldr	r1, [pc, #304]	; 1b250 <read_boolean_unary_expression@@Base+0x250>
   1b11c:	add	r1, pc, r1
   1b120:	add	r2, r1, #32
   1b124:	add	r1, r1, #40	; 0x28
   1b128:	str	r0, [fp, #-24]	; 0xffffffe8
   1b12c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b130:	ldr	r0, [r0]
   1b134:	cmp	r0, #1
   1b138:	str	r2, [sp, #8]
   1b13c:	str	r1, [sp, #4]
   1b140:	beq	1b184 <read_boolean_unary_expression@@Base+0x184>
   1b144:	ldr	r0, [sp, #8]
   1b148:	ldr	r1, [r0]
   1b14c:	ldr	r2, [r0, #4]
   1b150:	adds	r1, r1, #1
   1b154:	adc	r2, r2, #0
   1b158:	str	r1, [r0]
   1b15c:	str	r2, [r0, #4]
   1b160:	ldr	r0, [fp, #-12]
   1b164:	bl	18c54 <free_node_boolean_operator@@Base>
   1b168:	ldr	r0, [pc, #232]	; 1b258 <read_boolean_unary_expression@@Base+0x258>
   1b16c:	add	r0, pc, r0
   1b170:	add	r0, r0, #48	; 0x30
   1b174:	movw	r1, #0
   1b178:	str	r1, [fp, #-4]
   1b17c:	str	r0, [sp, #12]
   1b180:	b	1b200 <read_boolean_unary_expression@@Base+0x200>
   1b184:	ldr	r0, [sp, #4]
   1b188:	ldr	r1, [r0]
   1b18c:	ldr	r2, [r0, #4]
   1b190:	adds	r1, r1, #1
   1b194:	adc	r2, r2, #0
   1b198:	str	r1, [r0]
   1b19c:	str	r2, [r0, #4]
   1b1a0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b1a4:	str	r0, [fp, #-28]	; 0xffffffe4
   1b1a8:	movw	r0, #12
   1b1ac:	bl	11ee4 <malloc@plt>
   1b1b0:	str	r0, [fp, #-16]
   1b1b4:	ldr	r0, [fp, #-16]
   1b1b8:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1b1bc:	ldr	r1, [r1, #4]
   1b1c0:	bl	180cc <init_node_int@@Base>
   1b1c4:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1b1c8:	bl	17478 <free_token_int_value@@Base>
   1b1cc:	ldr	r0, [fp, #-16]
   1b1d0:	str	r0, [fp, #-20]	; 0xffffffec
   1b1d4:	ldr	r0, [fp, #-12]
   1b1d8:	ldr	r1, [sp, #32]
   1b1dc:	ldr	r2, [fp, #-20]	; 0xffffffec
   1b1e0:	movw	r3, #0
   1b1e4:	bl	18364 <init_node_boolean_operator@@Base>
   1b1e8:	ldr	r0, [pc, #100]	; 1b254 <read_boolean_unary_expression@@Base+0x254>
   1b1ec:	add	r0, pc, r0
   1b1f0:	add	r0, r0, #56	; 0x38
   1b1f4:	ldr	r1, [fp, #-12]
   1b1f8:	str	r1, [fp, #-4]
   1b1fc:	str	r0, [sp, #12]
   1b200:	ldr	r0, [sp, #12]
   1b204:	ldr	r1, [r0]
   1b208:	ldr	r2, [r0, #4]
   1b20c:	adds	r1, r1, #1
   1b210:	adc	r2, r2, #0
   1b214:	str	r1, [r0]
   1b218:	str	r2, [r0, #4]
   1b21c:	ldr	r0, [pc, #60]	; 1b260 <read_boolean_unary_expression@@Base+0x260>
   1b220:	add	r0, pc, r0
   1b224:	ldr	r1, [r0, #64]	; 0x40
   1b228:	ldr	r2, [r0, #68]	; 0x44
   1b22c:	adds	r1, r1, #1
   1b230:	adc	r2, r2, #0
   1b234:	str	r1, [r0, #64]	; 0x40
   1b238:	str	r2, [r0, #68]	; 0x44
   1b23c:	ldr	r0, [fp, #-4]
   1b240:	mov	sp, fp
   1b244:	pop	{fp, pc}
   1b248:	andeq	r6, r1, r8, ror #29
   1b24c:	andeq	r6, r1, r4, lsl #29
   1b250:	ldrdeq	r6, [r1], -ip
   1b254:	andeq	r6, r1, ip, lsl #26
   1b258:	andeq	r6, r1, ip, lsl #27
   1b25c:	andeq	r6, r1, r4, lsr lr
   1b260:	ldrdeq	r6, [r1], -r8
   1b264:	push	{r4, sl, fp, lr}
   1b268:	add	fp, sp, #8
   1b26c:	sub	sp, sp, #40	; 0x28
   1b270:	movw	r0, #0
   1b274:	str	r0, [fp, #-12]
   1b278:	b	1b27c <read_boolean_unary_expression@@Base+0x27c>
   1b27c:	ldr	r0, [fp, #-12]
   1b280:	ldr	r1, [pc, #244]	; 1b37c <read_boolean_unary_expression@@Base+0x37c>
   1b284:	add	r1, pc, r1
   1b288:	movw	r2, #24
   1b28c:	mul	r2, r0, r2
   1b290:	add	r1, r1, r2
   1b294:	ldr	r2, [r1]
   1b298:	ldr	r3, [r1, #4]
   1b29c:	ldr	ip, [r1, #8]
   1b2a0:	str	r0, [fp, #-16]
   1b2a4:	mov	r0, r2
   1b2a8:	str	r1, [fp, #-20]	; 0xffffffec
   1b2ac:	mov	r1, r3
   1b2b0:	mov	r2, ip
   1b2b4:	bl	1b790 <read_boolean_unary_expression@@Base+0x790>
   1b2b8:	ldr	r0, [fp, #-20]	; 0xffffffec
   1b2bc:	ldr	r1, [r0, #12]
   1b2c0:	ldr	r2, [r0, #16]
   1b2c4:	ldr	r3, [r0, #20]
   1b2c8:	movw	ip, #0
   1b2cc:	cmp	ip, r1
   1b2d0:	str	r1, [sp, #24]
   1b2d4:	str	r2, [sp, #20]
   1b2d8:	str	r3, [sp, #16]
   1b2dc:	str	ip, [sp, #12]
   1b2e0:	bge	1b358 <read_boolean_unary_expression@@Base+0x358>
   1b2e4:	ldr	r0, [sp, #12]
   1b2e8:	add	r1, r0, r0, lsl #2
   1b2ec:	ldr	r2, [sp, #20]
   1b2f0:	ldr	r1, [r2, r1, lsl #2]!
   1b2f4:	ldr	r3, [r2, #4]
   1b2f8:	ldr	ip, [r2, #8]
   1b2fc:	ldr	lr, [r2, #16]
   1b300:	ldrb	r2, [r2, #12]
   1b304:	mov	r4, sp
   1b308:	str	lr, [r4]
   1b30c:	str	r0, [sp, #8]
   1b310:	mov	r0, r1
   1b314:	mov	r1, r3
   1b318:	str	r2, [sp, #4]
   1b31c:	mov	r2, ip
   1b320:	ldr	r3, [sp, #4]
   1b324:	bl	1beb0 <read_boolean_unary_expression@@Base+0xeb0>
   1b328:	ldr	r0, [sp, #16]
   1b32c:	ldr	r1, [sp, #8]
   1b330:	add	r2, r0, r1, lsl #3
   1b334:	ldr	r0, [r2]
   1b338:	ldr	r1, [r2, #4]
   1b33c:	bl	1c764 <read_boolean_unary_expression@@Base+0x1764>
   1b340:	ldr	r0, [sp, #8]
   1b344:	add	r1, r0, #1
   1b348:	ldr	r2, [sp, #24]
   1b34c:	cmp	r1, r2
   1b350:	str	r1, [sp, #12]
   1b354:	blt	1b2e4 <read_boolean_unary_expression@@Base+0x2e4>
   1b358:	bl	1ceec <read_boolean_unary_expression@@Base+0x1eec>
   1b35c:	bl	1dc58 <read_boolean_unary_expression@@Base+0x2c58>
   1b360:	ldr	r0, [fp, #-16]
   1b364:	add	r1, r0, #1
   1b368:	cmp	r1, #1
   1b36c:	str	r1, [fp, #-12]
   1b370:	blt	1b27c <read_boolean_unary_expression@@Base+0x27c>
   1b374:	sub	sp, fp, #8
   1b378:	pop	{r4, sl, fp, pc}
   1b37c:	andeq	r5, r1, r4, ror #24
   1b380:	push	{fp, lr}
   1b384:	mov	fp, sp
   1b388:	bl	1b264 <read_boolean_unary_expression@@Base+0x264>
   1b38c:	ldr	r0, [pc, #936]	; 1b73c <read_boolean_unary_expression@@Base+0x73c>
   1b390:	add	r0, pc, r0
   1b394:	mov	r1, #0
   1b398:	str	r1, [r0, #12]
   1b39c:	str	r1, [r0, #8]
   1b3a0:	str	r1, [r0, #4]
   1b3a4:	str	r1, [r0]
   1b3a8:	ldr	r0, [pc, #912]	; 1b740 <read_boolean_unary_expression@@Base+0x740>
   1b3ac:	add	r0, pc, r0
   1b3b0:	str	r1, [r0, #12]
   1b3b4:	str	r1, [r0, #8]
   1b3b8:	str	r1, [r0, #4]
   1b3bc:	str	r1, [r0]
   1b3c0:	ldr	r0, [pc, #892]	; 1b744 <read_boolean_unary_expression@@Base+0x744>
   1b3c4:	add	r0, pc, r0
   1b3c8:	str	r1, [r0, #12]
   1b3cc:	str	r1, [r0, #8]
   1b3d0:	str	r1, [r0, #4]
   1b3d4:	str	r1, [r0]
   1b3d8:	ldr	r0, [pc, #872]	; 1b748 <read_boolean_unary_expression@@Base+0x748>
   1b3dc:	add	r0, pc, r0
   1b3e0:	str	r1, [r0, #116]	; 0x74
   1b3e4:	str	r1, [r0, #112]	; 0x70
   1b3e8:	str	r1, [r0, #108]	; 0x6c
   1b3ec:	str	r1, [r0, #104]	; 0x68
   1b3f0:	str	r1, [r0, #100]	; 0x64
   1b3f4:	str	r1, [r0, #96]	; 0x60
   1b3f8:	str	r1, [r0, #92]	; 0x5c
   1b3fc:	str	r1, [r0, #88]	; 0x58
   1b400:	str	r1, [r0, #84]	; 0x54
   1b404:	str	r1, [r0, #80]	; 0x50
   1b408:	str	r1, [r0, #76]	; 0x4c
   1b40c:	str	r1, [r0, #72]	; 0x48
   1b410:	str	r1, [r0, #68]	; 0x44
   1b414:	str	r1, [r0, #64]	; 0x40
   1b418:	str	r1, [r0, #60]	; 0x3c
   1b41c:	str	r1, [r0, #56]	; 0x38
   1b420:	str	r1, [r0, #52]	; 0x34
   1b424:	str	r1, [r0, #48]	; 0x30
   1b428:	str	r1, [r0, #44]	; 0x2c
   1b42c:	str	r1, [r0, #40]	; 0x28
   1b430:	str	r1, [r0, #36]	; 0x24
   1b434:	str	r1, [r0, #32]
   1b438:	str	r1, [r0, #28]
   1b43c:	str	r1, [r0, #24]
   1b440:	str	r1, [r0, #20]
   1b444:	str	r1, [r0, #16]
   1b448:	str	r1, [r0, #12]
   1b44c:	str	r1, [r0, #8]
   1b450:	str	r1, [r0, #4]
   1b454:	str	r1, [r0]
   1b458:	ldr	r0, [pc, #748]	; 1b74c <read_boolean_unary_expression@@Base+0x74c>
   1b45c:	add	r0, pc, r0
   1b460:	str	r1, [r0, #156]	; 0x9c
   1b464:	str	r1, [r0, #152]	; 0x98
   1b468:	str	r1, [r0, #148]	; 0x94
   1b46c:	str	r1, [r0, #144]	; 0x90
   1b470:	str	r1, [r0, #140]	; 0x8c
   1b474:	str	r1, [r0, #136]	; 0x88
   1b478:	str	r1, [r0, #132]	; 0x84
   1b47c:	str	r1, [r0, #128]	; 0x80
   1b480:	str	r1, [r0, #124]	; 0x7c
   1b484:	str	r1, [r0, #120]	; 0x78
   1b488:	str	r1, [r0, #116]	; 0x74
   1b48c:	str	r1, [r0, #112]	; 0x70
   1b490:	str	r1, [r0, #108]	; 0x6c
   1b494:	str	r1, [r0, #104]	; 0x68
   1b498:	str	r1, [r0, #100]	; 0x64
   1b49c:	str	r1, [r0, #96]	; 0x60
   1b4a0:	str	r1, [r0, #92]	; 0x5c
   1b4a4:	str	r1, [r0, #88]	; 0x58
   1b4a8:	str	r1, [r0, #84]	; 0x54
   1b4ac:	str	r1, [r0, #80]	; 0x50
   1b4b0:	str	r1, [r0, #76]	; 0x4c
   1b4b4:	str	r1, [r0, #72]	; 0x48
   1b4b8:	str	r1, [r0, #68]	; 0x44
   1b4bc:	str	r1, [r0, #64]	; 0x40
   1b4c0:	str	r1, [r0, #60]	; 0x3c
   1b4c4:	str	r1, [r0, #56]	; 0x38
   1b4c8:	str	r1, [r0, #52]	; 0x34
   1b4cc:	str	r1, [r0, #48]	; 0x30
   1b4d0:	str	r1, [r0, #44]	; 0x2c
   1b4d4:	str	r1, [r0, #40]	; 0x28
   1b4d8:	str	r1, [r0, #36]	; 0x24
   1b4dc:	str	r1, [r0, #32]
   1b4e0:	str	r1, [r0, #28]
   1b4e4:	str	r1, [r0, #24]
   1b4e8:	str	r1, [r0, #20]
   1b4ec:	str	r1, [r0, #16]
   1b4f0:	str	r1, [r0, #12]
   1b4f4:	str	r1, [r0, #8]
   1b4f8:	str	r1, [r0, #4]
   1b4fc:	str	r1, [r0]
   1b500:	ldr	r0, [pc, #584]	; 1b750 <read_boolean_unary_expression@@Base+0x750>
   1b504:	add	r0, pc, r0
   1b508:	str	r1, [r0, #68]	; 0x44
   1b50c:	str	r1, [r0, #64]	; 0x40
   1b510:	str	r1, [r0, #60]	; 0x3c
   1b514:	str	r1, [r0, #56]	; 0x38
   1b518:	str	r1, [r0, #52]	; 0x34
   1b51c:	str	r1, [r0, #48]	; 0x30
   1b520:	str	r1, [r0, #44]	; 0x2c
   1b524:	str	r1, [r0, #40]	; 0x28
   1b528:	str	r1, [r0, #36]	; 0x24
   1b52c:	str	r1, [r0, #32]
   1b530:	str	r1, [r0, #28]
   1b534:	str	r1, [r0, #24]
   1b538:	str	r1, [r0, #20]
   1b53c:	str	r1, [r0, #16]
   1b540:	str	r1, [r0, #12]
   1b544:	str	r1, [r0, #8]
   1b548:	str	r1, [r0, #4]
   1b54c:	str	r1, [r0]
   1b550:	ldr	r0, [pc, #508]	; 1b754 <read_boolean_unary_expression@@Base+0x754>
   1b554:	add	r0, pc, r0
   1b558:	str	r1, [r0, #76]	; 0x4c
   1b55c:	str	r1, [r0, #72]	; 0x48
   1b560:	str	r1, [r0, #68]	; 0x44
   1b564:	str	r1, [r0, #64]	; 0x40
   1b568:	str	r1, [r0, #60]	; 0x3c
   1b56c:	str	r1, [r0, #56]	; 0x38
   1b570:	str	r1, [r0, #52]	; 0x34
   1b574:	str	r1, [r0, #48]	; 0x30
   1b578:	str	r1, [r0, #44]	; 0x2c
   1b57c:	str	r1, [r0, #40]	; 0x28
   1b580:	str	r1, [r0, #36]	; 0x24
   1b584:	str	r1, [r0, #32]
   1b588:	str	r1, [r0, #28]
   1b58c:	str	r1, [r0, #24]
   1b590:	str	r1, [r0, #20]
   1b594:	str	r1, [r0, #16]
   1b598:	str	r1, [r0, #12]
   1b59c:	str	r1, [r0, #8]
   1b5a0:	str	r1, [r0, #4]
   1b5a4:	str	r1, [r0]
   1b5a8:	ldr	r0, [pc, #424]	; 1b758 <read_boolean_unary_expression@@Base+0x758>
   1b5ac:	add	r0, pc, r0
   1b5b0:	str	r1, [r0, #100]	; 0x64
   1b5b4:	str	r1, [r0, #96]	; 0x60
   1b5b8:	str	r1, [r0, #92]	; 0x5c
   1b5bc:	str	r1, [r0, #88]	; 0x58
   1b5c0:	str	r1, [r0, #84]	; 0x54
   1b5c4:	str	r1, [r0, #80]	; 0x50
   1b5c8:	str	r1, [r0, #76]	; 0x4c
   1b5cc:	str	r1, [r0, #72]	; 0x48
   1b5d0:	str	r1, [r0, #68]	; 0x44
   1b5d4:	str	r1, [r0, #64]	; 0x40
   1b5d8:	str	r1, [r0, #60]	; 0x3c
   1b5dc:	str	r1, [r0, #56]	; 0x38
   1b5e0:	str	r1, [r0, #52]	; 0x34
   1b5e4:	str	r1, [r0, #48]	; 0x30
   1b5e8:	str	r1, [r0, #44]	; 0x2c
   1b5ec:	str	r1, [r0, #40]	; 0x28
   1b5f0:	str	r1, [r0, #36]	; 0x24
   1b5f4:	str	r1, [r0, #32]
   1b5f8:	str	r1, [r0, #28]
   1b5fc:	str	r1, [r0, #24]
   1b600:	str	r1, [r0, #20]
   1b604:	str	r1, [r0, #16]
   1b608:	str	r1, [r0, #12]
   1b60c:	str	r1, [r0, #8]
   1b610:	str	r1, [r0, #4]
   1b614:	str	r1, [r0]
   1b618:	ldr	r0, [pc, #316]	; 1b75c <read_boolean_unary_expression@@Base+0x75c>
   1b61c:	add	r0, pc, r0
   1b620:	str	r1, [r0, #68]	; 0x44
   1b624:	str	r1, [r0, #64]	; 0x40
   1b628:	str	r1, [r0, #60]	; 0x3c
   1b62c:	str	r1, [r0, #56]	; 0x38
   1b630:	str	r1, [r0, #52]	; 0x34
   1b634:	str	r1, [r0, #48]	; 0x30
   1b638:	str	r1, [r0, #44]	; 0x2c
   1b63c:	str	r1, [r0, #40]	; 0x28
   1b640:	str	r1, [r0, #36]	; 0x24
   1b644:	str	r1, [r0, #32]
   1b648:	str	r1, [r0, #28]
   1b64c:	str	r1, [r0, #24]
   1b650:	str	r1, [r0, #20]
   1b654:	str	r1, [r0, #16]
   1b658:	str	r1, [r0, #12]
   1b65c:	str	r1, [r0, #8]
   1b660:	str	r1, [r0, #4]
   1b664:	str	r1, [r0]
   1b668:	ldr	r0, [pc, #240]	; 1b760 <read_boolean_unary_expression@@Base+0x760>
   1b66c:	add	r0, pc, r0
   1b670:	str	r1, [r0, #116]	; 0x74
   1b674:	str	r1, [r0, #112]	; 0x70
   1b678:	str	r1, [r0, #108]	; 0x6c
   1b67c:	str	r1, [r0, #104]	; 0x68
   1b680:	str	r1, [r0, #100]	; 0x64
   1b684:	str	r1, [r0, #96]	; 0x60
   1b688:	str	r1, [r0, #92]	; 0x5c
   1b68c:	str	r1, [r0, #88]	; 0x58
   1b690:	str	r1, [r0, #84]	; 0x54
   1b694:	str	r1, [r0, #80]	; 0x50
   1b698:	str	r1, [r0, #76]	; 0x4c
   1b69c:	str	r1, [r0, #72]	; 0x48
   1b6a0:	str	r1, [r0, #68]	; 0x44
   1b6a4:	str	r1, [r0, #64]	; 0x40
   1b6a8:	str	r1, [r0, #60]	; 0x3c
   1b6ac:	str	r1, [r0, #56]	; 0x38
   1b6b0:	str	r1, [r0, #52]	; 0x34
   1b6b4:	str	r1, [r0, #48]	; 0x30
   1b6b8:	str	r1, [r0, #44]	; 0x2c
   1b6bc:	str	r1, [r0, #40]	; 0x28
   1b6c0:	str	r1, [r0, #36]	; 0x24
   1b6c4:	str	r1, [r0, #32]
   1b6c8:	str	r1, [r0, #28]
   1b6cc:	str	r1, [r0, #24]
   1b6d0:	str	r1, [r0, #20]
   1b6d4:	str	r1, [r0, #16]
   1b6d8:	str	r1, [r0, #12]
   1b6dc:	str	r1, [r0, #8]
   1b6e0:	str	r1, [r0, #4]
   1b6e4:	str	r1, [r0]
   1b6e8:	ldr	r0, [pc, #116]	; 1b764 <read_boolean_unary_expression@@Base+0x764>
   1b6ec:	add	r0, pc, r0
   1b6f0:	str	r1, [r0, #68]	; 0x44
   1b6f4:	str	r1, [r0, #64]	; 0x40
   1b6f8:	str	r1, [r0, #60]	; 0x3c
   1b6fc:	str	r1, [r0, #56]	; 0x38
   1b700:	str	r1, [r0, #52]	; 0x34
   1b704:	str	r1, [r0, #48]	; 0x30
   1b708:	str	r1, [r0, #44]	; 0x2c
   1b70c:	str	r1, [r0, #40]	; 0x28
   1b710:	str	r1, [r0, #36]	; 0x24
   1b714:	str	r1, [r0, #32]
   1b718:	str	r1, [r0, #28]
   1b71c:	str	r1, [r0, #24]
   1b720:	str	r1, [r0, #20]
   1b724:	str	r1, [r0, #16]
   1b728:	str	r1, [r0, #12]
   1b72c:	str	r1, [r0, #8]
   1b730:	str	r1, [r0, #4]
   1b734:	str	r1, [r0]
   1b738:	pop	{fp, pc}
   1b73c:	andeq	r6, r1, r8, lsr r8
   1b740:	andeq	r6, r1, ip, lsr #16
   1b744:	andeq	r6, r1, r4, lsr #16
   1b748:	andeq	r6, r1, ip, lsl r8
   1b74c:	andeq	r6, r1, ip, lsl r8
   1b750:	andeq	r6, r1, r4, lsl r8
   1b754:	andeq	r6, r1, r4, lsl r8
   1b758:	andeq	r6, r1, ip, lsl #16
   1b75c:	andeq	r6, r1, ip, lsl #16
   1b760:	andeq	r6, r1, ip, lsl #16
   1b764:	andeq	r6, r1, ip, lsl #16
   1b768:	push	{fp, lr}
   1b76c:	mov	fp, sp
   1b770:	ldr	r0, [pc, #16]	; 1b788 <read_boolean_unary_expression@@Base+0x788>
   1b774:	add	r0, pc, r0
   1b778:	ldr	r1, [pc, #12]	; 1b78c <read_boolean_unary_expression@@Base+0x78c>
   1b77c:	add	r1, pc, r1
   1b780:	bl	1e10c <__gcov_flush@@Base+0xb8>
   1b784:	pop	{fp, pc}
   1b788:			; <UNDEFINED> instruction: 0xfffffae8
   1b78c:			; <UNDEFINED> instruction: 0xfffffbfc
   1b790:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b794:	add	fp, sp, #28
   1b798:	sub	sp, sp, #36	; 0x24
   1b79c:	mov	r9, r1
   1b7a0:	mov	r6, r0
   1b7a4:	add	r0, sp, #28
   1b7a8:	add	r1, sp, #32
   1b7ac:	mov	r8, r2
   1b7b0:	bl	1e5a4 <__gcov_flush@@Base+0x550>
   1b7b4:	cmp	r0, #0
   1b7b8:	beq	1b7fc <read_boolean_unary_expression@@Base+0x7fc>
   1b7bc:	mov	r4, r0
   1b7c0:	mov	r0, r6
   1b7c4:	ldr	r5, [sp, #32]
   1b7c8:	bl	11f2c <strlen@plt>
   1b7cc:	add	r0, r5, r0
   1b7d0:	add	r0, r0, #2
   1b7d4:	bl	11ee4 <malloc@plt>
   1b7d8:	mov	r7, r0
   1b7dc:	ldr	r0, [sp, #28]
   1b7e0:	mov	r1, r6
   1b7e4:	mov	r2, r4
   1b7e8:	str	r0, [sp]
   1b7ec:	mov	r0, r7
   1b7f0:	mov	r3, r5
   1b7f4:	bl	1e638 <__gcov_flush@@Base+0x5e4>
   1b7f8:	b	1b808 <read_boolean_unary_expression@@Base+0x808>
   1b7fc:	mov	r0, r6
   1b800:	bl	11ea8 <strdup@plt>
   1b804:	mov	r7, r0
   1b808:	ldr	r0, [pc, #1492]	; 1bde4 <read_boolean_unary_expression@@Base+0xde4>
   1b80c:	ldr	r6, [pc, #1492]	; 1bde8 <read_boolean_unary_expression@@Base+0xde8>
   1b810:	mov	r1, #2
   1b814:	add	r0, pc, r0
   1b818:	add	r6, pc, r6
   1b81c:	str	r7, [r0]
   1b820:	mov	r0, r7
   1b824:	mov	r5, #0
   1b828:	strb	r5, [r6]
   1b82c:	bl	11ecc <open64@plt>
   1b830:	ldr	r4, [pc, #1460]	; 1bdec <read_boolean_unary_expression@@Base+0xdec>
   1b834:	cmn	r0, #1
   1b838:	add	r4, pc, r4
   1b83c:	str	r0, [r4]
   1b840:	beq	1b850 <read_boolean_unary_expression@@Base+0x850>
   1b844:	ldr	r6, [pc, #1444]	; 1bdf0 <read_boolean_unary_expression@@Base+0xdf0>
   1b848:	add	r6, pc, r6
   1b84c:	b	1b8ac <read_boolean_unary_expression@@Base+0x8ac>
   1b850:	mov	r0, #1
   1b854:	strb	r0, [r6]
   1b858:	ldr	r0, [pc, #1488]	; 1be30 <read_boolean_unary_expression@@Base+0xe30>
   1b85c:	mov	r1, #66	; 0x42
   1b860:	mov	r2, #420	; 0x1a4
   1b864:	ldr	r0, [pc, r0]
   1b868:	bl	11ecc <open64@plt>
   1b86c:	ldr	r6, [pc, #1472]	; 1be34 <read_boolean_unary_expression@@Base+0xe34>
   1b870:	cmn	r0, #1
   1b874:	str	r0, [r4]
   1b878:	add	r6, pc, r6
   1b87c:	bne	1b8ac <read_boolean_unary_expression@@Base+0x8ac>
   1b880:	ldr	r0, [pc, #1456]	; 1be38 <read_boolean_unary_expression@@Base+0xe38>
   1b884:	ldr	r0, [pc, r0]
   1b888:	bl	1e21c <__gcov_flush@@Base+0x1c8>
   1b88c:	ldr	r0, [pc, #1448]	; 1be3c <read_boolean_unary_expression@@Base+0xe3c>
   1b890:	mov	r1, #66	; 0x42
   1b894:	mov	r2, #420	; 0x1a4
   1b898:	ldr	r0, [pc, r0]
   1b89c:	bl	11ecc <open64@plt>
   1b8a0:	cmn	r0, #1
   1b8a4:	str	r0, [r4]
   1b8a8:	beq	1bd9c <read_boolean_unary_expression@@Base+0xd9c>
   1b8ac:	str	r9, [sp, #20]
   1b8b0:	str	r8, [sp, #24]
   1b8b4:	bl	1e2e0 <__gcov_flush@@Base+0x28c>
   1b8b8:	ldr	r0, [pc, #1332]	; 1bdf4 <read_boolean_unary_expression@@Base+0xdf4>
   1b8bc:	mov	r1, r6
   1b8c0:	ldr	r0, [pc, r0]
   1b8c4:	bl	11e30 <fdopen@plt>
   1b8c8:	ldr	r7, [pc, #1320]	; 1bdf8 <read_boolean_unary_expression@@Base+0xdf8>
   1b8cc:	ldr	r9, [pc, #1320]	; 1bdfc <read_boolean_unary_expression@@Base+0xdfc>
   1b8d0:	ldr	r1, [pc, #1320]	; 1be00 <read_boolean_unary_expression@@Base+0xe00>
   1b8d4:	ldr	sl, [pc, #1320]	; 1be04 <read_boolean_unary_expression@@Base+0xe04>
   1b8d8:	add	r7, pc, r7
   1b8dc:	add	r9, pc, r9
   1b8e0:	add	r1, pc, r1
   1b8e4:	add	sl, pc, sl
   1b8e8:	str	r5, [r7]
   1b8ec:	str	r5, [r7, #4]
   1b8f0:	str	r5, [r9]
   1b8f4:	str	r5, [r9, #4]
   1b8f8:	str	r0, [r1]
   1b8fc:	str	r5, [sl]
   1b900:	ldr	r6, [pc, #1280]	; 1be08 <read_boolean_unary_expression@@Base+0xe08>
   1b904:	mov	r4, #131072	; 0x20000
   1b908:	add	r6, pc, r6
   1b90c:	ldrb	r1, [r6]
   1b910:	cmp	r1, #0
   1b914:	beq	1ba08 <read_boolean_unary_expression@@Base+0xa08>
   1b918:	mov	r0, r4
   1b91c:	bl	11ee4 <malloc@plt>
   1b920:	mov	r8, r0
   1b924:	strd	r4, [r7]
   1b928:	str	r0, [sl]
   1b92c:	mov	r0, r8
   1b930:	mov	r1, #0
   1b934:	mov	r2, #131072	; 0x20000
   1b938:	bl	11f74 <memset@plt>
   1b93c:	ldr	r0, [r9, #4]
   1b940:	ldr	r1, [pc, #1284]	; 1be4c <read_boolean_unary_expression@@Base+0xe4c>
   1b944:	mov	r7, #7
   1b948:	orr	r7, r7, #131072	; 0x20000
   1b94c:	ldr	r1, [pc, r1]
   1b950:	ldr	sl, [pc, #1272]	; 1be50 <read_boolean_unary_expression@@Base+0xe50>
   1b954:	adds	r2, r1, #4
   1b958:	add	sl, pc, sl
   1b95c:	adc	r3, r0, #0
   1b960:	ldr	r5, [sl, #4]
   1b964:	ldr	r4, [pc, #1256]	; 1be54 <read_boolean_unary_expression@@Base+0xe54>
   1b968:	ldr	r4, [pc, r4]
   1b96c:	subs	r2, r4, r2
   1b970:	sbcs	r2, r5, r3
   1b974:	bcs	1ba88 <read_boolean_unary_expression@@Base+0xa88>
   1b978:	adds	r1, r7, r1
   1b97c:	adc	r0, r0, #0
   1b980:	subs	r1, r1, #4
   1b984:	sbc	r0, r0, #0
   1b988:	mvn	r2, #0
   1b98c:	and	r5, r0, r2
   1b990:	mov	r0, #16646144	; 0xfe0000
   1b994:	orr	r0, r0, #-16777216	; 0xff000000
   1b998:	and	r4, r1, r0
   1b99c:	mov	r0, r8
   1b9a0:	mov	r1, r4
   1b9a4:	bl	11eb4 <realloc@plt>
   1b9a8:	ldr	r1, [pc, #1068]	; 1bddc <read_boolean_unary_expression@@Base+0xddc>
   1b9ac:	strd	r4, [sl]
   1b9b0:	mov	r3, r0
   1b9b4:	mov	r7, r1
   1b9b8:	lsr	r2, r1, #24
   1b9bc:	ldr	r1, [pc, #1176]	; 1be5c <read_boolean_unary_expression@@Base+0xe5c>
   1b9c0:	ldrb	r6, [r6]
   1b9c4:	lsr	r4, r7, #16
   1b9c8:	add	r1, pc, r1
   1b9cc:	str	r0, [r1]
   1b9d0:	ldr	r1, [r9, #4]
   1b9d4:	ldr	r5, [pc, #1156]	; 1be60 <read_boolean_unary_expression@@Base+0xe60>
   1b9d8:	ldr	r5, [pc, r5]
   1b9dc:	strb	r7, [r3, r5]!
   1b9e0:	strb	r2, [r3, #3]
   1b9e4:	lsr	r2, r7, #8
   1b9e8:	strb	r2, [r3, #1]
   1b9ec:	adds	r2, r5, #4
   1b9f0:	adc	ip, r1, #0
   1b9f4:	cmp	r6, #1
   1b9f8:	strb	r4, [r3, #2]
   1b9fc:	stm	r9, {r2, ip}
   1ba00:	beq	1bacc <read_boolean_unary_expression@@Base+0xacc>
   1ba04:	b	1bc84 <read_boolean_unary_expression@@Base+0xc84>
   1ba08:	mov	r1, #0
   1ba0c:	mov	r2, #2
   1ba10:	mov	r8, #0
   1ba14:	bl	11fec <fseek@plt>
   1ba18:	ldr	r0, [pc, #1004]	; 1be0c <read_boolean_unary_expression@@Base+0xe0c>
   1ba1c:	ldr	r0, [pc, r0]
   1ba20:	bl	11e90 <ftell@plt>
   1ba24:	mov	r2, r0
   1ba28:	ldr	r0, [pc, #992]	; 1be10 <read_boolean_unary_expression@@Base+0xe10>
   1ba2c:	asr	r3, r2, #31
   1ba30:	add	r0, pc, r0
   1ba34:	cmp	r2, #0
   1ba38:	strd	r2, [r0]
   1ba3c:	beq	1bd2c <read_boolean_unary_expression@@Base+0xd2c>
   1ba40:	ldr	r0, [pc, #972]	; 1be14 <read_boolean_unary_expression@@Base+0xe14>
   1ba44:	mov	r1, r2
   1ba48:	mov	r2, #3
   1ba4c:	mov	r3, #1
   1ba50:	ldr	r0, [pc, r0]
   1ba54:	str	r8, [sp, #8]
   1ba58:	str	r8, [sp, #12]
   1ba5c:	str	r0, [sp]
   1ba60:	mov	r0, #0
   1ba64:	bl	11e84 <mmap64@plt>
   1ba68:	cmn	r0, #1
   1ba6c:	str	r0, [sl]
   1ba70:	beq	1bcf4 <read_boolean_unary_expression@@Base+0xcf4>
   1ba74:	ldrb	r1, [r6]
   1ba78:	cmp	r1, #0
   1ba7c:	beq	1bc44 <read_boolean_unary_expression@@Base+0xc44>
   1ba80:	mov	r8, r0
   1ba84:	b	1b93c <read_boolean_unary_expression@@Base+0x93c>
   1ba88:	ldr	r1, [r9, #4]
   1ba8c:	ldr	r5, [pc, #964]	; 1be58 <read_boolean_unary_expression@@Base+0xe58>
   1ba90:	ldr	r0, [pc, #836]	; 1bddc <read_boolean_unary_expression@@Base+0xddc>
   1ba94:	mov	r6, r8
   1ba98:	ldr	r5, [pc, r5]
   1ba9c:	mov	r7, r0
   1baa0:	lsr	r2, r7, #16
   1baa4:	strb	r7, [r6, r5]!
   1baa8:	lsr	r0, r0, #24
   1baac:	lsr	r3, r7, #8
   1bab0:	strb	r2, [r6, #2]
   1bab4:	adds	r2, r5, #4
   1bab8:	strb	r0, [r6, #3]
   1babc:	strb	r3, [r6, #1]
   1bac0:	adc	ip, r1, #0
   1bac4:	stm	r9, {r2, ip}
   1bac8:	mov	r0, r8
   1bacc:	ldr	r7, [sl, #4]
   1bad0:	ldr	r3, [pc, #908]	; 1be64 <read_boolean_unary_expression@@Base+0xe64>
   1bad4:	adds	r6, r5, #8
   1bad8:	adc	r4, r1, #0
   1badc:	ldr	r3, [pc, r3]
   1bae0:	subs	r3, r3, r6
   1bae4:	sbcs	r3, r7, r4
   1bae8:	bcs	1bb8c <read_boolean_unary_expression@@Base+0xb8c>
   1baec:	mov	r2, #7
   1baf0:	orr	r2, r2, #131072	; 0x20000
   1baf4:	adds	r2, r5, r2
   1baf8:	adc	r1, r1, #0
   1bafc:	mvn	r3, #0
   1bb00:	and	r5, r1, r3
   1bb04:	mov	r1, #16646144	; 0xfe0000
   1bb08:	orr	r1, r1, #-16777216	; 0xff000000
   1bb0c:	and	r4, r2, r1
   1bb10:	mov	r1, r4
   1bb14:	bl	11eb4 <realloc@plt>
   1bb18:	strd	r4, [sl]
   1bb1c:	ldr	r1, [pc, #840]	; 1be6c <read_boolean_unary_expression@@Base+0xe6c>
   1bb20:	mov	r4, r0
   1bb24:	mov	lr, r9
   1bb28:	add	r1, pc, r1
   1bb2c:	str	r0, [r1]
   1bb30:	ldr	r1, [pc, #824]	; 1be70 <read_boolean_unary_expression@@Base+0xe70>
   1bb34:	ldr	r2, [sp, #20]
   1bb38:	ldr	ip, [r9, #4]
   1bb3c:	add	r1, pc, r1
   1bb40:	ldrb	r3, [r1]
   1bb44:	ldrb	r1, [r2]
   1bb48:	ldrb	r7, [r2, #1]
   1bb4c:	ldrb	r6, [r2, #2]
   1bb50:	ldrb	r5, [r2, #3]
   1bb54:	ldr	r2, [pc, #792]	; 1be74 <read_boolean_unary_expression@@Base+0xe74>
   1bb58:	ldr	r2, [pc, r2]
   1bb5c:	strb	r1, [r4, r2]!
   1bb60:	strb	r5, [r4, #3]
   1bb64:	ldr	r5, [sp, #24]
   1bb68:	strb	r6, [r4, #2]
   1bb6c:	adds	r6, r2, #4
   1bb70:	adc	r1, ip, #0
   1bb74:	cmp	r3, #1
   1bb78:	str	r6, [lr]
   1bb7c:	strb	r7, [r4, #1]
   1bb80:	str	r1, [lr, #4]
   1bb84:	beq	1bbcc <read_boolean_unary_expression@@Base+0xbcc>
   1bb88:	b	1bcc4 <read_boolean_unary_expression@@Base+0xcc4>
   1bb8c:	ldr	r6, [sp, #20]
   1bb90:	mov	r5, r0
   1bb94:	ldrb	r1, [r6]
   1bb98:	ldrb	r3, [r6, #1]
   1bb9c:	ldrb	r7, [r6, #2]
   1bba0:	ldrb	r6, [r6, #3]
   1bba4:	strb	r1, [r5, r2]!
   1bba8:	strb	r6, [r5, #3]
   1bbac:	strb	r3, [r5, #1]
   1bbb0:	adds	r6, r2, #4
   1bbb4:	mov	r3, r9
   1bbb8:	adc	r1, ip, #0
   1bbbc:	strb	r7, [r5, #2]
   1bbc0:	str	r6, [r3]
   1bbc4:	str	r1, [r3, #4]
   1bbc8:	ldr	r5, [sp, #24]
   1bbcc:	ldr	r7, [sl, #4]
   1bbd0:	ldr	r4, [pc, #672]	; 1be78 <read_boolean_unary_expression@@Base+0xe78>
   1bbd4:	adds	r3, r2, #8
   1bbd8:	adc	lr, ip, #0
   1bbdc:	ldr	r4, [pc, r4]
   1bbe0:	subs	r3, r4, r3
   1bbe4:	sbcs	r3, r7, lr
   1bbe8:	bcs	1bc3c <read_boolean_unary_expression@@Base+0xc3c>
   1bbec:	mov	r1, #7
   1bbf0:	orr	r1, r1, #131072	; 0x20000
   1bbf4:	adds	r1, r2, r1
   1bbf8:	adc	r2, ip, #0
   1bbfc:	mvn	r3, #0
   1bc00:	and	r7, r2, r3
   1bc04:	mov	r2, #16646144	; 0xfe0000
   1bc08:	orr	r2, r2, #-16777216	; 0xff000000
   1bc0c:	and	r4, r1, r2
   1bc10:	mov	r1, r4
   1bc14:	bl	11eb4 <realloc@plt>
   1bc18:	stm	sl, {r4, r7}
   1bc1c:	ldr	r1, [r9, #4]
   1bc20:	ldr	r2, [pc, #596]	; 1be7c <read_boolean_unary_expression@@Base+0xe7c>
   1bc24:	mov	lr, r9
   1bc28:	add	r2, pc, r2
   1bc2c:	str	r0, [r2]
   1bc30:	ldr	r6, [pc, #584]	; 1be80 <read_boolean_unary_expression@@Base+0xe80>
   1bc34:	ldr	r6, [pc, r6]
   1bc38:	b	1bcc4 <read_boolean_unary_expression@@Base+0xcc4>
   1bc3c:	mov	lr, r9
   1bc40:	b	1bcc4 <read_boolean_unary_expression@@Base+0xcc4>
   1bc44:	ldr	r6, [r9, #4]
   1bc48:	ldr	r5, [pc, #536]	; 1be68 <read_boolean_unary_expression@@Base+0xe68>
   1bc4c:	ldr	r1, [pc, #392]	; 1bddc <read_boolean_unary_expression@@Base+0xddc>
   1bc50:	mov	r4, r0
   1bc54:	ldr	r5, [pc, r5]
   1bc58:	mov	r7, r1
   1bc5c:	lsr	r2, r7, #16
   1bc60:	strb	r7, [r4, r5]!
   1bc64:	lsr	r1, r1, #24
   1bc68:	strb	r2, [r4, #2]
   1bc6c:	adds	r2, r5, #4
   1bc70:	lsr	r3, r7, #8
   1bc74:	adc	ip, r6, #0
   1bc78:	strb	r1, [r4, #3]
   1bc7c:	strb	r3, [r4, #1]
   1bc80:	stm	r9, {r2, ip}
   1bc84:	ldr	r4, [sp, #20]
   1bc88:	mov	r5, r0
   1bc8c:	mov	lr, r9
   1bc90:	ldrb	r1, [r4]
   1bc94:	ldrb	r6, [r4, #3]
   1bc98:	ldrb	r3, [r4, #1]
   1bc9c:	ldrb	r7, [r4, #2]
   1bca0:	strb	r1, [r5, r2]!
   1bca4:	strb	r6, [r5, #3]
   1bca8:	adds	r6, r2, #4
   1bcac:	adc	r1, ip, #0
   1bcb0:	strb	r7, [r5, #2]
   1bcb4:	strb	r3, [r5, #1]
   1bcb8:	str	r6, [lr]
   1bcbc:	str	r1, [lr, #4]
   1bcc0:	ldr	r5, [sp, #24]
   1bcc4:	lsr	r2, r5, #24
   1bcc8:	strb	r5, [r0, r6]!
   1bccc:	lsr	r3, r5, #16
   1bcd0:	lsr	r7, r5, #8
   1bcd4:	strb	r2, [r0, #3]
   1bcd8:	strb	r3, [r0, #2]
   1bcdc:	strb	r7, [r0, #1]
   1bce0:	adds	r0, r6, #4
   1bce4:	adc	r1, r1, #0
   1bce8:	strd	r0, [lr]
   1bcec:	sub	sp, fp, #28
   1bcf0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bcf4:	bl	11f50 <__errno_location@plt>
   1bcf8:	ldr	r1, [pc, #280]	; 1be18 <read_boolean_unary_expression@@Base+0xe18>
   1bcfc:	ldr	r1, [pc, r1]
   1bd00:	ldr	r0, [r0]
   1bd04:	ldr	r4, [r1]
   1bd08:	ldr	r5, [pc, #268]	; 1be1c <read_boolean_unary_expression@@Base+0xe1c>
   1bd0c:	ldr	r5, [pc, r5]
   1bd10:	bl	11efc <strerror@plt>
   1bd14:	ldr	r1, [pc, #260]	; 1be20 <read_boolean_unary_expression@@Base+0xe20>
   1bd18:	mov	r3, r0
   1bd1c:	mov	r0, r4
   1bd20:	add	r1, pc, r1
   1bd24:	mov	r2, r5
   1bd28:	bl	11f44 <fprintf@plt>
   1bd2c:	ldr	r0, [pc, #240]	; 1be24 <read_boolean_unary_expression@@Base+0xe24>
   1bd30:	str	r8, [sl]
   1bd34:	mov	r2, #16646144	; 0xfe0000
   1bd38:	add	r0, pc, r0
   1bd3c:	orr	r2, r2, #-16777216	; 0xff000000
   1bd40:	str	r8, [r0]
   1bd44:	str	r8, [r0, #4]
   1bd48:	mov	r0, #1
   1bd4c:	strb	r0, [r6]
   1bd50:	ldr	r0, [r9, #4]
   1bd54:	ldr	r1, [pc, #204]	; 1be28 <read_boolean_unary_expression@@Base+0xe28>
   1bd58:	mvn	r3, #0
   1bd5c:	eor	r3, r0, r3
   1bd60:	ldr	r1, [pc, r1]
   1bd64:	eor	r2, r1, r2
   1bd68:	orrs	r2, r2, r3
   1bd6c:	beq	1b92c <read_boolean_unary_expression@@Base+0x92c>
   1bd70:	ldr	r2, [pc, #104]	; 1bde0 <read_boolean_unary_expression@@Base+0xde0>
   1bd74:	ldr	r7, [pc, #176]	; 1be2c <read_boolean_unary_expression@@Base+0xe2c>
   1bd78:	adds	r1, r1, r2
   1bd7c:	mov	r2, #16646144	; 0xfe0000
   1bd80:	orr	r2, r2, #-16777216	; 0xff000000
   1bd84:	and	r4, r1, r2
   1bd88:	adc	r0, r0, #0
   1bd8c:	mvn	r1, #0
   1bd90:	and	r5, r0, r1
   1bd94:	add	r7, pc, r7
   1bd98:	b	1b918 <read_boolean_unary_expression@@Base+0x918>
   1bd9c:	bl	11f50 <__errno_location@plt>
   1bda0:	ldr	r1, [pc, #152]	; 1be40 <read_boolean_unary_expression@@Base+0xe40>
   1bda4:	ldr	r1, [pc, r1]
   1bda8:	ldr	r0, [r0]
   1bdac:	ldr	r4, [r1]
   1bdb0:	ldr	r5, [pc, #140]	; 1be44 <read_boolean_unary_expression@@Base+0xe44>
   1bdb4:	ldr	r5, [pc, r5]
   1bdb8:	bl	11efc <strerror@plt>
   1bdbc:	ldr	r1, [pc, #132]	; 1be48 <read_boolean_unary_expression@@Base+0xe48>
   1bdc0:	mov	r3, r0
   1bdc4:	mov	r0, r4
   1bdc8:	add	r1, pc, r1
   1bdcc:	mov	r2, r5
   1bdd0:	bl	11f44 <fprintf@plt>
   1bdd4:	sub	sp, fp, #28
   1bdd8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bddc:	strbvs	r6, [r3, -r1, ror #8]!
   1bde0:	strdeq	pc, [r3], -pc	; <UNPREDICTABLE>
   1bde4:	andeq	r6, r1, ip, lsr #14
   1bde8:	andeq	r6, r1, ip, lsr #14
   1bdec:	andeq	r5, r1, r4, lsr #17
   1bdf0:	andeq	r3, r0, fp, lsl ip
   1bdf4:	andeq	r5, r1, ip, lsl r8
   1bdf8:	andeq	r6, r1, r8, ror r6
   1bdfc:	andeq	r6, r1, ip, ror r6
   1be00:	andeq	r6, r1, r8, ror #12
   1be04:	andeq	r6, r1, r8, ror #12
   1be08:	andeq	r6, r1, ip, lsr r6
   1be0c:	andeq	r6, r1, ip, lsr #10
   1be10:	andeq	r6, r1, r0, asr #10
   1be14:	andeq	r5, r1, ip, lsl #13
   1be18:			; <UNDEFINED> instruction: 0x000153bc
   1be1c:	andeq	r6, r1, r4, lsr r2
   1be20:	andeq	r3, r0, r5, lsr #17
   1be24:	andeq	r6, r1, r8, lsl r2
   1be28:	strdeq	r6, [r1], -r8
   1be2c:			; <UNDEFINED> instruction: 0x000161bc
   1be30:	ldrdeq	r6, [r1], -ip
   1be34:	andeq	r3, r0, pc, ror #23
   1be38:			; <UNDEFINED> instruction: 0x000166bc
   1be3c:	andeq	r6, r1, r8, lsr #13
   1be40:	andeq	r5, r1, r4, lsl r3
   1be44:	andeq	r6, r1, ip, lsl #3
   1be48:	andeq	r3, r0, r3, lsr #13
   1be4c:	andeq	r6, r1, ip, lsl #12
   1be50:	strdeq	r6, [r1], -r8
   1be54:	andeq	r6, r1, r8, ror #11
   1be58:	andeq	r6, r1, r0, asr #9
   1be5c:	andeq	r6, r1, r4, lsl #11
   1be60:	andeq	r6, r1, r0, lsl #11
   1be64:	andeq	r6, r1, r4, ror r4
   1be68:	andeq	r6, r1, r4, lsl #6
   1be6c:	andeq	r6, r1, r4, lsr #8
   1be70:	andeq	r6, r1, r8, lsl #8
   1be74:	andeq	r6, r1, r0, lsl #8
   1be78:	andeq	r6, r1, r4, ror r3
   1be7c:	andeq	r6, r1, r4, lsr #6
   1be80:	andeq	r6, r1, r4, lsr #6
   1be84:	ldr	r0, [r0]
   1be88:	cmn	r0, #1
   1be8c:	beq	1beac <read_boolean_unary_expression@@Base+0xeac>
   1be90:	ldr	r0, [r1, r0, lsl #2]
   1be94:	cmp	r0, #0
   1be98:	bxeq	lr
   1be9c:	ldrd	r2, [r0]
   1bea0:	adds	r2, r2, #1
   1bea4:	adc	r3, r3, #0
   1bea8:	strd	r2, [r0]
   1beac:	bx	lr
   1beb0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1beb4:	add	fp, sp, #28
   1beb8:	sub	sp, sp, #12
   1bebc:	ldr	r7, [pc, #2008]	; 1c69c <read_boolean_unary_expression@@Base+0x169c>
   1bec0:	mov	sl, #2
   1bec4:	cmp	r3, #0
   1bec8:	movne	sl, #3
   1becc:	ldr	r7, [pc, r7]
   1bed0:	cmp	r7, #0
   1bed4:	beq	1c694 <read_boolean_unary_expression@@Base+0x1694>
   1bed8:	stm	sp, {r0, r2, r3}
   1bedc:	ldr	r0, [pc, #1980]	; 1c6a0 <read_boolean_unary_expression@@Base+0x16a0>
   1bee0:	mov	r5, r1
   1bee4:	add	r0, pc, r0
   1bee8:	ldrb	r0, [r0]
   1beec:	ldr	r8, [pc, #1968]	; 1c6a4 <read_boolean_unary_expression@@Base+0x16a4>
   1bef0:	cmp	r0, #1
   1bef4:	add	r8, pc, r8
   1bef8:	bne	1bf7c <read_boolean_unary_expression@@Base+0xf7c>
   1befc:	ldr	r4, [pc, #1956]	; 1c6a8 <read_boolean_unary_expression@@Base+0x16a8>
   1bf00:	ldr	r0, [r8, #4]
   1bf04:	ldr	r1, [pc, #1952]	; 1c6ac <read_boolean_unary_expression@@Base+0x16ac>
   1bf08:	add	r4, pc, r4
   1bf0c:	ldr	r1, [pc, r1]
   1bf10:	ldr	r7, [r4, #4]
   1bf14:	ldr	r6, [pc, #1940]	; 1c6b0 <read_boolean_unary_expression@@Base+0x16b0>
   1bf18:	adds	r2, r1, #4
   1bf1c:	adc	r3, r0, #0
   1bf20:	ldr	r6, [pc, r6]
   1bf24:	subs	r2, r6, r2
   1bf28:	sbcs	r2, r7, r3
   1bf2c:	bcs	1bf7c <read_boolean_unary_expression@@Base+0xf7c>
   1bf30:	mov	r2, #7
   1bf34:	orr	r2, r2, #131072	; 0x20000
   1bf38:	adds	r1, r2, r1
   1bf3c:	adc	r0, r0, #0
   1bf40:	subs	r1, r1, #4
   1bf44:	sbc	r0, r0, #0
   1bf48:	mvn	r2, #0
   1bf4c:	and	r7, r0, r2
   1bf50:	mov	r0, #16646144	; 0xfe0000
   1bf54:	orr	r0, r0, #-16777216	; 0xff000000
   1bf58:	ldr	r9, [pc, #1876]	; 1c6b4 <read_boolean_unary_expression@@Base+0x16b4>
   1bf5c:	and	r6, r1, r0
   1bf60:	ldr	r0, [pc, #1872]	; 1c6b8 <read_boolean_unary_expression@@Base+0x16b8>
   1bf64:	mov	r1, r6
   1bf68:	add	r9, pc, r9
   1bf6c:	ldr	r0, [pc, r0]
   1bf70:	bl	11eb4 <realloc@plt>
   1bf74:	strd	r6, [r4]
   1bf78:	str	r0, [r9]
   1bf7c:	ldr	r7, [pc, #1848]	; 1c6bc <read_boolean_unary_expression@@Base+0x16bc>
   1bf80:	mov	r0, #0
   1bf84:	mov	r2, #1
   1bf88:	ldr	r7, [pc, r7]
   1bf8c:	ldr	ip, [pc, #1836]	; 1c6c0 <read_boolean_unary_expression@@Base+0x16c0>
   1bf90:	adds	r4, r7, #4
   1bf94:	ldr	ip, [pc, ip]
   1bf98:	ldr	r6, [r8, #4]
   1bf9c:	mov	r1, ip
   1bfa0:	adc	r9, r6, #0
   1bfa4:	strb	r0, [r1, r7]!
   1bfa8:	cmp	r5, #0
   1bfac:	strb	r2, [r1, #3]
   1bfb0:	strb	r0, [r1, #2]
   1bfb4:	strb	r0, [r1, #1]
   1bfb8:	stm	r8, {r4, r9}
   1bfbc:	mov	r8, r5
   1bfc0:	beq	1bfdc <read_boolean_unary_expression@@Base+0xfdc>
   1bfc4:	mov	r0, r8
   1bfc8:	mov	r5, ip
   1bfcc:	bl	11f2c <strlen@plt>
   1bfd0:	add	r0, sl, r0, lsr #2
   1bfd4:	mov	ip, r5
   1bfd8:	add	sl, r0, #2
   1bfdc:	ldr	r0, [pc, #1760]	; 1c6c4 <read_boolean_unary_expression@@Base+0x16c4>
   1bfe0:	add	r0, pc, r0
   1bfe4:	ldrb	r0, [r0]
   1bfe8:	cmp	r0, #0
   1bfec:	beq	1c0c8 <read_boolean_unary_expression@@Base+0x10c8>
   1bff0:	ldr	lr, [pc, #1748]	; 1c6cc <read_boolean_unary_expression@@Base+0x16cc>
   1bff4:	adds	r0, r7, #8
   1bff8:	adc	r1, r6, #0
   1bffc:	add	lr, pc, lr
   1c000:	ldr	r2, [lr, #4]
   1c004:	ldr	r3, [pc, #1732]	; 1c6d0 <read_boolean_unary_expression@@Base+0x16d0>
   1c008:	ldr	r3, [pc, r3]
   1c00c:	subs	r0, r3, r0
   1c010:	sbcs	r0, r2, r1
   1c014:	bcs	1c134 <read_boolean_unary_expression@@Base+0x1134>
   1c018:	mov	r0, #7
   1c01c:	orr	r0, r0, #131072	; 0x20000
   1c020:	adds	r0, r7, r0
   1c024:	adc	r1, r6, #0
   1c028:	mvn	r2, #0
   1c02c:	and	r5, r1, r2
   1c030:	mov	r1, #16646144	; 0xfe0000
   1c034:	orr	r1, r1, #-16777216	; 0xff000000
   1c038:	and	r6, r0, r1
   1c03c:	ldr	r4, [pc, #1684]	; 1c6d8 <read_boolean_unary_expression@@Base+0x16d8>
   1c040:	mov	r0, ip
   1c044:	mov	r1, r6
   1c048:	add	r4, pc, r4
   1c04c:	mov	r7, lr
   1c050:	bl	11eb4 <realloc@plt>
   1c054:	mov	lr, r7
   1c058:	mov	ip, r0
   1c05c:	str	r6, [lr]
   1c060:	str	r5, [lr, #4]
   1c064:	str	ip, [r4]
   1c068:	ldr	r1, [pc, #1644]	; 1c6dc <read_boolean_unary_expression@@Base+0x16dc>
   1c06c:	lsr	r0, sl, #24
   1c070:	add	r1, pc, r1
   1c074:	lsr	r3, sl, #16
   1c078:	ldrb	r2, [r1]
   1c07c:	ldr	r1, [pc, #1628]	; 1c6e0 <read_boolean_unary_expression@@Base+0x16e0>
   1c080:	add	r1, pc, r1
   1c084:	mov	r7, r1
   1c088:	ldr	r9, [r1, #4]
   1c08c:	ldr	r4, [pc, #1616]	; 1c6e4 <read_boolean_unary_expression@@Base+0x16e4>
   1c090:	mov	r1, ip
   1c094:	ldr	r4, [pc, r4]
   1c098:	strb	sl, [r1, r4]!
   1c09c:	strb	r0, [r1, #3]
   1c0a0:	lsr	r0, sl, #8
   1c0a4:	strb	r0, [r1, #1]
   1c0a8:	adds	r0, r4, #4
   1c0ac:	strb	r3, [r1, #2]
   1c0b0:	adc	r1, r9, #0
   1c0b4:	mov	sl, r7
   1c0b8:	cmp	r2, #1
   1c0bc:	strd	r0, [sl]
   1c0c0:	bne	1c0fc <read_boolean_unary_expression@@Base+0x10fc>
   1c0c4:	b	1c168 <read_boolean_unary_expression@@Base+0x1168>
   1c0c8:	mov	r3, ip
   1c0cc:	lsr	r0, sl, #24
   1c0d0:	strb	sl, [r3, r4]!
   1c0d4:	lsr	r1, sl, #16
   1c0d8:	lsr	r2, sl, #8
   1c0dc:	strb	r0, [r3, #3]
   1c0e0:	strb	r1, [r3, #2]
   1c0e4:	strb	r2, [r3, #1]
   1c0e8:	ldr	sl, [pc, #1496]	; 1c6c8 <read_boolean_unary_expression@@Base+0x16c8>
   1c0ec:	adds	r0, r7, #8
   1c0f0:	adc	r1, r6, #0
   1c0f4:	add	sl, pc, sl
   1c0f8:	strd	r0, [sl]
   1c0fc:	ldr	r5, [sp]
   1c100:	mov	r6, ip
   1c104:	lsr	r2, r5, #24
   1c108:	strb	r5, [r6, r0]!
   1c10c:	lsr	r3, r5, #16
   1c110:	lsr	r7, r5, #8
   1c114:	strb	r2, [r6, #3]
   1c118:	strb	r3, [r6, #2]
   1c11c:	strb	r7, [r6, #1]
   1c120:	adds	r2, r0, #4
   1c124:	adc	r3, r1, #0
   1c128:	ldmib	sp, {r5, r9}
   1c12c:	strd	r2, [sl]
   1c130:	b	1c2dc <read_boolean_unary_expression@@Base+0x12dc>
   1c134:	mov	r3, ip
   1c138:	lsr	r0, sl, #24
   1c13c:	strb	sl, [r3, r4]!
   1c140:	lsr	r1, sl, #16
   1c144:	lsr	r2, sl, #8
   1c148:	strb	r0, [r3, #3]
   1c14c:	strb	r1, [r3, #2]
   1c150:	strb	r2, [r3, #1]
   1c154:	ldr	sl, [pc, #1400]	; 1c6d4 <read_boolean_unary_expression@@Base+0x16d4>
   1c158:	adds	r0, r7, #8
   1c15c:	adc	r1, r6, #0
   1c160:	add	sl, pc, sl
   1c164:	strd	r0, [sl]
   1c168:	ldr	r7, [lr, #4]
   1c16c:	ldr	r6, [pc, #1396]	; 1c6e8 <read_boolean_unary_expression@@Base+0x16e8>
   1c170:	adds	r2, r4, #8
   1c174:	adc	r3, r9, #0
   1c178:	ldr	r6, [pc, r6]
   1c17c:	subs	r2, r6, r2
   1c180:	sbcs	r2, r7, r3
   1c184:	bcs	1c22c <read_boolean_unary_expression@@Base+0x122c>
   1c188:	mov	r0, #7
   1c18c:	orr	r0, r0, #131072	; 0x20000
   1c190:	adds	r0, r4, r0
   1c194:	adc	r1, r9, #0
   1c198:	mvn	r2, #0
   1c19c:	and	r5, r1, r2
   1c1a0:	mov	r1, #16646144	; 0xfe0000
   1c1a4:	orr	r1, r1, #-16777216	; 0xff000000
   1c1a8:	and	r4, r0, r1
   1c1ac:	ldr	r7, [pc, #1336]	; 1c6ec <read_boolean_unary_expression@@Base+0x16ec>
   1c1b0:	mov	r0, ip
   1c1b4:	mov	r1, r4
   1c1b8:	add	r7, pc, r7
   1c1bc:	mov	r6, lr
   1c1c0:	bl	11eb4 <realloc@plt>
   1c1c4:	mov	lr, r6
   1c1c8:	str	r0, [r7]
   1c1cc:	strd	r4, [lr]
   1c1d0:	mov	ip, r0
   1c1d4:	ldr	r6, [sp]
   1c1d8:	ldr	r0, [pc, #1296]	; 1c6f0 <read_boolean_unary_expression@@Base+0x16f0>
   1c1dc:	ldr	r1, [sl, #4]
   1c1e0:	mov	r3, ip
   1c1e4:	add	r0, pc, r0
   1c1e8:	lsr	r2, r6, #24
   1c1ec:	ldrb	r7, [r0]
   1c1f0:	ldr	r0, [pc, #1276]	; 1c6f4 <read_boolean_unary_expression@@Base+0x16f4>
   1c1f4:	ldr	r0, [pc, r0]
   1c1f8:	strb	r6, [r3, r0]!
   1c1fc:	ldmib	sp, {r5, r9}
   1c200:	strb	r2, [r3, #3]
   1c204:	lsr	r2, r6, #8
   1c208:	lsr	r6, r6, #16
   1c20c:	strb	r2, [r3, #1]
   1c210:	adds	r2, r0, #4
   1c214:	strb	r6, [r3, #2]
   1c218:	adc	r3, r1, #0
   1c21c:	cmp	r7, #1
   1c220:	strd	r2, [sl]
   1c224:	beq	1c260 <read_boolean_unary_expression@@Base+0x1260>
   1c228:	b	1c2dc <read_boolean_unary_expression@@Base+0x12dc>
   1c22c:	ldr	r5, [sp]
   1c230:	mov	r6, ip
   1c234:	lsr	r2, r5, #24
   1c238:	strb	r5, [r6, r0]!
   1c23c:	lsr	r3, r5, #16
   1c240:	lsr	r7, r5, #8
   1c244:	strb	r2, [r6, #3]
   1c248:	strb	r3, [r6, #2]
   1c24c:	strb	r7, [r6, #1]
   1c250:	adds	r2, r0, #4
   1c254:	adc	r3, r1, #0
   1c258:	ldmib	sp, {r5, r9}
   1c25c:	strd	r2, [sl]
   1c260:	str	r8, [sp, #8]
   1c264:	mov	r8, lr
   1c268:	adds	r7, r0, #8
   1c26c:	ldr	r6, [r8, #4]
   1c270:	ldr	r4, [pc, #1152]	; 1c6f8 <read_boolean_unary_expression@@Base+0x16f8>
   1c274:	adc	lr, r1, #0
   1c278:	ldr	r4, [pc, r4]
   1c27c:	subs	r7, r4, r7
   1c280:	sbcs	r7, r6, lr
   1c284:	bcs	1c2d8 <read_boolean_unary_expression@@Base+0x12d8>
   1c288:	mov	r2, #7
   1c28c:	orr	r2, r2, #131072	; 0x20000
   1c290:	adds	r0, r0, r2
   1c294:	adc	r1, r1, #0
   1c298:	mvn	r2, #0
   1c29c:	and	r7, r1, r2
   1c2a0:	mov	r1, #16646144	; 0xfe0000
   1c2a4:	orr	r1, r1, #-16777216	; 0xff000000
   1c2a8:	and	r6, r0, r1
   1c2ac:	ldr	r4, [pc, #1096]	; 1c6fc <read_boolean_unary_expression@@Base+0x16fc>
   1c2b0:	mov	r0, ip
   1c2b4:	mov	r1, r6
   1c2b8:	add	r4, pc, r4
   1c2bc:	bl	11eb4 <realloc@plt>
   1c2c0:	strd	r6, [r8]
   1c2c4:	str	r0, [r4]
   1c2c8:	ldr	r3, [sl, #4]
   1c2cc:	ldr	r2, [pc, #1068]	; 1c700 <read_boolean_unary_expression@@Base+0x1700>
   1c2d0:	mov	ip, r0
   1c2d4:	ldr	r2, [pc, r2]
   1c2d8:	ldr	r8, [sp, #8]
   1c2dc:	mov	r6, ip
   1c2e0:	lsr	r7, r5, #8
   1c2e4:	strb	r5, [r6, r2]!
   1c2e8:	adds	r4, r2, #4
   1c2ec:	lsr	r0, r5, #24
   1c2f0:	lsr	r1, r5, #16
   1c2f4:	strb	r7, [r6, #1]
   1c2f8:	adc	r7, r3, #0
   1c2fc:	cmp	r9, #0
   1c300:	strb	r0, [r6, #3]
   1c304:	strb	r1, [r6, #2]
   1c308:	stm	sl, {r4, r7}
   1c30c:	beq	1c3e0 <read_boolean_unary_expression@@Base+0x13e0>
   1c310:	ldr	r0, [pc, #1004]	; 1c704 <read_boolean_unary_expression@@Base+0x1704>
   1c314:	ldr	sl, [fp, #8]
   1c318:	add	r0, pc, r0
   1c31c:	ldrb	r0, [r0]
   1c320:	cmp	r0, #1
   1c324:	bne	1c3ac <read_boolean_unary_expression@@Base+0x13ac>
   1c328:	ldr	r9, [pc, #984]	; 1c708 <read_boolean_unary_expression@@Base+0x1708>
   1c32c:	adds	r0, r2, #8
   1c330:	adc	r1, r3, #0
   1c334:	add	r9, pc, r9
   1c338:	ldr	r6, [r9, #4]
   1c33c:	ldr	r5, [pc, #968]	; 1c70c <read_boolean_unary_expression@@Base+0x170c>
   1c340:	ldr	r5, [pc, r5]
   1c344:	subs	r0, r5, r0
   1c348:	sbcs	r0, r6, r1
   1c34c:	bcs	1c3ac <read_boolean_unary_expression@@Base+0x13ac>
   1c350:	mov	r0, #7
   1c354:	orr	r0, r0, #131072	; 0x20000
   1c358:	adds	r0, r2, r0
   1c35c:	adc	r1, r3, #0
   1c360:	mvn	r2, #0
   1c364:	and	r5, r1, r2
   1c368:	mov	r1, #16646144	; 0xfe0000
   1c36c:	orr	r1, r1, #-16777216	; 0xff000000
   1c370:	and	r6, r0, r1
   1c374:	ldr	r4, [pc, #916]	; 1c710 <read_boolean_unary_expression@@Base+0x1710>
   1c378:	mov	r0, ip
   1c37c:	mov	r1, r6
   1c380:	add	r4, pc, r4
   1c384:	bl	11eb4 <realloc@plt>
   1c388:	str	r6, [r9]
   1c38c:	str	r5, [r9, #4]
   1c390:	mov	ip, r0
   1c394:	ldr	r0, [pc, #888]	; 1c714 <read_boolean_unary_expression@@Base+0x1714>
   1c398:	str	ip, [r4]
   1c39c:	add	r0, pc, r0
   1c3a0:	ldr	r7, [r0, #4]
   1c3a4:	ldr	r4, [pc, #876]	; 1c718 <read_boolean_unary_expression@@Base+0x1718>
   1c3a8:	ldr	r4, [pc, r4]
   1c3ac:	mov	r3, ip
   1c3b0:	lsr	r0, sl, #24
   1c3b4:	strb	sl, [r3, r4]!
   1c3b8:	lsr	r1, sl, #16
   1c3bc:	lsr	r2, sl, #8
   1c3c0:	strb	r0, [r3, #3]
   1c3c4:	strb	r1, [r3, #2]
   1c3c8:	strb	r2, [r3, #1]
   1c3cc:	ldr	sl, [pc, #840]	; 1c71c <read_boolean_unary_expression@@Base+0x171c>
   1c3d0:	adds	r4, r4, #4
   1c3d4:	adc	r7, r7, #0
   1c3d8:	add	sl, pc, sl
   1c3dc:	stm	sl, {r4, r7}
   1c3e0:	cmp	r8, #0
   1c3e4:	beq	1c694 <read_boolean_unary_expression@@Base+0x1694>
   1c3e8:	mov	r0, r8
   1c3ec:	mov	r9, ip
   1c3f0:	bl	11f2c <strlen@plt>
   1c3f4:	mov	r6, #1
   1c3f8:	add	r5, r6, r0, lsr #2
   1c3fc:	ldr	r0, [pc, #796]	; 1c720 <read_boolean_unary_expression@@Base+0x1720>
   1c400:	add	r0, pc, r0
   1c404:	ldrb	r0, [r0]
   1c408:	cmp	r0, #1
   1c40c:	bne	1c4b0 <read_boolean_unary_expression@@Base+0x14b0>
   1c410:	ldr	sl, [pc, #780]	; 1c724 <read_boolean_unary_expression@@Base+0x1724>
   1c414:	adds	r0, r4, #4
   1c418:	adc	r1, r7, #0
   1c41c:	add	sl, pc, sl
   1c420:	ldr	r2, [sl, #4]
   1c424:	ldr	r3, [pc, #764]	; 1c728 <read_boolean_unary_expression@@Base+0x1728>
   1c428:	ldr	r3, [pc, r3]
   1c42c:	subs	r0, r3, r0
   1c430:	sbcs	r0, r2, r1
   1c434:	bcs	1c4c4 <read_boolean_unary_expression@@Base+0x14c4>
   1c438:	mov	r0, #0
   1c43c:	str	r0, [sp, #8]
   1c440:	mov	r0, #7
   1c444:	orr	r0, r0, #131072	; 0x20000
   1c448:	adds	r0, r0, r4
   1c44c:	adc	r1, r7, #0
   1c450:	subs	r0, r0, #4
   1c454:	sbc	r1, r1, #0
   1c458:	mvn	r2, #0
   1c45c:	and	r7, r1, r2
   1c460:	mov	r1, #16646144	; 0xfe0000
   1c464:	orr	r1, r1, #-16777216	; 0xff000000
   1c468:	and	r4, r0, r1
   1c46c:	ldr	r6, [pc, #700]	; 1c730 <read_boolean_unary_expression@@Base+0x1730>
   1c470:	mov	r0, r9
   1c474:	mov	r1, r4
   1c478:	add	r6, pc, r6
   1c47c:	bl	11eb4 <realloc@plt>
   1c480:	stm	sl, {r4, r7}
   1c484:	str	r0, [r6]
   1c488:	ldr	sl, [pc, #676]	; 1c734 <read_boolean_unary_expression@@Base+0x1734>
   1c48c:	mov	r3, r0
   1c490:	add	sl, pc, sl
   1c494:	ldr	r7, [sl, #4]
   1c498:	ldr	r0, [pc, #664]	; 1c738 <read_boolean_unary_expression@@Base+0x1738>
   1c49c:	add	r0, pc, r0
   1c4a0:	ldrb	r6, [r0]
   1c4a4:	ldr	r4, [pc, #656]	; 1c73c <read_boolean_unary_expression@@Base+0x173c>
   1c4a8:	ldr	r4, [pc, r4]
   1c4ac:	b	1c4d8 <read_boolean_unary_expression@@Base+0x14d8>
   1c4b0:	mov	r0, #0
   1c4b4:	str	r0, [sp, #8]
   1c4b8:	mov	r6, #0
   1c4bc:	mov	r3, r9
   1c4c0:	b	1c4d8 <read_boolean_unary_expression@@Base+0x14d8>
   1c4c4:	mov	r0, #0
   1c4c8:	str	r0, [sp, #8]
   1c4cc:	ldr	sl, [pc, #600]	; 1c72c <read_boolean_unary_expression@@Base+0x172c>
   1c4d0:	mov	r3, r9
   1c4d4:	add	sl, pc, sl
   1c4d8:	mov	r9, r3
   1c4dc:	strb	r5, [r3, r4]!
   1c4e0:	lsr	r0, r5, #24
   1c4e4:	adds	r4, r4, #4
   1c4e8:	lsr	r1, r5, #16
   1c4ec:	lsr	r2, r5, #8
   1c4f0:	strb	r0, [r3, #3]
   1c4f4:	mov	r0, r8
   1c4f8:	adc	r5, r7, #0
   1c4fc:	strb	r1, [r3, #2]
   1c500:	strb	r2, [r3, #1]
   1c504:	strd	r4, [sl]
   1c508:	bl	11f2c <strlen@plt>
   1c50c:	mov	r7, r0
   1c510:	cmp	r6, #0
   1c514:	beq	1c5b0 <read_boolean_unary_expression@@Base+0x15b0>
   1c518:	ldr	r6, [pc, #544]	; 1c740 <read_boolean_unary_expression@@Base+0x1740>
   1c51c:	adds	r0, r4, r7
   1c520:	adc	r1, r5, #0
   1c524:	add	r6, pc, r6
   1c528:	ldr	r2, [r6, #4]
   1c52c:	ldr	r3, [pc, #528]	; 1c744 <read_boolean_unary_expression@@Base+0x1744>
   1c530:	ldr	r3, [pc, r3]
   1c534:	subs	r3, r3, r0
   1c538:	sbcs	r2, r2, r1
   1c53c:	bcs	1c5a8 <read_boolean_unary_expression@@Base+0x15a8>
   1c540:	mov	r2, #7
   1c544:	orr	r2, r2, #131072	; 0x20000
   1c548:	adds	r0, r2, r0
   1c54c:	adc	r1, r1, #0
   1c550:	subs	r0, r0, #8
   1c554:	sbc	r1, r1, #0
   1c558:	mvn	r2, #0
   1c55c:	and	r5, r1, r2
   1c560:	mov	r1, #16646144	; 0xfe0000
   1c564:	orr	r1, r1, #-16777216	; 0xff000000
   1c568:	and	r4, r0, r1
   1c56c:	mov	r0, r9
   1c570:	mov	r1, r4
   1c574:	bl	11eb4 <realloc@plt>
   1c578:	strd	r4, [r6]
   1c57c:	ldr	r1, [pc, #452]	; 1c748 <read_boolean_unary_expression@@Base+0x1748>
   1c580:	ldr	r5, [sl, #4]
   1c584:	add	r1, pc, r1
   1c588:	str	r0, [r1]
   1c58c:	ldr	r1, [pc, #440]	; 1c74c <read_boolean_unary_expression@@Base+0x174c>
   1c590:	add	r1, pc, r1
   1c594:	ldrb	r1, [r1]
   1c598:	str	r1, [sp, #8]
   1c59c:	ldr	r4, [pc, #428]	; 1c750 <read_boolean_unary_expression@@Base+0x1750>
   1c5a0:	ldr	r4, [pc, r4]
   1c5a4:	b	1c5b4 <read_boolean_unary_expression@@Base+0x15b4>
   1c5a8:	mov	r0, #1
   1c5ac:	str	r0, [sp, #8]
   1c5b0:	mov	r0, r9
   1c5b4:	mov	r9, r0
   1c5b8:	add	r0, r0, r4
   1c5bc:	mov	r1, r8
   1c5c0:	mov	r2, r7
   1c5c4:	bl	11e78 <memcpy@plt>
   1c5c8:	adds	r6, r4, r7
   1c5cc:	mov	r0, r8
   1c5d0:	adc	r5, r5, #0
   1c5d4:	str	r6, [sl]
   1c5d8:	str	r5, [sl, #4]
   1c5dc:	bl	11f2c <strlen@plt>
   1c5e0:	and	r0, r0, #3
   1c5e4:	rsb	r4, r0, #4
   1c5e8:	ldr	r0, [sp, #8]
   1c5ec:	cmp	r0, #0
   1c5f0:	beq	1c678 <read_boolean_unary_expression@@Base+0x1678>
   1c5f4:	ldr	r7, [pc, #344]	; 1c754 <read_boolean_unary_expression@@Base+0x1754>
   1c5f8:	adds	r0, r6, r4
   1c5fc:	adc	r1, r5, #0
   1c600:	add	r7, pc, r7
   1c604:	ldr	r2, [r7, #4]
   1c608:	ldr	r3, [pc, #328]	; 1c758 <read_boolean_unary_expression@@Base+0x1758>
   1c60c:	ldr	r3, [pc, r3]
   1c610:	subs	r3, r3, r0
   1c614:	sbcs	r2, r2, r1
   1c618:	bcs	1c678 <read_boolean_unary_expression@@Base+0x1678>
   1c61c:	mov	r2, #7
   1c620:	orr	r2, r2, #131072	; 0x20000
   1c624:	adds	r0, r2, r0
   1c628:	adc	r1, r1, #0
   1c62c:	subs	r0, r0, #8
   1c630:	sbc	r1, r1, #0
   1c634:	mvn	r2, #0
   1c638:	and	r5, r1, r2
   1c63c:	mov	r1, #16646144	; 0xfe0000
   1c640:	orr	r1, r1, #-16777216	; 0xff000000
   1c644:	and	r6, r0, r1
   1c648:	ldr	r8, [pc, #268]	; 1c75c <read_boolean_unary_expression@@Base+0x175c>
   1c64c:	mov	r0, r9
   1c650:	mov	r1, r6
   1c654:	add	r8, pc, r8
   1c658:	bl	11eb4 <realloc@plt>
   1c65c:	str	r6, [r7]
   1c660:	str	r5, [r7, #4]
   1c664:	str	r0, [r8]
   1c668:	ldr	r5, [sl, #4]
   1c66c:	ldr	r6, [pc, #236]	; 1c760 <read_boolean_unary_expression@@Base+0x1760>
   1c670:	mov	r9, r0
   1c674:	ldr	r6, [pc, r6]
   1c678:	add	r0, r9, r6
   1c67c:	mov	r1, #0
   1c680:	mov	r2, r4
   1c684:	bl	11f74 <memset@plt>
   1c688:	adds	r0, r6, r4
   1c68c:	adc	r1, r5, #0
   1c690:	strd	r0, [sl]
   1c694:	sub	sp, fp, #28
   1c698:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c69c:	andeq	r6, r1, ip, ror r0
   1c6a0:	andeq	r6, r1, r0, rrx
   1c6a4:	andeq	r6, r1, r4, rrx
   1c6a8:	andeq	r6, r1, r8, asr #32
   1c6ac:	andeq	r6, r1, ip, asr #32
   1c6b0:	andeq	r6, r1, r0, lsr r0
   1c6b4:	andeq	r5, r1, r4, ror #31
   1c6b8:	andeq	r5, r1, r0, ror #31
   1c6bc:	ldrdeq	r5, [r1], -r0
   1c6c0:			; <UNDEFINED> instruction: 0x00015fb8
   1c6c4:	andeq	r5, r1, r4, ror #30
   1c6c8:	andeq	r5, r1, r4, ror #28
   1c6cc:	andeq	r5, r1, r4, asr pc
   1c6d0:	andeq	r5, r1, r8, asr #30
   1c6d4:	strdeq	r5, [r1], -r8
   1c6d8:	andeq	r5, r1, r4, lsl #30
   1c6dc:	ldrdeq	r5, [r1], -r4
   1c6e0:	ldrdeq	r5, [r1], -r8
   1c6e4:	andeq	r5, r1, r4, asr #29
   1c6e8:	ldrdeq	r5, [r1], -r8
   1c6ec:	muleq	r1, r4, sp
   1c6f0:	andeq	r5, r1, r0, ror #26
   1c6f4:	andeq	r5, r1, r4, ror #26
   1c6f8:	ldrdeq	r5, [r1], -r8
   1c6fc:	muleq	r1, r4, ip
   1c700:	andeq	r5, r1, r4, lsl #25
   1c704:	andeq	r5, r1, ip, lsr #24
   1c708:	andeq	r5, r1, ip, lsl ip
   1c70c:	andeq	r5, r1, r0, lsl ip
   1c710:	andeq	r5, r1, ip, asr #23
   1c714:			; <UNDEFINED> instruction: 0x00015bbc
   1c718:			; <UNDEFINED> instruction: 0x00015bb0
   1c71c:	andeq	r5, r1, r0, lsl #23
   1c720:	andeq	r5, r1, r4, asr #22
   1c724:	andeq	r5, r1, r4, lsr fp
   1c728:	andeq	r5, r1, r8, lsr #22
   1c72c:	andeq	r5, r1, r4, lsl #21
   1c730:	ldrdeq	r5, [r1], -r4
   1c734:	andeq	r5, r1, r8, asr #21
   1c738:	andeq	r5, r1, r8, lsr #21
   1c73c:			; <UNDEFINED> instruction: 0x00015ab0
   1c740:	andeq	r5, r1, ip, lsr #20
   1c744:	andeq	r5, r1, r0, lsr #20
   1c748:	andeq	r5, r1, r8, asr #19
   1c74c:			; <UNDEFINED> instruction: 0x000159b4
   1c750:			; <UNDEFINED> instruction: 0x000159b8
   1c754:	andeq	r5, r1, r0, asr r9
   1c758:	andeq	r5, r1, r4, asr #18
   1c75c:	strdeq	r5, [r1], -r8
   1c760:	andeq	r5, r1, r4, ror #17
   1c764:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c768:	add	fp, sp, #28
   1c76c:	sub	sp, sp, #28
   1c770:	mov	ip, r0
   1c774:	ldr	r0, [pc, #1740]	; 1ce48 <read_boolean_unary_expression@@Base+0x1e48>
   1c778:	ldr	r0, [pc, r0]
   1c77c:	cmp	r0, #0
   1c780:	beq	1c89c <read_boolean_unary_expression@@Base+0x189c>
   1c784:	ldr	r5, [pc, #1728]	; 1ce4c <read_boolean_unary_expression@@Base+0x1e4c>
   1c788:	mov	sl, r1
   1c78c:	add	r5, pc, r5
   1c790:	ldr	r3, [r5, #4]
   1c794:	ldr	r4, [pc, #1716]	; 1ce50 <read_boolean_unary_expression@@Base+0x1e50>
   1c798:	ldr	r4, [pc, r4]
   1c79c:	ldr	r6, [pc, #1712]	; 1ce54 <read_boolean_unary_expression@@Base+0x1e54>
   1c7a0:	add	r6, pc, r6
   1c7a4:	ldrb	r0, [r6]
   1c7a8:	cmp	r0, #0
   1c7ac:	beq	1c8a4 <read_boolean_unary_expression@@Base+0x18a4>
   1c7b0:	ldr	r8, [pc, #1732]	; 1ce7c <read_boolean_unary_expression@@Base+0x1e7c>
   1c7b4:	mov	r5, #10551296	; 0xa10000
   1c7b8:	adds	r9, r4, #4
   1c7bc:	add	r8, pc, r8
   1c7c0:	adc	r2, r3, #0
   1c7c4:	ldr	r0, [r8, #4]
   1c7c8:	ldr	r1, [pc, #1712]	; 1ce80 <read_boolean_unary_expression@@Base+0x1e80>
   1c7cc:	orr	r5, r5, #16777216	; 0x1000000
   1c7d0:	ldr	r1, [pc, r1]
   1c7d4:	subs	r1, r1, r9
   1c7d8:	sbcs	r0, r0, r2
   1c7dc:	bcs	1c9a8 <read_boolean_unary_expression@@Base+0x19a8>
   1c7e0:	mov	r0, #3
   1c7e4:	orr	r0, r0, #131072	; 0x20000
   1c7e8:	adds	r0, r4, r0
   1c7ec:	adc	r1, r3, #0
   1c7f0:	mvn	r2, #0
   1c7f4:	and	r9, r1, r2
   1c7f8:	mov	r1, #16646144	; 0xfe0000
   1c7fc:	orr	r1, r1, #-16777216	; 0xff000000
   1c800:	and	r4, r0, r1
   1c804:	ldr	r0, [pc, #1664]	; 1ce8c <read_boolean_unary_expression@@Base+0x1e8c>
   1c808:	mov	r1, r4
   1c80c:	mov	r7, ip
   1c810:	ldr	r0, [pc, r0]
   1c814:	bl	11eb4 <realloc@plt>
   1c818:	ldr	ip, [pc, #1648]	; 1ce90 <read_boolean_unary_expression@@Base+0x1e90>
   1c81c:	ldr	lr, [pc, #1648]	; 1ce94 <read_boolean_unary_expression@@Base+0x1e94>
   1c820:	stm	r8, {r4, r9}
   1c824:	ldr	r1, [pc, #1644]	; 1ce98 <read_boolean_unary_expression@@Base+0x1e98>
   1c828:	add	ip, pc, ip
   1c82c:	add	lr, pc, lr
   1c830:	add	r1, pc, r1
   1c834:	mov	r2, r0
   1c838:	str	r2, [r1]
   1c83c:	mov	r6, ip
   1c840:	ldrb	ip, [ip]
   1c844:	ldr	r3, [lr, #4]
   1c848:	ldr	r4, [pc, #1612]	; 1ce9c <read_boolean_unary_expression@@Base+0x1e9c>
   1c84c:	lsr	r0, r5, #24
   1c850:	mov	r1, r8
   1c854:	ldr	r4, [pc, r4]
   1c858:	str	r2, [sp, #20]
   1c85c:	lsl	r8, r7, #1
   1c860:	strb	r5, [r2, r4]!
   1c864:	adds	r9, r4, #4
   1c868:	strb	r0, [r2, #3]
   1c86c:	lsr	r0, r5, #16
   1c870:	strb	r0, [r2, #2]
   1c874:	lsr	r0, r5, #8
   1c878:	strb	r0, [r2, #1]
   1c87c:	adc	r5, r3, #0
   1c880:	mov	r0, #0
   1c884:	cmp	ip, #1
   1c888:	str	r3, [sp, #16]
   1c88c:	str	r9, [lr]
   1c890:	str	r5, [lr, #4]
   1c894:	beq	1c9fc <read_boolean_unary_expression@@Base+0x19fc>
   1c898:	b	1cb60 <read_boolean_unary_expression@@Base+0x1b60>
   1c89c:	sub	sp, fp, #28
   1c8a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c8a4:	ldr	r0, [pc, #1452]	; 1ce58 <read_boolean_unary_expression@@Base+0x1e58>
   1c8a8:	mov	r7, r3
   1c8ac:	mov	r9, #0
   1c8b0:	ldr	r0, [pc, r0]
   1c8b4:	str	r0, [sp, #20]
   1c8b8:	ldrb	r1, [r0, r4]!
   1c8bc:	str	r7, [sp, #16]
   1c8c0:	ldrb	r2, [r0, #1]
   1c8c4:	ldrb	r3, [r0, #2]
   1c8c8:	ldrb	r0, [r0, #3]
   1c8cc:	orr	r1, r1, r2, lsl #8
   1c8d0:	orr	r1, r1, r3, lsl #16
   1c8d4:	adds	r2, r4, #4
   1c8d8:	orr	r3, r1, r0, lsl #24
   1c8dc:	adc	r7, r7, #0
   1c8e0:	mov	r1, r5
   1c8e4:	stm	r5, {r2, r7}
   1c8e8:	mov	r5, #10551296	; 0xa10000
   1c8ec:	orr	r5, r5, #16777216	; 0x1000000
   1c8f0:	cmn	r3, #1
   1c8f4:	beq	1caa8 <read_boolean_unary_expression@@Base+0x1aa8>
   1c8f8:	cmp	r3, r5
   1c8fc:	bne	1cab8 <read_boolean_unary_expression@@Base+0x1ab8>
   1c900:	str	r7, [sp, #8]
   1c904:	ldr	r0, [sp, #20]
   1c908:	str	r4, [sp, #4]
   1c90c:	mov	r8, r5
   1c910:	ldr	r3, [r0, r2]
   1c914:	ldr	r0, [sp, #16]
   1c918:	adds	r5, r4, #8
   1c91c:	adc	r9, r0, #0
   1c920:	cmn	r3, #1
   1c924:	stm	r1, {r5, r9}
   1c928:	beq	1cac4 <read_boolean_unary_expression@@Base+0x1ac4>
   1c92c:	lsr	r0, r3, #1
   1c930:	mov	r7, ip
   1c934:	cmp	r0, ip
   1c938:	bne	1cac4 <read_boolean_unary_expression@@Base+0x1ac4>
   1c93c:	lsl	r0, r7, #3
   1c940:	mov	r4, r2
   1c944:	bl	11ee4 <malloc@plt>
   1c948:	cmp	r7, #0
   1c94c:	beq	1caec <read_boolean_unary_expression@@Base+0x1aec>
   1c950:	str	r0, [sp, #12]
   1c954:	str	r7, [sp, #24]
   1c958:	ldr	r2, [sp, #20]
   1c95c:	ldr	r3, [r2, r5]!
   1c960:	adds	r5, r5, #8
   1c964:	ldr	r2, [r2, #4]
   1c968:	str	r3, [r0]
   1c96c:	adc	r9, r9, #0
   1c970:	str	r2, [r0, #4]
   1c974:	add	r0, r0, #8
   1c978:	subs	r7, r7, #1
   1c97c:	bne	1c958 <read_boolean_unary_expression@@Base+0x1958>
   1c980:	ldr	lr, [pc, #1260]	; 1ce74 <read_boolean_unary_expression@@Base+0x1e74>
   1c984:	add	lr, pc, lr
   1c988:	stm	lr, {r5, r9}
   1c98c:	ldr	ip, [pc, #1252]	; 1ce78 <read_boolean_unary_expression@@Base+0x1e78>
   1c990:	mov	r1, lr
   1c994:	ldr	r0, [sp, #12]
   1c998:	add	ip, pc, ip
   1c99c:	mov	r6, ip
   1c9a0:	ldr	ip, [sp, #24]
   1c9a4:	b	1cb08 <read_boolean_unary_expression@@Base+0x1b08>
   1c9a8:	str	r3, [sp, #16]
   1c9ac:	ldr	r3, [pc, #1232]	; 1ce84 <read_boolean_unary_expression@@Base+0x1e84>
   1c9b0:	mov	lr, r5
   1c9b4:	mov	r7, ip
   1c9b8:	lsr	ip, r5, #16
   1c9bc:	ldr	r3, [pc, r3]
   1c9c0:	lsr	r1, r5, #8
   1c9c4:	str	r3, [sp, #20]
   1c9c8:	strb	lr, [r3, r4]!
   1c9cc:	lsr	r0, lr, #24
   1c9d0:	strb	r1, [r3, #1]
   1c9d4:	strb	r0, [r3, #3]
   1c9d8:	strb	ip, [r3, #2]
   1c9dc:	ldr	lr, [pc, #1188]	; 1ce88 <read_boolean_unary_expression@@Base+0x1e88>
   1c9e0:	lsl	r5, r7, #1
   1c9e4:	add	lr, pc, lr
   1c9e8:	mov	r1, r8
   1c9ec:	mov	r8, r5
   1c9f0:	str	r9, [lr]
   1c9f4:	str	r2, [lr, #4]
   1c9f8:	mov	r5, r2
   1c9fc:	str	r8, [sp, #24]
   1ca00:	mov	r8, r1
   1ca04:	ldr	r0, [sp, #16]
   1ca08:	ldr	r2, [r8, #4]
   1ca0c:	ldr	r3, [pc, #1164]	; 1cea0 <read_boolean_unary_expression@@Base+0x1ea0>
   1ca10:	adds	ip, r4, #8
   1ca14:	adc	r1, r0, #0
   1ca18:	mov	r0, #0
   1ca1c:	ldr	r3, [pc, r3]
   1ca20:	subs	r3, r3, ip
   1ca24:	sbcs	r1, r2, r1
   1ca28:	bcs	1caa0 <read_boolean_unary_expression@@Base+0x1aa0>
   1ca2c:	ldr	r5, [pc, #1136]	; 1cea4 <read_boolean_unary_expression@@Base+0x1ea4>
   1ca30:	mov	r0, #3
   1ca34:	ldr	r1, [sp, #16]
   1ca38:	orr	r0, r0, #131072	; 0x20000
   1ca3c:	adds	r0, r0, r4
   1ca40:	adc	r1, r1, #0
   1ca44:	adds	r0, r0, #4
   1ca48:	adc	r1, r1, #0
   1ca4c:	mvn	r2, #0
   1ca50:	and	r9, r1, r2
   1ca54:	mov	r1, #16646144	; 0xfe0000
   1ca58:	orr	r1, r1, #-16777216	; 0xff000000
   1ca5c:	and	r4, r0, r1
   1ca60:	ldr	r0, [sp, #20]
   1ca64:	mov	r1, r4
   1ca68:	add	r5, pc, r5
   1ca6c:	bl	11eb4 <realloc@plt>
   1ca70:	ldr	ip, [pc, #1072]	; 1cea8 <read_boolean_unary_expression@@Base+0x1ea8>
   1ca74:	ldr	lr, [pc, #1072]	; 1ceac <read_boolean_unary_expression@@Base+0x1eac>
   1ca78:	stm	r8, {r4, r9}
   1ca7c:	add	lr, pc, lr
   1ca80:	str	r0, [r5]
   1ca84:	str	r0, [sp, #20]
   1ca88:	ldr	r5, [lr, #4]
   1ca8c:	ldr	r9, [pc, #1052]	; 1ceb0 <read_boolean_unary_expression@@Base+0x1eb0>
   1ca90:	add	ip, pc, ip
   1ca94:	mov	r6, ip
   1ca98:	mov	r0, #0
   1ca9c:	ldr	r9, [pc, r9]
   1caa0:	ldr	r8, [sp, #24]
   1caa4:	b	1cb60 <read_boolean_unary_expression@@Base+0x1b60>
   1caa8:	mov	r3, r2
   1caac:	ldr	r2, [sp, #16]
   1cab0:	mov	r0, #0
   1cab4:	b	1cb20 <read_boolean_unary_expression@@Base+0x1b20>
   1cab8:	ldr	r1, [pc, #924]	; 1ce5c <read_boolean_unary_expression@@Base+0x1e5c>
   1cabc:	add	r1, pc, r1
   1cac0:	b	1cacc <read_boolean_unary_expression@@Base+0x1acc>
   1cac4:	ldr	r1, [pc, #924]	; 1ce68 <read_boolean_unary_expression@@Base+0x1e68>
   1cac8:	add	r1, pc, r1
   1cacc:	ldr	r0, [pc, #908]	; 1ce60 <read_boolean_unary_expression@@Base+0x1e60>
   1cad0:	ldr	r0, [pc, r0]
   1cad4:	ldr	r0, [r0]
   1cad8:	ldr	r2, [pc, #900]	; 1ce64 <read_boolean_unary_expression@@Base+0x1e64>
   1cadc:	ldr	r2, [pc, r2]
   1cae0:	sub	sp, fp, #28
   1cae4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cae8:	b	11f44 <fprintf@plt>
   1caec:	ldr	lr, [pc, #888]	; 1ce6c <read_boolean_unary_expression@@Base+0x1e6c>
   1caf0:	ldr	ip, [pc, #888]	; 1ce70 <read_boolean_unary_expression@@Base+0x1e70>
   1caf4:	add	lr, pc, lr
   1caf8:	add	ip, pc, ip
   1cafc:	mov	r6, ip
   1cb00:	mov	r1, lr
   1cb04:	mov	ip, r7
   1cb08:	mov	r3, r4
   1cb0c:	ldr	r7, [sp, #8]
   1cb10:	ldr	r4, [sp, #4]
   1cb14:	ldr	r2, [sp, #16]
   1cb18:	mov	r9, #0
   1cb1c:	mov	r5, r8
   1cb20:	mov	lr, r1
   1cb24:	mov	r1, #1
   1cb28:	str	r4, [lr]
   1cb2c:	str	r2, [lr, #4]
   1cb30:	ldr	r2, [sp, #20]
   1cb34:	lsl	r8, ip, #1
   1cb38:	strb	r5, [r2, r4]!
   1cb3c:	mov	r5, r7
   1cb40:	strb	r1, [r2, #3]
   1cb44:	mov	r1, #161	; 0xa1
   1cb48:	strb	r9, [r2, #1]
   1cb4c:	mov	r9, r3
   1cb50:	strb	r1, [r2, #2]
   1cb54:	str	r9, [lr]
   1cb58:	str	r7, [lr, #4]
   1cb5c:	mov	r7, ip
   1cb60:	ldr	r3, [sp, #20]
   1cb64:	lsr	r1, r8, #16
   1cb68:	mov	ip, r3
   1cb6c:	strb	r8, [r3, r9]!
   1cb70:	lsr	r4, r8, #24
   1cb74:	lsr	r2, r8, #8
   1cb78:	adds	r8, r9, #4
   1cb7c:	strb	r1, [r3, #2]
   1cb80:	adc	r1, r5, #0
   1cb84:	cmp	r7, #0
   1cb88:	strb	r4, [r3, #3]
   1cb8c:	strb	r2, [r3, #1]
   1cb90:	str	r8, [lr]
   1cb94:	str	r1, [lr, #4]
   1cb98:	str	r7, [sp, #24]
   1cb9c:	beq	1ce3c <read_boolean_unary_expression@@Base+0x1e3c>
   1cba0:	ldr	r7, [pc, #780]	; 1ceb4 <read_boolean_unary_expression@@Base+0x1eb4>
   1cba4:	mov	r4, lr
   1cba8:	mov	r2, r0
   1cbac:	add	r7, pc, r7
   1cbb0:	str	r0, [sp, #12]
   1cbb4:	b	1cc50 <read_boolean_unary_expression@@Base+0x1c50>
   1cbb8:	mov	r7, ip
   1cbbc:	lsr	r2, r4, #24
   1cbc0:	strb	r4, [r7, r8]!
   1cbc4:	mov	lr, r6
   1cbc8:	lsr	r9, r4, #16
   1cbcc:	lsr	r6, r4, #8
   1cbd0:	strb	r2, [r7, #3]
   1cbd4:	adds	r2, r8, #4
   1cbd8:	mov	r4, r0
   1cbdc:	strb	r9, [r7, #2]
   1cbe0:	mov	r3, ip
   1cbe4:	strb	r6, [r7, #1]
   1cbe8:	adc	r9, r1, #0
   1cbec:	stm	r4, {r2, r9}
   1cbf0:	mov	ip, r3
   1cbf4:	lsr	r1, r5, #16
   1cbf8:	strb	r5, [r3, r2]!
   1cbfc:	lsr	r0, r5, #24
   1cc00:	lsr	r7, r5, #8
   1cc04:	adds	r8, r2, #4
   1cc08:	strb	r1, [r3, #2]
   1cc0c:	adc	r1, r9, #0
   1cc10:	strb	r0, [r3, #3]
   1cc14:	strb	r7, [r3, #1]
   1cc18:	str	r8, [r4]
   1cc1c:	str	r1, [r4, #4]
   1cc20:	ldr	r0, [sp, #24]
   1cc24:	ldr	r2, [sp, #16]
   1cc28:	mov	r6, lr
   1cc2c:	subs	r0, r0, #1
   1cc30:	str	r0, [sp, #24]
   1cc34:	ldr	sl, [sp, #20]
   1cc38:	ldr	r0, [sp, #12]
   1cc3c:	ldr	r7, [pc, #676]	; 1cee8 <read_boolean_unary_expression@@Base+0x1ee8>
   1cc40:	add	r2, r2, #8
   1cc44:	add	sl, sl, #8
   1cc48:	add	r7, pc, r7
   1cc4c:	beq	1ce3c <read_boolean_unary_expression@@Base+0x1e3c>
   1cc50:	cmp	r0, #0
   1cc54:	mov	r0, r4
   1cc58:	str	r2, [sp, #16]
   1cc5c:	beq	1cc68 <read_boolean_unary_expression@@Base+0x1c68>
   1cc60:	ldrd	r2, [r2]
   1cc64:	b	1cc70 <read_boolean_unary_expression@@Base+0x1c70>
   1cc68:	mov	r2, #0
   1cc6c:	mov	r3, #0
   1cc70:	ldrd	r4, [sl]
   1cc74:	adds	r4, r4, r2
   1cc78:	adc	r5, r5, r3
   1cc7c:	strd	r4, [sl]
   1cc80:	ldrb	r2, [r6]
   1cc84:	str	sl, [sp, #20]
   1cc88:	cmp	r2, #0
   1cc8c:	beq	1cbb8 <read_boolean_unary_expression@@Base+0x1bb8>
   1cc90:	ldr	r3, [r7, #4]
   1cc94:	ldr	r6, [pc, #540]	; 1ceb8 <read_boolean_unary_expression@@Base+0x1eb8>
   1cc98:	adds	r2, r8, #4
   1cc9c:	adc	r9, r1, #0
   1cca0:	ldr	r6, [pc, r6]
   1cca4:	subs	r2, r6, r2
   1cca8:	sbcs	r2, r3, r9
   1ccac:	bcs	1cd58 <read_boolean_unary_expression@@Base+0x1d58>
   1ccb0:	mov	r2, #3
   1ccb4:	orr	r2, r2, #131072	; 0x20000
   1ccb8:	adds	r0, r8, r2
   1ccbc:	adc	r1, r1, #0
   1ccc0:	mvn	r2, #0
   1ccc4:	and	r8, r1, r2
   1ccc8:	mov	r1, #16646144	; 0xfe0000
   1cccc:	orr	r1, r1, #-16777216	; 0xff000000
   1ccd0:	and	r6, r0, r1
   1ccd4:	mov	r0, ip
   1ccd8:	mov	r1, r6
   1ccdc:	bl	11eb4 <realloc@plt>
   1cce0:	ldr	ip, [pc, #468]	; 1cebc <read_boolean_unary_expression@@Base+0x1ebc>
   1cce4:	ldr	lr, [pc, #468]	; 1cec0 <read_boolean_unary_expression@@Base+0x1ec0>
   1cce8:	stm	r7, {r6, r8}
   1ccec:	mov	r3, r0
   1ccf0:	ldr	r0, [pc, #460]	; 1cec4 <read_boolean_unary_expression@@Base+0x1ec4>
   1ccf4:	add	lr, pc, lr
   1ccf8:	mov	r9, lr
   1ccfc:	add	r0, pc, r0
   1cd00:	add	ip, pc, ip
   1cd04:	str	r3, [r0]
   1cd08:	mov	lr, ip
   1cd0c:	ldrb	ip, [ip]
   1cd10:	ldr	r1, [r9, #4]
   1cd14:	ldr	r8, [pc, #428]	; 1cec8 <read_boolean_unary_expression@@Base+0x1ec8>
   1cd18:	mov	r7, r3
   1cd1c:	lsr	r2, r4, #24
   1cd20:	ldr	r8, [pc, r8]
   1cd24:	lsr	r6, r4, #16
   1cd28:	strb	r4, [r7, r8]!
   1cd2c:	strb	r2, [r7, #3]
   1cd30:	lsr	r2, r4, #8
   1cd34:	strb	r2, [r7, #1]
   1cd38:	adds	r2, r8, #4
   1cd3c:	mov	r4, r9
   1cd40:	adc	r9, r1, #0
   1cd44:	cmp	ip, #1
   1cd48:	strb	r6, [r7, #2]
   1cd4c:	stm	r4, {r2, r9}
   1cd50:	bne	1cbf0 <read_boolean_unary_expression@@Base+0x1bf0>
   1cd54:	b	1cd8c <read_boolean_unary_expression@@Base+0x1d8c>
   1cd58:	mov	r6, ip
   1cd5c:	lsr	r2, r4, #24
   1cd60:	strb	r4, [r6, r8]!
   1cd64:	lsr	r9, r4, #16
   1cd68:	lsr	r7, r4, #8
   1cd6c:	strb	r2, [r6, #3]
   1cd70:	adds	r2, r8, #4
   1cd74:	mov	r4, r0
   1cd78:	strb	r9, [r6, #2]
   1cd7c:	mov	r3, ip
   1cd80:	strb	r7, [r6, #1]
   1cd84:	adc	r9, r1, #0
   1cd88:	stm	r4, {r2, r9}
   1cd8c:	ldr	lr, [pc, #312]	; 1cecc <read_boolean_unary_expression@@Base+0x1ecc>
   1cd90:	mov	r0, r4
   1cd94:	adds	r7, r8, #8
   1cd98:	add	lr, pc, lr
   1cd9c:	adc	ip, r1, #0
   1cda0:	ldr	r4, [lr, #4]
   1cda4:	ldr	r6, [pc, #292]	; 1ced0 <read_boolean_unary_expression@@Base+0x1ed0>
   1cda8:	ldr	r6, [pc, r6]
   1cdac:	subs	r7, r6, r7
   1cdb0:	sbcs	r7, r4, ip
   1cdb4:	bcs	1ce2c <read_boolean_unary_expression@@Base+0x1e2c>
   1cdb8:	mov	r2, #3
   1cdbc:	orr	r2, r2, #131072	; 0x20000
   1cdc0:	adds	r0, r2, r8
   1cdc4:	adc	r1, r1, #0
   1cdc8:	adds	r0, r0, #4
   1cdcc:	adc	r1, r1, #0
   1cdd0:	mvn	r2, #0
   1cdd4:	and	r7, r1, r2
   1cdd8:	mov	r1, #16646144	; 0xfe0000
   1cddc:	orr	r1, r1, #-16777216	; 0xff000000
   1cde0:	and	r6, r0, r1
   1cde4:	mov	r0, r3
   1cde8:	mov	r1, r6
   1cdec:	mov	r8, lr
   1cdf0:	bl	11eb4 <realloc@plt>
   1cdf4:	ldr	lr, [pc, #220]	; 1ced8 <read_boolean_unary_expression@@Base+0x1ed8>
   1cdf8:	strd	r6, [r8]
   1cdfc:	mov	r3, r0
   1ce00:	add	lr, pc, lr
   1ce04:	mov	r4, lr
   1ce08:	ldr	r9, [lr, #4]
   1ce0c:	ldr	r0, [pc, #200]	; 1cedc <read_boolean_unary_expression@@Base+0x1edc>
   1ce10:	add	r0, pc, r0
   1ce14:	str	r3, [r0]
   1ce18:	ldr	r2, [pc, #192]	; 1cee0 <read_boolean_unary_expression@@Base+0x1ee0>
   1ce1c:	ldr	r2, [pc, r2]
   1ce20:	ldr	lr, [pc, #188]	; 1cee4 <read_boolean_unary_expression@@Base+0x1ee4>
   1ce24:	add	lr, pc, lr
   1ce28:	b	1cbf0 <read_boolean_unary_expression@@Base+0x1bf0>
   1ce2c:	ldr	lr, [pc, #160]	; 1ced4 <read_boolean_unary_expression@@Base+0x1ed4>
   1ce30:	mov	r4, r0
   1ce34:	add	lr, pc, lr
   1ce38:	b	1cbf0 <read_boolean_unary_expression@@Base+0x1bf0>
   1ce3c:	sub	sp, fp, #28
   1ce40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ce44:	b	11e6c <free@plt>
   1ce48:	ldrdeq	r5, [r1], -r0
   1ce4c:	andeq	r5, r1, ip, asr #15
   1ce50:	andeq	r5, r1, r0, asr #15
   1ce54:	andeq	r5, r1, r4, lsr #15
   1ce58:	muleq	r1, ip, r6
   1ce5c:	andeq	r2, r0, pc, asr #19
   1ce60:	andeq	r4, r1, r8, ror #11
   1ce64:	andeq	r5, r1, r4, ror #8
   1ce68:	andeq	r2, r0, sp, lsl #20
   1ce6c:	andeq	r5, r1, r4, ror #8
   1ce70:	andeq	r5, r1, ip, asr #8
   1ce74:	ldrdeq	r5, [r1], -r4
   1ce78:	andeq	r5, r1, ip, lsr #11
   1ce7c:	muleq	r1, r4, r7
   1ce80:	andeq	r5, r1, r0, lsl #15
   1ce84:	muleq	r1, r0, r5
   1ce88:	andeq	r5, r1, r4, ror r5
   1ce8c:	andeq	r5, r1, ip, lsr r7
   1ce90:	andeq	r5, r1, ip, lsl r7
   1ce94:	andeq	r5, r1, ip, lsr #14
   1ce98:	andeq	r5, r1, ip, lsl r7
   1ce9c:	andeq	r5, r1, r4, lsl #14
   1cea0:	andeq	r5, r1, r4, lsr r5
   1cea4:	andeq	r5, r1, r4, ror #9
   1cea8:			; <UNDEFINED> instruction: 0x000154b4
   1ceac:	ldrdeq	r5, [r1], -ip
   1ceb0:			; <UNDEFINED> instruction: 0x000154bc
   1ceb4:	andeq	r5, r1, r4, lsr #7
   1ceb8:			; <UNDEFINED> instruction: 0x000152b0
   1cebc:	andeq	r5, r1, r4, asr #4
   1cec0:	andeq	r5, r1, r4, ror #4
   1cec4:	andeq	r5, r1, r0, asr r2
   1cec8:	andeq	r5, r1, r8, lsr r2
   1cecc:			; <UNDEFINED> instruction: 0x000151b8
   1ced0:	andeq	r5, r1, r8, lsr #3
   1ced4:	andeq	r5, r1, r0, lsl r1
   1ced8:	andeq	r5, r1, r8, asr r1
   1cedc:	andeq	r5, r1, ip, lsr r1
   1cee0:	andeq	r5, r1, ip, lsr r1
   1cee4:	andeq	r5, r1, r0, lsr #2
   1cee8:	andeq	r5, r1, r8, lsl #6
   1ceec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cef0:	add	fp, sp, #28
   1cef4:	sub	sp, sp, #4
   1cef8:	ldr	r0, [pc, #3180]	; 1db6c <read_boolean_unary_expression@@Base+0x2b6c>
   1cefc:	ldr	r0, [pc, r0]
   1cf00:	cmp	r0, #0
   1cf04:	beq	1d560 <read_boolean_unary_expression@@Base+0x2560>
   1cf08:	ldr	sl, [pc, #3168]	; 1db70 <read_boolean_unary_expression@@Base+0x2b70>
   1cf0c:	add	sl, pc, sl
   1cf10:	ldr	r6, [sl, #4]
   1cf14:	ldr	r5, [pc, #3160]	; 1db74 <read_boolean_unary_expression@@Base+0x2b74>
   1cf18:	ldr	r5, [pc, r5]
   1cf1c:	ldr	r8, [pc, #3156]	; 1db78 <read_boolean_unary_expression@@Base+0x2b78>
   1cf20:	add	r8, pc, r8
   1cf24:	ldrb	r0, [r8]
   1cf28:	cmp	r0, #0
   1cf2c:	beq	1cff0 <read_boolean_unary_expression@@Base+0x1ff0>
   1cf30:	ldr	r9, [pc, #3164]	; 1db94 <read_boolean_unary_expression@@Base+0x2b94>
   1cf34:	adds	r2, r5, #4
   1cf38:	adc	ip, r6, #0
   1cf3c:	add	r9, pc, r9
   1cf40:	ldr	r0, [r9, #4]
   1cf44:	ldr	r3, [pc, #3148]	; 1db98 <read_boolean_unary_expression@@Base+0x2b98>
   1cf48:	ldr	r3, [pc, r3]
   1cf4c:	subs	r3, r3, r2
   1cf50:	sbcs	r0, r0, ip
   1cf54:	bcs	1d044 <read_boolean_unary_expression@@Base+0x2044>
   1cf58:	mov	r0, #7
   1cf5c:	orr	r0, r0, #131072	; 0x20000
   1cf60:	adds	r0, r0, r5
   1cf64:	adc	r1, r6, #0
   1cf68:	subs	r0, r0, #4
   1cf6c:	sbc	r1, r1, #0
   1cf70:	mvn	r2, #0
   1cf74:	and	r5, r1, r2
   1cf78:	mov	r1, #16646144	; 0xfe0000
   1cf7c:	orr	r1, r1, #-16777216	; 0xff000000
   1cf80:	ldr	r4, [pc, #3096]	; 1dba0 <read_boolean_unary_expression@@Base+0x2ba0>
   1cf84:	and	r6, r0, r1
   1cf88:	ldr	r0, [pc, #3092]	; 1dba4 <read_boolean_unary_expression@@Base+0x2ba4>
   1cf8c:	mov	r1, r6
   1cf90:	add	r4, pc, r4
   1cf94:	ldr	r0, [pc, r0]
   1cf98:	bl	11eb4 <realloc@plt>
   1cf9c:	str	r6, [r9]
   1cfa0:	str	r5, [r9, #4]
   1cfa4:	str	r0, [r4]
   1cfa8:	ldrb	r3, [r8]
   1cfac:	ldr	r6, [sl, #4]
   1cfb0:	ldr	r5, [pc, #3056]	; 1dba8 <read_boolean_unary_expression@@Base+0x2ba8>
   1cfb4:	mov	r2, r0
   1cfb8:	mov	r1, #0
   1cfbc:	mov	r7, #161	; 0xa1
   1cfc0:	ldr	r5, [pc, r5]
   1cfc4:	strb	r1, [r2, r5]!
   1cfc8:	strb	r7, [r2, #3]
   1cfcc:	strb	r1, [r2, #2]
   1cfd0:	strb	r1, [r2, #1]
   1cfd4:	adds	r2, r5, #4
   1cfd8:	adc	ip, r6, #0
   1cfdc:	mov	r7, #1
   1cfe0:	cmp	r3, #1
   1cfe4:	stm	sl, {r2, ip}
   1cfe8:	beq	1d06c <read_boolean_unary_expression@@Base+0x206c>
   1cfec:	b	1d244 <read_boolean_unary_expression@@Base+0x2244>
   1cff0:	ldr	r0, [pc, #2948]	; 1db7c <read_boolean_unary_expression@@Base+0x2b7c>
   1cff4:	ldr	r0, [pc, r0]
   1cff8:	mov	r1, r0
   1cffc:	ldrb	r2, [r1, r5]!
   1d000:	ldrb	r3, [r1, #1]
   1d004:	ldrb	r7, [r1, #2]
   1d008:	ldrb	r1, [r1, #3]
   1d00c:	orr	r2, r2, r3, lsl #8
   1d010:	orr	r2, r2, r7, lsl #16
   1d014:	orr	r3, r2, r1, lsl #24
   1d018:	adds	r2, r5, #4
   1d01c:	adc	ip, r6, #0
   1d020:	cmp	r3, #-1593835520	; 0xa1000000
   1d024:	stm	sl, {r2, ip}
   1d028:	beq	1d1e4 <read_boolean_unary_expression@@Base+0x21e4>
   1d02c:	mov	r7, #1
   1d030:	cmn	r3, #1
   1d034:	beq	1d224 <read_boolean_unary_expression@@Base+0x2224>
   1d038:	ldr	r1, [pc, #2880]	; 1db80 <read_boolean_unary_expression@@Base+0x2b80>
   1d03c:	add	r1, pc, r1
   1d040:	b	1d924 <read_boolean_unary_expression@@Base+0x2924>
   1d044:	ldr	r0, [pc, #2896]	; 1db9c <read_boolean_unary_expression@@Base+0x2b9c>
   1d048:	mov	r3, #0
   1d04c:	mov	r4, #161	; 0xa1
   1d050:	ldr	r0, [pc, r0]
   1d054:	mov	r7, r0
   1d058:	strb	r3, [r7, r5]!
   1d05c:	strb	r4, [r7, #3]
   1d060:	strb	r3, [r7, #2]
   1d064:	strb	r3, [r7, #1]
   1d068:	stm	sl, {r2, ip}
   1d06c:	ldr	r4, [r9, #4]
   1d070:	ldr	r1, [pc, #2868]	; 1dbac <read_boolean_unary_expression@@Base+0x2bac>
   1d074:	adds	r3, r5, #8
   1d078:	adc	r7, r6, #0
   1d07c:	ldr	r1, [pc, r1]
   1d080:	subs	r1, r1, r3
   1d084:	sbcs	r1, r4, r7
   1d088:	bcs	1d114 <read_boolean_unary_expression@@Base+0x2114>
   1d08c:	mov	r1, #7
   1d090:	orr	r1, r1, #131072	; 0x20000
   1d094:	adds	r1, r5, r1
   1d098:	adc	r2, r6, #0
   1d09c:	mvn	r3, #0
   1d0a0:	and	r5, r2, r3
   1d0a4:	mov	r2, #16646144	; 0xfe0000
   1d0a8:	orr	r2, r2, #-16777216	; 0xff000000
   1d0ac:	ldr	r4, [pc, #2812]	; 1dbb0 <read_boolean_unary_expression@@Base+0x2bb0>
   1d0b0:	and	r6, r1, r2
   1d0b4:	mov	r1, r6
   1d0b8:	add	r4, pc, r4
   1d0bc:	bl	11eb4 <realloc@plt>
   1d0c0:	str	r6, [r9]
   1d0c4:	str	r5, [r9, #4]
   1d0c8:	str	r0, [r4]
   1d0cc:	ldrb	r1, [r8]
   1d0d0:	ldr	ip, [sl, #4]
   1d0d4:	ldr	r2, [pc, #2776]	; 1dbb4 <read_boolean_unary_expression@@Base+0x2bb4>
   1d0d8:	mov	r7, r0
   1d0dc:	mov	r3, #9
   1d0e0:	ldr	r2, [pc, r2]
   1d0e4:	strb	r3, [r7, r2]!
   1d0e8:	mov	r3, #0
   1d0ec:	strb	r3, [r7, #3]
   1d0f0:	strb	r3, [r7, #2]
   1d0f4:	strb	r3, [r7, #1]
   1d0f8:	adds	r3, r2, #4
   1d0fc:	adc	r5, ip, #0
   1d100:	mov	r7, #1
   1d104:	cmp	r1, #1
   1d108:	stm	sl, {r3, r5}
   1d10c:	beq	1d13c <read_boolean_unary_expression@@Base+0x213c>
   1d110:	b	1d26c <read_boolean_unary_expression@@Base+0x226c>
   1d114:	mov	r3, r0
   1d118:	mov	r1, #9
   1d11c:	strb	r1, [r3, r2]!
   1d120:	mov	r1, #0
   1d124:	strb	r1, [r3, #3]
   1d128:	strb	r1, [r3, #2]
   1d12c:	strb	r1, [r3, #1]
   1d130:	adds	r3, r2, #4
   1d134:	adc	r5, ip, #0
   1d138:	stm	sl, {r3, r5}
   1d13c:	ldr	r6, [r9, #4]
   1d140:	ldr	r4, [pc, #2672]	; 1dbb8 <read_boolean_unary_expression@@Base+0x2bb8>
   1d144:	adds	r1, r2, #8
   1d148:	adc	r7, ip, #0
   1d14c:	ldr	r4, [pc, r4]
   1d150:	subs	r1, r4, r1
   1d154:	sbcs	r1, r6, r7
   1d158:	bcs	1d630 <read_boolean_unary_expression@@Base+0x2630>
   1d15c:	mov	r1, #7
   1d160:	orr	r1, r1, #131072	; 0x20000
   1d164:	adds	r1, r2, r1
   1d168:	adc	r2, ip, #0
   1d16c:	mvn	r3, #0
   1d170:	and	r5, r2, r3
   1d174:	mov	r2, #16646144	; 0xfe0000
   1d178:	orr	r2, r2, #-16777216	; 0xff000000
   1d17c:	ldr	r4, [pc, #2616]	; 1dbbc <read_boolean_unary_expression@@Base+0x2bbc>
   1d180:	and	r6, r1, r2
   1d184:	mov	r1, r6
   1d188:	add	r4, pc, r4
   1d18c:	bl	11eb4 <realloc@plt>
   1d190:	str	r6, [r9]
   1d194:	str	r5, [r9, #4]
   1d198:	str	r0, [r4]
   1d19c:	ldrb	r2, [r8]
   1d1a0:	ldr	r5, [sl, #4]
   1d1a4:	ldr	r3, [pc, #2580]	; 1dbc0 <read_boolean_unary_expression@@Base+0x2bc0>
   1d1a8:	mov	r7, r0
   1d1ac:	mov	r1, #0
   1d1b0:	ldr	r3, [pc, r3]
   1d1b4:	adds	r6, r3, #4
   1d1b8:	strb	r1, [r7, r3]!
   1d1bc:	str	r6, [sl]
   1d1c0:	strb	r1, [r7, #3]
   1d1c4:	strb	r1, [r7, #2]
   1d1c8:	strb	r1, [r7, #1]
   1d1cc:	adc	r1, r5, #0
   1d1d0:	mov	r7, #1
   1d1d4:	cmp	r2, #1
   1d1d8:	str	r1, [sl, #4]
   1d1dc:	bne	1d294 <read_boolean_unary_expression@@Base+0x2294>
   1d1e0:	b	1d658 <read_boolean_unary_expression@@Base+0x2658>
   1d1e4:	ldr	r3, [r0, r2]
   1d1e8:	adds	r4, r5, #8
   1d1ec:	adc	r7, r6, #0
   1d1f0:	cmp	r3, #9
   1d1f4:	stm	sl, {r4, r7}
   1d1f8:	bne	1d91c <read_boolean_unary_expression@@Base+0x291c>
   1d1fc:	ldr	r3, [pc, #2444]	; 1db90 <read_boolean_unary_expression@@Base+0x2b90>
   1d200:	adds	r4, r5, #20
   1d204:	adc	r7, r6, #0
   1d208:	add	r3, pc, r3
   1d20c:	add	r6, r5, r0
   1d210:	ldrb	r3, [r3]
   1d214:	ldr	r6, [r6, #16]
   1d218:	stm	sl, {r4, r7}
   1d21c:	eor	r3, r3, #1
   1d220:	add	r7, r6, r3
   1d224:	mov	r6, r0
   1d228:	mov	r3, #0
   1d22c:	strb	r3, [r6, r5]!
   1d230:	mov	r5, #161	; 0xa1
   1d234:	strb	r5, [r6, #3]
   1d238:	strb	r3, [r6, #2]
   1d23c:	strb	r3, [r6, #1]
   1d240:	stm	sl, {r2, ip}
   1d244:	mov	r3, r0
   1d248:	mov	r1, #9
   1d24c:	strb	r1, [r3, r2]!
   1d250:	mov	r1, #0
   1d254:	strb	r1, [r3, #3]
   1d258:	strb	r1, [r3, #2]
   1d25c:	strb	r1, [r3, #1]
   1d260:	adds	r3, r2, #4
   1d264:	adc	r5, ip, #0
   1d268:	stm	sl, {r3, r5}
   1d26c:	mov	r2, r0
   1d270:	mov	r1, #0
   1d274:	strb	r1, [r2, r3]!
   1d278:	adds	r6, r3, #4
   1d27c:	strb	r1, [r2, #3]
   1d280:	strb	r1, [r2, #2]
   1d284:	strb	r1, [r2, #1]
   1d288:	adc	r1, r5, #0
   1d28c:	str	r6, [sl]
   1d290:	str	r1, [sl, #4]
   1d294:	mov	r3, r0
   1d298:	mov	r2, #0
   1d29c:	strb	r2, [r3, r6]!
   1d2a0:	strb	r2, [r3, #3]
   1d2a4:	strb	r2, [r3, #2]
   1d2a8:	strb	r2, [r3, #1]
   1d2ac:	adds	r2, r6, #4
   1d2b0:	adc	r3, r1, #0
   1d2b4:	strd	r2, [sl]
   1d2b8:	lsr	r1, r7, #24
   1d2bc:	strb	r7, [r0, r2]!
   1d2c0:	lsr	r6, r7, #16
   1d2c4:	lsr	r5, r7, #8
   1d2c8:	strb	r1, [r0, #3]
   1d2cc:	strb	r6, [r0, #2]
   1d2d0:	strb	r5, [r0, #1]
   1d2d4:	ldrb	r0, [r8]
   1d2d8:	adds	r4, r2, #4
   1d2dc:	adc	r5, r3, #0
   1d2e0:	cmp	r0, #0
   1d2e4:	strd	r4, [sl]
   1d2e8:	beq	1d39c <read_boolean_unary_expression@@Base+0x239c>
   1d2ec:	ldr	r9, [pc, #2284]	; 1dbe0 <read_boolean_unary_expression@@Base+0x2be0>
   1d2f0:	adds	r0, r2, #8
   1d2f4:	adc	r1, r3, #0
   1d2f8:	add	r9, pc, r9
   1d2fc:	ldr	r7, [r9, #4]
   1d300:	ldr	r6, [pc, #2268]	; 1dbe4 <read_boolean_unary_expression@@Base+0x2be4>
   1d304:	ldr	r6, [pc, r6]
   1d308:	subs	r0, r6, r0
   1d30c:	sbcs	r0, r7, r1
   1d310:	bcs	1d568 <read_boolean_unary_expression@@Base+0x2568>
   1d314:	mov	r0, #7
   1d318:	orr	r0, r0, #131072	; 0x20000
   1d31c:	adds	r0, r2, r0
   1d320:	adc	r1, r3, #0
   1d324:	mvn	r2, #0
   1d328:	and	r5, r1, r2
   1d32c:	mov	r1, #16646144	; 0xfe0000
   1d330:	orr	r1, r1, #-16777216	; 0xff000000
   1d334:	ldr	r4, [pc, #2268]	; 1dc18 <read_boolean_unary_expression@@Base+0x2c18>
   1d338:	and	r6, r0, r1
   1d33c:	ldr	r0, [pc, #2264]	; 1dc1c <read_boolean_unary_expression@@Base+0x2c1c>
   1d340:	mov	r1, r6
   1d344:	add	r4, pc, r4
   1d348:	ldr	r0, [pc, r0]
   1d34c:	bl	11eb4 <realloc@plt>
   1d350:	str	r6, [r9]
   1d354:	str	r5, [r9, #4]
   1d358:	str	r0, [r4]
   1d35c:	ldrb	r1, [r8]
   1d360:	ldr	r5, [sl, #4]
   1d364:	ldr	r4, [pc, #2228]	; 1dc20 <read_boolean_unary_expression@@Base+0x2c20>
   1d368:	mov	r3, r0
   1d36c:	mov	r2, #0
   1d370:	ldr	r4, [pc, r4]
   1d374:	strb	r2, [r3, r4]!
   1d378:	strb	r2, [r3, #3]
   1d37c:	strb	r2, [r3, #2]
   1d380:	strb	r2, [r3, #1]
   1d384:	adds	r2, r4, #4
   1d388:	adc	r3, r5, #0
   1d38c:	cmp	r1, #0
   1d390:	strd	r2, [sl]
   1d394:	beq	1d3c8 <read_boolean_unary_expression@@Base+0x23c8>
   1d398:	b	1d594 <read_boolean_unary_expression@@Base+0x2594>
   1d39c:	ldr	r0, [pc, #2104]	; 1dbdc <read_boolean_unary_expression@@Base+0x2bdc>
   1d3a0:	adds	r2, r2, #8
   1d3a4:	mov	r1, #0
   1d3a8:	adc	r3, r3, #0
   1d3ac:	ldr	r0, [pc, r0]
   1d3b0:	mov	r7, r0
   1d3b4:	strb	r1, [r7, r4]!
   1d3b8:	strb	r1, [r7, #3]
   1d3bc:	strb	r1, [r7, #2]
   1d3c0:	strb	r1, [r7, #1]
   1d3c4:	strd	r2, [sl]
   1d3c8:	mov	r7, r0
   1d3cc:	mov	r1, #0
   1d3d0:	strb	r1, [r7, r2]!
   1d3d4:	strb	r1, [r7, #3]
   1d3d8:	strb	r1, [r7, #2]
   1d3dc:	strb	r1, [r7, #1]
   1d3e0:	adds	r1, r2, #4
   1d3e4:	adc	r5, r3, #0
   1d3e8:	stm	sl, {r1, r5}
   1d3ec:	mov	r3, r0
   1d3f0:	mov	r2, #0
   1d3f4:	strb	r2, [r3, r1]!
   1d3f8:	strb	r2, [r3, #3]
   1d3fc:	strb	r2, [r3, #2]
   1d400:	strb	r2, [r3, #1]
   1d404:	adds	r2, r1, #4
   1d408:	adc	r3, r5, #0
   1d40c:	strd	r2, [sl]
   1d410:	mov	r7, r0
   1d414:	mov	r1, #0
   1d418:	strb	r1, [r7, r2]!
   1d41c:	strb	r1, [r7, #3]
   1d420:	strb	r1, [r7, #2]
   1d424:	strb	r1, [r7, #1]
   1d428:	adds	r1, r2, #4
   1d42c:	adc	r5, r3, #0
   1d430:	stm	sl, {r1, r5}
   1d434:	mov	r3, r0
   1d438:	mov	r2, #0
   1d43c:	strb	r2, [r3, r1]!
   1d440:	adds	r4, r1, #4
   1d444:	strb	r2, [r3, #3]
   1d448:	strb	r2, [r3, #2]
   1d44c:	strb	r2, [r3, #1]
   1d450:	adc	r3, r5, #0
   1d454:	str	r4, [sl]
   1d458:	str	r3, [sl, #4]
   1d45c:	mov	r2, r0
   1d460:	mov	r1, #0
   1d464:	strb	r1, [r2, r4]!
   1d468:	strb	r1, [r2, #3]
   1d46c:	strb	r1, [r2, #2]
   1d470:	strb	r1, [r2, #1]
   1d474:	adds	r2, r4, #4
   1d478:	adc	r1, r3, #0
   1d47c:	str	r2, [sl]
   1d480:	str	r1, [sl, #4]
   1d484:	mov	r3, r0
   1d488:	mov	r4, #0
   1d48c:	strb	r4, [r3, r2]!
   1d490:	mov	r7, #163	; 0xa3
   1d494:	strb	r7, [r3, #3]
   1d498:	strb	r4, [r3, #2]
   1d49c:	strb	r4, [r3, #1]
   1d4a0:	ldrb	r7, [r8]
   1d4a4:	adds	r6, r2, #4
   1d4a8:	adc	r3, r1, #0
   1d4ac:	cmp	r7, #1
   1d4b0:	str	r6, [sl]
   1d4b4:	str	r3, [sl, #4]
   1d4b8:	bne	1d52c <read_boolean_unary_expression@@Base+0x252c>
   1d4bc:	ldr	r8, [pc, #1852]	; 1dc00 <read_boolean_unary_expression@@Base+0x2c00>
   1d4c0:	adds	lr, r2, #8
   1d4c4:	adc	ip, r1, #0
   1d4c8:	add	r8, pc, r8
   1d4cc:	ldr	r5, [r8, #4]
   1d4d0:	ldr	r7, [pc, #1836]	; 1dc04 <read_boolean_unary_expression@@Base+0x2c04>
   1d4d4:	ldr	r7, [pc, r7]
   1d4d8:	subs	r7, r7, lr
   1d4dc:	sbcs	r7, r5, ip
   1d4e0:	bcs	1d52c <read_boolean_unary_expression@@Base+0x252c>
   1d4e4:	mov	r3, #7
   1d4e8:	orr	r3, r3, #131072	; 0x20000
   1d4ec:	adds	r2, r2, r3
   1d4f0:	adc	r1, r1, #0
   1d4f4:	mvn	r3, #0
   1d4f8:	and	r7, r1, r3
   1d4fc:	mov	r1, #16646144	; 0xfe0000
   1d500:	orr	r1, r1, #-16777216	; 0xff000000
   1d504:	ldr	r5, [pc, #1788]	; 1dc08 <read_boolean_unary_expression@@Base+0x2c08>
   1d508:	and	r6, r2, r1
   1d50c:	mov	r1, r6
   1d510:	add	r5, pc, r5
   1d514:	bl	11eb4 <realloc@plt>
   1d518:	strd	r6, [r8]
   1d51c:	str	r0, [r5]
   1d520:	ldr	r3, [sl, #4]
   1d524:	ldr	r6, [pc, #1760]	; 1dc0c <read_boolean_unary_expression@@Base+0x2c0c>
   1d528:	ldr	r6, [pc, r6]
   1d52c:	ldr	r0, [pc, #1756]	; 1dc10 <read_boolean_unary_expression@@Base+0x2c10>
   1d530:	ldr	r1, [pc, #1756]	; 1dc14 <read_boolean_unary_expression@@Base+0x2c14>
   1d534:	adds	r2, r6, #4
   1d538:	add	r0, pc, r0
   1d53c:	adc	r3, r3, #0
   1d540:	ldr	r1, [pc, r1]
   1d544:	strb	r4, [r1, r6]!
   1d548:	strb	r4, [r1, #3]
   1d54c:	strb	r4, [r1, #2]
   1d550:	strb	r4, [r1, #1]
   1d554:	mov	r1, #1
   1d558:	strd	r2, [sl]
   1d55c:	strb	r1, [r0]
   1d560:	sub	sp, fp, #28
   1d564:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d568:	ldr	r0, [pc, #1656]	; 1dbe8 <read_boolean_unary_expression@@Base+0x2be8>
   1d56c:	adds	r2, r2, #8
   1d570:	mov	r1, #0
   1d574:	adc	r3, r3, #0
   1d578:	ldr	r0, [pc, r0]
   1d57c:	mov	r7, r0
   1d580:	strb	r1, [r7, r4]!
   1d584:	strb	r1, [r7, #3]
   1d588:	strb	r1, [r7, #2]
   1d58c:	strb	r1, [r7, #1]
   1d590:	strd	r2, [sl]
   1d594:	ldr	r6, [r9, #4]
   1d598:	ldr	r1, [pc, #1668]	; 1dc24 <read_boolean_unary_expression@@Base+0x2c24>
   1d59c:	adds	ip, r4, #8
   1d5a0:	adc	r7, r5, #0
   1d5a4:	ldr	r1, [pc, r1]
   1d5a8:	subs	r1, r1, ip
   1d5ac:	sbcs	r1, r6, r7
   1d5b0:	bcs	1d6fc <read_boolean_unary_expression@@Base+0x26fc>
   1d5b4:	mov	r1, #7
   1d5b8:	orr	r1, r1, #131072	; 0x20000
   1d5bc:	adds	r1, r4, r1
   1d5c0:	adc	r2, r5, #0
   1d5c4:	mvn	r3, #0
   1d5c8:	and	r5, r2, r3
   1d5cc:	mov	r2, #16646144	; 0xfe0000
   1d5d0:	orr	r2, r2, #-16777216	; 0xff000000
   1d5d4:	ldr	r6, [pc, #1612]	; 1dc28 <read_boolean_unary_expression@@Base+0x2c28>
   1d5d8:	and	r4, r1, r2
   1d5dc:	mov	r1, r4
   1d5e0:	add	r6, pc, r6
   1d5e4:	bl	11eb4 <realloc@plt>
   1d5e8:	str	r0, [r6]
   1d5ec:	strd	r4, [r9]
   1d5f0:	ldrb	r7, [r8]
   1d5f4:	ldr	r3, [sl, #4]
   1d5f8:	ldr	r2, [pc, #1580]	; 1dc2c <read_boolean_unary_expression@@Base+0x2c2c>
   1d5fc:	mov	r6, r0
   1d600:	mov	r1, #0
   1d604:	ldr	r2, [pc, r2]
   1d608:	strb	r1, [r6, r2]!
   1d60c:	strb	r1, [r6, #3]
   1d610:	strb	r1, [r6, #2]
   1d614:	strb	r1, [r6, #1]
   1d618:	adds	r1, r2, #4
   1d61c:	adc	r5, r3, #0
   1d620:	cmp	r7, #1
   1d624:	stm	sl, {r1, r5}
   1d628:	bne	1d3ec <read_boolean_unary_expression@@Base+0x23ec>
   1d62c:	b	1d720 <read_boolean_unary_expression@@Base+0x2720>
   1d630:	mov	r2, r0
   1d634:	mov	r1, #0
   1d638:	strb	r1, [r2, r3]!
   1d63c:	adds	r6, r3, #4
   1d640:	strb	r1, [r2, #3]
   1d644:	strb	r1, [r2, #2]
   1d648:	strb	r1, [r2, #1]
   1d64c:	adc	r1, r5, #0
   1d650:	str	r6, [sl]
   1d654:	str	r1, [sl, #4]
   1d658:	ldr	r4, [r9, #4]
   1d65c:	ldr	r2, [pc, #1376]	; 1dbc4 <read_boolean_unary_expression@@Base+0x2bc4>
   1d660:	adds	ip, r3, #8
   1d664:	adc	r7, r5, #0
   1d668:	ldr	r2, [pc, r2]
   1d66c:	subs	r2, r2, ip
   1d670:	sbcs	r2, r4, r7
   1d674:	bcs	1d7c0 <read_boolean_unary_expression@@Base+0x27c0>
   1d678:	mov	r1, #7
   1d67c:	orr	r1, r1, #131072	; 0x20000
   1d680:	adds	r1, r3, r1
   1d684:	adc	r2, r5, #0
   1d688:	mvn	r3, #0
   1d68c:	and	r5, r2, r3
   1d690:	mov	r2, #16646144	; 0xfe0000
   1d694:	orr	r2, r2, #-16777216	; 0xff000000
   1d698:	ldr	r4, [pc, #1320]	; 1dbc8 <read_boolean_unary_expression@@Base+0x2bc8>
   1d69c:	and	r6, r1, r2
   1d6a0:	mov	r1, r6
   1d6a4:	add	r4, pc, r4
   1d6a8:	bl	11eb4 <realloc@plt>
   1d6ac:	str	r6, [r9]
   1d6b0:	str	r5, [r9, #4]
   1d6b4:	str	r0, [r4]
   1d6b8:	ldrb	r5, [r8]
   1d6bc:	ldr	r1, [sl, #4]
   1d6c0:	ldr	r6, [pc, #1284]	; 1dbcc <read_boolean_unary_expression@@Base+0x2bcc>
   1d6c4:	mov	r3, r0
   1d6c8:	mov	r2, #0
   1d6cc:	mov	r7, #1
   1d6d0:	ldr	r6, [pc, r6]
   1d6d4:	strb	r2, [r3, r6]!
   1d6d8:	strb	r2, [r3, #3]
   1d6dc:	strb	r2, [r3, #2]
   1d6e0:	strb	r2, [r3, #1]
   1d6e4:	adds	r2, r6, #4
   1d6e8:	adc	r3, r1, #0
   1d6ec:	cmp	r5, #1
   1d6f0:	strd	r2, [sl]
   1d6f4:	bne	1d2b8 <read_boolean_unary_expression@@Base+0x22b8>
   1d6f8:	b	1d7e4 <read_boolean_unary_expression@@Base+0x27e4>
   1d6fc:	mov	r7, r0
   1d700:	mov	r1, #0
   1d704:	strb	r1, [r7, r2]!
   1d708:	strb	r1, [r7, #3]
   1d70c:	strb	r1, [r7, #2]
   1d710:	strb	r1, [r7, #1]
   1d714:	adds	r1, r2, #4
   1d718:	adc	r5, r3, #0
   1d71c:	stm	sl, {r1, r5}
   1d720:	ldr	r4, [r9, #4]
   1d724:	ldr	r6, [pc, #1284]	; 1dc30 <read_boolean_unary_expression@@Base+0x2c30>
   1d728:	adds	r7, r2, #8
   1d72c:	adc	ip, r3, #0
   1d730:	ldr	r6, [pc, r6]
   1d734:	subs	r7, r6, r7
   1d738:	sbcs	r7, r4, ip
   1d73c:	bcs	1d858 <read_boolean_unary_expression@@Base+0x2858>
   1d740:	mov	r1, #7
   1d744:	orr	r1, r1, #131072	; 0x20000
   1d748:	adds	r1, r2, r1
   1d74c:	adc	r2, r3, #0
   1d750:	mvn	r3, #0
   1d754:	and	r5, r2, r3
   1d758:	mov	r2, #16646144	; 0xfe0000
   1d75c:	orr	r2, r2, #-16777216	; 0xff000000
   1d760:	ldr	r4, [pc, #1228]	; 1dc34 <read_boolean_unary_expression@@Base+0x2c34>
   1d764:	and	r6, r1, r2
   1d768:	mov	r1, r6
   1d76c:	add	r4, pc, r4
   1d770:	bl	11eb4 <realloc@plt>
   1d774:	str	r6, [r9]
   1d778:	str	r5, [r9, #4]
   1d77c:	str	r0, [r4]
   1d780:	ldrb	r7, [r8]
   1d784:	ldr	r5, [sl, #4]
   1d788:	ldr	r1, [pc, #1192]	; 1dc38 <read_boolean_unary_expression@@Base+0x2c38>
   1d78c:	mov	r3, r0
   1d790:	mov	r2, #0
   1d794:	ldr	r1, [pc, r1]
   1d798:	strb	r2, [r3, r1]!
   1d79c:	strb	r2, [r3, #3]
   1d7a0:	strb	r2, [r3, #2]
   1d7a4:	strb	r2, [r3, #1]
   1d7a8:	adds	r2, r1, #4
   1d7ac:	adc	r3, r5, #0
   1d7b0:	cmp	r7, #1
   1d7b4:	strd	r2, [sl]
   1d7b8:	bne	1d410 <read_boolean_unary_expression@@Base+0x2410>
   1d7bc:	b	1d87c <read_boolean_unary_expression@@Base+0x287c>
   1d7c0:	mov	r3, r0
   1d7c4:	mov	r2, #0
   1d7c8:	strb	r2, [r3, r6]!
   1d7cc:	strb	r2, [r3, #3]
   1d7d0:	strb	r2, [r3, #2]
   1d7d4:	strb	r2, [r3, #1]
   1d7d8:	adds	r2, r6, #4
   1d7dc:	adc	r3, r1, #0
   1d7e0:	strd	r2, [sl]
   1d7e4:	ldr	r4, [r9, #4]
   1d7e8:	ldr	r5, [pc, #992]	; 1dbd0 <read_boolean_unary_expression@@Base+0x2bd0>
   1d7ec:	adds	lr, r6, #8
   1d7f0:	adc	ip, r1, #0
   1d7f4:	mov	r7, #1
   1d7f8:	ldr	r5, [pc, r5]
   1d7fc:	subs	r5, r5, lr
   1d800:	sbcs	r5, r4, ip
   1d804:	bcs	1d2b8 <read_boolean_unary_expression@@Base+0x22b8>
   1d808:	mov	r2, #7
   1d80c:	orr	r2, r2, #131072	; 0x20000
   1d810:	adds	r2, r6, r2
   1d814:	adc	r1, r1, #0
   1d818:	mvn	r3, #0
   1d81c:	and	r5, r1, r3
   1d820:	mov	r1, #16646144	; 0xfe0000
   1d824:	orr	r1, r1, #-16777216	; 0xff000000
   1d828:	ldr	r4, [pc, #932]	; 1dbd4 <read_boolean_unary_expression@@Base+0x2bd4>
   1d82c:	and	r6, r2, r1
   1d830:	mov	r1, r6
   1d834:	add	r4, pc, r4
   1d838:	bl	11eb4 <realloc@plt>
   1d83c:	str	r6, [r9]
   1d840:	str	r5, [r9, #4]
   1d844:	str	r0, [r4]
   1d848:	ldr	r3, [sl, #4]
   1d84c:	ldr	r2, [pc, #900]	; 1dbd8 <read_boolean_unary_expression@@Base+0x2bd8>
   1d850:	ldr	r2, [pc, r2]
   1d854:	b	1d2b8 <read_boolean_unary_expression@@Base+0x22b8>
   1d858:	mov	r3, r0
   1d85c:	mov	r2, #0
   1d860:	strb	r2, [r3, r1]!
   1d864:	strb	r2, [r3, #3]
   1d868:	strb	r2, [r3, #2]
   1d86c:	strb	r2, [r3, #1]
   1d870:	adds	r2, r1, #4
   1d874:	adc	r3, r5, #0
   1d878:	strd	r2, [sl]
   1d87c:	ldr	r4, [r9, #4]
   1d880:	ldr	r6, [pc, #948]	; 1dc3c <read_boolean_unary_expression@@Base+0x2c3c>
   1d884:	adds	r7, r1, #8
   1d888:	adc	ip, r5, #0
   1d88c:	ldr	r6, [pc, r6]
   1d890:	subs	r7, r6, r7
   1d894:	sbcs	r7, r4, ip
   1d898:	bcs	1d944 <read_boolean_unary_expression@@Base+0x2944>
   1d89c:	mov	r2, #7
   1d8a0:	orr	r2, r2, #131072	; 0x20000
   1d8a4:	adds	r1, r1, r2
   1d8a8:	adc	r2, r5, #0
   1d8ac:	mvn	r3, #0
   1d8b0:	and	r5, r2, r3
   1d8b4:	mov	r2, #16646144	; 0xfe0000
   1d8b8:	orr	r2, r2, #-16777216	; 0xff000000
   1d8bc:	ldr	r4, [pc, #892]	; 1dc40 <read_boolean_unary_expression@@Base+0x2c40>
   1d8c0:	and	r6, r1, r2
   1d8c4:	mov	r1, r6
   1d8c8:	add	r4, pc, r4
   1d8cc:	bl	11eb4 <realloc@plt>
   1d8d0:	str	r6, [r9]
   1d8d4:	str	r5, [r9, #4]
   1d8d8:	str	r0, [r4]
   1d8dc:	ldrb	r7, [r8]
   1d8e0:	ldr	r3, [sl, #4]
   1d8e4:	ldr	r2, [pc, #856]	; 1dc44 <read_boolean_unary_expression@@Base+0x2c44>
   1d8e8:	mov	r6, r0
   1d8ec:	mov	r1, #0
   1d8f0:	ldr	r2, [pc, r2]
   1d8f4:	strb	r1, [r6, r2]!
   1d8f8:	strb	r1, [r6, #3]
   1d8fc:	strb	r1, [r6, #2]
   1d900:	strb	r1, [r6, #1]
   1d904:	adds	r1, r2, #4
   1d908:	adc	r5, r3, #0
   1d90c:	cmp	r7, #1
   1d910:	stm	sl, {r1, r5}
   1d914:	bne	1d434 <read_boolean_unary_expression@@Base+0x2434>
   1d918:	b	1d968 <read_boolean_unary_expression@@Base+0x2968>
   1d91c:	ldr	r1, [pc, #616]	; 1db8c <read_boolean_unary_expression@@Base+0x2b8c>
   1d920:	add	r1, pc, r1
   1d924:	ldr	r0, [pc, #600]	; 1db84 <read_boolean_unary_expression@@Base+0x2b84>
   1d928:	ldr	r0, [pc, r0]
   1d92c:	ldr	r0, [r0]
   1d930:	ldr	r2, [pc, #592]	; 1db88 <read_boolean_unary_expression@@Base+0x2b88>
   1d934:	ldr	r2, [pc, r2]
   1d938:	sub	sp, fp, #28
   1d93c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d940:	b	11f44 <fprintf@plt>
   1d944:	mov	r7, r0
   1d948:	mov	r1, #0
   1d94c:	strb	r1, [r7, r2]!
   1d950:	strb	r1, [r7, #3]
   1d954:	strb	r1, [r7, #2]
   1d958:	strb	r1, [r7, #1]
   1d95c:	adds	r1, r2, #4
   1d960:	adc	r5, r3, #0
   1d964:	stm	sl, {r1, r5}
   1d968:	ldr	r4, [r9, #4]
   1d96c:	ldr	r6, [pc, #724]	; 1dc48 <read_boolean_unary_expression@@Base+0x2c48>
   1d970:	adds	r7, r2, #8
   1d974:	adc	ip, r3, #0
   1d978:	ldr	r6, [pc, r6]
   1d97c:	subs	r7, r6, r7
   1d980:	sbcs	r7, r4, ip
   1d984:	bcs	1da0c <read_boolean_unary_expression@@Base+0x2a0c>
   1d988:	mov	r1, #7
   1d98c:	orr	r1, r1, #131072	; 0x20000
   1d990:	adds	r1, r2, r1
   1d994:	adc	r2, r3, #0
   1d998:	mvn	r3, #0
   1d99c:	and	r5, r2, r3
   1d9a0:	mov	r2, #16646144	; 0xfe0000
   1d9a4:	orr	r2, r2, #-16777216	; 0xff000000
   1d9a8:	ldr	r4, [pc, #668]	; 1dc4c <read_boolean_unary_expression@@Base+0x2c4c>
   1d9ac:	and	r6, r1, r2
   1d9b0:	mov	r1, r6
   1d9b4:	add	r4, pc, r4
   1d9b8:	bl	11eb4 <realloc@plt>
   1d9bc:	str	r6, [r9]
   1d9c0:	str	r5, [r9, #4]
   1d9c4:	str	r0, [r4]
   1d9c8:	ldrb	r2, [r8]
   1d9cc:	ldr	r5, [sl, #4]
   1d9d0:	ldr	r1, [pc, #632]	; 1dc50 <read_boolean_unary_expression@@Base+0x2c50>
   1d9d4:	mov	r7, r0
   1d9d8:	mov	r3, #0
   1d9dc:	ldr	r1, [pc, r1]
   1d9e0:	adds	r4, r1, #4
   1d9e4:	strb	r3, [r7, r1]!
   1d9e8:	str	r4, [sl]
   1d9ec:	strb	r3, [r7, #3]
   1d9f0:	strb	r3, [r7, #2]
   1d9f4:	strb	r3, [r7, #1]
   1d9f8:	adc	r3, r5, #0
   1d9fc:	cmp	r2, #1
   1da00:	str	r3, [sl, #4]
   1da04:	bne	1d45c <read_boolean_unary_expression@@Base+0x245c>
   1da08:	b	1da34 <read_boolean_unary_expression@@Base+0x2a34>
   1da0c:	mov	r3, r0
   1da10:	mov	r2, #0
   1da14:	strb	r2, [r3, r1]!
   1da18:	adds	r4, r1, #4
   1da1c:	strb	r2, [r3, #3]
   1da20:	strb	r2, [r3, #2]
   1da24:	strb	r2, [r3, #1]
   1da28:	adc	r3, r5, #0
   1da2c:	str	r4, [sl]
   1da30:	str	r3, [sl, #4]
   1da34:	ldr	r6, [r9, #4]
   1da38:	ldr	r2, [pc, #532]	; 1dc54 <read_boolean_unary_expression@@Base+0x2c54>
   1da3c:	adds	ip, r1, #8
   1da40:	adc	r7, r5, #0
   1da44:	ldr	r2, [pc, r2]
   1da48:	subs	r2, r2, ip
   1da4c:	sbcs	r2, r6, r7
   1da50:	bcs	1dad8 <read_boolean_unary_expression@@Base+0x2ad8>
   1da54:	mov	r2, #7
   1da58:	orr	r2, r2, #131072	; 0x20000
   1da5c:	adds	r1, r1, r2
   1da60:	adc	r2, r5, #0
   1da64:	mvn	r3, #0
   1da68:	and	r5, r2, r3
   1da6c:	mov	r2, #16646144	; 0xfe0000
   1da70:	orr	r2, r2, #-16777216	; 0xff000000
   1da74:	ldr	r4, [pc, #368]	; 1dbec <read_boolean_unary_expression@@Base+0x2bec>
   1da78:	and	r6, r1, r2
   1da7c:	mov	r1, r6
   1da80:	add	r4, pc, r4
   1da84:	bl	11eb4 <realloc@plt>
   1da88:	str	r6, [r9]
   1da8c:	str	r5, [r9, #4]
   1da90:	str	r0, [r4]
   1da94:	ldrb	r7, [r8]
   1da98:	ldr	r3, [sl, #4]
   1da9c:	ldr	r4, [pc, #332]	; 1dbf0 <read_boolean_unary_expression@@Base+0x2bf0>
   1daa0:	mov	r2, r0
   1daa4:	mov	r1, #0
   1daa8:	ldr	r4, [pc, r4]
   1daac:	strb	r1, [r2, r4]!
   1dab0:	strb	r1, [r2, #3]
   1dab4:	strb	r1, [r2, #2]
   1dab8:	strb	r1, [r2, #1]
   1dabc:	adds	r2, r4, #4
   1dac0:	adc	r1, r3, #0
   1dac4:	cmp	r7, #0
   1dac8:	str	r2, [sl]
   1dacc:	str	r1, [sl, #4]
   1dad0:	beq	1d484 <read_boolean_unary_expression@@Base+0x2484>
   1dad4:	b	1db00 <read_boolean_unary_expression@@Base+0x2b00>
   1dad8:	mov	r2, r0
   1dadc:	mov	r1, #0
   1dae0:	strb	r1, [r2, r4]!
   1dae4:	strb	r1, [r2, #3]
   1dae8:	strb	r1, [r2, #2]
   1daec:	strb	r1, [r2, #1]
   1daf0:	adds	r2, r4, #4
   1daf4:	adc	r1, r3, #0
   1daf8:	str	r2, [sl]
   1dafc:	str	r1, [sl, #4]
   1db00:	ldr	r5, [r9, #4]
   1db04:	ldr	r6, [pc, #232]	; 1dbf4 <read_boolean_unary_expression@@Base+0x2bf4>
   1db08:	adds	r7, r4, #8
   1db0c:	adc	ip, r3, #0
   1db10:	ldr	r6, [pc, r6]
   1db14:	subs	r7, r6, r7
   1db18:	sbcs	r7, r5, ip
   1db1c:	bcs	1d484 <read_boolean_unary_expression@@Base+0x2484>
   1db20:	mov	r1, #7
   1db24:	orr	r1, r1, #131072	; 0x20000
   1db28:	adds	r1, r4, r1
   1db2c:	adc	r2, r3, #0
   1db30:	mvn	r3, #0
   1db34:	and	r7, r2, r3
   1db38:	mov	r2, #16646144	; 0xfe0000
   1db3c:	orr	r2, r2, #-16777216	; 0xff000000
   1db40:	ldr	r5, [pc, #176]	; 1dbf8 <read_boolean_unary_expression@@Base+0x2bf8>
   1db44:	and	r6, r1, r2
   1db48:	mov	r1, r6
   1db4c:	add	r5, pc, r5
   1db50:	bl	11eb4 <realloc@plt>
   1db54:	strd	r6, [r9]
   1db58:	str	r0, [r5]
   1db5c:	ldr	r1, [sl, #4]
   1db60:	ldr	r2, [pc, #148]	; 1dbfc <read_boolean_unary_expression@@Base+0x2bfc>
   1db64:	ldr	r2, [pc, r2]
   1db68:	b	1d484 <read_boolean_unary_expression@@Base+0x2484>
   1db6c:	andeq	r5, r1, ip, asr #32
   1db70:	andeq	r5, r1, ip, asr #32
   1db74:	andeq	r5, r1, r0, asr #32
   1db78:	andeq	r5, r1, r4, lsr #32
   1db7c:	andeq	r4, r1, r8, asr pc
   1db80:	andeq	r2, r0, sp, ror #9
   1db84:	muleq	r1, r0, r7
   1db88:	andeq	r4, r1, ip, lsl #12
   1db8c:	andeq	r1, r0, r6, asr ip
   1db90:	andeq	r4, r1, r8, asr sp
   1db94:	andeq	r5, r1, r4, lsl r0
   1db98:	andeq	r5, r1, r8
   1db9c:	strdeq	r4, [r1], -ip
   1dba0:			; <UNDEFINED> instruction: 0x00014fbc
   1dba4:			; <UNDEFINED> instruction: 0x00014fb8
   1dba8:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   1dbac:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1dbb0:	muleq	r1, r4, lr
   1dbb4:	andeq	r4, r1, r8, ror lr
   1dbb8:	andeq	r4, r1, r4, lsl #28
   1dbbc:	andeq	r4, r1, r4, asr #27
   1dbc0:	andeq	r4, r1, r8, lsr #27
   1dbc4:	andeq	r4, r1, r8, ror #17
   1dbc8:	andeq	r4, r1, r8, lsr #17
   1dbcc:	andeq	r4, r1, r8, lsl #17
   1dbd0:	andeq	r4, r1, r8, asr r7
   1dbd4:	andeq	r4, r1, r8, lsl r7
   1dbd8:	andeq	r4, r1, r8, lsl #14
   1dbdc:	andeq	r4, r1, r0, lsr #23
   1dbe0:	andeq	r4, r1, r8, asr ip
   1dbe4:	andeq	r4, r1, ip, asr #24
   1dbe8:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1dbec:	andeq	r4, r1, ip, asr #9
   1dbf0:			; <UNDEFINED> instruction: 0x000144b0
   1dbf4:	andeq	r4, r1, r0, asr #8
   1dbf8:	andeq	r4, r1, r0, lsl #8
   1dbfc:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1dc00:	andeq	r4, r1, r8, lsl #21
   1dc04:	andeq	r4, r1, ip, ror sl
   1dc08:	andeq	r4, r1, ip, lsr sl
   1dc0c:	andeq	r4, r1, r0, lsr sl
   1dc10:	andeq	r4, r1, r8, lsr #20
   1dc14:	andeq	r4, r1, ip, lsl #20
   1dc18:	andeq	r4, r1, r8, lsl #24
   1dc1c:	andeq	r4, r1, r4, lsl #24
   1dc20:	andeq	r4, r1, r8, ror #23
   1dc24:	andeq	r4, r1, ip, lsr #19
   1dc28:	andeq	r4, r1, ip, ror #18
   1dc2c:	andeq	r4, r1, r4, asr r9
   1dc30:	andeq	r4, r1, r0, lsr #16
   1dc34:	andeq	r4, r1, r0, ror #15
   1dc38:	andeq	r4, r1, r4, asr #15
   1dc3c:	andeq	r4, r1, r4, asr #13
   1dc40:	andeq	r4, r1, r4, lsl #13
   1dc44:	andeq	r4, r1, r8, ror #12
   1dc48:	ldrdeq	r4, [r1], -r8
   1dc4c:	muleq	r1, r8, r5
   1dc50:	andeq	r4, r1, ip, ror r5
   1dc54:	andeq	r4, r1, ip, lsl #10
   1dc58:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dc5c:	add	fp, sp, #28
   1dc60:	sub	sp, sp, #4
   1dc64:	ldr	r0, [pc, #496]	; 1de5c <read_boolean_unary_expression@@Base+0x2e5c>
   1dc68:	ldr	r0, [pc, r0]
   1dc6c:	cmp	r0, #0
   1dc70:	beq	1de04 <read_boolean_unary_expression@@Base+0x2e04>
   1dc74:	ldr	sl, [pc, #484]	; 1de60 <read_boolean_unary_expression@@Base+0x2e60>
   1dc78:	mov	r5, #0
   1dc7c:	mov	r1, #0
   1dc80:	add	sl, pc, sl
   1dc84:	ldrb	r0, [sl]
   1dc88:	ldr	r8, [pc, #468]	; 1de64 <read_boolean_unary_expression@@Base+0x2e64>
   1dc8c:	ldr	r4, [pc, #468]	; 1de68 <read_boolean_unary_expression@@Base+0x2e68>
   1dc90:	cmp	r0, #1
   1dc94:	add	r8, pc, r8
   1dc98:	add	r4, pc, r4
   1dc9c:	bne	1dd18 <read_boolean_unary_expression@@Base+0x2d18>
   1dca0:	ldr	r9, [pc, #452]	; 1de6c <read_boolean_unary_expression@@Base+0x2e6c>
   1dca4:	ldr	r0, [r8, #4]
   1dca8:	ldr	r2, [pc, #448]	; 1de70 <read_boolean_unary_expression@@Base+0x2e70>
   1dcac:	add	r9, pc, r9
   1dcb0:	mov	ip, r4
   1dcb4:	mov	r1, #1
   1dcb8:	ldr	r2, [pc, r2]
   1dcbc:	ldr	r7, [r9, #4]
   1dcc0:	ldr	r4, [pc, #428]	; 1de74 <read_boolean_unary_expression@@Base+0x2e74>
   1dcc4:	adds	r3, r2, #8
   1dcc8:	adc	r6, r0, #0
   1dccc:	ldr	r4, [pc, r4]
   1dcd0:	subs	r3, r4, r3
   1dcd4:	mov	r4, ip
   1dcd8:	sbcs	r3, r7, r6
   1dcdc:	bcs	1dd18 <read_boolean_unary_expression@@Base+0x2d18>
   1dce0:	mov	r1, #7
   1dce4:	orr	r1, r1, #131072	; 0x20000
   1dce8:	adds	r1, r2, r1
   1dcec:	adc	r7, r0, #0
   1dcf0:	mov	r0, #16646144	; 0xfe0000
   1dcf4:	orr	r0, r0, #-16777216	; 0xff000000
   1dcf8:	and	r6, r1, r0
   1dcfc:	ldr	r0, [pc, #372]	; 1de78 <read_boolean_unary_expression@@Base+0x2e78>
   1dd00:	mov	r1, r6
   1dd04:	ldr	r0, [pc, r0]
   1dd08:	bl	11eb4 <realloc@plt>
   1dd0c:	ldrb	r1, [sl]
   1dd10:	strd	r6, [r9]
   1dd14:	str	r0, [r4]
   1dd18:	ldr	r2, [pc, #348]	; 1de7c <read_boolean_unary_expression@@Base+0x2e7c>
   1dd1c:	ldr	r2, [pc, r2]
   1dd20:	ldr	r0, [pc, #344]	; 1de80 <read_boolean_unary_expression@@Base+0x2e80>
   1dd24:	ldr	r0, [pc, r0]
   1dd28:	ldr	r3, [r8, #4]
   1dd2c:	mov	r7, r0
   1dd30:	strb	r5, [r7, r2]!
   1dd34:	adds	r2, r2, #8
   1dd38:	adc	r3, r3, #0
   1dd3c:	strb	r5, [r7, #5]
   1dd40:	strb	r5, [r7, #3]
   1dd44:	strb	r5, [r7, #2]
   1dd48:	strb	r5, [r7, #1]
   1dd4c:	strb	r5, [r7, #4]!
   1dd50:	cmp	r1, #0
   1dd54:	strb	r5, [r7, #3]
   1dd58:	strb	r5, [r7, #2]
   1dd5c:	strd	r2, [r8]
   1dd60:	beq	1dd88 <read_boolean_unary_expression@@Base+0x2d88>
   1dd64:	ldr	r3, [pc, #280]	; 1de84 <read_boolean_unary_expression@@Base+0x2e84>
   1dd68:	mov	r1, r2
   1dd6c:	mov	r2, #1
   1dd70:	ldr	r3, [pc, r3]
   1dd74:	bl	11ec0 <fwrite@plt>
   1dd78:	ldr	r0, [pc, #264]	; 1de88 <read_boolean_unary_expression@@Base+0x2e88>
   1dd7c:	ldr	r0, [pc, r0]
   1dd80:	bl	11e6c <free@plt>
   1dd84:	b	1ddcc <read_boolean_unary_expression@@Base+0x2dcc>
   1dd88:	ldr	r1, [pc, #252]	; 1de8c <read_boolean_unary_expression@@Base+0x2e8c>
   1dd8c:	mov	r2, #4
   1dd90:	ldr	r1, [pc, r1]
   1dd94:	bl	11fe0 <msync@plt>
   1dd98:	cmn	r0, #1
   1dd9c:	beq	1de18 <read_boolean_unary_expression@@Base+0x2e18>
   1dda0:	ldr	r1, [pc, #244]	; 1de9c <read_boolean_unary_expression@@Base+0x2e9c>
   1dda4:	ldr	r1, [pc, r1]
   1dda8:	ldr	r0, [pc, #240]	; 1dea0 <read_boolean_unary_expression@@Base+0x2ea0>
   1ddac:	ldr	r0, [pc, r0]
   1ddb0:	bl	11fbc <munmap@plt>
   1ddb4:	ldr	r0, [pc, #232]	; 1dea4 <read_boolean_unary_expression@@Base+0x2ea4>
   1ddb8:	mov	r1, #0
   1ddbc:	str	r1, [r4]
   1ddc0:	add	r0, pc, r0
   1ddc4:	str	r1, [r0]
   1ddc8:	str	r1, [r0, #4]
   1ddcc:	ldr	r0, [pc, #212]	; 1dea8 <read_boolean_unary_expression@@Base+0x2ea8>
   1ddd0:	ldr	r0, [pc, r0]
   1ddd4:	bl	11e60 <fflush@plt>
   1ddd8:	ldr	r0, [pc, #204]	; 1deac <read_boolean_unary_expression@@Base+0x2eac>
   1dddc:	ldr	r0, [pc, r0]
   1dde0:	bl	1e358 <__gcov_flush@@Base+0x304>
   1dde4:	ldr	r0, [pc, #196]	; 1deb0 <read_boolean_unary_expression@@Base+0x2eb0>
   1dde8:	ldr	r0, [pc, r0]
   1ddec:	bl	11fa4 <fclose@plt>
   1ddf0:	ldr	r0, [pc, #188]	; 1deb4 <read_boolean_unary_expression@@Base+0x2eb4>
   1ddf4:	mov	r1, #0
   1ddf8:	str	r1, [r4]
   1ddfc:	add	r0, pc, r0
   1de00:	str	r1, [r0]
   1de04:	ldr	r0, [pc, #172]	; 1deb8 <read_boolean_unary_expression@@Base+0x2eb8>
   1de08:	ldr	r0, [pc, r0]
   1de0c:	sub	sp, fp, #28
   1de10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1de14:	b	11e6c <free@plt>
   1de18:	bl	11f50 <__errno_location@plt>
   1de1c:	ldr	r1, [pc, #108]	; 1de90 <read_boolean_unary_expression@@Base+0x2e90>
   1de20:	mov	r6, r4
   1de24:	ldr	r1, [pc, r1]
   1de28:	ldr	r0, [r0]
   1de2c:	ldr	r4, [r1]
   1de30:	ldr	r5, [pc, #92]	; 1de94 <read_boolean_unary_expression@@Base+0x2e94>
   1de34:	ldr	r5, [pc, r5]
   1de38:	bl	11efc <strerror@plt>
   1de3c:	ldr	r1, [pc, #84]	; 1de98 <read_boolean_unary_expression@@Base+0x2e98>
   1de40:	mov	r3, r0
   1de44:	mov	r0, r4
   1de48:	add	r1, pc, r1
   1de4c:	mov	r2, r5
   1de50:	mov	r4, r6
   1de54:	bl	11f44 <fprintf@plt>
   1de58:	b	1dda0 <read_boolean_unary_expression@@Base+0x2da0>
   1de5c:	andeq	r4, r1, r0, ror #5
   1de60:	andeq	r4, r1, r4, asr #5
   1de64:	andeq	r4, r1, r4, asr #5
   1de68:			; <UNDEFINED> instruction: 0x000142b4
   1de6c:	andeq	r4, r1, r4, lsr #5
   1de70:	andeq	r4, r1, r0, lsr #5
   1de74:	andeq	r4, r1, r4, lsl #5
   1de78:	andeq	r4, r1, r8, asr #4
   1de7c:	andeq	r4, r1, ip, lsr r2
   1de80:	andeq	r4, r1, r8, lsr #4
   1de84:	ldrdeq	r4, [r1], -r8
   1de88:	ldrdeq	r4, [r1], -r0
   1de8c:	andeq	r4, r1, r0, ror #3
   1de90:	muleq	r1, r4, r2
   1de94:	andeq	r4, r1, ip, lsl #2
   1de98:	muleq	r0, ip, r7
   1de9c:	andeq	r4, r1, ip, asr #3
   1dea0:	andeq	r4, r1, r0, lsr #3
   1dea4:			; <UNDEFINED> instruction: 0x000141b0
   1dea8:	andeq	r4, r1, r8, ror r1
   1deac:	andeq	r3, r1, r0, lsl #6
   1deb0:	andeq	r4, r1, r0, ror #2
   1deb4:	andeq	r4, r1, ip, asr #2
   1deb8:	andeq	r4, r1, r8, lsr r1
   1debc:	push	{r4, sl, fp, lr}
   1dec0:	add	fp, sp, #8
   1dec4:	mov	r4, r0
   1dec8:	mov	r0, #12
   1decc:	bl	11ee4 <malloc@plt>
   1ded0:	ldr	r1, [pc, #60]	; 1df14 <read_boolean_unary_expression@@Base+0x2f14>
   1ded4:	mov	r2, #0
   1ded8:	add	r1, pc, r1
   1dedc:	stm	r0, {r1, r4}
   1dee0:	str	r2, [r0, #8]
   1dee4:	ldr	r1, [pc, #44]	; 1df18 <read_boolean_unary_expression@@Base+0x2f18>
   1dee8:	ldr	r1, [pc, r1]
   1deec:	mov	r2, r1
   1def0:	ldr	r3, [r2], #4
   1def4:	ldr	r4, [r2]
   1def8:	cmp	r3, #0
   1defc:	mov	r3, r2
   1df00:	addne	r3, r4, #8
   1df04:	moveq	r2, r1
   1df08:	str	r0, [r3]
   1df0c:	str	r0, [r2]
   1df10:	pop	{r4, sl, fp, pc}
   1df14:	andeq	r4, r1, ip, lsl #1
   1df18:	andeq	r3, r1, r8, asr #3
   1df1c:	push	{r4, r5, fp, lr}
   1df20:	add	fp, sp, #8
   1df24:	ldr	r0, [pc, #64]	; 1df6c <read_boolean_unary_expression@@Base+0x2f6c>
   1df28:	ldr	r0, [pc, r0]
   1df2c:	ldr	r4, [r0]
   1df30:	cmp	r4, #0
   1df34:	beq	1df68 <read_boolean_unary_expression@@Base+0x2f68>
   1df38:	ldr	r5, [pc, #48]	; 1df70 <read_boolean_unary_expression@@Base+0x2f70>
   1df3c:	add	r5, pc, r5
   1df40:	b	1df50 <read_boolean_unary_expression@@Base+0x2f50>
   1df44:	ldr	r4, [r4, #8]
   1df48:	cmp	r4, #0
   1df4c:	beq	1df68 <read_boolean_unary_expression@@Base+0x2f68>
   1df50:	ldr	r0, [r4]
   1df54:	cmp	r0, r5
   1df58:	bne	1df44 <read_boolean_unary_expression@@Base+0x2f44>
   1df5c:	ldr	r0, [r4, #4]
   1df60:	blx	r0
   1df64:	b	1df44 <read_boolean_unary_expression@@Base+0x2f44>
   1df68:	pop	{r4, r5, fp, pc}
   1df6c:	andeq	r3, r1, r8, lsl #3
   1df70:	andeq	r4, r1, r8, lsr #32
   1df74:	push	{r4, r5, r6, r7, fp, lr}
   1df78:	add	fp, sp, #16
   1df7c:	ldr	r4, [pc, #104]	; 1dfec <read_boolean_unary_expression@@Base+0x2fec>
   1df80:	ldr	r4, [pc, r4]
   1df84:	ldr	r0, [r4]
   1df88:	cmp	r0, #0
   1df8c:	beq	1dfe8 <read_boolean_unary_expression@@Base+0x2fe8>
   1df90:	ldr	r5, [pc, #88]	; 1dff0 <read_boolean_unary_expression@@Base+0x2ff0>
   1df94:	mov	r6, #0
   1df98:	add	r5, pc, r5
   1df9c:	b	1dfd0 <read_boolean_unary_expression@@Base+0x2fd0>
   1dfa0:	ldr	r1, [r4]
   1dfa4:	cmp	r0, r1
   1dfa8:	streq	r7, [r4]
   1dfac:	ldr	r1, [r4, #4]
   1dfb0:	cmp	r0, r1
   1dfb4:	streq	r6, [r4, #4]
   1dfb8:	cmp	r6, #0
   1dfbc:	strne	r7, [r6, #8]
   1dfc0:	bl	11e6c <free@plt>
   1dfc4:	mov	r0, r7
   1dfc8:	cmp	r7, #0
   1dfcc:	beq	1dfe8 <read_boolean_unary_expression@@Base+0x2fe8>
   1dfd0:	ldr	r1, [r0]
   1dfd4:	ldr	r7, [r0, #8]
   1dfd8:	cmp	r1, r5
   1dfdc:	beq	1dfa0 <read_boolean_unary_expression@@Base+0x2fa0>
   1dfe0:	mov	r6, r0
   1dfe4:	b	1dfc4 <read_boolean_unary_expression@@Base+0x2fc4>
   1dfe8:	pop	{r4, r5, r6, r7, fp, pc}
   1dfec:	andeq	r3, r1, r0, lsr r1
   1dff0:	andeq	r3, r1, ip, asr #31
   1dff4:	push	{r4, sl, fp, lr}
   1dff8:	add	fp, sp, #8
   1dffc:	mov	r4, r0
   1e000:	mov	r0, #12
   1e004:	bl	11ee4 <malloc@plt>
   1e008:	ldr	r1, [pc, #60]	; 1e04c <read_boolean_unary_expression@@Base+0x304c>
   1e00c:	mov	r2, #0
   1e010:	add	r1, pc, r1
   1e014:	stm	r0, {r1, r4}
   1e018:	str	r2, [r0, #8]
   1e01c:	ldr	r1, [pc, #44]	; 1e050 <read_boolean_unary_expression@@Base+0x3050>
   1e020:	ldr	r1, [pc, r1]
   1e024:	mov	r2, r1
   1e028:	ldr	r3, [r2], #4
   1e02c:	ldr	r4, [r2]
   1e030:	cmp	r3, #0
   1e034:	mov	r3, r2
   1e038:	addne	r3, r4, #8
   1e03c:	moveq	r2, r1
   1e040:	str	r0, [r3]
   1e044:	str	r0, [r2]
   1e048:	pop	{r4, sl, fp, pc}
   1e04c:	andeq	r3, r1, r4, asr pc
   1e050:	andeq	r3, r1, ip, lsl #1

0001e054 <__gcov_flush@@Base>:
   1e054:	push	{r4, sl, fp, lr}
   1e058:	add	fp, sp, #8
   1e05c:	ldr	r0, [pc, #36]	; 1e088 <__gcov_flush@@Base+0x34>
   1e060:	ldr	r0, [pc, r0]
   1e064:	ldr	r4, [r0]
   1e068:	cmp	r4, #0
   1e06c:	beq	1e084 <__gcov_flush@@Base+0x30>
   1e070:	ldr	r0, [r4, #4]
   1e074:	blx	r0
   1e078:	ldr	r4, [r4, #8]
   1e07c:	cmp	r4, #0
   1e080:	bne	1e070 <__gcov_flush@@Base+0x1c>
   1e084:	pop	{r4, sl, fp, pc}
   1e088:	andeq	r3, r1, ip, asr #32
   1e08c:	push	{r4, r5, r6, r7, fp, lr}
   1e090:	add	fp, sp, #16
   1e094:	ldr	r4, [pc, #104]	; 1e104 <__gcov_flush@@Base+0xb0>
   1e098:	ldr	r4, [pc, r4]
   1e09c:	ldr	r0, [r4]
   1e0a0:	cmp	r0, #0
   1e0a4:	beq	1e100 <__gcov_flush@@Base+0xac>
   1e0a8:	ldr	r5, [pc, #88]	; 1e108 <__gcov_flush@@Base+0xb4>
   1e0ac:	mov	r6, #0
   1e0b0:	add	r5, pc, r5
   1e0b4:	b	1e0e8 <__gcov_flush@@Base+0x94>
   1e0b8:	ldr	r1, [r4]
   1e0bc:	cmp	r0, r1
   1e0c0:	streq	r7, [r4]
   1e0c4:	ldr	r1, [r4, #4]
   1e0c8:	cmp	r0, r1
   1e0cc:	streq	r6, [r4, #4]
   1e0d0:	cmp	r6, #0
   1e0d4:	strne	r7, [r6, #8]
   1e0d8:	bl	11e6c <free@plt>
   1e0dc:	mov	r0, r7
   1e0e0:	cmp	r7, #0
   1e0e4:	beq	1e100 <__gcov_flush@@Base+0xac>
   1e0e8:	ldr	r1, [r0]
   1e0ec:	ldr	r7, [r0, #8]
   1e0f0:	cmp	r1, r5
   1e0f4:	beq	1e0b8 <__gcov_flush@@Base+0x64>
   1e0f8:	mov	r6, r0
   1e0fc:	b	1e0dc <__gcov_flush@@Base+0x88>
   1e100:	pop	{r4, r5, r6, r7, fp, pc}
   1e104:	andeq	r3, r1, r4, lsl r0
   1e108:			; <UNDEFINED> instruction: 0x00013eb4
   1e10c:	push	{r4, r5, r6, sl, fp, lr}
   1e110:	add	fp, sp, #16
   1e114:	ldr	r6, [pc, #228]	; 1e200 <__gcov_flush@@Base+0x1ac>
   1e118:	mov	r4, r1
   1e11c:	cmp	r0, #0
   1e120:	add	r6, pc, r6
   1e124:	beq	1e170 <__gcov_flush@@Base+0x11c>
   1e128:	mov	r5, r0
   1e12c:	mov	r0, #12
   1e130:	bl	11ee4 <malloc@plt>
   1e134:	mov	r1, #0
   1e138:	str	r6, [r0]
   1e13c:	str	r5, [r0, #4]
   1e140:	str	r1, [r0, #8]
   1e144:	ldr	r1, [pc, #184]	; 1e204 <__gcov_flush@@Base+0x1b0>
   1e148:	ldr	r1, [pc, r1]
   1e14c:	mov	r2, r1
   1e150:	ldr	r3, [r2], #4
   1e154:	ldr	r5, [r2]
   1e158:	cmp	r3, #0
   1e15c:	mov	r3, r2
   1e160:	addne	r3, r5, #8
   1e164:	moveq	r2, r1
   1e168:	str	r0, [r3]
   1e16c:	str	r0, [r2]
   1e170:	cmp	r4, #0
   1e174:	beq	1e1bc <__gcov_flush@@Base+0x168>
   1e178:	mov	r0, #12
   1e17c:	bl	11ee4 <malloc@plt>
   1e180:	mov	r1, #0
   1e184:	str	r6, [r0]
   1e188:	str	r4, [r0, #4]
   1e18c:	str	r1, [r0, #8]
   1e190:	ldr	r1, [pc, #112]	; 1e208 <__gcov_flush@@Base+0x1b4>
   1e194:	ldr	r1, [pc, r1]
   1e198:	mov	r2, r1
   1e19c:	ldr	r3, [r2], #4
   1e1a0:	ldr	r6, [r2]
   1e1a4:	cmp	r3, #0
   1e1a8:	mov	r3, r2
   1e1ac:	addne	r3, r6, #8
   1e1b0:	moveq	r2, r1
   1e1b4:	str	r0, [r3]
   1e1b8:	str	r0, [r2]
   1e1bc:	ldr	r1, [pc, #72]	; 1e20c <__gcov_flush@@Base+0x1b8>
   1e1c0:	add	r1, pc, r1
   1e1c4:	ldrb	r0, [r1]
   1e1c8:	cmp	r0, #0
   1e1cc:	popne	{r4, r5, r6, sl, fp, pc}
   1e1d0:	ldr	r0, [pc, #56]	; 1e210 <__gcov_flush@@Base+0x1bc>
   1e1d4:	mov	r2, #1
   1e1d8:	strb	r2, [r1]
   1e1dc:	add	r0, pc, r0
   1e1e0:	bl	1e7ac <__libc_csu_fini@@Base+0x4>
   1e1e4:	ldr	r0, [pc, #40]	; 1e214 <__gcov_flush@@Base+0x1c0>
   1e1e8:	add	r0, pc, r0
   1e1ec:	bl	1e7ac <__libc_csu_fini@@Base+0x4>
   1e1f0:	ldr	r0, [pc, #32]	; 1e218 <__gcov_flush@@Base+0x1c4>
   1e1f4:	add	r0, pc, r0
   1e1f8:	pop	{r4, r5, r6, sl, fp, lr}
   1e1fc:	b	1e7ac <__libc_csu_fini@@Base+0x4>
   1e200:	andeq	r3, r1, r4, asr #28
   1e204:	andeq	r2, r1, r8, ror #30
   1e208:	andeq	r2, r1, r8, lsl pc
   1e20c:	andeq	r3, r1, r8, lsr #27
   1e210:			; <UNDEFINED> instruction: 0xfffffea8
   1e214:			; <UNDEFINED> instruction: 0xfffffd84
   1e218:			; <UNDEFINED> instruction: 0xfffffd20
   1e21c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1e220:	add	fp, sp, #24
   1e224:	ldr	r7, [pc, #68]	; 1e270 <__gcov_flush@@Base+0x21c>
   1e228:	mov	r4, r0
   1e22c:	mov	r5, #1
   1e230:	mov	r8, #0
   1e234:	ldr	r7, [pc, r7]
   1e238:	mov	r6, #47	; 0x2f
   1e23c:	b	1e258 <__gcov_flush@@Base+0x204>
   1e240:	strb	r8, [r4, r5]
   1e244:	ldr	r1, [r7]
   1e248:	mov	r0, r4
   1e24c:	bl	11f68 <mkdir@plt>
   1e250:	strb	r6, [r4, r5]
   1e254:	add	r5, r5, #1
   1e258:	ldrb	r0, [r4, r5]
   1e25c:	cmp	r0, #47	; 0x2f
   1e260:	beq	1e240 <__gcov_flush@@Base+0x1ec>
   1e264:	cmp	r0, #0
   1e268:	bne	1e254 <__gcov_flush@@Base+0x200>
   1e26c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1e270:	andeq	r2, r1, r4, ror lr
   1e274:	ldr	r0, [pc, #8]	; 1e284 <__gcov_flush@@Base+0x230>
   1e278:	ldr	r0, [pc, r0]
   1e27c:	ldr	r0, [r0]
   1e280:	bx	lr
   1e284:	andeq	r2, r1, r0, lsr lr
   1e288:	ldr	r1, [pc, #8]	; 1e298 <__gcov_flush@@Base+0x244>
   1e28c:	ldr	r1, [pc, r1]
   1e290:	str	r0, [r1]
   1e294:	bx	lr
   1e298:	andeq	r2, r1, ip, lsl lr
   1e29c:	push	{r4, r5, r6, sl, fp, lr}
   1e2a0:	add	fp, sp, #16
   1e2a4:	sub	sp, sp, #392	; 0x188
   1e2a8:	mov	r6, sp
   1e2ac:	mov	r5, r0
   1e2b0:	mov	r0, r6
   1e2b4:	mov	r4, r1
   1e2b8:	bl	11e9c <uname@plt>
   1e2bc:	cmp	r0, #0
   1e2c0:	bmi	1e2d8 <__gcov_flush@@Base+0x284>
   1e2c4:	add	r1, r6, #65	; 0x41
   1e2c8:	mov	r0, r5
   1e2cc:	mov	r2, r4
   1e2d0:	bl	11f80 <strncpy@plt>
   1e2d4:	mov	r0, #0
   1e2d8:	sub	sp, fp, #16
   1e2dc:	pop	{r4, r5, r6, sl, fp, pc}
   1e2e0:	push	{r4, r5, r6, sl, fp, lr}
   1e2e4:	add	fp, sp, #16
   1e2e8:	sub	sp, sp, #32
   1e2ec:	mov	r4, #0
   1e2f0:	str	r4, [sp, #8]
   1e2f4:	strh	r4, [sp, #2]
   1e2f8:	mov	r5, r0
   1e2fc:	str	r4, [sp, #12]
   1e300:	str	r4, [sp, #16]
   1e304:	str	r4, [sp, #20]
   1e308:	bl	11f14 <getpid@plt>
   1e30c:	mov	r6, sp
   1e310:	str	r0, [sp, #24]
   1e314:	mov	r0, #1
   1e318:	strh	r0, [sp]
   1e31c:	mov	r0, r5
   1e320:	mov	r1, #14
   1e324:	mov	r2, r6
   1e328:	bl	11fc8 <fcntl64@plt>
   1e32c:	cmn	r0, #1
   1e330:	bne	1e34c <__gcov_flush@@Base+0x2f8>
   1e334:	bl	11f50 <__errno_location@plt>
   1e338:	ldr	r0, [r0]
   1e33c:	cmp	r0, #4
   1e340:	beq	1e31c <__gcov_flush@@Base+0x2c8>
   1e344:	cmp	r0, #37	; 0x25
   1e348:	mvneq	r4, #0
   1e34c:	mov	r0, r4
   1e350:	sub	sp, fp, #16
   1e354:	pop	{r4, r5, r6, sl, fp, pc}
   1e358:	push	{r4, r5, r6, sl, fp, lr}
   1e35c:	add	fp, sp, #16
   1e360:	sub	sp, sp, #32
   1e364:	mov	r4, #0
   1e368:	str	r4, [sp, #8]
   1e36c:	strh	r4, [sp, #2]
   1e370:	mov	r5, r0
   1e374:	str	r4, [sp, #12]
   1e378:	str	r4, [sp, #16]
   1e37c:	str	r4, [sp, #20]
   1e380:	bl	11f14 <getpid@plt>
   1e384:	mov	r6, sp
   1e388:	str	r0, [sp, #24]
   1e38c:	mov	r0, #2
   1e390:	strh	r0, [sp]
   1e394:	mov	r0, r5
   1e398:	mov	r1, #14
   1e39c:	mov	r2, r6
   1e3a0:	bl	11fc8 <fcntl64@plt>
   1e3a4:	cmn	r0, #1
   1e3a8:	bne	1e3c4 <__gcov_flush@@Base+0x370>
   1e3ac:	bl	11f50 <__errno_location@plt>
   1e3b0:	ldr	r0, [r0]
   1e3b4:	cmp	r0, #4
   1e3b8:	beq	1e394 <__gcov_flush@@Base+0x340>
   1e3bc:	cmp	r0, #37	; 0x25
   1e3c0:	mvneq	r4, #0
   1e3c4:	mov	r0, r4
   1e3c8:	sub	sp, fp, #16
   1e3cc:	pop	{r4, r5, r6, sl, fp, pc}
   1e3d0:	push	{r4, r5, r6, sl, fp, lr}
   1e3d4:	add	fp, sp, #16
   1e3d8:	sub	sp, sp, #32
   1e3dc:	bl	11f98 <fileno@plt>
   1e3e0:	mov	r4, #0
   1e3e4:	str	r4, [sp, #8]
   1e3e8:	strh	r4, [sp, #2]
   1e3ec:	mov	r5, r0
   1e3f0:	str	r4, [sp, #12]
   1e3f4:	str	r4, [sp, #16]
   1e3f8:	str	r4, [sp, #20]
   1e3fc:	bl	11f14 <getpid@plt>
   1e400:	mov	r6, sp
   1e404:	str	r0, [sp, #24]
   1e408:	mov	r0, #1
   1e40c:	strh	r0, [sp]
   1e410:	mov	r0, r5
   1e414:	mov	r1, #14
   1e418:	mov	r2, r6
   1e41c:	bl	11fc8 <fcntl64@plt>
   1e420:	cmn	r0, #1
   1e424:	bne	1e440 <__gcov_flush@@Base+0x3ec>
   1e428:	bl	11f50 <__errno_location@plt>
   1e42c:	ldr	r0, [r0]
   1e430:	cmp	r0, #4
   1e434:	beq	1e410 <__gcov_flush@@Base+0x3bc>
   1e438:	cmp	r0, #37	; 0x25
   1e43c:	mvneq	r4, #0
   1e440:	mov	r0, r4
   1e444:	sub	sp, fp, #16
   1e448:	pop	{r4, r5, r6, sl, fp, pc}
   1e44c:	push	{r4, r5, r6, sl, fp, lr}
   1e450:	add	fp, sp, #16
   1e454:	sub	sp, sp, #32
   1e458:	bl	11f98 <fileno@plt>
   1e45c:	mov	r4, #0
   1e460:	str	r4, [sp, #8]
   1e464:	strh	r4, [sp, #2]
   1e468:	mov	r5, r0
   1e46c:	str	r4, [sp, #12]
   1e470:	str	r4, [sp, #16]
   1e474:	str	r4, [sp, #20]
   1e478:	bl	11f14 <getpid@plt>
   1e47c:	mov	r6, sp
   1e480:	str	r0, [sp, #24]
   1e484:	mov	r0, #2
   1e488:	strh	r0, [sp]
   1e48c:	mov	r0, r5
   1e490:	mov	r1, #14
   1e494:	mov	r2, r6
   1e498:	bl	11fc8 <fcntl64@plt>
   1e49c:	cmn	r0, #1
   1e4a0:	bne	1e4bc <__gcov_flush@@Base+0x468>
   1e4a4:	bl	11f50 <__errno_location@plt>
   1e4a8:	ldr	r0, [r0]
   1e4ac:	cmp	r0, #4
   1e4b0:	beq	1e48c <__gcov_flush@@Base+0x438>
   1e4b4:	cmp	r0, #37	; 0x25
   1e4b8:	mvneq	r4, #0
   1e4bc:	mov	r0, r4
   1e4c0:	sub	sp, fp, #16
   1e4c4:	pop	{r4, r5, r6, sl, fp, pc}
   1e4c8:	push	{r4, r5, fp, lr}
   1e4cc:	add	fp, sp, #8
   1e4d0:	sub	sp, sp, #32
   1e4d4:	mov	r2, #182	; 0xb6
   1e4d8:	orr	r2, r2, #256	; 0x100
   1e4dc:	mov	r1, #66	; 0x42
   1e4e0:	bl	11ecc <open64@plt>
   1e4e4:	cmp	r0, #0
   1e4e8:	bmi	1e564 <__gcov_flush@@Base+0x510>
   1e4ec:	mov	r4, r0
   1e4f0:	mov	r0, #0
   1e4f4:	str	r0, [sp, #8]
   1e4f8:	strh	r0, [sp, #2]
   1e4fc:	str	r0, [sp, #12]
   1e500:	str	r0, [sp, #16]
   1e504:	str	r0, [sp, #20]
   1e508:	bl	11f14 <getpid@plt>
   1e50c:	mov	r5, sp
   1e510:	str	r0, [sp, #24]
   1e514:	mov	r0, #1
   1e518:	strh	r0, [sp]
   1e51c:	mov	r0, r4
   1e520:	mov	r1, #14
   1e524:	mov	r2, r5
   1e528:	bl	11fc8 <fcntl64@plt>
   1e52c:	cmn	r0, #1
   1e530:	bne	1e54c <__gcov_flush@@Base+0x4f8>
   1e534:	bl	11f50 <__errno_location@plt>
   1e538:	ldr	r0, [r0]
   1e53c:	cmp	r0, #4
   1e540:	beq	1e51c <__gcov_flush@@Base+0x4c8>
   1e544:	cmp	r0, #37	; 0x25
   1e548:	beq	1e570 <__gcov_flush@@Base+0x51c>
   1e54c:	ldr	r1, [pc, #76]	; 1e5a0 <__gcov_flush@@Base+0x54c>
   1e550:	mov	r0, r4
   1e554:	add	r1, pc, r1
   1e558:	bl	11e30 <fdopen@plt>
   1e55c:	sub	sp, fp, #8
   1e560:	pop	{r4, r5, fp, pc}
   1e564:	mov	r0, #0
   1e568:	sub	sp, fp, #8
   1e56c:	pop	{r4, r5, fp, pc}
   1e570:	ldr	r1, [pc, #28]	; 1e594 <__gcov_flush@@Base+0x540>
   1e574:	ldr	r2, [pc, #28]	; 1e598 <__gcov_flush@@Base+0x544>
   1e578:	ldr	r0, [pc, #28]	; 1e59c <__gcov_flush@@Base+0x548>
   1e57c:	add	r1, pc, r1
   1e580:	add	r2, pc, r2
   1e584:	ldr	r0, [pc, r0]
   1e588:	ldr	r0, [r0]
   1e58c:	bl	11f44 <fprintf@plt>
   1e590:	b	1e54c <__gcov_flush@@Base+0x4f8>
   1e594:	andeq	r1, r0, r9, lsl #1
   1e598:	andeq	r1, r0, lr, asr #1
   1e59c:	andeq	r2, r1, r4, lsr fp
   1e5a0:	andeq	r0, r0, pc, lsl #30
   1e5a4:	push	{r4, r5, r6, sl, fp, lr}
   1e5a8:	add	fp, sp, #16
   1e5ac:	mov	r6, r0
   1e5b0:	ldr	r0, [pc, #120]	; 1e630 <__gcov_flush@@Base+0x5dc>
   1e5b4:	mov	r4, r1
   1e5b8:	add	r0, pc, r0
   1e5bc:	bl	11ed8 <getenv@plt>
   1e5c0:	mov	r5, r0
   1e5c4:	ldr	r0, [pc, #104]	; 1e634 <__gcov_flush@@Base+0x5e0>
   1e5c8:	add	r0, pc, r0
   1e5cc:	bl	11ed8 <getenv@plt>
   1e5d0:	mov	r1, #0
   1e5d4:	str	r1, [r4]
   1e5d8:	str	r1, [r6]
   1e5dc:	cmp	r5, #0
   1e5e0:	ldrbne	r2, [r5]
   1e5e4:	cmpne	r2, #0
   1e5e8:	bne	1e5f4 <__gcov_flush@@Base+0x5a0>
   1e5ec:	mov	r0, r1
   1e5f0:	pop	{r4, r5, r6, sl, fp, pc}
   1e5f4:	cmp	r0, #0
   1e5f8:	beq	1e610 <__gcov_flush@@Base+0x5bc>
   1e5fc:	mov	r1, #0
   1e600:	mov	r2, #10
   1e604:	bl	11e48 <strtol@plt>
   1e608:	bic	r0, r0, r0, asr #31
   1e60c:	b	1e614 <__gcov_flush@@Base+0x5c0>
   1e610:	mov	r0, #0
   1e614:	str	r0, [r6]
   1e618:	mov	r0, r5
   1e61c:	bl	11f2c <strlen@plt>
   1e620:	mov	r1, r5
   1e624:	str	r0, [r4]
   1e628:	mov	r0, r1
   1e62c:	pop	{r4, r5, r6, sl, fp, pc}
   1e630:	andeq	r1, r0, r4, asr #1
   1e634:	andeq	r1, r0, r0, asr #1
   1e638:	push	{r4, r5, r6, r7, fp, lr}
   1e63c:	add	fp, sp, #16
   1e640:	mov	r6, r0
   1e644:	ldr	r0, [fp, #8]
   1e648:	mov	r5, r3
   1e64c:	mov	r7, r2
   1e650:	mov	r4, r1
   1e654:	cmp	r0, #1
   1e658:	blt	1e690 <__gcov_flush@@Base+0x63c>
   1e65c:	add	r1, r4, #1
   1e660:	mov	r2, #0
   1e664:	b	1e67c <__gcov_flush@@Base+0x628>
   1e668:	add	r2, r2, #1
   1e66c:	mov	r4, r1
   1e670:	add	r1, r1, #1
   1e674:	cmp	r2, r0
   1e678:	bge	1e690 <__gcov_flush@@Base+0x63c>
   1e67c:	ldrb	r3, [r1]
   1e680:	cmp	r3, #47	; 0x2f
   1e684:	beq	1e668 <__gcov_flush@@Base+0x614>
   1e688:	cmp	r3, #0
   1e68c:	bne	1e670 <__gcov_flush@@Base+0x61c>
   1e690:	mov	r0, r6
   1e694:	mov	r1, r7
   1e698:	mov	r2, r5
   1e69c:	bl	11e78 <memcpy@plt>
   1e6a0:	add	r0, r5, r7
   1e6a4:	ldrb	r0, [r0, #-1]
   1e6a8:	cmp	r0, #47	; 0x2f
   1e6ac:	movne	r0, #47	; 0x2f
   1e6b0:	strbne	r0, [r6, r5]
   1e6b4:	mov	r0, r4
   1e6b8:	addne	r5, r5, #1
   1e6bc:	add	r5, r6, r5
   1e6c0:	bl	11f2c <strlen@plt>
   1e6c4:	add	r2, r0, #1
   1e6c8:	mov	r0, r5
   1e6cc:	mov	r1, r4
   1e6d0:	pop	{r4, r5, r6, r7, fp, lr}
   1e6d4:	b	11e78 <memcpy@plt>
   1e6d8:	mov	r1, #47	; 0x2f
   1e6dc:	b	11f38 <strchr@plt>
   1e6e0:	mov	r1, #47	; 0x2f
   1e6e4:	b	11fd4 <strrchr@plt>
   1e6e8:	push	{fp, lr}
   1e6ec:	mov	fp, sp
   1e6f0:	sub	sp, sp, #8
   1e6f4:	mov	r0, #0
   1e6f8:	str	r0, [sp, #4]
   1e6fc:	add	r1, sp, #4
   1e700:	mov	r0, #2
   1e704:	bl	11f8c <prctl@plt>
   1e708:	ldr	r1, [sp, #4]
   1e70c:	cmp	r0, #0
   1e710:	cmpeq	r1, #9
   1e714:	bne	1e728 <__gcov_flush@@Base+0x6d4>
   1e718:	mov	r0, #1
   1e71c:	mov	r1, #0
   1e720:	bl	11f8c <prctl@plt>
   1e724:	ldr	r1, [sp, #4]
   1e728:	sub	r0, r1, #9
   1e72c:	clz	r0, r0
   1e730:	lsr	r0, r0, #5
   1e734:	mov	sp, fp
   1e738:	pop	{fp, pc}
   1e73c:	mov	r0, #1
   1e740:	mov	r1, #9
   1e744:	b	11f8c <prctl@plt>

0001e748 <__libc_csu_init@@Base>:
   1e748:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1e74c:	mov	r7, r0
   1e750:	ldr	r6, [pc, #72]	; 1e7a0 <__libc_csu_init@@Base+0x58>
   1e754:	ldr	r5, [pc, #72]	; 1e7a4 <__libc_csu_init@@Base+0x5c>
   1e758:	add	r6, pc, r6
   1e75c:	add	r5, pc, r5
   1e760:	sub	r6, r6, r5
   1e764:	mov	r8, r1
   1e768:	mov	r9, r2
   1e76c:	bl	11e10 <fdopen@plt-0x20>
   1e770:	asrs	r6, r6, #2
   1e774:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1e778:	mov	r4, #0
   1e77c:	add	r4, r4, #1
   1e780:	ldr	r3, [r5], #4
   1e784:	mov	r2, r9
   1e788:	mov	r1, r8
   1e78c:	mov	r0, r7
   1e790:	blx	r3
   1e794:	cmp	r6, r4
   1e798:	bne	1e77c <__libc_csu_init@@Base+0x34>
   1e79c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1e7a0:	andeq	r1, r1, ip, asr #30
   1e7a4:	andeq	r1, r1, r4, lsr pc

0001e7a8 <__libc_csu_fini@@Base>:
   1e7a8:	bx	lr
   1e7ac:	ldr	r3, [pc, #12]	; 1e7c0 <__libc_csu_fini@@Base+0x18>
   1e7b0:	mov	r1, #0
   1e7b4:	add	r3, pc, r3
   1e7b8:	ldr	r2, [r3]
   1e7bc:	b	11f5c <__cxa_atexit@plt>
   1e7c0:	andeq	r2, r1, r4, lsr #18

Disassembly of section .fini:

0001e7c4 <.fini>:
   1e7c4:	push	{r3, lr}
   1e7c8:	pop	{r3, pc}
