
../repos/stcorp-coda-3a25f25/codacheck:     file format elf32-littlearm


Disassembly of section .init:

00010d00 <.init>:
   10d00:	push	{r3, lr}
   10d04:	bl	10ed0 <_start@@Base+0x3c>
   10d08:	pop	{r3, pc}

Disassembly of section .plt:

00010d0c <coda_set_option_perform_boundary_checks@plt-0x14>:
   10d0c:	push	{lr}		; (str lr, [sp, #-4]!)
   10d10:	ldr	lr, [pc, #4]	; 10d1c <coda_set_option_perform_boundary_checks@plt-0x4>
   10d14:	add	lr, pc, lr
   10d18:	ldr	pc, [lr, #8]!
   10d1c:	andeq	r2, r1, r4, ror #5

00010d20 <coda_set_option_perform_boundary_checks@plt>:
   10d20:	add	ip, pc, #0, 12
   10d24:	add	ip, ip, #73728	; 0x12000
   10d28:	ldr	pc, [ip, #740]!	; 0x2e4

00010d2c <strcmp@plt>:
   10d2c:	add	ip, pc, #0, 12
   10d30:	add	ip, ip, #73728	; 0x12000
   10d34:	ldr	pc, [ip, #732]!	; 0x2dc

00010d38 <printf@plt>:
   10d38:	add	ip, pc, #0, 12
   10d3c:	add	ip, ip, #73728	; 0x12000
   10d40:	ldr	pc, [ip, #724]!	; 0x2d4

00010d44 <coda_set_error@plt>:
   10d44:	add	ip, pc, #0, 12
   10d48:	add	ip, ip, #73728	; 0x12000
   10d4c:	ldr	pc, [ip, #716]!	; 0x2cc

00010d50 <coda_open@plt>:
   10d50:	add	ip, pc, #0, 12
   10d54:	add	ip, ip, #73728	; 0x12000
   10d58:	ldr	pc, [ip, #708]!	; 0x2c4

00010d5c <fflush@plt>:
   10d5c:	add	ip, pc, #0, 12
   10d60:	add	ip, ip, #73728	; 0x12000
   10d64:	ldr	pc, [ip, #700]!	; 0x2bc

00010d68 <coda_set_option_use_mmap@plt>:
   10d68:	add	ip, pc, #0, 12
   10d6c:	add	ip, ip, #73728	; 0x12000
   10d70:	ldr	pc, [ip, #692]!	; 0x2b4

00010d74 <coda_cursor_print_path@plt>:
   10d74:	add	ip, pc, #0, 12
   10d78:	add	ip, ip, #73728	; 0x12000
   10d7c:	ldr	pc, [ip, #684]!	; 0x2ac

00010d80 <coda_set_definition_path_conditional@plt>:
   10d80:	add	ip, pc, #0, 12
   10d84:	add	ip, ip, #73728	; 0x12000
   10d88:	ldr	pc, [ip, #676]!	; 0x2a4

00010d8c <coda_set_definition_path@plt>:
   10d8c:	add	ip, pc, #0, 12
   10d90:	add	ip, ip, #73728	; 0x12000
   10d94:	ldr	pc, [ip, #668]!	; 0x29c

00010d98 <coda_recognize_file@plt>:
   10d98:	add	ip, pc, #0, 12
   10d9c:	add	ip, ip, #73728	; 0x12000
   10da0:	ldr	pc, [ip, #660]!	; 0x294

00010da4 <fwrite@plt>:
   10da4:	add	ip, pc, #0, 12
   10da8:	add	ip, ip, #73728	; 0x12000
   10dac:	ldr	pc, [ip, #652]!	; 0x28c

00010db0 <coda_type_get_format_name@plt>:
   10db0:	add	ip, pc, #0, 12
   10db4:	add	ip, ip, #73728	; 0x12000
   10db8:	ldr	pc, [ip, #644]!	; 0x284

00010dbc <coda_done@plt>:
   10dbc:	add	ip, pc, #0, 12
   10dc0:	add	ip, ip, #73728	; 0x12000
   10dc4:	ldr	pc, [ip, #636]!	; 0x27c

00010dc8 <puts@plt>:
   10dc8:	add	ip, pc, #0, 12
   10dcc:	add	ip, ip, #73728	; 0x12000
   10dd0:	ldr	pc, [ip, #628]!	; 0x274

00010dd4 <coda_product_check@plt>:
   10dd4:	add	ip, pc, #0, 12
   10dd8:	add	ip, ip, #73728	; 0x12000
   10ddc:	ldr	pc, [ip, #620]!	; 0x26c

00010de0 <__libc_start_main@plt>:
   10de0:	add	ip, pc, #0, 12
   10de4:	add	ip, ip, #73728	; 0x12000
   10de8:	ldr	pc, [ip, #612]!	; 0x264

00010dec <__gmon_start__@plt>:
   10dec:	add	ip, pc, #0, 12
   10df0:	add	ip, ip, #73728	; 0x12000
   10df4:	ldr	pc, [ip, #604]!	; 0x25c

00010df8 <exit@plt>:
   10df8:	add	ip, pc, #0, 12
   10dfc:	add	ip, ip, #73728	; 0x12000
   10e00:	ldr	pc, [ip, #596]!	; 0x254

00010e04 <fprintf@plt>:
   10e04:	add	ip, pc, #0, 12
   10e08:	add	ip, ip, #73728	; 0x12000
   10e0c:	ldr	pc, [ip, #588]!	; 0x24c

00010e10 <coda_init@plt>:
   10e10:	add	ip, pc, #0, 12
   10e14:	add	ip, ip, #73728	; 0x12000
   10e18:	ldr	pc, [ip, #580]!	; 0x244

00010e1c <ungetc@plt>:
   10e1c:	add	ip, pc, #0, 12
   10e20:	add	ip, ip, #73728	; 0x12000
   10e24:	ldr	pc, [ip, #572]!	; 0x23c

00010e28 <coda_set_option_perform_conversions@plt>:
   10e28:	add	ip, pc, #0, 12
   10e2c:	add	ip, ip, #73728	; 0x12000
   10e30:	ldr	pc, [ip, #564]!	; 0x234

00010e34 <putchar@plt>:
   10e34:	add	ip, pc, #0, 12
   10e38:	add	ip, ip, #73728	; 0x12000
   10e3c:	ldr	pc, [ip, #556]!	; 0x22c

00010e40 <coda_close@plt>:
   10e40:	add	ip, pc, #0, 12
   10e44:	add	ip, ip, #73728	; 0x12000
   10e48:	ldr	pc, [ip, #548]!	; 0x224

00010e4c <coda_errno_to_string@plt>:
   10e4c:	add	ip, pc, #0, 12
   10e50:	add	ip, ip, #73728	; 0x12000
   10e54:	ldr	pc, [ip, #540]!	; 0x21c

00010e58 <coda_get_libcoda_version@plt>:
   10e58:	add	ip, pc, #0, 12
   10e5c:	add	ip, ip, #73728	; 0x12000
   10e60:	ldr	pc, [ip, #532]!	; 0x214

00010e64 <coda_get_errno@plt>:
   10e64:	add	ip, pc, #0, 12
   10e68:	add	ip, ip, #73728	; 0x12000
   10e6c:	ldr	pc, [ip, #524]!	; 0x20c

00010e70 <abort@plt>:
   10e70:	add	ip, pc, #0, 12
   10e74:	add	ip, ip, #73728	; 0x12000
   10e78:	ldr	pc, [ip, #516]!	; 0x204

00010e7c <getc@plt>:
   10e7c:	add	ip, pc, #0, 12
   10e80:	add	ip, ip, #73728	; 0x12000
   10e84:	ldr	pc, [ip, #508]!	; 0x1fc

00010e88 <__assert_fail@plt>:
   10e88:	add	ip, pc, #0, 12
   10e8c:	add	ip, ip, #73728	; 0x12000
   10e90:	ldr	pc, [ip, #500]!	; 0x1f4

Disassembly of section .text:

00010e94 <_start@@Base>:
   10e94:	mov	fp, #0
   10e98:	mov	lr, #0
   10e9c:	pop	{r1}		; (ldr r1, [sp], #4)
   10ea0:	mov	r2, sp
   10ea4:	push	{r2}		; (str r2, [sp, #-4]!)
   10ea8:	push	{r0}		; (str r0, [sp, #-4]!)
   10eac:	ldr	ip, [pc, #16]	; 10ec4 <_start@@Base+0x30>
   10eb0:	push	{ip}		; (str ip, [sp, #-4]!)
   10eb4:	ldr	r0, [pc, #12]	; 10ec8 <_start@@Base+0x34>
   10eb8:	ldr	r3, [pc, #12]	; 10ecc <_start@@Base+0x38>
   10ebc:	bl	10de0 <__libc_start_main@plt>
   10ec0:	bl	10e70 <abort@plt>
   10ec4:	andeq	r1, r1, r4, lsr #16
   10ec8:	andeq	r0, r1, r4, lsl #31
   10ecc:	andeq	r1, r1, r4, asr #15
   10ed0:	ldr	r3, [pc, #20]	; 10eec <_start@@Base+0x58>
   10ed4:	ldr	r2, [pc, #20]	; 10ef0 <_start@@Base+0x5c>
   10ed8:	add	r3, pc, r3
   10edc:	ldr	r2, [r3, r2]
   10ee0:	cmp	r2, #0
   10ee4:	bxeq	lr
   10ee8:	b	10dec <__gmon_start__@plt>
   10eec:	andeq	r2, r1, r0, lsr #2
   10ef0:	andeq	r0, r0, r8, lsl #1
   10ef4:	ldr	r0, [pc, #24]	; 10f14 <_start@@Base+0x80>
   10ef8:	ldr	r3, [pc, #24]	; 10f18 <_start@@Base+0x84>
   10efc:	cmp	r3, r0
   10f00:	bxeq	lr
   10f04:	ldr	r3, [pc, #16]	; 10f1c <_start@@Base+0x88>
   10f08:	cmp	r3, #0
   10f0c:	bxeq	lr
   10f10:	bx	r3
   10f14:	muleq	r2, r4, r0
   10f18:	muleq	r2, r4, r0
   10f1c:	andeq	r0, r0, r0
   10f20:	ldr	r0, [pc, #36]	; 10f4c <_start@@Base+0xb8>
   10f24:	ldr	r1, [pc, #36]	; 10f50 <_start@@Base+0xbc>
   10f28:	sub	r1, r1, r0
   10f2c:	asr	r1, r1, #2
   10f30:	add	r1, r1, r1, lsr #31
   10f34:	asrs	r1, r1, #1
   10f38:	bxeq	lr
   10f3c:	ldr	r3, [pc, #16]	; 10f54 <_start@@Base+0xc0>
   10f40:	cmp	r3, #0
   10f44:	bxeq	lr
   10f48:	bx	r3
   10f4c:	muleq	r2, r4, r0
   10f50:	muleq	r2, r4, r0
   10f54:	andeq	r0, r0, r0
   10f58:	push	{r4, lr}
   10f5c:	ldr	r4, [pc, #24]	; 10f7c <_start@@Base+0xe8>
   10f60:	ldrb	r3, [r4]
   10f64:	cmp	r3, #0
   10f68:	popne	{r4, pc}
   10f6c:	bl	10ef4 <_start@@Base+0x60>
   10f70:	mov	r3, #1
   10f74:	strb	r3, [r4]
   10f78:	pop	{r4, pc}
   10f7c:	andeq	r3, r2, r4, lsr #1
   10f80:	b	10f20 <_start@@Base+0x8c>

00010f84 <main@@Base>:
   10f84:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10f88:	add	fp, sp, #28
   10f8c:	sub	sp, sp, #1004	; 0x3ec
   10f90:	mov	r4, r1
   10f94:	movw	r1, #12468	; 0x30b4
   10f98:	mov	r5, r0
   10f9c:	mov	r0, #0
   10fa0:	movw	r9, #12464	; 0x30b0
   10fa4:	movt	r1, #2
   10fa8:	movt	r9, #2
   10fac:	cmp	r5, #1
   10fb0:	str	r0, [r1]
   10fb4:	movw	r1, #12456	; 0x30a8
   10fb8:	str	r0, [r9]
   10fbc:	movt	r1, #2
   10fc0:	str	r0, [r1]
   10fc4:	beq	11378 <main@@Base+0x3f4>
   10fc8:	ldr	r6, [r4, #4]
   10fcc:	movw	r1, #6196	; 0x1834
   10fd0:	movt	r1, #1
   10fd4:	mov	r0, r6
   10fd8:	bl	10d2c <strcmp@plt>
   10fdc:	cmp	r0, #0
   10fe0:	beq	11378 <main@@Base+0x3f4>
   10fe4:	movw	r1, #6199	; 0x1837
   10fe8:	mov	r0, r6
   10fec:	movt	r1, #1
   10ff0:	bl	10d2c <strcmp@plt>
   10ff4:	cmp	r0, #0
   10ff8:	beq	11378 <main@@Base+0x3f4>
   10ffc:	movw	r1, #6206	; 0x183e
   11000:	mov	r0, r6
   11004:	movt	r1, #1
   11008:	bl	10d2c <strcmp@plt>
   1100c:	cmp	r0, #0
   11010:	beq	11384 <main@@Base+0x400>
   11014:	movw	r1, #6209	; 0x1841
   11018:	mov	r0, r6
   1101c:	movt	r1, #1
   11020:	bl	10d2c <strcmp@plt>
   11024:	cmp	r0, #0
   11028:	beq	11384 <main@@Base+0x400>
   1102c:	cmp	r5, #3
   11030:	blt	1104c <main@@Base+0xc8>
   11034:	movw	r1, #6219	; 0x184b
   11038:	mov	r0, r6
   1103c:	movt	r1, #1
   11040:	bl	10d2c <strcmp@plt>
   11044:	cmp	r0, #0
   11048:	beq	112b8 <main@@Base+0x334>
   1104c:	ldr	r0, [r4]
   11050:	movw	r2, #6222	; 0x184e
   11054:	mov	r1, #0
   11058:	movt	r2, #1
   1105c:	bl	10d80 <coda_set_definition_path_conditional@plt>
   11060:	mov	r8, #1
   11064:	cmp	r0, #0
   11068:	bne	11344 <main@@Base+0x3c0>
   1106c:	mov	sl, #0
   11070:	mov	r6, #1
   11074:	cmp	r8, r5
   11078:	bge	11194 <main@@Base+0x210>
   1107c:	movw	r7, #6248	; 0x1868
   11080:	mov	r6, #1
   11084:	movt	r7, #1
   11088:	ldr	sl, [r4, r8, lsl #2]
   1108c:	mov	r1, r7
   11090:	mov	r0, sl
   11094:	bl	10d2c <strcmp@plt>
   11098:	cmp	r0, #0
   1109c:	mov	r0, r9
   110a0:	beq	11170 <main@@Base+0x1ec>
   110a4:	movw	r1, #6251	; 0x186b
   110a8:	mov	r0, sl
   110ac:	movt	r1, #1
   110b0:	bl	10d2c <strcmp@plt>
   110b4:	cmp	r0, #0
   110b8:	mov	r0, r9
   110bc:	beq	11170 <main@@Base+0x1ec>
   110c0:	movw	r1, #6261	; 0x1875
   110c4:	mov	r0, sl
   110c8:	movt	r1, #1
   110cc:	bl	10d2c <strcmp@plt>
   110d0:	cmp	r0, #0
   110d4:	movw	r0, #12468	; 0x30b4
   110d8:	movt	r0, #2
   110dc:	beq	11170 <main@@Base+0x1ec>
   110e0:	movw	r1, #6264	; 0x1878
   110e4:	mov	r0, sl
   110e8:	movt	r1, #1
   110ec:	bl	10d2c <strcmp@plt>
   110f0:	cmp	r0, #0
   110f4:	movw	r0, #12468	; 0x30b4
   110f8:	movt	r0, #2
   110fc:	beq	11170 <main@@Base+0x1ec>
   11100:	movw	r1, #6272	; 0x1880
   11104:	mov	r0, sl
   11108:	movt	r1, #1
   1110c:	bl	10d2c <strcmp@plt>
   11110:	cmp	r0, #0
   11114:	movw	r0, #12456	; 0x30a8
   11118:	movt	r0, #2
   1111c:	beq	11170 <main@@Base+0x1ec>
   11120:	movw	r1, #6275	; 0x1883
   11124:	mov	r0, sl
   11128:	movt	r1, #1
   1112c:	bl	10d2c <strcmp@plt>
   11130:	cmp	r0, #0
   11134:	movw	r0, #12456	; 0x30a8
   11138:	movt	r0, #2
   1113c:	beq	11170 <main@@Base+0x1ec>
   11140:	movw	r1, #6288	; 0x1890
   11144:	mov	r0, sl
   11148:	movt	r1, #1
   1114c:	bl	10d2c <strcmp@plt>
   11150:	mov	r1, #0
   11154:	cmp	r0, #0
   11158:	bne	112d8 <main@@Base+0x354>
   1115c:	add	r8, r8, #1
   11160:	mov	r6, r1
   11164:	cmp	r8, r5
   11168:	blt	11088 <main@@Base+0x104>
   1116c:	b	1118c <main@@Base+0x208>
   11170:	mov	r1, #1
   11174:	str	r1, [r0]
   11178:	mov	r1, r6
   1117c:	add	r8, r8, #1
   11180:	mov	r6, r1
   11184:	cmp	r8, r5
   11188:	blt	11088 <main@@Base+0x104>
   1118c:	mov	r6, r1
   11190:	mov	sl, #0
   11194:	bl	10e10 <coda_init@plt>
   11198:	cmp	r0, #0
   1119c:	bne	11344 <main@@Base+0x3c0>
   111a0:	mov	r0, #0
   111a4:	mov	r7, #0
   111a8:	bl	10d20 <coda_set_option_perform_boundary_checks@plt>
   111ac:	mov	r0, #0
   111b0:	bl	10e28 <coda_set_option_perform_conversions@plt>
   111b4:	mov	r0, r6
   111b8:	bl	10d68 <coda_set_option_use_mmap@plt>
   111bc:	cmp	sl, #0
   111c0:	beq	11268 <main@@Base+0x2e4>
   111c4:	movw	r5, #12448	; 0x30a0
   111c8:	mov	r4, sp
   111cc:	movt	r5, #2
   111d0:	b	111e8 <main@@Base+0x264>
   111d4:	mov	r0, r4
   111d8:	bl	11390 <main@@Base+0x40c>
   111dc:	mov	r0, #0
   111e0:	mov	r7, #0
   111e4:	bl	10d5c <fflush@plt>
   111e8:	ldr	r0, [r5]
   111ec:	bl	10e7c <getc@plt>
   111f0:	uxtb	r1, r0
   111f4:	cmp	r1, #10
   111f8:	beq	11220 <main@@Base+0x29c>
   111fc:	cmp	r1, #13
   11200:	bne	11238 <main@@Base+0x2b4>
   11204:	ldr	r0, [r5]
   11208:	bl	10e7c <getc@plt>
   1120c:	uxtb	r0, r0
   11210:	cmp	r0, #10
   11214:	beq	11220 <main@@Base+0x29c>
   11218:	ldr	r1, [r5]
   1121c:	bl	10e1c <ungetc@plt>
   11220:	mov	r0, #0
   11224:	cmp	r7, #0
   11228:	strb	r0, [r4, r7]
   1122c:	mov	r7, #0
   11230:	beq	111e8 <main@@Base+0x264>
   11234:	b	111d4 <main@@Base+0x250>
   11238:	strb	r0, [r4, r7]
   1123c:	add	r7, r7, #1
   11240:	cmp	r7, #1000	; 0x3e8
   11244:	bcc	111e8 <main@@Base+0x264>
   11248:	movw	r0, #6326	; 0x18b6
   1124c:	movw	r1, #6335	; 0x18bf
   11250:	movw	r3, #6406	; 0x1906
   11254:	mov	r2, #316	; 0x13c
   11258:	movt	r0, #1
   1125c:	movt	r1, #1
   11260:	movt	r3, #1
   11264:	bl	10e88 <__assert_fail@plt>
   11268:	cmp	r8, r5
   1126c:	bge	11290 <main@@Base+0x30c>
   11270:	sub	r5, r5, r8
   11274:	add	r4, r4, r8, lsl #2
   11278:	ldr	r0, [r4], #4
   1127c:	bl	11390 <main@@Base+0x40c>
   11280:	mov	r0, #0
   11284:	bl	10d5c <fflush@plt>
   11288:	subs	r5, r5, #1
   1128c:	bne	11278 <main@@Base+0x2f4>
   11290:	bl	10dbc <coda_done@plt>
   11294:	movw	r0, #12460	; 0x30ac
   11298:	movt	r0, #2
   1129c:	ldr	r0, [r0]
   112a0:	cmp	r0, #0
   112a4:	moveq	r0, #0
   112a8:	subeq	sp, fp, #28
   112ac:	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   112b0:	mov	r0, #1
   112b4:	bl	10df8 <exit@plt>
   112b8:	ldr	r0, [r4, #8]
   112bc:	bl	10d8c <coda_set_definition_path@plt>
   112c0:	mov	r8, #3
   112c4:	mov	sl, #0
   112c8:	mov	r6, #1
   112cc:	cmp	r8, r5
   112d0:	blt	1107c <main@@Base+0xf8>
   112d4:	b	11194 <main@@Base+0x210>
   112d8:	movw	r1, #6298	; 0x189a
   112dc:	mov	r0, sl
   112e0:	movt	r1, #1
   112e4:	bl	10d2c <strcmp@plt>
   112e8:	sub	r1, r5, #1
   112ec:	cmp	r1, r8
   112f0:	cmpeq	r0, #0
   112f4:	beq	11334 <main@@Base+0x3b0>
   112f8:	ldrb	r0, [sl]
   112fc:	mov	sl, #0
   11300:	cmp	r0, #45	; 0x2d
   11304:	bne	11194 <main@@Base+0x210>
   11308:	movw	r0, #12440	; 0x3098
   1130c:	mov	r1, #25
   11310:	mov	r2, #1
   11314:	movt	r0, #2
   11318:	ldr	r3, [r0]
   1131c:	movw	r0, #6300	; 0x189c
   11320:	movt	r0, #1
   11324:	bl	10da4 <fwrite@plt>
   11328:	bl	115b4 <main@@Base+0x630>
   1132c:	mov	r0, #1
   11330:	bl	10df8 <exit@plt>
   11334:	mov	sl, #1
   11338:	bl	10e10 <coda_init@plt>
   1133c:	cmp	r0, #0
   11340:	beq	111a0 <main@@Base+0x21c>
   11344:	movw	r0, #12440	; 0x3098
   11348:	movt	r0, #2
   1134c:	ldr	r4, [r0]
   11350:	bl	10e64 <coda_get_errno@plt>
   11354:	ldr	r0, [r0]
   11358:	bl	10e4c <coda_errno_to_string@plt>
   1135c:	movw	r1, #6499	; 0x1963
   11360:	mov	r2, r0
   11364:	mov	r0, r4
   11368:	movt	r1, #1
   1136c:	bl	10e04 <fprintf@plt>
   11370:	mov	r0, #1
   11374:	bl	10df8 <exit@plt>
   11378:	bl	115b4 <main@@Base+0x630>
   1137c:	mov	r0, #0
   11380:	bl	10df8 <exit@plt>
   11384:	bl	11738 <main@@Base+0x7b4>
   11388:	mov	r0, #0
   1138c:	bl	10df8 <exit@plt>
   11390:	push	{r4, sl, fp, lr}
   11394:	add	fp, sp, #8
   11398:	sub	sp, sp, #40	; 0x28
   1139c:	mov	r4, r0
   113a0:	bl	10dc8 <puts@plt>
   113a4:	add	r0, sp, #12
   113a8:	add	r1, sp, #16
   113ac:	sub	r2, fp, #16
   113b0:	add	r3, sp, #20
   113b4:	str	r1, [sp]
   113b8:	str	r0, [sp, #4]
   113bc:	add	r1, sp, #24
   113c0:	mov	r0, r4
   113c4:	bl	10d98 <coda_recognize_file@plt>
   113c8:	cmp	r0, #0
   113cc:	beq	113fc <main@@Base+0x478>
   113d0:	bl	10e64 <coda_get_errno@plt>
   113d4:	ldr	r0, [r0]
   113d8:	bl	10e4c <coda_errno_to_string@plt>
   113dc:	mov	r1, r0
   113e0:	movw	r0, #6451	; 0x1933
   113e4:	movt	r0, #1
   113e8:	bl	10d38 <printf@plt>
   113ec:	mov	r0, #0
   113f0:	mov	r1, #0
   113f4:	bl	10d44 <coda_set_error@plt>
   113f8:	b	114f4 <main@@Base+0x570>
   113fc:	movw	r0, #12456	; 0x30a8
   11400:	movt	r0, #2
   11404:	ldr	r0, [r0]
   11408:	cmp	r0, #0
   1140c:	beq	11434 <main@@Base+0x4b0>
   11410:	ldr	r0, [sp, #20]
   11414:	cmp	r0, #0
   11418:	ldrne	r0, [sp, #16]
   1141c:	cmpne	r0, #0
   11420:	bne	11434 <main@@Base+0x4b0>
   11424:	movw	r0, #6544	; 0x1990
   11428:	movt	r0, #1
   1142c:	bl	10dc8 <puts@plt>
   11430:	b	114f4 <main@@Base+0x570>
   11434:	movw	r0, #12464	; 0x30b0
   11438:	movt	r0, #2
   1143c:	ldr	r0, [r0]
   11440:	cmp	r0, #0
   11444:	beq	1148c <main@@Base+0x508>
   11448:	ldr	r0, [fp, #-16]
   1144c:	bl	10db0 <coda_type_get_format_name@plt>
   11450:	mov	r1, r0
   11454:	movw	r0, #6465	; 0x1941
   11458:	movt	r0, #1
   1145c:	bl	10d38 <printf@plt>
   11460:	ldr	r1, [sp, #20]
   11464:	cmp	r1, #0
   11468:	ldrne	r2, [sp, #16]
   1146c:	cmpne	r2, #0
   11470:	beq	11484 <main@@Base+0x500>
   11474:	ldr	r3, [sp, #12]
   11478:	movw	r0, #6486	; 0x1956
   1147c:	movt	r0, #1
   11480:	bl	10d38 <printf@plt>
   11484:	mov	r0, #10
   11488:	bl	10e34 <putchar@plt>
   1148c:	sub	r1, fp, #12
   11490:	mov	r0, r4
   11494:	bl	10d50 <coda_open@plt>
   11498:	cmp	r0, #0
   1149c:	beq	1150c <main@@Base+0x588>
   114a0:	bl	10e64 <coda_get_errno@plt>
   114a4:	ldr	r0, [r0]
   114a8:	cmn	r0, #21
   114ac:	bne	114d8 <main@@Base+0x554>
   114b0:	mov	r0, #0
   114b4:	bl	10d68 <coda_set_option_use_mmap@plt>
   114b8:	sub	r1, fp, #12
   114bc:	mov	r0, r4
   114c0:	bl	10d50 <coda_open@plt>
   114c4:	mov	r4, r0
   114c8:	mov	r0, #1
   114cc:	bl	10d68 <coda_set_option_use_mmap@plt>
   114d0:	cmp	r4, #0
   114d4:	beq	1150c <main@@Base+0x588>
   114d8:	bl	10e64 <coda_get_errno@plt>
   114dc:	ldr	r0, [r0]
   114e0:	bl	10e4c <coda_errno_to_string@plt>
   114e4:	mov	r1, r0
   114e8:	movw	r0, #6451	; 0x1933
   114ec:	movt	r0, #1
   114f0:	bl	10d38 <printf@plt>
   114f4:	movw	r0, #12460	; 0x30ac
   114f8:	mov	r1, #1
   114fc:	movt	r0, #2
   11500:	str	r1, [r0]
   11504:	sub	sp, fp, #8
   11508:	pop	{r4, sl, fp, pc}
   1150c:	movw	r0, #12468	; 0x30b4
   11510:	movw	r2, #5996	; 0x176c
   11514:	mov	r3, #0
   11518:	movt	r0, #2
   1151c:	movt	r2, #1
   11520:	ldr	r1, [r0]
   11524:	ldr	r0, [fp, #-12]
   11528:	clz	r1, r1
   1152c:	lsr	r1, r1, #5
   11530:	bl	10dd4 <coda_product_check@plt>
   11534:	cmp	r0, #0
   11538:	beq	11578 <main@@Base+0x5f4>
   1153c:	bl	10e64 <coda_get_errno@plt>
   11540:	ldr	r0, [r0]
   11544:	bl	10e4c <coda_errno_to_string@plt>
   11548:	mov	r1, r0
   1154c:	movw	r0, #6451	; 0x1933
   11550:	movt	r0, #1
   11554:	bl	10d38 <printf@plt>
   11558:	movw	r0, #12460	; 0x30ac
   1155c:	mov	r1, #1
   11560:	movt	r0, #2
   11564:	str	r1, [r0]
   11568:	ldr	r0, [fp, #-12]
   1156c:	bl	10e40 <coda_close@plt>
   11570:	sub	sp, fp, #8
   11574:	pop	{r4, sl, fp, pc}
   11578:	ldr	r0, [fp, #-12]
   1157c:	bl	10e40 <coda_close@plt>
   11580:	cmp	r0, #0
   11584:	beq	115a4 <main@@Base+0x620>
   11588:	bl	10e64 <coda_get_errno@plt>
   1158c:	ldr	r0, [r0]
   11590:	bl	10e4c <coda_errno_to_string@plt>
   11594:	mov	r1, r0
   11598:	movw	r0, #6497	; 0x1961
   1159c:	movt	r0, #1
   115a0:	b	114f0 <main@@Base+0x56c>
   115a4:	mov	r0, #10
   115a8:	bl	10e34 <putchar@plt>
   115ac:	sub	sp, fp, #8
   115b0:	pop	{r4, sl, fp, pc}
   115b4:	push	{fp, lr}
   115b8:	mov	fp, sp
   115bc:	movw	r0, #6527	; 0x197f
   115c0:	movt	r0, #1
   115c4:	bl	10dc8 <puts@plt>
   115c8:	movw	r0, #6592	; 0x19c0
   115cc:	movt	r0, #1
   115d0:	bl	10dc8 <puts@plt>
   115d4:	movw	r0, #6656	; 0x1a00
   115d8:	movt	r0, #1
   115dc:	bl	10dc8 <puts@plt>
   115e0:	movw	r0, #6736	; 0x1a50
   115e4:	movt	r0, #1
   115e8:	bl	10dc8 <puts@plt>
   115ec:	movw	r0, #6768	; 0x1a70
   115f0:	movt	r0, #1
   115f4:	bl	10dc8 <puts@plt>
   115f8:	movw	r0, #6800	; 0x1a90
   115fc:	movt	r0, #1
   11600:	bl	10dc8 <puts@plt>
   11604:	movw	r0, #6880	; 0x1ae0
   11608:	movt	r0, #1
   1160c:	bl	10dc8 <puts@plt>
   11610:	movw	r0, #6960	; 0x1b30
   11614:	movt	r0, #1
   11618:	bl	10dc8 <puts@plt>
   1161c:	movw	r0, #7040	; 0x1b80
   11620:	movt	r0, #1
   11624:	bl	10dc8 <puts@plt>
   11628:	movw	r0, #7072	; 0x1ba0
   1162c:	movt	r0, #1
   11630:	bl	10dc8 <puts@plt>
   11634:	movw	r0, #7136	; 0x1be0
   11638:	movt	r0, #1
   1163c:	bl	10dc8 <puts@plt>
   11640:	movw	r0, #7200	; 0x1c20
   11644:	movt	r0, #1
   11648:	bl	10dc8 <puts@plt>
   1164c:	movw	r0, #7232	; 0x1c40
   11650:	movt	r0, #1
   11654:	bl	10dc8 <puts@plt>
   11658:	movw	r0, #7312	; 0x1c90
   1165c:	movt	r0, #1
   11660:	bl	10dc8 <puts@plt>
   11664:	movw	r0, #7344	; 0x1cb0
   11668:	movt	r0, #1
   1166c:	bl	10dc8 <puts@plt>
   11670:	mov	r0, #10
   11674:	bl	10e34 <putchar@plt>
   11678:	movw	r0, #7408	; 0x1cf0
   1167c:	movt	r0, #1
   11680:	bl	10dc8 <puts@plt>
   11684:	movw	r0, #7488	; 0x1d40
   11688:	movt	r0, #1
   1168c:	bl	10dc8 <puts@plt>
   11690:	mov	r0, #10
   11694:	bl	10e34 <putchar@plt>
   11698:	movw	r0, #7520	; 0x1d60
   1169c:	movt	r0, #1
   116a0:	bl	10dc8 <puts@plt>
   116a4:	movw	r0, #7552	; 0x1d80
   116a8:	movt	r0, #1
   116ac:	bl	10dc8 <puts@plt>
   116b0:	mov	r0, #10
   116b4:	bl	10e34 <putchar@plt>
   116b8:	movw	r0, #7584	; 0x1da0
   116bc:	movt	r0, #1
   116c0:	bl	10dc8 <puts@plt>
   116c4:	movw	r0, #7616	; 0x1dc0
   116c8:	movt	r0, #1
   116cc:	bl	10dc8 <puts@plt>
   116d0:	mov	r0, #10
   116d4:	bl	10e34 <putchar@plt>
   116d8:	movw	r0, #7680	; 0x1e00
   116dc:	movt	r0, #1
   116e0:	bl	10dc8 <puts@plt>
   116e4:	movw	r0, #7760	; 0x1e50
   116e8:	movt	r0, #1
   116ec:	bl	10dc8 <puts@plt>
   116f0:	movw	r0, #7840	; 0x1ea0
   116f4:	movt	r0, #1
   116f8:	bl	10dc8 <puts@plt>
   116fc:	movw	r0, #7888	; 0x1ed0
   11700:	movt	r0, #1
   11704:	bl	10dc8 <puts@plt>
   11708:	movw	r0, #7968	; 0x1f20
   1170c:	movt	r0, #1
   11710:	bl	10dc8 <puts@plt>
   11714:	movw	r0, #8048	; 0x1f70
   11718:	movt	r0, #1
   1171c:	bl	10dc8 <puts@plt>
   11720:	movw	r0, #8112	; 0x1fb0
   11724:	movt	r0, #1
   11728:	bl	10dc8 <puts@plt>
   1172c:	mov	r0, #10
   11730:	pop	{fp, lr}
   11734:	b	10e34 <putchar@plt>
   11738:	push	{fp, lr}
   1173c:	mov	fp, sp
   11740:	bl	10e58 <coda_get_libcoda_version@plt>
   11744:	mov	r1, r0
   11748:	movw	r0, #6429	; 0x191d
   1174c:	movt	r0, #1
   11750:	bl	10d38 <printf@plt>
   11754:	movw	r0, #8176	; 0x1ff0
   11758:	movt	r0, #1
   1175c:	bl	10dc8 <puts@plt>
   11760:	mov	r0, #10
   11764:	pop	{fp, lr}
   11768:	b	10e34 <putchar@plt>
   1176c:	push	{r4, sl, fp, lr}
   11770:	add	fp, sp, #8
   11774:	mov	r4, r0
   11778:	movw	r0, #6510	; 0x196e
   1177c:	movt	r0, #1
   11780:	bl	10d38 <printf@plt>
   11784:	cmp	r4, #0
   11788:	beq	117a8 <main@@Base+0x824>
   1178c:	movw	r0, #6522	; 0x197a
   11790:	movt	r0, #1
   11794:	bl	10d38 <printf@plt>
   11798:	movw	r1, #3384	; 0xd38
   1179c:	mov	r0, r4
   117a0:	movt	r1, #1
   117a4:	bl	10d74 <coda_cursor_print_path@plt>
   117a8:	mov	r0, #10
   117ac:	bl	10e34 <putchar@plt>
   117b0:	movw	r0, #12460	; 0x30ac
   117b4:	mov	r1, #1
   117b8:	movt	r0, #2
   117bc:	str	r1, [r0]
   117c0:	pop	{r4, sl, fp, pc}

000117c4 <__libc_csu_init@@Base>:
   117c4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   117c8:	mov	r7, r0
   117cc:	ldr	r6, [pc, #72]	; 1181c <__libc_csu_init@@Base+0x58>
   117d0:	ldr	r5, [pc, #72]	; 11820 <__libc_csu_init@@Base+0x5c>
   117d4:	add	r6, pc, r6
   117d8:	add	r5, pc, r5
   117dc:	sub	r6, r6, r5
   117e0:	mov	r8, r1
   117e4:	mov	r9, r2
   117e8:	bl	10d00 <coda_set_option_perform_boundary_checks@plt-0x20>
   117ec:	asrs	r6, r6, #2
   117f0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   117f4:	mov	r4, #0
   117f8:	add	r4, r4, #1
   117fc:	ldr	r3, [r5], #4
   11800:	mov	r2, r9
   11804:	mov	r1, r8
   11808:	mov	r0, r7
   1180c:	blx	r3
   11810:	cmp	r6, r4
   11814:	bne	117f8 <__libc_csu_init@@Base+0x34>
   11818:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1181c:	andeq	r1, r1, r8, lsl r7
   11820:	andeq	r1, r1, r0, lsl r7

00011824 <__libc_csu_fini@@Base>:
   11824:	bx	lr

Disassembly of section .fini:

00011828 <.fini>:
   11828:	push	{r3, lr}
   1182c:	pop	{r3, pc}
