
../repos/coreutils/src/tsort:     file format elf32-littlearm


Disassembly of section .init:

00010d5c <.init>:
   10d5c:	push	{r3, lr}
   10d60:	bl	11004 <__assert_fail@plt+0x48>
   10d64:	pop	{r3, pc}

Disassembly of section .plt:

00010d68 <calloc@plt-0x14>:
   10d68:	push	{lr}		; (str lr, [sp, #-4]!)
   10d6c:	ldr	lr, [pc, #4]	; 10d78 <calloc@plt-0x4>
   10d70:	add	lr, pc, lr
   10d74:	ldr	pc, [lr, #8]!
   10d78:	andeq	r5, r1, r8, lsl #5

00010d7c <calloc@plt>:
   10d7c:	add	ip, pc, #0, 12
   10d80:	add	ip, ip, #86016	; 0x15000
   10d84:	ldr	pc, [ip, #648]!	; 0x288

00010d88 <fputs_unlocked@plt>:
   10d88:	add	ip, pc, #0, 12
   10d8c:	add	ip, ip, #86016	; 0x15000
   10d90:	ldr	pc, [ip, #640]!	; 0x280

00010d94 <strcmp@plt>:
   10d94:	add	ip, pc, #0, 12
   10d98:	add	ip, ip, #86016	; 0x15000
   10d9c:	ldr	pc, [ip, #632]!	; 0x278

00010da0 <posix_fadvise64@plt>:
   10da0:	add	ip, pc, #0, 12
   10da4:	add	ip, ip, #86016	; 0x15000
   10da8:	ldr	pc, [ip, #624]!	; 0x270

00010dac <fflush@plt>:
   10dac:	add	ip, pc, #0, 12
   10db0:	add	ip, ip, #86016	; 0x15000
   10db4:	ldr	pc, [ip, #616]!	; 0x268

00010db8 <free@plt>:
   10db8:	add	ip, pc, #0, 12
   10dbc:	add	ip, ip, #86016	; 0x15000
   10dc0:	ldr	pc, [ip, #608]!	; 0x260

00010dc4 <_exit@plt>:
   10dc4:	add	ip, pc, #0, 12
   10dc8:	add	ip, ip, #86016	; 0x15000
   10dcc:	ldr	pc, [ip, #600]!	; 0x258

00010dd0 <memcpy@plt>:
   10dd0:	add	ip, pc, #0, 12
   10dd4:	add	ip, ip, #86016	; 0x15000
   10dd8:	ldr	pc, [ip, #592]!	; 0x250

00010ddc <mbsinit@plt>:
   10ddc:	add	ip, pc, #0, 12
   10de0:	add	ip, ip, #86016	; 0x15000
   10de4:	ldr	pc, [ip, #584]!	; 0x248

00010de8 <memcmp@plt>:
   10de8:	add	ip, pc, #0, 12
   10dec:	add	ip, ip, #86016	; 0x15000
   10df0:	ldr	pc, [ip, #576]!	; 0x240

00010df4 <dcgettext@plt>:
   10df4:	add	ip, pc, #0, 12
   10df8:	add	ip, ip, #86016	; 0x15000
   10dfc:	ldr	pc, [ip, #568]!	; 0x238

00010e00 <dup2@plt>:
   10e00:	add	ip, pc, #0, 12
   10e04:	add	ip, ip, #86016	; 0x15000
   10e08:	ldr	pc, [ip, #560]!	; 0x230

00010e0c <realloc@plt>:
   10e0c:	add	ip, pc, #0, 12
   10e10:	add	ip, ip, #86016	; 0x15000
   10e14:	ldr	pc, [ip, #552]!	; 0x228

00010e18 <textdomain@plt>:
   10e18:	add	ip, pc, #0, 12
   10e1c:	add	ip, ip, #86016	; 0x15000
   10e20:	ldr	pc, [ip, #544]!	; 0x220

00010e24 <iswprint@plt>:
   10e24:	add	ip, pc, #0, 12
   10e28:	add	ip, ip, #86016	; 0x15000
   10e2c:	ldr	pc, [ip, #536]!	; 0x218

00010e30 <fwrite@plt>:
   10e30:	add	ip, pc, #0, 12
   10e34:	add	ip, ip, #86016	; 0x15000
   10e38:	ldr	pc, [ip, #528]!	; 0x210

00010e3c <lseek64@plt>:
   10e3c:	add	ip, pc, #0, 12
   10e40:	add	ip, ip, #86016	; 0x15000
   10e44:	ldr	pc, [ip, #520]!	; 0x208

00010e48 <__ctype_get_mb_cur_max@plt>:
   10e48:	add	ip, pc, #0, 12
   10e4c:	add	ip, ip, #86016	; 0x15000
   10e50:	ldr	pc, [ip, #512]!	; 0x200

00010e54 <__fpending@plt>:
   10e54:	add	ip, pc, #0, 12
   10e58:	add	ip, ip, #86016	; 0x15000
   10e5c:	ldr	pc, [ip, #504]!	; 0x1f8

00010e60 <mbrtowc@plt>:
   10e60:	add	ip, pc, #0, 12
   10e64:	add	ip, ip, #86016	; 0x15000
   10e68:	ldr	pc, [ip, #496]!	; 0x1f0

00010e6c <error@plt>:
   10e6c:	add	ip, pc, #0, 12
   10e70:	add	ip, ip, #86016	; 0x15000
   10e74:	ldr	pc, [ip, #488]!	; 0x1e8

00010e78 <open64@plt>:
   10e78:	add	ip, pc, #0, 12
   10e7c:	add	ip, ip, #86016	; 0x15000
   10e80:	ldr	pc, [ip, #480]!	; 0x1e0

00010e84 <puts@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #86016	; 0x15000
   10e8c:	ldr	pc, [ip, #472]!	; 0x1d8

00010e90 <malloc@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #86016	; 0x15000
   10e98:	ldr	pc, [ip, #464]!	; 0x1d0

00010e9c <__libc_start_main@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #86016	; 0x15000
   10ea4:	ldr	pc, [ip, #456]!	; 0x1c8

00010ea8 <__freading@plt>:
   10ea8:	add	ip, pc, #0, 12
   10eac:	add	ip, ip, #86016	; 0x15000
   10eb0:	ldr	pc, [ip, #448]!	; 0x1c0

00010eb4 <__gmon_start__@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #86016	; 0x15000
   10ebc:	ldr	pc, [ip, #440]!	; 0x1b8

00010ec0 <freopen64@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #86016	; 0x15000
   10ec8:	ldr	pc, [ip, #432]!	; 0x1b0

00010ecc <getopt_long@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #86016	; 0x15000
   10ed4:	ldr	pc, [ip, #424]!	; 0x1a8

00010ed8 <__ctype_b_loc@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #86016	; 0x15000
   10ee0:	ldr	pc, [ip, #416]!	; 0x1a0

00010ee4 <exit@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #86016	; 0x15000
   10eec:	ldr	pc, [ip, #408]!	; 0x198

00010ef0 <strlen@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #86016	; 0x15000
   10ef8:	ldr	pc, [ip, #400]!	; 0x190

00010efc <__errno_location@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #86016	; 0x15000
   10f04:	ldr	pc, [ip, #392]!	; 0x188

00010f08 <__cxa_atexit@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #86016	; 0x15000
   10f10:	ldr	pc, [ip, #384]!	; 0x180

00010f14 <memset@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #86016	; 0x15000
   10f1c:	ldr	pc, [ip, #376]!	; 0x178

00010f20 <__printf_chk@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #86016	; 0x15000
   10f28:	ldr	pc, [ip, #368]!	; 0x170

00010f2c <fileno@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #86016	; 0x15000
   10f34:	ldr	pc, [ip, #360]!	; 0x168

00010f38 <__fprintf_chk@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #86016	; 0x15000
   10f40:	ldr	pc, [ip, #352]!	; 0x160

00010f44 <fclose@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #86016	; 0x15000
   10f4c:	ldr	pc, [ip, #344]!	; 0x158

00010f50 <fseeko64@plt>:
   10f50:	add	ip, pc, #0, 12
   10f54:	add	ip, ip, #86016	; 0x15000
   10f58:	ldr	pc, [ip, #336]!	; 0x150

00010f5c <__uflow@plt>:
   10f5c:	add	ip, pc, #0, 12
   10f60:	add	ip, ip, #86016	; 0x15000
   10f64:	ldr	pc, [ip, #328]!	; 0x148

00010f68 <setlocale@plt>:
   10f68:	add	ip, pc, #0, 12
   10f6c:	add	ip, ip, #86016	; 0x15000
   10f70:	ldr	pc, [ip, #320]!	; 0x140

00010f74 <strrchr@plt>:
   10f74:	add	ip, pc, #0, 12
   10f78:	add	ip, ip, #86016	; 0x15000
   10f7c:	ldr	pc, [ip, #312]!	; 0x138

00010f80 <nl_langinfo@plt>:
   10f80:	add	ip, pc, #0, 12
   10f84:	add	ip, ip, #86016	; 0x15000
   10f88:	ldr	pc, [ip, #304]!	; 0x130

00010f8c <bindtextdomain@plt>:
   10f8c:	add	ip, pc, #0, 12
   10f90:	add	ip, ip, #86016	; 0x15000
   10f94:	ldr	pc, [ip, #296]!	; 0x128

00010f98 <strncmp@plt>:
   10f98:	add	ip, pc, #0, 12
   10f9c:	add	ip, ip, #86016	; 0x15000
   10fa0:	ldr	pc, [ip, #288]!	; 0x120

00010fa4 <abort@plt>:
   10fa4:	add	ip, pc, #0, 12
   10fa8:	add	ip, ip, #86016	; 0x15000
   10fac:	ldr	pc, [ip, #280]!	; 0x118

00010fb0 <close@plt>:
   10fb0:	add	ip, pc, #0, 12
   10fb4:	add	ip, ip, #86016	; 0x15000
   10fb8:	ldr	pc, [ip, #272]!	; 0x110

00010fbc <__assert_fail@plt>:
   10fbc:	add	ip, pc, #0, 12
   10fc0:	add	ip, ip, #86016	; 0x15000
   10fc4:	ldr	pc, [ip, #264]!	; 0x108

Disassembly of section .text:

00010fc8 <.text>:
   10fc8:	mov	fp, #0
   10fcc:	mov	lr, #0
   10fd0:	pop	{r1}		; (ldr r1, [sp], #4)
   10fd4:	mov	r2, sp
   10fd8:	push	{r2}		; (str r2, [sp, #-4]!)
   10fdc:	push	{r0}		; (str r0, [sp, #-4]!)
   10fe0:	ldr	ip, [pc, #16]	; 10ff8 <__assert_fail@plt+0x3c>
   10fe4:	push	{ip}		; (str ip, [sp, #-4]!)
   10fe8:	ldr	r0, [pc, #12]	; 10ffc <__assert_fail@plt+0x40>
   10fec:	ldr	r3, [pc, #12]	; 11000 <__assert_fail@plt+0x44>
   10ff0:	bl	10e9c <__libc_start_main@plt>
   10ff4:	bl	10fa4 <abort@plt>
   10ff8:	andeq	r5, r1, r4, lsr r4
   10ffc:	andeq	r1, r1, r8, lsl r3
   11000:	ldrdeq	r5, [r1], -r4
   11004:	ldr	r3, [pc, #20]	; 11020 <__assert_fail@plt+0x64>
   11008:	ldr	r2, [pc, #20]	; 11024 <__assert_fail@plt+0x68>
   1100c:	add	r3, pc, r3
   11010:	ldr	r2, [r3, r2]
   11014:	cmp	r2, #0
   11018:	bxeq	lr
   1101c:	b	10eb4 <__gmon_start__@plt>
   11020:	andeq	r4, r1, ip, ror #31
   11024:	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   11028:	ldr	r0, [pc, #24]	; 11048 <__assert_fail@plt+0x8c>
   1102c:	ldr	r3, [pc, #24]	; 1104c <__assert_fail@plt+0x90>
   11030:	cmp	r3, r0
   11034:	bxeq	lr
   11038:	ldr	r3, [pc, #16]	; 11050 <__assert_fail@plt+0x94>
   1103c:	cmp	r3, #0
   11040:	bxeq	lr
   11044:	bx	r3
   11048:	andeq	r6, r2, r8, lsr #2
   1104c:	andeq	r6, r2, r8, lsr #2
   11050:	andeq	r0, r0, r0
   11054:	ldr	r0, [pc, #36]	; 11080 <__assert_fail@plt+0xc4>
   11058:	ldr	r1, [pc, #36]	; 11084 <__assert_fail@plt+0xc8>
   1105c:	sub	r1, r1, r0
   11060:	asr	r1, r1, #2
   11064:	add	r1, r1, r1, lsr #31
   11068:	asrs	r1, r1, #1
   1106c:	bxeq	lr
   11070:	ldr	r3, [pc, #16]	; 11088 <__assert_fail@plt+0xcc>
   11074:	cmp	r3, #0
   11078:	bxeq	lr
   1107c:	bx	r3
   11080:	andeq	r6, r2, r8, lsr #2
   11084:	andeq	r6, r2, r8, lsr #2
   11088:	andeq	r0, r0, r0
   1108c:	push	{r4, lr}
   11090:	ldr	r4, [pc, #24]	; 110b0 <__assert_fail@plt+0xf4>
   11094:	ldrb	r3, [r4]
   11098:	cmp	r3, #0
   1109c:	popne	{r4, pc}
   110a0:	bl	11028 <__assert_fail@plt+0x6c>
   110a4:	mov	r3, #1
   110a8:	strb	r3, [r4]
   110ac:	pop	{r4, pc}
   110b0:	andeq	r6, r2, ip, asr #2
   110b4:	b	11054 <__assert_fail@plt+0x98>
   110b8:	push	{fp, lr}
   110bc:	mov	fp, sp
   110c0:	sub	sp, sp, #56	; 0x38
   110c4:	mov	r4, r0
   110c8:	cmp	r0, #0
   110cc:	bne	112d4 <__assert_fail@plt+0x318>
   110d0:	movw	r1, #21635	; 0x5483
   110d4:	mov	r0, #0
   110d8:	mov	r2, #5
   110dc:	movt	r1, #1
   110e0:	bl	10df4 <dcgettext@plt>
   110e4:	mov	r1, r0
   110e8:	movw	r0, #24936	; 0x6168
   110ec:	movt	r0, #2
   110f0:	ldr	r2, [r0]
   110f4:	mov	r0, #1
   110f8:	bl	10f20 <__printf_chk@plt>
   110fc:	movw	r1, #21909	; 0x5595
   11100:	mov	r0, #0
   11104:	mov	r2, #5
   11108:	movt	r1, #1
   1110c:	bl	10df4 <dcgettext@plt>
   11110:	movw	r7, #24900	; 0x6144
   11114:	movt	r7, #2
   11118:	ldr	r1, [r7]
   1111c:	bl	10d88 <fputs_unlocked@plt>
   11120:	movw	r1, #22278	; 0x5706
   11124:	mov	r0, #0
   11128:	mov	r2, #5
   1112c:	movt	r1, #1
   11130:	bl	10df4 <dcgettext@plt>
   11134:	ldr	r1, [r7]
   11138:	bl	10d88 <fputs_unlocked@plt>
   1113c:	movw	r1, #21735	; 0x54e7
   11140:	mov	r0, #0
   11144:	mov	r2, #5
   11148:	movt	r1, #1
   1114c:	bl	10df4 <dcgettext@plt>
   11150:	ldr	r1, [r7]
   11154:	bl	10d88 <fputs_unlocked@plt>
   11158:	movw	r1, #21780	; 0x5514
   1115c:	mov	r0, #0
   11160:	mov	r2, #5
   11164:	movt	r1, #1
   11168:	bl	10df4 <dcgettext@plt>
   1116c:	ldr	r1, [r7]
   11170:	bl	10d88 <fputs_unlocked@plt>
   11174:	movw	r0, #22576	; 0x5830
   11178:	mov	r2, #48	; 0x30
   1117c:	mov	r6, sp
   11180:	movw	r5, #21834	; 0x554a
   11184:	movt	r0, #1
   11188:	movt	r5, #1
   1118c:	add	r1, r0, #32
   11190:	add	r3, r0, #16
   11194:	vld1.64	{d18-d19}, [r0], r2
   11198:	vld1.64	{d16-d17}, [r1]
   1119c:	vld1.64	{d20-d21}, [r3]
   111a0:	add	r1, r6, #32
   111a4:	vldr	d22, [r0]
   111a8:	add	r0, r6, #16
   111ac:	vst1.64	{d16-d17}, [r1]
   111b0:	movw	r1, #21965	; 0x55cd
   111b4:	vst1.64	{d20-d21}, [r0]
   111b8:	mov	r0, r6
   111bc:	vst1.64	{d18-d19}, [r0], r2
   111c0:	movt	r1, #1
   111c4:	vstr	d22, [r0]
   111c8:	mov	r0, r5
   111cc:	bl	10d94 <strcmp@plt>
   111d0:	cmp	r0, #0
   111d4:	ldrne	r1, [r6, #8]!
   111d8:	cmpne	r1, #0
   111dc:	bne	111c8 <__assert_fail@plt+0x20c>
   111e0:	ldr	r6, [r6, #4]
   111e4:	movw	r1, #22060	; 0x562c
   111e8:	mov	r0, #0
   111ec:	mov	r2, #5
   111f0:	movt	r1, #1
   111f4:	bl	10df4 <dcgettext@plt>
   111f8:	movw	r2, #21864	; 0x5568
   111fc:	movw	r3, #22083	; 0x5643
   11200:	mov	r1, r0
   11204:	mov	r0, #1
   11208:	movt	r2, #1
   1120c:	movt	r3, #1
   11210:	bl	10f20 <__printf_chk@plt>
   11214:	cmp	r6, #0
   11218:	mov	r0, #5
   1121c:	mov	r1, #0
   11220:	moveq	r6, r5
   11224:	bl	10f68 <setlocale@plt>
   11228:	cmp	r0, #0
   1122c:	beq	11264 <__assert_fail@plt+0x2a8>
   11230:	movw	r1, #22123	; 0x566b
   11234:	mov	r2, #3
   11238:	movt	r1, #1
   1123c:	bl	10f98 <strncmp@plt>
   11240:	cmp	r0, #0
   11244:	beq	11264 <__assert_fail@plt+0x2a8>
   11248:	movw	r1, #22127	; 0x566f
   1124c:	mov	r0, #0
   11250:	mov	r2, #5
   11254:	movt	r1, #1
   11258:	bl	10df4 <dcgettext@plt>
   1125c:	ldr	r1, [r7]
   11260:	bl	10d88 <fputs_unlocked@plt>
   11264:	movw	r1, #22198	; 0x56b6
   11268:	mov	r0, #0
   1126c:	mov	r2, #5
   11270:	movt	r1, #1
   11274:	bl	10df4 <dcgettext@plt>
   11278:	movw	r2, #22083	; 0x5643
   1127c:	mov	r1, r0
   11280:	mov	r0, #1
   11284:	mov	r3, r5
   11288:	movt	r2, #1
   1128c:	bl	10f20 <__printf_chk@plt>
   11290:	movw	r1, #22225	; 0x56d1
   11294:	mov	r0, #0
   11298:	mov	r2, #5
   1129c:	movt	r1, #1
   112a0:	bl	10df4 <dcgettext@plt>
   112a4:	movw	r3, #22279	; 0x5707
   112a8:	mov	r1, r0
   112ac:	movw	r0, #21993	; 0x55e9
   112b0:	cmp	r6, r5
   112b4:	mov	r2, r6
   112b8:	movt	r0, #1
   112bc:	movt	r3, #1
   112c0:	moveq	r3, r0
   112c4:	mov	r0, #1
   112c8:	bl	10f20 <__printf_chk@plt>
   112cc:	mov	r0, r4
   112d0:	bl	10ee4 <exit@plt>
   112d4:	movw	r0, #24888	; 0x6138
   112d8:	movw	r1, #21596	; 0x545c
   112dc:	mov	r2, #5
   112e0:	movt	r0, #2
   112e4:	movt	r1, #1
   112e8:	ldr	r5, [r0]
   112ec:	mov	r0, #0
   112f0:	bl	10df4 <dcgettext@plt>
   112f4:	mov	r2, r0
   112f8:	movw	r0, #24936	; 0x6168
   112fc:	mov	r1, #1
   11300:	movt	r0, #2
   11304:	ldr	r3, [r0]
   11308:	mov	r0, r5
   1130c:	bl	10f38 <__fprintf_chk@plt>
   11310:	mov	r0, r4
   11314:	bl	10ee4 <exit@plt>
   11318:	push	{fp, lr}
   1131c:	mov	fp, sp
   11320:	sub	sp, sp, #24
   11324:	mov	r5, r0
   11328:	ldr	r0, [r1]
   1132c:	mov	r4, r1
   11330:	bl	123d4 <__assert_fail@plt+0x1418>
   11334:	movw	r1, #22279	; 0x5707
   11338:	mov	r0, #6
   1133c:	movt	r1, #1
   11340:	bl	10f68 <setlocale@plt>
   11344:	movw	r6, #21868	; 0x556c
   11348:	movw	r1, #21840	; 0x5550
   1134c:	movt	r6, #1
   11350:	movt	r1, #1
   11354:	mov	r0, r6
   11358:	bl	10f8c <bindtextdomain@plt>
   1135c:	mov	r0, r6
   11360:	bl	10e18 <textdomain@plt>
   11364:	movw	r0, #7504	; 0x1d50
   11368:	movt	r0, #1
   1136c:	bl	15438 <__assert_fail@plt+0x447c>
   11370:	movw	r0, #24800	; 0x60e0
   11374:	movw	r2, #21878	; 0x5576
   11378:	movw	r3, #4280	; 0x10b8
   1137c:	mov	r6, #1
   11380:	mov	r1, #0
   11384:	movt	r0, #2
   11388:	movt	r2, #1
   1138c:	movt	r3, #1
   11390:	ldr	r0, [r0]
   11394:	stm	sp, {r0, r6}
   11398:	str	r3, [sp, #8]
   1139c:	movw	r3, #21864	; 0x5568
   113a0:	str	r2, [sp, #12]
   113a4:	movw	r2, #21834	; 0x554a
   113a8:	str	r1, [sp, #16]
   113ac:	mov	r0, r5
   113b0:	mov	r1, r4
   113b4:	movt	r2, #1
   113b8:	movt	r3, #1
   113bc:	bl	1230c <__assert_fail@plt+0x1350>
   113c0:	movw	r6, #24880	; 0x6130
   113c4:	movt	r6, #2
   113c8:	ldr	r0, [r6]
   113cc:	sub	r1, r5, r0
   113d0:	cmp	r1, #2
   113d4:	blt	1141c <__assert_fail@plt+0x460>
   113d8:	movw	r1, #21892	; 0x5584
   113dc:	mov	r0, #0
   113e0:	mov	r2, #5
   113e4:	movt	r1, #1
   113e8:	bl	10df4 <dcgettext@plt>
   113ec:	mov	r5, r0
   113f0:	ldr	r0, [r6]
   113f4:	add	r0, r4, r0, lsl #2
   113f8:	ldr	r0, [r0, #4]
   113fc:	bl	14008 <__assert_fail@plt+0x304c>
   11400:	mov	r3, r0
   11404:	mov	r0, #0
   11408:	mov	r1, #0
   1140c:	mov	r2, r5
   11410:	bl	10e6c <error@plt>
   11414:	mov	r0, #1
   11418:	bl	110b8 <__assert_fail@plt+0xfc>
   1141c:	cmp	r0, r5
   11420:	bne	11430 <__assert_fail@plt+0x474>
   11424:	movw	r0, #22806	; 0x5916
   11428:	movt	r0, #1
   1142c:	bl	11438 <__assert_fail@plt+0x47c>
   11430:	ldr	r0, [r4, r0, lsl #2]
   11434:	bl	11438 <__assert_fail@plt+0x47c>
   11438:	push	{fp, lr}
   1143c:	mov	fp, sp
   11440:	sub	sp, sp, #40	; 0x28
   11444:	movw	r1, #22806	; 0x5916
   11448:	mov	r9, r0
   1144c:	movt	r1, #1
   11450:	bl	10d94 <strcmp@plt>
   11454:	mov	r4, r0
   11458:	mov	r0, #28
   1145c:	bl	14ec8 <__assert_fail@plt+0x3f0c>
   11460:	mov	sl, r0
   11464:	cmp	r4, #0
   11468:	str	r4, [sp, #16]
   1146c:	beq	11494 <__assert_fail@plt+0x4d8>
   11470:	movw	r0, #24896	; 0x6140
   11474:	movw	r1, #22657	; 0x5881
   11478:	movt	r0, #2
   1147c:	movt	r1, #1
   11480:	ldr	r2, [r0]
   11484:	mov	r0, r9
   11488:	bl	11f70 <__assert_fail@plt+0xfb4>
   1148c:	cmp	r0, #0
   11490:	beq	11a98 <__assert_fail@plt+0xadc>
   11494:	movw	r4, #24896	; 0x6140
   11498:	mov	r1, #2
   1149c:	movt	r4, #2
   114a0:	ldr	r0, [r4]
   114a4:	bl	11e3c <__assert_fail@plt+0xe80>
   114a8:	sub	r6, fp, #8
   114ac:	mov	r0, r6
   114b0:	bl	14140 <__assert_fail@plt+0x3184>
   114b4:	movw	r5, #22276	; 0x5704
   114b8:	mov	r0, #0
   114bc:	str	r9, [fp, #-12]
   114c0:	movt	r5, #1
   114c4:	b	114f0 <__assert_fail@plt+0x534>
   114c8:	ldr	r0, [r8, #16]
   114cc:	add	r0, r0, #1
   114d0:	str	r0, [r8, #16]
   114d4:	mov	r0, #8
   114d8:	bl	14ad0 <__assert_fail@plt+0x3b14>
   114dc:	str	r8, [r0]
   114e0:	ldr	r1, [r7, #24]
   114e4:	str	r1, [r0, #4]
   114e8:	str	r0, [r7, #24]
   114ec:	mov	r0, #0
   114f0:	mov	r7, r0
   114f4:	ldr	r0, [r4]
   114f8:	mov	r1, r5
   114fc:	mov	r2, #3
   11500:	mov	r3, r6
   11504:	bl	14150 <__assert_fail@plt+0x3194>
   11508:	cmn	r0, #1
   1150c:	beq	1183c <__assert_fail@plt+0x880>
   11510:	cmp	r0, #0
   11514:	str	r7, [fp, #-16]
   11518:	beq	11ab0 <__assert_fail@plt+0xaf4>
   1151c:	ldr	r5, [sl, #8]
   11520:	ldr	r7, [fp, #-4]
   11524:	cmp	r5, #0
   11528:	beq	11594 <__assert_fail@plt+0x5d8>
   1152c:	cmp	r7, #0
   11530:	str	sl, [sp, #20]
   11534:	ldrne	r1, [r5]
   11538:	cmpne	r1, #0
   1153c:	beq	11a10 <__assert_fail@plt+0xa54>
   11540:	ldr	r6, [sp, #20]
   11544:	mov	sl, r5
   11548:	mov	r0, r7
   1154c:	bl	10d94 <strcmp@plt>
   11550:	cmp	r0, #0
   11554:	beq	115bc <__assert_fail@plt+0x600>
   11558:	mov	r4, r0
   1155c:	mov	r0, #8
   11560:	movwlt	r0, #4
   11564:	ldr	r0, [r5, r0]
   11568:	cmp	r0, #0
   1156c:	beq	11604 <__assert_fail@plt+0x648>
   11570:	ldrb	r1, [r0, #12]
   11574:	cmp	r1, #0
   11578:	ldr	r1, [r0]
   1157c:	movne	r6, r5
   11580:	movne	sl, r0
   11584:	mov	r5, r0
   11588:	cmp	r1, #0
   1158c:	bne	11548 <__assert_fail@plt+0x58c>
   11590:	b	11a10 <__assert_fail@plt+0xa54>
   11594:	mov	r0, #28
   11598:	bl	14ec8 <__assert_fail@plt+0x3f0c>
   1159c:	mov	r8, r0
   115a0:	cmp	r7, #0
   115a4:	beq	115b4 <__assert_fail@plt+0x5f8>
   115a8:	mov	r0, r7
   115ac:	bl	14ff0 <__assert_fail@plt+0x4034>
   115b0:	str	r0, [r8]
   115b4:	str	r8, [sl, #8]
   115b8:	b	115d0 <__assert_fail@plt+0x614>
   115bc:	mov	r8, r5
   115c0:	ldr	sl, [sp, #20]
   115c4:	movw	r4, #24896	; 0x6140
   115c8:	sub	r6, fp, #8
   115cc:	movt	r4, #2
   115d0:	ldr	r7, [fp, #-16]
   115d4:	movw	r5, #22276	; 0x5704
   115d8:	movt	r5, #1
   115dc:	cmp	r7, #0
   115e0:	mov	r0, r8
   115e4:	beq	114f0 <__assert_fail@plt+0x534>
   115e8:	ldr	r1, [r8]
   115ec:	ldr	r0, [r7]
   115f0:	bl	10d94 <strcmp@plt>
   115f4:	cmp	r0, #0
   115f8:	mov	r0, #0
   115fc:	beq	114f0 <__assert_fail@plt+0x534>
   11600:	b	114c8 <__assert_fail@plt+0x50c>
   11604:	mov	r0, #28
   11608:	add	r9, r5, #8
   1160c:	bl	14ec8 <__assert_fail@plt+0x3f0c>
   11610:	mov	r8, r0
   11614:	mov	r0, r7
   11618:	bl	14ff0 <__assert_fail@plt+0x4034>
   1161c:	cmp	r4, #0
   11620:	str	r0, [r8]
   11624:	addlt	r9, r5, #4
   11628:	cmp	sl, #0
   1162c:	str	r8, [r9]
   11630:	ldrne	r1, [sl]
   11634:	cmpne	r1, #0
   11638:	beq	11a58 <__assert_fail@plt+0xa9c>
   1163c:	mov	r0, r7
   11640:	bl	10d94 <strcmp@plt>
   11644:	cmp	r0, #0
   11648:	beq	11a58 <__assert_fail@plt+0xa9c>
   1164c:	mov	r4, r0
   11650:	mov	r0, #1
   11654:	ldr	r9, [fp, #-12]
   11658:	mvnlt	r0, #0
   1165c:	str	r0, [sp, #12]
   11660:	mov	r0, #8
   11664:	movwlt	r0, #4
   11668:	ldr	r0, [sl, r0]
   1166c:	cmp	r0, r8
   11670:	str	r0, [sp, #8]
   11674:	beq	116cc <__assert_fail@plt+0x710>
   11678:	ldr	r5, [sp, #8]
   1167c:	cmp	r5, #0
   11680:	ldrne	r1, [r5]
   11684:	cmpne	r1, #0
   11688:	beq	11a78 <__assert_fail@plt+0xabc>
   1168c:	mov	r0, r7
   11690:	bl	10d94 <strcmp@plt>
   11694:	cmp	r0, #0
   11698:	beq	11a78 <__assert_fail@plt+0xabc>
   1169c:	cmn	r0, #1
   116a0:	bgt	116b4 <__assert_fail@plt+0x6f8>
   116a4:	mov	r0, #255	; 0xff
   116a8:	strb	r0, [r5, #12]
   116ac:	add	r0, r5, #4
   116b0:	b	116c0 <__assert_fail@plt+0x704>
   116b4:	mov	r0, #1
   116b8:	strb	r0, [r5, #12]
   116bc:	add	r0, r5, #8
   116c0:	ldr	r5, [r0]
   116c4:	cmp	r5, r8
   116c8:	bne	1167c <__assert_fail@plt+0x6c0>
   116cc:	mov	r0, sl
   116d0:	ldr	r3, [sp, #12]
   116d4:	ldrsb	r2, [r0, #12]!
   116d8:	uxtb	r1, r2
   116dc:	cmp	r1, #0
   116e0:	cmnne	r2, r3
   116e4:	bne	116f4 <__assert_fail@plt+0x738>
   116e8:	add	r1, r1, r3
   116ec:	strb	r1, [r0]
   116f0:	b	115c0 <__assert_fail@plt+0x604>
   116f4:	ldr	r5, [sp, #8]
   116f8:	ldr	r2, [sp, #12]
   116fc:	add	r3, sl, #8
   11700:	add	lr, sl, #4
   11704:	mov	r1, r5
   11708:	ldrsb	r7, [r1, #12]!
   1170c:	cmp	r2, r7
   11710:	bne	11760 <__assert_fail@plt+0x7a4>
   11714:	cmp	r4, #0
   11718:	add	r1, r5, #4
   1171c:	ldr	r7, [fp, #-16]
   11720:	mov	ip, #0
   11724:	mov	r2, r0
   11728:	addlt	r1, r5, #8
   1172c:	movlt	r3, lr
   11730:	cmp	r4, #0
   11734:	movw	r4, #24896	; 0x6140
   11738:	ldr	r1, [r1]
   1173c:	movt	r4, #2
   11740:	str	r1, [r3]
   11744:	mov	r1, #4
   11748:	movwlt	r1, #8
   1174c:	str	sl, [r5, r1]
   11750:	strb	ip, [r5, #12]
   11754:	movw	r5, #22276	; 0x5704
   11758:	movt	r5, #1
   1175c:	b	11818 <__assert_fail@plt+0x85c>
   11760:	cmn	r4, #1
   11764:	mov	ip, #0
   11768:	bgt	11788 <__assert_fail@plt+0x7cc>
   1176c:	ldr	r3, [r5, #8]
   11770:	ldr	r7, [r3, #4]
   11774:	mov	r2, r3
   11778:	str	r7, [r5, #8]
   1177c:	str	r5, [r3, #4]
   11780:	add	r7, r3, #8
   11784:	b	117a8 <__assert_fail@plt+0x7ec>
   11788:	mov	r7, r5
   1178c:	ldr	r5, [r5, #4]
   11790:	mov	lr, r3
   11794:	ldr	r2, [r5, #8]
   11798:	str	r2, [r7, #4]
   1179c:	str	r7, [r5, #8]
   117a0:	add	r7, r5, #4
   117a4:	mov	r2, r5
   117a8:	ldr	r3, [sp, #12]
   117ac:	str	r2, [sp, #8]
   117b0:	movw	r4, #24896	; 0x6140
   117b4:	movt	r4, #2
   117b8:	rsb	r5, r3, #0
   117bc:	str	r5, [sp, #4]
   117c0:	ldr	r5, [r7]
   117c4:	str	r5, [lr]
   117c8:	str	sl, [r7]
   117cc:	strb	ip, [sl, #12]
   117d0:	strb	ip, [r1]
   117d4:	ldrsb	r7, [r2, #12]!
   117d8:	cmp	r3, r7
   117dc:	bne	117fc <__assert_fail@plt+0x840>
   117e0:	ldr	lr, [sp, #4]
   117e4:	ldr	r7, [fp, #-16]
   117e8:	movw	r5, #22276	; 0x5704
   117ec:	mov	r1, r0
   117f0:	movt	r5, #1
   117f4:	strb	lr, [r1]
   117f8:	b	11818 <__assert_fail@plt+0x85c>
   117fc:	ldr	r0, [sp, #4]
   11800:	ldr	lr, [sp, #12]
   11804:	movw	r5, #22276	; 0x5704
   11808:	movt	r5, #1
   1180c:	cmp	r7, r0
   11810:	ldr	r7, [fp, #-16]
   11814:	strbeq	lr, [r1]
   11818:	strb	ip, [r2]
   1181c:	ldr	r0, [r6, #8]
   11820:	cmp	sl, r0
   11824:	ldr	r0, [sp, #8]
   11828:	ldr	sl, [sp, #20]
   1182c:	streq	r0, [r6, #8]
   11830:	strne	r0, [r6, #4]
   11834:	sub	r6, fp, #8
   11838:	b	115dc <__assert_fail@plt+0x620>
   1183c:	cmp	r7, #0
   11840:	bne	11ad0 <__assert_fail@plt+0xb14>
   11844:	ldr	r5, [sl, #8]
   11848:	cmp	r5, #0
   1184c:	beq	11860 <__assert_fail@plt+0x8a4>
   11850:	movw	r1, #6936	; 0x1b18
   11854:	mov	r0, r5
   11858:	movt	r1, #1
   1185c:	bl	11c9c <__assert_fail@plt+0xce0>
   11860:	movw	r6, #24912	; 0x6150
   11864:	movt	r6, #2
   11868:	ldr	r0, [r6]
   1186c:	cmp	r0, #0
   11870:	beq	11b0c <__assert_fail@plt+0xb50>
   11874:	movw	sl, #24916	; 0x6154
   11878:	movw	r9, #24924	; 0x615c
   1187c:	movw	r7, #7044	; 0x1b84
   11880:	movw	r4, #24920	; 0x6158
   11884:	mov	r0, #1
   11888:	movt	sl, #2
   1188c:	movt	r9, #2
   11890:	movt	r7, #1
   11894:	movt	r4, #2
   11898:	str	r0, [fp, #-16]
   1189c:	cmp	r5, #0
   118a0:	beq	118b4 <__assert_fail@plt+0x8f8>
   118a4:	movw	r1, #6964	; 0x1b34
   118a8:	mov	r0, r5
   118ac:	movt	r1, #1
   118b0:	bl	11c9c <__assert_fail@plt+0xce0>
   118b4:	ldr	r1, [sl]
   118b8:	cmp	r1, #0
   118bc:	beq	11940 <__assert_fail@plt+0x984>
   118c0:	ldr	r0, [r1]
   118c4:	ldr	r8, [r1, #24]
   118c8:	bl	10e84 <puts@plt>
   118cc:	ldr	r1, [sl]
   118d0:	mov	r0, #1
   118d4:	strb	r0, [r1, #13]
   118d8:	ldr	r0, [r6]
   118dc:	sub	r0, r0, #1
   118e0:	str	r0, [r6]
   118e4:	cmp	r8, #0
   118e8:	bne	118fc <__assert_fail@plt+0x940>
   118ec:	b	11924 <__assert_fail@plt+0x968>
   118f0:	ldr	r8, [r8, #4]
   118f4:	cmp	r8, #0
   118f8:	beq	11924 <__assert_fail@plt+0x968>
   118fc:	ldr	r2, [r8]
   11900:	ldr	r3, [r2, #16]
   11904:	subs	r3, r3, #1
   11908:	str	r3, [r2, #16]
   1190c:	bne	118f0 <__assert_fail@plt+0x934>
   11910:	ldr	r3, [r4]
   11914:	str	r2, [r3, #20]
   11918:	ldr	r2, [r8]
   1191c:	str	r2, [r4]
   11920:	b	118f0 <__assert_fail@plt+0x934>
   11924:	ldr	r1, [r1, #20]
   11928:	cmp	r1, #0
   1192c:	str	r1, [sl]
   11930:	bne	118c0 <__assert_fail@plt+0x904>
   11934:	cmp	r0, #0
   11938:	bne	1194c <__assert_fail@plt+0x990>
   1193c:	b	119bc <__assert_fail@plt+0xa00>
   11940:	ldr	r0, [r6]
   11944:	cmp	r0, #0
   11948:	beq	119bc <__assert_fail@plt+0xa00>
   1194c:	movw	r1, #22369	; 0x5761
   11950:	mov	r0, #0
   11954:	mov	r2, #5
   11958:	movt	r1, #1
   1195c:	bl	10df4 <dcgettext@plt>
   11960:	ldr	r2, [fp, #-12]
   11964:	mov	r8, r0
   11968:	mov	r0, #0
   1196c:	mov	r1, #3
   11970:	bl	13d5c <__assert_fail@plt+0x2da0>
   11974:	mov	r3, r0
   11978:	mov	r0, #0
   1197c:	mov	r1, #0
   11980:	mov	r2, r8
   11984:	bl	10e6c <error@plt>
   11988:	cmp	r5, #0
   1198c:	beq	1199c <__assert_fail@plt+0x9e0>
   11990:	mov	r0, r5
   11994:	mov	r1, r7
   11998:	bl	11c9c <__assert_fail@plt+0xce0>
   1199c:	ldr	r0, [r9]
   119a0:	cmp	r0, #0
   119a4:	bne	11988 <__assert_fail@plt+0x9cc>
   119a8:	ldr	r0, [r6]
   119ac:	mov	r1, #0
   119b0:	str	r1, [fp, #-16]
   119b4:	cmp	r0, #0
   119b8:	bne	1189c <__assert_fail@plt+0x8e0>
   119bc:	movw	r0, #24896	; 0x6140
   119c0:	movt	r0, #2
   119c4:	ldr	r0, [r0]
   119c8:	bl	11e78 <__assert_fail@plt+0xebc>
   119cc:	cmp	r0, #0
   119d0:	bne	119e4 <__assert_fail@plt+0xa28>
   119d4:	ldr	r1, [fp, #-16]
   119d8:	mov	r0, #1
   119dc:	bic	r0, r0, r1
   119e0:	bl	10ee4 <exit@plt>
   119e4:	bl	10efc <__errno_location@plt>
   119e8:	ldr	r4, [r0]
   119ec:	ldr	r0, [sp, #16]
   119f0:	cmp	r0, #0
   119f4:	bne	11a30 <__assert_fail@plt+0xa74>
   119f8:	movw	r1, #22396	; 0x577c
   119fc:	mov	r0, #0
   11a00:	mov	r2, #5
   11a04:	movt	r1, #1
   11a08:	bl	10df4 <dcgettext@plt>
   11a0c:	b	11a40 <__assert_fail@plt+0xa84>
   11a10:	movw	r0, #22465	; 0x57c1
   11a14:	movw	r1, #22289	; 0x5711
   11a18:	movw	r3, #22411	; 0x578b
   11a1c:	mov	r2, #140	; 0x8c
   11a20:	movt	r0, #1
   11a24:	movt	r1, #1
   11a28:	movt	r3, #1
   11a2c:	bl	10fbc <__assert_fail@plt>
   11a30:	ldr	r2, [fp, #-12]
   11a34:	mov	r0, #0
   11a38:	mov	r1, #3
   11a3c:	bl	13d5c <__assert_fail@plt+0x2da0>
   11a40:	movw	r2, #22663	; 0x5887
   11a44:	mov	r3, r0
   11a48:	mov	r0, #1
   11a4c:	mov	r1, r4
   11a50:	movt	r2, #1
   11a54:	bl	10e6c <error@plt>
   11a58:	movw	r0, #22484	; 0x57d4
   11a5c:	movw	r1, #22289	; 0x5711
   11a60:	movw	r3, #22411	; 0x578b
   11a64:	mov	r2, #163	; 0xa3
   11a68:	movt	r0, #1
   11a6c:	movt	r1, #1
   11a70:	movt	r3, #1
   11a74:	bl	10fbc <__assert_fail@plt>
   11a78:	movw	r0, #22527	; 0x57ff
   11a7c:	movw	r1, #22289	; 0x5711
   11a80:	movw	r3, #22411	; 0x578b
   11a84:	mov	r2, #177	; 0xb1
   11a88:	movt	r0, #1
   11a8c:	movt	r1, #1
   11a90:	movt	r3, #1
   11a94:	bl	10fbc <__assert_fail@plt>
   11a98:	bl	10efc <__errno_location@plt>
   11a9c:	ldr	r4, [r0]
   11aa0:	mov	r0, #0
   11aa4:	mov	r1, #3
   11aa8:	mov	r2, r9
   11aac:	b	11a3c <__assert_fail@plt+0xa80>
   11ab0:	movw	r0, #22280	; 0x5708
   11ab4:	movw	r1, #22289	; 0x5711
   11ab8:	movw	r3, #22301	; 0x571d
   11abc:	movw	r2, #458	; 0x1ca
   11ac0:	movt	r0, #1
   11ac4:	movt	r1, #1
   11ac8:	movt	r3, #1
   11acc:	bl	10fbc <__assert_fail@plt>
   11ad0:	movw	r1, #22326	; 0x5736
   11ad4:	mov	r0, #0
   11ad8:	mov	r2, #5
   11adc:	movt	r1, #1
   11ae0:	bl	10df4 <dcgettext@plt>
   11ae4:	mov	r4, r0
   11ae8:	mov	r0, #0
   11aec:	mov	r1, #3
   11af0:	mov	r2, r9
   11af4:	bl	13d5c <__assert_fail@plt+0x2da0>
   11af8:	mov	r3, r0
   11afc:	mov	r0, #1
   11b00:	mov	r1, #0
   11b04:	mov	r2, r4
   11b08:	bl	10e6c <error@plt>
   11b0c:	mov	r0, #1
   11b10:	str	r0, [fp, #-16]
   11b14:	b	119bc <__assert_fail@plt+0xa00>
   11b18:	movw	r0, #24912	; 0x6150
   11b1c:	movt	r0, #2
   11b20:	ldr	r1, [r0]
   11b24:	add	r1, r1, #1
   11b28:	str	r1, [r0]
   11b2c:	mov	r0, #0
   11b30:	bx	lr
   11b34:	ldr	r1, [r0, #16]
   11b38:	cmp	r1, #0
   11b3c:	bne	11b4c <__assert_fail@plt+0xb90>
   11b40:	ldrb	r1, [r0, #13]
   11b44:	cmp	r1, #0
   11b48:	beq	11b54 <__assert_fail@plt+0xb98>
   11b4c:	mov	r0, #0
   11b50:	bx	lr
   11b54:	movw	r1, #24916	; 0x6154
   11b58:	movw	ip, #24920	; 0x6158
   11b5c:	movt	r1, #2
   11b60:	movt	ip, #2
   11b64:	ldr	r2, [r1]
   11b68:	ldr	r3, [ip]
   11b6c:	cmp	r2, #0
   11b70:	addne	r1, r3, #20
   11b74:	str	r0, [r1]
   11b78:	str	r0, [ip]
   11b7c:	mov	r0, #0
   11b80:	bx	lr
   11b84:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   11b88:	add	fp, sp, #24
   11b8c:	ldr	r1, [r0, #16]
   11b90:	mov	r4, r0
   11b94:	mov	r0, #0
   11b98:	cmp	r1, #0
   11b9c:	beq	11c98 <__assert_fail@plt+0xcdc>
   11ba0:	movw	r6, #24924	; 0x615c
   11ba4:	movt	r6, #2
   11ba8:	ldr	r7, [r6]
   11bac:	cmp	r7, #0
   11bb0:	beq	11c48 <__assert_fail@plt+0xc8c>
   11bb4:	mov	r8, r4
   11bb8:	ldr	r1, [r8, #24]!
   11bbc:	cmp	r1, #0
   11bc0:	beq	11c98 <__assert_fail@plt+0xcdc>
   11bc4:	ldr	r2, [r1]
   11bc8:	cmp	r2, r7
   11bcc:	beq	11bf0 <__assert_fail@plt+0xc34>
   11bd0:	mov	r2, r1
   11bd4:	ldr	r1, [r1, #4]
   11bd8:	cmp	r1, #0
   11bdc:	beq	11c98 <__assert_fail@plt+0xcdc>
   11be0:	ldr	r3, [r1]
   11be4:	cmp	r3, r7
   11be8:	bne	11bd0 <__assert_fail@plt+0xc14>
   11bec:	add	r8, r2, #4
   11bf0:	ldr	r1, [r4, #20]
   11bf4:	cmp	r1, #0
   11bf8:	beq	11c44 <__assert_fail@plt+0xc88>
   11bfc:	movw	r5, #22663	; 0x5887
   11c00:	mov	r9, #0
   11c04:	movt	r5, #1
   11c08:	ldr	r3, [r7]
   11c0c:	ldr	r7, [r7, #20]
   11c10:	mov	r0, #0
   11c14:	mov	r1, #0
   11c18:	mov	r2, r5
   11c1c:	bl	10e6c <error@plt>
   11c20:	ldr	r0, [r6]
   11c24:	cmp	r0, r4
   11c28:	beq	11c50 <__assert_fail@plt+0xc94>
   11c2c:	cmp	r7, #0
   11c30:	str	r9, [r0, #20]
   11c34:	str	r7, [r6]
   11c38:	bne	11c08 <__assert_fail@plt+0xc4c>
   11c3c:	mov	r4, r7
   11c40:	b	11c6c <__assert_fail@plt+0xcb0>
   11c44:	str	r7, [r4, #20]
   11c48:	str	r4, [r6]
   11c4c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   11c50:	ldr	r0, [r8]
   11c54:	ldr	r1, [r0]
   11c58:	ldr	r2, [r1, #16]
   11c5c:	sub	r2, r2, #1
   11c60:	str	r2, [r1, #16]
   11c64:	ldr	r0, [r0, #4]
   11c68:	str	r0, [r8]
   11c6c:	mov	r0, #1
   11c70:	cmp	r4, #0
   11c74:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   11c78:	mov	r1, #0
   11c7c:	ldr	r2, [r4, #20]
   11c80:	str	r1, [r4, #20]
   11c84:	cmp	r2, #0
   11c88:	mov	r4, r2
   11c8c:	bne	11c7c <__assert_fail@plt+0xcc0>
   11c90:	mov	r1, #0
   11c94:	str	r1, [r6]
   11c98:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   11c9c:	push	{r4, r5, r6, sl, fp, lr}
   11ca0:	add	fp, sp, #16
   11ca4:	mov	r4, r0
   11ca8:	ldr	r0, [r0, #4]
   11cac:	cmp	r0, #0
   11cb0:	beq	11cd0 <__assert_fail@plt+0xd14>
   11cb4:	mov	r5, r1
   11cb8:	bl	11c9c <__assert_fail@plt+0xce0>
   11cbc:	mov	r1, r5
   11cc0:	mov	r5, #1
   11cc4:	cmp	r0, #0
   11cc8:	beq	11cdc <__assert_fail@plt+0xd20>
   11ccc:	b	11d10 <__assert_fail@plt+0xd54>
   11cd0:	ldr	r0, [r4, #8]
   11cd4:	cmp	r0, #0
   11cd8:	beq	11d18 <__assert_fail@plt+0xd5c>
   11cdc:	mov	r0, r4
   11ce0:	mov	r6, r1
   11ce4:	blx	r1
   11ce8:	mov	r5, #1
   11cec:	cmp	r0, #0
   11cf0:	bne	11d10 <__assert_fail@plt+0xd54>
   11cf4:	ldr	r0, [r4, #8]
   11cf8:	cmp	r0, #0
   11cfc:	beq	11d24 <__assert_fail@plt+0xd68>
   11d00:	mov	r1, r6
   11d04:	bl	11c9c <__assert_fail@plt+0xce0>
   11d08:	cmp	r0, #0
   11d0c:	moveq	r5, #0
   11d10:	mov	r0, r5
   11d14:	pop	{r4, r5, r6, sl, fp, pc}
   11d18:	mov	r0, r4
   11d1c:	pop	{r4, r5, r6, sl, fp, lr}
   11d20:	bx	r1
   11d24:	mov	r5, #0
   11d28:	mov	r0, r5
   11d2c:	pop	{r4, r5, r6, sl, fp, pc}
   11d30:	movw	r1, #24928	; 0x6160
   11d34:	movt	r1, #2
   11d38:	str	r0, [r1]
   11d3c:	bx	lr
   11d40:	movw	r1, #24932	; 0x6164
   11d44:	movt	r1, #2
   11d48:	strb	r0, [r1]
   11d4c:	bx	lr
   11d50:	push	{r4, r5, r6, sl, fp, lr}
   11d54:	add	fp, sp, #16
   11d58:	sub	sp, sp, #8
   11d5c:	movw	r0, #24900	; 0x6144
   11d60:	movt	r0, #2
   11d64:	ldr	r0, [r0]
   11d68:	bl	1514c <__assert_fail@plt+0x4190>
   11d6c:	cmp	r0, #0
   11d70:	beq	11d98 <__assert_fail@plt+0xddc>
   11d74:	movw	r0, #24932	; 0x6164
   11d78:	movt	r0, #2
   11d7c:	ldrb	r0, [r0]
   11d80:	cmp	r0, #0
   11d84:	beq	11db8 <__assert_fail@plt+0xdfc>
   11d88:	bl	10efc <__errno_location@plt>
   11d8c:	ldr	r0, [r0]
   11d90:	cmp	r0, #32
   11d94:	bne	11db8 <__assert_fail@plt+0xdfc>
   11d98:	movw	r0, #24888	; 0x6138
   11d9c:	movt	r0, #2
   11da0:	ldr	r0, [r0]
   11da4:	bl	1514c <__assert_fail@plt+0x4190>
   11da8:	cmp	r0, #0
   11dac:	subeq	sp, fp, #16
   11db0:	popeq	{r4, r5, r6, sl, fp, pc}
   11db4:	b	11e28 <__assert_fail@plt+0xe6c>
   11db8:	movw	r1, #22647	; 0x5877
   11dbc:	mov	r0, #0
   11dc0:	mov	r2, #5
   11dc4:	movt	r1, #1
   11dc8:	bl	10df4 <dcgettext@plt>
   11dcc:	mov	r4, r0
   11dd0:	movw	r0, #24928	; 0x6160
   11dd4:	movt	r0, #2
   11dd8:	ldr	r6, [r0]
   11ddc:	bl	10efc <__errno_location@plt>
   11de0:	ldr	r5, [r0]
   11de4:	cmp	r6, #0
   11de8:	bne	11e04 <__assert_fail@plt+0xe48>
   11dec:	movw	r2, #22663	; 0x5887
   11df0:	mov	r0, #0
   11df4:	mov	r1, r5
   11df8:	mov	r3, r4
   11dfc:	movt	r2, #1
   11e00:	b	11e24 <__assert_fail@plt+0xe68>
   11e04:	mov	r0, r6
   11e08:	bl	13c80 <__assert_fail@plt+0x2cc4>
   11e0c:	movw	r2, #22659	; 0x5883
   11e10:	mov	r3, r0
   11e14:	str	r4, [sp]
   11e18:	mov	r0, #0
   11e1c:	mov	r1, r5
   11e20:	movt	r2, #1
   11e24:	bl	10e6c <error@plt>
   11e28:	movw	r0, #24804	; 0x60e4
   11e2c:	movt	r0, #2
   11e30:	ldr	r0, [r0]
   11e34:	bl	10dc4 <_exit@plt>
   11e38:	b	10da0 <posix_fadvise64@plt>
   11e3c:	cmp	r0, #0
   11e40:	bxeq	lr
   11e44:	push	{r4, sl, fp, lr}
   11e48:	add	fp, sp, #8
   11e4c:	sub	sp, sp, #16
   11e50:	mov	r4, r1
   11e54:	bl	10f2c <fileno@plt>
   11e58:	mov	r1, #0
   11e5c:	mov	r2, #0
   11e60:	mov	r3, #0
   11e64:	str	r1, [sp]
   11e68:	stmib	sp, {r1, r4}
   11e6c:	bl	10da0 <posix_fadvise64@plt>
   11e70:	sub	sp, fp, #8
   11e74:	pop	{r4, sl, fp, pc}
   11e78:	push	{r4, r5, r6, sl, fp, lr}
   11e7c:	add	fp, sp, #16
   11e80:	sub	sp, sp, #8
   11e84:	mov	r4, r0
   11e88:	bl	10f2c <fileno@plt>
   11e8c:	cmn	r0, #1
   11e90:	ble	11f04 <__assert_fail@plt+0xf48>
   11e94:	mov	r0, r4
   11e98:	bl	10ea8 <__freading@plt>
   11e9c:	cmp	r0, #0
   11ea0:	beq	11ecc <__assert_fail@plt+0xf10>
   11ea4:	mov	r0, r4
   11ea8:	bl	10f2c <fileno@plt>
   11eac:	mov	r1, #1
   11eb0:	mov	r2, #0
   11eb4:	mov	r3, #0
   11eb8:	str	r1, [sp]
   11ebc:	bl	10e3c <lseek64@plt>
   11ec0:	and	r0, r0, r1
   11ec4:	cmn	r0, #1
   11ec8:	beq	11f04 <__assert_fail@plt+0xf48>
   11ecc:	mov	r0, r4
   11ed0:	bl	11f14 <__assert_fail@plt+0xf58>
   11ed4:	cmp	r0, #0
   11ed8:	beq	11f04 <__assert_fail@plt+0xf48>
   11edc:	bl	10efc <__errno_location@plt>
   11ee0:	ldr	r6, [r0]
   11ee4:	mov	r5, r0
   11ee8:	mov	r0, r4
   11eec:	bl	10f44 <fclose@plt>
   11ef0:	cmp	r6, #0
   11ef4:	strne	r6, [r5]
   11ef8:	mvnne	r0, #0
   11efc:	sub	sp, fp, #16
   11f00:	pop	{r4, r5, r6, sl, fp, pc}
   11f04:	mov	r0, r4
   11f08:	sub	sp, fp, #16
   11f0c:	pop	{r4, r5, r6, sl, fp, lr}
   11f10:	b	10f44 <fclose@plt>
   11f14:	push	{r4, sl, fp, lr}
   11f18:	add	fp, sp, #8
   11f1c:	sub	sp, sp, #8
   11f20:	mov	r4, r0
   11f24:	cmp	r0, #0
   11f28:	beq	11f44 <__assert_fail@plt+0xf88>
   11f2c:	mov	r0, r4
   11f30:	bl	10ea8 <__freading@plt>
   11f34:	cmp	r0, #0
   11f38:	ldrbne	r0, [r4, #1]
   11f3c:	tstne	r0, #1
   11f40:	bne	11f54 <__assert_fail@plt+0xf98>
   11f44:	mov	r0, r4
   11f48:	sub	sp, fp, #8
   11f4c:	pop	{r4, sl, fp, lr}
   11f50:	b	10dac <fflush@plt>
   11f54:	mov	r0, #1
   11f58:	mov	r2, #0
   11f5c:	mov	r3, #0
   11f60:	str	r0, [sp]
   11f64:	mov	r0, r4
   11f68:	bl	121b8 <__assert_fail@plt+0x11fc>
   11f6c:	b	11f44 <__assert_fail@plt+0xf88>
   11f70:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11f74:	add	fp, sp, #28
   11f78:	sub	sp, sp, #4
   11f7c:	mov	r5, r0
   11f80:	mov	r0, r2
   11f84:	mov	r4, r2
   11f88:	mov	r9, r1
   11f8c:	bl	10f2c <fileno@plt>
   11f90:	mov	r7, #0
   11f94:	cmp	r0, #0
   11f98:	beq	11fd8 <__assert_fail@plt+0x101c>
   11f9c:	cmp	r0, #1
   11fa0:	beq	11fe4 <__assert_fail@plt+0x1028>
   11fa4:	cmp	r0, #2
   11fa8:	beq	11fc0 <__assert_fail@plt+0x1004>
   11fac:	mov	r0, #2
   11fb0:	mov	r1, #2
   11fb4:	bl	10e00 <dup2@plt>
   11fb8:	subs	r7, r0, #2
   11fbc:	movwne	r7, #1
   11fc0:	mov	r0, #1
   11fc4:	mov	r1, #1
   11fc8:	bl	10e00 <dup2@plt>
   11fcc:	subs	r6, r0, #1
   11fd0:	movwne	r6, #1
   11fd4:	b	11fe8 <__assert_fail@plt+0x102c>
   11fd8:	mov	r6, #0
   11fdc:	mov	r8, #0
   11fe0:	b	120b0 <__assert_fail@plt+0x10f4>
   11fe4:	mov	r6, #0
   11fe8:	mov	r0, #0
   11fec:	mov	r1, #0
   11ff0:	mov	sl, #0
   11ff4:	bl	10e00 <dup2@plt>
   11ff8:	cmp	r0, #0
   11ffc:	mov	r8, #0
   12000:	beq	12040 <__assert_fail@plt+0x1084>
   12004:	movw	r0, #22666	; 0x588a
   12008:	mov	r1, #0
   1200c:	movt	r0, #1
   12010:	bl	10e78 <open64@plt>
   12014:	cmp	r0, #0
   12018:	beq	1203c <__assert_fail@plt+0x1080>
   1201c:	cmn	r0, #1
   12020:	ble	1213c <__assert_fail@plt+0x1180>
   12024:	bl	10fb0 <close@plt>
   12028:	bl	10efc <__errno_location@plt>
   1202c:	mov	r4, r0
   12030:	mov	r0, #9
   12034:	str	r0, [r4]
   12038:	b	12144 <__assert_fail@plt+0x1188>
   1203c:	mov	r8, #1
   12040:	cmp	r6, #0
   12044:	beq	12064 <__assert_fail@plt+0x10a8>
   12048:	movw	r0, #22666	; 0x588a
   1204c:	mov	r1, #0
   12050:	movt	r0, #1
   12054:	bl	10e78 <open64@plt>
   12058:	mov	sl, #1
   1205c:	cmp	r0, #1
   12060:	bne	1211c <__assert_fail@plt+0x1160>
   12064:	cmp	r7, #0
   12068:	beq	120a8 <__assert_fail@plt+0x10ec>
   1206c:	movw	r0, #22666	; 0x588a
   12070:	mov	r1, #0
   12074:	movt	r0, #1
   12078:	bl	10e78 <open64@plt>
   1207c:	mov	r7, #1
   12080:	cmp	r0, #2
   12084:	beq	120ac <__assert_fail@plt+0x10f0>
   12088:	cmn	r0, #1
   1208c:	ble	12194 <__assert_fail@plt+0x11d8>
   12090:	bl	10fb0 <close@plt>
   12094:	bl	10efc <__errno_location@plt>
   12098:	mov	r4, r0
   1209c:	mov	r0, #9
   120a0:	str	r0, [r4]
   120a4:	b	1219c <__assert_fail@plt+0x11e0>
   120a8:	mov	r7, #0
   120ac:	mov	r6, sl
   120b0:	mov	r0, r5
   120b4:	mov	r1, r9
   120b8:	mov	r2, r4
   120bc:	bl	10ec0 <freopen64@plt>
   120c0:	mov	r5, r0
   120c4:	bl	10efc <__errno_location@plt>
   120c8:	ldr	r9, [r0]
   120cc:	mov	r4, r0
   120d0:	cmp	r7, #0
   120d4:	beq	120e0 <__assert_fail@plt+0x1124>
   120d8:	mov	r0, #2
   120dc:	bl	10fb0 <close@plt>
   120e0:	cmp	r6, #0
   120e4:	beq	120f0 <__assert_fail@plt+0x1134>
   120e8:	mov	r0, #1
   120ec:	bl	10fb0 <close@plt>
   120f0:	cmp	r8, #0
   120f4:	beq	12100 <__assert_fail@plt+0x1144>
   120f8:	mov	r0, #0
   120fc:	bl	10fb0 <close@plt>
   12100:	cmp	r5, #0
   12104:	bne	12110 <__assert_fail@plt+0x1154>
   12108:	mov	r5, #0
   1210c:	str	r9, [r4]
   12110:	mov	r0, r5
   12114:	sub	sp, fp, #28
   12118:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1211c:	cmn	r0, #1
   12120:	ble	1215c <__assert_fail@plt+0x11a0>
   12124:	bl	10fb0 <close@plt>
   12128:	bl	10efc <__errno_location@plt>
   1212c:	mov	r4, r0
   12130:	mov	r0, #9
   12134:	str	r0, [r4]
   12138:	b	12164 <__assert_fail@plt+0x11a8>
   1213c:	bl	10efc <__errno_location@plt>
   12140:	mov	r4, r0
   12144:	ldr	r9, [r4]
   12148:	mov	r8, #1
   1214c:	mov	r5, #0
   12150:	cmp	r7, #0
   12154:	bne	120d8 <__assert_fail@plt+0x111c>
   12158:	b	120e0 <__assert_fail@plt+0x1124>
   1215c:	bl	10efc <__errno_location@plt>
   12160:	mov	r4, r0
   12164:	ldr	r9, [r4]
   12168:	mov	r5, #0
   1216c:	cmp	r7, #0
   12170:	beq	120e8 <__assert_fail@plt+0x112c>
   12174:	mov	r0, #2
   12178:	bl	10fb0 <close@plt>
   1217c:	mov	r0, #1
   12180:	bl	10fb0 <close@plt>
   12184:	mov	r5, #0
   12188:	cmp	r8, #0
   1218c:	bne	120f8 <__assert_fail@plt+0x113c>
   12190:	b	12108 <__assert_fail@plt+0x114c>
   12194:	bl	10efc <__errno_location@plt>
   12198:	mov	r4, r0
   1219c:	ldr	r9, [r4]
   121a0:	mov	r0, #2
   121a4:	bl	10fb0 <close@plt>
   121a8:	mov	r5, #0
   121ac:	cmp	sl, #0
   121b0:	bne	120e8 <__assert_fail@plt+0x112c>
   121b4:	b	120f0 <__assert_fail@plt+0x1134>
   121b8:	push	{r4, r5, r6, r7, fp, lr}
   121bc:	add	fp, sp, #16
   121c0:	sub	sp, sp, #8
   121c4:	mov	r4, r0
   121c8:	ldr	r0, [r0, #4]
   121cc:	mov	r5, r3
   121d0:	mov	r6, r2
   121d4:	ldr	r1, [r4, #8]
   121d8:	cmp	r1, r0
   121dc:	bne	121f8 <__assert_fail@plt+0x123c>
   121e0:	ldrd	r0, [r4, #16]
   121e4:	cmp	r1, r0
   121e8:	bne	121f8 <__assert_fail@plt+0x123c>
   121ec:	ldr	r0, [r4, #36]	; 0x24
   121f0:	cmp	r0, #0
   121f4:	beq	12210 <__assert_fail@plt+0x1254>
   121f8:	mov	r0, r4
   121fc:	mov	r2, r6
   12200:	mov	r3, r5
   12204:	sub	sp, fp, #16
   12208:	pop	{r4, r5, r6, r7, fp, lr}
   1220c:	b	10f50 <fseeko64@plt>
   12210:	ldr	r7, [fp, #8]
   12214:	mov	r0, r4
   12218:	bl	10f2c <fileno@plt>
   1221c:	mov	r2, r6
   12220:	mov	r3, r5
   12224:	str	r7, [sp]
   12228:	bl	10e3c <lseek64@plt>
   1222c:	and	r2, r0, r1
   12230:	cmn	r2, #1
   12234:	mvneq	r0, #0
   12238:	subeq	sp, fp, #16
   1223c:	popeq	{r4, r5, r6, r7, fp, pc}
   12240:	strd	r0, [r4, #80]	; 0x50
   12244:	ldr	r0, [r4]
   12248:	bic	r0, r0, #16
   1224c:	str	r0, [r4]
   12250:	mov	r0, #0
   12254:	sub	sp, fp, #16
   12258:	pop	{r4, r5, r6, r7, fp, pc}
   1225c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12260:	add	fp, sp, #24
   12264:	sub	sp, sp, #8
   12268:	movw	r6, #24904	; 0x6148
   1226c:	mov	r4, #0
   12270:	cmp	r0, #2
   12274:	movt	r6, #2
   12278:	ldr	r7, [r6]
   1227c:	str	r4, [r6]
   12280:	bne	122f4 <__assert_fail@plt+0x1338>
   12284:	mov	r8, r3
   12288:	movw	r3, #22692	; 0x58a4
   1228c:	mov	r5, r2
   12290:	movw	r2, #22676	; 0x5894
   12294:	mov	r0, #2
   12298:	str	r4, [sp]
   1229c:	movt	r2, #1
   122a0:	movt	r3, #1
   122a4:	bl	10ecc <getopt_long@plt>
   122a8:	cmp	r0, #104	; 0x68
   122ac:	beq	122e8 <__assert_fail@plt+0x132c>
   122b0:	cmp	r0, #118	; 0x76
   122b4:	bne	122f4 <__assert_fail@plt+0x1338>
   122b8:	movw	r0, #24900	; 0x6144
   122bc:	ldr	r3, [fp, #8]
   122c0:	add	r1, fp, #16
   122c4:	mov	r2, r8
   122c8:	movt	r0, #2
   122cc:	str	r1, [sp, #4]
   122d0:	str	r1, [sp]
   122d4:	mov	r1, r5
   122d8:	ldr	r0, [r0]
   122dc:	bl	14788 <__assert_fail@plt+0x37cc>
   122e0:	mov	r0, #0
   122e4:	bl	10ee4 <exit@plt>
   122e8:	ldr	r1, [fp, #12]
   122ec:	mov	r0, #0
   122f0:	blx	r1
   122f4:	movw	r0, #24880	; 0x6130
   122f8:	str	r7, [r6]
   122fc:	movt	r0, #2
   12300:	str	r4, [r0]
   12304:	sub	sp, fp, #24
   12308:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1230c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12310:	add	fp, sp, #24
   12314:	sub	sp, sp, #8
   12318:	movw	r6, #24904	; 0x6148
   1231c:	mov	r8, r3
   12320:	ldr	r3, [fp, #12]
   12324:	mov	r5, r2
   12328:	mov	r2, #1
   1232c:	movw	r4, #22279	; 0x5707
   12330:	movt	r6, #2
   12334:	movt	r4, #1
   12338:	ldr	r7, [r6]
   1233c:	str	r2, [r6]
   12340:	mov	r2, #0
   12344:	str	r2, [sp]
   12348:	movw	r2, #22676	; 0x5894
   1234c:	cmp	r3, #0
   12350:	movt	r2, #1
   12354:	movw	r3, #22692	; 0x58a4
   12358:	movne	r2, r4
   1235c:	movt	r3, #1
   12360:	bl	10ecc <getopt_long@plt>
   12364:	cmn	r0, #1
   12368:	beq	12398 <__assert_fail@plt+0x13dc>
   1236c:	ldr	r1, [fp, #16]
   12370:	cmp	r0, #104	; 0x68
   12374:	beq	12390 <__assert_fail@plt+0x13d4>
   12378:	cmp	r0, #118	; 0x76
   1237c:	beq	123a4 <__assert_fail@plt+0x13e8>
   12380:	movw	r0, #24804	; 0x60e4
   12384:	movt	r0, #2
   12388:	ldr	r0, [r0]
   1238c:	b	12394 <__assert_fail@plt+0x13d8>
   12390:	mov	r0, #0
   12394:	blx	r1
   12398:	str	r7, [r6]
   1239c:	sub	sp, fp, #24
   123a0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   123a4:	movw	r0, #24900	; 0x6144
   123a8:	ldr	r3, [fp, #8]
   123ac:	add	r1, fp, #20
   123b0:	mov	r2, r8
   123b4:	movt	r0, #2
   123b8:	str	r1, [sp, #4]
   123bc:	str	r1, [sp]
   123c0:	mov	r1, r5
   123c4:	ldr	r0, [r0]
   123c8:	bl	14788 <__assert_fail@plt+0x37cc>
   123cc:	mov	r0, #0
   123d0:	bl	10ee4 <exit@plt>
   123d4:	push	{r4, r5, fp, lr}
   123d8:	add	fp, sp, #8
   123dc:	cmp	r0, #0
   123e0:	beq	12474 <__assert_fail@plt+0x14b8>
   123e4:	mov	r1, #47	; 0x2f
   123e8:	mov	r4, r0
   123ec:	bl	10f74 <strrchr@plt>
   123f0:	cmp	r0, #0
   123f4:	mov	r5, r4
   123f8:	addne	r5, r0, #1
   123fc:	sub	r0, r5, r4
   12400:	cmp	r0, #7
   12404:	blt	12458 <__assert_fail@plt+0x149c>
   12408:	movw	r1, #22796	; 0x590c
   1240c:	sub	r0, r5, #7
   12410:	mov	r2, #7
   12414:	movt	r1, #1
   12418:	bl	10f98 <strncmp@plt>
   1241c:	cmp	r0, #0
   12420:	bne	12458 <__assert_fail@plt+0x149c>
   12424:	movw	r1, #22804	; 0x5914
   12428:	mov	r0, r5
   1242c:	mov	r2, #3
   12430:	movt	r1, #1
   12434:	bl	10f98 <strncmp@plt>
   12438:	cmp	r0, #0
   1243c:	beq	12448 <__assert_fail@plt+0x148c>
   12440:	mov	r4, r5
   12444:	b	12458 <__assert_fail@plt+0x149c>
   12448:	movw	r0, #24872	; 0x6128
   1244c:	add	r4, r5, #3
   12450:	movt	r0, #2
   12454:	str	r4, [r0]
   12458:	movw	r0, #24876	; 0x612c
   1245c:	movt	r0, #2
   12460:	str	r4, [r0]
   12464:	movw	r0, #24936	; 0x6168
   12468:	movt	r0, #2
   1246c:	str	r4, [r0]
   12470:	pop	{r4, r5, fp, pc}
   12474:	movw	r0, #24888	; 0x6138
   12478:	mov	r1, #55	; 0x37
   1247c:	mov	r2, #1
   12480:	movt	r0, #2
   12484:	ldr	r3, [r0]
   12488:	movw	r0, #22740	; 0x58d4
   1248c:	movt	r0, #1
   12490:	bl	10e30 <fwrite@plt>
   12494:	bl	10fa4 <abort@plt>
   12498:	push	{r4, r5, r6, sl, fp, lr}
   1249c:	add	fp, sp, #16
   124a0:	mov	r4, r0
   124a4:	movw	r0, #24944	; 0x6170
   124a8:	movt	r0, #2
   124ac:	cmp	r4, #0
   124b0:	moveq	r4, r0
   124b4:	bl	10efc <__errno_location@plt>
   124b8:	ldr	r6, [r0]
   124bc:	mov	r5, r0
   124c0:	mov	r0, r4
   124c4:	mov	r1, #48	; 0x30
   124c8:	bl	14f30 <__assert_fail@plt+0x3f74>
   124cc:	str	r6, [r5]
   124d0:	pop	{r4, r5, r6, sl, fp, pc}
   124d4:	movw	r1, #24944	; 0x6170
   124d8:	cmp	r0, #0
   124dc:	movt	r1, #2
   124e0:	movne	r1, r0
   124e4:	ldr	r0, [r1]
   124e8:	bx	lr
   124ec:	movw	r2, #24944	; 0x6170
   124f0:	cmp	r0, #0
   124f4:	movt	r2, #2
   124f8:	movne	r2, r0
   124fc:	str	r1, [r2]
   12500:	bx	lr
   12504:	movw	r3, #24944	; 0x6170
   12508:	cmp	r0, #0
   1250c:	movt	r3, #2
   12510:	movne	r3, r0
   12514:	ubfx	r0, r1, #5, #3
   12518:	and	r1, r1, #31
   1251c:	add	r0, r3, r0, lsl #2
   12520:	ldr	r3, [r0, #8]
   12524:	eor	r2, r2, r3, lsr r1
   12528:	and	r2, r2, #1
   1252c:	eor	r2, r3, r2, lsl r1
   12530:	str	r2, [r0, #8]
   12534:	mov	r0, #1
   12538:	and	r0, r0, r3, lsr r1
   1253c:	bx	lr
   12540:	movw	r2, #24944	; 0x6170
   12544:	cmp	r0, #0
   12548:	movt	r2, #2
   1254c:	movne	r2, r0
   12550:	ldr	r0, [r2, #4]
   12554:	str	r1, [r2, #4]
   12558:	bx	lr
   1255c:	movw	r3, #24944	; 0x6170
   12560:	cmp	r0, #0
   12564:	movt	r3, #2
   12568:	movne	r3, r0
   1256c:	cmp	r1, #0
   12570:	mov	r0, #10
   12574:	cmpne	r2, #0
   12578:	str	r0, [r3]
   1257c:	bne	1258c <__assert_fail@plt+0x15d0>
   12580:	push	{fp, lr}
   12584:	mov	fp, sp
   12588:	bl	10fa4 <abort@plt>
   1258c:	str	r1, [r3, #40]	; 0x28
   12590:	str	r2, [r3, #44]	; 0x2c
   12594:	bx	lr
   12598:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1259c:	add	fp, sp, #28
   125a0:	sub	sp, sp, #20
   125a4:	mov	r7, r0
   125a8:	ldr	r0, [fp, #8]
   125ac:	movw	r5, #24944	; 0x6170
   125b0:	mov	r8, r3
   125b4:	mov	r9, r2
   125b8:	mov	sl, r1
   125bc:	movt	r5, #2
   125c0:	cmp	r0, #0
   125c4:	movne	r5, r0
   125c8:	bl	10efc <__errno_location@plt>
   125cc:	mov	r4, r0
   125d0:	ldm	r5, {r0, r1}
   125d4:	ldr	r2, [r5, #40]	; 0x28
   125d8:	ldr	r3, [r5, #44]	; 0x2c
   125dc:	add	r5, r5, #8
   125e0:	ldr	r6, [r4]
   125e4:	stm	sp, {r0, r1, r5}
   125e8:	str	r2, [sp, #12]
   125ec:	str	r3, [sp, #16]
   125f0:	mov	r0, r7
   125f4:	mov	r1, sl
   125f8:	mov	r2, r9
   125fc:	mov	r3, r8
   12600:	bl	12610 <__assert_fail@plt+0x1654>
   12604:	str	r6, [r4]
   12608:	sub	sp, fp, #28
   1260c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12610:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12614:	add	fp, sp, #28
   12618:	sub	sp, sp, #156	; 0x9c
   1261c:	str	r0, [sp, #80]	; 0x50
   12620:	ldr	r0, [fp, #12]
   12624:	mov	r6, r1
   12628:	mov	r9, r3
   1262c:	str	r2, [fp, #-84]	; 0xffffffac
   12630:	and	r1, r0, #4
   12634:	str	r1, [sp, #32]
   12638:	and	r1, r0, #1
   1263c:	str	r1, [sp, #36]	; 0x24
   12640:	ubfx	r4, r0, #1, #1
   12644:	bl	10e48 <__ctype_get_mb_cur_max@plt>
   12648:	str	r0, [sp, #40]	; 0x28
   1264c:	ldr	r0, [fp, #24]
   12650:	ldr	r7, [fp, #8]
   12654:	mov	r1, #0
   12658:	mov	r5, #1
   1265c:	str	r1, [fp, #-56]	; 0xffffffc8
   12660:	mov	r1, #0
   12664:	str	r1, [sp, #60]	; 0x3c
   12668:	str	r0, [sp, #76]	; 0x4c
   1266c:	ldr	r0, [fp, #20]
   12670:	str	r0, [sp, #72]	; 0x48
   12674:	mov	r0, #0
   12678:	str	r0, [sp, #56]	; 0x38
   1267c:	mov	r0, #0
   12680:	str	r0, [sp, #92]	; 0x5c
   12684:	mov	r0, #0
   12688:	str	r0, [fp, #-76]	; 0xffffffb4
   1268c:	mov	r0, #0
   12690:	cmp	r7, #10
   12694:	bhi	13614 <__assert_fail@plt+0x2658>
   12698:	add	r1, pc, #28
   1269c:	mov	sl, r6
   126a0:	ldr	r6, [sp, #80]	; 0x50
   126a4:	ldr	ip, [fp, #-84]	; 0xffffffac
   126a8:	mov	r8, #0
   126ac:	mov	r2, #1
   126b0:	mov	r3, #0
   126b4:	mov	lr, r9
   126b8:	ldr	pc, [r1, r7, lsl #2]
   126bc:	andeq	r2, r1, r0, lsr #15
   126c0:	andeq	r2, r1, ip, asr #15
   126c4:	muleq	r1, r0, r7
   126c8:	andeq	r2, r1, r8, lsl #15
   126cc:	andeq	r2, r1, r0, asr #15
   126d0:	andeq	r2, r1, r4, lsl r8
   126d4:			; <UNDEFINED> instruction: 0x000127b0
   126d8:	andeq	r2, r1, r0, ror r8
   126dc:	andeq	r2, r1, r8, ror #13
   126e0:	andeq	r2, r1, r8, ror #13
   126e4:	andeq	r2, r1, r0, lsl r7
   126e8:	movw	r0, #22886	; 0x5966
   126ec:	mov	r1, r7
   126f0:	movt	r0, #1
   126f4:	bl	14020 <__assert_fail@plt+0x3064>
   126f8:	str	r0, [sp, #72]	; 0x48
   126fc:	movw	r0, #22888	; 0x5968
   12700:	mov	r1, r7
   12704:	movt	r0, #1
   12708:	bl	14020 <__assert_fail@plt+0x3064>
   1270c:	str	r0, [sp, #76]	; 0x4c
   12710:	str	r5, [fp, #-48]	; 0xffffffd0
   12714:	mov	r8, #0
   12718:	mov	r5, r7
   1271c:	tst	r4, #1
   12720:	bne	12758 <__assert_fail@plt+0x179c>
   12724:	ldr	r0, [sp, #72]	; 0x48
   12728:	ldrb	r0, [r0]
   1272c:	cmp	r0, #0
   12730:	beq	12758 <__assert_fail@plt+0x179c>
   12734:	ldr	r1, [sp, #72]	; 0x48
   12738:	mov	r8, #0
   1273c:	add	r1, r1, #1
   12740:	cmp	r8, sl
   12744:	strbcc	r0, [r6, r8]
   12748:	ldrb	r0, [r1, r8]
   1274c:	add	r8, r8, #1
   12750:	cmp	r0, #0
   12754:	bne	12740 <__assert_fail@plt+0x1784>
   12758:	ldr	r7, [sp, #76]	; 0x4c
   1275c:	mov	r0, r7
   12760:	bl	10ef0 <strlen@plt>
   12764:	str	r7, [sp, #92]	; 0x5c
   12768:	mov	r7, r5
   1276c:	ldr	ip, [fp, #-84]	; 0xffffffac
   12770:	ldr	r5, [fp, #-48]	; 0xffffffd0
   12774:	str	r0, [fp, #-76]	; 0xffffffb4
   12778:	mov	r2, #1
   1277c:	mov	r3, r4
   12780:	mov	lr, r9
   12784:	b	12870 <__assert_fail@plt+0x18b4>
   12788:	mov	r0, #1
   1278c:	b	127cc <__assert_fail@plt+0x1810>
   12790:	tst	r4, #1
   12794:	bne	127cc <__assert_fail@plt+0x1810>
   12798:	mov	r2, r0
   1279c:	b	127f4 <__assert_fail@plt+0x1838>
   127a0:	mov	r7, #0
   127a4:	mov	r8, #0
   127a8:	mov	r2, r0
   127ac:	b	1286c <__assert_fail@plt+0x18b0>
   127b0:	mov	r0, #1
   127b4:	mov	r8, #0
   127b8:	mov	r7, #5
   127bc:	b	12828 <__assert_fail@plt+0x186c>
   127c0:	mov	r2, #1
   127c4:	tst	r4, #1
   127c8:	beq	127f4 <__assert_fail@plt+0x1838>
   127cc:	mov	r1, #1
   127d0:	mov	r8, #0
   127d4:	mov	r7, #2
   127d8:	mov	r2, r0
   127dc:	mov	r3, #1
   127e0:	str	r1, [fp, #-76]	; 0xffffffb4
   127e4:	movw	r1, #22888	; 0x5968
   127e8:	movt	r1, #1
   127ec:	str	r1, [sp, #92]	; 0x5c
   127f0:	b	12870 <__assert_fail@plt+0x18b4>
   127f4:	cmp	sl, #0
   127f8:	mov	r8, #1
   127fc:	mov	r7, #2
   12800:	movne	r0, #39	; 0x27
   12804:	strbne	r0, [r6]
   12808:	movw	r0, #22888	; 0x5968
   1280c:	movt	r0, #1
   12810:	b	12860 <__assert_fail@plt+0x18a4>
   12814:	mov	r7, #5
   12818:	tst	r4, #1
   1281c:	beq	12844 <__assert_fail@plt+0x1888>
   12820:	mov	r0, #1
   12824:	mov	r8, #0
   12828:	str	r0, [fp, #-76]	; 0xffffffb4
   1282c:	movw	r0, #22884	; 0x5964
   12830:	mov	r2, #1
   12834:	mov	r3, #1
   12838:	movt	r0, #1
   1283c:	str	r0, [sp, #92]	; 0x5c
   12840:	b	12870 <__assert_fail@plt+0x18b4>
   12844:	cmp	sl, #0
   12848:	mov	r8, #1
   1284c:	mov	r2, #1
   12850:	movne	r0, #34	; 0x22
   12854:	strbne	r0, [r6]
   12858:	movw	r0, #22884	; 0x5964
   1285c:	movt	r0, #1
   12860:	str	r0, [sp, #92]	; 0x5c
   12864:	mov	r0, #1
   12868:	str	r0, [fp, #-76]	; 0xffffffb4
   1286c:	mov	r3, #0
   12870:	ldr	r0, [fp, #16]
   12874:	str	r3, [fp, #-72]	; 0xffffffb8
   12878:	str	r7, [fp, #-64]	; 0xffffffc0
   1287c:	str	r2, [sp, #84]	; 0x54
   12880:	cmp	r0, #0
   12884:	movwne	r0, #1
   12888:	and	r0, r0, r3
   1288c:	str	r0, [fp, #-88]	; 0xffffffa8
   12890:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12894:	cmp	r0, #0
   12898:	movwne	r0, #1
   1289c:	subs	r4, r7, #2
   128a0:	mov	r7, #0
   128a4:	and	r1, r0, r3
   128a8:	str	r4, [fp, #-80]	; 0xffffffb0
   128ac:	and	r1, r2, r1
   128b0:	str	r1, [sp, #48]	; 0x30
   128b4:	clz	r1, r4
   128b8:	lsr	r1, r1, #5
   128bc:	and	r1, r1, r3
   128c0:	eor	r3, r3, #1
   128c4:	str	r1, [sp, #64]	; 0x40
   128c8:	mov	r1, r4
   128cc:	str	r3, [sp, #88]	; 0x58
   128d0:	movwne	r1, #1
   128d4:	orr	r3, r1, r3
   128d8:	and	r1, r1, r2
   128dc:	and	r0, r0, r1
   128e0:	str	r3, [sp, #68]	; 0x44
   128e4:	str	r1, [fp, #-68]	; 0xffffffbc
   128e8:	str	r0, [fp, #-60]	; 0xffffffc4
   128ec:	eor	r0, r2, #1
   128f0:	str	r0, [sp, #52]	; 0x34
   128f4:	cmn	lr, #1
   128f8:	beq	12908 <__assert_fail@plt+0x194c>
   128fc:	cmp	r7, lr
   12900:	bne	12914 <__assert_fail@plt+0x1958>
   12904:	b	1343c <__assert_fail@plt+0x2480>
   12908:	ldrb	r0, [ip, r7]
   1290c:	cmp	r0, #0
   12910:	beq	13444 <__assert_fail@plt+0x2488>
   12914:	ldr	r0, [fp, #-60]	; 0xffffffc4
   12918:	mov	r9, #0
   1291c:	str	r5, [fp, #-48]	; 0xffffffd0
   12920:	cmp	r0, #0
   12924:	beq	12958 <__assert_fail@plt+0x199c>
   12928:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1292c:	add	r4, r7, r0
   12930:	cmp	r0, #2
   12934:	bcc	12950 <__assert_fail@plt+0x1994>
   12938:	cmn	lr, #1
   1293c:	bne	12950 <__assert_fail@plt+0x1994>
   12940:	mov	r0, ip
   12944:	bl	10ef0 <strlen@plt>
   12948:	ldr	ip, [fp, #-84]	; 0xffffffac
   1294c:	mov	lr, r0
   12950:	cmp	r4, lr
   12954:	bls	12960 <__assert_fail@plt+0x19a4>
   12958:	mov	r0, #0
   1295c:	b	129a0 <__assert_fail@plt+0x19e4>
   12960:	ldr	r1, [sp, #92]	; 0x5c
   12964:	ldr	r2, [fp, #-76]	; 0xffffffb4
   12968:	add	r0, ip, r7
   1296c:	mov	r4, lr
   12970:	bl	10de8 <memcmp@plt>
   12974:	ldr	r2, [sp, #88]	; 0x58
   12978:	cmp	r0, #0
   1297c:	mov	r1, r0
   12980:	movwne	r1, #1
   12984:	orr	r1, r1, r2
   12988:	tst	r1, #1
   1298c:	beq	134d4 <__assert_fail@plt+0x2518>
   12990:	ldr	ip, [fp, #-84]	; 0xffffffac
   12994:	clz	r0, r0
   12998:	mov	lr, r4
   1299c:	lsr	r0, r0, #5
   129a0:	str	r0, [fp, #-52]	; 0xffffffcc
   129a4:	ldrb	r5, [ip, r7]
   129a8:	cmp	r5, #126	; 0x7e
   129ac:	bhi	12d64 <__assert_fail@plt+0x1da8>
   129b0:	add	r3, pc, #16
   129b4:	mov	r4, #1
   129b8:	mov	r2, #110	; 0x6e
   129bc:	mov	r0, #97	; 0x61
   129c0:	mov	r1, #0
   129c4:	ldr	pc, [r3, r5, lsl #2]
   129c8:	andeq	r2, r1, r0, ror #24
   129cc:	andeq	r2, r1, r4, ror #26
   129d0:	andeq	r2, r1, r4, ror #26
   129d4:	andeq	r2, r1, r4, ror #26
   129d8:	andeq	r2, r1, r4, ror #26
   129dc:	andeq	r2, r1, r4, ror #26
   129e0:	andeq	r2, r1, r4, ror #26
   129e4:	andeq	r2, r1, r8, lsl lr
   129e8:	andeq	r2, r1, r0, asr #24
   129ec:	andeq	r2, r1, r8, lsr ip
   129f0:	andeq	r2, r1, ip, asr #24
   129f4:	andeq	r2, r1, ip, asr #25
   129f8:	andeq	r2, r1, r0, lsr ip
   129fc:	andeq	r2, r1, r8, asr #24
   12a00:	andeq	r2, r1, r4, ror #26
   12a04:	andeq	r2, r1, r4, ror #26
   12a08:	andeq	r2, r1, r4, ror #26
   12a0c:	andeq	r2, r1, r4, ror #26
   12a10:	andeq	r2, r1, r4, ror #26
   12a14:	andeq	r2, r1, r4, ror #26
   12a18:	andeq	r2, r1, r4, ror #26
   12a1c:	andeq	r2, r1, r4, ror #26
   12a20:	andeq	r2, r1, r4, ror #26
   12a24:	andeq	r2, r1, r4, ror #26
   12a28:	andeq	r2, r1, r4, ror #26
   12a2c:	andeq	r2, r1, r4, ror #26
   12a30:	andeq	r2, r1, r4, ror #26
   12a34:	andeq	r2, r1, r4, ror #26
   12a38:	andeq	r2, r1, r4, ror #26
   12a3c:	andeq	r2, r1, r4, ror #26
   12a40:	andeq	r2, r1, r4, ror #26
   12a44:	andeq	r2, r1, r4, ror #26
   12a48:	ldrdeq	r2, [r1], -r0
   12a4c:	ldrdeq	r2, [r1], -r4
   12a50:	ldrdeq	r2, [r1], -r4
   12a54:	ldrdeq	r2, [r1], -r8
   12a58:	ldrdeq	r2, [r1], -r4
   12a5c:	andeq	r2, r1, r4, asr #23
   12a60:	ldrdeq	r2, [r1], -r4
   12a64:	ldrdeq	r2, [r1], -r4
   12a68:	ldrdeq	r2, [r1], -r4
   12a6c:	ldrdeq	r2, [r1], -r4
   12a70:	ldrdeq	r2, [r1], -r4
   12a74:	andeq	r2, r1, r4, asr #23
   12a78:	andeq	r2, r1, r4, asr #23
   12a7c:	andeq	r2, r1, r4, asr #23
   12a80:	andeq	r2, r1, r4, asr #23
   12a84:	andeq	r2, r1, r4, asr #23
   12a88:	andeq	r2, r1, r4, asr #23
   12a8c:	andeq	r2, r1, r4, asr #23
   12a90:	andeq	r2, r1, r4, asr #23
   12a94:	andeq	r2, r1, r4, asr #23
   12a98:	andeq	r2, r1, r4, asr #23
   12a9c:	andeq	r2, r1, r4, asr #23
   12aa0:	andeq	r2, r1, r4, asr #23
   12aa4:	andeq	r2, r1, r4, asr #23
   12aa8:	andeq	r2, r1, r4, asr #23
   12aac:	andeq	r2, r1, r4, asr #23
   12ab0:	andeq	r2, r1, r4, asr #23
   12ab4:	ldrdeq	r2, [r1], -r4
   12ab8:	ldrdeq	r2, [r1], -r4
   12abc:	ldrdeq	r2, [r1], -r4
   12ac0:	ldrdeq	r2, [r1], -r4
   12ac4:	andeq	r2, r1, r0, lsr #25
   12ac8:	andeq	r2, r1, r4, ror #26
   12acc:	andeq	r2, r1, r4, asr #23
   12ad0:	andeq	r2, r1, r4, asr #23
   12ad4:	andeq	r2, r1, r4, asr #23
   12ad8:	andeq	r2, r1, r4, asr #23
   12adc:	andeq	r2, r1, r4, asr #23
   12ae0:	andeq	r2, r1, r4, asr #23
   12ae4:	andeq	r2, r1, r4, asr #23
   12ae8:	andeq	r2, r1, r4, asr #23
   12aec:	andeq	r2, r1, r4, asr #23
   12af0:	andeq	r2, r1, r4, asr #23
   12af4:	andeq	r2, r1, r4, asr #23
   12af8:	andeq	r2, r1, r4, asr #23
   12afc:	andeq	r2, r1, r4, asr #23
   12b00:	andeq	r2, r1, r4, asr #23
   12b04:	andeq	r2, r1, r4, asr #23
   12b08:	andeq	r2, r1, r4, asr #23
   12b0c:	andeq	r2, r1, r4, asr #23
   12b10:	andeq	r2, r1, r4, asr #23
   12b14:	andeq	r2, r1, r4, asr #23
   12b18:	andeq	r2, r1, r4, asr #23
   12b1c:	andeq	r2, r1, r4, asr #23
   12b20:	andeq	r2, r1, r4, asr #23
   12b24:	andeq	r2, r1, r4, asr #23
   12b28:	andeq	r2, r1, r4, asr #23
   12b2c:	andeq	r2, r1, r4, asr #23
   12b30:	andeq	r2, r1, r4, asr #23
   12b34:	ldrdeq	r2, [r1], -r4
   12b38:	andeq	r2, r1, ip, lsl #24
   12b3c:	andeq	r2, r1, r4, asr #23
   12b40:	ldrdeq	r2, [r1], -r4
   12b44:	andeq	r2, r1, r4, asr #23
   12b48:	ldrdeq	r2, [r1], -r4
   12b4c:	andeq	r2, r1, r4, asr #23
   12b50:	andeq	r2, r1, r4, asr #23
   12b54:	andeq	r2, r1, r4, asr #23
   12b58:	andeq	r2, r1, r4, asr #23
   12b5c:	andeq	r2, r1, r4, asr #23
   12b60:	andeq	r2, r1, r4, asr #23
   12b64:	andeq	r2, r1, r4, asr #23
   12b68:	andeq	r2, r1, r4, asr #23
   12b6c:	andeq	r2, r1, r4, asr #23
   12b70:	andeq	r2, r1, r4, asr #23
   12b74:	andeq	r2, r1, r4, asr #23
   12b78:	andeq	r2, r1, r4, asr #23
   12b7c:	andeq	r2, r1, r4, asr #23
   12b80:	andeq	r2, r1, r4, asr #23
   12b84:	andeq	r2, r1, r4, asr #23
   12b88:	andeq	r2, r1, r4, asr #23
   12b8c:	andeq	r2, r1, r4, asr #23
   12b90:	andeq	r2, r1, r4, asr #23
   12b94:	andeq	r2, r1, r4, asr #23
   12b98:	andeq	r2, r1, r4, asr #23
   12b9c:	andeq	r2, r1, r4, asr #23
   12ba0:	andeq	r2, r1, r4, asr #23
   12ba4:	andeq	r2, r1, r4, asr #23
   12ba8:	andeq	r2, r1, r4, asr #23
   12bac:	andeq	r2, r1, r4, asr #23
   12bb0:	andeq	r2, r1, r4, asr #23
   12bb4:	andeq	r2, r1, ip, ror #23
   12bb8:	ldrdeq	r2, [r1], -r4
   12bbc:	andeq	r2, r1, ip, ror #23
   12bc0:	ldrdeq	r2, [r1], -r8
   12bc4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12bc8:	cmp	r0, #0
   12bcc:	beq	12e2c <__assert_fail@plt+0x1e70>
   12bd0:	ldr	r0, [fp, #16]
   12bd4:	b	12e30 <__assert_fail@plt+0x1e74>
   12bd8:	mov	r4, #0
   12bdc:	cmp	r7, #0
   12be0:	beq	12dd0 <__assert_fail@plt+0x1e14>
   12be4:	mov	r9, #0
   12be8:	b	12bc4 <__assert_fail@plt+0x1c08>
   12bec:	mov	r4, #0
   12bf0:	cmn	lr, #1
   12bf4:	beq	12db4 <__assert_fail@plt+0x1df8>
   12bf8:	cmp	r7, #0
   12bfc:	bne	12be4 <__assert_fail@plt+0x1c28>
   12c00:	cmp	lr, #1
   12c04:	beq	12dd0 <__assert_fail@plt+0x1e14>
   12c08:	b	12be4 <__assert_fail@plt+0x1c28>
   12c0c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12c10:	cmp	r0, #2
   12c14:	bne	12df4 <__assert_fail@plt+0x1e38>
   12c18:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12c1c:	tst	r0, #1
   12c20:	bne	134f0 <__assert_fail@plt+0x2534>
   12c24:	mov	r9, #0
   12c28:	mov	r0, #92	; 0x5c
   12c2c:	b	12e08 <__assert_fail@plt+0x1e4c>
   12c30:	mov	r0, #102	; 0x66
   12c34:	b	12e18 <__assert_fail@plt+0x1e5c>
   12c38:	mov	r2, #116	; 0x74
   12c3c:	b	12c4c <__assert_fail@plt+0x1c90>
   12c40:	mov	r0, #98	; 0x62
   12c44:	b	12e18 <__assert_fail@plt+0x1e5c>
   12c48:	mov	r2, #114	; 0x72
   12c4c:	ldr	r0, [sp, #68]	; 0x44
   12c50:	tst	r0, #1
   12c54:	mov	r0, r2
   12c58:	bne	12e18 <__assert_fail@plt+0x1e5c>
   12c5c:	b	134f0 <__assert_fail@plt+0x2534>
   12c60:	ldr	r0, [sp, #84]	; 0x54
   12c64:	tst	r0, #1
   12c68:	beq	12f08 <__assert_fail@plt+0x1f4c>
   12c6c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12c70:	tst	r0, #1
   12c74:	bne	13600 <__assert_fail@plt+0x2644>
   12c78:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12c7c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   12c80:	cmp	r0, #2
   12c84:	ldr	r0, [fp, #-80]	; 0xffffffb0
   12c88:	movwne	r0, #1
   12c8c:	orr	r0, r0, r2
   12c90:	tst	r0, #1
   12c94:	beq	132d8 <__assert_fail@plt+0x231c>
   12c98:	mov	r0, r8
   12c9c:	b	1330c <__assert_fail@plt+0x2350>
   12ca0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12ca4:	mov	r9, #0
   12ca8:	mov	r5, #63	; 0x3f
   12cac:	cmp	r0, #5
   12cb0:	beq	130bc <__assert_fail@plt+0x2100>
   12cb4:	cmp	r0, #2
   12cb8:	bne	13160 <__assert_fail@plt+0x21a4>
   12cbc:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12cc0:	tst	r0, #1
   12cc4:	beq	13164 <__assert_fail@plt+0x21a8>
   12cc8:	b	134f0 <__assert_fail@plt+0x2534>
   12ccc:	mov	r0, #118	; 0x76
   12cd0:	b	12e18 <__assert_fail@plt+0x1e5c>
   12cd4:	mov	r0, #1
   12cd8:	mov	r5, #39	; 0x27
   12cdc:	str	r0, [sp, #60]	; 0x3c
   12ce0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12ce4:	cmp	r0, #2
   12ce8:	bne	12d5c <__assert_fail@plt+0x1da0>
   12cec:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12cf0:	tst	r0, #1
   12cf4:	bne	134f0 <__assert_fail@plt+0x2534>
   12cf8:	ldr	r2, [sp, #56]	; 0x38
   12cfc:	clz	r1, sl
   12d00:	mov	r9, #0
   12d04:	lsr	r1, r1, #5
   12d08:	cmp	r2, #0
   12d0c:	mov	r0, r2
   12d10:	movwne	r0, #1
   12d14:	orrs	r0, r0, r1
   12d18:	moveq	r2, sl
   12d1c:	moveq	sl, r0
   12d20:	cmp	r8, sl
   12d24:	str	r2, [sp, #56]	; 0x38
   12d28:	movcc	r0, #39	; 0x27
   12d2c:	strbcc	r0, [r6, r8]
   12d30:	add	r0, r8, #1
   12d34:	cmp	r0, sl
   12d38:	movcc	r1, #92	; 0x5c
   12d3c:	strbcc	r1, [r6, r0]
   12d40:	add	r0, r8, #2
   12d44:	add	r8, r8, #3
   12d48:	cmp	r0, sl
   12d4c:	movcc	r1, #39	; 0x27
   12d50:	strbcc	r1, [r6, r0]
   12d54:	mov	r0, #0
   12d58:	str	r0, [fp, #-56]	; 0xffffffc8
   12d5c:	mov	r4, #1
   12d60:	b	12bc4 <__assert_fail@plt+0x1c08>
   12d64:	ldr	r0, [sp, #40]	; 0x28
   12d68:	cmp	r0, #1
   12d6c:	bne	12f34 <__assert_fail@plt+0x1f78>
   12d70:	str	lr, [sp, #28]
   12d74:	bl	10ed8 <__ctype_b_loc@plt>
   12d78:	ldr	r0, [r0]
   12d7c:	ldr	ip, [fp, #-84]	; 0xffffffac
   12d80:	mov	r1, #1
   12d84:	add	r0, r0, r5, lsl #1
   12d88:	ldrb	r0, [r0, #1]
   12d8c:	ubfx	r4, r0, #6, #1
   12d90:	ldr	r0, [sp, #52]	; 0x34
   12d94:	mov	r2, r1
   12d98:	cmp	r1, #1
   12d9c:	orr	r0, r4, r0
   12da0:	bhi	1316c <__assert_fail@plt+0x21b0>
   12da4:	tst	r0, #1
   12da8:	beq	1316c <__assert_fail@plt+0x21b0>
   12dac:	ldr	lr, [sp, #28]
   12db0:	b	12bc4 <__assert_fail@plt+0x1c08>
   12db4:	cmp	r7, #0
   12db8:	ldrbeq	r0, [ip, #1]
   12dbc:	cmpeq	r0, #0
   12dc0:	beq	12dd0 <__assert_fail@plt+0x1e14>
   12dc4:	mvn	lr, #0
   12dc8:	mov	r9, #0
   12dcc:	b	12bc4 <__assert_fail@plt+0x1c08>
   12dd0:	mov	r1, #1
   12dd4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12dd8:	cmp	r0, #2
   12ddc:	bne	12dec <__assert_fail@plt+0x1e30>
   12de0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12de4:	tst	r0, #1
   12de8:	bne	134f0 <__assert_fail@plt+0x2534>
   12dec:	mov	r4, r1
   12df0:	b	12bc4 <__assert_fail@plt+0x1c08>
   12df4:	ldr	r1, [sp, #48]	; 0x30
   12df8:	mov	r9, #0
   12dfc:	mov	r0, #92	; 0x5c
   12e00:	cmp	r1, #0
   12e04:	beq	12e18 <__assert_fail@plt+0x1e5c>
   12e08:	mov	r4, #0
   12e0c:	cmp	r9, #0
   12e10:	beq	133a4 <__assert_fail@plt+0x23e8>
   12e14:	b	133e0 <__assert_fail@plt+0x2424>
   12e18:	ldr	r1, [sp, #84]	; 0x54
   12e1c:	mov	r4, #0
   12e20:	mov	r9, #0
   12e24:	tst	r1, #1
   12e28:	bne	12e68 <__assert_fail@plt+0x1eac>
   12e2c:	ldr	r0, [fp, #-88]	; 0xffffffa8
   12e30:	cmp	r0, #0
   12e34:	mov	r0, r5
   12e38:	beq	12e5c <__assert_fail@plt+0x1ea0>
   12e3c:	ldr	r1, [fp, #16]
   12e40:	ubfx	r0, r5, #5, #3
   12e44:	mov	r2, #1
   12e48:	ldr	r0, [r1, r0, lsl #2]
   12e4c:	and	r1, r5, #31
   12e50:	tst	r0, r2, lsl r1
   12e54:	mov	r0, r5
   12e58:	bne	12e68 <__assert_fail@plt+0x1eac>
   12e5c:	ldr	r1, [fp, #-52]	; 0xffffffcc
   12e60:	cmp	r1, #0
   12e64:	beq	1339c <__assert_fail@plt+0x23e0>
   12e68:	ldr	r1, [fp, #-72]	; 0xffffffb8
   12e6c:	tst	r1, #1
   12e70:	bne	134c8 <__assert_fail@plt+0x250c>
   12e74:	ldr	r1, [fp, #-64]	; 0xffffffc0
   12e78:	ldr	r2, [fp, #-56]	; 0xffffffc8
   12e7c:	cmp	r1, #2
   12e80:	ldr	r1, [fp, #-80]	; 0xffffffb0
   12e84:	movwne	r1, #1
   12e88:	orr	r1, r1, r2
   12e8c:	tst	r1, #1
   12e90:	beq	12e9c <__assert_fail@plt+0x1ee0>
   12e94:	ldr	r5, [fp, #-48]	; 0xffffffd0
   12e98:	b	12ed8 <__assert_fail@plt+0x1f1c>
   12e9c:	cmp	r8, sl
   12ea0:	ldr	r5, [fp, #-48]	; 0xffffffd0
   12ea4:	movcc	r1, #39	; 0x27
   12ea8:	strbcc	r1, [r6, r8]
   12eac:	add	r1, r8, #1
   12eb0:	cmp	r1, sl
   12eb4:	movcc	r2, #36	; 0x24
   12eb8:	strbcc	r2, [r6, r1]
   12ebc:	add	r1, r8, #2
   12ec0:	add	r8, r8, #3
   12ec4:	cmp	r1, sl
   12ec8:	movcc	r2, #39	; 0x27
   12ecc:	strbcc	r2, [r6, r1]
   12ed0:	mov	r1, #1
   12ed4:	str	r1, [fp, #-56]	; 0xffffffc8
   12ed8:	cmp	r8, sl
   12edc:	movcc	r1, #92	; 0x5c
   12ee0:	strbcc	r1, [r6, r8]
   12ee4:	add	r8, r8, #1
   12ee8:	cmp	r8, sl
   12eec:	and	r5, r5, r4
   12ef0:	add	r7, r7, #1
   12ef4:	strbcc	r0, [r6, r8]
   12ef8:	add	r8, r8, #1
   12efc:	cmn	lr, #1
   12f00:	bne	128fc <__assert_fail@plt+0x1940>
   12f04:	b	12908 <__assert_fail@plt+0x194c>
   12f08:	ldr	r0, [sp, #36]	; 0x24
   12f0c:	mov	r4, #0
   12f10:	mov	r9, #0
   12f14:	mov	r5, #0
   12f18:	cmp	r0, #0
   12f1c:	beq	12e2c <__assert_fail@plt+0x1e70>
   12f20:	ldr	r5, [fp, #-48]	; 0xffffffd0
   12f24:	add	r7, r7, #1
   12f28:	cmn	lr, #1
   12f2c:	bne	128fc <__assert_fail@plt+0x1940>
   12f30:	b	12908 <__assert_fail@plt+0x194c>
   12f34:	mov	r0, #0
   12f38:	cmn	lr, #1
   12f3c:	str	r0, [fp, #-36]	; 0xffffffdc
   12f40:	str	r0, [fp, #-40]	; 0xffffffd8
   12f44:	bne	12f58 <__assert_fail@plt+0x1f9c>
   12f48:	mov	r0, ip
   12f4c:	bl	10ef0 <strlen@plt>
   12f50:	ldr	ip, [fp, #-84]	; 0xffffffac
   12f54:	mov	lr, r0
   12f58:	add	r0, ip, r7
   12f5c:	mov	r4, #1
   12f60:	mov	r6, #0
   12f64:	str	lr, [sp, #28]
   12f68:	str	r0, [sp, #24]
   12f6c:	sub	r0, fp, #40	; 0x28
   12f70:	mov	r3, r0
   12f74:	str	r6, [sp, #44]	; 0x2c
   12f78:	add	r6, r6, r7
   12f7c:	sub	r0, fp, #44	; 0x2c
   12f80:	add	r1, ip, r6
   12f84:	sub	r2, lr, r6
   12f88:	bl	15230 <__assert_fail@plt+0x4274>
   12f8c:	cmp	r0, #0
   12f90:	beq	13428 <__assert_fail@plt+0x246c>
   12f94:	cmn	r0, #1
   12f98:	beq	133e8 <__assert_fail@plt+0x242c>
   12f9c:	ldr	lr, [sp, #28]
   12fa0:	cmn	r0, #2
   12fa4:	beq	133f0 <__assert_fail@plt+0x2434>
   12fa8:	ldr	r2, [sp, #64]	; 0x40
   12fac:	cmp	r0, #2
   12fb0:	mov	r1, #0
   12fb4:	movwcc	r1, #1
   12fb8:	eor	r2, r2, #1
   12fbc:	orrs	r1, r2, r1
   12fc0:	bne	13080 <__assert_fail@plt+0x20c4>
   12fc4:	ldr	r1, [sp, #44]	; 0x2c
   12fc8:	ldr	r2, [sp, #24]
   12fcc:	add	r1, r2, r1
   12fd0:	mov	r2, #1
   12fd4:	ldrb	r3, [r1, r2]
   12fd8:	sub	r3, r3, #91	; 0x5b
   12fdc:	cmp	r3, #33	; 0x21
   12fe0:	bhi	13074 <__assert_fail@plt+0x20b8>
   12fe4:	add	r6, pc, #0
   12fe8:	ldr	pc, [r6, r3, lsl #2]
   12fec:	andeq	r3, r1, r8, ror #9
   12ff0:	andeq	r3, r1, r8, ror #9
   12ff4:	andeq	r3, r1, r4, ror r0
   12ff8:	andeq	r3, r1, r8, ror #9
   12ffc:	andeq	r3, r1, r4, ror r0
   13000:	andeq	r3, r1, r8, ror #9
   13004:	andeq	r3, r1, r4, ror r0
   13008:	andeq	r3, r1, r4, ror r0
   1300c:	andeq	r3, r1, r4, ror r0
   13010:	andeq	r3, r1, r4, ror r0
   13014:	andeq	r3, r1, r4, ror r0
   13018:	andeq	r3, r1, r4, ror r0
   1301c:	andeq	r3, r1, r4, ror r0
   13020:	andeq	r3, r1, r4, ror r0
   13024:	andeq	r3, r1, r4, ror r0
   13028:	andeq	r3, r1, r4, ror r0
   1302c:	andeq	r3, r1, r4, ror r0
   13030:	andeq	r3, r1, r4, ror r0
   13034:	andeq	r3, r1, r4, ror r0
   13038:	andeq	r3, r1, r4, ror r0
   1303c:	andeq	r3, r1, r4, ror r0
   13040:	andeq	r3, r1, r4, ror r0
   13044:	andeq	r3, r1, r4, ror r0
   13048:	andeq	r3, r1, r4, ror r0
   1304c:	andeq	r3, r1, r4, ror r0
   13050:	andeq	r3, r1, r4, ror r0
   13054:	andeq	r3, r1, r4, ror r0
   13058:	andeq	r3, r1, r4, ror r0
   1305c:	andeq	r3, r1, r4, ror r0
   13060:	andeq	r3, r1, r4, ror r0
   13064:	andeq	r3, r1, r4, ror r0
   13068:	andeq	r3, r1, r4, ror r0
   1306c:	andeq	r3, r1, r4, ror r0
   13070:	andeq	r3, r1, r8, ror #9
   13074:	add	r2, r2, #1
   13078:	cmp	r2, r0
   1307c:	bcc	12fd4 <__assert_fail@plt+0x2018>
   13080:	ldr	r6, [sp, #44]	; 0x2c
   13084:	add	r6, r0, r6
   13088:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1308c:	bl	10e24 <iswprint@plt>
   13090:	cmp	r0, #0
   13094:	movwne	r0, #1
   13098:	and	r4, r4, r0
   1309c:	sub	r0, fp, #40	; 0x28
   130a0:	bl	10ddc <mbsinit@plt>
   130a4:	ldr	lr, [sp, #28]
   130a8:	ldr	ip, [fp, #-84]	; 0xffffffac
   130ac:	sub	r3, fp, #40	; 0x28
   130b0:	cmp	r0, #0
   130b4:	beq	12f74 <__assert_fail@plt+0x1fb8>
   130b8:	b	13430 <__assert_fail@plt+0x2474>
   130bc:	ldr	r0, [sp, #32]
   130c0:	cmp	r0, #0
   130c4:	beq	13160 <__assert_fail@plt+0x21a4>
   130c8:	add	r0, r7, #2
   130cc:	cmp	r0, lr
   130d0:	bcs	13160 <__assert_fail@plt+0x21a4>
   130d4:	add	r1, ip, r7
   130d8:	ldrb	r1, [r1, #1]
   130dc:	cmp	r1, #63	; 0x3f
   130e0:	bne	13160 <__assert_fail@plt+0x21a4>
   130e4:	ldrb	r5, [ip, r0]
   130e8:	sub	r1, r5, #33	; 0x21
   130ec:	cmp	r1, #29
   130f0:	bhi	13160 <__assert_fail@plt+0x21a4>
   130f4:	movw	r3, #20929	; 0x51c1
   130f8:	mov	r2, #1
   130fc:	movt	r3, #14336	; 0x3800
   13100:	tst	r3, r2, lsl r1
   13104:	beq	13160 <__assert_fail@plt+0x21a4>
   13108:	ldr	r1, [fp, #-72]	; 0xffffffb8
   1310c:	tst	r1, #1
   13110:	bne	13608 <__assert_fail@plt+0x264c>
   13114:	cmp	r8, sl
   13118:	mov	r7, r0
   1311c:	mov	r4, #0
   13120:	movcc	r1, #63	; 0x3f
   13124:	strbcc	r1, [r6, r8]
   13128:	add	r1, r8, #1
   1312c:	cmp	r1, sl
   13130:	movcc	r2, #34	; 0x22
   13134:	strbcc	r2, [r6, r1]
   13138:	add	r1, r8, #2
   1313c:	cmp	r1, sl
   13140:	movcc	r2, #34	; 0x22
   13144:	strbcc	r2, [r6, r1]
   13148:	add	r1, r8, #3
   1314c:	add	r8, r8, #4
   13150:	cmp	r1, sl
   13154:	movcc	r2, #63	; 0x3f
   13158:	strbcc	r2, [r6, r1]
   1315c:	b	12bc4 <__assert_fail@plt+0x1c08>
   13160:	mov	r5, #63	; 0x3f
   13164:	mov	r4, #0
   13168:	b	12bc4 <__assert_fail@plt+0x1c08>
   1316c:	add	r1, r2, r7
   13170:	ldr	lr, [sp, #28]
   13174:	mov	r3, #0
   13178:	str	r1, [sp, #44]	; 0x2c
   1317c:	add	r1, r7, #1
   13180:	ldr	r7, [fp, #-64]	; 0xffffffc0
   13184:	tst	r0, #1
   13188:	bne	1325c <__assert_fail@plt+0x22a0>
   1318c:	ldr	r2, [fp, #-72]	; 0xffffffb8
   13190:	tst	r2, #1
   13194:	bne	13550 <__assert_fail@plt+0x2594>
   13198:	ldr	r3, [fp, #-80]	; 0xffffffb0
   1319c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   131a0:	cmp	r7, #2
   131a4:	movwne	r3, #1
   131a8:	orr	r3, r3, r2
   131ac:	tst	r3, #1
   131b0:	bne	131ec <__assert_fail@plt+0x2230>
   131b4:	cmp	r8, sl
   131b8:	add	r3, r8, #1
   131bc:	movcc	r2, #39	; 0x27
   131c0:	strbcc	r2, [r6, r8]
   131c4:	cmp	r3, sl
   131c8:	movcc	r2, #36	; 0x24
   131cc:	strbcc	r2, [r6, r3]
   131d0:	add	r3, r8, #2
   131d4:	add	r8, r8, #3
   131d8:	cmp	r3, sl
   131dc:	movcc	r2, #39	; 0x27
   131e0:	strbcc	r2, [r6, r3]
   131e4:	mov	r2, #1
   131e8:	str	r2, [fp, #-56]	; 0xffffffc8
   131ec:	cmp	r8, sl
   131f0:	movcc	r3, #92	; 0x5c
   131f4:	strbcc	r3, [r6, r8]
   131f8:	add	r3, r8, #1
   131fc:	cmp	r3, sl
   13200:	andcc	r7, r5, #192	; 0xc0
   13204:	movcc	r2, #48	; 0x30
   13208:	orrcc	r7, r2, r7, lsr #6
   1320c:	strbcc	r7, [r6, r3]
   13210:	add	r3, r8, #2
   13214:	add	r8, r8, #3
   13218:	cmp	r3, sl
   1321c:	lsrcc	r7, r5, #3
   13220:	movcc	r2, #6
   13224:	bficc	r7, r2, #3, #29
   13228:	mov	r2, #6
   1322c:	strbcc	r7, [r6, r3]
   13230:	bfi	r5, r2, #3, #29
   13234:	mov	r3, #1
   13238:	b	13280 <__assert_fail@plt+0x22c4>
   1323c:	cmp	r8, sl
   13240:	ldr	r7, [fp, #-64]	; 0xffffffc0
   13244:	strbcc	r5, [r6, r8]
   13248:	add	r8, r8, #1
   1324c:	ldrb	r5, [ip, r1]
   13250:	add	r1, r1, #1
   13254:	tst	r0, #1
   13258:	beq	1318c <__assert_fail@plt+0x21d0>
   1325c:	ldr	r2, [fp, #-52]	; 0xffffffcc
   13260:	tst	r2, #1
   13264:	beq	13278 <__assert_fail@plt+0x22bc>
   13268:	cmp	r8, sl
   1326c:	movcc	r7, #92	; 0x5c
   13270:	strbcc	r7, [r6, r8]
   13274:	add	r8, r8, #1
   13278:	mov	r2, #0
   1327c:	str	r2, [fp, #-52]	; 0xffffffcc
   13280:	ldr	r2, [sp, #44]	; 0x2c
   13284:	and	r9, r3, #1
   13288:	cmp	r2, r1
   1328c:	bls	1338c <__assert_fail@plt+0x23d0>
   13290:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13294:	cmp	r9, #0
   13298:	movwne	r9, #1
   1329c:	mvn	r7, r2
   132a0:	orr	r7, r7, r9
   132a4:	tst	r7, #1
   132a8:	bne	1323c <__assert_fail@plt+0x2280>
   132ac:	cmp	r8, sl
   132b0:	movcc	r7, #39	; 0x27
   132b4:	strbcc	r7, [r6, r8]
   132b8:	add	r7, r8, #1
   132bc:	add	r8, r8, #2
   132c0:	cmp	r7, sl
   132c4:	movcc	r2, #39	; 0x27
   132c8:	strbcc	r2, [r6, r7]
   132cc:	mov	r2, #0
   132d0:	str	r2, [fp, #-56]	; 0xffffffc8
   132d4:	b	1323c <__assert_fail@plt+0x2280>
   132d8:	cmp	r8, sl
   132dc:	mov	r2, #1
   132e0:	movcc	r0, #39	; 0x27
   132e4:	strbcc	r0, [r6, r8]
   132e8:	add	r0, r8, #1
   132ec:	cmp	r0, sl
   132f0:	movcc	r1, #36	; 0x24
   132f4:	strbcc	r1, [r6, r0]
   132f8:	add	r0, r8, #2
   132fc:	cmp	r0, sl
   13300:	movcc	r1, #39	; 0x27
   13304:	strbcc	r1, [r6, r0]
   13308:	add	r0, r8, #3
   1330c:	cmp	r0, sl
   13310:	add	r8, r0, #1
   13314:	str	r2, [fp, #-56]	; 0xffffffc8
   13318:	movcc	r1, #92	; 0x5c
   1331c:	strbcc	r1, [r6, r0]
   13320:	ldr	r1, [fp, #-64]	; 0xffffffc0
   13324:	cmp	r1, #2
   13328:	beq	1337c <__assert_fail@plt+0x23c0>
   1332c:	add	r1, r7, #1
   13330:	mov	r4, #0
   13334:	mov	r9, #1
   13338:	mov	r5, #48	; 0x30
   1333c:	cmp	r1, lr
   13340:	bcs	12bc4 <__assert_fail@plt+0x1c08>
   13344:	ldrb	r1, [ip, r1]
   13348:	sub	r1, r1, #48	; 0x30
   1334c:	uxtb	r1, r1
   13350:	cmp	r1, #9
   13354:	bhi	12bc4 <__assert_fail@plt+0x1c08>
   13358:	cmp	r8, sl
   1335c:	movcc	r1, #48	; 0x30
   13360:	strbcc	r1, [r6, r8]
   13364:	add	r1, r0, #2
   13368:	add	r8, r0, #3
   1336c:	cmp	r1, sl
   13370:	movcc	r2, #48	; 0x30
   13374:	strbcc	r2, [r6, r1]
   13378:	b	12bc4 <__assert_fail@plt+0x1c08>
   1337c:	mov	r0, #48	; 0x30
   13380:	mov	r9, #1
   13384:	mov	r4, #0
   13388:	b	12e5c <__assert_fail@plt+0x1ea0>
   1338c:	cmp	r9, #0
   13390:	sub	r7, r1, #1
   13394:	mov	r0, r5
   13398:	movwne	r9, #1
   1339c:	cmp	r9, #0
   133a0:	bne	133e0 <__assert_fail@plt+0x2424>
   133a4:	ldr	r1, [fp, #-56]	; 0xffffffc8
   133a8:	tst	r1, #1
   133ac:	beq	133e0 <__assert_fail@plt+0x2424>
   133b0:	cmp	r8, sl
   133b4:	ldr	r5, [fp, #-48]	; 0xffffffd0
   133b8:	movcc	r1, #39	; 0x27
   133bc:	strbcc	r1, [r6, r8]
   133c0:	add	r1, r8, #1
   133c4:	add	r8, r8, #2
   133c8:	cmp	r1, sl
   133cc:	movcc	r2, #39	; 0x27
   133d0:	strbcc	r2, [r6, r1]
   133d4:	mov	r1, #0
   133d8:	str	r1, [fp, #-56]	; 0xffffffc8
   133dc:	b	12ee8 <__assert_fail@plt+0x1f2c>
   133e0:	ldr	r5, [fp, #-48]	; 0xffffffd0
   133e4:	b	12ee8 <__assert_fail@plt+0x1f2c>
   133e8:	mov	r4, #0
   133ec:	b	13428 <__assert_fail@plt+0x246c>
   133f0:	mov	r4, #0
   133f4:	cmp	lr, r6
   133f8:	bls	13428 <__assert_fail@plt+0x246c>
   133fc:	ldr	ip, [fp, #-84]	; 0xffffffac
   13400:	ldr	r6, [sp, #44]	; 0x2c
   13404:	ldr	r0, [sp, #24]
   13408:	ldrb	r0, [r0, r6]
   1340c:	cmp	r0, #0
   13410:	beq	13430 <__assert_fail@plt+0x2474>
   13414:	add	r6, r6, #1
   13418:	add	r0, r7, r6
   1341c:	cmp	r0, lr
   13420:	bcc	13404 <__assert_fail@plt+0x2448>
   13424:	b	13430 <__assert_fail@plt+0x2474>
   13428:	ldr	ip, [fp, #-84]	; 0xffffffac
   1342c:	ldr	r6, [sp, #44]	; 0x2c
   13430:	mov	r1, r6
   13434:	ldr	r6, [sp, #80]	; 0x50
   13438:	b	12d90 <__assert_fail@plt+0x1dd4>
   1343c:	mov	lr, r7
   13440:	b	13448 <__assert_fail@plt+0x248c>
   13444:	mvn	lr, #0
   13448:	ldr	r7, [fp, #-64]	; 0xffffffc0
   1344c:	ldr	r1, [fp, #-72]	; 0xffffffb8
   13450:	eor	r0, r7, #2
   13454:	orr	r0, r0, r8
   13458:	clz	r0, r0
   1345c:	lsr	r0, r0, #5
   13460:	tst	r1, r0
   13464:	bne	134f0 <__assert_fail@plt+0x2534>
   13468:	mov	r0, r1
   1346c:	ldr	r1, [fp, #-80]	; 0xffffffb0
   13470:	cmp	r7, #2
   13474:	movwne	r1, #1
   13478:	orr	r0, r0, r1
   1347c:	tst	r0, #1
   13480:	ldreq	r0, [sp, #60]	; 0x3c
   13484:	eoreq	r0, r0, #1
   13488:	tsteq	r0, #1
   1348c:	bne	1359c <__assert_fail@plt+0x25e0>
   13490:	mov	r9, lr
   13494:	tst	r5, #1
   13498:	bne	13558 <__assert_fail@plt+0x259c>
   1349c:	ldr	r6, [sp, #56]	; 0x38
   134a0:	mov	r4, #0
   134a4:	cmp	r6, #0
   134a8:	beq	13594 <__assert_fail@plt+0x25d8>
   134ac:	ldr	r0, [sp, #84]	; 0x54
   134b0:	mov	r1, #0
   134b4:	cmp	sl, #0
   134b8:	mov	r5, #0
   134bc:	str	r1, [fp, #-72]	; 0xffffffb8
   134c0:	beq	12690 <__assert_fail@plt+0x16d4>
   134c4:	b	1359c <__assert_fail@plt+0x25e0>
   134c8:	ldr	r7, [fp, #-64]	; 0xffffffc0
   134cc:	ldr	r2, [sp, #84]	; 0x54
   134d0:	b	134f8 <__assert_fail@plt+0x253c>
   134d4:	ldr	ip, [fp, #-84]	; 0xffffffac
   134d8:	mov	r2, #1
   134dc:	mov	lr, r4
   134e0:	ldr	r7, [fp, #-64]	; 0xffffffc0
   134e4:	b	134f8 <__assert_fail@plt+0x253c>
   134e8:	ldr	r6, [sp, #80]	; 0x50
   134ec:	ldr	ip, [fp, #-84]	; 0xffffffac
   134f0:	ldr	r2, [sp, #84]	; 0x54
   134f4:	mov	r7, #2
   134f8:	mov	r0, #0
   134fc:	ldr	r1, [fp, #12]
   13500:	tst	r2, #1
   13504:	mov	r2, r7
   13508:	mov	r3, lr
   1350c:	str	r0, [sp, #8]
   13510:	ldr	r0, [sp, #72]	; 0x48
   13514:	movwne	r2, #4
   13518:	cmp	r7, #2
   1351c:	movne	r2, r7
   13520:	str	r2, [sp]
   13524:	mov	r2, ip
   13528:	bic	r1, r1, #2
   1352c:	str	r0, [sp, #12]
   13530:	ldr	r0, [sp, #76]	; 0x4c
   13534:	str	r1, [sp, #4]
   13538:	mov	r1, sl
   1353c:	str	r0, [sp, #16]
   13540:	mov	r0, r6
   13544:	bl	12610 <__assert_fail@plt+0x1654>
   13548:	mov	r8, r0
   1354c:	b	135f4 <__assert_fail@plt+0x2638>
   13550:	ldr	r2, [sp, #84]	; 0x54
   13554:	b	134f8 <__assert_fail@plt+0x253c>
   13558:	mov	r0, #5
   1355c:	ldr	r1, [sp, #56]	; 0x38
   13560:	ldr	r2, [fp, #-84]	; 0xffffffac
   13564:	mov	r3, r9
   13568:	str	r0, [sp]
   1356c:	ldr	r0, [fp, #12]
   13570:	str	r0, [sp, #4]
   13574:	ldr	r0, [fp, #16]
   13578:	str	r0, [sp, #8]
   1357c:	ldr	r0, [sp, #72]	; 0x48
   13580:	str	r0, [sp, #12]
   13584:	ldr	r0, [sp, #76]	; 0x4c
   13588:	str	r0, [sp, #16]
   1358c:	ldr	r0, [sp, #80]	; 0x50
   13590:	b	13544 <__assert_fail@plt+0x2588>
   13594:	mov	r0, #0
   13598:	str	r0, [fp, #-72]	; 0xffffffb8
   1359c:	ldr	r1, [sp, #92]	; 0x5c
   135a0:	cmp	r1, #0
   135a4:	beq	135e4 <__assert_fail@plt+0x2628>
   135a8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   135ac:	ldr	r2, [sp, #80]	; 0x50
   135b0:	tst	r0, #1
   135b4:	bne	135e8 <__assert_fail@plt+0x262c>
   135b8:	ldrb	r0, [r1]
   135bc:	cmp	r0, #0
   135c0:	beq	135e8 <__assert_fail@plt+0x262c>
   135c4:	add	r1, r1, #1
   135c8:	cmp	r8, sl
   135cc:	strbcc	r0, [r2, r8]
   135d0:	add	r8, r8, #1
   135d4:	ldrb	r0, [r1], #1
   135d8:	cmp	r0, #0
   135dc:	bne	135c8 <__assert_fail@plt+0x260c>
   135e0:	b	135e8 <__assert_fail@plt+0x262c>
   135e4:	ldr	r2, [sp, #80]	; 0x50
   135e8:	cmp	r8, sl
   135ec:	movcc	r0, #0
   135f0:	strbcc	r0, [r2, r8]
   135f4:	mov	r0, r8
   135f8:	sub	sp, fp, #28
   135fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13600:	mov	r2, #1
   13604:	b	134e0 <__assert_fail@plt+0x2524>
   13608:	ldr	r2, [sp, #84]	; 0x54
   1360c:	mov	r7, #5
   13610:	b	134f8 <__assert_fail@plt+0x253c>
   13614:	bl	10fa4 <abort@plt>
   13618:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1361c:	add	fp, sp, #28
   13620:	sub	sp, sp, #28
   13624:	movw	r5, #24944	; 0x6170
   13628:	cmp	r2, #0
   1362c:	mov	r4, r1
   13630:	mov	r7, r0
   13634:	str	r0, [sp, #20]
   13638:	movt	r5, #2
   1363c:	movne	r5, r2
   13640:	bl	10efc <__errno_location@plt>
   13644:	mov	sl, r0
   13648:	ldm	r5, {r0, r1}
   1364c:	ldr	r2, [r5, #40]	; 0x28
   13650:	ldr	r3, [r5, #44]	; 0x2c
   13654:	add	r9, r5, #8
   13658:	ldr	r6, [sl]
   1365c:	orr	r8, r1, #1
   13660:	mov	r1, #0
   13664:	str	r6, [sp, #24]
   13668:	stm	sp, {r0, r8, r9}
   1366c:	str	r2, [sp, #12]
   13670:	str	r3, [sp, #16]
   13674:	mov	r0, #0
   13678:	mov	r2, r7
   1367c:	mov	r3, r4
   13680:	mov	r6, r4
   13684:	bl	12610 <__assert_fail@plt+0x1654>
   13688:	add	r7, r0, #1
   1368c:	mov	r0, r7
   13690:	bl	14b00 <__assert_fail@plt+0x3b44>
   13694:	mov	r4, r0
   13698:	ldr	r0, [r5]
   1369c:	ldr	r2, [r5, #44]	; 0x2c
   136a0:	ldr	r1, [r5, #40]	; 0x28
   136a4:	mov	r3, r6
   136a8:	stm	sp, {r0, r8, r9}
   136ac:	str	r2, [sp, #16]
   136b0:	str	r1, [sp, #12]
   136b4:	mov	r0, r4
   136b8:	mov	r1, r7
   136bc:	ldr	r2, [sp, #20]
   136c0:	bl	12610 <__assert_fail@plt+0x1654>
   136c4:	ldr	r0, [sp, #24]
   136c8:	str	r0, [sl]
   136cc:	mov	r0, r4
   136d0:	sub	sp, fp, #28
   136d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   136d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   136dc:	add	fp, sp, #28
   136e0:	sub	sp, sp, #36	; 0x24
   136e4:	movw	r8, #24944	; 0x6170
   136e8:	cmp	r3, #0
   136ec:	mov	r4, r2
   136f0:	str	r2, [sp, #24]
   136f4:	mov	r5, r1
   136f8:	mov	r6, r0
   136fc:	str	r0, [sp, #20]
   13700:	movt	r8, #2
   13704:	movne	r8, r3
   13708:	bl	10efc <__errno_location@plt>
   1370c:	str	r0, [sp, #28]
   13710:	cmp	r4, #0
   13714:	add	sl, r8, #8
   13718:	ldm	r8, {r3, r9}
   1371c:	ldr	r7, [r0]
   13720:	ldr	r1, [r8, #40]	; 0x28
   13724:	ldr	r2, [r8, #44]	; 0x2c
   13728:	mov	r0, #0
   1372c:	orreq	r9, r9, #1
   13730:	str	r7, [sp, #32]
   13734:	mov	r7, r5
   13738:	stm	sp, {r3, r9, sl}
   1373c:	str	r1, [sp, #12]
   13740:	str	r2, [sp, #16]
   13744:	mov	r1, #0
   13748:	mov	r2, r6
   1374c:	mov	r3, r5
   13750:	bl	12610 <__assert_fail@plt+0x1654>
   13754:	add	r4, r0, #1
   13758:	mov	r5, r0
   1375c:	mov	r0, r4
   13760:	bl	14b00 <__assert_fail@plt+0x3b44>
   13764:	mov	r6, r0
   13768:	ldr	r0, [r8]
   1376c:	ldr	r2, [r8, #44]	; 0x2c
   13770:	ldr	r1, [r8, #40]	; 0x28
   13774:	mov	r3, r7
   13778:	stm	sp, {r0, r9, sl}
   1377c:	str	r2, [sp, #16]
   13780:	str	r1, [sp, #12]
   13784:	mov	r0, r6
   13788:	mov	r1, r4
   1378c:	ldr	r2, [sp, #20]
   13790:	bl	12610 <__assert_fail@plt+0x1654>
   13794:	ldr	r0, [sp, #24]
   13798:	ldr	r1, [sp, #32]
   1379c:	ldr	r2, [sp, #28]
   137a0:	cmp	r0, #0
   137a4:	str	r1, [r2]
   137a8:	strne	r5, [r0]
   137ac:	mov	r0, r6
   137b0:	sub	sp, fp, #28
   137b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   137b8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   137bc:	add	fp, sp, #24
   137c0:	movw	r5, #24812	; 0x60ec
   137c4:	movw	r8, #24808	; 0x60e8
   137c8:	movt	r5, #2
   137cc:	movt	r8, #2
   137d0:	ldr	r0, [r5]
   137d4:	ldr	r4, [r8]
   137d8:	cmp	r0, #2
   137dc:	blt	13808 <__assert_fail@plt+0x284c>
   137e0:	add	r7, r4, #12
   137e4:	mov	r6, #0
   137e8:	ldr	r0, [r7, r6, lsl #3]
   137ec:	bl	151d0 <__assert_fail@plt+0x4214>
   137f0:	ldr	r1, [r5]
   137f4:	add	r2, r6, #2
   137f8:	add	r0, r6, #1
   137fc:	mov	r6, r0
   13800:	cmp	r2, r1
   13804:	blt	137e8 <__assert_fail@plt+0x282c>
   13808:	ldr	r0, [r4, #4]
   1380c:	movw	r7, #24992	; 0x61a0
   13810:	movt	r7, #2
   13814:	cmp	r0, r7
   13818:	beq	13830 <__assert_fail@plt+0x2874>
   1381c:	bl	151d0 <__assert_fail@plt+0x4214>
   13820:	movw	r0, #24816	; 0x60f0
   13824:	mov	r6, #256	; 0x100
   13828:	movt	r0, #2
   1382c:	strd	r6, [r0]
   13830:	movw	r6, #24816	; 0x60f0
   13834:	movt	r6, #2
   13838:	cmp	r4, r6
   1383c:	beq	1384c <__assert_fail@plt+0x2890>
   13840:	mov	r0, r4
   13844:	bl	151d0 <__assert_fail@plt+0x4214>
   13848:	str	r6, [r8]
   1384c:	mov	r0, #1
   13850:	str	r0, [r5]
   13854:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13858:	movw	r3, #24944	; 0x6170
   1385c:	mvn	r2, #0
   13860:	movt	r3, #2
   13864:	b	13868 <__assert_fail@plt+0x28ac>
   13868:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1386c:	add	fp, sp, #28
   13870:	sub	sp, sp, #44	; 0x2c
   13874:	mov	r7, r3
   13878:	str	r2, [sp, #36]	; 0x24
   1387c:	str	r1, [sp, #32]
   13880:	mov	r5, r0
   13884:	bl	10efc <__errno_location@plt>
   13888:	cmp	r5, #0
   1388c:	blt	139f8 <__assert_fail@plt+0x2a3c>
   13890:	cmn	r5, #-2147483647	; 0x80000001
   13894:	beq	139f8 <__assert_fail@plt+0x2a3c>
   13898:	movw	r8, #24812	; 0x60ec
   1389c:	movw	r4, #24808	; 0x60e8
   138a0:	str	r0, [sp, #28]
   138a4:	ldr	r0, [r0]
   138a8:	movt	r8, #2
   138ac:	movt	r4, #2
   138b0:	ldr	r1, [r8]
   138b4:	ldr	r6, [r4]
   138b8:	str	r0, [sp, #24]
   138bc:	cmp	r1, r5
   138c0:	ble	138cc <__assert_fail@plt+0x2910>
   138c4:	mov	sl, r6
   138c8:	b	13934 <__assert_fail@plt+0x2978>
   138cc:	movw	r9, #24816	; 0x60f0
   138d0:	mov	r0, #8
   138d4:	add	r2, r5, #1
   138d8:	str	r1, [fp, #-32]	; 0xffffffe0
   138dc:	mvn	r3, #-2147483648	; 0x80000000
   138e0:	movt	r9, #2
   138e4:	str	r0, [sp]
   138e8:	sub	r2, r2, r1
   138ec:	sub	r1, fp, #32
   138f0:	subs	r0, r6, r9
   138f4:	movne	r0, r6
   138f8:	bl	14d00 <__assert_fail@plt+0x3d44>
   138fc:	cmp	r6, r9
   13900:	mov	sl, r0
   13904:	str	r0, [r4]
   13908:	ldrdeq	r0, [r9]
   1390c:	stmeq	sl, {r0, r1}
   13910:	ldr	r1, [r8]
   13914:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13918:	add	r0, sl, r1, lsl #3
   1391c:	sub	r1, r2, r1
   13920:	lsl	r2, r1, #3
   13924:	mov	r1, #0
   13928:	bl	10f14 <memset@plt>
   1392c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13930:	str	r0, [r8]
   13934:	mov	r9, sl
   13938:	ldr	r6, [r9, r5, lsl #3]!
   1393c:	ldr	r4, [r9, #4]!
   13940:	ldm	r7, {r0, r1}
   13944:	ldr	r2, [r7, #40]	; 0x28
   13948:	ldr	r3, [r7, #44]	; 0x2c
   1394c:	orr	r8, r1, #1
   13950:	add	r1, r7, #8
   13954:	stm	sp, {r0, r8}
   13958:	add	r0, sp, #8
   1395c:	str	r1, [sp, #20]
   13960:	stm	r0, {r1, r2, r3}
   13964:	mov	r0, r4
   13968:	mov	r1, r6
   1396c:	ldr	r2, [sp, #32]
   13970:	ldr	r3, [sp, #36]	; 0x24
   13974:	bl	12610 <__assert_fail@plt+0x1654>
   13978:	cmp	r6, r0
   1397c:	bhi	139e0 <__assert_fail@plt+0x2a24>
   13980:	add	r6, r0, #1
   13984:	movw	r0, #24992	; 0x61a0
   13988:	movt	r0, #2
   1398c:	str	r6, [sl, r5, lsl #3]
   13990:	cmp	r4, r0
   13994:	beq	139a0 <__assert_fail@plt+0x29e4>
   13998:	mov	r0, r4
   1399c:	bl	151d0 <__assert_fail@plt+0x4214>
   139a0:	mov	r0, r6
   139a4:	bl	14b00 <__assert_fail@plt+0x3b44>
   139a8:	str	r0, [r9]
   139ac:	mov	r4, r0
   139b0:	add	r3, sp, #8
   139b4:	ldr	r0, [r7]
   139b8:	ldr	r1, [r7, #40]	; 0x28
   139bc:	ldr	r2, [r7, #44]	; 0x2c
   139c0:	stm	sp, {r0, r8}
   139c4:	ldr	r0, [sp, #20]
   139c8:	stm	r3, {r0, r1, r2}
   139cc:	mov	r0, r4
   139d0:	mov	r1, r6
   139d4:	ldr	r2, [sp, #32]
   139d8:	ldr	r3, [sp, #36]	; 0x24
   139dc:	bl	12610 <__assert_fail@plt+0x1654>
   139e0:	ldr	r0, [sp, #28]
   139e4:	ldr	r1, [sp, #24]
   139e8:	str	r1, [r0]
   139ec:	mov	r0, r4
   139f0:	sub	sp, fp, #28
   139f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   139f8:	bl	10fa4 <abort@plt>
   139fc:	movw	r3, #24944	; 0x6170
   13a00:	movt	r3, #2
   13a04:	b	13868 <__assert_fail@plt+0x28ac>
   13a08:	movw	r3, #24944	; 0x6170
   13a0c:	mov	r1, r0
   13a10:	mov	r0, #0
   13a14:	mvn	r2, #0
   13a18:	movt	r3, #2
   13a1c:	b	13868 <__assert_fail@plt+0x28ac>
   13a20:	movw	r3, #24944	; 0x6170
   13a24:	mov	r2, r1
   13a28:	mov	r1, r0
   13a2c:	mov	r0, #0
   13a30:	movt	r3, #2
   13a34:	b	13868 <__assert_fail@plt+0x28ac>
   13a38:	push	{fp, lr}
   13a3c:	mov	fp, sp
   13a40:	sub	sp, sp, #48	; 0x30
   13a44:	vmov.i32	q8, #0	; 0x00000000
   13a48:	mov	ip, #32
   13a4c:	mov	r3, sp
   13a50:	mov	lr, r2
   13a54:	cmp	r1, #10
   13a58:	add	r2, r3, #16
   13a5c:	vst1.64	{d16-d17}, [r3], ip
   13a60:	vst1.64	{d16-d17}, [r3]
   13a64:	vst1.64	{d16-d17}, [r2]
   13a68:	beq	13a88 <__assert_fail@plt+0x2acc>
   13a6c:	str	r1, [sp]
   13a70:	mov	r3, sp
   13a74:	mov	r1, lr
   13a78:	mvn	r2, #0
   13a7c:	bl	13868 <__assert_fail@plt+0x28ac>
   13a80:	mov	sp, fp
   13a84:	pop	{fp, pc}
   13a88:	bl	10fa4 <abort@plt>
   13a8c:	push	{r4, sl, fp, lr}
   13a90:	add	fp, sp, #8
   13a94:	sub	sp, sp, #48	; 0x30
   13a98:	mov	ip, r3
   13a9c:	mov	r3, sp
   13aa0:	vmov.i32	q8, #0	; 0x00000000
   13aa4:	mov	lr, #32
   13aa8:	cmp	r1, #10
   13aac:	add	r4, r3, #16
   13ab0:	vst1.64	{d16-d17}, [r3], lr
   13ab4:	vst1.64	{d16-d17}, [r3]
   13ab8:	vst1.64	{d16-d17}, [r4]
   13abc:	beq	13adc <__assert_fail@plt+0x2b20>
   13ac0:	str	r1, [sp]
   13ac4:	mov	r1, r2
   13ac8:	mov	r3, sp
   13acc:	mov	r2, ip
   13ad0:	bl	13868 <__assert_fail@plt+0x28ac>
   13ad4:	sub	sp, fp, #8
   13ad8:	pop	{r4, sl, fp, pc}
   13adc:	bl	10fa4 <abort@plt>
   13ae0:	push	{fp, lr}
   13ae4:	mov	fp, sp
   13ae8:	sub	sp, sp, #48	; 0x30
   13aec:	mov	r3, sp
   13af0:	vmov.i32	q8, #0	; 0x00000000
   13af4:	mov	ip, #32
   13af8:	cmp	r0, #10
   13afc:	add	r2, r3, #16
   13b00:	vst1.64	{d16-d17}, [r3], ip
   13b04:	vst1.64	{d16-d17}, [r3]
   13b08:	vst1.64	{d16-d17}, [r2]
   13b0c:	beq	13b2c <__assert_fail@plt+0x2b70>
   13b10:	str	r0, [sp]
   13b14:	mov	r3, sp
   13b18:	mov	r0, #0
   13b1c:	mvn	r2, #0
   13b20:	bl	13868 <__assert_fail@plt+0x28ac>
   13b24:	mov	sp, fp
   13b28:	pop	{fp, pc}
   13b2c:	bl	10fa4 <abort@plt>
   13b30:	push	{fp, lr}
   13b34:	mov	fp, sp
   13b38:	sub	sp, sp, #48	; 0x30
   13b3c:	mov	r3, sp
   13b40:	vmov.i32	q8, #0	; 0x00000000
   13b44:	mov	ip, #32
   13b48:	cmp	r0, #10
   13b4c:	add	lr, r3, #16
   13b50:	vst1.64	{d16-d17}, [r3], ip
   13b54:	vst1.64	{d16-d17}, [r3]
   13b58:	vst1.64	{d16-d17}, [lr]
   13b5c:	beq	13b78 <__assert_fail@plt+0x2bbc>
   13b60:	str	r0, [sp]
   13b64:	mov	r3, sp
   13b68:	mov	r0, #0
   13b6c:	bl	13868 <__assert_fail@plt+0x28ac>
   13b70:	mov	sp, fp
   13b74:	pop	{fp, pc}
   13b78:	bl	10fa4 <abort@plt>
   13b7c:	push	{r4, sl, fp, lr}
   13b80:	add	fp, sp, #8
   13b84:	sub	sp, sp, #48	; 0x30
   13b88:	mov	lr, r0
   13b8c:	movw	r0, #24944	; 0x6170
   13b90:	mov	r3, #32
   13b94:	mov	ip, r1
   13b98:	mov	r4, #1
   13b9c:	movt	r0, #2
   13ba0:	add	r1, r0, #16
   13ba4:	vld1.64	{d16-d17}, [r0], r3
   13ba8:	mov	r3, sp
   13bac:	vld1.64	{d18-d19}, [r1]
   13bb0:	add	r1, r3, #16
   13bb4:	vld1.64	{d20-d21}, [r0]
   13bb8:	add	r0, r3, #32
   13bbc:	vst1.64	{d18-d19}, [r1]
   13bc0:	mov	r1, r3
   13bc4:	vst1.64	{d20-d21}, [r0]
   13bc8:	mov	r0, #28
   13bcc:	and	r0, r0, r2, lsr #3
   13bd0:	and	r2, r2, #31
   13bd4:	vst1.64	{d16-d17}, [r1], r0
   13bd8:	ldr	r0, [r1, #8]
   13bdc:	bic	r4, r4, r0, lsr r2
   13be0:	eor	r0, r0, r4, lsl r2
   13be4:	mov	r2, ip
   13be8:	str	r0, [r1, #8]
   13bec:	mov	r0, #0
   13bf0:	mov	r1, lr
   13bf4:	bl	13868 <__assert_fail@plt+0x28ac>
   13bf8:	sub	sp, fp, #8
   13bfc:	pop	{r4, sl, fp, pc}
   13c00:	push	{fp, lr}
   13c04:	mov	fp, sp
   13c08:	sub	sp, sp, #48	; 0x30
   13c0c:	mov	ip, r0
   13c10:	movw	r0, #24944	; 0x6170
   13c14:	mov	r3, #32
   13c18:	movt	r0, #2
   13c1c:	add	r2, r0, #16
   13c20:	vld1.64	{d16-d17}, [r0], r3
   13c24:	mov	r3, sp
   13c28:	vld1.64	{d18-d19}, [r2]
   13c2c:	add	r2, r3, #16
   13c30:	vld1.64	{d20-d21}, [r0]
   13c34:	add	r0, r3, #32
   13c38:	vst1.64	{d18-d19}, [r2]
   13c3c:	mov	r2, r3
   13c40:	vst1.64	{d20-d21}, [r0]
   13c44:	mov	r0, #28
   13c48:	and	r0, r0, r1, lsr #3
   13c4c:	and	r1, r1, #31
   13c50:	vst1.64	{d16-d17}, [r2], r0
   13c54:	mov	r0, #1
   13c58:	ldr	lr, [r2, #8]
   13c5c:	bic	r0, r0, lr, lsr r1
   13c60:	eor	r0, lr, r0, lsl r1
   13c64:	mov	r1, ip
   13c68:	str	r0, [r2, #8]
   13c6c:	mov	r0, #0
   13c70:	mvn	r2, #0
   13c74:	bl	13868 <__assert_fail@plt+0x28ac>
   13c78:	mov	sp, fp
   13c7c:	pop	{fp, pc}
   13c80:	push	{fp, lr}
   13c84:	mov	fp, sp
   13c88:	sub	sp, sp, #48	; 0x30
   13c8c:	movw	r2, #24944	; 0x6170
   13c90:	mov	r3, #32
   13c94:	mov	r1, r0
   13c98:	movt	r2, #2
   13c9c:	add	r0, r2, #16
   13ca0:	vld1.64	{d16-d17}, [r2], r3
   13ca4:	mov	r3, sp
   13ca8:	vld1.64	{d18-d19}, [r0]
   13cac:	add	r0, r3, #16
   13cb0:	vld1.64	{d20-d21}, [r2]
   13cb4:	mov	r2, r3
   13cb8:	vst1.64	{d18-d19}, [r0]
   13cbc:	add	r0, r3, #32
   13cc0:	vst1.64	{d20-d21}, [r0]
   13cc4:	mov	r0, #12
   13cc8:	vst1.64	{d16-d17}, [r2], r0
   13ccc:	ldr	r0, [r2]
   13cd0:	orr	r0, r0, #67108864	; 0x4000000
   13cd4:	str	r0, [r2]
   13cd8:	mov	r0, #0
   13cdc:	mvn	r2, #0
   13ce0:	bl	13868 <__assert_fail@plt+0x28ac>
   13ce4:	mov	sp, fp
   13ce8:	pop	{fp, pc}
   13cec:	push	{fp, lr}
   13cf0:	mov	fp, sp
   13cf4:	sub	sp, sp, #48	; 0x30
   13cf8:	mov	ip, r1
   13cfc:	mov	r1, r0
   13d00:	movw	r0, #24944	; 0x6170
   13d04:	mov	r3, #32
   13d08:	movt	r0, #2
   13d0c:	add	r2, r0, #16
   13d10:	vld1.64	{d16-d17}, [r0], r3
   13d14:	mov	r3, sp
   13d18:	vld1.64	{d18-d19}, [r2]
   13d1c:	add	r2, r3, #16
   13d20:	vld1.64	{d20-d21}, [r0]
   13d24:	add	r0, r3, #32
   13d28:	vst1.64	{d18-d19}, [r2]
   13d2c:	mov	r2, r3
   13d30:	vst1.64	{d20-d21}, [r0]
   13d34:	mov	r0, #12
   13d38:	vst1.64	{d16-d17}, [r2], r0
   13d3c:	ldr	r0, [r2]
   13d40:	orr	r0, r0, #67108864	; 0x4000000
   13d44:	str	r0, [r2]
   13d48:	mov	r0, #0
   13d4c:	mov	r2, ip
   13d50:	bl	13868 <__assert_fail@plt+0x28ac>
   13d54:	mov	sp, fp
   13d58:	pop	{fp, pc}
   13d5c:	push	{r4, sl, fp, lr}
   13d60:	add	fp, sp, #8
   13d64:	sub	sp, sp, #96	; 0x60
   13d68:	mov	ip, r2
   13d6c:	mov	r2, sp
   13d70:	vmov.i32	q8, #0	; 0x00000000
   13d74:	mov	r4, #28
   13d78:	cmp	r1, #10
   13d7c:	mov	r3, r2
   13d80:	add	lr, r2, #16
   13d84:	vst1.64	{d16-d17}, [r3], r4
   13d88:	vst1.64	{d16-d17}, [lr]
   13d8c:	vst1.32	{d16-d17}, [r3]
   13d90:	beq	13de0 <__assert_fail@plt+0x2e24>
   13d94:	vld1.64	{d16-d17}, [r2], r4
   13d98:	vld1.64	{d18-d19}, [lr]
   13d9c:	add	r3, sp, #48	; 0x30
   13da0:	add	r4, r3, #4
   13da4:	vld1.32	{d20-d21}, [r2]
   13da8:	add	r2, r3, #20
   13dac:	vst1.32	{d16-d17}, [r4]
   13db0:	vst1.32	{d18-d19}, [r2]
   13db4:	add	r2, r3, #32
   13db8:	vst1.32	{d20-d21}, [r2]
   13dbc:	str	r1, [sp, #48]	; 0x30
   13dc0:	mvn	r2, #0
   13dc4:	ldr	r1, [sp, #60]	; 0x3c
   13dc8:	orr	r1, r1, #67108864	; 0x4000000
   13dcc:	str	r1, [sp, #60]	; 0x3c
   13dd0:	mov	r1, ip
   13dd4:	bl	13868 <__assert_fail@plt+0x28ac>
   13dd8:	sub	sp, fp, #8
   13ddc:	pop	{r4, sl, fp, pc}
   13de0:	bl	10fa4 <abort@plt>
   13de4:	push	{r4, r5, fp, lr}
   13de8:	add	fp, sp, #8
   13dec:	sub	sp, sp, #48	; 0x30
   13df0:	mov	ip, r3
   13df4:	movw	r3, #24944	; 0x6170
   13df8:	mov	lr, #32
   13dfc:	cmp	r1, #0
   13e00:	mov	r5, sp
   13e04:	movt	r3, #2
   13e08:	cmpne	r2, #0
   13e0c:	add	r4, r3, #16
   13e10:	vld1.64	{d16-d17}, [r3], lr
   13e14:	vld1.64	{d18-d19}, [r4]
   13e18:	add	r4, r5, #16
   13e1c:	vld1.64	{d20-d21}, [r3]
   13e20:	vst1.64	{d16-d17}, [r5], lr
   13e24:	mov	r3, #10
   13e28:	vst1.64	{d18-d19}, [r4]
   13e2c:	vst1.64	{d20-d21}, [r5]
   13e30:	str	r3, [sp]
   13e34:	bne	13e3c <__assert_fail@plt+0x2e80>
   13e38:	bl	10fa4 <abort@plt>
   13e3c:	str	r2, [sp, #44]	; 0x2c
   13e40:	str	r1, [sp, #40]	; 0x28
   13e44:	mov	r3, sp
   13e48:	mov	r1, ip
   13e4c:	mvn	r2, #0
   13e50:	bl	13868 <__assert_fail@plt+0x28ac>
   13e54:	sub	sp, fp, #8
   13e58:	pop	{r4, r5, fp, pc}
   13e5c:	push	{r4, r5, fp, lr}
   13e60:	add	fp, sp, #8
   13e64:	sub	sp, sp, #48	; 0x30
   13e68:	mov	lr, r3
   13e6c:	movw	r3, #24944	; 0x6170
   13e70:	mov	ip, #32
   13e74:	cmp	r1, #0
   13e78:	mov	r5, sp
   13e7c:	movt	r3, #2
   13e80:	cmpne	r2, #0
   13e84:	add	r4, r3, #16
   13e88:	vld1.64	{d16-d17}, [r3], ip
   13e8c:	vld1.64	{d18-d19}, [r4]
   13e90:	add	r4, r5, #16
   13e94:	vld1.64	{d20-d21}, [r3]
   13e98:	vst1.64	{d16-d17}, [r5], ip
   13e9c:	mov	r3, #10
   13ea0:	vst1.64	{d18-d19}, [r4]
   13ea4:	vst1.64	{d20-d21}, [r5]
   13ea8:	str	r3, [sp]
   13eac:	bne	13eb4 <__assert_fail@plt+0x2ef8>
   13eb0:	bl	10fa4 <abort@plt>
   13eb4:	ldr	ip, [fp, #8]
   13eb8:	str	r2, [sp, #44]	; 0x2c
   13ebc:	str	r1, [sp, #40]	; 0x28
   13ec0:	mov	r3, sp
   13ec4:	mov	r1, lr
   13ec8:	mov	r2, ip
   13ecc:	bl	13868 <__assert_fail@plt+0x28ac>
   13ed0:	sub	sp, fp, #8
   13ed4:	pop	{r4, r5, fp, pc}
   13ed8:	push	{r4, sl, fp, lr}
   13edc:	add	fp, sp, #8
   13ee0:	sub	sp, sp, #48	; 0x30
   13ee4:	mov	ip, r2
   13ee8:	movw	r2, #24944	; 0x6170
   13eec:	mov	lr, #32
   13ef0:	cmp	r0, #0
   13ef4:	mov	r4, sp
   13ef8:	movt	r2, #2
   13efc:	cmpne	r1, #0
   13f00:	add	r3, r2, #16
   13f04:	vld1.64	{d16-d17}, [r2], lr
   13f08:	vld1.64	{d18-d19}, [r3]
   13f0c:	add	r3, r4, #16
   13f10:	vld1.64	{d20-d21}, [r2]
   13f14:	vst1.64	{d16-d17}, [r4], lr
   13f18:	mov	r2, #10
   13f1c:	vst1.64	{d18-d19}, [r3]
   13f20:	vst1.64	{d20-d21}, [r4]
   13f24:	str	r2, [sp]
   13f28:	bne	13f30 <__assert_fail@plt+0x2f74>
   13f2c:	bl	10fa4 <abort@plt>
   13f30:	str	r1, [sp, #44]	; 0x2c
   13f34:	str	r0, [sp, #40]	; 0x28
   13f38:	mov	r3, sp
   13f3c:	mov	r0, #0
   13f40:	mov	r1, ip
   13f44:	mvn	r2, #0
   13f48:	bl	13868 <__assert_fail@plt+0x28ac>
   13f4c:	sub	sp, fp, #8
   13f50:	pop	{r4, sl, fp, pc}
   13f54:	push	{r4, r5, fp, lr}
   13f58:	add	fp, sp, #8
   13f5c:	sub	sp, sp, #48	; 0x30
   13f60:	mov	lr, r2
   13f64:	movw	r2, #24944	; 0x6170
   13f68:	mov	ip, r3
   13f6c:	mov	r3, #32
   13f70:	cmp	r0, #0
   13f74:	mov	r5, sp
   13f78:	movt	r2, #2
   13f7c:	cmpne	r1, #0
   13f80:	add	r4, r2, #16
   13f84:	vld1.64	{d16-d17}, [r2], r3
   13f88:	vld1.64	{d18-d19}, [r4]
   13f8c:	add	r4, r5, #16
   13f90:	vld1.64	{d20-d21}, [r2]
   13f94:	vst1.64	{d16-d17}, [r5], r3
   13f98:	mov	r2, #10
   13f9c:	vst1.64	{d18-d19}, [r4]
   13fa0:	vst1.64	{d20-d21}, [r5]
   13fa4:	str	r2, [sp]
   13fa8:	bne	13fb0 <__assert_fail@plt+0x2ff4>
   13fac:	bl	10fa4 <abort@plt>
   13fb0:	str	r1, [sp, #44]	; 0x2c
   13fb4:	str	r0, [sp, #40]	; 0x28
   13fb8:	mov	r3, sp
   13fbc:	mov	r0, #0
   13fc0:	mov	r1, lr
   13fc4:	mov	r2, ip
   13fc8:	bl	13868 <__assert_fail@plt+0x28ac>
   13fcc:	sub	sp, fp, #8
   13fd0:	pop	{r4, r5, fp, pc}
   13fd4:	movw	r3, #24824	; 0x60f8
   13fd8:	movt	r3, #2
   13fdc:	b	13868 <__assert_fail@plt+0x28ac>
   13fe0:	movw	r3, #24824	; 0x60f8
   13fe4:	mov	r2, r1
   13fe8:	mov	r1, r0
   13fec:	mov	r0, #0
   13ff0:	movt	r3, #2
   13ff4:	b	13868 <__assert_fail@plt+0x28ac>
   13ff8:	movw	r3, #24824	; 0x60f8
   13ffc:	mvn	r2, #0
   14000:	movt	r3, #2
   14004:	b	13868 <__assert_fail@plt+0x28ac>
   14008:	movw	r3, #24824	; 0x60f8
   1400c:	mov	r1, r0
   14010:	mov	r0, #0
   14014:	mvn	r2, #0
   14018:	movt	r3, #2
   1401c:	b	13868 <__assert_fail@plt+0x28ac>
   14020:	push	{r4, r5, fp, lr}
   14024:	add	fp, sp, #8
   14028:	mov	r5, r0
   1402c:	mov	r4, r1
   14030:	mov	r0, #0
   14034:	mov	r2, #5
   14038:	mov	r1, r5
   1403c:	bl	10df4 <dcgettext@plt>
   14040:	cmp	r0, r5
   14044:	popne	{r4, r5, fp, pc}
   14048:	bl	151f8 <__assert_fail@plt+0x423c>
   1404c:	ldrb	r1, [r0]
   14050:	and	r1, r1, #223	; 0xdf
   14054:	cmp	r1, #71	; 0x47
   14058:	beq	140c0 <__assert_fail@plt+0x3104>
   1405c:	cmp	r1, #85	; 0x55
   14060:	bne	140e4 <__assert_fail@plt+0x3128>
   14064:	ldrb	r1, [r0, #1]
   14068:	and	r1, r1, #223	; 0xdf
   1406c:	cmp	r1, #84	; 0x54
   14070:	bne	140e4 <__assert_fail@plt+0x3128>
   14074:	ldrb	r1, [r0, #2]
   14078:	and	r1, r1, #223	; 0xdf
   1407c:	cmp	r1, #70	; 0x46
   14080:	ldrbeq	r1, [r0, #3]
   14084:	cmpeq	r1, #45	; 0x2d
   14088:	bne	140e4 <__assert_fail@plt+0x3128>
   1408c:	ldrb	r1, [r0, #4]
   14090:	cmp	r1, #56	; 0x38
   14094:	ldrbeq	r0, [r0, #5]
   14098:	cmpeq	r0, #0
   1409c:	bne	140e4 <__assert_fail@plt+0x3128>
   140a0:	ldrb	r1, [r5]
   140a4:	movw	r2, #22890	; 0x596a
   140a8:	movw	r0, #22894	; 0x596e
   140ac:	movt	r2, #1
   140b0:	movt	r0, #1
   140b4:	cmp	r1, #96	; 0x60
   140b8:	moveq	r0, r2
   140bc:	pop	{r4, r5, fp, pc}
   140c0:	ldrb	r1, [r0, #1]
   140c4:	and	r1, r1, #223	; 0xdf
   140c8:	cmp	r1, #66	; 0x42
   140cc:	bne	140e4 <__assert_fail@plt+0x3128>
   140d0:	ldrb	r1, [r0, #2]
   140d4:	cmp	r1, #49	; 0x31
   140d8:	ldrbeq	r1, [r0, #3]
   140dc:	cmpeq	r1, #56	; 0x38
   140e0:	beq	14100 <__assert_fail@plt+0x3144>
   140e4:	movw	r1, #22884	; 0x5964
   140e8:	movw	r0, #22888	; 0x5968
   140ec:	cmp	r4, #9
   140f0:	movt	r1, #1
   140f4:	movt	r0, #1
   140f8:	moveq	r0, r1
   140fc:	pop	{r4, r5, fp, pc}
   14100:	ldrb	r1, [r0, #4]
   14104:	cmp	r1, #48	; 0x30
   14108:	ldrbeq	r1, [r0, #5]
   1410c:	cmpeq	r1, #51	; 0x33
   14110:	bne	140e4 <__assert_fail@plt+0x3128>
   14114:	ldrb	r1, [r0, #6]
   14118:	cmp	r1, #48	; 0x30
   1411c:	ldrbeq	r0, [r0, #7]
   14120:	cmpeq	r0, #0
   14124:	bne	140e4 <__assert_fail@plt+0x3128>
   14128:	ldrb	r1, [r5]
   1412c:	movw	r2, #22898	; 0x5972
   14130:	movw	r0, #22902	; 0x5976
   14134:	movt	r2, #1
   14138:	movt	r0, #1
   1413c:	b	140b4 <__assert_fail@plt+0x30f8>
   14140:	mov	r1, #0
   14144:	str	r1, [r0]
   14148:	str	r1, [r0, #4]
   1414c:	bx	lr
   14150:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14154:	add	fp, sp, #28
   14158:	sub	sp, sp, #52	; 0x34
   1415c:	add	sl, sp, #16
   14160:	mov	r5, r0
   14164:	vmov.i32	q8, #0	; 0x00000000
   14168:	mov	r8, r3
   1416c:	cmp	r2, #0
   14170:	mov	r0, sl
   14174:	vst1.64	{d16-d17}, [r0]!
   14178:	vst1.64	{d16-d17}, [r0]
   1417c:	beq	141a4 <__assert_fail@plt+0x31e8>
   14180:	mov	r0, #1
   14184:	ldrb	r3, [r1], #1
   14188:	subs	r2, r2, #1
   1418c:	ubfx	r7, r3, #5, #3
   14190:	and	r3, r3, #31
   14194:	ldr	r6, [sl, r7, lsl #2]
   14198:	orr	r3, r6, r0, lsl r3
   1419c:	str	r3, [sl, r7, lsl #2]
   141a0:	bne	14184 <__assert_fail@plt+0x31c8>
   141a4:	ldmib	r5, {r0, r1}
   141a8:	cmp	r0, r1
   141ac:	bcs	14210 <__assert_fail@plt+0x3254>
   141b0:	add	r1, r0, #1
   141b4:	str	r1, [r5, #4]
   141b8:	ldrb	r6, [r0]
   141bc:	mov	r4, #1
   141c0:	lsr	r0, r6, #5
   141c4:	and	r1, r6, #31
   141c8:	ldr	r0, [sl, r0, lsl #2]
   141cc:	tst	r0, r4, lsl r1
   141d0:	beq	14224 <__assert_fail@plt+0x3268>
   141d4:	ldmib	r5, {r0, r1}
   141d8:	cmp	r0, r1
   141dc:	bcs	141f8 <__assert_fail@plt+0x323c>
   141e0:	add	r1, r0, #1
   141e4:	str	r1, [r5, #4]
   141e8:	ldrb	r6, [r0]
   141ec:	cmn	r6, #1
   141f0:	bgt	141c0 <__assert_fail@plt+0x3204>
   141f4:	b	14224 <__assert_fail@plt+0x3268>
   141f8:	mov	r0, r5
   141fc:	bl	10f5c <__uflow@plt>
   14200:	mov	r6, r0
   14204:	cmn	r6, #1
   14208:	bgt	141c0 <__assert_fail@plt+0x3204>
   1420c:	b	14224 <__assert_fail@plt+0x3268>
   14210:	mov	r0, r5
   14214:	bl	10f5c <__uflow@plt>
   14218:	mov	r6, r0
   1421c:	cmp	r0, #0
   14220:	bge	141bc <__assert_fail@plt+0x3200>
   14224:	ldm	r8, {r0, r7}
   14228:	cmp	r6, #0
   1422c:	str	r0, [sp, #12]
   14230:	blt	142e0 <__assert_fail@plt+0x3324>
   14234:	str	r8, [sp, #8]
   14238:	mov	r9, #0
   1423c:	mov	r8, #1
   14240:	mov	r4, #0
   14244:	cmp	r4, r0
   14248:	bne	14280 <__assert_fail@plt+0x32c4>
   1424c:	b	14264 <__assert_fail@plt+0x32a8>
   14250:	ldr	r0, [sp, #12]
   14254:	add	r4, r4, #1
   14258:	lsr	r9, r6, #31
   1425c:	cmp	r4, r0
   14260:	bne	14280 <__assert_fail@plt+0x32c4>
   14264:	mov	r0, r7
   14268:	add	r1, sp, #12
   1426c:	mov	r2, #1
   14270:	mvn	r3, #0
   14274:	str	r8, [sp]
   14278:	bl	14d00 <__assert_fail@plt+0x3d44>
   1427c:	mov	r7, r0
   14280:	tst	r9, #1
   14284:	lsreq	r0, r6, #5
   14288:	andeq	r1, r6, #31
   1428c:	ldreq	r0, [sl, r0, lsl #2]
   14290:	tsteq	r0, r8, lsl r1
   14294:	bne	142c8 <__assert_fail@plt+0x330c>
   14298:	strb	r6, [r7, r4]
   1429c:	ldmib	r5, {r0, r1}
   142a0:	cmp	r0, r1
   142a4:	bcs	142b8 <__assert_fail@plt+0x32fc>
   142a8:	add	r1, r0, #1
   142ac:	str	r1, [r5, #4]
   142b0:	ldrb	r6, [r0]
   142b4:	b	14250 <__assert_fail@plt+0x3294>
   142b8:	mov	r0, r5
   142bc:	bl	10f5c <__uflow@plt>
   142c0:	mov	r6, r0
   142c4:	b	14250 <__assert_fail@plt+0x3294>
   142c8:	mov	r0, #0
   142cc:	ldr	r1, [sp, #8]
   142d0:	strb	r0, [r7, r4]
   142d4:	ldr	r0, [sp, #12]
   142d8:	stm	r1, {r0, r7}
   142dc:	b	142e4 <__assert_fail@plt+0x3328>
   142e0:	mvn	r4, #0
   142e4:	mov	r0, r4
   142e8:	sub	sp, fp, #28
   142ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   142f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   142f4:	add	fp, sp, #28
   142f8:	sub	sp, sp, #28
   142fc:	add	r4, r1, #1
   14300:	cmp	r1, #0
   14304:	mov	r7, r0
   14308:	mov	r1, #4
   1430c:	str	r3, [sp, #12]
   14310:	str	r2, [sp, #8]
   14314:	movweq	r4, #64	; 0x40
   14318:	mov	r0, r4
   1431c:	str	r4, [sp, #16]
   14320:	bl	14ba0 <__assert_fail@plt+0x3be4>
   14324:	mov	r6, r0
   14328:	mov	r0, r4
   1432c:	mov	r1, #4
   14330:	bl	14ba0 <__assert_fail@plt+0x3be4>
   14334:	mov	r4, #0
   14338:	mov	r5, r0
   1433c:	str	r4, [sp, #20]
   14340:	str	r4, [sp, #24]
   14344:	b	14374 <__assert_fail@plt+0x33b8>
   14348:	add	r8, sl, #1
   1434c:	mov	r1, #1
   14350:	mov	r0, r8
   14354:	bl	14ba0 <__assert_fail@plt+0x3be4>
   14358:	str	sl, [r5, r4, lsl #2]
   1435c:	mov	r2, r8
   14360:	mov	r9, r0
   14364:	ldr	r1, [sp, #24]
   14368:	bl	10dd0 <memcpy@plt>
   1436c:	str	r9, [r6, r4, lsl #2]
   14370:	add	r4, r4, #1
   14374:	ldr	r1, [sp, #8]
   14378:	ldr	r2, [sp, #12]
   1437c:	mov	r0, r7
   14380:	add	r3, sp, #20
   14384:	bl	14150 <__assert_fail@plt+0x3194>
   14388:	mov	sl, r0
   1438c:	ldr	r0, [sp, #16]
   14390:	cmp	r4, r0
   14394:	blt	143cc <__assert_fail@plt+0x3410>
   14398:	mov	r0, #4
   1439c:	add	r1, sp, #16
   143a0:	mov	r2, #1
   143a4:	mvn	r3, #0
   143a8:	str	r0, [sp]
   143ac:	mov	r0, r6
   143b0:	bl	14d00 <__assert_fail@plt+0x3d44>
   143b4:	ldr	r1, [sp, #16]
   143b8:	mov	r6, r0
   143bc:	mov	r0, r5
   143c0:	mov	r2, #4
   143c4:	bl	14a94 <__assert_fail@plt+0x3ad8>
   143c8:	mov	r5, r0
   143cc:	cmn	sl, #1
   143d0:	bne	14348 <__assert_fail@plt+0x338c>
   143d4:	mov	r0, #0
   143d8:	str	r0, [r6, r4, lsl #2]
   143dc:	str	r0, [r5, r4, lsl #2]
   143e0:	ldr	r0, [sp, #24]
   143e4:	bl	151d0 <__assert_fail@plt+0x4214>
   143e8:	ldr	r0, [fp, #8]
   143ec:	str	r6, [r0]
   143f0:	ldr	r0, [fp, #12]
   143f4:	cmp	r0, #0
   143f8:	beq	14404 <__assert_fail@plt+0x3448>
   143fc:	str	r5, [r0]
   14400:	b	1440c <__assert_fail@plt+0x3450>
   14404:	mov	r0, r5
   14408:	bl	151d0 <__assert_fail@plt+0x4214>
   1440c:	mov	r0, r4
   14410:	sub	sp, fp, #28
   14414:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14418:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1441c:	add	fp, sp, #24
   14420:	sub	sp, sp, #32
   14424:	ldr	r6, [fp, #12]
   14428:	ldr	r7, [fp, #8]
   1442c:	mov	r4, r2
   14430:	mov	r8, r0
   14434:	cmp	r1, #0
   14438:	beq	14460 <__assert_fail@plt+0x34a4>
   1443c:	movw	r2, #22992	; 0x59d0
   14440:	mov	r5, r1
   14444:	str	r3, [sp, #4]
   14448:	str	r4, [sp]
   1444c:	mov	r0, r8
   14450:	mov	r1, #1
   14454:	movt	r2, #1
   14458:	mov	r3, r5
   1445c:	b	14478 <__assert_fail@plt+0x34bc>
   14460:	movw	r2, #23004	; 0x59dc
   14464:	str	r3, [sp]
   14468:	mov	r0, r8
   1446c:	mov	r1, #1
   14470:	mov	r3, r4
   14474:	movt	r2, #1
   14478:	bl	10f38 <__fprintf_chk@plt>
   1447c:	movw	r1, #23011	; 0x59e3
   14480:	mov	r0, #0
   14484:	mov	r2, #5
   14488:	movt	r1, #1
   1448c:	bl	10df4 <dcgettext@plt>
   14490:	movw	r2, #23729	; 0x5cb1
   14494:	mov	r3, r0
   14498:	movw	r0, #2022	; 0x7e6
   1449c:	mov	r1, #1
   144a0:	str	r0, [sp]
   144a4:	movt	r2, #1
   144a8:	mov	r0, r8
   144ac:	bl	10f38 <__fprintf_chk@plt>
   144b0:	movw	r4, #22278	; 0x5706
   144b4:	mov	r1, r8
   144b8:	movt	r4, #1
   144bc:	mov	r0, r4
   144c0:	bl	10d88 <fputs_unlocked@plt>
   144c4:	movw	r1, #23015	; 0x59e7
   144c8:	mov	r0, #0
   144cc:	mov	r2, #5
   144d0:	movt	r1, #1
   144d4:	bl	10df4 <dcgettext@plt>
   144d8:	movw	r3, #23186	; 0x5a92
   144dc:	mov	r2, r0
   144e0:	mov	r0, r8
   144e4:	mov	r1, #1
   144e8:	movt	r3, #1
   144ec:	bl	10f38 <__fprintf_chk@plt>
   144f0:	mov	r0, r4
   144f4:	mov	r1, r8
   144f8:	bl	10d88 <fputs_unlocked@plt>
   144fc:	cmp	r6, #9
   14500:	bhi	1453c <__assert_fail@plt+0x3580>
   14504:	add	r0, pc, #0
   14508:	ldr	pc, [r0, r6, lsl #2]
   1450c:	andeq	r4, r1, r4, lsr r5
   14510:	andeq	r4, r1, r8, asr #10
   14514:	andeq	r4, r1, r8, ror r5
   14518:	andeq	r4, r1, r0, lsr #11
   1451c:	andeq	r4, r1, r8, asr #11
   14520:	strdeq	r4, [r1], -r0
   14524:	andeq	r4, r1, r8, lsl r6
   14528:	andeq	r4, r1, r0, asr r6
   1452c:	strdeq	r4, [r1], -r0
   14530:	muleq	r1, r8, r6
   14534:	sub	sp, fp, #24
   14538:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1453c:	movw	r1, #23539	; 0x5bf3
   14540:	movt	r1, #1
   14544:	b	146a0 <__assert_fail@plt+0x36e4>
   14548:	movw	r1, #23220	; 0x5ab4
   1454c:	mov	r0, #0
   14550:	mov	r2, #5
   14554:	movt	r1, #1
   14558:	bl	10df4 <dcgettext@plt>
   1455c:	ldr	r3, [r7]
   14560:	mov	r2, r0
   14564:	mov	r0, r8
   14568:	mov	r1, #1
   1456c:	sub	sp, fp, #24
   14570:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   14574:	b	10f38 <__fprintf_chk@plt>
   14578:	movw	r1, #23236	; 0x5ac4
   1457c:	mov	r0, #0
   14580:	mov	r2, #5
   14584:	movt	r1, #1
   14588:	bl	10df4 <dcgettext@plt>
   1458c:	mov	r2, r0
   14590:	ldr	r3, [r7]
   14594:	ldr	r0, [r7, #4]
   14598:	str	r0, [sp]
   1459c:	b	1468c <__assert_fail@plt+0x36d0>
   145a0:	movw	r1, #23259	; 0x5adb
   145a4:	mov	r0, #0
   145a8:	mov	r2, #5
   145ac:	movt	r1, #1
   145b0:	bl	10df4 <dcgettext@plt>
   145b4:	ldr	r3, [r7]
   145b8:	mov	r2, r0
   145bc:	ldmib	r7, {r0, r1}
   145c0:	stm	sp, {r0, r1}
   145c4:	b	1468c <__assert_fail@plt+0x36d0>
   145c8:	movw	r1, #23287	; 0x5af7
   145cc:	mov	r0, #0
   145d0:	mov	r2, #5
   145d4:	movt	r1, #1
   145d8:	bl	10df4 <dcgettext@plt>
   145dc:	ldr	r3, [r7]
   145e0:	mov	r2, r0
   145e4:	ldmib	r7, {r0, r1, r7}
   145e8:	stm	sp, {r0, r1, r7}
   145ec:	b	1468c <__assert_fail@plt+0x36d0>
   145f0:	movw	r1, #23319	; 0x5b17
   145f4:	mov	r0, #0
   145f8:	mov	r2, #5
   145fc:	movt	r1, #1
   14600:	bl	10df4 <dcgettext@plt>
   14604:	ldr	r3, [r7]
   14608:	mov	r2, r0
   1460c:	ldmib	r7, {r0, r1, r6, r7}
   14610:	stm	sp, {r0, r1, r6, r7}
   14614:	b	1468c <__assert_fail@plt+0x36d0>
   14618:	movw	r1, #23355	; 0x5b3b
   1461c:	mov	r0, #0
   14620:	mov	r2, #5
   14624:	movt	r1, #1
   14628:	bl	10df4 <dcgettext@plt>
   1462c:	ldr	r3, [r7]
   14630:	mov	r2, r0
   14634:	ldmib	r7, {r0, r1, r6}
   14638:	ldr	r5, [r7, #16]
   1463c:	ldr	r7, [r7, #20]
   14640:	stm	sp, {r0, r1, r6}
   14644:	str	r5, [sp, #12]
   14648:	str	r7, [sp, #16]
   1464c:	b	1468c <__assert_fail@plt+0x36d0>
   14650:	movw	r1, #23395	; 0x5b63
   14654:	mov	r0, #0
   14658:	mov	r2, #5
   1465c:	movt	r1, #1
   14660:	bl	10df4 <dcgettext@plt>
   14664:	ldr	r3, [r7]
   14668:	mov	r2, r0
   1466c:	ldmib	r7, {r0, r1, r6}
   14670:	ldr	r5, [r7, #16]
   14674:	ldr	r4, [r7, #20]
   14678:	ldr	r7, [r7, #24]
   1467c:	stm	sp, {r0, r1, r6}
   14680:	str	r5, [sp, #12]
   14684:	str	r4, [sp, #16]
   14688:	str	r7, [sp, #20]
   1468c:	mov	r0, r8
   14690:	mov	r1, #1
   14694:	b	14740 <__assert_fail@plt+0x3784>
   14698:	movw	r1, #23487	; 0x5bbf
   1469c:	movt	r1, #1
   146a0:	mov	r0, #0
   146a4:	mov	r2, #5
   146a8:	bl	10df4 <dcgettext@plt>
   146ac:	mov	ip, r0
   146b0:	ldr	r3, [r7]
   146b4:	ldr	r0, [r7, #4]
   146b8:	ldr	r1, [r7, #8]
   146bc:	ldr	r6, [r7, #12]
   146c0:	ldr	r5, [r7, #16]
   146c4:	ldr	r4, [r7, #20]
   146c8:	ldr	r2, [r7, #24]
   146cc:	ldr	lr, [r7, #28]
   146d0:	ldr	r7, [r7, #32]
   146d4:	stm	sp, {r0, r1, r6}
   146d8:	str	r5, [sp, #12]
   146dc:	str	r4, [sp, #16]
   146e0:	str	r2, [sp, #20]
   146e4:	str	lr, [sp, #24]
   146e8:	str	r7, [sp, #28]
   146ec:	b	14734 <__assert_fail@plt+0x3778>
   146f0:	movw	r1, #23439	; 0x5b8f
   146f4:	mov	r0, #0
   146f8:	mov	r2, #5
   146fc:	movt	r1, #1
   14700:	bl	10df4 <dcgettext@plt>
   14704:	mov	ip, r0
   14708:	ldr	r3, [r7]
   1470c:	ldmib	r7, {r0, r1, r6}
   14710:	ldr	r5, [r7, #16]
   14714:	ldr	r4, [r7, #20]
   14718:	ldr	r2, [r7, #24]
   1471c:	ldr	r7, [r7, #28]
   14720:	stm	sp, {r0, r1, r6}
   14724:	str	r5, [sp, #12]
   14728:	str	r4, [sp, #16]
   1472c:	str	r2, [sp, #20]
   14730:	str	r7, [sp, #24]
   14734:	mov	r0, r8
   14738:	mov	r1, #1
   1473c:	mov	r2, ip
   14740:	bl	10f38 <__fprintf_chk@plt>
   14744:	sub	sp, fp, #24
   14748:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1474c:	push	{r4, sl, fp, lr}
   14750:	add	fp, sp, #8
   14754:	sub	sp, sp, #8
   14758:	ldr	ip, [fp, #8]
   1475c:	mov	lr, #0
   14760:	ldr	r4, [ip, lr, lsl #2]
   14764:	add	lr, lr, #1
   14768:	cmp	r4, #0
   1476c:	bne	14760 <__assert_fail@plt+0x37a4>
   14770:	sub	r4, lr, #1
   14774:	str	ip, [sp]
   14778:	str	r4, [sp, #4]
   1477c:	bl	14418 <__assert_fail@plt+0x345c>
   14780:	sub	sp, fp, #8
   14784:	pop	{r4, sl, fp, pc}
   14788:	push	{fp, lr}
   1478c:	mov	fp, sp
   14790:	sub	sp, sp, #48	; 0x30
   14794:	ldr	ip, [fp, #8]
   14798:	ldr	lr, [ip]
   1479c:	cmp	lr, #0
   147a0:	str	lr, [sp, #8]
   147a4:	beq	14840 <__assert_fail@plt+0x3884>
   147a8:	ldr	lr, [ip, #4]
   147ac:	cmp	lr, #0
   147b0:	str	lr, [sp, #12]
   147b4:	beq	14848 <__assert_fail@plt+0x388c>
   147b8:	ldr	lr, [ip, #8]
   147bc:	cmp	lr, #0
   147c0:	str	lr, [sp, #16]
   147c4:	beq	14850 <__assert_fail@plt+0x3894>
   147c8:	ldr	lr, [ip, #12]
   147cc:	cmp	lr, #0
   147d0:	str	lr, [sp, #20]
   147d4:	beq	14858 <__assert_fail@plt+0x389c>
   147d8:	ldr	lr, [ip, #16]
   147dc:	cmp	lr, #0
   147e0:	str	lr, [sp, #24]
   147e4:	beq	14860 <__assert_fail@plt+0x38a4>
   147e8:	ldr	lr, [ip, #20]
   147ec:	cmp	lr, #0
   147f0:	str	lr, [sp, #28]
   147f4:	beq	14868 <__assert_fail@plt+0x38ac>
   147f8:	ldr	lr, [ip, #24]
   147fc:	cmp	lr, #0
   14800:	str	lr, [sp, #32]
   14804:	beq	14870 <__assert_fail@plt+0x38b4>
   14808:	ldr	lr, [ip, #28]
   1480c:	cmp	lr, #0
   14810:	str	lr, [sp, #36]	; 0x24
   14814:	beq	14878 <__assert_fail@plt+0x38bc>
   14818:	ldr	lr, [ip, #32]
   1481c:	cmp	lr, #0
   14820:	str	lr, [sp, #40]	; 0x28
   14824:	beq	14880 <__assert_fail@plt+0x38c4>
   14828:	ldr	lr, [ip, #36]	; 0x24
   1482c:	mov	ip, #10
   14830:	cmp	lr, #0
   14834:	str	lr, [sp, #44]	; 0x2c
   14838:	movweq	ip, #9
   1483c:	b	14884 <__assert_fail@plt+0x38c8>
   14840:	mov	ip, #0
   14844:	b	14884 <__assert_fail@plt+0x38c8>
   14848:	mov	ip, #1
   1484c:	b	14884 <__assert_fail@plt+0x38c8>
   14850:	mov	ip, #2
   14854:	b	14884 <__assert_fail@plt+0x38c8>
   14858:	mov	ip, #3
   1485c:	b	14884 <__assert_fail@plt+0x38c8>
   14860:	mov	ip, #4
   14864:	b	14884 <__assert_fail@plt+0x38c8>
   14868:	mov	ip, #5
   1486c:	b	14884 <__assert_fail@plt+0x38c8>
   14870:	mov	ip, #6
   14874:	b	14884 <__assert_fail@plt+0x38c8>
   14878:	mov	ip, #7
   1487c:	b	14884 <__assert_fail@plt+0x38c8>
   14880:	mov	ip, #8
   14884:	add	lr, sp, #8
   14888:	str	ip, [sp, #4]
   1488c:	str	lr, [sp]
   14890:	bl	14418 <__assert_fail@plt+0x345c>
   14894:	mov	sp, fp
   14898:	pop	{fp, pc}
   1489c:	push	{fp, lr}
   148a0:	mov	fp, sp
   148a4:	sub	sp, sp, #56	; 0x38
   148a8:	add	ip, fp, #8
   148ac:	str	ip, [sp, #12]
   148b0:	ldr	lr, [fp, #8]
   148b4:	cmp	lr, #0
   148b8:	str	lr, [sp, #16]
   148bc:	beq	14958 <__assert_fail@plt+0x399c>
   148c0:	ldr	lr, [ip, #4]
   148c4:	cmp	lr, #0
   148c8:	str	lr, [sp, #20]
   148cc:	beq	14960 <__assert_fail@plt+0x39a4>
   148d0:	ldr	lr, [ip, #8]
   148d4:	cmp	lr, #0
   148d8:	str	lr, [sp, #24]
   148dc:	beq	14968 <__assert_fail@plt+0x39ac>
   148e0:	ldr	lr, [ip, #12]
   148e4:	cmp	lr, #0
   148e8:	str	lr, [sp, #28]
   148ec:	beq	14970 <__assert_fail@plt+0x39b4>
   148f0:	ldr	lr, [ip, #16]
   148f4:	cmp	lr, #0
   148f8:	str	lr, [sp, #32]
   148fc:	beq	14978 <__assert_fail@plt+0x39bc>
   14900:	ldr	lr, [ip, #20]
   14904:	cmp	lr, #0
   14908:	str	lr, [sp, #36]	; 0x24
   1490c:	beq	14980 <__assert_fail@plt+0x39c4>
   14910:	ldr	lr, [ip, #24]
   14914:	cmp	lr, #0
   14918:	str	lr, [sp, #40]	; 0x28
   1491c:	beq	14988 <__assert_fail@plt+0x39cc>
   14920:	ldr	lr, [ip, #28]
   14924:	cmp	lr, #0
   14928:	str	lr, [sp, #44]	; 0x2c
   1492c:	beq	14990 <__assert_fail@plt+0x39d4>
   14930:	ldr	lr, [ip, #32]
   14934:	cmp	lr, #0
   14938:	str	lr, [sp, #48]	; 0x30
   1493c:	beq	14998 <__assert_fail@plt+0x39dc>
   14940:	ldr	lr, [ip, #36]	; 0x24
   14944:	mov	ip, #10
   14948:	cmp	lr, #0
   1494c:	str	lr, [sp, #52]	; 0x34
   14950:	movweq	ip, #9
   14954:	b	1499c <__assert_fail@plt+0x39e0>
   14958:	mov	ip, #0
   1495c:	b	1499c <__assert_fail@plt+0x39e0>
   14960:	mov	ip, #1
   14964:	b	1499c <__assert_fail@plt+0x39e0>
   14968:	mov	ip, #2
   1496c:	b	1499c <__assert_fail@plt+0x39e0>
   14970:	mov	ip, #3
   14974:	b	1499c <__assert_fail@plt+0x39e0>
   14978:	mov	ip, #4
   1497c:	b	1499c <__assert_fail@plt+0x39e0>
   14980:	mov	ip, #5
   14984:	b	1499c <__assert_fail@plt+0x39e0>
   14988:	mov	ip, #6
   1498c:	b	1499c <__assert_fail@plt+0x39e0>
   14990:	mov	ip, #7
   14994:	b	1499c <__assert_fail@plt+0x39e0>
   14998:	mov	ip, #8
   1499c:	add	lr, sp, #16
   149a0:	str	ip, [sp, #4]
   149a4:	str	lr, [sp]
   149a8:	bl	14418 <__assert_fail@plt+0x345c>
   149ac:	mov	sp, fp
   149b0:	pop	{fp, pc}
   149b4:	push	{fp, lr}
   149b8:	mov	fp, sp
   149bc:	movw	r0, #24900	; 0x6144
   149c0:	movt	r0, #2
   149c4:	ldr	r1, [r0]
   149c8:	movw	r0, #22278	; 0x5706
   149cc:	movt	r0, #1
   149d0:	bl	10d88 <fputs_unlocked@plt>
   149d4:	movw	r1, #23599	; 0x5c2f
   149d8:	mov	r0, #0
   149dc:	mov	r2, #5
   149e0:	movt	r1, #1
   149e4:	bl	10df4 <dcgettext@plt>
   149e8:	movw	r2, #23619	; 0x5c43
   149ec:	mov	r1, r0
   149f0:	mov	r0, #1
   149f4:	movt	r2, #1
   149f8:	bl	10f20 <__printf_chk@plt>
   149fc:	movw	r1, #23641	; 0x5c59
   14a00:	mov	r0, #0
   14a04:	mov	r2, #5
   14a08:	movt	r1, #1
   14a0c:	bl	10df4 <dcgettext@plt>
   14a10:	movw	r2, #21864	; 0x5568
   14a14:	movw	r3, #22083	; 0x5643
   14a18:	mov	r1, r0
   14a1c:	mov	r0, #1
   14a20:	movt	r2, #1
   14a24:	movt	r3, #1
   14a28:	bl	10f20 <__printf_chk@plt>
   14a2c:	movw	r1, #23661	; 0x5c6d
   14a30:	mov	r0, #0
   14a34:	mov	r2, #5
   14a38:	movt	r1, #1
   14a3c:	bl	10df4 <dcgettext@plt>
   14a40:	movw	r2, #23700	; 0x5c94
   14a44:	mov	r1, r0
   14a48:	mov	r0, #1
   14a4c:	movt	r2, #1
   14a50:	pop	{fp, lr}
   14a54:	b	10f20 <__printf_chk@plt>
   14a58:	push	{r4, r5, r6, sl, fp, lr}
   14a5c:	add	fp, sp, #16
   14a60:	mov	r4, r2
   14a64:	mov	r5, r1
   14a68:	mov	r6, r0
   14a6c:	bl	15290 <__assert_fail@plt+0x42d4>
   14a70:	cmp	r0, #0
   14a74:	popne	{r4, r5, r6, sl, fp, pc}
   14a78:	cmp	r6, #0
   14a7c:	beq	14a90 <__assert_fail@plt+0x3ad4>
   14a80:	cmp	r5, #0
   14a84:	cmpne	r4, #0
   14a88:	bne	14a90 <__assert_fail@plt+0x3ad4>
   14a8c:	pop	{r4, r5, r6, sl, fp, pc}
   14a90:	bl	15030 <__assert_fail@plt+0x4074>
   14a94:	push	{r4, r5, r6, sl, fp, lr}
   14a98:	add	fp, sp, #16
   14a9c:	mov	r4, r2
   14aa0:	mov	r5, r1
   14aa4:	mov	r6, r0
   14aa8:	bl	15290 <__assert_fail@plt+0x42d4>
   14aac:	cmp	r0, #0
   14ab0:	popne	{r4, r5, r6, sl, fp, pc}
   14ab4:	cmp	r6, #0
   14ab8:	beq	14acc <__assert_fail@plt+0x3b10>
   14abc:	cmp	r5, #0
   14ac0:	cmpne	r4, #0
   14ac4:	bne	14acc <__assert_fail@plt+0x3b10>
   14ac8:	pop	{r4, r5, r6, sl, fp, pc}
   14acc:	bl	15030 <__assert_fail@plt+0x4074>
   14ad0:	push	{fp, lr}
   14ad4:	mov	fp, sp
   14ad8:	bl	150c8 <__assert_fail@plt+0x410c>
   14adc:	cmp	r0, #0
   14ae0:	popne	{fp, pc}
   14ae4:	bl	15030 <__assert_fail@plt+0x4074>
   14ae8:	push	{fp, lr}
   14aec:	mov	fp, sp
   14af0:	bl	150c8 <__assert_fail@plt+0x410c>
   14af4:	cmp	r0, #0
   14af8:	popne	{fp, pc}
   14afc:	bl	15030 <__assert_fail@plt+0x4074>
   14b00:	push	{fp, lr}
   14b04:	mov	fp, sp
   14b08:	bl	150c8 <__assert_fail@plt+0x410c>
   14b0c:	cmp	r0, #0
   14b10:	popne	{fp, pc}
   14b14:	bl	15030 <__assert_fail@plt+0x4074>
   14b18:	push	{r4, r5, fp, lr}
   14b1c:	add	fp, sp, #8
   14b20:	mov	r4, r1
   14b24:	mov	r5, r0
   14b28:	bl	150f8 <__assert_fail@plt+0x413c>
   14b2c:	cmp	r0, #0
   14b30:	popne	{r4, r5, fp, pc}
   14b34:	cmp	r5, #0
   14b38:	beq	14b48 <__assert_fail@plt+0x3b8c>
   14b3c:	cmp	r4, #0
   14b40:	bne	14b48 <__assert_fail@plt+0x3b8c>
   14b44:	pop	{r4, r5, fp, pc}
   14b48:	bl	15030 <__assert_fail@plt+0x4074>
   14b4c:	push	{fp, lr}
   14b50:	mov	fp, sp
   14b54:	cmp	r1, #0
   14b58:	orreq	r1, r1, #1
   14b5c:	bl	150f8 <__assert_fail@plt+0x413c>
   14b60:	cmp	r0, #0
   14b64:	popne	{fp, pc}
   14b68:	bl	15030 <__assert_fail@plt+0x4074>
   14b6c:	push	{fp, lr}
   14b70:	mov	fp, sp
   14b74:	clz	r3, r2
   14b78:	lsr	ip, r3, #5
   14b7c:	clz	r3, r1
   14b80:	lsr	r3, r3, #5
   14b84:	orrs	r3, r3, ip
   14b88:	movwne	r1, #1
   14b8c:	movwne	r2, #1
   14b90:	bl	15290 <__assert_fail@plt+0x42d4>
   14b94:	cmp	r0, #0
   14b98:	popne	{fp, pc}
   14b9c:	bl	15030 <__assert_fail@plt+0x4074>
   14ba0:	push	{fp, lr}
   14ba4:	mov	fp, sp
   14ba8:	mov	r2, r1
   14bac:	mov	r1, r0
   14bb0:	mov	r0, #0
   14bb4:	bl	15290 <__assert_fail@plt+0x42d4>
   14bb8:	cmp	r0, #0
   14bbc:	popne	{fp, pc}
   14bc0:	bl	15030 <__assert_fail@plt+0x4074>
   14bc4:	push	{fp, lr}
   14bc8:	mov	fp, sp
   14bcc:	mov	r2, r1
   14bd0:	mov	r1, r0
   14bd4:	clz	r0, r2
   14bd8:	clz	r3, r1
   14bdc:	lsr	r0, r0, #5
   14be0:	lsr	r3, r3, #5
   14be4:	orrs	r0, r3, r0
   14be8:	movwne	r1, #1
   14bec:	movwne	r2, #1
   14bf0:	mov	r0, #0
   14bf4:	bl	15290 <__assert_fail@plt+0x42d4>
   14bf8:	cmp	r0, #0
   14bfc:	popne	{fp, pc}
   14c00:	bl	15030 <__assert_fail@plt+0x4074>
   14c04:	push	{r4, r5, r6, sl, fp, lr}
   14c08:	add	fp, sp, #16
   14c0c:	ldr	r5, [r1]
   14c10:	mov	r4, r1
   14c14:	mov	r6, r0
   14c18:	cmp	r0, #0
   14c1c:	beq	14c34 <__assert_fail@plt+0x3c78>
   14c20:	mov	r0, #1
   14c24:	add	r0, r0, r5, lsr #1
   14c28:	adds	r5, r5, r0
   14c2c:	bcc	14c3c <__assert_fail@plt+0x3c80>
   14c30:	b	14c78 <__assert_fail@plt+0x3cbc>
   14c34:	cmp	r5, #0
   14c38:	movweq	r5, #64	; 0x40
   14c3c:	mov	r0, r6
   14c40:	mov	r1, r5
   14c44:	mov	r2, #1
   14c48:	bl	15290 <__assert_fail@plt+0x42d4>
   14c4c:	cmp	r5, #0
   14c50:	mov	r1, r5
   14c54:	movwne	r1, #1
   14c58:	cmp	r0, #0
   14c5c:	bne	14c70 <__assert_fail@plt+0x3cb4>
   14c60:	clz	r2, r6
   14c64:	lsr	r2, r2, #5
   14c68:	orrs	r1, r2, r1
   14c6c:	bne	14c78 <__assert_fail@plt+0x3cbc>
   14c70:	str	r5, [r4]
   14c74:	pop	{r4, r5, r6, sl, fp, pc}
   14c78:	bl	15030 <__assert_fail@plt+0x4074>
   14c7c:	push	{r4, r5, r6, r7, fp, lr}
   14c80:	add	fp, sp, #16
   14c84:	ldr	r5, [r1]
   14c88:	mov	r6, r2
   14c8c:	mov	r4, r1
   14c90:	mov	r7, r0
   14c94:	cmp	r0, #0
   14c98:	beq	14cb0 <__assert_fail@plt+0x3cf4>
   14c9c:	mov	r0, #1
   14ca0:	add	r0, r0, r5, lsr #1
   14ca4:	adds	r5, r5, r0
   14ca8:	bcc	14cc8 <__assert_fail@plt+0x3d0c>
   14cac:	b	14cfc <__assert_fail@plt+0x3d40>
   14cb0:	cmp	r5, #0
   14cb4:	bne	14cc8 <__assert_fail@plt+0x3d0c>
   14cb8:	mov	r0, #64	; 0x40
   14cbc:	cmp	r6, #64	; 0x40
   14cc0:	udiv	r5, r0, r6
   14cc4:	addhi	r5, r5, #1
   14cc8:	mov	r0, r7
   14ccc:	mov	r1, r5
   14cd0:	mov	r2, r6
   14cd4:	bl	15290 <__assert_fail@plt+0x42d4>
   14cd8:	cmp	r0, #0
   14cdc:	bne	14cf4 <__assert_fail@plt+0x3d38>
   14ce0:	cmp	r7, #0
   14ce4:	beq	14cfc <__assert_fail@plt+0x3d40>
   14ce8:	cmp	r6, #0
   14cec:	cmpne	r5, #0
   14cf0:	bne	14cfc <__assert_fail@plt+0x3d40>
   14cf4:	str	r5, [r4]
   14cf8:	pop	{r4, r5, r6, r7, fp, pc}
   14cfc:	bl	15030 <__assert_fail@plt+0x4074>
   14d00:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14d04:	add	fp, sp, #24
   14d08:	mov	r8, r1
   14d0c:	ldr	r1, [r1]
   14d10:	mov	r5, r0
   14d14:	add	r0, r1, r1, asr #1
   14d18:	cmp	r0, r1
   14d1c:	mvnvs	r0, #-2147483648	; 0x80000000
   14d20:	cmp	r0, r3
   14d24:	mov	r7, r0
   14d28:	movgt	r7, r3
   14d2c:	cmn	r3, #1
   14d30:	movle	r7, r0
   14d34:	ldr	r0, [fp, #8]
   14d38:	cmn	r0, #1
   14d3c:	ble	14d64 <__assert_fail@plt+0x3da8>
   14d40:	cmp	r0, #0
   14d44:	beq	14db8 <__assert_fail@plt+0x3dfc>
   14d48:	cmn	r7, #1
   14d4c:	ble	14d8c <__assert_fail@plt+0x3dd0>
   14d50:	mvn	r4, #-2147483648	; 0x80000000
   14d54:	udiv	r6, r4, r0
   14d58:	cmp	r6, r7
   14d5c:	bge	14db8 <__assert_fail@plt+0x3dfc>
   14d60:	b	14dc8 <__assert_fail@plt+0x3e0c>
   14d64:	cmn	r7, #1
   14d68:	ble	14da8 <__assert_fail@plt+0x3dec>
   14d6c:	cmn	r0, #1
   14d70:	beq	14db8 <__assert_fail@plt+0x3dfc>
   14d74:	mov	r6, #-2147483648	; 0x80000000
   14d78:	mvn	r4, #-2147483648	; 0x80000000
   14d7c:	sdiv	r6, r6, r0
   14d80:	cmp	r6, r7
   14d84:	bge	14db8 <__assert_fail@plt+0x3dfc>
   14d88:	b	14dc8 <__assert_fail@plt+0x3e0c>
   14d8c:	beq	14db8 <__assert_fail@plt+0x3dfc>
   14d90:	mov	r6, #-2147483648	; 0x80000000
   14d94:	mvn	r4, #-2147483648	; 0x80000000
   14d98:	sdiv	r6, r6, r7
   14d9c:	cmp	r6, r0
   14da0:	bge	14db8 <__assert_fail@plt+0x3dfc>
   14da4:	b	14dc8 <__assert_fail@plt+0x3e0c>
   14da8:	mvn	r4, #-2147483648	; 0x80000000
   14dac:	sdiv	r6, r4, r0
   14db0:	cmp	r7, r6
   14db4:	blt	14dc8 <__assert_fail@plt+0x3e0c>
   14db8:	mul	r6, r7, r0
   14dbc:	mov	r4, #64	; 0x40
   14dc0:	cmp	r6, #63	; 0x3f
   14dc4:	bgt	14dd0 <__assert_fail@plt+0x3e14>
   14dc8:	sdiv	r7, r4, r0
   14dcc:	mul	r6, r7, r0
   14dd0:	cmp	r5, #0
   14dd4:	moveq	r4, #0
   14dd8:	streq	r4, [r8]
   14ddc:	sub	r4, r7, r1
   14de0:	cmp	r4, r2
   14de4:	bge	14e90 <__assert_fail@plt+0x3ed4>
   14de8:	add	r7, r1, r2
   14dec:	mov	r6, #0
   14df0:	mov	r2, #0
   14df4:	cmp	r7, r3
   14df8:	movwgt	r6, #1
   14dfc:	cmn	r3, #1
   14e00:	movwgt	r2, #1
   14e04:	cmp	r7, r1
   14e08:	bvs	14ec4 <__assert_fail@plt+0x3f08>
   14e0c:	ands	r1, r2, r6
   14e10:	bne	14ec4 <__assert_fail@plt+0x3f08>
   14e14:	cmn	r0, #1
   14e18:	ble	14e40 <__assert_fail@plt+0x3e84>
   14e1c:	cmp	r0, #0
   14e20:	beq	14e8c <__assert_fail@plt+0x3ed0>
   14e24:	cmn	r7, #1
   14e28:	ble	14e64 <__assert_fail@plt+0x3ea8>
   14e2c:	mvn	r1, #-2147483648	; 0x80000000
   14e30:	udiv	r1, r1, r0
   14e34:	cmp	r1, r7
   14e38:	bge	14e8c <__assert_fail@plt+0x3ed0>
   14e3c:	b	14ec4 <__assert_fail@plt+0x3f08>
   14e40:	cmn	r7, #1
   14e44:	ble	14e7c <__assert_fail@plt+0x3ec0>
   14e48:	cmn	r0, #1
   14e4c:	beq	14e8c <__assert_fail@plt+0x3ed0>
   14e50:	mov	r1, #-2147483648	; 0x80000000
   14e54:	sdiv	r1, r1, r0
   14e58:	cmp	r1, r7
   14e5c:	bge	14e8c <__assert_fail@plt+0x3ed0>
   14e60:	b	14ec4 <__assert_fail@plt+0x3f08>
   14e64:	beq	14e8c <__assert_fail@plt+0x3ed0>
   14e68:	mov	r1, #-2147483648	; 0x80000000
   14e6c:	sdiv	r1, r1, r7
   14e70:	cmp	r1, r0
   14e74:	bge	14e8c <__assert_fail@plt+0x3ed0>
   14e78:	b	14ec4 <__assert_fail@plt+0x3f08>
   14e7c:	mvn	r1, #-2147483648	; 0x80000000
   14e80:	sdiv	r1, r1, r0
   14e84:	cmp	r7, r1
   14e88:	blt	14ec4 <__assert_fail@plt+0x3f08>
   14e8c:	mul	r6, r7, r0
   14e90:	mov	r0, r5
   14e94:	mov	r1, r6
   14e98:	bl	150f8 <__assert_fail@plt+0x413c>
   14e9c:	cmp	r6, #0
   14ea0:	movwne	r6, #1
   14ea4:	cmp	r0, #0
   14ea8:	bne	14ebc <__assert_fail@plt+0x3f00>
   14eac:	clz	r1, r5
   14eb0:	lsr	r1, r1, #5
   14eb4:	orrs	r1, r1, r6
   14eb8:	bne	14ec4 <__assert_fail@plt+0x3f08>
   14ebc:	str	r7, [r8]
   14ec0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14ec4:	bl	15030 <__assert_fail@plt+0x4074>
   14ec8:	push	{fp, lr}
   14ecc:	mov	fp, sp
   14ed0:	mov	r1, #1
   14ed4:	bl	15074 <__assert_fail@plt+0x40b8>
   14ed8:	cmp	r0, #0
   14edc:	popne	{fp, pc}
   14ee0:	bl	15030 <__assert_fail@plt+0x4074>
   14ee4:	push	{fp, lr}
   14ee8:	mov	fp, sp
   14eec:	bl	15074 <__assert_fail@plt+0x40b8>
   14ef0:	cmp	r0, #0
   14ef4:	popne	{fp, pc}
   14ef8:	bl	15030 <__assert_fail@plt+0x4074>
   14efc:	push	{fp, lr}
   14f00:	mov	fp, sp
   14f04:	mov	r1, #1
   14f08:	bl	15074 <__assert_fail@plt+0x40b8>
   14f0c:	cmp	r0, #0
   14f10:	popne	{fp, pc}
   14f14:	bl	15030 <__assert_fail@plt+0x4074>
   14f18:	push	{fp, lr}
   14f1c:	mov	fp, sp
   14f20:	bl	15074 <__assert_fail@plt+0x40b8>
   14f24:	cmp	r0, #0
   14f28:	popne	{fp, pc}
   14f2c:	bl	15030 <__assert_fail@plt+0x4074>
   14f30:	push	{r4, r5, r6, sl, fp, lr}
   14f34:	add	fp, sp, #16
   14f38:	mov	r5, r0
   14f3c:	mov	r0, r1
   14f40:	mov	r4, r1
   14f44:	bl	150c8 <__assert_fail@plt+0x410c>
   14f48:	cmp	r0, #0
   14f4c:	beq	14f68 <__assert_fail@plt+0x3fac>
   14f50:	mov	r1, r5
   14f54:	mov	r2, r4
   14f58:	mov	r6, r0
   14f5c:	bl	10dd0 <memcpy@plt>
   14f60:	mov	r0, r6
   14f64:	pop	{r4, r5, r6, sl, fp, pc}
   14f68:	bl	15030 <__assert_fail@plt+0x4074>
   14f6c:	push	{r4, r5, r6, sl, fp, lr}
   14f70:	add	fp, sp, #16
   14f74:	mov	r5, r0
   14f78:	mov	r0, r1
   14f7c:	mov	r4, r1
   14f80:	bl	150c8 <__assert_fail@plt+0x410c>
   14f84:	cmp	r0, #0
   14f88:	beq	14fa4 <__assert_fail@plt+0x3fe8>
   14f8c:	mov	r1, r5
   14f90:	mov	r2, r4
   14f94:	mov	r6, r0
   14f98:	bl	10dd0 <memcpy@plt>
   14f9c:	mov	r0, r6
   14fa0:	pop	{r4, r5, r6, sl, fp, pc}
   14fa4:	bl	15030 <__assert_fail@plt+0x4074>
   14fa8:	push	{r4, r5, r6, sl, fp, lr}
   14fac:	add	fp, sp, #16
   14fb0:	mov	r5, r0
   14fb4:	add	r0, r1, #1
   14fb8:	mov	r4, r1
   14fbc:	bl	150c8 <__assert_fail@plt+0x410c>
   14fc0:	cmp	r0, #0
   14fc4:	beq	14fec <__assert_fail@plt+0x4030>
   14fc8:	mov	r6, r0
   14fcc:	mov	r0, #0
   14fd0:	mov	r1, r5
   14fd4:	mov	r2, r4
   14fd8:	strb	r0, [r6, r4]
   14fdc:	mov	r0, r6
   14fe0:	bl	10dd0 <memcpy@plt>
   14fe4:	mov	r0, r6
   14fe8:	pop	{r4, r5, r6, sl, fp, pc}
   14fec:	bl	15030 <__assert_fail@plt+0x4074>
   14ff0:	push	{r4, r5, r6, sl, fp, lr}
   14ff4:	add	fp, sp, #16
   14ff8:	mov	r4, r0
   14ffc:	bl	10ef0 <strlen@plt>
   15000:	add	r5, r0, #1
   15004:	mov	r0, r5
   15008:	bl	150c8 <__assert_fail@plt+0x410c>
   1500c:	cmp	r0, #0
   15010:	beq	1502c <__assert_fail@plt+0x4070>
   15014:	mov	r1, r4
   15018:	mov	r2, r5
   1501c:	mov	r6, r0
   15020:	bl	10dd0 <memcpy@plt>
   15024:	mov	r0, r6
   15028:	pop	{r4, r5, r6, sl, fp, pc}
   1502c:	bl	15030 <__assert_fail@plt+0x4074>
   15030:	push	{fp, lr}
   15034:	mov	fp, sp
   15038:	movw	r0, #24804	; 0x60e4
   1503c:	movw	r1, #23776	; 0x5ce0
   15040:	mov	r2, #5
   15044:	movt	r0, #2
   15048:	movt	r1, #1
   1504c:	ldr	r4, [r0]
   15050:	mov	r0, #0
   15054:	bl	10df4 <dcgettext@plt>
   15058:	movw	r2, #22663	; 0x5887
   1505c:	mov	r3, r0
   15060:	mov	r0, r4
   15064:	mov	r1, #0
   15068:	movt	r2, #1
   1506c:	bl	10e6c <error@plt>
   15070:	bl	10fa4 <abort@plt>
   15074:	clz	r2, r1
   15078:	clz	r3, r0
   1507c:	lsr	r2, r2, #5
   15080:	lsr	r3, r3, #5
   15084:	orrs	r2, r3, r2
   15088:	movwne	r1, #1
   1508c:	movwne	r0, #1
   15090:	cmp	r1, #0
   15094:	beq	150c4 <__assert_fail@plt+0x4108>
   15098:	mvn	r2, #-2147483648	; 0x80000000
   1509c:	udiv	r2, r2, r1
   150a0:	cmp	r2, r0
   150a4:	bcs	150c4 <__assert_fail@plt+0x4108>
   150a8:	push	{fp, lr}
   150ac:	mov	fp, sp
   150b0:	bl	10efc <__errno_location@plt>
   150b4:	mov	r1, #12
   150b8:	str	r1, [r0]
   150bc:	mov	r0, #0
   150c0:	pop	{fp, pc}
   150c4:	b	10d7c <calloc@plt>
   150c8:	cmp	r0, #0
   150cc:	movweq	r0, #1
   150d0:	cmn	r0, #1
   150d4:	ble	150dc <__assert_fail@plt+0x4120>
   150d8:	b	10e90 <malloc@plt>
   150dc:	push	{fp, lr}
   150e0:	mov	fp, sp
   150e4:	bl	10efc <__errno_location@plt>
   150e8:	mov	r1, #12
   150ec:	str	r1, [r0]
   150f0:	mov	r0, #0
   150f4:	pop	{fp, pc}
   150f8:	push	{fp, lr}
   150fc:	mov	fp, sp
   15100:	cmp	r0, #0
   15104:	beq	15120 <__assert_fail@plt+0x4164>
   15108:	cmp	r1, #0
   1510c:	beq	1512c <__assert_fail@plt+0x4170>
   15110:	cmn	r1, #1
   15114:	ble	15138 <__assert_fail@plt+0x417c>
   15118:	pop	{fp, lr}
   1511c:	b	10e0c <realloc@plt>
   15120:	mov	r0, r1
   15124:	pop	{fp, lr}
   15128:	b	150c8 <__assert_fail@plt+0x410c>
   1512c:	bl	151d0 <__assert_fail@plt+0x4214>
   15130:	mov	r0, #0
   15134:	pop	{fp, pc}
   15138:	bl	10efc <__errno_location@plt>
   1513c:	mov	r1, #12
   15140:	str	r1, [r0]
   15144:	mov	r0, #0
   15148:	pop	{fp, pc}
   1514c:	push	{r4, r5, r6, sl, fp, lr}
   15150:	add	fp, sp, #16
   15154:	mov	r4, r0
   15158:	bl	10e54 <__fpending@plt>
   1515c:	ldr	r6, [r4]
   15160:	mov	r5, r0
   15164:	mov	r0, r4
   15168:	bl	11e78 <__assert_fail@plt+0xebc>
   1516c:	tst	r6, #32
   15170:	bne	151a8 <__assert_fail@plt+0x41ec>
   15174:	cmp	r0, #0
   15178:	mov	r4, r0
   1517c:	mvnne	r4, #0
   15180:	cmp	r5, #0
   15184:	bne	151b4 <__assert_fail@plt+0x41f8>
   15188:	cmp	r0, #0
   1518c:	beq	151b4 <__assert_fail@plt+0x41f8>
   15190:	bl	10efc <__errno_location@plt>
   15194:	ldr	r0, [r0]
   15198:	subs	r4, r0, #9
   1519c:	mvnne	r4, #0
   151a0:	mov	r0, r4
   151a4:	pop	{r4, r5, r6, sl, fp, pc}
   151a8:	mvn	r4, #0
   151ac:	cmp	r0, #0
   151b0:	beq	151bc <__assert_fail@plt+0x4200>
   151b4:	mov	r0, r4
   151b8:	pop	{r4, r5, r6, sl, fp, pc}
   151bc:	bl	10efc <__errno_location@plt>
   151c0:	mov	r1, #0
   151c4:	str	r1, [r0]
   151c8:	mov	r0, r4
   151cc:	pop	{r4, r5, r6, sl, fp, pc}
   151d0:	push	{r4, r5, r6, sl, fp, lr}
   151d4:	add	fp, sp, #16
   151d8:	mov	r4, r0
   151dc:	bl	10efc <__errno_location@plt>
   151e0:	ldr	r6, [r0]
   151e4:	mov	r5, r0
   151e8:	mov	r0, r4
   151ec:	bl	10db8 <free@plt>
   151f0:	str	r6, [r5]
   151f4:	pop	{r4, r5, r6, sl, fp, pc}
   151f8:	push	{fp, lr}
   151fc:	mov	fp, sp
   15200:	mov	r0, #14
   15204:	bl	10f80 <nl_langinfo@plt>
   15208:	movw	r1, #22279	; 0x5707
   1520c:	cmp	r0, #0
   15210:	movt	r1, #1
   15214:	movne	r1, r0
   15218:	movw	r0, #23793	; 0x5cf1
   1521c:	ldrb	r2, [r1]
   15220:	movt	r0, #1
   15224:	cmp	r2, #0
   15228:	movne	r0, r1
   1522c:	pop	{fp, pc}
   15230:	push	{r4, r5, r6, r7, fp, lr}
   15234:	add	fp, sp, #16
   15238:	sub	sp, sp, #8
   1523c:	add	r5, sp, #4
   15240:	cmp	r0, #0
   15244:	mov	r7, r2
   15248:	mov	r4, r1
   1524c:	movne	r5, r0
   15250:	mov	r0, r5
   15254:	bl	10e60 <mbrtowc@plt>
   15258:	mov	r6, r0
   1525c:	cmp	r7, #0
   15260:	beq	15284 <__assert_fail@plt+0x42c8>
   15264:	cmn	r6, #2
   15268:	bcc	15284 <__assert_fail@plt+0x42c8>
   1526c:	mov	r0, #0
   15270:	bl	152cc <__assert_fail@plt+0x4310>
   15274:	cmp	r0, #0
   15278:	ldrbeq	r0, [r4]
   1527c:	moveq	r6, #1
   15280:	streq	r0, [r5]
   15284:	mov	r0, r6
   15288:	sub	sp, fp, #16
   1528c:	pop	{r4, r5, r6, r7, fp, pc}
   15290:	cmp	r2, #0
   15294:	beq	152c4 <__assert_fail@plt+0x4308>
   15298:	mvn	r3, #0
   1529c:	udiv	r3, r3, r2
   152a0:	cmp	r3, r1
   152a4:	bcs	152c4 <__assert_fail@plt+0x4308>
   152a8:	push	{fp, lr}
   152ac:	mov	fp, sp
   152b0:	bl	10efc <__errno_location@plt>
   152b4:	mov	r1, #12
   152b8:	str	r1, [r0]
   152bc:	mov	r0, #0
   152c0:	pop	{fp, pc}
   152c4:	mul	r1, r2, r1
   152c8:	b	150f8 <__assert_fail@plt+0x413c>
   152cc:	push	{r4, sl, fp, lr}
   152d0:	add	fp, sp, #8
   152d4:	sub	sp, sp, #264	; 0x108
   152d8:	add	r1, sp, #7
   152dc:	movw	r2, #257	; 0x101
   152e0:	bl	15330 <__assert_fail@plt+0x4374>
   152e4:	mov	r4, #0
   152e8:	cmp	r0, #0
   152ec:	bne	15324 <__assert_fail@plt+0x4368>
   152f0:	movw	r1, #23799	; 0x5cf7
   152f4:	add	r0, sp, #7
   152f8:	movt	r1, #1
   152fc:	bl	10d94 <strcmp@plt>
   15300:	cmp	r0, #0
   15304:	beq	15324 <__assert_fail@plt+0x4368>
   15308:	movw	r1, #23801	; 0x5cf9
   1530c:	add	r0, sp, #7
   15310:	movt	r1, #1
   15314:	bl	10d94 <strcmp@plt>
   15318:	mov	r4, r0
   1531c:	cmp	r0, #0
   15320:	movwne	r4, #1
   15324:	mov	r0, r4
   15328:	sub	sp, fp, #8
   1532c:	pop	{r4, sl, fp, pc}
   15330:	push	{r4, r5, r6, r7, fp, lr}
   15334:	add	fp, sp, #16
   15338:	mov	r4, r1
   1533c:	mov	r1, #0
   15340:	mov	r6, r2
   15344:	bl	10f68 <setlocale@plt>
   15348:	cmp	r0, #0
   1534c:	beq	1537c <__assert_fail@plt+0x43c0>
   15350:	mov	r7, r0
   15354:	bl	10ef0 <strlen@plt>
   15358:	cmp	r0, r6
   1535c:	bcs	1539c <__assert_fail@plt+0x43e0>
   15360:	add	r2, r0, #1
   15364:	mov	r0, r4
   15368:	mov	r1, r7
   1536c:	bl	10dd0 <memcpy@plt>
   15370:	mov	r5, #0
   15374:	mov	r0, r5
   15378:	pop	{r4, r5, r6, r7, fp, pc}
   1537c:	cmp	r6, #0
   15380:	mov	r5, #22
   15384:	movne	r0, #0
   15388:	strbne	r0, [r4]
   1538c:	movne	r0, r5
   15390:	popne	{r4, r5, r6, r7, fp, pc}
   15394:	mov	r0, r5
   15398:	pop	{r4, r5, r6, r7, fp, pc}
   1539c:	mov	r5, #34	; 0x22
   153a0:	cmp	r6, #0
   153a4:	beq	153c4 <__assert_fail@plt+0x4408>
   153a8:	sub	r6, r6, #1
   153ac:	mov	r0, r4
   153b0:	mov	r1, r7
   153b4:	mov	r2, r6
   153b8:	bl	10dd0 <memcpy@plt>
   153bc:	mov	r0, #0
   153c0:	strb	r0, [r4, r6]
   153c4:	mov	r0, r5
   153c8:	pop	{r4, r5, r6, r7, fp, pc}
   153cc:	mov	r1, #0
   153d0:	b	10f68 <setlocale@plt>
   153d4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   153d8:	mov	r7, r0
   153dc:	ldr	r6, [pc, #72]	; 1542c <__assert_fail@plt+0x4470>
   153e0:	ldr	r5, [pc, #72]	; 15430 <__assert_fail@plt+0x4474>
   153e4:	add	r6, pc, r6
   153e8:	add	r5, pc, r5
   153ec:	sub	r6, r6, r5
   153f0:	mov	r8, r1
   153f4:	mov	r9, r2
   153f8:	bl	10d5c <calloc@plt-0x20>
   153fc:	asrs	r6, r6, #2
   15400:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   15404:	mov	r4, #0
   15408:	add	r4, r4, #1
   1540c:	ldr	r3, [r5], #4
   15410:	mov	r2, r9
   15414:	mov	r1, r8
   15418:	mov	r0, r7
   1541c:	blx	r3
   15420:	cmp	r6, r4
   15424:	bne	15408 <__assert_fail@plt+0x444c>
   15428:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1542c:	andeq	r0, r1, r0, lsr #22
   15430:	andeq	r0, r1, r8, lsl fp
   15434:	bx	lr
   15438:	ldr	r3, [pc, #12]	; 1544c <__assert_fail@plt+0x4490>
   1543c:	mov	r1, #0
   15440:	add	r3, pc, r3
   15444:	ldr	r2, [r3]
   15448:	b	10f08 <__cxa_atexit@plt>
   1544c:	muleq	r1, r4, ip

Disassembly of section .fini:

00015450 <.fini>:
   15450:	push	{r3, lr}
   15454:	pop	{r3, pc}
