
../repos/dvidelabs-flatcc-3b39ef7/test/json_test/test_basic_parse:     file format elf32-littlearm


Disassembly of section .init:

00012404 <.init>:
   12404:	push	{r3, lr}
   12408:	bl	12524 <_start@@Base+0x3c>
   1240c:	pop	{r3, pc}

Disassembly of section .plt:

00012410 <free@plt-0x14>:
   12410:	push	{lr}		; (str lr, [sp, #-4]!)
   12414:	ldr	lr, [pc, #4]	; 12420 <free@plt-0x4>
   12418:	add	lr, pc, lr
   1241c:	ldr	pc, [lr, #8]!
   12420:	andeq	ip, r1, r0, ror #23

00012424 <free@plt>:
   12424:	add	ip, pc, #0, 12
   12428:	add	ip, ip, #28, 20	; 0x1c000
   1242c:	ldr	pc, [ip, #3040]!	; 0xbe0

00012430 <memcpy@plt>:
   12430:	add	ip, pc, #0, 12
   12434:	add	ip, ip, #28, 20	; 0x1c000
   12438:	ldr	pc, [ip, #3032]!	; 0xbd8

0001243c <memcmp@plt>:
   1243c:	add	ip, pc, #0, 12
   12440:	add	ip, ip, #28, 20	; 0x1c000
   12444:	ldr	pc, [ip, #3024]!	; 0xbd0

00012448 <realloc@plt>:
   12448:	add	ip, pc, #0, 12
   1244c:	add	ip, ip, #28, 20	; 0x1c000
   12450:	ldr	pc, [ip, #3016]!	; 0xbc8

00012454 <fwrite@plt>:
   12454:	add	ip, pc, #0, 12
   12458:	add	ip, ip, #28, 20	; 0x1c000
   1245c:	ldr	pc, [ip, #3008]!	; 0xbc0

00012460 <malloc@plt>:
   12460:	add	ip, pc, #0, 12
   12464:	add	ip, ip, #28, 20	; 0x1c000
   12468:	ldr	pc, [ip, #3000]!	; 0xbb8

0001246c <__libc_start_main@plt>:
   1246c:	add	ip, pc, #0, 12
   12470:	add	ip, ip, #28, 20	; 0x1c000
   12474:	ldr	pc, [ip, #2992]!	; 0xbb0

00012478 <__gmon_start__@plt>:
   12478:	add	ip, pc, #0, 12
   1247c:	add	ip, ip, #28, 20	; 0x1c000
   12480:	ldr	pc, [ip, #2984]!	; 0xba8

00012484 <strlen@plt>:
   12484:	add	ip, pc, #0, 12
   12488:	add	ip, ip, #28, 20	; 0x1c000
   1248c:	ldr	pc, [ip, #2976]!	; 0xba0

00012490 <fprintf@plt>:
   12490:	add	ip, pc, #0, 12
   12494:	add	ip, ip, #28, 20	; 0x1c000
   12498:	ldr	pc, [ip, #2968]!	; 0xb98

0001249c <posix_memalign@plt>:
   1249c:	add	ip, pc, #0, 12
   124a0:	add	ip, ip, #28, 20	; 0x1c000
   124a4:	ldr	pc, [ip, #2960]!	; 0xb90

000124a8 <memset@plt>:
   124a8:	add	ip, pc, #0, 12
   124ac:	add	ip, ip, #28, 20	; 0x1c000
   124b0:	ldr	pc, [ip, #2952]!	; 0xb88

000124b4 <strtod@plt>:
   124b4:	add	ip, pc, #0, 12
   124b8:	add	ip, ip, #28, 20	; 0x1c000
   124bc:	ldr	pc, [ip, #2944]!	; 0xb80

000124c0 <memchr@plt>:
   124c0:	add	ip, pc, #0, 12
   124c4:	add	ip, ip, #28, 20	; 0x1c000
   124c8:	ldr	pc, [ip, #2936]!	; 0xb78

000124cc <abort@plt>:
   124cc:	add	ip, pc, #0, 12
   124d0:	add	ip, ip, #28, 20	; 0x1c000
   124d4:	ldr	pc, [ip, #2928]!	; 0xb70

000124d8 <__assert_fail@plt>:
   124d8:	add	ip, pc, #0, 12
   124dc:	add	ip, ip, #28, 20	; 0x1c000
   124e0:	ldr	pc, [ip, #2920]!	; 0xb68

Disassembly of section .text:

000124e8 <_start@@Base>:
   124e8:	mov	fp, #0
   124ec:	mov	lr, #0
   124f0:	pop	{r1}		; (ldr r1, [sp], #4)
   124f4:	mov	r2, sp
   124f8:	push	{r2}		; (str r2, [sp, #-4]!)
   124fc:	push	{r0}		; (str r0, [sp, #-4]!)
   12500:	ldr	ip, [pc, #16]	; 12518 <_start@@Base+0x30>
   12504:	push	{ip}		; (str ip, [sp, #-4]!)
   12508:	ldr	r0, [pc, #12]	; 1251c <_start@@Base+0x34>
   1250c:	ldr	r3, [pc, #12]	; 12520 <_start@@Base+0x38>
   12510:	bl	1246c <__libc_start_main@plt>
   12514:	bl	124cc <abort@plt>
   12518:	strdeq	sp, [r1], -ip
   1251c:	andeq	r4, r1, r0, lsl r0
   12520:	muleq	r1, ip, r0
   12524:	ldr	r3, [pc, #20]	; 12540 <_start@@Base+0x58>
   12528:	ldr	r2, [pc, #20]	; 12544 <_start@@Base+0x5c>
   1252c:	add	r3, pc, r3
   12530:	ldr	r2, [r3, r2]
   12534:	cmp	r2, #0
   12538:	bxeq	lr
   1253c:	b	12478 <__gmon_start__@plt>
   12540:	andeq	ip, r1, ip, asr #21
   12544:	andeq	r0, r0, ip, asr #32
   12548:	ldr	r3, [pc, #28]	; 1256c <_start@@Base+0x84>
   1254c:	ldr	r0, [pc, #28]	; 12570 <_start@@Base+0x88>
   12550:	sub	r3, r3, r0
   12554:	cmp	r3, #6
   12558:	bxls	lr
   1255c:	ldr	r3, [pc, #16]	; 12574 <_start@@Base+0x8c>
   12560:	cmp	r3, #0
   12564:	bxeq	lr
   12568:	bx	r3
   1256c:	andeq	pc, r2, fp, asr r0	; <UNPREDICTABLE>
   12570:	andeq	pc, r2, r8, asr r0	; <UNPREDICTABLE>
   12574:	andeq	r0, r0, r0
   12578:	ldr	r1, [pc, #36]	; 125a4 <_start@@Base+0xbc>
   1257c:	ldr	r0, [pc, #36]	; 125a8 <_start@@Base+0xc0>
   12580:	sub	r1, r1, r0
   12584:	asr	r1, r1, #2
   12588:	add	r1, r1, r1, lsr #31
   1258c:	asrs	r1, r1, #1
   12590:	bxeq	lr
   12594:	ldr	r3, [pc, #16]	; 125ac <_start@@Base+0xc4>
   12598:	cmp	r3, #0
   1259c:	bxeq	lr
   125a0:	bx	r3
   125a4:	andeq	pc, r2, r8, asr r0	; <UNPREDICTABLE>
   125a8:	andeq	pc, r2, r8, asr r0	; <UNPREDICTABLE>
   125ac:	andeq	r0, r0, r0
   125b0:	push	{r4, lr}
   125b4:	ldr	r4, [pc, #24]	; 125d4 <_start@@Base+0xec>
   125b8:	ldrb	r3, [r4]
   125bc:	cmp	r3, #0
   125c0:	popne	{r4, pc}
   125c4:	bl	12548 <_start@@Base+0x60>
   125c8:	mov	r3, #1
   125cc:	strb	r3, [r4]
   125d0:	pop	{r4, pc}
   125d4:	andeq	pc, r2, ip, asr r0	; <UNPREDICTABLE>
   125d8:	ldr	r0, [pc, #40]	; 12608 <_start@@Base+0x120>
   125dc:	ldr	r3, [r0]
   125e0:	cmp	r3, #0
   125e4:	bne	125ec <_start@@Base+0x104>
   125e8:	b	12578 <_start@@Base+0x90>
   125ec:	ldr	r3, [pc, #24]	; 1260c <_start@@Base+0x124>
   125f0:	cmp	r3, #0
   125f4:	beq	125e8 <_start@@Base+0x100>
   125f8:	push	{r4, lr}
   125fc:	blx	r3
   12600:	pop	{r4, lr}
   12604:	b	12578 <_start@@Base+0x90>
   12608:	andeq	lr, r2, r4, lsl pc
   1260c:	andeq	r0, r0, r0

00012610 <test@@Base>:
   12610:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12614:	sub	sp, sp, #196	; 0xc4
   12618:	mov	r4, r0
   1261c:	str	r0, [sp, #56]	; 0x38
   12620:	mov	r6, r1
   12624:	mov	r5, r2
   12628:	mov	fp, r3
   1262c:	mov	r2, #44	; 0x2c
   12630:	mov	r1, #0
   12634:	add	r0, sp, #148	; 0x94
   12638:	bl	124a8 <memset@plt>
   1263c:	mov	r3, #1
   12640:	str	r3, [sp, #164]	; 0xa4
   12644:	str	r6, [sp, #152]	; 0x98
   12648:	mov	r3, #0
   1264c:	mov	r2, r3
   12650:	ldr	r1, [pc, #1608]	; 12ca0 <test@@Base+0x690>
   12654:	mov	r0, r4
   12658:	bl	1500c <flatcc_builder_start_buffer@@Base>
   1265c:	mov	sl, r5
   12660:	sub	r3, r5, r6
   12664:	cmp	r3, #1
   12668:	ble	1267c <test@@Base+0x6c>
   1266c:	ldrb	r3, [r6]
   12670:	cmp	r3, #32
   12674:	bhi	12690 <test@@Base+0x80>
   12678:	beq	12710 <test@@Base+0x100>
   1267c:	mov	r2, r5
   12680:	mov	r1, r6
   12684:	add	r0, sp, #148	; 0x94
   12688:	bl	19ac0 <flatcc_json_parser_space_ext@@Base>
   1268c:	mov	r6, r0
   12690:	cmp	r5, r6
   12694:	beq	12724 <test@@Base+0x114>
   12698:	cmp	r5, r6
   1269c:	bls	126ac <test@@Base+0x9c>
   126a0:	ldrb	r3, [r6]
   126a4:	cmp	r3, #123	; 0x7b
   126a8:	beq	12744 <test@@Base+0x134>
   126ac:	mov	r2, #123	; 0x7b
   126b0:	ldr	r1, [pc, #1516]	; 12ca4 <test@@Base+0x694>
   126b4:	ldr	r3, [pc, #1516]	; 12ca8 <test@@Base+0x698>
   126b8:	ldr	r0, [r3]
   126bc:	bl	12490 <fprintf@plt>
   126c0:	mov	r3, #17
   126c4:	mov	r2, r5
   126c8:	mov	r1, r6
   126cc:	add	r0, sp, #148	; 0x94
   126d0:	bl	199e8 <flatcc_json_parser_set_error@@Base>
   126d4:	mov	r4, r0
   126d8:	ldr	r0, [sp, #172]	; 0xac
   126dc:	cmp	r0, #0
   126e0:	bne	13e58 <test@@Base+0x1848>
   126e4:	ldr	r3, [pc, #1468]	; 12ca8 <test@@Base+0x698>
   126e8:	ldr	r3, [r3]
   126ec:	mov	r2, #15
   126f0:	mov	r1, #1
   126f4:	ldr	r0, [pc, #1456]	; 12cac <test@@Base+0x69c>
   126f8:	bl	12454 <fwrite@plt>
   126fc:	ldr	r3, [sp, #172]	; 0xac
   12700:	str	r3, [fp]
   12704:	mov	r0, r4
   12708:	add	sp, sp, #196	; 0xc4
   1270c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12710:	ldrb	r3, [r6, #1]
   12714:	cmp	r3, #32
   12718:	addhi	r6, r6, #1
   1271c:	bls	1267c <test@@Base+0x6c>
   12720:	b	12690 <test@@Base+0x80>
   12724:	ldr	r3, [pc, #1404]	; 12ca8 <test@@Base+0x698>
   12728:	ldr	r3, [r3]
   1272c:	mov	r2, #13
   12730:	mov	r1, #1
   12734:	ldr	r0, [pc, #1396]	; 12cb0 <test@@Base+0x6a0>
   12738:	bl	12454 <fwrite@plt>
   1273c:	mov	r4, r6
   12740:	b	126d8 <test@@Base+0xc8>
   12744:	add	r4, r6, #1
   12748:	sub	r3, r5, r4
   1274c:	cmp	r3, #1
   12750:	ble	12764 <test@@Base+0x154>
   12754:	ldrb	r3, [r6, #1]
   12758:	cmp	r3, #32
   1275c:	bhi	12778 <test@@Base+0x168>
   12760:	beq	12798 <test@@Base+0x188>
   12764:	mov	r2, r5
   12768:	mov	r1, r4
   1276c:	add	r0, sp, #148	; 0x94
   12770:	bl	19ac0 <flatcc_json_parser_space_ext@@Base>
   12774:	mov	r4, r0
   12778:	cmp	r5, r4
   1277c:	beq	127ac <test@@Base+0x19c>
   12780:	mov	r1, #11
   12784:	ldr	r0, [sp, #56]	; 0x38
   12788:	bl	15e38 <flatcc_builder_start_table@@Base>
   1278c:	mov	r7, sl
   12790:	str	fp, [sp, #60]	; 0x3c
   12794:	b	12d5c <test@@Base+0x74c>
   12798:	ldrb	r3, [r6, #2]
   1279c:	cmp	r3, #32
   127a0:	addhi	r4, r6, #2
   127a4:	bls	12764 <test@@Base+0x154>
   127a8:	b	12778 <test@@Base+0x168>
   127ac:	ldr	r3, [pc, #1268]	; 12ca8 <test@@Base+0x698>
   127b0:	ldr	r3, [r3]
   127b4:	mov	r2, #13
   127b8:	mov	r1, #1
   127bc:	ldr	r0, [pc, #1260]	; 12cb0 <test@@Base+0x6a0>
   127c0:	bl	12454 <fwrite@plt>
   127c4:	b	126d8 <test@@Base+0xc8>
   127c8:	mov	r3, #5
   127cc:	mov	r2, r5
   127d0:	mov	r1, r4
   127d4:	add	r0, sp, #148	; 0x94
   127d8:	bl	199e8 <flatcc_json_parser_set_error@@Base>
   127dc:	mov	r4, r0
   127e0:	b	12d8c <test@@Base+0x77c>
   127e4:	mov	r4, r5
   127e8:	b	12d8c <test@@Base+0x77c>
   127ec:	ldrb	sl, [r4, #7]
   127f0:	mov	fp, #0
   127f4:	b	12800 <test@@Base+0x1f0>
   127f8:	mov	sl, #0
   127fc:	mov	fp, sl
   12800:	ldrb	r0, [r4, #6]
   12804:	mov	r2, #0
   12808:	str	r2, [sp, #68]	; 0x44
   1280c:	lsl	r2, r0, #8
   12810:	str	r2, [sp, #64]	; 0x40
   12814:	ldrd	r0, [sp, #64]	; 0x40
   12818:	orr	r0, r0, sl
   1281c:	orr	r1, r1, fp
   12820:	mov	sl, r0
   12824:	mov	fp, r1
   12828:	ldrb	r0, [r4, #5]
   1282c:	mov	r2, #0
   12830:	str	r2, [sp, #52]	; 0x34
   12834:	lsl	r2, r0, #16
   12838:	str	r2, [sp, #48]	; 0x30
   1283c:	ldrd	r0, [sp, #48]	; 0x30
   12840:	orr	r0, r0, sl
   12844:	orr	r1, r1, fp
   12848:	mov	sl, r0
   1284c:	mov	fp, r1
   12850:	ldrb	r0, [r4, #4]
   12854:	mov	r2, #0
   12858:	str	r2, [sp, #36]	; 0x24
   1285c:	lsl	r2, r0, #24
   12860:	str	r2, [sp, #32]
   12864:	ldrd	r0, [sp, #32]
   12868:	orr	r0, r0, sl
   1286c:	orr	r1, r1, fp
   12870:	mov	sl, r0
   12874:	mov	fp, r1
   12878:	ldrb	r2, [r4, #3]
   1287c:	str	r2, [sp, #28]
   12880:	mov	r2, #0
   12884:	str	r2, [sp, #24]
   12888:	ldrd	r0, [sp, #24]
   1288c:	orr	r0, r0, sl
   12890:	orr	r1, r1, fp
   12894:	mov	sl, r0
   12898:	mov	fp, r1
   1289c:	ldrb	r0, [r4, #2]
   128a0:	lsl	r2, r0, #8
   128a4:	str	r2, [sp, #20]
   128a8:	mov	r2, #0
   128ac:	str	r2, [sp, #16]
   128b0:	ldrd	r0, [sp, #16]
   128b4:	orr	r0, r0, sl
   128b8:	orr	r1, r1, fp
   128bc:	mov	sl, r0
   128c0:	mov	fp, r1
   128c4:	ldrb	r0, [r4, #1]
   128c8:	lsl	r2, r0, #16
   128cc:	str	r2, [sp, #12]
   128d0:	mov	r2, #0
   128d4:	str	r2, [sp, #8]
   128d8:	ldrd	r0, [sp, #8]
   128dc:	orr	r0, r0, sl
   128e0:	orr	r1, r1, fp
   128e4:	mov	sl, r0
   128e8:	mov	fp, r1
   128ec:	ldrb	r0, [r4]
   128f0:	lsl	r9, r0, #24
   128f4:	mov	r8, #0
   128f8:	orr	sl, sl, r8
   128fc:	orr	fp, fp, r9
   12900:	cmp	r3, #8
   12904:	addgt	ip, r4, #8
   12908:	movle	ip, r5
   1290c:	ldr	r2, [pc, #928]	; 12cb4 <test@@Base+0x6a4>
   12910:	mvn	r3, #0
   12914:	and	r2, r2, sl
   12918:	and	r3, r3, fp
   1291c:	strd	r2, [sp, #40]	; 0x28
   12920:	add	r1, pc, #872	; 0x368
   12924:	ldrd	r0, [r1]
   12928:	cmp	r3, r1
   1292c:	cmpeq	r2, r0
   12930:	bhi	12dd4 <test@@Base+0x7c4>
   12934:	and	sl, sl, #-16777216	; 0xff000000
   12938:	add	r3, pc, #856	; 0x358
   1293c:	ldrd	r2, [r3]
   12940:	cmp	fp, r3
   12944:	cmpeq	sl, r2
   12948:	bne	129c8 <test@@Base+0x3b8>
   1294c:	add	r1, r4, #5
   12950:	ldr	r3, [sp, #160]	; 0xa0
   12954:	cmp	r3, #0
   12958:	bne	129e8 <test@@Base+0x3d8>
   1295c:	cmp	r5, r1
   12960:	beq	12bcc <test@@Base+0x5bc>
   12964:	ldrb	r3, [r4, #5]
   12968:	cmp	r3, #34	; 0x22
   1296c:	bne	12b98 <test@@Base+0x588>
   12970:	b	12bbc <test@@Base+0x5ac>
   12974:	mov	sl, #0
   12978:	mov	fp, sl
   1297c:	b	12828 <test@@Base+0x218>
   12980:	mov	sl, #0
   12984:	mov	fp, sl
   12988:	b	12850 <test@@Base+0x240>
   1298c:	mov	sl, #0
   12990:	mov	fp, sl
   12994:	b	12878 <test@@Base+0x268>
   12998:	mov	sl, #0
   1299c:	mov	fp, sl
   129a0:	b	1289c <test@@Base+0x28c>
   129a4:	mov	sl, #0
   129a8:	mov	fp, sl
   129ac:	b	128c4 <test@@Base+0x2b4>
   129b0:	mov	sl, #0
   129b4:	mov	fp, sl
   129b8:	b	128ec <test@@Base+0x2dc>
   129bc:	mov	sl, #0
   129c0:	mov	fp, sl
   129c4:	b	12900 <test@@Base+0x2f0>
   129c8:	ldr	fp, [sp, #60]	; 0x3c
   129cc:	mov	r3, #13
   129d0:	mov	r2, r5
   129d4:	mov	r1, r4
   129d8:	add	r0, sp, #148	; 0x94
   129dc:	bl	199e8 <flatcc_json_parser_set_error@@Base>
   129e0:	mov	r4, r0
   129e4:	b	126d8 <test@@Base+0xc8>
   129e8:	cmp	r5, r1
   129ec:	beq	12a88 <test@@Base+0x478>
   129f0:	ldrb	r3, [r4, #5]
   129f4:	cmp	r3, #32
   129f8:	bls	12a6c <test@@Base+0x45c>
   129fc:	add	r4, r4, #6
   12a00:	b	12a24 <test@@Base+0x414>
   12a04:	mov	r1, r4
   12a08:	cmp	r5, r1
   12a0c:	beq	13e9c <test@@Base+0x188c>
   12a10:	ldrb	r2, [r1]
   12a14:	add	r4, r4, #1
   12a18:	cmp	r2, #32
   12a1c:	bls	12a64 <test@@Base+0x454>
   12a20:	mov	r3, r2
   12a24:	sub	r1, r4, #1
   12a28:	cmp	r3, #46	; 0x2e
   12a2c:	cmpne	r3, #95	; 0x5f
   12a30:	beq	12a04 <test@@Base+0x3f4>
   12a34:	tst	r3, #128	; 0x80
   12a38:	bne	12a04 <test@@Base+0x3f4>
   12a3c:	sub	r2, r3, #48	; 0x30
   12a40:	uxtb	r2, r2
   12a44:	cmp	r2, #9
   12a48:	bls	12a04 <test@@Base+0x3f4>
   12a4c:	orr	r2, r3, #32
   12a50:	sub	r2, r2, #97	; 0x61
   12a54:	uxtb	r2, r2
   12a58:	cmp	r2, #25
   12a5c:	movls	r1, r4
   12a60:	bls	12a08 <test@@Base+0x3f8>
   12a64:	cmp	r3, #46	; 0x2e
   12a68:	beq	13eac <test@@Base+0x189c>
   12a6c:	sub	r3, r7, r1
   12a70:	cmp	r3, #1
   12a74:	ble	12a88 <test@@Base+0x478>
   12a78:	ldrb	r3, [r1]
   12a7c:	cmp	r3, #32
   12a80:	bhi	12a98 <test@@Base+0x488>
   12a84:	beq	12be4 <test@@Base+0x5d4>
   12a88:	mov	r2, r5
   12a8c:	add	r0, sp, #148	; 0x94
   12a90:	bl	19ac0 <flatcc_json_parser_space_ext@@Base>
   12a94:	mov	r1, r0
   12a98:	cmp	r5, r1
   12a9c:	beq	12bf8 <test@@Base+0x5e8>
   12aa0:	cmp	r5, r1
   12aa4:	bls	12c54 <test@@Base+0x644>
   12aa8:	ldrb	r3, [r1]
   12aac:	cmp	r3, #58	; 0x3a
   12ab0:	bne	12c54 <test@@Base+0x644>
   12ab4:	add	r4, r1, #1
   12ab8:	sub	r3, r7, r4
   12abc:	cmp	r3, #1
   12ac0:	ble	12ad4 <test@@Base+0x4c4>
   12ac4:	ldrb	r3, [r1, #1]
   12ac8:	cmp	r3, #32
   12acc:	bhi	12ae8 <test@@Base+0x4d8>
   12ad0:	beq	12c20 <test@@Base+0x610>
   12ad4:	mov	r2, r5
   12ad8:	mov	r1, r4
   12adc:	add	r0, sp, #148	; 0x94
   12ae0:	bl	19ac0 <flatcc_json_parser_space_ext@@Base>
   12ae4:	mov	r4, r0
   12ae8:	cmp	r5, r4
   12aec:	beq	12c34 <test@@Base+0x624>
   12af0:	mov	r3, #1
   12af4:	mov	r2, r3
   12af8:	mov	r1, #0
   12afc:	ldr	r0, [sp, #56]	; 0x38
   12b00:	bl	17834 <flatcc_builder_table_add@@Base>
   12b04:	subs	r6, r0, #0
   12b08:	beq	13e08 <test@@Base+0x17f8>
   12b0c:	mov	r3, #0
   12b10:	str	r3, [sp, #136]	; 0x88
   12b14:	str	r3, [sp, #140]	; 0x8c
   12b18:	mov	r2, r3
   12b1c:	add	r3, sp, #192	; 0xc0
   12b20:	str	r2, [r3, #-60]!	; 0xffffffc4
   12b24:	strb	r2, [r6]
   12b28:	add	r2, sp, #136	; 0x88
   12b2c:	str	r2, [sp]
   12b30:	mov	r2, r5
   12b34:	mov	r1, r4
   12b38:	add	r0, sp, #148	; 0x94
   12b3c:	bl	1b9dc <flatcc_json_parser_integer@@Base>
   12b40:	cmp	r4, r0
   12b44:	beq	13e10 <test@@Base+0x1800>
   12b48:	ldr	r3, [sp, #132]	; 0x84
   12b4c:	cmp	r3, #0
   12b50:	bne	12cb8 <test@@Base+0x6a8>
   12b54:	ldrd	r2, [sp, #136]	; 0x88
   12b58:	cmp	r3, #0
   12b5c:	cmpeq	r2, #255	; 0xff
   12b60:	strbls	r2, [r6]
   12b64:	bls	12cd4 <test@@Base+0x6c4>
   12b68:	mov	r3, #7
   12b6c:	mov	r2, r5
   12b70:	mov	r1, r0
   12b74:	add	r0, sp, #148	; 0x94
   12b78:	bl	199e8 <flatcc_json_parser_set_error@@Base>
   12b7c:	b	12ccc <test@@Base+0x6bc>
   12b80:	add	r1, r3, #1
   12b84:	cmp	r5, r1
   12b88:	beq	13ec4 <test@@Base+0x18b4>
   12b8c:	ldrb	r3, [r3, #1]
   12b90:	cmp	r3, #34	; 0x22
   12b94:	beq	12bbc <test@@Base+0x5ac>
   12b98:	cmp	r3, #92	; 0x5c
   12b9c:	movne	r3, r1
   12ba0:	bne	12b80 <test@@Base+0x570>
   12ba4:	sub	r3, r7, r1
   12ba8:	cmp	r3, #1
   12bac:	addgt	r3, r1, #1
   12bb0:	bgt	12b80 <test@@Base+0x570>
   12bb4:	cmp	r5, r1
   12bb8:	beq	12bcc <test@@Base+0x5bc>
   12bbc:	ldrb	r3, [r1]
   12bc0:	cmp	r3, #34	; 0x22
   12bc4:	addeq	r1, r1, #1
   12bc8:	beq	12a6c <test@@Base+0x45c>
   12bcc:	mov	r3, #20
   12bd0:	mov	r2, r5
   12bd4:	add	r0, sp, #148	; 0x94
   12bd8:	bl	199e8 <flatcc_json_parser_set_error@@Base>
   12bdc:	mov	r1, r0
   12be0:	b	12a6c <test@@Base+0x45c>
   12be4:	ldrb	r3, [r1, #1]
   12be8:	cmp	r3, #32
   12bec:	addhi	r1, r1, #1
   12bf0:	bls	12a88 <test@@Base+0x478>
   12bf4:	b	12a98 <test@@Base+0x488>
   12bf8:	mov	r6, r1
   12bfc:	ldr	fp, [sp, #60]	; 0x3c
   12c00:	ldr	r3, [pc, #160]	; 12ca8 <test@@Base+0x698>
   12c04:	ldr	r3, [r3]
   12c08:	mov	r2, #13
   12c0c:	mov	r1, #1
   12c10:	ldr	r0, [pc, #152]	; 12cb0 <test@@Base+0x6a0>
   12c14:	bl	12454 <fwrite@plt>
   12c18:	mov	r4, r6
   12c1c:	b	126d8 <test@@Base+0xc8>
   12c20:	ldrb	r3, [r1, #2]
   12c24:	cmp	r3, #32
   12c28:	addhi	r4, r1, #2
   12c2c:	bls	12ad4 <test@@Base+0x4c4>
   12c30:	b	12ae8 <test@@Base+0x4d8>
   12c34:	ldr	fp, [sp, #60]	; 0x3c
   12c38:	ldr	r3, [pc, #104]	; 12ca8 <test@@Base+0x698>
   12c3c:	ldr	r3, [r3]
   12c40:	mov	r2, #13
   12c44:	mov	r1, #1
   12c48:	ldr	r0, [pc, #96]	; 12cb0 <test@@Base+0x6a0>
   12c4c:	bl	12454 <fwrite@plt>
   12c50:	b	126d8 <test@@Base+0xc8>
   12c54:	mov	r6, r1
   12c58:	ldr	fp, [sp, #60]	; 0x3c
   12c5c:	mov	r2, #58	; 0x3a
   12c60:	ldr	r1, [pc, #60]	; 12ca4 <test@@Base+0x694>
   12c64:	ldr	r3, [pc, #60]	; 12ca8 <test@@Base+0x698>
   12c68:	ldr	r0, [r3]
   12c6c:	bl	12490 <fprintf@plt>
   12c70:	mov	r3, #17
   12c74:	mov	r2, r5
   12c78:	mov	r1, r6
   12c7c:	add	r0, sp, #148	; 0x94
   12c80:	bl	199e8 <flatcc_json_parser_set_error@@Base>
   12c84:	mov	r4, r0
   12c88:	b	126d8 <test@@Base+0xc8>
   12c8c:	nop			; (mov r0, r0)
   12c90:	mcrvs	15, 3, pc, cr3, cr15, {7}	; <UNPREDICTABLE>
   12c94:	cmnvc	r5, #-1140850687	; 0xbc000001
   12c98:	strvc	r0, [r0], #-0
   12c9c:			; <UNDEFINED> instruction: 0x66697273
   12ca0:	muleq	r1, r4, r3
   12ca4:	andeq	sp, r1, ip, lsr #7
   12ca8:	andeq	pc, r2, r8, asr r0	; <UNPREDICTABLE>
   12cac:	andeq	sp, r1, ip, ror #7
   12cb0:	muleq	r1, ip, r3
   12cb4:			; <UNDEFINED> instruction: 0xffff0000
   12cb8:	mov	r3, #8
   12cbc:	mov	r2, r5
   12cc0:	mov	r1, r0
   12cc4:	add	r0, sp, #148	; 0x94
   12cc8:	bl	199e8 <flatcc_json_parser_set_error@@Base>
   12ccc:	cmp	r4, r0
   12cd0:	beq	12dcc <test@@Base+0x7bc>
   12cd4:	sub	r3, r7, r0
   12cd8:	cmp	r3, #1
   12cdc:	ble	12cf0 <test@@Base+0x6e0>
   12ce0:	ldrb	r3, [r0]
   12ce4:	cmp	r3, #32
   12ce8:	bhi	12d00 <test@@Base+0x6f0>
   12cec:	beq	13d24 <test@@Base+0x1714>
   12cf0:	mov	r2, r5
   12cf4:	mov	r1, r0
   12cf8:	add	r0, sp, #148	; 0x94
   12cfc:	bl	19ac0 <flatcc_json_parser_space_ext@@Base>
   12d00:	cmp	r5, r0
   12d04:	beq	13d38 <test@@Base+0x1728>
   12d08:	ldrb	r3, [r0]
   12d0c:	cmp	r3, #44	; 0x2c
   12d10:	bne	13d94 <test@@Base+0x1784>
   12d14:	add	r4, r0, #1
   12d18:	sub	r3, r7, r4
   12d1c:	cmp	r3, #1
   12d20:	ble	12d34 <test@@Base+0x724>
   12d24:	ldrb	r3, [r0, #1]
   12d28:	cmp	r3, #32
   12d2c:	bhi	12d48 <test@@Base+0x738>
   12d30:	beq	13d60 <test@@Base+0x1750>
   12d34:	mov	r2, r5
   12d38:	mov	r1, r4
   12d3c:	add	r0, sp, #148	; 0x94
   12d40:	bl	19ac0 <flatcc_json_parser_space_ext@@Base>
   12d44:	mov	r4, r0
   12d48:	cmp	r5, r4
   12d4c:	beq	13d74 <test@@Base+0x1764>
   12d50:	ldrb	r3, [r4]
   12d54:	cmp	r3, #125	; 0x7d
   12d58:	beq	13f8c <test@@Base+0x197c>
   12d5c:	cmp	r4, r5
   12d60:	beq	127e4 <test@@Base+0x1d4>
   12d64:	ldrb	r3, [r4]
   12d68:	cmp	r3, #34	; 0x22
   12d6c:	addeq	r4, r4, #1
   12d70:	moveq	r3, #0
   12d74:	streq	r3, [sp, #160]	; 0xa0
   12d78:	beq	12d8c <test@@Base+0x77c>
   12d7c:	cmp	r3, #46	; 0x2e
   12d80:	movne	r3, #1
   12d84:	strne	r3, [sp, #160]	; 0xa0
   12d88:	beq	127c8 <test@@Base+0x1b8>
   12d8c:	sub	r3, r7, r4
   12d90:	cmp	r3, #8
   12d94:	movcc	r2, r3
   12d98:	movcs	r2, #8
   12d9c:	sub	r2, r2, #1
   12da0:	cmp	r2, #7
   12da4:	ldrls	pc, [pc, r2, lsl #2]
   12da8:	b	129bc <test@@Base+0x3ac>
   12dac:			; <UNDEFINED> instruction: 0x000129b0
   12db0:	andeq	r2, r1, r4, lsr #19
   12db4:	muleq	r1, r8, r9
   12db8:	andeq	r2, r1, ip, lsl #19
   12dbc:	andeq	r2, r1, r0, lsl #19
   12dc0:	andeq	r2, r1, r4, ror r9
   12dc4:	strdeq	r2, [r1], -r8
   12dc8:	andeq	r2, r1, ip, ror #15
   12dcc:	ldr	fp, [sp, #60]	; 0x3c
   12dd0:	b	126d8 <test@@Base+0xc8>
   12dd4:	mov	r0, #0
   12dd8:	add	r3, pc, #848	; 0x350
   12ddc:	ldrd	r2, [r3]
   12de0:	cmp	fp, r3
   12de4:	cmpeq	r0, r2
   12de8:	bhi	13938 <test@@Base+0x1328>
   12dec:	add	r3, pc, #836	; 0x344
   12df0:	ldrd	r2, [r3]
   12df4:	cmp	fp, r3
   12df8:	cmpeq	sl, r2
   12dfc:	bhi	130b4 <test@@Base+0xaa4>
   12e00:	add	r3, pc, #824	; 0x338
   12e04:	ldrd	r2, [r3]
   12e08:	ldrd	r0, [sp, #40]	; 0x28
   12e0c:	cmp	r1, r3
   12e10:	cmpeq	r0, r2
   12e14:	bne	12e40 <test@@Base+0x830>
   12e18:	add	r1, r4, #6
   12e1c:	ldr	r3, [sp, #160]	; 0xa0
   12e20:	cmp	r3, #0
   12e24:	bne	12e60 <test@@Base+0x850>
   12e28:	cmp	r5, r1
   12e2c:	beq	12ff4 <test@@Base+0x9e4>
   12e30:	ldrb	r3, [r4, #6]
   12e34:	cmp	r3, #34	; 0x22
   12e38:	bne	12fc0 <test@@Base+0x9b0>
   12e3c:	b	12fe4 <test@@Base+0x9d4>
   12e40:	ldr	fp, [sp, #60]	; 0x3c
   12e44:	mov	r3, #13
   12e48:	mov	r2, r5
   12e4c:	mov	r1, r4
   12e50:	add	r0, sp, #148	; 0x94
   12e54:	bl	199e8 <flatcc_json_parser_set_error@@Base>
   12e58:	mov	r4, r0
   12e5c:	b	126d8 <test@@Base+0xc8>
   12e60:	cmp	r5, r1
   12e64:	beq	12f00 <test@@Base+0x8f0>
   12e68:	ldrb	r3, [r4, #6]
   12e6c:	cmp	r3, #32
   12e70:	bls	12ee4 <test@@Base+0x8d4>
   12e74:	add	r4, r4, #7
   12e78:	b	12e9c <test@@Base+0x88c>
   12e7c:	mov	r1, r4
   12e80:	cmp	r5, r1
   12e84:	beq	13ecc <test@@Base+0x18bc>
   12e88:	ldrb	r2, [r1]
   12e8c:	add	r4, r4, #1
   12e90:	cmp	r2, #32
   12e94:	bls	12edc <test@@Base+0x8cc>
   12e98:	mov	r3, r2
   12e9c:	sub	r1, r4, #1
   12ea0:	cmp	r3, #46	; 0x2e
   12ea4:	cmpne	r3, #95	; 0x5f
   12ea8:	beq	12e7c <test@@Base+0x86c>
   12eac:	tst	r3, #128	; 0x80
   12eb0:	bne	12e7c <test@@Base+0x86c>
   12eb4:	sub	r2, r3, #48	; 0x30
   12eb8:	uxtb	r2, r2
   12ebc:	cmp	r2, #9
   12ec0:	bls	12e7c <test@@Base+0x86c>
   12ec4:	orr	r2, r3, #32
   12ec8:	sub	r2, r2, #97	; 0x61
   12ecc:	uxtb	r2, r2
   12ed0:	cmp	r2, #25
   12ed4:	movls	r1, r4
   12ed8:	bls	12e80 <test@@Base+0x870>
   12edc:	cmp	r3, #46	; 0x2e
   12ee0:	beq	13edc <test@@Base+0x18cc>
   12ee4:	sub	r3, r7, r1
   12ee8:	cmp	r3, #1
   12eec:	ble	12f00 <test@@Base+0x8f0>
   12ef0:	ldrb	r3, [r1]
   12ef4:	cmp	r3, #32
   12ef8:	bhi	12f10 <test@@Base+0x900>
   12efc:	beq	1300c <test@@Base+0x9fc>
   12f00:	mov	r2, r5
   12f04:	add	r0, sp, #148	; 0x94
   12f08:	bl	19ac0 <flatcc_json_parser_space_ext@@Base>
   12f0c:	mov	r1, r0
   12f10:	cmp	r5, r1
   12f14:	beq	13020 <test@@Base+0xa10>
   12f18:	cmp	r5, r1
   12f1c:	bls	1307c <test@@Base+0xa6c>
   12f20:	ldrb	r3, [r1]
   12f24:	cmp	r3, #58	; 0x3a
   12f28:	bne	1307c <test@@Base+0xa6c>
   12f2c:	add	r4, r1, #1
   12f30:	sub	r3, r7, r4
   12f34:	cmp	r3, #1
   12f38:	ble	12f4c <test@@Base+0x93c>
   12f3c:	ldrb	r3, [r1, #1]
   12f40:	cmp	r3, #32
   12f44:	bhi	12f60 <test@@Base+0x950>
   12f48:	beq	13048 <test@@Base+0xa38>
   12f4c:	mov	r2, r5
   12f50:	mov	r1, r4
   12f54:	add	r0, sp, #148	; 0x94
   12f58:	bl	19ac0 <flatcc_json_parser_space_ext@@Base>
   12f5c:	mov	r4, r0
   12f60:	cmp	r5, r4
   12f64:	beq	1305c <test@@Base+0xa4c>
   12f68:	mov	r3, #8
   12f6c:	mov	r2, r3
   12f70:	mov	r1, #1
   12f74:	ldr	r0, [sp, #56]	; 0x38
   12f78:	bl	17834 <flatcc_builder_table_add@@Base>
   12f7c:	subs	r3, r0, #0
   12f80:	beq	13e18 <test@@Base+0x1808>
   12f84:	mov	r2, r5
   12f88:	mov	r1, r4
   12f8c:	add	r0, sp, #148	; 0x94
   12f90:	bl	1aa4c <flatcc_json_parser_double@@Base>
   12f94:	cmp	r0, r4
   12f98:	bne	12cd4 <test@@Base+0x6c4>
   12f9c:	ldr	fp, [sp, #60]	; 0x3c
   12fa0:	mov	r4, r0
   12fa4:	b	126d8 <test@@Base+0xc8>
   12fa8:	add	r1, r3, #1
   12fac:	cmp	r5, r1
   12fb0:	beq	13ef4 <test@@Base+0x18e4>
   12fb4:	ldrb	r3, [r3, #1]
   12fb8:	cmp	r3, #34	; 0x22
   12fbc:	beq	12fe4 <test@@Base+0x9d4>
   12fc0:	cmp	r3, #92	; 0x5c
   12fc4:	movne	r3, r1
   12fc8:	bne	12fa8 <test@@Base+0x998>
   12fcc:	sub	r3, r7, r1
   12fd0:	cmp	r3, #1
   12fd4:	addgt	r3, r1, #1
   12fd8:	bgt	12fa8 <test@@Base+0x998>
   12fdc:	cmp	r5, r1
   12fe0:	beq	12ff4 <test@@Base+0x9e4>
   12fe4:	ldrb	r3, [r1]
   12fe8:	cmp	r3, #34	; 0x22
   12fec:	addeq	r1, r1, #1
   12ff0:	beq	12ee4 <test@@Base+0x8d4>
   12ff4:	mov	r3, #20
   12ff8:	mov	r2, r5
   12ffc:	add	r0, sp, #148	; 0x94
   13000:	bl	199e8 <flatcc_json_parser_set_error@@Base>
   13004:	mov	r1, r0
   13008:	b	12ee4 <test@@Base+0x8d4>
   1300c:	ldrb	r3, [r1, #1]
   13010:	cmp	r3, #32
   13014:	addhi	r1, r1, #1
   13018:	bls	12f00 <test@@Base+0x8f0>
   1301c:	b	12f10 <test@@Base+0x900>
   13020:	mov	r6, r1
   13024:	ldr	fp, [sp, #60]	; 0x3c
   13028:	ldr	r3, [pc, #288]	; 13150 <test@@Base+0xb40>
   1302c:	ldr	r3, [r3]
   13030:	mov	r2, #13
   13034:	mov	r1, #1
   13038:	ldr	r0, [pc, #276]	; 13154 <test@@Base+0xb44>
   1303c:	bl	12454 <fwrite@plt>
   13040:	mov	r4, r6
   13044:	b	126d8 <test@@Base+0xc8>
   13048:	ldrb	r3, [r1, #2]
   1304c:	cmp	r3, #32
   13050:	addhi	r4, r1, #2
   13054:	bls	12f4c <test@@Base+0x93c>
   13058:	b	12f60 <test@@Base+0x950>
   1305c:	ldr	fp, [sp, #60]	; 0x3c
   13060:	ldr	r3, [pc, #232]	; 13150 <test@@Base+0xb40>
   13064:	ldr	r3, [r3]
   13068:	mov	r2, #13
   1306c:	mov	r1, #1
   13070:	ldr	r0, [pc, #220]	; 13154 <test@@Base+0xb44>
   13074:	bl	12454 <fwrite@plt>
   13078:	b	126d8 <test@@Base+0xc8>
   1307c:	mov	r6, r1
   13080:	ldr	fp, [sp, #60]	; 0x3c
   13084:	mov	r2, #58	; 0x3a
   13088:	ldr	r1, [pc, #200]	; 13158 <test@@Base+0xb48>
   1308c:	ldr	r3, [pc, #188]	; 13150 <test@@Base+0xb40>
   13090:	ldr	r0, [r3]
   13094:	bl	12490 <fprintf@plt>
   13098:	mov	r3, #17
   1309c:	mov	r2, r5
   130a0:	mov	r1, r6
   130a4:	add	r0, sp, #148	; 0x94
   130a8:	bl	199e8 <flatcc_json_parser_set_error@@Base>
   130ac:	mov	r4, r0
   130b0:	b	126d8 <test@@Base+0xc8>
   130b4:	add	r3, pc, #140	; 0x8c
   130b8:	ldrd	r2, [r3]
   130bc:	cmp	fp, r3
   130c0:	cmpeq	sl, r2
   130c4:	bne	13104 <test@@Base+0xaf4>
   130c8:	sub	r3, r7, ip
   130cc:	cmp	r3, #8
   130d0:	movcs	r3, #8
   130d4:	sub	r3, r3, #1
   130d8:	cmp	r3, #7
   130dc:	ldrls	pc, [pc, r3, lsl #2]
   130e0:	b	132d8 <test@@Base+0xcc8>
   130e4:	andeq	r3, r1, ip, asr #5
   130e8:	andeq	r3, r1, r0, asr #5
   130ec:			; <UNDEFINED> instruction: 0x000132b4
   130f0:	andeq	r3, r1, r8, lsr #5
   130f4:	muleq	r1, ip, r2
   130f8:	muleq	r1, r0, r2
   130fc:	andeq	r3, r1, ip, asr r1
   13100:	andeq	r3, r1, r4, lsr #2
   13104:	ldr	fp, [sp, #60]	; 0x3c
   13108:	mov	r3, #13
   1310c:	mov	r2, r5
   13110:	mov	r1, r4
   13114:	add	r0, sp, #148	; 0x94
   13118:	bl	199e8 <flatcc_json_parser_set_error@@Base>
   1311c:	mov	r4, r0
   13120:	b	126d8 <test@@Base+0xc8>
   13124:	mov	r1, #0
   13128:	b	13164 <test@@Base+0xb54>
   1312c:	nop			; (mov r0, r0)
   13130:			; <UNDEFINED> instruction: 0xffffffff
   13134:	bvc	1d6e30c <__bss_end__@@Base+0x1d3f2ac>
   13138:	mcrvs	3, 3, r7, cr4, cr15, {0}
   1313c:	cmnvc	r5, #-1140850687	; 0xbc000001
   13140:	cdpvs	0, 6, cr0, cr4, cr0, {0}
   13144:	cmnvc	r5, #-1140850687	; 0xbc000001
   13148:	cdpvs	3, 6, cr7, cr4, cr0, {1}
   1314c:	cmnvc	r5, #-1140850687	; 0xbc000001
   13150:	andeq	pc, r2, r8, asr r0	; <UNPREDICTABLE>
   13154:	muleq	r1, ip, r3
   13158:	andeq	sp, r1, ip, lsr #7
   1315c:	mov	r0, #0
   13160:	mov	r1, r0
   13164:	ldrb	r2, [ip, #6]
   13168:	mov	lr, #0
   1316c:	str	lr, [sp, #124]	; 0x7c
   13170:	lsl	r3, r2, #8
   13174:	str	r3, [sp, #120]	; 0x78
   13178:	ldrd	r2, [sp, #120]	; 0x78
   1317c:	orr	r3, r3, r1
   13180:	ldrb	r0, [ip, #5]
   13184:	mov	lr, #0
   13188:	str	lr, [sp, #116]	; 0x74
   1318c:	lsl	r1, r0, #16
   13190:	str	r1, [sp, #112]	; 0x70
   13194:	ldrd	r0, [sp, #112]	; 0x70
   13198:	orr	r1, r1, r3
   1319c:	mov	r3, r1
   131a0:	ldrb	r0, [ip, #4]
   131a4:	mov	lr, #0
   131a8:	str	lr, [sp, #108]	; 0x6c
   131ac:	lsl	r1, r0, #24
   131b0:	str	r1, [sp, #104]	; 0x68
   131b4:	ldrd	r0, [sp, #104]	; 0x68
   131b8:	orr	r1, r1, r3
   131bc:	mov	r3, r1
   131c0:	ldrb	r1, [ip, #3]
   131c4:	str	r1, [sp, #100]	; 0x64
   131c8:	mov	r1, #0
   131cc:	str	r1, [sp, #96]	; 0x60
   131d0:	ldrd	r0, [sp, #96]	; 0x60
   131d4:	orr	r1, r1, r3
   131d8:	mov	r3, r1
   131dc:	ldrb	r0, [ip, #2]
   131e0:	lsl	r1, r0, #8
   131e4:	str	r1, [sp, #92]	; 0x5c
   131e8:	mov	r1, #0
   131ec:	str	r1, [sp, #88]	; 0x58
   131f0:	ldrd	r0, [sp, #88]	; 0x58
   131f4:	orr	r1, r1, r3
   131f8:	mov	r3, r1
   131fc:	ldrb	r0, [ip, #1]
   13200:	lsl	r1, r0, #16
   13204:	str	r1, [sp, #84]	; 0x54
   13208:	mov	r1, #0
   1320c:	str	r1, [sp, #80]	; 0x50
   13210:	ldrd	r0, [sp, #80]	; 0x50
   13214:	orr	r1, r1, r3
   13218:	mov	r3, r1
   1321c:	ldrb	r0, [ip]
   13220:	lsl	r1, r0, #24
   13224:	str	r1, [sp, #76]	; 0x4c
   13228:	mov	r1, #0
   1322c:	str	r1, [sp, #72]	; 0x48
   13230:	ldrd	r0, [sp, #72]	; 0x48
   13234:	orr	r1, r1, r3
   13238:	mov	r3, r1
   1323c:	mov	r2, #0
   13240:	add	r1, pc, #936	; 0x3a8
   13244:	ldrd	r0, [r1]
   13248:	cmp	r3, r1
   1324c:	cmpeq	r2, r0
   13250:	bhi	1360c <test@@Base+0xffc>
   13254:	add	r1, pc, #924	; 0x39c
   13258:	ldrd	r0, [r1]
   1325c:	cmp	r3, r1
   13260:	cmpeq	r2, r0
   13264:	bne	132e4 <test@@Base+0xcd4>
   13268:	add	r1, ip, #4
   1326c:	ldr	r3, [sp, #160]	; 0xa0
   13270:	cmp	r3, #0
   13274:	bne	13304 <test@@Base+0xcf4>
   13278:	cmp	r5, r1
   1327c:	beq	134e0 <test@@Base+0xed0>
   13280:	ldrb	r3, [ip, #4]
   13284:	cmp	r3, #34	; 0x22
   13288:	bne	134ac <test@@Base+0xe9c>
   1328c:	b	134d0 <test@@Base+0xec0>
   13290:	mov	r2, #0
   13294:	mov	r3, r2
   13298:	b	13180 <test@@Base+0xb70>
   1329c:	mov	r2, #0
   132a0:	mov	r3, r2
   132a4:	b	131a0 <test@@Base+0xb90>
   132a8:	mov	r2, #0
   132ac:	mov	r3, r2
   132b0:	b	131c0 <test@@Base+0xbb0>
   132b4:	mov	r2, #0
   132b8:	mov	r3, r2
   132bc:	b	131dc <test@@Base+0xbcc>
   132c0:	mov	r2, #0
   132c4:	mov	r3, r2
   132c8:	b	131fc <test@@Base+0xbec>
   132cc:	mov	r2, #0
   132d0:	mov	r3, r2
   132d4:	b	1321c <test@@Base+0xc0c>
   132d8:	mov	r2, #0
   132dc:	mov	r3, r2
   132e0:	b	1323c <test@@Base+0xc2c>
   132e4:	ldr	fp, [sp, #60]	; 0x3c
   132e8:	mov	r3, #13
   132ec:	mov	r2, r5
   132f0:	mov	r1, ip
   132f4:	add	r0, sp, #148	; 0x94
   132f8:	bl	199e8 <flatcc_json_parser_set_error@@Base>
   132fc:	mov	r4, r0
   13300:	b	126d8 <test@@Base+0xc8>
   13304:	cmp	r5, r1
   13308:	beq	133a4 <test@@Base+0xd94>
   1330c:	ldrb	r3, [ip, #4]
   13310:	cmp	r3, #32
   13314:	bls	13388 <test@@Base+0xd78>
   13318:	add	ip, ip, #5
   1331c:	b	13340 <test@@Base+0xd30>
   13320:	mov	r1, ip
   13324:	cmp	r5, r1
   13328:	beq	13efc <test@@Base+0x18ec>
   1332c:	ldrb	r2, [r1]
   13330:	add	ip, ip, #1
   13334:	cmp	r2, #32
   13338:	bls	13380 <test@@Base+0xd70>
   1333c:	mov	r3, r2
   13340:	sub	r1, ip, #1
   13344:	cmp	r3, #46	; 0x2e
   13348:	cmpne	r3, #95	; 0x5f
   1334c:	beq	13320 <test@@Base+0xd10>
   13350:	tst	r3, #128	; 0x80
   13354:	bne	13320 <test@@Base+0xd10>
   13358:	sub	r2, r3, #48	; 0x30
   1335c:	uxtb	r2, r2
   13360:	cmp	r2, #9
   13364:	bls	13320 <test@@Base+0xd10>
   13368:	orr	r2, r3, #32
   1336c:	sub	r2, r2, #97	; 0x61
   13370:	uxtb	r2, r2
   13374:	cmp	r2, #25
   13378:	movls	r1, ip
   1337c:	bls	13324 <test@@Base+0xd14>
   13380:	cmp	r3, #46	; 0x2e
   13384:	beq	13f0c <test@@Base+0x18fc>
   13388:	sub	r3, r7, r1
   1338c:	cmp	r3, #1
   13390:	ble	133a4 <test@@Base+0xd94>
   13394:	ldrb	r3, [r1]
   13398:	cmp	r3, #32
   1339c:	bhi	133b4 <test@@Base+0xda4>
   133a0:	beq	134f8 <test@@Base+0xee8>
   133a4:	mov	r2, r5
   133a8:	add	r0, sp, #148	; 0x94
   133ac:	bl	19ac0 <flatcc_json_parser_space_ext@@Base>
   133b0:	mov	r1, r0
   133b4:	cmp	r5, r1
   133b8:	beq	1350c <test@@Base+0xefc>
   133bc:	cmp	r5, r1
   133c0:	bls	13568 <test@@Base+0xf58>
   133c4:	ldrb	r3, [r1]
   133c8:	cmp	r3, #58	; 0x3a
   133cc:	bne	13568 <test@@Base+0xf58>
   133d0:	add	r4, r1, #1
   133d4:	sub	r3, r7, r4
   133d8:	cmp	r3, #1
   133dc:	ble	133f0 <test@@Base+0xde0>
   133e0:	ldrb	r3, [r1, #1]
   133e4:	cmp	r3, #32
   133e8:	bhi	13404 <test@@Base+0xdf4>
   133ec:	beq	13534 <test@@Base+0xf24>
   133f0:	mov	r2, r5
   133f4:	mov	r1, r4
   133f8:	add	r0, sp, #148	; 0x94
   133fc:	bl	19ac0 <flatcc_json_parser_space_ext@@Base>
   13400:	mov	r4, r0
   13404:	cmp	r5, r4
   13408:	beq	13548 <test@@Base+0xf38>
   1340c:	mov	r3, #8
   13410:	mov	r2, r3
   13414:	mov	r1, #3
   13418:	ldr	r0, [sp, #56]	; 0x38
   1341c:	bl	17834 <flatcc_builder_table_add@@Base>
   13420:	subs	r6, r0, #0
   13424:	beq	13e20 <test@@Base+0x1810>
   13428:	mov	r3, #0
   1342c:	str	r3, [sp, #136]	; 0x88
   13430:	str	r3, [sp, #140]	; 0x8c
   13434:	add	r3, sp, #192	; 0xc0
   13438:	mov	r2, #0
   1343c:	str	r2, [r3, #-60]!	; 0xffffffc4
   13440:	str	r2, [r6]
   13444:	str	r2, [r6, #4]
   13448:	add	r2, sp, #136	; 0x88
   1344c:	str	r2, [sp]
   13450:	mov	r2, r5
   13454:	mov	r1, r4
   13458:	add	r0, sp, #148	; 0x94
   1345c:	bl	1b9dc <flatcc_json_parser_integer@@Base>
   13460:	cmp	r4, r0
   13464:	beq	13e28 <test@@Base+0x1818>
   13468:	ldrd	r2, [sp, #136]	; 0x88
   1346c:	ldr	r1, [sp, #132]	; 0x84
   13470:	cmp	r1, #0
   13474:	beq	135c4 <test@@Base+0xfb4>
   13478:	cmp	r3, #-2147483648	; 0x80000000
   1347c:	cmpeq	r2, #0
   13480:	bhi	135a0 <test@@Base+0xf90>
   13484:	rsbs	r2, r2, #0
   13488:	rsc	r3, r3, #0
   1348c:	strd	r2, [r6]
   13490:	b	12cd4 <test@@Base+0x6c4>
   13494:	add	r1, r3, #1
   13498:	cmp	r5, r1
   1349c:	beq	13f24 <test@@Base+0x1914>
   134a0:	ldrb	r3, [r3, #1]
   134a4:	cmp	r3, #34	; 0x22
   134a8:	beq	134d0 <test@@Base+0xec0>
   134ac:	cmp	r3, #92	; 0x5c
   134b0:	movne	r3, r1
   134b4:	bne	13494 <test@@Base+0xe84>
   134b8:	sub	r3, r7, r1
   134bc:	cmp	r3, #1
   134c0:	addgt	r3, r1, #1
   134c4:	bgt	13494 <test@@Base+0xe84>
   134c8:	cmp	r5, r1
   134cc:	beq	134e0 <test@@Base+0xed0>
   134d0:	ldrb	r3, [r1]
   134d4:	cmp	r3, #34	; 0x22
   134d8:	addeq	r1, r1, #1
   134dc:	beq	13388 <test@@Base+0xd78>
   134e0:	mov	r3, #20
   134e4:	mov	r2, r5
   134e8:	add	r0, sp, #148	; 0x94
   134ec:	bl	199e8 <flatcc_json_parser_set_error@@Base>
   134f0:	mov	r1, r0
   134f4:	b	13388 <test@@Base+0xd78>
   134f8:	ldrb	r3, [r1, #1]
   134fc:	cmp	r3, #32
   13500:	addhi	r1, r1, #1
   13504:	bls	133a4 <test@@Base+0xd94>
   13508:	b	133b4 <test@@Base+0xda4>
   1350c:	mov	r6, r1
   13510:	ldr	fp, [sp, #60]	; 0x3c
   13514:	ldr	r3, [pc, #228]	; 13600 <test@@Base+0xff0>
   13518:	ldr	r3, [r3]
   1351c:	mov	r2, #13
   13520:	mov	r1, #1
   13524:	ldr	r0, [pc, #216]	; 13604 <test@@Base+0xff4>
   13528:	bl	12454 <fwrite@plt>
   1352c:	mov	r4, r6
   13530:	b	126d8 <test@@Base+0xc8>
   13534:	ldrb	r3, [r1, #2]
   13538:	cmp	r3, #32
   1353c:	addhi	r4, r1, #2
   13540:	bls	133f0 <test@@Base+0xde0>
   13544:	b	13404 <test@@Base+0xdf4>
   13548:	ldr	fp, [sp, #60]	; 0x3c
   1354c:	ldr	r3, [pc, #172]	; 13600 <test@@Base+0xff0>
   13550:	ldr	r3, [r3]
   13554:	mov	r2, #13
   13558:	mov	r1, #1
   1355c:	ldr	r0, [pc, #160]	; 13604 <test@@Base+0xff4>
   13560:	bl	12454 <fwrite@plt>
   13564:	b	126d8 <test@@Base+0xc8>
   13568:	mov	r6, r1
   1356c:	ldr	fp, [sp, #60]	; 0x3c
   13570:	mov	r2, #58	; 0x3a
   13574:	ldr	r1, [pc, #140]	; 13608 <test@@Base+0xff8>
   13578:	ldr	r3, [pc, #128]	; 13600 <test@@Base+0xff0>
   1357c:	ldr	r0, [r3]
   13580:	bl	12490 <fprintf@plt>
   13584:	mov	r3, #17
   13588:	mov	r2, r5
   1358c:	mov	r1, r6
   13590:	add	r0, sp, #148	; 0x94
   13594:	bl	199e8 <flatcc_json_parser_set_error@@Base>
   13598:	mov	r4, r0
   1359c:	b	126d8 <test@@Base+0xc8>
   135a0:	mov	r3, #8
   135a4:	mov	r2, r5
   135a8:	mov	r1, r0
   135ac:	add	r0, sp, #148	; 0x94
   135b0:	bl	199e8 <flatcc_json_parser_set_error@@Base>
   135b4:	cmp	r4, r0
   135b8:	bne	12cd4 <test@@Base+0x6c4>
   135bc:	ldr	fp, [sp, #60]	; 0x3c
   135c0:	b	126d8 <test@@Base+0xc8>
   135c4:	cmp	r2, #0
   135c8:	sbcs	r1, r3, #0
   135cc:	strdge	r2, [r6]
   135d0:	bge	12cd4 <test@@Base+0x6c4>
   135d4:	mov	r3, #7
   135d8:	mov	r2, r5
   135dc:	mov	r1, r0
   135e0:	add	r0, sp, #148	; 0x94
   135e4:	bl	199e8 <flatcc_json_parser_set_error@@Base>
   135e8:	b	135b4 <test@@Base+0xfa4>
   135ec:	nop			; (mov r0, r0)
   135f0:			; <UNDEFINED> instruction: 0xffffffff
   135f4:	stclvs	6, cr6, [r5], #-460	; 0xfffffe34
   135f8:	andeq	r0, r0, r0
   135fc:	stfvse	f6, [r5], #-400	; 0xfffffe70
   13600:	andeq	pc, r2, r8, asr r0	; <UNPREDICTABLE>
   13604:	muleq	r1, ip, r3
   13608:	andeq	sp, r1, ip, lsr #7
   1360c:	add	r1, pc, #924	; 0x39c
   13610:	ldrd	r0, [r1]
   13614:	cmp	r3, r1
   13618:	cmpeq	r2, r0
   1361c:	bne	13648 <test@@Base+0x1038>
   13620:	add	r1, ip, #4
   13624:	ldr	r3, [sp, #160]	; 0xa0
   13628:	cmp	r3, #0
   1362c:	bne	13668 <test@@Base+0x1058>
   13630:	cmp	r5, r1
   13634:	beq	13854 <test@@Base+0x1244>
   13638:	ldrb	r3, [ip, #4]
   1363c:	cmp	r3, #34	; 0x22
   13640:	bne	13820 <test@@Base+0x1210>
   13644:	b	13844 <test@@Base+0x1234>
   13648:	ldr	fp, [sp, #60]	; 0x3c
   1364c:	mov	r3, #13
   13650:	mov	r2, r5
   13654:	mov	r1, ip
   13658:	add	r0, sp, #148	; 0x94
   1365c:	bl	199e8 <flatcc_json_parser_set_error@@Base>
   13660:	mov	r4, r0
   13664:	b	126d8 <test@@Base+0xc8>
   13668:	cmp	r5, r1
   1366c:	beq	13708 <test@@Base+0x10f8>
   13670:	ldrb	r3, [ip, #4]
   13674:	cmp	r3, #32
   13678:	bls	136ec <test@@Base+0x10dc>
   1367c:	add	ip, ip, #5
   13680:	b	136a4 <test@@Base+0x1094>
   13684:	mov	r1, ip
   13688:	cmp	r5, r1
   1368c:	beq	13f2c <test@@Base+0x191c>
   13690:	ldrb	r2, [r1]
   13694:	add	ip, ip, #1
   13698:	cmp	r2, #32
   1369c:	bls	136e4 <test@@Base+0x10d4>
   136a0:	mov	r3, r2
   136a4:	sub	r1, ip, #1
   136a8:	cmp	r3, #46	; 0x2e
   136ac:	cmpne	r3, #95	; 0x5f
   136b0:	beq	13684 <test@@Base+0x1074>
   136b4:	tst	r3, #128	; 0x80
   136b8:	bne	13684 <test@@Base+0x1074>
   136bc:	sub	r2, r3, #48	; 0x30
   136c0:	uxtb	r2, r2
   136c4:	cmp	r2, #9
   136c8:	bls	13684 <test@@Base+0x1074>
   136cc:	orr	r2, r3, #32
   136d0:	sub	r2, r2, #97	; 0x61
   136d4:	uxtb	r2, r2
   136d8:	cmp	r2, #25
   136dc:	movls	r1, ip
   136e0:	bls	13688 <test@@Base+0x1078>
   136e4:	cmp	r3, #46	; 0x2e
   136e8:	beq	13f3c <test@@Base+0x192c>
   136ec:	sub	r3, r7, r1
   136f0:	cmp	r3, #1
   136f4:	ble	13708 <test@@Base+0x10f8>
   136f8:	ldrb	r3, [r1]
   136fc:	cmp	r3, #32
   13700:	bhi	13718 <test@@Base+0x1108>
   13704:	beq	1386c <test@@Base+0x125c>
   13708:	mov	r2, r5
   1370c:	add	r0, sp, #148	; 0x94
   13710:	bl	19ac0 <flatcc_json_parser_space_ext@@Base>
   13714:	mov	r1, r0
   13718:	cmp	r5, r1
   1371c:	beq	13880 <test@@Base+0x1270>
   13720:	cmp	r5, r1
   13724:	bls	138dc <test@@Base+0x12cc>
   13728:	ldrb	r3, [r1]
   1372c:	cmp	r3, #58	; 0x3a
   13730:	bne	138dc <test@@Base+0x12cc>
   13734:	add	r4, r1, #1
   13738:	sub	r3, r7, r4
   1373c:	cmp	r3, #1
   13740:	ble	13754 <test@@Base+0x1144>
   13744:	ldrb	r3, [r1, #1]
   13748:	cmp	r3, #32
   1374c:	bhi	13768 <test@@Base+0x1158>
   13750:	beq	138a8 <test@@Base+0x1298>
   13754:	mov	r2, r5
   13758:	mov	r1, r4
   1375c:	add	r0, sp, #148	; 0x94
   13760:	bl	19ac0 <flatcc_json_parser_space_ext@@Base>
   13764:	mov	r4, r0
   13768:	cmp	r5, r4
   1376c:	beq	138bc <test@@Base+0x12ac>
   13770:	mov	r3, #4
   13774:	mov	r2, r3
   13778:	mov	r1, #2
   1377c:	ldr	r0, [sp, #56]	; 0x38
   13780:	bl	17834 <flatcc_builder_table_add@@Base>
   13784:	subs	r6, r0, #0
   13788:	beq	13e30 <test@@Base+0x1820>
   1378c:	mov	r3, #0
   13790:	str	r3, [sp, #136]	; 0x88
   13794:	str	r3, [sp, #140]	; 0x8c
   13798:	mov	r2, r3
   1379c:	add	r3, sp, #192	; 0xc0
   137a0:	str	r2, [r3, #-60]!	; 0xffffffc4
   137a4:	str	r2, [r6]
   137a8:	add	r2, sp, #136	; 0x88
   137ac:	str	r2, [sp]
   137b0:	mov	r2, r5
   137b4:	mov	r1, r4
   137b8:	add	r0, sp, #148	; 0x94
   137bc:	bl	1b9dc <flatcc_json_parser_integer@@Base>
   137c0:	cmp	r4, r0
   137c4:	beq	13e38 <test@@Base+0x1828>
   137c8:	ldr	r3, [sp, #132]	; 0x84
   137cc:	cmp	r3, #0
   137d0:	bne	13914 <test@@Base+0x1304>
   137d4:	ldrd	r2, [sp, #136]	; 0x88
   137d8:	mvn	sl, #0
   137dc:	mov	fp, #0
   137e0:	cmp	r3, fp
   137e4:	cmpeq	r2, sl
   137e8:	strls	r2, [r6]
   137ec:	bls	12cd4 <test@@Base+0x6c4>
   137f0:	mov	r3, #7
   137f4:	mov	r2, r5
   137f8:	mov	r1, r0
   137fc:	add	r0, sp, #148	; 0x94
   13800:	bl	199e8 <flatcc_json_parser_set_error@@Base>
   13804:	b	13928 <test@@Base+0x1318>
   13808:	add	r1, r3, #1
   1380c:	cmp	r5, r1
   13810:	beq	13f54 <test@@Base+0x1944>
   13814:	ldrb	r3, [r3, #1]
   13818:	cmp	r3, #34	; 0x22
   1381c:	beq	13844 <test@@Base+0x1234>
   13820:	cmp	r3, #92	; 0x5c
   13824:	movne	r3, r1
   13828:	bne	13808 <test@@Base+0x11f8>
   1382c:	sub	r3, r7, r1
   13830:	cmp	r3, #1
   13834:	addgt	r3, r1, #1
   13838:	bgt	13808 <test@@Base+0x11f8>
   1383c:	cmp	r5, r1
   13840:	beq	13854 <test@@Base+0x1244>
   13844:	ldrb	r3, [r1]
   13848:	cmp	r3, #34	; 0x22
   1384c:	addeq	r1, r1, #1
   13850:	beq	136ec <test@@Base+0x10dc>
   13854:	mov	r3, #20
   13858:	mov	r2, r5
   1385c:	add	r0, sp, #148	; 0x94
   13860:	bl	199e8 <flatcc_json_parser_set_error@@Base>
   13864:	mov	r1, r0
   13868:	b	136ec <test@@Base+0x10dc>
   1386c:	ldrb	r3, [r1, #1]
   13870:	cmp	r3, #32
   13874:	addhi	r1, r1, #1
   13878:	bls	13708 <test@@Base+0x10f8>
   1387c:	b	13718 <test@@Base+0x1108>
   13880:	mov	r6, r1
   13884:	ldr	fp, [sp, #60]	; 0x3c
   13888:	ldr	r3, [pc, #316]	; 139cc <test@@Base+0x13bc>
   1388c:	ldr	r3, [r3]
   13890:	mov	r2, #13
   13894:	mov	r1, #1
   13898:	ldr	r0, [pc, #288]	; 139c0 <test@@Base+0x13b0>
   1389c:	bl	12454 <fwrite@plt>
   138a0:	mov	r4, r6
   138a4:	b	126d8 <test@@Base+0xc8>
   138a8:	ldrb	r3, [r1, #2]
   138ac:	cmp	r3, #32
   138b0:	addhi	r4, r1, #2
   138b4:	bls	13754 <test@@Base+0x1144>
   138b8:	b	13768 <test@@Base+0x1158>
   138bc:	ldr	fp, [sp, #60]	; 0x3c
   138c0:	ldr	r3, [pc, #260]	; 139cc <test@@Base+0x13bc>
   138c4:	ldr	r3, [r3]
   138c8:	mov	r2, #13
   138cc:	mov	r1, #1
   138d0:	ldr	r0, [pc, #232]	; 139c0 <test@@Base+0x13b0>
   138d4:	bl	12454 <fwrite@plt>
   138d8:	b	126d8 <test@@Base+0xc8>
   138dc:	mov	r6, r1
   138e0:	ldr	fp, [sp, #60]	; 0x3c
   138e4:	mov	r2, #58	; 0x3a
   138e8:	ldr	r1, [pc, #212]	; 139c4 <test@@Base+0x13b4>
   138ec:	ldr	r3, [pc, #216]	; 139cc <test@@Base+0x13bc>
   138f0:	ldr	r0, [r3]
   138f4:	bl	12490 <fprintf@plt>
   138f8:	mov	r3, #17
   138fc:	mov	r2, r5
   13900:	mov	r1, r6
   13904:	add	r0, sp, #148	; 0x94
   13908:	bl	199e8 <flatcc_json_parser_set_error@@Base>
   1390c:	mov	r4, r0
   13910:	b	126d8 <test@@Base+0xc8>
   13914:	mov	r3, #8
   13918:	mov	r2, r5
   1391c:	mov	r1, r0
   13920:	add	r0, sp, #148	; 0x94
   13924:	bl	199e8 <flatcc_json_parser_set_error@@Base>
   13928:	cmp	r4, r0
   1392c:	bne	12cd4 <test@@Base+0x6c4>
   13930:	ldr	fp, [sp, #60]	; 0x3c
   13934:	b	126d8 <test@@Base+0xc8>
   13938:	add	r3, pc, #120	; 0x78
   1393c:	ldrd	r2, [r3]
   13940:	cmp	fp, r3
   13944:	cmpeq	r0, r2
   13948:	bne	13974 <test@@Base+0x1364>
   1394c:	add	r1, r4, #4
   13950:	ldr	r3, [sp, #160]	; 0xa0
   13954:	cmp	r3, #0
   13958:	bne	13994 <test@@Base+0x1384>
   1395c:	cmp	r5, r1
   13960:	beq	13c4c <test@@Base+0x163c>
   13964:	ldrb	r3, [r4, #4]
   13968:	cmp	r3, #34	; 0x22
   1396c:	bne	13c1c <test@@Base+0x160c>
   13970:	b	13c3c <test@@Base+0x162c>
   13974:	ldr	fp, [sp, #60]	; 0x3c
   13978:	mov	r3, #13
   1397c:	mov	r2, r5
   13980:	mov	r1, r4
   13984:	add	r0, sp, #148	; 0x94
   13988:	bl	199e8 <flatcc_json_parser_set_error@@Base>
   1398c:	mov	r4, r0
   13990:	b	126d8 <test@@Base+0xc8>
   13994:	cmp	r5, r1
   13998:	beq	13a58 <test@@Base+0x1448>
   1399c:	ldrb	r3, [r4, #4]
   139a0:	cmp	r3, #32
   139a4:	bls	13a3c <test@@Base+0x142c>
   139a8:	add	r4, r4, #5
   139ac:	b	139f4 <test@@Base+0x13e4>
   139b0:	andeq	r0, r0, r0
   139b4:	stclvs	6, cr6, [r5], #-464	; 0xfffffe30
   139b8:	andeq	r0, r0, r0
   139bc:	bvc	1d6eb98 <__bss_end__@@Base+0x1d3fb38>
   139c0:	muleq	r1, ip, r3
   139c4:	andeq	sp, r1, ip, lsr #7
   139c8:	andeq	sp, r1, r0, ror #7
   139cc:	andeq	pc, r2, r8, asr r0	; <UNPREDICTABLE>
   139d0:	andeq	sp, r1, r4, asr #7
   139d4:	mov	r1, r4
   139d8:	cmp	r5, r1
   139dc:	beq	13f5c <test@@Base+0x194c>
   139e0:	ldrb	r2, [r1]
   139e4:	add	r4, r4, #1
   139e8:	cmp	r2, #32
   139ec:	bls	13a34 <test@@Base+0x1424>
   139f0:	mov	r3, r2
   139f4:	sub	r1, r4, #1
   139f8:	cmp	r3, #46	; 0x2e
   139fc:	cmpne	r3, #95	; 0x5f
   13a00:	beq	139d4 <test@@Base+0x13c4>
   13a04:	tst	r3, #128	; 0x80
   13a08:	bne	139d4 <test@@Base+0x13c4>
   13a0c:	sub	r2, r3, #48	; 0x30
   13a10:	uxtb	r2, r2
   13a14:	cmp	r2, #9
   13a18:	bls	139d4 <test@@Base+0x13c4>
   13a1c:	orr	r2, r3, #32
   13a20:	sub	r2, r2, #97	; 0x61
   13a24:	uxtb	r2, r2
   13a28:	cmp	r2, #25
   13a2c:	movls	r1, r4
   13a30:	bls	139d8 <test@@Base+0x13c8>
   13a34:	cmp	r3, #46	; 0x2e
   13a38:	beq	13f6c <test@@Base+0x195c>
   13a3c:	sub	r3, r7, r1
   13a40:	cmp	r3, #1
   13a44:	ble	13a58 <test@@Base+0x1448>
   13a48:	ldrb	r3, [r1]
   13a4c:	cmp	r3, #32
   13a50:	bhi	13a68 <test@@Base+0x1458>
   13a54:	beq	13c64 <test@@Base+0x1654>
   13a58:	mov	r2, r5
   13a5c:	add	r0, sp, #148	; 0x94
   13a60:	bl	19ac0 <flatcc_json_parser_space_ext@@Base>
   13a64:	mov	r1, r0
   13a68:	cmp	r5, r1
   13a6c:	beq	13c78 <test@@Base+0x1668>
   13a70:	cmp	r5, r1
   13a74:	bls	13cd4 <test@@Base+0x16c4>
   13a78:	ldrb	r3, [r1]
   13a7c:	cmp	r3, #58	; 0x3a
   13a80:	bne	13cd4 <test@@Base+0x16c4>
   13a84:	add	r4, r1, #1
   13a88:	sub	r3, r7, r4
   13a8c:	cmp	r3, #1
   13a90:	ble	13aa4 <test@@Base+0x1494>
   13a94:	ldrb	r3, [r1, #1]
   13a98:	cmp	r3, #32
   13a9c:	bhi	13ab8 <test@@Base+0x14a8>
   13aa0:	beq	13ca0 <test@@Base+0x1690>
   13aa4:	mov	r2, r5
   13aa8:	mov	r1, r4
   13aac:	add	r0, sp, #148	; 0x94
   13ab0:	bl	19ac0 <flatcc_json_parser_space_ext@@Base>
   13ab4:	mov	r4, r0
   13ab8:	cmp	r5, r4
   13abc:	beq	13cb4 <test@@Base+0x16a4>
   13ac0:	ldrb	r3, [r4]
   13ac4:	cmp	r3, #34	; 0x22
   13ac8:	addeq	r6, r4, #1
   13acc:	beq	13ae8 <test@@Base+0x14d8>
   13ad0:	mov	r3, #16
   13ad4:	mov	r2, r5
   13ad8:	mov	r1, r4
   13adc:	add	r0, sp, #148	; 0x94
   13ae0:	bl	199e8 <flatcc_json_parser_set_error@@Base>
   13ae4:	mov	r6, r0
   13ae8:	mov	r2, r5
   13aec:	mov	r1, r6
   13af0:	add	r0, sp, #148	; 0x94
   13af4:	bl	19a14 <flatcc_json_parser_string_part@@Base>
   13af8:	mov	r4, r0
   13afc:	cmp	r5, r0
   13b00:	beq	13df0 <test@@Base+0x17e0>
   13b04:	ldrb	r3, [r0]
   13b08:	cmp	r3, #34	; 0x22
   13b0c:	beq	13d0c <test@@Base+0x16fc>
   13b10:	ldr	fp, [sp, #56]	; 0x38
   13b14:	mov	r0, fp
   13b18:	bl	15c8c <flatcc_builder_start_string@@Base>
   13b1c:	sub	sl, r4, r6
   13b20:	mov	r1, sl
   13b24:	mov	r0, fp
   13b28:	bl	157fc <flatcc_builder_extend_string@@Base>
   13b2c:	cmp	r0, #0
   13b30:	beq	13e40 <test@@Base+0x1830>
   13b34:	mov	r2, sl
   13b38:	mov	r1, r6
   13b3c:	bl	12430 <memcpy@plt>
   13b40:	mov	sl, fp
   13b44:	add	r3, sp, #144	; 0x90
   13b48:	mov	r2, r5
   13b4c:	mov	r1, r4
   13b50:	add	r0, sp, #148	; 0x94
   13b54:	bl	1a218 <flatcc_json_parser_string_escape@@Base>
   13b58:	mov	r6, r0
   13b5c:	ldrb	r2, [sp, #144]	; 0x90
   13b60:	add	r1, sp, #145	; 0x91
   13b64:	mov	r0, sl
   13b68:	bl	158a4 <flatcc_builder_append_string@@Base>
   13b6c:	mov	r2, r5
   13b70:	mov	r1, r6
   13b74:	add	r0, sp, #148	; 0x94
   13b78:	bl	19a14 <flatcc_json_parser_string_part@@Base>
   13b7c:	mov	r4, r0
   13b80:	cmp	r5, r0
   13b84:	beq	13dfc <test@@Base+0x17ec>
   13b88:	sub	r2, r0, r6
   13b8c:	mov	r1, r6
   13b90:	mov	r0, sl
   13b94:	bl	158a4 <flatcc_builder_append_string@@Base>
   13b98:	ldrb	r3, [r4]
   13b9c:	cmp	r3, #34	; 0x22
   13ba0:	bne	13b44 <test@@Base+0x1534>
   13ba4:	ldr	r0, [sp, #56]	; 0x38
   13ba8:	bl	17720 <flatcc_builder_end_string@@Base>
   13bac:	mov	r6, r0
   13bb0:	cmp	r6, #0
   13bb4:	beq	13e48 <test@@Base+0x1838>
   13bb8:	mov	r1, #10
   13bbc:	ldr	r0, [sp, #56]	; 0x38
   13bc0:	bl	17a00 <flatcc_builder_table_add_offset@@Base>
   13bc4:	cmp	r0, #0
   13bc8:	beq	13e50 <test@@Base+0x1840>
   13bcc:	str	r6, [r0]
   13bd0:	cmp	r4, r5
   13bd4:	beq	13be8 <test@@Base+0x15d8>
   13bd8:	ldrb	r3, [r4]
   13bdc:	cmp	r3, #34	; 0x22
   13be0:	addeq	r0, r4, #1
   13be4:	beq	12cd4 <test@@Base+0x6c4>
   13be8:	mov	r3, #20
   13bec:	mov	r2, r5
   13bf0:	mov	r1, r4
   13bf4:	add	r0, sp, #148	; 0x94
   13bf8:	bl	199e8 <flatcc_json_parser_set_error@@Base>
   13bfc:	b	12cd4 <test@@Base+0x6c4>
   13c00:	add	r3, r1, #1
   13c04:	add	r1, r3, #1
   13c08:	cmp	r5, r1
   13c0c:	beq	13f84 <test@@Base+0x1974>
   13c10:	ldrb	r3, [r3, #1]
   13c14:	cmp	r3, #34	; 0x22
   13c18:	beq	13c3c <test@@Base+0x162c>
   13c1c:	cmp	r3, #92	; 0x5c
   13c20:	movne	r3, r1
   13c24:	bne	13c04 <test@@Base+0x15f4>
   13c28:	sub	r3, r7, r1
   13c2c:	cmp	r3, #1
   13c30:	bgt	13c00 <test@@Base+0x15f0>
   13c34:	cmp	r5, r1
   13c38:	beq	13c4c <test@@Base+0x163c>
   13c3c:	ldrb	r3, [r1]
   13c40:	cmp	r3, #34	; 0x22
   13c44:	addeq	r1, r1, #1
   13c48:	beq	13a3c <test@@Base+0x142c>
   13c4c:	mov	r3, #20
   13c50:	mov	r2, r5
   13c54:	add	r0, sp, #148	; 0x94
   13c58:	bl	199e8 <flatcc_json_parser_set_error@@Base>
   13c5c:	mov	r1, r0
   13c60:	b	13a3c <test@@Base+0x142c>
   13c64:	ldrb	r3, [r1, #1]
   13c68:	cmp	r3, #32
   13c6c:	addhi	r1, r1, #1
   13c70:	bls	13a58 <test@@Base+0x1448>
   13c74:	b	13a68 <test@@Base+0x1458>
   13c78:	mov	r6, r1
   13c7c:	ldr	fp, [sp, #60]	; 0x3c
   13c80:	ldr	r3, [pc, #-700]	; 139cc <test@@Base+0x13bc>
   13c84:	ldr	r3, [r3]
   13c88:	mov	r2, #13
   13c8c:	mov	r1, #1
   13c90:	ldr	r0, [pc, #-728]	; 139c0 <test@@Base+0x13b0>
   13c94:	bl	12454 <fwrite@plt>
   13c98:	mov	r4, r6
   13c9c:	b	126d8 <test@@Base+0xc8>
   13ca0:	ldrb	r3, [r1, #2]
   13ca4:	cmp	r3, #32
   13ca8:	addhi	r4, r1, #2
   13cac:	bls	13aa4 <test@@Base+0x1494>
   13cb0:	b	13ab8 <test@@Base+0x14a8>
   13cb4:	ldr	fp, [sp, #60]	; 0x3c
   13cb8:	ldr	r3, [pc, #-756]	; 139cc <test@@Base+0x13bc>
   13cbc:	ldr	r3, [r3]
   13cc0:	mov	r2, #13
   13cc4:	mov	r1, #1
   13cc8:	ldr	r0, [pc, #-784]	; 139c0 <test@@Base+0x13b0>
   13ccc:	bl	12454 <fwrite@plt>
   13cd0:	b	126d8 <test@@Base+0xc8>
   13cd4:	mov	r6, r1
   13cd8:	ldr	fp, [sp, #60]	; 0x3c
   13cdc:	mov	r2, #58	; 0x3a
   13ce0:	ldr	r1, [pc, #-804]	; 139c4 <test@@Base+0x13b4>
   13ce4:	ldr	r3, [pc, #-800]	; 139cc <test@@Base+0x13bc>
   13ce8:	ldr	r0, [r3]
   13cec:	bl	12490 <fprintf@plt>
   13cf0:	mov	r3, #17
   13cf4:	mov	r2, r5
   13cf8:	mov	r1, r6
   13cfc:	add	r0, sp, #148	; 0x94
   13d00:	bl	199e8 <flatcc_json_parser_set_error@@Base>
   13d04:	mov	r4, r0
   13d08:	b	126d8 <test@@Base+0xc8>
   13d0c:	sub	r2, r0, r6
   13d10:	mov	r1, r6
   13d14:	ldr	r0, [sp, #56]	; 0x38
   13d18:	bl	175a8 <flatcc_builder_create_string@@Base>
   13d1c:	mov	r6, r0
   13d20:	b	13bb0 <test@@Base+0x15a0>
   13d24:	ldrb	r3, [r0, #1]
   13d28:	cmp	r3, #32
   13d2c:	addhi	r0, r0, #1
   13d30:	bls	12cf0 <test@@Base+0x6e0>
   13d34:	b	12d00 <test@@Base+0x6f0>
   13d38:	mov	r6, r0
   13d3c:	ldr	fp, [sp, #60]	; 0x3c
   13d40:	ldr	r3, [pc, #-892]	; 139cc <test@@Base+0x13bc>
   13d44:	ldr	r3, [r3]
   13d48:	mov	r2, #13
   13d4c:	mov	r1, #1
   13d50:	ldr	r0, [pc, #-920]	; 139c0 <test@@Base+0x13b0>
   13d54:	bl	12454 <fwrite@plt>
   13d58:	mov	r4, r6
   13d5c:	b	126d8 <test@@Base+0xc8>
   13d60:	ldrb	r3, [r0, #2]
   13d64:	cmp	r3, #32
   13d68:	addhi	r4, r0, #2
   13d6c:	bls	12d34 <test@@Base+0x724>
   13d70:	b	12d48 <test@@Base+0x738>
   13d74:	ldr	fp, [sp, #60]	; 0x3c
   13d78:	ldr	r3, [pc, #-948]	; 139cc <test@@Base+0x13bc>
   13d7c:	ldr	r3, [r3]
   13d80:	mov	r2, #13
   13d84:	mov	r1, #1
   13d88:	ldr	r0, [pc, #-976]	; 139c0 <test@@Base+0x13b0>
   13d8c:	bl	12454 <fwrite@plt>
   13d90:	b	126d8 <test@@Base+0xc8>
   13d94:	mov	r6, r0
   13d98:	ldr	fp, [sp, #60]	; 0x3c
   13d9c:	cmp	r5, r0
   13da0:	bls	13dac <test@@Base+0x179c>
   13da4:	cmp	r3, #125	; 0x7d
   13da8:	beq	13fa0 <test@@Base+0x1990>
   13dac:	mov	r2, #125	; 0x7d
   13db0:	ldr	r1, [pc, #-1012]	; 139c4 <test@@Base+0x13b4>
   13db4:	ldr	r3, [pc, #-1008]	; 139cc <test@@Base+0x13bc>
   13db8:	ldr	r0, [r3]
   13dbc:	bl	12490 <fprintf@plt>
   13dc0:	mov	r3, #17
   13dc4:	mov	r2, r5
   13dc8:	mov	r1, r6
   13dcc:	add	r0, sp, #148	; 0x94
   13dd0:	bl	199e8 <flatcc_json_parser_set_error@@Base>
   13dd4:	mov	r4, r0
   13dd8:	b	126d8 <test@@Base+0xc8>
   13ddc:	ldrb	r3, [r6, #2]
   13de0:	cmp	r3, #32
   13de4:	addhi	r4, r6, #2
   13de8:	bls	13fd8 <test@@Base+0x19c8>
   13dec:	b	13fec <test@@Base+0x19dc>
   13df0:	ldr	fp, [sp, #60]	; 0x3c
   13df4:	mov	r4, r5
   13df8:	b	126d8 <test@@Base+0xc8>
   13dfc:	ldr	fp, [sp, #60]	; 0x3c
   13e00:	mov	r4, r5
   13e04:	b	126d8 <test@@Base+0xc8>
   13e08:	ldr	fp, [sp, #60]	; 0x3c
   13e0c:	b	126d8 <test@@Base+0xc8>
   13e10:	ldr	fp, [sp, #60]	; 0x3c
   13e14:	b	126d8 <test@@Base+0xc8>
   13e18:	ldr	fp, [sp, #60]	; 0x3c
   13e1c:	b	126d8 <test@@Base+0xc8>
   13e20:	ldr	fp, [sp, #60]	; 0x3c
   13e24:	b	126d8 <test@@Base+0xc8>
   13e28:	ldr	fp, [sp, #60]	; 0x3c
   13e2c:	b	126d8 <test@@Base+0xc8>
   13e30:	ldr	fp, [sp, #60]	; 0x3c
   13e34:	b	126d8 <test@@Base+0xc8>
   13e38:	ldr	fp, [sp, #60]	; 0x3c
   13e3c:	b	126d8 <test@@Base+0xc8>
   13e40:	ldr	fp, [sp, #60]	; 0x3c
   13e44:	b	126d8 <test@@Base+0xc8>
   13e48:	ldr	fp, [sp, #60]	; 0x3c
   13e4c:	b	126d8 <test@@Base+0xc8>
   13e50:	ldr	fp, [sp, #60]	; 0x3c
   13e54:	b	126d8 <test@@Base+0xc8>
   13e58:	ldr	r3, [pc, #-1172]	; 139cc <test@@Base+0x13bc>
   13e5c:	ldr	r6, [r3]
   13e60:	ldr	r7, [sp, #164]	; 0xa4
   13e64:	ldr	r3, [sp, #152]	; 0x98
   13e68:	ldr	r5, [sp, #184]	; 0xb8
   13e6c:	sub	r5, r5, r3
   13e70:	add	r5, r5, #1
   13e74:	bl	197a0 <flatcc_json_parser_error_string@@Base>
   13e78:	str	r0, [sp]
   13e7c:	mov	r3, r5
   13e80:	mov	r2, r7
   13e84:	ldr	r1, [pc, #-1220]	; 139c8 <test@@Base+0x13b8>
   13e88:	mov	r0, r6
   13e8c:	bl	12490 <fprintf@plt>
   13e90:	ldr	r0, [sp, #56]	; 0x38
   13e94:	bl	1486c <flatcc_builder_reset@@Base>
   13e98:	b	126fc <test@@Base+0xec>
   13e9c:	cmp	r3, #46	; 0x2e
   13ea0:	movne	r1, r5
   13ea4:	bne	12a88 <test@@Base+0x478>
   13ea8:	mov	r1, r5
   13eac:	mov	r3, #5
   13eb0:	mov	r2, r5
   13eb4:	add	r0, sp, #148	; 0x94
   13eb8:	bl	199e8 <flatcc_json_parser_set_error@@Base>
   13ebc:	mov	r1, r0
   13ec0:	b	12a6c <test@@Base+0x45c>
   13ec4:	mov	r1, r5
   13ec8:	b	12bcc <test@@Base+0x5bc>
   13ecc:	cmp	r3, #46	; 0x2e
   13ed0:	movne	r1, r5
   13ed4:	bne	12f00 <test@@Base+0x8f0>
   13ed8:	mov	r1, r5
   13edc:	mov	r3, #5
   13ee0:	mov	r2, r5
   13ee4:	add	r0, sp, #148	; 0x94
   13ee8:	bl	199e8 <flatcc_json_parser_set_error@@Base>
   13eec:	mov	r1, r0
   13ef0:	b	12ee4 <test@@Base+0x8d4>
   13ef4:	mov	r1, r5
   13ef8:	b	12ff4 <test@@Base+0x9e4>
   13efc:	cmp	r3, #46	; 0x2e
   13f00:	movne	r1, r5
   13f04:	bne	133a4 <test@@Base+0xd94>
   13f08:	mov	r1, r5
   13f0c:	mov	r3, #5
   13f10:	mov	r2, r5
   13f14:	add	r0, sp, #148	; 0x94
   13f18:	bl	199e8 <flatcc_json_parser_set_error@@Base>
   13f1c:	mov	r1, r0
   13f20:	b	13388 <test@@Base+0xd78>
   13f24:	mov	r1, r5
   13f28:	b	134e0 <test@@Base+0xed0>
   13f2c:	cmp	r3, #46	; 0x2e
   13f30:	movne	r1, r5
   13f34:	bne	13708 <test@@Base+0x10f8>
   13f38:	mov	r1, r5
   13f3c:	mov	r3, #5
   13f40:	mov	r2, r5
   13f44:	add	r0, sp, #148	; 0x94
   13f48:	bl	199e8 <flatcc_json_parser_set_error@@Base>
   13f4c:	mov	r1, r0
   13f50:	b	136ec <test@@Base+0x10dc>
   13f54:	mov	r1, r5
   13f58:	b	13854 <test@@Base+0x1244>
   13f5c:	cmp	r3, #46	; 0x2e
   13f60:	movne	r1, r5
   13f64:	bne	13a58 <test@@Base+0x1448>
   13f68:	mov	r1, r5
   13f6c:	mov	r3, #5
   13f70:	mov	r2, r5
   13f74:	add	r0, sp, #148	; 0x94
   13f78:	bl	199e8 <flatcc_json_parser_set_error@@Base>
   13f7c:	mov	r1, r0
   13f80:	b	13a3c <test@@Base+0x142c>
   13f84:	mov	r1, r5
   13f88:	b	13c4c <test@@Base+0x163c>
   13f8c:	ldr	fp, [sp, #60]	; 0x3c
   13f90:	cmp	r5, r4
   13f94:	movls	r6, r4
   13f98:	bls	13dac <test@@Base+0x179c>
   13f9c:	mov	r6, r4
   13fa0:	add	r4, r6, #1
   13fa4:	ldr	r7, [sp, #56]	; 0x38
   13fa8:	mov	r0, r7
   13fac:	bl	16888 <flatcc_builder_end_table@@Base>
   13fb0:	mov	r1, r0
   13fb4:	mov	r0, r7
   13fb8:	bl	150c4 <flatcc_builder_end_buffer@@Base>
   13fbc:	sub	r3, r5, r4
   13fc0:	cmp	r3, #1
   13fc4:	ble	13fd8 <test@@Base+0x19c8>
   13fc8:	ldrb	r3, [r6, #1]
   13fcc:	cmp	r3, #32
   13fd0:	bhi	13fec <test@@Base+0x19dc>
   13fd4:	beq	13ddc <test@@Base+0x17cc>
   13fd8:	mov	r2, r5
   13fdc:	mov	r1, r4
   13fe0:	add	r0, sp, #148	; 0x94
   13fe4:	bl	19ac0 <flatcc_json_parser_space_ext@@Base>
   13fe8:	mov	r4, r0
   13fec:	cmp	r5, r4
   13ff0:	beq	126d8 <test@@Base+0xc8>
   13ff4:	ldr	r3, [pc, #-1584]	; 139cc <test@@Base+0x13bc>
   13ff8:	ldr	r3, [r3]
   13ffc:	mov	r2, #26
   14000:	mov	r1, #1
   14004:	ldr	r0, [pc, #-1596]	; 139d0 <test@@Base+0x13c0>
   14008:	bl	12454 <fwrite@plt>
   1400c:	b	126d8 <test@@Base+0xc8>

00014010 <main@@Base>:
   14010:	push	{lr}		; (str lr, [sp, #-4]!)
   14014:	sub	sp, sp, #244	; 0xf4
   14018:	mvn	r3, #0
   1401c:	str	r3, [sp, #236]	; 0xec
   14020:	add	r0, sp, #4
   14024:	bl	146d8 <flatcc_builder_init@@Base>
   14028:	ldr	r1, [pc, #36]	; 14054 <main@@Base+0x44>
   1402c:	add	r2, r1, #644	; 0x284
   14030:	add	r3, sp, #236	; 0xec
   14034:	add	r2, r2, #1
   14038:	add	r0, sp, #4
   1403c:	bl	12610 <test@@Base>
   14040:	add	r0, sp, #4
   14044:	bl	14880 <flatcc_builder_clear@@Base>
   14048:	ldr	r0, [sp, #236]	; 0xec
   1404c:	add	sp, sp, #244	; 0xf4
   14050:	pop	{pc}		; (ldr pc, [sp], #4)
   14054:	andeq	sp, r1, ip, lsl #2
   14058:	push	{r4, r5, r6, lr}
   1405c:	sub	sp, sp, #8
   14060:	mov	r4, r0
   14064:	mov	r5, r2
   14068:	ldr	r2, [r0, #28]
   1406c:	mov	r3, #1
   14070:	str	r3, [sp]
   14074:	ldr	r6, [r0, #48]	; 0x30
   14078:	add	r2, r1, r2
   1407c:	add	r1, r0, #60	; 0x3c
   14080:	ldr	r0, [r0, #40]	; 0x28
   14084:	blx	r6
   14088:	cmp	r0, #0
   1408c:	bne	140c4 <main@@Base+0xb4>
   14090:	ldr	r1, [r4, #28]
   14094:	ldr	r2, [r4, #60]	; 0x3c
   14098:	add	r2, r2, r1
   1409c:	str	r2, [r4, #16]
   140a0:	ldr	r3, [r4, #64]	; 0x40
   140a4:	sub	r3, r3, r1
   140a8:	cmp	r3, r5
   140ac:	movcs	r3, r5
   140b0:	str	r3, [r4, #24]
   140b4:	ldr	r3, [r4, #32]
   140b8:	str	r5, [r3, #4]
   140bc:	add	sp, sp, #8
   140c0:	pop	{r4, r5, r6, pc}
   140c4:	mvn	r0, #0
   140c8:	b	140bc <main@@Base+0xac>

000140cc <flatcc_builder_default_alloc@@Base>:
   140cc:	push	{r4, r5, r6, r7, r8, lr}
   140d0:	mov	r5, r1
   140d4:	cmp	r2, #0
   140d8:	bne	140fc <flatcc_builder_default_alloc@@Base+0x30>
   140dc:	ldr	r0, [r1]
   140e0:	cmp	r0, #0
   140e4:	beq	141c8 <flatcc_builder_default_alloc@@Base+0xfc>
   140e8:	bl	12424 <free@plt>
   140ec:	mov	r0, #0
   140f0:	str	r0, [r5]
   140f4:	str	r0, [r5, #4]
   140f8:	pop	{r4, r5, r6, r7, r8, pc}
   140fc:	mov	r6, r3
   14100:	ldr	r3, [sp, #24]
   14104:	sub	r3, r3, #1
   14108:	cmp	r3, #6
   1410c:	ldrls	pc, [pc, r3, lsl #2]
   14110:	b	141a4 <flatcc_builder_default_alloc@@Base+0xd8>
   14114:	andeq	r4, r1, r8, lsr r1
   14118:	andeq	r4, r1, r4, lsr #3
   1411c:	andeq	r4, r1, r4, lsr #3
   14120:	andeq	r4, r1, r0, lsr r1
   14124:	andeq	r4, r1, ip, lsr #3
   14128:	andeq	r4, r1, r4, lsr #3
   1412c:	muleq	r1, ip, r1
   14130:	mov	r4, #288	; 0x120
   14134:	b	1413c <flatcc_builder_default_alloc@@Base+0x70>
   14138:	mov	r4, #256	; 0x100
   1413c:	cmp	r4, r2
   14140:	bcs	14150 <flatcc_builder_default_alloc@@Base+0x84>
   14144:	lsl	r4, r4, #1
   14148:	cmp	r2, r4
   1414c:	bhi	14144 <flatcc_builder_default_alloc@@Base+0x78>
   14150:	ldr	r3, [r5, #4]
   14154:	cmp	r2, r3
   14158:	bhi	14164 <flatcc_builder_default_alloc@@Base+0x98>
   1415c:	cmp	r4, r3, lsr #1
   14160:	bls	141d0 <flatcc_builder_default_alloc@@Base+0x104>
   14164:	mov	r1, r4
   14168:	ldr	r0, [r5]
   1416c:	bl	12448 <realloc@plt>
   14170:	subs	r7, r0, #0
   14174:	beq	141d8 <flatcc_builder_default_alloc@@Base+0x10c>
   14178:	cmp	r6, #0
   1417c:	beq	1418c <flatcc_builder_default_alloc@@Base+0xc0>
   14180:	ldr	r0, [r5, #4]
   14184:	cmp	r0, r4
   14188:	bcc	141b4 <flatcc_builder_default_alloc@@Base+0xe8>
   1418c:	str	r7, [r5]
   14190:	str	r4, [r5, #4]
   14194:	mov	r0, #0
   14198:	pop	{r4, r5, r6, r7, r8, pc}
   1419c:	mov	r4, #64	; 0x40
   141a0:	b	1413c <flatcc_builder_default_alloc@@Base+0x70>
   141a4:	mov	r4, #32
   141a8:	b	1413c <flatcc_builder_default_alloc@@Base+0x70>
   141ac:	mov	r4, r2
   141b0:	b	14150 <flatcc_builder_default_alloc@@Base+0x84>
   141b4:	sub	r2, r4, r0
   141b8:	mov	r1, #0
   141bc:	add	r0, r7, r0
   141c0:	bl	124a8 <memset@plt>
   141c4:	b	1418c <flatcc_builder_default_alloc@@Base+0xc0>
   141c8:	mov	r0, #0
   141cc:	pop	{r4, r5, r6, r7, r8, pc}
   141d0:	mov	r0, #0
   141d4:	pop	{r4, r5, r6, r7, r8, pc}
   141d8:	mvn	r0, #0
   141dc:	pop	{r4, r5, r6, r7, r8, pc}
   141e0:	cmp	r2, #0
   141e4:	bne	141f4 <flatcc_builder_default_alloc@@Base+0x128>
   141e8:	ldrh	r2, [r0, #132]	; 0x84
   141ec:	cmp	r2, #0
   141f0:	moveq	r2, #1
   141f4:	ldrh	ip, [r1]
   141f8:	cmp	ip, #3
   141fc:	movls	ip, #4
   14200:	strhls	ip, [r1]
   14204:	ldrh	ip, [r1]
   14208:	cmp	ip, r2
   1420c:	strhcc	r2, [r1]
   14210:	cmp	r3, #0
   14214:	bne	142d0 <flatcc_builder_default_alloc@@Base+0x204>
   14218:	push	{r4, r5, lr}
   1421c:	sub	sp, sp, #84	; 0x54
   14220:	ldr	r4, [r0, #140]	; 0x8c
   14224:	sub	r2, r2, #1
   14228:	ands	r2, r2, r4
   1422c:	bne	1423c <flatcc_builder_default_alloc@@Base+0x170>
   14230:	mov	r0, #0
   14234:	add	sp, sp, #84	; 0x54
   14238:	pop	{r4, r5, pc}
   1423c:	str	r2, [sp, #8]
   14240:	ldr	r3, [pc, #144]	; 142d8 <flatcc_builder_default_alloc@@Base+0x20c>
   14244:	str	r3, [sp, #16]
   14248:	str	r2, [sp, #20]
   1424c:	mov	r3, #1
   14250:	str	r3, [sp, #12]
   14254:	add	r3, r4, r2
   14258:	str	r3, [r0, #140]	; 0x8c
   1425c:	cmp	r4, r3
   14260:	bgt	142a8 <flatcc_builder_default_alloc@@Base+0x1dc>
   14264:	ldr	ip, [r0, #36]	; 0x24
   14268:	str	r2, [sp]
   1426c:	ldr	r5, [r0, #44]	; 0x2c
   14270:	mov	r3, r4
   14274:	mov	r2, #1
   14278:	add	r1, sp, #16
   1427c:	mov	r0, ip
   14280:	blx	r5
   14284:	cmp	r0, #0
   14288:	bne	142bc <flatcc_builder_default_alloc@@Base+0x1f0>
   1428c:	cmn	r4, #1
   14290:	bne	14230 <flatcc_builder_default_alloc@@Base+0x164>
   14294:	ldr	r3, [pc, #64]	; 142dc <flatcc_builder_default_alloc@@Base+0x210>
   14298:	ldr	r2, [pc, #64]	; 142e0 <flatcc_builder_default_alloc@@Base+0x214>
   1429c:	ldr	r1, [pc, #64]	; 142e4 <flatcc_builder_default_alloc@@Base+0x218>
   142a0:	ldr	r0, [pc, #64]	; 142e8 <flatcc_builder_default_alloc@@Base+0x21c>
   142a4:	bl	124d8 <__assert_fail@plt>
   142a8:	ldr	r3, [pc, #60]	; 142ec <flatcc_builder_default_alloc@@Base+0x220>
   142ac:	ldr	r2, [pc, #60]	; 142f0 <flatcc_builder_default_alloc@@Base+0x224>
   142b0:	ldr	r1, [pc, #44]	; 142e4 <flatcc_builder_default_alloc@@Base+0x218>
   142b4:	ldr	r0, [pc, #44]	; 142e8 <flatcc_builder_default_alloc@@Base+0x21c>
   142b8:	bl	124d8 <__assert_fail@plt>
   142bc:	ldr	r3, [pc, #40]	; 142ec <flatcc_builder_default_alloc@@Base+0x220>
   142c0:	ldr	r2, [pc, #44]	; 142f4 <flatcc_builder_default_alloc@@Base+0x228>
   142c4:	ldr	r1, [pc, #24]	; 142e4 <flatcc_builder_default_alloc@@Base+0x218>
   142c8:	ldr	r0, [pc, #24]	; 142e8 <flatcc_builder_default_alloc@@Base+0x21c>
   142cc:	bl	124d8 <__assert_fail@plt>
   142d0:	mov	r0, #0
   142d4:	bx	lr
   142d8:	strdeq	sp, [r1], -ip
   142dc:	andeq	sp, r1, r8, lsl #12
   142e0:			; <UNDEFINED> instruction: 0x000002be
   142e4:	andeq	sp, r1, ip, asr #22
   142e8:	andeq	sp, r1, r0, lsr #23
   142ec:	strdeq	sp, [r1], -ip
   142f0:	andeq	r0, r0, r1, lsr #5
   142f4:	andeq	r0, r0, r5, lsr #5
   142f8:	push	{r4, r5, r6, r7, lr}
   142fc:	sub	sp, sp, #12
   14300:	mov	r4, r0
   14304:	mov	r6, r1
   14308:	ldr	r3, [r0, #156]	; 0x9c
   1430c:	add	r2, r3, #1
   14310:	str	r2, [r0, #156]	; 0x9c
   14314:	ldr	r1, [r0, #160]	; 0xa0
   14318:	cmp	r2, r1
   1431c:	ble	143bc <flatcc_builder_default_alloc@@Base+0x2f0>
   14320:	ldr	r1, [r0, #176]	; 0xb0
   14324:	cmp	r2, r1
   14328:	cmpgt	r1, #0
   1432c:	bgt	14424 <flatcc_builder_default_alloc@@Base+0x358>
   14330:	add	r3, r3, r3, lsl #3
   14334:	lsl	r5, r3, #2
   14338:	add	r2, r5, #36	; 0x24
   1433c:	ldr	r3, [r0, #88]	; 0x58
   14340:	cmp	r2, r3
   14344:	bhi	14384 <flatcc_builder_default_alloc@@Base+0x2b8>
   14348:	ldr	r3, [r4, #84]	; 0x54
   1434c:	add	r5, r3, r5
   14350:	str	r5, [r4, #32]
   14354:	cmp	r5, #0
   14358:	beq	1442c <flatcc_builder_default_alloc@@Base+0x360>
   1435c:	ldr	r3, [r4, #88]	; 0x58
   14360:	ldr	r2, [pc, #204]	; 14434 <flatcc_builder_default_alloc@@Base+0x368>
   14364:	umull	r2, r3, r2, r3
   14368:	lsr	r3, r3, #3
   1436c:	str	r3, [r4, #160]	; 0xa0
   14370:	ldr	r2, [r4, #176]	; 0xb0
   14374:	cmp	r2, #0
   14378:	cmpgt	r3, r2
   1437c:	strgt	r2, [r4, #160]	; 0xa0
   14380:	b	143c8 <flatcc_builder_default_alloc@@Base+0x2fc>
   14384:	mov	r3, #4
   14388:	str	r3, [sp]
   1438c:	ldr	r7, [r0, #48]	; 0x30
   14390:	mov	r3, #0
   14394:	add	r1, r0, #84	; 0x54
   14398:	ldr	r0, [r0, #40]	; 0x28
   1439c:	blx	r7
   143a0:	cmp	r0, #0
   143a4:	beq	14348 <flatcc_builder_default_alloc@@Base+0x27c>
   143a8:	ldr	r3, [pc, #136]	; 14438 <flatcc_builder_default_alloc@@Base+0x36c>
   143ac:	mov	r2, #308	; 0x134
   143b0:	ldr	r1, [pc, #132]	; 1443c <flatcc_builder_default_alloc@@Base+0x370>
   143b4:	ldr	r0, [pc, #132]	; 14440 <flatcc_builder_default_alloc@@Base+0x374>
   143b8:	bl	124d8 <__assert_fail@plt>
   143bc:	ldr	r3, [r0, #32]
   143c0:	add	r3, r3, #36	; 0x24
   143c4:	str	r3, [r0, #32]
   143c8:	ldr	r3, [r4, #32]
   143cc:	ldr	r2, [r4, #20]
   143d0:	str	r2, [r3, #8]
   143d4:	ldr	r3, [r4, #32]
   143d8:	ldrh	r2, [r4, #130]	; 0x82
   143dc:	strh	r2, [r3, #12]
   143e0:	strh	r6, [r4, #130]	; 0x82
   143e4:	ldr	r3, [r4, #32]
   143e8:	ldr	r2, [r4, #28]
   143ec:	str	r2, [r3]
   143f0:	ldr	r3, [r4, #32]
   143f4:	mvn	r2, #3
   143f8:	str	r2, [r3, #4]
   143fc:	ldr	r3, [r4, #28]
   14400:	ldr	r2, [r4, #20]
   14404:	add	r3, r3, r2
   14408:	add	r3, r3, #7
   1440c:	bic	r3, r3, #7
   14410:	str	r3, [r4, #28]
   14414:	mov	r0, #0
   14418:	str	r0, [r4, #20]
   1441c:	add	sp, sp, #12
   14420:	pop	{r4, r5, r6, r7, pc}
   14424:	mvn	r0, #0
   14428:	b	1441c <flatcc_builder_default_alloc@@Base+0x350>
   1442c:	mvn	r0, #0
   14430:	b	1441c <flatcc_builder_default_alloc@@Base+0x350>
   14434:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^
   14438:	andeq	sp, r1, r8, lsl r6
   1443c:	andeq	sp, r1, ip, asr #22
   14440:	andeq	sp, r1, r0, lsr #23
   14444:	push	{r4, r5, r6, r7, r8, lr}
   14448:	sub	sp, sp, #88	; 0x58
   1444c:	cmn	r2, #-1073741823	; 0xc0000001
   14450:	bhi	14604 <flatcc_builder_default_alloc@@Base+0x538>
   14454:	ldrh	ip, [r0, #128]	; 0x80
   14458:	cmp	ip, #3
   1445c:	movls	ip, #4
   14460:	strhls	ip, [r0, #128]	; 0x80
   14464:	str	r2, [sp, #84]	; 0x54
   14468:	ldr	r7, [r0, #136]	; 0x88
   1446c:	and	lr, r7, #3
   14470:	mov	ip, #4
   14474:	str	ip, [sp, #12]
   14478:	add	r4, sp, #84	; 0x54
   1447c:	str	r4, [sp, #20]
   14480:	str	ip, [sp, #24]
   14484:	mov	ip, #1
   14488:	str	ip, [sp, #16]
   1448c:	lsls	r5, r2, #2
   14490:	beq	144ac <flatcc_builder_default_alloc@@Base+0x3e0>
   14494:	add	ip, r5, #4
   14498:	str	ip, [sp, #12]
   1449c:	str	r1, [sp, #28]
   144a0:	str	r5, [sp, #32]
   144a4:	mov	ip, #2
   144a8:	str	ip, [sp, #16]
   144ac:	cmp	lr, #0
   144b0:	beq	144e0 <flatcc_builder_default_alloc@@Base+0x414>
   144b4:	ldr	ip, [sp, #12]
   144b8:	add	ip, ip, lr
   144bc:	str	ip, [sp, #12]
   144c0:	ldr	ip, [sp, #16]
   144c4:	add	ip, ip, #1
   144c8:	add	r4, sp, #88	; 0x58
   144cc:	add	r4, r4, ip, lsl #3
   144d0:	ldr	r6, [pc, #308]	; 1460c <flatcc_builder_default_alloc@@Base+0x540>
   144d4:	str	r6, [r4, #-76]	; 0xffffffb4
   144d8:	str	lr, [r4, #-72]	; 0xffffffb8
   144dc:	str	ip, [sp, #16]
   144e0:	mov	r6, r0
   144e4:	ldr	r8, [sp, #12]
   144e8:	sub	r7, r7, r8
   144ec:	cmp	r2, #0
   144f0:	beq	14598 <flatcc_builder_default_alloc@@Base+0x4cc>
   144f4:	mov	r2, r1
   144f8:	mov	ip, r3
   144fc:	add	r5, r1, r5
   14500:	mvn	r1, #3
   14504:	b	14530 <flatcc_builder_default_alloc@@Base+0x464>
   14508:	cmp	r3, #0
   1450c:	beq	14584 <flatcc_builder_default_alloc@@Base+0x4b8>
   14510:	ldrb	r0, [ip]
   14514:	cmp	r0, #0
   14518:	bne	14570 <flatcc_builder_default_alloc@@Base+0x4a4>
   1451c:	add	r2, r2, #4
   14520:	add	ip, ip, #1
   14524:	sub	r1, r1, #4
   14528:	cmp	r2, r5
   1452c:	beq	14598 <flatcc_builder_default_alloc@@Base+0x4cc>
   14530:	ldr	lr, [r2]
   14534:	cmp	lr, #0
   14538:	beq	14508 <flatcc_builder_default_alloc@@Base+0x43c>
   1453c:	sub	r4, r1, r7
   14540:	add	lr, r4, lr
   14544:	str	lr, [r2]
   14548:	cmp	r3, #0
   1454c:	beq	1451c <flatcc_builder_default_alloc@@Base+0x450>
   14550:	ldrb	r0, [ip]
   14554:	cmp	r0, #0
   14558:	bne	1451c <flatcc_builder_default_alloc@@Base+0x450>
   1455c:	ldr	r3, [pc, #172]	; 14610 <flatcc_builder_default_alloc@@Base+0x544>
   14560:	ldr	r2, [pc, #172]	; 14614 <flatcc_builder_default_alloc@@Base+0x548>
   14564:	ldr	r1, [pc, #172]	; 14618 <flatcc_builder_default_alloc@@Base+0x54c>
   14568:	ldr	r0, [pc, #172]	; 1461c <flatcc_builder_default_alloc@@Base+0x550>
   1456c:	bl	124d8 <__assert_fail@plt>
   14570:	ldr	r3, [pc, #152]	; 14610 <flatcc_builder_default_alloc@@Base+0x544>
   14574:	ldr	r2, [pc, #164]	; 14620 <flatcc_builder_default_alloc@@Base+0x554>
   14578:	ldr	r1, [pc, #152]	; 14618 <flatcc_builder_default_alloc@@Base+0x54c>
   1457c:	ldr	r0, [pc, #160]	; 14624 <flatcc_builder_default_alloc@@Base+0x558>
   14580:	bl	124d8 <__assert_fail@plt>
   14584:	ldr	r3, [pc, #132]	; 14610 <flatcc_builder_default_alloc@@Base+0x544>
   14588:	ldr	r2, [pc, #152]	; 14628 <flatcc_builder_default_alloc@@Base+0x55c>
   1458c:	ldr	r1, [pc, #132]	; 14618 <flatcc_builder_default_alloc@@Base+0x54c>
   14590:	ldr	r0, [pc, #148]	; 1462c <flatcc_builder_default_alloc@@Base+0x560>
   14594:	bl	124d8 <__assert_fail@plt>
   14598:	ldr	r3, [r6, #136]	; 0x88
   1459c:	sub	r4, r3, r8
   145a0:	cmp	r3, r4
   145a4:	ble	145dc <flatcc_builder_default_alloc@@Base+0x510>
   145a8:	str	r8, [sp]
   145ac:	ldr	r5, [r6, #44]	; 0x2c
   145b0:	mov	r3, r4
   145b4:	ldr	r2, [sp, #16]
   145b8:	add	r1, sp, #20
   145bc:	ldr	r0, [r6, #36]	; 0x24
   145c0:	blx	r5
   145c4:	cmp	r0, #0
   145c8:	streq	r4, [r6, #136]	; 0x88
   145cc:	bne	145f0 <flatcc_builder_default_alloc@@Base+0x524>
   145d0:	mov	r0, r4
   145d4:	add	sp, sp, #88	; 0x58
   145d8:	pop	{r4, r5, r6, r7, r8, pc}
   145dc:	ldr	r3, [pc, #76]	; 14630 <flatcc_builder_default_alloc@@Base+0x564>
   145e0:	ldr	r2, [pc, #76]	; 14634 <flatcc_builder_default_alloc@@Base+0x568>
   145e4:	ldr	r1, [pc, #44]	; 14618 <flatcc_builder_default_alloc@@Base+0x54c>
   145e8:	ldr	r0, [pc, #60]	; 1462c <flatcc_builder_default_alloc@@Base+0x560>
   145ec:	bl	124d8 <__assert_fail@plt>
   145f0:	ldr	r3, [pc, #56]	; 14630 <flatcc_builder_default_alloc@@Base+0x564>
   145f4:	ldr	r2, [pc, #60]	; 14638 <flatcc_builder_default_alloc@@Base+0x56c>
   145f8:	ldr	r1, [pc, #24]	; 14618 <flatcc_builder_default_alloc@@Base+0x54c>
   145fc:	ldr	r0, [pc, #40]	; 1462c <flatcc_builder_default_alloc@@Base+0x560>
   14600:	bl	124d8 <__assert_fail@plt>
   14604:	mov	r4, #0
   14608:	b	145d0 <flatcc_builder_default_alloc@@Base+0x504>
   1460c:	strdeq	sp, [r1], -ip
   14610:	andeq	sp, r1, r8, lsr #12
   14614:			; <UNDEFINED> instruction: 0x000005b1
   14618:	andeq	sp, r1, ip, asr #22
   1461c:	muleq	r1, r4, fp
   14620:			; <UNDEFINED> instruction: 0x000005b5
   14624:	andeq	sp, r1, r4, lsr #23
   14628:			; <UNDEFINED> instruction: 0x000005b7
   1462c:	andeq	sp, r1, r0, lsr #23
   14630:	andeq	sp, r1, r8, asr #12
   14634:	andeq	r0, r0, r7, lsl #5
   14638:	andeq	r0, r0, fp, lsl #5

0001463c <flatcc_builder_flush_vtable_cache@@Base>:
   1463c:	ldr	r3, [r0, #116]	; 0x74
   14640:	cmp	r3, #0
   14644:	bxeq	lr
   14648:	push	{r4, lr}
   1464c:	mov	r4, r0
   14650:	ldr	r2, [r0, #96]	; 0x60
   14654:	mov	r1, #0
   14658:	ldr	r0, [r0, #92]	; 0x5c
   1465c:	bl	124a8 <memset@plt>
   14660:	mov	r3, #16
   14664:	str	r3, [r4, #124]	; 0x7c
   14668:	mov	r3, #0
   1466c:	str	r3, [r4, #120]	; 0x78
   14670:	pop	{r4, pc}

00014674 <flatcc_builder_custom_init@@Base>:
   14674:	push	{r4, r5, r6, r7, r8, lr}
   14678:	mov	r4, r0
   1467c:	mov	r6, r1
   14680:	mov	r7, r2
   14684:	mov	r5, r3
   14688:	mov	r2, #232	; 0xe8
   1468c:	mov	r1, #0
   14690:	bl	124a8 <memset@plt>
   14694:	cmp	r6, #0
   14698:	moveq	r3, #1
   1469c:	streq	r3, [r4, #184]	; 0xb8
   146a0:	addeq	r7, r4, #188	; 0xbc
   146a4:	ldreq	r6, [pc, #36]	; 146d0 <flatcc_builder_custom_init@@Base+0x5c>
   146a8:	ldr	r3, [pc, #36]	; 146d4 <flatcc_builder_custom_init@@Base+0x60>
   146ac:	cmp	r5, #0
   146b0:	moveq	r5, r3
   146b4:	ldr	r3, [sp, #24]
   146b8:	str	r3, [r4, #40]	; 0x28
   146bc:	str	r5, [r4, #48]	; 0x30
   146c0:	str	r7, [r4, #36]	; 0x24
   146c4:	str	r6, [r4, #44]	; 0x2c
   146c8:	mov	r0, #0
   146cc:	pop	{r4, r5, r6, r7, r8, pc}
   146d0:	andeq	r8, r1, ip, asr #4
   146d4:	andeq	r4, r1, ip, asr #1

000146d8 <flatcc_builder_init@@Base>:
   146d8:	push	{r4, lr}
   146dc:	mov	r4, r0
   146e0:	mov	r2, #232	; 0xe8
   146e4:	mov	r1, #0
   146e8:	bl	124a8 <memset@plt>
   146ec:	mov	r3, #1
   146f0:	str	r3, [r4, #184]	; 0xb8
   146f4:	ldr	r3, [pc, #24]	; 14714 <flatcc_builder_init@@Base+0x3c>
   146f8:	str	r3, [r4, #48]	; 0x30
   146fc:	add	r3, r4, #188	; 0xbc
   14700:	str	r3, [r4, #36]	; 0x24
   14704:	ldr	r3, [pc, #12]	; 14718 <flatcc_builder_init@@Base+0x40>
   14708:	str	r3, [r4, #44]	; 0x2c
   1470c:	mov	r0, #0
   14710:	pop	{r4, pc}
   14714:	andeq	r4, r1, ip, asr #1
   14718:	andeq	r8, r1, ip, asr #4

0001471c <flatcc_builder_custom_reset@@Base>:
   1471c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14720:	sub	sp, sp, #12
   14724:	mov	r6, r0
   14728:	mov	fp, r1
   1472c:	mov	r8, r2
   14730:	mov	r4, r0
   14734:	mov	r5, #0
   14738:	mov	r9, r5
   1473c:	mov	sl, #1
   14740:	b	14764 <flatcc_builder_custom_reset@@Base+0x48>
   14744:	ldr	r2, [r7, #56]	; 0x38
   14748:	mov	r1, r9
   1474c:	ldr	r0, [r7, #52]	; 0x34
   14750:	bl	124a8 <memset@plt>
   14754:	add	r5, r5, #1
   14758:	add	r4, r4, #8
   1475c:	cmp	r5, #8
   14760:	beq	147cc <flatcc_builder_custom_reset@@Base+0xb0>
   14764:	add	r1, r4, #52	; 0x34
   14768:	mov	r7, r4
   1476c:	ldr	r3, [r4, #52]	; 0x34
   14770:	cmp	r3, #0
   14774:	beq	147ac <flatcc_builder_custom_reset@@Base+0x90>
   14778:	cmp	r5, #5
   1477c:	cmpne	r8, #0
   14780:	beq	14744 <flatcc_builder_custom_reset@@Base+0x28>
   14784:	str	r5, [sp]
   14788:	mov	r3, sl
   1478c:	mov	r2, sl
   14790:	ldr	r0, [r6, #40]	; 0x28
   14794:	ldr	ip, [r6, #48]	; 0x30
   14798:	blx	ip
   1479c:	cmp	r0, #0
   147a0:	beq	14744 <flatcc_builder_custom_reset@@Base+0x28>
   147a4:	mvn	r0, #0
   147a8:	b	14844 <flatcc_builder_custom_reset@@Base+0x128>
   147ac:	ldr	r3, [r4, #56]	; 0x38
   147b0:	cmp	r3, #0
   147b4:	beq	14754 <flatcc_builder_custom_reset@@Base+0x38>
   147b8:	ldr	r3, [pc, #156]	; 1485c <flatcc_builder_custom_reset@@Base+0x140>
   147bc:	ldr	r2, [pc, #156]	; 14860 <flatcc_builder_custom_reset@@Base+0x144>
   147c0:	ldr	r1, [pc, #156]	; 14864 <flatcc_builder_custom_reset@@Base+0x148>
   147c4:	ldr	r0, [pc, #156]	; 14868 <flatcc_builder_custom_reset@@Base+0x14c>
   147c8:	bl	124d8 <__assert_fail@plt>
   147cc:	mov	r3, #0
   147d0:	str	r3, [r6, #120]	; 0x78
   147d4:	ldr	r3, [r6, #124]	; 0x7c
   147d8:	cmp	r3, #0
   147dc:	movne	r3, #16
   147e0:	strne	r3, [r6, #124]	; 0x7c
   147e4:	mov	r3, #0
   147e8:	strh	r3, [r6, #128]	; 0x80
   147ec:	str	r3, [r6, #136]	; 0x88
   147f0:	str	r3, [r6, #140]	; 0x8c
   147f4:	str	r3, [r6, #156]	; 0x9c
   147f8:	str	r3, [r6, #160]	; 0xa0
   147fc:	str	r3, [r6, #20]
   14800:	str	r3, [r6, #24]
   14804:	str	r3, [r6, #148]	; 0x94
   14808:	str	r3, [r6, #152]	; 0x98
   1480c:	ldr	r2, [r6, #60]	; 0x3c
   14810:	str	r2, [r6, #16]
   14814:	ldr	r2, [r6, #76]	; 0x4c
   14818:	str	r2, [r6]
   1481c:	ldr	r2, [r6, #52]	; 0x34
   14820:	str	r2, [r6, #4]
   14824:	str	r3, [r6, #32]
   14828:	cmp	fp, r3
   1482c:	strne	r3, [r6, #172]	; 0xac
   14830:	strne	r3, [r6, #176]	; 0xb0
   14834:	strne	r3, [r6, #180]	; 0xb4
   14838:	ldr	r0, [r6, #184]	; 0xb8
   1483c:	cmp	r0, #0
   14840:	bne	1484c <flatcc_builder_custom_reset@@Base+0x130>
   14844:	add	sp, sp, #12
   14848:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1484c:	add	r0, r6, #188	; 0xbc
   14850:	bl	18114 <flatcc_emitter_reset@@Base>
   14854:	mov	r0, #0
   14858:	b	14844 <flatcc_builder_custom_reset@@Base+0x128>
   1485c:	andeq	sp, r1, r4, asr r6
   14860:			; <UNDEFINED> instruction: 0x000001b2
   14864:	andeq	sp, r1, ip, asr #22
   14868:			; <UNDEFINED> instruction: 0x0001dbb4

0001486c <flatcc_builder_reset@@Base>:
   1486c:	push	{r4, lr}
   14870:	mov	r2, #0
   14874:	mov	r1, r2
   14878:	bl	1471c <flatcc_builder_custom_reset@@Base>
   1487c:	pop	{r4, pc}

00014880 <flatcc_builder_clear@@Base>:
   14880:	push	{r4, r5, r6, r7, r8, lr}
   14884:	sub	sp, sp, #8
   14888:	mov	r6, r0
   1488c:	add	r5, r0, #52	; 0x34
   14890:	mov	r4, #0
   14894:	mov	r8, r4
   14898:	str	r4, [sp]
   1489c:	ldr	r7, [r6, #48]	; 0x30
   148a0:	mov	r3, r8
   148a4:	mov	r2, r8
   148a8:	mov	r1, r5
   148ac:	ldr	r0, [r6, #40]	; 0x28
   148b0:	blx	r7
   148b4:	add	r4, r4, #1
   148b8:	add	r5, r5, #8
   148bc:	cmp	r4, #8
   148c0:	bne	14898 <flatcc_builder_clear@@Base+0x18>
   148c4:	ldr	r3, [r6, #184]	; 0xb8
   148c8:	cmp	r3, #0
   148cc:	bne	148e8 <flatcc_builder_clear@@Base+0x68>
   148d0:	mov	r2, #232	; 0xe8
   148d4:	mov	r1, #0
   148d8:	mov	r0, r6
   148dc:	bl	124a8 <memset@plt>
   148e0:	add	sp, sp, #8
   148e4:	pop	{r4, r5, r6, r7, r8, pc}
   148e8:	add	r0, r6, #188	; 0xbc
   148ec:	bl	181e4 <flatcc_emitter_clear@@Base>
   148f0:	b	148d0 <flatcc_builder_clear@@Base+0x50>

000148f4 <flatcc_builder_enter_user_frame_ptr@@Base>:
   148f4:	push	{r4, r5, r6, r7, r8, lr}
   148f8:	sub	sp, sp, #8
   148fc:	mov	r7, r0
   14900:	add	r4, r1, #3
   14904:	bic	r4, r4, #3
   14908:	add	r4, r4, #4
   1490c:	ldr	r5, [r0, #228]	; 0xe4
   14910:	add	r2, r4, r5
   14914:	ldr	r3, [r0, #112]	; 0x70
   14918:	cmp	r2, r3
   1491c:	bhi	14964 <flatcc_builder_enter_user_frame_ptr@@Base+0x70>
   14920:	ldr	r8, [r7, #108]	; 0x6c
   14924:	adds	r6, r8, r5
   14928:	beq	1499c <flatcc_builder_enter_user_frame_ptr@@Base+0xa8>
   1492c:	mov	r2, r4
   14930:	mov	r1, #0
   14934:	mov	r0, r6
   14938:	bl	124a8 <memset@plt>
   1493c:	ldr	r3, [r7, #224]	; 0xe0
   14940:	str	r3, [r8, r5]
   14944:	ldr	r1, [r7, #228]	; 0xe4
   14948:	add	r3, r1, #4
   1494c:	str	r3, [r7, #224]	; 0xe0
   14950:	add	r4, r4, r1
   14954:	str	r4, [r7, #228]	; 0xe4
   14958:	add	r0, r6, #4
   1495c:	add	sp, sp, #8
   14960:	pop	{r4, r5, r6, r7, r8, pc}
   14964:	mov	r3, #7
   14968:	str	r3, [sp]
   1496c:	ldr	r6, [r0, #48]	; 0x30
   14970:	mov	r3, #0
   14974:	add	r1, r0, #108	; 0x6c
   14978:	ldr	r0, [r0, #40]	; 0x28
   1497c:	blx	r6
   14980:	cmp	r0, #0
   14984:	beq	14920 <flatcc_builder_enter_user_frame_ptr@@Base+0x2c>
   14988:	ldr	r3, [pc, #20]	; 149a4 <flatcc_builder_enter_user_frame_ptr@@Base+0xb0>
   1498c:	mov	r2, #308	; 0x134
   14990:	ldr	r1, [pc, #16]	; 149a8 <flatcc_builder_enter_user_frame_ptr@@Base+0xb4>
   14994:	ldr	r0, [pc, #16]	; 149ac <flatcc_builder_enter_user_frame_ptr@@Base+0xb8>
   14998:	bl	124d8 <__assert_fail@plt>
   1499c:	mov	r0, #0
   149a0:	b	1495c <flatcc_builder_enter_user_frame_ptr@@Base+0x68>
   149a4:	andeq	sp, r1, r8, lsl r6
   149a8:	andeq	sp, r1, ip, asr #22
   149ac:	andeq	sp, r1, r0, lsr #23

000149b0 <flatcc_builder_enter_user_frame@@Base>:
   149b0:	push	{r4, r5, r6, r7, lr}
   149b4:	sub	sp, sp, #12
   149b8:	mov	r6, r0
   149bc:	add	r4, r1, #3
   149c0:	bic	r4, r4, #3
   149c4:	add	r4, r4, #4
   149c8:	ldr	r5, [r0, #228]	; 0xe4
   149cc:	add	r2, r4, r5
   149d0:	ldr	r3, [r0, #112]	; 0x70
   149d4:	cmp	r2, r3
   149d8:	bhi	14a1c <flatcc_builder_enter_user_frame@@Base+0x6c>
   149dc:	ldr	r7, [r6, #108]	; 0x6c
   149e0:	adds	r0, r7, r5
   149e4:	moveq	r0, #0
   149e8:	beq	14a14 <flatcc_builder_enter_user_frame@@Base+0x64>
   149ec:	mov	r2, r4
   149f0:	mov	r1, #0
   149f4:	bl	124a8 <memset@plt>
   149f8:	ldr	r3, [r6, #224]	; 0xe0
   149fc:	str	r3, [r7, r5]
   14a00:	ldr	r1, [r6, #228]	; 0xe4
   14a04:	add	r0, r1, #4
   14a08:	str	r0, [r6, #224]	; 0xe0
   14a0c:	add	r4, r4, r1
   14a10:	str	r4, [r6, #228]	; 0xe4
   14a14:	add	sp, sp, #12
   14a18:	pop	{r4, r5, r6, r7, pc}
   14a1c:	mov	r3, #7
   14a20:	str	r3, [sp]
   14a24:	ldr	r7, [r0, #48]	; 0x30
   14a28:	mov	r3, #0
   14a2c:	add	r1, r0, #108	; 0x6c
   14a30:	ldr	r0, [r0, #40]	; 0x28
   14a34:	blx	r7
   14a38:	cmp	r0, #0
   14a3c:	beq	149dc <flatcc_builder_enter_user_frame@@Base+0x2c>
   14a40:	ldr	r3, [pc, #12]	; 14a54 <flatcc_builder_enter_user_frame@@Base+0xa4>
   14a44:	mov	r2, #308	; 0x134
   14a48:	ldr	r1, [pc, #8]	; 14a58 <flatcc_builder_enter_user_frame@@Base+0xa8>
   14a4c:	ldr	r0, [pc, #8]	; 14a5c <flatcc_builder_enter_user_frame@@Base+0xac>
   14a50:	bl	124d8 <__assert_fail@plt>
   14a54:	andeq	sp, r1, r8, lsl r6
   14a58:	andeq	sp, r1, ip, asr #22
   14a5c:	andeq	sp, r1, r0, lsr #23

00014a60 <flatcc_builder_exit_user_frame@@Base>:
   14a60:	ldr	r3, [r0, #224]	; 0xe0
   14a64:	cmp	r3, #0
   14a68:	beq	14a8c <flatcc_builder_exit_user_frame@@Base+0x2c>
   14a6c:	ldr	r2, [r0, #108]	; 0x6c
   14a70:	add	r2, r2, r3
   14a74:	sub	r3, r3, #4
   14a78:	str	r3, [r0, #228]	; 0xe4
   14a7c:	ldr	r3, [r2, #-4]
   14a80:	str	r3, [r0, #224]	; 0xe0
   14a84:	mov	r0, r3
   14a88:	bx	lr
   14a8c:	push	{r4, lr}
   14a90:	ldr	r3, [pc, #12]	; 14aa4 <flatcc_builder_exit_user_frame@@Base+0x44>
   14a94:	ldr	r2, [pc, #12]	; 14aa8 <flatcc_builder_exit_user_frame@@Base+0x48>
   14a98:	ldr	r1, [pc, #12]	; 14aac <flatcc_builder_exit_user_frame@@Base+0x4c>
   14a9c:	ldr	r0, [pc, #12]	; 14ab0 <flatcc_builder_exit_user_frame@@Base+0x50>
   14aa0:	bl	124d8 <__assert_fail@plt>
   14aa4:	andeq	sp, r1, r0, ror r6
   14aa8:	andeq	r0, r0, lr, lsl r2
   14aac:	andeq	sp, r1, ip, asr #22
   14ab0:	andeq	sp, r1, r8, asr #23

00014ab4 <flatcc_builder_exit_user_frame_at@@Base>:
   14ab4:	push	{r4, lr}
   14ab8:	ldr	r3, [r0, #224]	; 0xe0
   14abc:	cmp	r3, r1
   14ac0:	bcc	14ad0 <flatcc_builder_exit_user_frame_at@@Base+0x1c>
   14ac4:	str	r1, [r0, #224]	; 0xe0
   14ac8:	bl	14a60 <flatcc_builder_exit_user_frame@@Base>
   14acc:	pop	{r4, pc}
   14ad0:	ldr	r3, [pc, #12]	; 14ae4 <flatcc_builder_exit_user_frame_at@@Base+0x30>
   14ad4:	ldr	r2, [pc, #12]	; 14ae8 <flatcc_builder_exit_user_frame_at@@Base+0x34>
   14ad8:	ldr	r1, [pc, #12]	; 14aec <flatcc_builder_exit_user_frame_at@@Base+0x38>
   14adc:	ldr	r0, [pc, #12]	; 14af0 <flatcc_builder_exit_user_frame_at@@Base+0x3c>
   14ae0:	bl	124d8 <__assert_fail@plt>
   14ae4:	muleq	r1, r0, r6
   14ae8:	andeq	r0, r0, r7, lsr #4
   14aec:	andeq	sp, r1, ip, asr #22
   14af0:	andeq	sp, r1, r4, ror #23

00014af4 <flatcc_builder_get_current_user_frame@@Base>:
   14af4:	ldr	r0, [r0, #224]	; 0xe0
   14af8:	bx	lr

00014afc <flatcc_builder_get_user_frame_ptr@@Base>:
   14afc:	ldr	r0, [r0, #108]	; 0x6c
   14b00:	add	r0, r0, r1
   14b04:	bx	lr

00014b08 <flatcc_builder_embed_buffer@@Base>:
   14b08:	push	{r4, r5, r6, lr}
   14b0c:	sub	sp, sp, #88	; 0x58
   14b10:	mov	r4, r0
   14b14:	mov	r6, r2
   14b18:	mov	r5, r3
   14b1c:	ldr	r3, [r0, #152]	; 0x98
   14b20:	adds	r3, r3, #0
   14b24:	movne	r3, #1
   14b28:	mov	r2, r1
   14b2c:	add	r1, sp, #104	; 0x68
   14b30:	bl	141e0 <flatcc_builder_default_alloc@@Base+0x114>
   14b34:	cmp	r0, #0
   14b38:	bne	14c74 <flatcc_builder_embed_buffer@@Base+0x16c>
   14b3c:	ldr	r3, [sp, #108]	; 0x6c
   14b40:	and	r3, r3, #2
   14b44:	cmp	r3, #0
   14b48:	movne	r3, #4
   14b4c:	moveq	r3, #0
   14b50:	ldr	r1, [r4, #136]	; 0x88
   14b54:	sub	r2, r1, r5
   14b58:	sub	r3, r2, r3
   14b5c:	ldrh	r2, [sp, #104]	; 0x68
   14b60:	sub	r2, r2, #1
   14b64:	and	r3, r3, r2
   14b68:	add	r2, r5, r3
   14b6c:	str	r2, [sp, #84]	; 0x54
   14b70:	mov	r2, #0
   14b74:	str	r2, [sp, #12]
   14b78:	str	r2, [sp, #16]
   14b7c:	ldr	r2, [r4, #152]	; 0x98
   14b80:	cmp	r2, #0
   14b84:	beq	14ba4 <flatcc_builder_embed_buffer@@Base+0x9c>
   14b88:	mov	r2, #4
   14b8c:	str	r2, [sp, #12]
   14b90:	add	r0, sp, #84	; 0x54
   14b94:	str	r0, [sp, #20]
   14b98:	str	r2, [sp, #24]
   14b9c:	mov	r2, #1
   14ba0:	str	r2, [sp, #16]
   14ba4:	cmp	r5, #0
   14ba8:	beq	14bd4 <flatcc_builder_embed_buffer@@Base+0xcc>
   14bac:	ldr	r2, [sp, #12]
   14bb0:	add	r2, r2, r5
   14bb4:	str	r2, [sp, #12]
   14bb8:	ldr	r2, [sp, #16]
   14bbc:	add	r2, r2, #1
   14bc0:	add	r0, sp, #88	; 0x58
   14bc4:	add	r0, r0, r2, lsl #3
   14bc8:	str	r6, [r0, #-76]	; 0xffffffb4
   14bcc:	str	r5, [r0, #-72]	; 0xffffffb8
   14bd0:	str	r2, [sp, #16]
   14bd4:	cmp	r3, #0
   14bd8:	beq	14c08 <flatcc_builder_embed_buffer@@Base+0x100>
   14bdc:	ldr	r2, [sp, #12]
   14be0:	add	r2, r2, r3
   14be4:	str	r2, [sp, #12]
   14be8:	ldr	r2, [sp, #16]
   14bec:	add	r2, r2, #1
   14bf0:	add	r0, sp, #88	; 0x58
   14bf4:	add	r0, r0, r2, lsl #3
   14bf8:	ldr	ip, [pc, #124]	; 14c7c <flatcc_builder_embed_buffer@@Base+0x174>
   14bfc:	str	ip, [r0, #-76]	; 0xffffffb4
   14c00:	str	r3, [r0, #-72]	; 0xffffffb8
   14c04:	str	r2, [sp, #16]
   14c08:	ldr	r3, [sp, #12]
   14c0c:	sub	r5, r1, r3
   14c10:	cmp	r1, r5
   14c14:	ble	14c4c <flatcc_builder_embed_buffer@@Base+0x144>
   14c18:	str	r3, [sp]
   14c1c:	ldr	r6, [r4, #44]	; 0x2c
   14c20:	mov	r3, r5
   14c24:	ldr	r2, [sp, #16]
   14c28:	add	r1, sp, #20
   14c2c:	ldr	r0, [r4, #36]	; 0x24
   14c30:	blx	r6
   14c34:	cmp	r0, #0
   14c38:	streq	r5, [r4, #136]	; 0x88
   14c3c:	bne	14c60 <flatcc_builder_embed_buffer@@Base+0x158>
   14c40:	mov	r0, r5
   14c44:	add	sp, sp, #88	; 0x58
   14c48:	pop	{r4, r5, r6, pc}
   14c4c:	ldr	r3, [pc, #44]	; 14c80 <flatcc_builder_embed_buffer@@Base+0x178>
   14c50:	ldr	r2, [pc, #44]	; 14c84 <flatcc_builder_embed_buffer@@Base+0x17c>
   14c54:	ldr	r1, [pc, #44]	; 14c88 <flatcc_builder_embed_buffer@@Base+0x180>
   14c58:	ldr	r0, [pc, #44]	; 14c8c <flatcc_builder_embed_buffer@@Base+0x184>
   14c5c:	bl	124d8 <__assert_fail@plt>
   14c60:	ldr	r3, [pc, #24]	; 14c80 <flatcc_builder_embed_buffer@@Base+0x178>
   14c64:	ldr	r2, [pc, #36]	; 14c90 <flatcc_builder_embed_buffer@@Base+0x188>
   14c68:	ldr	r1, [pc, #24]	; 14c88 <flatcc_builder_embed_buffer@@Base+0x180>
   14c6c:	ldr	r0, [pc, #24]	; 14c8c <flatcc_builder_embed_buffer@@Base+0x184>
   14c70:	bl	124d8 <__assert_fail@plt>
   14c74:	mov	r5, #0
   14c78:	b	14c40 <flatcc_builder_embed_buffer@@Base+0x138>
   14c7c:	strdeq	sp, [r1], -ip
   14c80:	andeq	sp, r1, r8, asr #12
   14c84:	andeq	r0, r0, r7, lsl #5
   14c88:	andeq	sp, r1, ip, asr #22
   14c8c:	andeq	sp, r1, r0, lsr #23
   14c90:	andeq	r0, r0, fp, lsl #5

00014c94 <flatcc_builder_create_buffer@@Base>:
   14c94:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14c98:	sub	sp, sp, #96	; 0x60
   14c9c:	mov	r5, r0
   14ca0:	mov	r9, r1
   14ca4:	mov	r6, r3
   14ca8:	ldr	r8, [sp, #132]	; 0x84
   14cac:	mov	r3, #0
   14cb0:	str	r3, [sp, #12]
   14cb4:	and	r4, r8, #1
   14cb8:	uxtb	r7, r4
   14cbc:	mov	r3, r7
   14cc0:	add	r1, sp, #128	; 0x80
   14cc4:	bl	141e0 <flatcc_builder_default_alloc@@Base+0x114>
   14cc8:	cmp	r0, #0
   14ccc:	bne	14e70 <flatcc_builder_create_buffer@@Base+0x1dc>
   14cd0:	ldrh	r0, [sp, #128]	; 0x80
   14cd4:	ldrh	r3, [r5, #128]	; 0x80
   14cd8:	cmp	r3, r0
   14cdc:	strhcc	r0, [r5, #128]	; 0x80
   14ce0:	cmp	r9, #0
   14ce4:	ldrne	r3, [r9]
   14ce8:	strne	r3, [sp, #12]
   14cec:	ldr	r1, [sp, #12]
   14cf0:	cmp	r1, #0
   14cf4:	movne	r1, #4
   14cf8:	moveq	r1, #0
   14cfc:	tst	r8, #2
   14d00:	bne	14e78 <flatcc_builder_create_buffer@@Base+0x1e4>
   14d04:	ldr	ip, [r5, #136]	; 0x88
   14d08:	mov	r2, ip
   14d0c:	sub	r3, ip, #4
   14d10:	sub	r3, r3, r1
   14d14:	sub	r0, r0, #1
   14d18:	and	r3, r3, r0
   14d1c:	mov	r0, #0
   14d20:	str	r0, [sp, #16]
   14d24:	str	r0, [sp, #20]
   14d28:	cmp	r4, r0
   14d2c:	bne	14e94 <flatcc_builder_create_buffer@@Base+0x200>
   14d30:	ldr	lr, [sp, #16]
   14d34:	add	lr, lr, #4
   14d38:	str	lr, [sp, #16]
   14d3c:	ldr	r8, [sp, #20]
   14d40:	add	r0, r8, #1
   14d44:	add	r9, sp, #96	; 0x60
   14d48:	add	r9, r9, r0, lsl #3
   14d4c:	add	sl, sp, #92	; 0x5c
   14d50:	str	sl, [r9, #-80]	; 0xffffffb0
   14d54:	mov	sl, #4
   14d58:	str	sl, [r9, #-76]	; 0xffffffb4
   14d5c:	str	r0, [sp, #20]
   14d60:	cmp	r1, #0
   14d64:	beq	14d90 <flatcc_builder_create_buffer@@Base+0xfc>
   14d68:	add	lr, r1, lr
   14d6c:	str	lr, [sp, #16]
   14d70:	add	r0, r8, #2
   14d74:	add	lr, sp, #96	; 0x60
   14d78:	add	r0, lr, r0, lsl #3
   14d7c:	add	lr, sp, #12
   14d80:	str	lr, [r0, #-80]	; 0xffffffb0
   14d84:	str	r1, [r0, #-76]	; 0xffffffb4
   14d88:	add	r8, r8, #2
   14d8c:	str	r8, [sp, #20]
   14d90:	cmp	r3, #0
   14d94:	beq	14dc4 <flatcc_builder_create_buffer@@Base+0x130>
   14d98:	ldr	r1, [sp, #16]
   14d9c:	add	r1, r1, r3
   14da0:	str	r1, [sp, #16]
   14da4:	ldr	r1, [sp, #20]
   14da8:	add	r1, r1, #1
   14dac:	add	r0, sp, #96	; 0x60
   14db0:	add	r0, r0, r1, lsl #3
   14db4:	ldr	lr, [pc, #248]	; 14eb4 <flatcc_builder_create_buffer@@Base+0x220>
   14db8:	str	lr, [r0, #-80]	; 0xffffffb0
   14dbc:	str	r3, [r0, #-76]	; 0xffffffb4
   14dc0:	str	r1, [sp, #20]
   14dc4:	ldr	r1, [sp, #16]
   14dc8:	sub	r3, r2, r1
   14dcc:	add	r3, r3, r7, lsl #2
   14dd0:	cmp	r4, #0
   14dd4:	ldrne	r2, [r5, #144]	; 0x90
   14dd8:	ldreq	r2, [r5, #140]	; 0x8c
   14ddc:	sub	r2, r2, r3
   14de0:	str	r2, [sp, #88]	; 0x58
   14de4:	sub	r3, r6, r3
   14de8:	str	r3, [sp, #92]	; 0x5c
   14dec:	sub	r4, ip, r1
   14df0:	cmp	r4, ip
   14df4:	bge	14e34 <flatcc_builder_create_buffer@@Base+0x1a0>
   14df8:	str	r1, [sp]
   14dfc:	ldr	r6, [r5, #44]	; 0x2c
   14e00:	mov	r3, r4
   14e04:	ldr	r2, [sp, #20]
   14e08:	add	r1, sp, #24
   14e0c:	ldr	r0, [r5, #36]	; 0x24
   14e10:	blx	r6
   14e14:	cmp	r0, #0
   14e18:	bne	14e48 <flatcc_builder_create_buffer@@Base+0x1b4>
   14e1c:	str	r4, [r5, #136]	; 0x88
   14e20:	cmp	r4, #0
   14e24:	beq	14e5c <flatcc_builder_create_buffer@@Base+0x1c8>
   14e28:	mov	r0, r4
   14e2c:	add	sp, sp, #96	; 0x60
   14e30:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14e34:	ldr	r3, [pc, #124]	; 14eb8 <flatcc_builder_create_buffer@@Base+0x224>
   14e38:	ldr	r2, [pc, #124]	; 14ebc <flatcc_builder_create_buffer@@Base+0x228>
   14e3c:	ldr	r1, [pc, #124]	; 14ec0 <flatcc_builder_create_buffer@@Base+0x22c>
   14e40:	ldr	r0, [pc, #124]	; 14ec4 <flatcc_builder_create_buffer@@Base+0x230>
   14e44:	bl	124d8 <__assert_fail@plt>
   14e48:	ldr	r3, [pc, #104]	; 14eb8 <flatcc_builder_create_buffer@@Base+0x224>
   14e4c:	ldr	r2, [pc, #116]	; 14ec8 <flatcc_builder_create_buffer@@Base+0x234>
   14e50:	ldr	r1, [pc, #104]	; 14ec0 <flatcc_builder_create_buffer@@Base+0x22c>
   14e54:	ldr	r0, [pc, #104]	; 14ec4 <flatcc_builder_create_buffer@@Base+0x230>
   14e58:	bl	124d8 <__assert_fail@plt>
   14e5c:	ldr	r3, [pc, #104]	; 14ecc <flatcc_builder_create_buffer@@Base+0x238>
   14e60:	mov	r2, #772	; 0x304
   14e64:	ldr	r1, [pc, #84]	; 14ec0 <flatcc_builder_create_buffer@@Base+0x22c>
   14e68:	ldr	r0, [pc, #84]	; 14ec4 <flatcc_builder_create_buffer@@Base+0x230>
   14e6c:	bl	124d8 <__assert_fail@plt>
   14e70:	mov	r4, #0
   14e74:	b	14e28 <flatcc_builder_create_buffer@@Base+0x194>
   14e78:	ldr	ip, [r5, #136]	; 0x88
   14e7c:	mov	r2, ip
   14e80:	sub	r3, ip, #8
   14e84:	sub	r3, r3, r1
   14e88:	sub	r0, r0, #1
   14e8c:	and	r3, r3, r0
   14e90:	mov	r7, #1
   14e94:	mov	r0, #4
   14e98:	str	r0, [sp, #16]
   14e9c:	add	lr, sp, #88	; 0x58
   14ea0:	str	lr, [sp, #24]
   14ea4:	str	r0, [sp, #28]
   14ea8:	mov	r0, #1
   14eac:	str	r0, [sp, #20]
   14eb0:	b	14d30 <flatcc_builder_create_buffer@@Base+0x9c>
   14eb4:	strdeq	sp, [r1], -ip
   14eb8:	andeq	sp, r1, r8, asr #12
   14ebc:	andeq	r0, r0, r7, lsl #5
   14ec0:	andeq	sp, r1, ip, asr #22
   14ec4:	andeq	sp, r1, r0, lsr #23
   14ec8:	andeq	r0, r0, fp, lsl #5
   14ecc:			; <UNDEFINED> instruction: 0x0001d6b4

00014ed0 <flatcc_builder_create_struct@@Base>:
   14ed0:	push	{r4, r5, r6, lr}
   14ed4:	sub	sp, sp, #80	; 0x50
   14ed8:	cmp	r3, #0
   14edc:	beq	14f34 <flatcc_builder_create_struct@@Base+0x64>
   14ee0:	mov	r4, r0
   14ee4:	ldrh	r0, [r0, #128]	; 0x80
   14ee8:	cmp	r0, r3
   14eec:	strhcc	r3, [r4, #128]	; 0x80
   14ef0:	ldr	ip, [r4, #136]	; 0x88
   14ef4:	sub	r0, ip, r2
   14ef8:	sub	r3, r3, #1
   14efc:	and	r3, r3, r0
   14f00:	mov	r0, #0
   14f04:	str	r0, [sp, #8]
   14f08:	str	r0, [sp, #12]
   14f0c:	cmp	r2, r0
   14f10:	beq	14f70 <flatcc_builder_create_struct@@Base+0xa0>
   14f14:	str	r2, [sp, #8]
   14f18:	str	r1, [sp, #16]
   14f1c:	str	r2, [sp, #20]
   14f20:	mov	r2, #1
   14f24:	str	r2, [sp, #12]
   14f28:	cmp	r3, r0
   14f2c:	beq	14fa4 <flatcc_builder_create_struct@@Base+0xd4>
   14f30:	b	14f78 <flatcc_builder_create_struct@@Base+0xa8>
   14f34:	ldr	r3, [pc, #172]	; 14fe8 <flatcc_builder_create_struct@@Base+0x118>
   14f38:	ldr	r2, [pc, #172]	; 14fec <flatcc_builder_create_struct@@Base+0x11c>
   14f3c:	ldr	r1, [pc, #172]	; 14ff0 <flatcc_builder_create_struct@@Base+0x120>
   14f40:	ldr	r0, [pc, #172]	; 14ff4 <flatcc_builder_create_struct@@Base+0x124>
   14f44:	bl	124d8 <__assert_fail@plt>
   14f48:	ldr	r3, [pc, #168]	; 14ff8 <flatcc_builder_create_struct@@Base+0x128>
   14f4c:	ldr	r2, [pc, #168]	; 14ffc <flatcc_builder_create_struct@@Base+0x12c>
   14f50:	ldr	r1, [pc, #152]	; 14ff0 <flatcc_builder_create_struct@@Base+0x120>
   14f54:	ldr	r0, [pc, #164]	; 15000 <flatcc_builder_create_struct@@Base+0x130>
   14f58:	bl	124d8 <__assert_fail@plt>
   14f5c:	ldr	r3, [pc, #148]	; 14ff8 <flatcc_builder_create_struct@@Base+0x128>
   14f60:	ldr	r2, [pc, #156]	; 15004 <flatcc_builder_create_struct@@Base+0x134>
   14f64:	ldr	r1, [pc, #132]	; 14ff0 <flatcc_builder_create_struct@@Base+0x120>
   14f68:	ldr	r0, [pc, #144]	; 15000 <flatcc_builder_create_struct@@Base+0x130>
   14f6c:	bl	124d8 <__assert_fail@plt>
   14f70:	cmp	r3, #0
   14f74:	beq	14f48 <flatcc_builder_create_struct@@Base+0x78>
   14f78:	ldr	r2, [sp, #8]
   14f7c:	add	r2, r2, r3
   14f80:	str	r2, [sp, #8]
   14f84:	ldr	r2, [sp, #12]
   14f88:	add	r2, r2, #1
   14f8c:	add	r1, sp, #80	; 0x50
   14f90:	add	r1, r1, r2, lsl #3
   14f94:	ldr	r0, [pc, #108]	; 15008 <flatcc_builder_create_struct@@Base+0x138>
   14f98:	str	r0, [r1, #-72]	; 0xffffffb8
   14f9c:	str	r3, [r1, #-68]	; 0xffffffbc
   14fa0:	str	r2, [sp, #12]
   14fa4:	ldr	r3, [sp, #8]
   14fa8:	sub	r5, ip, r3
   14fac:	cmp	ip, r5
   14fb0:	ble	14f48 <flatcc_builder_create_struct@@Base+0x78>
   14fb4:	str	r3, [sp]
   14fb8:	ldr	r6, [r4, #44]	; 0x2c
   14fbc:	mov	r3, r5
   14fc0:	ldr	r2, [sp, #12]
   14fc4:	add	r1, sp, #16
   14fc8:	ldr	r0, [r4, #36]	; 0x24
   14fcc:	blx	r6
   14fd0:	cmp	r0, #0
   14fd4:	bne	14f5c <flatcc_builder_create_struct@@Base+0x8c>
   14fd8:	str	r5, [r4, #136]	; 0x88
   14fdc:	mov	r0, r5
   14fe0:	add	sp, sp, #80	; 0x50
   14fe4:	pop	{r4, r5, r6, pc}
   14fe8:	ldrdeq	sp, [r1], -r4
   14fec:	andeq	r0, r0, pc, lsl #6
   14ff0:	andeq	sp, r1, ip, asr #22
   14ff4:	andeq	sp, r1, r4, lsl #24
   14ff8:	andeq	sp, r1, r8, asr #12
   14ffc:	andeq	r0, r0, r7, lsl #5
   15000:	andeq	sp, r1, r0, lsr #23
   15004:	andeq	r0, r0, fp, lsl #5
   15008:	strdeq	sp, [r1], -ip

0001500c <flatcc_builder_start_buffer@@Base>:
   1500c:	push	{r4, r5, r6, r7, r8, lr}
   15010:	mov	r4, r0
   15014:	mov	r5, r1
   15018:	mov	r7, r2
   1501c:	mov	r6, r3
   15020:	ldrh	r1, [r0, #128]	; 0x80
   15024:	bl	142f8 <flatcc_builder_default_alloc@@Base+0x22c>
   15028:	cmp	r0, #0
   1502c:	bne	150b8 <flatcc_builder_start_buffer@@Base+0xac>
   15030:	mov	r3, #1
   15034:	strh	r3, [r4, #128]	; 0x80
   15038:	ldr	r3, [r4, #32]
   1503c:	ldrh	r2, [r4, #132]	; 0x84
   15040:	strh	r2, [r3, #34]	; 0x22
   15044:	strh	r7, [r4, #132]	; 0x84
   15048:	ldr	r3, [r4, #32]
   1504c:	ldrh	r2, [r4, #164]	; 0xa4
   15050:	strh	r2, [r3, #32]
   15054:	strh	r6, [r4, #164]	; 0xa4
   15058:	ldr	r3, [r4, #32]
   1505c:	ldr	r2, [r4, #144]	; 0x90
   15060:	str	r2, [r3, #20]
   15064:	ldr	r3, [r4, #32]
   15068:	ldr	r2, [r4, #152]	; 0x98
   1506c:	str	r2, [r3, #28]
   15070:	ldr	r3, [r4, #136]	; 0x88
   15074:	str	r3, [r4, #144]	; 0x90
   15078:	ldr	r3, [r4, #148]	; 0x94
   1507c:	add	r2, r3, #1
   15080:	str	r2, [r4, #148]	; 0x94
   15084:	str	r3, [r4, #152]	; 0x98
   15088:	ldr	r3, [r4, #32]
   1508c:	ldr	r2, [r4, #168]	; 0xa8
   15090:	str	r2, [r3, #16]
   15094:	ldr	r3, [pc, #36]	; 150c0 <flatcc_builder_start_buffer@@Base+0xb4>
   15098:	cmp	r5, #0
   1509c:	moveq	r5, r3
   150a0:	ldr	r3, [r5]
   150a4:	str	r3, [r4, #168]	; 0xa8
   150a8:	ldr	r3, [r4, #32]
   150ac:	mov	r2, #1
   150b0:	strh	r2, [r3, #14]
   150b4:	pop	{r4, r5, r6, r7, r8, pc}
   150b8:	mvn	r0, #0
   150bc:	pop	{r4, r5, r6, r7, r8, pc}
   150c0:	strdeq	sp, [r1], -ip

000150c4 <flatcc_builder_end_buffer@@Base>:
   150c4:	push	{r4, r5, lr}
   150c8:	sub	sp, sp, #12
   150cc:	mov	r4, r0
   150d0:	ldrh	r2, [r0, #164]	; 0xa4
   150d4:	and	r2, r2, #2
   150d8:	ldr	r0, [r0, #152]	; 0x98
   150dc:	cmp	r0, #0
   150e0:	moveq	r0, r2
   150e4:	orrne	r0, r2, #1
   150e8:	ldr	r2, [r4, #32]
   150ec:	ldrh	r2, [r2, #14]
   150f0:	cmp	r2, #1
   150f4:	bne	15138 <flatcc_builder_end_buffer@@Base+0x74>
   150f8:	ldrh	r2, [r4, #132]	; 0x84
   150fc:	ldrh	r3, [r4, #128]	; 0x80
   15100:	cmp	r3, r2
   15104:	strhcc	r2, [r4, #128]	; 0x80
   15108:	str	r0, [sp, #4]
   1510c:	ldrh	r3, [r4, #128]	; 0x80
   15110:	str	r3, [sp]
   15114:	mov	r3, r1
   15118:	add	r1, r4, #168	; 0xa8
   1511c:	mov	r0, r4
   15120:	bl	14c94 <flatcc_builder_create_buffer@@Base>
   15124:	subs	r5, r0, #0
   15128:	bne	1514c <flatcc_builder_end_buffer@@Base+0x88>
   1512c:	mov	r0, r5
   15130:	add	sp, sp, #12
   15134:	pop	{r4, r5, pc}
   15138:	ldr	r3, [pc, #176]	; 151f0 <flatcc_builder_end_buffer@@Base+0x12c>
   1513c:	ldr	r2, [pc, #176]	; 151f4 <flatcc_builder_end_buffer@@Base+0x130>
   15140:	ldr	r1, [pc, #176]	; 151f8 <flatcc_builder_end_buffer@@Base+0x134>
   15144:	ldr	r0, [pc, #176]	; 151fc <flatcc_builder_end_buffer@@Base+0x138>
   15148:	bl	124d8 <__assert_fail@plt>
   1514c:	ldr	r3, [r4, #32]
   15150:	ldr	r2, [r3, #20]
   15154:	str	r2, [r4, #144]	; 0x90
   15158:	ldr	r2, [r3, #28]
   1515c:	str	r2, [r4, #152]	; 0x98
   15160:	ldr	r2, [r3, #16]
   15164:	str	r2, [r4, #168]	; 0xa8
   15168:	ldrh	r3, [r3, #32]
   1516c:	strh	r3, [r4, #164]	; 0xa4
   15170:	ldr	r2, [r4, #20]
   15174:	mov	r1, #0
   15178:	ldr	r0, [r4, #16]
   1517c:	bl	124a8 <memset@plt>
   15180:	ldr	r2, [r4, #32]
   15184:	ldr	r3, [r2, #8]
   15188:	str	r3, [r4, #20]
   1518c:	ldr	r0, [r2]
   15190:	str	r0, [r4, #28]
   15194:	ldr	r1, [r2, #4]
   15198:	ldr	r3, [r4, #60]	; 0x3c
   1519c:	add	r3, r3, r0
   151a0:	str	r3, [r4, #16]
   151a4:	ldr	r3, [r4, #64]	; 0x40
   151a8:	sub	r3, r3, r0
   151ac:	cmp	r3, r1
   151b0:	movcs	r3, r1
   151b4:	str	r3, [r4, #24]
   151b8:	str	r1, [r2, #4]
   151bc:	ldrh	r3, [r4, #130]	; 0x82
   151c0:	ldrh	r2, [r4, #128]	; 0x80
   151c4:	cmp	r2, r3
   151c8:	strhcc	r3, [r4, #128]	; 0x80
   151cc:	ldr	r3, [r4, #32]
   151d0:	ldrh	r2, [r3, #12]
   151d4:	strh	r2, [r4, #130]	; 0x82
   151d8:	sub	r3, r3, #36	; 0x24
   151dc:	str	r3, [r4, #32]
   151e0:	ldr	r3, [r4, #156]	; 0x9c
   151e4:	sub	r3, r3, #1
   151e8:	str	r3, [r4, #156]	; 0x9c
   151ec:	b	1512c <flatcc_builder_end_buffer@@Base+0x68>
   151f0:	strdeq	sp, [r1], -r4
   151f4:	andeq	r0, r0, r6, asr #6
   151f8:	andeq	sp, r1, ip, asr #22
   151fc:	andeq	sp, r1, r0, lsl ip

00015200 <flatcc_builder_start_struct@@Base>:
   15200:	push	{r4, r5, r6, lr}
   15204:	mov	r4, r0
   15208:	mov	r5, r1
   1520c:	mov	r1, r2
   15210:	bl	142f8 <flatcc_builder_default_alloc@@Base+0x22c>
   15214:	cmp	r0, #0
   15218:	bne	15298 <flatcc_builder_start_struct@@Base+0x98>
   1521c:	ldr	r3, [r4, #32]
   15220:	mov	r2, #2
   15224:	strh	r2, [r3, #14]
   15228:	ldr	r1, [r4, #28]
   1522c:	ldr	r2, [r4, #60]	; 0x3c
   15230:	add	r2, r2, r1
   15234:	str	r2, [r4, #16]
   15238:	ldr	r3, [r4, #64]	; 0x40
   1523c:	sub	r3, r3, r1
   15240:	cmn	r3, #4
   15244:	mvnhi	r3, #3
   15248:	str	r3, [r4, #24]
   1524c:	ldr	r3, [r4, #32]
   15250:	mvn	r2, #3
   15254:	str	r2, [r3, #4]
   15258:	ldr	r6, [r4, #20]
   1525c:	add	r5, r5, r6
   15260:	str	r5, [r4, #20]
   15264:	ldr	r3, [r4, #24]
   15268:	cmp	r5, r3
   1526c:	bcs	1527c <flatcc_builder_start_struct@@Base+0x7c>
   15270:	ldr	r0, [r4, #16]
   15274:	add	r0, r0, r6
   15278:	pop	{r4, r5, r6, pc}
   1527c:	add	r1, r5, #1
   15280:	mov	r0, r4
   15284:	bl	14058 <main@@Base+0x48>
   15288:	cmp	r0, #0
   1528c:	beq	15270 <flatcc_builder_start_struct@@Base+0x70>
   15290:	mov	r0, #0
   15294:	pop	{r4, r5, r6, pc}
   15298:	mov	r0, #0
   1529c:	pop	{r4, r5, r6, pc}

000152a0 <flatcc_builder_struct_edit@@Base>:
   152a0:	ldr	r0, [r0, #16]
   152a4:	bx	lr

000152a8 <flatcc_builder_end_struct@@Base>:
   152a8:	push	{r4, r5, r6, lr}
   152ac:	ldr	r3, [r0, #32]
   152b0:	ldrh	r3, [r3, #14]
   152b4:	cmp	r3, #2
   152b8:	bne	152e0 <flatcc_builder_end_struct@@Base+0x38>
   152bc:	mov	r4, r0
   152c0:	ldrh	r3, [r0, #130]	; 0x82
   152c4:	ldr	r2, [r0, #20]
   152c8:	ldr	r1, [r0, #16]
   152cc:	bl	14ed0 <flatcc_builder_create_struct@@Base>
   152d0:	subs	r5, r0, #0
   152d4:	bne	152f4 <flatcc_builder_end_struct@@Base+0x4c>
   152d8:	mov	r0, r5
   152dc:	pop	{r4, r5, r6, pc}
   152e0:	ldr	r3, [pc, #140]	; 15374 <flatcc_builder_end_struct@@Base+0xcc>
   152e4:	mov	r2, #872	; 0x368
   152e8:	ldr	r1, [pc, #136]	; 15378 <flatcc_builder_end_struct@@Base+0xd0>
   152ec:	ldr	r0, [pc, #136]	; 1537c <flatcc_builder_end_struct@@Base+0xd4>
   152f0:	bl	124d8 <__assert_fail@plt>
   152f4:	ldr	r2, [r4, #20]
   152f8:	mov	r1, #0
   152fc:	ldr	r0, [r4, #16]
   15300:	bl	124a8 <memset@plt>
   15304:	ldr	r2, [r4, #32]
   15308:	ldr	r3, [r2, #8]
   1530c:	str	r3, [r4, #20]
   15310:	ldr	r0, [r2]
   15314:	str	r0, [r4, #28]
   15318:	ldr	r1, [r2, #4]
   1531c:	ldr	r3, [r4, #60]	; 0x3c
   15320:	add	r3, r3, r0
   15324:	str	r3, [r4, #16]
   15328:	ldr	r3, [r4, #64]	; 0x40
   1532c:	sub	r3, r3, r0
   15330:	cmp	r3, r1
   15334:	movcs	r3, r1
   15338:	str	r3, [r4, #24]
   1533c:	str	r1, [r2, #4]
   15340:	ldrh	r3, [r4, #130]	; 0x82
   15344:	ldrh	r2, [r4, #128]	; 0x80
   15348:	cmp	r2, r3
   1534c:	strhcc	r3, [r4, #128]	; 0x80
   15350:	ldr	r3, [r4, #32]
   15354:	ldrh	r2, [r3, #12]
   15358:	strh	r2, [r4, #130]	; 0x82
   1535c:	sub	r3, r3, #36	; 0x24
   15360:	str	r3, [r4, #32]
   15364:	ldr	r3, [r4, #156]	; 0x9c
   15368:	sub	r3, r3, #1
   1536c:	str	r3, [r4, #156]	; 0x9c
   15370:	b	152d8 <flatcc_builder_end_struct@@Base+0x30>
   15374:	andeq	sp, r1, r0, lsl r7
   15378:	andeq	sp, r1, ip, asr #22
   1537c:	andeq	sp, r1, ip, lsr ip

00015380 <flatcc_builder_extend_vector@@Base>:
   15380:	push	{r4, r5, r6, lr}
   15384:	mov	r4, r0
   15388:	ldr	r2, [r0, #32]
   1538c:	ldr	r3, [r2, #20]
   15390:	add	r0, r1, r3
   15394:	ldr	ip, [r2, #24]
   15398:	cmp	r3, r0
   1539c:	movls	r3, #0
   153a0:	movhi	r3, #1
   153a4:	cmp	ip, r0
   153a8:	orrcc	r3, r3, #1
   153ac:	cmp	r3, #0
   153b0:	bne	153e4 <flatcc_builder_extend_vector@@Base+0x64>
   153b4:	str	r0, [r2, #20]
   153b8:	ldr	r5, [r4, #20]
   153bc:	ldr	r3, [r4, #32]
   153c0:	ldr	r3, [r3, #16]
   153c4:	mla	r1, r3, r1, r5
   153c8:	str	r1, [r4, #20]
   153cc:	ldr	r3, [r4, #24]
   153d0:	cmp	r1, r3
   153d4:	bcs	153f8 <flatcc_builder_extend_vector@@Base+0x78>
   153d8:	ldr	r0, [r4, #16]
   153dc:	add	r0, r0, r5
   153e0:	pop	{r4, r5, r6, pc}
   153e4:	ldr	r3, [pc, #44]	; 15418 <flatcc_builder_extend_vector@@Base+0x98>
   153e8:	mov	r2, #892	; 0x37c
   153ec:	ldr	r1, [pc, #40]	; 1541c <flatcc_builder_extend_vector@@Base+0x9c>
   153f0:	ldr	r0, [pc, #40]	; 15420 <flatcc_builder_extend_vector@@Base+0xa0>
   153f4:	bl	124d8 <__assert_fail@plt>
   153f8:	mvn	r2, #3
   153fc:	add	r1, r1, #1
   15400:	mov	r0, r4
   15404:	bl	14058 <main@@Base+0x48>
   15408:	cmp	r0, #0
   1540c:	beq	153d8 <flatcc_builder_extend_vector@@Base+0x58>
   15410:	mov	r0, #0
   15414:	pop	{r4, r5, r6, pc}
   15418:	andeq	sp, r1, ip, lsr #14
   1541c:	andeq	sp, r1, ip, asr #22
   15420:	andeq	sp, r1, r8, ror #24

00015424 <flatcc_builder_vector_push@@Base>:
   15424:	push	{r4, r5, r6, r7, r8, lr}
   15428:	ldr	r3, [r0, #32]
   1542c:	ldrh	r2, [r3, #14]
   15430:	cmp	r2, #4
   15434:	bne	1549c <flatcc_builder_vector_push@@Base+0x78>
   15438:	mov	r4, r0
   1543c:	mov	r6, r1
   15440:	ldr	r2, [r3, #20]
   15444:	ldr	r1, [r3, #24]
   15448:	cmp	r2, r1
   1544c:	bhi	154b0 <flatcc_builder_vector_push@@Base+0x8c>
   15450:	add	r2, r2, #1
   15454:	str	r2, [r3, #20]
   15458:	ldr	r3, [r0, #32]
   1545c:	ldr	r7, [r3, #16]
   15460:	ldr	r5, [r0, #20]
   15464:	add	r1, r7, r5
   15468:	str	r1, [r0, #20]
   1546c:	ldr	r3, [r0, #24]
   15470:	cmp	r1, r3
   15474:	bcs	154c4 <flatcc_builder_vector_push@@Base+0xa0>
   15478:	ldr	r4, [r4, #16]
   1547c:	adds	r4, r4, r5
   15480:	beq	15494 <flatcc_builder_vector_push@@Base+0x70>
   15484:	mov	r2, r7
   15488:	mov	r1, r6
   1548c:	mov	r0, r4
   15490:	bl	12430 <memcpy@plt>
   15494:	mov	r0, r4
   15498:	pop	{r4, r5, r6, r7, r8, pc}
   1549c:	ldr	r3, [pc, #60]	; 154e0 <flatcc_builder_vector_push@@Base+0xbc>
   154a0:	ldr	r2, [pc, #60]	; 154e4 <flatcc_builder_vector_push@@Base+0xc0>
   154a4:	ldr	r1, [pc, #60]	; 154e8 <flatcc_builder_vector_push@@Base+0xc4>
   154a8:	ldr	r0, [pc, #60]	; 154ec <flatcc_builder_vector_push@@Base+0xc8>
   154ac:	bl	124d8 <__assert_fail@plt>
   154b0:	ldr	r3, [pc, #40]	; 154e0 <flatcc_builder_vector_push@@Base+0xbc>
   154b4:	mov	r2, #908	; 0x38c
   154b8:	ldr	r1, [pc, #40]	; 154e8 <flatcc_builder_vector_push@@Base+0xc4>
   154bc:	ldr	r0, [pc, #44]	; 154f0 <flatcc_builder_vector_push@@Base+0xcc>
   154c0:	bl	124d8 <__assert_fail@plt>
   154c4:	mvn	r2, #3
   154c8:	add	r1, r1, #1
   154cc:	bl	14058 <main@@Base+0x48>
   154d0:	cmp	r0, #0
   154d4:	beq	15478 <flatcc_builder_vector_push@@Base+0x54>
   154d8:	mov	r4, #0
   154dc:	b	15494 <flatcc_builder_vector_push@@Base+0x70>
   154e0:	andeq	sp, r1, r0, asr #14
   154e4:	andeq	r0, r0, fp, lsl #7
   154e8:	andeq	sp, r1, ip, asr #22
   154ec:	andeq	sp, r1, r4, lsl #25
   154f0:			; <UNDEFINED> instruction: 0x0001dcb0

000154f4 <flatcc_builder_append_vector@@Base>:
   154f4:	push	{r4, r5, r6, r7, r8, lr}
   154f8:	mov	r5, r1
   154fc:	ldr	r1, [r0, #32]
   15500:	ldrh	r3, [r1, #14]
   15504:	cmp	r3, #4
   15508:	bne	15584 <flatcc_builder_append_vector@@Base+0x90>
   1550c:	mov	r4, r0
   15510:	ldr	r3, [r1, #20]
   15514:	add	r0, r2, r3
   15518:	ldr	ip, [r1, #24]
   1551c:	cmp	r3, r0
   15520:	movls	r3, #0
   15524:	movhi	r3, #1
   15528:	cmp	ip, r0
   1552c:	orrcc	r3, r3, #1
   15530:	cmp	r3, #0
   15534:	bne	15598 <flatcc_builder_append_vector@@Base+0xa4>
   15538:	str	r0, [r1, #20]
   1553c:	ldr	r3, [r4, #32]
   15540:	ldr	r6, [r3, #16]
   15544:	mul	r6, r6, r2
   15548:	ldr	r7, [r4, #20]
   1554c:	add	r1, r6, r7
   15550:	str	r1, [r4, #20]
   15554:	ldr	r3, [r4, #24]
   15558:	cmp	r1, r3
   1555c:	bcs	155ac <flatcc_builder_append_vector@@Base+0xb8>
   15560:	ldr	r4, [r4, #16]
   15564:	adds	r4, r4, r7
   15568:	beq	1557c <flatcc_builder_append_vector@@Base+0x88>
   1556c:	mov	r2, r6
   15570:	mov	r1, r5
   15574:	mov	r0, r4
   15578:	bl	12430 <memcpy@plt>
   1557c:	mov	r0, r4
   15580:	pop	{r4, r5, r6, r7, r8, pc}
   15584:	ldr	r3, [pc, #64]	; 155cc <flatcc_builder_append_vector@@Base+0xd8>
   15588:	ldr	r2, [pc, #64]	; 155d0 <flatcc_builder_append_vector@@Base+0xdc>
   1558c:	ldr	r1, [pc, #64]	; 155d4 <flatcc_builder_append_vector@@Base+0xe0>
   15590:	ldr	r0, [pc, #64]	; 155d8 <flatcc_builder_append_vector@@Base+0xe4>
   15594:	bl	124d8 <__assert_fail@plt>
   15598:	ldr	r3, [pc, #60]	; 155dc <flatcc_builder_append_vector@@Base+0xe8>
   1559c:	mov	r2, #892	; 0x37c
   155a0:	ldr	r1, [pc, #44]	; 155d4 <flatcc_builder_append_vector@@Base+0xe0>
   155a4:	ldr	r0, [pc, #52]	; 155e0 <flatcc_builder_append_vector@@Base+0xec>
   155a8:	bl	124d8 <__assert_fail@plt>
   155ac:	mvn	r2, #3
   155b0:	add	r1, r1, #1
   155b4:	mov	r0, r4
   155b8:	bl	14058 <main@@Base+0x48>
   155bc:	cmp	r0, #0
   155c0:	beq	15560 <flatcc_builder_append_vector@@Base+0x6c>
   155c4:	mov	r4, #0
   155c8:	b	1557c <flatcc_builder_append_vector@@Base+0x88>
   155cc:	andeq	sp, r1, ip, asr r7
   155d0:	muleq	r0, r3, r3
   155d4:	andeq	sp, r1, ip, asr #22
   155d8:	andeq	sp, r1, r4, lsl #25
   155dc:	andeq	sp, r1, ip, lsr #14
   155e0:	andeq	sp, r1, r8, ror #24

000155e4 <flatcc_builder_extend_offset_vector@@Base>:
   155e4:	push	{r4, r5, r6, lr}
   155e8:	mov	r4, r0
   155ec:	ldr	r2, [r0, #32]
   155f0:	ldr	r3, [r2, #20]
   155f4:	adds	r3, r1, r3
   155f8:	movcs	ip, #1
   155fc:	movcc	ip, #0
   15600:	cmn	r3, #-1073741823	; 0xc0000001
   15604:	movls	r0, #0
   15608:	movhi	r0, #1
   1560c:	orrs	r0, ip, r0
   15610:	bne	1563c <flatcc_builder_extend_offset_vector@@Base+0x58>
   15614:	str	r3, [r2, #20]
   15618:	ldr	r5, [r4, #20]
   1561c:	add	r1, r5, r1, lsl #2
   15620:	str	r1, [r4, #20]
   15624:	ldr	r3, [r4, #24]
   15628:	cmp	r1, r3
   1562c:	bcs	15650 <flatcc_builder_extend_offset_vector@@Base+0x6c>
   15630:	ldr	r0, [r4, #16]
   15634:	add	r0, r0, r5
   15638:	pop	{r4, r5, r6, pc}
   1563c:	ldr	r3, [pc, #44]	; 15670 <flatcc_builder_extend_offset_vector@@Base+0x8c>
   15640:	mov	r2, #892	; 0x37c
   15644:	ldr	r1, [pc, #40]	; 15674 <flatcc_builder_extend_offset_vector@@Base+0x90>
   15648:	ldr	r0, [pc, #40]	; 15678 <flatcc_builder_extend_offset_vector@@Base+0x94>
   1564c:	bl	124d8 <__assert_fail@plt>
   15650:	mvn	r2, #3
   15654:	add	r1, r1, #1
   15658:	mov	r0, r4
   1565c:	bl	14058 <main@@Base+0x48>
   15660:	cmp	r0, #0
   15664:	beq	15630 <flatcc_builder_extend_offset_vector@@Base+0x4c>
   15668:	mov	r0, #0
   1566c:	pop	{r4, r5, r6, pc}
   15670:	andeq	sp, r1, ip, lsr #14
   15674:	andeq	sp, r1, ip, asr #22
   15678:	andeq	sp, r1, r8, ror #24

0001567c <flatcc_builder_offset_vector_push@@Base>:
   1567c:	push	{r4, r5, r6, lr}
   15680:	ldr	r2, [r0, #32]
   15684:	ldrh	r3, [r2, #14]
   15688:	cmp	r3, #5
   1568c:	bne	156d4 <flatcc_builder_offset_vector_push@@Base+0x58>
   15690:	mov	r4, r0
   15694:	mov	r6, r1
   15698:	ldr	r3, [r2, #20]
   1569c:	cmn	r3, #-1073741823	; 0xc0000001
   156a0:	beq	15704 <flatcc_builder_offset_vector_push@@Base+0x88>
   156a4:	add	r3, r3, #1
   156a8:	str	r3, [r2, #20]
   156ac:	ldr	r5, [r0, #20]
   156b0:	add	r3, r5, #4
   156b4:	str	r3, [r0, #20]
   156b8:	ldr	r2, [r0, #24]
   156bc:	cmp	r3, r2
   156c0:	bcs	156e8 <flatcc_builder_offset_vector_push@@Base+0x6c>
   156c4:	ldr	r3, [r4, #16]
   156c8:	adds	r0, r3, r5
   156cc:	strne	r6, [r3, r5]
   156d0:	pop	{r4, r5, r6, pc}
   156d4:	ldr	r3, [pc, #48]	; 1570c <flatcc_builder_offset_vector_push@@Base+0x90>
   156d8:	ldr	r2, [pc, #48]	; 15710 <flatcc_builder_offset_vector_push@@Base+0x94>
   156dc:	ldr	r1, [pc, #48]	; 15714 <flatcc_builder_offset_vector_push@@Base+0x98>
   156e0:	ldr	r0, [pc, #48]	; 15718 <flatcc_builder_offset_vector_push@@Base+0x9c>
   156e4:	bl	124d8 <__assert_fail@plt>
   156e8:	mvn	r2, #3
   156ec:	add	r1, r5, #5
   156f0:	bl	14058 <main@@Base+0x48>
   156f4:	cmp	r0, #0
   156f8:	beq	156c4 <flatcc_builder_offset_vector_push@@Base+0x48>
   156fc:	mov	r0, #0
   15700:	pop	{r4, r5, r6, pc}
   15704:	mov	r0, #0
   15708:	pop	{r4, r5, r6, pc}
   1570c:	andeq	sp, r1, ip, ror r7
   15710:	andeq	r0, r0, r6, lsr #7
   15714:	andeq	sp, r1, ip, asr #22
   15718:	strdeq	sp, [r1], -r0

0001571c <flatcc_builder_append_offset_vector@@Base>:
   1571c:	push	{r4, r5, r6, r7, r8, lr}
   15720:	mov	r6, r1
   15724:	ldr	r1, [r0, #32]
   15728:	ldrh	r3, [r1, #14]
   1572c:	cmp	r3, #5
   15730:	bne	157a0 <flatcc_builder_append_offset_vector@@Base+0x84>
   15734:	mov	r5, r0
   15738:	ldr	r3, [r1, #20]
   1573c:	adds	r3, r2, r3
   15740:	movcs	ip, #1
   15744:	movcc	ip, #0
   15748:	cmn	r3, #-1073741823	; 0xc0000001
   1574c:	movls	r0, #0
   15750:	movhi	r0, #1
   15754:	orrs	r0, ip, r0
   15758:	bne	157b4 <flatcc_builder_append_offset_vector@@Base+0x98>
   1575c:	str	r3, [r1, #20]
   15760:	lsl	r4, r2, #2
   15764:	ldr	r7, [r5, #20]
   15768:	add	r1, r4, r7
   1576c:	str	r1, [r5, #20]
   15770:	ldr	r3, [r5, #24]
   15774:	cmp	r1, r3
   15778:	bcs	157c8 <flatcc_builder_append_offset_vector@@Base+0xac>
   1577c:	ldr	r5, [r5, #16]
   15780:	adds	r5, r5, r7
   15784:	beq	15798 <flatcc_builder_append_offset_vector@@Base+0x7c>
   15788:	mov	r2, r4
   1578c:	mov	r1, r6
   15790:	mov	r0, r5
   15794:	bl	12430 <memcpy@plt>
   15798:	mov	r0, r5
   1579c:	pop	{r4, r5, r6, r7, r8, pc}
   157a0:	ldr	r3, [pc, #64]	; 157e8 <flatcc_builder_append_offset_vector@@Base+0xcc>
   157a4:	mov	r2, #948	; 0x3b4
   157a8:	ldr	r1, [pc, #60]	; 157ec <flatcc_builder_append_offset_vector@@Base+0xd0>
   157ac:	ldr	r0, [pc, #60]	; 157f0 <flatcc_builder_append_offset_vector@@Base+0xd4>
   157b0:	bl	124d8 <__assert_fail@plt>
   157b4:	ldr	r3, [pc, #56]	; 157f4 <flatcc_builder_append_offset_vector@@Base+0xd8>
   157b8:	mov	r2, #892	; 0x37c
   157bc:	ldr	r1, [pc, #40]	; 157ec <flatcc_builder_append_offset_vector@@Base+0xd0>
   157c0:	ldr	r0, [pc, #48]	; 157f8 <flatcc_builder_append_offset_vector@@Base+0xdc>
   157c4:	bl	124d8 <__assert_fail@plt>
   157c8:	mvn	r2, #3
   157cc:	add	r1, r1, #1
   157d0:	mov	r0, r5
   157d4:	bl	14058 <main@@Base+0x48>
   157d8:	cmp	r0, #0
   157dc:	beq	1577c <flatcc_builder_append_offset_vector@@Base+0x60>
   157e0:	mov	r5, #0
   157e4:	b	15798 <flatcc_builder_append_offset_vector@@Base+0x7c>
   157e8:	andeq	sp, r1, r0, lsr #15
   157ec:	andeq	sp, r1, ip, asr #22
   157f0:	strdeq	sp, [r1], -r0
   157f4:	andeq	sp, r1, ip, lsr #14
   157f8:	andeq	sp, r1, r8, ror #24

000157fc <flatcc_builder_extend_string@@Base>:
   157fc:	push	{r4, r5, r6, lr}
   15800:	ldr	r2, [r0, #32]
   15804:	ldrh	r3, [r2, #14]
   15808:	cmp	r3, #6
   1580c:	bne	15848 <flatcc_builder_extend_string@@Base+0x4c>
   15810:	mov	r4, r0
   15814:	ldr	r3, [r2, #20]
   15818:	adds	r3, r1, r3
   1581c:	bcs	1585c <flatcc_builder_extend_string@@Base+0x60>
   15820:	str	r3, [r2, #20]
   15824:	ldr	r5, [r0, #20]
   15828:	add	r1, r1, r5
   1582c:	str	r1, [r0, #20]
   15830:	ldr	r3, [r0, #24]
   15834:	cmp	r1, r3
   15838:	bcs	15870 <flatcc_builder_extend_string@@Base+0x74>
   1583c:	ldr	r0, [r4, #16]
   15840:	add	r0, r0, r5
   15844:	pop	{r4, r5, r6, pc}
   15848:	ldr	r3, [pc, #60]	; 1588c <flatcc_builder_extend_string@@Base+0x90>
   1584c:	ldr	r2, [pc, #60]	; 15890 <flatcc_builder_extend_string@@Base+0x94>
   15850:	ldr	r1, [pc, #60]	; 15894 <flatcc_builder_extend_string@@Base+0x98>
   15854:	ldr	r0, [pc, #60]	; 15898 <flatcc_builder_extend_string@@Base+0x9c>
   15858:	bl	124d8 <__assert_fail@plt>
   1585c:	ldr	r3, [pc, #56]	; 1589c <flatcc_builder_extend_string@@Base+0xa0>
   15860:	mov	r2, #892	; 0x37c
   15864:	ldr	r1, [pc, #40]	; 15894 <flatcc_builder_extend_string@@Base+0x98>
   15868:	ldr	r0, [pc, #48]	; 158a0 <flatcc_builder_extend_string@@Base+0xa4>
   1586c:	bl	124d8 <__assert_fail@plt>
   15870:	mvn	r2, #3
   15874:	add	r1, r1, #1
   15878:	bl	14058 <main@@Base+0x48>
   1587c:	cmp	r0, #0
   15880:	beq	1583c <flatcc_builder_extend_string@@Base+0x40>
   15884:	mov	r0, #0
   15888:	pop	{r4, r5, r6, pc}
   1588c:	andeq	sp, r1, r4, asr #15
   15890:			; <UNDEFINED> instruction: 0x000003bd
   15894:	andeq	sp, r1, ip, asr #22
   15898:	andeq	sp, r1, r4, lsr #26
   1589c:	andeq	sp, r1, ip, lsr #14
   158a0:	andeq	sp, r1, r8, ror #24

000158a4 <flatcc_builder_append_string@@Base>:
   158a4:	push	{r4, r5, r6, r7, r8, lr}
   158a8:	mov	r5, r2
   158ac:	ldr	r2, [r0, #32]
   158b0:	ldrh	r3, [r2, #14]
   158b4:	cmp	r3, #6
   158b8:	bne	15910 <flatcc_builder_append_string@@Base+0x6c>
   158bc:	mov	r4, r0
   158c0:	mov	r6, r1
   158c4:	ldr	r3, [r2, #20]
   158c8:	adds	r3, r5, r3
   158cc:	bcs	15924 <flatcc_builder_append_string@@Base+0x80>
   158d0:	str	r3, [r2, #20]
   158d4:	ldr	r7, [r0, #20]
   158d8:	add	r1, r5, r7
   158dc:	str	r1, [r0, #20]
   158e0:	ldr	r3, [r0, #24]
   158e4:	cmp	r1, r3
   158e8:	bcs	15938 <flatcc_builder_append_string@@Base+0x94>
   158ec:	ldr	r4, [r4, #16]
   158f0:	adds	r4, r4, r7
   158f4:	beq	15908 <flatcc_builder_append_string@@Base+0x64>
   158f8:	mov	r2, r5
   158fc:	mov	r1, r6
   15900:	mov	r0, r4
   15904:	bl	12430 <memcpy@plt>
   15908:	mov	r0, r4
   1590c:	pop	{r4, r5, r6, r7, r8, pc}
   15910:	ldr	r3, [pc, #60]	; 15954 <flatcc_builder_append_string@@Base+0xb0>
   15914:	ldr	r2, [pc, #60]	; 15958 <flatcc_builder_append_string@@Base+0xb4>
   15918:	ldr	r1, [pc, #60]	; 1595c <flatcc_builder_append_string@@Base+0xb8>
   1591c:	ldr	r0, [pc, #60]	; 15960 <flatcc_builder_append_string@@Base+0xbc>
   15920:	bl	124d8 <__assert_fail@plt>
   15924:	ldr	r3, [pc, #56]	; 15964 <flatcc_builder_append_string@@Base+0xc0>
   15928:	mov	r2, #892	; 0x37c
   1592c:	ldr	r1, [pc, #40]	; 1595c <flatcc_builder_append_string@@Base+0xb8>
   15930:	ldr	r0, [pc, #48]	; 15968 <flatcc_builder_append_string@@Base+0xc4>
   15934:	bl	124d8 <__assert_fail@plt>
   15938:	mvn	r2, #3
   1593c:	add	r1, r1, #1
   15940:	bl	14058 <main@@Base+0x48>
   15944:	cmp	r0, #0
   15948:	beq	158ec <flatcc_builder_append_string@@Base+0x48>
   1594c:	mov	r4, #0
   15950:	b	15908 <flatcc_builder_append_string@@Base+0x64>
   15954:	andeq	sp, r1, r4, ror #15
   15958:	andeq	r0, r0, r6, asr #7
   1595c:	andeq	sp, r1, ip, asr #22
   15960:	andeq	sp, r1, r4, lsr #26
   15964:	andeq	sp, r1, ip, lsr #14
   15968:	andeq	sp, r1, r8, ror #24

0001596c <flatcc_builder_append_string_str@@Base>:
   1596c:	push	{r4, r5, r6, lr}
   15970:	mov	r5, r0
   15974:	mov	r4, r1
   15978:	mov	r0, r1
   1597c:	bl	12484 <strlen@plt>
   15980:	mov	r2, r0
   15984:	mov	r1, r4
   15988:	mov	r0, r5
   1598c:	bl	158a4 <flatcc_builder_append_string@@Base>
   15990:	pop	{r4, r5, r6, pc}

00015994 <flatcc_builder_append_string_strn@@Base>:
   15994:	push	{r4, r5, r6, lr}
   15998:	mov	r6, r0
   1599c:	mov	r4, r1
   159a0:	mov	r5, r2
   159a4:	mov	r1, #0
   159a8:	mov	r0, r4
   159ac:	bl	124c0 <memchr@plt>
   159b0:	cmp	r0, #0
   159b4:	subne	r5, r0, r4
   159b8:	mov	r2, r5
   159bc:	mov	r1, r4
   159c0:	mov	r0, r6
   159c4:	bl	158a4 <flatcc_builder_append_string@@Base>
   159c8:	pop	{r4, r5, r6, pc}

000159cc <flatcc_builder_truncate_vector@@Base>:
   159cc:	push	{r4, lr}
   159d0:	ldr	ip, [r0, #32]
   159d4:	ldrh	r3, [ip, #14]
   159d8:	cmp	r3, #4
   159dc:	bne	15a24 <flatcc_builder_truncate_vector@@Base+0x58>
   159e0:	ldr	r3, [ip, #20]
   159e4:	cmp	r3, r1
   159e8:	bcc	15a38 <flatcc_builder_truncate_vector@@Base+0x6c>
   159ec:	sub	r3, r3, r1
   159f0:	str	r3, [ip, #20]
   159f4:	ldr	r3, [r0, #32]
   159f8:	ldr	r2, [r3, #16]
   159fc:	mul	r2, r2, r1
   15a00:	ldr	r3, [r0, #20]
   15a04:	sub	r3, r3, r2
   15a08:	str	r3, [r0, #20]
   15a0c:	ldr	r0, [r0, #16]
   15a10:	mov	r1, #0
   15a14:	add	r0, r0, r3
   15a18:	bl	124a8 <memset@plt>
   15a1c:	mov	r0, #0
   15a20:	pop	{r4, pc}
   15a24:	ldr	r3, [pc, #32]	; 15a4c <flatcc_builder_truncate_vector@@Base+0x80>
   15a28:	ldr	r2, [pc, #32]	; 15a50 <flatcc_builder_truncate_vector@@Base+0x84>
   15a2c:	ldr	r1, [pc, #32]	; 15a54 <flatcc_builder_truncate_vector@@Base+0x88>
   15a30:	ldr	r0, [pc, #32]	; 15a58 <flatcc_builder_truncate_vector@@Base+0x8c>
   15a34:	bl	124d8 <__assert_fail@plt>
   15a38:	ldr	r3, [pc, #12]	; 15a4c <flatcc_builder_truncate_vector@@Base+0x80>
   15a3c:	ldr	r2, [pc, #24]	; 15a5c <flatcc_builder_truncate_vector@@Base+0x90>
   15a40:	ldr	r1, [pc, #12]	; 15a54 <flatcc_builder_truncate_vector@@Base+0x88>
   15a44:	ldr	r0, [pc, #20]	; 15a60 <flatcc_builder_truncate_vector@@Base+0x94>
   15a48:	bl	124d8 <__assert_fail@plt>
   15a4c:	andeq	sp, r1, r4, lsl #16
   15a50:	ldrdeq	r0, [r0], -r9
   15a54:	andeq	sp, r1, ip, asr #22
   15a58:	andeq	sp, r1, r4, lsl #25
   15a5c:	ldrdeq	r0, [r0], -sl
   15a60:	andeq	sp, r1, r0, asr sp

00015a64 <flatcc_builder_truncate_offset_vector@@Base>:
   15a64:	push	{r4, lr}
   15a68:	ldr	ip, [r0, #32]
   15a6c:	ldrh	r3, [ip, #14]
   15a70:	cmp	r3, #5
   15a74:	bne	15abc <flatcc_builder_truncate_offset_vector@@Base+0x58>
   15a78:	ldr	r3, [ip, #20]
   15a7c:	cmp	r3, r1
   15a80:	bcc	15ad0 <flatcc_builder_truncate_offset_vector@@Base+0x6c>
   15a84:	sub	r3, r3, r1
   15a88:	str	r3, [ip, #20]
   15a8c:	ldr	r3, [r0, #32]
   15a90:	ldr	r2, [r3, #16]
   15a94:	mul	r2, r2, r1
   15a98:	ldr	r3, [r0, #20]
   15a9c:	sub	r3, r3, r2
   15aa0:	str	r3, [r0, #20]
   15aa4:	ldr	r0, [r0, #16]
   15aa8:	mov	r1, #0
   15aac:	add	r0, r0, r3
   15ab0:	bl	124a8 <memset@plt>
   15ab4:	mov	r0, #0
   15ab8:	pop	{r4, pc}
   15abc:	ldr	r3, [pc, #32]	; 15ae4 <flatcc_builder_truncate_offset_vector@@Base+0x80>
   15ac0:	ldr	r2, [pc, #32]	; 15ae8 <flatcc_builder_truncate_offset_vector@@Base+0x84>
   15ac4:	ldr	r1, [pc, #32]	; 15aec <flatcc_builder_truncate_offset_vector@@Base+0x88>
   15ac8:	ldr	r0, [pc, #32]	; 15af0 <flatcc_builder_truncate_offset_vector@@Base+0x8c>
   15acc:	bl	124d8 <__assert_fail@plt>
   15ad0:	ldr	r3, [pc, #12]	; 15ae4 <flatcc_builder_truncate_offset_vector@@Base+0x80>
   15ad4:	ldr	r2, [pc, #24]	; 15af4 <flatcc_builder_truncate_offset_vector@@Base+0x90>
   15ad8:	ldr	r1, [pc, #12]	; 15aec <flatcc_builder_truncate_offset_vector@@Base+0x88>
   15adc:	ldr	r0, [pc, #20]	; 15af8 <flatcc_builder_truncate_offset_vector@@Base+0x94>
   15ae0:	bl	124d8 <__assert_fail@plt>
   15ae4:	andeq	sp, r1, r4, lsr #16
   15ae8:	andeq	r0, r0, r2, ror #7
   15aec:	andeq	sp, r1, ip, asr #22
   15af0:	strdeq	sp, [r1], -r0
   15af4:	andeq	r0, r0, r3, ror #7
   15af8:	andeq	sp, r1, r4, ror sp

00015afc <flatcc_builder_truncate_string@@Base>:
   15afc:	push	{r4, lr}
   15b00:	ldr	r2, [r0, #32]
   15b04:	ldrh	r3, [r2, #14]
   15b08:	cmp	r3, #6
   15b0c:	bne	15b4c <flatcc_builder_truncate_string@@Base+0x50>
   15b10:	ldr	r3, [r2, #20]
   15b14:	cmp	r3, r1
   15b18:	bcc	15b60 <flatcc_builder_truncate_string@@Base+0x64>
   15b1c:	sub	r3, r3, r1
   15b20:	str	r3, [r2, #20]
   15b24:	ldr	r3, [r0, #20]
   15b28:	sub	r3, r3, r1
   15b2c:	str	r3, [r0, #20]
   15b30:	ldr	r0, [r0, #16]
   15b34:	mov	r2, r1
   15b38:	mov	r1, #0
   15b3c:	add	r0, r0, r3
   15b40:	bl	124a8 <memset@plt>
   15b44:	mov	r0, #0
   15b48:	pop	{r4, pc}
   15b4c:	ldr	r3, [pc, #32]	; 15b74 <flatcc_builder_truncate_string@@Base+0x78>
   15b50:	ldr	r2, [pc, #32]	; 15b78 <flatcc_builder_truncate_string@@Base+0x7c>
   15b54:	ldr	r1, [pc, #32]	; 15b7c <flatcc_builder_truncate_string@@Base+0x80>
   15b58:	ldr	r0, [pc, #32]	; 15b80 <flatcc_builder_truncate_string@@Base+0x84>
   15b5c:	bl	124d8 <__assert_fail@plt>
   15b60:	ldr	r3, [pc, #12]	; 15b74 <flatcc_builder_truncate_string@@Base+0x78>
   15b64:	mov	r2, #1004	; 0x3ec
   15b68:	ldr	r1, [pc, #12]	; 15b7c <flatcc_builder_truncate_string@@Base+0x80>
   15b6c:	ldr	r0, [pc, #16]	; 15b84 <flatcc_builder_truncate_string@@Base+0x88>
   15b70:	bl	124d8 <__assert_fail@plt>
   15b74:	andeq	sp, r1, ip, asr #16
   15b78:	andeq	r0, r0, fp, ror #7
   15b7c:	andeq	sp, r1, ip, asr #22
   15b80:	andeq	sp, r1, r4, lsr #26
   15b84:			; <UNDEFINED> instruction: 0x0001ddb0

00015b88 <flatcc_builder_start_vector@@Base>:
   15b88:	push	{r4, r5, r6, lr}
   15b8c:	mov	r4, r0
   15b90:	mov	r6, r1
   15b94:	mov	r5, r3
   15b98:	cmp	r2, #4
   15b9c:	movcs	r1, r2
   15ba0:	movcc	r1, #4
   15ba4:	bl	142f8 <flatcc_builder_default_alloc@@Base+0x22c>
   15ba8:	cmp	r0, #0
   15bac:	bne	15c0c <flatcc_builder_start_vector@@Base+0x84>
   15bb0:	ldr	r3, [r4, #32]
   15bb4:	str	r6, [r3, #16]
   15bb8:	ldr	r3, [r4, #32]
   15bbc:	mov	r2, #0
   15bc0:	str	r2, [r3, #20]
   15bc4:	ldr	r3, [r4, #32]
   15bc8:	str	r5, [r3, #24]
   15bcc:	ldr	r3, [r4, #32]
   15bd0:	mov	r2, #4
   15bd4:	strh	r2, [r3, #14]
   15bd8:	ldr	r1, [r4, #28]
   15bdc:	ldr	r2, [r4, #60]	; 0x3c
   15be0:	add	r2, r2, r1
   15be4:	str	r2, [r4, #16]
   15be8:	ldr	r3, [r4, #64]	; 0x40
   15bec:	sub	r3, r3, r1
   15bf0:	cmn	r3, #4
   15bf4:	mvnhi	r3, #3
   15bf8:	str	r3, [r4, #24]
   15bfc:	ldr	r3, [r4, #32]
   15c00:	mvn	r2, #3
   15c04:	str	r2, [r3, #4]
   15c08:	pop	{r4, r5, r6, pc}
   15c0c:	mvn	r0, #0
   15c10:	pop	{r4, r5, r6, pc}

00015c14 <flatcc_builder_start_offset_vector@@Base>:
   15c14:	push	{r4, lr}
   15c18:	mov	r4, r0
   15c1c:	mov	r1, #4
   15c20:	bl	142f8 <flatcc_builder_default_alloc@@Base+0x22c>
   15c24:	cmp	r0, #0
   15c28:	bne	15c84 <flatcc_builder_start_offset_vector@@Base+0x70>
   15c2c:	ldr	r3, [r4, #32]
   15c30:	mov	r2, #4
   15c34:	str	r2, [r3, #16]
   15c38:	ldr	r3, [r4, #32]
   15c3c:	mov	r2, #0
   15c40:	str	r2, [r3, #20]
   15c44:	ldr	r3, [r4, #32]
   15c48:	mov	r2, #5
   15c4c:	strh	r2, [r3, #14]
   15c50:	ldr	r1, [r4, #28]
   15c54:	ldr	r2, [r4, #60]	; 0x3c
   15c58:	add	r2, r2, r1
   15c5c:	str	r2, [r4, #16]
   15c60:	ldr	r3, [r4, #64]	; 0x40
   15c64:	sub	r3, r3, r1
   15c68:	cmn	r3, #4
   15c6c:	mvnhi	r3, #3
   15c70:	str	r3, [r4, #24]
   15c74:	ldr	r3, [r4, #32]
   15c78:	mvn	r2, #3
   15c7c:	str	r2, [r3, #4]
   15c80:	pop	{r4, pc}
   15c84:	mvn	r0, #0
   15c88:	pop	{r4, pc}

00015c8c <flatcc_builder_start_string@@Base>:
   15c8c:	push	{r4, lr}
   15c90:	mov	r4, r0
   15c94:	mov	r1, #1
   15c98:	bl	142f8 <flatcc_builder_default_alloc@@Base+0x22c>
   15c9c:	cmp	r0, #0
   15ca0:	bne	15cfc <flatcc_builder_start_string@@Base+0x70>
   15ca4:	ldr	r3, [r4, #32]
   15ca8:	mov	r2, #1
   15cac:	str	r2, [r3, #16]
   15cb0:	ldr	r3, [r4, #32]
   15cb4:	mov	r2, #0
   15cb8:	str	r2, [r3, #20]
   15cbc:	ldr	r3, [r4, #32]
   15cc0:	mov	r2, #6
   15cc4:	strh	r2, [r3, #14]
   15cc8:	ldr	r1, [r4, #28]
   15ccc:	ldr	r2, [r4, #60]	; 0x3c
   15cd0:	add	r2, r2, r1
   15cd4:	str	r2, [r4, #16]
   15cd8:	ldr	r3, [r4, #64]	; 0x40
   15cdc:	sub	r3, r3, r1
   15ce0:	cmn	r3, #4
   15ce4:	mvnhi	r3, #3
   15ce8:	str	r3, [r4, #24]
   15cec:	ldr	r3, [r4, #32]
   15cf0:	mvn	r2, #3
   15cf4:	str	r2, [r3, #4]
   15cf8:	pop	{r4, pc}
   15cfc:	mvn	r0, #0
   15d00:	pop	{r4, pc}

00015d04 <flatcc_builder_reserve_table@@Base>:
   15d04:	push	{r4, r5, r6, r7, lr}
   15d08:	sub	sp, sp, #12
   15d0c:	cmp	r1, #0
   15d10:	blt	15d9c <flatcc_builder_reserve_table@@Base+0x98>
   15d14:	mov	r5, r0
   15d18:	ldr	r2, [r0, #32]
   15d1c:	ldrh	r6, [r2, #28]
   15d20:	ldr	r3, [r2, #16]
   15d24:	add	r6, r3, r6, lsl #1
   15d28:	add	r1, r1, #2
   15d2c:	lsl	r4, r1, #1
   15d30:	add	r2, r6, r4
   15d34:	ldr	r3, [r0, #56]	; 0x38
   15d38:	cmp	r2, r3
   15d3c:	bhi	15db0 <flatcc_builder_reserve_table@@Base+0xac>
   15d40:	ldr	r3, [r5, #52]	; 0x34
   15d44:	adds	r3, r3, r6
   15d48:	moveq	r3, #0
   15d4c:	streq	r3, [r5, #4]
   15d50:	mvneq	r0, #0
   15d54:	beq	15d94 <flatcc_builder_reserve_table@@Base+0x90>
   15d58:	add	r3, r3, #4
   15d5c:	str	r3, [r5, #4]
   15d60:	ldr	r3, [r5, #32]
   15d64:	ldr	r6, [r3, #20]
   15d68:	add	r2, r4, r6
   15d6c:	sub	r2, r2, #3
   15d70:	ldr	r3, [r5, #80]	; 0x50
   15d74:	cmp	r2, r3
   15d78:	bhi	15de8 <flatcc_builder_reserve_table@@Base+0xe4>
   15d7c:	ldr	r0, [r5, #76]	; 0x4c
   15d80:	add	r0, r0, r6
   15d84:	str	r0, [r5]
   15d88:	cmp	r0, #0
   15d8c:	movne	r0, #0
   15d90:	mvneq	r0, #0
   15d94:	add	sp, sp, #12
   15d98:	pop	{r4, r5, r6, r7, pc}
   15d9c:	ldr	r3, [pc, #124]	; 15e20 <flatcc_builder_reserve_table@@Base+0x11c>
   15da0:	ldr	r2, [pc, #124]	; 15e24 <flatcc_builder_reserve_table@@Base+0x120>
   15da4:	ldr	r1, [pc, #124]	; 15e28 <flatcc_builder_reserve_table@@Base+0x124>
   15da8:	ldr	r0, [pc, #124]	; 15e2c <flatcc_builder_reserve_table@@Base+0x128>
   15dac:	bl	124d8 <__assert_fail@plt>
   15db0:	mov	r3, #0
   15db4:	str	r3, [sp]
   15db8:	ldr	r7, [r0, #48]	; 0x30
   15dbc:	mov	r3, #1
   15dc0:	add	r1, r0, #52	; 0x34
   15dc4:	ldr	r0, [r0, #40]	; 0x28
   15dc8:	blx	r7
   15dcc:	cmp	r0, #0
   15dd0:	beq	15d40 <flatcc_builder_reserve_table@@Base+0x3c>
   15dd4:	ldr	r3, [pc, #84]	; 15e30 <flatcc_builder_reserve_table@@Base+0x12c>
   15dd8:	mov	r2, #308	; 0x134
   15ddc:	ldr	r1, [pc, #68]	; 15e28 <flatcc_builder_reserve_table@@Base+0x124>
   15de0:	ldr	r0, [pc, #76]	; 15e34 <flatcc_builder_reserve_table@@Base+0x130>
   15de4:	bl	124d8 <__assert_fail@plt>
   15de8:	mov	r3, #3
   15dec:	str	r3, [sp]
   15df0:	ldr	r4, [r5, #48]	; 0x30
   15df4:	mov	r3, #0
   15df8:	add	r1, r5, #76	; 0x4c
   15dfc:	ldr	r0, [r5, #40]	; 0x28
   15e00:	blx	r4
   15e04:	cmp	r0, #0
   15e08:	beq	15d7c <flatcc_builder_reserve_table@@Base+0x78>
   15e0c:	ldr	r3, [pc, #28]	; 15e30 <flatcc_builder_reserve_table@@Base+0x12c>
   15e10:	mov	r2, #308	; 0x134
   15e14:	ldr	r1, [pc, #12]	; 15e28 <flatcc_builder_reserve_table@@Base+0x124>
   15e18:	ldr	r0, [pc, #20]	; 15e34 <flatcc_builder_reserve_table@@Base+0x130>
   15e1c:	bl	124d8 <__assert_fail@plt>
   15e20:	andeq	sp, r1, ip, ror #16
   15e24:	andeq	r0, r0, r9, lsr #8
   15e28:	andeq	sp, r1, ip, asr #22
   15e2c:	ldrdeq	sp, [r1], -r4
   15e30:	andeq	sp, r1, r8, lsl r6
   15e34:	andeq	sp, r1, r0, lsr #23

00015e38 <flatcc_builder_start_table@@Base>:
   15e38:	push	{r4, r5, r6, r7, lr}
   15e3c:	sub	sp, sp, #12
   15e40:	mov	r4, r0
   15e44:	mov	r5, r1
   15e48:	mov	r1, #4
   15e4c:	bl	142f8 <flatcc_builder_default_alloc@@Base+0x22c>
   15e50:	cmp	r0, #0
   15e54:	bne	15fe4 <flatcc_builder_start_table@@Base+0x1ac>
   15e58:	ldr	r2, [r4, #32]
   15e5c:	ldr	r3, [r4, #4]
   15e60:	ldr	r1, [r4, #52]	; 0x34
   15e64:	sub	r3, r3, r1
   15e68:	str	r3, [r2, #16]
   15e6c:	ldr	r2, [r4, #32]
   15e70:	ldr	r3, [r4]
   15e74:	ldr	r1, [r4, #76]	; 0x4c
   15e78:	sub	r3, r3, r1
   15e7c:	str	r3, [r2, #20]
   15e80:	ldr	r3, [r4, #32]
   15e84:	ldr	r2, [r4, #12]
   15e88:	str	r2, [r3, #24]
   15e8c:	ldr	r3, [r4, #32]
   15e90:	ldrh	r2, [r4, #8]
   15e94:	strh	r2, [r3, #28]
   15e98:	ldr	r3, [pc, #340]	; 15ff4 <flatcc_builder_start_table@@Base+0x1bc>
   15e9c:	str	r3, [r4, #12]
   15ea0:	mov	r3, #0
   15ea4:	strh	r3, [r4, #8]
   15ea8:	ldr	r3, [r4, #32]
   15eac:	mov	r2, #3
   15eb0:	strh	r2, [r3, #14]
   15eb4:	ldr	r2, [r4, #32]
   15eb8:	ldrh	r6, [r2, #28]
   15ebc:	ldr	r3, [r2, #16]
   15ec0:	add	r6, r3, r6, lsl #1
   15ec4:	add	r5, r5, #2
   15ec8:	lsl	r5, r5, #1
   15ecc:	add	r2, r6, r5
   15ed0:	ldr	r3, [r4, #56]	; 0x38
   15ed4:	cmp	r2, r3
   15ed8:	bhi	15f74 <flatcc_builder_start_table@@Base+0x13c>
   15edc:	ldr	r3, [r4, #52]	; 0x34
   15ee0:	adds	r3, r3, r6
   15ee4:	moveq	r3, #0
   15ee8:	streq	r3, [r4, #4]
   15eec:	mvneq	r0, #0
   15ef0:	beq	15f6c <flatcc_builder_start_table@@Base+0x134>
   15ef4:	add	r3, r3, #4
   15ef8:	str	r3, [r4, #4]
   15efc:	ldr	r3, [r4, #32]
   15f00:	ldr	r6, [r3, #20]
   15f04:	sub	r2, r5, #3
   15f08:	add	r2, r2, r6
   15f0c:	ldr	r3, [r4, #80]	; 0x50
   15f10:	cmp	r2, r3
   15f14:	bhi	15fac <flatcc_builder_start_table@@Base+0x174>
   15f18:	ldr	r0, [r4, #76]	; 0x4c
   15f1c:	add	r0, r0, r6
   15f20:	str	r0, [r4]
   15f24:	cmp	r0, #0
   15f28:	movne	r0, #0
   15f2c:	mvneq	r0, #0
   15f30:	cmp	r0, #0
   15f34:	bne	15fec <flatcc_builder_start_table@@Base+0x1b4>
   15f38:	ldr	r1, [r4, #28]
   15f3c:	ldr	r2, [r4, #60]	; 0x3c
   15f40:	add	r2, r2, r1
   15f44:	str	r2, [r4, #16]
   15f48:	ldr	r3, [r4, #64]	; 0x40
   15f4c:	sub	r3, r3, r1
   15f50:	ldr	r2, [pc, #160]	; 15ff8 <flatcc_builder_start_table@@Base+0x1c0>
   15f54:	cmp	r3, r2
   15f58:	ldrhi	r3, [pc, #152]	; 15ff8 <flatcc_builder_start_table@@Base+0x1c0>
   15f5c:	str	r3, [r4, #24]
   15f60:	ldr	r3, [r4, #32]
   15f64:	ldr	r2, [pc, #140]	; 15ff8 <flatcc_builder_start_table@@Base+0x1c0>
   15f68:	str	r2, [r3, #4]
   15f6c:	add	sp, sp, #12
   15f70:	pop	{r4, r5, r6, r7, pc}
   15f74:	mov	r3, #0
   15f78:	str	r3, [sp]
   15f7c:	ldr	r7, [r4, #48]	; 0x30
   15f80:	mov	r3, #1
   15f84:	add	r1, r4, #52	; 0x34
   15f88:	ldr	r0, [r4, #40]	; 0x28
   15f8c:	blx	r7
   15f90:	cmp	r0, #0
   15f94:	beq	15edc <flatcc_builder_start_table@@Base+0xa4>
   15f98:	ldr	r3, [pc, #92]	; 15ffc <flatcc_builder_start_table@@Base+0x1c4>
   15f9c:	mov	r2, #308	; 0x134
   15fa0:	ldr	r1, [pc, #88]	; 16000 <flatcc_builder_start_table@@Base+0x1c8>
   15fa4:	ldr	r0, [pc, #88]	; 16004 <flatcc_builder_start_table@@Base+0x1cc>
   15fa8:	bl	124d8 <__assert_fail@plt>
   15fac:	mov	r3, #3
   15fb0:	str	r3, [sp]
   15fb4:	ldr	r5, [r4, #48]	; 0x30
   15fb8:	mov	r3, #0
   15fbc:	add	r1, r4, #76	; 0x4c
   15fc0:	ldr	r0, [r4, #40]	; 0x28
   15fc4:	blx	r5
   15fc8:	cmp	r0, #0
   15fcc:	beq	15f18 <flatcc_builder_start_table@@Base+0xe0>
   15fd0:	ldr	r3, [pc, #36]	; 15ffc <flatcc_builder_start_table@@Base+0x1c4>
   15fd4:	mov	r2, #308	; 0x134
   15fd8:	ldr	r1, [pc, #32]	; 16000 <flatcc_builder_start_table@@Base+0x1c8>
   15fdc:	ldr	r0, [pc, #32]	; 16004 <flatcc_builder_start_table@@Base+0x1cc>
   15fe0:	bl	124d8 <__assert_fail@plt>
   15fe4:	mvn	r0, #0
   15fe8:	b	15f6c <flatcc_builder_start_table@@Base+0x134>
   15fec:	mvn	r0, #0
   15ff0:	b	15f6c <flatcc_builder_start_table@@Base+0x134>
   15ff4:	svccs	0x00693b52
   15ff8:	strdeq	pc, [r0], -ip
   15ffc:	andeq	sp, r1, r8, lsl r6
   16000:	andeq	sp, r1, ip, asr #22
   16004:	andeq	sp, r1, r0, lsr #23

00016008 <flatcc_builder_create_vtable@@Base>:
   16008:	push	{r4, r5, r6, lr}
   1600c:	sub	sp, sp, #80	; 0x50
   16010:	mov	r5, r0
   16014:	mov	r3, #0
   16018:	str	r3, [sp, #8]
   1601c:	str	r3, [sp, #12]
   16020:	cmp	r2, #0
   16024:	beq	160a8 <flatcc_builder_create_vtable@@Base+0xa0>
   16028:	str	r2, [sp, #8]
   1602c:	str	r1, [sp, #16]
   16030:	str	r2, [sp, #20]
   16034:	mov	r3, #1
   16038:	str	r3, [sp, #12]
   1603c:	ldr	r3, [r0, #152]	; 0x98
   16040:	cmp	r3, #0
   16044:	bne	160c0 <flatcc_builder_create_vtable@@Base+0xb8>
   16048:	ldr	r3, [r0, #180]	; 0xb4
   1604c:	cmp	r3, #0
   16050:	bne	160c0 <flatcc_builder_create_vtable@@Base+0xb8>
   16054:	ldr	r4, [r0, #140]	; 0x8c
   16058:	mov	r3, r2
   1605c:	add	r2, r2, r4
   16060:	str	r2, [r0, #140]	; 0x8c
   16064:	cmp	r4, r2
   16068:	ble	16120 <flatcc_builder_create_vtable@@Base+0x118>
   1606c:	ldr	r3, [pc, #232]	; 1615c <flatcc_builder_create_vtable@@Base+0x154>
   16070:	ldr	r2, [pc, #232]	; 16160 <flatcc_builder_create_vtable@@Base+0x158>
   16074:	ldr	r1, [pc, #232]	; 16164 <flatcc_builder_create_vtable@@Base+0x15c>
   16078:	ldr	r0, [pc, #232]	; 16168 <flatcc_builder_create_vtable@@Base+0x160>
   1607c:	bl	124d8 <__assert_fail@plt>
   16080:	ldr	r3, [pc, #228]	; 1616c <flatcc_builder_create_vtable@@Base+0x164>
   16084:	ldr	r2, [pc, #228]	; 16170 <flatcc_builder_create_vtable@@Base+0x168>
   16088:	ldr	r1, [pc, #212]	; 16164 <flatcc_builder_create_vtable@@Base+0x15c>
   1608c:	ldr	r0, [pc, #212]	; 16168 <flatcc_builder_create_vtable@@Base+0x160>
   16090:	bl	124d8 <__assert_fail@plt>
   16094:	ldr	r3, [pc, #208]	; 1616c <flatcc_builder_create_vtable@@Base+0x164>
   16098:	ldr	r2, [pc, #212]	; 16174 <flatcc_builder_create_vtable@@Base+0x16c>
   1609c:	ldr	r1, [pc, #192]	; 16164 <flatcc_builder_create_vtable@@Base+0x15c>
   160a0:	ldr	r0, [pc, #192]	; 16168 <flatcc_builder_create_vtable@@Base+0x160>
   160a4:	bl	124d8 <__assert_fail@plt>
   160a8:	ldr	r3, [r0, #152]	; 0x98
   160ac:	cmp	r3, #0
   160b0:	bne	16080 <flatcc_builder_create_vtable@@Base+0x78>
   160b4:	ldr	r3, [r0, #180]	; 0xb4
   160b8:	cmp	r3, #0
   160bc:	beq	16110 <flatcc_builder_create_vtable@@Base+0x108>
   160c0:	ldr	r2, [r5, #136]	; 0x88
   160c4:	ldr	r3, [sp, #8]
   160c8:	sub	r4, r2, r3
   160cc:	cmp	r2, r4
   160d0:	ble	16080 <flatcc_builder_create_vtable@@Base+0x78>
   160d4:	str	r3, [sp]
   160d8:	ldr	r6, [r5, #44]	; 0x2c
   160dc:	mov	r3, r4
   160e0:	ldr	r2, [sp, #12]
   160e4:	add	r1, sp, #16
   160e8:	ldr	r0, [r5, #36]	; 0x24
   160ec:	blx	r6
   160f0:	cmp	r0, #0
   160f4:	bne	16094 <flatcc_builder_create_vtable@@Base+0x8c>
   160f8:	str	r4, [r5, #136]	; 0x88
   160fc:	cmp	r4, #0
   16100:	addne	r4, r4, #1
   16104:	mov	r0, r4
   16108:	add	sp, sp, #80	; 0x50
   1610c:	pop	{r4, r5, r6, pc}
   16110:	ldr	r4, [r5, #140]	; 0x8c
   16114:	ldr	r3, [sp, #8]
   16118:	add	r2, r3, r4
   1611c:	str	r2, [r5, #140]	; 0x8c
   16120:	ldr	r0, [r5, #36]	; 0x24
   16124:	str	r3, [sp]
   16128:	ldr	r5, [r5, #44]	; 0x2c
   1612c:	mov	r3, r4
   16130:	ldr	r2, [sp, #12]
   16134:	add	r1, sp, #16
   16138:	blx	r5
   1613c:	cmp	r0, #0
   16140:	addeq	r4, r4, #1
   16144:	beq	16104 <flatcc_builder_create_vtable@@Base+0xfc>
   16148:	ldr	r3, [pc, #12]	; 1615c <flatcc_builder_create_vtable@@Base+0x154>
   1614c:	ldr	r2, [pc, #36]	; 16178 <flatcc_builder_create_vtable@@Base+0x170>
   16150:	ldr	r1, [pc, #12]	; 16164 <flatcc_builder_create_vtable@@Base+0x15c>
   16154:	ldr	r0, [pc, #12]	; 16168 <flatcc_builder_create_vtable@@Base+0x160>
   16158:	bl	124d8 <__assert_fail@plt>
   1615c:	strdeq	sp, [r1], -ip
   16160:	andeq	r0, r0, r1, lsr #5
   16164:	andeq	sp, r1, ip, asr #22
   16168:	andeq	sp, r1, r0, lsr #23
   1616c:	andeq	sp, r1, r8, asr #12
   16170:	andeq	r0, r0, r7, lsl #5
   16174:	andeq	r0, r0, fp, lsl #5
   16178:	andeq	r0, r0, r5, lsr #5

0001617c <flatcc_builder_create_cached_vtable@@Base>:
   1617c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16180:	sub	sp, sp, #28
   16184:	mov	r8, r0
   16188:	str	r1, [sp, #8]
   1618c:	mov	r7, r2
   16190:	mov	fp, r3
   16194:	ldr	r4, [r0, #116]	; 0x74
   16198:	cmp	r4, #0
   1619c:	beq	161e4 <flatcc_builder_create_cached_vtable@@Base+0x68>
   161a0:	ldr	r3, [r8, #116]	; 0x74
   161a4:	rsb	r3, r3, #32
   161a8:	lsr	fp, fp, r3
   161ac:	ldr	r3, [r8, #92]	; 0x5c
   161b0:	str	r3, [sp, #16]
   161b4:	adds	r2, r3, fp, lsl #2
   161b8:	str	r2, [sp, #20]
   161bc:	beq	164b4 <flatcc_builder_create_cached_vtable@@Base+0x338>
   161c0:	ldr	r5, [r3, fp, lsl #2]
   161c4:	cmp	r5, #0
   161c8:	beq	16354 <flatcc_builder_create_cached_vtable@@Base+0x1d8>
   161cc:	ldr	sl, [r8, #100]	; 0x64
   161d0:	ldr	r6, [r8, #68]	; 0x44
   161d4:	mov	r9, r2
   161d8:	mov	r3, #0
   161dc:	str	r3, [sp, #12]
   161e0:	b	162dc <flatcc_builder_create_cached_vtable@@Base+0x160>
   161e4:	add	r6, r0, #92	; 0x5c
   161e8:	ldr	r3, [r0, #124]	; 0x7c
   161ec:	cmp	r3, #0
   161f0:	bne	16248 <flatcc_builder_create_cached_vtable@@Base+0xcc>
   161f4:	ldr	r3, [r0, #104]	; 0x68
   161f8:	cmp	r3, #15
   161fc:	bls	1625c <flatcc_builder_create_cached_vtable@@Base+0xe0>
   16200:	ldr	r3, [r8, #100]	; 0x64
   16204:	cmp	r3, #0
   16208:	beq	164d4 <flatcc_builder_create_cached_vtable@@Base+0x358>
   1620c:	mov	r3, #16
   16210:	str	r3, [r8, #124]	; 0x7c
   16214:	mov	r3, #5
   16218:	str	r3, [sp]
   1621c:	ldr	r5, [r8, #48]	; 0x30
   16220:	mov	r3, #1
   16224:	mov	r2, #256	; 0x100
   16228:	mov	r1, r6
   1622c:	ldr	r0, [r8, #40]	; 0x28
   16230:	blx	r5
   16234:	cmp	r0, #0
   16238:	bne	164d4 <flatcc_builder_create_cached_vtable@@Base+0x358>
   1623c:	ldr	r1, [r8, #96]	; 0x60
   16240:	mov	r3, #256	; 0x100
   16244:	b	1629c <flatcc_builder_create_cached_vtable@@Base+0x120>
   16248:	ldr	r3, [pc, #652]	; 164dc <flatcc_builder_create_cached_vtable@@Base+0x360>
   1624c:	ldr	r2, [pc, #652]	; 164e0 <flatcc_builder_create_cached_vtable@@Base+0x364>
   16250:	ldr	r1, [pc, #652]	; 164e4 <flatcc_builder_create_cached_vtable@@Base+0x368>
   16254:	ldr	r0, [pc, #652]	; 164e8 <flatcc_builder_create_cached_vtable@@Base+0x36c>
   16258:	bl	124d8 <__assert_fail@plt>
   1625c:	mov	r3, #6
   16260:	str	r3, [sp]
   16264:	ldr	r5, [r0, #48]	; 0x30
   16268:	mov	r3, #0
   1626c:	mov	r2, #16
   16270:	add	r1, r0, #100	; 0x64
   16274:	ldr	r0, [r0, #40]	; 0x28
   16278:	blx	r5
   1627c:	cmp	r0, #0
   16280:	beq	16200 <flatcc_builder_create_cached_vtable@@Base+0x84>
   16284:	ldr	r3, [pc, #608]	; 164ec <flatcc_builder_create_cached_vtable@@Base+0x370>
   16288:	mov	r2, #308	; 0x134
   1628c:	ldr	r1, [pc, #592]	; 164e4 <flatcc_builder_create_cached_vtable@@Base+0x368>
   16290:	ldr	r0, [pc, #600]	; 164f0 <flatcc_builder_create_cached_vtable@@Base+0x374>
   16294:	bl	124d8 <__assert_fail@plt>
   16298:	mov	r3, r2
   1629c:	lsl	r2, r3, #1
   162a0:	cmp	r2, r1
   162a4:	bls	16298 <flatcc_builder_create_cached_vtable@@Base+0x11c>
   162a8:	lsr	r3, r3, #2
   162ac:	cmp	r3, #1
   162b0:	bls	162c4 <flatcc_builder_create_cached_vtable@@Base+0x148>
   162b4:	mov	r2, #1
   162b8:	add	r4, r4, #1
   162bc:	cmp	r3, r2, lsl r4
   162c0:	bhi	162b8 <flatcc_builder_create_cached_vtable@@Base+0x13c>
   162c4:	str	r4, [r8, #116]	; 0x74
   162c8:	b	161a0 <flatcc_builder_create_cached_vtable@@Base+0x24>
   162cc:	add	r9, r4, #12
   162d0:	ldr	r5, [r4, #12]
   162d4:	cmp	r5, #0
   162d8:	beq	1635c <flatcc_builder_create_cached_vtable@@Base+0x1e0>
   162dc:	add	r4, sl, r5
   162e0:	ldr	r3, [r4, #8]
   162e4:	add	r1, r6, r3
   162e8:	ldrh	r3, [r6, r3]
   162ec:	cmp	r3, r7
   162f0:	bne	162cc <flatcc_builder_create_cached_vtable@@Base+0x150>
   162f4:	mov	r2, r7
   162f8:	ldr	r0, [sp, #8]
   162fc:	bl	1243c <memcmp@plt>
   16300:	cmp	r0, #0
   16304:	bne	162cc <flatcc_builder_create_cached_vtable@@Base+0x150>
   16308:	ldr	r2, [r4, #4]
   1630c:	ldr	r3, [r8, #152]	; 0x98
   16310:	cmp	r2, r3
   16314:	addne	r9, r4, #12
   16318:	ldrne	r5, [r4, #12]
   1631c:	strne	r4, [sp, #12]
   16320:	bne	162d4 <flatcc_builder_create_cached_vtable@@Base+0x158>
   16324:	ldr	r3, [sp, #20]
   16328:	cmp	r3, r9
   1632c:	beq	16348 <flatcc_builder_create_cached_vtable@@Base+0x1cc>
   16330:	ldr	r3, [r4, #12]
   16334:	str	r3, [r9]
   16338:	ldr	r2, [sp, #16]
   1633c:	ldr	r3, [r2, fp, lsl #2]
   16340:	str	r3, [r4, #12]
   16344:	str	r5, [r2, fp, lsl #2]
   16348:	ldr	r0, [r4]
   1634c:	add	sp, sp, #28
   16350:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16354:	mov	r3, #0
   16358:	str	r3, [sp, #12]
   1635c:	ldr	r4, [r8, #124]	; 0x7c
   16360:	add	r2, r4, #16
   16364:	ldr	r3, [r8, #104]	; 0x68
   16368:	cmp	r2, r3
   1636c:	bhi	163d8 <flatcc_builder_create_cached_vtable@@Base+0x25c>
   16370:	ldr	r5, [r8, #100]	; 0x64
   16374:	adds	r6, r5, r4
   16378:	beq	164bc <flatcc_builder_create_cached_vtable@@Base+0x340>
   1637c:	ldr	r3, [r8, #124]	; 0x7c
   16380:	add	r2, r3, #16
   16384:	str	r2, [r8, #124]	; 0x7c
   16388:	ldr	r2, [r8, #152]	; 0x98
   1638c:	str	r2, [r6, #4]
   16390:	ldr	r1, [sp, #16]
   16394:	ldr	r2, [r1, fp, lsl #2]
   16398:	str	r2, [r6, #12]
   1639c:	str	r3, [r1, fp, lsl #2]
   163a0:	mov	r2, r7
   163a4:	ldr	r1, [sp, #8]
   163a8:	mov	r0, r8
   163ac:	bl	16008 <flatcc_builder_create_vtable@@Base>
   163b0:	str	r0, [r5, r4]
   163b4:	cmp	r0, #0
   163b8:	beq	164c4 <flatcc_builder_create_cached_vtable@@Base+0x348>
   163bc:	ldr	r3, [sp, #12]
   163c0:	cmp	r3, #0
   163c4:	beq	16410 <flatcc_builder_create_cached_vtable@@Base+0x294>
   163c8:	ldr	r3, [r3, #8]
   163cc:	str	r3, [r6, #8]
   163d0:	ldr	r0, [r5, r4]
   163d4:	b	1634c <flatcc_builder_create_cached_vtable@@Base+0x1d0>
   163d8:	mov	r3, #6
   163dc:	str	r3, [sp]
   163e0:	ldr	r5, [r8, #48]	; 0x30
   163e4:	mov	r3, #0
   163e8:	add	r1, r8, #100	; 0x64
   163ec:	ldr	r0, [r8, #40]	; 0x28
   163f0:	blx	r5
   163f4:	cmp	r0, #0
   163f8:	beq	16370 <flatcc_builder_create_cached_vtable@@Base+0x1f4>
   163fc:	ldr	r3, [pc, #232]	; 164ec <flatcc_builder_create_cached_vtable@@Base+0x370>
   16400:	mov	r2, #308	; 0x134
   16404:	ldr	r1, [pc, #216]	; 164e4 <flatcc_builder_create_cached_vtable@@Base+0x368>
   16408:	ldr	r0, [pc, #224]	; 164f0 <flatcc_builder_create_cached_vtable@@Base+0x374>
   1640c:	bl	124d8 <__assert_fail@plt>
   16410:	ldr	r2, [r8, #172]	; 0xac
   16414:	cmp	r2, #0
   16418:	beq	1642c <flatcc_builder_create_cached_vtable@@Base+0x2b0>
   1641c:	ldr	r3, [r8, #120]	; 0x78
   16420:	add	r3, r7, r3
   16424:	cmp	r2, r3
   16428:	bcc	16470 <flatcc_builder_create_cached_vtable@@Base+0x2f4>
   1642c:	ldr	r9, [r8, #120]	; 0x78
   16430:	add	r2, r9, r7
   16434:	ldr	r3, [r8, #72]	; 0x48
   16438:	cmp	r2, r3
   1643c:	bhi	1647c <flatcc_builder_create_cached_vtable@@Base+0x300>
   16440:	ldr	r3, [r8, #68]	; 0x44
   16444:	adds	r0, r3, r9
   16448:	beq	164cc <flatcc_builder_create_cached_vtable@@Base+0x350>
   1644c:	ldr	r3, [r8, #120]	; 0x78
   16450:	str	r3, [r6, #8]
   16454:	ldr	r3, [r8, #120]	; 0x78
   16458:	add	r3, r3, r7
   1645c:	str	r3, [r8, #120]	; 0x78
   16460:	mov	r2, r7
   16464:	ldr	r1, [sp, #8]
   16468:	bl	12430 <memcpy@plt>
   1646c:	b	163d0 <flatcc_builder_create_cached_vtable@@Base+0x254>
   16470:	mov	r0, r8
   16474:	bl	1463c <flatcc_builder_flush_vtable_cache@@Base>
   16478:	b	163d0 <flatcc_builder_create_cached_vtable@@Base+0x254>
   1647c:	mov	r3, #2
   16480:	str	r3, [sp]
   16484:	ldr	sl, [r8, #48]	; 0x30
   16488:	mov	r3, #0
   1648c:	add	r1, r8, #68	; 0x44
   16490:	ldr	r0, [r8, #40]	; 0x28
   16494:	blx	sl
   16498:	cmp	r0, #0
   1649c:	beq	16440 <flatcc_builder_create_cached_vtable@@Base+0x2c4>
   164a0:	ldr	r3, [pc, #68]	; 164ec <flatcc_builder_create_cached_vtable@@Base+0x370>
   164a4:	mov	r2, #308	; 0x134
   164a8:	ldr	r1, [pc, #52]	; 164e4 <flatcc_builder_create_cached_vtable@@Base+0x368>
   164ac:	ldr	r0, [pc, #60]	; 164f0 <flatcc_builder_create_cached_vtable@@Base+0x374>
   164b0:	bl	124d8 <__assert_fail@plt>
   164b4:	mov	r0, #0
   164b8:	b	1634c <flatcc_builder_create_cached_vtable@@Base+0x1d0>
   164bc:	mov	r0, #0
   164c0:	b	1634c <flatcc_builder_create_cached_vtable@@Base+0x1d0>
   164c4:	mov	r0, #0
   164c8:	b	1634c <flatcc_builder_create_cached_vtable@@Base+0x1d0>
   164cc:	mvn	r0, #0
   164d0:	b	1634c <flatcc_builder_create_cached_vtable@@Base+0x1d0>
   164d4:	mov	r0, #0
   164d8:	b	1634c <flatcc_builder_create_cached_vtable@@Base+0x1d0>
   164dc:	andeq	sp, r1, ip, lsl #17
   164e0:	andeq	r0, r0, r6, asr r1
   164e4:	andeq	sp, r1, ip, asr #22
   164e8:	andeq	sp, r1, r0, ror #27
   164ec:	andeq	sp, r1, r8, lsl r6
   164f0:	andeq	sp, r1, r0, lsr #23

000164f4 <flatcc_builder_create_table@@Base>:
   164f4:	push	{r4, r5, r6, r7, lr}
   164f8:	sub	sp, sp, #92	; 0x5c
   164fc:	ldr	r4, [sp, #116]	; 0x74
   16500:	ldr	ip, [sp, #120]	; 0x78
   16504:	cmp	r4, #0
   16508:	blt	16648 <flatcc_builder_create_table@@Base+0x154>
   1650c:	mov	r5, r0
   16510:	tst	ip, #1
   16514:	beq	1665c <flatcc_builder_create_table@@Base+0x168>
   16518:	cmp	r3, #4
   1651c:	movcs	r0, r3
   16520:	movcc	r0, #4
   16524:	ldrh	r3, [r5, #128]	; 0x80
   16528:	cmp	r3, r0
   1652c:	strhcc	r0, [r5, #128]	; 0x80
   16530:	ldr	lr, [r5, #136]	; 0x88
   16534:	sub	r7, lr, r2
   16538:	sub	r0, r0, #1
   1653c:	and	r7, r7, r0
   16540:	mvn	r3, #3
   16544:	sub	r3, r3, r2
   16548:	add	r3, r3, lr
   1654c:	sub	r3, r3, r7
   16550:	sub	ip, ip, #1
   16554:	sub	ip, r3, ip
   16558:	str	ip, [sp, #84]	; 0x54
   1655c:	cmp	r4, #0
   16560:	ble	16590 <flatcc_builder_create_table@@Base+0x9c>
   16564:	ldr	ip, [sp, #112]	; 0x70
   16568:	add	r4, ip, r4, lsl #1
   1656c:	mvn	r6, #3
   16570:	sub	r6, r6, r3
   16574:	ldrh	r3, [ip], #2
   16578:	sub	lr, r6, r3
   1657c:	ldr	r0, [r1, r3]
   16580:	add	r0, r0, lr
   16584:	str	r0, [r1, r3]
   16588:	cmp	ip, r4
   1658c:	bne	16574 <flatcc_builder_create_table@@Base+0x80>
   16590:	mov	r3, #4
   16594:	str	r3, [sp, #12]
   16598:	add	r0, sp, #84	; 0x54
   1659c:	str	r0, [sp, #20]
   165a0:	str	r3, [sp, #24]
   165a4:	mov	r3, #1
   165a8:	str	r3, [sp, #16]
   165ac:	cmp	r2, #0
   165b0:	beq	165cc <flatcc_builder_create_table@@Base+0xd8>
   165b4:	add	r3, r2, #4
   165b8:	str	r3, [sp, #12]
   165bc:	str	r1, [sp, #28]
   165c0:	str	r2, [sp, #32]
   165c4:	mov	r3, #2
   165c8:	str	r3, [sp, #16]
   165cc:	cmp	r7, #0
   165d0:	beq	16600 <flatcc_builder_create_table@@Base+0x10c>
   165d4:	ldr	r3, [sp, #12]
   165d8:	add	r3, r3, r7
   165dc:	str	r3, [sp, #12]
   165e0:	ldr	r3, [sp, #16]
   165e4:	add	r3, r3, #1
   165e8:	add	r2, sp, #88	; 0x58
   165ec:	add	r2, r2, r3, lsl #3
   165f0:	ldr	r1, [pc, #160]	; 16698 <flatcc_builder_create_table@@Base+0x1a4>
   165f4:	str	r1, [r2, #-76]	; 0xffffffb4
   165f8:	str	r7, [r2, #-72]	; 0xffffffb8
   165fc:	str	r3, [sp, #16]
   16600:	ldr	r2, [r5, #136]	; 0x88
   16604:	ldr	r3, [sp, #12]
   16608:	sub	r4, r2, r3
   1660c:	cmp	r2, r4
   16610:	ble	16670 <flatcc_builder_create_table@@Base+0x17c>
   16614:	str	r3, [sp]
   16618:	ldr	r6, [r5, #44]	; 0x2c
   1661c:	mov	r3, r4
   16620:	ldr	r2, [sp, #16]
   16624:	add	r1, sp, #20
   16628:	ldr	r0, [r5, #36]	; 0x24
   1662c:	blx	r6
   16630:	cmp	r0, #0
   16634:	bne	16684 <flatcc_builder_create_table@@Base+0x190>
   16638:	str	r4, [r5, #136]	; 0x88
   1663c:	mov	r0, r4
   16640:	add	sp, sp, #92	; 0x5c
   16644:	pop	{r4, r5, r6, r7, pc}
   16648:	ldr	r3, [pc, #76]	; 1669c <flatcc_builder_create_table@@Base+0x1a8>
   1664c:	ldr	r2, [pc, #76]	; 166a0 <flatcc_builder_create_table@@Base+0x1ac>
   16650:	ldr	r1, [pc, #76]	; 166a4 <flatcc_builder_create_table@@Base+0x1b0>
   16654:	ldr	r0, [pc, #76]	; 166a8 <flatcc_builder_create_table@@Base+0x1b4>
   16658:	bl	124d8 <__assert_fail@plt>
   1665c:	ldr	r3, [pc, #56]	; 1669c <flatcc_builder_create_table@@Base+0x1a8>
   16660:	ldr	r2, [pc, #68]	; 166ac <flatcc_builder_create_table@@Base+0x1b8>
   16664:	ldr	r1, [pc, #56]	; 166a4 <flatcc_builder_create_table@@Base+0x1b0>
   16668:	ldr	r0, [pc, #64]	; 166b0 <flatcc_builder_create_table@@Base+0x1bc>
   1666c:	bl	124d8 <__assert_fail@plt>
   16670:	ldr	r3, [pc, #60]	; 166b4 <flatcc_builder_create_table@@Base+0x1c0>
   16674:	ldr	r2, [pc, #60]	; 166b8 <flatcc_builder_create_table@@Base+0x1c4>
   16678:	ldr	r1, [pc, #36]	; 166a4 <flatcc_builder_create_table@@Base+0x1b0>
   1667c:	ldr	r0, [pc, #56]	; 166bc <flatcc_builder_create_table@@Base+0x1c8>
   16680:	bl	124d8 <__assert_fail@plt>
   16684:	ldr	r3, [pc, #40]	; 166b4 <flatcc_builder_create_table@@Base+0x1c0>
   16688:	ldr	r2, [pc, #48]	; 166c0 <flatcc_builder_create_table@@Base+0x1cc>
   1668c:	ldr	r1, [pc, #16]	; 166a4 <flatcc_builder_create_table@@Base+0x1b0>
   16690:	ldr	r0, [pc, #36]	; 166bc <flatcc_builder_create_table@@Base+0x1c8>
   16694:	bl	124d8 <__assert_fail@plt>
   16698:	strdeq	sp, [r1], -ip
   1669c:	muleq	r1, r8, r8
   166a0:	ldrdeq	r0, [r0], -r5
   166a4:	andeq	sp, r1, ip, asr #22
   166a8:	strdeq	sp, [r1], -r0
   166ac:	ldrdeq	r0, [r0], -fp
   166b0:	andeq	sp, r1, r4, lsl #28
   166b4:	andeq	sp, r1, r8, asr #12
   166b8:	andeq	r0, r0, r7, lsl #5
   166bc:	andeq	sp, r1, r0, lsr #23
   166c0:	andeq	r0, r0, fp, lsl #5

000166c4 <flatcc_builder_check_required_field@@Base>:
   166c4:	ldr	r3, [r0, #32]
   166c8:	ldrh	r3, [r3, #14]
   166cc:	cmp	r3, #3
   166d0:	bne	166fc <flatcc_builder_check_required_field@@Base+0x38>
   166d4:	ldrh	r3, [r0, #8]
   166d8:	cmp	r3, r1
   166dc:	movls	r0, #0
   166e0:	bls	166f8 <flatcc_builder_check_required_field@@Base+0x34>
   166e4:	ldr	r3, [r0, #4]
   166e8:	lsl	r1, r1, #1
   166ec:	ldrh	r0, [r3, r1]
   166f0:	adds	r0, r0, #0
   166f4:	movne	r0, #1
   166f8:	bx	lr
   166fc:	push	{r4, lr}
   16700:	ldr	r3, [pc, #12]	; 16714 <flatcc_builder_check_required_field@@Base+0x50>
   16704:	ldr	r2, [pc, #12]	; 16718 <flatcc_builder_check_required_field@@Base+0x54>
   16708:	ldr	r1, [pc, #12]	; 1671c <flatcc_builder_check_required_field@@Base+0x58>
   1670c:	ldr	r0, [pc, #12]	; 16720 <flatcc_builder_check_required_field@@Base+0x5c>
   16710:	bl	124d8 <__assert_fail@plt>
   16714:			; <UNDEFINED> instruction: 0x0001d8b4
   16718:	strdeq	r0, [r0], -r8
   1671c:	andeq	sp, r1, ip, asr #22
   16720:	andeq	sp, r1, r0, lsl lr

00016724 <flatcc_builder_check_union_field@@Base>:
   16724:	ldr	r3, [r0, #32]
   16728:	ldrh	r3, [r3, #14]
   1672c:	cmp	r3, #3
   16730:	bne	1678c <flatcc_builder_check_union_field@@Base+0x68>
   16734:	cmp	r1, #0
   16738:	moveq	r0, #0
   1673c:	beq	167b4 <flatcc_builder_check_union_field@@Base+0x90>
   16740:	ldrh	r3, [r0, #8]
   16744:	cmp	r3, r1
   16748:	movls	r0, #0
   1674c:	bls	167b4 <flatcc_builder_check_union_field@@Base+0x90>
   16750:	ldr	r3, [r0, #4]
   16754:	sub	r1, r1, #-2147483647	; 0x80000001
   16758:	lsl	r1, r1, #1
   1675c:	ldrh	r2, [r3, r1]
   16760:	cmp	r2, #0
   16764:	beq	167a4 <flatcc_builder_check_union_field@@Base+0x80>
   16768:	ldr	r0, [r0, #16]
   1676c:	ldrb	r2, [r0, r2]
   16770:	cmp	r2, #0
   16774:	bne	167b8 <flatcc_builder_check_union_field@@Base+0x94>
   16778:	add	r1, r3, r1
   1677c:	ldrh	r0, [r1, #2]
   16780:	clz	r0, r0
   16784:	lsr	r0, r0, #5
   16788:	b	167b4 <flatcc_builder_check_union_field@@Base+0x90>
   1678c:	push	{r4, lr}
   16790:	ldr	r3, [pc, #52]	; 167cc <flatcc_builder_check_union_field@@Base+0xa8>
   16794:	ldr	r2, [pc, #52]	; 167d0 <flatcc_builder_check_union_field@@Base+0xac>
   16798:	ldr	r1, [pc, #52]	; 167d4 <flatcc_builder_check_union_field@@Base+0xb0>
   1679c:	ldr	r0, [pc, #52]	; 167d8 <flatcc_builder_check_union_field@@Base+0xb4>
   167a0:	bl	124d8 <__assert_fail@plt>
   167a4:	add	r1, r3, r1
   167a8:	ldrh	r0, [r1, #2]
   167ac:	clz	r0, r0
   167b0:	lsr	r0, r0, #5
   167b4:	bx	lr
   167b8:	add	r1, r3, r1
   167bc:	ldrh	r0, [r1, #2]
   167c0:	adds	r0, r0, #0
   167c4:	movne	r0, #1
   167c8:	b	167b4 <flatcc_builder_check_union_field@@Base+0x90>
   167cc:	ldrdeq	sp, [r1], -r8
   167d0:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   167d4:	andeq	sp, r1, ip, asr #22
   167d8:	andeq	sp, r1, r0, lsl lr

000167dc <flatcc_builder_check_required@@Base>:
   167dc:	ldr	r3, [r0, #32]
   167e0:	ldrh	r3, [r3, #14]
   167e4:	cmp	r3, #3
   167e8:	bne	16848 <flatcc_builder_check_required@@Base+0x6c>
   167ec:	ldrh	r3, [r0, #8]
   167f0:	cmp	r3, r2
   167f4:	movlt	r0, #0
   167f8:	blt	16864 <flatcc_builder_check_required@@Base+0x88>
   167fc:	cmp	r2, #0
   16800:	ble	16868 <flatcc_builder_check_required@@Base+0x8c>
   16804:	ldr	ip, [r0, #4]
   16808:	ldrh	r3, [r1]
   1680c:	lsl	r3, r3, #1
   16810:	ldrh	r3, [ip, r3]
   16814:	cmp	r3, #0
   16818:	beq	16870 <flatcc_builder_check_required@@Base+0x94>
   1681c:	add	r0, r1, #2
   16820:	add	r2, r1, r2, lsl #1
   16824:	cmp	r0, r2
   16828:	beq	16860 <flatcc_builder_check_required@@Base+0x84>
   1682c:	ldrh	r3, [r0], #2
   16830:	lsl	r3, r3, #1
   16834:	ldrh	r3, [ip, r3]
   16838:	cmp	r3, #0
   1683c:	bne	16824 <flatcc_builder_check_required@@Base+0x48>
   16840:	mov	r0, #0
   16844:	b	16864 <flatcc_builder_check_required@@Base+0x88>
   16848:	push	{r4, lr}
   1684c:	ldr	r3, [pc, #36]	; 16878 <flatcc_builder_check_required@@Base+0x9c>
   16850:	ldr	r2, [pc, #36]	; 1687c <flatcc_builder_check_required@@Base+0xa0>
   16854:	ldr	r1, [pc, #36]	; 16880 <flatcc_builder_check_required@@Base+0xa4>
   16858:	ldr	r0, [pc, #36]	; 16884 <flatcc_builder_check_required@@Base+0xa8>
   1685c:	bl	124d8 <__assert_fail@plt>
   16860:	mov	r0, #1
   16864:	bx	lr
   16868:	mov	r0, #1
   1686c:	b	16864 <flatcc_builder_check_required@@Base+0x88>
   16870:	mov	r0, #0
   16874:	b	16864 <flatcc_builder_check_required@@Base+0x88>
   16878:	strdeq	sp, [r1], -ip
   1687c:	andeq	r0, r0, r1, lsl r5
   16880:	andeq	sp, r1, ip, asr #22
   16884:	andeq	sp, r1, r0, lsl lr

00016888 <flatcc_builder_end_table@@Base>:
   16888:	push	{r4, r5, r6, r7, lr}
   1688c:	sub	sp, sp, #20
   16890:	ldr	r3, [r0, #32]
   16894:	ldrh	r3, [r3, #14]
   16898:	cmp	r3, #3
   1689c:	bne	1690c <flatcc_builder_end_table@@Base+0x84>
   168a0:	mov	r4, r0
   168a4:	ldr	r1, [r0, #4]
   168a8:	sub	r6, r1, #4
   168ac:	ldrh	r5, [r0, #8]
   168b0:	add	r5, r5, #2
   168b4:	lsl	r5, r5, #1
   168b8:	uxth	r5, r5
   168bc:	strh	r5, [r1, #-4]
   168c0:	ldr	r3, [r0, #20]
   168c4:	add	r3, r3, #4
   168c8:	uxth	r2, r3
   168cc:	strh	r2, [r1, #-2]
   168d0:	ldr	r3, [r0, #12]
   168d4:	eor	r3, r3, r5
   168d8:	ldr	r1, [pc, #328]	; 16a28 <flatcc_builder_end_table@@Base+0x1a0>
   168dc:	mul	r3, r1, r3
   168e0:	eor	r3, r3, r2
   168e4:	mul	r3, r1, r3
   168e8:	str	r3, [r0, #12]
   168ec:	mov	r2, r5
   168f0:	mov	r1, r6
   168f4:	bl	1617c <flatcc_builder_create_cached_vtable@@Base>
   168f8:	subs	r7, r0, #0
   168fc:	bne	16920 <flatcc_builder_end_table@@Base+0x98>
   16900:	mov	r0, r7
   16904:	add	sp, sp, #20
   16908:	pop	{r4, r5, r6, r7, pc}
   1690c:	ldr	r3, [pc, #280]	; 16a2c <flatcc_builder_end_table@@Base+0x1a4>
   16910:	ldr	r2, [pc, #280]	; 16a30 <flatcc_builder_end_table@@Base+0x1a8>
   16914:	ldr	r1, [pc, #280]	; 16a34 <flatcc_builder_end_table@@Base+0x1ac>
   16918:	ldr	r0, [pc, #280]	; 16a38 <flatcc_builder_end_table@@Base+0x1b0>
   1691c:	bl	124d8 <__assert_fail@plt>
   16920:	mov	r2, r5
   16924:	mov	r1, #0
   16928:	mov	r0, r6
   1692c:	bl	124a8 <memset@plt>
   16930:	ldr	r3, [r4, #32]
   16934:	ldr	r1, [r4, #76]	; 0x4c
   16938:	ldr	r3, [r3, #20]
   1693c:	add	r1, r1, r3
   16940:	ldrh	r3, [r4, #130]	; 0x82
   16944:	str	r7, [sp, #8]
   16948:	ldr	r2, [r4]
   1694c:	sub	r2, r2, r1
   16950:	asr	r2, r2, #1
   16954:	str	r2, [sp, #4]
   16958:	str	r1, [sp]
   1695c:	ldr	r2, [r4, #20]
   16960:	ldr	r1, [r4, #16]
   16964:	mov	r0, r4
   16968:	bl	164f4 <flatcc_builder_create_table@@Base>
   1696c:	subs	r7, r0, #0
   16970:	beq	16900 <flatcc_builder_end_table@@Base+0x78>
   16974:	ldr	r3, [r4, #32]
   16978:	ldr	r2, [r3, #24]
   1697c:	str	r2, [r4, #12]
   16980:	ldrh	r2, [r3, #28]
   16984:	strh	r2, [r4, #8]
   16988:	ldr	r2, [r4, #52]	; 0x34
   1698c:	ldr	r1, [r3, #16]
   16990:	add	r2, r2, r1
   16994:	str	r2, [r4, #4]
   16998:	ldr	r2, [r4, #76]	; 0x4c
   1699c:	ldr	r3, [r3, #20]
   169a0:	add	r3, r2, r3
   169a4:	str	r3, [r4]
   169a8:	ldr	r2, [r4, #20]
   169ac:	mov	r1, #0
   169b0:	ldr	r0, [r4, #16]
   169b4:	bl	124a8 <memset@plt>
   169b8:	ldr	r2, [r4, #32]
   169bc:	ldr	r3, [r2, #8]
   169c0:	str	r3, [r4, #20]
   169c4:	ldr	r0, [r2]
   169c8:	str	r0, [r4, #28]
   169cc:	ldr	r1, [r2, #4]
   169d0:	ldr	r3, [r4, #60]	; 0x3c
   169d4:	add	r3, r3, r0
   169d8:	str	r3, [r4, #16]
   169dc:	ldr	r3, [r4, #64]	; 0x40
   169e0:	sub	r3, r3, r0
   169e4:	cmp	r3, r1
   169e8:	movcs	r3, r1
   169ec:	str	r3, [r4, #24]
   169f0:	str	r1, [r2, #4]
   169f4:	ldrh	r3, [r4, #130]	; 0x82
   169f8:	ldrh	r2, [r4, #128]	; 0x80
   169fc:	cmp	r2, r3
   16a00:	strhcc	r3, [r4, #128]	; 0x80
   16a04:	ldr	r3, [r4, #32]
   16a08:	ldrh	r2, [r3, #12]
   16a0c:	strh	r2, [r4, #130]	; 0x82
   16a10:	sub	r3, r3, #36	; 0x24
   16a14:	str	r3, [r4, #32]
   16a18:	ldr	r3, [r4, #156]	; 0x9c
   16a1c:	sub	r3, r3, #1
   16a20:	str	r3, [r4, #156]	; 0x9c
   16a24:	b	16900 <flatcc_builder_end_table@@Base+0x78>
   16a28:			; <UNDEFINED> instruction: 0x9e3779b1
   16a2c:	andeq	sp, r1, ip, lsl r9
   16a30:	andeq	r0, r0, r5, lsr #10
   16a34:	andeq	sp, r1, ip, asr #22
   16a38:	andeq	sp, r1, r0, lsl lr

00016a3c <flatcc_builder_create_vector@@Base>:
   16a3c:	push	{r4, r5, r6, lr}
   16a40:	sub	sp, sp, #88	; 0x58
   16a44:	mov	r4, r0
   16a48:	ldrh	r0, [sp, #104]	; 0x68
   16a4c:	ldr	ip, [sp, #108]	; 0x6c
   16a50:	cmp	r2, ip
   16a54:	bhi	16b38 <flatcc_builder_create_vector@@Base+0xfc>
   16a58:	cmp	r0, #4
   16a5c:	movcc	r0, #4
   16a60:	ldrh	ip, [r4, #128]	; 0x80
   16a64:	cmp	ip, r0
   16a68:	strhcc	r0, [r4, #128]	; 0x80
   16a6c:	mul	r3, r3, r2
   16a70:	str	r2, [sp, #84]	; 0x54
   16a74:	ldr	r2, [r4, #136]	; 0x88
   16a78:	sub	ip, r2, r3
   16a7c:	sub	r0, r0, #1
   16a80:	and	r0, r0, ip
   16a84:	mov	ip, #4
   16a88:	str	ip, [sp, #12]
   16a8c:	add	lr, sp, #84	; 0x54
   16a90:	str	lr, [sp, #20]
   16a94:	str	ip, [sp, #24]
   16a98:	mov	ip, #1
   16a9c:	str	ip, [sp, #16]
   16aa0:	cmp	r3, #0
   16aa4:	beq	16ac0 <flatcc_builder_create_vector@@Base+0x84>
   16aa8:	add	ip, r3, #4
   16aac:	str	ip, [sp, #12]
   16ab0:	str	r1, [sp, #28]
   16ab4:	str	r3, [sp, #32]
   16ab8:	mov	r3, #2
   16abc:	str	r3, [sp, #16]
   16ac0:	cmp	r0, #0
   16ac4:	beq	16af4 <flatcc_builder_create_vector@@Base+0xb8>
   16ac8:	ldr	r3, [sp, #12]
   16acc:	add	r3, r3, r0
   16ad0:	str	r3, [sp, #12]
   16ad4:	ldr	r3, [sp, #16]
   16ad8:	add	r3, r3, #1
   16adc:	add	r1, sp, #88	; 0x58
   16ae0:	add	r1, r1, r3, lsl #3
   16ae4:	ldr	ip, [pc, #136]	; 16b74 <flatcc_builder_create_vector@@Base+0x138>
   16ae8:	str	ip, [r1, #-76]	; 0xffffffb4
   16aec:	str	r0, [r1, #-72]	; 0xffffffb8
   16af0:	str	r3, [sp, #16]
   16af4:	ldr	r3, [sp, #12]
   16af8:	sub	r5, r2, r3
   16afc:	cmp	r2, r5
   16b00:	ble	16b4c <flatcc_builder_create_vector@@Base+0x110>
   16b04:	str	r3, [sp]
   16b08:	ldr	r6, [r4, #44]	; 0x2c
   16b0c:	mov	r3, r5
   16b10:	ldr	r2, [sp, #16]
   16b14:	add	r1, sp, #20
   16b18:	ldr	r0, [r4, #36]	; 0x24
   16b1c:	blx	r6
   16b20:	cmp	r0, #0
   16b24:	bne	16b60 <flatcc_builder_create_vector@@Base+0x124>
   16b28:	str	r5, [r4, #136]	; 0x88
   16b2c:	mov	r0, r5
   16b30:	add	sp, sp, #88	; 0x58
   16b34:	pop	{r4, r5, r6, pc}
   16b38:	ldr	r3, [pc, #56]	; 16b78 <flatcc_builder_create_vector@@Base+0x13c>
   16b3c:	ldr	r2, [pc, #56]	; 16b7c <flatcc_builder_create_vector@@Base+0x140>
   16b40:	ldr	r1, [pc, #56]	; 16b80 <flatcc_builder_create_vector@@Base+0x144>
   16b44:	ldr	r0, [pc, #56]	; 16b84 <flatcc_builder_create_vector@@Base+0x148>
   16b48:	bl	124d8 <__assert_fail@plt>
   16b4c:	ldr	r3, [pc, #52]	; 16b88 <flatcc_builder_create_vector@@Base+0x14c>
   16b50:	ldr	r2, [pc, #52]	; 16b8c <flatcc_builder_create_vector@@Base+0x150>
   16b54:	ldr	r1, [pc, #36]	; 16b80 <flatcc_builder_create_vector@@Base+0x144>
   16b58:	ldr	r0, [pc, #48]	; 16b90 <flatcc_builder_create_vector@@Base+0x154>
   16b5c:	bl	124d8 <__assert_fail@plt>
   16b60:	ldr	r3, [pc, #32]	; 16b88 <flatcc_builder_create_vector@@Base+0x14c>
   16b64:	ldr	r2, [pc, #40]	; 16b94 <flatcc_builder_create_vector@@Base+0x158>
   16b68:	ldr	r1, [pc, #16]	; 16b80 <flatcc_builder_create_vector@@Base+0x144>
   16b6c:	ldr	r0, [pc, #28]	; 16b90 <flatcc_builder_create_vector@@Base+0x154>
   16b70:	bl	124d8 <__assert_fail@plt>
   16b74:	strdeq	sp, [r1], -ip
   16b78:	andeq	sp, r1, r8, lsr r9
   16b7c:	andeq	r0, r0, r5, asr r5
   16b80:	andeq	sp, r1, ip, asr #22
   16b84:	andeq	sp, r1, ip, lsr lr
   16b88:	andeq	sp, r1, r8, asr #12
   16b8c:	andeq	r0, r0, r7, lsl #5
   16b90:	andeq	sp, r1, r0, lsr #23
   16b94:	andeq	r0, r0, fp, lsl #5

00016b98 <flatcc_builder_end_vector@@Base>:
   16b98:	push	{r4, r5, lr}
   16b9c:	sub	sp, sp, #12
   16ba0:	ldr	r1, [r0, #32]
   16ba4:	ldrh	r3, [r1, #14]
   16ba8:	cmp	r3, #4
   16bac:	bne	16be8 <flatcc_builder_end_vector@@Base+0x50>
   16bb0:	mov	r4, r0
   16bb4:	ldr	r3, [r1, #16]
   16bb8:	ldr	r2, [r1, #20]
   16bbc:	ldr	r1, [r1, #24]
   16bc0:	str	r1, [sp, #4]
   16bc4:	ldrh	r1, [r0, #130]	; 0x82
   16bc8:	str	r1, [sp]
   16bcc:	ldr	r1, [r0, #16]
   16bd0:	bl	16a3c <flatcc_builder_create_vector@@Base>
   16bd4:	subs	r5, r0, #0
   16bd8:	bne	16bfc <flatcc_builder_end_vector@@Base+0x64>
   16bdc:	mov	r0, r5
   16be0:	add	sp, sp, #12
   16be4:	pop	{r4, r5, pc}
   16be8:	ldr	r3, [pc, #140]	; 16c7c <flatcc_builder_end_vector@@Base+0xe4>
   16bec:	ldr	r2, [pc, #140]	; 16c80 <flatcc_builder_end_vector@@Base+0xe8>
   16bf0:	ldr	r1, [pc, #140]	; 16c84 <flatcc_builder_end_vector@@Base+0xec>
   16bf4:	ldr	r0, [pc, #140]	; 16c88 <flatcc_builder_end_vector@@Base+0xf0>
   16bf8:	bl	124d8 <__assert_fail@plt>
   16bfc:	ldr	r2, [r4, #20]
   16c00:	mov	r1, #0
   16c04:	ldr	r0, [r4, #16]
   16c08:	bl	124a8 <memset@plt>
   16c0c:	ldr	r2, [r4, #32]
   16c10:	ldr	r3, [r2, #8]
   16c14:	str	r3, [r4, #20]
   16c18:	ldr	r0, [r2]
   16c1c:	str	r0, [r4, #28]
   16c20:	ldr	r1, [r2, #4]
   16c24:	ldr	r3, [r4, #60]	; 0x3c
   16c28:	add	r3, r3, r0
   16c2c:	str	r3, [r4, #16]
   16c30:	ldr	r3, [r4, #64]	; 0x40
   16c34:	sub	r3, r3, r0
   16c38:	cmp	r3, r1
   16c3c:	movcs	r3, r1
   16c40:	str	r3, [r4, #24]
   16c44:	str	r1, [r2, #4]
   16c48:	ldrh	r3, [r4, #130]	; 0x82
   16c4c:	ldrh	r2, [r4, #128]	; 0x80
   16c50:	cmp	r2, r3
   16c54:	strhcc	r3, [r4, #128]	; 0x80
   16c58:	ldr	r3, [r4, #32]
   16c5c:	ldrh	r2, [r3, #12]
   16c60:	strh	r2, [r4, #130]	; 0x82
   16c64:	sub	r3, r3, #36	; 0x24
   16c68:	str	r3, [r4, #32]
   16c6c:	ldr	r3, [r4, #156]	; 0x9c
   16c70:	sub	r3, r3, #1
   16c74:	str	r3, [r4, #156]	; 0x9c
   16c78:	b	16bdc <flatcc_builder_end_vector@@Base+0x44>
   16c7c:	andeq	sp, r1, r8, asr r9
   16c80:	andeq	r0, r0, r8, ror r5
   16c84:	andeq	sp, r1, ip, asr #22
   16c88:	andeq	sp, r1, r4, lsl #25

00016c8c <flatcc_builder_vector_count@@Base>:
   16c8c:	ldr	r3, [r0, #32]
   16c90:	ldr	r0, [r3, #20]
   16c94:	bx	lr

00016c98 <flatcc_builder_vector_edit@@Base>:
   16c98:	ldr	r0, [r0, #16]
   16c9c:	bx	lr

00016ca0 <flatcc_builder_create_offset_vector_direct@@Base>:
   16ca0:	push	{r4, lr}
   16ca4:	mov	r3, #0
   16ca8:	bl	14444 <flatcc_builder_default_alloc@@Base+0x378>
   16cac:	pop	{r4, pc}

00016cb0 <flatcc_builder_end_offset_vector@@Base>:
   16cb0:	push	{r4, r5, r6, lr}
   16cb4:	ldr	r3, [r0, #32]
   16cb8:	ldrh	r2, [r3, #14]
   16cbc:	cmp	r2, #5
   16cc0:	bne	16ce4 <flatcc_builder_end_offset_vector@@Base+0x34>
   16cc4:	mov	r4, r0
   16cc8:	ldr	r2, [r3, #20]
   16ccc:	ldr	r1, [r0, #16]
   16cd0:	bl	16ca0 <flatcc_builder_create_offset_vector_direct@@Base>
   16cd4:	subs	r5, r0, #0
   16cd8:	bne	16cf8 <flatcc_builder_end_offset_vector@@Base+0x48>
   16cdc:	mov	r0, r5
   16ce0:	pop	{r4, r5, r6, pc}
   16ce4:	ldr	r3, [pc, #140]	; 16d78 <flatcc_builder_end_offset_vector@@Base+0xc8>
   16ce8:	ldr	r2, [pc, #140]	; 16d7c <flatcc_builder_end_offset_vector@@Base+0xcc>
   16cec:	ldr	r1, [pc, #140]	; 16d80 <flatcc_builder_end_offset_vector@@Base+0xd0>
   16cf0:	ldr	r0, [pc, #140]	; 16d84 <flatcc_builder_end_offset_vector@@Base+0xd4>
   16cf4:	bl	124d8 <__assert_fail@plt>
   16cf8:	ldr	r2, [r4, #20]
   16cfc:	mov	r1, #0
   16d00:	ldr	r0, [r4, #16]
   16d04:	bl	124a8 <memset@plt>
   16d08:	ldr	r2, [r4, #32]
   16d0c:	ldr	r3, [r2, #8]
   16d10:	str	r3, [r4, #20]
   16d14:	ldr	r0, [r2]
   16d18:	str	r0, [r4, #28]
   16d1c:	ldr	r1, [r2, #4]
   16d20:	ldr	r3, [r4, #60]	; 0x3c
   16d24:	add	r3, r3, r0
   16d28:	str	r3, [r4, #16]
   16d2c:	ldr	r3, [r4, #64]	; 0x40
   16d30:	sub	r3, r3, r0
   16d34:	cmp	r3, r1
   16d38:	movcs	r3, r1
   16d3c:	str	r3, [r4, #24]
   16d40:	str	r1, [r2, #4]
   16d44:	ldrh	r3, [r4, #130]	; 0x82
   16d48:	ldrh	r2, [r4, #128]	; 0x80
   16d4c:	cmp	r2, r3
   16d50:	strhcc	r3, [r4, #128]	; 0x80
   16d54:	ldr	r3, [r4, #32]
   16d58:	ldrh	r2, [r3, #12]
   16d5c:	strh	r2, [r4, #130]	; 0x82
   16d60:	sub	r3, r3, #36	; 0x24
   16d64:	str	r3, [r4, #32]
   16d68:	ldr	r3, [r4, #156]	; 0x9c
   16d6c:	sub	r3, r3, #1
   16d70:	str	r3, [r4, #156]	; 0x9c
   16d74:	b	16cdc <flatcc_builder_end_offset_vector@@Base+0x2c>
   16d78:	andeq	sp, r1, r4, ror r9
   16d7c:	andeq	r0, r0, r8, asr #11
   16d80:	andeq	sp, r1, ip, asr #22
   16d84:	strdeq	sp, [r1], -r0

00016d88 <flatcc_builder_create_offset_vector@@Base>:
   16d88:	push	{r4, r5, r6, lr}
   16d8c:	mov	r4, r0
   16d90:	mov	r6, r1
   16d94:	mov	r5, r2
   16d98:	bl	15c14 <flatcc_builder_start_offset_vector@@Base>
   16d9c:	cmp	r0, #0
   16da0:	beq	16dac <flatcc_builder_create_offset_vector@@Base+0x24>
   16da4:	mov	r0, #0
   16da8:	pop	{r4, r5, r6, pc}
   16dac:	mov	r1, r5
   16db0:	mov	r0, r4
   16db4:	bl	155e4 <flatcc_builder_extend_offset_vector@@Base>
   16db8:	cmp	r0, #0
   16dbc:	beq	16dd8 <flatcc_builder_create_offset_vector@@Base+0x50>
   16dc0:	lsl	r2, r5, #2
   16dc4:	mov	r1, r6
   16dc8:	bl	12430 <memcpy@plt>
   16dcc:	mov	r0, r4
   16dd0:	bl	16cb0 <flatcc_builder_end_offset_vector@@Base>
   16dd4:	pop	{r4, r5, r6, pc}
   16dd8:	mov	r0, #0
   16ddc:	pop	{r4, r5, r6, pc}

00016de0 <flatcc_builder_end_offset_vector_for_unions@@Base>:
   16de0:	push	{r4, r5, r6, lr}
   16de4:	mov	r4, r0
   16de8:	ldr	r2, [r0, #32]
   16dec:	ldrh	r0, [r2, #14]
   16df0:	cmp	r0, #5
   16df4:	bne	16e1c <flatcc_builder_end_offset_vector_for_unions@@Base+0x3c>
   16df8:	mov	r3, r1
   16dfc:	ldr	r2, [r2, #20]
   16e00:	ldr	r1, [r4, #16]
   16e04:	mov	r0, r4
   16e08:	bl	14444 <flatcc_builder_default_alloc@@Base+0x378>
   16e0c:	subs	r5, r0, #0
   16e10:	bne	16e30 <flatcc_builder_end_offset_vector_for_unions@@Base+0x50>
   16e14:	mov	r0, r5
   16e18:	pop	{r4, r5, r6, pc}
   16e1c:	ldr	r3, [pc, #140]	; 16eb0 <flatcc_builder_end_offset_vector_for_unions@@Base+0xd0>
   16e20:	ldr	r2, [pc, #140]	; 16eb4 <flatcc_builder_end_offset_vector_for_unions@@Base+0xd4>
   16e24:	ldr	r1, [pc, #140]	; 16eb8 <flatcc_builder_end_offset_vector_for_unions@@Base+0xd8>
   16e28:	ldr	r0, [pc, #140]	; 16ebc <flatcc_builder_end_offset_vector_for_unions@@Base+0xdc>
   16e2c:	bl	124d8 <__assert_fail@plt>
   16e30:	ldr	r2, [r4, #20]
   16e34:	mov	r1, #0
   16e38:	ldr	r0, [r4, #16]
   16e3c:	bl	124a8 <memset@plt>
   16e40:	ldr	r2, [r4, #32]
   16e44:	ldr	r3, [r2, #8]
   16e48:	str	r3, [r4, #20]
   16e4c:	ldr	r0, [r2]
   16e50:	str	r0, [r4, #28]
   16e54:	ldr	r1, [r2, #4]
   16e58:	ldr	r3, [r4, #60]	; 0x3c
   16e5c:	add	r3, r3, r0
   16e60:	str	r3, [r4, #16]
   16e64:	ldr	r3, [r4, #64]	; 0x40
   16e68:	sub	r3, r3, r0
   16e6c:	cmp	r3, r1
   16e70:	movcs	r3, r1
   16e74:	str	r3, [r4, #24]
   16e78:	str	r1, [r2, #4]
   16e7c:	ldrh	r3, [r4, #130]	; 0x82
   16e80:	ldrh	r2, [r4, #128]	; 0x80
   16e84:	cmp	r2, r3
   16e88:	strhcc	r3, [r4, #128]	; 0x80
   16e8c:	ldr	r3, [r4, #32]
   16e90:	ldrh	r2, [r3, #12]
   16e94:	strh	r2, [r4, #130]	; 0x82
   16e98:	sub	r3, r3, #36	; 0x24
   16e9c:	str	r3, [r4, #32]
   16ea0:	ldr	r3, [r4, #156]	; 0x9c
   16ea4:	sub	r3, r3, #1
   16ea8:	str	r3, [r4, #156]	; 0x9c
   16eac:	b	16e14 <flatcc_builder_end_offset_vector_for_unions@@Base+0x34>
   16eb0:	muleq	r1, r8, r9
   16eb4:	ldrdeq	r0, [r0], -r5
   16eb8:	andeq	sp, r1, ip, asr #22
   16ebc:	strdeq	sp, [r1], -r0

00016ec0 <flatcc_builder_offset_vector_edit@@Base>:
   16ec0:	ldr	r0, [r0, #16]
   16ec4:	bx	lr

00016ec8 <flatcc_builder_offset_vector_count@@Base>:
   16ec8:	ldr	r3, [r0, #32]
   16ecc:	ldr	r0, [r3, #20]
   16ed0:	bx	lr

00016ed4 <flatcc_builder_create_union_vector_direct@@Base>:
   16ed4:	push	{r4, r5, r6, r7, lr}
   16ed8:	sub	sp, sp, #12
   16edc:	mov	r4, r0
   16ee0:	mov	r5, r1
   16ee4:	mov	r6, r2
   16ee8:	mov	r1, r3
   16eec:	mov	r3, r2
   16ef0:	ldr	r2, [sp, #32]
   16ef4:	mov	r0, r5
   16ef8:	bl	14444 <flatcc_builder_default_alloc@@Base+0x378>
   16efc:	subs	r7, r0, #0
   16f00:	bne	16f1c <flatcc_builder_create_union_vector_direct@@Base+0x48>
   16f04:	mov	r3, #0
   16f08:	str	r3, [r4]
   16f0c:	str	r3, [r4, #4]
   16f10:	mov	r0, r4
   16f14:	add	sp, sp, #12
   16f18:	pop	{r4, r5, r6, r7, pc}
   16f1c:	mvn	r3, #0
   16f20:	str	r3, [sp, #4]
   16f24:	mov	r3, #1
   16f28:	str	r3, [sp]
   16f2c:	ldr	r2, [sp, #32]
   16f30:	mov	r1, r6
   16f34:	mov	r0, r5
   16f38:	bl	16a3c <flatcc_builder_create_vector@@Base>
   16f3c:	cmp	r0, #0
   16f40:	moveq	r3, #0
   16f44:	streq	r3, [r4]
   16f48:	strne	r0, [r4]
   16f4c:	str	r7, [r4, #4]
   16f50:	b	16f10 <flatcc_builder_create_union_vector_direct@@Base+0x3c>

00016f54 <flatcc_builder_create_union_vector@@Base>:
   16f54:	push	{r4, r5, r6, r7, r8, lr}
   16f58:	sub	sp, sp, #16
   16f5c:	mov	r5, r0
   16f60:	mov	r4, r1
   16f64:	mov	r7, r2
   16f68:	mov	r6, r3
   16f6c:	mov	r0, r1
   16f70:	bl	15c14 <flatcc_builder_start_offset_vector@@Base>
   16f74:	cmp	r0, #0
   16f78:	beq	16f94 <flatcc_builder_create_union_vector@@Base+0x40>
   16f7c:	mov	r3, #0
   16f80:	str	r3, [r5]
   16f84:	str	r3, [r5, #4]
   16f88:	mov	r0, r5
   16f8c:	add	sp, sp, #16
   16f90:	pop	{r4, r5, r6, r7, r8, pc}
   16f94:	mov	r1, r6
   16f98:	mov	r0, r4
   16f9c:	bl	155e4 <flatcc_builder_extend_offset_vector@@Base>
   16fa0:	cmp	r0, #0
   16fa4:	moveq	r3, #0
   16fa8:	streq	r3, [r5]
   16fac:	streq	r3, [r5, #4]
   16fb0:	beq	16f88 <flatcc_builder_create_union_vector@@Base+0x34>
   16fb4:	ldr	r8, [r4, #20]
   16fb8:	add	r1, r6, r8
   16fbc:	str	r1, [r4, #20]
   16fc0:	ldr	r3, [r4, #24]
   16fc4:	cmp	r1, r3
   16fc8:	bcs	170ac <flatcc_builder_create_union_vector@@Base+0x158>
   16fcc:	ldr	r3, [r4, #16]
   16fd0:	adds	r2, r3, r8
   16fd4:	beq	170c4 <flatcc_builder_create_union_vector@@Base+0x170>
   16fd8:	cmp	r6, #0
   16fdc:	beq	1700c <flatcc_builder_create_union_vector@@Base+0xb8>
   16fe0:	mov	r1, r7
   16fe4:	sub	ip, r2, #1
   16fe8:	sub	r0, r3, #4
   16fec:	add	r7, r7, r6, lsl #3
   16ff0:	ldrb	lr, [r1]
   16ff4:	strb	lr, [ip, #1]!
   16ff8:	ldr	lr, [r1, #4]
   16ffc:	str	lr, [r0, #4]!
   17000:	add	r1, r1, #8
   17004:	cmp	r1, r7
   17008:	bne	16ff0 <flatcc_builder_create_union_vector@@Base+0x9c>
   1700c:	str	r6, [sp]
   17010:	mov	r1, r4
   17014:	add	r0, sp, #8
   17018:	bl	16ed4 <flatcc_builder_create_union_vector_direct@@Base>
   1701c:	ldr	r7, [sp, #8]
   17020:	ldr	r6, [sp, #12]
   17024:	ldr	r2, [r4, #20]
   17028:	mov	r1, #0
   1702c:	ldr	r0, [r4, #16]
   17030:	bl	124a8 <memset@plt>
   17034:	ldr	r2, [r4, #32]
   17038:	ldr	r3, [r2, #8]
   1703c:	str	r3, [r4, #20]
   17040:	ldr	r0, [r2]
   17044:	str	r0, [r4, #28]
   17048:	ldr	r1, [r2, #4]
   1704c:	ldr	r3, [r4, #60]	; 0x3c
   17050:	add	r3, r3, r0
   17054:	str	r3, [r4, #16]
   17058:	ldr	r3, [r4, #64]	; 0x40
   1705c:	sub	r3, r3, r0
   17060:	cmp	r3, r1
   17064:	movcs	r3, r1
   17068:	str	r3, [r4, #24]
   1706c:	str	r1, [r2, #4]
   17070:	ldrh	r3, [r4, #130]	; 0x82
   17074:	ldrh	r2, [r4, #128]	; 0x80
   17078:	cmp	r2, r3
   1707c:	strhcc	r3, [r4, #128]	; 0x80
   17080:	ldr	r3, [r4, #32]
   17084:	ldrh	r2, [r3, #12]
   17088:	strh	r2, [r4, #130]	; 0x82
   1708c:	sub	r3, r3, #36	; 0x24
   17090:	str	r3, [r4, #32]
   17094:	ldr	r3, [r4, #156]	; 0x9c
   17098:	sub	r3, r3, #1
   1709c:	str	r3, [r4, #156]	; 0x9c
   170a0:	str	r7, [r5]
   170a4:	str	r6, [r5, #4]
   170a8:	b	16f88 <flatcc_builder_create_union_vector@@Base+0x34>
   170ac:	mvn	r2, #3
   170b0:	add	r1, r1, #1
   170b4:	mov	r0, r4
   170b8:	bl	14058 <main@@Base+0x48>
   170bc:	cmp	r0, #0
   170c0:	beq	16fcc <flatcc_builder_create_union_vector@@Base+0x78>
   170c4:	mov	r3, #0
   170c8:	str	r3, [r5]
   170cc:	str	r3, [r5, #4]
   170d0:	b	16f88 <flatcc_builder_create_union_vector@@Base+0x34>

000170d4 <flatcc_builder_start_union_vector@@Base>:
   170d4:	push	{r4, lr}
   170d8:	mov	r4, r0
   170dc:	mov	r1, #4
   170e0:	bl	142f8 <flatcc_builder_default_alloc@@Base+0x22c>
   170e4:	cmp	r0, #0
   170e8:	bne	17144 <flatcc_builder_start_union_vector@@Base+0x70>
   170ec:	ldr	r3, [r4, #32]
   170f0:	mov	r2, #8
   170f4:	str	r2, [r3, #16]
   170f8:	ldr	r3, [r4, #32]
   170fc:	mov	r2, #0
   17100:	str	r2, [r3, #20]
   17104:	ldr	r3, [r4, #32]
   17108:	mov	r2, #7
   1710c:	strh	r2, [r3, #14]
   17110:	ldr	r1, [r4, #28]
   17114:	ldr	r2, [r4, #60]	; 0x3c
   17118:	add	r2, r2, r1
   1711c:	str	r2, [r4, #16]
   17120:	ldr	r3, [r4, #64]	; 0x40
   17124:	sub	r3, r3, r1
   17128:	cmn	r3, #4
   1712c:	mvnhi	r3, #3
   17130:	str	r3, [r4, #24]
   17134:	ldr	r3, [r4, #32]
   17138:	mvn	r2, #3
   1713c:	str	r2, [r3, #4]
   17140:	pop	{r4, pc}
   17144:	mvn	r0, #0
   17148:	pop	{r4, pc}

0001714c <flatcc_builder_end_union_vector@@Base>:
   1714c:	push	{r4, r5, r6, r7, r8, lr}
   17150:	sub	sp, sp, #16
   17154:	ldr	r3, [r1, #32]
   17158:	ldrh	r2, [r3, #14]
   1715c:	cmp	r2, #7
   17160:	bne	17278 <flatcc_builder_end_union_vector@@Base+0x12c>
   17164:	mov	r6, r0
   17168:	mov	r4, r1
   1716c:	ldr	r5, [r3, #20]
   17170:	ldr	r8, [r1, #20]
   17174:	add	r1, r5, r5, lsl #2
   17178:	add	r1, r1, r8
   1717c:	str	r1, [r4, #20]
   17180:	ldr	r3, [r4, #24]
   17184:	cmp	r1, r3
   17188:	bcs	1728c <flatcc_builder_end_union_vector@@Base+0x140>
   1718c:	ldr	r7, [r4, #16]
   17190:	adds	r3, r7, r8
   17194:	beq	172a4 <flatcc_builder_end_union_vector@@Base+0x158>
   17198:	add	r2, r3, r5, lsl #2
   1719c:	cmp	r5, #0
   171a0:	beq	171d0 <flatcc_builder_end_union_vector@@Base+0x84>
   171a4:	mov	r1, r7
   171a8:	sub	ip, r2, #1
   171ac:	sub	r0, r3, #4
   171b0:	add	r7, r7, r5, lsl #3
   171b4:	ldrb	lr, [r1]
   171b8:	strb	lr, [ip, #1]!
   171bc:	ldr	lr, [r1, #4]
   171c0:	str	lr, [r0, #4]!
   171c4:	add	r1, r1, #8
   171c8:	cmp	r1, r7
   171cc:	bne	171b4 <flatcc_builder_end_union_vector@@Base+0x68>
   171d0:	str	r5, [sp]
   171d4:	mov	r1, r4
   171d8:	add	r0, sp, #8
   171dc:	bl	16ed4 <flatcc_builder_create_union_vector_direct@@Base>
   171e0:	ldr	r7, [sp, #8]
   171e4:	ldr	r5, [sp, #12]
   171e8:	ldr	r2, [r4, #20]
   171ec:	mov	r1, #0
   171f0:	ldr	r0, [r4, #16]
   171f4:	bl	124a8 <memset@plt>
   171f8:	ldr	r2, [r4, #32]
   171fc:	ldr	r3, [r2, #8]
   17200:	str	r3, [r4, #20]
   17204:	ldr	r0, [r2]
   17208:	str	r0, [r4, #28]
   1720c:	ldr	r1, [r2, #4]
   17210:	ldr	r3, [r4, #60]	; 0x3c
   17214:	add	r3, r3, r0
   17218:	str	r3, [r4, #16]
   1721c:	ldr	r3, [r4, #64]	; 0x40
   17220:	sub	r3, r3, r0
   17224:	cmp	r3, r1
   17228:	movcs	r3, r1
   1722c:	str	r3, [r4, #24]
   17230:	str	r1, [r2, #4]
   17234:	ldrh	r3, [r4, #130]	; 0x82
   17238:	ldrh	r2, [r4, #128]	; 0x80
   1723c:	cmp	r2, r3
   17240:	strhcc	r3, [r4, #128]	; 0x80
   17244:	ldr	r3, [r4, #32]
   17248:	ldrh	r2, [r3, #12]
   1724c:	strh	r2, [r4, #130]	; 0x82
   17250:	sub	r3, r3, #36	; 0x24
   17254:	str	r3, [r4, #32]
   17258:	ldr	r3, [r4, #156]	; 0x9c
   1725c:	sub	r3, r3, #1
   17260:	str	r3, [r4, #156]	; 0x9c
   17264:	str	r7, [r6]
   17268:	str	r5, [r6, #4]
   1726c:	mov	r0, r6
   17270:	add	sp, sp, #16
   17274:	pop	{r4, r5, r6, r7, r8, pc}
   17278:	ldr	r3, [pc, #52]	; 172b4 <flatcc_builder_end_union_vector@@Base+0x168>
   1727c:	ldr	r2, [pc, #52]	; 172b8 <flatcc_builder_end_union_vector@@Base+0x16c>
   17280:	ldr	r1, [pc, #52]	; 172bc <flatcc_builder_end_union_vector@@Base+0x170>
   17284:	ldr	r0, [pc, #52]	; 172c0 <flatcc_builder_end_union_vector@@Base+0x174>
   17288:	bl	124d8 <__assert_fail@plt>
   1728c:	mvn	r2, #3
   17290:	add	r1, r1, #1
   17294:	mov	r0, r4
   17298:	bl	14058 <main@@Base+0x48>
   1729c:	cmp	r0, #0
   172a0:	beq	1718c <flatcc_builder_end_union_vector@@Base+0x40>
   172a4:	mov	r3, #0
   172a8:	str	r3, [r6]
   172ac:	str	r3, [r6, #4]
   172b0:	b	1726c <flatcc_builder_end_union_vector@@Base+0x120>
   172b4:	andeq	sp, r1, r4, asr #19
   172b8:	andeq	r0, r0, r1, asr r6
   172bc:	andeq	sp, r1, ip, asr #22
   172c0:	andeq	sp, r1, r0, asr lr

000172c4 <flatcc_builder_union_vector_edit@@Base>:
   172c4:	ldr	r0, [r0, #16]
   172c8:	bx	lr

000172cc <flatcc_builder_union_vector_count@@Base>:
   172cc:	ldr	r3, [r0, #32]
   172d0:	ldr	r0, [r3, #20]
   172d4:	bx	lr

000172d8 <flatcc_builder_extend_union_vector@@Base>:
   172d8:	push	{r4, r5, r6, lr}
   172dc:	mov	r4, r0
   172e0:	ldr	r2, [r0, #32]
   172e4:	ldr	r3, [r2, #20]
   172e8:	adds	r3, r1, r3
   172ec:	movcs	ip, #1
   172f0:	movcc	ip, #0
   172f4:	cmn	r3, #-536870911	; 0xe0000001
   172f8:	movls	r0, #0
   172fc:	movhi	r0, #1
   17300:	orrs	r0, ip, r0
   17304:	bne	17330 <flatcc_builder_extend_union_vector@@Base+0x58>
   17308:	str	r3, [r2, #20]
   1730c:	ldr	r5, [r4, #20]
   17310:	add	r1, r5, r1, lsl #3
   17314:	str	r1, [r4, #20]
   17318:	ldr	r3, [r4, #24]
   1731c:	cmp	r1, r3
   17320:	bcs	17344 <flatcc_builder_extend_union_vector@@Base+0x6c>
   17324:	ldr	r0, [r4, #16]
   17328:	add	r0, r0, r5
   1732c:	pop	{r4, r5, r6, pc}
   17330:	ldr	r3, [pc, #44]	; 17364 <flatcc_builder_extend_union_vector@@Base+0x8c>
   17334:	mov	r2, #892	; 0x37c
   17338:	ldr	r1, [pc, #40]	; 17368 <flatcc_builder_extend_union_vector@@Base+0x90>
   1733c:	ldr	r0, [pc, #40]	; 1736c <flatcc_builder_extend_union_vector@@Base+0x94>
   17340:	bl	124d8 <__assert_fail@plt>
   17344:	mvn	r2, #3
   17348:	add	r1, r1, #1
   1734c:	mov	r0, r4
   17350:	bl	14058 <main@@Base+0x48>
   17354:	cmp	r0, #0
   17358:	beq	17324 <flatcc_builder_extend_union_vector@@Base+0x4c>
   1735c:	mov	r0, #0
   17360:	pop	{r4, r5, r6, pc}
   17364:	andeq	sp, r1, ip, lsr #14
   17368:	andeq	sp, r1, ip, asr #22
   1736c:	andeq	sp, r1, r8, ror #24

00017370 <flatcc_builder_truncate_union_vector@@Base>:
   17370:	push	{r4, lr}
   17374:	ldr	ip, [r0, #32]
   17378:	ldrh	r3, [ip, #14]
   1737c:	cmp	r3, #7
   17380:	bne	173c8 <flatcc_builder_truncate_union_vector@@Base+0x58>
   17384:	ldr	r3, [ip, #20]
   17388:	cmp	r3, r1
   1738c:	bcc	173dc <flatcc_builder_truncate_union_vector@@Base+0x6c>
   17390:	sub	r3, r3, r1
   17394:	str	r3, [ip, #20]
   17398:	ldr	r3, [r0, #32]
   1739c:	ldr	r2, [r3, #16]
   173a0:	mul	r2, r2, r1
   173a4:	ldr	r3, [r0, #20]
   173a8:	sub	r3, r3, r2
   173ac:	str	r3, [r0, #20]
   173b0:	ldr	r0, [r0, #16]
   173b4:	mov	r1, #0
   173b8:	add	r0, r0, r3
   173bc:	bl	124a8 <memset@plt>
   173c0:	mov	r0, #0
   173c4:	pop	{r4, pc}
   173c8:	ldr	r3, [pc, #32]	; 173f0 <flatcc_builder_truncate_union_vector@@Base+0x80>
   173cc:	ldr	r2, [pc, #32]	; 173f4 <flatcc_builder_truncate_union_vector@@Base+0x84>
   173d0:	ldr	r1, [pc, #32]	; 173f8 <flatcc_builder_truncate_union_vector@@Base+0x88>
   173d4:	ldr	r0, [pc, #32]	; 173fc <flatcc_builder_truncate_union_vector@@Base+0x8c>
   173d8:	bl	124d8 <__assert_fail@plt>
   173dc:	ldr	r3, [pc, #12]	; 173f0 <flatcc_builder_truncate_union_vector@@Base+0x80>
   173e0:	ldr	r2, [pc, #24]	; 17400 <flatcc_builder_truncate_union_vector@@Base+0x90>
   173e4:	ldr	r1, [pc, #12]	; 173f8 <flatcc_builder_truncate_union_vector@@Base+0x88>
   173e8:	ldr	r0, [pc, #20]	; 17404 <flatcc_builder_truncate_union_vector@@Base+0x94>
   173ec:	bl	124d8 <__assert_fail@plt>
   173f0:	andeq	sp, r1, r4, ror #19
   173f4:	andeq	r0, r0, r1, lsl #13
   173f8:	andeq	sp, r1, ip, asr #22
   173fc:	andeq	sp, r1, r0, asr lr
   17400:	andeq	r0, r0, r2, lsl #13
   17404:	andeq	sp, r1, r4, ror sp

00017408 <flatcc_builder_union_vector_push@@Base>:
   17408:	push	{r4, r5, lr}
   1740c:	sub	sp, sp, #12
   17410:	add	r3, sp, #8
   17414:	stmdb	r3, {r1, r2}
   17418:	ldr	r2, [r0, #32]
   1741c:	ldrh	r3, [r2, #14]
   17420:	cmp	r3, #7
   17424:	bne	1747c <flatcc_builder_union_vector_push@@Base+0x74>
   17428:	mov	r4, r0
   1742c:	ldr	r3, [r2, #20]
   17430:	cmn	r3, #-536870911	; 0xe0000001
   17434:	beq	174ac <flatcc_builder_union_vector_push@@Base+0xa4>
   17438:	add	r3, r3, #1
   1743c:	str	r3, [r2, #20]
   17440:	ldr	r5, [r0, #20]
   17444:	add	r3, r5, #8
   17448:	str	r3, [r0, #20]
   1744c:	ldr	r2, [r0, #24]
   17450:	cmp	r3, r2
   17454:	bcs	17490 <flatcc_builder_union_vector_push@@Base+0x88>
   17458:	ldr	r3, [r4, #16]
   1745c:	adds	r3, r3, r5
   17460:	moveq	r0, r3
   17464:	addne	r2, sp, #8
   17468:	ldmdbne	r2, {r0, r1}
   1746c:	stmne	r3, {r0, r1}
   17470:	movne	r0, r3
   17474:	add	sp, sp, #12
   17478:	pop	{r4, r5, pc}
   1747c:	ldr	r3, [pc, #48]	; 174b4 <flatcc_builder_union_vector_push@@Base+0xac>
   17480:	ldr	r2, [pc, #48]	; 174b8 <flatcc_builder_union_vector_push@@Base+0xb0>
   17484:	ldr	r1, [pc, #48]	; 174bc <flatcc_builder_union_vector_push@@Base+0xb4>
   17488:	ldr	r0, [pc, #48]	; 174c0 <flatcc_builder_union_vector_push@@Base+0xb8>
   1748c:	bl	124d8 <__assert_fail@plt>
   17490:	mvn	r2, #3
   17494:	add	r1, r5, #9
   17498:	bl	14058 <main@@Base+0x48>
   1749c:	cmp	r0, #0
   174a0:	beq	17458 <flatcc_builder_union_vector_push@@Base+0x50>
   174a4:	mov	r0, #0
   174a8:	b	17474 <flatcc_builder_union_vector_push@@Base+0x6c>
   174ac:	mov	r0, #0
   174b0:	b	17474 <flatcc_builder_union_vector_push@@Base+0x6c>
   174b4:	andeq	sp, r1, ip, lsl #20
   174b8:	andeq	r0, r0, sp, lsl #13
   174bc:	andeq	sp, r1, ip, asr #22
   174c0:	andeq	sp, r1, r0, asr lr

000174c4 <flatcc_builder_append_union_vector@@Base>:
   174c4:	push	{r4, r5, r6, r7, r8, lr}
   174c8:	mov	r6, r1
   174cc:	ldr	r1, [r0, #32]
   174d0:	ldrh	r3, [r1, #14]
   174d4:	cmp	r3, #7
   174d8:	bne	17548 <flatcc_builder_append_union_vector@@Base+0x84>
   174dc:	mov	r5, r0
   174e0:	ldr	r3, [r1, #20]
   174e4:	adds	r3, r2, r3
   174e8:	movcs	ip, #1
   174ec:	movcc	ip, #0
   174f0:	cmn	r3, #-536870911	; 0xe0000001
   174f4:	movls	r0, #0
   174f8:	movhi	r0, #1
   174fc:	orrs	r0, ip, r0
   17500:	bne	1755c <flatcc_builder_append_union_vector@@Base+0x98>
   17504:	str	r3, [r1, #20]
   17508:	lsl	r4, r2, #3
   1750c:	ldr	r7, [r5, #20]
   17510:	add	r1, r4, r7
   17514:	str	r1, [r5, #20]
   17518:	ldr	r3, [r5, #24]
   1751c:	cmp	r1, r3
   17520:	bcs	17570 <flatcc_builder_append_union_vector@@Base+0xac>
   17524:	ldr	r5, [r5, #16]
   17528:	adds	r5, r5, r7
   1752c:	beq	17540 <flatcc_builder_append_union_vector@@Base+0x7c>
   17530:	mov	r2, r4
   17534:	mov	r1, r6
   17538:	mov	r0, r5
   1753c:	bl	12430 <memcpy@plt>
   17540:	mov	r0, r5
   17544:	pop	{r4, r5, r6, r7, r8, pc}
   17548:	ldr	r3, [pc, #64]	; 17590 <flatcc_builder_append_union_vector@@Base+0xcc>
   1754c:	ldr	r2, [pc, #64]	; 17594 <flatcc_builder_append_union_vector@@Base+0xd0>
   17550:	ldr	r1, [pc, #64]	; 17598 <flatcc_builder_append_union_vector@@Base+0xd4>
   17554:	ldr	r0, [pc, #64]	; 1759c <flatcc_builder_append_union_vector@@Base+0xd8>
   17558:	bl	124d8 <__assert_fail@plt>
   1755c:	ldr	r3, [pc, #60]	; 175a0 <flatcc_builder_append_union_vector@@Base+0xdc>
   17560:	mov	r2, #892	; 0x37c
   17564:	ldr	r1, [pc, #44]	; 17598 <flatcc_builder_append_union_vector@@Base+0xd4>
   17568:	ldr	r0, [pc, #52]	; 175a4 <flatcc_builder_append_union_vector@@Base+0xe0>
   1756c:	bl	124d8 <__assert_fail@plt>
   17570:	mvn	r2, #3
   17574:	add	r1, r1, #1
   17578:	mov	r0, r5
   1757c:	bl	14058 <main@@Base+0x48>
   17580:	cmp	r0, #0
   17584:	beq	17524 <flatcc_builder_append_union_vector@@Base+0x60>
   17588:	mov	r5, #0
   1758c:	b	17540 <flatcc_builder_append_union_vector@@Base+0x7c>
   17590:	andeq	sp, r1, r0, lsr sl
   17594:	muleq	r0, ip, r6
   17598:	andeq	sp, r1, ip, asr #22
   1759c:	andeq	sp, r1, r0, asr lr
   175a0:	andeq	sp, r1, ip, lsr #14
   175a4:	andeq	sp, r1, r8, ror #24

000175a8 <flatcc_builder_create_string@@Base>:
   175a8:	push	{r4, r5, r6, lr}
   175ac:	sub	sp, sp, #88	; 0x58
   175b0:	mov	r5, r0
   175b4:	str	r2, [sp, #84]	; 0x54
   175b8:	ldr	r0, [r0, #136]	; 0x88
   175bc:	sub	r3, r0, r2
   175c0:	sub	r3, r3, #1
   175c4:	and	r3, r3, #3
   175c8:	add	r3, r3, #1
   175cc:	mov	ip, #4
   175d0:	str	ip, [sp, #12]
   175d4:	add	lr, sp, #84	; 0x54
   175d8:	str	lr, [sp, #20]
   175dc:	str	ip, [sp, #24]
   175e0:	mov	ip, #1
   175e4:	str	ip, [sp, #16]
   175e8:	cmp	r2, #0
   175ec:	beq	17608 <flatcc_builder_create_string@@Base+0x60>
   175f0:	add	ip, r2, #4
   175f4:	str	ip, [sp, #12]
   175f8:	str	r1, [sp, #28]
   175fc:	str	r2, [sp, #32]
   17600:	mov	r2, #2
   17604:	str	r2, [sp, #16]
   17608:	cmp	r3, #0
   1760c:	beq	1763c <flatcc_builder_create_string@@Base+0x94>
   17610:	ldr	r2, [sp, #12]
   17614:	add	r2, r2, r3
   17618:	str	r2, [sp, #12]
   1761c:	ldr	r2, [sp, #16]
   17620:	add	r2, r2, #1
   17624:	add	r1, sp, #88	; 0x58
   17628:	add	r1, r1, r2, lsl #3
   1762c:	ldr	ip, [pc, #116]	; 176a8 <flatcc_builder_create_string@@Base+0x100>
   17630:	str	ip, [r1, #-76]	; 0xffffffb4
   17634:	str	r3, [r1, #-72]	; 0xffffffb8
   17638:	str	r2, [sp, #16]
   1763c:	ldr	r3, [sp, #12]
   17640:	sub	r4, r0, r3
   17644:	cmp	r0, r4
   17648:	ble	17680 <flatcc_builder_create_string@@Base+0xd8>
   1764c:	str	r3, [sp]
   17650:	ldr	r6, [r5, #44]	; 0x2c
   17654:	mov	r3, r4
   17658:	ldr	r2, [sp, #16]
   1765c:	add	r1, sp, #20
   17660:	ldr	r0, [r5, #36]	; 0x24
   17664:	blx	r6
   17668:	cmp	r0, #0
   1766c:	bne	17694 <flatcc_builder_create_string@@Base+0xec>
   17670:	str	r4, [r5, #136]	; 0x88
   17674:	mov	r0, r4
   17678:	add	sp, sp, #88	; 0x58
   1767c:	pop	{r4, r5, r6, pc}
   17680:	ldr	r3, [pc, #36]	; 176ac <flatcc_builder_create_string@@Base+0x104>
   17684:	ldr	r2, [pc, #36]	; 176b0 <flatcc_builder_create_string@@Base+0x108>
   17688:	ldr	r1, [pc, #36]	; 176b4 <flatcc_builder_create_string@@Base+0x10c>
   1768c:	ldr	r0, [pc, #36]	; 176b8 <flatcc_builder_create_string@@Base+0x110>
   17690:	bl	124d8 <__assert_fail@plt>
   17694:	ldr	r3, [pc, #16]	; 176ac <flatcc_builder_create_string@@Base+0x104>
   17698:	ldr	r2, [pc, #28]	; 176bc <flatcc_builder_create_string@@Base+0x114>
   1769c:	ldr	r1, [pc, #16]	; 176b4 <flatcc_builder_create_string@@Base+0x10c>
   176a0:	ldr	r0, [pc, #16]	; 176b8 <flatcc_builder_create_string@@Base+0x110>
   176a4:	bl	124d8 <__assert_fail@plt>
   176a8:	strdeq	sp, [r1], -ip
   176ac:	andeq	sp, r1, r8, asr #12
   176b0:	andeq	r0, r0, r7, lsl #5
   176b4:	andeq	sp, r1, ip, asr #22
   176b8:	andeq	sp, r1, r0, lsr #23
   176bc:	andeq	r0, r0, fp, lsl #5

000176c0 <flatcc_builder_create_string_str@@Base>:
   176c0:	push	{r4, r5, r6, lr}
   176c4:	mov	r5, r0
   176c8:	mov	r4, r1
   176cc:	mov	r0, r1
   176d0:	bl	12484 <strlen@plt>
   176d4:	mov	r2, r0
   176d8:	mov	r1, r4
   176dc:	mov	r0, r5
   176e0:	bl	175a8 <flatcc_builder_create_string@@Base>
   176e4:	pop	{r4, r5, r6, pc}

000176e8 <flatcc_builder_create_string_strn@@Base>:
   176e8:	push	{r4, r5, r6, lr}
   176ec:	mov	r6, r0
   176f0:	mov	r4, r1
   176f4:	mov	r5, r2
   176f8:	mov	r1, #0
   176fc:	mov	r0, r4
   17700:	bl	124c0 <memchr@plt>
   17704:	cmp	r0, #0
   17708:	subne	r5, r0, r4
   1770c:	mov	r2, r5
   17710:	mov	r1, r4
   17714:	mov	r0, r6
   17718:	bl	175a8 <flatcc_builder_create_string@@Base>
   1771c:	pop	{r4, r5, r6, pc}

00017720 <flatcc_builder_end_string@@Base>:
   17720:	push	{r4, r5, r6, lr}
   17724:	ldr	r3, [r0, #32]
   17728:	ldrh	r2, [r3, #14]
   1772c:	cmp	r2, #6
   17730:	bne	17760 <flatcc_builder_end_string@@Base+0x40>
   17734:	mov	r4, r0
   17738:	ldr	r2, [r3, #20]
   1773c:	ldr	r3, [r0, #20]
   17740:	cmp	r2, r3
   17744:	bne	17774 <flatcc_builder_end_string@@Base+0x54>
   17748:	ldr	r1, [r0, #16]
   1774c:	bl	175a8 <flatcc_builder_create_string@@Base>
   17750:	subs	r5, r0, #0
   17754:	bne	17788 <flatcc_builder_end_string@@Base+0x68>
   17758:	mov	r0, r5
   1775c:	pop	{r4, r5, r6, pc}
   17760:	ldr	r3, [pc, #160]	; 17808 <flatcc_builder_end_string@@Base+0xe8>
   17764:	ldr	r2, [pc, #160]	; 1780c <flatcc_builder_end_string@@Base+0xec>
   17768:	ldr	r1, [pc, #160]	; 17810 <flatcc_builder_end_string@@Base+0xf0>
   1776c:	ldr	r0, [pc, #160]	; 17814 <flatcc_builder_end_string@@Base+0xf4>
   17770:	bl	124d8 <__assert_fail@plt>
   17774:	ldr	r3, [pc, #140]	; 17808 <flatcc_builder_end_string@@Base+0xe8>
   17778:	ldr	r2, [pc, #152]	; 17818 <flatcc_builder_end_string@@Base+0xf8>
   1777c:	ldr	r1, [pc, #140]	; 17810 <flatcc_builder_end_string@@Base+0xf0>
   17780:	ldr	r0, [pc, #148]	; 1781c <flatcc_builder_end_string@@Base+0xfc>
   17784:	bl	124d8 <__assert_fail@plt>
   17788:	ldr	r2, [r4, #20]
   1778c:	mov	r1, #0
   17790:	ldr	r0, [r4, #16]
   17794:	bl	124a8 <memset@plt>
   17798:	ldr	r2, [r4, #32]
   1779c:	ldr	r3, [r2, #8]
   177a0:	str	r3, [r4, #20]
   177a4:	ldr	r0, [r2]
   177a8:	str	r0, [r4, #28]
   177ac:	ldr	r1, [r2, #4]
   177b0:	ldr	r3, [r4, #60]	; 0x3c
   177b4:	add	r3, r3, r0
   177b8:	str	r3, [r4, #16]
   177bc:	ldr	r3, [r4, #64]	; 0x40
   177c0:	sub	r3, r3, r0
   177c4:	cmp	r3, r1
   177c8:	movcs	r3, r1
   177cc:	str	r3, [r4, #24]
   177d0:	str	r1, [r2, #4]
   177d4:	ldrh	r3, [r4, #130]	; 0x82
   177d8:	ldrh	r2, [r4, #128]	; 0x80
   177dc:	cmp	r2, r3
   177e0:	strhcc	r3, [r4, #128]	; 0x80
   177e4:	ldr	r3, [r4, #32]
   177e8:	ldrh	r2, [r3, #12]
   177ec:	strh	r2, [r4, #130]	; 0x82
   177f0:	sub	r3, r3, #36	; 0x24
   177f4:	str	r3, [r4, #32]
   177f8:	ldr	r3, [r4, #156]	; 0x9c
   177fc:	sub	r3, r3, #1
   17800:	str	r3, [r4, #156]	; 0x9c
   17804:	b	17758 <flatcc_builder_end_string@@Base+0x38>
   17808:	andeq	sp, r1, r4, asr sl
   1780c:	andeq	r0, r0, r4, asr #13
   17810:	andeq	sp, r1, ip, asr #22
   17814:	andeq	sp, r1, r4, lsr #26
   17818:	andeq	r0, r0, r5, asr #13
   1781c:	andeq	sp, r1, r4, lsl #29

00017820 <flatcc_builder_string_edit@@Base>:
   17820:	ldr	r0, [r0, #16]
   17824:	bx	lr

00017828 <flatcc_builder_string_len@@Base>:
   17828:	ldr	r3, [r0, #32]
   1782c:	ldr	r0, [r3, #20]
   17830:	bx	lr

00017834 <flatcc_builder_table_add@@Base>:
   17834:	push	{r4, r5, r6, r7, r8, lr}
   17838:	mov	r5, r1
   1783c:	ldr	r1, [r0, #32]
   17840:	ldrh	r1, [r1, #14]
   17844:	cmp	r1, #3
   17848:	bne	178f4 <flatcc_builder_table_add@@Base+0xc0>
   1784c:	mov	r4, r0
   17850:	ldr	r1, [pc, #248]	; 17950 <flatcc_builder_table_add@@Base+0x11c>
   17854:	cmp	r5, r1
   17858:	bhi	17908 <flatcc_builder_table_add@@Base+0xd4>
   1785c:	ldrh	r1, [r0, #130]	; 0x82
   17860:	cmp	r1, r3
   17864:	strhcc	r3, [r0, #130]	; 0x82
   17868:	ldr	r0, [r0, #4]
   1786c:	lsl	r1, r5, #1
   17870:	ldrh	r1, [r0, r1]
   17874:	cmp	r1, #0
   17878:	bne	1791c <flatcc_builder_table_add@@Base+0xe8>
   1787c:	ldr	r0, [r4, #12]
   17880:	eor	r0, r0, r5
   17884:	ldr	r1, [pc, #200]	; 17954 <flatcc_builder_table_add@@Base+0x120>
   17888:	mul	r0, r1, r0
   1788c:	eor	r0, r0, r2
   17890:	mul	r0, r1, r0
   17894:	str	r0, [r4, #12]
   17898:	uxth	r7, r5
   1789c:	sub	r6, r3, #1
   178a0:	ldr	r0, [r4, #20]
   178a4:	add	r6, r6, r0
   178a8:	rsb	r3, r3, #0
   178ac:	and	r6, r6, r3
   178b0:	add	r1, r2, r6
   178b4:	str	r1, [r4, #20]
   178b8:	ldr	r3, [r4, #24]
   178bc:	cmp	r1, r3
   178c0:	bcs	17930 <flatcc_builder_table_add@@Base+0xfc>
   178c4:	uxth	r5, r5
   178c8:	ldr	r3, [r4, #4]
   178cc:	lsl	r5, r5, #1
   178d0:	add	r2, r6, #4
   178d4:	strh	r2, [r3, r5]
   178d8:	ldrh	r3, [r4, #8]
   178dc:	cmp	r3, r7
   178e0:	addls	r7, r7, #1
   178e4:	strhls	r7, [r4, #8]
   178e8:	ldr	r0, [r4, #16]
   178ec:	add	r0, r0, r6
   178f0:	pop	{r4, r5, r6, r7, r8, pc}
   178f4:	ldr	r3, [pc, #92]	; 17958 <flatcc_builder_table_add@@Base+0x124>
   178f8:	ldr	r2, [pc, #92]	; 1795c <flatcc_builder_table_add@@Base+0x128>
   178fc:	ldr	r1, [pc, #92]	; 17960 <flatcc_builder_table_add@@Base+0x12c>
   17900:	ldr	r0, [pc, #92]	; 17964 <flatcc_builder_table_add@@Base+0x130>
   17904:	bl	124d8 <__assert_fail@plt>
   17908:	ldr	r3, [pc, #72]	; 17958 <flatcc_builder_table_add@@Base+0x124>
   1790c:	ldr	r2, [pc, #84]	; 17968 <flatcc_builder_table_add@@Base+0x134>
   17910:	ldr	r1, [pc, #72]	; 17960 <flatcc_builder_table_add@@Base+0x12c>
   17914:	ldr	r0, [pc, #80]	; 1796c <flatcc_builder_table_add@@Base+0x138>
   17918:	bl	124d8 <__assert_fail@plt>
   1791c:	ldr	r3, [pc, #52]	; 17958 <flatcc_builder_table_add@@Base+0x124>
   17920:	ldr	r2, [pc, #72]	; 17970 <flatcc_builder_table_add@@Base+0x13c>
   17924:	ldr	r1, [pc, #52]	; 17960 <flatcc_builder_table_add@@Base+0x12c>
   17928:	ldr	r0, [pc, #68]	; 17974 <flatcc_builder_table_add@@Base+0x140>
   1792c:	bl	124d8 <__assert_fail@plt>
   17930:	ldr	r2, [pc, #64]	; 17978 <flatcc_builder_table_add@@Base+0x144>
   17934:	add	r1, r1, #1
   17938:	mov	r0, r4
   1793c:	bl	14058 <main@@Base+0x48>
   17940:	cmp	r0, #0
   17944:	beq	178c4 <flatcc_builder_table_add@@Base+0x90>
   17948:	mov	r0, #0
   1794c:	pop	{r4, r5, r6, r7, r8, pc}
   17950:	strdeq	r7, [r0], -ip
   17954:			; <UNDEFINED> instruction: 0x9e3779b1
   17958:	andeq	sp, r1, r0, ror sl
   1795c:	andeq	r0, r0, sp, ror #13
   17960:	andeq	sp, r1, ip, asr #22
   17964:	andeq	sp, r1, r0, lsl lr
   17968:	andeq	r0, r0, lr, ror #13
   1796c:	andeq	sp, r1, r8, lsr #29
   17970:	strdeq	r0, [r0], -r8
   17974:	andeq	sp, r1, r0, lsr #23
   17978:	strdeq	pc, [r0], -ip

0001797c <flatcc_builder_table_edit@@Base>:
   1797c:	ldr	r3, [r0, #32]
   17980:	ldrh	r3, [r3, #14]
   17984:	cmp	r3, #3
   17988:	bne	179a0 <flatcc_builder_table_edit@@Base+0x24>
   1798c:	ldr	r3, [r0, #20]
   17990:	sub	r1, r3, r1
   17994:	ldr	r0, [r0, #16]
   17998:	add	r0, r0, r1
   1799c:	bx	lr
   179a0:	push	{r4, lr}
   179a4:	ldr	r3, [pc, #12]	; 179b8 <flatcc_builder_table_edit@@Base+0x3c>
   179a8:	ldr	r2, [pc, #12]	; 179bc <flatcc_builder_table_edit@@Base+0x40>
   179ac:	ldr	r1, [pc, #12]	; 179c0 <flatcc_builder_table_edit@@Base+0x44>
   179b0:	ldr	r0, [pc, #12]	; 179c4 <flatcc_builder_table_edit@@Base+0x48>
   179b4:	bl	124d8 <__assert_fail@plt>
   179b8:	andeq	sp, r1, ip, lsl #21
   179bc:	andeq	r0, r0, r2, lsl #14
   179c0:	andeq	sp, r1, ip, asr #22
   179c4:	andeq	sp, r1, r0, lsl lr

000179c8 <flatcc_builder_table_add_copy@@Base>:
   179c8:	push	{r4, r5, r6, lr}
   179cc:	mov	r6, r2
   179d0:	mov	r5, r3
   179d4:	ldrh	r3, [sp, #16]
   179d8:	mov	r2, r5
   179dc:	bl	17834 <flatcc_builder_table_add@@Base>
   179e0:	subs	r4, r0, #0
   179e4:	beq	179f8 <flatcc_builder_table_add_copy@@Base+0x30>
   179e8:	mov	r2, r5
   179ec:	mov	r1, r6
   179f0:	mov	r0, r4
   179f4:	bl	12430 <memcpy@plt>
   179f8:	mov	r0, r4
   179fc:	pop	{r4, r5, r6, pc}

00017a00 <flatcc_builder_table_add_offset@@Base>:
   17a00:	push	{r4, r5, r6, r7, r8, lr}
   17a04:	ldr	r3, [r0, #32]
   17a08:	ldrh	r3, [r3, #14]
   17a0c:	cmp	r3, #3
   17a10:	bne	17ac0 <flatcc_builder_table_add_offset@@Base+0xc0>
   17a14:	mov	r4, r0
   17a18:	mov	r5, r1
   17a1c:	ldr	r3, [pc, #240]	; 17b14 <flatcc_builder_table_add_offset@@Base+0x114>
   17a20:	cmp	r1, r3
   17a24:	bhi	17ad4 <flatcc_builder_table_add_offset@@Base+0xd4>
   17a28:	ldr	r2, [r0, #4]
   17a2c:	lsl	r3, r1, #1
   17a30:	ldrh	r3, [r2, r3]
   17a34:	cmp	r3, #0
   17a38:	bne	17ae8 <flatcc_builder_table_add_offset@@Base+0xe8>
   17a3c:	ldr	r3, [r0, #12]
   17a40:	eor	r3, r3, r1
   17a44:	ldr	r2, [pc, #204]	; 17b18 <flatcc_builder_table_add_offset@@Base+0x118>
   17a48:	mul	r3, r2, r3
   17a4c:	eor	r3, r3, #4
   17a50:	mul	r3, r2, r3
   17a54:	str	r3, [r0, #12]
   17a58:	uxth	r7, r1
   17a5c:	ldr	r6, [r0, #20]
   17a60:	add	r6, r6, #3
   17a64:	bic	r6, r6, #3
   17a68:	add	r1, r6, #4
   17a6c:	str	r1, [r0, #20]
   17a70:	ldr	r3, [r0, #24]
   17a74:	cmp	r1, r3
   17a78:	bhi	17afc <flatcc_builder_table_add_offset@@Base+0xfc>
   17a7c:	uxth	r2, r6
   17a80:	uxth	r5, r5
   17a84:	ldr	r3, [r4, #4]
   17a88:	lsl	r5, r5, #1
   17a8c:	add	r1, r2, #4
   17a90:	strh	r1, [r3, r5]
   17a94:	ldrh	r3, [r4, #8]
   17a98:	cmp	r3, r7
   17a9c:	addls	r7, r7, #1
   17aa0:	strhls	r7, [r4, #8]
   17aa4:	ldr	r3, [r4]
   17aa8:	add	r1, r3, #2
   17aac:	str	r1, [r4]
   17ab0:	strh	r2, [r3]
   17ab4:	ldr	r0, [r4, #16]
   17ab8:	add	r0, r0, r6
   17abc:	pop	{r4, r5, r6, r7, r8, pc}
   17ac0:	ldr	r3, [pc, #84]	; 17b1c <flatcc_builder_table_add_offset@@Base+0x11c>
   17ac4:	ldr	r2, [pc, #84]	; 17b20 <flatcc_builder_table_add_offset@@Base+0x120>
   17ac8:	ldr	r1, [pc, #84]	; 17b24 <flatcc_builder_table_add_offset@@Base+0x124>
   17acc:	ldr	r0, [pc, #84]	; 17b28 <flatcc_builder_table_add_offset@@Base+0x128>
   17ad0:	bl	124d8 <__assert_fail@plt>
   17ad4:	ldr	r3, [pc, #64]	; 17b1c <flatcc_builder_table_add_offset@@Base+0x11c>
   17ad8:	ldr	r2, [pc, #76]	; 17b2c <flatcc_builder_table_add_offset@@Base+0x12c>
   17adc:	ldr	r1, [pc, #64]	; 17b24 <flatcc_builder_table_add_offset@@Base+0x124>
   17ae0:	ldr	r0, [pc, #72]	; 17b30 <flatcc_builder_table_add_offset@@Base+0x130>
   17ae4:	bl	124d8 <__assert_fail@plt>
   17ae8:	ldr	r3, [pc, #44]	; 17b1c <flatcc_builder_table_add_offset@@Base+0x11c>
   17aec:	ldr	r2, [pc, #64]	; 17b34 <flatcc_builder_table_add_offset@@Base+0x134>
   17af0:	ldr	r1, [pc, #44]	; 17b24 <flatcc_builder_table_add_offset@@Base+0x124>
   17af4:	ldr	r0, [pc, #60]	; 17b38 <flatcc_builder_table_add_offset@@Base+0x138>
   17af8:	bl	124d8 <__assert_fail@plt>
   17afc:	ldr	r2, [pc, #56]	; 17b3c <flatcc_builder_table_add_offset@@Base+0x13c>
   17b00:	bl	14058 <main@@Base+0x48>
   17b04:	cmp	r0, #0
   17b08:	beq	17a7c <flatcc_builder_table_add_offset@@Base+0x7c>
   17b0c:	mov	r0, #0
   17b10:	pop	{r4, r5, r6, r7, r8, pc}
   17b14:	strdeq	r7, [r0], -ip
   17b18:			; <UNDEFINED> instruction: 0x9e3779b1
   17b1c:	andeq	sp, r1, r8, lsr #21
   17b20:	andeq	r0, r0, r3, lsl r7
   17b24:	andeq	sp, r1, ip, asr #22
   17b28:	andeq	sp, r1, r0, lsl lr
   17b2c:	andeq	r0, r0, r4, lsl r7
   17b30:	andeq	sp, r1, r8, lsr #29
   17b34:	andeq	r0, r0, fp, lsl r7
   17b38:	andeq	sp, r1, r0, lsr #23
   17b3c:	strdeq	pc, [r0], -ip

00017b40 <flatcc_builder_table_add_union@@Base>:
   17b40:	push	{r4, r5, r6, r7, lr}
   17b44:	sub	sp, sp, #12
   17b48:	mov	r5, r1
   17b4c:	add	r1, sp, #8
   17b50:	stmdb	r1, {r2, r3}
   17b54:	ldr	r3, [r0, #32]
   17b58:	ldrh	r3, [r3, #14]
   17b5c:	cmp	r3, #3
   17b60:	bne	17bd0 <flatcc_builder_table_add_union@@Base+0x90>
   17b64:	mov	r4, r0
   17b68:	ldrb	r7, [sp]
   17b6c:	ldr	r6, [sp, #4]
   17b70:	adds	r3, r6, #0
   17b74:	movne	r3, #1
   17b78:	cmp	r7, #0
   17b7c:	movne	r3, #0
   17b80:	cmp	r3, #0
   17b84:	bne	17be4 <flatcc_builder_table_add_union@@Base+0xa4>
   17b88:	cmp	r6, #0
   17b8c:	beq	17ba4 <flatcc_builder_table_add_union@@Base+0x64>
   17b90:	mov	r1, r5
   17b94:	bl	17a00 <flatcc_builder_table_add_offset@@Base>
   17b98:	cmp	r0, #0
   17b9c:	strne	r6, [r0]
   17ba0:	beq	17bf8 <flatcc_builder_table_add_union@@Base+0xb8>
   17ba4:	mov	r3, #1
   17ba8:	mov	r2, r3
   17bac:	sub	r1, r5, #1
   17bb0:	mov	r0, r4
   17bb4:	bl	17834 <flatcc_builder_table_add@@Base>
   17bb8:	cmp	r0, #0
   17bbc:	beq	17c0c <flatcc_builder_table_add_union@@Base+0xcc>
   17bc0:	strb	r7, [r0]
   17bc4:	mov	r0, #0
   17bc8:	add	sp, sp, #12
   17bcc:	pop	{r4, r5, r6, r7, pc}
   17bd0:	ldr	r3, [pc, #72]	; 17c20 <flatcc_builder_table_add_union@@Base+0xe0>
   17bd4:	ldr	r2, [pc, #72]	; 17c24 <flatcc_builder_table_add_union@@Base+0xe4>
   17bd8:	ldr	r1, [pc, #72]	; 17c28 <flatcc_builder_table_add_union@@Base+0xe8>
   17bdc:	ldr	r0, [pc, #72]	; 17c2c <flatcc_builder_table_add_union@@Base+0xec>
   17be0:	bl	124d8 <__assert_fail@plt>
   17be4:	ldr	r3, [pc, #52]	; 17c20 <flatcc_builder_table_add_union@@Base+0xe0>
   17be8:	ldr	r2, [pc, #64]	; 17c30 <flatcc_builder_table_add_union@@Base+0xf0>
   17bec:	ldr	r1, [pc, #52]	; 17c28 <flatcc_builder_table_add_union@@Base+0xe8>
   17bf0:	ldr	r0, [pc, #60]	; 17c34 <flatcc_builder_table_add_union@@Base+0xf4>
   17bf4:	bl	124d8 <__assert_fail@plt>
   17bf8:	ldr	r3, [pc, #32]	; 17c20 <flatcc_builder_table_add_union@@Base+0xe0>
   17bfc:	ldr	r2, [pc, #52]	; 17c38 <flatcc_builder_table_add_union@@Base+0xf8>
   17c00:	ldr	r1, [pc, #32]	; 17c28 <flatcc_builder_table_add_union@@Base+0xe8>
   17c04:	ldr	r0, [pc, #48]	; 17c3c <flatcc_builder_table_add_union@@Base+0xfc>
   17c08:	bl	124d8 <__assert_fail@plt>
   17c0c:	ldr	r3, [pc, #12]	; 17c20 <flatcc_builder_table_add_union@@Base+0xe0>
   17c10:	ldr	r2, [pc, #40]	; 17c40 <flatcc_builder_table_add_union@@Base+0x100>
   17c14:	ldr	r1, [pc, #12]	; 17c28 <flatcc_builder_table_add_union@@Base+0xe8>
   17c18:	ldr	r0, [pc, #36]	; 17c44 <flatcc_builder_table_add_union@@Base+0x104>
   17c1c:	bl	124d8 <__assert_fail@plt>
   17c20:	andeq	sp, r1, r8, asr #21
   17c24:	andeq	r0, r0, lr, ror #11
   17c28:	andeq	sp, r1, ip, asr #22
   17c2c:	andeq	sp, r1, r0, lsl lr
   17c30:	andeq	r0, r0, pc, ror #11
   17c34:	andeq	sp, r1, ip, ror #29
   17c38:	strdeq	r0, [r0], -r2
   17c3c:	andeq	sp, r1, r0, lsl pc
   17c40:	strdeq	r0, [r0], -r6
   17c44:	andeq	sp, r1, ip, lsl pc

00017c48 <flatcc_builder_table_add_union_vector@@Base>:
   17c48:	push	{r4, r5, r6, r7, lr}
   17c4c:	sub	sp, sp, #12
   17c50:	mov	r7, r1
   17c54:	add	r1, sp, #8
   17c58:	stmdb	r1, {r2, r3}
   17c5c:	ldr	r4, [sp]
   17c60:	ldr	r6, [sp, #4]
   17c64:	ldr	r3, [r0, #32]
   17c68:	ldrh	r3, [r3, #14]
   17c6c:	cmp	r3, #3
   17c70:	bne	17cac <flatcc_builder_table_add_union_vector@@Base+0x64>
   17c74:	mov	r5, r0
   17c78:	clz	r3, r6
   17c7c:	lsr	r3, r3, #5
   17c80:	clz	r2, r4
   17c84:	lsr	r2, r2, #5
   17c88:	cmp	r2, r3
   17c8c:	beq	17cd4 <flatcc_builder_table_add_union_vector@@Base+0x8c>
   17c90:	adds	r4, r4, #0
   17c94:	movne	r4, #1
   17c98:	cmp	r4, r3
   17c9c:	mvnne	r0, #0
   17ca0:	beq	17cc0 <flatcc_builder_table_add_union_vector@@Base+0x78>
   17ca4:	add	sp, sp, #12
   17ca8:	pop	{r4, r5, r6, r7, pc}
   17cac:	ldr	r3, [pc, #136]	; 17d3c <flatcc_builder_table_add_union_vector@@Base+0xf4>
   17cb0:	mov	r2, #1536	; 0x600
   17cb4:	ldr	r1, [pc, #132]	; 17d40 <flatcc_builder_table_add_union_vector@@Base+0xf8>
   17cb8:	ldr	r0, [pc, #132]	; 17d44 <flatcc_builder_table_add_union_vector@@Base+0xfc>
   17cbc:	bl	124d8 <__assert_fail@plt>
   17cc0:	ldr	r3, [pc, #116]	; 17d3c <flatcc_builder_table_add_union_vector@@Base+0xf4>
   17cc4:	ldr	r2, [pc, #124]	; 17d48 <flatcc_builder_table_add_union_vector@@Base+0x100>
   17cc8:	ldr	r1, [pc, #112]	; 17d40 <flatcc_builder_table_add_union_vector@@Base+0xf8>
   17ccc:	ldr	r0, [pc, #120]	; 17d4c <flatcc_builder_table_add_union_vector@@Base+0x104>
   17cd0:	bl	124d8 <__assert_fail@plt>
   17cd4:	cmp	r4, #0
   17cd8:	moveq	r0, #0
   17cdc:	beq	17ca4 <flatcc_builder_table_add_union_vector@@Base+0x5c>
   17ce0:	sub	r1, r7, #1
   17ce4:	mov	r0, r5
   17ce8:	bl	17a00 <flatcc_builder_table_add_offset@@Base>
   17cec:	cmp	r0, #0
   17cf0:	beq	17d28 <flatcc_builder_table_add_union_vector@@Base+0xe0>
   17cf4:	str	r4, [r0]
   17cf8:	mov	r1, r7
   17cfc:	mov	r0, r5
   17d00:	bl	17a00 <flatcc_builder_table_add_offset@@Base>
   17d04:	cmp	r0, #0
   17d08:	strne	r6, [r0]
   17d0c:	movne	r0, #0
   17d10:	bne	17ca4 <flatcc_builder_table_add_union_vector@@Base+0x5c>
   17d14:	ldr	r3, [pc, #32]	; 17d3c <flatcc_builder_table_add_union_vector@@Base+0xf4>
   17d18:	ldr	r2, [pc, #48]	; 17d50 <flatcc_builder_table_add_union_vector@@Base+0x108>
   17d1c:	ldr	r1, [pc, #28]	; 17d40 <flatcc_builder_table_add_union_vector@@Base+0xf8>
   17d20:	ldr	r0, [pc, #44]	; 17d54 <flatcc_builder_table_add_union_vector@@Base+0x10c>
   17d24:	bl	124d8 <__assert_fail@plt>
   17d28:	ldr	r3, [pc, #12]	; 17d3c <flatcc_builder_table_add_union_vector@@Base+0xf4>
   17d2c:	ldr	r2, [pc, #36]	; 17d58 <flatcc_builder_table_add_union_vector@@Base+0x110>
   17d30:	ldr	r1, [pc, #8]	; 17d40 <flatcc_builder_table_add_union_vector@@Base+0xf8>
   17d34:	ldr	r0, [pc, #24]	; 17d54 <flatcc_builder_table_add_union_vector@@Base+0x10c>
   17d38:	bl	124d8 <__assert_fail@plt>
   17d3c:	andeq	sp, r1, r8, ror #21
   17d40:	andeq	sp, r1, ip, asr #22
   17d44:	andeq	sp, r1, r0, lsl lr
   17d48:	andeq	r0, r0, r1, lsl #12
   17d4c:	andeq	sp, r1, r8, lsr #30
   17d50:	andeq	r0, r0, r8, lsl #12
   17d54:	andeq	sp, r1, r0, lsl pc
   17d58:	andeq	r0, r0, r4, lsl #12

00017d5c <flatcc_builder_push_buffer_alignment@@Base>:
   17d5c:	mov	r3, r0
   17d60:	ldrh	r0, [r0, #128]	; 0x80
   17d64:	mov	r2, #4
   17d68:	strh	r2, [r3, #128]	; 0x80
   17d6c:	bx	lr

00017d70 <flatcc_builder_pop_buffer_alignment@@Base>:
   17d70:	ldrh	r3, [r0, #128]	; 0x80
   17d74:	cmp	r3, r1
   17d78:	strhcc	r1, [r0, #128]	; 0x80
   17d7c:	bx	lr

00017d80 <flatcc_builder_get_buffer_alignment@@Base>:
   17d80:	ldrh	r0, [r0, #128]	; 0x80
   17d84:	bx	lr

00017d88 <flatcc_builder_set_vtable_clustering@@Base>:
   17d88:	clz	r1, r1
   17d8c:	lsr	r1, r1, #5
   17d90:	str	r1, [r0, #180]	; 0xb4
   17d94:	bx	lr

00017d98 <flatcc_builder_set_block_align@@Base>:
   17d98:	strh	r1, [r0, #132]	; 0x84
   17d9c:	bx	lr

00017da0 <flatcc_builder_get_level@@Base>:
   17da0:	ldr	r0, [r0, #156]	; 0x9c
   17da4:	bx	lr

00017da8 <flatcc_builder_set_max_level@@Base>:
   17da8:	str	r1, [r0, #176]	; 0xb0
   17dac:	ldr	r3, [r0, #160]	; 0xa0
   17db0:	cmp	r1, r3
   17db4:	strgt	r1, [r0, #160]	; 0xa0
   17db8:	bx	lr

00017dbc <flatcc_builder_get_buffer_size@@Base>:
   17dbc:	ldr	r2, [r0, #140]	; 0x8c
   17dc0:	ldr	r0, [r0, #136]	; 0x88
   17dc4:	sub	r0, r2, r0
   17dc8:	bx	lr

00017dcc <flatcc_builder_get_buffer_start@@Base>:
   17dcc:	ldr	r0, [r0, #136]	; 0x88
   17dd0:	bx	lr

00017dd4 <flatcc_builder_get_buffer_end@@Base>:
   17dd4:	ldr	r0, [r0, #140]	; 0x8c
   17dd8:	bx	lr

00017ddc <flatcc_builder_set_vtable_cache_limit@@Base>:
   17ddc:	str	r1, [r0, #172]	; 0xac
   17de0:	bx	lr

00017de4 <flatcc_builder_set_identifier@@Base>:
   17de4:	ldr	r3, [pc, #16]	; 17dfc <flatcc_builder_set_identifier@@Base+0x18>
   17de8:	cmp	r1, #0
   17dec:	moveq	r1, r3
   17df0:	ldr	r3, [r1]
   17df4:	str	r3, [r0, #168]	; 0xa8
   17df8:	bx	lr
   17dfc:	strdeq	sp, [r1], -ip

00017e00 <flatcc_builder_get_type@@Base>:
   17e00:	ldr	r3, [r0, #32]
   17e04:	cmp	r3, #0
   17e08:	ldrhne	r0, [r3, #14]
   17e0c:	moveq	r0, #0
   17e10:	bx	lr

00017e14 <flatcc_builder_get_type_at@@Base>:
   17e14:	cmp	r1, #0
   17e18:	ble	17e40 <flatcc_builder_get_type_at@@Base+0x2c>
   17e1c:	ldr	r3, [r0, #156]	; 0x9c
   17e20:	cmp	r1, r3
   17e24:	bgt	17e48 <flatcc_builder_get_type_at@@Base+0x34>
   17e28:	sub	r1, r1, r3
   17e2c:	ldr	r3, [r0, #32]
   17e30:	add	r1, r1, r1, lsl #3
   17e34:	add	r1, r3, r1, lsl #2
   17e38:	ldrh	r0, [r1, #14]
   17e3c:	bx	lr
   17e40:	mov	r0, #0
   17e44:	bx	lr
   17e48:	mov	r0, #0
   17e4c:	bx	lr

00017e50 <flatcc_builder_get_direct_buffer@@Base>:
   17e50:	ldr	r3, [r0, #184]	; 0xb8
   17e54:	cmp	r3, #0
   17e58:	beq	17e94 <flatcc_builder_get_direct_buffer@@Base+0x44>
   17e5c:	ldr	r2, [r0, #188]	; 0xbc
   17e60:	ldr	r3, [r0, #192]	; 0xc0
   17e64:	cmp	r2, r3
   17e68:	beq	17e80 <flatcc_builder_get_direct_buffer@@Base+0x30>
   17e6c:	cmp	r1, #0
   17e70:	beq	17ea8 <flatcc_builder_get_direct_buffer@@Base+0x58>
   17e74:	mov	r0, #0
   17e78:	str	r0, [r1]
   17e7c:	bx	lr
   17e80:	cmp	r1, #0
   17e84:	ldrne	r3, [r0, #212]	; 0xd4
   17e88:	strne	r3, [r1]
   17e8c:	ldr	r0, [r0, #196]	; 0xc4
   17e90:	bx	lr
   17e94:	cmp	r1, #0
   17e98:	beq	17eb0 <flatcc_builder_get_direct_buffer@@Base+0x60>
   17e9c:	mov	r0, #0
   17ea0:	str	r0, [r1]
   17ea4:	bx	lr
   17ea8:	mov	r0, #0
   17eac:	bx	lr
   17eb0:	mov	r0, #0
   17eb4:	bx	lr

00017eb8 <flatcc_builder_copy_buffer@@Base>:
   17eb8:	ldr	r3, [r0, #184]	; 0xb8
   17ebc:	cmp	r3, #0
   17ec0:	beq	17eec <flatcc_builder_copy_buffer@@Base+0x34>
   17ec4:	push	{r4, lr}
   17ec8:	add	r0, r0, #188	; 0xbc
   17ecc:	bl	185e8 <flatcc_emitter_copy_buffer@@Base>
   17ed0:	cmp	r0, #0
   17ed4:	popne	{r4, pc}
   17ed8:	ldr	r3, [pc, #20]	; 17ef4 <flatcc_builder_copy_buffer@@Base+0x3c>
   17edc:	ldr	r2, [pc, #20]	; 17ef8 <flatcc_builder_copy_buffer@@Base+0x40>
   17ee0:	ldr	r1, [pc, #20]	; 17efc <flatcc_builder_copy_buffer@@Base+0x44>
   17ee4:	ldr	r0, [pc, #20]	; 17f00 <flatcc_builder_copy_buffer@@Base+0x48>
   17ee8:	bl	124d8 <__assert_fail@plt>
   17eec:	mov	r0, #0
   17ef0:	bx	lr
   17ef4:	andeq	sp, r1, r0, lsl fp
   17ef8:	andeq	r0, r0, r6, lsl #15
   17efc:	andeq	sp, r1, ip, asr #22
   17f00:	andeq	sp, r1, r0, asr pc

00017f04 <flatcc_builder_finalize_buffer@@Base>:
   17f04:	push	{r4, r5, r6, lr}
   17f08:	mov	r5, r0
   17f0c:	ldr	r4, [r0, #140]	; 0x8c
   17f10:	ldr	r3, [r0, #136]	; 0x88
   17f14:	sub	r4, r4, r3
   17f18:	cmp	r1, #0
   17f1c:	strne	r4, [r1]
   17f20:	mov	r0, r4
   17f24:	bl	12460 <malloc@plt>
   17f28:	subs	r6, r0, #0
   17f2c:	beq	17f50 <flatcc_builder_finalize_buffer@@Base+0x4c>
   17f30:	mov	r2, r4
   17f34:	mov	r1, r6
   17f38:	mov	r0, r5
   17f3c:	bl	17eb8 <flatcc_builder_copy_buffer@@Base>
   17f40:	cmp	r0, #0
   17f44:	beq	17f64 <flatcc_builder_finalize_buffer@@Base+0x60>
   17f48:	mov	r0, r6
   17f4c:	pop	{r4, r5, r6, pc}
   17f50:	ldr	r3, [pc, #32]	; 17f78 <flatcc_builder_finalize_buffer@@Base+0x74>
   17f54:	ldr	r2, [pc, #32]	; 17f7c <flatcc_builder_finalize_buffer@@Base+0x78>
   17f58:	ldr	r1, [pc, #32]	; 17f80 <flatcc_builder_finalize_buffer@@Base+0x7c>
   17f5c:	ldr	r0, [pc, #32]	; 17f84 <flatcc_builder_finalize_buffer@@Base+0x80>
   17f60:	bl	124d8 <__assert_fail@plt>
   17f64:	ldr	r3, [pc, #12]	; 17f78 <flatcc_builder_finalize_buffer@@Base+0x74>
   17f68:	ldr	r2, [pc, #24]	; 17f88 <flatcc_builder_finalize_buffer@@Base+0x84>
   17f6c:	ldr	r1, [pc, #12]	; 17f80 <flatcc_builder_finalize_buffer@@Base+0x7c>
   17f70:	ldr	r0, [pc, #12]	; 17f84 <flatcc_builder_finalize_buffer@@Base+0x80>
   17f74:	bl	124d8 <__assert_fail@plt>
   17f78:	andeq	sp, r1, ip, lsr #22
   17f7c:	muleq	r0, r8, r7
   17f80:	andeq	sp, r1, ip, asr #22
   17f84:	andeq	sp, r1, r0, lsr #23
   17f88:	muleq	r0, ip, r7

00017f8c <flatcc_builder_finalize_aligned_buffer@@Base>:
   17f8c:	push	{r4, r5, r6, r7, lr}
   17f90:	sub	sp, sp, #12
   17f94:	mov	r7, r0
   17f98:	ldr	r4, [r0, #140]	; 0x8c
   17f9c:	ldr	r3, [r0, #136]	; 0x88
   17fa0:	sub	r3, r4, r3
   17fa4:	subs	r6, r1, #0
   17fa8:	strne	r3, [r6]
   17fac:	ldrh	r1, [r0, #128]	; 0x80
   17fb0:	sub	r4, r1, #1
   17fb4:	add	r4, r4, r3
   17fb8:	rsb	r3, r1, #0
   17fbc:	and	r4, r4, r3
   17fc0:	add	r0, sp, #8
   17fc4:	mov	r3, #0
   17fc8:	str	r3, [r0, #-4]!
   17fcc:	mov	r2, r4
   17fd0:	cmp	r1, #4
   17fd4:	movcc	r1, #4
   17fd8:	bl	1249c <posix_memalign@plt>
   17fdc:	cmp	r0, #0
   17fe0:	beq	18004 <flatcc_builder_finalize_aligned_buffer@@Base+0x78>
   17fe4:	ldr	r0, [sp, #4]
   17fe8:	cmp	r0, #0
   17fec:	beq	17ff4 <flatcc_builder_finalize_aligned_buffer@@Base+0x68>
   17ff0:	bl	12424 <free@plt>
   17ff4:	cmp	r6, #0
   17ff8:	mov	r5, #0
   17ffc:	strne	r5, [r6]
   18000:	b	18028 <flatcc_builder_finalize_aligned_buffer@@Base+0x9c>
   18004:	ldr	r5, [sp, #4]
   18008:	cmp	r5, #0
   1800c:	beq	17ff4 <flatcc_builder_finalize_aligned_buffer@@Base+0x68>
   18010:	mov	r2, r4
   18014:	mov	r1, r5
   18018:	mov	r0, r7
   1801c:	bl	17eb8 <flatcc_builder_copy_buffer@@Base>
   18020:	cmp	r0, #0
   18024:	beq	18034 <flatcc_builder_finalize_aligned_buffer@@Base+0xa8>
   18028:	mov	r0, r5
   1802c:	add	sp, sp, #12
   18030:	pop	{r4, r5, r6, r7, pc}
   18034:	mov	r0, r5
   18038:	bl	12424 <free@plt>
   1803c:	b	17ff4 <flatcc_builder_finalize_aligned_buffer@@Base+0x68>

00018040 <flatcc_builder_aligned_alloc@@Base>:
   18040:	push	{lr}		; (str lr, [sp, #-4]!)
   18044:	sub	sp, sp, #12
   18048:	add	r3, sp, #8
   1804c:	mov	r2, #0
   18050:	str	r2, [r3, #-4]!
   18054:	mov	r2, r1
   18058:	cmp	r0, #4
   1805c:	movcs	r1, r0
   18060:	movcc	r1, #4
   18064:	mov	r0, r3
   18068:	bl	1249c <posix_memalign@plt>
   1806c:	cmp	r0, #0
   18070:	beq	1808c <flatcc_builder_aligned_alloc@@Base+0x4c>
   18074:	ldr	r0, [sp, #4]
   18078:	cmp	r0, #0
   1807c:	beq	1808c <flatcc_builder_aligned_alloc@@Base+0x4c>
   18080:	bl	12424 <free@plt>
   18084:	mov	r3, #0
   18088:	str	r3, [sp, #4]
   1808c:	ldr	r0, [sp, #4]
   18090:	add	sp, sp, #12
   18094:	pop	{pc}		; (ldr pc, [sp], #4)

00018098 <flatcc_builder_aligned_free@@Base>:
   18098:	push	{r4, lr}
   1809c:	bl	12424 <free@plt>
   180a0:	pop	{r4, pc}

000180a4 <flatcc_builder_get_emit_context@@Base>:
   180a4:	ldr	r0, [r0, #36]	; 0x24
   180a8:	bx	lr

000180ac <flatcc_emitter_recycle_page@@Base>:
   180ac:	ldr	r3, [r0]
   180b0:	cmp	r3, r1
   180b4:	beq	18104 <flatcc_emitter_recycle_page@@Base+0x58>
   180b8:	ldr	r3, [r0, #4]
   180bc:	cmp	r1, r3
   180c0:	beq	1810c <flatcc_emitter_recycle_page@@Base+0x60>
   180c4:	ldr	r3, [r1, #2944]	; 0xb80
   180c8:	ldr	r2, [r1, #2948]	; 0xb84
   180cc:	str	r2, [r3, #2948]	; 0xb84
   180d0:	ldr	r3, [r1, #2948]	; 0xb84
   180d4:	ldr	r2, [r1, #2944]	; 0xb80
   180d8:	str	r2, [r3, #2944]	; 0xb80
   180dc:	ldr	r3, [r0]
   180e0:	ldr	r3, [r3, #2948]	; 0xb84
   180e4:	str	r3, [r1, #2948]	; 0xb84
   180e8:	ldr	r2, [r0]
   180ec:	str	r2, [r1, #2944]	; 0xb80
   180f0:	str	r1, [r3, #2944]	; 0xb80
   180f4:	ldr	r3, [r1, #2944]	; 0xb80
   180f8:	str	r1, [r3, #2948]	; 0xb84
   180fc:	mov	r0, #0
   18100:	bx	lr
   18104:	mvn	r0, #0
   18108:	bx	lr
   1810c:	mvn	r0, #0
   18110:	bx	lr

00018114 <flatcc_emitter_reset@@Base>:
   18114:	ldr	r3, [r0]
   18118:	cmp	r3, #0
   1811c:	bxeq	lr
   18120:	str	r3, [r0, #4]
   18124:	add	r2, r3, #1472	; 0x5c0
   18128:	str	r2, [r0, #8]
   1812c:	str	r2, [r0, #16]
   18130:	mov	r2, #1472	; 0x5c0
   18134:	str	r2, [r0, #12]
   18138:	str	r2, [r0, #20]
   1813c:	sub	r2, r2, #2944	; 0xb80
   18140:	str	r2, [r3, #2952]	; 0xb88
   18144:	ldr	r3, [r0, #32]
   18148:	cmp	r3, #0
   1814c:	ldreq	r3, [r0, #24]
   18150:	streq	r3, [r0, #32]
   18154:	ldr	r3, [r0, #32]
   18158:	add	r2, r3, r3, lsl #1
   1815c:	ldr	r3, [r0, #24]
   18160:	lsr	r3, r3, #2
   18164:	add	r3, r3, r2, lsr #2
   18168:	str	r3, [r0, #32]
   1816c:	mov	r2, #0
   18170:	str	r2, [r0, #24]
   18174:	ldr	r2, [r0, #28]
   18178:	cmp	r2, r3, lsl #1
   1817c:	bxls	lr
   18180:	push	{r4, lr}
   18184:	mov	r4, r0
   18188:	ldr	r3, [r0, #4]
   1818c:	ldr	r0, [r3, #2944]	; 0xb80
   18190:	ldr	r2, [r4]
   18194:	cmp	r0, r2
   18198:	popeq	{r4, pc}
   1819c:	ldr	r2, [r0, #2944]	; 0xb80
   181a0:	str	r2, [r3, #2944]	; 0xb80
   181a4:	ldr	r3, [r0, #2944]	; 0xb80
   181a8:	ldr	r2, [r4, #4]
   181ac:	str	r2, [r3, #2948]	; 0xb84
   181b0:	bl	12424 <free@plt>
   181b4:	ldr	r3, [r4, #28]
   181b8:	sub	r3, r3, #2944	; 0xb80
   181bc:	str	r3, [r4, #28]
   181c0:	ldr	r2, [r4, #32]
   181c4:	cmp	r3, r2, lsl #1
   181c8:	popls	{r4, pc}
   181cc:	ldr	r3, [r4, #4]
   181d0:	ldr	r0, [r3, #2944]	; 0xb80
   181d4:	ldr	r2, [r4]
   181d8:	cmp	r0, r2
   181dc:	bne	1819c <flatcc_emitter_reset@@Base+0x88>
   181e0:	pop	{r4, pc}

000181e4 <flatcc_emitter_clear@@Base>:
   181e4:	ldr	r3, [r0]
   181e8:	cmp	r3, #0
   181ec:	bxeq	lr
   181f0:	push	{r4, r5, r6, lr}
   181f4:	mov	r5, r0
   181f8:	ldr	r2, [r3, #2948]	; 0xb84
   181fc:	mov	r1, #0
   18200:	str	r1, [r2, #2944]	; 0xb80
   18204:	ldr	r4, [r3, #2944]	; 0xb80
   18208:	cmp	r4, r1
   1820c:	bne	1821c <flatcc_emitter_clear@@Base+0x38>
   18210:	mov	r4, r3
   18214:	b	18230 <flatcc_emitter_clear@@Base+0x4c>
   18218:	mov	r4, r3
   1821c:	ldr	r0, [r4, #2948]	; 0xb84
   18220:	bl	12424 <free@plt>
   18224:	ldr	r3, [r4, #2944]	; 0xb80
   18228:	cmp	r3, #0
   1822c:	bne	18218 <flatcc_emitter_clear@@Base+0x34>
   18230:	mov	r0, r4
   18234:	bl	12424 <free@plt>
   18238:	mov	r2, #36	; 0x24
   1823c:	mov	r1, #0
   18240:	mov	r0, r5
   18244:	bl	124a8 <memset@plt>
   18248:	pop	{r4, r5, r6, pc}

0001824c <flatcc_emitter@@Base>:
   1824c:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18250:	mov	r4, r0
   18254:	ldr	ip, [sp, #40]	; 0x28
   18258:	ldr	r0, [r0, #24]
   1825c:	add	r0, r0, ip
   18260:	str	r0, [r4, #24]
   18264:	cmp	r3, #0
   18268:	blt	18294 <flatcc_emitter@@Base+0x48>
   1826c:	ldr	r3, [r4, #20]
   18270:	cmp	ip, r3
   18274:	bls	18380 <flatcc_emitter@@Base+0x134>
   18278:	cmp	r2, #0
   1827c:	addne	r7, r1, #8
   18280:	movne	sl, r2
   18284:	movne	fp, #2944	; 0xb80
   18288:	bne	18534 <flatcc_emitter@@Base+0x2e8>
   1828c:	mov	r0, r2
   18290:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18294:	ldr	r3, [r4, #12]
   18298:	cmp	ip, r3
   1829c:	bhi	182c0 <flatcc_emitter@@Base+0x74>
   182a0:	ldr	r5, [r4, #8]
   182a4:	sub	r5, r5, ip
   182a8:	str	r5, [r4, #8]
   182ac:	sub	r3, r3, ip
   182b0:	str	r3, [r4, #12]
   182b4:	b	18394 <flatcc_emitter@@Base+0x148>
   182b8:	mov	r0, r2
   182bc:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   182c0:	add	r7, r1, r2, lsl #3
   182c4:	mov	r8, r2
   182c8:	mov	fp, #1472	; 0x5c0
   182cc:	mov	sl, #2944	; 0xb80
   182d0:	b	184b0 <flatcc_emitter@@Base+0x264>
   182d4:	mov	r2, r5
   182d8:	rsb	r1, r2, #0
   182dc:	ldr	r0, [r4, #8]
   182e0:	add	r0, r0, r1
   182e4:	str	r0, [r4, #8]
   182e8:	sub	r3, r3, r2
   182ec:	str	r3, [r4, #12]
   182f0:	add	r6, r6, r1
   182f4:	sub	r5, r5, r2
   182f8:	mov	r1, r6
   182fc:	bl	12430 <memcpy@plt>
   18300:	cmp	r5, #0
   18304:	beq	184a8 <flatcc_emitter@@Base+0x25c>
   18308:	ldr	r3, [r4, #12]
   1830c:	cmp	r3, r5
   18310:	bcs	182d4 <flatcc_emitter@@Base+0x88>
   18314:	cmp	r3, #0
   18318:	movne	r2, r3
   1831c:	bne	182d8 <flatcc_emitter@@Base+0x8c>
   18320:	ldr	r9, [r4]
   18324:	cmp	r9, #0
   18328:	beq	185c8 <flatcc_emitter@@Base+0x37c>
   1832c:	ldr	r2, [r9, #2948]	; 0xb84
   18330:	ldr	r3, [r4, #4]
   18334:	cmp	r2, r3
   18338:	beq	18550 <flatcc_emitter@@Base+0x304>
   1833c:	ldr	r3, [r9, #2952]	; 0xb88
   18340:	sub	r3, r3, #2944	; 0xb80
   18344:	str	r3, [r2, #2952]	; 0xb88
   18348:	ldr	r3, [r4]
   1834c:	ldr	r3, [r3, #2948]	; 0xb84
   18350:	str	r3, [r4]
   18354:	ldr	r3, [r4]
   18358:	add	r2, r3, #2944	; 0xb80
   1835c:	str	r2, [r4, #8]
   18360:	str	sl, [r4, #12]
   18364:	ldr	r2, [r3, #2944]	; 0xb80
   18368:	ldr	r2, [r2, #2952]	; 0xb88
   1836c:	sub	r2, r2, #2944	; 0xb80
   18370:	str	r2, [r3, #2952]	; 0xb88
   18374:	b	18300 <flatcc_emitter@@Base+0xb4>
   18378:	mov	r0, #0
   1837c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18380:	ldr	r5, [r4, #16]
   18384:	add	r0, r5, ip
   18388:	str	r0, [r4, #16]
   1838c:	sub	r3, r3, ip
   18390:	str	r3, [r4, #20]
   18394:	cmp	r2, #0
   18398:	addne	r4, r1, #8
   1839c:	movne	r8, r2
   183a0:	beq	182b8 <flatcc_emitter@@Base+0x6c>
   183a4:	ldr	r2, [r4, #-4]
   183a8:	ldr	r1, [r4, #-8]
   183ac:	mov	r0, r5
   183b0:	bl	12430 <memcpy@plt>
   183b4:	ldr	r3, [r4, #-4]
   183b8:	add	r5, r5, r3
   183bc:	add	r4, r4, #8
   183c0:	subs	r8, r8, #1
   183c4:	bne	183a4 <flatcc_emitter@@Base+0x158>
   183c8:	mov	r0, #0
   183cc:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   183d0:	ldr	r0, [pc, #520]	; 185e0 <flatcc_emitter@@Base+0x394>
   183d4:	bl	12460 <malloc@plt>
   183d8:	cmp	r0, #0
   183dc:	beq	18498 <flatcc_emitter@@Base+0x24c>
   183e0:	ldr	r3, [r4, #28]
   183e4:	add	r3, r3, #2944	; 0xb80
   183e8:	str	r3, [r4, #28]
   183ec:	str	r5, [r0, #2948]	; 0xb84
   183f0:	str	r9, [r0, #2944]	; 0xb80
   183f4:	str	r0, [r9, #2948]	; 0xb84
   183f8:	ldr	r3, [r4, #4]
   183fc:	str	r0, [r3, #2944]	; 0xb80
   18400:	str	r0, [r4, #4]
   18404:	b	18478 <flatcc_emitter@@Base+0x22c>
   18408:	mov	r5, r6
   1840c:	mov	r2, r5
   18410:	mov	r1, r8
   18414:	ldr	r0, [r4, #16]
   18418:	bl	12430 <memcpy@plt>
   1841c:	sub	r6, r6, r5
   18420:	add	r8, r8, r5
   18424:	ldr	r3, [r4, #16]
   18428:	add	r3, r3, r5
   1842c:	str	r3, [r4, #16]
   18430:	ldr	r3, [r4, #20]
   18434:	sub	r5, r3, r5
   18438:	str	r5, [r4, #20]
   1843c:	cmp	r6, #0
   18440:	beq	18528 <flatcc_emitter@@Base+0x2dc>
   18444:	ldr	r5, [r4, #20]
   18448:	cmp	r5, r6
   1844c:	bcs	18408 <flatcc_emitter@@Base+0x1bc>
   18450:	cmp	r5, #0
   18454:	bne	1840c <flatcc_emitter@@Base+0x1c0>
   18458:	ldr	r5, [r4, #4]
   1845c:	cmp	r5, #0
   18460:	beq	18510 <flatcc_emitter@@Base+0x2c4>
   18464:	ldr	r9, [r5, #2944]	; 0xb80
   18468:	ldr	r3, [r4]
   1846c:	cmp	r9, r3
   18470:	strne	r9, [r4, #4]
   18474:	beq	183d0 <flatcc_emitter@@Base+0x184>
   18478:	ldr	r3, [r4, #4]
   1847c:	str	r3, [r4, #16]
   18480:	str	fp, [r4, #20]
   18484:	ldr	r2, [r3, #2948]	; 0xb84
   18488:	ldr	r2, [r2, #2952]	; 0xb88
   1848c:	add	r2, r2, #2944	; 0xb80
   18490:	str	r2, [r3, #2952]	; 0xb88
   18494:	b	1843c <flatcc_emitter@@Base+0x1f0>
   18498:	mvn	r0, #0
   1849c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   184a0:	mvn	r0, #0
   184a4:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   184a8:	sub	r7, r7, #8
   184ac:	sub	r8, r8, #1
   184b0:	cmp	r8, #0
   184b4:	beq	18378 <flatcc_emitter@@Base+0x12c>
   184b8:	ldr	r5, [r7, #-4]
   184bc:	ldr	r6, [r7, #-8]
   184c0:	add	r6, r6, r5
   184c4:	cmp	r5, #0
   184c8:	bne	18308 <flatcc_emitter@@Base+0xbc>
   184cc:	b	184a8 <flatcc_emitter@@Base+0x25c>
   184d0:	ldr	r3, [r4, #28]
   184d4:	add	r3, r3, #2944	; 0xb80
   184d8:	str	r3, [r4, #28]
   184dc:	str	r0, [r4]
   184e0:	str	r0, [r4, #4]
   184e4:	str	r0, [r0, #2944]	; 0xb80
   184e8:	str	r0, [r0, #2948]	; 0xb84
   184ec:	add	r3, r0, #1472	; 0x5c0
   184f0:	str	r3, [r4, #8]
   184f4:	str	r3, [r4, #16]
   184f8:	mov	r3, #1472	; 0x5c0
   184fc:	str	r3, [r4, #12]
   18500:	str	r3, [r4, #20]
   18504:	sub	r3, r3, #2944	; 0xb80
   18508:	str	r3, [r0, #2952]	; 0xb88
   1850c:	b	1843c <flatcc_emitter@@Base+0x1f0>
   18510:	ldr	r0, [pc, #200]	; 185e0 <flatcc_emitter@@Base+0x394>
   18514:	bl	12460 <malloc@plt>
   18518:	cmp	r0, #0
   1851c:	bne	184d0 <flatcc_emitter@@Base+0x284>
   18520:	mvn	r0, #0
   18524:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18528:	add	r7, r7, #8
   1852c:	subs	sl, sl, #1
   18530:	beq	18548 <flatcc_emitter@@Base+0x2fc>
   18534:	ldr	r8, [r7, #-8]
   18538:	ldr	r6, [r7, #-4]
   1853c:	cmp	r6, #0
   18540:	bne	18444 <flatcc_emitter@@Base+0x1f8>
   18544:	b	18528 <flatcc_emitter@@Base+0x2dc>
   18548:	mov	r0, #0
   1854c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18550:	ldr	r0, [pc, #136]	; 185e0 <flatcc_emitter@@Base+0x394>
   18554:	bl	12460 <malloc@plt>
   18558:	cmp	r0, #0
   1855c:	beq	184a0 <flatcc_emitter@@Base+0x254>
   18560:	ldr	r3, [r4, #28]
   18564:	add	r3, r3, #2944	; 0xb80
   18568:	str	r3, [r4, #28]
   1856c:	ldr	r3, [r4, #4]
   18570:	str	r3, [r0, #2948]	; 0xb84
   18574:	str	r9, [r0, #2944]	; 0xb80
   18578:	str	r0, [r9, #2948]	; 0xb84
   1857c:	ldr	r3, [r4, #4]
   18580:	str	r0, [r3, #2944]	; 0xb80
   18584:	str	r0, [r4]
   18588:	b	18354 <flatcc_emitter@@Base+0x108>
   1858c:	ldr	r3, [r4, #28]
   18590:	add	r3, r3, #2944	; 0xb80
   18594:	str	r3, [r4, #28]
   18598:	str	r0, [r4]
   1859c:	str	r0, [r4, #4]
   185a0:	str	r0, [r0, #2944]	; 0xb80
   185a4:	str	r0, [r0, #2948]	; 0xb84
   185a8:	add	r3, r0, #1472	; 0x5c0
   185ac:	str	r3, [r4, #8]
   185b0:	str	r3, [r4, #16]
   185b4:	str	fp, [r4, #12]
   185b8:	str	fp, [r4, #20]
   185bc:	ldr	r3, [pc, #32]	; 185e4 <flatcc_emitter@@Base+0x398>
   185c0:	str	r3, [r0, #2952]	; 0xb88
   185c4:	b	18300 <flatcc_emitter@@Base+0xb4>
   185c8:	ldr	r0, [pc, #16]	; 185e0 <flatcc_emitter@@Base+0x394>
   185cc:	bl	12460 <malloc@plt>
   185d0:	cmp	r0, #0
   185d4:	bne	1858c <flatcc_emitter@@Base+0x340>
   185d8:	mvn	r0, #0
   185dc:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   185e0:	andeq	r0, r0, ip, lsl #23
   185e4:			; <UNDEFINED> instruction: 0xfffffa40

000185e8 <flatcc_emitter_copy_buffer@@Base>:
   185e8:	push	{r4, r5, r6, r7, r8, lr}
   185ec:	mov	r5, r1
   185f0:	ldr	r1, [r0, #24]
   185f4:	cmp	r1, r2
   185f8:	bhi	1869c <flatcc_emitter_copy_buffer@@Base+0xb4>
   185fc:	ldr	r3, [r0]
   18600:	cmp	r3, #0
   18604:	beq	186a4 <flatcc_emitter_copy_buffer@@Base+0xbc>
   18608:	mov	r6, r0
   1860c:	ldr	r2, [r0, #4]
   18610:	cmp	r3, r2
   18614:	beq	18688 <flatcc_emitter_copy_buffer@@Base+0xa0>
   18618:	ldr	r4, [r0, #12]
   1861c:	rsb	r4, r4, #2944	; 0xb80
   18620:	mov	r2, r4
   18624:	ldr	r1, [r0, #8]
   18628:	mov	r0, r5
   1862c:	bl	12430 <memcpy@plt>
   18630:	add	r5, r5, r4
   18634:	ldr	r3, [r6]
   18638:	ldr	r4, [r3, #2944]	; 0xb80
   1863c:	ldr	r1, [r6, #4]
   18640:	cmp	r4, r1
   18644:	beq	18670 <flatcc_emitter_copy_buffer@@Base+0x88>
   18648:	mov	r7, #2944	; 0xb80
   1864c:	mov	r2, r7
   18650:	mov	r1, r4
   18654:	mov	r0, r5
   18658:	bl	12430 <memcpy@plt>
   1865c:	add	r5, r5, #2944	; 0xb80
   18660:	ldr	r4, [r4, #2944]	; 0xb80
   18664:	ldr	r1, [r6, #4]
   18668:	cmp	r1, r4
   1866c:	bne	1864c <flatcc_emitter_copy_buffer@@Base+0x64>
   18670:	ldr	r2, [r6, #20]
   18674:	rsb	r2, r2, #2944	; 0xb80
   18678:	mov	r0, r5
   1867c:	bl	12430 <memcpy@plt>
   18680:	mov	r0, r5
   18684:	pop	{r4, r5, r6, r7, r8, pc}
   18688:	mov	r2, r1
   1868c:	ldr	r1, [r0, #8]
   18690:	mov	r0, r5
   18694:	bl	12430 <memcpy@plt>
   18698:	b	18680 <flatcc_emitter_copy_buffer@@Base+0x98>
   1869c:	mov	r5, #0
   186a0:	b	18680 <flatcc_emitter_copy_buffer@@Base+0x98>
   186a4:	mov	r5, #0
   186a8:	b	18680 <flatcc_emitter_copy_buffer@@Base+0x98>
   186ac:	andeq	r0, r0, r0
   186b0:	sub	sp, sp, #8
   186b4:	push	{r4, r5, r6, lr}
   186b8:	add	r1, sp, #12
   186bc:	stmib	r1, {r2, r3}
   186c0:	ldrd	r2, [sp, #16]
   186c4:	ldr	r6, [sp, #24]
   186c8:	orrs	r1, r2, r3
   186cc:	beq	1877c <flatcc_emitter_copy_buffer@@Base+0x194>
   186d0:	mov	lr, r0
   186d4:	mov	r0, #0
   186d8:	ldr	r1, [pc, #176]	; 18790 <flatcc_emitter_copy_buffer@@Base+0x1a8>
   186dc:	and	r0, r0, r2
   186e0:	and	r1, r1, r3
   186e4:	orrs	r1, r0, r1
   186e8:	subeq	ip, r6, #10
   186ec:	bne	18724 <flatcc_emitter_copy_buffer@@Base+0x13c>
   186f0:	lsl	r1, r3, #10
   186f4:	orr	r1, r1, r2, lsr #22
   186f8:	lsl	r0, r2, #10
   186fc:	mov	r2, r0
   18700:	mov	r3, r1
   18704:	mov	r6, ip
   18708:	mov	r0, #0
   1870c:	ldr	r1, [pc, #124]	; 18790 <flatcc_emitter_copy_buffer@@Base+0x1a8>
   18710:	and	r0, r0, r2
   18714:	and	r1, r1, r3
   18718:	sub	ip, ip, #10
   1871c:	orrs	r1, r0, r1
   18720:	beq	186f0 <flatcc_emitter_copy_buffer@@Base+0x108>
   18724:	cmp	r2, #0
   18728:	sbcs	r1, r3, #0
   1872c:	blt	18758 <flatcc_emitter_copy_buffer@@Base+0x170>
   18730:	sub	r1, r6, #1
   18734:	adds	r4, r2, r2
   18738:	adc	r5, r3, r3
   1873c:	mov	r2, r4
   18740:	mov	r3, r5
   18744:	mov	r6, r1
   18748:	sub	r1, r1, #1
   1874c:	cmp	r4, #0
   18750:	sbcs	r0, r5, #0
   18754:	bge	18734 <flatcc_emitter_copy_buffer@@Base+0x14c>
   18758:	strd	r2, [sp, #16]
   1875c:	str	r6, [sp, #24]
   18760:	add	r3, sp, #12
   18764:	ldmib	r3, {r0, r1, r2, r3}
   18768:	stm	lr, {r0, r1, r2, r3}
   1876c:	mov	r0, lr
   18770:	pop	{r4, r5, r6, lr}
   18774:	add	sp, sp, #8
   18778:	bx	lr
   1877c:	ldr	r3, [pc, #16]	; 18794 <flatcc_emitter_copy_buffer@@Base+0x1ac>
   18780:	mov	r2, #260	; 0x104
   18784:	ldr	r1, [pc, #12]	; 18798 <flatcc_emitter_copy_buffer@@Base+0x1b0>
   18788:	ldr	r0, [pc, #12]	; 1879c <flatcc_emitter_copy_buffer@@Base+0x1b4>
   1878c:	bl	124d8 <__assert_fail@plt>
   18790:			; <UNDEFINED> instruction: 0xffc00000
   18794:	andeq	sp, r1, r8, asr pc
   18798:	ldrdeq	lr, [r1], -r8
   1879c:	andeq	lr, r1, r0, lsr r8

000187a0 <grisu3_diy_fp_encode_double@@Base>:
   187a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   187a4:	sub	sp, sp, #76	; 0x4c
   187a8:	mov	r4, r3
   187ac:	ldr	sl, [sp, #112]	; 0x70
   187b0:	cmp	sl, #0
   187b4:	movne	sl, #4
   187b8:	sub	r5, r2, r3
   187bc:	strd	r0, [sp, #56]	; 0x38
   187c0:	mov	r3, #0
   187c4:	str	r3, [sp, #64]	; 0x40
   187c8:	add	ip, sp, #56	; 0x38
   187cc:	add	r3, sp, #72	; 0x48
   187d0:	ldmdb	r3, {r0, r1}
   187d4:	stm	sp, {r0, r1}
   187d8:	ldm	ip, {r2, r3}
   187dc:	mov	r0, ip
   187e0:	bl	186b0 <flatcc_emitter_copy_buffer@@Base+0xc8>
   187e4:	ldrd	r6, [sp, #56]	; 0x38
   187e8:	ldr	lr, [sp, #64]	; 0x40
   187ec:	rsb	r0, lr, #0
   187f0:	lsl	r3, sl, r0
   187f4:	str	r3, [sp, #32]
   187f8:	cmn	r5, #348	; 0x15c
   187fc:	blt	18bbc <grisu3_diy_fp_encode_double@@Base+0x41c>
   18800:	cmp	r5, #348	; 0x15c
   18804:	bge	18bd0 <grisu3_diy_fp_encode_double@@Base+0x430>
   18808:	add	r3, r5, #348	; 0x15c
   1880c:	add	r2, r3, #7
   18810:	cmp	r3, #0
   18814:	movlt	r3, r2
   18818:	asr	r3, r3, #3
   1881c:	ldr	r2, [pc, #1068]	; 18c50 <grisu3_diy_fp_encode_double@@Base+0x4b0>
   18820:	add	r3, r2, r3, lsl #4
   18824:	ldrsh	ip, [r3, #66]	; 0x42
   18828:	ldrd	r0, [r3, #56]	; 0x38
   1882c:	strd	r0, [sp, #24]
   18830:	ldrsh	r3, [r3, #64]	; 0x40
   18834:	str	r3, [sp, #36]	; 0x24
   18838:	cmp	r5, ip
   1883c:	blt	18be4 <grisu3_diy_fp_encode_double@@Base+0x444>
   18840:	add	r3, ip, #8
   18844:	cmp	r5, r3
   18848:	bge	18bf8 <grisu3_diy_fp_encode_double@@Base+0x458>
   1884c:	cmp	r5, ip
   18850:	beq	18934 <grisu3_diy_fp_encode_double@@Base+0x194>
   18854:	sub	ip, r5, ip
   18858:	sub	ip, ip, #1
   1885c:	cmp	ip, #6
   18860:	bhi	18c0c <grisu3_diy_fp_encode_double@@Base+0x46c>
   18864:	ldr	r2, [pc, #1000]	; 18c54 <grisu3_diy_fp_encode_double@@Base+0x4b4>
   18868:	lsl	r3, ip, #4
   1886c:	add	r5, r2, r3
   18870:	ldrd	r8, [r2, r3]
   18874:	mov	r3, #0
   18878:	mov	r0, r8
   1887c:	mov	r1, #0
   18880:	umull	sl, fp, r6, r9
   18884:	strd	sl, [sp, #16]
   18888:	mla	sl, r9, r3, fp
   1888c:	str	sl, [sp, #20]
   18890:	umull	sl, fp, r7, r8
   18894:	strd	sl, [sp, #8]
   18898:	mla	sl, r7, r1, fp
   1889c:	str	sl, [sp, #12]
   188a0:	mul	r1, r6, r1
   188a4:	mla	r3, r8, r3, r1
   188a8:	umull	r0, r1, r6, r0
   188ac:	add	r1, r3, r1
   188b0:	mov	r2, r1
   188b4:	mov	r3, #0
   188b8:	ldr	r1, [sp, #8]
   188bc:	adds	r2, r2, r1
   188c0:	adc	r3, r3, #0
   188c4:	adds	r2, r2, #-2147483648	; 0x80000000
   188c8:	adc	r3, r3, #0
   188cc:	ldrd	sl, [sp, #16]
   188d0:	adds	r2, r2, sl
   188d4:	adc	r3, r3, #0
   188d8:	mov	r0, r3
   188dc:	mov	r1, #0
   188e0:	ldr	r3, [sp, #12]
   188e4:	str	r3, [sp, #16]
   188e8:	str	r1, [sp, #20]
   188ec:	mov	r2, fp
   188f0:	ldrd	sl, [sp, #16]
   188f4:	adds	sl, sl, r2
   188f8:	adc	fp, fp, r1
   188fc:	mov	r2, sl
   18900:	mov	r3, fp
   18904:	umlal	r2, r3, r9, r7
   18908:	adds	r6, r0, r2
   1890c:	adc	r7, r1, r3
   18910:	ldr	r3, [r5, #8]
   18914:	add	lr, lr, r3
   18918:	add	lr, lr, #64	; 0x40
   1891c:	add	r4, r4, #1
   18920:	add	ip, r4, ip
   18924:	cmp	ip, #19
   18928:	ldrgt	r3, [sp, #32]
   1892c:	addgt	r3, r3, #4
   18930:	strgt	r3, [sp, #32]
   18934:	mov	ip, #0
   18938:	mov	r2, r6
   1893c:	mov	r3, #0
   18940:	ldrd	sl, [sp, #24]
   18944:	mov	r8, sl
   18948:	mov	r9, #0
   1894c:	umull	r0, r1, r6, fp
   18950:	mla	r1, fp, r3, r1
   18954:	umull	r4, r5, r7, sl
   18958:	mla	r5, r7, r9, r5
   1895c:	mul	r6, r6, r9
   18960:	mla	r3, sl, r3, r6
   18964:	umull	r8, r9, r2, r8
   18968:	add	r9, r3, r9
   1896c:	adds	r2, r9, r4
   18970:	adc	r3, ip, #0
   18974:	adds	r2, r2, #-2147483648	; 0x80000000
   18978:	adc	r3, r3, #0
   1897c:	adds	r2, r2, r0
   18980:	adc	r3, r3, #0
   18984:	mov	r8, r3
   18988:	mov	r2, r5
   1898c:	adds	r2, r2, r1
   18990:	adc	r3, ip, ip
   18994:	umlal	r2, r3, fp, r7
   18998:	adds	r8, r8, r2
   1899c:	adc	r9, ip, r3
   189a0:	ldr	r3, [sp, #36]	; 0x24
   189a4:	add	fp, lr, r3
   189a8:	add	fp, fp, #64	; 0x40
   189ac:	ldr	r3, [sp, #32]
   189b0:	cmp	r3, ip
   189b4:	movne	r0, #9
   189b8:	moveq	r0, #8
   189bc:	add	sl, r3, r0
   189c0:	strd	r8, [sp, #56]	; 0x38
   189c4:	str	fp, [sp, #64]	; 0x40
   189c8:	add	r5, sp, #40	; 0x28
   189cc:	add	r3, sp, #72	; 0x48
   189d0:	ldmdb	r3, {r0, r1}
   189d4:	stm	sp, {r0, r1}
   189d8:	add	r4, sp, #56	; 0x38
   189dc:	ldm	r4, {r2, r3}
   189e0:	mov	r0, r5
   189e4:	bl	186b0 <flatcc_emitter_copy_buffer@@Base+0xc8>
   189e8:	ldm	r5, {r0, r1, r2, r3}
   189ec:	stm	r4, {r0, r1, r2, r3}
   189f0:	ldrd	r4, [sp, #56]	; 0x38
   189f4:	ldr	r1, [sp, #64]	; 0x40
   189f8:	sub	r0, fp, r1
   189fc:	lsl	r0, sl, r0
   18a00:	add	r3, r1, #64	; 0x40
   18a04:	ldr	r2, [pc, #588]	; 18c58 <grisu3_diy_fp_encode_double@@Base+0x4b8>
   18a08:	cmp	r3, r2
   18a0c:	movge	r8, #0
   18a10:	bge	18a6c <grisu3_diy_fp_encode_double@@Base+0x2cc>
   18a14:	mvn	r2, #1072	; 0x430
   18a18:	cmp	r3, r2
   18a1c:	blt	18c20 <grisu3_diy_fp_encode_double@@Base+0x480>
   18a20:	add	r8, r1, #1136	; 0x470
   18a24:	add	r8, r8, #2
   18a28:	rsb	r3, r8, #67	; 0x43
   18a2c:	cmp	r3, #63	; 0x3f
   18a30:	rsble	r8, r8, #64	; 0x40
   18a34:	ble	18a6c <grisu3_diy_fp_encode_double@@Base+0x2cc>
   18a38:	rsb	r3, r8, #2
   18a3c:	rsb	lr, r3, #32
   18a40:	sub	ip, r3, #32
   18a44:	lsr	r2, r4, r3
   18a48:	orr	r2, r2, r5, lsl lr
   18a4c:	orr	r2, r2, r5, lsr ip
   18a50:	lsr	ip, r5, r3
   18a54:	mov	r4, r2
   18a58:	mov	r5, ip
   18a5c:	add	r1, r1, r3
   18a60:	asr	r0, r0, r3
   18a64:	add	r0, r0, #9
   18a68:	mov	r8, #62	; 0x3e
   18a6c:	rsb	lr, r8, #32
   18a70:	sub	ip, r8, #32
   18a74:	lsr	r2, r4, r8
   18a78:	orr	r2, r2, r5, lsl lr
   18a7c:	orr	r2, r2, r5, lsr ip
   18a80:	lsr	r3, r5, r8
   18a84:	add	r1, r8, r1
   18a88:	sub	lr, r8, #1
   18a8c:	mov	ip, #1
   18a90:	lsl	r6, ip, lr
   18a94:	and	r4, r4, r6
   18a98:	lsl	ip, r4, #3
   18a9c:	mov	r4, #8
   18aa0:	lsl	lr, r4, lr
   18aa4:	add	r6, r0, lr
   18aa8:	cmp	r8, r6
   18aac:	blt	18ad4 <grisu3_diy_fp_encode_double@@Base+0x334>
   18ab0:	adds	r2, r2, #1
   18ab4:	adc	r3, r3, #0
   18ab8:	mov	r4, #0
   18abc:	and	r5, r3, #2097152	; 0x200000
   18ac0:	orrs	r4, r4, r5
   18ac4:	beq	18ad4 <grisu3_diy_fp_encode_double@@Base+0x334>
   18ac8:	lsrs	r3, r3, #1
   18acc:	rrx	r2, r2
   18ad0:	add	r1, r1, #1
   18ad4:	mvn	r4, #0
   18ad8:	ldr	r5, [pc, #380]	; 18c5c <grisu3_diy_fp_encode_double@@Base+0x4bc>
   18adc:	cmp	r3, r5
   18ae0:	cmpeq	r2, r4
   18ae4:	bls	18b00 <grisu3_diy_fp_encode_double@@Base+0x360>
   18ae8:	lsrs	r3, r3, #1
   18aec:	rrx	r2, r2
   18af0:	add	r1, r1, #1
   18af4:	cmp	r3, r5
   18af8:	cmpeq	r2, r4
   18afc:	bhi	18ae8 <grisu3_diy_fp_encode_double@@Base+0x348>
   18b00:	ldr	r4, [pc, #344]	; 18c60 <grisu3_diy_fp_encode_double@@Base+0x4c0>
   18b04:	cmp	r1, r4
   18b08:	movlt	r2, #0
   18b0c:	movlt	r3, #0
   18b10:	blt	18b90 <grisu3_diy_fp_encode_double@@Base+0x3f0>
   18b14:	mvn	r4, #1072	; 0x430
   18b18:	cmp	r1, r4
   18b1c:	blt	18c28 <grisu3_diy_fp_encode_double@@Base+0x488>
   18b20:	mov	r4, #0
   18b24:	and	r5, r3, #1048576	; 0x100000
   18b28:	orrs	r4, r4, r5
   18b2c:	bne	18b68 <grisu3_diy_fp_encode_double@@Base+0x3c8>
   18b30:	sub	r7, r1, #1
   18b34:	ldr	r8, [pc, #292]	; 18c60 <grisu3_diy_fp_encode_double@@Base+0x4c0>
   18b38:	adds	r4, r2, r2
   18b3c:	adc	r5, r3, r3
   18b40:	mov	r2, r4
   18b44:	mov	r3, r5
   18b48:	mov	r1, r7
   18b4c:	cmp	r7, r8
   18b50:	beq	18c34 <grisu3_diy_fp_encode_double@@Base+0x494>
   18b54:	mov	r4, #0
   18b58:	and	r5, r5, #1048576	; 0x100000
   18b5c:	sub	r7, r7, #1
   18b60:	orrs	r4, r4, r5
   18b64:	beq	18b38 <grisu3_diy_fp_encode_double@@Base+0x398>
   18b68:	add	r8, r1, #1072	; 0x430
   18b6c:	add	r8, r8, #3
   18b70:	mvn	r4, #0
   18b74:	ldr	r5, [pc, #232]	; 18c64 <grisu3_diy_fp_encode_double@@Base+0x4c4>
   18b78:	and	r2, r2, r4
   18b7c:	and	r3, r3, r5
   18b80:	mov	r4, #0
   18b84:	lsl	r5, r8, #20
   18b88:	orr	r2, r2, r4
   18b8c:	orr	r3, r3, r5
   18b90:	ldr	r1, [sp, #116]	; 0x74
   18b94:	strd	r2, [r1]
   18b98:	sub	r0, lr, r0
   18b9c:	cmp	ip, r6
   18ba0:	movlt	r6, #0
   18ba4:	movge	r6, #1
   18ba8:	cmp	ip, r0
   18bac:	movgt	r0, r6
   18bb0:	orrle	r0, r6, #1
   18bb4:	add	sp, sp, #76	; 0x4c
   18bb8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18bbc:	ldr	r3, [pc, #164]	; 18c68 <grisu3_diy_fp_encode_double@@Base+0x4c8>
   18bc0:	mov	r2, #80	; 0x50
   18bc4:	ldr	r1, [pc, #160]	; 18c6c <grisu3_diy_fp_encode_double@@Base+0x4cc>
   18bc8:	ldr	r0, [pc, #160]	; 18c70 <grisu3_diy_fp_encode_double@@Base+0x4d0>
   18bcc:	bl	124d8 <__assert_fail@plt>
   18bd0:	ldr	r3, [pc, #144]	; 18c68 <grisu3_diy_fp_encode_double@@Base+0x4c8>
   18bd4:	mov	r2, #81	; 0x51
   18bd8:	ldr	r1, [pc, #140]	; 18c6c <grisu3_diy_fp_encode_double@@Base+0x4cc>
   18bdc:	ldr	r0, [pc, #144]	; 18c74 <grisu3_diy_fp_encode_double@@Base+0x4d4>
   18be0:	bl	124d8 <__assert_fail@plt>
   18be4:	add	r3, r2, #24
   18be8:	mov	r2, #88	; 0x58
   18bec:	ldr	r1, [pc, #120]	; 18c6c <grisu3_diy_fp_encode_double@@Base+0x4cc>
   18bf0:	ldr	r0, [pc, #128]	; 18c78 <grisu3_diy_fp_encode_double@@Base+0x4d8>
   18bf4:	bl	124d8 <__assert_fail@plt>
   18bf8:	ldr	r3, [pc, #104]	; 18c68 <grisu3_diy_fp_encode_double@@Base+0x4c8>
   18bfc:	mov	r2, #89	; 0x59
   18c00:	ldr	r1, [pc, #100]	; 18c6c <grisu3_diy_fp_encode_double@@Base+0x4cc>
   18c04:	ldr	r0, [pc, #112]	; 18c7c <grisu3_diy_fp_encode_double@@Base+0x4dc>
   18c08:	bl	124d8 <__assert_fail@plt>
   18c0c:	ldr	r3, [pc, #108]	; 18c80 <grisu3_diy_fp_encode_double@@Base+0x4e0>
   18c10:	mov	r2, #185	; 0xb9
   18c14:	ldr	r1, [pc, #80]	; 18c6c <grisu3_diy_fp_encode_double@@Base+0x4cc>
   18c18:	ldr	r0, [pc, #100]	; 18c84 <grisu3_diy_fp_encode_double@@Base+0x4e4>
   18c1c:	bl	124d8 <__assert_fail@plt>
   18c20:	mov	r8, #0
   18c24:	b	18a38 <grisu3_diy_fp_encode_double@@Base+0x298>
   18c28:	ldr	r4, [pc, #48]	; 18c60 <grisu3_diy_fp_encode_double@@Base+0x4c0>
   18c2c:	cmp	r1, r4
   18c30:	bne	18b68 <grisu3_diy_fp_encode_double@@Base+0x3c8>
   18c34:	mov	r4, #0
   18c38:	and	r5, r3, #1048576	; 0x100000
   18c3c:	orrs	r1, r4, r5
   18c40:	moveq	r8, #0
   18c44:	beq	18b70 <grisu3_diy_fp_encode_double@@Base+0x3d0>
   18c48:	ldr	r1, [pc, #16]	; 18c60 <grisu3_diy_fp_encode_double@@Base+0x4c0>
   18c4c:	b	18b68 <grisu3_diy_fp_encode_double@@Base+0x3c8>
   18c50:	andeq	sp, r1, r8, asr pc
   18c54:	andeq	lr, r1, r0, lsr #10
   18c58:			; <UNDEFINED> instruction: 0xfffffc0e
   18c5c:			; <UNDEFINED> instruction: 0x001fffff
   18c60:			; <UNDEFINED> instruction: 0xfffffbce
   18c64:	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>
   18c68:	andeq	sp, r1, r0, ror pc
   18c6c:	andeq	lr, r1, ip, lsr r8
   18c70:	muleq	r1, r4, r8
   18c74:			; <UNDEFINED> instruction: 0x0001e8b4
   18c78:	andeq	lr, r1, r0, ror #17
   18c7c:	strdeq	lr, [r1], -r0
   18c80:	andeq	lr, r1, r0, lsl #10
   18c84:	andeq	lr, r1, ip, lsl #18
   18c88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18c8c:	sub	sp, sp, #44	; 0x2c
   18c90:	str	r0, [sp, #12]
   18c94:	mov	ip, r2
   18c98:	str	r2, [sp, #20]
   18c9c:	mov	r2, #0
   18ca0:	mov	r3, #0
   18ca4:	strd	r2, [ip]
   18ca8:	cmp	r1, #1000	; 0x3e8
   18cac:	addle	r1, r1, #1
   18cb0:	movle	r3, r0
   18cb4:	addle	r9, r3, r1
   18cb8:	ldrgt	r3, [sp, #12]
   18cbc:	addgt	r9, r3, #1000	; 0x3e8
   18cc0:	addgt	r9, r9, #1
   18cc4:	ldr	r3, [sp, #12]
   18cc8:	cmp	r9, r3
   18ccc:	beq	195b4 <grisu3_diy_fp_encode_double@@Base+0xe14>
   18cd0:	ldrb	r3, [r3]
   18cd4:	cmp	r3, #45	; 0x2d
   18cd8:	beq	18d20 <grisu3_diy_fp_encode_double@@Base+0x580>
   18cdc:	ldr	r3, [sp, #12]
   18ce0:	mov	r2, #0
   18ce4:	str	r2, [sp, #16]
   18ce8:	ldrb	r0, [r3]
   18cec:	cmp	r0, #48	; 0x30
   18cf0:	beq	18d3c <grisu3_diy_fp_encode_double@@Base+0x59c>
   18cf4:	sub	r2, r0, #49	; 0x31
   18cf8:	uxtb	r2, r2
   18cfc:	cmp	r2, #8
   18d00:	bls	18db0 <grisu3_diy_fp_encode_double@@Base+0x610>
   18d04:	ldr	r4, [sp, #12]
   18d08:	ldr	r3, [sp, #16]
   18d0c:	cmp	r3, #0
   18d10:	movne	r4, #0
   18d14:	mov	r0, r4
   18d18:	add	sp, sp, #44	; 0x2c
   18d1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18d20:	ldr	r3, [sp, #12]
   18d24:	add	r3, r3, #1
   18d28:	cmp	r9, r3
   18d2c:	beq	195bc <grisu3_diy_fp_encode_double@@Base+0xe1c>
   18d30:	mov	r2, #1
   18d34:	str	r2, [sp, #16]
   18d38:	b	18ce8 <grisu3_diy_fp_encode_double@@Base+0x548>
   18d3c:	add	r5, r3, #1
   18d40:	cmp	r9, r5
   18d44:	beq	19634 <grisu3_diy_fp_encode_double@@Base+0xe94>
   18d48:	ldrb	r2, [r3, #1]
   18d4c:	orr	r1, r2, #32
   18d50:	cmp	r1, #120	; 0x78
   18d54:	beq	195c4 <grisu3_diy_fp_encode_double@@Base+0xe24>
   18d58:	cmp	r2, #48	; 0x30
   18d5c:	bne	18d84 <grisu3_diy_fp_encode_double@@Base+0x5e4>
   18d60:	add	r3, r3, #2
   18d64:	mov	r1, r9
   18d68:	mov	r5, r3
   18d6c:	cmp	r3, r1
   18d70:	beq	195cc <grisu3_diy_fp_encode_double@@Base+0xe2c>
   18d74:	add	r3, r3, #1
   18d78:	ldrb	r2, [r5]
   18d7c:	cmp	r2, #48	; 0x30
   18d80:	beq	18d68 <grisu3_diy_fp_encode_double@@Base+0x5c8>
   18d84:	ldrb	r2, [r5]
   18d88:	sub	r3, r2, #48	; 0x30
   18d8c:	uxtb	r3, r3
   18d90:	cmp	r3, #9
   18d94:	movhi	r4, r5
   18d98:	movhi	sl, #0
   18d9c:	movhi	fp, #0
   18da0:	bhi	19664 <grisu3_diy_fp_encode_double@@Base+0xec4>
   18da4:	mov	sl, #0
   18da8:	mov	fp, #0
   18dac:	b	18df4 <grisu3_diy_fp_encode_double@@Base+0x654>
   18db0:	add	r5, r3, #1
   18db4:	sub	r0, r0, #48	; 0x30
   18db8:	mov	sl, r0
   18dbc:	asr	fp, r0, #31
   18dc0:	cmp	r9, r5
   18dc4:	moveq	r4, #0
   18dc8:	beq	18d14 <grisu3_diy_fp_encode_double@@Base+0x574>
   18dcc:	ldrb	r2, [r3, #1]
   18dd0:	sub	r3, r2, #48	; 0x30
   18dd4:	uxtb	r3, r3
   18dd8:	cmp	r3, #9
   18ddc:	bhi	19660 <grisu3_diy_fp_encode_double@@Base+0xec0>
   18de0:	add	r1, pc, #896	; 0x380
   18de4:	ldrd	r0, [r1]
   18de8:	cmp	fp, r1
   18dec:	cmpeq	sl, r0
   18df0:	bhi	18fbc <grisu3_diy_fp_encode_double@@Base+0x81c>
   18df4:	add	ip, r5, #1
   18df8:	mov	r8, r9
   18dfc:	mov	lr, #10
   18e00:	add	r7, pc, #864	; 0x360
   18e04:	ldrd	r6, [r7]
   18e08:	mov	r4, ip
   18e0c:	umull	r0, r1, sl, lr
   18e10:	mla	r1, lr, fp, r1
   18e14:	uxtb	sl, r2
   18e18:	mov	fp, #0
   18e1c:	adds	sl, sl, r0
   18e20:	adc	fp, fp, r1
   18e24:	subs	sl, sl, #48	; 0x30
   18e28:	sbc	fp, fp, #0
   18e2c:	cmp	ip, r8
   18e30:	beq	19644 <grisu3_diy_fp_encode_double@@Base+0xea4>
   18e34:	ldrb	r2, [ip], #1
   18e38:	sub	r3, r2, #48	; 0x30
   18e3c:	uxtb	r3, r3
   18e40:	cmp	r3, #9
   18e44:	bhi	19664 <grisu3_diy_fp_encode_double@@Base+0xec4>
   18e48:	cmp	fp, r7
   18e4c:	cmpeq	sl, r6
   18e50:	bls	18e08 <grisu3_diy_fp_encode_double@@Base+0x668>
   18e54:	mov	r1, r4
   18e58:	cmp	r2, #52	; 0x34
   18e5c:	movls	r2, #0
   18e60:	movhi	r2, #1
   18e64:	adds	sl, sl, r2
   18e68:	adc	fp, fp, #0
   18e6c:	sub	r8, r1, r5
   18e70:	cmp	r9, r1
   18e74:	moveq	r4, #0
   18e78:	beq	18d14 <grisu3_diy_fp_encode_double@@Base+0x574>
   18e7c:	mov	r3, #1
   18e80:	str	r3, [sp, #24]
   18e84:	ldrb	r3, [r1]
   18e88:	cmp	r3, #48	; 0x30
   18e8c:	bne	19678 <grisu3_diy_fp_encode_double@@Base+0xed8>
   18e90:	add	r2, r1, #1
   18e94:	mov	ip, r9
   18e98:	sub	r3, r2, r1
   18e9c:	mov	r4, r2
   18ea0:	cmp	r2, ip
   18ea4:	beq	195d4 <grisu3_diy_fp_encode_double@@Base+0xe34>
   18ea8:	add	r2, r2, #1
   18eac:	ldrb	r0, [r4]
   18eb0:	cmp	r0, #48	; 0x30
   18eb4:	beq	18e98 <grisu3_diy_fp_encode_double@@Base+0x6f8>
   18eb8:	ldrb	r2, [r4]
   18ebc:	sub	r2, r2, #49	; 0x31
   18ec0:	uxtb	r2, r2
   18ec4:	cmp	r2, #8
   18ec8:	bhi	18f2c <grisu3_diy_fp_encode_double@@Base+0x78c>
   18ecc:	add	r0, r3, #1
   18ed0:	add	r1, r4, #1
   18ed4:	cmp	r9, r1
   18ed8:	beq	195dc <grisu3_diy_fp_encode_double@@Base+0xe3c>
   18edc:	ldrb	r2, [r4, #1]
   18ee0:	sub	r2, r2, #48	; 0x30
   18ee4:	uxtb	r2, r2
   18ee8:	cmp	r2, #9
   18eec:	bhi	19684 <grisu3_diy_fp_encode_double@@Base+0xee4>
   18ef0:	add	r1, r4, #2
   18ef4:	mov	r0, r9
   18ef8:	sub	ip, r3, r4
   18efc:	add	r3, ip, r1
   18f00:	mov	r4, r1
   18f04:	cmp	r1, r0
   18f08:	beq	195e4 <grisu3_diy_fp_encode_double@@Base+0xe44>
   18f0c:	add	r1, r1, #1
   18f10:	ldrb	r2, [r4]
   18f14:	sub	r2, r2, #48	; 0x30
   18f18:	uxtb	r2, r2
   18f1c:	cmp	r2, #9
   18f20:	bls	18efc <grisu3_diy_fp_encode_double@@Base+0x75c>
   18f24:	mov	r2, #1
   18f28:	str	r2, [sp, #24]
   18f2c:	ldrb	r2, [r4]
   18f30:	cmp	r2, #46	; 0x2e
   18f34:	beq	18fc4 <grisu3_diy_fp_encode_double@@Base+0x824>
   18f38:	add	r3, r3, r8
   18f3c:	ldrb	r2, [r4]
   18f40:	orr	r2, r2, #32
   18f44:	cmp	r2, #101	; 0x65
   18f48:	movne	r2, #0
   18f4c:	beq	19180 <grisu3_diy_fp_encode_double@@Base+0x9e0>
   18f50:	add	r5, r2, r3
   18f54:	cmp	r9, r4
   18f58:	moveq	r4, #0
   18f5c:	beq	18d14 <grisu3_diy_fp_encode_double@@Base+0x574>
   18f60:	ldr	r6, [sp, #20]
   18f64:	ldr	r7, [sp, #12]
   18f68:	orrs	r3, sl, fp
   18f6c:	moveq	r2, #1
   18f70:	movne	r2, #0
   18f74:	cmn	r5, #324	; 0x144
   18f78:	movge	r3, #0
   18f7c:	movlt	r3, #1
   18f80:	orrs	r3, r2, r3
   18f84:	bne	18fa4 <grisu3_diy_fp_encode_double@@Base+0x804>
   18f88:	sub	r2, r5, #1
   18f8c:	ldr	r3, [pc, #476]	; 19170 <grisu3_diy_fp_encode_double@@Base+0x9d0>
   18f90:	cmp	r2, r3
   18f94:	ble	19254 <grisu3_diy_fp_encode_double@@Base+0xab4>
   18f98:	mov	r2, #0
   18f9c:	ldr	r3, [pc, #464]	; 19174 <grisu3_diy_fp_encode_double@@Base+0x9d4>
   18fa0:	strd	r2, [r6]
   18fa4:	ldr	r3, [sp, #16]
   18fa8:	cmp	r3, #0
   18fac:	vldrne	d7, [r6]
   18fb0:	vnegne.f64	d7, d7
   18fb4:	vstrne	d7, [r6]
   18fb8:	b	18d14 <grisu3_diy_fp_encode_double@@Base+0x574>
   18fbc:	mov	r1, r5
   18fc0:	b	18e58 <grisu3_diy_fp_encode_double@@Base+0x6b8>
   18fc4:	add	r2, r4, #1
   18fc8:	mov	r1, r2
   18fcc:	str	r2, [sp, #28]
   18fd0:	ldrb	r5, [r4, #1]
   18fd4:	sub	r2, r5, #48	; 0x30
   18fd8:	uxtb	r2, r2
   18fdc:	cmp	r2, #9
   18fe0:	bhi	195ec <grisu3_diy_fp_encode_double@@Base+0xe4c>
   18fe4:	cmp	r9, r1
   18fe8:	beq	195f4 <grisu3_diy_fp_encode_double@@Base+0xe54>
   18fec:	add	r7, pc, #372	; 0x174
   18ff0:	ldrd	r6, [r7]
   18ff4:	cmp	fp, r7
   18ff8:	cmpeq	sl, r6
   18ffc:	bhi	196d8 <grisu3_diy_fp_encode_double@@Base+0xf38>
   19000:	add	ip, r4, #2
   19004:	mov	lr, r9
   19008:	mov	r2, #10
   1900c:	add	r7, pc, #340	; 0x154
   19010:	ldrd	r6, [r7]
   19014:	mov	r4, ip
   19018:	umull	r0, r1, sl, r2
   1901c:	mla	r1, r2, fp, r1
   19020:	uxtb	sl, r5
   19024:	mov	fp, #0
   19028:	adds	sl, sl, r0
   1902c:	adc	fp, fp, r1
   19030:	subs	sl, sl, #48	; 0x30
   19034:	sbc	fp, fp, #0
   19038:	sub	r3, r3, #1
   1903c:	cmp	lr, ip
   19040:	beq	19698 <grisu3_diy_fp_encode_double@@Base+0xef8>
   19044:	mov	r0, ip
   19048:	ldrb	r5, [r0], #1
   1904c:	sub	r1, r5, #48	; 0x30
   19050:	uxtb	r1, r1
   19054:	cmp	r1, #9
   19058:	bhi	19158 <grisu3_diy_fp_encode_double@@Base+0x9b8>
   1905c:	cmp	fp, r7
   19060:	cmpeq	sl, r6
   19064:	movls	ip, r0
   19068:	bls	19014 <grisu3_diy_fp_encode_double@@Base+0x874>
   1906c:	ldr	r2, [sp, #24]
   19070:	cmp	r2, #0
   19074:	bne	1908c <grisu3_diy_fp_encode_double@@Base+0x8ec>
   19078:	cmp	r5, #52	; 0x34
   1907c:	movls	r5, #0
   19080:	movhi	r5, #1
   19084:	adds	sl, sl, r5
   19088:	adc	fp, fp, #0
   1908c:	ldr	r2, [sp, #28]
   19090:	sub	r2, r4, r2
   19094:	add	r8, r8, r2
   19098:	cmp	r9, r4
   1909c:	moveq	r4, #0
   190a0:	beq	18d14 <grisu3_diy_fp_encode_double@@Base+0x574>
   190a4:	mov	r2, #1
   190a8:	str	r2, [sp, #24]
   190ac:	ldrb	r2, [r4]
   190b0:	cmp	r2, #48	; 0x30
   190b4:	bne	190e4 <grisu3_diy_fp_encode_double@@Base+0x944>
   190b8:	add	r2, r4, #1
   190bc:	mov	ip, r9
   190c0:	sub	r0, r3, r4
   190c4:	add	r3, r0, r2
   190c8:	mov	r4, r2
   190cc:	cmp	r2, ip
   190d0:	beq	195fc <grisu3_diy_fp_encode_double@@Base+0xe5c>
   190d4:	add	r2, r2, #1
   190d8:	ldrb	r1, [r4]
   190dc:	cmp	r1, #48	; 0x30
   190e0:	beq	190c4 <grisu3_diy_fp_encode_double@@Base+0x924>
   190e4:	ldrb	r2, [r4]
   190e8:	sub	r2, r2, #49	; 0x31
   190ec:	uxtb	r2, r2
   190f0:	cmp	r2, #8
   190f4:	bhi	18f38 <grisu3_diy_fp_encode_double@@Base+0x798>
   190f8:	add	r1, r4, #1
   190fc:	cmp	r9, r1
   19100:	beq	19604 <grisu3_diy_fp_encode_double@@Base+0xe64>
   19104:	ldrb	r2, [r4, #1]
   19108:	sub	r2, r2, #48	; 0x30
   1910c:	uxtb	r2, r2
   19110:	cmp	r2, #9
   19114:	bhi	196b4 <grisu3_diy_fp_encode_double@@Base+0xf14>
   19118:	add	r1, r4, #2
   1911c:	mov	r0, r9
   19120:	mov	r4, r1
   19124:	cmp	r0, r1
   19128:	beq	1960c <grisu3_diy_fp_encode_double@@Base+0xe6c>
   1912c:	add	r1, r1, #1
   19130:	ldrb	r2, [r4]
   19134:	sub	r2, r2, #48	; 0x30
   19138:	uxtb	r2, r2
   1913c:	cmp	r2, #9
   19140:	bls	19120 <grisu3_diy_fp_encode_double@@Base+0x980>
   19144:	mov	r2, #1
   19148:	str	r2, [sp, #24]
   1914c:	b	18f38 <grisu3_diy_fp_encode_double@@Base+0x798>
   19150:	ldr	r4, [sp, #28]
   19154:	b	19078 <grisu3_diy_fp_encode_double@@Base+0x8d8>
   19158:	ldr	r2, [sp, #28]
   1915c:	sub	ip, ip, r2
   19160:	add	r8, r8, ip
   19164:	b	190ac <grisu3_diy_fp_encode_double@@Base+0x90c>
   19168:	ldmibls	r9, {r3, r4, r7, r8, fp, ip, pc}
   1916c:	ldmibne	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   19170:	andeq	r0, r0, r5, lsr r1
   19174:	svcvc	0x00f00000	; IMB
   19178:	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
   1917c:			; <UNDEFINED> instruction: 0x001fffff
   19180:	sub	r2, r9, r4
   19184:	cmp	r2, #1
   19188:	ble	19614 <grisu3_diy_fp_encode_double@@Base+0xe74>
   1918c:	ldrb	r2, [r4, #1]
   19190:	cmp	r2, #43	; 0x2b
   19194:	beq	1922c <grisu3_diy_fp_encode_double@@Base+0xa8c>
   19198:	cmp	r2, #45	; 0x2d
   1919c:	beq	19240 <grisu3_diy_fp_encode_double@@Base+0xaa0>
   191a0:	add	r1, r4, #1
   191a4:	mov	r6, #0
   191a8:	ldrb	r2, [r1]
   191ac:	sub	r0, r2, #48	; 0x30
   191b0:	uxtb	r0, r0
   191b4:	cmp	r0, #9
   191b8:	bhi	1962c <grisu3_diy_fp_encode_double@@Base+0xe8c>
   191bc:	add	r4, r1, #1
   191c0:	sub	r2, r2, #48	; 0x30
   191c4:	cmp	r9, r4
   191c8:	beq	196c4 <grisu3_diy_fp_encode_double@@Base+0xf24>
   191cc:	ldrb	ip, [r1, #1]
   191d0:	sub	r0, ip, #48	; 0x30
   191d4:	uxtb	r0, r0
   191d8:	cmp	r0, #9
   191dc:	bhi	1921c <grisu3_diy_fp_encode_double@@Base+0xa7c>
   191e0:	add	r1, r1, #2
   191e4:	mov	lr, r9
   191e8:	ldr	r5, [pc, #-120]	; 19178 <grisu3_diy_fp_encode_double@@Base+0x9d8>
   191ec:	cmp	r2, r5
   191f0:	addle	r2, r2, r2, lsl #2
   191f4:	addle	r2, ip, r2, lsl #1
   191f8:	suble	r2, r2, #48	; 0x30
   191fc:	mov	r4, r1
   19200:	cmp	lr, r1
   19204:	beq	196c4 <grisu3_diy_fp_encode_double@@Base+0xf24>
   19208:	ldrb	ip, [r1], #1
   1920c:	sub	r0, ip, #48	; 0x30
   19210:	uxtb	r0, r0
   19214:	cmp	r0, #9
   19218:	bls	191ec <grisu3_diy_fp_encode_double@@Base+0xa4c>
   1921c:	cmp	r6, #0
   19220:	bne	196d0 <grisu3_diy_fp_encode_double@@Base+0xf30>
   19224:	add	r5, r3, r2
   19228:	b	18f60 <grisu3_diy_fp_encode_double@@Base+0x7c0>
   1922c:	add	r1, r4, #2
   19230:	cmp	r9, r1
   19234:	beq	1961c <grisu3_diy_fp_encode_double@@Base+0xe7c>
   19238:	mov	r6, #0
   1923c:	b	191a8 <grisu3_diy_fp_encode_double@@Base+0xa08>
   19240:	add	r1, r4, #2
   19244:	cmp	r9, r1
   19248:	beq	19624 <grisu3_diy_fp_encode_double@@Base+0xe84>
   1924c:	mov	r6, #1
   19250:	b	191a8 <grisu3_diy_fp_encode_double@@Base+0xa08>
   19254:	mvn	r2, #0
   19258:	ldr	r3, [pc, #-228]	; 1917c <grisu3_diy_fp_encode_double@@Base+0x9dc>
   1925c:	cmp	fp, r3
   19260:	cmpeq	sl, r2
   19264:	movls	r3, #1
   19268:	movhi	r3, #0
   1926c:	cmp	r5, #22
   19270:	movhi	r3, #0
   19274:	andls	r3, r3, #1
   19278:	cmp	r3, #0
   1927c:	beq	1956c <grisu3_diy_fp_encode_double@@Base+0xdcc>
   19280:	mov	r0, sl
   19284:	mov	r1, fp
   19288:	bl	1d028 <flatcc_json_parser_struct_as_root@@Base+0x418>
   1928c:	vmov	d7, r0, r1
   19290:	sub	r3, r5, r8
   19294:	add	r3, r3, #22
   19298:	cmp	r3, #44	; 0x2c
   1929c:	ldrls	pc, [pc, r3, lsl #2]
   192a0:	b	19360 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   192a4:	andeq	r9, r1, r8, asr r3
   192a8:	andeq	r9, r1, r8, ror #6
   192ac:	andeq	r9, r1, r4, ror r3
   192b0:	andeq	r9, r1, r0, lsl #7
   192b4:	andeq	r9, r1, ip, lsl #7
   192b8:	muleq	r1, r8, r3
   192bc:	andeq	r9, r1, r4, lsr #7
   192c0:			; <UNDEFINED> instruction: 0x000193b0
   192c4:			; <UNDEFINED> instruction: 0x000193bc
   192c8:	andeq	r9, r1, r8, asr #7
   192cc:	ldrdeq	r9, [r1], -r4
   192d0:	andeq	r9, r1, r0, ror #7
   192d4:	andeq	r9, r1, ip, ror #7
   192d8:	strdeq	r9, [r1], -r8
   192dc:	andeq	r9, r1, r4, lsl #8
   192e0:	andeq	r9, r1, r0, lsl r4
   192e4:	andeq	r9, r1, ip, lsl r4
   192e8:	andeq	r9, r1, r8, lsr #8
   192ec:	andeq	r9, r1, r4, lsr r4
   192f0:	andeq	r9, r1, r0, asr #8
   192f4:	andeq	r9, r1, ip, asr #8
   192f8:	andeq	r9, r1, r8, asr r4
   192fc:	andeq	r9, r1, r0, ror #6
   19300:	andeq	r9, r1, r4, ror #8
   19304:	andeq	r9, r1, r0, ror r4
   19308:	andeq	r9, r1, ip, ror r4
   1930c:	andeq	r9, r1, r8, lsl #9
   19310:	muleq	r1, r4, r4
   19314:	andeq	r9, r1, r0, lsr #9
   19318:	andeq	r9, r1, ip, lsr #9
   1931c:			; <UNDEFINED> instruction: 0x000194b8
   19320:	andeq	r9, r1, r4, asr #9
   19324:	ldrdeq	r9, [r1], -r0
   19328:	ldrdeq	r9, [r1], -ip
   1932c:	andeq	r9, r1, r8, ror #9
   19330:	strdeq	r9, [r1], -r4
   19334:	andeq	r9, r1, r0, lsl #10
   19338:	andeq	r9, r1, ip, lsl #10
   1933c:	andeq	r9, r1, r8, lsl r5
   19340:	andeq	r9, r1, r4, lsr #10
   19344:	andeq	r9, r1, r0, lsr r5
   19348:	andeq	r9, r1, ip, lsr r5
   1934c:	andeq	r9, r1, r8, asr #10
   19350:	andeq	r9, r1, r4, asr r5
   19354:	andeq	r9, r1, r0, ror #10
   19358:	vldr	d6, [pc, #912]	; 196f0 <grisu3_diy_fp_encode_double@@Base+0xf50>
   1935c:	vdiv.f64	d7, d7, d6
   19360:	vstr	d7, [r6]
   19364:	b	18fa4 <grisu3_diy_fp_encode_double@@Base+0x804>
   19368:	vldr	d6, [pc, #904]	; 196f8 <grisu3_diy_fp_encode_double@@Base+0xf58>
   1936c:	vdiv.f64	d7, d7, d6
   19370:	b	19360 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   19374:	vldr	d6, [pc, #900]	; 19700 <grisu3_diy_fp_encode_double@@Base+0xf60>
   19378:	vdiv.f64	d7, d7, d6
   1937c:	b	19360 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   19380:	vldr	d6, [pc, #896]	; 19708 <grisu3_diy_fp_encode_double@@Base+0xf68>
   19384:	vdiv.f64	d7, d7, d6
   19388:	b	19360 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   1938c:	vldr	d6, [pc, #892]	; 19710 <grisu3_diy_fp_encode_double@@Base+0xf70>
   19390:	vdiv.f64	d7, d7, d6
   19394:	b	19360 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   19398:	vldr	d6, [pc, #888]	; 19718 <grisu3_diy_fp_encode_double@@Base+0xf78>
   1939c:	vdiv.f64	d7, d7, d6
   193a0:	b	19360 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   193a4:	vldr	d6, [pc, #884]	; 19720 <grisu3_diy_fp_encode_double@@Base+0xf80>
   193a8:	vdiv.f64	d7, d7, d6
   193ac:	b	19360 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   193b0:	vldr	d6, [pc, #880]	; 19728 <grisu3_diy_fp_encode_double@@Base+0xf88>
   193b4:	vdiv.f64	d7, d7, d6
   193b8:	b	19360 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   193bc:	vldr	d6, [pc, #876]	; 19730 <grisu3_diy_fp_encode_double@@Base+0xf90>
   193c0:	vdiv.f64	d7, d7, d6
   193c4:	b	19360 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   193c8:	vldr	d6, [pc, #872]	; 19738 <grisu3_diy_fp_encode_double@@Base+0xf98>
   193cc:	vdiv.f64	d7, d7, d6
   193d0:	b	19360 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   193d4:	vldr	d6, [pc, #868]	; 19740 <grisu3_diy_fp_encode_double@@Base+0xfa0>
   193d8:	vdiv.f64	d7, d7, d6
   193dc:	b	19360 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   193e0:	vldr	d6, [pc, #864]	; 19748 <grisu3_diy_fp_encode_double@@Base+0xfa8>
   193e4:	vdiv.f64	d7, d7, d6
   193e8:	b	19360 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   193ec:	vldr	d6, [pc, #860]	; 19750 <grisu3_diy_fp_encode_double@@Base+0xfb0>
   193f0:	vdiv.f64	d7, d7, d6
   193f4:	b	19360 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   193f8:	vldr	d6, [pc, #856]	; 19758 <grisu3_diy_fp_encode_double@@Base+0xfb8>
   193fc:	vdiv.f64	d7, d7, d6
   19400:	b	19360 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   19404:	vldr	d6, [pc, #852]	; 19760 <grisu3_diy_fp_encode_double@@Base+0xfc0>
   19408:	vdiv.f64	d7, d7, d6
   1940c:	b	19360 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   19410:	vldr	d6, [pc, #848]	; 19768 <grisu3_diy_fp_encode_double@@Base+0xfc8>
   19414:	vdiv.f64	d7, d7, d6
   19418:	b	19360 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   1941c:	vldr	d6, [pc, #844]	; 19770 <grisu3_diy_fp_encode_double@@Base+0xfd0>
   19420:	vdiv.f64	d7, d7, d6
   19424:	b	19360 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   19428:	vldr	d6, [pc, #840]	; 19778 <grisu3_diy_fp_encode_double@@Base+0xfd8>
   1942c:	vdiv.f64	d7, d7, d6
   19430:	b	19360 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   19434:	vldr	d6, [pc, #836]	; 19780 <grisu3_diy_fp_encode_double@@Base+0xfe0>
   19438:	vdiv.f64	d7, d7, d6
   1943c:	b	19360 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   19440:	vldr	d6, [pc, #832]	; 19788 <grisu3_diy_fp_encode_double@@Base+0xfe8>
   19444:	vdiv.f64	d7, d7, d6
   19448:	b	19360 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   1944c:	vldr	d6, [pc, #828]	; 19790 <grisu3_diy_fp_encode_double@@Base+0xff0>
   19450:	vdiv.f64	d7, d7, d6
   19454:	b	19360 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   19458:	vldr	d6, [pc, #824]	; 19798 <grisu3_diy_fp_encode_double@@Base+0xff8>
   1945c:	vdiv.f64	d7, d7, d6
   19460:	b	19360 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   19464:	vldr	d6, [pc, #812]	; 19798 <grisu3_diy_fp_encode_double@@Base+0xff8>
   19468:	vmul.f64	d7, d7, d6
   1946c:	b	19360 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   19470:	vldr	d6, [pc, #792]	; 19790 <grisu3_diy_fp_encode_double@@Base+0xff0>
   19474:	vmul.f64	d7, d7, d6
   19478:	b	19360 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   1947c:	vldr	d6, [pc, #772]	; 19788 <grisu3_diy_fp_encode_double@@Base+0xfe8>
   19480:	vmul.f64	d7, d7, d6
   19484:	b	19360 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   19488:	vldr	d6, [pc, #752]	; 19780 <grisu3_diy_fp_encode_double@@Base+0xfe0>
   1948c:	vmul.f64	d7, d7, d6
   19490:	b	19360 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   19494:	vldr	d6, [pc, #732]	; 19778 <grisu3_diy_fp_encode_double@@Base+0xfd8>
   19498:	vmul.f64	d7, d7, d6
   1949c:	b	19360 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   194a0:	vldr	d6, [pc, #712]	; 19770 <grisu3_diy_fp_encode_double@@Base+0xfd0>
   194a4:	vmul.f64	d7, d7, d6
   194a8:	b	19360 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   194ac:	vldr	d6, [pc, #692]	; 19768 <grisu3_diy_fp_encode_double@@Base+0xfc8>
   194b0:	vmul.f64	d7, d7, d6
   194b4:	b	19360 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   194b8:	vldr	d6, [pc, #672]	; 19760 <grisu3_diy_fp_encode_double@@Base+0xfc0>
   194bc:	vmul.f64	d7, d7, d6
   194c0:	b	19360 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   194c4:	vldr	d6, [pc, #652]	; 19758 <grisu3_diy_fp_encode_double@@Base+0xfb8>
   194c8:	vmul.f64	d7, d7, d6
   194cc:	b	19360 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   194d0:	vldr	d6, [pc, #632]	; 19750 <grisu3_diy_fp_encode_double@@Base+0xfb0>
   194d4:	vmul.f64	d7, d7, d6
   194d8:	b	19360 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   194dc:	vldr	d6, [pc, #612]	; 19748 <grisu3_diy_fp_encode_double@@Base+0xfa8>
   194e0:	vmul.f64	d7, d7, d6
   194e4:	b	19360 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   194e8:	vldr	d6, [pc, #592]	; 19740 <grisu3_diy_fp_encode_double@@Base+0xfa0>
   194ec:	vmul.f64	d7, d7, d6
   194f0:	b	19360 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   194f4:	vldr	d6, [pc, #572]	; 19738 <grisu3_diy_fp_encode_double@@Base+0xf98>
   194f8:	vmul.f64	d7, d7, d6
   194fc:	b	19360 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   19500:	vldr	d6, [pc, #552]	; 19730 <grisu3_diy_fp_encode_double@@Base+0xf90>
   19504:	vmul.f64	d7, d7, d6
   19508:	b	19360 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   1950c:	vldr	d6, [pc, #532]	; 19728 <grisu3_diy_fp_encode_double@@Base+0xf88>
   19510:	vmul.f64	d7, d7, d6
   19514:	b	19360 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   19518:	vldr	d6, [pc, #512]	; 19720 <grisu3_diy_fp_encode_double@@Base+0xf80>
   1951c:	vmul.f64	d7, d7, d6
   19520:	b	19360 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   19524:	vldr	d6, [pc, #492]	; 19718 <grisu3_diy_fp_encode_double@@Base+0xf78>
   19528:	vmul.f64	d7, d7, d6
   1952c:	b	19360 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   19530:	vldr	d6, [pc, #472]	; 19710 <grisu3_diy_fp_encode_double@@Base+0xf70>
   19534:	vmul.f64	d7, d7, d6
   19538:	b	19360 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   1953c:	vldr	d6, [pc, #452]	; 19708 <grisu3_diy_fp_encode_double@@Base+0xf68>
   19540:	vmul.f64	d7, d7, d6
   19544:	b	19360 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   19548:	vldr	d6, [pc, #432]	; 19700 <grisu3_diy_fp_encode_double@@Base+0xf60>
   1954c:	vmul.f64	d7, d7, d6
   19550:	b	19360 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   19554:	vldr	d6, [pc, #412]	; 196f8 <grisu3_diy_fp_encode_double@@Base+0xf58>
   19558:	vmul.f64	d7, d7, d6
   1955c:	b	19360 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   19560:	vldr	d6, [pc, #392]	; 196f0 <grisu3_diy_fp_encode_double@@Base+0xf50>
   19564:	vmul.f64	d7, d7, d6
   19568:	b	19360 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   1956c:	str	r6, [sp, #4]
   19570:	ldr	r3, [sp, #24]
   19574:	str	r3, [sp]
   19578:	mov	r3, r8
   1957c:	mov	r2, r5
   19580:	mov	r0, sl
   19584:	mov	r1, fp
   19588:	bl	187a0 <grisu3_diy_fp_encode_double@@Base>
   1958c:	cmp	r0, #0
   19590:	bne	18fa4 <grisu3_diy_fp_encode_double@@Base+0x804>
   19594:	add	r1, sp, #36	; 0x24
   19598:	mov	r0, r7
   1959c:	bl	124b4 <strtod@plt>
   195a0:	vstr	d0, [r6]
   195a4:	ldr	r3, [sp, #36]	; 0x24
   195a8:	cmp	r4, r3
   195ac:	movcs	r4, r3
   195b0:	b	18d14 <grisu3_diy_fp_encode_double@@Base+0x574>
   195b4:	ldr	r4, [sp, #12]
   195b8:	b	18d14 <grisu3_diy_fp_encode_double@@Base+0x574>
   195bc:	mov	r4, #0
   195c0:	b	18d14 <grisu3_diy_fp_encode_double@@Base+0x574>
   195c4:	ldr	r4, [sp, #12]
   195c8:	b	18d14 <grisu3_diy_fp_encode_double@@Base+0x574>
   195cc:	mov	r4, #0
   195d0:	b	18d14 <grisu3_diy_fp_encode_double@@Base+0x574>
   195d4:	mov	r4, #0
   195d8:	b	18d14 <grisu3_diy_fp_encode_double@@Base+0x574>
   195dc:	mov	r4, #0
   195e0:	b	18d14 <grisu3_diy_fp_encode_double@@Base+0x574>
   195e4:	mov	r4, #0
   195e8:	b	18d14 <grisu3_diy_fp_encode_double@@Base+0x574>
   195ec:	mov	r4, #0
   195f0:	b	18d14 <grisu3_diy_fp_encode_double@@Base+0x574>
   195f4:	mov	r4, #0
   195f8:	b	18d14 <grisu3_diy_fp_encode_double@@Base+0x574>
   195fc:	mov	r4, #0
   19600:	b	18d14 <grisu3_diy_fp_encode_double@@Base+0x574>
   19604:	mov	r4, #0
   19608:	b	18d14 <grisu3_diy_fp_encode_double@@Base+0x574>
   1960c:	mov	r4, #0
   19610:	b	18d14 <grisu3_diy_fp_encode_double@@Base+0x574>
   19614:	mov	r4, #0
   19618:	b	18d14 <grisu3_diy_fp_encode_double@@Base+0x574>
   1961c:	mov	r4, #0
   19620:	b	18d14 <grisu3_diy_fp_encode_double@@Base+0x574>
   19624:	mov	r4, #0
   19628:	b	18d14 <grisu3_diy_fp_encode_double@@Base+0x574>
   1962c:	mov	r4, #0
   19630:	b	18d14 <grisu3_diy_fp_encode_double@@Base+0x574>
   19634:	mov	r5, r9
   19638:	mov	r4, r9
   1963c:	mov	sl, #0
   19640:	mov	fp, #0
   19644:	sub	r8, r4, r5
   19648:	cmp	r9, r4
   1964c:	moveq	r4, #0
   19650:	beq	18d14 <grisu3_diy_fp_encode_double@@Base+0x574>
   19654:	mov	r3, #0
   19658:	str	r3, [sp, #24]
   1965c:	b	18eb8 <grisu3_diy_fp_encode_double@@Base+0x718>
   19660:	mov	r4, r5
   19664:	sub	r8, r4, r5
   19668:	mov	r1, r4
   1966c:	mov	r3, #0
   19670:	str	r3, [sp, #24]
   19674:	b	18e84 <grisu3_diy_fp_encode_double@@Base+0x6e4>
   19678:	mov	r4, r1
   1967c:	mov	r3, #0
   19680:	b	18eb8 <grisu3_diy_fp_encode_double@@Base+0x718>
   19684:	mov	r3, r0
   19688:	mov	r4, r1
   1968c:	mov	r2, #1
   19690:	str	r2, [sp, #24]
   19694:	b	18f2c <grisu3_diy_fp_encode_double@@Base+0x78c>
   19698:	ldr	r2, [sp, #28]
   1969c:	sub	ip, ip, r2
   196a0:	add	r8, r8, ip
   196a4:	cmp	r9, r4
   196a8:	moveq	r4, #0
   196ac:	bne	190e4 <grisu3_diy_fp_encode_double@@Base+0x944>
   196b0:	b	18d14 <grisu3_diy_fp_encode_double@@Base+0x574>
   196b4:	mov	r4, r1
   196b8:	mov	r2, #1
   196bc:	str	r2, [sp, #24]
   196c0:	b	18f38 <grisu3_diy_fp_encode_double@@Base+0x798>
   196c4:	cmp	r6, #0
   196c8:	moveq	r4, #0
   196cc:	beq	18d14 <grisu3_diy_fp_encode_double@@Base+0x574>
   196d0:	rsb	r2, r2, #0
   196d4:	b	18f50 <grisu3_diy_fp_encode_double@@Base+0x7b0>
   196d8:	ldr	r2, [sp, #24]
   196dc:	cmp	r2, #0
   196e0:	beq	19150 <grisu3_diy_fp_encode_double@@Base+0x9b0>
   196e4:	ldr	r4, [sp, #28]
   196e8:	b	190ac <grisu3_diy_fp_encode_double@@Base+0x90c>
   196ec:	nop			; (mov r0, r0)
   196f0:			; <UNDEFINED> instruction: 0x064dd592
   196f4:	strmi	pc, [r0], #207	; 0xcf
   196f8:	usatle	lr, #2, r0, asr #30
   196fc:	strbmi	r1, [fp], #-2788	; 0xfffff51c
   19700:	ldmvc	r5!, {r6, sl, fp, pc}
   19704:	ldrmi	sl, [r5], #-3869	; 0xfffff0e3
   19708:	addsvs	r3, r1, r0, lsl #26
   1970c:	mvnmi	r5, #228, 16	; 0xe40000
   19710:	strbvs	ip, [lr, -r0, lsl #16]
   19714:			; <UNDEFINED> instruction: 0x43abc16d
   19718:	ldrbhi	sl, [r8]
   1971c:	cmnmi	r6, #1459617792	; 0x57000000
   19720:	strbcc	r8, [r0, r0]!
   19724:	movtmi	ip, #4985	; 0x1379
   19728:	ldrtcs	r0, [r4], -r0
   1972c:	movwmi	r6, #52213	; 0xcbf5
   19730:	cdpne	0, 9, cr0, cr0, cr0, {0}
   19734:	sbcsmi	fp, r6, #196, 24	; 0xc400
   19738:	strb	r0, [r0, #-0]
   1973c:	adcmi	r3, r2, #156	; 0x9c
   19740:	andge	r0, r0, #0
   19744:	rsbmi	r1, sp, #148, 20	; 0x94000
   19748:	stmda	r0, {}	; <UNPREDICTABLE>
   1974c:	eorsmi	r4, r7, #7733248	; 0x760000
   19750:	andcs	r0, r0, r0
   19754:	andmi	sl, r2, #95	; 0x5f
   19758:	andeq	r0, r0, r0
   1975c:	bicmi	ip, sp, r5, ror #26
   19760:	andeq	r0, r0, r0
   19764:	orrsmi	sp, r7, r4, lsl #15
   19768:	andeq	r0, r0, r0
   1976c:	ldrdmi	r1, [r3, #-32]!	; 0xffffffe0
   19770:	andeq	r0, r0, r0
   19774:	smlawbmi	lr, r0, r4, r8
   19778:	andeq	r0, r0, r0
   1977c:	rscsmi	r6, r8, r0, lsl #20
   19780:	andeq	r0, r0, r0
   19784:	sbcmi	r8, r3, r0, lsl #16
   19788:	andeq	r0, r0, r0
   1978c:	addmi	r4, pc, r0
   19790:	andeq	r0, r0, r0
   19794:	subsmi	r0, r9, r0
   19798:	andeq	r0, r0, r0
   1979c:	eormi	r0, r4, r0

000197a0 <flatcc_json_parser_error_string@@Base>:
   197a0:	cmp	r0, #34	; 0x22
   197a4:	ldrls	pc, [pc, r0, lsl #2]
   197a8:	b	19948 <flatcc_json_parser_error_string@@Base+0x1a8>
   197ac:	andeq	r9, r1, r0, asr r9
   197b0:	andeq	r9, r1, r8, lsr r8
   197b4:	andeq	r9, r1, r0, asr #16
   197b8:	andeq	r9, r1, r8, asr #16
   197bc:	andeq	r9, r1, r0, asr r8
   197c0:	andeq	r9, r1, r8, asr r8
   197c4:	andeq	r9, r1, r0, ror #16
   197c8:	andeq	r9, r1, r8, ror #16
   197cc:	andeq	r9, r1, r0, ror r8
   197d0:	andeq	r9, r1, r8, ror r8
   197d4:	andeq	r9, r1, r0, lsl #17
   197d8:	andeq	r9, r1, r8, lsl #17
   197dc:	muleq	r1, r0, r8
   197e0:	muleq	r1, r8, r8
   197e4:	andeq	r9, r1, r0, lsr #17
   197e8:	andeq	r9, r1, r8, lsr #17
   197ec:			; <UNDEFINED> instruction: 0x000198b0
   197f0:			; <UNDEFINED> instruction: 0x000198b8
   197f4:	andeq	r9, r1, r0, asr #17
   197f8:	andeq	r9, r1, r8, asr #17
   197fc:	ldrdeq	r9, [r1], -r0
   19800:	ldrdeq	r9, [r1], -r8
   19804:	andeq	r9, r1, r0, ror #17
   19808:	andeq	r9, r1, r8, ror #17
   1980c:	strdeq	r9, [r1], -r0
   19810:	strdeq	r9, [r1], -r8
   19814:	andeq	r9, r1, r0, lsl #18
   19818:	andeq	r9, r1, r8, lsl #18
   1981c:	andeq	r9, r1, r0, lsl r9
   19820:	andeq	r9, r1, r8, lsl r9
   19824:	andeq	r9, r1, r0, lsr #18
   19828:	andeq	r9, r1, r8, lsr #18
   1982c:	andeq	r9, r1, r0, lsr r9
   19830:	andeq	r9, r1, r8, lsr r9
   19834:	andeq	r9, r1, r0, asr #18
   19838:	ldr	r0, [pc, #280]	; 19958 <flatcc_json_parser_error_string@@Base+0x1b8>
   1983c:	bx	lr
   19840:	ldr	r0, [pc, #276]	; 1995c <flatcc_json_parser_error_string@@Base+0x1bc>
   19844:	bx	lr
   19848:	ldr	r0, [pc, #272]	; 19960 <flatcc_json_parser_error_string@@Base+0x1c0>
   1984c:	bx	lr
   19850:	ldr	r0, [pc, #268]	; 19964 <flatcc_json_parser_error_string@@Base+0x1c4>
   19854:	bx	lr
   19858:	ldr	r0, [pc, #264]	; 19968 <flatcc_json_parser_error_string@@Base+0x1c8>
   1985c:	bx	lr
   19860:	ldr	r0, [pc, #260]	; 1996c <flatcc_json_parser_error_string@@Base+0x1cc>
   19864:	bx	lr
   19868:	ldr	r0, [pc, #256]	; 19970 <flatcc_json_parser_error_string@@Base+0x1d0>
   1986c:	bx	lr
   19870:	ldr	r0, [pc, #252]	; 19974 <flatcc_json_parser_error_string@@Base+0x1d4>
   19874:	bx	lr
   19878:	ldr	r0, [pc, #248]	; 19978 <flatcc_json_parser_error_string@@Base+0x1d8>
   1987c:	bx	lr
   19880:	ldr	r0, [pc, #244]	; 1997c <flatcc_json_parser_error_string@@Base+0x1dc>
   19884:	bx	lr
   19888:	ldr	r0, [pc, #240]	; 19980 <flatcc_json_parser_error_string@@Base+0x1e0>
   1988c:	bx	lr
   19890:	ldr	r0, [pc, #236]	; 19984 <flatcc_json_parser_error_string@@Base+0x1e4>
   19894:	bx	lr
   19898:	ldr	r0, [pc, #232]	; 19988 <flatcc_json_parser_error_string@@Base+0x1e8>
   1989c:	bx	lr
   198a0:	ldr	r0, [pc, #228]	; 1998c <flatcc_json_parser_error_string@@Base+0x1ec>
   198a4:	bx	lr
   198a8:	ldr	r0, [pc, #224]	; 19990 <flatcc_json_parser_error_string@@Base+0x1f0>
   198ac:	bx	lr
   198b0:	ldr	r0, [pc, #220]	; 19994 <flatcc_json_parser_error_string@@Base+0x1f4>
   198b4:	bx	lr
   198b8:	ldr	r0, [pc, #216]	; 19998 <flatcc_json_parser_error_string@@Base+0x1f8>
   198bc:	bx	lr
   198c0:	ldr	r0, [pc, #212]	; 1999c <flatcc_json_parser_error_string@@Base+0x1fc>
   198c4:	bx	lr
   198c8:	ldr	r0, [pc, #208]	; 199a0 <flatcc_json_parser_error_string@@Base+0x200>
   198cc:	bx	lr
   198d0:	ldr	r0, [pc, #204]	; 199a4 <flatcc_json_parser_error_string@@Base+0x204>
   198d4:	bx	lr
   198d8:	ldr	r0, [pc, #200]	; 199a8 <flatcc_json_parser_error_string@@Base+0x208>
   198dc:	bx	lr
   198e0:	ldr	r0, [pc, #196]	; 199ac <flatcc_json_parser_error_string@@Base+0x20c>
   198e4:	bx	lr
   198e8:	ldr	r0, [pc, #192]	; 199b0 <flatcc_json_parser_error_string@@Base+0x210>
   198ec:	bx	lr
   198f0:	ldr	r0, [pc, #188]	; 199b4 <flatcc_json_parser_error_string@@Base+0x214>
   198f4:	bx	lr
   198f8:	ldr	r0, [pc, #184]	; 199b8 <flatcc_json_parser_error_string@@Base+0x218>
   198fc:	bx	lr
   19900:	ldr	r0, [pc, #180]	; 199bc <flatcc_json_parser_error_string@@Base+0x21c>
   19904:	bx	lr
   19908:	ldr	r0, [pc, #176]	; 199c0 <flatcc_json_parser_error_string@@Base+0x220>
   1990c:	bx	lr
   19910:	ldr	r0, [pc, #172]	; 199c4 <flatcc_json_parser_error_string@@Base+0x224>
   19914:	bx	lr
   19918:	ldr	r0, [pc, #168]	; 199c8 <flatcc_json_parser_error_string@@Base+0x228>
   1991c:	bx	lr
   19920:	ldr	r0, [pc, #164]	; 199cc <flatcc_json_parser_error_string@@Base+0x22c>
   19924:	bx	lr
   19928:	ldr	r0, [pc, #160]	; 199d0 <flatcc_json_parser_error_string@@Base+0x230>
   1992c:	bx	lr
   19930:	ldr	r0, [pc, #156]	; 199d4 <flatcc_json_parser_error_string@@Base+0x234>
   19934:	bx	lr
   19938:	ldr	r0, [pc, #152]	; 199d8 <flatcc_json_parser_error_string@@Base+0x238>
   1993c:	bx	lr
   19940:	ldr	r0, [pc, #148]	; 199dc <flatcc_json_parser_error_string@@Base+0x23c>
   19944:	bx	lr
   19948:	ldr	r0, [pc, #144]	; 199e0 <flatcc_json_parser_error_string@@Base+0x240>
   1994c:	bx	lr
   19950:	ldr	r0, [pc, #140]	; 199e4 <flatcc_json_parser_error_string@@Base+0x244>
   19954:	bx	lr
   19958:	andeq	lr, r1, ip, lsr #18
   1995c:	andeq	lr, r1, r0, lsr r9
   19960:	andeq	lr, r1, r0, asr #18
   19964:	andeq	lr, r1, r0, asr r9
   19968:	andeq	lr, r1, r0, ror #18
   1996c:	andeq	lr, r1, r8, ror r9
   19970:	andeq	lr, r1, r8, lsl #19
   19974:	muleq	r1, r4, r9
   19978:	andeq	lr, r1, r0, lsr #19
   1997c:			; <UNDEFINED> instruction: 0x0001e9b4
   19980:	andeq	lr, r1, r8, asr #19
   19984:	ldrdeq	lr, [r1], -r8
   19988:	andeq	lr, r1, ip, ror #19
   1998c:	strdeq	lr, [r1], -ip
   19990:	andeq	lr, r1, r8, lsl sl
   19994:	andeq	lr, r1, ip, lsr #20
   19998:	andeq	lr, r1, ip, lsr sl
   1999c:	andeq	lr, r1, r0, asr sl
   199a0:	andeq	lr, r1, r0, ror #20
   199a4:	andeq	lr, r1, r0, ror sl
   199a8:	andeq	lr, r1, r4, lsl #21
   199ac:	muleq	r1, r4, sl
   199b0:	andeq	lr, r1, r4, lsr #21
   199b4:	andeq	lr, r1, r8, asr #21
   199b8:	ldrdeq	lr, [r1], -ip
   199bc:	strdeq	lr, [r1], -ip
   199c0:	andeq	lr, r1, ip, lsl fp
   199c4:	andeq	lr, r1, r8, lsr fp
   199c8:	andeq	lr, r1, r4, asr fp
   199cc:	andeq	lr, r1, ip, ror #22
   199d0:	andeq	lr, r1, ip, lsl #23
   199d4:	andeq	lr, r1, r4, lsr #23
   199d8:	andeq	lr, r1, r0, asr #23
   199dc:	ldrdeq	lr, [r1], -r0
   199e0:	andeq	lr, r1, r0, ror #23
   199e4:	andeq	lr, r1, r8, lsr #18

000199e8 <flatcc_json_parser_set_error@@Base>:
   199e8:	ldr	ip, [r0, #24]
   199ec:	cmp	ip, #0
   199f0:	bne	19a0c <flatcc_json_parser_set_error@@Base+0x24>
   199f4:	str	r3, [r0, #24]
   199f8:	ldr	r3, [r0, #4]
   199fc:	sub	r3, r1, r3
   19a00:	add	r3, r3, #1
   19a04:	str	r3, [r0, #20]
   19a08:	str	r1, [r0, #36]	; 0x24
   19a0c:	mov	r0, r2
   19a10:	bx	lr

00019a14 <flatcc_json_parser_string_part@@Base>:
   19a14:	push	{r4, lr}
   19a18:	cmp	r1, r2
   19a1c:	beq	19aa8 <flatcc_json_parser_string_part@@Base+0x94>
   19a20:	ldrb	ip, [r1]
   19a24:	cmp	ip, #34	; 0x22
   19a28:	cmpne	ip, #31
   19a2c:	movhi	r3, #1
   19a30:	movls	r3, #0
   19a34:	cmp	ip, #92	; 0x5c
   19a38:	moveq	r3, #0
   19a3c:	andne	r3, r3, #1
   19a40:	cmp	r3, #0
   19a44:	beq	19a84 <flatcc_json_parser_string_part@@Base+0x70>
   19a48:	add	r3, r1, #1
   19a4c:	mov	r4, r2
   19a50:	mov	r1, r3
   19a54:	cmp	r3, r4
   19a58:	beq	19aac <flatcc_json_parser_string_part@@Base+0x98>
   19a5c:	ldrb	lr, [r3], #1
   19a60:	cmp	lr, #34	; 0x22
   19a64:	cmpne	lr, #31
   19a68:	movhi	ip, #1
   19a6c:	movls	ip, #0
   19a70:	cmp	lr, #92	; 0x5c
   19a74:	moveq	ip, #0
   19a78:	andne	ip, ip, #1
   19a7c:	cmp	ip, #0
   19a80:	bne	19a50 <flatcc_json_parser_string_part@@Base+0x3c>
   19a84:	ldrb	r3, [r1]
   19a88:	cmp	r3, #31
   19a8c:	bls	19a98 <flatcc_json_parser_string_part@@Base+0x84>
   19a90:	mov	r0, r1
   19a94:	pop	{r4, pc}
   19a98:	mov	r3, #17
   19a9c:	bl	199e8 <flatcc_json_parser_set_error@@Base>
   19aa0:	mov	r1, r0
   19aa4:	b	19a90 <flatcc_json_parser_string_part@@Base+0x7c>
   19aa8:	mov	r1, r2
   19aac:	mov	r3, #20
   19ab0:	mov	r2, r1
   19ab4:	bl	199e8 <flatcc_json_parser_set_error@@Base>
   19ab8:	mov	r1, r0
   19abc:	b	19a90 <flatcc_json_parser_string_part@@Base+0x7c>

00019ac0 <flatcc_json_parser_space_ext@@Base>:
   19ac0:	push	{r4, lr}
   19ac4:	mov	r4, #0
   19ac8:	cmp	r1, r2
   19acc:	beq	19bf4 <flatcc_json_parser_space_ext@@Base+0x134>
   19ad0:	ldrb	r3, [r1]
   19ad4:	cmp	r3, #32
   19ad8:	bne	19b00 <flatcc_json_parser_space_ext@@Base+0x40>
   19adc:	add	r3, r1, #1
   19ae0:	mov	lr, r2
   19ae4:	mov	r1, r3
   19ae8:	cmp	r3, lr
   19aec:	beq	19bf8 <flatcc_json_parser_space_ext@@Base+0x138>
   19af0:	add	r3, r3, #1
   19af4:	ldrb	ip, [r1]
   19af8:	cmp	ip, #32
   19afc:	beq	19ae4 <flatcc_json_parser_space_ext@@Base+0x24>
   19b00:	ldrb	r3, [r1]
   19b04:	cmp	r3, #32
   19b08:	bls	19b60 <flatcc_json_parser_space_ext@@Base+0xa0>
   19b0c:	mov	r0, r1
   19b10:	pop	{r4, pc}
   19b14:	sub	r3, r2, r1
   19b18:	cmp	r3, #1
   19b1c:	movle	r3, r4
   19b20:	ble	19b34 <flatcc_json_parser_space_ext@@Base+0x74>
   19b24:	ldrb	r3, [r1, #1]
   19b28:	cmp	r3, #10
   19b2c:	movne	r3, #0
   19b30:	moveq	r3, #1
   19b34:	add	r1, r1, r3
   19b38:	ldr	r3, [r0, #16]
   19b3c:	add	r3, r3, #1
   19b40:	str	r3, [r0, #16]
   19b44:	add	r1, r1, #1
   19b48:	str	r1, [r0, #4]
   19b4c:	cmp	r2, r1
   19b50:	beq	19bec <flatcc_json_parser_space_ext@@Base+0x12c>
   19b54:	ldrb	r3, [r1]
   19b58:	cmp	r3, #32
   19b5c:	bhi	19be4 <flatcc_json_parser_space_ext@@Base+0x124>
   19b60:	sub	r3, r3, #9
   19b64:	cmp	r3, #23
   19b68:	ldrls	pc, [pc, r3, lsl #2]
   19b6c:	b	19bd8 <flatcc_json_parser_space_ext@@Base+0x118>
   19b70:	ldrdeq	r9, [r1], -r0
   19b74:	andeq	r9, r1, r8, lsr fp
   19b78:	ldrdeq	r9, [r1], -r8
   19b7c:	ldrdeq	r9, [r1], -r8
   19b80:	andeq	r9, r1, r4, lsl fp
   19b84:	ldrdeq	r9, [r1], -r8
   19b88:	ldrdeq	r9, [r1], -r8
   19b8c:	ldrdeq	r9, [r1], -r8
   19b90:	ldrdeq	r9, [r1], -r8
   19b94:	ldrdeq	r9, [r1], -r8
   19b98:	ldrdeq	r9, [r1], -r8
   19b9c:	ldrdeq	r9, [r1], -r8
   19ba0:	ldrdeq	r9, [r1], -r8
   19ba4:	ldrdeq	r9, [r1], -r8
   19ba8:	ldrdeq	r9, [r1], -r8
   19bac:	ldrdeq	r9, [r1], -r8
   19bb0:	ldrdeq	r9, [r1], -r8
   19bb4:	ldrdeq	r9, [r1], -r8
   19bb8:	ldrdeq	r9, [r1], -r8
   19bbc:	ldrdeq	r9, [r1], -r8
   19bc0:	ldrdeq	r9, [r1], -r8
   19bc4:	ldrdeq	r9, [r1], -r8
   19bc8:	ldrdeq	r9, [r1], -r8
   19bcc:	andeq	r9, r1, r8, asr #21
   19bd0:	add	r1, r1, #1
   19bd4:	b	19b4c <flatcc_json_parser_space_ext@@Base+0x8c>
   19bd8:	mov	r3, #5
   19bdc:	bl	199e8 <flatcc_json_parser_set_error@@Base>
   19be0:	pop	{r4, pc}
   19be4:	mov	r0, r1
   19be8:	pop	{r4, pc}
   19bec:	mov	r0, r2
   19bf0:	pop	{r4, pc}
   19bf4:	mov	r1, r2
   19bf8:	mov	r0, r1
   19bfc:	pop	{r4, pc}
   19c00:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19c04:	sub	sp, sp, #36	; 0x24
   19c08:	mov	r8, r0
   19c0c:	mov	r6, r1
   19c10:	mov	r7, r2
   19c14:	str	r3, [sp, #8]
   19c18:	mov	r3, #0
   19c1c:	ldr	r2, [sp, #72]	; 0x48
   19c20:	strb	r3, [r2]
   19c24:	cmp	r1, r7
   19c28:	beq	19dc0 <flatcc_json_parser_space_ext@@Base+0x300>
   19c2c:	ldrb	r3, [r1]
   19c30:	cmp	r3, #34	; 0x22
   19c34:	addeq	r6, r1, #1
   19c38:	moveq	r3, #0
   19c3c:	streq	r3, [r0, #12]
   19c40:	beq	19dcc <flatcc_json_parser_space_ext@@Base+0x30c>
   19c44:	cmp	r3, #46	; 0x2e
   19c48:	movne	r3, #1
   19c4c:	strne	r3, [r0, #12]
   19c50:	beq	19c68 <flatcc_json_parser_space_ext@@Base+0x1a8>
   19c54:	mov	fp, #0
   19c58:	str	fp, [sp, #12]
   19c5c:	add	sl, sp, #16
   19c60:	add	r9, sp, #24
   19c64:	b	19d08 <flatcc_json_parser_space_ext@@Base+0x248>
   19c68:	mov	r3, #5
   19c6c:	mov	r2, r7
   19c70:	mov	r1, r6
   19c74:	bl	199e8 <flatcc_json_parser_set_error@@Base>
   19c78:	mov	r6, r0
   19c7c:	ldr	r3, [r8, #12]
   19c80:	cmp	r3, #0
   19c84:	beq	19dcc <flatcc_json_parser_space_ext@@Base+0x30c>
   19c88:	b	19dfc <flatcc_json_parser_space_ext@@Base+0x33c>
   19c8c:	ldrb	r3, [r6, #1]
   19c90:	cmp	r3, #32
   19c94:	addhi	r6, r6, #1
   19c98:	bls	19de8 <flatcc_json_parser_space_ext@@Base+0x328>
   19c9c:	b	19dfc <flatcc_json_parser_space_ext@@Base+0x33c>
   19ca0:	mov	r4, r0
   19ca4:	cmp	fp, #0
   19ca8:	beq	19cb8 <flatcc_json_parser_space_ext@@Base+0x1f8>
   19cac:	ldr	r3, [r8, #12]
   19cb0:	cmp	r3, #0
   19cb4:	bne	19d64 <flatcc_json_parser_space_ext@@Base+0x2a4>
   19cb8:	ldr	r3, [sp, #20]
   19cbc:	cmp	r3, #0
   19cc0:	bne	19d80 <flatcc_json_parser_space_ext@@Base+0x2c0>
   19cc4:	ldrd	r2, [sp, #24]
   19cc8:	cmp	r3, #0
   19ccc:	cmpeq	r2, #255	; 0xff
   19cd0:	uxtbls	r3, r2
   19cd4:	strls	r3, [sp, #12]
   19cd8:	bhi	19da0 <flatcc_json_parser_space_ext@@Base+0x2e0>
   19cdc:	ldr	r3, [sp, #72]	; 0x48
   19ce0:	ldrb	r3, [r3]
   19ce4:	ldr	r2, [sp, #12]
   19ce8:	add	r3, r2, r3
   19cec:	ldr	r2, [sp, #72]	; 0x48
   19cf0:	strb	r3, [r2]
   19cf4:	add	fp, fp, #1
   19cf8:	ldr	r3, [sp, #16]
   19cfc:	cmp	r3, #0
   19d00:	beq	19db8 <flatcc_json_parser_space_ext@@Base+0x2f8>
   19d04:	mov	r6, r4
   19d08:	ldr	r5, [sp, #8]
   19d0c:	str	sl, [sp, #4]
   19d10:	str	r9, [sp]
   19d14:	ldr	r4, [r5]
   19d18:	add	r3, sp, #20
   19d1c:	mov	r2, r7
   19d20:	mov	r1, r6
   19d24:	mov	r0, r8
   19d28:	blx	r4
   19d2c:	cmp	r7, r0
   19d30:	beq	19e08 <flatcc_json_parser_space_ext@@Base+0x348>
   19d34:	cmp	r6, r0
   19d38:	bne	19ca0 <flatcc_json_parser_space_ext@@Base+0x1e0>
   19d3c:	ldr	r3, [r5, #4]!
   19d40:	cmp	r3, #0
   19d44:	bne	19d0c <flatcc_json_parser_space_ext@@Base+0x24c>
   19d48:	mov	r3, #23
   19d4c:	mov	r2, r7
   19d50:	mov	r1, r6
   19d54:	mov	r0, r8
   19d58:	bl	199e8 <flatcc_json_parser_set_error@@Base>
   19d5c:	mov	r7, r0
   19d60:	b	19e08 <flatcc_json_parser_space_ext@@Base+0x348>
   19d64:	mov	r3, #14
   19d68:	mov	r2, r7
   19d6c:	mov	r1, r0
   19d70:	mov	r0, r8
   19d74:	bl	199e8 <flatcc_json_parser_set_error@@Base>
   19d78:	mov	r7, r0
   19d7c:	b	19e08 <flatcc_json_parser_space_ext@@Base+0x348>
   19d80:	mov	r3, #8
   19d84:	mov	r2, r7
   19d88:	mov	r1, r4
   19d8c:	mov	r0, r8
   19d90:	bl	199e8 <flatcc_json_parser_set_error@@Base>
   19d94:	cmp	r7, r0
   19d98:	bne	19cdc <flatcc_json_parser_space_ext@@Base+0x21c>
   19d9c:	b	19e08 <flatcc_json_parser_space_ext@@Base+0x348>
   19da0:	mov	r3, #7
   19da4:	mov	r2, r7
   19da8:	mov	r1, r4
   19dac:	mov	r0, r8
   19db0:	bl	199e8 <flatcc_json_parser_set_error@@Base>
   19db4:	b	19d94 <flatcc_json_parser_space_ext@@Base+0x2d4>
   19db8:	mov	r7, r4
   19dbc:	b	19e08 <flatcc_json_parser_space_ext@@Base+0x348>
   19dc0:	ldr	r3, [r0, #12]
   19dc4:	cmp	r3, #0
   19dc8:	bne	19e14 <flatcc_json_parser_space_ext@@Base+0x354>
   19dcc:	sub	r3, r7, r6
   19dd0:	cmp	r3, #1
   19dd4:	ble	19de8 <flatcc_json_parser_space_ext@@Base+0x328>
   19dd8:	ldrb	r3, [r6]
   19ddc:	cmp	r3, #32
   19de0:	bhi	19dfc <flatcc_json_parser_space_ext@@Base+0x33c>
   19de4:	beq	19c8c <flatcc_json_parser_space_ext@@Base+0x1cc>
   19de8:	mov	r2, r7
   19dec:	mov	r1, r6
   19df0:	mov	r0, r8
   19df4:	bl	19ac0 <flatcc_json_parser_space_ext@@Base>
   19df8:	mov	r6, r0
   19dfc:	cmp	r7, r6
   19e00:	moveq	r7, r6
   19e04:	bne	19c54 <flatcc_json_parser_space_ext@@Base+0x194>
   19e08:	mov	r0, r7
   19e0c:	add	sp, sp, #36	; 0x24
   19e10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19e14:	mov	r7, r1
   19e18:	b	19e08 <flatcc_json_parser_space_ext@@Base+0x348>
   19e1c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19e20:	sub	sp, sp, #28
   19e24:	mov	r7, r0
   19e28:	mov	r4, r1
   19e2c:	mov	r6, r2
   19e30:	str	r3, [sp, #12]
   19e34:	ldr	r9, [sp, #64]	; 0x40
   19e38:	ldr	r8, [sp, #72]	; 0x48
   19e3c:	mov	r3, #0
   19e40:	str	r3, [sp, #20]
   19e44:	ldr	r0, [r0]
   19e48:	bl	15c14 <flatcc_builder_start_offset_vector@@Base>
   19e4c:	cmp	r0, #0
   19e50:	bne	1a1c0 <flatcc_json_parser_space_ext@@Base+0x700>
   19e54:	cmp	r4, r6
   19e58:	beq	19e68 <flatcc_json_parser_space_ext@@Base+0x3a8>
   19e5c:	ldrb	r3, [r4]
   19e60:	cmp	r3, #91	; 0x5b
   19e64:	beq	19e88 <flatcc_json_parser_space_ext@@Base+0x3c8>
   19e68:	mov	r3, #22
   19e6c:	mov	r2, r6
   19e70:	mov	r1, r4
   19e74:	mov	r0, r7
   19e78:	bl	199e8 <flatcc_json_parser_set_error@@Base>
   19e7c:	mov	sl, r0
   19e80:	mov	r5, #0
   19e84:	b	1a0ec <flatcc_json_parser_space_ext@@Base+0x62c>
   19e88:	add	r3, r4, #1
   19e8c:	str	r3, [sp, #8]
   19e90:	mov	sl, r6
   19e94:	sub	r3, r6, r3
   19e98:	cmp	r3, #1
   19e9c:	ble	19eb0 <flatcc_json_parser_space_ext@@Base+0x3f0>
   19ea0:	ldrb	r3, [r4, #1]
   19ea4:	cmp	r3, #32
   19ea8:	bhi	19ec4 <flatcc_json_parser_space_ext@@Base+0x404>
   19eac:	beq	19ef0 <flatcc_json_parser_space_ext@@Base+0x430>
   19eb0:	mov	r2, r6
   19eb4:	ldr	r1, [sp, #8]
   19eb8:	mov	r0, r7
   19ebc:	bl	19ac0 <flatcc_json_parser_space_ext@@Base>
   19ec0:	str	r0, [sp, #8]
   19ec4:	ldr	r3, [sp, #8]
   19ec8:	cmp	r6, r3
   19ecc:	beq	19edc <flatcc_json_parser_space_ext@@Base+0x41c>
   19ed0:	ldrb	r3, [r3]
   19ed4:	cmp	r3, #93	; 0x5d
   19ed8:	beq	19f08 <flatcc_json_parser_space_ext@@Base+0x448>
   19edc:	cmp	r9, #0
   19ee0:	beq	19f5c <flatcc_json_parser_space_ext@@Base+0x49c>
   19ee4:	mov	r5, #0
   19ee8:	add	fp, sp, #20
   19eec:	b	1a038 <flatcc_json_parser_space_ext@@Base+0x578>
   19ef0:	ldrb	r3, [r4, #2]
   19ef4:	cmp	r3, #32
   19ef8:	addhi	r3, r4, #2
   19efc:	strhi	r3, [sp, #8]
   19f00:	bls	19eb0 <flatcc_json_parser_space_ext@@Base+0x3f0>
   19f04:	b	19ec4 <flatcc_json_parser_space_ext@@Base+0x404>
   19f08:	ldr	r2, [sp, #8]
   19f0c:	add	sl, r2, #1
   19f10:	sub	r3, r6, sl
   19f14:	cmp	r3, #1
   19f18:	ble	19f2c <flatcc_json_parser_space_ext@@Base+0x46c>
   19f1c:	ldrb	r3, [r2, #1]
   19f20:	cmp	r3, #32
   19f24:	bhi	19e80 <flatcc_json_parser_space_ext@@Base+0x3c0>
   19f28:	beq	19f44 <flatcc_json_parser_space_ext@@Base+0x484>
   19f2c:	mov	r2, r6
   19f30:	mov	r1, sl
   19f34:	mov	r0, r7
   19f38:	bl	19ac0 <flatcc_json_parser_space_ext@@Base>
   19f3c:	mov	sl, r0
   19f40:	b	19e80 <flatcc_json_parser_space_ext@@Base+0x3c0>
   19f44:	ldrb	r3, [r2, #2]
   19f48:	cmp	r3, #32
   19f4c:	movhi	r3, r2
   19f50:	addhi	sl, r3, #2
   19f54:	bls	19f2c <flatcc_json_parser_space_ext@@Base+0x46c>
   19f58:	b	19e80 <flatcc_json_parser_space_ext@@Base+0x3c0>
   19f5c:	mov	r3, #30
   19f60:	mov	r2, r6
   19f64:	ldr	r1, [sp, #8]
   19f68:	mov	r0, r7
   19f6c:	bl	199e8 <flatcc_json_parser_set_error@@Base>
   19f70:	mov	sl, r0
   19f74:	b	1a1d8 <flatcc_json_parser_space_ext@@Base+0x718>
   19f78:	ldrb	r3, [r4, #1]
   19f7c:	cmp	r3, #32
   19f80:	addhi	r4, r4, #1
   19f84:	bls	1a0a0 <flatcc_json_parser_space_ext@@Base+0x5e0>
   19f88:	b	1a0b4 <flatcc_json_parser_space_ext@@Base+0x5f4>
   19f8c:	add	sl, r4, #1
   19f90:	sub	r3, r6, sl
   19f94:	cmp	r3, #1
   19f98:	ble	19fac <flatcc_json_parser_space_ext@@Base+0x4ec>
   19f9c:	ldrb	r3, [r4, #1]
   19fa0:	cmp	r3, #32
   19fa4:	bhi	1a0e8 <flatcc_json_parser_space_ext@@Base+0x628>
   19fa8:	beq	19fc4 <flatcc_json_parser_space_ext@@Base+0x504>
   19fac:	mov	r2, r6
   19fb0:	mov	r1, sl
   19fb4:	mov	r0, r7
   19fb8:	bl	19ac0 <flatcc_json_parser_space_ext@@Base>
   19fbc:	mov	sl, r0
   19fc0:	b	1a0e8 <flatcc_json_parser_space_ext@@Base+0x628>
   19fc4:	ldrb	r3, [r4, #2]
   19fc8:	cmp	r3, #32
   19fcc:	addhi	sl, r4, #2
   19fd0:	bls	19fac <flatcc_json_parser_space_ext@@Base+0x4ec>
   19fd4:	b	1a0e8 <flatcc_json_parser_space_ext@@Base+0x628>
   19fd8:	add	r3, r4, #1
   19fdc:	str	r3, [sp, #8]
   19fe0:	sub	r3, sl, r3
   19fe4:	cmp	r3, #1
   19fe8:	ble	19ffc <flatcc_json_parser_space_ext@@Base+0x53c>
   19fec:	ldrb	r3, [r4, #1]
   19ff0:	cmp	r3, #32
   19ff4:	bhi	1a010 <flatcc_json_parser_space_ext@@Base+0x550>
   19ff8:	beq	1a110 <flatcc_json_parser_space_ext@@Base+0x650>
   19ffc:	mov	r2, r6
   1a000:	ldr	r1, [sp, #8]
   1a004:	mov	r0, r7
   1a008:	bl	19ac0 <flatcc_json_parser_space_ext@@Base>
   1a00c:	str	r0, [sp, #8]
   1a010:	ldr	r3, [sp, #8]
   1a014:	cmp	r6, r3
   1a018:	beq	1a128 <flatcc_json_parser_space_ext@@Base+0x668>
   1a01c:	ldr	r3, [sp, #8]
   1a020:	ldrb	r3, [r3]
   1a024:	cmp	r3, #93	; 0x5d
   1a028:	beq	1a144 <flatcc_json_parser_space_ext@@Base+0x684>
   1a02c:	add	r5, r5, #1
   1a030:	cmp	r9, r5
   1a034:	beq	19f5c <flatcc_json_parser_space_ext@@Base+0x49c>
   1a038:	ldr	r1, [sp, #12]
   1a03c:	ldr	r0, [r7]
   1a040:	bl	14afc <flatcc_builder_get_user_frame_ptr@@Base>
   1a044:	ldrb	r3, [r0, r5]
   1a048:	str	fp, [sp]
   1a04c:	mov	r2, r6
   1a050:	ldr	r1, [sp, #8]
   1a054:	mov	r0, r7
   1a058:	blx	r8
   1a05c:	mov	r4, r0
   1a060:	cmp	r6, r0
   1a064:	beq	1a208 <flatcc_json_parser_space_ext@@Base+0x748>
   1a068:	mov	r1, #1
   1a06c:	ldr	r0, [r7]
   1a070:	bl	155e4 <flatcc_builder_extend_offset_vector@@Base>
   1a074:	cmp	r0, #0
   1a078:	beq	1a1c0 <flatcc_json_parser_space_ext@@Base+0x700>
   1a07c:	ldr	r3, [sp, #20]
   1a080:	str	r3, [r0]
   1a084:	sub	r3, sl, r4
   1a088:	cmp	r3, #1
   1a08c:	ble	1a0a0 <flatcc_json_parser_space_ext@@Base+0x5e0>
   1a090:	ldrb	r3, [r4]
   1a094:	cmp	r3, #32
   1a098:	bhi	1a0bc <flatcc_json_parser_space_ext@@Base+0x5fc>
   1a09c:	beq	19f78 <flatcc_json_parser_space_ext@@Base+0x4b8>
   1a0a0:	mov	r2, r6
   1a0a4:	mov	r1, r4
   1a0a8:	mov	r0, r7
   1a0ac:	bl	19ac0 <flatcc_json_parser_space_ext@@Base>
   1a0b0:	mov	r4, r0
   1a0b4:	cmp	r6, r4
   1a0b8:	beq	1a210 <flatcc_json_parser_space_ext@@Base+0x750>
   1a0bc:	ldrb	r3, [r4]
   1a0c0:	cmp	r3, #44	; 0x2c
   1a0c4:	beq	19fd8 <flatcc_json_parser_space_ext@@Base+0x518>
   1a0c8:	cmp	r3, #93	; 0x5d
   1a0cc:	beq	19f8c <flatcc_json_parser_space_ext@@Base+0x4cc>
   1a0d0:	mov	r3, #9
   1a0d4:	mov	r2, r6
   1a0d8:	mov	r1, r4
   1a0dc:	mov	r0, r7
   1a0e0:	bl	199e8 <flatcc_json_parser_set_error@@Base>
   1a0e4:	mov	sl, r0
   1a0e8:	add	r5, r5, #1
   1a0ec:	cmp	r9, r5
   1a0f0:	beq	1a198 <flatcc_json_parser_space_ext@@Base+0x6d8>
   1a0f4:	mov	r3, #30
   1a0f8:	mov	r2, r6
   1a0fc:	mov	r1, sl
   1a100:	mov	r0, r7
   1a104:	bl	199e8 <flatcc_json_parser_set_error@@Base>
   1a108:	mov	sl, r0
   1a10c:	b	1a1d8 <flatcc_json_parser_space_ext@@Base+0x718>
   1a110:	ldrb	r3, [r4, #2]
   1a114:	cmp	r3, #32
   1a118:	addhi	r3, r4, #2
   1a11c:	strhi	r3, [sp, #8]
   1a120:	bls	19ffc <flatcc_json_parser_space_ext@@Base+0x53c>
   1a124:	b	1a010 <flatcc_json_parser_space_ext@@Base+0x550>
   1a128:	mov	r3, #9
   1a12c:	mov	r2, r6
   1a130:	ldr	r1, [sp, #8]
   1a134:	mov	r0, r7
   1a138:	bl	199e8 <flatcc_json_parser_set_error@@Base>
   1a13c:	mov	sl, r0
   1a140:	b	1a0e8 <flatcc_json_parser_space_ext@@Base+0x628>
   1a144:	ldr	r2, [sp, #8]
   1a148:	add	sl, r2, #1
   1a14c:	sub	r3, r6, sl
   1a150:	cmp	r3, #1
   1a154:	ble	1a168 <flatcc_json_parser_space_ext@@Base+0x6a8>
   1a158:	ldrb	r3, [r2, #1]
   1a15c:	cmp	r3, #32
   1a160:	bhi	1a0e8 <flatcc_json_parser_space_ext@@Base+0x628>
   1a164:	beq	1a180 <flatcc_json_parser_space_ext@@Base+0x6c0>
   1a168:	mov	r2, r6
   1a16c:	mov	r1, sl
   1a170:	mov	r0, r7
   1a174:	bl	19ac0 <flatcc_json_parser_space_ext@@Base>
   1a178:	mov	sl, r0
   1a17c:	b	1a0e8 <flatcc_json_parser_space_ext@@Base+0x628>
   1a180:	ldrb	r3, [r2, #2]
   1a184:	cmp	r3, #32
   1a188:	movhi	r3, r2
   1a18c:	addhi	sl, r3, #2
   1a190:	bls	1a168 <flatcc_json_parser_space_ext@@Base+0x6a8>
   1a194:	b	1a0e8 <flatcc_json_parser_space_ext@@Base+0x628>
   1a198:	ldr	r1, [sp, #12]
   1a19c:	ldr	r0, [r7]
   1a1a0:	bl	14afc <flatcc_builder_get_user_frame_ptr@@Base>
   1a1a4:	mov	r1, r0
   1a1a8:	ldr	r0, [r7]
   1a1ac:	bl	16de0 <flatcc_builder_end_offset_vector_for_unions@@Base>
   1a1b0:	str	r0, [sp, #20]
   1a1b4:	cmp	r0, #0
   1a1b8:	moveq	r4, sl
   1a1bc:	bne	1a1e4 <flatcc_json_parser_space_ext@@Base+0x724>
   1a1c0:	mov	r3, #33	; 0x21
   1a1c4:	mov	r2, r6
   1a1c8:	mov	r1, r4
   1a1cc:	mov	r0, r7
   1a1d0:	bl	199e8 <flatcc_json_parser_set_error@@Base>
   1a1d4:	mov	sl, r0
   1a1d8:	mov	r0, sl
   1a1dc:	add	sp, sp, #28
   1a1e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a1e4:	ldrh	r1, [sp, #68]	; 0x44
   1a1e8:	ldr	r0, [r7]
   1a1ec:	bl	17a00 <flatcc_builder_table_add_offset@@Base>
   1a1f0:	cmp	r0, #0
   1a1f4:	ldrne	r3, [sp, #20]
   1a1f8:	strne	r3, [r0]
   1a1fc:	bne	1a1d8 <flatcc_json_parser_space_ext@@Base+0x718>
   1a200:	mov	r4, sl
   1a204:	b	1a1c0 <flatcc_json_parser_space_ext@@Base+0x700>
   1a208:	mov	sl, r6
   1a20c:	b	1a1d8 <flatcc_json_parser_space_ext@@Base+0x718>
   1a210:	mov	sl, r6
   1a214:	b	1a0e8 <flatcc_json_parser_space_ext@@Base+0x628>

0001a218 <flatcc_json_parser_string_escape@@Base>:
   1a218:	push	{r4, lr}
   1a21c:	sub	ip, r2, r1
   1a220:	cmp	ip, #1
   1a224:	ble	1a234 <flatcc_json_parser_string_escape@@Base+0x1c>
   1a228:	ldrb	lr, [r1]
   1a22c:	cmp	lr, #92	; 0x5c
   1a230:	beq	1a248 <flatcc_json_parser_string_escape@@Base+0x30>
   1a234:	mov	ip, #0
   1a238:	strb	ip, [r3]
   1a23c:	mov	r3, #18
   1a240:	bl	199e8 <flatcc_json_parser_set_error@@Base>
   1a244:	pop	{r4, pc}
   1a248:	ldrb	lr, [r1, #1]
   1a24c:	sub	lr, lr, #34	; 0x22
   1a250:	cmp	lr, #86	; 0x56
   1a254:	ldrls	pc, [pc, lr, lsl #2]
   1a258:	b	1a744 <flatcc_json_parser_string_escape@@Base+0x52c>
   1a25c:	strdeq	sl, [r1], -ip
   1a260:	andeq	sl, r1, r4, asr #14
   1a264:	andeq	sl, r1, r4, asr #14
   1a268:	andeq	sl, r1, r4, asr #14
   1a26c:	andeq	sl, r1, r4, asr #14
   1a270:	andeq	sl, r1, r4, asr #14
   1a274:	andeq	sl, r1, r4, asr #14
   1a278:	andeq	sl, r1, r4, asr #14
   1a27c:	andeq	sl, r1, r4, asr #14
   1a280:	andeq	sl, r1, r4, asr #14
   1a284:	andeq	sl, r1, r4, asr #14
   1a288:	andeq	sl, r1, r4, asr #14
   1a28c:	andeq	sl, r1, r4, asr #14
   1a290:	andeq	sl, r1, ip, lsr #14
   1a294:	andeq	sl, r1, r4, asr #14
   1a298:	andeq	sl, r1, r4, asr #14
   1a29c:	andeq	sl, r1, r4, asr #14
   1a2a0:	andeq	sl, r1, r4, asr #14
   1a2a4:	andeq	sl, r1, r4, asr #14
   1a2a8:	andeq	sl, r1, r4, asr #14
   1a2ac:	andeq	sl, r1, r4, asr #14
   1a2b0:	andeq	sl, r1, r4, asr #14
   1a2b4:	andeq	sl, r1, r4, asr #14
   1a2b8:	andeq	sl, r1, r4, asr #14
   1a2bc:	andeq	sl, r1, r4, asr #14
   1a2c0:	andeq	sl, r1, r4, asr #14
   1a2c4:	andeq	sl, r1, r4, asr #14
   1a2c8:	andeq	sl, r1, r4, asr #14
   1a2cc:	andeq	sl, r1, r4, asr #14
   1a2d0:	andeq	sl, r1, r4, asr #14
   1a2d4:	andeq	sl, r1, r4, asr #14
   1a2d8:	andeq	sl, r1, r4, asr #14
   1a2dc:	andeq	sl, r1, r4, asr #14
   1a2e0:	andeq	sl, r1, r4, asr #14
   1a2e4:	andeq	sl, r1, r4, asr #14
   1a2e8:	andeq	sl, r1, r4, asr #14
   1a2ec:	andeq	sl, r1, r4, asr #14
   1a2f0:	andeq	sl, r1, r4, asr #14
   1a2f4:	andeq	sl, r1, r4, asr #14
   1a2f8:	andeq	sl, r1, r4, asr #14
   1a2fc:	andeq	sl, r1, r4, asr #14
   1a300:	andeq	sl, r1, r4, asr #14
   1a304:	andeq	sl, r1, r4, asr #14
   1a308:	andeq	sl, r1, r4, asr #14
   1a30c:	andeq	sl, r1, r4, asr #14
   1a310:	andeq	sl, r1, r4, asr #14
   1a314:	andeq	sl, r1, r4, asr #14
   1a318:	andeq	sl, r1, r4, asr #14
   1a31c:	andeq	sl, r1, r4, asr #14
   1a320:	andeq	sl, r1, r4, asr #14
   1a324:	andeq	sl, r1, r4, asr #14
   1a328:	andeq	sl, r1, r4, asr #14
   1a32c:	andeq	sl, r1, r4, asr #14
   1a330:	andeq	sl, r1, r4, asr #14
   1a334:	andeq	sl, r1, r4, asr #14
   1a338:	andeq	sl, r1, r4, asr #14
   1a33c:	andeq	sl, r1, r4, asr #14
   1a340:	andeq	sl, r1, r4, asr #14
   1a344:	andeq	sl, r1, r4, lsl r7
   1a348:	andeq	sl, r1, r4, asr #14
   1a34c:	andeq	sl, r1, r4, asr #14
   1a350:	andeq	sl, r1, r4, asr #14
   1a354:	andeq	sl, r1, r4, asr #14
   1a358:	andeq	sl, r1, r4, asr #14
   1a35c:	andeq	sl, r1, ip, asr #13
   1a360:	andeq	sl, r1, r4, asr #14
   1a364:	andeq	sl, r1, r4, asr #14
   1a368:	andeq	sl, r1, r4, asr #14
   1a36c:	andeq	sl, r1, r4, ror #13
   1a370:	andeq	sl, r1, r4, asr #14
   1a374:	andeq	sl, r1, r4, asr #14
   1a378:	andeq	sl, r1, r4, asr #14
   1a37c:	andeq	sl, r1, r4, asr #14
   1a380:	andeq	sl, r1, r4, asr #14
   1a384:	andeq	sl, r1, r4, asr #14
   1a388:	andeq	sl, r1, r4, asr #14
   1a38c:	muleq	r1, ip, r6
   1a390:	andeq	sl, r1, r4, asr #14
   1a394:	andeq	sl, r1, r4, asr #14
   1a398:	andeq	sl, r1, r4, asr #14
   1a39c:			; <UNDEFINED> instruction: 0x0001a6b4
   1a3a0:	andeq	sl, r1, r4, asr #14
   1a3a4:	andeq	sl, r1, r4, lsl #13
   1a3a8:	andeq	sl, r1, r4, lsl #9
   1a3ac:	andeq	sl, r1, r4, asr #14
   1a3b0:	andeq	sl, r1, r4, asr #14
   1a3b4:			; <UNDEFINED> instruction: 0x0001a3b8
   1a3b8:	mov	lr, #1
   1a3bc:	strb	lr, [r3]
   1a3c0:	cmp	ip, #3
   1a3c4:	ble	1a448 <flatcc_json_parser_string_escape@@Base+0x230>
   1a3c8:	ldrb	ip, [r1, #2]
   1a3cc:	sub	lr, ip, #48	; 0x30
   1a3d0:	uxtb	lr, lr
   1a3d4:	cmp	lr, #9
   1a3d8:	lslls	ip, ip, #4
   1a3dc:	andls	ip, ip, #240	; 0xf0
   1a3e0:	bls	1a404 <flatcc_json_parser_string_escape@@Base+0x1ec>
   1a3e4:	orr	ip, ip, #32
   1a3e8:	sub	lr, ip, #97	; 0x61
   1a3ec:	uxtb	lr, lr
   1a3f0:	cmp	lr, #5
   1a3f4:	bhi	1a45c <flatcc_json_parser_string_escape@@Base+0x244>
   1a3f8:	sub	ip, ip, #87	; 0x57
   1a3fc:	lsl	ip, ip, #4
   1a400:	uxtb	ip, ip
   1a404:	ldrb	lr, [r1, #3]
   1a408:	sub	r4, lr, #48	; 0x30
   1a40c:	uxtb	r4, r4
   1a410:	cmp	r4, #9
   1a414:	orrls	ip, r4, ip
   1a418:	bls	1a43c <flatcc_json_parser_string_escape@@Base+0x224>
   1a41c:	orr	lr, lr, #32
   1a420:	sub	r4, lr, #97	; 0x61
   1a424:	uxtb	r4, r4
   1a428:	cmp	r4, #5
   1a42c:	bhi	1a470 <flatcc_json_parser_string_escape@@Base+0x258>
   1a430:	sub	lr, lr, #87	; 0x57
   1a434:	orr	ip, lr, ip
   1a438:	uxtb	ip, ip
   1a43c:	strb	ip, [r3, #1]
   1a440:	add	r0, r1, #4
   1a444:	pop	{r4, pc}
   1a448:	mov	ip, #0
   1a44c:	strb	ip, [r3]
   1a450:	mov	r3, #18
   1a454:	bl	199e8 <flatcc_json_parser_set_error@@Base>
   1a458:	pop	{r4, pc}
   1a45c:	mov	ip, #0
   1a460:	strb	ip, [r3]
   1a464:	mov	r3, #18
   1a468:	bl	199e8 <flatcc_json_parser_set_error@@Base>
   1a46c:	pop	{r4, pc}
   1a470:	mov	ip, #0
   1a474:	strb	ip, [r3]
   1a478:	mov	r3, #18
   1a47c:	bl	199e8 <flatcc_json_parser_set_error@@Base>
   1a480:	pop	{r4, pc}
   1a484:	cmp	ip, #5
   1a488:	ble	1a54c <flatcc_json_parser_string_escape@@Base+0x334>
   1a48c:	ldrb	ip, [r1, #2]
   1a490:	sub	lr, ip, #48	; 0x30
   1a494:	uxtb	lr, lr
   1a498:	cmp	lr, #9
   1a49c:	lslls	ip, ip, #12
   1a4a0:	andls	lr, ip, #61440	; 0xf000
   1a4a4:	bls	1a4c8 <flatcc_json_parser_string_escape@@Base+0x2b0>
   1a4a8:	orr	ip, ip, #32
   1a4ac:	sub	lr, ip, #97	; 0x61
   1a4b0:	uxtb	lr, lr
   1a4b4:	cmp	lr, #5
   1a4b8:	bhi	1a560 <flatcc_json_parser_string_escape@@Base+0x348>
   1a4bc:	sub	ip, ip, #87	; 0x57
   1a4c0:	lsl	ip, ip, #12
   1a4c4:	and	lr, ip, #61440	; 0xf000
   1a4c8:	ldrb	ip, [r1, #3]
   1a4cc:	sub	r4, ip, #48	; 0x30
   1a4d0:	uxtb	r4, r4
   1a4d4:	cmp	r4, #9
   1a4d8:	bhi	1a574 <flatcc_json_parser_string_escape@@Base+0x35c>
   1a4dc:	sub	ip, ip, #48	; 0x30
   1a4e0:	uxth	ip, ip
   1a4e4:	orr	ip, lr, ip, lsl #8
   1a4e8:	and	ip, ip, #65280	; 0xff00
   1a4ec:	ldrb	lr, [r1, #4]
   1a4f0:	sub	r4, lr, #48	; 0x30
   1a4f4:	uxtb	r4, r4
   1a4f8:	cmp	r4, #9
   1a4fc:	bhi	1a5b0 <flatcc_json_parser_string_escape@@Base+0x398>
   1a500:	sub	lr, lr, #48	; 0x30
   1a504:	uxth	lr, lr
   1a508:	orr	ip, ip, lr, lsl #4
   1a50c:	uxth	ip, ip
   1a510:	ldrb	lr, [r1, #5]
   1a514:	sub	r4, lr, #48	; 0x30
   1a518:	uxtb	r4, r4
   1a51c:	cmp	r4, #9
   1a520:	bhi	1a5ec <flatcc_json_parser_string_escape@@Base+0x3d4>
   1a524:	sub	r2, lr, #48	; 0x30
   1a528:	orr	r2, ip, r2
   1a52c:	uxth	r2, r2
   1a530:	cmp	r2, #127	; 0x7f
   1a534:	bhi	1a620 <flatcc_json_parser_string_escape@@Base+0x408>
   1a538:	mov	r0, #1
   1a53c:	strb	r0, [r3]
   1a540:	strb	r2, [r3, #1]
   1a544:	add	r0, r1, #6
   1a548:	pop	{r4, pc}
   1a54c:	mov	ip, #0
   1a550:	strb	ip, [r3]
   1a554:	mov	r3, #18
   1a558:	bl	199e8 <flatcc_json_parser_set_error@@Base>
   1a55c:	pop	{r4, pc}
   1a560:	mov	ip, #0
   1a564:	strb	ip, [r3]
   1a568:	mov	r3, #18
   1a56c:	bl	199e8 <flatcc_json_parser_set_error@@Base>
   1a570:	pop	{r4, pc}
   1a574:	orr	ip, ip, #32
   1a578:	sub	r4, ip, #97	; 0x61
   1a57c:	uxtb	r4, r4
   1a580:	cmp	r4, #5
   1a584:	bhi	1a59c <flatcc_json_parser_string_escape@@Base+0x384>
   1a588:	sub	ip, ip, #87	; 0x57
   1a58c:	uxth	ip, ip
   1a590:	orr	ip, lr, ip, lsl #8
   1a594:	and	ip, ip, #65280	; 0xff00
   1a598:	b	1a4ec <flatcc_json_parser_string_escape@@Base+0x2d4>
   1a59c:	mov	ip, #0
   1a5a0:	strb	ip, [r3]
   1a5a4:	mov	r3, #18
   1a5a8:	bl	199e8 <flatcc_json_parser_set_error@@Base>
   1a5ac:	pop	{r4, pc}
   1a5b0:	orr	lr, lr, #32
   1a5b4:	sub	r4, lr, #97	; 0x61
   1a5b8:	uxtb	r4, r4
   1a5bc:	cmp	r4, #5
   1a5c0:	bhi	1a5d8 <flatcc_json_parser_string_escape@@Base+0x3c0>
   1a5c4:	sub	lr, lr, #87	; 0x57
   1a5c8:	uxth	lr, lr
   1a5cc:	orr	ip, ip, lr, lsl #4
   1a5d0:	uxth	ip, ip
   1a5d4:	b	1a510 <flatcc_json_parser_string_escape@@Base+0x2f8>
   1a5d8:	mov	ip, #0
   1a5dc:	strb	ip, [r3]
   1a5e0:	mov	r3, #18
   1a5e4:	bl	199e8 <flatcc_json_parser_set_error@@Base>
   1a5e8:	pop	{r4, pc}
   1a5ec:	orr	lr, lr, #32
   1a5f0:	sub	r4, lr, #97	; 0x61
   1a5f4:	uxtb	r4, r4
   1a5f8:	cmp	r4, #5
   1a5fc:	subls	r2, lr, #87	; 0x57
   1a600:	orrls	r2, ip, r2
   1a604:	uxthls	r2, r2
   1a608:	bls	1a530 <flatcc_json_parser_string_escape@@Base+0x318>
   1a60c:	mov	ip, #0
   1a610:	strb	ip, [r3]
   1a614:	mov	r3, #18
   1a618:	bl	199e8 <flatcc_json_parser_set_error@@Base>
   1a61c:	pop	{r4, pc}
   1a620:	cmp	r2, #2048	; 0x800
   1a624:	bcs	1a650 <flatcc_json_parser_string_escape@@Base+0x438>
   1a628:	mov	r0, #2
   1a62c:	strb	r0, [r3]
   1a630:	mvn	r0, #63	; 0x3f
   1a634:	orr	r0, r0, r2, lsr #6
   1a638:	strb	r0, [r3, #1]
   1a63c:	and	r2, r2, #63	; 0x3f
   1a640:	mvn	r2, r2, lsl #25
   1a644:	mvn	r2, r2, lsr #25
   1a648:	strb	r2, [r3, #2]
   1a64c:	b	1a544 <flatcc_json_parser_string_escape@@Base+0x32c>
   1a650:	mov	r0, #3
   1a654:	strb	r0, [r3]
   1a658:	mvn	r0, #31
   1a65c:	orr	r0, r0, r2, lsr #12
   1a660:	strb	r0, [r3, #1]
   1a664:	lsl	r0, r2, #20
   1a668:	mvn	ip, #127	; 0x7f
   1a66c:	orr	r0, ip, r0, lsr #26
   1a670:	strb	r0, [r3, #2]
   1a674:	and	r2, r2, #63	; 0x3f
   1a678:	orr	r2, r2, ip
   1a67c:	strb	r2, [r3, #3]
   1a680:	b	1a544 <flatcc_json_parser_string_escape@@Base+0x32c>
   1a684:	mov	r2, #1
   1a688:	strb	r2, [r3]
   1a68c:	mov	r2, #9
   1a690:	strb	r2, [r3, #1]
   1a694:	add	r0, r1, #2
   1a698:	pop	{r4, pc}
   1a69c:	mov	r2, #1
   1a6a0:	strb	r2, [r3]
   1a6a4:	mov	r2, #10
   1a6a8:	strb	r2, [r3, #1]
   1a6ac:	add	r0, r1, #2
   1a6b0:	pop	{r4, pc}
   1a6b4:	mov	r2, #1
   1a6b8:	strb	r2, [r3]
   1a6bc:	mov	r2, #13
   1a6c0:	strb	r2, [r3, #1]
   1a6c4:	add	r0, r1, #2
   1a6c8:	pop	{r4, pc}
   1a6cc:	mov	r2, #1
   1a6d0:	strb	r2, [r3]
   1a6d4:	mov	r2, #8
   1a6d8:	strb	r2, [r3, #1]
   1a6dc:	add	r0, r1, #2
   1a6e0:	pop	{r4, pc}
   1a6e4:	mov	r2, #1
   1a6e8:	strb	r2, [r3]
   1a6ec:	mov	r2, #12
   1a6f0:	strb	r2, [r3, #1]
   1a6f4:	add	r0, r1, #2
   1a6f8:	pop	{r4, pc}
   1a6fc:	mov	r2, #1
   1a700:	strb	r2, [r3]
   1a704:	mov	r2, #34	; 0x22
   1a708:	strb	r2, [r3, #1]
   1a70c:	add	r0, r1, #2
   1a710:	pop	{r4, pc}
   1a714:	mov	r2, #1
   1a718:	strb	r2, [r3]
   1a71c:	mov	r2, #92	; 0x5c
   1a720:	strb	r2, [r3, #1]
   1a724:	add	r0, r1, #2
   1a728:	pop	{r4, pc}
   1a72c:	mov	r2, #1
   1a730:	strb	r2, [r3]
   1a734:	mov	r2, #47	; 0x2f
   1a738:	strb	r2, [r3, #1]
   1a73c:	add	r0, r1, #2
   1a740:	pop	{r4, pc}
   1a744:	mov	ip, #0
   1a748:	strb	ip, [r3]
   1a74c:	mov	r3, #18
   1a750:	bl	199e8 <flatcc_json_parser_set_error@@Base>
   1a754:	pop	{r4, pc}

0001a758 <flatcc_json_parser_skip_constant@@Base>:
   1a758:	push	{r4, r5, r6, lr}
   1a75c:	mov	r6, r0
   1a760:	mov	r4, r1
   1a764:	mov	r5, r2
   1a768:	cmp	r1, r2
   1a76c:	bne	1a780 <flatcc_json_parser_skip_constant@@Base+0x28>
   1a770:	b	1a814 <flatcc_json_parser_skip_constant@@Base+0xbc>
   1a774:	add	r4, r4, #1
   1a778:	cmp	r5, r4
   1a77c:	beq	1a814 <flatcc_json_parser_skip_constant@@Base+0xbc>
   1a780:	ldrb	r3, [r4]
   1a784:	cmp	r3, #95	; 0x5f
   1a788:	movne	r2, #0
   1a78c:	moveq	r2, #1
   1a790:	orrs	r2, r2, r3, lsr #7
   1a794:	bne	1a774 <flatcc_json_parser_skip_constant@@Base+0x1c>
   1a798:	sub	r2, r3, #48	; 0x30
   1a79c:	uxtb	r2, r2
   1a7a0:	cmp	r3, #46	; 0x2e
   1a7a4:	cmpne	r2, #9
   1a7a8:	bls	1a774 <flatcc_json_parser_skip_constant@@Base+0x1c>
   1a7ac:	orr	r2, r3, #32
   1a7b0:	sub	r2, r2, #97	; 0x61
   1a7b4:	uxtb	r2, r2
   1a7b8:	cmp	r2, #25
   1a7bc:	addls	r4, r4, #1
   1a7c0:	bls	1a778 <flatcc_json_parser_skip_constant@@Base+0x20>
   1a7c4:	sub	r2, r5, r4
   1a7c8:	cmp	r2, #1
   1a7cc:	ble	1a7dc <flatcc_json_parser_skip_constant@@Base+0x84>
   1a7d0:	cmp	r3, #32
   1a7d4:	bhi	1a810 <flatcc_json_parser_skip_constant@@Base+0xb8>
   1a7d8:	beq	1a7fc <flatcc_json_parser_skip_constant@@Base+0xa4>
   1a7dc:	mov	r2, r5
   1a7e0:	mov	r1, r4
   1a7e4:	mov	r0, r6
   1a7e8:	bl	19ac0 <flatcc_json_parser_space_ext@@Base>
   1a7ec:	cmp	r0, r4
   1a7f0:	beq	1a81c <flatcc_json_parser_skip_constant@@Base+0xc4>
   1a7f4:	mov	r4, r0
   1a7f8:	b	1a778 <flatcc_json_parser_skip_constant@@Base+0x20>
   1a7fc:	ldrb	r3, [r4, #1]
   1a800:	cmp	r3, #32
   1a804:	addhi	r0, r4, #1
   1a808:	bls	1a7dc <flatcc_json_parser_skip_constant@@Base+0x84>
   1a80c:	b	1a7ec <flatcc_json_parser_skip_constant@@Base+0x94>
   1a810:	mov	r5, r4
   1a814:	mov	r0, r5
   1a818:	pop	{r4, r5, r6, pc}
   1a81c:	mov	r5, r0
   1a820:	b	1a814 <flatcc_json_parser_skip_constant@@Base+0xbc>

0001a824 <flatcc_json_parser_match_constant@@Base>:
   1a824:	push	{r4, r5, r6, r7, r8, lr}
   1a828:	ldr	r5, [sp, #24]
   1a82c:	sub	ip, r2, r1
   1a830:	cmp	r3, ip
   1a834:	bge	1a88c <flatcc_json_parser_match_constant@@Base+0x68>
   1a838:	mov	r6, r2
   1a83c:	mov	r7, r1
   1a840:	mov	ip, r0
   1a844:	add	r4, r1, r3
   1a848:	ldr	r2, [r0, #12]
   1a84c:	cmp	r2, #0
   1a850:	bne	1a89c <flatcc_json_parser_match_constant@@Base+0x78>
   1a854:	ldrb	r3, [r1, r3]
   1a858:	cmp	r3, #32
   1a85c:	beq	1a95c <flatcc_json_parser_match_constant@@Base+0x138>
   1a860:	cmp	r3, #34	; 0x22
   1a864:	beq	1a9b4 <flatcc_json_parser_match_constant@@Base+0x190>
   1a868:	cmp	r3, #92	; 0x5c
   1a86c:	bne	1aa04 <flatcc_json_parser_match_constant@@Base+0x1e0>
   1a870:	mov	r3, #0
   1a874:	str	r3, [r5]
   1a878:	mov	r3, #18
   1a87c:	mov	r2, r6
   1a880:	mov	r1, r4
   1a884:	bl	199e8 <flatcc_json_parser_set_error@@Base>
   1a888:	pop	{r4, r5, r6, r7, r8, pc}
   1a88c:	mov	r3, #0
   1a890:	str	r3, [r5]
   1a894:	mov	r0, r1
   1a898:	pop	{r4, r5, r6, r7, r8, pc}
   1a89c:	sub	r2, r6, r4
   1a8a0:	cmp	r2, #1
   1a8a4:	ble	1a8b8 <flatcc_json_parser_match_constant@@Base+0x94>
   1a8a8:	ldrb	r3, [r1, r3]
   1a8ac:	cmp	r3, #32
   1a8b0:	bhi	1aa14 <flatcc_json_parser_match_constant@@Base+0x1f0>
   1a8b4:	beq	1a930 <flatcc_json_parser_match_constant@@Base+0x10c>
   1a8b8:	mov	r2, r6
   1a8bc:	mov	r1, r4
   1a8c0:	mov	r0, ip
   1a8c4:	bl	19ac0 <flatcc_json_parser_space_ext@@Base>
   1a8c8:	cmp	r6, r0
   1a8cc:	beq	1aa20 <flatcc_json_parser_match_constant@@Base+0x1fc>
   1a8d0:	cmp	r4, r0
   1a8d4:	beq	1a904 <flatcc_json_parser_match_constant@@Base+0xe0>
   1a8d8:	ldrb	r3, [r0]
   1a8dc:	cmp	r3, #95	; 0x5f
   1a8e0:	movne	r2, #0
   1a8e4:	moveq	r2, #1
   1a8e8:	orrs	r2, r2, r3, lsr #7
   1a8ec:	bne	1a944 <flatcc_json_parser_match_constant@@Base+0x120>
   1a8f0:	orr	r3, r3, #32
   1a8f4:	sub	r3, r3, #97	; 0x61
   1a8f8:	uxtb	r3, r3
   1a8fc:	cmp	r3, #25
   1a900:	bls	1a950 <flatcc_json_parser_match_constant@@Base+0x12c>
   1a904:	mov	r3, #0
   1a908:	str	r3, [r5]
   1a90c:	ldrb	r2, [r0]
   1a910:	and	r3, r2, #223	; 0xdf
   1a914:	cmp	r2, #44	; 0x2c
   1a918:	cmpne	r3, #93	; 0x5d
   1a91c:	moveq	r3, #1
   1a920:	movne	r3, #0
   1a924:	cmp	r3, #0
   1a928:	moveq	r0, r7
   1a92c:	pop	{r4, r5, r6, r7, r8, pc}
   1a930:	ldrb	r3, [r4, #1]
   1a934:	cmp	r3, #32
   1a938:	addhi	r0, r4, #1
   1a93c:	bls	1a8b8 <flatcc_json_parser_match_constant@@Base+0x94>
   1a940:	b	1a8c8 <flatcc_json_parser_match_constant@@Base+0xa4>
   1a944:	mov	r3, #1
   1a948:	str	r3, [r5]
   1a94c:	pop	{r4, r5, r6, r7, r8, pc}
   1a950:	mov	r3, #1
   1a954:	str	r3, [r5]
   1a958:	pop	{r4, r5, r6, r7, r8, pc}
   1a95c:	add	r3, r4, #1
   1a960:	cmp	r6, r3
   1a964:	beq	1aa30 <flatcc_json_parser_match_constant@@Base+0x20c>
   1a968:	ldrb	r2, [r4, #1]
   1a96c:	cmp	r2, #32
   1a970:	bne	1aa44 <flatcc_json_parser_match_constant@@Base+0x220>
   1a974:	add	r3, r4, #2
   1a978:	mov	r2, r6
   1a97c:	mov	r4, r3
   1a980:	cmp	r2, r3
   1a984:	beq	1aa34 <flatcc_json_parser_match_constant@@Base+0x210>
   1a988:	add	r3, r3, #1
   1a98c:	ldrb	r1, [r4]
   1a990:	cmp	r1, #32
   1a994:	beq	1a97c <flatcc_json_parser_match_constant@@Base+0x158>
   1a998:	ldrb	r3, [r4]
   1a99c:	cmp	r3, #34	; 0x22
   1a9a0:	beq	1a9b4 <flatcc_json_parser_match_constant@@Base+0x190>
   1a9a4:	mov	r3, #1
   1a9a8:	str	r3, [r5]
   1a9ac:	mov	r0, r4
   1a9b0:	pop	{r4, r5, r6, r7, r8, pc}
   1a9b4:	add	r0, r4, #1
   1a9b8:	rsb	r3, r0, #0
   1a9bc:	cmp	r3, #1
   1a9c0:	ble	1a9d4 <flatcc_json_parser_match_constant@@Base+0x1b0>
   1a9c4:	ldrb	r3, [r4, #1]
   1a9c8:	cmp	r3, #32
   1a9cc:	bhi	1a9e4 <flatcc_json_parser_match_constant@@Base+0x1c0>
   1a9d0:	beq	1a9f0 <flatcc_json_parser_match_constant@@Base+0x1cc>
   1a9d4:	mov	r2, #0
   1a9d8:	mov	r1, r0
   1a9dc:	mov	r0, ip
   1a9e0:	bl	19ac0 <flatcc_json_parser_space_ext@@Base>
   1a9e4:	mov	r3, #0
   1a9e8:	str	r3, [r5]
   1a9ec:	pop	{r4, r5, r6, r7, r8, pc}
   1a9f0:	ldrb	r3, [r4, #2]
   1a9f4:	cmp	r3, #32
   1a9f8:	addhi	r0, r4, #2
   1a9fc:	bls	1a9d4 <flatcc_json_parser_match_constant@@Base+0x1b0>
   1aa00:	b	1a9e4 <flatcc_json_parser_match_constant@@Base+0x1c0>
   1aa04:	mov	r3, #0
   1aa08:	str	r3, [r5]
   1aa0c:	mov	r0, r1
   1aa10:	pop	{r4, r5, r6, r7, r8, pc}
   1aa14:	cmp	r4, r6
   1aa18:	movne	r0, r4
   1aa1c:	bne	1a904 <flatcc_json_parser_match_constant@@Base+0xe0>
   1aa20:	mov	r3, #0
   1aa24:	str	r3, [r5]
   1aa28:	mov	r0, r6
   1aa2c:	pop	{r4, r5, r6, r7, r8, pc}
   1aa30:	mov	r4, r3
   1aa34:	mov	r3, #0
   1aa38:	str	r3, [r5]
   1aa3c:	mov	r0, r4
   1aa40:	pop	{r4, r5, r6, r7, r8, pc}
   1aa44:	mov	r4, r3
   1aa48:	b	1a998 <flatcc_json_parser_match_constant@@Base+0x174>

0001aa4c <flatcc_json_parser_double@@Base>:
   1aa4c:	push	{r4, r5, r6, r7, r8, lr}
   1aa50:	mov	r4, #0
   1aa54:	mov	r5, #0
   1aa58:	strd	r4, [r3]
   1aa5c:	cmp	r1, r2
   1aa60:	beq	1aaf4 <flatcc_json_parser_double@@Base+0xa8>
   1aa64:	ldrb	ip, [r1]
   1aa68:	cmp	ip, #45	; 0x2d
   1aa6c:	addeq	ip, r1, #1
   1aa70:	movne	ip, r1
   1aa74:	mov	r6, r3
   1aa78:	mov	r5, r2
   1aa7c:	mov	r4, r1
   1aa80:	mov	r7, r0
   1aa84:	sub	r3, r2, ip
   1aa88:	cmp	r3, #1
   1aa8c:	ble	1aaa4 <flatcc_json_parser_double@@Base+0x58>
   1aa90:	ldrb	r3, [ip]
   1aa94:	cmp	r3, #46	; 0x2e
   1aa98:	beq	1ab08 <flatcc_json_parser_double@@Base+0xbc>
   1aa9c:	cmp	r3, #48	; 0x30
   1aaa0:	beq	1aafc <flatcc_json_parser_double@@Base+0xb0>
   1aaa4:	mov	r2, r6
   1aaa8:	sub	r1, r5, r4
   1aaac:	mov	r0, r4
   1aab0:	bl	18c88 <grisu3_diy_fp_encode_double@@Base+0x4e8>
   1aab4:	mov	r2, r0
   1aab8:	cmp	r4, r0
   1aabc:	cmpne	r0, #0
   1aac0:	bne	1aaf4 <flatcc_json_parser_double@@Base+0xa8>
   1aac4:	vldr	d7, [r6]
   1aac8:	vabs.f64	d7, d7
   1aacc:	vldr	d6, [pc, #84]	; 1ab28 <flatcc_json_parser_double@@Base+0xdc>
   1aad0:	vcmp.f64	d7, d6
   1aad4:	vmrs	APSR_nzcv, fpscr
   1aad8:	movgt	r3, #7
   1aadc:	movle	r3, #6
   1aae0:	mov	r2, r5
   1aae4:	mov	r1, r4
   1aae8:	mov	r0, r7
   1aaec:	bl	199e8 <flatcc_json_parser_set_error@@Base>
   1aaf0:	mov	r2, r0
   1aaf4:	mov	r0, r2
   1aaf8:	pop	{r4, r5, r6, r7, r8, pc}
   1aafc:	ldrb	r3, [ip, #1]
   1ab00:	cmp	r3, #48	; 0x30
   1ab04:	bne	1aaa4 <flatcc_json_parser_double@@Base+0x58>
   1ab08:	mov	r3, #6
   1ab0c:	mov	r2, r5
   1ab10:	mov	r1, r4
   1ab14:	mov	r0, r7
   1ab18:	bl	199e8 <flatcc_json_parser_set_error@@Base>
   1ab1c:	mov	r2, r0
   1ab20:	b	1aaf4 <flatcc_json_parser_double@@Base+0xa8>
   1ab24:	nop			; (mov r0, r0)
   1ab28:			; <UNDEFINED> instruction: 0xffffffff
   1ab2c:	svcvc	0x00efffff

0001ab30 <flatcc_json_parser_float@@Base>:
   1ab30:	mov	ip, #0
   1ab34:	str	ip, [r3]
   1ab38:	cmp	r1, r2
   1ab3c:	beq	1ac4c <flatcc_json_parser_float@@Base+0x11c>
   1ab40:	push	{r4, r5, r6, r7, lr}
   1ab44:	sub	sp, sp, #12
   1ab48:	ldrb	ip, [r1]
   1ab4c:	cmp	ip, #45	; 0x2d
   1ab50:	addeq	ip, r1, #1
   1ab54:	movne	ip, r1
   1ab58:	mov	r6, r3
   1ab5c:	mov	r5, r2
   1ab60:	mov	r4, r1
   1ab64:	mov	r7, r0
   1ab68:	sub	r3, r2, ip
   1ab6c:	cmp	r3, #1
   1ab70:	ble	1ab88 <flatcc_json_parser_float@@Base+0x58>
   1ab74:	ldrb	r3, [ip]
   1ab78:	cmp	r3, #46	; 0x2e
   1ab7c:	beq	1ac08 <flatcc_json_parser_float@@Base+0xd8>
   1ab80:	cmp	r3, #48	; 0x30
   1ab84:	beq	1abfc <flatcc_json_parser_float@@Base+0xcc>
   1ab88:	mov	r2, sp
   1ab8c:	sub	r1, r5, r4
   1ab90:	mov	r0, r4
   1ab94:	bl	18c88 <grisu3_diy_fp_encode_double@@Base+0x4e8>
   1ab98:	vldr	d6, [sp]
   1ab9c:	vcvt.f32.f64	s15, d6
   1aba0:	vstr	s15, [r6]
   1aba4:	vabs.f32	s15, s15
   1aba8:	vldr	s14, [pc, #164]	; 1ac54 <flatcc_json_parser_float@@Base+0x124>
   1abac:	vcmp.f32	s15, s14
   1abb0:	vmrs	APSR_nzcv, fpscr
   1abb4:	ble	1ac20 <flatcc_json_parser_float@@Base+0xf0>
   1abb8:	vcmpe.f64	d6, #0.0
   1abbc:	vmrs	APSR_nzcv, fpscr
   1abc0:	vldr	s14, [pc, #144]	; 1ac58 <flatcc_json_parser_float@@Base+0x128>
   1abc4:	vldr	s15, [pc, #144]	; 1ac5c <flatcc_json_parser_float@@Base+0x12c>
   1abc8:	vmovpl.f32	s15, s14
   1abcc:	vstr	s15, [r6]
   1abd0:	vabs.f32	s15, s15
   1abd4:	vldr	s14, [pc, #120]	; 1ac54 <flatcc_json_parser_float@@Base+0x124>
   1abd8:	vcmp.f32	s15, s14
   1abdc:	vmrs	APSR_nzcv, fpscr
   1abe0:	bgt	1ac34 <flatcc_json_parser_float@@Base+0x104>
   1abe4:	mov	r3, #6
   1abe8:	mov	r2, r5
   1abec:	mov	r1, r4
   1abf0:	mov	r0, r7
   1abf4:	bl	199e8 <flatcc_json_parser_set_error@@Base>
   1abf8:	b	1ac2c <flatcc_json_parser_float@@Base+0xfc>
   1abfc:	ldrb	r3, [ip, #1]
   1ac00:	cmp	r3, #48	; 0x30
   1ac04:	bne	1ab88 <flatcc_json_parser_float@@Base+0x58>
   1ac08:	mov	r3, #6
   1ac0c:	mov	r2, r5
   1ac10:	mov	r1, r4
   1ac14:	mov	r0, r7
   1ac18:	bl	199e8 <flatcc_json_parser_set_error@@Base>
   1ac1c:	b	1ac2c <flatcc_json_parser_float@@Base+0xfc>
   1ac20:	cmp	r4, r0
   1ac24:	cmpne	r0, #0
   1ac28:	beq	1abe4 <flatcc_json_parser_float@@Base+0xb4>
   1ac2c:	add	sp, sp, #12
   1ac30:	pop	{r4, r5, r6, r7, pc}
   1ac34:	mov	r3, #7
   1ac38:	mov	r2, r5
   1ac3c:	mov	r1, r4
   1ac40:	mov	r0, r7
   1ac44:	bl	199e8 <flatcc_json_parser_set_error@@Base>
   1ac48:	b	1ac2c <flatcc_json_parser_float@@Base+0xfc>
   1ac4c:	mov	r0, r2
   1ac50:	bx	lr
   1ac54:	svcvc	0x007fffff
   1ac58:	svcvc	0x00800000
   1ac5c:			; <UNDEFINED> instruction: 0xff800000

0001ac60 <flatcc_json_parser_generic_json@@Base>:
   1ac60:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ac64:	sub	sp, sp, #524	; 0x20c
   1ac68:	mov	r5, r2
   1ac6c:	cmp	r1, r2
   1ac70:	beq	1b638 <flatcc_json_parser_generic_json@@Base+0x9d8>
   1ac74:	mov	r8, r0
   1ac78:	mov	r4, r1
   1ac7c:	add	r6, sp, #8
   1ac80:	mov	r7, r6
   1ac84:	mov	sl, #10
   1ac88:	mov	fp, #125	; 0x7d
   1ac8c:	b	1b51c <flatcc_json_parser_generic_json@@Base+0x8bc>
   1ac90:	ldrb	r3, [r4]
   1ac94:	cmp	r3, #34	; 0x22
   1ac98:	addeq	r4, r4, #1
   1ac9c:	moveq	r3, #0
   1aca0:	streq	r3, [r8, #12]
   1aca4:	beq	1acf8 <flatcc_json_parser_generic_json@@Base+0x98>
   1aca8:	cmp	r3, #46	; 0x2e
   1acac:	movne	r3, #1
   1acb0:	strne	r3, [r8, #12]
   1acb4:	beq	1acd4 <flatcc_json_parser_generic_json@@Base+0x74>
   1acb8:	cmp	r5, r4
   1acbc:	beq	1ae7c <flatcc_json_parser_generic_json@@Base+0x21c>
   1acc0:	ldrb	r3, [r4]
   1acc4:	cmp	r3, #32
   1acc8:	bls	1b76c <flatcc_json_parser_generic_json@@Base+0xb0c>
   1accc:	add	r4, r4, #1
   1acd0:	b	1ad34 <flatcc_json_parser_generic_json@@Base+0xd4>
   1acd4:	mov	r3, #5
   1acd8:	mov	r2, r5
   1acdc:	mov	r1, r4
   1ace0:	mov	r0, r8
   1ace4:	bl	199e8 <flatcc_json_parser_set_error@@Base>
   1ace8:	mov	r4, r0
   1acec:	ldr	r3, [r8, #12]
   1acf0:	cmp	r3, #0
   1acf4:	bne	1acb8 <flatcc_json_parser_generic_json@@Base+0x58>
   1acf8:	cmp	r5, r4
   1acfc:	beq	1ae64 <flatcc_json_parser_generic_json@@Base+0x204>
   1ad00:	ldrb	r3, [r4]
   1ad04:	cmp	r3, #34	; 0x22
   1ad08:	bne	1ae34 <flatcc_json_parser_generic_json@@Base+0x1d4>
   1ad0c:	add	r0, r4, #1
   1ad10:	b	1ad84 <flatcc_json_parser_generic_json@@Base+0x124>
   1ad14:	mov	r0, r4
   1ad18:	cmp	r5, r0
   1ad1c:	beq	1ad78 <flatcc_json_parser_generic_json@@Base+0x118>
   1ad20:	ldrb	r2, [r0]
   1ad24:	add	r4, r4, #1
   1ad28:	cmp	r2, #32
   1ad2c:	bls	1ad7c <flatcc_json_parser_generic_json@@Base+0x11c>
   1ad30:	mov	r3, r2
   1ad34:	sub	r0, r4, #1
   1ad38:	cmp	r3, #46	; 0x2e
   1ad3c:	cmpne	r3, #95	; 0x5f
   1ad40:	beq	1ad14 <flatcc_json_parser_generic_json@@Base+0xb4>
   1ad44:	tst	r3, #128	; 0x80
   1ad48:	bne	1ad14 <flatcc_json_parser_generic_json@@Base+0xb4>
   1ad4c:	sub	r2, r3, #48	; 0x30
   1ad50:	uxtb	r2, r2
   1ad54:	cmp	r2, #9
   1ad58:	bls	1ad14 <flatcc_json_parser_generic_json@@Base+0xb4>
   1ad5c:	orr	r2, r3, #32
   1ad60:	sub	r2, r2, #97	; 0x61
   1ad64:	uxtb	r2, r2
   1ad68:	cmp	r2, #25
   1ad6c:	bhi	1ad7c <flatcc_json_parser_generic_json@@Base+0x11c>
   1ad70:	mov	r0, r4
   1ad74:	b	1ad18 <flatcc_json_parser_generic_json@@Base+0xb8>
   1ad78:	mov	r0, r5
   1ad7c:	cmp	r3, #46	; 0x2e
   1ad80:	beq	1ae04 <flatcc_json_parser_generic_json@@Base+0x1a4>
   1ad84:	mov	r9, r5
   1ad88:	sub	r3, r5, r0
   1ad8c:	cmp	r3, #1
   1ad90:	ble	1ada8 <flatcc_json_parser_generic_json@@Base+0x148>
   1ad94:	ldrb	r3, [r0]
   1ad98:	cmp	r3, #32
   1ad9c:	bhi	1adb8 <flatcc_json_parser_generic_json@@Base+0x158>
   1ada0:	cmp	r3, #32
   1ada4:	beq	1ae84 <flatcc_json_parser_generic_json@@Base+0x224>
   1ada8:	mov	r2, r5
   1adac:	mov	r1, r0
   1adb0:	mov	r0, r8
   1adb4:	bl	19ac0 <flatcc_json_parser_space_ext@@Base>
   1adb8:	cmp	r5, r0
   1adbc:	beq	1ae98 <flatcc_json_parser_generic_json@@Base+0x238>
   1adc0:	ldrb	r3, [r0]
   1adc4:	cmp	r3, #58	; 0x3a
   1adc8:	bne	1aeb0 <flatcc_json_parser_generic_json@@Base+0x250>
   1adcc:	add	r4, r0, #1
   1add0:	sub	r9, r9, r4
   1add4:	cmp	r9, #1
   1add8:	ble	1adec <flatcc_json_parser_generic_json@@Base+0x18c>
   1addc:	ldrb	r3, [r0, #1]
   1ade0:	cmp	r3, #32
   1ade4:	bhi	1b530 <flatcc_json_parser_generic_json@@Base+0x8d0>
   1ade8:	beq	1aec8 <flatcc_json_parser_generic_json@@Base+0x268>
   1adec:	mov	r2, r5
   1adf0:	mov	r1, r4
   1adf4:	mov	r0, r8
   1adf8:	bl	19ac0 <flatcc_json_parser_space_ext@@Base>
   1adfc:	mov	r4, r0
   1ae00:	b	1b530 <flatcc_json_parser_generic_json@@Base+0x8d0>
   1ae04:	mov	r3, #5
   1ae08:	mov	r2, r5
   1ae0c:	mov	r1, r0
   1ae10:	mov	r0, r8
   1ae14:	bl	199e8 <flatcc_json_parser_set_error@@Base>
   1ae18:	b	1ad84 <flatcc_json_parser_generic_json@@Base+0x124>
   1ae1c:	add	r4, r3, #1
   1ae20:	cmp	r5, r4
   1ae24:	beq	1b648 <flatcc_json_parser_generic_json@@Base+0x9e8>
   1ae28:	ldrb	r3, [r3, #1]
   1ae2c:	cmp	r3, #34	; 0x22
   1ae30:	beq	1ae58 <flatcc_json_parser_generic_json@@Base+0x1f8>
   1ae34:	cmp	r3, #92	; 0x5c
   1ae38:	movne	r3, r4
   1ae3c:	bne	1ae1c <flatcc_json_parser_generic_json@@Base+0x1bc>
   1ae40:	sub	r3, r5, r4
   1ae44:	cmp	r3, #1
   1ae48:	addgt	r3, r4, #1
   1ae4c:	bgt	1ae1c <flatcc_json_parser_generic_json@@Base+0x1bc>
   1ae50:	cmp	r5, r4
   1ae54:	beq	1ae64 <flatcc_json_parser_generic_json@@Base+0x204>
   1ae58:	ldrb	r3, [r4]
   1ae5c:	cmp	r3, #34	; 0x22
   1ae60:	beq	1ad0c <flatcc_json_parser_generic_json@@Base+0xac>
   1ae64:	mov	r3, #20
   1ae68:	mov	r2, r5
   1ae6c:	mov	r1, r4
   1ae70:	mov	r0, r8
   1ae74:	bl	199e8 <flatcc_json_parser_set_error@@Base>
   1ae78:	b	1ad84 <flatcc_json_parser_generic_json@@Base+0x124>
   1ae7c:	mov	r0, r4
   1ae80:	b	1ad84 <flatcc_json_parser_generic_json@@Base+0x124>
   1ae84:	ldrb	r3, [r0, #1]
   1ae88:	cmp	r3, #32
   1ae8c:	addhi	r0, r0, #1
   1ae90:	bls	1ada8 <flatcc_json_parser_generic_json@@Base+0x148>
   1ae94:	b	1adb8 <flatcc_json_parser_generic_json@@Base+0x158>
   1ae98:	mov	r3, #10
   1ae9c:	mov	r2, r5
   1aea0:	mov	r1, r0
   1aea4:	mov	r0, r8
   1aea8:	bl	199e8 <flatcc_json_parser_set_error@@Base>
   1aeac:	b	1b630 <flatcc_json_parser_generic_json@@Base+0x9d0>
   1aeb0:	mov	r3, #4
   1aeb4:	mov	r2, r5
   1aeb8:	mov	r1, r0
   1aebc:	mov	r0, r8
   1aec0:	bl	199e8 <flatcc_json_parser_set_error@@Base>
   1aec4:	b	1b630 <flatcc_json_parser_generic_json@@Base+0x9d0>
   1aec8:	ldrb	r3, [r0, #2]
   1aecc:	cmp	r3, #32
   1aed0:	addhi	r4, r0, #2
   1aed4:	bls	1adec <flatcc_json_parser_generic_json@@Base+0x18c>
   1aed8:	b	1b530 <flatcc_json_parser_generic_json@@Base+0x8d0>
   1aedc:	cmp	r3, #91	; 0x5b
   1aee0:	beq	1b1b4 <flatcc_json_parser_generic_json@@Base+0x554>
   1aee4:	cmp	r3, #123	; 0x7b
   1aee8:	bne	1b554 <flatcc_json_parser_generic_json@@Base+0x8f4>
   1aeec:	add	r3, sp, #520	; 0x208
   1aef0:	cmp	r6, r3
   1aef4:	beq	1b250 <flatcc_json_parser_generic_json@@Base+0x5f0>
   1aef8:	add	r9, r6, #1
   1aefc:	strb	fp, [r6]
   1af00:	add	r1, r4, #1
   1af04:	sub	r3, r5, r1
   1af08:	cmp	r3, #1
   1af0c:	ble	1af24 <flatcc_json_parser_generic_json@@Base+0x2c4>
   1af10:	ldrb	r3, [r4, #1]
   1af14:	cmp	r3, #32
   1af18:	movhi	r4, r1
   1af1c:	bhi	1af34 <flatcc_json_parser_generic_json@@Base+0x2d4>
   1af20:	beq	1b268 <flatcc_json_parser_generic_json@@Base+0x608>
   1af24:	mov	r2, r5
   1af28:	mov	r0, r8
   1af2c:	bl	19ac0 <flatcc_json_parser_space_ext@@Base>
   1af30:	mov	r4, r0
   1af34:	cmp	r5, r4
   1af38:	beq	1b640 <flatcc_json_parser_generic_json@@Base+0x9e0>
   1af3c:	ldrb	r3, [r4]
   1af40:	cmp	r3, #125	; 0x7d
   1af44:	movne	r6, r9
   1af48:	bne	1b51c <flatcc_json_parser_generic_json@@Base+0x8bc>
   1af4c:	mov	r6, r9
   1af50:	mov	r0, r4
   1af54:	b	1b438 <flatcc_json_parser_generic_json@@Base+0x7d8>
   1af58:	cmp	r5, r4
   1af5c:	addne	r0, r4, #1
   1af60:	bne	1af78 <flatcc_json_parser_generic_json@@Base+0x318>
   1af64:	mov	r3, #16
   1af68:	mov	r2, r4
   1af6c:	mov	r1, r5
   1af70:	mov	r0, r8
   1af74:	bl	199e8 <flatcc_json_parser_set_error@@Base>
   1af78:	cmp	r5, r0
   1af7c:	beq	1b708 <flatcc_json_parser_generic_json@@Base+0xaa8>
   1af80:	ldrb	r3, [r0]
   1af84:	cmp	r3, #34	; 0x22
   1af88:	bne	1afb8 <flatcc_json_parser_generic_json@@Base+0x358>
   1af8c:	b	1afdc <flatcc_json_parser_generic_json@@Base+0x37c>
   1af90:	add	r3, sp, #4
   1af94:	mov	r2, r5
   1af98:	mov	r1, r0
   1af9c:	mov	r0, r8
   1afa0:	bl	1a218 <flatcc_json_parser_string_escape@@Base>
   1afa4:	cmp	r5, r0
   1afa8:	beq	1b704 <flatcc_json_parser_generic_json@@Base+0xaa4>
   1afac:	ldrb	r3, [r0]
   1afb0:	cmp	r3, #34	; 0x22
   1afb4:	beq	1afdc <flatcc_json_parser_generic_json@@Base+0x37c>
   1afb8:	mov	r2, r5
   1afbc:	mov	r1, r0
   1afc0:	mov	r0, r8
   1afc4:	bl	19a14 <flatcc_json_parser_string_part@@Base>
   1afc8:	cmp	r5, r0
   1afcc:	beq	1af90 <flatcc_json_parser_generic_json@@Base+0x330>
   1afd0:	ldrb	r3, [r0]
   1afd4:	cmp	r3, #34	; 0x22
   1afd8:	bne	1af90 <flatcc_json_parser_generic_json@@Base+0x330>
   1afdc:	add	r0, r0, #1
   1afe0:	b	1b438 <flatcc_json_parser_generic_json@@Base+0x7d8>
   1afe4:	add	r4, r4, #1
   1afe8:	cmp	r5, r4
   1afec:	bne	1b684 <flatcc_json_parser_generic_json@@Base+0xa24>
   1aff0:	mov	r3, #6
   1aff4:	mov	r2, r5
   1aff8:	mov	r1, r4
   1affc:	mov	r0, r8
   1b000:	bl	199e8 <flatcc_json_parser_set_error@@Base>
   1b004:	b	1b438 <flatcc_json_parser_generic_json@@Base+0x7d8>
   1b008:	add	r0, r4, #1
   1b00c:	cmp	r5, r0
   1b010:	beq	1b190 <flatcc_json_parser_generic_json@@Base+0x530>
   1b014:	ldrb	r3, [r0]
   1b018:	cmp	r3, #46	; 0x2e
   1b01c:	beq	1b0d4 <flatcc_json_parser_generic_json@@Base+0x474>
   1b020:	ldrb	r3, [r0]
   1b024:	and	r3, r3, #223	; 0xdf
   1b028:	cmp	r3, #69	; 0x45
   1b02c:	bne	1b734 <flatcc_json_parser_generic_json@@Base+0xad4>
   1b030:	add	r1, r0, #1
   1b034:	cmp	r5, r1
   1b038:	beq	1b150 <flatcc_json_parser_generic_json@@Base+0x4f0>
   1b03c:	ldrb	r3, [r0, #1]
   1b040:	sub	r3, r3, #43	; 0x2b
   1b044:	tst	r3, #253	; 0xfd
   1b048:	bne	1b058 <flatcc_json_parser_generic_json@@Base+0x3f8>
   1b04c:	add	r1, r0, #2
   1b050:	cmp	r5, r1
   1b054:	beq	1b164 <flatcc_json_parser_generic_json@@Base+0x504>
   1b058:	ldrb	r3, [r1]
   1b05c:	sub	r3, r3, #48	; 0x30
   1b060:	uxtb	r3, r3
   1b064:	cmp	r3, #9
   1b068:	bhi	1b164 <flatcc_json_parser_generic_json@@Base+0x504>
   1b06c:	add	r0, r1, #1
   1b070:	cmp	r5, r0
   1b074:	beq	1b190 <flatcc_json_parser_generic_json@@Base+0x530>
   1b078:	ldrb	r3, [r1, #1]
   1b07c:	sub	r3, r3, #48	; 0x30
   1b080:	uxtb	r3, r3
   1b084:	cmp	r3, #9
   1b088:	bhi	1b734 <flatcc_json_parser_generic_json@@Base+0xad4>
   1b08c:	add	r2, r1, #2
   1b090:	mov	r1, r5
   1b094:	mov	r0, r2
   1b098:	cmp	r1, r2
   1b09c:	beq	1b190 <flatcc_json_parser_generic_json@@Base+0x530>
   1b0a0:	add	r2, r2, #1
   1b0a4:	ldrb	r3, [r0]
   1b0a8:	sub	r3, r3, #48	; 0x30
   1b0ac:	uxtb	r3, r3
   1b0b0:	cmp	r3, #9
   1b0b4:	bls	1b094 <flatcc_json_parser_generic_json@@Base+0x434>
   1b0b8:	b	1b734 <flatcc_json_parser_generic_json@@Base+0xad4>
   1b0bc:	mov	r3, #6
   1b0c0:	mov	r2, r5
   1b0c4:	mov	r1, r4
   1b0c8:	mov	r0, r8
   1b0cc:	bl	199e8 <flatcc_json_parser_set_error@@Base>
   1b0d0:	b	1b438 <flatcc_json_parser_generic_json@@Base+0x7d8>
   1b0d4:	ldrb	r3, [r0, #1]
   1b0d8:	sub	r3, r3, #48	; 0x30
   1b0dc:	uxtb	r3, r3
   1b0e0:	cmp	r3, #9
   1b0e4:	bhi	1b138 <flatcc_json_parser_generic_json@@Base+0x4d8>
   1b0e8:	add	r2, r0, #2
   1b0ec:	cmp	r5, r2
   1b0f0:	beq	1b78c <flatcc_json_parser_generic_json@@Base+0xb2c>
   1b0f4:	ldrb	r3, [r0, #2]
   1b0f8:	sub	r3, r3, #48	; 0x30
   1b0fc:	uxtb	r3, r3
   1b100:	cmp	r3, #9
   1b104:	bhi	1b764 <flatcc_json_parser_generic_json@@Base+0xb04>
   1b108:	add	r2, r0, #3
   1b10c:	mov	r1, r5
   1b110:	mov	r0, r2
   1b114:	cmp	r1, r2
   1b118:	beq	1b72c <flatcc_json_parser_generic_json@@Base+0xacc>
   1b11c:	add	r2, r2, #1
   1b120:	ldrb	r3, [r0]
   1b124:	sub	r3, r3, #48	; 0x30
   1b128:	uxtb	r3, r3
   1b12c:	cmp	r3, #9
   1b130:	bls	1b110 <flatcc_json_parser_generic_json@@Base+0x4b0>
   1b134:	b	1b020 <flatcc_json_parser_generic_json@@Base+0x3c0>
   1b138:	mov	r3, #6
   1b13c:	mov	r2, r5
   1b140:	add	r1, r0, #1
   1b144:	mov	r0, r8
   1b148:	bl	199e8 <flatcc_json_parser_set_error@@Base>
   1b14c:	b	1b438 <flatcc_json_parser_generic_json@@Base+0x7d8>
   1b150:	mov	r3, #6
   1b154:	mov	r2, r5
   1b158:	mov	r0, r8
   1b15c:	bl	199e8 <flatcc_json_parser_set_error@@Base>
   1b160:	b	1b438 <flatcc_json_parser_generic_json@@Base+0x7d8>
   1b164:	mov	r3, #6
   1b168:	mov	r2, r5
   1b16c:	mov	r0, r8
   1b170:	bl	199e8 <flatcc_json_parser_set_error@@Base>
   1b174:	b	1b438 <flatcc_json_parser_generic_json@@Base+0x7d8>
   1b178:	cmp	r3, #9
   1b17c:	bcc	1b190 <flatcc_json_parser_generic_json@@Base+0x530>
   1b180:	cmp	r3, #11
   1b184:	bls	1b438 <flatcc_json_parser_generic_json@@Base+0x7d8>
   1b188:	cmp	r3, #13
   1b18c:	beq	1b438 <flatcc_json_parser_generic_json@@Base+0x7d8>
   1b190:	mov	r3, #6
   1b194:	mov	r2, r5
   1b198:	mov	r1, r0
   1b19c:	mov	r0, r8
   1b1a0:	bl	199e8 <flatcc_json_parser_set_error@@Base>
   1b1a4:	b	1b438 <flatcc_json_parser_generic_json@@Base+0x7d8>
   1b1a8:	cmp	r3, #44	; 0x2c
   1b1ac:	bne	1b190 <flatcc_json_parser_generic_json@@Base+0x530>
   1b1b0:	b	1b438 <flatcc_json_parser_generic_json@@Base+0x7d8>
   1b1b4:	add	r3, sp, #520	; 0x208
   1b1b8:	cmp	r6, r3
   1b1bc:	beq	1b224 <flatcc_json_parser_generic_json@@Base+0x5c4>
   1b1c0:	add	r9, r6, #1
   1b1c4:	mov	r3, #93	; 0x5d
   1b1c8:	strb	r3, [r6]
   1b1cc:	add	r1, r4, #1
   1b1d0:	sub	r3, r5, r1
   1b1d4:	cmp	r3, #1
   1b1d8:	ble	1b1f0 <flatcc_json_parser_generic_json@@Base+0x590>
   1b1dc:	ldrb	r3, [r4, #1]
   1b1e0:	cmp	r3, #32
   1b1e4:	movhi	r4, r1
   1b1e8:	bhi	1b200 <flatcc_json_parser_generic_json@@Base+0x5a0>
   1b1ec:	beq	1b23c <flatcc_json_parser_generic_json@@Base+0x5dc>
   1b1f0:	mov	r2, r5
   1b1f4:	mov	r0, r8
   1b1f8:	bl	19ac0 <flatcc_json_parser_space_ext@@Base>
   1b1fc:	mov	r4, r0
   1b200:	cmp	r5, r4
   1b204:	beq	1b640 <flatcc_json_parser_generic_json@@Base+0x9e0>
   1b208:	ldrb	r3, [r4]
   1b20c:	cmp	r3, #93	; 0x5d
   1b210:	movne	r6, r9
   1b214:	bne	1b51c <flatcc_json_parser_generic_json@@Base+0x8bc>
   1b218:	mov	r6, r9
   1b21c:	mov	r0, r4
   1b220:	b	1b438 <flatcc_json_parser_generic_json@@Base+0x7d8>
   1b224:	mov	r3, #2
   1b228:	mov	r2, r5
   1b22c:	mov	r1, r4
   1b230:	mov	r0, r8
   1b234:	bl	199e8 <flatcc_json_parser_set_error@@Base>
   1b238:	b	1b630 <flatcc_json_parser_generic_json@@Base+0x9d0>
   1b23c:	ldrb	r3, [r4, #2]
   1b240:	cmp	r3, #32
   1b244:	addhi	r4, r4, #2
   1b248:	bls	1b1f0 <flatcc_json_parser_generic_json@@Base+0x590>
   1b24c:	b	1b200 <flatcc_json_parser_generic_json@@Base+0x5a0>
   1b250:	mov	r3, #2
   1b254:	mov	r2, r5
   1b258:	mov	r1, r4
   1b25c:	mov	r0, r8
   1b260:	bl	199e8 <flatcc_json_parser_set_error@@Base>
   1b264:	b	1b630 <flatcc_json_parser_generic_json@@Base+0x9d0>
   1b268:	ldrb	r3, [r4, #2]
   1b26c:	cmp	r3, #32
   1b270:	addhi	r4, r4, #2
   1b274:	bls	1af24 <flatcc_json_parser_generic_json@@Base+0x2c4>
   1b278:	b	1af34 <flatcc_json_parser_generic_json@@Base+0x2d4>
   1b27c:	sub	r3, r5, r0
   1b280:	cmp	r3, #1
   1b284:	ble	1b298 <flatcc_json_parser_generic_json@@Base+0x638>
   1b288:	ldrb	r3, [r0]
   1b28c:	cmp	r3, #32
   1b290:	bhi	1b2a8 <flatcc_json_parser_generic_json@@Base+0x648>
   1b294:	beq	1b2dc <flatcc_json_parser_generic_json@@Base+0x67c>
   1b298:	mov	r2, r5
   1b29c:	mov	r1, r0
   1b2a0:	mov	r0, r8
   1b2a4:	bl	19ac0 <flatcc_json_parser_space_ext@@Base>
   1b2a8:	cmp	r5, r0
   1b2ac:	beq	1b434 <flatcc_json_parser_generic_json@@Base+0x7d4>
   1b2b0:	ldrb	r3, [r0]
   1b2b4:	cmp	r3, #44	; 0x2c
   1b2b8:	beq	1b338 <flatcc_json_parser_generic_json@@Base+0x6d8>
   1b2bc:	cmp	r3, #93	; 0x5d
   1b2c0:	beq	1b2f0 <flatcc_json_parser_generic_json@@Base+0x690>
   1b2c4:	mov	r3, #9
   1b2c8:	mov	r2, r5
   1b2cc:	mov	r1, r0
   1b2d0:	mov	r0, r8
   1b2d4:	bl	199e8 <flatcc_json_parser_set_error@@Base>
   1b2d8:	b	1b434 <flatcc_json_parser_generic_json@@Base+0x7d4>
   1b2dc:	ldrb	r3, [r0, #1]
   1b2e0:	cmp	r3, #32
   1b2e4:	addhi	r0, r0, #1
   1b2e8:	bls	1b298 <flatcc_json_parser_generic_json@@Base+0x638>
   1b2ec:	b	1b2a8 <flatcc_json_parser_generic_json@@Base+0x648>
   1b2f0:	add	r1, r0, #1
   1b2f4:	sub	r3, r5, r1
   1b2f8:	cmp	r3, #1
   1b2fc:	ble	1b314 <flatcc_json_parser_generic_json@@Base+0x6b4>
   1b300:	ldrb	r3, [r0, #1]
   1b304:	cmp	r3, #32
   1b308:	movhi	r0, r1
   1b30c:	bhi	1b434 <flatcc_json_parser_generic_json@@Base+0x7d4>
   1b310:	beq	1b324 <flatcc_json_parser_generic_json@@Base+0x6c4>
   1b314:	mov	r2, r5
   1b318:	mov	r0, r8
   1b31c:	bl	19ac0 <flatcc_json_parser_space_ext@@Base>
   1b320:	b	1b434 <flatcc_json_parser_generic_json@@Base+0x7d4>
   1b324:	ldrb	r3, [r0, #2]
   1b328:	cmp	r3, #32
   1b32c:	addhi	r0, r0, #2
   1b330:	bls	1b314 <flatcc_json_parser_generic_json@@Base+0x6b4>
   1b334:	b	1b434 <flatcc_json_parser_generic_json@@Base+0x7d4>
   1b338:	add	r1, r0, #1
   1b33c:	sub	r3, r5, r1
   1b340:	cmp	r3, #1
   1b344:	ble	1b358 <flatcc_json_parser_generic_json@@Base+0x6f8>
   1b348:	ldrb	r3, [r0, #1]
   1b34c:	cmp	r3, #32
   1b350:	bhi	1b368 <flatcc_json_parser_generic_json@@Base+0x708>
   1b354:	beq	1b384 <flatcc_json_parser_generic_json@@Base+0x724>
   1b358:	mov	r2, r5
   1b35c:	mov	r0, r8
   1b360:	bl	19ac0 <flatcc_json_parser_space_ext@@Base>
   1b364:	mov	r1, r0
   1b368:	cmp	r5, r1
   1b36c:	beq	1b398 <flatcc_json_parser_generic_json@@Base+0x738>
   1b370:	ldrb	r3, [r1]
   1b374:	cmp	r3, #93	; 0x5d
   1b378:	beq	1b3ac <flatcc_json_parser_generic_json@@Base+0x74c>
   1b37c:	mov	r4, r1
   1b380:	b	1b51c <flatcc_json_parser_generic_json@@Base+0x8bc>
   1b384:	ldrb	r3, [r0, #2]
   1b388:	cmp	r3, #32
   1b38c:	addhi	r1, r0, #2
   1b390:	bls	1b358 <flatcc_json_parser_generic_json@@Base+0x6f8>
   1b394:	b	1b368 <flatcc_json_parser_generic_json@@Base+0x708>
   1b398:	mov	r3, #9
   1b39c:	mov	r2, r5
   1b3a0:	mov	r0, r8
   1b3a4:	bl	199e8 <flatcc_json_parser_set_error@@Base>
   1b3a8:	b	1b434 <flatcc_json_parser_generic_json@@Base+0x7d4>
   1b3ac:	add	r0, r1, #1
   1b3b0:	sub	r3, r5, r0
   1b3b4:	cmp	r3, #1
   1b3b8:	ble	1b3cc <flatcc_json_parser_generic_json@@Base+0x76c>
   1b3bc:	ldrb	r3, [r1, #1]
   1b3c0:	cmp	r3, #32
   1b3c4:	bhi	1b434 <flatcc_json_parser_generic_json@@Base+0x7d4>
   1b3c8:	beq	1b3e0 <flatcc_json_parser_generic_json@@Base+0x780>
   1b3cc:	mov	r2, r5
   1b3d0:	mov	r1, r0
   1b3d4:	mov	r0, r8
   1b3d8:	bl	19ac0 <flatcc_json_parser_space_ext@@Base>
   1b3dc:	b	1b434 <flatcc_json_parser_generic_json@@Base+0x7d4>
   1b3e0:	ldrb	r3, [r1, #2]
   1b3e4:	cmp	r3, #32
   1b3e8:	addhi	r0, r1, #2
   1b3ec:	bls	1b3cc <flatcc_json_parser_generic_json@@Base+0x76c>
   1b3f0:	b	1b434 <flatcc_json_parser_generic_json@@Base+0x7d4>
   1b3f4:	mov	r2, r5
   1b3f8:	mov	r1, r0
   1b3fc:	mov	r0, r8
   1b400:	bl	19ac0 <flatcc_json_parser_space_ext@@Base>
   1b404:	cmp	r5, r0
   1b408:	beq	1b434 <flatcc_json_parser_generic_json@@Base+0x7d4>
   1b40c:	ldrb	r3, [r0]
   1b410:	cmp	r3, #44	; 0x2c
   1b414:	beq	1b4d4 <flatcc_json_parser_generic_json@@Base+0x874>
   1b418:	cmp	r3, #125	; 0x7d
   1b41c:	beq	1b48c <flatcc_json_parser_generic_json@@Base+0x82c>
   1b420:	mov	r3, sl
   1b424:	mov	r2, r5
   1b428:	mov	r1, r0
   1b42c:	mov	r0, r8
   1b430:	bl	199e8 <flatcc_json_parser_set_error@@Base>
   1b434:	mov	r6, r9
   1b438:	subs	r3, r6, r7
   1b43c:	movne	r3, #1
   1b440:	cmp	r0, r5
   1b444:	cmpne	r6, r7
   1b448:	beq	1b5fc <flatcc_json_parser_generic_json@@Base+0x99c>
   1b44c:	sub	r9, r6, #1
   1b450:	ldrb	r3, [r6, #-1]
   1b454:	cmp	r3, #93	; 0x5d
   1b458:	beq	1b27c <flatcc_json_parser_generic_json@@Base+0x61c>
   1b45c:	sub	r3, r5, r0
   1b460:	cmp	r3, #1
   1b464:	ble	1b3f4 <flatcc_json_parser_generic_json@@Base+0x794>
   1b468:	ldrb	r3, [r0]
   1b46c:	cmp	r3, #32
   1b470:	bhi	1b404 <flatcc_json_parser_generic_json@@Base+0x7a4>
   1b474:	bne	1b3f4 <flatcc_json_parser_generic_json@@Base+0x794>
   1b478:	ldrb	r3, [r0, #1]
   1b47c:	cmp	r3, #32
   1b480:	addhi	r0, r0, #1
   1b484:	bls	1b3f4 <flatcc_json_parser_generic_json@@Base+0x794>
   1b488:	b	1b404 <flatcc_json_parser_generic_json@@Base+0x7a4>
   1b48c:	add	r1, r0, #1
   1b490:	sub	r3, r5, r1
   1b494:	cmp	r3, #1
   1b498:	ble	1b4b0 <flatcc_json_parser_generic_json@@Base+0x850>
   1b49c:	ldrb	r3, [r0, #1]
   1b4a0:	cmp	r3, #32
   1b4a4:	movhi	r0, r1
   1b4a8:	bhi	1b434 <flatcc_json_parser_generic_json@@Base+0x7d4>
   1b4ac:	beq	1b4c0 <flatcc_json_parser_generic_json@@Base+0x860>
   1b4b0:	mov	r2, r5
   1b4b4:	mov	r0, r8
   1b4b8:	bl	19ac0 <flatcc_json_parser_space_ext@@Base>
   1b4bc:	b	1b434 <flatcc_json_parser_generic_json@@Base+0x7d4>
   1b4c0:	ldrb	r3, [r0, #2]
   1b4c4:	cmp	r3, #32
   1b4c8:	addhi	r0, r0, #2
   1b4cc:	bls	1b4b0 <flatcc_json_parser_generic_json@@Base+0x850>
   1b4d0:	b	1b434 <flatcc_json_parser_generic_json@@Base+0x7d4>
   1b4d4:	add	r1, r0, #1
   1b4d8:	sub	r3, r5, r1
   1b4dc:	cmp	r3, #1
   1b4e0:	ble	1b4f4 <flatcc_json_parser_generic_json@@Base+0x894>
   1b4e4:	ldrb	r3, [r0, #1]
   1b4e8:	cmp	r3, #32
   1b4ec:	bhi	1b504 <flatcc_json_parser_generic_json@@Base+0x8a4>
   1b4f0:	beq	1b584 <flatcc_json_parser_generic_json@@Base+0x924>
   1b4f4:	mov	r2, r5
   1b4f8:	mov	r0, r8
   1b4fc:	bl	19ac0 <flatcc_json_parser_space_ext@@Base>
   1b500:	mov	r1, r0
   1b504:	cmp	r5, r1
   1b508:	beq	1b598 <flatcc_json_parser_generic_json@@Base+0x938>
   1b50c:	ldrb	r3, [r1]
   1b510:	cmp	r3, #125	; 0x7d
   1b514:	beq	1b5ac <flatcc_json_parser_generic_json@@Base+0x94c>
   1b518:	mov	r4, r1
   1b51c:	cmp	r6, r7
   1b520:	beq	1b650 <flatcc_json_parser_generic_json@@Base+0x9f0>
   1b524:	ldrb	r3, [r6, #-1]
   1b528:	cmp	r3, #125	; 0x7d
   1b52c:	beq	1ac90 <flatcc_json_parser_generic_json@@Base+0x30>
   1b530:	ldrb	r3, [r4]
   1b534:	cmp	r3, #57	; 0x39
   1b538:	bhi	1aedc <flatcc_json_parser_generic_json@@Base+0x27c>
   1b53c:	cmp	r3, #48	; 0x30
   1b540:	bcs	1b674 <flatcc_json_parser_generic_json@@Base+0xa14>
   1b544:	cmp	r3, #34	; 0x22
   1b548:	beq	1af58 <flatcc_json_parser_generic_json@@Base+0x2f8>
   1b54c:	cmp	r3, #45	; 0x2d
   1b550:	beq	1b674 <flatcc_json_parser_generic_json@@Base+0xa14>
   1b554:	mov	r2, r5
   1b558:	mov	r1, r4
   1b55c:	mov	r0, r8
   1b560:	bl	1a758 <flatcc_json_parser_skip_constant@@Base>
   1b564:	cmp	r0, r4
   1b568:	bne	1b438 <flatcc_json_parser_generic_json@@Base+0x7d8>
   1b56c:	mov	r3, #5
   1b570:	mov	r2, r5
   1b574:	mov	r1, r0
   1b578:	mov	r0, r8
   1b57c:	bl	199e8 <flatcc_json_parser_set_error@@Base>
   1b580:	b	1b630 <flatcc_json_parser_generic_json@@Base+0x9d0>
   1b584:	ldrb	r3, [r0, #2]
   1b588:	cmp	r3, #32
   1b58c:	addhi	r1, r0, #2
   1b590:	bls	1b4f4 <flatcc_json_parser_generic_json@@Base+0x894>
   1b594:	b	1b504 <flatcc_json_parser_generic_json@@Base+0x8a4>
   1b598:	mov	r3, sl
   1b59c:	mov	r2, r5
   1b5a0:	mov	r0, r8
   1b5a4:	bl	199e8 <flatcc_json_parser_set_error@@Base>
   1b5a8:	b	1b434 <flatcc_json_parser_generic_json@@Base+0x7d4>
   1b5ac:	add	r0, r1, #1
   1b5b0:	sub	r3, r5, r0
   1b5b4:	cmp	r3, #1
   1b5b8:	ble	1b5cc <flatcc_json_parser_generic_json@@Base+0x96c>
   1b5bc:	ldrb	r3, [r1, #1]
   1b5c0:	cmp	r3, #32
   1b5c4:	bhi	1b434 <flatcc_json_parser_generic_json@@Base+0x7d4>
   1b5c8:	beq	1b5e0 <flatcc_json_parser_generic_json@@Base+0x980>
   1b5cc:	mov	r2, r5
   1b5d0:	mov	r1, r0
   1b5d4:	mov	r0, r8
   1b5d8:	bl	19ac0 <flatcc_json_parser_space_ext@@Base>
   1b5dc:	b	1b434 <flatcc_json_parser_generic_json@@Base+0x7d4>
   1b5e0:	ldrb	r3, [r1, #2]
   1b5e4:	cmp	r3, #32
   1b5e8:	addhi	r0, r1, #2
   1b5ec:	bls	1b5cc <flatcc_json_parser_generic_json@@Base+0x96c>
   1b5f0:	b	1b434 <flatcc_json_parser_generic_json@@Base+0x7d4>
   1b5f4:	mov	r0, r4
   1b5f8:	b	1b438 <flatcc_json_parser_generic_json@@Base+0x7d8>
   1b5fc:	cmp	r0, r5
   1b600:	movne	r3, #0
   1b604:	andeq	r3, r3, #1
   1b608:	cmp	r3, #0
   1b60c:	beq	1b630 <flatcc_json_parser_generic_json@@Base+0x9d0>
   1b610:	ldrb	r3, [r6, #-1]
   1b614:	cmp	r3, #93	; 0x5d
   1b618:	moveq	r3, #9
   1b61c:	movne	r3, #10
   1b620:	mov	r2, r5
   1b624:	mov	r1, r0
   1b628:	mov	r0, r8
   1b62c:	bl	199e8 <flatcc_json_parser_set_error@@Base>
   1b630:	add	sp, sp, #524	; 0x20c
   1b634:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b638:	mov	r0, r2
   1b63c:	b	1b630 <flatcc_json_parser_generic_json@@Base+0x9d0>
   1b640:	mov	r0, r5
   1b644:	b	1b630 <flatcc_json_parser_generic_json@@Base+0x9d0>
   1b648:	mov	r4, r5
   1b64c:	b	1ae64 <flatcc_json_parser_generic_json@@Base+0x204>
   1b650:	ldrb	r3, [r4]
   1b654:	cmp	r3, #57	; 0x39
   1b658:	bhi	1b6f0 <flatcc_json_parser_generic_json@@Base+0xa90>
   1b65c:	cmp	r3, #48	; 0x30
   1b660:	bcs	1b674 <flatcc_json_parser_generic_json@@Base+0xa14>
   1b664:	cmp	r3, #34	; 0x22
   1b668:	beq	1af58 <flatcc_json_parser_generic_json@@Base+0x2f8>
   1b66c:	cmp	r3, #45	; 0x2d
   1b670:	bne	1b554 <flatcc_json_parser_generic_json@@Base+0x8f4>
   1b674:	cmp	r5, r4
   1b678:	beq	1b5f4 <flatcc_json_parser_generic_json@@Base+0x994>
   1b67c:	cmp	r3, #45	; 0x2d
   1b680:	beq	1afe4 <flatcc_json_parser_generic_json@@Base+0x384>
   1b684:	ldrb	r3, [r4]
   1b688:	cmp	r3, #48	; 0x30
   1b68c:	beq	1b008 <flatcc_json_parser_generic_json@@Base+0x3a8>
   1b690:	sub	r3, r3, #49	; 0x31
   1b694:	uxtb	r3, r3
   1b698:	cmp	r3, #8
   1b69c:	bhi	1b0bc <flatcc_json_parser_generic_json@@Base+0x45c>
   1b6a0:	add	r0, r4, #1
   1b6a4:	cmp	r5, r0
   1b6a8:	beq	1b190 <flatcc_json_parser_generic_json@@Base+0x530>
   1b6ac:	ldrb	r3, [r4, #1]
   1b6b0:	sub	r3, r3, #48	; 0x30
   1b6b4:	uxtb	r3, r3
   1b6b8:	cmp	r3, #9
   1b6bc:	bhi	1b014 <flatcc_json_parser_generic_json@@Base+0x3b4>
   1b6c0:	add	r4, r4, #2
   1b6c4:	mov	r2, r5
   1b6c8:	mov	r0, r4
   1b6cc:	cmp	r4, r2
   1b6d0:	beq	1b720 <flatcc_json_parser_generic_json@@Base+0xac0>
   1b6d4:	add	r4, r4, #1
   1b6d8:	ldrb	r3, [r0]
   1b6dc:	sub	r3, r3, #48	; 0x30
   1b6e0:	uxtb	r3, r3
   1b6e4:	cmp	r3, #9
   1b6e8:	bls	1b6c8 <flatcc_json_parser_generic_json@@Base+0xa68>
   1b6ec:	b	1b014 <flatcc_json_parser_generic_json@@Base+0x3b4>
   1b6f0:	cmp	r3, #91	; 0x5b
   1b6f4:	beq	1b1c0 <flatcc_json_parser_generic_json@@Base+0x560>
   1b6f8:	cmp	r3, #123	; 0x7b
   1b6fc:	beq	1aeec <flatcc_json_parser_generic_json@@Base+0x28c>
   1b700:	b	1b554 <flatcc_json_parser_generic_json@@Base+0x8f4>
   1b704:	mov	r0, r5
   1b708:	mov	r3, #20
   1b70c:	mov	r2, r5
   1b710:	mov	r1, r0
   1b714:	mov	r0, r8
   1b718:	bl	199e8 <flatcc_json_parser_set_error@@Base>
   1b71c:	b	1b438 <flatcc_json_parser_generic_json@@Base+0x7d8>
   1b720:	cmp	r5, r4
   1b724:	bne	1b020 <flatcc_json_parser_generic_json@@Base+0x3c0>
   1b728:	b	1b190 <flatcc_json_parser_generic_json@@Base+0x530>
   1b72c:	cmp	r5, r2
   1b730:	beq	1b190 <flatcc_json_parser_generic_json@@Base+0x530>
   1b734:	ldrb	r3, [r0]
   1b738:	cmp	r3, #32
   1b73c:	beq	1b438 <flatcc_json_parser_generic_json@@Base+0x7d8>
   1b740:	bls	1b178 <flatcc_json_parser_generic_json@@Base+0x518>
   1b744:	cmp	r3, #58	; 0x3a
   1b748:	beq	1b438 <flatcc_json_parser_generic_json@@Base+0x7d8>
   1b74c:	bls	1b1a8 <flatcc_json_parser_generic_json@@Base+0x548>
   1b750:	cmp	r3, #93	; 0x5d
   1b754:	beq	1b438 <flatcc_json_parser_generic_json@@Base+0x7d8>
   1b758:	cmp	r3, #125	; 0x7d
   1b75c:	bne	1b190 <flatcc_json_parser_generic_json@@Base+0x530>
   1b760:	b	1b438 <flatcc_json_parser_generic_json@@Base+0x7d8>
   1b764:	mov	r0, r2
   1b768:	b	1b020 <flatcc_json_parser_generic_json@@Base+0x3c0>
   1b76c:	mov	r9, r5
   1b770:	sub	r3, r5, r4
   1b774:	cmp	r3, #1
   1b778:	movle	r0, r4
   1b77c:	ble	1ada8 <flatcc_json_parser_generic_json@@Base+0x148>
   1b780:	ldrb	r3, [r4]
   1b784:	mov	r0, r4
   1b788:	b	1ada0 <flatcc_json_parser_generic_json@@Base+0x140>
   1b78c:	mov	r0, r2
   1b790:	b	1b190 <flatcc_json_parser_generic_json@@Base+0x530>

0001b794 <flatcc_json_parser_unmatched_symbol@@Base>:
   1b794:	push	{r4, r5, r6, lr}
   1b798:	mov	r5, r0
   1b79c:	mov	r4, r2
   1b7a0:	ldr	r3, [r0, #8]
   1b7a4:	tst	r3, #1
   1b7a8:	beq	1b9b8 <flatcc_json_parser_unmatched_symbol@@Base+0x224>
   1b7ac:	ldr	r3, [r0, #12]
   1b7b0:	cmp	r3, #0
   1b7b4:	bne	1b7d4 <flatcc_json_parser_unmatched_symbol@@Base+0x40>
   1b7b8:	cmp	r1, r2
   1b7bc:	beq	1b934 <flatcc_json_parser_unmatched_symbol@@Base+0x1a0>
   1b7c0:	ldrb	r3, [r1]
   1b7c4:	cmp	r3, #34	; 0x22
   1b7c8:	bne	1b8ec <flatcc_json_parser_unmatched_symbol@@Base+0x158>
   1b7cc:	add	r1, r1, #1
   1b7d0:	b	1b860 <flatcc_json_parser_unmatched_symbol@@Base+0xcc>
   1b7d4:	cmp	r1, r2
   1b7d8:	beq	1b944 <flatcc_json_parser_unmatched_symbol@@Base+0x1b0>
   1b7dc:	ldrb	r3, [r1]
   1b7e0:	cmp	r3, #32
   1b7e4:	bls	1b9c4 <flatcc_json_parser_unmatched_symbol@@Base+0x230>
   1b7e8:	add	r2, r1, #1
   1b7ec:	b	1b810 <flatcc_json_parser_unmatched_symbol@@Base+0x7c>
   1b7f0:	mov	r1, r2
   1b7f4:	cmp	r4, r1
   1b7f8:	beq	1b854 <flatcc_json_parser_unmatched_symbol@@Base+0xc0>
   1b7fc:	ldrb	r0, [r1]
   1b800:	add	r2, r2, #1
   1b804:	cmp	r0, #32
   1b808:	bls	1b858 <flatcc_json_parser_unmatched_symbol@@Base+0xc4>
   1b80c:	mov	r3, r0
   1b810:	sub	r1, r2, #1
   1b814:	cmp	r3, #46	; 0x2e
   1b818:	cmpne	r3, #95	; 0x5f
   1b81c:	beq	1b7f0 <flatcc_json_parser_unmatched_symbol@@Base+0x5c>
   1b820:	tst	r3, #128	; 0x80
   1b824:	bne	1b7f0 <flatcc_json_parser_unmatched_symbol@@Base+0x5c>
   1b828:	sub	r0, r3, #48	; 0x30
   1b82c:	uxtb	r0, r0
   1b830:	cmp	r0, #9
   1b834:	bls	1b7f0 <flatcc_json_parser_unmatched_symbol@@Base+0x5c>
   1b838:	orr	r0, r3, #32
   1b83c:	sub	r0, r0, #97	; 0x61
   1b840:	uxtb	r0, r0
   1b844:	cmp	r0, #25
   1b848:	bhi	1b858 <flatcc_json_parser_unmatched_symbol@@Base+0xc4>
   1b84c:	mov	r1, r2
   1b850:	b	1b7f4 <flatcc_json_parser_unmatched_symbol@@Base+0x60>
   1b854:	mov	r1, r4
   1b858:	cmp	r3, #46	; 0x2e
   1b85c:	beq	1b8bc <flatcc_json_parser_unmatched_symbol@@Base+0x128>
   1b860:	mov	r6, r4
   1b864:	sub	r3, r4, r1
   1b868:	cmp	r3, #1
   1b86c:	ble	1b884 <flatcc_json_parser_unmatched_symbol@@Base+0xf0>
   1b870:	ldrb	r3, [r1]
   1b874:	cmp	r3, #32
   1b878:	bhi	1b894 <flatcc_json_parser_unmatched_symbol@@Base+0x100>
   1b87c:	cmp	r3, #32
   1b880:	beq	1b94c <flatcc_json_parser_unmatched_symbol@@Base+0x1b8>
   1b884:	mov	r2, r4
   1b888:	mov	r0, r5
   1b88c:	bl	19ac0 <flatcc_json_parser_space_ext@@Base>
   1b890:	mov	r1, r0
   1b894:	cmp	r4, r1
   1b898:	beq	1b8a8 <flatcc_json_parser_unmatched_symbol@@Base+0x114>
   1b89c:	ldrb	r3, [r1]
   1b8a0:	cmp	r3, #58	; 0x3a
   1b8a4:	beq	1b960 <flatcc_json_parser_unmatched_symbol@@Base+0x1cc>
   1b8a8:	mov	r3, #4
   1b8ac:	mov	r2, r4
   1b8b0:	mov	r0, r5
   1b8b4:	bl	199e8 <flatcc_json_parser_set_error@@Base>
   1b8b8:	pop	{r4, r5, r6, pc}
   1b8bc:	mov	r3, #5
   1b8c0:	mov	r2, r4
   1b8c4:	mov	r0, r5
   1b8c8:	bl	199e8 <flatcc_json_parser_set_error@@Base>
   1b8cc:	mov	r1, r0
   1b8d0:	b	1b860 <flatcc_json_parser_unmatched_symbol@@Base+0xcc>
   1b8d4:	add	r1, r3, #1
   1b8d8:	cmp	r4, r1
   1b8dc:	beq	1b93c <flatcc_json_parser_unmatched_symbol@@Base+0x1a8>
   1b8e0:	ldrb	r3, [r3, #1]
   1b8e4:	cmp	r3, #34	; 0x22
   1b8e8:	beq	1b910 <flatcc_json_parser_unmatched_symbol@@Base+0x17c>
   1b8ec:	cmp	r3, #92	; 0x5c
   1b8f0:	movne	r3, r1
   1b8f4:	bne	1b8d4 <flatcc_json_parser_unmatched_symbol@@Base+0x140>
   1b8f8:	sub	r3, r4, r1
   1b8fc:	cmp	r3, #1
   1b900:	addgt	r3, r1, #1
   1b904:	bgt	1b8d4 <flatcc_json_parser_unmatched_symbol@@Base+0x140>
   1b908:	cmp	r4, r1
   1b90c:	beq	1b91c <flatcc_json_parser_unmatched_symbol@@Base+0x188>
   1b910:	ldrb	r3, [r1]
   1b914:	cmp	r3, #34	; 0x22
   1b918:	beq	1b7cc <flatcc_json_parser_unmatched_symbol@@Base+0x38>
   1b91c:	mov	r3, #20
   1b920:	mov	r2, r4
   1b924:	mov	r0, r5
   1b928:	bl	199e8 <flatcc_json_parser_set_error@@Base>
   1b92c:	mov	r1, r0
   1b930:	b	1b860 <flatcc_json_parser_unmatched_symbol@@Base+0xcc>
   1b934:	mov	r1, r2
   1b938:	b	1b91c <flatcc_json_parser_unmatched_symbol@@Base+0x188>
   1b93c:	mov	r1, r4
   1b940:	b	1b91c <flatcc_json_parser_unmatched_symbol@@Base+0x188>
   1b944:	mov	r1, r2
   1b948:	b	1b860 <flatcc_json_parser_unmatched_symbol@@Base+0xcc>
   1b94c:	ldrb	r3, [r1, #1]
   1b950:	cmp	r3, #32
   1b954:	addhi	r1, r1, #1
   1b958:	bls	1b884 <flatcc_json_parser_unmatched_symbol@@Base+0xf0>
   1b95c:	b	1b894 <flatcc_json_parser_unmatched_symbol@@Base+0x100>
   1b960:	add	r0, r1, #1
   1b964:	sub	r6, r6, r0
   1b968:	cmp	r6, #1
   1b96c:	ble	1b980 <flatcc_json_parser_unmatched_symbol@@Base+0x1ec>
   1b970:	ldrb	r3, [r1, #1]
   1b974:	cmp	r3, #32
   1b978:	bhi	1b990 <flatcc_json_parser_unmatched_symbol@@Base+0x1fc>
   1b97c:	beq	1b9a4 <flatcc_json_parser_unmatched_symbol@@Base+0x210>
   1b980:	mov	r2, r4
   1b984:	mov	r1, r0
   1b988:	mov	r0, r5
   1b98c:	bl	19ac0 <flatcc_json_parser_space_ext@@Base>
   1b990:	mov	r2, r4
   1b994:	mov	r1, r0
   1b998:	mov	r0, r5
   1b99c:	bl	1ac60 <flatcc_json_parser_generic_json@@Base>
   1b9a0:	pop	{r4, r5, r6, pc}
   1b9a4:	ldrb	r3, [r1, #2]
   1b9a8:	cmp	r3, #32
   1b9ac:	addhi	r0, r1, #2
   1b9b0:	bls	1b980 <flatcc_json_parser_unmatched_symbol@@Base+0x1ec>
   1b9b4:	b	1b990 <flatcc_json_parser_unmatched_symbol@@Base+0x1fc>
   1b9b8:	mov	r3, #13
   1b9bc:	bl	199e8 <flatcc_json_parser_set_error@@Base>
   1b9c0:	pop	{r4, r5, r6, pc}
   1b9c4:	mov	r6, r2
   1b9c8:	sub	r3, r2, r1
   1b9cc:	cmp	r3, #1
   1b9d0:	ldrbgt	r3, [r1]
   1b9d4:	bgt	1b87c <flatcc_json_parser_unmatched_symbol@@Base+0xe8>
   1b9d8:	b	1b884 <flatcc_json_parser_unmatched_symbol@@Base+0xf0>

0001b9dc <flatcc_json_parser_integer@@Base>:
   1b9dc:	cmp	r1, r2
   1b9e0:	beq	1bb30 <flatcc_json_parser_integer@@Base+0x154>
   1b9e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b9e8:	sub	sp, sp, #12
   1b9ec:	mov	r8, r1
   1b9f0:	ldrb	ip, [r1]
   1b9f4:	cmp	ip, #45	; 0x2d
   1b9f8:	movne	ip, #0
   1b9fc:	moveq	ip, #1
   1ba00:	str	ip, [r3]
   1ba04:	add	r1, r1, ip
   1ba08:	cmp	r2, r1
   1ba0c:	beq	1bb1c <flatcc_json_parser_integer@@Base+0x140>
   1ba10:	mov	fp, r3
   1ba14:	mov	sl, r2
   1ba18:	mov	r9, r8
   1ba1c:	str	r0, [sp, #4]
   1ba20:	ldrb	r6, [r8, ip]
   1ba24:	sub	r3, r6, #48	; 0x30
   1ba28:	uxtb	r3, r3
   1ba2c:	cmp	r3, #9
   1ba30:	bhi	1bae4 <flatcc_json_parser_integer@@Base+0x108>
   1ba34:	uxtb	r6, r6
   1ba38:	mov	r7, #0
   1ba3c:	subs	r6, r6, #48	; 0x30
   1ba40:	sbc	r7, r7, #0
   1ba44:	add	ip, r1, #1
   1ba48:	mov	lr, r2
   1ba4c:	mov	r0, #10
   1ba50:	mov	r1, ip
   1ba54:	cmp	ip, lr
   1ba58:	beq	1bb24 <flatcc_json_parser_integer@@Base+0x148>
   1ba5c:	ldrb	r2, [ip], #1
   1ba60:	sub	r3, r2, #48	; 0x30
   1ba64:	uxtb	r3, r3
   1ba68:	cmp	r3, #9
   1ba6c:	bhi	1baec <flatcc_json_parser_integer@@Base+0x110>
   1ba70:	umull	r4, r5, r6, r0
   1ba74:	mla	r5, r0, r7, r5
   1ba78:	subs	r4, r4, #48	; 0x30
   1ba7c:	sbc	r5, r5, #0
   1ba80:	uxtb	r2, r2
   1ba84:	mov	r3, #0
   1ba88:	adds	r2, r2, r4
   1ba8c:	adc	r3, r3, r5
   1ba90:	cmp	r3, r7
   1ba94:	cmpeq	r2, r6
   1ba98:	movcs	r6, r2
   1ba9c:	movcs	r7, r3
   1baa0:	bcs	1ba50 <flatcc_json_parser_integer@@Base+0x74>
   1baa4:	cmp	fp, #0
   1baa8:	movne	r3, #8
   1baac:	moveq	r3, #7
   1bab0:	mov	r2, sl
   1bab4:	ldr	r0, [sp, #4]
   1bab8:	bl	199e8 <flatcc_json_parser_set_error@@Base>
   1babc:	mov	r1, r0
   1bac0:	b	1bb10 <flatcc_json_parser_integer@@Base+0x134>
   1bac4:	mov	r3, #12
   1bac8:	mov	r2, sl
   1bacc:	ldr	r0, [sp, #4]
   1bad0:	bl	199e8 <flatcc_json_parser_set_error@@Base>
   1bad4:	mov	r1, r0
   1bad8:	b	1bb10 <flatcc_json_parser_integer@@Base+0x134>
   1badc:	mov	r1, r9
   1bae0:	b	1bb10 <flatcc_json_parser_integer@@Base+0x134>
   1bae4:	mov	r6, #0
   1bae8:	mov	r7, #0
   1baec:	cmp	r1, r9
   1baf0:	beq	1badc <flatcc_json_parser_integer@@Base+0x100>
   1baf4:	ldrb	r3, [r1]
   1baf8:	and	r2, r3, #223	; 0xdf
   1bafc:	cmp	r3, #46	; 0x2e
   1bb00:	cmpne	r2, #69	; 0x45
   1bb04:	beq	1bac4 <flatcc_json_parser_integer@@Base+0xe8>
   1bb08:	ldr	r3, [sp, #48]	; 0x30
   1bb0c:	strd	r6, [r3]
   1bb10:	mov	r0, r1
   1bb14:	add	sp, sp, #12
   1bb18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bb1c:	mov	r6, #0
   1bb20:	mov	r7, #0
   1bb24:	cmp	r8, r1
   1bb28:	beq	1bb10 <flatcc_json_parser_integer@@Base+0x134>
   1bb2c:	b	1bb08 <flatcc_json_parser_integer@@Base+0x12c>
   1bb30:	mov	r0, r2
   1bb34:	bx	lr

0001bb38 <flatcc_json_parser_build_uint8_vector_base64@@Base>:
   1bb38:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bb3c:	sub	sp, sp, #28
   1bb40:	mov	r7, r0
   1bb44:	mov	r6, r2
   1bb48:	mov	r8, r3
   1bb4c:	cmp	r1, r2
   1bb50:	beq	1bb64 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2c>
   1bb54:	ldrb	r3, [r1]
   1bb58:	cmp	r3, #34	; 0x22
   1bb5c:	addeq	r4, r1, #1
   1bb60:	beq	1bb78 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x40>
   1bb64:	mov	r3, #16
   1bb68:	mov	r2, r6
   1bb6c:	mov	r0, r7
   1bb70:	bl	199e8 <flatcc_json_parser_set_error@@Base>
   1bb74:	mov	r4, r0
   1bb78:	mov	r2, r6
   1bb7c:	mov	r1, r4
   1bb80:	mov	r0, r7
   1bb84:	bl	19a14 <flatcc_json_parser_string_part@@Base>
   1bb88:	mov	r5, r0
   1bb8c:	cmp	r6, r0
   1bb90:	beq	1bba0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x68>
   1bb94:	ldrb	r3, [r0]
   1bb98:	cmp	r3, #34	; 0x22
   1bb9c:	beq	1bbd0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x98>
   1bba0:	mov	r3, #0
   1bba4:	str	r3, [r8]
   1bba8:	ldr	r3, [sp, #64]	; 0x40
   1bbac:	cmp	r3, #0
   1bbb0:	movne	r3, #32
   1bbb4:	moveq	r3, #31
   1bbb8:	mov	r2, r6
   1bbbc:	mov	r1, r5
   1bbc0:	mov	r0, r7
   1bbc4:	bl	199e8 <flatcc_json_parser_set_error@@Base>
   1bbc8:	add	sp, sp, #28
   1bbcc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bbd0:	sub	sl, r0, r4
   1bbd4:	lsr	r9, sl, #2
   1bbd8:	add	r9, r9, r9, lsl #1
   1bbdc:	and	r3, sl, #3
   1bbe0:	cmp	r3, #2
   1bbe4:	addeq	r9, r9, #1
   1bbe8:	beq	1bbf4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0xbc>
   1bbec:	cmp	r3, #3
   1bbf0:	addeq	r9, r9, #2
   1bbf4:	mvn	r3, #0
   1bbf8:	mov	r2, #1
   1bbfc:	mov	r1, r2
   1bc00:	ldr	r0, [r7]
   1bc04:	bl	15b88 <flatcc_builder_start_vector@@Base>
   1bc08:	cmp	r0, #0
   1bc0c:	bne	1bee4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3ac>
   1bc10:	mov	r1, r9
   1bc14:	ldr	r0, [r7]
   1bc18:	bl	15380 <flatcc_builder_extend_vector@@Base>
   1bc1c:	cmp	r0, #0
   1bc20:	beq	1bee4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3ac>
   1bc24:	ldr	r3, [sp, #64]	; 0x40
   1bc28:	adds	r3, r3, #0
   1bc2c:	movne	r3, #1
   1bc30:	cmp	r3, #0
   1bc34:	beq	1bc78 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x140>
   1bc38:	cmp	r3, #1
   1bc3c:	bne	1bde0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2a8>
   1bc40:	ldr	lr, [pc, #700]	; 1bf04 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3cc>
   1bc44:	cmp	r9, #0
   1bc48:	movne	r3, r9
   1bc4c:	mvneq	r3, #0
   1bc50:	str	r3, [sp, #12]
   1bc54:	str	r0, [sp, #8]
   1bc58:	str	sl, [sp, #4]
   1bc5c:	mov	r1, r4
   1bc60:	ldr	r3, [sp, #4]
   1bc64:	cmp	r3, #0
   1bc68:	beq	1bc80 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x148>
   1bc6c:	mov	ip, r3
   1bc70:	mov	r2, #0
   1bc74:	b	1bcc0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x188>
   1bc78:	ldr	lr, [pc, #648]	; 1bf08 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3d0>
   1bc7c:	b	1bc44 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x10c>
   1bc80:	ldr	r2, [sp, #4]
   1bc84:	cmp	r2, #2
   1bc88:	beq	1bdec <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2b4>
   1bc8c:	cmp	r2, #3
   1bc90:	beq	1be94 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x35c>
   1bc94:	cmp	r2, #0
   1bc98:	bne	1bd0c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1d4>
   1bc9c:	b	1be34 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2fc>
   1bca0:	add	r1, r1, #1
   1bca4:	sub	ip, ip, #1
   1bca8:	sub	r2, r2, #1
   1bcac:	add	r2, r2, #1
   1bcb0:	cmp	r2, #3
   1bcb4:	bhi	1bd70 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x238>
   1bcb8:	cmp	r2, ip
   1bcbc:	beq	1bc84 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x14c>
   1bcc0:	ldrb	r3, [r1, r2]
   1bcc4:	ldrb	r3, [lr, r3]
   1bcc8:	add	fp, sp, #24
   1bccc:	add	fp, fp, r2
   1bcd0:	strb	r3, [fp, #-4]
   1bcd4:	cmp	r3, #63	; 0x3f
   1bcd8:	bls	1bcac <flatcc_json_parser_build_uint8_vector_base64@@Base+0x174>
   1bcdc:	cmp	r3, #65	; 0x41
   1bce0:	beq	1bca0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x168>
   1bce4:	cmp	r3, #66	; 0x42
   1bce8:	movne	r3, r2
   1bcec:	beq	1bd18 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1e0>
   1bcf0:	sub	r3, ip, r3
   1bcf4:	cmp	r2, #2
   1bcf8:	beq	1bdf0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2b8>
   1bcfc:	cmp	r2, #3
   1bd00:	beq	1be98 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x360>
   1bd04:	cmp	r2, #0
   1bd08:	beq	1be24 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2ec>
   1bd0c:	ldr	r3, [sp, #4]
   1bd10:	sub	r5, sl, r3
   1bd14:	b	1bde4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2ac>
   1bd18:	add	r3, r2, #1
   1bd1c:	cmp	r3, #7
   1bd20:	cmpls	r3, ip
   1bd24:	bcs	1bcf0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1b8>
   1bd28:	add	fp, r1, r3
   1bd2c:	ldrb	r1, [r1, r3]
   1bd30:	ldrb	r1, [lr, r1]
   1bd34:	sub	r1, r1, #65	; 0x41
   1bd38:	uxtb	r1, r1
   1bd3c:	cmp	r1, #1
   1bd40:	bhi	1bcf0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1b8>
   1bd44:	add	r3, r3, #1
   1bd48:	cmp	r3, #7
   1bd4c:	cmpls	r3, ip
   1bd50:	bcs	1bcf0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1b8>
   1bd54:	ldrb	r1, [fp, #1]!
   1bd58:	ldrb	r1, [lr, r1]
   1bd5c:	sub	r1, r1, #65	; 0x41
   1bd60:	uxtb	r1, r1
   1bd64:	cmp	r1, #1
   1bd68:	bls	1bd44 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x20c>
   1bd6c:	b	1bcf0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1b8>
   1bd70:	ldr	r3, [sp, #12]
   1bd74:	cmp	r3, #2
   1bd78:	bls	1be00 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2c8>
   1bd7c:	ldrb	fp, [sp, #21]
   1bd80:	ldrb	r2, [sp, #20]
   1bd84:	lsr	r3, fp, #4
   1bd88:	orr	r3, r3, r2, lsl #2
   1bd8c:	ldr	r2, [sp, #8]
   1bd90:	strb	r3, [r2]
   1bd94:	ldrb	r2, [sp, #22]
   1bd98:	lsr	r3, r2, #2
   1bd9c:	orr	r3, r3, fp, lsl #4
   1bda0:	ldr	fp, [sp, #8]
   1bda4:	strb	r3, [fp, #1]
   1bda8:	ldrb	r3, [sp, #23]
   1bdac:	orr	r3, r3, r2, lsl #6
   1bdb0:	strb	r3, [fp, #2]
   1bdb4:	add	r2, fp, #3
   1bdb8:	str	r2, [sp, #8]
   1bdbc:	add	r1, r1, #4
   1bdc0:	sub	r2, ip, #4
   1bdc4:	str	r2, [sp, #4]
   1bdc8:	ldr	r3, [sp, #12]
   1bdcc:	subs	r3, r3, #3
   1bdd0:	str	r3, [sp, #12]
   1bdd4:	bne	1bc60 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x128>
   1bdd8:	ldr	r3, [sp, #4]
   1bddc:	b	1be24 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2ec>
   1bde0:	mov	r5, #0
   1bde4:	add	r5, r4, r5
   1bde8:	b	1bba0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x68>
   1bdec:	mov	r3, #0
   1bdf0:	ldrb	r2, [sp, #21]
   1bdf4:	lsl	r1, r2, #4
   1bdf8:	tst	r1, #255	; 0xff
   1bdfc:	beq	1be0c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2d4>
   1be00:	ldr	r3, [sp, #4]
   1be04:	sub	r5, sl, r3
   1be08:	b	1bde4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2ac>
   1be0c:	ldrb	r1, [sp, #20]
   1be10:	lsr	r2, r2, #4
   1be14:	orr	r2, r2, r1, lsl #2
   1be18:	ldr	r1, [sp, #8]
   1be1c:	strb	r2, [r1], #1
   1be20:	str	r1, [sp, #8]
   1be24:	sub	r3, sl, r3
   1be28:	cmp	sl, r3
   1be2c:	addne	r5, r4, r3
   1be30:	bne	1bba0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x68>
   1be34:	ldr	r3, [sp, #8]
   1be38:	sub	r1, r3, r0
   1be3c:	cmp	r9, r1
   1be40:	bls	1be58 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x320>
   1be44:	sub	r1, r9, r1
   1be48:	ldr	r0, [r7]
   1be4c:	bl	159cc <flatcc_builder_truncate_vector@@Base>
   1be50:	cmp	r0, #0
   1be54:	bne	1bee4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3ac>
   1be58:	ldr	r0, [r7]
   1be5c:	bl	16b98 <flatcc_builder_end_vector@@Base>
   1be60:	str	r0, [r8]
   1be64:	cmp	r0, #0
   1be68:	beq	1bee4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3ac>
   1be6c:	ldrb	r3, [r5]
   1be70:	cmp	r3, #34	; 0x22
   1be74:	addeq	r0, r5, #1
   1be78:	beq	1bbc8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x90>
   1be7c:	mov	r3, #20
   1be80:	mov	r2, r6
   1be84:	mov	r1, r5
   1be88:	mov	r0, r7
   1be8c:	bl	199e8 <flatcc_json_parser_set_error@@Base>
   1be90:	b	1bbc8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x90>
   1be94:	mov	r3, #0
   1be98:	ldrb	r2, [sp, #22]
   1be9c:	lsl	r1, r2, #6
   1bea0:	tst	r1, #255	; 0xff
   1bea4:	bne	1be00 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2c8>
   1bea8:	ldr	r1, [sp, #12]
   1beac:	cmp	r1, #1
   1beb0:	bls	1be00 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2c8>
   1beb4:	ldrb	ip, [sp, #21]
   1beb8:	ldrb	lr, [sp, #20]
   1bebc:	lsr	r1, ip, #4
   1bec0:	orr	r1, r1, lr, lsl #2
   1bec4:	ldr	lr, [sp, #8]
   1bec8:	strb	r1, [lr]
   1becc:	lsr	r2, r2, #2
   1bed0:	orr	r2, r2, ip, lsl #4
   1bed4:	strb	r2, [lr, #1]
   1bed8:	add	r2, lr, #2
   1bedc:	str	r2, [sp, #8]
   1bee0:	b	1be24 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2ec>
   1bee4:	mov	r3, #0
   1bee8:	str	r3, [r8]
   1beec:	mov	r3, #33	; 0x21
   1bef0:	mov	r2, r6
   1bef4:	mov	r1, r5
   1bef8:	mov	r0, r7
   1befc:	bl	199e8 <flatcc_json_parser_set_error@@Base>
   1bf00:	b	1bbc8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x90>
   1bf04:	muleq	r1, r0, r5
   1bf08:	muleq	r1, r0, r6

0001bf0c <flatcc_json_parser_build_string@@Base>:
   1bf0c:	push	{r4, r5, r6, r7, r8, lr}
   1bf10:	sub	sp, sp, #8
   1bf14:	mov	r5, r0
   1bf18:	mov	r6, r2
   1bf1c:	mov	r8, r3
   1bf20:	cmp	r1, r2
   1bf24:	beq	1bf38 <flatcc_json_parser_build_string@@Base+0x2c>
   1bf28:	ldrb	r3, [r1]
   1bf2c:	cmp	r3, #34	; 0x22
   1bf30:	addeq	r7, r1, #1
   1bf34:	beq	1bf4c <flatcc_json_parser_build_string@@Base+0x40>
   1bf38:	mov	r3, #16
   1bf3c:	mov	r2, r6
   1bf40:	mov	r0, r5
   1bf44:	bl	199e8 <flatcc_json_parser_set_error@@Base>
   1bf48:	mov	r7, r0
   1bf4c:	mov	r2, r6
   1bf50:	mov	r1, r7
   1bf54:	mov	r0, r5
   1bf58:	bl	19a14 <flatcc_json_parser_string_part@@Base>
   1bf5c:	mov	r4, r0
   1bf60:	cmp	r6, r0
   1bf64:	beq	1bf74 <flatcc_json_parser_build_string@@Base+0x68>
   1bf68:	ldrb	r3, [r0]
   1bf6c:	cmp	r3, #34	; 0x22
   1bf70:	beq	1bf98 <flatcc_json_parser_build_string@@Base+0x8c>
   1bf74:	ldr	r0, [r5]
   1bf78:	bl	15c8c <flatcc_builder_start_string@@Base>
   1bf7c:	cmp	r0, #0
   1bf80:	beq	1bfc0 <flatcc_json_parser_build_string@@Base+0xb4>
   1bf84:	mov	r3, #0
   1bf88:	str	r3, [r8]
   1bf8c:	mov	r0, r4
   1bf90:	add	sp, sp, #8
   1bf94:	pop	{r4, r5, r6, r7, r8, pc}
   1bf98:	sub	r2, r0, r7
   1bf9c:	mov	r1, r7
   1bfa0:	ldr	r0, [r5]
   1bfa4:	bl	175a8 <flatcc_builder_create_string@@Base>
   1bfa8:	str	r0, [r8]
   1bfac:	ldrb	r3, [r4]
   1bfb0:	cmp	r3, #34	; 0x22
   1bfb4:	addeq	r4, r4, #1
   1bfb8:	bne	1c088 <flatcc_json_parser_build_string@@Base+0x17c>
   1bfbc:	b	1bf8c <flatcc_json_parser_build_string@@Base+0x80>
   1bfc0:	sub	r2, r4, r7
   1bfc4:	mov	r1, r7
   1bfc8:	ldr	r0, [r5]
   1bfcc:	bl	158a4 <flatcc_builder_append_string@@Base>
   1bfd0:	cmp	r0, #0
   1bfd4:	beq	1bf84 <flatcc_json_parser_build_string@@Base+0x78>
   1bfd8:	cmp	r6, r4
   1bfdc:	beq	1c07c <flatcc_json_parser_build_string@@Base+0x170>
   1bfe0:	ldrb	r3, [r4]
   1bfe4:	cmp	r3, #34	; 0x22
   1bfe8:	bne	1c010 <flatcc_json_parser_build_string@@Base+0x104>
   1bfec:	ldr	r0, [r5]
   1bff0:	bl	17720 <flatcc_builder_end_string@@Base>
   1bff4:	str	r0, [r8]
   1bff8:	b	1bfac <flatcc_json_parser_build_string@@Base+0xa0>
   1bffc:	mov	r4, r7
   1c000:	b	1bf84 <flatcc_json_parser_build_string@@Base+0x78>
   1c004:	ldrb	r3, [r4]
   1c008:	cmp	r3, #34	; 0x22
   1c00c:	beq	1bfec <flatcc_json_parser_build_string@@Base+0xe0>
   1c010:	add	r3, sp, #4
   1c014:	mov	r2, r6
   1c018:	mov	r1, r4
   1c01c:	mov	r0, r5
   1c020:	bl	1a218 <flatcc_json_parser_string_escape@@Base>
   1c024:	mov	r7, r0
   1c028:	ldrb	r2, [sp, #4]
   1c02c:	add	r1, sp, #5
   1c030:	ldr	r0, [r5]
   1c034:	bl	158a4 <flatcc_builder_append_string@@Base>
   1c038:	cmp	r0, #0
   1c03c:	beq	1bffc <flatcc_json_parser_build_string@@Base+0xf0>
   1c040:	mov	r2, r6
   1c044:	mov	r1, r7
   1c048:	mov	r0, r5
   1c04c:	bl	19a14 <flatcc_json_parser_string_part@@Base>
   1c050:	mov	r4, r0
   1c054:	cmp	r6, r0
   1c058:	beq	1c078 <flatcc_json_parser_build_string@@Base+0x16c>
   1c05c:	sub	r2, r0, r7
   1c060:	mov	r1, r7
   1c064:	ldr	r0, [r5]
   1c068:	bl	158a4 <flatcc_builder_append_string@@Base>
   1c06c:	cmp	r0, #0
   1c070:	bne	1c004 <flatcc_json_parser_build_string@@Base+0xf8>
   1c074:	b	1bf84 <flatcc_json_parser_build_string@@Base+0x78>
   1c078:	mov	r4, r6
   1c07c:	ldr	r0, [r5]
   1c080:	bl	17720 <flatcc_builder_end_string@@Base>
   1c084:	str	r0, [r8]
   1c088:	mov	r3, #20
   1c08c:	mov	r2, r6
   1c090:	mov	r1, r4
   1c094:	mov	r0, r5
   1c098:	bl	199e8 <flatcc_json_parser_set_error@@Base>
   1c09c:	mov	r4, r0
   1c0a0:	b	1bf8c <flatcc_json_parser_build_string@@Base+0x80>

0001c0a4 <flatcc_json_parser_prepare_unions@@Base>:
   1c0a4:	push	{r4, r5, r6, r7, r8, lr}
   1c0a8:	mov	r6, r0
   1c0ac:	mov	r4, r1
   1c0b0:	mov	r7, r2
   1c0b4:	mov	r5, r3
   1c0b8:	add	r1, r3, r3, lsl #1
   1c0bc:	lsl	r1, r1, #3
   1c0c0:	add	r1, r1, #8
   1c0c4:	ldr	r0, [r0]
   1c0c8:	bl	149b0 <flatcc_builder_enter_user_frame@@Base>
   1c0cc:	ldr	r3, [sp, #24]
   1c0d0:	str	r0, [r3]
   1c0d4:	cmp	r0, #0
   1c0d8:	beq	1c0f4 <flatcc_json_parser_prepare_unions@@Base+0x50>
   1c0dc:	mov	r1, r0
   1c0e0:	ldr	r0, [r6]
   1c0e4:	bl	14afc <flatcc_builder_get_user_frame_ptr@@Base>
   1c0e8:	str	r5, [r0]
   1c0ec:	mov	r0, r4
   1c0f0:	pop	{r4, r5, r6, r7, r8, pc}
   1c0f4:	mov	r3, #33	; 0x21
   1c0f8:	mov	r2, r7
   1c0fc:	mov	r1, r4
   1c100:	mov	r0, r6
   1c104:	bl	199e8 <flatcc_json_parser_set_error@@Base>
   1c108:	pop	{r4, r5, r6, r7, r8, pc}

0001c10c <flatcc_json_parser_finalize_unions@@Base>:
   1c10c:	push	{r4, r5, r6, r7, r8, lr}
   1c110:	mov	r4, r0
   1c114:	mov	r6, r1
   1c118:	mov	r7, r2
   1c11c:	mov	r5, r3
   1c120:	mov	r1, r3
   1c124:	ldr	r0, [r0]
   1c128:	bl	14afc <flatcc_builder_get_user_frame_ptr@@Base>
   1c12c:	ldr	r3, [r0, #4]
   1c130:	cmp	r3, #0
   1c134:	bne	1c14c <flatcc_json_parser_finalize_unions@@Base+0x40>
   1c138:	mov	r1, r5
   1c13c:	ldr	r0, [r4]
   1c140:	bl	14ab4 <flatcc_builder_exit_user_frame_at@@Base>
   1c144:	mov	r0, r6
   1c148:	pop	{r4, r5, r6, r7, r8, pc}
   1c14c:	mov	r3, #27
   1c150:	mov	r2, r7
   1c154:	mov	r1, r6
   1c158:	mov	r0, r4
   1c15c:	bl	199e8 <flatcc_json_parser_set_error@@Base>
   1c160:	mov	r6, r0
   1c164:	b	1c138 <flatcc_json_parser_finalize_unions@@Base+0x2c>

0001c168 <flatcc_json_parser_union@@Base>:
   1c168:	push	{r4, r5, r6, r7, lr}
   1c16c:	sub	sp, sp, #20
   1c170:	mov	r5, r0
   1c174:	mov	r7, r1
   1c178:	mov	r6, r2
   1c17c:	mov	r4, r3
   1c180:	ldr	r1, [sp, #44]	; 0x2c
   1c184:	ldr	r0, [r0]
   1c188:	bl	14afc <flatcc_builder_get_user_frame_ptr@@Base>
   1c18c:	add	r3, r4, r4, lsl #1
   1c190:	add	r3, r0, r3, lsl #3
   1c194:	ldr	r3, [r3, #8]
   1c198:	cmp	r3, #0
   1c19c:	beq	1c1c4 <flatcc_json_parser_union@@Base+0x5c>
   1c1a0:	mov	r3, #28
   1c1a4:	mov	r2, r6
   1c1a8:	mov	r1, r7
   1c1ac:	mov	r0, r5
   1c1b0:	bl	199e8 <flatcc_json_parser_set_error@@Base>
   1c1b4:	mov	r4, r0
   1c1b8:	mov	r0, r4
   1c1bc:	add	sp, sp, #20
   1c1c0:	pop	{r4, r5, r6, r7, pc}
   1c1c4:	add	r3, r4, r4, lsl #1
   1c1c8:	add	r3, r0, r3, lsl #3
   1c1cc:	ldrb	r3, [r3, #20]
   1c1d0:	cmp	r3, #0
   1c1d4:	beq	1c25c <flatcc_json_parser_union@@Base+0xf4>
   1c1d8:	add	r4, r4, r4, lsl #1
   1c1dc:	add	r4, r0, r4, lsl #3
   1c1e0:	ldrb	r3, [r4, #21]
   1c1e4:	strb	r3, [sp, #8]
   1c1e8:	cmp	r3, #0
   1c1ec:	beq	1c2a0 <flatcc_json_parser_union@@Base+0x138>
   1c1f0:	ldr	r2, [r0, #4]
   1c1f4:	sub	r2, r2, #1
   1c1f8:	str	r2, [r0, #4]
   1c1fc:	add	r2, sp, #12
   1c200:	str	r2, [sp]
   1c204:	mov	r2, r6
   1c208:	mov	r1, r7
   1c20c:	mov	r0, r5
   1c210:	ldr	r4, [sp, #48]	; 0x30
   1c214:	blx	r4
   1c218:	mov	r4, r0
   1c21c:	cmp	r6, r0
   1c220:	beq	1c1b8 <flatcc_json_parser_union@@Base+0x50>
   1c224:	add	r3, sp, #16
   1c228:	ldmdb	r3, {r2, r3}
   1c22c:	ldrh	r1, [sp, #40]	; 0x28
   1c230:	ldr	r0, [r5]
   1c234:	bl	17b40 <flatcc_builder_table_add_union@@Base>
   1c238:	cmp	r0, #0
   1c23c:	beq	1c1b8 <flatcc_json_parser_union@@Base+0x50>
   1c240:	mov	r3, #28
   1c244:	mov	r2, r6
   1c248:	mov	r1, r4
   1c24c:	mov	r0, r5
   1c250:	bl	199e8 <flatcc_json_parser_set_error@@Base>
   1c254:	mov	r4, r0
   1c258:	b	1c1b8 <flatcc_json_parser_union@@Base+0x50>
   1c25c:	ldr	r3, [r0, #4]
   1c260:	add	r3, r3, #1
   1c264:	str	r3, [r0, #4]
   1c268:	ldr	r1, [r5, #16]
   1c26c:	lsl	r3, r4, #1
   1c270:	add	r2, r3, r4
   1c274:	add	r2, r0, r2, lsl #3
   1c278:	str	r1, [r2, #16]
   1c27c:	ldr	r1, [r5, #4]
   1c280:	str	r1, [r2, #12]
   1c284:	str	r7, [r2, #8]
   1c288:	mov	r2, r6
   1c28c:	mov	r1, r7
   1c290:	mov	r0, r5
   1c294:	bl	1ac60 <flatcc_json_parser_generic_json@@Base>
   1c298:	mov	r4, r0
   1c29c:	b	1c1b8 <flatcc_json_parser_union@@Base+0x50>
   1c2a0:	mov	r3, #25
   1c2a4:	mov	r2, r6
   1c2a8:	mov	r1, r7
   1c2ac:	mov	r0, r5
   1c2b0:	bl	199e8 <flatcc_json_parser_set_error@@Base>
   1c2b4:	mov	r4, r0
   1c2b8:	b	1c1b8 <flatcc_json_parser_union@@Base+0x50>

0001c2bc <flatcc_json_parser_union_type@@Base>:
   1c2bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c2c0:	sub	sp, sp, #36	; 0x24
   1c2c4:	mov	r5, r0
   1c2c8:	mov	r9, r1
   1c2cc:	mov	r6, r2
   1c2d0:	mov	r4, r3
   1c2d4:	ldr	r1, [sp, #76]	; 0x4c
   1c2d8:	ldr	r0, [r0]
   1c2dc:	bl	14afc <flatcc_builder_get_user_frame_ptr@@Base>
   1c2e0:	add	r8, r0, #8
   1c2e4:	add	r4, r4, r4, lsl #1
   1c2e8:	lsl	r4, r4, #3
   1c2ec:	add	sl, r8, r4
   1c2f0:	ldrb	r3, [sl, #12]
   1c2f4:	cmp	r3, #0
   1c2f8:	bne	1c418 <flatcc_json_parser_union_type@@Base+0x15c>
   1c2fc:	mov	r7, r0
   1c300:	mov	r3, #1
   1c304:	strb	r3, [sl, #12]
   1c308:	mov	r2, #0
   1c30c:	mov	r3, #0
   1c310:	strd	r2, [sp, #16]
   1c314:	mov	r3, #0
   1c318:	str	r3, [sp, #12]
   1c31c:	strb	r3, [sl, #13]
   1c320:	cmp	r9, r6
   1c324:	beq	1c45c <flatcc_json_parser_union_type@@Base+0x1a0>
   1c328:	add	r3, sp, #16
   1c32c:	str	r3, [sp]
   1c330:	add	r3, sp, #12
   1c334:	mov	r2, r6
   1c338:	mov	r1, r9
   1c33c:	mov	r0, r5
   1c340:	bl	1b9dc <flatcc_json_parser_integer@@Base>
   1c344:	mov	fp, r0
   1c348:	cmp	r9, r0
   1c34c:	beq	1c45c <flatcc_json_parser_union_type@@Base+0x1a0>
   1c350:	ldr	r3, [sp, #12]
   1c354:	cmp	r3, #0
   1c358:	bne	1c43c <flatcc_json_parser_union_type@@Base+0x180>
   1c35c:	ldrd	r2, [sp, #16]
   1c360:	cmp	r3, #0
   1c364:	cmpeq	r2, #255	; 0xff
   1c368:	strbls	r2, [sl, #13]
   1c36c:	bhi	1c480 <flatcc_json_parser_union_type@@Base+0x1c4>
   1c370:	ldr	r3, [r8, r4]
   1c374:	cmp	r3, #0
   1c378:	beq	1c49c <flatcc_json_parser_union_type@@Base+0x1e0>
   1c37c:	ldr	r3, [r7, #4]
   1c380:	cmp	r3, #0
   1c384:	beq	1c4b4 <flatcc_json_parser_union_type@@Base+0x1f8>
   1c388:	sub	r3, r3, #1
   1c38c:	str	r3, [r7, #4]
   1c390:	ldr	r9, [r5, #16]
   1c394:	ldr	r7, [r5, #4]
   1c398:	ldr	r3, [sl, #8]
   1c39c:	str	r3, [r5, #16]
   1c3a0:	ldr	r3, [sl, #4]
   1c3a4:	str	r3, [r5, #4]
   1c3a8:	ldrb	r3, [sl, #13]
   1c3ac:	strb	r3, [sp, #24]
   1c3b0:	ldr	r1, [r8, r4]
   1c3b4:	add	r2, sp, #28
   1c3b8:	str	r2, [sp]
   1c3bc:	mov	r2, r6
   1c3c0:	mov	r0, r5
   1c3c4:	ldr	r4, [sp, #84]	; 0x54
   1c3c8:	blx	r4
   1c3cc:	cmp	r6, r0
   1c3d0:	moveq	fp, r0
   1c3d4:	beq	1c430 <flatcc_json_parser_union_type@@Base+0x174>
   1c3d8:	add	r3, sp, #32
   1c3dc:	ldmdb	r3, {r2, r3}
   1c3e0:	ldrh	r1, [sp, #72]	; 0x48
   1c3e4:	ldr	r0, [r5]
   1c3e8:	bl	17b40 <flatcc_builder_table_add_union@@Base>
   1c3ec:	cmp	r0, #0
   1c3f0:	streq	r9, [r5, #16]
   1c3f4:	streq	r7, [r5, #4]
   1c3f8:	beq	1c430 <flatcc_json_parser_union_type@@Base+0x174>
   1c3fc:	mov	r3, #28
   1c400:	mov	r2, r6
   1c404:	mov	r1, fp
   1c408:	mov	r0, r5
   1c40c:	bl	199e8 <flatcc_json_parser_set_error@@Base>
   1c410:	mov	fp, r0
   1c414:	b	1c430 <flatcc_json_parser_union_type@@Base+0x174>
   1c418:	mov	r3, #28
   1c41c:	mov	r2, r6
   1c420:	mov	r1, r9
   1c424:	mov	r0, r5
   1c428:	bl	199e8 <flatcc_json_parser_set_error@@Base>
   1c42c:	mov	fp, r0
   1c430:	mov	r0, fp
   1c434:	add	sp, sp, #36	; 0x24
   1c438:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c43c:	mov	r3, #8
   1c440:	mov	r2, r6
   1c444:	mov	r1, r0
   1c448:	mov	r0, r5
   1c44c:	bl	199e8 <flatcc_json_parser_set_error@@Base>
   1c450:	mov	fp, r0
   1c454:	cmp	r9, fp
   1c458:	bne	1c370 <flatcc_json_parser_union_type@@Base+0xb4>
   1c45c:	add	r3, sl, #13
   1c460:	str	r3, [sp]
   1c464:	ldr	r3, [sp, #80]	; 0x50
   1c468:	mov	r2, r6
   1c46c:	mov	r1, r9
   1c470:	mov	r0, r5
   1c474:	bl	19c00 <flatcc_json_parser_space_ext@@Base+0x140>
   1c478:	mov	fp, r0
   1c47c:	b	1c370 <flatcc_json_parser_union_type@@Base+0xb4>
   1c480:	mov	r3, #7
   1c484:	mov	r2, r6
   1c488:	mov	r1, r0
   1c48c:	mov	r0, r5
   1c490:	bl	199e8 <flatcc_json_parser_set_error@@Base>
   1c494:	mov	fp, r0
   1c498:	b	1c454 <flatcc_json_parser_union_type@@Base+0x198>
   1c49c:	ldrb	r2, [sl, #13]
   1c4a0:	ldr	r3, [r7, #4]
   1c4a4:	cmp	r2, #0
   1c4a8:	addne	r3, r3, #1
   1c4ac:	str	r3, [r7, #4]
   1c4b0:	b	1c430 <flatcc_json_parser_union_type@@Base+0x174>
   1c4b4:	ldr	r3, [pc, #12]	; 1c4c8 <flatcc_json_parser_union_type@@Base+0x20c>
   1c4b8:	ldr	r2, [pc, #12]	; 1c4cc <flatcc_json_parser_union_type@@Base+0x210>
   1c4bc:	ldr	r1, [pc, #12]	; 1c4d0 <flatcc_json_parser_union_type@@Base+0x214>
   1c4c0:	ldr	r0, [pc, #12]	; 1c4d4 <flatcc_json_parser_union_type@@Base+0x218>
   1c4c4:	bl	124d8 <__assert_fail@plt>
   1c4c8:	muleq	r1, r0, r7
   1c4cc:	andeq	r0, r0, r5, asr #7
   1c4d0:	andeq	lr, r1, r8, ror #23
   1c4d4:	andeq	lr, r1, r4, lsr ip

0001c4d8 <flatcc_json_parser_union_vector@@Base>:
   1c4d8:	push	{r4, r5, r6, r7, lr}
   1c4dc:	sub	sp, sp, #20
   1c4e0:	mov	r5, r0
   1c4e4:	mov	r6, r1
   1c4e8:	mov	r7, r2
   1c4ec:	mov	r4, r3
   1c4f0:	ldr	r1, [sp, #44]	; 0x2c
   1c4f4:	ldr	r0, [r0]
   1c4f8:	bl	14afc <flatcc_builder_get_user_frame_ptr@@Base>
   1c4fc:	add	r2, r0, #8
   1c500:	add	r4, r4, r4, lsl #1
   1c504:	lsl	r3, r4, #3
   1c508:	add	r1, r2, r3
   1c50c:	ldr	ip, [r2, r3]
   1c510:	cmp	ip, #0
   1c514:	beq	1c534 <flatcc_json_parser_union_vector@@Base+0x5c>
   1c518:	mov	r3, #28
   1c51c:	mov	r2, r7
   1c520:	mov	r1, r6
   1c524:	mov	r0, r5
   1c528:	bl	199e8 <flatcc_json_parser_set_error@@Base>
   1c52c:	add	sp, sp, #20
   1c530:	pop	{r4, r5, r6, r7, pc}
   1c534:	ldrb	ip, [r1, #12]
   1c538:	cmp	ip, #0
   1c53c:	beq	1c57c <flatcc_json_parser_union_vector@@Base+0xa4>
   1c540:	ldr	r3, [r0, #4]
   1c544:	sub	r3, r3, #1
   1c548:	str	r3, [r0, #4]
   1c54c:	ldr	r3, [r1, #20]
   1c550:	ldr	r2, [sp, #48]	; 0x30
   1c554:	str	r2, [sp, #8]
   1c558:	ldrh	r2, [sp, #40]	; 0x28
   1c55c:	str	r2, [sp, #4]
   1c560:	ldr	r2, [r1, #16]
   1c564:	str	r2, [sp]
   1c568:	mov	r2, r7
   1c56c:	mov	r1, r6
   1c570:	mov	r0, r5
   1c574:	bl	19e1c <flatcc_json_parser_space_ext@@Base+0x35c>
   1c578:	b	1c52c <flatcc_json_parser_union_vector@@Base+0x54>
   1c57c:	ldr	ip, [r0, #4]
   1c580:	add	ip, ip, #1
   1c584:	str	ip, [r0, #4]
   1c588:	ldr	r0, [r5, #16]
   1c58c:	str	r0, [r1, #8]
   1c590:	ldr	r0, [r5, #4]
   1c594:	str	r0, [r1, #4]
   1c598:	str	r6, [r2, r3]
   1c59c:	mov	r2, r7
   1c5a0:	mov	r1, r6
   1c5a4:	mov	r0, r5
   1c5a8:	bl	1ac60 <flatcc_json_parser_generic_json@@Base>
   1c5ac:	b	1c52c <flatcc_json_parser_union_vector@@Base+0x54>

0001c5b0 <flatcc_json_parser_union_type_vector@@Base>:
   1c5b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c5b4:	sub	sp, sp, #60	; 0x3c
   1c5b8:	mov	r7, r0
   1c5bc:	mov	r5, r1
   1c5c0:	mov	r6, r2
   1c5c4:	mov	r4, r3
   1c5c8:	ldrh	r3, [sp, #96]	; 0x60
   1c5cc:	str	r3, [sp, #24]
   1c5d0:	ldr	r1, [sp, #100]	; 0x64
   1c5d4:	ldr	r0, [r0]
   1c5d8:	bl	14afc <flatcc_builder_get_user_frame_ptr@@Base>
   1c5dc:	add	r4, r4, r4, lsl #1
   1c5e0:	lsl	r3, r4, #3
   1c5e4:	str	r3, [sp, #28]
   1c5e8:	add	r0, r0, #8
   1c5ec:	add	r3, r0, r3
   1c5f0:	str	r3, [sp, #20]
   1c5f4:	ldrb	r3, [r3, #12]
   1c5f8:	cmp	r3, #0
   1c5fc:	bne	1c654 <flatcc_json_parser_union_type_vector@@Base+0xa4>
   1c600:	mov	r1, #1
   1c604:	ldr	r3, [sp, #20]
   1c608:	strb	r1, [r3, #12]
   1c60c:	mvn	r3, #0
   1c610:	mov	r2, r1
   1c614:	ldr	r0, [r7]
   1c618:	bl	15b88 <flatcc_builder_start_vector@@Base>
   1c61c:	cmp	r0, #0
   1c620:	bne	1c9b4 <flatcc_json_parser_union_type_vector@@Base+0x404>
   1c624:	cmp	r5, r6
   1c628:	beq	1c638 <flatcc_json_parser_union_type_vector@@Base+0x88>
   1c62c:	ldrb	r3, [r5]
   1c630:	cmp	r3, #91	; 0x5b
   1c634:	beq	1c66c <flatcc_json_parser_union_type_vector@@Base+0xbc>
   1c638:	mov	r3, #22
   1c63c:	mov	r2, r6
   1c640:	mov	r1, r5
   1c644:	mov	r0, r7
   1c648:	bl	199e8 <flatcc_json_parser_set_error@@Base>
   1c64c:	mov	r5, r0
   1c650:	b	1c958 <flatcc_json_parser_union_type_vector@@Base+0x3a8>
   1c654:	mov	r3, #28
   1c658:	mov	r2, r6
   1c65c:	mov	r1, r5
   1c660:	mov	r0, r7
   1c664:	bl	199e8 <flatcc_json_parser_set_error@@Base>
   1c668:	b	1c9c8 <flatcc_json_parser_union_type_vector@@Base+0x418>
   1c66c:	add	r1, r5, #1
   1c670:	mov	sl, r6
   1c674:	sub	r3, r6, r1
   1c678:	cmp	r3, #1
   1c67c:	ble	1c694 <flatcc_json_parser_union_type_vector@@Base+0xe4>
   1c680:	ldrb	r3, [r5, #1]
   1c684:	cmp	r3, #32
   1c688:	movhi	r5, r1
   1c68c:	bhi	1c6a4 <flatcc_json_parser_union_type_vector@@Base+0xf4>
   1c690:	beq	1c6c4 <flatcc_json_parser_union_type_vector@@Base+0x114>
   1c694:	mov	r2, r6
   1c698:	mov	r0, r7
   1c69c:	bl	19ac0 <flatcc_json_parser_space_ext@@Base>
   1c6a0:	mov	r5, r0
   1c6a4:	cmp	r6, r5
   1c6a8:	beq	1c6b8 <flatcc_json_parser_union_type_vector@@Base+0x108>
   1c6ac:	ldrb	r3, [r5]
   1c6b0:	cmp	r3, #93	; 0x5d
   1c6b4:	beq	1c6d8 <flatcc_json_parser_union_type_vector@@Base+0x128>
   1c6b8:	mov	r8, #0
   1c6bc:	add	fp, sp, #40	; 0x28
   1c6c0:	b	1c854 <flatcc_json_parser_union_type_vector@@Base+0x2a4>
   1c6c4:	ldrb	r3, [r5, #2]
   1c6c8:	cmp	r3, #32
   1c6cc:	addhi	r5, r5, #2
   1c6d0:	bls	1c694 <flatcc_json_parser_union_type_vector@@Base+0xe4>
   1c6d4:	b	1c6a4 <flatcc_json_parser_union_type_vector@@Base+0xf4>
   1c6d8:	add	r1, r5, #1
   1c6dc:	sub	r3, r6, r1
   1c6e0:	cmp	r3, #1
   1c6e4:	ble	1c6fc <flatcc_json_parser_union_type_vector@@Base+0x14c>
   1c6e8:	ldrb	r3, [r5, #1]
   1c6ec:	cmp	r3, #32
   1c6f0:	movhi	r5, r1
   1c6f4:	bhi	1c958 <flatcc_json_parser_union_type_vector@@Base+0x3a8>
   1c6f8:	beq	1c710 <flatcc_json_parser_union_type_vector@@Base+0x160>
   1c6fc:	mov	r2, r6
   1c700:	mov	r0, r7
   1c704:	bl	19ac0 <flatcc_json_parser_space_ext@@Base>
   1c708:	mov	r5, r0
   1c70c:	b	1c958 <flatcc_json_parser_union_type_vector@@Base+0x3a8>
   1c710:	ldrb	r3, [r5, #2]
   1c714:	cmp	r3, #32
   1c718:	addhi	r5, r5, #2
   1c71c:	bls	1c6fc <flatcc_json_parser_union_type_vector@@Base+0x14c>
   1c720:	b	1c958 <flatcc_json_parser_union_type_vector@@Base+0x3a8>
   1c724:	mov	r3, #8
   1c728:	mov	r2, r6
   1c72c:	mov	r1, r0
   1c730:	mov	r0, r7
   1c734:	bl	199e8 <flatcc_json_parser_set_error@@Base>
   1c738:	mov	r4, r0
   1c73c:	cmp	r4, r5
   1c740:	bne	1c8c8 <flatcc_json_parser_union_type_vector@@Base+0x318>
   1c744:	add	r3, sp, #55	; 0x37
   1c748:	str	r3, [sp]
   1c74c:	ldr	r3, [sp, #104]	; 0x68
   1c750:	mov	r2, r6
   1c754:	mov	r1, r5
   1c758:	mov	r0, r7
   1c75c:	bl	19c00 <flatcc_json_parser_space_ext@@Base+0x140>
   1c760:	mov	r4, r0
   1c764:	cmp	r6, r0
   1c768:	cmpne	r0, r5
   1c76c:	bne	1c8c8 <flatcc_json_parser_union_type_vector@@Base+0x318>
   1c770:	mov	r5, r0
   1c774:	b	1c9b4 <flatcc_json_parser_union_type_vector@@Base+0x404>
   1c778:	mov	r3, #7
   1c77c:	mov	r2, r6
   1c780:	mov	r1, r0
   1c784:	mov	r0, r7
   1c788:	bl	199e8 <flatcc_json_parser_set_error@@Base>
   1c78c:	mov	r4, r0
   1c790:	b	1c73c <flatcc_json_parser_union_type_vector@@Base+0x18c>
   1c794:	mov	r3, #15
   1c798:	mov	r2, r6
   1c79c:	mov	r1, r4
   1c7a0:	mov	r0, r7
   1c7a4:	bl	199e8 <flatcc_json_parser_set_error@@Base>
   1c7a8:	b	1c9c8 <flatcc_json_parser_union_type_vector@@Base+0x418>
   1c7ac:	ldrb	r3, [r4, #1]
   1c7b0:	cmp	r3, #32
   1c7b4:	addhi	r4, r4, #1
   1c7b8:	bls	1c910 <flatcc_json_parser_union_type_vector@@Base+0x360>
   1c7bc:	b	1c924 <flatcc_json_parser_union_type_vector@@Base+0x374>
   1c7c0:	add	r5, r4, #1
   1c7c4:	sub	r3, r6, r5
   1c7c8:	cmp	r3, #1
   1c7cc:	ble	1c7e0 <flatcc_json_parser_union_type_vector@@Base+0x230>
   1c7d0:	ldrb	r3, [r4, #1]
   1c7d4:	cmp	r3, #32
   1c7d8:	bhi	1c958 <flatcc_json_parser_union_type_vector@@Base+0x3a8>
   1c7dc:	beq	1c7f8 <flatcc_json_parser_union_type_vector@@Base+0x248>
   1c7e0:	mov	r2, r6
   1c7e4:	mov	r1, r5
   1c7e8:	mov	r0, r7
   1c7ec:	bl	19ac0 <flatcc_json_parser_space_ext@@Base>
   1c7f0:	mov	r5, r0
   1c7f4:	b	1c958 <flatcc_json_parser_union_type_vector@@Base+0x3a8>
   1c7f8:	ldrb	r3, [r4, #2]
   1c7fc:	cmp	r3, #32
   1c800:	addhi	r5, r4, #2
   1c804:	bls	1c7e0 <flatcc_json_parser_union_type_vector@@Base+0x230>
   1c808:	b	1c958 <flatcc_json_parser_union_type_vector@@Base+0x3a8>
   1c80c:	add	r5, r4, #1
   1c810:	sub	r3, sl, r5
   1c814:	cmp	r3, #1
   1c818:	ble	1c82c <flatcc_json_parser_union_type_vector@@Base+0x27c>
   1c81c:	ldrb	r3, [r4, #1]
   1c820:	cmp	r3, #32
   1c824:	bhi	1c840 <flatcc_json_parser_union_type_vector@@Base+0x290>
   1c828:	beq	1c9d0 <flatcc_json_parser_union_type_vector@@Base+0x420>
   1c82c:	mov	r2, r6
   1c830:	mov	r1, r5
   1c834:	mov	r0, r7
   1c838:	bl	19ac0 <flatcc_json_parser_space_ext@@Base>
   1c83c:	mov	r5, r0
   1c840:	cmp	r6, r5
   1c844:	beq	1c9e4 <flatcc_json_parser_union_type_vector@@Base+0x434>
   1c848:	ldrb	r3, [r5]
   1c84c:	cmp	r3, #93	; 0x5d
   1c850:	beq	1ca00 <flatcc_json_parser_union_type_vector@@Base+0x450>
   1c854:	mov	r1, #1
   1c858:	ldr	r0, [r7]
   1c85c:	bl	15380 <flatcc_builder_extend_vector@@Base>
   1c860:	subs	r9, r0, #0
   1c864:	beq	1c9b4 <flatcc_json_parser_union_type_vector@@Base+0x404>
   1c868:	mov	r2, #0
   1c86c:	mov	r3, #0
   1c870:	strd	r2, [sp, #40]	; 0x28
   1c874:	str	r8, [sp, #36]	; 0x24
   1c878:	strb	r8, [sp, #55]	; 0x37
   1c87c:	cmp	r6, r5
   1c880:	beq	1c744 <flatcc_json_parser_union_type_vector@@Base+0x194>
   1c884:	str	fp, [sp]
   1c888:	add	r3, sp, #36	; 0x24
   1c88c:	mov	r2, r6
   1c890:	mov	r1, r5
   1c894:	mov	r0, r7
   1c898:	bl	1b9dc <flatcc_json_parser_integer@@Base>
   1c89c:	mov	r4, r0
   1c8a0:	cmp	r0, r5
   1c8a4:	beq	1c744 <flatcc_json_parser_union_type_vector@@Base+0x194>
   1c8a8:	ldr	r3, [sp, #36]	; 0x24
   1c8ac:	cmp	r3, #0
   1c8b0:	bne	1c724 <flatcc_json_parser_union_type_vector@@Base+0x174>
   1c8b4:	ldrd	r2, [sp, #40]	; 0x28
   1c8b8:	cmp	r3, #0
   1c8bc:	cmpeq	r2, #255	; 0xff
   1c8c0:	strbls	r2, [sp, #55]	; 0x37
   1c8c4:	bhi	1c778 <flatcc_json_parser_union_type_vector@@Base+0x1c8>
   1c8c8:	ldrb	r0, [sp, #55]	; 0x37
   1c8cc:	ldr	r3, [sp, #112]	; 0x70
   1c8d0:	blx	r3
   1c8d4:	cmp	r0, #0
   1c8d8:	bne	1c8ec <flatcc_json_parser_union_type_vector@@Base+0x33c>
   1c8dc:	ldr	r3, [r7, #8]
   1c8e0:	tst	r3, #1
   1c8e4:	beq	1c794 <flatcc_json_parser_union_type_vector@@Base+0x1e4>
   1c8e8:	strb	r8, [sp, #55]	; 0x37
   1c8ec:	ldrb	r3, [sp, #55]	; 0x37
   1c8f0:	strb	r3, [r9]
   1c8f4:	sub	r3, sl, r4
   1c8f8:	cmp	r3, #1
   1c8fc:	ble	1c910 <flatcc_json_parser_union_type_vector@@Base+0x360>
   1c900:	ldrb	r3, [r4]
   1c904:	cmp	r3, #32
   1c908:	bhi	1c924 <flatcc_json_parser_union_type_vector@@Base+0x374>
   1c90c:	beq	1c7ac <flatcc_json_parser_union_type_vector@@Base+0x1fc>
   1c910:	mov	r2, r6
   1c914:	mov	r1, r4
   1c918:	mov	r0, r7
   1c91c:	bl	19ac0 <flatcc_json_parser_space_ext@@Base>
   1c920:	mov	r4, r0
   1c924:	cmp	r6, r4
   1c928:	beq	1cb24 <flatcc_json_parser_union_type_vector@@Base+0x574>
   1c92c:	ldrb	r3, [r4]
   1c930:	cmp	r3, #44	; 0x2c
   1c934:	beq	1c80c <flatcc_json_parser_union_type_vector@@Base+0x25c>
   1c938:	cmp	r3, #93	; 0x5d
   1c93c:	beq	1c7c0 <flatcc_json_parser_union_type_vector@@Base+0x210>
   1c940:	mov	r3, #9
   1c944:	mov	r2, r6
   1c948:	mov	r1, r4
   1c94c:	mov	r0, r7
   1c950:	bl	199e8 <flatcc_json_parser_set_error@@Base>
   1c954:	mov	r5, r0
   1c958:	ldr	r0, [r7]
   1c95c:	bl	16c8c <flatcc_builder_vector_count@@Base>
   1c960:	mov	r4, r0
   1c964:	ldr	r3, [sp, #20]
   1c968:	str	r0, [r3, #16]
   1c96c:	mov	r1, r0
   1c970:	ldr	r0, [r7]
   1c974:	bl	149b0 <flatcc_builder_enter_user_frame@@Base>
   1c978:	mov	r8, r0
   1c97c:	mov	r1, r0
   1c980:	ldr	r0, [r7]
   1c984:	bl	14afc <flatcc_builder_get_user_frame_ptr@@Base>
   1c988:	mov	r9, r0
   1c98c:	ldr	r0, [r7]
   1c990:	bl	16c98 <flatcc_builder_vector_edit@@Base>
   1c994:	mov	r2, r4
   1c998:	mov	r1, r0
   1c99c:	mov	r0, r9
   1c9a0:	bl	12430 <memcpy@plt>
   1c9a4:	ldr	r0, [r7]
   1c9a8:	bl	16b98 <flatcc_builder_end_vector@@Base>
   1c9ac:	subs	r9, r0, #0
   1c9b0:	bne	1ca4c <flatcc_json_parser_union_type_vector@@Base+0x49c>
   1c9b4:	mov	r3, #33	; 0x21
   1c9b8:	mov	r2, r6
   1c9bc:	mov	r1, r5
   1c9c0:	mov	r0, r7
   1c9c4:	bl	199e8 <flatcc_json_parser_set_error@@Base>
   1c9c8:	add	sp, sp, #60	; 0x3c
   1c9cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c9d0:	ldrb	r3, [r4, #2]
   1c9d4:	cmp	r3, #32
   1c9d8:	addhi	r5, r4, #2
   1c9dc:	bls	1c82c <flatcc_json_parser_union_type_vector@@Base+0x27c>
   1c9e0:	b	1c840 <flatcc_json_parser_union_type_vector@@Base+0x290>
   1c9e4:	mov	r3, #9
   1c9e8:	mov	r2, r6
   1c9ec:	mov	r1, r5
   1c9f0:	mov	r0, r7
   1c9f4:	bl	199e8 <flatcc_json_parser_set_error@@Base>
   1c9f8:	mov	r5, r0
   1c9fc:	b	1c958 <flatcc_json_parser_union_type_vector@@Base+0x3a8>
   1ca00:	add	r1, r5, #1
   1ca04:	sub	r3, r6, r1
   1ca08:	cmp	r3, #1
   1ca0c:	ble	1ca24 <flatcc_json_parser_union_type_vector@@Base+0x474>
   1ca10:	ldrb	r3, [r5, #1]
   1ca14:	cmp	r3, #32
   1ca18:	movhi	r5, r1
   1ca1c:	bhi	1c958 <flatcc_json_parser_union_type_vector@@Base+0x3a8>
   1ca20:	beq	1ca38 <flatcc_json_parser_union_type_vector@@Base+0x488>
   1ca24:	mov	r2, r6
   1ca28:	mov	r0, r7
   1ca2c:	bl	19ac0 <flatcc_json_parser_space_ext@@Base>
   1ca30:	mov	r5, r0
   1ca34:	b	1c958 <flatcc_json_parser_union_type_vector@@Base+0x3a8>
   1ca38:	ldrb	r3, [r5, #2]
   1ca3c:	cmp	r3, #32
   1ca40:	addhi	r5, r5, #2
   1ca44:	bls	1ca24 <flatcc_json_parser_union_type_vector@@Base+0x474>
   1ca48:	b	1c958 <flatcc_json_parser_union_type_vector@@Base+0x3a8>
   1ca4c:	ldr	r3, [sp, #24]
   1ca50:	sub	r1, r3, #1
   1ca54:	ldr	r0, [r7]
   1ca58:	bl	17a00 <flatcc_builder_table_add_offset@@Base>
   1ca5c:	cmp	r0, #0
   1ca60:	beq	1c9b4 <flatcc_json_parser_union_type_vector@@Base+0x404>
   1ca64:	str	r9, [r0]
   1ca68:	ldr	r1, [sp, #100]	; 0x64
   1ca6c:	ldr	r0, [r7]
   1ca70:	bl	14afc <flatcc_builder_get_user_frame_ptr@@Base>
   1ca74:	add	r2, r0, #8
   1ca78:	ldr	r3, [sp, #28]
   1ca7c:	add	r1, r2, r3
   1ca80:	str	r8, [r1, #20]
   1ca84:	ldr	r3, [r2, r3]
   1ca88:	cmp	r3, #0
   1ca8c:	beq	1cafc <flatcc_json_parser_union_type_vector@@Base+0x54c>
   1ca90:	ldr	r3, [r0, #4]
   1ca94:	cmp	r3, #0
   1ca98:	beq	1cb10 <flatcc_json_parser_union_type_vector@@Base+0x560>
   1ca9c:	sub	r3, r3, #1
   1caa0:	str	r3, [r0, #4]
   1caa4:	ldr	sl, [r7, #16]
   1caa8:	ldr	r9, [r7, #4]
   1caac:	ldr	r3, [r1, #8]
   1cab0:	str	r3, [r7, #16]
   1cab4:	ldr	r3, [r1, #4]
   1cab8:	str	r3, [r7, #4]
   1cabc:	ldr	r3, [sp, #28]
   1cac0:	ldr	r1, [r2, r3]
   1cac4:	ldr	r3, [sp, #108]	; 0x6c
   1cac8:	str	r3, [sp, #8]
   1cacc:	ldr	r3, [sp, #24]
   1cad0:	str	r3, [sp, #4]
   1cad4:	str	r4, [sp]
   1cad8:	mov	r3, r8
   1cadc:	mov	r2, r6
   1cae0:	mov	r0, r7
   1cae4:	bl	19e1c <flatcc_json_parser_space_ext@@Base+0x35c>
   1cae8:	cmp	r6, r0
   1caec:	strne	sl, [r7, #16]
   1caf0:	strne	r9, [r7, #4]
   1caf4:	movne	r0, r5
   1caf8:	b	1c9c8 <flatcc_json_parser_union_type_vector@@Base+0x418>
   1cafc:	ldr	r3, [r0, #4]
   1cb00:	add	r3, r3, #1
   1cb04:	str	r3, [r0, #4]
   1cb08:	mov	r0, r5
   1cb0c:	b	1c9c8 <flatcc_json_parser_union_type_vector@@Base+0x418>
   1cb10:	ldr	r3, [pc, #20]	; 1cb2c <flatcc_json_parser_union_type_vector@@Base+0x57c>
   1cb14:	ldr	r2, [pc, #20]	; 1cb30 <flatcc_json_parser_union_type_vector@@Base+0x580>
   1cb18:	ldr	r1, [pc, #20]	; 1cb34 <flatcc_json_parser_union_type_vector@@Base+0x584>
   1cb1c:	ldr	r0, [pc, #20]	; 1cb38 <flatcc_json_parser_union_type_vector@@Base+0x588>
   1cb20:	bl	124d8 <__assert_fail@plt>
   1cb24:	mov	r5, r6
   1cb28:	b	1c958 <flatcc_json_parser_union_type_vector@@Base+0x3a8>
   1cb2c:			; <UNDEFINED> instruction: 0x0001e7b0
   1cb30:	andeq	r0, r0, r2, ror #8
   1cb34:	andeq	lr, r1, r8, ror #23
   1cb38:	andeq	lr, r1, r4, lsr ip

0001cb3c <flatcc_json_parser_table_as_root@@Base>:
   1cb3c:	push	{r4, r5, r6, r7, r8, r9, lr}
   1cb40:	sub	sp, sp, #52	; 0x34
   1cb44:	mov	r8, r0
   1cb48:	mov	r5, r2
   1cb4c:	ldr	r9, [sp, #80]	; 0x50
   1cb50:	and	r6, r9, #4
   1cb54:	cmp	r6, #0
   1cb58:	movne	r6, #2
   1cb5c:	subs	r4, r1, #0
   1cb60:	addeq	r4, sp, #4
   1cb64:	add	r7, r2, r3
   1cb68:	mov	r2, #44	; 0x2c
   1cb6c:	mov	r1, #0
   1cb70:	mov	r0, r4
   1cb74:	bl	124a8 <memset@plt>
   1cb78:	str	r8, [r4]
   1cb7c:	str	r5, [r4, #4]
   1cb80:	mov	r3, #1
   1cb84:	str	r3, [r4, #16]
   1cb88:	str	r9, [r4, #8]
   1cb8c:	str	r5, [r4, #28]
   1cb90:	str	r7, [r4, #32]
   1cb94:	str	r5, [r4, #36]	; 0x24
   1cb98:	mov	r3, r6
   1cb9c:	mov	r2, #0
   1cba0:	ldr	r1, [sp, #84]	; 0x54
   1cba4:	mov	r0, r8
   1cba8:	bl	1500c <flatcc_builder_start_buffer@@Base>
   1cbac:	cmp	r0, #0
   1cbb0:	bne	1cc00 <flatcc_json_parser_table_as_root@@Base+0xc4>
   1cbb4:	mov	r3, sp
   1cbb8:	mov	r2, r7
   1cbbc:	mov	r1, r5
   1cbc0:	mov	r0, r4
   1cbc4:	ldr	r6, [sp, #88]	; 0x58
   1cbc8:	blx	r6
   1cbcc:	ldr	r6, [r4, #24]
   1cbd0:	cmp	r6, #0
   1cbd4:	beq	1cbe4 <flatcc_json_parser_table_as_root@@Base+0xa8>
   1cbd8:	mov	r0, r6
   1cbdc:	add	sp, sp, #52	; 0x34
   1cbe0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1cbe4:	ldr	r1, [sp]
   1cbe8:	mov	r0, r8
   1cbec:	bl	150c4 <flatcc_builder_end_buffer@@Base>
   1cbf0:	cmp	r0, #0
   1cbf4:	beq	1cc08 <flatcc_json_parser_table_as_root@@Base+0xcc>
   1cbf8:	str	r5, [r4, #40]	; 0x28
   1cbfc:	b	1cbd8 <flatcc_json_parser_table_as_root@@Base+0x9c>
   1cc00:	mvn	r6, #0
   1cc04:	b	1cbd8 <flatcc_json_parser_table_as_root@@Base+0x9c>
   1cc08:	mvn	r6, #0
   1cc0c:	b	1cbd8 <flatcc_json_parser_table_as_root@@Base+0x9c>

0001cc10 <flatcc_json_parser_struct_as_root@@Base>:
   1cc10:	push	{r4, r5, r6, r7, r8, r9, lr}
   1cc14:	sub	sp, sp, #52	; 0x34
   1cc18:	mov	r8, r0
   1cc1c:	mov	r5, r2
   1cc20:	ldr	r9, [sp, #80]	; 0x50
   1cc24:	and	r6, r9, #4
   1cc28:	cmp	r6, #0
   1cc2c:	movne	r6, #2
   1cc30:	subs	r4, r1, #0
   1cc34:	addeq	r4, sp, #4
   1cc38:	add	r7, r2, r3
   1cc3c:	mov	r2, #44	; 0x2c
   1cc40:	mov	r1, #0
   1cc44:	mov	r0, r4
   1cc48:	bl	124a8 <memset@plt>
   1cc4c:	str	r8, [r4]
   1cc50:	str	r5, [r4, #4]
   1cc54:	mov	r3, #1
   1cc58:	str	r3, [r4, #16]
   1cc5c:	str	r9, [r4, #8]
   1cc60:	str	r5, [r4, #28]
   1cc64:	str	r7, [r4, #32]
   1cc68:	str	r5, [r4, #36]	; 0x24
   1cc6c:	mov	r3, r6
   1cc70:	mov	r2, #0
   1cc74:	ldr	r1, [sp, #84]	; 0x54
   1cc78:	mov	r0, r8
   1cc7c:	bl	1500c <flatcc_builder_start_buffer@@Base>
   1cc80:	cmp	r0, #0
   1cc84:	bne	1ccd4 <flatcc_json_parser_struct_as_root@@Base+0xc4>
   1cc88:	mov	r3, sp
   1cc8c:	mov	r2, r7
   1cc90:	mov	r1, r5
   1cc94:	mov	r0, r4
   1cc98:	ldr	r6, [sp, #88]	; 0x58
   1cc9c:	blx	r6
   1cca0:	ldr	r6, [r4, #24]
   1cca4:	cmp	r6, #0
   1cca8:	beq	1ccb8 <flatcc_json_parser_struct_as_root@@Base+0xa8>
   1ccac:	mov	r0, r6
   1ccb0:	add	sp, sp, #52	; 0x34
   1ccb4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1ccb8:	ldr	r1, [sp]
   1ccbc:	mov	r0, r8
   1ccc0:	bl	150c4 <flatcc_builder_end_buffer@@Base>
   1ccc4:	cmp	r0, #0
   1ccc8:	beq	1ccdc <flatcc_json_parser_struct_as_root@@Base+0xcc>
   1cccc:	str	r5, [r4, #40]	; 0x28
   1ccd0:	b	1ccac <flatcc_json_parser_struct_as_root@@Base+0x9c>
   1ccd4:	mvn	r6, #0
   1ccd8:	b	1ccac <flatcc_json_parser_struct_as_root@@Base+0x9c>
   1ccdc:	mvn	r6, #0
   1cce0:	b	1ccac <flatcc_json_parser_struct_as_root@@Base+0x9c>
   1cce4:	eor	r1, r1, #-2147483648	; 0x80000000
   1cce8:	b	1ccf0 <flatcc_json_parser_struct_as_root@@Base+0xe0>
   1ccec:	eor	r3, r3, #-2147483648	; 0x80000000
   1ccf0:	push	{r4, r5, lr}
   1ccf4:	lsl	r4, r1, #1
   1ccf8:	lsl	r5, r3, #1
   1ccfc:	teq	r4, r5
   1cd00:	teqeq	r0, r2
   1cd04:	orrsne	ip, r4, r0
   1cd08:	orrsne	ip, r5, r2
   1cd0c:	mvnsne	ip, r4, asr #21
   1cd10:	mvnsne	ip, r5, asr #21
   1cd14:	beq	1cf00 <flatcc_json_parser_struct_as_root@@Base+0x2f0>
   1cd18:	lsr	r4, r4, #21
   1cd1c:	rsbs	r5, r4, r5, lsr #21
   1cd20:	rsblt	r5, r5, #0
   1cd24:	ble	1cd44 <flatcc_json_parser_struct_as_root@@Base+0x134>
   1cd28:	add	r4, r4, r5
   1cd2c:	eor	r2, r0, r2
   1cd30:	eor	r3, r1, r3
   1cd34:	eor	r0, r2, r0
   1cd38:	eor	r1, r3, r1
   1cd3c:	eor	r2, r0, r2
   1cd40:	eor	r3, r1, r3
   1cd44:	cmp	r5, #54	; 0x36
   1cd48:	pophi	{r4, r5, pc}
   1cd4c:	tst	r1, #-2147483648	; 0x80000000
   1cd50:	lsl	r1, r1, #12
   1cd54:	mov	ip, #1048576	; 0x100000
   1cd58:	orr	r1, ip, r1, lsr #12
   1cd5c:	beq	1cd68 <flatcc_json_parser_struct_as_root@@Base+0x158>
   1cd60:	rsbs	r0, r0, #0
   1cd64:	rsc	r1, r1, #0
   1cd68:	tst	r3, #-2147483648	; 0x80000000
   1cd6c:	lsl	r3, r3, #12
   1cd70:	orr	r3, ip, r3, lsr #12
   1cd74:	beq	1cd80 <flatcc_json_parser_struct_as_root@@Base+0x170>
   1cd78:	rsbs	r2, r2, #0
   1cd7c:	rsc	r3, r3, #0
   1cd80:	teq	r4, r5
   1cd84:	beq	1cee8 <flatcc_json_parser_struct_as_root@@Base+0x2d8>
   1cd88:	sub	r4, r4, #1
   1cd8c:	rsbs	lr, r5, #32
   1cd90:	blt	1cdac <flatcc_json_parser_struct_as_root@@Base+0x19c>
   1cd94:	lsl	ip, r2, lr
   1cd98:	adds	r0, r0, r2, lsr r5
   1cd9c:	adc	r1, r1, #0
   1cda0:	adds	r0, r0, r3, lsl lr
   1cda4:	adcs	r1, r1, r3, asr r5
   1cda8:	b	1cdc8 <flatcc_json_parser_struct_as_root@@Base+0x1b8>
   1cdac:	sub	r5, r5, #32
   1cdb0:	add	lr, lr, #32
   1cdb4:	cmp	r2, #1
   1cdb8:	lsl	ip, r3, lr
   1cdbc:	orrcs	ip, ip, #2
   1cdc0:	adds	r0, r0, r3, asr r5
   1cdc4:	adcs	r1, r1, r3, asr #31
   1cdc8:	and	r5, r1, #-2147483648	; 0x80000000
   1cdcc:	bpl	1cddc <flatcc_json_parser_struct_as_root@@Base+0x1cc>
   1cdd0:	rsbs	ip, ip, #0
   1cdd4:	rscs	r0, r0, #0
   1cdd8:	rsc	r1, r1, #0
   1cddc:	cmp	r1, #1048576	; 0x100000
   1cde0:	bcc	1ce20 <flatcc_json_parser_struct_as_root@@Base+0x210>
   1cde4:	cmp	r1, #2097152	; 0x200000
   1cde8:	bcc	1ce08 <flatcc_json_parser_struct_as_root@@Base+0x1f8>
   1cdec:	lsrs	r1, r1, #1
   1cdf0:	rrxs	r0, r0
   1cdf4:	rrx	ip, ip
   1cdf8:	add	r4, r4, #1
   1cdfc:	lsl	r2, r4, #21
   1ce00:	cmn	r2, #4194304	; 0x400000
   1ce04:	bcs	1cf60 <flatcc_json_parser_struct_as_root@@Base+0x350>
   1ce08:	cmp	ip, #-2147483648	; 0x80000000
   1ce0c:	lsrseq	ip, r0, #1
   1ce10:	adcs	r0, r0, #0
   1ce14:	adc	r1, r1, r4, lsl #20
   1ce18:	orr	r1, r1, r5
   1ce1c:	pop	{r4, r5, pc}
   1ce20:	lsls	ip, ip, #1
   1ce24:	adcs	r0, r0, r0
   1ce28:	adc	r1, r1, r1
   1ce2c:	tst	r1, #1048576	; 0x100000
   1ce30:	sub	r4, r4, #1
   1ce34:	bne	1ce08 <flatcc_json_parser_struct_as_root@@Base+0x1f8>
   1ce38:	teq	r1, #0
   1ce3c:	moveq	r1, r0
   1ce40:	moveq	r0, #0
   1ce44:	clz	r3, r1
   1ce48:	addeq	r3, r3, #32
   1ce4c:	sub	r3, r3, #11
   1ce50:	subs	r2, r3, #32
   1ce54:	bge	1ce78 <flatcc_json_parser_struct_as_root@@Base+0x268>
   1ce58:	adds	r2, r2, #12
   1ce5c:	ble	1ce74 <flatcc_json_parser_struct_as_root@@Base+0x264>
   1ce60:	add	ip, r2, #20
   1ce64:	rsb	r2, r2, #12
   1ce68:	lsl	r0, r1, ip
   1ce6c:	lsr	r1, r1, r2
   1ce70:	b	1ce88 <flatcc_json_parser_struct_as_root@@Base+0x278>
   1ce74:	add	r2, r2, #20
   1ce78:	rsble	ip, r2, #32
   1ce7c:	lsl	r1, r1, r2
   1ce80:	orrle	r1, r1, r0, lsr ip
   1ce84:	lslle	r0, r0, r2
   1ce88:	subs	r4, r4, r3
   1ce8c:	addge	r1, r1, r4, lsl #20
   1ce90:	orrge	r1, r1, r5
   1ce94:	popge	{r4, r5, pc}
   1ce98:	mvn	r4, r4
   1ce9c:	subs	r4, r4, #31
   1cea0:	bge	1cedc <flatcc_json_parser_struct_as_root@@Base+0x2cc>
   1cea4:	adds	r4, r4, #12
   1cea8:	bgt	1cec4 <flatcc_json_parser_struct_as_root@@Base+0x2b4>
   1ceac:	add	r4, r4, #20
   1ceb0:	rsb	r2, r4, #32
   1ceb4:	lsr	r0, r0, r4
   1ceb8:	orr	r0, r0, r1, lsl r2
   1cebc:	orr	r1, r5, r1, lsr r4
   1cec0:	pop	{r4, r5, pc}
   1cec4:	rsb	r4, r4, #12
   1cec8:	rsb	r2, r4, #32
   1cecc:	lsr	r0, r0, r2
   1ced0:	orr	r0, r0, r1, lsl r4
   1ced4:	mov	r1, r5
   1ced8:	pop	{r4, r5, pc}
   1cedc:	lsr	r0, r1, r4
   1cee0:	mov	r1, r5
   1cee4:	pop	{r4, r5, pc}
   1cee8:	teq	r4, #0
   1ceec:	eor	r3, r3, #1048576	; 0x100000
   1cef0:	eoreq	r1, r1, #1048576	; 0x100000
   1cef4:	addeq	r4, r4, #1
   1cef8:	subne	r5, r5, #1
   1cefc:	b	1cd88 <flatcc_json_parser_struct_as_root@@Base+0x178>
   1cf00:	mvns	ip, r4, asr #21
   1cf04:	mvnsne	ip, r5, asr #21
   1cf08:	beq	1cf70 <flatcc_json_parser_struct_as_root@@Base+0x360>
   1cf0c:	teq	r4, r5
   1cf10:	teqeq	r0, r2
   1cf14:	beq	1cf28 <flatcc_json_parser_struct_as_root@@Base+0x318>
   1cf18:	orrs	ip, r4, r0
   1cf1c:	moveq	r1, r3
   1cf20:	moveq	r0, r2
   1cf24:	pop	{r4, r5, pc}
   1cf28:	teq	r1, r3
   1cf2c:	movne	r1, #0
   1cf30:	movne	r0, #0
   1cf34:	popne	{r4, r5, pc}
   1cf38:	lsrs	ip, r4, #21
   1cf3c:	bne	1cf50 <flatcc_json_parser_struct_as_root@@Base+0x340>
   1cf40:	lsls	r0, r0, #1
   1cf44:	adcs	r1, r1, r1
   1cf48:	orrcs	r1, r1, #-2147483648	; 0x80000000
   1cf4c:	pop	{r4, r5, pc}
   1cf50:	adds	r4, r4, #4194304	; 0x400000
   1cf54:	addcc	r1, r1, #1048576	; 0x100000
   1cf58:	popcc	{r4, r5, pc}
   1cf5c:	and	r5, r1, #-2147483648	; 0x80000000
   1cf60:	orr	r1, r5, #2130706432	; 0x7f000000
   1cf64:	orr	r1, r1, #15728640	; 0xf00000
   1cf68:	mov	r0, #0
   1cf6c:	pop	{r4, r5, pc}
   1cf70:	mvns	ip, r4, asr #21
   1cf74:	movne	r1, r3
   1cf78:	movne	r0, r2
   1cf7c:	mvnseq	ip, r5, asr #21
   1cf80:	movne	r3, r1
   1cf84:	movne	r2, r0
   1cf88:	orrs	r4, r0, r1, lsl #12
   1cf8c:	orrseq	r5, r2, r3, lsl #12
   1cf90:	teqeq	r1, r3
   1cf94:	orrne	r1, r1, #524288	; 0x80000
   1cf98:	pop	{r4, r5, pc}
   1cf9c:	teq	r0, #0
   1cfa0:	moveq	r1, #0
   1cfa4:	bxeq	lr
   1cfa8:	push	{r4, r5, lr}
   1cfac:	mov	r4, #1024	; 0x400
   1cfb0:	add	r4, r4, #50	; 0x32
   1cfb4:	mov	r5, #0
   1cfb8:	mov	r1, #0
   1cfbc:	b	1ce38 <flatcc_json_parser_struct_as_root@@Base+0x228>
   1cfc0:	teq	r0, #0
   1cfc4:	moveq	r1, #0
   1cfc8:	bxeq	lr
   1cfcc:	push	{r4, r5, lr}
   1cfd0:	mov	r4, #1024	; 0x400
   1cfd4:	add	r4, r4, #50	; 0x32
   1cfd8:	ands	r5, r0, #-2147483648	; 0x80000000
   1cfdc:	rsbmi	r0, r0, #0
   1cfe0:	mov	r1, #0
   1cfe4:	b	1ce38 <flatcc_json_parser_struct_as_root@@Base+0x228>
   1cfe8:	lsls	r2, r0, #1
   1cfec:	asr	r1, r2, #3
   1cff0:	rrx	r1, r1
   1cff4:	lsl	r0, r2, #28
   1cff8:	andsne	r3, r2, #-16777216	; 0xff000000
   1cffc:	teqne	r3, #-16777216	; 0xff000000
   1d000:	eorne	r1, r1, #939524096	; 0x38000000
   1d004:	bxne	lr
   1d008:	teq	r2, #0
   1d00c:	teqne	r3, #-16777216	; 0xff000000
   1d010:	bxeq	lr
   1d014:	push	{r4, r5, lr}
   1d018:	mov	r4, #896	; 0x380
   1d01c:	and	r5, r1, #-2147483648	; 0x80000000
   1d020:	bic	r1, r1, #-2147483648	; 0x80000000
   1d024:	b	1ce38 <flatcc_json_parser_struct_as_root@@Base+0x228>
   1d028:	orrs	r2, r0, r1
   1d02c:	bxeq	lr
   1d030:	push	{r4, r5, lr}
   1d034:	mov	r5, #0
   1d038:	b	1d058 <flatcc_json_parser_struct_as_root@@Base+0x448>
   1d03c:	orrs	r2, r0, r1
   1d040:	bxeq	lr
   1d044:	push	{r4, r5, lr}
   1d048:	ands	r5, r1, #-2147483648	; 0x80000000
   1d04c:	bpl	1d058 <flatcc_json_parser_struct_as_root@@Base+0x448>
   1d050:	rsbs	r0, r0, #0
   1d054:	rsc	r1, r1, #0
   1d058:	mov	r4, #1024	; 0x400
   1d05c:	add	r4, r4, #50	; 0x32
   1d060:	lsrs	ip, r1, #22
   1d064:	beq	1cddc <flatcc_json_parser_struct_as_root@@Base+0x1cc>
   1d068:	mov	r2, #3
   1d06c:	lsrs	ip, ip, #3
   1d070:	addne	r2, r2, #3
   1d074:	lsrs	ip, ip, #3
   1d078:	addne	r2, r2, #3
   1d07c:	add	r2, r2, ip, lsr #3
   1d080:	rsb	r3, r2, #32
   1d084:	lsl	ip, r0, r3
   1d088:	lsr	r0, r0, r2
   1d08c:	orr	r0, r0, r1, lsl r3
   1d090:	lsr	r1, r1, r2
   1d094:	add	r4, r4, r2
   1d098:	b	1cddc <flatcc_json_parser_struct_as_root@@Base+0x1cc>

0001d09c <__libc_csu_init@@Base>:
   1d09c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1d0a0:	mov	r7, r0
   1d0a4:	ldr	r6, [pc, #72]	; 1d0f4 <__libc_csu_init@@Base+0x58>
   1d0a8:	ldr	r5, [pc, #72]	; 1d0f8 <__libc_csu_init@@Base+0x5c>
   1d0ac:	add	r6, pc, r6
   1d0b0:	add	r5, pc, r5
   1d0b4:	sub	r6, r6, r5
   1d0b8:	mov	r8, r1
   1d0bc:	mov	r9, r2
   1d0c0:	bl	12404 <free@plt-0x20>
   1d0c4:	asrs	r6, r6, #2
   1d0c8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1d0cc:	mov	r4, #0
   1d0d0:	add	r4, r4, #1
   1d0d4:	ldr	r3, [r5], #4
   1d0d8:	mov	r2, r9
   1d0dc:	mov	r1, r8
   1d0e0:	mov	r0, r7
   1d0e4:	blx	r3
   1d0e8:	cmp	r6, r4
   1d0ec:	bne	1d0d0 <__libc_csu_init@@Base+0x34>
   1d0f0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1d0f4:	andeq	r1, r1, ip, asr lr
   1d0f8:	andeq	r1, r1, r4, asr lr

0001d0fc <__libc_csu_fini@@Base>:
   1d0fc:	bx	lr

Disassembly of section .fini:

0001d100 <.fini>:
   1d100:	push	{r3, lr}
   1d104:	pop	{r3, pc}
