
../repos/coreutils/src/stat:     file format elf32-littlearm


Disassembly of section .init:

000113fc <.init>:
   113fc:	push	{r3, lr}
   11400:	bl	1189c <__assert_fail@plt+0x48>
   11404:	pop	{r3, pc}

Disassembly of section .plt:

00011408 <calloc@plt-0x14>:
   11408:	push	{lr}		; (str lr, [sp, #-4]!)
   1140c:	ldr	lr, [pc, #4]	; 11418 <calloc@plt-0x4>
   11410:	add	lr, pc, lr
   11414:	ldr	pc, [lr, #8]!
   11418:	andeq	sp, r1, r8, ror #23

0001141c <calloc@plt>:
   1141c:	add	ip, pc, #0, 12
   11420:	add	ip, ip, #118784	; 0x1d000
   11424:	ldr	pc, [ip, #3048]!	; 0xbe8

00011428 <fputs_unlocked@plt>:
   11428:	add	ip, pc, #0, 12
   1142c:	add	ip, ip, #118784	; 0x1d000
   11430:	ldr	pc, [ip, #3040]!	; 0xbe0

00011434 <raise@plt>:
   11434:	add	ip, pc, #0, 12
   11438:	add	ip, ip, #118784	; 0x1d000
   1143c:	ldr	pc, [ip, #3032]!	; 0xbd8

00011440 <gmtime_r@plt>:
   11440:	add	ip, pc, #0, 12
   11444:	add	ip, ip, #118784	; 0x1d000
   11448:	ldr	pc, [ip, #3024]!	; 0xbd0

0001144c <__getdelim@plt>:
   1144c:	add	ip, pc, #0, 12
   11450:	add	ip, ip, #118784	; 0x1d000
   11454:	ldr	pc, [ip, #3016]!	; 0xbc8

00011458 <is_selinux_enabled@plt>:
   11458:	add	ip, pc, #0, 12
   1145c:	add	ip, ip, #118784	; 0x1d000
   11460:	ldr	pc, [ip, #3008]!	; 0xbc0

00011464 <strcmp@plt>:
   11464:	add	ip, pc, #0, 12
   11468:	add	ip, ip, #118784	; 0x1d000
   1146c:	ldr	pc, [ip, #3000]!	; 0xbb8

00011470 <strtol@plt>:
   11470:	add	ip, pc, #0, 12
   11474:	add	ip, ip, #118784	; 0x1d000
   11478:	ldr	pc, [ip, #2992]!	; 0xbb0

0001147c <getpwuid@plt>:
   1147c:	add	ip, pc, #0, 12
   11480:	add	ip, ip, #118784	; 0x1d000
   11484:	ldr	pc, [ip, #2984]!	; 0xba8

00011488 <mktime@plt>:
   11488:	add	ip, pc, #0, 12
   1148c:	add	ip, ip, #118784	; 0x1d000
   11490:	ldr	pc, [ip, #2976]!	; 0xba0

00011494 <fflush@plt>:
   11494:	add	ip, pc, #0, 12
   11498:	add	ip, ip, #118784	; 0x1d000
   1149c:	ldr	pc, [ip, #2968]!	; 0xb98

000114a0 <free@plt>:
   114a0:	add	ip, pc, #0, 12
   114a4:	add	ip, ip, #118784	; 0x1d000
   114a8:	ldr	pc, [ip, #2960]!	; 0xb90

000114ac <_exit@plt>:
   114ac:	add	ip, pc, #0, 12
   114b0:	add	ip, ip, #118784	; 0x1d000
   114b4:	ldr	pc, [ip, #2952]!	; 0xb88

000114b8 <memcpy@plt>:
   114b8:	add	ip, pc, #0, 12
   114bc:	add	ip, ip, #118784	; 0x1d000
   114c0:	ldr	pc, [ip, #2944]!	; 0xb80

000114c4 <mbsinit@plt>:
   114c4:	add	ip, pc, #0, 12
   114c8:	add	ip, ip, #118784	; 0x1d000
   114cc:	ldr	pc, [ip, #2936]!	; 0xb78

000114d0 <memcmp@plt>:
   114d0:	add	ip, pc, #0, 12
   114d4:	add	ip, ip, #118784	; 0x1d000
   114d8:	ldr	pc, [ip, #2928]!	; 0xb70

000114dc <fputc_unlocked@plt>:
   114dc:	add	ip, pc, #0, 12
   114e0:	add	ip, ip, #118784	; 0x1d000
   114e4:	ldr	pc, [ip, #2920]!	; 0xb68

000114e8 <dcgettext@plt>:
   114e8:	add	ip, pc, #0, 12
   114ec:	add	ip, ip, #118784	; 0x1d000
   114f0:	ldr	pc, [ip, #2912]!	; 0xb60

000114f4 <realloc@plt>:
   114f4:	add	ip, pc, #0, 12
   114f8:	add	ip, ip, #118784	; 0x1d000
   114fc:	ldr	pc, [ip, #2904]!	; 0xb58

00011500 <fgetfilecon@plt>:
   11500:	add	ip, pc, #0, 12
   11504:	add	ip, ip, #118784	; 0x1d000
   11508:	ldr	pc, [ip, #2896]!	; 0xb50

0001150c <localtime_r@plt>:
   1150c:	add	ip, pc, #0, 12
   11510:	add	ip, ip, #118784	; 0x1d000
   11514:	ldr	pc, [ip, #2888]!	; 0xb48

00011518 <textdomain@plt>:
   11518:	add	ip, pc, #0, 12
   1151c:	add	ip, ip, #118784	; 0x1d000
   11520:	ldr	pc, [ip, #2880]!	; 0xb40

00011524 <chdir@plt>:
   11524:	add	ip, pc, #0, 12
   11528:	add	ip, ip, #118784	; 0x1d000
   1152c:	ldr	pc, [ip, #2872]!	; 0xb38

00011530 <iswprint@plt>:
   11530:	add	ip, pc, #0, 12
   11534:	add	ip, ip, #118784	; 0x1d000
   11538:	ldr	pc, [ip, #2864]!	; 0xb30

0001153c <tzset@plt>:
   1153c:	add	ip, pc, #0, 12
   11540:	add	ip, ip, #118784	; 0x1d000
   11544:	ldr	pc, [ip, #2856]!	; 0xb28

00011548 <readlink@plt>:
   11548:	add	ip, pc, #0, 12
   1154c:	add	ip, ip, #118784	; 0x1d000
   11550:	ldr	pc, [ip, #2848]!	; 0xb20

00011554 <fwrite@plt>:
   11554:	add	ip, pc, #0, 12
   11558:	add	ip, ip, #118784	; 0x1d000
   1155c:	ldr	pc, [ip, #2840]!	; 0xb18

00011560 <lseek64@plt>:
   11560:	add	ip, pc, #0, 12
   11564:	add	ip, ip, #118784	; 0x1d000
   11568:	ldr	pc, [ip, #2832]!	; 0xb10

0001156c <__ctype_get_mb_cur_max@plt>:
   1156c:	add	ip, pc, #0, 12
   11570:	add	ip, ip, #118784	; 0x1d000
   11574:	ldr	pc, [ip, #2824]!	; 0xb08

00011578 <hasmntopt@plt>:
   11578:	add	ip, pc, #0, 12
   1157c:	add	ip, ip, #118784	; 0x1d000
   11580:	ldr	pc, [ip, #2816]!	; 0xb00

00011584 <strcpy@plt>:
   11584:	add	ip, pc, #0, 12
   11588:	add	ip, ip, #118784	; 0x1d000
   1158c:	ldr	pc, [ip, #2808]!	; 0xaf8

00011590 <__fpending@plt>:
   11590:	add	ip, pc, #0, 12
   11594:	add	ip, ip, #118784	; 0x1d000
   11598:	ldr	pc, [ip, #2800]!	; 0xaf0

0001159c <mbrtowc@plt>:
   1159c:	add	ip, pc, #0, 12
   115a0:	add	ip, ip, #118784	; 0x1d000
   115a4:	ldr	pc, [ip, #2792]!	; 0xae8

000115a8 <error@plt>:
   115a8:	add	ip, pc, #0, 12
   115ac:	add	ip, ip, #118784	; 0x1d000
   115b0:	ldr	pc, [ip, #2784]!	; 0xae0

000115b4 <getmntent@plt>:
   115b4:	add	ip, pc, #0, 12
   115b8:	add	ip, ip, #118784	; 0x1d000
   115bc:	ldr	pc, [ip, #2776]!	; 0xad8

000115c0 <open64@plt>:
   115c0:	add	ip, pc, #0, 12
   115c4:	add	ip, ip, #118784	; 0x1d000
   115c8:	ldr	pc, [ip, #2768]!	; 0xad0

000115cc <getenv@plt>:
   115cc:	add	ip, pc, #0, 12
   115d0:	add	ip, ip, #118784	; 0x1d000
   115d4:	ldr	pc, [ip, #2760]!	; 0xac8

000115d8 <lgetfilecon@plt>:
   115d8:	add	ip, pc, #0, 12
   115dc:	add	ip, ip, #118784	; 0x1d000
   115e0:	ldr	pc, [ip, #2752]!	; 0xac0

000115e4 <malloc@plt>:
   115e4:	add	ip, pc, #0, 12
   115e8:	add	ip, ip, #118784	; 0x1d000
   115ec:	ldr	pc, [ip, #2744]!	; 0xab8

000115f0 <__libc_start_main@plt>:
   115f0:	add	ip, pc, #0, 12
   115f4:	add	ip, ip, #118784	; 0x1d000
   115f8:	ldr	pc, [ip, #2736]!	; 0xab0

000115fc <strftime@plt>:
   115fc:	add	ip, pc, #0, 12
   11600:	add	ip, ip, #118784	; 0x1d000
   11604:	ldr	pc, [ip, #2728]!	; 0xaa8

00011608 <__freading@plt>:
   11608:	add	ip, pc, #0, 12
   1160c:	add	ip, ip, #118784	; 0x1d000
   11610:	ldr	pc, [ip, #2720]!	; 0xaa0

00011614 <__ctype_tolower_loc@plt>:
   11614:	add	ip, pc, #0, 12
   11618:	add	ip, ip, #118784	; 0x1d000
   1161c:	ldr	pc, [ip, #2712]!	; 0xa98

00011620 <__ctype_toupper_loc@plt>:
   11620:	add	ip, pc, #0, 12
   11624:	add	ip, ip, #118784	; 0x1d000
   11628:	ldr	pc, [ip, #2704]!	; 0xa90

0001162c <__gmon_start__@plt>:
   1162c:	add	ip, pc, #0, 12
   11630:	add	ip, ip, #118784	; 0x1d000
   11634:	ldr	pc, [ip, #2696]!	; 0xa88

00011638 <getopt_long@plt>:
   11638:	add	ip, pc, #0, 12
   1163c:	add	ip, ip, #118784	; 0x1d000
   11640:	ldr	pc, [ip, #2688]!	; 0xa80

00011644 <__ctype_b_loc@plt>:
   11644:	add	ip, pc, #0, 12
   11648:	add	ip, ip, #118784	; 0x1d000
   1164c:	ldr	pc, [ip, #2680]!	; 0xa78

00011650 <getcwd@plt>:
   11650:	add	ip, pc, #0, 12
   11654:	add	ip, ip, #118784	; 0x1d000
   11658:	ldr	pc, [ip, #2672]!	; 0xa70

0001165c <exit@plt>:
   1165c:	add	ip, pc, #0, 12
   11660:	add	ip, ip, #118784	; 0x1d000
   11664:	ldr	pc, [ip, #2664]!	; 0xa68

00011668 <getfilecon@plt>:
   11668:	add	ip, pc, #0, 12
   1166c:	add	ip, ip, #118784	; 0x1d000
   11670:	ldr	pc, [ip, #2656]!	; 0xa60

00011674 <strlen@plt>:
   11674:	add	ip, pc, #0, 12
   11678:	add	ip, ip, #118784	; 0x1d000
   1167c:	ldr	pc, [ip, #2648]!	; 0xa58

00011680 <strchr@plt>:
   11680:	add	ip, pc, #0, 12
   11684:	add	ip, ip, #118784	; 0x1d000
   11688:	ldr	pc, [ip, #2640]!	; 0xa50

0001168c <setenv@plt>:
   1168c:	add	ip, pc, #0, 12
   11690:	add	ip, ip, #118784	; 0x1d000
   11694:	ldr	pc, [ip, #2632]!	; 0xa48

00011698 <openat64@plt>:
   11698:	add	ip, pc, #0, 12
   1169c:	add	ip, ip, #118784	; 0x1d000
   116a0:	ldr	pc, [ip, #2624]!	; 0xa40

000116a4 <memrchr@plt>:
   116a4:	add	ip, pc, #0, 12
   116a8:	add	ip, ip, #118784	; 0x1d000
   116ac:	ldr	pc, [ip, #2616]!	; 0xa38

000116b0 <__errno_location@plt>:
   116b0:	add	ip, pc, #0, 12
   116b4:	add	ip, ip, #118784	; 0x1d000
   116b8:	ldr	pc, [ip, #2608]!	; 0xa30

000116bc <__sprintf_chk@plt>:
   116bc:	add	ip, pc, #0, 12
   116c0:	add	ip, ip, #118784	; 0x1d000
   116c4:	ldr	pc, [ip, #2600]!	; 0xa28

000116c8 <__cxa_atexit@plt>:
   116c8:	add	ip, pc, #0, 12
   116cc:	add	ip, ip, #118784	; 0x1d000
   116d0:	ldr	pc, [ip, #2592]!	; 0xa20

000116d4 <__vasprintf_chk@plt>:
   116d4:	add	ip, pc, #0, 12
   116d8:	add	ip, ip, #118784	; 0x1d000
   116dc:	ldr	pc, [ip, #2584]!	; 0xa18

000116e0 <memset@plt>:
   116e0:	add	ip, pc, #0, 12
   116e4:	add	ip, ip, #118784	; 0x1d000
   116e8:	ldr	pc, [ip, #2576]!	; 0xa10

000116ec <__printf_chk@plt>:
   116ec:	add	ip, pc, #0, 12
   116f0:	add	ip, ip, #118784	; 0x1d000
   116f4:	ldr	pc, [ip, #2568]!	; 0xa08

000116f8 <fileno@plt>:
   116f8:	add	ip, pc, #0, 12
   116fc:	add	ip, ip, #118784	; 0x1d000
   11700:	ldr	pc, [ip, #2560]!	; 0xa00

00011704 <__fprintf_chk@plt>:
   11704:	add	ip, pc, #0, 12
   11708:	add	ip, ip, #118784	; 0x1d000
   1170c:	ldr	pc, [ip, #2552]!	; 0x9f8

00011710 <memchr@plt>:
   11710:	add	ip, pc, #0, 12
   11714:	add	ip, ip, #118784	; 0x1d000
   11718:	ldr	pc, [ip, #2544]!	; 0x9f0

0001171c <fclose@plt>:
   1171c:	add	ip, pc, #0, 12
   11720:	add	ip, ip, #118784	; 0x1d000
   11724:	ldr	pc, [ip, #2536]!	; 0x9e8

00011728 <fseeko64@plt>:
   11728:	add	ip, pc, #0, 12
   1172c:	add	ip, ip, #118784	; 0x1d000
   11730:	ldr	pc, [ip, #2528]!	; 0x9e0

00011734 <statx@plt>:
   11734:	add	ip, pc, #0, 12
   11738:	add	ip, ip, #118784	; 0x1d000
   1173c:	ldr	pc, [ip, #2520]!	; 0x9d8

00011740 <endmntent@plt>:
   11740:	add	ip, pc, #0, 12
   11744:	add	ip, ip, #118784	; 0x1d000
   11748:	ldr	pc, [ip, #2512]!	; 0x9d0

0001174c <fcntl64@plt>:
   1174c:	add	ip, pc, #0, 12
   11750:	add	ip, ip, #118784	; 0x1d000
   11754:	ldr	pc, [ip, #2504]!	; 0x9c8

00011758 <__overflow@plt>:
   11758:	add	ip, pc, #0, 12
   1175c:	add	ip, ip, #118784	; 0x1d000
   11760:	ldr	pc, [ip, #2496]!	; 0x9c0

00011764 <setlocale@plt>:
   11764:	add	ip, pc, #0, 12
   11768:	add	ip, ip, #118784	; 0x1d000
   1176c:	ldr	pc, [ip, #2488]!	; 0x9b8

00011770 <strrchr@plt>:
   11770:	add	ip, pc, #0, 12
   11774:	add	ip, ip, #118784	; 0x1d000
   11778:	ldr	pc, [ip, #2480]!	; 0x9b0

0001177c <statfs64@plt>:
   1177c:	add	ip, pc, #0, 12
   11780:	add	ip, ip, #118784	; 0x1d000
   11784:	ldr	pc, [ip, #2472]!	; 0x9a8

00011788 <nl_langinfo@plt>:
   11788:	add	ip, pc, #0, 12
   1178c:	add	ip, ip, #118784	; 0x1d000
   11790:	ldr	pc, [ip, #2464]!	; 0x9a0

00011794 <sscanf@plt>:
   11794:	add	ip, pc, #0, 12
   11798:	add	ip, ip, #118784	; 0x1d000
   1179c:	ldr	pc, [ip, #2456]!	; 0x998

000117a0 <localeconv@plt>:
   117a0:	add	ip, pc, #0, 12
   117a4:	add	ip, ip, #118784	; 0x1d000
   117a8:	ldr	pc, [ip, #2448]!	; 0x990

000117ac <timegm@plt>:
   117ac:	add	ip, pc, #0, 12
   117b0:	add	ip, ip, #118784	; 0x1d000
   117b4:	ldr	pc, [ip, #2440]!	; 0x988

000117b8 <fchdir@plt>:
   117b8:	add	ip, pc, #0, 12
   117bc:	add	ip, ip, #118784	; 0x1d000
   117c0:	ldr	pc, [ip, #2432]!	; 0x980

000117c4 <canonicalize_file_name@plt>:
   117c4:	add	ip, pc, #0, 12
   117c8:	add	ip, ip, #118784	; 0x1d000
   117cc:	ldr	pc, [ip, #2424]!	; 0x978

000117d0 <fopen64@plt>:
   117d0:	add	ip, pc, #0, 12
   117d4:	add	ip, ip, #118784	; 0x1d000
   117d8:	ldr	pc, [ip, #2416]!	; 0x970

000117dc <freecon@plt>:
   117dc:	add	ip, pc, #0, 12
   117e0:	add	ip, ip, #118784	; 0x1d000
   117e4:	ldr	pc, [ip, #2408]!	; 0x968

000117e8 <setmntent@plt>:
   117e8:	add	ip, pc, #0, 12
   117ec:	add	ip, ip, #118784	; 0x1d000
   117f0:	ldr	pc, [ip, #2400]!	; 0x960

000117f4 <bindtextdomain@plt>:
   117f4:	add	ip, pc, #0, 12
   117f8:	add	ip, ip, #118784	; 0x1d000
   117fc:	ldr	pc, [ip, #2392]!	; 0x958

00011800 <__xstat64@plt>:
   11800:	add	ip, pc, #0, 12
   11804:	add	ip, ip, #118784	; 0x1d000
   11808:	ldr	pc, [ip, #2384]!	; 0x950

0001180c <unsetenv@plt>:
   1180c:	add	ip, pc, #0, 12
   11810:	add	ip, ip, #118784	; 0x1d000
   11814:	ldr	pc, [ip, #2376]!	; 0x948

00011818 <strncmp@plt>:
   11818:	add	ip, pc, #0, 12
   1181c:	add	ip, ip, #118784	; 0x1d000
   11820:	ldr	pc, [ip, #2368]!	; 0x940

00011824 <abort@plt>:
   11824:	add	ip, pc, #0, 12
   11828:	add	ip, ip, #118784	; 0x1d000
   1182c:	ldr	pc, [ip, #2360]!	; 0x938

00011830 <close@plt>:
   11830:	add	ip, pc, #0, 12
   11834:	add	ip, ip, #118784	; 0x1d000
   11838:	ldr	pc, [ip, #2352]!	; 0x930

0001183c <getgrgid@plt>:
   1183c:	add	ip, pc, #0, 12
   11840:	add	ip, ip, #118784	; 0x1d000
   11844:	ldr	pc, [ip, #2344]!	; 0x928

00011848 <strspn@plt>:
   11848:	add	ip, pc, #0, 12
   1184c:	add	ip, ip, #118784	; 0x1d000
   11850:	ldr	pc, [ip, #2336]!	; 0x920

00011854 <__assert_fail@plt>:
   11854:	add	ip, pc, #0, 12
   11858:	add	ip, ip, #118784	; 0x1d000
   1185c:	ldr	pc, [ip, #2328]!	; 0x918

Disassembly of section .text:

00011860 <.text>:
   11860:	mov	fp, #0
   11864:	mov	lr, #0
   11868:	pop	{r1}		; (ldr r1, [sp], #4)
   1186c:	mov	r2, sp
   11870:	push	{r2}		; (str r2, [sp, #-4]!)
   11874:	push	{r0}		; (str r0, [sp, #-4]!)
   11878:	ldr	ip, [pc, #16]	; 11890 <__assert_fail@plt+0x3c>
   1187c:	push	{ip}		; (str ip, [sp, #-4]!)
   11880:	ldr	r0, [pc, #12]	; 11894 <__assert_fail@plt+0x40>
   11884:	ldr	r3, [pc, #12]	; 11898 <__assert_fail@plt+0x44>
   11888:	bl	115f0 <__libc_start_main@plt>
   1188c:	bl	11824 <abort@plt>
   11890:			; <UNDEFINED> instruction: 0x0001cbbc
   11894:	andeq	r4, r1, ip, lsl fp
   11898:	andeq	ip, r1, ip, asr fp
   1189c:	ldr	r3, [pc, #20]	; 118b8 <__assert_fail@plt+0x64>
   118a0:	ldr	r2, [pc, #20]	; 118bc <__assert_fail@plt+0x68>
   118a4:	add	r3, pc, r3
   118a8:	ldr	r2, [r3, r2]
   118ac:	cmp	r2, #0
   118b0:	bxeq	lr
   118b4:	b	1162c <__gmon_start__@plt>
   118b8:	andeq	sp, r1, r4, asr r7
   118bc:	andeq	r0, r0, r8, ror r1
   118c0:	ldr	r3, [pc, #28]	; 118e4 <__assert_fail@plt+0x90>
   118c4:	ldr	r0, [pc, #28]	; 118e8 <__assert_fail@plt+0x94>
   118c8:	sub	r3, r3, r0
   118cc:	cmp	r3, #6
   118d0:	bxls	lr
   118d4:	ldr	r3, [pc, #16]	; 118ec <__assert_fail@plt+0x98>
   118d8:	cmp	r3, #0
   118dc:	bxeq	lr
   118e0:	bx	r3
   118e4:	ldrdeq	pc, [r2], -r7
   118e8:	ldrdeq	pc, [r2], -r4
   118ec:	andeq	r0, r0, r0
   118f0:	ldr	r1, [pc, #36]	; 1191c <__assert_fail@plt+0xc8>
   118f4:	ldr	r0, [pc, #36]	; 11920 <__assert_fail@plt+0xcc>
   118f8:	sub	r1, r1, r0
   118fc:	asr	r1, r1, #2
   11900:	add	r1, r1, r1, lsr #31
   11904:	asrs	r1, r1, #1
   11908:	bxeq	lr
   1190c:	ldr	r3, [pc, #16]	; 11924 <__assert_fail@plt+0xd0>
   11910:	cmp	r3, #0
   11914:	bxeq	lr
   11918:	bx	r3
   1191c:	ldrdeq	pc, [r2], -r4
   11920:	ldrdeq	pc, [r2], -r4
   11924:	andeq	r0, r0, r0
   11928:	push	{r4, lr}
   1192c:	ldr	r4, [pc, #24]	; 1194c <__assert_fail@plt+0xf8>
   11930:	ldrb	r3, [r4]
   11934:	cmp	r3, #0
   11938:	popne	{r4, pc}
   1193c:	bl	118c0 <__assert_fail@plt+0x6c>
   11940:	mov	r3, #1
   11944:	strb	r3, [r4]
   11948:	pop	{r4, pc}
   1194c:	strdeq	pc, [r2], -r4
   11950:	ldr	r0, [pc, #40]	; 11980 <__assert_fail@plt+0x12c>
   11954:	ldr	r3, [r0]
   11958:	cmp	r3, #0
   1195c:	bne	11964 <__assert_fail@plt+0x110>
   11960:	b	118f0 <__assert_fail@plt+0x9c>
   11964:	ldr	r3, [pc, #24]	; 11984 <__assert_fail@plt+0x130>
   11968:	cmp	r3, #0
   1196c:	beq	11960 <__assert_fail@plt+0x10c>
   11970:	push	{r4, lr}
   11974:	blx	r3
   11978:	pop	{r4, lr}
   1197c:	b	118f0 <__assert_fail@plt+0x9c>
   11980:	andeq	lr, r2, ip, lsl #30
   11984:	andeq	r0, r0, r0
   11988:	push	{r4, r5, r6, lr}
   1198c:	cmp	r0, #0
   11990:	beq	119cc <__assert_fail@plt+0x178>
   11994:	cmp	r1, #0
   11998:	beq	119b0 <__assert_fail@plt+0x15c>
   1199c:	ldr	r0, [pc, #308]	; 11ad8 <__assert_fail@plt+0x284>
   119a0:	bl	1af24 <__assert_fail@plt+0x96d0>
   119a4:	mov	r4, r0
   119a8:	mov	r0, r4
   119ac:	pop	{r4, r5, r6, pc}
   119b0:	mov	r2, #5
   119b4:	ldr	r1, [pc, #288]	; 11adc <__assert_fail@plt+0x288>
   119b8:	mov	r0, #0
   119bc:	bl	114e8 <dcgettext@plt>
   119c0:	bl	1af24 <__assert_fail@plt+0x96d0>
   119c4:	mov	r4, r0
   119c8:	b	119a8 <__assert_fail@plt+0x154>
   119cc:	mov	r4, r2
   119d0:	cmp	r1, #0
   119d4:	beq	119f4 <__assert_fail@plt+0x1a0>
   119d8:	bl	11458 <is_selinux_enabled@plt>
   119dc:	cmp	r0, #0
   119e0:	ldrgt	r0, [pc, #248]	; 11ae0 <__assert_fail@plt+0x28c>
   119e4:	ldrle	r0, [pc, #248]	; 11ae4 <__assert_fail@plt+0x290>
   119e8:	bl	1af24 <__assert_fail@plt+0x96d0>
   119ec:	mov	r4, r0
   119f0:	b	119a8 <__assert_fail@plt+0x154>
   119f4:	mov	r2, #5
   119f8:	ldr	r1, [pc, #232]	; 11ae8 <__assert_fail@plt+0x294>
   119fc:	mov	r0, #0
   11a00:	bl	114e8 <dcgettext@plt>
   11a04:	bl	1af24 <__assert_fail@plt+0x96d0>
   11a08:	mov	r5, r0
   11a0c:	cmp	r4, #0
   11a10:	mov	r2, #5
   11a14:	ldrne	r1, [pc, #208]	; 11aec <__assert_fail@plt+0x298>
   11a18:	ldreq	r1, [pc, #208]	; 11af0 <__assert_fail@plt+0x29c>
   11a1c:	mov	r0, #0
   11a20:	bl	114e8 <dcgettext@plt>
   11a24:	mov	r2, r0
   11a28:	mov	r1, r5
   11a2c:	ldr	r0, [pc, #192]	; 11af4 <__assert_fail@plt+0x2a0>
   11a30:	bl	1afb4 <__assert_fail@plt+0x9760>
   11a34:	mov	r4, r0
   11a38:	mov	r0, r5
   11a3c:	bl	15c58 <__assert_fail@plt+0x4404>
   11a40:	mov	r2, #5
   11a44:	ldr	r1, [pc, #172]	; 11af8 <__assert_fail@plt+0x2a4>
   11a48:	mov	r0, #0
   11a4c:	bl	114e8 <dcgettext@plt>
   11a50:	mov	r2, r0
   11a54:	mov	r1, r4
   11a58:	ldr	r0, [pc, #148]	; 11af4 <__assert_fail@plt+0x2a0>
   11a5c:	bl	1afb4 <__assert_fail@plt+0x9760>
   11a60:	mov	r5, r0
   11a64:	mov	r0, r4
   11a68:	bl	15c58 <__assert_fail@plt+0x4404>
   11a6c:	bl	11458 <is_selinux_enabled@plt>
   11a70:	cmp	r0, #0
   11a74:	ble	11aa8 <__assert_fail@plt+0x254>
   11a78:	mov	r2, #5
   11a7c:	ldr	r1, [pc, #120]	; 11afc <__assert_fail@plt+0x2a8>
   11a80:	mov	r0, #0
   11a84:	bl	114e8 <dcgettext@plt>
   11a88:	mov	r2, r0
   11a8c:	mov	r1, r5
   11a90:	ldr	r0, [pc, #92]	; 11af4 <__assert_fail@plt+0x2a0>
   11a94:	bl	1afb4 <__assert_fail@plt+0x9760>
   11a98:	mov	r4, r0
   11a9c:	mov	r0, r5
   11aa0:	bl	15c58 <__assert_fail@plt+0x4404>
   11aa4:	mov	r5, r4
   11aa8:	mov	r2, #5
   11aac:	ldr	r1, [pc, #76]	; 11b00 <__assert_fail@plt+0x2ac>
   11ab0:	mov	r0, #0
   11ab4:	bl	114e8 <dcgettext@plt>
   11ab8:	mov	r2, r0
   11abc:	mov	r1, r5
   11ac0:	ldr	r0, [pc, #44]	; 11af4 <__assert_fail@plt+0x2a0>
   11ac4:	bl	1afb4 <__assert_fail@plt+0x9760>
   11ac8:	mov	r4, r0
   11acc:	mov	r0, r5
   11ad0:	bl	15c58 <__assert_fail@plt+0x4404>
   11ad4:	b	119a8 <__assert_fail@plt+0x154>
   11ad8:	andeq	ip, r1, r4, ror #23
   11adc:	andeq	ip, r1, r8, ror #26
   11ae0:	andeq	ip, r1, r8, lsl #24
   11ae4:	andeq	ip, r1, ip, lsr ip
   11ae8:	andeq	ip, r1, r4, lsl lr
   11aec:	andeq	ip, r1, r0, asr lr
   11af0:	muleq	r1, r8, lr
   11af4:	muleq	r1, r0, lr
   11af8:	andeq	ip, r1, r4, asr #29
   11afc:	andeq	ip, r1, r0, lsl #30
   11b00:	andeq	ip, r1, r0, lsl pc
   11b04:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11b08:	mov	r8, r3
   11b0c:	add	r6, r0, #1
   11b10:	add	r7, r0, r1
   11b14:	cmp	r6, r7
   11b18:	bcs	11b90 <__assert_fail@plt+0x33c>
   11b1c:	mov	fp, r2
   11b20:	mov	r4, r6
   11b24:	ldr	sl, [pc, #116]	; 11ba0 <__assert_fail@plt+0x34c>
   11b28:	mov	r9, r4
   11b2c:	ldrb	r5, [r4], #1
   11b30:	mov	r1, r5
   11b34:	mov	r0, sl
   11b38:	bl	11680 <strchr@plt>
   11b3c:	cmp	r0, #0
   11b40:	beq	11b68 <__assert_fail@plt+0x314>
   11b44:	mov	r1, r5
   11b48:	mov	r0, fp
   11b4c:	bl	11680 <strchr@plt>
   11b50:	cmp	r0, #0
   11b54:	strbne	r5, [r6]
   11b58:	addne	r6, r6, #1
   11b5c:	cmp	r7, r4
   11b60:	bhi	11b28 <__assert_fail@plt+0x2d4>
   11b64:	b	11b90 <__assert_fail@plt+0x33c>
   11b68:	cmp	r7, r9
   11b6c:	bls	11b90 <__assert_fail@plt+0x33c>
   11b70:	sub	r2, r6, #1
   11b74:	mov	r3, r9
   11b78:	ldrb	r1, [r3], #1
   11b7c:	strb	r1, [r2, #1]!
   11b80:	cmp	r7, r3
   11b84:	bne	11b78 <__assert_fail@plt+0x324>
   11b88:	sub	r3, r3, r9
   11b8c:	add	r6, r6, r3
   11b90:	mov	r1, r8
   11b94:	mov	r0, r6
   11b98:	bl	11584 <strcpy@plt>
   11b9c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11ba0:	andeq	ip, r1, r0, ror ip
   11ba4:	push	{r4, r6, r7, lr}
   11ba8:	mov	r4, r0
   11bac:	mov	r6, r2
   11bb0:	mov	r7, r3
   11bb4:	ldr	r3, [pc, #28]	; 11bd8 <__assert_fail@plt+0x384>
   11bb8:	ldr	r2, [pc, #28]	; 11bdc <__assert_fail@plt+0x388>
   11bbc:	bl	11b04 <__assert_fail@plt+0x2b0>
   11bc0:	mov	r2, r6
   11bc4:	mov	r3, r7
   11bc8:	mov	r1, r4
   11bcc:	mov	r0, #1
   11bd0:	bl	116ec <__printf_chk@plt>
   11bd4:	pop	{r4, r6, r7, pc}
   11bd8:	andeq	ip, r1, r0, asr #30
   11bdc:	andeq	ip, r1, r4, asr #30
   11be0:	push	{r4, r5, r6, lr}
   11be4:	mov	r4, r0
   11be8:	mov	r5, r2
   11bec:	ldr	r3, [pc, #24]	; 11c0c <__assert_fail@plt+0x3b8>
   11bf0:	ldr	r2, [pc, #24]	; 11c10 <__assert_fail@plt+0x3bc>
   11bf4:	bl	11b04 <__assert_fail@plt+0x2b0>
   11bf8:	mov	r2, r5
   11bfc:	mov	r1, r4
   11c00:	mov	r0, #1
   11c04:	bl	116ec <__printf_chk@plt>
   11c08:	pop	{r4, r5, r6, pc}
   11c0c:	andeq	sp, r1, r4, ror r4
   11c10:	andeq	ip, r1, r8, asr #30
   11c14:	push	{r4, r6, r7, lr}
   11c18:	mov	r4, r0
   11c1c:	mov	r6, r2
   11c20:	mov	r7, r3
   11c24:	ldr	r3, [pc, #28]	; 11c48 <__assert_fail@plt+0x3f4>
   11c28:	ldr	r2, [pc, #28]	; 11c4c <__assert_fail@plt+0x3f8>
   11c2c:	bl	11b04 <__assert_fail@plt+0x2b0>
   11c30:	mov	r2, r6
   11c34:	mov	r3, r7
   11c38:	mov	r1, r4
   11c3c:	mov	r0, #1
   11c40:	bl	116ec <__printf_chk@plt>
   11c44:	pop	{r4, r6, r7, pc}
   11c48:	andeq	ip, r1, ip, asr #30
   11c4c:	andeq	ip, r1, r0, asr pc
   11c50:	push	{r4, r6, r7, lr}
   11c54:	mov	r4, r0
   11c58:	mov	r6, r2
   11c5c:	mov	r7, r3
   11c60:	ldr	r3, [pc, #28]	; 11c84 <__assert_fail@plt+0x430>
   11c64:	ldr	r2, [pc, #28]	; 11c88 <__assert_fail@plt+0x434>
   11c68:	bl	11b04 <__assert_fail@plt+0x2b0>
   11c6c:	mov	r2, r6
   11c70:	mov	r3, r7
   11c74:	mov	r1, r4
   11c78:	mov	r0, #1
   11c7c:	bl	116ec <__printf_chk@plt>
   11c80:	pop	{r4, r6, r7, pc}
   11c84:	andeq	ip, r1, r4, asr pc
   11c88:	andeq	ip, r1, r8, asr pc
   11c8c:	push	{r4, r5, r6, lr}
   11c90:	sub	sp, sp, #8
   11c94:	mov	r4, r0
   11c98:	mov	r5, r1
   11c9c:	ldr	r1, [sp, #32]
   11ca0:	sub	r3, r3, #83	; 0x53
   11ca4:	cmp	r3, #33	; 0x21
   11ca8:	ldrls	pc, [pc, r3, lsl #2]
   11cac:	b	128ac <__assert_fail@plt+0x1058>
   11cb0:	andeq	r2, r1, r8, ror #16
   11cb4:	muleq	r1, r4, sp
   11cb8:	andeq	r2, r1, ip, lsr #17
   11cbc:	andeq	r2, r1, ip, lsr #17
   11cc0:	andeq	r2, r1, ip, lsr #17
   11cc4:	andeq	r2, r1, ip, lsr #17
   11cc8:	andeq	r2, r1, ip, lsr #17
   11ccc:	andeq	r2, r1, ip, lsr #17
   11cd0:	andeq	r2, r1, ip, lsr #17
   11cd4:	andeq	r2, r1, ip, lsr #17
   11cd8:	andeq	r2, r1, ip, lsr #17
   11cdc:	andeq	r2, r1, ip, lsr #17
   11ce0:	andeq	r2, r1, ip, lsr #17
   11ce4:	andeq	r2, r1, ip, lsr #17
   11ce8:	andeq	r2, r1, r4, asr #16
   11cec:	andeq	r2, r1, r4, lsr #16
   11cf0:	andeq	r2, r1, ip, lsl #17
   11cf4:	muleq	r1, ip, r8
   11cf8:	andeq	r2, r1, ip, lsr #17
   11cfc:	andeq	r2, r1, r4, lsr r8
   11d00:	andeq	r2, r1, ip, lsr #17
   11d04:	andeq	r2, r1, ip, lsr #17
   11d08:	andeq	r1, r1, r8, asr #26
   11d0c:	andeq	r2, r1, ip, lsr #17
   11d10:	andeq	r2, r1, ip, lsr #17
   11d14:	andeq	r1, r1, ip, ror #26
   11d18:	andeq	r2, r1, ip, lsr #17
   11d1c:	andeq	r1, r1, r8, lsr sp
   11d20:	andeq	r2, r1, ip, lsr #17
   11d24:	andeq	r2, r1, ip, lsr #17
   11d28:	andeq	r2, r1, ip, lsr #17
   11d2c:	andeq	r2, r1, ip, lsr #17
   11d30:	andeq	r2, r1, r4, asr r8
   11d34:	andeq	r1, r1, r0, lsl #27
   11d38:	ldr	r2, [sp, #28]
   11d3c:	mov	r1, r5
   11d40:	bl	11be0 <__assert_fail@plt+0x38c>
   11d44:	b	11d60 <__assert_fail@plt+0x50c>
   11d48:	mov	r2, #0
   11d4c:	ldr	r3, [r1, #48]	; 0x30
   11d50:	ldr	r1, [r1, #52]	; 0x34
   11d54:	orr	r2, r2, r1
   11d58:	mov	r1, r5
   11d5c:	bl	11ba4 <__assert_fail@plt+0x350>
   11d60:	mov	r0, #0
   11d64:	add	sp, sp, #8
   11d68:	pop	{r4, r5, r6, pc}
   11d6c:	ldr	r2, [r1, #56]	; 0x38
   11d70:	asr	r3, r2, #31
   11d74:	mov	r1, r5
   11d78:	bl	11c14 <__assert_fail@plt+0x3c0>
   11d7c:	b	11d60 <__assert_fail@plt+0x50c>
   11d80:	ldr	r2, [r1]
   11d84:	asr	r3, r2, #31
   11d88:	mov	r1, r5
   11d8c:	bl	11ba4 <__assert_fail@plt+0x350>
   11d90:	b	11d60 <__assert_fail@plt+0x50c>
   11d94:	ldr	r3, [r1]
   11d98:	ldr	r2, [pc, #2880]	; 128e0 <__assert_fail@plt+0x108c>
   11d9c:	cmp	r3, r2
   11da0:	beq	1267c <__assert_fail@plt+0xe28>
   11da4:	ble	11e1c <__assert_fail@plt+0x5c8>
   11da8:	ldr	r2, [pc, #2868]	; 128e4 <__assert_fail@plt+0x1090>
   11dac:	cmp	r3, r2
   11db0:	beq	127c4 <__assert_fail@plt+0xf70>
   11db4:	ble	12258 <__assert_fail@plt+0xa04>
   11db8:	ldr	r2, [pc, #2856]	; 128e8 <__assert_fail@plt+0x1094>
   11dbc:	cmp	r3, r2
   11dc0:	beq	126ec <__assert_fail@plt+0xe98>
   11dc4:	bgt	12520 <__assert_fail@plt+0xccc>
   11dc8:	ldr	r2, [pc, #2844]	; 128ec <__assert_fail@plt+0x1098>
   11dcc:	cmp	r3, r2
   11dd0:	beq	1262c <__assert_fail@plt+0xdd8>
   11dd4:	ble	12464 <__assert_fail@plt+0xc10>
   11dd8:	ldr	r2, [pc, #2832]	; 128f0 <__assert_fail@plt+0x109c>
   11ddc:	cmp	r3, r2
   11de0:	beq	12684 <__assert_fail@plt+0xe30>
   11de4:	ble	124d4 <__assert_fail@plt+0xc80>
   11de8:	ldr	r2, [pc, #2820]	; 128f4 <__assert_fail@plt+0x10a0>
   11dec:	cmp	r3, r2
   11df0:	beq	1266c <__assert_fail@plt+0xe18>
   11df4:	ble	1250c <__assert_fail@plt+0xcb8>
   11df8:	ldr	r2, [pc, #2808]	; 128f8 <__assert_fail@plt+0x10a4>
   11dfc:	cmp	r3, r2
   11e00:	ldreq	r2, [pc, #2804]	; 128fc <__assert_fail@plt+0x10a8>
   11e04:	beq	12040 <__assert_fail@plt+0x7ec>
   11e08:	ldr	r2, [pc, #2800]	; 12900 <__assert_fail@plt+0x10ac>
   11e0c:	cmp	r3, r2
   11e10:	ldreq	r2, [pc, #2796]	; 12904 <__assert_fail@plt+0x10b0>
   11e14:	beq	12040 <__assert_fail@plt+0x7ec>
   11e18:	b	11e88 <__assert_fail@plt+0x634>
   11e1c:	ldr	r2, [pc, #2788]	; 12908 <__assert_fail@plt+0x10b4>
   11e20:	cmp	r3, r2
   11e24:	beq	126dc <__assert_fail@plt+0xe88>
   11e28:	bgt	12050 <__assert_fail@plt+0x7fc>
   11e2c:	ldr	r2, [pc, #2776]	; 1290c <__assert_fail@plt+0x10b8>
   11e30:	cmp	r3, r2
   11e34:	beq	12714 <__assert_fail@plt+0xec0>
   11e38:	ble	11eac <__assert_fail@plt+0x658>
   11e3c:	ldr	r2, [pc, #2764]	; 12910 <__assert_fail@plt+0x10bc>
   11e40:	cmp	r3, r2
   11e44:	beq	126c4 <__assert_fail@plt+0xe70>
   11e48:	ble	11f9c <__assert_fail@plt+0x748>
   11e4c:	ldr	r2, [pc, #2752]	; 12914 <__assert_fail@plt+0x10c0>
   11e50:	cmp	r3, r2
   11e54:	beq	1274c <__assert_fail@plt+0xef8>
   11e58:	ble	12000 <__assert_fail@plt+0x7ac>
   11e5c:	ldr	r2, [pc, #2740]	; 12918 <__assert_fail@plt+0x10c4>
   11e60:	cmp	r3, r2
   11e64:	beq	12764 <__assert_fail@plt+0xf10>
   11e68:	ble	12030 <__assert_fail@plt+0x7dc>
   11e6c:	cmp	r3, #16384	; 0x4000
   11e70:	ldreq	r2, [pc, #2724]	; 1291c <__assert_fail@plt+0x10c8>
   11e74:	beq	12040 <__assert_fail@plt+0x7ec>
   11e78:	ldr	r2, [pc, #2720]	; 12920 <__assert_fail@plt+0x10cc>
   11e7c:	cmp	r3, r2
   11e80:	ldreq	r2, [pc, #2708]	; 1291c <__assert_fail@plt+0x10c8>
   11e84:	beq	12040 <__assert_fail@plt+0x7ec>
   11e88:	ldr	r6, [pc, #2708]	; 12924 <__assert_fail@plt+0x10d0>
   11e8c:	str	r3, [sp]
   11e90:	ldr	r3, [pc, #2704]	; 12928 <__assert_fail@plt+0x10d4>
   11e94:	mov	r2, #21
   11e98:	mov	r1, #1
   11e9c:	mov	r0, r6
   11ea0:	bl	116bc <__sprintf_chk@plt>
   11ea4:	mov	r2, r6
   11ea8:	b	12040 <__assert_fail@plt+0x7ec>
   11eac:	ldr	r2, [pc, #2680]	; 1292c <__assert_fail@plt+0x10d8>
   11eb0:	cmp	r3, r2
   11eb4:	beq	127bc <__assert_fail@plt+0xf68>
   11eb8:	bgt	11f2c <__assert_fail@plt+0x6d8>
   11ebc:	ldr	r2, [pc, #2668]	; 12930 <__assert_fail@plt+0x10dc>
   11ec0:	cmp	r3, r2
   11ec4:	beq	127e4 <__assert_fail@plt+0xf90>
   11ec8:	bgt	11efc <__assert_fail@plt+0x6a8>
   11ecc:	ldr	r2, [pc, #2656]	; 12934 <__assert_fail@plt+0x10e0>
   11ed0:	cmp	r3, r2
   11ed4:	beq	12654 <__assert_fail@plt+0xe00>
   11ed8:	ldr	r2, [pc, #2648]	; 12938 <__assert_fail@plt+0x10e4>
   11edc:	cmp	r3, r2
   11ee0:	ldreq	r2, [pc, #2644]	; 1293c <__assert_fail@plt+0x10e8>
   11ee4:	beq	12040 <__assert_fail@plt+0x7ec>
   11ee8:	add	r2, r2, #-268435456	; 0xf0000000
   11eec:	cmp	r3, r2
   11ef0:	bne	11e88 <__assert_fail@plt+0x634>
   11ef4:	ldr	r2, [pc, #2628]	; 12940 <__assert_fail@plt+0x10ec>
   11ef8:	b	12040 <__assert_fail@plt+0x7ec>
   11efc:	ldr	r2, [pc, #2624]	; 12944 <__assert_fail@plt+0x10f0>
   11f00:	cmp	r3, r2
   11f04:	beq	127f4 <__assert_fail@plt+0xfa0>
   11f08:	ldr	r2, [pc, #2616]	; 12948 <__assert_fail@plt+0x10f4>
   11f0c:	cmp	r3, r2
   11f10:	ldreq	r2, [pc, #2612]	; 1294c <__assert_fail@plt+0x10f8>
   11f14:	beq	12040 <__assert_fail@plt+0x7ec>
   11f18:	ldr	r2, [pc, #2608]	; 12950 <__assert_fail@plt+0x10fc>
   11f1c:	cmp	r3, r2
   11f20:	bne	11e88 <__assert_fail@plt+0x634>
   11f24:	ldr	r2, [pc, #2600]	; 12954 <__assert_fail@plt+0x1100>
   11f28:	b	12040 <__assert_fail@plt+0x7ec>
   11f2c:	ldr	r2, [pc, #2596]	; 12958 <__assert_fail@plt+0x1104>
   11f30:	cmp	r3, r2
   11f34:	beq	126a4 <__assert_fail@plt+0xe50>
   11f38:	bgt	11f6c <__assert_fail@plt+0x718>
   11f3c:	ldr	r2, [pc, #2584]	; 1295c <__assert_fail@plt+0x1108>
   11f40:	cmp	r3, r2
   11f44:	beq	1273c <__assert_fail@plt+0xee8>
   11f48:	ldr	r2, [pc, #2576]	; 12960 <__assert_fail@plt+0x110c>
   11f4c:	cmp	r3, r2
   11f50:	ldreq	r2, [pc, #2572]	; 12964 <__assert_fail@plt+0x1110>
   11f54:	beq	12040 <__assert_fail@plt+0x7ec>
   11f58:	ldr	r2, [pc, #2568]	; 12968 <__assert_fail@plt+0x1114>
   11f5c:	cmp	r3, r2
   11f60:	bne	11e88 <__assert_fail@plt+0x634>
   11f64:	ldr	r2, [pc, #2560]	; 1296c <__assert_fail@plt+0x1118>
   11f68:	b	12040 <__assert_fail@plt+0x7ec>
   11f6c:	ldr	r2, [pc, #2556]	; 12970 <__assert_fail@plt+0x111c>
   11f70:	cmp	r3, r2
   11f74:	beq	126d4 <__assert_fail@plt+0xe80>
   11f78:	ldr	r2, [pc, #2548]	; 12974 <__assert_fail@plt+0x1120>
   11f7c:	cmp	r3, r2
   11f80:	ldreq	r2, [pc, #2544]	; 12978 <__assert_fail@plt+0x1124>
   11f84:	beq	12040 <__assert_fail@plt+0x7ec>
   11f88:	ldr	r2, [pc, #2540]	; 1297c <__assert_fail@plt+0x1128>
   11f8c:	cmp	r3, r2
   11f90:	bne	11e88 <__assert_fail@plt+0x634>
   11f94:	ldr	r2, [pc, #2532]	; 12980 <__assert_fail@plt+0x112c>
   11f98:	b	12040 <__assert_fail@plt+0x7ec>
   11f9c:	cmp	r3, #51	; 0x33
   11fa0:	beq	1280c <__assert_fail@plt+0xfb8>
   11fa4:	bgt	11fd4 <__assert_fail@plt+0x780>
   11fa8:	ldr	r2, [pc, #2516]	; 12984 <__assert_fail@plt+0x1130>
   11fac:	cmp	r3, r2
   11fb0:	beq	12674 <__assert_fail@plt+0xe20>
   11fb4:	cmp	r3, #47	; 0x2f
   11fb8:	ldreq	r2, [pc, #2504]	; 12988 <__assert_fail@plt+0x1134>
   11fbc:	beq	12040 <__assert_fail@plt+0x7ec>
   11fc0:	add	r2, r2, #-16777216	; 0xff000000
   11fc4:	cmp	r3, r2
   11fc8:	bne	11e88 <__assert_fail@plt+0x634>
   11fcc:	ldr	r2, [pc, #2488]	; 1298c <__assert_fail@plt+0x1138>
   11fd0:	b	12040 <__assert_fail@plt+0x7ec>
   11fd4:	cmp	r3, #1984	; 0x7c0
   11fd8:	beq	1272c <__assert_fail@plt+0xed8>
   11fdc:	ldr	r2, [pc, #2476]	; 12990 <__assert_fail@plt+0x113c>
   11fe0:	cmp	r3, r2
   11fe4:	ldreq	r2, [pc, #2472]	; 12994 <__assert_fail@plt+0x1140>
   11fe8:	beq	12040 <__assert_fail@plt+0x7ec>
   11fec:	ldr	r2, [pc, #2468]	; 12998 <__assert_fail@plt+0x1144>
   11ff0:	cmp	r3, r2
   11ff4:	bne	11e88 <__assert_fail@plt+0x634>
   11ff8:	ldr	r2, [pc, #2460]	; 1299c <__assert_fail@plt+0x1148>
   11ffc:	b	12040 <__assert_fail@plt+0x7ec>
   12000:	ldr	r2, [pc, #2456]	; 129a0 <__assert_fail@plt+0x114c>
   12004:	cmp	r3, r2
   12008:	beq	12744 <__assert_fail@plt+0xef0>
   1200c:	ldr	r2, [pc, #2448]	; 129a4 <__assert_fail@plt+0x1150>
   12010:	cmp	r3, r2
   12014:	ldreq	r2, [pc, #2444]	; 129a8 <__assert_fail@plt+0x1154>
   12018:	beq	12040 <__assert_fail@plt+0x7ec>
   1201c:	ldr	r2, [pc, #2440]	; 129ac <__assert_fail@plt+0x1158>
   12020:	cmp	r3, r2
   12024:	bne	11e88 <__assert_fail@plt+0x634>
   12028:	ldr	r2, [pc, #2432]	; 129b0 <__assert_fail@plt+0x115c>
   1202c:	b	12040 <__assert_fail@plt+0x7ec>
   12030:	ldr	r2, [pc, #2428]	; 129b4 <__assert_fail@plt+0x1160>
   12034:	cmp	r3, r2
   12038:	ldreq	r2, [pc, #2424]	; 129b8 <__assert_fail@plt+0x1164>
   1203c:	bne	11e88 <__assert_fail@plt+0x634>
   12040:	mov	r1, r5
   12044:	mov	r0, r4
   12048:	bl	11be0 <__assert_fail@plt+0x38c>
   1204c:	b	11d60 <__assert_fail@plt+0x50c>
   12050:	ldr	r2, [pc, #2404]	; 129bc <__assert_fail@plt+0x1168>
   12054:	cmp	r3, r2
   12058:	beq	12634 <__assert_fail@plt+0xde0>
   1205c:	ble	120b4 <__assert_fail@plt+0x860>
   12060:	ldr	r2, [pc, #2392]	; 129c0 <__assert_fail@plt+0x116c>
   12064:	cmp	r3, r2
   12068:	beq	1270c <__assert_fail@plt+0xeb8>
   1206c:	ble	121a4 <__assert_fail@plt+0x950>
   12070:	ldr	r2, [pc, #2380]	; 129c4 <__assert_fail@plt+0x1170>
   12074:	cmp	r3, r2
   12078:	beq	126fc <__assert_fail@plt+0xea8>
   1207c:	ble	12214 <__assert_fail@plt+0x9c0>
   12080:	ldr	r2, [pc, #2368]	; 129c8 <__assert_fail@plt+0x1174>
   12084:	cmp	r3, r2
   12088:	beq	127fc <__assert_fail@plt+0xfa8>
   1208c:	ble	12244 <__assert_fail@plt+0x9f0>
   12090:	ldr	r2, [pc, #2356]	; 129cc <__assert_fail@plt+0x1178>
   12094:	cmp	r3, r2
   12098:	ldreq	r2, [pc, #2352]	; 129d0 <__assert_fail@plt+0x117c>
   1209c:	beq	12040 <__assert_fail@plt+0x7ec>
   120a0:	add	r2, r2, #1
   120a4:	cmp	r3, r2
   120a8:	ldreq	r2, [pc, #2340]	; 129d4 <__assert_fail@plt+0x1180>
   120ac:	beq	12040 <__assert_fail@plt+0x7ec>
   120b0:	b	11e88 <__assert_fail@plt+0x634>
   120b4:	sub	r2, r2, #20480	; 0x5000
   120b8:	cmp	r3, r2
   120bc:	beq	126bc <__assert_fail@plt+0xe68>
   120c0:	bgt	12134 <__assert_fail@plt+0x8e0>
   120c4:	ldr	r2, [pc, #2316]	; 129d8 <__assert_fail@plt+0x1184>
   120c8:	cmp	r3, r2
   120cc:	beq	12754 <__assert_fail@plt+0xf00>
   120d0:	bgt	12104 <__assert_fail@plt+0x8b0>
   120d4:	ldr	r2, [pc, #2304]	; 129dc <__assert_fail@plt+0x1188>
   120d8:	cmp	r3, r2
   120dc:	beq	12704 <__assert_fail@plt+0xeb0>
   120e0:	add	r2, r2, #45	; 0x2d
   120e4:	cmp	r3, r2
   120e8:	ldreq	r2, [pc, #2288]	; 129e0 <__assert_fail@plt+0x118c>
   120ec:	beq	12040 <__assert_fail@plt+0x7ec>
   120f0:	ldr	r2, [pc, #2284]	; 129e4 <__assert_fail@plt+0x1190>
   120f4:	cmp	r3, r2
   120f8:	bne	11e88 <__assert_fail@plt+0x634>
   120fc:	ldr	r2, [pc, #2276]	; 129e8 <__assert_fail@plt+0x1194>
   12100:	b	12040 <__assert_fail@plt+0x7ec>
   12104:	ldr	r2, [pc, #2272]	; 129ec <__assert_fail@plt+0x1198>
   12108:	cmp	r3, r2
   1210c:	beq	127b4 <__assert_fail@plt+0xf60>
   12110:	ldr	r2, [pc, #2264]	; 129f0 <__assert_fail@plt+0x119c>
   12114:	cmp	r3, r2
   12118:	ldreq	r2, [pc, #2260]	; 129f4 <__assert_fail@plt+0x11a0>
   1211c:	beq	12040 <__assert_fail@plt+0x7ec>
   12120:	ldr	r2, [pc, #2256]	; 129f8 <__assert_fail@plt+0x11a4>
   12124:	cmp	r3, r2
   12128:	bne	11e88 <__assert_fail@plt+0x634>
   1212c:	ldr	r2, [pc, #2248]	; 129fc <__assert_fail@plt+0x11a8>
   12130:	b	12040 <__assert_fail@plt+0x7ec>
   12134:	ldr	r2, [pc, #2244]	; 12a00 <__assert_fail@plt+0x11ac>
   12138:	cmp	r3, r2
   1213c:	beq	12724 <__assert_fail@plt+0xed0>
   12140:	bgt	12174 <__assert_fail@plt+0x920>
   12144:	ldr	r2, [pc, #2232]	; 12a04 <__assert_fail@plt+0x11b0>
   12148:	cmp	r3, r2
   1214c:	beq	1278c <__assert_fail@plt+0xf38>
   12150:	add	r2, r2, #65	; 0x41
   12154:	cmp	r3, r2
   12158:	ldreq	r2, [pc, #2216]	; 12a08 <__assert_fail@plt+0x11b4>
   1215c:	beq	12040 <__assert_fail@plt+0x7ec>
   12160:	ldr	r2, [pc, #2212]	; 12a0c <__assert_fail@plt+0x11b8>
   12164:	cmp	r3, r2
   12168:	bne	11e88 <__assert_fail@plt+0x634>
   1216c:	ldr	r2, [pc, #2204]	; 12a10 <__assert_fail@plt+0x11bc>
   12170:	b	12040 <__assert_fail@plt+0x7ec>
   12174:	ldr	r2, [pc, #2200]	; 12a14 <__assert_fail@plt+0x11c0>
   12178:	cmp	r3, r2
   1217c:	beq	1276c <__assert_fail@plt+0xf18>
   12180:	add	r2, r2, #1
   12184:	cmp	r3, r2
   12188:	ldreq	r2, [pc, #2184]	; 12a18 <__assert_fail@plt+0x11c4>
   1218c:	beq	12040 <__assert_fail@plt+0x7ec>
   12190:	sub	r2, r2, #2
   12194:	cmp	r3, r2
   12198:	bne	11e88 <__assert_fail@plt+0x634>
   1219c:	ldr	r2, [pc, #2168]	; 12a1c <__assert_fail@plt+0x11c8>
   121a0:	b	12040 <__assert_fail@plt+0x7ec>
   121a4:	ldr	r2, [pc, #2164]	; 12a20 <__assert_fail@plt+0x11cc>
   121a8:	cmp	r3, r2
   121ac:	beq	1269c <__assert_fail@plt+0xe48>
   121b0:	bgt	121e4 <__assert_fail@plt+0x990>
   121b4:	ldr	r2, [pc, #2152]	; 12a24 <__assert_fail@plt+0x11d0>
   121b8:	cmp	r3, r2
   121bc:	beq	126cc <__assert_fail@plt+0xe78>
   121c0:	add	r2, r2, #2
   121c4:	cmp	r3, r2
   121c8:	ldreq	r2, [pc, #2136]	; 12a28 <__assert_fail@plt+0x11d4>
   121cc:	beq	12040 <__assert_fail@plt+0x7ec>
   121d0:	ldr	r2, [pc, #2132]	; 12a2c <__assert_fail@plt+0x11d8>
   121d4:	cmp	r3, r2
   121d8:	bne	11e88 <__assert_fail@plt+0x634>
   121dc:	ldr	r2, [pc, #2124]	; 12a30 <__assert_fail@plt+0x11dc>
   121e0:	b	12040 <__assert_fail@plt+0x7ec>
   121e4:	ldr	r2, [pc, #2120]	; 12a34 <__assert_fail@plt+0x11e0>
   121e8:	cmp	r3, r2
   121ec:	beq	12664 <__assert_fail@plt+0xe10>
   121f0:	ldr	r2, [pc, #2112]	; 12a38 <__assert_fail@plt+0x11e4>
   121f4:	cmp	r3, r2
   121f8:	ldreq	r2, [pc, #2108]	; 12a3c <__assert_fail@plt+0x11e8>
   121fc:	beq	12040 <__assert_fail@plt+0x7ec>
   12200:	ldr	r2, [pc, #2104]	; 12a40 <__assert_fail@plt+0x11ec>
   12204:	cmp	r3, r2
   12208:	bne	11e88 <__assert_fail@plt+0x634>
   1220c:	ldr	r2, [pc, #2096]	; 12a44 <__assert_fail@plt+0x11f0>
   12210:	b	12040 <__assert_fail@plt+0x7ec>
   12214:	ldr	r2, [pc, #2092]	; 12a48 <__assert_fail@plt+0x11f4>
   12218:	cmp	r3, r2
   1221c:	beq	127cc <__assert_fail@plt+0xf78>
   12220:	add	r2, r2, #3
   12224:	cmp	r3, r2
   12228:	ldreq	r2, [pc, #2076]	; 12a4c <__assert_fail@plt+0x11f8>
   1222c:	beq	12040 <__assert_fail@plt+0x7ec>
   12230:	ldr	r2, [pc, #2072]	; 12a50 <__assert_fail@plt+0x11fc>
   12234:	cmp	r3, r2
   12238:	bne	11e88 <__assert_fail@plt+0x634>
   1223c:	ldr	r2, [pc, #2064]	; 12a54 <__assert_fail@plt+0x1200>
   12240:	b	12040 <__assert_fail@plt+0x7ec>
   12244:	ldr	r2, [pc, #2060]	; 12a58 <__assert_fail@plt+0x1204>
   12248:	cmp	r3, r2
   1224c:	ldreq	r2, [pc, #2056]	; 12a5c <__assert_fail@plt+0x1208>
   12250:	beq	12040 <__assert_fail@plt+0x7ec>
   12254:	b	11e88 <__assert_fail@plt+0x634>
   12258:	ldr	r2, [pc, #2048]	; 12a60 <__assert_fail@plt+0x120c>
   1225c:	cmp	r3, r2
   12260:	beq	12814 <__assert_fail@plt+0xfc0>
   12264:	ble	122bc <__assert_fail@plt+0xa68>
   12268:	ldr	r2, [pc, #2036]	; 12a64 <__assert_fail@plt+0x1210>
   1226c:	cmp	r3, r2
   12270:	beq	126b4 <__assert_fail@plt+0xe60>
   12274:	ble	123ac <__assert_fail@plt+0xb58>
   12278:	ldr	r2, [pc, #2024]	; 12a68 <__assert_fail@plt+0x1214>
   1227c:	cmp	r3, r2
   12280:	beq	1279c <__assert_fail@plt+0xf48>
   12284:	ble	12420 <__assert_fail@plt+0xbcc>
   12288:	ldr	r2, [pc, #2012]	; 12a6c <__assert_fail@plt+0x1218>
   1228c:	cmp	r3, r2
   12290:	beq	1263c <__assert_fail@plt+0xde8>
   12294:	ble	12450 <__assert_fail@plt+0xbfc>
   12298:	ldr	r2, [pc, #2000]	; 12a70 <__assert_fail@plt+0x121c>
   1229c:	cmp	r3, r2
   122a0:	ldreq	r2, [pc, #1996]	; 12a74 <__assert_fail@plt+0x1220>
   122a4:	beq	12040 <__assert_fail@plt+0x7ec>
   122a8:	ldr	r2, [pc, #1992]	; 12a78 <__assert_fail@plt+0x1224>
   122ac:	cmp	r3, r2
   122b0:	ldreq	r2, [pc, #1988]	; 12a7c <__assert_fail@plt+0x1228>
   122b4:	beq	12040 <__assert_fail@plt+0x7ec>
   122b8:	b	11e88 <__assert_fail@plt+0x634>
   122bc:	ldr	r2, [pc, #1980]	; 12a80 <__assert_fail@plt+0x122c>
   122c0:	cmp	r3, r2
   122c4:	beq	127d4 <__assert_fail@plt+0xf80>
   122c8:	bgt	1233c <__assert_fail@plt+0xae8>
   122cc:	ldr	r2, [pc, #1968]	; 12a84 <__assert_fail@plt+0x1230>
   122d0:	cmp	r3, r2
   122d4:	beq	126f4 <__assert_fail@plt+0xea0>
   122d8:	bgt	1230c <__assert_fail@plt+0xab8>
   122dc:	ldr	r2, [pc, #1956]	; 12a88 <__assert_fail@plt+0x1234>
   122e0:	cmp	r3, r2
   122e4:	beq	12784 <__assert_fail@plt+0xf30>
   122e8:	ldr	r2, [pc, #1948]	; 12a8c <__assert_fail@plt+0x1238>
   122ec:	cmp	r3, r2
   122f0:	ldreq	r2, [pc, #1944]	; 12a90 <__assert_fail@plt+0x123c>
   122f4:	beq	12040 <__assert_fail@plt+0x7ec>
   122f8:	ldr	r2, [pc, #1940]	; 12a94 <__assert_fail@plt+0x1240>
   122fc:	cmp	r3, r2
   12300:	bne	11e88 <__assert_fail@plt+0x634>
   12304:	ldr	r2, [pc, #1932]	; 12a98 <__assert_fail@plt+0x1244>
   12308:	b	12040 <__assert_fail@plt+0x7ec>
   1230c:	ldr	r2, [pc, #1928]	; 12a9c <__assert_fail@plt+0x1248>
   12310:	cmp	r3, r2
   12314:	beq	1271c <__assert_fail@plt+0xec8>
   12318:	ldr	r2, [pc, #1920]	; 12aa0 <__assert_fail@plt+0x124c>
   1231c:	cmp	r3, r2
   12320:	ldreq	r2, [pc, #1916]	; 12aa4 <__assert_fail@plt+0x1250>
   12324:	beq	12040 <__assert_fail@plt+0x7ec>
   12328:	ldr	r2, [pc, #1912]	; 12aa8 <__assert_fail@plt+0x1254>
   1232c:	cmp	r3, r2
   12330:	bne	11e88 <__assert_fail@plt+0x634>
   12334:	ldr	r2, [pc, #1904]	; 12aac <__assert_fail@plt+0x1258>
   12338:	b	12040 <__assert_fail@plt+0x7ec>
   1233c:	ldr	r2, [pc, #1900]	; 12ab0 <__assert_fail@plt+0x125c>
   12340:	cmp	r3, r2
   12344:	beq	126ac <__assert_fail@plt+0xe58>
   12348:	bgt	1237c <__assert_fail@plt+0xb28>
   1234c:	ldr	r2, [pc, #1888]	; 12ab4 <__assert_fail@plt+0x1260>
   12350:	cmp	r3, r2
   12354:	beq	126e4 <__assert_fail@plt+0xe90>
   12358:	ldr	r2, [pc, #1880]	; 12ab8 <__assert_fail@plt+0x1264>
   1235c:	cmp	r3, r2
   12360:	ldreq	r2, [pc, #1876]	; 12abc <__assert_fail@plt+0x1268>
   12364:	beq	12040 <__assert_fail@plt+0x7ec>
   12368:	ldr	r2, [pc, #1872]	; 12ac0 <__assert_fail@plt+0x126c>
   1236c:	cmp	r3, r2
   12370:	bne	11e88 <__assert_fail@plt+0x634>
   12374:	ldr	r2, [pc, #1864]	; 12ac4 <__assert_fail@plt+0x1270>
   12378:	b	12040 <__assert_fail@plt+0x7ec>
   1237c:	ldr	r2, [pc, #1860]	; 12ac8 <__assert_fail@plt+0x1274>
   12380:	cmp	r3, r2
   12384:	beq	1268c <__assert_fail@plt+0xe38>
   12388:	ldr	r2, [pc, #1852]	; 12acc <__assert_fail@plt+0x1278>
   1238c:	cmp	r3, r2
   12390:	ldreq	r2, [pc, #1848]	; 12ad0 <__assert_fail@plt+0x127c>
   12394:	beq	12040 <__assert_fail@plt+0x7ec>
   12398:	ldr	r2, [pc, #1844]	; 12ad4 <__assert_fail@plt+0x1280>
   1239c:	cmp	r3, r2
   123a0:	bne	11e88 <__assert_fail@plt+0x634>
   123a4:	ldr	r2, [pc, #1836]	; 12ad8 <__assert_fail@plt+0x1284>
   123a8:	b	12040 <__assert_fail@plt+0x7ec>
   123ac:	ldr	r2, [pc, #1832]	; 12adc <__assert_fail@plt+0x1288>
   123b0:	cmp	r3, r2
   123b4:	beq	127ac <__assert_fail@plt+0xf58>
   123b8:	bgt	123f0 <__assert_fail@plt+0xb9c>
   123bc:	ldr	r2, [pc, #1820]	; 12ae0 <__assert_fail@plt+0x128c>
   123c0:	cmp	r3, r2
   123c4:	beq	1264c <__assert_fail@plt+0xdf8>
   123c8:	add	r2, r2, #194560	; 0x2f800
   123cc:	add	r2, r2, #796	; 0x31c
   123d0:	cmp	r3, r2
   123d4:	ldreq	r2, [pc, #1800]	; 12ae4 <__assert_fail@plt+0x1290>
   123d8:	beq	12040 <__assert_fail@plt+0x7ec>
   123dc:	ldr	r2, [pc, #1796]	; 12ae8 <__assert_fail@plt+0x1294>
   123e0:	cmp	r3, r2
   123e4:	bne	11e88 <__assert_fail@plt+0x634>
   123e8:	ldr	r2, [pc, #1788]	; 12aec <__assert_fail@plt+0x1298>
   123ec:	b	12040 <__assert_fail@plt+0x7ec>
   123f0:	ldr	r2, [pc, #1784]	; 12af0 <__assert_fail@plt+0x129c>
   123f4:	cmp	r3, r2
   123f8:	beq	12694 <__assert_fail@plt+0xe40>
   123fc:	ldr	r2, [pc, #1776]	; 12af4 <__assert_fail@plt+0x12a0>
   12400:	cmp	r3, r2
   12404:	ldreq	r2, [pc, #1772]	; 12af8 <__assert_fail@plt+0x12a4>
   12408:	beq	12040 <__assert_fail@plt+0x7ec>
   1240c:	ldr	r2, [pc, #1768]	; 12afc <__assert_fail@plt+0x12a8>
   12410:	cmp	r3, r2
   12414:	bne	11e88 <__assert_fail@plt+0x634>
   12418:	ldr	r2, [pc, #1760]	; 12b00 <__assert_fail@plt+0x12ac>
   1241c:	b	12040 <__assert_fail@plt+0x7ec>
   12420:	ldr	r2, [pc, #1756]	; 12b04 <__assert_fail@plt+0x12b0>
   12424:	cmp	r3, r2
   12428:	beq	1277c <__assert_fail@plt+0xf28>
   1242c:	ldr	r2, [pc, #1748]	; 12b08 <__assert_fail@plt+0x12b4>
   12430:	cmp	r3, r2
   12434:	ldreq	r2, [pc, #1744]	; 12b0c <__assert_fail@plt+0x12b8>
   12438:	beq	12040 <__assert_fail@plt+0x7ec>
   1243c:	ldr	r2, [pc, #1740]	; 12b10 <__assert_fail@plt+0x12bc>
   12440:	cmp	r3, r2
   12444:	bne	11e88 <__assert_fail@plt+0x634>
   12448:	ldr	r2, [pc, #1732]	; 12b14 <__assert_fail@plt+0x12c0>
   1244c:	b	12040 <__assert_fail@plt+0x7ec>
   12450:	ldr	r2, [pc, #1728]	; 12b18 <__assert_fail@plt+0x12c4>
   12454:	cmp	r3, r2
   12458:	ldreq	r2, [pc, #1724]	; 12b1c <__assert_fail@plt+0x12c8>
   1245c:	beq	12040 <__assert_fail@plt+0x7ec>
   12460:	b	11e88 <__assert_fail@plt+0x634>
   12464:	ldr	r2, [pc, #1716]	; 12b20 <__assert_fail@plt+0x12cc>
   12468:	cmp	r3, r2
   1246c:	beq	12804 <__assert_fail@plt+0xfb0>
   12470:	bgt	124a4 <__assert_fail@plt+0xc50>
   12474:	ldr	r2, [pc, #1704]	; 12b24 <__assert_fail@plt+0x12d0>
   12478:	cmp	r3, r2
   1247c:	beq	127ec <__assert_fail@plt+0xf98>
   12480:	ldr	r2, [pc, #1696]	; 12b28 <__assert_fail@plt+0x12d4>
   12484:	cmp	r3, r2
   12488:	ldreq	r2, [pc, #1692]	; 12b2c <__assert_fail@plt+0x12d8>
   1248c:	beq	12040 <__assert_fail@plt+0x7ec>
   12490:	ldr	r2, [pc, #1688]	; 12b30 <__assert_fail@plt+0x12dc>
   12494:	cmp	r3, r2
   12498:	bne	11e88 <__assert_fail@plt+0x634>
   1249c:	ldr	r2, [pc, #1440]	; 12a44 <__assert_fail@plt+0x11f0>
   124a0:	b	12040 <__assert_fail@plt+0x7ec>
   124a4:	ldr	r2, [pc, #1672]	; 12b34 <__assert_fail@plt+0x12e0>
   124a8:	cmp	r3, r2
   124ac:	beq	1281c <__assert_fail@plt+0xfc8>
   124b0:	ldr	r2, [pc, #1664]	; 12b38 <__assert_fail@plt+0x12e4>
   124b4:	cmp	r3, r2
   124b8:	ldreq	r2, [pc, #1660]	; 12b3c <__assert_fail@plt+0x12e8>
   124bc:	beq	12040 <__assert_fail@plt+0x7ec>
   124c0:	ldr	r2, [pc, #1656]	; 12b40 <__assert_fail@plt+0x12ec>
   124c4:	cmp	r3, r2
   124c8:	bne	11e88 <__assert_fail@plt+0x634>
   124cc:	ldr	r2, [pc, #1648]	; 12b44 <__assert_fail@plt+0x12f0>
   124d0:	b	12040 <__assert_fail@plt+0x7ec>
   124d4:	ldr	r2, [pc, #1644]	; 12b48 <__assert_fail@plt+0x12f4>
   124d8:	cmp	r3, r2
   124dc:	beq	12644 <__assert_fail@plt+0xdf0>
   124e0:	add	r2, r2, #15597568	; 0xee0000
   124e4:	add	r2, r2, #65280	; 0xff00
   124e8:	add	r2, r2, #3
   124ec:	cmp	r3, r2
   124f0:	ldreq	r2, [pc, #1620]	; 12b4c <__assert_fail@plt+0x12f8>
   124f4:	beq	12040 <__assert_fail@plt+0x7ec>
   124f8:	ldr	r2, [pc, #1616]	; 12b50 <__assert_fail@plt+0x12fc>
   124fc:	cmp	r3, r2
   12500:	bne	11e88 <__assert_fail@plt+0x634>
   12504:	ldr	r2, [pc, #1608]	; 12b54 <__assert_fail@plt+0x1300>
   12508:	b	12040 <__assert_fail@plt+0x7ec>
   1250c:	ldr	r2, [pc, #1604]	; 12b58 <__assert_fail@plt+0x1304>
   12510:	cmp	r3, r2
   12514:	ldreq	r2, [pc, #1600]	; 12b5c <__assert_fail@plt+0x1308>
   12518:	beq	12040 <__assert_fail@plt+0x7ec>
   1251c:	b	11e88 <__assert_fail@plt+0x634>
   12520:	ldr	r2, [pc, #1592]	; 12b60 <__assert_fail@plt+0x130c>
   12524:	cmp	r3, r2
   12528:	beq	127a4 <__assert_fail@plt+0xf50>
   1252c:	ble	12574 <__assert_fail@plt+0xd20>
   12530:	ldr	r2, [pc, #1580]	; 12b64 <__assert_fail@plt+0x1310>
   12534:	cmp	r3, r2
   12538:	beq	12774 <__assert_fail@plt+0xf20>
   1253c:	ble	125e4 <__assert_fail@plt+0xd90>
   12540:	ldr	r2, [pc, #1568]	; 12b68 <__assert_fail@plt+0x1314>
   12544:	cmp	r3, r2
   12548:	beq	127dc <__assert_fail@plt+0xf88>
   1254c:	ble	12618 <__assert_fail@plt+0xdc4>
   12550:	ldr	r2, [pc, #1556]	; 12b6c <__assert_fail@plt+0x1318>
   12554:	cmp	r3, r2
   12558:	ldreq	r2, [pc, #1552]	; 12b70 <__assert_fail@plt+0x131c>
   1255c:	beq	12040 <__assert_fail@plt+0x7ec>
   12560:	ldr	r2, [pc, #1548]	; 12b74 <__assert_fail@plt+0x1320>
   12564:	cmp	r3, r2
   12568:	ldreq	r2, [pc, #1544]	; 12b78 <__assert_fail@plt+0x1324>
   1256c:	beq	12040 <__assert_fail@plt+0x7ec>
   12570:	b	11e88 <__assert_fail@plt+0x634>
   12574:	ldr	r2, [pc, #1536]	; 12b7c <__assert_fail@plt+0x1328>
   12578:	cmp	r3, r2
   1257c:	beq	12734 <__assert_fail@plt+0xee0>
   12580:	bgt	125b4 <__assert_fail@plt+0xd60>
   12584:	ldr	r2, [pc, #1524]	; 12b80 <__assert_fail@plt+0x132c>
   12588:	cmp	r3, r2
   1258c:	beq	12794 <__assert_fail@plt+0xf40>
   12590:	ldr	r2, [pc, #1516]	; 12b84 <__assert_fail@plt+0x1330>
   12594:	cmp	r3, r2
   12598:	ldreq	r2, [pc, #1512]	; 12b88 <__assert_fail@plt+0x1334>
   1259c:	beq	12040 <__assert_fail@plt+0x7ec>
   125a0:	ldr	r2, [pc, #1508]	; 12b8c <__assert_fail@plt+0x1338>
   125a4:	cmp	r3, r2
   125a8:	bne	11e88 <__assert_fail@plt+0x634>
   125ac:	ldr	r2, [pc, #1500]	; 12b90 <__assert_fail@plt+0x133c>
   125b0:	b	12040 <__assert_fail@plt+0x7ec>
   125b4:	ldr	r2, [pc, #1496]	; 12b94 <__assert_fail@plt+0x1340>
   125b8:	cmp	r3, r2
   125bc:	beq	1275c <__assert_fail@plt+0xf08>
   125c0:	ldr	r2, [pc, #1488]	; 12b98 <__assert_fail@plt+0x1344>
   125c4:	cmp	r3, r2
   125c8:	ldreq	r2, [pc, #1484]	; 12b9c <__assert_fail@plt+0x1348>
   125cc:	beq	12040 <__assert_fail@plt+0x7ec>
   125d0:	ldr	r2, [pc, #1480]	; 12ba0 <__assert_fail@plt+0x134c>
   125d4:	cmp	r3, r2
   125d8:	bne	11e88 <__assert_fail@plt+0x634>
   125dc:	ldr	r2, [pc, #1472]	; 12ba4 <__assert_fail@plt+0x1350>
   125e0:	b	12040 <__assert_fail@plt+0x7ec>
   125e4:	ldr	r2, [pc, #1468]	; 12ba8 <__assert_fail@plt+0x1354>
   125e8:	cmp	r3, r2
   125ec:	beq	1265c <__assert_fail@plt+0xe08>
   125f0:	add	r2, r2, #195584	; 0x2fc00
   125f4:	add	r2, r2, #972	; 0x3cc
   125f8:	cmp	r3, r2
   125fc:	ldreq	r2, [pc, #1448]	; 12bac <__assert_fail@plt+0x1358>
   12600:	beq	12040 <__assert_fail@plt+0x7ec>
   12604:	ldr	r2, [pc, #1444]	; 12bb0 <__assert_fail@plt+0x135c>
   12608:	cmp	r3, r2
   1260c:	bne	11e88 <__assert_fail@plt+0x634>
   12610:	ldr	r2, [pc, #1436]	; 12bb4 <__assert_fail@plt+0x1360>
   12614:	b	12040 <__assert_fail@plt+0x7ec>
   12618:	ldr	r2, [pc, #1432]	; 12bb8 <__assert_fail@plt+0x1364>
   1261c:	cmp	r3, r2
   12620:	ldreq	r2, [pc, #1428]	; 12bbc <__assert_fail@plt+0x1368>
   12624:	beq	12040 <__assert_fail@plt+0x7ec>
   12628:	b	11e88 <__assert_fail@plt+0x634>
   1262c:	ldr	r2, [pc, #1420]	; 12bc0 <__assert_fail@plt+0x136c>
   12630:	b	12040 <__assert_fail@plt+0x7ec>
   12634:	ldr	r2, [pc, #1416]	; 12bc4 <__assert_fail@plt+0x1370>
   12638:	b	12040 <__assert_fail@plt+0x7ec>
   1263c:	ldr	r2, [pc, #1412]	; 12bc8 <__assert_fail@plt+0x1374>
   12640:	b	12040 <__assert_fail@plt+0x7ec>
   12644:	ldr	r2, [pc, #1408]	; 12bcc <__assert_fail@plt+0x1378>
   12648:	b	12040 <__assert_fail@plt+0x7ec>
   1264c:	ldr	r2, [pc, #1404]	; 12bd0 <__assert_fail@plt+0x137c>
   12650:	b	12040 <__assert_fail@plt+0x7ec>
   12654:	ldr	r2, [pc, #1400]	; 12bd4 <__assert_fail@plt+0x1380>
   12658:	b	12040 <__assert_fail@plt+0x7ec>
   1265c:	ldr	r2, [pc, #1396]	; 12bd8 <__assert_fail@plt+0x1384>
   12660:	b	12040 <__assert_fail@plt+0x7ec>
   12664:	ldr	r2, [pc, #1392]	; 12bdc <__assert_fail@plt+0x1388>
   12668:	b	12040 <__assert_fail@plt+0x7ec>
   1266c:	ldr	r2, [pc, #1388]	; 12be0 <__assert_fail@plt+0x138c>
   12670:	b	12040 <__assert_fail@plt+0x7ec>
   12674:	ldr	r2, [pc, #1384]	; 12be4 <__assert_fail@plt+0x1390>
   12678:	b	12040 <__assert_fail@plt+0x7ec>
   1267c:	ldr	r2, [pc, #1380]	; 12be8 <__assert_fail@plt+0x1394>
   12680:	b	12040 <__assert_fail@plt+0x7ec>
   12684:	ldr	r2, [pc, #1376]	; 12bec <__assert_fail@plt+0x1398>
   12688:	b	12040 <__assert_fail@plt+0x7ec>
   1268c:	ldr	r2, [pc, #1372]	; 12bf0 <__assert_fail@plt+0x139c>
   12690:	b	12040 <__assert_fail@plt+0x7ec>
   12694:	ldr	r2, [pc, #1368]	; 12bf4 <__assert_fail@plt+0x13a0>
   12698:	b	12040 <__assert_fail@plt+0x7ec>
   1269c:	ldr	r2, [pc, #1364]	; 12bf8 <__assert_fail@plt+0x13a4>
   126a0:	b	12040 <__assert_fail@plt+0x7ec>
   126a4:	ldr	r2, [pc, #1360]	; 12bfc <__assert_fail@plt+0x13a8>
   126a8:	b	12040 <__assert_fail@plt+0x7ec>
   126ac:	ldr	r2, [pc, #1356]	; 12c00 <__assert_fail@plt+0x13ac>
   126b0:	b	12040 <__assert_fail@plt+0x7ec>
   126b4:	ldr	r2, [pc, #1352]	; 12c04 <__assert_fail@plt+0x13b0>
   126b8:	b	12040 <__assert_fail@plt+0x7ec>
   126bc:	ldr	r2, [pc, #1348]	; 12c08 <__assert_fail@plt+0x13b4>
   126c0:	b	12040 <__assert_fail@plt+0x7ec>
   126c4:	ldr	r2, [pc, #1344]	; 12c0c <__assert_fail@plt+0x13b8>
   126c8:	b	12040 <__assert_fail@plt+0x7ec>
   126cc:	ldr	r2, [pc, #1340]	; 12c10 <__assert_fail@plt+0x13bc>
   126d0:	b	12040 <__assert_fail@plt+0x7ec>
   126d4:	ldr	r2, [pc, #1336]	; 12c14 <__assert_fail@plt+0x13c0>
   126d8:	b	12040 <__assert_fail@plt+0x7ec>
   126dc:	ldr	r2, [pc, #1332]	; 12c18 <__assert_fail@plt+0x13c4>
   126e0:	b	12040 <__assert_fail@plt+0x7ec>
   126e4:	ldr	r2, [pc, #1328]	; 12c1c <__assert_fail@plt+0x13c8>
   126e8:	b	12040 <__assert_fail@plt+0x7ec>
   126ec:	ldr	r2, [pc, #1324]	; 12c20 <__assert_fail@plt+0x13cc>
   126f0:	b	12040 <__assert_fail@plt+0x7ec>
   126f4:	ldr	r2, [pc, #1320]	; 12c24 <__assert_fail@plt+0x13d0>
   126f8:	b	12040 <__assert_fail@plt+0x7ec>
   126fc:	ldr	r2, [pc, #1316]	; 12c28 <__assert_fail@plt+0x13d4>
   12700:	b	12040 <__assert_fail@plt+0x7ec>
   12704:	ldr	r2, [pc, #1312]	; 12c2c <__assert_fail@plt+0x13d8>
   12708:	b	12040 <__assert_fail@plt+0x7ec>
   1270c:	ldr	r2, [pc, #1308]	; 12c30 <__assert_fail@plt+0x13dc>
   12710:	b	12040 <__assert_fail@plt+0x7ec>
   12714:	ldr	r2, [pc, #1304]	; 12c34 <__assert_fail@plt+0x13e0>
   12718:	b	12040 <__assert_fail@plt+0x7ec>
   1271c:	ldr	r2, [pc, #1300]	; 12c38 <__assert_fail@plt+0x13e4>
   12720:	b	12040 <__assert_fail@plt+0x7ec>
   12724:	ldr	r2, [pc, #496]	; 1291c <__assert_fail@plt+0x10c8>
   12728:	b	12040 <__assert_fail@plt+0x7ec>
   1272c:	ldr	r2, [pc, #1288]	; 12c3c <__assert_fail@plt+0x13e8>
   12730:	b	12040 <__assert_fail@plt+0x7ec>
   12734:	ldr	r2, [pc, #1284]	; 12c40 <__assert_fail@plt+0x13ec>
   12738:	b	12040 <__assert_fail@plt+0x7ec>
   1273c:	ldr	r2, [pc, #1280]	; 12c44 <__assert_fail@plt+0x13f0>
   12740:	b	12040 <__assert_fail@plt+0x7ec>
   12744:	ldr	r2, [pc, #1276]	; 12c48 <__assert_fail@plt+0x13f4>
   12748:	b	12040 <__assert_fail@plt+0x7ec>
   1274c:	ldr	r2, [pc, #1272]	; 12c4c <__assert_fail@plt+0x13f8>
   12750:	b	12040 <__assert_fail@plt+0x7ec>
   12754:	ldr	r2, [pc, #1268]	; 12c50 <__assert_fail@plt+0x13fc>
   12758:	b	12040 <__assert_fail@plt+0x7ec>
   1275c:	ldr	r2, [pc, #1264]	; 12c54 <__assert_fail@plt+0x1400>
   12760:	b	12040 <__assert_fail@plt+0x7ec>
   12764:	ldr	r2, [pc, #1260]	; 12c58 <__assert_fail@plt+0x1404>
   12768:	b	12040 <__assert_fail@plt+0x7ec>
   1276c:	ldr	r2, [pc, #1256]	; 12c5c <__assert_fail@plt+0x1408>
   12770:	b	12040 <__assert_fail@plt+0x7ec>
   12774:	ldr	r2, [pc, #1252]	; 12c60 <__assert_fail@plt+0x140c>
   12778:	b	12040 <__assert_fail@plt+0x7ec>
   1277c:	ldr	r2, [pc, #1248]	; 12c64 <__assert_fail@plt+0x1410>
   12780:	b	12040 <__assert_fail@plt+0x7ec>
   12784:	ldr	r2, [pc, #1244]	; 12c68 <__assert_fail@plt+0x1414>
   12788:	b	12040 <__assert_fail@plt+0x7ec>
   1278c:	ldr	r2, [pc, #1240]	; 12c6c <__assert_fail@plt+0x1418>
   12790:	b	12040 <__assert_fail@plt+0x7ec>
   12794:	ldr	r2, [pc, #1236]	; 12c70 <__assert_fail@plt+0x141c>
   12798:	b	12040 <__assert_fail@plt+0x7ec>
   1279c:	ldr	r2, [pc, #1232]	; 12c74 <__assert_fail@plt+0x1420>
   127a0:	b	12040 <__assert_fail@plt+0x7ec>
   127a4:	ldr	r2, [pc, #1228]	; 12c78 <__assert_fail@plt+0x1424>
   127a8:	b	12040 <__assert_fail@plt+0x7ec>
   127ac:	ldr	r2, [pc, #1224]	; 12c7c <__assert_fail@plt+0x1428>
   127b0:	b	12040 <__assert_fail@plt+0x7ec>
   127b4:	ldr	r2, [pc, #1220]	; 12c80 <__assert_fail@plt+0x142c>
   127b8:	b	12040 <__assert_fail@plt+0x7ec>
   127bc:	ldr	r2, [pc, #1216]	; 12c84 <__assert_fail@plt+0x1430>
   127c0:	b	12040 <__assert_fail@plt+0x7ec>
   127c4:	ldr	r2, [pc, #1212]	; 12c88 <__assert_fail@plt+0x1434>
   127c8:	b	12040 <__assert_fail@plt+0x7ec>
   127cc:	ldr	r2, [pc, #1208]	; 12c8c <__assert_fail@plt+0x1438>
   127d0:	b	12040 <__assert_fail@plt+0x7ec>
   127d4:	ldr	r2, [pc, #1204]	; 12c90 <__assert_fail@plt+0x143c>
   127d8:	b	12040 <__assert_fail@plt+0x7ec>
   127dc:	ldr	r2, [pc, #1200]	; 12c94 <__assert_fail@plt+0x1440>
   127e0:	b	12040 <__assert_fail@plt+0x7ec>
   127e4:	ldr	r2, [pc, #1196]	; 12c98 <__assert_fail@plt+0x1444>
   127e8:	b	12040 <__assert_fail@plt+0x7ec>
   127ec:	ldr	r2, [pc, #1192]	; 12c9c <__assert_fail@plt+0x1448>
   127f0:	b	12040 <__assert_fail@plt+0x7ec>
   127f4:	ldr	r2, [pc, #1188]	; 12ca0 <__assert_fail@plt+0x144c>
   127f8:	b	12040 <__assert_fail@plt+0x7ec>
   127fc:	ldr	r2, [pc, #1184]	; 12ca4 <__assert_fail@plt+0x1450>
   12800:	b	12040 <__assert_fail@plt+0x7ec>
   12804:	ldr	r2, [pc, #1180]	; 12ca8 <__assert_fail@plt+0x1454>
   12808:	b	12040 <__assert_fail@plt+0x7ec>
   1280c:	ldr	r2, [pc, #1176]	; 12cac <__assert_fail@plt+0x1458>
   12810:	b	12040 <__assert_fail@plt+0x7ec>
   12814:	ldr	r2, [pc, #1172]	; 12cb0 <__assert_fail@plt+0x145c>
   12818:	b	12040 <__assert_fail@plt+0x7ec>
   1281c:	ldr	r2, [pc, #1168]	; 12cb4 <__assert_fail@plt+0x1460>
   12820:	b	12040 <__assert_fail@plt+0x7ec>
   12824:	ldrd	r2, [r1, #8]
   12828:	mov	r1, r5
   1282c:	bl	11c50 <__assert_fail@plt+0x3fc>
   12830:	b	11d60 <__assert_fail@plt+0x50c>
   12834:	ldrd	r2, [r1, #16]
   12838:	mov	r1, r5
   1283c:	bl	11c50 <__assert_fail@plt+0x3fc>
   12840:	b	11d60 <__assert_fail@plt+0x50c>
   12844:	ldrd	r2, [r1, #24]
   12848:	mov	r1, r5
   1284c:	bl	11c50 <__assert_fail@plt+0x3fc>
   12850:	b	11d60 <__assert_fail@plt+0x50c>
   12854:	ldr	r2, [r1, #4]
   12858:	asr	r3, r2, #31
   1285c:	mov	r1, r5
   12860:	bl	11c14 <__assert_fail@plt+0x3c0>
   12864:	b	11d60 <__assert_fail@plt+0x50c>
   12868:	ldr	r2, [r1, #60]	; 0x3c
   1286c:	asr	r3, r2, #31
   12870:	orrs	r0, r2, r3
   12874:	ldreq	r2, [r1, #4]
   12878:	asreq	r3, r2, #31
   1287c:	mov	r1, r5
   12880:	mov	r0, r4
   12884:	bl	11c14 <__assert_fail@plt+0x3c0>
   12888:	b	11d60 <__assert_fail@plt+0x50c>
   1288c:	ldrd	r2, [r1, #32]
   12890:	mov	r1, r5
   12894:	bl	11c14 <__assert_fail@plt+0x3c0>
   12898:	b	11d60 <__assert_fail@plt+0x50c>
   1289c:	ldrd	r2, [r1, #40]	; 0x28
   128a0:	mov	r1, r5
   128a4:	bl	11c50 <__assert_fail@plt+0x3fc>
   128a8:	b	11d60 <__assert_fail@plt+0x50c>
   128ac:	ldr	r3, [pc, #1028]	; 12cb8 <__assert_fail@plt+0x1464>
   128b0:	ldr	r0, [r3]
   128b4:	ldr	r3, [r0, #20]
   128b8:	ldr	r2, [r0, #24]
   128bc:	cmp	r3, r2
   128c0:	addcc	r2, r3, #1
   128c4:	strcc	r2, [r0, #20]
   128c8:	movcc	r2, #63	; 0x3f
   128cc:	strbcc	r2, [r3]
   128d0:	bcc	11d60 <__assert_fail@plt+0x50c>
   128d4:	mov	r1, #63	; 0x3f
   128d8:	bl	11758 <__overflow@plt>
   128dc:	b	11d60 <__assert_fail@plt+0x50c>
   128e0:	msreq	SP_hyp, r7
   128e4:	movtpl	r4, #62283	; 0xf34b
   128e8:	ldrbvs	r5, [r3, #-1347]!	; 0xfffffabd
   128ec:	smcvs	13923	; 0x3663
   128f0:	rsbvs	r6, r5, #112, 10	; 0x1c000000
   128f4:	cmnvs	r7, #112, 4
   128f8:	strbtvs	r6, [r2], #-1824	; 0xfffff8e0
   128fc:	andeq	sp, r1, r8, asr r0
   12900:	strbtvs	r6, [r4], #-376	; 0xfffffe88
   12904:	andeq	sp, r1, r0, asr r0
   12908:	andeq	r4, r0, r6
   1290c:			; <UNDEFINED> instruction: 0xf995e849
   12910:	andeq	r1, r0, sp, ror r3
   12914:	andeq	r2, r0, r8, ror #8
   12918:	andeq	r3, r0, r4, lsr r4
   1291c:	andeq	sp, r1, r0, ror #2
   12920:	andeq	r4, r0, r4
   12924:	strdeq	pc, [r2], -r8
   12928:	andeq	sp, r1, ip, lsr #7
   1292c:	cdplt	14, 14, cr13, cr15, cr13, {5}
   12930:	strge	pc, [r1, #-3317]	; 0xfffff30b
   12934:			; <UNDEFINED> instruction: 0x9123683e
   12938:	strls	r5, [r4, #2294]	; 0x8f6
   1293c:	andeq	sp, r1, r8, lsr r1
   12940:	andeq	sp, r1, ip, ror r2
   12944:	blge	fee98f1c <optarg@@GLIBC_2.4+0xfee69d2c>
   12948:	blt	ff2fdc40 <optarg@@GLIBC_2.4+0xff2cea50>
   1294c:	andeq	sp, r1, r8, asr r3
   12950:	bge	ff5fd500 <optarg@@GLIBC_2.4+0xff5ce310>
   12954:	andeq	sp, r1, ip, lsr r2
   12958:	logle<illegal precision>z	f0, f4
   1295c:	ldmdbgt	lr!, {r3, r5, r6, r8, pc}^
   12960:	bgt	fffa51ac <optarg@@GLIBC_2.4+0xfff75fbc>
   12964:	ldrdeq	ip, [r1], -r4
   12968:			; <UNDEFINED> instruction: 0xc7571590
   1296c:	andeq	sp, r1, r4, asr #4
   12970:	vshr.s32	d18, d0, #11
   12974:			; <UNDEFINED> instruction: 0xf97cff8c
   12978:	andeq	sp, r1, ip, asr #5
   1297c:	rscs	lr, r5, r2, ror #3
   12980:	muleq	r1, ip, r0
   12984:			; <UNDEFINED> instruction: 0xff534d42
   12988:	andeq	sp, r1, ip, ror #4
   1298c:	andeq	sp, r1, r0, ror #5
   12990:	andeq	r1, r0, r3, ror r3
   12994:	andeq	sp, r1, r0, rrx
   12998:	andeq	r0, r0, r7, lsl #3
   1299c:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   129a0:	andeq	r1, r0, pc, lsl #7
   129a4:	ldrdeq	r1, [r0], -r1	; <UNPREDICTABLE>
   129a8:	andeq	sp, r1, r0, ror r0
   129ac:	andeq	r1, r0, pc, ror r3
   129b0:	muleq	r1, ip, r1
   129b4:	andeq	r2, r0, r8, ror r4
   129b8:	andeq	sp, r1, r4, asr #3
   129bc:	strdeq	sl, [r0], -r5
   129c0:	sbceq	pc, r0, lr, ror #31
   129c4:	tsteq	r6, r0, ror r9
   129c8:	msreq	SP_hyp, r4
   129cc:	msreq	SP_hyp, r5
   129d0:	andeq	sp, r1, r4, lsl r3
   129d4:	andeq	sp, r1, ip, lsl #6
   129d8:	andeq	r4, r0, r4, asr #26
   129dc:	andeq	r4, r0, fp, lsr #16
   129e0:	andeq	sp, r1, r0, lsr #2
   129e4:	andeq	r4, r0, r4, asr #4
   129e8:	andeq	sp, r1, r4, lsl r1
   129ec:	andeq	r5, r0, fp, ror r1
   129f0:	andeq	r5, r0, ip, asr #12
   129f4:	strdeq	sp, [r1], -r0
   129f8:	andeq	r4, r0, sl, asr sp
   129fc:	ldrdeq	sp, [r1], -r8
   12a00:	andeq	r9, r0, r0, ror #12
   12a04:	andeq	r7, r0, r5, ror r2
   12a08:	andeq	sp, r1, r0, ror r1
   12a0c:	andeq	r6, r0, r9, ror #18
   12a10:	strdeq	sp, [r1], -r8
   12a14:	andeq	r9, r0, r1, lsr #31
   12a18:	andeq	sp, r1, ip, lsr r3
   12a1c:	andeq	sp, r1, r8, asr r2
   12a20:	andeq	pc, r0, pc, asr r1	; <UNPREDICTABLE>
   12a24:	andeq	lr, r0, r1, asr pc
   12a28:	andeq	sp, r1, r0, asr #1
   12a2c:	strdeq	sl, [r0], -pc	; <UNPREDICTABLE>
   12a30:	andeq	ip, r1, r8, ror pc
   12a34:	eoreq	lr, r7, fp, ror #1
   12a38:	subeq	r4, r1, r3, asr sl
   12a3c:	andeq	sp, r1, r8, lsr #6
   12a40:	andeq	r1, r1, r4, asr r9
   12a44:	andeq	sp, r1, r8, lsr r3
   12a48:			; <UNDEFINED> instruction: 0x01021994
   12a4c:	andeq	sp, r1, r8, asr #6
   12a50:	sbceq	r6, r3, r0, lsl #8
   12a54:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   12a58:			; <UNDEFINED> instruction: 0x012fd16d
   12a5c:	andeq	sp, r1, r8, lsl #7
   12a60:	svccs	0x00c12fc1
   12a64:	ldrbmi	r4, [r8, #-1619]	; 0xfffff9ad
   12a68:	movtpl	r4, #21325	; 0x534d
   12a6c:	movtpl	r4, #24911	; 0x614f
   12a70:	movtpl	r4, #26694	; 0x6846
   12a74:	andeq	sp, r1, r0, ror r3
   12a78:	movtpl	r5, #25678	; 0x644e
   12a7c:	andeq	sp, r1, r4, lsl r2
   12a80:	strne	r3, [r1, #-838]	; 0xfffffcba
   12a84:	bleq	feb5a234 <optarg@@GLIBC_2.4+0xfeb2b044>
   12a88:	strbeq	r5, [r5, -r1, lsr #16]!
   12a8c:	stmdbeq	r4, {r2, r4, r5, r8, fp, ip}
   12a90:	andeq	ip, r1, r4, lsl #31
   12a94:	teqeq	r1, r8, lsr #3
   12a98:	andeq	sp, r1, ip, asr #2
   12a9c:	teqne	r0, r4, asr r8
   12aa0:	cmnne	r6, #-1744830463	; 0x98000001
   12aa4:	andeq	ip, r1, r4, lsr #31
   12aa8:	bleq	ff4159f0 <optarg@@GLIBC_2.4+0xff3e6800>
   12aac:	andeq	sp, r1, ip, lsl #3
   12ab0:			; <UNDEFINED> instruction: 0x2011bab0
   12ab4:	stmibne	r3, {r1, r2, r5, r8, r9}
   12ab8:	blne	feb915f8 <optarg@@GLIBC_2.4+0xfeb62408>
   12abc:	andeq	ip, r1, r4, asr #31
   12ac0:	stmibne	r0, {r1, r9}
   12ac4:	andeq	sp, r1, r0, ror #3
   12ac8:	stmiacs	sp, {r0, r2, r6, r8, sl, fp, ip, sp}^
   12acc:	blcs	feb5a27c <optarg@@GLIBC_2.4+0xfeb2b08c>
   12ad0:	andeq	sp, r1, r4, asr r1
   12ad4:	strcs	r1, [r5], #-2309	; 0xfffff6fb
   12ad8:	andeq	sp, r1, ip, lsr #6
   12adc:	movtmi	r5, #7507	; 0x1d53
   12ae0:	submi	r5, r6, #-1006632960	; 0xc4000000
   12ae4:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   12ae8:	cmpcc	r3, sl, asr #12
   12aec:	andeq	sp, r1, r8, ror r1
   12af0:	ldrmi	ip, [sp, #-3368]!	; 0xfffff2d8
   12af4:	strbmi	r4, [sp, #-1101]	; 0xfffffbb3
   12af8:	andeq	sp, r1, r8, rrx
   12afc:	strbmi	r4, [sp], #-322	; 0xfffffebe
   12b00:	andeq	sp, r1, r8, ror r0
   12b04:	subpl	r5, r9, r5, asr #32
   12b08:	rsbpl	r4, r5, #1884160	; 0x1cc000
   12b0c:	andeq	sp, r1, r8, lsl #5
   12b10:			; <UNDEFINED> instruction: 0x47504653
   12b14:	andeq	sp, r1, ip, lsl #2
   12b18:	movtpl	r3, #24909	; 0x614d
   12b1c:	muleq	r1, r4, r1
   12b20:	stmdapl	r6, {r1, r6, r8, r9, ip, lr}^
   12b24:			; <UNDEFINED> instruction: 0x565a4653
   12b28:	stmdapl	r9!, {r0, r3, r5, fp, ip, lr}
   12b2c:	andeq	sp, r1, r0, lsr #7
   12b30:	ldrpl	r0, [r9], #-256	; 0xffffff00
   12b34:	bpl	13e4488 <optarg@@GLIBC_2.4+0x13b5298>
   12b38:	stclpl	13, cr2, [sl, #980]	; 0x3d4
   12b3c:	andeq	sp, r1, r8, lsr #5
   12b40:	bpl	f2d308 <optarg@@GLIBC_2.4+0xefe118>
   12b44:	andeq	ip, r1, r0, ror #30
   12b48:	cmnvs	r5, r3, ror r6
   12b4c:			; <UNDEFINED> instruction: 0x0001cfbc
   12b50:	cmnvs	r5, ip, ror #14
   12b54:	andeq	sp, r1, r0, ror #4
   12b58:	rsbvs	r6, r5, #478150656	; 0x1c800000
   12b5c:	andeq	sp, r1, r4, lsl #6
   12b60:	cmnvc	r3, #120586240	; 0x7300000
   12b64:	strbtvc	r6, [r1], #-879	; 0xfffffc91
   12b68:	stmdavc	pc!, {r1, r2, r4, r6, r9, lr}^	; <UNPREDICTABLE>
   12b6c:	stmdbvc	ip, {r4, r5, r9, sl, ip, sp, lr}^
   12b70:	andeq	sp, r1, r0, lsr r2
   12b74:	ldclvc	6, cr6, [ip], #-460	; 0xfffffe34
   12b78:	andeq	sp, r1, r0, asr r2
   12b7c:	blvs	10644d0 <optarg@@GLIBC_2.4+0x10352e0>
   12b80:	ldrbvs	r6, [r9, -r9, ror #18]
   12b84:	ldmdavs	r9, {r1, r5, r8, ip}
   12b88:	andeq	sp, r1, r4, ror r2
   12b8c:	ldrbvs	r5, [r3, #-1350]!	; 0xfffffaba
   12b90:	andeq	sp, r1, r8, ror #1
   12b94:	cdpvs	3, 6, cr7, cr6, cr4, {3}
   12b98:	mrcvs	6, 3, r6, cr3, cr3, {3}
   12b9c:	andeq	sp, r1, ip, lsl #4
   12ba0:	stclvs	15, cr6, [pc], #-448	; 129e8 <__assert_fail@plt+0x1194>
   12ba4:	andeq	ip, r1, r8, asr #31
   12ba8:	cmnvc	r2, #-1879048185	; 0x90000007
   12bac:	andeq	sp, r1, r4, lsr #32
   12bb0:	cmnvc	r1, #104, 6	; 0xa0000001
   12bb4:	strdeq	sp, [r1], -r8
   12bb8:	ldrbtvc	r6, [r2], #-355	; 0xfffffe9d
   12bbc:	andeq	sp, r1, r4, lsr #6
   12bc0:	andeq	ip, r1, r8, ror #30
   12bc4:	andeq	ip, r1, r0, ror pc
   12bc8:	andeq	ip, r1, r0, lsl #31
   12bcc:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   12bd0:			; <UNDEFINED> instruction: 0x0001cfb4
   12bd4:	andeq	ip, r1, r8, ror #31
   12bd8:	strdeq	ip, [r1], -r0
   12bdc:	andeq	sp, r1, r4
   12be0:	andeq	sp, r1, r0, lsl r0
   12be4:	andeq	sp, r1, ip, lsl r0
   12be8:	andeq	sp, r1, ip, lsr #32
   12bec:	andeq	sp, r1, r0, lsr r0
   12bf0:	andeq	sp, r1, ip, lsr r0
   12bf4:	andeq	sp, r1, r4, asr #32
   12bf8:	andeq	sp, r1, r4, lsl #1
   12bfc:	muleq	r1, r0, r0
   12c00:	andeq	sp, r1, r4, lsr #1
   12c04:	andeq	sp, r1, ip, lsr #1
   12c08:	strheq	sp, [r1], -r4
   12c0c:	strheq	sp, [r1], -ip
   12c10:	andeq	sp, r1, ip, asr #1
   12c14:	ldrdeq	sp, [r1], -r4
   12c18:	ldrdeq	sp, [r1], -ip
   12c1c:	andeq	sp, r1, r0, ror #1
   12c20:	strdeq	sp, [r1], -r0
   12c24:	strdeq	sp, [r1], -r8
   12c28:	andeq	sp, r1, r0, lsl #2
   12c2c:	andeq	sp, r1, r8, lsl r1
   12c30:	andeq	sp, r1, r8, lsr #2
   12c34:	andeq	sp, r1, r0, lsr r1
   12c38:	andeq	sp, r1, r4, asr #2
   12c3c:	andeq	sp, r1, r8, ror #2
   12c40:	andeq	sp, r1, ip, ror r1
   12c44:	andeq	sp, r1, r4, lsl #3
   12c48:	andeq	sp, r1, r4, lsr #3
   12c4c:			; <UNDEFINED> instruction: 0x0001d1b8
   12c50:	andeq	sp, r1, r8, ror #3
   12c54:	strdeq	sp, [r1], -ip
   12c58:	andeq	sp, r1, r4, lsl #4
   12c5c:	andeq	sp, r1, ip, lsl r2
   12c60:	andeq	sp, r1, r8, lsr #4
   12c64:	andeq	sp, r1, r0, lsr #5
   12c68:	andeq	sp, r1, r4, lsl #5
   12c6c:	muleq	r1, r4, r2
   12c70:	muleq	r1, ip, r2
   12c74:			; <UNDEFINED> instruction: 0x0001d2b4
   12c78:	andeq	sp, r1, r0, asr #5
   12c7c:	ldrdeq	sp, [r1], -r4
   12c80:	ldrdeq	sp, [r1], -ip
   12c84:	andeq	sp, r1, r8, ror #5
   12c88:	strdeq	sp, [r1], -r0
   12c8c:	andeq	sp, r1, ip, lsl r3
   12c90:	andeq	sp, r1, r4, lsr r3
   12c94:	andeq	sp, r1, r0, asr r3
   12c98:	andeq	sp, r1, r0, ror #6
   12c9c:	andeq	sp, r1, r8, ror #6
   12ca0:	andeq	sp, r1, r8, ror r3
   12ca4:	andeq	sp, r1, r0, lsl #7
   12ca8:	strdeq	sp, [r1], -ip
   12cac:	andeq	sp, r1, ip, lsl #7
   12cb0:	muleq	r1, r4, r3
   12cb4:	muleq	r1, r8, r3
   12cb8:	andeq	pc, r2, ip, ror #3
   12cbc:	push	{r4, r5, r6, r7, lr}
   12cc0:	sub	sp, sp, #212	; 0xd4
   12cc4:	mov	r5, r0
   12cc8:	ldr	r3, [pc, #304]	; 12e00 <__assert_fail@plt+0x15ac>
   12ccc:	ldrb	r3, [r3, #21]
   12cd0:	cmp	r3, #0
   12cd4:	beq	12d08 <__assert_fail@plt+0x14b4>
   12cd8:	add	r2, sp, #104	; 0x68
   12cdc:	mov	r1, r5
   12ce0:	mov	r0, #3
   12ce4:	bl	11800 <__xstat64@plt>
   12ce8:	cmp	r0, #0
   12cec:	bne	12df0 <__assert_fail@plt+0x159c>
   12cf0:	ldr	r3, [pc, #264]	; 12e00 <__assert_fail@plt+0x15ac>
   12cf4:	ldr	r4, [r3, #24]
   12cf8:	cmp	r4, #0
   12cfc:	beq	12df8 <__assert_fail@plt+0x15a4>
   12d00:	mov	r6, #3
   12d04:	b	12d6c <__assert_fail@plt+0x1518>
   12d08:	mov	r0, #0
   12d0c:	bl	15e98 <__assert_fail@plt+0x4644>
   12d10:	ldr	r3, [pc, #232]	; 12e00 <__assert_fail@plt+0x15ac>
   12d14:	str	r0, [r3, #24]
   12d18:	cmp	r0, #0
   12d1c:	beq	12d30 <__assert_fail@plt+0x14dc>
   12d20:	mov	r2, #1
   12d24:	ldr	r3, [pc, #212]	; 12e00 <__assert_fail@plt+0x15ac>
   12d28:	strb	r2, [r3, #21]
   12d2c:	b	12cd8 <__assert_fail@plt+0x1484>
   12d30:	bl	116b0 <__errno_location@plt>
   12d34:	ldr	r4, [r0]
   12d38:	mov	r2, #5
   12d3c:	ldr	r1, [pc, #192]	; 12e04 <__assert_fail@plt+0x15b0>
   12d40:	mov	r0, #0
   12d44:	bl	114e8 <dcgettext@plt>
   12d48:	mov	r3, r0
   12d4c:	ldr	r2, [pc, #180]	; 12e08 <__assert_fail@plt+0x15b4>
   12d50:	mov	r1, r4
   12d54:	mov	r0, #0
   12d58:	bl	115a8 <error@plt>
   12d5c:	b	12d20 <__assert_fail@plt+0x14cc>
   12d60:	ldr	r4, [r4, #28]
   12d64:	cmp	r4, #0
   12d68:	beq	12de4 <__assert_fail@plt+0x1590>
   12d6c:	ldrb	r3, [r4, #24]
   12d70:	tst	r3, #1
   12d74:	beq	12d60 <__assert_fail@plt+0x150c>
   12d78:	ldr	r7, [r4]
   12d7c:	ldrb	r3, [r7]
   12d80:	cmp	r3, #47	; 0x2f
   12d84:	bne	12d60 <__assert_fail@plt+0x150c>
   12d88:	mov	r1, r5
   12d8c:	ldr	r0, [r4, #4]
   12d90:	bl	11464 <strcmp@plt>
   12d94:	cmp	r0, #0
   12d98:	bne	12d60 <__assert_fail@plt+0x150c>
   12d9c:	mov	r2, sp
   12da0:	mov	r1, r7
   12da4:	mov	r0, r6
   12da8:	bl	11800 <__xstat64@plt>
   12dac:	cmp	r0, #0
   12db0:	bne	12d60 <__assert_fail@plt+0x150c>
   12db4:	ldrd	r2, [sp, #96]	; 0x60
   12db8:	ldrd	r0, [sp, #200]	; 0xc8
   12dbc:	cmp	r1, r3
   12dc0:	cmpeq	r0, r2
   12dc4:	bne	12d60 <__assert_fail@plt+0x150c>
   12dc8:	ldrd	r2, [sp]
   12dcc:	ldrd	r0, [sp, #104]	; 0x68
   12dd0:	cmp	r1, r3
   12dd4:	cmpeq	r0, r2
   12dd8:	bne	12d60 <__assert_fail@plt+0x150c>
   12ddc:	ldr	r0, [r4]
   12de0:	b	12de8 <__assert_fail@plt+0x1594>
   12de4:	mov	r0, #0
   12de8:	add	sp, sp, #212	; 0xd4
   12dec:	pop	{r4, r5, r6, r7, pc}
   12df0:	mov	r0, #0
   12df4:	b	12de8 <__assert_fail@plt+0x1594>
   12df8:	mov	r0, #0
   12dfc:	b	12de8 <__assert_fail@plt+0x1594>
   12e00:	strdeq	pc, [r2], -r8
   12e04:			; <UNDEFINED> instruction: 0x0001d3bc
   12e08:	andeq	lr, r1, ip, ror r2
   12e0c:	push	{r4, lr}
   12e10:	sub	sp, sp, #88	; 0x58
   12e14:	add	r3, sp, #8
   12e18:	stm	r3, {r0, r1}
   12e1c:	ldr	r3, [pc, #160]	; 12ec4 <__assert_fail@plt+0x1670>
   12e20:	ldr	r3, [r3, #28]
   12e24:	cmp	r3, #0
   12e28:	beq	12e7c <__assert_fail@plt+0x1628>
   12e2c:	ldr	r4, [sp, #12]
   12e30:	add	r2, sp, #44	; 0x2c
   12e34:	add	r1, sp, #8
   12e38:	ldr	r3, [pc, #132]	; 12ec4 <__assert_fail@plt+0x1670>
   12e3c:	ldr	r0, [r3, #28]
   12e40:	bl	1a290 <__assert_fail@plt+0x8a3c>
   12e44:	cmp	r0, #0
   12e48:	beq	12e94 <__assert_fail@plt+0x1640>
   12e4c:	ldr	r0, [pc, #112]	; 12ec4 <__assert_fail@plt+0x1670>
   12e50:	str	r4, [sp, #4]
   12e54:	ldr	r3, [r0, #28]
   12e58:	str	r3, [sp]
   12e5c:	add	r3, sp, #44	; 0x2c
   12e60:	ldr	r2, [pc, #96]	; 12ec8 <__assert_fail@plt+0x1674>
   12e64:	mov	r1, #61	; 0x3d
   12e68:	add	r0, r0, #32
   12e6c:	bl	18240 <__assert_fail@plt+0x69ec>
   12e70:	ldr	r0, [pc, #84]	; 12ecc <__assert_fail@plt+0x1678>
   12e74:	add	sp, sp, #88	; 0x58
   12e78:	pop	{r4, pc}
   12e7c:	ldr	r0, [pc, #76]	; 12ed0 <__assert_fail@plt+0x167c>
   12e80:	bl	115cc <getenv@plt>
   12e84:	bl	19f70 <__assert_fail@plt+0x871c>
   12e88:	ldr	r3, [pc, #52]	; 12ec4 <__assert_fail@plt+0x1670>
   12e8c:	str	r0, [r3, #28]
   12e90:	b	12e2c <__assert_fail@plt+0x15d8>
   12e94:	add	r2, sp, #20
   12e98:	ldr	r0, [sp, #8]
   12e9c:	asr	r1, r0, #31
   12ea0:	bl	15cb0 <__assert_fail@plt+0x445c>
   12ea4:	str	r4, [sp, #4]
   12ea8:	str	r0, [sp]
   12eac:	ldr	r3, [pc, #32]	; 12ed4 <__assert_fail@plt+0x1680>
   12eb0:	mov	r2, #61	; 0x3d
   12eb4:	mov	r1, #1
   12eb8:	ldr	r0, [pc, #12]	; 12ecc <__assert_fail@plt+0x1678>
   12ebc:	bl	116bc <__sprintf_chk@plt>
   12ec0:	b	12e70 <__assert_fail@plt+0x161c>
   12ec4:	strdeq	pc, [r2], -r8
   12ec8:	andeq	sp, r1, ip, ror #7
   12ecc:	andeq	pc, r2, r8, lsl r2	; <UNPREDICTABLE>
   12ed0:	andeq	sp, r1, r8, ror #7
   12ed4:	andeq	sp, r1, r4, lsl #8
   12ed8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12edc:	sub	sp, sp, #28
   12ee0:	mov	r6, r0
   12ee4:	mov	r5, r1
   12ee8:	add	r1, sp, #24
   12eec:	stmdb	r1, {r2, r3}
   12ef0:	ldr	r7, [sp, #16]
   12ef4:	ldr	r8, [sp, #20]
   12ef8:	mov	r2, r5
   12efc:	mov	r1, #46	; 0x2e
   12f00:	bl	11710 <memchr@plt>
   12f04:	subs	r4, r0, #0
   12f08:	beq	131a0 <__assert_fail@plt+0x194c>
   12f0c:	sub	sl, r4, r6
   12f10:	mov	r3, #0
   12f14:	strb	r3, [r6, r5]
   12f18:	ldrb	r3, [r4, #1]
   12f1c:	sub	r3, r3, #48	; 0x30
   12f20:	cmp	r3, #9
   12f24:	bls	13124 <__assert_fail@plt+0x18d0>
   12f28:	ldrb	r3, [r4, #-1]
   12f2c:	sub	r3, r3, #48	; 0x30
   12f30:	cmp	r3, #9
   12f34:	movhi	r5, #9
   12f38:	movhi	r9, #0
   12f3c:	movhi	r4, #1
   12f40:	bhi	13034 <__assert_fail@plt+0x17e0>
   12f44:	mov	r5, #9
   12f48:	mov	r2, r4
   12f4c:	mov	r3, #0
   12f50:	strb	r3, [r2], #-1
   12f54:	mov	r4, r2
   12f58:	ldrb	r3, [r2, #-1]!
   12f5c:	sub	r3, r3, #48	; 0x30
   12f60:	cmp	r3, #9
   12f64:	bls	12f54 <__assert_fail@plt+0x1700>
   12f68:	mov	r2, #10
   12f6c:	mov	r1, #0
   12f70:	mov	r0, r4
   12f74:	bl	11470 <strtol@plt>
   12f78:	mov	r9, r0
   12f7c:	cmp	r0, #1
   12f80:	ble	1300c <__assert_fail@plt+0x17b8>
   12f84:	ldrb	r3, [r4]
   12f88:	cmp	r3, #48	; 0x30
   12f8c:	movne	r3, r4
   12f90:	addeq	r3, r4, #1
   12f94:	sub	sl, r3, r6
   12f98:	ldr	r2, [pc, #520]	; 131a8 <__assert_fail@plt+0x1954>
   12f9c:	ldr	r2, [r2, #96]	; 0x60
   12fa0:	cmp	r2, r0
   12fa4:	bcs	1300c <__assert_fail@plt+0x17b8>
   12fa8:	sub	r2, r0, r2
   12fac:	cmp	r2, #1
   12fb0:	ble	1300c <__assert_fail@plt+0x17b8>
   12fb4:	sub	ip, r2, r5
   12fb8:	cmp	ip, #1
   12fbc:	ble	1300c <__assert_fail@plt+0x17b8>
   12fc0:	cmp	r6, r3
   12fc4:	bcs	13168 <__assert_fail@plt+0x1914>
   12fc8:	sub	r2, r6, #1
   12fcc:	sub	r3, r3, #1
   12fd0:	mov	r0, r6
   12fd4:	mov	lr, #0
   12fd8:	mov	r4, #1
   12fdc:	ldrb	r1, [r2, #1]!
   12fe0:	cmp	r1, #45	; 0x2d
   12fe4:	strbne	r1, [r0]
   12fe8:	addne	r0, r0, #1
   12fec:	moveq	lr, r4
   12ff0:	cmp	r3, r2
   12ff4:	bne	12fdc <__assert_fail@plt+0x1788>
   12ff8:	sub	sl, r0, r6
   12ffc:	cmp	lr, #0
   13000:	movne	r0, #0
   13004:	beq	13170 <__assert_fail@plt+0x191c>
   13008:	add	sl, r0, sl
   1300c:	cmp	r5, #8
   13010:	movgt	r4, #1
   13014:	bgt	13034 <__assert_fail@plt+0x17e0>
   13018:	mov	r3, r5
   1301c:	mov	r4, #1
   13020:	add	r4, r4, r4, lsl #2
   13024:	lsl	r4, r4, #1
   13028:	add	r3, r3, #1
   1302c:	cmp	r3, #8
   13030:	ble	13020 <__assert_fail@plt+0x17cc>
   13034:	mov	r1, r4
   13038:	mov	r0, r8
   1303c:	bl	1c710 <__assert_fail@plt+0xaebc>
   13040:	mov	fp, r0
   13044:	adds	r3, r8, #0
   13048:	movne	r3, #1
   1304c:	ands	r3, r3, r7, lsr #31
   13050:	beq	13188 <__assert_fail@plt+0x1934>
   13054:	mov	r1, r4
   13058:	ldr	r0, [pc, #332]	; 131ac <__assert_fail@plt+0x1958>
   1305c:	bl	1c710 <__assert_fail@plt+0xaebc>
   13060:	sub	fp, r0, fp
   13064:	mov	r1, r4
   13068:	mov	r0, r8
   1306c:	bl	1c930 <__assert_fail@plt+0xb0dc>
   13070:	cmp	r1, #0
   13074:	subne	fp, fp, #1
   13078:	cmp	fp, #0
   1307c:	addne	r7, r7, #1
   13080:	cmp	r7, #0
   13084:	bne	13188 <__assert_fail@plt+0x1934>
   13088:	ldr	r3, [pc, #288]	; 131b0 <__assert_fail@plt+0x195c>
   1308c:	ldr	r2, [pc, #288]	; 131b4 <__assert_fail@plt+0x1960>
   13090:	mov	r1, sl
   13094:	mov	r0, r6
   13098:	bl	11b04 <__assert_fail@plt+0x2b0>
   1309c:	mov	r2, #0
   130a0:	ldr	r3, [pc, #272]	; 131b8 <__assert_fail@plt+0x1964>
   130a4:	mov	r1, r6
   130a8:	mov	r0, #1
   130ac:	bl	116ec <__printf_chk@plt>
   130b0:	cmp	r5, #0
   130b4:	beq	1311c <__assert_fail@plt+0x18c8>
   130b8:	cmp	r5, #9
   130bc:	movlt	r3, r5
   130c0:	movge	r3, #9
   130c4:	sub	r5, r5, r3
   130c8:	bic	r0, r0, r0, asr #31
   130cc:	cmp	r0, r9
   130d0:	movge	r1, #0
   130d4:	bge	130f4 <__assert_fail@plt+0x18a0>
   130d8:	sub	r0, r9, r0
   130dc:	ldr	r2, [pc, #196]	; 131a8 <__assert_fail@plt+0x1954>
   130e0:	ldr	r1, [r2, #96]	; 0x60
   130e4:	cmp	r0, r1
   130e8:	subhi	r0, r0, r1
   130ec:	subhi	r1, r0, r3
   130f0:	movls	r1, #0
   130f4:	ldr	r2, [pc, #172]	; 131a8 <__assert_fail@plt+0x1954>
   130f8:	ldr	r2, [r2, #100]	; 0x64
   130fc:	mov	r0, #0
   13100:	str	r0, [sp, #12]
   13104:	str	r5, [sp, #8]
   13108:	str	r1, [sp, #4]
   1310c:	str	fp, [sp]
   13110:	ldr	r1, [pc, #164]	; 131bc <__assert_fail@plt+0x1968>
   13114:	mov	r0, #1
   13118:	bl	116ec <__printf_chk@plt>
   1311c:	add	sp, sp, #28
   13120:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13124:	mov	r2, #10
   13128:	mov	r1, #0
   1312c:	add	r0, r4, #1
   13130:	bl	11470 <strtol@plt>
   13134:	cmp	r0, #0
   13138:	bne	13148 <__assert_fail@plt+0x18f4>
   1313c:	mov	r5, #0
   13140:	mov	r9, r5
   13144:	b	13018 <__assert_fail@plt+0x17c4>
   13148:	ldrb	r3, [r4, #-1]
   1314c:	sub	r3, r3, #48	; 0x30
   13150:	cmp	r3, #9
   13154:	movls	r5, r0
   13158:	bls	12f48 <__assert_fail@plt+0x16f4>
   1315c:	mov	r5, r0
   13160:	mov	r9, #0
   13164:	b	1300c <__assert_fail@plt+0x17b8>
   13168:	mov	r0, r6
   1316c:	mov	sl, #0
   13170:	str	ip, [sp]
   13174:	ldr	r3, [pc, #68]	; 131c0 <__assert_fail@plt+0x196c>
   13178:	mvn	r2, #0
   1317c:	mov	r1, #1
   13180:	bl	116bc <__sprintf_chk@plt>
   13184:	b	13008 <__assert_fail@plt+0x17b4>
   13188:	mov	r2, r7
   1318c:	asr	r3, r7, #31
   13190:	mov	r1, sl
   13194:	mov	r0, r6
   13198:	bl	11c50 <__assert_fail@plt+0x3fc>
   1319c:	b	130b0 <__assert_fail@plt+0x185c>
   131a0:	mov	sl, r5
   131a4:	b	1313c <__assert_fail@plt+0x18e8>
   131a8:	strdeq	pc, [r2], -r8
   131ac:	blcc	fe6c59b4 <optarg@@GLIBC_2.4+0xfe6967c4>
   131b0:	andeq	sp, r1, r0, lsl r4
   131b4:	andeq	ip, r1, r8, asr pc
   131b8:	svclt	0x00d00000
   131bc:	andeq	sp, r1, r4, lsl r4
   131c0:	andeq	sp, r1, ip, lsl #8
   131c4:	push	{r4, r5, r6, r7, r8, r9, lr}
   131c8:	sub	sp, sp, #76	; 0x4c
   131cc:	mov	r6, r0
   131d0:	mov	r7, r1
   131d4:	ldr	ip, [sp, #112]	; 0x70
   131d8:	mov	r1, ip
   131dc:	ldr	r5, [r1], #4
   131e0:	add	lr, sp, #8
   131e4:	ldm	r1, {r0, r1}
   131e8:	stm	lr, {r0, r1}
   131ec:	ldr	r1, [ip, #8]
   131f0:	sub	r3, r3, #65	; 0x41
   131f4:	cmp	r3, #57	; 0x39
   131f8:	ldrls	pc, [pc, r3, lsl #2]
   131fc:	b	13a7c <__assert_fail@plt+0x2228>
   13200:	andeq	r3, r1, r8, asr #9
   13204:	andeq	r3, r1, r4, ror #15
   13208:			; <UNDEFINED> instruction: 0x000139bc
   1320c:	andeq	r3, r1, ip, asr r4
   13210:	andeq	r3, r1, ip, ror sl
   13214:	andeq	r3, r1, r4, lsl r5
   13218:			; <UNDEFINED> instruction: 0x000135b0
   1321c:	andeq	r3, r1, ip, ror sl
   13220:	andeq	r3, r1, ip, ror sl
   13224:	andeq	r3, r1, ip, ror sl
   13228:	andeq	r3, r1, ip, ror sl
   1322c:	andeq	r3, r1, ip, ror sl
   13230:	andeq	r3, r1, ip, ror sl
   13234:	andeq	r3, r1, r8, lsl #6
   13238:	andeq	r3, r1, ip, ror sl
   1323c:	andeq	r3, r1, ip, ror sl
   13240:	andeq	r3, r1, ip, ror sl
   13244:	andeq	r3, r1, r8, ror #14
   13248:	andeq	r3, r1, ip, ror sl
   1324c:			; <UNDEFINED> instruction: 0x000137b0
   13250:	andeq	r3, r1, ip, ror #10
   13254:	andeq	r3, r1, ip, ror sl
   13258:	andeq	r3, r1, ip, lsl #17
   1325c:	andeq	r3, r1, ip, ror #17
   13260:	andeq	r3, r1, r0, asr #18
   13264:	muleq	r1, r4, r9
   13268:	andeq	r3, r1, ip, ror sl
   1326c:	andeq	r3, r1, ip, ror sl
   13270:	andeq	r3, r1, ip, ror sl
   13274:	andeq	r3, r1, ip, ror sl
   13278:	andeq	r3, r1, ip, ror sl
   1327c:	andeq	r3, r1, ip, ror sl
   13280:	andeq	r3, r1, ip, lsl #9
   13284:	andeq	r3, r1, r0, lsl #16
   13288:	andeq	r3, r1, ip, ror sl
   1328c:	ldrdeq	r3, [r1], -r0
   13290:	andeq	r3, r1, ip, ror sl
   13294:	strdeq	r3, [r1], -r8
   13298:	muleq	r1, r4, r5
   1329c:	andeq	r3, r1, r4, lsr r5
   132a0:	andeq	r3, r1, r4, ror r4
   132a4:	andeq	r3, r1, ip, ror sl
   132a8:	andeq	r3, r1, ip, ror sl
   132ac:	andeq	r3, r1, ip, ror sl
   132b0:	ldrdeq	r3, [r1], -r8
   132b4:	andeq	r3, r1, r8, ror #5
   132b8:	andeq	r3, r1, r8, lsl r8
   132bc:	andeq	r3, r1, ip, ror sl
   132c0:	andeq	r3, r1, ip, ror sl
   132c4:	ldrdeq	r3, [r1], -ip
   132c8:	andeq	r3, r1, r4, asr #13
   132cc:	andeq	r3, r1, r0, lsl #15
   132d0:	andeq	r3, r1, r0, asr r5
   132d4:	andeq	r3, r1, ip, ror sl
   132d8:	andeq	r3, r1, r0, asr #16
   132dc:	andeq	r3, r1, r0, asr #17
   132e0:	andeq	r3, r1, r4, lsl r9
   132e4:	andeq	r3, r1, r8, ror #18
   132e8:	ldr	r2, [sp, #108]	; 0x6c
   132ec:	mov	r1, r7
   132f0:	mov	r0, r6
   132f4:	bl	11be0 <__assert_fail@plt+0x38c>
   132f8:	mov	r4, #0
   132fc:	mov	r0, r4
   13300:	add	sp, sp, #76	; 0x4c
   13304:	pop	{r4, r5, r6, r7, r8, r9, pc}
   13308:	mov	r0, #0
   1330c:	bl	19810 <__assert_fail@plt+0x7fbc>
   13310:	ldr	r1, [sp, #108]	; 0x6c
   13314:	bl	19ba0 <__assert_fail@plt+0x834c>
   13318:	mov	r2, r0
   1331c:	mov	r1, r7
   13320:	mov	r0, r6
   13324:	bl	11be0 <__assert_fail@plt+0x38c>
   13328:	ldr	r3, [r5, #16]
   1332c:	and	r3, r3, #61440	; 0xf000
   13330:	cmp	r3, #40960	; 0xa000
   13334:	movne	r4, #0
   13338:	bne	132fc <__assert_fail@plt+0x1aa8>
   1333c:	ldr	r1, [r5, #48]	; 0x30
   13340:	ldr	r0, [sp, #108]	; 0x6c
   13344:	bl	15314 <__assert_fail@plt+0x3ac0>
   13348:	subs	r4, r0, #0
   1334c:	beq	1338c <__assert_fail@plt+0x1b38>
   13350:	ldr	r1, [pc, #1892]	; 13abc <__assert_fail@plt+0x2268>
   13354:	mov	r0, #1
   13358:	bl	116ec <__printf_chk@plt>
   1335c:	mov	r0, #0
   13360:	bl	19810 <__assert_fail@plt+0x7fbc>
   13364:	mov	r1, r4
   13368:	bl	19ba0 <__assert_fail@plt+0x834c>
   1336c:	mov	r2, r0
   13370:	mov	r1, r7
   13374:	mov	r0, r6
   13378:	bl	11be0 <__assert_fail@plt+0x38c>
   1337c:	mov	r0, r4
   13380:	bl	15c58 <__assert_fail@plt+0x4404>
   13384:	mov	r4, #0
   13388:	b	132fc <__assert_fail@plt+0x1aa8>
   1338c:	bl	116b0 <__errno_location@plt>
   13390:	ldr	r4, [r0]
   13394:	mov	r2, #5
   13398:	ldr	r1, [pc, #1824]	; 13ac0 <__assert_fail@plt+0x226c>
   1339c:	mov	r0, #0
   133a0:	bl	114e8 <dcgettext@plt>
   133a4:	mov	r5, r0
   133a8:	ldr	r1, [sp, #108]	; 0x6c
   133ac:	mov	r0, #4
   133b0:	bl	19ba0 <__assert_fail@plt+0x834c>
   133b4:	mov	r3, r0
   133b8:	mov	r2, r5
   133bc:	mov	r1, r4
   133c0:	mov	r0, #0
   133c4:	bl	115a8 <error@plt>
   133c8:	mov	r4, #1
   133cc:	b	132fc <__assert_fail@plt+0x1aa8>
   133d0:	cmp	r2, #72	; 0x48
   133d4:	beq	133f8 <__assert_fail@plt+0x1ba4>
   133d8:	cmp	r2, #76	; 0x4c
   133dc:	beq	13428 <__assert_fail@plt+0x1bd4>
   133e0:	ldrd	r2, [r5]
   133e4:	mov	r1, r7
   133e8:	mov	r0, r6
   133ec:	bl	11c14 <__assert_fail@plt+0x3c0>
   133f0:	mov	r4, #0
   133f4:	b	132fc <__assert_fail@plt+0x1aa8>
   133f8:	ldr	r2, [r5]
   133fc:	ldr	r3, [r5, #4]
   13400:	lsl	r2, r2, #12
   13404:	bic	r3, r3, #4080	; 0xff0
   13408:	bic	r3, r3, #15
   1340c:	mov	r4, #0
   13410:	orr	r2, r3, r2, lsr #20
   13414:	mov	r3, r4
   13418:	mov	r1, r7
   1341c:	mov	r0, r6
   13420:	bl	11c14 <__assert_fail@plt+0x3c0>
   13424:	b	132fc <__assert_fail@plt+0x1aa8>
   13428:	ldr	r3, [r5]
   1342c:	ldr	r1, [r5, #4]
   13430:	uxtb	r2, r3
   13434:	lsr	r3, r3, #12
   13438:	orr	r3, r3, r1, lsl #20
   1343c:	bic	r3, r3, #255	; 0xff
   13440:	mov	r4, #0
   13444:	orr	r2, r3, r2
   13448:	mov	r3, r4
   1344c:	mov	r1, r7
   13450:	mov	r0, r6
   13454:	bl	11c14 <__assert_fail@plt+0x3c0>
   13458:	b	132fc <__assert_fail@plt+0x1aa8>
   1345c:	ldrd	r2, [r5]
   13460:	mov	r1, r7
   13464:	mov	r0, r6
   13468:	bl	11ba4 <__assert_fail@plt+0x350>
   1346c:	mov	r4, #0
   13470:	b	132fc <__assert_fail@plt+0x1aa8>
   13474:	ldrd	r2, [r5, #96]	; 0x60
   13478:	mov	r1, r7
   1347c:	mov	r0, r6
   13480:	bl	11c14 <__assert_fail@plt+0x3c0>
   13484:	mov	r4, #0
   13488:	b	132fc <__assert_fail@plt+0x1aa8>
   1348c:	ldr	r5, [r5, #16]
   13490:	lsl	r5, r5, #20
   13494:	lsr	r5, r5, #20
   13498:	mov	r4, #0
   1349c:	ldr	r3, [pc, #1568]	; 13ac4 <__assert_fail@plt+0x2270>
   134a0:	ldr	r2, [pc, #1568]	; 13ac8 <__assert_fail@plt+0x2274>
   134a4:	mov	r1, r7
   134a8:	mov	r0, r6
   134ac:	bl	11b04 <__assert_fail@plt+0x2b0>
   134b0:	mov	r2, r5
   134b4:	mov	r3, r4
   134b8:	mov	r1, r6
   134bc:	mov	r0, #1
   134c0:	bl	116ec <__printf_chk@plt>
   134c4:	b	132fc <__assert_fail@plt+0x1aa8>
   134c8:	ldr	r9, [pc, #1532]	; 13acc <__assert_fail@plt+0x2278>
   134cc:	add	r8, r9, #104	; 0x68
   134d0:	mov	r1, r8
   134d4:	mov	r0, r5
   134d8:	bl	15c48 <__assert_fail@plt+0x43f4>
   134dc:	mov	r4, #0
   134e0:	strb	r4, [r9, #114]	; 0x72
   134e4:	mov	r2, r8
   134e8:	mov	r1, r7
   134ec:	mov	r0, r6
   134f0:	bl	11be0 <__assert_fail@plt+0x38c>
   134f4:	b	132fc <__assert_fail@plt+0x1aa8>
   134f8:	mov	r4, #0
   134fc:	ldr	r2, [r5, #16]
   13500:	mov	r3, r4
   13504:	mov	r1, r7
   13508:	mov	r0, r6
   1350c:	bl	11ba4 <__assert_fail@plt+0x350>
   13510:	b	132fc <__assert_fail@plt+0x1aa8>
   13514:	mov	r0, r5
   13518:	bl	159d0 <__assert_fail@plt+0x417c>
   1351c:	mov	r2, r0
   13520:	mov	r1, r7
   13524:	mov	r0, r6
   13528:	bl	11be0 <__assert_fail@plt+0x38c>
   1352c:	mov	r4, #0
   13530:	b	132fc <__assert_fail@plt+0x1aa8>
   13534:	mov	r4, #0
   13538:	ldr	r2, [r5, #20]
   1353c:	mov	r3, r4
   13540:	mov	r1, r7
   13544:	mov	r0, r6
   13548:	bl	11c14 <__assert_fail@plt+0x3c0>
   1354c:	b	132fc <__assert_fail@plt+0x1aa8>
   13550:	mov	r4, #0
   13554:	ldr	r2, [r5, #24]
   13558:	mov	r3, r4
   1355c:	mov	r1, r7
   13560:	mov	r0, r6
   13564:	bl	11c14 <__assert_fail@plt+0x3c0>
   13568:	b	132fc <__assert_fail@plt+0x1aa8>
   1356c:	ldr	r0, [r5, #24]
   13570:	bl	1147c <getpwuid@plt>
   13574:	cmp	r0, #0
   13578:	ldrne	r2, [r0]
   1357c:	ldreq	r2, [pc, #1356]	; 13ad0 <__assert_fail@plt+0x227c>
   13580:	mov	r1, r7
   13584:	mov	r0, r6
   13588:	bl	11be0 <__assert_fail@plt+0x38c>
   1358c:	mov	r4, #0
   13590:	b	132fc <__assert_fail@plt+0x1aa8>
   13594:	mov	r4, #0
   13598:	ldr	r2, [r5, #28]
   1359c:	mov	r3, r4
   135a0:	mov	r1, r7
   135a4:	mov	r0, r6
   135a8:	bl	11c14 <__assert_fail@plt+0x3c0>
   135ac:	b	132fc <__assert_fail@plt+0x1aa8>
   135b0:	ldr	r0, [r5, #28]
   135b4:	bl	1183c <getgrgid@plt>
   135b8:	cmp	r0, #0
   135bc:	ldrne	r2, [r0]
   135c0:	ldreq	r2, [pc, #1288]	; 13ad0 <__assert_fail@plt+0x227c>
   135c4:	mov	r1, r7
   135c8:	mov	r0, r6
   135cc:	bl	11be0 <__assert_fail@plt+0x38c>
   135d0:	mov	r4, #0
   135d4:	b	132fc <__assert_fail@plt+0x1aa8>
   135d8:	ldr	r3, [pc, #1260]	; 13acc <__assert_fail@plt+0x2278>
   135dc:	ldrb	r3, [r3, #116]	; 0x74
   135e0:	cmp	r3, #0
   135e4:	bne	135f8 <__assert_fail@plt+0x1da4>
   135e8:	ldr	r3, [r5, #16]
   135ec:	and	r3, r3, #61440	; 0xf000
   135f0:	cmp	r3, #40960	; 0xa000
   135f4:	beq	13694 <__assert_fail@plt+0x1e40>
   135f8:	ldr	r0, [sp, #108]	; 0x6c
   135fc:	bl	117c4 <canonicalize_file_name@plt>
   13600:	subs	r4, r0, #0
   13604:	beq	13648 <__assert_fail@plt+0x1df4>
   13608:	mov	r0, r4
   1360c:	bl	12cbc <__assert_fail@plt+0x1468>
   13610:	mov	r8, r0
   13614:	mov	r0, r4
   13618:	bl	15c58 <__assert_fail@plt+0x4404>
   1361c:	cmp	r8, #0
   13620:	movne	r4, #0
   13624:	movne	r5, r4
   13628:	beq	13694 <__assert_fail@plt+0x1e40>
   1362c:	mov	r2, r8
   13630:	mov	r1, r7
   13634:	mov	r0, r6
   13638:	bl	11be0 <__assert_fail@plt+0x38c>
   1363c:	mov	r0, r5
   13640:	bl	15c58 <__assert_fail@plt+0x4404>
   13644:	b	132fc <__assert_fail@plt+0x1aa8>
   13648:	bl	116b0 <__errno_location@plt>
   1364c:	ldr	r4, [r0]
   13650:	mov	r2, #5
   13654:	ldr	r1, [pc, #1144]	; 13ad4 <__assert_fail@plt+0x2280>
   13658:	mov	r0, #0
   1365c:	bl	114e8 <dcgettext@plt>
   13660:	mov	r5, r0
   13664:	ldr	r1, [sp, #108]	; 0x6c
   13668:	mov	r0, #4
   1366c:	bl	19ba0 <__assert_fail@plt+0x834c>
   13670:	mov	r3, r0
   13674:	mov	r2, r5
   13678:	mov	r1, r4
   1367c:	mov	r0, #0
   13680:	bl	115a8 <error@plt>
   13684:	mov	r4, #1
   13688:	mov	r5, #0
   1368c:	ldr	r8, [pc, #1092]	; 13ad8 <__assert_fail@plt+0x2284>
   13690:	b	1362c <__assert_fail@plt+0x1dd8>
   13694:	mov	r1, r5
   13698:	ldr	r0, [sp, #108]	; 0x6c
   1369c:	bl	14ff4 <__assert_fail@plt+0x37a0>
   136a0:	subs	r5, r0, #0
   136a4:	beq	13684 <__assert_fail@plt+0x1e30>
   136a8:	mov	r0, r5
   136ac:	bl	12cbc <__assert_fail@plt+0x1468>
   136b0:	subs	r8, r0, #0
   136b4:	moveq	r4, #0
   136b8:	movne	r4, #0
   136bc:	moveq	r8, r5
   136c0:	b	1362c <__assert_fail@plt+0x1dd8>
   136c4:	ldrd	r2, [r5, #48]	; 0x30
   136c8:	mov	r1, r7
   136cc:	mov	r0, r6
   136d0:	bl	11c50 <__assert_fail@plt+0x3fc>
   136d4:	mov	r4, #0
   136d8:	b	132fc <__assert_fail@plt+0x1aa8>
   136dc:	cmp	r2, #72	; 0x48
   136e0:	beq	13704 <__assert_fail@plt+0x1eb0>
   136e4:	cmp	r2, #76	; 0x4c
   136e8:	beq	13734 <__assert_fail@plt+0x1ee0>
   136ec:	ldrd	r2, [r5, #32]
   136f0:	mov	r1, r7
   136f4:	mov	r0, r6
   136f8:	bl	11c14 <__assert_fail@plt+0x3c0>
   136fc:	mov	r4, #0
   13700:	b	132fc <__assert_fail@plt+0x1aa8>
   13704:	ldr	r2, [r5, #32]
   13708:	ldr	r3, [r5, #36]	; 0x24
   1370c:	lsl	r2, r2, #12
   13710:	bic	r3, r3, #4080	; 0xff0
   13714:	bic	r3, r3, #15
   13718:	mov	r4, #0
   1371c:	orr	r2, r3, r2, lsr #20
   13720:	mov	r3, r4
   13724:	mov	r1, r7
   13728:	mov	r0, r6
   1372c:	bl	11c14 <__assert_fail@plt+0x3c0>
   13730:	b	132fc <__assert_fail@plt+0x1aa8>
   13734:	ldr	r3, [r5, #32]
   13738:	ldr	r1, [r5, #36]	; 0x24
   1373c:	uxtb	r2, r3
   13740:	lsr	r3, r3, #12
   13744:	orr	r3, r3, r1, lsl #20
   13748:	bic	r3, r3, #255	; 0xff
   1374c:	mov	r4, #0
   13750:	orr	r2, r3, r2
   13754:	mov	r3, r4
   13758:	mov	r1, r7
   1375c:	mov	r0, r6
   13760:	bl	11c14 <__assert_fail@plt+0x3c0>
   13764:	b	132fc <__assert_fail@plt+0x1aa8>
   13768:	ldrd	r2, [r5, #32]
   1376c:	mov	r1, r7
   13770:	mov	r0, r6
   13774:	bl	11ba4 <__assert_fail@plt+0x350>
   13778:	mov	r4, #0
   1377c:	b	132fc <__assert_fail@plt+0x1aa8>
   13780:	ldr	r2, [r5, #32]
   13784:	ldr	r3, [r5, #36]	; 0x24
   13788:	lsl	r2, r2, #12
   1378c:	bic	r3, r3, #4080	; 0xff0
   13790:	bic	r3, r3, #15
   13794:	mov	r4, #0
   13798:	orr	r2, r3, r2, lsr #20
   1379c:	mov	r3, r4
   137a0:	mov	r1, r7
   137a4:	mov	r0, r6
   137a8:	bl	11ba4 <__assert_fail@plt+0x350>
   137ac:	b	132fc <__assert_fail@plt+0x1aa8>
   137b0:	ldr	r3, [r5, #32]
   137b4:	ldr	r1, [r5, #36]	; 0x24
   137b8:	uxtb	r2, r3
   137bc:	lsr	r3, r3, #12
   137c0:	orr	r3, r3, r1, lsl #20
   137c4:	bic	r3, r3, #255	; 0xff
   137c8:	mov	r4, #0
   137cc:	orr	r2, r3, r2
   137d0:	mov	r3, r4
   137d4:	mov	r1, r7
   137d8:	mov	r0, r6
   137dc:	bl	11ba4 <__assert_fail@plt+0x350>
   137e0:	b	132fc <__assert_fail@plt+0x1aa8>
   137e4:	mov	r2, #512	; 0x200
   137e8:	mov	r3, #0
   137ec:	mov	r1, r7
   137f0:	mov	r0, r6
   137f4:	bl	11c14 <__assert_fail@plt+0x3c0>
   137f8:	mov	r4, #0
   137fc:	b	132fc <__assert_fail@plt+0x1aa8>
   13800:	ldrd	r2, [r5, #64]	; 0x40
   13804:	mov	r1, r7
   13808:	mov	r0, r6
   1380c:	bl	11c14 <__assert_fail@plt+0x3c0>
   13810:	mov	r4, #0
   13814:	b	132fc <__assert_fail@plt+0x1aa8>
   13818:	ldr	r2, [r5, #56]	; 0x38
   1381c:	sub	r3, r2, #1
   13820:	cmn	r3, #-536870911	; 0xe0000001
   13824:	movhi	r2, #512	; 0x200
   13828:	asr	r3, r2, #31
   1382c:	mov	r1, r7
   13830:	mov	r0, r6
   13834:	bl	11c14 <__assert_fail@plt+0x3c0>
   13838:	mov	r4, #0
   1383c:	b	132fc <__assert_fail@plt+0x1aa8>
   13840:	cmp	r1, #0
   13844:	blt	13874 <__assert_fail@plt+0x2020>
   13848:	str	r1, [sp, #12]
   1384c:	add	r3, sp, #72	; 0x48
   13850:	str	r0, [r3, #-64]!	; 0xffffffc0
   13854:	ldm	r3, {r0, r1}
   13858:	bl	12e0c <__assert_fail@plt+0x15b8>
   1385c:	mov	r2, r0
   13860:	mov	r1, r7
   13864:	mov	r0, r6
   13868:	bl	11be0 <__assert_fail@plt+0x38c>
   1386c:	mov	r4, #0
   13870:	b	132fc <__assert_fail@plt+0x1aa8>
   13874:	ldr	r2, [pc, #608]	; 13adc <__assert_fail@plt+0x2288>
   13878:	mov	r1, r7
   1387c:	mov	r0, r6
   13880:	bl	11be0 <__assert_fail@plt+0x38c>
   13884:	mov	r4, #0
   13888:	b	132fc <__assert_fail@plt+0x1aa8>
   1388c:	cmp	r1, #0
   13890:	strge	r0, [sp, #16]
   13894:	strge	r1, [sp, #20]
   13898:	movlt	r3, #0
   1389c:	strlt	r3, [sp, #16]
   138a0:	strlt	r3, [sp, #20]
   138a4:	add	r3, sp, #16
   138a8:	ldm	r3, {r2, r3}
   138ac:	mov	r1, r7
   138b0:	mov	r0, r6
   138b4:	bl	12ed8 <__assert_fail@plt+0x1684>
   138b8:	mov	r4, #0
   138bc:	b	132fc <__assert_fail@plt+0x1aa8>
   138c0:	add	r3, sp, #24
   138c4:	add	r5, r5, #72	; 0x48
   138c8:	ldm	r5, {r0, r1}
   138cc:	stm	r3, {r0, r1}
   138d0:	bl	12e0c <__assert_fail@plt+0x15b8>
   138d4:	mov	r2, r0
   138d8:	mov	r1, r7
   138dc:	mov	r0, r6
   138e0:	bl	11be0 <__assert_fail@plt+0x38c>
   138e4:	mov	r4, #0
   138e8:	b	132fc <__assert_fail@plt+0x1aa8>
   138ec:	add	r3, sp, #32
   138f0:	add	r5, r5, #72	; 0x48
   138f4:	ldm	r5, {r0, r1}
   138f8:	stm	r3, {r0, r1}
   138fc:	ldm	r3, {r2, r3}
   13900:	mov	r1, r7
   13904:	mov	r0, r6
   13908:	bl	12ed8 <__assert_fail@plt+0x1684>
   1390c:	mov	r4, #0
   13910:	b	132fc <__assert_fail@plt+0x1aa8>
   13914:	add	r3, sp, #40	; 0x28
   13918:	add	r5, r5, #80	; 0x50
   1391c:	ldm	r5, {r0, r1}
   13920:	stm	r3, {r0, r1}
   13924:	bl	12e0c <__assert_fail@plt+0x15b8>
   13928:	mov	r2, r0
   1392c:	mov	r1, r7
   13930:	mov	r0, r6
   13934:	bl	11be0 <__assert_fail@plt+0x38c>
   13938:	mov	r4, #0
   1393c:	b	132fc <__assert_fail@plt+0x1aa8>
   13940:	add	r3, sp, #48	; 0x30
   13944:	add	r5, r5, #80	; 0x50
   13948:	ldm	r5, {r0, r1}
   1394c:	stm	r3, {r0, r1}
   13950:	ldm	r3, {r2, r3}
   13954:	mov	r1, r7
   13958:	mov	r0, r6
   1395c:	bl	12ed8 <__assert_fail@plt+0x1684>
   13960:	mov	r4, #0
   13964:	b	132fc <__assert_fail@plt+0x1aa8>
   13968:	add	r3, sp, #56	; 0x38
   1396c:	add	r5, r5, #88	; 0x58
   13970:	ldm	r5, {r0, r1}
   13974:	stm	r3, {r0, r1}
   13978:	bl	12e0c <__assert_fail@plt+0x15b8>
   1397c:	mov	r2, r0
   13980:	mov	r1, r7
   13984:	mov	r0, r6
   13988:	bl	11be0 <__assert_fail@plt+0x38c>
   1398c:	mov	r4, #0
   13990:	b	132fc <__assert_fail@plt+0x1aa8>
   13994:	add	r3, sp, #64	; 0x40
   13998:	add	r5, r5, #88	; 0x58
   1399c:	ldm	r5, {r0, r1}
   139a0:	stm	r3, {r0, r1}
   139a4:	ldm	r3, {r2, r3}
   139a8:	mov	r1, r7
   139ac:	mov	r0, r6
   139b0:	bl	12ed8 <__assert_fail@plt+0x1684>
   139b4:	mov	r4, #0
   139b8:	b	132fc <__assert_fail@plt+0x1aa8>
   139bc:	ldr	r3, [pc, #264]	; 13acc <__assert_fail@plt+0x2278>
   139c0:	ldrb	r3, [r3, #116]	; 0x74
   139c4:	cmp	r3, #0
   139c8:	beq	13a20 <__assert_fail@plt+0x21cc>
   139cc:	add	r1, sp, #4
   139d0:	ldr	r0, [sp, #108]	; 0x6c
   139d4:	bl	19efc <__assert_fail@plt+0x86a8>
   139d8:	lsr	r4, r0, #31
   139dc:	cmp	r4, #0
   139e0:	bne	13a34 <__assert_fail@plt+0x21e0>
   139e4:	ldr	r3, [pc, #244]	; 13ae0 <__assert_fail@plt+0x228c>
   139e8:	ldrh	r3, [r3]
   139ec:	strh	r3, [r6, r7]
   139f0:	ldr	r2, [sp, #4]
   139f4:	ldr	r3, [pc, #220]	; 13ad8 <__assert_fail@plt+0x2284>
   139f8:	cmp	r2, #0
   139fc:	moveq	r2, r3
   13a00:	mov	r1, r6
   13a04:	mov	r0, #1
   13a08:	bl	116ec <__printf_chk@plt>
   13a0c:	ldr	r0, [sp, #4]
   13a10:	cmp	r0, #0
   13a14:	beq	132fc <__assert_fail@plt+0x1aa8>
   13a18:	bl	117dc <freecon@plt>
   13a1c:	b	132fc <__assert_fail@plt+0x1aa8>
   13a20:	add	r1, sp, #4
   13a24:	ldr	r0, [sp, #108]	; 0x6c
   13a28:	bl	19f14 <__assert_fail@plt+0x86c0>
   13a2c:	lsr	r4, r0, #31
   13a30:	b	139dc <__assert_fail@plt+0x2188>
   13a34:	bl	116b0 <__errno_location@plt>
   13a38:	ldr	r5, [r0]
   13a3c:	mov	r2, #5
   13a40:	ldr	r1, [pc, #156]	; 13ae4 <__assert_fail@plt+0x2290>
   13a44:	mov	r0, #0
   13a48:	bl	114e8 <dcgettext@plt>
   13a4c:	mov	r8, r0
   13a50:	ldr	r1, [sp, #108]	; 0x6c
   13a54:	mov	r0, #4
   13a58:	bl	19ba0 <__assert_fail@plt+0x834c>
   13a5c:	mov	r3, r0
   13a60:	mov	r2, r8
   13a64:	mov	r1, r5
   13a68:	mov	r0, #0
   13a6c:	bl	115a8 <error@plt>
   13a70:	mov	r3, #0
   13a74:	str	r3, [sp, #4]
   13a78:	b	139e4 <__assert_fail@plt+0x2190>
   13a7c:	ldr	r3, [pc, #100]	; 13ae8 <__assert_fail@plt+0x2294>
   13a80:	ldr	r0, [r3]
   13a84:	ldr	r3, [r0, #20]
   13a88:	ldr	r2, [r0, #24]
   13a8c:	cmp	r3, r2
   13a90:	bcs	13aac <__assert_fail@plt+0x2258>
   13a94:	add	r2, r3, #1
   13a98:	str	r2, [r0, #20]
   13a9c:	mov	r2, #63	; 0x3f
   13aa0:	strb	r2, [r3]
   13aa4:	mov	r4, #0
   13aa8:	b	132fc <__assert_fail@plt+0x1aa8>
   13aac:	mov	r1, #63	; 0x3f
   13ab0:	bl	11758 <__overflow@plt>
   13ab4:	mov	r4, #0
   13ab8:	b	132fc <__assert_fail@plt+0x1aa8>
   13abc:	andeq	sp, r1, r0, asr r4
   13ac0:	andeq	sp, r1, r0, lsr r4
   13ac4:	andeq	sp, r1, r8, asr r4
   13ac8:	andeq	ip, r1, r4, asr #30
   13acc:	strdeq	pc, [r2], -r8
   13ad0:	andeq	sp, r1, r4, lsr #8
   13ad4:	andeq	sp, r1, ip, asr r4
   13ad8:	andeq	sp, r1, ip, lsr #8
   13adc:	andeq	ip, r1, r8, asr #30
   13ae0:	andeq	sp, r1, r4, ror r4
   13ae4:	andeq	sp, r1, r8, ror r4
   13ae8:	andeq	pc, r2, ip, ror #3
   13aec:	push	{r4, r5, r6, lr}
   13af0:	mov	r5, r0
   13af4:	ldr	r6, [pc, #76]	; 13b48 <__assert_fail@plt+0x22f4>
   13af8:	add	r1, r6, #140	; 0x8c
   13afc:	add	r0, r0, #1
   13b00:	bl	11848 <strspn@plt>
   13b04:	add	r0, r0, #1
   13b08:	add	r4, r5, r0
   13b0c:	add	r1, r6, #148	; 0x94
   13b10:	mov	r0, r4
   13b14:	bl	11848 <strspn@plt>
   13b18:	add	r6, r4, r0
   13b1c:	ldrb	r3, [r4, r0]
   13b20:	cmp	r3, #46	; 0x2e
   13b24:	beq	13b30 <__assert_fail@plt+0x22dc>
   13b28:	sub	r0, r6, r5
   13b2c:	pop	{r4, r5, r6, pc}
   13b30:	ldr	r1, [pc, #20]	; 13b4c <__assert_fail@plt+0x22f8>
   13b34:	add	r0, r6, #1
   13b38:	bl	11848 <strspn@plt>
   13b3c:	add	r0, r0, #1
   13b40:	add	r6, r6, r0
   13b44:	b	13b28 <__assert_fail@plt+0x22d4>
   13b48:	andeq	ip, r1, r4, ror #23
   13b4c:	andeq	ip, r1, r8, ror ip
   13b50:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13b54:	sub	sp, sp, #36	; 0x24
   13b58:	mov	r4, r0
   13b5c:	str	r1, [sp, #24]
   13b60:	str	r2, [sp, #28]
   13b64:	mov	fp, r3
   13b68:	bl	11674 <strlen@plt>
   13b6c:	add	r0, r0, #4
   13b70:	bl	1a99c <__assert_fail@plt+0x9148>
   13b74:	str	r0, [sp, #20]
   13b78:	ldrb	r1, [r4]
   13b7c:	cmp	r1, #0
   13b80:	beq	14104 <__assert_fail@plt+0x28b0>
   13b84:	mov	r9, #0
   13b88:	ldr	r8, [pc, #1440]	; 14130 <__assert_fail@plt+0x28dc>
   13b8c:	ldr	sl, [pc, #1440]	; 14134 <__assert_fail@plt+0x28e0>
   13b90:	b	13c5c <__assert_fail@plt+0x2408>
   13b94:	mov	r0, r4
   13b98:	bl	13aec <__assert_fail@plt+0x2298>
   13b9c:	mov	r6, r0
   13ba0:	add	r5, r4, r0
   13ba4:	ldrb	r7, [r4, r0]
   13ba8:	mov	r2, r0
   13bac:	mov	r1, r4
   13bb0:	ldr	r0, [sp, #20]
   13bb4:	bl	114b8 <memcpy@plt>
   13bb8:	cmp	r7, #37	; 0x25
   13bbc:	beq	13bd0 <__assert_fail@plt+0x237c>
   13bc0:	bhi	13c08 <__assert_fail@plt+0x23b4>
   13bc4:	cmp	r7, #0
   13bc8:	subeq	r5, r5, #1
   13bcc:	bne	13c18 <__assert_fail@plt+0x23c4>
   13bd0:	cmp	r6, #1
   13bd4:	bhi	13c9c <__assert_fail@plt+0x2448>
   13bd8:	ldr	r0, [r8]
   13bdc:	ldr	r3, [r0, #20]
   13be0:	ldr	r2, [r0, #24]
   13be4:	cmp	r3, r2
   13be8:	addcc	r2, r3, #1
   13bec:	strcc	r2, [r0, #20]
   13bf0:	movcc	r2, #37	; 0x25
   13bf4:	strbcc	r2, [r3]
   13bf8:	bcc	13c4c <__assert_fail@plt+0x23f8>
   13bfc:	mov	r1, #37	; 0x25
   13c00:	bl	11758 <__overflow@plt>
   13c04:	b	13c4c <__assert_fail@plt+0x23f8>
   13c08:	cmp	r7, #72	; 0x48
   13c0c:	beq	13ce0 <__assert_fail@plt+0x248c>
   13c10:	cmp	r7, #76	; 0x4c
   13c14:	beq	13ce0 <__assert_fail@plt+0x248c>
   13c18:	mov	r2, #0
   13c1c:	ldr	r3, [sp, #72]	; 0x48
   13c20:	str	r3, [sp, #8]
   13c24:	ldr	r3, [sp, #28]
   13c28:	str	r3, [sp, #4]
   13c2c:	ldr	r3, [sp, #24]
   13c30:	str	r3, [sp]
   13c34:	mov	r3, r7
   13c38:	mov	r1, r6
   13c3c:	ldr	r0, [sp, #20]
   13c40:	blx	fp
   13c44:	orr	r9, r0, r9
   13c48:	uxtb	r9, r9
   13c4c:	add	r4, r5, #1
   13c50:	ldrb	r1, [r5, #1]
   13c54:	cmp	r1, #0
   13c58:	beq	14108 <__assert_fail@plt+0x28b4>
   13c5c:	cmp	r1, #37	; 0x25
   13c60:	beq	13b94 <__assert_fail@plt+0x2340>
   13c64:	cmp	r1, #92	; 0x5c
   13c68:	beq	13d10 <__assert_fail@plt+0x24bc>
   13c6c:	ldr	r0, [r8]
   13c70:	ldr	r3, [r0, #20]
   13c74:	ldr	r2, [r0, #24]
   13c78:	cmp	r3, r2
   13c7c:	addcc	r2, r3, #1
   13c80:	strcc	r2, [r0, #20]
   13c84:	strbcc	r1, [r3]
   13c88:	movcc	r5, r4
   13c8c:	bcc	13c4c <__assert_fail@plt+0x23f8>
   13c90:	bl	11758 <__overflow@plt>
   13c94:	mov	r5, r4
   13c98:	b	13c4c <__assert_fail@plt+0x23f8>
   13c9c:	ldr	r8, [sp, #20]
   13ca0:	mov	r3, r8
   13ca4:	strb	r7, [r3, r6]!
   13ca8:	mov	r4, #0
   13cac:	strb	r4, [r3, #1]
   13cb0:	mov	r2, #5
   13cb4:	ldr	r1, [pc, #1148]	; 14138 <__assert_fail@plt+0x28e4>
   13cb8:	mov	r0, r4
   13cbc:	bl	114e8 <dcgettext@plt>
   13cc0:	mov	r5, r0
   13cc4:	mov	r0, r8
   13cc8:	bl	19dd4 <__assert_fail@plt+0x8580>
   13ccc:	mov	r3, r0
   13cd0:	mov	r2, r5
   13cd4:	mov	r1, r4
   13cd8:	mov	r0, #1
   13cdc:	bl	115a8 <error@plt>
   13ce0:	ldrb	r3, [r5, #1]
   13ce4:	ldr	r2, [pc, #1104]	; 1413c <__assert_fail@plt+0x28e8>
   13ce8:	cmp	fp, r2
   13cec:	movne	r2, #0
   13cf0:	bne	13c1c <__assert_fail@plt+0x23c8>
   13cf4:	cmp	r3, #114	; 0x72
   13cf8:	cmpne	r3, #100	; 0x64
   13cfc:	movne	r2, #0
   13d00:	addeq	r5, r5, #1
   13d04:	moveq	r2, r7
   13d08:	moveq	r7, r3
   13d0c:	b	13c1c <__assert_fail@plt+0x23c8>
   13d10:	ldrb	r3, [sl, #117]	; 0x75
   13d14:	cmp	r3, #0
   13d18:	bne	13d58 <__assert_fail@plt+0x2504>
   13d1c:	ldr	r0, [r8]
   13d20:	ldr	r3, [r0, #20]
   13d24:	ldr	r2, [r0, #24]
   13d28:	cmp	r3, r2
   13d2c:	bcs	13d48 <__assert_fail@plt+0x24f4>
   13d30:	add	r2, r3, #1
   13d34:	str	r2, [r0, #20]
   13d38:	mov	r2, #92	; 0x5c
   13d3c:	strb	r2, [r3]
   13d40:	mov	r5, r4
   13d44:	b	13c4c <__assert_fail@plt+0x23f8>
   13d48:	mov	r1, #92	; 0x5c
   13d4c:	bl	11758 <__overflow@plt>
   13d50:	mov	r5, r4
   13d54:	b	13c4c <__assert_fail@plt+0x23f8>
   13d58:	add	r5, r4, #1
   13d5c:	ldrb	r6, [r4, #1]
   13d60:	sub	r3, r6, #48	; 0x30
   13d64:	uxtb	r3, r3
   13d68:	cmp	r3, #7
   13d6c:	bhi	13de8 <__assert_fail@plt+0x2594>
   13d70:	sub	r6, r6, #48	; 0x30
   13d74:	ldrb	r3, [r4, #2]
   13d78:	sub	r2, r3, #48	; 0x30
   13d7c:	uxtb	r2, r2
   13d80:	cmp	r2, #7
   13d84:	addhi	r5, r4, #2
   13d88:	bhi	13db4 <__assert_fail@plt+0x2560>
   13d8c:	sub	r3, r3, #48	; 0x30
   13d90:	add	r6, r3, r6, lsl #3
   13d94:	add	r5, r4, #3
   13d98:	ldrb	r3, [r4, #3]
   13d9c:	sub	r2, r3, #48	; 0x30
   13da0:	uxtb	r2, r2
   13da4:	cmp	r2, #7
   13da8:	subls	r3, r3, #48	; 0x30
   13dac:	addls	r6, r3, r6, lsl #3
   13db0:	addls	r5, r4, #4
   13db4:	ldr	r0, [r8]
   13db8:	ldr	r3, [r0, #20]
   13dbc:	ldr	r2, [r0, #24]
   13dc0:	cmp	r3, r2
   13dc4:	addcc	r2, r3, #1
   13dc8:	strcc	r2, [r0, #20]
   13dcc:	strbcc	r6, [r3]
   13dd0:	bcs	13ddc <__assert_fail@plt+0x2588>
   13dd4:	sub	r5, r5, #1
   13dd8:	b	13c4c <__assert_fail@plt+0x23f8>
   13ddc:	uxtb	r1, r6
   13de0:	bl	11758 <__overflow@plt>
   13de4:	b	13dd4 <__assert_fail@plt+0x2580>
   13de8:	cmp	r6, #120	; 0x78
   13dec:	beq	13e44 <__assert_fail@plt+0x25f0>
   13df0:	cmp	r6, #0
   13df4:	bne	13f10 <__assert_fail@plt+0x26bc>
   13df8:	mov	r2, #5
   13dfc:	ldr	r1, [pc, #828]	; 14140 <__assert_fail@plt+0x28ec>
   13e00:	mov	r0, #0
   13e04:	bl	114e8 <dcgettext@plt>
   13e08:	mov	r2, r0
   13e0c:	mov	r1, #0
   13e10:	mov	r0, r1
   13e14:	bl	115a8 <error@plt>
   13e18:	ldr	r0, [r8]
   13e1c:	ldr	r3, [r0, #20]
   13e20:	ldr	r2, [r0, #24]
   13e24:	cmp	r3, r2
   13e28:	bcs	13f00 <__assert_fail@plt+0x26ac>
   13e2c:	add	r2, r3, #1
   13e30:	str	r2, [r0, #20]
   13e34:	mov	r2, #92	; 0x5c
   13e38:	strb	r2, [r3]
   13e3c:	mov	r5, r4
   13e40:	b	13c4c <__assert_fail@plt+0x23f8>
   13e44:	bl	11644 <__ctype_b_loc@plt>
   13e48:	ldr	r3, [r0]
   13e4c:	ldrb	r1, [r4, #2]
   13e50:	lsl	r2, r1, #1
   13e54:	ldrh	r2, [r3, r2]
   13e58:	tst	r2, #4096	; 0x1000
   13e5c:	beq	140dc <__assert_fail@plt+0x2888>
   13e60:	sub	r2, r1, #97	; 0x61
   13e64:	uxtb	r2, r2
   13e68:	cmp	r2, #5
   13e6c:	subls	r1, r1, #87	; 0x57
   13e70:	bls	13e88 <__assert_fail@plt+0x2634>
   13e74:	sub	r2, r1, #65	; 0x41
   13e78:	uxtb	r2, r2
   13e7c:	cmp	r2, #5
   13e80:	subls	r1, r1, #55	; 0x37
   13e84:	subhi	r1, r1, #48	; 0x30
   13e88:	ldrb	r2, [r4, #3]
   13e8c:	lsl	r0, r2, #1
   13e90:	ldrh	r3, [r3, r0]
   13e94:	tst	r3, #4096	; 0x1000
   13e98:	addeq	r5, r4, #2
   13e9c:	beq	13ed4 <__assert_fail@plt+0x2680>
   13ea0:	add	r5, r4, #3
   13ea4:	lsl	r1, r1, #4
   13ea8:	sub	r3, r2, #97	; 0x61
   13eac:	uxtb	r3, r3
   13eb0:	cmp	r3, #5
   13eb4:	subls	r2, r2, #87	; 0x57
   13eb8:	bls	13ed0 <__assert_fail@plt+0x267c>
   13ebc:	sub	r3, r2, #65	; 0x41
   13ec0:	uxtb	r3, r3
   13ec4:	cmp	r3, #5
   13ec8:	subls	r2, r2, #55	; 0x37
   13ecc:	subhi	r2, r2, #48	; 0x30
   13ed0:	add	r1, r2, r1
   13ed4:	ldr	r0, [r8]
   13ed8:	ldr	r3, [r0, #20]
   13edc:	ldr	r2, [r0, #24]
   13ee0:	cmp	r3, r2
   13ee4:	addcc	r2, r3, #1
   13ee8:	strcc	r2, [r0, #20]
   13eec:	strbcc	r1, [r3]
   13ef0:	bcc	13c4c <__assert_fail@plt+0x23f8>
   13ef4:	uxtb	r1, r1
   13ef8:	bl	11758 <__overflow@plt>
   13efc:	b	13c4c <__assert_fail@plt+0x23f8>
   13f00:	mov	r1, #92	; 0x5c
   13f04:	bl	11758 <__overflow@plt>
   13f08:	mov	r5, r4
   13f0c:	b	13c4c <__assert_fail@plt+0x23f8>
   13f10:	sub	r3, r6, #34	; 0x22
   13f14:	cmp	r3, #84	; 0x54
   13f18:	ldrls	pc, [pc, r3, lsl #2]
   13f1c:	b	140dc <__assert_fail@plt+0x2888>
   13f20:	andeq	r4, r1, r0, lsl #1
   13f24:	ldrdeq	r4, [r1], -ip
   13f28:	ldrdeq	r4, [r1], -ip
   13f2c:	ldrdeq	r4, [r1], -ip
   13f30:	ldrdeq	r4, [r1], -ip
   13f34:	ldrdeq	r4, [r1], -ip
   13f38:	ldrdeq	r4, [r1], -ip
   13f3c:	ldrdeq	r4, [r1], -ip
   13f40:	ldrdeq	r4, [r1], -ip
   13f44:	ldrdeq	r4, [r1], -ip
   13f48:	ldrdeq	r4, [r1], -ip
   13f4c:	ldrdeq	r4, [r1], -ip
   13f50:	ldrdeq	r4, [r1], -ip
   13f54:	ldrdeq	r4, [r1], -ip
   13f58:	ldrdeq	r4, [r1], -ip
   13f5c:	ldrdeq	r4, [r1], -ip
   13f60:	ldrdeq	r4, [r1], -ip
   13f64:	ldrdeq	r4, [r1], -ip
   13f68:	ldrdeq	r4, [r1], -ip
   13f6c:	ldrdeq	r4, [r1], -ip
   13f70:	ldrdeq	r4, [r1], -ip
   13f74:	ldrdeq	r4, [r1], -ip
   13f78:	ldrdeq	r4, [r1], -ip
   13f7c:	ldrdeq	r4, [r1], -ip
   13f80:	ldrdeq	r4, [r1], -ip
   13f84:	ldrdeq	r4, [r1], -ip
   13f88:	ldrdeq	r4, [r1], -ip
   13f8c:	ldrdeq	r4, [r1], -ip
   13f90:	ldrdeq	r4, [r1], -ip
   13f94:	ldrdeq	r4, [r1], -ip
   13f98:	ldrdeq	r4, [r1], -ip
   13f9c:	ldrdeq	r4, [r1], -ip
   13fa0:	ldrdeq	r4, [r1], -ip
   13fa4:	ldrdeq	r4, [r1], -ip
   13fa8:	ldrdeq	r4, [r1], -ip
   13fac:	ldrdeq	r4, [r1], -ip
   13fb0:	ldrdeq	r4, [r1], -ip
   13fb4:	ldrdeq	r4, [r1], -ip
   13fb8:	ldrdeq	r4, [r1], -ip
   13fbc:	ldrdeq	r4, [r1], -ip
   13fc0:	ldrdeq	r4, [r1], -ip
   13fc4:	ldrdeq	r4, [r1], -ip
   13fc8:	ldrdeq	r4, [r1], -ip
   13fcc:	ldrdeq	r4, [r1], -ip
   13fd0:	ldrdeq	r4, [r1], -ip
   13fd4:	ldrdeq	r4, [r1], -ip
   13fd8:	ldrdeq	r4, [r1], -ip
   13fdc:	ldrdeq	r4, [r1], -ip
   13fe0:	ldrdeq	r4, [r1], -ip
   13fe4:	ldrdeq	r4, [r1], -ip
   13fe8:	ldrdeq	r4, [r1], -ip
   13fec:	ldrdeq	r4, [r1], -ip
   13ff0:	ldrdeq	r4, [r1], -ip
   13ff4:	ldrdeq	r4, [r1], -ip
   13ff8:	ldrdeq	r4, [r1], -ip
   13ffc:	ldrdeq	r4, [r1], -ip
   14000:	ldrdeq	r4, [r1], -ip
   14004:	ldrdeq	r4, [r1], -ip
   14008:	andeq	r4, r1, r0, lsl #1
   1400c:	ldrdeq	r4, [r1], -ip
   14010:	ldrdeq	r4, [r1], -ip
   14014:	ldrdeq	r4, [r1], -ip
   14018:	ldrdeq	r4, [r1], -ip
   1401c:	andeq	r4, r1, r4, ror r0
   14020:	andeq	r4, r1, ip, ror r0
   14024:	ldrdeq	r4, [r1], -ip
   14028:	ldrdeq	r4, [r1], -ip
   1402c:	andeq	r4, r1, ip, lsr #1
   14030:	strheq	r4, [r1], -r4	; <UNPREDICTABLE>
   14034:	ldrdeq	r4, [r1], -ip
   14038:	ldrdeq	r4, [r1], -ip
   1403c:	ldrdeq	r4, [r1], -ip
   14040:	ldrdeq	r4, [r1], -ip
   14044:	ldrdeq	r4, [r1], -ip
   14048:	ldrdeq	r4, [r1], -ip
   1404c:	ldrdeq	r4, [r1], -ip
   14050:	strheq	r4, [r1], -ip
   14054:	ldrdeq	r4, [r1], -ip
   14058:	ldrdeq	r4, [r1], -ip
   1405c:	ldrdeq	r4, [r1], -ip
   14060:	andeq	r4, r1, r4, asr #1
   14064:	ldrdeq	r4, [r1], -ip
   14068:	andeq	r4, r1, ip, asr #1
   1406c:	ldrdeq	r4, [r1], -ip
   14070:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14074:	mov	r6, #7
   14078:	b	14080 <__assert_fail@plt+0x282c>
   1407c:	mov	r6, #8
   14080:	ldr	r0, [r8]
   14084:	ldr	r3, [r0, #20]
   14088:	ldr	r2, [r0, #24]
   1408c:	cmp	r3, r2
   14090:	addcc	r2, r3, #1
   14094:	strcc	r2, [r0, #20]
   14098:	strbcc	r6, [r3]
   1409c:	bcc	13c4c <__assert_fail@plt+0x23f8>
   140a0:	mov	r1, r6
   140a4:	bl	11758 <__overflow@plt>
   140a8:	b	13c4c <__assert_fail@plt+0x23f8>
   140ac:	mov	r6, #27
   140b0:	b	14080 <__assert_fail@plt+0x282c>
   140b4:	mov	r6, #12
   140b8:	b	14080 <__assert_fail@plt+0x282c>
   140bc:	mov	r6, #10
   140c0:	b	14080 <__assert_fail@plt+0x282c>
   140c4:	mov	r6, #13
   140c8:	b	14080 <__assert_fail@plt+0x282c>
   140cc:	mov	r6, #9
   140d0:	b	14080 <__assert_fail@plt+0x282c>
   140d4:	mov	r6, #11
   140d8:	b	14080 <__assert_fail@plt+0x282c>
   140dc:	mov	r2, #5
   140e0:	ldr	r1, [pc, #92]	; 14144 <__assert_fail@plt+0x28f0>
   140e4:	mov	r0, #0
   140e8:	bl	114e8 <dcgettext@plt>
   140ec:	mov	r3, r6
   140f0:	mov	r2, r0
   140f4:	mov	r1, #0
   140f8:	mov	r0, r1
   140fc:	bl	115a8 <error@plt>
   14100:	b	14080 <__assert_fail@plt+0x282c>
   14104:	mov	r9, #0
   14108:	ldr	r0, [sp, #20]
   1410c:	bl	15c58 <__assert_fail@plt+0x4404>
   14110:	ldr	r3, [pc, #24]	; 14130 <__assert_fail@plt+0x28dc>
   14114:	ldr	r1, [r3]
   14118:	ldr	r3, [pc, #40]	; 14148 <__assert_fail@plt+0x28f4>
   1411c:	ldr	r0, [r3]
   14120:	bl	11428 <fputs_unlocked@plt>
   14124:	mov	r0, r9
   14128:	add	sp, sp, #36	; 0x24
   1412c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14130:	andeq	pc, r2, ip, ror #3
   14134:	strdeq	pc, [r2], -r8
   14138:	andeq	sp, r1, r0, lsr #9
   1413c:	andeq	r3, r1, r4, asr #3
   14140:			; <UNDEFINED> instruction: 0x0001d4b8
   14144:	ldrdeq	sp, [r1], -ip
   14148:	andeq	pc, r2, r4, lsl #3
   1414c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14150:	sub	sp, sp, #396	; 0x18c
   14154:	str	r0, [sp, #8]
   14158:	mov	r7, r1
   1415c:	mov	r8, r2
   14160:	ldr	r1, [pc, #1248]	; 14648 <__assert_fail@plt+0x2df4>
   14164:	bl	11464 <strcmp@plt>
   14168:	subs	r9, r0, #0
   1416c:	beq	145cc <__assert_fail@plt+0x2d78>
   14170:	mov	r2, #256	; 0x100
   14174:	mov	r1, #0
   14178:	add	r0, sp, #32
   1417c:	bl	116e0 <memset@plt>
   14180:	add	r3, sp, #288	; 0x120
   14184:	str	r3, [sp, #20]
   14188:	mvn	r3, #0
   1418c:	str	r3, [sp, #24]
   14190:	str	r3, [sp, #28]
   14194:	ldr	r3, [pc, #1200]	; 1464c <__assert_fail@plt+0x2df8>
   14198:	ldrb	r6, [r3, #116]	; 0x74
   1419c:	ldr	r3, [sp, #8]
   141a0:	str	r3, [sp, #12]
   141a4:	mvn	r9, #99	; 0x63
   141a8:	cmp	r6, #0
   141ac:	moveq	r6, #256	; 0x100
   141b0:	movne	r6, #0
   141b4:	b	145fc <__assert_fail@plt+0x2da8>
   141b8:	mov	r2, #256	; 0x100
   141bc:	b	1422c <__assert_fail@plt+0x29d8>
   141c0:	mov	r2, #3
   141c4:	b	1422c <__assert_fail@plt+0x29d8>
   141c8:	mov	r2, #1
   141cc:	b	1422c <__assert_fail@plt+0x29d8>
   141d0:	mov	r2, #4
   141d4:	b	1422c <__assert_fail@plt+0x29d8>
   141d8:	mov	r2, #8
   141dc:	b	1422c <__assert_fail@plt+0x29d8>
   141e0:	mov	r2, #16
   141e4:	b	1422c <__assert_fail@plt+0x29d8>
   141e8:	ldr	r2, [pc, #1120]	; 14650 <__assert_fail@plt+0x2dfc>
   141ec:	b	1422c <__assert_fail@plt+0x29d8>
   141f0:	mov	r2, #512	; 0x200
   141f4:	b	1422c <__assert_fail@plt+0x29d8>
   141f8:	mov	r2, #1024	; 0x400
   141fc:	b	1422c <__assert_fail@plt+0x29d8>
   14200:	mov	r2, #2048	; 0x800
   14204:	b	1422c <__assert_fail@plt+0x29d8>
   14208:	mov	r2, #32
   1420c:	b	1422c <__assert_fail@plt+0x29d8>
   14210:	mov	r2, #64	; 0x40
   14214:	b	1422c <__assert_fail@plt+0x29d8>
   14218:	mov	r2, #128	; 0x80
   1421c:	b	1422c <__assert_fail@plt+0x29d8>
   14220:	mov	r2, fp
   14224:	b	1422c <__assert_fail@plt+0x29d8>
   14228:	mov	r2, sl
   1422c:	orr	r5, r5, r2
   14230:	add	r4, r3, #1
   14234:	ldrb	r3, [r3, #1]
   14238:	cmp	r3, #0
   1423c:	beq	14360 <__assert_fail@plt+0x2b0c>
   14240:	cmp	r3, #37	; 0x25
   14244:	movne	r3, r4
   14248:	bne	14230 <__assert_fail@plt+0x29dc>
   1424c:	mov	r0, r4
   14250:	bl	13aec <__assert_fail@plt+0x2298>
   14254:	add	r3, r4, r0
   14258:	ldrb	r2, [r4, r0]
   1425c:	cmp	r2, #0
   14260:	beq	14360 <__assert_fail@plt+0x2b0c>
   14264:	sub	r2, r2, #65	; 0x41
   14268:	cmp	r2, #57	; 0x39
   1426c:	ldrls	pc, [pc, r2, lsl #2]
   14270:	b	14220 <__assert_fail@plt+0x29cc>
   14274:	andeq	r4, r1, r8, lsr #4
   14278:	andeq	r4, r1, r0, lsr #4
   1427c:	andeq	r4, r1, r0, lsr #4
   14280:	andeq	r4, r1, r8, lsr #4
   14284:	andeq	r4, r1, r0, lsr #4
   14288:	andeq	r4, r1, r8, asr #3
   1428c:	andeq	r4, r1, r0, ror #3
   14290:	andeq	r4, r1, r0, lsr #4
   14294:	andeq	r4, r1, r0, lsr #4
   14298:	andeq	r4, r1, r0, lsr #4
   1429c:	andeq	r4, r1, r0, lsr #4
   142a0:	andeq	r4, r1, r0, lsr #4
   142a4:	andeq	r4, r1, r0, lsr #4
   142a8:	andeq	r4, r1, r8, lsr #4
   142ac:	andeq	r4, r1, r0, lsr #4
   142b0:	andeq	r4, r1, r0, lsr #4
   142b4:	andeq	r4, r1, r0, lsr #4
   142b8:	andeq	r4, r1, r0, lsr #4
   142bc:	andeq	r4, r1, r0, lsr #4
   142c0:	andeq	r4, r1, r8, lsr #4
   142c4:	ldrdeq	r4, [r1], -r8
   142c8:	andeq	r4, r1, r0, lsr #4
   142cc:	andeq	r4, r1, r0, lsl #4
   142d0:	andeq	r4, r1, r8, lsl #4
   142d4:	andeq	r4, r1, r0, lsl r2
   142d8:	andeq	r4, r1, r8, lsl r2
   142dc:	andeq	r4, r1, r0, lsr #4
   142e0:	andeq	r4, r1, r0, lsr #4
   142e4:	andeq	r4, r1, r0, lsr #4
   142e8:	andeq	r4, r1, r0, lsr #4
   142ec:	andeq	r4, r1, r0, lsr #4
   142f0:	andeq	r4, r1, r0, lsr #4
   142f4:	andeq	r4, r1, r8, lsr #4
   142f8:	strdeq	r4, [r1], -r8
   142fc:	andeq	r4, r1, r0, lsr #4
   14300:	andeq	r4, r1, r8, lsr #4
   14304:	andeq	r4, r1, r0, lsr #4
   14308:	andeq	r4, r1, r0, asr #3
   1430c:	andeq	r4, r1, r0, ror #3
   14310:	ldrdeq	r4, [r1], -r0
   14314:			; <UNDEFINED> instruction: 0x000141b8
   14318:	andeq	r4, r1, r0, lsr #4
   1431c:	andeq	r4, r1, r0, lsr #4
   14320:	andeq	r4, r1, r0, lsr #4
   14324:	andeq	r4, r1, r8, ror #3
   14328:	andeq	r4, r1, r0, lsr #4
   1432c:	andeq	r4, r1, r0, lsr #4
   14330:	andeq	r4, r1, r0, lsr #4
   14334:	andeq	r4, r1, r0, lsr #4
   14338:	andeq	r4, r1, r0, lsr #4
   1433c:	strdeq	r4, [r1], -r0
   14340:	andeq	r4, r1, r8, lsr #4
   14344:	ldrdeq	r4, [r1], -r8
   14348:	andeq	r4, r1, r0, lsr #4
   1434c:	andeq	r4, r1, r0, lsl #4
   14350:	andeq	r4, r1, r8, lsl #4
   14354:	andeq	r4, r1, r0, lsl r2
   14358:	andeq	r4, r1, r8, lsl r2
   1435c:	mov	r5, #0
   14360:	add	r3, sp, #32
   14364:	str	r3, [sp]
   14368:	mov	r3, r5
   1436c:	mov	r2, r6
   14370:	ldr	r1, [sp, #12]
   14374:	mov	r0, r9
   14378:	bl	11734 <statx@plt>
   1437c:	subs	r1, r0, #0
   14380:	blt	14550 <__assert_fail@plt+0x2cfc>
   14384:	ldrh	r6, [sp, #60]	; 0x3c
   14388:	and	r3, r6, #45056	; 0xb000
   1438c:	cmp	r3, #8192	; 0x2000
   14390:	moveq	r7, r8
   14394:	ldr	lr, [sp, #172]	; 0xac
   14398:	ldr	r0, [sp, #168]	; 0xa8
   1439c:	mov	ip, #0
   143a0:	lsr	r5, r0, #24
   143a4:	lsl	r4, r0, #8
   143a8:	ldr	r2, [pc, #676]	; 14654 <__assert_fail@plt+0x2e00>
   143ac:	mov	r3, #0
   143b0:	and	r2, r2, r4
   143b4:	and	r3, r3, r5
   143b8:	mov	r4, r2
   143bc:	mov	r5, r3
   143c0:	mov	r3, r0
   143c4:	mov	r2, ip
   143c8:	mov	sl, #0
   143cc:	ldr	fp, [pc, #644]	; 14658 <__assert_fail@plt+0x2e04>
   143d0:	and	r2, r2, sl
   143d4:	and	r3, r3, fp
   143d8:	orr	r2, r2, r4
   143dc:	orr	r3, r3, r5
   143e0:	uxtb	r4, lr
   143e4:	mov	r5, #0
   143e8:	orr	r8, r4, r2
   143ec:	orr	r9, r5, r3
   143f0:	lsr	r3, lr, #20
   143f4:	lsl	r2, lr, #12
   143f8:	add	r5, pc, #576	; 0x240
   143fc:	ldrd	r4, [r5]
   14400:	and	r4, r4, r2
   14404:	and	r5, r5, r3
   14408:	mov	r2, r4
   1440c:	mov	r3, r5
   14410:	orr	r4, r8, r2
   14414:	orr	r5, r9, r3
   14418:	mov	r2, r4
   1441c:	mov	r3, r5
   14420:	add	r0, sp, #288	; 0x120
   14424:	strd	r2, [r0]
   14428:	ldrd	r2, [sp, #64]	; 0x40
   1442c:	add	r0, sp, #384	; 0x180
   14430:	strd	r2, [r0]
   14434:	str	r6, [sp, #304]	; 0x130
   14438:	ldr	r3, [sp, #48]	; 0x30
   1443c:	str	r3, [sp, #308]	; 0x134
   14440:	ldr	r3, [sp, #52]	; 0x34
   14444:	str	r3, [sp, #312]	; 0x138
   14448:	ldr	r3, [sp, #56]	; 0x38
   1444c:	str	r3, [sp, #316]	; 0x13c
   14450:	ldr	r0, [sp, #164]	; 0xa4
   14454:	ldr	lr, [sp, #160]	; 0xa0
   14458:	lsr	r3, lr, #24
   1445c:	lsl	r2, lr, #8
   14460:	ldr	r8, [pc, #492]	; 14654 <__assert_fail@plt+0x2e00>
   14464:	mov	r9, #0
   14468:	and	r8, r8, r2
   1446c:	and	r9, r9, r3
   14470:	mov	r3, lr
   14474:	mov	r2, ip
   14478:	and	r2, r2, sl
   1447c:	and	r3, r3, fp
   14480:	orr	r8, r8, r2
   14484:	orr	r9, r9, r3
   14488:	uxtb	r2, r0
   1448c:	mov	r3, #0
   14490:	orr	r2, r2, r8
   14494:	orr	r3, r3, r9
   14498:	lsr	r5, r0, #20
   1449c:	lsl	r4, r0, #12
   144a0:	add	r9, pc, #408	; 0x198
   144a4:	ldrd	r8, [r9]
   144a8:	and	r8, r8, r4
   144ac:	and	r9, r9, r5
   144b0:	orr	r2, r2, r8
   144b4:	orr	r3, r3, r9
   144b8:	add	r0, sp, #320	; 0x140
   144bc:	strd	r2, [r0]
   144c0:	ldrd	r2, [sp, #72]	; 0x48
   144c4:	add	r0, sp, #336	; 0x150
   144c8:	strd	r2, [r0]
   144cc:	ldr	r3, [sp, #36]	; 0x24
   144d0:	str	r3, [sp, #344]	; 0x158
   144d4:	ldrd	r2, [sp, #80]	; 0x50
   144d8:	add	r0, sp, #352	; 0x160
   144dc:	strd	r2, [r0]
   144e0:	ldr	r3, [sp, #96]	; 0x60
   144e4:	str	r3, [sp, #360]	; 0x168
   144e8:	ldr	r3, [sp, #104]	; 0x68
   144ec:	str	r3, [sp, #364]	; 0x16c
   144f0:	ldr	r3, [sp, #144]	; 0x90
   144f4:	str	r3, [sp, #368]	; 0x170
   144f8:	ldr	r3, [sp, #152]	; 0x98
   144fc:	str	r3, [sp, #372]	; 0x174
   14500:	ldr	r3, [sp, #128]	; 0x80
   14504:	str	r3, [sp, #376]	; 0x178
   14508:	ldr	r3, [sp, #136]	; 0x88
   1450c:	str	r3, [sp, #380]	; 0x17c
   14510:	ldr	r3, [sp, #32]
   14514:	tst	r3, #2048	; 0x800
   14518:	ldrne	r3, [sp, #112]	; 0x70
   1451c:	strne	r3, [sp, #24]
   14520:	ldrne	r3, [sp, #120]	; 0x78
   14524:	strne	r3, [sp, #28]
   14528:	add	r3, sp, #20
   1452c:	str	r3, [sp]
   14530:	ldr	r3, [pc, #292]	; 1465c <__assert_fail@plt+0x2e08>
   14534:	ldr	r2, [sp, #8]
   14538:	mov	r0, r7
   1453c:	bl	13b50 <__assert_fail@plt+0x22fc>
   14540:	eor	r0, r0, #1
   14544:	uxtb	r0, r0
   14548:	add	sp, sp, #396	; 0x18c
   1454c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14550:	tst	r6, #4096	; 0x1000
   14554:	beq	14588 <__assert_fail@plt+0x2d34>
   14558:	bl	116b0 <__errno_location@plt>
   1455c:	ldr	r4, [r0]
   14560:	mov	r2, #5
   14564:	ldr	r1, [pc, #244]	; 14660 <__assert_fail@plt+0x2e0c>
   14568:	mov	r0, #0
   1456c:	bl	114e8 <dcgettext@plt>
   14570:	mov	r2, r0
   14574:	mov	r1, r4
   14578:	mov	r0, #0
   1457c:	bl	115a8 <error@plt>
   14580:	mov	r0, #0
   14584:	b	14548 <__assert_fail@plt+0x2cf4>
   14588:	bl	116b0 <__errno_location@plt>
   1458c:	ldr	r4, [r0]
   14590:	mov	r2, #5
   14594:	ldr	r1, [pc, #200]	; 14664 <__assert_fail@plt+0x2e10>
   14598:	mov	r0, #0
   1459c:	bl	114e8 <dcgettext@plt>
   145a0:	mov	r5, r0
   145a4:	ldr	r1, [sp, #8]
   145a8:	mov	r0, #4
   145ac:	bl	19ba0 <__assert_fail@plt+0x834c>
   145b0:	mov	r3, r0
   145b4:	mov	r2, r5
   145b8:	mov	r1, r4
   145bc:	mov	r0, #0
   145c0:	bl	115a8 <error@plt>
   145c4:	mov	r0, #0
   145c8:	b	14548 <__assert_fail@plt+0x2cf4>
   145cc:	mov	r2, #256	; 0x100
   145d0:	mov	r1, #0
   145d4:	add	r0, sp, #32
   145d8:	bl	116e0 <memset@plt>
   145dc:	add	r3, sp, #288	; 0x120
   145e0:	str	r3, [sp, #20]
   145e4:	mvn	r3, #0
   145e8:	str	r3, [sp, #24]
   145ec:	str	r3, [sp, #28]
   145f0:	ldr	r3, [pc, #112]	; 14668 <__assert_fail@plt+0x2e14>
   145f4:	str	r3, [sp, #12]
   145f8:	mov	r6, #4096	; 0x1000
   145fc:	ldr	r3, [pc, #72]	; 1464c <__assert_fail@plt+0x2df8>
   14600:	ldrb	r3, [r3, #118]	; 0x76
   14604:	cmp	r3, #0
   14608:	orrne	r6, r6, #16384	; 0x4000
   1460c:	bne	14620 <__assert_fail@plt+0x2dcc>
   14610:	ldr	r3, [pc, #52]	; 1464c <__assert_fail@plt+0x2df8>
   14614:	ldrb	r3, [r3, #119]	; 0x77
   14618:	cmp	r3, #0
   1461c:	orrne	r6, r6, #8192	; 0x2000
   14620:	ldrb	r3, [r7]
   14624:	cmp	r3, #0
   14628:	beq	1435c <__assert_fail@plt+0x2b08>
   1462c:	mov	r4, r7
   14630:	mov	r5, #0
   14634:	mov	sl, #2
   14638:	mov	fp, r5
   1463c:	b	14240 <__assert_fail@plt+0x29ec>
   14640:			; <UNDEFINED> instruction: 0xfff00000	; IMB
   14644:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   14648:	andeq	ip, r1, r8, asr #30
   1464c:	strdeq	pc, [r2], -r8
   14650:	andeq	r0, r0, r2, lsl #2
   14654:	andeq	pc, pc, r0, lsl #30
   14658:			; <UNDEFINED> instruction: 0xfffff000
   1465c:	andeq	r3, r1, r4, asr #3
   14660:	andeq	sp, r1, r0, lsl #10
   14664:	andeq	sp, r1, ip, lsl r5
   14668:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1466c:	push	{lr}		; (str lr, [sp, #-4]!)
   14670:	sub	sp, sp, #60	; 0x3c
   14674:	subs	r6, r0, #0
   14678:	beq	146b4 <__assert_fail@plt+0x2e60>
   1467c:	ldr	r3, [pc, #1044]	; 14a98 <__assert_fail@plt+0x3244>
   14680:	ldr	r4, [r3]
   14684:	mov	r2, #5
   14688:	ldr	r1, [pc, #1036]	; 14a9c <__assert_fail@plt+0x3248>
   1468c:	mov	r0, #0
   14690:	bl	114e8 <dcgettext@plt>
   14694:	ldr	r3, [pc, #1028]	; 14aa0 <__assert_fail@plt+0x324c>
   14698:	ldr	r3, [r3]
   1469c:	mov	r2, r0
   146a0:	mov	r1, #1
   146a4:	mov	r0, r4
   146a8:	bl	11704 <__fprintf_chk@plt>
   146ac:	mov	r0, r6
   146b0:	bl	1165c <exit@plt>
   146b4:	mov	r2, #5
   146b8:	ldr	r1, [pc, #996]	; 14aa4 <__assert_fail@plt+0x3250>
   146bc:	mov	r0, #0
   146c0:	bl	114e8 <dcgettext@plt>
   146c4:	ldr	r3, [pc, #980]	; 14aa0 <__assert_fail@plt+0x324c>
   146c8:	ldr	r2, [r3]
   146cc:	mov	r1, r0
   146d0:	mov	r0, #1
   146d4:	bl	116ec <__printf_chk@plt>
   146d8:	mov	r2, #5
   146dc:	ldr	r1, [pc, #964]	; 14aa8 <__assert_fail@plt+0x3254>
   146e0:	mov	r0, #0
   146e4:	bl	114e8 <dcgettext@plt>
   146e8:	ldr	r4, [pc, #956]	; 14aac <__assert_fail@plt+0x3258>
   146ec:	ldr	r1, [r4]
   146f0:	bl	11428 <fputs_unlocked@plt>
   146f4:	mov	r2, #5
   146f8:	ldr	r1, [pc, #944]	; 14ab0 <__assert_fail@plt+0x325c>
   146fc:	mov	r0, #0
   14700:	bl	114e8 <dcgettext@plt>
   14704:	ldr	r1, [r4]
   14708:	bl	11428 <fputs_unlocked@plt>
   1470c:	mov	r2, #5
   14710:	ldr	r1, [pc, #924]	; 14ab4 <__assert_fail@plt+0x3260>
   14714:	mov	r0, #0
   14718:	bl	114e8 <dcgettext@plt>
   1471c:	ldr	r1, [r4]
   14720:	bl	11428 <fputs_unlocked@plt>
   14724:	mov	r2, #5
   14728:	ldr	r1, [pc, #904]	; 14ab8 <__assert_fail@plt+0x3264>
   1472c:	mov	r0, #0
   14730:	bl	114e8 <dcgettext@plt>
   14734:	ldr	r1, [r4]
   14738:	bl	11428 <fputs_unlocked@plt>
   1473c:	mov	r2, #5
   14740:	ldr	r1, [pc, #884]	; 14abc <__assert_fail@plt+0x3268>
   14744:	mov	r0, #0
   14748:	bl	114e8 <dcgettext@plt>
   1474c:	ldr	r1, [r4]
   14750:	bl	11428 <fputs_unlocked@plt>
   14754:	mov	r2, #5
   14758:	ldr	r1, [pc, #864]	; 14ac0 <__assert_fail@plt+0x326c>
   1475c:	mov	r0, #0
   14760:	bl	114e8 <dcgettext@plt>
   14764:	ldr	r1, [r4]
   14768:	bl	11428 <fputs_unlocked@plt>
   1476c:	mov	r2, #5
   14770:	ldr	r1, [pc, #844]	; 14ac4 <__assert_fail@plt+0x3270>
   14774:	mov	r0, #0
   14778:	bl	114e8 <dcgettext@plt>
   1477c:	ldr	r1, [r4]
   14780:	bl	11428 <fputs_unlocked@plt>
   14784:	mov	r2, #5
   14788:	ldr	r1, [pc, #824]	; 14ac8 <__assert_fail@plt+0x3274>
   1478c:	mov	r0, #0
   14790:	bl	114e8 <dcgettext@plt>
   14794:	ldr	r1, [r4]
   14798:	bl	11428 <fputs_unlocked@plt>
   1479c:	mov	r2, #5
   147a0:	ldr	r1, [pc, #804]	; 14acc <__assert_fail@plt+0x3278>
   147a4:	mov	r0, #0
   147a8:	bl	114e8 <dcgettext@plt>
   147ac:	ldr	r1, [r4]
   147b0:	bl	11428 <fputs_unlocked@plt>
   147b4:	mov	r2, #5
   147b8:	ldr	r1, [pc, #784]	; 14ad0 <__assert_fail@plt+0x327c>
   147bc:	mov	r0, #0
   147c0:	bl	114e8 <dcgettext@plt>
   147c4:	ldr	r1, [r4]
   147c8:	bl	11428 <fputs_unlocked@plt>
   147cc:	mov	r2, #5
   147d0:	ldr	r1, [pc, #764]	; 14ad4 <__assert_fail@plt+0x3280>
   147d4:	mov	r0, #0
   147d8:	bl	114e8 <dcgettext@plt>
   147dc:	ldr	r1, [r4]
   147e0:	bl	11428 <fputs_unlocked@plt>
   147e4:	mov	r2, #5
   147e8:	ldr	r1, [pc, #744]	; 14ad8 <__assert_fail@plt+0x3284>
   147ec:	mov	r0, #0
   147f0:	bl	114e8 <dcgettext@plt>
   147f4:	ldr	r1, [r4]
   147f8:	bl	11428 <fputs_unlocked@plt>
   147fc:	mov	r2, #5
   14800:	ldr	r1, [pc, #724]	; 14adc <__assert_fail@plt+0x3288>
   14804:	mov	r0, #0
   14808:	bl	114e8 <dcgettext@plt>
   1480c:	ldr	r1, [r4]
   14810:	bl	11428 <fputs_unlocked@plt>
   14814:	mov	r2, #5
   14818:	ldr	r1, [pc, #704]	; 14ae0 <__assert_fail@plt+0x328c>
   1481c:	mov	r0, #0
   14820:	bl	114e8 <dcgettext@plt>
   14824:	ldr	r1, [r4]
   14828:	bl	11428 <fputs_unlocked@plt>
   1482c:	mov	r2, #5
   14830:	ldr	r1, [pc, #684]	; 14ae4 <__assert_fail@plt+0x3290>
   14834:	mov	r0, #0
   14838:	bl	114e8 <dcgettext@plt>
   1483c:	ldr	r4, [pc, #676]	; 14ae8 <__assert_fail@plt+0x3294>
   14840:	add	r2, r4, #36	; 0x24
   14844:	mov	r1, r0
   14848:	mov	r0, #1
   1484c:	bl	116ec <__printf_chk@plt>
   14850:	mov	r2, #5
   14854:	ldr	r1, [pc, #656]	; 14aec <__assert_fail@plt+0x3298>
   14858:	mov	r0, #0
   1485c:	bl	114e8 <dcgettext@plt>
   14860:	mov	r2, r4
   14864:	mov	r1, r0
   14868:	mov	r0, #1
   1486c:	bl	116ec <__printf_chk@plt>
   14870:	mov	r2, #5
   14874:	ldr	r1, [pc, #628]	; 14af0 <__assert_fail@plt+0x329c>
   14878:	mov	r0, #0
   1487c:	bl	114e8 <dcgettext@plt>
   14880:	ldr	r2, [pc, #620]	; 14af4 <__assert_fail@plt+0x32a0>
   14884:	mov	r1, r0
   14888:	mov	r0, #1
   1488c:	bl	116ec <__printf_chk@plt>
   14890:	mov	lr, sp
   14894:	add	ip, r4, #160	; 0xa0
   14898:	ldm	ip!, {r0, r1, r2, r3}
   1489c:	stmia	lr!, {r0, r1, r2, r3}
   148a0:	ldm	ip!, {r0, r1, r2, r3}
   148a4:	stmia	lr!, {r0, r1, r2, r3}
   148a8:	ldm	ip!, {r0, r1, r2, r3}
   148ac:	stmia	lr!, {r0, r1, r2, r3}
   148b0:	ldm	ip, {r0, r1}
   148b4:	stm	lr, {r0, r1}
   148b8:	ldr	r1, [sp]
   148bc:	cmp	r1, #0
   148c0:	moveq	r4, sp
   148c4:	beq	148ec <__assert_fail@plt+0x3098>
   148c8:	mov	r4, sp
   148cc:	ldr	r5, [pc, #544]	; 14af4 <__assert_fail@plt+0x32a0>
   148d0:	mov	r0, r5
   148d4:	bl	11464 <strcmp@plt>
   148d8:	cmp	r0, #0
   148dc:	beq	148ec <__assert_fail@plt+0x3098>
   148e0:	ldr	r1, [r4, #8]!
   148e4:	cmp	r1, #0
   148e8:	bne	148d0 <__assert_fail@plt+0x307c>
   148ec:	ldr	r4, [r4, #4]
   148f0:	cmp	r4, #0
   148f4:	beq	14a08 <__assert_fail@plt+0x31b4>
   148f8:	mov	r2, #5
   148fc:	ldr	r1, [pc, #500]	; 14af8 <__assert_fail@plt+0x32a4>
   14900:	mov	r0, #0
   14904:	bl	114e8 <dcgettext@plt>
   14908:	ldr	r3, [pc, #492]	; 14afc <__assert_fail@plt+0x32a8>
   1490c:	ldr	r2, [pc, #492]	; 14b00 <__assert_fail@plt+0x32ac>
   14910:	mov	r1, r0
   14914:	mov	r0, #1
   14918:	bl	116ec <__printf_chk@plt>
   1491c:	mov	r1, #0
   14920:	mov	r0, #5
   14924:	bl	11764 <setlocale@plt>
   14928:	cmp	r0, #0
   1492c:	beq	14944 <__assert_fail@plt+0x30f0>
   14930:	mov	r2, #3
   14934:	ldr	r1, [pc, #456]	; 14b04 <__assert_fail@plt+0x32b0>
   14938:	bl	11818 <strncmp@plt>
   1493c:	cmp	r0, #0
   14940:	bne	149a4 <__assert_fail@plt+0x3150>
   14944:	mov	r2, #5
   14948:	ldr	r1, [pc, #440]	; 14b08 <__assert_fail@plt+0x32b4>
   1494c:	mov	r0, #0
   14950:	bl	114e8 <dcgettext@plt>
   14954:	ldr	r5, [pc, #408]	; 14af4 <__assert_fail@plt+0x32a0>
   14958:	mov	r3, r5
   1495c:	ldr	r2, [pc, #408]	; 14afc <__assert_fail@plt+0x32a8>
   14960:	mov	r1, r0
   14964:	mov	r0, #1
   14968:	bl	116ec <__printf_chk@plt>
   1496c:	mov	r2, #5
   14970:	ldr	r1, [pc, #404]	; 14b0c <__assert_fail@plt+0x32b8>
   14974:	mov	r0, #0
   14978:	bl	114e8 <dcgettext@plt>
   1497c:	mov	r1, r0
   14980:	ldr	r2, [pc, #392]	; 14b10 <__assert_fail@plt+0x32bc>
   14984:	ldr	r3, [pc, #392]	; 14b14 <__assert_fail@plt+0x32c0>
   14988:	cmp	r4, r5
   1498c:	movne	r3, r2
   14990:	mov	r2, r4
   14994:	mov	r0, #1
   14998:	bl	116ec <__printf_chk@plt>
   1499c:	b	146ac <__assert_fail@plt+0x2e58>
   149a0:	ldr	r4, [pc, #332]	; 14af4 <__assert_fail@plt+0x32a0>
   149a4:	mov	r2, #5
   149a8:	ldr	r1, [pc, #360]	; 14b18 <__assert_fail@plt+0x32c4>
   149ac:	mov	r0, #0
   149b0:	bl	114e8 <dcgettext@plt>
   149b4:	ldr	r3, [pc, #240]	; 14aac <__assert_fail@plt+0x3258>
   149b8:	ldr	r1, [r3]
   149bc:	bl	11428 <fputs_unlocked@plt>
   149c0:	b	14944 <__assert_fail@plt+0x30f0>
   149c4:	mov	r2, #5
   149c8:	ldr	r1, [pc, #312]	; 14b08 <__assert_fail@plt+0x32b4>
   149cc:	mov	r0, #0
   149d0:	bl	114e8 <dcgettext@plt>
   149d4:	ldr	r4, [pc, #280]	; 14af4 <__assert_fail@plt+0x32a0>
   149d8:	mov	r3, r4
   149dc:	ldr	r2, [pc, #280]	; 14afc <__assert_fail@plt+0x32a8>
   149e0:	mov	r1, r0
   149e4:	mov	r0, #1
   149e8:	bl	116ec <__printf_chk@plt>
   149ec:	mov	r2, #5
   149f0:	ldr	r1, [pc, #276]	; 14b0c <__assert_fail@plt+0x32b8>
   149f4:	mov	r0, #0
   149f8:	bl	114e8 <dcgettext@plt>
   149fc:	mov	r1, r0
   14a00:	ldr	r3, [pc, #268]	; 14b14 <__assert_fail@plt+0x32c0>
   14a04:	b	14990 <__assert_fail@plt+0x313c>
   14a08:	mov	r2, #5
   14a0c:	ldr	r1, [pc, #228]	; 14af8 <__assert_fail@plt+0x32a4>
   14a10:	mov	r0, #0
   14a14:	bl	114e8 <dcgettext@plt>
   14a18:	ldr	r3, [pc, #220]	; 14afc <__assert_fail@plt+0x32a8>
   14a1c:	ldr	r2, [pc, #220]	; 14b00 <__assert_fail@plt+0x32ac>
   14a20:	mov	r1, r0
   14a24:	mov	r0, #1
   14a28:	bl	116ec <__printf_chk@plt>
   14a2c:	mov	r1, #0
   14a30:	mov	r0, #5
   14a34:	bl	11764 <setlocale@plt>
   14a38:	cmp	r0, #0
   14a3c:	beq	149c4 <__assert_fail@plt+0x3170>
   14a40:	mov	r2, #3
   14a44:	ldr	r1, [pc, #184]	; 14b04 <__assert_fail@plt+0x32b0>
   14a48:	bl	11818 <strncmp@plt>
   14a4c:	cmp	r0, #0
   14a50:	bne	149a0 <__assert_fail@plt+0x314c>
   14a54:	mov	r2, #5
   14a58:	ldr	r1, [pc, #168]	; 14b08 <__assert_fail@plt+0x32b4>
   14a5c:	mov	r0, #0
   14a60:	bl	114e8 <dcgettext@plt>
   14a64:	ldr	r4, [pc, #136]	; 14af4 <__assert_fail@plt+0x32a0>
   14a68:	mov	r3, r4
   14a6c:	ldr	r2, [pc, #136]	; 14afc <__assert_fail@plt+0x32a8>
   14a70:	mov	r1, r0
   14a74:	mov	r0, #1
   14a78:	bl	116ec <__printf_chk@plt>
   14a7c:	mov	r2, #5
   14a80:	ldr	r1, [pc, #132]	; 14b0c <__assert_fail@plt+0x32b8>
   14a84:	mov	r0, #0
   14a88:	bl	114e8 <dcgettext@plt>
   14a8c:	mov	r1, r0
   14a90:	ldr	r3, [pc, #124]	; 14b14 <__assert_fail@plt+0x32c0>
   14a94:	b	14990 <__assert_fail@plt+0x313c>
   14a98:	andeq	pc, r2, r8, ror #3
   14a9c:	andeq	sp, r1, r4, lsr r5
   14aa0:	andeq	pc, r2, r8, ror r2	; <UNPREDICTABLE>
   14aa4:	andeq	sp, r1, ip, asr r5
   14aa8:	andeq	sp, r1, ip, ror r5
   14aac:	andeq	pc, r2, ip, ror #3
   14ab0:	andeq	sp, r1, r4, lsr #11
   14ab4:	strdeq	sp, [r1], -r0
   14ab8:	andeq	sp, r1, r0, ror #12
   14abc:	andeq	sp, r1, r8, ror #13
   14ac0:	andeq	sp, r1, ip, lsl #17
   14ac4:			; <UNDEFINED> instruction: 0x0001d8bc
   14ac8:	strdeq	sp, [r1], -r4
   14acc:	andeq	sp, r1, ip, ror #19
   14ad0:	andeq	sp, r1, r4, lsr fp
   14ad4:	andeq	sp, r1, ip, lsr #24
   14ad8:	andeq	sp, r1, ip, ror lr
   14adc:	andeq	lr, r1, ip, asr r0
   14ae0:	andeq	lr, r1, ip, asr #2
   14ae4:	andeq	lr, r1, r8, asr #4
   14ae8:	andeq	ip, r1, r4, ror #23
   14aec:	andeq	lr, r1, r0, lsl #5
   14af0:	andeq	lr, r1, r4, asr #5
   14af4:	andeq	sp, r1, ip, lsr #10
   14af8:	andeq	lr, r1, r4, lsl #7
   14afc:	muleq	r1, ip, r3
   14b00:	andeq	lr, r1, r4, asr #7
   14b04:	ldrdeq	lr, [r1], -r4
   14b08:	andeq	lr, r1, r0, lsr #8
   14b0c:	andeq	lr, r1, ip, lsr r4
   14b10:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   14b14:	muleq	r1, r0, r5
   14b18:	ldrdeq	lr, [r1], -r8
   14b1c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14b20:	sub	sp, sp, #124	; 0x7c
   14b24:	str	r0, [sp, #16]
   14b28:	mov	r5, r1
   14b2c:	ldr	r0, [r1]
   14b30:	bl	18284 <__assert_fail@plt+0x6a30>
   14b34:	ldr	r1, [pc, #1092]	; 14f80 <__assert_fail@plt+0x372c>
   14b38:	mov	r0, #6
   14b3c:	bl	11764 <setlocale@plt>
   14b40:	ldr	r4, [pc, #1084]	; 14f84 <__assert_fail@plt+0x3730>
   14b44:	ldr	r1, [pc, #1084]	; 14f88 <__assert_fail@plt+0x3734>
   14b48:	mov	r0, r4
   14b4c:	bl	117f4 <bindtextdomain@plt>
   14b50:	mov	r0, r4
   14b54:	bl	11518 <textdomain@plt>
   14b58:	bl	117a0 <localeconv@plt>
   14b5c:	ldr	r0, [r0]
   14b60:	ldrb	r2, [r0]
   14b64:	ldr	r3, [pc, #1056]	; 14f8c <__assert_fail@plt+0x3738>
   14b68:	cmp	r2, #0
   14b6c:	moveq	r0, r3
   14b70:	ldr	r4, [pc, #1048]	; 14f90 <__assert_fail@plt+0x373c>
   14b74:	str	r0, [r4, #100]	; 0x64
   14b78:	bl	11674 <strlen@plt>
   14b7c:	str	r0, [r4, #96]	; 0x60
   14b80:	ldr	r0, [pc, #1036]	; 14f94 <__assert_fail@plt+0x3740>
   14b84:	bl	1cbc0 <__assert_fail@plt+0xb36c>
   14b88:	mov	sl, #0
   14b8c:	str	sl, [sp, #24]
   14b90:	str	sl, [sp, #20]
   14b94:	ldr	r4, [pc, #1020]	; 14f98 <__assert_fail@plt+0x3744>
   14b98:	ldr	r6, [pc, #1020]	; 14f9c <__assert_fail@plt+0x3748>
   14b9c:	ldr	r7, [pc, #1004]	; 14f90 <__assert_fail@plt+0x373c>
   14ba0:	ldr	r8, [pc, #1016]	; 14fa0 <__assert_fail@plt+0x374c>
   14ba4:	ldr	r9, [pc, #1016]	; 14fa4 <__assert_fail@plt+0x3750>
   14ba8:	add	fp, r4, #216	; 0xd8
   14bac:	mov	r3, #0
   14bb0:	str	r3, [sp]
   14bb4:	add	r3, r4, #244	; 0xf4
   14bb8:	mov	r2, r6
   14bbc:	mov	r1, r5
   14bc0:	ldr	r0, [sp, #16]
   14bc4:	bl	11638 <getopt_long@plt>
   14bc8:	cmn	r0, #1
   14bcc:	beq	14d30 <__assert_fail@plt+0x34dc>
   14bd0:	cmp	r0, #76	; 0x4c
   14bd4:	beq	14c5c <__assert_fail@plt+0x3408>
   14bd8:	ble	14c10 <__assert_fail@plt+0x33bc>
   14bdc:	cmp	r0, #102	; 0x66
   14be0:	beq	14d24 <__assert_fail@plt+0x34d0>
   14be4:	ble	14c30 <__assert_fail@plt+0x33dc>
   14be8:	cmp	r0, #116	; 0x74
   14bec:	beq	14c50 <__assert_fail@plt+0x33fc>
   14bf0:	cmp	r0, #256	; 0x100
   14bf4:	bne	14c28 <__assert_fail@plt+0x33d4>
   14bf8:	ldr	sl, [r8]
   14bfc:	mov	r3, #1
   14c00:	strb	r3, [r7, #117]	; 0x75
   14c04:	ldr	r3, [pc, #884]	; 14f80 <__assert_fail@plt+0x372c>
   14c08:	str	r3, [r9]
   14c0c:	b	14bac <__assert_fail@plt+0x3358>
   14c10:	cmn	r0, #2
   14c14:	beq	14ce8 <__assert_fail@plt+0x3494>
   14c18:	cmp	r0, #0
   14c1c:	beq	14c68 <__assert_fail@plt+0x3414>
   14c20:	cmn	r0, #3
   14c24:	beq	14cf0 <__assert_fail@plt+0x349c>
   14c28:	mov	r0, #1
   14c2c:	bl	1466c <__assert_fail@plt+0x2e18>
   14c30:	cmp	r0, #99	; 0x63
   14c34:	bne	14c28 <__assert_fail@plt+0x33d4>
   14c38:	ldr	sl, [r8]
   14c3c:	mov	r3, #0
   14c40:	strb	r3, [r7, #117]	; 0x75
   14c44:	ldr	r3, [pc, #860]	; 14fa8 <__assert_fail@plt+0x3754>
   14c48:	str	r3, [r9]
   14c4c:	b	14bac <__assert_fail@plt+0x3358>
   14c50:	mov	r3, #1
   14c54:	str	r3, [sp, #24]
   14c58:	b	14bac <__assert_fail@plt+0x3358>
   14c5c:	mov	r3, #1
   14c60:	strb	r3, [r7, #116]	; 0x74
   14c64:	b	14bac <__assert_fail@plt+0x3358>
   14c68:	mov	r3, #1
   14c6c:	str	r3, [sp, #8]
   14c70:	ldr	r3, [pc, #820]	; 14fac <__assert_fail@plt+0x3758>
   14c74:	ldr	r3, [r3]
   14c78:	str	r3, [sp, #4]
   14c7c:	mov	r3, #4
   14c80:	str	r3, [sp]
   14c84:	mov	r3, fp
   14c88:	add	r2, r4, #228	; 0xe4
   14c8c:	ldr	r1, [r8]
   14c90:	ldr	r0, [pc, #792]	; 14fb0 <__assert_fail@plt+0x375c>
   14c94:	bl	15700 <__assert_fail@plt+0x3eac>
   14c98:	add	r0, r4, r0, lsl #2
   14c9c:	ldr	r3, [r0, #216]	; 0xd8
   14ca0:	cmp	r3, #1
   14ca4:	beq	14cc4 <__assert_fail@plt+0x3470>
   14ca8:	bcc	14cd8 <__assert_fail@plt+0x3484>
   14cac:	cmp	r3, #2
   14cb0:	moveq	r3, #0
   14cb4:	strbeq	r3, [r7, #119]	; 0x77
   14cb8:	moveq	r3, #1
   14cbc:	strbeq	r3, [r7, #118]	; 0x76
   14cc0:	b	14bac <__assert_fail@plt+0x3358>
   14cc4:	mov	r3, #1
   14cc8:	strb	r3, [r7, #119]	; 0x77
   14ccc:	mov	r3, #0
   14cd0:	strb	r3, [r7, #118]	; 0x76
   14cd4:	b	14bac <__assert_fail@plt+0x3358>
   14cd8:	mov	r3, #0
   14cdc:	strb	r3, [r7, #119]	; 0x77
   14ce0:	strb	r3, [r7, #118]	; 0x76
   14ce4:	b	14bac <__assert_fail@plt+0x3358>
   14ce8:	mov	r0, #0
   14cec:	bl	1466c <__assert_fail@plt+0x2e18>
   14cf0:	mov	r4, #0
   14cf4:	str	r4, [sp, #4]
   14cf8:	ldr	r3, [pc, #692]	; 14fb4 <__assert_fail@plt+0x3760>
   14cfc:	str	r3, [sp]
   14d00:	ldr	r3, [pc, #688]	; 14fb8 <__assert_fail@plt+0x3764>
   14d04:	ldr	r3, [r3]
   14d08:	ldr	r2, [pc, #684]	; 14fbc <__assert_fail@plt+0x3768>
   14d0c:	ldr	r1, [pc, #684]	; 14fc0 <__assert_fail@plt+0x376c>
   14d10:	ldr	r0, [pc, #684]	; 14fc4 <__assert_fail@plt+0x3770>
   14d14:	ldr	r0, [r0]
   14d18:	bl	1a8d0 <__assert_fail@plt+0x907c>
   14d1c:	mov	r0, r4
   14d20:	bl	1165c <exit@plt>
   14d24:	mov	r3, #1
   14d28:	str	r3, [sp, #20]
   14d2c:	b	14bac <__assert_fail@plt+0x3358>
   14d30:	ldr	r3, [pc, #656]	; 14fc8 <__assert_fail@plt+0x3774>
   14d34:	ldr	r3, [r3]
   14d38:	ldr	r2, [sp, #16]
   14d3c:	cmp	r2, r3
   14d40:	beq	14dc8 <__assert_fail@plt+0x3574>
   14d44:	cmp	sl, #0
   14d48:	beq	14e48 <__assert_fail@plt+0x35f4>
   14d4c:	ldr	r1, [pc, #632]	; 14fcc <__assert_fail@plt+0x3778>
   14d50:	mov	r0, sl
   14d54:	bl	1b54c <__assert_fail@plt+0x9cf8>
   14d58:	cmp	r0, #0
   14d5c:	streq	sl, [sp, #28]
   14d60:	beq	14da4 <__assert_fail@plt+0x3550>
   14d64:	ldr	r0, [pc, #612]	; 14fd0 <__assert_fail@plt+0x377c>
   14d68:	bl	115cc <getenv@plt>
   14d6c:	subs	r4, r0, #0
   14d70:	beq	14e34 <__assert_fail@plt+0x35e0>
   14d74:	mov	r3, #4
   14d78:	ldr	r2, [pc, #596]	; 14fd4 <__assert_fail@plt+0x3780>
   14d7c:	ldr	r1, [pc, #596]	; 14fd8 <__assert_fail@plt+0x3784>
   14d80:	mov	r0, r4
   14d84:	bl	15454 <__assert_fail@plt+0x3c00>
   14d88:	cmp	r0, #0
   14d8c:	blt	14df0 <__assert_fail@plt+0x359c>
   14d90:	ldr	r3, [pc, #572]	; 14fd4 <__assert_fail@plt+0x3780>
   14d94:	ldr	r1, [r3, r0, lsl #2]
   14d98:	mov	r0, #0
   14d9c:	bl	19828 <__assert_fail@plt+0x7fd4>
   14da0:	str	sl, [sp, #28]
   14da4:	ldr	r3, [pc, #540]	; 14fc8 <__assert_fail@plt+0x3774>
   14da8:	ldr	r4, [r3]
   14dac:	mov	r6, #1
   14db0:	ldr	fp, [pc, #548]	; 14fdc <__assert_fail@plt+0x3788>
   14db4:	ldr	r9, [pc, #548]	; 14fe0 <__assert_fail@plt+0x378c>
   14db8:	str	sl, [sp, #24]
   14dbc:	ldr	sl, [sp, #20]
   14dc0:	ldr	r8, [sp, #16]
   14dc4:	b	14f14 <__assert_fail@plt+0x36c0>
   14dc8:	mov	r2, #5
   14dcc:	ldr	r1, [pc, #528]	; 14fe4 <__assert_fail@plt+0x3790>
   14dd0:	mov	r0, #0
   14dd4:	bl	114e8 <dcgettext@plt>
   14dd8:	mov	r2, r0
   14ddc:	mov	r1, #0
   14de0:	mov	r0, r1
   14de4:	bl	115a8 <error@plt>
   14de8:	mov	r0, #1
   14dec:	bl	1466c <__assert_fail@plt+0x2e18>
   14df0:	mov	r1, #4
   14df4:	mov	r0, #0
   14df8:	bl	19828 <__assert_fail@plt+0x7fd4>
   14dfc:	mov	r2, #5
   14e00:	ldr	r1, [pc, #480]	; 14fe8 <__assert_fail@plt+0x3794>
   14e04:	mov	r0, #0
   14e08:	bl	114e8 <dcgettext@plt>
   14e0c:	mov	r6, r0
   14e10:	mov	r0, r4
   14e14:	bl	19dd4 <__assert_fail@plt+0x8580>
   14e18:	mov	r3, r0
   14e1c:	mov	r2, r6
   14e20:	mov	r1, #0
   14e24:	mov	r0, r1
   14e28:	bl	115a8 <error@plt>
   14e2c:	str	sl, [sp, #28]
   14e30:	b	14da4 <__assert_fail@plt+0x3550>
   14e34:	mov	r1, #4
   14e38:	mov	r0, #0
   14e3c:	bl	19828 <__assert_fail@plt+0x7fd4>
   14e40:	str	sl, [sp, #28]
   14e44:	b	14da4 <__assert_fail@plt+0x3550>
   14e48:	mov	r2, #0
   14e4c:	ldr	r6, [sp, #24]
   14e50:	mov	r1, r6
   14e54:	ldr	r4, [sp, #20]
   14e58:	mov	r0, r4
   14e5c:	bl	11988 <__assert_fail@plt+0x134>
   14e60:	mov	sl, r0
   14e64:	mov	r2, #1
   14e68:	mov	r1, r6
   14e6c:	mov	r0, r4
   14e70:	bl	11988 <__assert_fail@plt+0x134>
   14e74:	str	r0, [sp, #28]
   14e78:	b	14da4 <__assert_fail@plt+0x3550>
   14e7c:	mov	r2, #5
   14e80:	mov	r1, r9
   14e84:	bl	114e8 <dcgettext@plt>
   14e88:	str	r0, [sp, #16]
   14e8c:	mov	r1, r7
   14e90:	mov	r0, #4
   14e94:	bl	19ba0 <__assert_fail@plt+0x834c>
   14e98:	mov	r3, r0
   14e9c:	ldr	r2, [sp, #16]
   14ea0:	mov	r1, #0
   14ea4:	mov	r0, r1
   14ea8:	bl	115a8 <error@plt>
   14eac:	mov	r0, #0
   14eb0:	b	14f0c <__assert_fail@plt+0x36b8>
   14eb4:	bl	116b0 <__errno_location@plt>
   14eb8:	ldr	r3, [r0]
   14ebc:	str	r3, [sp, #16]
   14ec0:	mov	r2, #5
   14ec4:	ldr	r1, [pc, #288]	; 14fec <__assert_fail@plt+0x3798>
   14ec8:	mov	r0, #0
   14ecc:	bl	114e8 <dcgettext@plt>
   14ed0:	str	r0, [sp, #20]
   14ed4:	mov	r1, r7
   14ed8:	mov	r0, #4
   14edc:	bl	19ba0 <__assert_fail@plt+0x834c>
   14ee0:	mov	r3, r0
   14ee4:	ldr	r2, [sp, #20]
   14ee8:	ldr	r1, [sp, #16]
   14eec:	mov	r0, #0
   14ef0:	bl	115a8 <error@plt>
   14ef4:	mov	r0, #0
   14ef8:	b	14f0c <__assert_fail@plt+0x36b8>
   14efc:	ldr	r2, [sp, #28]
   14f00:	ldr	r1, [sp, #24]
   14f04:	ldr	r0, [r5, r4, lsl #2]
   14f08:	bl	1414c <__assert_fail@plt+0x28f8>
   14f0c:	and	r6, r6, r0
   14f10:	add	r4, r4, #1
   14f14:	cmp	r4, r8
   14f18:	bge	14f78 <__assert_fail@plt+0x3724>
   14f1c:	cmp	sl, #0
   14f20:	beq	14efc <__assert_fail@plt+0x36a8>
   14f24:	ldr	r7, [r5, r4, lsl #2]
   14f28:	mov	r1, fp
   14f2c:	mov	r0, r7
   14f30:	bl	11464 <strcmp@plt>
   14f34:	cmp	r0, #0
   14f38:	beq	14e7c <__assert_fail@plt+0x3628>
   14f3c:	add	r1, sp, #32
   14f40:	mov	r0, r7
   14f44:	bl	1177c <statfs64@plt>
   14f48:	cmp	r0, #0
   14f4c:	bne	14eb4 <__assert_fail@plt+0x3660>
   14f50:	add	r3, sp, #32
   14f54:	str	r3, [sp]
   14f58:	ldr	r3, [pc, #144]	; 14ff0 <__assert_fail@plt+0x379c>
   14f5c:	mov	r2, r7
   14f60:	mvn	r1, #0
   14f64:	ldr	r0, [sp, #24]
   14f68:	bl	13b50 <__assert_fail@plt+0x22fc>
   14f6c:	eor	r0, r0, #1
   14f70:	uxtb	r0, r0
   14f74:	b	14f0c <__assert_fail@plt+0x36b8>
   14f78:	eor	r0, r6, #1
   14f7c:	bl	1165c <exit@plt>
   14f80:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   14f84:	andeq	lr, r1, r8, asr #7
   14f88:	andeq	lr, r1, r4, ror r4
   14f8c:	andeq	lr, r1, r0, ror r4
   14f90:	strdeq	pc, [r2], -r8
   14f94:	strdeq	r5, [r1], -r4
   14f98:	andeq	ip, r1, r4, ror #23
   14f9c:	andeq	lr, r1, r8, lsr #9
   14fa0:	strdeq	pc, [r2], -r0
   14fa4:	andeq	pc, r2, r4, lsl #3
   14fa8:	andeq	lr, r1, r8, asr r0
   14fac:	andeq	pc, r2, ip, lsl #3
   14fb0:	andeq	lr, r1, ip, lsl #9
   14fb4:	muleq	r1, r8, r4
   14fb8:	andeq	pc, r2, r8, lsl #3
   14fbc:	andeq	lr, r1, r4, asr #7
   14fc0:	andeq	sp, r1, ip, lsr #10
   14fc4:	andeq	pc, r2, ip, ror #3
   14fc8:	andeq	pc, r2, r0, ror #3
   14fcc:	andeq	lr, r1, r0, asr #9
   14fd0:	andeq	lr, r1, r4, asr #9
   14fd4:	andeq	lr, r1, r8, lsl #18
   14fd8:	andeq	lr, r1, r0, lsr r9
   14fdc:	andeq	ip, r1, r8, asr #30
   14fe0:	andeq	lr, r1, r8, lsl r5
   14fe4:			; <UNDEFINED> instruction: 0x0001e4b0
   14fe8:	ldrdeq	lr, [r1], -r4
   14fec:	andeq	lr, r1, ip, asr r5
   14ff0:	andeq	r1, r1, ip, lsl #25
   14ff4:	push	{r4, r5, r6, fp, lr}
   14ff8:	add	fp, sp, #16
   14ffc:	sub	sp, sp, #220	; 0xdc
   15000:	mov	r5, r0
   15004:	mov	r4, r1
   15008:	sub	r0, fp, #28
   1500c:	bl	19de8 <__assert_fail@plt+0x8594>
   15010:	cmp	r0, #0
   15014:	bne	150f8 <__assert_fail@plt+0x38a4>
   15018:	ldr	r3, [r4, #16]
   1501c:	and	r3, r3, #61440	; 0xf000
   15020:	cmp	r3, #16384	; 0x4000
   15024:	beq	15128 <__assert_fail@plt+0x38d4>
   15028:	mov	r0, r5
   1502c:	bl	158e8 <__assert_fail@plt+0x4094>
   15030:	mov	r4, r0
   15034:	bl	11674 <strlen@plt>
   15038:	add	r3, r0, #15
   1503c:	bic	r3, r3, #7
   15040:	sub	sp, sp, r3
   15044:	add	r2, r0, #1
   15048:	mov	r1, r4
   1504c:	mov	r0, sp
   15050:	bl	114b8 <memcpy@plt>
   15054:	mov	r5, r0
   15058:	mov	r0, r4
   1505c:	bl	15c58 <__assert_fail@plt+0x4404>
   15060:	mov	r0, r5
   15064:	bl	11524 <chdir@plt>
   15068:	cmp	r0, #0
   1506c:	blt	1518c <__assert_fail@plt+0x3938>
   15070:	sub	r2, fp, #132	; 0x84
   15074:	ldr	r1, [pc, #636]	; 152f8 <__assert_fail@plt+0x3aa4>
   15078:	mov	r0, #3
   1507c:	bl	11800 <__xstat64@plt>
   15080:	cmp	r0, #0
   15084:	blt	151d0 <__assert_fail@plt+0x397c>
   15088:	ldr	r4, [pc, #620]	; 152fc <__assert_fail@plt+0x3aa8>
   1508c:	mov	r5, #3
   15090:	mov	r6, #104	; 0x68
   15094:	sub	r2, fp, #236	; 0xec
   15098:	mov	r1, r4
   1509c:	mov	r0, r5
   150a0:	bl	11800 <__xstat64@plt>
   150a4:	cmp	r0, #0
   150a8:	blt	15214 <__assert_fail@plt+0x39c0>
   150ac:	ldrd	r2, [fp, #-132]	; 0xffffff7c
   150b0:	ldrd	r0, [fp, #-236]	; 0xffffff14
   150b4:	cmp	r1, r3
   150b8:	cmpeq	r0, r2
   150bc:	bne	152c8 <__assert_fail@plt+0x3a74>
   150c0:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   150c4:	ldrd	r0, [fp, #-140]	; 0xffffff74
   150c8:	cmp	r1, r3
   150cc:	cmpeq	r0, r2
   150d0:	beq	152c8 <__assert_fail@plt+0x3a74>
   150d4:	mov	r0, r4
   150d8:	bl	11524 <chdir@plt>
   150dc:	cmp	r0, #0
   150e0:	blt	15288 <__assert_fail@plt+0x3a34>
   150e4:	mov	r2, r6
   150e8:	sub	r1, fp, #236	; 0xec
   150ec:	sub	r0, fp, #132	; 0x84
   150f0:	bl	114b8 <memcpy@plt>
   150f4:	b	15094 <__assert_fail@plt+0x3840>
   150f8:	bl	116b0 <__errno_location@plt>
   150fc:	ldr	r4, [r0]
   15100:	mov	r2, #5
   15104:	ldr	r1, [pc, #500]	; 15300 <__assert_fail@plt+0x3aac>
   15108:	mov	r0, #0
   1510c:	bl	114e8 <dcgettext@plt>
   15110:	mov	r2, r0
   15114:	mov	r1, r4
   15118:	mov	r0, #0
   1511c:	bl	115a8 <error@plt>
   15120:	mov	r5, #0
   15124:	b	1527c <__assert_fail@plt+0x3a28>
   15128:	mov	r2, #104	; 0x68
   1512c:	mov	r1, r4
   15130:	sub	r0, fp, #132	; 0x84
   15134:	bl	114b8 <memcpy@plt>
   15138:	mov	r0, r5
   1513c:	bl	11524 <chdir@plt>
   15140:	cmp	r0, #0
   15144:	bge	15088 <__assert_fail@plt+0x3834>
   15148:	bl	116b0 <__errno_location@plt>
   1514c:	ldr	r4, [r0]
   15150:	mov	r2, #5
   15154:	ldr	r1, [pc, #424]	; 15304 <__assert_fail@plt+0x3ab0>
   15158:	mov	r0, #0
   1515c:	bl	114e8 <dcgettext@plt>
   15160:	mov	r6, r0
   15164:	mov	r1, r5
   15168:	mov	r0, #4
   1516c:	bl	19ba0 <__assert_fail@plt+0x834c>
   15170:	mov	r3, r0
   15174:	mov	r2, r6
   15178:	mov	r1, r4
   1517c:	mov	r0, #0
   15180:	bl	115a8 <error@plt>
   15184:	mov	r5, #0
   15188:	b	1527c <__assert_fail@plt+0x3a28>
   1518c:	bl	116b0 <__errno_location@plt>
   15190:	ldr	r4, [r0]
   15194:	mov	r2, #5
   15198:	ldr	r1, [pc, #356]	; 15304 <__assert_fail@plt+0x3ab0>
   1519c:	mov	r0, #0
   151a0:	bl	114e8 <dcgettext@plt>
   151a4:	mov	r6, r0
   151a8:	mov	r1, r5
   151ac:	mov	r0, #4
   151b0:	bl	19ba0 <__assert_fail@plt+0x834c>
   151b4:	mov	r3, r0
   151b8:	mov	r2, r6
   151bc:	mov	r1, r4
   151c0:	mov	r0, #0
   151c4:	bl	115a8 <error@plt>
   151c8:	mov	r5, #0
   151cc:	b	1527c <__assert_fail@plt+0x3a28>
   151d0:	bl	116b0 <__errno_location@plt>
   151d4:	ldr	r4, [r0]
   151d8:	mov	r2, #5
   151dc:	ldr	r1, [pc, #292]	; 15308 <__assert_fail@plt+0x3ab4>
   151e0:	mov	r0, #0
   151e4:	bl	114e8 <dcgettext@plt>
   151e8:	mov	r6, r0
   151ec:	mov	r1, r5
   151f0:	mov	r0, #4
   151f4:	bl	19ba0 <__assert_fail@plt+0x834c>
   151f8:	mov	r3, r0
   151fc:	mov	r2, r6
   15200:	mov	r1, r4
   15204:	mov	r0, #0
   15208:	bl	115a8 <error@plt>
   1520c:	mov	r5, #0
   15210:	b	15254 <__assert_fail@plt+0x3a00>
   15214:	bl	116b0 <__errno_location@plt>
   15218:	ldr	r4, [r0]
   1521c:	mov	r2, #5
   15220:	ldr	r1, [pc, #228]	; 1530c <__assert_fail@plt+0x3ab8>
   15224:	mov	r0, #0
   15228:	bl	114e8 <dcgettext@plt>
   1522c:	mov	r5, r0
   15230:	ldr	r1, [pc, #196]	; 152fc <__assert_fail@plt+0x3aa8>
   15234:	mov	r0, #4
   15238:	bl	19ba0 <__assert_fail@plt+0x834c>
   1523c:	mov	r3, r0
   15240:	mov	r2, r5
   15244:	mov	r1, r4
   15248:	mov	r0, #0
   1524c:	bl	115a8 <error@plt>
   15250:	mov	r5, #0
   15254:	bl	116b0 <__errno_location@plt>
   15258:	mov	r4, r0
   1525c:	ldr	r6, [r0]
   15260:	sub	r0, fp, #28
   15264:	bl	19e3c <__assert_fail@plt+0x85e8>
   15268:	cmp	r0, #0
   1526c:	bne	152d4 <__assert_fail@plt+0x3a80>
   15270:	sub	r0, fp, #28
   15274:	bl	19e64 <__assert_fail@plt+0x8610>
   15278:	str	r6, [r4]
   1527c:	mov	r0, r5
   15280:	sub	sp, fp, #16
   15284:	pop	{r4, r5, r6, fp, pc}
   15288:	bl	116b0 <__errno_location@plt>
   1528c:	ldr	r4, [r0]
   15290:	mov	r2, #5
   15294:	ldr	r1, [pc, #104]	; 15304 <__assert_fail@plt+0x3ab0>
   15298:	mov	r0, #0
   1529c:	bl	114e8 <dcgettext@plt>
   152a0:	mov	r5, r0
   152a4:	ldr	r1, [pc, #80]	; 152fc <__assert_fail@plt+0x3aa8>
   152a8:	mov	r0, #4
   152ac:	bl	19ba0 <__assert_fail@plt+0x834c>
   152b0:	mov	r3, r0
   152b4:	mov	r2, r5
   152b8:	mov	r1, r4
   152bc:	mov	r0, #0
   152c0:	bl	115a8 <error@plt>
   152c4:	b	15250 <__assert_fail@plt+0x39fc>
   152c8:	bl	1af80 <__assert_fail@plt+0x972c>
   152cc:	mov	r5, r0
   152d0:	b	15254 <__assert_fail@plt+0x3a00>
   152d4:	ldr	r4, [r4]
   152d8:	mov	r2, #5
   152dc:	ldr	r1, [pc, #44]	; 15310 <__assert_fail@plt+0x3abc>
   152e0:	mov	r0, #0
   152e4:	bl	114e8 <dcgettext@plt>
   152e8:	mov	r2, r0
   152ec:	mov	r1, r4
   152f0:	mov	r0, #1
   152f4:	bl	115a8 <error@plt>
   152f8:	andeq	lr, r1, r0, ror r4
   152fc:			; <UNDEFINED> instruction: 0x0001e6bc
   15300:	andeq	lr, r1, r4, asr r6
   15304:	andeq	lr, r1, r4, ror r6
   15308:	muleq	r1, r4, r6
   1530c:	andeq	lr, r1, r0, asr #13
   15310:	ldrdeq	lr, [r1], -r0
   15314:	push	{r4, r5, r6, r7, r8, lr}
   15318:	sub	sp, sp, #128	; 0x80
   1531c:	mov	r8, r0
   15320:	subs	r7, r1, #0
   15324:	moveq	r4, #128	; 0x80
   15328:	beq	15338 <__assert_fail@plt+0x3ae4>
   1532c:	cmp	r7, #1024	; 0x400
   15330:	addls	r4, r7, #1
   15334:	ldrhi	r4, [pc, #260]	; 15440 <__assert_fail@plt+0x3bec>
   15338:	cmp	r4, #128	; 0x80
   1533c:	cmpeq	r7, #0
   15340:	moveq	r6, #0
   15344:	moveq	r5, sp
   15348:	bne	15390 <__assert_fail@plt+0x3b3c>
   1534c:	mov	r2, r4
   15350:	mov	r1, r5
   15354:	mov	r0, r8
   15358:	bl	11548 <readlink@plt>
   1535c:	cmp	r0, #0
   15360:	blt	153b8 <__assert_fail@plt+0x3b64>
   15364:	cmp	r4, r0
   15368:	bhi	153d0 <__assert_fail@plt+0x3b7c>
   1536c:	mov	r0, r6
   15370:	bl	15c58 <__assert_fail@plt+0x4404>
   15374:	cmn	r4, #-1073741823	; 0xc0000001
   15378:	lslls	r4, r4, #1
   1537c:	bls	15338 <__assert_fail@plt+0x3ae4>
   15380:	cmn	r4, #-2147483646	; 0x80000002
   15384:	bhi	1542c <__assert_fail@plt+0x3bd8>
   15388:	mvn	r4, #-2147483648	; 0x80000000
   1538c:	b	15338 <__assert_fail@plt+0x3ae4>
   15390:	mov	r0, r4
   15394:	bl	1b030 <__assert_fail@plt+0x97dc>
   15398:	subs	r5, r0, #0
   1539c:	movne	r6, r5
   153a0:	bne	1534c <__assert_fail@plt+0x3af8>
   153a4:	bl	116b0 <__errno_location@plt>
   153a8:	mov	r3, #12
   153ac:	str	r3, [r0]
   153b0:	mov	r6, r5
   153b4:	b	153c4 <__assert_fail@plt+0x3b70>
   153b8:	mov	r0, r6
   153bc:	bl	15c58 <__assert_fail@plt+0x4404>
   153c0:	mov	r6, #0
   153c4:	mov	r0, r6
   153c8:	add	sp, sp, #128	; 0x80
   153cc:	pop	{r4, r5, r6, r7, r8, pc}
   153d0:	mov	r3, #0
   153d4:	strb	r3, [r5, r0]
   153d8:	cmp	r6, r3
   153dc:	beq	15400 <__assert_fail@plt+0x3bac>
   153e0:	add	r1, r0, #1
   153e4:	cmp	r4, r1
   153e8:	bls	153c4 <__assert_fail@plt+0x3b70>
   153ec:	mov	r0, r6
   153f0:	bl	1b060 <__assert_fail@plt+0x980c>
   153f4:	cmp	r0, #0
   153f8:	movne	r6, r0
   153fc:	b	153c4 <__assert_fail@plt+0x3b70>
   15400:	add	r4, r0, #1
   15404:	mov	r0, r4
   15408:	bl	1b030 <__assert_fail@plt+0x97dc>
   1540c:	subs	r6, r0, #0
   15410:	beq	153c4 <__assert_fail@plt+0x3b70>
   15414:	mov	r2, r4
   15418:	mov	r1, r5
   1541c:	mov	r0, r6
   15420:	bl	114b8 <memcpy@plt>
   15424:	mov	r6, r0
   15428:	b	153c4 <__assert_fail@plt+0x3b70>
   1542c:	bl	116b0 <__errno_location@plt>
   15430:	mov	r3, #12
   15434:	str	r3, [r0]
   15438:	mov	r6, #0
   1543c:	b	153c4 <__assert_fail@plt+0x3b70>
   15440:	andeq	r0, r0, r1, lsl #8
   15444:	push	{r4, lr}
   15448:	mov	r0, #1
   1544c:	bl	1466c <__assert_fail@plt+0x2e18>
   15450:	pop	{r4, pc}
   15454:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15458:	sub	sp, sp, #12
   1545c:	str	r0, [sp, #4]
   15460:	mov	r6, r1
   15464:	mov	fp, r2
   15468:	mov	r8, r3
   1546c:	bl	11674 <strlen@plt>
   15470:	str	r0, [sp]
   15474:	ldr	r4, [r6]
   15478:	cmp	r4, #0
   1547c:	beq	15524 <__assert_fail@plt+0x3cd0>
   15480:	mov	r5, fp
   15484:	mov	sl, #0
   15488:	mvn	r9, #0
   1548c:	mov	r7, sl
   15490:	b	154b0 <__assert_fail@plt+0x3c5c>
   15494:	mov	r9, r7
   15498:	b	15518 <__assert_fail@plt+0x3cc4>
   1549c:	add	r7, r7, #1
   154a0:	ldr	r4, [r6, #4]!
   154a4:	add	r5, r5, r8
   154a8:	cmp	r4, #0
   154ac:	beq	15510 <__assert_fail@plt+0x3cbc>
   154b0:	ldr	r2, [sp]
   154b4:	ldr	r1, [sp, #4]
   154b8:	mov	r0, r4
   154bc:	bl	11818 <strncmp@plt>
   154c0:	cmp	r0, #0
   154c4:	bne	1549c <__assert_fail@plt+0x3c48>
   154c8:	mov	r0, r4
   154cc:	bl	11674 <strlen@plt>
   154d0:	ldr	r3, [sp]
   154d4:	cmp	r3, r0
   154d8:	beq	15494 <__assert_fail@plt+0x3c40>
   154dc:	cmn	r9, #1
   154e0:	moveq	r9, r7
   154e4:	beq	1549c <__assert_fail@plt+0x3c48>
   154e8:	cmp	fp, #0
   154ec:	moveq	sl, #1
   154f0:	beq	1549c <__assert_fail@plt+0x3c48>
   154f4:	mov	r2, r8
   154f8:	mov	r1, r5
   154fc:	mla	r0, r8, r9, fp
   15500:	bl	114d0 <memcmp@plt>
   15504:	cmp	r0, #0
   15508:	movne	sl, #1
   1550c:	b	1549c <__assert_fail@plt+0x3c48>
   15510:	cmp	sl, #0
   15514:	mvnne	r9, #1
   15518:	mov	r0, r9
   1551c:	add	sp, sp, #12
   15520:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15524:	mvn	r9, #0
   15528:	b	15518 <__assert_fail@plt+0x3cc4>
   1552c:	push	{r4, r5, r6, lr}
   15530:	mov	r6, r0
   15534:	ldr	r0, [r1]
   15538:	cmp	r0, #0
   1553c:	beq	15578 <__assert_fail@plt+0x3d24>
   15540:	mov	r4, r1
   15544:	mov	r5, #0
   15548:	mov	r1, r6
   1554c:	bl	11464 <strcmp@plt>
   15550:	cmp	r0, #0
   15554:	beq	15570 <__assert_fail@plt+0x3d1c>
   15558:	add	r5, r5, #1
   1555c:	ldr	r0, [r4, #4]!
   15560:	cmp	r0, #0
   15564:	bne	15548 <__assert_fail@plt+0x3cf4>
   15568:	mvn	r0, #0
   1556c:	pop	{r4, r5, r6, pc}
   15570:	mov	r0, r5
   15574:	pop	{r4, r5, r6, pc}
   15578:	mvn	r0, #0
   1557c:	pop	{r4, r5, r6, pc}
   15580:	push	{r4, r5, r6, lr}
   15584:	sub	sp, sp, #8
   15588:	mov	r5, r0
   1558c:	mov	r4, r1
   15590:	cmn	r2, #1
   15594:	mov	r2, #5
   15598:	ldreq	r1, [pc, #76]	; 155ec <__assert_fail@plt+0x3d98>
   1559c:	ldrne	r1, [pc, #76]	; 155f0 <__assert_fail@plt+0x3d9c>
   155a0:	mov	r0, #0
   155a4:	bl	114e8 <dcgettext@plt>
   155a8:	mov	r6, r0
   155ac:	mov	r2, r4
   155b0:	mov	r1, #8
   155b4:	mov	r0, #0
   155b8:	bl	19b34 <__assert_fail@plt+0x82e0>
   155bc:	mov	r4, r0
   155c0:	mov	r1, r5
   155c4:	mov	r0, #1
   155c8:	bl	19dc4 <__assert_fail@plt+0x8570>
   155cc:	str	r0, [sp]
   155d0:	mov	r3, r4
   155d4:	mov	r2, r6
   155d8:	mov	r1, #0
   155dc:	mov	r0, r1
   155e0:	bl	115a8 <error@plt>
   155e4:	add	sp, sp, #8
   155e8:	pop	{r4, r5, r6, pc}
   155ec:	andeq	lr, r1, r0, lsl r7
   155f0:	andeq	lr, r1, ip, lsr #14
   155f4:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   155f8:	mov	r7, r0
   155fc:	mov	r4, r1
   15600:	mov	r8, r2
   15604:	mov	r2, #5
   15608:	ldr	r1, [pc, #224]	; 156f0 <__assert_fail@plt+0x3e9c>
   1560c:	mov	r0, #0
   15610:	bl	114e8 <dcgettext@plt>
   15614:	ldr	r3, [pc, #216]	; 156f4 <__assert_fail@plt+0x3ea0>
   15618:	ldr	r1, [r3]
   1561c:	bl	11428 <fputs_unlocked@plt>
   15620:	ldr	r5, [r7]
   15624:	cmp	r5, #0
   15628:	beq	156b8 <__assert_fail@plt+0x3e64>
   1562c:	mov	r9, #0
   15630:	mov	r6, r9
   15634:	ldr	sl, [pc, #184]	; 156f4 <__assert_fail@plt+0x3ea0>
   15638:	b	15674 <__assert_fail@plt+0x3e20>
   1563c:	ldr	r9, [sl]
   15640:	mov	r0, r5
   15644:	bl	19dd4 <__assert_fail@plt+0x8580>
   15648:	mov	r3, r0
   1564c:	ldr	r2, [pc, #164]	; 156f8 <__assert_fail@plt+0x3ea4>
   15650:	mov	r1, #1
   15654:	mov	r0, r9
   15658:	bl	11704 <__fprintf_chk@plt>
   1565c:	mov	r9, r4
   15660:	add	r6, r6, #1
   15664:	ldr	r5, [r7, #4]!
   15668:	add	r4, r4, r8
   1566c:	cmp	r5, #0
   15670:	beq	156b8 <__assert_fail@plt+0x3e64>
   15674:	cmp	r6, #0
   15678:	beq	1563c <__assert_fail@plt+0x3de8>
   1567c:	mov	r2, r8
   15680:	mov	r1, r4
   15684:	mov	r0, r9
   15688:	bl	114d0 <memcmp@plt>
   1568c:	cmp	r0, #0
   15690:	bne	1563c <__assert_fail@plt+0x3de8>
   15694:	ldr	fp, [sl]
   15698:	mov	r0, r5
   1569c:	bl	19dd4 <__assert_fail@plt+0x8580>
   156a0:	mov	r3, r0
   156a4:	ldr	r2, [pc, #80]	; 156fc <__assert_fail@plt+0x3ea8>
   156a8:	mov	r1, #1
   156ac:	mov	r0, fp
   156b0:	bl	11704 <__fprintf_chk@plt>
   156b4:	b	15660 <__assert_fail@plt+0x3e0c>
   156b8:	ldr	r3, [pc, #52]	; 156f4 <__assert_fail@plt+0x3ea0>
   156bc:	ldr	r0, [r3]
   156c0:	ldr	r3, [r0, #20]
   156c4:	ldr	r2, [r0, #24]
   156c8:	cmp	r3, r2
   156cc:	bcs	156e4 <__assert_fail@plt+0x3e90>
   156d0:	add	r2, r3, #1
   156d4:	str	r2, [r0, #20]
   156d8:	mov	r2, #10
   156dc:	strb	r2, [r3]
   156e0:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   156e4:	mov	r1, #10
   156e8:	bl	11758 <__overflow@plt>
   156ec:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   156f0:	andeq	lr, r1, ip, asr #14
   156f4:	andeq	pc, r2, r8, ror #3
   156f8:	andeq	lr, r1, r4, ror #14
   156fc:	andeq	lr, r1, ip, ror #14
   15700:	push	{r4, r5, r6, r7, r8, lr}
   15704:	mov	r7, r0
   15708:	mov	r5, r1
   1570c:	mov	r4, r2
   15710:	mov	r6, r3
   15714:	ldrb	r3, [sp, #32]
   15718:	cmp	r3, #0
   1571c:	beq	1576c <__assert_fail@plt+0x3f18>
   15720:	ldr	r3, [sp, #24]
   15724:	mov	r2, r6
   15728:	mov	r1, r4
   1572c:	mov	r0, r5
   15730:	bl	15454 <__assert_fail@plt+0x3c00>
   15734:	cmp	r0, #0
   15738:	popge	{r4, r5, r6, r7, r8, pc}
   1573c:	mov	r2, r0
   15740:	mov	r1, r5
   15744:	mov	r0, r7
   15748:	bl	15580 <__assert_fail@plt+0x3d2c>
   1574c:	ldr	r2, [sp, #24]
   15750:	mov	r1, r6
   15754:	mov	r0, r4
   15758:	bl	155f4 <__assert_fail@plt+0x3da0>
   1575c:	ldr	r3, [sp, #28]
   15760:	blx	r3
   15764:	mvn	r0, #0
   15768:	pop	{r4, r5, r6, r7, r8, pc}
   1576c:	mov	r1, r2
   15770:	mov	r0, r5
   15774:	bl	1552c <__assert_fail@plt+0x3cd8>
   15778:	b	15734 <__assert_fail@plt+0x3ee0>
   1577c:	push	{r4, r5, r6, r7, r8, lr}
   15780:	ldr	r6, [r1]
   15784:	cmp	r6, #0
   15788:	beq	157cc <__assert_fail@plt+0x3f78>
   1578c:	mov	r7, r3
   15790:	mov	r8, r0
   15794:	mov	r4, r2
   15798:	mov	r5, r1
   1579c:	mov	r2, r7
   157a0:	mov	r1, r4
   157a4:	mov	r0, r8
   157a8:	bl	114d0 <memcmp@plt>
   157ac:	cmp	r0, #0
   157b0:	beq	157c4 <__assert_fail@plt+0x3f70>
   157b4:	ldr	r6, [r5, #4]!
   157b8:	add	r4, r4, r7
   157bc:	cmp	r6, #0
   157c0:	bne	1579c <__assert_fail@plt+0x3f48>
   157c4:	mov	r0, r6
   157c8:	pop	{r4, r5, r6, r7, r8, pc}
   157cc:	mov	r6, #0
   157d0:	b	157c4 <__assert_fail@plt+0x3f70>
   157d4:	ldr	r3, [pc, #4]	; 157e0 <__assert_fail@plt+0x3f8c>
   157d8:	str	r0, [r3]
   157dc:	bx	lr
   157e0:	andeq	pc, r2, r0, ror r2	; <UNPREDICTABLE>
   157e4:	ldr	r3, [pc, #4]	; 157f0 <__assert_fail@plt+0x3f9c>
   157e8:	strb	r0, [r3, #4]
   157ec:	bx	lr
   157f0:	andeq	pc, r2, r0, ror r2	; <UNPREDICTABLE>
   157f4:	push	{r4, r5, r6, lr}
   157f8:	sub	sp, sp, #8
   157fc:	ldr	r3, [pc, #200]	; 158cc <__assert_fail@plt+0x4078>
   15800:	ldr	r0, [r3]
   15804:	bl	1bc80 <__assert_fail@plt+0xa42c>
   15808:	cmp	r0, #0
   1580c:	beq	15830 <__assert_fail@plt+0x3fdc>
   15810:	ldr	r3, [pc, #184]	; 158d0 <__assert_fail@plt+0x407c>
   15814:	ldrb	r3, [r3, #4]
   15818:	cmp	r3, #0
   1581c:	beq	1584c <__assert_fail@plt+0x3ff8>
   15820:	bl	116b0 <__errno_location@plt>
   15824:	ldr	r3, [r0]
   15828:	cmp	r3, #32
   1582c:	bne	1584c <__assert_fail@plt+0x3ff8>
   15830:	ldr	r3, [pc, #156]	; 158d4 <__assert_fail@plt+0x4080>
   15834:	ldr	r0, [r3]
   15838:	bl	1bc80 <__assert_fail@plt+0xa42c>
   1583c:	cmp	r0, #0
   15840:	bne	158c0 <__assert_fail@plt+0x406c>
   15844:	add	sp, sp, #8
   15848:	pop	{r4, r5, r6, pc}
   1584c:	mov	r2, #5
   15850:	ldr	r1, [pc, #128]	; 158d8 <__assert_fail@plt+0x4084>
   15854:	mov	r0, #0
   15858:	bl	114e8 <dcgettext@plt>
   1585c:	mov	r4, r0
   15860:	ldr	r3, [pc, #104]	; 158d0 <__assert_fail@plt+0x407c>
   15864:	ldr	r5, [r3]
   15868:	cmp	r5, #0
   1586c:	beq	158a4 <__assert_fail@plt+0x4050>
   15870:	bl	116b0 <__errno_location@plt>
   15874:	ldr	r6, [r0]
   15878:	mov	r0, r5
   1587c:	bl	19c4c <__assert_fail@plt+0x83f8>
   15880:	str	r4, [sp]
   15884:	mov	r3, r0
   15888:	ldr	r2, [pc, #76]	; 158dc <__assert_fail@plt+0x4088>
   1588c:	mov	r1, r6
   15890:	mov	r0, #0
   15894:	bl	115a8 <error@plt>
   15898:	ldr	r3, [pc, #64]	; 158e0 <__assert_fail@plt+0x408c>
   1589c:	ldr	r0, [r3]
   158a0:	bl	114ac <_exit@plt>
   158a4:	bl	116b0 <__errno_location@plt>
   158a8:	mov	r3, r4
   158ac:	ldr	r2, [pc, #48]	; 158e4 <__assert_fail@plt+0x4090>
   158b0:	ldr	r1, [r0]
   158b4:	mov	r0, #0
   158b8:	bl	115a8 <error@plt>
   158bc:	b	15898 <__assert_fail@plt+0x4044>
   158c0:	ldr	r3, [pc, #24]	; 158e0 <__assert_fail@plt+0x408c>
   158c4:	ldr	r0, [r3]
   158c8:	bl	114ac <_exit@plt>
   158cc:	andeq	pc, r2, ip, ror #3
   158d0:	andeq	pc, r2, r0, ror r2	; <UNPREDICTABLE>
   158d4:	andeq	pc, r2, r8, ror #3
   158d8:	andeq	lr, r1, r4, ror r7
   158dc:	andeq	lr, r1, r0, lsl #15
   158e0:	muleq	r2, r0, r1
   158e4:	andeq	lr, r1, ip, ror r2
   158e8:	push	{r4, lr}
   158ec:	bl	15974 <__assert_fail@plt+0x4120>
   158f0:	cmp	r0, #0
   158f4:	popne	{r4, pc}
   158f8:	bl	1af40 <__assert_fail@plt+0x96ec>
   158fc:	push	{r4, r5, r6, lr}
   15900:	mov	r5, r0
   15904:	ldrb	r4, [r0]
   15908:	cmp	r4, #47	; 0x2f
   1590c:	movne	r4, #0
   15910:	moveq	r4, #1
   15914:	bl	1b8c8 <__assert_fail@plt+0xa074>
   15918:	sub	r0, r0, r5
   1591c:	cmp	r0, r4
   15920:	bls	15958 <__assert_fail@plt+0x4104>
   15924:	sub	r3, r0, #1
   15928:	add	r2, r5, r3
   1592c:	ldrb	r1, [r5, r3]
   15930:	cmp	r1, #47	; 0x2f
   15934:	bne	15960 <__assert_fail@plt+0x410c>
   15938:	cmp	r4, r3
   1593c:	beq	1596c <__assert_fail@plt+0x4118>
   15940:	sub	r0, r3, #1
   15944:	ldrb	r1, [r2, #-1]!
   15948:	cmp	r1, #47	; 0x2f
   1594c:	bne	15968 <__assert_fail@plt+0x4114>
   15950:	mov	r3, r0
   15954:	b	15938 <__assert_fail@plt+0x40e4>
   15958:	mov	r4, r0
   1595c:	b	1596c <__assert_fail@plt+0x4118>
   15960:	mov	r4, r0
   15964:	b	1596c <__assert_fail@plt+0x4118>
   15968:	mov	r4, r3
   1596c:	mov	r0, r4
   15970:	pop	{r4, r5, r6, pc}
   15974:	push	{r4, r5, r6, r7, r8, lr}
   15978:	mov	r7, r0
   1597c:	bl	158fc <__assert_fail@plt+0x40a8>
   15980:	mov	r4, r0
   15984:	add	r6, r0, #1
   15988:	cmp	r0, #0
   1598c:	movne	r0, r6
   15990:	addeq	r0, r6, #1
   15994:	bl	1b030 <__assert_fail@plt+0x97dc>
   15998:	subs	r5, r0, #0
   1599c:	beq	159c8 <__assert_fail@plt+0x4174>
   159a0:	mov	r2, r4
   159a4:	mov	r1, r7
   159a8:	mov	r0, r5
   159ac:	bl	114b8 <memcpy@plt>
   159b0:	cmp	r4, #0
   159b4:	moveq	r3, #46	; 0x2e
   159b8:	strbeq	r3, [r5, r4]
   159bc:	moveq	r4, r6
   159c0:	mov	r3, #0
   159c4:	strb	r3, [r5, r4]
   159c8:	mov	r0, r5
   159cc:	pop	{r4, r5, r6, r7, r8, pc}
   159d0:	push	{r4, lr}
   159d4:	ldr	r3, [r0, #16]
   159d8:	and	r3, r3, #61440	; 0xf000
   159dc:	cmp	r3, #32768	; 0x8000
   159e0:	beq	15a28 <__assert_fail@plt+0x41d4>
   159e4:	cmp	r3, #16384	; 0x4000
   159e8:	beq	15a48 <__assert_fail@plt+0x41f4>
   159ec:	cmp	r3, #40960	; 0xa000
   159f0:	beq	15a5c <__assert_fail@plt+0x4208>
   159f4:	cmp	r3, #24576	; 0x6000
   159f8:	beq	15a70 <__assert_fail@plt+0x421c>
   159fc:	cmp	r3, #8192	; 0x2000
   15a00:	beq	15a84 <__assert_fail@plt+0x4230>
   15a04:	cmp	r3, #4096	; 0x1000
   15a08:	beq	15a98 <__assert_fail@plt+0x4244>
   15a0c:	cmp	r3, #49152	; 0xc000
   15a10:	mov	r2, #5
   15a14:	ldreq	r1, [pc, #144]	; 15aac <__assert_fail@plt+0x4258>
   15a18:	ldrne	r1, [pc, #144]	; 15ab0 <__assert_fail@plt+0x425c>
   15a1c:	mov	r0, #0
   15a20:	bl	114e8 <dcgettext@plt>
   15a24:	pop	{r4, pc}
   15a28:	ldrd	r2, [r0, #48]	; 0x30
   15a2c:	orrs	r3, r2, r3
   15a30:	mov	r2, #5
   15a34:	ldreq	r1, [pc, #120]	; 15ab4 <__assert_fail@plt+0x4260>
   15a38:	ldrne	r1, [pc, #120]	; 15ab8 <__assert_fail@plt+0x4264>
   15a3c:	mov	r0, #0
   15a40:	bl	114e8 <dcgettext@plt>
   15a44:	pop	{r4, pc}
   15a48:	mov	r2, #5
   15a4c:	ldr	r1, [pc, #104]	; 15abc <__assert_fail@plt+0x4268>
   15a50:	mov	r0, #0
   15a54:	bl	114e8 <dcgettext@plt>
   15a58:	pop	{r4, pc}
   15a5c:	mov	r2, #5
   15a60:	ldr	r1, [pc, #88]	; 15ac0 <__assert_fail@plt+0x426c>
   15a64:	mov	r0, #0
   15a68:	bl	114e8 <dcgettext@plt>
   15a6c:	pop	{r4, pc}
   15a70:	mov	r2, #5
   15a74:	ldr	r1, [pc, #72]	; 15ac4 <__assert_fail@plt+0x4270>
   15a78:	mov	r0, #0
   15a7c:	bl	114e8 <dcgettext@plt>
   15a80:	pop	{r4, pc}
   15a84:	mov	r2, #5
   15a88:	ldr	r1, [pc, #56]	; 15ac8 <__assert_fail@plt+0x4274>
   15a8c:	mov	r0, #0
   15a90:	bl	114e8 <dcgettext@plt>
   15a94:	pop	{r4, pc}
   15a98:	mov	r2, #5
   15a9c:	ldr	r1, [pc, #40]	; 15acc <__assert_fail@plt+0x4278>
   15aa0:	mov	r0, #0
   15aa4:	bl	114e8 <dcgettext@plt>
   15aa8:	pop	{r4, pc}
   15aac:	strdeq	lr, [r1], -r0
   15ab0:	strdeq	lr, [r1], -r8
   15ab4:	andeq	lr, r1, r8, lsl #15
   15ab8:	muleq	r1, ip, r7
   15abc:	strdeq	lr, [r1], -r4
   15ac0:	andeq	lr, r1, ip, lsr #15
   15ac4:			; <UNDEFINED> instruction: 0x0001e7bc
   15ac8:	ldrdeq	lr, [r1], -r0
   15acc:	andeq	lr, r1, r8, ror #15
   15ad0:	and	r3, r0, #61440	; 0xf000
   15ad4:	cmp	r3, #32768	; 0x8000
   15ad8:	moveq	r3, #45	; 0x2d
   15adc:	beq	15b28 <__assert_fail@plt+0x42d4>
   15ae0:	cmp	r3, #16384	; 0x4000
   15ae4:	moveq	r3, #100	; 0x64
   15ae8:	beq	15b28 <__assert_fail@plt+0x42d4>
   15aec:	cmp	r3, #24576	; 0x6000
   15af0:	moveq	r3, #98	; 0x62
   15af4:	beq	15b28 <__assert_fail@plt+0x42d4>
   15af8:	cmp	r3, #8192	; 0x2000
   15afc:	moveq	r3, #99	; 0x63
   15b00:	beq	15b28 <__assert_fail@plt+0x42d4>
   15b04:	cmp	r3, #40960	; 0xa000
   15b08:	moveq	r3, #108	; 0x6c
   15b0c:	beq	15b28 <__assert_fail@plt+0x42d4>
   15b10:	cmp	r3, #4096	; 0x1000
   15b14:	moveq	r3, #112	; 0x70
   15b18:	beq	15b28 <__assert_fail@plt+0x42d4>
   15b1c:	cmp	r3, #49152	; 0xc000
   15b20:	moveq	r3, #115	; 0x73
   15b24:	movne	r3, #63	; 0x3f
   15b28:	strb	r3, [r1]
   15b2c:	and	r3, r0, #256	; 0x100
   15b30:	cmp	r3, #0
   15b34:	movne	r3, #114	; 0x72
   15b38:	moveq	r3, #45	; 0x2d
   15b3c:	strb	r3, [r1, #1]
   15b40:	and	r3, r0, #128	; 0x80
   15b44:	cmp	r3, #0
   15b48:	movne	r3, #119	; 0x77
   15b4c:	moveq	r3, #45	; 0x2d
   15b50:	strb	r3, [r1, #2]
   15b54:	tst	r0, #2048	; 0x800
   15b58:	beq	15c0c <__assert_fail@plt+0x43b8>
   15b5c:	and	r3, r0, #64	; 0x40
   15b60:	cmp	r3, #0
   15b64:	movne	r3, #115	; 0x73
   15b68:	moveq	r3, #83	; 0x53
   15b6c:	strb	r3, [r1, #3]
   15b70:	and	r3, r0, #32
   15b74:	cmp	r3, #0
   15b78:	movne	r3, #114	; 0x72
   15b7c:	moveq	r3, #45	; 0x2d
   15b80:	strb	r3, [r1, #4]
   15b84:	and	r3, r0, #16
   15b88:	cmp	r3, #0
   15b8c:	movne	r3, #119	; 0x77
   15b90:	moveq	r3, #45	; 0x2d
   15b94:	strb	r3, [r1, #5]
   15b98:	tst	r0, #1024	; 0x400
   15b9c:	beq	15c20 <__assert_fail@plt+0x43cc>
   15ba0:	and	r3, r0, #8
   15ba4:	cmp	r3, #0
   15ba8:	movne	r3, #115	; 0x73
   15bac:	moveq	r3, #83	; 0x53
   15bb0:	strb	r3, [r1, #6]
   15bb4:	and	r3, r0, #4
   15bb8:	cmp	r3, #0
   15bbc:	movne	r3, #114	; 0x72
   15bc0:	moveq	r3, #45	; 0x2d
   15bc4:	strb	r3, [r1, #7]
   15bc8:	and	r3, r0, #2
   15bcc:	cmp	r3, #0
   15bd0:	movne	r3, #119	; 0x77
   15bd4:	moveq	r3, #45	; 0x2d
   15bd8:	strb	r3, [r1, #8]
   15bdc:	tst	r0, #512	; 0x200
   15be0:	beq	15c34 <__assert_fail@plt+0x43e0>
   15be4:	and	r0, r0, #1
   15be8:	cmp	r0, #0
   15bec:	movne	r0, #116	; 0x74
   15bf0:	moveq	r0, #84	; 0x54
   15bf4:	strb	r0, [r1, #9]
   15bf8:	mov	r3, #32
   15bfc:	strb	r3, [r1, #10]
   15c00:	mov	r3, #0
   15c04:	strb	r3, [r1, #11]
   15c08:	bx	lr
   15c0c:	and	r3, r0, #64	; 0x40
   15c10:	cmp	r3, #0
   15c14:	movne	r3, #120	; 0x78
   15c18:	moveq	r3, #45	; 0x2d
   15c1c:	b	15b6c <__assert_fail@plt+0x4318>
   15c20:	and	r3, r0, #8
   15c24:	cmp	r3, #0
   15c28:	movne	r3, #120	; 0x78
   15c2c:	moveq	r3, #45	; 0x2d
   15c30:	b	15bb0 <__assert_fail@plt+0x435c>
   15c34:	and	r0, r0, #1
   15c38:	cmp	r0, #0
   15c3c:	movne	r0, #120	; 0x78
   15c40:	moveq	r0, #45	; 0x2d
   15c44:	b	15bf4 <__assert_fail@plt+0x43a0>
   15c48:	push	{r4, lr}
   15c4c:	ldr	r0, [r0, #16]
   15c50:	bl	15ad0 <__assert_fail@plt+0x427c>
   15c54:	pop	{r4, pc}
   15c58:	push	{r4, r5, lr}
   15c5c:	sub	sp, sp, #12
   15c60:	mov	r5, r0
   15c64:	bl	116b0 <__errno_location@plt>
   15c68:	mov	r4, r0
   15c6c:	ldr	r3, [r0]
   15c70:	str	r3, [sp]
   15c74:	str	r3, [sp, #4]
   15c78:	mov	r3, #0
   15c7c:	str	r3, [r0]
   15c80:	mov	r0, r5
   15c84:	bl	114a0 <free@plt>
   15c88:	ldr	r3, [r4]
   15c8c:	cmp	r3, #0
   15c90:	moveq	r3, #4
   15c94:	movne	r3, #0
   15c98:	add	r2, sp, #8
   15c9c:	add	r3, r2, r3
   15ca0:	ldr	r3, [r3, #-8]
   15ca4:	str	r3, [r4]
   15ca8:	add	sp, sp, #12
   15cac:	pop	{r4, r5, pc}
   15cb0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15cb4:	mov	r4, r0
   15cb8:	mov	r5, r1
   15cbc:	add	r6, r2, #20
   15cc0:	mov	r3, #0
   15cc4:	strb	r3, [r2, #20]
   15cc8:	cmp	r0, #0
   15ccc:	sbcs	r3, r1, #0
   15cd0:	movlt	r8, #10
   15cd4:	movlt	r9, #0
   15cd8:	blt	15d30 <__assert_fail@plt+0x44dc>
   15cdc:	mov	r8, #10
   15ce0:	mov	r9, #0
   15ce4:	mov	r2, r8
   15ce8:	mov	r3, r9
   15cec:	mov	r0, r4
   15cf0:	mov	r1, r5
   15cf4:	bl	1c950 <__assert_fail@plt+0xb0fc>
   15cf8:	add	r2, r2, #48	; 0x30
   15cfc:	strb	r2, [r6, #-1]!
   15d00:	mov	r2, r8
   15d04:	mov	r3, r9
   15d08:	mov	r0, r4
   15d0c:	mov	r1, r5
   15d10:	bl	1c950 <__assert_fail@plt+0xb0fc>
   15d14:	mov	r4, r0
   15d18:	mov	r5, r1
   15d1c:	orrs	r3, r4, r5
   15d20:	bne	15ce4 <__assert_fail@plt+0x4490>
   15d24:	mov	r0, r6
   15d28:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15d2c:	mov	r6, r7
   15d30:	sub	r7, r6, #1
   15d34:	mov	r2, r8
   15d38:	mov	r3, r9
   15d3c:	mov	r0, r4
   15d40:	mov	r1, r5
   15d44:	bl	1c950 <__assert_fail@plt+0xb0fc>
   15d48:	rsb	r2, r2, #48	; 0x30
   15d4c:	strb	r2, [r6, #-1]
   15d50:	mov	r2, r8
   15d54:	mov	r3, r9
   15d58:	mov	r0, r4
   15d5c:	mov	r1, r5
   15d60:	bl	1c950 <__assert_fail@plt+0xb0fc>
   15d64:	mov	r4, r0
   15d68:	mov	r5, r1
   15d6c:	orrs	r3, r4, r5
   15d70:	bne	15d2c <__assert_fail@plt+0x44d8>
   15d74:	sub	r6, r6, #2
   15d78:	mov	r3, #45	; 0x2d
   15d7c:	strb	r3, [r7, #-1]
   15d80:	b	15d24 <__assert_fail@plt+0x44d0>
   15d84:	andeq	r0, r0, r0
   15d88:	push	{r4, lr}
   15d8c:	mov	r1, #32
   15d90:	bl	11680 <strchr@plt>
   15d94:	cmp	r0, #0
   15d98:	movne	r3, #0
   15d9c:	strbne	r3, [r0]
   15da0:	pop	{r4, pc}
   15da4:	push	{r4, r5, r6, lr}
   15da8:	mov	r4, r0
   15dac:	bl	11674 <strlen@plt>
   15db0:	adds	r0, r0, #1
   15db4:	popeq	{r4, r5, r6, pc}
   15db8:	mov	r2, r4
   15dbc:	mov	r3, #0
   15dc0:	b	15dd8 <__assert_fail@plt+0x4584>
   15dc4:	strb	r1, [r2]
   15dc8:	add	r3, r3, #1
   15dcc:	add	r2, r2, #1
   15dd0:	cmp	r0, r3
   15dd4:	bls	15e50 <__assert_fail@plt+0x45fc>
   15dd8:	ldrb	r1, [r4, r3]
   15ddc:	cmp	r1, #92	; 0x5c
   15de0:	bne	15dc4 <__assert_fail@plt+0x4570>
   15de4:	add	ip, r3, #4
   15de8:	cmp	r0, ip
   15dec:	bls	15dc4 <__assert_fail@plt+0x4570>
   15df0:	add	ip, r4, r3
   15df4:	ldrb	lr, [ip, #1]
   15df8:	sub	ip, lr, #48	; 0x30
   15dfc:	uxtb	ip, ip
   15e00:	cmp	ip, #3
   15e04:	bhi	15dc4 <__assert_fail@plt+0x4570>
   15e08:	add	ip, r4, r3
   15e0c:	ldrb	r5, [ip, #2]
   15e10:	sub	ip, r5, #48	; 0x30
   15e14:	uxtb	ip, ip
   15e18:	cmp	ip, #7
   15e1c:	bhi	15dc4 <__assert_fail@plt+0x4570>
   15e20:	add	r6, r3, #3
   15e24:	ldrb	ip, [r4, r6]
   15e28:	sub	ip, ip, #48	; 0x30
   15e2c:	uxtb	ip, ip
   15e30:	cmp	ip, #7
   15e34:	bhi	15dc4 <__assert_fail@plt+0x4570>
   15e38:	add	r3, r5, lr, lsl #3
   15e3c:	sub	r3, r3, #432	; 0x1b0
   15e40:	add	r3, ip, r3, lsl #3
   15e44:	strb	r3, [r2]
   15e48:	mov	r3, r6
   15e4c:	b	15dc8 <__assert_fail@plt+0x4574>
   15e50:	pop	{r4, r5, r6, pc}
   15e54:	push	{r4, lr}
   15e58:	mov	r4, r0
   15e5c:	ldr	r0, [r0]
   15e60:	bl	15c58 <__assert_fail@plt+0x4404>
   15e64:	ldr	r0, [r4, #4]
   15e68:	bl	15c58 <__assert_fail@plt+0x4404>
   15e6c:	ldr	r0, [r4, #8]
   15e70:	bl	15c58 <__assert_fail@plt+0x4404>
   15e74:	ldrb	r3, [r4, #24]
   15e78:	tst	r3, #4
   15e7c:	bne	15e8c <__assert_fail@plt+0x4638>
   15e80:	mov	r0, r4
   15e84:	bl	15c58 <__assert_fail@plt+0x4404>
   15e88:	pop	{r4, pc}
   15e8c:	ldr	r0, [r4, #12]
   15e90:	bl	15c58 <__assert_fail@plt+0x4404>
   15e94:	b	15e80 <__assert_fail@plt+0x462c>
   15e98:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15e9c:	sub	sp, sp, #68	; 0x44
   15ea0:	ldr	r1, [pc, #1480]	; 16470 <__assert_fail@plt+0x4c1c>
   15ea4:	ldr	r0, [pc, #1480]	; 16474 <__assert_fail@plt+0x4c20>
   15ea8:	bl	117d0 <fopen64@plt>
   15eac:	subs	r8, r0, #0
   15eb0:	beq	16440 <__assert_fail@plt+0x4bec>
   15eb4:	mov	r3, #0
   15eb8:	str	r3, [sp, #40]	; 0x28
   15ebc:	str	r3, [sp, #44]	; 0x2c
   15ec0:	add	r9, sp, #60	; 0x3c
   15ec4:	ldr	sl, [pc, #1452]	; 16478 <__assert_fail@plt+0x4c24>
   15ec8:	ldr	fp, [pc, #1452]	; 1647c <__assert_fail@plt+0x4c28>
   15ecc:	mov	r3, r8
   15ed0:	mov	r2, #10
   15ed4:	add	r1, sp, #44	; 0x2c
   15ed8:	add	r0, sp, #40	; 0x28
   15edc:	bl	1144c <__getdelim@plt>
   15ee0:	cmn	r0, #1
   15ee4:	beq	163ac <__assert_fail@plt+0x4b58>
   15ee8:	add	r3, sp, #56	; 0x38
   15eec:	str	r3, [sp]
   15ef0:	add	r3, sp, #52	; 0x34
   15ef4:	add	r2, sp, #48	; 0x30
   15ef8:	mov	r1, sl
   15efc:	ldr	r0, [sp, #40]	; 0x28
   15f00:	bl	11794 <sscanf@plt>
   15f04:	sub	r0, r0, #2
   15f08:	cmp	r0, #1
   15f0c:	bhi	15ecc <__assert_fail@plt+0x4678>
   15f10:	ldr	r3, [sp, #56]	; 0x38
   15f14:	ldr	r4, [sp, #40]	; 0x28
   15f18:	add	r4, r4, r3
   15f1c:	mov	r0, r4
   15f20:	bl	15d88 <__assert_fail@plt+0x4534>
   15f24:	cmp	r0, #0
   15f28:	beq	15ecc <__assert_fail@plt+0x4678>
   15f2c:	add	r5, r0, #1
   15f30:	mov	r0, r5
   15f34:	bl	15d88 <__assert_fail@plt+0x4534>
   15f38:	cmp	r0, #0
   15f3c:	beq	15ecc <__assert_fail@plt+0x4678>
   15f40:	mov	r1, fp
   15f44:	add	r0, r0, #1
   15f48:	bl	1b54c <__assert_fail@plt+0x9cf8>
   15f4c:	cmp	r0, #0
   15f50:	beq	15ecc <__assert_fail@plt+0x4678>
   15f54:	add	r6, r0, #3
   15f58:	mov	r0, r6
   15f5c:	bl	15d88 <__assert_fail@plt+0x4534>
   15f60:	cmp	r0, #0
   15f64:	beq	15ecc <__assert_fail@plt+0x4678>
   15f68:	add	r7, r0, #1
   15f6c:	mov	r0, r7
   15f70:	bl	15d88 <__assert_fail@plt+0x4534>
   15f74:	cmp	r0, #0
   15f78:	beq	15ecc <__assert_fail@plt+0x4678>
   15f7c:	mov	r0, r7
   15f80:	bl	15da4 <__assert_fail@plt+0x4550>
   15f84:	mov	r0, r5
   15f88:	bl	15da4 <__assert_fail@plt+0x4550>
   15f8c:	mov	r0, r4
   15f90:	bl	15da4 <__assert_fail@plt+0x4550>
   15f94:	mov	r0, r6
   15f98:	bl	15da4 <__assert_fail@plt+0x4550>
   15f9c:	mov	r0, #32
   15fa0:	bl	1a99c <__assert_fail@plt+0x9148>
   15fa4:	str	r0, [sp, #24]
   15fa8:	mov	r0, r7
   15fac:	bl	1af24 <__assert_fail@plt+0x96d0>
   15fb0:	ldr	r3, [sp, #24]
   15fb4:	str	r0, [r3]
   15fb8:	mov	r0, r5
   15fbc:	bl	1af24 <__assert_fail@plt+0x96d0>
   15fc0:	ldr	r3, [sp, #24]
   15fc4:	str	r0, [r3, #4]
   15fc8:	mov	r0, r4
   15fcc:	bl	1af24 <__assert_fail@plt+0x96d0>
   15fd0:	ldr	r3, [sp, #24]
   15fd4:	str	r0, [r3, #8]
   15fd8:	mov	r0, r6
   15fdc:	bl	1af24 <__assert_fail@plt+0x96d0>
   15fe0:	str	r0, [sp, #28]
   15fe4:	ldr	r3, [sp, #24]
   15fe8:	str	r0, [r3, #12]
   15fec:	ldrb	r3, [r3, #24]
   15ff0:	orr	r3, r3, #4
   15ff4:	ldr	r2, [sp, #24]
   15ff8:	strb	r3, [r2, #24]
   15ffc:	ldr	r1, [sp, #52]	; 0x34
   16000:	ldr	lr, [sp, #48]	; 0x30
   16004:	mov	ip, #0
   16008:	lsr	r3, lr, #24
   1600c:	str	r3, [sp, #12]
   16010:	lsl	r3, lr, #8
   16014:	str	r3, [sp, #8]
   16018:	ldr	r2, [pc, #1120]	; 16480 <__assert_fail@plt+0x4c2c>
   1601c:	mov	r3, #0
   16020:	ldrd	r4, [sp, #8]
   16024:	and	r4, r4, r2
   16028:	and	r5, r5, r3
   1602c:	mov	r6, r4
   16030:	mov	r7, r5
   16034:	str	lr, [sp, #36]	; 0x24
   16038:	str	ip, [sp, #32]
   1603c:	mov	r4, #0
   16040:	ldr	r5, [pc, #1084]	; 16484 <__assert_fail@plt+0x4c30>
   16044:	ldrd	r2, [sp, #32]
   16048:	and	r2, r2, r4
   1604c:	and	r3, r3, r5
   16050:	mov	r4, r2
   16054:	mov	r5, r3
   16058:	orr	r2, r6, r4
   1605c:	orr	r3, r7, r5
   16060:	uxtb	r4, r1
   16064:	mov	r5, #0
   16068:	orr	r6, r4, r2
   1606c:	orr	r7, r5, r3
   16070:	lsr	r3, r1, #20
   16074:	str	r3, [sp, #20]
   16078:	lsl	r3, r1, #12
   1607c:	str	r3, [sp, #16]
   16080:	add	r3, pc, #992	; 0x3e0
   16084:	ldrd	r2, [r3]
   16088:	ldrd	r4, [sp, #16]
   1608c:	and	r4, r4, r2
   16090:	and	r5, r5, r3
   16094:	mov	r2, r4
   16098:	mov	r3, r5
   1609c:	orr	r4, r6, r2
   160a0:	orr	r5, r7, r3
   160a4:	mov	r2, r4
   160a8:	mov	r3, r5
   160ac:	ldr	r1, [sp, #24]
   160b0:	strd	r2, [r1, #16]
   160b4:	ldr	r1, [pc, #972]	; 16488 <__assert_fail@plt+0x4c34>
   160b8:	bl	11464 <strcmp@plt>
   160bc:	cmp	r0, #0
   160c0:	moveq	r0, #1
   160c4:	beq	161fc <__assert_fail@plt+0x49a8>
   160c8:	ldr	r1, [pc, #956]	; 1648c <__assert_fail@plt+0x4c38>
   160cc:	ldr	r0, [sp, #28]
   160d0:	bl	11464 <strcmp@plt>
   160d4:	cmp	r0, #0
   160d8:	moveq	r0, #1
   160dc:	beq	161fc <__assert_fail@plt+0x49a8>
   160e0:	ldr	r1, [pc, #948]	; 1649c <__assert_fail@plt+0x4c48>
   160e4:	ldr	r0, [sp, #28]
   160e8:	bl	11464 <strcmp@plt>
   160ec:	cmp	r0, #0
   160f0:	moveq	r0, #1
   160f4:	beq	161fc <__assert_fail@plt+0x49a8>
   160f8:	ldr	r1, [pc, #928]	; 164a0 <__assert_fail@plt+0x4c4c>
   160fc:	ldr	r0, [sp, #28]
   16100:	bl	11464 <strcmp@plt>
   16104:	cmp	r0, #0
   16108:	moveq	r0, #1
   1610c:	beq	161fc <__assert_fail@plt+0x49a8>
   16110:	ldr	r1, [pc, #908]	; 164a4 <__assert_fail@plt+0x4c50>
   16114:	ldr	r0, [sp, #28]
   16118:	bl	11464 <strcmp@plt>
   1611c:	cmp	r0, #0
   16120:	moveq	r0, #1
   16124:	beq	161fc <__assert_fail@plt+0x49a8>
   16128:	ldr	r1, [pc, #888]	; 164a8 <__assert_fail@plt+0x4c54>
   1612c:	ldr	r0, [sp, #28]
   16130:	bl	11464 <strcmp@plt>
   16134:	cmp	r0, #0
   16138:	moveq	r0, #1
   1613c:	beq	161fc <__assert_fail@plt+0x49a8>
   16140:	ldr	r1, [pc, #868]	; 164ac <__assert_fail@plt+0x4c58>
   16144:	ldr	r0, [sp, #28]
   16148:	bl	11464 <strcmp@plt>
   1614c:	cmp	r0, #0
   16150:	moveq	r0, #1
   16154:	beq	161fc <__assert_fail@plt+0x49a8>
   16158:	ldr	r1, [pc, #848]	; 164b0 <__assert_fail@plt+0x4c5c>
   1615c:	ldr	r0, [sp, #28]
   16160:	bl	11464 <strcmp@plt>
   16164:	cmp	r0, #0
   16168:	moveq	r0, #1
   1616c:	beq	161fc <__assert_fail@plt+0x49a8>
   16170:	ldr	r1, [pc, #828]	; 164b4 <__assert_fail@plt+0x4c60>
   16174:	ldr	r0, [sp, #28]
   16178:	bl	11464 <strcmp@plt>
   1617c:	cmp	r0, #0
   16180:	moveq	r0, #1
   16184:	beq	161fc <__assert_fail@plt+0x49a8>
   16188:	ldr	r1, [pc, #808]	; 164b8 <__assert_fail@plt+0x4c64>
   1618c:	ldr	r0, [sp, #28]
   16190:	bl	11464 <strcmp@plt>
   16194:	cmp	r0, #0
   16198:	moveq	r0, #1
   1619c:	beq	161fc <__assert_fail@plt+0x49a8>
   161a0:	ldr	r1, [pc, #788]	; 164bc <__assert_fail@plt+0x4c68>
   161a4:	ldr	r0, [sp, #28]
   161a8:	bl	11464 <strcmp@plt>
   161ac:	cmp	r0, #0
   161b0:	moveq	r0, #1
   161b4:	beq	161fc <__assert_fail@plt+0x49a8>
   161b8:	ldr	r1, [pc, #768]	; 164c0 <__assert_fail@plt+0x4c6c>
   161bc:	ldr	r0, [sp, #28]
   161c0:	bl	11464 <strcmp@plt>
   161c4:	cmp	r0, #0
   161c8:	moveq	r0, #1
   161cc:	beq	161fc <__assert_fail@plt+0x49a8>
   161d0:	ldr	r1, [pc, #748]	; 164c4 <__assert_fail@plt+0x4c70>
   161d4:	ldr	r0, [sp, #28]
   161d8:	bl	11464 <strcmp@plt>
   161dc:	cmp	r0, #0
   161e0:	moveq	r0, #1
   161e4:	beq	161fc <__assert_fail@plt+0x49a8>
   161e8:	ldr	r1, [pc, #728]	; 164c8 <__assert_fail@plt+0x4c74>
   161ec:	ldr	r0, [sp, #28]
   161f0:	bl	11464 <strcmp@plt>
   161f4:	clz	r0, r0
   161f8:	lsr	r0, r0, #5
   161fc:	ldr	r3, [sp, #24]
   16200:	ldrb	r3, [r3, #24]
   16204:	bic	r3, r3, #1
   16208:	orr	r0, r0, r3
   1620c:	ldr	r3, [sp, #24]
   16210:	strb	r0, [r3, #24]
   16214:	ldr	r4, [r3]
   16218:	mov	r1, #58	; 0x3a
   1621c:	mov	r0, r4
   16220:	bl	11680 <strchr@plt>
   16224:	cmp	r0, #0
   16228:	movne	r0, #1
   1622c:	beq	16258 <__assert_fail@plt+0x4a04>
   16230:	ldr	r3, [sp, #24]
   16234:	ldrb	r3, [r3, #24]
   16238:	and	r0, r0, #1
   1623c:	bic	r3, r3, #2
   16240:	orr	r3, r3, r0, lsl #1
   16244:	ldr	r2, [sp, #24]
   16248:	strb	r3, [r2, #24]
   1624c:	str	r2, [r9]
   16250:	add	r9, r2, #28
   16254:	b	15ecc <__assert_fail@plt+0x4678>
   16258:	ldrb	r3, [r4]
   1625c:	cmp	r3, #47	; 0x2f
   16260:	beq	16354 <__assert_fail@plt+0x4b00>
   16264:	ldr	r1, [pc, #608]	; 164cc <__assert_fail@plt+0x4c78>
   16268:	ldr	r0, [sp, #28]
   1626c:	bl	11464 <strcmp@plt>
   16270:	cmp	r0, #0
   16274:	moveq	r0, #1
   16278:	beq	16230 <__assert_fail@plt+0x49dc>
   1627c:	ldr	r1, [pc, #588]	; 164d0 <__assert_fail@plt+0x4c7c>
   16280:	ldr	r0, [sp, #28]
   16284:	bl	11464 <strcmp@plt>
   16288:	cmp	r0, #0
   1628c:	moveq	r0, #1
   16290:	beq	16230 <__assert_fail@plt+0x49dc>
   16294:	ldr	r1, [pc, #568]	; 164d4 <__assert_fail@plt+0x4c80>
   16298:	ldr	r0, [sp, #28]
   1629c:	bl	11464 <strcmp@plt>
   162a0:	cmp	r0, #0
   162a4:	moveq	r0, #1
   162a8:	beq	16230 <__assert_fail@plt+0x49dc>
   162ac:	ldr	r1, [pc, #548]	; 164d8 <__assert_fail@plt+0x4c84>
   162b0:	ldr	r0, [sp, #28]
   162b4:	bl	11464 <strcmp@plt>
   162b8:	cmp	r0, #0
   162bc:	moveq	r0, #1
   162c0:	beq	16230 <__assert_fail@plt+0x49dc>
   162c4:	ldr	r1, [pc, #528]	; 164dc <__assert_fail@plt+0x4c88>
   162c8:	ldr	r0, [sp, #28]
   162cc:	bl	11464 <strcmp@plt>
   162d0:	cmp	r0, #0
   162d4:	moveq	r0, #1
   162d8:	beq	16230 <__assert_fail@plt+0x49dc>
   162dc:	ldr	r1, [pc, #508]	; 164e0 <__assert_fail@plt+0x4c8c>
   162e0:	ldr	r0, [sp, #28]
   162e4:	bl	11464 <strcmp@plt>
   162e8:	cmp	r0, #0
   162ec:	moveq	r0, #1
   162f0:	beq	16230 <__assert_fail@plt+0x49dc>
   162f4:	ldr	r1, [pc, #488]	; 164e4 <__assert_fail@plt+0x4c90>
   162f8:	ldr	r0, [sp, #28]
   162fc:	bl	11464 <strcmp@plt>
   16300:	cmp	r0, #0
   16304:	moveq	r0, #1
   16308:	beq	16230 <__assert_fail@plt+0x49dc>
   1630c:	ldr	r1, [pc, #468]	; 164e8 <__assert_fail@plt+0x4c94>
   16310:	ldr	r0, [sp, #28]
   16314:	bl	11464 <strcmp@plt>
   16318:	cmp	r0, #0
   1631c:	moveq	r0, #1
   16320:	beq	16230 <__assert_fail@plt+0x49dc>
   16324:	ldr	r1, [pc, #448]	; 164ec <__assert_fail@plt+0x4c98>
   16328:	ldr	r0, [sp, #28]
   1632c:	bl	11464 <strcmp@plt>
   16330:	cmp	r0, #0
   16334:	moveq	r0, #1
   16338:	beq	16230 <__assert_fail@plt+0x49dc>
   1633c:	mov	r1, r4
   16340:	ldr	r0, [pc, #424]	; 164f0 <__assert_fail@plt+0x4c9c>
   16344:	bl	11464 <strcmp@plt>
   16348:	clz	r0, r0
   1634c:	lsr	r0, r0, #5
   16350:	b	16230 <__assert_fail@plt+0x49dc>
   16354:	ldrb	r3, [r4, #1]
   16358:	cmp	r3, #47	; 0x2f
   1635c:	bne	16264 <__assert_fail@plt+0x4a10>
   16360:	ldr	r1, [pc, #396]	; 164f4 <__assert_fail@plt+0x4ca0>
   16364:	ldr	r0, [sp, #28]
   16368:	bl	11464 <strcmp@plt>
   1636c:	cmp	r0, #0
   16370:	moveq	r0, #1
   16374:	beq	16230 <__assert_fail@plt+0x49dc>
   16378:	ldr	r1, [pc, #376]	; 164f8 <__assert_fail@plt+0x4ca4>
   1637c:	ldr	r0, [sp, #28]
   16380:	bl	11464 <strcmp@plt>
   16384:	cmp	r0, #0
   16388:	moveq	r0, #1
   1638c:	beq	16230 <__assert_fail@plt+0x49dc>
   16390:	ldr	r1, [pc, #356]	; 164fc <__assert_fail@plt+0x4ca8>
   16394:	ldr	r0, [sp, #28]
   16398:	bl	11464 <strcmp@plt>
   1639c:	cmp	r0, #0
   163a0:	moveq	r0, #1
   163a4:	beq	16230 <__assert_fail@plt+0x49dc>
   163a8:	b	16264 <__assert_fail@plt+0x4a10>
   163ac:	ldr	r0, [sp, #40]	; 0x28
   163b0:	bl	15c58 <__assert_fail@plt+0x4404>
   163b4:	ldr	r3, [r8]
   163b8:	tst	r3, #32
   163bc:	bne	163e4 <__assert_fail@plt+0x4b90>
   163c0:	mov	r0, r8
   163c4:	bl	1bcf8 <__assert_fail@plt+0xa4a4>
   163c8:	cmn	r0, #1
   163cc:	beq	163fc <__assert_fail@plt+0x4ba8>
   163d0:	mov	r3, #0
   163d4:	str	r3, [r9]
   163d8:	ldr	r0, [sp, #60]	; 0x3c
   163dc:	add	sp, sp, #68	; 0x44
   163e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   163e4:	bl	116b0 <__errno_location@plt>
   163e8:	mov	r4, r0
   163ec:	ldr	r5, [r0]
   163f0:	mov	r0, r8
   163f4:	bl	1bcf8 <__assert_fail@plt+0xa4a4>
   163f8:	str	r5, [r4]
   163fc:	bl	116b0 <__errno_location@plt>
   16400:	mov	r5, r0
   16404:	ldr	r6, [r0]
   16408:	mov	r3, #0
   1640c:	str	r3, [r9]
   16410:	ldr	r0, [sp, #60]	; 0x3c
   16414:	cmp	r0, r3
   16418:	beq	16434 <__assert_fail@plt+0x4be0>
   1641c:	ldr	r4, [r0, #28]
   16420:	bl	15e54 <__assert_fail@plt+0x4600>
   16424:	str	r4, [sp, #60]	; 0x3c
   16428:	mov	r0, r4
   1642c:	cmp	r4, #0
   16430:	bne	1641c <__assert_fail@plt+0x4bc8>
   16434:	str	r6, [r5]
   16438:	mov	r0, #0
   1643c:	b	163dc <__assert_fail@plt+0x4b88>
   16440:	ldr	r1, [pc, #72]	; 16490 <__assert_fail@plt+0x4c3c>
   16444:	ldr	r0, [pc, #72]	; 16494 <__assert_fail@plt+0x4c40>
   16448:	bl	117e8 <setmntent@plt>
   1644c:	subs	r7, r0, #0
   16450:	beq	16878 <__assert_fail@plt+0x5024>
   16454:	add	r9, sp, #60	; 0x3c
   16458:	ldr	sl, [pc, #56]	; 16498 <__assert_fail@plt+0x4c44>
   1645c:	ldr	r8, [pc, #36]	; 16488 <__assert_fail@plt+0x4c34>
   16460:	ldr	fp, [pc, #36]	; 1648c <__assert_fail@plt+0x4c38>
   16464:	b	16554 <__assert_fail@plt+0x4d00>
   16468:			; <UNDEFINED> instruction: 0xfff00000	; IMB
   1646c:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   16470:	andeq	lr, r1, r4, asr r8
   16474:	andeq	lr, r1, r4, lsl #16
   16478:	andeq	lr, r1, ip, lsl r8
   1647c:	andeq	lr, r1, r0, lsr r8
   16480:	andeq	pc, pc, r0, lsl #30
   16484:			; <UNDEFINED> instruction: 0xfffff000
   16488:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   1648c:	andeq	sp, r1, r8, asr r2
   16490:	andeq	lr, r1, r8, asr #12
   16494:	andeq	lr, r1, r4, lsl #17
   16498:	muleq	r1, r0, r8
   1649c:	andeq	lr, r1, r4, lsr r8
   164a0:	andeq	sp, r1, r8, asr r0
   164a4:	andeq	sp, r1, r0, ror r0
   164a8:	strdeq	sp, [r1], -r0
   164ac:	andeq	lr, r1, ip, lsr r8
   164b0:	andeq	sp, r1, r0, ror #3
   164b4:	muleq	r1, ip, r2
   164b8:	andeq	sp, r1, r4, lsl #6
   164bc:	andeq	sp, r1, r0, rrx
   164c0:	andeq	lr, r1, r8, asr #16
   164c4:	andeq	lr, r1, r0, asr r8
   164c8:	andeq	lr, r1, r8, asr r8
   164cc:	andeq	ip, r1, r8, ror #30
   164d0:	andeq	ip, r1, r0, lsl #31
   164d4:	andeq	sp, r1, r4, lsr #32
   164d8:	andeq	lr, r1, r0, ror r8
   164dc:	andeq	sp, r1, r0, ror #1
   164e0:	andeq	sp, r1, ip, lsl #2
   164e4:	andeq	sp, r1, ip, asr #2
   164e8:	andeq	sp, r1, r8, lsr #4
   164ec:	andeq	sp, r1, r0, ror #6
   164f0:	andeq	lr, r1, ip, ror r8
   164f4:	andeq	lr, r1, r0, ror #16
   164f8:	andeq	lr, r1, r8, ror #16
   164fc:	andeq	sp, r1, ip, lsl r0
   16500:	ldrb	r3, [r4, #24]
   16504:	bic	r3, r3, #1
   16508:	orr	r0, r0, r3
   1650c:	strb	r0, [r4, #24]
   16510:	ldr	r6, [r4]
   16514:	mov	r1, #58	; 0x3a
   16518:	mov	r0, r6
   1651c:	bl	11680 <strchr@plt>
   16520:	cmp	r0, #0
   16524:	movne	r3, #1
   16528:	beq	16710 <__assert_fail@plt+0x4ebc>
   1652c:	ldrb	r0, [r4, #24]
   16530:	and	r3, r3, #1
   16534:	bic	r0, r0, #2
   16538:	orr	r0, r0, r3, lsl #1
   1653c:	strb	r0, [r4, #24]
   16540:	mvn	r2, #0
   16544:	mvn	r3, #0
   16548:	strd	r2, [r4, #16]
   1654c:	str	r4, [r9]
   16550:	add	r9, r4, #28
   16554:	mov	r0, r7
   16558:	bl	115b4 <getmntent@plt>
   1655c:	subs	r5, r0, #0
   16560:	beq	16864 <__assert_fail@plt+0x5010>
   16564:	mov	r1, sl
   16568:	mov	r0, r5
   1656c:	bl	11578 <hasmntopt@plt>
   16570:	mov	r6, r0
   16574:	mov	r0, #32
   16578:	bl	1a99c <__assert_fail@plt+0x9148>
   1657c:	mov	r4, r0
   16580:	ldr	r0, [r5]
   16584:	bl	1af24 <__assert_fail@plt+0x96d0>
   16588:	str	r0, [r4]
   1658c:	ldr	r0, [r5, #4]
   16590:	bl	1af24 <__assert_fail@plt+0x96d0>
   16594:	str	r0, [r4, #4]
   16598:	mov	r3, #0
   1659c:	str	r3, [r4, #8]
   165a0:	ldr	r0, [r5, #8]
   165a4:	bl	1af24 <__assert_fail@plt+0x96d0>
   165a8:	mov	r5, r0
   165ac:	str	r0, [r4, #12]
   165b0:	ldrb	r3, [r4, #24]
   165b4:	orr	r3, r3, #4
   165b8:	strb	r3, [r4, #24]
   165bc:	mov	r1, r8
   165c0:	bl	11464 <strcmp@plt>
   165c4:	cmp	r0, #0
   165c8:	moveq	r0, #1
   165cc:	beq	16500 <__assert_fail@plt+0x4cac>
   165d0:	mov	r1, fp
   165d4:	mov	r0, r5
   165d8:	bl	11464 <strcmp@plt>
   165dc:	cmp	r0, #0
   165e0:	moveq	r0, #1
   165e4:	beq	16500 <__assert_fail@plt+0x4cac>
   165e8:	ldr	r1, [pc, #-340]	; 1649c <__assert_fail@plt+0x4c48>
   165ec:	mov	r0, r5
   165f0:	bl	11464 <strcmp@plt>
   165f4:	cmp	r0, #0
   165f8:	moveq	r0, #1
   165fc:	beq	16500 <__assert_fail@plt+0x4cac>
   16600:	ldr	r1, [pc, #-360]	; 164a0 <__assert_fail@plt+0x4c4c>
   16604:	mov	r0, r5
   16608:	bl	11464 <strcmp@plt>
   1660c:	cmp	r0, #0
   16610:	moveq	r0, #1
   16614:	beq	16500 <__assert_fail@plt+0x4cac>
   16618:	ldr	r1, [pc, #-380]	; 164a4 <__assert_fail@plt+0x4c50>
   1661c:	mov	r0, r5
   16620:	bl	11464 <strcmp@plt>
   16624:	cmp	r0, #0
   16628:	moveq	r0, #1
   1662c:	beq	16500 <__assert_fail@plt+0x4cac>
   16630:	ldr	r1, [pc, #-400]	; 164a8 <__assert_fail@plt+0x4c54>
   16634:	mov	r0, r5
   16638:	bl	11464 <strcmp@plt>
   1663c:	cmp	r0, #0
   16640:	moveq	r0, #1
   16644:	beq	16500 <__assert_fail@plt+0x4cac>
   16648:	ldr	r1, [pc, #-420]	; 164ac <__assert_fail@plt+0x4c58>
   1664c:	mov	r0, r5
   16650:	bl	11464 <strcmp@plt>
   16654:	cmp	r0, #0
   16658:	moveq	r0, #1
   1665c:	beq	16500 <__assert_fail@plt+0x4cac>
   16660:	ldr	r1, [pc, #-440]	; 164b0 <__assert_fail@plt+0x4c5c>
   16664:	mov	r0, r5
   16668:	bl	11464 <strcmp@plt>
   1666c:	cmp	r0, #0
   16670:	moveq	r0, #1
   16674:	beq	16500 <__assert_fail@plt+0x4cac>
   16678:	ldr	r1, [pc, #-460]	; 164b4 <__assert_fail@plt+0x4c60>
   1667c:	mov	r0, r5
   16680:	bl	11464 <strcmp@plt>
   16684:	cmp	r0, #0
   16688:	moveq	r0, #1
   1668c:	beq	16500 <__assert_fail@plt+0x4cac>
   16690:	ldr	r1, [pc, #-480]	; 164b8 <__assert_fail@plt+0x4c64>
   16694:	mov	r0, r5
   16698:	bl	11464 <strcmp@plt>
   1669c:	cmp	r0, #0
   166a0:	moveq	r0, #1
   166a4:	beq	16500 <__assert_fail@plt+0x4cac>
   166a8:	ldr	r1, [pc, #-500]	; 164bc <__assert_fail@plt+0x4c68>
   166ac:	mov	r0, r5
   166b0:	bl	11464 <strcmp@plt>
   166b4:	cmp	r0, #0
   166b8:	moveq	r0, #1
   166bc:	beq	16500 <__assert_fail@plt+0x4cac>
   166c0:	ldr	r1, [pc, #-520]	; 164c0 <__assert_fail@plt+0x4c6c>
   166c4:	mov	r0, r5
   166c8:	bl	11464 <strcmp@plt>
   166cc:	cmp	r0, #0
   166d0:	moveq	r0, #1
   166d4:	beq	16500 <__assert_fail@plt+0x4cac>
   166d8:	ldr	r1, [pc, #-540]	; 164c4 <__assert_fail@plt+0x4c70>
   166dc:	mov	r0, r5
   166e0:	bl	11464 <strcmp@plt>
   166e4:	cmp	r0, #0
   166e8:	moveq	r0, #1
   166ec:	beq	16500 <__assert_fail@plt+0x4cac>
   166f0:	ldr	r1, [pc, #-560]	; 164c8 <__assert_fail@plt+0x4c74>
   166f4:	mov	r0, r5
   166f8:	bl	11464 <strcmp@plt>
   166fc:	cmp	r6, #0
   16700:	cmpeq	r0, #0
   16704:	moveq	r0, #1
   16708:	movne	r0, #0
   1670c:	b	16500 <__assert_fail@plt+0x4cac>
   16710:	ldrb	r3, [r6]
   16714:	cmp	r3, #47	; 0x2f
   16718:	beq	1680c <__assert_fail@plt+0x4fb8>
   1671c:	ldr	r1, [pc, #-600]	; 164cc <__assert_fail@plt+0x4c78>
   16720:	mov	r0, r5
   16724:	bl	11464 <strcmp@plt>
   16728:	cmp	r0, #0
   1672c:	moveq	r3, #1
   16730:	beq	1652c <__assert_fail@plt+0x4cd8>
   16734:	ldr	r1, [pc, #-620]	; 164d0 <__assert_fail@plt+0x4c7c>
   16738:	mov	r0, r5
   1673c:	bl	11464 <strcmp@plt>
   16740:	cmp	r0, #0
   16744:	moveq	r3, #1
   16748:	beq	1652c <__assert_fail@plt+0x4cd8>
   1674c:	ldr	r1, [pc, #-640]	; 164d4 <__assert_fail@plt+0x4c80>
   16750:	mov	r0, r5
   16754:	bl	11464 <strcmp@plt>
   16758:	cmp	r0, #0
   1675c:	moveq	r3, #1
   16760:	beq	1652c <__assert_fail@plt+0x4cd8>
   16764:	ldr	r1, [pc, #-660]	; 164d8 <__assert_fail@plt+0x4c84>
   16768:	mov	r0, r5
   1676c:	bl	11464 <strcmp@plt>
   16770:	cmp	r0, #0
   16774:	moveq	r3, #1
   16778:	beq	1652c <__assert_fail@plt+0x4cd8>
   1677c:	ldr	r1, [pc, #-680]	; 164dc <__assert_fail@plt+0x4c88>
   16780:	mov	r0, r5
   16784:	bl	11464 <strcmp@plt>
   16788:	cmp	r0, #0
   1678c:	moveq	r3, #1
   16790:	beq	1652c <__assert_fail@plt+0x4cd8>
   16794:	ldr	r1, [pc, #-700]	; 164e0 <__assert_fail@plt+0x4c8c>
   16798:	mov	r0, r5
   1679c:	bl	11464 <strcmp@plt>
   167a0:	cmp	r0, #0
   167a4:	moveq	r3, #1
   167a8:	beq	1652c <__assert_fail@plt+0x4cd8>
   167ac:	ldr	r1, [pc, #-720]	; 164e4 <__assert_fail@plt+0x4c90>
   167b0:	mov	r0, r5
   167b4:	bl	11464 <strcmp@plt>
   167b8:	cmp	r0, #0
   167bc:	moveq	r3, #1
   167c0:	beq	1652c <__assert_fail@plt+0x4cd8>
   167c4:	ldr	r1, [pc, #-740]	; 164e8 <__assert_fail@plt+0x4c94>
   167c8:	mov	r0, r5
   167cc:	bl	11464 <strcmp@plt>
   167d0:	cmp	r0, #0
   167d4:	moveq	r3, #1
   167d8:	beq	1652c <__assert_fail@plt+0x4cd8>
   167dc:	ldr	r1, [pc, #-760]	; 164ec <__assert_fail@plt+0x4c98>
   167e0:	mov	r0, r5
   167e4:	bl	11464 <strcmp@plt>
   167e8:	cmp	r0, #0
   167ec:	moveq	r3, #1
   167f0:	beq	1652c <__assert_fail@plt+0x4cd8>
   167f4:	mov	r1, r6
   167f8:	ldr	r0, [pc, #-784]	; 164f0 <__assert_fail@plt+0x4c9c>
   167fc:	bl	11464 <strcmp@plt>
   16800:	clz	r3, r0
   16804:	lsr	r3, r3, #5
   16808:	b	1652c <__assert_fail@plt+0x4cd8>
   1680c:	ldrb	r3, [r6, #1]
   16810:	cmp	r3, #47	; 0x2f
   16814:	bne	1671c <__assert_fail@plt+0x4ec8>
   16818:	ldr	r1, [pc, #-812]	; 164f4 <__assert_fail@plt+0x4ca0>
   1681c:	mov	r0, r5
   16820:	bl	11464 <strcmp@plt>
   16824:	cmp	r0, #0
   16828:	moveq	r3, #1
   1682c:	beq	1652c <__assert_fail@plt+0x4cd8>
   16830:	ldr	r1, [pc, #-832]	; 164f8 <__assert_fail@plt+0x4ca4>
   16834:	mov	r0, r5
   16838:	bl	11464 <strcmp@plt>
   1683c:	cmp	r0, #0
   16840:	moveq	r3, #1
   16844:	beq	1652c <__assert_fail@plt+0x4cd8>
   16848:	ldr	r1, [pc, #-852]	; 164fc <__assert_fail@plt+0x4ca8>
   1684c:	mov	r0, r5
   16850:	bl	11464 <strcmp@plt>
   16854:	cmp	r0, #0
   16858:	moveq	r3, #1
   1685c:	beq	1652c <__assert_fail@plt+0x4cd8>
   16860:	b	1671c <__assert_fail@plt+0x4ec8>
   16864:	mov	r0, r7
   16868:	bl	11740 <endmntent@plt>
   1686c:	cmp	r0, #0
   16870:	bne	163d0 <__assert_fail@plt+0x4b7c>
   16874:	b	163fc <__assert_fail@plt+0x4ba8>
   16878:	mov	r0, #0
   1687c:	b	163dc <__assert_fail@plt+0x4b88>
   16880:	push	{r4, r5, r6, lr}
   16884:	mov	r5, r0
   16888:	subs	r4, r2, #0
   1688c:	beq	168bc <__assert_fail@plt+0x5068>
   16890:	mov	r6, r1
   16894:	bl	11614 <__ctype_tolower_loc@plt>
   16898:	add	r3, r6, r4
   1689c:	add	r2, r5, r4
   168a0:	mov	r1, r6
   168a4:	ldrb	lr, [r3, #-1]!
   168a8:	ldr	ip, [r0]
   168ac:	ldr	ip, [ip, lr, lsl #2]
   168b0:	strb	ip, [r2, #-1]!
   168b4:	cmp	r3, r1
   168b8:	bne	168a4 <__assert_fail@plt+0x5050>
   168bc:	mov	r0, r5
   168c0:	pop	{r4, r5, r6, pc}
   168c4:	push	{r4, r5, r6, lr}
   168c8:	mov	r5, r0
   168cc:	subs	r4, r2, #0
   168d0:	beq	16900 <__assert_fail@plt+0x50ac>
   168d4:	mov	r6, r1
   168d8:	bl	11620 <__ctype_toupper_loc@plt>
   168dc:	add	r3, r6, r4
   168e0:	add	r2, r5, r4
   168e4:	mov	r1, r6
   168e8:	ldrb	lr, [r3, #-1]!
   168ec:	ldr	ip, [r0]
   168f0:	ldr	ip, [ip, lr, lsl #2]
   168f4:	strb	ip, [r2, #-1]!
   168f8:	cmp	r3, r1
   168fc:	bne	168e8 <__assert_fail@plt+0x5094>
   16900:	mov	r0, r5
   16904:	pop	{r4, r5, r6, pc}
   16908:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1690c:	sub	sp, sp, #1104	; 0x450
   16910:	sub	sp, sp, #12
   16914:	mov	sl, r0
   16918:	str	r1, [sp, #32]
   1691c:	mov	r9, r2
   16920:	mov	r4, r3
   16924:	str	r3, [sp, #36]	; 0x24
   16928:	ldrb	r3, [sp, #1152]	; 0x480
   1692c:	str	r3, [sp, #56]	; 0x38
   16930:	ldr	r5, [sp, #1160]	; 0x488
   16934:	bl	116b0 <__errno_location@plt>
   16938:	str	r0, [sp, #44]	; 0x2c
   1693c:	ldr	r3, [r0]
   16940:	str	r3, [sp, #64]	; 0x40
   16944:	ldr	r2, [r4, #8]
   16948:	mov	r0, r2
   1694c:	str	r2, [sp, #48]	; 0x30
   16950:	ldr	r3, [r4, #40]	; 0x28
   16954:	mov	r1, r3
   16958:	ldr	r3, [pc, #4012]	; 1790c <__assert_fail@plt+0x60b8>
   1695c:	mov	r2, r1
   16960:	cmp	r1, #0
   16964:	moveq	r2, r3
   16968:	str	r2, [sp, #60]	; 0x3c
   1696c:	cmp	r0, #12
   16970:	ble	16994 <__assert_fail@plt+0x5140>
   16974:	sub	r3, r0, #12
   16978:	str	r3, [sp, #48]	; 0x30
   1697c:	ldrb	r3, [r9]
   16980:	cmp	r3, #0
   16984:	beq	180d0 <__assert_fail@plt+0x687c>
   16988:	mov	fp, #0
   1698c:	ldr	r6, [pc, #3964]	; 17910 <__assert_fail@plt+0x60bc>
   16990:	b	169f8 <__assert_fail@plt+0x51a4>
   16994:	ldr	r2, [sp, #48]	; 0x30
   16998:	mov	r3, r2
   1699c:	cmp	r2, #0
   169a0:	moveq	r3, #12
   169a4:	str	r3, [sp, #48]	; 0x30
   169a8:	b	1697c <__assert_fail@plt+0x5128>
   169ac:	cmp	sl, #0
   169b0:	beq	169dc <__assert_fail@plt+0x5188>
   169b4:	cmp	r5, #1
   169b8:	bls	169d4 <__assert_fail@plt+0x5180>
   169bc:	sub	r5, r5, #1
   169c0:	mov	r2, r5
   169c4:	mov	r1, #32
   169c8:	mov	r0, sl
   169cc:	bl	116e0 <memset@plt>
   169d0:	add	sl, sl, r5
   169d4:	ldrb	r3, [r9]
   169d8:	strb	r3, [sl], #1
   169dc:	add	fp, fp, r4
   169e0:	mov	r7, r9
   169e4:	add	r9, r7, #1
   169e8:	ldrb	r3, [r7, #1]
   169ec:	mvn	r5, #0
   169f0:	cmp	r3, #0
   169f4:	beq	180d4 <__assert_fail@plt+0x6880>
   169f8:	cmp	r3, #37	; 0x25
   169fc:	beq	16b54 <__assert_fail@plt+0x5300>
   16a00:	bic	r5, r5, r5, asr #31
   16a04:	cmp	r5, #1
   16a08:	movcs	r4, r5
   16a0c:	movcc	r4, #1
   16a10:	ldr	r3, [sp, #32]
   16a14:	sub	r3, r3, fp
   16a18:	cmp	r4, r3
   16a1c:	bcc	169ac <__assert_fail@plt+0x5158>
   16a20:	mov	r3, #34	; 0x22
   16a24:	ldr	r2, [sp, #44]	; 0x2c
   16a28:	str	r3, [r2]
   16a2c:	mov	fp, #0
   16a30:	mov	r0, fp
   16a34:	add	sp, sp, #1104	; 0x450
   16a38:	add	sp, sp, #12
   16a3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16a40:	str	r3, [sp, #28]
   16a44:	b	16a4c <__assert_fail@plt+0x51f8>
   16a48:	mov	r8, r1
   16a4c:	ldrb	r3, [r7, #1]!
   16a50:	sub	r2, r3, #35	; 0x23
   16a54:	cmp	r2, #60	; 0x3c
   16a58:	ldrls	pc, [pc, r2, lsl #2]
   16a5c:	b	16b7c <__assert_fail@plt+0x5328>
   16a60:	andeq	r6, r1, r8, asr #20
   16a64:	andeq	r6, r1, ip, ror fp
   16a68:	andeq	r6, r1, ip, ror fp
   16a6c:	andeq	r6, r1, ip, ror fp
   16a70:	andeq	r6, r1, ip, ror fp
   16a74:	andeq	r6, r1, ip, ror fp
   16a78:	andeq	r6, r1, ip, ror fp
   16a7c:	andeq	r6, r1, ip, ror fp
   16a80:	andeq	r6, r1, r0, asr #20
   16a84:	andeq	r6, r1, ip, ror fp
   16a88:	andeq	r6, r1, r0, asr #20
   16a8c:	andeq	r6, r1, ip, ror fp
   16a90:	andeq	r6, r1, ip, ror fp
   16a94:	andeq	r6, r1, r0, asr #20
   16a98:	andeq	r6, r1, ip, ror fp
   16a9c:	andeq	r6, r1, ip, ror fp
   16aa0:	andeq	r6, r1, ip, ror fp
   16aa4:	andeq	r6, r1, ip, ror fp
   16aa8:	andeq	r6, r1, ip, ror fp
   16aac:	andeq	r6, r1, ip, ror fp
   16ab0:	andeq	r6, r1, ip, ror fp
   16ab4:	andeq	r6, r1, ip, ror fp
   16ab8:	andeq	r6, r1, ip, ror fp
   16abc:	andeq	r6, r1, ip, ror fp
   16ac0:	andeq	r6, r1, ip, ror fp
   16ac4:	andeq	r6, r1, ip, ror fp
   16ac8:	andeq	r6, r1, ip, ror fp
   16acc:	andeq	r6, r1, ip, ror fp
   16ad0:	andeq	r6, r1, ip, ror fp
   16ad4:	andeq	r6, r1, ip, ror fp
   16ad8:	andeq	r6, r1, ip, ror fp
   16adc:	andeq	r6, r1, ip, ror fp
   16ae0:	andeq	r6, r1, ip, ror fp
   16ae4:	andeq	r6, r1, ip, ror fp
   16ae8:	andeq	r6, r1, ip, ror fp
   16aec:	andeq	r6, r1, ip, ror fp
   16af0:	andeq	r6, r1, ip, ror fp
   16af4:	andeq	r6, r1, ip, ror fp
   16af8:	andeq	r6, r1, ip, ror fp
   16afc:	andeq	r6, r1, ip, ror fp
   16b00:	andeq	r6, r1, ip, ror fp
   16b04:	andeq	r6, r1, ip, ror fp
   16b08:	andeq	r6, r1, ip, ror fp
   16b0c:	andeq	r6, r1, ip, ror fp
   16b10:	andeq	r6, r1, ip, ror fp
   16b14:	andeq	r6, r1, ip, ror fp
   16b18:	andeq	r6, r1, ip, ror fp
   16b1c:	andeq	r6, r1, ip, ror fp
   16b20:	andeq	r6, r1, ip, ror fp
   16b24:	andeq	r6, r1, ip, ror fp
   16b28:	andeq	r6, r1, ip, ror fp
   16b2c:	andeq	r6, r1, ip, ror fp
   16b30:	andeq	r6, r1, ip, ror fp
   16b34:	andeq	r6, r1, ip, ror fp
   16b38:	andeq	r6, r1, ip, ror fp
   16b3c:	andeq	r6, r1, ip, ror fp
   16b40:	andeq	r6, r1, ip, ror fp
   16b44:	andeq	r6, r1, ip, ror fp
   16b48:	andeq	r6, r1, ip, ror fp
   16b4c:	andeq	r6, r1, r0, ror fp
   16b50:	andeq	r6, r1, r0, asr #20
   16b54:	ldr	r3, [sp, #56]	; 0x38
   16b58:	str	r3, [sp, #40]	; 0x28
   16b5c:	mov	r7, r9
   16b60:	mov	r8, #0
   16b64:	str	r8, [sp, #28]
   16b68:	mov	r1, #1
   16b6c:	b	16a4c <__assert_fail@plt+0x51f8>
   16b70:	mov	r3, #1
   16b74:	str	r3, [sp, #40]	; 0x28
   16b78:	b	16a4c <__assert_fail@plt+0x51f8>
   16b7c:	sub	r3, r3, #48	; 0x30
   16b80:	cmp	r3, #9
   16b84:	bhi	16c5c <__assert_fail@plt+0x5408>
   16b88:	mov	r5, #0
   16b8c:	ldr	r4, [pc, #3456]	; 17914 <__assert_fail@plt+0x60c0>
   16b90:	b	16bec <__assert_fail@plt+0x5398>
   16b94:	cmn	r5, #1
   16b98:	moveq	r0, #0
   16b9c:	beq	16c00 <__assert_fail@plt+0x53ac>
   16ba0:	mov	r1, r5
   16ba4:	mov	r0, #-2147483648	; 0x80000000
   16ba8:	bl	1c710 <__assert_fail@plt+0xaebc>
   16bac:	cmp	r0, #9
   16bb0:	movgt	r0, #0
   16bb4:	movle	r0, #1
   16bb8:	b	16c00 <__assert_fail@plt+0x53ac>
   16bbc:	rsb	r3, r2, #-2147483600	; 0x80000030
   16bc0:	cmp	r5, r3
   16bc4:	movge	r3, #0
   16bc8:	movlt	r3, #1
   16bcc:	cmp	r3, #0
   16bd0:	addeq	r5, r2, r5
   16bd4:	subeq	r5, r5, #48	; 0x30
   16bd8:	mvnne	r5, #-2147483648	; 0x80000000
   16bdc:	ldrb	r3, [r7, #1]!
   16be0:	sub	r3, r3, #48	; 0x30
   16be4:	cmp	r3, #9
   16be8:	bhi	16c5c <__assert_fail@plt+0x5408>
   16bec:	cmp	r5, #0
   16bf0:	blt	16b94 <__assert_fail@plt+0x5340>
   16bf4:	cmp	r5, r4
   16bf8:	movle	r0, #0
   16bfc:	movgt	r0, #1
   16c00:	cmp	r0, #0
   16c04:	mvnne	r5, #-2147483648	; 0x80000000
   16c08:	bne	16bdc <__assert_fail@plt+0x5388>
   16c0c:	add	r5, r5, r5, lsl #2
   16c10:	lsl	r5, r5, #1
   16c14:	ldrb	r2, [r7]
   16c18:	subs	r3, r2, #48	; 0x30
   16c1c:	bmi	16bbc <__assert_fail@plt+0x5368>
   16c20:	cmp	r5, #0
   16c24:	blt	16c48 <__assert_fail@plt+0x53f4>
   16c28:	rsb	r3, r3, #2130706432	; 0x7f000000
   16c2c:	add	r3, r3, #16711680	; 0xff0000
   16c30:	add	r3, r3, #65280	; 0xff00
   16c34:	add	r3, r3, #255	; 0xff
   16c38:	cmp	r5, r3
   16c3c:	movle	r3, #0
   16c40:	movgt	r3, #1
   16c44:	b	16bcc <__assert_fail@plt+0x5378>
   16c48:	rsb	r1, r5, #-2147483648	; 0x80000000
   16c4c:	cmp	r3, r1
   16c50:	movge	r3, #0
   16c54:	movlt	r3, #1
   16c58:	b	16bcc <__assert_fail@plt+0x5378>
   16c5c:	ldrb	r2, [r7]
   16c60:	cmp	r2, #69	; 0x45
   16c64:	beq	16e74 <__assert_fail@plt+0x5620>
   16c68:	cmp	r2, #79	; 0x4f
   16c6c:	movne	r2, #0
   16c70:	beq	16e74 <__assert_fail@plt+0x5620>
   16c74:	ldrb	r1, [r7]
   16c78:	mov	r4, r1
   16c7c:	cmp	r1, #122	; 0x7a
   16c80:	ldrls	pc, [pc, r1, lsl #2]
   16c84:	b	16fbc <__assert_fail@plt+0x5768>
   16c88:			; <UNDEFINED> instruction: 0x00016fb8
   16c8c:			; <UNDEFINED> instruction: 0x00016fbc
   16c90:			; <UNDEFINED> instruction: 0x00016fbc
   16c94:			; <UNDEFINED> instruction: 0x00016fbc
   16c98:			; <UNDEFINED> instruction: 0x00016fbc
   16c9c:			; <UNDEFINED> instruction: 0x00016fbc
   16ca0:			; <UNDEFINED> instruction: 0x00016fbc
   16ca4:			; <UNDEFINED> instruction: 0x00016fbc
   16ca8:			; <UNDEFINED> instruction: 0x00016fbc
   16cac:			; <UNDEFINED> instruction: 0x00016fbc
   16cb0:			; <UNDEFINED> instruction: 0x00016fbc
   16cb4:			; <UNDEFINED> instruction: 0x00016fbc
   16cb8:			; <UNDEFINED> instruction: 0x00016fbc
   16cbc:			; <UNDEFINED> instruction: 0x00016fbc
   16cc0:			; <UNDEFINED> instruction: 0x00016fbc
   16cc4:			; <UNDEFINED> instruction: 0x00016fbc
   16cc8:			; <UNDEFINED> instruction: 0x00016fbc
   16ccc:			; <UNDEFINED> instruction: 0x00016fbc
   16cd0:			; <UNDEFINED> instruction: 0x00016fbc
   16cd4:			; <UNDEFINED> instruction: 0x00016fbc
   16cd8:			; <UNDEFINED> instruction: 0x00016fbc
   16cdc:			; <UNDEFINED> instruction: 0x00016fbc
   16ce0:			; <UNDEFINED> instruction: 0x00016fbc
   16ce4:			; <UNDEFINED> instruction: 0x00016fbc
   16ce8:			; <UNDEFINED> instruction: 0x00016fbc
   16cec:			; <UNDEFINED> instruction: 0x00016fbc
   16cf0:			; <UNDEFINED> instruction: 0x00016fbc
   16cf4:			; <UNDEFINED> instruction: 0x00016fbc
   16cf8:			; <UNDEFINED> instruction: 0x00016fbc
   16cfc:			; <UNDEFINED> instruction: 0x00016fbc
   16d00:			; <UNDEFINED> instruction: 0x00016fbc
   16d04:			; <UNDEFINED> instruction: 0x00016fbc
   16d08:			; <UNDEFINED> instruction: 0x00016fbc
   16d0c:			; <UNDEFINED> instruction: 0x00016fbc
   16d10:			; <UNDEFINED> instruction: 0x00016fbc
   16d14:			; <UNDEFINED> instruction: 0x00016fbc
   16d18:			; <UNDEFINED> instruction: 0x00016fbc
   16d1c:	andeq	r6, r1, ip, lsr #31
   16d20:			; <UNDEFINED> instruction: 0x00016fbc
   16d24:			; <UNDEFINED> instruction: 0x00016fbc
   16d28:			; <UNDEFINED> instruction: 0x00016fbc
   16d2c:			; <UNDEFINED> instruction: 0x00016fbc
   16d30:			; <UNDEFINED> instruction: 0x00016fbc
   16d34:			; <UNDEFINED> instruction: 0x00016fbc
   16d38:			; <UNDEFINED> instruction: 0x00016fbc
   16d3c:			; <UNDEFINED> instruction: 0x00016fbc
   16d40:			; <UNDEFINED> instruction: 0x00016fbc
   16d44:			; <UNDEFINED> instruction: 0x00016fbc
   16d48:			; <UNDEFINED> instruction: 0x00016fbc
   16d4c:			; <UNDEFINED> instruction: 0x00016fbc
   16d50:			; <UNDEFINED> instruction: 0x00016fbc
   16d54:			; <UNDEFINED> instruction: 0x00016fbc
   16d58:			; <UNDEFINED> instruction: 0x00016fbc
   16d5c:			; <UNDEFINED> instruction: 0x00016fbc
   16d60:			; <UNDEFINED> instruction: 0x00016fbc
   16d64:			; <UNDEFINED> instruction: 0x00016fbc
   16d68:			; <UNDEFINED> instruction: 0x00016fbc
   16d6c:			; <UNDEFINED> instruction: 0x00016fbc
   16d70:	andeq	r6, r1, r8, lsl #31
   16d74:			; <UNDEFINED> instruction: 0x00016fbc
   16d78:			; <UNDEFINED> instruction: 0x00016fbc
   16d7c:			; <UNDEFINED> instruction: 0x00016fbc
   16d80:			; <UNDEFINED> instruction: 0x00016fbc
   16d84:			; <UNDEFINED> instruction: 0x00016fbc
   16d88:			; <UNDEFINED> instruction: 0x00016fbc
   16d8c:	andeq	r7, r1, r0, lsr #2
   16d90:	andeq	r7, r1, r0, ror #2
   16d94:	andeq	r7, r1, r4, lsl #6
   16d98:	andeq	r7, r1, r4, lsr #7
   16d9c:			; <UNDEFINED> instruction: 0x00016fbc
   16da0:	andeq	r7, r1, ip, asr r5
   16da4:	andeq	r7, r1, r8, lsl #22
   16da8:	muleq	r1, r4, r5
   16dac:	andeq	r7, r1, ip, lsr #11
   16db0:			; <UNDEFINED> instruction: 0x00016fbc
   16db4:			; <UNDEFINED> instruction: 0x00016fbc
   16db8:			; <UNDEFINED> instruction: 0x00016fbc
   16dbc:	andeq	r7, r1, r8, lsl r6
   16dc0:	andeq	r7, r1, r4, ror #12
   16dc4:			; <UNDEFINED> instruction: 0x00016fbc
   16dc8:	andeq	r7, r1, ip, ror r8
   16dcc:			; <UNDEFINED> instruction: 0x00016fbc
   16dd0:	muleq	r1, r4, r1
   16dd4:	strdeq	r7, [r1], -r4
   16dd8:	andeq	r6, r1, ip, ror lr
   16ddc:	ldrdeq	r7, [r1], -r0
   16de0:	andeq	r7, r1, r8, lsl #22
   16de4:	andeq	r7, r1, r8, ror sp
   16de8:	strdeq	r7, [r1], -r8
   16dec:	andeq	r7, r1, r8, ror #27
   16df0:	andeq	r7, r1, r8, ror lr
   16df4:			; <UNDEFINED> instruction: 0x00016fbc
   16df8:			; <UNDEFINED> instruction: 0x00016fbc
   16dfc:			; <UNDEFINED> instruction: 0x00016fbc
   16e00:			; <UNDEFINED> instruction: 0x00016fbc
   16e04:			; <UNDEFINED> instruction: 0x00016fbc
   16e08:			; <UNDEFINED> instruction: 0x00016fbc
   16e0c:	andeq	r7, r1, r8, ror #1
   16e10:	andeq	r7, r1, r0, asr #2
   16e14:	andeq	r7, r1, r0, lsl #3
   16e18:			; <UNDEFINED> instruction: 0x000173bc
   16e1c:	ldrdeq	r7, [r1], -r4
   16e20:			; <UNDEFINED> instruction: 0x00016fbc
   16e24:	andeq	r7, r1, r8, lsl #22
   16e28:	andeq	r7, r1, r0, asr #2
   16e2c:			; <UNDEFINED> instruction: 0x00016fbc
   16e30:	andeq	r7, r1, r4, ror #11
   16e34:	andeq	r7, r1, r0, asr #11
   16e38:	ldrdeq	r7, [r1], -r4
   16e3c:	andeq	r7, r1, r0, lsr r6
   16e40:	andeq	r7, r1, ip, ror #15
   16e44:			; <UNDEFINED> instruction: 0x00016fbc
   16e48:	muleq	r1, ip, r8
   16e4c:	andeq	r7, r1, r4, lsr #17
   16e50:	andeq	r7, r1, ip, asr #3
   16e54:	andeq	r7, r1, ip, asr #18
   16e58:	andeq	r7, r1, ip, lsl #20
   16e5c:	muleq	r1, ip, sl
   16e60:			; <UNDEFINED> instruction: 0x00016fbc
   16e64:	ldrdeq	r7, [r1], -r0
   16e68:	muleq	r1, r0, r3
   16e6c:	andeq	r7, r1, r4, lsr #28
   16e70:	andeq	r7, r1, ip, lsl #31
   16e74:	add	r7, r7, #1
   16e78:	b	16c74 <__assert_fail@plt+0x5420>
   16e7c:	mvn	r8, #0
   16e80:	ldr	r3, [pc, #2704]	; 17918 <__assert_fail@plt+0x60c4>
   16e84:	str	r3, [sp, #52]	; 0x34
   16e88:	ldr	r3, [sp, #1172]	; 0x494
   16e8c:	str	r3, [sp, #20]
   16e90:	ldr	r3, [sp, #1168]	; 0x490
   16e94:	str	r3, [sp, #16]
   16e98:	ldr	r3, [sp, #1164]	; 0x48c
   16e9c:	str	r3, [sp, #12]
   16ea0:	str	r8, [sp, #8]
   16ea4:	ldr	r4, [sp, #28]
   16ea8:	str	r4, [sp, #4]
   16eac:	ldr	r3, [sp, #40]	; 0x28
   16eb0:	str	r3, [sp]
   16eb4:	ldr	r3, [sp, #36]	; 0x24
   16eb8:	ldr	r2, [sp, #52]	; 0x34
   16ebc:	mvn	r1, #0
   16ec0:	mov	r0, #0
   16ec4:	bl	16908 <__assert_fail@plt+0x50b4>
   16ec8:	mov	r9, r0
   16ecc:	subs	r3, r4, #45	; 0x2d
   16ed0:	movne	r3, #1
   16ed4:	cmp	r5, #0
   16ed8:	movlt	r3, #0
   16edc:	cmp	r3, #0
   16ee0:	moveq	r5, #0
   16ee4:	mov	r4, r5
   16ee8:	cmp	r5, r0
   16eec:	movcc	r5, r0
   16ef0:	ldr	r3, [sp, #32]
   16ef4:	sub	r3, r3, fp
   16ef8:	str	r3, [sp, #68]	; 0x44
   16efc:	cmp	r5, r3
   16f00:	bcs	171bc <__assert_fail@plt+0x5968>
   16f04:	cmp	sl, #0
   16f08:	beq	16f80 <__assert_fail@plt+0x572c>
   16f0c:	cmp	r4, r0
   16f10:	bls	16f3c <__assert_fail@plt+0x56e8>
   16f14:	sub	r4, r4, r0
   16f18:	ldr	r3, [sp, #28]
   16f1c:	cmp	r3, #43	; 0x2b
   16f20:	cmpne	r3, #48	; 0x30
   16f24:	mov	r2, r4
   16f28:	moveq	r1, #48	; 0x30
   16f2c:	movne	r1, #32
   16f30:	mov	r0, sl
   16f34:	bl	116e0 <memset@plt>
   16f38:	add	sl, sl, r4
   16f3c:	ldr	r3, [sp, #1172]	; 0x494
   16f40:	str	r3, [sp, #20]
   16f44:	ldr	r3, [sp, #1168]	; 0x490
   16f48:	str	r3, [sp, #16]
   16f4c:	ldr	r3, [sp, #1164]	; 0x48c
   16f50:	str	r3, [sp, #12]
   16f54:	str	r8, [sp, #8]
   16f58:	ldr	r3, [sp, #28]
   16f5c:	str	r3, [sp, #4]
   16f60:	ldr	r3, [sp, #40]	; 0x28
   16f64:	str	r3, [sp]
   16f68:	ldr	r3, [sp, #36]	; 0x24
   16f6c:	ldr	r2, [sp, #52]	; 0x34
   16f70:	ldr	r1, [sp, #68]	; 0x44
   16f74:	mov	r0, sl
   16f78:	bl	16908 <__assert_fail@plt+0x50b4>
   16f7c:	add	sl, sl, r9
   16f80:	add	fp, fp, r5
   16f84:	b	169e4 <__assert_fail@plt+0x5190>
   16f88:	add	r0, r7, #1
   16f8c:	ldrb	r3, [r7, #1]
   16f90:	cmp	r3, #58	; 0x3a
   16f94:	movne	lr, #1
   16f98:	beq	17f6c <__assert_fail@plt+0x6718>
   16f9c:	cmp	r3, #122	; 0x7a
   16fa0:	moveq	r7, r0
   16fa4:	bne	16fbc <__assert_fail@plt+0x5768>
   16fa8:	b	17f90 <__assert_fail@plt+0x673c>
   16fac:	sub	r3, r7, #1
   16fb0:	cmp	r9, r3
   16fb4:	beq	1705c <__assert_fail@plt+0x5808>
   16fb8:	sub	r7, r7, #1
   16fbc:	sub	r8, r7, r9
   16fc0:	add	r8, r8, #1
   16fc4:	ldr	r3, [sp, #28]
   16fc8:	subs	r3, r3, #45	; 0x2d
   16fcc:	movne	r3, #1
   16fd0:	cmp	r5, #0
   16fd4:	movlt	r3, #0
   16fd8:	cmp	r3, #0
   16fdc:	moveq	r5, #0
   16fe0:	mov	r4, r5
   16fe4:	cmp	r5, r8
   16fe8:	movcc	r5, r8
   16fec:	ldr	r3, [sp, #32]
   16ff0:	sub	r3, r3, fp
   16ff4:	cmp	r5, r3
   16ff8:	bcs	180ac <__assert_fail@plt+0x6858>
   16ffc:	cmp	sl, #0
   17000:	beq	17054 <__assert_fail@plt+0x5800>
   17004:	cmp	r4, r8
   17008:	bls	17034 <__assert_fail@plt+0x57e0>
   1700c:	sub	r4, r4, r8
   17010:	ldr	r3, [sp, #28]
   17014:	cmp	r3, #43	; 0x2b
   17018:	cmpne	r3, #48	; 0x30
   1701c:	mov	r2, r4
   17020:	moveq	r1, #48	; 0x30
   17024:	movne	r1, #32
   17028:	mov	r0, sl
   1702c:	bl	116e0 <memset@plt>
   17030:	add	sl, sl, r4
   17034:	ldr	r3, [sp, #40]	; 0x28
   17038:	cmp	r3, #0
   1703c:	beq	180bc <__assert_fail@plt+0x6868>
   17040:	mov	r2, r8
   17044:	mov	r1, r9
   17048:	mov	r0, sl
   1704c:	bl	168c4 <__assert_fail@plt+0x5070>
   17050:	add	sl, sl, r8
   17054:	add	fp, fp, r5
   17058:	b	169e4 <__assert_fail@plt+0x5190>
   1705c:	ldr	r3, [sp, #28]
   17060:	subs	r3, r3, #45	; 0x2d
   17064:	movne	r3, #1
   17068:	cmp	r5, #0
   1706c:	movlt	r3, #0
   17070:	cmp	r3, #0
   17074:	moveq	r5, #0
   17078:	mov	r4, r5
   1707c:	cmp	r5, #1
   17080:	movcc	r5, #1
   17084:	ldr	r3, [sp, #32]
   17088:	sub	r3, r3, fp
   1708c:	cmp	r5, r3
   17090:	movcs	r3, #34	; 0x22
   17094:	ldrcs	r2, [sp, #44]	; 0x2c
   17098:	strcs	r3, [r2]
   1709c:	bcs	16a2c <__assert_fail@plt+0x51d8>
   170a0:	cmp	sl, #0
   170a4:	beq	170e0 <__assert_fail@plt+0x588c>
   170a8:	cmp	r4, #1
   170ac:	bls	170d8 <__assert_fail@plt+0x5884>
   170b0:	sub	r4, r4, #1
   170b4:	ldr	r3, [sp, #28]
   170b8:	cmp	r3, #43	; 0x2b
   170bc:	cmpne	r3, #48	; 0x30
   170c0:	mov	r2, r4
   170c4:	moveq	r1, #48	; 0x30
   170c8:	movne	r1, #32
   170cc:	mov	r0, sl
   170d0:	bl	116e0 <memset@plt>
   170d4:	add	sl, sl, r4
   170d8:	ldrb	r3, [r7]
   170dc:	strb	r3, [sl], #1
   170e0:	add	fp, fp, r5
   170e4:	b	169e4 <__assert_fail@plt+0x5190>
   170e8:	cmp	r2, #0
   170ec:	bne	16fbc <__assert_fail@plt+0x5768>
   170f0:	ldr	r3, [sp, #40]	; 0x28
   170f4:	cmp	r8, #0
   170f8:	movne	r3, r8
   170fc:	str	r3, [sp, #40]	; 0x28
   17100:	mov	r4, #97	; 0x61
   17104:	mov	r3, #32
   17108:	strb	r3, [sp, #72]	; 0x48
   1710c:	mov	r3, #37	; 0x25
   17110:	strb	r3, [sp, #73]	; 0x49
   17114:	mov	r8, #0
   17118:	add	r3, sp, #74	; 0x4a
   1711c:	b	17200 <__assert_fail@plt+0x59ac>
   17120:	cmp	r2, #0
   17124:	bne	16fbc <__assert_fail@plt+0x5768>
   17128:	ldr	r3, [sp, #40]	; 0x28
   1712c:	cmp	r8, #0
   17130:	movne	r3, r8
   17134:	str	r3, [sp, #40]	; 0x28
   17138:	mov	r4, #65	; 0x41
   1713c:	b	17104 <__assert_fail@plt+0x58b0>
   17140:	ldr	r3, [sp, #40]	; 0x28
   17144:	cmp	r8, #0
   17148:	movne	r3, r8
   1714c:	str	r3, [sp, #40]	; 0x28
   17150:	cmp	r2, #69	; 0x45
   17154:	movne	r8, #0
   17158:	bne	171d8 <__assert_fail@plt+0x5984>
   1715c:	b	16fbc <__assert_fail@plt+0x5768>
   17160:	cmp	r2, #69	; 0x45
   17164:	beq	16fbc <__assert_fail@plt+0x5768>
   17168:	cmp	r8, #0
   1716c:	moveq	r4, #66	; 0x42
   17170:	strne	r8, [sp, #40]	; 0x28
   17174:	movne	r4, #66	; 0x42
   17178:	movne	r8, #0
   1717c:	b	171d8 <__assert_fail@plt+0x5984>
   17180:	cmp	r2, #79	; 0x4f
   17184:	beq	16fbc <__assert_fail@plt+0x5768>
   17188:	mov	r4, #99	; 0x63
   1718c:	mov	r8, #0
   17190:	b	171d8 <__assert_fail@plt+0x5984>
   17194:	mvn	r8, #0
   17198:	ldr	r3, [pc, #1916]	; 1791c <__assert_fail@plt+0x60c8>
   1719c:	str	r3, [sp, #52]	; 0x34
   171a0:	b	16e88 <__assert_fail@plt+0x5634>
   171a4:	mov	r8, #4
   171a8:	ldr	r3, [pc, #1904]	; 17920 <__assert_fail@plt+0x60cc>
   171ac:	str	r3, [sp, #52]	; 0x34
   171b0:	mov	r3, #43	; 0x2b
   171b4:	str	r3, [sp, #28]
   171b8:	b	16e88 <__assert_fail@plt+0x5634>
   171bc:	mov	r3, #34	; 0x22
   171c0:	ldr	r2, [sp, #44]	; 0x2c
   171c4:	str	r3, [r2]
   171c8:	b	16a2c <__assert_fail@plt+0x51d8>
   171cc:	mov	r8, #0
   171d0:	b	171d8 <__assert_fail@plt+0x5984>
   171d4:	mov	r8, #0
   171d8:	mov	r3, #32
   171dc:	strb	r3, [sp, #72]	; 0x48
   171e0:	mov	r3, #37	; 0x25
   171e4:	strb	r3, [sp, #73]	; 0x49
   171e8:	cmp	r2, #0
   171ec:	addeq	r3, sp, #72	; 0x48
   171f0:	addeq	r3, sp, #74	; 0x4a
   171f4:	beq	17200 <__assert_fail@plt+0x59ac>
   171f8:	strb	r2, [sp, #74]	; 0x4a
   171fc:	add	r3, sp, #75	; 0x4b
   17200:	strb	r4, [r3]
   17204:	mov	r2, #0
   17208:	strb	r2, [r3, #1]
   1720c:	ldr	r3, [sp, #36]	; 0x24
   17210:	add	r2, sp, #72	; 0x48
   17214:	mov	r1, #1024	; 0x400
   17218:	add	r0, sp, #88	; 0x58
   1721c:	bl	115fc <strftime@plt>
   17220:	cmp	r0, #0
   17224:	beq	169e4 <__assert_fail@plt+0x5190>
   17228:	sub	r9, r0, #1
   1722c:	ldr	r3, [sp, #28]
   17230:	subs	r3, r3, #45	; 0x2d
   17234:	movne	r3, #1
   17238:	cmp	r5, #0
   1723c:	movlt	r3, #0
   17240:	cmp	r3, #0
   17244:	moveq	r5, #0
   17248:	mov	r4, r5
   1724c:	cmp	r5, r9
   17250:	movcc	r5, r9
   17254:	ldr	r3, [sp, #32]
   17258:	sub	r3, r3, fp
   1725c:	cmp	r5, r3
   17260:	bcs	172c4 <__assert_fail@plt+0x5a70>
   17264:	cmp	sl, #0
   17268:	beq	172e8 <__assert_fail@plt+0x5a94>
   1726c:	cmp	r4, r9
   17270:	bls	1729c <__assert_fail@plt+0x5a48>
   17274:	sub	r4, r4, r9
   17278:	ldr	r3, [sp, #28]
   1727c:	cmp	r3, #43	; 0x2b
   17280:	cmpne	r3, #48	; 0x30
   17284:	mov	r2, r4
   17288:	moveq	r1, #48	; 0x30
   1728c:	movne	r1, #32
   17290:	mov	r0, sl
   17294:	bl	116e0 <memset@plt>
   17298:	add	sl, sl, r4
   1729c:	cmp	r8, #0
   172a0:	bne	172d4 <__assert_fail@plt+0x5a80>
   172a4:	ldr	r3, [sp, #40]	; 0x28
   172a8:	cmp	r3, #0
   172ac:	beq	172f0 <__assert_fail@plt+0x5a9c>
   172b0:	mov	r2, r9
   172b4:	add	r1, sp, #89	; 0x59
   172b8:	mov	r0, sl
   172bc:	bl	168c4 <__assert_fail@plt+0x5070>
   172c0:	b	172e4 <__assert_fail@plt+0x5a90>
   172c4:	mov	r3, #34	; 0x22
   172c8:	ldr	r2, [sp, #44]	; 0x2c
   172cc:	str	r3, [r2]
   172d0:	b	16a2c <__assert_fail@plt+0x51d8>
   172d4:	mov	r2, r9
   172d8:	add	r1, sp, #89	; 0x59
   172dc:	mov	r0, sl
   172e0:	bl	16880 <__assert_fail@plt+0x502c>
   172e4:	add	sl, sl, r9
   172e8:	add	fp, fp, r5
   172ec:	b	169e4 <__assert_fail@plt+0x5190>
   172f0:	mov	r2, r9
   172f4:	add	r1, sp, #89	; 0x59
   172f8:	mov	r0, sl
   172fc:	bl	114b8 <memcpy@plt>
   17300:	b	172e4 <__assert_fail@plt+0x5a90>
   17304:	cmp	r2, #69	; 0x45
   17308:	beq	180f8 <__assert_fail@plt+0x68a4>
   1730c:	ldr	r3, [sp, #36]	; 0x24
   17310:	ldr	r1, [r3, #20]
   17314:	ldr	r3, [pc, #1564]	; 17938 <__assert_fail@plt+0x60e4>
   17318:	cmp	r1, r3
   1731c:	movge	r3, #0
   17320:	movlt	r3, #1
   17324:	str	r3, [sp, #52]	; 0x34
   17328:	add	r3, r1, #1888	; 0x760
   1732c:	add	r3, r3, #12
   17330:	ldr	r0, [pc, #1516]	; 17924 <__assert_fail@plt+0x60d0>
   17334:	cmp	r3, r0
   17338:	movhi	r3, #0
   1733c:	movls	r3, #1
   17340:	mvn	r0, #98	; 0x62
   17344:	mla	r3, r0, r3, r1
   17348:	ldr	r1, [pc, #1516]	; 1793c <__assert_fail@plt+0x60e8>
   1734c:	smull	r0, r1, r1, r3
   17350:	asr	r3, r3, #31
   17354:	rsb	r3, r3, r1, asr #5
   17358:	add	r3, r3, #19
   1735c:	mov	r8, #2
   17360:	ldr	r0, [sp, #28]
   17364:	mov	r1, r0
   17368:	ldr	ip, [sp, #1156]	; 0x484
   1736c:	cmp	r0, #0
   17370:	moveq	r1, ip
   17374:	str	r1, [sp, #28]
   17378:	cmp	r1, #43	; 0x2b
   1737c:	movne	r1, #0
   17380:	beq	174dc <__assert_fail@plt+0x5c88>
   17384:	mov	r9, r1
   17388:	mov	r0, #0
   1738c:	b	17408 <__assert_fail@plt+0x5bb4>
   17390:	cmp	r2, #79	; 0x4f
   17394:	beq	16fbc <__assert_fail@plt+0x5768>
   17398:	mov	r4, #120	; 0x78
   1739c:	mov	r8, #0
   173a0:	b	171d8 <__assert_fail@plt+0x5984>
   173a4:	cmp	r2, #0
   173a8:	bne	16fbc <__assert_fail@plt+0x5768>
   173ac:	mvn	r8, #0
   173b0:	ldr	r3, [pc, #1392]	; 17928 <__assert_fail@plt+0x60d4>
   173b4:	str	r3, [sp, #52]	; 0x34
   173b8:	b	16e88 <__assert_fail@plt+0x5634>
   173bc:	cmp	r2, #69	; 0x45
   173c0:	beq	16fbc <__assert_fail@plt+0x5768>
   173c4:	ldr	r3, [sp, #36]	; 0x24
   173c8:	ldr	r3, [r3, #12]
   173cc:	mov	r8, #2
   173d0:	b	173f8 <__assert_fail@plt+0x5ba4>
   173d4:	cmp	r2, #69	; 0x45
   173d8:	beq	16fbc <__assert_fail@plt+0x5768>
   173dc:	ldr	r3, [sp, #36]	; 0x24
   173e0:	ldr	r3, [r3, #12]
   173e4:	ldr	r1, [sp, #28]
   173e8:	cmp	r1, #0
   173ec:	mov	r8, #2
   173f0:	moveq	r1, #95	; 0x5f
   173f4:	streq	r1, [sp, #28]
   173f8:	lsr	r1, r3, #31
   173fc:	str	r1, [sp, #52]	; 0x34
   17400:	mov	r0, #0
   17404:	mov	r9, r0
   17408:	ldr	ip, [sp, #52]	; 0x34
   1740c:	eor	r1, ip, #1
   17410:	cmp	r2, #79	; 0x4f
   17414:	movne	r1, #0
   17418:	andeq	r1, r1, #1
   1741c:	cmp	r1, #0
   17420:	bne	171d4 <__assert_fail@plt+0x5980>
   17424:	mov	r1, ip
   17428:	cmp	ip, #0
   1742c:	rsbne	r3, r3, #0
   17430:	add	r4, sp, #86	; 0x56
   17434:	mov	lr, #58	; 0x3a
   17438:	mov	ip, r3
   1743c:	tst	r0, #1
   17440:	subne	r1, r4, #1
   17444:	strbne	lr, [r4, #-1]
   17448:	moveq	r1, r4
   1744c:	sub	r4, r1, #1
   17450:	ldr	r3, [pc, #1236]	; 1792c <__assert_fail@plt+0x60d8>
   17454:	umull	r3, r2, r3, ip
   17458:	lsr	r2, r2, #3
   1745c:	add	r3, r2, r2, lsl #2
   17460:	sub	r3, ip, r3, lsl #1
   17464:	add	r3, r3, #48	; 0x30
   17468:	strb	r3, [r1, #-1]
   1746c:	mov	ip, r2
   17470:	asrs	r0, r0, #1
   17474:	movne	r3, #1
   17478:	moveq	r3, #0
   1747c:	cmp	r2, #0
   17480:	moveq	r2, r3
   17484:	orrne	r2, r3, #1
   17488:	cmp	r2, #0
   1748c:	bne	1743c <__assert_fail@plt+0x5be8>
   17490:	ldr	r2, [sp, #28]
   17494:	mov	r3, r2
   17498:	cmp	r2, #0
   1749c:	moveq	r3, #48	; 0x30
   174a0:	str	r3, [sp, #28]
   174a4:	cmp	r5, #0
   174a8:	movlt	r5, r8
   174ac:	ldr	r3, [sp, #52]	; 0x34
   174b0:	cmp	r3, #0
   174b4:	bne	18124 <__assert_fail@plt+0x68d0>
   174b8:	cmp	r9, #0
   174bc:	bne	18220 <__assert_fail@plt+0x69cc>
   174c0:	add	r8, sp, #86	; 0x56
   174c4:	sub	r3, r8, r4
   174c8:	str	r3, [sp, #68]	; 0x44
   174cc:	ldr	r3, [sp, #28]
   174d0:	subs	r9, r3, #45	; 0x2d
   174d4:	movne	r9, #1
   174d8:	b	1818c <__assert_fail@plt+0x6938>
   174dc:	ldr	r0, [pc, #1100]	; 17930 <__assert_fail@plt+0x60dc>
   174e0:	cmp	r8, #2
   174e4:	moveq	r0, #99	; 0x63
   174e8:	cmp	r8, r5
   174ec:	movge	r1, #0
   174f0:	movlt	r1, #1
   174f4:	cmp	r3, r0
   174f8:	orrhi	r1, r1, #1
   174fc:	b	17384 <__assert_fail@plt+0x5b30>
   17500:	cmp	sl, #0
   17504:	beq	1751c <__assert_fail@plt+0x5cc8>
   17508:	mov	r2, r8
   1750c:	mov	r1, #32
   17510:	mov	r0, sl
   17514:	bl	116e0 <memset@plt>
   17518:	add	sl, sl, r8
   1751c:	add	fp, fp, r8
   17520:	sub	r5, r5, r8
   17524:	b	18168 <__assert_fail@plt+0x6914>
   17528:	mov	r3, #34	; 0x22
   1752c:	ldr	r2, [sp, #44]	; 0x2c
   17530:	str	r3, [r2]
   17534:	b	16a2c <__assert_fail@plt+0x51d8>
   17538:	mov	r3, #34	; 0x22
   1753c:	ldr	r2, [sp, #44]	; 0x2c
   17540:	str	r3, [r2]
   17544:	b	16a2c <__assert_fail@plt+0x51d8>
   17548:	mov	r2, r8
   1754c:	mov	r1, r4
   17550:	mov	r0, sl
   17554:	bl	114b8 <memcpy@plt>
   17558:	b	18214 <__assert_fail@plt+0x69c0>
   1755c:	cmp	r2, #0
   17560:	bne	16fbc <__assert_fail@plt+0x5768>
   17564:	lsr	r3, r5, #31
   17568:	ldr	r2, [sp, #28]
   1756c:	cmp	r2, #0
   17570:	movne	r3, #0
   17574:	andeq	r3, r3, #1
   17578:	cmp	r3, #0
   1757c:	bne	171a4 <__assert_fail@plt+0x5950>
   17580:	sub	r8, r5, #6
   17584:	bic	r8, r8, r8, asr #31
   17588:	ldr	r3, [pc, #912]	; 17920 <__assert_fail@plt+0x60cc>
   1758c:	str	r3, [sp, #52]	; 0x34
   17590:	b	16e88 <__assert_fail@plt+0x5634>
   17594:	cmp	r2, #69	; 0x45
   17598:	beq	16fbc <__assert_fail@plt+0x5768>
   1759c:	ldr	r3, [sp, #36]	; 0x24
   175a0:	ldr	r3, [r3, #8]
   175a4:	mov	r8, #2
   175a8:	b	173f8 <__assert_fail@plt+0x5ba4>
   175ac:	cmp	r2, #69	; 0x45
   175b0:	beq	16fbc <__assert_fail@plt+0x5768>
   175b4:	ldr	r3, [sp, #48]	; 0x30
   175b8:	mov	r8, #2
   175bc:	b	173f8 <__assert_fail@plt+0x5ba4>
   175c0:	cmp	r2, #69	; 0x45
   175c4:	beq	16fbc <__assert_fail@plt+0x5768>
   175c8:	ldr	r3, [sp, #36]	; 0x24
   175cc:	ldr	r3, [r3, #8]
   175d0:	b	173e4 <__assert_fail@plt+0x5b90>
   175d4:	cmp	r2, #69	; 0x45
   175d8:	beq	16fbc <__assert_fail@plt+0x5768>
   175dc:	ldr	r3, [sp, #48]	; 0x30
   175e0:	b	173e4 <__assert_fail@plt+0x5b90>
   175e4:	cmp	r2, #69	; 0x45
   175e8:	beq	16fbc <__assert_fail@plt+0x5768>
   175ec:	ldr	r3, [sp, #36]	; 0x24
   175f0:	ldr	r3, [r3, #28]
   175f4:	cmn	r3, #1
   175f8:	movge	r1, #0
   175fc:	movlt	r1, #1
   17600:	str	r1, [sp, #52]	; 0x34
   17604:	add	r3, r3, #1
   17608:	mov	r0, #0
   1760c:	mov	r9, r0
   17610:	mov	r8, #3
   17614:	b	17408 <__assert_fail@plt+0x5bb4>
   17618:	cmp	r2, #69	; 0x45
   1761c:	beq	16fbc <__assert_fail@plt+0x5768>
   17620:	ldr	r3, [sp, #36]	; 0x24
   17624:	ldr	r3, [r3, #4]
   17628:	mov	r8, #2
   1762c:	b	173f8 <__assert_fail@plt+0x5ba4>
   17630:	cmp	r2, #69	; 0x45
   17634:	beq	16fbc <__assert_fail@plt+0x5768>
   17638:	ldr	r3, [sp, #36]	; 0x24
   1763c:	ldr	r3, [r3, #16]
   17640:	cmn	r3, #1
   17644:	movge	r1, #0
   17648:	movlt	r1, #1
   1764c:	str	r1, [sp, #52]	; 0x34
   17650:	add	r3, r3, #1
   17654:	mov	r0, #0
   17658:	mov	r9, r0
   1765c:	mov	r8, #2
   17660:	b	17408 <__assert_fail@plt+0x5bb4>
   17664:	cmp	r2, #69	; 0x45
   17668:	beq	16fbc <__assert_fail@plt+0x5768>
   1766c:	cmp	r5, #0
   17670:	movle	r5, #9
   17674:	ldr	r3, [sp, #1172]	; 0x494
   17678:	mov	r4, #9
   1767c:	b	17690 <__assert_fail@plt+0x5e3c>
   17680:	sub	r4, r4, #1
   17684:	smull	r1, r2, r6, r3
   17688:	asr	r3, r3, #31
   1768c:	rsb	r3, r3, r2, asr #2
   17690:	cmp	r4, r5
   17694:	bgt	17680 <__assert_fail@plt+0x5e2c>
   17698:	cmp	r4, #1
   1769c:	ble	176b8 <__assert_fail@plt+0x5e64>
   176a0:	smull	r2, r1, r6, r3
   176a4:	asr	r2, r3, #31
   176a8:	rsb	r2, r2, r1, asr #2
   176ac:	add	r2, r2, r2, lsl #2
   176b0:	cmp	r3, r2, lsl #1
   176b4:	beq	17680 <__assert_fail@plt+0x5e2c>
   176b8:	cmp	r4, #0
   176bc:	ble	176f0 <__assert_fail@plt+0x5e9c>
   176c0:	add	r1, sp, #72	; 0x48
   176c4:	add	r0, r1, r4
   176c8:	smull	r2, ip, r6, r3
   176cc:	asr	r2, r3, #31
   176d0:	rsb	r2, r2, ip, asr #2
   176d4:	add	ip, r2, r2, lsl #2
   176d8:	sub	r3, r3, ip, lsl #1
   176dc:	add	r3, r3, #48	; 0x30
   176e0:	strb	r3, [r0, #-1]!
   176e4:	mov	r3, r2
   176e8:	cmp	r0, r1
   176ec:	bne	176c8 <__assert_fail@plt+0x5e74>
   176f0:	ldr	r2, [sp, #28]
   176f4:	mov	r3, r2
   176f8:	cmp	r2, #0
   176fc:	moveq	r3, #48	; 0x30
   17700:	str	r3, [sp, #28]
   17704:	mov	r8, r4
   17708:	cmp	r4, #0
   1770c:	movcs	r9, r4
   17710:	movcc	r9, #0
   17714:	ldr	r3, [sp, #32]
   17718:	sub	r3, r3, fp
   1771c:	cmp	r9, r3
   17720:	bcs	177b8 <__assert_fail@plt+0x5f64>
   17724:	cmp	sl, #0
   17728:	beq	1774c <__assert_fail@plt+0x5ef8>
   1772c:	ldr	r3, [sp, #40]	; 0x28
   17730:	cmp	r3, #0
   17734:	beq	177c8 <__assert_fail@plt+0x5f74>
   17738:	mov	r2, r4
   1773c:	add	r1, sp, #72	; 0x48
   17740:	mov	r0, sl
   17744:	bl	168c4 <__assert_fail@plt+0x5070>
   17748:	add	sl, sl, r8
   1774c:	add	fp, r9, fp
   17750:	ldr	r3, [sp, #28]
   17754:	cmp	r3, #45	; 0x2d
   17758:	beq	1822c <__assert_fail@plt+0x69d8>
   1775c:	subs	r4, r5, r4
   17760:	bmi	1822c <__assert_fail@plt+0x69d8>
   17764:	cmp	r4, #0
   17768:	movcs	r5, r4
   1776c:	movcc	r5, #0
   17770:	ldr	r3, [sp, #32]
   17774:	sub	r3, r3, fp
   17778:	cmp	r5, r3
   1777c:	bcs	177dc <__assert_fail@plt+0x5f88>
   17780:	cmp	r4, #0
   17784:	cmpne	sl, #0
   17788:	beq	177b0 <__assert_fail@plt+0x5f5c>
   1778c:	ldr	r3, [sp, #28]
   17790:	cmp	r3, #43	; 0x2b
   17794:	cmpne	r3, #48	; 0x30
   17798:	mov	r2, r4
   1779c:	moveq	r1, #48	; 0x30
   177a0:	movne	r1, #32
   177a4:	mov	r0, sl
   177a8:	bl	116e0 <memset@plt>
   177ac:	add	sl, sl, r4
   177b0:	add	fp, fp, r5
   177b4:	b	169e4 <__assert_fail@plt+0x5190>
   177b8:	mov	r3, #34	; 0x22
   177bc:	ldr	r2, [sp, #44]	; 0x2c
   177c0:	str	r3, [r2]
   177c4:	b	16a2c <__assert_fail@plt+0x51d8>
   177c8:	mov	r2, r4
   177cc:	add	r1, sp, #72	; 0x48
   177d0:	mov	r0, sl
   177d4:	bl	114b8 <memcpy@plt>
   177d8:	b	17748 <__assert_fail@plt+0x5ef4>
   177dc:	mov	r3, #34	; 0x22
   177e0:	ldr	r2, [sp, #44]	; 0x2c
   177e4:	str	r3, [r2]
   177e8:	b	16a2c <__assert_fail@plt+0x51d8>
   177ec:	ldr	r2, [sp, #28]
   177f0:	mvn	r3, r5
   177f4:	lsr	r3, r3, #31
   177f8:	cmp	r2, #45	; 0x2d
   177fc:	moveq	r3, #0
   17800:	cmp	r3, #0
   17804:	moveq	r5, #0
   17808:	mov	r4, r5
   1780c:	cmp	r5, #1
   17810:	movcc	r5, #1
   17814:	ldr	r3, [sp, #32]
   17818:	sub	r3, r3, fp
   1781c:	cmp	r5, r3
   17820:	bcs	1786c <__assert_fail@plt+0x6018>
   17824:	cmp	sl, #0
   17828:	beq	17864 <__assert_fail@plt+0x6010>
   1782c:	cmp	r4, #1
   17830:	bls	1785c <__assert_fail@plt+0x6008>
   17834:	sub	r4, r4, #1
   17838:	ldr	r3, [sp, #28]
   1783c:	cmp	r3, #43	; 0x2b
   17840:	cmpne	r3, #48	; 0x30
   17844:	mov	r2, r4
   17848:	moveq	r1, #48	; 0x30
   1784c:	movne	r1, #32
   17850:	mov	r0, sl
   17854:	bl	116e0 <memset@plt>
   17858:	add	sl, sl, r4
   1785c:	mov	r3, #10
   17860:	strb	r3, [sl], #1
   17864:	add	fp, fp, r5
   17868:	b	169e4 <__assert_fail@plt+0x5190>
   1786c:	mov	r3, #34	; 0x22
   17870:	ldr	r2, [sp, #44]	; 0x2c
   17874:	str	r3, [r2]
   17878:	b	16a2c <__assert_fail@plt+0x51d8>
   1787c:	mov	r3, #1
   17880:	cmp	r8, #0
   17884:	moveq	r8, r3
   17888:	moveq	r4, #112	; 0x70
   1788c:	movne	r4, #112	; 0x70
   17890:	movne	r3, #0
   17894:	strne	r3, [sp, #40]	; 0x28
   17898:	b	171d8 <__assert_fail@plt+0x5984>
   1789c:	mov	r3, #0
   178a0:	b	17880 <__assert_fail@plt+0x602c>
   178a4:	ldr	r3, [sp, #36]	; 0x24
   178a8:	ldr	r3, [r3, #16]
   178ac:	cmp	r2, #79	; 0x4f
   178b0:	bne	178d0 <__assert_fail@plt+0x607c>
   178b4:	mov	r3, #32
   178b8:	strb	r3, [sp, #72]	; 0x48
   178bc:	mov	r3, #37	; 0x25
   178c0:	strb	r3, [sp, #73]	; 0x49
   178c4:	mov	r4, #113	; 0x71
   178c8:	mov	r8, #0
   178cc:	b	171f8 <__assert_fail@plt+0x59a4>
   178d0:	add	r2, r3, r3, lsl #2
   178d4:	add	r3, r3, r2, lsl #1
   178d8:	asr	r3, r3, #5
   178dc:	add	r3, r3, #1
   178e0:	mov	r0, #0
   178e4:	mov	r9, r0
   178e8:	str	r0, [sp, #52]	; 0x34
   178ec:	mov	r8, #1
   178f0:	b	17430 <__assert_fail@plt+0x5bdc>
   178f4:	cmp	r2, #69	; 0x45
   178f8:	beq	16fbc <__assert_fail@plt+0x5768>
   178fc:	ldr	r3, [sp, #36]	; 0x24
   17900:	ldr	r3, [r3]
   17904:	mov	r8, #2
   17908:	b	173f8 <__assert_fail@plt+0x5ba4>
   1790c:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   17910:	strbtvs	r6, [r6], -r7, ror #12
   17914:	stcleq	12, cr12, [ip], {204}	; 0xcc
   17918:	andeq	lr, r1, ip, lsr #17
   1791c:	muleq	r1, r8, r8
   17920:	andeq	lr, r1, r0, lsr #17
   17924:	andeq	r0, r0, fp, ror #14
   17928:			; <UNDEFINED> instruction: 0x0001e8b8
   1792c:	stclgt	12, cr12, [ip], {205}	; 0xcd
   17930:	andeq	r2, r0, pc, lsl #14
   17934:	subls	r2, r9, #-1828716544	; 0x93000000
   17938:			; <UNDEFINED> instruction: 0xfffff894
   1793c:	mvnpl	r8, pc, lsl r5
   17940:			; <UNDEFINED> instruction: 0x91a2b3c5
   17944:	stmhi	r8, {r0, r3, r7, fp, pc}
   17948:	andeq	r2, r0, r0, lsl r7
   1794c:	add	ip, sp, #88	; 0x58
   17950:	ldr	lr, [sp, #36]	; 0x24
   17954:	ldm	lr!, {r0, r1, r2, r3}
   17958:	stmia	ip!, {r0, r1, r2, r3}
   1795c:	ldm	lr!, {r0, r1, r2, r3}
   17960:	stmia	ip!, {r0, r1, r2, r3}
   17964:	ldm	lr, {r0, r1, r2}
   17968:	stm	ip, {r0, r1, r2}
   1796c:	mvn	r3, #0
   17970:	str	r3, [sp, #116]	; 0x74
   17974:	add	r1, sp, #88	; 0x58
   17978:	ldr	r0, [sp, #1168]	; 0x490
   1797c:	bl	1a324 <__assert_fail@plt+0x8ad0>
   17980:	ldr	r3, [sp, #116]	; 0x74
   17984:	cmp	r3, #0
   17988:	blt	179e8 <__assert_fail@plt+0x6194>
   1798c:	lsr	r3, r0, #31
   17990:	str	r3, [sp, #52]	; 0x34
   17994:	add	r2, sp, #85	; 0x55
   17998:	mov	r1, r0
   1799c:	smull	r3, ip, r6, r1
   179a0:	asr	r3, r1, #31
   179a4:	rsb	r3, r3, ip, asr #2
   179a8:	mov	ip, r3
   179ac:	add	r3, r3, r3, lsl #2
   179b0:	sub	r3, r1, r3, lsl #1
   179b4:	mov	r1, ip
   179b8:	mov	r4, r2
   179bc:	cmp	r0, #0
   179c0:	rsblt	r3, r3, #48	; 0x30
   179c4:	addge	r3, r3, #48	; 0x30
   179c8:	uxtb	r3, r3
   179cc:	strb	r3, [r2]
   179d0:	sub	r2, r2, #1
   179d4:	cmp	ip, #0
   179d8:	bne	1799c <__assert_fail@plt+0x6148>
   179dc:	mov	r9, #0
   179e0:	mov	r8, #1
   179e4:	b	17490 <__assert_fail@plt+0x5c3c>
   179e8:	mov	r3, #75	; 0x4b
   179ec:	ldr	r2, [sp, #44]	; 0x2c
   179f0:	str	r3, [r2]
   179f4:	b	16a2c <__assert_fail@plt+0x51d8>
   179f8:	cmp	r2, #79	; 0x4f
   179fc:	beq	16fbc <__assert_fail@plt+0x5768>
   17a00:	mov	r4, #88	; 0x58
   17a04:	mov	r8, #0
   17a08:	b	171d8 <__assert_fail@plt+0x5984>
   17a0c:	ldr	r3, [sp, #28]
   17a10:	subs	r3, r3, #45	; 0x2d
   17a14:	movne	r3, #1
   17a18:	cmp	r5, #0
   17a1c:	movlt	r3, #0
   17a20:	cmp	r3, #0
   17a24:	moveq	r5, #0
   17a28:	mov	r4, r5
   17a2c:	cmp	r5, #1
   17a30:	movcc	r5, #1
   17a34:	ldr	r3, [sp, #32]
   17a38:	sub	r3, r3, fp
   17a3c:	cmp	r5, r3
   17a40:	bcs	17a8c <__assert_fail@plt+0x6238>
   17a44:	cmp	sl, #0
   17a48:	beq	17a84 <__assert_fail@plt+0x6230>
   17a4c:	cmp	r4, #1
   17a50:	bls	17a7c <__assert_fail@plt+0x6228>
   17a54:	sub	r4, r4, #1
   17a58:	ldr	r3, [sp, #28]
   17a5c:	cmp	r3, #43	; 0x2b
   17a60:	cmpne	r3, #48	; 0x30
   17a64:	mov	r2, r4
   17a68:	moveq	r1, #48	; 0x30
   17a6c:	movne	r1, #32
   17a70:	mov	r0, sl
   17a74:	bl	116e0 <memset@plt>
   17a78:	add	sl, sl, r4
   17a7c:	mov	r3, #9
   17a80:	strb	r3, [sl], #1
   17a84:	add	fp, fp, r5
   17a88:	b	169e4 <__assert_fail@plt+0x5190>
   17a8c:	mov	r3, #34	; 0x22
   17a90:	ldr	r2, [sp, #44]	; 0x2c
   17a94:	str	r3, [r2]
   17a98:	b	16a2c <__assert_fail@plt+0x51d8>
   17a9c:	ldr	r3, [sp, #36]	; 0x24
   17aa0:	ldr	r3, [r3, #24]
   17aa4:	add	r3, r3, #6
   17aa8:	ldr	r1, [pc, #-380]	; 17934 <__assert_fail@plt+0x60e0>
   17aac:	smull	r0, r1, r1, r3
   17ab0:	add	r0, r1, r3
   17ab4:	asr	r1, r3, #31
   17ab8:	rsb	r1, r1, r0, asr #2
   17abc:	rsb	r1, r1, r1, lsl #3
   17ac0:	sub	r3, r3, r1
   17ac4:	add	r3, r3, #1
   17ac8:	mov	r8, #1
   17acc:	b	173f8 <__assert_fail@plt+0x5ba4>
   17ad0:	cmp	r2, #69	; 0x45
   17ad4:	beq	16fbc <__assert_fail@plt+0x5768>
   17ad8:	ldr	r1, [sp, #36]	; 0x24
   17adc:	ldr	r3, [r1, #28]
   17ae0:	ldr	r1, [r1, #24]
   17ae4:	sub	r3, r3, r1
   17ae8:	add	r3, r3, #7
   17aec:	ldr	r1, [pc, #-448]	; 17934 <__assert_fail@plt+0x60e0>
   17af0:	smull	r0, r1, r1, r3
   17af4:	add	r1, r1, r3
   17af8:	asr	r3, r3, #31
   17afc:	rsb	r3, r3, r1, asr #2
   17b00:	mov	r8, #2
   17b04:	b	173f8 <__assert_fail@plt+0x5ba4>
   17b08:	cmp	r2, #69	; 0x45
   17b0c:	beq	16fbc <__assert_fail@plt+0x5768>
   17b10:	ldr	r0, [sp, #36]	; 0x24
   17b14:	mov	r3, r0
   17b18:	ldr	r8, [r0, #20]
   17b1c:	cmp	r8, #0
   17b20:	movlt	r3, #300	; 0x12c
   17b24:	mvnge	r3, #99	; 0x63
   17b28:	add	r3, r3, r8
   17b2c:	ldr	lr, [r0, #28]
   17b30:	ldr	r0, [r0, #24]
   17b34:	str	r0, [sp, #52]	; 0x34
   17b38:	sub	r0, lr, r0
   17b3c:	add	r0, r0, #380	; 0x17c
   17b40:	add	r0, r0, #2
   17b44:	ldr	ip, [pc, #-536]	; 17934 <__assert_fail@plt+0x60e0>
   17b48:	smull	r9, ip, ip, r0
   17b4c:	add	r9, ip, r0
   17b50:	asr	ip, r0, #31
   17b54:	rsb	ip, ip, r9, asr #2
   17b58:	rsb	ip, ip, ip, lsl #3
   17b5c:	sub	ip, r0, ip
   17b60:	sub	r9, lr, ip
   17b64:	adds	r9, r9, #3
   17b68:	bmi	17c8c <__assert_fail@plt+0x6438>
   17b6c:	tst	r3, #3
   17b70:	movne	r0, #0
   17b74:	bne	17bc0 <__assert_fail@plt+0x636c>
   17b78:	ldr	r0, [pc, #-580]	; 1793c <__assert_fail@plt+0x60e8>
   17b7c:	smull	ip, r0, r0, r3
   17b80:	asr	ip, r3, #31
   17b84:	rsb	r0, ip, r0, asr #5
   17b88:	mov	ip, #100	; 0x64
   17b8c:	mul	r0, ip, r0
   17b90:	cmp	r3, r0
   17b94:	movne	r0, #1
   17b98:	bne	17bc0 <__assert_fail@plt+0x636c>
   17b9c:	ldr	r0, [pc, #-616]	; 1793c <__assert_fail@plt+0x60e8>
   17ba0:	smull	ip, r0, r0, r3
   17ba4:	asr	ip, r3, #31
   17ba8:	rsb	ip, ip, r0, asr #7
   17bac:	mov	r0, #400	; 0x190
   17bb0:	mul	r0, r0, ip
   17bb4:	cmp	r3, r0
   17bb8:	movne	r0, #0
   17bbc:	moveq	r0, #1
   17bc0:	add	r3, r0, #364	; 0x16c
   17bc4:	add	r3, r3, #1
   17bc8:	sub	r3, lr, r3
   17bcc:	ldr	r0, [sp, #52]	; 0x34
   17bd0:	sub	r0, r3, r0
   17bd4:	add	r0, r0, #380	; 0x17c
   17bd8:	add	r0, r0, #2
   17bdc:	ldr	ip, [pc, #-688]	; 17934 <__assert_fail@plt+0x60e0>
   17be0:	smull	ip, lr, ip, r0
   17be4:	add	lr, lr, r0
   17be8:	asr	ip, r0, #31
   17bec:	rsb	ip, ip, lr, asr #2
   17bf0:	rsb	ip, ip, ip, lsl #3
   17bf4:	sub	ip, r0, ip
   17bf8:	sub	r3, r3, ip
   17bfc:	add	r3, r3, #3
   17c00:	cmp	r3, #0
   17c04:	movge	r9, r3
   17c08:	mvn	lr, r3
   17c0c:	lsr	lr, lr, #31
   17c10:	cmp	r1, #71	; 0x47
   17c14:	beq	17d2c <__assert_fail@plt+0x64d8>
   17c18:	cmp	r1, #103	; 0x67
   17c1c:	bne	17d58 <__assert_fail@plt+0x6504>
   17c20:	ldr	r3, [pc, #-748]	; 1793c <__assert_fail@plt+0x60e8>
   17c24:	smull	r1, r3, r3, r8
   17c28:	asr	r1, r8, #31
   17c2c:	rsb	r1, r1, r3, asr #5
   17c30:	mov	r0, #100	; 0x64
   17c34:	mul	r1, r0, r1
   17c38:	sub	r1, r8, r1
   17c3c:	add	r1, r1, lr
   17c40:	ldr	r3, [pc, #-780]	; 1793c <__assert_fail@plt+0x60e8>
   17c44:	smull	r3, ip, r3, r1
   17c48:	asr	r3, r1, #31
   17c4c:	rsb	r3, r3, ip, asr #5
   17c50:	mul	r3, r0, r3
   17c54:	subs	r3, r1, r3
   17c58:	movpl	r1, #0
   17c5c:	strpl	r1, [sp, #52]	; 0x34
   17c60:	movpl	r8, #2
   17c64:	bpl	17360 <__assert_fail@plt+0x5b0c>
   17c68:	ldr	r1, [pc, #-824]	; 17938 <__assert_fail@plt+0x60e4>
   17c6c:	sub	r1, r1, lr
   17c70:	cmp	r8, r1
   17c74:	rsblt	r3, r3, #0
   17c78:	addge	r3, r3, #100	; 0x64
   17c7c:	mov	r1, #0
   17c80:	str	r1, [sp, #52]	; 0x34
   17c84:	mov	r8, #2
   17c88:	b	17360 <__assert_fail@plt+0x5b0c>
   17c8c:	sub	r3, r3, #1
   17c90:	tst	r3, #3
   17c94:	movne	r3, #0
   17c98:	bne	17ce4 <__assert_fail@plt+0x6490>
   17c9c:	ldr	r0, [pc, #-872]	; 1793c <__assert_fail@plt+0x60e8>
   17ca0:	smull	ip, r0, r0, r3
   17ca4:	asr	ip, r3, #31
   17ca8:	rsb	r0, ip, r0, asr #5
   17cac:	mov	ip, #100	; 0x64
   17cb0:	mul	r0, ip, r0
   17cb4:	cmp	r3, r0
   17cb8:	movne	r3, #1
   17cbc:	bne	17ce4 <__assert_fail@plt+0x6490>
   17cc0:	ldr	r0, [pc, #-908]	; 1793c <__assert_fail@plt+0x60e8>
   17cc4:	smull	ip, r0, r0, r3
   17cc8:	asr	ip, r3, #31
   17ccc:	rsb	ip, ip, r0, asr #7
   17cd0:	mov	r0, #400	; 0x190
   17cd4:	mul	r0, r0, ip
   17cd8:	cmp	r3, r0
   17cdc:	movne	r3, #0
   17ce0:	moveq	r3, #1
   17ce4:	add	r3, r3, #364	; 0x16c
   17ce8:	add	r3, r3, #1
   17cec:	add	r3, r3, lr
   17cf0:	ldr	r0, [sp, #52]	; 0x34
   17cf4:	sub	r0, r3, r0
   17cf8:	add	r0, r0, #380	; 0x17c
   17cfc:	add	r0, r0, #2
   17d00:	ldr	ip, [pc, #-980]	; 17934 <__assert_fail@plt+0x60e0>
   17d04:	smull	ip, lr, ip, r0
   17d08:	add	lr, lr, r0
   17d0c:	asr	ip, r0, #31
   17d10:	rsb	ip, ip, lr, asr #2
   17d14:	rsb	ip, ip, ip, lsl #3
   17d18:	sub	ip, r0, ip
   17d1c:	sub	ip, r3, ip
   17d20:	add	r9, ip, #3
   17d24:	mvn	lr, #0
   17d28:	b	17c10 <__assert_fail@plt+0x63bc>
   17d2c:	ldr	r3, [pc, #-1020]	; 17938 <__assert_fail@plt+0x60e4>
   17d30:	sub	r3, r3, lr
   17d34:	cmp	r8, r3
   17d38:	movge	r3, #0
   17d3c:	movlt	r3, #1
   17d40:	str	r3, [sp, #52]	; 0x34
   17d44:	add	r3, r8, #1888	; 0x760
   17d48:	add	r3, r3, #12
   17d4c:	add	r3, r3, lr
   17d50:	mov	r8, #4
   17d54:	b	17360 <__assert_fail@plt+0x5b0c>
   17d58:	ldr	r3, [pc, #-1068]	; 17934 <__assert_fail@plt+0x60e0>
   17d5c:	smull	r1, r3, r3, r9
   17d60:	add	r1, r3, r9
   17d64:	asr	r3, r9, #31
   17d68:	rsb	r3, r3, r1, asr #2
   17d6c:	add	r3, r3, #1
   17d70:	mov	r8, #2
   17d74:	b	173f8 <__assert_fail@plt+0x5ba4>
   17d78:	cmp	r2, #69	; 0x45
   17d7c:	beq	16fbc <__assert_fail@plt+0x5768>
   17d80:	ldr	ip, [sp, #36]	; 0x24
   17d84:	ldr	r3, [ip, #24]
   17d88:	add	r3, r3, #6
   17d8c:	ldr	r1, [pc, #-1120]	; 17934 <__assert_fail@plt+0x60e0>
   17d90:	smull	r0, r1, r1, r3
   17d94:	add	r0, r1, r3
   17d98:	asr	r1, r3, #31
   17d9c:	rsb	r1, r1, r0, asr #2
   17da0:	rsb	r1, r1, r1, lsl #3
   17da4:	sub	r1, r3, r1
   17da8:	ldr	r3, [ip, #28]
   17dac:	sub	r3, r3, r1
   17db0:	add	r3, r3, #7
   17db4:	ldr	r1, [pc, #-1160]	; 17934 <__assert_fail@plt+0x60e0>
   17db8:	smull	r0, r1, r1, r3
   17dbc:	add	r1, r1, r3
   17dc0:	asr	r3, r3, #31
   17dc4:	rsb	r3, r3, r1, asr #2
   17dc8:	mov	r8, #2
   17dcc:	b	173f8 <__assert_fail@plt+0x5ba4>
   17dd0:	cmp	r2, #69	; 0x45
   17dd4:	beq	16fbc <__assert_fail@plt+0x5768>
   17dd8:	ldr	r3, [sp, #36]	; 0x24
   17ddc:	ldr	r3, [r3, #24]
   17de0:	mov	r8, #1
   17de4:	b	173f8 <__assert_fail@plt+0x5ba4>
   17de8:	cmp	r2, #69	; 0x45
   17dec:	beq	18114 <__assert_fail@plt+0x68c0>
   17df0:	cmp	r2, #79	; 0x4f
   17df4:	beq	16fbc <__assert_fail@plt+0x5768>
   17df8:	ldr	r3, [sp, #36]	; 0x24
   17dfc:	ldr	r3, [r3, #20]
   17e00:	ldr	r1, [pc, #-1232]	; 17938 <__assert_fail@plt+0x60e4>
   17e04:	cmp	r3, r1
   17e08:	movge	r1, #0
   17e0c:	movlt	r1, #1
   17e10:	str	r1, [sp, #52]	; 0x34
   17e14:	add	r3, r3, #1888	; 0x760
   17e18:	add	r3, r3, #12
   17e1c:	mov	r8, #4
   17e20:	b	17360 <__assert_fail@plt+0x5b0c>
   17e24:	cmp	r2, #69	; 0x45
   17e28:	beq	1811c <__assert_fail@plt+0x68c8>
   17e2c:	ldr	r3, [sp, #36]	; 0x24
   17e30:	ldr	r1, [r3, #20]
   17e34:	ldr	r3, [pc, #-1280]	; 1793c <__assert_fail@plt+0x60e8>
   17e38:	smull	r3, r0, r3, r1
   17e3c:	asr	r3, r1, #31
   17e40:	rsb	r3, r3, r0, asr #5
   17e44:	mov	r0, #100	; 0x64
   17e48:	mul	r3, r0, r3
   17e4c:	subs	r3, r1, r3
   17e50:	bmi	17e64 <__assert_fail@plt+0x6610>
   17e54:	mov	r1, #0
   17e58:	str	r1, [sp, #52]	; 0x34
   17e5c:	mov	r8, #2
   17e60:	b	17360 <__assert_fail@plt+0x5b0c>
   17e64:	sub	r0, r0, #2000	; 0x7d0
   17e68:	cmp	r1, r0
   17e6c:	rsblt	r3, r3, #0
   17e70:	addge	r3, r3, #100	; 0x64
   17e74:	b	17e54 <__assert_fail@plt+0x6600>
   17e78:	ldr	r3, [sp, #40]	; 0x28
   17e7c:	cmp	r8, #0
   17e80:	movne	r3, #0
   17e84:	str	r3, [sp, #40]	; 0x28
   17e88:	ldr	r0, [sp, #60]	; 0x3c
   17e8c:	bl	11674 <strlen@plt>
   17e90:	mov	r9, r0
   17e94:	ldr	r3, [sp, #28]
   17e98:	subs	r3, r3, #45	; 0x2d
   17e9c:	movne	r3, #1
   17ea0:	cmp	r5, #0
   17ea4:	movlt	r3, #0
   17ea8:	cmp	r3, #0
   17eac:	moveq	r5, #0
   17eb0:	mov	r4, r5
   17eb4:	cmp	r5, r0
   17eb8:	movcc	r5, r0
   17ebc:	ldr	r3, [sp, #32]
   17ec0:	sub	r3, r3, fp
   17ec4:	cmp	r5, r3
   17ec8:	bcs	17f2c <__assert_fail@plt+0x66d8>
   17ecc:	cmp	sl, #0
   17ed0:	beq	17f50 <__assert_fail@plt+0x66fc>
   17ed4:	cmp	r4, r0
   17ed8:	bls	17f04 <__assert_fail@plt+0x66b0>
   17edc:	sub	r4, r4, r0
   17ee0:	ldr	r3, [sp, #28]
   17ee4:	cmp	r3, #43	; 0x2b
   17ee8:	cmpne	r3, #48	; 0x30
   17eec:	mov	r2, r4
   17ef0:	moveq	r1, #48	; 0x30
   17ef4:	movne	r1, #32
   17ef8:	mov	r0, sl
   17efc:	bl	116e0 <memset@plt>
   17f00:	add	sl, sl, r4
   17f04:	cmp	r8, #0
   17f08:	bne	17f3c <__assert_fail@plt+0x66e8>
   17f0c:	ldr	r3, [sp, #40]	; 0x28
   17f10:	cmp	r3, #0
   17f14:	beq	17f58 <__assert_fail@plt+0x6704>
   17f18:	mov	r2, r9
   17f1c:	ldr	r1, [sp, #60]	; 0x3c
   17f20:	mov	r0, sl
   17f24:	bl	168c4 <__assert_fail@plt+0x5070>
   17f28:	b	17f4c <__assert_fail@plt+0x66f8>
   17f2c:	mov	r3, #34	; 0x22
   17f30:	ldr	r2, [sp, #44]	; 0x2c
   17f34:	str	r3, [r2]
   17f38:	b	16a2c <__assert_fail@plt+0x51d8>
   17f3c:	mov	r2, r9
   17f40:	ldr	r1, [sp, #60]	; 0x3c
   17f44:	mov	r0, sl
   17f48:	bl	16880 <__assert_fail@plt+0x502c>
   17f4c:	add	sl, sl, r9
   17f50:	add	fp, fp, r5
   17f54:	b	169e4 <__assert_fail@plt+0x5190>
   17f58:	mov	r2, r9
   17f5c:	ldr	r1, [sp, #60]	; 0x3c
   17f60:	mov	r0, sl
   17f64:	bl	114b8 <memcpy@plt>
   17f68:	b	17f4c <__assert_fail@plt+0x66f8>
   17f6c:	add	r1, r7, #2
   17f70:	mov	lr, #1
   17f74:	add	lr, lr, #1
   17f78:	mov	r0, r1
   17f7c:	ldrb	r3, [r1], #1
   17f80:	cmp	r3, #58	; 0x3a
   17f84:	bne	16f9c <__assert_fail@plt+0x5748>
   17f88:	b	17f74 <__assert_fail@plt+0x6720>
   17f8c:	mov	lr, #0
   17f90:	ldr	r1, [sp, #36]	; 0x24
   17f94:	ldr	r3, [r1, #32]
   17f98:	cmp	r3, #0
   17f9c:	blt	169e4 <__assert_fail@plt+0x5190>
   17fa0:	mov	r3, r1
   17fa4:	ldr	r1, [r1, #36]	; 0x24
   17fa8:	cmp	r1, #0
   17fac:	movlt	r3, #1
   17fb0:	blt	17fd0 <__assert_fail@plt+0x677c>
   17fb4:	movne	r3, #0
   17fb8:	bne	17fd0 <__assert_fail@plt+0x677c>
   17fbc:	ldr	r3, [sp, #60]	; 0x3c
   17fc0:	ldrb	r3, [r3]
   17fc4:	cmp	r3, #45	; 0x2d
   17fc8:	movne	r3, #0
   17fcc:	moveq	r3, #1
   17fd0:	str	r3, [sp, #52]	; 0x34
   17fd4:	ldr	r3, [pc, #-1692]	; 17940 <__assert_fail@plt+0x60ec>
   17fd8:	smull	r0, r3, r3, r1
   17fdc:	add	r3, r3, r1
   17fe0:	asr	r0, r1, #31
   17fe4:	rsb	r8, r0, r3, asr #11
   17fe8:	ldr	r3, [pc, #-1708]	; 17944 <__assert_fail@plt+0x60f0>
   17fec:	smull	ip, r3, r3, r1
   17ff0:	add	r3, r3, r1
   17ff4:	rsb	r3, r0, r3, asr #5
   17ff8:	ldr	r0, [pc, #-1724]	; 17944 <__assert_fail@plt+0x60f0>
   17ffc:	smull	ip, r0, r0, r3
   18000:	add	r0, r0, r3
   18004:	asr	ip, r3, #31
   18008:	rsb	r0, ip, r0, asr #5
   1800c:	rsb	r0, r0, r0, lsl #4
   18010:	sub	r0, r3, r0, lsl #2
   18014:	rsb	r3, r3, r3, lsl #4
   18018:	sub	r3, r1, r3, lsl #2
   1801c:	cmp	lr, #3
   18020:	ldrls	pc, [pc, lr, lsl #2]
   18024:	b	16fbc <__assert_fail@plt+0x5768>
   18028:	andeq	r8, r1, r8, lsr r0
   1802c:	andeq	r8, r1, r0, asr r0
   18030:	andeq	r8, r1, r8, rrx
   18034:	andeq	r8, r1, ip, lsl #1
   18038:	mov	r3, #100	; 0x64
   1803c:	mla	r3, r3, r8, r0
   18040:	mov	r0, #0
   18044:	mov	r9, #1
   18048:	mov	r8, #5
   1804c:	b	17408 <__assert_fail@plt+0x5bb4>
   18050:	mov	r3, #100	; 0x64
   18054:	mla	r3, r3, r8, r0
   18058:	mov	r0, #4
   1805c:	mov	r9, #1
   18060:	mov	r8, #6
   18064:	b	17408 <__assert_fail@plt+0x5bb4>
   18068:	mov	r1, #100	; 0x64
   1806c:	mul	r0, r1, r0
   18070:	ldr	r1, [pc, #-1840]	; 17948 <__assert_fail@plt+0x60f4>
   18074:	mla	r0, r1, r8, r0
   18078:	add	r3, r0, r3
   1807c:	mov	r0, #20
   18080:	mov	r9, #1
   18084:	mov	r8, #9
   18088:	b	17408 <__assert_fail@plt+0x5bb4>
   1808c:	cmp	r3, #0
   18090:	bne	18068 <__assert_fail@plt+0x6814>
   18094:	cmp	r0, #0
   18098:	bne	18050 <__assert_fail@plt+0x67fc>
   1809c:	mov	r3, r8
   180a0:	mov	r9, #1
   180a4:	mov	r8, #3
   180a8:	b	17408 <__assert_fail@plt+0x5bb4>
   180ac:	mov	r3, #34	; 0x22
   180b0:	ldr	r2, [sp, #44]	; 0x2c
   180b4:	str	r3, [r2]
   180b8:	b	16a2c <__assert_fail@plt+0x51d8>
   180bc:	mov	r2, r8
   180c0:	mov	r1, r9
   180c4:	mov	r0, sl
   180c8:	bl	114b8 <memcpy@plt>
   180cc:	b	17050 <__assert_fail@plt+0x57fc>
   180d0:	mov	fp, #0
   180d4:	ldr	r3, [sp, #32]
   180d8:	cmp	sl, #0
   180dc:	cmpne	r3, #0
   180e0:	movne	r3, #0
   180e4:	strbne	r3, [sl]
   180e8:	ldr	r3, [sp, #44]	; 0x2c
   180ec:	ldr	r2, [sp, #64]	; 0x40
   180f0:	str	r2, [r3]
   180f4:	b	16a30 <__assert_fail@plt+0x51dc>
   180f8:	mov	r4, #67	; 0x43
   180fc:	mov	r3, #32
   18100:	strb	r3, [sp, #72]	; 0x48
   18104:	mov	r3, #37	; 0x25
   18108:	strb	r3, [sp, #73]	; 0x49
   1810c:	mov	r8, #0
   18110:	b	171f8 <__assert_fail@plt+0x59a4>
   18114:	mov	r4, #89	; 0x59
   18118:	b	180fc <__assert_fail@plt+0x68a8>
   1811c:	mov	r4, #121	; 0x79
   18120:	b	180fc <__assert_fail@plt+0x68a8>
   18124:	mov	r3, #45	; 0x2d
   18128:	str	r3, [sp, #52]	; 0x34
   1812c:	add	r8, sp, #86	; 0x56
   18130:	sub	r3, r8, r4
   18134:	str	r3, [sp, #68]	; 0x44
   18138:	sub	r8, r5, #1
   1813c:	sub	r8, r8, r3
   18140:	ldr	r2, [sp, #28]
   18144:	subs	r9, r2, #45	; 0x2d
   18148:	movne	r9, #1
   1814c:	cmp	r8, #0
   18150:	movle	r3, #0
   18154:	andgt	r3, r9, #1
   18158:	cmp	r3, #0
   1815c:	moveq	r8, #0
   18160:	cmp	r2, #95	; 0x5f
   18164:	beq	17500 <__assert_fail@plt+0x5cac>
   18168:	ldr	r3, [sp, #32]
   1816c:	sub	r3, r3, fp
   18170:	cmp	r3, #1
   18174:	bls	17528 <__assert_fail@plt+0x5cd4>
   18178:	cmp	sl, #0
   1817c:	ldrbne	r3, [sp, #52]	; 0x34
   18180:	strbne	r3, [sl], #1
   18184:	add	fp, fp, #1
   18188:	sub	r5, r5, #1
   1818c:	ldr	r8, [sp, #68]	; 0x44
   18190:	cmp	r5, #0
   18194:	movlt	r9, #0
   18198:	andge	r9, r9, #1
   1819c:	cmp	r9, #0
   181a0:	moveq	r5, #0
   181a4:	cmp	r5, r8
   181a8:	movcs	r9, r5
   181ac:	movcc	r9, r8
   181b0:	ldr	r2, [sp, #32]
   181b4:	sub	r2, r2, fp
   181b8:	cmp	r9, r2
   181bc:	bcs	17538 <__assert_fail@plt+0x5ce4>
   181c0:	cmp	sl, #0
   181c4:	beq	18218 <__assert_fail@plt+0x69c4>
   181c8:	cmp	r5, r8
   181cc:	bls	181f8 <__assert_fail@plt+0x69a4>
   181d0:	sub	r5, r5, r8
   181d4:	ldr	r3, [sp, #28]
   181d8:	cmp	r3, #43	; 0x2b
   181dc:	cmpne	r3, #48	; 0x30
   181e0:	mov	r2, r5
   181e4:	moveq	r1, #48	; 0x30
   181e8:	movne	r1, #32
   181ec:	mov	r0, sl
   181f0:	bl	116e0 <memset@plt>
   181f4:	add	sl, sl, r5
   181f8:	ldr	r3, [sp, #40]	; 0x28
   181fc:	cmp	r3, #0
   18200:	beq	17548 <__assert_fail@plt+0x5cf4>
   18204:	mov	r2, r8
   18208:	mov	r1, r4
   1820c:	mov	r0, sl
   18210:	bl	168c4 <__assert_fail@plt+0x5070>
   18214:	add	sl, sl, r8
   18218:	add	fp, fp, r9
   1821c:	b	169e4 <__assert_fail@plt+0x5190>
   18220:	mov	r3, #43	; 0x2b
   18224:	str	r3, [sp, #52]	; 0x34
   18228:	b	1812c <__assert_fail@plt+0x68d8>
   1822c:	ldr	r3, [sp, #32]
   18230:	cmp	r3, fp
   18234:	beq	177dc <__assert_fail@plt+0x5f88>
   18238:	mov	r5, #0
   1823c:	b	177b0 <__assert_fail@plt+0x5f5c>
   18240:	push	{r4, lr}
   18244:	sub	sp, sp, #32
   18248:	mov	ip, #0
   1824c:	add	lr, sp, #32
   18250:	strb	ip, [lr, #-1]!
   18254:	ldr	r4, [sp, #44]	; 0x2c
   18258:	str	r4, [sp, #20]
   1825c:	ldr	r4, [sp, #40]	; 0x28
   18260:	str	r4, [sp, #16]
   18264:	str	lr, [sp, #12]
   18268:	mvn	lr, #0
   1826c:	str	lr, [sp, #8]
   18270:	str	ip, [sp, #4]
   18274:	str	ip, [sp]
   18278:	bl	16908 <__assert_fail@plt+0x50b4>
   1827c:	add	sp, sp, #32
   18280:	pop	{r4, pc}
   18284:	push	{r4, r5, r6, lr}
   18288:	subs	r4, r0, #0
   1828c:	beq	18304 <__assert_fail@plt+0x6ab0>
   18290:	mov	r1, #47	; 0x2f
   18294:	mov	r0, r4
   18298:	bl	11770 <strrchr@plt>
   1829c:	cmp	r0, #0
   182a0:	addne	r5, r0, #1
   182a4:	moveq	r5, r4
   182a8:	sub	r3, r5, r4
   182ac:	cmp	r3, #6
   182b0:	ble	182f0 <__assert_fail@plt+0x6a9c>
   182b4:	mov	r2, #7
   182b8:	ldr	r1, [pc, #96]	; 18320 <__assert_fail@plt+0x6acc>
   182bc:	sub	r0, r5, #7
   182c0:	bl	11818 <strncmp@plt>
   182c4:	cmp	r0, #0
   182c8:	bne	182f0 <__assert_fail@plt+0x6a9c>
   182cc:	mov	r2, #3
   182d0:	ldr	r1, [pc, #76]	; 18324 <__assert_fail@plt+0x6ad0>
   182d4:	mov	r0, r5
   182d8:	bl	11818 <strncmp@plt>
   182dc:	cmp	r0, #0
   182e0:	addeq	r4, r5, #3
   182e4:	ldreq	r3, [pc, #60]	; 18328 <__assert_fail@plt+0x6ad4>
   182e8:	streq	r4, [r3]
   182ec:	movne	r4, r5
   182f0:	ldr	r3, [pc, #52]	; 1832c <__assert_fail@plt+0x6ad8>
   182f4:	str	r4, [r3]
   182f8:	ldr	r3, [pc, #48]	; 18330 <__assert_fail@plt+0x6adc>
   182fc:	str	r4, [r3]
   18300:	pop	{r4, r5, r6, pc}
   18304:	ldr	r3, [pc, #40]	; 18334 <__assert_fail@plt+0x6ae0>
   18308:	ldr	r3, [r3]
   1830c:	mov	r2, #55	; 0x37
   18310:	mov	r1, #1
   18314:	ldr	r0, [pc, #28]	; 18338 <__assert_fail@plt+0x6ae4>
   18318:	bl	11554 <fwrite@plt>
   1831c:	bl	11824 <abort@plt>
   18320:	strdeq	lr, [r1], -ip
   18324:	andeq	lr, r1, r4, lsl #18
   18328:	ldrdeq	pc, [r2], -r8
   1832c:	andeq	pc, r2, r8, ror r2	; <UNPREDICTABLE>
   18330:	ldrdeq	pc, [r2], -ip
   18334:	andeq	pc, r2, r8, ror #3
   18338:	andeq	lr, r1, r4, asr #17
   1833c:	push	{r4, r5, r6, lr}
   18340:	mov	r5, r0
   18344:	mov	r4, r1
   18348:	mov	r2, #48	; 0x30
   1834c:	mov	r1, #0
   18350:	bl	116e0 <memset@plt>
   18354:	cmp	r4, #10
   18358:	beq	18368 <__assert_fail@plt+0x6b14>
   1835c:	str	r4, [r5]
   18360:	mov	r0, r5
   18364:	pop	{r4, r5, r6, pc}
   18368:	bl	11824 <abort@plt>
   1836c:	push	{r4, r5, r6, lr}
   18370:	mov	r4, r0
   18374:	mov	r5, r1
   18378:	mov	r2, #5
   1837c:	mov	r1, r0
   18380:	mov	r0, #0
   18384:	bl	114e8 <dcgettext@plt>
   18388:	cmp	r4, r0
   1838c:	popne	{r4, r5, r6, pc}
   18390:	bl	1bee8 <__assert_fail@plt+0xa694>
   18394:	ldrb	r3, [r0]
   18398:	bic	r3, r3, #32
   1839c:	cmp	r3, #85	; 0x55
   183a0:	beq	1841c <__assert_fail@plt+0x6bc8>
   183a4:	cmp	r3, #71	; 0x47
   183a8:	bne	18478 <__assert_fail@plt+0x6c24>
   183ac:	ldrb	r3, [r0, #1]
   183b0:	bic	r3, r3, #32
   183b4:	cmp	r3, #66	; 0x42
   183b8:	bne	18478 <__assert_fail@plt+0x6c24>
   183bc:	ldrb	r3, [r0, #2]
   183c0:	cmp	r3, #49	; 0x31
   183c4:	bne	18478 <__assert_fail@plt+0x6c24>
   183c8:	ldrb	r3, [r0, #3]
   183cc:	cmp	r3, #56	; 0x38
   183d0:	bne	18478 <__assert_fail@plt+0x6c24>
   183d4:	ldrb	r3, [r0, #4]
   183d8:	cmp	r3, #48	; 0x30
   183dc:	bne	18478 <__assert_fail@plt+0x6c24>
   183e0:	ldrb	r3, [r0, #5]
   183e4:	cmp	r3, #51	; 0x33
   183e8:	bne	18478 <__assert_fail@plt+0x6c24>
   183ec:	ldrb	r3, [r0, #6]
   183f0:	cmp	r3, #48	; 0x30
   183f4:	bne	18478 <__assert_fail@plt+0x6c24>
   183f8:	ldrb	r3, [r0, #7]
   183fc:	cmp	r3, #0
   18400:	bne	18478 <__assert_fail@plt+0x6c24>
   18404:	ldrb	r2, [r4]
   18408:	ldr	r3, [pc, #124]	; 1848c <__assert_fail@plt+0x6c38>
   1840c:	ldr	r0, [pc, #124]	; 18490 <__assert_fail@plt+0x6c3c>
   18410:	cmp	r2, #96	; 0x60
   18414:	movne	r0, r3
   18418:	pop	{r4, r5, r6, pc}
   1841c:	ldrb	r3, [r0, #1]
   18420:	bic	r3, r3, #32
   18424:	cmp	r3, #84	; 0x54
   18428:	bne	18478 <__assert_fail@plt+0x6c24>
   1842c:	ldrb	r3, [r0, #2]
   18430:	bic	r3, r3, #32
   18434:	cmp	r3, #70	; 0x46
   18438:	bne	18478 <__assert_fail@plt+0x6c24>
   1843c:	ldrb	r3, [r0, #3]
   18440:	cmp	r3, #45	; 0x2d
   18444:	bne	18478 <__assert_fail@plt+0x6c24>
   18448:	ldrb	r3, [r0, #4]
   1844c:	cmp	r3, #56	; 0x38
   18450:	bne	18478 <__assert_fail@plt+0x6c24>
   18454:	ldrb	r3, [r0, #5]
   18458:	cmp	r3, #0
   1845c:	bne	18478 <__assert_fail@plt+0x6c24>
   18460:	ldrb	r2, [r4]
   18464:	ldr	r3, [pc, #40]	; 18494 <__assert_fail@plt+0x6c40>
   18468:	ldr	r0, [pc, #40]	; 18498 <__assert_fail@plt+0x6c44>
   1846c:	cmp	r2, #96	; 0x60
   18470:	movne	r0, r3
   18474:	pop	{r4, r5, r6, pc}
   18478:	ldr	r3, [pc, #28]	; 1849c <__assert_fail@plt+0x6c48>
   1847c:	ldr	r0, [pc, #28]	; 184a0 <__assert_fail@plt+0x6c4c>
   18480:	cmp	r5, #9
   18484:	movne	r0, r3
   18488:	pop	{r4, r5, r6, pc}
   1848c:	andeq	lr, r1, r0, ror #18
   18490:	andeq	lr, r1, ip, ror #18
   18494:	andeq	lr, r1, ip, asr r9
   18498:	andeq	lr, r1, r0, ror r9
   1849c:	andeq	lr, r1, r4, ror #18
   184a0:	andeq	lr, r1, r8, ror #18
   184a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   184a8:	sub	sp, sp, #116	; 0x74
   184ac:	str	r0, [sp, #36]	; 0x24
   184b0:	mov	sl, r1
   184b4:	str	r2, [sp, #52]	; 0x34
   184b8:	str	r3, [sp, #28]
   184bc:	ldr	r8, [sp, #152]	; 0x98
   184c0:	bl	1156c <__ctype_get_mb_cur_max@plt>
   184c4:	str	r0, [sp, #84]	; 0x54
   184c8:	ldr	r3, [sp, #156]	; 0x9c
   184cc:	lsr	r3, r3, #1
   184d0:	and	r3, r3, #1
   184d4:	str	r3, [sp, #32]
   184d8:	mov	r3, #1
   184dc:	str	r3, [sp, #40]	; 0x28
   184e0:	mov	r3, #0
   184e4:	str	r3, [sp, #80]	; 0x50
   184e8:	str	r3, [sp, #44]	; 0x2c
   184ec:	str	r3, [sp, #48]	; 0x30
   184f0:	str	r3, [sp, #60]	; 0x3c
   184f4:	str	r3, [sp, #72]	; 0x48
   184f8:	str	r3, [sp, #76]	; 0x4c
   184fc:	mov	r7, sl
   18500:	mov	sl, r8
   18504:	cmp	sl, #10
   18508:	ldrls	pc, [pc, sl, lsl #2]
   1850c:	b	186c4 <__assert_fail@plt+0x6e70>
   18510:	andeq	r8, r1, r4, ror r5
   18514:	andeq	r8, r1, r4, asr #10
   18518:	andeq	r8, r1, r0, lsr #13
   1851c:	andeq	r8, r1, ip, lsr r5
   18520:	andeq	r8, r1, r4, asr r6
   18524:	andeq	r8, r1, r4, lsl #11
   18528:	strdeq	r9, [r1], -r0
   1852c:	andeq	r8, r1, r8, asr #13
   18530:	andeq	r8, r1, r0, asr #11
   18534:	andeq	r8, r1, r0, asr #11
   18538:	andeq	r8, r1, r0, asr #11
   1853c:	mov	r3, #1
   18540:	str	r3, [sp, #48]	; 0x30
   18544:	mov	r3, #1
   18548:	str	r3, [sp, #32]
   1854c:	str	r3, [sp, #60]	; 0x3c
   18550:	ldr	r3, [pc, #4068]	; 1953c <__assert_fail@plt+0x7ce8>
   18554:	str	r3, [sp, #72]	; 0x48
   18558:	mov	fp, #0
   1855c:	mov	sl, #2
   18560:	mov	r6, #0
   18564:	ldr	r3, [sp, #48]	; 0x30
   18568:	eor	r3, r3, #1
   1856c:	str	r3, [sp, #68]	; 0x44
   18570:	b	18e58 <__assert_fail@plt+0x7604>
   18574:	mov	r3, #0
   18578:	str	r3, [sp, #32]
   1857c:	mov	fp, r3
   18580:	b	18560 <__assert_fail@plt+0x6d0c>
   18584:	ldr	r3, [sp, #32]
   18588:	cmp	r3, #0
   1858c:	bne	186e0 <__assert_fail@plt+0x6e8c>
   18590:	cmp	r7, #0
   18594:	beq	18700 <__assert_fail@plt+0x6eac>
   18598:	ldr	r3, [sp, #36]	; 0x24
   1859c:	mov	r2, #34	; 0x22
   185a0:	strb	r2, [r3]
   185a4:	mov	r3, #1
   185a8:	str	r3, [sp, #48]	; 0x30
   185ac:	str	r3, [sp, #60]	; 0x3c
   185b0:	ldr	r3, [pc, #3980]	; 19544 <__assert_fail@plt+0x7cf0>
   185b4:	str	r3, [sp, #72]	; 0x48
   185b8:	mov	fp, #1
   185bc:	b	18560 <__assert_fail@plt+0x6d0c>
   185c0:	cmp	sl, #10
   185c4:	beq	185e8 <__assert_fail@plt+0x6d94>
   185c8:	mov	r1, sl
   185cc:	ldr	r0, [pc, #3948]	; 19540 <__assert_fail@plt+0x7cec>
   185d0:	bl	1836c <__assert_fail@plt+0x6b18>
   185d4:	str	r0, [sp, #164]	; 0xa4
   185d8:	mov	r1, sl
   185dc:	ldr	r0, [pc, #3928]	; 1953c <__assert_fail@plt+0x7ce8>
   185e0:	bl	1836c <__assert_fail@plt+0x6b18>
   185e4:	str	r0, [sp, #168]	; 0xa8
   185e8:	ldr	r3, [sp, #32]
   185ec:	cmp	r3, #0
   185f0:	movne	fp, #0
   185f4:	bne	1862c <__assert_fail@plt+0x6dd8>
   185f8:	ldr	r3, [sp, #164]	; 0xa4
   185fc:	ldrb	r3, [r3]
   18600:	cmp	r3, #0
   18604:	beq	1864c <__assert_fail@plt+0x6df8>
   18608:	ldr	r2, [sp, #164]	; 0xa4
   1860c:	mov	fp, #0
   18610:	ldr	r1, [sp, #36]	; 0x24
   18614:	cmp	r7, fp
   18618:	strbhi	r3, [r1, fp]
   1861c:	add	fp, fp, #1
   18620:	ldrb	r3, [r2, #1]!
   18624:	cmp	r3, #0
   18628:	bne	18614 <__assert_fail@plt+0x6dc0>
   1862c:	ldr	r0, [sp, #168]	; 0xa8
   18630:	bl	11674 <strlen@plt>
   18634:	str	r0, [sp, #60]	; 0x3c
   18638:	ldr	r3, [sp, #168]	; 0xa8
   1863c:	str	r3, [sp, #72]	; 0x48
   18640:	mov	r3, #1
   18644:	str	r3, [sp, #48]	; 0x30
   18648:	b	18560 <__assert_fail@plt+0x6d0c>
   1864c:	mov	fp, #0
   18650:	b	1862c <__assert_fail@plt+0x6dd8>
   18654:	ldr	r3, [sp, #32]
   18658:	cmp	r3, #0
   1865c:	bne	1871c <__assert_fail@plt+0x6ec8>
   18660:	mov	r3, #1
   18664:	str	r3, [sp, #48]	; 0x30
   18668:	cmp	r7, #0
   1866c:	beq	18738 <__assert_fail@plt+0x6ee4>
   18670:	ldr	r3, [sp, #36]	; 0x24
   18674:	mov	r2, #39	; 0x27
   18678:	strb	r2, [r3]
   1867c:	mov	r3, #0
   18680:	str	r3, [sp, #32]
   18684:	mov	r3, #1
   18688:	str	r3, [sp, #60]	; 0x3c
   1868c:	ldr	r3, [pc, #3752]	; 1953c <__assert_fail@plt+0x7ce8>
   18690:	str	r3, [sp, #72]	; 0x48
   18694:	mov	fp, #1
   18698:	mov	sl, #2
   1869c:	b	18560 <__assert_fail@plt+0x6d0c>
   186a0:	ldr	r3, [sp, #32]
   186a4:	cmp	r3, #0
   186a8:	beq	18668 <__assert_fail@plt+0x6e14>
   186ac:	mov	r3, #1
   186b0:	str	r3, [sp, #60]	; 0x3c
   186b4:	ldr	r3, [pc, #3712]	; 1953c <__assert_fail@plt+0x7ce8>
   186b8:	str	r3, [sp, #72]	; 0x48
   186bc:	mov	fp, #0
   186c0:	b	18560 <__assert_fail@plt+0x6d0c>
   186c4:	bl	11824 <abort@plt>
   186c8:	mov	r3, #0
   186cc:	str	r3, [sp, #32]
   186d0:	mov	r3, #1
   186d4:	str	r3, [sp, #48]	; 0x30
   186d8:	mov	fp, #0
   186dc:	b	18560 <__assert_fail@plt+0x6d0c>
   186e0:	ldr	r3, [sp, #32]
   186e4:	str	r3, [sp, #48]	; 0x30
   186e8:	mov	r3, #1
   186ec:	str	r3, [sp, #60]	; 0x3c
   186f0:	ldr	r3, [pc, #3660]	; 19544 <__assert_fail@plt+0x7cf0>
   186f4:	str	r3, [sp, #72]	; 0x48
   186f8:	mov	fp, #0
   186fc:	b	18560 <__assert_fail@plt+0x6d0c>
   18700:	mov	r3, #1
   18704:	str	r3, [sp, #48]	; 0x30
   18708:	str	r3, [sp, #60]	; 0x3c
   1870c:	ldr	r3, [pc, #3632]	; 19544 <__assert_fail@plt+0x7cf0>
   18710:	str	r3, [sp, #72]	; 0x48
   18714:	mov	fp, #1
   18718:	b	18560 <__assert_fail@plt+0x6d0c>
   1871c:	mov	r3, #1
   18720:	str	r3, [sp, #60]	; 0x3c
   18724:	ldr	r3, [pc, #3600]	; 1953c <__assert_fail@plt+0x7ce8>
   18728:	str	r3, [sp, #72]	; 0x48
   1872c:	mov	fp, #0
   18730:	mov	sl, #2
   18734:	b	18560 <__assert_fail@plt+0x6d0c>
   18738:	mov	r3, #0
   1873c:	str	r3, [sp, #32]
   18740:	mov	r3, #1
   18744:	str	r3, [sp, #60]	; 0x3c
   18748:	ldr	r3, [pc, #3564]	; 1953c <__assert_fail@plt+0x7ce8>
   1874c:	str	r3, [sp, #72]	; 0x48
   18750:	mov	fp, #1
   18754:	mov	sl, #2
   18758:	b	18560 <__assert_fail@plt+0x6d0c>
   1875c:	mov	r3, #0
   18760:	str	r3, [sp, #56]	; 0x38
   18764:	ldr	r3, [sp, #52]	; 0x34
   18768:	add	r2, r3, r6
   1876c:	str	r2, [sp, #64]	; 0x40
   18770:	ldrb	r4, [r3, r6]
   18774:	cmp	r4, #126	; 0x7e
   18778:	ldrls	pc, [pc, r4, lsl #2]
   1877c:	b	18fb8 <__assert_fail@plt+0x7764>
   18780:	muleq	r1, r8, r9
   18784:			; <UNDEFINED> instruction: 0x00018fb8
   18788:			; <UNDEFINED> instruction: 0x00018fb8
   1878c:			; <UNDEFINED> instruction: 0x00018fb8
   18790:			; <UNDEFINED> instruction: 0x00018fb8
   18794:			; <UNDEFINED> instruction: 0x00018fb8
   18798:			; <UNDEFINED> instruction: 0x00018fb8
   1879c:	strdeq	r8, [r1], -r4
   187a0:	muleq	r1, r0, r9
   187a4:	andeq	r8, r1, ip, lsr #25
   187a8:	andeq	r8, r1, r4, lsr #25
   187ac:	andeq	r8, r1, r4, lsl ip
   187b0:	andeq	r8, r1, ip, lsl #24
   187b4:	andeq	r8, r1, r8, lsl #19
   187b8:			; <UNDEFINED> instruction: 0x00018fb8
   187bc:			; <UNDEFINED> instruction: 0x00018fb8
   187c0:			; <UNDEFINED> instruction: 0x00018fb8
   187c4:			; <UNDEFINED> instruction: 0x00018fb8
   187c8:			; <UNDEFINED> instruction: 0x00018fb8
   187cc:			; <UNDEFINED> instruction: 0x00018fb8
   187d0:			; <UNDEFINED> instruction: 0x00018fb8
   187d4:			; <UNDEFINED> instruction: 0x00018fb8
   187d8:			; <UNDEFINED> instruction: 0x00018fb8
   187dc:			; <UNDEFINED> instruction: 0x00018fb8
   187e0:			; <UNDEFINED> instruction: 0x00018fb8
   187e4:			; <UNDEFINED> instruction: 0x00018fb8
   187e8:			; <UNDEFINED> instruction: 0x00018fb8
   187ec:			; <UNDEFINED> instruction: 0x00018fb8
   187f0:			; <UNDEFINED> instruction: 0x00018fb8
   187f4:			; <UNDEFINED> instruction: 0x00018fb8
   187f8:			; <UNDEFINED> instruction: 0x00018fb8
   187fc:			; <UNDEFINED> instruction: 0x00018fb8
   18800:	andeq	r8, r1, r8, asr #26
   18804:	andeq	r8, r1, r4, asr #26
   18808:	andeq	r8, r1, r4, asr #26
   1880c:	andeq	r8, r1, ip, lsl sp
   18810:	andeq	r8, r1, r4, asr #26
   18814:	andeq	r9, r1, ip, lsl #7
   18818:	andeq	r8, r1, r4, asr #26
   1881c:	andeq	r8, r1, ip, lsl pc
   18820:	andeq	r8, r1, r4, asr #26
   18824:	andeq	r8, r1, r4, asr #26
   18828:	andeq	r8, r1, r4, asr #26
   1882c:	andeq	r9, r1, ip, lsl #7
   18830:	andeq	r9, r1, ip, lsl #7
   18834:	andeq	r9, r1, ip, lsl #7
   18838:	andeq	r9, r1, ip, lsl #7
   1883c:	andeq	r9, r1, ip, lsl #7
   18840:	andeq	r9, r1, ip, lsl #7
   18844:	andeq	r9, r1, ip, lsl #7
   18848:	andeq	r9, r1, ip, lsl #7
   1884c:	andeq	r9, r1, ip, lsl #7
   18850:	andeq	r9, r1, ip, lsl #7
   18854:	andeq	r9, r1, ip, lsl #7
   18858:	andeq	r9, r1, ip, lsl #7
   1885c:	andeq	r9, r1, ip, lsl #7
   18860:	andeq	r9, r1, ip, lsl #7
   18864:	andeq	r9, r1, ip, lsl #7
   18868:	andeq	r9, r1, ip, lsl #7
   1886c:	andeq	r8, r1, r4, asr #26
   18870:	andeq	r8, r1, r4, asr #26
   18874:	andeq	r8, r1, r4, asr #26
   18878:	andeq	r8, r1, r4, asr #26
   1887c:	andeq	r8, r1, r0, lsr #21
   18880:			; <UNDEFINED> instruction: 0x00018fb8
   18884:	andeq	r9, r1, ip, lsl #7
   18888:	andeq	r9, r1, ip, lsl #7
   1888c:	andeq	r9, r1, ip, lsl #7
   18890:	andeq	r9, r1, ip, lsl #7
   18894:	andeq	r9, r1, ip, lsl #7
   18898:	andeq	r9, r1, ip, lsl #7
   1889c:	andeq	r9, r1, ip, lsl #7
   188a0:	andeq	r9, r1, ip, lsl #7
   188a4:	andeq	r9, r1, ip, lsl #7
   188a8:	andeq	r9, r1, ip, lsl #7
   188ac:	andeq	r9, r1, ip, lsl #7
   188b0:	andeq	r9, r1, ip, lsl #7
   188b4:	andeq	r9, r1, ip, lsl #7
   188b8:	andeq	r9, r1, ip, lsl #7
   188bc:	andeq	r9, r1, ip, lsl #7
   188c0:	andeq	r9, r1, ip, lsl #7
   188c4:	andeq	r9, r1, ip, lsl #7
   188c8:	andeq	r9, r1, ip, lsl #7
   188cc:	andeq	r9, r1, ip, lsl #7
   188d0:	andeq	r9, r1, ip, lsl #7
   188d4:	andeq	r9, r1, ip, lsl #7
   188d8:	andeq	r9, r1, ip, lsl #7
   188dc:	andeq	r9, r1, ip, lsl #7
   188e0:	andeq	r9, r1, ip, lsl #7
   188e4:	andeq	r9, r1, ip, lsl #7
   188e8:	andeq	r9, r1, ip, lsl #7
   188ec:	andeq	r8, r1, r4, asr #26
   188f0:	andeq	r8, r1, ip, lsl ip
   188f4:	andeq	r9, r1, ip, lsl #7
   188f8:	andeq	r8, r1, r4, asr #26
   188fc:	andeq	r9, r1, ip, lsl #7
   18900:	andeq	r8, r1, r4, asr #26
   18904:	andeq	r9, r1, ip, lsl #7
   18908:	andeq	r9, r1, ip, lsl #7
   1890c:	andeq	r9, r1, ip, lsl #7
   18910:	andeq	r9, r1, ip, lsl #7
   18914:	andeq	r9, r1, ip, lsl #7
   18918:	andeq	r9, r1, ip, lsl #7
   1891c:	andeq	r9, r1, ip, lsl #7
   18920:	andeq	r9, r1, ip, lsl #7
   18924:	andeq	r9, r1, ip, lsl #7
   18928:	andeq	r9, r1, ip, lsl #7
   1892c:	andeq	r9, r1, ip, lsl #7
   18930:	andeq	r9, r1, ip, lsl #7
   18934:	andeq	r9, r1, ip, lsl #7
   18938:	andeq	r9, r1, ip, lsl #7
   1893c:	andeq	r9, r1, ip, lsl #7
   18940:	andeq	r9, r1, ip, lsl #7
   18944:	andeq	r9, r1, ip, lsl #7
   18948:	andeq	r9, r1, ip, lsl #7
   1894c:	andeq	r9, r1, ip, lsl #7
   18950:	andeq	r9, r1, ip, lsl #7
   18954:	andeq	r9, r1, ip, lsl #7
   18958:	andeq	r9, r1, ip, lsl #7
   1895c:	andeq	r9, r1, ip, lsl #7
   18960:	andeq	r9, r1, ip, lsl #7
   18964:	andeq	r9, r1, ip, lsl #7
   18968:	andeq	r9, r1, ip, lsl #7
   1896c:	strdeq	r8, [r1], -ip
   18970:	andeq	r8, r1, r4, asr #26
   18974:	strdeq	r8, [r1], -ip
   18978:	andeq	r8, r1, ip, lsl sp
   1897c:	mov	r3, #0
   18980:	str	r3, [sp, #56]	; 0x38
   18984:	b	18764 <__assert_fail@plt+0x6f10>
   18988:	mov	r3, #114	; 0x72
   1898c:	b	18cb0 <__assert_fail@plt+0x745c>
   18990:	mov	r3, #98	; 0x62
   18994:	b	18cc8 <__assert_fail@plt+0x7474>
   18998:	ldr	r3, [sp, #48]	; 0x30
   1899c:	cmp	r3, #0
   189a0:	beq	18a88 <__assert_fail@plt+0x7234>
   189a4:	ldr	r3, [sp, #32]
   189a8:	cmp	r3, #0
   189ac:	bne	19510 <__assert_fail@plt+0x7cbc>
   189b0:	ldr	r3, [sp, #44]	; 0x2c
   189b4:	eor	r3, r3, #1
   189b8:	cmp	sl, #2
   189bc:	movne	r3, #0
   189c0:	andeq	r3, r3, #1
   189c4:	cmp	r3, #0
   189c8:	moveq	r2, fp
   189cc:	beq	18a10 <__assert_fail@plt+0x71bc>
   189d0:	cmp	r7, fp
   189d4:	ldrhi	r2, [sp, #36]	; 0x24
   189d8:	movhi	r1, #39	; 0x27
   189dc:	strbhi	r1, [r2, fp]
   189e0:	add	r2, fp, #1
   189e4:	cmp	r7, r2
   189e8:	ldrhi	r1, [sp, #36]	; 0x24
   189ec:	movhi	r0, #36	; 0x24
   189f0:	strbhi	r0, [r1, r2]
   189f4:	add	r2, fp, #2
   189f8:	cmp	r7, r2
   189fc:	ldrhi	r1, [sp, #36]	; 0x24
   18a00:	movhi	r0, #39	; 0x27
   18a04:	strbhi	r0, [r1, r2]
   18a08:	add	r2, fp, #3
   18a0c:	str	r3, [sp, #44]	; 0x2c
   18a10:	cmp	r7, r2
   18a14:	ldrhi	r3, [sp, #36]	; 0x24
   18a18:	movhi	r1, #92	; 0x5c
   18a1c:	strbhi	r1, [r3, r2]
   18a20:	add	fp, r2, #1
   18a24:	cmp	r5, #0
   18a28:	beq	19394 <__assert_fail@plt+0x7b40>
   18a2c:	add	r3, r6, #1
   18a30:	ldr	r1, [sp, #28]
   18a34:	cmp	r1, r3
   18a38:	bls	193a4 <__assert_fail@plt+0x7b50>
   18a3c:	ldr	r1, [sp, #52]	; 0x34
   18a40:	ldrb	r3, [r1, r3]
   18a44:	sub	r3, r3, #48	; 0x30
   18a48:	uxtb	r3, r3
   18a4c:	cmp	r3, #9
   18a50:	bhi	193b0 <__assert_fail@plt+0x7b5c>
   18a54:	cmp	r7, fp
   18a58:	movhi	r3, #48	; 0x30
   18a5c:	ldrhi	r1, [sp, #36]	; 0x24
   18a60:	strbhi	r3, [r1, fp]
   18a64:	add	r3, r2, #2
   18a68:	cmp	r7, r3
   18a6c:	movhi	r1, #48	; 0x30
   18a70:	ldrhi	r0, [sp, #36]	; 0x24
   18a74:	strbhi	r1, [r0, r3]
   18a78:	add	fp, r2, #3
   18a7c:	ldr	r8, [sp, #32]
   18a80:	mov	r4, #48	; 0x30
   18a84:	b	18d60 <__assert_fail@plt+0x750c>
   18a88:	ldr	r3, [sp, #156]	; 0x9c
   18a8c:	tst	r3, #1
   18a90:	bne	18e54 <__assert_fail@plt+0x7600>
   18a94:	ldr	r5, [sp, #48]	; 0x30
   18a98:	mov	r8, r5
   18a9c:	b	18d60 <__assert_fail@plt+0x750c>
   18aa0:	cmp	sl, #2
   18aa4:	beq	18abc <__assert_fail@plt+0x7268>
   18aa8:	cmp	sl, #5
   18aac:	beq	18ad4 <__assert_fail@plt+0x7280>
   18ab0:	mov	r8, #0
   18ab4:	mov	r5, r8
   18ab8:	b	18d60 <__assert_fail@plt+0x750c>
   18abc:	ldr	r3, [sp, #32]
   18ac0:	cmp	r3, #0
   18ac4:	bne	19524 <__assert_fail@plt+0x7cd0>
   18ac8:	mov	r8, r3
   18acc:	mov	r5, r3
   18ad0:	b	18d60 <__assert_fail@plt+0x750c>
   18ad4:	ldr	r3, [sp, #156]	; 0x9c
   18ad8:	tst	r3, #4
   18adc:	beq	193bc <__assert_fail@plt+0x7b68>
   18ae0:	add	r3, r6, #2
   18ae4:	ldr	r2, [sp, #28]
   18ae8:	cmp	r2, r3
   18aec:	bls	193c8 <__assert_fail@plt+0x7b74>
   18af0:	ldr	r2, [sp, #52]	; 0x34
   18af4:	add	r2, r2, r6
   18af8:	ldrb	r2, [r2, #1]
   18afc:	cmp	r2, #63	; 0x3f
   18b00:	movne	r8, #0
   18b04:	movne	r5, r8
   18b08:	bne	18d60 <__assert_fail@plt+0x750c>
   18b0c:	ldr	r2, [sp, #52]	; 0x34
   18b10:	ldrb	r2, [r2, r3]
   18b14:	sub	r1, r2, #33	; 0x21
   18b18:	cmp	r1, #29
   18b1c:	ldrls	pc, [pc, r1, lsl #2]
   18b20:	b	193d4 <__assert_fail@plt+0x7b80>
   18b24:	muleq	r1, ip, fp
   18b28:	ldrdeq	r9, [r1], -r4
   18b2c:	ldrdeq	r9, [r1], -r4
   18b30:	ldrdeq	r9, [r1], -r4
   18b34:	ldrdeq	r9, [r1], -r4
   18b38:	ldrdeq	r9, [r1], -r4
   18b3c:	muleq	r1, ip, fp
   18b40:	muleq	r1, ip, fp
   18b44:	muleq	r1, ip, fp
   18b48:	ldrdeq	r9, [r1], -r4
   18b4c:	ldrdeq	r9, [r1], -r4
   18b50:	ldrdeq	r9, [r1], -r4
   18b54:	muleq	r1, ip, fp
   18b58:	ldrdeq	r9, [r1], -r4
   18b5c:	muleq	r1, ip, fp
   18b60:	ldrdeq	r9, [r1], -r4
   18b64:	ldrdeq	r9, [r1], -r4
   18b68:	ldrdeq	r9, [r1], -r4
   18b6c:	ldrdeq	r9, [r1], -r4
   18b70:	ldrdeq	r9, [r1], -r4
   18b74:	ldrdeq	r9, [r1], -r4
   18b78:	ldrdeq	r9, [r1], -r4
   18b7c:	ldrdeq	r9, [r1], -r4
   18b80:	ldrdeq	r9, [r1], -r4
   18b84:	ldrdeq	r9, [r1], -r4
   18b88:	ldrdeq	r9, [r1], -r4
   18b8c:	ldrdeq	r9, [r1], -r4
   18b90:	muleq	r1, ip, fp
   18b94:	muleq	r1, ip, fp
   18b98:	muleq	r1, ip, fp
   18b9c:	ldr	r1, [sp, #32]
   18ba0:	cmp	r1, #0
   18ba4:	bne	195e4 <__assert_fail@plt+0x7d90>
   18ba8:	cmp	r7, fp
   18bac:	movhi	r1, #63	; 0x3f
   18bb0:	ldrhi	r0, [sp, #36]	; 0x24
   18bb4:	strbhi	r1, [r0, fp]
   18bb8:	add	r1, fp, #1
   18bbc:	cmp	r7, r1
   18bc0:	ldrhi	r0, [sp, #36]	; 0x24
   18bc4:	movhi	ip, #34	; 0x22
   18bc8:	strbhi	ip, [r0, r1]
   18bcc:	add	r1, fp, #2
   18bd0:	cmp	r7, r1
   18bd4:	ldrhi	r0, [sp, #36]	; 0x24
   18bd8:	movhi	ip, #34	; 0x22
   18bdc:	strbhi	ip, [r0, r1]
   18be0:	add	r1, fp, #3
   18be4:	cmp	r7, r1
   18be8:	movhi	r0, #63	; 0x3f
   18bec:	ldrhi	ip, [sp, #36]	; 0x24
   18bf0:	strbhi	r0, [ip, r1]
   18bf4:	add	fp, fp, #4
   18bf8:	ldr	r5, [sp, #32]
   18bfc:	mov	r8, r5
   18c00:	mov	r4, r2
   18c04:	mov	r6, r3
   18c08:	b	18d60 <__assert_fail@plt+0x750c>
   18c0c:	mov	r3, #102	; 0x66
   18c10:	b	18cc8 <__assert_fail@plt+0x7474>
   18c14:	mov	r3, #118	; 0x76
   18c18:	b	18cc8 <__assert_fail@plt+0x7474>
   18c1c:	cmp	sl, #2
   18c20:	beq	18c8c <__assert_fail@plt+0x7438>
   18c24:	ldr	r3, [sp, #48]	; 0x30
   18c28:	ldr	r2, [sp, #32]
   18c2c:	and	r3, r3, r2
   18c30:	tst	r9, r3
   18c34:	moveq	r3, r4
   18c38:	beq	18cc8 <__assert_fail@plt+0x7474>
   18c3c:	mov	r8, #0
   18c40:	mov	r5, r8
   18c44:	eor	r5, r5, #1
   18c48:	ldr	r3, [sp, #44]	; 0x2c
   18c4c:	and	r5, r5, r3
   18c50:	tst	r5, #255	; 0xff
   18c54:	beq	18e34 <__assert_fail@plt+0x75e0>
   18c58:	cmp	r7, fp
   18c5c:	ldrhi	r3, [sp, #36]	; 0x24
   18c60:	movhi	r2, #39	; 0x27
   18c64:	strbhi	r2, [r3, fp]
   18c68:	add	r3, fp, #1
   18c6c:	cmp	r7, r3
   18c70:	ldrhi	r2, [sp, #36]	; 0x24
   18c74:	movhi	r1, #39	; 0x27
   18c78:	strbhi	r1, [r2, r3]
   18c7c:	add	fp, fp, #2
   18c80:	mov	r3, #0
   18c84:	str	r3, [sp, #44]	; 0x2c
   18c88:	b	18e34 <__assert_fail@plt+0x75e0>
   18c8c:	ldr	r3, [sp, #32]
   18c90:	cmp	r3, #0
   18c94:	bne	19530 <__assert_fail@plt+0x7cdc>
   18c98:	mov	r8, r3
   18c9c:	mov	r5, r3
   18ca0:	b	18c44 <__assert_fail@plt+0x73f0>
   18ca4:	mov	r3, #110	; 0x6e
   18ca8:	b	18cb0 <__assert_fail@plt+0x745c>
   18cac:	mov	r3, #116	; 0x74
   18cb0:	ldr	r2, [sp, #32]
   18cb4:	cmp	sl, #2
   18cb8:	movne	r2, #0
   18cbc:	andeq	r2, r2, #1
   18cc0:	cmp	r2, #0
   18cc4:	bne	18ce8 <__assert_fail@plt+0x7494>
   18cc8:	ldr	r2, [sp, #48]	; 0x30
   18ccc:	cmp	r2, #0
   18cd0:	moveq	r8, r2
   18cd4:	moveq	r5, r2
   18cd8:	beq	18d60 <__assert_fail@plt+0x750c>
   18cdc:	mov	r4, r3
   18ce0:	mov	r8, #0
   18ce4:	b	18db8 <__assert_fail@plt+0x7564>
   18ce8:	mov	r8, sl
   18cec:	mov	sl, r7
   18cf0:	b	1955c <__assert_fail@plt+0x7d08>
   18cf4:	mov	r3, #97	; 0x61
   18cf8:	b	18cc8 <__assert_fail@plt+0x7474>
   18cfc:	ldr	r3, [sp, #28]
   18d00:	cmn	r3, #1
   18d04:	beq	18d30 <__assert_fail@plt+0x74dc>
   18d08:	ldr	r3, [sp, #28]
   18d0c:	subs	r3, r3, #1
   18d10:	movne	r3, #1
   18d14:	cmp	r3, #0
   18d18:	bne	193e0 <__assert_fail@plt+0x7b8c>
   18d1c:	cmp	r6, #0
   18d20:	beq	18d48 <__assert_fail@plt+0x74f4>
   18d24:	mov	r8, #0
   18d28:	mov	r5, r8
   18d2c:	b	18d60 <__assert_fail@plt+0x750c>
   18d30:	ldr	r3, [sp, #52]	; 0x34
   18d34:	ldrb	r3, [r3, #1]
   18d38:	adds	r3, r3, #0
   18d3c:	movne	r3, #1
   18d40:	b	18d14 <__assert_fail@plt+0x74c0>
   18d44:	mov	r8, #0
   18d48:	ldr	r5, [sp, #32]
   18d4c:	cmp	sl, #2
   18d50:	movne	r5, #0
   18d54:	andeq	r5, r5, #1
   18d58:	cmp	r5, #0
   18d5c:	bne	18f10 <__assert_fail@plt+0x76bc>
   18d60:	ldr	r3, [sp, #68]	; 0x44
   18d64:	cmp	sl, #2
   18d68:	orreq	r3, r3, #1
   18d6c:	eor	r3, r3, #1
   18d70:	ldr	r2, [sp, #32]
   18d74:	orr	r3, r2, r3
   18d78:	tst	r3, #255	; 0xff
   18d7c:	beq	18dac <__assert_fail@plt+0x7558>
   18d80:	ldr	r3, [sp, #160]	; 0xa0
   18d84:	cmp	r3, #0
   18d88:	beq	18dac <__assert_fail@plt+0x7558>
   18d8c:	lsr	r2, r4, #5
   18d90:	uxtb	r2, r2
   18d94:	and	r3, r4, #31
   18d98:	ldr	r1, [sp, #160]	; 0xa0
   18d9c:	ldr	r2, [r1, r2, lsl #2]
   18da0:	lsr	r3, r2, r3
   18da4:	tst	r3, #1
   18da8:	bne	18db8 <__assert_fail@plt+0x7564>
   18dac:	ldr	r3, [sp, #56]	; 0x38
   18db0:	cmp	r3, #0
   18db4:	beq	18c44 <__assert_fail@plt+0x73f0>
   18db8:	ldr	r3, [sp, #32]
   18dbc:	cmp	r3, #0
   18dc0:	bne	195cc <__assert_fail@plt+0x7d78>
   18dc4:	ldr	r3, [sp, #44]	; 0x2c
   18dc8:	eor	r3, r3, #1
   18dcc:	cmp	sl, #2
   18dd0:	movne	r3, #0
   18dd4:	andeq	r3, r3, #1
   18dd8:	cmp	r3, #0
   18ddc:	beq	18e20 <__assert_fail@plt+0x75cc>
   18de0:	cmp	r7, fp
   18de4:	ldrhi	r2, [sp, #36]	; 0x24
   18de8:	movhi	r1, #39	; 0x27
   18dec:	strbhi	r1, [r2, fp]
   18df0:	add	r2, fp, #1
   18df4:	cmp	r7, r2
   18df8:	ldrhi	r1, [sp, #36]	; 0x24
   18dfc:	movhi	r0, #36	; 0x24
   18e00:	strbhi	r0, [r1, r2]
   18e04:	add	r2, fp, #2
   18e08:	cmp	r7, r2
   18e0c:	ldrhi	r1, [sp, #36]	; 0x24
   18e10:	movhi	r0, #39	; 0x27
   18e14:	strbhi	r0, [r1, r2]
   18e18:	add	fp, fp, #3
   18e1c:	str	r3, [sp, #44]	; 0x2c
   18e20:	cmp	r7, fp
   18e24:	ldrhi	r3, [sp, #36]	; 0x24
   18e28:	movhi	r2, #92	; 0x5c
   18e2c:	strbhi	r2, [r3, fp]
   18e30:	add	fp, fp, #1
   18e34:	cmp	fp, r7
   18e38:	ldrcc	r3, [sp, #36]	; 0x24
   18e3c:	strbcc	r4, [r3, fp]
   18e40:	add	fp, fp, #1
   18e44:	ldr	r3, [sp, #40]	; 0x28
   18e48:	cmp	r8, #0
   18e4c:	moveq	r3, #0
   18e50:	str	r3, [sp, #40]	; 0x28
   18e54:	add	r6, r6, #1
   18e58:	ldr	r3, [sp, #28]
   18e5c:	cmn	r3, #1
   18e60:	beq	193ec <__assert_fail@plt+0x7b98>
   18e64:	ldr	r3, [sp, #28]
   18e68:	subs	r8, r3, r6
   18e6c:	movne	r8, #1
   18e70:	cmp	r8, #0
   18e74:	beq	19400 <__assert_fail@plt+0x7bac>
   18e78:	ldr	r5, [sp, #48]	; 0x30
   18e7c:	cmp	sl, #2
   18e80:	moveq	r5, #0
   18e84:	andne	r5, r5, #1
   18e88:	ldr	r3, [sp, #60]	; 0x3c
   18e8c:	adds	r9, r3, #0
   18e90:	movne	r9, #1
   18e94:	ands	r2, r5, r9
   18e98:	str	r2, [sp, #56]	; 0x38
   18e9c:	beq	18764 <__assert_fail@plt+0x6f10>
   18ea0:	add	r4, r6, r3
   18ea4:	ldr	r2, [sp, #28]
   18ea8:	cmp	r3, #1
   18eac:	movls	r3, #0
   18eb0:	movhi	r3, #1
   18eb4:	cmn	r2, #1
   18eb8:	movne	r3, #0
   18ebc:	cmp	r3, #0
   18ec0:	beq	18ed0 <__assert_fail@plt+0x767c>
   18ec4:	ldr	r0, [sp, #52]	; 0x34
   18ec8:	bl	11674 <strlen@plt>
   18ecc:	str	r0, [sp, #28]
   18ed0:	ldr	r3, [sp, #28]
   18ed4:	cmp	r3, r4
   18ed8:	bcc	1875c <__assert_fail@plt+0x6f08>
   18edc:	ldr	r2, [sp, #60]	; 0x3c
   18ee0:	ldr	r1, [sp, #72]	; 0x48
   18ee4:	ldr	r3, [sp, #52]	; 0x34
   18ee8:	add	r0, r3, r6
   18eec:	bl	114d0 <memcmp@plt>
   18ef0:	cmp	r0, #0
   18ef4:	bne	1897c <__assert_fail@plt+0x7128>
   18ef8:	ldr	r3, [sp, #32]
   18efc:	cmp	r3, #0
   18f00:	beq	18764 <__assert_fail@plt+0x6f10>
   18f04:	mov	r8, sl
   18f08:	mov	sl, r7
   18f0c:	b	1955c <__assert_fail@plt+0x7d08>
   18f10:	mov	r8, sl
   18f14:	mov	sl, r7
   18f18:	b	1955c <__assert_fail@plt+0x7d08>
   18f1c:	cmp	sl, #2
   18f20:	strne	r8, [sp, #80]	; 0x50
   18f24:	movne	r5, #0
   18f28:	bne	18d60 <__assert_fail@plt+0x750c>
   18f2c:	ldr	r3, [sp, #32]
   18f30:	cmp	r3, #0
   18f34:	bne	19548 <__assert_fail@plt+0x7cf4>
   18f38:	ldr	r2, [sp, #76]	; 0x4c
   18f3c:	adds	r3, r7, #0
   18f40:	movne	r3, #1
   18f44:	cmp	r2, #0
   18f48:	movne	r3, #0
   18f4c:	cmp	r3, #0
   18f50:	movne	r3, #0
   18f54:	bne	18f84 <__assert_fail@plt+0x7730>
   18f58:	cmp	r7, fp
   18f5c:	ldrhi	r3, [sp, #36]	; 0x24
   18f60:	movhi	r2, #39	; 0x27
   18f64:	strbhi	r2, [r3, fp]
   18f68:	add	r3, fp, #1
   18f6c:	cmp	r7, r3
   18f70:	ldrhi	r2, [sp, #36]	; 0x24
   18f74:	movhi	r1, #92	; 0x5c
   18f78:	strbhi	r1, [r2, r3]
   18f7c:	mov	r3, r7
   18f80:	ldr	r7, [sp, #76]	; 0x4c
   18f84:	add	r2, fp, #2
   18f88:	cmp	r2, r3
   18f8c:	ldrcc	r1, [sp, #36]	; 0x24
   18f90:	movcc	r0, #39	; 0x27
   18f94:	strbcc	r0, [r1, r2]
   18f98:	add	fp, fp, #3
   18f9c:	ldr	r2, [sp, #32]
   18fa0:	mov	r5, r2
   18fa4:	str	r8, [sp, #80]	; 0x50
   18fa8:	str	r2, [sp, #44]	; 0x2c
   18fac:	str	r7, [sp, #76]	; 0x4c
   18fb0:	mov	r7, r3
   18fb4:	b	18d60 <__assert_fail@plt+0x750c>
   18fb8:	ldr	r5, [sp, #84]	; 0x54
   18fbc:	cmp	r5, #1
   18fc0:	beq	18ff0 <__assert_fail@plt+0x779c>
   18fc4:	mov	r3, #0
   18fc8:	str	r3, [sp, #104]	; 0x68
   18fcc:	str	r3, [sp, #108]	; 0x6c
   18fd0:	ldr	r3, [sp, #28]
   18fd4:	cmn	r3, #1
   18fd8:	beq	19024 <__assert_fail@plt+0x77d0>
   18fdc:	mov	r3, #0
   18fe0:	str	r4, [sp, #88]	; 0x58
   18fe4:	str	fp, [sp, #92]	; 0x5c
   18fe8:	mov	fp, r3
   18fec:	b	1914c <__assert_fail@plt+0x78f8>
   18ff0:	bl	11644 <__ctype_b_loc@plt>
   18ff4:	ldr	r2, [r0]
   18ff8:	lsl	r3, r4, #1
   18ffc:	ldrh	r8, [r2, r3]
   19000:	lsr	r8, r8, #14
   19004:	and	r8, r8, #1
   19008:	mov	r2, r5
   1900c:	eor	r5, r8, #1
   19010:	ldr	r3, [sp, #48]	; 0x30
   19014:	and	r5, r5, r3
   19018:	ands	r5, r5, #255	; 0xff
   1901c:	beq	18d60 <__assert_fail@plt+0x750c>
   19020:	b	191e4 <__assert_fail@plt+0x7990>
   19024:	ldr	r0, [sp, #52]	; 0x34
   19028:	bl	11674 <strlen@plt>
   1902c:	str	r0, [sp, #28]
   19030:	b	18fdc <__assert_fail@plt+0x7788>
   19034:	mov	r2, fp
   19038:	mov	r1, r4
   1903c:	ldr	r4, [sp, #88]	; 0x58
   19040:	ldr	fp, [sp, #92]	; 0x5c
   19044:	ldr	r0, [sp, #28]
   19048:	cmp	r0, r5
   1904c:	bls	19218 <__assert_fail@plt+0x79c4>
   19050:	ldrb	r3, [r1]
   19054:	cmp	r3, #0
   19058:	beq	19220 <__assert_fail@plt+0x79cc>
   1905c:	mov	r3, r1
   19060:	add	r2, r2, #1
   19064:	add	r1, r6, r2
   19068:	cmp	r0, r1
   1906c:	bls	19228 <__assert_fail@plt+0x79d4>
   19070:	ldrb	r1, [r3, #1]!
   19074:	cmp	r1, #0
   19078:	bne	19060 <__assert_fail@plt+0x780c>
   1907c:	mov	r8, #0
   19080:	b	191dc <__assert_fail@plt+0x7988>
   19084:	cmp	r4, r5
   19088:	beq	19128 <__assert_fail@plt+0x78d4>
   1908c:	ldrb	r3, [r4, #1]!
   19090:	sub	r3, r3, #91	; 0x5b
   19094:	cmp	r3, #33	; 0x21
   19098:	ldrls	pc, [pc, r3, lsl #2]
   1909c:	b	19084 <__assert_fail@plt+0x7830>
   190a0:	andeq	r9, r1, r4, asr r5
   190a4:	andeq	r9, r1, r4, asr r5
   190a8:	andeq	r9, r1, r4, lsl #1
   190ac:	andeq	r9, r1, r4, asr r5
   190b0:	andeq	r9, r1, r4, lsl #1
   190b4:	andeq	r9, r1, r4, asr r5
   190b8:	andeq	r9, r1, r4, lsl #1
   190bc:	andeq	r9, r1, r4, lsl #1
   190c0:	andeq	r9, r1, r4, lsl #1
   190c4:	andeq	r9, r1, r4, lsl #1
   190c8:	andeq	r9, r1, r4, lsl #1
   190cc:	andeq	r9, r1, r4, lsl #1
   190d0:	andeq	r9, r1, r4, lsl #1
   190d4:	andeq	r9, r1, r4, lsl #1
   190d8:	andeq	r9, r1, r4, lsl #1
   190dc:	andeq	r9, r1, r4, lsl #1
   190e0:	andeq	r9, r1, r4, lsl #1
   190e4:	andeq	r9, r1, r4, lsl #1
   190e8:	andeq	r9, r1, r4, lsl #1
   190ec:	andeq	r9, r1, r4, lsl #1
   190f0:	andeq	r9, r1, r4, lsl #1
   190f4:	andeq	r9, r1, r4, lsl #1
   190f8:	andeq	r9, r1, r4, lsl #1
   190fc:	andeq	r9, r1, r4, lsl #1
   19100:	andeq	r9, r1, r4, lsl #1
   19104:	andeq	r9, r1, r4, lsl #1
   19108:	andeq	r9, r1, r4, lsl #1
   1910c:	andeq	r9, r1, r4, lsl #1
   19110:	andeq	r9, r1, r4, lsl #1
   19114:	andeq	r9, r1, r4, lsl #1
   19118:	andeq	r9, r1, r4, lsl #1
   1911c:	andeq	r9, r1, r4, lsl #1
   19120:	andeq	r9, r1, r4, lsl #1
   19124:	andeq	r9, r1, r4, asr r5
   19128:	ldr	r0, [sp, #100]	; 0x64
   1912c:	bl	11530 <iswprint@plt>
   19130:	cmp	r0, #0
   19134:	moveq	r8, #0
   19138:	add	fp, fp, r9
   1913c:	add	r0, sp, #104	; 0x68
   19140:	bl	114c4 <mbsinit@plt>
   19144:	cmp	r0, #0
   19148:	bne	191bc <__assert_fail@plt+0x7968>
   1914c:	add	r5, r6, fp
   19150:	ldr	r3, [sp, #52]	; 0x34
   19154:	add	r4, r3, r5
   19158:	add	r3, sp, #104	; 0x68
   1915c:	ldr	r2, [sp, #28]
   19160:	sub	r2, r2, r5
   19164:	mov	r1, r4
   19168:	add	r0, sp, #100	; 0x64
   1916c:	bl	1bf1c <__assert_fail@plt+0xa6c8>
   19170:	subs	r9, r0, #0
   19174:	beq	19230 <__assert_fail@plt+0x79dc>
   19178:	cmn	r9, #1
   1917c:	beq	191cc <__assert_fail@plt+0x7978>
   19180:	cmn	r9, #2
   19184:	beq	19034 <__assert_fail@plt+0x77e0>
   19188:	ldr	r3, [sp, #32]
   1918c:	cmp	sl, #2
   19190:	movne	r3, #0
   19194:	andeq	r3, r3, #1
   19198:	cmp	r3, #0
   1919c:	beq	19128 <__assert_fail@plt+0x78d4>
   191a0:	cmp	r9, #1
   191a4:	bls	19128 <__assert_fail@plt+0x78d4>
   191a8:	sub	r3, r9, #1
   191ac:	add	r5, r3, r5
   191b0:	ldr	r3, [sp, #52]	; 0x34
   191b4:	add	r5, r3, r5
   191b8:	b	1908c <__assert_fail@plt+0x7838>
   191bc:	ldr	r4, [sp, #88]	; 0x58
   191c0:	mov	r2, fp
   191c4:	ldr	fp, [sp, #92]	; 0x5c
   191c8:	b	191dc <__assert_fail@plt+0x7988>
   191cc:	ldr	r4, [sp, #88]	; 0x58
   191d0:	mov	r2, fp
   191d4:	ldr	fp, [sp, #92]	; 0x5c
   191d8:	mov	r8, #0
   191dc:	cmp	r2, #1
   191e0:	bls	1900c <__assert_fail@plt+0x77b8>
   191e4:	add	r1, r6, r2
   191e8:	ldr	ip, [sp, #64]	; 0x40
   191ec:	mov	r5, #0
   191f0:	eor	r3, r8, #1
   191f4:	ldr	r2, [sp, #48]	; 0x30
   191f8:	and	r3, r3, r2
   191fc:	uxtb	r3, r3
   19200:	ldr	r9, [sp, #32]
   19204:	ldr	lr, [sp, #44]	; 0x2c
   19208:	ldr	r2, [sp, #56]	; 0x38
   1920c:	str	r8, [sp, #56]	; 0x38
   19210:	ldr	r0, [sp, #36]	; 0x24
   19214:	b	192b0 <__assert_fail@plt+0x7a5c>
   19218:	mov	r8, #0
   1921c:	b	191dc <__assert_fail@plt+0x7988>
   19220:	mov	r8, #0
   19224:	b	191dc <__assert_fail@plt+0x7988>
   19228:	mov	r8, #0
   1922c:	b	191dc <__assert_fail@plt+0x7988>
   19230:	ldr	r4, [sp, #88]	; 0x58
   19234:	mov	r2, fp
   19238:	ldr	fp, [sp, #92]	; 0x5c
   1923c:	b	191dc <__assert_fail@plt+0x7988>
   19240:	cmp	r2, #0
   19244:	beq	19258 <__assert_fail@plt+0x7a04>
   19248:	cmp	r7, fp
   1924c:	movhi	r2, #92	; 0x5c
   19250:	strbhi	r2, [r0, fp]
   19254:	add	fp, fp, #1
   19258:	add	r8, r6, #1
   1925c:	cmp	r1, r8
   19260:	bls	19368 <__assert_fail@plt+0x7b14>
   19264:	eor	r2, r5, #1
   19268:	and	r2, r2, lr
   1926c:	ands	r2, r2, #255	; 0xff
   19270:	beq	19384 <__assert_fail@plt+0x7b30>
   19274:	cmp	r7, fp
   19278:	movhi	r2, #39	; 0x27
   1927c:	strbhi	r2, [r0, fp]
   19280:	add	r2, fp, #1
   19284:	cmp	r7, r2
   19288:	movhi	lr, #39	; 0x27
   1928c:	strbhi	lr, [r0, r2]
   19290:	add	fp, fp, #2
   19294:	mov	r6, r8
   19298:	mov	r2, r3
   1929c:	mov	lr, r3
   192a0:	cmp	r7, fp
   192a4:	strbhi	r4, [r0, fp]
   192a8:	add	fp, fp, #1
   192ac:	ldrb	r4, [ip, #1]!
   192b0:	cmp	r3, #0
   192b4:	beq	19240 <__assert_fail@plt+0x79ec>
   192b8:	cmp	r9, #0
   192bc:	bne	195c0 <__assert_fail@plt+0x7d6c>
   192c0:	eor	r5, lr, #1
   192c4:	cmp	sl, #2
   192c8:	movne	r5, #0
   192cc:	andeq	r5, r5, #1
   192d0:	cmp	r5, #0
   192d4:	beq	1930c <__assert_fail@plt+0x7ab8>
   192d8:	cmp	r7, fp
   192dc:	movhi	lr, #39	; 0x27
   192e0:	strbhi	lr, [r0, fp]
   192e4:	add	lr, fp, #1
   192e8:	cmp	r7, lr
   192ec:	movhi	r8, #36	; 0x24
   192f0:	strbhi	r8, [r0, lr]
   192f4:	add	lr, fp, #2
   192f8:	cmp	r7, lr
   192fc:	movhi	r8, #39	; 0x27
   19300:	strbhi	r8, [r0, lr]
   19304:	add	fp, fp, #3
   19308:	mov	lr, r5
   1930c:	cmp	r7, fp
   19310:	movhi	r5, #92	; 0x5c
   19314:	strbhi	r5, [r0, fp]
   19318:	add	r5, fp, #1
   1931c:	cmp	r7, r5
   19320:	lsrhi	r8, r4, #6
   19324:	addhi	r8, r8, #48	; 0x30
   19328:	strbhi	r8, [r0, r5]
   1932c:	add	r8, fp, #2
   19330:	cmp	r7, r8
   19334:	lsrhi	r5, r4, #3
   19338:	andhi	r5, r5, #7
   1933c:	addhi	r5, r5, #48	; 0x30
   19340:	strbhi	r5, [r0, r8]
   19344:	add	fp, fp, #3
   19348:	and	r4, r4, #7
   1934c:	add	r4, r4, #48	; 0x30
   19350:	add	r5, r6, #1
   19354:	cmp	r1, r5
   19358:	bls	19374 <__assert_fail@plt+0x7b20>
   1935c:	mov	r6, r5
   19360:	mov	r5, r3
   19364:	b	192a0 <__assert_fail@plt+0x7a4c>
   19368:	str	lr, [sp, #44]	; 0x2c
   1936c:	ldr	r8, [sp, #56]	; 0x38
   19370:	b	18c44 <__assert_fail@plt+0x73f0>
   19374:	str	lr, [sp, #44]	; 0x2c
   19378:	ldr	r8, [sp, #56]	; 0x38
   1937c:	mov	r5, r3
   19380:	b	18c44 <__assert_fail@plt+0x73f0>
   19384:	mov	r6, r8
   19388:	b	192a0 <__assert_fail@plt+0x7a4c>
   1938c:	mov	r5, #0
   19390:	b	18d60 <__assert_fail@plt+0x750c>
   19394:	mov	r8, r5
   19398:	ldr	r5, [sp, #48]	; 0x30
   1939c:	mov	r4, #48	; 0x30
   193a0:	b	18d60 <__assert_fail@plt+0x750c>
   193a4:	ldr	r8, [sp, #32]
   193a8:	mov	r4, #48	; 0x30
   193ac:	b	18d60 <__assert_fail@plt+0x750c>
   193b0:	ldr	r8, [sp, #32]
   193b4:	mov	r4, #48	; 0x30
   193b8:	b	18d60 <__assert_fail@plt+0x750c>
   193bc:	mov	r8, #0
   193c0:	mov	r5, r8
   193c4:	b	18d60 <__assert_fail@plt+0x750c>
   193c8:	mov	r8, #0
   193cc:	mov	r5, r8
   193d0:	b	18d60 <__assert_fail@plt+0x750c>
   193d4:	mov	r8, #0
   193d8:	mov	r5, r8
   193dc:	b	18d60 <__assert_fail@plt+0x750c>
   193e0:	mov	r8, #0
   193e4:	mov	r5, r8
   193e8:	b	18d60 <__assert_fail@plt+0x750c>
   193ec:	ldr	r3, [sp, #52]	; 0x34
   193f0:	ldrb	r8, [r3, r6]
   193f4:	adds	r8, r8, #0
   193f8:	movne	r8, #1
   193fc:	b	18e70 <__assert_fail@plt+0x761c>
   19400:	cmp	sl, #2
   19404:	movne	r3, #0
   19408:	moveq	r3, #1
   1940c:	ldr	r1, [sp, #32]
   19410:	mov	r2, r1
   19414:	and	r2, r2, r3
   19418:	cmp	fp, #0
   1941c:	movne	r2, #0
   19420:	andeq	r2, r2, #1
   19424:	cmp	r2, #0
   19428:	bne	195d8 <__assert_fail@plt+0x7d84>
   1942c:	eor	r2, r1, #1
   19430:	and	r3, r3, r2
   19434:	ldr	r1, [sp, #80]	; 0x50
   19438:	tst	r1, r3
   1943c:	beq	194b4 <__assert_fail@plt+0x7c60>
   19440:	ldr	r3, [sp, #40]	; 0x28
   19444:	cmp	r3, #0
   19448:	bne	19470 <__assert_fail@plt+0x7c1c>
   1944c:	ldr	r1, [sp, #76]	; 0x4c
   19450:	clz	r3, r7
   19454:	lsr	r3, r3, #5
   19458:	cmp	r1, #0
   1945c:	moveq	r3, #0
   19460:	cmp	r3, #0
   19464:	beq	194b4 <__assert_fail@plt+0x7c60>
   19468:	ldr	r7, [sp, #76]	; 0x4c
   1946c:	b	18504 <__assert_fail@plt+0x6cb0>
   19470:	ldr	r3, [sp, #168]	; 0xa8
   19474:	str	r3, [sp, #16]
   19478:	ldr	r3, [sp, #164]	; 0xa4
   1947c:	str	r3, [sp, #12]
   19480:	ldr	r3, [sp, #160]	; 0xa0
   19484:	str	r3, [sp, #8]
   19488:	ldr	r3, [sp, #156]	; 0x9c
   1948c:	str	r3, [sp, #4]
   19490:	mov	r3, #5
   19494:	str	r3, [sp]
   19498:	ldr	r3, [sp, #28]
   1949c:	ldr	r2, [sp, #52]	; 0x34
   194a0:	ldr	r1, [sp, #76]	; 0x4c
   194a4:	ldr	r0, [sp, #36]	; 0x24
   194a8:	bl	184a4 <__assert_fail@plt+0x6c50>
   194ac:	mov	fp, r0
   194b0:	b	195b4 <__assert_fail@plt+0x7d60>
   194b4:	mov	sl, r7
   194b8:	ldr	r3, [sp, #72]	; 0x48
   194bc:	cmp	r3, #0
   194c0:	moveq	r2, #0
   194c4:	andne	r2, r2, #1
   194c8:	cmp	r2, #0
   194cc:	beq	194fc <__assert_fail@plt+0x7ca8>
   194d0:	mov	r2, r3
   194d4:	ldrb	r3, [r3]
   194d8:	cmp	r3, #0
   194dc:	beq	194fc <__assert_fail@plt+0x7ca8>
   194e0:	ldr	r1, [sp, #36]	; 0x24
   194e4:	cmp	sl, fp
   194e8:	strbhi	r3, [r1, fp]
   194ec:	add	fp, fp, #1
   194f0:	ldrb	r3, [r2, #1]!
   194f4:	cmp	r3, #0
   194f8:	bne	194e4 <__assert_fail@plt+0x7c90>
   194fc:	cmp	sl, fp
   19500:	movhi	r3, #0
   19504:	ldrhi	r2, [sp, #36]	; 0x24
   19508:	strbhi	r3, [r2, fp]
   1950c:	b	195b4 <__assert_fail@plt+0x7d60>
   19510:	mov	r8, sl
   19514:	mov	sl, r7
   19518:	ldr	r3, [sp, #32]
   1951c:	str	r3, [sp, #48]	; 0x30
   19520:	b	1955c <__assert_fail@plt+0x7d08>
   19524:	mov	r8, sl
   19528:	mov	sl, r7
   1952c:	b	1955c <__assert_fail@plt+0x7d08>
   19530:	mov	r8, sl
   19534:	mov	sl, r7
   19538:	b	1955c <__assert_fail@plt+0x7d08>
   1953c:	andeq	lr, r1, r4, ror #18
   19540:	andeq	lr, r1, r4, ror r9
   19544:	andeq	lr, r1, r8, ror #18
   19548:	mov	r8, sl
   1954c:	mov	sl, r7
   19550:	b	1955c <__assert_fail@plt+0x7d08>
   19554:	mov	r8, sl
   19558:	mov	sl, r7
   1955c:	ldr	r3, [sp, #48]	; 0x30
   19560:	cmp	r8, #2
   19564:	movne	r3, #0
   19568:	andeq	r3, r3, #1
   1956c:	cmp	r3, #0
   19570:	movne	r8, #4
   19574:	ldr	r3, [sp, #168]	; 0xa8
   19578:	str	r3, [sp, #16]
   1957c:	ldr	r3, [sp, #164]	; 0xa4
   19580:	str	r3, [sp, #12]
   19584:	mov	r3, #0
   19588:	str	r3, [sp, #8]
   1958c:	ldr	r3, [sp, #156]	; 0x9c
   19590:	bic	r3, r3, #2
   19594:	str	r3, [sp, #4]
   19598:	str	r8, [sp]
   1959c:	ldr	r3, [sp, #28]
   195a0:	ldr	r2, [sp, #52]	; 0x34
   195a4:	mov	r1, sl
   195a8:	ldr	r0, [sp, #36]	; 0x24
   195ac:	bl	184a4 <__assert_fail@plt+0x6c50>
   195b0:	mov	fp, r0
   195b4:	mov	r0, fp
   195b8:	add	sp, sp, #116	; 0x74
   195bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   195c0:	mov	r8, sl
   195c4:	mov	sl, r7
   195c8:	b	1955c <__assert_fail@plt+0x7d08>
   195cc:	mov	r8, sl
   195d0:	mov	sl, r7
   195d4:	b	1955c <__assert_fail@plt+0x7d08>
   195d8:	mov	r8, sl
   195dc:	mov	sl, r7
   195e0:	b	1955c <__assert_fail@plt+0x7d08>
   195e4:	mov	r8, sl
   195e8:	mov	sl, r7
   195ec:	b	19574 <__assert_fail@plt+0x7d20>
   195f0:	mov	r3, #1
   195f4:	str	r3, [sp, #32]
   195f8:	str	r3, [sp, #48]	; 0x30
   195fc:	str	r3, [sp, #60]	; 0x3c
   19600:	ldr	r3, [pc, #-196]	; 19544 <__assert_fail@plt+0x7cf0>
   19604:	str	r3, [sp, #72]	; 0x48
   19608:	mov	fp, #0
   1960c:	mov	sl, #5
   19610:	b	18560 <__assert_fail@plt+0x6d0c>
   19614:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19618:	sub	sp, sp, #52	; 0x34
   1961c:	mov	r5, r0
   19620:	str	r1, [sp, #24]
   19624:	str	r2, [sp, #28]
   19628:	mov	r4, r3
   1962c:	bl	116b0 <__errno_location@plt>
   19630:	str	r0, [sp, #32]
   19634:	ldr	r3, [r0]
   19638:	str	r3, [sp, #36]	; 0x24
   1963c:	ldr	r3, [pc, #396]	; 197d0 <__assert_fail@plt+0x7f7c>
   19640:	ldr	r6, [r3]
   19644:	cmn	r5, #-2147483647	; 0x80000001
   19648:	movne	r3, #0
   1964c:	moveq	r3, #1
   19650:	orrs	r3, r3, r5, lsr #31
   19654:	bne	19794 <__assert_fail@plt+0x7f40>
   19658:	ldr	r3, [pc, #368]	; 197d0 <__assert_fail@plt+0x7f7c>
   1965c:	ldr	r2, [r3, #4]
   19660:	cmp	r5, r2
   19664:	blt	196cc <__assert_fail@plt+0x7e78>
   19668:	str	r2, [sp, #44]	; 0x2c
   1966c:	add	r3, r3, #8
   19670:	cmp	r6, r3
   19674:	beq	19798 <__assert_fail@plt+0x7f44>
   19678:	sub	r2, r5, r2
   1967c:	mov	r3, #8
   19680:	str	r3, [sp]
   19684:	mvn	r3, #-2147483648	; 0x80000000
   19688:	add	r2, r2, #1
   1968c:	add	r1, sp, #44	; 0x2c
   19690:	mov	r0, r6
   19694:	bl	1ab48 <__assert_fail@plt+0x92f4>
   19698:	mov	r6, r0
   1969c:	ldr	r3, [pc, #300]	; 197d0 <__assert_fail@plt+0x7f7c>
   196a0:	str	r0, [r3]
   196a4:	ldr	r7, [pc, #292]	; 197d0 <__assert_fail@plt+0x7f7c>
   196a8:	ldr	r0, [r7, #4]
   196ac:	ldr	r2, [sp, #44]	; 0x2c
   196b0:	sub	r2, r2, r0
   196b4:	lsl	r2, r2, #3
   196b8:	mov	r1, #0
   196bc:	add	r0, r6, r0, lsl #3
   196c0:	bl	116e0 <memset@plt>
   196c4:	ldr	r3, [sp, #44]	; 0x2c
   196c8:	str	r3, [r7, #4]
   196cc:	add	fp, r6, r5, lsl #3
   196d0:	ldr	r8, [r6, r5, lsl #3]
   196d4:	ldr	r7, [fp, #4]
   196d8:	ldr	r9, [r4, #4]
   196dc:	orr	r9, r9, #1
   196e0:	add	sl, r4, #8
   196e4:	ldr	r3, [r4, #44]	; 0x2c
   196e8:	str	r3, [sp, #16]
   196ec:	ldr	r3, [r4, #40]	; 0x28
   196f0:	str	r3, [sp, #12]
   196f4:	str	sl, [sp, #8]
   196f8:	str	r9, [sp, #4]
   196fc:	ldr	r3, [r4]
   19700:	str	r3, [sp]
   19704:	ldr	r3, [sp, #28]
   19708:	ldr	r2, [sp, #24]
   1970c:	mov	r1, r8
   19710:	mov	r0, r7
   19714:	bl	184a4 <__assert_fail@plt+0x6c50>
   19718:	cmp	r8, r0
   1971c:	bhi	1977c <__assert_fail@plt+0x7f28>
   19720:	add	r8, r0, #1
   19724:	str	r8, [r6, r5, lsl #3]
   19728:	ldr	r3, [pc, #164]	; 197d4 <__assert_fail@plt+0x7f80>
   1972c:	cmp	r7, r3
   19730:	beq	1973c <__assert_fail@plt+0x7ee8>
   19734:	mov	r0, r7
   19738:	bl	15c58 <__assert_fail@plt+0x4404>
   1973c:	mov	r0, r8
   19740:	bl	1a9c4 <__assert_fail@plt+0x9170>
   19744:	mov	r7, r0
   19748:	str	r0, [fp, #4]
   1974c:	ldr	r3, [r4, #44]	; 0x2c
   19750:	str	r3, [sp, #16]
   19754:	ldr	r3, [r4, #40]	; 0x28
   19758:	str	r3, [sp, #12]
   1975c:	str	sl, [sp, #8]
   19760:	str	r9, [sp, #4]
   19764:	ldr	r3, [r4]
   19768:	str	r3, [sp]
   1976c:	ldr	r3, [sp, #28]
   19770:	ldr	r2, [sp, #24]
   19774:	mov	r1, r8
   19778:	bl	184a4 <__assert_fail@plt+0x6c50>
   1977c:	ldr	r3, [sp, #32]
   19780:	ldr	r2, [sp, #36]	; 0x24
   19784:	str	r2, [r3]
   19788:	mov	r0, r7
   1978c:	add	sp, sp, #52	; 0x34
   19790:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19794:	bl	11824 <abort@plt>
   19798:	sub	r2, r5, r2
   1979c:	mov	r3, #8
   197a0:	str	r3, [sp]
   197a4:	mvn	r3, #-2147483648	; 0x80000000
   197a8:	add	r2, r2, #1
   197ac:	add	r1, sp, #44	; 0x2c
   197b0:	mov	r0, #0
   197b4:	bl	1ab48 <__assert_fail@plt+0x92f4>
   197b8:	mov	r6, r0
   197bc:	ldr	r3, [pc, #12]	; 197d0 <__assert_fail@plt+0x7f7c>
   197c0:	str	r0, [r3], #8
   197c4:	ldm	r3, {r0, r1}
   197c8:	stm	r6, {r0, r1}
   197cc:	b	196a4 <__assert_fail@plt+0x7e50>
   197d0:	muleq	r2, r4, r1
   197d4:	andeq	pc, r2, ip, ror r2	; <UNPREDICTABLE>
   197d8:	push	{r4, r5, r6, lr}
   197dc:	mov	r4, r0
   197e0:	bl	116b0 <__errno_location@plt>
   197e4:	mov	r5, r0
   197e8:	ldr	r6, [r0]
   197ec:	cmp	r4, #0
   197f0:	ldr	r3, [pc, #20]	; 1980c <__assert_fail@plt+0x7fb8>
   197f4:	moveq	r4, r3
   197f8:	mov	r1, #48	; 0x30
   197fc:	mov	r0, r4
   19800:	bl	1aeb0 <__assert_fail@plt+0x965c>
   19804:	str	r6, [r5]
   19808:	pop	{r4, r5, r6, pc}
   1980c:	andeq	pc, r2, ip, ror r3	; <UNPREDICTABLE>
   19810:	subs	r3, r0, #0
   19814:	ldr	r2, [pc, #8]	; 19824 <__assert_fail@plt+0x7fd0>
   19818:	moveq	r3, r2
   1981c:	ldr	r0, [r3]
   19820:	bx	lr
   19824:	andeq	pc, r2, ip, ror r3	; <UNPREDICTABLE>
   19828:	subs	r3, r0, #0
   1982c:	ldr	r2, [pc, #8]	; 1983c <__assert_fail@plt+0x7fe8>
   19830:	moveq	r3, r2
   19834:	str	r1, [r3]
   19838:	bx	lr
   1983c:	andeq	pc, r2, ip, ror r3	; <UNPREDICTABLE>
   19840:	push	{lr}		; (str lr, [sp, #-4]!)
   19844:	subs	r3, r0, #0
   19848:	ldr	r0, [pc, #44]	; 1987c <__assert_fail@plt+0x8028>
   1984c:	moveq	r3, r0
   19850:	add	r3, r3, #8
   19854:	lsr	lr, r1, #5
   19858:	and	r1, r1, #31
   1985c:	ldr	ip, [r3, lr, lsl #2]
   19860:	lsr	r0, ip, r1
   19864:	eor	r2, r2, r0
   19868:	and	r2, r2, #1
   1986c:	eor	r1, ip, r2, lsl r1
   19870:	str	r1, [r3, lr, lsl #2]
   19874:	and	r0, r0, #1
   19878:	pop	{pc}		; (ldr pc, [sp], #4)
   1987c:	andeq	pc, r2, ip, ror r3	; <UNPREDICTABLE>
   19880:	subs	r3, r0, #0
   19884:	ldr	r2, [pc, #12]	; 19898 <__assert_fail@plt+0x8044>
   19888:	moveq	r3, r2
   1988c:	ldr	r0, [r3, #4]
   19890:	str	r1, [r3, #4]
   19894:	bx	lr
   19898:	andeq	pc, r2, ip, ror r3	; <UNPREDICTABLE>
   1989c:	subs	r3, r0, #0
   198a0:	ldr	r0, [pc, #40]	; 198d0 <__assert_fail@plt+0x807c>
   198a4:	moveq	r3, r0
   198a8:	mov	r0, #10
   198ac:	str	r0, [r3]
   198b0:	cmp	r2, #0
   198b4:	cmpne	r1, #0
   198b8:	beq	198c8 <__assert_fail@plt+0x8074>
   198bc:	str	r1, [r3, #40]	; 0x28
   198c0:	str	r2, [r3, #44]	; 0x2c
   198c4:	bx	lr
   198c8:	push	{r4, lr}
   198cc:	bl	11824 <abort@plt>
   198d0:	andeq	pc, r2, ip, ror r3	; <UNPREDICTABLE>
   198d4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   198d8:	sub	sp, sp, #24
   198dc:	mov	r7, r0
   198e0:	mov	r8, r1
   198e4:	mov	r9, r2
   198e8:	mov	sl, r3
   198ec:	ldr	r4, [sp, #56]	; 0x38
   198f0:	cmp	r4, #0
   198f4:	ldr	r3, [pc, #84]	; 19950 <__assert_fail@plt+0x80fc>
   198f8:	moveq	r4, r3
   198fc:	bl	116b0 <__errno_location@plt>
   19900:	mov	r5, r0
   19904:	ldr	r6, [r0]
   19908:	ldr	r3, [r4, #44]	; 0x2c
   1990c:	str	r3, [sp, #16]
   19910:	ldr	r3, [r4, #40]	; 0x28
   19914:	str	r3, [sp, #12]
   19918:	add	r3, r4, #8
   1991c:	str	r3, [sp, #8]
   19920:	ldr	r3, [r4, #4]
   19924:	str	r3, [sp, #4]
   19928:	ldr	r3, [r4]
   1992c:	str	r3, [sp]
   19930:	mov	r3, sl
   19934:	mov	r2, r9
   19938:	mov	r1, r8
   1993c:	mov	r0, r7
   19940:	bl	184a4 <__assert_fail@plt+0x6c50>
   19944:	str	r6, [r5]
   19948:	add	sp, sp, #24
   1994c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19950:	andeq	pc, r2, ip, ror r3	; <UNPREDICTABLE>
   19954:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19958:	sub	sp, sp, #44	; 0x2c
   1995c:	str	r0, [sp, #28]
   19960:	str	r1, [sp, #32]
   19964:	mov	r6, r2
   19968:	subs	r4, r3, #0
   1996c:	ldr	r3, [pc, #172]	; 19a20 <__assert_fail@plt+0x81cc>
   19970:	moveq	r4, r3
   19974:	bl	116b0 <__errno_location@plt>
   19978:	mov	r7, r0
   1997c:	ldr	fp, [r0]
   19980:	ldr	r5, [r4, #4]
   19984:	cmp	r6, #0
   19988:	orreq	r5, r5, #1
   1998c:	add	r9, r4, #8
   19990:	ldr	r3, [r4, #44]	; 0x2c
   19994:	str	r3, [sp, #16]
   19998:	ldr	r3, [r4, #40]	; 0x28
   1999c:	str	r3, [sp, #12]
   199a0:	str	r9, [sp, #8]
   199a4:	str	r5, [sp, #4]
   199a8:	ldr	r3, [r4]
   199ac:	str	r3, [sp]
   199b0:	ldr	r3, [sp, #32]
   199b4:	ldr	r2, [sp, #28]
   199b8:	mov	r1, #0
   199bc:	mov	r0, r1
   199c0:	bl	184a4 <__assert_fail@plt+0x6c50>
   199c4:	mov	sl, r0
   199c8:	add	r8, r0, #1
   199cc:	mov	r0, r8
   199d0:	bl	1a9c4 <__assert_fail@plt+0x9170>
   199d4:	str	r0, [sp, #36]	; 0x24
   199d8:	ldr	r3, [r4, #44]	; 0x2c
   199dc:	str	r3, [sp, #16]
   199e0:	ldr	r3, [r4, #40]	; 0x28
   199e4:	str	r3, [sp, #12]
   199e8:	str	r9, [sp, #8]
   199ec:	str	r5, [sp, #4]
   199f0:	ldr	r3, [r4]
   199f4:	str	r3, [sp]
   199f8:	ldr	r3, [sp, #32]
   199fc:	ldr	r2, [sp, #28]
   19a00:	mov	r1, r8
   19a04:	bl	184a4 <__assert_fail@plt+0x6c50>
   19a08:	str	fp, [r7]
   19a0c:	cmp	r6, #0
   19a10:	strne	sl, [r6]
   19a14:	ldr	r0, [sp, #36]	; 0x24
   19a18:	add	sp, sp, #44	; 0x2c
   19a1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19a20:	andeq	pc, r2, ip, ror r3	; <UNPREDICTABLE>
   19a24:	push	{r4, lr}
   19a28:	mov	r3, r2
   19a2c:	mov	r2, #0
   19a30:	bl	19954 <__assert_fail@plt+0x8100>
   19a34:	pop	{r4, pc}
   19a38:	push	{r4, r5, r6, r7, r8, lr}
   19a3c:	ldr	r3, [pc, #140]	; 19ad0 <__assert_fail@plt+0x827c>
   19a40:	ldr	r7, [r3]
   19a44:	ldr	r3, [r3, #4]
   19a48:	cmp	r3, #1
   19a4c:	ble	19a78 <__assert_fail@plt+0x8224>
   19a50:	mov	r5, r7
   19a54:	mov	r4, #1
   19a58:	ldr	r6, [pc, #112]	; 19ad0 <__assert_fail@plt+0x827c>
   19a5c:	ldr	r0, [r5, #12]
   19a60:	bl	15c58 <__assert_fail@plt+0x4404>
   19a64:	add	r4, r4, #1
   19a68:	add	r5, r5, #8
   19a6c:	ldr	r3, [r6, #4]
   19a70:	cmp	r3, r4
   19a74:	bgt	19a5c <__assert_fail@plt+0x8208>
   19a78:	ldr	r0, [r7, #4]
   19a7c:	ldr	r3, [pc, #80]	; 19ad4 <__assert_fail@plt+0x8280>
   19a80:	cmp	r0, r3
   19a84:	beq	19aa0 <__assert_fail@plt+0x824c>
   19a88:	bl	15c58 <__assert_fail@plt+0x4404>
   19a8c:	ldr	r3, [pc, #60]	; 19ad0 <__assert_fail@plt+0x827c>
   19a90:	mov	r2, #256	; 0x100
   19a94:	str	r2, [r3, #8]
   19a98:	ldr	r2, [pc, #52]	; 19ad4 <__assert_fail@plt+0x8280>
   19a9c:	str	r2, [r3, #12]
   19aa0:	ldr	r3, [pc, #48]	; 19ad8 <__assert_fail@plt+0x8284>
   19aa4:	cmp	r7, r3
   19aa8:	beq	19ac0 <__assert_fail@plt+0x826c>
   19aac:	mov	r0, r7
   19ab0:	bl	15c58 <__assert_fail@plt+0x4404>
   19ab4:	ldr	r3, [pc, #20]	; 19ad0 <__assert_fail@plt+0x827c>
   19ab8:	add	r2, r3, #8
   19abc:	str	r2, [r3]
   19ac0:	mov	r2, #1
   19ac4:	ldr	r3, [pc, #4]	; 19ad0 <__assert_fail@plt+0x827c>
   19ac8:	str	r2, [r3, #4]
   19acc:	pop	{r4, r5, r6, r7, r8, pc}
   19ad0:	muleq	r2, r4, r1
   19ad4:	andeq	pc, r2, ip, ror r2	; <UNPREDICTABLE>
   19ad8:	muleq	r2, ip, r1
   19adc:	push	{r4, lr}
   19ae0:	ldr	r3, [pc, #8]	; 19af0 <__assert_fail@plt+0x829c>
   19ae4:	mvn	r2, #0
   19ae8:	bl	19614 <__assert_fail@plt+0x7dc0>
   19aec:	pop	{r4, pc}
   19af0:	andeq	pc, r2, ip, ror r3	; <UNPREDICTABLE>
   19af4:	push	{r4, lr}
   19af8:	ldr	r3, [pc, #4]	; 19b04 <__assert_fail@plt+0x82b0>
   19afc:	bl	19614 <__assert_fail@plt+0x7dc0>
   19b00:	pop	{r4, pc}
   19b04:	andeq	pc, r2, ip, ror r3	; <UNPREDICTABLE>
   19b08:	push	{r4, lr}
   19b0c:	mov	r1, r0
   19b10:	mov	r0, #0
   19b14:	bl	19adc <__assert_fail@plt+0x8288>
   19b18:	pop	{r4, pc}
   19b1c:	push	{r4, lr}
   19b20:	mov	r2, r1
   19b24:	mov	r1, r0
   19b28:	mov	r0, #0
   19b2c:	bl	19af4 <__assert_fail@plt+0x82a0>
   19b30:	pop	{r4, pc}
   19b34:	push	{r4, r5, lr}
   19b38:	sub	sp, sp, #52	; 0x34
   19b3c:	mov	r4, r0
   19b40:	mov	r5, r2
   19b44:	mov	r0, sp
   19b48:	bl	1833c <__assert_fail@plt+0x6ae8>
   19b4c:	mov	r3, sp
   19b50:	mvn	r2, #0
   19b54:	mov	r1, r5
   19b58:	mov	r0, r4
   19b5c:	bl	19614 <__assert_fail@plt+0x7dc0>
   19b60:	add	sp, sp, #52	; 0x34
   19b64:	pop	{r4, r5, pc}
   19b68:	push	{r4, r5, r6, lr}
   19b6c:	sub	sp, sp, #48	; 0x30
   19b70:	mov	r4, r0
   19b74:	mov	r5, r2
   19b78:	mov	r6, r3
   19b7c:	mov	r0, sp
   19b80:	bl	1833c <__assert_fail@plt+0x6ae8>
   19b84:	mov	r3, sp
   19b88:	mov	r2, r6
   19b8c:	mov	r1, r5
   19b90:	mov	r0, r4
   19b94:	bl	19614 <__assert_fail@plt+0x7dc0>
   19b98:	add	sp, sp, #48	; 0x30
   19b9c:	pop	{r4, r5, r6, pc}
   19ba0:	push	{r4, lr}
   19ba4:	mov	r2, r1
   19ba8:	mov	r1, r0
   19bac:	mov	r0, #0
   19bb0:	bl	19b34 <__assert_fail@plt+0x82e0>
   19bb4:	pop	{r4, pc}
   19bb8:	push	{r4, lr}
   19bbc:	mov	r3, r2
   19bc0:	mov	r2, r1
   19bc4:	mov	r1, r0
   19bc8:	mov	r0, #0
   19bcc:	bl	19b68 <__assert_fail@plt+0x8314>
   19bd0:	pop	{r4, pc}
   19bd4:	push	{r4, r5, r6, lr}
   19bd8:	sub	sp, sp, #48	; 0x30
   19bdc:	mov	r4, r0
   19be0:	mov	r5, r1
   19be4:	mov	r6, r2
   19be8:	mov	ip, sp
   19bec:	ldr	lr, [pc, #64]	; 19c34 <__assert_fail@plt+0x83e0>
   19bf0:	ldm	lr!, {r0, r1, r2, r3}
   19bf4:	stmia	ip!, {r0, r1, r2, r3}
   19bf8:	ldm	lr!, {r0, r1, r2, r3}
   19bfc:	stmia	ip!, {r0, r1, r2, r3}
   19c00:	ldm	lr, {r0, r1, r2, r3}
   19c04:	stm	ip, {r0, r1, r2, r3}
   19c08:	mov	r2, #1
   19c0c:	mov	r1, r6
   19c10:	mov	r0, sp
   19c14:	bl	19840 <__assert_fail@plt+0x7fec>
   19c18:	mov	r3, sp
   19c1c:	mov	r2, r5
   19c20:	mov	r1, r4
   19c24:	mov	r0, #0
   19c28:	bl	19614 <__assert_fail@plt+0x7dc0>
   19c2c:	add	sp, sp, #48	; 0x30
   19c30:	pop	{r4, r5, r6, pc}
   19c34:	andeq	pc, r2, ip, ror r3	; <UNPREDICTABLE>
   19c38:	push	{r4, lr}
   19c3c:	mov	r2, r1
   19c40:	mvn	r1, #0
   19c44:	bl	19bd4 <__assert_fail@plt+0x8380>
   19c48:	pop	{r4, pc}
   19c4c:	push	{r4, lr}
   19c50:	mov	r1, #58	; 0x3a
   19c54:	bl	19c38 <__assert_fail@plt+0x83e4>
   19c58:	pop	{r4, pc}
   19c5c:	push	{r4, lr}
   19c60:	mov	r2, #58	; 0x3a
   19c64:	bl	19bd4 <__assert_fail@plt+0x8380>
   19c68:	pop	{r4, pc}
   19c6c:	push	{r4, r5, lr}
   19c70:	sub	sp, sp, #100	; 0x64
   19c74:	mov	r4, r0
   19c78:	mov	r5, r2
   19c7c:	mov	r0, sp
   19c80:	bl	1833c <__assert_fail@plt+0x6ae8>
   19c84:	add	lr, sp, #48	; 0x30
   19c88:	mov	ip, sp
   19c8c:	ldm	ip!, {r0, r1, r2, r3}
   19c90:	stmia	lr!, {r0, r1, r2, r3}
   19c94:	ldm	ip!, {r0, r1, r2, r3}
   19c98:	stmia	lr!, {r0, r1, r2, r3}
   19c9c:	ldm	ip, {r0, r1, r2, r3}
   19ca0:	stm	lr, {r0, r1, r2, r3}
   19ca4:	mov	r2, #1
   19ca8:	mov	r1, #58	; 0x3a
   19cac:	add	r0, sp, #48	; 0x30
   19cb0:	bl	19840 <__assert_fail@plt+0x7fec>
   19cb4:	add	r3, sp, #48	; 0x30
   19cb8:	mvn	r2, #0
   19cbc:	mov	r1, r5
   19cc0:	mov	r0, r4
   19cc4:	bl	19614 <__assert_fail@plt+0x7dc0>
   19cc8:	add	sp, sp, #100	; 0x64
   19ccc:	pop	{r4, r5, pc}
   19cd0:	push	{r4, r5, r6, r7, lr}
   19cd4:	sub	sp, sp, #52	; 0x34
   19cd8:	mov	r4, r0
   19cdc:	mov	r6, r1
   19ce0:	mov	r7, r2
   19ce4:	mov	r5, r3
   19ce8:	mov	ip, sp
   19cec:	ldr	lr, [pc, #64]	; 19d34 <__assert_fail@plt+0x84e0>
   19cf0:	ldm	lr!, {r0, r1, r2, r3}
   19cf4:	stmia	ip!, {r0, r1, r2, r3}
   19cf8:	ldm	lr!, {r0, r1, r2, r3}
   19cfc:	stmia	ip!, {r0, r1, r2, r3}
   19d00:	ldm	lr, {r0, r1, r2, r3}
   19d04:	stm	ip, {r0, r1, r2, r3}
   19d08:	mov	r2, r7
   19d0c:	mov	r1, r6
   19d10:	mov	r0, sp
   19d14:	bl	1989c <__assert_fail@plt+0x8048>
   19d18:	mov	r3, sp
   19d1c:	ldr	r2, [sp, #72]	; 0x48
   19d20:	mov	r1, r5
   19d24:	mov	r0, r4
   19d28:	bl	19614 <__assert_fail@plt+0x7dc0>
   19d2c:	add	sp, sp, #52	; 0x34
   19d30:	pop	{r4, r5, r6, r7, pc}
   19d34:	andeq	pc, r2, ip, ror r3	; <UNPREDICTABLE>
   19d38:	push	{lr}		; (str lr, [sp, #-4]!)
   19d3c:	sub	sp, sp, #12
   19d40:	mvn	ip, #0
   19d44:	str	ip, [sp]
   19d48:	bl	19cd0 <__assert_fail@plt+0x847c>
   19d4c:	add	sp, sp, #12
   19d50:	pop	{pc}		; (ldr pc, [sp], #4)
   19d54:	push	{r4, lr}
   19d58:	mov	r3, r2
   19d5c:	mov	r2, r1
   19d60:	mov	r1, r0
   19d64:	mov	r0, #0
   19d68:	bl	19d38 <__assert_fail@plt+0x84e4>
   19d6c:	pop	{r4, pc}
   19d70:	push	{lr}		; (str lr, [sp, #-4]!)
   19d74:	sub	sp, sp, #12
   19d78:	str	r3, [sp]
   19d7c:	mov	r3, r2
   19d80:	mov	r2, r1
   19d84:	mov	r1, r0
   19d88:	mov	r0, #0
   19d8c:	bl	19cd0 <__assert_fail@plt+0x847c>
   19d90:	add	sp, sp, #12
   19d94:	pop	{pc}		; (ldr pc, [sp], #4)
   19d98:	push	{r4, lr}
   19d9c:	ldr	r3, [pc, #4]	; 19da8 <__assert_fail@plt+0x8554>
   19da0:	bl	19614 <__assert_fail@plt+0x7dc0>
   19da4:	pop	{r4, pc}
   19da8:	andeq	pc, r2, r4, lsr #3
   19dac:	push	{r4, lr}
   19db0:	mov	r2, r1
   19db4:	mov	r1, r0
   19db8:	mov	r0, #0
   19dbc:	bl	19d98 <__assert_fail@plt+0x8544>
   19dc0:	pop	{r4, pc}
   19dc4:	push	{r4, lr}
   19dc8:	mvn	r2, #0
   19dcc:	bl	19d98 <__assert_fail@plt+0x8544>
   19dd0:	pop	{r4, pc}
   19dd4:	push	{r4, lr}
   19dd8:	mov	r1, r0
   19ddc:	mov	r0, #0
   19de0:	bl	19dc4 <__assert_fail@plt+0x8570>
   19de4:	pop	{r4, pc}
   19de8:	push	{r4, lr}
   19dec:	mov	r4, r0
   19df0:	mov	r3, #0
   19df4:	str	r3, [r0, #4]
   19df8:	mov	r1, #524288	; 0x80000
   19dfc:	ldr	r0, [pc, #52]	; 19e38 <__assert_fail@plt+0x85e4>
   19e00:	bl	1bda0 <__assert_fail@plt+0xa54c>
   19e04:	str	r0, [r4]
   19e08:	cmp	r0, #0
   19e0c:	blt	19e18 <__assert_fail@plt+0x85c4>
   19e10:	mov	r0, #0
   19e14:	pop	{r4, pc}
   19e18:	mov	r1, #0
   19e1c:	mov	r0, r1
   19e20:	bl	11650 <getcwd@plt>
   19e24:	str	r0, [r4, #4]
   19e28:	cmp	r0, #0
   19e2c:	movne	r0, #0
   19e30:	mvneq	r0, #0
   19e34:	pop	{r4, pc}
   19e38:	andeq	lr, r1, r0, ror r4
   19e3c:	push	{r4, lr}
   19e40:	ldr	r3, [r0]
   19e44:	cmp	r3, #0
   19e48:	blt	19e58 <__assert_fail@plt+0x8604>
   19e4c:	mov	r0, r3
   19e50:	bl	117b8 <fchdir@plt>
   19e54:	pop	{r4, pc}
   19e58:	ldr	r0, [r0, #4]
   19e5c:	bl	1b9fc <__assert_fail@plt+0xa1a8>
   19e60:	pop	{r4, pc}
   19e64:	push	{r4, lr}
   19e68:	mov	r4, r0
   19e6c:	ldr	r0, [r0]
   19e70:	cmp	r0, #0
   19e74:	blt	19e7c <__assert_fail@plt+0x8628>
   19e78:	bl	11830 <close@plt>
   19e7c:	ldr	r0, [r4, #4]
   19e80:	bl	15c58 <__assert_fail@plt+0x4404>
   19e84:	pop	{r4, pc}
   19e88:	push	{r4, r5, r6, lr}
   19e8c:	subs	r4, r0, #0
   19e90:	beq	19ea8 <__assert_fail@plt+0x8654>
   19e94:	mov	r5, r1
   19e98:	cmp	r4, #10
   19e9c:	beq	19ebc <__assert_fail@plt+0x8668>
   19ea0:	mov	r0, r4
   19ea4:	pop	{r4, r5, r6, pc}
   19ea8:	bl	116b0 <__errno_location@plt>
   19eac:	mov	r3, #95	; 0x5f
   19eb0:	str	r3, [r0]
   19eb4:	mvn	r4, #0
   19eb8:	b	19ea0 <__assert_fail@plt+0x864c>
   19ebc:	ldr	r6, [r1]
   19ec0:	ldr	r1, [pc, #48]	; 19ef8 <__assert_fail@plt+0x86a4>
   19ec4:	mov	r0, r6
   19ec8:	bl	11464 <strcmp@plt>
   19ecc:	cmp	r0, #0
   19ed0:	bne	19ea0 <__assert_fail@plt+0x864c>
   19ed4:	mov	r0, r6
   19ed8:	bl	117dc <freecon@plt>
   19edc:	mov	r3, #0
   19ee0:	str	r3, [r5]
   19ee4:	bl	116b0 <__errno_location@plt>
   19ee8:	mov	r3, #61	; 0x3d
   19eec:	str	r3, [r0]
   19ef0:	mvn	r4, #0
   19ef4:	b	19ea0 <__assert_fail@plt+0x864c>
   19ef8:	andeq	lr, r1, r0, ror #19
   19efc:	push	{r4, lr}
   19f00:	mov	r4, r1
   19f04:	bl	11668 <getfilecon@plt>
   19f08:	mov	r1, r4
   19f0c:	bl	19e88 <__assert_fail@plt+0x8634>
   19f10:	pop	{r4, pc}
   19f14:	push	{r4, lr}
   19f18:	mov	r4, r1
   19f1c:	bl	115d8 <lgetfilecon@plt>
   19f20:	mov	r1, r4
   19f24:	bl	19e88 <__assert_fail@plt+0x8634>
   19f28:	pop	{r4, pc}
   19f2c:	push	{r4, lr}
   19f30:	mov	r4, r1
   19f34:	bl	11500 <fgetfilecon@plt>
   19f38:	mov	r1, r4
   19f3c:	bl	19e88 <__assert_fail@plt+0x8634>
   19f40:	pop	{r4, pc}
   19f44:	push	{r4, lr}
   19f48:	subs	r1, r0, #0
   19f4c:	beq	19f60 <__assert_fail@plt+0x870c>
   19f50:	mov	r2, #1
   19f54:	ldr	r0, [pc, #16]	; 19f6c <__assert_fail@plt+0x8718>
   19f58:	bl	1168c <setenv@plt>
   19f5c:	pop	{r4, pc}
   19f60:	ldr	r0, [pc, #4]	; 19f6c <__assert_fail@plt+0x8718>
   19f64:	bl	1180c <unsetenv@plt>
   19f68:	pop	{r4, pc}
   19f6c:	andeq	sp, r1, r8, ror #7
   19f70:	push	{r4, r5, r6, r7, r8, lr}
   19f74:	subs	r6, r0, #0
   19f78:	beq	19fe4 <__assert_fail@plt+0x8790>
   19f7c:	mov	r0, r6
   19f80:	bl	11674 <strlen@plt>
   19f84:	add	r7, r0, #1
   19f88:	cmp	r7, #58	; 0x3a
   19f8c:	addhi	r0, r0, #2
   19f90:	bls	1a01c <__assert_fail@plt+0x87c8>
   19f94:	add	r0, r0, #8
   19f98:	bic	r0, r0, #3
   19f9c:	bl	1b030 <__assert_fail@plt+0x97dc>
   19fa0:	subs	r4, r0, #0
   19fa4:	beq	19fdc <__assert_fail@plt+0x8788>
   19fa8:	mov	r3, #0
   19fac:	str	r3, [r4]
   19fb0:	subs	r2, r6, r3
   19fb4:	movne	r2, #1
   19fb8:	strb	r2, [r4, #4]
   19fbc:	strb	r3, [r4, #5]
   19fc0:	add	r5, r4, #5
   19fc4:	mov	r2, r7
   19fc8:	mov	r1, r6
   19fcc:	mov	r0, r5
   19fd0:	bl	114b8 <memcpy@plt>
   19fd4:	mov	r3, #0
   19fd8:	strb	r3, [r5, r7]
   19fdc:	mov	r0, r4
   19fe0:	pop	{r4, r5, r6, r7, r8, pc}
   19fe4:	mov	r0, #64	; 0x40
   19fe8:	bl	1b030 <__assert_fail@plt+0x97dc>
   19fec:	subs	r4, r0, #0
   19ff0:	beq	19fdc <__assert_fail@plt+0x8788>
   19ff4:	mov	r3, #0
   19ff8:	str	r3, [r4]
   19ffc:	cmp	r6, r3
   1a000:	movne	r2, #1
   1a004:	moveq	r2, r3
   1a008:	strb	r2, [r4, #4]
   1a00c:	strb	r3, [r4, #5]
   1a010:	beq	19fdc <__assert_fail@plt+0x8788>
   1a014:	mov	r7, r3
   1a018:	b	19fc0 <__assert_fail@plt+0x876c>
   1a01c:	mov	r0, #59	; 0x3b
   1a020:	b	19f94 <__assert_fail@plt+0x8740>
   1a024:	push	{r4, r5, r6, r7, r8, lr}
   1a028:	ldr	r6, [r1, #40]	; 0x28
   1a02c:	cmp	r6, #0
   1a030:	beq	1a12c <__assert_fail@plt+0x88d8>
   1a034:	mov	r5, r0
   1a038:	mov	r7, r1
   1a03c:	cmp	r1, r6
   1a040:	bhi	1a050 <__assert_fail@plt+0x87fc>
   1a044:	add	r3, r1, #44	; 0x2c
   1a048:	cmp	r6, r3
   1a04c:	bcc	1a134 <__assert_fail@plt+0x88e0>
   1a050:	ldrb	r3, [r6]
   1a054:	cmp	r3, #0
   1a058:	addne	r4, r5, #5
   1a05c:	bne	1a0bc <__assert_fail@plt+0x8868>
   1a060:	ldr	r4, [pc, #220]	; 1a144 <__assert_fail@plt+0x88f0>
   1a064:	str	r4, [r7, #40]	; 0x28
   1a068:	mov	r0, #1
   1a06c:	pop	{r4, r5, r6, r7, r8, pc}
   1a070:	mov	r0, r6
   1a074:	bl	19f70 <__assert_fail@plt+0x871c>
   1a078:	str	r0, [r5]
   1a07c:	cmp	r0, #0
   1a080:	beq	1a13c <__assert_fail@plt+0x88e8>
   1a084:	mov	r3, #0
   1a088:	strb	r3, [r0, #4]
   1a08c:	add	r4, r0, #5
   1a090:	b	1a064 <__assert_fail@plt+0x8810>
   1a094:	mov	r0, r4
   1a098:	bl	11674 <strlen@plt>
   1a09c:	add	r0, r0, #1
   1a0a0:	ldrb	r3, [r4, r0]!
   1a0a4:	cmp	r3, #0
   1a0a8:	bne	1a0bc <__assert_fail@plt+0x8868>
   1a0ac:	ldr	r3, [r5]
   1a0b0:	cmp	r3, #0
   1a0b4:	addne	r4, r3, #5
   1a0b8:	movne	r5, r3
   1a0bc:	mov	r1, r6
   1a0c0:	mov	r0, r4
   1a0c4:	bl	11464 <strcmp@plt>
   1a0c8:	cmp	r0, #0
   1a0cc:	beq	1a064 <__assert_fail@plt+0x8810>
   1a0d0:	ldrb	r3, [r4]
   1a0d4:	cmp	r3, #0
   1a0d8:	bne	1a094 <__assert_fail@plt+0x8840>
   1a0dc:	add	r3, r5, #5
   1a0e0:	cmp	r4, r3
   1a0e4:	bne	1a0f4 <__assert_fail@plt+0x88a0>
   1a0e8:	ldrb	r3, [r5, #4]
   1a0ec:	cmp	r3, #0
   1a0f0:	bne	1a094 <__assert_fail@plt+0x8840>
   1a0f4:	mov	r0, r6
   1a0f8:	bl	11674 <strlen@plt>
   1a0fc:	add	r8, r0, #1
   1a100:	add	r3, r5, #64	; 0x40
   1a104:	sub	r3, r3, r4
   1a108:	cmp	r8, r3
   1a10c:	bge	1a070 <__assert_fail@plt+0x881c>
   1a110:	mov	r2, r8
   1a114:	mov	r1, r6
   1a118:	mov	r0, r4
   1a11c:	bl	114b8 <memcpy@plt>
   1a120:	mov	r3, #0
   1a124:	strb	r3, [r4, r8]
   1a128:	b	1a064 <__assert_fail@plt+0x8810>
   1a12c:	mov	r0, #1
   1a130:	pop	{r4, r5, r6, r7, r8, pc}
   1a134:	mov	r0, #1
   1a138:	pop	{r4, r5, r6, r7, r8, pc}
   1a13c:	mov	r0, #0
   1a140:	pop	{r4, r5, r6, r7, r8, pc}
   1a144:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1a148:	cmp	r0, #1
   1a14c:	bxeq	lr
   1a150:	cmp	r0, #0
   1a154:	bxeq	lr
   1a158:	push	{r4, lr}
   1a15c:	ldr	r4, [r0]
   1a160:	bl	15c58 <__assert_fail@plt+0x4404>
   1a164:	mov	r0, r4
   1a168:	cmp	r4, #0
   1a16c:	bne	1a15c <__assert_fail@plt+0x8908>
   1a170:	pop	{r4, pc}
   1a174:	push	{r4, r5, r6, lr}
   1a178:	mov	r4, r0
   1a17c:	ldr	r0, [pc, #164]	; 1a228 <__assert_fail@plt+0x89d4>
   1a180:	bl	115cc <getenv@plt>
   1a184:	subs	r5, r0, #0
   1a188:	beq	1a1c4 <__assert_fail@plt+0x8970>
   1a18c:	ldrb	r3, [r4, #4]
   1a190:	cmp	r3, #0
   1a194:	moveq	r0, #0
   1a198:	beq	1a1b0 <__assert_fail@plt+0x895c>
   1a19c:	mov	r1, r5
   1a1a0:	add	r0, r4, #5
   1a1a4:	bl	11464 <strcmp@plt>
   1a1a8:	clz	r0, r0
   1a1ac:	lsr	r0, r0, #5
   1a1b0:	cmp	r0, #0
   1a1b4:	movne	r5, #1
   1a1b8:	beq	1a1d4 <__assert_fail@plt+0x8980>
   1a1bc:	mov	r0, r5
   1a1c0:	pop	{r4, r5, r6, pc}
   1a1c4:	ldrb	r0, [r4, #4]
   1a1c8:	clz	r0, r0
   1a1cc:	lsr	r0, r0, #5
   1a1d0:	b	1a1b0 <__assert_fail@plt+0x895c>
   1a1d4:	mov	r0, r5
   1a1d8:	bl	19f70 <__assert_fail@plt+0x871c>
   1a1dc:	subs	r5, r0, #0
   1a1e0:	beq	1a1bc <__assert_fail@plt+0x8968>
   1a1e4:	ldrb	r3, [r4, #4]
   1a1e8:	cmp	r3, #0
   1a1ec:	addne	r0, r4, #5
   1a1f0:	moveq	r0, #0
   1a1f4:	bl	19f44 <__assert_fail@plt+0x86f0>
   1a1f8:	cmp	r0, #0
   1a1fc:	beq	1a220 <__assert_fail@plt+0x89cc>
   1a200:	bl	116b0 <__errno_location@plt>
   1a204:	mov	r4, r0
   1a208:	ldr	r6, [r0]
   1a20c:	mov	r0, r5
   1a210:	bl	1a148 <__assert_fail@plt+0x88f4>
   1a214:	str	r6, [r4]
   1a218:	mov	r5, #0
   1a21c:	b	1a1bc <__assert_fail@plt+0x8968>
   1a220:	bl	1153c <tzset@plt>
   1a224:	b	1a1bc <__assert_fail@plt+0x8968>
   1a228:	andeq	sp, r1, r8, ror #7
   1a22c:	push	{r4, r5, r6, r7, r8, lr}
   1a230:	cmp	r0, #1
   1a234:	moveq	r7, #1
   1a238:	beq	1a27c <__assert_fail@plt+0x8a28>
   1a23c:	mov	r4, r0
   1a240:	bl	116b0 <__errno_location@plt>
   1a244:	mov	r5, r0
   1a248:	ldr	r6, [r0]
   1a24c:	ldrb	r3, [r4, #4]
   1a250:	cmp	r3, #0
   1a254:	addne	r0, r4, #5
   1a258:	moveq	r0, #0
   1a25c:	bl	19f44 <__assert_fail@plt+0x86f0>
   1a260:	cmp	r0, #0
   1a264:	beq	1a284 <__assert_fail@plt+0x8a30>
   1a268:	ldr	r6, [r5]
   1a26c:	mov	r7, #0
   1a270:	mov	r0, r4
   1a274:	bl	1a148 <__assert_fail@plt+0x88f4>
   1a278:	str	r6, [r5]
   1a27c:	mov	r0, r7
   1a280:	pop	{r4, r5, r6, r7, r8, pc}
   1a284:	bl	1153c <tzset@plt>
   1a288:	mov	r7, #1
   1a28c:	b	1a270 <__assert_fail@plt+0x8a1c>
   1a290:	push	{r4, r5, r6, r7, r8, lr}
   1a294:	mov	r6, r1
   1a298:	mov	r4, r2
   1a29c:	subs	r5, r0, #0
   1a2a0:	beq	1a2f8 <__assert_fail@plt+0x8aa4>
   1a2a4:	mov	r0, r5
   1a2a8:	bl	1a174 <__assert_fail@plt+0x8920>
   1a2ac:	subs	r7, r0, #0
   1a2b0:	beq	1a30c <__assert_fail@plt+0x8ab8>
   1a2b4:	mov	r1, r4
   1a2b8:	mov	r0, r6
   1a2bc:	bl	1150c <localtime_r@plt>
   1a2c0:	subs	r6, r0, #0
   1a2c4:	beq	1a314 <__assert_fail@plt+0x8ac0>
   1a2c8:	mov	r1, r4
   1a2cc:	mov	r0, r5
   1a2d0:	bl	1a024 <__assert_fail@plt+0x87d0>
   1a2d4:	mov	r5, r0
   1a2d8:	mov	r0, r7
   1a2dc:	bl	1a22c <__assert_fail@plt+0x89d8>
   1a2e0:	and	r0, r0, r5
   1a2e4:	uxtb	r0, r0
   1a2e8:	cmp	r0, #0
   1a2ec:	moveq	r4, #0
   1a2f0:	mov	r0, r4
   1a2f4:	pop	{r4, r5, r6, r7, r8, pc}
   1a2f8:	mov	r1, r2
   1a2fc:	mov	r0, r6
   1a300:	bl	11440 <gmtime_r@plt>
   1a304:	mov	r4, r0
   1a308:	b	1a2f0 <__assert_fail@plt+0x8a9c>
   1a30c:	mov	r4, #0
   1a310:	b	1a2f0 <__assert_fail@plt+0x8a9c>
   1a314:	mov	r0, r7
   1a318:	bl	1a22c <__assert_fail@plt+0x89d8>
   1a31c:	mov	r4, r6
   1a320:	b	1a2f0 <__assert_fail@plt+0x8a9c>
   1a324:	push	{r4, r5, r6, r7, lr}
   1a328:	sub	sp, sp, #52	; 0x34
   1a32c:	mov	r4, r1
   1a330:	subs	r5, r0, #0
   1a334:	beq	1a3f0 <__assert_fail@plt+0x8b9c>
   1a338:	mov	r0, r5
   1a33c:	bl	1a174 <__assert_fail@plt+0x8920>
   1a340:	subs	r7, r0, #0
   1a344:	beq	1a400 <__assert_fail@plt+0x8bac>
   1a348:	ldr	r3, [r4]
   1a34c:	str	r3, [sp, #4]
   1a350:	ldr	r3, [r4, #4]
   1a354:	str	r3, [sp, #8]
   1a358:	ldr	r3, [r4, #8]
   1a35c:	str	r3, [sp, #12]
   1a360:	ldr	r3, [r4, #12]
   1a364:	str	r3, [sp, #16]
   1a368:	ldr	r3, [r4, #16]
   1a36c:	str	r3, [sp, #20]
   1a370:	ldr	r3, [r4, #20]
   1a374:	str	r3, [sp, #24]
   1a378:	mvn	r3, #0
   1a37c:	str	r3, [sp, #32]
   1a380:	ldr	r3, [r4, #32]
   1a384:	str	r3, [sp, #36]	; 0x24
   1a388:	add	r0, sp, #4
   1a38c:	bl	11488 <mktime@plt>
   1a390:	mov	r6, r0
   1a394:	ldr	r3, [sp, #32]
   1a398:	cmp	r3, #0
   1a39c:	blt	1a408 <__assert_fail@plt+0x8bb4>
   1a3a0:	add	r1, sp, #4
   1a3a4:	mov	r0, r5
   1a3a8:	bl	1a024 <__assert_fail@plt+0x87d0>
   1a3ac:	mov	r5, r0
   1a3b0:	mov	r0, r7
   1a3b4:	bl	1a22c <__assert_fail@plt+0x89d8>
   1a3b8:	and	r0, r0, r5
   1a3bc:	tst	r0, #255	; 0xff
   1a3c0:	beq	1a410 <__assert_fail@plt+0x8bbc>
   1a3c4:	mov	ip, r4
   1a3c8:	add	lr, sp, #4
   1a3cc:	ldm	lr!, {r0, r1, r2, r3}
   1a3d0:	stmia	ip!, {r0, r1, r2, r3}
   1a3d4:	ldm	lr!, {r0, r1, r2, r3}
   1a3d8:	stmia	ip!, {r0, r1, r2, r3}
   1a3dc:	ldm	lr, {r0, r1, r2}
   1a3e0:	stm	ip, {r0, r1, r2}
   1a3e4:	mov	r0, r6
   1a3e8:	add	sp, sp, #52	; 0x34
   1a3ec:	pop	{r4, r5, r6, r7, pc}
   1a3f0:	mov	r0, r1
   1a3f4:	bl	117ac <timegm@plt>
   1a3f8:	mov	r6, r0
   1a3fc:	b	1a3e4 <__assert_fail@plt+0x8b90>
   1a400:	mvn	r6, #0
   1a404:	b	1a3e4 <__assert_fail@plt+0x8b90>
   1a408:	mov	r0, r7
   1a40c:	bl	1a22c <__assert_fail@plt+0x89d8>
   1a410:	mvn	r6, #0
   1a414:	b	1a3e4 <__assert_fail@plt+0x8b90>
   1a418:	push	{r4, r5, r6, lr}
   1a41c:	sub	sp, sp, #32
   1a420:	mov	r4, r0
   1a424:	ldr	r5, [sp, #48]	; 0x30
   1a428:	ldr	r6, [sp, #52]	; 0x34
   1a42c:	cmp	r1, #0
   1a430:	beq	1a4e8 <__assert_fail@plt+0x8c94>
   1a434:	str	r3, [sp, #4]
   1a438:	str	r2, [sp]
   1a43c:	mov	r3, r1
   1a440:	ldr	r2, [pc, #940]	; 1a7f4 <__assert_fail@plt+0x8fa0>
   1a444:	mov	r1, #1
   1a448:	bl	11704 <__fprintf_chk@plt>
   1a44c:	mov	r2, #5
   1a450:	ldr	r1, [pc, #928]	; 1a7f8 <__assert_fail@plt+0x8fa4>
   1a454:	mov	r0, #0
   1a458:	bl	114e8 <dcgettext@plt>
   1a45c:	ldr	r3, [pc, #920]	; 1a7fc <__assert_fail@plt+0x8fa8>
   1a460:	str	r3, [sp]
   1a464:	mov	r3, r0
   1a468:	ldr	r2, [pc, #912]	; 1a800 <__assert_fail@plt+0x8fac>
   1a46c:	mov	r1, #1
   1a470:	mov	r0, r4
   1a474:	bl	11704 <__fprintf_chk@plt>
   1a478:	mov	r1, r4
   1a47c:	mov	r0, #10
   1a480:	bl	114dc <fputc_unlocked@plt>
   1a484:	mov	r2, #5
   1a488:	ldr	r1, [pc, #884]	; 1a804 <__assert_fail@plt+0x8fb0>
   1a48c:	mov	r0, #0
   1a490:	bl	114e8 <dcgettext@plt>
   1a494:	ldr	r3, [pc, #876]	; 1a808 <__assert_fail@plt+0x8fb4>
   1a498:	mov	r2, r0
   1a49c:	mov	r1, #1
   1a4a0:	mov	r0, r4
   1a4a4:	bl	11704 <__fprintf_chk@plt>
   1a4a8:	mov	r1, r4
   1a4ac:	mov	r0, #10
   1a4b0:	bl	114dc <fputc_unlocked@plt>
   1a4b4:	cmp	r6, #9
   1a4b8:	ldrls	pc, [pc, r6, lsl #2]
   1a4bc:	b	1a78c <__assert_fail@plt+0x8f38>
   1a4c0:	andeq	sl, r1, r4, lsr #10
   1a4c4:	andeq	sl, r1, r0, lsl #10
   1a4c8:	andeq	sl, r1, ip, lsr #10
   1a4cc:	andeq	sl, r1, ip, asr r5
   1a4d0:	muleq	r1, r4, r5
   1a4d4:	ldrdeq	sl, [r1], -r4
   1a4d8:	andeq	sl, r1, ip, lsl r6
   1a4dc:	andeq	sl, r1, ip, ror #12
   1a4e0:	andeq	sl, r1, r4, asr #13
   1a4e4:	andeq	sl, r1, r4, lsr #14
   1a4e8:	str	r3, [sp]
   1a4ec:	mov	r3, r2
   1a4f0:	ldr	r2, [pc, #788]	; 1a80c <__assert_fail@plt+0x8fb8>
   1a4f4:	mov	r1, #1
   1a4f8:	bl	11704 <__fprintf_chk@plt>
   1a4fc:	b	1a44c <__assert_fail@plt+0x8bf8>
   1a500:	mov	r2, #5
   1a504:	ldr	r1, [pc, #772]	; 1a810 <__assert_fail@plt+0x8fbc>
   1a508:	mov	r0, #0
   1a50c:	bl	114e8 <dcgettext@plt>
   1a510:	ldr	r3, [r5]
   1a514:	mov	r2, r0
   1a518:	mov	r1, #1
   1a51c:	mov	r0, r4
   1a520:	bl	11704 <__fprintf_chk@plt>
   1a524:	add	sp, sp, #32
   1a528:	pop	{r4, r5, r6, pc}
   1a52c:	mov	r2, #5
   1a530:	ldr	r1, [pc, #732]	; 1a814 <__assert_fail@plt+0x8fc0>
   1a534:	mov	r0, #0
   1a538:	bl	114e8 <dcgettext@plt>
   1a53c:	ldr	r3, [r5]
   1a540:	ldr	r2, [r5, #4]
   1a544:	str	r2, [sp]
   1a548:	mov	r2, r0
   1a54c:	mov	r1, #1
   1a550:	mov	r0, r4
   1a554:	bl	11704 <__fprintf_chk@plt>
   1a558:	b	1a524 <__assert_fail@plt+0x8cd0>
   1a55c:	mov	r2, #5
   1a560:	ldr	r1, [pc, #688]	; 1a818 <__assert_fail@plt+0x8fc4>
   1a564:	mov	r0, #0
   1a568:	bl	114e8 <dcgettext@plt>
   1a56c:	ldr	r3, [r5]
   1a570:	ldr	r2, [r5, #8]
   1a574:	str	r2, [sp, #4]
   1a578:	ldr	r2, [r5, #4]
   1a57c:	str	r2, [sp]
   1a580:	mov	r2, r0
   1a584:	mov	r1, #1
   1a588:	mov	r0, r4
   1a58c:	bl	11704 <__fprintf_chk@plt>
   1a590:	b	1a524 <__assert_fail@plt+0x8cd0>
   1a594:	mov	r2, #5
   1a598:	ldr	r1, [pc, #636]	; 1a81c <__assert_fail@plt+0x8fc8>
   1a59c:	mov	r0, #0
   1a5a0:	bl	114e8 <dcgettext@plt>
   1a5a4:	ldr	r3, [r5]
   1a5a8:	ldr	r2, [r5, #12]
   1a5ac:	str	r2, [sp, #8]
   1a5b0:	ldr	r2, [r5, #8]
   1a5b4:	str	r2, [sp, #4]
   1a5b8:	ldr	r2, [r5, #4]
   1a5bc:	str	r2, [sp]
   1a5c0:	mov	r2, r0
   1a5c4:	mov	r1, #1
   1a5c8:	mov	r0, r4
   1a5cc:	bl	11704 <__fprintf_chk@plt>
   1a5d0:	b	1a524 <__assert_fail@plt+0x8cd0>
   1a5d4:	mov	r2, #5
   1a5d8:	ldr	r1, [pc, #576]	; 1a820 <__assert_fail@plt+0x8fcc>
   1a5dc:	mov	r0, #0
   1a5e0:	bl	114e8 <dcgettext@plt>
   1a5e4:	ldr	r3, [r5]
   1a5e8:	ldr	r2, [r5, #16]
   1a5ec:	str	r2, [sp, #12]
   1a5f0:	ldr	r2, [r5, #12]
   1a5f4:	str	r2, [sp, #8]
   1a5f8:	ldr	r2, [r5, #8]
   1a5fc:	str	r2, [sp, #4]
   1a600:	ldr	r2, [r5, #4]
   1a604:	str	r2, [sp]
   1a608:	mov	r2, r0
   1a60c:	mov	r1, #1
   1a610:	mov	r0, r4
   1a614:	bl	11704 <__fprintf_chk@plt>
   1a618:	b	1a524 <__assert_fail@plt+0x8cd0>
   1a61c:	mov	r2, #5
   1a620:	ldr	r1, [pc, #508]	; 1a824 <__assert_fail@plt+0x8fd0>
   1a624:	mov	r0, #0
   1a628:	bl	114e8 <dcgettext@plt>
   1a62c:	ldr	r3, [r5]
   1a630:	ldr	r2, [r5, #20]
   1a634:	str	r2, [sp, #16]
   1a638:	ldr	r2, [r5, #16]
   1a63c:	str	r2, [sp, #12]
   1a640:	ldr	r2, [r5, #12]
   1a644:	str	r2, [sp, #8]
   1a648:	ldr	r2, [r5, #8]
   1a64c:	str	r2, [sp, #4]
   1a650:	ldr	r2, [r5, #4]
   1a654:	str	r2, [sp]
   1a658:	mov	r2, r0
   1a65c:	mov	r1, #1
   1a660:	mov	r0, r4
   1a664:	bl	11704 <__fprintf_chk@plt>
   1a668:	b	1a524 <__assert_fail@plt+0x8cd0>
   1a66c:	mov	r2, #5
   1a670:	ldr	r1, [pc, #432]	; 1a828 <__assert_fail@plt+0x8fd4>
   1a674:	mov	r0, #0
   1a678:	bl	114e8 <dcgettext@plt>
   1a67c:	ldr	r3, [r5]
   1a680:	ldr	r2, [r5, #24]
   1a684:	str	r2, [sp, #20]
   1a688:	ldr	r2, [r5, #20]
   1a68c:	str	r2, [sp, #16]
   1a690:	ldr	r2, [r5, #16]
   1a694:	str	r2, [sp, #12]
   1a698:	ldr	r2, [r5, #12]
   1a69c:	str	r2, [sp, #8]
   1a6a0:	ldr	r2, [r5, #8]
   1a6a4:	str	r2, [sp, #4]
   1a6a8:	ldr	r2, [r5, #4]
   1a6ac:	str	r2, [sp]
   1a6b0:	mov	r2, r0
   1a6b4:	mov	r1, #1
   1a6b8:	mov	r0, r4
   1a6bc:	bl	11704 <__fprintf_chk@plt>
   1a6c0:	b	1a524 <__assert_fail@plt+0x8cd0>
   1a6c4:	mov	r2, #5
   1a6c8:	ldr	r1, [pc, #348]	; 1a82c <__assert_fail@plt+0x8fd8>
   1a6cc:	mov	r0, #0
   1a6d0:	bl	114e8 <dcgettext@plt>
   1a6d4:	ldr	r3, [r5]
   1a6d8:	ldr	r2, [r5, #28]
   1a6dc:	str	r2, [sp, #24]
   1a6e0:	ldr	r2, [r5, #24]
   1a6e4:	str	r2, [sp, #20]
   1a6e8:	ldr	r2, [r5, #20]
   1a6ec:	str	r2, [sp, #16]
   1a6f0:	ldr	r2, [r5, #16]
   1a6f4:	str	r2, [sp, #12]
   1a6f8:	ldr	r2, [r5, #12]
   1a6fc:	str	r2, [sp, #8]
   1a700:	ldr	r2, [r5, #8]
   1a704:	str	r2, [sp, #4]
   1a708:	ldr	r2, [r5, #4]
   1a70c:	str	r2, [sp]
   1a710:	mov	r2, r0
   1a714:	mov	r1, #1
   1a718:	mov	r0, r4
   1a71c:	bl	11704 <__fprintf_chk@plt>
   1a720:	b	1a524 <__assert_fail@plt+0x8cd0>
   1a724:	mov	r2, #5
   1a728:	ldr	r1, [pc, #256]	; 1a830 <__assert_fail@plt+0x8fdc>
   1a72c:	mov	r0, #0
   1a730:	bl	114e8 <dcgettext@plt>
   1a734:	ldr	r3, [r5]
   1a738:	ldr	r2, [r5, #32]
   1a73c:	str	r2, [sp, #28]
   1a740:	ldr	r2, [r5, #28]
   1a744:	str	r2, [sp, #24]
   1a748:	ldr	r2, [r5, #24]
   1a74c:	str	r2, [sp, #20]
   1a750:	ldr	r2, [r5, #20]
   1a754:	str	r2, [sp, #16]
   1a758:	ldr	r2, [r5, #16]
   1a75c:	str	r2, [sp, #12]
   1a760:	ldr	r2, [r5, #12]
   1a764:	str	r2, [sp, #8]
   1a768:	ldr	r2, [r5, #8]
   1a76c:	str	r2, [sp, #4]
   1a770:	ldr	r2, [r5, #4]
   1a774:	str	r2, [sp]
   1a778:	mov	r2, r0
   1a77c:	mov	r1, #1
   1a780:	mov	r0, r4
   1a784:	bl	11704 <__fprintf_chk@plt>
   1a788:	b	1a524 <__assert_fail@plt+0x8cd0>
   1a78c:	mov	r2, #5
   1a790:	ldr	r1, [pc, #156]	; 1a834 <__assert_fail@plt+0x8fe0>
   1a794:	mov	r0, #0
   1a798:	bl	114e8 <dcgettext@plt>
   1a79c:	ldr	r3, [r5]
   1a7a0:	ldr	r2, [r5, #32]
   1a7a4:	str	r2, [sp, #28]
   1a7a8:	ldr	r2, [r5, #28]
   1a7ac:	str	r2, [sp, #24]
   1a7b0:	ldr	r2, [r5, #24]
   1a7b4:	str	r2, [sp, #20]
   1a7b8:	ldr	r2, [r5, #20]
   1a7bc:	str	r2, [sp, #16]
   1a7c0:	ldr	r2, [r5, #16]
   1a7c4:	str	r2, [sp, #12]
   1a7c8:	ldr	r2, [r5, #12]
   1a7cc:	str	r2, [sp, #8]
   1a7d0:	ldr	r2, [r5, #8]
   1a7d4:	str	r2, [sp, #4]
   1a7d8:	ldr	r2, [r5, #4]
   1a7dc:	str	r2, [sp]
   1a7e0:	mov	r2, r0
   1a7e4:	mov	r1, #1
   1a7e8:	mov	r0, r4
   1a7ec:	bl	11704 <__fprintf_chk@plt>
   1a7f0:	b	1a524 <__assert_fail@plt+0x8cd0>
   1a7f4:	andeq	lr, r1, ip, ror #19
   1a7f8:	andeq	lr, r1, r0, lsl #20
   1a7fc:	andeq	r0, r0, r6, ror #15
   1a800:	ldrdeq	lr, [r1], -r8
   1a804:	andeq	lr, r1, r4, lsl #20
   1a808:			; <UNDEFINED> instruction: 0x0001eab0
   1a80c:	strdeq	lr, [r1], -r8
   1a810:	ldrdeq	lr, [r1], -r4
   1a814:	andeq	lr, r1, r4, ror #21
   1a818:	strdeq	lr, [r1], -ip
   1a81c:	andeq	lr, r1, r8, lsl fp
   1a820:	andeq	lr, r1, r8, lsr fp
   1a824:	andeq	lr, r1, ip, asr fp
   1a828:	andeq	lr, r1, r4, lsl #23
   1a82c:			; <UNDEFINED> instruction: 0x0001ebb0
   1a830:	andeq	lr, r1, r0, ror #23
   1a834:	andeq	lr, r1, r4, lsl ip
   1a838:	push	{r4, r5, lr}
   1a83c:	sub	sp, sp, #12
   1a840:	ldr	r5, [sp, #24]
   1a844:	ldr	ip, [r5]
   1a848:	cmp	ip, #0
   1a84c:	beq	1a87c <__assert_fail@plt+0x9028>
   1a850:	mov	lr, r5
   1a854:	mov	ip, #0
   1a858:	add	ip, ip, #1
   1a85c:	ldr	r4, [lr, #4]!
   1a860:	cmp	r4, #0
   1a864:	bne	1a858 <__assert_fail@plt+0x9004>
   1a868:	str	ip, [sp, #4]
   1a86c:	str	r5, [sp]
   1a870:	bl	1a418 <__assert_fail@plt+0x8bc4>
   1a874:	add	sp, sp, #12
   1a878:	pop	{r4, r5, pc}
   1a87c:	mov	ip, #0
   1a880:	b	1a868 <__assert_fail@plt+0x9014>
   1a884:	push	{r4, r5, lr}
   1a888:	sub	sp, sp, #52	; 0x34
   1a88c:	ldr	r4, [sp, #64]	; 0x40
   1a890:	sub	r4, r4, #4
   1a894:	add	r5, sp, #4
   1a898:	mov	ip, #0
   1a89c:	ldr	lr, [r4, #4]!
   1a8a0:	str	lr, [r5, #4]!
   1a8a4:	cmp	lr, #0
   1a8a8:	beq	1a8b8 <__assert_fail@plt+0x9064>
   1a8ac:	add	ip, ip, #1
   1a8b0:	cmp	ip, #10
   1a8b4:	bne	1a89c <__assert_fail@plt+0x9048>
   1a8b8:	str	ip, [sp, #4]
   1a8bc:	add	ip, sp, #8
   1a8c0:	str	ip, [sp]
   1a8c4:	bl	1a418 <__assert_fail@plt+0x8bc4>
   1a8c8:	add	sp, sp, #52	; 0x34
   1a8cc:	pop	{r4, r5, pc}
   1a8d0:	push	{r3}		; (str r3, [sp, #-4]!)
   1a8d4:	push	{lr}		; (str lr, [sp, #-4]!)
   1a8d8:	sub	sp, sp, #16
   1a8dc:	add	r3, sp, #24
   1a8e0:	str	r3, [sp, #12]
   1a8e4:	str	r3, [sp]
   1a8e8:	ldr	r3, [sp, #20]
   1a8ec:	bl	1a884 <__assert_fail@plt+0x9030>
   1a8f0:	add	sp, sp, #16
   1a8f4:	pop	{lr}		; (ldr lr, [sp], #4)
   1a8f8:	add	sp, sp, #4
   1a8fc:	bx	lr
   1a900:	push	{r4, lr}
   1a904:	ldr	r3, [pc, #112]	; 1a97c <__assert_fail@plt+0x9128>
   1a908:	ldr	r1, [r3]
   1a90c:	mov	r0, #10
   1a910:	bl	114dc <fputc_unlocked@plt>
   1a914:	mov	r2, #5
   1a918:	ldr	r1, [pc, #96]	; 1a980 <__assert_fail@plt+0x912c>
   1a91c:	mov	r0, #0
   1a920:	bl	114e8 <dcgettext@plt>
   1a924:	ldr	r2, [pc, #88]	; 1a984 <__assert_fail@plt+0x9130>
   1a928:	mov	r1, r0
   1a92c:	mov	r0, #1
   1a930:	bl	116ec <__printf_chk@plt>
   1a934:	mov	r2, #5
   1a938:	ldr	r1, [pc, #72]	; 1a988 <__assert_fail@plt+0x9134>
   1a93c:	mov	r0, #0
   1a940:	bl	114e8 <dcgettext@plt>
   1a944:	ldr	r3, [pc, #64]	; 1a98c <__assert_fail@plt+0x9138>
   1a948:	ldr	r2, [pc, #64]	; 1a990 <__assert_fail@plt+0x913c>
   1a94c:	mov	r1, r0
   1a950:	mov	r0, #1
   1a954:	bl	116ec <__printf_chk@plt>
   1a958:	mov	r2, #5
   1a95c:	ldr	r1, [pc, #48]	; 1a994 <__assert_fail@plt+0x9140>
   1a960:	mov	r0, #0
   1a964:	bl	114e8 <dcgettext@plt>
   1a968:	ldr	r2, [pc, #40]	; 1a998 <__assert_fail@plt+0x9144>
   1a96c:	mov	r1, r0
   1a970:	mov	r0, #1
   1a974:	bl	116ec <__printf_chk@plt>
   1a978:	pop	{r4, pc}
   1a97c:	andeq	pc, r2, ip, ror #3
   1a980:	andeq	lr, r1, r0, asr ip
   1a984:	andeq	lr, r1, r4, ror #24
   1a988:	andeq	lr, r1, ip, ror ip
   1a98c:	muleq	r1, ip, r3
   1a990:	andeq	lr, r1, r4, asr #7
   1a994:	muleq	r1, r0, ip
   1a998:			; <UNDEFINED> instruction: 0x0001ecb8
   1a99c:	push	{r4, lr}
   1a9a0:	bl	1b030 <__assert_fail@plt+0x97dc>
   1a9a4:	cmp	r0, #0
   1a9a8:	popne	{r4, pc}
   1a9ac:	bl	1af40 <__assert_fail@plt+0x96ec>
   1a9b0:	push	{r4, lr}
   1a9b4:	bl	1b030 <__assert_fail@plt+0x97dc>
   1a9b8:	cmp	r0, #0
   1a9bc:	popne	{r4, pc}
   1a9c0:	bl	1af40 <__assert_fail@plt+0x96ec>
   1a9c4:	push	{r4, lr}
   1a9c8:	bl	1a99c <__assert_fail@plt+0x9148>
   1a9cc:	pop	{r4, pc}
   1a9d0:	push	{r4, r5, r6, lr}
   1a9d4:	mov	r5, r0
   1a9d8:	mov	r4, r1
   1a9dc:	bl	1b060 <__assert_fail@plt+0x980c>
   1a9e0:	cmp	r0, #0
   1a9e4:	popne	{r4, r5, r6, pc}
   1a9e8:	adds	r4, r4, #0
   1a9ec:	movne	r4, #1
   1a9f0:	cmp	r5, #0
   1a9f4:	orreq	r4, r4, #1
   1a9f8:	cmp	r4, #0
   1a9fc:	popeq	{r4, r5, r6, pc}
   1aa00:	bl	1af40 <__assert_fail@plt+0x96ec>
   1aa04:	push	{r4, lr}
   1aa08:	cmp	r1, #0
   1aa0c:	orreq	r1, r1, #1
   1aa10:	bl	1b060 <__assert_fail@plt+0x980c>
   1aa14:	cmp	r0, #0
   1aa18:	popne	{r4, pc}
   1aa1c:	bl	1af40 <__assert_fail@plt+0x96ec>
   1aa20:	push	{r4, r5, r6, lr}
   1aa24:	mov	r6, r0
   1aa28:	mov	r5, r1
   1aa2c:	mov	r4, r2
   1aa30:	bl	1bf74 <__assert_fail@plt+0xa720>
   1aa34:	cmp	r0, #0
   1aa38:	popne	{r4, r5, r6, pc}
   1aa3c:	cmp	r6, #0
   1aa40:	beq	1aa50 <__assert_fail@plt+0x91fc>
   1aa44:	cmp	r5, #0
   1aa48:	cmpne	r4, #0
   1aa4c:	popeq	{r4, r5, r6, pc}
   1aa50:	bl	1af40 <__assert_fail@plt+0x96ec>
   1aa54:	push	{r4, lr}
   1aa58:	bl	1aa20 <__assert_fail@plt+0x91cc>
   1aa5c:	pop	{r4, pc}
   1aa60:	push	{r4, lr}
   1aa64:	mov	ip, r1
   1aa68:	mov	r3, r2
   1aa6c:	cmp	r2, #0
   1aa70:	cmpne	r1, #0
   1aa74:	moveq	r3, #1
   1aa78:	moveq	ip, r3
   1aa7c:	mov	r2, r3
   1aa80:	mov	r1, ip
   1aa84:	bl	1bf74 <__assert_fail@plt+0xa720>
   1aa88:	cmp	r0, #0
   1aa8c:	popne	{r4, pc}
   1aa90:	bl	1af40 <__assert_fail@plt+0x96ec>
   1aa94:	push	{r4, lr}
   1aa98:	mov	r2, r1
   1aa9c:	mov	r1, r0
   1aaa0:	mov	r0, #0
   1aaa4:	bl	1aa20 <__assert_fail@plt+0x91cc>
   1aaa8:	pop	{r4, pc}
   1aaac:	push	{r4, lr}
   1aab0:	mov	r2, r1
   1aab4:	mov	r1, r0
   1aab8:	mov	r0, #0
   1aabc:	bl	1aa60 <__assert_fail@plt+0x920c>
   1aac0:	pop	{r4, pc}
   1aac4:	push	{r4, r5, r6, r7, r8, lr}
   1aac8:	mov	r5, r1
   1aacc:	mov	r6, r2
   1aad0:	ldr	r4, [r1]
   1aad4:	subs	r7, r0, #0
   1aad8:	beq	1aaf4 <__assert_fail@plt+0x92a0>
   1aadc:	lsr	r2, r4, #1
   1aae0:	add	r3, r2, #1
   1aae4:	mvn	r3, r3
   1aae8:	cmp	r4, r3
   1aaec:	bls	1ab18 <__assert_fail@plt+0x92c4>
   1aaf0:	bl	1af40 <__assert_fail@plt+0x96ec>
   1aaf4:	cmp	r4, #0
   1aaf8:	bne	1ab20 <__assert_fail@plt+0x92cc>
   1aafc:	mov	r1, r2
   1ab00:	mov	r0, #64	; 0x40
   1ab04:	bl	1c504 <__assert_fail@plt+0xacb0>
   1ab08:	cmp	r0, #0
   1ab0c:	movne	r4, r0
   1ab10:	addeq	r4, r0, #1
   1ab14:	b	1ab20 <__assert_fail@plt+0x92cc>
   1ab18:	add	r4, r4, #1
   1ab1c:	add	r4, r4, r2
   1ab20:	mov	r2, r6
   1ab24:	mov	r1, r4
   1ab28:	mov	r0, r7
   1ab2c:	bl	1aa20 <__assert_fail@plt+0x91cc>
   1ab30:	str	r4, [r5]
   1ab34:	pop	{r4, r5, r6, r7, r8, pc}
   1ab38:	push	{r4, lr}
   1ab3c:	mov	r2, #1
   1ab40:	bl	1aac4 <__assert_fail@plt+0x9270>
   1ab44:	pop	{r4, pc}
   1ab48:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ab4c:	sub	sp, sp, #12
   1ab50:	mov	fp, r0
   1ab54:	mov	sl, r1
   1ab58:	mov	r9, r2
   1ab5c:	mov	r7, r3
   1ab60:	ldr	r6, [sp, #48]	; 0x30
   1ab64:	ldr	r5, [r1]
   1ab68:	asrs	r4, r5, #1
   1ab6c:	bmi	1acc8 <__assert_fail@plt+0x9474>
   1ab70:	cmp	r5, #0
   1ab74:	blt	1acdc <__assert_fail@plt+0x9488>
   1ab78:	mvn	r3, #-2147483648	; 0x80000000
   1ab7c:	sub	r3, r3, r4
   1ab80:	cmp	r5, r3
   1ab84:	movle	r3, #0
   1ab88:	movgt	r3, #1
   1ab8c:	cmp	r3, #0
   1ab90:	addeq	r4, r4, r5
   1ab94:	mvnne	r4, #-2147483648	; 0x80000000
   1ab98:	mvn	r8, r7
   1ab9c:	lsr	r8, r8, #31
   1aba0:	cmp	r7, r4
   1aba4:	movge	r3, #0
   1aba8:	andlt	r3, r8, #1
   1abac:	cmp	r3, #0
   1abb0:	movne	r4, r7
   1abb4:	cmp	r6, #0
   1abb8:	blt	1acf0 <__assert_fail@plt+0x949c>
   1abbc:	cmp	r6, #0
   1abc0:	beq	1ad9c <__assert_fail@plt+0x9548>
   1abc4:	cmp	r4, #0
   1abc8:	blt	1ad4c <__assert_fail@plt+0x94f8>
   1abcc:	mov	r1, r6
   1abd0:	mvn	r0, #-2147483648	; 0x80000000
   1abd4:	bl	1c710 <__assert_fail@plt+0xaebc>
   1abd8:	cmp	r0, r4
   1abdc:	movge	r0, #0
   1abe0:	movlt	r0, #1
   1abe4:	cmp	r0, #0
   1abe8:	mvnne	r3, #-2147483648	; 0x80000000
   1abec:	strne	r3, [sp, #4]
   1abf0:	beq	1ad84 <__assert_fail@plt+0x9530>
   1abf4:	mov	r1, r6
   1abf8:	ldr	r0, [sp, #4]
   1abfc:	bl	1c710 <__assert_fail@plt+0xaebc>
   1ac00:	mov	r4, r0
   1ac04:	mov	r1, r6
   1ac08:	ldr	r0, [sp, #4]
   1ac0c:	bl	1c930 <__assert_fail@plt+0xb0dc>
   1ac10:	ldr	r3, [sp, #4]
   1ac14:	sub	r1, r3, r1
   1ac18:	cmp	fp, #0
   1ac1c:	moveq	r3, #0
   1ac20:	streq	r3, [sl]
   1ac24:	sub	r3, r4, r5
   1ac28:	cmp	r3, r9
   1ac2c:	bge	1acb4 <__assert_fail@plt+0x9460>
   1ac30:	cmp	r9, #0
   1ac34:	blt	1ada8 <__assert_fail@plt+0x9554>
   1ac38:	cmp	r5, #0
   1ac3c:	blt	1adbc <__assert_fail@plt+0x9568>
   1ac40:	mvn	r3, #-2147483648	; 0x80000000
   1ac44:	sub	r3, r3, r9
   1ac48:	cmp	r5, r3
   1ac4c:	movle	r3, #0
   1ac50:	movgt	r3, #1
   1ac54:	cmp	r3, #0
   1ac58:	bne	1ae64 <__assert_fail@plt+0x9610>
   1ac5c:	add	r5, r5, r9
   1ac60:	mov	r4, r5
   1ac64:	cmp	r7, r5
   1ac68:	movge	r7, #0
   1ac6c:	andlt	r7, r8, #1
   1ac70:	cmp	r7, #0
   1ac74:	bne	1ae64 <__assert_fail@plt+0x9610>
   1ac78:	cmp	r6, #0
   1ac7c:	blt	1add0 <__assert_fail@plt+0x957c>
   1ac80:	cmp	r6, #0
   1ac84:	beq	1acb0 <__assert_fail@plt+0x945c>
   1ac88:	cmp	r5, #0
   1ac8c:	blt	1ae2c <__assert_fail@plt+0x95d8>
   1ac90:	mov	r1, r6
   1ac94:	mvn	r0, #-2147483648	; 0x80000000
   1ac98:	bl	1c710 <__assert_fail@plt+0xaebc>
   1ac9c:	cmp	r5, r0
   1aca0:	movle	r0, #0
   1aca4:	movgt	r0, #1
   1aca8:	cmp	r0, #0
   1acac:	bne	1ae64 <__assert_fail@plt+0x9610>
   1acb0:	mul	r1, r5, r6
   1acb4:	mov	r0, fp
   1acb8:	bl	1a9d0 <__assert_fail@plt+0x917c>
   1acbc:	str	r4, [sl]
   1acc0:	add	sp, sp, #12
   1acc4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1acc8:	rsb	r3, r4, #-2147483648	; 0x80000000
   1accc:	cmp	r5, r3
   1acd0:	movge	r3, #0
   1acd4:	movlt	r3, #1
   1acd8:	b	1ab8c <__assert_fail@plt+0x9338>
   1acdc:	rsb	r3, r5, #-2147483648	; 0x80000000
   1ace0:	cmp	r4, r3
   1ace4:	movge	r3, #0
   1ace8:	movlt	r3, #1
   1acec:	b	1ab8c <__assert_fail@plt+0x9338>
   1acf0:	cmp	r4, #0
   1acf4:	blt	1ad1c <__assert_fail@plt+0x94c8>
   1acf8:	cmn	r6, #1
   1acfc:	beq	1ad38 <__assert_fail@plt+0x94e4>
   1ad00:	mov	r1, r6
   1ad04:	mov	r0, #-2147483648	; 0x80000000
   1ad08:	bl	1c710 <__assert_fail@plt+0xaebc>
   1ad0c:	cmp	r0, r4
   1ad10:	movge	r0, #0
   1ad14:	movlt	r0, #1
   1ad18:	b	1abe4 <__assert_fail@plt+0x9390>
   1ad1c:	mov	r1, r6
   1ad20:	mvn	r0, #-2147483648	; 0x80000000
   1ad24:	bl	1c710 <__assert_fail@plt+0xaebc>
   1ad28:	cmp	r0, r4
   1ad2c:	movle	r0, #0
   1ad30:	movgt	r0, #1
   1ad34:	b	1abe4 <__assert_fail@plt+0x9390>
   1ad38:	add	r0, r4, #-2147483648	; 0x80000000
   1ad3c:	cmp	r0, #0
   1ad40:	movle	r0, #0
   1ad44:	movgt	r0, #1
   1ad48:	b	1abe4 <__assert_fail@plt+0x9390>
   1ad4c:	cmn	r4, #1
   1ad50:	beq	1ad70 <__assert_fail@plt+0x951c>
   1ad54:	mov	r1, r4
   1ad58:	mov	r0, #-2147483648	; 0x80000000
   1ad5c:	bl	1c710 <__assert_fail@plt+0xaebc>
   1ad60:	cmp	r6, r0
   1ad64:	movle	r0, #0
   1ad68:	movgt	r0, #1
   1ad6c:	b	1abe4 <__assert_fail@plt+0x9390>
   1ad70:	add	r0, r6, #-2147483648	; 0x80000000
   1ad74:	cmp	r0, #0
   1ad78:	movle	r0, #0
   1ad7c:	movgt	r0, #1
   1ad80:	b	1abe4 <__assert_fail@plt+0x9390>
   1ad84:	mul	r1, r6, r4
   1ad88:	cmp	r1, #63	; 0x3f
   1ad8c:	movle	r3, #64	; 0x40
   1ad90:	strle	r3, [sp, #4]
   1ad94:	bgt	1ac18 <__assert_fail@plt+0x93c4>
   1ad98:	b	1abf4 <__assert_fail@plt+0x93a0>
   1ad9c:	mov	r3, #64	; 0x40
   1ada0:	str	r3, [sp, #4]
   1ada4:	b	1abf4 <__assert_fail@plt+0x93a0>
   1ada8:	rsb	r3, r9, #-2147483648	; 0x80000000
   1adac:	cmp	r5, r3
   1adb0:	movge	r3, #0
   1adb4:	movlt	r3, #1
   1adb8:	b	1ac54 <__assert_fail@plt+0x9400>
   1adbc:	rsb	r3, r5, #-2147483648	; 0x80000000
   1adc0:	cmp	r9, r3
   1adc4:	movge	r3, #0
   1adc8:	movlt	r3, #1
   1adcc:	b	1ac54 <__assert_fail@plt+0x9400>
   1add0:	cmp	r5, #0
   1add4:	blt	1adfc <__assert_fail@plt+0x95a8>
   1add8:	cmn	r6, #1
   1addc:	beq	1ae18 <__assert_fail@plt+0x95c4>
   1ade0:	mov	r1, r6
   1ade4:	mov	r0, #-2147483648	; 0x80000000
   1ade8:	bl	1c710 <__assert_fail@plt+0xaebc>
   1adec:	cmp	r5, r0
   1adf0:	movle	r0, #0
   1adf4:	movgt	r0, #1
   1adf8:	b	1aca8 <__assert_fail@plt+0x9454>
   1adfc:	mov	r1, r6
   1ae00:	mvn	r0, #-2147483648	; 0x80000000
   1ae04:	bl	1c710 <__assert_fail@plt+0xaebc>
   1ae08:	cmp	r5, r0
   1ae0c:	movge	r0, #0
   1ae10:	movlt	r0, #1
   1ae14:	b	1aca8 <__assert_fail@plt+0x9454>
   1ae18:	add	r0, r5, #-2147483648	; 0x80000000
   1ae1c:	cmp	r0, #0
   1ae20:	movle	r0, #0
   1ae24:	movgt	r0, #1
   1ae28:	b	1aca8 <__assert_fail@plt+0x9454>
   1ae2c:	cmn	r5, #1
   1ae30:	beq	1ae50 <__assert_fail@plt+0x95fc>
   1ae34:	mov	r1, r5
   1ae38:	mov	r0, #-2147483648	; 0x80000000
   1ae3c:	bl	1c710 <__assert_fail@plt+0xaebc>
   1ae40:	cmp	r6, r0
   1ae44:	movle	r0, #0
   1ae48:	movgt	r0, #1
   1ae4c:	b	1aca8 <__assert_fail@plt+0x9454>
   1ae50:	add	r0, r6, #-2147483648	; 0x80000000
   1ae54:	cmp	r0, #0
   1ae58:	movle	r0, #0
   1ae5c:	movgt	r0, #1
   1ae60:	b	1aca8 <__assert_fail@plt+0x9454>
   1ae64:	bl	1af40 <__assert_fail@plt+0x96ec>
   1ae68:	push	{r4, lr}
   1ae6c:	bl	1afe0 <__assert_fail@plt+0x978c>
   1ae70:	cmp	r0, #0
   1ae74:	popne	{r4, pc}
   1ae78:	bl	1af40 <__assert_fail@plt+0x96ec>
   1ae7c:	push	{r4, lr}
   1ae80:	mov	r1, #1
   1ae84:	bl	1ae68 <__assert_fail@plt+0x9614>
   1ae88:	pop	{r4, pc}
   1ae8c:	push	{r4, lr}
   1ae90:	bl	1afe0 <__assert_fail@plt+0x978c>
   1ae94:	cmp	r0, #0
   1ae98:	popne	{r4, pc}
   1ae9c:	bl	1af40 <__assert_fail@plt+0x96ec>
   1aea0:	push	{r4, lr}
   1aea4:	mov	r1, #1
   1aea8:	bl	1ae8c <__assert_fail@plt+0x9638>
   1aeac:	pop	{r4, pc}
   1aeb0:	push	{r4, r5, r6, lr}
   1aeb4:	mov	r5, r0
   1aeb8:	mov	r4, r1
   1aebc:	mov	r0, r1
   1aec0:	bl	1a99c <__assert_fail@plt+0x9148>
   1aec4:	mov	r2, r4
   1aec8:	mov	r1, r5
   1aecc:	bl	114b8 <memcpy@plt>
   1aed0:	pop	{r4, r5, r6, pc}
   1aed4:	push	{r4, r5, r6, lr}
   1aed8:	mov	r5, r0
   1aedc:	mov	r4, r1
   1aee0:	mov	r0, r1
   1aee4:	bl	1a9b0 <__assert_fail@plt+0x915c>
   1aee8:	mov	r2, r4
   1aeec:	mov	r1, r5
   1aef0:	bl	114b8 <memcpy@plt>
   1aef4:	pop	{r4, r5, r6, pc}
   1aef8:	push	{r4, r5, r6, lr}
   1aefc:	mov	r5, r0
   1af00:	mov	r4, r1
   1af04:	add	r0, r1, #1
   1af08:	bl	1a9b0 <__assert_fail@plt+0x915c>
   1af0c:	mov	r2, #0
   1af10:	strb	r2, [r0, r4]
   1af14:	mov	r2, r4
   1af18:	mov	r1, r5
   1af1c:	bl	114b8 <memcpy@plt>
   1af20:	pop	{r4, r5, r6, pc}
   1af24:	push	{r4, lr}
   1af28:	mov	r4, r0
   1af2c:	bl	11674 <strlen@plt>
   1af30:	add	r1, r0, #1
   1af34:	mov	r0, r4
   1af38:	bl	1aeb0 <__assert_fail@plt+0x965c>
   1af3c:	pop	{r4, pc}
   1af40:	push	{r4, lr}
   1af44:	ldr	r3, [pc, #40]	; 1af74 <__assert_fail@plt+0x9720>
   1af48:	ldr	r4, [r3]
   1af4c:	mov	r2, #5
   1af50:	ldr	r1, [pc, #32]	; 1af78 <__assert_fail@plt+0x9724>
   1af54:	mov	r0, #0
   1af58:	bl	114e8 <dcgettext@plt>
   1af5c:	mov	r3, r0
   1af60:	ldr	r2, [pc, #20]	; 1af7c <__assert_fail@plt+0x9728>
   1af64:	mov	r1, #0
   1af68:	mov	r0, r4
   1af6c:	bl	115a8 <error@plt>
   1af70:	bl	11824 <abort@plt>
   1af74:	muleq	r2, r0, r1
   1af78:	andeq	lr, r1, r8, lsl #26
   1af7c:	andeq	lr, r1, ip, ror r2
   1af80:	push	{r4, lr}
   1af84:	mov	r1, #0
   1af88:	mov	r0, r1
   1af8c:	bl	11650 <getcwd@plt>
   1af90:	subs	r4, r0, #0
   1af94:	beq	1afa0 <__assert_fail@plt+0x974c>
   1af98:	mov	r0, r4
   1af9c:	pop	{r4, pc}
   1afa0:	bl	116b0 <__errno_location@plt>
   1afa4:	ldr	r3, [r0]
   1afa8:	cmp	r3, #12
   1afac:	bne	1af98 <__assert_fail@plt+0x9744>
   1afb0:	bl	1af40 <__assert_fail@plt+0x96ec>
   1afb4:	push	{r0, r1, r2, r3}
   1afb8:	push	{lr}		; (str lr, [sp, #-4]!)
   1afbc:	sub	sp, sp, #12
   1afc0:	add	r1, sp, #20
   1afc4:	str	r1, [sp, #4]
   1afc8:	ldr	r0, [sp, #16]
   1afcc:	bl	1c0e8 <__assert_fail@plt+0xa894>
   1afd0:	add	sp, sp, #12
   1afd4:	pop	{lr}		; (ldr lr, [sp], #4)
   1afd8:	add	sp, sp, #16
   1afdc:	bx	lr
   1afe0:	push	{r4, lr}
   1afe4:	mov	r2, r0
   1afe8:	mov	r3, r1
   1afec:	cmp	r1, #0
   1aff0:	cmpne	r0, #0
   1aff4:	moveq	r3, #1
   1aff8:	moveq	r2, r3
   1affc:	umull	r0, r1, r2, r3
   1b000:	cmp	r0, #0
   1b004:	cmpge	r1, #0
   1b008:	bne	1b01c <__assert_fail@plt+0x97c8>
   1b00c:	mov	r1, r3
   1b010:	mov	r0, r2
   1b014:	bl	1141c <calloc@plt>
   1b018:	pop	{r4, pc}
   1b01c:	bl	116b0 <__errno_location@plt>
   1b020:	mov	r3, #12
   1b024:	str	r3, [r0]
   1b028:	mov	r0, #0
   1b02c:	pop	{r4, pc}
   1b030:	push	{r4, lr}
   1b034:	cmp	r0, #0
   1b038:	moveq	r0, #1
   1b03c:	cmp	r0, #0
   1b040:	blt	1b04c <__assert_fail@plt+0x97f8>
   1b044:	bl	115e4 <malloc@plt>
   1b048:	pop	{r4, pc}
   1b04c:	bl	116b0 <__errno_location@plt>
   1b050:	mov	r3, #12
   1b054:	str	r3, [r0]
   1b058:	mov	r0, #0
   1b05c:	pop	{r4, pc}
   1b060:	push	{r4, lr}
   1b064:	cmp	r0, #0
   1b068:	beq	1b084 <__assert_fail@plt+0x9830>
   1b06c:	cmp	r1, #0
   1b070:	beq	1b090 <__assert_fail@plt+0x983c>
   1b074:	cmp	r1, #0
   1b078:	blt	1b09c <__assert_fail@plt+0x9848>
   1b07c:	bl	114f4 <realloc@plt>
   1b080:	pop	{r4, pc}
   1b084:	mov	r0, r1
   1b088:	bl	1b030 <__assert_fail@plt+0x97dc>
   1b08c:	pop	{r4, pc}
   1b090:	bl	15c58 <__assert_fail@plt+0x4404>
   1b094:	mov	r0, #0
   1b098:	pop	{r4, pc}
   1b09c:	bl	116b0 <__errno_location@plt>
   1b0a0:	mov	r3, #12
   1b0a4:	str	r3, [r0]
   1b0a8:	mov	r0, #0
   1b0ac:	pop	{r4, pc}
   1b0b0:	cmp	r1, #2
   1b0b4:	bls	1b0d4 <__assert_fail@plt+0x9880>
   1b0b8:	push	{r4, r5, r6, r7, r8, r9, lr}
   1b0bc:	mov	r7, #1
   1b0c0:	mov	ip, r7
   1b0c4:	mov	lr, #0
   1b0c8:	mvn	r4, #0
   1b0cc:	mov	r8, r7
   1b0d0:	b	1b0fc <__assert_fail@plt+0x98a8>
   1b0d4:	mov	r3, #1
   1b0d8:	str	r3, [r2]
   1b0dc:	sub	r0, r1, #1
   1b0e0:	bx	lr
   1b0e4:	cmp	r6, r5
   1b0e8:	beq	1b12c <__assert_fail@plt+0x98d8>
   1b0ec:	mov	r4, lr
   1b0f0:	add	lr, lr, #1
   1b0f4:	mov	r7, r8
   1b0f8:	mov	ip, r8
   1b0fc:	add	r3, lr, ip
   1b100:	cmp	r1, r3
   1b104:	bls	1b140 <__assert_fail@plt+0x98ec>
   1b108:	ldrb	r6, [r0, r3]
   1b10c:	add	r5, r0, r4
   1b110:	ldrb	r5, [r5, ip]
   1b114:	cmp	r6, r5
   1b118:	bcs	1b0e4 <__assert_fail@plt+0x9890>
   1b11c:	sub	r7, r3, r4
   1b120:	mov	lr, r3
   1b124:	mov	ip, #1
   1b128:	b	1b0fc <__assert_fail@plt+0x98a8>
   1b12c:	cmp	ip, r7
   1b130:	addne	ip, ip, #1
   1b134:	addeq	lr, lr, r7
   1b138:	moveq	ip, #1
   1b13c:	b	1b0fc <__assert_fail@plt+0x98a8>
   1b140:	str	r7, [r2]
   1b144:	mov	r8, #1
   1b148:	mov	ip, r8
   1b14c:	mov	lr, #0
   1b150:	mvn	r7, #0
   1b154:	mov	r9, r8
   1b158:	b	1b174 <__assert_fail@plt+0x9920>
   1b15c:	cmp	r6, r5
   1b160:	beq	1b1a4 <__assert_fail@plt+0x9950>
   1b164:	mov	r7, lr
   1b168:	add	lr, lr, #1
   1b16c:	mov	r8, r9
   1b170:	mov	ip, r9
   1b174:	add	r3, lr, ip
   1b178:	cmp	r1, r3
   1b17c:	bls	1b1b8 <__assert_fail@plt+0x9964>
   1b180:	ldrb	r6, [r0, r3]
   1b184:	add	r5, r0, r7
   1b188:	ldrb	r5, [r5, ip]
   1b18c:	cmp	r6, r5
   1b190:	bls	1b15c <__assert_fail@plt+0x9908>
   1b194:	sub	r8, r3, r7
   1b198:	mov	lr, r3
   1b19c:	mov	ip, #1
   1b1a0:	b	1b174 <__assert_fail@plt+0x9920>
   1b1a4:	cmp	ip, r8
   1b1a8:	addne	ip, ip, #1
   1b1ac:	addeq	lr, lr, r8
   1b1b0:	moveq	ip, #1
   1b1b4:	b	1b174 <__assert_fail@plt+0x9920>
   1b1b8:	add	r7, r7, #1
   1b1bc:	add	r0, r4, #1
   1b1c0:	cmp	r7, r0
   1b1c4:	strcs	r8, [r2]
   1b1c8:	movcs	r0, r7
   1b1cc:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1b1d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b1d4:	sub	sp, sp, #1056	; 0x420
   1b1d8:	sub	sp, sp, #4
   1b1dc:	mov	r5, r0
   1b1e0:	mov	r6, r1
   1b1e4:	mov	r0, r2
   1b1e8:	str	r2, [sp]
   1b1ec:	mov	r4, r3
   1b1f0:	add	r2, sp, #1040	; 0x410
   1b1f4:	add	r2, r2, #12
   1b1f8:	mov	r1, r3
   1b1fc:	bl	1b0b0 <__assert_fail@plt+0x985c>
   1b200:	mov	sl, r0
   1b204:	add	r3, sp, #24
   1b208:	add	r2, sp, #32
   1b20c:	add	r2, r2, #1016	; 0x3f8
   1b210:	str	r4, [r3, #4]!
   1b214:	cmp	r3, r2
   1b218:	bne	1b210 <__assert_fail@plt+0x99bc>
   1b21c:	cmp	r4, #0
   1b220:	beq	1b24c <__assert_fail@plt+0x99f8>
   1b224:	ldr	r3, [sp]
   1b228:	sub	r1, r3, #1
   1b22c:	sub	r3, r4, #1
   1b230:	ldrb	r2, [r1, #1]!
   1b234:	add	r0, sp, #1056	; 0x420
   1b238:	add	r2, r0, r2, lsl #2
   1b23c:	str	r3, [r2, #-1028]	; 0xfffffbfc
   1b240:	sub	r3, r3, #1
   1b244:	cmn	r3, #1
   1b248:	bne	1b230 <__assert_fail@plt+0x99dc>
   1b24c:	ldr	r3, [sp, #1052]	; 0x41c
   1b250:	str	r3, [sp, #4]
   1b254:	mov	r2, sl
   1b258:	ldr	r0, [sp]
   1b25c:	add	r1, r0, r3
   1b260:	bl	114d0 <memcmp@plt>
   1b264:	cmp	r0, #0
   1b268:	beq	1b3c8 <__assert_fail@plt+0x9b74>
   1b26c:	sub	r3, r4, sl
   1b270:	cmp	r3, sl
   1b274:	movcc	r3, sl
   1b278:	add	r3, r3, #1
   1b27c:	str	r3, [sp, #4]
   1b280:	mov	r9, #0
   1b284:	sub	r7, r4, #1
   1b288:	sub	fp, sl, #1
   1b28c:	ldr	r3, [sp]
   1b290:	add	r2, r3, fp
   1b294:	str	r2, [sp, #8]
   1b298:	add	r3, r3, sl
   1b29c:	rsb	r2, sl, #1
   1b2a0:	str	r2, [sp, #12]
   1b2a4:	mov	r0, r6
   1b2a8:	mov	r6, r3
   1b2ac:	b	1b40c <__assert_fail@plt+0x9bb8>
   1b2b0:	cmp	fp, sl
   1b2b4:	movcs	r3, fp
   1b2b8:	movcc	r3, sl
   1b2bc:	cmp	r3, r7
   1b2c0:	bcs	1b4b0 <__assert_fail@plt+0x9c5c>
   1b2c4:	ldr	lr, [sp]
   1b2c8:	add	r1, lr, r3
   1b2cc:	add	r0, r9, r3
   1b2d0:	add	r2, r5, r0
   1b2d4:	ldrb	lr, [lr, r3]
   1b2d8:	ldrb	r0, [r5, r0]
   1b2dc:	cmp	lr, r0
   1b2e0:	bne	1b300 <__assert_fail@plt+0x9aac>
   1b2e4:	add	r3, r3, #1
   1b2e8:	cmp	r3, r7
   1b2ec:	bcs	1b4b0 <__assert_fail@plt+0x9c5c>
   1b2f0:	ldrb	lr, [r1, #1]!
   1b2f4:	ldrb	r0, [r2, #1]!
   1b2f8:	cmp	lr, r0
   1b2fc:	beq	1b2e4 <__assert_fail@plt+0x9a90>
   1b300:	ldr	r2, [sp, #20]
   1b304:	add	r9, r2, r9
   1b308:	add	r9, r3, r9
   1b30c:	mov	fp, ip
   1b310:	mov	r0, r8
   1b314:	add	r8, r9, r4
   1b318:	sub	r2, r8, r0
   1b31c:	mov	r1, #0
   1b320:	add	r0, r5, r0
   1b324:	bl	11710 <memchr@plt>
   1b328:	adds	r3, r8, #0
   1b32c:	movne	r3, #1
   1b330:	cmp	r0, #0
   1b334:	movne	r3, #0
   1b338:	mov	r0, r3
   1b33c:	cmp	r3, #0
   1b340:	beq	1b540 <__assert_fail@plt+0x9cec>
   1b344:	add	r3, r5, r8
   1b348:	ldrb	r3, [r3, #-1]
   1b34c:	add	r2, sp, #1056	; 0x420
   1b350:	add	r3, r2, r3, lsl #2
   1b354:	ldr	ip, [r3, #-1028]	; 0xfffffbfc
   1b358:	cmp	ip, #0
   1b35c:	beq	1b2b0 <__assert_fail@plt+0x9a5c>
   1b360:	ldr	r3, [sp, #4]
   1b364:	cmp	fp, #0
   1b368:	cmpne	r3, ip
   1b36c:	ldrhi	ip, [sp, #12]
   1b370:	add	r9, r9, ip
   1b374:	mov	fp, #0
   1b378:	b	1b310 <__assert_fail@plt+0x9abc>
   1b37c:	mov	r1, r3
   1b380:	sub	r3, r1, #1
   1b384:	cmp	r6, r3
   1b388:	beq	1b39c <__assert_fail@plt+0x9b48>
   1b38c:	ldrb	lr, [r0, #-1]!
   1b390:	ldrb	ip, [r2, #-1]!
   1b394:	cmp	lr, ip
   1b398:	beq	1b37c <__assert_fail@plt+0x9b28>
   1b39c:	add	fp, fp, #1
   1b3a0:	cmp	fp, r1
   1b3a4:	bhi	1b3c0 <__assert_fail@plt+0x9b6c>
   1b3a8:	ldr	r3, [sp, #4]
   1b3ac:	add	r9, r9, r3
   1b3b0:	ldr	fp, [sp, #12]
   1b3b4:	b	1b310 <__assert_fail@plt+0x9abc>
   1b3b8:	mov	r1, sl
   1b3bc:	b	1b39c <__assert_fail@plt+0x9b48>
   1b3c0:	add	r0, r5, r9
   1b3c4:	b	1b540 <__assert_fail@plt+0x9cec>
   1b3c8:	mov	fp, #0
   1b3cc:	mov	r9, fp
   1b3d0:	sub	r7, r4, #1
   1b3d4:	sub	r3, sl, #1
   1b3d8:	str	r3, [sp, #8]
   1b3dc:	ldr	r2, [sp, #4]
   1b3e0:	sub	r2, r4, r2
   1b3e4:	str	r2, [sp, #12]
   1b3e8:	ldr	r2, [sp]
   1b3ec:	add	r3, r2, r3
   1b3f0:	str	r3, [sp, #16]
   1b3f4:	rsb	r3, sl, #1
   1b3f8:	str	r3, [sp, #20]
   1b3fc:	mov	r0, r6
   1b400:	b	1b314 <__assert_fail@plt+0x9ac0>
   1b404:	add	r9, r9, r3
   1b408:	mov	r0, r8
   1b40c:	add	r8, r9, r4
   1b410:	sub	r2, r8, r0
   1b414:	mov	r1, #0
   1b418:	add	r0, r5, r0
   1b41c:	bl	11710 <memchr@plt>
   1b420:	adds	r3, r8, #0
   1b424:	movne	r3, #1
   1b428:	cmp	r0, #0
   1b42c:	movne	r3, #0
   1b430:	mov	r0, r3
   1b434:	cmp	r3, #0
   1b438:	beq	1b540 <__assert_fail@plt+0x9cec>
   1b43c:	add	r3, r5, r8
   1b440:	ldrb	r3, [r3, #-1]
   1b444:	add	r2, sp, #1056	; 0x420
   1b448:	add	r3, r2, r3, lsl #2
   1b44c:	ldr	r3, [r3, #-1028]	; 0xfffffbfc
   1b450:	cmp	r3, #0
   1b454:	bne	1b404 <__assert_fail@plt+0x9bb0>
   1b458:	cmp	sl, r7
   1b45c:	bcs	1b4ec <__assert_fail@plt+0x9c98>
   1b460:	add	r3, r9, sl
   1b464:	add	r2, r5, r3
   1b468:	ldrb	r1, [r6]
   1b46c:	ldrb	r3, [r5, r3]
   1b470:	cmp	r1, r3
   1b474:	movne	r3, sl
   1b478:	bne	1b4a0 <__assert_fail@plt+0x9c4c>
   1b47c:	mov	r1, r6
   1b480:	mov	r3, sl
   1b484:	add	r3, r3, #1
   1b488:	cmp	r3, r7
   1b48c:	bcs	1b4ec <__assert_fail@plt+0x9c98>
   1b490:	ldrb	ip, [r1, #1]!
   1b494:	ldrb	r0, [r2, #1]!
   1b498:	cmp	ip, r0
   1b49c:	beq	1b484 <__assert_fail@plt+0x9c30>
   1b4a0:	ldr	r2, [sp, #12]
   1b4a4:	add	r9, r2, r9
   1b4a8:	add	r9, r9, r3
   1b4ac:	b	1b408 <__assert_fail@plt+0x9bb4>
   1b4b0:	ldr	r1, [sp, #8]
   1b4b4:	cmp	fp, sl
   1b4b8:	movcs	r1, sl
   1b4bc:	bcs	1b39c <__assert_fail@plt+0x9b48>
   1b4c0:	ldr	r3, [sp, #8]
   1b4c4:	add	r3, r9, r3
   1b4c8:	add	r2, r5, r3
   1b4cc:	ldr	ip, [sp, #16]
   1b4d0:	ldrb	r0, [ip]
   1b4d4:	ldrb	r3, [r5, r3]
   1b4d8:	cmp	r0, r3
   1b4dc:	bne	1b3b8 <__assert_fail@plt+0x9b64>
   1b4e0:	mov	r0, ip
   1b4e4:	sub	r6, fp, #1
   1b4e8:	b	1b380 <__assert_fail@plt+0x9b2c>
   1b4ec:	cmn	fp, #1
   1b4f0:	beq	1b53c <__assert_fail@plt+0x9ce8>
   1b4f4:	add	r3, r9, fp
   1b4f8:	add	r2, r5, r3
   1b4fc:	ldr	r0, [sp, #8]
   1b500:	ldrb	r1, [r0]
   1b504:	ldrb	r3, [r5, r3]
   1b508:	cmp	r1, r3
   1b50c:	bne	1b530 <__assert_fail@plt+0x9cdc>
   1b510:	mov	r3, r0
   1b514:	ldr	ip, [sp]
   1b518:	cmp	r3, ip
   1b51c:	beq	1b53c <__assert_fail@plt+0x9ce8>
   1b520:	ldrb	r0, [r3, #-1]!
   1b524:	ldrb	r1, [r2, #-1]!
   1b528:	cmp	r0, r1
   1b52c:	beq	1b518 <__assert_fail@plt+0x9cc4>
   1b530:	ldr	r3, [sp, #4]
   1b534:	add	r9, r9, r3
   1b538:	b	1b408 <__assert_fail@plt+0x9bb4>
   1b53c:	add	r0, r5, r9
   1b540:	add	sp, sp, #1056	; 0x420
   1b544:	add	sp, sp, #4
   1b548:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b54c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b550:	sub	sp, sp, #36	; 0x24
   1b554:	ldrb	r3, [r0]
   1b558:	cmp	r3, #0
   1b55c:	beq	1b600 <__assert_fail@plt+0x9dac>
   1b560:	ldrb	r2, [r1]
   1b564:	cmp	r2, #0
   1b568:	beq	1b8c0 <__assert_fail@plt+0xa06c>
   1b56c:	mov	r4, r0
   1b570:	add	ip, r1, #1
   1b574:	mov	lr, #1
   1b578:	mov	fp, ip
   1b57c:	cmp	r3, r2
   1b580:	movne	lr, #0
   1b584:	andeq	lr, lr, #1
   1b588:	ldrb	r3, [r4, #1]!
   1b58c:	cmp	r3, #0
   1b590:	beq	1b608 <__assert_fail@plt+0x9db4>
   1b594:	ldrb	r2, [ip], #1
   1b598:	cmp	r2, #0
   1b59c:	bne	1b578 <__assert_fail@plt+0x9d24>
   1b5a0:	cmp	lr, #0
   1b5a4:	bne	1b8c0 <__assert_fail@plt+0xa06c>
   1b5a8:	mov	r5, r0
   1b5ac:	sub	r4, fp, r1
   1b5b0:	ldrb	r1, [r1]
   1b5b4:	add	r0, r0, #1
   1b5b8:	bl	11680 <strchr@plt>
   1b5bc:	mov	r6, r0
   1b5c0:	cmp	r0, #0
   1b5c4:	cmpne	r4, #1
   1b5c8:	beq	1b8c0 <__assert_fail@plt+0xa06c>
   1b5cc:	sub	fp, fp, r4
   1b5d0:	add	r0, r5, r4
   1b5d4:	cmp	r6, r0
   1b5d8:	subls	r1, r0, r6
   1b5dc:	movhi	r1, #1
   1b5e0:	mov	r7, r1
   1b5e4:	cmp	r4, #31
   1b5e8:	bls	1b61c <__assert_fail@plt+0x9dc8>
   1b5ec:	mov	r3, r4
   1b5f0:	mov	r2, fp
   1b5f4:	mov	r0, r6
   1b5f8:	bl	1b1d0 <__assert_fail@plt+0x997c>
   1b5fc:	b	1b8c0 <__assert_fail@plt+0xa06c>
   1b600:	mov	fp, r1
   1b604:	mov	lr, #1
   1b608:	ldrb	r3, [fp]
   1b60c:	cmp	r3, #0
   1b610:	movne	r0, #0
   1b614:	beq	1b5a0 <__assert_fail@plt+0x9d4c>
   1b618:	b	1b8c0 <__assert_fail@plt+0xa06c>
   1b61c:	add	r2, sp, #28
   1b620:	mov	r1, r4
   1b624:	mov	r0, fp
   1b628:	bl	1b0b0 <__assert_fail@plt+0x985c>
   1b62c:	mov	r8, r0
   1b630:	ldr	r3, [sp, #28]
   1b634:	str	r3, [sp, #8]
   1b638:	mov	r2, r0
   1b63c:	add	r1, fp, r3
   1b640:	mov	r0, fp
   1b644:	bl	114d0 <memcmp@plt>
   1b648:	cmp	r0, #0
   1b64c:	beq	1b6dc <__assert_fail@plt+0x9e88>
   1b650:	sub	r3, r4, r8
   1b654:	cmp	r3, r8
   1b658:	movcc	r3, r8
   1b65c:	add	r3, r3, #1
   1b660:	str	r3, [sp, #8]
   1b664:	mov	r5, #0
   1b668:	sub	r3, r8, #1
   1b66c:	add	r2, fp, r3
   1b670:	add	sl, fp, r8
   1b674:	rsb	r1, r8, #1
   1b678:	str	r1, [sp, #4]
   1b67c:	mov	r0, r7
   1b680:	str	fp, [sp, #12]
   1b684:	mov	fp, r3
   1b688:	mov	r7, r2
   1b68c:	b	1b848 <__assert_fail@plt+0x9ff4>
   1b690:	mov	r1, r3
   1b694:	sub	r3, r1, #1
   1b698:	cmp	r3, r7
   1b69c:	beq	1b6b0 <__assert_fail@plt+0x9e5c>
   1b6a0:	ldrb	lr, [r0, #-1]!
   1b6a4:	ldrb	ip, [r2, #-1]!
   1b6a8:	cmp	lr, ip
   1b6ac:	beq	1b690 <__assert_fail@plt+0x9e3c>
   1b6b0:	add	r9, r9, #1
   1b6b4:	cmp	r9, r1
   1b6b8:	bhi	1b6d4 <__assert_fail@plt+0x9e80>
   1b6bc:	ldr	r3, [sp, #8]
   1b6c0:	add	r5, r5, r3
   1b6c4:	ldr	r9, [sp, #16]
   1b6c8:	b	1b728 <__assert_fail@plt+0x9ed4>
   1b6cc:	mov	r1, r8
   1b6d0:	b	1b6b0 <__assert_fail@plt+0x9e5c>
   1b6d4:	add	r0, r6, r5
   1b6d8:	b	1b8c0 <__assert_fail@plt+0xa06c>
   1b6dc:	mov	r9, #0
   1b6e0:	mov	r5, r9
   1b6e4:	sub	r3, r8, #1
   1b6e8:	str	r3, [sp, #4]
   1b6ec:	ldr	r2, [sp, #8]
   1b6f0:	sub	r2, r4, r2
   1b6f4:	str	r2, [sp, #16]
   1b6f8:	add	r3, fp, r3
   1b6fc:	str	r3, [sp, #20]
   1b700:	rsb	r3, r8, #1
   1b704:	str	r3, [sp, #12]
   1b708:	mov	r0, r7
   1b70c:	b	1b72c <__assert_fail@plt+0x9ed8>
   1b710:	mov	r0, #0
   1b714:	b	1b8c0 <__assert_fail@plt+0xa06c>
   1b718:	ldr	r2, [sp, #12]
   1b71c:	add	r5, r2, r5
   1b720:	add	r5, r5, r3
   1b724:	mov	r9, #0
   1b728:	mov	r0, sl
   1b72c:	add	sl, r4, r5
   1b730:	sub	r2, sl, r0
   1b734:	mov	r1, #0
   1b738:	add	r0, r6, r0
   1b73c:	bl	11710 <memchr@plt>
   1b740:	adds	r3, sl, #0
   1b744:	movne	r3, #1
   1b748:	cmp	r0, #0
   1b74c:	movne	r3, #0
   1b750:	mov	r0, r3
   1b754:	cmp	r3, #0
   1b758:	beq	1b8c0 <__assert_fail@plt+0xa06c>
   1b75c:	cmp	r8, r9
   1b760:	movcs	r3, r8
   1b764:	movcc	r3, r9
   1b768:	cmp	r4, r3
   1b76c:	bls	1b7ac <__assert_fail@plt+0x9f58>
   1b770:	add	r1, fp, r3
   1b774:	add	r0, r3, r5
   1b778:	add	r2, r6, r0
   1b77c:	ldrb	ip, [fp, r3]
   1b780:	ldrb	r0, [r6, r0]
   1b784:	cmp	ip, r0
   1b788:	bne	1b718 <__assert_fail@plt+0x9ec4>
   1b78c:	add	r3, r3, #1
   1b790:	cmp	r4, r3
   1b794:	beq	1b7ac <__assert_fail@plt+0x9f58>
   1b798:	ldrb	ip, [r1, #1]!
   1b79c:	ldrb	r0, [r2, #1]!
   1b7a0:	cmp	ip, r0
   1b7a4:	beq	1b78c <__assert_fail@plt+0x9f38>
   1b7a8:	b	1b718 <__assert_fail@plt+0x9ec4>
   1b7ac:	ldr	r1, [sp, #4]
   1b7b0:	cmp	r8, r9
   1b7b4:	movls	r1, r8
   1b7b8:	bls	1b6b0 <__assert_fail@plt+0x9e5c>
   1b7bc:	ldr	r3, [sp, #4]
   1b7c0:	add	r3, r5, r3
   1b7c4:	add	r2, r6, r3
   1b7c8:	ldr	ip, [sp, #20]
   1b7cc:	ldrb	r0, [ip]
   1b7d0:	ldrb	r3, [r6, r3]
   1b7d4:	cmp	r0, r3
   1b7d8:	bne	1b6cc <__assert_fail@plt+0x9e78>
   1b7dc:	mov	r0, ip
   1b7e0:	sub	r7, r9, #1
   1b7e4:	b	1b694 <__assert_fail@plt+0x9e40>
   1b7e8:	cmn	fp, #1
   1b7ec:	beq	1b8bc <__assert_fail@plt+0xa068>
   1b7f0:	add	r3, r5, fp
   1b7f4:	add	r2, r6, r3
   1b7f8:	ldrb	r1, [r7]
   1b7fc:	ldrb	r3, [r6, r3]
   1b800:	cmp	r1, r3
   1b804:	bne	1b828 <__assert_fail@plt+0x9fd4>
   1b808:	mov	r3, r7
   1b80c:	ldr	ip, [sp, #12]
   1b810:	cmp	r3, ip
   1b814:	beq	1b8bc <__assert_fail@plt+0xa068>
   1b818:	ldrb	r0, [r3, #-1]!
   1b81c:	ldrb	r1, [r2, #-1]!
   1b820:	cmp	r0, r1
   1b824:	beq	1b810 <__assert_fail@plt+0x9fbc>
   1b828:	ldr	r3, [sp, #8]
   1b82c:	add	r5, r5, r3
   1b830:	b	1b844 <__assert_fail@plt+0x9ff0>
   1b834:	mov	r3, r8
   1b838:	ldr	r2, [sp, #4]
   1b83c:	add	r5, r2, r5
   1b840:	add	r5, r5, r3
   1b844:	mov	r0, r9
   1b848:	add	r9, r4, r5
   1b84c:	sub	r2, r9, r0
   1b850:	mov	r1, #0
   1b854:	add	r0, r6, r0
   1b858:	bl	11710 <memchr@plt>
   1b85c:	adds	r3, r9, #0
   1b860:	movne	r3, #1
   1b864:	cmp	r0, #0
   1b868:	movne	r3, #0
   1b86c:	cmp	r3, #0
   1b870:	beq	1b710 <__assert_fail@plt+0x9ebc>
   1b874:	cmp	r4, r8
   1b878:	bls	1b7e8 <__assert_fail@plt+0x9f94>
   1b87c:	add	r3, r8, r5
   1b880:	add	r2, r6, r3
   1b884:	ldrb	r1, [sl]
   1b888:	ldrb	r3, [r6, r3]
   1b88c:	cmp	r1, r3
   1b890:	bne	1b834 <__assert_fail@plt+0x9fe0>
   1b894:	mov	r1, sl
   1b898:	mov	r3, r8
   1b89c:	add	r3, r3, #1
   1b8a0:	cmp	r4, r3
   1b8a4:	beq	1b7e8 <__assert_fail@plt+0x9f94>
   1b8a8:	ldrb	ip, [r1, #1]!
   1b8ac:	ldrb	r0, [r2, #1]!
   1b8b0:	cmp	ip, r0
   1b8b4:	beq	1b89c <__assert_fail@plt+0xa048>
   1b8b8:	b	1b838 <__assert_fail@plt+0x9fe4>
   1b8bc:	add	r0, r6, r5
   1b8c0:	add	sp, sp, #36	; 0x24
   1b8c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b8c8:	ldrb	r3, [r0]
   1b8cc:	cmp	r3, #47	; 0x2f
   1b8d0:	bne	1b8e0 <__assert_fail@plt+0xa08c>
   1b8d4:	ldrb	r3, [r0, #1]!
   1b8d8:	cmp	r3, #47	; 0x2f
   1b8dc:	beq	1b8d4 <__assert_fail@plt+0xa080>
   1b8e0:	ldrb	r2, [r0]
   1b8e4:	cmp	r2, #0
   1b8e8:	bxeq	lr
   1b8ec:	push	{lr}		; (str lr, [sp, #-4]!)
   1b8f0:	mov	r1, r0
   1b8f4:	mov	r3, #0
   1b8f8:	mov	lr, #1
   1b8fc:	mov	ip, r3
   1b900:	b	1b910 <__assert_fail@plt+0xa0bc>
   1b904:	ldrb	r2, [r1, #1]!
   1b908:	cmp	r2, #0
   1b90c:	beq	1b92c <__assert_fail@plt+0xa0d8>
   1b910:	cmp	r2, #47	; 0x2f
   1b914:	moveq	r3, lr
   1b918:	beq	1b904 <__assert_fail@plt+0xa0b0>
   1b91c:	cmp	r3, #0
   1b920:	movne	r0, r1
   1b924:	movne	r3, ip
   1b928:	b	1b904 <__assert_fail@plt+0xa0b0>
   1b92c:	pop	{pc}		; (ldr pc, [sp], #4)
   1b930:	push	{r4, lr}
   1b934:	mov	r4, r0
   1b938:	bl	11674 <strlen@plt>
   1b93c:	cmp	r0, #1
   1b940:	popls	{r4, pc}
   1b944:	sub	r3, r0, #1
   1b948:	add	r2, r4, r3
   1b94c:	ldrb	r1, [r4, r3]
   1b950:	cmp	r1, #47	; 0x2f
   1b954:	popne	{r4, pc}
   1b958:	cmp	r3, #1
   1b95c:	beq	1b980 <__assert_fail@plt+0xa12c>
   1b960:	sub	r0, r3, #1
   1b964:	ldrb	r1, [r2, #-1]!
   1b968:	cmp	r1, #47	; 0x2f
   1b96c:	beq	1b978 <__assert_fail@plt+0xa124>
   1b970:	mov	r0, r3
   1b974:	pop	{r4, pc}
   1b978:	mov	r3, r0
   1b97c:	b	1b958 <__assert_fail@plt+0xa104>
   1b980:	mov	r0, #1
   1b984:	pop	{r4, pc}
   1b988:	ldr	r0, [r0]
   1b98c:	cmp	r0, #0
   1b990:	bxlt	lr
   1b994:	push	{r4, lr}
   1b998:	bl	11830 <close@plt>
   1b99c:	cmp	r0, #0
   1b9a0:	popeq	{r4, pc}
   1b9a4:	ldr	r3, [pc, #12]	; 1b9b8 <__assert_fail@plt+0xa164>
   1b9a8:	mov	r2, #64	; 0x40
   1b9ac:	ldr	r1, [pc, #8]	; 1b9bc <__assert_fail@plt+0xa168>
   1b9b0:	ldr	r0, [pc, #8]	; 1b9c0 <__assert_fail@plt+0xa16c>
   1b9b4:	bl	11854 <__assert_fail@plt>
   1b9b8:	andeq	lr, r1, ip, lsl sp
   1b9bc:	andeq	lr, r1, r4, lsr sp
   1b9c0:	andeq	lr, r1, r8, asr #26
   1b9c4:	push	{r4, r5, r6, lr}
   1b9c8:	mov	r4, r0
   1b9cc:	mov	r2, #18688	; 0x4900
   1b9d0:	ldr	r0, [r0]
   1b9d4:	bl	11698 <openat64@plt>
   1b9d8:	subs	r5, r0, #0
   1b9dc:	blt	1b9f4 <__assert_fail@plt+0xa1a0>
   1b9e0:	mov	r0, r4
   1b9e4:	bl	1b988 <__assert_fail@plt+0xa134>
   1b9e8:	str	r5, [r4]
   1b9ec:	mov	r0, #0
   1b9f0:	pop	{r4, r5, r6, pc}
   1b9f4:	mvn	r0, #0
   1b9f8:	pop	{r4, r5, r6, pc}
   1b9fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ba00:	sub	sp, sp, #20
   1ba04:	mov	r5, r0
   1ba08:	bl	11524 <chdir@plt>
   1ba0c:	subs	r4, r0, #0
   1ba10:	beq	1ba28 <__assert_fail@plt+0xa1d4>
   1ba14:	bl	116b0 <__errno_location@plt>
   1ba18:	mov	r9, r0
   1ba1c:	ldr	r3, [r0]
   1ba20:	cmp	r3, #36	; 0x24
   1ba24:	beq	1ba34 <__assert_fail@plt+0xa1e0>
   1ba28:	mov	r0, r4
   1ba2c:	add	sp, sp, #20
   1ba30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ba34:	mov	r0, r5
   1ba38:	bl	11674 <strlen@plt>
   1ba3c:	mvn	r3, #99	; 0x63
   1ba40:	str	r3, [sp, #12]
   1ba44:	subs	r6, r0, #0
   1ba48:	beq	1bb60 <__assert_fail@plt+0xa30c>
   1ba4c:	cmp	r6, #4096	; 0x1000
   1ba50:	bcc	1bb74 <__assert_fail@plt+0xa320>
   1ba54:	ldr	r1, [pc, #512]	; 1bc5c <__assert_fail@plt+0xa408>
   1ba58:	mov	r0, r5
   1ba5c:	bl	11848 <strspn@plt>
   1ba60:	mov	r4, r0
   1ba64:	cmp	r0, #2
   1ba68:	beq	1bb88 <__assert_fail@plt+0xa334>
   1ba6c:	cmp	r0, #0
   1ba70:	moveq	r4, r5
   1ba74:	bne	1bbe8 <__assert_fail@plt+0xa394>
   1ba78:	ldrb	r3, [r4]
   1ba7c:	cmp	r3, #47	; 0x2f
   1ba80:	beq	1bc04 <__assert_fail@plt+0xa3b0>
   1ba84:	add	r3, r5, r6
   1ba88:	str	r3, [sp, #4]
   1ba8c:	cmp	r4, r3
   1ba90:	bhi	1bc18 <__assert_fail@plt+0xa3c4>
   1ba94:	mov	fp, r3
   1ba98:	mov	r6, r4
   1ba9c:	sub	r3, r3, r4
   1baa0:	cmp	r3, #4096	; 0x1000
   1baa4:	movge	r7, #47	; 0x2f
   1baa8:	movge	sl, #0
   1baac:	ldrge	r8, [pc, #428]	; 1bc60 <__assert_fail@plt+0xa40c>
   1bab0:	blt	1bb18 <__assert_fail@plt+0xa2c4>
   1bab4:	mov	r2, #4096	; 0x1000
   1bab8:	mov	r1, r7
   1babc:	mov	r0, r4
   1bac0:	bl	116a4 <memrchr@plt>
   1bac4:	subs	r5, r0, #0
   1bac8:	beq	1bc2c <__assert_fail@plt+0xa3d8>
   1bacc:	strb	sl, [r5]
   1bad0:	sub	r6, r5, r6
   1bad4:	cmp	r6, r8
   1bad8:	bgt	1bc3c <__assert_fail@plt+0xa3e8>
   1badc:	mov	r1, r4
   1bae0:	add	r0, sp, #12
   1bae4:	bl	1b9c4 <__assert_fail@plt+0xa170>
   1bae8:	strb	r7, [r5]
   1baec:	cmp	r0, #0
   1baf0:	bne	1bb48 <__assert_fail@plt+0xa2f4>
   1baf4:	add	r5, r5, #1
   1baf8:	ldr	r1, [pc, #348]	; 1bc5c <__assert_fail@plt+0xa408>
   1bafc:	mov	r0, r5
   1bb00:	bl	11848 <strspn@plt>
   1bb04:	add	r4, r5, r0
   1bb08:	mov	r6, r4
   1bb0c:	sub	r3, fp, r4
   1bb10:	cmp	r3, r8
   1bb14:	bgt	1bab4 <__assert_fail@plt+0xa260>
   1bb18:	ldr	r3, [sp, #4]
   1bb1c:	cmp	r3, r4
   1bb20:	bls	1bb38 <__assert_fail@plt+0xa2e4>
   1bb24:	mov	r1, r4
   1bb28:	add	r0, sp, #12
   1bb2c:	bl	1b9c4 <__assert_fail@plt+0xa170>
   1bb30:	cmp	r0, #0
   1bb34:	bne	1bb48 <__assert_fail@plt+0xa2f4>
   1bb38:	ldr	r0, [sp, #12]
   1bb3c:	bl	117b8 <fchdir@plt>
   1bb40:	subs	r4, r0, #0
   1bb44:	beq	1bc50 <__assert_fail@plt+0xa3fc>
   1bb48:	ldr	r4, [r9]
   1bb4c:	add	r0, sp, #12
   1bb50:	bl	1b988 <__assert_fail@plt+0xa134>
   1bb54:	str	r4, [r9]
   1bb58:	mvn	r4, #0
   1bb5c:	b	1ba28 <__assert_fail@plt+0xa1d4>
   1bb60:	ldr	r3, [pc, #252]	; 1bc64 <__assert_fail@plt+0xa410>
   1bb64:	mov	r2, #126	; 0x7e
   1bb68:	ldr	r1, [pc, #248]	; 1bc68 <__assert_fail@plt+0xa414>
   1bb6c:	ldr	r0, [pc, #248]	; 1bc6c <__assert_fail@plt+0xa418>
   1bb70:	bl	11854 <__assert_fail@plt>
   1bb74:	ldr	r3, [pc, #232]	; 1bc64 <__assert_fail@plt+0xa410>
   1bb78:	mov	r2, #127	; 0x7f
   1bb7c:	ldr	r1, [pc, #228]	; 1bc68 <__assert_fail@plt+0xa414>
   1bb80:	ldr	r0, [pc, #232]	; 1bc70 <__assert_fail@plt+0xa41c>
   1bb84:	bl	11854 <__assert_fail@plt>
   1bb88:	sub	r2, r6, #3
   1bb8c:	mov	r1, #47	; 0x2f
   1bb90:	add	r0, r5, #3
   1bb94:	bl	11710 <memchr@plt>
   1bb98:	subs	r4, r0, #0
   1bb9c:	moveq	r3, #36	; 0x24
   1bba0:	streq	r3, [r9]
   1bba4:	mvneq	r4, #0
   1bba8:	beq	1ba28 <__assert_fail@plt+0xa1d4>
   1bbac:	mov	r3, #0
   1bbb0:	strb	r3, [r4]
   1bbb4:	mov	r1, r5
   1bbb8:	add	r0, sp, #12
   1bbbc:	bl	1b9c4 <__assert_fail@plt+0xa170>
   1bbc0:	mov	r3, #47	; 0x2f
   1bbc4:	strb	r3, [r4]
   1bbc8:	cmp	r0, #0
   1bbcc:	bne	1bb48 <__assert_fail@plt+0xa2f4>
   1bbd0:	add	r4, r4, #1
   1bbd4:	ldr	r1, [pc, #128]	; 1bc5c <__assert_fail@plt+0xa408>
   1bbd8:	mov	r0, r4
   1bbdc:	bl	11848 <strspn@plt>
   1bbe0:	add	r4, r4, r0
   1bbe4:	b	1ba78 <__assert_fail@plt+0xa224>
   1bbe8:	ldr	r1, [pc, #108]	; 1bc5c <__assert_fail@plt+0xa408>
   1bbec:	add	r0, sp, #12
   1bbf0:	bl	1b9c4 <__assert_fail@plt+0xa170>
   1bbf4:	cmp	r0, #0
   1bbf8:	addeq	r4, r5, r4
   1bbfc:	beq	1ba78 <__assert_fail@plt+0xa224>
   1bc00:	b	1bb48 <__assert_fail@plt+0xa2f4>
   1bc04:	ldr	r3, [pc, #88]	; 1bc64 <__assert_fail@plt+0xa410>
   1bc08:	mov	r2, #162	; 0xa2
   1bc0c:	ldr	r1, [pc, #84]	; 1bc68 <__assert_fail@plt+0xa414>
   1bc10:	ldr	r0, [pc, #92]	; 1bc74 <__assert_fail@plt+0xa420>
   1bc14:	bl	11854 <__assert_fail@plt>
   1bc18:	ldr	r3, [pc, #68]	; 1bc64 <__assert_fail@plt+0xa410>
   1bc1c:	mov	r2, #163	; 0xa3
   1bc20:	ldr	r1, [pc, #64]	; 1bc68 <__assert_fail@plt+0xa414>
   1bc24:	ldr	r0, [pc, #76]	; 1bc78 <__assert_fail@plt+0xa424>
   1bc28:	bl	11854 <__assert_fail@plt>
   1bc2c:	mov	r3, #36	; 0x24
   1bc30:	str	r3, [r9]
   1bc34:	mvn	r4, #0
   1bc38:	b	1ba28 <__assert_fail@plt+0xa1d4>
   1bc3c:	ldr	r3, [pc, #32]	; 1bc64 <__assert_fail@plt+0xa410>
   1bc40:	mov	r2, #179	; 0xb3
   1bc44:	ldr	r1, [pc, #28]	; 1bc68 <__assert_fail@plt+0xa414>
   1bc48:	ldr	r0, [pc, #44]	; 1bc7c <__assert_fail@plt+0xa428>
   1bc4c:	bl	11854 <__assert_fail@plt>
   1bc50:	add	r0, sp, #12
   1bc54:	bl	1b988 <__assert_fail@plt+0xa134>
   1bc58:	b	1ba28 <__assert_fail@plt+0xa1d4>
   1bc5c:	andeq	lr, r1, ip, ror #26
   1bc60:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   1bc64:	andeq	lr, r1, r8, lsr #26
   1bc68:	andeq	lr, r1, r4, lsr sp
   1bc6c:	andeq	lr, r1, r8, asr sp
   1bc70:	andeq	lr, r1, r0, ror #26
   1bc74:	andeq	lr, r1, r0, ror sp
   1bc78:	andeq	lr, r1, ip, ror sp
   1bc7c:	andeq	lr, r1, ip, lsl #27
   1bc80:	push	{r4, r5, r6, lr}
   1bc84:	mov	r5, r0
   1bc88:	bl	11590 <__fpending@plt>
   1bc8c:	mov	r6, r0
   1bc90:	ldr	r4, [r5]
   1bc94:	and	r4, r4, #32
   1bc98:	mov	r0, r5
   1bc9c:	bl	1bcf8 <__assert_fail@plt+0xa4a4>
   1bca0:	cmp	r4, #0
   1bca4:	bne	1bccc <__assert_fail@plt+0xa478>
   1bca8:	cmp	r0, #0
   1bcac:	popeq	{r4, r5, r6, pc}
   1bcb0:	cmp	r6, #0
   1bcb4:	bne	1bce8 <__assert_fail@plt+0xa494>
   1bcb8:	bl	116b0 <__errno_location@plt>
   1bcbc:	ldr	r0, [r0]
   1bcc0:	subs	r0, r0, #9
   1bcc4:	mvnne	r0, #0
   1bcc8:	pop	{r4, r5, r6, pc}
   1bccc:	cmp	r0, #0
   1bcd0:	bne	1bcf0 <__assert_fail@plt+0xa49c>
   1bcd4:	bl	116b0 <__errno_location@plt>
   1bcd8:	mov	r3, #0
   1bcdc:	str	r3, [r0]
   1bce0:	mvn	r0, #0
   1bce4:	pop	{r4, r5, r6, pc}
   1bce8:	mvn	r0, #0
   1bcec:	pop	{r4, r5, r6, pc}
   1bcf0:	mvn	r0, #0
   1bcf4:	pop	{r4, r5, r6, pc}
   1bcf8:	push	{r4, r5, r6, lr}
   1bcfc:	sub	sp, sp, #8
   1bd00:	mov	r4, r0
   1bd04:	bl	116f8 <fileno@plt>
   1bd08:	cmp	r0, #0
   1bd0c:	blt	1bd84 <__assert_fail@plt+0xa530>
   1bd10:	mov	r0, r4
   1bd14:	bl	11608 <__freading@plt>
   1bd18:	cmp	r0, #0
   1bd1c:	beq	1bd50 <__assert_fail@plt+0xa4fc>
   1bd20:	mov	r0, r4
   1bd24:	bl	116f8 <fileno@plt>
   1bd28:	mov	r3, #1
   1bd2c:	str	r3, [sp]
   1bd30:	mov	r2, #0
   1bd34:	mov	r3, #0
   1bd38:	bl	11560 <lseek64@plt>
   1bd3c:	mvn	r2, #0
   1bd40:	mvn	r3, #0
   1bd44:	cmp	r1, r3
   1bd48:	cmpeq	r0, r2
   1bd4c:	beq	1bd90 <__assert_fail@plt+0xa53c>
   1bd50:	mov	r0, r4
   1bd54:	bl	1bddc <__assert_fail@plt+0xa588>
   1bd58:	cmp	r0, #0
   1bd5c:	beq	1bd90 <__assert_fail@plt+0xa53c>
   1bd60:	bl	116b0 <__errno_location@plt>
   1bd64:	mov	r5, r0
   1bd68:	ldr	r6, [r0]
   1bd6c:	mov	r0, r4
   1bd70:	bl	1171c <fclose@plt>
   1bd74:	cmp	r6, #0
   1bd78:	strne	r6, [r5]
   1bd7c:	mvnne	r0, #0
   1bd80:	b	1bd98 <__assert_fail@plt+0xa544>
   1bd84:	mov	r0, r4
   1bd88:	bl	1171c <fclose@plt>
   1bd8c:	b	1bd98 <__assert_fail@plt+0xa544>
   1bd90:	mov	r0, r4
   1bd94:	bl	1171c <fclose@plt>
   1bd98:	add	sp, sp, #8
   1bd9c:	pop	{r4, r5, r6, pc}
   1bda0:	push	{r1, r2, r3}
   1bda4:	push	{lr}		; (str lr, [sp, #-4]!)
   1bda8:	sub	sp, sp, #8
   1bdac:	ldr	r1, [sp, #12]
   1bdb0:	tst	r1, #64	; 0x40
   1bdb4:	addne	r3, sp, #20
   1bdb8:	strne	r3, [sp, #4]
   1bdbc:	ldrne	r2, [sp, #16]
   1bdc0:	moveq	r2, #0
   1bdc4:	bl	115c0 <open64@plt>
   1bdc8:	bl	1bfc0 <__assert_fail@plt+0xa76c>
   1bdcc:	add	sp, sp, #8
   1bdd0:	pop	{lr}		; (ldr lr, [sp], #4)
   1bdd4:	add	sp, sp, #12
   1bdd8:	bx	lr
   1bddc:	push	{r4, lr}
   1bde0:	sub	sp, sp, #8
   1bde4:	subs	r4, r0, #0
   1bde8:	beq	1bdfc <__assert_fail@plt+0xa5a8>
   1bdec:	mov	r0, r4
   1bdf0:	bl	11608 <__freading@plt>
   1bdf4:	cmp	r0, #0
   1bdf8:	bne	1be0c <__assert_fail@plt+0xa5b8>
   1bdfc:	mov	r0, r4
   1be00:	bl	11494 <fflush@plt>
   1be04:	add	sp, sp, #8
   1be08:	pop	{r4, pc}
   1be0c:	ldr	r3, [r4]
   1be10:	tst	r3, #256	; 0x100
   1be14:	bne	1be24 <__assert_fail@plt+0xa5d0>
   1be18:	mov	r0, r4
   1be1c:	bl	11494 <fflush@plt>
   1be20:	b	1be04 <__assert_fail@plt+0xa5b0>
   1be24:	mov	r3, #1
   1be28:	str	r3, [sp]
   1be2c:	mov	r2, #0
   1be30:	mov	r3, #0
   1be34:	mov	r0, r4
   1be38:	bl	1be40 <__assert_fail@plt+0xa5ec>
   1be3c:	b	1be18 <__assert_fail@plt+0xa5c4>
   1be40:	push	{r4, r5, r6, r7, lr}
   1be44:	sub	sp, sp, #12
   1be48:	mov	r4, r0
   1be4c:	mov	r6, r2
   1be50:	mov	r7, r3
   1be54:	ldr	r5, [sp, #32]
   1be58:	ldr	r2, [r0, #8]
   1be5c:	ldr	r3, [r0, #4]
   1be60:	cmp	r2, r3
   1be64:	beq	1be84 <__assert_fail@plt+0xa630>
   1be68:	str	r5, [sp]
   1be6c:	mov	r2, r6
   1be70:	mov	r3, r7
   1be74:	mov	r0, r4
   1be78:	bl	11728 <fseeko64@plt>
   1be7c:	add	sp, sp, #12
   1be80:	pop	{r4, r5, r6, r7, pc}
   1be84:	ldr	r2, [r0, #20]
   1be88:	ldr	r3, [r0, #16]
   1be8c:	cmp	r2, r3
   1be90:	bne	1be68 <__assert_fail@plt+0xa614>
   1be94:	ldr	r3, [r0, #36]	; 0x24
   1be98:	cmp	r3, #0
   1be9c:	bne	1be68 <__assert_fail@plt+0xa614>
   1bea0:	bl	116f8 <fileno@plt>
   1bea4:	str	r5, [sp]
   1bea8:	mov	r2, r6
   1beac:	mov	r3, r7
   1beb0:	bl	11560 <lseek64@plt>
   1beb4:	mvn	r2, #0
   1beb8:	mvn	r3, #0
   1bebc:	cmp	r1, r3
   1bec0:	cmpeq	r0, r2
   1bec4:	beq	1bee0 <__assert_fail@plt+0xa68c>
   1bec8:	ldr	r3, [r4]
   1becc:	bic	r3, r3, #16
   1bed0:	str	r3, [r4]
   1bed4:	strd	r0, [r4, #80]	; 0x50
   1bed8:	mov	r0, #0
   1bedc:	b	1be7c <__assert_fail@plt+0xa628>
   1bee0:	mvn	r0, #0
   1bee4:	b	1be7c <__assert_fail@plt+0xa628>
   1bee8:	push	{r4, lr}
   1beec:	mov	r0, #14
   1bef0:	bl	11788 <nl_langinfo@plt>
   1bef4:	cmp	r0, #0
   1bef8:	beq	1bf10 <__assert_fail@plt+0xa6bc>
   1befc:	ldrb	r2, [r0]
   1bf00:	ldr	r3, [pc, #16]	; 1bf18 <__assert_fail@plt+0xa6c4>
   1bf04:	cmp	r2, #0
   1bf08:	moveq	r0, r3
   1bf0c:	pop	{r4, pc}
   1bf10:	ldr	r0, [pc]	; 1bf18 <__assert_fail@plt+0xa6c4>
   1bf14:	pop	{r4, pc}
   1bf18:	andeq	lr, r1, r0, lsr #27
   1bf1c:	push	{r4, r5, r6, r7, lr}
   1bf20:	sub	sp, sp, #12
   1bf24:	mov	r7, r1
   1bf28:	mov	r5, r2
   1bf2c:	subs	r6, r0, #0
   1bf30:	addeq	r6, sp, #4
   1bf34:	mov	r0, r6
   1bf38:	bl	1159c <mbrtowc@plt>
   1bf3c:	mov	r4, r0
   1bf40:	cmp	r5, #0
   1bf44:	cmnne	r0, #3
   1bf48:	bhi	1bf58 <__assert_fail@plt+0xa704>
   1bf4c:	mov	r0, r4
   1bf50:	add	sp, sp, #12
   1bf54:	pop	{r4, r5, r6, r7, pc}
   1bf58:	mov	r0, #0
   1bf5c:	bl	1c190 <__assert_fail@plt+0xa93c>
   1bf60:	cmp	r0, #0
   1bf64:	ldrbeq	r3, [r7]
   1bf68:	streq	r3, [r6]
   1bf6c:	moveq	r4, #1
   1bf70:	b	1bf4c <__assert_fail@plt+0xa6f8>
   1bf74:	push	{r4, r5, r6, lr}
   1bf78:	mov	r6, r0
   1bf7c:	mov	r5, r1
   1bf80:	subs	r4, r2, #0
   1bf84:	beq	1bfb0 <__assert_fail@plt+0xa75c>
   1bf88:	mov	r1, r4
   1bf8c:	mvn	r0, #0
   1bf90:	bl	1c504 <__assert_fail@plt+0xacb0>
   1bf94:	cmp	r0, r5
   1bf98:	bcs	1bfb0 <__assert_fail@plt+0xa75c>
   1bf9c:	bl	116b0 <__errno_location@plt>
   1bfa0:	mov	r3, #12
   1bfa4:	str	r3, [r0]
   1bfa8:	mov	r0, #0
   1bfac:	pop	{r4, r5, r6, pc}
   1bfb0:	mul	r1, r5, r4
   1bfb4:	mov	r0, r6
   1bfb8:	bl	1b060 <__assert_fail@plt+0x980c>
   1bfbc:	pop	{r4, r5, r6, pc}
   1bfc0:	push	{r4, r5, r6, r7, r8, lr}
   1bfc4:	mov	r4, r0
   1bfc8:	cmp	r0, #2
   1bfcc:	bls	1bfd8 <__assert_fail@plt+0xa784>
   1bfd0:	mov	r0, r4
   1bfd4:	pop	{r4, r5, r6, r7, r8, pc}
   1bfd8:	bl	1c298 <__assert_fail@plt+0xaa44>
   1bfdc:	mov	r6, r0
   1bfe0:	bl	116b0 <__errno_location@plt>
   1bfe4:	mov	r5, r0
   1bfe8:	ldr	r7, [r0]
   1bfec:	mov	r0, r4
   1bff0:	bl	11830 <close@plt>
   1bff4:	str	r7, [r5]
   1bff8:	mov	r4, r6
   1bffc:	b	1bfd0 <__assert_fail@plt+0xa77c>
   1c000:	push	{r4, r5, r6, r7, r8, r9, lr}
   1c004:	sub	sp, sp, #12
   1c008:	str	r1, [sp, #4]
   1c00c:	subs	r6, r0, #0
   1c010:	beq	1c0d4 <__assert_fail@plt+0xa880>
   1c014:	mov	r8, r1
   1c018:	ldr	r3, [sp, #4]
   1c01c:	add	r2, r3, #4
   1c020:	str	r2, [sp, #4]
   1c024:	ldr	r0, [r3]
   1c028:	bl	11674 <strlen@plt>
   1c02c:	mov	r5, r0
   1c030:	mov	r4, r6
   1c034:	b	1c05c <__assert_fail@plt+0xa808>
   1c038:	ldr	r3, [sp, #4]
   1c03c:	add	r2, r3, #4
   1c040:	str	r2, [sp, #4]
   1c044:	ldr	r0, [r3]
   1c048:	bl	11674 <strlen@plt>
   1c04c:	add	r0, r0, r5
   1c050:	cmp	r0, r5
   1c054:	movcs	r5, r0
   1c058:	mvncc	r5, #0
   1c05c:	subs	r4, r4, #1
   1c060:	bne	1c038 <__assert_fail@plt+0xa7e4>
   1c064:	cmp	r5, #0
   1c068:	blt	1c0c0 <__assert_fail@plt+0xa86c>
   1c06c:	add	r0, r5, #1
   1c070:	bl	1a99c <__assert_fail@plt+0x9148>
   1c074:	mov	r9, r0
   1c078:	sub	r8, r8, #4
   1c07c:	mov	r4, r0
   1c080:	ldr	r7, [r8, #4]!
   1c084:	mov	r0, r7
   1c088:	bl	11674 <strlen@plt>
   1c08c:	mov	r5, r0
   1c090:	mov	r2, r0
   1c094:	mov	r1, r7
   1c098:	mov	r0, r4
   1c09c:	bl	114b8 <memcpy@plt>
   1c0a0:	add	r4, r4, r5
   1c0a4:	subs	r6, r6, #1
   1c0a8:	bne	1c080 <__assert_fail@plt+0xa82c>
   1c0ac:	mov	r3, #0
   1c0b0:	strb	r3, [r4]
   1c0b4:	mov	r0, r9
   1c0b8:	add	sp, sp, #12
   1c0bc:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1c0c0:	bl	116b0 <__errno_location@plt>
   1c0c4:	mov	r3, #75	; 0x4b
   1c0c8:	str	r3, [r0]
   1c0cc:	mov	r9, #0
   1c0d0:	b	1c0b4 <__assert_fail@plt+0xa860>
   1c0d4:	mov	r0, #1
   1c0d8:	bl	1a99c <__assert_fail@plt+0x9148>
   1c0dc:	mov	r4, r0
   1c0e0:	mov	r9, r0
   1c0e4:	b	1c0ac <__assert_fail@plt+0xa858>
   1c0e8:	push	{r4, lr}
   1c0ec:	sub	sp, sp, #8
   1c0f0:	ldrb	r2, [r0]
   1c0f4:	cmp	r2, #0
   1c0f8:	beq	1c168 <__assert_fail@plt+0xa914>
   1c0fc:	cmp	r2, #37	; 0x25
   1c100:	bne	1c140 <__assert_fail@plt+0xa8ec>
   1c104:	ldrb	r3, [r0, #1]
   1c108:	cmp	r3, #115	; 0x73
   1c10c:	bne	1c140 <__assert_fail@plt+0xa8ec>
   1c110:	mov	ip, r0
   1c114:	mov	r4, #0
   1c118:	add	r4, r4, #1
   1c11c:	ldrb	lr, [ip, #2]
   1c120:	cmp	lr, #0
   1c124:	beq	1c16c <__assert_fail@plt+0xa918>
   1c128:	cmp	lr, #37	; 0x25
   1c12c:	bne	1c140 <__assert_fail@plt+0xa8ec>
   1c130:	add	ip, ip, #2
   1c134:	ldrb	lr, [ip, #1]
   1c138:	cmp	lr, #115	; 0x73
   1c13c:	beq	1c118 <__assert_fail@plt+0xa8c4>
   1c140:	mov	r3, r1
   1c144:	mov	r2, r0
   1c148:	mov	r1, #1
   1c14c:	add	r0, sp, #4
   1c150:	bl	116d4 <__vasprintf_chk@plt>
   1c154:	cmp	r0, #0
   1c158:	ldrge	r0, [sp, #4]
   1c15c:	blt	1c178 <__assert_fail@plt+0xa924>
   1c160:	add	sp, sp, #8
   1c164:	pop	{r4, pc}
   1c168:	mov	r4, #0
   1c16c:	mov	r0, r4
   1c170:	bl	1c000 <__assert_fail@plt+0xa7ac>
   1c174:	b	1c160 <__assert_fail@plt+0xa90c>
   1c178:	bl	116b0 <__errno_location@plt>
   1c17c:	ldr	r3, [r0]
   1c180:	cmp	r3, #12
   1c184:	movne	r0, #0
   1c188:	bne	1c160 <__assert_fail@plt+0xa90c>
   1c18c:	bl	1af40 <__assert_fail@plt+0x96ec>
   1c190:	push	{lr}		; (str lr, [sp, #-4]!)
   1c194:	sub	sp, sp, #268	; 0x10c
   1c198:	ldr	r2, [pc, #68]	; 1c1e4 <__assert_fail@plt+0xa990>
   1c19c:	add	r1, sp, #4
   1c1a0:	bl	1c1f0 <__assert_fail@plt+0xa99c>
   1c1a4:	cmp	r0, #0
   1c1a8:	movne	r0, #0
   1c1ac:	bne	1c1dc <__assert_fail@plt+0xa988>
   1c1b0:	ldr	r1, [pc, #48]	; 1c1e8 <__assert_fail@plt+0xa994>
   1c1b4:	add	r0, sp, #4
   1c1b8:	bl	11464 <strcmp@plt>
   1c1bc:	cmp	r0, #0
   1c1c0:	moveq	r0, #0
   1c1c4:	beq	1c1dc <__assert_fail@plt+0xa988>
   1c1c8:	ldr	r1, [pc, #28]	; 1c1ec <__assert_fail@plt+0xa998>
   1c1cc:	add	r0, sp, #4
   1c1d0:	bl	11464 <strcmp@plt>
   1c1d4:	adds	r0, r0, #0
   1c1d8:	movne	r0, #1
   1c1dc:	add	sp, sp, #268	; 0x10c
   1c1e0:	pop	{pc}		; (ldr pc, [sp], #4)
   1c1e4:	andeq	r0, r0, r1, lsl #2
   1c1e8:	andeq	lr, r1, r8, lsr #27
   1c1ec:	andeq	lr, r1, ip, lsr #27
   1c1f0:	push	{r4, r5, r6, lr}
   1c1f4:	mov	r6, r1
   1c1f8:	mov	r4, r2
   1c1fc:	mov	r1, #0
   1c200:	bl	11764 <setlocale@plt>
   1c204:	subs	r5, r0, #0
   1c208:	beq	1c22c <__assert_fail@plt+0xa9d8>
   1c20c:	mov	r0, r5
   1c210:	bl	11674 <strlen@plt>
   1c214:	cmp	r4, r0
   1c218:	bhi	1c244 <__assert_fail@plt+0xa9f0>
   1c21c:	cmp	r4, #0
   1c220:	bne	1c25c <__assert_fail@plt+0xaa08>
   1c224:	mov	r0, #34	; 0x22
   1c228:	pop	{r4, r5, r6, pc}
   1c22c:	cmp	r4, #0
   1c230:	beq	1c280 <__assert_fail@plt+0xaa2c>
   1c234:	mov	r3, #0
   1c238:	strb	r3, [r6]
   1c23c:	mov	r0, #22
   1c240:	pop	{r4, r5, r6, pc}
   1c244:	add	r2, r0, #1
   1c248:	mov	r1, r5
   1c24c:	mov	r0, r6
   1c250:	bl	114b8 <memcpy@plt>
   1c254:	mov	r0, #0
   1c258:	pop	{r4, r5, r6, pc}
   1c25c:	sub	r4, r4, #1
   1c260:	mov	r2, r4
   1c264:	mov	r1, r5
   1c268:	mov	r0, r6
   1c26c:	bl	114b8 <memcpy@plt>
   1c270:	mov	r3, #0
   1c274:	strb	r3, [r6, r4]
   1c278:	mov	r0, #34	; 0x22
   1c27c:	pop	{r4, r5, r6, pc}
   1c280:	mov	r0, #22
   1c284:	pop	{r4, r5, r6, pc}
   1c288:	push	{r4, lr}
   1c28c:	mov	r1, #0
   1c290:	bl	11764 <setlocale@plt>
   1c294:	pop	{r4, pc}
   1c298:	push	{r4, lr}
   1c29c:	mov	r2, #3
   1c2a0:	mov	r1, #0
   1c2a4:	bl	1c2ac <__assert_fail@plt+0xaa58>
   1c2a8:	pop	{r4, pc}
   1c2ac:	push	{r1, r2, r3}
   1c2b0:	push	{r4, r5, r6, lr}
   1c2b4:	sub	sp, sp, #12
   1c2b8:	mov	r5, r0
   1c2bc:	ldr	r1, [sp, #28]
   1c2c0:	add	r3, sp, #32
   1c2c4:	str	r3, [sp, #4]
   1c2c8:	cmp	r1, #0
   1c2cc:	beq	1c314 <__assert_fail@plt+0xaac0>
   1c2d0:	ldr	r3, [pc, #540]	; 1c4f4 <__assert_fail@plt+0xaca0>
   1c2d4:	cmp	r1, r3
   1c2d8:	beq	1c344 <__assert_fail@plt+0xaaf0>
   1c2dc:	cmp	r1, #11
   1c2e0:	beq	1c4e4 <__assert_fail@plt+0xac90>
   1c2e4:	bgt	1c470 <__assert_fail@plt+0xac1c>
   1c2e8:	cmp	r1, #3
   1c2ec:	beq	1c4e4 <__assert_fail@plt+0xac90>
   1c2f0:	ble	1c430 <__assert_fail@plt+0xabdc>
   1c2f4:	cmp	r1, #8
   1c2f8:	beq	1c450 <__assert_fail@plt+0xabfc>
   1c2fc:	ble	1c448 <__assert_fail@plt+0xabf4>
   1c300:	cmp	r1, #9
   1c304:	beq	1c4e4 <__assert_fail@plt+0xac90>
   1c308:	cmp	r1, #10
   1c30c:	bne	1c4a8 <__assert_fail@plt+0xac54>
   1c310:	b	1c450 <__assert_fail@plt+0xabfc>
   1c314:	ldr	r3, [sp, #4]
   1c318:	add	r2, r3, #4
   1c31c:	str	r2, [sp, #4]
   1c320:	ldr	r2, [r3]
   1c324:	mov	r1, #0
   1c328:	bl	1174c <fcntl64@plt>
   1c32c:	mov	r4, r0
   1c330:	mov	r0, r4
   1c334:	add	sp, sp, #12
   1c338:	pop	{r4, r5, r6, lr}
   1c33c:	add	sp, sp, #12
   1c340:	bx	lr
   1c344:	ldr	r3, [sp, #4]
   1c348:	add	r2, r3, #4
   1c34c:	str	r2, [sp, #4]
   1c350:	ldr	r6, [r3]
   1c354:	ldr	r3, [pc, #412]	; 1c4f8 <__assert_fail@plt+0xaca4>
   1c358:	ldr	r3, [r3]
   1c35c:	cmp	r3, #0
   1c360:	blt	1c3c0 <__assert_fail@plt+0xab6c>
   1c364:	mov	r2, r6
   1c368:	ldr	r1, [pc, #388]	; 1c4f4 <__assert_fail@plt+0xaca0>
   1c36c:	bl	1174c <fcntl64@plt>
   1c370:	subs	r4, r0, #0
   1c374:	blt	1c388 <__assert_fail@plt+0xab34>
   1c378:	mov	r2, #1
   1c37c:	ldr	r3, [pc, #372]	; 1c4f8 <__assert_fail@plt+0xaca4>
   1c380:	str	r2, [r3]
   1c384:	b	1c330 <__assert_fail@plt+0xaadc>
   1c388:	bl	116b0 <__errno_location@plt>
   1c38c:	ldr	r3, [r0]
   1c390:	cmp	r3, #22
   1c394:	bne	1c378 <__assert_fail@plt+0xab24>
   1c398:	mov	r2, r6
   1c39c:	mov	r1, #0
   1c3a0:	mov	r0, r5
   1c3a4:	bl	1174c <fcntl64@plt>
   1c3a8:	subs	r4, r0, #0
   1c3ac:	blt	1c330 <__assert_fail@plt+0xaadc>
   1c3b0:	mvn	r2, #0
   1c3b4:	ldr	r3, [pc, #316]	; 1c4f8 <__assert_fail@plt+0xaca4>
   1c3b8:	str	r2, [r3]
   1c3bc:	b	1c3e4 <__assert_fail@plt+0xab90>
   1c3c0:	mov	r2, r6
   1c3c4:	mov	r1, #0
   1c3c8:	bl	1174c <fcntl64@plt>
   1c3cc:	subs	r4, r0, #0
   1c3d0:	blt	1c330 <__assert_fail@plt+0xaadc>
   1c3d4:	ldr	r3, [pc, #284]	; 1c4f8 <__assert_fail@plt+0xaca4>
   1c3d8:	ldr	r3, [r3]
   1c3dc:	cmn	r3, #1
   1c3e0:	bne	1c330 <__assert_fail@plt+0xaadc>
   1c3e4:	mov	r1, #1
   1c3e8:	mov	r0, r4
   1c3ec:	bl	1174c <fcntl64@plt>
   1c3f0:	subs	r2, r0, #0
   1c3f4:	blt	1c410 <__assert_fail@plt+0xabbc>
   1c3f8:	orr	r2, r2, #1
   1c3fc:	mov	r1, #2
   1c400:	mov	r0, r4
   1c404:	bl	1174c <fcntl64@plt>
   1c408:	cmn	r0, #1
   1c40c:	bne	1c330 <__assert_fail@plt+0xaadc>
   1c410:	bl	116b0 <__errno_location@plt>
   1c414:	mov	r5, r0
   1c418:	ldr	r6, [r0]
   1c41c:	mov	r0, r4
   1c420:	bl	11830 <close@plt>
   1c424:	str	r6, [r5]
   1c428:	mvn	r4, #0
   1c42c:	b	1c330 <__assert_fail@plt+0xaadc>
   1c430:	cmp	r1, #1
   1c434:	beq	1c4e4 <__assert_fail@plt+0xac90>
   1c438:	bgt	1c450 <__assert_fail@plt+0xabfc>
   1c43c:	cmp	r1, #0
   1c440:	bne	1c4a8 <__assert_fail@plt+0xac54>
   1c444:	b	1c450 <__assert_fail@plt+0xabfc>
   1c448:	cmp	r1, #4
   1c44c:	bne	1c4a8 <__assert_fail@plt+0xac54>
   1c450:	ldr	r3, [sp, #4]
   1c454:	add	r2, r3, #4
   1c458:	str	r2, [sp, #4]
   1c45c:	ldr	r2, [r3]
   1c460:	mov	r0, r5
   1c464:	bl	1174c <fcntl64@plt>
   1c468:	mov	r4, r0
   1c46c:	b	1c330 <__assert_fail@plt+0xaadc>
   1c470:	ldr	r3, [pc, #132]	; 1c4fc <__assert_fail@plt+0xaca8>
   1c474:	cmp	r1, r3
   1c478:	bgt	1c4c8 <__assert_fail@plt+0xac74>
   1c47c:	sub	r3, r3, #1
   1c480:	cmp	r1, r3
   1c484:	bge	1c450 <__assert_fail@plt+0xabfc>
   1c488:	sub	r3, r3, #5
   1c48c:	cmp	r1, r3
   1c490:	beq	1c4e4 <__assert_fail@plt+0xac90>
   1c494:	add	r3, r3, #1
   1c498:	cmp	r1, r3
   1c49c:	beq	1c450 <__assert_fail@plt+0xabfc>
   1c4a0:	cmp	r1, #1024	; 0x400
   1c4a4:	beq	1c450 <__assert_fail@plt+0xabfc>
   1c4a8:	ldr	r3, [sp, #4]
   1c4ac:	add	r2, r3, #4
   1c4b0:	str	r2, [sp, #4]
   1c4b4:	ldr	r2, [r3]
   1c4b8:	mov	r0, r5
   1c4bc:	bl	1174c <fcntl64@plt>
   1c4c0:	mov	r4, r0
   1c4c4:	b	1c330 <__assert_fail@plt+0xaadc>
   1c4c8:	ldr	r3, [pc, #48]	; 1c500 <__assert_fail@plt+0xacac>
   1c4cc:	cmp	r1, r3
   1c4d0:	beq	1c450 <__assert_fail@plt+0xabfc>
   1c4d4:	blt	1c4e4 <__assert_fail@plt+0xac90>
   1c4d8:	add	r3, r3, #1
   1c4dc:	cmp	r1, r3
   1c4e0:	bne	1c4a8 <__assert_fail@plt+0xac54>
   1c4e4:	mov	r0, r5
   1c4e8:	bl	1174c <fcntl64@plt>
   1c4ec:	mov	r4, r0
   1c4f0:	b	1c330 <__assert_fail@plt+0xaadc>
   1c4f4:	andeq	r0, r0, r6, lsl #8
   1c4f8:	andeq	pc, r2, ip, lsr #7
   1c4fc:	andeq	r0, r0, r7, lsl #8
   1c500:	andeq	r0, r0, r9, lsl #8
   1c504:	subs	r2, r1, #1
   1c508:	bxeq	lr
   1c50c:	bcc	1c6e4 <__assert_fail@plt+0xae90>
   1c510:	cmp	r0, r1
   1c514:	bls	1c6c8 <__assert_fail@plt+0xae74>
   1c518:	tst	r1, r2
   1c51c:	beq	1c6d4 <__assert_fail@plt+0xae80>
   1c520:	clz	r3, r0
   1c524:	clz	r2, r1
   1c528:	sub	r3, r2, r3
   1c52c:	rsbs	r3, r3, #31
   1c530:	addne	r3, r3, r3, lsl #1
   1c534:	mov	r2, #0
   1c538:	addne	pc, pc, r3, lsl #2
   1c53c:	nop			; (mov r0, r0)
   1c540:	cmp	r0, r1, lsl #31
   1c544:	adc	r2, r2, r2
   1c548:	subcs	r0, r0, r1, lsl #31
   1c54c:	cmp	r0, r1, lsl #30
   1c550:	adc	r2, r2, r2
   1c554:	subcs	r0, r0, r1, lsl #30
   1c558:	cmp	r0, r1, lsl #29
   1c55c:	adc	r2, r2, r2
   1c560:	subcs	r0, r0, r1, lsl #29
   1c564:	cmp	r0, r1, lsl #28
   1c568:	adc	r2, r2, r2
   1c56c:	subcs	r0, r0, r1, lsl #28
   1c570:	cmp	r0, r1, lsl #27
   1c574:	adc	r2, r2, r2
   1c578:	subcs	r0, r0, r1, lsl #27
   1c57c:	cmp	r0, r1, lsl #26
   1c580:	adc	r2, r2, r2
   1c584:	subcs	r0, r0, r1, lsl #26
   1c588:	cmp	r0, r1, lsl #25
   1c58c:	adc	r2, r2, r2
   1c590:	subcs	r0, r0, r1, lsl #25
   1c594:	cmp	r0, r1, lsl #24
   1c598:	adc	r2, r2, r2
   1c59c:	subcs	r0, r0, r1, lsl #24
   1c5a0:	cmp	r0, r1, lsl #23
   1c5a4:	adc	r2, r2, r2
   1c5a8:	subcs	r0, r0, r1, lsl #23
   1c5ac:	cmp	r0, r1, lsl #22
   1c5b0:	adc	r2, r2, r2
   1c5b4:	subcs	r0, r0, r1, lsl #22
   1c5b8:	cmp	r0, r1, lsl #21
   1c5bc:	adc	r2, r2, r2
   1c5c0:	subcs	r0, r0, r1, lsl #21
   1c5c4:	cmp	r0, r1, lsl #20
   1c5c8:	adc	r2, r2, r2
   1c5cc:	subcs	r0, r0, r1, lsl #20
   1c5d0:	cmp	r0, r1, lsl #19
   1c5d4:	adc	r2, r2, r2
   1c5d8:	subcs	r0, r0, r1, lsl #19
   1c5dc:	cmp	r0, r1, lsl #18
   1c5e0:	adc	r2, r2, r2
   1c5e4:	subcs	r0, r0, r1, lsl #18
   1c5e8:	cmp	r0, r1, lsl #17
   1c5ec:	adc	r2, r2, r2
   1c5f0:	subcs	r0, r0, r1, lsl #17
   1c5f4:	cmp	r0, r1, lsl #16
   1c5f8:	adc	r2, r2, r2
   1c5fc:	subcs	r0, r0, r1, lsl #16
   1c600:	cmp	r0, r1, lsl #15
   1c604:	adc	r2, r2, r2
   1c608:	subcs	r0, r0, r1, lsl #15
   1c60c:	cmp	r0, r1, lsl #14
   1c610:	adc	r2, r2, r2
   1c614:	subcs	r0, r0, r1, lsl #14
   1c618:	cmp	r0, r1, lsl #13
   1c61c:	adc	r2, r2, r2
   1c620:	subcs	r0, r0, r1, lsl #13
   1c624:	cmp	r0, r1, lsl #12
   1c628:	adc	r2, r2, r2
   1c62c:	subcs	r0, r0, r1, lsl #12
   1c630:	cmp	r0, r1, lsl #11
   1c634:	adc	r2, r2, r2
   1c638:	subcs	r0, r0, r1, lsl #11
   1c63c:	cmp	r0, r1, lsl #10
   1c640:	adc	r2, r2, r2
   1c644:	subcs	r0, r0, r1, lsl #10
   1c648:	cmp	r0, r1, lsl #9
   1c64c:	adc	r2, r2, r2
   1c650:	subcs	r0, r0, r1, lsl #9
   1c654:	cmp	r0, r1, lsl #8
   1c658:	adc	r2, r2, r2
   1c65c:	subcs	r0, r0, r1, lsl #8
   1c660:	cmp	r0, r1, lsl #7
   1c664:	adc	r2, r2, r2
   1c668:	subcs	r0, r0, r1, lsl #7
   1c66c:	cmp	r0, r1, lsl #6
   1c670:	adc	r2, r2, r2
   1c674:	subcs	r0, r0, r1, lsl #6
   1c678:	cmp	r0, r1, lsl #5
   1c67c:	adc	r2, r2, r2
   1c680:	subcs	r0, r0, r1, lsl #5
   1c684:	cmp	r0, r1, lsl #4
   1c688:	adc	r2, r2, r2
   1c68c:	subcs	r0, r0, r1, lsl #4
   1c690:	cmp	r0, r1, lsl #3
   1c694:	adc	r2, r2, r2
   1c698:	subcs	r0, r0, r1, lsl #3
   1c69c:	cmp	r0, r1, lsl #2
   1c6a0:	adc	r2, r2, r2
   1c6a4:	subcs	r0, r0, r1, lsl #2
   1c6a8:	cmp	r0, r1, lsl #1
   1c6ac:	adc	r2, r2, r2
   1c6b0:	subcs	r0, r0, r1, lsl #1
   1c6b4:	cmp	r0, r1
   1c6b8:	adc	r2, r2, r2
   1c6bc:	subcs	r0, r0, r1
   1c6c0:	mov	r0, r2
   1c6c4:	bx	lr
   1c6c8:	moveq	r0, #1
   1c6cc:	movne	r0, #0
   1c6d0:	bx	lr
   1c6d4:	clz	r2, r1
   1c6d8:	rsb	r2, r2, #31
   1c6dc:	lsr	r0, r0, r2
   1c6e0:	bx	lr
   1c6e4:	cmp	r0, #0
   1c6e8:	mvnne	r0, #0
   1c6ec:	b	1ca24 <__assert_fail@plt+0xb1d0>
   1c6f0:	cmp	r1, #0
   1c6f4:	beq	1c6e4 <__assert_fail@plt+0xae90>
   1c6f8:	push	{r0, r1, lr}
   1c6fc:	bl	1c504 <__assert_fail@plt+0xacb0>
   1c700:	pop	{r1, r2, lr}
   1c704:	mul	r3, r2, r0
   1c708:	sub	r1, r1, r3
   1c70c:	bx	lr
   1c710:	cmp	r1, #0
   1c714:	beq	1c920 <__assert_fail@plt+0xb0cc>
   1c718:	eor	ip, r0, r1
   1c71c:	rsbmi	r1, r1, #0
   1c720:	subs	r2, r1, #1
   1c724:	beq	1c8ec <__assert_fail@plt+0xb098>
   1c728:	movs	r3, r0
   1c72c:	rsbmi	r3, r0, #0
   1c730:	cmp	r3, r1
   1c734:	bls	1c8f8 <__assert_fail@plt+0xb0a4>
   1c738:	tst	r1, r2
   1c73c:	beq	1c908 <__assert_fail@plt+0xb0b4>
   1c740:	clz	r2, r3
   1c744:	clz	r0, r1
   1c748:	sub	r2, r0, r2
   1c74c:	rsbs	r2, r2, #31
   1c750:	addne	r2, r2, r2, lsl #1
   1c754:	mov	r0, #0
   1c758:	addne	pc, pc, r2, lsl #2
   1c75c:	nop			; (mov r0, r0)
   1c760:	cmp	r3, r1, lsl #31
   1c764:	adc	r0, r0, r0
   1c768:	subcs	r3, r3, r1, lsl #31
   1c76c:	cmp	r3, r1, lsl #30
   1c770:	adc	r0, r0, r0
   1c774:	subcs	r3, r3, r1, lsl #30
   1c778:	cmp	r3, r1, lsl #29
   1c77c:	adc	r0, r0, r0
   1c780:	subcs	r3, r3, r1, lsl #29
   1c784:	cmp	r3, r1, lsl #28
   1c788:	adc	r0, r0, r0
   1c78c:	subcs	r3, r3, r1, lsl #28
   1c790:	cmp	r3, r1, lsl #27
   1c794:	adc	r0, r0, r0
   1c798:	subcs	r3, r3, r1, lsl #27
   1c79c:	cmp	r3, r1, lsl #26
   1c7a0:	adc	r0, r0, r0
   1c7a4:	subcs	r3, r3, r1, lsl #26
   1c7a8:	cmp	r3, r1, lsl #25
   1c7ac:	adc	r0, r0, r0
   1c7b0:	subcs	r3, r3, r1, lsl #25
   1c7b4:	cmp	r3, r1, lsl #24
   1c7b8:	adc	r0, r0, r0
   1c7bc:	subcs	r3, r3, r1, lsl #24
   1c7c0:	cmp	r3, r1, lsl #23
   1c7c4:	adc	r0, r0, r0
   1c7c8:	subcs	r3, r3, r1, lsl #23
   1c7cc:	cmp	r3, r1, lsl #22
   1c7d0:	adc	r0, r0, r0
   1c7d4:	subcs	r3, r3, r1, lsl #22
   1c7d8:	cmp	r3, r1, lsl #21
   1c7dc:	adc	r0, r0, r0
   1c7e0:	subcs	r3, r3, r1, lsl #21
   1c7e4:	cmp	r3, r1, lsl #20
   1c7e8:	adc	r0, r0, r0
   1c7ec:	subcs	r3, r3, r1, lsl #20
   1c7f0:	cmp	r3, r1, lsl #19
   1c7f4:	adc	r0, r0, r0
   1c7f8:	subcs	r3, r3, r1, lsl #19
   1c7fc:	cmp	r3, r1, lsl #18
   1c800:	adc	r0, r0, r0
   1c804:	subcs	r3, r3, r1, lsl #18
   1c808:	cmp	r3, r1, lsl #17
   1c80c:	adc	r0, r0, r0
   1c810:	subcs	r3, r3, r1, lsl #17
   1c814:	cmp	r3, r1, lsl #16
   1c818:	adc	r0, r0, r0
   1c81c:	subcs	r3, r3, r1, lsl #16
   1c820:	cmp	r3, r1, lsl #15
   1c824:	adc	r0, r0, r0
   1c828:	subcs	r3, r3, r1, lsl #15
   1c82c:	cmp	r3, r1, lsl #14
   1c830:	adc	r0, r0, r0
   1c834:	subcs	r3, r3, r1, lsl #14
   1c838:	cmp	r3, r1, lsl #13
   1c83c:	adc	r0, r0, r0
   1c840:	subcs	r3, r3, r1, lsl #13
   1c844:	cmp	r3, r1, lsl #12
   1c848:	adc	r0, r0, r0
   1c84c:	subcs	r3, r3, r1, lsl #12
   1c850:	cmp	r3, r1, lsl #11
   1c854:	adc	r0, r0, r0
   1c858:	subcs	r3, r3, r1, lsl #11
   1c85c:	cmp	r3, r1, lsl #10
   1c860:	adc	r0, r0, r0
   1c864:	subcs	r3, r3, r1, lsl #10
   1c868:	cmp	r3, r1, lsl #9
   1c86c:	adc	r0, r0, r0
   1c870:	subcs	r3, r3, r1, lsl #9
   1c874:	cmp	r3, r1, lsl #8
   1c878:	adc	r0, r0, r0
   1c87c:	subcs	r3, r3, r1, lsl #8
   1c880:	cmp	r3, r1, lsl #7
   1c884:	adc	r0, r0, r0
   1c888:	subcs	r3, r3, r1, lsl #7
   1c88c:	cmp	r3, r1, lsl #6
   1c890:	adc	r0, r0, r0
   1c894:	subcs	r3, r3, r1, lsl #6
   1c898:	cmp	r3, r1, lsl #5
   1c89c:	adc	r0, r0, r0
   1c8a0:	subcs	r3, r3, r1, lsl #5
   1c8a4:	cmp	r3, r1, lsl #4
   1c8a8:	adc	r0, r0, r0
   1c8ac:	subcs	r3, r3, r1, lsl #4
   1c8b0:	cmp	r3, r1, lsl #3
   1c8b4:	adc	r0, r0, r0
   1c8b8:	subcs	r3, r3, r1, lsl #3
   1c8bc:	cmp	r3, r1, lsl #2
   1c8c0:	adc	r0, r0, r0
   1c8c4:	subcs	r3, r3, r1, lsl #2
   1c8c8:	cmp	r3, r1, lsl #1
   1c8cc:	adc	r0, r0, r0
   1c8d0:	subcs	r3, r3, r1, lsl #1
   1c8d4:	cmp	r3, r1
   1c8d8:	adc	r0, r0, r0
   1c8dc:	subcs	r3, r3, r1
   1c8e0:	cmp	ip, #0
   1c8e4:	rsbmi	r0, r0, #0
   1c8e8:	bx	lr
   1c8ec:	teq	ip, r0
   1c8f0:	rsbmi	r0, r0, #0
   1c8f4:	bx	lr
   1c8f8:	movcc	r0, #0
   1c8fc:	asreq	r0, ip, #31
   1c900:	orreq	r0, r0, #1
   1c904:	bx	lr
   1c908:	clz	r2, r1
   1c90c:	rsb	r2, r2, #31
   1c910:	cmp	ip, #0
   1c914:	lsr	r0, r3, r2
   1c918:	rsbmi	r0, r0, #0
   1c91c:	bx	lr
   1c920:	cmp	r0, #0
   1c924:	mvngt	r0, #-2147483648	; 0x80000000
   1c928:	movlt	r0, #-2147483648	; 0x80000000
   1c92c:	b	1ca24 <__assert_fail@plt+0xb1d0>
   1c930:	cmp	r1, #0
   1c934:	beq	1c920 <__assert_fail@plt+0xb0cc>
   1c938:	push	{r0, r1, lr}
   1c93c:	bl	1c718 <__assert_fail@plt+0xaec4>
   1c940:	pop	{r1, r2, lr}
   1c944:	mul	r3, r2, r0
   1c948:	sub	r1, r1, r3
   1c94c:	bx	lr
   1c950:	cmp	r3, #0
   1c954:	cmpeq	r2, #0
   1c958:	bne	1c97c <__assert_fail@plt+0xb128>
   1c95c:	cmp	r1, #0
   1c960:	movlt	r1, #-2147483648	; 0x80000000
   1c964:	movlt	r0, #0
   1c968:	blt	1c978 <__assert_fail@plt+0xb124>
   1c96c:	cmpeq	r0, #0
   1c970:	mvnne	r1, #-2147483648	; 0x80000000
   1c974:	mvnne	r0, #0
   1c978:	b	1ca24 <__assert_fail@plt+0xb1d0>
   1c97c:	sub	sp, sp, #8
   1c980:	push	{sp, lr}
   1c984:	cmp	r1, #0
   1c988:	blt	1c9a8 <__assert_fail@plt+0xb154>
   1c98c:	cmp	r3, #0
   1c990:	blt	1c9dc <__assert_fail@plt+0xb188>
   1c994:	bl	1ca34 <__assert_fail@plt+0xb1e0>
   1c998:	ldr	lr, [sp, #4]
   1c99c:	add	sp, sp, #8
   1c9a0:	pop	{r2, r3}
   1c9a4:	bx	lr
   1c9a8:	rsbs	r0, r0, #0
   1c9ac:	sbc	r1, r1, r1, lsl #1
   1c9b0:	cmp	r3, #0
   1c9b4:	blt	1ca00 <__assert_fail@plt+0xb1ac>
   1c9b8:	bl	1ca34 <__assert_fail@plt+0xb1e0>
   1c9bc:	ldr	lr, [sp, #4]
   1c9c0:	add	sp, sp, #8
   1c9c4:	pop	{r2, r3}
   1c9c8:	rsbs	r0, r0, #0
   1c9cc:	sbc	r1, r1, r1, lsl #1
   1c9d0:	rsbs	r2, r2, #0
   1c9d4:	sbc	r3, r3, r3, lsl #1
   1c9d8:	bx	lr
   1c9dc:	rsbs	r2, r2, #0
   1c9e0:	sbc	r3, r3, r3, lsl #1
   1c9e4:	bl	1ca34 <__assert_fail@plt+0xb1e0>
   1c9e8:	ldr	lr, [sp, #4]
   1c9ec:	add	sp, sp, #8
   1c9f0:	pop	{r2, r3}
   1c9f4:	rsbs	r0, r0, #0
   1c9f8:	sbc	r1, r1, r1, lsl #1
   1c9fc:	bx	lr
   1ca00:	rsbs	r2, r2, #0
   1ca04:	sbc	r3, r3, r3, lsl #1
   1ca08:	bl	1ca34 <__assert_fail@plt+0xb1e0>
   1ca0c:	ldr	lr, [sp, #4]
   1ca10:	add	sp, sp, #8
   1ca14:	pop	{r2, r3}
   1ca18:	rsbs	r2, r2, #0
   1ca1c:	sbc	r3, r3, r3, lsl #1
   1ca20:	bx	lr
   1ca24:	push	{r1, lr}
   1ca28:	mov	r0, #8
   1ca2c:	bl	11434 <raise@plt>
   1ca30:	pop	{r1, pc}
   1ca34:	cmp	r1, r3
   1ca38:	push	{r4, r5, r6, r7, r8, r9, lr}
   1ca3c:	cmpeq	r0, r2
   1ca40:	mov	r4, r0
   1ca44:	mov	r5, r1
   1ca48:	ldr	r9, [sp, #28]
   1ca4c:	movcc	r0, #0
   1ca50:	movcc	r1, #0
   1ca54:	bcc	1cb4c <__assert_fail@plt+0xb2f8>
   1ca58:	cmp	r3, #0
   1ca5c:	clzeq	ip, r2
   1ca60:	clzne	ip, r3
   1ca64:	addeq	ip, ip, #32
   1ca68:	cmp	r5, #0
   1ca6c:	clzeq	r1, r4
   1ca70:	addeq	r1, r1, #32
   1ca74:	clzne	r1, r5
   1ca78:	sub	ip, ip, r1
   1ca7c:	sub	lr, ip, #32
   1ca80:	lsl	r7, r3, ip
   1ca84:	rsb	r8, ip, #32
   1ca88:	orr	r7, r7, r2, lsl lr
   1ca8c:	orr	r7, r7, r2, lsr r8
   1ca90:	lsl	r6, r2, ip
   1ca94:	cmp	r5, r7
   1ca98:	cmpeq	r4, r6
   1ca9c:	movcc	r0, #0
   1caa0:	movcc	r1, #0
   1caa4:	bcc	1cac0 <__assert_fail@plt+0xb26c>
   1caa8:	mov	r3, #1
   1caac:	subs	r4, r4, r6
   1cab0:	lsl	r1, r3, lr
   1cab4:	lsl	r0, r3, ip
   1cab8:	orr	r1, r1, r3, lsr r8
   1cabc:	sbc	r5, r5, r7
   1cac0:	cmp	ip, #0
   1cac4:	beq	1cb4c <__assert_fail@plt+0xb2f8>
   1cac8:	lsrs	r3, r7, #1
   1cacc:	rrx	r2, r6
   1cad0:	mov	r6, ip
   1cad4:	b	1caf8 <__assert_fail@plt+0xb2a4>
   1cad8:	subs	r4, r4, r2
   1cadc:	sbc	r5, r5, r3
   1cae0:	adds	r4, r4, r4
   1cae4:	adc	r5, r5, r5
   1cae8:	adds	r4, r4, #1
   1caec:	adc	r5, r5, #0
   1caf0:	subs	r6, r6, #1
   1caf4:	beq	1cb14 <__assert_fail@plt+0xb2c0>
   1caf8:	cmp	r5, r3
   1cafc:	cmpeq	r4, r2
   1cb00:	bcs	1cad8 <__assert_fail@plt+0xb284>
   1cb04:	adds	r4, r4, r4
   1cb08:	adc	r5, r5, r5
   1cb0c:	subs	r6, r6, #1
   1cb10:	bne	1caf8 <__assert_fail@plt+0xb2a4>
   1cb14:	lsr	r6, r4, ip
   1cb18:	lsr	r7, r5, ip
   1cb1c:	orr	r6, r6, r5, lsl r8
   1cb20:	adds	r2, r0, r4
   1cb24:	orr	r6, r6, r5, lsr lr
   1cb28:	adc	r3, r1, r5
   1cb2c:	lsl	r1, r7, ip
   1cb30:	orr	r1, r1, r6, lsl lr
   1cb34:	lsl	r0, r6, ip
   1cb38:	orr	r1, r1, r6, lsr r8
   1cb3c:	subs	r0, r2, r0
   1cb40:	mov	r4, r6
   1cb44:	mov	r5, r7
   1cb48:	sbc	r1, r3, r1
   1cb4c:	cmp	r9, #0
   1cb50:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   1cb54:	strd	r4, [r9]
   1cb58:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1cb5c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1cb60:	mov	r7, r0
   1cb64:	ldr	r6, [pc, #72]	; 1cbb4 <__assert_fail@plt+0xb360>
   1cb68:	ldr	r5, [pc, #72]	; 1cbb8 <__assert_fail@plt+0xb364>
   1cb6c:	add	r6, pc, r6
   1cb70:	add	r5, pc, r5
   1cb74:	sub	r6, r6, r5
   1cb78:	mov	r8, r1
   1cb7c:	mov	r9, r2
   1cb80:	bl	113fc <calloc@plt-0x20>
   1cb84:	asrs	r6, r6, #2
   1cb88:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1cb8c:	mov	r4, #0
   1cb90:	add	r4, r4, #1
   1cb94:	ldr	r3, [r5], #4
   1cb98:	mov	r2, r9
   1cb9c:	mov	r1, r8
   1cba0:	mov	r0, r7
   1cba4:	blx	r3
   1cba8:	cmp	r6, r4
   1cbac:	bne	1cb90 <__assert_fail@plt+0xb33c>
   1cbb0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1cbb4:	muleq	r1, r4, r3
   1cbb8:	andeq	r2, r1, ip, lsl #7
   1cbbc:	bx	lr
   1cbc0:	ldr	r3, [pc, #12]	; 1cbd4 <__assert_fail@plt+0xb380>
   1cbc4:	mov	r1, #0
   1cbc8:	add	r3, pc, r3
   1cbcc:	ldr	r2, [r3]
   1cbd0:	b	116c8 <__cxa_atexit@plt>
   1cbd4:			; <UNDEFINED> instruction: 0x000125b0

Disassembly of section .fini:

0001cbd8 <.fini>:
   1cbd8:	push	{r3, lr}
   1cbdc:	pop	{r3, pc}
