
../repos/coreutils/src/echo:     file format elf32-littlearm


Disassembly of section .init:

00010c24 <.init>:
   10c24:	push	{r3, lr}
   10c28:	bl	10e90 <__assert_fail@plt+0x48>
   10c2c:	pop	{r3, pc}

Disassembly of section .plt:

00010c30 <calloc@plt-0x14>:
   10c30:	push	{lr}		; (str lr, [sp, #-4]!)
   10c34:	ldr	lr, [pc, #4]	; 10c40 <calloc@plt-0x4>
   10c38:	add	lr, pc, lr
   10c3c:	ldr	pc, [lr, #8]!
   10c40:	andeq	r4, r1, r0, asr #7

00010c44 <calloc@plt>:
   10c44:	add	ip, pc, #0, 12
   10c48:	add	ip, ip, #20, 20	; 0x14000
   10c4c:	ldr	pc, [ip, #960]!	; 0x3c0

00010c50 <fputs_unlocked@plt>:
   10c50:	add	ip, pc, #0, 12
   10c54:	add	ip, ip, #20, 20	; 0x14000
   10c58:	ldr	pc, [ip, #952]!	; 0x3b8

00010c5c <strcmp@plt>:
   10c5c:	add	ip, pc, #0, 12
   10c60:	add	ip, ip, #20, 20	; 0x14000
   10c64:	ldr	pc, [ip, #944]!	; 0x3b0

00010c68 <fflush@plt>:
   10c68:	add	ip, pc, #0, 12
   10c6c:	add	ip, ip, #20, 20	; 0x14000
   10c70:	ldr	pc, [ip, #936]!	; 0x3a8

00010c74 <free@plt>:
   10c74:	add	ip, pc, #0, 12
   10c78:	add	ip, ip, #20, 20	; 0x14000
   10c7c:	ldr	pc, [ip, #928]!	; 0x3a0

00010c80 <_exit@plt>:
   10c80:	add	ip, pc, #0, 12
   10c84:	add	ip, ip, #20, 20	; 0x14000
   10c88:	ldr	pc, [ip, #920]!	; 0x398

00010c8c <memcpy@plt>:
   10c8c:	add	ip, pc, #0, 12
   10c90:	add	ip, ip, #20, 20	; 0x14000
   10c94:	ldr	pc, [ip, #912]!	; 0x390

00010c98 <mbsinit@plt>:
   10c98:	add	ip, pc, #0, 12
   10c9c:	add	ip, ip, #20, 20	; 0x14000
   10ca0:	ldr	pc, [ip, #904]!	; 0x388

00010ca4 <dcgettext@plt>:
   10ca4:	add	ip, pc, #0, 12
   10ca8:	add	ip, ip, #20, 20	; 0x14000
   10cac:	ldr	pc, [ip, #896]!	; 0x380

00010cb0 <realloc@plt>:
   10cb0:	add	ip, pc, #0, 12
   10cb4:	add	ip, ip, #20, 20	; 0x14000
   10cb8:	ldr	pc, [ip, #888]!	; 0x378

00010cbc <textdomain@plt>:
   10cbc:	add	ip, pc, #0, 12
   10cc0:	add	ip, ip, #20, 20	; 0x14000
   10cc4:	ldr	pc, [ip, #880]!	; 0x370

00010cc8 <iswprint@plt>:
   10cc8:	add	ip, pc, #0, 12
   10ccc:	add	ip, ip, #20, 20	; 0x14000
   10cd0:	ldr	pc, [ip, #872]!	; 0x368

00010cd4 <lseek64@plt>:
   10cd4:	add	ip, pc, #0, 12
   10cd8:	add	ip, ip, #20, 20	; 0x14000
   10cdc:	ldr	pc, [ip, #864]!	; 0x360

00010ce0 <__ctype_get_mb_cur_max@plt>:
   10ce0:	add	ip, pc, #0, 12
   10ce4:	add	ip, ip, #20, 20	; 0x14000
   10ce8:	ldr	pc, [ip, #856]!	; 0x358

00010cec <__fpending@plt>:
   10cec:	add	ip, pc, #0, 12
   10cf0:	add	ip, ip, #20, 20	; 0x14000
   10cf4:	ldr	pc, [ip, #848]!	; 0x350

00010cf8 <ferror_unlocked@plt>:
   10cf8:	add	ip, pc, #0, 12
   10cfc:	add	ip, ip, #20, 20	; 0x14000
   10d00:	ldr	pc, [ip, #840]!	; 0x348

00010d04 <mbrtowc@plt>:
   10d04:	add	ip, pc, #0, 12
   10d08:	add	ip, ip, #20, 20	; 0x14000
   10d0c:	ldr	pc, [ip, #832]!	; 0x340

00010d10 <error@plt>:
   10d10:	add	ip, pc, #0, 12
   10d14:	add	ip, ip, #20, 20	; 0x14000
   10d18:	ldr	pc, [ip, #824]!	; 0x338

00010d1c <getenv@plt>:
   10d1c:	add	ip, pc, #0, 12
   10d20:	add	ip, ip, #20, 20	; 0x14000
   10d24:	ldr	pc, [ip, #816]!	; 0x330

00010d28 <malloc@plt>:
   10d28:	add	ip, pc, #0, 12
   10d2c:	add	ip, ip, #20, 20	; 0x14000
   10d30:	ldr	pc, [ip, #808]!	; 0x328

00010d34 <__libc_start_main@plt>:
   10d34:	add	ip, pc, #0, 12
   10d38:	add	ip, ip, #20, 20	; 0x14000
   10d3c:	ldr	pc, [ip, #800]!	; 0x320

00010d40 <__freading@plt>:
   10d40:	add	ip, pc, #0, 12
   10d44:	add	ip, ip, #20, 20	; 0x14000
   10d48:	ldr	pc, [ip, #792]!	; 0x318

00010d4c <__gmon_start__@plt>:
   10d4c:	add	ip, pc, #0, 12
   10d50:	add	ip, ip, #20, 20	; 0x14000
   10d54:	ldr	pc, [ip, #784]!	; 0x310

00010d58 <__ctype_b_loc@plt>:
   10d58:	add	ip, pc, #0, 12
   10d5c:	add	ip, ip, #20, 20	; 0x14000
   10d60:	ldr	pc, [ip, #776]!	; 0x308

00010d64 <exit@plt>:
   10d64:	add	ip, pc, #0, 12
   10d68:	add	ip, ip, #20, 20	; 0x14000
   10d6c:	ldr	pc, [ip, #768]!	; 0x300

00010d70 <bcmp@plt>:
   10d70:	add	ip, pc, #0, 12
   10d74:	add	ip, ip, #20, 20	; 0x14000
   10d78:	ldr	pc, [ip, #760]!	; 0x2f8

00010d7c <strlen@plt>:
   10d7c:	add	ip, pc, #0, 12
   10d80:	add	ip, ip, #20, 20	; 0x14000
   10d84:	ldr	pc, [ip, #752]!	; 0x2f0

00010d88 <__errno_location@plt>:
   10d88:	add	ip, pc, #0, 12
   10d8c:	add	ip, ip, #20, 20	; 0x14000
   10d90:	ldr	pc, [ip, #744]!	; 0x2e8

00010d94 <__cxa_atexit@plt>:
   10d94:	add	ip, pc, #0, 12
   10d98:	add	ip, ip, #20, 20	; 0x14000
   10d9c:	ldr	pc, [ip, #736]!	; 0x2e0

00010da0 <memset@plt>:
   10da0:	add	ip, pc, #0, 12
   10da4:	add	ip, ip, #20, 20	; 0x14000
   10da8:	ldr	pc, [ip, #728]!	; 0x2d8

00010dac <__printf_chk@plt>:
   10dac:	add	ip, pc, #0, 12
   10db0:	add	ip, ip, #20, 20	; 0x14000
   10db4:	ldr	pc, [ip, #720]!	; 0x2d0

00010db8 <fileno@plt>:
   10db8:	add	ip, pc, #0, 12
   10dbc:	add	ip, ip, #20, 20	; 0x14000
   10dc0:	ldr	pc, [ip, #712]!	; 0x2c8

00010dc4 <__fprintf_chk@plt>:
   10dc4:	add	ip, pc, #0, 12
   10dc8:	add	ip, ip, #20, 20	; 0x14000
   10dcc:	ldr	pc, [ip, #704]!	; 0x2c0

00010dd0 <fclose@plt>:
   10dd0:	add	ip, pc, #0, 12
   10dd4:	add	ip, ip, #20, 20	; 0x14000
   10dd8:	ldr	pc, [ip, #696]!	; 0x2b8

00010ddc <fseeko64@plt>:
   10ddc:	add	ip, pc, #0, 12
   10de0:	add	ip, ip, #20, 20	; 0x14000
   10de4:	ldr	pc, [ip, #688]!	; 0x2b0

00010de8 <setlocale@plt>:
   10de8:	add	ip, pc, #0, 12
   10dec:	add	ip, ip, #20, 20	; 0x14000
   10df0:	ldr	pc, [ip, #680]!	; 0x2a8

00010df4 <strrchr@plt>:
   10df4:	add	ip, pc, #0, 12
   10df8:	add	ip, ip, #20, 20	; 0x14000
   10dfc:	ldr	pc, [ip, #672]!	; 0x2a0

00010e00 <nl_langinfo@plt>:
   10e00:	add	ip, pc, #0, 12
   10e04:	add	ip, ip, #20, 20	; 0x14000
   10e08:	ldr	pc, [ip, #664]!	; 0x298

00010e0c <bindtextdomain@plt>:
   10e0c:	add	ip, pc, #0, 12
   10e10:	add	ip, ip, #20, 20	; 0x14000
   10e14:	ldr	pc, [ip, #656]!	; 0x290

00010e18 <fputs@plt>:
   10e18:	add	ip, pc, #0, 12
   10e1c:	add	ip, ip, #20, 20	; 0x14000
   10e20:	ldr	pc, [ip, #648]!	; 0x288

00010e24 <strncmp@plt>:
   10e24:	add	ip, pc, #0, 12
   10e28:	add	ip, ip, #20, 20	; 0x14000
   10e2c:	ldr	pc, [ip, #640]!	; 0x280

00010e30 <abort@plt>:
   10e30:	add	ip, pc, #0, 12
   10e34:	add	ip, ip, #20, 20	; 0x14000
   10e38:	ldr	pc, [ip, #632]!	; 0x278

00010e3c <putchar_unlocked@plt>:
   10e3c:	add	ip, pc, #0, 12
   10e40:	add	ip, ip, #20, 20	; 0x14000
   10e44:	ldr	pc, [ip, #624]!	; 0x270

00010e48 <__assert_fail@plt>:
   10e48:	add	ip, pc, #0, 12
   10e4c:	add	ip, ip, #20, 20	; 0x14000
   10e50:	ldr	pc, [ip, #616]!	; 0x268

Disassembly of section .text:

00010e54 <.text>:
   10e54:	mov	fp, #0
   10e58:	mov	lr, #0
   10e5c:	pop	{r1}		; (ldr r1, [sp], #4)
   10e60:	mov	r2, sp
   10e64:	push	{r2}		; (str r2, [sp, #-4]!)
   10e68:	push	{r0}		; (str r0, [sp, #-4]!)
   10e6c:	ldr	ip, [pc, #16]	; 10e84 <__assert_fail@plt+0x3c>
   10e70:	push	{ip}		; (str ip, [sp, #-4]!)
   10e74:	ldr	r0, [pc, #12]	; 10e88 <__assert_fail@plt+0x40>
   10e78:	ldr	r3, [pc, #12]	; 10e8c <__assert_fail@plt+0x44>
   10e7c:	bl	10d34 <__libc_start_main@plt>
   10e80:	bl	10e30 <abort@plt>
   10e84:	andeq	r4, r1, r8, lsl #4
   10e88:	andeq	r1, r1, ip, lsl r2
   10e8c:	andeq	r4, r1, r8, lsr #3
   10e90:	ldr	r3, [pc, #20]	; 10eac <__assert_fail@plt+0x64>
   10e94:	ldr	r2, [pc, #20]	; 10eb0 <__assert_fail@plt+0x68>
   10e98:	add	r3, pc, r3
   10e9c:	ldr	r2, [r3, r2]
   10ea0:	cmp	r2, #0
   10ea4:	bxeq	lr
   10ea8:	b	10d4c <__gmon_start__@plt>
   10eac:	andeq	r4, r1, r0, ror #2
   10eb0:	strheq	r0, [r0], -ip
   10eb4:	ldr	r0, [pc, #24]	; 10ed4 <__assert_fail@plt+0x8c>
   10eb8:	ldr	r3, [pc, #24]	; 10ed8 <__assert_fail@plt+0x90>
   10ebc:	cmp	r3, r0
   10ec0:	bxeq	lr
   10ec4:	ldr	r3, [pc, #16]	; 10edc <__assert_fail@plt+0x94>
   10ec8:	cmp	r3, #0
   10ecc:	bxeq	lr
   10ed0:	bx	r3
   10ed4:	andeq	r5, r2, r0, lsl r1
   10ed8:	andeq	r5, r2, r0, lsl r1
   10edc:	andeq	r0, r0, r0
   10ee0:	ldr	r0, [pc, #36]	; 10f0c <__assert_fail@plt+0xc4>
   10ee4:	ldr	r1, [pc, #36]	; 10f10 <__assert_fail@plt+0xc8>
   10ee8:	sub	r1, r1, r0
   10eec:	asr	r1, r1, #2
   10ef0:	add	r1, r1, r1, lsr #31
   10ef4:	asrs	r1, r1, #1
   10ef8:	bxeq	lr
   10efc:	ldr	r3, [pc, #16]	; 10f14 <__assert_fail@plt+0xcc>
   10f00:	cmp	r3, #0
   10f04:	bxeq	lr
   10f08:	bx	r3
   10f0c:	andeq	r5, r2, r0, lsl r1
   10f10:	andeq	r5, r2, r0, lsl r1
   10f14:	andeq	r0, r0, r0
   10f18:	push	{r4, lr}
   10f1c:	ldr	r4, [pc, #24]	; 10f3c <__assert_fail@plt+0xf4>
   10f20:	ldrb	r3, [r4]
   10f24:	cmp	r3, #0
   10f28:	popne	{r4, pc}
   10f2c:	bl	10eb4 <__assert_fail@plt+0x6c>
   10f30:	mov	r3, #1
   10f34:	strb	r3, [r4]
   10f38:	pop	{r4, pc}
   10f3c:	andeq	r5, r2, r0, lsr #2
   10f40:	b	10ee0 <__assert_fail@plt+0x98>
   10f44:	push	{fp, lr}
   10f48:	mov	fp, sp
   10f4c:	cmp	r0, #0
   10f50:	bne	110a0 <__assert_fail@plt+0x258>
   10f54:	movw	r1, #16998	; 0x4266
   10f58:	mov	r0, #0
   10f5c:	mov	r2, #5
   10f60:	movt	r1, #1
   10f64:	bl	10ca4 <dcgettext@plt>
   10f68:	mov	r1, r0
   10f6c:	movw	r0, #20780	; 0x512c
   10f70:	movt	r0, #2
   10f74:	ldr	r2, [r0]
   10f78:	mov	r0, #1
   10f7c:	mov	r3, r2
   10f80:	bl	10dac <__printf_chk@plt>
   10f84:	movw	r1, #17061	; 0x42a5
   10f88:	mov	r0, #0
   10f8c:	mov	r2, #5
   10f90:	movt	r1, #1
   10f94:	bl	10ca4 <dcgettext@plt>
   10f98:	movw	r4, #20764	; 0x511c
   10f9c:	movt	r4, #2
   10fa0:	ldr	r1, [r4]
   10fa4:	bl	10c50 <fputs_unlocked@plt>
   10fa8:	movw	r1, #17154	; 0x4302
   10fac:	mov	r0, #0
   10fb0:	mov	r2, #5
   10fb4:	movt	r1, #1
   10fb8:	bl	10ca4 <dcgettext@plt>
   10fbc:	ldr	r1, [r4]
   10fc0:	bl	10c50 <fputs_unlocked@plt>
   10fc4:	movw	r1, #17286	; 0x4386
   10fc8:	mov	r0, #0
   10fcc:	mov	r2, #5
   10fd0:	movt	r1, #1
   10fd4:	bl	10ca4 <dcgettext@plt>
   10fd8:	ldr	r1, [r4]
   10fdc:	bl	10c50 <fputs_unlocked@plt>
   10fe0:	movw	r1, #17331	; 0x43b3
   10fe4:	mov	r0, #0
   10fe8:	mov	r2, #5
   10fec:	movt	r1, #1
   10ff0:	bl	10ca4 <dcgettext@plt>
   10ff4:	ldr	r1, [r4]
   10ff8:	bl	10c50 <fputs_unlocked@plt>
   10ffc:	movw	r1, #17385	; 0x43e9
   11000:	mov	r0, #0
   11004:	mov	r2, #5
   11008:	movt	r1, #1
   1100c:	bl	10ca4 <dcgettext@plt>
   11010:	ldr	r1, [r4]
   11014:	bl	10c50 <fputs_unlocked@plt>
   11018:	movw	r1, #17448	; 0x4428
   1101c:	mov	r0, #0
   11020:	mov	r2, #5
   11024:	movt	r1, #1
   11028:	bl	10ca4 <dcgettext@plt>
   1102c:	ldr	r1, [r4]
   11030:	bl	10c50 <fputs_unlocked@plt>
   11034:	movw	r1, #17677	; 0x450d
   11038:	mov	r0, #0
   1103c:	mov	r2, #5
   11040:	movt	r1, #1
   11044:	bl	10ca4 <dcgettext@plt>
   11048:	ldr	r1, [r4]
   1104c:	bl	10c50 <fputs_unlocked@plt>
   11050:	movw	r1, #17787	; 0x457b
   11054:	mov	r0, #0
   11058:	mov	r2, #5
   1105c:	movt	r1, #1
   11060:	bl	10ca4 <dcgettext@plt>
   11064:	movw	r2, #17978	; 0x463a
   11068:	mov	r1, r0
   1106c:	mov	r0, #1
   11070:	movt	r2, #1
   11074:	bl	10dac <__printf_chk@plt>
   11078:	movw	r1, #17983	; 0x463f
   1107c:	mov	r0, #0
   11080:	mov	r2, #5
   11084:	movt	r1, #1
   11088:	bl	10ca4 <dcgettext@plt>
   1108c:	ldr	r1, [r4]
   11090:	bl	10c50 <fputs_unlocked@plt>
   11094:	bl	110c0 <__assert_fail@plt+0x278>
   11098:	mov	r0, #0
   1109c:	bl	10d64 <exit@plt>
   110a0:	movw	r0, #16948	; 0x4234
   110a4:	movw	r1, #16971	; 0x424b
   110a8:	movw	r3, #16982	; 0x4256
   110ac:	mov	r2, #40	; 0x28
   110b0:	movt	r0, #1
   110b4:	movt	r1, #1
   110b8:	movt	r3, #1
   110bc:	bl	10e48 <__assert_fail@plt>
   110c0:	push	{r4, r5, r6, sl, fp, lr}
   110c4:	add	fp, sp, #16
   110c8:	sub	sp, sp, #56	; 0x38
   110cc:	movw	ip, #18496	; 0x4840
   110d0:	mov	r5, sp
   110d4:	movt	ip, #1
   110d8:	mov	r1, r5
   110dc:	ldm	ip!, {r2, r3, r4, r6}
   110e0:	stmia	r1!, {r2, r3, r4, r6}
   110e4:	ldm	ip!, {r0, r2, r3, r4, r6}
   110e8:	stmia	r1!, {r0, r2, r3, r4, r6}
   110ec:	ldm	ip, {r0, r2, r3, r4, r6}
   110f0:	stm	r1, {r0, r2, r3, r4, r6}
   110f4:	movw	r1, #18183	; 0x4707
   110f8:	movw	r4, #17978	; 0x463a
   110fc:	movt	r1, #1
   11100:	movt	r4, #1
   11104:	mov	r0, r4
   11108:	bl	10c5c <strcmp@plt>
   1110c:	cmp	r0, #0
   11110:	ldrne	r1, [r5, #8]!
   11114:	cmpne	r1, #0
   11118:	bne	11104 <__assert_fail@plt+0x2bc>
   1111c:	movw	r1, #18278	; 0x4766
   11120:	ldr	r5, [r5, #4]
   11124:	mov	r0, #0
   11128:	mov	r2, #5
   1112c:	movt	r1, #1
   11130:	bl	10ca4 <dcgettext@plt>
   11134:	movw	r2, #18148	; 0x46e4
   11138:	movw	r3, #18301	; 0x477d
   1113c:	mov	r1, r0
   11140:	mov	r0, #1
   11144:	movt	r2, #1
   11148:	movt	r3, #1
   1114c:	bl	10dac <__printf_chk@plt>
   11150:	cmp	r5, #0
   11154:	mov	r0, #5
   11158:	mov	r1, #0
   1115c:	moveq	r5, r4
   11160:	bl	10de8 <setlocale@plt>
   11164:	cmp	r0, #0
   11168:	beq	111a8 <__assert_fail@plt+0x360>
   1116c:	movw	r1, #18341	; 0x47a5
   11170:	mov	r2, #3
   11174:	movt	r1, #1
   11178:	bl	10e24 <strncmp@plt>
   1117c:	cmp	r0, #0
   11180:	beq	111a8 <__assert_fail@plt+0x360>
   11184:	movw	r1, #18345	; 0x47a9
   11188:	mov	r0, #0
   1118c:	mov	r2, #5
   11190:	movt	r1, #1
   11194:	bl	10ca4 <dcgettext@plt>
   11198:	movw	r1, #20764	; 0x511c
   1119c:	movt	r1, #2
   111a0:	ldr	r1, [r1]
   111a4:	bl	10c50 <fputs_unlocked@plt>
   111a8:	movw	r1, #18416	; 0x47f0
   111ac:	mov	r0, #0
   111b0:	mov	r2, #5
   111b4:	movt	r1, #1
   111b8:	bl	10ca4 <dcgettext@plt>
   111bc:	movw	r2, #18301	; 0x477d
   111c0:	mov	r1, r0
   111c4:	mov	r0, #1
   111c8:	mov	r3, r4
   111cc:	movt	r2, #1
   111d0:	bl	10dac <__printf_chk@plt>
   111d4:	movw	r0, #18211	; 0x4723
   111d8:	movw	r1, #18443	; 0x480b
   111dc:	movw	r6, #17447	; 0x4427
   111e0:	cmp	r5, r4
   111e4:	mov	r2, #5
   111e8:	movt	r0, #1
   111ec:	movt	r1, #1
   111f0:	movt	r6, #1
   111f4:	moveq	r6, r0
   111f8:	mov	r0, #0
   111fc:	bl	10ca4 <dcgettext@plt>
   11200:	mov	r1, r0
   11204:	mov	r0, #1
   11208:	mov	r2, r5
   1120c:	mov	r3, r6
   11210:	sub	sp, fp, #16
   11214:	pop	{r4, r5, r6, sl, fp, lr}
   11218:	b	10dac <__printf_chk@plt>
   1121c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11220:	add	fp, sp, #28
   11224:	sub	sp, sp, #20
   11228:	mov	r6, r0
   1122c:	movw	r0, #18088	; 0x46a8
   11230:	mov	r5, r1
   11234:	movt	r0, #1
   11238:	bl	10d1c <getenv@plt>
   1123c:	mov	r8, r0
   11240:	cmp	r0, #0
   11244:	beq	11270 <__assert_fail@plt+0x428>
   11248:	mov	r4, #0
   1124c:	cmp	r6, #2
   11250:	blt	11274 <__assert_fail@plt+0x42c>
   11254:	ldr	r0, [r5, #4]
   11258:	movw	r1, #18104	; 0x46b8
   1125c:	movt	r1, #1
   11260:	bl	10c5c <strcmp@plt>
   11264:	clz	r0, r0
   11268:	lsr	r4, r0, #5
   1126c:	b	11274 <__assert_fail@plt+0x42c>
   11270:	mov	r4, #1
   11274:	ldr	r0, [r5]
   11278:	bl	11850 <__assert_fail@plt+0xa08>
   1127c:	movw	r1, #17447	; 0x4427
   11280:	mov	r0, #6
   11284:	movt	r1, #1
   11288:	bl	10de8 <setlocale@plt>
   1128c:	movw	r7, #18152	; 0x46e8
   11290:	movw	r1, #18107	; 0x46bb
   11294:	movt	r7, #1
   11298:	movt	r1, #1
   1129c:	mov	r0, r7
   112a0:	bl	10e0c <bindtextdomain@plt>
   112a4:	mov	r0, r7
   112a8:	bl	10cbc <textdomain@plt>
   112ac:	movw	r0, #5992	; 0x1768
   112b0:	movt	r0, #1
   112b4:	bl	1420c <__assert_fail@plt+0x33c4>
   112b8:	cmp	r6, #2
   112bc:	bne	112fc <__assert_fail@plt+0x4b4>
   112c0:	cmp	r4, #0
   112c4:	beq	112fc <__assert_fail@plt+0x4b4>
   112c8:	ldr	r7, [r5, #4]
   112cc:	movw	r1, #18131	; 0x46d3
   112d0:	movt	r1, #1
   112d4:	mov	r0, r7
   112d8:	bl	10c5c <strcmp@plt>
   112dc:	cmp	r0, #0
   112e0:	beq	116b0 <__assert_fail@plt+0x868>
   112e4:	movw	r1, #18138	; 0x46da
   112e8:	mov	r0, r7
   112ec:	movt	r1, #1
   112f0:	bl	10c5c <strcmp@plt>
   112f4:	cmp	r0, #0
   112f8:	beq	11658 <__assert_fail@plt+0x810>
   112fc:	sub	sl, r6, #1
   11300:	mov	r0, #0
   11304:	eor	r2, r4, #1
   11308:	mov	r1, #0
   1130c:	add	r9, r5, #4
   11310:	mov	r3, #1
   11314:	cmp	sl, #1
   11318:	movwlt	r0, #1
   1131c:	orrs	r0, r2, r0
   11320:	bne	113f0 <__assert_fail@plt+0x5a8>
   11324:	ldr	r2, [r9]
   11328:	ldrb	r0, [r2]
   1132c:	cmp	r0, #45	; 0x2d
   11330:	bne	113f0 <__assert_fail@plt+0x5a8>
   11334:	mov	r1, #0
   11338:	mov	r0, #1
   1133c:	add	r3, r2, #1
   11340:	mov	r7, #0
   11344:	ldrb	r6, [r3, -r7]
   11348:	cmp	r6, #100	; 0x64
   1134c:	ble	11360 <__assert_fail@plt+0x518>
   11350:	cmp	r6, #110	; 0x6e
   11354:	cmpne	r6, #101	; 0x65
   11358:	beq	11368 <__assert_fail@plt+0x520>
   1135c:	b	113e8 <__assert_fail@plt+0x5a0>
   11360:	cmp	r6, #69	; 0x45
   11364:	bne	11370 <__assert_fail@plt+0x528>
   11368:	sub	r7, r7, #1
   1136c:	b	11344 <__assert_fail@plt+0x4fc>
   11370:	cmp	r6, #0
   11374:	bne	113e8 <__assert_fail@plt+0x5a0>
   11378:	cmp	r7, #0
   1137c:	beq	113e8 <__assert_fail@plt+0x5a0>
   11380:	ldrb	r3, [r3]
   11384:	cmp	r3, #0
   11388:	beq	113c8 <__assert_fail@plt+0x580>
   1138c:	add	r2, r2, #2
   11390:	uxtb	r3, r3
   11394:	cmp	r3, #69	; 0x45
   11398:	beq	113b8 <__assert_fail@plt+0x570>
   1139c:	cmp	r3, #110	; 0x6e
   113a0:	beq	113b0 <__assert_fail@plt+0x568>
   113a4:	cmp	r3, #101	; 0x65
   113a8:	moveq	r1, #1
   113ac:	b	113bc <__assert_fail@plt+0x574>
   113b0:	mov	r0, #0
   113b4:	b	113bc <__assert_fail@plt+0x574>
   113b8:	mov	r1, #0
   113bc:	ldrb	r3, [r2], #1
   113c0:	cmp	r3, #0
   113c4:	bne	11390 <__assert_fail@plt+0x548>
   113c8:	sub	sl, sl, #1
   113cc:	add	r9, r9, #4
   113d0:	cmp	sl, #0
   113d4:	ble	113e8 <__assert_fail@plt+0x5a0>
   113d8:	ldr	r2, [r9]
   113dc:	ldrb	r3, [r2]
   113e0:	cmp	r3, #45	; 0x2d
   113e4:	beq	1133c <__assert_fail@plt+0x4f4>
   113e8:	and	r1, r1, #1
   113ec:	and	r3, r0, #1
   113f0:	cmp	r8, #0
   113f4:	str	r3, [sp, #16]
   113f8:	cmpeq	r1, #0
   113fc:	beq	115f4 <__assert_fail@plt+0x7ac>
   11400:	cmp	sl, #1
   11404:	blt	11640 <__assert_fail@plt+0x7f8>
   11408:	ldr	r7, [r9]
   1140c:	mov	r6, r7
   11410:	ldrb	r4, [r7], #1
   11414:	cmp	r4, #92	; 0x5c
   11418:	beq	11428 <__assert_fail@plt+0x5e0>
   1141c:	cmp	r4, #0
   11420:	bne	11508 <__assert_fail@plt+0x6c0>
   11424:	b	115d8 <__assert_fail@plt+0x790>
   11428:	ldrb	r4, [r7]
   1142c:	cmp	r4, #0
   11430:	beq	114bc <__assert_fail@plt+0x674>
   11434:	add	r7, r6, #2
   11438:	cmp	r4, #96	; 0x60
   1143c:	ble	114c4 <__assert_fail@plt+0x67c>
   11440:	sub	r0, r4, #97	; 0x61
   11444:	cmp	r0, #23
   11448:	bhi	11564 <__assert_fail@plt+0x71c>
   1144c:	add	r1, pc, #0
   11450:	ldr	pc, [r1, r0, lsl #2]
   11454:			; <UNDEFINED> instruction: 0x000114b4
   11458:	andeq	r1, r1, r8, ror r5
   1145c:	andeq	r1, r1, r4, lsr #13
   11460:	andeq	r1, r1, r4, ror #10
   11464:	andeq	r1, r1, r0, ror r5
   11468:	andeq	r1, r1, r0, lsr r5
   1146c:	andeq	r1, r1, r4, ror #10
   11470:	andeq	r1, r1, r4, ror #10
   11474:	andeq	r1, r1, r4, ror #10
   11478:	andeq	r1, r1, r4, ror #10
   1147c:	andeq	r1, r1, r4, ror #10
   11480:	andeq	r1, r1, r4, ror #10
   11484:	andeq	r1, r1, r4, ror #10
   11488:	andeq	r1, r1, r0, lsl #11
   1148c:	andeq	r1, r1, r4, ror #10
   11490:	andeq	r1, r1, r4, ror #10
   11494:	andeq	r1, r1, r4, ror #10
   11498:	andeq	r1, r1, r8, lsr r5
   1149c:	andeq	r1, r1, r4, ror #10
   114a0:	andeq	r1, r1, r0, asr #10
   114a4:	andeq	r1, r1, r4, ror #10
   114a8:	andeq	r1, r1, r8, lsr #10
   114ac:	andeq	r1, r1, r4, ror #10
   114b0:	andeq	r1, r1, r8, asr #10
   114b4:	mov	r4, #7
   114b8:	b	11508 <__assert_fail@plt+0x6c0>
   114bc:	mov	r4, #92	; 0x5c
   114c0:	b	11508 <__assert_fail@plt+0x6c0>
   114c4:	sub	r0, r4, #49	; 0x31
   114c8:	cmp	r0, #7
   114cc:	bcs	11514 <__assert_fail@plt+0x6cc>
   114d0:	mov	r0, r4
   114d4:	sub	r4, r0, #48	; 0x30
   114d8:	ldrb	r0, [r7]
   114dc:	and	r1, r0, #248	; 0xf8
   114e0:	cmp	r1, #48	; 0x30
   114e4:	bne	114f4 <__assert_fail@plt+0x6ac>
   114e8:	add	r0, r0, r4, lsl #3
   114ec:	sub	r4, r0, #48	; 0x30
   114f0:	ldrb	r0, [r7, #1]!
   114f4:	and	r1, r0, #248	; 0xf8
   114f8:	cmp	r1, #48	; 0x30
   114fc:	addeq	r0, r0, r4, lsl #3
   11500:	addeq	r7, r7, #1
   11504:	subeq	r4, r0, #48	; 0x30
   11508:	uxtb	r0, r4
   1150c:	bl	10e3c <putchar_unlocked@plt>
   11510:	b	1140c <__assert_fail@plt+0x5c4>
   11514:	cmp	r4, #48	; 0x30
   11518:	beq	11588 <__assert_fail@plt+0x740>
   1151c:	cmp	r4, #92	; 0x5c
   11520:	beq	11508 <__assert_fail@plt+0x6c0>
   11524:	b	11564 <__assert_fail@plt+0x71c>
   11528:	mov	r4, #11
   1152c:	b	11508 <__assert_fail@plt+0x6c0>
   11530:	mov	r4, #12
   11534:	b	11508 <__assert_fail@plt+0x6c0>
   11538:	mov	r4, #13
   1153c:	b	11508 <__assert_fail@plt+0x6c0>
   11540:	mov	r4, #9
   11544:	b	11508 <__assert_fail@plt+0x6c0>
   11548:	ldrb	r5, [r7]
   1154c:	bl	10d58 <__ctype_b_loc@plt>
   11550:	ldr	r8, [r0]
   11554:	add	r0, r8, r5, lsl #1
   11558:	ldrb	r0, [r0, #1]
   1155c:	tst	r0, #16
   11560:	bne	115a4 <__assert_fail@plt+0x75c>
   11564:	mov	r0, #92	; 0x5c
   11568:	bl	10e3c <putchar_unlocked@plt>
   1156c:	b	11508 <__assert_fail@plt+0x6c0>
   11570:	mov	r4, #27
   11574:	b	11508 <__assert_fail@plt+0x6c0>
   11578:	mov	r4, #8
   1157c:	b	11508 <__assert_fail@plt+0x6c0>
   11580:	mov	r4, #10
   11584:	b	11508 <__assert_fail@plt+0x6c0>
   11588:	ldrb	r0, [r7]
   1158c:	mov	r4, #0
   11590:	and	r1, r0, #248	; 0xf8
   11594:	cmp	r1, #48	; 0x30
   11598:	bne	11508 <__assert_fail@plt+0x6c0>
   1159c:	add	r7, r6, #3
   115a0:	b	114d4 <__assert_fail@plt+0x68c>
   115a4:	mov	r0, r5
   115a8:	bl	116b8 <__assert_fail@plt+0x870>
   115ac:	mov	r7, r6
   115b0:	mov	r4, r0
   115b4:	ldrb	r0, [r7, #3]!
   115b8:	add	r1, r8, r0, lsl #1
   115bc:	ldrb	r1, [r1, #1]
   115c0:	tst	r1, #16
   115c4:	beq	11508 <__assert_fail@plt+0x6c0>
   115c8:	bl	116b8 <__assert_fail@plt+0x870>
   115cc:	add	r4, r0, r4, lsl #4
   115d0:	add	r7, r6, #4
   115d4:	b	11508 <__assert_fail@plt+0x6c0>
   115d8:	sub	sl, sl, #1
   115dc:	cmp	sl, #1
   115e0:	blt	11640 <__assert_fail@plt+0x7f8>
   115e4:	mov	r0, #32
   115e8:	bl	10e3c <putchar_unlocked@plt>
   115ec:	add	r9, r9, #4
   115f0:	b	11408 <__assert_fail@plt+0x5c0>
   115f4:	cmp	sl, #1
   115f8:	blt	11640 <__assert_fail@plt+0x7f8>
   115fc:	movw	r4, #20764	; 0x511c
   11600:	ldr	r0, [r9]
   11604:	movt	r4, #2
   11608:	ldr	r1, [r4]
   1160c:	bl	10c50 <fputs_unlocked@plt>
   11610:	sub	r5, sl, #1
   11614:	cmp	r5, #1
   11618:	blt	11640 <__assert_fail@plt+0x7f8>
   1161c:	add	r6, r9, #4
   11620:	mov	r0, #32
   11624:	bl	10e3c <putchar_unlocked@plt>
   11628:	ldr	r0, [r6], #4
   1162c:	ldr	r1, [r4]
   11630:	bl	10c50 <fputs_unlocked@plt>
   11634:	sub	r5, r5, #1
   11638:	cmp	r5, #0
   1163c:	bgt	11620 <__assert_fail@plt+0x7d8>
   11640:	ldr	r0, [sp, #16]
   11644:	cmp	r0, #0
   11648:	beq	116a4 <__assert_fail@plt+0x85c>
   1164c:	mov	r0, #10
   11650:	bl	10e3c <putchar_unlocked@plt>
   11654:	b	116a4 <__assert_fail@plt+0x85c>
   11658:	movw	r0, #20680	; 0x50c8
   1165c:	movw	r2, #18172	; 0x46fc
   11660:	mov	r1, #0
   11664:	movw	r7, #18162	; 0x46f2
   11668:	movt	r0, #2
   1166c:	movt	r2, #1
   11670:	str	r1, [sp, #8]
   11674:	movw	r1, #17978	; 0x463a
   11678:	movt	r7, #1
   1167c:	movt	r1, #1
   11680:	ldr	r3, [r0]
   11684:	movw	r0, #20764	; 0x511c
   11688:	str	r2, [sp, #4]
   1168c:	movw	r2, #18148	; 0x46e4
   11690:	str	r7, [sp]
   11694:	movt	r0, #2
   11698:	movt	r2, #1
   1169c:	ldr	r0, [r0]
   116a0:	bl	13740 <__assert_fail@plt+0x28f8>
   116a4:	mov	r0, #0
   116a8:	sub	sp, fp, #28
   116ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   116b0:	mov	r0, #0
   116b4:	bl	10f44 <__assert_fail@plt+0xfc>
   116b8:	sub	r2, r0, #65	; 0x41
   116bc:	mov	r1, r0
   116c0:	mov	r0, #10
   116c4:	cmp	r2, #5
   116c8:	bls	11700 <__assert_fail@plt+0x8b8>
   116cc:	sub	r2, r1, #97	; 0x61
   116d0:	cmp	r2, #5
   116d4:	subhi	r0, r1, #48	; 0x30
   116d8:	bxhi	lr
   116dc:	add	r1, pc, #0
   116e0:	ldr	pc, [r1, r2, lsl #2]
   116e4:	strdeq	r1, [r1], -ip
   116e8:	andeq	r1, r1, r0, lsr #14
   116ec:	andeq	r1, r1, r8, lsr #14
   116f0:	andeq	r1, r1, r0, lsr r7
   116f4:	andeq	r1, r1, r8, lsr r7
   116f8:	andeq	r1, r1, r0, asr #14
   116fc:	bx	lr
   11700:	add	r1, pc, #0
   11704:	ldr	pc, [r1, r2, lsl #2]
   11708:	strdeq	r1, [r1], -ip
   1170c:	andeq	r1, r1, r0, lsr #14
   11710:	andeq	r1, r1, r8, lsr #14
   11714:	andeq	r1, r1, r0, lsr r7
   11718:	andeq	r1, r1, r8, lsr r7
   1171c:	andeq	r1, r1, r0, asr #14
   11720:	mov	r0, #11
   11724:	bx	lr
   11728:	mov	r0, #12
   1172c:	bx	lr
   11730:	mov	r0, #13
   11734:	bx	lr
   11738:	mov	r0, #14
   1173c:	bx	lr
   11740:	mov	r0, #15
   11744:	bx	lr
   11748:	movw	r1, #20772	; 0x5124
   1174c:	movt	r1, #2
   11750:	str	r0, [r1]
   11754:	bx	lr
   11758:	movw	r1, #20776	; 0x5128
   1175c:	movt	r1, #2
   11760:	strb	r0, [r1]
   11764:	bx	lr
   11768:	push	{r4, r5, r6, sl, fp, lr}
   1176c:	add	fp, sp, #16
   11770:	sub	sp, sp, #8
   11774:	movw	r0, #20764	; 0x511c
   11778:	movt	r0, #2
   1177c:	ldr	r0, [r0]
   11780:	bl	13d8c <__assert_fail@plt+0x2f44>
   11784:	cmp	r0, #0
   11788:	beq	117b0 <__assert_fail@plt+0x968>
   1178c:	movw	r0, #20776	; 0x5128
   11790:	movt	r0, #2
   11794:	ldrb	r0, [r0]
   11798:	cmp	r0, #0
   1179c:	beq	117d0 <__assert_fail@plt+0x988>
   117a0:	bl	10d88 <__errno_location@plt>
   117a4:	ldr	r0, [r0]
   117a8:	cmp	r0, #32
   117ac:	bne	117d0 <__assert_fail@plt+0x988>
   117b0:	movw	r0, #20760	; 0x5118
   117b4:	movt	r0, #2
   117b8:	ldr	r0, [r0]
   117bc:	bl	13d8c <__assert_fail@plt+0x2f44>
   117c0:	cmp	r0, #0
   117c4:	subeq	sp, fp, #16
   117c8:	popeq	{r4, r5, r6, sl, fp, pc}
   117cc:	b	11840 <__assert_fail@plt+0x9f8>
   117d0:	movw	r1, #18567	; 0x4887
   117d4:	mov	r0, #0
   117d8:	mov	r2, #5
   117dc:	movt	r1, #1
   117e0:	bl	10ca4 <dcgettext@plt>
   117e4:	mov	r4, r0
   117e8:	movw	r0, #20772	; 0x5124
   117ec:	movt	r0, #2
   117f0:	ldr	r6, [r0]
   117f4:	bl	10d88 <__errno_location@plt>
   117f8:	ldr	r5, [r0]
   117fc:	cmp	r6, #0
   11800:	bne	1181c <__assert_fail@plt+0x9d4>
   11804:	movw	r2, #18583	; 0x4897
   11808:	mov	r0, #0
   1180c:	mov	r1, r5
   11810:	mov	r3, r4
   11814:	movt	r2, #1
   11818:	b	1183c <__assert_fail@plt+0x9f4>
   1181c:	mov	r0, r6
   11820:	bl	12ffc <__assert_fail@plt+0x21b4>
   11824:	movw	r2, #18579	; 0x4893
   11828:	mov	r3, r0
   1182c:	str	r4, [sp]
   11830:	mov	r0, #0
   11834:	mov	r1, r5
   11838:	movt	r2, #1
   1183c:	bl	10d10 <error@plt>
   11840:	movw	r0, #20684	; 0x50cc
   11844:	movt	r0, #2
   11848:	ldr	r0, [r0]
   1184c:	bl	10c80 <_exit@plt>
   11850:	push	{r4, r5, fp, lr}
   11854:	add	fp, sp, #8
   11858:	cmp	r0, #0
   1185c:	beq	118f0 <__assert_fail@plt+0xaa8>
   11860:	mov	r1, #47	; 0x2f
   11864:	mov	r4, r0
   11868:	bl	10df4 <strrchr@plt>
   1186c:	cmp	r0, #0
   11870:	mov	r5, r4
   11874:	addne	r5, r0, #1
   11878:	sub	r0, r5, r4
   1187c:	cmp	r0, #7
   11880:	blt	118d4 <__assert_fail@plt+0xa8c>
   11884:	movw	r1, #18642	; 0x48d2
   11888:	sub	r0, r5, #7
   1188c:	mov	r2, #7
   11890:	movt	r1, #1
   11894:	bl	10e24 <strncmp@plt>
   11898:	cmp	r0, #0
   1189c:	bne	118d4 <__assert_fail@plt+0xa8c>
   118a0:	movw	r1, #18650	; 0x48da
   118a4:	mov	r0, r5
   118a8:	mov	r2, #3
   118ac:	movt	r1, #1
   118b0:	bl	10e24 <strncmp@plt>
   118b4:	cmp	r0, #0
   118b8:	beq	118c4 <__assert_fail@plt+0xa7c>
   118bc:	mov	r4, r5
   118c0:	b	118d4 <__assert_fail@plt+0xa8c>
   118c4:	movw	r0, #20752	; 0x5110
   118c8:	add	r4, r5, #3
   118cc:	movt	r0, #2
   118d0:	str	r4, [r0]
   118d4:	movw	r0, #20756	; 0x5114
   118d8:	movt	r0, #2
   118dc:	str	r4, [r0]
   118e0:	movw	r0, #20780	; 0x512c
   118e4:	movt	r0, #2
   118e8:	str	r4, [r0]
   118ec:	pop	{r4, r5, fp, pc}
   118f0:	movw	r0, #20760	; 0x5118
   118f4:	movt	r0, #2
   118f8:	ldr	r1, [r0]
   118fc:	movw	r0, #18586	; 0x489a
   11900:	movt	r0, #1
   11904:	bl	10e18 <fputs@plt>
   11908:	bl	10e30 <abort@plt>
   1190c:	push	{r4, r5, r6, sl, fp, lr}
   11910:	add	fp, sp, #16
   11914:	mov	r4, r0
   11918:	movw	r0, #20784	; 0x5130
   1191c:	movt	r0, #2
   11920:	cmp	r4, #0
   11924:	moveq	r4, r0
   11928:	bl	10d88 <__errno_location@plt>
   1192c:	ldr	r6, [r0]
   11930:	mov	r5, r0
   11934:	mov	r0, r4
   11938:	mov	r1, #48	; 0x30
   1193c:	bl	13b98 <__assert_fail@plt+0x2d50>
   11940:	str	r6, [r5]
   11944:	pop	{r4, r5, r6, sl, fp, pc}
   11948:	movw	r1, #20784	; 0x5130
   1194c:	cmp	r0, #0
   11950:	movt	r1, #2
   11954:	movne	r1, r0
   11958:	ldr	r0, [r1]
   1195c:	bx	lr
   11960:	movw	r2, #20784	; 0x5130
   11964:	cmp	r0, #0
   11968:	movt	r2, #2
   1196c:	movne	r2, r0
   11970:	str	r1, [r2]
   11974:	bx	lr
   11978:	movw	r3, #20784	; 0x5130
   1197c:	cmp	r0, #0
   11980:	and	r2, r2, #1
   11984:	movt	r3, #2
   11988:	movne	r3, r0
   1198c:	ubfx	r0, r1, #5, #3
   11990:	and	r1, r1, #31
   11994:	add	ip, r3, r0, lsl #2
   11998:	mov	r0, #1
   1199c:	ldr	r3, [ip, #8]
   119a0:	and	r0, r0, r3, lsr r1
   119a4:	eor	r2, r0, r2
   119a8:	eor	r1, r3, r2, lsl r1
   119ac:	str	r1, [ip, #8]
   119b0:	bx	lr
   119b4:	movw	r2, #20784	; 0x5130
   119b8:	cmp	r0, #0
   119bc:	movt	r2, #2
   119c0:	movne	r2, r0
   119c4:	ldr	r0, [r2, #4]
   119c8:	str	r1, [r2, #4]
   119cc:	bx	lr
   119d0:	push	{fp, lr}
   119d4:	mov	fp, sp
   119d8:	movw	r3, #20784	; 0x5130
   119dc:	cmp	r0, #0
   119e0:	movt	r3, #2
   119e4:	movne	r3, r0
   119e8:	cmp	r1, #0
   119ec:	mov	r0, #10
   119f0:	cmpne	r2, #0
   119f4:	str	r0, [r3]
   119f8:	bne	11a00 <__assert_fail@plt+0xbb8>
   119fc:	bl	10e30 <abort@plt>
   11a00:	str	r1, [r3, #40]	; 0x28
   11a04:	str	r2, [r3, #44]	; 0x2c
   11a08:	pop	{fp, pc}
   11a0c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11a10:	add	fp, sp, #28
   11a14:	sub	sp, sp, #20
   11a18:	mov	r7, r0
   11a1c:	ldr	r0, [fp, #8]
   11a20:	movw	r5, #20784	; 0x5130
   11a24:	mov	r8, r3
   11a28:	mov	r9, r2
   11a2c:	mov	sl, r1
   11a30:	movt	r5, #2
   11a34:	cmp	r0, #0
   11a38:	movne	r5, r0
   11a3c:	bl	10d88 <__errno_location@plt>
   11a40:	ldr	r2, [r5, #40]	; 0x28
   11a44:	ldr	r3, [r5, #44]	; 0x2c
   11a48:	mov	r4, r0
   11a4c:	ldm	r5, {r0, r1}
   11a50:	add	r5, r5, #8
   11a54:	ldr	r6, [r4]
   11a58:	stm	sp, {r0, r1, r5}
   11a5c:	mov	r0, r7
   11a60:	mov	r1, sl
   11a64:	str	r2, [sp, #12]
   11a68:	str	r3, [sp, #16]
   11a6c:	mov	r2, r9
   11a70:	mov	r3, r8
   11a74:	bl	11a84 <__assert_fail@plt+0xc3c>
   11a78:	str	r6, [r4]
   11a7c:	sub	sp, fp, #28
   11a80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11a84:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11a88:	add	fp, sp, #28
   11a8c:	sub	sp, sp, #156	; 0x9c
   11a90:	mov	r5, r0
   11a94:	add	r0, r2, #1
   11a98:	mov	r6, r1
   11a9c:	mov	sl, r3
   11aa0:	str	r2, [fp, #-80]	; 0xffffffb0
   11aa4:	str	r0, [sp, #72]	; 0x48
   11aa8:	ldr	r0, [fp, #12]
   11aac:	and	r1, r0, #1
   11ab0:	str	r1, [sp, #32]
   11ab4:	and	r1, r0, #4
   11ab8:	str	r1, [sp, #28]
   11abc:	ubfx	r9, r0, #1, #1
   11ac0:	bl	10ce0 <__ctype_get_mb_cur_max@plt>
   11ac4:	str	r0, [sp, #40]	; 0x28
   11ac8:	ldr	r0, [fp, #24]
   11acc:	ldr	r7, [fp, #8]
   11ad0:	mov	r1, #0
   11ad4:	mov	lr, #0
   11ad8:	str	r5, [fp, #-84]	; 0xffffffac
   11adc:	str	r1, [sp, #60]	; 0x3c
   11ae0:	mov	r1, #1
   11ae4:	str	r1, [fp, #-48]	; 0xffffffd0
   11ae8:	str	r0, [sp, #80]	; 0x50
   11aec:	ldr	r0, [fp, #20]
   11af0:	str	r0, [sp, #76]	; 0x4c
   11af4:	mov	r0, #0
   11af8:	str	r0, [sp, #56]	; 0x38
   11afc:	mov	r0, #0
   11b00:	str	r0, [fp, #-88]	; 0xffffffa8
   11b04:	mov	r0, #0
   11b08:	str	r0, [fp, #-72]	; 0xffffffb8
   11b0c:	mov	r0, #0
   11b10:	cmp	r7, #10
   11b14:	bhi	12af0 <__assert_fail@plt+0x1ca8>
   11b18:	add	r1, pc, #24
   11b1c:	ldr	r4, [fp, #-80]	; 0xffffffb0
   11b20:	mov	ip, r6
   11b24:	mov	r8, #0
   11b28:	mov	r2, #1
   11b2c:	mov	r6, #0
   11b30:	mov	r3, sl
   11b34:	ldr	pc, [r1, r7, lsl #2]
   11b38:	andeq	r1, r1, r4, lsr #24
   11b3c:	andeq	r1, r1, r8, ror ip
   11b40:	andeq	r1, r1, r8, lsr ip
   11b44:	andeq	r1, r1, ip, lsl ip
   11b48:	andeq	r1, r1, ip, ror #24
   11b4c:	andeq	r1, r1, r0, lsr #25
   11b50:	andeq	r1, r1, r8, asr #24
   11b54:	andeq	r1, r1, r4, lsr #26
   11b58:	andeq	r1, r1, r4, ror #22
   11b5c:	andeq	r1, r1, r4, ror #22
   11b60:	andeq	r1, r1, r4, lsr #23
   11b64:	movw	r0, #18732	; 0x492c
   11b68:	mov	r1, r7
   11b6c:	mov	r6, r5
   11b70:	mov	r4, ip
   11b74:	mov	r5, lr
   11b78:	movt	r0, #1
   11b7c:	bl	13254 <__assert_fail@plt+0x240c>
   11b80:	str	r0, [sp, #76]	; 0x4c
   11b84:	movw	r0, #18734	; 0x492e
   11b88:	mov	r1, r7
   11b8c:	movt	r0, #1
   11b90:	bl	13254 <__assert_fail@plt+0x240c>
   11b94:	mov	lr, r5
   11b98:	mov	r5, r6
   11b9c:	mov	ip, r4
   11ba0:	str	r0, [sp, #80]	; 0x50
   11ba4:	mov	r8, #0
   11ba8:	tst	r9, #1
   11bac:	str	lr, [sp, #44]	; 0x2c
   11bb0:	bne	11be8 <__assert_fail@plt+0xda0>
   11bb4:	ldr	r0, [sp, #76]	; 0x4c
   11bb8:	ldrb	r0, [r0]
   11bbc:	cmp	r0, #0
   11bc0:	beq	11be8 <__assert_fail@plt+0xda0>
   11bc4:	ldr	r1, [sp, #76]	; 0x4c
   11bc8:	mov	r8, #0
   11bcc:	add	r1, r1, #1
   11bd0:	cmp	r8, ip
   11bd4:	strbcc	r0, [r5, r8]
   11bd8:	ldrb	r0, [r1, r8]
   11bdc:	add	r8, r8, #1
   11be0:	cmp	r0, #0
   11be4:	bne	11bd0 <__assert_fail@plt+0xd88>
   11be8:	ldr	r6, [sp, #80]	; 0x50
   11bec:	mov	r4, ip
   11bf0:	mov	r0, r6
   11bf4:	bl	10d7c <strlen@plt>
   11bf8:	mov	ip, r4
   11bfc:	ldr	r4, [fp, #-80]	; 0xffffffb0
   11c00:	ldr	lr, [sp, #44]	; 0x2c
   11c04:	str	r6, [fp, #-88]	; 0xffffffa8
   11c08:	str	r0, [fp, #-72]	; 0xffffffb8
   11c0c:	mov	r2, #1
   11c10:	mov	r6, r9
   11c14:	mov	r3, sl
   11c18:	b	11d24 <__assert_fail@plt+0xedc>
   11c1c:	mov	r0, #1
   11c20:	b	11c78 <__assert_fail@plt+0xe30>
   11c24:	mov	r7, #0
   11c28:	mov	r8, #0
   11c2c:	mov	r2, r0
   11c30:	mov	r6, #0
   11c34:	b	11d24 <__assert_fail@plt+0xedc>
   11c38:	tst	r9, #1
   11c3c:	bne	11c78 <__assert_fail@plt+0xe30>
   11c40:	mov	r2, r0
   11c44:	b	11cd0 <__assert_fail@plt+0xe88>
   11c48:	mov	r0, #1
   11c4c:	mov	r8, #0
   11c50:	mov	r7, #5
   11c54:	mov	r2, #1
   11c58:	str	r0, [fp, #-72]	; 0xffffffb8
   11c5c:	movw	r0, #18730	; 0x492a
   11c60:	movt	r0, #1
   11c64:	str	r0, [fp, #-88]	; 0xffffffa8
   11c68:	b	11c98 <__assert_fail@plt+0xe50>
   11c6c:	mov	r2, #1
   11c70:	tst	r9, #1
   11c74:	beq	11cd0 <__assert_fail@plt+0xe88>
   11c78:	mov	r1, #1
   11c7c:	mov	r8, #0
   11c80:	mov	r7, #2
   11c84:	mov	r2, r0
   11c88:	str	r1, [fp, #-72]	; 0xffffffb8
   11c8c:	movw	r1, #18734	; 0x492e
   11c90:	movt	r1, #1
   11c94:	str	r1, [fp, #-88]	; 0xffffffa8
   11c98:	mov	r6, #1
   11c9c:	b	11d24 <__assert_fail@plt+0xedc>
   11ca0:	tst	r9, #1
   11ca4:	beq	11cf4 <__assert_fail@plt+0xeac>
   11ca8:	mov	r0, #1
   11cac:	mov	r8, #0
   11cb0:	mov	r2, #1
   11cb4:	mov	r6, #1
   11cb8:	mov	r7, #5
   11cbc:	str	r0, [fp, #-72]	; 0xffffffb8
   11cc0:	movw	r0, #18730	; 0x492a
   11cc4:	movt	r0, #1
   11cc8:	str	r0, [fp, #-88]	; 0xffffffa8
   11ccc:	b	11d24 <__assert_fail@plt+0xedc>
   11cd0:	cmp	ip, #0
   11cd4:	mov	r8, #1
   11cd8:	mov	r6, #0
   11cdc:	mov	r7, #2
   11ce0:	movne	r0, #39	; 0x27
   11ce4:	strbne	r0, [r5]
   11ce8:	movw	r0, #18734	; 0x492e
   11cec:	movt	r0, #1
   11cf0:	b	11d18 <__assert_fail@plt+0xed0>
   11cf4:	cmp	ip, #0
   11cf8:	mov	r8, #1
   11cfc:	mov	r2, #1
   11d00:	mov	r7, #5
   11d04:	mov	r6, #0
   11d08:	movne	r0, #34	; 0x22
   11d0c:	strbne	r0, [r5]
   11d10:	movw	r0, #18730	; 0x492a
   11d14:	movt	r0, #1
   11d18:	str	r0, [fp, #-88]	; 0xffffffa8
   11d1c:	mov	r0, #1
   11d20:	str	r0, [fp, #-72]	; 0xffffffb8
   11d24:	ldr	r0, [fp, #-72]	; 0xffffffb8
   11d28:	str	r7, [fp, #-68]	; 0xffffffbc
   11d2c:	str	r6, [fp, #-76]	; 0xffffffb4
   11d30:	str	r2, [sp, #84]	; 0x54
   11d34:	cmp	r0, #0
   11d38:	movwne	r0, #1
   11d3c:	and	r1, r0, r6
   11d40:	and	r1, r2, r1
   11d44:	str	r1, [sp, #48]	; 0x30
   11d48:	sub	r1, r7, #2
   11d4c:	clz	r1, r1
   11d50:	lsr	r1, r1, #5
   11d54:	and	r1, r1, r6
   11d58:	str	r1, [sp, #64]	; 0x40
   11d5c:	subs	r1, r7, #2
   11d60:	eor	r7, r6, #1
   11d64:	movwne	r1, #1
   11d68:	str	r7, [sp, #92]	; 0x5c
   11d6c:	orr	r7, r1, r7
   11d70:	and	r1, r1, r2
   11d74:	and	r0, r0, r1
   11d78:	str	r7, [sp, #68]	; 0x44
   11d7c:	mov	r7, #0
   11d80:	str	r0, [fp, #-60]	; 0xffffffc4
   11d84:	orr	r0, r1, r6
   11d88:	ldr	r1, [fp, #16]
   11d8c:	eor	r0, r0, #1
   11d90:	clz	r1, r1
   11d94:	lsr	r1, r1, #5
   11d98:	orr	r0, r1, r0
   11d9c:	str	r0, [fp, #-64]	; 0xffffffc0
   11da0:	eor	r0, r2, #1
   11da4:	str	r0, [sp, #52]	; 0x34
   11da8:	cmn	r3, #1
   11dac:	beq	11dbc <__assert_fail@plt+0xf74>
   11db0:	cmp	r7, r3
   11db4:	bne	11dc8 <__assert_fail@plt+0xf80>
   11db8:	b	12924 <__assert_fail@plt+0x1adc>
   11dbc:	ldrb	r0, [r4, r7]
   11dc0:	cmp	r0, #0
   11dc4:	beq	1292c <__assert_fail@plt+0x1ae4>
   11dc8:	ldr	r0, [fp, #-60]	; 0xffffffc4
   11dcc:	cmp	r0, #0
   11dd0:	beq	11e18 <__assert_fail@plt+0xfd0>
   11dd4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   11dd8:	add	r5, r7, r0
   11ddc:	cmp	r0, #2
   11de0:	bcc	11e2c <__assert_fail@plt+0xfe4>
   11de4:	mov	r0, #0
   11de8:	cmn	r3, #1
   11dec:	str	r0, [fp, #-56]	; 0xffffffc8
   11df0:	bne	11e34 <__assert_fail@plt+0xfec>
   11df4:	mov	r0, r4
   11df8:	mov	r4, ip
   11dfc:	mov	r6, lr
   11e00:	bl	10d7c <strlen@plt>
   11e04:	mov	ip, r4
   11e08:	ldr	r4, [fp, #-80]	; 0xffffffb0
   11e0c:	mov	lr, r6
   11e10:	mov	r3, r0
   11e14:	b	11e34 <__assert_fail@plt+0xfec>
   11e18:	mov	r0, #0
   11e1c:	mov	sl, r3
   11e20:	str	r0, [fp, #-56]	; 0xffffffc8
   11e24:	mov	r0, #0
   11e28:	b	11ea0 <__assert_fail@plt+0x1058>
   11e2c:	mov	r0, #0
   11e30:	str	r0, [fp, #-56]	; 0xffffffc8
   11e34:	cmp	r5, r3
   11e38:	bls	11e4c <__assert_fail@plt+0x1004>
   11e3c:	ldr	r5, [fp, #-84]	; 0xffffffac
   11e40:	mov	r0, #0
   11e44:	mov	sl, r3
   11e48:	b	11ea0 <__assert_fail@plt+0x1058>
   11e4c:	ldr	r1, [fp, #-88]	; 0xffffffa8
   11e50:	ldr	r2, [fp, #-72]	; 0xffffffb8
   11e54:	add	r0, r4, r7
   11e58:	mov	r5, lr
   11e5c:	mov	r6, ip
   11e60:	mov	sl, r3
   11e64:	bl	10d70 <bcmp@plt>
   11e68:	ldr	r2, [sp, #92]	; 0x5c
   11e6c:	cmp	r0, #0
   11e70:	ldr	r3, [fp, #-84]	; 0xffffffac
   11e74:	mov	r1, r0
   11e78:	movwne	r1, #1
   11e7c:	orr	r1, r1, r2
   11e80:	tst	r1, #1
   11e84:	beq	129b0 <__assert_fail@plt+0x1b68>
   11e88:	ldr	r4, [fp, #-80]	; 0xffffffb0
   11e8c:	clz	r0, r0
   11e90:	mov	lr, r5
   11e94:	mov	ip, r6
   11e98:	mov	r5, r3
   11e9c:	lsr	r0, r0, #5
   11ea0:	str	r0, [fp, #-52]	; 0xffffffcc
   11ea4:	ldrb	r6, [r4, r7]
   11ea8:	cmp	r6, #126	; 0x7e
   11eac:	bhi	123d4 <__assert_fail@plt+0x158c>
   11eb0:	add	r3, pc, #16
   11eb4:	mov	r9, #1
   11eb8:	mov	r2, #110	; 0x6e
   11ebc:	mov	r0, #97	; 0x61
   11ec0:	mov	r1, #0
   11ec4:	ldr	pc, [r3, r6, lsl #2]
   11ec8:	andeq	r2, r1, r8, lsr r2
   11ecc:	ldrdeq	r2, [r1], -r4
   11ed0:	ldrdeq	r2, [r1], -r4
   11ed4:	ldrdeq	r2, [r1], -r4
   11ed8:	ldrdeq	r2, [r1], -r4
   11edc:	ldrdeq	r2, [r1], -r4
   11ee0:	ldrdeq	r2, [r1], -r4
   11ee4:	andeq	r2, r1, r4, asr r4
   11ee8:	andeq	r2, r1, r8, lsl r2
   11eec:	andeq	r2, r1, r0, lsl r2
   11ef0:	andeq	r2, r1, r4, lsr #4
   11ef4:	andeq	r2, r1, ip, lsr r3
   11ef8:	andeq	r2, r1, r8, lsl #4
   11efc:	andeq	r2, r1, r0, lsr #4
   11f00:	ldrdeq	r2, [r1], -r4
   11f04:	ldrdeq	r2, [r1], -r4
   11f08:	ldrdeq	r2, [r1], -r4
   11f0c:	ldrdeq	r2, [r1], -r4
   11f10:	ldrdeq	r2, [r1], -r4
   11f14:	ldrdeq	r2, [r1], -r4
   11f18:	ldrdeq	r2, [r1], -r4
   11f1c:	ldrdeq	r2, [r1], -r4
   11f20:	ldrdeq	r2, [r1], -r4
   11f24:	ldrdeq	r2, [r1], -r4
   11f28:	ldrdeq	r2, [r1], -r4
   11f2c:	ldrdeq	r2, [r1], -r4
   11f30:	ldrdeq	r2, [r1], -r4
   11f34:	ldrdeq	r2, [r1], -r4
   11f38:	ldrdeq	r2, [r1], -r4
   11f3c:	ldrdeq	r2, [r1], -r4
   11f40:	ldrdeq	r2, [r1], -r4
   11f44:	ldrdeq	r2, [r1], -r4
   11f48:			; <UNDEFINED> instruction: 0x000121b8
   11f4c:			; <UNDEFINED> instruction: 0x000121bc
   11f50:			; <UNDEFINED> instruction: 0x000121bc
   11f54:	andeq	r2, r1, r0, lsr #3
   11f58:			; <UNDEFINED> instruction: 0x000121bc
   11f5c:	andeq	r2, r1, r4, asr #1
   11f60:			; <UNDEFINED> instruction: 0x000121bc
   11f64:	andeq	r2, r1, r4, asr #6
   11f68:			; <UNDEFINED> instruction: 0x000121bc
   11f6c:			; <UNDEFINED> instruction: 0x000121bc
   11f70:			; <UNDEFINED> instruction: 0x000121bc
   11f74:	andeq	r2, r1, r4, asr #1
   11f78:	andeq	r2, r1, r4, asr #1
   11f7c:	andeq	r2, r1, r4, asr #1
   11f80:	andeq	r2, r1, r4, asr #1
   11f84:	andeq	r2, r1, r4, asr #1
   11f88:	andeq	r2, r1, r4, asr #1
   11f8c:	andeq	r2, r1, r4, asr #1
   11f90:	andeq	r2, r1, r4, asr #1
   11f94:	andeq	r2, r1, r4, asr #1
   11f98:	andeq	r2, r1, r4, asr #1
   11f9c:	andeq	r2, r1, r4, asr #1
   11fa0:	andeq	r2, r1, r4, asr #1
   11fa4:	andeq	r2, r1, r4, asr #1
   11fa8:	andeq	r2, r1, r4, asr #1
   11fac:	andeq	r2, r1, r4, asr #1
   11fb0:	andeq	r2, r1, r4, asr #1
   11fb4:			; <UNDEFINED> instruction: 0x000121bc
   11fb8:			; <UNDEFINED> instruction: 0x000121bc
   11fbc:			; <UNDEFINED> instruction: 0x000121bc
   11fc0:			; <UNDEFINED> instruction: 0x000121bc
   11fc4:	andeq	r2, r1, r0, lsl r3
   11fc8:	ldrdeq	r2, [r1], -r4
   11fcc:	andeq	r2, r1, r4, asr #1
   11fd0:	andeq	r2, r1, r4, asr #1
   11fd4:	andeq	r2, r1, r4, asr #1
   11fd8:	andeq	r2, r1, r4, asr #1
   11fdc:	andeq	r2, r1, r4, asr #1
   11fe0:	andeq	r2, r1, r4, asr #1
   11fe4:	andeq	r2, r1, r4, asr #1
   11fe8:	andeq	r2, r1, r4, asr #1
   11fec:	andeq	r2, r1, r4, asr #1
   11ff0:	andeq	r2, r1, r4, asr #1
   11ff4:	andeq	r2, r1, r4, asr #1
   11ff8:	andeq	r2, r1, r4, asr #1
   11ffc:	andeq	r2, r1, r4, asr #1
   12000:	andeq	r2, r1, r4, asr #1
   12004:	andeq	r2, r1, r4, asr #1
   12008:	andeq	r2, r1, r4, asr #1
   1200c:	andeq	r2, r1, r4, asr #1
   12010:	andeq	r2, r1, r4, asr #1
   12014:	andeq	r2, r1, r4, asr #1
   12018:	andeq	r2, r1, r4, asr #1
   1201c:	andeq	r2, r1, r4, asr #1
   12020:	andeq	r2, r1, r4, asr #1
   12024:	andeq	r2, r1, r4, asr #1
   12028:	andeq	r2, r1, r4, asr #1
   1202c:	andeq	r2, r1, r4, asr #1
   12030:	andeq	r2, r1, r4, asr #1
   12034:			; <UNDEFINED> instruction: 0x000121bc
   12038:	andeq	r2, r1, r4, ror #3
   1203c:	andeq	r2, r1, r4, asr #1
   12040:			; <UNDEFINED> instruction: 0x000121bc
   12044:	andeq	r2, r1, r4, asr #1
   12048:			; <UNDEFINED> instruction: 0x000121bc
   1204c:	andeq	r2, r1, r4, asr #1
   12050:	andeq	r2, r1, r4, asr #1
   12054:	andeq	r2, r1, r4, asr #1
   12058:	andeq	r2, r1, r4, asr #1
   1205c:	andeq	r2, r1, r4, asr #1
   12060:	andeq	r2, r1, r4, asr #1
   12064:	andeq	r2, r1, r4, asr #1
   12068:	andeq	r2, r1, r4, asr #1
   1206c:	andeq	r2, r1, r4, asr #1
   12070:	andeq	r2, r1, r4, asr #1
   12074:	andeq	r2, r1, r4, asr #1
   12078:	andeq	r2, r1, r4, asr #1
   1207c:	andeq	r2, r1, r4, asr #1
   12080:	andeq	r2, r1, r4, asr #1
   12084:	andeq	r2, r1, r4, asr #1
   12088:	andeq	r2, r1, r4, asr #1
   1208c:	andeq	r2, r1, r4, asr #1
   12090:	andeq	r2, r1, r4, asr #1
   12094:	andeq	r2, r1, r4, asr #1
   12098:	andeq	r2, r1, r4, asr #1
   1209c:	andeq	r2, r1, r4, asr #1
   120a0:	andeq	r2, r1, r4, asr #1
   120a4:	andeq	r2, r1, r4, asr #1
   120a8:	andeq	r2, r1, r4, asr #1
   120ac:	andeq	r2, r1, r4, asr #1
   120b0:	andeq	r2, r1, r4, asr #1
   120b4:	andeq	r2, r1, r8, ror r1
   120b8:			; <UNDEFINED> instruction: 0x000121bc
   120bc:	andeq	r2, r1, r8, ror r1
   120c0:	andeq	r2, r1, r0, lsr #3
   120c4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   120c8:	tst	r0, #1
   120cc:	bne	120f8 <__assert_fail@plt+0x12b0>
   120d0:	ldr	r1, [fp, #16]
   120d4:	ubfx	r0, r6, #5, #3
   120d8:	mov	r2, #1
   120dc:	ldr	r0, [r1, r0, lsl #2]
   120e0:	and	r1, r6, #31
   120e4:	tst	r0, r2, lsl r1
   120e8:	beq	120f8 <__assert_fail@plt+0x12b0>
   120ec:	mov	r0, r6
   120f0:	mov	r1, r9
   120f4:	b	1210c <__assert_fail@plt+0x12c4>
   120f8:	ldr	r0, [fp, #-52]	; 0xffffffcc
   120fc:	mov	r1, r9
   12100:	cmp	r0, #0
   12104:	mov	r0, r6
   12108:	beq	12858 <__assert_fail@plt+0x1a10>
   1210c:	ldr	r2, [fp, #-76]	; 0xffffffb4
   12110:	tst	r2, #1
   12114:	bne	129f4 <__assert_fail@plt+0x1bac>
   12118:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1211c:	subs	r2, r2, #2
   12120:	movwne	r2, #1
   12124:	orr	r2, r2, lr
   12128:	tst	r2, #1
   1212c:	bne	12164 <__assert_fail@plt+0x131c>
   12130:	cmp	r8, ip
   12134:	mov	lr, #1
   12138:	movcc	r2, #39	; 0x27
   1213c:	strbcc	r2, [r5, r8]
   12140:	add	r2, r8, #1
   12144:	cmp	r2, ip
   12148:	movcc	r3, #36	; 0x24
   1214c:	strbcc	r3, [r5, r2]
   12150:	add	r2, r8, #2
   12154:	add	r8, r8, #3
   12158:	cmp	r2, ip
   1215c:	movcc	r3, #39	; 0x27
   12160:	strbcc	r3, [r5, r2]
   12164:	cmp	r8, ip
   12168:	movcc	r2, #92	; 0x5c
   1216c:	strbcc	r2, [r5, r8]
   12170:	add	r8, r8, #1
   12174:	b	12898 <__assert_fail@plt+0x1a50>
   12178:	cmp	sl, #1
   1217c:	beq	121a0 <__assert_fail@plt+0x1358>
   12180:	mov	r9, #0
   12184:	cmn	sl, #1
   12188:	bne	121ac <__assert_fail@plt+0x1364>
   1218c:	ldrb	r0, [r4, #1]
   12190:	cmp	r0, #0
   12194:	beq	121a0 <__assert_fail@plt+0x1358>
   12198:	mvn	sl, #0
   1219c:	b	121ac <__assert_fail@plt+0x1364>
   121a0:	mov	r9, #0
   121a4:	cmp	r7, #0
   121a8:	beq	121b8 <__assert_fail@plt+0x1370>
   121ac:	mov	r0, #0
   121b0:	str	r0, [fp, #-56]	; 0xffffffc8
   121b4:	b	120c4 <__assert_fail@plt+0x127c>
   121b8:	mov	r1, #1
   121bc:	ldr	r0, [fp, #-68]	; 0xffffffbc
   121c0:	cmp	r0, #2
   121c4:	bne	121dc <__assert_fail@plt+0x1394>
   121c8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   121cc:	mov	r9, r1
   121d0:	tst	r0, #1
   121d4:	beq	120c4 <__assert_fail@plt+0x127c>
   121d8:	b	129f4 <__assert_fail@plt+0x1bac>
   121dc:	mov	r9, r1
   121e0:	b	120c4 <__assert_fail@plt+0x127c>
   121e4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   121e8:	cmp	r0, #2
   121ec:	bne	12430 <__assert_fail@plt+0x15e8>
   121f0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   121f4:	tst	r0, #1
   121f8:	bne	129f4 <__assert_fail@plt+0x1bac>
   121fc:	mov	r0, #0
   12200:	str	r0, [fp, #-56]	; 0xffffffc8
   12204:	b	12448 <__assert_fail@plt+0x1600>
   12208:	mov	r0, #102	; 0x66
   1220c:	b	12454 <__assert_fail@plt+0x160c>
   12210:	mov	r2, #116	; 0x74
   12214:	b	12224 <__assert_fail@plt+0x13dc>
   12218:	mov	r0, #98	; 0x62
   1221c:	b	12454 <__assert_fail@plt+0x160c>
   12220:	mov	r2, #114	; 0x72
   12224:	ldr	r0, [sp, #68]	; 0x44
   12228:	tst	r0, #1
   1222c:	mov	r0, r2
   12230:	bne	12454 <__assert_fail@plt+0x160c>
   12234:	b	129f4 <__assert_fail@plt+0x1bac>
   12238:	ldr	r0, [sp, #84]	; 0x54
   1223c:	tst	r0, #1
   12240:	beq	12474 <__assert_fail@plt+0x162c>
   12244:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12248:	tst	r0, #1
   1224c:	bne	12ae0 <__assert_fail@plt+0x1c98>
   12250:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12254:	mov	r2, sl
   12258:	subs	r0, r0, #2
   1225c:	movwne	r0, #1
   12260:	orr	r0, r0, lr
   12264:	tst	r0, #1
   12268:	bne	122a0 <__assert_fail@plt+0x1458>
   1226c:	cmp	r8, ip
   12270:	mov	lr, #1
   12274:	movcc	r0, #39	; 0x27
   12278:	strbcc	r0, [r5, r8]
   1227c:	add	r0, r8, #1
   12280:	cmp	r0, ip
   12284:	movcc	r1, #36	; 0x24
   12288:	strbcc	r1, [r5, r0]
   1228c:	add	r0, r8, #2
   12290:	add	r8, r8, #3
   12294:	cmp	r0, ip
   12298:	movcc	r1, #39	; 0x27
   1229c:	strbcc	r1, [r5, r0]
   122a0:	mov	r1, #1
   122a4:	cmp	r8, ip
   122a8:	mov	r9, #0
   122ac:	mov	r6, #48	; 0x30
   122b0:	str	r1, [fp, #-56]	; 0xffffffc8
   122b4:	ldr	r1, [fp, #-68]	; 0xffffffbc
   122b8:	movcc	r0, #92	; 0x5c
   122bc:	strbcc	r0, [r5, r8]
   122c0:	add	r0, r8, #1
   122c4:	cmp	r1, #2
   122c8:	beq	125d0 <__assert_fail@plt+0x1788>
   122cc:	add	r1, r7, #1
   122d0:	cmp	r1, r2
   122d4:	bcs	125d0 <__assert_fail@plt+0x1788>
   122d8:	ldrb	r1, [r4, r1]
   122dc:	sub	r1, r1, #48	; 0x30
   122e0:	uxtb	r1, r1
   122e4:	cmp	r1, #9
   122e8:	bhi	125d0 <__assert_fail@plt+0x1788>
   122ec:	cmp	r0, ip
   122f0:	movcc	r1, #48	; 0x30
   122f4:	strbcc	r1, [r5, r0]
   122f8:	add	r0, r8, #2
   122fc:	add	r8, r8, #3
   12300:	cmp	r0, ip
   12304:	movcc	r1, #48	; 0x30
   12308:	strbcc	r1, [r5, r0]
   1230c:	b	120c4 <__assert_fail@plt+0x127c>
   12310:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12314:	mov	r6, #63	; 0x3f
   12318:	cmp	r0, #5
   1231c:	beq	125d8 <__assert_fail@plt+0x1790>
   12320:	mov	r1, #0
   12324:	cmp	r0, #2
   12328:	str	r1, [fp, #-56]	; 0xffffffc8
   1232c:	bne	1268c <__assert_fail@plt+0x1844>
   12330:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12334:	mov	r9, #0
   12338:	b	121d0 <__assert_fail@plt+0x1388>
   1233c:	mov	r0, #118	; 0x76
   12340:	b	12454 <__assert_fail@plt+0x160c>
   12344:	mov	r0, #1
   12348:	mov	r6, #39	; 0x27
   1234c:	str	r0, [sp, #60]	; 0x3c
   12350:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12354:	cmp	r0, #2
   12358:	bne	123cc <__assert_fail@plt+0x1584>
   1235c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12360:	tst	r0, #1
   12364:	bne	129f4 <__assert_fail@plt+0x1bac>
   12368:	ldr	r2, [sp, #56]	; 0x38
   1236c:	clz	r1, ip
   12370:	mov	lr, #0
   12374:	lsr	r1, r1, #5
   12378:	cmp	r2, #0
   1237c:	mov	r0, r2
   12380:	movwne	r0, #1
   12384:	orrs	r0, r0, r1
   12388:	moveq	r2, ip
   1238c:	moveq	ip, r0
   12390:	cmp	r8, ip
   12394:	str	r2, [sp, #56]	; 0x38
   12398:	movcc	r0, #39	; 0x27
   1239c:	strbcc	r0, [r5, r8]
   123a0:	add	r0, r8, #1
   123a4:	cmp	r0, ip
   123a8:	movcc	r1, #92	; 0x5c
   123ac:	strbcc	r1, [r5, r0]
   123b0:	add	r0, r8, #2
   123b4:	add	r8, r8, #3
   123b8:	cmp	r0, ip
   123bc:	movcc	r1, #39	; 0x27
   123c0:	strbcc	r1, [r5, r0]
   123c4:	mov	r0, #0
   123c8:	str	r0, [fp, #-56]	; 0xffffffc8
   123cc:	mov	r9, #1
   123d0:	b	120c4 <__assert_fail@plt+0x127c>
   123d4:	ldr	r0, [sp, #40]	; 0x28
   123d8:	str	lr, [sp, #44]	; 0x2c
   123dc:	str	ip, [sp, #88]	; 0x58
   123e0:	cmp	r0, #1
   123e4:	bne	12494 <__assert_fail@plt+0x164c>
   123e8:	str	sl, [sp, #36]	; 0x24
   123ec:	bl	10d58 <__ctype_b_loc@plt>
   123f0:	ldr	r0, [r0]
   123f4:	ldr	r4, [fp, #-80]	; 0xffffffb0
   123f8:	mov	r1, #1
   123fc:	add	r0, r0, r6, lsl #1
   12400:	ldrb	r0, [r0, #1]
   12404:	ubfx	r9, r0, #6, #1
   12408:	ldr	r0, [sp, #52]	; 0x34
   1240c:	ldr	lr, [sp, #44]	; 0x2c
   12410:	cmp	r1, #1
   12414:	orr	r3, r9, r0
   12418:	bhi	12694 <__assert_fail@plt+0x184c>
   1241c:	tst	r3, #1
   12420:	beq	12694 <__assert_fail@plt+0x184c>
   12424:	ldr	sl, [sp, #36]	; 0x24
   12428:	ldr	ip, [sp, #88]	; 0x58
   1242c:	b	120c4 <__assert_fail@plt+0x127c>
   12430:	ldr	r1, [sp, #48]	; 0x30
   12434:	mov	r0, #0
   12438:	str	r0, [fp, #-56]	; 0xffffffc8
   1243c:	mov	r0, #92	; 0x5c
   12440:	cmp	r1, #0
   12444:	beq	12454 <__assert_fail@plt+0x160c>
   12448:	mov	r6, #92	; 0x5c
   1244c:	mov	r9, #0
   12450:	b	12858 <__assert_fail@plt+0x1a10>
   12454:	mov	r1, #0
   12458:	mov	r9, #0
   1245c:	str	r1, [fp, #-56]	; 0xffffffc8
   12460:	ldr	r1, [sp, #84]	; 0x54
   12464:	tst	r1, #1
   12468:	mov	r1, #0
   1246c:	beq	120c4 <__assert_fail@plt+0x127c>
   12470:	b	1210c <__assert_fail@plt+0x12c4>
   12474:	ldr	r0, [sp, #32]
   12478:	mov	r6, #0
   1247c:	mov	r9, #0
   12480:	cmp	r0, #0
   12484:	mov	r0, #0
   12488:	str	r0, [fp, #-56]	; 0xffffffc8
   1248c:	beq	120c4 <__assert_fail@plt+0x127c>
   12490:	b	128b0 <__assert_fail@plt+0x1a68>
   12494:	mov	r0, #0
   12498:	cmn	sl, #1
   1249c:	sub	r3, fp, #40	; 0x28
   124a0:	str	r0, [fp, #-36]	; 0xffffffdc
   124a4:	str	r0, [fp, #-40]	; 0xffffffd8
   124a8:	bne	124c0 <__assert_fail@plt+0x1678>
   124ac:	mov	r0, r4
   124b0:	bl	10d7c <strlen@plt>
   124b4:	ldr	r4, [fp, #-80]	; 0xffffffb0
   124b8:	sub	r3, fp, #40	; 0x28
   124bc:	mov	sl, r0
   124c0:	ldr	r0, [sp, #72]	; 0x48
   124c4:	mov	r9, #1
   124c8:	mov	r1, #0
   124cc:	str	sl, [sp, #36]	; 0x24
   124d0:	add	r0, r0, r7
   124d4:	str	r0, [sp, #20]
   124d8:	add	r0, r1, r7
   124dc:	str	r1, [sp, #24]
   124e0:	add	r1, r4, r0
   124e4:	mov	r4, r0
   124e8:	sub	r2, sl, r0
   124ec:	sub	r0, fp, #44	; 0x2c
   124f0:	bl	14008 <__assert_fail@plt+0x31c0>
   124f4:	cmp	r0, #0
   124f8:	beq	12904 <__assert_fail@plt+0x1abc>
   124fc:	cmn	r0, #1
   12500:	beq	128bc <__assert_fail@plt+0x1a74>
   12504:	ldr	r2, [sp, #36]	; 0x24
   12508:	cmn	r0, #2
   1250c:	beq	128c4 <__assert_fail@plt+0x1a7c>
   12510:	ldr	r2, [sp, #64]	; 0x40
   12514:	ldr	ip, [sp, #88]	; 0x58
   12518:	ldr	r4, [sp, #84]	; 0x54
   1251c:	ldr	lr, [fp, #-48]	; 0xffffffd0
   12520:	cmp	r0, #2
   12524:	mov	r1, #0
   12528:	movwcc	r1, #1
   1252c:	eor	r2, r2, #1
   12530:	orrs	r1, r2, r1
   12534:	bne	12584 <__assert_fail@plt+0x173c>
   12538:	ldr	r1, [sp, #24]
   1253c:	ldr	r2, [sp, #20]
   12540:	add	r1, r2, r1
   12544:	sub	r2, r0, #1
   12548:	ldrb	r3, [r1]
   1254c:	sub	r5, r3, #94	; 0x5e
   12550:	cmp	r5, #30
   12554:	bhi	1256c <__assert_fail@plt+0x1724>
   12558:	mov	r4, #1
   1255c:	mov	sl, #1073741829	; 0x40000005
   12560:	tst	sl, r4, lsl r5
   12564:	ldr	r4, [sp, #84]	; 0x54
   12568:	bne	129cc <__assert_fail@plt+0x1b84>
   1256c:	sub	r3, r3, #91	; 0x5b
   12570:	cmp	r3, #2
   12574:	bcc	129cc <__assert_fail@plt+0x1b84>
   12578:	add	r1, r1, #1
   1257c:	subs	r2, r2, #1
   12580:	bne	12548 <__assert_fail@plt+0x1700>
   12584:	ldr	r5, [sp, #24]
   12588:	str	lr, [fp, #-48]	; 0xffffffd0
   1258c:	add	r5, r0, r5
   12590:	ldr	r0, [fp, #-44]	; 0xffffffd4
   12594:	bl	10cc8 <iswprint@plt>
   12598:	cmp	r0, #0
   1259c:	sub	r4, fp, #40	; 0x28
   125a0:	movwne	r0, #1
   125a4:	and	r9, r9, r0
   125a8:	mov	r0, r4
   125ac:	bl	10c98 <mbsinit@plt>
   125b0:	mov	r1, r5
   125b4:	mov	r3, r4
   125b8:	ldr	sl, [sp, #36]	; 0x24
   125bc:	ldr	r5, [fp, #-84]	; 0xffffffac
   125c0:	ldr	r4, [fp, #-80]	; 0xffffffb0
   125c4:	cmp	r0, #0
   125c8:	beq	124d8 <__assert_fail@plt+0x1690>
   125cc:	b	12408 <__assert_fail@plt+0x15c0>
   125d0:	mov	r8, r0
   125d4:	b	120c4 <__assert_fail@plt+0x127c>
   125d8:	mov	r0, #0
   125dc:	str	r0, [fp, #-56]	; 0xffffffc8
   125e0:	ldr	r0, [sp, #28]
   125e4:	cmp	r0, #0
   125e8:	beq	1268c <__assert_fail@plt+0x1844>
   125ec:	add	r0, r7, #2
   125f0:	mov	r1, sl
   125f4:	cmp	r0, sl
   125f8:	bcs	1268c <__assert_fail@plt+0x1844>
   125fc:	add	r1, r7, r4
   12600:	ldrb	r1, [r1, #1]
   12604:	cmp	r1, #63	; 0x3f
   12608:	bne	1268c <__assert_fail@plt+0x1844>
   1260c:	ldrb	r9, [r4, r0]
   12610:	sub	r2, r9, #33	; 0x21
   12614:	cmp	r2, #29
   12618:	bhi	1268c <__assert_fail@plt+0x1844>
   1261c:	mov	r1, r4
   12620:	movw	r4, #20929	; 0x51c1
   12624:	mov	r3, #1
   12628:	movt	r4, #14336	; 0x3800
   1262c:	tst	r4, r3, lsl r2
   12630:	beq	12918 <__assert_fail@plt+0x1ad0>
   12634:	ldr	r2, [fp, #-76]	; 0xffffffb4
   12638:	tst	r2, #1
   1263c:	bne	12ae8 <__assert_fail@plt+0x1ca0>
   12640:	cmp	r8, ip
   12644:	mov	r4, r1
   12648:	mov	r7, r0
   1264c:	mov	r6, r9
   12650:	movcc	r2, #63	; 0x3f
   12654:	strbcc	r2, [r5, r8]
   12658:	add	r2, r8, #1
   1265c:	cmp	r2, ip
   12660:	movcc	r3, #34	; 0x22
   12664:	strbcc	r3, [r5, r2]
   12668:	add	r2, r8, #2
   1266c:	cmp	r2, ip
   12670:	movcc	r3, #34	; 0x22
   12674:	strbcc	r3, [r5, r2]
   12678:	add	r2, r8, #3
   1267c:	add	r8, r8, #4
   12680:	cmp	r2, ip
   12684:	movcc	r3, #63	; 0x3f
   12688:	strbcc	r3, [r5, r2]
   1268c:	mov	r9, #0
   12690:	b	120c4 <__assert_fail@plt+0x127c>
   12694:	ldr	sl, [sp, #36]	; 0x24
   12698:	add	r0, r1, r7
   1269c:	mov	r2, #0
   126a0:	str	r3, [sp, #24]
   126a4:	str	r0, [fp, #-56]	; 0xffffffc8
   126a8:	tst	r3, #1
   126ac:	beq	126d8 <__assert_fail@plt+0x1890>
   126b0:	ldr	r0, [fp, #-52]	; 0xffffffcc
   126b4:	tst	r0, #1
   126b8:	beq	127a0 <__assert_fail@plt+0x1958>
   126bc:	ldr	r1, [sp, #88]	; 0x58
   126c0:	mov	r0, r3
   126c4:	cmp	r8, r1
   126c8:	movcc	r1, #92	; 0x5c
   126cc:	strbcc	r1, [r5, r8]
   126d0:	add	r8, r8, #1
   126d4:	b	127a4 <__assert_fail@plt+0x195c>
   126d8:	ldr	r1, [fp, #-76]	; 0xffffffb4
   126dc:	tst	r1, #1
   126e0:	bne	129f0 <__assert_fail@plt+0x1ba8>
   126e4:	ldr	r1, [fp, #-68]	; 0xffffffbc
   126e8:	subs	r2, r1, #2
   126ec:	movwne	r2, #1
   126f0:	orr	r2, r2, lr
   126f4:	tst	r2, #1
   126f8:	bne	1273c <__assert_fail@plt+0x18f4>
   126fc:	ldr	r1, [sp, #88]	; 0x58
   12700:	add	r2, r8, #1
   12704:	mov	lr, #1
   12708:	cmp	r8, r1
   1270c:	movcc	r1, #39	; 0x27
   12710:	strbcc	r1, [r5, r8]
   12714:	ldr	r1, [sp, #88]	; 0x58
   12718:	cmp	r2, r1
   1271c:	movcc	r1, #36	; 0x24
   12720:	strbcc	r1, [r5, r2]
   12724:	ldr	r1, [sp, #88]	; 0x58
   12728:	add	r2, r8, #2
   1272c:	add	r8, r8, #3
   12730:	cmp	r2, r1
   12734:	movcc	r1, #39	; 0x27
   12738:	strbcc	r1, [r5, r2]
   1273c:	ldr	r1, [sp, #88]	; 0x58
   12740:	add	r2, r8, #1
   12744:	mov	r0, r3
   12748:	cmp	r8, r1
   1274c:	movcc	r1, #92	; 0x5c
   12750:	strbcc	r1, [r5, r8]
   12754:	ldr	r1, [sp, #88]	; 0x58
   12758:	cmp	r2, r1
   1275c:	bcs	12770 <__assert_fail@plt+0x1928>
   12760:	uxtb	r3, r6
   12764:	mov	r1, #48	; 0x30
   12768:	orr	r3, r1, r3, lsr #6
   1276c:	strb	r3, [r5, r2]
   12770:	ldr	r1, [sp, #88]	; 0x58
   12774:	add	r2, r8, #2
   12778:	add	r8, r8, #3
   1277c:	cmp	r2, r1
   12780:	lsrcc	r3, r6, #3
   12784:	movcc	r1, #6
   12788:	bficc	r3, r1, #3, #29
   1278c:	mov	r1, #6
   12790:	bfi	r6, r1, #3, #29
   12794:	strbcc	r3, [r5, r2]
   12798:	mov	r2, #1
   1279c:	b	127ac <__assert_fail@plt+0x1964>
   127a0:	mov	r0, r3
   127a4:	mov	r1, #0
   127a8:	str	r1, [fp, #-52]	; 0xffffffcc
   127ac:	mov	ip, r2
   127b0:	and	r1, r2, #1
   127b4:	ldr	r2, [fp, #-56]	; 0xffffffc8
   127b8:	add	r3, r7, #1
   127bc:	cmp	r2, r3
   127c0:	bls	12848 <__assert_fail@plt+0x1a00>
   127c4:	cmp	r1, #0
   127c8:	mvn	r5, lr
   127cc:	movwne	r1, #1
   127d0:	orr	r5, r5, r1
   127d4:	tst	r5, #1
   127d8:	bne	1281c <__assert_fail@plt+0x19d4>
   127dc:	ldr	r1, [sp, #88]	; 0x58
   127e0:	ldr	r5, [fp, #-84]	; 0xffffffac
   127e4:	mov	r2, r4
   127e8:	ldr	r4, [sp, #88]	; 0x58
   127ec:	ldr	r0, [sp, #24]
   127f0:	mov	lr, #0
   127f4:	cmp	r8, r1
   127f8:	movcc	r1, #39	; 0x27
   127fc:	strbcc	r1, [r5, r8]
   12800:	add	r1, r8, #1
   12804:	add	r8, r8, #2
   12808:	cmp	r1, r4
   1280c:	movcc	r4, #39	; 0x27
   12810:	strbcc	r4, [r5, r1]
   12814:	mov	r4, r2
   12818:	b	12820 <__assert_fail@plt+0x19d8>
   1281c:	ldr	r5, [fp, #-84]	; 0xffffffac
   12820:	ldr	r1, [sp, #88]	; 0x58
   12824:	mov	r2, ip
   12828:	cmp	r8, r1
   1282c:	ldr	r1, [sp, #72]	; 0x48
   12830:	strbcc	r6, [r5, r8]
   12834:	add	r8, r8, #1
   12838:	ldrb	r6, [r1, r7]
   1283c:	mov	r7, r3
   12840:	mov	r3, r0
   12844:	b	126a8 <__assert_fail@plt+0x1860>
   12848:	ldr	ip, [sp, #88]	; 0x58
   1284c:	cmp	r1, #0
   12850:	movwne	r1, #1
   12854:	str	r1, [fp, #-56]	; 0xffffffc8
   12858:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1285c:	cmp	r0, #0
   12860:	bne	12890 <__assert_fail@plt+0x1a48>
   12864:	tst	lr, #1
   12868:	beq	12890 <__assert_fail@plt+0x1a48>
   1286c:	cmp	r8, ip
   12870:	mov	lr, #0
   12874:	movcc	r0, #39	; 0x27
   12878:	strbcc	r0, [r5, r8]
   1287c:	add	r0, r8, #1
   12880:	add	r8, r8, #2
   12884:	cmp	r0, ip
   12888:	movcc	r1, #39	; 0x27
   1288c:	strbcc	r1, [r5, r0]
   12890:	mov	r1, r9
   12894:	mov	r0, r6
   12898:	cmp	r8, ip
   1289c:	strbcc	r0, [r5, r8]
   128a0:	ldr	r0, [fp, #-48]	; 0xffffffd0
   128a4:	add	r8, r8, #1
   128a8:	and	r0, r0, r1
   128ac:	str	r0, [fp, #-48]	; 0xffffffd0
   128b0:	mov	r3, sl
   128b4:	add	r7, r7, #1
   128b8:	b	11da8 <__assert_fail@plt+0xf60>
   128bc:	mov	r9, #0
   128c0:	b	12904 <__assert_fail@plt+0x1abc>
   128c4:	mov	r9, #0
   128c8:	cmp	r2, r4
   128cc:	bls	12904 <__assert_fail@plt+0x1abc>
   128d0:	ldr	r4, [fp, #-80]	; 0xffffffb0
   128d4:	ldr	r1, [sp, #24]
   128d8:	add	r0, r4, r7
   128dc:	mov	r3, r1
   128e0:	ldrb	r1, [r0, r1]
   128e4:	cmp	r1, #0
   128e8:	beq	12910 <__assert_fail@plt+0x1ac8>
   128ec:	add	r3, r3, #1
   128f0:	add	r1, r7, r3
   128f4:	cmp	r1, r2
   128f8:	mov	r1, r3
   128fc:	bcc	128dc <__assert_fail@plt+0x1a94>
   12900:	b	12408 <__assert_fail@plt+0x15c0>
   12904:	ldr	r4, [fp, #-80]	; 0xffffffb0
   12908:	ldr	r1, [sp, #24]
   1290c:	b	12408 <__assert_fail@plt+0x15c0>
   12910:	mov	r1, r3
   12914:	b	12408 <__assert_fail@plt+0x15c0>
   12918:	mov	r9, #0
   1291c:	mov	r4, r1
   12920:	b	120c4 <__assert_fail@plt+0x127c>
   12924:	mov	sl, r7
   12928:	b	12930 <__assert_fail@plt+0x1ae8>
   1292c:	mvn	sl, #0
   12930:	ldr	r1, [fp, #-68]	; 0xffffffbc
   12934:	ldr	r2, [fp, #-76]	; 0xffffffb4
   12938:	eor	r0, r1, #2
   1293c:	orr	r0, r0, r8
   12940:	clz	r0, r0
   12944:	lsr	r0, r0, #5
   12948:	tst	r2, r0
   1294c:	bne	129f4 <__assert_fail@plt+0x1bac>
   12950:	subs	r0, r1, #2
   12954:	movwne	r0, #1
   12958:	orr	r0, r2, r0
   1295c:	tst	r0, #1
   12960:	ldreq	r0, [sp, #60]	; 0x3c
   12964:	ldreq	r1, [fp, #-48]	; 0xffffffd0
   12968:	eoreq	r0, r0, #1
   1296c:	tsteq	r0, #1
   12970:	bne	12a88 <__assert_fail@plt+0x1c40>
   12974:	tst	r1, #1
   12978:	bne	12a54 <__assert_fail@plt+0x1c0c>
   1297c:	ldr	r6, [sp, #56]	; 0x38
   12980:	mov	r9, #0
   12984:	cmp	r6, #0
   12988:	beq	12a80 <__assert_fail@plt+0x1c38>
   1298c:	ldr	r0, [sp, #84]	; 0x54
   12990:	mov	r1, #0
   12994:	mov	r7, #2
   12998:	cmp	ip, #0
   1299c:	str	r1, [fp, #-48]	; 0xffffffd0
   129a0:	mov	r1, #0
   129a4:	str	r1, [fp, #-76]	; 0xffffffb4
   129a8:	beq	11b10 <__assert_fail@plt+0xcc8>
   129ac:	b	12a88 <__assert_fail@plt+0x1c40>
   129b0:	ldr	r4, [fp, #-80]	; 0xffffffb0
   129b4:	ldr	r1, [fp, #12]
   129b8:	ldr	r2, [fp, #-68]	; 0xffffffbc
   129bc:	mov	r5, r3
   129c0:	mov	ip, r6
   129c4:	mov	r3, sl
   129c8:	b	12a18 <__assert_fail@plt+0x1bd0>
   129cc:	tst	r4, #1
   129d0:	ldr	r5, [fp, #-84]	; 0xffffffac
   129d4:	ldr	r4, [fp, #-80]	; 0xffffffb0
   129d8:	ldr	r1, [fp, #12]
   129dc:	ldr	r3, [sp, #36]	; 0x24
   129e0:	mov	r0, #2
   129e4:	movwne	r0, #4
   129e8:	mov	r2, r0
   129ec:	b	12a18 <__assert_fail@plt+0x1bd0>
   129f0:	ldr	ip, [sp, #88]	; 0x58
   129f4:	ldr	r1, [sp, #84]	; 0x54
   129f8:	mov	r0, #2
   129fc:	tst	r1, #1
   12a00:	movwne	r0, #4
   12a04:	ldr	r2, [fp, #-68]	; 0xffffffbc
   12a08:	ldr	r1, [fp, #12]
   12a0c:	mov	r3, sl
   12a10:	cmp	r2, #2
   12a14:	moveq	r2, r0
   12a18:	mov	r0, #0
   12a1c:	bic	r1, r1, #2
   12a20:	str	r2, [sp]
   12a24:	mov	r2, r4
   12a28:	str	r0, [sp, #8]
   12a2c:	ldr	r0, [sp, #76]	; 0x4c
   12a30:	str	r1, [sp, #4]
   12a34:	mov	r1, ip
   12a38:	str	r0, [sp, #12]
   12a3c:	ldr	r0, [sp, #80]	; 0x50
   12a40:	str	r0, [sp, #16]
   12a44:	mov	r0, r5
   12a48:	bl	11a84 <__assert_fail@plt+0xc3c>
   12a4c:	mov	r8, r0
   12a50:	b	12ad4 <__assert_fail@plt+0x1c8c>
   12a54:	mov	r0, #5
   12a58:	ldr	r1, [sp, #56]	; 0x38
   12a5c:	ldr	r2, [fp, #-80]	; 0xffffffb0
   12a60:	mov	r3, sl
   12a64:	str	r0, [sp]
   12a68:	ldr	r0, [fp, #12]
   12a6c:	str	r0, [sp, #4]
   12a70:	ldr	r0, [fp, #16]
   12a74:	str	r0, [sp, #8]
   12a78:	ldr	r0, [sp, #76]	; 0x4c
   12a7c:	b	12a38 <__assert_fail@plt+0x1bf0>
   12a80:	mov	r0, #0
   12a84:	str	r0, [fp, #-76]	; 0xffffffb4
   12a88:	ldr	r1, [fp, #-88]	; 0xffffffa8
   12a8c:	cmp	r1, #0
   12a90:	beq	12ac8 <__assert_fail@plt+0x1c80>
   12a94:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12a98:	tst	r0, #1
   12a9c:	bne	12ac8 <__assert_fail@plt+0x1c80>
   12aa0:	ldrb	r0, [r1]
   12aa4:	cmp	r0, #0
   12aa8:	beq	12ac8 <__assert_fail@plt+0x1c80>
   12aac:	add	r1, r1, #1
   12ab0:	cmp	r8, ip
   12ab4:	strbcc	r0, [r5, r8]
   12ab8:	add	r8, r8, #1
   12abc:	ldrb	r0, [r1], #1
   12ac0:	cmp	r0, #0
   12ac4:	bne	12ab0 <__assert_fail@plt+0x1c68>
   12ac8:	cmp	r8, ip
   12acc:	movcc	r0, #0
   12ad0:	strbcc	r0, [r5, r8]
   12ad4:	mov	r0, r8
   12ad8:	sub	sp, fp, #28
   12adc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12ae0:	mov	r0, #4
   12ae4:	b	12a04 <__assert_fail@plt+0x1bbc>
   12ae8:	mov	r4, r1
   12aec:	b	129f4 <__assert_fail@plt+0x1bac>
   12af0:	bl	10e30 <abort@plt>
   12af4:	mov	r3, r2
   12af8:	mov	r2, #0
   12afc:	b	12b00 <__assert_fail@plt+0x1cb8>
   12b00:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12b04:	add	fp, sp, #28
   12b08:	sub	sp, sp, #36	; 0x24
   12b0c:	movw	r8, #20784	; 0x5130
   12b10:	cmp	r3, #0
   12b14:	mov	r4, r2
   12b18:	str	r2, [sp, #24]
   12b1c:	mov	r5, r1
   12b20:	mov	r6, r0
   12b24:	str	r0, [sp, #20]
   12b28:	movt	r8, #2
   12b2c:	movne	r8, r3
   12b30:	bl	10d88 <__errno_location@plt>
   12b34:	str	r0, [sp, #28]
   12b38:	ldr	r1, [r8, #40]	; 0x28
   12b3c:	ldr	r2, [r8, #44]	; 0x2c
   12b40:	ldr	r7, [r0]
   12b44:	cmp	r4, #0
   12b48:	add	sl, r8, #8
   12b4c:	mov	r0, #0
   12b50:	ldm	r8, {r3, r9}
   12b54:	orreq	r9, r9, #1
   12b58:	stm	sp, {r3, r9, sl}
   12b5c:	str	r1, [sp, #12]
   12b60:	str	r2, [sp, #16]
   12b64:	mov	r1, #0
   12b68:	mov	r2, r6
   12b6c:	mov	r3, r5
   12b70:	str	r7, [sp, #32]
   12b74:	mov	r7, r5
   12b78:	bl	11a84 <__assert_fail@plt+0xc3c>
   12b7c:	add	r4, r0, #1
   12b80:	mov	r5, r0
   12b84:	mov	r0, r4
   12b88:	bl	13878 <__assert_fail@plt+0x2a30>
   12b8c:	mov	r6, r0
   12b90:	ldr	r0, [r8]
   12b94:	ldr	r2, [r8, #44]	; 0x2c
   12b98:	ldr	r1, [r8, #40]	; 0x28
   12b9c:	mov	r3, r7
   12ba0:	stm	sp, {r0, r9, sl}
   12ba4:	str	r2, [sp, #16]
   12ba8:	ldr	r2, [sp, #20]
   12bac:	str	r1, [sp, #12]
   12bb0:	mov	r0, r6
   12bb4:	mov	r1, r4
   12bb8:	bl	11a84 <__assert_fail@plt+0xc3c>
   12bbc:	ldr	r0, [sp, #24]
   12bc0:	ldr	r1, [sp, #32]
   12bc4:	ldr	r2, [sp, #28]
   12bc8:	cmp	r0, #0
   12bcc:	str	r1, [r2]
   12bd0:	strne	r5, [r0]
   12bd4:	mov	r0, r6
   12bd8:	sub	sp, fp, #28
   12bdc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12be0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12be4:	add	fp, sp, #24
   12be8:	movw	r5, #20692	; 0x50d4
   12bec:	movw	r8, #20688	; 0x50d0
   12bf0:	movt	r5, #2
   12bf4:	movt	r8, #2
   12bf8:	ldr	r0, [r5]
   12bfc:	ldr	r4, [r8]
   12c00:	cmp	r0, #2
   12c04:	blt	12c30 <__assert_fail@plt+0x1de8>
   12c08:	add	r7, r4, #12
   12c0c:	mov	r6, #0
   12c10:	ldr	r0, [r7, r6, lsl #3]
   12c14:	bl	13f04 <__assert_fail@plt+0x30bc>
   12c18:	ldr	r1, [r5]
   12c1c:	add	r2, r6, #2
   12c20:	add	r0, r6, #1
   12c24:	mov	r6, r0
   12c28:	cmp	r2, r1
   12c2c:	blt	12c10 <__assert_fail@plt+0x1dc8>
   12c30:	ldr	r0, [r4, #4]
   12c34:	movw	r9, #20832	; 0x5160
   12c38:	movw	r7, #20696	; 0x50d8
   12c3c:	movt	r9, #2
   12c40:	movt	r7, #2
   12c44:	cmp	r0, r9
   12c48:	beq	12c58 <__assert_fail@plt+0x1e10>
   12c4c:	bl	13f04 <__assert_fail@plt+0x30bc>
   12c50:	mov	r0, #256	; 0x100
   12c54:	stm	r7, {r0, r9}
   12c58:	cmp	r4, r7
   12c5c:	beq	12c6c <__assert_fail@plt+0x1e24>
   12c60:	mov	r0, r4
   12c64:	bl	13f04 <__assert_fail@plt+0x30bc>
   12c68:	str	r7, [r8]
   12c6c:	mov	r0, #1
   12c70:	str	r0, [r5]
   12c74:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12c78:	movw	r3, #20784	; 0x5130
   12c7c:	mvn	r2, #0
   12c80:	movt	r3, #2
   12c84:	b	12c88 <__assert_fail@plt+0x1e40>
   12c88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12c8c:	add	fp, sp, #28
   12c90:	sub	sp, sp, #44	; 0x2c
   12c94:	mov	r7, r3
   12c98:	str	r2, [sp, #36]	; 0x24
   12c9c:	str	r1, [sp, #32]
   12ca0:	mov	r5, r0
   12ca4:	bl	10d88 <__errno_location@plt>
   12ca8:	cmp	r5, #0
   12cac:	bmi	12e1c <__assert_fail@plt+0x1fd4>
   12cb0:	cmn	r5, #-2147483647	; 0x80000001
   12cb4:	beq	12e1c <__assert_fail@plt+0x1fd4>
   12cb8:	movw	r8, #20692	; 0x50d4
   12cbc:	movw	r4, #20688	; 0x50d0
   12cc0:	str	r0, [sp, #28]
   12cc4:	ldr	r0, [r0]
   12cc8:	movt	r8, #2
   12ccc:	movt	r4, #2
   12cd0:	ldr	r1, [r8]
   12cd4:	ldr	r6, [r4]
   12cd8:	str	r0, [sp, #24]
   12cdc:	cmp	r1, r5
   12ce0:	ble	12cec <__assert_fail@plt+0x1ea4>
   12ce4:	mov	sl, r6
   12ce8:	b	12d58 <__assert_fail@plt+0x1f10>
   12cec:	movw	r9, #20696	; 0x50d8
   12cf0:	mov	r0, #8
   12cf4:	str	r1, [fp, #-32]	; 0xffffffe0
   12cf8:	sub	r1, r5, r1
   12cfc:	mvn	r3, #-2147483648	; 0x80000000
   12d00:	movt	r9, #2
   12d04:	str	r0, [sp]
   12d08:	add	r2, r1, #1
   12d0c:	sub	r1, fp, #32
   12d10:	subs	r0, r6, r9
   12d14:	movne	r0, r6
   12d18:	bl	139a8 <__assert_fail@plt+0x2b60>
   12d1c:	mov	sl, r0
   12d20:	cmp	r6, r9
   12d24:	str	r0, [r4]
   12d28:	bne	12d34 <__assert_fail@plt+0x1eec>
   12d2c:	ldrd	r0, [r9]
   12d30:	stm	sl, {r0, r1}
   12d34:	ldr	r1, [r8]
   12d38:	ldr	r2, [fp, #-32]	; 0xffffffe0
   12d3c:	add	r0, sl, r1, lsl #3
   12d40:	sub	r1, r2, r1
   12d44:	lsl	r2, r1, #3
   12d48:	mov	r1, #0
   12d4c:	bl	10da0 <memset@plt>
   12d50:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12d54:	str	r0, [r8]
   12d58:	mov	r9, sl
   12d5c:	ldm	r7, {r0, r1}
   12d60:	orr	r8, r1, #1
   12d64:	add	r1, r7, #8
   12d68:	ldr	r2, [r7, #40]	; 0x28
   12d6c:	ldr	r3, [r7, #44]	; 0x2c
   12d70:	ldr	r6, [r9, r5, lsl #3]!
   12d74:	str	r1, [sp, #20]
   12d78:	ldr	r4, [r9, #4]!
   12d7c:	stm	sp, {r0, r8}
   12d80:	add	r0, sp, #8
   12d84:	stm	r0, {r1, r2, r3}
   12d88:	ldr	r2, [sp, #32]
   12d8c:	ldr	r3, [sp, #36]	; 0x24
   12d90:	mov	r1, r6
   12d94:	mov	r0, r4
   12d98:	bl	11a84 <__assert_fail@plt+0xc3c>
   12d9c:	cmp	r6, r0
   12da0:	bhi	12e04 <__assert_fail@plt+0x1fbc>
   12da4:	add	r6, r0, #1
   12da8:	movw	r0, #20832	; 0x5160
   12dac:	movt	r0, #2
   12db0:	str	r6, [sl, r5, lsl #3]
   12db4:	cmp	r4, r0
   12db8:	beq	12dc4 <__assert_fail@plt+0x1f7c>
   12dbc:	mov	r0, r4
   12dc0:	bl	13f04 <__assert_fail@plt+0x30bc>
   12dc4:	mov	r0, r6
   12dc8:	bl	13878 <__assert_fail@plt+0x2a30>
   12dcc:	str	r0, [r9]
   12dd0:	mov	r4, r0
   12dd4:	add	r3, sp, #8
   12dd8:	ldr	r0, [r7]
   12ddc:	ldr	r1, [r7, #40]	; 0x28
   12de0:	ldr	r2, [r7, #44]	; 0x2c
   12de4:	stm	sp, {r0, r8}
   12de8:	ldr	r0, [sp, #20]
   12dec:	stm	r3, {r0, r1, r2}
   12df0:	ldr	r2, [sp, #32]
   12df4:	ldr	r3, [sp, #36]	; 0x24
   12df8:	mov	r0, r4
   12dfc:	mov	r1, r6
   12e00:	bl	11a84 <__assert_fail@plt+0xc3c>
   12e04:	ldr	r0, [sp, #28]
   12e08:	ldr	r1, [sp, #24]
   12e0c:	str	r1, [r0]
   12e10:	mov	r0, r4
   12e14:	sub	sp, fp, #28
   12e18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12e1c:	bl	10e30 <abort@plt>
   12e20:	movw	r3, #20784	; 0x5130
   12e24:	movt	r3, #2
   12e28:	b	12c88 <__assert_fail@plt+0x1e40>
   12e2c:	movw	r3, #20784	; 0x5130
   12e30:	mov	r1, r0
   12e34:	mov	r0, #0
   12e38:	mvn	r2, #0
   12e3c:	movt	r3, #2
   12e40:	b	12c88 <__assert_fail@plt+0x1e40>
   12e44:	movw	r3, #20784	; 0x5130
   12e48:	mov	r2, r1
   12e4c:	mov	r1, r0
   12e50:	mov	r0, #0
   12e54:	movt	r3, #2
   12e58:	b	12c88 <__assert_fail@plt+0x1e40>
   12e5c:	push	{fp, lr}
   12e60:	mov	fp, sp
   12e64:	sub	sp, sp, #48	; 0x30
   12e68:	vmov.i32	q8, #0	; 0x00000000
   12e6c:	mov	ip, #32
   12e70:	mov	r3, sp
   12e74:	mov	lr, r2
   12e78:	cmp	r1, #10
   12e7c:	add	r2, r3, #16
   12e80:	vst1.64	{d16-d17}, [r3], ip
   12e84:	vst1.64	{d16-d17}, [r2]
   12e88:	vst1.64	{d16-d17}, [r3]
   12e8c:	beq	12eac <__assert_fail@plt+0x2064>
   12e90:	str	r1, [sp]
   12e94:	mov	r3, sp
   12e98:	mov	r1, lr
   12e9c:	mvn	r2, #0
   12ea0:	bl	12c88 <__assert_fail@plt+0x1e40>
   12ea4:	mov	sp, fp
   12ea8:	pop	{fp, pc}
   12eac:	bl	10e30 <abort@plt>
   12eb0:	push	{r4, sl, fp, lr}
   12eb4:	add	fp, sp, #8
   12eb8:	sub	sp, sp, #48	; 0x30
   12ebc:	vmov.i32	q8, #0	; 0x00000000
   12ec0:	mov	ip, r3
   12ec4:	mov	r3, sp
   12ec8:	mov	lr, #32
   12ecc:	cmp	r1, #10
   12ed0:	add	r4, r3, #16
   12ed4:	vst1.64	{d16-d17}, [r3], lr
   12ed8:	vst1.64	{d16-d17}, [r4]
   12edc:	vst1.64	{d16-d17}, [r3]
   12ee0:	beq	12f00 <__assert_fail@plt+0x20b8>
   12ee4:	str	r1, [sp]
   12ee8:	mov	r1, r2
   12eec:	mov	r3, sp
   12ef0:	mov	r2, ip
   12ef4:	bl	12c88 <__assert_fail@plt+0x1e40>
   12ef8:	sub	sp, fp, #8
   12efc:	pop	{r4, sl, fp, pc}
   12f00:	bl	10e30 <abort@plt>
   12f04:	mov	r2, r1
   12f08:	mov	r1, r0
   12f0c:	mov	r0, #0
   12f10:	b	12e5c <__assert_fail@plt+0x2014>
   12f14:	mov	r3, r2
   12f18:	mov	r2, r1
   12f1c:	mov	r1, r0
   12f20:	mov	r0, #0
   12f24:	b	12eb0 <__assert_fail@plt+0x2068>
   12f28:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12f2c:	add	fp, sp, #24
   12f30:	sub	sp, sp, #48	; 0x30
   12f34:	movw	r8, #20784	; 0x5130
   12f38:	mov	lr, r0
   12f3c:	mov	r3, sp
   12f40:	mov	ip, r1
   12f44:	movt	r8, #2
   12f48:	mov	r1, r3
   12f4c:	ldm	r8!, {r0, r4, r5, r6, r7, r9}
   12f50:	stmia	r1!, {r0, r4, r5, r6, r7, r9}
   12f54:	ldm	r8, {r0, r4, r5, r6, r7, r9}
   12f58:	stm	r1, {r0, r4, r5, r6, r7, r9}
   12f5c:	ubfx	r0, r2, #5, #3
   12f60:	and	r2, r2, #31
   12f64:	mov	r4, #1
   12f68:	add	r0, r3, r0, lsl #2
   12f6c:	ldr	r1, [r0, #8]
   12f70:	bic	r4, r4, r1, lsr r2
   12f74:	eor	r1, r1, r4, lsl r2
   12f78:	mov	r2, ip
   12f7c:	str	r1, [r0, #8]
   12f80:	mov	r0, #0
   12f84:	mov	r1, lr
   12f88:	bl	12c88 <__assert_fail@plt+0x1e40>
   12f8c:	sub	sp, fp, #24
   12f90:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12f94:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12f98:	add	fp, sp, #24
   12f9c:	sub	sp, sp, #48	; 0x30
   12fa0:	movw	lr, #20784	; 0x5130
   12fa4:	mov	ip, r0
   12fa8:	mov	r3, sp
   12fac:	movt	lr, #2
   12fb0:	mov	r2, r3
   12fb4:	ldm	lr!, {r0, r4, r5, r6, r7, r8}
   12fb8:	stmia	r2!, {r0, r4, r5, r6, r7, r8}
   12fbc:	ldm	lr, {r0, r4, r5, r6, r7, r8}
   12fc0:	stm	r2, {r0, r4, r5, r6, r7, r8}
   12fc4:	ubfx	r0, r1, #5, #3
   12fc8:	and	r1, r1, #31
   12fcc:	mov	r7, #1
   12fd0:	add	r0, r3, r0, lsl #2
   12fd4:	ldr	r2, [r0, #8]
   12fd8:	bic	r7, r7, r2, lsr r1
   12fdc:	eor	r1, r2, r7, lsl r1
   12fe0:	mvn	r2, #0
   12fe4:	str	r1, [r0, #8]
   12fe8:	mov	r0, #0
   12fec:	mov	r1, ip
   12ff0:	bl	12c88 <__assert_fail@plt+0x1e40>
   12ff4:	sub	sp, fp, #24
   12ff8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12ffc:	push	{r4, r5, r6, r7, fp, lr}
   13000:	add	fp, sp, #16
   13004:	sub	sp, sp, #48	; 0x30
   13008:	movw	lr, #20784	; 0x5130
   1300c:	mov	ip, r0
   13010:	mov	r3, sp
   13014:	movt	lr, #2
   13018:	mov	r2, r3
   1301c:	ldm	lr!, {r0, r1, r4, r5, r6, r7}
   13020:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   13024:	ldm	lr, {r0, r1, r4, r5, r6, r7}
   13028:	stm	r2, {r0, r1, r4, r5, r6, r7}
   1302c:	mov	r1, ip
   13030:	mvn	r2, #0
   13034:	ldr	r0, [sp, #12]
   13038:	orr	r0, r0, #67108864	; 0x4000000
   1303c:	str	r0, [sp, #12]
   13040:	mov	r0, #0
   13044:	bl	12c88 <__assert_fail@plt+0x1e40>
   13048:	sub	sp, fp, #16
   1304c:	pop	{r4, r5, r6, r7, fp, pc}
   13050:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13054:	add	fp, sp, #24
   13058:	sub	sp, sp, #48	; 0x30
   1305c:	movw	r8, #20784	; 0x5130
   13060:	mov	ip, r1
   13064:	mov	lr, r0
   13068:	mov	r3, sp
   1306c:	movt	r8, #2
   13070:	mov	r2, r3
   13074:	ldm	r8!, {r0, r1, r4, r5, r6, r7}
   13078:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   1307c:	ldm	r8, {r0, r1, r4, r5, r6, r7}
   13080:	stm	r2, {r0, r1, r4, r5, r6, r7}
   13084:	mov	r1, lr
   13088:	mov	r2, ip
   1308c:	ldr	r0, [sp, #12]
   13090:	orr	r0, r0, #67108864	; 0x4000000
   13094:	str	r0, [sp, #12]
   13098:	mov	r0, #0
   1309c:	bl	12c88 <__assert_fail@plt+0x1e40>
   130a0:	sub	sp, fp, #24
   130a4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   130a8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   130ac:	add	fp, sp, #24
   130b0:	sub	sp, sp, #96	; 0x60
   130b4:	vmov.i32	q8, #0	; 0x00000000
   130b8:	mov	lr, sp
   130bc:	mov	ip, r2
   130c0:	cmp	r1, #10
   130c4:	add	r3, lr, #16
   130c8:	mov	r2, lr
   130cc:	vst1.64	{d16-d17}, [r3]
   130d0:	mov	r3, #28
   130d4:	vst1.64	{d16-d17}, [r2], r3
   130d8:	vst1.32	{d16-d17}, [r2]
   130dc:	beq	1311c <__assert_fail@plt+0x22d4>
   130e0:	str	r1, [sp, #48]	; 0x30
   130e4:	add	r3, sp, #48	; 0x30
   130e8:	ldm	lr!, {r2, r4, r5, r6, r7}
   130ec:	add	r1, r3, #4
   130f0:	stmia	r1!, {r2, r4, r5, r6, r7}
   130f4:	ldm	lr, {r2, r4, r5, r6, r7, r8}
   130f8:	stm	r1, {r2, r4, r5, r6, r7, r8}
   130fc:	mvn	r2, #0
   13100:	ldr	r1, [sp, #60]	; 0x3c
   13104:	orr	r1, r1, #67108864	; 0x4000000
   13108:	str	r1, [sp, #60]	; 0x3c
   1310c:	mov	r1, ip
   13110:	bl	12c88 <__assert_fail@plt+0x1e40>
   13114:	sub	sp, fp, #24
   13118:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1311c:	bl	10e30 <abort@plt>
   13120:	push	{fp, lr}
   13124:	mov	fp, sp
   13128:	sub	sp, sp, #8
   1312c:	mvn	ip, #0
   13130:	str	ip, [sp]
   13134:	bl	13140 <__assert_fail@plt+0x22f8>
   13138:	mov	sp, fp
   1313c:	pop	{fp, pc}
   13140:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13144:	add	fp, sp, #24
   13148:	sub	sp, sp, #48	; 0x30
   1314c:	movw	ip, #20784	; 0x5130
   13150:	mov	lr, r3
   13154:	mov	r3, sp
   13158:	cmp	r1, #0
   1315c:	movt	ip, #2
   13160:	cmpne	r2, #0
   13164:	ldm	ip!, {r4, r5, r6, r7, r8, r9}
   13168:	stmia	r3!, {r4, r5, r6, r7, r8, r9}
   1316c:	ldm	ip, {r4, r5, r6, r7, r8, r9}
   13170:	stm	r3, {r4, r5, r6, r7, r8, r9}
   13174:	mov	r3, #10
   13178:	str	r3, [sp]
   1317c:	bne	13184 <__assert_fail@plt+0x233c>
   13180:	bl	10e30 <abort@plt>
   13184:	ldr	ip, [fp, #8]
   13188:	str	r2, [sp, #44]	; 0x2c
   1318c:	str	r1, [sp, #40]	; 0x28
   13190:	mov	r3, sp
   13194:	mov	r1, lr
   13198:	mov	r2, ip
   1319c:	bl	12c88 <__assert_fail@plt+0x1e40>
   131a0:	sub	sp, fp, #24
   131a4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   131a8:	push	{fp, lr}
   131ac:	mov	fp, sp
   131b0:	sub	sp, sp, #8
   131b4:	mov	r3, r2
   131b8:	mov	r2, r1
   131bc:	mov	r1, r0
   131c0:	mvn	r0, #0
   131c4:	str	r0, [sp]
   131c8:	mov	r0, #0
   131cc:	bl	13140 <__assert_fail@plt+0x22f8>
   131d0:	mov	sp, fp
   131d4:	pop	{fp, pc}
   131d8:	push	{fp, lr}
   131dc:	mov	fp, sp
   131e0:	sub	sp, sp, #8
   131e4:	mov	ip, r2
   131e8:	mov	r2, r1
   131ec:	mov	r1, r0
   131f0:	str	r3, [sp]
   131f4:	mov	r0, #0
   131f8:	mov	r3, ip
   131fc:	bl	13140 <__assert_fail@plt+0x22f8>
   13200:	mov	sp, fp
   13204:	pop	{fp, pc}
   13208:	movw	r3, #20704	; 0x50e0
   1320c:	movt	r3, #2
   13210:	b	12c88 <__assert_fail@plt+0x1e40>
   13214:	movw	r3, #20704	; 0x50e0
   13218:	mov	r2, r1
   1321c:	mov	r1, r0
   13220:	mov	r0, #0
   13224:	movt	r3, #2
   13228:	b	12c88 <__assert_fail@plt+0x1e40>
   1322c:	movw	r3, #20704	; 0x50e0
   13230:	mvn	r2, #0
   13234:	movt	r3, #2
   13238:	b	12c88 <__assert_fail@plt+0x1e40>
   1323c:	movw	r3, #20704	; 0x50e0
   13240:	mov	r1, r0
   13244:	mov	r0, #0
   13248:	mvn	r2, #0
   1324c:	movt	r3, #2
   13250:	b	12c88 <__assert_fail@plt+0x1e40>
   13254:	push	{r4, r5, fp, lr}
   13258:	add	fp, sp, #8
   1325c:	mov	r5, r0
   13260:	mov	r4, r1
   13264:	mov	r0, #0
   13268:	mov	r2, #5
   1326c:	mov	r1, r5
   13270:	bl	10ca4 <dcgettext@plt>
   13274:	cmp	r0, r5
   13278:	popne	{r4, r5, fp, pc}
   1327c:	bl	13fd0 <__assert_fail@plt+0x3188>
   13280:	ldrb	r1, [r0]
   13284:	and	r1, r1, #223	; 0xdf
   13288:	cmp	r1, #71	; 0x47
   1328c:	beq	132f4 <__assert_fail@plt+0x24ac>
   13290:	cmp	r1, #85	; 0x55
   13294:	bne	1334c <__assert_fail@plt+0x2504>
   13298:	ldrb	r1, [r0, #1]
   1329c:	and	r1, r1, #223	; 0xdf
   132a0:	cmp	r1, #84	; 0x54
   132a4:	bne	1334c <__assert_fail@plt+0x2504>
   132a8:	ldrb	r1, [r0, #2]
   132ac:	and	r1, r1, #223	; 0xdf
   132b0:	cmp	r1, #70	; 0x46
   132b4:	bne	1334c <__assert_fail@plt+0x2504>
   132b8:	ldrb	r1, [r0, #3]
   132bc:	cmp	r1, #45	; 0x2d
   132c0:	bne	1334c <__assert_fail@plt+0x2504>
   132c4:	ldrb	r1, [r0, #4]
   132c8:	cmp	r1, #56	; 0x38
   132cc:	bne	1334c <__assert_fail@plt+0x2504>
   132d0:	ldrb	r0, [r0, #5]
   132d4:	cmp	r0, #0
   132d8:	bne	1334c <__assert_fail@plt+0x2504>
   132dc:	ldrb	r1, [r5]
   132e0:	movw	r2, #18736	; 0x4930
   132e4:	movw	r0, #18740	; 0x4934
   132e8:	movt	r2, #1
   132ec:	movt	r0, #1
   132f0:	b	1337c <__assert_fail@plt+0x2534>
   132f4:	ldrb	r1, [r0, #1]
   132f8:	and	r1, r1, #223	; 0xdf
   132fc:	cmp	r1, #66	; 0x42
   13300:	bne	1334c <__assert_fail@plt+0x2504>
   13304:	ldrb	r1, [r0, #2]
   13308:	cmp	r1, #49	; 0x31
   1330c:	bne	1334c <__assert_fail@plt+0x2504>
   13310:	ldrb	r1, [r0, #3]
   13314:	cmp	r1, #56	; 0x38
   13318:	bne	1334c <__assert_fail@plt+0x2504>
   1331c:	ldrb	r1, [r0, #4]
   13320:	cmp	r1, #48	; 0x30
   13324:	bne	1334c <__assert_fail@plt+0x2504>
   13328:	ldrb	r1, [r0, #5]
   1332c:	cmp	r1, #51	; 0x33
   13330:	bne	1334c <__assert_fail@plt+0x2504>
   13334:	ldrb	r1, [r0, #6]
   13338:	cmp	r1, #48	; 0x30
   1333c:	bne	1334c <__assert_fail@plt+0x2504>
   13340:	ldrb	r0, [r0, #7]
   13344:	cmp	r0, #0
   13348:	beq	13368 <__assert_fail@plt+0x2520>
   1334c:	movw	r1, #18730	; 0x492a
   13350:	movw	r0, #18734	; 0x492e
   13354:	cmp	r4, #9
   13358:	movt	r1, #1
   1335c:	movt	r0, #1
   13360:	moveq	r0, r1
   13364:	pop	{r4, r5, fp, pc}
   13368:	ldrb	r1, [r5]
   1336c:	movw	r2, #18744	; 0x4938
   13370:	movw	r0, #18748	; 0x493c
   13374:	movt	r2, #1
   13378:	movt	r0, #1
   1337c:	cmp	r1, #96	; 0x60
   13380:	moveq	r0, r2
   13384:	pop	{r4, r5, fp, pc}
   13388:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1338c:	add	fp, sp, #24
   13390:	sub	sp, sp, #32
   13394:	ldr	r6, [fp, #12]
   13398:	ldr	r7, [fp, #8]
   1339c:	mov	r4, r2
   133a0:	mov	r8, r0
   133a4:	cmp	r1, #0
   133a8:	beq	133d0 <__assert_fail@plt+0x2588>
   133ac:	movw	r2, #18836	; 0x4994
   133b0:	mov	r5, r1
   133b4:	str	r3, [sp, #4]
   133b8:	str	r4, [sp]
   133bc:	mov	r0, r8
   133c0:	mov	r1, #1
   133c4:	movt	r2, #1
   133c8:	mov	r3, r5
   133cc:	b	133e8 <__assert_fail@plt+0x25a0>
   133d0:	movw	r2, #18848	; 0x49a0
   133d4:	str	r3, [sp]
   133d8:	mov	r0, r8
   133dc:	mov	r1, #1
   133e0:	mov	r3, r4
   133e4:	movt	r2, #1
   133e8:	bl	10dc4 <__fprintf_chk@plt>
   133ec:	movw	r1, #18855	; 0x49a7
   133f0:	mov	r0, #0
   133f4:	mov	r2, #5
   133f8:	movt	r1, #1
   133fc:	bl	10ca4 <dcgettext@plt>
   13400:	movw	r2, #19573	; 0x4c75
   13404:	mov	r3, r0
   13408:	movw	r0, #2022	; 0x7e6
   1340c:	mov	r1, #1
   13410:	movt	r2, #1
   13414:	str	r0, [sp]
   13418:	mov	r0, r8
   1341c:	bl	10dc4 <__fprintf_chk@plt>
   13420:	movw	r4, #17446	; 0x4426
   13424:	mov	r1, r8
   13428:	movt	r4, #1
   1342c:	mov	r0, r4
   13430:	bl	10c50 <fputs_unlocked@plt>
   13434:	movw	r1, #18859	; 0x49ab
   13438:	mov	r0, #0
   1343c:	mov	r2, #5
   13440:	movt	r1, #1
   13444:	bl	10ca4 <dcgettext@plt>
   13448:	movw	r3, #19030	; 0x4a56
   1344c:	mov	r2, r0
   13450:	mov	r0, r8
   13454:	mov	r1, #1
   13458:	movt	r3, #1
   1345c:	bl	10dc4 <__fprintf_chk@plt>
   13460:	mov	r0, r4
   13464:	mov	r1, r8
   13468:	bl	10c50 <fputs_unlocked@plt>
   1346c:	cmp	r6, #9
   13470:	bhi	134d4 <__assert_fail@plt+0x268c>
   13474:	add	r0, pc, #0
   13478:	ldr	pc, [r0, r6, lsl #2]
   1347c:	andeq	r3, r1, ip, lsr #13
   13480:	andeq	r3, r1, r4, lsr #9
   13484:	andeq	r3, r1, r0, ror #9
   13488:	andeq	r3, r1, r8, lsl #10
   1348c:	andeq	r3, r1, r0, lsr r5
   13490:	andeq	r3, r1, r8, asr r5
   13494:	andeq	r3, r1, r0, lsl #11
   13498:			; <UNDEFINED> instruction: 0x000135b8
   1349c:	andeq	r3, r1, r8, asr r6
   134a0:	andeq	r3, r1, r0, lsl #12
   134a4:	movw	r1, #19064	; 0x4a78
   134a8:	mov	r0, #0
   134ac:	mov	r2, #5
   134b0:	movt	r1, #1
   134b4:	bl	10ca4 <dcgettext@plt>
   134b8:	ldr	r3, [r7]
   134bc:	mov	r2, r0
   134c0:	mov	r0, r8
   134c4:	mov	r1, #1
   134c8:	sub	sp, fp, #24
   134cc:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   134d0:	b	10dc4 <__fprintf_chk@plt>
   134d4:	movw	r1, #19383	; 0x4bb7
   134d8:	movt	r1, #1
   134dc:	b	13608 <__assert_fail@plt+0x27c0>
   134e0:	movw	r1, #19080	; 0x4a88
   134e4:	mov	r0, #0
   134e8:	mov	r2, #5
   134ec:	movt	r1, #1
   134f0:	bl	10ca4 <dcgettext@plt>
   134f4:	mov	r2, r0
   134f8:	ldr	r3, [r7]
   134fc:	ldr	r0, [r7, #4]
   13500:	str	r0, [sp]
   13504:	b	135f4 <__assert_fail@plt+0x27ac>
   13508:	movw	r1, #19103	; 0x4a9f
   1350c:	mov	r0, #0
   13510:	mov	r2, #5
   13514:	movt	r1, #1
   13518:	bl	10ca4 <dcgettext@plt>
   1351c:	mov	r2, r0
   13520:	ldr	r3, [r7]
   13524:	ldmib	r7, {r0, r1}
   13528:	stm	sp, {r0, r1}
   1352c:	b	135f4 <__assert_fail@plt+0x27ac>
   13530:	movw	r1, #19131	; 0x4abb
   13534:	mov	r0, #0
   13538:	mov	r2, #5
   1353c:	movt	r1, #1
   13540:	bl	10ca4 <dcgettext@plt>
   13544:	ldr	r3, [r7]
   13548:	mov	r2, r0
   1354c:	ldmib	r7, {r0, r1, r7}
   13550:	stm	sp, {r0, r1, r7}
   13554:	b	135f4 <__assert_fail@plt+0x27ac>
   13558:	movw	r1, #19163	; 0x4adb
   1355c:	mov	r0, #0
   13560:	mov	r2, #5
   13564:	movt	r1, #1
   13568:	bl	10ca4 <dcgettext@plt>
   1356c:	ldr	r3, [r7]
   13570:	mov	r2, r0
   13574:	ldmib	r7, {r0, r1, r6, r7}
   13578:	stm	sp, {r0, r1, r6, r7}
   1357c:	b	135f4 <__assert_fail@plt+0x27ac>
   13580:	movw	r1, #19199	; 0x4aff
   13584:	mov	r0, #0
   13588:	mov	r2, #5
   1358c:	movt	r1, #1
   13590:	bl	10ca4 <dcgettext@plt>
   13594:	mov	r2, r0
   13598:	ldr	r3, [r7]
   1359c:	ldmib	r7, {r0, r1, r6}
   135a0:	ldr	r5, [r7, #16]
   135a4:	ldr	r7, [r7, #20]
   135a8:	stm	sp, {r0, r1, r6}
   135ac:	str	r5, [sp, #12]
   135b0:	str	r7, [sp, #16]
   135b4:	b	135f4 <__assert_fail@plt+0x27ac>
   135b8:	movw	r1, #19239	; 0x4b27
   135bc:	mov	r0, #0
   135c0:	mov	r2, #5
   135c4:	movt	r1, #1
   135c8:	bl	10ca4 <dcgettext@plt>
   135cc:	mov	r2, r0
   135d0:	ldr	r3, [r7]
   135d4:	ldmib	r7, {r0, r1, r6}
   135d8:	ldr	r5, [r7, #16]
   135dc:	ldr	r4, [r7, #20]
   135e0:	ldr	r7, [r7, #24]
   135e4:	stm	sp, {r0, r1, r6}
   135e8:	str	r5, [sp, #12]
   135ec:	str	r4, [sp, #16]
   135f0:	str	r7, [sp, #20]
   135f4:	mov	r0, r8
   135f8:	mov	r1, #1
   135fc:	b	136a8 <__assert_fail@plt+0x2860>
   13600:	movw	r1, #19331	; 0x4b83
   13604:	movt	r1, #1
   13608:	mov	r0, #0
   1360c:	mov	r2, #5
   13610:	bl	10ca4 <dcgettext@plt>
   13614:	mov	ip, r0
   13618:	ldr	r3, [r7]
   1361c:	ldr	r0, [r7, #4]
   13620:	ldr	r1, [r7, #8]
   13624:	ldr	r6, [r7, #12]
   13628:	ldr	r5, [r7, #16]
   1362c:	ldr	r4, [r7, #20]
   13630:	ldr	r2, [r7, #24]
   13634:	ldr	lr, [r7, #28]
   13638:	ldr	r7, [r7, #32]
   1363c:	stm	sp, {r0, r1, r6}
   13640:	str	r5, [sp, #12]
   13644:	str	r4, [sp, #16]
   13648:	str	r2, [sp, #20]
   1364c:	str	lr, [sp, #24]
   13650:	str	r7, [sp, #28]
   13654:	b	1369c <__assert_fail@plt+0x2854>
   13658:	movw	r1, #19283	; 0x4b53
   1365c:	mov	r0, #0
   13660:	mov	r2, #5
   13664:	movt	r1, #1
   13668:	bl	10ca4 <dcgettext@plt>
   1366c:	mov	ip, r0
   13670:	ldr	r3, [r7]
   13674:	ldmib	r7, {r0, r1, r6}
   13678:	ldr	r5, [r7, #16]
   1367c:	ldr	r4, [r7, #20]
   13680:	ldr	r2, [r7, #24]
   13684:	ldr	r7, [r7, #28]
   13688:	stm	sp, {r0, r1, r6}
   1368c:	str	r5, [sp, #12]
   13690:	str	r4, [sp, #16]
   13694:	str	r2, [sp, #20]
   13698:	str	r7, [sp, #24]
   1369c:	mov	r0, r8
   136a0:	mov	r1, #1
   136a4:	mov	r2, ip
   136a8:	bl	10dc4 <__fprintf_chk@plt>
   136ac:	sub	sp, fp, #24
   136b0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   136b4:	push	{r4, sl, fp, lr}
   136b8:	add	fp, sp, #8
   136bc:	sub	sp, sp, #8
   136c0:	ldr	ip, [fp, #8]
   136c4:	mov	lr, #0
   136c8:	ldr	r4, [ip, lr, lsl #2]
   136cc:	add	lr, lr, #1
   136d0:	cmp	r4, #0
   136d4:	bne	136c8 <__assert_fail@plt+0x2880>
   136d8:	sub	r4, lr, #1
   136dc:	str	ip, [sp]
   136e0:	str	r4, [sp, #4]
   136e4:	bl	13388 <__assert_fail@plt+0x2540>
   136e8:	sub	sp, fp, #8
   136ec:	pop	{r4, sl, fp, pc}
   136f0:	push	{r4, r5, fp, lr}
   136f4:	add	fp, sp, #8
   136f8:	sub	sp, sp, #48	; 0x30
   136fc:	ldr	r4, [fp, #8]
   13700:	mov	ip, #0
   13704:	add	lr, sp, #8
   13708:	ldr	r5, [r4]
   1370c:	cmp	r5, #0
   13710:	str	r5, [lr, ip, lsl #2]
   13714:	beq	1372c <__assert_fail@plt+0x28e4>
   13718:	add	ip, ip, #1
   1371c:	add	r4, r4, #4
   13720:	cmp	ip, #10
   13724:	bne	13708 <__assert_fail@plt+0x28c0>
   13728:	mov	ip, #10
   1372c:	str	lr, [sp]
   13730:	str	ip, [sp, #4]
   13734:	bl	13388 <__assert_fail@plt+0x2540>
   13738:	sub	sp, fp, #8
   1373c:	pop	{r4, r5, fp, pc}
   13740:	push	{fp, lr}
   13744:	mov	fp, sp
   13748:	sub	sp, sp, #8
   1374c:	add	ip, fp, #8
   13750:	str	ip, [sp, #4]
   13754:	str	ip, [sp]
   13758:	bl	136f0 <__assert_fail@plt+0x28a8>
   1375c:	mov	sp, fp
   13760:	pop	{fp, pc}
   13764:	push	{fp, lr}
   13768:	mov	fp, sp
   1376c:	movw	r0, #20764	; 0x511c
   13770:	movt	r0, #2
   13774:	ldr	r1, [r0]
   13778:	movw	r0, #17446	; 0x4426
   1377c:	movt	r0, #1
   13780:	bl	10c50 <fputs_unlocked@plt>
   13784:	movw	r1, #19443	; 0x4bf3
   13788:	mov	r0, #0
   1378c:	mov	r2, #5
   13790:	movt	r1, #1
   13794:	bl	10ca4 <dcgettext@plt>
   13798:	movw	r2, #19463	; 0x4c07
   1379c:	mov	r1, r0
   137a0:	mov	r0, #1
   137a4:	movt	r2, #1
   137a8:	bl	10dac <__printf_chk@plt>
   137ac:	movw	r1, #19485	; 0x4c1d
   137b0:	mov	r0, #0
   137b4:	mov	r2, #5
   137b8:	movt	r1, #1
   137bc:	bl	10ca4 <dcgettext@plt>
   137c0:	movw	r2, #18148	; 0x46e4
   137c4:	movw	r3, #18301	; 0x477d
   137c8:	mov	r1, r0
   137cc:	mov	r0, #1
   137d0:	movt	r2, #1
   137d4:	movt	r3, #1
   137d8:	bl	10dac <__printf_chk@plt>
   137dc:	movw	r1, #19505	; 0x4c31
   137e0:	mov	r0, #0
   137e4:	mov	r2, #5
   137e8:	movt	r1, #1
   137ec:	bl	10ca4 <dcgettext@plt>
   137f0:	movw	r2, #19544	; 0x4c58
   137f4:	mov	r1, r0
   137f8:	mov	r0, #1
   137fc:	movt	r2, #1
   13800:	pop	{fp, lr}
   13804:	b	10dac <__printf_chk@plt>
   13808:	b	1380c <__assert_fail@plt+0x29c4>
   1380c:	push	{r4, r5, r6, sl, fp, lr}
   13810:	add	fp, sp, #16
   13814:	mov	r4, r2
   13818:	mov	r5, r1
   1381c:	mov	r6, r0
   13820:	bl	1406c <__assert_fail@plt+0x3224>
   13824:	cmp	r0, #0
   13828:	popne	{r4, r5, r6, sl, fp, pc}
   1382c:	cmp	r6, #0
   13830:	beq	13844 <__assert_fail@plt+0x29fc>
   13834:	cmp	r5, #0
   13838:	cmpne	r4, #0
   1383c:	bne	13844 <__assert_fail@plt+0x29fc>
   13840:	pop	{r4, r5, r6, sl, fp, pc}
   13844:	bl	13c74 <__assert_fail@plt+0x2e2c>
   13848:	push	{fp, lr}
   1384c:	mov	fp, sp
   13850:	bl	13d0c <__assert_fail@plt+0x2ec4>
   13854:	cmp	r0, #0
   13858:	popne	{fp, pc}
   1385c:	bl	13c74 <__assert_fail@plt+0x2e2c>
   13860:	push	{fp, lr}
   13864:	mov	fp, sp
   13868:	bl	13d0c <__assert_fail@plt+0x2ec4>
   1386c:	cmp	r0, #0
   13870:	popne	{fp, pc}
   13874:	bl	13c74 <__assert_fail@plt+0x2e2c>
   13878:	push	{fp, lr}
   1387c:	mov	fp, sp
   13880:	bl	13d0c <__assert_fail@plt+0x2ec4>
   13884:	cmp	r0, #0
   13888:	popne	{fp, pc}
   1388c:	bl	13c74 <__assert_fail@plt+0x2e2c>
   13890:	push	{r4, r5, fp, lr}
   13894:	add	fp, sp, #8
   13898:	mov	r4, r1
   1389c:	mov	r5, r0
   138a0:	bl	13d3c <__assert_fail@plt+0x2ef4>
   138a4:	cmp	r0, #0
   138a8:	popne	{r4, r5, fp, pc}
   138ac:	cmp	r5, #0
   138b0:	beq	138c0 <__assert_fail@plt+0x2a78>
   138b4:	cmp	r4, #0
   138b8:	bne	138c0 <__assert_fail@plt+0x2a78>
   138bc:	pop	{r4, r5, fp, pc}
   138c0:	bl	13c74 <__assert_fail@plt+0x2e2c>
   138c4:	push	{fp, lr}
   138c8:	mov	fp, sp
   138cc:	cmp	r1, #0
   138d0:	orreq	r1, r1, #1
   138d4:	bl	13d3c <__assert_fail@plt+0x2ef4>
   138d8:	cmp	r0, #0
   138dc:	popne	{fp, pc}
   138e0:	bl	13c74 <__assert_fail@plt+0x2e2c>
   138e4:	push	{fp, lr}
   138e8:	mov	fp, sp
   138ec:	clz	r3, r2
   138f0:	lsr	ip, r3, #5
   138f4:	clz	r3, r1
   138f8:	lsr	r3, r3, #5
   138fc:	orrs	r3, r3, ip
   13900:	movwne	r1, #1
   13904:	movwne	r2, #1
   13908:	bl	1406c <__assert_fail@plt+0x3224>
   1390c:	cmp	r0, #0
   13910:	popne	{fp, pc}
   13914:	bl	13c74 <__assert_fail@plt+0x2e2c>
   13918:	push	{fp, lr}
   1391c:	mov	fp, sp
   13920:	mov	r2, r1
   13924:	mov	r1, r0
   13928:	mov	r0, #0
   1392c:	bl	1406c <__assert_fail@plt+0x3224>
   13930:	cmp	r0, #0
   13934:	popne	{fp, pc}
   13938:	bl	13c74 <__assert_fail@plt+0x2e2c>
   1393c:	mov	r2, r1
   13940:	mov	r1, r0
   13944:	mov	r0, #0
   13948:	b	138e4 <__assert_fail@plt+0x2a9c>
   1394c:	mov	r2, #1
   13950:	b	13954 <__assert_fail@plt+0x2b0c>
   13954:	push	{r4, r5, fp, lr}
   13958:	add	fp, sp, #8
   1395c:	ldr	r5, [r1]
   13960:	mov	r4, r1
   13964:	cmp	r0, #0
   13968:	beq	13980 <__assert_fail@plt+0x2b38>
   1396c:	mov	r1, #1
   13970:	add	r1, r1, r5, lsr #1
   13974:	adds	r5, r5, r1
   13978:	bcc	13998 <__assert_fail@plt+0x2b50>
   1397c:	bl	13c74 <__assert_fail@plt+0x2e2c>
   13980:	cmp	r5, #0
   13984:	bne	13998 <__assert_fail@plt+0x2b50>
   13988:	mov	r1, #64	; 0x40
   1398c:	cmp	r2, #64	; 0x40
   13990:	udiv	r5, r1, r2
   13994:	addhi	r5, r5, #1
   13998:	mov	r1, r5
   1399c:	bl	1380c <__assert_fail@plt+0x29c4>
   139a0:	str	r5, [r4]
   139a4:	pop	{r4, r5, fp, pc}
   139a8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   139ac:	add	fp, sp, #24
   139b0:	ldr	r6, [r1]
   139b4:	mov	r8, r1
   139b8:	ldr	r4, [fp, #8]
   139bc:	add	r1, r6, r6, asr #1
   139c0:	cmp	r1, r6
   139c4:	mvnvs	r1, #-2147483648	; 0x80000000
   139c8:	cmp	r1, r3
   139cc:	mov	r5, r1
   139d0:	movgt	r5, r3
   139d4:	cmn	r3, #1
   139d8:	movle	r5, r1
   139dc:	cmn	r4, #1
   139e0:	ble	13a00 <__assert_fail@plt+0x2bb8>
   139e4:	cmp	r4, #0
   139e8:	beq	13a54 <__assert_fail@plt+0x2c0c>
   139ec:	cmn	r5, #1
   139f0:	ble	13a28 <__assert_fail@plt+0x2be0>
   139f4:	mvn	r7, #-2147483648	; 0x80000000
   139f8:	udiv	r1, r7, r4
   139fc:	b	13a1c <__assert_fail@plt+0x2bd4>
   13a00:	cmn	r5, #1
   13a04:	ble	13a44 <__assert_fail@plt+0x2bfc>
   13a08:	cmn	r4, #1
   13a0c:	beq	13a54 <__assert_fail@plt+0x2c0c>
   13a10:	mov	r1, #-2147483648	; 0x80000000
   13a14:	mvn	r7, #-2147483648	; 0x80000000
   13a18:	sdiv	r1, r1, r4
   13a1c:	cmp	r1, r5
   13a20:	bge	13a54 <__assert_fail@plt+0x2c0c>
   13a24:	b	13a64 <__assert_fail@plt+0x2c1c>
   13a28:	beq	13a54 <__assert_fail@plt+0x2c0c>
   13a2c:	mov	r1, #-2147483648	; 0x80000000
   13a30:	mvn	r7, #-2147483648	; 0x80000000
   13a34:	sdiv	r1, r1, r5
   13a38:	cmp	r1, r4
   13a3c:	bge	13a54 <__assert_fail@plt+0x2c0c>
   13a40:	b	13a64 <__assert_fail@plt+0x2c1c>
   13a44:	mvn	r7, #-2147483648	; 0x80000000
   13a48:	sdiv	r1, r7, r4
   13a4c:	cmp	r5, r1
   13a50:	blt	13a64 <__assert_fail@plt+0x2c1c>
   13a54:	mul	r1, r5, r4
   13a58:	mov	r7, #64	; 0x40
   13a5c:	cmp	r1, #63	; 0x3f
   13a60:	bgt	13a6c <__assert_fail@plt+0x2c24>
   13a64:	sdiv	r5, r7, r4
   13a68:	mul	r1, r5, r4
   13a6c:	cmp	r0, #0
   13a70:	moveq	r7, #0
   13a74:	streq	r7, [r8]
   13a78:	sub	r7, r5, r6
   13a7c:	cmp	r7, r2
   13a80:	bge	13b24 <__assert_fail@plt+0x2cdc>
   13a84:	add	r5, r6, r2
   13a88:	mov	r2, #0
   13a8c:	mov	r1, #0
   13a90:	cmp	r5, r3
   13a94:	movwgt	r2, #1
   13a98:	cmn	r3, #1
   13a9c:	movwgt	r1, #1
   13aa0:	cmp	r5, r6
   13aa4:	bvs	13b0c <__assert_fail@plt+0x2cc4>
   13aa8:	ands	r1, r1, r2
   13aac:	bne	13b0c <__assert_fail@plt+0x2cc4>
   13ab0:	cmn	r4, #1
   13ab4:	ble	13ad4 <__assert_fail@plt+0x2c8c>
   13ab8:	cmp	r4, #0
   13abc:	beq	13b20 <__assert_fail@plt+0x2cd8>
   13ac0:	cmn	r5, #1
   13ac4:	ble	13af8 <__assert_fail@plt+0x2cb0>
   13ac8:	mvn	r1, #-2147483648	; 0x80000000
   13acc:	udiv	r1, r1, r4
   13ad0:	b	13aec <__assert_fail@plt+0x2ca4>
   13ad4:	cmn	r5, #1
   13ad8:	ble	13b10 <__assert_fail@plt+0x2cc8>
   13adc:	cmn	r4, #1
   13ae0:	beq	13b20 <__assert_fail@plt+0x2cd8>
   13ae4:	mov	r1, #-2147483648	; 0x80000000
   13ae8:	sdiv	r1, r1, r4
   13aec:	cmp	r1, r5
   13af0:	bge	13b20 <__assert_fail@plt+0x2cd8>
   13af4:	b	13b0c <__assert_fail@plt+0x2cc4>
   13af8:	beq	13b20 <__assert_fail@plt+0x2cd8>
   13afc:	mov	r1, #-2147483648	; 0x80000000
   13b00:	sdiv	r1, r1, r5
   13b04:	cmp	r1, r4
   13b08:	bge	13b20 <__assert_fail@plt+0x2cd8>
   13b0c:	bl	13c74 <__assert_fail@plt+0x2e2c>
   13b10:	mvn	r1, #-2147483648	; 0x80000000
   13b14:	sdiv	r1, r1, r4
   13b18:	cmp	r5, r1
   13b1c:	blt	13b0c <__assert_fail@plt+0x2cc4>
   13b20:	mul	r1, r5, r4
   13b24:	bl	13890 <__assert_fail@plt+0x2a48>
   13b28:	str	r5, [r8]
   13b2c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13b30:	push	{fp, lr}
   13b34:	mov	fp, sp
   13b38:	mov	r1, #1
   13b3c:	bl	13cb8 <__assert_fail@plt+0x2e70>
   13b40:	cmp	r0, #0
   13b44:	popne	{fp, pc}
   13b48:	bl	13c74 <__assert_fail@plt+0x2e2c>
   13b4c:	push	{fp, lr}
   13b50:	mov	fp, sp
   13b54:	bl	13cb8 <__assert_fail@plt+0x2e70>
   13b58:	cmp	r0, #0
   13b5c:	popne	{fp, pc}
   13b60:	bl	13c74 <__assert_fail@plt+0x2e2c>
   13b64:	push	{fp, lr}
   13b68:	mov	fp, sp
   13b6c:	mov	r1, #1
   13b70:	bl	13cb8 <__assert_fail@plt+0x2e70>
   13b74:	cmp	r0, #0
   13b78:	popne	{fp, pc}
   13b7c:	bl	13c74 <__assert_fail@plt+0x2e2c>
   13b80:	push	{fp, lr}
   13b84:	mov	fp, sp
   13b88:	bl	13cb8 <__assert_fail@plt+0x2e70>
   13b8c:	cmp	r0, #0
   13b90:	popne	{fp, pc}
   13b94:	bl	13c74 <__assert_fail@plt+0x2e2c>
   13b98:	push	{r4, r5, fp, lr}
   13b9c:	add	fp, sp, #8
   13ba0:	mov	r5, r0
   13ba4:	mov	r0, r1
   13ba8:	mov	r4, r1
   13bac:	bl	13d0c <__assert_fail@plt+0x2ec4>
   13bb0:	cmp	r0, #0
   13bb4:	beq	13bc8 <__assert_fail@plt+0x2d80>
   13bb8:	mov	r1, r5
   13bbc:	mov	r2, r4
   13bc0:	pop	{r4, r5, fp, lr}
   13bc4:	b	10c8c <memcpy@plt>
   13bc8:	bl	13c74 <__assert_fail@plt+0x2e2c>
   13bcc:	push	{r4, r5, fp, lr}
   13bd0:	add	fp, sp, #8
   13bd4:	mov	r5, r0
   13bd8:	mov	r0, r1
   13bdc:	mov	r4, r1
   13be0:	bl	13d0c <__assert_fail@plt+0x2ec4>
   13be4:	cmp	r0, #0
   13be8:	beq	13bfc <__assert_fail@plt+0x2db4>
   13bec:	mov	r1, r5
   13bf0:	mov	r2, r4
   13bf4:	pop	{r4, r5, fp, lr}
   13bf8:	b	10c8c <memcpy@plt>
   13bfc:	bl	13c74 <__assert_fail@plt+0x2e2c>
   13c00:	push	{r4, r5, fp, lr}
   13c04:	add	fp, sp, #8
   13c08:	mov	r5, r0
   13c0c:	add	r0, r1, #1
   13c10:	mov	r4, r1
   13c14:	bl	13d0c <__assert_fail@plt+0x2ec4>
   13c18:	cmp	r0, #0
   13c1c:	beq	13c38 <__assert_fail@plt+0x2df0>
   13c20:	mov	r1, #0
   13c24:	mov	r2, r4
   13c28:	strb	r1, [r0, r4]
   13c2c:	mov	r1, r5
   13c30:	pop	{r4, r5, fp, lr}
   13c34:	b	10c8c <memcpy@plt>
   13c38:	bl	13c74 <__assert_fail@plt+0x2e2c>
   13c3c:	push	{r4, r5, fp, lr}
   13c40:	add	fp, sp, #8
   13c44:	mov	r4, r0
   13c48:	bl	10d7c <strlen@plt>
   13c4c:	add	r5, r0, #1
   13c50:	mov	r0, r5
   13c54:	bl	13d0c <__assert_fail@plt+0x2ec4>
   13c58:	cmp	r0, #0
   13c5c:	beq	13c70 <__assert_fail@plt+0x2e28>
   13c60:	mov	r1, r4
   13c64:	mov	r2, r5
   13c68:	pop	{r4, r5, fp, lr}
   13c6c:	b	10c8c <memcpy@plt>
   13c70:	bl	13c74 <__assert_fail@plt+0x2e2c>
   13c74:	push	{fp, lr}
   13c78:	mov	fp, sp
   13c7c:	movw	r0, #20684	; 0x50cc
   13c80:	movw	r1, #19620	; 0x4ca4
   13c84:	mov	r2, #5
   13c88:	movt	r0, #2
   13c8c:	movt	r1, #1
   13c90:	ldr	r4, [r0]
   13c94:	mov	r0, #0
   13c98:	bl	10ca4 <dcgettext@plt>
   13c9c:	movw	r2, #18583	; 0x4897
   13ca0:	mov	r3, r0
   13ca4:	mov	r0, r4
   13ca8:	mov	r1, #0
   13cac:	movt	r2, #1
   13cb0:	bl	10d10 <error@plt>
   13cb4:	bl	10e30 <abort@plt>
   13cb8:	clz	r2, r1
   13cbc:	clz	r3, r0
   13cc0:	lsr	r2, r2, #5
   13cc4:	lsr	r3, r3, #5
   13cc8:	orrs	r2, r3, r2
   13ccc:	movwne	r1, #1
   13cd0:	movwne	r0, #1
   13cd4:	cmp	r1, #0
   13cd8:	beq	13d08 <__assert_fail@plt+0x2ec0>
   13cdc:	mvn	r2, #-2147483648	; 0x80000000
   13ce0:	udiv	r2, r2, r1
   13ce4:	cmp	r2, r0
   13ce8:	bcs	13d08 <__assert_fail@plt+0x2ec0>
   13cec:	push	{fp, lr}
   13cf0:	mov	fp, sp
   13cf4:	bl	10d88 <__errno_location@plt>
   13cf8:	mov	r1, #12
   13cfc:	str	r1, [r0]
   13d00:	mov	r0, #0
   13d04:	pop	{fp, pc}
   13d08:	b	10c44 <calloc@plt>
   13d0c:	cmp	r0, #0
   13d10:	movweq	r0, #1
   13d14:	cmn	r0, #1
   13d18:	ble	13d20 <__assert_fail@plt+0x2ed8>
   13d1c:	b	10d28 <malloc@plt>
   13d20:	push	{fp, lr}
   13d24:	mov	fp, sp
   13d28:	bl	10d88 <__errno_location@plt>
   13d2c:	mov	r1, #12
   13d30:	str	r1, [r0]
   13d34:	mov	r0, #0
   13d38:	pop	{fp, pc}
   13d3c:	push	{fp, lr}
   13d40:	mov	fp, sp
   13d44:	cmp	r0, #0
   13d48:	beq	13d64 <__assert_fail@plt+0x2f1c>
   13d4c:	cmp	r1, #0
   13d50:	beq	13d70 <__assert_fail@plt+0x2f28>
   13d54:	cmn	r1, #1
   13d58:	ble	13d78 <__assert_fail@plt+0x2f30>
   13d5c:	pop	{fp, lr}
   13d60:	b	10cb0 <realloc@plt>
   13d64:	mov	r0, r1
   13d68:	pop	{fp, lr}
   13d6c:	b	13d0c <__assert_fail@plt+0x2ec4>
   13d70:	bl	13f04 <__assert_fail@plt+0x30bc>
   13d74:	b	13d84 <__assert_fail@plt+0x2f3c>
   13d78:	bl	10d88 <__errno_location@plt>
   13d7c:	mov	r1, #12
   13d80:	str	r1, [r0]
   13d84:	mov	r0, #0
   13d88:	pop	{fp, pc}
   13d8c:	push	{r4, r5, r6, sl, fp, lr}
   13d90:	add	fp, sp, #16
   13d94:	mov	r4, r0
   13d98:	bl	10cec <__fpending@plt>
   13d9c:	mov	r5, r0
   13da0:	mov	r0, r4
   13da4:	bl	10cf8 <ferror_unlocked@plt>
   13da8:	mov	r6, r0
   13dac:	mov	r0, r4
   13db0:	bl	13e0c <__assert_fail@plt+0x2fc4>
   13db4:	cmp	r6, #0
   13db8:	beq	13dd8 <__assert_fail@plt+0x2f90>
   13dbc:	mvn	r4, #0
   13dc0:	cmp	r0, #0
   13dc4:	bne	13e04 <__assert_fail@plt+0x2fbc>
   13dc8:	bl	10d88 <__errno_location@plt>
   13dcc:	mov	r1, #0
   13dd0:	str	r1, [r0]
   13dd4:	b	13e04 <__assert_fail@plt+0x2fbc>
   13dd8:	cmp	r0, #0
   13ddc:	mov	r4, r0
   13de0:	mvnne	r4, #0
   13de4:	cmp	r5, #0
   13de8:	bne	13e04 <__assert_fail@plt+0x2fbc>
   13dec:	cmp	r0, #0
   13df0:	beq	13e04 <__assert_fail@plt+0x2fbc>
   13df4:	bl	10d88 <__errno_location@plt>
   13df8:	ldr	r0, [r0]
   13dfc:	subs	r4, r0, #9
   13e00:	mvnne	r4, #0
   13e04:	mov	r0, r4
   13e08:	pop	{r4, r5, r6, sl, fp, pc}
   13e0c:	push	{r4, r5, r6, sl, fp, lr}
   13e10:	add	fp, sp, #16
   13e14:	sub	sp, sp, #8
   13e18:	mov	r4, r0
   13e1c:	bl	10db8 <fileno@plt>
   13e20:	cmn	r0, #1
   13e24:	ble	13e98 <__assert_fail@plt+0x3050>
   13e28:	mov	r0, r4
   13e2c:	bl	10d40 <__freading@plt>
   13e30:	cmp	r0, #0
   13e34:	beq	13e60 <__assert_fail@plt+0x3018>
   13e38:	mov	r0, r4
   13e3c:	bl	10db8 <fileno@plt>
   13e40:	mov	r1, #1
   13e44:	mov	r2, #0
   13e48:	mov	r3, #0
   13e4c:	str	r1, [sp]
   13e50:	bl	10cd4 <lseek64@plt>
   13e54:	and	r0, r0, r1
   13e58:	cmn	r0, #1
   13e5c:	beq	13e98 <__assert_fail@plt+0x3050>
   13e60:	mov	r0, r4
   13e64:	bl	13ea8 <__assert_fail@plt+0x3060>
   13e68:	cmp	r0, #0
   13e6c:	beq	13e98 <__assert_fail@plt+0x3050>
   13e70:	bl	10d88 <__errno_location@plt>
   13e74:	ldr	r6, [r0]
   13e78:	mov	r5, r0
   13e7c:	mov	r0, r4
   13e80:	bl	10dd0 <fclose@plt>
   13e84:	cmp	r6, #0
   13e88:	strne	r6, [r5]
   13e8c:	mvnne	r0, #0
   13e90:	sub	sp, fp, #16
   13e94:	pop	{r4, r5, r6, sl, fp, pc}
   13e98:	mov	r0, r4
   13e9c:	sub	sp, fp, #16
   13ea0:	pop	{r4, r5, r6, sl, fp, lr}
   13ea4:	b	10dd0 <fclose@plt>
   13ea8:	push	{r4, sl, fp, lr}
   13eac:	add	fp, sp, #8
   13eb0:	sub	sp, sp, #8
   13eb4:	mov	r4, r0
   13eb8:	cmp	r0, #0
   13ebc:	beq	13ef4 <__assert_fail@plt+0x30ac>
   13ec0:	mov	r0, r4
   13ec4:	bl	10d40 <__freading@plt>
   13ec8:	cmp	r0, #0
   13ecc:	beq	13ef4 <__assert_fail@plt+0x30ac>
   13ed0:	ldrb	r0, [r4, #1]
   13ed4:	tst	r0, #1
   13ed8:	beq	13ef4 <__assert_fail@plt+0x30ac>
   13edc:	mov	r0, #1
   13ee0:	mov	r2, #0
   13ee4:	mov	r3, #0
   13ee8:	str	r0, [sp]
   13eec:	mov	r0, r4
   13ef0:	bl	13f2c <__assert_fail@plt+0x30e4>
   13ef4:	mov	r0, r4
   13ef8:	sub	sp, fp, #8
   13efc:	pop	{r4, sl, fp, lr}
   13f00:	b	10c68 <fflush@plt>
   13f04:	push	{r4, r5, r6, sl, fp, lr}
   13f08:	add	fp, sp, #16
   13f0c:	mov	r4, r0
   13f10:	bl	10d88 <__errno_location@plt>
   13f14:	ldr	r6, [r0]
   13f18:	mov	r5, r0
   13f1c:	mov	r0, r4
   13f20:	bl	10c74 <free@plt>
   13f24:	str	r6, [r5]
   13f28:	pop	{r4, r5, r6, sl, fp, pc}
   13f2c:	push	{r4, r5, r6, r7, fp, lr}
   13f30:	add	fp, sp, #16
   13f34:	sub	sp, sp, #8
   13f38:	mov	r4, r0
   13f3c:	ldr	r0, [r0, #4]
   13f40:	mov	r5, r3
   13f44:	mov	r6, r2
   13f48:	ldr	r1, [r4, #8]
   13f4c:	cmp	r1, r0
   13f50:	bne	13f6c <__assert_fail@plt+0x3124>
   13f54:	ldrd	r0, [r4, #16]
   13f58:	cmp	r1, r0
   13f5c:	bne	13f6c <__assert_fail@plt+0x3124>
   13f60:	ldr	r0, [r4, #36]	; 0x24
   13f64:	cmp	r0, #0
   13f68:	beq	13f84 <__assert_fail@plt+0x313c>
   13f6c:	mov	r0, r4
   13f70:	mov	r2, r6
   13f74:	mov	r3, r5
   13f78:	sub	sp, fp, #16
   13f7c:	pop	{r4, r5, r6, r7, fp, lr}
   13f80:	b	10ddc <fseeko64@plt>
   13f84:	ldr	r7, [fp, #8]
   13f88:	mov	r0, r4
   13f8c:	bl	10db8 <fileno@plt>
   13f90:	mov	r2, r6
   13f94:	mov	r3, r5
   13f98:	str	r7, [sp]
   13f9c:	bl	10cd4 <lseek64@plt>
   13fa0:	and	r2, r0, r1
   13fa4:	cmn	r2, #1
   13fa8:	beq	13fc4 <__assert_fail@plt+0x317c>
   13fac:	strd	r0, [r4, #80]	; 0x50
   13fb0:	ldr	r0, [r4]
   13fb4:	bic	r0, r0, #16
   13fb8:	str	r0, [r4]
   13fbc:	mov	r0, #0
   13fc0:	b	13fc8 <__assert_fail@plt+0x3180>
   13fc4:	mvn	r0, #0
   13fc8:	sub	sp, fp, #16
   13fcc:	pop	{r4, r5, r6, r7, fp, pc}
   13fd0:	push	{fp, lr}
   13fd4:	mov	fp, sp
   13fd8:	mov	r0, #14
   13fdc:	bl	10e00 <nl_langinfo@plt>
   13fe0:	movw	r1, #17447	; 0x4427
   13fe4:	cmp	r0, #0
   13fe8:	movt	r1, #1
   13fec:	movne	r1, r0
   13ff0:	movw	r0, #19637	; 0x4cb5
   13ff4:	ldrb	r2, [r1]
   13ff8:	movt	r0, #1
   13ffc:	cmp	r2, #0
   14000:	movne	r0, r1
   14004:	pop	{fp, pc}
   14008:	push	{r4, r5, r6, r7, fp, lr}
   1400c:	add	fp, sp, #16
   14010:	sub	sp, sp, #8
   14014:	cmp	r0, #0
   14018:	add	r5, sp, #4
   1401c:	mov	r7, r2
   14020:	mov	r4, r1
   14024:	movne	r5, r0
   14028:	mov	r0, r5
   1402c:	bl	10d04 <mbrtowc@plt>
   14030:	mov	r6, r0
   14034:	cmp	r7, #0
   14038:	beq	14060 <__assert_fail@plt+0x3218>
   1403c:	cmn	r6, #2
   14040:	bcc	14060 <__assert_fail@plt+0x3218>
   14044:	mov	r0, #0
   14048:	bl	140a8 <__assert_fail@plt+0x3260>
   1404c:	cmp	r0, #0
   14050:	bne	14060 <__assert_fail@plt+0x3218>
   14054:	ldrb	r0, [r4]
   14058:	mov	r6, #1
   1405c:	str	r0, [r5]
   14060:	mov	r0, r6
   14064:	sub	sp, fp, #16
   14068:	pop	{r4, r5, r6, r7, fp, pc}
   1406c:	cmp	r2, #0
   14070:	beq	140a0 <__assert_fail@plt+0x3258>
   14074:	mvn	r3, #0
   14078:	udiv	r3, r3, r2
   1407c:	cmp	r3, r1
   14080:	bcs	140a0 <__assert_fail@plt+0x3258>
   14084:	push	{fp, lr}
   14088:	mov	fp, sp
   1408c:	bl	10d88 <__errno_location@plt>
   14090:	mov	r1, #12
   14094:	str	r1, [r0]
   14098:	mov	r0, #0
   1409c:	pop	{fp, pc}
   140a0:	mul	r1, r2, r1
   140a4:	b	13d3c <__assert_fail@plt+0x2ef4>
   140a8:	push	{r4, sl, fp, lr}
   140ac:	add	fp, sp, #8
   140b0:	sub	sp, sp, #264	; 0x108
   140b4:	add	r1, sp, #7
   140b8:	movw	r2, #257	; 0x101
   140bc:	bl	14114 <__assert_fail@plt+0x32cc>
   140c0:	mov	r4, #0
   140c4:	cmp	r0, #0
   140c8:	bne	14108 <__assert_fail@plt+0x32c0>
   140cc:	movw	r1, #19643	; 0x4cbb
   140d0:	add	r0, sp, #7
   140d4:	mov	r2, #2
   140d8:	movt	r1, #1
   140dc:	bl	10d70 <bcmp@plt>
   140e0:	cmp	r0, #0
   140e4:	beq	14108 <__assert_fail@plt+0x32c0>
   140e8:	movw	r1, #19645	; 0x4cbd
   140ec:	add	r0, sp, #7
   140f0:	mov	r2, #6
   140f4:	movt	r1, #1
   140f8:	bl	10d70 <bcmp@plt>
   140fc:	cmp	r0, #0
   14100:	mov	r4, r0
   14104:	movwne	r4, #1
   14108:	mov	r0, r4
   1410c:	sub	sp, fp, #8
   14110:	pop	{r4, sl, fp, pc}
   14114:	push	{r4, r5, r6, r7, fp, lr}
   14118:	add	fp, sp, #16
   1411c:	mov	r4, r1
   14120:	mov	r1, #0
   14124:	mov	r6, r2
   14128:	bl	10de8 <setlocale@plt>
   1412c:	cmp	r0, #0
   14130:	beq	1415c <__assert_fail@plt+0x3314>
   14134:	mov	r7, r0
   14138:	bl	10d7c <strlen@plt>
   1413c:	cmp	r0, r6
   14140:	bcs	14170 <__assert_fail@plt+0x3328>
   14144:	add	r2, r0, #1
   14148:	mov	r0, r4
   1414c:	mov	r1, r7
   14150:	bl	10c8c <memcpy@plt>
   14154:	mov	r5, #0
   14158:	b	14198 <__assert_fail@plt+0x3350>
   1415c:	cmp	r6, #0
   14160:	mov	r5, #22
   14164:	movne	r0, #0
   14168:	strbne	r0, [r4]
   1416c:	b	14198 <__assert_fail@plt+0x3350>
   14170:	mov	r5, #34	; 0x22
   14174:	cmp	r6, #0
   14178:	beq	14198 <__assert_fail@plt+0x3350>
   1417c:	sub	r6, r6, #1
   14180:	mov	r0, r4
   14184:	mov	r1, r7
   14188:	mov	r2, r6
   1418c:	bl	10c8c <memcpy@plt>
   14190:	mov	r0, #0
   14194:	strb	r0, [r4, r6]
   14198:	mov	r0, r5
   1419c:	pop	{r4, r5, r6, r7, fp, pc}
   141a0:	mov	r1, #0
   141a4:	b	10de8 <setlocale@plt>
   141a8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   141ac:	mov	r7, r0
   141b0:	ldr	r6, [pc, #72]	; 14200 <__assert_fail@plt+0x33b8>
   141b4:	ldr	r5, [pc, #72]	; 14204 <__assert_fail@plt+0x33bc>
   141b8:	add	r6, pc, r6
   141bc:	add	r5, pc, r5
   141c0:	sub	r6, r6, r5
   141c4:	mov	r8, r1
   141c8:	mov	r9, r2
   141cc:	bl	10c24 <calloc@plt-0x20>
   141d0:	asrs	r6, r6, #2
   141d4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   141d8:	mov	r4, #0
   141dc:	add	r4, r4, #1
   141e0:	ldr	r3, [r5], #4
   141e4:	mov	r2, r9
   141e8:	mov	r1, r8
   141ec:	mov	r0, r7
   141f0:	blx	r3
   141f4:	cmp	r6, r4
   141f8:	bne	141dc <__assert_fail@plt+0x3394>
   141fc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14200:	andeq	r0, r1, ip, asr #26
   14204:	andeq	r0, r1, r4, asr #26
   14208:	bx	lr
   1420c:	ldr	r3, [pc, #12]	; 14220 <__assert_fail@plt+0x33d8>
   14210:	mov	r1, #0
   14214:	add	r3, pc, r3
   14218:	ldr	r2, [r3]
   1421c:	b	10d94 <__cxa_atexit@plt>
   14220:	andeq	r0, r1, r8, lsr #29

Disassembly of section .fini:

00014224 <.fini>:
   14224:	push	{r3, lr}
   14228:	pop	{r3, pc}
