
../repos/charybdis/wsockd/.libs/wsockd:     file format elf32-littlearm


Disassembly of section .init:

00010db8 <.init>:
   10db8:	push	{r3, lr}
   10dbc:	bl	11090 <rb_base64_encode@plt+0x48>
   10dc0:	pop	{r3, pc}

Disassembly of section .plt:

00010dc4 <open@plt-0x14>:
   10dc4:	push	{lr}		; (str lr, [sp, #-4]!)
   10dc8:	ldr	lr, [pc, #4]	; 10dd4 <open@plt-0x4>
   10dcc:	add	lr, pc, lr
   10dd0:	ldr	pc, [lr, #8]!
   10dd4:	andeq	r4, r1, ip, lsr #4

00010dd8 <open@plt>:
   10dd8:	add	ip, pc, #0, 12
   10ddc:	add	ip, ip, #20, 20	; 0x14000
   10de0:	ldr	pc, [ip, #556]!	; 0x22c

00010de4 <sigemptyset@plt>:
   10de4:	add	ip, pc, #0, 12
   10de8:	add	ip, ip, #20, 20	; 0x14000
   10dec:	ldr	pc, [ip, #548]!	; 0x224

00010df0 <strerror@plt>:
   10df0:	add	ip, pc, #0, 12
   10df4:	add	ip, ip, #20, 20	; 0x14000
   10df8:	ldr	pc, [ip, #540]!	; 0x21c

00010dfc <rb_get_type@plt>:
   10dfc:	add	ip, pc, #0, 12
   10e00:	add	ip, ip, #20, 20	; 0x14000
   10e04:	ldr	pc, [ip, #532]!	; 0x214

00010e08 <abort@plt>:
   10e08:	add	ip, pc, #0, 12
   10e0c:	add	ip, ip, #20, 20	; 0x14000
   10e10:	ldr	pc, [ip, #524]!	; 0x20c

00010e14 <rb_event_addish@plt>:
   10e14:	add	ip, pc, #0, 12
   10e18:	add	ip, ip, #20, 20	; 0x14000
   10e1c:	ldr	pc, [ip, #516]!	; 0x204

00010e20 <rb_ignore_errno@plt>:
   10e20:	add	ip, pc, #0, 12
   10e24:	add	ip, ip, #20, 20	; 0x14000
   10e28:	ldr	pc, [ip, #508]!	; 0x1fc

00010e2c <__libc_start_main@plt>:
   10e2c:	add	ip, pc, #0, 12
   10e30:	add	ip, ip, #20, 20	; 0x14000
   10e34:	ldr	pc, [ip, #500]!	; 0x1f4

00010e38 <rb_setselect@plt>:
   10e38:	add	ip, pc, #0, 12
   10e3c:	add	ip, ip, #20, 20	; 0x14000
   10e40:	ldr	pc, [ip, #492]!	; 0x1ec

00010e44 <__gmon_start__@plt>:
   10e44:	add	ip, pc, #0, 12
   10e48:	add	ip, ip, #20, 20	; 0x14000
   10e4c:	ldr	pc, [ip, #484]!	; 0x1e4

00010e50 <rb_send_fd_buf@plt>:
   10e50:	add	ip, pc, #0, 12
   10e54:	add	ip, ip, #20, 20	; 0x14000
   10e58:	ldr	pc, [ip, #476]!	; 0x1dc

00010e5c <vsnprintf@plt>:
   10e5c:	add	ip, pc, #0, 12
   10e60:	add	ip, ip, #20, 20	; 0x14000
   10e64:	ldr	pc, [ip, #468]!	; 0x1d4

00010e68 <getenv@plt>:
   10e68:	add	ip, pc, #0, 12
   10e6c:	add	ip, ip, #20, 20	; 0x14000
   10e70:	ldr	pc, [ip, #460]!	; 0x1cc

00010e74 <calloc@plt>:
   10e74:	add	ip, pc, #0, 12
   10e78:	add	ip, ip, #20, 20	; 0x14000
   10e7c:	ldr	pc, [ip, #452]!	; 0x1c4

00010e80 <rb_set_nb@plt>:
   10e80:	add	ip, pc, #0, 12
   10e84:	add	ip, ip, #20, 20	; 0x14000
   10e88:	ldr	pc, [ip, #444]!	; 0x1bc

00010e8c <memset@plt>:
   10e8c:	add	ip, pc, #0, 12
   10e90:	add	ip, ip, #20, 20	; 0x14000
   10e94:	ldr	pc, [ip, #436]!	; 0x1b4

00010e98 <__assert_fail@plt>:
   10e98:	add	ip, pc, #0, 12
   10e9c:	add	ip, ip, #20, 20	; 0x14000
   10ea0:	ldr	pc, [ip, #428]!	; 0x1ac

00010ea4 <rb_linebuf_parse@plt>:
   10ea4:	add	ip, pc, #0, 12
   10ea8:	add	ip, ip, #20, 20	; 0x14000
   10eac:	ldr	pc, [ip, #420]!	; 0x1a4

00010eb0 <rb_strlcpy@plt>:
   10eb0:	add	ip, pc, #0, 12
   10eb4:	add	ip, ip, #20, 20	; 0x14000
   10eb8:	ldr	pc, [ip, #412]!	; 0x19c

00010ebc <rb_init_rawbuffers@plt>:
   10ebc:	add	ip, pc, #0, 12
   10ec0:	add	ip, ip, #20, 20	; 0x14000
   10ec4:	ldr	pc, [ip, #404]!	; 0x194

00010ec8 <free@plt>:
   10ec8:	add	ip, pc, #0, 12
   10ecc:	add	ip, ip, #20, 20	; 0x14000
   10ed0:	ldr	pc, [ip, #396]!	; 0x18c

00010ed4 <rb_lib_loop@plt>:
   10ed4:	add	ip, pc, #0, 12
   10ed8:	add	ip, ip, #20, 20	; 0x14000
   10edc:	ldr	pc, [ip, #388]!	; 0x184

00010ee0 <rb_read@plt>:
   10ee0:	add	ip, pc, #0, 12
   10ee4:	add	ip, ip, #20, 20	; 0x14000
   10ee8:	ldr	pc, [ip, #380]!	; 0x17c

00010eec <rb_set_type@plt>:
   10eec:	add	ip, pc, #0, 12
   10ef0:	add	ip, ip, #20, 20	; 0x14000
   10ef4:	ldr	pc, [ip, #372]!	; 0x174

00010ef8 <rb_linebuf_get@plt>:
   10ef8:	add	ip, pc, #0, 12
   10efc:	add	ip, ip, #20, 20	; 0x14000
   10f00:	ldr	pc, [ip, #364]!	; 0x16c

00010f04 <rb_linebuf_flush@plt>:
   10f04:	add	ip, pc, #0, 12
   10f08:	add	ip, ip, #20, 20	; 0x14000
   10f0c:	ldr	pc, [ip, #356]!	; 0x164

00010f10 <strlen@plt>:
   10f10:	add	ip, pc, #0, 12
   10f14:	add	ip, ip, #20, 20	; 0x14000
   10f18:	ldr	pc, [ip, #348]!	; 0x15c

00010f1c <memcpy@plt>:
   10f1c:	add	ip, pc, #0, 12
   10f20:	add	ip, ip, #20, 20	; 0x14000
   10f24:	ldr	pc, [ip, #340]!	; 0x154

00010f28 <rb_linebuf_donebuf@plt>:
   10f28:	add	ip, pc, #0, 12
   10f2c:	add	ip, ip, #20, 20	; 0x14000
   10f30:	ldr	pc, [ip, #332]!	; 0x14c

00010f34 <rb_strcasestr@plt>:
   10f34:	add	ip, pc, #0, 12
   10f38:	add	ip, ip, #20, 20	; 0x14000
   10f3c:	ldr	pc, [ip, #324]!	; 0x144

00010f40 <rb_close@plt>:
   10f40:	add	ip, pc, #0, 12
   10f44:	add	ip, ip, #20, 20	; 0x14000
   10f48:	ldr	pc, [ip, #316]!	; 0x13c

00010f4c <sigaddset@plt>:
   10f4c:	add	ip, pc, #0, 12
   10f50:	add	ip, ip, #20, 20	; 0x14000
   10f54:	ldr	pc, [ip, #308]!	; 0x134

00010f58 <atoi@plt>:
   10f58:	add	ip, pc, #0, 12
   10f5c:	add	ip, ip, #20, 20	; 0x14000
   10f60:	ldr	pc, [ip, #300]!	; 0x12c

00010f64 <rb_rawbuf_length@plt>:
   10f64:	add	ip, pc, #0, 12
   10f68:	add	ip, ip, #20, 20	; 0x14000
   10f6c:	ldr	pc, [ip, #292]!	; 0x124

00010f70 <rb_free_rawbuffer@plt>:
   10f70:	add	ip, pc, #0, 12
   10f74:	add	ip, ip, #20, 20	; 0x14000
   10f78:	ldr	pc, [ip, #284]!	; 0x11c

00010f7c <close@plt>:
   10f7c:	add	ip, pc, #0, 12
   10f80:	add	ip, ip, #20, 20	; 0x14000
   10f84:	ldr	pc, [ip, #276]!	; 0x114

00010f88 <fwrite@plt>:
   10f88:	add	ip, pc, #0, 12
   10f8c:	add	ip, ip, #20, 20	; 0x14000
   10f90:	ldr	pc, [ip, #268]!	; 0x10c

00010f94 <rb_outofmemory@plt>:
   10f94:	add	ip, pc, #0, 12
   10f98:	add	ip, ip, #20, 20	; 0x14000
   10f9c:	ldr	pc, [ip, #260]!	; 0x104

00010fa0 <rb_rawbuf_get@plt>:
   10fa0:	add	ip, pc, #0, 12
   10fa4:	add	ip, ip, #20, 20	; 0x14000
   10fa8:	ldr	pc, [ip, #252]!	; 0xfc

00010fac <sigaction@plt>:
   10fac:	add	ip, pc, #0, 12
   10fb0:	add	ip, ip, #20, 20	; 0x14000
   10fb4:	ldr	pc, [ip, #244]!	; 0xf4

00010fb8 <rb_lib_init@plt>:
   10fb8:	add	ip, pc, #0, 12
   10fbc:	add	ip, ip, #20, 20	; 0x14000
   10fc0:	ldr	pc, [ip, #236]!	; 0xec

00010fc4 <rb_new_rawbuffer@plt>:
   10fc4:	add	ip, pc, #0, 12
   10fc8:	add	ip, ip, #20, 20	; 0x14000
   10fcc:	ldr	pc, [ip, #228]!	; 0xe4

00010fd0 <rb_open@plt>:
   10fd0:	add	ip, pc, #0, 12
   10fd4:	add	ip, ip, #20, 20	; 0x14000
   10fd8:	ldr	pc, [ip, #220]!	; 0xdc

00010fdc <rb_recv_fd_buf@plt>:
   10fdc:	add	ip, pc, #0, 12
   10fe0:	add	ip, ip, #20, 20	; 0x14000
   10fe4:	ldr	pc, [ip, #212]!	; 0xd4

00010fe8 <dup2@plt>:
   10fe8:	add	ip, pc, #0, 12
   10fec:	add	ip, ip, #20, 20	; 0x14000
   10ff0:	ldr	pc, [ip, #204]!	; 0xcc

00010ff4 <rb_linebuf_newbuf@plt>:
   10ff4:	add	ip, pc, #0, 12
   10ff8:	add	ip, ip, #20, 20	; 0x14000
   10ffc:	ldr	pc, [ip, #196]!	; 0xc4

00011000 <rb_linebuf_init@plt>:
   11000:	add	ip, pc, #0, 12
   11004:	add	ip, ip, #20, 20	; 0x14000
   11008:	ldr	pc, [ip, #188]!	; 0xbc

0001100c <getrlimit@plt>:
   1100c:	add	ip, pc, #0, 12
   11010:	add	ip, ip, #20, 20	; 0x14000
   11014:	ldr	pc, [ip, #180]!	; 0xb4

00011018 <rb_rawbuf_append@plt>:
   11018:	add	ip, pc, #0, 12
   1101c:	add	ip, ip, #20, 20	; 0x14000
   11020:	ldr	pc, [ip, #172]!	; 0xac

00011024 <rb_rawbuf_flush@plt>:
   11024:	add	ip, pc, #0, 12
   11028:	add	ip, ip, #20, 20	; 0x14000
   1102c:	ldr	pc, [ip, #164]!	; 0xa4

00011030 <exit@plt>:
   11030:	add	ip, pc, #0, 12
   11034:	add	ip, ip, #20, 20	; 0x14000
   11038:	ldr	pc, [ip, #156]!	; 0x9c

0001103c <__errno_location@plt>:
   1103c:	add	ip, pc, #0, 12
   11040:	add	ip, ip, #20, 20	; 0x14000
   11044:	ldr	pc, [ip, #148]!	; 0x94

00011048 <rb_base64_encode@plt>:
   11048:	add	ip, pc, #0, 12
   1104c:	add	ip, ip, #20, 20	; 0x14000
   11050:	ldr	pc, [ip, #140]!	; 0x8c

Disassembly of section .text:

00011054 <.text>:
   11054:	mov	fp, #0
   11058:	mov	lr, #0
   1105c:	pop	{r1}		; (ldr r1, [sp], #4)
   11060:	mov	r2, sp
   11064:	push	{r2}		; (str r2, [sp, #-4]!)
   11068:	push	{r0}		; (str r0, [sp, #-4]!)
   1106c:	ldr	ip, [pc, #16]	; 11084 <rb_base64_encode@plt+0x3c>
   11070:	push	{ip}		; (str ip, [sp, #-4]!)
   11074:	ldr	r0, [pc, #12]	; 11088 <rb_base64_encode@plt+0x40>
   11078:	ldr	r3, [pc, #12]	; 1108c <rb_base64_encode@plt+0x44>
   1107c:	bl	10e2c <__libc_start_main@plt>
   11080:	bl	10e08 <abort@plt>
   11084:	andeq	r4, r1, r4, lsl #1
   11088:	andeq	r1, r1, r4, asr #2
   1108c:	andeq	r4, r1, r4, lsr #32
   11090:	ldr	r3, [pc, #20]	; 110ac <rb_base64_encode@plt+0x64>
   11094:	ldr	r2, [pc, #20]	; 110b0 <rb_base64_encode@plt+0x68>
   11098:	add	r3, pc, r3
   1109c:	ldr	r2, [r3, r2]
   110a0:	cmp	r2, #0
   110a4:	bxeq	lr
   110a8:	b	10e44 <__gmon_start__@plt>
   110ac:	andeq	r3, r1, r0, ror #30
   110b0:	andeq	r0, r0, r0, ror #1
   110b4:	ldr	r0, [pc, #24]	; 110d4 <rb_base64_encode@plt+0x8c>
   110b8:	ldr	r3, [pc, #24]	; 110d8 <rb_base64_encode@plt+0x90>
   110bc:	cmp	r3, r0
   110c0:	bxeq	lr
   110c4:	ldr	r3, [pc, #16]	; 110dc <rb_base64_encode@plt+0x94>
   110c8:	cmp	r3, #0
   110cc:	bxeq	lr
   110d0:	bx	r3
   110d4:	andeq	r5, r2, ip, ror #1
   110d8:	andeq	r5, r2, ip, ror #1
   110dc:	andeq	r0, r0, r0
   110e0:	ldr	r0, [pc, #36]	; 1110c <rb_base64_encode@plt+0xc4>
   110e4:	ldr	r1, [pc, #36]	; 11110 <rb_base64_encode@plt+0xc8>
   110e8:	sub	r1, r1, r0
   110ec:	asr	r1, r1, #2
   110f0:	add	r1, r1, r1, lsr #31
   110f4:	asrs	r1, r1, #1
   110f8:	bxeq	lr
   110fc:	ldr	r3, [pc, #16]	; 11114 <rb_base64_encode@plt+0xcc>
   11100:	cmp	r3, #0
   11104:	bxeq	lr
   11108:	bx	r3
   1110c:	andeq	r5, r2, ip, ror #1
   11110:	andeq	r5, r2, ip, ror #1
   11114:	andeq	r0, r0, r0
   11118:	push	{r4, lr}
   1111c:	ldr	r4, [pc, #24]	; 1113c <rb_base64_encode@plt+0xf4>
   11120:	ldrb	r3, [r4]
   11124:	cmp	r3, #0
   11128:	popne	{r4, pc}
   1112c:	bl	110b4 <rb_base64_encode@plt+0x6c>
   11130:	mov	r3, #1
   11134:	strb	r3, [r4]
   11138:	pop	{r4, pc}
   1113c:	strdeq	r5, [r2], -r4
   11140:	b	110e0 <rb_base64_encode@plt+0x98>
   11144:	push	{fp, lr}
   11148:	mov	fp, sp
   1114c:	sub	sp, sp, #16
   11150:	bl	113a0 <rb_base64_encode@plt+0x358>
   11154:	mov	r4, r0
   11158:	movw	r0, #16532	; 0x4094
   1115c:	movt	r0, #1
   11160:	bl	10e68 <getenv@plt>
   11164:	mov	r6, r0
   11168:	movw	r0, #16539	; 0x409b
   1116c:	movt	r0, #1
   11170:	bl	10e68 <getenv@plt>
   11174:	mov	r5, r0
   11178:	movw	r0, #16548	; 0x40a4
   1117c:	movt	r0, #1
   11180:	bl	10e68 <getenv@plt>
   11184:	cmp	r6, #0
   11188:	beq	1119c <rb_base64_encode@plt+0x154>
   1118c:	cmp	r5, #0
   11190:	movne	r7, r0
   11194:	cmpne	r0, #0
   11198:	bne	111dc <rb_base64_encode@plt+0x194>
   1119c:	movw	r4, #20720	; 0x50f0
   111a0:	movt	r4, #2
   111a4:	ldr	r3, [r4]
   111a8:	movw	r0, #16557	; 0x40ad
   111ac:	movt	r0, #1
   111b0:	mov	r1, #52	; 0x34
   111b4:	mov	r2, #1
   111b8:	bl	10f88 <fwrite@plt>
   111bc:	ldr	r3, [r4]
   111c0:	movw	r0, #16610	; 0x40e2
   111c4:	movt	r0, #1
   111c8:	mov	r1, #49	; 0x31
   111cc:	mov	r2, #1
   111d0:	bl	10f88 <fwrite@plt>
   111d4:	mov	r0, #1
   111d8:	bl	11030 <exit@plt>
   111dc:	mov	r0, r6
   111e0:	bl	10f58 <atoi@plt>
   111e4:	mov	r6, r0
   111e8:	mov	r0, r5
   111ec:	bl	10f58 <atoi@plt>
   111f0:	mov	r5, r0
   111f4:	mov	r0, r7
   111f8:	bl	10f58 <atoi@plt>
   111fc:	movw	r1, #20728	; 0x50f8
   11200:	movt	r1, #2
   11204:	str	r0, [r1]
   11208:	cmp	r4, #1
   1120c:	blt	11244 <rb_base64_encode@plt+0x1fc>
   11210:	mov	r7, #0
   11214:	b	11224 <rb_base64_encode@plt+0x1dc>
   11218:	add	r7, r7, #1
   1121c:	cmp	r4, r7
   11220:	beq	11244 <rb_base64_encode@plt+0x1fc>
   11224:	cmp	r6, r7
   11228:	cmpne	r5, r7
   1122c:	beq	11218 <rb_base64_encode@plt+0x1d0>
   11230:	cmp	r7, #3
   11234:	bcc	11218 <rb_base64_encode@plt+0x1d0>
   11238:	mov	r0, r7
   1123c:	bl	10f7c <close@plt>
   11240:	b	11218 <rb_base64_encode@plt+0x1d0>
   11244:	movw	r0, #16660	; 0x4114
   11248:	movt	r0, #1
   1124c:	mov	r1, #2
   11250:	bl	10dd8 <open@plt>
   11254:	cmp	r0, #0
   11258:	bmi	112ac <rb_base64_encode@plt+0x264>
   1125c:	mov	r7, r0
   11260:	cmp	r6, #0
   11264:	cmpne	r5, #0
   11268:	beq	11278 <rb_base64_encode@plt+0x230>
   1126c:	mov	r0, r7
   11270:	mov	r1, #0
   11274:	bl	10fe8 <dup2@plt>
   11278:	cmp	r6, #1
   1127c:	cmpne	r5, #1
   11280:	beq	11290 <rb_base64_encode@plt+0x248>
   11284:	mov	r0, r7
   11288:	mov	r1, #1
   1128c:	bl	10fe8 <dup2@plt>
   11290:	cmp	r6, #2
   11294:	cmpne	r5, #2
   11298:	bne	11388 <rb_base64_encode@plt+0x340>
   1129c:	cmp	r7, #3
   112a0:	blt	112ac <rb_base64_encode@plt+0x264>
   112a4:	mov	r0, r7
   112a8:	bl	10f7c <close@plt>
   112ac:	bl	113d0 <rb_base64_encode@plt+0x388>
   112b0:	mov	r0, #4096	; 0x1000
   112b4:	mov	r1, #1024	; 0x400
   112b8:	str	r4, [sp]
   112bc:	str	r1, [sp, #4]
   112c0:	str	r0, [sp, #8]
   112c4:	mov	r0, #0
   112c8:	mov	r1, #0
   112cc:	mov	r2, #0
   112d0:	mov	r3, #0
   112d4:	bl	10fb8 <rb_lib_init@plt>
   112d8:	mov	r0, #4096	; 0x1000
   112dc:	bl	11000 <rb_linebuf_init@plt>
   112e0:	mov	r0, #4096	; 0x1000
   112e4:	bl	10ebc <rb_init_rawbuffers@plt>
   112e8:	mov	r0, #48	; 0x30
   112ec:	bl	11480 <rb_base64_encode@plt+0x438>
   112f0:	movw	r4, #20732	; 0x50fc
   112f4:	movt	r4, #2
   112f8:	str	r0, [r4]
   112fc:	movw	r2, #16670	; 0x411e
   11300:	movt	r2, #1
   11304:	mov	r0, r6
   11308:	mov	r1, #4
   1130c:	bl	10fd0 <rb_open@plt>
   11310:	ldr	r1, [r4]
   11314:	str	r0, [r1, #16]
   11318:	movw	r2, #16690	; 0x4132
   1131c:	movt	r2, #1
   11320:	mov	r0, r5
   11324:	mov	r1, #8
   11328:	bl	10fd0 <rb_open@plt>
   1132c:	ldr	r1, [r4]
   11330:	str	r0, [r1, #20]
   11334:	ldr	r0, [r1, #16]
   11338:	bl	10e80 <rb_set_nb@plt>
   1133c:	ldr	r0, [r4]
   11340:	ldr	r0, [r0, #20]
   11344:	bl	10e80 <rb_set_nb@plt>
   11348:	movw	r0, #16700	; 0x413c
   1134c:	movt	r0, #1
   11350:	movw	r1, #5280	; 0x14a0
   11354:	movt	r1, #1
   11358:	mov	r2, #0
   1135c:	mov	r3, #10
   11360:	bl	10e14 <rb_event_addish@plt>
   11364:	ldr	r0, [r4]
   11368:	ldr	r0, [r0, #20]
   1136c:	mov	r1, #0
   11370:	bl	114e0 <rb_base64_encode@plt+0x498>
   11374:	ldr	r1, [r4]
   11378:	ldr	r0, [r1, #16]
   1137c:	bl	1154c <rb_base64_encode@plt+0x504>
   11380:	mov	r0, #0
   11384:	bl	10ed4 <rb_lib_loop@plt>
   11388:	mov	r0, r7
   1138c:	mov	r1, #2
   11390:	bl	10fe8 <dup2@plt>
   11394:	cmp	r7, #3
   11398:	bge	112a4 <rb_base64_encode@plt+0x25c>
   1139c:	b	112ac <rb_base64_encode@plt+0x264>
   113a0:	push	{fp, lr}
   113a4:	mov	fp, sp
   113a8:	sub	sp, sp, #8
   113ac:	mov	r1, sp
   113b0:	mov	r0, #7
   113b4:	bl	1100c <getrlimit@plt>
   113b8:	ldr	r1, [sp]
   113bc:	cmp	r0, #0
   113c0:	movwne	r1, #65535	; 0xffff
   113c4:	mov	r0, r1
   113c8:	mov	sp, fp
   113cc:	pop	{fp, pc}
   113d0:	push	{r4, r5, fp, lr}
   113d4:	add	fp, sp, #8
   113d8:	sub	sp, sp, #144	; 0x90
   113dc:	mov	r0, #1
   113e0:	str	r0, [sp, #4]
   113e4:	mov	r0, #0
   113e8:	str	r0, [sp, #136]	; 0x88
   113ec:	add	r4, sp, #4
   113f0:	add	r5, r4, #4
   113f4:	mov	r0, r5
   113f8:	bl	10de4 <sigemptyset@plt>
   113fc:	mov	r0, r5
   11400:	mov	r1, #13
   11404:	bl	10f4c <sigaddset@plt>
   11408:	mov	r0, r5
   1140c:	mov	r1, #14
   11410:	bl	10f4c <sigaddset@plt>
   11414:	mov	r0, r5
   11418:	mov	r1, #5
   1141c:	bl	10f4c <sigaddset@plt>
   11420:	mov	r0, r5
   11424:	mov	r1, #28
   11428:	bl	10f4c <sigaddset@plt>
   1142c:	mov	r0, #28
   11430:	mov	r1, r4
   11434:	mov	r2, #0
   11438:	bl	10fac <sigaction@plt>
   1143c:	mov	r0, #13
   11440:	mov	r1, r4
   11444:	mov	r2, #0
   11448:	bl	10fac <sigaction@plt>
   1144c:	mov	r0, #5
   11450:	mov	r1, r4
   11454:	mov	r2, #0
   11458:	bl	10fac <sigaction@plt>
   1145c:	movw	r0, #5712	; 0x1650
   11460:	movt	r0, #1
   11464:	str	r0, [sp, #4]
   11468:	mov	r0, #14
   1146c:	mov	r1, r4
   11470:	mov	r2, #0
   11474:	bl	10fac <sigaction@plt>
   11478:	sub	sp, fp, #8
   1147c:	pop	{r4, r5, fp, pc}
   11480:	push	{fp, lr}
   11484:	mov	fp, sp
   11488:	mov	r1, r0
   1148c:	mov	r0, #1
   11490:	bl	10e74 <calloc@plt>
   11494:	cmp	r0, #0
   11498:	popne	{fp, pc}
   1149c:	bl	10f94 <rb_outofmemory@plt>
   114a0:	push	{r4, r5, fp, lr}
   114a4:	add	fp, sp, #8
   114a8:	movw	r4, #20736	; 0x5100
   114ac:	movt	r4, #2
   114b0:	ldr	r5, [r4]
   114b4:	cmp	r5, #0
   114b8:	beq	114d0 <rb_base64_encode@plt+0x488>
   114bc:	ldr	r0, [r5]
   114c0:	ldr	r5, [r5, #8]
   114c4:	bl	11654 <rb_base64_encode@plt+0x60c>
   114c8:	cmp	r5, #0
   114cc:	bne	114bc <rb_base64_encode@plt+0x474>
   114d0:	mov	r0, #0
   114d4:	str	r0, [r4]
   114d8:	str	r0, [r4, #4]
   114dc:	pop	{r4, r5, fp, pc}
   114e0:	push	{r4, r5, r6, r7, fp, lr}
   114e4:	add	fp, sp, #16
   114e8:	sub	sp, sp, #16384	; 0x4000
   114ec:	mov	r4, r0
   114f0:	mov	r5, sp
   114f4:	mov	r0, r4
   114f8:	mov	r1, r5
   114fc:	mov	r2, #16384	; 0x4000
   11500:	bl	10ee0 <rb_read@plt>
   11504:	cmp	r0, #0
   11508:	bgt	114f4 <rb_base64_encode@plt+0x4ac>
   1150c:	beq	11544 <rb_base64_encode@plt+0x4fc>
   11510:	bl	1103c <__errno_location@plt>
   11514:	ldr	r0, [r0]
   11518:	bl	10e20 <rb_ignore_errno@plt>
   1151c:	cmp	r0, #0
   11520:	beq	11544 <rb_base64_encode@plt+0x4fc>
   11524:	movw	r2, #5344	; 0x14e0
   11528:	movt	r2, #1
   1152c:	mov	r0, r4
   11530:	mov	r1, #1
   11534:	mov	r3, #0
   11538:	bl	10e38 <rb_setselect@plt>
   1153c:	sub	sp, fp, #16
   11540:	pop	{r4, r5, r6, r7, fp, pc}
   11544:	mov	r0, #0
   11548:	bl	11030 <exit@plt>
   1154c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11550:	add	fp, sp, #28
   11554:	sub	sp, sp, #4
   11558:	mov	r8, r1
   1155c:	add	r5, r1, #24
   11560:	mov	r9, #16384	; 0x4000
   11564:	mov	sl, #4
   11568:	b	1157c <rb_base64_encode@plt+0x534>
   1156c:	mov	r0, #4
   11570:	str	r0, [r6, #36]	; 0x24
   11574:	cmp	r7, #0
   11578:	ble	11604 <rb_base64_encode@plt+0x5bc>
   1157c:	mov	r0, #40	; 0x28
   11580:	bl	11480 <rb_base64_encode@plt+0x438>
   11584:	mov	r6, r0
   11588:	mov	r0, #16384	; 0x4000
   1158c:	bl	11480 <rb_base64_encode@plt+0x438>
   11590:	mov	r1, r0
   11594:	str	r0, [r6, #12]
   11598:	str	r9, [r6, #16]
   1159c:	ldr	r0, [r8, #16]
   115a0:	str	sl, [sp]
   115a4:	add	r4, r6, #20
   115a8:	mov	r2, #16384	; 0x4000
   115ac:	mov	r3, r4
   115b0:	bl	10fdc <rb_recv_fd_buf@plt>
   115b4:	mov	r7, r0
   115b8:	cmp	r0, #0
   115bc:	ble	115f4 <rb_base64_encode@plt+0x5ac>
   115c0:	str	r7, [r6, #16]
   115c4:	mov	r0, r6
   115c8:	mov	r1, r6
   115cc:	mov	r2, r5
   115d0:	bl	11698 <rb_base64_encode@plt+0x650>
   115d4:	mov	r0, #0
   115d8:	ldr	r1, [r4, r0, lsl #2]
   115dc:	cmp	r1, #0
   115e0:	beq	11570 <rb_base64_encode@plt+0x528>
   115e4:	add	r0, r0, #1
   115e8:	cmp	r0, #4
   115ec:	bne	115d8 <rb_base64_encode@plt+0x590>
   115f0:	b	1156c <rb_base64_encode@plt+0x524>
   115f4:	ldr	r0, [r6, #12]
   115f8:	bl	1168c <rb_base64_encode@plt+0x644>
   115fc:	mov	r0, r6
   11600:	bl	1168c <rb_base64_encode@plt+0x644>
   11604:	cmp	r7, #0
   11608:	beq	11648 <rb_base64_encode@plt+0x600>
   1160c:	bl	1103c <__errno_location@plt>
   11610:	ldr	r0, [r0]
   11614:	bl	10e20 <rb_ignore_errno@plt>
   11618:	cmp	r0, #0
   1161c:	beq	11648 <rb_base64_encode@plt+0x600>
   11620:	mov	r0, r8
   11624:	bl	1176c <rb_base64_encode@plt+0x724>
   11628:	ldr	r0, [r8, #16]
   1162c:	movw	r2, #5452	; 0x154c
   11630:	movt	r2, #1
   11634:	mov	r1, #1
   11638:	mov	r3, r8
   1163c:	sub	sp, fp, #28
   11640:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11644:	b	10e38 <rb_setselect@plt>
   11648:	mov	r0, #0
   1164c:	bl	11030 <exit@plt>
   11650:	bx	lr
   11654:	push	{r4, sl, fp, lr}
   11658:	add	fp, sp, #8
   1165c:	mov	r4, r0
   11660:	add	r0, r0, #52	; 0x34
   11664:	bl	10f28 <rb_linebuf_donebuf@plt>
   11668:	add	r0, r4, #24
   1166c:	bl	10f28 <rb_linebuf_donebuf@plt>
   11670:	ldr	r0, [r4, #20]
   11674:	bl	10f70 <rb_free_rawbuffer@plt>
   11678:	ldr	r0, [r4, #16]
   1167c:	bl	10f70 <rb_free_rawbuffer@plt>
   11680:	mov	r0, r4
   11684:	pop	{r4, sl, fp, lr}
   11688:	b	1168c <rb_base64_encode@plt+0x644>
   1168c:	cmp	r0, #0
   11690:	bxeq	lr
   11694:	b	10ec8 <free@plt>
   11698:	push	{fp, lr}
   1169c:	mov	fp, sp
   116a0:	cmp	r1, #0
   116a4:	beq	1170c <rb_base64_encode@plt+0x6c4>
   116a8:	cmp	r2, #0
   116ac:	beq	1172c <rb_base64_encode@plt+0x6e4>
   116b0:	cmp	r0, #0
   116b4:	beq	1174c <rb_base64_encode@plt+0x704>
   116b8:	mov	r3, #0
   116bc:	str	r3, [r1, #8]
   116c0:	str	r0, [r1]
   116c4:	ldr	r0, [r2, #4]
   116c8:	str	r0, [r1, #4]
   116cc:	ldr	r0, [r2, #4]
   116d0:	cmp	r0, #0
   116d4:	beq	116e4 <rb_base64_encode@plt+0x69c>
   116d8:	add	r0, r0, #8
   116dc:	str	r1, [r0]
   116e0:	b	116f0 <rb_base64_encode@plt+0x6a8>
   116e4:	ldr	r0, [r2]
   116e8:	cmp	r0, #0
   116ec:	beq	11704 <rb_base64_encode@plt+0x6bc>
   116f0:	str	r1, [r2, #4]
   116f4:	ldr	r0, [r2, #8]
   116f8:	add	r0, r0, #1
   116fc:	str	r0, [r2, #8]
   11700:	pop	{fp, pc}
   11704:	mov	r0, r2
   11708:	b	116dc <rb_base64_encode@plt+0x694>
   1170c:	movw	r0, #16717	; 0x414d
   11710:	movt	r0, #1
   11714:	movw	r1, #16727	; 0x4157
   11718:	movt	r1, #1
   1171c:	movw	r3, #16755	; 0x4173
   11720:	movt	r3, #1
   11724:	mov	r2, #211	; 0xd3
   11728:	bl	10e98 <__assert_fail@plt>
   1172c:	movw	r0, #16818	; 0x41b2
   11730:	movt	r0, #1
   11734:	movw	r1, #16727	; 0x4157
   11738:	movt	r1, #1
   1173c:	movw	r3, #16755	; 0x4173
   11740:	movt	r3, #1
   11744:	mov	r2, #212	; 0xd4
   11748:	bl	10e98 <__assert_fail@plt>
   1174c:	movw	r0, #16831	; 0x41bf
   11750:	movt	r0, #1
   11754:	movw	r1, #16727	; 0x4157
   11758:	movt	r1, #1
   1175c:	movw	r3, #16755	; 0x4173
   11760:	movt	r3, #1
   11764:	mov	r2, #213	; 0xd5
   11768:	bl	10e98 <__assert_fail@plt>
   1176c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   11770:	add	fp, sp, #24
   11774:	mov	r5, r0
   11778:	ldr	r4, [r5, #24]!
   1177c:	cmp	r4, #0
   11780:	beq	117fc <rb_base64_encode@plt+0x7b4>
   11784:	mov	r8, r0
   11788:	b	117b8 <rb_base64_encode@plt+0x770>
   1178c:	mov	r0, r6
   11790:	bl	11800 <rb_base64_encode@plt+0x7b8>
   11794:	mov	r0, r7
   11798:	mov	r1, r5
   1179c:	bl	118d0 <rb_base64_encode@plt+0x888>
   117a0:	ldr	r0, [r6, #12]
   117a4:	bl	1168c <rb_base64_encode@plt+0x644>
   117a8:	mov	r0, r6
   117ac:	bl	1168c <rb_base64_encode@plt+0x644>
   117b0:	cmp	r4, #0
   117b4:	beq	117fc <rb_base64_encode@plt+0x7b4>
   117b8:	mov	r7, r4
   117bc:	ldr	r6, [r4]
   117c0:	ldr	r4, [r4, #8]
   117c4:	ldr	r0, [r6, #12]
   117c8:	ldrb	r0, [r0]
   117cc:	cmp	r0, #65	; 0x41
   117d0:	bne	11794 <rb_base64_encode@plt+0x74c>
   117d4:	ldr	r0, [r6, #36]	; 0x24
   117d8:	cmp	r0, #2
   117dc:	bne	1178c <rb_base64_encode@plt+0x744>
   117e0:	ldr	r0, [r6, #16]
   117e4:	cmp	r0, #5
   117e8:	bne	1178c <rb_base64_encode@plt+0x744>
   117ec:	mov	r0, r8
   117f0:	mov	r1, r6
   117f4:	bl	1183c <rb_base64_encode@plt+0x7f4>
   117f8:	b	11794 <rb_base64_encode@plt+0x74c>
   117fc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   11800:	push	{r4, r5, r6, sl, fp, lr}
   11804:	add	fp, sp, #16
   11808:	mov	r4, r0
   1180c:	ldr	r0, [r0, #36]	; 0x24
   11810:	cmp	r0, #1
   11814:	blt	11838 <rb_base64_encode@plt+0x7f0>
   11818:	add	r5, r4, #20
   1181c:	mov	r6, #0
   11820:	ldr	r0, [r5, r6, lsl #2]
   11824:	bl	10f40 <rb_close@plt>
   11828:	add	r6, r6, #1
   1182c:	ldr	r0, [r4, #36]	; 0x24
   11830:	cmp	r6, r0
   11834:	blt	11820 <rb_base64_encode@plt+0x7d8>
   11838:	pop	{r4, r5, r6, sl, fp, pc}
   1183c:	push	{r4, r5, fp, lr}
   11840:	add	fp, sp, #8
   11844:	mov	r5, r1
   11848:	ldr	r1, [r1, #20]
   1184c:	ldr	r2, [r5, #24]
   11850:	bl	11970 <rb_base64_encode@plt+0x928>
   11854:	mov	r4, r0
   11858:	ldr	r0, [r5, #12]
   1185c:	add	r0, r0, #1
   11860:	bl	119dc <rb_base64_encode@plt+0x994>
   11864:	mov	r1, r0
   11868:	mov	r0, r4
   1186c:	bl	119e4 <rb_base64_encode@plt+0x99c>
   11870:	ldrb	r0, [r4, #128]	; 0x80
   11874:	orr	r0, r0, #4
   11878:	strb	r0, [r4, #128]	; 0x80
   1187c:	ldr	r0, [r4, #84]	; 0x54
   11880:	bl	10dfc <rb_get_type@plt>
   11884:	tst	r0, #64	; 0x40
   11888:	beq	11898 <rb_base64_encode@plt+0x850>
   1188c:	ldr	r0, [r4, #84]	; 0x54
   11890:	mov	r1, #4
   11894:	bl	10eec <rb_set_type@plt>
   11898:	ldr	r0, [r4, #88]	; 0x58
   1189c:	bl	10dfc <rb_get_type@plt>
   118a0:	cmp	r0, #64	; 0x40
   118a4:	bne	118b4 <rb_base64_encode@plt+0x86c>
   118a8:	ldr	r0, [r4, #88]	; 0x58
   118ac:	mov	r1, #4
   118b0:	bl	10eec <rb_set_type@plt>
   118b4:	ldr	r0, [r4, #84]	; 0x54
   118b8:	mov	r1, r4
   118bc:	bl	11a18 <rb_base64_encode@plt+0x9d0>
   118c0:	ldr	r0, [r4, #88]	; 0x58
   118c4:	mov	r1, r4
   118c8:	pop	{r4, r5, fp, lr}
   118cc:	b	11b44 <rb_base64_encode@plt+0xafc>
   118d0:	push	{fp, lr}
   118d4:	mov	fp, sp
   118d8:	cmp	r0, #0
   118dc:	beq	11930 <rb_base64_encode@plt+0x8e8>
   118e0:	cmp	r1, #0
   118e4:	beq	11950 <rb_base64_encode@plt+0x908>
   118e8:	ldr	ip, [r0, #4]
   118ec:	ldr	r3, [r0, #8]
   118f0:	add	r2, r3, #4
   118f4:	cmp	r3, #0
   118f8:	addeq	r2, r1, #4
   118fc:	str	ip, [r2]
   11900:	ldmib	r0, {r2, ip}
   11904:	cmp	r2, #0
   11908:	mov	r3, r1
   1190c:	addne	r3, r2, #8
   11910:	str	ip, [r3]
   11914:	mov	r2, #0
   11918:	str	r2, [r0, #4]
   1191c:	str	r2, [r0, #8]
   11920:	ldr	r0, [r1, #8]
   11924:	sub	r0, r0, #1
   11928:	str	r0, [r1, #8]
   1192c:	pop	{fp, pc}
   11930:	movw	r0, #16717	; 0x414d
   11934:	movt	r0, #1
   11938:	movw	r1, #16727	; 0x4157
   1193c:	movt	r1, #1
   11940:	movw	r3, #17293	; 0x438d
   11944:	movt	r3, #1
   11948:	mov	r2, #235	; 0xeb
   1194c:	bl	10e98 <__assert_fail@plt>
   11950:	movw	r0, #16818	; 0x41b2
   11954:	movt	r0, #1
   11958:	movw	r1, #16727	; 0x4157
   1195c:	movt	r1, #1
   11960:	movw	r3, #17293	; 0x438d
   11964:	movt	r3, #1
   11968:	mov	r2, #236	; 0xec
   1196c:	bl	10e98 <__assert_fail@plt>
   11970:	push	{r4, r5, r6, r7, fp, lr}
   11974:	add	fp, sp, #16
   11978:	mov	r5, r2
   1197c:	mov	r6, r1
   11980:	mov	r7, r0
   11984:	mov	r0, #168	; 0xa8
   11988:	bl	11480 <rb_base64_encode@plt+0x438>
   1198c:	mov	r4, r0
   11990:	str	r7, [r0, #12]
   11994:	mvn	r0, #0
   11998:	str	r0, [r4, #80]	; 0x50
   1199c:	str	r6, [r4, #84]	; 0x54
   119a0:	str	r5, [r4, #88]	; 0x58
   119a4:	mov	r0, r6
   119a8:	bl	10e80 <rb_set_nb@plt>
   119ac:	mov	r0, r5
   119b0:	bl	10e80 <rb_set_nb@plt>
   119b4:	add	r0, r4, #52	; 0x34
   119b8:	bl	10ff4 <rb_linebuf_newbuf@plt>
   119bc:	add	r0, r4, #24
   119c0:	bl	10ff4 <rb_linebuf_newbuf@plt>
   119c4:	bl	10fc4 <rb_new_rawbuffer@plt>
   119c8:	str	r0, [r4, #20]
   119cc:	bl	10fc4 <rb_new_rawbuffer@plt>
   119d0:	str	r0, [r4, #16]
   119d4:	mov	r0, r4
   119d8:	pop	{r4, r5, r6, r7, fp, pc}
   119dc:	ldr	r0, [r0]
   119e0:	bx	lr
   119e4:	str	r1, [r0, #80]	; 0x50
   119e8:	movw	r2, #19923	; 0x4dd3
   119ec:	movt	r2, #4194	; 0x1062
   119f0:	umull	r2, r3, r1, r2
   119f4:	lsr	r2, r3, #7
   119f8:	mov	r3, #2000	; 0x7d0
   119fc:	mls	r1, r2, r3, r1
   11a00:	add	r1, r1, r1, lsl #1
   11a04:	movw	r2, #20748	; 0x510c
   11a08:	movt	r2, #2
   11a0c:	add	r2, r2, r1, lsl #2
   11a10:	mov	r1, r0
   11a14:	b	11c6c <rb_base64_encode@plt+0xc24>
   11a18:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   11a1c:	add	fp, sp, #24
   11a20:	sub	sp, sp, #16384	; 0x4000
   11a24:	mov	r4, r1
   11a28:	mov	r5, r0
   11a2c:	mov	r0, sp
   11a30:	mov	r1, #0
   11a34:	mov	r2, #16384	; 0x4000
   11a38:	bl	10e8c <memset@plt>
   11a3c:	cmp	r4, #0
   11a40:	beq	11ae0 <rb_base64_encode@plt+0xa98>
   11a44:	ldrb	r0, [r4, #128]	; 0x80
   11a48:	tst	r0, #2
   11a4c:	bne	11ae0 <rb_base64_encode@plt+0xa98>
   11a50:	mov	r6, sp
   11a54:	mov	r8, #0
   11a58:	b	11a6c <rb_base64_encode@plt+0xa24>
   11a5c:	mov	r0, r4
   11a60:	bl	12128 <rb_base64_encode@plt+0x10e0>
   11a64:	cmp	r8, r7, lsr #14
   11a68:	beq	11ac8 <rb_base64_encode@plt+0xa80>
   11a6c:	ldrb	r0, [r4, #128]	; 0x80
   11a70:	tst	r0, #2
   11a74:	bne	11ae0 <rb_base64_encode@plt+0xa98>
   11a78:	mov	r0, r5
   11a7c:	mov	r1, r6
   11a80:	mov	r2, #16384	; 0x4000
   11a84:	bl	10ee0 <rb_read@plt>
   11a88:	cmn	r0, #1
   11a8c:	ble	11ae8 <rb_base64_encode@plt+0xaa0>
   11a90:	mov	r7, r0
   11a94:	cmp	r0, #0
   11a98:	beq	11b28 <rb_base64_encode@plt+0xae0>
   11a9c:	ldr	r0, [r4, #20]
   11aa0:	mov	r1, r6
   11aa4:	mov	r2, r7
   11aa8:	bl	11018 <rb_rawbuf_append@plt>
   11aac:	ldrb	r0, [r4, #128]	; 0x80
   11ab0:	tst	r0, #8
   11ab4:	bne	11a5c <rb_base64_encode@plt+0xa14>
   11ab8:	mov	r0, r4
   11abc:	bl	11f5c <rb_base64_encode@plt+0xf14>
   11ac0:	cmp	r8, r7, lsr #14
   11ac4:	bne	11a6c <rb_base64_encode@plt+0xa24>
   11ac8:	movw	r2, #6680	; 0x1a18
   11acc:	movt	r2, #1
   11ad0:	mov	r0, r5
   11ad4:	mov	r1, #1
   11ad8:	mov	r3, r4
   11adc:	bl	10e38 <rb_setselect@plt>
   11ae0:	sub	sp, fp, #24
   11ae4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   11ae8:	bl	1103c <__errno_location@plt>
   11aec:	ldr	r0, [r0]
   11af0:	bl	10e20 <rb_ignore_errno@plt>
   11af4:	cmp	r0, #0
   11af8:	beq	11b28 <rb_base64_encode@plt+0xae0>
   11afc:	movw	r2, #6680	; 0x1a18
   11b00:	movt	r2, #1
   11b04:	mov	r0, r5
   11b08:	mov	r1, #1
   11b0c:	mov	r3, r4
   11b10:	bl	10e38 <rb_setselect@plt>
   11b14:	ldr	r0, [r4, #88]	; 0x58
   11b18:	mov	r1, r4
   11b1c:	bl	11d38 <rb_base64_encode@plt+0xcf0>
   11b20:	sub	sp, fp, #24
   11b24:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   11b28:	movw	r2, #16903	; 0x4207
   11b2c:	movt	r2, #1
   11b30:	mov	r0, r4
   11b34:	mov	r1, #0
   11b38:	bl	11e00 <rb_base64_encode@plt+0xdb8>
   11b3c:	sub	sp, fp, #24
   11b40:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   11b44:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   11b48:	add	fp, sp, #24
   11b4c:	sub	sp, sp, #16384	; 0x4000
   11b50:	mov	r4, r1
   11b54:	mov	r0, sp
   11b58:	mov	r1, #0
   11b5c:	mov	r2, #16384	; 0x4000
   11b60:	bl	10e8c <memset@plt>
   11b64:	cmp	r4, #0
   11b68:	beq	11b88 <rb_base64_encode@plt+0xb40>
   11b6c:	ldrb	r0, [r4, #128]	; 0x80
   11b70:	tst	r0, #2
   11b74:	bne	11b88 <rb_base64_encode@plt+0xb40>
   11b78:	mov	r0, r4
   11b7c:	bl	128dc <rb_base64_encode@plt+0x1894>
   11b80:	cmp	r0, #0
   11b84:	beq	11b90 <rb_base64_encode@plt+0xb48>
   11b88:	sub	sp, fp, #24
   11b8c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   11b90:	add	r5, r4, #52	; 0x34
   11b94:	add	r7, r4, #112	; 0x70
   11b98:	mov	r6, sp
   11b9c:	ldrb	r0, [r4, #128]	; 0x80
   11ba0:	tst	r0, #2
   11ba4:	bne	11b88 <rb_base64_encode@plt+0xb40>
   11ba8:	ldr	r0, [r4, #88]	; 0x58
   11bac:	mov	r1, r6
   11bb0:	mov	r2, #16384	; 0x4000
   11bb4:	bl	10ee0 <rb_read@plt>
   11bb8:	cmp	r0, #0
   11bbc:	beq	11c54 <rb_base64_encode@plt+0xc0c>
   11bc0:	mov	r2, r0
   11bc4:	cmn	r0, #1
   11bc8:	ble	11c0c <rb_base64_encode@plt+0xbc4>
   11bcc:	ldrd	r0, [r7]
   11bd0:	adds	r0, r0, r2
   11bd4:	adc	r1, r1, r2, asr #31
   11bd8:	strd	r0, [r7]
   11bdc:	mov	r0, r5
   11be0:	mov	r1, r6
   11be4:	mov	r3, #0
   11be8:	bl	10ea4 <rb_linebuf_parse@plt>
   11bec:	ldrb	r0, [r4, #128]	; 0x80
   11bf0:	tst	r0, #2
   11bf4:	bne	11b88 <rb_base64_encode@plt+0xb40>
   11bf8:	mov	r0, r4
   11bfc:	bl	128dc <rb_base64_encode@plt+0x1894>
   11c00:	cmp	r0, #0
   11c04:	beq	11b9c <rb_base64_encode@plt+0xb54>
   11c08:	b	11b88 <rb_base64_encode@plt+0xb40>
   11c0c:	bl	1103c <__errno_location@plt>
   11c10:	ldr	r0, [r0]
   11c14:	bl	10e20 <rb_ignore_errno@plt>
   11c18:	cmp	r0, #0
   11c1c:	beq	11c54 <rb_base64_encode@plt+0xc0c>
   11c20:	ldr	r0, [r4, #88]	; 0x58
   11c24:	movw	r2, #6980	; 0x1b44
   11c28:	movt	r2, #1
   11c2c:	mov	r1, #1
   11c30:	mov	r3, r4
   11c34:	bl	10e38 <rb_setselect@plt>
   11c38:	ldrb	r0, [r4, #128]	; 0x80
   11c3c:	tst	r0, #8
   11c40:	beq	11b88 <rb_base64_encode@plt+0xb40>
   11c44:	mov	r0, r4
   11c48:	bl	121c0 <rb_base64_encode@plt+0x1178>
   11c4c:	sub	sp, fp, #24
   11c50:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   11c54:	mov	r0, r4
   11c58:	mov	r1, #0
   11c5c:	mov	r2, #0
   11c60:	bl	11e00 <rb_base64_encode@plt+0xdb8>
   11c64:	sub	sp, fp, #24
   11c68:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   11c6c:	push	{fp, lr}
   11c70:	mov	fp, sp
   11c74:	cmp	r0, #0
   11c78:	beq	11cd8 <rb_base64_encode@plt+0xc90>
   11c7c:	cmp	r1, #0
   11c80:	beq	11cf8 <rb_base64_encode@plt+0xcb0>
   11c84:	cmp	r2, #0
   11c88:	beq	11d18 <rb_base64_encode@plt+0xcd0>
   11c8c:	mov	r3, #0
   11c90:	stm	r1, {r0, r3}
   11c94:	ldr	r0, [r2]
   11c98:	str	r0, [r1, #8]
   11c9c:	ldr	r0, [r2]
   11ca0:	cmp	r0, #0
   11ca4:	beq	11cb4 <rb_base64_encode@plt+0xc6c>
   11ca8:	add	r0, r0, #4
   11cac:	str	r1, [r0]
   11cb0:	b	11cc4 <rb_base64_encode@plt+0xc7c>
   11cb4:	mov	r0, r2
   11cb8:	ldr	r3, [r0, #4]!
   11cbc:	cmp	r3, #0
   11cc0:	streq	r1, [r0]
   11cc4:	str	r1, [r2]
   11cc8:	ldr	r0, [r2, #8]
   11ccc:	add	r0, r0, #1
   11cd0:	str	r0, [r2, #8]
   11cd4:	pop	{fp, pc}
   11cd8:	movw	r0, #16831	; 0x41bf
   11cdc:	movt	r0, #1
   11ce0:	movw	r1, #16727	; 0x4157
   11ce4:	movt	r1, #1
   11ce8:	movw	r3, #16844	; 0x41cc
   11cec:	movt	r3, #1
   11cf0:	mov	r2, #143	; 0x8f
   11cf4:	bl	10e98 <__assert_fail@plt>
   11cf8:	movw	r0, #16717	; 0x414d
   11cfc:	movt	r0, #1
   11d00:	movw	r1, #16727	; 0x4157
   11d04:	movt	r1, #1
   11d08:	movw	r3, #16844	; 0x41cc
   11d0c:	movt	r3, #1
   11d10:	mov	r2, #144	; 0x90
   11d14:	bl	10e98 <__assert_fail@plt>
   11d18:	movw	r0, #16818	; 0x41b2
   11d1c:	movt	r0, #1
   11d20:	movw	r1, #16727	; 0x4157
   11d24:	movt	r1, #1
   11d28:	movw	r3, #16844	; 0x41cc
   11d2c:	movt	r3, #1
   11d30:	mov	r2, #145	; 0x91
   11d34:	bl	10e98 <__assert_fail@plt>
   11d38:	push	{r4, r5, r6, r7, fp, lr}
   11d3c:	add	fp, sp, #16
   11d40:	mov	r5, r0
   11d44:	ldrb	r0, [r1, #128]	; 0x80
   11d48:	tst	r0, #2
   11d4c:	popne	{r4, r5, r6, r7, fp, pc}
   11d50:	mov	r4, r1
   11d54:	add	r6, r1, #24
   11d58:	mov	r0, r5
   11d5c:	mov	r1, r6
   11d60:	bl	10f04 <rb_linebuf_flush@plt>
   11d64:	cmp	r0, #1
   11d68:	blt	11d94 <rb_base64_encode@plt+0xd4c>
   11d6c:	add	r7, r4, #120	; 0x78
   11d70:	ldrd	r2, [r7]
   11d74:	adds	r2, r2, r0
   11d78:	adc	r3, r3, r0, asr #31
   11d7c:	strd	r2, [r7]
   11d80:	mov	r0, r5
   11d84:	mov	r1, r6
   11d88:	bl	10f04 <rb_linebuf_flush@plt>
   11d8c:	cmp	r0, #0
   11d90:	bgt	11d70 <rb_base64_encode@plt+0xd28>
   11d94:	cmp	r0, #0
   11d98:	beq	11dd8 <rb_base64_encode@plt+0xd90>
   11d9c:	bl	1103c <__errno_location@plt>
   11da0:	ldr	r0, [r0]
   11da4:	bl	10e20 <rb_ignore_errno@plt>
   11da8:	cmp	r0, #0
   11dac:	beq	11dd8 <rb_base64_encode@plt+0xd90>
   11db0:	ldr	r1, [r4, #40]	; 0x28
   11db4:	ldr	r0, [r4, #88]	; 0x58
   11db8:	cmp	r1, #1
   11dbc:	blt	11dec <rb_base64_encode@plt+0xda4>
   11dc0:	movw	r2, #7480	; 0x1d38
   11dc4:	movt	r2, #1
   11dc8:	mov	r1, #2
   11dcc:	mov	r3, r4
   11dd0:	pop	{r4, r5, r6, r7, fp, lr}
   11dd4:	b	10e38 <rb_setselect@plt>
   11dd8:	mov	r0, r4
   11ddc:	mov	r1, #0
   11de0:	mov	r2, #0
   11de4:	pop	{r4, r5, r6, r7, fp, lr}
   11de8:	b	11e00 <rb_base64_encode@plt+0xdb8>
   11dec:	mov	r1, #2
   11df0:	mov	r2, #0
   11df4:	mov	r3, #0
   11df8:	pop	{r4, r5, r6, r7, fp, lr}
   11dfc:	b	10e38 <rb_setselect@plt>
   11e00:	sub	sp, sp, #4
   11e04:	push	{r4, r5, r6, sl, fp, lr}
   11e08:	add	fp, sp, #16
   11e0c:	sub	sp, sp, #388	; 0x184
   11e10:	mov	r4, r0
   11e14:	str	r3, [fp, #8]
   11e18:	ldrb	r0, [r0, #128]	; 0x80
   11e1c:	tst	r0, #2
   11e20:	bne	11f4c <rb_base64_encode@plt+0xf04>
   11e24:	mov	r5, r2
   11e28:	mov	r6, r1
   11e2c:	tst	r0, #8
   11e30:	movne	r0, r4
   11e34:	blne	121c0 <rb_base64_encode@plt+0x1178>
   11e38:	ldr	r0, [r4, #16]
   11e3c:	ldr	r1, [r4, #84]	; 0x54
   11e40:	bl	11024 <rb_rawbuf_flush@plt>
   11e44:	ldr	r0, [r4, #88]	; 0x58
   11e48:	add	r1, r4, #24
   11e4c:	bl	10f04 <rb_linebuf_flush@plt>
   11e50:	ldr	r0, [r4, #84]	; 0x54
   11e54:	bl	10f40 <rb_close@plt>
   11e58:	ldrb	r0, [r4, #128]	; 0x80
   11e5c:	orr	r0, r0, #2
   11e60:	strb	r0, [r4, #128]	; 0x80
   11e64:	ldr	r0, [r4, #80]	; 0x50
   11e68:	movw	r1, #19923	; 0x4dd3
   11e6c:	movt	r1, #4194	; 0x1062
   11e70:	umull	r1, r2, r0, r1
   11e74:	lsr	r1, r2, #7
   11e78:	mov	r2, #2000	; 0x7d0
   11e7c:	mls	r0, r1, r2, r0
   11e80:	add	r0, r0, r0, lsl #1
   11e84:	movw	r1, #20748	; 0x510c
   11e88:	movt	r1, #2
   11e8c:	add	r1, r1, r0, lsl #2
   11e90:	mov	r0, r4
   11e94:	bl	118d0 <rb_base64_encode@plt+0x888>
   11e98:	ldr	r0, [r4, #88]	; 0x58
   11e9c:	cmp	r6, #0
   11ea0:	cmpne	r5, #0
   11ea4:	bne	11ec4 <rb_base64_encode@plt+0xe7c>
   11ea8:	bl	10f40 <rb_close@plt>
   11eac:	movw	r2, #20736	; 0x5100
   11eb0:	movt	r2, #2
   11eb4:	mov	r0, r4
   11eb8:	mov	r1, r4
   11ebc:	bl	11c6c <rb_base64_encode@plt+0xc24>
   11ec0:	b	11f4c <rb_base64_encode@plt+0xf04>
   11ec4:	movw	r2, #8808	; 0x2268
   11ec8:	movt	r2, #1
   11ecc:	mov	r1, #1
   11ed0:	mov	r3, r4
   11ed4:	bl	10e38 <rb_setselect@plt>
   11ed8:	ldr	r0, [r4, #88]	; 0x58
   11edc:	mov	r1, #2
   11ee0:	mov	r2, #0
   11ee4:	mov	r3, #0
   11ee8:	bl	10e38 <rb_setselect@plt>
   11eec:	add	r3, fp, #8
   11ef0:	str	r3, [fp, #-20]	; 0xffffffec
   11ef4:	sub	r6, fp, #148	; 0x94
   11ef8:	mov	r0, r6
   11efc:	mov	r1, #128	; 0x80
   11f00:	mov	r2, r5
   11f04:	bl	10e5c <vsnprintf@plt>
   11f08:	mov	r0, #68	; 0x44
   11f0c:	strb	r0, [sp]
   11f10:	ldr	r1, [r4, #80]	; 0x50
   11f14:	mov	r5, sp
   11f18:	add	r0, r5, #1
   11f1c:	bl	122fc <rb_base64_encode@plt+0x12b4>
   11f20:	add	r0, r5, #5
   11f24:	mov	r1, r6
   11f28:	mov	r2, #251	; 0xfb
   11f2c:	bl	10eb0 <rb_strlcpy@plt>
   11f30:	mov	r0, r6
   11f34:	bl	10f10 <strlen@plt>
   11f38:	ldr	r1, [r4, #12]
   11f3c:	add	r2, r0, #6
   11f40:	mov	r0, r1
   11f44:	mov	r1, r5
   11f48:	bl	12304 <rb_base64_encode@plt+0x12bc>
   11f4c:	sub	sp, fp, #16
   11f50:	pop	{r4, r5, r6, sl, fp, lr}
   11f54:	add	sp, sp, #4
   11f58:	bx	lr
   11f5c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11f60:	add	fp, sp, #28
   11f64:	sub	sp, sp, #124	; 0x7c
   11f68:	sub	sp, sp, #16384	; 0x4000
   11f6c:	mov	r4, r0
   11f70:	add	r5, sp, #120	; 0x78
   11f74:	mov	r8, #0
   11f78:	mov	r0, r5
   11f7c:	mov	r1, #0
   11f80:	mov	r2, #16384	; 0x4000
   11f84:	bl	10e8c <memset@plt>
   11f88:	ldr	r0, [r4, #20]
   11f8c:	mov	r1, r5
   11f90:	mov	r2, #16384	; 0x4000
   11f94:	bl	10fa0 <rb_rawbuf_get@plt>
   11f98:	cmp	r0, #0
   11f9c:	beq	12064 <rb_base64_encode@plt+0x101c>
   11fa0:	movw	r0, #16366	; 0x3fee
   11fa4:	add	r7, r5, r0
   11fa8:	add	r6, r5, #16384	; 0x4000
   11fac:	add	sl, r4, #129	; 0x81
   11fb0:	movw	r9, #16971	; 0x424b
   11fb4:	movt	r9, #1
   11fb8:	b	11ff0 <rb_base64_encode@plt+0xfa8>
   11fbc:	strb	r8, [r0]
   11fc0:	mov	r0, sl
   11fc4:	mov	r2, #37	; 0x25
   11fc8:	bl	10eb0 <rb_strlcpy@plt>
   11fcc:	ldrb	r0, [r4, #128]	; 0x80
   11fd0:	orr	r0, r0, #8
   11fd4:	strb	r0, [r4, #128]	; 0x80
   11fd8:	ldr	r0, [r4, #20]
   11fdc:	mov	r1, r5
   11fe0:	mov	r2, #16384	; 0x4000
   11fe4:	bl	10fa0 <rb_rawbuf_get@plt>
   11fe8:	cmp	r0, #0
   11fec:	beq	12064 <rb_base64_encode@plt+0x101c>
   11ff0:	mov	r0, r5
   11ff4:	mov	r1, r9
   11ff8:	bl	10f34 <rb_strcasestr@plt>
   11ffc:	cmp	r0, #0
   12000:	beq	11fd8 <rb_base64_encode@plt+0xf90>
   12004:	add	r1, r0, #18
   12008:	cmp	r1, r6
   1200c:	bcs	12030 <rb_base64_encode@plt+0xfe8>
   12010:	ldrb	r1, [r0, #18]
   12014:	cmp	r1, #32
   12018:	cmpne	r1, #9
   1201c:	bne	1202c <rb_base64_encode@plt+0xfe4>
   12020:	add	r0, r0, #1
   12024:	cmp	r7, r0
   12028:	bne	12010 <rb_base64_encode@plt+0xfc8>
   1202c:	add	r1, r0, #18
   12030:	cmp	r1, r6
   12034:	bcs	11fc0 <rb_base64_encode@plt+0xf78>
   12038:	mov	r0, r1
   1203c:	ldrb	r2, [r0]
   12040:	cmp	r2, #0
   12044:	beq	11fc0 <rb_base64_encode@plt+0xf78>
   12048:	cmp	r2, #13
   1204c:	cmpne	r2, #10
   12050:	beq	11fbc <rb_base64_encode@plt+0xf74>
   12054:	add	r0, r0, #1
   12058:	cmp	r6, r0
   1205c:	bne	1203c <rb_base64_encode@plt+0xff4>
   12060:	b	11fc0 <rb_base64_encode@plt+0xf78>
   12064:	ldrb	r0, [r4, #128]	; 0x80
   12068:	tst	r0, #8
   1206c:	beq	12114 <rb_base64_encode@plt+0x10cc>
   12070:	add	r5, sp, #24
   12074:	mov	r0, r5
   12078:	bl	12940 <rb_base64_encode@plt+0x18f8>
   1207c:	add	r6, r4, #129	; 0x81
   12080:	mov	r0, r6
   12084:	bl	10f10 <strlen@plt>
   12088:	mov	r2, r0
   1208c:	mov	r0, r5
   12090:	mov	r1, r6
   12094:	bl	1298c <rb_base64_encode@plt+0x1944>
   12098:	movw	r1, #16990	; 0x425e
   1209c:	movt	r1, #1
   120a0:	mov	r0, r5
   120a4:	mov	r2, #36	; 0x24
   120a8:	bl	1298c <rb_base64_encode@plt+0x1944>
   120ac:	add	r6, sp, #4
   120b0:	mov	r0, r5
   120b4:	mov	r1, r6
   120b8:	bl	13f08 <rb_base64_encode@plt+0x2ec0>
   120bc:	mov	r0, r6
   120c0:	mov	r1, #20
   120c4:	bl	11048 <rb_base64_encode@plt>
   120c8:	mov	r5, r0
   120cc:	movw	r1, #17027	; 0x4283
   120d0:	movt	r1, #1
   120d4:	mov	r0, r4
   120d8:	mov	r2, #129	; 0x81
   120dc:	bl	125dc <rb_base64_encode@plt+0x1594>
   120e0:	mov	r0, r5
   120e4:	bl	10f10 <strlen@plt>
   120e8:	mov	r2, r0
   120ec:	mov	r0, r4
   120f0:	mov	r1, r5
   120f4:	bl	125dc <rb_base64_encode@plt+0x1594>
   120f8:	movw	r1, #17157	; 0x4305
   120fc:	movt	r1, #1
   12100:	mov	r0, r4
   12104:	mov	r2, #4
   12108:	bl	125dc <rb_base64_encode@plt+0x1594>
   1210c:	mov	r0, r5
   12110:	bl	1168c <rb_base64_encode@plt+0x644>
   12114:	ldr	r0, [r4, #84]	; 0x54
   12118:	mov	r1, r4
   1211c:	bl	12384 <rb_base64_encode@plt+0x133c>
   12120:	sub	sp, fp, #28
   12124:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12128:	push	{r4, r5, fp, lr}
   1212c:	add	fp, sp, #8
   12130:	sub	sp, sp, #8
   12134:	mov	r4, r0
   12138:	ldr	r0, [r0, #20]
   1213c:	add	r1, sp, #4
   12140:	mov	r2, #2
   12144:	bl	10fa0 <rb_rawbuf_get@plt>
   12148:	cmp	r0, #2
   1214c:	bne	121ac <rb_base64_encode@plt+0x1164>
   12150:	add	r5, sp, #4
   12154:	b	1217c <rb_base64_encode@plt+0x1134>
   12158:	mov	r0, r4
   1215c:	mov	r1, r5
   12160:	bl	127f8 <rb_base64_encode@plt+0x17b0>
   12164:	ldr	r0, [r4, #20]
   12168:	mov	r1, r5
   1216c:	mov	r2, #2
   12170:	bl	10fa0 <rb_rawbuf_get@plt>
   12174:	cmp	r0, #2
   12178:	bne	121ac <rb_base64_encode@plt+0x1164>
   1217c:	ldrb	r1, [sp, #5]
   12180:	and	r0, r1, #127	; 0x7f
   12184:	strb	r0, [sp, #5]
   12188:	cmp	r0, #127	; 0x7f
   1218c:	beq	12164 <rb_base64_encode@plt+0x111c>
   12190:	lsr	r2, r1, #7
   12194:	cmp	r0, #126	; 0x7e
   12198:	bne	12158 <rb_base64_encode@plt+0x1110>
   1219c:	mov	r0, r4
   121a0:	mov	r1, r2
   121a4:	bl	1270c <rb_base64_encode@plt+0x16c4>
   121a8:	b	12164 <rb_base64_encode@plt+0x111c>
   121ac:	ldr	r0, [r4, #88]	; 0x58
   121b0:	mov	r1, r4
   121b4:	bl	11d38 <rb_base64_encode@plt+0xcf0>
   121b8:	sub	sp, fp, #8
   121bc:	pop	{r4, r5, fp, pc}
   121c0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   121c4:	add	fp, sp, #24
   121c8:	sub	sp, sp, #8
   121cc:	sub	sp, sp, #16384	; 0x4000
   121d0:	mov	r4, r0
   121d4:	add	r6, sp, #8
   121d8:	mov	r7, #0
   121dc:	mov	r0, r6
   121e0:	mov	r1, #0
   121e4:	mov	r2, #16384	; 0x4000
   121e8:	bl	10e8c <memset@plt>
   121ec:	str	r7, [sp]
   121f0:	add	r5, r4, #52	; 0x34
   121f4:	mov	r0, r5
   121f8:	mov	r1, r6
   121fc:	mov	r2, #16384	; 0x4000
   12200:	mov	r3, #0
   12204:	bl	10ef8 <rb_linebuf_get@plt>
   12208:	cmp	r0, #0
   1220c:	beq	12248 <rb_base64_encode@plt+0x1200>
   12210:	mov	r2, r0
   12214:	add	r6, sp, #8
   12218:	mov	r0, r4
   1221c:	mov	r1, r6
   12220:	bl	12368 <rb_base64_encode@plt+0x1320>
   12224:	str	r7, [sp]
   12228:	mov	r0, r5
   1222c:	mov	r1, r6
   12230:	mov	r2, #16384	; 0x4000
   12234:	mov	r3, #0
   12238:	bl	10ef8 <rb_linebuf_get@plt>
   1223c:	mov	r2, r0
   12240:	cmp	r0, #0
   12244:	bne	12218 <rb_base64_encode@plt+0x11d0>
   12248:	ldrb	r0, [r4, #128]	; 0x80
   1224c:	tst	r0, #8
   12250:	beq	12260 <rb_base64_encode@plt+0x1218>
   12254:	ldr	r0, [r4, #84]	; 0x54
   12258:	mov	r1, r4
   1225c:	bl	12384 <rb_base64_encode@plt+0x133c>
   12260:	sub	sp, fp, #24
   12264:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12268:	push	{r4, r5, r6, r7, fp, lr}
   1226c:	add	fp, sp, #16
   12270:	sub	sp, sp, #16384	; 0x4000
   12274:	cmp	r1, #0
   12278:	beq	122d0 <rb_base64_encode@plt+0x1288>
   1227c:	mov	r4, r1
   12280:	mov	r5, sp
   12284:	ldr	r0, [r4, #88]	; 0x58
   12288:	mov	r1, r5
   1228c:	mov	r2, #16384	; 0x4000
   12290:	bl	10ee0 <rb_read@plt>
   12294:	cmp	r0, #0
   12298:	beq	122d8 <rb_base64_encode@plt+0x1290>
   1229c:	cmn	r0, #1
   122a0:	bgt	12284 <rb_base64_encode@plt+0x123c>
   122a4:	bl	1103c <__errno_location@plt>
   122a8:	ldr	r0, [r0]
   122ac:	bl	10e20 <rb_ignore_errno@plt>
   122b0:	cmp	r0, #0
   122b4:	beq	122d8 <rb_base64_encode@plt+0x1290>
   122b8:	ldr	r0, [r4, #88]	; 0x58
   122bc:	movw	r2, #8808	; 0x2268
   122c0:	movt	r2, #1
   122c4:	mov	r1, #1
   122c8:	mov	r3, r4
   122cc:	bl	10e38 <rb_setselect@plt>
   122d0:	sub	sp, fp, #16
   122d4:	pop	{r4, r5, r6, r7, fp, pc}
   122d8:	ldr	r0, [r4, #88]	; 0x58
   122dc:	bl	10f40 <rb_close@plt>
   122e0:	movw	r2, #20736	; 0x5100
   122e4:	movt	r2, #2
   122e8:	mov	r0, r4
   122ec:	mov	r1, r4
   122f0:	bl	11c6c <rb_base64_encode@plt+0xc24>
   122f4:	sub	sp, fp, #16
   122f8:	pop	{r4, r5, r6, r7, fp, pc}
   122fc:	str	r1, [r0]
   12300:	bx	lr
   12304:	push	{r4, r5, r6, r7, fp, lr}
   12308:	add	fp, sp, #16
   1230c:	mov	r4, r2
   12310:	mov	r5, r1
   12314:	mov	r6, r0
   12318:	mov	r0, #40	; 0x28
   1231c:	bl	11480 <rb_base64_encode@plt+0x438>
   12320:	mov	r7, r0
   12324:	mov	r0, r4
   12328:	bl	11480 <rb_base64_encode@plt+0x438>
   1232c:	str	r0, [r7, #12]
   12330:	str	r4, [r7, #16]
   12334:	mov	r1, r5
   12338:	mov	r2, r4
   1233c:	bl	10f1c <memcpy@plt>
   12340:	mov	r0, #0
   12344:	str	r0, [r7, #36]	; 0x24
   12348:	add	r2, r6, #36	; 0x24
   1234c:	mov	r0, r7
   12350:	mov	r1, r7
   12354:	bl	11698 <rb_base64_encode@plt+0x650>
   12358:	ldr	r0, [r6, #16]
   1235c:	mov	r1, r6
   12360:	pop	{r4, r5, r6, r7, fp, lr}
   12364:	b	125f8 <rb_base64_encode@plt+0x15b0>
   12368:	ldrb	r3, [r0, #128]	; 0x80
   1236c:	tst	r3, #2
   12370:	bxne	lr
   12374:	cmp	r2, #122	; 0x7a
   12378:	bgt	12380 <rb_base64_encode@plt+0x1338>
   1237c:	b	124b4 <rb_base64_encode@plt+0x146c>
   12380:	b	12530 <rb_base64_encode@plt+0x14e8>
   12384:	push	{r4, r5, r6, sl, fp, lr}
   12388:	add	fp, sp, #16
   1238c:	mov	r5, r0
   12390:	ldrb	r0, [r1, #128]	; 0x80
   12394:	tst	r0, #2
   12398:	bne	12494 <rb_base64_encode@plt+0x144c>
   1239c:	mov	r4, r1
   123a0:	ldr	r0, [r1, #16]
   123a4:	mov	r1, r5
   123a8:	bl	11024 <rb_rawbuf_flush@plt>
   123ac:	cmp	r0, #1
   123b0:	blt	123dc <rb_base64_encode@plt+0x1394>
   123b4:	add	r6, r4, #96	; 0x60
   123b8:	ldrd	r2, [r6]
   123bc:	adds	r2, r2, r0
   123c0:	adc	r3, r3, r0, asr #31
   123c4:	strd	r2, [r6]
   123c8:	ldr	r0, [r4, #16]
   123cc:	mov	r1, r5
   123d0:	bl	11024 <rb_rawbuf_flush@plt>
   123d4:	cmp	r0, #0
   123d8:	bgt	123b8 <rb_base64_encode@plt+0x1370>
   123dc:	cmp	r0, #0
   123e0:	beq	12424 <rb_base64_encode@plt+0x13dc>
   123e4:	bl	1103c <__errno_location@plt>
   123e8:	ldr	r0, [r0]
   123ec:	bl	10e20 <rb_ignore_errno@plt>
   123f0:	cmp	r0, #0
   123f4:	beq	12440 <rb_base64_encode@plt+0x13f8>
   123f8:	ldr	r0, [r4, #16]
   123fc:	bl	10f64 <rb_rawbuf_length@plt>
   12400:	mov	r1, r0
   12404:	ldr	r0, [r4, #84]	; 0x54
   12408:	cmp	r1, #1
   1240c:	blt	12468 <rb_base64_encode@plt+0x1420>
   12410:	movw	r2, #9092	; 0x2384
   12414:	movt	r2, #1
   12418:	mov	r1, #2
   1241c:	mov	r3, r4
   12420:	b	12474 <rb_base64_encode@plt+0x142c>
   12424:	movw	r2, #16934	; 0x4226
   12428:	movt	r2, #1
   1242c:	movw	r3, #16937	; 0x4229
   12430:	movt	r3, #1
   12434:	mov	r0, r4
   12438:	mov	r1, #1
   1243c:	bl	11e00 <rb_base64_encode@plt+0xdb8>
   12440:	bl	1103c <__errno_location@plt>
   12444:	ldr	r0, [r0]
   12448:	bl	10df0 <strerror@plt>
   1244c:	mov	r3, r0
   12450:	movw	r2, #16921	; 0x4219
   12454:	movt	r2, #1
   12458:	mov	r0, r4
   1245c:	mov	r1, #1
   12460:	pop	{r4, r5, r6, sl, fp, lr}
   12464:	b	11e00 <rb_base64_encode@plt+0xdb8>
   12468:	mov	r1, #2
   1246c:	mov	r2, #0
   12470:	mov	r3, #0
   12474:	bl	10e38 <rb_setselect@plt>
   12478:	ldrb	r0, [r4, #128]	; 0x80
   1247c:	tst	r0, #1
   12480:	popeq	{r4, r5, r6, sl, fp, pc}
   12484:	ldr	r0, [r4, #16]
   12488:	bl	10f64 <rb_rawbuf_length@plt>
   1248c:	cmp	r0, #0
   12490:	beq	12498 <rb_base64_encode@plt+0x1450>
   12494:	pop	{r4, r5, r6, sl, fp, pc}
   12498:	ldrb	r0, [r4, #128]	; 0x80
   1249c:	and	r0, r0, #254	; 0xfe
   124a0:	strb	r0, [r4, #128]	; 0x80
   124a4:	ldr	r0, [r4, #88]	; 0x58
   124a8:	mov	r1, r4
   124ac:	pop	{r4, r5, r6, sl, fp, lr}
   124b0:	b	11b44 <rb_base64_encode@plt+0xafc>
   124b4:	push	{r4, r5, r6, r7, fp, lr}
   124b8:	add	fp, sp, #16
   124bc:	sub	sp, sp, #8
   124c0:	mov	r4, r2
   124c4:	mov	r5, r1
   124c8:	mov	r6, r0
   124cc:	mov	r0, #0
   124d0:	strh	r0, [sp, #6]
   124d4:	add	r7, sp, #6
   124d8:	mov	r0, r7
   124dc:	bl	125b8 <rb_base64_encode@plt+0x1570>
   124e0:	mov	r0, r7
   124e4:	bl	125cc <rb_base64_encode@plt+0x1584>
   124e8:	add	r0, r4, #2
   124ec:	and	r0, r0, #127	; 0x7f
   124f0:	strb	r0, [sp, #7]
   124f4:	mov	r0, r6
   124f8:	mov	r1, r7
   124fc:	mov	r2, #2
   12500:	bl	125dc <rb_base64_encode@plt+0x1594>
   12504:	mov	r0, r6
   12508:	mov	r1, r5
   1250c:	mov	r2, r4
   12510:	bl	125dc <rb_base64_encode@plt+0x1594>
   12514:	movw	r1, #17159	; 0x4307
   12518:	movt	r1, #1
   1251c:	mov	r0, r6
   12520:	mov	r2, #2
   12524:	bl	125dc <rb_base64_encode@plt+0x1594>
   12528:	sub	sp, fp, #16
   1252c:	pop	{r4, r5, r6, r7, fp, pc}
   12530:	push	{r4, r5, r6, r7, fp, lr}
   12534:	add	fp, sp, #16
   12538:	sub	sp, sp, #8
   1253c:	mov	r5, r2
   12540:	mov	r6, r1
   12544:	mov	r4, r0
   12548:	mov	r0, #0
   1254c:	str	r0, [sp, #4]
   12550:	add	r7, sp, #4
   12554:	mov	r0, r7
   12558:	bl	125b8 <rb_base64_encode@plt+0x1570>
   1255c:	mov	r0, r7
   12560:	bl	125cc <rb_base64_encode@plt+0x1584>
   12564:	mov	r0, #126	; 0x7e
   12568:	strb	r0, [sp, #5]
   1256c:	add	r0, r5, #2
   12570:	uxth	r0, r0
   12574:	bl	125f0 <rb_base64_encode@plt+0x15a8>
   12578:	strh	r0, [sp, #6]
   1257c:	mov	r0, r4
   12580:	mov	r1, r7
   12584:	mov	r2, #4
   12588:	bl	125dc <rb_base64_encode@plt+0x1594>
   1258c:	mov	r0, r4
   12590:	mov	r1, r6
   12594:	mov	r2, r5
   12598:	bl	125dc <rb_base64_encode@plt+0x1594>
   1259c:	movw	r1, #17159	; 0x4307
   125a0:	movt	r1, #1
   125a4:	mov	r0, r4
   125a8:	mov	r2, #2
   125ac:	bl	125dc <rb_base64_encode@plt+0x1594>
   125b0:	sub	sp, fp, #16
   125b4:	pop	{r4, r5, r6, r7, fp, pc}
   125b8:	ldrb	r1, [r0]
   125bc:	and	r1, r1, #240	; 0xf0
   125c0:	orr	r1, r1, #1
   125c4:	strb	r1, [r0]
   125c8:	bx	lr
   125cc:	ldrb	r1, [r0]
   125d0:	orr	r1, r1, #128	; 0x80
   125d4:	strb	r1, [r0]
   125d8:	bx	lr
   125dc:	ldrb	r3, [r0, #128]	; 0x80
   125e0:	tst	r3, #2
   125e4:	bxne	lr
   125e8:	ldr	r0, [r0, #16]
   125ec:	b	11018 <rb_rawbuf_append@plt>
   125f0:	rev16	r0, r0
   125f4:	bx	lr
   125f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   125fc:	add	fp, sp, #28
   12600:	sub	sp, sp, #12
   12604:	mov	r9, r1
   12608:	mov	r8, r1
   1260c:	ldr	r4, [r8, #36]!	; 0x24
   12610:	cmp	r4, #0
   12614:	bne	12628 <rb_base64_encode@plt+0x15e0>
   12618:	b	126d8 <rb_base64_encode@plt+0x1690>
   1261c:	cmp	sl, #0
   12620:	mov	r4, sl
   12624:	beq	126d8 <rb_base64_encode@plt+0x1690>
   12628:	ldr	r0, [r9, #16]
   1262c:	ldr	r6, [r4]
   12630:	ldr	sl, [r4, #8]
   12634:	ldr	r3, [r6, #12]
   12638:	ldr	r1, [r6, #16]
   1263c:	ldr	r2, [r6, #36]	; 0x24
   12640:	movw	r7, #20728	; 0x50f8
   12644:	movt	r7, #2
   12648:	ldr	r7, [r7]
   1264c:	stm	sp, {r1, r7}
   12650:	add	r5, r6, #20
   12654:	mov	r1, r5
   12658:	bl	10e50 <rb_send_fd_buf@plt>
   1265c:	mov	r7, r0
   12660:	cmp	r0, #1
   12664:	blt	126ac <rb_base64_encode@plt+0x1664>
   12668:	mov	r0, r4
   1266c:	mov	r1, r8
   12670:	bl	118d0 <rb_base64_encode@plt+0x888>
   12674:	ldr	r0, [r6, #36]	; 0x24
   12678:	cmp	r0, #1
   1267c:	blt	1269c <rb_base64_encode@plt+0x1654>
   12680:	mov	r4, #0
   12684:	ldr	r0, [r5, r4, lsl #2]
   12688:	bl	10f40 <rb_close@plt>
   1268c:	add	r4, r4, #1
   12690:	ldr	r0, [r6, #36]	; 0x24
   12694:	cmp	r4, r0
   12698:	blt	12684 <rb_base64_encode@plt+0x163c>
   1269c:	ldr	r0, [r6, #12]
   126a0:	bl	1168c <rb_base64_encode@plt+0x644>
   126a4:	mov	r0, r6
   126a8:	bl	1168c <rb_base64_encode@plt+0x644>
   126ac:	cmp	r7, #0
   126b0:	beq	126d0 <rb_base64_encode@plt+0x1688>
   126b4:	cmn	r7, #1
   126b8:	bgt	1261c <rb_base64_encode@plt+0x15d4>
   126bc:	bl	1103c <__errno_location@plt>
   126c0:	ldr	r0, [r0]
   126c4:	bl	10e20 <rb_ignore_errno@plt>
   126c8:	cmp	r0, #0
   126cc:	bne	1261c <rb_base64_encode@plt+0x15d4>
   126d0:	mov	r0, #0
   126d4:	bl	11030 <exit@plt>
   126d8:	ldr	r0, [r9, #44]	; 0x2c
   126dc:	cmp	r0, #0
   126e0:	beq	12704 <rb_base64_encode@plt+0x16bc>
   126e4:	ldr	r0, [r9, #16]
   126e8:	movw	r2, #9720	; 0x25f8
   126ec:	movt	r2, #1
   126f0:	mov	r1, #2
   126f4:	mov	r3, r9
   126f8:	sub	sp, fp, #28
   126fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12700:	b	10e38 <rb_setselect@plt>
   12704:	sub	sp, fp, #28
   12708:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1270c:	push	{r4, r5, r6, sl, fp, lr}
   12710:	add	fp, sp, #16
   12714:	sub	sp, sp, #8
   12718:	sub	sp, sp, #16384	; 0x4000
   1271c:	mov	r5, r1
   12720:	mov	r4, r0
   12724:	add	r0, sp, #8
   12728:	mov	r1, #0
   1272c:	mov	r2, #16384	; 0x4000
   12730:	bl	10e8c <memset@plt>
   12734:	ldr	r0, [r4, #20]
   12738:	add	r1, sp, #6
   1273c:	mov	r2, #2
   12740:	bl	10fa0 <rb_rawbuf_get@plt>
   12744:	cmp	r0, #0
   12748:	beq	127c4 <rb_base64_encode@plt+0x177c>
   1274c:	ldrh	r0, [sp, #6]
   12750:	bl	125f0 <rb_base64_encode@plt+0x15a8>
   12754:	strh	r0, [sp, #6]
   12758:	cmp	r5, #0
   1275c:	beq	12778 <rb_base64_encode@plt+0x1730>
   12760:	ldr	r0, [r4, #20]
   12764:	add	r1, sp, #2
   12768:	mov	r2, #4
   1276c:	bl	10fa0 <rb_rawbuf_get@plt>
   12770:	cmp	r0, #0
   12774:	beq	127dc <rb_base64_encode@plt+0x1794>
   12778:	ldr	r0, [r4, #20]
   1277c:	ldrh	r2, [sp, #6]
   12780:	add	r1, sp, #8
   12784:	bl	10fa0 <rb_rawbuf_get@plt>
   12788:	cmp	r0, #0
   1278c:	beq	127d0 <rb_base64_encode@plt+0x1788>
   12790:	mov	r6, r0
   12794:	cmp	r5, #0
   12798:	addne	r0, sp, #8
   1279c:	addne	r2, sp, #2
   127a0:	movne	r1, r6
   127a4:	blne	128a4 <rb_base64_encode@plt+0x185c>
   127a8:	add	r0, r4, #24
   127ac:	add	r1, sp, #8
   127b0:	mov	r2, r6
   127b4:	mov	r3, #1
   127b8:	bl	10ea4 <rb_linebuf_parse@plt>
   127bc:	sub	sp, fp, #16
   127c0:	pop	{r4, r5, r6, sl, fp, pc}
   127c4:	movw	r2, #17162	; 0x430a
   127c8:	movt	r2, #1
   127cc:	b	127e4 <rb_base64_encode@plt+0x179c>
   127d0:	movw	r2, #17252	; 0x4364
   127d4:	movt	r2, #1
   127d8:	b	127e4 <rb_base64_encode@plt+0x179c>
   127dc:	movw	r2, #17208	; 0x4338
   127e0:	movt	r2, #1
   127e4:	mov	r0, r4
   127e8:	mov	r1, #1
   127ec:	bl	11e00 <rb_base64_encode@plt+0xdb8>
   127f0:	sub	sp, fp, #16
   127f4:	pop	{r4, r5, r6, sl, fp, pc}
   127f8:	push	{r4, r5, r6, sl, fp, lr}
   127fc:	add	fp, sp, #16
   12800:	sub	sp, sp, #136	; 0x88
   12804:	mov	r5, r2
   12808:	mov	r6, r1
   1280c:	mov	r4, r0
   12810:	cmp	r2, #0
   12814:	beq	12830 <rb_base64_encode@plt+0x17e8>
   12818:	ldr	r0, [r4, #20]
   1281c:	add	r1, sp, #7
   12820:	mov	r2, #4
   12824:	bl	10fa0 <rb_rawbuf_get@plt>
   12828:	cmp	r0, #0
   1282c:	beq	12888 <rb_base64_encode@plt+0x1840>
   12830:	ldrb	r2, [r6, #1]
   12834:	ldr	r0, [r4, #20]
   12838:	add	r1, sp, #11
   1283c:	bl	10fa0 <rb_rawbuf_get@plt>
   12840:	cmp	r0, #0
   12844:	beq	1287c <rb_base64_encode@plt+0x1834>
   12848:	mov	r6, r0
   1284c:	cmp	r5, #0
   12850:	addne	r0, sp, #11
   12854:	addne	r2, sp, #7
   12858:	movne	r1, r6
   1285c:	blne	128a4 <rb_base64_encode@plt+0x185c>
   12860:	add	r0, r4, #24
   12864:	add	r1, sp, #11
   12868:	mov	r2, r6
   1286c:	mov	r3, #1
   12870:	bl	10ea4 <rb_linebuf_parse@plt>
   12874:	sub	sp, fp, #16
   12878:	pop	{r4, r5, r6, sl, fp, pc}
   1287c:	movw	r2, #17252	; 0x4364
   12880:	movt	r2, #1
   12884:	b	12890 <rb_base64_encode@plt+0x1848>
   12888:	movw	r2, #17208	; 0x4338
   1288c:	movt	r2, #1
   12890:	mov	r0, r4
   12894:	mov	r1, #1
   12898:	bl	11e00 <rb_base64_encode@plt+0xdb8>
   1289c:	sub	sp, fp, #16
   128a0:	pop	{r4, r5, r6, sl, fp, pc}
   128a4:	push	{fp, lr}
   128a8:	mov	fp, sp
   128ac:	cmp	r1, #1
   128b0:	poplt	{fp, pc}
   128b4:	mov	lr, #0
   128b8:	ldrb	ip, [r0, lr]
   128bc:	and	r3, lr, #3
   128c0:	ldrb	r3, [r2, r3]
   128c4:	eor	r3, r3, ip
   128c8:	strb	r3, [r0, lr]
   128cc:	add	lr, lr, #1
   128d0:	cmp	r1, lr
   128d4:	bne	128b8 <rb_base64_encode@plt+0x1870>
   128d8:	pop	{fp, pc}
   128dc:	push	{r4, r5, fp, lr}
   128e0:	add	fp, sp, #8
   128e4:	mov	r4, r0
   128e8:	ldr	r0, [r0, #16]
   128ec:	bl	10f64 <rb_rawbuf_length@plt>
   128f0:	mov	r5, #0
   128f4:	cmp	r0, #4096	; 0x1000
   128f8:	blt	12938 <rb_base64_encode@plt+0x18f0>
   128fc:	ldrb	r0, [r4, #128]	; 0x80
   12900:	orr	r0, r0, #1
   12904:	strb	r0, [r4, #128]	; 0x80
   12908:	ldr	r0, [r4, #88]	; 0x58
   1290c:	mov	r5, #1
   12910:	mov	r1, #1
   12914:	mov	r2, #0
   12918:	mov	r3, #0
   1291c:	bl	10e38 <rb_setselect@plt>
   12920:	ldrb	r0, [r4, #128]	; 0x80
   12924:	tst	r0, #8
   12928:	beq	12938 <rb_base64_encode@plt+0x18f0>
   1292c:	ldr	r0, [r4, #84]	; 0x54
   12930:	mov	r1, r4
   12934:	bl	12384 <rb_base64_encode@plt+0x133c>
   12938:	mov	r0, r5
   1293c:	pop	{r4, r5, fp, pc}
   12940:	push	{fp, lr}
   12944:	mov	fp, sp
   12948:	mov	r1, #0
   1294c:	str	r1, [r0, #24]
   12950:	str	r1, [r0, #28]
   12954:	movw	ip, #57840	; 0xe1f0
   12958:	movt	ip, #50130	; 0xc3d2
   1295c:	movw	lr, #21622	; 0x5476
   12960:	movt	lr, #4146	; 0x1032
   12964:	movw	r3, #56574	; 0xdcfe
   12968:	movt	r3, #39098	; 0x98ba
   1296c:	movw	r1, #43913	; 0xab89
   12970:	movt	r1, #61389	; 0xefcd
   12974:	movw	r2, #8961	; 0x2301
   12978:	movt	r2, #26437	; 0x6745
   1297c:	str	r2, [r0]
   12980:	stmib	r0, {r1, r3, lr}
   12984:	str	ip, [r0, #16]
   12988:	pop	{fp, pc}
   1298c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12990:	add	fp, sp, #24
   12994:	mov	r4, r2
   12998:	mov	r6, r1
   1299c:	mov	r5, r0
   129a0:	ldrd	r0, [r0, #24]
   129a4:	adds	r2, r0, r2, lsl #3
   129a8:	adc	r3, r1, #0
   129ac:	strd	r2, [r5, #24]
   129b0:	ubfx	r9, r0, #3, #6
   129b4:	add	r0, r9, r4
   129b8:	cmp	r0, #64	; 0x40
   129bc:	bcc	12a1c <rb_base64_encode@plt+0x19d4>
   129c0:	add	r8, r5, #32
   129c4:	add	r0, r8, r9
   129c8:	rsb	r7, r9, #64	; 0x40
   129cc:	mov	r1, r6
   129d0:	mov	r2, r7
   129d4:	bl	10f1c <memcpy@plt>
   129d8:	mov	r0, r5
   129dc:	mov	r1, r8
   129e0:	bl	12a38 <rb_base64_encode@plt+0x19f0>
   129e4:	eor	r0, r9, #127	; 0x7f
   129e8:	mov	r9, #0
   129ec:	cmp	r0, r4
   129f0:	bcs	12a20 <rb_base64_encode@plt+0x19d8>
   129f4:	add	r1, r6, r7
   129f8:	mov	r0, r5
   129fc:	bl	12a38 <rb_base64_encode@plt+0x19f0>
   12a00:	add	r0, r7, #64	; 0x40
   12a04:	add	r1, r7, #127	; 0x7f
   12a08:	cmp	r1, r4
   12a0c:	mov	r7, r0
   12a10:	bcc	129f4 <rb_base64_encode@plt+0x19ac>
   12a14:	mov	r7, r0
   12a18:	b	12a20 <rb_base64_encode@plt+0x19d8>
   12a1c:	mov	r7, #0
   12a20:	add	r1, r6, r7
   12a24:	sub	r2, r4, r7
   12a28:	add	r0, r5, r9
   12a2c:	add	r0, r0, #32
   12a30:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   12a34:	b	10f1c <memcpy@plt>
   12a38:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12a3c:	add	fp, sp, #28
   12a40:	sub	sp, sp, #164	; 0xa4
   12a44:	mov	r2, r0
   12a48:	ldr	r0, [r1, #60]	; 0x3c
   12a4c:	str	r0, [fp, #-40]	; 0xffffffd8
   12a50:	ldr	r0, [r1, #56]	; 0x38
   12a54:	str	r0, [fp, #-36]	; 0xffffffdc
   12a58:	ldr	r0, [r1, #52]	; 0x34
   12a5c:	str	r0, [fp, #-32]	; 0xffffffe0
   12a60:	ldr	r0, [r1, #48]	; 0x30
   12a64:	str	r0, [fp, #-64]	; 0xffffffc0
   12a68:	ldr	r0, [r1, #44]	; 0x2c
   12a6c:	str	r0, [fp, #-68]	; 0xffffffbc
   12a70:	ldr	r0, [r1, #40]	; 0x28
   12a74:	str	r0, [fp, #-56]	; 0xffffffc8
   12a78:	ldr	r0, [r1, #36]	; 0x24
   12a7c:	str	r0, [fp, #-48]	; 0xffffffd0
   12a80:	ldr	r0, [r1, #32]
   12a84:	str	r0, [fp, #-44]	; 0xffffffd4
   12a88:	ldr	r0, [r1, #28]
   12a8c:	str	r0, [fp, #-72]	; 0xffffffb8
   12a90:	ldr	r0, [r1, #24]
   12a94:	str	r0, [fp, #-76]	; 0xffffffb4
   12a98:	ldr	r0, [r1, #20]
   12a9c:	str	r0, [fp, #-88]	; 0xffffffa8
   12aa0:	ldr	r0, [r1, #16]
   12aa4:	str	r0, [fp, #-92]	; 0xffffffa4
   12aa8:	ldr	r0, [r1]
   12aac:	ldr	r3, [r1, #4]
   12ab0:	str	r3, [fp, #-60]	; 0xffffffc4
   12ab4:	ldr	r3, [r1, #8]
   12ab8:	str	r3, [fp, #-80]	; 0xffffffb0
   12abc:	ldr	r1, [r1, #12]
   12ac0:	str	r1, [fp, #-84]	; 0xffffffac
   12ac4:	str	r2, [sp, #84]	; 0x54
   12ac8:	ldm	r2, {r7, r8}
   12acc:	ldr	r6, [r2, #8]
   12ad0:	ldr	r5, [r2, #12]
   12ad4:	ldr	r1, [r2, #16]
   12ad8:	str	r1, [sp, #80]	; 0x50
   12adc:	add	r4, r1, r7, ror #27
   12ae0:	bl	1401c <rb_base64_encode@plt+0x2fd4>
   12ae4:	str	r0, [fp, #-52]	; 0xffffffcc
   12ae8:	add	r2, r4, r0
   12aec:	eor	r1, r5, r6
   12af0:	and	r1, r1, r8
   12af4:	eor	r1, r1, r5
   12af8:	str	r5, [sp, #68]	; 0x44
   12afc:	add	r0, r2, r1
   12b00:	movw	sl, #31129	; 0x7999
   12b04:	movt	sl, #23170	; 0x5a82
   12b08:	add	r9, r0, sl
   12b0c:	eor	r0, r6, r8, ror #2
   12b10:	and	r0, r0, r7
   12b14:	eor	r4, r0, r6
   12b18:	str	r6, [sp, #72]	; 0x48
   12b1c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   12b20:	bl	1401c <rb_base64_encode@plt+0x2fd4>
   12b24:	str	r0, [fp, #-60]	; 0xffffffc4
   12b28:	add	r1, r5, r0
   12b2c:	add	r0, r1, r4
   12b30:	add	r0, r0, r9, ror #27
   12b34:	add	r5, r0, sl
   12b38:	ror	r0, r8, #2
   12b3c:	eor	r0, r0, r7, ror #2
   12b40:	and	r0, r9, r0
   12b44:	eor	r4, r0, r8, ror #2
   12b48:	str	r8, [sp, #76]	; 0x4c
   12b4c:	ldr	r0, [fp, #-80]	; 0xffffffb0
   12b50:	bl	1401c <rb_base64_encode@plt+0x2fd4>
   12b54:	str	r0, [fp, #-80]	; 0xffffffb0
   12b58:	add	r1, r6, r0
   12b5c:	add	r0, r1, r4
   12b60:	add	r0, r0, r5, ror #27
   12b64:	add	r6, r0, sl
   12b68:	ror	r0, r9, #2
   12b6c:	eor	r0, r0, r7, ror #2
   12b70:	and	r0, r5, r0
   12b74:	eor	sl, r0, r7, ror #2
   12b78:	mov	r4, r7
   12b7c:	str	r7, [sp, #64]	; 0x40
   12b80:	ldr	r0, [fp, #-84]	; 0xffffffac
   12b84:	bl	1401c <rb_base64_encode@plt+0x2fd4>
   12b88:	str	r0, [fp, #-84]	; 0xffffffac
   12b8c:	add	r1, r0, r8, ror #2
   12b90:	add	r0, r1, sl
   12b94:	add	r0, r0, r6, ror #27
   12b98:	movw	sl, #31129	; 0x7999
   12b9c:	movt	sl, #23170	; 0x5a82
   12ba0:	add	r7, r0, sl
   12ba4:	ror	r0, r5, #2
   12ba8:	eor	r0, r0, r9, ror #2
   12bac:	and	r0, r6, r0
   12bb0:	eor	r8, r0, r9, ror #2
   12bb4:	ldr	r0, [fp, #-92]	; 0xffffffa4
   12bb8:	bl	1401c <rb_base64_encode@plt+0x2fd4>
   12bbc:	str	r0, [sp, #96]	; 0x60
   12bc0:	add	r1, r0, r4, ror #2
   12bc4:	add	r0, r1, r8
   12bc8:	add	r0, r0, r7, ror #27
   12bcc:	add	r4, r0, sl
   12bd0:	ror	r0, r6, #2
   12bd4:	eor	r0, r0, r5, ror #2
   12bd8:	and	r0, r7, r0
   12bdc:	eor	r8, r0, r5, ror #2
   12be0:	ldr	r0, [fp, #-88]	; 0xffffffa8
   12be4:	bl	1401c <rb_base64_encode@plt+0x2fd4>
   12be8:	str	r0, [sp, #92]	; 0x5c
   12bec:	add	r1, r0, r9, ror #2
   12bf0:	add	r0, r1, r8
   12bf4:	add	r0, r0, r4, ror #27
   12bf8:	add	r9, r0, sl
   12bfc:	ror	r0, r7, #2
   12c00:	eor	r0, r0, r6, ror #2
   12c04:	and	r0, r4, r0
   12c08:	eor	r8, r0, r6, ror #2
   12c0c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12c10:	bl	1401c <rb_base64_encode@plt+0x2fd4>
   12c14:	str	r0, [sp, #88]	; 0x58
   12c18:	add	r1, r0, r5, ror #2
   12c1c:	add	r0, r1, r8
   12c20:	add	r0, r0, r9, ror #27
   12c24:	add	r5, r0, sl
   12c28:	ror	r0, r4, #2
   12c2c:	eor	r0, r0, r7, ror #2
   12c30:	and	r0, r9, r0
   12c34:	eor	r8, r0, r7, ror #2
   12c38:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12c3c:	bl	1401c <rb_base64_encode@plt+0x2fd4>
   12c40:	str	r0, [sp, #60]	; 0x3c
   12c44:	add	r1, r0, r6, ror #2
   12c48:	add	r0, r1, r8
   12c4c:	add	r0, r0, r5, ror #27
   12c50:	add	r6, r0, sl
   12c54:	ror	r0, r9, #2
   12c58:	eor	r0, r0, r4, ror #2
   12c5c:	and	r0, r5, r0
   12c60:	eor	r8, r0, r4, ror #2
   12c64:	ldr	r0, [fp, #-44]	; 0xffffffd4
   12c68:	bl	1401c <rb_base64_encode@plt+0x2fd4>
   12c6c:	str	r0, [fp, #-44]	; 0xffffffd4
   12c70:	add	r1, r0, r7, ror #2
   12c74:	add	r0, r1, r8
   12c78:	add	r0, r0, r6, ror #27
   12c7c:	add	r7, r0, sl
   12c80:	ror	r0, r5, #2
   12c84:	eor	r0, r0, r9, ror #2
   12c88:	and	r0, r6, r0
   12c8c:	eor	r8, r0, r9, ror #2
   12c90:	ldr	r0, [fp, #-48]	; 0xffffffd0
   12c94:	bl	1401c <rb_base64_encode@plt+0x2fd4>
   12c98:	str	r0, [fp, #-48]	; 0xffffffd0
   12c9c:	add	r1, r0, r4, ror #2
   12ca0:	add	r0, r1, r8
   12ca4:	add	r0, r0, r7, ror #27
   12ca8:	add	r4, r0, sl
   12cac:	ror	r0, r6, #2
   12cb0:	eor	r0, r0, r5, ror #2
   12cb4:	and	r0, r7, r0
   12cb8:	eor	r8, r0, r5, ror #2
   12cbc:	ldr	r0, [fp, #-56]	; 0xffffffc8
   12cc0:	bl	1401c <rb_base64_encode@plt+0x2fd4>
   12cc4:	str	r0, [fp, #-56]	; 0xffffffc8
   12cc8:	add	r1, r0, r9, ror #2
   12ccc:	add	r0, r1, r8
   12cd0:	add	r0, r0, r4, ror #27
   12cd4:	add	r9, r0, sl
   12cd8:	ror	r0, r7, #2
   12cdc:	eor	r0, r0, r6, ror #2
   12ce0:	and	r0, r4, r0
   12ce4:	eor	r8, r0, r6, ror #2
   12ce8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12cec:	bl	1401c <rb_base64_encode@plt+0x2fd4>
   12cf0:	str	r0, [fp, #-72]	; 0xffffffb8
   12cf4:	add	r1, r0, r5, ror #2
   12cf8:	add	r0, r1, r8
   12cfc:	add	r0, r0, r9, ror #27
   12d00:	add	r5, r0, sl
   12d04:	ror	r0, r4, #2
   12d08:	eor	r0, r0, r7, ror #2
   12d0c:	and	r0, r9, r0
   12d10:	eor	r8, r0, r7, ror #2
   12d14:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12d18:	bl	1401c <rb_base64_encode@plt+0x2fd4>
   12d1c:	str	r0, [fp, #-76]	; 0xffffffb4
   12d20:	add	r1, r0, r6, ror #2
   12d24:	add	r0, r1, r8
   12d28:	add	r0, r0, r5, ror #27
   12d2c:	add	r8, r0, sl
   12d30:	ror	r0, r9, #2
   12d34:	eor	r0, r0, r4, ror #2
   12d38:	and	r0, r5, r0
   12d3c:	eor	r6, r0, r4, ror #2
   12d40:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12d44:	bl	1401c <rb_base64_encode@plt+0x2fd4>
   12d48:	str	r0, [fp, #-32]	; 0xffffffe0
   12d4c:	add	r1, r0, r7, ror #2
   12d50:	add	r0, r1, r6
   12d54:	add	r0, r0, r8, ror #27
   12d58:	mov	r7, sl
   12d5c:	add	sl, r0, sl
   12d60:	ror	r0, r5, #2
   12d64:	eor	r0, r0, r9, ror #2
   12d68:	and	r0, r8, r0
   12d6c:	eor	r6, r0, r9, ror #2
   12d70:	ldr	r0, [fp, #-36]	; 0xffffffdc
   12d74:	bl	1401c <rb_base64_encode@plt+0x2fd4>
   12d78:	str	r0, [fp, #-36]	; 0xffffffdc
   12d7c:	add	r1, r0, r4, ror #2
   12d80:	add	r0, r1, r6
   12d84:	add	r0, r0, sl, ror #27
   12d88:	add	r4, r0, r7
   12d8c:	mov	r6, r7
   12d90:	ror	r0, r8, #2
   12d94:	eor	r0, r0, r5, ror #2
   12d98:	and	r0, sl, r0
   12d9c:	eor	r7, r0, r5, ror #2
   12da0:	ldr	r0, [fp, #-40]	; 0xffffffd8
   12da4:	bl	1401c <rb_base64_encode@plt+0x2fd4>
   12da8:	add	r1, r0, r9, ror #2
   12dac:	mov	r9, r0
   12db0:	str	r0, [fp, #-88]	; 0xffffffa8
   12db4:	add	r0, r1, r7
   12db8:	add	r0, r0, r4, ror #27
   12dbc:	mov	r7, r6
   12dc0:	add	r1, r0, r6
   12dc4:	ror	r0, sl, #2
   12dc8:	eor	r0, r0, r8, ror #2
   12dcc:	and	r0, r4, r0
   12dd0:	eor	r0, r0, r8, ror #2
   12dd4:	ldr	r2, [fp, #-52]	; 0xffffffcc
   12dd8:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12ddc:	eor	r2, ip, r2
   12de0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   12de4:	eor	r2, r2, r3
   12de8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12dec:	eor	r2, r2, r3
   12df0:	str	r2, [fp, #-68]	; 0xffffffbc
   12df4:	ror	r2, r2, #31
   12df8:	add	r2, r2, r5, ror #2
   12dfc:	add	r0, r2, r0
   12e00:	add	r0, r0, r1, ror #27
   12e04:	add	lr, r0, r6
   12e08:	ror	r0, r4, #2
   12e0c:	eor	r0, r0, sl, ror #2
   12e10:	and	r0, r1, r0
   12e14:	eor	r0, r0, sl, ror #2
   12e18:	ldr	r2, [fp, #-60]	; 0xffffffc4
   12e1c:	ldr	r6, [fp, #-84]	; 0xffffffac
   12e20:	eor	r2, r6, r2
   12e24:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12e28:	eor	r2, r2, r3
   12e2c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12e30:	eor	r2, r2, r3
   12e34:	str	r2, [fp, #-40]	; 0xffffffd8
   12e38:	ror	r2, r2, #31
   12e3c:	add	r2, r2, r8, ror #2
   12e40:	add	r0, r2, r0
   12e44:	add	r0, r0, lr, ror #27
   12e48:	add	r3, r0, r7
   12e4c:	ror	r0, r1, #2
   12e50:	eor	r0, r0, r4, ror #2
   12e54:	and	r0, lr, r0
   12e58:	eor	r0, r0, r4, ror #2
   12e5c:	ldr	r8, [sp, #96]	; 0x60
   12e60:	eor	r2, r8, ip
   12e64:	ldr	r7, [fp, #-56]	; 0xffffffc8
   12e68:	eor	r2, r2, r7
   12e6c:	eor	r7, r2, r9
   12e70:	ror	r5, r7, #31
   12e74:	str	r5, [sp, #36]	; 0x24
   12e78:	str	r7, [fp, #-92]	; 0xffffffa4
   12e7c:	add	r2, r5, sl, ror #2
   12e80:	add	r0, r2, r0
   12e84:	add	r0, r0, r3, ror #27
   12e88:	movw	r2, #31129	; 0x7999
   12e8c:	movt	r2, #23170	; 0x5a82
   12e90:	add	sl, r0, r2
   12e94:	ror	r0, lr, #2
   12e98:	eor	r0, r0, r1, ror #2
   12e9c:	and	r0, r3, r0
   12ea0:	eor	r0, r0, r1, ror #2
   12ea4:	ldr	r5, [sp, #92]	; 0x5c
   12ea8:	eor	r2, r5, r6
   12eac:	ldr	r6, [fp, #-72]	; 0xffffffb8
   12eb0:	eor	r2, r2, r6
   12eb4:	ldr	r6, [fp, #-68]	; 0xffffffbc
   12eb8:	eor	r2, r2, r6, ror #31
   12ebc:	str	r2, [fp, #-60]	; 0xffffffc4
   12ec0:	ror	r6, r2, #31
   12ec4:	str	r6, [sp, #28]
   12ec8:	add	r2, r6, r4, ror #2
   12ecc:	add	r0, r2, r0
   12ed0:	add	r0, r0, sl, ror #27
   12ed4:	movw	r2, #31129	; 0x7999
   12ed8:	movt	r2, #23170	; 0x5a82
   12edc:	add	ip, r0, r2
   12ee0:	ror	r0, r3, #2
   12ee4:	eor	r0, r0, lr, ror #2
   12ee8:	eor	r0, r0, sl
   12eec:	ldr	r4, [sp, #88]	; 0x58
   12ef0:	eor	r2, r4, r8
   12ef4:	ldr	r6, [fp, #-76]	; 0xffffffb4
   12ef8:	eor	r2, r2, r6
   12efc:	ldr	r6, [fp, #-40]	; 0xffffffd8
   12f00:	eor	r9, r2, r6, ror #31
   12f04:	ror	r6, r9, #31
   12f08:	str	r6, [sp, #24]
   12f0c:	str	r9, [sp, #96]	; 0x60
   12f10:	add	r1, r6, r1, ror #2
   12f14:	add	r0, r1, r0
   12f18:	add	r0, r0, ip, ror #27
   12f1c:	movw	r2, #60321	; 0xeba1
   12f20:	movt	r2, #28377	; 0x6ed9
   12f24:	add	r1, r0, r2
   12f28:	mov	r8, r2
   12f2c:	ror	r0, sl, #2
   12f30:	eor	r0, r0, r3, ror #2
   12f34:	eor	r0, r0, ip
   12f38:	ldr	r6, [sp, #60]	; 0x3c
   12f3c:	eor	r2, r6, r5
   12f40:	ldr	r5, [fp, #-32]	; 0xffffffe0
   12f44:	eor	r2, r2, r5
   12f48:	eor	r2, r2, r7, ror #31
   12f4c:	str	r2, [fp, #-64]	; 0xffffffc0
   12f50:	ror	r5, r2, #31
   12f54:	str	r5, [sp, #20]
   12f58:	add	r2, r5, lr, ror #2
   12f5c:	add	r0, r2, r0
   12f60:	add	r0, r0, r1, ror #27
   12f64:	add	r0, r0, r8
   12f68:	mov	lr, r8
   12f6c:	ror	r2, ip, #2
   12f70:	eor	r2, r2, sl, ror #2
   12f74:	eor	r2, r2, r1
   12f78:	ldr	r7, [fp, #-44]	; 0xffffffd4
   12f7c:	eor	r4, r7, r4
   12f80:	ldr	r5, [fp, #-36]	; 0xffffffdc
   12f84:	eor	r4, r4, r5
   12f88:	ldr	r5, [fp, #-60]	; 0xffffffc4
   12f8c:	eor	r8, r4, r5, ror #31
   12f90:	ror	r4, r8, #31
   12f94:	str	r4, [sp, #12]
   12f98:	str	r8, [sp, #92]	; 0x5c
   12f9c:	add	r3, r4, r3, ror #2
   12fa0:	add	r2, r3, r2
   12fa4:	add	r2, r2, r0, ror #27
   12fa8:	add	r3, r2, lr
   12fac:	ror	r2, r1, #2
   12fb0:	eor	r2, r2, ip, ror #2
   12fb4:	eor	r2, r2, r0
   12fb8:	ldr	lr, [fp, #-48]	; 0xffffffd0
   12fbc:	eor	r4, lr, r6
   12fc0:	ldr	r5, [fp, #-88]	; 0xffffffa8
   12fc4:	eor	r4, r4, r5
   12fc8:	eor	r4, r4, r9, ror #31
   12fcc:	str	r4, [fp, #-52]	; 0xffffffcc
   12fd0:	ror	r5, r4, #31
   12fd4:	str	r5, [sp, #60]	; 0x3c
   12fd8:	add	r4, r5, sl, ror #2
   12fdc:	add	r2, r4, r2
   12fe0:	add	r2, r2, r3, ror #27
   12fe4:	movw	r9, #60321	; 0xeba1
   12fe8:	movt	r9, #28377	; 0x6ed9
   12fec:	add	r2, r2, r9
   12ff0:	ror	r4, r0, #2
   12ff4:	eor	r4, r4, r1, ror #2
   12ff8:	eor	r4, r4, r3
   12ffc:	ldr	r6, [fp, #-56]	; 0xffffffc8
   13000:	eor	r7, r6, r7
   13004:	ldr	r5, [fp, #-68]	; 0xffffffbc
   13008:	eor	r7, r7, r5, ror #31
   1300c:	ldr	r5, [fp, #-64]	; 0xffffffc0
   13010:	eor	r7, r7, r5, ror #31
   13014:	ror	r5, r7, #31
   13018:	str	r5, [sp, #8]
   1301c:	mov	sl, r7
   13020:	str	r7, [sp, #88]	; 0x58
   13024:	add	r7, r5, ip, ror #2
   13028:	add	r7, r7, r4
   1302c:	add	r7, r7, r2, ror #27
   13030:	add	ip, r7, r9
   13034:	ror	r4, r3, #2
   13038:	eor	r4, r4, r0, ror #2
   1303c:	eor	r4, r4, r2
   13040:	ldr	r9, [fp, #-72]	; 0xffffffb8
   13044:	eor	r7, r9, lr
   13048:	ldr	r5, [fp, #-40]	; 0xffffffd8
   1304c:	eor	r7, r7, r5, ror #31
   13050:	eor	r7, r7, r8, ror #31
   13054:	str	r7, [fp, #-48]	; 0xffffffd0
   13058:	ror	lr, r7, #31
   1305c:	str	lr, [sp, #56]	; 0x38
   13060:	add	r1, lr, r1, ror #2
   13064:	add	r1, r1, r4
   13068:	add	r1, r1, ip, ror #27
   1306c:	movw	r8, #60321	; 0xeba1
   13070:	movt	r8, #28377	; 0x6ed9
   13074:	add	r1, r1, r8
   13078:	ror	r4, r2, #2
   1307c:	eor	r4, r4, r3, ror #2
   13080:	eor	r4, r4, ip
   13084:	ldr	lr, [fp, #-76]	; 0xffffffb4
   13088:	eor	r7, lr, r6
   1308c:	ldr	r5, [fp, #-92]	; 0xffffffa4
   13090:	eor	r7, r7, r5, ror #31
   13094:	ldr	r5, [fp, #-52]	; 0xffffffcc
   13098:	eor	r5, r7, r5, ror #31
   1309c:	str	r5, [fp, #-56]	; 0xffffffc8
   130a0:	ror	r5, r5, #31
   130a4:	str	r5, [sp, #4]
   130a8:	add	r0, r5, r0, ror #2
   130ac:	add	r0, r0, r4
   130b0:	add	r0, r0, r1, ror #27
   130b4:	add	r0, r0, r8
   130b8:	ror	r4, ip, #2
   130bc:	eor	r4, r4, r2, ror #2
   130c0:	eor	r4, r4, r1
   130c4:	ldr	r8, [fp, #-32]	; 0xffffffe0
   130c8:	eor	r7, r8, r9
   130cc:	ldr	r5, [fp, #-60]	; 0xffffffc4
   130d0:	eor	r7, r7, r5, ror #31
   130d4:	eor	sl, r7, sl, ror #31
   130d8:	ror	r6, sl, #31
   130dc:	str	r6, [sp, #44]	; 0x2c
   130e0:	str	sl, [fp, #-84]	; 0xffffffac
   130e4:	add	r3, r6, r3, ror #2
   130e8:	add	r3, r3, r4
   130ec:	add	r3, r3, r0, ror #27
   130f0:	movw	r4, #60321	; 0xeba1
   130f4:	movt	r4, #28377	; 0x6ed9
   130f8:	add	r3, r3, r4
   130fc:	ror	r4, r1, #2
   13100:	eor	r4, r4, ip, ror #2
   13104:	eor	r4, r4, r0
   13108:	ldr	r5, [fp, #-36]	; 0xffffffdc
   1310c:	eor	r7, r5, lr
   13110:	ldr	r6, [sp, #96]	; 0x60
   13114:	eor	r7, r7, r6, ror #31
   13118:	ldr	r6, [fp, #-48]	; 0xffffffd0
   1311c:	eor	r9, r7, r6, ror #31
   13120:	ror	r6, r9, #31
   13124:	str	r6, [sp, #52]	; 0x34
   13128:	str	r9, [fp, #-80]	; 0xffffffb0
   1312c:	add	r2, r6, r2, ror #2
   13130:	add	r2, r2, r4
   13134:	add	r2, r2, r3, ror #27
   13138:	movw	r7, #60321	; 0xeba1
   1313c:	movt	r7, #28377	; 0x6ed9
   13140:	add	r2, r2, r7
   13144:	ror	r4, r0, #2
   13148:	eor	r4, r4, r1, ror #2
   1314c:	eor	r4, r4, r3
   13150:	ldr	lr, [fp, #-88]	; 0xffffffa8
   13154:	eor	r7, lr, r8
   13158:	ldr	r6, [fp, #-64]	; 0xffffffc0
   1315c:	eor	r7, r7, r6, ror #31
   13160:	ldr	r6, [fp, #-56]	; 0xffffffc8
   13164:	eor	r6, r7, r6, ror #31
   13168:	str	r6, [fp, #-44]	; 0xffffffd4
   1316c:	ror	r6, r6, #31
   13170:	str	r6, [sp, #48]	; 0x30
   13174:	add	r7, r6, ip, ror #2
   13178:	add	r7, r7, r4
   1317c:	add	r7, r7, r2, ror #27
   13180:	movw	r6, #60321	; 0xeba1
   13184:	movt	r6, #28377	; 0x6ed9
   13188:	add	ip, r7, r6
   1318c:	ror	r4, r3, #2
   13190:	eor	r4, r4, r0, ror #2
   13194:	eor	r4, r4, r2
   13198:	ldr	r8, [fp, #-68]	; 0xffffffbc
   1319c:	eor	r7, r5, r8, ror #31
   131a0:	ldr	r5, [sp, #92]	; 0x5c
   131a4:	eor	r7, r7, r5, ror #31
   131a8:	eor	r5, r7, sl, ror #31
   131ac:	str	r5, [fp, #-32]	; 0xffffffe0
   131b0:	ror	r5, r5, #31
   131b4:	str	r5, [fp, #-36]	; 0xffffffdc
   131b8:	add	r1, r5, r1, ror #2
   131bc:	add	r1, r1, r4
   131c0:	add	r1, r1, ip, ror #27
   131c4:	add	r1, r1, r6
   131c8:	ror	r4, r2, #2
   131cc:	eor	r4, r4, r3, ror #2
   131d0:	eor	r4, r4, ip
   131d4:	ldr	sl, [fp, #-40]	; 0xffffffd8
   131d8:	eor	r6, lr, sl, ror #31
   131dc:	ldr	r7, [fp, #-52]	; 0xffffffcc
   131e0:	eor	r6, r6, r7, ror #31
   131e4:	eor	r7, r6, r9, ror #31
   131e8:	ror	r6, r7, #31
   131ec:	str	r6, [sp, #40]	; 0x28
   131f0:	mov	r5, r7
   131f4:	str	r7, [fp, #-76]	; 0xffffffb4
   131f8:	add	r0, r6, r0, ror #2
   131fc:	add	r0, r0, r4
   13200:	add	r0, r0, r1, ror #27
   13204:	movw	lr, #60321	; 0xeba1
   13208:	movt	lr, #28377	; 0x6ed9
   1320c:	add	r0, r0, lr
   13210:	ror	r4, ip, #2
   13214:	eor	r4, r4, r2, ror #2
   13218:	eor	r4, r4, r1
   1321c:	ldr	r6, [sp, #36]	; 0x24
   13220:	eor	r6, r6, r8, ror #31
   13224:	ldr	r7, [sp, #88]	; 0x58
   13228:	eor	r6, r6, r7, ror #31
   1322c:	ldr	r7, [fp, #-44]	; 0xffffffd4
   13230:	eor	r9, r6, r7, ror #31
   13234:	ror	r6, r9, #31
   13238:	str	r6, [sp, #32]
   1323c:	add	r3, r6, r3, ror #2
   13240:	add	r3, r3, r4
   13244:	add	r3, r3, r0, ror #27
   13248:	add	r3, r3, lr
   1324c:	mov	r8, lr
   13250:	ror	r4, r1, #2
   13254:	eor	r4, r4, ip, ror #2
   13258:	eor	r4, r4, r0
   1325c:	ldr	r6, [sp, #28]
   13260:	eor	r6, r6, sl, ror #31
   13264:	ldr	r7, [fp, #-48]	; 0xffffffd0
   13268:	eor	r6, r6, r7, ror #31
   1326c:	ldr	r7, [fp, #-32]	; 0xffffffe0
   13270:	eor	r7, r6, r7, ror #31
   13274:	ror	r6, r7, #31
   13278:	str	r6, [sp, #28]
   1327c:	mov	lr, r7
   13280:	str	r7, [fp, #-88]	; 0xffffffa8
   13284:	add	r2, r6, r2, ror #2
   13288:	add	r2, r2, r4
   1328c:	add	r2, r2, r3, ror #27
   13290:	add	r7, r2, r8
   13294:	mov	sl, r8
   13298:	ror	r2, r0, #2
   1329c:	eor	r2, r2, r1, ror #2
   132a0:	eor	r2, r2, r3
   132a4:	ldr	r4, [sp, #24]
   132a8:	ldr	r6, [fp, #-92]	; 0xffffffa4
   132ac:	eor	r4, r4, r6, ror #31
   132b0:	ldr	r6, [fp, #-56]	; 0xffffffc8
   132b4:	eor	r4, r4, r6, ror #31
   132b8:	eor	r6, r4, r5, ror #31
   132bc:	ror	r4, r6, #31
   132c0:	str	r4, [fp, #-40]	; 0xffffffd8
   132c4:	mov	r8, r6
   132c8:	str	r6, [fp, #-68]	; 0xffffffbc
   132cc:	add	r4, r4, ip, ror #2
   132d0:	add	r2, r4, r2
   132d4:	add	r2, r2, r7, ror #27
   132d8:	add	r2, r2, sl
   132dc:	ror	r4, r3, #2
   132e0:	eor	r4, r4, r0, ror #2
   132e4:	eor	r4, r4, r7
   132e8:	ldr	r6, [sp, #20]
   132ec:	ldr	r5, [fp, #-60]	; 0xffffffc4
   132f0:	eor	r6, r6, r5, ror #31
   132f4:	ldr	r5, [fp, #-84]	; 0xffffffac
   132f8:	eor	r6, r6, r5, ror #31
   132fc:	eor	r6, r6, r9, ror #31
   13300:	str	r9, [sp]
   13304:	ror	r5, r6, #31
   13308:	str	r5, [sp, #16]
   1330c:	mov	ip, r6
   13310:	str	r6, [fp, #-72]	; 0xffffffb8
   13314:	add	r1, r5, r1, ror #2
   13318:	add	r1, r1, r4
   1331c:	add	r1, r1, r2, ror #27
   13320:	add	r1, r1, sl
   13324:	ror	r6, r7, #2
   13328:	eor	r6, r6, r3, ror #2
   1332c:	eor	r6, r6, r2
   13330:	ldr	r4, [sp, #12]
   13334:	ldr	r5, [sp, #96]	; 0x60
   13338:	eor	r4, r4, r5, ror #31
   1333c:	ldr	r5, [fp, #-80]	; 0xffffffb0
   13340:	eor	r4, r4, r5, ror #31
   13344:	eor	r4, r4, lr, ror #31
   13348:	ror	r5, r4, #31
   1334c:	str	r5, [sp, #24]
   13350:	mov	lr, r4
   13354:	str	r4, [sp, #96]	; 0x60
   13358:	add	r0, r5, r0, ror #2
   1335c:	add	r0, r0, r6
   13360:	add	r0, r0, r1, ror #27
   13364:	add	r4, r0, sl
   13368:	ror	r0, r2, #2
   1336c:	eor	r0, r0, r7, ror #2
   13370:	eor	r0, r0, r1
   13374:	ldr	r5, [sp, #60]	; 0x3c
   13378:	ldr	r6, [fp, #-64]	; 0xffffffc0
   1337c:	eor	r6, r5, r6, ror #31
   13380:	ldr	r5, [fp, #-44]	; 0xffffffd4
   13384:	eor	r6, r6, r5, ror #31
   13388:	eor	r6, r6, r8, ror #31
   1338c:	ror	r5, r6, #31
   13390:	str	r5, [sp, #36]	; 0x24
   13394:	mov	r8, r6
   13398:	str	r6, [fp, #-60]	; 0xffffffc4
   1339c:	add	r3, r5, r3, ror #2
   133a0:	add	r0, r3, r0
   133a4:	add	r0, r0, r4, ror #27
   133a8:	add	r0, r0, sl
   133ac:	ror	r3, r1, #2
   133b0:	eor	r3, r3, r2, ror #2
   133b4:	eor	r3, r3, r4
   133b8:	ldr	r5, [sp, #8]
   133bc:	ldr	r6, [sp, #92]	; 0x5c
   133c0:	eor	r6, r5, r6, ror #31
   133c4:	ldr	r5, [fp, #-32]	; 0xffffffe0
   133c8:	eor	r6, r6, r5, ror #31
   133cc:	eor	r6, r6, ip, ror #31
   133d0:	str	r6, [fp, #-92]	; 0xffffffa4
   133d4:	ror	r5, r6, #31
   133d8:	str	r5, [sp, #60]	; 0x3c
   133dc:	add	r7, r5, r7, ror #2
   133e0:	add	r3, r7, r3
   133e4:	add	r3, r3, r0, ror #27
   133e8:	add	ip, r3, sl
   133ec:	orr	r3, ip, r0, ror #2
   133f0:	and	r3, r3, r4, ror #2
   133f4:	and	r7, ip, r0, ror #2
   133f8:	orr	r3, r3, r7
   133fc:	ldr	r5, [sp, #4]
   13400:	ldr	r6, [sp, #88]	; 0x58
   13404:	eor	r7, r5, r6, ror #31
   13408:	eor	r7, r7, r9, ror #31
   1340c:	eor	r7, r7, r8, ror #31
   13410:	ror	r5, r7, #31
   13414:	str	r5, [sp, #88]	; 0x58
   13418:	mov	r6, r7
   1341c:	str	r7, [fp, #-64]	; 0xffffffc0
   13420:	add	r7, r5, r1, ror #2
   13424:	add	r5, r7, r3
   13428:	ror	r3, r4, #2
   1342c:	eor	r1, r3, r1, ror #2
   13430:	eor	r1, r1, r0
   13434:	ldr	r3, [sp, #56]	; 0x38
   13438:	ldr	r7, [fp, #-52]	; 0xffffffcc
   1343c:	eor	r3, r3, r7, ror #31
   13440:	ldr	r7, [fp, #-76]	; 0xffffffb4
   13444:	eor	r3, r3, r7, ror #31
   13448:	eor	r3, r3, lr, ror #31
   1344c:	ror	r7, r3, #31
   13450:	str	r7, [sp, #12]
   13454:	mov	lr, r3
   13458:	str	r3, [fp, #-52]	; 0xffffffcc
   1345c:	add	r2, r7, r2, ror #2
   13460:	add	r1, r2, r1
   13464:	add	r1, r1, ip, ror #27
   13468:	add	r3, r1, sl
   1346c:	add	r1, r5, r3, ror #27
   13470:	movw	sl, #48348	; 0xbcdc
   13474:	movt	sl, #36635	; 0x8f1b
   13478:	add	r1, r1, sl
   1347c:	orr	r2, r3, ip, ror #2
   13480:	and	r2, r2, r0, ror #2
   13484:	and	r5, r3, ip, ror #2
   13488:	orr	r2, r2, r5
   1348c:	ldr	r5, [sp, #44]	; 0x2c
   13490:	ldr	r7, [fp, #-48]	; 0xffffffd0
   13494:	eor	r5, r5, r7, ror #31
   13498:	ldr	r7, [fp, #-88]	; 0xffffffa8
   1349c:	eor	r5, r5, r7, ror #31
   134a0:	ldr	r9, [fp, #-92]	; 0xffffffa4
   134a4:	eor	r5, r5, r9, ror #31
   134a8:	ror	r7, r5, #31
   134ac:	str	r7, [sp, #56]	; 0x38
   134b0:	mov	r8, r5
   134b4:	str	r5, [fp, #-48]	; 0xffffffd0
   134b8:	add	r4, r7, r4, ror #2
   134bc:	add	r2, r4, r2
   134c0:	add	r2, r2, r1, ror #27
   134c4:	add	r4, r2, sl
   134c8:	orr	r2, r1, r3, ror #2
   134cc:	and	r2, r2, ip, ror #2
   134d0:	and	r5, r1, r3, ror #2
   134d4:	orr	r2, r2, r5
   134d8:	ldr	r5, [sp, #52]	; 0x34
   134dc:	ldr	r7, [fp, #-56]	; 0xffffffc8
   134e0:	eor	r5, r5, r7, ror #31
   134e4:	ldr	r7, [fp, #-68]	; 0xffffffbc
   134e8:	eor	r5, r5, r7, ror #31
   134ec:	eor	lr, r5, lr, ror #31
   134f0:	ror	r7, lr, #31
   134f4:	str	r7, [sp, #52]	; 0x34
   134f8:	add	r0, r7, r0, ror #2
   134fc:	add	r0, r0, r2
   13500:	add	r0, r0, r4, ror #27
   13504:	add	r0, r0, sl
   13508:	orr	r2, r4, r1, ror #2
   1350c:	and	r2, r2, r3, ror #2
   13510:	and	r5, r4, r1, ror #2
   13514:	orr	r2, r2, r5
   13518:	ldr	r7, [sp, #48]	; 0x30
   1351c:	ldr	r5, [fp, #-84]	; 0xffffffac
   13520:	eor	r5, r7, r5, ror #31
   13524:	ldr	r7, [fp, #-72]	; 0xffffffb8
   13528:	eor	r5, r5, r7, ror #31
   1352c:	eor	r5, r5, r6, ror #31
   13530:	str	r5, [fp, #-84]	; 0xffffffac
   13534:	ror	r7, r5, #31
   13538:	str	r7, [sp, #48]	; 0x30
   1353c:	add	r7, r7, ip, ror #2
   13540:	add	r2, r7, r2
   13544:	add	r2, r2, r0, ror #27
   13548:	add	r2, r2, sl
   1354c:	orr	r7, r0, r4, ror #2
   13550:	and	r7, r7, r1, ror #2
   13554:	and	r6, r0, r4, ror #2
   13558:	orr	r7, r7, r6
   1355c:	ldr	r6, [fp, #-36]	; 0xffffffdc
   13560:	ldr	r5, [fp, #-80]	; 0xffffffb0
   13564:	eor	r6, r6, r5, ror #31
   13568:	ldr	r5, [sp, #96]	; 0x60
   1356c:	eor	r6, r6, r5, ror #31
   13570:	eor	r6, r6, r8, ror #31
   13574:	str	r6, [fp, #-36]	; 0xffffffdc
   13578:	ror	r6, r6, #31
   1357c:	str	r6, [sp, #44]	; 0x2c
   13580:	add	r3, r6, r3, ror #2
   13584:	add	r3, r3, r7
   13588:	add	r3, r3, r2, ror #27
   1358c:	mov	ip, sl
   13590:	add	r3, r3, sl
   13594:	orr	r7, r2, r0, ror #2
   13598:	and	r7, r7, r4, ror #2
   1359c:	and	r6, r2, r0, ror #2
   135a0:	orr	r7, r7, r6
   135a4:	ldr	r6, [sp, #40]	; 0x28
   135a8:	ldr	r5, [fp, #-44]	; 0xffffffd4
   135ac:	eor	r6, r6, r5, ror #31
   135b0:	ldr	r5, [fp, #-60]	; 0xffffffc4
   135b4:	eor	r6, r6, r5, ror #31
   135b8:	mov	sl, lr
   135bc:	str	lr, [sp, #8]
   135c0:	eor	r5, r6, lr, ror #31
   135c4:	ror	r6, r5, #31
   135c8:	str	r6, [sp, #40]	; 0x28
   135cc:	str	r5, [fp, #-56]	; 0xffffffc8
   135d0:	add	r1, r6, r1, ror #2
   135d4:	add	r1, r1, r7
   135d8:	add	r1, r1, r3, ror #27
   135dc:	add	r1, r1, ip
   135e0:	orr	r7, r3, r2, ror #2
   135e4:	and	r7, r7, r0, ror #2
   135e8:	and	r6, r3, r2, ror #2
   135ec:	orr	lr, r7, r6
   135f0:	ldr	r7, [sp, #32]
   135f4:	ldr	r6, [fp, #-32]	; 0xffffffe0
   135f8:	eor	r6, r7, r6, ror #31
   135fc:	eor	r6, r6, r9, ror #31
   13600:	ldr	r8, [fp, #-84]	; 0xffffffac
   13604:	eor	r7, r6, r8, ror #31
   13608:	str	r7, [fp, #-32]	; 0xffffffe0
   1360c:	ror	r6, r7, #31
   13610:	str	r6, [sp, #32]
   13614:	add	r6, r6, r4, ror #2
   13618:	add	r7, r6, lr
   1361c:	add	r7, r7, r1, ror #27
   13620:	add	r4, r7, ip
   13624:	orr	r7, r1, r3, ror #2
   13628:	and	r7, r7, r2, ror #2
   1362c:	and	r6, r1, r3, ror #2
   13630:	orr	lr, r7, r6
   13634:	ldr	r6, [sp, #28]
   13638:	ldr	r7, [fp, #-76]	; 0xffffffb4
   1363c:	eor	r6, r6, r7, ror #31
   13640:	ldr	r7, [fp, #-52]	; 0xffffffcc
   13644:	eor	r6, r6, r7, ror #31
   13648:	ldr	r7, [fp, #-36]	; 0xffffffdc
   1364c:	eor	ip, r6, r7, ror #31
   13650:	ror	r6, ip, #31
   13654:	str	r6, [sp, #28]
   13658:	mov	r9, ip
   1365c:	add	r0, r6, r0, ror #2
   13660:	add	r0, r0, lr
   13664:	add	r0, r0, r4, ror #27
   13668:	movw	lr, #48348	; 0xbcdc
   1366c:	movt	lr, #36635	; 0x8f1b
   13670:	add	r0, r0, lr
   13674:	orr	r7, r4, r1, ror #2
   13678:	and	r7, r7, r3, ror #2
   1367c:	and	r6, r4, r1, ror #2
   13680:	orr	ip, r7, r6
   13684:	ldr	r6, [fp, #-40]	; 0xffffffd8
   13688:	ldr	r7, [sp]
   1368c:	eor	r6, r6, r7, ror #31
   13690:	ldr	r7, [fp, #-64]	; 0xffffffc0
   13694:	eor	r6, r6, r7, ror #31
   13698:	eor	r5, r6, r5, ror #31
   1369c:	str	r5, [fp, #-40]	; 0xffffffd8
   136a0:	ror	r5, r5, #31
   136a4:	str	r5, [sp, #20]
   136a8:	add	r2, r5, r2, ror #2
   136ac:	add	r2, r2, ip
   136b0:	add	r2, r2, r0, ror #27
   136b4:	add	r7, r2, lr
   136b8:	orr	r2, r0, r4, ror #2
   136bc:	and	r2, r2, r1, ror #2
   136c0:	and	r6, r0, r4, ror #2
   136c4:	orr	r2, r2, r6
   136c8:	ldr	r6, [sp, #16]
   136cc:	ldr	r5, [fp, #-88]	; 0xffffffa8
   136d0:	eor	r6, r6, r5, ror #31
   136d4:	ldr	r5, [fp, #-48]	; 0xffffffd0
   136d8:	eor	r6, r6, r5, ror #31
   136dc:	ldr	r5, [fp, #-32]	; 0xffffffe0
   136e0:	eor	r6, r6, r5, ror #31
   136e4:	ror	r5, r6, #31
   136e8:	str	r5, [sp, #16]
   136ec:	str	r6, [fp, #-76]	; 0xffffffb4
   136f0:	add	r3, r5, r3, ror #2
   136f4:	add	r2, r3, r2
   136f8:	add	r2, r2, r7, ror #27
   136fc:	add	r3, r2, lr
   13700:	orr	r2, r7, r0, ror #2
   13704:	and	r2, r2, r4, ror #2
   13708:	and	r5, r7, r0, ror #2
   1370c:	orr	ip, r2, r5
   13710:	ldr	r5, [sp, #24]
   13714:	ldr	r2, [fp, #-68]	; 0xffffffbc
   13718:	eor	r5, r5, r2, ror #31
   1371c:	eor	r5, r5, sl, ror #31
   13720:	str	r9, [sp, #92]	; 0x5c
   13724:	eor	r9, r5, r9, ror #31
   13728:	ror	r5, r9, #31
   1372c:	str	r5, [sp, #24]
   13730:	str	r9, [fp, #-68]	; 0xffffffbc
   13734:	add	r1, r5, r1, ror #2
   13738:	add	r1, r1, ip
   1373c:	add	r1, r1, r3, ror #27
   13740:	add	r1, r1, lr
   13744:	orr	r2, r3, r7, ror #2
   13748:	and	r2, r2, r0, ror #2
   1374c:	and	r5, r3, r7, ror #2
   13750:	orr	ip, r2, r5
   13754:	ldr	r5, [sp, #36]	; 0x24
   13758:	ldr	r2, [fp, #-72]	; 0xffffffb8
   1375c:	eor	r5, r5, r2, ror #31
   13760:	eor	r5, r5, r8, ror #31
   13764:	ldr	r2, [fp, #-40]	; 0xffffffd8
   13768:	eor	sl, r5, r2, ror #31
   1376c:	ror	r8, sl, #31
   13770:	str	r8, [sp, #36]	; 0x24
   13774:	str	sl, [fp, #-72]	; 0xffffffb8
   13778:	add	r4, r8, r4, ror #2
   1377c:	add	r2, r4, ip
   13780:	add	r2, r2, r1, ror #27
   13784:	add	r4, r2, lr
   13788:	orr	r2, r1, r3, ror #2
   1378c:	and	r2, r2, r7, ror #2
   13790:	and	r5, r1, r3, ror #2
   13794:	orr	ip, r2, r5
   13798:	ldr	r5, [sp, #60]	; 0x3c
   1379c:	ldr	r2, [sp, #96]	; 0x60
   137a0:	eor	r5, r5, r2, ror #31
   137a4:	ldr	r2, [fp, #-36]	; 0xffffffdc
   137a8:	eor	r5, r5, r2, ror #31
   137ac:	eor	r5, r5, r6, ror #31
   137b0:	ror	r6, r5, #31
   137b4:	str	r6, [sp, #96]	; 0x60
   137b8:	str	r5, [fp, #-80]	; 0xffffffb0
   137bc:	add	r0, r6, r0, ror #2
   137c0:	add	r0, r0, ip
   137c4:	add	r0, r0, r4, ror #27
   137c8:	add	r6, r0, lr
   137cc:	mov	ip, lr
   137d0:	orr	r0, r4, r1, ror #2
   137d4:	and	r0, r0, r3, ror #2
   137d8:	and	r2, r4, r1, ror #2
   137dc:	orr	r8, r0, r2
   137e0:	ldr	r2, [fp, #-60]	; 0xffffffc4
   137e4:	ldr	r0, [sp, #12]
   137e8:	eor	r2, r0, r2, ror #31
   137ec:	ldr	r0, [fp, #-56]	; 0xffffffc8
   137f0:	eor	r2, r2, r0, ror #31
   137f4:	eor	lr, r2, r9, ror #31
   137f8:	ror	r0, lr, #31
   137fc:	str	r0, [sp, #60]	; 0x3c
   13800:	str	lr, [fp, #-60]	; 0xffffffc4
   13804:	add	r2, r0, r7, ror #2
   13808:	add	r0, r2, r8
   1380c:	add	r0, r0, r6, ror #27
   13810:	add	r8, r0, ip
   13814:	orr	r0, r6, r4, ror #2
   13818:	and	r0, r0, r1, ror #2
   1381c:	and	r2, r6, r4, ror #2
   13820:	orr	r0, r0, r2
   13824:	ldr	r2, [sp, #88]	; 0x58
   13828:	ldr	r7, [fp, #-92]	; 0xffffffa4
   1382c:	eor	r2, r2, r7, ror #31
   13830:	ldr	r7, [fp, #-32]	; 0xffffffe0
   13834:	eor	r2, r2, r7, ror #31
   13838:	eor	sl, r2, sl, ror #31
   1383c:	ror	r9, sl, #31
   13840:	str	r9, [fp, #-92]	; 0xffffffa4
   13844:	add	r2, r9, r3, ror #2
   13848:	add	r0, r2, r0
   1384c:	add	r0, r0, r8, ror #27
   13850:	add	r3, r0, ip
   13854:	mov	r7, ip
   13858:	orr	r0, r8, r6, ror #2
   1385c:	and	r0, r0, r4, ror #2
   13860:	and	r2, r8, r6, ror #2
   13864:	orr	ip, r0, r2
   13868:	ldr	r2, [sp, #56]	; 0x38
   1386c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   13870:	eor	r2, r2, r0, ror #31
   13874:	ldr	r0, [sp, #92]	; 0x5c
   13878:	eor	r2, r2, r0, ror #31
   1387c:	eor	r9, r2, r5, ror #31
   13880:	ror	r5, r9, #31
   13884:	str	r5, [sp, #88]	; 0x58
   13888:	add	r1, r5, r1, ror #2
   1388c:	add	r0, r1, ip
   13890:	add	r0, r0, r3, ror #27
   13894:	add	r1, r0, r7
   13898:	orr	r0, r3, r8, ror #2
   1389c:	and	r0, r0, r6, ror #2
   138a0:	and	r2, r3, r8, ror #2
   138a4:	orr	r0, r0, r2
   138a8:	ldr	r2, [sp, #52]	; 0x34
   138ac:	ldr	r5, [fp, #-64]	; 0xffffffc0
   138b0:	eor	r2, r2, r5, ror #31
   138b4:	ldr	r5, [fp, #-40]	; 0xffffffd8
   138b8:	eor	r2, r2, r5, ror #31
   138bc:	eor	r2, r2, lr, ror #31
   138c0:	ror	r5, r2, #31
   138c4:	str	r5, [sp, #56]	; 0x38
   138c8:	mov	lr, r2
   138cc:	str	r2, [fp, #-52]	; 0xffffffcc
   138d0:	add	r2, r5, r4, ror #2
   138d4:	add	r0, r2, r0
   138d8:	add	r0, r0, r1, ror #27
   138dc:	add	r0, r0, r7
   138e0:	orr	r2, r1, r3, ror #2
   138e4:	and	r2, r2, r8, ror #2
   138e8:	and	r4, r1, r3, ror #2
   138ec:	orr	r2, r2, r4
   138f0:	ldr	r4, [sp, #48]	; 0x30
   138f4:	ldr	r5, [fp, #-48]	; 0xffffffd0
   138f8:	eor	r4, r4, r5, ror #31
   138fc:	ldr	r5, [fp, #-76]	; 0xffffffb4
   13900:	eor	r4, r4, r5, ror #31
   13904:	str	sl, [fp, #-88]	; 0xffffffa8
   13908:	eor	r5, r4, sl, ror #31
   1390c:	ror	r4, r5, #31
   13910:	str	r4, [sp, #48]	; 0x30
   13914:	mov	sl, r5
   13918:	str	r5, [fp, #-48]	; 0xffffffd0
   1391c:	add	r4, r4, r6, ror #2
   13920:	add	r2, r4, r2
   13924:	add	r2, r2, r0, ror #27
   13928:	add	r4, r2, r7
   1392c:	orr	r2, r0, r1, ror #2
   13930:	and	r2, r2, r3, ror #2
   13934:	and	r5, r0, r1, ror #2
   13938:	orr	r2, r2, r5
   1393c:	ldr	r6, [sp, #44]	; 0x2c
   13940:	ldr	r5, [sp, #8]
   13944:	eor	r5, r6, r5, ror #31
   13948:	ldr	r6, [fp, #-68]	; 0xffffffbc
   1394c:	eor	r5, r5, r6, ror #31
   13950:	str	r9, [sp, #4]
   13954:	eor	r6, r5, r9, ror #31
   13958:	str	r6, [fp, #-44]	; 0xffffffd4
   1395c:	ror	r6, r6, #31
   13960:	str	r6, [sp, #44]	; 0x2c
   13964:	add	r5, r6, r8, ror #2
   13968:	add	r2, r5, r2
   1396c:	add	r2, r2, r4, ror #27
   13970:	add	r2, r2, r7
   13974:	orr	r5, r4, r0, ror #2
   13978:	and	r5, r5, r1, ror #2
   1397c:	and	r6, r4, r0, ror #2
   13980:	orr	ip, r5, r6
   13984:	ldr	r6, [sp, #40]	; 0x28
   13988:	ldr	r5, [fp, #-84]	; 0xffffffac
   1398c:	eor	r6, r6, r5, ror #31
   13990:	ldr	r5, [fp, #-72]	; 0xffffffb8
   13994:	eor	r6, r6, r5, ror #31
   13998:	eor	r8, r6, lr, ror #31
   1399c:	ror	r5, r8, #31
   139a0:	str	r5, [sp, #12]
   139a4:	str	r8, [fp, #-64]	; 0xffffffc0
   139a8:	add	r3, r5, r3, ror #2
   139ac:	add	r3, r3, ip
   139b0:	add	r3, r3, r2, ror #27
   139b4:	add	r3, r3, r7
   139b8:	ror	r7, r4, #2
   139bc:	eor	r7, r7, r0, ror #2
   139c0:	eor	r7, r7, r2
   139c4:	ldr	r6, [sp, #32]
   139c8:	ldr	r5, [fp, #-36]	; 0xffffffdc
   139cc:	eor	r6, r6, r5, ror #31
   139d0:	ldr	r5, [fp, #-80]	; 0xffffffb0
   139d4:	eor	r6, r6, r5, ror #31
   139d8:	eor	r6, r6, sl, ror #31
   139dc:	ror	r5, r6, #31
   139e0:	str	r5, [sp, #32]
   139e4:	mov	lr, r6
   139e8:	str	r6, [fp, #-36]	; 0xffffffdc
   139ec:	add	r1, r5, r1, ror #2
   139f0:	add	r1, r1, r7
   139f4:	add	r1, r1, r3, ror #27
   139f8:	movw	r7, #49622	; 0xc1d6
   139fc:	movt	r7, #51810	; 0xca62
   13a00:	add	r1, r1, r7
   13a04:	ror	r7, r2, #2
   13a08:	eor	r7, r7, r4, ror #2
   13a0c:	eor	r7, r7, r3
   13a10:	ldr	r5, [sp, #28]
   13a14:	ldr	r6, [fp, #-56]	; 0xffffffc8
   13a18:	eor	r6, r5, r6, ror #31
   13a1c:	ldr	r5, [fp, #-60]	; 0xffffffc4
   13a20:	eor	r6, r6, r5, ror #31
   13a24:	ldr	r5, [fp, #-44]	; 0xffffffd4
   13a28:	eor	r6, r6, r5, ror #31
   13a2c:	ror	r5, r6, #31
   13a30:	str	r5, [sp, #28]
   13a34:	mov	sl, r6
   13a38:	str	r6, [fp, #-84]	; 0xffffffac
   13a3c:	add	r0, r5, r0, ror #2
   13a40:	add	r0, r0, r7
   13a44:	add	r0, r0, r1, ror #27
   13a48:	movw	r7, #49622	; 0xc1d6
   13a4c:	movt	r7, #51810	; 0xca62
   13a50:	add	ip, r0, r7
   13a54:	ror	r7, r3, #2
   13a58:	eor	r7, r7, r2, ror #2
   13a5c:	eor	r7, r7, r1
   13a60:	ldr	r5, [sp, #20]
   13a64:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13a68:	eor	r6, r5, r0, ror #31
   13a6c:	ldr	r0, [fp, #-88]	; 0xffffffa8
   13a70:	eor	r6, r6, r0, ror #31
   13a74:	eor	r5, r6, r8, ror #31
   13a78:	ror	r0, r5, #31
   13a7c:	str	r0, [sp, #40]	; 0x28
   13a80:	mov	r8, r5
   13a84:	str	r5, [fp, #-56]	; 0xffffffc8
   13a88:	add	r6, r0, r4, ror #2
   13a8c:	add	r7, r6, r7
   13a90:	add	r7, r7, ip, ror #27
   13a94:	movw	r0, #49622	; 0xc1d6
   13a98:	movt	r0, #51810	; 0xca62
   13a9c:	add	r5, r7, r0
   13aa0:	ror	r7, r1, #2
   13aa4:	eor	r7, r7, r3, ror #2
   13aa8:	eor	r7, r7, ip
   13aac:	ldr	r4, [sp, #16]
   13ab0:	ldr	r0, [sp, #92]	; 0x5c
   13ab4:	eor	r6, r4, r0, ror #31
   13ab8:	eor	r6, r6, r9, ror #31
   13abc:	eor	r6, r6, lr, ror #31
   13ac0:	ror	r4, r6, #31
   13ac4:	str	r4, [sp, #52]	; 0x34
   13ac8:	mov	r9, r6
   13acc:	str	r6, [fp, #-32]	; 0xffffffe0
   13ad0:	add	r2, r4, r2, ror #2
   13ad4:	add	r2, r2, r7
   13ad8:	add	r2, r2, r5, ror #27
   13adc:	movw	r0, #49622	; 0xc1d6
   13ae0:	movt	r0, #51810	; 0xca62
   13ae4:	add	r6, r2, r0
   13ae8:	ror	r2, ip, #2
   13aec:	eor	r2, r2, r1, ror #2
   13af0:	eor	r2, r2, r5
   13af4:	ldr	r7, [sp, #24]
   13af8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   13afc:	eor	r7, r7, r0, ror #31
   13b00:	ldr	r0, [fp, #-52]	; 0xffffffcc
   13b04:	eor	r7, r7, r0, ror #31
   13b08:	eor	lr, r7, sl, ror #31
   13b0c:	ror	r4, lr, #31
   13b10:	str	lr, [sp, #24]
   13b14:	str	r4, [sp, #92]	; 0x5c
   13b18:	add	r3, r4, r3, ror #2
   13b1c:	add	r2, r3, r2
   13b20:	add	r2, r2, r6, ror #27
   13b24:	movw	r0, #49622	; 0xc1d6
   13b28:	movt	r0, #51810	; 0xca62
   13b2c:	add	r2, r2, r0
   13b30:	ror	r3, r5, #2
   13b34:	eor	r3, r3, ip, ror #2
   13b38:	eor	r3, r3, r6
   13b3c:	ldr	r4, [sp, #36]	; 0x24
   13b40:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13b44:	eor	r7, r4, r0, ror #31
   13b48:	ldr	r0, [fp, #-48]	; 0xffffffd0
   13b4c:	eor	r7, r7, r0, ror #31
   13b50:	eor	sl, r7, r8, ror #31
   13b54:	ror	r4, sl, #31
   13b58:	str	sl, [sp, #36]	; 0x24
   13b5c:	str	r4, [fp, #-76]	; 0xffffffb4
   13b60:	add	r1, r4, r1, ror #2
   13b64:	add	r1, r1, r3
   13b68:	add	r1, r1, r2, ror #27
   13b6c:	movw	r8, #49622	; 0xc1d6
   13b70:	movt	r8, #51810	; 0xca62
   13b74:	add	r1, r1, r8
   13b78:	ror	r3, r6, #2
   13b7c:	eor	r3, r3, r5, ror #2
   13b80:	eor	r3, r3, r2
   13b84:	ldr	r4, [sp, #96]	; 0x60
   13b88:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13b8c:	eor	r4, r4, r0, ror #31
   13b90:	ldr	r0, [fp, #-44]	; 0xffffffd4
   13b94:	eor	r4, r4, r0, ror #31
   13b98:	eor	r0, r4, r9, ror #31
   13b9c:	str	r0, [fp, #-40]	; 0xffffffd8
   13ba0:	ror	r4, r0, #31
   13ba4:	add	r0, r4, ip, ror #2
   13ba8:	add	r0, r0, r3
   13bac:	add	r0, r0, r1, ror #27
   13bb0:	add	r0, r0, r8
   13bb4:	ror	r3, r2, #2
   13bb8:	eor	r3, r3, r6, ror #2
   13bbc:	eor	r3, r3, r1
   13bc0:	ldr	r4, [sp, #60]	; 0x3c
   13bc4:	ldr	r7, [fp, #-72]	; 0xffffffb8
   13bc8:	eor	r4, r4, r7, ror #31
   13bcc:	ldr	r7, [fp, #-64]	; 0xffffffc0
   13bd0:	eor	r4, r4, r7, ror #31
   13bd4:	eor	r7, r4, lr, ror #31
   13bd8:	ror	r4, r7, #31
   13bdc:	mov	lr, r7
   13be0:	str	r7, [sp, #96]	; 0x60
   13be4:	add	r5, r4, r5, ror #2
   13be8:	add	r3, r5, r3
   13bec:	add	r3, r3, r0, ror #27
   13bf0:	add	r3, r3, r8
   13bf4:	ror	r5, r1, #2
   13bf8:	eor	r5, r5, r2, ror #2
   13bfc:	eor	r5, r5, r0
   13c00:	ldr	r4, [fp, #-92]	; 0xffffffa4
   13c04:	ldr	r7, [fp, #-80]	; 0xffffffb0
   13c08:	eor	r4, r4, r7, ror #31
   13c0c:	ldr	r7, [fp, #-36]	; 0xffffffdc
   13c10:	eor	r4, r4, r7, ror #31
   13c14:	eor	r9, r4, sl, ror #31
   13c18:	ror	r4, r9, #31
   13c1c:	str	r9, [fp, #-80]	; 0xffffffb0
   13c20:	add	r6, r4, r6, ror #2
   13c24:	add	r6, r6, r5
   13c28:	add	r6, r6, r3, ror #27
   13c2c:	add	ip, r6, r8
   13c30:	ror	r4, r0, #2
   13c34:	eor	r4, r4, r1, ror #2
   13c38:	eor	r4, r4, r3
   13c3c:	ldr	r5, [sp, #88]	; 0x58
   13c40:	ldr	r6, [fp, #-60]	; 0xffffffc4
   13c44:	eor	r5, r5, r6, ror #31
   13c48:	ldr	r7, [fp, #-84]	; 0xffffffac
   13c4c:	eor	r5, r5, r7, ror #31
   13c50:	ldr	r7, [fp, #-40]	; 0xffffffd8
   13c54:	eor	r6, r5, r7, ror #31
   13c58:	ror	r5, r6, #31
   13c5c:	str	r6, [fp, #-72]	; 0xffffffb8
   13c60:	add	r2, r5, r2, ror #2
   13c64:	add	r2, r2, r4
   13c68:	add	r2, r2, ip, ror #27
   13c6c:	add	r2, r2, r8
   13c70:	ror	r4, r3, #2
   13c74:	eor	r4, r4, r0, ror #2
   13c78:	eor	r4, r4, ip
   13c7c:	ldr	r5, [sp, #56]	; 0x38
   13c80:	ldr	r7, [fp, #-88]	; 0xffffffa8
   13c84:	eor	r5, r5, r7, ror #31
   13c88:	ldr	r7, [fp, #-56]	; 0xffffffc8
   13c8c:	eor	r5, r5, r7, ror #31
   13c90:	eor	lr, r5, lr, ror #31
   13c94:	ror	r5, lr, #31
   13c98:	str	lr, [fp, #-68]	; 0xffffffbc
   13c9c:	add	r1, r5, r1, ror #2
   13ca0:	add	r1, r1, r4
   13ca4:	add	r1, r1, r2, ror #27
   13ca8:	add	r1, r1, r8
   13cac:	ror	r4, ip, #2
   13cb0:	eor	r4, r4, r3, ror #2
   13cb4:	eor	r4, r4, r2
   13cb8:	ldr	r5, [sp, #48]	; 0x30
   13cbc:	ldr	r7, [sp, #4]
   13cc0:	eor	r5, r5, r7, ror #31
   13cc4:	ldr	r7, [fp, #-32]	; 0xffffffe0
   13cc8:	eor	r5, r5, r7, ror #31
   13ccc:	eor	r7, r5, r9, ror #31
   13cd0:	ror	r5, r7, #31
   13cd4:	mov	sl, r7
   13cd8:	str	r7, [fp, #-60]	; 0xffffffc4
   13cdc:	add	r0, r5, r0, ror #2
   13ce0:	add	r0, r0, r4
   13ce4:	add	r0, r0, r1, ror #27
   13ce8:	add	r0, r0, r8
   13cec:	mov	r9, r8
   13cf0:	ror	r4, r2, #2
   13cf4:	eor	r4, r4, ip, ror #2
   13cf8:	eor	r4, r4, r1
   13cfc:	ldr	r5, [sp, #44]	; 0x2c
   13d00:	ldr	r7, [fp, #-52]	; 0xffffffcc
   13d04:	eor	r5, r5, r7, ror #31
   13d08:	ldr	r7, [sp, #24]
   13d0c:	eor	r5, r5, r7, ror #31
   13d10:	eor	r8, r5, r6, ror #31
   13d14:	ror	r5, r8, #31
   13d18:	add	r3, r5, r3, ror #2
   13d1c:	add	r3, r3, r4
   13d20:	add	r3, r3, r0, ror #27
   13d24:	add	r4, r3, r9
   13d28:	ror	r3, r1, #2
   13d2c:	eor	r3, r3, r2, ror #2
   13d30:	eor	r3, r3, r0
   13d34:	ldr	r5, [sp, #12]
   13d38:	ldr	r6, [fp, #-48]	; 0xffffffd0
   13d3c:	eor	r5, r5, r6, ror #31
   13d40:	ldr	r6, [sp, #36]	; 0x24
   13d44:	eor	r5, r5, r6, ror #31
   13d48:	eor	r9, r5, lr, ror #31
   13d4c:	ror	r7, r9, #31
   13d50:	add	r7, r7, ip, ror #2
   13d54:	add	r3, r7, r3
   13d58:	add	r3, r3, r4, ror #27
   13d5c:	movw	lr, #49622	; 0xc1d6
   13d60:	movt	lr, #51810	; 0xca62
   13d64:	add	r7, r3, lr
   13d68:	ror	r3, r0, #2
   13d6c:	eor	r3, r3, r1, ror #2
   13d70:	eor	r3, r3, r4
   13d74:	ldr	r6, [sp, #32]
   13d78:	ldr	r5, [fp, #-44]	; 0xffffffd4
   13d7c:	eor	r6, r6, r5, ror #31
   13d80:	ldr	r5, [fp, #-40]	; 0xffffffd8
   13d84:	eor	r6, r6, r5, ror #31
   13d88:	eor	ip, r6, sl, ror #31
   13d8c:	ror	r6, ip, #31
   13d90:	add	r2, r6, r2, ror #2
   13d94:	add	r2, r2, r3
   13d98:	add	r2, r2, r7, ror #27
   13d9c:	add	sl, r2, lr
   13da0:	mov	r5, lr
   13da4:	ror	r2, r4, #2
   13da8:	eor	r2, r2, r0, ror #2
   13dac:	eor	r6, r2, r7
   13db0:	ldr	r2, [sp, #28]
   13db4:	ldr	r3, [fp, #-64]	; 0xffffffc0
   13db8:	eor	r2, r2, r3, ror #31
   13dbc:	ldr	r3, [sp, #96]	; 0x60
   13dc0:	eor	r2, r2, r3, ror #31
   13dc4:	eor	lr, r2, r8, ror #31
   13dc8:	ror	r2, lr, #31
   13dcc:	add	r1, r2, r1, ror #2
   13dd0:	add	r1, r1, r6
   13dd4:	add	r1, r1, sl, ror #27
   13dd8:	add	r1, r1, r5
   13ddc:	mov	r8, r5
   13de0:	ldr	r2, [sp, #80]	; 0x50
   13de4:	add	r2, r2, r1, ror #2
   13de8:	ldr	r3, [sp, #84]	; 0x54
   13dec:	str	r2, [r3, #16]
   13df0:	ror	r2, r7, #2
   13df4:	eor	r2, r2, r4, ror #2
   13df8:	eor	r2, r2, sl
   13dfc:	ldr	r6, [sp, #40]	; 0x28
   13e00:	ldr	r5, [fp, #-36]	; 0xffffffdc
   13e04:	eor	r6, r6, r5, ror #31
   13e08:	ldr	r5, [fp, #-80]	; 0xffffffb0
   13e0c:	eor	r6, r6, r5, ror #31
   13e10:	eor	r9, r6, r9, ror #31
   13e14:	ror	r6, r9, #31
   13e18:	add	r0, r6, r0, ror #2
   13e1c:	add	r0, r0, r2
   13e20:	add	r0, r0, r1, ror #27
   13e24:	add	r0, r0, r8
   13e28:	ldr	r2, [sp, #68]	; 0x44
   13e2c:	add	r2, r2, r0, ror #2
   13e30:	str	r2, [r3, #12]
   13e34:	mov	r5, r3
   13e38:	ror	r2, sl, #2
   13e3c:	eor	r2, r2, r7, ror #2
   13e40:	eor	r2, r2, r1
   13e44:	ldr	r3, [sp, #52]	; 0x34
   13e48:	ldr	r6, [fp, #-84]	; 0xffffffac
   13e4c:	eor	r6, r3, r6, ror #31
   13e50:	ldr	r3, [fp, #-72]	; 0xffffffb8
   13e54:	eor	r6, r6, r3, ror #31
   13e58:	eor	r6, r6, ip, ror #31
   13e5c:	ror	r6, r6, #31
   13e60:	add	r6, r6, r4, ror #2
   13e64:	add	r2, r6, r2
   13e68:	add	r2, r2, r0, ror #27
   13e6c:	add	r2, r2, r8
   13e70:	ldr	r3, [sp, #72]	; 0x48
   13e74:	add	r6, r3, r2, ror #2
   13e78:	str	r6, [r5, #8]
   13e7c:	ror	r6, r1, #2
   13e80:	eor	r6, r6, sl, ror #2
   13e84:	eor	r6, r6, r0
   13e88:	ldr	r3, [sp, #92]	; 0x5c
   13e8c:	ldr	r4, [fp, #-56]	; 0xffffffc8
   13e90:	eor	r4, r3, r4, ror #31
   13e94:	ldr	r3, [fp, #-68]	; 0xffffffbc
   13e98:	eor	r4, r4, r3, ror #31
   13e9c:	eor	r4, r4, lr, ror #31
   13ea0:	ror	r4, r4, #31
   13ea4:	add	r7, r4, r7, ror #2
   13ea8:	add	r7, r7, r6
   13eac:	add	r7, r7, r2, ror #27
   13eb0:	add	r7, r7, r8
   13eb4:	ldr	r3, [sp, #76]	; 0x4c
   13eb8:	add	r6, r7, r3
   13ebc:	str	r6, [r5, #4]
   13ec0:	ror	r0, r0, #2
   13ec4:	eor	r0, r0, r1, ror #2
   13ec8:	eor	r0, r0, r2
   13ecc:	ldr	r1, [fp, #-76]	; 0xffffffb4
   13ed0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13ed4:	eor	r1, r1, r2, ror #31
   13ed8:	ldr	r2, [fp, #-60]	; 0xffffffc4
   13edc:	eor	r1, r1, r2, ror #31
   13ee0:	eor	r1, r1, r9, ror #31
   13ee4:	ldr	r2, [sp, #64]	; 0x40
   13ee8:	add	r1, r2, r1, ror #31
   13eec:	add	r1, r1, sl, ror #2
   13ef0:	add	r0, r1, r0
   13ef4:	add	r0, r0, r7, ror #27
   13ef8:	add	r0, r0, r8
   13efc:	str	r0, [r5]
   13f00:	sub	sp, fp, #28
   13f04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13f08:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13f0c:	add	fp, sp, #24
   13f10:	sub	sp, sp, #8
   13f14:	mov	r8, r1
   13f18:	mov	r4, r0
   13f1c:	ldrd	r0, [r0, #24]
   13f20:	mov	r2, #0
   13f24:	mov	r3, sp
   13f28:	eor	r7, r2, #56	; 0x38
   13f2c:	lsr	r6, r0, r7
   13f30:	rsb	r5, r7, #32
   13f34:	orr	r6, r6, r1, lsl r5
   13f38:	subs	r7, r7, #32
   13f3c:	lsrpl	r6, r1, r7
   13f40:	strb	r6, [r3], #1
   13f44:	add	r2, r2, #8
   13f48:	cmp	r2, #64	; 0x40
   13f4c:	bne	13f28 <rb_base64_encode@plt+0x2ee0>
   13f50:	movw	r1, #17347	; 0x43c3
   13f54:	movt	r1, #1
   13f58:	mov	r0, r4
   13f5c:	mov	r2, #1
   13f60:	bl	1298c <rb_base64_encode@plt+0x1944>
   13f64:	mov	r7, r4
   13f68:	ldr	r0, [r7, #24]!
   13f6c:	and	r0, r0, #504	; 0x1f8
   13f70:	teq	r0, #448	; 0x1c0
   13f74:	beq	13fa0 <rb_base64_encode@plt+0x2f58>
   13f78:	movw	r6, #17349	; 0x43c5
   13f7c:	movt	r6, #1
   13f80:	mov	r0, r4
   13f84:	mov	r1, r6
   13f88:	mov	r2, #1
   13f8c:	bl	1298c <rb_base64_encode@plt+0x1944>
   13f90:	ldr	r0, [r7]
   13f94:	and	r0, r0, #504	; 0x1f8
   13f98:	teq	r0, #448	; 0x1c0
   13f9c:	bne	13f80 <rb_base64_encode@plt+0x2f38>
   13fa0:	mov	r1, sp
   13fa4:	mov	r0, r4
   13fa8:	mov	r2, #8
   13fac:	bl	1298c <rb_base64_encode@plt+0x1944>
   13fb0:	mov	r0, #0
   13fb4:	mov	r1, #24
   13fb8:	mov	r2, #0
   13fbc:	bic	r3, r2, #3
   13fc0:	ldr	r3, [r4, r3]
   13fc4:	bic	r7, r1, r0
   13fc8:	lsr	r3, r3, r7
   13fcc:	strb	r3, [r8, r2]
   13fd0:	add	r0, r0, #8
   13fd4:	add	r2, r2, #1
   13fd8:	cmp	r2, #20
   13fdc:	bne	13fbc <rb_base64_encode@plt+0x2f74>
   13fe0:	vmov.i32	q8, #0	; 0x00000000
   13fe4:	mov	r0, #80	; 0x50
   13fe8:	mov	r1, r4
   13fec:	vst1.64	{d16-d17}, [r1], r0
   13ff0:	vst1.64	{d16-d17}, [r1]
   13ff4:	add	r0, r4, #64	; 0x40
   13ff8:	vst1.64	{d16-d17}, [r0]
   13ffc:	add	r0, r4, #48	; 0x30
   14000:	vst1.64	{d16-d17}, [r0]
   14004:	add	r0, r4, #32
   14008:	vst1.64	{d16-d17}, [r0]
   1400c:	add	r0, r4, #16
   14010:	vst1.64	{d16-d17}, [r0]
   14014:	sub	sp, fp, #24
   14018:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1401c:	rev	r0, r0
   14020:	bx	lr
   14024:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14028:	mov	r7, r0
   1402c:	ldr	r6, [pc, #72]	; 1407c <rb_base64_encode@plt+0x3034>
   14030:	ldr	r5, [pc, #72]	; 14080 <rb_base64_encode@plt+0x3038>
   14034:	add	r6, pc, r6
   14038:	add	r5, pc, r5
   1403c:	sub	r6, r6, r5
   14040:	mov	r8, r1
   14044:	mov	r9, r2
   14048:	bl	10db8 <open@plt-0x20>
   1404c:	asrs	r6, r6, #2
   14050:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   14054:	mov	r4, #0
   14058:	add	r4, r4, #1
   1405c:	ldr	r3, [r5], #4
   14060:	mov	r2, r9
   14064:	mov	r1, r8
   14068:	mov	r0, r7
   1406c:	blx	r3
   14070:	cmp	r6, r4
   14074:	bne	14058 <rb_base64_encode@plt+0x3010>
   14078:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1407c:			; <UNDEFINED> instruction: 0x00010eb8
   14080:			; <UNDEFINED> instruction: 0x00010eb0
   14084:	bx	lr

Disassembly of section .fini:

00014088 <.fini>:
   14088:	push	{r3, lr}
   1408c:	pop	{r3, pc}
