
../repos/coreutils/src/chown:     file format elf32-littlearm


Disassembly of section .init:

0001100c <.init>:
   1100c:	push	{r3, lr}
   11010:	bl	118e0 <__assert_fail@plt+0x554>
   11014:	pop	{r3, pc}

Disassembly of section .plt:

00011018 <fstatfs64@plt-0x14>:
   11018:	push	{lr}		; (str lr, [sp, #-4]!)
   1101c:	ldr	lr, [pc, #4]	; 11028 <fstatfs64@plt-0x4>
   11020:	add	lr, pc, lr
   11024:	ldr	pc, [lr, #8]!
   11028:	ldrdeq	sp, [r1], -r8

0001102c <fstatfs64@plt>:
   1102c:	add	ip, pc, #0, 12
   11030:	add	ip, ip, #118784	; 0x1d000
   11034:	ldr	pc, [ip, #4056]!	; 0xfd8

00011038 <calloc@plt>:
   11038:	add	ip, pc, #0, 12
   1103c:	add	ip, ip, #118784	; 0x1d000
   11040:	ldr	pc, [ip, #4048]!	; 0xfd0

00011044 <endgrent@plt>:
   11044:	add	ip, pc, #0, 12
   11048:	add	ip, ip, #118784	; 0x1d000
   1104c:	ldr	pc, [ip, #4040]!	; 0xfc8

00011050 <fputs_unlocked@plt>:
   11050:	add	ip, pc, #0, 12
   11054:	add	ip, ip, #118784	; 0x1d000
   11058:	ldr	pc, [ip, #4032]!	; 0xfc0

0001105c <raise@plt>:
   1105c:	add	ip, pc, #0, 12
   11060:	add	ip, ip, #118784	; 0x1d000
   11064:	ldr	pc, [ip, #4024]!	; 0xfb8

00011068 <getpwnam@plt>:
   11068:	add	ip, pc, #0, 12
   1106c:	add	ip, ip, #118784	; 0x1d000
   11070:	ldr	pc, [ip, #4016]!	; 0xfb0

00011074 <strcmp@plt>:
   11074:	add	ip, pc, #0, 12
   11078:	add	ip, ip, #118784	; 0x1d000
   1107c:	ldr	pc, [ip, #4008]!	; 0xfa8

00011080 <getpwuid@plt>:
   11080:	add	ip, pc, #0, 12
   11084:	add	ip, ip, #118784	; 0x1d000
   11088:	ldr	pc, [ip, #4000]!	; 0xfa0

0001108c <fflush@plt>:
   1108c:	add	ip, pc, #0, 12
   11090:	add	ip, ip, #118784	; 0x1d000
   11094:	ldr	pc, [ip, #3992]!	; 0xf98

00011098 <memmove@plt>:
   11098:	add	ip, pc, #0, 12
   1109c:	add	ip, ip, #118784	; 0x1d000
   110a0:	ldr	pc, [ip, #3984]!	; 0xf90

000110a4 <free@plt>:
   110a4:	add	ip, pc, #0, 12
   110a8:	add	ip, ip, #118784	; 0x1d000
   110ac:	ldr	pc, [ip, #3976]!	; 0xf88

000110b0 <__openat64_2@plt>:
   110b0:	add	ip, pc, #0, 12
   110b4:	add	ip, ip, #118784	; 0x1d000
   110b8:	ldr	pc, [ip, #3968]!	; 0xf80

000110bc <_exit@plt>:
   110bc:	add	ip, pc, #0, 12
   110c0:	add	ip, ip, #118784	; 0x1d000
   110c4:	ldr	pc, [ip, #3960]!	; 0xf78

000110c8 <memcpy@plt>:
   110c8:	add	ip, pc, #0, 12
   110cc:	add	ip, ip, #118784	; 0x1d000
   110d0:	ldr	pc, [ip, #3952]!	; 0xf70

000110d4 <mbsinit@plt>:
   110d4:	add	ip, pc, #0, 12
   110d8:	add	ip, ip, #118784	; 0x1d000
   110dc:	ldr	pc, [ip, #3944]!	; 0xf68

000110e0 <memcmp@plt>:
   110e0:	add	ip, pc, #0, 12
   110e4:	add	ip, ip, #118784	; 0x1d000
   110e8:	ldr	pc, [ip, #3936]!	; 0xf60

000110ec <stpcpy@plt>:
   110ec:	add	ip, pc, #0, 12
   110f0:	add	ip, ip, #118784	; 0x1d000
   110f4:	ldr	pc, [ip, #3928]!	; 0xf58

000110f8 <fputc_unlocked@plt>:
   110f8:	add	ip, pc, #0, 12
   110fc:	add	ip, ip, #118784	; 0x1d000
   11100:	ldr	pc, [ip, #3920]!	; 0xf50

00011104 <dcgettext@plt>:
   11104:	add	ip, pc, #0, 12
   11108:	add	ip, ip, #118784	; 0x1d000
   1110c:	ldr	pc, [ip, #3912]!	; 0xf48

00011110 <realloc@plt>:
   11110:	add	ip, pc, #0, 12
   11114:	add	ip, ip, #118784	; 0x1d000
   11118:	ldr	pc, [ip, #3904]!	; 0xf40

0001111c <textdomain@plt>:
   1111c:	add	ip, pc, #0, 12
   11120:	add	ip, ip, #118784	; 0x1d000
   11124:	ldr	pc, [ip, #3896]!	; 0xf38

00011128 <__fxstatat64@plt>:
   11128:	add	ip, pc, #0, 12
   1112c:	add	ip, ip, #118784	; 0x1d000
   11130:	ldr	pc, [ip, #3888]!	; 0xf30

00011134 <iswprint@plt>:
   11134:	add	ip, pc, #0, 12
   11138:	add	ip, ip, #118784	; 0x1d000
   1113c:	ldr	pc, [ip, #3880]!	; 0xf28

00011140 <__fxstat64@plt>:
   11140:	add	ip, pc, #0, 12
   11144:	add	ip, ip, #118784	; 0x1d000
   11148:	ldr	pc, [ip, #3872]!	; 0xf20

0001114c <fwrite@plt>:
   1114c:	add	ip, pc, #0, 12
   11150:	add	ip, ip, #118784	; 0x1d000
   11154:	ldr	pc, [ip, #3864]!	; 0xf18

00011158 <lseek64@plt>:
   11158:	add	ip, pc, #0, 12
   1115c:	add	ip, ip, #118784	; 0x1d000
   11160:	ldr	pc, [ip, #3856]!	; 0xf10

00011164 <__ctype_get_mb_cur_max@plt>:
   11164:	add	ip, pc, #0, 12
   11168:	add	ip, ip, #118784	; 0x1d000
   1116c:	ldr	pc, [ip, #3848]!	; 0xf08

00011170 <strcpy@plt>:
   11170:	add	ip, pc, #0, 12
   11174:	add	ip, ip, #118784	; 0x1d000
   11178:	ldr	pc, [ip, #3840]!	; 0xf00

0001117c <__fpending@plt>:
   1117c:	add	ip, pc, #0, 12
   11180:	add	ip, ip, #118784	; 0x1d000
   11184:	ldr	pc, [ip, #3832]!	; 0xef8

00011188 <mbrtowc@plt>:
   11188:	add	ip, pc, #0, 12
   1118c:	add	ip, ip, #118784	; 0x1d000
   11190:	ldr	pc, [ip, #3824]!	; 0xef0

00011194 <error@plt>:
   11194:	add	ip, pc, #0, 12
   11198:	add	ip, ip, #118784	; 0x1d000
   1119c:	ldr	pc, [ip, #3816]!	; 0xee8

000111a0 <open64@plt>:
   111a0:	add	ip, pc, #0, 12
   111a4:	add	ip, ip, #118784	; 0x1d000
   111a8:	ldr	pc, [ip, #3808]!	; 0xee0

000111ac <malloc@plt>:
   111ac:	add	ip, pc, #0, 12
   111b0:	add	ip, ip, #118784	; 0x1d000
   111b4:	ldr	pc, [ip, #3800]!	; 0xed8

000111b8 <__libc_start_main@plt>:
   111b8:	add	ip, pc, #0, 12
   111bc:	add	ip, ip, #118784	; 0x1d000
   111c0:	ldr	pc, [ip, #3792]!	; 0xed0

000111c4 <__freading@plt>:
   111c4:	add	ip, pc, #0, 12
   111c8:	add	ip, ip, #118784	; 0x1d000
   111cc:	ldr	pc, [ip, #3784]!	; 0xec8

000111d0 <__gmon_start__@plt>:
   111d0:	add	ip, pc, #0, 12
   111d4:	add	ip, ip, #118784	; 0x1d000
   111d8:	ldr	pc, [ip, #3776]!	; 0xec0

000111dc <getopt_long@plt>:
   111dc:	add	ip, pc, #0, 12
   111e0:	add	ip, ip, #118784	; 0x1d000
   111e4:	ldr	pc, [ip, #3768]!	; 0xeb8

000111e8 <__ctype_b_loc@plt>:
   111e8:	add	ip, pc, #0, 12
   111ec:	add	ip, ip, #118784	; 0x1d000
   111f0:	ldr	pc, [ip, #3760]!	; 0xeb0

000111f4 <exit@plt>:
   111f4:	add	ip, pc, #0, 12
   111f8:	add	ip, ip, #118784	; 0x1d000
   111fc:	ldr	pc, [ip, #3752]!	; 0xea8

00011200 <strtoul@plt>:
   11200:	add	ip, pc, #0, 12
   11204:	add	ip, ip, #118784	; 0x1d000
   11208:	ldr	pc, [ip, #3744]!	; 0xea0

0001120c <strlen@plt>:
   1120c:	add	ip, pc, #0, 12
   11210:	add	ip, ip, #118784	; 0x1d000
   11214:	ldr	pc, [ip, #3736]!	; 0xe98

00011218 <strchr@plt>:
   11218:	add	ip, pc, #0, 12
   1121c:	add	ip, ip, #118784	; 0x1d000
   11220:	ldr	pc, [ip, #3728]!	; 0xe90

00011224 <openat64@plt>:
   11224:	add	ip, pc, #0, 12
   11228:	add	ip, ip, #118784	; 0x1d000
   1122c:	ldr	pc, [ip, #3720]!	; 0xe88

00011230 <fchown@plt>:
   11230:	add	ip, pc, #0, 12
   11234:	add	ip, ip, #118784	; 0x1d000
   11238:	ldr	pc, [ip, #3712]!	; 0xe80

0001123c <__errno_location@plt>:
   1123c:	add	ip, pc, #0, 12
   11240:	add	ip, ip, #118784	; 0x1d000
   11244:	ldr	pc, [ip, #3704]!	; 0xe78

00011248 <__cxa_atexit@plt>:
   11248:	add	ip, pc, #0, 12
   1124c:	add	ip, ip, #118784	; 0x1d000
   11250:	ldr	pc, [ip, #3696]!	; 0xe70

00011254 <memset@plt>:
   11254:	add	ip, pc, #0, 12
   11258:	add	ip, ip, #118784	; 0x1d000
   1125c:	ldr	pc, [ip, #3688]!	; 0xe68

00011260 <__printf_chk@plt>:
   11260:	add	ip, pc, #0, 12
   11264:	add	ip, ip, #118784	; 0x1d000
   11268:	ldr	pc, [ip, #3680]!	; 0xe60

0001126c <fileno@plt>:
   1126c:	add	ip, pc, #0, 12
   11270:	add	ip, ip, #118784	; 0x1d000
   11274:	ldr	pc, [ip, #3672]!	; 0xe58

00011278 <__fprintf_chk@plt>:
   11278:	add	ip, pc, #0, 12
   1127c:	add	ip, ip, #118784	; 0x1d000
   11280:	ldr	pc, [ip, #3664]!	; 0xe50

00011284 <fclose@plt>:
   11284:	add	ip, pc, #0, 12
   11288:	add	ip, ip, #118784	; 0x1d000
   1128c:	ldr	pc, [ip, #3656]!	; 0xe48

00011290 <fseeko64@plt>:
   11290:	add	ip, pc, #0, 12
   11294:	add	ip, ip, #118784	; 0x1d000
   11298:	ldr	pc, [ip, #3648]!	; 0xe40

0001129c <fcntl64@plt>:
   1129c:	add	ip, pc, #0, 12
   112a0:	add	ip, ip, #118784	; 0x1d000
   112a4:	ldr	pc, [ip, #3640]!	; 0xe38

000112a8 <setlocale@plt>:
   112a8:	add	ip, pc, #0, 12
   112ac:	add	ip, ip, #118784	; 0x1d000
   112b0:	ldr	pc, [ip, #3632]!	; 0xe30

000112b4 <endpwent@plt>:
   112b4:	add	ip, pc, #0, 12
   112b8:	add	ip, ip, #118784	; 0x1d000
   112bc:	ldr	pc, [ip, #3624]!	; 0xe28

000112c0 <strrchr@plt>:
   112c0:	add	ip, pc, #0, 12
   112c4:	add	ip, ip, #118784	; 0x1d000
   112c8:	ldr	pc, [ip, #3616]!	; 0xe20

000112cc <nl_langinfo@plt>:
   112cc:	add	ip, pc, #0, 12
   112d0:	add	ip, ip, #118784	; 0x1d000
   112d4:	ldr	pc, [ip, #3608]!	; 0xe18

000112d8 <readdir64@plt>:
   112d8:	add	ip, pc, #0, 12
   112dc:	add	ip, ip, #118784	; 0x1d000
   112e0:	ldr	pc, [ip, #3600]!	; 0xe10

000112e4 <fdopendir@plt>:
   112e4:	add	ip, pc, #0, 12
   112e8:	add	ip, ip, #118784	; 0x1d000
   112ec:	ldr	pc, [ip, #3592]!	; 0xe08

000112f0 <dirfd@plt>:
   112f0:	add	ip, pc, #0, 12
   112f4:	add	ip, ip, #118784	; 0x1d000
   112f8:	ldr	pc, [ip, #3584]!	; 0xe00

000112fc <fchdir@plt>:
   112fc:	add	ip, pc, #0, 12
   11300:	add	ip, ip, #118784	; 0x1d000
   11304:	ldr	pc, [ip, #3576]!	; 0xdf8

00011308 <qsort@plt>:
   11308:	add	ip, pc, #0, 12
   1130c:	add	ip, ip, #118784	; 0x1d000
   11310:	ldr	pc, [ip, #3568]!	; 0xdf0

00011314 <fchownat@plt>:
   11314:	add	ip, pc, #0, 12
   11318:	add	ip, ip, #118784	; 0x1d000
   1131c:	ldr	pc, [ip, #3560]!	; 0xde8

00011320 <bindtextdomain@plt>:
   11320:	add	ip, pc, #0, 12
   11324:	add	ip, ip, #118784	; 0x1d000
   11328:	ldr	pc, [ip, #3552]!	; 0xde0

0001132c <__xstat64@plt>:
   1132c:	add	ip, pc, #0, 12
   11330:	add	ip, ip, #118784	; 0x1d000
   11334:	ldr	pc, [ip, #3544]!	; 0xdd8

00011338 <strncmp@plt>:
   11338:	add	ip, pc, #0, 12
   1133c:	add	ip, ip, #118784	; 0x1d000
   11340:	ldr	pc, [ip, #3536]!	; 0xdd0

00011344 <abort@plt>:
   11344:	add	ip, pc, #0, 12
   11348:	add	ip, ip, #118784	; 0x1d000
   1134c:	ldr	pc, [ip, #3528]!	; 0xdc8

00011350 <close@plt>:
   11350:	add	ip, pc, #0, 12
   11354:	add	ip, ip, #118784	; 0x1d000
   11358:	ldr	pc, [ip, #3520]!	; 0xdc0

0001135c <__lxstat64@plt>:
   1135c:	add	ip, pc, #0, 12
   11360:	add	ip, ip, #118784	; 0x1d000
   11364:	ldr	pc, [ip, #3512]!	; 0xdb8

00011368 <closedir@plt>:
   11368:	add	ip, pc, #0, 12
   1136c:	add	ip, ip, #118784	; 0x1d000
   11370:	ldr	pc, [ip, #3504]!	; 0xdb0

00011374 <getgrgid@plt>:
   11374:	add	ip, pc, #0, 12
   11378:	add	ip, ip, #118784	; 0x1d000
   1137c:	ldr	pc, [ip, #3496]!	; 0xda8

00011380 <getgrnam@plt>:
   11380:	add	ip, pc, #0, 12
   11384:	add	ip, ip, #118784	; 0x1d000
   11388:	ldr	pc, [ip, #3488]!	; 0xda0

0001138c <__assert_fail@plt>:
   1138c:	add	ip, pc, #0, 12
   11390:	add	ip, ip, #118784	; 0x1d000
   11394:	ldr	pc, [ip, #3480]!	; 0xd98

Disassembly of section .text:

00011398 <.text>:
   11398:	mvn	r3, #0
   1139c:	movw	r2, #61856	; 0xf1a0
   113a0:	movt	r2, #2
   113a4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   113a8:	movw	r5, #55184	; 0xd790
   113ac:	movt	r5, #1
   113b0:	strd	r6, [sp, #8]
   113b4:	mov	r7, r0
   113b8:	strd	r8, [sp, #16]
   113bc:	mov	r6, r1
   113c0:	mov	r8, #16
   113c4:	strd	sl, [sp, #24]
   113c8:	mov	sl, r3
   113cc:	mov	fp, #0
   113d0:	str	lr, [sp, #32]
   113d4:	sub	sp, sp, #172	; 0xac
   113d8:	ldr	r0, [r1]
   113dc:	str	r2, [sp, #16]
   113e0:	str	r3, [sp, #24]
   113e4:	str	r3, [sp, #28]
   113e8:	str	r3, [sp, #32]
   113ec:	str	r3, [sp, #36]	; 0x24
   113f0:	bl	16dd8 <__assert_fail@plt+0x5a4c>
   113f4:	movw	r1, #54380	; 0xd46c
   113f8:	movt	r1, #1
   113fc:	ldr	r9, [pc, #1176]	; 1189c <__assert_fail@plt+0x510>
   11400:	mov	r0, #6
   11404:	bl	112a8 <setlocale@plt>
   11408:	movw	r1, #55120	; 0xd750
   1140c:	movt	r1, #1
   11410:	movw	r0, #54952	; 0xd6a8
   11414:	movt	r0, #1
   11418:	bl	11320 <bindtextdomain@plt>
   1141c:	movw	r0, #54952	; 0xd6a8
   11420:	movt	r0, #1
   11424:	bl	1111c <textdomain@plt>
   11428:	movw	r0, #11500	; 0x2cec
   1142c:	movt	r0, #1
   11430:	bl	1cb74 <__assert_fail@plt+0xb7e8>
   11434:	add	r0, sp, #40	; 0x28
   11438:	bl	11e74 <__assert_fail@plt+0xae8>
   1143c:	mov	r4, #0
   11440:	mov	r3, r9
   11444:	mov	r2, r5
   11448:	mov	r1, r6
   1144c:	mov	r0, r7
   11450:	str	r4, [sp]
   11454:	bl	111dc <getopt_long@plt>
   11458:	cmn	r0, #1
   1145c:	beq	11600 <__assert_fail@plt+0x274>
   11460:	cmp	r0, #102	; 0x66
   11464:	beq	11540 <__assert_fail@plt+0x1b4>
   11468:	bgt	11498 <__assert_fail@plt+0x10c>
   1146c:	cmp	r0, #76	; 0x4c
   11470:	beq	11538 <__assert_fail@plt+0x1ac>
   11474:	bgt	114c8 <__assert_fail@plt+0x13c>
   11478:	cmn	r0, #2
   1147c:	beq	115f8 <__assert_fail@plt+0x26c>
   11480:	cmp	r0, #72	; 0x48
   11484:	beq	11518 <__assert_fail@plt+0x18c>
   11488:	cmn	r0, #3
   1148c:	beq	1154c <__assert_fail@plt+0x1c0>
   11490:	mov	r0, #1
   11494:	bl	11994 <__assert_fail@plt+0x608>
   11498:	movw	r3, #257	; 0x101
   1149c:	cmp	r0, r3
   114a0:	beq	115b8 <__assert_fail@plt+0x22c>
   114a4:	bgt	114e8 <__assert_fail@plt+0x15c>
   114a8:	cmp	r0, #118	; 0x76
   114ac:	beq	115b0 <__assert_fail@plt+0x224>
   114b0:	cmp	r0, #256	; 0x100
   114b4:	beq	11520 <__assert_fail@plt+0x194>
   114b8:	cmp	r0, #104	; 0x68
   114bc:	bne	11490 <__assert_fail@plt+0x104>
   114c0:	mov	sl, r4
   114c4:	b	1143c <__assert_fail@plt+0xb0>
   114c8:	cmp	r0, #82	; 0x52
   114cc:	beq	115a4 <__assert_fail@plt+0x218>
   114d0:	cmp	r0, #99	; 0x63
   114d4:	beq	11598 <__assert_fail@plt+0x20c>
   114d8:	cmp	r0, #80	; 0x50
   114dc:	bne	11490 <__assert_fail@plt+0x104>
   114e0:	mov	r8, #16
   114e4:	b	1143c <__assert_fail@plt+0xb0>
   114e8:	movw	r3, #259	; 0x103
   114ec:	cmp	r0, r3
   114f0:	beq	11530 <__assert_fail@plt+0x1a4>
   114f4:	blt	11528 <__assert_fail@plt+0x19c>
   114f8:	cmp	r0, #260	; 0x104
   114fc:	bne	11490 <__assert_fail@plt+0x104>
   11500:	ldr	r3, [sp, #16]
   11504:	ldr	r2, [r3]
   11508:	movw	r3, #61864	; 0xf1a8
   1150c:	movt	r3, #2
   11510:	str	r2, [r3]
   11514:	b	1143c <__assert_fail@plt+0xb0>
   11518:	mov	r8, #17
   1151c:	b	1143c <__assert_fail@plt+0xb0>
   11520:	mov	sl, #1
   11524:	b	1143c <__assert_fail@plt+0xb0>
   11528:	mov	fp, r4
   1152c:	b	1143c <__assert_fail@plt+0xb0>
   11530:	mov	fp, #1
   11534:	b	1143c <__assert_fail@plt+0xb0>
   11538:	mov	r8, #2
   1153c:	b	1143c <__assert_fail@plt+0xb0>
   11540:	mov	r3, #1
   11544:	strb	r3, [sp, #53]	; 0x35
   11548:	b	1143c <__assert_fail@plt+0xb0>
   1154c:	movw	r1, #55152	; 0xd770
   11550:	movt	r1, #1
   11554:	movw	r2, #55168	; 0xd780
   11558:	movt	r2, #1
   1155c:	movw	r3, #61756	; 0xf13c
   11560:	movt	r3, #2
   11564:	movw	r0, #61852	; 0xf19c
   11568:	movt	r0, #2
   1156c:	str	r2, [sp]
   11570:	movw	r2, #54948	; 0xd6a4
   11574:	movt	r2, #1
   11578:	stmib	sp, {r1, r4}
   1157c:	movw	r1, #52400	; 0xccb0
   11580:	movt	r1, #1
   11584:	ldr	r0, [r0]
   11588:	ldr	r3, [r3]
   1158c:	bl	1b2c4 <__assert_fail@plt+0x9f38>
   11590:	mov	r0, r4
   11594:	bl	111f4 <exit@plt>
   11598:	mov	r3, #1
   1159c:	str	r3, [sp, #40]	; 0x28
   115a0:	b	1143c <__assert_fail@plt+0xb0>
   115a4:	mov	r3, #1
   115a8:	strb	r3, [sp, #44]	; 0x2c
   115ac:	b	1143c <__assert_fail@plt+0xb0>
   115b0:	str	r4, [sp, #40]	; 0x28
   115b4:	b	1143c <__assert_fail@plt+0xb0>
   115b8:	ldr	r0, [sp, #16]
   115bc:	mov	r3, r4
   115c0:	add	r2, sp, #36	; 0x24
   115c4:	add	r1, sp, #32
   115c8:	str	r4, [sp]
   115cc:	ldr	r0, [r0]
   115d0:	bl	1acac <__assert_fail@plt+0x9920>
   115d4:	cmp	r0, #0
   115d8:	beq	1143c <__assert_fail@plt+0xb0>
   115dc:	ldr	r3, [sp, #16]
   115e0:	str	r0, [sp, #20]
   115e4:	ldr	r0, [r3]
   115e8:	bl	1a748 <__assert_fail@plt+0x93bc>
   115ec:	mov	r1, r4
   115f0:	ldr	r3, [sp, #20]
   115f4:	b	11848 <__assert_fail@plt+0x4bc>
   115f8:	mov	r0, r4
   115fc:	bl	11994 <__assert_fail@plt+0x608>
   11600:	ldrb	r3, [sp, #44]	; 0x2c
   11604:	cmp	r3, r4
   11608:	beq	116fc <__assert_fail@plt+0x370>
   1160c:	cmp	r8, #16
   11610:	beq	11740 <__assert_fail@plt+0x3b4>
   11614:	movw	r3, #61864	; 0xf1a8
   11618:	movt	r3, #2
   1161c:	movw	r4, #61840	; 0xf190
   11620:	movt	r4, #2
   11624:	ldr	r5, [r3]
   11628:	adds	sl, sl, #0
   1162c:	ldr	r2, [r4]
   11630:	movne	sl, #1
   11634:	strb	sl, [sp, #52]	; 0x34
   11638:	cmp	r5, #0
   1163c:	sub	r3, r7, r2
   11640:	beq	11770 <__assert_fail@plt+0x3e4>
   11644:	cmp	r3, #0
   11648:	ble	116cc <__assert_fail@plt+0x340>
   1164c:	add	r2, sp, #64	; 0x40
   11650:	mov	r1, r5
   11654:	mov	r0, #3
   11658:	bl	1132c <__xstat64@plt>
   1165c:	cmp	r0, #0
   11660:	bne	1185c <__assert_fail@plt+0x4d0>
   11664:	ldr	r3, [sp, #88]	; 0x58
   11668:	ldr	r2, [sp, #92]	; 0x5c
   1166c:	mov	r0, r3
   11670:	str	r3, [sp, #24]
   11674:	str	r2, [sp, #28]
   11678:	bl	11f08 <__assert_fail@plt+0xb7c>
   1167c:	str	r0, [sp, #56]	; 0x38
   11680:	ldr	r0, [sp, #92]	; 0x5c
   11684:	bl	11ec4 <__assert_fail@plt+0xb38>
   11688:	str	r0, [sp, #60]	; 0x3c
   1168c:	ldrb	r3, [sp, #44]	; 0x2c
   11690:	tst	fp, r3
   11694:	bne	117b8 <__assert_fail@plt+0x42c>
   11698:	add	r3, sp, #40	; 0x28
   1169c:	ldr	r2, [sp, #32]
   116a0:	orr	r1, r8, #1024	; 0x400
   116a4:	str	r3, [sp, #8]
   116a8:	ldr	r0, [r4]
   116ac:	ldr	r3, [sp, #36]	; 0x24
   116b0:	add	r0, r6, r0, lsl #2
   116b4:	strd	r2, [sp]
   116b8:	ldrd	r2, [sp, #24]
   116bc:	bl	11f4c <__assert_fail@plt+0xbc0>
   116c0:	eor	r0, r0, #1
   116c4:	uxtb	r0, r0
   116c8:	bl	111f4 <exit@plt>
   116cc:	cmp	r2, r7
   116d0:	blt	11704 <__assert_fail@plt+0x378>
   116d4:	mov	r2, #5
   116d8:	movw	r1, #55240	; 0xd7c8
   116dc:	movt	r1, #1
   116e0:	mov	r0, #0
   116e4:	bl	11104 <dcgettext@plt>
   116e8:	mov	r1, #0
   116ec:	mov	r2, r0
   116f0:	mov	r0, r1
   116f4:	bl	11194 <error@plt>
   116f8:	b	11490 <__assert_fail@plt+0x104>
   116fc:	mov	r8, #16
   11700:	b	11614 <__assert_fail@plt+0x288>
   11704:	mov	r2, #5
   11708:	movw	r1, #55256	; 0xd7d8
   1170c:	movt	r1, #1
   11710:	mov	r0, #0
   11714:	bl	11104 <dcgettext@plt>
   11718:	sub	r7, r7, #-1073741823	; 0xc0000001
   1171c:	mov	r4, r0
   11720:	ldr	r0, [r6, r7, lsl #2]
   11724:	bl	1a748 <__assert_fail@plt+0x93bc>
   11728:	mov	r1, #0
   1172c:	mov	r3, r0
   11730:	mov	r2, r4
   11734:	mov	r0, r1
   11738:	bl	11194 <error@plt>
   1173c:	b	11490 <__assert_fail@plt+0x104>
   11740:	cmp	sl, #1
   11744:	movne	sl, r4
   11748:	bne	11614 <__assert_fail@plt+0x288>
   1174c:	mov	r2, #5
   11750:	movw	r1, #55196	; 0xd79c
   11754:	movt	r1, #1
   11758:	mov	r0, r4
   1175c:	bl	11104 <dcgettext@plt>
   11760:	mov	r2, r0
   11764:	mov	r1, r4
   11768:	mov	r0, sl
   1176c:	bl	11194 <error@plt>
   11770:	cmp	r3, #1
   11774:	ble	116cc <__assert_fail@plt+0x340>
   11778:	add	ip, sp, #60	; 0x3c
   1177c:	add	r3, sp, #56	; 0x38
   11780:	ldr	r0, [r6, r2, lsl #2]
   11784:	add	r1, sp, #24
   11788:	add	r2, sp, #28
   1178c:	str	ip, [sp]
   11790:	bl	1acac <__assert_fail@plt+0x9920>
   11794:	subs	r7, r0, #0
   11798:	bne	11834 <__assert_fail@plt+0x4a8>
   1179c:	ldr	r3, [sp, #56]	; 0x38
   117a0:	cmp	r3, #0
   117a4:	beq	11814 <__assert_fail@plt+0x488>
   117a8:	ldr	r3, [r4]
   117ac:	add	r3, r3, #1
   117b0:	str	r3, [r4]
   117b4:	b	1168c <__assert_fail@plt+0x300>
   117b8:	ldr	r0, [pc, #224]	; 118a0 <__assert_fail@plt+0x514>
   117bc:	bl	1a8dc <__assert_fail@plt+0x9550>
   117c0:	cmp	r0, #0
   117c4:	mov	r5, r0
   117c8:	str	r0, [sp, #48]	; 0x30
   117cc:	bne	11698 <__assert_fail@plt+0x30c>
   117d0:	bl	1123c <__errno_location@plt>
   117d4:	ldr	r4, [r0]
   117d8:	mov	r2, #5
   117dc:	mov	r0, r5
   117e0:	movw	r1, #55284	; 0xd7f4
   117e4:	movt	r1, #1
   117e8:	bl	11104 <dcgettext@plt>
   117ec:	mov	r5, r0
   117f0:	movw	r1, #55316	; 0xd814
   117f4:	movt	r1, #1
   117f8:	mov	r0, #4
   117fc:	bl	1941c <__assert_fail@plt+0x8090>
   11800:	mov	r3, r0
   11804:	mov	r2, r5
   11808:	mov	r1, r4
   1180c:	mov	r0, #1
   11810:	bl	11194 <error@plt>
   11814:	ldr	r3, [sp, #60]	; 0x3c
   11818:	cmp	r3, #0
   1181c:	beq	117a8 <__assert_fail@plt+0x41c>
   11820:	movw	r0, #54380	; 0xd46c
   11824:	movt	r0, #1
   11828:	bl	1ba40 <__assert_fail@plt+0xa6b4>
   1182c:	str	r0, [sp, #56]	; 0x38
   11830:	b	117a8 <__assert_fail@plt+0x41c>
   11834:	ldr	r3, [r4]
   11838:	ldr	r0, [r6, r3, lsl #2]
   1183c:	bl	1a748 <__assert_fail@plt+0x93bc>
   11840:	mov	r3, r7
   11844:	mov	r1, r5
   11848:	movw	r2, #55144	; 0xd768
   1184c:	movt	r2, #1
   11850:	str	r0, [sp]
   11854:	mov	r0, #1
   11858:	bl	11194 <error@plt>
   1185c:	bl	1123c <__errno_location@plt>
   11860:	ldr	r4, [r0]
   11864:	mov	r2, #5
   11868:	movw	r1, #55284	; 0xd7f4
   1186c:	movt	r1, #1
   11870:	mov	r0, #0
   11874:	bl	11104 <dcgettext@plt>
   11878:	mov	r6, r0
   1187c:	mov	r1, r5
   11880:	mov	r0, #4
   11884:	bl	1941c <__assert_fail@plt+0x8090>
   11888:	mov	r3, r0
   1188c:	mov	r2, r6
   11890:	mov	r1, r4
   11894:	mov	r0, #1
   11898:	bl	11194 <error@plt>
   1189c:	ldrdeq	ip, [r1], -r0
   118a0:			; <UNDEFINED> instruction: 0x0002f1b0
   118a4:	mov	fp, #0
   118a8:	mov	lr, #0
   118ac:	pop	{r1}		; (ldr r1, [sp], #4)
   118b0:	mov	r2, sp
   118b4:	push	{r2}		; (str r2, [sp, #-4]!)
   118b8:	push	{r0}		; (str r0, [sp, #-4]!)
   118bc:	ldr	ip, [pc, #16]	; 118d4 <__assert_fail@plt+0x548>
   118c0:	push	{ip}		; (str ip, [sp, #-4]!)
   118c4:	ldr	r0, [pc, #12]	; 118d8 <__assert_fail@plt+0x54c>
   118c8:	ldr	r3, [pc, #12]	; 118dc <__assert_fail@plt+0x550>
   118cc:	bl	111b8 <__libc_start_main@plt>
   118d0:	bl	11344 <abort@plt>
   118d4:	andeq	ip, r1, r0, ror fp
   118d8:	muleq	r1, r8, r3
   118dc:	andeq	ip, r1, r0, lsl fp
   118e0:	ldr	r3, [pc, #20]	; 118fc <__assert_fail@plt+0x570>
   118e4:	ldr	r2, [pc, #20]	; 11900 <__assert_fail@plt+0x574>
   118e8:	add	r3, pc, r3
   118ec:	ldr	r2, [r3, r2]
   118f0:	cmp	r2, #0
   118f4:	bxeq	lr
   118f8:	b	111d0 <__gmon_start__@plt>
   118fc:	andeq	sp, r1, r0, lsl r7
   11900:	andeq	r0, r0, r0, lsr r1
   11904:	ldr	r0, [pc, #24]	; 11924 <__assert_fail@plt+0x598>
   11908:	ldr	r3, [pc, #24]	; 11928 <__assert_fail@plt+0x59c>
   1190c:	cmp	r3, r0
   11910:	bxeq	lr
   11914:	ldr	r3, [pc, #16]	; 1192c <__assert_fail@plt+0x5a0>
   11918:	cmp	r3, #0
   1191c:	bxeq	lr
   11920:	bx	r3
   11924:	andeq	pc, r2, r4, lsl #3
   11928:	andeq	pc, r2, r4, lsl #3
   1192c:	andeq	r0, r0, r0
   11930:	ldr	r0, [pc, #36]	; 1195c <__assert_fail@plt+0x5d0>
   11934:	ldr	r1, [pc, #36]	; 11960 <__assert_fail@plt+0x5d4>
   11938:	sub	r1, r1, r0
   1193c:	asr	r1, r1, #2
   11940:	add	r1, r1, r1, lsr #31
   11944:	asrs	r1, r1, #1
   11948:	bxeq	lr
   1194c:	ldr	r3, [pc, #16]	; 11964 <__assert_fail@plt+0x5d8>
   11950:	cmp	r3, #0
   11954:	bxeq	lr
   11958:	bx	r3
   1195c:	andeq	pc, r2, r4, lsl #3
   11960:	andeq	pc, r2, r4, lsl #3
   11964:	andeq	r0, r0, r0
   11968:	push	{r4, lr}
   1196c:	ldr	r4, [pc, #24]	; 1198c <__assert_fail@plt+0x600>
   11970:	ldrb	r3, [r4]
   11974:	cmp	r3, #0
   11978:	popne	{r4, pc}
   1197c:	bl	11904 <__assert_fail@plt+0x578>
   11980:	mov	r3, #1
   11984:	strb	r3, [r4]
   11988:	pop	{r4, pc}
   1198c:	andeq	pc, r2, r4, lsr #3
   11990:	b	11930 <__assert_fail@plt+0x5a4>
   11994:	subs	r6, r0, #0
   11998:	str	r7, [sp, #-8]!
   1199c:	str	lr, [sp, #4]
   119a0:	sub	sp, sp, #64	; 0x40
   119a4:	beq	119ec <__assert_fail@plt+0x660>
   119a8:	movw	r3, #61848	; 0xf198
   119ac:	movt	r3, #2
   119b0:	ldr	r4, [r3]
   119b4:	mov	r2, #5
   119b8:	movw	r1, #52408	; 0xccb8
   119bc:	movt	r1, #1
   119c0:	mov	r0, #0
   119c4:	bl	11104 <dcgettext@plt>
   119c8:	movw	r3, #61896	; 0xf1c8
   119cc:	movt	r3, #2
   119d0:	mov	r2, r0
   119d4:	mov	r1, #1
   119d8:	ldr	r3, [r3]
   119dc:	mov	r0, r4
   119e0:	bl	11278 <__fprintf_chk@plt>
   119e4:	mov	r0, r6
   119e8:	bl	111f4 <exit@plt>
   119ec:	mov	r2, #5
   119f0:	movw	r1, #52448	; 0xcce0
   119f4:	movt	r1, #1
   119f8:	movw	r4, #61896	; 0xf1c8
   119fc:	movt	r4, #2
   11a00:	movw	r7, #61852	; 0xf19c
   11a04:	movt	r7, #2
   11a08:	bl	11104 <dcgettext@plt>
   11a0c:	ldr	r3, [r4]
   11a10:	mov	r1, r0
   11a14:	mov	r0, #1
   11a18:	mov	r2, r3
   11a1c:	bl	11260 <__printf_chk@plt>
   11a20:	mov	r2, #5
   11a24:	movw	r1, #52548	; 0xcd44
   11a28:	movt	r1, #1
   11a2c:	mov	r0, r6
   11a30:	bl	11104 <dcgettext@plt>
   11a34:	ldr	r1, [r7]
   11a38:	bl	11050 <fputs_unlocked@plt>
   11a3c:	mov	r2, #5
   11a40:	movw	r1, #52696	; 0xcdd8
   11a44:	movt	r1, #1
   11a48:	mov	r0, r6
   11a4c:	bl	11104 <dcgettext@plt>
   11a50:	ldr	r1, [r7]
   11a54:	bl	11050 <fputs_unlocked@plt>
   11a58:	mov	r2, #5
   11a5c:	movw	r1, #52900	; 0xcea4
   11a60:	movt	r1, #1
   11a64:	mov	r0, r6
   11a68:	bl	11104 <dcgettext@plt>
   11a6c:	ldr	r1, [r7]
   11a70:	bl	11050 <fputs_unlocked@plt>
   11a74:	mov	r2, #5
   11a78:	movw	r1, #53132	; 0xcf8c
   11a7c:	movt	r1, #1
   11a80:	mov	r0, r6
   11a84:	bl	11104 <dcgettext@plt>
   11a88:	ldr	r1, [r7]
   11a8c:	bl	11050 <fputs_unlocked@plt>
   11a90:	mov	r2, #5
   11a94:	movw	r1, #53252	; 0xd004
   11a98:	movt	r1, #1
   11a9c:	mov	r0, r6
   11aa0:	bl	11104 <dcgettext@plt>
   11aa4:	ldr	r1, [r7]
   11aa8:	bl	11050 <fputs_unlocked@plt>
   11aac:	mov	r2, #5
   11ab0:	movw	r1, #53592	; 0xd158
   11ab4:	movt	r1, #1
   11ab8:	mov	r0, r6
   11abc:	bl	11104 <dcgettext@plt>
   11ac0:	ldr	r1, [r7]
   11ac4:	bl	11050 <fputs_unlocked@plt>
   11ac8:	mov	r2, #5
   11acc:	movw	r1, #53720	; 0xd1d8
   11ad0:	movt	r1, #1
   11ad4:	mov	r0, r6
   11ad8:	bl	11104 <dcgettext@plt>
   11adc:	ldr	r1, [r7]
   11ae0:	bl	11050 <fputs_unlocked@plt>
   11ae4:	mov	r2, #5
   11ae8:	movw	r1, #53844	; 0xd254
   11aec:	movt	r1, #1
   11af0:	mov	r0, r6
   11af4:	bl	11104 <dcgettext@plt>
   11af8:	ldr	r1, [r7]
   11afc:	bl	11050 <fputs_unlocked@plt>
   11b00:	mov	r2, #5
   11b04:	movw	r1, #53916	; 0xd29c
   11b08:	movt	r1, #1
   11b0c:	mov	r0, r6
   11b10:	bl	11104 <dcgettext@plt>
   11b14:	ldr	r1, [r7]
   11b18:	bl	11050 <fputs_unlocked@plt>
   11b1c:	mov	r2, #5
   11b20:	movw	r1, #54384	; 0xd470
   11b24:	movt	r1, #1
   11b28:	mov	r0, r6
   11b2c:	bl	11104 <dcgettext@plt>
   11b30:	ldr	r1, [r7]
   11b34:	bl	11050 <fputs_unlocked@plt>
   11b38:	mov	r2, #5
   11b3c:	movw	r1, #54432	; 0xd4a0
   11b40:	movt	r1, #1
   11b44:	mov	r0, r6
   11b48:	bl	11104 <dcgettext@plt>
   11b4c:	ldr	r1, [r7]
   11b50:	bl	11050 <fputs_unlocked@plt>
   11b54:	mov	r2, #5
   11b58:	movw	r1, #54488	; 0xd4d8
   11b5c:	movt	r1, #1
   11b60:	mov	r0, r6
   11b64:	bl	11104 <dcgettext@plt>
   11b68:	ldr	r1, [r7]
   11b6c:	bl	11050 <fputs_unlocked@plt>
   11b70:	mov	r2, #5
   11b74:	movw	r1, #54680	; 0xd598
   11b78:	movt	r1, #1
   11b7c:	mov	r0, r6
   11b80:	bl	11104 <dcgettext@plt>
   11b84:	ldr	ip, [r4]
   11b88:	mov	r1, r0
   11b8c:	mov	r0, #1
   11b90:	mov	r3, ip
   11b94:	mov	r2, ip
   11b98:	str	ip, [sp]
   11b9c:	bl	11260 <__printf_chk@plt>
   11ba0:	movw	lr, #52120	; 0xcb98
   11ba4:	movt	lr, #1
   11ba8:	ldr	ip, [lr]
   11bac:	ldr	r4, [lr, #4]
   11bb0:	ldrd	r8, [lr, #8]
   11bb4:	subs	r1, ip, #0
   11bb8:	str	ip, [sp, #8]
   11bbc:	ldrd	r2, [lr, #16]
   11bc0:	str	r4, [sp, #12]
   11bc4:	ldrd	r4, [lr, #24]
   11bc8:	strd	r8, [sp, #16]
   11bcc:	ldrd	r8, [lr, #32]
   11bd0:	strd	r2, [sp, #24]
   11bd4:	ldrd	r2, [lr, #40]	; 0x28
   11bd8:	strd	r4, [sp, #32]
   11bdc:	ldrd	r4, [lr, #48]	; 0x30
   11be0:	strd	r8, [sp, #40]	; 0x28
   11be4:	strd	r2, [sp, #48]	; 0x30
   11be8:	strd	r4, [sp, #56]	; 0x38
   11bec:	movwne	r5, #52400	; 0xccb0
   11bf0:	add	r4, sp, #8
   11bf4:	movtne	r5, #1
   11bf8:	bne	11cf0 <__assert_fail@plt+0x964>
   11bfc:	ldr	r4, [r4, #4]
   11c00:	movw	r1, #54884	; 0xd664
   11c04:	movt	r1, #1
   11c08:	mov	r2, #5
   11c0c:	cmp	r4, #0
   11c10:	beq	11d04 <__assert_fail@plt+0x978>
   11c14:	mov	r0, #0
   11c18:	bl	11104 <dcgettext@plt>
   11c1c:	mov	r1, r0
   11c20:	movw	r3, #54908	; 0xd67c
   11c24:	movt	r3, #1
   11c28:	movw	r2, #54948	; 0xd6a4
   11c2c:	movt	r2, #1
   11c30:	mov	r0, #1
   11c34:	bl	11260 <__printf_chk@plt>
   11c38:	mov	r1, #0
   11c3c:	mov	r0, #5
   11c40:	bl	112a8 <setlocale@plt>
   11c44:	cmp	r0, #0
   11c48:	movweq	r5, #52400	; 0xccb0
   11c4c:	movteq	r5, #1
   11c50:	beq	11c74 <__assert_fail@plt+0x8e8>
   11c54:	movw	r1, #54964	; 0xd6b4
   11c58:	movt	r1, #1
   11c5c:	mov	r2, #3
   11c60:	movw	r5, #52400	; 0xccb0
   11c64:	movt	r5, #1
   11c68:	bl	11338 <strncmp@plt>
   11c6c:	cmp	r0, #0
   11c70:	bne	11dbc <__assert_fail@plt+0xa30>
   11c74:	mov	r2, #5
   11c78:	movw	r1, #55040	; 0xd700
   11c7c:	movt	r1, #1
   11c80:	mov	r0, #0
   11c84:	bl	11104 <dcgettext@plt>
   11c88:	mov	r1, r0
   11c8c:	movw	r3, #52400	; 0xccb0
   11c90:	movt	r3, #1
   11c94:	movw	r2, #54908	; 0xd67c
   11c98:	movt	r2, #1
   11c9c:	mov	r0, #1
   11ca0:	bl	11260 <__printf_chk@plt>
   11ca4:	mov	r2, #5
   11ca8:	movw	r1, #55068	; 0xd71c
   11cac:	movt	r1, #1
   11cb0:	mov	r0, #0
   11cb4:	bl	11104 <dcgettext@plt>
   11cb8:	movw	r2, #55328	; 0xd820
   11cbc:	movt	r2, #1
   11cc0:	cmp	r4, r5
   11cc4:	movw	r3, #54380	; 0xd46c
   11cc8:	movt	r3, #1
   11ccc:	mov	r1, r0
   11cd0:	moveq	r3, r2
   11cd4:	mov	r2, r4
   11cd8:	mov	r0, #1
   11cdc:	bl	11260 <__printf_chk@plt>
   11ce0:	b	119e4 <__assert_fail@plt+0x658>
   11ce4:	ldr	r1, [r4, #8]!
   11ce8:	cmp	r1, #0
   11cec:	beq	11bfc <__assert_fail@plt+0x870>
   11cf0:	mov	r0, r5
   11cf4:	bl	11074 <strcmp@plt>
   11cf8:	cmp	r0, #0
   11cfc:	bne	11ce4 <__assert_fail@plt+0x958>
   11d00:	b	11bfc <__assert_fail@plt+0x870>
   11d04:	mov	r0, r4
   11d08:	bl	11104 <dcgettext@plt>
   11d0c:	mov	r1, r0
   11d10:	movw	r3, #54908	; 0xd67c
   11d14:	movt	r3, #1
   11d18:	movw	r2, #54948	; 0xd6a4
   11d1c:	movt	r2, #1
   11d20:	mov	r0, #1
   11d24:	bl	11260 <__printf_chk@plt>
   11d28:	mov	r1, r4
   11d2c:	mov	r0, #5
   11d30:	bl	112a8 <setlocale@plt>
   11d34:	cmp	r0, #0
   11d38:	beq	11d54 <__assert_fail@plt+0x9c8>
   11d3c:	movw	r1, #54964	; 0xd6b4
   11d40:	movt	r1, #1
   11d44:	mov	r2, #3
   11d48:	bl	11338 <strncmp@plt>
   11d4c:	cmp	r0, #0
   11d50:	bne	11db0 <__assert_fail@plt+0xa24>
   11d54:	mov	r2, #5
   11d58:	movw	r1, #55040	; 0xd700
   11d5c:	movt	r1, #1
   11d60:	mov	r0, #0
   11d64:	bl	11104 <dcgettext@plt>
   11d68:	mov	r1, r0
   11d6c:	movw	r3, #52400	; 0xccb0
   11d70:	movt	r3, #1
   11d74:	movw	r2, #54908	; 0xd67c
   11d78:	movt	r2, #1
   11d7c:	mov	r0, #1
   11d80:	bl	11260 <__printf_chk@plt>
   11d84:	movw	r1, #55068	; 0xd71c
   11d88:	movt	r1, #1
   11d8c:	mov	r2, #5
   11d90:	mov	r0, #0
   11d94:	bl	11104 <dcgettext@plt>
   11d98:	movw	r4, #52400	; 0xccb0
   11d9c:	movt	r4, #1
   11da0:	movw	r3, #55328	; 0xd820
   11da4:	movt	r3, #1
   11da8:	mov	r1, r0
   11dac:	b	11cd4 <__assert_fail@plt+0x948>
   11db0:	movw	r5, #52400	; 0xccb0
   11db4:	movt	r5, #1
   11db8:	mov	r4, r5
   11dbc:	mov	r2, #5
   11dc0:	movw	r1, #54968	; 0xd6b8
   11dc4:	movt	r1, #1
   11dc8:	mov	r0, #0
   11dcc:	bl	11104 <dcgettext@plt>
   11dd0:	ldr	r1, [r7]
   11dd4:	bl	11050 <fputs_unlocked@plt>
   11dd8:	b	11c74 <__assert_fail@plt+0x8e8>
   11ddc:	subs	r3, r0, #0
   11de0:	strd	r4, [sp, #-16]!
   11de4:	str	r6, [sp, #8]
   11de8:	str	lr, [sp, #12]
   11dec:	beq	11e4c <__assert_fail@plt+0xac0>
   11df0:	cmp	r1, #0
   11df4:	beq	11e58 <__assert_fail@plt+0xacc>
   11df8:	mov	r4, r1
   11dfc:	mov	r5, r3
   11e00:	bl	1120c <strlen@plt>
   11e04:	mov	r6, r0
   11e08:	mov	r0, r4
   11e0c:	bl	1120c <strlen@plt>
   11e10:	add	r0, r6, r0
   11e14:	add	r0, r0, #2
   11e18:	bl	1b4d4 <__assert_fail@plt+0xa148>
   11e1c:	mov	r1, r5
   11e20:	mov	r6, r0
   11e24:	bl	110ec <stpcpy@plt>
   11e28:	mov	r3, #58	; 0x3a
   11e2c:	mov	r1, r4
   11e30:	strb	r3, [r0], #1
   11e34:	bl	11170 <strcpy@plt>
   11e38:	mov	r0, r6
   11e3c:	ldrd	r4, [sp]
   11e40:	ldr	r6, [sp, #8]
   11e44:	add	sp, sp, #12
   11e48:	pop	{pc}		; (ldr pc, [sp], #4)
   11e4c:	cmp	r1, #0
   11e50:	beq	11e6c <__assert_fail@plt+0xae0>
   11e54:	mov	r0, r1
   11e58:	ldrd	r4, [sp]
   11e5c:	ldr	r6, [sp, #8]
   11e60:	ldr	lr, [sp, #12]
   11e64:	add	sp, sp, #16
   11e68:	b	1ba40 <__assert_fail@plt+0xa6b4>
   11e6c:	mov	r6, r1
   11e70:	b	11e38 <__assert_fail@plt+0xaac>
   11e74:	mov	r3, #0
   11e78:	mov	r1, #2
   11e7c:	mov	r2, #1
   11e80:	str	r1, [r0]
   11e84:	strb	r3, [r0, #4]
   11e88:	str	r3, [r0, #8]
   11e8c:	strh	r2, [r0, #12]
   11e90:	str	r3, [r0, #16]
   11e94:	str	r3, [r0, #20]
   11e98:	bx	lr
   11e9c:	str	r4, [sp, #-8]!
   11ea0:	mov	r4, r0
   11ea4:	ldr	r0, [r0, #16]
   11ea8:	str	lr, [sp, #4]
   11eac:	bl	12dd8 <__assert_fail@plt+0x1a4c>
   11eb0:	ldr	lr, [sp, #4]
   11eb4:	ldr	r0, [r4, #20]
   11eb8:	ldr	r4, [sp]
   11ebc:	add	sp, sp, #8
   11ec0:	b	12dd8 <__assert_fail@plt+0x1a4c>
   11ec4:	str	r4, [sp, #-8]!
   11ec8:	mov	r4, r0
   11ecc:	str	lr, [sp, #4]
   11ed0:	sub	sp, sp, #24
   11ed4:	bl	11374 <getgrgid@plt>
   11ed8:	subs	r1, r0, #0
   11edc:	beq	11ef8 <__assert_fail@plt+0xb6c>
   11ee0:	ldr	r0, [r1]
   11ee4:	bl	1ba40 <__assert_fail@plt+0xa6b4>
   11ee8:	add	sp, sp, #24
   11eec:	ldr	r4, [sp]
   11ef0:	add	sp, sp, #4
   11ef4:	pop	{pc}		; (ldr pc, [sp], #4)
   11ef8:	mov	r0, r4
   11efc:	mov	r2, sp
   11f00:	bl	16cbc <__assert_fail@plt+0x5930>
   11f04:	b	11ee4 <__assert_fail@plt+0xb58>
   11f08:	str	r4, [sp, #-8]!
   11f0c:	mov	r4, r0
   11f10:	str	lr, [sp, #4]
   11f14:	sub	sp, sp, #24
   11f18:	bl	11080 <getpwuid@plt>
   11f1c:	subs	r1, r0, #0
   11f20:	beq	11f3c <__assert_fail@plt+0xbb0>
   11f24:	ldr	r0, [r1]
   11f28:	bl	1ba40 <__assert_fail@plt+0xa6b4>
   11f2c:	add	sp, sp, #24
   11f30:	ldr	r4, [sp]
   11f34:	add	sp, sp, #4
   11f38:	pop	{pc}		; (ldr pc, [sp], #4)
   11f3c:	mov	r0, r4
   11f40:	mov	r2, sp
   11f44:	bl	16cbc <__assert_fail@plt+0x5930>
   11f48:	b	11f28 <__assert_fail@plt+0xb9c>
   11f4c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11f50:	strd	r6, [sp, #8]
   11f54:	strd	r8, [sp, #16]
   11f58:	strd	sl, [sp, #24]
   11f5c:	str	lr, [sp, #32]
   11f60:	sub	sp, sp, #268	; 0x10c
   11f64:	ldr	fp, [sp, #312]	; 0x138
   11f68:	str	r2, [sp, #28]
   11f6c:	str	r3, [sp, #40]	; 0x28
   11f70:	ldr	r3, [sp, #304]	; 0x130
   11f74:	ldr	r2, [sp, #308]	; 0x134
   11f78:	and	r3, r3, r2
   11f7c:	cmn	r3, #1
   11f80:	str	r3, [sp, #24]
   11f84:	beq	12990 <__assert_fail@plt+0x1604>
   11f88:	movw	r3, #56316	; 0xdbfc
   11f8c:	movt	r3, #1
   11f90:	mov	r2, #0
   11f94:	mov	r6, #1
   11f98:	str	r3, [sp, #48]	; 0x30
   11f9c:	movw	r3, #56392	; 0xdc48
   11fa0:	movt	r3, #1
   11fa4:	str	r3, [sp, #52]	; 0x34
   11fa8:	movw	r3, #56352	; 0xdc20
   11fac:	movt	r3, #1
   11fb0:	str	r3, [sp, #44]	; 0x2c
   11fb4:	bl	1bad0 <__assert_fail@plt+0xa744>
   11fb8:	str	r0, [sp, #12]
   11fbc:	bl	1123c <__errno_location@plt>
   11fc0:	str	r0, [sp, #36]	; 0x24
   11fc4:	ldr	r0, [sp, #12]
   11fc8:	bl	14a80 <__assert_fail@plt+0x36f4>
   11fcc:	subs	r9, r0, #0
   11fd0:	beq	120c0 <__assert_fail@plt+0xd34>
   11fd4:	ldrh	sl, [r9, #56]	; 0x38
   11fd8:	ldr	r3, [r9, #28]
   11fdc:	sub	r7, sl, #1
   11fe0:	str	r3, [sp, #16]
   11fe4:	cmp	r7, #9
   11fe8:	ldrls	pc, [pc, r7, lsl #2]
   11fec:	b	1216c <__assert_fail@plt+0xde0>
   11ff0:	andeq	r2, r1, ip, lsr r3
   11ff4:	andeq	r2, r1, r4, ror #5
   11ff8:	andeq	r2, r1, ip, ror #2
   11ffc:	andeq	r2, r1, r8, lsr r4
   12000:	andeq	r2, r1, ip, ror #2
   12004:	andeq	r2, r1, r0, ror #2
   12008:	andeq	r2, r1, r0, lsl r1
   1200c:	andeq	r2, r1, ip, ror #2
   12010:	andeq	r2, r1, ip, ror #2
   12014:	andeq	r2, r1, r8, lsl r0
   12018:	ldr	r3, [r9, #48]	; 0x30
   1201c:	cmp	r3, #0
   12020:	bne	12030 <__assert_fail@plt+0xca4>
   12024:	ldr	r3, [r9, #16]
   12028:	cmp	r3, #0
   1202c:	beq	12b18 <__assert_fail@plt+0x178c>
   12030:	ldrb	r4, [fp, #13]
   12034:	cmp	r4, #0
   12038:	movweq	r1, #55748	; 0xd9c4
   1203c:	movteq	r1, #1
   12040:	bne	1211c <__assert_fail@plt+0xd90>
   12044:	ldr	r5, [r9, #32]
   12048:	mov	r2, #5
   1204c:	mov	r0, r4
   12050:	bl	11104 <dcgettext@plt>
   12054:	mov	r7, r0
   12058:	mov	r0, #4
   1205c:	ldr	r1, [sp, #16]
   12060:	bl	1941c <__assert_fail@plt+0x8090>
   12064:	mov	r3, r0
   12068:	mov	r2, r7
   1206c:	mov	r1, r5
   12070:	mov	r0, r4
   12074:	bl	11194 <error@plt>
   12078:	ldr	r3, [fp]
   1207c:	mov	r6, r4
   12080:	mov	r5, r4
   12084:	mov	r7, r4
   12088:	mov	r4, #1
   1208c:	cmp	r3, #2
   12090:	bne	12134 <__assert_fail@plt+0xda8>
   12094:	ldrb	r3, [fp, #4]
   12098:	cmp	r3, #0
   1209c:	bne	11fc4 <__assert_fail@plt+0xc38>
   120a0:	mov	r1, r9
   120a4:	mov	r2, #4
   120a8:	ldr	r0, [sp, #12]
   120ac:	bl	15294 <__assert_fail@plt+0x3f08>
   120b0:	ldr	r0, [sp, #12]
   120b4:	bl	14a80 <__assert_fail@plt+0x36f4>
   120b8:	subs	r9, r0, #0
   120bc:	bne	11fd4 <__assert_fail@plt+0xc48>
   120c0:	ldr	r3, [sp, #36]	; 0x24
   120c4:	ldr	r4, [r3]
   120c8:	cmp	r4, #0
   120cc:	beq	120e0 <__assert_fail@plt+0xd54>
   120d0:	ldrb	r6, [fp, #13]
   120d4:	cmp	r6, #0
   120d8:	movne	r6, r9
   120dc:	beq	12ad0 <__assert_fail@plt+0x1744>
   120e0:	ldr	r0, [sp, #12]
   120e4:	bl	14878 <__assert_fail@plt+0x34ec>
   120e8:	cmp	r0, #0
   120ec:	bne	12a40 <__assert_fail@plt+0x16b4>
   120f0:	mov	r0, r6
   120f4:	add	sp, sp, #268	; 0x10c
   120f8:	ldrd	r4, [sp]
   120fc:	ldrd	r6, [sp, #8]
   12100:	ldrd	r8, [sp, #16]
   12104:	ldrd	sl, [sp, #24]
   12108:	add	sp, sp, #32
   1210c:	pop	{pc}		; (ldr pc, [sp], #4)
   12110:	ldrb	r4, [fp, #13]
   12114:	cmp	r4, #0
   12118:	beq	12950 <__assert_fail@plt+0x15c4>
   1211c:	mov	r6, #0
   12120:	mov	r5, r6
   12124:	mov	r7, r6
   12128:	ldr	r3, [fp]
   1212c:	cmp	r3, #2
   12130:	beq	12094 <__assert_fail@plt+0xd08>
   12134:	cmp	r3, #0
   12138:	bne	12094 <__assert_fail@plt+0xd08>
   1213c:	cmp	r7, #0
   12140:	moveq	r4, #3
   12144:	bne	12714 <__assert_fail@plt+0x1388>
   12148:	cmp	r5, #0
   1214c:	bne	12914 <__assert_fail@plt+0x1588>
   12150:	str	r5, [sp, #20]
   12154:	ldr	sl, [fp, #16]
   12158:	ldr	r7, [fp, #20]
   1215c:	b	125a4 <__assert_fail@plt+0x1218>
   12160:	ldrb	r3, [fp, #4]
   12164:	cmp	r3, #0
   12168:	beq	11fc4 <__assert_fail@plt+0xc38>
   1216c:	ldr	r3, [sp, #24]
   12170:	add	r5, r9, #64	; 0x40
   12174:	ldrb	r4, [fp, #12]
   12178:	ldr	r8, [r9, #24]
   1217c:	cmn	r3, #1
   12180:	beq	1260c <__assert_fail@plt+0x1280>
   12184:	cmp	r4, #0
   12188:	beq	1219c <__assert_fail@plt+0xe10>
   1218c:	ldr	r3, [r9, #80]	; 0x50
   12190:	and	r3, r3, #61440	; 0xf000
   12194:	cmp	r3, #40960	; 0xa000
   12198:	beq	129ac <__assert_fail@plt+0x1620>
   1219c:	ldr	r3, [sp, #304]	; 0x130
   121a0:	uxth	r7, r7
   121a4:	bic	sl, sl, #2
   121a8:	cmp	sl, #4
   121ac:	cmpne	r7, #1
   121b0:	movls	r7, #1
   121b4:	movhi	r7, #0
   121b8:	cmn	r3, #1
   121bc:	beq	12450 <__assert_fail@plt+0x10c4>
   121c0:	mov	r2, r3
   121c4:	ldr	r3, [r5, #24]
   121c8:	cmp	r2, r3
   121cc:	beq	12450 <__assert_fail@plt+0x10c4>
   121d0:	cmp	r7, #0
   121d4:	beq	12944 <__assert_fail@plt+0x15b8>
   121d8:	ldr	ip, [fp, #8]
   121dc:	cmp	ip, #0
   121e0:	beq	12cc4 <__assert_fail@plt+0x1938>
   121e4:	ldrd	r0, [ip]
   121e8:	ldrd	r2, [r5, #96]	; 0x60
   121ec:	cmp	r1, r3
   121f0:	cmpeq	r0, r2
   121f4:	moveq	lr, #0
   121f8:	bne	12cc4 <__assert_fail@plt+0x1938>
   121fc:	ldrd	r0, [r5]
   12200:	ldrd	r2, [ip, #8]
   12204:	cmp	r1, r3
   12208:	cmpeq	r0, r2
   1220c:	beq	127b8 <__assert_fail@plt+0x142c>
   12210:	cmp	lr, #0
   12214:	beq	12944 <__assert_fail@plt+0x15b8>
   12218:	ldrb	r4, [fp, #12]
   1221c:	cmp	r4, #0
   12220:	ldr	r3, [sp, #12]
   12224:	ldr	sl, [r3, #32]
   12228:	bne	12498 <__assert_fail@plt+0x110c>
   1222c:	mov	r2, #256	; 0x100
   12230:	mov	r1, r8
   12234:	mov	r0, sl
   12238:	ldr	r3, [sp, #40]	; 0x28
   1223c:	str	r2, [sp]
   12240:	ldr	r2, [sp, #28]
   12244:	bl	11314 <fchownat@plt>
   12248:	cmp	r0, #0
   1224c:	moveq	r0, #1
   12250:	movne	r0, #0
   12254:	beq	12268 <__assert_fail@plt+0xedc>
   12258:	ldr	r3, [sp, #36]	; 0x24
   1225c:	ldr	r3, [r3]
   12260:	cmp	r3, #95	; 0x5f
   12264:	beq	12a84 <__assert_fail@plt+0x16f8>
   12268:	cmp	r0, #0
   1226c:	bne	12530 <__assert_fail@plt+0x11a4>
   12270:	ldrb	r4, [fp, #13]
   12274:	cmp	r4, #0
   12278:	movne	r6, #0
   1227c:	movne	r7, r6
   12280:	bne	12128 <__assert_fail@plt+0xd9c>
   12284:	ldr	r3, [sp, #28]
   12288:	mov	r2, #5
   1228c:	mov	r0, r4
   12290:	cmn	r3, #1
   12294:	ldr	r3, [sp, #36]	; 0x24
   12298:	movwne	r1, #56008	; 0xdac8
   1229c:	movweq	r1, #56036	; 0xdae4
   122a0:	movtne	r1, #1
   122a4:	movteq	r1, #1
   122a8:	ldr	r6, [r3]
   122ac:	bl	11104 <dcgettext@plt>
   122b0:	mov	r4, r0
   122b4:	mov	r0, #4
   122b8:	ldr	r1, [sp, #16]
   122bc:	bl	1941c <__assert_fail@plt+0x8090>
   122c0:	mov	r3, r0
   122c4:	mov	r0, #0
   122c8:	mov	r2, r4
   122cc:	mov	r1, r6
   122d0:	mov	r6, r0
   122d4:	mov	r4, #1
   122d8:	bl	11194 <error@plt>
   122dc:	mov	r7, r6
   122e0:	b	12128 <__assert_fail@plt+0xd9c>
   122e4:	mov	r1, r9
   122e8:	ldr	r0, [sp, #12]
   122ec:	bl	1bb28 <__assert_fail@plt+0xa79c>
   122f0:	cmp	r0, #0
   122f4:	beq	1216c <__assert_fail@plt+0xde0>
   122f8:	mov	r2, #5
   122fc:	movw	r1, #55796	; 0xd9f4
   12300:	movt	r1, #1
   12304:	mov	r0, #0
   12308:	bl	11104 <dcgettext@plt>
   1230c:	mov	r4, r0
   12310:	mov	r1, #3
   12314:	ldr	r2, [sp, #16]
   12318:	mov	r0, #0
   1231c:	bl	19f9c <__assert_fail@plt+0x8c10>
   12320:	mov	r1, #0
   12324:	mov	r3, r0
   12328:	mov	r2, r4
   1232c:	mov	r0, r1
   12330:	mov	r6, r1
   12334:	bl	11194 <error@plt>
   12338:	b	11fc4 <__assert_fail@plt+0xc38>
   1233c:	ldrb	r3, [fp, #4]
   12340:	cmp	r3, #0
   12344:	beq	1216c <__assert_fail@plt+0xde0>
   12348:	ldr	ip, [fp, #8]
   1234c:	cmp	ip, #0
   12350:	beq	11fc4 <__assert_fail@plt+0xc38>
   12354:	ldrd	r2, [ip]
   12358:	ldrd	r0, [r9, #160]	; 0xa0
   1235c:	cmp	r1, r3
   12360:	cmpeq	r0, r2
   12364:	bne	11fc4 <__assert_fail@plt+0xc38>
   12368:	ldrd	r0, [ip, #8]
   1236c:	ldrd	r2, [r9, #64]	; 0x40
   12370:	cmp	r3, r1
   12374:	cmpeq	r2, r0
   12378:	bne	11fc4 <__assert_fail@plt+0xc38>
   1237c:	ldr	r6, [sp, #16]
   12380:	movw	r1, #55316	; 0xd814
   12384:	movt	r1, #1
   12388:	mov	r0, r6
   1238c:	bl	11074 <strcmp@plt>
   12390:	subs	r4, r0, #0
   12394:	beq	12c44 <__assert_fail@plt+0x18b8>
   12398:	mov	r2, #5
   1239c:	movw	r1, #55636	; 0xd954
   123a0:	movt	r1, #1
   123a4:	mov	r0, #0
   123a8:	bl	11104 <dcgettext@plt>
   123ac:	mov	r4, r0
   123b0:	mov	r1, #4
   123b4:	ldr	r2, [sp, #16]
   123b8:	mov	r0, #0
   123bc:	bl	19340 <__assert_fail@plt+0x7fb4>
   123c0:	mov	r5, r0
   123c4:	mov	r1, #4
   123c8:	movw	r2, #55316	; 0xd814
   123cc:	movt	r2, #1
   123d0:	mov	r0, #1
   123d4:	bl	19340 <__assert_fail@plt+0x7fb4>
   123d8:	mov	r1, #0
   123dc:	mov	r3, r5
   123e0:	str	r0, [sp]
   123e4:	mov	r2, r4
   123e8:	mov	r0, r1
   123ec:	bl	11194 <error@plt>
   123f0:	mov	r2, #5
   123f4:	movw	r1, #55696	; 0xd990
   123f8:	movt	r1, #1
   123fc:	mov	r0, #0
   12400:	bl	11104 <dcgettext@plt>
   12404:	mov	r1, #0
   12408:	mov	r2, r0
   1240c:	mov	r0, r1
   12410:	mov	r6, r1
   12414:	bl	11194 <error@plt>
   12418:	ldr	r4, [sp, #12]
   1241c:	mov	r1, r9
   12420:	mov	r2, #4
   12424:	mov	r0, r4
   12428:	bl	15294 <__assert_fail@plt+0x3f08>
   1242c:	mov	r0, r4
   12430:	bl	14a80 <__assert_fail@plt+0x36f4>
   12434:	b	11fc4 <__assert_fail@plt+0xc38>
   12438:	ldrb	r4, [fp, #13]
   1243c:	cmp	r4, #0
   12440:	bne	1211c <__assert_fail@plt+0xd90>
   12444:	movw	r1, #55768	; 0xd9d8
   12448:	movt	r1, #1
   1244c:	b	12044 <__assert_fail@plt+0xcb8>
   12450:	ldr	r3, [sp, #308]	; 0x134
   12454:	cmn	r3, #1
   12458:	beq	1277c <__assert_fail@plt+0x13f0>
   1245c:	ldr	lr, [r5, #28]
   12460:	cmp	r7, #0
   12464:	sub	lr, lr, r3
   12468:	clz	lr, lr
   1246c:	lsr	lr, lr, #5
   12470:	beq	12210 <__assert_fail@plt+0xe84>
   12474:	ldr	ip, [fp, #8]
   12478:	cmp	ip, #0
   1247c:	beq	12210 <__assert_fail@plt+0xe84>
   12480:	ldrd	r2, [ip]
   12484:	ldrd	r0, [r5, #96]	; 0x60
   12488:	cmp	r1, r3
   1248c:	cmpeq	r0, r2
   12490:	bne	12210 <__assert_fail@plt+0xe84>
   12494:	b	121fc <__assert_fail@plt+0xe70>
   12498:	ldr	r3, [sp, #24]
   1249c:	cmn	r3, #1
   124a0:	beq	12504 <__assert_fail@plt+0x1178>
   124a4:	ldr	r2, [r5, #16]
   124a8:	and	r2, r2, #61440	; 0xf000
   124ac:	cmp	r2, #32768	; 0x8000
   124b0:	beq	12934 <__assert_fail@plt+0x15a8>
   124b4:	cmp	r2, #16384	; 0x4000
   124b8:	movweq	r3, #18689	; 0x4901
   124bc:	moveq	r2, #18688	; 0x4900
   124c0:	streq	r3, [sp, #20]
   124c4:	bne	12504 <__assert_fail@plt+0x1178>
   124c8:	mov	r1, r8
   124cc:	mov	r0, sl
   124d0:	bl	110b0 <__openat64_2@plt>
   124d4:	subs	r7, r0, #0
   124d8:	bge	1284c <__assert_fail@plt+0x14c0>
   124dc:	ldr	r3, [sp, #36]	; 0x24
   124e0:	ldr	r2, [r3]
   124e4:	cmp	r2, #13
   124e8:	bne	12270 <__assert_fail@plt+0xee4>
   124ec:	ldr	r2, [r5, #16]
   124f0:	and	r2, r2, #61440	; 0xf000
   124f4:	cmp	r2, #32768	; 0x8000
   124f8:	beq	12834 <__assert_fail@plt+0x14a8>
   124fc:	ldr	r3, [sp, #12]
   12500:	ldr	sl, [r3, #32]
   12504:	mov	r2, #0
   12508:	mov	r1, r8
   1250c:	mov	r0, sl
   12510:	ldr	r3, [sp, #40]	; 0x28
   12514:	str	r2, [sp]
   12518:	ldr	r2, [sp, #28]
   1251c:	bl	11314 <fchownat@plt>
   12520:	clz	r0, r0
   12524:	lsr	r0, r0, #5
   12528:	cmp	r0, #0
   1252c:	beq	12270 <__assert_fail@plt+0xee4>
   12530:	ldr	r3, [fp]
   12534:	cmp	r3, #2
   12538:	beq	12094 <__assert_fail@plt+0xd08>
   1253c:	ldr	r2, [sp, #28]
   12540:	cmn	r2, #1
   12544:	beq	1264c <__assert_fail@plt+0x12c0>
   12548:	ldr	r7, [r5, #24]
   1254c:	cmp	r2, r7
   12550:	movne	r4, #2
   12554:	beq	1264c <__assert_fail@plt+0x12c0>
   12558:	mov	r0, r7
   1255c:	bl	11080 <getpwuid@plt>
   12560:	subs	r1, r0, #0
   12564:	beq	1267c <__assert_fail@plt+0x12f0>
   12568:	ldr	r0, [r1]
   1256c:	bl	1ba40 <__assert_fail@plt+0xa6b4>
   12570:	ldr	r5, [r5, #28]
   12574:	str	r0, [sp, #20]
   12578:	mov	r0, r5
   1257c:	bl	11374 <getgrgid@plt>
   12580:	subs	r1, r0, #0
   12584:	beq	12a74 <__assert_fail@plt+0x16e8>
   12588:	ldr	r0, [r1]
   1258c:	bl	1ba40 <__assert_fail@plt+0xa6b4>
   12590:	cmp	r4, #1
   12594:	mov	r5, r0
   12598:	beq	12728 <__assert_fail@plt+0x139c>
   1259c:	ldr	sl, [fp, #16]
   125a0:	ldr	r7, [fp, #20]
   125a4:	mov	r1, r7
   125a8:	mov	r0, sl
   125ac:	bl	11ddc <__assert_fail@plt+0xa50>
   125b0:	ldr	r3, [sp, #20]
   125b4:	cmp	sl, #0
   125b8:	str	r0, [sp, #32]
   125bc:	moveq	r0, #0
   125c0:	movne	r0, r3
   125c4:	cmp	r7, #0
   125c8:	movne	r1, r5
   125cc:	moveq	r1, #0
   125d0:	bl	11ddc <__assert_fail@plt+0xa50>
   125d4:	cmp	r4, #3
   125d8:	mov	r8, r0
   125dc:	beq	126e8 <__assert_fail@plt+0x135c>
   125e0:	cmp	r4, #4
   125e4:	beq	1268c <__assert_fail@plt+0x1300>
   125e8:	cmp	sl, #0
   125ec:	beq	128c0 <__assert_fail@plt+0x1534>
   125f0:	movw	r1, #56116	; 0xdb34
   125f4:	movt	r1, #1
   125f8:	mov	r2, #5
   125fc:	mov	r0, #0
   12600:	bl	11104 <dcgettext@plt>
   12604:	mov	r4, r0
   12608:	b	126ac <__assert_fail@plt+0x1320>
   1260c:	ldr	r3, [fp]
   12610:	cmp	r3, #2
   12614:	bne	12184 <__assert_fail@plt+0xdf8>
   12618:	ldr	r3, [fp, #8]
   1261c:	cmp	r3, #0
   12620:	bne	12184 <__assert_fail@plt+0xdf8>
   12624:	cmp	r4, #0
   12628:	bne	1218c <__assert_fail@plt+0xe00>
   1262c:	bic	sl, sl, #2
   12630:	uxth	r7, r7
   12634:	cmp	sl, #4
   12638:	cmpne	r7, #1
   1263c:	bhi	1221c <__assert_fail@plt+0xe90>
   12640:	ldr	r3, [sp, #12]
   12644:	ldr	sl, [r3, #32]
   12648:	b	1222c <__assert_fail@plt+0xea0>
   1264c:	ldr	r1, [sp, #40]	; 0x28
   12650:	cmn	r1, #1
   12654:	beq	12908 <__assert_fail@plt+0x157c>
   12658:	ldr	r2, [r5, #28]
   1265c:	cmp	r1, r2
   12660:	beq	12908 <__assert_fail@plt+0x157c>
   12664:	ldr	r7, [r5, #24]
   12668:	mov	r4, #2
   1266c:	mov	r0, r7
   12670:	bl	11080 <getpwuid@plt>
   12674:	subs	r1, r0, #0
   12678:	bne	12568 <__assert_fail@plt+0x11dc>
   1267c:	mov	r0, r7
   12680:	add	r2, sp, #160	; 0xa0
   12684:	bl	16cbc <__assert_fail@plt+0x5930>
   12688:	b	1256c <__assert_fail@plt+0x11e0>
   1268c:	cmp	sl, #0
   12690:	beq	1289c <__assert_fail@plt+0x1510>
   12694:	movw	r1, #56428	; 0xdc6c
   12698:	movt	r1, #1
   1269c:	mov	r2, #5
   126a0:	mov	r0, #0
   126a4:	bl	11104 <dcgettext@plt>
   126a8:	mov	r4, r0
   126ac:	mov	r0, #4
   126b0:	ldr	r1, [sp, #16]
   126b4:	bl	1941c <__assert_fail@plt+0x8090>
   126b8:	mov	r1, r4
   126bc:	ldr	r4, [sp, #32]
   126c0:	mov	r2, r0
   126c4:	mov	r3, r8
   126c8:	mov	r0, #1
   126cc:	str	r4, [sp]
   126d0:	bl	11260 <__printf_chk@plt>
   126d4:	mov	r0, r8
   126d8:	bl	12dd8 <__assert_fail@plt+0x1a4c>
   126dc:	mov	r0, r4
   126e0:	bl	12dd8 <__assert_fail@plt+0x1a4c>
   126e4:	b	1275c <__assert_fail@plt+0x13d0>
   126e8:	cmp	r0, #0
   126ec:	beq	12a90 <__assert_fail@plt+0x1704>
   126f0:	cmp	sl, #0
   126f4:	beq	128e4 <__assert_fail@plt+0x1558>
   126f8:	movw	r1, #56224	; 0xdba0
   126fc:	movt	r1, #1
   12700:	mov	r2, #5
   12704:	mov	r0, #0
   12708:	bl	11104 <dcgettext@plt>
   1270c:	mov	r4, r0
   12710:	b	126ac <__assert_fail@plt+0x1320>
   12714:	cmp	r4, #0
   12718:	bne	12bcc <__assert_fail@plt+0x1840>
   1271c:	cmp	r5, #0
   12720:	bne	12af4 <__assert_fail@plt+0x1768>
   12724:	str	r5, [sp, #20]
   12728:	mov	r2, #5
   1272c:	movw	r1, #56060	; 0xdafc
   12730:	movt	r1, #1
   12734:	mov	r0, #0
   12738:	bl	11104 <dcgettext@plt>
   1273c:	mov	r4, r0
   12740:	mov	r0, #4
   12744:	ldr	r1, [sp, #16]
   12748:	bl	1941c <__assert_fail@plt+0x8090>
   1274c:	mov	r2, r0
   12750:	mov	r1, r4
   12754:	mov	r0, #1
   12758:	bl	11260 <__printf_chk@plt>
   1275c:	ldr	r0, [sp, #20]
   12760:	bl	12dd8 <__assert_fail@plt+0x1a4c>
   12764:	mov	r0, r5
   12768:	bl	12dd8 <__assert_fail@plt+0x1a4c>
   1276c:	ldrb	r3, [fp, #4]
   12770:	cmp	r3, #0
   12774:	bne	11fc4 <__assert_fail@plt+0xc38>
   12778:	b	120a0 <__assert_fail@plt+0xd14>
   1277c:	cmp	r7, #0
   12780:	beq	12218 <__assert_fail@plt+0xe8c>
   12784:	ldr	ip, [fp, #8]
   12788:	cmp	ip, #0
   1278c:	beq	12218 <__assert_fail@plt+0xe8c>
   12790:	ldrd	r0, [ip]
   12794:	ldrd	r2, [r5, #96]	; 0x60
   12798:	cmp	r1, r3
   1279c:	cmpeq	r0, r2
   127a0:	bne	12218 <__assert_fail@plt+0xe8c>
   127a4:	ldrd	r2, [r5]
   127a8:	ldrd	r0, [ip, #8]
   127ac:	cmp	r1, r3
   127b0:	cmpeq	r0, r2
   127b4:	bne	12218 <__assert_fail@plt+0xe8c>
   127b8:	ldr	r6, [sp, #16]
   127bc:	movw	r1, #55316	; 0xd814
   127c0:	movt	r1, #1
   127c4:	mov	r0, r6
   127c8:	bl	11074 <strcmp@plt>
   127cc:	subs	r4, r0, #0
   127d0:	bne	12bd4 <__assert_fail@plt+0x1848>
   127d4:	mov	r2, #5
   127d8:	movw	r1, #55588	; 0xd924
   127dc:	movt	r1, #1
   127e0:	bl	11104 <dcgettext@plt>
   127e4:	mov	r5, r0
   127e8:	mov	r1, r6
   127ec:	mov	r0, #4
   127f0:	bl	1941c <__assert_fail@plt+0x8090>
   127f4:	mov	r3, r0
   127f8:	mov	r2, r5
   127fc:	mov	r1, r4
   12800:	mov	r0, r4
   12804:	bl	11194 <error@plt>
   12808:	mov	r2, #5
   1280c:	movw	r1, #55696	; 0xd990
   12810:	movt	r1, #1
   12814:	mov	r0, #0
   12818:	bl	11104 <dcgettext@plt>
   1281c:	mov	r1, #0
   12820:	mov	r2, r0
   12824:	mov	r0, r1
   12828:	mov	r6, r1
   1282c:	bl	11194 <error@plt>
   12830:	b	11fc4 <__assert_fail@plt+0xc38>
   12834:	mov	r0, sl
   12838:	mov	r1, r8
   1283c:	ldr	r2, [sp, #20]
   12840:	bl	110b0 <__openat64_2@plt>
   12844:	subs	r7, r0, #0
   12848:	blt	12c30 <__assert_fail@plt+0x18a4>
   1284c:	add	r2, sp, #160	; 0xa0
   12850:	mov	r1, r7
   12854:	mov	r0, #3
   12858:	bl	11140 <__fxstat64@plt>
   1285c:	subs	ip, r0, #0
   12860:	bne	1291c <__assert_fail@plt+0x1590>
   12864:	add	r3, sp, #256	; 0x100
   12868:	ldrd	r0, [r5, #96]	; 0x60
   1286c:	ldrd	r2, [r3]
   12870:	cmp	r1, r3
   12874:	cmpeq	r0, r2
   12878:	beq	12b4c <__assert_fail@plt+0x17c0>
   1287c:	ldr	sl, [sp, #36]	; 0x24
   12880:	mov	r0, r7
   12884:	mov	r6, ip
   12888:	mov	r7, ip
   1288c:	ldr	r8, [sl]
   12890:	bl	11350 <close@plt>
   12894:	str	r8, [sl]
   12898:	b	12128 <__assert_fail@plt+0xd9c>
   1289c:	cmp	r7, #0
   128a0:	beq	12bb0 <__assert_fail@plt+0x1824>
   128a4:	mov	r0, sl
   128a8:	movw	r1, #56460	; 0xdc8c
   128ac:	movt	r1, #1
   128b0:	mov	r2, #5
   128b4:	bl	11104 <dcgettext@plt>
   128b8:	mov	r4, r0
   128bc:	b	126ac <__assert_fail@plt+0x1320>
   128c0:	cmp	r7, #0
   128c4:	beq	12b94 <__assert_fail@plt+0x1808>
   128c8:	mov	r0, sl
   128cc:	movw	r1, #56156	; 0xdb5c
   128d0:	movt	r1, #1
   128d4:	mov	r2, #5
   128d8:	bl	11104 <dcgettext@plt>
   128dc:	mov	r4, r0
   128e0:	b	126ac <__assert_fail@plt+0x1320>
   128e4:	cmp	r7, #0
   128e8:	beq	12b34 <__assert_fail@plt+0x17a8>
   128ec:	mov	r0, sl
   128f0:	movw	r1, #56272	; 0xdbd0
   128f4:	movt	r1, #1
   128f8:	mov	r2, #5
   128fc:	bl	11104 <dcgettext@plt>
   12900:	mov	r4, r0
   12904:	b	126ac <__assert_fail@plt+0x1320>
   12908:	cmp	r3, #0
   1290c:	bne	12094 <__assert_fail@plt+0xd08>
   12910:	mov	r4, #4
   12914:	ldr	r7, [r5, #24]
   12918:	b	12558 <__assert_fail@plt+0x11cc>
   1291c:	ldr	r6, [sp, #36]	; 0x24
   12920:	mov	r0, r7
   12924:	ldr	r4, [r6]
   12928:	bl	11350 <close@plt>
   1292c:	str	r4, [r6]
   12930:	b	12270 <__assert_fail@plt+0xee4>
   12934:	movw	r3, #2305	; 0x901
   12938:	mov	r2, #2304	; 0x900
   1293c:	str	r3, [sp, #20]
   12940:	b	124c8 <__assert_fail@plt+0x113c>
   12944:	mov	r4, #1
   12948:	mov	r7, r4
   1294c:	b	12128 <__assert_fail@plt+0xd9c>
   12950:	ldr	r5, [r9, #32]
   12954:	mov	r2, r3
   12958:	mov	r1, #3
   1295c:	mov	r0, r4
   12960:	mov	r6, r4
   12964:	bl	19f9c <__assert_fail@plt+0x8c10>
   12968:	mov	r3, r0
   1296c:	movw	r2, #55148	; 0xd76c
   12970:	movt	r2, #1
   12974:	mov	r0, r6
   12978:	mov	r1, r5
   1297c:	mov	r7, r4
   12980:	bl	11194 <error@plt>
   12984:	mov	r4, #1
   12988:	mov	r5, r6
   1298c:	b	12128 <__assert_fail@plt+0xd9c>
   12990:	ldrb	r3, [fp, #12]
   12994:	cmp	r3, #0
   12998:	bne	11f88 <__assert_fail@plt+0xbfc>
   1299c:	ldr	r3, [fp]
   129a0:	cmp	r3, #2
   129a4:	orreq	r1, r1, #8
   129a8:	b	11f88 <__assert_fail@plt+0xbfc>
   129ac:	ldr	r3, [sp, #12]
   129b0:	mov	r5, #0
   129b4:	mov	r2, r8
   129b8:	mov	r0, #3
   129bc:	ldr	r1, [r3, #32]
   129c0:	add	r3, sp, #56	; 0x38
   129c4:	str	r5, [sp]
   129c8:	bl	11128 <__fxstatat64@plt>
   129cc:	cmp	r0, r5
   129d0:	beq	12ac0 <__assert_fail@plt+0x1734>
   129d4:	ldrb	r4, [fp, #13]
   129d8:	cmp	r4, #0
   129dc:	movne	r6, r5
   129e0:	addne	r5, sp, #56	; 0x38
   129e4:	movne	r7, r6
   129e8:	bne	12128 <__assert_fail@plt+0xd9c>
   129ec:	ldr	r3, [sp, #36]	; 0x24
   129f0:	mov	r2, #5
   129f4:	mov	r0, r4
   129f8:	movw	r1, #55984	; 0xdab0
   129fc:	movt	r1, #1
   12a00:	mov	r6, r4
   12a04:	ldr	r5, [r3]
   12a08:	bl	11104 <dcgettext@plt>
   12a0c:	mov	r7, r0
   12a10:	mov	r0, #4
   12a14:	ldr	r1, [sp, #16]
   12a18:	bl	1941c <__assert_fail@plt+0x8090>
   12a1c:	mov	r3, r0
   12a20:	mov	r2, r7
   12a24:	mov	r1, r5
   12a28:	mov	r0, r4
   12a2c:	add	r5, sp, #56	; 0x38
   12a30:	mov	r4, #1
   12a34:	bl	11194 <error@plt>
   12a38:	mov	r7, r6
   12a3c:	b	12128 <__assert_fail@plt+0xd9c>
   12a40:	ldr	r3, [sp, #36]	; 0x24
   12a44:	mov	r2, #5
   12a48:	movw	r1, #56516	; 0xdcc4
   12a4c:	movt	r1, #1
   12a50:	mov	r0, #0
   12a54:	ldr	r4, [r3]
   12a58:	bl	11104 <dcgettext@plt>
   12a5c:	mov	r2, r0
   12a60:	mov	r0, #0
   12a64:	mov	r6, r0
   12a68:	mov	r1, r4
   12a6c:	bl	11194 <error@plt>
   12a70:	b	120f0 <__assert_fail@plt+0xd64>
   12a74:	mov	r0, r5
   12a78:	add	r2, sp, #160	; 0xa0
   12a7c:	bl	16cbc <__assert_fail@plt+0x5930>
   12a80:	b	1258c <__assert_fail@plt+0x1200>
   12a84:	mov	r4, #0
   12a88:	mov	r7, #1
   12a8c:	b	12128 <__assert_fail@plt+0xd9c>
   12a90:	cmp	sl, #0
   12a94:	mov	r2, #5
   12a98:	beq	12b00 <__assert_fail@plt+0x1774>
   12a9c:	ldr	r1, [sp, #44]	; 0x2c
   12aa0:	bl	11104 <dcgettext@plt>
   12aa4:	mov	r4, r0
   12aa8:	mov	r0, #0
   12aac:	ldr	r8, [sp, #32]
   12ab0:	bl	12dd8 <__assert_fail@plt+0x1a4c>
   12ab4:	mov	r3, #0
   12ab8:	str	r3, [sp, #32]
   12abc:	b	126ac <__assert_fail@plt+0x1320>
   12ac0:	ldrh	sl, [r9, #56]	; 0x38
   12ac4:	add	r5, sp, #56	; 0x38
   12ac8:	sub	r7, sl, #1
   12acc:	b	1219c <__assert_fail@plt+0xe10>
   12ad0:	mov	r2, #5
   12ad4:	movw	r1, #55572	; 0xd914
   12ad8:	movt	r1, #1
   12adc:	bl	11104 <dcgettext@plt>
   12ae0:	mov	r2, r0
   12ae4:	mov	r1, r4
   12ae8:	mov	r0, r6
   12aec:	bl	11194 <error@plt>
   12af0:	b	120e0 <__assert_fail@plt+0xd54>
   12af4:	mov	r4, #1
   12af8:	ldr	r7, [r5, #24]
   12afc:	b	12558 <__assert_fail@plt+0x11cc>
   12b00:	cmp	r7, #0
   12b04:	ldrne	r1, [sp, #52]	; 0x34
   12b08:	ldreq	r1, [sp, #48]	; 0x30
   12b0c:	bl	11104 <dcgettext@plt>
   12b10:	mov	r4, r0
   12b14:	b	12aa8 <__assert_fail@plt+0x171c>
   12b18:	mov	r3, #1
   12b1c:	mov	r1, r9
   12b20:	ldr	r0, [sp, #12]
   12b24:	mov	r2, r3
   12b28:	str	r3, [r9, #16]
   12b2c:	bl	15294 <__assert_fail@plt+0x3f08>
   12b30:	b	11fc4 <__assert_fail@plt+0xc38>
   12b34:	mov	r0, r7
   12b38:	mov	r2, #5
   12b3c:	ldr	r1, [sp, #48]	; 0x30
   12b40:	bl	11104 <dcgettext@plt>
   12b44:	mov	r4, r0
   12b48:	b	126ac <__assert_fail@plt+0x1320>
   12b4c:	ldrd	r0, [r5]
   12b50:	ldrd	r2, [sp, #160]	; 0xa0
   12b54:	cmp	r1, r3
   12b58:	cmpeq	r0, r2
   12b5c:	bne	1287c <__assert_fail@plt+0x14f0>
   12b60:	ldr	r3, [sp, #304]	; 0x130
   12b64:	cmn	r3, #1
   12b68:	beq	12c7c <__assert_fail@plt+0x18f0>
   12b6c:	mov	r2, r3
   12b70:	ldr	r3, [sp, #184]	; 0xb8
   12b74:	cmp	r2, r3
   12b78:	beq	12c7c <__assert_fail@plt+0x18f0>
   12b7c:	ldr	r8, [sp, #36]	; 0x24
   12b80:	mov	r0, r7
   12b84:	ldr	r4, [r8]
   12b88:	bl	11350 <close@plt>
   12b8c:	str	r4, [r8]
   12b90:	b	12530 <__assert_fail@plt+0x11a4>
   12b94:	mov	r0, r7
   12b98:	movw	r1, #56192	; 0xdb80
   12b9c:	movt	r1, #1
   12ba0:	mov	r2, #5
   12ba4:	bl	11104 <dcgettext@plt>
   12ba8:	mov	r4, r0
   12bac:	b	126ac <__assert_fail@plt+0x1320>
   12bb0:	mov	r0, r7
   12bb4:	movw	r1, #56488	; 0xdca8
   12bb8:	movt	r1, #1
   12bbc:	mov	r2, #5
   12bc0:	bl	11104 <dcgettext@plt>
   12bc4:	mov	r4, r0
   12bc8:	b	126ac <__assert_fail@plt+0x1320>
   12bcc:	mov	r4, #4
   12bd0:	b	12148 <__assert_fail@plt+0xdbc>
   12bd4:	mov	r2, #5
   12bd8:	movw	r1, #55636	; 0xd954
   12bdc:	movt	r1, #1
   12be0:	mov	r0, #0
   12be4:	bl	11104 <dcgettext@plt>
   12be8:	mov	r4, r0
   12bec:	mov	r1, #4
   12bf0:	ldr	r2, [sp, #16]
   12bf4:	mov	r0, #0
   12bf8:	bl	19340 <__assert_fail@plt+0x7fb4>
   12bfc:	mov	r5, r0
   12c00:	mov	r1, #4
   12c04:	movw	r2, #55316	; 0xd814
   12c08:	movt	r2, #1
   12c0c:	mov	r0, #1
   12c10:	bl	19340 <__assert_fail@plt+0x7fb4>
   12c14:	mov	r1, #0
   12c18:	mov	r3, r5
   12c1c:	str	r0, [sp]
   12c20:	mov	r2, r4
   12c24:	mov	r0, r1
   12c28:	bl	11194 <error@plt>
   12c2c:	b	12808 <__assert_fail@plt+0x147c>
   12c30:	ldr	r3, [sp, #36]	; 0x24
   12c34:	ldr	r3, [r3]
   12c38:	cmp	r3, #13
   12c3c:	bne	12270 <__assert_fail@plt+0xee4>
   12c40:	b	124fc <__assert_fail@plt+0x1170>
   12c44:	mov	r2, #5
   12c48:	movw	r1, #55588	; 0xd924
   12c4c:	movt	r1, #1
   12c50:	bl	11104 <dcgettext@plt>
   12c54:	mov	r5, r0
   12c58:	mov	r1, r6
   12c5c:	mov	r0, #4
   12c60:	bl	1941c <__assert_fail@plt+0x8090>
   12c64:	mov	r3, r0
   12c68:	mov	r2, r5
   12c6c:	mov	r1, r4
   12c70:	mov	r0, r4
   12c74:	bl	11194 <error@plt>
   12c78:	b	123f0 <__assert_fail@plt+0x1064>
   12c7c:	ldr	r3, [sp, #308]	; 0x134
   12c80:	cmn	r3, #1
   12c84:	beq	12c98 <__assert_fail@plt+0x190c>
   12c88:	mov	r2, r3
   12c8c:	ldr	r3, [sp, #188]	; 0xbc
   12c90:	cmp	r2, r3
   12c94:	bne	12b7c <__assert_fail@plt+0x17f0>
   12c98:	mov	r0, r7
   12c9c:	ldr	r1, [sp, #28]
   12ca0:	ldr	r2, [sp, #40]	; 0x28
   12ca4:	bl	11230 <fchown@plt>
   12ca8:	cmp	r0, #0
   12cac:	bne	1291c <__assert_fail@plt+0x1590>
   12cb0:	mov	r0, r7
   12cb4:	bl	11350 <close@plt>
   12cb8:	cmp	r0, #0
   12cbc:	bne	12270 <__assert_fail@plt+0xee4>
   12cc0:	b	12530 <__assert_fail@plt+0x11a4>
   12cc4:	mov	r4, r7
   12cc8:	b	12128 <__assert_fail@plt+0xd9c>
   12ccc:	movw	r3, #61888	; 0xf1c0
   12cd0:	movt	r3, #2
   12cd4:	str	r0, [r3]
   12cd8:	bx	lr
   12cdc:	movw	r3, #61888	; 0xf1c0
   12ce0:	movt	r3, #2
   12ce4:	strb	r0, [r3, #4]
   12ce8:	bx	lr
   12cec:	movw	r3, #61852	; 0xf19c
   12cf0:	movt	r3, #2
   12cf4:	strd	r4, [sp, #-16]!
   12cf8:	ldr	r0, [r3]
   12cfc:	str	r6, [sp, #8]
   12d00:	str	lr, [sp, #12]
   12d04:	sub	sp, sp, #8
   12d08:	bl	1c1cc <__assert_fail@plt+0xae40>
   12d0c:	cmp	r0, #0
   12d10:	beq	12d3c <__assert_fail@plt+0x19b0>
   12d14:	movw	r4, #61888	; 0xf1c0
   12d18:	movt	r4, #2
   12d1c:	ldrb	r6, [r4, #4]
   12d20:	bl	1123c <__errno_location@plt>
   12d24:	mov	r5, r0
   12d28:	cmp	r6, #0
   12d2c:	beq	12d68 <__assert_fail@plt+0x19dc>
   12d30:	ldr	r3, [r0]
   12d34:	cmp	r3, #32
   12d38:	bne	12d68 <__assert_fail@plt+0x19dc>
   12d3c:	movw	r3, #61848	; 0xf198
   12d40:	movt	r3, #2
   12d44:	ldr	r0, [r3]
   12d48:	bl	1c1cc <__assert_fail@plt+0xae40>
   12d4c:	cmp	r0, #0
   12d50:	bne	12db0 <__assert_fail@plt+0x1a24>
   12d54:	add	sp, sp, #8
   12d58:	ldrd	r4, [sp]
   12d5c:	ldr	r6, [sp, #8]
   12d60:	add	sp, sp, #12
   12d64:	pop	{pc}		; (ldr pc, [sp], #4)
   12d68:	movw	r1, #56552	; 0xdce8
   12d6c:	movt	r1, #1
   12d70:	mov	r2, #5
   12d74:	mov	r0, #0
   12d78:	bl	11104 <dcgettext@plt>
   12d7c:	mov	r6, r0
   12d80:	ldr	r0, [r4]
   12d84:	cmp	r0, #0
   12d88:	beq	12dc0 <__assert_fail@plt+0x1a34>
   12d8c:	ldr	r4, [r5]
   12d90:	bl	19bcc <__assert_fail@plt+0x8840>
   12d94:	mov	r3, r0
   12d98:	movw	r2, #55144	; 0xd768
   12d9c:	movt	r2, #1
   12da0:	mov	r0, #0
   12da4:	str	r6, [sp]
   12da8:	mov	r1, r4
   12dac:	bl	11194 <error@plt>
   12db0:	movw	r3, #61760	; 0xf140
   12db4:	movt	r3, #2
   12db8:	ldr	r0, [r3]
   12dbc:	bl	110bc <_exit@plt>
   12dc0:	mov	r3, r6
   12dc4:	movw	r2, #55148	; 0xd76c
   12dc8:	movt	r2, #1
   12dcc:	ldr	r1, [r5]
   12dd0:	bl	11194 <error@plt>
   12dd4:	b	12db0 <__assert_fail@plt+0x1a24>
   12dd8:	strd	r4, [sp, #-12]!
   12ddc:	mov	r5, r0
   12de0:	str	lr, [sp, #8]
   12de4:	sub	sp, sp, #12
   12de8:	bl	1123c <__errno_location@plt>
   12dec:	mov	r4, r0
   12df0:	mov	r2, #0
   12df4:	ldr	r3, [r4]
   12df8:	mov	r0, r5
   12dfc:	str	r2, [r4]
   12e00:	str	r3, [sp]
   12e04:	str	r3, [sp, #4]
   12e08:	bl	110a4 <free@plt>
   12e0c:	ldr	r3, [r4]
   12e10:	add	r2, sp, #8
   12e14:	clz	r3, r3
   12e18:	lsr	r3, r3, #5
   12e1c:	add	r3, r2, r3, lsl #2
   12e20:	ldr	r3, [r3, #-8]
   12e24:	str	r3, [r4]
   12e28:	add	sp, sp, #12
   12e2c:	ldrd	r4, [sp]
   12e30:	add	sp, sp, #8
   12e34:	pop	{pc}		; (ldr pc, [sp], #4)
   12e38:	strd	r4, [sp, #-8]!
   12e3c:	ldrd	r2, [r1, #8]
   12e40:	ldrd	r4, [r0, #8]
   12e44:	cmp	r5, r3
   12e48:	cmpeq	r4, r2
   12e4c:	movne	r0, #0
   12e50:	bne	12e6c <__assert_fail@plt+0x1ae0>
   12e54:	ldrd	r4, [r0]
   12e58:	ldrd	r2, [r1]
   12e5c:	cmp	r5, r3
   12e60:	cmpeq	r4, r2
   12e64:	moveq	r0, #1
   12e68:	movne	r0, #0
   12e6c:	ldrd	r4, [sp]
   12e70:	add	sp, sp, #8
   12e74:	bx	lr
   12e78:	mov	r2, r1
   12e7c:	mov	r3, #0
   12e80:	str	r4, [sp, #-8]!
   12e84:	ldrd	r0, [r0, #8]
   12e88:	str	lr, [sp, #4]
   12e8c:	bl	1c99c <__assert_fail@plt+0xb610>
   12e90:	ldr	r4, [sp]
   12e94:	add	sp, sp, #4
   12e98:	mov	r0, r2
   12e9c:	pop	{pc}		; (ldr pc, [sp], #4)
   12ea0:	mov	r2, r1
   12ea4:	mov	r3, #0
   12ea8:	str	r4, [sp, #-8]!
   12eac:	ldrd	r0, [r0]
   12eb0:	str	lr, [sp, #4]
   12eb4:	bl	1c99c <__assert_fail@plt+0xb610>
   12eb8:	ldr	r4, [sp]
   12ebc:	add	sp, sp, #4
   12ec0:	mov	r0, r2
   12ec4:	pop	{pc}		; (ldr pc, [sp], #4)
   12ec8:	strd	r4, [sp, #-8]!
   12ecc:	ldrd	r2, [r1]
   12ed0:	ldrd	r4, [r0]
   12ed4:	cmp	r5, r3
   12ed8:	cmpeq	r4, r2
   12edc:	ldrd	r4, [sp]
   12ee0:	add	sp, sp, #8
   12ee4:	moveq	r0, #1
   12ee8:	movne	r0, #0
   12eec:	bx	lr
   12ef0:	ldr	r2, [r0]
   12ef4:	ldr	r3, [r1]
   12ef8:	ldrd	r0, [r2, #160]	; 0xa0
   12efc:	ldrd	r2, [r3, #160]	; 0xa0
   12f00:	cmp	r1, r3
   12f04:	cmpeq	r0, r2
   12f08:	movhi	r0, #1
   12f0c:	movls	r0, #0
   12f10:	movcc	r3, #1
   12f14:	movcs	r3, #0
   12f18:	sub	r0, r0, r3
   12f1c:	bx	lr
   12f20:	strd	r4, [sp, #-24]!	; 0xffffffe8
   12f24:	mov	r5, r2
   12f28:	mov	r4, r1
   12f2c:	ldr	r2, [r0, #40]	; 0x28
   12f30:	strd	r6, [sp, #8]
   12f34:	mov	r6, r0
   12f38:	str	r8, [sp, #16]
   12f3c:	str	lr, [sp, #20]
   12f40:	ldr	r0, [r0, #8]
   12f44:	cmp	r2, r5
   12f48:	ldr	r7, [r6, #44]	; 0x2c
   12f4c:	bcs	12f74 <__assert_fail@plt+0x1be8>
   12f50:	add	r1, r5, #40	; 0x28
   12f54:	cmn	r1, #-1073741823	; 0xc0000001
   12f58:	str	r1, [r6, #40]	; 0x28
   12f5c:	bhi	12ff4 <__assert_fail@plt+0x1c68>
   12f60:	lsl	r1, r1, #2
   12f64:	bl	1c174 <__assert_fail@plt+0xade8>
   12f68:	cmp	r0, #0
   12f6c:	strne	r0, [r6, #8]
   12f70:	beq	12ff0 <__assert_fail@plt+0x1c64>
   12f74:	cmp	r4, #0
   12f78:	movne	r2, r0
   12f7c:	beq	12f90 <__assert_fail@plt+0x1c04>
   12f80:	str	r4, [r2], #4
   12f84:	ldr	r4, [r4, #8]
   12f88:	cmp	r4, #0
   12f8c:	bne	12f80 <__assert_fail@plt+0x1bf4>
   12f90:	mov	r3, r7
   12f94:	mov	r2, #4
   12f98:	mov	r1, r5
   12f9c:	bl	11308 <qsort@plt>
   12fa0:	ldr	lr, [r6, #8]
   12fa4:	subs	r3, r5, #1
   12fa8:	ldr	r0, [lr]
   12fac:	moveq	r2, r0
   12fb0:	beq	12fd4 <__assert_fail@plt+0x1c48>
   12fb4:	mov	r2, lr
   12fb8:	ldr	r1, [r2]
   12fbc:	subs	r3, r3, #1
   12fc0:	ldr	ip, [r2, #4]!
   12fc4:	str	ip, [r1, #8]
   12fc8:	bne	12fb8 <__assert_fail@plt+0x1c2c>
   12fcc:	add	r5, lr, r5, lsl #2
   12fd0:	ldr	r2, [r5, #-4]
   12fd4:	mov	r3, #0
   12fd8:	str	r3, [r2, #8]
   12fdc:	ldrd	r4, [sp]
   12fe0:	ldrd	r6, [sp, #8]
   12fe4:	ldr	r8, [sp, #16]
   12fe8:	add	sp, sp, #20
   12fec:	pop	{pc}		; (ldr pc, [sp], #4)
   12ff0:	ldr	r0, [r6, #8]
   12ff4:	bl	12dd8 <__assert_fail@plt+0x1a4c>
   12ff8:	mov	r3, #0
   12ffc:	mov	r0, r4
   13000:	str	r3, [r6, #8]
   13004:	str	r3, [r6, #40]	; 0x28
   13008:	b	12fdc <__assert_fail@plt+0x1c50>
   1300c:	strd	r4, [sp, #-20]!	; 0xffffffec
   13010:	ldr	r5, [r0, #44]	; 0x2c
   13014:	ldr	r3, [r5, #48]	; 0x30
   13018:	strd	r6, [sp, #8]
   1301c:	str	lr, [sp, #16]
   13020:	sub	sp, sp, #100	; 0x64
   13024:	tst	r3, #512	; 0x200
   13028:	beq	130b8 <__assert_fail@plt+0x1d2c>
   1302c:	ldr	r4, [r5, #52]	; 0x34
   13030:	mov	r7, r1
   13034:	mov	r6, r0
   13038:	cmp	r4, #0
   1303c:	beq	13064 <__assert_fail@plt+0x1cd8>
   13040:	ldrd	r2, [r6, #64]	; 0x40
   13044:	add	r1, sp, #8
   13048:	mov	r0, r4
   1304c:	strd	r2, [sp, #8]
   13050:	bl	15aa0 <__assert_fail@plt+0x4714>
   13054:	cmp	r0, #0
   13058:	beq	1309c <__assert_fail@plt+0x1d10>
   1305c:	ldr	r0, [r0, #8]
   13060:	b	130bc <__assert_fail@plt+0x1d30>
   13064:	movw	r0, #11736	; 0x2dd8
   13068:	movt	r0, #1
   1306c:	mov	r1, r4
   13070:	movw	r3, #11976	; 0x2ec8
   13074:	movt	r3, #1
   13078:	movw	r2, #11936	; 0x2ea0
   1307c:	movt	r2, #1
   13080:	str	r0, [sp]
   13084:	mov	r0, #13
   13088:	bl	15e24 <__assert_fail@plt+0x4a98>
   1308c:	cmp	r0, #0
   13090:	mov	r4, r0
   13094:	str	r0, [r5, #52]	; 0x34
   13098:	bne	13040 <__assert_fail@plt+0x1cb4>
   1309c:	cmp	r7, #0
   130a0:	blt	130b8 <__assert_fail@plt+0x1d2c>
   130a4:	mov	r0, r7
   130a8:	add	r1, sp, #8
   130ac:	bl	1102c <fstatfs64@plt>
   130b0:	cmp	r0, #0
   130b4:	beq	130d0 <__assert_fail@plt+0x1d44>
   130b8:	mov	r0, #0
   130bc:	add	sp, sp, #100	; 0x64
   130c0:	ldrd	r4, [sp]
   130c4:	ldrd	r6, [sp, #8]
   130c8:	add	sp, sp, #16
   130cc:	pop	{pc}		; (ldr pc, [sp], #4)
   130d0:	cmp	r4, #0
   130d4:	beq	13114 <__assert_fail@plt+0x1d88>
   130d8:	mov	r0, #16
   130dc:	bl	1c138 <__assert_fail@plt+0xadac>
   130e0:	subs	r5, r0, #0
   130e4:	beq	13114 <__assert_fail@plt+0x1d88>
   130e8:	ldr	ip, [sp, #8]
   130ec:	mov	r0, r4
   130f0:	mov	r1, r5
   130f4:	ldrd	r2, [r6, #64]	; 0x40
   130f8:	strd	r2, [r5]
   130fc:	str	ip, [r5, #8]
   13100:	bl	1668c <__assert_fail@plt+0x5300>
   13104:	cmp	r0, #0
   13108:	beq	1311c <__assert_fail@plt+0x1d90>
   1310c:	cmp	r5, r0
   13110:	bne	13128 <__assert_fail@plt+0x1d9c>
   13114:	ldr	r0, [sp, #8]
   13118:	b	130bc <__assert_fail@plt+0x1d30>
   1311c:	mov	r0, r5
   13120:	bl	12dd8 <__assert_fail@plt+0x1a4c>
   13124:	b	13114 <__assert_fail@plt+0x1d88>
   13128:	bl	11344 <abort@plt>
   1312c:	ldr	ip, [r2, #48]	; 0x30
   13130:	strd	r4, [sp, #-16]!
   13134:	mov	r4, r2
   13138:	add	r5, r2, #64	; 0x40
   1313c:	ldr	r2, [r2, #24]
   13140:	str	r6, [sp, #8]
   13144:	str	lr, [sp, #12]
   13148:	sub	sp, sp, #8
   1314c:	cmp	ip, #0
   13150:	bne	131c8 <__assert_fail@plt+0x1e3c>
   13154:	tst	r1, #1
   13158:	beq	131c8 <__assert_fail@plt+0x1e3c>
   1315c:	mov	r1, r2
   13160:	mov	r0, #3
   13164:	mov	r2, r5
   13168:	bl	1132c <__xstat64@plt>
   1316c:	cmp	r0, #0
   13170:	beq	131f4 <__assert_fail@plt+0x1e68>
   13174:	bl	1123c <__errno_location@plt>
   13178:	ldr	r3, [r0]
   1317c:	mov	r6, r0
   13180:	cmp	r3, #2
   13184:	bne	131ac <__assert_fail@plt+0x1e20>
   13188:	mov	r2, r5
   1318c:	mov	r0, #3
   13190:	ldr	r1, [r4, #24]
   13194:	bl	1135c <__lxstat64@plt>
   13198:	subs	r3, r0, #0
   1319c:	moveq	r0, #13
   131a0:	streq	r3, [r6]
   131a4:	beq	13218 <__assert_fail@plt+0x1e8c>
   131a8:	ldr	r3, [r6]
   131ac:	mov	r0, r5
   131b0:	mov	r2, #104	; 0x68
   131b4:	str	r3, [r4, #32]
   131b8:	mov	r1, #0
   131bc:	bl	11254 <memset@plt>
   131c0:	mov	r0, #10
   131c4:	b	13218 <__assert_fail@plt+0x1e8c>
   131c8:	ubfx	ip, r1, #1, #1
   131cc:	orrs	r3, r3, ip
   131d0:	bne	1315c <__assert_fail@plt+0x1dd0>
   131d4:	mov	ip, #256	; 0x100
   131d8:	mov	r1, r0
   131dc:	mov	r3, r5
   131e0:	mov	r0, #3
   131e4:	str	ip, [sp]
   131e8:	bl	11128 <__fxstatat64@plt>
   131ec:	cmp	r0, #0
   131f0:	bne	13274 <__assert_fail@plt+0x1ee8>
   131f4:	ldr	r3, [r4, #80]	; 0x50
   131f8:	and	r3, r3, #61440	; 0xf000
   131fc:	cmp	r3, #16384	; 0x4000
   13200:	beq	1322c <__assert_fail@plt+0x1ea0>
   13204:	cmp	r3, #40960	; 0xa000
   13208:	beq	13280 <__assert_fail@plt+0x1ef4>
   1320c:	cmp	r3, #32768	; 0x8000
   13210:	movne	r0, #3
   13214:	moveq	r0, #8
   13218:	add	sp, sp, #8
   1321c:	ldrd	r4, [sp]
   13220:	ldr	r6, [sp, #8]
   13224:	add	sp, sp, #12
   13228:	pop	{pc}		; (ldr pc, [sp], #4)
   1322c:	ldrb	r3, [r4, #168]	; 0xa8
   13230:	cmp	r3, #46	; 0x2e
   13234:	bne	13258 <__assert_fail@plt+0x1ecc>
   13238:	ldrb	r3, [r4, #169]	; 0xa9
   1323c:	cmp	r3, #0
   13240:	beq	13260 <__assert_fail@plt+0x1ed4>
   13244:	ldr	r3, [r4, #168]	; 0xa8
   13248:	bic	r3, r3, #-16777216	; 0xff000000
   1324c:	bic	r3, r3, #255	; 0xff
   13250:	cmp	r3, #11776	; 0x2e00
   13254:	beq	13260 <__assert_fail@plt+0x1ed4>
   13258:	mov	r0, #1
   1325c:	b	13218 <__assert_fail@plt+0x1e8c>
   13260:	ldr	r3, [r4, #48]	; 0x30
   13264:	cmp	r3, #0
   13268:	moveq	r0, #1
   1326c:	movne	r0, #5
   13270:	b	13218 <__assert_fail@plt+0x1e8c>
   13274:	bl	1123c <__errno_location@plt>
   13278:	ldr	r3, [r0]
   1327c:	b	131ac <__assert_fail@plt+0x1e20>
   13280:	mov	r0, #12
   13284:	b	13218 <__assert_fail@plt+0x1e8c>
   13288:	movw	r3, #258	; 0x102
   1328c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   13290:	tst	r0, r3
   13294:	strd	r6, [sp, #8]
   13298:	strd	r8, [sp, #16]
   1329c:	mov	r8, r2
   132a0:	str	sl, [sp, #24]
   132a4:	mov	sl, r1
   132a8:	str	lr, [sp, #28]
   132ac:	beq	13330 <__assert_fail@plt+0x1fa4>
   132b0:	mov	r0, #24
   132b4:	bl	1c138 <__assert_fail@plt+0xadac>
   132b8:	subs	r9, r0, #0
   132bc:	beq	13354 <__assert_fail@plt+0x1fc8>
   132c0:	ldrd	r6, [r8, #64]	; 0x40
   132c4:	mov	r1, r9
   132c8:	ldrd	r4, [r8, #160]	; 0xa0
   132cc:	ldr	r0, [sl]
   132d0:	strd	r6, [r9]
   132d4:	str	r8, [r9, #16]
   132d8:	strd	r4, [r9, #8]
   132dc:	bl	1668c <__assert_fail@plt+0x5300>
   132e0:	cmp	r9, r0
   132e4:	mov	r4, r0
   132e8:	beq	13314 <__assert_fail@plt+0x1f88>
   132ec:	mov	r0, r9
   132f0:	bl	12dd8 <__assert_fail@plt+0x1a4c>
   132f4:	cmp	r4, #0
   132f8:	beq	13354 <__assert_fail@plt+0x1fc8>
   132fc:	ldr	r3, [r4, #16]
   13300:	mov	r2, #2
   13304:	mov	r0, #1
   13308:	str	r3, [r8]
   1330c:	strh	r2, [r8, #56]	; 0x38
   13310:	b	13318 <__assert_fail@plt+0x1f8c>
   13314:	mov	r0, #1
   13318:	ldrd	r4, [sp]
   1331c:	ldrd	r6, [sp, #8]
   13320:	ldrd	r8, [sp, #16]
   13324:	ldr	sl, [sp, #24]
   13328:	add	sp, sp, #28
   1332c:	pop	{pc}		; (ldr pc, [sp], #4)
   13330:	add	r1, r2, #64	; 0x40
   13334:	ldr	r0, [sl]
   13338:	bl	1c27c <__assert_fail@plt+0xaef0>
   1333c:	cmp	r0, #0
   13340:	beq	13314 <__assert_fail@plt+0x1f88>
   13344:	mov	r3, #2
   13348:	str	r8, [r8]
   1334c:	strh	r3, [r8, #56]	; 0x38
   13350:	b	13318 <__assert_fail@plt+0x1f8c>
   13354:	mov	r0, #0
   13358:	b	13318 <__assert_fail@plt+0x1f8c>
   1335c:	movw	r3, #258	; 0x102
   13360:	mov	ip, r1
   13364:	strd	r4, [sp, #-12]!
   13368:	tst	r0, r3
   1336c:	str	lr, [sp, #8]
   13370:	sub	sp, sp, #28
   13374:	bne	133c4 <__assert_fail@plt+0x2038>
   13378:	ldr	r3, [r2, #4]
   1337c:	cmp	r3, #0
   13380:	beq	133b4 <__assert_fail@plt+0x2028>
   13384:	ldr	r1, [r3, #48]	; 0x30
   13388:	cmp	r1, #0
   1338c:	blt	133b4 <__assert_fail@plt+0x2028>
   13390:	ldr	ip, [ip]
   13394:	ldrd	r0, [ip, #16]
   13398:	orrs	r1, r0, r1
   1339c:	beq	13424 <__assert_fail@plt+0x2098>
   133a0:	ldrd	r4, [ip]
   133a4:	ldrd	r0, [r2, #160]	; 0xa0
   133a8:	cmp	r5, r1
   133ac:	cmpeq	r4, r0
   133b0:	beq	133fc <__assert_fail@plt+0x2070>
   133b4:	add	sp, sp, #28
   133b8:	ldrd	r4, [sp]
   133bc:	add	sp, sp, #8
   133c0:	pop	{pc}		; (ldr pc, [sp], #4)
   133c4:	ldrd	r4, [r2, #64]	; 0x40
   133c8:	mov	r1, sp
   133cc:	ldrd	r2, [r2, #160]	; 0xa0
   133d0:	ldr	r0, [ip]
   133d4:	strd	r4, [sp]
   133d8:	strd	r2, [sp, #8]
   133dc:	bl	168b0 <__assert_fail@plt+0x5524>
   133e0:	cmp	r0, #0
   133e4:	beq	13424 <__assert_fail@plt+0x2098>
   133e8:	bl	12dd8 <__assert_fail@plt+0x1a4c>
   133ec:	add	sp, sp, #28
   133f0:	ldrd	r4, [sp]
   133f4:	add	sp, sp, #8
   133f8:	pop	{pc}		; (ldr pc, [sp], #4)
   133fc:	ldrd	r0, [ip, #8]
   13400:	ldrd	r4, [r2, #64]	; 0x40
   13404:	cmp	r1, r5
   13408:	cmpeq	r0, r4
   1340c:	bne	133b4 <__assert_fail@plt+0x2028>
   13410:	ldrd	r0, [r3, #64]	; 0x40
   13414:	ldrd	r2, [r3, #160]	; 0xa0
   13418:	strd	r2, [ip]
   1341c:	strd	r0, [ip, #8]
   13420:	b	133b4 <__assert_fail@plt+0x2028>
   13424:	bl	11344 <abort@plt>
   13428:	ldr	r3, [r0, #48]	; 0x30
   1342c:	strd	r4, [sp, #-16]!
   13430:	add	r5, r0, #60	; 0x3c
   13434:	str	r6, [sp, #8]
   13438:	str	lr, [sp, #12]
   1343c:	ands	r6, r3, #4
   13440:	movne	r6, #0
   13444:	bne	13480 <__assert_fail@plt+0x20f4>
   13448:	tst	r3, #512	; 0x200
   1344c:	mov	r4, r0
   13450:	beq	134b0 <__assert_fail@plt+0x2124>
   13454:	mov	r0, r5
   13458:	ldr	r1, [r4, #32]
   1345c:	bl	16c24 <__assert_fail@plt+0x5898>
   13460:	cmp	r0, #0
   13464:	bge	134c4 <__assert_fail@plt+0x2138>
   13468:	mvn	r3, #99	; 0x63
   1346c:	str	r3, [r4, #32]
   13470:	b	13480 <__assert_fail@plt+0x20f4>
   13474:	bl	16c6c <__assert_fail@plt+0x58e0>
   13478:	cmp	r0, #0
   1347c:	bge	134a8 <__assert_fail@plt+0x211c>
   13480:	mov	r0, r5
   13484:	bl	16c1c <__assert_fail@plt+0x5890>
   13488:	cmp	r0, #0
   1348c:	mov	r0, r5
   13490:	beq	13474 <__assert_fail@plt+0x20e8>
   13494:	mov	r0, r6
   13498:	ldrd	r4, [sp]
   1349c:	ldr	r6, [sp, #8]
   134a0:	add	sp, sp, #12
   134a4:	pop	{pc}		; (ldr pc, [sp], #4)
   134a8:	bl	11350 <close@plt>
   134ac:	b	13480 <__assert_fail@plt+0x20f4>
   134b0:	ldr	r0, [r0, #28]
   134b4:	bl	112fc <fchdir@plt>
   134b8:	adds	r6, r0, #0
   134bc:	movne	r6, #1
   134c0:	b	13480 <__assert_fail@plt+0x20f4>
   134c4:	bl	11350 <close@plt>
   134c8:	mvn	r3, #99	; 0x63
   134cc:	str	r3, [r4, #32]
   134d0:	b	13480 <__assert_fail@plt+0x20f4>
   134d4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   134d8:	mov	r5, r0
   134dc:	mov	r4, r2
   134e0:	strd	r6, [sp, #8]
   134e4:	strd	r8, [sp, #16]
   134e8:	mov	r8, r1
   134ec:	ldr	r9, [r0, #48]	; 0x30
   134f0:	str	sl, [sp, #24]
   134f4:	subs	sl, r3, #0
   134f8:	str	lr, [sp, #28]
   134fc:	sub	sp, sp, #104	; 0x68
   13500:	and	r6, r9, #4
   13504:	beq	13600 <__assert_fail@plt+0x2274>
   13508:	movw	r1, #56612	; 0xdd24
   1350c:	movt	r1, #1
   13510:	mov	r0, sl
   13514:	bl	11074 <strcmp@plt>
   13518:	cmp	r0, #0
   1351c:	bne	13600 <__assert_fail@plt+0x2274>
   13520:	cmp	r6, #0
   13524:	bne	13640 <__assert_fail@plt+0x22b4>
   13528:	cmp	r4, #0
   1352c:	bge	1377c <__assert_fail@plt+0x23f0>
   13530:	tst	r9, #512	; 0x200
   13534:	beq	13684 <__assert_fail@plt+0x22f8>
   13538:	add	r6, r5, #60	; 0x3c
   1353c:	mov	r0, r6
   13540:	bl	16c1c <__assert_fail@plt+0x5890>
   13544:	cmp	r0, #0
   13548:	beq	13704 <__assert_fail@plt+0x2378>
   1354c:	lsl	r2, r9, #11
   13550:	mov	r6, #1
   13554:	and	r2, r2, #32768	; 0x8000
   13558:	orr	r2, r2, #540672	; 0x84000
   1355c:	orr	r2, r2, #2304	; 0x900
   13560:	mov	r1, sl
   13564:	ldr	r0, [r5, #32]
   13568:	bl	16d34 <__assert_fail@plt+0x59a8>
   1356c:	mov	r7, r0
   13570:	cmp	r7, #0
   13574:	blt	13774 <__assert_fail@plt+0x23e8>
   13578:	ldr	r9, [r5, #48]	; 0x30
   1357c:	tst	r9, #2
   13580:	beq	1361c <__assert_fail@plt+0x2290>
   13584:	mov	r2, sp
   13588:	mov	r1, r7
   1358c:	mov	r0, #3
   13590:	bl	11140 <__fxstat64@plt>
   13594:	cmp	r0, #0
   13598:	bne	1367c <__assert_fail@plt+0x22f0>
   1359c:	ldrd	r2, [sp]
   135a0:	ldrd	r0, [r8, #64]	; 0x40
   135a4:	cmp	r1, r3
   135a8:	cmpeq	r0, r2
   135ac:	bne	13670 <__assert_fail@plt+0x22e4>
   135b0:	ldrd	r2, [sp, #96]	; 0x60
   135b4:	ldrd	r0, [r8, #160]	; 0xa0
   135b8:	cmp	r1, r3
   135bc:	cmpeq	r0, r2
   135c0:	bne	13670 <__assert_fail@plt+0x22e4>
   135c4:	ldr	r9, [r5, #48]	; 0x30
   135c8:	tst	r9, #512	; 0x200
   135cc:	bne	136ac <__assert_fail@plt+0x2320>
   135d0:	mov	r0, r7
   135d4:	bl	112fc <fchdir@plt>
   135d8:	mov	r9, r0
   135dc:	cmp	r4, #0
   135e0:	bge	13650 <__assert_fail@plt+0x22c4>
   135e4:	bl	1123c <__errno_location@plt>
   135e8:	mov	r4, r0
   135ec:	mov	r0, r7
   135f0:	ldr	r5, [r4]
   135f4:	bl	11350 <close@plt>
   135f8:	str	r5, [r4]
   135fc:	b	13650 <__assert_fail@plt+0x22c4>
   13600:	cmp	r6, #0
   13604:	bne	13640 <__assert_fail@plt+0x22b4>
   13608:	cmp	r4, #0
   1360c:	movge	r7, r4
   13610:	blt	13734 <__assert_fail@plt+0x23a8>
   13614:	tst	r9, #2
   13618:	bne	13584 <__assert_fail@plt+0x21f8>
   1361c:	cmp	sl, #0
   13620:	beq	135c8 <__assert_fail@plt+0x223c>
   13624:	mov	r0, sl
   13628:	movw	r1, #56612	; 0xdd24
   1362c:	movt	r1, #1
   13630:	bl	11074 <strcmp@plt>
   13634:	cmp	r0, #0
   13638:	bne	135c8 <__assert_fail@plt+0x223c>
   1363c:	b	13584 <__assert_fail@plt+0x21f8>
   13640:	mvn	r3, r4
   13644:	lsr	r3, r3, #31
   13648:	ands	r9, r3, r9, lsr #9
   1364c:	bne	136f4 <__assert_fail@plt+0x2368>
   13650:	mov	r0, r9
   13654:	add	sp, sp, #104	; 0x68
   13658:	ldrd	r4, [sp]
   1365c:	ldrd	r6, [sp, #8]
   13660:	ldrd	r8, [sp, #16]
   13664:	ldr	sl, [sp, #24]
   13668:	add	sp, sp, #28
   1366c:	pop	{pc}		; (ldr pc, [sp], #4)
   13670:	bl	1123c <__errno_location@plt>
   13674:	mov	r3, #2
   13678:	str	r3, [r0]
   1367c:	mvn	r9, #0
   13680:	b	135dc <__assert_fail@plt+0x2250>
   13684:	lsl	r2, r9, #11
   13688:	mov	r6, #1
   1368c:	and	r2, r2, #32768	; 0x8000
   13690:	orr	r2, r2, #540672	; 0x84000
   13694:	orr	r2, r2, #2304	; 0x900
   13698:	mov	r1, r2
   1369c:	mov	r0, sl
   136a0:	bl	1c610 <__assert_fail@plt+0xb284>
   136a4:	mov	r7, r0
   136a8:	b	13570 <__assert_fail@plt+0x21e4>
   136ac:	ldr	r1, [r5, #32]
   136b0:	sub	r3, r1, r7
   136b4:	cmn	r1, #100	; 0x64
   136b8:	clz	r3, r3
   136bc:	lsr	r3, r3, #5
   136c0:	moveq	r3, #0
   136c4:	cmp	r3, #0
   136c8:	bne	13790 <__assert_fail@plt+0x2404>
   136cc:	cmp	r6, #0
   136d0:	beq	13754 <__assert_fail@plt+0x23c8>
   136d4:	mvn	r3, r1
   136d8:	eor	r9, r9, #4
   136dc:	lsr	r3, r3, #31
   136e0:	ands	r3, r3, r9, lsr #2
   136e4:	bne	1376c <__assert_fail@plt+0x23e0>
   136e8:	mov	r9, #0
   136ec:	str	r7, [r5, #32]
   136f0:	b	13650 <__assert_fail@plt+0x22c4>
   136f4:	mov	r0, r4
   136f8:	mov	r9, #0
   136fc:	bl	11350 <close@plt>
   13700:	b	13650 <__assert_fail@plt+0x22c4>
   13704:	mov	r0, r6
   13708:	bl	16c6c <__assert_fail@plt+0x58e0>
   1370c:	ldr	r9, [r5, #48]	; 0x30
   13710:	subs	r7, r0, #0
   13714:	movlt	r6, #1
   13718:	andlt	r3, r9, #512	; 0x200
   1371c:	blt	13738 <__assert_fail@plt+0x23ac>
   13720:	tst	r9, #2
   13724:	mov	r4, r7
   13728:	mov	r6, #1
   1372c:	beq	135c8 <__assert_fail@plt+0x223c>
   13730:	b	13584 <__assert_fail@plt+0x21f8>
   13734:	and	r3, r9, #512	; 0x200
   13738:	lsl	r2, r9, #11
   1373c:	cmp	r3, #0
   13740:	and	r2, r2, #32768	; 0x8000
   13744:	orr	r2, r2, #540672	; 0x84000
   13748:	orr	r2, r2, #2304	; 0x900
   1374c:	bne	13560 <__assert_fail@plt+0x21d4>
   13750:	b	13698 <__assert_fail@plt+0x230c>
   13754:	add	r0, r5, #60	; 0x3c
   13758:	bl	16c24 <__assert_fail@plt+0x5898>
   1375c:	cmp	r0, #0
   13760:	blt	136e8 <__assert_fail@plt+0x235c>
   13764:	bl	11350 <close@plt>
   13768:	b	136e8 <__assert_fail@plt+0x235c>
   1376c:	mov	r0, r1
   13770:	b	13764 <__assert_fail@plt+0x23d8>
   13774:	mvn	r9, #0
   13778:	b	13650 <__assert_fail@plt+0x22c4>
   1377c:	tst	r9, #2
   13780:	mov	r7, r4
   13784:	mov	r6, #1
   13788:	beq	13624 <__assert_fail@plt+0x2298>
   1378c:	b	13584 <__assert_fail@plt+0x21f8>
   13790:	bl	11344 <abort@plt>
   13794:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13798:	strd	r6, [sp, #8]
   1379c:	mov	r6, r0
   137a0:	strd	sl, [sp, #24]
   137a4:	ldr	fp, [r0]
   137a8:	strd	r8, [sp, #16]
   137ac:	str	lr, [sp, #32]
   137b0:	sub	sp, sp, #76	; 0x4c
   137b4:	str	r1, [sp, #40]	; 0x28
   137b8:	ldr	r0, [fp, #12]
   137bc:	cmp	r0, #0
   137c0:	str	r0, [sp, #48]	; 0x30
   137c4:	beq	13c34 <__assert_fail@plt+0x28a8>
   137c8:	bl	112f0 <dirfd@plt>
   137cc:	cmp	r0, #0
   137d0:	str	r0, [sp, #68]	; 0x44
   137d4:	blt	141a8 <__assert_fail@plt+0x2e1c>
   137d8:	ldr	r3, [r6, #44]	; 0x2c
   137dc:	cmp	r3, #0
   137e0:	beq	14054 <__assert_fail@plt+0x2cc8>
   137e4:	ldr	r3, [r6, #48]	; 0x30
   137e8:	mvn	r2, #0
   137ec:	str	r2, [sp, #28]
   137f0:	mov	r2, #1
   137f4:	str	r2, [sp, #60]	; 0x3c
   137f8:	ldr	r1, [fp, #28]
   137fc:	ldr	r0, [fp, #40]	; 0x28
   13800:	sub	r2, r0, #1
   13804:	str	r0, [sp, #4]
   13808:	ldrb	r1, [r1, r2]
   1380c:	cmp	r1, #47	; 0x2f
   13810:	beq	13820 <__assert_fail@plt+0x2494>
   13814:	add	r1, r0, #1
   13818:	mov	r2, r0
   1381c:	str	r1, [sp, #4]
   13820:	ands	r3, r3, #4
   13824:	streq	r3, [sp, #32]
   13828:	beq	13844 <__assert_fail@plt+0x24b8>
   1382c:	ldr	r3, [r6, #24]
   13830:	mov	r0, #47	; 0x2f
   13834:	add	r1, r3, r2
   13838:	strb	r0, [r3, r2]
   1383c:	add	r3, r1, #1
   13840:	str	r3, [sp, #32]
   13844:	movw	r3, #6548	; 0x1994
   13848:	movt	r3, #258	; 0x102
   1384c:	ldr	r2, [r6, #36]	; 0x24
   13850:	movw	r0, #19778	; 0x4d42
   13854:	movt	r0, #65363	; 0xff53
   13858:	str	fp, [sp, #16]
   1385c:	str	r3, [sp, #52]	; 0x34
   13860:	mov	r1, #0
   13864:	ldr	r3, [fp, #48]	; 0x30
   13868:	mov	r9, r1
   1386c:	mov	fp, r1
   13870:	str	r0, [sp, #56]	; 0x38
   13874:	ldr	r0, [sp, #4]
   13878:	str	r1, [sp, #12]
   1387c:	str	r1, [sp, #36]	; 0x24
   13880:	add	r3, r3, #1
   13884:	sub	r2, r2, r0
   13888:	str	r1, [sp, #44]	; 0x2c
   1388c:	str	r2, [sp, #20]
   13890:	str	r3, [sp, #24]
   13894:	b	138ac <__assert_fail@plt+0x2520>
   13898:	ldr	r3, [sp, #28]
   1389c:	add	r9, r9, #1
   138a0:	cmp	r9, r3
   138a4:	bcs	13d90 <__assert_fail@plt+0x2a04>
   138a8:	mov	fp, r4
   138ac:	ldr	r3, [sp, #16]
   138b0:	ldr	r4, [r3, #12]
   138b4:	cmp	r4, #0
   138b8:	beq	13ed0 <__assert_fail@plt+0x2b44>
   138bc:	bl	1123c <__errno_location@plt>
   138c0:	mov	sl, r0
   138c4:	mov	r3, #0
   138c8:	mov	r0, r4
   138cc:	str	r3, [sl]
   138d0:	bl	112d8 <readdir64@plt>
   138d4:	subs	r7, r0, #0
   138d8:	beq	13fa4 <__assert_fail@plt+0x2c18>
   138dc:	ldr	r3, [r6, #48]	; 0x30
   138e0:	tst	r3, #32
   138e4:	bne	138f4 <__assert_fail@plt+0x2568>
   138e8:	ldrb	r3, [r7, #19]
   138ec:	cmp	r3, #46	; 0x2e
   138f0:	beq	13af4 <__assert_fail@plt+0x2768>
   138f4:	add	r1, r7, #19
   138f8:	mov	r0, r1
   138fc:	str	r1, [sp, #8]
   13900:	bl	1120c <strlen@plt>
   13904:	mov	r5, r0
   13908:	add	r0, r0, #176	; 0xb0
   1390c:	bic	r0, r0, #7
   13910:	bl	1c138 <__assert_fail@plt+0xadac>
   13914:	subs	r4, r0, #0
   13918:	beq	13b28 <__assert_fail@plt+0x279c>
   1391c:	add	r8, r4, #168	; 0xa8
   13920:	mov	r2, r5
   13924:	ldr	r1, [sp, #8]
   13928:	mov	r0, r8
   1392c:	bl	110c8 <memcpy@plt>
   13930:	ldr	r3, [sp, #20]
   13934:	mov	r1, #0
   13938:	add	r0, r4, r5
   1393c:	mov	ip, #196608	; 0x30000
   13940:	ldr	r2, [r6, #24]
   13944:	strb	r1, [r0, #168]	; 0xa8
   13948:	str	r1, [r4, #12]
   1394c:	cmp	r3, r5
   13950:	str	r1, [r4, #16]
   13954:	str	r1, [r4, #20]
   13958:	str	r2, [r4, #28]
   1395c:	str	r1, [r4, #32]
   13960:	str	r6, [r4, #44]	; 0x2c
   13964:	str	r5, [r4, #52]	; 0x34
   13968:	str	ip, [r4, #58]	; 0x3a
   1396c:	bls	13a30 <__assert_fail@plt+0x26a4>
   13970:	ldr	r3, [sp, #4]
   13974:	adds	r5, r5, r3
   13978:	bcs	14290 <__assert_fail@plt+0x2f04>
   1397c:	ldr	r3, [sp, #24]
   13980:	str	r5, [r4, #40]	; 0x28
   13984:	ldr	ip, [r6]
   13988:	ldr	r1, [r6, #48]	; 0x30
   1398c:	str	r3, [r4, #48]	; 0x30
   13990:	ldrd	r2, [r7]
   13994:	str	ip, [r4, #4]
   13998:	tst	r1, #4
   1399c:	streq	r8, [r4, #24]
   139a0:	strd	r2, [r4, #160]	; 0xa0
   139a4:	bne	13ad0 <__assert_fail@plt+0x2744>
   139a8:	ldr	r3, [r6, #44]	; 0x2c
   139ac:	cmp	r3, #0
   139b0:	beq	139bc <__assert_fail@plt+0x2630>
   139b4:	ands	r3, r1, #1024	; 0x400
   139b8:	beq	13b14 <__assert_fail@plt+0x2788>
   139bc:	ldrb	r3, [r7, #18]
   139c0:	tst	r1, #8
   139c4:	sub	r0, r3, #1
   139c8:	beq	139d4 <__assert_fail@plt+0x2648>
   139cc:	tst	r3, #251	; 0xfb
   139d0:	bne	13bd0 <__assert_fail@plt+0x2844>
   139d4:	mov	r3, #11
   139d8:	cmp	r0, r3
   139dc:	strh	r3, [r4, #56]	; 0x38
   139e0:	bls	13ab4 <__assert_fail@plt+0x2728>
   139e4:	mov	r1, #0
   139e8:	mov	r2, #2
   139ec:	mov	r3, #0
   139f0:	str	r1, [r4, #80]	; 0x50
   139f4:	strd	r2, [r4, #112]	; 0x70
   139f8:	ldr	r2, [sp, #12]
   139fc:	mov	r3, #0
   13a00:	str	r3, [r4, #8]
   13a04:	cmp	r2, r3
   13a08:	movw	r3, #10000	; 0x2710
   13a0c:	strne	r4, [fp, #8]
   13a10:	streq	r4, [sp, #12]
   13a14:	cmp	r9, r3
   13a18:	bne	13898 <__assert_fail@plt+0x250c>
   13a1c:	ldr	r5, [r6, #44]	; 0x2c
   13a20:	cmp	r5, #0
   13a24:	beq	13d44 <__assert_fail@plt+0x29b8>
   13a28:	movw	r9, #10001	; 0x2711
   13a2c:	b	138a8 <__assert_fail@plt+0x251c>
   13a30:	ldr	ip, [r6, #36]	; 0x24
   13a34:	ldr	r3, [sp, #4]
   13a38:	add	r0, ip, #256	; 0x100
   13a3c:	add	r0, r0, #1
   13a40:	add	r0, r0, r3
   13a44:	add	r0, r0, r5
   13a48:	cmp	ip, r0
   13a4c:	bhi	13c0c <__assert_fail@plt+0x2880>
   13a50:	mov	r1, r0
   13a54:	str	r0, [r6, #36]	; 0x24
   13a58:	mov	r0, r2
   13a5c:	str	r2, [sp, #8]
   13a60:	bl	1c174 <__assert_fail@plt+0xade8>
   13a64:	cmp	r0, #0
   13a68:	ldr	r2, [sp, #8]
   13a6c:	beq	14000 <__assert_fail@plt+0x2c74>
   13a70:	cmp	r2, r0
   13a74:	str	r0, [r6, #24]
   13a78:	beq	13a98 <__assert_fail@plt+0x270c>
   13a7c:	ldr	r2, [r6, #48]	; 0x30
   13a80:	tst	r2, #4
   13a84:	ldrne	r3, [sp, #4]
   13a88:	addne	r3, r0, r3
   13a8c:	strne	r3, [sp, #32]
   13a90:	mov	r3, #1
   13a94:	str	r3, [sp, #36]	; 0x24
   13a98:	ldr	r3, [sp, #4]
   13a9c:	ldr	r2, [r6, #36]	; 0x24
   13aa0:	sub	r3, r2, r3
   13aa4:	str	r3, [sp, #20]
   13aa8:	b	13970 <__assert_fail@plt+0x25e4>
   13aac:	mov	r3, #11
   13ab0:	strh	r3, [r4, #56]	; 0x38
   13ab4:	movw	r3, #56564	; 0xdcf4
   13ab8:	movt	r3, #1
   13abc:	ldr	r1, [r3, r0, lsl #2]
   13ac0:	mov	r2, #2
   13ac4:	mov	r3, #0
   13ac8:	str	r1, [r4, #80]	; 0x50
   13acc:	b	139f4 <__assert_fail@plt+0x2668>
   13ad0:	ldr	ip, [r4, #28]
   13ad4:	mov	r1, r8
   13ad8:	ldr	r2, [r4, #52]	; 0x34
   13adc:	ldr	r0, [sp, #32]
   13ae0:	str	ip, [r4, #24]
   13ae4:	add	r2, r2, #1
   13ae8:	bl	11098 <memmove@plt>
   13aec:	ldr	r1, [r6, #48]	; 0x30
   13af0:	b	139a8 <__assert_fail@plt+0x261c>
   13af4:	ldrb	r3, [r7, #20]
   13af8:	cmp	r3, #0
   13afc:	beq	13b0c <__assert_fail@plt+0x2780>
   13b00:	ldrh	r3, [r7, #20]
   13b04:	cmp	r3, #46	; 0x2e
   13b08:	bne	138f4 <__assert_fail@plt+0x2568>
   13b0c:	mov	r4, fp
   13b10:	b	138a8 <__assert_fail@plt+0x251c>
   13b14:	mov	r2, r4
   13b18:	ldr	r0, [r6, #32]
   13b1c:	bl	1312c <__assert_fail@plt+0x1da0>
   13b20:	strh	r0, [r4, #56]	; 0x38
   13b24:	b	139f8 <__assert_fail@plt+0x266c>
   13b28:	ldr	r5, [sl]
   13b2c:	ldr	r8, [sp, #12]
   13b30:	ldr	fp, [sp, #16]
   13b34:	mov	r0, r4
   13b38:	bl	12dd8 <__assert_fail@plt+0x1a4c>
   13b3c:	cmp	r8, #0
   13b40:	bne	13bac <__assert_fail@plt+0x2820>
   13b44:	ldr	r0, [fp, #12]
   13b48:	bl	11368 <closedir@plt>
   13b4c:	ldr	r3, [r6, #48]	; 0x30
   13b50:	mov	r2, #0
   13b54:	mov	r1, #7
   13b58:	mov	r8, r2
   13b5c:	str	r2, [fp, #12]
   13b60:	strh	r1, [fp, #56]	; 0x38
   13b64:	orr	r3, r3, #8192	; 0x2000
   13b68:	str	r3, [r6, #48]	; 0x30
   13b6c:	str	r5, [sl]
   13b70:	mov	r0, r8
   13b74:	add	sp, sp, #76	; 0x4c
   13b78:	ldrd	r4, [sp]
   13b7c:	ldrd	r6, [sp, #8]
   13b80:	ldrd	r8, [sp, #16]
   13b84:	ldrd	sl, [sp, #24]
   13b88:	add	sp, sp, #32
   13b8c:	pop	{pc}		; (ldr pc, [sp], #4)
   13b90:	mov	r0, r3
   13b94:	bl	11368 <closedir@plt>
   13b98:	mov	r0, r8
   13b9c:	bl	12dd8 <__assert_fail@plt+0x1a4c>
   13ba0:	cmp	r4, #0
   13ba4:	beq	13b44 <__assert_fail@plt+0x27b8>
   13ba8:	mov	r8, r4
   13bac:	mov	r0, r8
   13bb0:	ldr	r4, [r8, #8]
   13bb4:	ldr	r3, [r8, #12]
   13bb8:	cmp	r3, #0
   13bbc:	bne	13b90 <__assert_fail@plt+0x2804>
   13bc0:	bl	12dd8 <__assert_fail@plt+0x1a4c>
   13bc4:	cmp	r4, #0
   13bc8:	bne	13ba8 <__assert_fail@plt+0x281c>
   13bcc:	b	13b44 <__assert_fail@plt+0x27b8>
   13bd0:	ubfx	r2, r1, #4, #1
   13bd4:	cmp	r3, #10
   13bd8:	moveq	r3, r2
   13bdc:	orrne	r3, r2, #1
   13be0:	cmp	r3, #0
   13be4:	beq	13aac <__assert_fail@plt+0x2720>
   13be8:	mov	r3, #11
   13bec:	cmp	r0, r3
   13bf0:	strh	r3, [r4, #56]	; 0x38
   13bf4:	bls	13e4c <__assert_fail@plt+0x2ac0>
   13bf8:	mov	r1, #0
   13bfc:	mov	r2, #1
   13c00:	mov	r3, #0
   13c04:	str	r1, [r4, #80]	; 0x50
   13c08:	b	139f4 <__assert_fail@plt+0x2668>
   13c0c:	mov	r0, r2
   13c10:	ldr	r8, [sp, #12]
   13c14:	ldr	fp, [sp, #16]
   13c18:	bl	12dd8 <__assert_fail@plt+0x1a4c>
   13c1c:	mov	r3, #36	; 0x24
   13c20:	mov	r1, #0
   13c24:	mov	r5, r3
   13c28:	str	r1, [r6, #24]
   13c2c:	str	r3, [sl]
   13c30:	b	13b34 <__assert_fail@plt+0x27a8>
   13c34:	ldr	r3, [r6, #48]	; 0x30
   13c38:	ldr	r1, [fp, #24]
   13c3c:	and	r2, r3, #516	; 0x204
   13c40:	cmp	r2, #512	; 0x200
   13c44:	ldreq	r0, [r6, #32]
   13c48:	mvnne	r0, #99	; 0x63
   13c4c:	ands	r2, r3, #16
   13c50:	beq	13c60 <__assert_fail@plt+0x28d4>
   13c54:	tst	r3, #1
   13c58:	moveq	r2, #32768	; 0x8000
   13c5c:	bne	13e68 <__assert_fail@plt+0x2adc>
   13c60:	add	r3, sp, #68	; 0x44
   13c64:	bl	16d74 <__assert_fail@plt+0x59e8>
   13c68:	cmp	r0, #0
   13c6c:	mov	r8, r0
   13c70:	str	r0, [fp, #12]
   13c74:	beq	141fc <__assert_fail@plt+0x2e70>
   13c78:	ldrh	r3, [fp, #56]	; 0x38
   13c7c:	ldr	r0, [r6, #48]	; 0x30
   13c80:	cmp	r3, #11
   13c84:	beq	1413c <__assert_fail@plt+0x2db0>
   13c88:	tst	r0, #256	; 0x100
   13c8c:	bne	14080 <__assert_fail@plt+0x2cf4>
   13c90:	ldr	r2, [r6, #44]	; 0x2c
   13c94:	movw	r3, #34464	; 0x86a0
   13c98:	movt	r3, #1
   13c9c:	cmp	r2, #0
   13ca0:	mvnne	r3, #0
   13ca4:	str	r3, [sp, #28]
   13ca8:	ldr	r3, [sp, #40]	; 0x28
   13cac:	cmp	r3, #2
   13cb0:	beq	14070 <__assert_fail@plt+0x2ce4>
   13cb4:	ldr	r3, [r6, #48]	; 0x30
   13cb8:	ldr	r0, [sp, #68]	; 0x44
   13cbc:	and	r3, r3, #56	; 0x38
   13cc0:	cmp	r3, #24
   13cc4:	beq	13e78 <__assert_fail@plt+0x2aec>
   13cc8:	ldr	r3, [sp, #40]	; 0x28
   13ccc:	sub	r4, r3, #3
   13cd0:	clz	r4, r4
   13cd4:	lsr	r4, r4, #5
   13cd8:	ldr	r3, [r6, #48]	; 0x30
   13cdc:	tst	r3, #512	; 0x200
   13ce0:	bne	141e8 <__assert_fail@plt+0x2e5c>
   13ce4:	cmp	r0, #0
   13ce8:	bge	1417c <__assert_fail@plt+0x2df0>
   13cec:	cmp	r4, #0
   13cf0:	beq	13d00 <__assert_fail@plt+0x2974>
   13cf4:	bl	1123c <__errno_location@plt>
   13cf8:	ldr	r3, [r0]
   13cfc:	str	r3, [fp, #32]
   13d00:	ldrh	r3, [fp, #58]	; 0x3a
   13d04:	ldr	r0, [fp, #12]
   13d08:	orr	r3, r3, #1
   13d0c:	strh	r3, [fp, #58]	; 0x3a
   13d10:	bl	11368 <closedir@plt>
   13d14:	ldr	r3, [r6, #48]	; 0x30
   13d18:	mov	r2, #0
   13d1c:	str	r2, [fp, #12]
   13d20:	tst	r3, #512	; 0x200
   13d24:	beq	13d34 <__assert_fail@plt+0x29a8>
   13d28:	ldr	r0, [sp, #68]	; 0x44
   13d2c:	cmp	r0, r2
   13d30:	bge	141dc <__assert_fail@plt+0x2e50>
   13d34:	mov	r2, #0
   13d38:	str	r2, [fp, #12]
   13d3c:	str	r2, [sp, #60]	; 0x3c
   13d40:	b	137f8 <__assert_fail@plt+0x246c>
   13d44:	ldr	r0, [sp, #16]
   13d48:	ldr	r1, [sp, #68]	; 0x44
   13d4c:	bl	1300c <__assert_fail@plt+0x1c80>
   13d50:	movw	r3, #26985	; 0x6969
   13d54:	cmp	r0, r3
   13d58:	beq	13d7c <__assert_fail@plt+0x29f0>
   13d5c:	ldr	r3, [sp, #52]	; 0x34
   13d60:	cmp	r0, r3
   13d64:	beq	13d7c <__assert_fail@plt+0x29f0>
   13d68:	ldr	r3, [sp, #56]	; 0x38
   13d6c:	cmp	r0, r3
   13d70:	movne	r3, #1
   13d74:	strne	r3, [sp, #44]	; 0x2c
   13d78:	bne	13a28 <__assert_fail@plt+0x269c>
   13d7c:	ldr	r3, [sp, #28]
   13d80:	add	r9, r9, #1
   13d84:	str	r5, [sp, #44]	; 0x2c
   13d88:	cmp	r9, r3
   13d8c:	bcc	138a8 <__assert_fail@plt+0x251c>
   13d90:	ldr	r8, [sp, #12]
   13d94:	ldr	r3, [sp, #36]	; 0x24
   13d98:	ldr	fp, [sp, #16]
   13d9c:	cmp	r3, #0
   13da0:	beq	13ee4 <__assert_fail@plt+0x2b58>
   13da4:	ldr	r3, [r6, #4]
   13da8:	ldr	r1, [r6, #24]
   13dac:	cmp	r3, #0
   13db0:	beq	13de4 <__assert_fail@plt+0x2a58>
   13db4:	ldr	r2, [r3, #24]
   13db8:	add	r0, r3, #168	; 0xa8
   13dbc:	cmp	r2, r0
   13dc0:	beq	13fec <__assert_fail@plt+0x2c60>
   13dc4:	ldr	r0, [r3, #28]
   13dc8:	str	r1, [r3, #28]
   13dcc:	sub	r2, r2, r0
   13dd0:	add	r2, r1, r2
   13dd4:	str	r2, [r3, #24]
   13dd8:	ldr	r3, [r3, #8]
   13ddc:	cmp	r3, #0
   13de0:	bne	13db4 <__assert_fail@plt+0x2a28>
   13de4:	ldr	r3, [r8, #48]	; 0x30
   13de8:	cmp	r3, #0
   13dec:	movge	r3, r8
   13df0:	bge	13e08 <__assert_fail@plt+0x2a7c>
   13df4:	b	13ee4 <__assert_fail@plt+0x2b58>
   13df8:	ldr	r3, [r2, #48]	; 0x30
   13dfc:	cmp	r3, #0
   13e00:	blt	13ee4 <__assert_fail@plt+0x2b58>
   13e04:	mov	r3, r2
   13e08:	ldr	r2, [r3, #24]
   13e0c:	add	r0, r3, #168	; 0xa8
   13e10:	cmp	r2, r0
   13e14:	beq	13e28 <__assert_fail@plt+0x2a9c>
   13e18:	ldr	r0, [r3, #28]
   13e1c:	sub	r2, r2, r0
   13e20:	add	r2, r1, r2
   13e24:	str	r2, [r3, #24]
   13e28:	ldr	r2, [r3, #8]
   13e2c:	str	r1, [r3, #28]
   13e30:	cmp	r2, #0
   13e34:	bne	13df8 <__assert_fail@plt+0x2a6c>
   13e38:	ldr	r2, [r3, #4]
   13e3c:	ldr	r3, [r2, #48]	; 0x30
   13e40:	cmp	r3, #0
   13e44:	bge	13e04 <__assert_fail@plt+0x2a78>
   13e48:	b	13ee4 <__assert_fail@plt+0x2b58>
   13e4c:	movw	r3, #56564	; 0xdcf4
   13e50:	movt	r3, #1
   13e54:	ldr	r1, [r3, r0, lsl #2]
   13e58:	mov	r2, #1
   13e5c:	mov	r3, #0
   13e60:	str	r1, [r4, #80]	; 0x50
   13e64:	b	139f4 <__assert_fail@plt+0x2668>
   13e68:	ldr	r2, [fp, #48]	; 0x30
   13e6c:	cmp	r2, #0
   13e70:	movne	r2, #32768	; 0x8000
   13e74:	b	13c60 <__assert_fail@plt+0x28d4>
   13e78:	ldr	r3, [fp, #84]	; 0x54
   13e7c:	cmp	r3, #2
   13e80:	bne	13cc8 <__assert_fail@plt+0x293c>
   13e84:	mov	r1, r0
   13e88:	mov	r0, fp
   13e8c:	bl	1300c <__assert_fail@plt+0x1c80>
   13e90:	movw	r3, #26985	; 0x6969
   13e94:	cmp	r0, r3
   13e98:	beq	14288 <__assert_fail@plt+0x2efc>
   13e9c:	bgt	1426c <__assert_fail@plt+0x2ee0>
   13ea0:	movw	r3, #19778	; 0x4d42
   13ea4:	movt	r3, #65363	; 0xff53
   13ea8:	cmp	r0, r3
   13eac:	beq	14288 <__assert_fail@plt+0x2efc>
   13eb0:	cmp	r0, #0
   13eb4:	beq	14288 <__assert_fail@plt+0x2efc>
   13eb8:	ldr	r3, [sp, #40]	; 0x28
   13ebc:	cmp	r3, #3
   13ec0:	bne	14070 <__assert_fail@plt+0x2ce4>
   13ec4:	mov	r4, #0
   13ec8:	ldr	r0, [sp, #68]	; 0x44
   13ecc:	b	13cd8 <__assert_fail@plt+0x294c>
   13ed0:	ldr	r8, [sp, #12]
   13ed4:	mov	fp, r3
   13ed8:	ldr	r3, [sp, #36]	; 0x24
   13edc:	cmp	r3, #0
   13ee0:	bne	13da4 <__assert_fail@plt+0x2a18>
   13ee4:	ldr	r3, [r6, #48]	; 0x30
   13ee8:	tst	r3, #4
   13eec:	beq	13f1c <__assert_fail@plt+0x2b90>
   13ef0:	ldr	r2, [sp, #4]
   13ef4:	ldr	r3, [r6, #36]	; 0x24
   13ef8:	cmp	r9, #0
   13efc:	cmpne	r3, r2
   13f00:	bne	13f10 <__assert_fail@plt+0x2b84>
   13f04:	ldr	r3, [sp, #32]
   13f08:	sub	r3, r3, #1
   13f0c:	str	r3, [sp, #32]
   13f10:	ldr	r2, [sp, #32]
   13f14:	mov	r3, #0
   13f18:	strb	r3, [r2]
   13f1c:	ldr	r2, [sp, #48]	; 0x30
   13f20:	ldr	r3, [sp, #60]	; 0x3c
   13f24:	cmp	r2, #0
   13f28:	movne	r3, #0
   13f2c:	cmp	r3, #0
   13f30:	beq	13f68 <__assert_fail@plt+0x2bdc>
   13f34:	ldr	r3, [sp, #40]	; 0x28
   13f38:	cmp	r9, #0
   13f3c:	cmpne	r3, #1
   13f40:	bne	13f70 <__assert_fail@plt+0x2be4>
   13f44:	ldr	r3, [fp, #48]	; 0x30
   13f48:	cmp	r3, #0
   13f4c:	bne	14158 <__assert_fail@plt+0x2dcc>
   13f50:	mov	r0, r6
   13f54:	bl	13428 <__assert_fail@plt+0x209c>
   13f58:	adds	r0, r0, #0
   13f5c:	movne	r0, #1
   13f60:	cmp	r0, #0
   13f64:	bne	1420c <__assert_fail@plt+0x2e80>
   13f68:	cmp	r9, #0
   13f6c:	beq	140cc <__assert_fail@plt+0x2d40>
   13f70:	ldr	r3, [sp, #44]	; 0x2c
   13f74:	cmp	r3, #0
   13f78:	bne	14028 <__assert_fail@plt+0x2c9c>
   13f7c:	ldr	r3, [r6, #44]	; 0x2c
   13f80:	cmp	r3, #0
   13f84:	cmpne	r9, #1
   13f88:	beq	13b70 <__assert_fail@plt+0x27e4>
   13f8c:	mov	r1, r8
   13f90:	mov	r2, r9
   13f94:	mov	r0, r6
   13f98:	bl	12f20 <__assert_fail@plt+0x1b94>
   13f9c:	mov	r8, r0
   13fa0:	b	13b70 <__assert_fail@plt+0x27e4>
   13fa4:	ldr	r3, [sl]
   13fa8:	ldr	r8, [sp, #12]
   13fac:	ldr	fp, [sp, #16]
   13fb0:	cmp	r3, #0
   13fb4:	beq	13fd0 <__assert_fail@plt+0x2c44>
   13fb8:	ldr	r2, [sp, #48]	; 0x30
   13fbc:	str	r3, [fp, #32]
   13fc0:	orrs	r2, r2, r9
   13fc4:	moveq	r3, #4
   13fc8:	movne	r3, #7
   13fcc:	strh	r3, [fp, #56]	; 0x38
   13fd0:	ldr	r0, [fp, #12]
   13fd4:	cmp	r0, #0
   13fd8:	beq	13ed8 <__assert_fail@plt+0x2b4c>
   13fdc:	bl	11368 <closedir@plt>
   13fe0:	mov	r3, #0
   13fe4:	str	r3, [fp, #12]
   13fe8:	b	13ed8 <__assert_fail@plt+0x2b4c>
   13fec:	str	r1, [r3, #28]
   13ff0:	ldr	r3, [r3, #8]
   13ff4:	cmp	r3, #0
   13ff8:	bne	13db4 <__assert_fail@plt+0x2a28>
   13ffc:	b	13de4 <__assert_fail@plt+0x2a58>
   14000:	mov	r1, r0
   14004:	ldr	r0, [r6, #24]
   14008:	str	r1, [sp, #4]
   1400c:	ldr	r8, [sp, #12]
   14010:	ldr	fp, [sp, #16]
   14014:	bl	12dd8 <__assert_fail@plt+0x1a4c>
   14018:	ldr	r1, [sp, #4]
   1401c:	ldr	r5, [sl]
   14020:	str	r1, [r6, #24]
   14024:	b	13b34 <__assert_fail@plt+0x27a8>
   14028:	movw	r3, #12016	; 0x2ef0
   1402c:	movt	r3, #1
   14030:	mov	r1, r8
   14034:	mov	r2, r9
   14038:	mov	r0, r6
   1403c:	str	r3, [r6, #44]	; 0x2c
   14040:	bl	12f20 <__assert_fail@plt+0x1b94>
   14044:	mov	r3, #0
   14048:	mov	r8, r0
   1404c:	str	r3, [r6, #44]	; 0x2c
   14050:	b	13b70 <__assert_fail@plt+0x27e4>
   14054:	movw	r3, #34464	; 0x86a0
   14058:	movt	r3, #1
   1405c:	mov	r2, #1
   14060:	str	r3, [sp, #28]
   14064:	str	r2, [sp, #60]	; 0x3c
   14068:	ldr	r3, [r6, #48]	; 0x30
   1406c:	b	137f8 <__assert_fail@plt+0x246c>
   14070:	mov	r3, #0
   14074:	str	r3, [sp, #60]	; 0x3c
   14078:	ldr	r3, [r6, #48]	; 0x30
   1407c:	b	137f8 <__assert_fail@plt+0x246c>
   14080:	add	r4, r6, #56	; 0x38
   14084:	mov	r2, fp
   14088:	mov	r1, r4
   1408c:	bl	1335c <__assert_fail@plt+0x1fd0>
   14090:	mov	r3, #0
   14094:	mov	r2, fp
   14098:	ldr	r0, [r6, #32]
   1409c:	ldr	r1, [r6, #48]	; 0x30
   140a0:	bl	1312c <__assert_fail@plt+0x1da0>
   140a4:	mov	r2, fp
   140a8:	mov	r1, r4
   140ac:	ldr	r0, [r6, #48]	; 0x30
   140b0:	bl	13288 <__assert_fail@plt+0x1efc>
   140b4:	subs	r8, r0, #0
   140b8:	bne	13c90 <__assert_fail@plt+0x2904>
   140bc:	bl	1123c <__errno_location@plt>
   140c0:	mov	r3, #12
   140c4:	str	r3, [r0]
   140c8:	b	13b70 <__assert_fail@plt+0x27e4>
   140cc:	ldr	r3, [sp, #40]	; 0x28
   140d0:	cmp	r3, #3
   140d4:	bne	140ec <__assert_fail@plt+0x2d60>
   140d8:	ldrh	r3, [fp, #56]	; 0x38
   140dc:	cmp	r3, #4
   140e0:	cmpne	r3, #7
   140e4:	movne	r3, #6
   140e8:	strhne	r3, [fp, #56]	; 0x38
   140ec:	cmp	r8, #0
   140f0:	bne	14114 <__assert_fail@plt+0x2d88>
   140f4:	b	14134 <__assert_fail@plt+0x2da8>
   140f8:	mov	r0, r3
   140fc:	bl	11368 <closedir@plt>
   14100:	mov	r0, r8
   14104:	bl	12dd8 <__assert_fail@plt+0x1a4c>
   14108:	cmp	r4, #0
   1410c:	beq	14134 <__assert_fail@plt+0x2da8>
   14110:	mov	r8, r4
   14114:	mov	r0, r8
   14118:	ldr	r4, [r8, #8]
   1411c:	ldr	r3, [r8, #12]
   14120:	cmp	r3, #0
   14124:	bne	140f8 <__assert_fail@plt+0x2d6c>
   14128:	bl	12dd8 <__assert_fail@plt+0x1a4c>
   1412c:	cmp	r4, #0
   14130:	bne	14110 <__assert_fail@plt+0x2d84>
   14134:	mov	r8, #0
   14138:	b	13b70 <__assert_fail@plt+0x27e4>
   1413c:	mov	r1, r0
   14140:	mov	r3, #0
   14144:	ldr	r0, [r6, #32]
   14148:	mov	r2, fp
   1414c:	bl	1312c <__assert_fail@plt+0x1da0>
   14150:	strh	r0, [fp, #56]	; 0x38
   14154:	b	13c90 <__assert_fail@plt+0x2904>
   14158:	movw	r3, #56612	; 0xdd24
   1415c:	movt	r3, #1
   14160:	ldr	r1, [fp, #4]
   14164:	mvn	r2, #0
   14168:	mov	r0, r6
   1416c:	bl	134d4 <__assert_fail@plt+0x2148>
   14170:	adds	r0, r0, #0
   14174:	movne	r0, #1
   14178:	b	13f60 <__assert_fail@plt+0x2bd4>
   1417c:	mov	r2, r0
   14180:	mov	r3, #0
   14184:	mov	r1, fp
   14188:	mov	r0, r6
   1418c:	bl	134d4 <__assert_fail@plt+0x2148>
   14190:	cmp	r0, #0
   14194:	bne	13cec <__assert_fail@plt+0x2960>
   14198:	mov	r3, #1
   1419c:	str	r3, [sp, #60]	; 0x3c
   141a0:	ldr	r3, [r6, #48]	; 0x30
   141a4:	b	137f8 <__assert_fail@plt+0x246c>
   141a8:	ldr	r0, [fp, #12]
   141ac:	mov	r8, #0
   141b0:	bl	11368 <closedir@plt>
   141b4:	ldr	r3, [sp, #40]	; 0x28
   141b8:	str	r8, [fp, #12]
   141bc:	cmp	r3, #3
   141c0:	bne	14134 <__assert_fail@plt+0x2da8>
   141c4:	mov	r3, #4
   141c8:	strh	r3, [fp, #56]	; 0x38
   141cc:	bl	1123c <__errno_location@plt>
   141d0:	ldr	r3, [r0]
   141d4:	str	r3, [fp, #32]
   141d8:	b	13b70 <__assert_fail@plt+0x27e4>
   141dc:	bl	11350 <close@plt>
   141e0:	ldr	r3, [r6, #48]	; 0x30
   141e4:	b	13d34 <__assert_fail@plt+0x29a8>
   141e8:	mov	r2, #3
   141ec:	movw	r1, #1030	; 0x406
   141f0:	bl	1c428 <__assert_fail@plt+0xb09c>
   141f4:	str	r0, [sp, #68]	; 0x44
   141f8:	b	13ce4 <__assert_fail@plt+0x2958>
   141fc:	ldr	r3, [sp, #40]	; 0x28
   14200:	cmp	r3, #3
   14204:	bne	14134 <__assert_fail@plt+0x2da8>
   14208:	b	141c4 <__assert_fail@plt+0x2e38>
   1420c:	ldr	r3, [r6, #48]	; 0x30
   14210:	mov	r2, #7
   14214:	cmp	r8, #0
   14218:	strh	r2, [fp, #56]	; 0x38
   1421c:	orr	r3, r3, #8192	; 0x2000
   14220:	str	r3, [r6, #48]	; 0x30
   14224:	bne	14248 <__assert_fail@plt+0x2ebc>
   14228:	b	14134 <__assert_fail@plt+0x2da8>
   1422c:	mov	r0, r3
   14230:	bl	11368 <closedir@plt>
   14234:	mov	r0, r8
   14238:	bl	12dd8 <__assert_fail@plt+0x1a4c>
   1423c:	cmp	r4, #0
   14240:	beq	14134 <__assert_fail@plt+0x2da8>
   14244:	mov	r8, r4
   14248:	mov	r0, r8
   1424c:	ldr	r4, [r8, #8]
   14250:	ldr	r3, [r8, #12]
   14254:	cmp	r3, #0
   14258:	bne	1422c <__assert_fail@plt+0x2ea0>
   1425c:	bl	12dd8 <__assert_fail@plt+0x1a4c>
   14260:	cmp	r4, #0
   14264:	bne	14244 <__assert_fail@plt+0x2eb8>
   14268:	b	14134 <__assert_fail@plt+0x2da8>
   1426c:	movw	r3, #40864	; 0x9fa0
   14270:	cmp	r0, r3
   14274:	beq	14288 <__assert_fail@plt+0x2efc>
   14278:	movw	r3, #16719	; 0x414f
   1427c:	movt	r3, #21318	; 0x5346
   14280:	cmp	r0, r3
   14284:	bne	13eb8 <__assert_fail@plt+0x2b2c>
   14288:	ldr	r0, [sp, #68]	; 0x44
   1428c:	b	13cc8 <__assert_fail@plt+0x293c>
   14290:	ldr	r8, [sp, #12]
   14294:	mov	r0, r4
   14298:	ldr	fp, [sp, #16]
   1429c:	bl	12dd8 <__assert_fail@plt+0x1a4c>
   142a0:	cmp	r8, #0
   142a4:	bne	142c8 <__assert_fail@plt+0x2f3c>
   142a8:	b	142e8 <__assert_fail@plt+0x2f5c>
   142ac:	mov	r0, r3
   142b0:	bl	11368 <closedir@plt>
   142b4:	mov	r0, r8
   142b8:	bl	12dd8 <__assert_fail@plt+0x1a4c>
   142bc:	cmp	r4, #0
   142c0:	beq	142e8 <__assert_fail@plt+0x2f5c>
   142c4:	mov	r8, r4
   142c8:	mov	r0, r8
   142cc:	ldr	r4, [r8, #8]
   142d0:	ldr	r3, [r8, #12]
   142d4:	cmp	r3, #0
   142d8:	bne	142ac <__assert_fail@plt+0x2f20>
   142dc:	bl	12dd8 <__assert_fail@plt+0x1a4c>
   142e0:	cmp	r4, #0
   142e4:	bne	142c4 <__assert_fail@plt+0x2f38>
   142e8:	ldr	r0, [fp, #12]
   142ec:	mov	r8, #0
   142f0:	bl	11368 <closedir@plt>
   142f4:	ldr	r3, [r6, #48]	; 0x30
   142f8:	mov	r1, #7
   142fc:	mov	r2, #36	; 0x24
   14300:	str	r8, [fp, #12]
   14304:	strh	r1, [fp, #56]	; 0x38
   14308:	orr	r3, r3, #8192	; 0x2000
   1430c:	str	r3, [r6, #48]	; 0x30
   14310:	str	r2, [sl]
   14314:	b	13b70 <__assert_fail@plt+0x27e4>
   14318:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1431c:	strd	r6, [sp, #8]
   14320:	bic	r7, r1, #4080	; 0xff0
   14324:	bic	r7, r7, #15
   14328:	strd	r8, [sp, #16]
   1432c:	strd	sl, [sp, #24]
   14330:	cmp	r7, #0
   14334:	str	lr, [sp, #32]
   14338:	sub	sp, sp, #36	; 0x24
   1433c:	str	r2, [sp, #12]
   14340:	bne	147ac <__assert_fail@plt+0x3420>
   14344:	and	r3, r1, #516	; 0x204
   14348:	mov	r5, r1
   1434c:	cmp	r3, #516	; 0x204
   14350:	beq	14740 <__assert_fail@plt+0x33b4>
   14354:	ands	r7, r1, #18
   14358:	beq	14740 <__assert_fail@plt+0x33b4>
   1435c:	mov	r9, r0
   14360:	mov	r1, #96	; 0x60
   14364:	mov	r0, #1
   14368:	bl	1c0c4 <__assert_fail@plt+0xad38>
   1436c:	subs	r7, r0, #0
   14370:	beq	146b8 <__assert_fail@plt+0x332c>
   14374:	ldr	r3, [sp, #12]
   14378:	tst	r5, #2
   1437c:	mvn	r2, #99	; 0x63
   14380:	streq	r5, [r7, #48]	; 0x30
   14384:	str	r2, [r7, #32]
   14388:	str	r3, [r7, #44]	; 0x2c
   1438c:	bicne	r3, r5, #512	; 0x200
   14390:	orrne	r3, r3, #4
   14394:	strne	r3, [r7, #48]	; 0x30
   14398:	ldr	r3, [r9]
   1439c:	cmp	r3, #0
   143a0:	beq	147f8 <__assert_fail@plt+0x346c>
   143a4:	mov	r6, r9
   143a8:	mov	r4, #0
   143ac:	mov	r0, r3
   143b0:	bl	1120c <strlen@plt>
   143b4:	ldr	r3, [r6, #4]!
   143b8:	cmp	r4, r0
   143bc:	movcc	r4, r0
   143c0:	cmp	r3, #0
   143c4:	bne	143ac <__assert_fail@plt+0x3020>
   143c8:	add	r4, r4, #1
   143cc:	cmp	r4, #4096	; 0x1000
   143d0:	movcc	r4, #4096	; 0x1000
   143d4:	ldr	r0, [r7, #24]
   143d8:	ldr	r3, [r7, #36]	; 0x24
   143dc:	add	r1, r3, #256	; 0x100
   143e0:	add	r1, r1, r4
   143e4:	cmp	r3, r1
   143e8:	bhi	147c0 <__assert_fail@plt+0x3434>
   143ec:	str	r1, [r7, #36]	; 0x24
   143f0:	bl	1c174 <__assert_fail@plt+0xade8>
   143f4:	subs	r4, r0, #0
   143f8:	beq	14844 <__assert_fail@plt+0x34b8>
   143fc:	ldr	r3, [r9]
   14400:	str	r4, [r7, #24]
   14404:	cmp	r3, #0
   14408:	str	r3, [sp, #16]
   1440c:	beq	14798 <__assert_fail@plt+0x340c>
   14410:	mov	r0, #176	; 0xb0
   14414:	bl	1c138 <__assert_fail@plt+0xadac>
   14418:	subs	ip, r0, #0
   1441c:	str	ip, [sp, #16]
   14420:	beq	14728 <__assert_fail@plt+0x339c>
   14424:	ldr	r2, [sp, #12]
   14428:	mov	r3, #0
   1442c:	mvn	r1, #0
   14430:	ldr	r0, [r7, #24]
   14434:	str	r3, [ip, #12]
   14438:	str	r3, [ip, #16]
   1443c:	cmp	r2, r3
   14440:	mov	r2, #196608	; 0x30000
   14444:	str	r3, [ip, #20]
   14448:	str	r7, [ip, #44]	; 0x2c
   1444c:	str	r3, [ip, #32]
   14450:	str	r3, [ip, #52]	; 0x34
   14454:	strb	r3, [ip, #168]	; 0xa8
   14458:	moveq	r3, #1
   1445c:	str	r0, [ip, #28]
   14460:	streq	r3, [sp, #24]
   14464:	str	r1, [ip, #48]	; 0x30
   14468:	str	r2, [ip, #58]	; 0x3a
   1446c:	ldr	fp, [r9]
   14470:	beq	14480 <__assert_fail@plt+0x30f4>
   14474:	ldr	r3, [r7, #48]	; 0x30
   14478:	ubfx	r3, r3, #10, #1
   1447c:	str	r3, [sp, #24]
   14480:	cmp	fp, #0
   14484:	beq	14870 <__assert_fail@plt+0x34e4>
   14488:	eor	r5, r5, #2048	; 0x800
   1448c:	mov	r3, #0
   14490:	ubfx	r2, r5, #11, #1
   14494:	mov	r6, r3
   14498:	mov	sl, r3
   1449c:	mov	r8, r3
   144a0:	str	r2, [sp, #20]
   144a4:	str	r3, [sp, #28]
   144a8:	b	144e4 <__assert_fail@plt+0x3158>
   144ac:	ldr	r2, [sp, #12]
   144b0:	mov	r3, #11
   144b4:	mov	r0, #2
   144b8:	mov	r1, #0
   144bc:	strh	r3, [r4, #56]	; 0x38
   144c0:	strd	r0, [r4, #112]	; 0x70
   144c4:	cmp	r2, #0
   144c8:	beq	14784 <__assert_fail@plt+0x33f8>
   144cc:	str	r8, [r4, #8]
   144d0:	mov	r8, r4
   144d4:	ldr	fp, [r9, #4]!
   144d8:	add	sl, sl, #1
   144dc:	cmp	fp, #0
   144e0:	beq	145e0 <__assert_fail@plt+0x3254>
   144e4:	mov	r0, fp
   144e8:	bl	1120c <strlen@plt>
   144ec:	ldr	r3, [sp, #20]
   144f0:	mov	r5, r0
   144f4:	cmp	r0, #2
   144f8:	movls	r3, #0
   144fc:	andhi	r3, r3, #1
   14500:	cmp	r3, #0
   14504:	bne	14750 <__assert_fail@plt+0x33c4>
   14508:	add	r0, r5, #176	; 0xb0
   1450c:	bic	r0, r0, #7
   14510:	bl	1c138 <__assert_fail@plt+0xadac>
   14514:	subs	r4, r0, #0
   14518:	beq	146d8 <__assert_fail@plt+0x334c>
   1451c:	add	r3, r4, #168	; 0xa8
   14520:	mov	r1, fp
   14524:	mov	r0, r3
   14528:	mov	r2, r5
   1452c:	bl	110c8 <memcpy@plt>
   14530:	add	ip, r4, r5
   14534:	ldr	r2, [sp, #24]
   14538:	mov	r3, r0
   1453c:	cmp	r8, #0
   14540:	mov	r1, #3
   14544:	strb	r6, [ip, #168]	; 0xa8
   14548:	moveq	r2, #0
   1454c:	ldr	ip, [sp, #16]
   14550:	ldr	r0, [r7, #24]
   14554:	cmp	r2, #0
   14558:	str	ip, [r4, #4]
   1455c:	str	r6, [r4, #12]
   14560:	str	r6, [r4, #16]
   14564:	str	r6, [r4, #20]
   14568:	str	r3, [r4, #24]
   1456c:	str	r0, [r4, #28]
   14570:	str	r6, [r4, #32]
   14574:	str	r7, [r4, #44]	; 0x2c
   14578:	str	r6, [r4, #48]	; 0x30
   1457c:	str	r5, [r4, #52]	; 0x34
   14580:	strh	r6, [r4, #58]	; 0x3a
   14584:	strh	r1, [r4, #60]	; 0x3c
   14588:	bne	144ac <__assert_fail@plt+0x3120>
   1458c:	mov	r3, r2
   14590:	mov	r2, r4
   14594:	ldr	r0, [r7, #32]
   14598:	ldr	r1, [r7, #48]	; 0x30
   1459c:	bl	1312c <__assert_fail@plt+0x1da0>
   145a0:	ldr	r3, [sp, #12]
   145a4:	strh	r0, [r4, #56]	; 0x38
   145a8:	cmp	r3, #0
   145ac:	bne	144cc <__assert_fail@plt+0x3140>
   145b0:	cmp	r8, #0
   145b4:	str	r3, [r4, #8]
   145b8:	moveq	r8, r4
   145bc:	streq	r4, [sp, #28]
   145c0:	beq	144d4 <__assert_fail@plt+0x3148>
   145c4:	ldr	r3, [sp, #28]
   145c8:	str	r4, [sp, #28]
   145cc:	str	r4, [r3, #8]
   145d0:	ldr	fp, [r9, #4]!
   145d4:	add	sl, sl, #1
   145d8:	cmp	fp, #0
   145dc:	bne	144e4 <__assert_fail@plt+0x3158>
   145e0:	ldr	r3, [sp, #12]
   145e4:	cmp	r3, #0
   145e8:	cmpne	sl, #1
   145ec:	bls	14604 <__assert_fail@plt+0x3278>
   145f0:	mov	r1, r8
   145f4:	mov	r2, sl
   145f8:	mov	r0, r7
   145fc:	bl	12f20 <__assert_fail@plt+0x1b94>
   14600:	mov	r8, r0
   14604:	mov	r0, #176	; 0xb0
   14608:	bl	1c138 <__assert_fail@plt+0xadac>
   1460c:	cmp	r0, #0
   14610:	streq	r0, [r7]
   14614:	beq	146d8 <__assert_fail@plt+0x334c>
   14618:	ldr	lr, [r7, #24]
   1461c:	movw	r4, #258	; 0x102
   14620:	mov	r1, #0
   14624:	mov	ip, #1
   14628:	mov	r2, #9
   1462c:	str	r0, [r7]
   14630:	ldr	r3, [r7, #48]	; 0x30
   14634:	str	r8, [r0, #8]
   14638:	str	r1, [r0, #12]
   1463c:	str	r1, [r0, #16]
   14640:	str	r1, [r0, #20]
   14644:	tst	r4, r3
   14648:	mov	r3, #3
   1464c:	str	lr, [r0, #28]
   14650:	str	r1, [r0, #32]
   14654:	str	r7, [r0, #44]	; 0x2c
   14658:	str	ip, [r0, #48]	; 0x30
   1465c:	str	r1, [r0, #52]	; 0x34
   14660:	str	r2, [r0, #56]	; 0x38
   14664:	strh	r3, [r0, #60]	; 0x3c
   14668:	strb	r1, [r0, #168]	; 0xa8
   1466c:	beq	147dc <__assert_fail@plt+0x3450>
   14670:	movw	r0, #11736	; 0x2dd8
   14674:	movt	r0, #1
   14678:	movw	r3, #11832	; 0x2e38
   1467c:	movt	r3, #1
   14680:	movw	r2, #11896	; 0x2e78
   14684:	movt	r2, #1
   14688:	str	r0, [sp]
   1468c:	mov	r0, #31
   14690:	bl	15e24 <__assert_fail@plt+0x4a98>
   14694:	cmp	r0, #0
   14698:	str	r0, [r7, #56]	; 0x38
   1469c:	beq	146d8 <__assert_fail@plt+0x334c>
   146a0:	ldr	r3, [r7, #48]	; 0x30
   146a4:	tst	r3, #516	; 0x204
   146a8:	beq	14800 <__assert_fail@plt+0x3474>
   146ac:	mvn	r1, #0
   146b0:	add	r0, r7, #60	; 0x3c
   146b4:	bl	16bf0 <__assert_fail@plt+0x5864>
   146b8:	mov	r0, r7
   146bc:	add	sp, sp, #36	; 0x24
   146c0:	ldrd	r4, [sp]
   146c4:	ldrd	r6, [sp, #8]
   146c8:	ldrd	r8, [sp, #16]
   146cc:	ldrd	sl, [sp, #24]
   146d0:	add	sp, sp, #32
   146d4:	pop	{pc}		; (ldr pc, [sp], #4)
   146d8:	cmp	r8, #0
   146dc:	bne	14700 <__assert_fail@plt+0x3374>
   146e0:	b	14720 <__assert_fail@plt+0x3394>
   146e4:	mov	r0, r3
   146e8:	bl	11368 <closedir@plt>
   146ec:	mov	r0, r8
   146f0:	bl	12dd8 <__assert_fail@plt+0x1a4c>
   146f4:	cmp	r4, #0
   146f8:	beq	14720 <__assert_fail@plt+0x3394>
   146fc:	mov	r8, r4
   14700:	mov	r0, r8
   14704:	ldr	r4, [r8, #8]
   14708:	ldr	r3, [r8, #12]
   1470c:	cmp	r3, #0
   14710:	bne	146e4 <__assert_fail@plt+0x3358>
   14714:	bl	12dd8 <__assert_fail@plt+0x1a4c>
   14718:	cmp	r4, #0
   1471c:	bne	146fc <__assert_fail@plt+0x3370>
   14720:	ldr	r0, [sp, #16]
   14724:	bl	12dd8 <__assert_fail@plt+0x1a4c>
   14728:	ldr	r0, [r7, #24]
   1472c:	bl	12dd8 <__assert_fail@plt+0x1a4c>
   14730:	mov	r0, r7
   14734:	mov	r7, #0
   14738:	bl	12dd8 <__assert_fail@plt+0x1a4c>
   1473c:	b	146b8 <__assert_fail@plt+0x332c>
   14740:	bl	1123c <__errno_location@plt>
   14744:	mov	r3, #22
   14748:	str	r3, [r0]
   1474c:	b	146b8 <__assert_fail@plt+0x332c>
   14750:	sub	r3, r0, #1
   14754:	ldrb	r2, [fp, r3]
   14758:	add	r3, fp, r3
   1475c:	cmp	r2, #47	; 0x2f
   14760:	bne	14508 <__assert_fail@plt+0x317c>
   14764:	ldrb	r2, [r3, #-1]!
   14768:	cmp	r2, #47	; 0x2f
   1476c:	bne	14508 <__assert_fail@plt+0x317c>
   14770:	sub	r5, r5, #1
   14774:	cmp	r5, #1
   14778:	bne	14764 <__assert_fail@plt+0x33d8>
   1477c:	mov	r0, #176	; 0xb0
   14780:	b	14510 <__assert_fail@plt+0x3184>
   14784:	ldr	r3, [sp, #28]
   14788:	str	r2, [r4, #8]
   1478c:	str	r4, [sp, #28]
   14790:	str	r4, [r3, #8]
   14794:	b	145d0 <__assert_fail@plt+0x3244>
   14798:	ldr	r3, [sp, #12]
   1479c:	cmp	r3, #0
   147a0:	beq	14868 <__assert_fail@plt+0x34dc>
   147a4:	ldr	fp, [sp, #16]
   147a8:	b	14474 <__assert_fail@plt+0x30e8>
   147ac:	bl	1123c <__errno_location@plt>
   147b0:	mov	r3, #22
   147b4:	mov	r7, #0
   147b8:	str	r3, [r0]
   147bc:	b	146b8 <__assert_fail@plt+0x332c>
   147c0:	bl	12dd8 <__assert_fail@plt+0x1a4c>
   147c4:	mov	r3, #0
   147c8:	str	r3, [r7, #24]
   147cc:	bl	1123c <__errno_location@plt>
   147d0:	mov	r3, #36	; 0x24
   147d4:	str	r3, [r0]
   147d8:	b	14730 <__assert_fail@plt+0x33a4>
   147dc:	mov	r0, #32
   147e0:	bl	1c138 <__assert_fail@plt+0xadac>
   147e4:	cmp	r0, #0
   147e8:	str	r0, [r7, #56]	; 0x38
   147ec:	beq	146d8 <__assert_fail@plt+0x334c>
   147f0:	bl	1c254 <__assert_fail@plt+0xaec8>
   147f4:	b	146a0 <__assert_fail@plt+0x3314>
   147f8:	mov	r4, #4096	; 0x1000
   147fc:	b	143d4 <__assert_fail@plt+0x3048>
   14800:	lsl	r2, r3, #11
   14804:	tst	r3, #512	; 0x200
   14808:	and	r2, r2, #32768	; 0x8000
   1480c:	orr	r2, r2, #540672	; 0x84000
   14810:	orr	r2, r2, #2304	; 0x900
   14814:	beq	14854 <__assert_fail@plt+0x34c8>
   14818:	movw	r1, #56616	; 0xdd28
   1481c:	movt	r1, #1
   14820:	ldr	r0, [r7, #32]
   14824:	bl	16d34 <__assert_fail@plt+0x59a8>
   14828:	cmp	r0, #0
   1482c:	str	r0, [r7, #28]
   14830:	bge	146ac <__assert_fail@plt+0x3320>
   14834:	ldr	r3, [r7, #48]	; 0x30
   14838:	orr	r3, r3, #4
   1483c:	str	r3, [r7, #48]	; 0x30
   14840:	b	146ac <__assert_fail@plt+0x3320>
   14844:	ldr	r0, [r7, #24]
   14848:	bl	12dd8 <__assert_fail@plt+0x1a4c>
   1484c:	str	r4, [r7, #24]
   14850:	b	14730 <__assert_fail@plt+0x33a4>
   14854:	mov	r1, r2
   14858:	movw	r0, #56616	; 0xdd28
   1485c:	movt	r0, #1
   14860:	bl	1c610 <__assert_fail@plt+0xb284>
   14864:	b	14828 <__assert_fail@plt+0x349c>
   14868:	ldr	r8, [sp, #16]
   1486c:	b	14604 <__assert_fail@plt+0x3278>
   14870:	mov	r8, fp
   14874:	b	14604 <__assert_fail@plt+0x3278>
   14878:	ldr	r3, [r0]
   1487c:	strd	r4, [sp, #-16]!
   14880:	str	r6, [sp, #8]
   14884:	mov	r6, r0
   14888:	str	lr, [sp, #12]
   1488c:	cmp	r3, #0
   14890:	beq	148e4 <__assert_fail@plt+0x3558>
   14894:	ldr	r2, [r3, #48]	; 0x30
   14898:	cmp	r2, #0
   1489c:	bge	148b8 <__assert_fail@plt+0x352c>
   148a0:	b	14a68 <__assert_fail@plt+0x36dc>
   148a4:	bl	12dd8 <__assert_fail@plt+0x1a4c>
   148a8:	ldr	r3, [r4, #48]	; 0x30
   148ac:	cmp	r3, #0
   148b0:	blt	148dc <__assert_fail@plt+0x3550>
   148b4:	mov	r3, r4
   148b8:	ldr	r4, [r3, #8]
   148bc:	mov	r0, r3
   148c0:	cmp	r4, #0
   148c4:	bne	148a4 <__assert_fail@plt+0x3518>
   148c8:	ldr	r4, [r3, #4]
   148cc:	bl	12dd8 <__assert_fail@plt+0x1a4c>
   148d0:	ldr	r3, [r4, #48]	; 0x30
   148d4:	cmp	r3, #0
   148d8:	bge	148b4 <__assert_fail@plt+0x3528>
   148dc:	mov	r0, r4
   148e0:	bl	12dd8 <__assert_fail@plt+0x1a4c>
   148e4:	ldr	r4, [r6, #4]
   148e8:	cmp	r4, #0
   148ec:	bne	14910 <__assert_fail@plt+0x3584>
   148f0:	b	14930 <__assert_fail@plt+0x35a4>
   148f4:	mov	r0, r3
   148f8:	bl	11368 <closedir@plt>
   148fc:	mov	r0, r4
   14900:	bl	12dd8 <__assert_fail@plt+0x1a4c>
   14904:	cmp	r5, #0
   14908:	beq	14930 <__assert_fail@plt+0x35a4>
   1490c:	mov	r4, r5
   14910:	mov	r0, r4
   14914:	ldr	r5, [r4, #8]
   14918:	ldr	r3, [r4, #12]
   1491c:	cmp	r3, #0
   14920:	bne	148f4 <__assert_fail@plt+0x3568>
   14924:	bl	12dd8 <__assert_fail@plt+0x1a4c>
   14928:	cmp	r5, #0
   1492c:	bne	1490c <__assert_fail@plt+0x3580>
   14930:	ldr	r0, [r6, #8]
   14934:	bl	12dd8 <__assert_fail@plt+0x1a4c>
   14938:	ldr	r0, [r6, #24]
   1493c:	bl	12dd8 <__assert_fail@plt+0x1a4c>
   14940:	ldr	r3, [r6, #48]	; 0x30
   14944:	tst	r3, #512	; 0x200
   14948:	beq	149f8 <__assert_fail@plt+0x366c>
   1494c:	ldr	r0, [r6, #32]
   14950:	cmp	r0, #0
   14954:	bge	149e0 <__assert_fail@plt+0x3654>
   14958:	mov	r5, #0
   1495c:	add	r4, r6, #60	; 0x3c
   14960:	b	14970 <__assert_fail@plt+0x35e4>
   14964:	bl	16c6c <__assert_fail@plt+0x58e0>
   14968:	cmp	r0, #0
   1496c:	bge	149d8 <__assert_fail@plt+0x364c>
   14970:	mov	r0, r4
   14974:	bl	16c1c <__assert_fail@plt+0x5890>
   14978:	cmp	r0, #0
   1497c:	mov	r0, r4
   14980:	beq	14964 <__assert_fail@plt+0x35d8>
   14984:	ldr	r0, [r6, #52]	; 0x34
   14988:	cmp	r0, #0
   1498c:	beq	14994 <__assert_fail@plt+0x3608>
   14990:	bl	16164 <__assert_fail@plt+0x4dd8>
   14994:	ldr	r3, [r6, #48]	; 0x30
   14998:	movw	r2, #258	; 0x102
   1499c:	ldr	r0, [r6, #56]	; 0x38
   149a0:	tst	r2, r3
   149a4:	beq	14a30 <__assert_fail@plt+0x36a4>
   149a8:	cmp	r0, #0
   149ac:	beq	149b4 <__assert_fail@plt+0x3628>
   149b0:	bl	16164 <__assert_fail@plt+0x4dd8>
   149b4:	mov	r0, r6
   149b8:	bl	12dd8 <__assert_fail@plt+0x1a4c>
   149bc:	cmp	r5, #0
   149c0:	bne	14a70 <__assert_fail@plt+0x36e4>
   149c4:	mov	r0, r5
   149c8:	ldrd	r4, [sp]
   149cc:	ldr	r6, [sp, #8]
   149d0:	add	sp, sp, #12
   149d4:	pop	{pc}		; (ldr pc, [sp], #4)
   149d8:	bl	11350 <close@plt>
   149dc:	b	14970 <__assert_fail@plt+0x35e4>
   149e0:	bl	11350 <close@plt>
   149e4:	cmp	r0, #0
   149e8:	beq	14958 <__assert_fail@plt+0x35cc>
   149ec:	bl	1123c <__errno_location@plt>
   149f0:	ldr	r5, [r0]
   149f4:	b	1495c <__assert_fail@plt+0x35d0>
   149f8:	tst	r3, #4
   149fc:	bne	14958 <__assert_fail@plt+0x35cc>
   14a00:	ldr	r0, [r6, #28]
   14a04:	bl	112fc <fchdir@plt>
   14a08:	cmp	r0, #0
   14a0c:	bne	14a38 <__assert_fail@plt+0x36ac>
   14a10:	ldr	r0, [r6, #28]
   14a14:	bl	11350 <close@plt>
   14a18:	cmp	r0, #0
   14a1c:	beq	14958 <__assert_fail@plt+0x35cc>
   14a20:	bl	1123c <__errno_location@plt>
   14a24:	mov	r4, r0
   14a28:	ldr	r5, [r4]
   14a2c:	b	1495c <__assert_fail@plt+0x35d0>
   14a30:	bl	12dd8 <__assert_fail@plt+0x1a4c>
   14a34:	b	149b4 <__assert_fail@plt+0x3628>
   14a38:	bl	1123c <__errno_location@plt>
   14a3c:	ldr	r5, [r0]
   14a40:	mov	r4, r0
   14a44:	ldr	r0, [r6, #28]
   14a48:	bl	11350 <close@plt>
   14a4c:	adds	r3, r0, #0
   14a50:	movne	r3, #1
   14a54:	cmp	r5, #0
   14a58:	movne	r3, #0
   14a5c:	cmp	r3, #0
   14a60:	beq	1495c <__assert_fail@plt+0x35d0>
   14a64:	b	14a28 <__assert_fail@plt+0x369c>
   14a68:	mov	r4, r3
   14a6c:	b	148dc <__assert_fail@plt+0x3550>
   14a70:	bl	1123c <__errno_location@plt>
   14a74:	str	r5, [r0]
   14a78:	mvn	r5, #0
   14a7c:	b	149c4 <__assert_fail@plt+0x3638>
   14a80:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14a84:	ldr	r4, [r0]
   14a88:	strd	r6, [sp, #8]
   14a8c:	str	r8, [sp, #16]
   14a90:	str	lr, [sp, #20]
   14a94:	sub	sp, sp, #8
   14a98:	cmp	r4, #0
   14a9c:	beq	14cac <__assert_fail@plt+0x3920>
   14aa0:	ldr	r1, [r0, #48]	; 0x30
   14aa4:	ands	r3, r1, #8192	; 0x2000
   14aa8:	bne	14cac <__assert_fail@plt+0x3920>
   14aac:	ldrh	r2, [r4, #60]	; 0x3c
   14ab0:	mov	r8, r0
   14ab4:	mov	r0, #3
   14ab8:	strh	r0, [r4, #60]	; 0x3c
   14abc:	cmp	r2, #1
   14ac0:	beq	14f04 <__assert_fail@plt+0x3b78>
   14ac4:	cmp	r2, #2
   14ac8:	ldrh	r3, [r4, #56]	; 0x38
   14acc:	beq	14bcc <__assert_fail@plt+0x3840>
   14ad0:	cmp	r3, #1
   14ad4:	bne	14b04 <__assert_fail@plt+0x3778>
   14ad8:	b	14ccc <__assert_fail@plt+0x3940>
   14adc:	mov	r0, r4
   14ae0:	str	r5, [r8]
   14ae4:	bl	12dd8 <__assert_fail@plt+0x1a4c>
   14ae8:	ldr	r4, [r5, #48]	; 0x30
   14aec:	cmp	r4, #0
   14af0:	beq	14d4c <__assert_fail@plt+0x39c0>
   14af4:	ldrh	r3, [r5, #60]	; 0x3c
   14af8:	mov	r4, r5
   14afc:	cmp	r3, #4
   14b00:	bne	14e20 <__assert_fail@plt+0x3a94>
   14b04:	ldr	r5, [r4, #8]
   14b08:	cmp	r5, #0
   14b0c:	bne	14adc <__assert_fail@plt+0x3750>
   14b10:	ldr	r6, [r4, #4]
   14b14:	ldr	r3, [r6, #12]
   14b18:	cmp	r3, #0
   14b1c:	bne	1507c <__assert_fail@plt+0x3cf0>
   14b20:	mov	r0, r4
   14b24:	str	r6, [r8]
   14b28:	bl	12dd8 <__assert_fail@plt+0x1a4c>
   14b2c:	ldr	r3, [r6, #48]	; 0x30
   14b30:	cmn	r3, #1
   14b34:	beq	1505c <__assert_fail@plt+0x3cd0>
   14b38:	ldrh	r3, [r6, #56]	; 0x38
   14b3c:	cmp	r3, #11
   14b40:	beq	14f00 <__assert_fail@plt+0x3b74>
   14b44:	ldr	r2, [r8, #24]
   14b48:	mov	r1, #0
   14b4c:	ldr	r3, [r6, #40]	; 0x28
   14b50:	strb	r1, [r2, r3]
   14b54:	ldr	r3, [r6, #48]	; 0x30
   14b58:	cmp	r3, r1
   14b5c:	beq	14c78 <__assert_fail@plt+0x38ec>
   14b60:	ldrh	r3, [r6, #58]	; 0x3a
   14b64:	tst	r3, #2
   14b68:	beq	14fb8 <__assert_fail@plt+0x3c2c>
   14b6c:	ldr	r3, [r8, #48]	; 0x30
   14b70:	ldr	r4, [r6, #36]	; 0x24
   14b74:	tst	r3, #4
   14b78:	bne	14bc0 <__assert_fail@plt+0x3834>
   14b7c:	tst	r3, #512	; 0x200
   14b80:	beq	15158 <__assert_fail@plt+0x3dcc>
   14b84:	ldr	r1, [r8, #32]
   14b88:	sub	r3, r4, r1
   14b8c:	cmn	r1, #100	; 0x64
   14b90:	clz	r3, r3
   14b94:	lsr	r3, r3, #5
   14b98:	moveq	r3, #0
   14b9c:	cmp	r3, #0
   14ba0:	bne	14f00 <__assert_fail@plt+0x3b74>
   14ba4:	add	r0, r8, #60	; 0x3c
   14ba8:	bl	16c24 <__assert_fail@plt+0x5898>
   14bac:	cmp	r0, #0
   14bb0:	blt	14bb8 <__assert_fail@plt+0x382c>
   14bb4:	bl	11350 <close@plt>
   14bb8:	str	r4, [r8, #32]
   14bbc:	ldr	r4, [r6, #36]	; 0x24
   14bc0:	mov	r0, r4
   14bc4:	bl	11350 <close@plt>
   14bc8:	b	14fc0 <__assert_fail@plt+0x3c34>
   14bcc:	sub	r2, r3, #12
   14bd0:	cmp	r2, #1
   14bd4:	bls	14ebc <__assert_fail@plt+0x3b30>
   14bd8:	cmp	r3, #1
   14bdc:	bne	14b04 <__assert_fail@plt+0x3778>
   14be0:	tst	r1, #64	; 0x40
   14be4:	beq	14bfc <__assert_fail@plt+0x3870>
   14be8:	ldrd	r2, [r8, #16]
   14bec:	ldrd	r6, [r4, #64]	; 0x40
   14bf0:	cmp	r7, r3
   14bf4:	cmpeq	r6, r2
   14bf8:	bne	14cd4 <__assert_fail@plt+0x3948>
   14bfc:	ldr	r5, [r8, #4]
   14c00:	cmp	r5, #0
   14c04:	beq	14f64 <__assert_fail@plt+0x3bd8>
   14c08:	tst	r1, #4096	; 0x1000
   14c0c:	bne	14f18 <__assert_fail@plt+0x3b8c>
   14c10:	mvn	r2, #0
   14c14:	mov	r1, r4
   14c18:	ldr	r3, [r4, #24]
   14c1c:	mov	r0, r8
   14c20:	bl	134d4 <__assert_fail@plt+0x2148>
   14c24:	cmp	r0, #0
   14c28:	beq	15044 <__assert_fail@plt+0x3cb8>
   14c2c:	bl	1123c <__errno_location@plt>
   14c30:	ldrh	r3, [r4, #58]	; 0x3a
   14c34:	ldr	r2, [r0]
   14c38:	orr	r3, r3, #1
   14c3c:	str	r2, [r4, #32]
   14c40:	strh	r3, [r4, #58]	; 0x3a
   14c44:	ldr	r4, [r8, #4]
   14c48:	cmp	r4, #0
   14c4c:	beq	14c6c <__assert_fail@plt+0x38e0>
   14c50:	mov	r3, r4
   14c54:	ldr	r2, [r3, #4]
   14c58:	ldr	r2, [r2, #24]
   14c5c:	str	r2, [r3, #24]
   14c60:	ldr	r3, [r3, #8]
   14c64:	cmp	r3, #0
   14c68:	bne	14c54 <__assert_fail@plt+0x38c8>
   14c6c:	mov	r3, #0
   14c70:	str	r3, [r8, #4]
   14c74:	b	14e28 <__assert_fail@plt+0x3a9c>
   14c78:	mov	r0, r8
   14c7c:	bl	13428 <__assert_fail@plt+0x209c>
   14c80:	cmp	r0, #0
   14c84:	beq	14fc0 <__assert_fail@plt+0x3c34>
   14c88:	bl	1123c <__errno_location@plt>
   14c8c:	ldr	r3, [r8, #48]	; 0x30
   14c90:	ldr	r2, [r0]
   14c94:	orr	r0, r3, #8192	; 0x2000
   14c98:	ldrh	r3, [r6, #56]	; 0x38
   14c9c:	str	r2, [r6, #32]
   14ca0:	str	r0, [r8, #48]	; 0x30
   14ca4:	cmp	r3, #2
   14ca8:	bne	14fd4 <__assert_fail@plt+0x3c48>
   14cac:	mov	r4, #0
   14cb0:	mov	r0, r4
   14cb4:	add	sp, sp, #8
   14cb8:	ldrd	r4, [sp]
   14cbc:	ldrd	r6, [sp, #8]
   14cc0:	ldr	r8, [sp, #16]
   14cc4:	add	sp, sp, #20
   14cc8:	pop	{pc}		; (ldr pc, [sp], #4)
   14ccc:	cmp	r2, #4
   14cd0:	bne	14be0 <__assert_fail@plt+0x3854>
   14cd4:	ldrh	r3, [r4, #58]	; 0x3a
   14cd8:	tst	r3, #2
   14cdc:	bne	150bc <__assert_fail@plt+0x3d30>
   14ce0:	ldr	r5, [r8, #4]
   14ce4:	cmp	r5, #0
   14ce8:	bne	14d20 <__assert_fail@plt+0x3994>
   14cec:	mov	r3, #6
   14cf0:	mov	r2, r4
   14cf4:	ldr	r0, [r8, #48]	; 0x30
   14cf8:	add	r1, r8, #56	; 0x38
   14cfc:	strh	r3, [r4, #56]	; 0x38
   14d00:	bl	1335c <__assert_fail@plt+0x1fd0>
   14d04:	b	14cb0 <__assert_fail@plt+0x3924>
   14d08:	bl	11368 <closedir@plt>
   14d0c:	mov	r0, r5
   14d10:	bl	12dd8 <__assert_fail@plt+0x1a4c>
   14d14:	cmp	r6, #0
   14d18:	beq	14d40 <__assert_fail@plt+0x39b4>
   14d1c:	mov	r5, r6
   14d20:	ldr	r6, [r5, #8]
   14d24:	ldr	r0, [r5, #12]
   14d28:	cmp	r0, #0
   14d2c:	bne	14d08 <__assert_fail@plt+0x397c>
   14d30:	mov	r0, r5
   14d34:	bl	12dd8 <__assert_fail@plt+0x1a4c>
   14d38:	cmp	r6, #0
   14d3c:	bne	14d1c <__assert_fail@plt+0x3990>
   14d40:	mov	r3, #0
   14d44:	str	r3, [r8, #4]
   14d48:	b	14cec <__assert_fail@plt+0x3960>
   14d4c:	mov	r0, r8
   14d50:	bl	13428 <__assert_fail@plt+0x209c>
   14d54:	ldr	r3, [r8, #48]	; 0x30
   14d58:	cmp	r0, #0
   14d5c:	orrne	r3, r3, #8192	; 0x2000
   14d60:	strne	r3, [r8, #48]	; 0x30
   14d64:	bne	14cb0 <__assert_fail@plt+0x3924>
   14d68:	movw	r2, #258	; 0x102
   14d6c:	ldr	r0, [r8, #56]	; 0x38
   14d70:	tst	r2, r3
   14d74:	beq	150b4 <__assert_fail@plt+0x3d28>
   14d78:	cmp	r0, #0
   14d7c:	beq	14d84 <__assert_fail@plt+0x39f8>
   14d80:	bl	16164 <__assert_fail@plt+0x4dd8>
   14d84:	ldr	r2, [r5, #52]	; 0x34
   14d88:	add	r4, r5, #168	; 0xa8
   14d8c:	mov	r1, r4
   14d90:	ldr	r0, [r8, #24]
   14d94:	str	r2, [r5, #40]	; 0x28
   14d98:	add	r2, r2, #1
   14d9c:	bl	11098 <memmove@plt>
   14da0:	mov	r0, r4
   14da4:	mov	r1, #47	; 0x2f
   14da8:	bl	112c0 <strrchr@plt>
   14dac:	cmp	r0, #0
   14db0:	beq	14de0 <__assert_fail@plt+0x3a54>
   14db4:	cmp	r4, r0
   14db8:	beq	1504c <__assert_fail@plt+0x3cc0>
   14dbc:	add	r6, r0, #1
   14dc0:	mov	r0, r6
   14dc4:	bl	1120c <strlen@plt>
   14dc8:	mov	r7, r0
   14dcc:	mov	r1, r6
   14dd0:	mov	r0, r4
   14dd4:	add	r2, r7, #1
   14dd8:	bl	11098 <memmove@plt>
   14ddc:	str	r7, [r5, #52]	; 0x34
   14de0:	ldr	r3, [r8, #24]
   14de4:	movw	r1, #258	; 0x102
   14de8:	ldr	r2, [r8, #48]	; 0x30
   14dec:	str	r3, [r5, #24]
   14df0:	str	r3, [r5, #28]
   14df4:	tst	r1, r2
   14df8:	bne	1500c <__assert_fail@plt+0x3c80>
   14dfc:	mov	r0, #32
   14e00:	bl	1c138 <__assert_fail@plt+0xadac>
   14e04:	cmp	r0, #0
   14e08:	str	r0, [r8, #56]	; 0x38
   14e0c:	beq	1514c <__assert_fail@plt+0x3dc0>
   14e10:	bl	1c254 <__assert_fail@plt+0xaec8>
   14e14:	mov	r4, r5
   14e18:	ldrh	r3, [r5, #56]	; 0x38
   14e1c:	b	14e6c <__assert_fail@plt+0x3ae0>
   14e20:	cmp	r3, #2
   14e24:	beq	150c8 <__assert_fail@plt+0x3d3c>
   14e28:	ldr	r0, [r4, #4]
   14e2c:	mov	ip, #47	; 0x2f
   14e30:	add	r1, r4, #168	; 0xa8
   14e34:	ldr	r3, [r8, #24]
   14e38:	ldr	lr, [r0, #28]
   14e3c:	ldr	r2, [r0, #40]	; 0x28
   14e40:	sub	r0, r2, #1
   14e44:	ldrb	lr, [lr, r0]
   14e48:	cmp	lr, ip
   14e4c:	movne	r0, r2
   14e50:	strb	ip, [r3, r0]
   14e54:	add	r0, r3, r0
   14e58:	ldr	r2, [r4, #52]	; 0x34
   14e5c:	add	r0, r0, #1
   14e60:	add	r2, r2, #1
   14e64:	bl	11098 <memmove@plt>
   14e68:	ldrh	r3, [r4, #56]	; 0x38
   14e6c:	cmp	r3, #11
   14e70:	str	r4, [r8]
   14e74:	beq	14ee4 <__assert_fail@plt+0x3b58>
   14e78:	cmp	r3, #1
   14e7c:	bne	14cb0 <__assert_fail@plt+0x3924>
   14e80:	ldr	r3, [r4, #48]	; 0x30
   14e84:	add	r1, r8, #56	; 0x38
   14e88:	ldr	r0, [r8, #48]	; 0x30
   14e8c:	cmp	r3, #0
   14e90:	ldrdeq	r2, [r4, #64]	; 0x40
   14e94:	strdeq	r2, [r8, #16]
   14e98:	mov	r2, r4
   14e9c:	bl	13288 <__assert_fail@plt+0x1efc>
   14ea0:	subs	r5, r0, #0
   14ea4:	bne	14cb0 <__assert_fail@plt+0x3924>
   14ea8:	bl	1123c <__errno_location@plt>
   14eac:	mov	r3, #12
   14eb0:	mov	r4, r5
   14eb4:	str	r3, [r0]
   14eb8:	b	14cb0 <__assert_fail@plt+0x3924>
   14ebc:	mov	r3, #1
   14ec0:	mov	r2, r4
   14ec4:	ldr	r0, [r8, #32]
   14ec8:	bl	1312c <__assert_fail@plt+0x1da0>
   14ecc:	cmp	r0, #1
   14ed0:	strh	r0, [r4, #56]	; 0x38
   14ed4:	beq	15170 <__assert_fail@plt+0x3de4>
   14ed8:	cmp	r0, #11
   14edc:	str	r4, [r8]
   14ee0:	bne	14cb0 <__assert_fail@plt+0x3924>
   14ee4:	ldrd	r2, [r4, #112]	; 0x70
   14ee8:	cmp	r3, #0
   14eec:	cmpeq	r2, #2
   14ef0:	beq	150f8 <__assert_fail@plt+0x3d6c>
   14ef4:	cmp	r3, #0
   14ef8:	cmpeq	r2, #1
   14efc:	beq	14cb0 <__assert_fail@plt+0x3924>
   14f00:	bl	11344 <abort@plt>
   14f04:	mov	r2, r4
   14f08:	ldr	r0, [r8, #32]
   14f0c:	bl	1312c <__assert_fail@plt+0x1da0>
   14f10:	strh	r0, [r4, #56]	; 0x38
   14f14:	b	14cb0 <__assert_fail@plt+0x3924>
   14f18:	bic	r1, r1, #4096	; 0x1000
   14f1c:	str	r1, [r8, #48]	; 0x30
   14f20:	b	14f3c <__assert_fail@plt+0x3bb0>
   14f24:	bl	11368 <closedir@plt>
   14f28:	mov	r0, r5
   14f2c:	bl	12dd8 <__assert_fail@plt+0x1a4c>
   14f30:	cmp	r6, #0
   14f34:	beq	14f5c <__assert_fail@plt+0x3bd0>
   14f38:	mov	r5, r6
   14f3c:	ldr	r6, [r5, #8]
   14f40:	ldr	r0, [r5, #12]
   14f44:	cmp	r0, #0
   14f48:	bne	14f24 <__assert_fail@plt+0x3b98>
   14f4c:	mov	r0, r5
   14f50:	bl	12dd8 <__assert_fail@plt+0x1a4c>
   14f54:	cmp	r6, #0
   14f58:	bne	14f38 <__assert_fail@plt+0x3bac>
   14f5c:	mov	r3, #0
   14f60:	str	r3, [r8, #4]
   14f64:	mov	r1, #3
   14f68:	mov	r0, r8
   14f6c:	bl	13794 <__assert_fail@plt+0x2408>
   14f70:	cmp	r0, #0
   14f74:	str	r0, [r8, #4]
   14f78:	movne	r4, r0
   14f7c:	bne	14c6c <__assert_fail@plt+0x38e0>
   14f80:	ldr	r0, [r8, #48]	; 0x30
   14f84:	tst	r0, #8192	; 0x2000
   14f88:	bne	14cac <__assert_fail@plt+0x3920>
   14f8c:	ldr	r3, [r4, #32]
   14f90:	cmp	r3, #0
   14f94:	beq	14fa8 <__assert_fail@plt+0x3c1c>
   14f98:	ldrh	r3, [r4, #56]	; 0x38
   14f9c:	cmp	r3, #4
   14fa0:	movne	r3, #7
   14fa4:	strhne	r3, [r4, #56]	; 0x38
   14fa8:	add	r1, r8, #56	; 0x38
   14fac:	mov	r2, r4
   14fb0:	bl	1335c <__assert_fail@plt+0x1fd0>
   14fb4:	b	14cb0 <__assert_fail@plt+0x3924>
   14fb8:	tst	r3, #1
   14fbc:	beq	15118 <__assert_fail@plt+0x3d8c>
   14fc0:	ldrh	r3, [r6, #56]	; 0x38
   14fc4:	ldr	r0, [r8, #48]	; 0x30
   14fc8:	cmp	r3, #2
   14fcc:	beq	14ffc <__assert_fail@plt+0x3c70>
   14fd0:	ldr	r2, [r6, #32]
   14fd4:	cmp	r2, #0
   14fd8:	movne	r3, #7
   14fdc:	strhne	r3, [r6, #56]	; 0x38
   14fe0:	bne	14ffc <__assert_fail@plt+0x3c70>
   14fe4:	mov	r3, #6
   14fe8:	mov	r2, r6
   14fec:	add	r1, r8, #56	; 0x38
   14ff0:	strh	r3, [r6, #56]	; 0x38
   14ff4:	bl	1335c <__assert_fail@plt+0x1fd0>
   14ff8:	ldr	r0, [r8, #48]	; 0x30
   14ffc:	tst	r0, #8192	; 0x2000
   15000:	moveq	r4, r6
   15004:	beq	14cb0 <__assert_fail@plt+0x3924>
   15008:	b	14cac <__assert_fail@plt+0x3920>
   1500c:	movw	r1, #11736	; 0x2dd8
   15010:	movt	r1, #1
   15014:	movw	r3, #11832	; 0x2e38
   15018:	movt	r3, #1
   1501c:	movw	r2, #11896	; 0x2e78
   15020:	movt	r2, #1
   15024:	str	r1, [sp]
   15028:	mov	r0, #31
   1502c:	mov	r1, #0
   15030:	bl	15e24 <__assert_fail@plt+0x4a98>
   15034:	mov	r4, r5
   15038:	ldrh	r3, [r5, #56]	; 0x38
   1503c:	str	r0, [r8, #56]	; 0x38
   15040:	b	14e6c <__assert_fail@plt+0x3ae0>
   15044:	ldr	r4, [r8, #4]
   15048:	b	14c6c <__assert_fail@plt+0x38e0>
   1504c:	ldrb	r3, [r4, #1]
   15050:	cmp	r3, #0
   15054:	beq	14de0 <__assert_fail@plt+0x3a54>
   15058:	b	14dbc <__assert_fail@plt+0x3a30>
   1505c:	mov	r0, r6
   15060:	bl	12dd8 <__assert_fail@plt+0x1a4c>
   15064:	bl	1123c <__errno_location@plt>
   15068:	mov	r3, #0
   1506c:	mov	r4, r3
   15070:	str	r3, [r0]
   15074:	str	r3, [r8]
   15078:	b	14cb0 <__assert_fail@plt+0x3924>
   1507c:	ldr	r2, [r8, #24]
   15080:	mov	r1, #3
   15084:	mov	r0, r8
   15088:	ldr	r3, [r6, #40]	; 0x28
   1508c:	str	r6, [r8]
   15090:	strb	r5, [r2, r3]
   15094:	bl	13794 <__assert_fail@plt+0x2408>
   15098:	subs	r3, r0, #0
   1509c:	bne	1513c <__assert_fail@plt+0x3db0>
   150a0:	ldr	r3, [r8, #48]	; 0x30
   150a4:	tst	r3, #8192	; 0x2000
   150a8:	bne	14cac <__assert_fail@plt+0x3920>
   150ac:	ldr	r6, [r4, #4]
   150b0:	b	14b20 <__assert_fail@plt+0x3794>
   150b4:	bl	12dd8 <__assert_fail@plt+0x1a4c>
   150b8:	b	14d84 <__assert_fail@plt+0x39f8>
   150bc:	ldr	r0, [r4, #36]	; 0x24
   150c0:	bl	11350 <close@plt>
   150c4:	b	14ce0 <__assert_fail@plt+0x3954>
   150c8:	mov	r3, #1
   150cc:	mov	r2, r5
   150d0:	ldr	r0, [r8, #32]
   150d4:	ldr	r1, [r8, #48]	; 0x30
   150d8:	bl	1312c <__assert_fail@plt+0x1da0>
   150dc:	cmp	r0, #1
   150e0:	strh	r0, [r5, #56]	; 0x38
   150e4:	beq	151c8 <__assert_fail@plt+0x3e3c>
   150e8:	mov	r3, #3
   150ec:	mov	r4, r5
   150f0:	strh	r3, [r5, #60]	; 0x3c
   150f4:	b	14e28 <__assert_fail@plt+0x3a9c>
   150f8:	mov	r3, #0
   150fc:	mov	r2, r4
   15100:	ldr	r0, [r8, #32]
   15104:	ldr	r1, [r8, #48]	; 0x30
   15108:	bl	1312c <__assert_fail@plt+0x1da0>
   1510c:	mov	r3, r0
   15110:	strh	r0, [r4, #56]	; 0x38
   15114:	b	14e78 <__assert_fail@plt+0x3aec>
   15118:	movw	r3, #56612	; 0xdd24
   1511c:	movt	r3, #1
   15120:	ldr	r1, [r6, #4]
   15124:	mvn	r2, #0
   15128:	mov	r0, r8
   1512c:	bl	134d4 <__assert_fail@plt+0x2148>
   15130:	cmp	r0, #0
   15134:	beq	14fc0 <__assert_fail@plt+0x3c34>
   15138:	b	14c88 <__assert_fail@plt+0x38fc>
   1513c:	mov	r0, r4
   15140:	mov	r4, r3
   15144:	bl	12dd8 <__assert_fail@plt+0x1a4c>
   15148:	b	14e28 <__assert_fail@plt+0x3a9c>
   1514c:	ldrh	r3, [r5, #56]	; 0x38
   15150:	mov	r4, r5
   15154:	b	14e6c <__assert_fail@plt+0x3ae0>
   15158:	mov	r0, r4
   1515c:	bl	112fc <fchdir@plt>
   15160:	cmp	r0, #0
   15164:	bne	15218 <__assert_fail@plt+0x3e8c>
   15168:	ldr	r4, [r6, #36]	; 0x24
   1516c:	b	14bc0 <__assert_fail@plt+0x3834>
   15170:	ldr	r3, [r8, #48]	; 0x30
   15174:	tst	r3, #4
   15178:	strne	r4, [r8]
   1517c:	bne	14e80 <__assert_fail@plt+0x3af4>
   15180:	lsl	r2, r3, #11
   15184:	tst	r3, #512	; 0x200
   15188:	and	r2, r2, #32768	; 0x8000
   1518c:	orr	r2, r2, #540672	; 0x84000
   15190:	orr	r2, r2, #2304	; 0x900
   15194:	beq	15238 <__assert_fail@plt+0x3eac>
   15198:	movw	r1, #56616	; 0xdd28
   1519c:	movt	r1, #1
   151a0:	ldr	r0, [r8, #32]
   151a4:	bl	16d34 <__assert_fail@plt+0x59a8>
   151a8:	cmp	r0, #0
   151ac:	str	r0, [r4, #36]	; 0x24
   151b0:	blt	1524c <__assert_fail@plt+0x3ec0>
   151b4:	ldrh	r2, [r4, #58]	; 0x3a
   151b8:	ldrh	r3, [r4, #56]	; 0x38
   151bc:	orr	r2, r2, #2
   151c0:	strh	r2, [r4, #58]	; 0x3a
   151c4:	b	14e6c <__assert_fail@plt+0x3ae0>
   151c8:	ldr	r3, [r8, #48]	; 0x30
   151cc:	tst	r3, #4
   151d0:	bne	150e8 <__assert_fail@plt+0x3d5c>
   151d4:	lsl	r2, r3, #11
   151d8:	tst	r3, #512	; 0x200
   151dc:	and	r2, r2, #32768	; 0x8000
   151e0:	orr	r2, r2, #540672	; 0x84000
   151e4:	orr	r2, r2, #2304	; 0x900
   151e8:	beq	15268 <__assert_fail@plt+0x3edc>
   151ec:	movw	r1, #56616	; 0xdd28
   151f0:	movt	r1, #1
   151f4:	ldr	r0, [r8, #32]
   151f8:	bl	16d34 <__assert_fail@plt+0x59a8>
   151fc:	cmp	r0, #0
   15200:	str	r0, [r5, #36]	; 0x24
   15204:	blt	1527c <__assert_fail@plt+0x3ef0>
   15208:	ldrh	r3, [r5, #58]	; 0x3a
   1520c:	orr	r3, r3, #2
   15210:	strh	r3, [r5, #58]	; 0x3a
   15214:	b	150e8 <__assert_fail@plt+0x3d5c>
   15218:	bl	1123c <__errno_location@plt>
   1521c:	ldr	r3, [r8, #48]	; 0x30
   15220:	ldr	r2, [r0]
   15224:	ldr	r4, [r6, #36]	; 0x24
   15228:	orr	r3, r3, #8192	; 0x2000
   1522c:	str	r2, [r6, #32]
   15230:	str	r3, [r8, #48]	; 0x30
   15234:	b	14bc0 <__assert_fail@plt+0x3834>
   15238:	mov	r1, r2
   1523c:	movw	r0, #56616	; 0xdd28
   15240:	movt	r0, #1
   15244:	bl	1c610 <__assert_fail@plt+0xb284>
   15248:	b	151a8 <__assert_fail@plt+0x3e1c>
   1524c:	bl	1123c <__errno_location@plt>
   15250:	ldr	r3, [r0]
   15254:	mov	r2, #7
   15258:	str	r3, [r4, #32]
   1525c:	strh	r2, [r4, #56]	; 0x38
   15260:	str	r4, [r8]
   15264:	b	14cb0 <__assert_fail@plt+0x3924>
   15268:	mov	r1, r2
   1526c:	movw	r0, #56616	; 0xdd28
   15270:	movt	r0, #1
   15274:	bl	1c610 <__assert_fail@plt+0xb284>
   15278:	b	151fc <__assert_fail@plt+0x3e70>
   1527c:	bl	1123c <__errno_location@plt>
   15280:	ldr	r3, [r0]
   15284:	mov	r2, #7
   15288:	str	r3, [r5, #32]
   1528c:	strh	r2, [r5, #56]	; 0x38
   15290:	b	150e8 <__assert_fail@plt+0x3d5c>
   15294:	cmp	r2, #4
   15298:	bhi	152ac <__assert_fail@plt+0x3f20>
   1529c:	mov	r3, #0
   152a0:	strh	r2, [r1, #60]	; 0x3c
   152a4:	mov	r0, r3
   152a8:	bx	lr
   152ac:	str	r4, [sp, #-8]!
   152b0:	str	lr, [sp, #4]
   152b4:	bl	1123c <__errno_location@plt>
   152b8:	mov	r2, #22
   152bc:	mov	r3, #1
   152c0:	ldr	r4, [sp]
   152c4:	add	sp, sp, #4
   152c8:	str	r2, [r0]
   152cc:	mov	r0, r3
   152d0:	pop	{pc}		; (ldr pc, [sp], #4)
   152d4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   152d8:	mov	r5, r0
   152dc:	strd	r6, [sp, #8]
   152e0:	strd	r8, [sp, #16]
   152e4:	mov	r8, r1
   152e8:	str	sl, [sp, #24]
   152ec:	str	lr, [sp, #28]
   152f0:	bl	1123c <__errno_location@plt>
   152f4:	bics	r2, r8, #4096	; 0x1000
   152f8:	mov	r6, r0
   152fc:	movne	r3, #22
   15300:	movne	r0, #0
   15304:	strne	r3, [r6]
   15308:	bne	153d0 <__assert_fail@plt+0x4044>
   1530c:	ldr	r9, [r5]
   15310:	str	r2, [r6]
   15314:	ldr	r3, [r5, #48]	; 0x30
   15318:	ands	r0, r3, #8192	; 0x2000
   1531c:	bne	15480 <__assert_fail@plt+0x40f4>
   15320:	ldrh	r3, [r9, #56]	; 0x38
   15324:	cmp	r3, #9
   15328:	beq	15488 <__assert_fail@plt+0x40fc>
   1532c:	cmp	r3, #1
   15330:	bne	153d0 <__assert_fail@plt+0x4044>
   15334:	ldr	r4, [r5, #4]
   15338:	cmp	r4, #0
   1533c:	bne	1535c <__assert_fail@plt+0x3fd0>
   15340:	b	1537c <__assert_fail@plt+0x3ff0>
   15344:	bl	11368 <closedir@plt>
   15348:	mov	r0, r4
   1534c:	bl	12dd8 <__assert_fail@plt+0x1a4c>
   15350:	cmp	r7, #0
   15354:	beq	1537c <__assert_fail@plt+0x3ff0>
   15358:	mov	r4, r7
   1535c:	ldr	r7, [r4, #8]
   15360:	ldr	r0, [r4, #12]
   15364:	cmp	r0, #0
   15368:	bne	15344 <__assert_fail@plt+0x3fb8>
   1536c:	mov	r0, r4
   15370:	bl	12dd8 <__assert_fail@plt+0x1a4c>
   15374:	cmp	r7, #0
   15378:	bne	15358 <__assert_fail@plt+0x3fcc>
   1537c:	cmp	r8, #4096	; 0x1000
   15380:	movne	r4, #1
   15384:	bne	15398 <__assert_fail@plt+0x400c>
   15388:	ldr	r3, [r5, #48]	; 0x30
   1538c:	mov	r4, #2
   15390:	orr	r3, r3, #4096	; 0x1000
   15394:	str	r3, [r5, #48]	; 0x30
   15398:	ldr	r3, [r9, #48]	; 0x30
   1539c:	cmp	r3, #0
   153a0:	bne	153c0 <__assert_fail@plt+0x4034>
   153a4:	ldr	r3, [r9, #24]
   153a8:	ldrb	r3, [r3]
   153ac:	cmp	r3, #47	; 0x2f
   153b0:	beq	153c0 <__assert_fail@plt+0x4034>
   153b4:	ldr	r3, [r5, #48]	; 0x30
   153b8:	tst	r3, #4
   153bc:	beq	153e8 <__assert_fail@plt+0x405c>
   153c0:	mov	r1, r4
   153c4:	mov	r0, r5
   153c8:	bl	13794 <__assert_fail@plt+0x2408>
   153cc:	str	r0, [r5, #4]
   153d0:	ldrd	r4, [sp]
   153d4:	ldrd	r6, [sp, #8]
   153d8:	ldrd	r8, [sp, #16]
   153dc:	ldr	sl, [sp, #24]
   153e0:	add	sp, sp, #28
   153e4:	pop	{pc}		; (ldr pc, [sp], #4)
   153e8:	lsl	r2, r3, #11
   153ec:	tst	r3, #512	; 0x200
   153f0:	and	r2, r2, #32768	; 0x8000
   153f4:	orr	r2, r2, #540672	; 0x84000
   153f8:	orr	r2, r2, #2304	; 0x900
   153fc:	beq	15490 <__assert_fail@plt+0x4104>
   15400:	movw	r1, #56616	; 0xdd28
   15404:	movt	r1, #1
   15408:	ldr	r0, [r5, #32]
   1540c:	bl	16d34 <__assert_fail@plt+0x59a8>
   15410:	mov	r7, r0
   15414:	cmp	r7, #0
   15418:	movlt	r3, #0
   1541c:	movlt	r0, r3
   15420:	strlt	r3, [r5, #4]
   15424:	blt	153d0 <__assert_fail@plt+0x4044>
   15428:	mov	r1, r4
   1542c:	mov	r0, r5
   15430:	bl	13794 <__assert_fail@plt+0x2408>
   15434:	ldr	r3, [r5, #48]	; 0x30
   15438:	str	r0, [r5, #4]
   1543c:	ands	r4, r3, #512	; 0x200
   15440:	beq	154a8 <__assert_fail@plt+0x411c>
   15444:	ldr	r1, [r5, #32]
   15448:	sub	r3, r7, r1
   1544c:	cmn	r1, #100	; 0x64
   15450:	clz	r3, r3
   15454:	lsr	r3, r3, #5
   15458:	moveq	r3, #0
   1545c:	cmp	r3, #0
   15460:	bne	154e0 <__assert_fail@plt+0x4154>
   15464:	add	r0, r5, #60	; 0x3c
   15468:	bl	16c24 <__assert_fail@plt+0x5898>
   1546c:	cmp	r0, #0
   15470:	blt	15478 <__assert_fail@plt+0x40ec>
   15474:	bl	11350 <close@plt>
   15478:	str	r7, [r5, #32]
   1547c:	b	154c0 <__assert_fail@plt+0x4134>
   15480:	mov	r0, r2
   15484:	b	153d0 <__assert_fail@plt+0x4044>
   15488:	ldr	r0, [r9, #8]
   1548c:	b	153d0 <__assert_fail@plt+0x4044>
   15490:	mov	r1, r2
   15494:	movw	r0, #56616	; 0xdd28
   15498:	movt	r0, #1
   1549c:	bl	1c610 <__assert_fail@plt+0xb284>
   154a0:	mov	r7, r0
   154a4:	b	15414 <__assert_fail@plt+0x4088>
   154a8:	mov	r0, r7
   154ac:	bl	112fc <fchdir@plt>
   154b0:	cmp	r0, #0
   154b4:	bne	154c8 <__assert_fail@plt+0x413c>
   154b8:	mov	r0, r7
   154bc:	bl	11350 <close@plt>
   154c0:	ldr	r0, [r5, #4]
   154c4:	b	153d0 <__assert_fail@plt+0x4044>
   154c8:	ldr	r5, [r6]
   154cc:	mov	r0, r7
   154d0:	bl	11350 <close@plt>
   154d4:	mov	r0, r4
   154d8:	str	r5, [r6]
   154dc:	b	153d0 <__assert_fail@plt+0x4044>
   154e0:	bl	11344 <abort@plt>
   154e4:	andeq	r0, r0, r0
   154e8:	ror	r0, r0, #3
   154ec:	udiv	r3, r0, r1
   154f0:	mls	r0, r3, r1, r0
   154f4:	bx	lr
   154f8:	sub	r0, r1, r0
   154fc:	clz	r0, r0
   15500:	lsr	r0, r0, #5
   15504:	bx	lr
   15508:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1550c:	mov	r5, r1
   15510:	strd	r6, [sp, #8]
   15514:	mov	r6, r0
   15518:	mov	r7, r3
   1551c:	mov	r0, r1
   15520:	strd	r8, [sp, #16]
   15524:	strd	sl, [sp, #24]
   15528:	mov	fp, r2
   1552c:	str	lr, [sp, #32]
   15530:	sub	sp, sp, #4
   15534:	ldr	r1, [r6, #8]
   15538:	ldr	r3, [r6, #24]
   1553c:	blx	r3
   15540:	ldr	r3, [r6, #8]
   15544:	cmp	r0, r3
   15548:	bcs	15664 <__assert_fail@plt+0x42d8>
   1554c:	ldr	r8, [r6]
   15550:	lsl	r9, r0, #3
   15554:	mov	sl, r0
   15558:	add	r4, r8, r9
   1555c:	str	r4, [fp]
   15560:	ldr	r1, [r8, r0, lsl #3]
   15564:	cmp	r1, #0
   15568:	beq	1565c <__assert_fail@plt+0x42d0>
   1556c:	cmp	r1, r5
   15570:	beq	15624 <__assert_fail@plt+0x4298>
   15574:	mov	r0, r5
   15578:	ldr	r3, [r6, #28]
   1557c:	blx	r3
   15580:	cmp	r0, #0
   15584:	bne	15620 <__assert_fail@plt+0x4294>
   15588:	ldr	r3, [r4, #4]
   1558c:	cmp	r3, #0
   15590:	beq	1565c <__assert_fail@plt+0x42d0>
   15594:	ldr	r1, [r3]
   15598:	cmp	r5, r1
   1559c:	bne	155c0 <__assert_fail@plt+0x4234>
   155a0:	b	155dc <__assert_fail@plt+0x4250>
   155a4:	ldr	r4, [r4, #4]
   155a8:	ldr	r3, [r4, #4]
   155ac:	cmp	r3, #0
   155b0:	beq	1565c <__assert_fail@plt+0x42d0>
   155b4:	ldr	r1, [r3]
   155b8:	cmp	r1, r5
   155bc:	beq	155dc <__assert_fail@plt+0x4250>
   155c0:	mov	r0, r5
   155c4:	ldr	r3, [r6, #28]
   155c8:	blx	r3
   155cc:	cmp	r0, #0
   155d0:	beq	155a4 <__assert_fail@plt+0x4218>
   155d4:	ldr	r3, [r4, #4]
   155d8:	ldr	r1, [r3]
   155dc:	cmp	r7, #0
   155e0:	beq	15600 <__assert_fail@plt+0x4274>
   155e4:	ldr	r0, [r3, #4]
   155e8:	mov	r2, #0
   155ec:	str	r0, [r4, #4]
   155f0:	str	r2, [r3]
   155f4:	ldr	r2, [r6, #36]	; 0x24
   155f8:	str	r2, [r3, #4]
   155fc:	str	r3, [r6, #36]	; 0x24
   15600:	mov	r0, r1
   15604:	add	sp, sp, #4
   15608:	ldrd	r4, [sp]
   1560c:	ldrd	r6, [sp, #8]
   15610:	ldrd	r8, [sp, #16]
   15614:	ldrd	sl, [sp, #24]
   15618:	add	sp, sp, #32
   1561c:	pop	{pc}		; (ldr pc, [sp], #4)
   15620:	ldr	r1, [r8, sl, lsl #3]
   15624:	cmp	r7, #0
   15628:	beq	15600 <__assert_fail@plt+0x4274>
   1562c:	ldr	r0, [r4, #4]
   15630:	cmp	r0, #0
   15634:	streq	r0, [r8, sl, lsl #3]
   15638:	beq	15600 <__assert_fail@plt+0x4274>
   1563c:	ldrd	r2, [r0]
   15640:	mov	ip, #0
   15644:	strd	r2, [r8, r9]
   15648:	str	ip, [r0]
   1564c:	ldr	r3, [r6, #36]	; 0x24
   15650:	str	r3, [r0, #4]
   15654:	str	r0, [r6, #36]	; 0x24
   15658:	b	15600 <__assert_fail@plt+0x4274>
   1565c:	mov	r1, #0
   15660:	b	15600 <__assert_fail@plt+0x4274>
   15664:	bl	11344 <abort@plt>
   15668:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1566c:	ldr	r3, [r1, #4]
   15670:	strd	r6, [sp, #8]
   15674:	ldr	r6, [r1]
   15678:	strd	r8, [sp, #16]
   1567c:	str	sl, [sp, #24]
   15680:	str	lr, [sp, #28]
   15684:	cmp	r6, r3
   15688:	bcs	15768 <__assert_fail@plt+0x43dc>
   1568c:	mov	r8, r2
   15690:	mov	r5, r0
   15694:	mov	r7, r1
   15698:	add	r6, r6, #8
   1569c:	mov	r9, #0
   156a0:	b	156b0 <__assert_fail@plt+0x4324>
   156a4:	cmp	r3, r6
   156a8:	add	r6, r6, #8
   156ac:	bls	15768 <__assert_fail@plt+0x43dc>
   156b0:	ldr	sl, [r6, #-8]
   156b4:	cmp	sl, #0
   156b8:	beq	156a4 <__assert_fail@plt+0x4318>
   156bc:	ldr	r4, [r6, #-4]
   156c0:	cmp	r4, #0
   156c4:	beq	1574c <__assert_fail@plt+0x43c0>
   156c8:	ldr	r1, [r5, #8]
   156cc:	b	156e8 <__assert_fail@plt+0x435c>
   156d0:	ldr	r3, [ip, #4]
   156d4:	cmp	r2, #0
   156d8:	str	r3, [r4, #4]
   156dc:	str	r4, [ip, #4]
   156e0:	mov	r4, r2
   156e4:	beq	15748 <__assert_fail@plt+0x43bc>
   156e8:	ldr	sl, [r4]
   156ec:	ldr	r3, [r5, #24]
   156f0:	mov	r0, sl
   156f4:	blx	r3
   156f8:	ldr	r1, [r5, #8]
   156fc:	cmp	r0, r1
   15700:	bcs	1581c <__assert_fail@plt+0x4490>
   15704:	ldr	r3, [r5]
   15708:	ldr	r2, [r4, #4]
   1570c:	ldr	lr, [r3, r0, lsl #3]
   15710:	add	ip, r3, r0, lsl #3
   15714:	cmp	lr, #0
   15718:	bne	156d0 <__assert_fail@plt+0x4344>
   1571c:	ldr	ip, [r5, #12]
   15720:	cmp	r2, #0
   15724:	str	sl, [r3, r0, lsl #3]
   15728:	add	ip, ip, #1
   1572c:	str	ip, [r5, #12]
   15730:	str	lr, [r4]
   15734:	ldr	r3, [r5, #36]	; 0x24
   15738:	str	r3, [r4, #4]
   1573c:	str	r4, [r5, #36]	; 0x24
   15740:	mov	r4, r2
   15744:	bne	156e8 <__assert_fail@plt+0x435c>
   15748:	ldr	sl, [r6, #-8]
   1574c:	cmp	r8, #0
   15750:	str	r9, [r6, #-4]
   15754:	beq	15784 <__assert_fail@plt+0x43f8>
   15758:	ldr	r3, [r7, #4]
   1575c:	cmp	r3, r6
   15760:	add	r6, r6, #8
   15764:	bhi	156b0 <__assert_fail@plt+0x4324>
   15768:	mov	r0, #1
   1576c:	ldrd	r4, [sp]
   15770:	ldrd	r6, [sp, #8]
   15774:	ldrd	r8, [sp, #16]
   15778:	ldr	sl, [sp, #24]
   1577c:	add	sp, sp, #28
   15780:	pop	{pc}		; (ldr pc, [sp], #4)
   15784:	mov	r0, sl
   15788:	ldr	r1, [r5, #8]
   1578c:	ldr	r3, [r5, #24]
   15790:	blx	r3
   15794:	ldr	r3, [r5, #8]
   15798:	cmp	r0, r3
   1579c:	bcs	1581c <__assert_fail@plt+0x4490>
   157a0:	ldr	r3, [r5]
   157a4:	ldr	r2, [r3, r0, lsl #3]
   157a8:	add	r4, r3, r0, lsl #3
   157ac:	cmp	r2, #0
   157b0:	beq	157f0 <__assert_fail@plt+0x4464>
   157b4:	ldr	r0, [r5, #36]	; 0x24
   157b8:	cmp	r0, #0
   157bc:	beq	15804 <__assert_fail@plt+0x4478>
   157c0:	ldr	r3, [r0, #4]
   157c4:	str	r3, [r5, #36]	; 0x24
   157c8:	ldr	r3, [r4, #4]
   157cc:	str	sl, [r0]
   157d0:	str	r3, [r0, #4]
   157d4:	str	r0, [r4, #4]
   157d8:	ldr	r2, [r7, #12]
   157dc:	str	r9, [r6, #-8]
   157e0:	ldr	r3, [r7, #4]
   157e4:	sub	r2, r2, #1
   157e8:	str	r2, [r7, #12]
   157ec:	b	156a4 <__assert_fail@plt+0x4318>
   157f0:	ldr	r2, [r5, #12]
   157f4:	str	sl, [r3, r0, lsl #3]
   157f8:	add	r2, r2, #1
   157fc:	str	r2, [r5, #12]
   15800:	b	157d8 <__assert_fail@plt+0x444c>
   15804:	mov	r0, #8
   15808:	bl	1c138 <__assert_fail@plt+0xadac>
   1580c:	cmp	r0, #0
   15810:	bne	157c8 <__assert_fail@plt+0x443c>
   15814:	mov	r0, r8
   15818:	b	1576c <__assert_fail@plt+0x43e0>
   1581c:	bl	11344 <abort@plt>
   15820:	ldr	r0, [r0, #8]
   15824:	bx	lr
   15828:	ldr	r0, [r0, #12]
   1582c:	bx	lr
   15830:	ldr	r0, [r0, #16]
   15834:	bx	lr
   15838:	ldm	r0, {r1, r3}
   1583c:	cmp	r1, r3
   15840:	bcs	158b4 <__assert_fail@plt+0x4528>
   15844:	sub	ip, r3, #1
   15848:	add	r3, r1, #16
   1584c:	sub	ip, ip, r1
   15850:	mov	r0, #0
   15854:	bic	ip, ip, #7
   15858:	add	r1, r1, #8
   1585c:	add	ip, ip, r3
   15860:	b	15870 <__assert_fail@plt+0x44e4>
   15864:	add	r1, r1, #8
   15868:	cmp	r1, ip
   1586c:	beq	158b0 <__assert_fail@plt+0x4524>
   15870:	ldr	r3, [r1, #-8]
   15874:	cmp	r3, #0
   15878:	beq	15864 <__assert_fail@plt+0x44d8>
   1587c:	ldr	r3, [r1, #-4]
   15880:	mov	r2, #1
   15884:	cmp	r3, #0
   15888:	beq	1589c <__assert_fail@plt+0x4510>
   1588c:	ldr	r3, [r3, #4]
   15890:	add	r2, r2, #1
   15894:	cmp	r3, #0
   15898:	bne	1588c <__assert_fail@plt+0x4500>
   1589c:	cmp	r0, r2
   158a0:	add	r1, r1, #8
   158a4:	movcc	r0, r2
   158a8:	cmp	r1, ip
   158ac:	bne	15870 <__assert_fail@plt+0x44e4>
   158b0:	bx	lr
   158b4:	mov	r0, #0
   158b8:	bx	lr
   158bc:	ldm	r0, {r1, r3}
   158c0:	push	{lr}		; (str lr, [sp, #-4]!)
   158c4:	cmp	r1, r3
   158c8:	bcs	1595c <__assert_fail@plt+0x45d0>
   158cc:	sub	ip, r3, #1
   158d0:	mov	r2, #0
   158d4:	sub	ip, ip, r1
   158d8:	add	r3, r1, #16
   158dc:	bic	ip, ip, #7
   158e0:	add	r1, r1, #8
   158e4:	add	ip, ip, r3
   158e8:	mov	lr, r2
   158ec:	b	158fc <__assert_fail@plt+0x4570>
   158f0:	add	r1, r1, #8
   158f4:	cmp	r1, ip
   158f8:	beq	15938 <__assert_fail@plt+0x45ac>
   158fc:	ldr	r3, [r1, #-8]
   15900:	cmp	r3, #0
   15904:	beq	158f0 <__assert_fail@plt+0x4564>
   15908:	ldr	r3, [r1, #-4]
   1590c:	add	lr, lr, #1
   15910:	add	r2, r2, #1
   15914:	cmp	r3, #0
   15918:	beq	158f0 <__assert_fail@plt+0x4564>
   1591c:	ldr	r3, [r3, #4]
   15920:	add	r2, r2, #1
   15924:	cmp	r3, #0
   15928:	bne	1591c <__assert_fail@plt+0x4590>
   1592c:	add	r1, r1, #8
   15930:	cmp	r1, ip
   15934:	bne	158fc <__assert_fail@plt+0x4570>
   15938:	ldr	r3, [r0, #12]
   1593c:	cmp	r3, lr
   15940:	movne	r0, #0
   15944:	bne	15958 <__assert_fail@plt+0x45cc>
   15948:	ldr	r0, [r0, #16]
   1594c:	sub	r0, r0, r2
   15950:	clz	r0, r0
   15954:	lsr	r0, r0, #5
   15958:	pop	{pc}		; (ldr pc, [sp], #4)
   1595c:	mov	r2, #0
   15960:	mov	lr, r2
   15964:	b	15938 <__assert_fail@plt+0x45ac>
   15968:	strd	r4, [sp, #-20]!	; 0xffffffec
   1596c:	mov	r4, r1
   15970:	ldr	r2, [r0]
   15974:	ldr	r1, [r0, #4]
   15978:	ldr	r3, [r0, #16]
   1597c:	strd	r6, [sp, #8]
   15980:	str	lr, [sp, #16]
   15984:	sub	sp, sp, #12
   15988:	cmp	r2, r1
   1598c:	ldrd	r6, [r0, #8]
   15990:	bcs	15a90 <__assert_fail@plt+0x4704>
   15994:	sub	ip, r1, #1
   15998:	add	r1, r2, #16
   1599c:	sub	ip, ip, r2
   159a0:	add	r0, r2, #8
   159a4:	bic	ip, ip, #7
   159a8:	mov	r5, #0
   159ac:	add	ip, ip, r1
   159b0:	b	159c0 <__assert_fail@plt+0x4634>
   159b4:	add	r0, r0, #8
   159b8:	cmp	r0, ip
   159bc:	beq	15a00 <__assert_fail@plt+0x4674>
   159c0:	ldr	r2, [r0, #-8]
   159c4:	cmp	r2, #0
   159c8:	beq	159b4 <__assert_fail@plt+0x4628>
   159cc:	ldr	r2, [r0, #-4]
   159d0:	mov	r1, #1
   159d4:	cmp	r2, #0
   159d8:	beq	159ec <__assert_fail@plt+0x4660>
   159dc:	ldr	r2, [r2, #4]
   159e0:	add	r1, r1, #1
   159e4:	cmp	r2, #0
   159e8:	bne	159dc <__assert_fail@plt+0x4650>
   159ec:	cmp	r5, r1
   159f0:	add	r0, r0, #8
   159f4:	movcc	r5, r1
   159f8:	cmp	r0, ip
   159fc:	bne	159c0 <__assert_fail@plt+0x4634>
   15a00:	mov	r1, #1
   15a04:	mov	r0, r4
   15a08:	movw	r2, #56640	; 0xdd40
   15a0c:	movt	r2, #1
   15a10:	bl	11278 <__fprintf_chk@plt>
   15a14:	mov	r3, r6
   15a18:	mov	r1, #1
   15a1c:	mov	r0, r4
   15a20:	movw	r2, #56664	; 0xdd58
   15a24:	movt	r2, #1
   15a28:	bl	11278 <__fprintf_chk@plt>
   15a2c:	vmov	s15, r7
   15a30:	mov	r3, r7
   15a34:	mov	r1, #1
   15a38:	vldr	d5, [pc, #88]	; 15a98 <__assert_fail@plt+0x470c>
   15a3c:	mov	r0, r4
   15a40:	movw	r2, #56688	; 0xdd70
   15a44:	movt	r2, #1
   15a48:	vcvt.f64.u32	d6, s15
   15a4c:	vmov	s15, r6
   15a50:	vmul.f64	d6, d6, d5
   15a54:	vcvt.f64.u32	d7, s15
   15a58:	vdiv.f64	d5, d6, d7
   15a5c:	vstr	d5, [sp]
   15a60:	bl	11278 <__fprintf_chk@plt>
   15a64:	mov	r3, r5
   15a68:	mov	r0, r4
   15a6c:	movw	r2, #56724	; 0xdd94
   15a70:	movt	r2, #1
   15a74:	mov	r1, #1
   15a78:	add	sp, sp, #12
   15a7c:	ldrd	r4, [sp]
   15a80:	ldrd	r6, [sp, #8]
   15a84:	ldr	lr, [sp, #16]
   15a88:	add	sp, sp, #20
   15a8c:	b	11278 <__fprintf_chk@plt>
   15a90:	mov	r5, #0
   15a94:	b	15a00 <__assert_fail@plt+0x4674>
   15a98:	andeq	r0, r0, r0
   15a9c:	subsmi	r0, r9, r0
   15aa0:	strd	r4, [sp, #-16]!
   15aa4:	mov	r5, r1
   15aa8:	str	r6, [sp, #8]
   15aac:	mov	r6, r0
   15ab0:	mov	r0, r1
   15ab4:	str	lr, [sp, #12]
   15ab8:	ldr	r1, [r6, #8]
   15abc:	ldr	r3, [r6, #24]
   15ac0:	blx	r3
   15ac4:	ldr	r3, [r6, #8]
   15ac8:	cmp	r0, r3
   15acc:	bcs	15b3c <__assert_fail@plt+0x47b0>
   15ad0:	ldr	r4, [r6]
   15ad4:	ldr	r1, [r4, r0, lsl #3]
   15ad8:	add	r4, r4, r0, lsl #3
   15adc:	cmp	r1, #0
   15ae0:	beq	15b1c <__assert_fail@plt+0x4790>
   15ae4:	cmp	r1, r5
   15ae8:	bne	15afc <__assert_fail@plt+0x4770>
   15aec:	b	15b20 <__assert_fail@plt+0x4794>
   15af0:	ldr	r1, [r4]
   15af4:	cmp	r5, r1
   15af8:	beq	15b20 <__assert_fail@plt+0x4794>
   15afc:	mov	r0, r5
   15b00:	ldr	r3, [r6, #28]
   15b04:	blx	r3
   15b08:	cmp	r0, #0
   15b0c:	bne	15b34 <__assert_fail@plt+0x47a8>
   15b10:	ldr	r4, [r4, #4]
   15b14:	cmp	r4, #0
   15b18:	bne	15af0 <__assert_fail@plt+0x4764>
   15b1c:	mov	r1, #0
   15b20:	ldrd	r4, [sp]
   15b24:	mov	r0, r1
   15b28:	ldr	r6, [sp, #8]
   15b2c:	add	sp, sp, #12
   15b30:	pop	{pc}		; (ldr pc, [sp], #4)
   15b34:	ldr	r1, [r4]
   15b38:	b	15b20 <__assert_fail@plt+0x4794>
   15b3c:	bl	11344 <abort@plt>
   15b40:	ldr	r3, [r0, #16]
   15b44:	cmp	r3, #0
   15b48:	beq	15b9c <__assert_fail@plt+0x4810>
   15b4c:	ldr	r3, [r0]
   15b50:	ldr	r2, [r0, #4]
   15b54:	cmp	r3, r2
   15b58:	bcs	15b90 <__assert_fail@plt+0x4804>
   15b5c:	ldr	r0, [r3]
   15b60:	cmp	r0, #0
   15b64:	bxne	lr
   15b68:	sub	r2, r2, #1
   15b6c:	sub	r2, r2, r3
   15b70:	bic	r2, r2, #7
   15b74:	add	r2, r3, r2
   15b78:	b	15b88 <__assert_fail@plt+0x47fc>
   15b7c:	ldr	r0, [r3, #8]!
   15b80:	cmp	r0, #0
   15b84:	bxne	lr
   15b88:	cmp	r3, r2
   15b8c:	bne	15b7c <__assert_fail@plt+0x47f0>
   15b90:	str	r4, [sp, #-8]!
   15b94:	str	lr, [sp, #4]
   15b98:	bl	11344 <abort@plt>
   15b9c:	mov	r0, r3
   15ba0:	bx	lr
   15ba4:	strd	r4, [sp, #-16]!
   15ba8:	mov	r5, r0
   15bac:	mov	r4, r1
   15bb0:	mov	r0, r1
   15bb4:	ldr	r1, [r5, #8]
   15bb8:	ldr	r3, [r5, #24]
   15bbc:	str	r6, [sp, #8]
   15bc0:	str	lr, [sp, #12]
   15bc4:	blx	r3
   15bc8:	ldr	r3, [r5, #8]
   15bcc:	cmp	r0, r3
   15bd0:	bcs	15c38 <__assert_fail@plt+0x48ac>
   15bd4:	ldr	r2, [r5]
   15bd8:	add	r2, r2, r0, lsl #3
   15bdc:	mov	r3, r2
   15be0:	b	15bec <__assert_fail@plt+0x4860>
   15be4:	cmp	r3, #0
   15be8:	beq	15c04 <__assert_fail@plt+0x4878>
   15bec:	ldm	r3, {r1, r3}
   15bf0:	cmp	r1, r4
   15bf4:	bne	15be4 <__assert_fail@plt+0x4858>
   15bf8:	cmp	r3, #0
   15bfc:	ldrne	r0, [r3]
   15c00:	bne	15c28 <__assert_fail@plt+0x489c>
   15c04:	ldr	r3, [r5, #4]
   15c08:	b	15c18 <__assert_fail@plt+0x488c>
   15c0c:	ldr	r0, [r2]
   15c10:	cmp	r0, #0
   15c14:	bne	15c28 <__assert_fail@plt+0x489c>
   15c18:	add	r2, r2, #8
   15c1c:	cmp	r3, r2
   15c20:	bhi	15c0c <__assert_fail@plt+0x4880>
   15c24:	mov	r0, #0
   15c28:	ldrd	r4, [sp]
   15c2c:	ldr	r6, [sp, #8]
   15c30:	add	sp, sp, #12
   15c34:	pop	{pc}		; (ldr pc, [sp], #4)
   15c38:	bl	11344 <abort@plt>
   15c3c:	strd	r4, [sp, #-16]!
   15c40:	mov	r3, #0
   15c44:	ldr	r5, [r0]
   15c48:	str	r6, [sp, #8]
   15c4c:	str	lr, [sp, #12]
   15c50:	ldr	lr, [r0, #4]
   15c54:	cmp	lr, r5
   15c58:	bls	15c74 <__assert_fail@plt+0x48e8>
   15c5c:	ldr	ip, [r5]
   15c60:	cmp	ip, #0
   15c64:	bne	15c88 <__assert_fail@plt+0x48fc>
   15c68:	add	r5, r5, #8
   15c6c:	cmp	r5, lr
   15c70:	bcc	15c5c <__assert_fail@plt+0x48d0>
   15c74:	ldrd	r4, [sp]
   15c78:	mov	r0, r3
   15c7c:	ldr	r6, [sp, #8]
   15c80:	add	sp, sp, #12
   15c84:	pop	{pc}		; (ldr pc, [sp], #4)
   15c88:	cmp	r2, r3
   15c8c:	bls	15c74 <__assert_fail@plt+0x48e8>
   15c90:	str	ip, [r1, r3, lsl #2]
   15c94:	add	r4, r3, #1
   15c98:	lsl	lr, r3, #2
   15c9c:	ldr	ip, [r5, #4]
   15ca0:	cmp	ip, #0
   15ca4:	beq	15d04 <__assert_fail@plt+0x4978>
   15ca8:	cmp	r2, r4
   15cac:	bls	15cf8 <__assert_fail@plt+0x496c>
   15cb0:	ldr	r6, [ip]
   15cb4:	add	r3, r3, #2
   15cb8:	str	r6, [r1, r4, lsl #2]
   15cbc:	ldr	ip, [ip, #4]
   15cc0:	cmp	ip, #0
   15cc4:	beq	15cf0 <__assert_fail@plt+0x4964>
   15cc8:	add	lr, lr, #4
   15ccc:	add	lr, r1, lr
   15cd0:	cmp	r2, r3
   15cd4:	add	r3, r3, #1
   15cd8:	beq	15cfc <__assert_fail@plt+0x4970>
   15cdc:	ldr	r4, [ip]
   15ce0:	str	r4, [lr, #4]!
   15ce4:	ldr	ip, [ip, #4]
   15ce8:	cmp	ip, #0
   15cec:	bne	15cd0 <__assert_fail@plt+0x4944>
   15cf0:	ldr	lr, [r0, #4]
   15cf4:	b	15c68 <__assert_fail@plt+0x48dc>
   15cf8:	mov	r2, r4
   15cfc:	mov	r3, r2
   15d00:	b	15c74 <__assert_fail@plt+0x48e8>
   15d04:	mov	r3, r4
   15d08:	ldr	lr, [r0, #4]
   15d0c:	b	15c68 <__assert_fail@plt+0x48dc>
   15d10:	strd	r4, [sp, #-32]!	; 0xffffffe0
   15d14:	ldr	r3, [r0, #4]
   15d18:	strd	r6, [sp, #8]
   15d1c:	strd	r8, [sp, #16]
   15d20:	ldr	r8, [r0]
   15d24:	str	sl, [sp, #24]
   15d28:	str	lr, [sp, #28]
   15d2c:	cmp	r3, r8
   15d30:	bls	15dac <__assert_fail@plt+0x4a20>
   15d34:	mov	r7, r2
   15d38:	mov	r6, r1
   15d3c:	mov	r9, r0
   15d40:	mov	r5, #0
   15d44:	ldr	r0, [r8]
   15d48:	cmp	r0, #0
   15d4c:	bne	15d78 <__assert_fail@plt+0x49ec>
   15d50:	add	r8, r8, #8
   15d54:	cmp	r8, r3
   15d58:	bcc	15d44 <__assert_fail@plt+0x49b8>
   15d5c:	mov	r0, r5
   15d60:	ldrd	r4, [sp]
   15d64:	ldrd	r6, [sp, #8]
   15d68:	ldrd	r8, [sp, #16]
   15d6c:	ldr	sl, [sp, #24]
   15d70:	add	sp, sp, #28
   15d74:	pop	{pc}		; (ldr pc, [sp], #4)
   15d78:	mov	r4, r8
   15d7c:	b	15d84 <__assert_fail@plt+0x49f8>
   15d80:	ldr	r0, [r4]
   15d84:	mov	r1, r7
   15d88:	blx	r6
   15d8c:	cmp	r0, #0
   15d90:	beq	15d5c <__assert_fail@plt+0x49d0>
   15d94:	ldr	r4, [r4, #4]
   15d98:	add	r5, r5, #1
   15d9c:	cmp	r4, #0
   15da0:	bne	15d80 <__assert_fail@plt+0x49f4>
   15da4:	ldr	r3, [r9, #4]
   15da8:	b	15d50 <__assert_fail@plt+0x49c4>
   15dac:	mov	r5, #0
   15db0:	b	15d5c <__assert_fail@plt+0x49d0>
   15db4:	ldrb	r2, [r0]
   15db8:	cmp	r2, #0
   15dbc:	beq	15de8 <__assert_fail@plt+0x4a5c>
   15dc0:	mov	r3, #0
   15dc4:	rsb	r3, r3, r3, lsl #5
   15dc8:	add	r3, r3, r2
   15dcc:	ldrb	r2, [r0, #1]!
   15dd0:	udiv	ip, r3, r1
   15dd4:	cmp	r2, #0
   15dd8:	mls	r3, r1, ip, r3
   15ddc:	bne	15dc4 <__assert_fail@plt+0x4a38>
   15de0:	mov	r0, r3
   15de4:	bx	lr
   15de8:	mov	r3, r2
   15dec:	mov	r0, r3
   15df0:	bx	lr
   15df4:	movw	r3, #56620	; 0xdd2c
   15df8:	movt	r3, #1
   15dfc:	strd	r4, [sp, #-8]!
   15e00:	ldrd	r4, [r3]
   15e04:	ldr	r1, [r3, #16]
   15e08:	ldrd	r2, [r3, #8]
   15e0c:	strd	r4, [r0]
   15e10:	ldrd	r4, [sp]
   15e14:	add	sp, sp, #8
   15e18:	strd	r2, [r0, #8]
   15e1c:	str	r1, [r0, #16]
   15e20:	bx	lr
   15e24:	cmp	r2, #0
   15e28:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15e2c:	movw	r4, #21736	; 0x54e8
   15e30:	movt	r4, #1
   15e34:	movne	r4, r2
   15e38:	strd	r6, [sp, #8]
   15e3c:	cmp	r3, #0
   15e40:	str	r8, [sp, #16]
   15e44:	mov	r8, r0
   15e48:	mov	r0, #40	; 0x28
   15e4c:	movw	r5, #21752	; 0x54f8
   15e50:	movt	r5, #1
   15e54:	mov	r7, r1
   15e58:	str	lr, [sp, #20]
   15e5c:	movne	r5, r3
   15e60:	bl	1c138 <__assert_fail@plt+0xadac>
   15e64:	subs	r6, r0, #0
   15e68:	beq	15eac <__assert_fail@plt+0x4b20>
   15e6c:	cmp	r7, #0
   15e70:	movw	r3, #56620	; 0xdd2c
   15e74:	movt	r3, #1
   15e78:	beq	15f38 <__assert_fail@plt+0x4bac>
   15e7c:	cmp	r7, r3
   15e80:	str	r7, [r6, #20]
   15e84:	beq	15f3c <__assert_fail@plt+0x4bb0>
   15e88:	vldr	s14, [pc, #456]	; 16058 <__assert_fail@plt+0x4ccc>
   15e8c:	vldr	s15, [r7, #8]
   15e90:	vcmpe.f32	s15, s14
   15e94:	vmrs	APSR_nzcv, fpscr
   15e98:	bgt	15ec4 <__assert_fail@plt+0x4b38>
   15e9c:	str	r3, [r6, #20]
   15ea0:	mov	r0, r6
   15ea4:	mov	r6, #0
   15ea8:	bl	12dd8 <__assert_fail@plt+0x1a4c>
   15eac:	mov	r0, r6
   15eb0:	ldrd	r4, [sp]
   15eb4:	ldrd	r6, [sp, #8]
   15eb8:	ldr	r8, [sp, #16]
   15ebc:	add	sp, sp, #20
   15ec0:	pop	{pc}		; (ldr pc, [sp], #4)
   15ec4:	vldr	s13, [pc, #400]	; 1605c <__assert_fail@plt+0x4cd0>
   15ec8:	vcmpe.f32	s15, s13
   15ecc:	vmrs	APSR_nzcv, fpscr
   15ed0:	bpl	15e9c <__assert_fail@plt+0x4b10>
   15ed4:	vldr	s13, [pc, #388]	; 16060 <__assert_fail@plt+0x4cd4>
   15ed8:	vldr	s12, [r7, #12]
   15edc:	vcmpe.f32	s12, s13
   15ee0:	vmrs	APSR_nzcv, fpscr
   15ee4:	ble	15e9c <__assert_fail@plt+0x4b10>
   15ee8:	vldr	s13, [r7]
   15eec:	vcmpe.f32	s13, #0.0
   15ef0:	vmrs	APSR_nzcv, fpscr
   15ef4:	blt	15e9c <__assert_fail@plt+0x4b10>
   15ef8:	vadd.f32	s14, s13, s14
   15efc:	vldr	s13, [r7, #4]
   15f00:	vcmpe.f32	s14, s13
   15f04:	vmrs	APSR_nzcv, fpscr
   15f08:	bpl	15e9c <__assert_fail@plt+0x4b10>
   15f0c:	vldr	s12, [pc, #336]	; 16064 <__assert_fail@plt+0x4cd8>
   15f10:	vcmpe.f32	s13, s12
   15f14:	vmrs	APSR_nzcv, fpscr
   15f18:	bhi	15e9c <__assert_fail@plt+0x4b10>
   15f1c:	vcmpe.f32	s15, s14
   15f20:	vmrs	APSR_nzcv, fpscr
   15f24:	ble	15e9c <__assert_fail@plt+0x4b10>
   15f28:	ldrb	r3, [r7, #16]
   15f2c:	cmp	r3, #0
   15f30:	bne	15f64 <__assert_fail@plt+0x4bd8>
   15f34:	b	15f40 <__assert_fail@plt+0x4bb4>
   15f38:	str	r3, [r6, #20]
   15f3c:	vldr	s15, [pc, #292]	; 16068 <__assert_fail@plt+0x4cdc>
   15f40:	vmov	s14, r8
   15f44:	vldr	s13, [pc, #288]	; 1606c <__assert_fail@plt+0x4ce0>
   15f48:	vcvt.f32.u32	s12, s14
   15f4c:	vdiv.f32	s14, s12, s15
   15f50:	vcmpe.f32	s14, s13
   15f54:	vmrs	APSR_nzcv, fpscr
   15f58:	bge	15fec <__assert_fail@plt+0x4c60>
   15f5c:	vcvt.u32.f32	s15, s14
   15f60:	vmov	r8, s15
   15f64:	cmp	r8, #10
   15f68:	movcs	r3, r8
   15f6c:	movcc	r3, #10
   15f70:	orr	r3, r3, #1
   15f74:	cmn	r3, #1
   15f78:	beq	15fec <__assert_fail@plt+0x4c60>
   15f7c:	movw	lr, #43691	; 0xaaab
   15f80:	movt	lr, #43690	; 0xaaaa
   15f84:	umull	r1, r2, lr, r3
   15f88:	cmp	r3, #9
   15f8c:	lsr	r2, r2, #1
   15f90:	add	r2, r2, r2, lsl #1
   15f94:	sub	r2, r3, r2
   15f98:	bls	15fd8 <__assert_fail@plt+0x4c4c>
   15f9c:	cmp	r2, #0
   15fa0:	beq	15fe0 <__assert_fail@plt+0x4c54>
   15fa4:	mov	ip, #16
   15fa8:	mov	r0, #9
   15fac:	mov	r1, #3
   15fb0:	b	15fbc <__assert_fail@plt+0x4c30>
   15fb4:	cmp	r2, #0
   15fb8:	beq	15fe0 <__assert_fail@plt+0x4c54>
   15fbc:	add	r1, r1, #2
   15fc0:	add	r0, r0, ip
   15fc4:	cmp	r0, r3
   15fc8:	add	ip, ip, #8
   15fcc:	udiv	r2, r3, r1
   15fd0:	mls	r2, r1, r2, r3
   15fd4:	bcc	15fb4 <__assert_fail@plt+0x4c28>
   15fd8:	cmp	r2, #0
   15fdc:	bne	15ff8 <__assert_fail@plt+0x4c6c>
   15fe0:	add	r3, r3, #2
   15fe4:	cmn	r3, #1
   15fe8:	bne	15f84 <__assert_fail@plt+0x4bf8>
   15fec:	mov	r3, #0
   15ff0:	str	r3, [r6, #8]
   15ff4:	b	15ea0 <__assert_fail@plt+0x4b14>
   15ff8:	lsrs	r2, r3, #30
   15ffc:	movne	r7, #1
   16000:	moveq	r7, #0
   16004:	tst	r3, #536870912	; 0x20000000
   16008:	bne	15fec <__assert_fail@plt+0x4c60>
   1600c:	cmp	r7, #0
   16010:	bne	15fec <__assert_fail@plt+0x4c60>
   16014:	mov	r0, r3
   16018:	mov	r1, #8
   1601c:	str	r3, [r6, #8]
   16020:	bl	1c0c4 <__assert_fail@plt+0xad38>
   16024:	cmp	r0, #0
   16028:	str	r0, [r6]
   1602c:	beq	15ea0 <__assert_fail@plt+0x4b14>
   16030:	ldr	r3, [r6, #8]
   16034:	str	r7, [r6, #12]
   16038:	str	r7, [r6, #16]
   1603c:	strd	r4, [r6, #24]
   16040:	str	r7, [r6, #36]	; 0x24
   16044:	add	r0, r0, r3, lsl #3
   16048:	ldr	r3, [sp, #24]
   1604c:	str	r0, [r6, #4]
   16050:	str	r3, [r6, #32]
   16054:	b	15eac <__assert_fail@plt+0x4b20>
   16058:	stclcc	12, cr12, [ip, #820]	; 0x334
   1605c:	svccc	0x00666666
   16060:	svccc	0x008ccccd
   16064:	svccc	0x00800000
   16068:	svccc	0x004ccccd
   1606c:	svcmi	0x00800000
   16070:	strd	r4, [sp, #-24]!	; 0xffffffe8
   16074:	mov	r5, r0
   16078:	ldr	r2, [r0, #4]
   1607c:	strd	r6, [sp, #8]
   16080:	ldr	r6, [r0]
   16084:	str	r8, [sp, #16]
   16088:	str	lr, [sp, #20]
   1608c:	cmp	r6, r2
   16090:	addcc	r6, r6, #8
   16094:	movcc	r7, #0
   16098:	bcc	160ac <__assert_fail@plt+0x4d20>
   1609c:	b	16120 <__assert_fail@plt+0x4d94>
   160a0:	cmp	r2, r6
   160a4:	add	r6, r6, #8
   160a8:	bls	16120 <__assert_fail@plt+0x4d94>
   160ac:	ldr	r3, [r6, #-8]
   160b0:	cmp	r3, #0
   160b4:	beq	160a0 <__assert_fail@plt+0x4d14>
   160b8:	ldr	r4, [r6, #-4]
   160bc:	ldr	r3, [r5, #32]
   160c0:	cmp	r4, #0
   160c4:	beq	160f8 <__assert_fail@plt+0x4d6c>
   160c8:	cmp	r3, #0
   160cc:	beq	16140 <__assert_fail@plt+0x4db4>
   160d0:	ldr	r0, [r4]
   160d4:	blx	r3
   160d8:	ldr	r1, [r4, #4]
   160dc:	ldr	r3, [r5, #32]
   160e0:	ldr	r2, [r5, #36]	; 0x24
   160e4:	str	r7, [r4]
   160e8:	str	r2, [r4, #4]
   160ec:	str	r4, [r5, #36]	; 0x24
   160f0:	subs	r4, r1, #0
   160f4:	bne	160c8 <__assert_fail@plt+0x4d3c>
   160f8:	cmp	r3, #0
   160fc:	beq	16108 <__assert_fail@plt+0x4d7c>
   16100:	ldr	r0, [r6, #-8]
   16104:	blx	r3
   16108:	str	r7, [r6, #-8]
   1610c:	str	r7, [r6, #-4]
   16110:	ldr	r2, [r5, #4]
   16114:	cmp	r2, r6
   16118:	add	r6, r6, #8
   1611c:	bhi	160ac <__assert_fail@plt+0x4d20>
   16120:	mov	r3, #0
   16124:	ldrd	r6, [sp, #8]
   16128:	ldr	r8, [sp, #16]
   1612c:	str	r3, [r5, #12]
   16130:	str	r3, [r5, #16]
   16134:	ldrd	r4, [sp]
   16138:	add	sp, sp, #20
   1613c:	pop	{pc}		; (ldr pc, [sp], #4)
   16140:	ldr	r2, [r5, #36]	; 0x24
   16144:	str	r7, [r4]
   16148:	ldr	r3, [r4, #4]
   1614c:	str	r2, [r4, #4]
   16150:	mov	r2, r4
   16154:	str	r2, [r5, #36]	; 0x24
   16158:	subs	r4, r3, #0
   1615c:	bne	16144 <__assert_fail@plt+0x4db8>
   16160:	b	16108 <__assert_fail@plt+0x4d7c>
   16164:	strd	r4, [sp, #-16]!
   16168:	ldr	r2, [r0, #32]
   1616c:	ldr	r5, [r0]
   16170:	ldr	r3, [r0, #4]
   16174:	cmp	r2, #0
   16178:	str	r6, [sp, #8]
   1617c:	mov	r6, r0
   16180:	str	lr, [sp, #12]
   16184:	beq	161ec <__assert_fail@plt+0x4e60>
   16188:	ldr	r2, [r0, #16]
   1618c:	cmp	r2, #0
   16190:	beq	161ec <__assert_fail@plt+0x4e60>
   16194:	cmp	r5, r3
   16198:	bcc	161ac <__assert_fail@plt+0x4e20>
   1619c:	b	16220 <__assert_fail@plt+0x4e94>
   161a0:	add	r5, r5, #8
   161a4:	cmp	r5, r3
   161a8:	bcs	161e8 <__assert_fail@plt+0x4e5c>
   161ac:	ldr	r0, [r5]
   161b0:	cmp	r0, #0
   161b4:	beq	161a0 <__assert_fail@plt+0x4e14>
   161b8:	mov	r4, r5
   161bc:	b	161c4 <__assert_fail@plt+0x4e38>
   161c0:	ldr	r0, [r4]
   161c4:	ldr	r3, [r6, #32]
   161c8:	blx	r3
   161cc:	ldr	r4, [r4, #4]
   161d0:	cmp	r4, #0
   161d4:	bne	161c0 <__assert_fail@plt+0x4e34>
   161d8:	ldr	r3, [r6, #4]
   161dc:	add	r5, r5, #8
   161e0:	cmp	r5, r3
   161e4:	bcc	161ac <__assert_fail@plt+0x4e20>
   161e8:	ldr	r5, [r6]
   161ec:	cmp	r3, r5
   161f0:	bls	16220 <__assert_fail@plt+0x4e94>
   161f4:	ldr	r0, [r5, #4]
   161f8:	cmp	r0, #0
   161fc:	beq	16214 <__assert_fail@plt+0x4e88>
   16200:	ldr	r4, [r0, #4]
   16204:	bl	12dd8 <__assert_fail@plt+0x1a4c>
   16208:	subs	r0, r4, #0
   1620c:	bne	16200 <__assert_fail@plt+0x4e74>
   16210:	ldr	r3, [r6, #4]
   16214:	add	r5, r5, #8
   16218:	cmp	r5, r3
   1621c:	bcc	161f4 <__assert_fail@plt+0x4e68>
   16220:	ldr	r0, [r6, #36]	; 0x24
   16224:	cmp	r0, #0
   16228:	beq	1623c <__assert_fail@plt+0x4eb0>
   1622c:	ldr	r4, [r0, #4]
   16230:	bl	12dd8 <__assert_fail@plt+0x1a4c>
   16234:	subs	r0, r4, #0
   16238:	bne	1622c <__assert_fail@plt+0x4ea0>
   1623c:	ldr	r0, [r6]
   16240:	bl	12dd8 <__assert_fail@plt+0x1a4c>
   16244:	mov	r0, r6
   16248:	ldrd	r4, [sp]
   1624c:	ldr	r6, [sp, #8]
   16250:	ldr	lr, [sp, #12]
   16254:	add	sp, sp, #16
   16258:	b	12dd8 <__assert_fail@plt+0x1a4c>
   1625c:	ldr	r3, [r0, #20]
   16260:	strd	r4, [sp, #-20]!	; 0xffffffec
   16264:	mov	r5, r0
   16268:	ldrb	r2, [r3, #16]
   1626c:	strd	r6, [sp, #8]
   16270:	str	lr, [sp, #16]
   16274:	sub	sp, sp, #44	; 0x2c
   16278:	cmp	r2, #0
   1627c:	bne	162a8 <__assert_fail@plt+0x4f1c>
   16280:	vmov	s15, r1
   16284:	vldr	s12, [r3, #8]
   16288:	vldr	s13, [pc, #444]	; 1644c <__assert_fail@plt+0x50c0>
   1628c:	vcvt.f32.u32	s15, s15
   16290:	vdiv.f32	s14, s15, s12
   16294:	vcmpe.f32	s14, s13
   16298:	vmrs	APSR_nzcv, fpscr
   1629c:	vcvtlt.u32.f32	s15, s14
   162a0:	vmovlt	r1, s15
   162a4:	bge	1632c <__assert_fail@plt+0x4fa0>
   162a8:	cmp	r1, #10
   162ac:	movcc	r1, #10
   162b0:	orr	r4, r1, #1
   162b4:	cmn	r4, #1
   162b8:	beq	1632c <__assert_fail@plt+0x4fa0>
   162bc:	movw	ip, #43691	; 0xaaab
   162c0:	movt	ip, #43690	; 0xaaaa
   162c4:	umull	r2, r3, ip, r4
   162c8:	cmp	r4, #9
   162cc:	lsr	r3, r3, #1
   162d0:	add	r3, r3, r3, lsl #1
   162d4:	sub	r3, r4, r3
   162d8:	bls	16318 <__assert_fail@plt+0x4f8c>
   162dc:	cmp	r3, #0
   162e0:	beq	16320 <__assert_fail@plt+0x4f94>
   162e4:	mov	r0, #16
   162e8:	mov	r1, #9
   162ec:	mov	r2, #3
   162f0:	b	16300 <__assert_fail@plt+0x4f74>
   162f4:	cmp	r3, #0
   162f8:	add	r0, r0, #8
   162fc:	beq	16320 <__assert_fail@plt+0x4f94>
   16300:	add	r2, r2, #2
   16304:	add	r1, r1, r0
   16308:	cmp	r1, r4
   1630c:	udiv	r3, r4, r2
   16310:	mls	r3, r2, r3, r4
   16314:	bcc	162f4 <__assert_fail@plt+0x4f68>
   16318:	cmp	r3, #0
   1631c:	bne	16348 <__assert_fail@plt+0x4fbc>
   16320:	add	r4, r4, #2
   16324:	cmn	r4, #1
   16328:	bne	162c4 <__assert_fail@plt+0x4f38>
   1632c:	mov	r4, #0
   16330:	mov	r0, r4
   16334:	add	sp, sp, #44	; 0x2c
   16338:	ldrd	r4, [sp]
   1633c:	ldrd	r6, [sp, #8]
   16340:	add	sp, sp, #16
   16344:	pop	{pc}		; (ldr pc, [sp], #4)
   16348:	lsrs	r3, r4, #30
   1634c:	movne	r6, #1
   16350:	moveq	r6, #0
   16354:	tst	r4, #536870912	; 0x20000000
   16358:	bne	1632c <__assert_fail@plt+0x4fa0>
   1635c:	cmp	r6, #0
   16360:	bne	1632c <__assert_fail@plt+0x4fa0>
   16364:	ldr	r3, [r5, #8]
   16368:	cmp	r3, r4
   1636c:	beq	16414 <__assert_fail@plt+0x5088>
   16370:	mov	r1, #8
   16374:	mov	r0, r4
   16378:	bl	1c0c4 <__assert_fail@plt+0xad38>
   1637c:	cmp	r0, #0
   16380:	str	r0, [sp]
   16384:	beq	1632c <__assert_fail@plt+0x4fa0>
   16388:	add	r3, r0, r4, lsl #3
   1638c:	ldr	r7, [r5, #20]
   16390:	mov	r2, r6
   16394:	mov	r0, sp
   16398:	mov	r1, r5
   1639c:	ldr	lr, [r5, #28]
   163a0:	stmib	sp, {r3, r4, r6}
   163a4:	ldr	r4, [r5, #24]
   163a8:	strd	r6, [sp, #16]
   163ac:	ldr	ip, [r5, #32]
   163b0:	ldr	r3, [r5, #36]	; 0x24
   163b4:	str	r4, [sp, #24]
   163b8:	str	lr, [sp, #28]
   163bc:	str	ip, [sp, #32]
   163c0:	str	r3, [sp, #36]	; 0x24
   163c4:	bl	15668 <__assert_fail@plt+0x42dc>
   163c8:	subs	r4, r0, #0
   163cc:	bne	1641c <__assert_fail@plt+0x5090>
   163d0:	ldr	r3, [sp, #36]	; 0x24
   163d4:	mov	r2, #1
   163d8:	mov	r1, sp
   163dc:	mov	r0, r5
   163e0:	str	r3, [r5, #36]	; 0x24
   163e4:	bl	15668 <__assert_fail@plt+0x42dc>
   163e8:	cmp	r0, #0
   163ec:	beq	16448 <__assert_fail@plt+0x50bc>
   163f0:	mov	r1, sp
   163f4:	mov	r0, r5
   163f8:	mov	r2, r4
   163fc:	bl	15668 <__assert_fail@plt+0x42dc>
   16400:	cmp	r0, #0
   16404:	beq	16448 <__assert_fail@plt+0x50bc>
   16408:	ldr	r0, [sp]
   1640c:	bl	12dd8 <__assert_fail@plt+0x1a4c>
   16410:	b	16330 <__assert_fail@plt+0x4fa4>
   16414:	mov	r4, #1
   16418:	b	16330 <__assert_fail@plt+0x4fa4>
   1641c:	ldr	r0, [r5]
   16420:	bl	12dd8 <__assert_fail@plt+0x1a4c>
   16424:	ldrd	r2, [sp]
   16428:	ldr	r1, [sp, #8]
   1642c:	strd	r2, [r5]
   16430:	ldr	r2, [sp, #12]
   16434:	str	r1, [r5, #8]
   16438:	ldr	r3, [sp, #36]	; 0x24
   1643c:	str	r2, [r5, #12]
   16440:	str	r3, [r5, #36]	; 0x24
   16444:	b	16330 <__assert_fail@plt+0x4fa4>
   16448:	bl	11344 <abort@plt>
   1644c:	svcmi	0x00800000
   16450:	strd	r4, [sp, #-16]!
   16454:	str	r6, [sp, #8]
   16458:	subs	r6, r1, #0
   1645c:	str	lr, [sp, #12]
   16460:	sub	sp, sp, #8
   16464:	beq	165f0 <__assert_fail@plt+0x5264>
   16468:	mov	r3, #0
   1646c:	mov	r5, r2
   16470:	add	r2, sp, #4
   16474:	mov	r4, r0
   16478:	bl	15508 <__assert_fail@plt+0x417c>
   1647c:	subs	r3, r0, #0
   16480:	beq	164ac <__assert_fail@plt+0x5120>
   16484:	cmp	r5, #0
   16488:	moveq	r0, r5
   1648c:	beq	16498 <__assert_fail@plt+0x510c>
   16490:	mov	r0, #0
   16494:	str	r3, [r5]
   16498:	add	sp, sp, #8
   1649c:	ldrd	r4, [sp]
   164a0:	ldr	r6, [sp, #8]
   164a4:	add	sp, sp, #12
   164a8:	pop	{pc}		; (ldr pc, [sp], #4)
   164ac:	vldr	s15, [r4, #8]
   164b0:	vldr	s14, [r4, #12]
   164b4:	ldr	r3, [r4, #20]
   164b8:	vcvt.f32.u32	s15, s15
   164bc:	vcvt.f32.u32	s14, s14
   164c0:	vldr	s13, [r3, #8]
   164c4:	vmul.f32	s12, s13, s15
   164c8:	vcmpe.f32	s14, s12
   164cc:	vmrs	APSR_nzcv, fpscr
   164d0:	bgt	16518 <__assert_fail@plt+0x518c>
   164d4:	ldr	r2, [sp, #4]
   164d8:	ldr	r3, [r2]
   164dc:	cmp	r3, #0
   164e0:	beq	1661c <__assert_fail@plt+0x5290>
   164e4:	ldr	r3, [r4, #36]	; 0x24
   164e8:	cmp	r3, #0
   164ec:	beq	16640 <__assert_fail@plt+0x52b4>
   164f0:	ldr	r1, [r3, #4]
   164f4:	str	r1, [r4, #36]	; 0x24
   164f8:	ldr	r1, [r4, #16]
   164fc:	mov	r0, #1
   16500:	ldr	ip, [r2, #4]
   16504:	add	r1, r1, r0
   16508:	stm	r3, {r6, ip}
   1650c:	str	r3, [r2, #4]
   16510:	str	r1, [r4, #16]
   16514:	b	16498 <__assert_fail@plt+0x510c>
   16518:	movw	r2, #56620	; 0xdd2c
   1651c:	movt	r2, #1
   16520:	cmp	r3, r2
   16524:	beq	16658 <__assert_fail@plt+0x52cc>
   16528:	vldr	s12, [pc, #320]	; 16670 <__assert_fail@plt+0x52e4>
   1652c:	vcmpe.f32	s13, s12
   16530:	vmrs	APSR_nzcv, fpscr
   16534:	ble	165f4 <__assert_fail@plt+0x5268>
   16538:	vldr	s11, [pc, #308]	; 16674 <__assert_fail@plt+0x52e8>
   1653c:	vcmpe.f32	s13, s11
   16540:	vmrs	APSR_nzcv, fpscr
   16544:	bpl	165f4 <__assert_fail@plt+0x5268>
   16548:	vldr	s10, [pc, #296]	; 16678 <__assert_fail@plt+0x52ec>
   1654c:	vldr	s11, [r3, #12]
   16550:	vcmpe.f32	s11, s10
   16554:	vmrs	APSR_nzcv, fpscr
   16558:	ble	165f4 <__assert_fail@plt+0x5268>
   1655c:	vldr	s10, [r3]
   16560:	vcmpe.f32	s10, #0.0
   16564:	vmrs	APSR_nzcv, fpscr
   16568:	blt	165f4 <__assert_fail@plt+0x5268>
   1656c:	vadd.f32	s12, s10, s12
   16570:	vldr	s10, [r3, #4]
   16574:	vcmpe.f32	s12, s10
   16578:	vmrs	APSR_nzcv, fpscr
   1657c:	bpl	165f4 <__assert_fail@plt+0x5268>
   16580:	vldr	s9, [pc, #244]	; 1667c <__assert_fail@plt+0x52f0>
   16584:	vcmpe.f32	s10, s9
   16588:	vmrs	APSR_nzcv, fpscr
   1658c:	bhi	165f4 <__assert_fail@plt+0x5268>
   16590:	vcmpe.f32	s13, s12
   16594:	vmrs	APSR_nzcv, fpscr
   16598:	ble	165f4 <__assert_fail@plt+0x5268>
   1659c:	ldrb	r3, [r3, #16]
   165a0:	vmul.f32	s15, s15, s11
   165a4:	cmp	r3, #0
   165a8:	beq	16614 <__assert_fail@plt+0x5288>
   165ac:	vldr	s14, [pc, #204]	; 16680 <__assert_fail@plt+0x52f4>
   165b0:	vcmpe.f32	s15, s14
   165b4:	vmrs	APSR_nzcv, fpscr
   165b8:	bge	16650 <__assert_fail@plt+0x52c4>
   165bc:	vcvt.u32.f32	s15, s15
   165c0:	mov	r0, r4
   165c4:	vmov	r1, s15
   165c8:	bl	1625c <__assert_fail@plt+0x4ed0>
   165cc:	cmp	r0, #0
   165d0:	beq	16650 <__assert_fail@plt+0x52c4>
   165d4:	add	r2, sp, #4
   165d8:	mov	r3, #0
   165dc:	mov	r1, r6
   165e0:	mov	r0, r4
   165e4:	bl	15508 <__assert_fail@plt+0x417c>
   165e8:	cmp	r0, #0
   165ec:	beq	164d4 <__assert_fail@plt+0x5148>
   165f0:	bl	11344 <abort@plt>
   165f4:	vldr	s13, [pc, #136]	; 16684 <__assert_fail@plt+0x52f8>
   165f8:	str	r2, [r4, #20]
   165fc:	vmul.f32	s12, s15, s13
   16600:	vcmpe.f32	s14, s12
   16604:	vmrs	APSR_nzcv, fpscr
   16608:	ble	164d4 <__assert_fail@plt+0x5148>
   1660c:	vldr	s14, [pc, #116]	; 16688 <__assert_fail@plt+0x52fc>
   16610:	vmul.f32	s15, s15, s14
   16614:	vmul.f32	s15, s15, s13
   16618:	b	165ac <__assert_fail@plt+0x5220>
   1661c:	ldr	r1, [r4, #12]
   16620:	mov	r0, #1
   16624:	ldr	r3, [r4, #16]
   16628:	str	r6, [r2]
   1662c:	add	r2, r1, r0
   16630:	add	r3, r3, r0
   16634:	str	r2, [r4, #12]
   16638:	str	r3, [r4, #16]
   1663c:	b	16498 <__assert_fail@plt+0x510c>
   16640:	mov	r0, #8
   16644:	bl	1c138 <__assert_fail@plt+0xadac>
   16648:	subs	r3, r0, #0
   1664c:	bne	16668 <__assert_fail@plt+0x52dc>
   16650:	mvn	r0, #0
   16654:	b	16498 <__assert_fail@plt+0x510c>
   16658:	vldr	s14, [pc, #40]	; 16688 <__assert_fail@plt+0x52fc>
   1665c:	vldr	s13, [pc, #32]	; 16684 <__assert_fail@plt+0x52f8>
   16660:	vmul.f32	s15, s15, s14
   16664:	b	16614 <__assert_fail@plt+0x5288>
   16668:	ldr	r2, [sp, #4]
   1666c:	b	164f8 <__assert_fail@plt+0x516c>
   16670:	stclcc	12, cr12, [ip, #820]	; 0x334
   16674:	svccc	0x00666666
   16678:	svccc	0x008ccccd
   1667c:	svccc	0x00800000
   16680:	svcmi	0x00800000
   16684:	svccc	0x004ccccd
   16688:	svccc	0x00b4fdf4
   1668c:	strd	r4, [sp, #-16]!
   16690:	str	r6, [sp, #8]
   16694:	subs	r6, r1, #0
   16698:	str	lr, [sp, #12]
   1669c:	sub	sp, sp, #8
   166a0:	beq	1681c <__assert_fail@plt+0x5490>
   166a4:	mov	r3, #0
   166a8:	add	r2, sp, #4
   166ac:	mov	r4, r0
   166b0:	bl	15508 <__assert_fail@plt+0x417c>
   166b4:	subs	r5, r0, #0
   166b8:	beq	166d4 <__assert_fail@plt+0x5348>
   166bc:	mov	r0, r5
   166c0:	add	sp, sp, #8
   166c4:	ldrd	r4, [sp]
   166c8:	ldr	r6, [sp, #8]
   166cc:	add	sp, sp, #12
   166d0:	pop	{pc}		; (ldr pc, [sp], #4)
   166d4:	vldr	s15, [r4, #8]
   166d8:	vldr	s14, [r4, #12]
   166dc:	ldr	r3, [r4, #20]
   166e0:	vcvt.f32.u32	s15, s15
   166e4:	vcvt.f32.u32	s14, s14
   166e8:	vldr	s13, [r3, #8]
   166ec:	vmul.f32	s12, s13, s15
   166f0:	vcmpe.f32	s14, s12
   166f4:	vmrs	APSR_nzcv, fpscr
   166f8:	bgt	16744 <__assert_fail@plt+0x53b8>
   166fc:	ldr	r3, [sp, #4]
   16700:	ldr	r2, [r3]
   16704:	cmp	r2, #0
   16708:	beq	16848 <__assert_fail@plt+0x54bc>
   1670c:	ldr	r0, [r4, #36]	; 0x24
   16710:	cmp	r0, #0
   16714:	beq	1686c <__assert_fail@plt+0x54e0>
   16718:	ldr	r2, [r0, #4]
   1671c:	str	r2, [r4, #36]	; 0x24
   16720:	ldr	r2, [r4, #16]
   16724:	mov	r5, r6
   16728:	ldr	r1, [r3, #4]
   1672c:	str	r6, [r0]
   16730:	add	r2, r2, #1
   16734:	str	r1, [r0, #4]
   16738:	str	r0, [r3, #4]
   1673c:	str	r2, [r4, #16]
   16740:	b	166bc <__assert_fail@plt+0x5330>
   16744:	movw	r2, #56620	; 0xdd2c
   16748:	movt	r2, #1
   1674c:	cmp	r3, r2
   16750:	beq	16884 <__assert_fail@plt+0x54f8>
   16754:	vldr	s12, [pc, #312]	; 16894 <__assert_fail@plt+0x5508>
   16758:	vcmpe.f32	s13, s12
   1675c:	vmrs	APSR_nzcv, fpscr
   16760:	ble	16820 <__assert_fail@plt+0x5494>
   16764:	vldr	s11, [pc, #300]	; 16898 <__assert_fail@plt+0x550c>
   16768:	vcmpe.f32	s13, s11
   1676c:	vmrs	APSR_nzcv, fpscr
   16770:	bpl	16820 <__assert_fail@plt+0x5494>
   16774:	vldr	s10, [pc, #288]	; 1689c <__assert_fail@plt+0x5510>
   16778:	vldr	s11, [r3, #12]
   1677c:	vcmpe.f32	s11, s10
   16780:	vmrs	APSR_nzcv, fpscr
   16784:	ble	16820 <__assert_fail@plt+0x5494>
   16788:	vldr	s10, [r3]
   1678c:	vcmpe.f32	s10, #0.0
   16790:	vmrs	APSR_nzcv, fpscr
   16794:	blt	16820 <__assert_fail@plt+0x5494>
   16798:	vadd.f32	s12, s10, s12
   1679c:	vldr	s10, [r3, #4]
   167a0:	vcmpe.f32	s12, s10
   167a4:	vmrs	APSR_nzcv, fpscr
   167a8:	bpl	16820 <__assert_fail@plt+0x5494>
   167ac:	vldr	s9, [pc, #236]	; 168a0 <__assert_fail@plt+0x5514>
   167b0:	vcmpe.f32	s10, s9
   167b4:	vmrs	APSR_nzcv, fpscr
   167b8:	bhi	16820 <__assert_fail@plt+0x5494>
   167bc:	vcmpe.f32	s13, s12
   167c0:	vmrs	APSR_nzcv, fpscr
   167c4:	ble	16820 <__assert_fail@plt+0x5494>
   167c8:	ldrb	r3, [r3, #16]
   167cc:	vmul.f32	s15, s15, s11
   167d0:	cmp	r3, #0
   167d4:	beq	16840 <__assert_fail@plt+0x54b4>
   167d8:	vldr	s14, [pc, #196]	; 168a4 <__assert_fail@plt+0x5518>
   167dc:	vcmpe.f32	s15, s14
   167e0:	vmrs	APSR_nzcv, fpscr
   167e4:	bge	166bc <__assert_fail@plt+0x5330>
   167e8:	vcvt.u32.f32	s15, s15
   167ec:	mov	r0, r4
   167f0:	vmov	r1, s15
   167f4:	bl	1625c <__assert_fail@plt+0x4ed0>
   167f8:	cmp	r0, #0
   167fc:	beq	166bc <__assert_fail@plt+0x5330>
   16800:	add	r2, sp, #4
   16804:	mov	r3, #0
   16808:	mov	r1, r6
   1680c:	mov	r0, r4
   16810:	bl	15508 <__assert_fail@plt+0x417c>
   16814:	cmp	r0, #0
   16818:	beq	166fc <__assert_fail@plt+0x5370>
   1681c:	bl	11344 <abort@plt>
   16820:	vldr	s13, [pc, #128]	; 168a8 <__assert_fail@plt+0x551c>
   16824:	str	r2, [r4, #20]
   16828:	vmul.f32	s12, s15, s13
   1682c:	vcmpe.f32	s14, s12
   16830:	vmrs	APSR_nzcv, fpscr
   16834:	ble	166fc <__assert_fail@plt+0x5370>
   16838:	vldr	s14, [pc, #108]	; 168ac <__assert_fail@plt+0x5520>
   1683c:	vmul.f32	s15, s15, s14
   16840:	vmul.f32	s15, s15, s13
   16844:	b	167d8 <__assert_fail@plt+0x544c>
   16848:	ldr	r2, [r4, #12]
   1684c:	mov	r5, r6
   16850:	str	r6, [r3]
   16854:	ldr	r3, [r4, #16]
   16858:	add	r2, r2, #1
   1685c:	add	r3, r3, #1
   16860:	str	r2, [r4, #12]
   16864:	str	r3, [r4, #16]
   16868:	b	166bc <__assert_fail@plt+0x5330>
   1686c:	mov	r0, #8
   16870:	bl	1c138 <__assert_fail@plt+0xadac>
   16874:	cmp	r0, #0
   16878:	beq	166bc <__assert_fail@plt+0x5330>
   1687c:	ldr	r3, [sp, #4]
   16880:	b	16720 <__assert_fail@plt+0x5394>
   16884:	vldr	s14, [pc, #32]	; 168ac <__assert_fail@plt+0x5520>
   16888:	vldr	s13, [pc, #24]	; 168a8 <__assert_fail@plt+0x551c>
   1688c:	vmul.f32	s15, s15, s14
   16890:	b	16840 <__assert_fail@plt+0x54b4>
   16894:	stclcc	12, cr12, [ip, #820]	; 0x334
   16898:	svccc	0x00666666
   1689c:	svccc	0x008ccccd
   168a0:	svccc	0x00800000
   168a4:	svcmi	0x00800000
   168a8:	svccc	0x004ccccd
   168ac:	svccc	0x00b4fdf4
   168b0:	strd	r4, [sp, #-16]!
   168b4:	mov	r3, #1
   168b8:	mov	r4, r0
   168bc:	str	r6, [sp, #8]
   168c0:	str	lr, [sp, #12]
   168c4:	sub	sp, sp, #8
   168c8:	add	r2, sp, #4
   168cc:	bl	15508 <__assert_fail@plt+0x417c>
   168d0:	subs	r5, r0, #0
   168d4:	beq	168f4 <__assert_fail@plt+0x5568>
   168d8:	ldr	r2, [sp, #4]
   168dc:	ldr	r3, [r4, #16]
   168e0:	ldr	r2, [r2]
   168e4:	sub	r3, r3, #1
   168e8:	str	r3, [r4, #16]
   168ec:	cmp	r2, #0
   168f0:	beq	1690c <__assert_fail@plt+0x5580>
   168f4:	mov	r0, r5
   168f8:	add	sp, sp, #8
   168fc:	ldrd	r4, [sp]
   16900:	ldr	r6, [sp, #8]
   16904:	add	sp, sp, #12
   16908:	pop	{pc}		; (ldr pc, [sp], #4)
   1690c:	vldr	s15, [r4, #8]
   16910:	ldr	r3, [r4, #12]
   16914:	ldr	r2, [r4, #20]
   16918:	vcvt.f32.u32	s15, s15
   1691c:	sub	r3, r3, #1
   16920:	vmov	s14, r3
   16924:	vldr	s13, [r2]
   16928:	str	r3, [r4, #12]
   1692c:	vmul.f32	s12, s13, s15
   16930:	vcvt.f32.u32	s14, s14
   16934:	vcmpe.f32	s14, s12
   16938:	vmrs	APSR_nzcv, fpscr
   1693c:	bpl	168f4 <__assert_fail@plt+0x5568>
   16940:	movw	r3, #56620	; 0xdd2c
   16944:	movt	r3, #1
   16948:	cmp	r2, r3
   1694c:	beq	16a2c <__assert_fail@plt+0x56a0>
   16950:	vldr	s11, [pc, #224]	; 16a38 <__assert_fail@plt+0x56ac>
   16954:	vldr	s12, [r2, #8]
   16958:	vcmpe.f32	s12, s11
   1695c:	vmrs	APSR_nzcv, fpscr
   16960:	ble	16a14 <__assert_fail@plt+0x5688>
   16964:	vldr	s10, [pc, #208]	; 16a3c <__assert_fail@plt+0x56b0>
   16968:	vcmpe.f32	s12, s10
   1696c:	vmrs	APSR_nzcv, fpscr
   16970:	bpl	16a14 <__assert_fail@plt+0x5688>
   16974:	vldr	s10, [pc, #196]	; 16a40 <__assert_fail@plt+0x56b4>
   16978:	vldr	s9, [r2, #12]
   1697c:	vcmpe.f32	s9, s10
   16980:	vmrs	APSR_nzcv, fpscr
   16984:	ble	16a14 <__assert_fail@plt+0x5688>
   16988:	vcmpe.f32	s13, #0.0
   1698c:	vmrs	APSR_nzcv, fpscr
   16990:	blt	16a14 <__assert_fail@plt+0x5688>
   16994:	vadd.f32	s13, s13, s11
   16998:	vldr	s11, [r2, #4]
   1699c:	vcmpe.f32	s13, s11
   169a0:	vmrs	APSR_nzcv, fpscr
   169a4:	bpl	16a14 <__assert_fail@plt+0x5688>
   169a8:	vldr	s10, [pc, #148]	; 16a44 <__assert_fail@plt+0x56b8>
   169ac:	vcmpe.f32	s11, s10
   169b0:	vmrs	APSR_nzcv, fpscr
   169b4:	bhi	16a14 <__assert_fail@plt+0x5688>
   169b8:	vcmpe.f32	s12, s13
   169bc:	vmrs	APSR_nzcv, fpscr
   169c0:	ble	16a14 <__assert_fail@plt+0x5688>
   169c4:	ldrb	r3, [r2, #16]
   169c8:	vmul.f32	s15, s15, s11
   169cc:	cmp	r3, #0
   169d0:	beq	16a30 <__assert_fail@plt+0x56a4>
   169d4:	vcvt.u32.f32	s15, s15
   169d8:	mov	r0, r4
   169dc:	vmov	r1, s15
   169e0:	bl	1625c <__assert_fail@plt+0x4ed0>
   169e4:	cmp	r0, #0
   169e8:	bne	168f4 <__assert_fail@plt+0x5568>
   169ec:	ldr	r0, [r4, #36]	; 0x24
   169f0:	cmp	r0, #0
   169f4:	beq	16a08 <__assert_fail@plt+0x567c>
   169f8:	ldr	r6, [r0, #4]
   169fc:	bl	12dd8 <__assert_fail@plt+0x1a4c>
   16a00:	subs	r0, r6, #0
   16a04:	bne	169f8 <__assert_fail@plt+0x566c>
   16a08:	mov	r3, #0
   16a0c:	str	r3, [r4, #36]	; 0x24
   16a10:	b	168f4 <__assert_fail@plt+0x5568>
   16a14:	vldr	s13, [pc, #44]	; 16a48 <__assert_fail@plt+0x56bc>
   16a18:	str	r3, [r4, #20]
   16a1c:	vmul.f32	s13, s15, s13
   16a20:	vcmpe.f32	s14, s13
   16a24:	vmrs	APSR_nzcv, fpscr
   16a28:	bpl	168f4 <__assert_fail@plt+0x5568>
   16a2c:	vldr	s12, [pc, #24]	; 16a4c <__assert_fail@plt+0x56c0>
   16a30:	vmul.f32	s15, s15, s12
   16a34:	b	169d4 <__assert_fail@plt+0x5648>
   16a38:	stclcc	12, cr12, [ip, #820]	; 0x334
   16a3c:	svccc	0x00666666
   16a40:	svccc	0x008ccccd
   16a44:	svccc	0x00800000
   16a48:	andeq	r0, r0, r0
   16a4c:	svccc	0x004ccccd
   16a50:	strd	r4, [sp, #-16]!
   16a54:	mov	r3, #1
   16a58:	mov	r4, r0
   16a5c:	str	r6, [sp, #8]
   16a60:	str	lr, [sp, #12]
   16a64:	sub	sp, sp, #8
   16a68:	add	r2, sp, #4
   16a6c:	bl	15508 <__assert_fail@plt+0x417c>
   16a70:	subs	r5, r0, #0
   16a74:	beq	16a94 <__assert_fail@plt+0x5708>
   16a78:	ldr	r2, [sp, #4]
   16a7c:	ldr	r3, [r4, #16]
   16a80:	ldr	r2, [r2]
   16a84:	sub	r3, r3, #1
   16a88:	str	r3, [r4, #16]
   16a8c:	cmp	r2, #0
   16a90:	beq	16aac <__assert_fail@plt+0x5720>
   16a94:	mov	r0, r5
   16a98:	add	sp, sp, #8
   16a9c:	ldrd	r4, [sp]
   16aa0:	ldr	r6, [sp, #8]
   16aa4:	add	sp, sp, #12
   16aa8:	pop	{pc}		; (ldr pc, [sp], #4)
   16aac:	vldr	s15, [r4, #8]
   16ab0:	ldr	r3, [r4, #12]
   16ab4:	ldr	r2, [r4, #20]
   16ab8:	vcvt.f32.u32	s15, s15
   16abc:	sub	r3, r3, #1
   16ac0:	vmov	s14, r3
   16ac4:	vldr	s13, [r2]
   16ac8:	str	r3, [r4, #12]
   16acc:	vmul.f32	s12, s13, s15
   16ad0:	vcvt.f32.u32	s14, s14
   16ad4:	vcmpe.f32	s14, s12
   16ad8:	vmrs	APSR_nzcv, fpscr
   16adc:	bpl	16a94 <__assert_fail@plt+0x5708>
   16ae0:	movw	r3, #56620	; 0xdd2c
   16ae4:	movt	r3, #1
   16ae8:	cmp	r2, r3
   16aec:	beq	16bcc <__assert_fail@plt+0x5840>
   16af0:	vldr	s11, [pc, #224]	; 16bd8 <__assert_fail@plt+0x584c>
   16af4:	vldr	s12, [r2, #8]
   16af8:	vcmpe.f32	s12, s11
   16afc:	vmrs	APSR_nzcv, fpscr
   16b00:	ble	16bb4 <__assert_fail@plt+0x5828>
   16b04:	vldr	s10, [pc, #208]	; 16bdc <__assert_fail@plt+0x5850>
   16b08:	vcmpe.f32	s12, s10
   16b0c:	vmrs	APSR_nzcv, fpscr
   16b10:	bpl	16bb4 <__assert_fail@plt+0x5828>
   16b14:	vldr	s10, [pc, #196]	; 16be0 <__assert_fail@plt+0x5854>
   16b18:	vldr	s9, [r2, #12]
   16b1c:	vcmpe.f32	s9, s10
   16b20:	vmrs	APSR_nzcv, fpscr
   16b24:	ble	16bb4 <__assert_fail@plt+0x5828>
   16b28:	vcmpe.f32	s13, #0.0
   16b2c:	vmrs	APSR_nzcv, fpscr
   16b30:	blt	16bb4 <__assert_fail@plt+0x5828>
   16b34:	vadd.f32	s13, s13, s11
   16b38:	vldr	s11, [r2, #4]
   16b3c:	vcmpe.f32	s13, s11
   16b40:	vmrs	APSR_nzcv, fpscr
   16b44:	bpl	16bb4 <__assert_fail@plt+0x5828>
   16b48:	vldr	s10, [pc, #148]	; 16be4 <__assert_fail@plt+0x5858>
   16b4c:	vcmpe.f32	s11, s10
   16b50:	vmrs	APSR_nzcv, fpscr
   16b54:	bhi	16bb4 <__assert_fail@plt+0x5828>
   16b58:	vcmpe.f32	s12, s13
   16b5c:	vmrs	APSR_nzcv, fpscr
   16b60:	ble	16bb4 <__assert_fail@plt+0x5828>
   16b64:	ldrb	r3, [r2, #16]
   16b68:	vmul.f32	s15, s15, s11
   16b6c:	cmp	r3, #0
   16b70:	beq	16bd0 <__assert_fail@plt+0x5844>
   16b74:	vcvt.u32.f32	s15, s15
   16b78:	mov	r0, r4
   16b7c:	vmov	r1, s15
   16b80:	bl	1625c <__assert_fail@plt+0x4ed0>
   16b84:	cmp	r0, #0
   16b88:	bne	16a94 <__assert_fail@plt+0x5708>
   16b8c:	ldr	r0, [r4, #36]	; 0x24
   16b90:	cmp	r0, #0
   16b94:	beq	16ba8 <__assert_fail@plt+0x581c>
   16b98:	ldr	r6, [r0, #4]
   16b9c:	bl	12dd8 <__assert_fail@plt+0x1a4c>
   16ba0:	subs	r0, r6, #0
   16ba4:	bne	16b98 <__assert_fail@plt+0x580c>
   16ba8:	mov	r3, #0
   16bac:	str	r3, [r4, #36]	; 0x24
   16bb0:	b	16a94 <__assert_fail@plt+0x5708>
   16bb4:	vldr	s13, [pc, #44]	; 16be8 <__assert_fail@plt+0x585c>
   16bb8:	str	r3, [r4, #20]
   16bbc:	vmul.f32	s13, s15, s13
   16bc0:	vcmpe.f32	s14, s13
   16bc4:	vmrs	APSR_nzcv, fpscr
   16bc8:	bpl	16a94 <__assert_fail@plt+0x5708>
   16bcc:	vldr	s12, [pc, #24]	; 16bec <__assert_fail@plt+0x5860>
   16bd0:	vmul.f32	s15, s15, s12
   16bd4:	b	16b74 <__assert_fail@plt+0x57e8>
   16bd8:	stclcc	12, cr12, [ip, #820]	; 0x334
   16bdc:	svccc	0x00666666
   16be0:	svccc	0x008ccccd
   16be4:	svccc	0x00800000
   16be8:	andeq	r0, r0, r0
   16bec:	svccc	0x004ccccd
   16bf0:	mov	r3, #0
   16bf4:	mov	r2, #1
   16bf8:	str	r1, [r0]
   16bfc:	str	r1, [r0, #4]
   16c00:	str	r1, [r0, #8]
   16c04:	str	r1, [r0, #12]
   16c08:	str	r1, [r0, #16]
   16c0c:	str	r3, [r0, #20]
   16c10:	str	r3, [r0, #24]
   16c14:	strb	r2, [r0, #28]
   16c18:	bx	lr
   16c1c:	ldrb	r0, [r0, #28]
   16c20:	bx	lr
   16c24:	ldrb	ip, [r0, #28]
   16c28:	mov	r2, r0
   16c2c:	ldr	r3, [r0, #20]
   16c30:	eor	ip, ip, #1
   16c34:	add	r3, ip, r3
   16c38:	and	r3, r3, #3
   16c3c:	ldr	r0, [r0, r3, lsl #2]
   16c40:	str	r1, [r2, r3, lsl #2]
   16c44:	ldr	r1, [r2, #24]
   16c48:	str	r3, [r2, #20]
   16c4c:	cmp	r1, r3
   16c50:	bne	16c60 <__assert_fail@plt+0x58d4>
   16c54:	add	ip, ip, r1
   16c58:	and	ip, ip, #3
   16c5c:	str	ip, [r2, #24]
   16c60:	mov	r3, #0
   16c64:	strb	r3, [r2, #28]
   16c68:	bx	lr
   16c6c:	ldrb	r3, [r0, #28]
   16c70:	cmp	r3, #0
   16c74:	bne	16cb0 <__assert_fail@plt+0x5924>
   16c78:	ldr	r1, [r0, #16]
   16c7c:	ldr	r3, [r0, #20]
   16c80:	ldr	r2, [r0, r3, lsl #2]
   16c84:	str	r1, [r0, r3, lsl #2]
   16c88:	ldr	r1, [r0, #24]
   16c8c:	cmp	r3, r1
   16c90:	moveq	r3, #1
   16c94:	strbeq	r3, [r0, #28]
   16c98:	beq	16ca8 <__assert_fail@plt+0x591c>
   16c9c:	add	r3, r3, #3
   16ca0:	and	r3, r3, #3
   16ca4:	str	r3, [r0, #20]
   16ca8:	mov	r0, r2
   16cac:	bx	lr
   16cb0:	str	r4, [sp, #-8]!
   16cb4:	str	lr, [sp, #4]
   16cb8:	bl	11344 <abort@plt>
   16cbc:	mov	r3, #0
   16cc0:	strd	r4, [sp, #-16]!
   16cc4:	mov	r4, r0
   16cc8:	mov	r5, r1
   16ccc:	str	r6, [sp, #8]
   16cd0:	add	r6, r2, #20
   16cd4:	str	lr, [sp, #12]
   16cd8:	strb	r3, [r2, #20]
   16cdc:	mov	r0, r4
   16ce0:	mov	r1, r5
   16ce4:	mov	r2, #10
   16ce8:	mov	r3, #0
   16cec:	bl	1c99c <__assert_fail@plt+0xb610>
   16cf0:	add	ip, r2, #48	; 0x30
   16cf4:	mov	r0, r4
   16cf8:	mov	r1, r5
   16cfc:	mov	r2, #10
   16d00:	mov	r3, #0
   16d04:	strb	ip, [r6, #-1]!
   16d08:	bl	1c99c <__assert_fail@plt+0xb610>
   16d0c:	cmp	r5, #0
   16d10:	mov	r5, r1
   16d14:	cmpeq	r4, #9
   16d18:	mov	r4, r0
   16d1c:	bhi	16cdc <__assert_fail@plt+0x5950>
   16d20:	mov	r0, r6
   16d24:	ldrd	r4, [sp]
   16d28:	ldr	r6, [sp, #8]
   16d2c:	add	sp, sp, #12
   16d30:	pop	{pc}		; (ldr pc, [sp], #4)
   16d34:	push	{r2, r3}
   16d38:	push	{lr}		; (str lr, [sp, #-4]!)
   16d3c:	sub	sp, sp, #12
   16d40:	ldr	r2, [sp, #16]
   16d44:	ands	r3, r2, #64	; 0x40
   16d48:	bne	16d64 <__assert_fail@plt+0x59d8>
   16d4c:	bl	11224 <openat64@plt>
   16d50:	bl	1a938 <__assert_fail@plt+0x95ac>
   16d54:	add	sp, sp, #12
   16d58:	pop	{lr}		; (ldr lr, [sp], #4)
   16d5c:	add	sp, sp, #8
   16d60:	bx	lr
   16d64:	add	ip, sp, #20
   16d68:	ldr	r3, [sp, #20]
   16d6c:	str	ip, [sp, #4]
   16d70:	b	16d4c <__assert_fail@plt+0x59c0>
   16d74:	orr	r2, r2, #540672	; 0x84000
   16d78:	strd	r4, [sp, #-16]!
   16d7c:	orr	r2, r2, #2304	; 0x900
   16d80:	str	r6, [sp, #8]
   16d84:	mov	r6, r3
   16d88:	str	lr, [sp, #12]
   16d8c:	bl	16d34 <__assert_fail@plt+0x59a8>
   16d90:	subs	r5, r0, #0
   16d94:	movlt	r4, #0
   16d98:	blt	16dac <__assert_fail@plt+0x5a20>
   16d9c:	bl	112e4 <fdopendir@plt>
   16da0:	subs	r4, r0, #0
   16da4:	beq	16dc0 <__assert_fail@plt+0x5a34>
   16da8:	str	r5, [r6]
   16dac:	mov	r0, r4
   16db0:	ldrd	r4, [sp]
   16db4:	ldr	r6, [sp, #8]
   16db8:	add	sp, sp, #12
   16dbc:	pop	{pc}		; (ldr pc, [sp], #4)
   16dc0:	bl	1123c <__errno_location@plt>
   16dc4:	mov	r6, r0
   16dc8:	mov	r0, r5
   16dcc:	ldr	r5, [r6]
   16dd0:	bl	11350 <close@plt>
   16dd4:	b	16da8 <__assert_fail@plt+0x5a1c>
   16dd8:	strd	r4, [sp, #-16]!
   16ddc:	subs	r4, r0, #0
   16de0:	str	r6, [sp, #8]
   16de4:	str	lr, [sp, #12]
   16de8:	beq	16e80 <__assert_fail@plt+0x5af4>
   16dec:	mov	r1, #47	; 0x2f
   16df0:	bl	112c0 <strrchr@plt>
   16df4:	subs	r5, r0, #0
   16df8:	beq	16e58 <__assert_fail@plt+0x5acc>
   16dfc:	add	r6, r5, #1
   16e00:	sub	r3, r6, r4
   16e04:	cmp	r3, #6
   16e08:	ble	16e58 <__assert_fail@plt+0x5acc>
   16e0c:	movw	r1, #56804	; 0xdde4
   16e10:	movt	r1, #1
   16e14:	mov	r2, #7
   16e18:	sub	r0, r5, #6
   16e1c:	bl	11338 <strncmp@plt>
   16e20:	cmp	r0, #0
   16e24:	bne	16e58 <__assert_fail@plt+0x5acc>
   16e28:	movw	r1, #56812	; 0xddec
   16e2c:	movt	r1, #1
   16e30:	mov	r2, #3
   16e34:	mov	r0, r6
   16e38:	bl	11338 <strncmp@plt>
   16e3c:	cmp	r0, #0
   16e40:	movne	r4, r6
   16e44:	bne	16e58 <__assert_fail@plt+0x5acc>
   16e48:	add	r4, r5, #4
   16e4c:	movw	r3, #61832	; 0xf188
   16e50:	movt	r3, #2
   16e54:	str	r4, [r3]
   16e58:	movw	r2, #61896	; 0xf1c8
   16e5c:	movt	r2, #2
   16e60:	ldr	r6, [sp, #8]
   16e64:	movw	r3, #61836	; 0xf18c
   16e68:	movt	r3, #2
   16e6c:	str	r4, [r2]
   16e70:	str	r4, [r3]
   16e74:	ldrd	r4, [sp]
   16e78:	add	sp, sp, #12
   16e7c:	pop	{pc}		; (ldr pc, [sp], #4)
   16e80:	movw	r3, #61848	; 0xf198
   16e84:	movt	r3, #2
   16e88:	movw	r0, #56748	; 0xddac
   16e8c:	movt	r0, #1
   16e90:	ldr	r3, [r3]
   16e94:	mov	r2, #55	; 0x37
   16e98:	mov	r1, #1
   16e9c:	bl	1114c <fwrite@plt>
   16ea0:	bl	11344 <abort@plt>
   16ea4:	mov	r2, #5
   16ea8:	strd	r4, [sp, #-16]!
   16eac:	mov	r5, r0
   16eb0:	str	r6, [sp, #8]
   16eb4:	mov	r6, r1
   16eb8:	mov	r1, r0
   16ebc:	mov	r0, #0
   16ec0:	str	lr, [sp, #12]
   16ec4:	bl	11104 <dcgettext@plt>
   16ec8:	cmp	r5, r0
   16ecc:	mov	r4, r0
   16ed0:	beq	16ee8 <__assert_fail@plt+0x5b5c>
   16ed4:	mov	r0, r4
   16ed8:	ldrd	r4, [sp]
   16edc:	ldr	r6, [sp, #8]
   16ee0:	add	sp, sp, #12
   16ee4:	pop	{pc}		; (ldr pc, [sp], #4)
   16ee8:	bl	1c780 <__assert_fail@plt+0xb3f4>
   16eec:	ldrb	r3, [r0]
   16ef0:	bic	r3, r3, #32
   16ef4:	cmp	r3, #85	; 0x55
   16ef8:	bne	16f60 <__assert_fail@plt+0x5bd4>
   16efc:	ldrb	r3, [r0, #1]
   16f00:	bic	r3, r3, #32
   16f04:	cmp	r3, #84	; 0x54
   16f08:	bne	16fe0 <__assert_fail@plt+0x5c54>
   16f0c:	ldrb	r3, [r0, #2]
   16f10:	bic	r3, r3, #32
   16f14:	cmp	r3, #70	; 0x46
   16f18:	bne	16fe0 <__assert_fail@plt+0x5c54>
   16f1c:	ldrb	r3, [r0, #3]
   16f20:	cmp	r3, #45	; 0x2d
   16f24:	bne	16fe0 <__assert_fail@plt+0x5c54>
   16f28:	ldrb	r3, [r0, #4]
   16f2c:	cmp	r3, #56	; 0x38
   16f30:	bne	16fe0 <__assert_fail@plt+0x5c54>
   16f34:	ldrb	r3, [r0, #5]
   16f38:	cmp	r3, #0
   16f3c:	bne	16fe0 <__assert_fail@plt+0x5c54>
   16f40:	ldrb	r2, [r4]
   16f44:	movw	r3, #56904	; 0xde48
   16f48:	movt	r3, #1
   16f4c:	movw	r4, #56916	; 0xde54
   16f50:	movt	r4, #1
   16f54:	cmp	r2, #96	; 0x60
   16f58:	movne	r4, r3
   16f5c:	b	16ed4 <__assert_fail@plt+0x5b48>
   16f60:	cmp	r3, #71	; 0x47
   16f64:	bne	16fe0 <__assert_fail@plt+0x5c54>
   16f68:	ldrb	r3, [r0, #1]
   16f6c:	bic	r3, r3, #32
   16f70:	cmp	r3, #66	; 0x42
   16f74:	bne	16fe0 <__assert_fail@plt+0x5c54>
   16f78:	ldrb	r3, [r0, #2]
   16f7c:	cmp	r3, #49	; 0x31
   16f80:	bne	16fe0 <__assert_fail@plt+0x5c54>
   16f84:	ldrb	r3, [r0, #3]
   16f88:	cmp	r3, #56	; 0x38
   16f8c:	bne	16fe0 <__assert_fail@plt+0x5c54>
   16f90:	ldrb	r3, [r0, #4]
   16f94:	cmp	r3, #48	; 0x30
   16f98:	bne	16fe0 <__assert_fail@plt+0x5c54>
   16f9c:	ldrb	r3, [r0, #5]
   16fa0:	cmp	r3, #51	; 0x33
   16fa4:	bne	16fe0 <__assert_fail@plt+0x5c54>
   16fa8:	ldrb	r3, [r0, #6]
   16fac:	cmp	r3, #48	; 0x30
   16fb0:	bne	16fe0 <__assert_fail@plt+0x5c54>
   16fb4:	ldrb	r3, [r0, #7]
   16fb8:	cmp	r3, #0
   16fbc:	bne	16fe0 <__assert_fail@plt+0x5c54>
   16fc0:	ldrb	r2, [r4]
   16fc4:	movw	r3, #56908	; 0xde4c
   16fc8:	movt	r3, #1
   16fcc:	movw	r4, #56912	; 0xde50
   16fd0:	movt	r4, #1
   16fd4:	cmp	r2, #96	; 0x60
   16fd8:	movne	r4, r3
   16fdc:	b	16ed4 <__assert_fail@plt+0x5b48>
   16fe0:	movw	r3, #56920	; 0xde58
   16fe4:	movt	r3, #1
   16fe8:	cmp	r6, #9
   16fec:	movw	r4, #56900	; 0xde44
   16ff0:	movt	r4, #1
   16ff4:	movne	r4, r3
   16ff8:	b	16ed4 <__assert_fail@plt+0x5b48>
   16ffc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   17000:	strd	r6, [sp, #8]
   17004:	strd	r8, [sp, #16]
   17008:	mov	r8, r3
   1700c:	strd	sl, [sp, #24]
   17010:	mov	fp, r0
   17014:	mov	sl, r1
   17018:	str	lr, [sp, #32]
   1701c:	sub	sp, sp, #140	; 0x8c
   17020:	ldr	r3, [sp, #180]	; 0xb4
   17024:	str	r2, [sp, #28]
   17028:	and	r4, r3, #2
   1702c:	ubfx	r3, r3, #1, #1
   17030:	str	r3, [sp, #44]	; 0x2c
   17034:	bl	11164 <__ctype_get_mb_cur_max@plt>
   17038:	ldr	r3, [sp, #176]	; 0xb0
   1703c:	str	r0, [sp, #76]	; 0x4c
   17040:	cmp	r3, #10
   17044:	ldrls	pc, [pc, r3, lsl #2]
   17048:	b	189e4 <__assert_fail@plt+0x7658>
   1704c:	andeq	r7, r1, ip, asr #9
   17050:	andeq	r7, r1, r8, ror #11
   17054:	andeq	r7, r1, r4, ror #22
   17058:	andeq	r7, r1, r4, asr r6
   1705c:	ldrdeq	r7, [r1], -r4
   17060:	andeq	r7, r1, r0, asr r4
   17064:	andeq	r7, r1, r8, lsr #10
   17068:	muleq	r1, r0, r5
   1706c:	andeq	r7, r1, r8, ror r0
   17070:	andeq	r7, r1, r8, ror r0
   17074:	andeq	r7, r1, r8, ror r0
   17078:	ldr	r3, [sp, #176]	; 0xb0
   1707c:	cmp	r3, #10
   17080:	beq	170ac <__assert_fail@plt+0x5d20>
   17084:	mov	r1, r3
   17088:	movw	r0, #56924	; 0xde5c
   1708c:	movt	r0, #1
   17090:	bl	16ea4 <__assert_fail@plt+0x5b18>
   17094:	str	r0, [sp, #188]	; 0xbc
   17098:	movw	r0, #56920	; 0xde58
   1709c:	movt	r0, #1
   170a0:	ldr	r1, [sp, #176]	; 0xb0
   170a4:	bl	16ea4 <__assert_fail@plt+0x5b18>
   170a8:	str	r0, [sp, #192]	; 0xc0
   170ac:	cmp	r4, #0
   170b0:	movne	r4, #0
   170b4:	beq	18770 <__assert_fail@plt+0x73e4>
   170b8:	mov	r5, #0
   170bc:	ldr	r0, [sp, #192]	; 0xc0
   170c0:	mov	r9, r5
   170c4:	str	r5, [sp, #64]	; 0x40
   170c8:	bl	1120c <strlen@plt>
   170cc:	mov	r3, #1
   170d0:	ldr	r2, [sp, #44]	; 0x2c
   170d4:	cmp	r0, r5
   170d8:	moveq	r2, r5
   170dc:	str	r3, [sp, #32]
   170e0:	str	r3, [sp, #48]	; 0x30
   170e4:	str	r5, [sp, #52]	; 0x34
   170e8:	str	r3, [sp, #60]	; 0x3c
   170ec:	ldr	r3, [sp, #180]	; 0xb4
   170f0:	str	r0, [sp, #56]	; 0x38
   170f4:	str	r5, [sp, #68]	; 0x44
   170f8:	str	r5, [sp, #80]	; 0x50
   170fc:	str	r5, [sp, #84]	; 0x54
   17100:	and	r3, r3, #1
   17104:	str	r2, [sp, #88]	; 0x58
   17108:	str	r3, [sp, #92]	; 0x5c
   1710c:	ldr	r3, [sp, #180]	; 0xb4
   17110:	and	r3, r3, #4
   17114:	str	r3, [sp, #96]	; 0x60
   17118:	ldr	r3, [sp, #192]	; 0xc0
   1711c:	str	r3, [sp, #72]	; 0x48
   17120:	mov	r3, fp
   17124:	mov	r7, #0
   17128:	mov	fp, r9
   1712c:	mov	r9, r3
   17130:	cmn	r8, #1
   17134:	beq	17738 <__assert_fail@plt+0x63ac>
   17138:	subs	r6, r8, r7
   1713c:	movne	r6, #1
   17140:	cmp	r6, #0
   17144:	beq	17750 <__assert_fail@plt+0x63c4>
   17148:	ldr	r0, [sp, #28]
   1714c:	ldr	r3, [sp, #48]	; 0x30
   17150:	cmp	r3, #0
   17154:	add	r3, r0, r7
   17158:	str	r3, [sp, #36]	; 0x24
   1715c:	beq	17bdc <__assert_fail@plt+0x6850>
   17160:	ldr	r2, [sp, #56]	; 0x38
   17164:	cmp	r2, #0
   17168:	beq	180dc <__assert_fail@plt+0x6d50>
   1716c:	cmp	r2, #1
   17170:	mov	r3, r2
   17174:	movls	r3, #0
   17178:	movhi	r3, #1
   1717c:	cmn	r8, #1
   17180:	add	r5, r7, r2
   17184:	movne	r3, #0
   17188:	cmp	r3, #0
   1718c:	beq	17198 <__assert_fail@plt+0x5e0c>
   17190:	bl	1120c <strlen@plt>
   17194:	mov	r8, r0
   17198:	cmp	r5, r8
   1719c:	bhi	180dc <__assert_fail@plt+0x6d50>
   171a0:	ldr	r0, [sp, #36]	; 0x24
   171a4:	ldr	r2, [sp, #56]	; 0x38
   171a8:	ldr	r1, [sp, #72]	; 0x48
   171ac:	bl	110e0 <memcmp@plt>
   171b0:	cmp	r0, #0
   171b4:	bne	180dc <__assert_fail@plt+0x6d50>
   171b8:	ldr	r3, [sp, #44]	; 0x2c
   171bc:	cmp	r3, #0
   171c0:	bne	18888 <__assert_fail@plt+0x74fc>
   171c4:	ldr	r3, [sp, #36]	; 0x24
   171c8:	ldrb	r5, [r3]
   171cc:	cmp	r5, #126	; 0x7e
   171d0:	ldrls	pc, [pc, r5, lsl #2]
   171d4:	b	18670 <__assert_fail@plt+0x72e4>
   171d8:	andeq	r7, r1, ip, lsr #17
   171dc:	andeq	r8, r1, r0, ror r6
   171e0:	andeq	r8, r1, r0, ror r6
   171e4:	andeq	r8, r1, r0, ror r6
   171e8:	andeq	r8, r1, r0, ror r6
   171ec:	andeq	r8, r1, r0, ror r6
   171f0:	andeq	r8, r1, r0, ror r6
   171f4:	andeq	r7, r1, r4, lsl #16
   171f8:	strdeq	r7, [r1], -ip
   171fc:	andeq	r7, r1, ip, lsl #16
   17200:	muleq	r1, r0, r9
   17204:	andeq	r7, r1, r0, lsl #19
   17208:	andeq	r7, r1, r8, lsr #13
   1720c:	andeq	r7, r1, ip, asr r9
   17210:	andeq	r8, r1, r0, ror r6
   17214:	andeq	r8, r1, r0, ror r6
   17218:	andeq	r8, r1, r0, ror r6
   1721c:	andeq	r8, r1, r0, ror r6
   17220:	andeq	r8, r1, r0, ror r6
   17224:	andeq	r8, r1, r0, ror r6
   17228:	andeq	r8, r1, r0, ror r6
   1722c:	andeq	r8, r1, r0, ror r6
   17230:	andeq	r8, r1, r0, ror r6
   17234:	andeq	r8, r1, r0, ror r6
   17238:	andeq	r8, r1, r0, ror r6
   1723c:	andeq	r8, r1, r0, ror r6
   17240:	andeq	r8, r1, r0, ror r6
   17244:	andeq	r8, r1, r0, ror r6
   17248:	andeq	r8, r1, r0, ror r6
   1724c:	andeq	r8, r1, r0, ror r6
   17250:	andeq	r8, r1, r0, ror r6
   17254:	andeq	r8, r1, r0, ror r6
   17258:	andeq	r7, r1, r8, lsl #20
   1725c:	strdeq	r7, [r1], -ip
   17260:	strdeq	r7, [r1], -ip
   17264:	strdeq	r7, [r1], -r0
   17268:	strdeq	r7, [r1], -ip
   1726c:	ldrdeq	r7, [r1], -r4
   17270:	strdeq	r7, [r1], -ip
   17274:	andeq	r7, r1, r4, asr #22
   17278:	strdeq	r7, [r1], -ip
   1727c:	strdeq	r7, [r1], -ip
   17280:	strdeq	r7, [r1], -ip
   17284:	ldrdeq	r7, [r1], -r4
   17288:	ldrdeq	r7, [r1], -r4
   1728c:	ldrdeq	r7, [r1], -r4
   17290:	ldrdeq	r7, [r1], -r4
   17294:	ldrdeq	r7, [r1], -r4
   17298:	ldrdeq	r7, [r1], -r4
   1729c:	ldrdeq	r7, [r1], -r4
   172a0:	ldrdeq	r7, [r1], -r4
   172a4:	ldrdeq	r7, [r1], -r4
   172a8:	ldrdeq	r7, [r1], -r4
   172ac:	ldrdeq	r7, [r1], -r4
   172b0:	ldrdeq	r7, [r1], -r4
   172b4:	ldrdeq	r7, [r1], -r4
   172b8:	ldrdeq	r7, [r1], -r4
   172bc:	ldrdeq	r7, [r1], -r4
   172c0:	ldrdeq	r7, [r1], -r4
   172c4:	strdeq	r7, [r1], -ip
   172c8:	strdeq	r7, [r1], -ip
   172cc:	strdeq	r7, [r1], -ip
   172d0:	strdeq	r7, [r1], -ip
   172d4:	strdeq	r7, [r1], -r4
   172d8:	andeq	r8, r1, r0, ror r6
   172dc:	ldrdeq	r7, [r1], -r4
   172e0:	ldrdeq	r7, [r1], -r4
   172e4:	ldrdeq	r7, [r1], -r4
   172e8:	ldrdeq	r7, [r1], -r4
   172ec:	ldrdeq	r7, [r1], -r4
   172f0:	ldrdeq	r7, [r1], -r4
   172f4:	ldrdeq	r7, [r1], -r4
   172f8:	ldrdeq	r7, [r1], -r4
   172fc:	ldrdeq	r7, [r1], -r4
   17300:	ldrdeq	r7, [r1], -r4
   17304:	ldrdeq	r7, [r1], -r4
   17308:	ldrdeq	r7, [r1], -r4
   1730c:	ldrdeq	r7, [r1], -r4
   17310:	ldrdeq	r7, [r1], -r4
   17314:	ldrdeq	r7, [r1], -r4
   17318:	ldrdeq	r7, [r1], -r4
   1731c:	ldrdeq	r7, [r1], -r4
   17320:	ldrdeq	r7, [r1], -r4
   17324:	ldrdeq	r7, [r1], -r4
   17328:	ldrdeq	r7, [r1], -r4
   1732c:	ldrdeq	r7, [r1], -r4
   17330:	ldrdeq	r7, [r1], -r4
   17334:	ldrdeq	r7, [r1], -r4
   17338:	ldrdeq	r7, [r1], -r4
   1733c:	ldrdeq	r7, [r1], -r4
   17340:	ldrdeq	r7, [r1], -r4
   17344:	strdeq	r7, [r1], -ip
   17348:	muleq	r1, r8, sl
   1734c:	ldrdeq	r7, [r1], -r4
   17350:	strdeq	r7, [r1], -ip
   17354:	ldrdeq	r7, [r1], -r4
   17358:	strdeq	r7, [r1], -ip
   1735c:	ldrdeq	r7, [r1], -r4
   17360:	ldrdeq	r7, [r1], -r4
   17364:	ldrdeq	r7, [r1], -r4
   17368:	ldrdeq	r7, [r1], -r4
   1736c:	ldrdeq	r7, [r1], -r4
   17370:	ldrdeq	r7, [r1], -r4
   17374:	ldrdeq	r7, [r1], -r4
   17378:	ldrdeq	r7, [r1], -r4
   1737c:	ldrdeq	r7, [r1], -r4
   17380:	ldrdeq	r7, [r1], -r4
   17384:	ldrdeq	r7, [r1], -r4
   17388:	ldrdeq	r7, [r1], -r4
   1738c:	ldrdeq	r7, [r1], -r4
   17390:	ldrdeq	r7, [r1], -r4
   17394:	ldrdeq	r7, [r1], -r4
   17398:	ldrdeq	r7, [r1], -r4
   1739c:	ldrdeq	r7, [r1], -r4
   173a0:	ldrdeq	r7, [r1], -r4
   173a4:	ldrdeq	r7, [r1], -r4
   173a8:	ldrdeq	r7, [r1], -r4
   173ac:	ldrdeq	r7, [r1], -r4
   173b0:	ldrdeq	r7, [r1], -r4
   173b4:	ldrdeq	r7, [r1], -r4
   173b8:	ldrdeq	r7, [r1], -r4
   173bc:	ldrdeq	r7, [r1], -r4
   173c0:	ldrdeq	r7, [r1], -r4
   173c4:	andeq	r7, r1, r4, lsr #19
   173c8:	strdeq	r7, [r1], -ip
   173cc:	andeq	r7, r1, r4, lsr #19
   173d0:	strdeq	r7, [r1], -r0
   173d4:	ldr	r3, [sp, #180]	; 0xb4
   173d8:	cmp	r4, #0
   173dc:	and	r3, r3, #1
   173e0:	str	r3, [sp, #92]	; 0x5c
   173e4:	ldr	r3, [sp, #180]	; 0xb4
   173e8:	and	r3, r3, #4
   173ec:	str	r3, [sp, #96]	; 0x60
   173f0:	moveq	r3, #1
   173f4:	streq	r3, [sp, #60]	; 0x3c
   173f8:	beq	17b88 <__assert_fail@plt+0x67fc>
   173fc:	mov	r3, #0
   17400:	mov	r2, #1
   17404:	mov	r4, r3
   17408:	mov	r9, r3
   1740c:	str	r2, [sp, #32]
   17410:	str	r2, [sp, #44]	; 0x2c
   17414:	str	r3, [sp, #48]	; 0x30
   17418:	str	r2, [sp, #52]	; 0x34
   1741c:	str	r2, [sp, #56]	; 0x38
   17420:	str	r3, [sp, #60]	; 0x3c
   17424:	str	r2, [sp, #64]	; 0x40
   17428:	str	r2, [sp, #68]	; 0x44
   1742c:	str	r3, [sp, #80]	; 0x50
   17430:	str	r3, [sp, #84]	; 0x54
   17434:	str	r3, [sp, #88]	; 0x58
   17438:	movw	r3, #56920	; 0xde58
   1743c:	movt	r3, #1
   17440:	str	r3, [sp, #72]	; 0x48
   17444:	mov	r3, #2
   17448:	str	r3, [sp, #176]	; 0xb0
   1744c:	b	17120 <__assert_fail@plt+0x5d94>
   17450:	ldr	r3, [sp, #180]	; 0xb4
   17454:	cmp	r4, #0
   17458:	and	r3, r3, #1
   1745c:	str	r3, [sp, #92]	; 0x5c
   17460:	ldr	r3, [sp, #180]	; 0xb4
   17464:	and	r3, r3, #4
   17468:	str	r3, [sp, #96]	; 0x60
   1746c:	bne	18840 <__assert_fail@plt+0x74b4>
   17470:	cmp	sl, #0
   17474:	beq	185ec <__assert_fail@plt+0x7260>
   17478:	mov	r3, #34	; 0x22
   1747c:	mov	r2, r4
   17480:	mov	r1, #1
   17484:	mov	r9, r2
   17488:	strb	r3, [fp]
   1748c:	movw	r3, #56900	; 0xde44
   17490:	movt	r3, #1
   17494:	mov	r4, r1
   17498:	str	r1, [sp, #32]
   1749c:	str	r2, [sp, #44]	; 0x2c
   174a0:	str	r1, [sp, #48]	; 0x30
   174a4:	str	r2, [sp, #52]	; 0x34
   174a8:	str	r1, [sp, #56]	; 0x38
   174ac:	str	r1, [sp, #60]	; 0x3c
   174b0:	str	r2, [sp, #64]	; 0x40
   174b4:	str	r2, [sp, #68]	; 0x44
   174b8:	str	r3, [sp, #72]	; 0x48
   174bc:	str	r2, [sp, #80]	; 0x50
   174c0:	str	r2, [sp, #84]	; 0x54
   174c4:	str	r2, [sp, #88]	; 0x58
   174c8:	b	17120 <__assert_fail@plt+0x5d94>
   174cc:	mov	r3, #0
   174d0:	mov	r2, #1
   174d4:	mov	r9, r3
   174d8:	str	r2, [sp, #32]
   174dc:	str	r3, [sp, #44]	; 0x2c
   174e0:	str	r3, [sp, #48]	; 0x30
   174e4:	str	r3, [sp, #52]	; 0x34
   174e8:	str	r3, [sp, #60]	; 0x3c
   174ec:	strd	r2, [sp, #64]	; 0x40
   174f0:	str	r3, [sp, #72]	; 0x48
   174f4:	str	r3, [sp, #80]	; 0x50
   174f8:	str	r3, [sp, #88]	; 0x58
   174fc:	ldr	r3, [sp, #180]	; 0xb4
   17500:	and	r3, r3, r2
   17504:	str	r3, [sp, #92]	; 0x5c
   17508:	ldr	r3, [sp, #180]	; 0xb4
   1750c:	and	r3, r3, #4
   17510:	str	r3, [sp, #96]	; 0x60
   17514:	ldr	r3, [sp, #176]	; 0xb0
   17518:	mov	r4, r3
   1751c:	str	r3, [sp, #56]	; 0x38
   17520:	str	r3, [sp, #84]	; 0x54
   17524:	b	17120 <__assert_fail@plt+0x5d94>
   17528:	mov	r3, #1
   1752c:	mov	r4, #0
   17530:	mov	r9, r4
   17534:	str	r3, [sp, #32]
   17538:	str	r3, [sp, #44]	; 0x2c
   1753c:	str	r3, [sp, #48]	; 0x30
   17540:	str	r4, [sp, #52]	; 0x34
   17544:	str	r3, [sp, #56]	; 0x38
   17548:	str	r3, [sp, #60]	; 0x3c
   1754c:	str	r3, [sp, #88]	; 0x58
   17550:	movw	r3, #56900	; 0xde44
   17554:	movt	r3, #1
   17558:	str	r4, [sp, #64]	; 0x40
   1755c:	str	r4, [sp, #68]	; 0x44
   17560:	str	r3, [sp, #72]	; 0x48
   17564:	ldr	r3, [sp, #180]	; 0xb4
   17568:	str	r4, [sp, #80]	; 0x50
   1756c:	str	r4, [sp, #84]	; 0x54
   17570:	and	r3, r3, #1
   17574:	str	r3, [sp, #92]	; 0x5c
   17578:	ldr	r3, [sp, #180]	; 0xb4
   1757c:	and	r3, r3, #4
   17580:	str	r3, [sp, #96]	; 0x60
   17584:	mov	r3, #5
   17588:	str	r3, [sp, #176]	; 0xb0
   1758c:	b	17120 <__assert_fail@plt+0x5d94>
   17590:	mov	r3, #1
   17594:	mov	r4, #0
   17598:	mov	r9, r4
   1759c:	str	r3, [sp, #32]
   175a0:	str	r4, [sp, #44]	; 0x2c
   175a4:	str	r3, [sp, #48]	; 0x30
   175a8:	str	r3, [sp, #60]	; 0x3c
   175ac:	ldr	r3, [sp, #180]	; 0xb4
   175b0:	str	r4, [sp, #52]	; 0x34
   175b4:	str	r4, [sp, #56]	; 0x38
   175b8:	str	r4, [sp, #64]	; 0x40
   175bc:	str	r4, [sp, #68]	; 0x44
   175c0:	and	r3, r3, #1
   175c4:	str	r4, [sp, #72]	; 0x48
   175c8:	str	r4, [sp, #80]	; 0x50
   175cc:	str	r4, [sp, #84]	; 0x54
   175d0:	str	r3, [sp, #92]	; 0x5c
   175d4:	ldr	r3, [sp, #180]	; 0xb4
   175d8:	str	r4, [sp, #88]	; 0x58
   175dc:	and	r3, r3, #4
   175e0:	str	r3, [sp, #96]	; 0x60
   175e4:	b	17120 <__assert_fail@plt+0x5d94>
   175e8:	mov	r3, #0
   175ec:	mov	r2, #1
   175f0:	ldr	r1, [sp, #176]	; 0xb0
   175f4:	mov	r4, r3
   175f8:	mov	r9, r3
   175fc:	movw	r3, #56920	; 0xde58
   17600:	movt	r3, #1
   17604:	str	r2, [sp, #32]
   17608:	str	r2, [sp, #44]	; 0x2c
   1760c:	str	r4, [sp, #48]	; 0x30
   17610:	strd	r2, [sp, #68]	; 0x44
   17614:	ldr	r3, [sp, #180]	; 0xb4
   17618:	str	r2, [sp, #52]	; 0x34
   1761c:	str	r1, [sp, #56]	; 0x38
   17620:	str	r4, [sp, #60]	; 0x3c
   17624:	str	r2, [sp, #64]	; 0x40
   17628:	and	r3, r3, r2
   1762c:	str	r4, [sp, #80]	; 0x50
   17630:	str	r4, [sp, #84]	; 0x54
   17634:	str	r4, [sp, #88]	; 0x58
   17638:	str	r3, [sp, #92]	; 0x5c
   1763c:	ldr	r3, [sp, #180]	; 0xb4
   17640:	and	r3, r3, #4
   17644:	str	r3, [sp, #96]	; 0x60
   17648:	mov	r3, #2
   1764c:	str	r3, [sp, #176]	; 0xb0
   17650:	b	17120 <__assert_fail@plt+0x5d94>
   17654:	mov	r3, #1
   17658:	mov	r2, #0
   1765c:	mov	r4, r2
   17660:	mov	r9, r2
   17664:	str	r3, [sp, #32]
   17668:	str	r3, [sp, #44]	; 0x2c
   1766c:	str	r2, [sp, #48]	; 0x30
   17670:	str	r3, [sp, #52]	; 0x34
   17674:	str	r3, [sp, #56]	; 0x38
   17678:	str	r3, [sp, #60]	; 0x3c
   1767c:	str	r3, [sp, #64]	; 0x40
   17680:	str	r3, [sp, #68]	; 0x44
   17684:	str	r3, [sp, #88]	; 0x58
   17688:	movw	r3, #56920	; 0xde58
   1768c:	movt	r3, #1
   17690:	str	r3, [sp, #72]	; 0x48
   17694:	ldr	r3, [sp, #180]	; 0xb4
   17698:	str	r2, [sp, #80]	; 0x50
   1769c:	str	r2, [sp, #84]	; 0x54
   176a0:	and	r3, r3, #1
   176a4:	b	17638 <__assert_fail@plt+0x62ac>
   176a8:	mov	r5, #102	; 0x66
   176ac:	mov	r6, #0
   176b0:	ldr	r3, [sp, #44]	; 0x2c
   176b4:	cmp	r3, #0
   176b8:	bne	18568 <__assert_fail@plt+0x71dc>
   176bc:	ldr	r2, [sp, #52]	; 0x34
   176c0:	eor	r3, fp, #1
   176c4:	ands	r3, r2, r3
   176c8:	beq	17700 <__assert_fail@plt+0x6374>
   176cc:	cmp	sl, r4
   176d0:	mov	fp, r3
   176d4:	movhi	r2, #39	; 0x27
   176d8:	strbhi	r2, [r9, r4]
   176dc:	add	r2, r4, #1
   176e0:	cmp	sl, r2
   176e4:	movhi	r1, #36	; 0x24
   176e8:	strbhi	r1, [r9, r2]
   176ec:	add	r2, r4, #2
   176f0:	add	r4, r4, #3
   176f4:	cmp	sl, r2
   176f8:	movhi	r1, #39	; 0x27
   176fc:	strbhi	r1, [r9, r2]
   17700:	cmp	sl, r4
   17704:	add	r7, r7, #1
   17708:	movhi	r3, #92	; 0x5c
   1770c:	strbhi	r3, [r9, r4]
   17710:	add	r4, r4, #1
   17714:	cmp	r4, sl
   17718:	ldr	r3, [sp, #32]
   1771c:	strbcc	r5, [r9, r4]
   17720:	cmp	r6, #0
   17724:	add	r4, r4, #1
   17728:	moveq	r3, #0
   1772c:	cmn	r8, #1
   17730:	str	r3, [sp, #32]
   17734:	bne	17138 <__assert_fail@plt+0x5dac>
   17738:	ldr	r3, [sp, #28]
   1773c:	ldrb	r6, [r3, r7]
   17740:	adds	r6, r6, #0
   17744:	movne	r6, #1
   17748:	cmp	r6, #0
   1774c:	bne	17148 <__assert_fail@plt+0x5dbc>
   17750:	mov	r3, r9
   17754:	mov	r9, fp
   17758:	mov	fp, r3
   1775c:	ldr	r3, [sp, #68]	; 0x44
   17760:	cmp	r4, #0
   17764:	movne	r3, #0
   17768:	cmp	r3, #0
   1776c:	bne	18960 <__assert_fail@plt+0x75d4>
   17770:	ldr	r3, [sp, #44]	; 0x2c
   17774:	ldr	r2, [sp, #52]	; 0x34
   17778:	eor	r3, r3, #1
   1777c:	ands	r2, r3, r2
   17780:	beq	18898 <__assert_fail@plt+0x750c>
   17784:	ldr	r3, [sp, #80]	; 0x50
   17788:	cmp	r3, #0
   1778c:	beq	1889c <__assert_fail@plt+0x7510>
   17790:	ldr	r3, [sp, #32]
   17794:	cmp	r3, #0
   17798:	bne	18910 <__assert_fail@plt+0x7584>
   1779c:	ldr	r3, [sp, #84]	; 0x54
   177a0:	adds	r3, r3, #0
   177a4:	movne	r3, #1
   177a8:	cmp	sl, #0
   177ac:	movne	r3, #0
   177b0:	cmp	r3, #0
   177b4:	ldreq	r2, [sp, #80]	; 0x50
   177b8:	beq	1889c <__assert_fail@plt+0x7510>
   177bc:	ldr	r2, [sp, #84]	; 0x54
   177c0:	mov	sl, r2
   177c4:	mov	r0, #0
   177c8:	mov	r4, #1
   177cc:	mov	r1, #39	; 0x27
   177d0:	str	r0, [sp, #44]	; 0x2c
   177d4:	strb	r1, [fp]
   177d8:	str	r0, [sp, #48]	; 0x30
   177dc:	str	r4, [sp, #52]	; 0x34
   177e0:	str	r4, [sp, #56]	; 0x38
   177e4:	str	r4, [sp, #64]	; 0x40
   177e8:	str	r0, [sp, #68]	; 0x44
   177ec:	str	r3, [sp, #80]	; 0x50
   177f0:	str	r2, [sp, #84]	; 0x54
   177f4:	str	r0, [sp, #88]	; 0x58
   177f8:	b	17438 <__assert_fail@plt+0x60ac>
   177fc:	mov	r5, #98	; 0x62
   17800:	b	176ac <__assert_fail@plt+0x6320>
   17804:	mov	r5, #97	; 0x61
   17808:	b	176ac <__assert_fail@plt+0x6320>
   1780c:	ldr	r3, [sp, #48]	; 0x30
   17810:	str	r3, [sp, #40]	; 0x28
   17814:	mov	r3, #116	; 0x74
   17818:	ldr	r2, [sp, #68]	; 0x44
   1781c:	cmp	r2, #0
   17820:	bne	17a1c <__assert_fail@plt+0x6690>
   17824:	ldr	r2, [sp, #60]	; 0x3c
   17828:	cmp	r2, #0
   1782c:	bne	17978 <__assert_fail@plt+0x65ec>
   17830:	ldr	r3, [sp, #44]	; 0x2c
   17834:	mov	r6, #0
   17838:	cmp	r3, #0
   1783c:	beq	179e8 <__assert_fail@plt+0x665c>
   17840:	mov	r3, fp
   17844:	ldr	r2, [sp, #184]	; 0xb8
   17848:	cmp	r2, #0
   1784c:	beq	1786c <__assert_fail@plt+0x64e0>
   17850:	ubfx	r1, r5, #5, #8
   17854:	mov	r0, r2
   17858:	and	r2, r5, #31
   1785c:	ldr	r1, [r0, r1, lsl #2]
   17860:	lsr	r2, r1, r2
   17864:	tst	r2, #1
   17868:	bne	176b0 <__assert_fail@plt+0x6324>
   1786c:	ldr	r2, [sp, #40]	; 0x28
   17870:	cmp	r2, #0
   17874:	addeq	r7, r7, #1
   17878:	bne	176b0 <__assert_fail@plt+0x6324>
   1787c:	cmp	r3, #0
   17880:	beq	17714 <__assert_fail@plt+0x6388>
   17884:	cmp	sl, r4
   17888:	mov	fp, #0
   1788c:	movhi	r3, #39	; 0x27
   17890:	strbhi	r3, [r9, r4]
   17894:	add	r3, r4, #1
   17898:	add	r4, r4, #2
   1789c:	cmp	sl, r3
   178a0:	movhi	r2, #39	; 0x27
   178a4:	strbhi	r2, [r9, r3]
   178a8:	b	17714 <__assert_fail@plt+0x6388>
   178ac:	ldr	r3, [sp, #48]	; 0x30
   178b0:	str	r3, [sp, #40]	; 0x28
   178b4:	eor	r3, fp, #1
   178b8:	ldr	r2, [sp, #52]	; 0x34
   178bc:	ands	r2, r2, r3
   178c0:	beq	18580 <__assert_fail@plt+0x71f4>
   178c4:	cmp	sl, r4
   178c8:	movhi	r3, #39	; 0x27
   178cc:	strbhi	r3, [r9, r4]
   178d0:	add	r3, r4, #1
   178d4:	cmp	sl, r3
   178d8:	movhi	r1, #36	; 0x24
   178dc:	strbhi	r1, [r9, r3]
   178e0:	add	r3, r4, #2
   178e4:	cmp	sl, r3
   178e8:	movhi	r1, #39	; 0x27
   178ec:	strbhi	r1, [r9, r3]
   178f0:	add	r3, r4, #3
   178f4:	cmp	sl, r3
   178f8:	bls	185cc <__assert_fail@plt+0x7240>
   178fc:	mov	r4, r3
   17900:	mov	r3, #92	; 0x5c
   17904:	mov	fp, r2
   17908:	mov	r2, r4
   1790c:	strb	r3, [r9, r4]
   17910:	ldr	r3, [sp, #176]	; 0xb0
   17914:	add	r4, r4, #1
   17918:	cmp	r3, #2
   1791c:	beq	18634 <__assert_fail@plt+0x72a8>
   17920:	add	r3, r7, #1
   17924:	cmp	r3, r8
   17928:	bcs	17940 <__assert_fail@plt+0x65b4>
   1792c:	ldr	r1, [sp, #28]
   17930:	ldrb	r3, [r1, r3]
   17934:	sub	r3, r3, #48	; 0x30
   17938:	cmp	r3, #9
   1793c:	bls	18644 <__assert_fail@plt+0x72b8>
   17940:	mov	r3, #0
   17944:	mov	r5, #48	; 0x30
   17948:	ldr	r6, [sp, #64]	; 0x40
   1794c:	cmp	r6, #0
   17950:	beq	17844 <__assert_fail@plt+0x64b8>
   17954:	mov	r6, #0
   17958:	b	1786c <__assert_fail@plt+0x64e0>
   1795c:	ldr	r3, [sp, #48]	; 0x30
   17960:	str	r3, [sp, #40]	; 0x28
   17964:	ldr	r2, [sp, #60]	; 0x3c
   17968:	mov	r5, #13
   1796c:	mov	r3, #114	; 0x72
   17970:	cmp	r2, #0
   17974:	beq	17830 <__assert_fail@plt+0x64a4>
   17978:	mov	r5, r3
   1797c:	b	176ac <__assert_fail@plt+0x6320>
   17980:	ldr	r3, [sp, #48]	; 0x30
   17984:	str	r3, [sp, #40]	; 0x28
   17988:	mov	r3, #118	; 0x76
   1798c:	b	17824 <__assert_fail@plt+0x6498>
   17990:	ldr	r3, [sp, #48]	; 0x30
   17994:	str	r3, [sp, #40]	; 0x28
   17998:	mov	r5, #10
   1799c:	mov	r3, #110	; 0x6e
   179a0:	b	17824 <__assert_fail@plt+0x6498>
   179a4:	ldr	r3, [sp, #48]	; 0x30
   179a8:	cmn	r8, #1
   179ac:	str	r3, [sp, #40]	; 0x28
   179b0:	beq	17df8 <__assert_fail@plt+0x6a6c>
   179b4:	subs	r3, r8, #1
   179b8:	movne	r3, #1
   179bc:	cmp	r3, #0
   179c0:	bne	179cc <__assert_fail@plt+0x6640>
   179c4:	cmp	r7, #0
   179c8:	beq	17a10 <__assert_fail@plt+0x6684>
   179cc:	mov	r6, #0
   179d0:	ldr	r3, [sp, #64]	; 0x40
   179d4:	cmp	r3, #0
   179d8:	beq	17840 <__assert_fail@plt+0x64b4>
   179dc:	ldr	r3, [sp, #44]	; 0x2c
   179e0:	cmp	r3, #0
   179e4:	bne	17840 <__assert_fail@plt+0x64b4>
   179e8:	mov	r3, fp
   179ec:	b	1786c <__assert_fail@plt+0x64e0>
   179f0:	ldr	r3, [sp, #48]	; 0x30
   179f4:	str	r3, [sp, #40]	; 0x28
   179f8:	b	179c4 <__assert_fail@plt+0x6638>
   179fc:	ldr	r3, [sp, #48]	; 0x30
   17a00:	str	r3, [sp, #40]	; 0x28
   17a04:	b	179cc <__assert_fail@plt+0x6640>
   17a08:	ldr	r6, [sp, #48]	; 0x30
   17a0c:	str	r6, [sp, #40]	; 0x28
   17a10:	ldr	r3, [sp, #68]	; 0x44
   17a14:	cmp	r3, #0
   17a18:	beq	179d0 <__assert_fail@plt+0x6644>
   17a1c:	mov	r3, #2
   17a20:	mov	fp, r9
   17a24:	str	r3, [sp, #176]	; 0xb0
   17a28:	ldr	r3, [sp, #60]	; 0x3c
   17a2c:	cmp	r3, #0
   17a30:	ldr	r3, [sp, #176]	; 0xb0
   17a34:	movne	r3, #4
   17a38:	str	r3, [sp, #176]	; 0xb0
   17a3c:	mov	lr, #0
   17a40:	mov	r0, fp
   17a44:	ldr	r2, [sp, #28]
   17a48:	ldr	r3, [sp, #180]	; 0xb4
   17a4c:	ldr	r1, [sp, #188]	; 0xbc
   17a50:	bic	ip, r3, #2
   17a54:	ldr	r3, [sp, #176]	; 0xb0
   17a58:	stm	sp, {r3, ip, lr}
   17a5c:	mov	r3, r8
   17a60:	ldr	ip, [sp, #192]	; 0xc0
   17a64:	str	r1, [sp, #12]
   17a68:	mov	r1, sl
   17a6c:	str	ip, [sp, #16]
   17a70:	bl	16ffc <__assert_fail@plt+0x5c70>
   17a74:	mov	r4, r0
   17a78:	mov	r0, r4
   17a7c:	add	sp, sp, #140	; 0x8c
   17a80:	ldrd	r4, [sp]
   17a84:	ldrd	r6, [sp, #8]
   17a88:	ldrd	r8, [sp, #16]
   17a8c:	ldrd	sl, [sp, #24]
   17a90:	add	sp, sp, #32
   17a94:	pop	{pc}		; (ldr pc, [sp], #4)
   17a98:	ldr	r3, [sp, #48]	; 0x30
   17a9c:	str	r3, [sp, #40]	; 0x28
   17aa0:	ldr	r3, [sp, #176]	; 0xb0
   17aa4:	cmp	r3, #2
   17aa8:	beq	17e20 <__assert_fail@plt+0x6a94>
   17aac:	ldr	r3, [sp, #88]	; 0x58
   17ab0:	cmp	r3, #0
   17ab4:	moveq	r5, #92	; 0x5c
   17ab8:	moveq	r3, r5
   17abc:	beq	17824 <__assert_fail@plt+0x6498>
   17ac0:	add	r7, r7, #1
   17ac4:	mov	r3, fp
   17ac8:	mov	r6, #0
   17acc:	mov	r5, #92	; 0x5c
   17ad0:	b	1787c <__assert_fail@plt+0x64f0>
   17ad4:	ldr	r3, [sp, #64]	; 0x40
   17ad8:	cmp	r3, #0
   17adc:	bne	18954 <__assert_fail@plt+0x75c8>
   17ae0:	ldr	r2, [sp, #48]	; 0x30
   17ae4:	mov	r3, fp
   17ae8:	mov	r6, r2
   17aec:	str	r2, [sp, #40]	; 0x28
   17af0:	b	17844 <__assert_fail@plt+0x64b8>
   17af4:	ldr	r3, [sp, #176]	; 0xb0
   17af8:	cmp	r3, #2
   17afc:	beq	18890 <__assert_fail@plt+0x7504>
   17b00:	cmp	r3, #5
   17b04:	ldr	r3, [sp, #48]	; 0x30
   17b08:	str	r3, [sp, #40]	; 0x28
   17b0c:	bne	17b38 <__assert_fail@plt+0x67ac>
   17b10:	ldr	r3, [sp, #96]	; 0x60
   17b14:	cmp	r3, #0
   17b18:	beq	18594 <__assert_fail@plt+0x7208>
   17b1c:	add	r3, r7, #2
   17b20:	cmp	r3, r8
   17b24:	bcs	17b38 <__assert_fail@plt+0x67ac>
   17b28:	ldr	r2, [sp, #36]	; 0x24
   17b2c:	ldrb	r5, [r2, #1]
   17b30:	cmp	r5, #63	; 0x3f
   17b34:	beq	1867c <__assert_fail@plt+0x72f0>
   17b38:	mov	r6, #0
   17b3c:	mov	r5, #63	; 0x3f
   17b40:	b	179d0 <__assert_fail@plt+0x6644>
   17b44:	ldr	r3, [sp, #176]	; 0xb0
   17b48:	cmp	r3, #2
   17b4c:	ldr	r3, [sp, #48]	; 0x30
   17b50:	beq	18338 <__assert_fail@plt+0x6fac>
   17b54:	mov	r5, #39	; 0x27
   17b58:	str	r3, [sp, #40]	; 0x28
   17b5c:	str	r6, [sp, #80]	; 0x50
   17b60:	b	179d0 <__assert_fail@plt+0x6644>
   17b64:	ldr	r3, [sp, #180]	; 0xb4
   17b68:	cmp	r4, #0
   17b6c:	and	r3, r3, #1
   17b70:	str	r3, [sp, #92]	; 0x5c
   17b74:	ldr	r3, [sp, #180]	; 0xb4
   17b78:	and	r3, r3, #4
   17b7c:	str	r3, [sp, #96]	; 0x60
   17b80:	bne	189a0 <__assert_fail@plt+0x7614>
   17b84:	str	r4, [sp, #60]	; 0x3c
   17b88:	cmp	sl, #0
   17b8c:	bne	18984 <__assert_fail@plt+0x75f8>
   17b90:	mov	r3, #1
   17b94:	movw	r2, #56920	; 0xde58
   17b98:	movt	r2, #1
   17b9c:	mov	r4, r3
   17ba0:	mov	r3, #2
   17ba4:	mov	r9, sl
   17ba8:	str	r4, [sp, #32]
   17bac:	str	sl, [sp, #44]	; 0x2c
   17bb0:	str	sl, [sp, #48]	; 0x30
   17bb4:	str	r4, [sp, #52]	; 0x34
   17bb8:	str	r4, [sp, #56]	; 0x38
   17bbc:	str	r4, [sp, #64]	; 0x40
   17bc0:	str	sl, [sp, #68]	; 0x44
   17bc4:	str	r2, [sp, #72]	; 0x48
   17bc8:	str	sl, [sp, #80]	; 0x50
   17bcc:	str	sl, [sp, #84]	; 0x54
   17bd0:	str	sl, [sp, #88]	; 0x58
   17bd4:	str	r3, [sp, #176]	; 0xb0
   17bd8:	b	17120 <__assert_fail@plt+0x5d94>
   17bdc:	ldrb	r5, [r0, r7]
   17be0:	cmp	r5, #126	; 0x7e
   17be4:	ldrls	pc, [pc, r5, lsl #2]
   17be8:	b	17f4c <__assert_fail@plt+0x6bc0>
   17bec:	andeq	r7, r1, r8, lsl pc
   17bf0:	andeq	r7, r1, ip, asr #30
   17bf4:	andeq	r7, r1, ip, asr #30
   17bf8:	andeq	r7, r1, ip, asr #30
   17bfc:	andeq	r7, r1, ip, asr #30
   17c00:	andeq	r7, r1, ip, asr #30
   17c04:	andeq	r7, r1, ip, asr #30
   17c08:	andeq	r7, r1, r8, lsl #30
   17c0c:	strdeq	r7, [r1], -r8
   17c10:	andeq	r7, r1, ip, ror lr
   17c14:	andeq	r7, r1, r8, ror #29
   17c18:	andeq	r7, r1, ip, asr lr
   17c1c:	andeq	r7, r1, ip, lsr pc
   17c20:	andeq	r7, r1, r8, asr #29
   17c24:	andeq	r7, r1, ip, asr #30
   17c28:	andeq	r7, r1, ip, asr #30
   17c2c:	andeq	r7, r1, ip, asr #30
   17c30:	andeq	r7, r1, ip, asr #30
   17c34:	andeq	r7, r1, ip, asr #30
   17c38:	andeq	r7, r1, ip, asr #30
   17c3c:	andeq	r7, r1, ip, asr #30
   17c40:	andeq	r7, r1, ip, asr #30
   17c44:	andeq	r7, r1, ip, asr #30
   17c48:	andeq	r7, r1, ip, asr #30
   17c4c:	andeq	r7, r1, ip, asr #30
   17c50:	andeq	r7, r1, ip, asr #30
   17c54:	andeq	r7, r1, ip, asr #30
   17c58:	andeq	r7, r1, ip, asr #30
   17c5c:	andeq	r7, r1, ip, asr #30
   17c60:	andeq	r7, r1, ip, asr #30
   17c64:	andeq	r7, r1, ip, asr #30
   17c68:	andeq	r7, r1, ip, asr #30
   17c6c:	andeq	r7, r1, r0, ror lr
   17c70:	ldrdeq	r7, [r1], -r8
   17c74:	ldrdeq	r7, [r1], -r8
   17c78:	andeq	r7, r1, r0, asr lr
   17c7c:	ldrdeq	r7, [r1], -r8
   17c80:	andeq	r7, r1, r4, asr #28
   17c84:	ldrdeq	r7, [r1], -r8
   17c88:			; <UNDEFINED> instruction: 0x00017eb4
   17c8c:	ldrdeq	r7, [r1], -r8
   17c90:	ldrdeq	r7, [r1], -r8
   17c94:	ldrdeq	r7, [r1], -r8
   17c98:	andeq	r7, r1, r4, asr #28
   17c9c:	andeq	r7, r1, r4, asr #28
   17ca0:	andeq	r7, r1, r4, asr #28
   17ca4:	andeq	r7, r1, r4, asr #28
   17ca8:	andeq	r7, r1, r4, asr #28
   17cac:	andeq	r7, r1, r4, asr #28
   17cb0:	andeq	r7, r1, r4, asr #28
   17cb4:	andeq	r7, r1, r4, asr #28
   17cb8:	andeq	r7, r1, r4, asr #28
   17cbc:	andeq	r7, r1, r4, asr #28
   17cc0:	andeq	r7, r1, r4, asr #28
   17cc4:	andeq	r7, r1, r4, asr #28
   17cc8:	andeq	r7, r1, r4, asr #28
   17ccc:	andeq	r7, r1, r4, asr #28
   17cd0:	andeq	r7, r1, r4, asr #28
   17cd4:	andeq	r7, r1, r4, asr #28
   17cd8:	ldrdeq	r7, [r1], -r8
   17cdc:	ldrdeq	r7, [r1], -r8
   17ce0:	ldrdeq	r7, [r1], -r8
   17ce4:	ldrdeq	r7, [r1], -r8
   17ce8:	andeq	r7, r1, ip, lsl #29
   17cec:	andeq	r7, r1, ip, asr #30
   17cf0:	andeq	r7, r1, r4, asr #28
   17cf4:	andeq	r7, r1, r4, asr #28
   17cf8:	andeq	r7, r1, r4, asr #28
   17cfc:	andeq	r7, r1, r4, asr #28
   17d00:	andeq	r7, r1, r4, asr #28
   17d04:	andeq	r7, r1, r4, asr #28
   17d08:	andeq	r7, r1, r4, asr #28
   17d0c:	andeq	r7, r1, r4, asr #28
   17d10:	andeq	r7, r1, r4, asr #28
   17d14:	andeq	r7, r1, r4, asr #28
   17d18:	andeq	r7, r1, r4, asr #28
   17d1c:	andeq	r7, r1, r4, asr #28
   17d20:	andeq	r7, r1, r4, asr #28
   17d24:	andeq	r7, r1, r4, asr #28
   17d28:	andeq	r7, r1, r4, asr #28
   17d2c:	andeq	r7, r1, r4, asr #28
   17d30:	andeq	r7, r1, r4, asr #28
   17d34:	andeq	r7, r1, r4, asr #28
   17d38:	andeq	r7, r1, r4, asr #28
   17d3c:	andeq	r7, r1, r4, asr #28
   17d40:	andeq	r7, r1, r4, asr #28
   17d44:	andeq	r7, r1, r4, asr #28
   17d48:	andeq	r7, r1, r4, asr #28
   17d4c:	andeq	r7, r1, r4, asr #28
   17d50:	andeq	r7, r1, r4, asr #28
   17d54:	andeq	r7, r1, r4, asr #28
   17d58:	ldrdeq	r7, [r1], -r8
   17d5c:	andeq	r7, r1, ip, lsl #28
   17d60:	andeq	r7, r1, r4, asr #28
   17d64:	ldrdeq	r7, [r1], -r8
   17d68:	andeq	r7, r1, r4, asr #28
   17d6c:	ldrdeq	r7, [r1], -r8
   17d70:	andeq	r7, r1, r4, asr #28
   17d74:	andeq	r7, r1, r4, asr #28
   17d78:	andeq	r7, r1, r4, asr #28
   17d7c:	andeq	r7, r1, r4, asr #28
   17d80:	andeq	r7, r1, r4, asr #28
   17d84:	andeq	r7, r1, r4, asr #28
   17d88:	andeq	r7, r1, r4, asr #28
   17d8c:	andeq	r7, r1, r4, asr #28
   17d90:	andeq	r7, r1, r4, asr #28
   17d94:	andeq	r7, r1, r4, asr #28
   17d98:	andeq	r7, r1, r4, asr #28
   17d9c:	andeq	r7, r1, r4, asr #28
   17da0:	andeq	r7, r1, r4, asr #28
   17da4:	andeq	r7, r1, r4, asr #28
   17da8:	andeq	r7, r1, r4, asr #28
   17dac:	andeq	r7, r1, r4, asr #28
   17db0:	andeq	r7, r1, r4, asr #28
   17db4:	andeq	r7, r1, r4, asr #28
   17db8:	andeq	r7, r1, r4, asr #28
   17dbc:	andeq	r7, r1, r4, asr #28
   17dc0:	andeq	r7, r1, r4, asr #28
   17dc4:	andeq	r7, r1, r4, asr #28
   17dc8:	andeq	r7, r1, r4, asr #28
   17dcc:	andeq	r7, r1, r4, asr #28
   17dd0:	andeq	r7, r1, r4, asr #28
   17dd4:	andeq	r7, r1, r4, asr #28
   17dd8:	andeq	r7, r1, r8, ror #27
   17ddc:	ldrdeq	r7, [r1], -r8
   17de0:	andeq	r7, r1, r8, ror #27
   17de4:	andeq	r7, r1, r0, asr lr
   17de8:	mov	r3, #0
   17dec:	cmn	r8, #1
   17df0:	str	r3, [sp, #40]	; 0x28
   17df4:	bne	179b4 <__assert_fail@plt+0x6628>
   17df8:	ldr	r3, [sp, #28]
   17dfc:	ldrb	r3, [r3, #1]
   17e00:	adds	r3, r3, #0
   17e04:	movne	r3, #1
   17e08:	b	179bc <__assert_fail@plt+0x6630>
   17e0c:	mov	r3, #0
   17e10:	str	r3, [sp, #40]	; 0x28
   17e14:	ldr	r3, [sp, #176]	; 0xb0
   17e18:	cmp	r3, #2
   17e1c:	bne	17aac <__assert_fail@plt+0x6720>
   17e20:	ldr	r3, [sp, #44]	; 0x2c
   17e24:	cmp	r3, #0
   17e28:	bne	18768 <__assert_fail@plt+0x73dc>
   17e2c:	mov	r6, r3
   17e30:	add	r7, r7, #1
   17e34:	mov	r3, fp
   17e38:	mov	r5, #92	; 0x5c
   17e3c:	b	1787c <__assert_fail@plt+0x64f0>
   17e40:	ldr	r6, [sp, #48]	; 0x30
   17e44:	mov	r3, #0
   17e48:	str	r3, [sp, #40]	; 0x28
   17e4c:	b	179d0 <__assert_fail@plt+0x6644>
   17e50:	mov	r3, #0
   17e54:	str	r3, [sp, #40]	; 0x28
   17e58:	b	179c4 <__assert_fail@plt+0x6638>
   17e5c:	mov	r3, #0
   17e60:	str	r3, [sp, #40]	; 0x28
   17e64:	mov	r3, #118	; 0x76
   17e68:	b	17824 <__assert_fail@plt+0x6498>
   17e6c:	ldr	r6, [sp, #48]	; 0x30
   17e70:	mov	r3, #0
   17e74:	str	r3, [sp, #40]	; 0x28
   17e78:	b	17a10 <__assert_fail@plt+0x6684>
   17e7c:	mov	r3, #0
   17e80:	str	r3, [sp, #40]	; 0x28
   17e84:	mov	r3, #116	; 0x74
   17e88:	b	17818 <__assert_fail@plt+0x648c>
   17e8c:	ldr	r3, [sp, #176]	; 0xb0
   17e90:	cmp	r3, #2
   17e94:	beq	183a4 <__assert_fail@plt+0x7018>
   17e98:	cmp	r3, #5
   17e9c:	mov	r3, #0
   17ea0:	str	r3, [sp, #40]	; 0x28
   17ea4:	beq	17b10 <__assert_fail@plt+0x6784>
   17ea8:	mov	r6, #0
   17eac:	mov	r5, #63	; 0x3f
   17eb0:	b	179d0 <__assert_fail@plt+0x6644>
   17eb4:	ldr	r3, [sp, #176]	; 0xb0
   17eb8:	cmp	r3, #2
   17ebc:	beq	1832c <__assert_fail@plt+0x6fa0>
   17ec0:	mov	r3, #0
   17ec4:	b	17b54 <__assert_fail@plt+0x67c8>
   17ec8:	mov	r3, #0
   17ecc:	str	r3, [sp, #40]	; 0x28
   17ed0:	mov	r3, #114	; 0x72
   17ed4:	b	17818 <__assert_fail@plt+0x648c>
   17ed8:	mov	r3, #0
   17edc:	mov	r6, r3
   17ee0:	str	r3, [sp, #40]	; 0x28
   17ee4:	b	17a10 <__assert_fail@plt+0x6684>
   17ee8:	mov	r3, #0
   17eec:	str	r3, [sp, #40]	; 0x28
   17ef0:	mov	r3, #110	; 0x6e
   17ef4:	b	17818 <__assert_fail@plt+0x648c>
   17ef8:	mov	r3, #0
   17efc:	str	r3, [sp, #40]	; 0x28
   17f00:	mov	r3, #98	; 0x62
   17f04:	b	17824 <__assert_fail@plt+0x6498>
   17f08:	mov	r3, #0
   17f0c:	str	r3, [sp, #40]	; 0x28
   17f10:	mov	r3, #97	; 0x61
   17f14:	b	17824 <__assert_fail@plt+0x6498>
   17f18:	ldr	r3, [sp, #60]	; 0x3c
   17f1c:	cmp	r3, #0
   17f20:	bne	18310 <__assert_fail@plt+0x6f84>
   17f24:	ldr	r3, [sp, #92]	; 0x5c
   17f28:	cmp	r3, #0
   17f2c:	addne	r7, r7, #1
   17f30:	bne	17130 <__assert_fail@plt+0x5da4>
   17f34:	str	r3, [sp, #40]	; 0x28
   17f38:	b	17830 <__assert_fail@plt+0x64a4>
   17f3c:	mov	r3, #0
   17f40:	str	r3, [sp, #40]	; 0x28
   17f44:	mov	r3, #102	; 0x66
   17f48:	b	17824 <__assert_fail@plt+0x6498>
   17f4c:	mov	r3, #0
   17f50:	str	r3, [sp, #40]	; 0x28
   17f54:	ldr	r3, [sp, #76]	; 0x4c
   17f58:	cmp	r3, #1
   17f5c:	bne	183c4 <__assert_fail@plt+0x7038>
   17f60:	bl	111e8 <__ctype_b_loc@plt>
   17f64:	ldr	r2, [r0]
   17f68:	sxth	r3, r5
   17f6c:	lsl	r3, r3, #1
   17f70:	ldr	r1, [sp, #76]	; 0x4c
   17f74:	ldrh	r3, [r2, r3]
   17f78:	mov	r0, r1
   17f7c:	and	r3, r3, #16384	; 0x4000
   17f80:	cmp	r3, #0
   17f84:	ldr	r3, [sp, #60]	; 0x3c
   17f88:	movne	r6, #1
   17f8c:	moveq	r6, #0
   17f90:	movne	r2, #0
   17f94:	andeq	r2, r3, #1
   17f98:	cmp	r2, #0
   17f9c:	beq	179d0 <__assert_fail@plt+0x6644>
   17fa0:	ldr	r2, [sp, #60]	; 0x3c
   17fa4:	mov	r6, #0
   17fa8:	add	r1, r0, r7
   17fac:	mov	ip, #39	; 0x27
   17fb0:	str	r6, [sp, #100]	; 0x64
   17fb4:	mov	r0, #0
   17fb8:	ldr	lr, [sp, #36]	; 0x24
   17fbc:	str	r8, [sp, #36]	; 0x24
   17fc0:	ldr	r6, [sp, #40]	; 0x28
   17fc4:	ldr	r8, [sp, #44]	; 0x2c
   17fc8:	b	18078 <__assert_fail@plt+0x6cec>
   17fcc:	cmp	r8, #0
   17fd0:	bne	185ac <__assert_fail@plt+0x7220>
   17fd4:	ldr	r0, [sp, #52]	; 0x34
   17fd8:	eor	r3, fp, #1
   17fdc:	ands	r3, r0, r3
   17fe0:	beq	18010 <__assert_fail@plt+0x6c84>
   17fe4:	cmp	sl, r4
   17fe8:	add	r0, r4, #1
   17fec:	strbhi	ip, [r9, r4]
   17ff0:	cmp	sl, r0
   17ff4:	movhi	fp, #36	; 0x24
   17ff8:	strbhi	fp, [r9, r0]
   17ffc:	add	r0, r4, #2
   18000:	mov	fp, r3
   18004:	cmp	sl, r0
   18008:	add	r4, r4, #3
   1800c:	strbhi	ip, [r9, r0]
   18010:	cmp	sl, r4
   18014:	movhi	r3, #92	; 0x5c
   18018:	strbhi	r3, [r9, r4]
   1801c:	add	r3, r4, #1
   18020:	cmp	sl, r3
   18024:	bls	18034 <__assert_fail@plt+0x6ca8>
   18028:	lsr	r0, r5, #6
   1802c:	add	r0, r0, #48	; 0x30
   18030:	strb	r0, [r9, r3]
   18034:	add	r3, r4, #2
   18038:	cmp	sl, r3
   1803c:	bls	1804c <__assert_fail@plt+0x6cc0>
   18040:	ubfx	r0, r5, #3, #3
   18044:	add	r0, r0, #48	; 0x30
   18048:	strb	r0, [r9, r3]
   1804c:	add	r7, r7, #1
   18050:	and	r5, r5, #7
   18054:	cmp	r1, r7
   18058:	add	r5, r5, #48	; 0x30
   1805c:	add	r4, r4, #3
   18060:	bls	185c0 <__assert_fail@plt+0x7234>
   18064:	mov	r0, r2
   18068:	cmp	sl, r4
   1806c:	strbhi	r5, [r9, r4]
   18070:	add	r4, r4, #1
   18074:	ldrb	r5, [lr, #1]!
   18078:	cmp	r2, #0
   1807c:	bne	17fcc <__assert_fail@plt+0x6c40>
   18080:	eor	r3, r0, #1
   18084:	cmp	r6, #0
   18088:	and	r3, r3, fp
   1808c:	uxtb	r3, r3
   18090:	beq	180a4 <__assert_fail@plt+0x6d18>
   18094:	cmp	sl, r4
   18098:	movhi	r6, #92	; 0x5c
   1809c:	strbhi	r6, [r9, r4]
   180a0:	add	r4, r4, #1
   180a4:	add	r7, r7, #1
   180a8:	cmp	r7, r1
   180ac:	bcs	185a0 <__assert_fail@plt+0x7214>
   180b0:	cmp	r3, #0
   180b4:	beq	185e4 <__assert_fail@plt+0x7258>
   180b8:	cmp	sl, r4
   180bc:	add	r3, r4, #1
   180c0:	mov	r6, #0
   180c4:	strbhi	ip, [r9, r4]
   180c8:	cmp	sl, r3
   180cc:	add	r4, r4, #2
   180d0:	mov	fp, r6
   180d4:	strbhi	ip, [r9, r3]
   180d8:	b	18068 <__assert_fail@plt+0x6cdc>
   180dc:	ldr	r3, [sp, #36]	; 0x24
   180e0:	ldrb	r5, [r3]
   180e4:	cmp	r5, #126	; 0x7e
   180e8:	ldrls	pc, [pc, r5, lsl #2]
   180ec:	b	17f4c <__assert_fail@plt+0x6bc0>
   180f0:	andeq	r8, r1, r0, lsl r3
   180f4:	andeq	r7, r1, ip, asr #30
   180f8:	andeq	r7, r1, ip, asr #30
   180fc:	andeq	r7, r1, ip, asr #30
   18100:	andeq	r7, r1, ip, asr #30
   18104:	andeq	r7, r1, ip, asr #30
   18108:	andeq	r7, r1, ip, asr #30
   1810c:	andeq	r7, r1, r4, lsl #16
   18110:	strdeq	r7, [r1], -ip
   18114:	andeq	r7, r1, ip, ror lr
   18118:	andeq	r8, r1, r4, lsl #6
   1811c:	andeq	r7, r1, ip, asr lr
   18120:	andeq	r7, r1, r8, lsr #13
   18124:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18128:	andeq	r7, r1, ip, asr #30
   1812c:	andeq	r7, r1, ip, asr #30
   18130:	andeq	r7, r1, ip, asr #30
   18134:	andeq	r7, r1, ip, asr #30
   18138:	andeq	r7, r1, ip, asr #30
   1813c:	andeq	r7, r1, ip, asr #30
   18140:	andeq	r7, r1, ip, asr #30
   18144:	andeq	r7, r1, ip, asr #30
   18148:	andeq	r7, r1, ip, asr #30
   1814c:	andeq	r7, r1, ip, asr #30
   18150:	andeq	r7, r1, ip, asr #30
   18154:	andeq	r7, r1, ip, asr #30
   18158:	andeq	r7, r1, ip, asr #30
   1815c:	andeq	r7, r1, ip, asr #30
   18160:	andeq	r7, r1, ip, asr #30
   18164:	andeq	r7, r1, ip, asr #30
   18168:	andeq	r7, r1, ip, asr #30
   1816c:	andeq	r7, r1, ip, asr #30
   18170:	andeq	r7, r1, ip, ror #28
   18174:	andeq	r8, r1, ip, ror #5
   18178:	andeq	r8, r1, ip, ror #5
   1817c:	andeq	r7, r1, r0, asr lr
   18180:	andeq	r8, r1, ip, ror #5
   18184:	andeq	r7, r1, r0, asr #28
   18188:	andeq	r8, r1, ip, ror #5
   1818c:			; <UNDEFINED> instruction: 0x00017eb4
   18190:	andeq	r8, r1, ip, ror #5
   18194:	andeq	r8, r1, ip, ror #5
   18198:	andeq	r8, r1, ip, ror #5
   1819c:	andeq	r7, r1, r0, asr #28
   181a0:	andeq	r7, r1, r0, asr #28
   181a4:	andeq	r7, r1, r0, asr #28
   181a8:	andeq	r7, r1, r0, asr #28
   181ac:	andeq	r7, r1, r0, asr #28
   181b0:	andeq	r7, r1, r0, asr #28
   181b4:	andeq	r7, r1, r0, asr #28
   181b8:	andeq	r7, r1, r0, asr #28
   181bc:	andeq	r7, r1, r0, asr #28
   181c0:	andeq	r7, r1, r0, asr #28
   181c4:	andeq	r7, r1, r0, asr #28
   181c8:	andeq	r7, r1, r0, asr #28
   181cc:	andeq	r7, r1, r0, asr #28
   181d0:	andeq	r7, r1, r0, asr #28
   181d4:	andeq	r7, r1, r0, asr #28
   181d8:	andeq	r7, r1, r0, asr #28
   181dc:	andeq	r8, r1, ip, ror #5
   181e0:	andeq	r8, r1, ip, ror #5
   181e4:	andeq	r8, r1, ip, ror #5
   181e8:	andeq	r8, r1, ip, ror #5
   181ec:	andeq	r7, r1, ip, lsl #29
   181f0:	andeq	r7, r1, ip, asr #30
   181f4:	andeq	r7, r1, r0, asr #28
   181f8:	andeq	r7, r1, r0, asr #28
   181fc:	andeq	r7, r1, r0, asr #28
   18200:	andeq	r7, r1, r0, asr #28
   18204:	andeq	r7, r1, r0, asr #28
   18208:	andeq	r7, r1, r0, asr #28
   1820c:	andeq	r7, r1, r0, asr #28
   18210:	andeq	r7, r1, r0, asr #28
   18214:	andeq	r7, r1, r0, asr #28
   18218:	andeq	r7, r1, r0, asr #28
   1821c:	andeq	r7, r1, r0, asr #28
   18220:	andeq	r7, r1, r0, asr #28
   18224:	andeq	r7, r1, r0, asr #28
   18228:	andeq	r7, r1, r0, asr #28
   1822c:	andeq	r7, r1, r0, asr #28
   18230:	andeq	r7, r1, r0, asr #28
   18234:	andeq	r7, r1, r0, asr #28
   18238:	andeq	r7, r1, r0, asr #28
   1823c:	andeq	r7, r1, r0, asr #28
   18240:	andeq	r7, r1, r0, asr #28
   18244:	andeq	r7, r1, r0, asr #28
   18248:	andeq	r7, r1, r0, asr #28
   1824c:	andeq	r7, r1, r0, asr #28
   18250:	andeq	r7, r1, r0, asr #28
   18254:	andeq	r7, r1, r0, asr #28
   18258:	andeq	r7, r1, r0, asr #28
   1825c:	andeq	r8, r1, ip, ror #5
   18260:	andeq	r7, r1, ip, lsl #28
   18264:	andeq	r7, r1, r0, asr #28
   18268:	andeq	r8, r1, ip, ror #5
   1826c:	andeq	r7, r1, r0, asr #28
   18270:	andeq	r8, r1, ip, ror #5
   18274:	andeq	r7, r1, r0, asr #28
   18278:	andeq	r7, r1, r0, asr #28
   1827c:	andeq	r7, r1, r0, asr #28
   18280:	andeq	r7, r1, r0, asr #28
   18284:	andeq	r7, r1, r0, asr #28
   18288:	andeq	r7, r1, r0, asr #28
   1828c:	andeq	r7, r1, r0, asr #28
   18290:	andeq	r7, r1, r0, asr #28
   18294:	andeq	r7, r1, r0, asr #28
   18298:	andeq	r7, r1, r0, asr #28
   1829c:	andeq	r7, r1, r0, asr #28
   182a0:	andeq	r7, r1, r0, asr #28
   182a4:	andeq	r7, r1, r0, asr #28
   182a8:	andeq	r7, r1, r0, asr #28
   182ac:	andeq	r7, r1, r0, asr #28
   182b0:	andeq	r7, r1, r0, asr #28
   182b4:	andeq	r7, r1, r0, asr #28
   182b8:	andeq	r7, r1, r0, asr #28
   182bc:	andeq	r7, r1, r0, asr #28
   182c0:	andeq	r7, r1, r0, asr #28
   182c4:	andeq	r7, r1, r0, asr #28
   182c8:	andeq	r7, r1, r0, asr #28
   182cc:	andeq	r7, r1, r0, asr #28
   182d0:	andeq	r7, r1, r0, asr #28
   182d4:	andeq	r7, r1, r0, asr #28
   182d8:	andeq	r7, r1, r0, asr #28
   182dc:	andeq	r7, r1, r8, ror #27
   182e0:	andeq	r8, r1, ip, ror #5
   182e4:	andeq	r7, r1, r8, ror #27
   182e8:	andeq	r7, r1, r0, asr lr
   182ec:	mov	r3, #0
   182f0:	str	r3, [sp, #40]	; 0x28
   182f4:	b	179cc <__assert_fail@plt+0x6640>
   182f8:	mov	r3, #0
   182fc:	str	r3, [sp, #40]	; 0x28
   18300:	b	17964 <__assert_fail@plt+0x65d8>
   18304:	mov	r3, #0
   18308:	str	r3, [sp, #40]	; 0x28
   1830c:	b	17998 <__assert_fail@plt+0x660c>
   18310:	ldr	r3, [sp, #44]	; 0x2c
   18314:	cmp	r3, #0
   18318:	beq	178b0 <__assert_fail@plt+0x6524>
   1831c:	ldr	r3, [sp, #52]	; 0x34
   18320:	mov	fp, r9
   18324:	str	r3, [sp, #60]	; 0x3c
   18328:	b	17a28 <__assert_fail@plt+0x669c>
   1832c:	ldr	r3, [sp, #44]	; 0x2c
   18330:	cmp	r3, #0
   18334:	bne	18768 <__assert_fail@plt+0x73dc>
   18338:	str	r3, [sp, #40]	; 0x28
   1833c:	cmp	sl, #0
   18340:	ldr	r3, [sp, #84]	; 0x54
   18344:	clz	r3, r3
   18348:	lsr	r3, r3, #5
   1834c:	moveq	r3, #0
   18350:	cmp	r3, #0
   18354:	strne	sl, [sp, #84]	; 0x54
   18358:	movne	sl, #0
   1835c:	bne	1838c <__assert_fail@plt+0x7000>
   18360:	cmp	sl, r4
   18364:	movhi	r3, #39	; 0x27
   18368:	strbhi	r3, [r9, r4]
   1836c:	add	r3, r4, #1
   18370:	cmp	sl, r3
   18374:	movhi	r2, #92	; 0x5c
   18378:	strbhi	r2, [r9, r3]
   1837c:	add	r3, r4, #2
   18380:	cmp	sl, r3
   18384:	movhi	r2, #39	; 0x27
   18388:	strbhi	r2, [r9, r3]
   1838c:	mov	r3, #0
   18390:	add	r4, r4, #3
   18394:	str	r6, [sp, #80]	; 0x50
   18398:	mov	fp, r3
   1839c:	mov	r5, #39	; 0x27
   183a0:	b	1786c <__assert_fail@plt+0x64e0>
   183a4:	ldr	r3, [sp, #44]	; 0x2c
   183a8:	cmp	r3, #0
   183ac:	bne	18768 <__assert_fail@plt+0x73dc>
   183b0:	mov	r6, #0
   183b4:	mov	r5, #63	; 0x3f
   183b8:	str	r3, [sp, #40]	; 0x28
   183bc:	mov	r3, fp
   183c0:	b	1786c <__assert_fail@plt+0x64e0>
   183c4:	mov	r2, #0
   183c8:	mov	r3, #0
   183cc:	cmn	r8, #1
   183d0:	strd	r2, [sp, #128]	; 0x80
   183d4:	bne	183e4 <__assert_fail@plt+0x7058>
   183d8:	ldr	r0, [sp, #28]
   183dc:	bl	1120c <strlen@plt>
   183e0:	mov	r8, r0
   183e4:	str	r9, [sp, #100]	; 0x64
   183e8:	mov	r3, #0
   183ec:	strd	sl, [sp, #104]	; 0x68
   183f0:	ldr	sl, [sp, #28]
   183f4:	str	r5, [sp, #112]	; 0x70
   183f8:	mov	r5, r3
   183fc:	ldr	r9, [sp, #68]	; 0x44
   18400:	str	r4, [sp, #116]	; 0x74
   18404:	add	r4, r7, r5
   18408:	add	r3, sp, #128	; 0x80
   1840c:	add	fp, sl, r4
   18410:	sub	r2, r8, r4
   18414:	mov	r1, fp
   18418:	add	r0, sp, #124	; 0x7c
   1841c:	bl	1c7cc <__assert_fail@plt+0xb440>
   18420:	subs	r1, r0, #0
   18424:	beq	18464 <__assert_fail@plt+0x70d8>
   18428:	cmn	r1, #1
   1842c:	beq	187bc <__assert_fail@plt+0x7430>
   18430:	cmn	r1, #2
   18434:	beq	187dc <__assert_fail@plt+0x7450>
   18438:	cmp	r9, #0
   1843c:	bne	18494 <__assert_fail@plt+0x7108>
   18440:	ldr	r0, [sp, #124]	; 0x7c
   18444:	add	r5, r5, r1
   18448:	bl	11134 <iswprint@plt>
   1844c:	cmp	r0, #0
   18450:	add	r0, sp, #128	; 0x80
   18454:	moveq	r6, #0
   18458:	bl	110d4 <mbsinit@plt>
   1845c:	cmp	r0, #0
   18460:	beq	18404 <__assert_fail@plt+0x7078>
   18464:	ldr	r3, [sp, #60]	; 0x3c
   18468:	add	r9, sp, #100	; 0x64
   1846c:	mov	r0, r5
   18470:	ldm	r9, {r9, sl, fp}
   18474:	eor	r2, r6, #1
   18478:	ldr	r5, [sp, #112]	; 0x70
   1847c:	and	r2, r2, r3
   18480:	uxtb	r2, r2
   18484:	ldr	r4, [sp, #116]	; 0x74
   18488:	cmp	r0, #1
   1848c:	bhi	17fa8 <__assert_fail@plt+0x6c1c>
   18490:	b	17f98 <__assert_fail@plt+0x6c0c>
   18494:	cmp	r1, #1
   18498:	beq	18440 <__assert_fail@plt+0x70b4>
   1849c:	add	r2, r4, #1
   184a0:	add	r3, sl, r1
   184a4:	add	r2, sl, r2
   184a8:	add	r4, r3, r4
   184ac:	ldrb	r3, [r2], #1
   184b0:	sub	r3, r3, #91	; 0x5b
   184b4:	cmp	r3, #33	; 0x21
   184b8:	ldrls	pc, [pc, r3, lsl #2]
   184bc:	b	18548 <__assert_fail@plt+0x71bc>
   184c0:	andeq	r8, r1, r4, asr r5
   184c4:	andeq	r8, r1, r4, asr r5
   184c8:	andeq	r8, r1, r8, asr #10
   184cc:	andeq	r8, r1, r4, asr r5
   184d0:	andeq	r8, r1, r8, asr #10
   184d4:	andeq	r8, r1, r4, asr r5
   184d8:	andeq	r8, r1, r8, asr #10
   184dc:	andeq	r8, r1, r8, asr #10
   184e0:	andeq	r8, r1, r8, asr #10
   184e4:	andeq	r8, r1, r8, asr #10
   184e8:	andeq	r8, r1, r8, asr #10
   184ec:	andeq	r8, r1, r8, asr #10
   184f0:	andeq	r8, r1, r8, asr #10
   184f4:	andeq	r8, r1, r8, asr #10
   184f8:	andeq	r8, r1, r8, asr #10
   184fc:	andeq	r8, r1, r8, asr #10
   18500:	andeq	r8, r1, r8, asr #10
   18504:	andeq	r8, r1, r8, asr #10
   18508:	andeq	r8, r1, r8, asr #10
   1850c:	andeq	r8, r1, r8, asr #10
   18510:	andeq	r8, r1, r8, asr #10
   18514:	andeq	r8, r1, r8, asr #10
   18518:	andeq	r8, r1, r8, asr #10
   1851c:	andeq	r8, r1, r8, asr #10
   18520:	andeq	r8, r1, r8, asr #10
   18524:	andeq	r8, r1, r8, asr #10
   18528:	andeq	r8, r1, r8, asr #10
   1852c:	andeq	r8, r1, r8, asr #10
   18530:	andeq	r8, r1, r8, asr #10
   18534:	andeq	r8, r1, r8, asr #10
   18538:	andeq	r8, r1, r8, asr #10
   1853c:	andeq	r8, r1, r8, asr #10
   18540:	andeq	r8, r1, r8, asr #10
   18544:	andeq	r8, r1, r4, asr r5
   18548:	cmp	r4, r2
   1854c:	bne	184ac <__assert_fail@plt+0x7120>
   18550:	b	18440 <__assert_fail@plt+0x70b4>
   18554:	mov	r3, #2
   18558:	ldr	fp, [sp, #100]	; 0x64
   1855c:	str	r3, [sp, #176]	; 0xb0
   18560:	ldr	sl, [sp, #104]	; 0x68
   18564:	b	17a28 <__assert_fail@plt+0x669c>
   18568:	ldr	r2, [sp, #52]	; 0x34
   1856c:	mov	fp, r9
   18570:	ldr	r3, [sp, #60]	; 0x3c
   18574:	and	r3, r3, r2
   18578:	str	r3, [sp, #60]	; 0x3c
   1857c:	b	17a28 <__assert_fail@plt+0x669c>
   18580:	cmp	sl, r4
   18584:	movhi	r2, fp
   18588:	bhi	17900 <__assert_fail@plt+0x6574>
   1858c:	mov	r2, r4
   18590:	b	17910 <__assert_fail@plt+0x6584>
   18594:	mov	r6, r3
   18598:	mov	r5, #63	; 0x3f
   1859c:	b	179d0 <__assert_fail@plt+0x6644>
   185a0:	ldr	r8, [sp, #36]	; 0x24
   185a4:	ldr	r6, [sp, #100]	; 0x64
   185a8:	b	1787c <__assert_fail@plt+0x64f0>
   185ac:	mov	fp, r9
   185b0:	ldr	r8, [sp, #36]	; 0x24
   185b4:	ldr	r3, [sp, #52]	; 0x34
   185b8:	str	r3, [sp, #60]	; 0x3c
   185bc:	b	17a28 <__assert_fail@plt+0x669c>
   185c0:	ldr	r8, [sp, #36]	; 0x24
   185c4:	ldr	r6, [sp, #100]	; 0x64
   185c8:	b	17714 <__assert_fail@plt+0x6388>
   185cc:	mov	r3, #0
   185d0:	add	r4, r4, #4
   185d4:	mov	fp, r2
   185d8:	mov	r6, r3
   185dc:	mov	r5, #48	; 0x30
   185e0:	b	1786c <__assert_fail@plt+0x64e0>
   185e4:	mov	r6, r3
   185e8:	b	18068 <__assert_fail@plt+0x6cdc>
   185ec:	mov	r3, #1
   185f0:	movw	r2, #56900	; 0xde44
   185f4:	movt	r2, #1
   185f8:	mov	r4, r3
   185fc:	mov	r9, sl
   18600:	str	r3, [sp, #32]
   18604:	str	sl, [sp, #44]	; 0x2c
   18608:	str	r3, [sp, #48]	; 0x30
   1860c:	str	sl, [sp, #52]	; 0x34
   18610:	str	r3, [sp, #56]	; 0x38
   18614:	str	r3, [sp, #60]	; 0x3c
   18618:	str	sl, [sp, #64]	; 0x40
   1861c:	str	sl, [sp, #68]	; 0x44
   18620:	str	r2, [sp, #72]	; 0x48
   18624:	str	sl, [sp, #80]	; 0x50
   18628:	str	sl, [sp, #84]	; 0x54
   1862c:	str	sl, [sp, #88]	; 0x58
   18630:	b	17120 <__assert_fail@plt+0x5d94>
   18634:	mov	r3, #0
   18638:	mov	r5, #48	; 0x30
   1863c:	mov	r6, r3
   18640:	b	1786c <__assert_fail@plt+0x64e0>
   18644:	cmp	sl, r4
   18648:	mov	r5, #48	; 0x30
   1864c:	movhi	r3, #48	; 0x30
   18650:	strbhi	r3, [r9, r4]
   18654:	add	r3, r2, #2
   18658:	add	r4, r2, #3
   1865c:	cmp	sl, r3
   18660:	movhi	r1, #48	; 0x30
   18664:	strbhi	r1, [r9, r3]
   18668:	mov	r3, #0
   1866c:	b	17948 <__assert_fail@plt+0x65bc>
   18670:	ldr	r3, [sp, #48]	; 0x30
   18674:	str	r3, [sp, #40]	; 0x28
   18678:	b	17f54 <__assert_fail@plt+0x6bc8>
   1867c:	ldr	r2, [sp, #28]
   18680:	ldrb	r2, [r2, r3]
   18684:	sub	r1, r2, #33	; 0x21
   18688:	cmp	r1, #29
   1868c:	ldrls	pc, [pc, r1, lsl #2]
   18690:	b	179cc <__assert_fail@plt+0x6640>
   18694:	andeq	r8, r1, ip, lsl #14
   18698:	andeq	r7, r1, ip, asr #19
   1869c:	andeq	r7, r1, ip, asr #19
   186a0:	andeq	r7, r1, ip, asr #19
   186a4:	andeq	r7, r1, ip, asr #19
   186a8:	andeq	r7, r1, ip, asr #19
   186ac:	andeq	r8, r1, ip, lsl #14
   186b0:	andeq	r8, r1, ip, lsl #14
   186b4:	andeq	r8, r1, ip, lsl #14
   186b8:	andeq	r7, r1, ip, asr #19
   186bc:	andeq	r7, r1, ip, asr #19
   186c0:	andeq	r7, r1, ip, asr #19
   186c4:	andeq	r8, r1, ip, lsl #14
   186c8:	andeq	r7, r1, ip, asr #19
   186cc:	andeq	r8, r1, ip, lsl #14
   186d0:	andeq	r7, r1, ip, asr #19
   186d4:	andeq	r7, r1, ip, asr #19
   186d8:	andeq	r7, r1, ip, asr #19
   186dc:	andeq	r7, r1, ip, asr #19
   186e0:	andeq	r7, r1, ip, asr #19
   186e4:	andeq	r7, r1, ip, asr #19
   186e8:	andeq	r7, r1, ip, asr #19
   186ec:	andeq	r7, r1, ip, asr #19
   186f0:	andeq	r7, r1, ip, asr #19
   186f4:	andeq	r7, r1, ip, asr #19
   186f8:	andeq	r7, r1, ip, asr #19
   186fc:	andeq	r7, r1, ip, asr #19
   18700:	andeq	r8, r1, ip, lsl #14
   18704:	andeq	r8, r1, ip, lsl #14
   18708:	andeq	r8, r1, ip, lsl #14
   1870c:	ldr	r1, [sp, #44]	; 0x2c
   18710:	cmp	r1, #0
   18714:	bne	18974 <__assert_fail@plt+0x75e8>
   18718:	cmp	sl, r4
   1871c:	mov	r7, r3
   18720:	movhi	r1, #63	; 0x3f
   18724:	mov	r5, r2
   18728:	mov	r3, fp
   1872c:	strbhi	r1, [r9, r4]
   18730:	add	r1, r4, #1
   18734:	cmp	sl, r1
   18738:	movhi	r0, #34	; 0x22
   1873c:	strbhi	r0, [r9, r1]
   18740:	add	r1, r4, #2
   18744:	cmp	sl, r1
   18748:	movhi	r0, #34	; 0x22
   1874c:	strbhi	r0, [r9, r1]
   18750:	add	r1, r4, #3
   18754:	add	r4, r4, #4
   18758:	cmp	sl, r1
   1875c:	movhi	r0, #63	; 0x3f
   18760:	strbhi	r0, [r9, r1]
   18764:	b	17948 <__assert_fail@plt+0x65bc>
   18768:	mov	fp, r9
   1876c:	b	17a28 <__assert_fail@plt+0x669c>
   18770:	ldr	r3, [sp, #188]	; 0xbc
   18774:	ldrb	r3, [r3]
   18778:	cmp	r3, #0
   1877c:	beq	170b8 <__assert_fail@plt+0x5d2c>
   18780:	ldr	r2, [sp, #188]	; 0xbc
   18784:	cmp	sl, r4
   18788:	bls	187a8 <__assert_fail@plt+0x741c>
   1878c:	strb	r3, [fp, r4]
   18790:	add	r4, r4, #1
   18794:	ldrb	r3, [r2, #1]!
   18798:	cmp	r3, #0
   1879c:	beq	170b8 <__assert_fail@plt+0x5d2c>
   187a0:	cmp	sl, r4
   187a4:	bhi	1878c <__assert_fail@plt+0x7400>
   187a8:	ldrb	r3, [r2, #1]!
   187ac:	add	r4, r4, #1
   187b0:	cmp	r3, #0
   187b4:	bne	18784 <__assert_fail@plt+0x73f8>
   187b8:	b	170b8 <__assert_fail@plt+0x5d2c>
   187bc:	add	r9, sp, #100	; 0x64
   187c0:	mov	r0, r5
   187c4:	ldr	r2, [sp, #60]	; 0x3c
   187c8:	mov	r6, #0
   187cc:	ldm	r9, {r9, sl, fp}
   187d0:	ldr	r5, [sp, #112]	; 0x70
   187d4:	ldr	r4, [sp, #116]	; 0x74
   187d8:	b	18488 <__assert_fail@plt+0x70fc>
   187dc:	cmp	r4, r8
   187e0:	add	r9, sp, #100	; 0x64
   187e4:	mov	r1, r4
   187e8:	mov	r2, fp
   187ec:	ldm	r9, {r9, sl, fp}
   187f0:	mov	r3, r5
   187f4:	mov	r0, r5
   187f8:	ldr	r5, [sp, #112]	; 0x70
   187fc:	ldr	r4, [sp, #116]	; 0x74
   18800:	bcs	18834 <__assert_fail@plt+0x74a8>
   18804:	ldrb	r6, [r2]
   18808:	cmp	r6, #0
   1880c:	bne	18820 <__assert_fail@plt+0x7494>
   18810:	b	1896c <__assert_fail@plt+0x75e0>
   18814:	ldrb	r6, [r2, #1]!
   18818:	cmp	r6, #0
   1881c:	beq	18904 <__assert_fail@plt+0x7578>
   18820:	add	r3, r3, #1
   18824:	add	r1, r7, r3
   18828:	cmp	r8, r1
   1882c:	bhi	18814 <__assert_fail@plt+0x7488>
   18830:	mov	r0, r3
   18834:	mov	r6, #0
   18838:	ldr	r2, [sp, #60]	; 0x3c
   1883c:	b	18488 <__assert_fail@plt+0x70fc>
   18840:	mov	r3, #1
   18844:	mov	r4, #0
   18848:	mov	r9, r4
   1884c:	str	r3, [sp, #32]
   18850:	str	r3, [sp, #44]	; 0x2c
   18854:	str	r3, [sp, #48]	; 0x30
   18858:	str	r4, [sp, #52]	; 0x34
   1885c:	str	r3, [sp, #56]	; 0x38
   18860:	str	r3, [sp, #60]	; 0x3c
   18864:	str	r3, [sp, #88]	; 0x58
   18868:	movw	r3, #56900	; 0xde44
   1886c:	movt	r3, #1
   18870:	str	r4, [sp, #64]	; 0x40
   18874:	str	r4, [sp, #68]	; 0x44
   18878:	str	r3, [sp, #72]	; 0x48
   1887c:	str	r4, [sp, #80]	; 0x50
   18880:	str	r4, [sp, #84]	; 0x54
   18884:	b	17120 <__assert_fail@plt+0x5d94>
   18888:	mov	fp, r9
   1888c:	b	17a3c <__assert_fail@plt+0x66b0>
   18890:	ldr	r3, [sp, #48]	; 0x30
   18894:	b	183b0 <__assert_fail@plt+0x7024>
   18898:	mov	r2, r3
   1889c:	ldr	r3, [sp, #72]	; 0x48
   188a0:	cmp	r3, #0
   188a4:	moveq	r2, #0
   188a8:	andne	r2, r2, #1
   188ac:	cmp	r2, #0
   188b0:	beq	188e0 <__assert_fail@plt+0x7554>
   188b4:	mov	r2, r3
   188b8:	ldrb	r3, [r3]
   188bc:	cmp	r3, #0
   188c0:	beq	188e0 <__assert_fail@plt+0x7554>
   188c4:	cmp	sl, r4
   188c8:	bls	188f0 <__assert_fail@plt+0x7564>
   188cc:	strb	r3, [fp, r4]
   188d0:	add	r4, r4, #1
   188d4:	ldrb	r3, [r2, #1]!
   188d8:	cmp	r3, #0
   188dc:	bne	188c4 <__assert_fail@plt+0x7538>
   188e0:	cmp	sl, r4
   188e4:	movhi	r3, #0
   188e8:	strbhi	r3, [fp, r4]
   188ec:	b	17a78 <__assert_fail@plt+0x66ec>
   188f0:	ldrb	r3, [r2, #1]!
   188f4:	add	r4, r4, #1
   188f8:	cmp	r3, #0
   188fc:	bne	188c4 <__assert_fail@plt+0x7538>
   18900:	b	188e0 <__assert_fail@plt+0x7554>
   18904:	mov	r0, r3
   18908:	ldr	r2, [sp, #60]	; 0x3c
   1890c:	b	18488 <__assert_fail@plt+0x70fc>
   18910:	mov	ip, #5
   18914:	mov	r3, r8
   18918:	ldr	r1, [sp, #84]	; 0x54
   1891c:	str	ip, [sp]
   18920:	ldr	r2, [sp, #180]	; 0xb4
   18924:	ldr	ip, [sp, #188]	; 0xbc
   18928:	ldr	r0, [sp, #184]	; 0xb8
   1892c:	str	r2, [sp, #4]
   18930:	ldr	r2, [sp, #28]
   18934:	str	ip, [sp, #12]
   18938:	ldr	ip, [sp, #192]	; 0xc0
   1893c:	str	r0, [sp, #8]
   18940:	mov	r0, fp
   18944:	str	ip, [sp, #16]
   18948:	bl	16ffc <__assert_fail@plt+0x5c70>
   1894c:	mov	r4, r0
   18950:	b	17a78 <__assert_fail@plt+0x66ec>
   18954:	mov	r6, r3
   18958:	str	r3, [sp, #40]	; 0x28
   1895c:	b	179e8 <__assert_fail@plt+0x665c>
   18960:	mov	r3, #2
   18964:	str	r3, [sp, #176]	; 0xb0
   18968:	b	17a28 <__assert_fail@plt+0x669c>
   1896c:	ldr	r2, [sp, #60]	; 0x3c
   18970:	b	18488 <__assert_fail@plt+0x70fc>
   18974:	mov	r3, #5
   18978:	mov	fp, r9
   1897c:	str	r3, [sp, #176]	; 0xb0
   18980:	b	17a3c <__assert_fail@plt+0x66b0>
   18984:	mov	r1, #1
   18988:	mov	r9, #0
   1898c:	mov	r3, r9
   18990:	mov	r2, r9
   18994:	str	r1, [sp, #32]
   18998:	str	sl, [sp, #84]	; 0x54
   1899c:	b	177c4 <__assert_fail@plt+0x6438>
   189a0:	mov	r3, #0
   189a4:	mov	r2, #1
   189a8:	mov	r9, r3
   189ac:	mov	r4, r3
   189b0:	str	r2, [sp, #32]
   189b4:	strd	r2, [sp, #44]	; 0x2c
   189b8:	strd	r2, [sp, #56]	; 0x38
   189bc:	str	r3, [sp, #80]	; 0x50
   189c0:	str	r3, [sp, #84]	; 0x54
   189c4:	str	r3, [sp, #88]	; 0x58
   189c8:	movw	r3, #56920	; 0xde58
   189cc:	movt	r3, #1
   189d0:	str	r2, [sp, #52]	; 0x34
   189d4:	str	r2, [sp, #64]	; 0x40
   189d8:	str	r2, [sp, #68]	; 0x44
   189dc:	str	r3, [sp, #72]	; 0x48
   189e0:	b	17120 <__assert_fail@plt+0x5d94>
   189e4:	bl	11344 <abort@plt>
   189e8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   189ec:	mov	r4, r0
   189f0:	mov	r5, r3
   189f4:	strd	r6, [sp, #8]
   189f8:	movw	r7, #61764	; 0xf144
   189fc:	movt	r7, #2
   18a00:	strd	r8, [sp, #16]
   18a04:	strd	sl, [sp, #24]
   18a08:	mov	sl, r1
   18a0c:	mov	fp, r2
   18a10:	str	lr, [sp, #32]
   18a14:	sub	sp, sp, #60	; 0x3c
   18a18:	bl	1123c <__errno_location@plt>
   18a1c:	mov	r8, r0
   18a20:	cmn	r4, #-2147483647	; 0x80000001
   18a24:	ldr	r6, [r7]
   18a28:	movne	r0, #0
   18a2c:	moveq	r0, #1
   18a30:	ldr	r3, [r8]
   18a34:	orrs	r0, r0, r4, lsr #31
   18a38:	str	r3, [sp, #28]
   18a3c:	bne	18bcc <__assert_fail@plt+0x7840>
   18a40:	ldr	r3, [r7, #4]
   18a44:	cmp	r3, r4
   18a48:	bgt	18aa8 <__assert_fail@plt+0x771c>
   18a4c:	add	r1, r7, #8
   18a50:	sub	r2, r4, r3
   18a54:	str	r3, [sp, #52]	; 0x34
   18a58:	cmp	r6, r1
   18a5c:	add	r2, r2, #1
   18a60:	beq	18ba4 <__assert_fail@plt+0x7818>
   18a64:	mov	r1, #8
   18a68:	mov	r0, r6
   18a6c:	mvn	r3, #-2147483648	; 0x80000000
   18a70:	str	r1, [sp]
   18a74:	add	r1, sp, #52	; 0x34
   18a78:	bl	1b7c0 <__assert_fail@plt+0xa434>
   18a7c:	mov	r6, r0
   18a80:	str	r0, [r7]
   18a84:	ldr	r0, [r7, #4]
   18a88:	mov	r1, #0
   18a8c:	ldr	r2, [sp, #52]	; 0x34
   18a90:	sub	r2, r2, r0
   18a94:	add	r0, r6, r0, lsl #3
   18a98:	lsl	r2, r2, #3
   18a9c:	bl	11254 <memset@plt>
   18aa0:	ldr	r3, [sp, #52]	; 0x34
   18aa4:	str	r3, [r7, #4]
   18aa8:	ldr	r1, [r5, #4]
   18aac:	add	r0, r6, r4, lsl #3
   18ab0:	add	ip, r5, #8
   18ab4:	mov	r3, fp
   18ab8:	mov	r2, sl
   18abc:	ldr	r7, [r0, #4]
   18ac0:	str	r0, [sp, #36]	; 0x24
   18ac4:	str	ip, [sp, #40]	; 0x28
   18ac8:	orr	r0, r1, #1
   18acc:	ldr	r9, [r6, r4, lsl #3]
   18ad0:	str	ip, [sp, #8]
   18ad4:	ldr	lr, [r5, #44]	; 0x2c
   18ad8:	str	r0, [sp, #4]
   18adc:	ldr	ip, [r5]
   18ae0:	mov	r1, r9
   18ae4:	str	ip, [sp, #32]
   18ae8:	ldr	ip, [r5, #40]	; 0x28
   18aec:	str	ip, [sp, #12]
   18af0:	ldr	ip, [sp, #32]
   18af4:	str	lr, [sp, #16]
   18af8:	str	r0, [sp, #44]	; 0x2c
   18afc:	mov	r0, r7
   18b00:	str	ip, [sp]
   18b04:	bl	16ffc <__assert_fail@plt+0x5c70>
   18b08:	cmp	r9, r0
   18b0c:	bhi	18b7c <__assert_fail@plt+0x77f0>
   18b10:	add	r9, r0, #1
   18b14:	movw	r3, #61900	; 0xf1cc
   18b18:	movt	r3, #2
   18b1c:	cmp	r7, r3
   18b20:	str	r9, [r6, r4, lsl #3]
   18b24:	beq	18b30 <__assert_fail@plt+0x77a4>
   18b28:	mov	r0, r7
   18b2c:	bl	12dd8 <__assert_fail@plt+0x1a4c>
   18b30:	mov	r0, r9
   18b34:	bl	1b51c <__assert_fail@plt+0xa190>
   18b38:	ldr	ip, [r5]
   18b3c:	mov	r3, fp
   18b40:	mov	r2, sl
   18b44:	mov	r1, r9
   18b48:	mov	r7, r0
   18b4c:	ldr	lr, [sp, #36]	; 0x24
   18b50:	ldr	r4, [r5, #40]	; 0x28
   18b54:	str	r0, [lr, #4]
   18b58:	ldr	lr, [r5, #44]	; 0x2c
   18b5c:	str	ip, [sp]
   18b60:	ldr	ip, [sp, #44]	; 0x2c
   18b64:	str	ip, [sp, #4]
   18b68:	ldr	ip, [sp, #40]	; 0x28
   18b6c:	str	r4, [sp, #12]
   18b70:	str	lr, [sp, #16]
   18b74:	str	ip, [sp, #8]
   18b78:	bl	16ffc <__assert_fail@plt+0x5c70>
   18b7c:	ldr	r3, [sp, #28]
   18b80:	mov	r0, r7
   18b84:	str	r3, [r8]
   18b88:	add	sp, sp, #60	; 0x3c
   18b8c:	ldrd	r4, [sp]
   18b90:	ldrd	r6, [sp, #8]
   18b94:	ldrd	r8, [sp, #16]
   18b98:	ldrd	sl, [sp, #24]
   18b9c:	add	sp, sp, #32
   18ba0:	pop	{pc}		; (ldr pc, [sp], #4)
   18ba4:	mov	r1, #8
   18ba8:	mvn	r3, #-2147483648	; 0x80000000
   18bac:	str	r1, [sp]
   18bb0:	add	r1, sp, #52	; 0x34
   18bb4:	bl	1b7c0 <__assert_fail@plt+0xa434>
   18bb8:	ldrd	r2, [r7, #8]
   18bbc:	mov	r6, r0
   18bc0:	str	r0, [r7]
   18bc4:	strd	r2, [r0]
   18bc8:	b	18a84 <__assert_fail@plt+0x76f8>
   18bcc:	bl	11344 <abort@plt>
   18bd0:	strd	r4, [sp, #-16]!
   18bd4:	mov	r5, r0
   18bd8:	str	r6, [sp, #8]
   18bdc:	str	lr, [sp, #12]
   18be0:	bl	1123c <__errno_location@plt>
   18be4:	mov	r4, r0
   18be8:	cmp	r5, #0
   18bec:	ldr	r0, [pc, #32]	; 18c14 <__assert_fail@plt+0x7888>
   18bf0:	mov	r1, #48	; 0x30
   18bf4:	movne	r0, r5
   18bf8:	ldr	r6, [r4]
   18bfc:	bl	1b960 <__assert_fail@plt+0xa5d4>
   18c00:	str	r6, [r4]
   18c04:	ldrd	r4, [sp]
   18c08:	ldr	r6, [sp, #8]
   18c0c:	add	sp, sp, #12
   18c10:	pop	{pc}		; (ldr pc, [sp], #4)
   18c14:	andeq	pc, r2, ip, asr #5
   18c18:	ldr	r3, [pc, #12]	; 18c2c <__assert_fail@plt+0x78a0>
   18c1c:	cmp	r0, #0
   18c20:	moveq	r0, r3
   18c24:	ldr	r0, [r0]
   18c28:	bx	lr
   18c2c:	andeq	pc, r2, ip, asr #5
   18c30:	ldr	r3, [pc, #12]	; 18c44 <__assert_fail@plt+0x78b8>
   18c34:	cmp	r0, #0
   18c38:	moveq	r0, r3
   18c3c:	str	r1, [r0]
   18c40:	bx	lr
   18c44:	andeq	pc, r2, ip, asr #5
   18c48:	ldr	r3, [pc, #52]	; 18c84 <__assert_fail@plt+0x78f8>
   18c4c:	cmp	r0, #0
   18c50:	push	{lr}		; (str lr, [sp, #-4]!)
   18c54:	lsr	lr, r1, #5
   18c58:	and	r1, r1, #31
   18c5c:	moveq	r0, r3
   18c60:	add	r3, r0, #8
   18c64:	ldr	ip, [r3, lr, lsl #2]
   18c68:	lsr	r0, ip, r1
   18c6c:	eor	r2, r2, r0
   18c70:	and	r0, r0, #1
   18c74:	and	r2, r2, #1
   18c78:	eor	r1, ip, r2, lsl r1
   18c7c:	str	r1, [r3, lr, lsl #2]
   18c80:	pop	{pc}		; (ldr pc, [sp], #4)
   18c84:	andeq	pc, r2, ip, asr #5
   18c88:	ldr	r3, [pc, #16]	; 18ca0 <__assert_fail@plt+0x7914>
   18c8c:	cmp	r0, #0
   18c90:	movne	r3, r0
   18c94:	ldr	r0, [r3, #4]
   18c98:	str	r1, [r3, #4]
   18c9c:	bx	lr
   18ca0:	andeq	pc, r2, ip, asr #5
   18ca4:	ldr	r3, [pc, #48]	; 18cdc <__assert_fail@plt+0x7950>
   18ca8:	cmp	r0, #0
   18cac:	mov	ip, #10
   18cb0:	moveq	r0, r3
   18cb4:	cmp	r2, #0
   18cb8:	cmpne	r1, #0
   18cbc:	str	ip, [r0]
   18cc0:	beq	18cd0 <__assert_fail@plt+0x7944>
   18cc4:	str	r1, [r0, #40]	; 0x28
   18cc8:	str	r2, [r0, #44]	; 0x2c
   18ccc:	bx	lr
   18cd0:	str	r4, [sp, #-8]!
   18cd4:	str	lr, [sp, #4]
   18cd8:	bl	11344 <abort@plt>
   18cdc:	andeq	pc, r2, ip, asr #5
   18ce0:	strd	r4, [sp, #-28]!	; 0xffffffe4
   18ce4:	strd	r6, [sp, #8]
   18ce8:	mov	r7, r0
   18cec:	mov	r6, r1
   18cf0:	strd	r8, [sp, #16]
   18cf4:	mov	r8, r2
   18cf8:	mov	r9, r3
   18cfc:	str	lr, [sp, #24]
   18d00:	sub	sp, sp, #28
   18d04:	ldr	r4, [sp, #56]	; 0x38
   18d08:	ldr	ip, [pc, #104]	; 18d78 <__assert_fail@plt+0x79ec>
   18d0c:	cmp	r4, #0
   18d10:	moveq	r4, ip
   18d14:	bl	1123c <__errno_location@plt>
   18d18:	ldr	ip, [r4, #44]	; 0x2c
   18d1c:	mov	r5, r0
   18d20:	mov	r1, r6
   18d24:	add	lr, r4, #8
   18d28:	mov	r3, r9
   18d2c:	ldr	r6, [r5]
   18d30:	mov	r2, r8
   18d34:	mov	r0, r7
   18d38:	str	ip, [sp, #16]
   18d3c:	ldr	ip, [r4, #40]	; 0x28
   18d40:	str	lr, [sp, #8]
   18d44:	str	ip, [sp, #12]
   18d48:	ldr	ip, [r4, #4]
   18d4c:	str	ip, [sp, #4]
   18d50:	ldr	ip, [r4]
   18d54:	str	ip, [sp]
   18d58:	bl	16ffc <__assert_fail@plt+0x5c70>
   18d5c:	str	r6, [r5]
   18d60:	add	sp, sp, #28
   18d64:	ldrd	r4, [sp]
   18d68:	ldrd	r6, [sp, #8]
   18d6c:	ldrd	r8, [sp, #16]
   18d70:	add	sp, sp, #24
   18d74:	pop	{pc}		; (ldr pc, [sp], #4)
   18d78:	andeq	pc, r2, ip, asr #5
   18d7c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18d80:	cmp	r2, #0
   18d84:	ldr	r4, [pc, #192]	; 18e4c <__assert_fail@plt+0x7ac0>
   18d88:	movne	r4, r2
   18d8c:	strd	r6, [sp, #8]
   18d90:	strd	r8, [sp, #16]
   18d94:	mov	r9, r1
   18d98:	mov	r8, r0
   18d9c:	strd	sl, [sp, #24]
   18da0:	str	lr, [sp, #32]
   18da4:	sub	sp, sp, #36	; 0x24
   18da8:	bl	1123c <__errno_location@plt>
   18dac:	ldr	r5, [r4, #4]
   18db0:	mov	r6, r0
   18db4:	add	r7, r4, #8
   18db8:	mov	r1, #0
   18dbc:	mov	r3, r9
   18dc0:	ldr	ip, [r4, #44]	; 0x2c
   18dc4:	mov	r2, r8
   18dc8:	mov	r0, r1
   18dcc:	ldr	sl, [r6]
   18dd0:	orr	r5, r5, #1
   18dd4:	str	ip, [sp, #16]
   18dd8:	ldr	ip, [r4, #40]	; 0x28
   18ddc:	stmib	sp, {r5, r7, ip}
   18de0:	ldr	ip, [r4]
   18de4:	str	ip, [sp]
   18de8:	bl	16ffc <__assert_fail@plt+0x5c70>
   18dec:	add	r1, r0, #1
   18df0:	mov	r0, r1
   18df4:	str	r1, [sp, #28]
   18df8:	bl	1b51c <__assert_fail@plt+0xa190>
   18dfc:	ldr	ip, [r4, #44]	; 0x2c
   18e00:	mov	fp, r0
   18e04:	mov	r3, r9
   18e08:	mov	r2, r8
   18e0c:	ldr	r1, [sp, #28]
   18e10:	str	ip, [sp, #16]
   18e14:	ldr	ip, [r4, #40]	; 0x28
   18e18:	stmib	sp, {r5, r7, ip}
   18e1c:	ldr	ip, [r4]
   18e20:	str	ip, [sp]
   18e24:	bl	16ffc <__assert_fail@plt+0x5c70>
   18e28:	mov	r0, fp
   18e2c:	str	sl, [r6]
   18e30:	add	sp, sp, #36	; 0x24
   18e34:	ldrd	r4, [sp]
   18e38:	ldrd	r6, [sp, #8]
   18e3c:	ldrd	r8, [sp, #16]
   18e40:	ldrd	sl, [sp, #24]
   18e44:	add	sp, sp, #32
   18e48:	pop	{pc}		; (ldr pc, [sp], #4)
   18e4c:	andeq	pc, r2, ip, asr #5
   18e50:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18e54:	cmp	r3, #0
   18e58:	ldr	r4, [pc, #220]	; 18f3c <__assert_fail@plt+0x7bb0>
   18e5c:	movne	r4, r3
   18e60:	strd	r6, [sp, #8]
   18e64:	mov	r6, r2
   18e68:	strd	r8, [sp, #16]
   18e6c:	mov	r9, r0
   18e70:	strd	sl, [sp, #24]
   18e74:	mov	sl, r1
   18e78:	str	lr, [sp, #32]
   18e7c:	sub	sp, sp, #44	; 0x2c
   18e80:	bl	1123c <__errno_location@plt>
   18e84:	ldr	r5, [r4, #4]
   18e88:	mov	r7, r0
   18e8c:	mov	r1, #0
   18e90:	add	r8, r4, #8
   18e94:	mov	r3, sl
   18e98:	ldr	ip, [r4, #44]	; 0x2c
   18e9c:	mov	r2, r9
   18ea0:	mov	r0, r1
   18ea4:	ldr	lr, [r7]
   18ea8:	cmp	r6, r1
   18eac:	orreq	r5, r5, #1
   18eb0:	str	ip, [sp, #16]
   18eb4:	ldr	ip, [r4, #40]	; 0x28
   18eb8:	stmib	sp, {r5, r8, ip}
   18ebc:	ldr	ip, [r4]
   18ec0:	str	lr, [sp, #28]
   18ec4:	str	ip, [sp]
   18ec8:	bl	16ffc <__assert_fail@plt+0x5c70>
   18ecc:	add	r1, r0, #1
   18ed0:	mov	fp, r0
   18ed4:	mov	r0, r1
   18ed8:	str	r1, [sp, #36]	; 0x24
   18edc:	bl	1b51c <__assert_fail@plt+0xa190>
   18ee0:	ldr	ip, [r4, #44]	; 0x2c
   18ee4:	mov	r3, sl
   18ee8:	mov	r2, r9
   18eec:	ldr	r1, [sp, #36]	; 0x24
   18ef0:	str	ip, [sp, #16]
   18ef4:	ldr	ip, [r4, #40]	; 0x28
   18ef8:	str	r0, [sp, #32]
   18efc:	stmib	sp, {r5, r8, ip}
   18f00:	ldr	ip, [r4]
   18f04:	str	ip, [sp]
   18f08:	bl	16ffc <__assert_fail@plt+0x5c70>
   18f0c:	ldr	lr, [sp, #28]
   18f10:	cmp	r6, #0
   18f14:	ldr	r0, [sp, #32]
   18f18:	str	lr, [r7]
   18f1c:	strne	fp, [r6]
   18f20:	add	sp, sp, #44	; 0x2c
   18f24:	ldrd	r4, [sp]
   18f28:	ldrd	r6, [sp, #8]
   18f2c:	ldrd	r8, [sp, #16]
   18f30:	ldrd	sl, [sp, #24]
   18f34:	add	sp, sp, #32
   18f38:	pop	{pc}		; (ldr pc, [sp], #4)
   18f3c:	andeq	pc, r2, ip, asr #5
   18f40:	strd	r4, [sp, #-24]!	; 0xffffffe8
   18f44:	movw	r5, #61764	; 0xf144
   18f48:	movt	r5, #2
   18f4c:	ldr	r3, [r5, #4]
   18f50:	strd	r6, [sp, #8]
   18f54:	str	r8, [sp, #16]
   18f58:	str	lr, [sp, #20]
   18f5c:	ldr	r7, [r5]
   18f60:	cmp	r3, #1
   18f64:	ble	18f88 <__assert_fail@plt+0x7bfc>
   18f68:	mov	r4, #1
   18f6c:	add	r6, r7, #4
   18f70:	ldr	r0, [r6, r4, lsl #3]
   18f74:	add	r4, r4, #1
   18f78:	bl	12dd8 <__assert_fail@plt+0x1a4c>
   18f7c:	ldr	r3, [r5, #4]
   18f80:	cmp	r3, r4
   18f84:	bgt	18f70 <__assert_fail@plt+0x7be4>
   18f88:	ldr	r0, [r7, #4]
   18f8c:	movw	r4, #61900	; 0xf1cc
   18f90:	movt	r4, #2
   18f94:	cmp	r0, r4
   18f98:	beq	18fac <__assert_fail@plt+0x7c20>
   18f9c:	bl	12dd8 <__assert_fail@plt+0x1a4c>
   18fa0:	mov	r3, #256	; 0x100
   18fa4:	str	r3, [r5, #8]
   18fa8:	str	r4, [r5, #12]
   18fac:	ldr	r4, [pc, #44]	; 18fe0 <__assert_fail@plt+0x7c54>
   18fb0:	cmp	r7, r4
   18fb4:	beq	18fc4 <__assert_fail@plt+0x7c38>
   18fb8:	mov	r0, r7
   18fbc:	bl	12dd8 <__assert_fail@plt+0x1a4c>
   18fc0:	str	r4, [r5]
   18fc4:	mov	r3, #1
   18fc8:	ldrd	r6, [sp, #8]
   18fcc:	str	r3, [r5, #4]
   18fd0:	ldrd	r4, [sp]
   18fd4:	ldr	r8, [sp, #16]
   18fd8:	add	sp, sp, #20
   18fdc:	pop	{pc}		; (ldr pc, [sp], #4)
   18fe0:	andeq	pc, r2, ip, asr #2
   18fe4:	ldr	r3, [pc, #4]	; 18ff0 <__assert_fail@plt+0x7c64>
   18fe8:	mvn	r2, #0
   18fec:	b	189e8 <__assert_fail@plt+0x765c>
   18ff0:	andeq	pc, r2, ip, asr #5
   18ff4:	ldr	r3, [pc]	; 18ffc <__assert_fail@plt+0x7c70>
   18ff8:	b	189e8 <__assert_fail@plt+0x765c>
   18ffc:	andeq	pc, r2, ip, asr #5
   19000:	strd	r4, [sp, #-36]!	; 0xffffffdc
   19004:	movw	r4, #61764	; 0xf144
   19008:	movt	r4, #2
   1900c:	strd	r6, [sp, #8]
   19010:	strd	r8, [sp, #16]
   19014:	strd	sl, [sp, #24]
   19018:	mov	sl, r0
   1901c:	str	lr, [sp, #32]
   19020:	sub	sp, sp, #44	; 0x2c
   19024:	bl	1123c <__errno_location@plt>
   19028:	ldr	r3, [r0]
   1902c:	mov	r8, r0
   19030:	ldr	r2, [r4, #4]
   19034:	ldr	r5, [r4]
   19038:	str	r3, [sp, #28]
   1903c:	cmp	r2, #0
   19040:	bgt	1909c <__assert_fail@plt+0x7d10>
   19044:	add	r3, r4, #8
   19048:	str	r2, [sp, #36]	; 0x24
   1904c:	rsb	r2, r2, #1
   19050:	cmp	r5, r3
   19054:	beq	19168 <__assert_fail@plt+0x7ddc>
   19058:	mov	r1, #8
   1905c:	mov	r0, r5
   19060:	mvn	r3, #-2147483648	; 0x80000000
   19064:	str	r1, [sp]
   19068:	add	r1, sp, #36	; 0x24
   1906c:	bl	1b7c0 <__assert_fail@plt+0xa434>
   19070:	mov	r5, r0
   19074:	str	r0, [r4]
   19078:	ldr	r0, [r4, #4]
   1907c:	mov	r1, #0
   19080:	ldr	r2, [sp, #36]	; 0x24
   19084:	sub	r2, r2, r0
   19088:	add	r0, r5, r0, lsl #3
   1908c:	lsl	r2, r2, #3
   19090:	bl	11254 <memset@plt>
   19094:	ldr	r3, [sp, #36]	; 0x24
   19098:	str	r3, [r4, #4]
   1909c:	movw	r4, #61900	; 0xf1cc
   190a0:	movt	r4, #2
   190a4:	ldr	r9, [r5]
   190a8:	add	fp, r4, #264	; 0x108
   190ac:	mvn	r3, #0
   190b0:	ldr	r7, [r4, #260]	; 0x104
   190b4:	mov	r2, sl
   190b8:	ldr	r6, [r5, #4]
   190bc:	str	fp, [sp, #8]
   190c0:	mov	r1, r9
   190c4:	ldr	ip, [r4, #256]	; 0x100
   190c8:	orr	r7, r7, #1
   190cc:	ldr	lr, [r4, #300]	; 0x12c
   190d0:	mov	r0, r6
   190d4:	str	ip, [sp]
   190d8:	str	r7, [sp, #4]
   190dc:	str	lr, [sp, #16]
   190e0:	ldr	ip, [r4, #296]	; 0x128
   190e4:	str	ip, [sp, #12]
   190e8:	bl	16ffc <__assert_fail@plt+0x5c70>
   190ec:	cmp	r9, r0
   190f0:	bhi	19140 <__assert_fail@plt+0x7db4>
   190f4:	add	r9, r0, #1
   190f8:	cmp	r6, r4
   190fc:	str	r9, [r5]
   19100:	beq	1910c <__assert_fail@plt+0x7d80>
   19104:	mov	r0, r6
   19108:	bl	12dd8 <__assert_fail@plt+0x1a4c>
   1910c:	mov	r0, r9
   19110:	bl	1b51c <__assert_fail@plt+0xa190>
   19114:	ldr	r3, [r4, #256]	; 0x100
   19118:	mov	r2, sl
   1911c:	mov	r1, r9
   19120:	mov	r6, r0
   19124:	ldr	lr, [r4, #296]	; 0x128
   19128:	ldr	ip, [r4, #300]	; 0x12c
   1912c:	str	r0, [r5, #4]
   19130:	stm	sp, {r3, r7, fp, lr}
   19134:	mvn	r3, #0
   19138:	str	ip, [sp, #16]
   1913c:	bl	16ffc <__assert_fail@plt+0x5c70>
   19140:	ldr	r3, [sp, #28]
   19144:	mov	r0, r6
   19148:	str	r3, [r8]
   1914c:	add	sp, sp, #44	; 0x2c
   19150:	ldrd	r4, [sp]
   19154:	ldrd	r6, [sp, #8]
   19158:	ldrd	r8, [sp, #16]
   1915c:	ldrd	sl, [sp, #24]
   19160:	add	sp, sp, #32
   19164:	pop	{pc}		; (ldr pc, [sp], #4)
   19168:	mov	r0, #8
   1916c:	mvn	r3, #-2147483648	; 0x80000000
   19170:	add	r1, sp, #36	; 0x24
   19174:	str	r0, [sp]
   19178:	mov	r0, #0
   1917c:	bl	1b7c0 <__assert_fail@plt+0xa434>
   19180:	ldrd	r2, [r4, #8]
   19184:	mov	r5, r0
   19188:	str	r0, [r4]
   1918c:	strd	r2, [r0]
   19190:	b	19078 <__assert_fail@plt+0x7cec>
   19194:	strd	r4, [sp, #-36]!	; 0xffffffdc
   19198:	movw	r4, #61764	; 0xf144
   1919c:	movt	r4, #2
   191a0:	strd	r6, [sp, #8]
   191a4:	strd	r8, [sp, #16]
   191a8:	strd	sl, [sp, #24]
   191ac:	mov	sl, r0
   191b0:	mov	fp, r1
   191b4:	str	lr, [sp, #32]
   191b8:	sub	sp, sp, #44	; 0x2c
   191bc:	bl	1123c <__errno_location@plt>
   191c0:	ldr	r3, [r0]
   191c4:	mov	r8, r0
   191c8:	ldr	r2, [r4, #4]
   191cc:	ldr	r5, [r4]
   191d0:	str	r3, [sp, #28]
   191d4:	cmp	r2, #0
   191d8:	bgt	19234 <__assert_fail@plt+0x7ea8>
   191dc:	add	r3, r4, #8
   191e0:	str	r2, [sp, #36]	; 0x24
   191e4:	rsb	r2, r2, #1
   191e8:	cmp	r5, r3
   191ec:	beq	19310 <__assert_fail@plt+0x7f84>
   191f0:	mov	r1, #8
   191f4:	mov	r0, r5
   191f8:	mvn	r3, #-2147483648	; 0x80000000
   191fc:	str	r1, [sp]
   19200:	add	r1, sp, #36	; 0x24
   19204:	bl	1b7c0 <__assert_fail@plt+0xa434>
   19208:	mov	r5, r0
   1920c:	str	r0, [r4]
   19210:	ldr	r0, [r4, #4]
   19214:	mov	r1, #0
   19218:	ldr	r2, [sp, #36]	; 0x24
   1921c:	sub	r2, r2, r0
   19220:	add	r0, r5, r0, lsl #3
   19224:	lsl	r2, r2, #3
   19228:	bl	11254 <memset@plt>
   1922c:	ldr	r3, [sp, #36]	; 0x24
   19230:	str	r3, [r4, #4]
   19234:	movw	r4, #61900	; 0xf1cc
   19238:	movt	r4, #2
   1923c:	ldr	r9, [r5]
   19240:	add	r0, r4, #264	; 0x108
   19244:	mov	r3, fp
   19248:	ldr	r7, [r4, #260]	; 0x104
   1924c:	mov	r2, sl
   19250:	ldr	r6, [r5, #4]
   19254:	str	r0, [sp, #8]
   19258:	mov	r1, r9
   1925c:	ldr	ip, [r4, #256]	; 0x100
   19260:	orr	r7, r7, #1
   19264:	ldr	lr, [r4, #300]	; 0x12c
   19268:	mov	r0, r6
   1926c:	str	ip, [sp]
   19270:	str	r7, [sp, #4]
   19274:	str	lr, [sp, #16]
   19278:	ldr	ip, [r4, #296]	; 0x128
   1927c:	str	ip, [sp, #12]
   19280:	bl	16ffc <__assert_fail@plt+0x5c70>
   19284:	cmp	r9, r0
   19288:	bhi	192e8 <__assert_fail@plt+0x7f5c>
   1928c:	add	r9, r0, #1
   19290:	cmp	r6, r4
   19294:	str	r9, [r5]
   19298:	beq	192a4 <__assert_fail@plt+0x7f18>
   1929c:	mov	r0, r6
   192a0:	bl	12dd8 <__assert_fail@plt+0x1a4c>
   192a4:	mov	r0, r9
   192a8:	bl	1b51c <__assert_fail@plt+0xa190>
   192ac:	ldr	ip, [r4, #256]	; 0x100
   192b0:	mov	r1, r9
   192b4:	mov	r3, fp
   192b8:	mov	r2, sl
   192bc:	mov	r6, r0
   192c0:	ldr	r9, [r4, #296]	; 0x128
   192c4:	ldr	lr, [r4, #300]	; 0x12c
   192c8:	str	r0, [r5, #4]
   192cc:	str	ip, [sp]
   192d0:	ldr	ip, [pc, #100]	; 1933c <__assert_fail@plt+0x7fb0>
   192d4:	str	r7, [sp, #4]
   192d8:	str	ip, [sp, #8]
   192dc:	str	r9, [sp, #12]
   192e0:	str	lr, [sp, #16]
   192e4:	bl	16ffc <__assert_fail@plt+0x5c70>
   192e8:	ldr	r3, [sp, #28]
   192ec:	mov	r0, r6
   192f0:	str	r3, [r8]
   192f4:	add	sp, sp, #44	; 0x2c
   192f8:	ldrd	r4, [sp]
   192fc:	ldrd	r6, [sp, #8]
   19300:	ldrd	r8, [sp, #16]
   19304:	ldrd	sl, [sp, #24]
   19308:	add	sp, sp, #32
   1930c:	pop	{pc}		; (ldr pc, [sp], #4)
   19310:	mov	r0, #8
   19314:	mvn	r3, #-2147483648	; 0x80000000
   19318:	add	r1, sp, #36	; 0x24
   1931c:	str	r0, [sp]
   19320:	mov	r0, #0
   19324:	bl	1b7c0 <__assert_fail@plt+0xa434>
   19328:	ldrd	r2, [r4, #8]
   1932c:	mov	r5, r0
   19330:	str	r0, [r4]
   19334:	strd	r2, [r0]
   19338:	b	19210 <__assert_fail@plt+0x7e84>
   1933c:	ldrdeq	pc, [r2], -r4
   19340:	strd	r4, [sp, #-20]!	; 0xffffffec
   19344:	mov	r4, #0
   19348:	mov	r5, #0
   1934c:	strd	r6, [sp, #8]
   19350:	cmp	r1, #10
   19354:	str	lr, [sp, #16]
   19358:	sub	sp, sp, #100	; 0x64
   1935c:	strd	r4, [sp, #48]	; 0x30
   19360:	beq	193a8 <__assert_fail@plt+0x801c>
   19364:	mov	r3, sp
   19368:	strd	r4, [sp, #8]
   1936c:	str	r1, [sp, #48]	; 0x30
   19370:	mov	r1, r2
   19374:	mvn	r2, #0
   19378:	ldrd	r6, [sp, #48]	; 0x30
   1937c:	strd	r6, [sp]
   19380:	strd	r4, [sp, #16]
   19384:	strd	r4, [sp, #24]
   19388:	strd	r4, [sp, #32]
   1938c:	strd	r4, [sp, #40]	; 0x28
   19390:	bl	189e8 <__assert_fail@plt+0x765c>
   19394:	add	sp, sp, #100	; 0x64
   19398:	ldrd	r4, [sp]
   1939c:	ldrd	r6, [sp, #8]
   193a0:	add	sp, sp, #16
   193a4:	pop	{pc}		; (ldr pc, [sp], #4)
   193a8:	bl	11344 <abort@plt>
   193ac:	strd	r4, [sp, #-20]!	; 0xffffffec
   193b0:	mov	r4, #0
   193b4:	mov	r5, #0
   193b8:	strd	r6, [sp, #8]
   193bc:	cmp	r1, #10
   193c0:	str	lr, [sp, #16]
   193c4:	sub	sp, sp, #100	; 0x64
   193c8:	strd	r4, [sp, #48]	; 0x30
   193cc:	beq	19418 <__assert_fail@plt+0x808c>
   193d0:	mov	ip, r2
   193d4:	mov	r2, r3
   193d8:	strd	r4, [sp, #8]
   193dc:	str	r1, [sp, #48]	; 0x30
   193e0:	mov	r3, sp
   193e4:	mov	r1, ip
   193e8:	ldrd	r6, [sp, #48]	; 0x30
   193ec:	strd	r6, [sp]
   193f0:	strd	r4, [sp, #16]
   193f4:	strd	r4, [sp, #24]
   193f8:	strd	r4, [sp, #32]
   193fc:	strd	r4, [sp, #40]	; 0x28
   19400:	bl	189e8 <__assert_fail@plt+0x765c>
   19404:	add	sp, sp, #100	; 0x64
   19408:	ldrd	r4, [sp]
   1940c:	ldrd	r6, [sp, #8]
   19410:	add	sp, sp, #16
   19414:	pop	{pc}		; (ldr pc, [sp], #4)
   19418:	bl	11344 <abort@plt>
   1941c:	mov	r2, #0
   19420:	mov	r3, #0
   19424:	strd	r4, [sp, #-36]!	; 0xffffffdc
   19428:	strd	r6, [sp, #8]
   1942c:	cmp	r0, #10
   19430:	strd	r8, [sp, #16]
   19434:	strd	sl, [sp, #24]
   19438:	str	lr, [sp, #32]
   1943c:	sub	sp, sp, #124	; 0x7c
   19440:	strd	r2, [sp, #72]	; 0x48
   19444:	strd	r2, [sp, #80]	; 0x50
   19448:	strd	r2, [sp, #88]	; 0x58
   1944c:	strd	r2, [sp, #96]	; 0x60
   19450:	strd	r2, [sp, #104]	; 0x68
   19454:	strd	r2, [sp, #112]	; 0x70
   19458:	beq	195fc <__assert_fail@plt+0x8270>
   1945c:	mov	r6, r1
   19460:	movw	r4, #61764	; 0xf144
   19464:	movt	r4, #2
   19468:	str	r0, [sp, #72]	; 0x48
   1946c:	ldrd	r0, [sp, #72]	; 0x48
   19470:	strd	r0, [sp, #24]
   19474:	strd	r2, [sp, #32]
   19478:	strd	r2, [sp, #40]	; 0x28
   1947c:	strd	r2, [sp, #48]	; 0x30
   19480:	strd	r2, [sp, #56]	; 0x38
   19484:	strd	r2, [sp, #64]	; 0x40
   19488:	bl	1123c <__errno_location@plt>
   1948c:	mov	r8, r0
   19490:	ldr	r5, [r4]
   19494:	ldr	r2, [r4, #4]
   19498:	ldr	r9, [r0]
   1949c:	cmp	r2, #0
   194a0:	bgt	194fc <__assert_fail@plt+0x8170>
   194a4:	add	r3, r4, #8
   194a8:	str	r2, [sp, #72]	; 0x48
   194ac:	rsb	r2, r2, #1
   194b0:	cmp	r5, r3
   194b4:	beq	195d0 <__assert_fail@plt+0x8244>
   194b8:	mov	r3, #8
   194bc:	mov	r0, r5
   194c0:	add	r1, sp, #72	; 0x48
   194c4:	str	r3, [sp]
   194c8:	mvn	r3, #-2147483648	; 0x80000000
   194cc:	bl	1b7c0 <__assert_fail@plt+0xa434>
   194d0:	mov	r5, r0
   194d4:	str	r0, [r4]
   194d8:	ldr	r0, [r4, #4]
   194dc:	mov	r1, #0
   194e0:	ldr	r2, [sp, #72]	; 0x48
   194e4:	sub	r2, r2, r0
   194e8:	add	r0, r5, r0, lsl #3
   194ec:	lsl	r2, r2, #3
   194f0:	bl	11254 <memset@plt>
   194f4:	ldr	r3, [sp, #72]	; 0x48
   194f8:	str	r3, [r4, #4]
   194fc:	ldr	sl, [r5]
   19500:	add	r0, sp, #32
   19504:	mvn	r3, #0
   19508:	mov	r2, r6
   1950c:	ldr	r7, [sp, #28]
   19510:	ldr	r4, [r5, #4]
   19514:	mov	r1, sl
   19518:	str	r0, [sp, #8]
   1951c:	ldr	lr, [sp, #24]
   19520:	orr	r7, r7, #1
   19524:	ldr	ip, [sp, #64]	; 0x40
   19528:	mov	r0, r4
   1952c:	ldr	fp, [sp, #68]	; 0x44
   19530:	str	lr, [sp]
   19534:	str	r7, [sp, #4]
   19538:	str	ip, [sp, #12]
   1953c:	str	fp, [sp, #16]
   19540:	bl	16ffc <__assert_fail@plt+0x5c70>
   19544:	cmp	sl, r0
   19548:	bhi	195ac <__assert_fail@plt+0x8220>
   1954c:	add	sl, r0, #1
   19550:	movw	r3, #61900	; 0xf1cc
   19554:	movt	r3, #2
   19558:	cmp	r4, r3
   1955c:	str	sl, [r5]
   19560:	beq	1956c <__assert_fail@plt+0x81e0>
   19564:	mov	r0, r4
   19568:	bl	12dd8 <__assert_fail@plt+0x1a4c>
   1956c:	mov	r0, sl
   19570:	bl	1b51c <__assert_fail@plt+0xa190>
   19574:	ldr	r3, [sp, #24]
   19578:	mov	r2, r6
   1957c:	mov	r1, sl
   19580:	mov	r4, r0
   19584:	ldr	lr, [sp, #64]	; 0x40
   19588:	ldr	ip, [sp, #68]	; 0x44
   1958c:	str	r0, [r5, #4]
   19590:	add	r5, sp, #32
   19594:	stm	sp, {r3, r7}
   19598:	mvn	r3, #0
   1959c:	str	r5, [sp, #8]
   195a0:	str	lr, [sp, #12]
   195a4:	str	ip, [sp, #16]
   195a8:	bl	16ffc <__assert_fail@plt+0x5c70>
   195ac:	mov	r0, r4
   195b0:	str	r9, [r8]
   195b4:	add	sp, sp, #124	; 0x7c
   195b8:	ldrd	r4, [sp]
   195bc:	ldrd	r6, [sp, #8]
   195c0:	ldrd	r8, [sp, #16]
   195c4:	ldrd	sl, [sp, #24]
   195c8:	add	sp, sp, #32
   195cc:	pop	{pc}		; (ldr pc, [sp], #4)
   195d0:	mov	r0, #8
   195d4:	mvn	r3, #-2147483648	; 0x80000000
   195d8:	add	r1, sp, #72	; 0x48
   195dc:	str	r0, [sp]
   195e0:	mov	r0, #0
   195e4:	bl	1b7c0 <__assert_fail@plt+0xa434>
   195e8:	ldrd	r2, [r4, #8]
   195ec:	mov	r5, r0
   195f0:	str	r0, [r4]
   195f4:	strd	r2, [r0]
   195f8:	b	194d8 <__assert_fail@plt+0x814c>
   195fc:	bl	11344 <abort@plt>
   19600:	strd	r4, [sp, #-36]!	; 0xffffffdc
   19604:	cmp	r0, #10
   19608:	strd	r6, [sp, #8]
   1960c:	mov	r6, #0
   19610:	mov	r7, #0
   19614:	strd	r8, [sp, #16]
   19618:	strd	sl, [sp, #24]
   1961c:	str	lr, [sp, #32]
   19620:	sub	sp, sp, #124	; 0x7c
   19624:	strd	r6, [sp, #72]	; 0x48
   19628:	strd	r6, [sp, #80]	; 0x50
   1962c:	strd	r6, [sp, #88]	; 0x58
   19630:	strd	r6, [sp, #96]	; 0x60
   19634:	strd	r6, [sp, #104]	; 0x68
   19638:	strd	r6, [sp, #112]	; 0x70
   1963c:	beq	197e8 <__assert_fail@plt+0x845c>
   19640:	mov	sl, r2
   19644:	movw	r5, #61764	; 0xf144
   19648:	movt	r5, #2
   1964c:	str	r0, [sp, #72]	; 0x48
   19650:	mov	r9, r1
   19654:	ldrd	r2, [sp, #72]	; 0x48
   19658:	strd	r2, [sp, #24]
   1965c:	strd	r6, [sp, #32]
   19660:	strd	r6, [sp, #40]	; 0x28
   19664:	strd	r6, [sp, #48]	; 0x30
   19668:	strd	r6, [sp, #56]	; 0x38
   1966c:	strd	r6, [sp, #64]	; 0x40
   19670:	bl	1123c <__errno_location@plt>
   19674:	mov	r7, r0
   19678:	ldr	r4, [r5]
   1967c:	ldr	r2, [r5, #4]
   19680:	ldr	fp, [r0]
   19684:	cmp	r2, #0
   19688:	bgt	196e4 <__assert_fail@plt+0x8358>
   1968c:	add	r3, r5, #8
   19690:	str	r2, [sp, #72]	; 0x48
   19694:	rsb	r2, r2, #1
   19698:	cmp	r4, r3
   1969c:	beq	197bc <__assert_fail@plt+0x8430>
   196a0:	mov	r3, #8
   196a4:	mov	r0, r4
   196a8:	add	r1, sp, #72	; 0x48
   196ac:	str	r3, [sp]
   196b0:	mvn	r3, #-2147483648	; 0x80000000
   196b4:	bl	1b7c0 <__assert_fail@plt+0xa434>
   196b8:	mov	r4, r0
   196bc:	str	r0, [r5]
   196c0:	ldr	r0, [r5, #4]
   196c4:	mov	r1, #0
   196c8:	ldr	r2, [sp, #72]	; 0x48
   196cc:	sub	r2, r2, r0
   196d0:	add	r0, r4, r0, lsl #3
   196d4:	lsl	r2, r2, #3
   196d8:	bl	11254 <memset@plt>
   196dc:	ldr	r3, [sp, #72]	; 0x48
   196e0:	str	r3, [r5, #4]
   196e4:	ldr	ip, [sp, #24]
   196e8:	add	r0, sp, #32
   196ec:	mov	r3, sl
   196f0:	mov	r2, r9
   196f4:	ldr	r6, [sp, #28]
   196f8:	ldr	r8, [r4]
   196fc:	ldr	r5, [r4, #4]
   19700:	str	ip, [sp]
   19704:	orr	r6, r6, #1
   19708:	ldr	ip, [sp, #64]	; 0x40
   1970c:	mov	r1, r8
   19710:	str	r6, [sp, #4]
   19714:	ldr	lr, [sp, #68]	; 0x44
   19718:	str	r0, [sp, #8]
   1971c:	mov	r0, r5
   19720:	str	ip, [sp, #12]
   19724:	str	lr, [sp, #16]
   19728:	bl	16ffc <__assert_fail@plt+0x5c70>
   1972c:	cmp	r8, r0
   19730:	bhi	19798 <__assert_fail@plt+0x840c>
   19734:	add	r8, r0, #1
   19738:	movw	r3, #61900	; 0xf1cc
   1973c:	movt	r3, #2
   19740:	cmp	r5, r3
   19744:	str	r8, [r4]
   19748:	beq	19754 <__assert_fail@plt+0x83c8>
   1974c:	mov	r0, r5
   19750:	bl	12dd8 <__assert_fail@plt+0x1a4c>
   19754:	mov	r0, r8
   19758:	bl	1b51c <__assert_fail@plt+0xa190>
   1975c:	ldr	lr, [sp, #24]
   19760:	mov	r1, r8
   19764:	mov	r3, sl
   19768:	mov	r2, r9
   1976c:	mov	r5, r0
   19770:	ldr	r8, [sp, #64]	; 0x40
   19774:	ldr	ip, [sp, #68]	; 0x44
   19778:	str	r0, [r4, #4]
   1977c:	str	lr, [sp]
   19780:	add	lr, sp, #32
   19784:	str	r6, [sp, #4]
   19788:	str	lr, [sp, #8]
   1978c:	str	r8, [sp, #12]
   19790:	str	ip, [sp, #16]
   19794:	bl	16ffc <__assert_fail@plt+0x5c70>
   19798:	mov	r0, r5
   1979c:	str	fp, [r7]
   197a0:	add	sp, sp, #124	; 0x7c
   197a4:	ldrd	r4, [sp]
   197a8:	ldrd	r6, [sp, #8]
   197ac:	ldrd	r8, [sp, #16]
   197b0:	ldrd	sl, [sp, #24]
   197b4:	add	sp, sp, #32
   197b8:	pop	{pc}		; (ldr pc, [sp], #4)
   197bc:	mov	r0, #8
   197c0:	mvn	r3, #-2147483648	; 0x80000000
   197c4:	add	r1, sp, #72	; 0x48
   197c8:	str	r0, [sp]
   197cc:	mov	r0, #0
   197d0:	bl	1b7c0 <__assert_fail@plt+0xa434>
   197d4:	ldrd	r2, [r5, #8]
   197d8:	mov	r4, r0
   197dc:	str	r0, [r5]
   197e0:	strd	r2, [r0]
   197e4:	b	196c0 <__assert_fail@plt+0x8334>
   197e8:	bl	11344 <abort@plt>
   197ec:	ldr	r3, [pc, #492]	; 199e0 <__assert_fail@plt+0x8654>
   197f0:	lsr	ip, r2, #5
   197f4:	and	r2, r2, #31
   197f8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   197fc:	movw	r5, #61764	; 0xf144
   19800:	movt	r5, #2
   19804:	strd	r6, [sp, #8]
   19808:	strd	r8, [sp, #16]
   1980c:	strd	sl, [sp, #24]
   19810:	mov	sl, r0
   19814:	mov	fp, r1
   19818:	ldrd	r0, [r3]
   1981c:	str	lr, [sp, #32]
   19820:	sub	sp, sp, #92	; 0x5c
   19824:	ldrd	r8, [r3, #8]
   19828:	add	r6, sp, #48	; 0x30
   1982c:	strd	r0, [sp, #40]	; 0x28
   19830:	ldrd	r0, [r3, #16]
   19834:	strd	r8, [sp, #48]	; 0x30
   19838:	ldrd	r8, [r3, #24]
   1983c:	strd	r0, [sp, #56]	; 0x38
   19840:	ldrd	r0, [r3, #32]
   19844:	strd	r8, [sp, #64]	; 0x40
   19848:	ldrd	r8, [r3, #40]	; 0x28
   1984c:	strd	r0, [sp, #72]	; 0x48
   19850:	strd	r8, [sp, #80]	; 0x50
   19854:	ldr	r3, [r6, ip, lsl #2]
   19858:	mvn	r1, r3, lsr r2
   1985c:	and	r1, r1, #1
   19860:	eor	r2, r3, r1, lsl r2
   19864:	str	r2, [r6, ip, lsl #2]
   19868:	bl	1123c <__errno_location@plt>
   1986c:	ldr	r3, [r0]
   19870:	mov	r8, r0
   19874:	ldr	r2, [r5, #4]
   19878:	ldr	r4, [r5]
   1987c:	str	r3, [sp, #28]
   19880:	cmp	r2, #0
   19884:	bgt	198e0 <__assert_fail@plt+0x8554>
   19888:	add	r3, r5, #8
   1988c:	str	r2, [sp, #36]	; 0x24
   19890:	rsb	r2, r2, #1
   19894:	cmp	r4, r3
   19898:	beq	199b4 <__assert_fail@plt+0x8628>
   1989c:	mov	r1, #8
   198a0:	mov	r0, r4
   198a4:	mvn	r3, #-2147483648	; 0x80000000
   198a8:	str	r1, [sp]
   198ac:	add	r1, sp, #36	; 0x24
   198b0:	bl	1b7c0 <__assert_fail@plt+0xa434>
   198b4:	mov	r4, r0
   198b8:	str	r0, [r5]
   198bc:	ldr	r0, [r5, #4]
   198c0:	mov	r1, #0
   198c4:	ldr	r2, [sp, #36]	; 0x24
   198c8:	sub	r2, r2, r0
   198cc:	add	r0, r4, r0, lsl #3
   198d0:	lsl	r2, r2, #3
   198d4:	bl	11254 <memset@plt>
   198d8:	ldr	r3, [sp, #36]	; 0x24
   198dc:	str	r3, [r5, #4]
   198e0:	ldr	ip, [sp, #40]	; 0x28
   198e4:	mov	r3, fp
   198e8:	mov	r2, sl
   198ec:	ldr	r7, [sp, #44]	; 0x2c
   198f0:	ldr	r9, [r4]
   198f4:	ldr	r5, [r4, #4]
   198f8:	str	ip, [sp]
   198fc:	orr	r7, r7, #1
   19900:	ldr	ip, [sp, #80]	; 0x50
   19904:	mov	r1, r9
   19908:	str	r7, [sp, #4]
   1990c:	ldr	lr, [sp, #84]	; 0x54
   19910:	mov	r0, r5
   19914:	str	r6, [sp, #8]
   19918:	str	ip, [sp, #12]
   1991c:	str	lr, [sp, #16]
   19920:	bl	16ffc <__assert_fail@plt+0x5c70>
   19924:	cmp	r9, r0
   19928:	bhi	1998c <__assert_fail@plt+0x8600>
   1992c:	add	r9, r0, #1
   19930:	movw	r3, #61900	; 0xf1cc
   19934:	movt	r3, #2
   19938:	cmp	r5, r3
   1993c:	str	r9, [r4]
   19940:	beq	1994c <__assert_fail@plt+0x85c0>
   19944:	mov	r0, r5
   19948:	bl	12dd8 <__assert_fail@plt+0x1a4c>
   1994c:	mov	r0, r9
   19950:	bl	1b51c <__assert_fail@plt+0xa190>
   19954:	mov	r1, r9
   19958:	ldr	ip, [sp, #40]	; 0x28
   1995c:	mov	r3, fp
   19960:	mov	r2, sl
   19964:	mov	r5, r0
   19968:	ldr	r9, [sp, #80]	; 0x50
   1996c:	ldr	lr, [sp, #84]	; 0x54
   19970:	str	r0, [r4, #4]
   19974:	str	ip, [sp]
   19978:	str	r7, [sp, #4]
   1997c:	str	r6, [sp, #8]
   19980:	str	r9, [sp, #12]
   19984:	str	lr, [sp, #16]
   19988:	bl	16ffc <__assert_fail@plt+0x5c70>
   1998c:	ldr	r3, [sp, #28]
   19990:	mov	r0, r5
   19994:	str	r3, [r8]
   19998:	add	sp, sp, #92	; 0x5c
   1999c:	ldrd	r4, [sp]
   199a0:	ldrd	r6, [sp, #8]
   199a4:	ldrd	r8, [sp, #16]
   199a8:	ldrd	sl, [sp, #24]
   199ac:	add	sp, sp, #32
   199b0:	pop	{pc}		; (ldr pc, [sp], #4)
   199b4:	mov	r0, #8
   199b8:	mvn	r3, #-2147483648	; 0x80000000
   199bc:	add	r1, sp, #36	; 0x24
   199c0:	str	r0, [sp]
   199c4:	mov	r0, #0
   199c8:	bl	1b7c0 <__assert_fail@plt+0xa434>
   199cc:	ldrd	r2, [r5, #8]
   199d0:	mov	r4, r0
   199d4:	str	r0, [r5]
   199d8:	strd	r2, [r0]
   199dc:	b	198bc <__assert_fail@plt+0x8530>
   199e0:	andeq	pc, r2, ip, asr #5
   199e4:	ldr	ip, [pc, #476]	; 19bc8 <__assert_fail@plt+0x883c>
   199e8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   199ec:	movw	r4, #61764	; 0xf144
   199f0:	movt	r4, #2
   199f4:	ldrd	r2, [ip, #8]
   199f8:	strd	r6, [sp, #8]
   199fc:	lsr	r7, r1, #5
   19a00:	mov	r6, r0
   19a04:	strd	r8, [sp, #16]
   19a08:	str	lr, [sp, #32]
   19a0c:	and	lr, r1, #31
   19a10:	ldrd	r0, [ip]
   19a14:	strd	sl, [sp, #24]
   19a18:	sub	sp, sp, #84	; 0x54
   19a1c:	add	r5, sp, #40	; 0x28
   19a20:	strd	r0, [sp, #32]
   19a24:	strd	r2, [sp, #40]	; 0x28
   19a28:	ldrd	r0, [ip, #16]
   19a2c:	ldrd	r2, [ip, #24]
   19a30:	strd	r0, [sp, #48]	; 0x30
   19a34:	ldrd	r0, [ip, #32]
   19a38:	strd	r2, [sp, #56]	; 0x38
   19a3c:	ldrd	r2, [ip, #40]	; 0x28
   19a40:	strd	r0, [sp, #64]	; 0x40
   19a44:	strd	r2, [sp, #72]	; 0x48
   19a48:	ldr	r1, [r5, r7, lsl #2]
   19a4c:	mvn	r3, r1, lsr lr
   19a50:	and	r3, r3, #1
   19a54:	eor	r1, r1, r3, lsl lr
   19a58:	str	r1, [r5, r7, lsl #2]
   19a5c:	bl	1123c <__errno_location@plt>
   19a60:	mov	r9, r0
   19a64:	ldr	sl, [r0]
   19a68:	ldr	r2, [r4, #4]
   19a6c:	ldr	r7, [r4]
   19a70:	cmp	r2, #0
   19a74:	bgt	19ad0 <__assert_fail@plt+0x8744>
   19a78:	add	r3, r4, #8
   19a7c:	str	r2, [sp, #28]
   19a80:	rsb	r2, r2, #1
   19a84:	cmp	r7, r3
   19a88:	beq	19b9c <__assert_fail@plt+0x8810>
   19a8c:	mov	r1, #8
   19a90:	mov	r0, r7
   19a94:	mvn	r3, #-2147483648	; 0x80000000
   19a98:	str	r1, [sp]
   19a9c:	add	r1, sp, #28
   19aa0:	bl	1b7c0 <__assert_fail@plt+0xa434>
   19aa4:	mov	r7, r0
   19aa8:	str	r0, [r4]
   19aac:	ldr	r0, [r4, #4]
   19ab0:	mov	r1, #0
   19ab4:	ldr	r2, [sp, #28]
   19ab8:	sub	r2, r2, r0
   19abc:	add	r0, r7, r0, lsl #3
   19ac0:	lsl	r2, r2, #3
   19ac4:	bl	11254 <memset@plt>
   19ac8:	ldr	r3, [sp, #28]
   19acc:	str	r3, [r4, #4]
   19ad0:	ldr	ip, [sp, #32]
   19ad4:	mvn	r3, #0
   19ad8:	mov	r2, r6
   19adc:	ldr	r8, [sp, #36]	; 0x24
   19ae0:	ldr	fp, [r7]
   19ae4:	ldr	r4, [r7, #4]
   19ae8:	str	ip, [sp]
   19aec:	orr	r8, r8, #1
   19af0:	ldr	ip, [sp, #72]	; 0x48
   19af4:	mov	r1, fp
   19af8:	str	r8, [sp, #4]
   19afc:	ldr	lr, [sp, #76]	; 0x4c
   19b00:	mov	r0, r4
   19b04:	str	r5, [sp, #8]
   19b08:	str	ip, [sp, #12]
   19b0c:	str	lr, [sp, #16]
   19b10:	bl	16ffc <__assert_fail@plt+0x5c70>
   19b14:	cmp	fp, r0
   19b18:	bhi	19b78 <__assert_fail@plt+0x87ec>
   19b1c:	add	fp, r0, #1
   19b20:	movw	r3, #61900	; 0xf1cc
   19b24:	movt	r3, #2
   19b28:	cmp	r4, r3
   19b2c:	str	fp, [r7]
   19b30:	beq	19b3c <__assert_fail@plt+0x87b0>
   19b34:	mov	r0, r4
   19b38:	bl	12dd8 <__assert_fail@plt+0x1a4c>
   19b3c:	mov	r0, fp
   19b40:	bl	1b51c <__assert_fail@plt+0xa190>
   19b44:	ldr	r3, [sp, #32]
   19b48:	mov	r2, r6
   19b4c:	mov	r1, fp
   19b50:	mov	r4, r0
   19b54:	ldr	lr, [sp, #72]	; 0x48
   19b58:	ldr	ip, [sp, #76]	; 0x4c
   19b5c:	str	r0, [r7, #4]
   19b60:	stm	sp, {r3, r8}
   19b64:	mvn	r3, #0
   19b68:	str	r5, [sp, #8]
   19b6c:	str	lr, [sp, #12]
   19b70:	str	ip, [sp, #16]
   19b74:	bl	16ffc <__assert_fail@plt+0x5c70>
   19b78:	mov	r0, r4
   19b7c:	str	sl, [r9]
   19b80:	add	sp, sp, #84	; 0x54
   19b84:	ldrd	r4, [sp]
   19b88:	ldrd	r6, [sp, #8]
   19b8c:	ldrd	r8, [sp, #16]
   19b90:	ldrd	sl, [sp, #24]
   19b94:	add	sp, sp, #32
   19b98:	pop	{pc}		; (ldr pc, [sp], #4)
   19b9c:	mov	r0, #8
   19ba0:	mvn	r3, #-2147483648	; 0x80000000
   19ba4:	add	r1, sp, #28
   19ba8:	str	r0, [sp]
   19bac:	mov	r0, #0
   19bb0:	bl	1b7c0 <__assert_fail@plt+0xa434>
   19bb4:	ldrd	r2, [r4, #8]
   19bb8:	mov	r7, r0
   19bbc:	str	r0, [r4]
   19bc0:	strd	r2, [r0]
   19bc4:	b	19aac <__assert_fail@plt+0x8720>
   19bc8:	andeq	pc, r2, ip, asr #5
   19bcc:	ldr	ip, [pc, #472]	; 19dac <__assert_fail@plt+0x8a20>
   19bd0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   19bd4:	mov	r5, r0
   19bd8:	movw	r4, #61764	; 0xf144
   19bdc:	movt	r4, #2
   19be0:	ldrd	r2, [ip]
   19be4:	ldrd	r0, [ip, #8]
   19be8:	strd	r6, [sp, #8]
   19bec:	strd	r8, [sp, #16]
   19bf0:	strd	sl, [sp, #24]
   19bf4:	str	lr, [sp, #32]
   19bf8:	sub	sp, sp, #84	; 0x54
   19bfc:	strd	r2, [sp, #32]
   19c00:	strd	r0, [sp, #40]	; 0x28
   19c04:	ldr	r6, [sp, #44]	; 0x2c
   19c08:	ldrd	r2, [ip, #16]
   19c0c:	ldrd	r0, [ip, #24]
   19c10:	mvn	lr, r6
   19c14:	and	lr, lr, #67108864	; 0x4000000
   19c18:	eor	lr, lr, r6
   19c1c:	ldrd	r6, [ip, #40]	; 0x28
   19c20:	strd	r2, [sp, #48]	; 0x30
   19c24:	ldrd	r2, [ip, #32]
   19c28:	str	lr, [sp, #44]	; 0x2c
   19c2c:	strd	r0, [sp, #56]	; 0x38
   19c30:	strd	r2, [sp, #64]	; 0x40
   19c34:	strd	r6, [sp, #72]	; 0x48
   19c38:	bl	1123c <__errno_location@plt>
   19c3c:	mov	r8, r0
   19c40:	ldr	r9, [r0]
   19c44:	ldr	r2, [r4, #4]
   19c48:	ldr	r6, [r4]
   19c4c:	cmp	r2, #0
   19c50:	bgt	19cac <__assert_fail@plt+0x8920>
   19c54:	add	r3, r4, #8
   19c58:	str	r2, [sp, #28]
   19c5c:	rsb	r2, r2, #1
   19c60:	cmp	r6, r3
   19c64:	beq	19d80 <__assert_fail@plt+0x89f4>
   19c68:	mov	r1, #8
   19c6c:	mov	r0, r6
   19c70:	mvn	r3, #-2147483648	; 0x80000000
   19c74:	str	r1, [sp]
   19c78:	add	r1, sp, #28
   19c7c:	bl	1b7c0 <__assert_fail@plt+0xa434>
   19c80:	mov	r6, r0
   19c84:	str	r0, [r4]
   19c88:	ldr	r0, [r4, #4]
   19c8c:	mov	r1, #0
   19c90:	ldr	r2, [sp, #28]
   19c94:	sub	r2, r2, r0
   19c98:	add	r0, r6, r0, lsl #3
   19c9c:	lsl	r2, r2, #3
   19ca0:	bl	11254 <memset@plt>
   19ca4:	ldr	r3, [sp, #28]
   19ca8:	str	r3, [r4, #4]
   19cac:	ldr	sl, [r6]
   19cb0:	add	r0, sp, #40	; 0x28
   19cb4:	mvn	r3, #0
   19cb8:	mov	r2, r5
   19cbc:	ldr	r7, [sp, #36]	; 0x24
   19cc0:	ldr	r4, [r6, #4]
   19cc4:	mov	r1, sl
   19cc8:	str	r0, [sp, #8]
   19ccc:	ldr	lr, [sp, #32]
   19cd0:	orr	r7, r7, #1
   19cd4:	ldr	ip, [sp, #72]	; 0x48
   19cd8:	mov	r0, r4
   19cdc:	ldr	fp, [sp, #76]	; 0x4c
   19ce0:	str	lr, [sp]
   19ce4:	str	r7, [sp, #4]
   19ce8:	str	ip, [sp, #12]
   19cec:	str	fp, [sp, #16]
   19cf0:	bl	16ffc <__assert_fail@plt+0x5c70>
   19cf4:	cmp	sl, r0
   19cf8:	bhi	19d5c <__assert_fail@plt+0x89d0>
   19cfc:	add	sl, r0, #1
   19d00:	movw	r3, #61900	; 0xf1cc
   19d04:	movt	r3, #2
   19d08:	cmp	r4, r3
   19d0c:	str	sl, [r6]
   19d10:	beq	19d1c <__assert_fail@plt+0x8990>
   19d14:	mov	r0, r4
   19d18:	bl	12dd8 <__assert_fail@plt+0x1a4c>
   19d1c:	mov	r0, sl
   19d20:	bl	1b51c <__assert_fail@plt+0xa190>
   19d24:	ldr	r3, [sp, #32]
   19d28:	mov	r2, r5
   19d2c:	add	r5, sp, #40	; 0x28
   19d30:	mov	r1, sl
   19d34:	mov	r4, r0
   19d38:	ldr	lr, [sp, #72]	; 0x48
   19d3c:	ldr	ip, [sp, #76]	; 0x4c
   19d40:	str	r0, [r6, #4]
   19d44:	stm	sp, {r3, r7}
   19d48:	mvn	r3, #0
   19d4c:	str	r5, [sp, #8]
   19d50:	str	lr, [sp, #12]
   19d54:	str	ip, [sp, #16]
   19d58:	bl	16ffc <__assert_fail@plt+0x5c70>
   19d5c:	mov	r0, r4
   19d60:	str	r9, [r8]
   19d64:	add	sp, sp, #84	; 0x54
   19d68:	ldrd	r4, [sp]
   19d6c:	ldrd	r6, [sp, #8]
   19d70:	ldrd	r8, [sp, #16]
   19d74:	ldrd	sl, [sp, #24]
   19d78:	add	sp, sp, #32
   19d7c:	pop	{pc}		; (ldr pc, [sp], #4)
   19d80:	mov	r0, #8
   19d84:	mvn	r3, #-2147483648	; 0x80000000
   19d88:	add	r1, sp, #28
   19d8c:	str	r0, [sp]
   19d90:	mov	r0, #0
   19d94:	bl	1b7c0 <__assert_fail@plt+0xa434>
   19d98:	ldrd	r2, [r4, #8]
   19d9c:	mov	r6, r0
   19da0:	str	r0, [r4]
   19da4:	strd	r2, [r0]
   19da8:	b	19c88 <__assert_fail@plt+0x88fc>
   19dac:	andeq	pc, r2, ip, asr #5
   19db0:	ldr	ip, [pc, #480]	; 19f98 <__assert_fail@plt+0x8c0c>
   19db4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   19db8:	mov	r5, r0
   19dbc:	movw	r4, #61764	; 0xf144
   19dc0:	movt	r4, #2
   19dc4:	ldrd	r2, [ip]
   19dc8:	strd	r6, [sp, #8]
   19dcc:	mov	r6, r1
   19dd0:	ldrd	r0, [ip, #8]
   19dd4:	strd	r8, [sp, #16]
   19dd8:	strd	sl, [sp, #24]
   19ddc:	str	lr, [sp, #32]
   19de0:	sub	sp, sp, #84	; 0x54
   19de4:	ldrd	r8, [ip, #40]	; 0x28
   19de8:	strd	r2, [sp, #32]
   19dec:	strd	r0, [sp, #40]	; 0x28
   19df0:	ldrd	r2, [ip, #16]
   19df4:	ldr	r7, [sp, #44]	; 0x2c
   19df8:	ldrd	r0, [ip, #24]
   19dfc:	strd	r2, [sp, #48]	; 0x30
   19e00:	ldrd	r2, [ip, #32]
   19e04:	mvn	lr, r7
   19e08:	and	lr, lr, #67108864	; 0x4000000
   19e0c:	eor	lr, lr, r7
   19e10:	str	lr, [sp, #44]	; 0x2c
   19e14:	strd	r0, [sp, #56]	; 0x38
   19e18:	strd	r2, [sp, #64]	; 0x40
   19e1c:	strd	r8, [sp, #72]	; 0x48
   19e20:	bl	1123c <__errno_location@plt>
   19e24:	mov	r9, r0
   19e28:	ldr	sl, [r0]
   19e2c:	ldr	r2, [r4, #4]
   19e30:	ldr	r7, [r4]
   19e34:	cmp	r2, #0
   19e38:	bgt	19e94 <__assert_fail@plt+0x8b08>
   19e3c:	add	r3, r4, #8
   19e40:	str	r2, [sp, #28]
   19e44:	rsb	r2, r2, #1
   19e48:	cmp	r7, r3
   19e4c:	beq	19f6c <__assert_fail@plt+0x8be0>
   19e50:	mov	r1, #8
   19e54:	mov	r0, r7
   19e58:	mvn	r3, #-2147483648	; 0x80000000
   19e5c:	str	r1, [sp]
   19e60:	add	r1, sp, #28
   19e64:	bl	1b7c0 <__assert_fail@plt+0xa434>
   19e68:	mov	r7, r0
   19e6c:	str	r0, [r4]
   19e70:	ldr	r0, [r4, #4]
   19e74:	mov	r1, #0
   19e78:	ldr	r2, [sp, #28]
   19e7c:	sub	r2, r2, r0
   19e80:	add	r0, r7, r0, lsl #3
   19e84:	lsl	r2, r2, #3
   19e88:	bl	11254 <memset@plt>
   19e8c:	ldr	r3, [sp, #28]
   19e90:	str	r3, [r4, #4]
   19e94:	ldr	ip, [sp, #32]
   19e98:	add	r0, sp, #40	; 0x28
   19e9c:	mov	r3, r6
   19ea0:	mov	r2, r5
   19ea4:	ldr	r8, [sp, #36]	; 0x24
   19ea8:	ldr	fp, [r7]
   19eac:	ldr	r4, [r7, #4]
   19eb0:	str	ip, [sp]
   19eb4:	orr	r8, r8, #1
   19eb8:	ldr	ip, [sp, #72]	; 0x48
   19ebc:	mov	r1, fp
   19ec0:	str	r8, [sp, #4]
   19ec4:	ldr	lr, [sp, #76]	; 0x4c
   19ec8:	str	r0, [sp, #8]
   19ecc:	mov	r0, r4
   19ed0:	str	ip, [sp, #12]
   19ed4:	str	lr, [sp, #16]
   19ed8:	bl	16ffc <__assert_fail@plt+0x5c70>
   19edc:	cmp	fp, r0
   19ee0:	bhi	19f48 <__assert_fail@plt+0x8bbc>
   19ee4:	add	fp, r0, #1
   19ee8:	movw	r3, #61900	; 0xf1cc
   19eec:	movt	r3, #2
   19ef0:	cmp	r4, r3
   19ef4:	str	fp, [r7]
   19ef8:	beq	19f04 <__assert_fail@plt+0x8b78>
   19efc:	mov	r0, r4
   19f00:	bl	12dd8 <__assert_fail@plt+0x1a4c>
   19f04:	mov	r0, fp
   19f08:	bl	1b51c <__assert_fail@plt+0xa190>
   19f0c:	ldr	lr, [sp, #32]
   19f10:	mov	r2, r5
   19f14:	mov	r3, r6
   19f18:	mov	r1, fp
   19f1c:	mov	r4, r0
   19f20:	ldr	r5, [sp, #72]	; 0x48
   19f24:	ldr	ip, [sp, #76]	; 0x4c
   19f28:	str	r0, [r7, #4]
   19f2c:	str	lr, [sp]
   19f30:	add	lr, sp, #40	; 0x28
   19f34:	str	r8, [sp, #4]
   19f38:	str	lr, [sp, #8]
   19f3c:	str	r5, [sp, #12]
   19f40:	str	ip, [sp, #16]
   19f44:	bl	16ffc <__assert_fail@plt+0x5c70>
   19f48:	mov	r0, r4
   19f4c:	str	sl, [r9]
   19f50:	add	sp, sp, #84	; 0x54
   19f54:	ldrd	r4, [sp]
   19f58:	ldrd	r6, [sp, #8]
   19f5c:	ldrd	r8, [sp, #16]
   19f60:	ldrd	sl, [sp, #24]
   19f64:	add	sp, sp, #32
   19f68:	pop	{pc}		; (ldr pc, [sp], #4)
   19f6c:	mov	r0, #8
   19f70:	mvn	r3, #-2147483648	; 0x80000000
   19f74:	add	r1, sp, #28
   19f78:	str	r0, [sp]
   19f7c:	mov	r0, #0
   19f80:	bl	1b7c0 <__assert_fail@plt+0xa434>
   19f84:	ldrd	r2, [r4, #8]
   19f88:	mov	r7, r0
   19f8c:	str	r0, [r4]
   19f90:	strd	r2, [r0]
   19f94:	b	19e70 <__assert_fail@plt+0x8ae4>
   19f98:	andeq	pc, r2, ip, asr #5
   19f9c:	strd	r4, [sp, #-12]!
   19fa0:	mov	r4, #0
   19fa4:	mov	r5, #0
   19fa8:	str	lr, [sp, #8]
   19fac:	sub	sp, sp, #100	; 0x64
   19fb0:	cmp	r1, #10
   19fb4:	strd	r4, [sp]
   19fb8:	strd	r4, [sp, #8]
   19fbc:	strd	r4, [sp, #16]
   19fc0:	strd	r4, [sp, #24]
   19fc4:	strd	r4, [sp, #32]
   19fc8:	strd	r4, [sp, #40]	; 0x28
   19fcc:	beq	19ffc <__assert_fail@plt+0x8c70>
   19fd0:	mov	ip, #67108864	; 0x4000000
   19fd4:	mov	r3, sp
   19fd8:	str	r1, [sp]
   19fdc:	mov	r1, r2
   19fe0:	mvn	r2, #0
   19fe4:	str	ip, [sp, #12]
   19fe8:	bl	189e8 <__assert_fail@plt+0x765c>
   19fec:	add	sp, sp, #100	; 0x64
   19ff0:	ldrd	r4, [sp]
   19ff4:	add	sp, sp, #8
   19ff8:	pop	{pc}		; (ldr pc, [sp], #4)
   19ffc:	bl	11344 <abort@plt>
   1a000:	ldr	ip, [pc, #156]	; 1a0a4 <__assert_fail@plt+0x8d18>
   1a004:	cmp	r2, #0
   1a008:	cmpne	r1, #0
   1a00c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1a010:	strd	r6, [sp, #8]
   1a014:	mov	r6, r2
   1a018:	str	r8, [sp, #16]
   1a01c:	mov	r8, r3
   1a020:	strd	sl, [sp, #20]
   1a024:	ldrd	r4, [ip]
   1a028:	str	lr, [sp, #28]
   1a02c:	sub	sp, sp, #48	; 0x30
   1a030:	mov	lr, #10
   1a034:	ldrd	r2, [ip, #8]
   1a038:	ldrd	sl, [ip, #16]
   1a03c:	strd	r4, [sp]
   1a040:	ldrd	r4, [ip, #32]
   1a044:	str	lr, [sp]
   1a048:	strd	r2, [sp, #8]
   1a04c:	strd	sl, [sp, #16]
   1a050:	ldrd	r2, [ip, #24]
   1a054:	ldrd	sl, [ip, #40]	; 0x28
   1a058:	strd	r2, [sp, #24]
   1a05c:	strd	r4, [sp, #32]
   1a060:	strd	sl, [sp, #40]	; 0x28
   1a064:	beq	1a0a0 <__assert_fail@plt+0x8d14>
   1a068:	mov	r7, r1
   1a06c:	mov	r3, sp
   1a070:	mov	r1, r8
   1a074:	mvn	r2, #0
   1a078:	str	r7, [sp, #40]	; 0x28
   1a07c:	str	r6, [sp, #44]	; 0x2c
   1a080:	bl	189e8 <__assert_fail@plt+0x765c>
   1a084:	add	sp, sp, #48	; 0x30
   1a088:	ldrd	r4, [sp]
   1a08c:	ldrd	r6, [sp, #8]
   1a090:	ldr	r8, [sp, #16]
   1a094:	ldrd	sl, [sp, #20]
   1a098:	add	sp, sp, #28
   1a09c:	pop	{pc}		; (ldr pc, [sp], #4)
   1a0a0:	bl	11344 <abort@plt>
   1a0a4:	andeq	pc, r2, ip, asr #5
   1a0a8:	ldr	ip, [pc, #156]	; 1a14c <__assert_fail@plt+0x8dc0>
   1a0ac:	cmp	r2, #0
   1a0b0:	cmpne	r1, #0
   1a0b4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1a0b8:	strd	r6, [sp, #8]
   1a0bc:	mov	r6, r2
   1a0c0:	str	r8, [sp, #16]
   1a0c4:	mov	r8, r3
   1a0c8:	strd	sl, [sp, #20]
   1a0cc:	ldrd	r4, [ip]
   1a0d0:	str	lr, [sp, #28]
   1a0d4:	sub	sp, sp, #48	; 0x30
   1a0d8:	mov	lr, #10
   1a0dc:	ldrd	r2, [ip, #8]
   1a0e0:	ldrd	sl, [ip, #16]
   1a0e4:	strd	r4, [sp]
   1a0e8:	ldrd	r4, [ip, #32]
   1a0ec:	str	lr, [sp]
   1a0f0:	strd	r2, [sp, #8]
   1a0f4:	strd	sl, [sp, #16]
   1a0f8:	ldrd	r2, [ip, #24]
   1a0fc:	ldrd	sl, [ip, #40]	; 0x28
   1a100:	strd	r2, [sp, #24]
   1a104:	strd	r4, [sp, #32]
   1a108:	strd	sl, [sp, #40]	; 0x28
   1a10c:	beq	1a148 <__assert_fail@plt+0x8dbc>
   1a110:	ldr	r2, [sp, #80]	; 0x50
   1a114:	mov	r7, r1
   1a118:	mov	r3, sp
   1a11c:	mov	r1, r8
   1a120:	str	r7, [sp, #40]	; 0x28
   1a124:	str	r6, [sp, #44]	; 0x2c
   1a128:	bl	189e8 <__assert_fail@plt+0x765c>
   1a12c:	add	sp, sp, #48	; 0x30
   1a130:	ldrd	r4, [sp]
   1a134:	ldrd	r6, [sp, #8]
   1a138:	ldr	r8, [sp, #16]
   1a13c:	ldrd	sl, [sp, #20]
   1a140:	add	sp, sp, #28
   1a144:	pop	{pc}		; (ldr pc, [sp], #4)
   1a148:	bl	11344 <abort@plt>
   1a14c:	andeq	pc, r2, ip, asr #5
   1a150:	ldr	ip, [pc, #512]	; 1a358 <__assert_fail@plt+0x8fcc>
   1a154:	cmp	r0, #0
   1a158:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1a15c:	ldrd	r4, [ip, #16]
   1a160:	strd	r6, [sp, #8]
   1a164:	clz	r6, r1
   1a168:	mov	r7, r1
   1a16c:	strd	r8, [sp, #16]
   1a170:	mov	r8, r0
   1a174:	lsr	r6, r6, #5
   1a178:	strd	sl, [sp, #24]
   1a17c:	mov	fp, r2
   1a180:	mov	sl, #10
   1a184:	ldrd	r2, [ip]
   1a188:	moveq	r6, #1
   1a18c:	str	lr, [sp, #32]
   1a190:	sub	sp, sp, #92	; 0x5c
   1a194:	cmp	r6, #0
   1a198:	ldrd	r0, [ip, #8]
   1a19c:	strd	r2, [sp, #40]	; 0x28
   1a1a0:	strd	r4, [sp, #56]	; 0x38
   1a1a4:	ldrd	r2, [ip, #24]
   1a1a8:	strd	r0, [sp, #48]	; 0x30
   1a1ac:	ldrd	r0, [ip, #32]
   1a1b0:	str	sl, [sp, #40]	; 0x28
   1a1b4:	ldrd	r4, [ip, #40]	; 0x28
   1a1b8:	strd	r2, [sp, #64]	; 0x40
   1a1bc:	strd	r0, [sp, #72]	; 0x48
   1a1c0:	strd	r4, [sp, #80]	; 0x50
   1a1c4:	bne	1a354 <__assert_fail@plt+0x8fc8>
   1a1c8:	movw	r5, #61764	; 0xf144
   1a1cc:	movt	r5, #2
   1a1d0:	str	r8, [sp, #80]	; 0x50
   1a1d4:	str	r7, [sp, #84]	; 0x54
   1a1d8:	bl	1123c <__errno_location@plt>
   1a1dc:	ldr	r3, [r0]
   1a1e0:	mov	r9, r0
   1a1e4:	ldr	r2, [r5, #4]
   1a1e8:	ldr	r4, [r5]
   1a1ec:	str	r3, [sp, #28]
   1a1f0:	cmp	r2, #0
   1a1f4:	movgt	r1, sl
   1a1f8:	bgt	1a260 <__assert_fail@plt+0x8ed4>
   1a1fc:	add	r3, r5, #8
   1a200:	str	r2, [sp, #36]	; 0x24
   1a204:	rsb	r2, r2, #1
   1a208:	cmp	r4, r3
   1a20c:	beq	1a328 <__assert_fail@plt+0x8f9c>
   1a210:	mov	r1, #8
   1a214:	mov	r0, r4
   1a218:	mvn	r3, #-2147483648	; 0x80000000
   1a21c:	str	r1, [sp]
   1a220:	add	r1, sp, #36	; 0x24
   1a224:	bl	1b7c0 <__assert_fail@plt+0xa434>
   1a228:	mov	r4, r0
   1a22c:	str	r0, [r5]
   1a230:	ldr	r0, [r5, #4]
   1a234:	mov	r1, #0
   1a238:	ldr	r2, [sp, #36]	; 0x24
   1a23c:	sub	r2, r2, r0
   1a240:	add	r0, r4, r0, lsl #3
   1a244:	lsl	r2, r2, #3
   1a248:	bl	11254 <memset@plt>
   1a24c:	ldr	r3, [sp, #36]	; 0x24
   1a250:	ldr	r1, [sp, #40]	; 0x28
   1a254:	ldr	r8, [sp, #80]	; 0x50
   1a258:	str	r3, [r5, #4]
   1a25c:	ldr	r7, [sp, #84]	; 0x54
   1a260:	mvn	r3, #0
   1a264:	mov	r2, fp
   1a268:	ldr	r6, [sp, #44]	; 0x2c
   1a26c:	ldr	sl, [r4]
   1a270:	ldr	r5, [r4, #4]
   1a274:	orr	r6, r6, #1
   1a278:	stm	sp, {r1, r6}
   1a27c:	add	r1, sp, #48	; 0x30
   1a280:	str	r8, [sp, #12]
   1a284:	mov	r0, r5
   1a288:	str	r1, [sp, #8]
   1a28c:	mov	r1, sl
   1a290:	str	r7, [sp, #16]
   1a294:	bl	16ffc <__assert_fail@plt+0x5c70>
   1a298:	cmp	sl, r0
   1a29c:	bhi	1a300 <__assert_fail@plt+0x8f74>
   1a2a0:	add	r7, r0, #1
   1a2a4:	movw	r3, #61900	; 0xf1cc
   1a2a8:	movt	r3, #2
   1a2ac:	cmp	r5, r3
   1a2b0:	str	r7, [r4]
   1a2b4:	beq	1a2c0 <__assert_fail@plt+0x8f34>
   1a2b8:	mov	r0, r5
   1a2bc:	bl	12dd8 <__assert_fail@plt+0x1a4c>
   1a2c0:	mov	r0, r7
   1a2c4:	bl	1b51c <__assert_fail@plt+0xa190>
   1a2c8:	ldr	r3, [sp, #40]	; 0x28
   1a2cc:	mov	r2, fp
   1a2d0:	mov	r1, r7
   1a2d4:	mov	r5, r0
   1a2d8:	ldr	lr, [sp, #80]	; 0x50
   1a2dc:	ldr	ip, [sp, #84]	; 0x54
   1a2e0:	str	r0, [r4, #4]
   1a2e4:	add	r4, sp, #48	; 0x30
   1a2e8:	stm	sp, {r3, r6}
   1a2ec:	mvn	r3, #0
   1a2f0:	str	r4, [sp, #8]
   1a2f4:	str	lr, [sp, #12]
   1a2f8:	str	ip, [sp, #16]
   1a2fc:	bl	16ffc <__assert_fail@plt+0x5c70>
   1a300:	ldr	r3, [sp, #28]
   1a304:	mov	r0, r5
   1a308:	str	r3, [r9]
   1a30c:	add	sp, sp, #92	; 0x5c
   1a310:	ldrd	r4, [sp]
   1a314:	ldrd	r6, [sp, #8]
   1a318:	ldrd	r8, [sp, #16]
   1a31c:	ldrd	sl, [sp, #24]
   1a320:	add	sp, sp, #32
   1a324:	pop	{pc}		; (ldr pc, [sp], #4)
   1a328:	mov	r1, #8
   1a32c:	mvn	r3, #-2147483648	; 0x80000000
   1a330:	mov	r0, r6
   1a334:	str	r1, [sp]
   1a338:	add	r1, sp, #36	; 0x24
   1a33c:	bl	1b7c0 <__assert_fail@plt+0xa434>
   1a340:	ldrd	r2, [r5, #8]
   1a344:	mov	r4, r0
   1a348:	str	r0, [r5]
   1a34c:	strd	r2, [r0]
   1a350:	b	1a230 <__assert_fail@plt+0x8ea4>
   1a354:	bl	11344 <abort@plt>
   1a358:	andeq	pc, r2, ip, asr #5
   1a35c:	ldr	ip, [pc, #536]	; 1a57c <__assert_fail@plt+0x91f0>
   1a360:	cmp	r0, #0
   1a364:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1a368:	ldrd	r4, [ip, #16]
   1a36c:	strd	r6, [sp, #8]
   1a370:	mov	r6, r1
   1a374:	mov	r7, r0
   1a378:	strd	r8, [sp, #16]
   1a37c:	mov	r9, #10
   1a380:	strd	sl, [sp, #24]
   1a384:	mov	sl, r2
   1a388:	mov	fp, r3
   1a38c:	str	lr, [sp, #32]
   1a390:	clz	lr, r1
   1a394:	sub	sp, sp, #92	; 0x5c
   1a398:	ldrd	r2, [ip]
   1a39c:	lsr	lr, lr, #5
   1a3a0:	moveq	lr, #1
   1a3a4:	ldrd	r0, [ip, #8]
   1a3a8:	cmp	lr, #0
   1a3ac:	strd	r4, [sp, #56]	; 0x38
   1a3b0:	ldrd	r4, [ip, #40]	; 0x28
   1a3b4:	str	lr, [sp, #28]
   1a3b8:	strd	r2, [sp, #40]	; 0x28
   1a3bc:	ldrd	r2, [ip, #24]
   1a3c0:	strd	r0, [sp, #48]	; 0x30
   1a3c4:	ldrd	r0, [ip, #32]
   1a3c8:	str	r9, [sp, #40]	; 0x28
   1a3cc:	strd	r2, [sp, #64]	; 0x40
   1a3d0:	strd	r4, [sp, #80]	; 0x50
   1a3d4:	strd	r0, [sp, #72]	; 0x48
   1a3d8:	bne	1a578 <__assert_fail@plt+0x91ec>
   1a3dc:	movw	r5, #61764	; 0xf144
   1a3e0:	movt	r5, #2
   1a3e4:	str	r7, [sp, #80]	; 0x50
   1a3e8:	str	r6, [sp, #84]	; 0x54
   1a3ec:	bl	1123c <__errno_location@plt>
   1a3f0:	ldr	r3, [r0]
   1a3f4:	mov	r8, r0
   1a3f8:	ldr	r2, [r5, #4]
   1a3fc:	ldr	r4, [r5]
   1a400:	str	r3, [sp, #24]
   1a404:	cmp	r2, #0
   1a408:	movgt	r1, r9
   1a40c:	bgt	1a474 <__assert_fail@plt+0x90e8>
   1a410:	add	r3, r5, #8
   1a414:	str	r2, [sp, #36]	; 0x24
   1a418:	rsb	r2, r2, #1
   1a41c:	cmp	r4, r3
   1a420:	beq	1a54c <__assert_fail@plt+0x91c0>
   1a424:	mov	r1, #8
   1a428:	mov	r0, r4
   1a42c:	mvn	r3, #-2147483648	; 0x80000000
   1a430:	str	r1, [sp]
   1a434:	add	r1, sp, #36	; 0x24
   1a438:	bl	1b7c0 <__assert_fail@plt+0xa434>
   1a43c:	mov	r4, r0
   1a440:	str	r0, [r5]
   1a444:	ldr	r0, [r5, #4]
   1a448:	mov	r1, #0
   1a44c:	ldr	r2, [sp, #36]	; 0x24
   1a450:	sub	r2, r2, r0
   1a454:	add	r0, r4, r0, lsl #3
   1a458:	lsl	r2, r2, #3
   1a45c:	bl	11254 <memset@plt>
   1a460:	ldr	r3, [sp, #36]	; 0x24
   1a464:	ldr	r1, [sp, #40]	; 0x28
   1a468:	ldr	r7, [sp, #80]	; 0x50
   1a46c:	str	r3, [r5, #4]
   1a470:	ldr	r6, [sp, #84]	; 0x54
   1a474:	mov	r3, fp
   1a478:	mov	r2, sl
   1a47c:	ldr	r0, [sp, #44]	; 0x2c
   1a480:	ldr	r9, [r4]
   1a484:	ldr	r5, [r4, #4]
   1a488:	orr	r0, r0, #1
   1a48c:	str	r1, [sp]
   1a490:	add	r1, sp, #48	; 0x30
   1a494:	str	r0, [sp, #4]
   1a498:	str	r1, [sp, #8]
   1a49c:	mov	r1, r9
   1a4a0:	str	r7, [sp, #12]
   1a4a4:	str	r6, [sp, #16]
   1a4a8:	str	r0, [sp, #28]
   1a4ac:	mov	r0, r5
   1a4b0:	bl	16ffc <__assert_fail@plt+0x5c70>
   1a4b4:	cmp	r9, r0
   1a4b8:	bhi	1a524 <__assert_fail@plt+0x9198>
   1a4bc:	add	r6, r0, #1
   1a4c0:	movw	r3, #61900	; 0xf1cc
   1a4c4:	movt	r3, #2
   1a4c8:	cmp	r5, r3
   1a4cc:	str	r6, [r4]
   1a4d0:	beq	1a4dc <__assert_fail@plt+0x9150>
   1a4d4:	mov	r0, r5
   1a4d8:	bl	12dd8 <__assert_fail@plt+0x1a4c>
   1a4dc:	mov	r0, r6
   1a4e0:	bl	1b51c <__assert_fail@plt+0xa190>
   1a4e4:	ldr	lr, [sp, #40]	; 0x28
   1a4e8:	mov	r1, r6
   1a4ec:	mov	r3, fp
   1a4f0:	mov	r2, sl
   1a4f4:	mov	r5, r0
   1a4f8:	ldr	r6, [sp, #80]	; 0x50
   1a4fc:	ldr	ip, [sp, #84]	; 0x54
   1a500:	str	r0, [r4, #4]
   1a504:	str	lr, [sp]
   1a508:	ldr	lr, [sp, #28]
   1a50c:	str	lr, [sp, #4]
   1a510:	add	lr, sp, #48	; 0x30
   1a514:	str	r6, [sp, #12]
   1a518:	str	lr, [sp, #8]
   1a51c:	str	ip, [sp, #16]
   1a520:	bl	16ffc <__assert_fail@plt+0x5c70>
   1a524:	ldr	r3, [sp, #24]
   1a528:	mov	r0, r5
   1a52c:	str	r3, [r8]
   1a530:	add	sp, sp, #92	; 0x5c
   1a534:	ldrd	r4, [sp]
   1a538:	ldrd	r6, [sp, #8]
   1a53c:	ldrd	r8, [sp, #16]
   1a540:	ldrd	sl, [sp, #24]
   1a544:	add	sp, sp, #32
   1a548:	pop	{pc}		; (ldr pc, [sp], #4)
   1a54c:	mov	r1, #8
   1a550:	mvn	r3, #-2147483648	; 0x80000000
   1a554:	ldr	r0, [sp, #28]
   1a558:	str	r1, [sp]
   1a55c:	add	r1, sp, #36	; 0x24
   1a560:	bl	1b7c0 <__assert_fail@plt+0xa434>
   1a564:	ldrd	r2, [r5, #8]
   1a568:	mov	r4, r0
   1a56c:	str	r0, [r5]
   1a570:	strd	r2, [r0]
   1a574:	b	1a444 <__assert_fail@plt+0x90b8>
   1a578:	bl	11344 <abort@plt>
   1a57c:	andeq	pc, r2, ip, asr #5
   1a580:	ldr	r3, [pc]	; 1a588 <__assert_fail@plt+0x91fc>
   1a584:	b	189e8 <__assert_fail@plt+0x765c>
   1a588:	andeq	pc, r2, r4, asr r1	; <UNPREDICTABLE>
   1a58c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1a590:	movw	r4, #61764	; 0xf144
   1a594:	movt	r4, #2
   1a598:	strd	r6, [sp, #8]
   1a59c:	strd	r8, [sp, #16]
   1a5a0:	strd	sl, [sp, #24]
   1a5a4:	mov	sl, r0
   1a5a8:	mov	fp, r1
   1a5ac:	str	lr, [sp, #32]
   1a5b0:	sub	sp, sp, #44	; 0x2c
   1a5b4:	bl	1123c <__errno_location@plt>
   1a5b8:	ldr	r3, [r0]
   1a5bc:	mov	r8, r0
   1a5c0:	ldr	r2, [r4, #4]
   1a5c4:	ldr	r5, [r4]
   1a5c8:	str	r3, [sp, #28]
   1a5cc:	cmp	r2, #0
   1a5d0:	bgt	1a62c <__assert_fail@plt+0x92a0>
   1a5d4:	add	r3, r4, #8
   1a5d8:	str	r2, [sp, #36]	; 0x24
   1a5dc:	rsb	r2, r2, #1
   1a5e0:	cmp	r5, r3
   1a5e4:	beq	1a708 <__assert_fail@plt+0x937c>
   1a5e8:	mov	r1, #8
   1a5ec:	mov	r0, r5
   1a5f0:	mvn	r3, #-2147483648	; 0x80000000
   1a5f4:	str	r1, [sp]
   1a5f8:	add	r1, sp, #36	; 0x24
   1a5fc:	bl	1b7c0 <__assert_fail@plt+0xa434>
   1a600:	mov	r5, r0
   1a604:	str	r0, [r4]
   1a608:	ldr	r0, [r4, #4]
   1a60c:	mov	r1, #0
   1a610:	ldr	r2, [sp, #36]	; 0x24
   1a614:	sub	r2, r2, r0
   1a618:	add	r0, r5, r0, lsl #3
   1a61c:	lsl	r2, r2, #3
   1a620:	bl	11254 <memset@plt>
   1a624:	ldr	r3, [sp, #36]	; 0x24
   1a628:	str	r3, [r4, #4]
   1a62c:	ldr	ip, [r4, #16]
   1a630:	mov	r3, fp
   1a634:	mov	r2, sl
   1a638:	ldr	r7, [r4, #20]
   1a63c:	ldr	r0, [pc, #240]	; 1a734 <__assert_fail@plt+0x93a8>
   1a640:	ldr	r9, [r5]
   1a644:	orr	r7, r7, #1
   1a648:	ldr	r6, [r5, #4]
   1a64c:	str	ip, [sp]
   1a650:	ldr	ip, [r4, #56]	; 0x38
   1a654:	mov	r1, r9
   1a658:	str	r7, [sp, #4]
   1a65c:	ldr	lr, [r4, #60]	; 0x3c
   1a660:	str	r0, [sp, #8]
   1a664:	mov	r0, r6
   1a668:	str	ip, [sp, #12]
   1a66c:	str	lr, [sp, #16]
   1a670:	bl	16ffc <__assert_fail@plt+0x5c70>
   1a674:	cmp	r9, r0
   1a678:	bhi	1a6e0 <__assert_fail@plt+0x9354>
   1a67c:	add	r9, r0, #1
   1a680:	movw	r3, #61900	; 0xf1cc
   1a684:	movt	r3, #2
   1a688:	cmp	r6, r3
   1a68c:	str	r9, [r5]
   1a690:	beq	1a69c <__assert_fail@plt+0x9310>
   1a694:	mov	r0, r6
   1a698:	bl	12dd8 <__assert_fail@plt+0x1a4c>
   1a69c:	mov	r0, r9
   1a6a0:	bl	1b51c <__assert_fail@plt+0xa190>
   1a6a4:	ldr	ip, [r4, #16]
   1a6a8:	mov	r1, r9
   1a6ac:	mov	r3, fp
   1a6b0:	mov	r2, sl
   1a6b4:	mov	r6, r0
   1a6b8:	ldr	r9, [r4, #56]	; 0x38
   1a6bc:	ldr	lr, [r4, #60]	; 0x3c
   1a6c0:	str	r0, [r5, #4]
   1a6c4:	str	ip, [sp]
   1a6c8:	ldr	ip, [pc, #100]	; 1a734 <__assert_fail@plt+0x93a8>
   1a6cc:	str	r7, [sp, #4]
   1a6d0:	str	ip, [sp, #8]
   1a6d4:	str	r9, [sp, #12]
   1a6d8:	str	lr, [sp, #16]
   1a6dc:	bl	16ffc <__assert_fail@plt+0x5c70>
   1a6e0:	ldr	r3, [sp, #28]
   1a6e4:	mov	r0, r6
   1a6e8:	str	r3, [r8]
   1a6ec:	add	sp, sp, #44	; 0x2c
   1a6f0:	ldrd	r4, [sp]
   1a6f4:	ldrd	r6, [sp, #8]
   1a6f8:	ldrd	r8, [sp, #16]
   1a6fc:	ldrd	sl, [sp, #24]
   1a700:	add	sp, sp, #32
   1a704:	pop	{pc}		; (ldr pc, [sp], #4)
   1a708:	mov	r0, #8
   1a70c:	mvn	r3, #-2147483648	; 0x80000000
   1a710:	add	r1, sp, #36	; 0x24
   1a714:	str	r0, [sp]
   1a718:	mov	r0, #0
   1a71c:	bl	1b7c0 <__assert_fail@plt+0xa434>
   1a720:	ldrd	r2, [r4, #8]
   1a724:	mov	r5, r0
   1a728:	str	r0, [r4]
   1a72c:	strd	r2, [r0]
   1a730:	b	1a608 <__assert_fail@plt+0x927c>
   1a734:	andeq	pc, r2, ip, asr r1	; <UNPREDICTABLE>
   1a738:	ldr	r3, [pc, #4]	; 1a744 <__assert_fail@plt+0x93b8>
   1a73c:	mvn	r2, #0
   1a740:	b	189e8 <__assert_fail@plt+0x765c>
   1a744:	andeq	pc, r2, r4, asr r1	; <UNPREDICTABLE>
   1a748:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1a74c:	movw	r4, #61764	; 0xf144
   1a750:	movt	r4, #2
   1a754:	strd	r6, [sp, #8]
   1a758:	strd	r8, [sp, #16]
   1a75c:	strd	sl, [sp, #24]
   1a760:	mov	sl, r0
   1a764:	str	lr, [sp, #32]
   1a768:	sub	sp, sp, #44	; 0x2c
   1a76c:	bl	1123c <__errno_location@plt>
   1a770:	ldr	r3, [r0]
   1a774:	mov	r8, r0
   1a778:	ldr	r2, [r4, #4]
   1a77c:	ldr	r5, [r4]
   1a780:	str	r3, [sp, #28]
   1a784:	cmp	r2, #0
   1a788:	bgt	1a7e4 <__assert_fail@plt+0x9458>
   1a78c:	add	r3, r4, #8
   1a790:	str	r2, [sp, #36]	; 0x24
   1a794:	rsb	r2, r2, #1
   1a798:	cmp	r5, r3
   1a79c:	beq	1a8ac <__assert_fail@plt+0x9520>
   1a7a0:	mov	r1, #8
   1a7a4:	mov	r0, r5
   1a7a8:	mvn	r3, #-2147483648	; 0x80000000
   1a7ac:	str	r1, [sp]
   1a7b0:	add	r1, sp, #36	; 0x24
   1a7b4:	bl	1b7c0 <__assert_fail@plt+0xa434>
   1a7b8:	mov	r5, r0
   1a7bc:	str	r0, [r4]
   1a7c0:	ldr	r0, [r4, #4]
   1a7c4:	mov	r1, #0
   1a7c8:	ldr	r2, [sp, #36]	; 0x24
   1a7cc:	sub	r2, r2, r0
   1a7d0:	add	r0, r5, r0, lsl #3
   1a7d4:	lsl	r2, r2, #3
   1a7d8:	bl	11254 <memset@plt>
   1a7dc:	ldr	r3, [sp, #36]	; 0x24
   1a7e0:	str	r3, [r4, #4]
   1a7e4:	ldr	ip, [r4, #16]
   1a7e8:	mvn	r3, #0
   1a7ec:	mov	r2, sl
   1a7f0:	ldr	r7, [r4, #20]
   1a7f4:	ldr	fp, [pc, #220]	; 1a8d8 <__assert_fail@plt+0x954c>
   1a7f8:	ldr	r9, [r5]
   1a7fc:	orr	r7, r7, #1
   1a800:	ldr	r6, [r5, #4]
   1a804:	str	ip, [sp]
   1a808:	ldr	ip, [r4, #56]	; 0x38
   1a80c:	mov	r1, r9
   1a810:	stmib	sp, {r7, fp}
   1a814:	ldr	lr, [r4, #60]	; 0x3c
   1a818:	mov	r0, r6
   1a81c:	str	ip, [sp, #12]
   1a820:	str	lr, [sp, #16]
   1a824:	bl	16ffc <__assert_fail@plt+0x5c70>
   1a828:	cmp	r9, r0
   1a82c:	bhi	1a884 <__assert_fail@plt+0x94f8>
   1a830:	add	r9, r0, #1
   1a834:	movw	r3, #61900	; 0xf1cc
   1a838:	movt	r3, #2
   1a83c:	cmp	r6, r3
   1a840:	str	r9, [r5]
   1a844:	beq	1a850 <__assert_fail@plt+0x94c4>
   1a848:	mov	r0, r6
   1a84c:	bl	12dd8 <__assert_fail@plt+0x1a4c>
   1a850:	mov	r0, r9
   1a854:	bl	1b51c <__assert_fail@plt+0xa190>
   1a858:	ldr	r3, [r4, #16]
   1a85c:	mov	r2, sl
   1a860:	mov	r1, r9
   1a864:	mov	r6, r0
   1a868:	ldr	lr, [r4, #56]	; 0x38
   1a86c:	ldr	ip, [r4, #60]	; 0x3c
   1a870:	str	r0, [r5, #4]
   1a874:	stm	sp, {r3, r7, fp, lr}
   1a878:	mvn	r3, #0
   1a87c:	str	ip, [sp, #16]
   1a880:	bl	16ffc <__assert_fail@plt+0x5c70>
   1a884:	ldr	r3, [sp, #28]
   1a888:	mov	r0, r6
   1a88c:	str	r3, [r8]
   1a890:	add	sp, sp, #44	; 0x2c
   1a894:	ldrd	r4, [sp]
   1a898:	ldrd	r6, [sp, #8]
   1a89c:	ldrd	r8, [sp, #16]
   1a8a0:	ldrd	sl, [sp, #24]
   1a8a4:	add	sp, sp, #32
   1a8a8:	pop	{pc}		; (ldr pc, [sp], #4)
   1a8ac:	mov	r0, #8
   1a8b0:	mvn	r3, #-2147483648	; 0x80000000
   1a8b4:	add	r1, sp, #36	; 0x24
   1a8b8:	str	r0, [sp]
   1a8bc:	mov	r0, #0
   1a8c0:	bl	1b7c0 <__assert_fail@plt+0xa434>
   1a8c4:	ldrd	r2, [r4, #8]
   1a8c8:	mov	r5, r0
   1a8cc:	str	r0, [r4]
   1a8d0:	strd	r2, [r0]
   1a8d4:	b	1a7c0 <__assert_fail@plt+0x9434>
   1a8d8:	andeq	pc, r2, ip, asr r1	; <UNPREDICTABLE>
   1a8dc:	str	r4, [sp, #-16]!
   1a8e0:	movw	r1, #55316	; 0xd814
   1a8e4:	movt	r1, #1
   1a8e8:	strd	r6, [sp, #4]
   1a8ec:	mov	r4, r0
   1a8f0:	mov	r0, #3
   1a8f4:	str	lr, [sp, #12]
   1a8f8:	sub	sp, sp, #104	; 0x68
   1a8fc:	mov	r2, sp
   1a900:	bl	1135c <__lxstat64@plt>
   1a904:	cmp	r0, #0
   1a908:	movne	r0, #0
   1a90c:	bne	1a924 <__assert_fail@plt+0x9598>
   1a910:	ldrd	r6, [sp]
   1a914:	mov	r0, r4
   1a918:	ldrd	r2, [sp, #96]	; 0x60
   1a91c:	strd	r2, [r4]
   1a920:	strd	r6, [r4, #8]
   1a924:	add	sp, sp, #104	; 0x68
   1a928:	ldr	r4, [sp]
   1a92c:	ldrd	r6, [sp, #4]
   1a930:	add	sp, sp, #12
   1a934:	pop	{pc}		; (ldr pc, [sp], #4)
   1a938:	cmp	r0, #2
   1a93c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1a940:	mov	r4, r0
   1a944:	strd	r6, [sp, #8]
   1a948:	str	r8, [sp, #16]
   1a94c:	str	lr, [sp, #20]
   1a950:	bls	1a96c <__assert_fail@plt+0x95e0>
   1a954:	mov	r0, r4
   1a958:	ldrd	r4, [sp]
   1a95c:	ldrd	r6, [sp, #8]
   1a960:	ldr	r8, [sp, #16]
   1a964:	add	sp, sp, #20
   1a968:	pop	{pc}		; (ldr pc, [sp], #4)
   1a96c:	bl	1c874 <__assert_fail@plt+0xb4e8>
   1a970:	mov	r7, r0
   1a974:	bl	1123c <__errno_location@plt>
   1a978:	mov	r5, r0
   1a97c:	mov	r0, r4
   1a980:	ldr	r6, [r5]
   1a984:	mov	r4, r7
   1a988:	bl	11350 <close@plt>
   1a98c:	str	r6, [r5]
   1a990:	b	1a954 <__assert_fail@plt+0x95c8>
   1a994:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1a998:	mov	r4, r1
   1a99c:	strd	r6, [sp, #8]
   1a9a0:	strd	r8, [sp, #16]
   1a9a4:	subs	r9, r3, #0
   1a9a8:	mov	r8, r2
   1a9ac:	strd	sl, [sp, #24]
   1a9b0:	mvneq	sl, #0
   1a9b4:	str	lr, [sp, #32]
   1a9b8:	sub	sp, sp, #44	; 0x2c
   1a9bc:	ldr	r3, [sp, #80]	; 0x50
   1a9c0:	ldrne	sl, [r9]
   1a9c4:	ldr	fp, [r2]
   1a9c8:	cmp	r3, #0
   1a9cc:	ldr	r6, [sp, #84]	; 0x54
   1a9d0:	beq	1a9e0 <__assert_fail@plt+0x9654>
   1a9d4:	mov	r2, r3
   1a9d8:	mov	r3, #0
   1a9dc:	str	r3, [r2]
   1a9e0:	cmp	r6, #0
   1a9e4:	movne	r3, #0
   1a9e8:	strne	r3, [r6]
   1a9ec:	cmp	r4, #0
   1a9f0:	beq	1aba4 <__assert_fail@plt+0x9818>
   1a9f4:	subs	r3, r4, r0
   1a9f8:	bne	1aaa0 <__assert_fail@plt+0x9714>
   1a9fc:	ldrb	r2, [r4, #1]
   1aa00:	cmp	r2, #0
   1aa04:	beq	1abb8 <__assert_fail@plt+0x982c>
   1aa08:	adds	r5, r4, #1
   1aa0c:	moveq	r4, r5
   1aa10:	beq	1aa48 <__assert_fail@plt+0x96bc>
   1aa14:	mov	r4, r3
   1aa18:	ldrb	r3, [r5]
   1aa1c:	cmp	r3, #43	; 0x2b
   1aa20:	beq	1ab14 <__assert_fail@plt+0x9788>
   1aa24:	mov	r0, r5
   1aa28:	bl	11380 <getgrnam@plt>
   1aa2c:	cmp	r0, #0
   1aa30:	beq	1ab14 <__assert_fail@plt+0x9788>
   1aa34:	ldr	sl, [r0, #8]
   1aa38:	bl	11044 <endgrent@plt>
   1aa3c:	mov	r0, r5
   1aa40:	bl	1ba40 <__assert_fail@plt+0xa6b4>
   1aa44:	mov	r5, r0
   1aa48:	ldr	r3, [sp, #80]	; 0x50
   1aa4c:	cmp	r9, #0
   1aa50:	str	fp, [r8]
   1aa54:	strne	sl, [r9]
   1aa58:	cmp	r3, #0
   1aa5c:	strne	r4, [r3]
   1aa60:	movne	r4, #0
   1aa64:	cmp	r6, #0
   1aa68:	mov	r0, r4
   1aa6c:	strne	r5, [r6]
   1aa70:	movne	r5, #0
   1aa74:	bl	12dd8 <__assert_fail@plt+0x1a4c>
   1aa78:	mov	r0, r5
   1aa7c:	bl	12dd8 <__assert_fail@plt+0x1a4c>
   1aa80:	mov	r0, #0
   1aa84:	add	sp, sp, #44	; 0x2c
   1aa88:	ldrd	r4, [sp]
   1aa8c:	ldrd	r6, [sp, #8]
   1aa90:	ldrd	r8, [sp, #16]
   1aa94:	ldrd	sl, [sp, #24]
   1aa98:	add	sp, sp, #32
   1aa9c:	pop	{pc}		; (ldr pc, [sp], #4)
   1aaa0:	add	r1, r3, #1
   1aaa4:	str	r3, [sp, #12]
   1aaa8:	bl	1b9a8 <__assert_fail@plt+0xa61c>
   1aaac:	ldrb	r5, [r4, #1]
   1aab0:	mov	r2, #0
   1aab4:	mov	r7, r0
   1aab8:	ldr	r3, [sp, #12]
   1aabc:	cmp	r5, r2
   1aac0:	strb	r2, [r0, r3]
   1aac4:	ldrb	r3, [r0]
   1aac8:	beq	1abc0 <__assert_fail@plt+0x9834>
   1aacc:	adds	r5, r4, #1
   1aad0:	moveq	r4, #1
   1aad4:	movne	r4, r2
   1aad8:	cmp	r3, #43	; 0x2b
   1aadc:	beq	1ab68 <__assert_fail@plt+0x97dc>
   1aae0:	bl	11068 <getpwnam@plt>
   1aae4:	cmp	r0, #0
   1aae8:	beq	1ab68 <__assert_fail@plt+0x97dc>
   1aaec:	cmp	r4, #0
   1aaf0:	ldr	fp, [r0, #8]
   1aaf4:	moveq	r4, r7
   1aaf8:	bne	1abdc <__assert_fail@plt+0x9850>
   1aafc:	bl	112b4 <endpwent@plt>
   1ab00:	cmp	r5, #0
   1ab04:	beq	1aa48 <__assert_fail@plt+0x96bc>
   1ab08:	ldrb	r3, [r5]
   1ab0c:	cmp	r3, #43	; 0x2b
   1ab10:	bne	1aa24 <__assert_fail@plt+0x9698>
   1ab14:	movw	r0, #54380	; 0xd46c
   1ab18:	movt	r0, #1
   1ab1c:	add	r3, sp, #16
   1ab20:	mov	r2, #10
   1ab24:	mov	r1, #0
   1ab28:	str	r0, [sp]
   1ab2c:	mov	r0, r5
   1ab30:	bl	1bb60 <__assert_fail@plt+0xa7d4>
   1ab34:	cmp	r0, #0
   1ab38:	bne	1ab48 <__assert_fail@plt+0x97bc>
   1ab3c:	ldr	sl, [sp, #16]
   1ab40:	cmn	sl, #1
   1ab44:	bne	1aa38 <__assert_fail@plt+0x96ac>
   1ab48:	bl	11044 <endgrent@plt>
   1ab4c:	mov	r0, r5
   1ab50:	mov	r7, r4
   1ab54:	bl	1ba40 <__assert_fail@plt+0xa6b4>
   1ab58:	movw	r4, #57044	; 0xded4
   1ab5c:	movt	r4, #1
   1ab60:	mov	r5, r0
   1ab64:	b	1ab80 <__assert_fail@plt+0x97f4>
   1ab68:	cmp	r4, #0
   1ab6c:	beq	1ac30 <__assert_fail@plt+0x98a4>
   1ab70:	movw	r4, #57028	; 0xdec4
   1ab74:	movt	r4, #1
   1ab78:	mov	r5, #0
   1ab7c:	bl	112b4 <endpwent@plt>
   1ab80:	mov	r0, r7
   1ab84:	bl	12dd8 <__assert_fail@plt+0x1a4c>
   1ab88:	mov	r0, r5
   1ab8c:	bl	12dd8 <__assert_fail@plt+0x1a4c>
   1ab90:	mov	r1, r4
   1ab94:	mov	r2, #5
   1ab98:	mov	r0, #0
   1ab9c:	bl	11104 <dcgettext@plt>
   1aba0:	b	1aa84 <__assert_fail@plt+0x96f8>
   1aba4:	ldrb	r3, [r0]
   1aba8:	cmp	r3, #0
   1abac:	bne	1ac0c <__assert_fail@plt+0x9880>
   1abb0:	mov	r5, r4
   1abb4:	b	1aa48 <__assert_fail@plt+0x96bc>
   1abb8:	mov	r4, r2
   1abbc:	b	1abb0 <__assert_fail@plt+0x9824>
   1abc0:	cmp	r3, #43	; 0x2b
   1abc4:	beq	1ab70 <__assert_fail@plt+0x97e4>
   1abc8:	bl	11068 <getpwnam@plt>
   1abcc:	cmp	r0, #0
   1abd0:	movne	r4, #1
   1abd4:	bne	1aaec <__assert_fail@plt+0x9760>
   1abd8:	b	1ab70 <__assert_fail@plt+0x97e4>
   1abdc:	ldr	sl, [r0, #12]
   1abe0:	mov	r0, sl
   1abe4:	bl	11374 <getgrgid@plt>
   1abe8:	subs	r1, r0, #0
   1abec:	beq	1ac9c <__assert_fail@plt+0x9910>
   1abf0:	ldr	r0, [r1]
   1abf4:	bl	1ba40 <__assert_fail@plt+0xa6b4>
   1abf8:	mov	r5, r0
   1abfc:	mov	r4, r7
   1ac00:	bl	11044 <endgrent@plt>
   1ac04:	bl	112b4 <endpwent@plt>
   1ac08:	b	1aa48 <__assert_fail@plt+0x96bc>
   1ac0c:	bl	1ba40 <__assert_fail@plt+0xa6b4>
   1ac10:	ldrb	r3, [r0]
   1ac14:	mov	r7, r0
   1ac18:	cmp	r3, #43	; 0x2b
   1ac1c:	moveq	r5, r4
   1ac20:	beq	1ac30 <__assert_fail@plt+0x98a4>
   1ac24:	bl	11068 <getpwnam@plt>
   1ac28:	subs	r5, r0, #0
   1ac2c:	bne	1ac8c <__assert_fail@plt+0x9900>
   1ac30:	movw	r0, #54380	; 0xd46c
   1ac34:	movt	r0, #1
   1ac38:	add	r3, sp, #16
   1ac3c:	mov	r2, #10
   1ac40:	mov	r1, #0
   1ac44:	str	r0, [sp]
   1ac48:	mov	r0, r7
   1ac4c:	bl	1bb60 <__assert_fail@plt+0xa7d4>
   1ac50:	cmp	r0, #0
   1ac54:	bne	1ac78 <__assert_fail@plt+0x98ec>
   1ac58:	ldr	fp, [sp, #16]
   1ac5c:	cmn	fp, #1
   1ac60:	beq	1ac78 <__assert_fail@plt+0x98ec>
   1ac64:	bl	112b4 <endpwent@plt>
   1ac68:	cmp	r5, #0
   1ac6c:	mov	r4, r7
   1ac70:	beq	1aa48 <__assert_fail@plt+0x96bc>
   1ac74:	b	1aa18 <__assert_fail@plt+0x968c>
   1ac78:	movw	r4, #57060	; 0xdee4
   1ac7c:	movt	r4, #1
   1ac80:	bl	112b4 <endpwent@plt>
   1ac84:	mov	r5, #0
   1ac88:	b	1ab80 <__assert_fail@plt+0x97f4>
   1ac8c:	ldr	fp, [r5, #8]
   1ac90:	mov	r5, r4
   1ac94:	mov	r4, r7
   1ac98:	b	1aafc <__assert_fail@plt+0x9770>
   1ac9c:	add	r2, sp, #16
   1aca0:	mov	r0, sl
   1aca4:	bl	16cbc <__assert_fail@plt+0x5930>
   1aca8:	b	1abf4 <__assert_fail@plt+0x9868>
   1acac:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1acb0:	strd	r6, [sp, #8]
   1acb4:	subs	r7, r2, #0
   1acb8:	strd	r8, [sp, #16]
   1acbc:	mov	r9, r1
   1acc0:	mov	r8, r3
   1acc4:	str	sl, [sp, #24]
   1acc8:	str	lr, [sp, #28]
   1accc:	sub	sp, sp, #8
   1acd0:	ldr	r6, [sp, #40]	; 0x28
   1acd4:	beq	1ad6c <__assert_fail@plt+0x99e0>
   1acd8:	mov	r1, #58	; 0x3a
   1acdc:	mov	r5, r0
   1ace0:	bl	11218 <strchr@plt>
   1ace4:	mov	sl, r0
   1ace8:	mov	r1, r0
   1acec:	str	r8, [sp]
   1acf0:	mov	r3, r7
   1acf4:	mov	r2, r9
   1acf8:	str	r6, [sp, #4]
   1acfc:	mov	r0, r5
   1ad00:	bl	1a994 <__assert_fail@plt+0x9608>
   1ad04:	cmp	sl, #0
   1ad08:	mov	r4, r0
   1ad0c:	bne	1ad4c <__assert_fail@plt+0x99c0>
   1ad10:	cmp	r0, #0
   1ad14:	beq	1ad8c <__assert_fail@plt+0x9a00>
   1ad18:	mov	r1, #46	; 0x2e
   1ad1c:	mov	r0, r5
   1ad20:	bl	11218 <strchr@plt>
   1ad24:	subs	r1, r0, #0
   1ad28:	beq	1ad4c <__assert_fail@plt+0x99c0>
   1ad2c:	mov	r3, r7
   1ad30:	mov	r2, r9
   1ad34:	str	r8, [sp]
   1ad38:	mov	r0, r5
   1ad3c:	str	r6, [sp, #4]
   1ad40:	bl	1a994 <__assert_fail@plt+0x9608>
   1ad44:	cmp	r0, #0
   1ad48:	beq	1ad8c <__assert_fail@plt+0x9a00>
   1ad4c:	mov	r0, r4
   1ad50:	add	sp, sp, #8
   1ad54:	ldrd	r4, [sp]
   1ad58:	ldrd	r6, [sp, #8]
   1ad5c:	ldrd	r8, [sp, #16]
   1ad60:	ldr	sl, [sp, #24]
   1ad64:	add	sp, sp, #28
   1ad68:	pop	{pc}		; (ldr pc, [sp], #4)
   1ad6c:	mov	r2, r1
   1ad70:	mov	r3, r7
   1ad74:	str	r8, [sp]
   1ad78:	mov	r1, r7
   1ad7c:	str	r6, [sp, #4]
   1ad80:	bl	1a994 <__assert_fail@plt+0x9608>
   1ad84:	mov	r4, r0
   1ad88:	b	1ad4c <__assert_fail@plt+0x99c0>
   1ad8c:	mov	r4, #0
   1ad90:	b	1ad4c <__assert_fail@plt+0x99c0>
   1ad94:	cmp	r1, #0
   1ad98:	strd	r4, [sp, #-16]!
   1ad9c:	mov	ip, r3
   1ada0:	str	r6, [sp, #8]
   1ada4:	mov	r4, r0
   1ada8:	str	lr, [sp, #12]
   1adac:	sub	sp, sp, #32
   1adb0:	ldr	r5, [sp, #48]	; 0x30
   1adb4:	ldr	r6, [sp, #52]	; 0x34
   1adb8:	beq	1aefc <__assert_fail@plt+0x9b70>
   1adbc:	mov	r3, r1
   1adc0:	mov	r1, #1
   1adc4:	stm	sp, {r2, ip}
   1adc8:	movw	r2, #57076	; 0xdef4
   1adcc:	movt	r2, #1
   1add0:	bl	11278 <__fprintf_chk@plt>
   1add4:	mov	r2, #5
   1add8:	movw	r1, #57096	; 0xdf08
   1addc:	movt	r1, #1
   1ade0:	mov	r0, #0
   1ade4:	bl	11104 <dcgettext@plt>
   1ade8:	movw	ip, #2022	; 0x7e6
   1adec:	mov	r3, r0
   1adf0:	mov	r1, #1
   1adf4:	movw	r2, #57824	; 0xe1e0
   1adf8:	movt	r2, #1
   1adfc:	mov	r0, r4
   1ae00:	str	ip, [sp]
   1ae04:	bl	11278 <__fprintf_chk@plt>
   1ae08:	mov	r1, r4
   1ae0c:	mov	r0, #10
   1ae10:	bl	110f8 <fputc_unlocked@plt>
   1ae14:	mov	r2, #5
   1ae18:	movw	r1, #57100	; 0xdf0c
   1ae1c:	movt	r1, #1
   1ae20:	mov	r0, #0
   1ae24:	bl	11104 <dcgettext@plt>
   1ae28:	mov	r2, r0
   1ae2c:	mov	r1, #1
   1ae30:	movw	r3, #57272	; 0xdfb8
   1ae34:	movt	r3, #1
   1ae38:	mov	r0, r4
   1ae3c:	bl	11278 <__fprintf_chk@plt>
   1ae40:	mov	r1, r4
   1ae44:	mov	r0, #10
   1ae48:	bl	110f8 <fputc_unlocked@plt>
   1ae4c:	cmp	r6, #9
   1ae50:	ldrls	pc, [pc, r6, lsl #2]
   1ae54:	b	1b168 <__assert_fail@plt+0x9ddc>
   1ae58:	andeq	sl, r1, r8, ror #29
   1ae5c:	andeq	sl, r1, r8, lsl pc
   1ae60:	andeq	sl, r1, r4, asr pc
   1ae64:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   1ae68:	ldrdeq	sl, [r1], -ip
   1ae6c:	andeq	fp, r1, r4, lsl r0
   1ae70:	andeq	fp, r1, ip, asr r0
   1ae74:	strheq	fp, [r1], -r0
   1ae78:	andeq	fp, r1, r8, lsl #2
   1ae7c:	andeq	sl, r1, r0, lsl #29
   1ae80:	movw	r1, #57576	; 0xe0e8
   1ae84:	movt	r1, #1
   1ae88:	mov	r2, #5
   1ae8c:	mov	r0, #0
   1ae90:	bl	11104 <dcgettext@plt>
   1ae94:	ldr	lr, [r5, #4]
   1ae98:	mov	r2, r0
   1ae9c:	mov	r1, #1
   1aea0:	mov	r0, r4
   1aea4:	ldr	r3, [r5, #8]
   1aea8:	ldr	ip, [r5, #32]
   1aeac:	str	lr, [sp]
   1aeb0:	ldr	lr, [r5, #12]
   1aeb4:	str	ip, [sp, #28]
   1aeb8:	ldr	ip, [r5, #28]
   1aebc:	str	r3, [sp, #4]
   1aec0:	ldr	r3, [r5, #16]
   1aec4:	str	lr, [sp, #8]
   1aec8:	ldr	lr, [r5, #20]
   1aecc:	str	ip, [sp, #24]
   1aed0:	ldr	ip, [r5, #24]
   1aed4:	str	r3, [sp, #12]
   1aed8:	ldr	r3, [r5]
   1aedc:	str	lr, [sp, #16]
   1aee0:	str	ip, [sp, #20]
   1aee4:	bl	11278 <__fprintf_chk@plt>
   1aee8:	add	sp, sp, #32
   1aeec:	ldrd	r4, [sp]
   1aef0:	ldr	r6, [sp, #8]
   1aef4:	add	sp, sp, #12
   1aef8:	pop	{pc}		; (ldr pc, [sp], #4)
   1aefc:	mov	r3, r2
   1af00:	mov	r1, #1
   1af04:	str	ip, [sp]
   1af08:	movw	r2, #57088	; 0xdf00
   1af0c:	movt	r2, #1
   1af10:	bl	11278 <__fprintf_chk@plt>
   1af14:	b	1add4 <__assert_fail@plt+0x9a48>
   1af18:	mov	r2, #5
   1af1c:	movw	r1, #57308	; 0xdfdc
   1af20:	movt	r1, #1
   1af24:	mov	r0, #0
   1af28:	bl	11104 <dcgettext@plt>
   1af2c:	ldr	r3, [r5]
   1af30:	mov	r2, r0
   1af34:	mov	r1, #1
   1af38:	mov	r0, r4
   1af3c:	add	sp, sp, #32
   1af40:	ldrd	r4, [sp]
   1af44:	ldr	r6, [sp, #8]
   1af48:	ldr	lr, [sp, #12]
   1af4c:	add	sp, sp, #16
   1af50:	b	11278 <__fprintf_chk@plt>
   1af54:	mov	r2, #5
   1af58:	movw	r1, #57324	; 0xdfec
   1af5c:	movt	r1, #1
   1af60:	mov	r0, #0
   1af64:	bl	11104 <dcgettext@plt>
   1af68:	ldm	r5, {r3, ip}
   1af6c:	mov	r2, r0
   1af70:	mov	r1, #1
   1af74:	mov	r0, r4
   1af78:	str	ip, [sp, #48]	; 0x30
   1af7c:	add	sp, sp, #32
   1af80:	ldrd	r4, [sp]
   1af84:	ldr	r6, [sp, #8]
   1af88:	ldr	lr, [sp, #12]
   1af8c:	add	sp, sp, #16
   1af90:	b	11278 <__fprintf_chk@plt>
   1af94:	mov	r2, #5
   1af98:	movw	r1, #57348	; 0xe004
   1af9c:	movt	r1, #1
   1afa0:	mov	r0, #0
   1afa4:	bl	11104 <dcgettext@plt>
   1afa8:	ldm	r5, {r3, lr}
   1afac:	mov	r2, r0
   1afb0:	mov	r1, #1
   1afb4:	mov	r0, r4
   1afb8:	ldr	ip, [r5, #8]
   1afbc:	str	lr, [sp, #48]	; 0x30
   1afc0:	str	ip, [sp, #52]	; 0x34
   1afc4:	add	sp, sp, #32
   1afc8:	ldrd	r4, [sp]
   1afcc:	ldr	r6, [sp, #8]
   1afd0:	ldr	lr, [sp, #12]
   1afd4:	add	sp, sp, #16
   1afd8:	b	11278 <__fprintf_chk@plt>
   1afdc:	mov	r2, #5
   1afe0:	movw	r1, #57376	; 0xe020
   1afe4:	movt	r1, #1
   1afe8:	mov	r0, #0
   1afec:	bl	11104 <dcgettext@plt>
   1aff0:	ldmib	r5, {r3, ip, lr}
   1aff4:	mov	r2, r0
   1aff8:	mov	r1, #1
   1affc:	mov	r0, r4
   1b000:	str	r3, [sp]
   1b004:	ldr	r3, [r5]
   1b008:	stmib	sp, {ip, lr}
   1b00c:	bl	11278 <__fprintf_chk@plt>
   1b010:	b	1aee8 <__assert_fail@plt+0x9b5c>
   1b014:	mov	r2, #5
   1b018:	movw	r1, #57408	; 0xe040
   1b01c:	movt	r1, #1
   1b020:	mov	r0, #0
   1b024:	bl	11104 <dcgettext@plt>
   1b028:	ldmib	r5, {ip, lr}
   1b02c:	mov	r2, r0
   1b030:	mov	r1, #1
   1b034:	mov	r0, r4
   1b038:	ldr	r3, [r5, #16]
   1b03c:	str	ip, [sp]
   1b040:	ldr	ip, [r5, #12]
   1b044:	str	r3, [sp, #12]
   1b048:	ldr	r3, [r5]
   1b04c:	str	lr, [sp, #4]
   1b050:	str	ip, [sp, #8]
   1b054:	bl	11278 <__fprintf_chk@plt>
   1b058:	b	1aee8 <__assert_fail@plt+0x9b5c>
   1b05c:	mov	r2, #5
   1b060:	movw	r1, #57444	; 0xe064
   1b064:	movt	r1, #1
   1b068:	mov	r0, #0
   1b06c:	bl	11104 <dcgettext@plt>
   1b070:	ldr	lr, [r5, #4]
   1b074:	mov	r2, r0
   1b078:	mov	r1, #1
   1b07c:	mov	r0, r4
   1b080:	ldr	r3, [r5, #8]
   1b084:	ldr	ip, [r5, #20]
   1b088:	str	lr, [sp]
   1b08c:	ldr	lr, [r5, #12]
   1b090:	str	ip, [sp, #16]
   1b094:	ldr	ip, [r5, #16]
   1b098:	str	r3, [sp, #4]
   1b09c:	ldr	r3, [r5]
   1b0a0:	str	lr, [sp, #8]
   1b0a4:	str	ip, [sp, #12]
   1b0a8:	bl	11278 <__fprintf_chk@plt>
   1b0ac:	b	1aee8 <__assert_fail@plt+0x9b5c>
   1b0b0:	mov	r2, #5
   1b0b4:	movw	r1, #57484	; 0xe08c
   1b0b8:	movt	r1, #1
   1b0bc:	mov	r0, #0
   1b0c0:	bl	11104 <dcgettext@plt>
   1b0c4:	ldmib	r5, {r3, ip}
   1b0c8:	mov	r2, r0
   1b0cc:	mov	r1, #1
   1b0d0:	mov	r0, r4
   1b0d4:	ldr	lr, [r5, #24]
   1b0d8:	str	r3, [sp]
   1b0dc:	ldr	r3, [r5, #12]
   1b0e0:	str	lr, [sp, #20]
   1b0e4:	ldr	lr, [r5, #20]
   1b0e8:	str	ip, [sp, #4]
   1b0ec:	ldr	ip, [r5, #16]
   1b0f0:	str	r3, [sp, #8]
   1b0f4:	ldr	r3, [r5]
   1b0f8:	str	ip, [sp, #12]
   1b0fc:	str	lr, [sp, #16]
   1b100:	bl	11278 <__fprintf_chk@plt>
   1b104:	b	1aee8 <__assert_fail@plt+0x9b5c>
   1b108:	mov	r2, #5
   1b10c:	movw	r1, #57528	; 0xe0b8
   1b110:	movt	r1, #1
   1b114:	mov	r0, #0
   1b118:	bl	11104 <dcgettext@plt>
   1b11c:	ldmib	r5, {ip, lr}
   1b120:	mov	r2, r0
   1b124:	mov	r1, #1
   1b128:	mov	r0, r4
   1b12c:	ldr	r3, [r5, #28]
   1b130:	str	ip, [sp]
   1b134:	ldr	ip, [r5, #12]
   1b138:	str	r3, [sp, #24]
   1b13c:	ldr	r3, [r5, #24]
   1b140:	str	lr, [sp, #4]
   1b144:	ldr	lr, [r5, #16]
   1b148:	str	ip, [sp, #8]
   1b14c:	ldr	ip, [r5, #20]
   1b150:	str	r3, [sp, #20]
   1b154:	ldr	r3, [r5]
   1b158:	str	lr, [sp, #12]
   1b15c:	str	ip, [sp, #16]
   1b160:	bl	11278 <__fprintf_chk@plt>
   1b164:	b	1aee8 <__assert_fail@plt+0x9b5c>
   1b168:	movw	r1, #57628	; 0xe11c
   1b16c:	movt	r1, #1
   1b170:	b	1ae88 <__assert_fail@plt+0x9afc>
   1b174:	strd	r4, [sp, #-12]!
   1b178:	str	lr, [sp, #8]
   1b17c:	sub	sp, sp, #12
   1b180:	ldr	r5, [sp, #24]
   1b184:	ldr	ip, [r5]
   1b188:	cmp	ip, #0
   1b18c:	beq	1b1a8 <__assert_fail@plt+0x9e1c>
   1b190:	mov	lr, r5
   1b194:	mov	ip, #0
   1b198:	ldr	r4, [lr, #4]!
   1b19c:	add	ip, ip, #1
   1b1a0:	cmp	r4, #0
   1b1a4:	bne	1b198 <__assert_fail@plt+0x9e0c>
   1b1a8:	stm	sp, {r5, ip}
   1b1ac:	bl	1ad94 <__assert_fail@plt+0x9a08>
   1b1b0:	add	sp, sp, #12
   1b1b4:	ldrd	r4, [sp]
   1b1b8:	add	sp, sp, #8
   1b1bc:	pop	{pc}		; (ldr pc, [sp], #4)
   1b1c0:	push	{lr}		; (str lr, [sp, #-4]!)
   1b1c4:	sub	sp, sp, #52	; 0x34
   1b1c8:	ldr	ip, [sp, #56]	; 0x38
   1b1cc:	ldr	lr, [ip]
   1b1d0:	cmp	lr, #0
   1b1d4:	str	lr, [sp, #8]
   1b1d8:	beq	1b270 <__assert_fail@plt+0x9ee4>
   1b1dc:	ldr	lr, [ip, #4]
   1b1e0:	cmp	lr, #0
   1b1e4:	str	lr, [sp, #12]
   1b1e8:	beq	1b284 <__assert_fail@plt+0x9ef8>
   1b1ec:	ldr	lr, [ip, #8]
   1b1f0:	cmp	lr, #0
   1b1f4:	str	lr, [sp, #16]
   1b1f8:	beq	1b28c <__assert_fail@plt+0x9f00>
   1b1fc:	ldr	lr, [ip, #12]
   1b200:	cmp	lr, #0
   1b204:	str	lr, [sp, #20]
   1b208:	beq	1b294 <__assert_fail@plt+0x9f08>
   1b20c:	ldr	lr, [ip, #16]
   1b210:	cmp	lr, #0
   1b214:	str	lr, [sp, #24]
   1b218:	beq	1b29c <__assert_fail@plt+0x9f10>
   1b21c:	ldr	lr, [ip, #20]
   1b220:	cmp	lr, #0
   1b224:	str	lr, [sp, #28]
   1b228:	beq	1b2a4 <__assert_fail@plt+0x9f18>
   1b22c:	ldr	lr, [ip, #24]
   1b230:	cmp	lr, #0
   1b234:	str	lr, [sp, #32]
   1b238:	beq	1b2ac <__assert_fail@plt+0x9f20>
   1b23c:	ldr	lr, [ip, #28]
   1b240:	cmp	lr, #0
   1b244:	str	lr, [sp, #36]	; 0x24
   1b248:	beq	1b2b4 <__assert_fail@plt+0x9f28>
   1b24c:	ldr	lr, [ip, #32]
   1b250:	cmp	lr, #0
   1b254:	str	lr, [sp, #40]	; 0x28
   1b258:	beq	1b2bc <__assert_fail@plt+0x9f30>
   1b25c:	ldr	ip, [ip, #36]	; 0x24
   1b260:	cmp	ip, #0
   1b264:	str	ip, [sp, #44]	; 0x2c
   1b268:	movne	lr, #10
   1b26c:	moveq	lr, #9
   1b270:	add	ip, sp, #8
   1b274:	stm	sp, {ip, lr}
   1b278:	bl	1ad94 <__assert_fail@plt+0x9a08>
   1b27c:	add	sp, sp, #52	; 0x34
   1b280:	pop	{pc}		; (ldr pc, [sp], #4)
   1b284:	mov	lr, #1
   1b288:	b	1b270 <__assert_fail@plt+0x9ee4>
   1b28c:	mov	lr, #2
   1b290:	b	1b270 <__assert_fail@plt+0x9ee4>
   1b294:	mov	lr, #3
   1b298:	b	1b270 <__assert_fail@plt+0x9ee4>
   1b29c:	mov	lr, #4
   1b2a0:	b	1b270 <__assert_fail@plt+0x9ee4>
   1b2a4:	mov	lr, #5
   1b2a8:	b	1b270 <__assert_fail@plt+0x9ee4>
   1b2ac:	mov	lr, #6
   1b2b0:	b	1b270 <__assert_fail@plt+0x9ee4>
   1b2b4:	mov	lr, #7
   1b2b8:	b	1b270 <__assert_fail@plt+0x9ee4>
   1b2bc:	mov	lr, #8
   1b2c0:	b	1b270 <__assert_fail@plt+0x9ee4>
   1b2c4:	push	{r3}		; (str r3, [sp, #-4]!)
   1b2c8:	push	{lr}		; (str lr, [sp, #-4]!)
   1b2cc:	sub	sp, sp, #56	; 0x38
   1b2d0:	ldr	ip, [sp, #64]	; 0x40
   1b2d4:	add	r3, sp, #64	; 0x40
   1b2d8:	str	r3, [sp, #12]
   1b2dc:	cmp	ip, #0
   1b2e0:	str	ip, [sp, #16]
   1b2e4:	beq	1b37c <__assert_fail@plt+0x9ff0>
   1b2e8:	ldr	ip, [sp, #68]	; 0x44
   1b2ec:	cmp	ip, #0
   1b2f0:	str	ip, [sp, #20]
   1b2f4:	beq	1b3a0 <__assert_fail@plt+0xa014>
   1b2f8:	ldr	ip, [sp, #72]	; 0x48
   1b2fc:	cmp	ip, #0
   1b300:	str	ip, [sp, #24]
   1b304:	beq	1b3a8 <__assert_fail@plt+0xa01c>
   1b308:	ldr	ip, [sp, #76]	; 0x4c
   1b30c:	cmp	ip, #0
   1b310:	str	ip, [sp, #28]
   1b314:	beq	1b3b0 <__assert_fail@plt+0xa024>
   1b318:	ldr	ip, [sp, #80]	; 0x50
   1b31c:	cmp	ip, #0
   1b320:	str	ip, [sp, #32]
   1b324:	beq	1b3b8 <__assert_fail@plt+0xa02c>
   1b328:	ldr	ip, [sp, #84]	; 0x54
   1b32c:	cmp	ip, #0
   1b330:	str	ip, [sp, #36]	; 0x24
   1b334:	beq	1b3c0 <__assert_fail@plt+0xa034>
   1b338:	ldr	ip, [sp, #88]	; 0x58
   1b33c:	cmp	ip, #0
   1b340:	str	ip, [sp, #40]	; 0x28
   1b344:	beq	1b3c8 <__assert_fail@plt+0xa03c>
   1b348:	ldr	ip, [sp, #92]	; 0x5c
   1b34c:	cmp	ip, #0
   1b350:	str	ip, [sp, #44]	; 0x2c
   1b354:	beq	1b3d0 <__assert_fail@plt+0xa044>
   1b358:	ldr	ip, [sp, #96]	; 0x60
   1b35c:	cmp	ip, #0
   1b360:	str	ip, [sp, #48]	; 0x30
   1b364:	beq	1b3d8 <__assert_fail@plt+0xa04c>
   1b368:	ldr	r3, [sp, #100]	; 0x64
   1b36c:	cmp	r3, #0
   1b370:	str	r3, [sp, #52]	; 0x34
   1b374:	movne	ip, #10
   1b378:	moveq	ip, #9
   1b37c:	ldr	r3, [sp, #60]	; 0x3c
   1b380:	add	lr, sp, #16
   1b384:	str	lr, [sp]
   1b388:	str	ip, [sp, #4]
   1b38c:	bl	1ad94 <__assert_fail@plt+0x9a08>
   1b390:	add	sp, sp, #56	; 0x38
   1b394:	pop	{lr}		; (ldr lr, [sp], #4)
   1b398:	add	sp, sp, #4
   1b39c:	bx	lr
   1b3a0:	mov	ip, #1
   1b3a4:	b	1b37c <__assert_fail@plt+0x9ff0>
   1b3a8:	mov	ip, #2
   1b3ac:	b	1b37c <__assert_fail@plt+0x9ff0>
   1b3b0:	mov	ip, #3
   1b3b4:	b	1b37c <__assert_fail@plt+0x9ff0>
   1b3b8:	mov	ip, #4
   1b3bc:	b	1b37c <__assert_fail@plt+0x9ff0>
   1b3c0:	mov	ip, #5
   1b3c4:	b	1b37c <__assert_fail@plt+0x9ff0>
   1b3c8:	mov	ip, #6
   1b3cc:	b	1b37c <__assert_fail@plt+0x9ff0>
   1b3d0:	mov	ip, #7
   1b3d4:	b	1b37c <__assert_fail@plt+0x9ff0>
   1b3d8:	mov	ip, #8
   1b3dc:	b	1b37c <__assert_fail@plt+0x9ff0>
   1b3e0:	movw	r3, #61852	; 0xf19c
   1b3e4:	movt	r3, #2
   1b3e8:	str	r4, [sp, #-8]!
   1b3ec:	mov	r0, #10
   1b3f0:	ldr	r1, [r3]
   1b3f4:	str	lr, [sp, #4]
   1b3f8:	bl	110f8 <fputc_unlocked@plt>
   1b3fc:	mov	r2, #5
   1b400:	movw	r1, #57688	; 0xe158
   1b404:	movt	r1, #1
   1b408:	mov	r0, #0
   1b40c:	bl	11104 <dcgettext@plt>
   1b410:	mov	r1, r0
   1b414:	movw	r2, #57708	; 0xe16c
   1b418:	movt	r2, #1
   1b41c:	mov	r0, #1
   1b420:	bl	11260 <__printf_chk@plt>
   1b424:	mov	r2, #5
   1b428:	movw	r1, #57732	; 0xe184
   1b42c:	movt	r1, #1
   1b430:	mov	r0, #0
   1b434:	bl	11104 <dcgettext@plt>
   1b438:	mov	r1, r0
   1b43c:	movw	r3, #54908	; 0xd67c
   1b440:	movt	r3, #1
   1b444:	movw	r2, #54948	; 0xd6a4
   1b448:	movt	r2, #1
   1b44c:	mov	r0, #1
   1b450:	bl	11260 <__printf_chk@plt>
   1b454:	mov	r2, #5
   1b458:	movw	r1, #57752	; 0xe198
   1b45c:	movt	r1, #1
   1b460:	mov	r0, #0
   1b464:	bl	11104 <dcgettext@plt>
   1b468:	mov	r1, r0
   1b46c:	movw	r2, #57792	; 0xe1c0
   1b470:	movt	r2, #1
   1b474:	mov	r0, #1
   1b478:	ldr	r4, [sp]
   1b47c:	ldr	lr, [sp, #4]
   1b480:	add	sp, sp, #8
   1b484:	b	11260 <__printf_chk@plt>
   1b488:	strd	r4, [sp, #-16]!
   1b48c:	mov	r4, r0
   1b490:	mov	r5, r2
   1b494:	str	r6, [sp, #8]
   1b498:	mov	r6, r1
   1b49c:	str	lr, [sp, #12]
   1b4a0:	bl	1c83c <__assert_fail@plt+0xb4b0>
   1b4a4:	cmp	r0, #0
   1b4a8:	beq	1b4bc <__assert_fail@plt+0xa130>
   1b4ac:	ldrd	r4, [sp]
   1b4b0:	ldr	r6, [sp, #8]
   1b4b4:	add	sp, sp, #12
   1b4b8:	pop	{pc}		; (ldr pc, [sp], #4)
   1b4bc:	cmp	r4, #0
   1b4c0:	beq	1b4d0 <__assert_fail@plt+0xa144>
   1b4c4:	cmp	r6, #0
   1b4c8:	cmpne	r5, #0
   1b4cc:	beq	1b4ac <__assert_fail@plt+0xa120>
   1b4d0:	bl	1ba8c <__assert_fail@plt+0xa700>
   1b4d4:	str	r4, [sp, #-8]!
   1b4d8:	str	lr, [sp, #4]
   1b4dc:	bl	1c138 <__assert_fail@plt+0xadac>
   1b4e0:	cmp	r0, #0
   1b4e4:	beq	1b4f4 <__assert_fail@plt+0xa168>
   1b4e8:	ldr	r4, [sp]
   1b4ec:	add	sp, sp, #4
   1b4f0:	pop	{pc}		; (ldr pc, [sp], #4)
   1b4f4:	bl	1ba8c <__assert_fail@plt+0xa700>
   1b4f8:	str	r4, [sp, #-8]!
   1b4fc:	str	lr, [sp, #4]
   1b500:	bl	1c138 <__assert_fail@plt+0xadac>
   1b504:	cmp	r0, #0
   1b508:	beq	1b518 <__assert_fail@plt+0xa18c>
   1b50c:	ldr	r4, [sp]
   1b510:	add	sp, sp, #4
   1b514:	pop	{pc}		; (ldr pc, [sp], #4)
   1b518:	bl	1ba8c <__assert_fail@plt+0xa700>
   1b51c:	str	r4, [sp, #-8]!
   1b520:	str	lr, [sp, #4]
   1b524:	bl	1c138 <__assert_fail@plt+0xadac>
   1b528:	cmp	r0, #0
   1b52c:	beq	1b53c <__assert_fail@plt+0xa1b0>
   1b530:	ldr	r4, [sp]
   1b534:	add	sp, sp, #4
   1b538:	pop	{pc}		; (ldr pc, [sp], #4)
   1b53c:	bl	1ba8c <__assert_fail@plt+0xa700>
   1b540:	strd	r4, [sp, #-16]!
   1b544:	mov	r5, r0
   1b548:	mov	r4, r1
   1b54c:	str	r6, [sp, #8]
   1b550:	str	lr, [sp, #12]
   1b554:	bl	1c174 <__assert_fail@plt+0xade8>
   1b558:	cmp	r0, #0
   1b55c:	beq	1b570 <__assert_fail@plt+0xa1e4>
   1b560:	ldrd	r4, [sp]
   1b564:	ldr	r6, [sp, #8]
   1b568:	add	sp, sp, #12
   1b56c:	pop	{pc}		; (ldr pc, [sp], #4)
   1b570:	adds	r4, r4, #0
   1b574:	movne	r4, #1
   1b578:	cmp	r5, #0
   1b57c:	moveq	r4, #1
   1b580:	cmp	r4, #0
   1b584:	beq	1b560 <__assert_fail@plt+0xa1d4>
   1b588:	bl	1ba8c <__assert_fail@plt+0xa700>
   1b58c:	cmp	r1, #0
   1b590:	orreq	r1, r1, #1
   1b594:	str	r4, [sp, #-8]!
   1b598:	str	lr, [sp, #4]
   1b59c:	bl	1c174 <__assert_fail@plt+0xade8>
   1b5a0:	cmp	r0, #0
   1b5a4:	beq	1b5b4 <__assert_fail@plt+0xa228>
   1b5a8:	ldr	r4, [sp]
   1b5ac:	add	sp, sp, #4
   1b5b0:	pop	{pc}		; (ldr pc, [sp], #4)
   1b5b4:	bl	1ba8c <__assert_fail@plt+0xa700>
   1b5b8:	strd	r4, [sp, #-16]!
   1b5bc:	mov	r4, r0
   1b5c0:	mov	r5, r2
   1b5c4:	str	r6, [sp, #8]
   1b5c8:	mov	r6, r1
   1b5cc:	str	lr, [sp, #12]
   1b5d0:	bl	1c83c <__assert_fail@plt+0xb4b0>
   1b5d4:	cmp	r0, #0
   1b5d8:	beq	1b5ec <__assert_fail@plt+0xa260>
   1b5dc:	ldrd	r4, [sp]
   1b5e0:	ldr	r6, [sp, #8]
   1b5e4:	add	sp, sp, #12
   1b5e8:	pop	{pc}		; (ldr pc, [sp], #4)
   1b5ec:	cmp	r4, #0
   1b5f0:	beq	1b600 <__assert_fail@plt+0xa274>
   1b5f4:	cmp	r6, #0
   1b5f8:	cmpne	r5, #0
   1b5fc:	beq	1b5dc <__assert_fail@plt+0xa250>
   1b600:	bl	1ba8c <__assert_fail@plt+0xa700>
   1b604:	cmp	r2, #0
   1b608:	cmpne	r1, #0
   1b60c:	str	r4, [sp, #-8]!
   1b610:	moveq	r2, #1
   1b614:	str	lr, [sp, #4]
   1b618:	moveq	r1, r2
   1b61c:	bl	1c83c <__assert_fail@plt+0xb4b0>
   1b620:	cmp	r0, #0
   1b624:	beq	1b634 <__assert_fail@plt+0xa2a8>
   1b628:	ldr	r4, [sp]
   1b62c:	add	sp, sp, #4
   1b630:	pop	{pc}		; (ldr pc, [sp], #4)
   1b634:	bl	1ba8c <__assert_fail@plt+0xa700>
   1b638:	mov	r2, r1
   1b63c:	mov	r1, r0
   1b640:	str	r4, [sp, #-8]!
   1b644:	mov	r0, #0
   1b648:	str	lr, [sp, #4]
   1b64c:	bl	1c83c <__assert_fail@plt+0xb4b0>
   1b650:	cmp	r0, #0
   1b654:	beq	1b664 <__assert_fail@plt+0xa2d8>
   1b658:	ldr	r4, [sp]
   1b65c:	add	sp, sp, #4
   1b660:	pop	{pc}		; (ldr pc, [sp], #4)
   1b664:	bl	1ba8c <__assert_fail@plt+0xa700>
   1b668:	cmp	r1, #0
   1b66c:	cmpne	r0, #0
   1b670:	str	r4, [sp, #-8]!
   1b674:	moveq	r2, #1
   1b678:	movne	r2, r1
   1b67c:	str	lr, [sp, #4]
   1b680:	movne	r1, r0
   1b684:	moveq	r1, r2
   1b688:	mov	r0, #0
   1b68c:	bl	1c83c <__assert_fail@plt+0xb4b0>
   1b690:	cmp	r0, #0
   1b694:	beq	1b6a4 <__assert_fail@plt+0xa318>
   1b698:	ldr	r4, [sp]
   1b69c:	add	sp, sp, #4
   1b6a0:	pop	{pc}		; (ldr pc, [sp], #4)
   1b6a4:	bl	1ba8c <__assert_fail@plt+0xa700>
   1b6a8:	cmp	r0, #0
   1b6ac:	strd	r4, [sp, #-16]!
   1b6b0:	mov	r5, r1
   1b6b4:	ldr	r4, [r1]
   1b6b8:	str	r6, [sp, #8]
   1b6bc:	str	lr, [sp, #12]
   1b6c0:	beq	1b708 <__assert_fail@plt+0xa37c>
   1b6c4:	lsr	r3, r4, #1
   1b6c8:	add	r3, r3, #1
   1b6cc:	adds	r4, r4, r3
   1b6d0:	bcs	1b704 <__assert_fail@plt+0xa378>
   1b6d4:	mov	r2, #1
   1b6d8:	mov	r1, r4
   1b6dc:	bl	1c83c <__assert_fail@plt+0xb4b0>
   1b6e0:	cmp	r0, #0
   1b6e4:	beq	1b6fc <__assert_fail@plt+0xa370>
   1b6e8:	ldr	r6, [sp, #8]
   1b6ec:	str	r4, [r5]
   1b6f0:	ldrd	r4, [sp]
   1b6f4:	add	sp, sp, #12
   1b6f8:	pop	{pc}		; (ldr pc, [sp], #4)
   1b6fc:	cmp	r4, #0
   1b700:	beq	1b6e8 <__assert_fail@plt+0xa35c>
   1b704:	bl	1ba8c <__assert_fail@plt+0xa700>
   1b708:	cmp	r4, #0
   1b70c:	mov	r2, #1
   1b710:	moveq	r4, #64	; 0x40
   1b714:	mov	r1, r4
   1b718:	bl	1c83c <__assert_fail@plt+0xb4b0>
   1b71c:	cmp	r0, #0
   1b720:	bne	1b6e8 <__assert_fail@plt+0xa35c>
   1b724:	b	1b704 <__assert_fail@plt+0xa378>
   1b728:	cmp	r0, #0
   1b72c:	strd	r4, [sp, #-16]!
   1b730:	mov	r5, r1
   1b734:	ldr	r4, [r1]
   1b738:	str	r6, [sp, #8]
   1b73c:	mov	r6, r2
   1b740:	str	lr, [sp, #12]
   1b744:	beq	1b78c <__assert_fail@plt+0xa400>
   1b748:	lsr	r3, r4, #1
   1b74c:	add	r3, r3, #1
   1b750:	adds	r4, r4, r3
   1b754:	bcs	1b788 <__assert_fail@plt+0xa3fc>
   1b758:	mov	r1, r4
   1b75c:	bl	1c83c <__assert_fail@plt+0xb4b0>
   1b760:	cmp	r0, #0
   1b764:	beq	1b77c <__assert_fail@plt+0xa3f0>
   1b768:	ldr	r6, [sp, #8]
   1b76c:	str	r4, [r5]
   1b770:	ldrd	r4, [sp]
   1b774:	add	sp, sp, #12
   1b778:	pop	{pc}		; (ldr pc, [sp], #4)
   1b77c:	cmp	r4, #0
   1b780:	cmpne	r6, #0
   1b784:	beq	1b768 <__assert_fail@plt+0xa3dc>
   1b788:	bl	1ba8c <__assert_fail@plt+0xa700>
   1b78c:	cmp	r4, #0
   1b790:	bne	1b7a4 <__assert_fail@plt+0xa418>
   1b794:	mov	r4, #64	; 0x40
   1b798:	udiv	r4, r4, r2
   1b79c:	cmp	r2, #64	; 0x40
   1b7a0:	addhi	r4, r4, #1
   1b7a4:	mov	r2, r6
   1b7a8:	mov	r1, r4
   1b7ac:	mov	r0, #0
   1b7b0:	bl	1c83c <__assert_fail@plt+0xb4b0>
   1b7b4:	cmp	r0, #0
   1b7b8:	bne	1b768 <__assert_fail@plt+0xa3dc>
   1b7bc:	b	1b788 <__assert_fail@plt+0xa3fc>
   1b7c0:	ldr	ip, [r1]
   1b7c4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1b7c8:	strd	r6, [sp, #8]
   1b7cc:	mov	r7, r1
   1b7d0:	mov	r6, r0
   1b7d4:	str	r8, [sp, #16]
   1b7d8:	mvn	r8, r3
   1b7dc:	lsr	r8, r8, #31
   1b7e0:	str	lr, [sp, #20]
   1b7e4:	asr	r1, ip, #1
   1b7e8:	ldr	lr, [sp, #24]
   1b7ec:	adds	r4, ip, r1
   1b7f0:	mvnvs	r4, #-2147483648	; 0x80000000
   1b7f4:	cmp	r3, r4
   1b7f8:	movge	r1, #0
   1b7fc:	andlt	r1, r8, #1
   1b800:	cmp	r1, #0
   1b804:	movne	r4, r3
   1b808:	smull	r0, r1, r4, lr
   1b80c:	cmp	r1, r0, asr #31
   1b810:	bne	1b8c0 <__assert_fail@plt+0xa534>
   1b814:	cmp	r0, #63	; 0x3f
   1b818:	mov	r5, r0
   1b81c:	ble	1b88c <__assert_fail@plt+0xa500>
   1b820:	cmp	r6, #0
   1b824:	sub	r1, r4, ip
   1b828:	streq	r6, [r7]
   1b82c:	cmp	r1, r2
   1b830:	bge	1b860 <__assert_fail@plt+0xa4d4>
   1b834:	adds	r4, ip, r2
   1b838:	bvs	1b8bc <__assert_fail@plt+0xa530>
   1b83c:	cmp	r4, r3
   1b840:	movle	r3, #0
   1b844:	andgt	r3, r8, #1
   1b848:	cmp	r3, #0
   1b84c:	bne	1b8bc <__assert_fail@plt+0xa530>
   1b850:	smull	r0, r1, r4, lr
   1b854:	cmp	r1, r0, asr #31
   1b858:	mov	r5, r0
   1b85c:	bne	1b8bc <__assert_fail@plt+0xa530>
   1b860:	mov	r1, r5
   1b864:	mov	r0, r6
   1b868:	bl	1c174 <__assert_fail@plt+0xade8>
   1b86c:	cmp	r0, #0
   1b870:	beq	1b8a0 <__assert_fail@plt+0xa514>
   1b874:	ldr	r8, [sp, #16]
   1b878:	str	r4, [r7]
   1b87c:	ldrd	r4, [sp]
   1b880:	ldrd	r6, [sp, #8]
   1b884:	add	sp, sp, #20
   1b888:	pop	{pc}		; (ldr pc, [sp], #4)
   1b88c:	mov	r0, #64	; 0x40
   1b890:	sdiv	r4, r0, lr
   1b894:	mls	r5, lr, r4, r0
   1b898:	sub	r5, r0, r5
   1b89c:	b	1b820 <__assert_fail@plt+0xa494>
   1b8a0:	adds	r5, r5, #0
   1b8a4:	movne	r5, #1
   1b8a8:	cmp	r6, #0
   1b8ac:	movne	r6, r5
   1b8b0:	moveq	r6, #1
   1b8b4:	cmp	r6, #0
   1b8b8:	beq	1b874 <__assert_fail@plt+0xa4e8>
   1b8bc:	bl	1ba8c <__assert_fail@plt+0xa700>
   1b8c0:	mvn	r0, #-2147483648	; 0x80000000
   1b8c4:	b	1b890 <__assert_fail@plt+0xa504>
   1b8c8:	mov	r1, #1
   1b8cc:	str	r4, [sp, #-8]!
   1b8d0:	str	lr, [sp, #4]
   1b8d4:	bl	1c0c4 <__assert_fail@plt+0xad38>
   1b8d8:	cmp	r0, #0
   1b8dc:	beq	1b8ec <__assert_fail@plt+0xa560>
   1b8e0:	ldr	r4, [sp]
   1b8e4:	add	sp, sp, #4
   1b8e8:	pop	{pc}		; (ldr pc, [sp], #4)
   1b8ec:	bl	1ba8c <__assert_fail@plt+0xa700>
   1b8f0:	mov	r1, #1
   1b8f4:	str	r4, [sp, #-8]!
   1b8f8:	str	lr, [sp, #4]
   1b8fc:	bl	1c0c4 <__assert_fail@plt+0xad38>
   1b900:	cmp	r0, #0
   1b904:	beq	1b914 <__assert_fail@plt+0xa588>
   1b908:	ldr	r4, [sp]
   1b90c:	add	sp, sp, #4
   1b910:	pop	{pc}		; (ldr pc, [sp], #4)
   1b914:	bl	1ba8c <__assert_fail@plt+0xa700>
   1b918:	str	r4, [sp, #-8]!
   1b91c:	str	lr, [sp, #4]
   1b920:	bl	1c0c4 <__assert_fail@plt+0xad38>
   1b924:	cmp	r0, #0
   1b928:	beq	1b938 <__assert_fail@plt+0xa5ac>
   1b92c:	ldr	r4, [sp]
   1b930:	add	sp, sp, #4
   1b934:	pop	{pc}		; (ldr pc, [sp], #4)
   1b938:	bl	1ba8c <__assert_fail@plt+0xa700>
   1b93c:	str	r4, [sp, #-8]!
   1b940:	str	lr, [sp, #4]
   1b944:	bl	1c0c4 <__assert_fail@plt+0xad38>
   1b948:	cmp	r0, #0
   1b94c:	beq	1b95c <__assert_fail@plt+0xa5d0>
   1b950:	ldr	r4, [sp]
   1b954:	add	sp, sp, #4
   1b958:	pop	{pc}		; (ldr pc, [sp], #4)
   1b95c:	bl	1ba8c <__assert_fail@plt+0xa700>
   1b960:	strd	r4, [sp, #-16]!
   1b964:	mov	r4, r1
   1b968:	str	r6, [sp, #8]
   1b96c:	mov	r6, r0
   1b970:	mov	r0, r1
   1b974:	str	lr, [sp, #12]
   1b978:	bl	1c138 <__assert_fail@plt+0xadac>
   1b97c:	subs	r5, r0, #0
   1b980:	beq	1b9a4 <__assert_fail@plt+0xa618>
   1b984:	mov	r2, r4
   1b988:	mov	r1, r6
   1b98c:	bl	110c8 <memcpy@plt>
   1b990:	mov	r0, r5
   1b994:	ldrd	r4, [sp]
   1b998:	ldr	r6, [sp, #8]
   1b99c:	add	sp, sp, #12
   1b9a0:	pop	{pc}		; (ldr pc, [sp], #4)
   1b9a4:	bl	1ba8c <__assert_fail@plt+0xa700>
   1b9a8:	strd	r4, [sp, #-16]!
   1b9ac:	mov	r4, r1
   1b9b0:	str	r6, [sp, #8]
   1b9b4:	mov	r6, r0
   1b9b8:	mov	r0, r1
   1b9bc:	str	lr, [sp, #12]
   1b9c0:	bl	1c138 <__assert_fail@plt+0xadac>
   1b9c4:	subs	r5, r0, #0
   1b9c8:	beq	1b9ec <__assert_fail@plt+0xa660>
   1b9cc:	mov	r2, r4
   1b9d0:	mov	r1, r6
   1b9d4:	bl	110c8 <memcpy@plt>
   1b9d8:	mov	r0, r5
   1b9dc:	ldrd	r4, [sp]
   1b9e0:	ldr	r6, [sp, #8]
   1b9e4:	add	sp, sp, #12
   1b9e8:	pop	{pc}		; (ldr pc, [sp], #4)
   1b9ec:	bl	1ba8c <__assert_fail@plt+0xa700>
   1b9f0:	strd	r4, [sp, #-16]!
   1b9f4:	mov	r4, r1
   1b9f8:	str	r6, [sp, #8]
   1b9fc:	mov	r6, r0
   1ba00:	add	r0, r1, #1
   1ba04:	str	lr, [sp, #12]
   1ba08:	bl	1c138 <__assert_fail@plt+0xadac>
   1ba0c:	subs	r5, r0, #0
   1ba10:	beq	1ba3c <__assert_fail@plt+0xa6b0>
   1ba14:	mov	r3, #0
   1ba18:	mov	r1, r6
   1ba1c:	mov	r2, r4
   1ba20:	strb	r3, [r5, r4]
   1ba24:	bl	110c8 <memcpy@plt>
   1ba28:	mov	r0, r5
   1ba2c:	ldrd	r4, [sp]
   1ba30:	ldr	r6, [sp, #8]
   1ba34:	add	sp, sp, #12
   1ba38:	pop	{pc}		; (ldr pc, [sp], #4)
   1ba3c:	bl	1ba8c <__assert_fail@plt+0xa700>
   1ba40:	strd	r4, [sp, #-16]!
   1ba44:	str	r6, [sp, #8]
   1ba48:	mov	r6, r0
   1ba4c:	str	lr, [sp, #12]
   1ba50:	bl	1120c <strlen@plt>
   1ba54:	add	r4, r0, #1
   1ba58:	mov	r0, r4
   1ba5c:	bl	1c138 <__assert_fail@plt+0xadac>
   1ba60:	subs	r5, r0, #0
   1ba64:	beq	1ba88 <__assert_fail@plt+0xa6fc>
   1ba68:	mov	r2, r4
   1ba6c:	mov	r1, r6
   1ba70:	bl	110c8 <memcpy@plt>
   1ba74:	mov	r0, r5
   1ba78:	ldrd	r4, [sp]
   1ba7c:	ldr	r6, [sp, #8]
   1ba80:	add	sp, sp, #12
   1ba84:	pop	{pc}		; (ldr pc, [sp], #4)
   1ba88:	bl	1ba8c <__assert_fail@plt+0xa700>
   1ba8c:	movw	r3, #61760	; 0xf140
   1ba90:	movt	r3, #2
   1ba94:	str	r4, [sp, #-8]!
   1ba98:	ldr	r4, [r3]
   1ba9c:	mov	r2, #5
   1baa0:	movw	r1, #57872	; 0xe210
   1baa4:	movt	r1, #1
   1baa8:	mov	r0, #0
   1baac:	str	lr, [sp, #4]
   1bab0:	bl	11104 <dcgettext@plt>
   1bab4:	mov	r3, r0
   1bab8:	movw	r2, #55148	; 0xd76c
   1babc:	movt	r2, #1
   1bac0:	mov	r1, #0
   1bac4:	mov	r0, r4
   1bac8:	bl	11194 <error@plt>
   1bacc:	bl	11344 <abort@plt>
   1bad0:	orr	r1, r1, #512	; 0x200
   1bad4:	str	r4, [sp, #-8]!
   1bad8:	str	lr, [sp, #4]
   1badc:	bl	14318 <__assert_fail@plt+0x2f8c>
   1bae0:	cmp	r0, #0
   1bae4:	beq	1baf4 <__assert_fail@plt+0xa768>
   1bae8:	ldr	r4, [sp]
   1baec:	add	sp, sp, #4
   1baf0:	pop	{pc}		; (ldr pc, [sp], #4)
   1baf4:	bl	1123c <__errno_location@plt>
   1baf8:	ldr	r3, [r0]
   1bafc:	cmp	r3, #22
   1bb00:	beq	1bb08 <__assert_fail@plt+0xa77c>
   1bb04:	bl	1ba8c <__assert_fail@plt+0xa700>
   1bb08:	movw	r3, #57892	; 0xe224
   1bb0c:	movt	r3, #1
   1bb10:	movw	r1, #57904	; 0xe230
   1bb14:	movt	r1, #1
   1bb18:	movw	r0, #57916	; 0xe23c
   1bb1c:	movt	r0, #1
   1bb20:	mov	r2, #41	; 0x29
   1bb24:	bl	1138c <__assert_fail@plt>
   1bb28:	ldr	r3, [r0, #48]	; 0x30
   1bb2c:	and	r3, r3, #17
   1bb30:	cmp	r3, #16
   1bb34:	beq	1bb58 <__assert_fail@plt+0xa7cc>
   1bb38:	cmp	r3, #17
   1bb3c:	beq	1bb48 <__assert_fail@plt+0xa7bc>
   1bb40:	mov	r0, #0
   1bb44:	bx	lr
   1bb48:	ldr	r0, [r1, #48]	; 0x30
   1bb4c:	adds	r0, r0, #0
   1bb50:	movne	r0, #1
   1bb54:	bx	lr
   1bb58:	mov	r0, #1
   1bb5c:	bx	lr
   1bb60:	cmp	r2, #36	; 0x24
   1bb64:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1bb68:	strd	r6, [sp, #8]
   1bb6c:	strd	r8, [sp, #16]
   1bb70:	str	sl, [sp, #24]
   1bb74:	str	lr, [sp, #28]
   1bb78:	sub	sp, sp, #8
   1bb7c:	bhi	1c0a4 <__assert_fail@plt+0xad18>
   1bb80:	cmp	r1, #0
   1bb84:	mov	r7, r2
   1bb88:	mov	r5, r1
   1bb8c:	mov	r9, r0
   1bb90:	addeq	r5, sp, #4
   1bb94:	mov	r6, r3
   1bb98:	bl	1123c <__errno_location@plt>
   1bb9c:	mov	r3, #0
   1bba0:	mov	sl, r0
   1bba4:	str	r3, [r0]
   1bba8:	ldrb	r4, [r9]
   1bbac:	bl	111e8 <__ctype_b_loc@plt>
   1bbb0:	ldr	r2, [r0]
   1bbb4:	lsl	r3, r4, #1
   1bbb8:	ldrh	r3, [r2, r3]
   1bbbc:	tst	r3, #8192	; 0x2000
   1bbc0:	beq	1bbdc <__assert_fail@plt+0xa850>
   1bbc4:	mov	r3, r9
   1bbc8:	ldrb	r4, [r3, #1]!
   1bbcc:	lsl	r1, r4, #1
   1bbd0:	ldrh	r1, [r2, r1]
   1bbd4:	tst	r1, #8192	; 0x2000
   1bbd8:	bne	1bbc8 <__assert_fail@plt+0xa83c>
   1bbdc:	cmp	r4, #45	; 0x2d
   1bbe0:	beq	1bc74 <__assert_fail@plt+0xa8e8>
   1bbe4:	mov	r2, r7
   1bbe8:	mov	r1, r5
   1bbec:	mov	r0, r9
   1bbf0:	bl	11200 <strtoul@plt>
   1bbf4:	ldr	r7, [r5]
   1bbf8:	mov	r8, r0
   1bbfc:	cmp	r7, r9
   1bc00:	beq	1bc5c <__assert_fail@plt+0xa8d0>
   1bc04:	ldr	r4, [sl]
   1bc08:	cmp	r4, #0
   1bc0c:	bne	1bc4c <__assert_fail@plt+0xa8c0>
   1bc10:	ldr	r3, [sp, #40]	; 0x28
   1bc14:	cmp	r3, #0
   1bc18:	beq	1bc28 <__assert_fail@plt+0xa89c>
   1bc1c:	ldrb	r9, [r7]
   1bc20:	cmp	r9, #0
   1bc24:	bne	1bf5c <__assert_fail@plt+0xabd0>
   1bc28:	str	r8, [r6]
   1bc2c:	mov	r0, r4
   1bc30:	add	sp, sp, #8
   1bc34:	ldrd	r4, [sp]
   1bc38:	ldrd	r6, [sp, #8]
   1bc3c:	ldrd	r8, [sp, #16]
   1bc40:	ldr	sl, [sp, #24]
   1bc44:	add	sp, sp, #28
   1bc48:	pop	{pc}		; (ldr pc, [sp], #4)
   1bc4c:	cmp	r4, #34	; 0x22
   1bc50:	bne	1bc74 <__assert_fail@plt+0xa8e8>
   1bc54:	mov	r4, #1
   1bc58:	b	1bc10 <__assert_fail@plt+0xa884>
   1bc5c:	ldr	r3, [sp, #40]	; 0x28
   1bc60:	cmp	r3, #0
   1bc64:	beq	1bc74 <__assert_fail@plt+0xa8e8>
   1bc68:	ldrb	r9, [r9]
   1bc6c:	cmp	r9, #0
   1bc70:	bne	1bc7c <__assert_fail@plt+0xa8f0>
   1bc74:	mov	r4, #4
   1bc78:	b	1bc2c <__assert_fail@plt+0xa8a0>
   1bc7c:	mov	r1, r9
   1bc80:	mov	r0, r3
   1bc84:	bl	11218 <strchr@plt>
   1bc88:	cmp	r0, #0
   1bc8c:	movne	r4, #0
   1bc90:	movne	r8, #1
   1bc94:	beq	1bc74 <__assert_fail@plt+0xa8e8>
   1bc98:	sub	r3, r9, #69	; 0x45
   1bc9c:	cmp	r3, #47	; 0x2f
   1bca0:	ldrls	pc, [pc, r3, lsl #2]
   1bca4:	b	1bda8 <__assert_fail@plt+0xaa1c>
   1bca8:	andeq	fp, r1, r8, ror #26
   1bcac:	andeq	fp, r1, r8, lsr #27
   1bcb0:	andeq	fp, r1, r8, ror #26
   1bcb4:	andeq	fp, r1, r8, lsr #27
   1bcb8:	andeq	fp, r1, r8, lsr #27
   1bcbc:	andeq	fp, r1, r8, lsr #27
   1bcc0:	andeq	fp, r1, r8, ror #26
   1bcc4:	andeq	fp, r1, r8, lsr #27
   1bcc8:	andeq	fp, r1, r8, ror #26
   1bccc:	andeq	fp, r1, r8, lsr #27
   1bcd0:	andeq	fp, r1, r8, lsr #27
   1bcd4:	andeq	fp, r1, r8, ror #26
   1bcd8:	andeq	fp, r1, r8, lsr #27
   1bcdc:	andeq	fp, r1, r8, lsr #27
   1bce0:	andeq	fp, r1, r8, lsr #27
   1bce4:	andeq	fp, r1, r8, ror #26
   1bce8:	andeq	fp, r1, r8, lsr #27
   1bcec:	andeq	fp, r1, r8, lsr #27
   1bcf0:	andeq	fp, r1, r8, lsr #27
   1bcf4:	andeq	fp, r1, r8, lsr #27
   1bcf8:	andeq	fp, r1, r8, ror #26
   1bcfc:	andeq	fp, r1, r8, ror #26
   1bd00:	andeq	fp, r1, r8, lsr #27
   1bd04:	andeq	fp, r1, r8, lsr #27
   1bd08:	andeq	fp, r1, r8, lsr #27
   1bd0c:	andeq	fp, r1, r8, lsr #27
   1bd10:	andeq	fp, r1, r8, lsr #27
   1bd14:	andeq	fp, r1, r8, lsr #27
   1bd18:	andeq	fp, r1, r8, lsr #27
   1bd1c:	andeq	fp, r1, r8, lsr #27
   1bd20:	andeq	fp, r1, r8, lsr #27
   1bd24:	andeq	fp, r1, r8, lsr #27
   1bd28:	andeq	fp, r1, r8, lsr #27
   1bd2c:	andeq	fp, r1, r8, lsr #27
   1bd30:	andeq	fp, r1, r8, ror #26
   1bd34:	andeq	fp, r1, r8, lsr #27
   1bd38:	andeq	fp, r1, r8, lsr #27
   1bd3c:	andeq	fp, r1, r8, lsr #27
   1bd40:	andeq	fp, r1, r8, ror #26
   1bd44:	andeq	fp, r1, r8, lsr #27
   1bd48:	andeq	fp, r1, r8, ror #26
   1bd4c:	andeq	fp, r1, r8, lsr #27
   1bd50:	andeq	fp, r1, r8, lsr #27
   1bd54:	andeq	fp, r1, r8, lsr #27
   1bd58:	andeq	fp, r1, r8, lsr #27
   1bd5c:	andeq	fp, r1, r8, lsr #27
   1bd60:	andeq	fp, r1, r8, lsr #27
   1bd64:	andeq	fp, r1, r8, ror #26
   1bd68:	mov	r1, #48	; 0x30
   1bd6c:	ldr	r0, [sp, #40]	; 0x28
   1bd70:	bl	11218 <strchr@plt>
   1bd74:	cmp	r0, #0
   1bd78:	beq	1bda8 <__assert_fail@plt+0xaa1c>
   1bd7c:	ldrb	r3, [r7, #1]
   1bd80:	cmp	r3, #68	; 0x44
   1bd84:	beq	1c098 <__assert_fail@plt+0xad0c>
   1bd88:	cmp	r3, #105	; 0x69
   1bd8c:	beq	1bf74 <__assert_fail@plt+0xabe8>
   1bd90:	cmp	r3, #66	; 0x42
   1bd94:	moveq	r0, #2
   1bd98:	movne	r0, #1
   1bd9c:	moveq	r1, #1000	; 0x3e8
   1bda0:	movne	r1, #1024	; 0x400
   1bda4:	b	1bdb0 <__assert_fail@plt+0xaa24>
   1bda8:	mov	r0, #1
   1bdac:	mov	r1, #1024	; 0x400
   1bdb0:	sub	r9, r9, #66	; 0x42
   1bdb4:	cmp	r9, #53	; 0x35
   1bdb8:	ldrls	pc, [pc, r9, lsl #2]
   1bdbc:	b	1bf40 <__assert_fail@plt+0xabb4>
   1bdc0:	andeq	ip, r1, r0, lsl #1
   1bdc4:	andeq	fp, r1, r0, asr #30
   1bdc8:	andeq	fp, r1, r0, asr #30
   1bdcc:	andeq	ip, r1, r8, rrx
   1bdd0:	andeq	fp, r1, r0, asr #30
   1bdd4:	andeq	ip, r1, r4, asr #32
   1bdd8:	andeq	fp, r1, r0, asr #30
   1bddc:	andeq	fp, r1, r0, asr #30
   1bde0:	andeq	fp, r1, r0, asr #30
   1bde4:	andeq	fp, r1, r8, asr #30
   1bde8:	andeq	fp, r1, r0, asr #30
   1bdec:	andeq	ip, r1, ip, lsl r0
   1bdf0:	andeq	fp, r1, r0, asr #30
   1bdf4:	andeq	fp, r1, r0, asr #30
   1bdf8:	andeq	ip, r1, r4
   1bdfc:	andeq	fp, r1, r0, asr #30
   1be00:	andeq	fp, r1, r0, asr #30
   1be04:	andeq	fp, r1, r0, asr #30
   1be08:	andeq	fp, r1, ip, ror #31
   1be0c:	andeq	fp, r1, r0, asr #30
   1be10:	andeq	fp, r1, r0, asr #30
   1be14:	andeq	fp, r1, r0, asr #30
   1be18:	andeq	fp, r1, r0, asr #30
   1be1c:			; <UNDEFINED> instruction: 0x0001bfbc
   1be20:	muleq	r1, r8, lr
   1be24:	andeq	fp, r1, r0, asr #30
   1be28:	andeq	fp, r1, r0, asr #30
   1be2c:	andeq	fp, r1, r0, asr #30
   1be30:	andeq	fp, r1, r0, asr #30
   1be34:	andeq	fp, r1, r0, asr #30
   1be38:	andeq	fp, r1, r0, asr #30
   1be3c:	andeq	fp, r1, r0, asr #30
   1be40:	andeq	fp, r1, r4, lsr #31
   1be44:	andeq	fp, r1, ip, lsr #30
   1be48:	andeq	fp, r1, r0, asr #30
   1be4c:	andeq	fp, r1, r0, asr #30
   1be50:	andeq	fp, r1, r0, asr #30
   1be54:	andeq	ip, r1, r4, asr #32
   1be58:	andeq	fp, r1, r0, asr #30
   1be5c:	andeq	fp, r1, r0, asr #30
   1be60:	andeq	fp, r1, r0, asr #30
   1be64:	andeq	fp, r1, r8, asr #30
   1be68:	andeq	fp, r1, r0, asr #30
   1be6c:	andeq	ip, r1, ip, lsl r0
   1be70:	andeq	fp, r1, r0, asr #30
   1be74:	andeq	fp, r1, r0, asr #30
   1be78:	andeq	fp, r1, r0, asr #30
   1be7c:	andeq	fp, r1, r0, asr #30
   1be80:	andeq	fp, r1, r0, asr #30
   1be84:	andeq	fp, r1, r0, asr #30
   1be88:	andeq	fp, r1, ip, ror #31
   1be8c:	andeq	fp, r1, r0, asr #30
   1be90:	andeq	fp, r1, r0, asr #30
   1be94:	andeq	fp, r1, ip, lsl #31
   1be98:	umull	r2, r3, r8, r1
   1be9c:	adds	ip, r3, #0
   1bea0:	movne	ip, #1
   1bea4:	cmp	ip, #0
   1bea8:	bne	1bfe4 <__assert_fail@plt+0xac58>
   1beac:	umull	r2, r3, r2, r1
   1beb0:	adds	ip, r3, #0
   1beb4:	movne	ip, #1
   1beb8:	cmp	ip, #0
   1bebc:	bne	1bfe4 <__assert_fail@plt+0xac58>
   1bec0:	umull	r2, r3, r2, r1
   1bec4:	adds	ip, r3, #0
   1bec8:	movne	ip, #1
   1becc:	cmp	ip, #0
   1bed0:	bne	1bfe4 <__assert_fail@plt+0xac58>
   1bed4:	umull	r2, r3, r2, r1
   1bed8:	adds	ip, r3, #0
   1bedc:	movne	ip, #1
   1bee0:	cmp	ip, #0
   1bee4:	bne	1bfe4 <__assert_fail@plt+0xac58>
   1bee8:	umull	r2, r3, r2, r1
   1beec:	adds	ip, r3, #0
   1bef0:	movne	ip, #1
   1bef4:	cmp	ip, #0
   1bef8:	bne	1bfe4 <__assert_fail@plt+0xac58>
   1befc:	umull	r2, r3, r2, r1
   1bf00:	adds	ip, r3, #0
   1bf04:	movne	ip, #1
   1bf08:	cmp	ip, #0
   1bf0c:	bne	1bfe4 <__assert_fail@plt+0xac58>
   1bf10:	umull	r2, r3, r2, r1
   1bf14:	adds	ip, r3, #0
   1bf18:	movne	ip, #1
   1bf1c:	cmp	ip, #0
   1bf20:	moveq	r8, r2
   1bf24:	mvnne	r8, #0
   1bf28:	orr	r4, r4, ip
   1bf2c:	add	r3, r7, r0
   1bf30:	str	r3, [r5]
   1bf34:	ldrb	r3, [r7, r0]
   1bf38:	cmp	r3, #0
   1bf3c:	beq	1bc28 <__assert_fail@plt+0xa89c>
   1bf40:	orr	r4, r4, #2
   1bf44:	b	1bc28 <__assert_fail@plt+0xa89c>
   1bf48:	umull	r8, r9, r8, r1
   1bf4c:	cmp	r9, #0
   1bf50:	movne	r4, #1
   1bf54:	mvnne	r8, #0
   1bf58:	b	1bf2c <__assert_fail@plt+0xaba0>
   1bf5c:	mov	r0, r3
   1bf60:	mov	r1, r9
   1bf64:	bl	11218 <strchr@plt>
   1bf68:	cmp	r0, #0
   1bf6c:	bne	1bc98 <__assert_fail@plt+0xa90c>
   1bf70:	b	1bf40 <__assert_fail@plt+0xabb4>
   1bf74:	ldrb	r3, [r7, #2]
   1bf78:	mov	r1, #1024	; 0x400
   1bf7c:	cmp	r3, #66	; 0x42
   1bf80:	movne	r0, #1
   1bf84:	moveq	r0, #3
   1bf88:	b	1bdb0 <__assert_fail@plt+0xaa24>
   1bf8c:	lsr	r3, r8, #31
   1bf90:	cmp	r3, #0
   1bf94:	movne	r4, #1
   1bf98:	mvnne	r8, #0
   1bf9c:	lsleq	r8, r8, #1
   1bfa0:	b	1bf2c <__assert_fail@plt+0xaba0>
   1bfa4:	lsr	r3, r8, #23
   1bfa8:	cmp	r3, #0
   1bfac:	movne	r4, #1
   1bfb0:	mvnne	r8, #0
   1bfb4:	lsleq	r8, r8, #9
   1bfb8:	b	1bf2c <__assert_fail@plt+0xaba0>
   1bfbc:	umull	r2, r3, r8, r1
   1bfc0:	adds	ip, r3, #0
   1bfc4:	movne	ip, #1
   1bfc8:	cmp	ip, #0
   1bfcc:	bne	1bfe4 <__assert_fail@plt+0xac58>
   1bfd0:	umull	r2, r3, r2, r1
   1bfd4:	adds	ip, r3, #0
   1bfd8:	movne	ip, #1
   1bfdc:	cmp	ip, #0
   1bfe0:	beq	1beac <__assert_fail@plt+0xab20>
   1bfe4:	mvn	r8, #0
   1bfe8:	b	1bf28 <__assert_fail@plt+0xab9c>
   1bfec:	umull	r2, r3, r8, r1
   1bff0:	adds	ip, r3, #0
   1bff4:	movne	ip, #1
   1bff8:	cmp	ip, #0
   1bffc:	beq	1bee8 <__assert_fail@plt+0xab5c>
   1c000:	b	1bfe4 <__assert_fail@plt+0xac58>
   1c004:	umull	r2, r3, r8, r1
   1c008:	adds	ip, r3, #0
   1c00c:	movne	ip, #1
   1c010:	cmp	ip, #0
   1c014:	beq	1bed4 <__assert_fail@plt+0xab48>
   1c018:	b	1bfe4 <__assert_fail@plt+0xac58>
   1c01c:	umull	r2, r3, r8, r1
   1c020:	cmp	r3, #0
   1c024:	bne	1c05c <__assert_fail@plt+0xacd0>
   1c028:	umull	r8, r9, r2, r1
   1c02c:	adds	r3, r9, #0
   1c030:	movne	r3, #1
   1c034:	cmp	r3, #0
   1c038:	movne	r4, r3
   1c03c:	mvnne	r8, #0
   1c040:	b	1bf2c <__assert_fail@plt+0xaba0>
   1c044:	umull	r2, r3, r8, r1
   1c048:	cmp	r3, #0
   1c04c:	bne	1c05c <__assert_fail@plt+0xacd0>
   1c050:	umull	r2, r3, r2, r1
   1c054:	cmp	r3, #0
   1c058:	beq	1c028 <__assert_fail@plt+0xac9c>
   1c05c:	mov	r4, #1
   1c060:	mvn	r8, #0
   1c064:	b	1bf2c <__assert_fail@plt+0xaba0>
   1c068:	umull	r2, r3, r8, r1
   1c06c:	adds	ip, r3, #0
   1c070:	movne	ip, #1
   1c074:	cmp	ip, #0
   1c078:	beq	1bec0 <__assert_fail@plt+0xab34>
   1c07c:	b	1bfe4 <__assert_fail@plt+0xac58>
   1c080:	lsr	r3, r8, #22
   1c084:	cmp	r3, #0
   1c088:	movne	r4, #1
   1c08c:	mvnne	r8, #0
   1c090:	lsleq	r8, r8, #10
   1c094:	b	1bf2c <__assert_fail@plt+0xaba0>
   1c098:	mov	r0, #2
   1c09c:	mov	r1, #1000	; 0x3e8
   1c0a0:	b	1bdb0 <__assert_fail@plt+0xaa24>
   1c0a4:	movw	r3, #57932	; 0xe24c
   1c0a8:	movt	r3, #1
   1c0ac:	movw	r1, #57944	; 0xe258
   1c0b0:	movt	r1, #1
   1c0b4:	movw	r0, #57960	; 0xe268
   1c0b8:	movt	r0, #1
   1c0bc:	mov	r2, #85	; 0x55
   1c0c0:	bl	1138c <__assert_fail@plt>
   1c0c4:	cmp	r1, #0
   1c0c8:	cmpne	r0, #0
   1c0cc:	beq	1c118 <__assert_fail@plt+0xad8c>
   1c0d0:	strd	r4, [sp, #-16]!
   1c0d4:	umull	r4, r5, r0, r1
   1c0d8:	str	r6, [sp, #8]
   1c0dc:	str	lr, [sp, #12]
   1c0e0:	adds	r3, r5, #0
   1c0e4:	movne	r3, #1
   1c0e8:	cmp	r4, #0
   1c0ec:	blt	1c0f8 <__assert_fail@plt+0xad6c>
   1c0f0:	cmp	r3, #0
   1c0f4:	beq	1c124 <__assert_fail@plt+0xad98>
   1c0f8:	bl	1123c <__errno_location@plt>
   1c0fc:	mov	r3, #12
   1c100:	ldrd	r4, [sp]
   1c104:	ldr	r6, [sp, #8]
   1c108:	add	sp, sp, #12
   1c10c:	str	r3, [r0]
   1c110:	mov	r0, #0
   1c114:	pop	{pc}		; (ldr pc, [sp], #4)
   1c118:	mov	r1, #1
   1c11c:	mov	r0, r1
   1c120:	b	11038 <calloc@plt>
   1c124:	ldrd	r4, [sp]
   1c128:	ldr	r6, [sp, #8]
   1c12c:	ldr	lr, [sp, #12]
   1c130:	add	sp, sp, #16
   1c134:	b	11038 <calloc@plt>
   1c138:	cmp	r0, #0
   1c13c:	beq	1c148 <__assert_fail@plt+0xadbc>
   1c140:	blt	1c150 <__assert_fail@plt+0xadc4>
   1c144:	b	111ac <malloc@plt>
   1c148:	mov	r0, #1
   1c14c:	b	111ac <malloc@plt>
   1c150:	str	r4, [sp, #-8]!
   1c154:	str	lr, [sp, #4]
   1c158:	bl	1123c <__errno_location@plt>
   1c15c:	mov	r3, #12
   1c160:	ldr	r4, [sp]
   1c164:	add	sp, sp, #4
   1c168:	str	r3, [r0]
   1c16c:	mov	r0, #0
   1c170:	pop	{pc}		; (ldr pc, [sp], #4)
   1c174:	cmp	r0, #0
   1c178:	beq	1c1a0 <__assert_fail@plt+0xae14>
   1c17c:	cmp	r1, #0
   1c180:	str	r4, [sp, #-8]!
   1c184:	str	lr, [sp, #4]
   1c188:	beq	1c1a8 <__assert_fail@plt+0xae1c>
   1c18c:	blt	1c1bc <__assert_fail@plt+0xae30>
   1c190:	ldr	r4, [sp]
   1c194:	ldr	lr, [sp, #4]
   1c198:	add	sp, sp, #8
   1c19c:	b	11110 <realloc@plt>
   1c1a0:	mov	r0, r1
   1c1a4:	b	1c138 <__assert_fail@plt+0xadac>
   1c1a8:	bl	12dd8 <__assert_fail@plt+0x1a4c>
   1c1ac:	ldr	r4, [sp]
   1c1b0:	add	sp, sp, #4
   1c1b4:	mov	r0, #0
   1c1b8:	pop	{pc}		; (ldr pc, [sp], #4)
   1c1bc:	bl	1123c <__errno_location@plt>
   1c1c0:	mov	r3, #12
   1c1c4:	str	r3, [r0]
   1c1c8:	b	1c1ac <__assert_fail@plt+0xae20>
   1c1cc:	strd	r4, [sp, #-16]!
   1c1d0:	mov	r4, r0
   1c1d4:	str	r6, [sp, #8]
   1c1d8:	str	lr, [sp, #12]
   1c1dc:	bl	1117c <__fpending@plt>
   1c1e0:	ldr	r5, [r4]
   1c1e4:	mov	r6, r0
   1c1e8:	mov	r0, r4
   1c1ec:	bl	1c374 <__assert_fail@plt+0xafe8>
   1c1f0:	mov	r4, r0
   1c1f4:	and	r5, r5, #32
   1c1f8:	cmp	r5, #0
   1c1fc:	bne	1c234 <__assert_fail@plt+0xaea8>
   1c200:	cmp	r0, #0
   1c204:	beq	1c220 <__assert_fail@plt+0xae94>
   1c208:	cmp	r6, #0
   1c20c:	bne	1c24c <__assert_fail@plt+0xaec0>
   1c210:	bl	1123c <__errno_location@plt>
   1c214:	ldr	r4, [r0]
   1c218:	subs	r4, r4, #9
   1c21c:	mvnne	r4, #0
   1c220:	mov	r0, r4
   1c224:	ldrd	r4, [sp]
   1c228:	ldr	r6, [sp, #8]
   1c22c:	add	sp, sp, #12
   1c230:	pop	{pc}		; (ldr pc, [sp], #4)
   1c234:	cmp	r0, #0
   1c238:	bne	1c24c <__assert_fail@plt+0xaec0>
   1c23c:	bl	1123c <__errno_location@plt>
   1c240:	str	r4, [r0]
   1c244:	mvn	r4, #0
   1c248:	b	1c220 <__assert_fail@plt+0xae94>
   1c24c:	mvn	r4, #0
   1c250:	b	1c220 <__assert_fail@plt+0xae94>
   1c254:	movw	r3, #62998	; 0xf616
   1c258:	movt	r3, #149	; 0x95
   1c25c:	strd	r4, [sp, #-8]!
   1c260:	mov	r4, #0
   1c264:	mov	r5, #0
   1c268:	strd	r4, [r0, #16]
   1c26c:	str	r3, [r0, #24]
   1c270:	ldrd	r4, [sp]
   1c274:	add	sp, sp, #8
   1c278:	bx	lr
   1c27c:	ldr	r2, [r0, #24]
   1c280:	movw	r3, #62998	; 0xf616
   1c284:	movt	r3, #149	; 0x95
   1c288:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1c28c:	strd	r6, [sp, #8]
   1c290:	strd	r8, [sp, #16]
   1c294:	strd	sl, [sp, #24]
   1c298:	cmp	r2, r3
   1c29c:	str	lr, [sp, #32]
   1c2a0:	sub	sp, sp, #4
   1c2a4:	bne	1c354 <__assert_fail@plt+0xafc8>
   1c2a8:	ldrd	r6, [r0, #16]
   1c2ac:	ldrd	sl, [r1, #96]	; 0x60
   1c2b0:	orrs	r3, r6, r7
   1c2b4:	beq	1c308 <__assert_fail@plt+0xaf7c>
   1c2b8:	ldrd	r2, [r0]
   1c2bc:	cmp	r3, fp
   1c2c0:	cmpeq	r2, sl
   1c2c4:	beq	1c328 <__assert_fail@plt+0xaf9c>
   1c2c8:	adds	r8, r6, #1
   1c2cc:	adc	r9, r7, #0
   1c2d0:	and	r2, r6, r8
   1c2d4:	and	r3, r7, r9
   1c2d8:	orrs	r3, r2, r3
   1c2dc:	strd	r8, [r0, #16]
   1c2e0:	movne	r1, #0
   1c2e4:	beq	1c344 <__assert_fail@plt+0xafb8>
   1c2e8:	mov	r0, r1
   1c2ec:	add	sp, sp, #4
   1c2f0:	ldrd	r4, [sp]
   1c2f4:	ldrd	r6, [sp, #8]
   1c2f8:	ldrd	r8, [sp, #16]
   1c2fc:	ldrd	sl, [sp, #24]
   1c300:	add	sp, sp, #32
   1c304:	pop	{pc}		; (ldr pc, [sp], #4)
   1c308:	mov	r2, #1
   1c30c:	mov	r3, #0
   1c310:	strd	r2, [r0, #16]
   1c314:	ldrd	r2, [r1]
   1c318:	mov	r1, #0
   1c31c:	strd	sl, [r0]
   1c320:	strd	r2, [r0, #8]
   1c324:	b	1c2e8 <__assert_fail@plt+0xaf5c>
   1c328:	ldrd	r4, [r1]
   1c32c:	ldrd	r2, [r0, #8]
   1c330:	cmp	r5, r3
   1c334:	cmpeq	r4, r2
   1c338:	bne	1c2c8 <__assert_fail@plt+0xaf3c>
   1c33c:	mov	r1, #1
   1c340:	b	1c2e8 <__assert_fail@plt+0xaf5c>
   1c344:	orrs	r3, r8, r9
   1c348:	bne	1c314 <__assert_fail@plt+0xaf88>
   1c34c:	mov	r1, #1
   1c350:	b	1c2e8 <__assert_fail@plt+0xaf5c>
   1c354:	movw	r3, #58000	; 0xe290
   1c358:	movt	r3, #1
   1c35c:	movw	r1, #58012	; 0xe29c
   1c360:	movt	r1, #1
   1c364:	movw	r0, #58032	; 0xe2b0
   1c368:	movt	r0, #1
   1c36c:	mov	r2, #60	; 0x3c
   1c370:	bl	1138c <__assert_fail@plt>
   1c374:	strd	r4, [sp, #-12]!
   1c378:	mov	r4, r0
   1c37c:	str	lr, [sp, #8]
   1c380:	sub	sp, sp, #12
   1c384:	bl	1126c <fileno@plt>
   1c388:	cmp	r0, #0
   1c38c:	mov	r0, r4
   1c390:	blt	1c414 <__assert_fail@plt+0xb088>
   1c394:	bl	111c4 <__freading@plt>
   1c398:	cmp	r0, #0
   1c39c:	bne	1c3e0 <__assert_fail@plt+0xb054>
   1c3a0:	mov	r0, r4
   1c3a4:	bl	1c650 <__assert_fail@plt+0xb2c4>
   1c3a8:	cmp	r0, #0
   1c3ac:	beq	1c410 <__assert_fail@plt+0xb084>
   1c3b0:	bl	1123c <__errno_location@plt>
   1c3b4:	mov	r5, r0
   1c3b8:	mov	r0, r4
   1c3bc:	ldr	r4, [r5]
   1c3c0:	bl	11284 <fclose@plt>
   1c3c4:	cmp	r4, #0
   1c3c8:	mvnne	r0, #0
   1c3cc:	strne	r4, [r5]
   1c3d0:	add	sp, sp, #12
   1c3d4:	ldrd	r4, [sp]
   1c3d8:	add	sp, sp, #8
   1c3dc:	pop	{pc}		; (ldr pc, [sp], #4)
   1c3e0:	mov	r0, r4
   1c3e4:	bl	1126c <fileno@plt>
   1c3e8:	mov	r1, #1
   1c3ec:	mov	r2, #0
   1c3f0:	mov	r3, #0
   1c3f4:	str	r1, [sp]
   1c3f8:	bl	11158 <lseek64@plt>
   1c3fc:	mvn	r3, #0
   1c400:	mvn	r2, #0
   1c404:	cmp	r1, r3
   1c408:	cmpeq	r0, r2
   1c40c:	bne	1c3a0 <__assert_fail@plt+0xb014>
   1c410:	mov	r0, r4
   1c414:	add	sp, sp, #12
   1c418:	ldrd	r4, [sp]
   1c41c:	ldr	lr, [sp, #8]
   1c420:	add	sp, sp, #12
   1c424:	b	11284 <fclose@plt>
   1c428:	push	{r1, r2, r3}
   1c42c:	strd	r4, [sp, #-20]!	; 0xffffffec
   1c430:	strd	r6, [sp, #8]
   1c434:	str	lr, [sp, #16]
   1c438:	sub	sp, sp, #8
   1c43c:	ldr	r1, [sp, #28]
   1c440:	add	r2, sp, #32
   1c444:	str	r2, [sp, #4]
   1c448:	cmp	r1, #0
   1c44c:	beq	1c528 <__assert_fail@plt+0xb19c>
   1c450:	movw	r3, #1030	; 0x406
   1c454:	mov	r6, r0
   1c458:	cmp	r1, r3
   1c45c:	beq	1c538 <__assert_fail@plt+0xb1ac>
   1c460:	cmp	r1, #11
   1c464:	beq	1c4e0 <__assert_fail@plt+0xb154>
   1c468:	ble	1c4c0 <__assert_fail@plt+0xb134>
   1c46c:	movw	r2, #1031	; 0x407
   1c470:	cmp	r1, r2
   1c474:	bgt	1c4fc <__assert_fail@plt+0xb170>
   1c478:	cmp	r1, r3
   1c47c:	bge	1c48c <__assert_fail@plt+0xb100>
   1c480:	movw	r3, #1025	; 0x401
   1c484:	cmp	r1, r3
   1c488:	beq	1c4e0 <__assert_fail@plt+0xb154>
   1c48c:	ldr	r3, [sp, #4]
   1c490:	mov	r0, r6
   1c494:	ldr	r2, [r3]
   1c498:	bl	1129c <fcntl64@plt>
   1c49c:	mov	r4, r0
   1c4a0:	mov	r0, r4
   1c4a4:	add	sp, sp, #8
   1c4a8:	ldrd	r4, [sp]
   1c4ac:	ldrd	r6, [sp, #8]
   1c4b0:	ldr	lr, [sp, #16]
   1c4b4:	add	sp, sp, #20
   1c4b8:	add	sp, sp, #12
   1c4bc:	bx	lr
   1c4c0:	cmp	r1, #4
   1c4c4:	beq	1c48c <__assert_fail@plt+0xb100>
   1c4c8:	bgt	1c4f0 <__assert_fail@plt+0xb164>
   1c4cc:	cmp	r1, #2
   1c4d0:	beq	1c48c <__assert_fail@plt+0xb100>
   1c4d4:	bgt	1c4e0 <__assert_fail@plt+0xb154>
   1c4d8:	cmp	r1, #1
   1c4dc:	bne	1c48c <__assert_fail@plt+0xb100>
   1c4e0:	mov	r0, r6
   1c4e4:	bl	1129c <fcntl64@plt>
   1c4e8:	mov	r4, r0
   1c4ec:	b	1c4a0 <__assert_fail@plt+0xb114>
   1c4f0:	cmp	r1, #9
   1c4f4:	bne	1c48c <__assert_fail@plt+0xb100>
   1c4f8:	b	1c4e0 <__assert_fail@plt+0xb154>
   1c4fc:	movw	r3, #1033	; 0x409
   1c500:	cmp	r1, r3
   1c504:	beq	1c48c <__assert_fail@plt+0xb100>
   1c508:	blt	1c4e0 <__assert_fail@plt+0xb154>
   1c50c:	movw	r3, #1034	; 0x40a
   1c510:	cmp	r1, r3
   1c514:	bne	1c48c <__assert_fail@plt+0xb100>
   1c518:	mov	r0, r6
   1c51c:	bl	1129c <fcntl64@plt>
   1c520:	mov	r4, r0
   1c524:	b	1c4a0 <__assert_fail@plt+0xb114>
   1c528:	ldr	r2, [sp, #32]
   1c52c:	bl	1129c <fcntl64@plt>
   1c530:	mov	r4, r0
   1c534:	b	1c4a0 <__assert_fail@plt+0xb114>
   1c538:	movw	r5, #62204	; 0xf2fc
   1c53c:	movt	r5, #2
   1c540:	ldr	r7, [r2]
   1c544:	add	r2, sp, #36	; 0x24
   1c548:	ldr	r3, [r5]
   1c54c:	str	r2, [sp, #4]
   1c550:	mov	r2, r7
   1c554:	cmp	r3, #0
   1c558:	blt	1c574 <__assert_fail@plt+0xb1e8>
   1c55c:	bl	1129c <fcntl64@plt>
   1c560:	subs	r4, r0, #0
   1c564:	blt	1c5dc <__assert_fail@plt+0xb250>
   1c568:	mov	r3, #1
   1c56c:	str	r3, [r5]
   1c570:	b	1c4a0 <__assert_fail@plt+0xb114>
   1c574:	mov	r1, #0
   1c578:	bl	1129c <fcntl64@plt>
   1c57c:	subs	r4, r0, #0
   1c580:	blt	1c4a0 <__assert_fail@plt+0xb114>
   1c584:	ldr	r3, [r5]
   1c588:	cmn	r3, #1
   1c58c:	bne	1c4a0 <__assert_fail@plt+0xb114>
   1c590:	mov	r1, #1
   1c594:	mov	r0, r4
   1c598:	bl	1129c <fcntl64@plt>
   1c59c:	subs	r2, r0, #0
   1c5a0:	blt	1c5bc <__assert_fail@plt+0xb230>
   1c5a4:	orr	r2, r2, #1
   1c5a8:	mov	r1, #2
   1c5ac:	mov	r0, r4
   1c5b0:	bl	1129c <fcntl64@plt>
   1c5b4:	cmn	r0, #1
   1c5b8:	bne	1c4a0 <__assert_fail@plt+0xb114>
   1c5bc:	bl	1123c <__errno_location@plt>
   1c5c0:	mov	r5, r0
   1c5c4:	mov	r0, r4
   1c5c8:	ldr	r6, [r5]
   1c5cc:	mvn	r4, #0
   1c5d0:	bl	11350 <close@plt>
   1c5d4:	str	r6, [r5]
   1c5d8:	b	1c4a0 <__assert_fail@plt+0xb114>
   1c5dc:	bl	1123c <__errno_location@plt>
   1c5e0:	ldr	r3, [r0]
   1c5e4:	cmp	r3, #22
   1c5e8:	bne	1c568 <__assert_fail@plt+0xb1dc>
   1c5ec:	mov	r2, r7
   1c5f0:	mov	r0, r6
   1c5f4:	mov	r1, #0
   1c5f8:	bl	1129c <fcntl64@plt>
   1c5fc:	subs	r4, r0, #0
   1c600:	mvnge	r3, #0
   1c604:	strge	r3, [r5]
   1c608:	bge	1c590 <__assert_fail@plt+0xb204>
   1c60c:	b	1c4a0 <__assert_fail@plt+0xb114>
   1c610:	push	{r1, r2, r3}
   1c614:	push	{lr}		; (str lr, [sp, #-4]!)
   1c618:	sub	sp, sp, #8
   1c61c:	ldr	r1, [sp, #12]
   1c620:	ands	r2, r1, #64	; 0x40
   1c624:	bne	1c640 <__assert_fail@plt+0xb2b4>
   1c628:	bl	111a0 <open64@plt>
   1c62c:	bl	1a938 <__assert_fail@plt+0x95ac>
   1c630:	add	sp, sp, #8
   1c634:	pop	{lr}		; (ldr lr, [sp], #4)
   1c638:	add	sp, sp, #12
   1c63c:	bx	lr
   1c640:	add	r3, sp, #16
   1c644:	ldr	r2, [sp, #16]
   1c648:	str	r3, [sp, #4]
   1c64c:	b	1c628 <__assert_fail@plt+0xb29c>
   1c650:	str	r4, [sp, #-8]!
   1c654:	subs	r4, r0, #0
   1c658:	str	lr, [sp, #4]
   1c65c:	sub	sp, sp, #8
   1c660:	beq	1c67c <__assert_fail@plt+0xb2f0>
   1c664:	bl	111c4 <__freading@plt>
   1c668:	cmp	r0, #0
   1c66c:	beq	1c67c <__assert_fail@plt+0xb2f0>
   1c670:	ldr	r3, [r4]
   1c674:	tst	r3, #256	; 0x100
   1c678:	bne	1c694 <__assert_fail@plt+0xb308>
   1c67c:	mov	r0, r4
   1c680:	add	sp, sp, #8
   1c684:	ldr	r4, [sp]
   1c688:	ldr	lr, [sp, #4]
   1c68c:	add	sp, sp, #8
   1c690:	b	1108c <fflush@plt>
   1c694:	mov	r1, #1
   1c698:	mov	r2, #0
   1c69c:	mov	r3, #0
   1c6a0:	mov	r0, r4
   1c6a4:	str	r1, [sp]
   1c6a8:	bl	1c6b0 <__assert_fail@plt+0xb324>
   1c6ac:	b	1c67c <__assert_fail@plt+0xb2f0>
   1c6b0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1c6b4:	mov	r4, r0
   1c6b8:	ldr	ip, [r0, #4]
   1c6bc:	strd	r6, [sp, #8]
   1c6c0:	str	lr, [sp, #20]
   1c6c4:	ldr	lr, [r0, #8]
   1c6c8:	str	r8, [sp, #16]
   1c6cc:	sub	sp, sp, #8
   1c6d0:	ldr	r5, [sp, #32]
   1c6d4:	cmp	lr, ip
   1c6d8:	beq	1c700 <__assert_fail@plt+0xb374>
   1c6dc:	mov	r0, r4
   1c6e0:	str	r5, [sp, #32]
   1c6e4:	add	sp, sp, #8
   1c6e8:	ldrd	r4, [sp]
   1c6ec:	ldrd	r6, [sp, #8]
   1c6f0:	ldr	r8, [sp, #16]
   1c6f4:	ldr	lr, [sp, #20]
   1c6f8:	add	sp, sp, #24
   1c6fc:	b	11290 <fseeko64@plt>
   1c700:	ldr	ip, [r0, #16]
   1c704:	ldr	lr, [r0, #20]
   1c708:	cmp	lr, ip
   1c70c:	bne	1c6dc <__assert_fail@plt+0xb350>
   1c710:	ldr	r8, [r0, #36]	; 0x24
   1c714:	cmp	r8, #0
   1c718:	bne	1c6dc <__assert_fail@plt+0xb350>
   1c71c:	mov	r6, r2
   1c720:	mov	r7, r3
   1c724:	bl	1126c <fileno@plt>
   1c728:	mov	r2, r6
   1c72c:	mov	r3, r7
   1c730:	str	r5, [sp]
   1c734:	bl	11158 <lseek64@plt>
   1c738:	mvn	r3, #0
   1c73c:	mvn	r2, #0
   1c740:	cmp	r1, r3
   1c744:	cmpeq	r0, r2
   1c748:	beq	1c778 <__assert_fail@plt+0xb3ec>
   1c74c:	ldr	r3, [r4]
   1c750:	strd	r0, [r4, #80]	; 0x50
   1c754:	bic	r3, r3, #16
   1c758:	str	r3, [r4]
   1c75c:	mov	r0, r8
   1c760:	add	sp, sp, #8
   1c764:	ldrd	r4, [sp]
   1c768:	ldrd	r6, [sp, #8]
   1c76c:	ldr	r8, [sp, #16]
   1c770:	add	sp, sp, #20
   1c774:	pop	{pc}		; (ldr pc, [sp], #4)
   1c778:	mvn	r8, #0
   1c77c:	b	1c75c <__assert_fail@plt+0xb3d0>
   1c780:	mov	r0, #14
   1c784:	str	r4, [sp, #-8]!
   1c788:	str	lr, [sp, #4]
   1c78c:	bl	112cc <nl_langinfo@plt>
   1c790:	cmp	r0, #0
   1c794:	beq	1c7b8 <__assert_fail@plt+0xb42c>
   1c798:	ldrb	r2, [r0]
   1c79c:	movw	r3, #58056	; 0xe2c8
   1c7a0:	movt	r3, #1
   1c7a4:	ldr	r4, [sp]
   1c7a8:	add	sp, sp, #4
   1c7ac:	cmp	r2, #0
   1c7b0:	moveq	r0, r3
   1c7b4:	pop	{pc}		; (ldr pc, [sp], #4)
   1c7b8:	ldr	r4, [sp]
   1c7bc:	add	sp, sp, #4
   1c7c0:	movw	r0, #58056	; 0xe2c8
   1c7c4:	movt	r0, #1
   1c7c8:	pop	{pc}		; (ldr pc, [sp], #4)
   1c7cc:	strd	r4, [sp, #-20]!	; 0xffffffec
   1c7d0:	mov	r5, r2
   1c7d4:	strd	r6, [sp, #8]
   1c7d8:	subs	r6, r0, #0
   1c7dc:	mov	r7, r1
   1c7e0:	str	lr, [sp, #16]
   1c7e4:	sub	sp, sp, #12
   1c7e8:	addeq	r6, sp, #4
   1c7ec:	mov	r0, r6
   1c7f0:	bl	11188 <mbrtowc@plt>
   1c7f4:	cmp	r5, #0
   1c7f8:	cmnne	r0, #3
   1c7fc:	mov	r4, r0
   1c800:	bhi	1c81c <__assert_fail@plt+0xb490>
   1c804:	mov	r0, r4
   1c808:	add	sp, sp, #12
   1c80c:	ldrd	r4, [sp]
   1c810:	ldrd	r6, [sp, #8]
   1c814:	add	sp, sp, #16
   1c818:	pop	{pc}		; (ldr pc, [sp], #4)
   1c81c:	mov	r0, #0
   1c820:	bl	1c880 <__assert_fail@plt+0xb4f4>
   1c824:	cmp	r0, #0
   1c828:	bne	1c804 <__assert_fail@plt+0xb478>
   1c82c:	ldrb	r3, [r7]
   1c830:	mov	r4, #1
   1c834:	str	r3, [r6]
   1c838:	b	1c804 <__assert_fail@plt+0xb478>
   1c83c:	umull	r2, r3, r1, r2
   1c840:	cmp	r3, #0
   1c844:	bne	1c850 <__assert_fail@plt+0xb4c4>
   1c848:	mov	r1, r2
   1c84c:	b	1c174 <__assert_fail@plt+0xade8>
   1c850:	str	r4, [sp, #-8]!
   1c854:	str	lr, [sp, #4]
   1c858:	bl	1123c <__errno_location@plt>
   1c85c:	mov	r3, #12
   1c860:	ldr	r4, [sp]
   1c864:	add	sp, sp, #4
   1c868:	str	r3, [r0]
   1c86c:	mov	r0, #0
   1c870:	pop	{pc}		; (ldr pc, [sp], #4)
   1c874:	mov	r2, #3
   1c878:	mov	r1, #0
   1c87c:	b	1c428 <__assert_fail@plt+0xb09c>
   1c880:	push	{lr}		; (str lr, [sp, #-4]!)
   1c884:	sub	sp, sp, #268	; 0x10c
   1c888:	movw	r2, #257	; 0x101
   1c88c:	add	r1, sp, #4
   1c890:	bl	1c8d8 <__assert_fail@plt+0xb54c>
   1c894:	cmp	r0, #0
   1c898:	movne	r0, #0
   1c89c:	bne	1c8d0 <__assert_fail@plt+0xb544>
   1c8a0:	movw	r1, #58064	; 0xe2d0
   1c8a4:	movt	r1, #1
   1c8a8:	add	r0, sp, #4
   1c8ac:	bl	11074 <strcmp@plt>
   1c8b0:	cmp	r0, #0
   1c8b4:	beq	1c8d0 <__assert_fail@plt+0xb544>
   1c8b8:	add	r0, sp, #4
   1c8bc:	movw	r1, #58068	; 0xe2d4
   1c8c0:	movt	r1, #1
   1c8c4:	bl	11074 <strcmp@plt>
   1c8c8:	adds	r0, r0, #0
   1c8cc:	movne	r0, #1
   1c8d0:	add	sp, sp, #268	; 0x10c
   1c8d4:	pop	{pc}		; (ldr pc, [sp], #4)
   1c8d8:	strd	r4, [sp, #-16]!
   1c8dc:	mov	r5, r1
   1c8e0:	mov	r1, #0
   1c8e4:	mov	r4, r2
   1c8e8:	str	r6, [sp, #8]
   1c8ec:	str	lr, [sp, #12]
   1c8f0:	bl	112a8 <setlocale@plt>
   1c8f4:	subs	r6, r0, #0
   1c8f8:	beq	1c978 <__assert_fail@plt+0xb5ec>
   1c8fc:	bl	1120c <strlen@plt>
   1c900:	cmp	r4, r0
   1c904:	bhi	1c924 <__assert_fail@plt+0xb598>
   1c908:	cmp	r4, #0
   1c90c:	moveq	r0, #34	; 0x22
   1c910:	bne	1c948 <__assert_fail@plt+0xb5bc>
   1c914:	ldrd	r4, [sp]
   1c918:	ldr	r6, [sp, #8]
   1c91c:	add	sp, sp, #12
   1c920:	pop	{pc}		; (ldr pc, [sp], #4)
   1c924:	add	r2, r0, #1
   1c928:	mov	r1, r6
   1c92c:	mov	r0, r5
   1c930:	bl	110c8 <memcpy@plt>
   1c934:	ldrd	r4, [sp]
   1c938:	mov	r0, #0
   1c93c:	ldr	r6, [sp, #8]
   1c940:	add	sp, sp, #12
   1c944:	pop	{pc}		; (ldr pc, [sp], #4)
   1c948:	sub	r4, r4, #1
   1c94c:	mov	r1, r6
   1c950:	mov	r2, r4
   1c954:	mov	r0, r5
   1c958:	bl	110c8 <memcpy@plt>
   1c95c:	mov	r3, #0
   1c960:	mov	r0, #34	; 0x22
   1c964:	strb	r3, [r5, r4]
   1c968:	ldrd	r4, [sp]
   1c96c:	ldr	r6, [sp, #8]
   1c970:	add	sp, sp, #12
   1c974:	pop	{pc}		; (ldr pc, [sp], #4)
   1c978:	cmp	r4, #0
   1c97c:	mov	r0, #22
   1c980:	strbne	r6, [r5]
   1c984:	ldrd	r4, [sp]
   1c988:	ldr	r6, [sp, #8]
   1c98c:	add	sp, sp, #12
   1c990:	pop	{pc}		; (ldr pc, [sp], #4)
   1c994:	mov	r1, #0
   1c998:	b	112a8 <setlocale@plt>
   1c99c:	cmp	r3, #0
   1c9a0:	cmpeq	r2, #0
   1c9a4:	bne	1c9bc <__assert_fail@plt+0xb630>
   1c9a8:	cmp	r1, #0
   1c9ac:	cmpeq	r0, #0
   1c9b0:	mvnne	r1, #0
   1c9b4:	mvnne	r0, #0
   1c9b8:	b	1c9d8 <__assert_fail@plt+0xb64c>
   1c9bc:	sub	sp, sp, #8
   1c9c0:	push	{sp, lr}
   1c9c4:	bl	1c9e8 <__assert_fail@plt+0xb65c>
   1c9c8:	ldr	lr, [sp, #4]
   1c9cc:	add	sp, sp, #8
   1c9d0:	pop	{r2, r3}
   1c9d4:	bx	lr
   1c9d8:	push	{r1, lr}
   1c9dc:	mov	r0, #8
   1c9e0:	bl	1105c <raise@plt>
   1c9e4:	pop	{r1, pc}
   1c9e8:	cmp	r1, r3
   1c9ec:	cmpeq	r0, r2
   1c9f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c9f4:	mov	r4, r0
   1c9f8:	movcc	r0, #0
   1c9fc:	mov	r5, r1
   1ca00:	ldr	lr, [sp, #36]	; 0x24
   1ca04:	movcc	r1, r0
   1ca08:	bcc	1cb04 <__assert_fail@plt+0xb778>
   1ca0c:	cmp	r3, #0
   1ca10:	clzeq	ip, r2
   1ca14:	clzne	ip, r3
   1ca18:	addeq	ip, ip, #32
   1ca1c:	cmp	r5, #0
   1ca20:	clzeq	r1, r4
   1ca24:	addeq	r1, r1, #32
   1ca28:	clzne	r1, r5
   1ca2c:	sub	ip, ip, r1
   1ca30:	sub	sl, ip, #32
   1ca34:	lsl	r9, r3, ip
   1ca38:	rsb	fp, ip, #32
   1ca3c:	orr	r9, r9, r2, lsl sl
   1ca40:	orr	r9, r9, r2, lsr fp
   1ca44:	lsl	r8, r2, ip
   1ca48:	cmp	r5, r9
   1ca4c:	cmpeq	r4, r8
   1ca50:	movcc	r0, #0
   1ca54:	movcc	r1, r0
   1ca58:	bcc	1ca74 <__assert_fail@plt+0xb6e8>
   1ca5c:	mov	r0, #1
   1ca60:	subs	r4, r4, r8
   1ca64:	lsl	r1, r0, sl
   1ca68:	orr	r1, r1, r0, lsr fp
   1ca6c:	lsl	r0, r0, ip
   1ca70:	sbc	r5, r5, r9
   1ca74:	cmp	ip, #0
   1ca78:	beq	1cb04 <__assert_fail@plt+0xb778>
   1ca7c:	lsr	r6, r8, #1
   1ca80:	orr	r6, r6, r9, lsl #31
   1ca84:	lsr	r7, r9, #1
   1ca88:	mov	r2, ip
   1ca8c:	b	1cab0 <__assert_fail@plt+0xb724>
   1ca90:	subs	r3, r4, r6
   1ca94:	sbc	r8, r5, r7
   1ca98:	adds	r3, r3, r3
   1ca9c:	adc	r8, r8, r8
   1caa0:	adds	r4, r3, #1
   1caa4:	adc	r5, r8, #0
   1caa8:	subs	r2, r2, #1
   1caac:	beq	1cacc <__assert_fail@plt+0xb740>
   1cab0:	cmp	r5, r7
   1cab4:	cmpeq	r4, r6
   1cab8:	bcs	1ca90 <__assert_fail@plt+0xb704>
   1cabc:	adds	r4, r4, r4
   1cac0:	adc	r5, r5, r5
   1cac4:	subs	r2, r2, #1
   1cac8:	bne	1cab0 <__assert_fail@plt+0xb724>
   1cacc:	lsr	r3, r4, ip
   1cad0:	orr	r3, r3, r5, lsl fp
   1cad4:	lsr	r2, r5, ip
   1cad8:	orr	r3, r3, r5, lsr sl
   1cadc:	adds	r0, r0, r4
   1cae0:	mov	r4, r3
   1cae4:	lsl	r3, r2, ip
   1cae8:	orr	r3, r3, r4, lsl sl
   1caec:	lsl	ip, r4, ip
   1caf0:	orr	r3, r3, r4, lsr fp
   1caf4:	adc	r1, r1, r5
   1caf8:	subs	r0, r0, ip
   1cafc:	mov	r5, r2
   1cb00:	sbc	r1, r1, r3
   1cb04:	cmp	lr, #0
   1cb08:	strdne	r4, [lr]
   1cb0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cb10:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1cb14:	mov	r7, r0
   1cb18:	ldr	r6, [pc, #72]	; 1cb68 <__assert_fail@plt+0xb7dc>
   1cb1c:	ldr	r5, [pc, #72]	; 1cb6c <__assert_fail@plt+0xb7e0>
   1cb20:	add	r6, pc, r6
   1cb24:	add	r5, pc, r5
   1cb28:	sub	r6, r6, r5
   1cb2c:	mov	r8, r1
   1cb30:	mov	r9, r2
   1cb34:	bl	1100c <fstatfs64@plt-0x20>
   1cb38:	asrs	r6, r6, #2
   1cb3c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1cb40:	mov	r4, #0
   1cb44:	add	r4, r4, #1
   1cb48:	ldr	r3, [r5], #4
   1cb4c:	mov	r2, r9
   1cb50:	mov	r1, r8
   1cb54:	mov	r0, r7
   1cb58:	blx	r3
   1cb5c:	cmp	r6, r4
   1cb60:	bne	1cb44 <__assert_fail@plt+0xb7b8>
   1cb64:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1cb68:	andeq	r2, r1, ip, ror #7
   1cb6c:	andeq	r2, r1, r4, ror #7
   1cb70:	bx	lr
   1cb74:	ldr	r3, [pc, #12]	; 1cb88 <__assert_fail@plt+0xb7fc>
   1cb78:	mov	r1, #0
   1cb7c:	add	r3, pc, r3
   1cb80:	ldr	r2, [r3]
   1cb84:	b	11248 <__cxa_atexit@plt>
   1cb88:			; <UNDEFINED> instruction: 0x000125b4

Disassembly of section .fini:

0001cb8c <.fini>:
   1cb8c:	push	{r3, lr}
   1cb90:	pop	{r3, pc}
