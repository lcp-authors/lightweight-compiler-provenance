
../repos/charybdis/authd/.libs/authd:     file format elf32-littlearm


Disassembly of section .init:

0001124c <.init>:
   1124c:	push	{r3, lr}
   11250:	bl	11784 <fputs@plt+0x128>
   11254:	pop	{r3, pc}

Disassembly of section .plt:

00011258 <sigemptyset@plt-0x14>:
   11258:	push	{lr}		; (str lr, [sp, #-4]!)
   1125c:	ldr	lr, [pc, #4]	; 11268 <sigemptyset@plt-0x4>
   11260:	add	lr, pc, lr
   11264:	ldr	pc, [lr, #8]!
   11268:	muleq	r1, r8, sp

0001126c <sigemptyset@plt>:
   1126c:	add	ip, pc, #0, 12
   11270:	add	ip, ip, #94208	; 0x17000
   11274:	ldr	pc, [ip, #3480]!	; 0xd98

00011278 <strerror@plt>:
   11278:	add	ip, pc, #0, 12
   1127c:	add	ip, ip, #94208	; 0x17000
   11280:	ldr	pc, [ip, #3472]!	; 0xd90

00011284 <rb_helper_loop@plt>:
   11284:	add	ip, pc, #0, 12
   11288:	add	ip, ip, #94208	; 0x17000
   1128c:	ldr	pc, [ip, #3464]!	; 0xd88

00011290 <abort@plt>:
   11290:	add	ip, pc, #0, 12
   11294:	add	ip, ip, #94208	; 0x17000
   11298:	ldr	pc, [ip, #3456]!	; 0xd80

0001129c <rb_event_addish@plt>:
   1129c:	add	ip, pc, #0, 12
   112a0:	add	ip, ip, #94208	; 0x17000
   112a4:	ldr	pc, [ip, #3448]!	; 0xd78

000112a8 <getsockname@plt>:
   112a8:	add	ip, pc, #0, 12
   112ac:	add	ip, ip, #94208	; 0x17000
   112b0:	ldr	pc, [ip, #3440]!	; 0xd70

000112b4 <rb_ignore_errno@plt>:
   112b4:	add	ip, pc, #0, 12
   112b8:	add	ip, ip, #94208	; 0x17000
   112bc:	ldr	pc, [ip, #3432]!	; 0xd68

000112c0 <rb_connect_tcp_ssl@plt>:
   112c0:	add	ip, pc, #0, 12
   112c4:	add	ip, ip, #94208	; 0x17000
   112c8:	ldr	pc, [ip, #3424]!	; 0xd60

000112cc <rb_connect_tcp@plt>:
   112cc:	add	ip, pc, #0, 12
   112d0:	add	ip, ip, #94208	; 0x17000
   112d4:	ldr	pc, [ip, #3416]!	; 0xd58

000112d8 <memcmp@plt>:
   112d8:	add	ip, pc, #0, 12
   112dc:	add	ip, ip, #94208	; 0x17000
   112e0:	ldr	pc, [ip, #3408]!	; 0xd50

000112e4 <__libc_start_main@plt>:
   112e4:	add	ip, pc, #0, 12
   112e8:	add	ip, ip, #94208	; 0x17000
   112ec:	ldr	pc, [ip, #3400]!	; 0xd48

000112f0 <rb_event_delete@plt>:
   112f0:	add	ip, pc, #0, 12
   112f4:	add	ip, ip, #94208	; 0x17000
   112f8:	ldr	pc, [ip, #3392]!	; 0xd40

000112fc <rb_setselect@plt>:
   112fc:	add	ip, pc, #0, 12
   11300:	add	ip, ip, #94208	; 0x17000
   11304:	ldr	pc, [ip, #3384]!	; 0xd38

00011308 <rb_get_fd@plt>:
   11308:	add	ip, pc, #0, 12
   1130c:	add	ip, ip, #94208	; 0x17000
   11310:	ldr	pc, [ip, #3376]!	; 0xd30

00011314 <__gmon_start__@plt>:
   11314:	add	ip, pc, #0, 12
   11318:	add	ip, ip, #94208	; 0x17000
   1131c:	ldr	pc, [ip, #3368]!	; 0xd28

00011320 <vsnprintf@plt>:
   11320:	add	ip, pc, #0, 12
   11324:	add	ip, ip, #94208	; 0x17000
   11328:	ldr	pc, [ip, #3360]!	; 0xd20

0001132c <rb_socket@plt>:
   1132c:	add	ip, pc, #0, 12
   11330:	add	ip, ip, #94208	; 0x17000
   11334:	ldr	pc, [ip, #3352]!	; 0xd18

00011338 <fclose@plt>:
   11338:	add	ip, pc, #0, 12
   1133c:	add	ip, ip, #94208	; 0x17000
   11340:	ldr	pc, [ip, #3344]!	; 0xd10

00011344 <fgets@plt>:
   11344:	add	ip, pc, #0, 12
   11348:	add	ip, ip, #94208	; 0x17000
   1134c:	ldr	pc, [ip, #3336]!	; 0xd08

00011350 <rb_strtok_r@plt>:
   11350:	add	ip, pc, #0, 12
   11354:	add	ip, ip, #94208	; 0x17000
   11358:	ldr	pc, [ip, #3328]!	; 0xd00

0001135c <strchr@plt>:
   1135c:	add	ip, pc, #0, 12
   11360:	add	ip, ip, #94208	; 0x17000
   11364:	ldr	pc, [ip, #3320]!	; 0xcf8

00011368 <rb_dictionary_foreach_cur@plt>:
   11368:	add	ip, pc, #0, 12
   1136c:	add	ip, ip, #94208	; 0x17000
   11370:	ldr	pc, [ip, #3312]!	; 0xcf0

00011374 <strcasecmp@plt>:
   11374:	add	ip, pc, #0, 12
   11378:	add	ip, ip, #94208	; 0x17000
   1137c:	ldr	pc, [ip, #3304]!	; 0xce8

00011380 <calloc@plt>:
   11380:	add	ip, pc, #0, 12
   11384:	add	ip, ip, #94208	; 0x17000
   11388:	ldr	pc, [ip, #3296]!	; 0xce0

0001138c <rb_helper_child@plt>:
   1138c:	add	ip, pc, #0, 12
   11390:	add	ip, ip, #94208	; 0x17000
   11394:	ldr	pc, [ip, #3288]!	; 0xcd8

00011398 <sendto@plt>:
   11398:	add	ip, pc, #0, 12
   1139c:	add	ip, ip, #94208	; 0x17000
   113a0:	ldr	pc, [ip, #3280]!	; 0xcd0

000113a4 <fopen@plt>:
   113a4:	add	ip, pc, #0, 12
   113a8:	add	ip, ip, #94208	; 0x17000
   113ac:	ldr	pc, [ip, #3272]!	; 0xcc8

000113b0 <memset@plt>:
   113b0:	add	ip, pc, #0, 12
   113b4:	add	ip, ip, #94208	; 0x17000
   113b8:	ldr	pc, [ip, #3264]!	; 0xcc0

000113bc <freeaddrinfo@plt>:
   113bc:	add	ip, pc, #0, 12
   113c0:	add	ip, ip, #94208	; 0x17000
   113c4:	ldr	pc, [ip, #3256]!	; 0xcb8

000113c8 <strrchr@plt>:
   113c8:	add	ip, pc, #0, 12
   113cc:	add	ip, ip, #94208	; 0x17000
   113d0:	ldr	pc, [ip, #3248]!	; 0xcb0

000113d4 <rb_write@plt>:
   113d4:	add	ip, pc, #0, 12
   113d8:	add	ip, ip, #94208	; 0x17000
   113dc:	ldr	pc, [ip, #3240]!	; 0xca8

000113e0 <__assert_fail@plt>:
   113e0:	add	ip, pc, #0, 12
   113e4:	add	ip, ip, #94208	; 0x17000
   113e8:	ldr	pc, [ip, #3232]!	; 0xca0

000113ec <rb_strlcpy@plt>:
   113ec:	add	ip, pc, #0, 12
   113f0:	add	ip, ip, #94208	; 0x17000
   113f4:	ldr	pc, [ip, #3224]!	; 0xc98

000113f8 <strtoull@plt>:
   113f8:	add	ip, pc, #0, 12
   113fc:	add	ip, ip, #94208	; 0x17000
   11400:	ldr	pc, [ip, #3216]!	; 0xc90

00011404 <rb_dictionary_foreach_next@plt>:
   11404:	add	ip, pc, #0, 12
   11408:	add	ip, ip, #94208	; 0x17000
   1140c:	ldr	pc, [ip, #3208]!	; 0xc88

00011410 <free@plt>:
   11410:	add	ip, pc, #0, 12
   11414:	add	ip, ip, #94208	; 0x17000
   11418:	ldr	pc, [ip, #3200]!	; 0xc80

0001141c <rb_string_to_array@plt>:
   1141c:	add	ip, pc, #0, 12
   11420:	add	ip, ip, #94208	; 0x17000
   11424:	ldr	pc, [ip, #3192]!	; 0xc78

00011428 <rb_read@plt>:
   11428:	add	ip, pc, #0, 12
   1142c:	add	ip, ip, #94208	; 0x17000
   11430:	ldr	pc, [ip, #3184]!	; 0xc70

00011434 <rb_strcasecmp@plt>:
   11434:	add	ip, pc, #0, 12
   11438:	add	ip, ip, #94208	; 0x17000
   1143c:	ldr	pc, [ip, #3176]!	; 0xc68

00011440 <getaddrinfo@plt>:
   11440:	add	ip, pc, #0, 12
   11444:	add	ip, ip, #94208	; 0x17000
   11448:	ldr	pc, [ip, #3168]!	; 0xc60

0001144c <rb_dictionary_foreach_start@plt>:
   1144c:	add	ip, pc, #0, 12
   11450:	add	ip, ip, #94208	; 0x17000
   11454:	ldr	pc, [ip, #3160]!	; 0xc58

00011458 <rb_inet_pton_sock@plt>:
   11458:	add	ip, pc, #0, 12
   1145c:	add	ip, ip, #94208	; 0x17000
   11460:	ldr	pc, [ip, #3152]!	; 0xc50

00011464 <strlen@plt>:
   11464:	add	ip, pc, #0, 12
   11468:	add	ip, ip, #94208	; 0x17000
   1146c:	ldr	pc, [ip, #3144]!	; 0xc48

00011470 <rb_current_time@plt>:
   11470:	add	ip, pc, #0, 12
   11474:	add	ip, ip, #94208	; 0x17000
   11478:	ldr	pc, [ip, #3136]!	; 0xc40

0001147c <rb_dictionary_delete@plt>:
   1147c:	add	ip, pc, #0, 12
   11480:	add	ip, ip, #94208	; 0x17000
   11484:	ldr	pc, [ip, #3128]!	; 0xc38

00011488 <memcpy@plt>:
   11488:	add	ip, pc, #0, 12
   1148c:	add	ip, ip, #94208	; 0x17000
   11490:	ldr	pc, [ip, #3120]!	; 0xc30

00011494 <rb_free_rb_dlink_node@plt>:
   11494:	add	ip, pc, #0, 12
   11498:	add	ip, ip, #94208	; 0x17000
   1149c:	ldr	pc, [ip, #3112]!	; 0xc28

000114a0 <rb_close@plt>:
   114a0:	add	ip, pc, #0, 12
   114a4:	add	ip, ip, #94208	; 0x17000
   114a8:	ldr	pc, [ip, #3104]!	; 0xc20

000114ac <strtol@plt>:
   114ac:	add	ip, pc, #0, 12
   114b0:	add	ip, ip, #94208	; 0x17000
   114b4:	ldr	pc, [ip, #3096]!	; 0xc18

000114b8 <sigaddset@plt>:
   114b8:	add	ip, pc, #0, 12
   114bc:	add	ip, ip, #94208	; 0x17000
   114c0:	ldr	pc, [ip, #3088]!	; 0xc10

000114c4 <strcpy@plt>:
   114c4:	add	ip, pc, #0, 12
   114c8:	add	ip, ip, #94208	; 0x17000
   114cc:	ldr	pc, [ip, #3080]!	; 0xc08

000114d0 <raise@plt>:
   114d0:	add	ip, pc, #0, 12
   114d4:	add	ip, ip, #94208	; 0x17000
   114d8:	ldr	pc, [ip, #3072]!	; 0xc00

000114dc <atoi@plt>:
   114dc:	add	ip, pc, #0, 12
   114e0:	add	ip, ip, #94208	; 0x17000
   114e4:	ldr	pc, [ip, #3064]!	; 0xbf8

000114e8 <rb_dictionary_destroy@plt>:
   114e8:	add	ip, pc, #0, 12
   114ec:	add	ip, ip, #94208	; 0x17000
   114f0:	ldr	pc, [ip, #3056]!	; 0xbf0

000114f4 <bind@plt>:
   114f4:	add	ip, pc, #0, 12
   114f8:	add	ip, ip, #94208	; 0x17000
   114fc:	ldr	pc, [ip, #3048]!	; 0xbe8

00011500 <strstr@plt>:
   11500:	add	ip, pc, #0, 12
   11504:	add	ip, ip, #94208	; 0x17000
   11508:	ldr	pc, [ip, #3040]!	; 0xbe0

0001150c <rb_init_prng@plt>:
   1150c:	add	ip, pc, #0, 12
   11510:	add	ip, ip, #94208	; 0x17000
   11514:	ldr	pc, [ip, #3032]!	; 0xbd8

00011518 <rb_dictionary_retrieve@plt>:
   11518:	add	ip, pc, #0, 12
   1151c:	add	ip, ip, #94208	; 0x17000
   11520:	ldr	pc, [ip, #3024]!	; 0xbd0

00011524 <rb_outofmemory@plt>:
   11524:	add	ip, pc, #0, 12
   11528:	add	ip, ip, #94208	; 0x17000
   1152c:	ldr	pc, [ip, #3016]!	; 0xbc8

00011530 <__ctype_b_loc@plt>:
   11530:	add	ip, pc, #0, 12
   11534:	add	ip, ip, #94208	; 0x17000
   11538:	ldr	pc, [ip, #3008]!	; 0xbc0

0001153c <rb_dictionary_add@plt>:
   1153c:	add	ip, pc, #0, 12
   11540:	add	ip, ip, #94208	; 0x17000
   11544:	ldr	pc, [ip, #3000]!	; 0xbb8

00011548 <rb_set_time@plt>:
   11548:	add	ip, pc, #0, 12
   1154c:	add	ip, ip, #94208	; 0x17000
   11550:	ldr	pc, [ip, #2992]!	; 0xbb0

00011554 <malloc@plt>:
   11554:	add	ip, pc, #0, 12
   11558:	add	ip, ip, #94208	; 0x17000
   1155c:	ldr	pc, [ip, #2984]!	; 0xba8

00011560 <sigaction@plt>:
   11560:	add	ip, pc, #0, 12
   11564:	add	ip, ip, #94208	; 0x17000
   11568:	ldr	pc, [ip, #2976]!	; 0xba0

0001156c <rb_helper_read@plt>:
   1156c:	add	ip, pc, #0, 12
   11570:	add	ip, ip, #94208	; 0x17000
   11574:	ldr	pc, [ip, #2968]!	; 0xb98

00011578 <rb_inet_ntop_sock@plt>:
   11578:	add	ip, pc, #0, 12
   1157c:	add	ip, ip, #94208	; 0x17000
   11580:	ldr	pc, [ip, #2960]!	; 0xb90

00011584 <rb_dictionary_find@plt>:
   11584:	add	ip, pc, #0, 12
   11588:	add	ip, ip, #94208	; 0x17000
   1158c:	ldr	pc, [ip, #2952]!	; 0xb88

00011590 <rb_dictionary_create@plt>:
   11590:	add	ip, pc, #0, 12
   11594:	add	ip, ip, #94208	; 0x17000
   11598:	ldr	pc, [ip, #2944]!	; 0xb80

0001159c <memmove@plt>:
   1159c:	add	ip, pc, #0, 12
   115a0:	add	ip, ip, #94208	; 0x17000
   115a4:	ldr	pc, [ip, #2936]!	; 0xb78

000115a8 <rb_accept_tcp@plt>:
   115a8:	add	ip, pc, #0, 12
   115ac:	add	ip, ip, #94208	; 0x17000
   115b0:	ldr	pc, [ip, #2928]!	; 0xb70

000115b4 <rb_helper_write@plt>:
   115b4:	add	ip, pc, #0, 12
   115b8:	add	ip, ip, #94208	; 0x17000
   115bc:	ldr	pc, [ip, #2920]!	; 0xb68

000115c0 <rb_event_add@plt>:
   115c0:	add	ip, pc, #0, 12
   115c4:	add	ip, ip, #94208	; 0x17000
   115c8:	ldr	pc, [ip, #2912]!	; 0xb60

000115cc <rb_get_random@plt>:
   115cc:	add	ip, pc, #0, 12
   115d0:	add	ip, ip, #94208	; 0x17000
   115d4:	ldr	pc, [ip, #2904]!	; 0xb58

000115d8 <rb_make_rb_dlink_node@plt>:
   115d8:	add	ip, pc, #0, 12
   115dc:	add	ip, ip, #94208	; 0x17000
   115e0:	ldr	pc, [ip, #2896]!	; 0xb50

000115e4 <snprintf@plt>:
   115e4:	add	ip, pc, #0, 12
   115e8:	add	ip, ip, #94208	; 0x17000
   115ec:	ldr	pc, [ip, #2888]!	; 0xb48

000115f0 <rb_listen@plt>:
   115f0:	add	ip, pc, #0, 12
   115f4:	add	ip, ip, #94208	; 0x17000
   115f8:	ldr	pc, [ip, #2880]!	; 0xb40

000115fc <strncmp@plt>:
   115fc:	add	ip, pc, #0, 12
   11600:	add	ip, ip, #94208	; 0x17000
   11604:	ldr	pc, [ip, #2872]!	; 0xb38

00011608 <recvfrom@plt>:
   11608:	add	ip, pc, #0, 12
   1160c:	add	ip, ip, #94208	; 0x17000
   11610:	ldr	pc, [ip, #2864]!	; 0xb30

00011614 <setsockopt@plt>:
   11614:	add	ip, pc, #0, 12
   11618:	add	ip, ip, #94208	; 0x17000
   1161c:	ldr	pc, [ip, #2856]!	; 0xb28

00011620 <strpbrk@plt>:
   11620:	add	ip, pc, #0, 12
   11624:	add	ip, ip, #94208	; 0x17000
   11628:	ldr	pc, [ip, #2848]!	; 0xb20

0001162c <strcmp@plt>:
   1162c:	add	ip, pc, #0, 12
   11630:	add	ip, ip, #94208	; 0x17000
   11634:	ldr	pc, [ip, #2840]!	; 0xb18

00011638 <exit@plt>:
   11638:	add	ip, pc, #0, 12
   1163c:	add	ip, ip, #94208	; 0x17000
   11640:	ldr	pc, [ip, #2832]!	; 0xb10

00011644 <__errno_location@plt>:
   11644:	add	ip, pc, #0, 12
   11648:	add	ip, ip, #94208	; 0x17000
   1164c:	ldr	pc, [ip, #2824]!	; 0xb08

00011650 <sprintf@plt>:
   11650:	add	ip, pc, #0, 12
   11654:	add	ip, ip, #94208	; 0x17000
   11658:	ldr	pc, [ip, #2816]!	; 0xb00

0001165c <fputs@plt>:
   1165c:	add	ip, pc, #0, 12
   11660:	add	ip, ip, #94208	; 0x17000
   11664:	ldr	pc, [ip, #2808]!	; 0xaf8

Disassembly of section .text:

00011668 <.text>:
   11668:	push	{r4, lr}
   1166c:	ldr	r3, [pc, #12]	; 11680 <fputs@plt+0x24>
   11670:	ldr	r2, [pc, #12]	; 11684 <fputs@plt+0x28>
   11674:	ldr	r1, [pc, #12]	; 11688 <fputs@plt+0x2c>
   11678:	ldr	r0, [pc, #12]	; 1168c <fputs@plt+0x30>
   1167c:	bl	113e0 <__assert_fail@plt>
   11680:	strdeq	r7, [r1], -r3
   11684:	andeq	r0, r0, r9, lsr #3
   11688:	andeq	r7, r1, r4, asr ip
   1168c:	andeq	r7, r1, sl, asr ip
   11690:	push	{r0, r1, r2, r3, r4, lr}
   11694:	bl	118f4 <fputs@plt+0x298>
   11698:	mov	r4, #0
   1169c:	mov	r3, #256	; 0x100
   116a0:	str	r3, [sp, #12]
   116a4:	str	r3, [sp, #8]
   116a8:	str	r3, [sp, #4]
   116ac:	str	r4, [sp]
   116b0:	mov	r3, r4
   116b4:	mov	r2, r4
   116b8:	ldr	r1, [pc, #104]	; 11728 <fputs@plt+0xcc>
   116bc:	ldr	r0, [pc, #104]	; 1172c <fputs@plt+0xd0>
   116c0:	bl	1138c <rb_helper_child@plt>
   116c4:	ldr	r5, [pc, #100]	; 11730 <fputs@plt+0xd4>
   116c8:	cmp	r0, r4
   116cc:	str	r0, [r5, #60]	; 0x3c
   116d0:	bne	116ec <fputs@plt+0x90>
   116d4:	ldr	r3, [pc, #88]	; 11734 <fputs@plt+0xd8>
   116d8:	ldr	r0, [pc, #88]	; 11738 <fputs@plt+0xdc>
   116dc:	ldr	r1, [r3]
   116e0:	bl	1165c <fputs@plt>
   116e4:	mov	r0, #1
   116e8:	bl	11638 <exit@plt>
   116ec:	bl	11548 <rb_set_time@plt>
   116f0:	bl	118f4 <fputs@plt+0x298>
   116f4:	ldr	r1, [pc, #64]	; 1173c <fputs@plt+0xe0>
   116f8:	ldr	r0, [pc, #64]	; 11740 <fputs@plt+0xe4>
   116fc:	bl	11590 <rb_dictionary_create@plt>
   11700:	ldr	r3, [pc, #60]	; 11744 <fputs@plt+0xe8>
   11704:	str	r0, [r3]
   11708:	bl	130ac <fputs@plt+0x1a50>
   1170c:	bl	12478 <fputs@plt+0xe1c>
   11710:	mov	r1, #1
   11714:	mov	r0, r4
   11718:	bl	1150c <rb_init_prng@plt>
   1171c:	mov	r1, r4
   11720:	ldr	r0, [r5, #60]	; 0x3c
   11724:	bl	11284 <rb_helper_loop@plt>
   11728:	andeq	r1, r1, r4, ror r8
   1172c:	andeq	r1, r1, r0, lsl #17
   11730:	andeq	sp, r2, r0, asr #30
   11734:	andeq	r9, r2, r8, asr #30
   11738:			; <UNDEFINED> instruction: 0x000177bf
   1173c:	andeq	r1, r1, r4, lsr r4
   11740:	andeq	r7, r1, lr, ror #15
   11744:	andeq	lr, r2, r4, ror r1
   11748:	mov	fp, #0
   1174c:	mov	lr, #0
   11750:	pop	{r1}		; (ldr r1, [sp], #4)
   11754:	mov	r2, sp
   11758:	push	{r2}		; (str r2, [sp, #-4]!)
   1175c:	push	{r0}		; (str r0, [sp, #-4]!)
   11760:	ldr	ip, [pc, #16]	; 11778 <fputs@plt+0x11c>
   11764:	push	{ip}		; (str ip, [sp, #-4]!)
   11768:	ldr	r0, [pc, #12]	; 1177c <fputs@plt+0x120>
   1176c:	ldr	r3, [pc, #12]	; 11780 <fputs@plt+0x124>
   11770:	bl	112e4 <__libc_start_main@plt>
   11774:	bl	11290 <abort@plt>
   11778:	andeq	r7, r1, r8, ror #12
   1177c:	muleq	r1, r0, r6
   11780:	andeq	r7, r1, r8, lsl #12
   11784:	ldr	r3, [pc, #20]	; 117a0 <fputs@plt+0x144>
   11788:	ldr	r2, [pc, #20]	; 117a4 <fputs@plt+0x148>
   1178c:	add	r3, pc, r3
   11790:	ldr	r2, [r3, r2]
   11794:	cmp	r2, #0
   11798:	bxeq	lr
   1179c:	b	11314 <__gmon_start__@plt>
   117a0:	andeq	r7, r1, ip, ror #16
   117a4:	andeq	r0, r0, r0, ror #2
   117a8:	ldr	r3, [pc, #28]	; 117cc <fputs@plt+0x170>
   117ac:	ldr	r0, [pc, #28]	; 117d0 <fputs@plt+0x174>
   117b0:	sub	r3, r3, r0
   117b4:	cmp	r3, #6
   117b8:	bxls	lr
   117bc:	ldr	r3, [pc, #16]	; 117d4 <fputs@plt+0x178>
   117c0:	cmp	r3, #0
   117c4:	bxeq	lr
   117c8:	bx	r3
   117cc:	andeq	r9, r2, fp, asr #30
   117d0:	andeq	r9, r2, r8, asr #30
   117d4:	andeq	r0, r0, r0
   117d8:	ldr	r1, [pc, #36]	; 11804 <fputs@plt+0x1a8>
   117dc:	ldr	r0, [pc, #36]	; 11808 <fputs@plt+0x1ac>
   117e0:	sub	r1, r1, r0
   117e4:	asr	r1, r1, #2
   117e8:	add	r1, r1, r1, lsr #31
   117ec:	asrs	r1, r1, #1
   117f0:	bxeq	lr
   117f4:	ldr	r3, [pc, #16]	; 1180c <fputs@plt+0x1b0>
   117f8:	cmp	r3, #0
   117fc:	bxeq	lr
   11800:	bx	r3
   11804:	andeq	r9, r2, r8, asr #30
   11808:	andeq	r9, r2, r8, asr #30
   1180c:	andeq	r0, r0, r0
   11810:	push	{r4, lr}
   11814:	ldr	r4, [pc, #24]	; 11834 <fputs@plt+0x1d8>
   11818:	ldrb	r3, [r4]
   1181c:	cmp	r3, #0
   11820:	popne	{r4, pc}
   11824:	bl	117a8 <fputs@plt+0x14c>
   11828:	mov	r3, #1
   1182c:	strb	r3, [r4]
   11830:	pop	{r4, pc}
   11834:	andeq	r9, r2, ip, asr #30
   11838:	ldr	r0, [pc, #40]	; 11868 <fputs@plt+0x20c>
   1183c:	ldr	r3, [r0]
   11840:	cmp	r3, #0
   11844:	bne	1184c <fputs@plt+0x1f0>
   11848:	b	117d8 <fputs@plt+0x17c>
   1184c:	ldr	r3, [pc, #24]	; 1186c <fputs@plt+0x210>
   11850:	cmp	r3, #0
   11854:	beq	11848 <fputs@plt+0x1ec>
   11858:	push	{r4, lr}
   1185c:	blx	r3
   11860:	pop	{r4, lr}
   11864:	b	117d8 <fputs@plt+0x17c>
   11868:	andeq	r8, r2, ip, ror #29
   1186c:	andeq	r0, r0, r0
   11870:	bx	lr
   11874:	push	{r4, lr}
   11878:	mov	r0, #1
   1187c:	bl	11638 <exit@plt>
   11880:	push	{r4, r5, r6, r7, r8, lr}
   11884:	mov	r5, r0
   11888:	ldr	r4, [pc, #88]	; 118e8 <fputs@plt+0x28c>
   1188c:	ldr	r7, [pc, #88]	; 118ec <fputs@plt+0x290>
   11890:	add	r6, r4, #44	; 0x2c
   11894:	mov	r2, #16384	; 0x4000
   11898:	mov	r1, r6
   1189c:	mov	r0, r5
   118a0:	bl	1156c <rb_helper_read@plt>
   118a4:	cmp	r0, #0
   118a8:	bgt	118b0 <fputs@plt+0x254>
   118ac:	pop	{r4, r5, r6, r7, r8, pc}
   118b0:	mov	r2, #10
   118b4:	mov	r1, r4
   118b8:	ldr	r0, [pc, #48]	; 118f0 <fputs@plt+0x294>
   118bc:	bl	1141c <rb_string_to_array@plt>
   118c0:	cmp	r0, #0
   118c4:	ble	11894 <fputs@plt+0x238>
   118c8:	ldr	r3, [r4]
   118cc:	ldrb	r3, [r3]
   118d0:	ldr	r3, [r7, r3, lsl #2]
   118d4:	cmp	r3, #0
   118d8:	beq	11894 <fputs@plt+0x238>
   118dc:	mov	r1, r4
   118e0:	blx	r3
   118e4:	b	11894 <fputs@plt+0x238>
   118e8:	andeq	r9, r2, r0, asr pc
   118ec:	andeq	r9, r2, ip, ror #2
   118f0:	andeq	r9, r2, ip, ror pc
   118f4:	push	{r4, r5, r6, lr}
   118f8:	sub	sp, sp, #144	; 0x90
   118fc:	add	r4, sp, #144	; 0x90
   11900:	mov	r3, #1
   11904:	str	r3, [r4, #-140]!	; 0xffffff74
   11908:	add	r6, r4, #4
   1190c:	mov	r5, #0
   11910:	mov	r0, r6
   11914:	str	r5, [sp, #136]	; 0x88
   11918:	bl	1126c <sigemptyset@plt>
   1191c:	mov	r1, #13
   11920:	mov	r0, r6
   11924:	bl	114b8 <sigaddset@plt>
   11928:	mov	r1, #14
   1192c:	mov	r0, r6
   11930:	bl	114b8 <sigaddset@plt>
   11934:	mov	r1, #5
   11938:	mov	r0, r6
   1193c:	bl	114b8 <sigaddset@plt>
   11940:	mov	r1, #28
   11944:	mov	r0, r6
   11948:	bl	114b8 <sigaddset@plt>
   1194c:	mov	r2, r5
   11950:	mov	r1, r4
   11954:	mov	r0, #28
   11958:	bl	11560 <sigaction@plt>
   1195c:	mov	r2, r5
   11960:	mov	r1, r4
   11964:	mov	r0, #13
   11968:	bl	11560 <sigaction@plt>
   1196c:	mov	r2, r5
   11970:	mov	r1, r4
   11974:	mov	r0, #5
   11978:	bl	11560 <sigaction@plt>
   1197c:	ldr	r3, [pc, #24]	; 1199c <fputs@plt+0x340>
   11980:	mov	r2, r5
   11984:	mov	r1, r4
   11988:	mov	r0, #14
   1198c:	str	r3, [sp, #4]
   11990:	bl	11560 <sigaction@plt>
   11994:	add	sp, sp, #144	; 0x90
   11998:	pop	{r4, r5, r6, pc}
   1199c:	andeq	r1, r1, r0, ror r8
   119a0:	cmp	r0, #2
   119a4:	bgt	119dc <fputs@plt+0x380>
   119a8:	push	{r4, r5, r6, lr}
   119ac:	mov	r4, #0
   119b0:	ldr	r5, [pc, #68]	; 119fc <fputs@plt+0x3a0>
   119b4:	mov	r6, r4
   119b8:	ldr	r3, [r5, r4, lsl #2]
   119bc:	cmp	r3, #0
   119c0:	beq	119cc <fputs@plt+0x370>
   119c4:	mov	r0, r6
   119c8:	blx	r3
   119cc:	add	r4, r4, #1
   119d0:	cmp	r4, #256	; 0x100
   119d4:	bne	119b8 <fputs@plt+0x35c>
   119d8:	pop	{r4, r5, r6, pc}
   119dc:	ldr	r3, [r1, #4]
   119e0:	ldrb	r0, [r3]
   119e4:	ldr	r3, [pc, #20]	; 11a00 <fputs@plt+0x3a4>
   119e8:	add	r3, r3, r0, lsl #2
   119ec:	ldr	r3, [r3, #1024]	; 0x400
   119f0:	cmp	r3, #0
   119f4:	bxeq	lr
   119f8:	bx	r3
   119fc:	andeq	r9, r2, ip, ror #10
   11a00:	andeq	r9, r2, ip, ror #2
   11a04:	cmp	r0, #2
   11a08:	bgt	11a1c <fputs@plt+0x3c0>
   11a0c:	ldr	r1, [pc, #108]	; 11a80 <fputs@plt+0x424>
   11a10:	mov	r2, r0
   11a14:	mov	r0, #67	; 0x43
   11a18:	b	12120 <fputs@plt+0xac4>
   11a1c:	push	{r4, lr}
   11a20:	mov	r4, r1
   11a24:	mov	r2, #16
   11a28:	mov	r1, #0
   11a2c:	ldr	r0, [r4, #4]
   11a30:	bl	113f8 <strtoull@plt>
   11a34:	mov	r3, #0
   11a38:	mvn	r2, #0
   11a3c:	cmp	r1, r3
   11a40:	cmpeq	r0, r2
   11a44:	ldrhi	r2, [r4, #4]
   11a48:	ldrhi	r1, [pc, #52]	; 11a84 <fputs@plt+0x428>
   11a4c:	movhi	r0, #67	; 0x43
   11a50:	pophi	{r4, lr}
   11a54:	bhi	11a18 <fputs@plt+0x3bc>
   11a58:	ldr	r3, [r4, #8]
   11a5c:	ldrb	r2, [r3]
   11a60:	ldr	r3, [pc, #32]	; 11a88 <fputs@plt+0x42c>
   11a64:	add	r3, r3, r2, lsl #2
   11a68:	ldr	r3, [r3, #2048]	; 0x800
   11a6c:	cmp	r3, #0
   11a70:	popeq	{r4, pc}
   11a74:	mov	r1, r2
   11a78:	pop	{r4, lr}
   11a7c:	bx	r3
   11a80:	andeq	r7, r1, r8, ror r6
   11a84:	andeq	r7, r1, r3, asr #13
   11a88:	andeq	r9, r2, ip, ror #2
   11a8c:	cmp	r0, #1
   11a90:	mov	r2, r0
   11a94:	ldrle	r1, [pc, #120]	; 11b14 <fputs@plt+0x4b8>
   11a98:	movle	r0, #67	; 0x43
   11a9c:	ble	11ad4 <fputs@plt+0x478>
   11aa0:	ldr	r3, [pc, #112]	; 11b18 <fputs@plt+0x4bc>
   11aa4:	push	{r4, r5, r6, lr}
   11aa8:	mov	r5, r1
   11aac:	ldr	r0, [r3]
   11ab0:	ldr	r1, [r1, #4]
   11ab4:	mov	r4, r2
   11ab8:	bl	11518 <rb_dictionary_retrieve@plt>
   11abc:	cmp	r0, #0
   11ac0:	bne	11ad8 <fputs@plt+0x47c>
   11ac4:	ldr	r2, [r5, #4]
   11ac8:	pop	{r4, r5, r6, lr}
   11acc:	mov	r0, #67	; 0x43
   11ad0:	ldr	r1, [pc, #68]	; 11b1c <fputs@plt+0x4c0>
   11ad4:	b	12120 <fputs@plt+0xac4>
   11ad8:	ldr	r2, [r0, #4]
   11adc:	sub	r3, r4, #1
   11ae0:	cmp	r3, r2
   11ae4:	bgt	11afc <fputs@plt+0x4a0>
   11ae8:	mov	r3, r4
   11aec:	ldr	r1, [pc, #44]	; 11b20 <fputs@plt+0x4c4>
   11af0:	mov	r0, #67	; 0x43
   11af4:	pop	{r4, r5, r6, lr}
   11af8:	b	12120 <fputs@plt+0xac4>
   11afc:	ldr	r3, [r0, #8]
   11b00:	add	r2, r5, #8
   11b04:	sub	r1, r4, #2
   11b08:	ldr	r0, [r5, #4]
   11b0c:	pop	{r4, r5, r6, lr}
   11b10:	bx	r3
   11b14:	strdeq	r7, [r1], -r5
   11b18:	andeq	lr, r2, r4, ror r1
   11b1c:	andeq	r7, r1, r3, asr #14
   11b20:	andeq	r7, r1, r0, ror r7
   11b24:	cmp	r0, #0
   11b28:	bxeq	lr
   11b2c:	b	11410 <free@plt>
   11b30:	push	{r4, r5, lr}
   11b34:	sub	sp, sp, #60	; 0x3c
   11b38:	mov	r4, r0
   11b3c:	mov	r3, #42	; 0x2a
   11b40:	mov	r5, r1
   11b44:	mov	r2, #49	; 0x31
   11b48:	mov	r1, #0
   11b4c:	add	r0, sp, #4
   11b50:	str	r3, [sp]
   11b54:	bl	113b0 <memset@plt>
   11b58:	cmp	r4, #0
   11b5c:	bne	11b74 <fputs@plt+0x518>
   11b60:	ldr	r1, [pc, #216]	; 11c40 <fputs@plt+0x5e4>
   11b64:	mov	r0, #67	; 0x43
   11b68:	bl	12120 <fputs@plt+0xac4>
   11b6c:	mov	r0, #2
   11b70:	bl	11638 <exit@plt>
   11b74:	cmp	r5, #0
   11b78:	beq	11bbc <fputs@plt+0x560>
   11b7c:	ldr	r2, [r4, #8]
   11b80:	cmp	r2, #52	; 0x34
   11b84:	beq	11ba0 <fputs@plt+0x544>
   11b88:	cmp	r2, #54	; 0x36
   11b8c:	beq	11bf4 <fputs@plt+0x598>
   11b90:	ldr	r1, [pc, #172]	; 11c44 <fputs@plt+0x5e8>
   11b94:	mov	r0, #67	; 0x43
   11b98:	bl	12120 <fputs@plt+0xac4>
   11b9c:	b	11b6c <fputs@plt+0x510>
   11ba0:	ldrh	r3, [r5, #4]
   11ba4:	cmp	r3, #2
   11ba8:	bne	11bbc <fputs@plt+0x560>
   11bac:	mov	r2, #53	; 0x35
   11bb0:	mov	r1, sp
   11bb4:	add	r0, r5, #4
   11bb8:	bl	11578 <rb_inet_ntop_sock@plt>
   11bbc:	ldr	r5, [r4, #152]	; 0x98
   11bc0:	cmp	r5, #0
   11bc4:	beq	11be4 <fputs@plt+0x588>
   11bc8:	add	r0, sp, #56	; 0x38
   11bcc:	ldr	r3, [r4, #156]	; 0x9c
   11bd0:	ldrb	r1, [r0, #-56]!	; 0xffffffc8
   11bd4:	ldr	r2, [r4, #8]
   11bd8:	subs	r1, r1, #42	; 0x2a
   11bdc:	movne	r1, #1
   11be0:	blx	r5
   11be4:	mov	r0, r4
   11be8:	bl	11b24 <fputs@plt+0x4c8>
   11bec:	add	sp, sp, #60	; 0x3c
   11bf0:	pop	{r4, r5, pc}
   11bf4:	ldrh	r3, [r5, #4]
   11bf8:	cmp	r3, #10
   11bfc:	bne	11bbc <fputs@plt+0x560>
   11c00:	mov	r2, #53	; 0x35
   11c04:	mov	r1, sp
   11c08:	add	r0, r5, #4
   11c0c:	bl	11578 <rb_inet_ntop_sock@plt>
   11c10:	ldrb	r3, [sp]
   11c14:	cmp	r3, #58	; 0x3a
   11c18:	bne	11bbc <fputs@plt+0x560>
   11c1c:	mov	r0, sp
   11c20:	bl	11464 <strlen@plt>
   11c24:	mov	r1, sp
   11c28:	mov	r2, r0
   11c2c:	add	r0, sp, #1
   11c30:	bl	1159c <memmove@plt>
   11c34:	mov	r3, #48	; 0x30
   11c38:	strb	r3, [sp]
   11c3c:	b	11bbc <fputs@plt+0x560>
   11c40:	andeq	r7, r1, r5, lsl #16
   11c44:	andeq	r7, r1, r1, lsr r8
   11c48:	push	{r4, r5, r6, lr}
   11c4c:	subs	r5, r0, #0
   11c50:	bne	11c68 <fputs@plt+0x60c>
   11c54:	ldr	r1, [pc, #152]	; 11cf4 <fputs@plt+0x698>
   11c58:	mov	r0, #67	; 0x43
   11c5c:	bl	12120 <fputs@plt+0xac4>
   11c60:	mov	r0, #2
   11c64:	bl	11638 <exit@plt>
   11c68:	cmp	r1, #0
   11c6c:	mov	r4, r1
   11c70:	beq	11c94 <fputs@plt+0x638>
   11c74:	ldr	r2, [r5, #8]
   11c78:	cmp	r2, #82	; 0x52
   11c7c:	bne	11cc4 <fputs@plt+0x668>
   11c80:	ldr	r2, [r5, #16]
   11c84:	ldr	r3, [r1, #8]
   11c88:	cmp	r2, r3
   11c8c:	ldreq	r0, [r4]
   11c90:	beq	11c98 <fputs@plt+0x63c>
   11c94:	mov	r0, #0
   11c98:	ldr	r4, [r5, #152]	; 0x98
   11c9c:	cmp	r4, #0
   11ca0:	beq	11cb8 <fputs@plt+0x65c>
   11ca4:	adds	r1, r0, #0
   11ca8:	ldr	r3, [r5, #156]	; 0x9c
   11cac:	ldr	r2, [r5, #8]
   11cb0:	movne	r1, #1
   11cb4:	blx	r4
   11cb8:	mov	r0, r5
   11cbc:	pop	{r4, r5, r6, lr}
   11cc0:	b	11b24 <fputs@plt+0x4c8>
   11cc4:	cmp	r2, #83	; 0x53
   11cc8:	bne	11ce4 <fputs@plt+0x688>
   11ccc:	mov	r2, #16
   11cd0:	add	r1, r1, #12
   11cd4:	add	r0, r5, #20
   11cd8:	bl	112d8 <memcmp@plt>
   11cdc:	cmp	r0, #0
   11ce0:	b	11c8c <fputs@plt+0x630>
   11ce4:	ldr	r1, [pc, #12]	; 11cf8 <fputs@plt+0x69c>
   11ce8:	mov	r0, #67	; 0x43
   11cec:	bl	12120 <fputs@plt+0xac4>
   11cf0:	b	11c60 <fputs@plt+0x604>
   11cf4:	andeq	r7, r1, r4, ror #16
   11cf8:	muleq	r1, r6, r8
   11cfc:	cmp	r2, #0
   11d00:	cmpne	r3, #0
   11d04:	push	{r0, r1, r4, lr}
   11d08:	mov	r4, r3
   11d0c:	bne	11d24 <fputs@plt+0x6c8>
   11d10:	mov	r0, #67	; 0x43
   11d14:	ldr	r1, [pc, #92]	; 11d78 <fputs@plt+0x71c>
   11d18:	bl	12120 <fputs@plt+0xac4>
   11d1c:	mov	r0, #2
   11d20:	bl	11638 <exit@plt>
   11d24:	eor	r1, r1, #1
   11d28:	cmp	r0, #0
   11d2c:	orreq	r1, r1, #1
   11d30:	cmp	r1, #0
   11d34:	mov	r3, r2
   11d38:	ldr	ip, [pc, #60]	; 11d7c <fputs@plt+0x720>
   11d3c:	beq	11d60 <fputs@plt+0x704>
   11d40:	mov	r2, r4
   11d44:	ldr	r1, [pc, #52]	; 11d80 <fputs@plt+0x724>
   11d48:	ldr	r0, [ip]
   11d4c:	bl	115b4 <rb_helper_write@plt>
   11d50:	mov	r0, r4
   11d54:	add	sp, sp, #8
   11d58:	pop	{r4, lr}
   11d5c:	b	11b24 <fputs@plt+0x4c8>
   11d60:	str	r0, [sp]
   11d64:	mov	r2, r4
   11d68:	ldr	r1, [pc, #20]	; 11d84 <fputs@plt+0x728>
   11d6c:	ldr	r0, [ip]
   11d70:	bl	115b4 <rb_helper_write@plt>
   11d74:	b	11d50 <fputs@plt+0x6f4>
   11d78:	andeq	r7, r1, pc, asr #17
   11d7c:	andeq	sp, r2, ip, ror pc
   11d80:	strdeq	r7, [r1], -sl
   11d84:	andeq	r7, r1, r6, lsl #18
   11d88:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11d8c:	mov	r5, r0
   11d90:	mov	r6, r1
   11d94:	mov	r0, #1
   11d98:	mov	r1, #160	; 0xa0
   11d9c:	mov	r8, r2
   11da0:	mov	r9, r3
   11da4:	bl	11380 <calloc@plt>
   11da8:	subs	r4, r0, #0
   11dac:	bne	11db4 <fputs@plt+0x758>
   11db0:	bl	11524 <rb_outofmemory@plt>
   11db4:	cmp	r6, #2
   11db8:	moveq	r3, #52	; 0x34
   11dbc:	streq	r3, [r4, #8]
   11dc0:	moveq	r2, #1
   11dc4:	beq	11de8 <fputs@plt+0x78c>
   11dc8:	cmp	r6, #10
   11dcc:	moveq	r3, #54	; 0x36
   11dd0:	streq	r3, [r4, #8]
   11dd4:	moveq	r2, #28
   11dd8:	beq	11de8 <fputs@plt+0x78c>
   11ddc:	bl	11b24 <fputs@plt+0x4c8>
   11de0:	mov	r0, #0
   11de4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11de8:	ldr	ip, [pc, #56]	; 11e28 <fputs@plt+0x7cc>
   11dec:	ldr	r3, [pc, #56]	; 11e2c <fputs@plt+0x7d0>
   11df0:	str	r8, [r4, #152]	; 0x98
   11df4:	ldrd	r0, [ip]
   11df8:	str	r9, [r4, #156]	; 0x9c
   11dfc:	str	r4, [r4]
   11e00:	adds	r6, r0, #1
   11e04:	adc	r7, r1, #0
   11e08:	strd	r0, [r4, #144]	; 0x90
   11e0c:	str	r3, [r4, #4]
   11e10:	mov	r0, r5
   11e14:	mov	r1, r4
   11e18:	strd	r6, [ip]
   11e1c:	bl	130dc <fputs@plt+0x1a80>
   11e20:	mov	r0, r4
   11e24:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11e28:	andeq	sp, r2, r0, lsl #31
   11e2c:	andeq	r1, r1, r0, lsr fp
   11e30:	push	{r4, r5, r6, r7, r8, lr}
   11e34:	mov	r8, r0
   11e38:	mov	r7, r1
   11e3c:	mov	r0, #1
   11e40:	mov	r1, #160	; 0xa0
   11e44:	mov	r6, r2
   11e48:	bl	11380 <calloc@plt>
   11e4c:	subs	r4, r0, #0
   11e50:	bne	11e58 <fputs@plt+0x7fc>
   11e54:	bl	11524 <rb_outofmemory@plt>
   11e58:	add	r5, r4, #12
   11e5c:	mov	r0, r8
   11e60:	mov	r1, r5
   11e64:	bl	11458 <rb_inet_pton_sock@plt>
   11e68:	subs	r8, r0, #0
   11e6c:	bne	11e80 <fputs@plt+0x824>
   11e70:	mov	r0, r4
   11e74:	bl	11b24 <fputs@plt+0x4c8>
   11e78:	mov	r0, #0
   11e7c:	pop	{r4, r5, r6, r7, r8, pc}
   11e80:	ldrh	r3, [r4, #12]
   11e84:	cmp	r3, #2
   11e88:	moveq	r3, #82	; 0x52
   11e8c:	beq	11e9c <fputs@plt+0x840>
   11e90:	cmp	r3, #10
   11e94:	bne	11e70 <fputs@plt+0x814>
   11e98:	mov	r3, #83	; 0x53
   11e9c:	ldr	ip, [pc, #60]	; 11ee0 <fputs@plt+0x884>
   11ea0:	str	r3, [r4, #8]
   11ea4:	str	r7, [r4, #152]	; 0x98
   11ea8:	ldrd	r2, [ip]
   11eac:	str	r6, [r4, #156]	; 0x9c
   11eb0:	str	r4, [r4]
   11eb4:	adds	r0, r2, #1
   11eb8:	adc	r1, r3, #0
   11ebc:	strd	r2, [r4, #144]	; 0x90
   11ec0:	ldr	r3, [pc, #28]	; 11ee4 <fputs@plt+0x888>
   11ec4:	strd	r0, [ip]
   11ec8:	str	r3, [r4, #4]
   11ecc:	mov	r0, r5
   11ed0:	mov	r1, r4
   11ed4:	bl	139c8 <fputs@plt+0x236c>
   11ed8:	mov	r0, r4
   11edc:	pop	{r4, r5, r6, r7, r8, pc}
   11ee0:	andeq	sp, r2, r0, lsl #31
   11ee4:	andeq	r1, r1, r8, asr #24
   11ee8:	mov	r3, #0
   11eec:	str	r3, [r0, #156]	; 0x9c
   11ef0:	str	r3, [r0, #152]	; 0x98
   11ef4:	bx	lr
   11ef8:	push	{r4, r5, r6, lr}
   11efc:	mov	r5, r1
   11f00:	ldr	r4, [r1, #4]
   11f04:	mov	r0, r4
   11f08:	bl	11464 <strlen@plt>
   11f0c:	add	r0, r0, #1
   11f10:	bl	11554 <malloc@plt>
   11f14:	subs	r6, r0, #0
   11f18:	bne	11f20 <fputs@plt+0x8c4>
   11f1c:	bl	11524 <rb_outofmemory@plt>
   11f20:	mov	r1, r4
   11f24:	bl	114c4 <strcpy@plt>
   11f28:	ldr	r3, [r5, #8]
   11f2c:	ldr	r0, [r5, #12]
   11f30:	ldrb	r4, [r3]
   11f34:	cmp	r4, #54	; 0x36
   11f38:	beq	11f80 <fputs@plt+0x924>
   11f3c:	bhi	11f64 <fputs@plt+0x908>
   11f40:	cmp	r4, #52	; 0x34
   11f44:	moveq	r1, #2
   11f48:	beq	11f84 <fputs@plt+0x928>
   11f4c:	mov	r0, #67	; 0x43
   11f50:	mov	r2, r4
   11f54:	ldr	r1, [pc, #76]	; 11fa8 <fputs@plt+0x94c>
   11f58:	bl	12120 <fputs@plt+0xac4>
   11f5c:	mov	r0, #2
   11f60:	bl	11638 <exit@plt>
   11f64:	sub	r3, r4, #82	; 0x52
   11f68:	cmp	r3, #1
   11f6c:	bhi	11f4c <fputs@plt+0x8f0>
   11f70:	mov	r2, r6
   11f74:	ldr	r1, [pc, #48]	; 11fac <fputs@plt+0x950>
   11f78:	bl	11e30 <fputs@plt+0x7d4>
   11f7c:	b	11f90 <fputs@plt+0x934>
   11f80:	mov	r1, #10
   11f84:	mov	r3, r6
   11f88:	ldr	r2, [pc, #28]	; 11fac <fputs@plt+0x950>
   11f8c:	bl	11d88 <fputs@plt+0x72c>
   11f90:	subs	r3, r0, #0
   11f94:	popne	{r4, r5, r6, pc}
   11f98:	mov	r2, r4
   11f9c:	mov	r1, r3
   11fa0:	pop	{r4, r5, r6, lr}
   11fa4:	b	11cfc <fputs@plt+0x6a0>
   11fa8:	andeq	r7, r1, r3, lsl r9
   11fac:	strdeq	r1, [r1], -ip
   11fb0:	ldr	r3, [pc, #236]	; 120a4 <fputs@plt+0xa48>
   11fb4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11fb8:	mov	r7, r0
   11fbc:	ldr	r2, [r3]
   11fc0:	sub	sp, sp, #600	; 0x258
   11fc4:	cmp	r2, #0
   11fc8:	mov	r8, r1
   11fcc:	beq	1201c <fputs@plt+0x9c0>
   11fd0:	mov	r5, #0
   11fd4:	ldr	sl, [pc, #204]	; 120a8 <fputs@plt+0xa4c>
   11fd8:	mov	r9, r3
   11fdc:	mov	r4, r5
   11fe0:	ldr	r3, [r9]
   11fe4:	cmp	r5, r3
   11fe8:	blt	12040 <fputs@plt+0x9e4>
   11fec:	cmp	r4, #0
   11ff0:	addne	r3, sp, #600	; 0x258
   11ff4:	addne	r4, r3, r4
   11ff8:	movne	r3, #0
   11ffc:	strbne	r3, [r4, #-541]	; 0xfffffde3
   12000:	ldr	r2, [pc, #164]	; 120ac <fputs@plt+0xa50>
   12004:	add	r3, sp, #60	; 0x3c
   12008:	mov	r1, r8
   1200c:	mov	r0, r7
   12010:	bl	12178 <fputs@plt+0xb1c>
   12014:	add	sp, sp, #600	; 0x258
   12018:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1201c:	ldr	r1, [pc, #140]	; 120b0 <fputs@plt+0xa54>
   12020:	mov	r0, #67	; 0x43
   12024:	bl	12120 <fputs@plt+0xac4>
   12028:	ldr	r2, [pc, #132]	; 120b4 <fputs@plt+0xa58>
   1202c:	mov	r0, r7
   12030:	mov	r1, r8
   12034:	bl	121dc <fputs@plt+0xb80>
   12038:	mov	r0, #2
   1203c:	bl	11638 <exit@plt>
   12040:	mov	r2, #53	; 0x35
   12044:	add	r1, sp, #4
   12048:	add	r0, sl, r5, lsl #7
   1204c:	bl	11578 <rb_inet_ntop_sock@plt>
   12050:	ldrb	r3, [sp, #4]
   12054:	cmp	r3, #0
   12058:	bne	12070 <fputs@plt+0xa14>
   1205c:	ldr	r1, [pc, #84]	; 120b8 <fputs@plt+0xa5c>
   12060:	mov	r0, #67	; 0x43
   12064:	bl	12120 <fputs@plt+0xac4>
   12068:	ldr	r2, [pc, #76]	; 120bc <fputs@plt+0xa60>
   1206c:	b	1202c <fputs@plt+0x9d0>
   12070:	add	r0, sp, #4
   12074:	bl	11464 <strlen@plt>
   12078:	rsb	r1, r4, #540	; 0x21c
   1207c:	add	r3, sp, #4
   12080:	ldr	r2, [pc, #56]	; 120c0 <fputs@plt+0xa64>
   12084:	add	r5, r5, #1
   12088:	mov	r6, r0
   1208c:	add	r0, sp, #60	; 0x3c
   12090:	add	r0, r0, r4
   12094:	add	r6, r6, #1
   12098:	bl	115e4 <snprintf@plt>
   1209c:	add	r4, r4, r6
   120a0:	b	11fe0 <fputs@plt+0x984>
   120a4:	ldrdeq	sp, [r2], -ip
   120a8:	muleq	r2, ip, r2
   120ac:	andeq	r8, r1, r7, ror r4
   120b0:	andeq	r7, r1, r4, asr #18
   120b4:	andeq	r7, r1, sl, asr r9
   120b8:	andeq	r7, r1, r8, ror #18
   120bc:	andeq	r7, r1, sp, ror r9
   120c0:	andeq	r7, r1, pc, lsl #19
   120c4:	b	130b0 <fputs@plt+0x1a54>
   120c8:	push	{r1, r2, r3}
   120cc:	mov	r1, #512	; 0x200
   120d0:	push	{r4, lr}
   120d4:	sub	sp, sp, #524	; 0x20c
   120d8:	add	r3, sp, #536	; 0x218
   120dc:	mov	r4, r0
   120e0:	ldr	r2, [sp, #532]	; 0x214
   120e4:	add	r0, sp, #8
   120e8:	str	r3, [sp, #4]
   120ec:	bl	11320 <vsnprintf@plt>
   120f0:	ldr	r0, [pc, #32]	; 12118 <fputs@plt+0xabc>
   120f4:	add	r3, sp, #8
   120f8:	mov	r2, r4
   120fc:	ldr	r1, [pc, #24]	; 1211c <fputs@plt+0xac0>
   12100:	ldr	r0, [r0]
   12104:	bl	115b4 <rb_helper_write@plt>
   12108:	add	sp, sp, #524	; 0x20c
   1210c:	pop	{r4, lr}
   12110:	add	sp, sp, #12
   12114:	bx	lr
   12118:	andeq	sp, r2, ip, ror pc
   1211c:	muleq	r1, r3, r9
   12120:	push	{r1, r2, r3}
   12124:	mov	r1, #512	; 0x200
   12128:	push	{r4, lr}
   1212c:	sub	sp, sp, #524	; 0x20c
   12130:	add	r3, sp, #536	; 0x218
   12134:	mov	r4, r0
   12138:	ldr	r2, [sp, #532]	; 0x214
   1213c:	add	r0, sp, #8
   12140:	str	r3, [sp, #4]
   12144:	bl	11320 <vsnprintf@plt>
   12148:	ldr	r0, [pc, #32]	; 12170 <fputs@plt+0xb14>
   1214c:	add	r3, sp, #8
   12150:	mov	r2, r4
   12154:	ldr	r1, [pc, #24]	; 12174 <fputs@plt+0xb18>
   12158:	ldr	r0, [r0]
   1215c:	bl	115b4 <rb_helper_write@plt>
   12160:	add	sp, sp, #524	; 0x20c
   12164:	pop	{r4, lr}
   12168:	add	sp, sp, #12
   1216c:	bx	lr
   12170:	andeq	sp, r2, ip, ror pc
   12174:	muleq	r1, ip, r9
   12178:	push	{r2, r3}
   1217c:	push	{r4, r5, r6, lr}
   12180:	sub	sp, sp, #528	; 0x210
   12184:	add	r4, sp, #16
   12188:	add	r3, sp, #548	; 0x224
   1218c:	mov	r5, r0
   12190:	mov	r6, r1
   12194:	ldr	r2, [sp, #544]	; 0x220
   12198:	mov	r1, #512	; 0x200
   1219c:	mov	r0, r4
   121a0:	str	r3, [sp, #12]
   121a4:	bl	11320 <vsnprintf@plt>
   121a8:	ldr	r0, [pc, #36]	; 121d4 <fputs@plt+0xb78>
   121ac:	str	r4, [sp]
   121b0:	mov	r3, r6
   121b4:	mov	r2, r5
   121b8:	ldr	r1, [pc, #24]	; 121d8 <fputs@plt+0xb7c>
   121bc:	ldr	r0, [r0]
   121c0:	bl	115b4 <rb_helper_write@plt>
   121c4:	add	sp, sp, #528	; 0x210
   121c8:	pop	{r4, r5, r6, lr}
   121cc:	add	sp, sp, #8
   121d0:	bx	lr
   121d4:	andeq	sp, r2, ip, ror pc
   121d8:	andeq	r7, r1, r5, lsr #19
   121dc:	push	{r2, r3}
   121e0:	push	{r4, r5, r6, lr}
   121e4:	sub	sp, sp, #528	; 0x210
   121e8:	add	r4, sp, #16
   121ec:	add	r3, sp, #548	; 0x224
   121f0:	mov	r5, r0
   121f4:	mov	r6, r1
   121f8:	ldr	r2, [sp, #544]	; 0x220
   121fc:	mov	r1, #512	; 0x200
   12200:	mov	r0, r4
   12204:	str	r3, [sp, #12]
   12208:	bl	11320 <vsnprintf@plt>
   1220c:	ldr	r0, [pc, #36]	; 12238 <fputs@plt+0xbdc>
   12210:	str	r4, [sp]
   12214:	mov	r3, r6
   12218:	mov	r2, r5
   1221c:	ldr	r1, [pc, #24]	; 1223c <fputs@plt+0xbe0>
   12220:	ldr	r0, [r0]
   12224:	bl	115b4 <rb_helper_write@plt>
   12228:	add	sp, sp, #528	; 0x210
   1222c:	pop	{r4, r5, r6, lr}
   12230:	add	sp, sp, #8
   12234:	bx	lr
   12238:	andeq	sp, r2, ip, ror pc
   1223c:			; <UNDEFINED> instruction: 0x000179b0
   12240:	mov	r2, r0
   12244:	ldr	r0, [pc, #12]	; 12258 <fputs@plt+0xbfc>
   12248:	mov	r3, r1
   1224c:	ldr	r1, [pc, #8]	; 1225c <fputs@plt+0xc00>
   12250:	ldr	r0, [r0]
   12254:	b	115b4 <rb_helper_write@plt>
   12258:	andeq	sp, r2, ip, ror pc
   1225c:			; <UNDEFINED> instruction: 0x000179bb
   12260:	sub	r0, r1, r0
   12264:	bx	lr
   12268:	cmp	r0, #0
   1226c:	push	{r4, lr}
   12270:	bne	12288 <fputs@plt+0xc2c>
   12274:	ldr	r3, [pc, #100]	; 122e0 <fputs@plt+0xc84>
   12278:	ldr	r1, [pc, #100]	; 122e4 <fputs@plt+0xc88>
   1227c:	ldr	r0, [pc, #100]	; 122e8 <fputs@plt+0xc8c>
   12280:	mov	r2, #235	; 0xeb
   12284:	bl	113e0 <__assert_fail@plt>
   12288:	cmp	r1, #0
   1228c:	ldreq	r3, [pc, #76]	; 122e0 <fputs@plt+0xc84>
   12290:	moveq	r2, #236	; 0xec
   12294:	ldreq	r1, [pc, #72]	; 122e4 <fputs@plt+0xc88>
   12298:	ldreq	r0, [pc, #76]	; 122ec <fputs@plt+0xc90>
   1229c:	beq	12284 <fputs@plt+0xc28>
   122a0:	ldr	r3, [r0, #8]
   122a4:	ldr	r2, [r0, #4]
   122a8:	cmp	r3, #0
   122ac:	strne	r2, [r3, #4]
   122b0:	streq	r2, [r1, #4]
   122b4:	ldr	r2, [r0, #4]
   122b8:	cmp	r2, #0
   122bc:	strne	r3, [r2, #8]
   122c0:	streq	r3, [r1]
   122c4:	mov	r3, #0
   122c8:	str	r3, [r0, #4]
   122cc:	str	r3, [r0, #8]
   122d0:	ldr	r3, [r1, #8]
   122d4:	sub	r3, r3, #1
   122d8:	str	r3, [r1, #8]
   122dc:	pop	{r4, pc}
   122e0:	andeq	r7, r1, r3, asr #19
   122e4:	ldrdeq	r7, [r1], -lr
   122e8:	strdeq	r7, [r1], -sl
   122ec:	andeq	r7, r1, r4, lsl #20
   122f0:	cmp	r0, #0
   122f4:	push	{r4, lr}
   122f8:	bne	12310 <fputs@plt+0xcb4>
   122fc:	ldr	r3, [pc, #124]	; 12380 <fputs@plt+0xd24>
   12300:	ldr	r1, [pc, #124]	; 12384 <fputs@plt+0xd28>
   12304:	ldr	r0, [pc, #124]	; 12388 <fputs@plt+0xd2c>
   12308:	mov	r2, #143	; 0x8f
   1230c:	bl	113e0 <__assert_fail@plt>
   12310:	cmp	r1, #0
   12314:	ldreq	r3, [pc, #100]	; 12380 <fputs@plt+0xd24>
   12318:	moveq	r2, #144	; 0x90
   1231c:	ldreq	r1, [pc, #96]	; 12384 <fputs@plt+0xd28>
   12320:	ldreq	r0, [pc, #100]	; 1238c <fputs@plt+0xd30>
   12324:	beq	1230c <fputs@plt+0xcb0>
   12328:	cmp	r2, #0
   1232c:	ldreq	r3, [pc, #76]	; 12380 <fputs@plt+0xd24>
   12330:	moveq	r2, #145	; 0x91
   12334:	ldreq	r1, [pc, #72]	; 12384 <fputs@plt+0xd28>
   12338:	ldreq	r0, [pc, #80]	; 12390 <fputs@plt+0xd34>
   1233c:	beq	1230c <fputs@plt+0xcb0>
   12340:	mov	r3, #0
   12344:	str	r3, [r1, #4]
   12348:	ldr	r3, [r2]
   1234c:	str	r0, [r1]
   12350:	cmp	r3, #0
   12354:	str	r3, [r1, #8]
   12358:	strne	r1, [r3, #4]
   1235c:	bne	1236c <fputs@plt+0xd10>
   12360:	ldr	r3, [r2, #4]
   12364:	cmp	r3, #0
   12368:	streq	r1, [r2, #4]
   1236c:	ldr	r3, [r2, #8]
   12370:	str	r1, [r2]
   12374:	add	r3, r3, #1
   12378:	str	r3, [r2, #8]
   1237c:	pop	{r4, pc}
   12380:	ldrdeq	r7, [r1], -r2
   12384:	ldrdeq	r7, [r1], -lr
   12388:	andeq	r7, r1, r1, lsl sl
   1238c:	strdeq	r7, [r1], -sl
   12390:	andeq	r7, r1, r4, lsl #20
   12394:	push	{r4, r5, r6, lr}
   12398:	mov	r4, r0
   1239c:	ldr	r5, [pc, #192]	; 12464 <fputs@plt+0xe08>
   123a0:	ldr	r3, [r5, #8]
   123a4:	cmp	r3, #0
   123a8:	beq	12408 <fputs@plt+0xdac>
   123ac:	ldr	r0, [r5]
   123b0:	mov	r1, r5
   123b4:	ldr	r3, [r0]
   123b8:	str	r3, [r4, #12]
   123bc:	bl	12268 <fputs@plt+0xc0c>
   123c0:	ldr	r0, [r5]
   123c4:	bl	11494 <rb_free_rb_dlink_node@plt>
   123c8:	ldr	r5, [r4, #56]	; 0x38
   123cc:	cmp	r5, #0
   123d0:	ldrne	r6, [pc, #144]	; 12468 <fputs@plt+0xe0c>
   123d4:	bne	12444 <fputs@plt+0xde8>
   123d8:	ldrb	r3, [r4, #48]	; 0x30
   123dc:	cmp	r3, #0
   123e0:	bne	12454 <fputs@plt+0xdf8>
   123e4:	ldr	r3, [r4, #24]
   123e8:	cmp	r3, #0
   123ec:	beq	123f4 <fputs@plt+0xd98>
   123f0:	blx	r3
   123f4:	mov	r1, r4
   123f8:	mov	r0, r4
   123fc:	ldr	r2, [pc, #104]	; 1246c <fputs@plt+0xe10>
   12400:	pop	{r4, r5, r6, lr}
   12404:	b	122f0 <fputs@plt+0xc94>
   12408:	ldr	r3, [r5, #12]
   1240c:	cmn	r3, #1
   12410:	cmpne	r3, #32
   12414:	addne	r2, r3, #1
   12418:	strne	r2, [r5, #12]
   1241c:	strne	r3, [r0, #12]
   12420:	bne	123c8 <fputs@plt+0xd6c>
   12424:	ldr	r1, [pc, #68]	; 12470 <fputs@plt+0xe14>
   12428:	mov	r0, #87	; 0x57
   1242c:	pop	{r4, r5, r6, lr}
   12430:	b	12120 <fputs@plt+0xac4>
   12434:	mov	r2, r5
   12438:	ldr	r0, [r6]
   1243c:	bl	1153c <rb_dictionary_add@plt>
   12440:	add	r5, r5, #12
   12444:	ldr	r1, [r5]
   12448:	cmp	r1, #0
   1244c:	bne	12434 <fputs@plt+0xdd8>
   12450:	b	123d8 <fputs@plt+0xd7c>
   12454:	ldr	r2, [pc, #24]	; 12474 <fputs@plt+0xe18>
   12458:	ldr	r1, [r4, #52]	; 0x34
   1245c:	str	r1, [r2, r3, lsl #2]
   12460:	b	123e4 <fputs@plt+0xd88>
   12464:	andeq	sp, r2, r8, lsl #31
   12468:	andeq	lr, r2, r4, ror r1
   1246c:	andeq	lr, r2, ip, ror r1
   12470:	andeq	r7, r1, lr, lsl sl
   12474:	andeq	r9, r2, ip, ror #18
   12478:	push	{r4, lr}
   1247c:	ldr	r1, [pc, #76]	; 124d0 <fputs@plt+0xe74>
   12480:	ldr	r0, [pc, #76]	; 124d4 <fputs@plt+0xe78>
   12484:	bl	11590 <rb_dictionary_create@plt>
   12488:	ldr	r3, [pc, #72]	; 124d8 <fputs@plt+0xe7c>
   1248c:	mov	r2, #0
   12490:	ldr	r1, [pc, #68]	; 124dc <fputs@plt+0xe80>
   12494:	str	r0, [r3]
   12498:	mov	r3, #1
   1249c:	ldr	r0, [pc, #60]	; 124e0 <fputs@plt+0xe84>
   124a0:	bl	1129c <rb_event_addish@plt>
   124a4:	ldr	r3, [pc, #56]	; 124e4 <fputs@plt+0xe88>
   124a8:	str	r0, [r3, #16]
   124ac:	ldr	r0, [pc, #52]	; 124e8 <fputs@plt+0xe8c>
   124b0:	bl	12394 <fputs@plt+0xd38>
   124b4:	ldr	r0, [pc, #48]	; 124ec <fputs@plt+0xe90>
   124b8:	bl	12394 <fputs@plt+0xd38>
   124bc:	ldr	r0, [pc, #44]	; 124f0 <fputs@plt+0xe94>
   124c0:	bl	12394 <fputs@plt+0xd38>
   124c4:	ldr	r0, [pc, #40]	; 124f4 <fputs@plt+0xe98>
   124c8:	pop	{r4, lr}
   124cc:	b	12394 <fputs@plt+0xd38>
   124d0:	andeq	r2, r1, r0, ror #4
   124d4:	andeq	r7, r1, ip, asr #20
   124d8:	andeq	lr, r2, r8, ror r1
   124dc:	andeq	r2, r1, r4, ror #11
   124e0:	andeq	r7, r1, r1, ror #20
   124e4:	andeq	sp, r2, r8, lsl #31
   124e8:	andeq	r9, r2, r0, ror sp
   124ec:	andeq	r9, r2, r8, lsr #29
   124f0:	andeq	r9, r2, r4, asr lr
   124f4:	strdeq	r9, [r2], -r0
   124f8:	push	{r4, r5, r6, lr}
   124fc:	mov	r5, r0
   12500:	ldr	r4, [r0, #56]	; 0x38
   12504:	cmp	r4, #0
   12508:	addne	r4, r4, #12
   1250c:	ldrne	r6, [pc, #112]	; 12584 <fputs@plt+0xf28>
   12510:	bne	12560 <fputs@plt+0xf04>
   12514:	ldrb	r3, [r5, #48]	; 0x30
   12518:	cmp	r3, #0
   1251c:	bne	12574 <fputs@plt+0xf18>
   12520:	ldr	r3, [r5, #28]
   12524:	cmp	r3, #0
   12528:	beq	12530 <fputs@plt+0xed4>
   1252c:	blx	r3
   12530:	ldr	r1, [pc, #80]	; 12588 <fputs@plt+0xf2c>
   12534:	mov	r0, r5
   12538:	bl	12268 <fputs@plt+0xc0c>
   1253c:	ldr	r4, [r5, #12]
   12540:	bl	115d8 <rb_make_rb_dlink_node@plt>
   12544:	ldr	r2, [pc, #64]	; 1258c <fputs@plt+0xf30>
   12548:	mov	r1, r0
   1254c:	mov	r0, r4
   12550:	pop	{r4, r5, r6, lr}
   12554:	b	122f0 <fputs@plt+0xc94>
   12558:	ldr	r0, [r6]
   1255c:	bl	1147c <rb_dictionary_delete@plt>
   12560:	add	r4, r4, #12
   12564:	ldr	r1, [r4, #-24]	; 0xffffffe8
   12568:	cmp	r1, #0
   1256c:	bne	12558 <fputs@plt+0xefc>
   12570:	b	12514 <fputs@plt+0xeb8>
   12574:	ldr	r2, [pc, #20]	; 12590 <fputs@plt+0xf34>
   12578:	mov	r1, #0
   1257c:	str	r1, [r2, r3, lsl #2]
   12580:	b	12520 <fputs@plt+0xec4>
   12584:	andeq	lr, r2, r4, ror r1
   12588:	andeq	lr, r2, ip, ror r1
   1258c:	andeq	sp, r2, r8, lsl #31
   12590:	andeq	r9, r2, ip, ror #18
   12594:	ldr	r3, [pc, #44]	; 125c8 <fputs@plt+0xf6c>
   12598:	push	{r4, lr}
   1259c:	mov	r4, r0
   125a0:	ldr	r1, [r0]
   125a4:	ldr	r0, [r3]
   125a8:	bl	1147c <rb_dictionary_delete@plt>
   125ac:	ldr	r0, [r4, #464]	; 0x1d0
   125b0:	cmp	r0, #0
   125b4:	beq	125bc <fputs@plt+0xf60>
   125b8:	bl	11410 <free@plt>
   125bc:	mov	r0, r4
   125c0:	pop	{r4, lr}
   125c4:	b	11410 <free@plt>
   125c8:	andeq	lr, r2, r8, ror r1
   125cc:	ldr	r3, [r0, #460]	; 0x1cc
   125d0:	sub	r3, r3, #1
   125d4:	cmp	r3, #0
   125d8:	str	r3, [r0, #460]	; 0x1cc
   125dc:	bxne	lr
   125e0:	b	12594 <fputs@plt+0xf38>
   125e4:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   125e8:	bl	11470 <rb_current_time@plt>
   125ec:	ldr	r5, [pc, #164]	; 12698 <fputs@plt+0x103c>
   125f0:	mov	r1, sp
   125f4:	ldr	r8, [pc, #160]	; 1269c <fputs@plt+0x1040>
   125f8:	mov	r7, r0
   125fc:	ldr	r0, [r5]
   12600:	bl	1144c <rb_dictionary_foreach_start@plt>
   12604:	mov	r1, sp
   12608:	ldr	r0, [r5]
   1260c:	bl	11368 <rb_dictionary_foreach_cur@plt>
   12610:	subs	r4, r0, #0
   12614:	bne	12620 <fputs@plt+0xfc4>
   12618:	add	sp, sp, #8
   1261c:	pop	{r4, r5, r6, r7, r8, pc}
   12620:	ldr	r3, [r4, #460]	; 0x1cc
   12624:	ldr	r6, [r8]
   12628:	add	r3, r3, #1
   1262c:	str	r3, [r4, #460]	; 0x1cc
   12630:	cmp	r6, #0
   12634:	bne	12650 <fputs@plt+0xff4>
   12638:	mov	r0, r4
   1263c:	bl	125cc <fputs@plt+0xf70>
   12640:	mov	r1, sp
   12644:	ldr	r0, [r5]
   12648:	bl	11404 <rb_dictionary_foreach_next@plt>
   1264c:	b	12604 <fputs@plt+0xfa8>
   12650:	ldr	r2, [r6]
   12654:	ldr	r3, [r4, #464]	; 0x1d0
   12658:	ldr	r1, [r2, #12]
   1265c:	add	r3, r3, r1, lsl #4
   12660:	ldr	r1, [r3, #12]
   12664:	cmp	r1, #1
   12668:	bne	12690 <fputs@plt+0x1034>
   1266c:	ldr	r2, [r2, #40]	; 0x28
   12670:	cmp	r2, #0
   12674:	beq	12690 <fputs@plt+0x1034>
   12678:	ldr	r3, [r3, #4]
   1267c:	cmp	r3, #0
   12680:	cmpgt	r7, r3
   12684:	ble	12690 <fputs@plt+0x1034>
   12688:	mov	r0, r4
   1268c:	blx	r2
   12690:	ldr	r6, [r6, #8]
   12694:	b	12630 <fputs@plt+0xfd4>
   12698:	andeq	lr, r2, r8, ror r1
   1269c:	andeq	lr, r2, ip, ror r1
   126a0:	ldrb	r3, [r0, #452]	; 0x1c4
   126a4:	cmp	r3, #0
   126a8:	bxne	lr
   126ac:	mov	r3, #1
   126b0:	strb	r3, [r0, #452]	; 0x1c4
   126b4:	ldr	r3, [r0, #456]	; 0x1c8
   126b8:	cmp	r3, #0
   126bc:	bxeq	lr
   126c0:	ldr	r3, [pc, #76]	; 12714 <fputs@plt+0x10b8>
   126c4:	push	{r4, r5, r6, lr}
   126c8:	mov	r4, r0
   126cc:	ldr	r5, [r3]
   126d0:	cmp	r5, #0
   126d4:	bne	126dc <fputs@plt+0x1080>
   126d8:	pop	{r4, r5, r6, pc}
   126dc:	ldr	r3, [r5]
   126e0:	ldr	r2, [r3, #36]	; 0x24
   126e4:	cmp	r2, #0
   126e8:	beq	1270c <fputs@plt+0x10b0>
   126ec:	ldr	r1, [r3, #12]
   126f0:	ldr	r3, [r4, #464]	; 0x1d0
   126f4:	add	r3, r3, r1, lsl #4
   126f8:	ldr	r3, [r3, #12]
   126fc:	cmp	r3, #1
   12700:	bne	1270c <fputs@plt+0x10b0>
   12704:	mov	r0, r4
   12708:	blx	r2
   1270c:	ldr	r5, [r5, #8]
   12710:	b	126d0 <fputs@plt+0x1074>
   12714:	andeq	lr, r2, ip, ror r1
   12718:	push	{r3}		; (str r3, [sp, #-4]!)
   1271c:	push	{r4, r5, r6, r7, lr}
   12720:	sub	sp, sp, #536	; 0x218
   12724:	add	r7, sp, #24
   12728:	mov	r4, r0
   1272c:	mov	r5, r1
   12730:	mov	r6, r2
   12734:	add	r3, sp, #560	; 0x230
   12738:	ldr	r2, [sp, #556]	; 0x22c
   1273c:	mov	r1, #512	; 0x200
   12740:	mov	r0, r7
   12744:	str	r3, [sp, #20]
   12748:	bl	11320 <vsnprintf@plt>
   1274c:	ldr	r3, [pc, #124]	; 127d0 <fputs@plt+0x1174>
   12750:	cmn	r5, #1
   12754:	ldr	lr, [pc, #120]	; 127d4 <fputs@plt+0x1178>
   12758:	ldr	r0, [r3]
   1275c:	ldrne	r3, [r4, #464]	; 0x1d0
   12760:	moveq	r3, #42	; 0x2a
   12764:	add	r1, r4, #440	; 0x1b8
   12768:	ldrne	r3, [r3, r5, lsl #4]
   1276c:	add	ip, r4, #376	; 0x178
   12770:	ldr	r2, [r4]
   12774:	ldrbne	r3, [r3, #20]
   12778:	cmp	r6, #0
   1277c:	moveq	r6, lr
   12780:	stm	sp, {r1, ip}
   12784:	str	r7, [sp, #12]
   12788:	str	r6, [sp, #8]
   1278c:	ldr	r1, [pc, #68]	; 127d8 <fputs@plt+0x117c>
   12790:	bl	115b4 <rb_helper_write@plt>
   12794:	cmn	r5, #1
   12798:	beq	127b8 <fputs@plt+0x115c>
   1279c:	ldr	r3, [r4, #464]	; 0x1d0
   127a0:	add	r5, r3, r5, lsl #4
   127a4:	mov	r3, #2
   127a8:	str	r3, [r5, #12]
   127ac:	ldr	r3, [r4, #456]	; 0x1c8
   127b0:	sub	r3, r3, #1
   127b4:	str	r3, [r4, #456]	; 0x1c8
   127b8:	mov	r0, r4
   127bc:	bl	126a0 <fputs@plt+0x1044>
   127c0:	add	sp, sp, #536	; 0x218
   127c4:	pop	{r4, r5, r6, r7, lr}
   127c8:	add	sp, sp, #4
   127cc:	bx	lr
   127d0:	andeq	sp, r2, ip, ror pc
   127d4:	andeq	r7, r1, r4, lsl #18
   127d8:	andeq	r7, r1, r8, ror sl
   127dc:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   127e0:	mov	r1, sp
   127e4:	ldr	r4, [pc, #200]	; 128b4 <fputs@plt+0x1258>
   127e8:	ldr	r6, [pc, #200]	; 128b8 <fputs@plt+0x125c>
   127ec:	ldr	r7, [pc, #200]	; 128bc <fputs@plt+0x1260>
   127f0:	ldr	r0, [r4]
   127f4:	bl	1144c <rb_dictionary_foreach_start@plt>
   127f8:	mvn	r8, #0
   127fc:	mov	r1, sp
   12800:	ldr	r0, [r4]
   12804:	bl	11368 <rb_dictionary_foreach_cur@plt>
   12808:	subs	r5, r0, #0
   1280c:	bne	1284c <fputs@plt+0x11f0>
   12810:	ldr	r1, [pc, #168]	; 128c0 <fputs@plt+0x1264>
   12814:	ldr	r5, [r1]
   12818:	cmp	r5, #0
   1281c:	movne	r7, r1
   12820:	ldrne	r6, [r5, #8]
   12824:	bne	12880 <fputs@plt+0x1224>
   12828:	mov	r2, #0
   1282c:	mov	r1, r2
   12830:	ldr	r0, [r4]
   12834:	bl	114e8 <rb_dictionary_destroy@plt>
   12838:	ldr	r3, [pc, #132]	; 128c4 <fputs@plt+0x1268>
   1283c:	ldr	r0, [r3, #16]
   12840:	bl	112f0 <rb_event_delete@plt>
   12844:	add	sp, sp, #8
   12848:	pop	{r4, r5, r6, r7, r8, pc}
   1284c:	ldr	r3, [r5, #460]	; 0x1cc
   12850:	mov	r1, r8
   12854:	add	r3, r3, #1
   12858:	str	r3, [r5, #460]	; 0x1cc
   1285c:	mov	r2, r7
   12860:	mov	r3, r6
   12864:	bl	12718 <fputs@plt+0x10bc>
   12868:	mov	r0, r5
   1286c:	bl	125cc <fputs@plt+0xf70>
   12870:	mov	r1, sp
   12874:	ldr	r0, [r4]
   12878:	bl	11404 <rb_dictionary_foreach_next@plt>
   1287c:	b	127fc <fputs@plt+0x11a0>
   12880:	ldr	r3, [r5]
   12884:	ldr	r3, [r3, #28]
   12888:	cmp	r3, #0
   1288c:	beq	12894 <fputs@plt+0x1238>
   12890:	blx	r3
   12894:	mov	r1, r7
   12898:	mov	r0, r5
   1289c:	bl	12268 <fputs@plt+0xc0c>
   128a0:	cmp	r6, #0
   128a4:	beq	12828 <fputs@plt+0x11cc>
   128a8:	mov	r5, r6
   128ac:	ldr	r6, [r6, #8]
   128b0:	b	12880 <fputs@plt+0x1224>
   128b4:	andeq	lr, r2, r8, ror r1
   128b8:	andeq	r7, r1, sp, lsl #21
   128bc:	ldrdeq	r7, [r1], -r0
   128c0:	andeq	lr, r2, ip, ror r1
   128c4:	andeq	sp, r2, r8, lsl #31
   128c8:	add	r3, r0, #376	; 0x178
   128cc:	push	{r0, r1, r4, lr}
   128d0:	mov	r4, r0
   128d4:	str	r3, [sp]
   128d8:	add	r3, r0, #440	; 0x1b8
   128dc:	ldr	r2, [r0]
   128e0:	ldr	r0, [pc, #24]	; 12900 <fputs@plt+0x12a4>
   128e4:	ldr	r1, [pc, #24]	; 12904 <fputs@plt+0x12a8>
   128e8:	ldr	r0, [r0]
   128ec:	bl	115b4 <rb_helper_write@plt>
   128f0:	mov	r0, r4
   128f4:	add	sp, sp, #8
   128f8:	pop	{r4, lr}
   128fc:	b	126a0 <fputs@plt+0x1044>
   12900:	andeq	sp, r2, ip, ror pc
   12904:	ldrdeq	r7, [r1], -r8
   12908:	ldr	r2, [r0, #464]	; 0x1d0
   1290c:	mov	ip, #2
   12910:	add	r2, r2, r1, lsl #4
   12914:	push	{r4, r5, r6, lr}
   12918:	mov	r4, r0
   1291c:	str	ip, [r2, #12]
   12920:	ldr	r2, [r0, #456]	; 0x1c8
   12924:	sub	r2, r2, #1
   12928:	cmp	r2, #0
   1292c:	str	r2, [r0, #456]	; 0x1c8
   12930:	bne	12948 <fputs@plt+0x12ec>
   12934:	ldrb	r2, [r0, #451]	; 0x1c3
   12938:	cmp	r2, #0
   1293c:	bne	12948 <fputs@plt+0x12ec>
   12940:	pop	{r4, r5, r6, lr}
   12944:	b	128c8 <fputs@plt+0x126c>
   12948:	ldr	r3, [pc, #76]	; 1299c <fputs@plt+0x1340>
   1294c:	mov	r6, r1
   12950:	ldr	r5, [r3]
   12954:	cmp	r5, #0
   12958:	bne	12960 <fputs@plt+0x1304>
   1295c:	pop	{r4, r5, r6, pc}
   12960:	ldr	r3, [r5]
   12964:	ldr	r2, [r3, #44]	; 0x2c
   12968:	cmp	r2, #0
   1296c:	beq	12994 <fputs@plt+0x1338>
   12970:	ldr	r1, [r3, #12]
   12974:	ldr	r3, [r4, #464]	; 0x1d0
   12978:	add	r3, r3, r1, lsl #4
   1297c:	ldr	r3, [r3, #12]
   12980:	cmp	r3, #1
   12984:	bne	12994 <fputs@plt+0x1338>
   12988:	mov	r1, r6
   1298c:	mov	r0, r4
   12990:	blx	r2
   12994:	ldr	r5, [r5, #8]
   12998:	b	12954 <fputs@plt+0x12f8>
   1299c:	andeq	lr, r2, ip, ror r1
   129a0:	cmp	r0, #5
   129a4:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   129a8:	mov	r2, r0
   129ac:	ldrle	r1, [pc, #532]	; 12bc8 <fputs@plt+0x156c>
   129b0:	ble	12ba8 <fputs@plt+0x154c>
   129b4:	cmp	r0, #6
   129b8:	ldr	r8, [r1, #4]
   129bc:	ldr	r3, [r1, #12]
   129c0:	ldrne	r7, [r1, #24]
   129c4:	ldr	r6, [r1, #8]
   129c8:	ldr	r9, [r1, #16]
   129cc:	ldr	fp, [r1, #20]
   129d0:	mov	r2, #16
   129d4:	mov	r1, #0
   129d8:	mov	r0, r8
   129dc:	str	r3, [sp, #4]
   129e0:	ldreq	r7, [pc, #484]	; 12bcc <fputs@plt+0x1570>
   129e4:	bl	113f8 <strtoull@plt>
   129e8:	mov	r3, #0
   129ec:	mvn	r2, #1
   129f0:	mov	r4, r0
   129f4:	subs	r0, r0, #1
   129f8:	sbc	r1, r1, #0
   129fc:	cmp	r1, r3
   12a00:	cmpeq	r0, r2
   12a04:	bhi	12bc0 <fputs@plt+0x1564>
   12a08:	mov	r1, #468	; 0x1d4
   12a0c:	mov	r0, #1
   12a10:	bl	11380 <calloc@plt>
   12a14:	subs	sl, r0, #0
   12a18:	bne	12a20 <fputs@plt+0x13c4>
   12a1c:	bl	11524 <rb_outofmemory@plt>
   12a20:	ldr	r2, [sl, #460]	; 0x1cc
   12a24:	ldr	r5, [pc, #420]	; 12bd0 <fputs@plt+0x1574>
   12a28:	add	r2, r2, #1
   12a2c:	str	r4, [sl]
   12a30:	mov	r1, r4
   12a34:	str	r2, [sl, #460]	; 0x1cc
   12a38:	ldr	r0, [r5]
   12a3c:	bl	11584 <rb_dictionary_find@plt>
   12a40:	subs	r4, r0, #0
   12a44:	bne	12ba0 <fputs@plt+0x1544>
   12a48:	mov	r2, sl
   12a4c:	ldr	r1, [sl]
   12a50:	ldr	r0, [r5]
   12a54:	bl	1153c <rb_dictionary_add@plt>
   12a58:	mov	r2, #16
   12a5c:	mov	r1, r4
   12a60:	mov	r0, r7
   12a64:	bl	113f8 <strtoull@plt>
   12a68:	mov	r2, #54	; 0x36
   12a6c:	mov	r1, r6
   12a70:	str	r0, [sl, #4]
   12a74:	add	r0, sl, #8
   12a78:	bl	113ec <rb_strlcpy@plt>
   12a7c:	ldr	r0, [sp, #4]
   12a80:	bl	114dc <atoi@plt>
   12a84:	add	r1, sl, #64	; 0x40
   12a88:	strh	r0, [sl, #62]	; 0x3e
   12a8c:	mov	r0, r6
   12a90:	bl	11458 <rb_inet_pton_sock@plt>
   12a94:	ldrh	r2, [sl, #62]	; 0x3e
   12a98:	mov	r1, r9
   12a9c:	add	r0, sl, #192	; 0xc0
   12aa0:	rev16	r2, r2
   12aa4:	strh	r2, [sl, #66]	; 0x42
   12aa8:	mov	r2, #54	; 0x36
   12aac:	bl	113ec <rb_strlcpy@plt>
   12ab0:	mov	r0, fp
   12ab4:	bl	114dc <atoi@plt>
   12ab8:	add	r1, sl, #248	; 0xf8
   12abc:	strh	r0, [sl, #246]	; 0xf6
   12ac0:	mov	r0, r9
   12ac4:	bl	11458 <rb_inet_pton_sock@plt>
   12ac8:	ldrh	r2, [sl, #246]	; 0xf6
   12acc:	ldr	r1, [pc, #256]	; 12bd4 <fputs@plt+0x1578>
   12ad0:	add	r0, sl, #376	; 0x178
   12ad4:	rev16	r2, r2
   12ad8:	strh	r2, [sl, #250]	; 0xfa
   12adc:	mov	r2, #64	; 0x40
   12ae0:	bl	113ec <rb_strlcpy@plt>
   12ae4:	mov	r2, #11
   12ae8:	ldr	r1, [pc, #228]	; 12bd4 <fputs@plt+0x1578>
   12aec:	add	r0, sl, #440	; 0x1b8
   12af0:	bl	113ec <rb_strlcpy@plt>
   12af4:	ldr	r2, [pc, #220]	; 12bd8 <fputs@plt+0x157c>
   12af8:	mov	r0, #1
   12afc:	ldr	r1, [r2, #12]
   12b00:	lsl	r1, r1, #4
   12b04:	bl	11380 <calloc@plt>
   12b08:	cmp	r0, #0
   12b0c:	beq	12a1c <fputs@plt+0x13c0>
   12b10:	ldr	r1, [pc, #196]	; 12bdc <fputs@plt+0x1580>
   12b14:	mov	r2, #1
   12b18:	mov	r5, r2
   12b1c:	ldr	r4, [r1]
   12b20:	str	r0, [sl, #464]	; 0x1d0
   12b24:	strb	r2, [sl, #451]	; 0x1c3
   12b28:	cmp	r4, #0
   12b2c:	beq	12b74 <fputs@plt+0x1518>
   12b30:	ldr	r2, [r4]
   12b34:	ldr	r1, [sl, #464]	; 0x1d0
   12b38:	ldr	r0, [r2, #12]
   12b3c:	str	r2, [r1, r0, lsl #4]
   12b40:	add	ip, r1, r0, lsl #4
   12b44:	ldr	r1, [sl, #456]	; 0x1c8
   12b48:	ldr	r2, [r2, #32]
   12b4c:	add	r1, r1, #1
   12b50:	str	r1, [sl, #456]	; 0x1c8
   12b54:	mov	r0, sl
   12b58:	str	r5, [ip, #12]
   12b5c:	blx	r2
   12b60:	cmp	r0, #0
   12b64:	beq	12b90 <fputs@plt+0x1534>
   12b68:	ldrb	r2, [sl, #452]	; 0x1c4
   12b6c:	cmp	r2, #0
   12b70:	beq	12bb8 <fputs@plt+0x155c>
   12b74:	mov	r2, #0
   12b78:	strb	r2, [sl, #451]	; 0x1c3
   12b7c:	ldr	r2, [sl, #456]	; 0x1c8
   12b80:	cmp	r2, #0
   12b84:	bne	12b90 <fputs@plt+0x1534>
   12b88:	mov	r0, sl
   12b8c:	bl	128c8 <fputs@plt+0x126c>
   12b90:	mov	r0, sl
   12b94:	add	sp, sp, #12
   12b98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12b9c:	b	125cc <fputs@plt+0xf70>
   12ba0:	ldr	r1, [pc, #56]	; 12be0 <fputs@plt+0x1584>
   12ba4:	mov	r2, r8
   12ba8:	mov	r0, #67	; 0x43
   12bac:	bl	12120 <fputs@plt+0xac4>
   12bb0:	mov	r0, #3
   12bb4:	bl	11638 <exit@plt>
   12bb8:	ldr	r4, [r4, #8]
   12bbc:	b	12b28 <fputs@plt+0x14cc>
   12bc0:	add	sp, sp, #12
   12bc4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12bc8:	andeq	r7, r1, r3, ror #21
   12bcc:	andeq	r7, r1, r2, ror #24
   12bd0:	andeq	lr, r2, r8, ror r1
   12bd4:	andeq	r7, r1, r4, lsl #18
   12bd8:	andeq	sp, r2, r8, lsl #31
   12bdc:	andeq	lr, r2, ip, ror r1
   12be0:	andeq	r7, r1, sp, lsr #22
   12be4:	cmp	r0, #1
   12be8:	push	{r4, r6, r7, lr}
   12bec:	movle	r2, r0
   12bf0:	ldrle	r1, [pc, #124]	; 12c74 <fputs@plt+0x1618>
   12bf4:	ble	12c30 <fputs@plt+0x15d4>
   12bf8:	mov	r4, r1
   12bfc:	mov	r2, #16
   12c00:	mov	r1, #0
   12c04:	ldr	r0, [r4, #4]
   12c08:	bl	113f8 <strtoull@plt>
   12c0c:	mov	r3, #0
   12c10:	mvn	r2, #1
   12c14:	subs	r6, r0, #1
   12c18:	sbc	r7, r1, #0
   12c1c:	cmp	r7, r3
   12c20:	cmpeq	r6, r2
   12c24:	bls	12c40 <fputs@plt+0x15e4>
   12c28:	ldr	r2, [r4, #4]
   12c2c:	ldr	r1, [pc, #68]	; 12c78 <fputs@plt+0x161c>
   12c30:	mov	r0, #67	; 0x43
   12c34:	bl	12120 <fputs@plt+0xac4>
   12c38:	mov	r0, #3
   12c3c:	bl	11638 <exit@plt>
   12c40:	ldr	r3, [pc, #52]	; 12c7c <fputs@plt+0x1620>
   12c44:	mov	r1, r0
   12c48:	ldr	r0, [r3]
   12c4c:	bl	11518 <rb_dictionary_retrieve@plt>
   12c50:	subs	r4, r0, #0
   12c54:	popeq	{r4, r6, r7, pc}
   12c58:	ldr	r3, [r4, #460]	; 0x1cc
   12c5c:	add	r3, r3, #1
   12c60:	str	r3, [r4, #460]	; 0x1cc
   12c64:	bl	126a0 <fputs@plt+0x1044>
   12c68:	mov	r0, r4
   12c6c:	pop	{r4, r6, r7, lr}
   12c70:	b	125cc <fputs@plt+0xf70>
   12c74:	andeq	r7, r1, r1, ror #22
   12c78:	andeq	r7, r1, fp, lsr #23
   12c7c:	andeq	lr, r2, r8, ror r1
   12c80:	push	{r4, lr}
   12c84:	mov	r1, r0
   12c88:	mov	r0, #1
   12c8c:	bl	11380 <calloc@plt>
   12c90:	cmp	r0, #0
   12c94:	popne	{r4, pc}
   12c98:	bl	11524 <rb_outofmemory@plt>
   12c9c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ca0:	sub	sp, sp, #1024	; 0x400
   12ca4:	sub	sp, sp, #12
   12ca8:	mov	r7, r0
   12cac:	mov	r4, #1024	; 0x400
   12cb0:	mov	r2, r4
   12cb4:	mov	r1, #0
   12cb8:	add	r0, sp, #8
   12cbc:	bl	113b0 <memset@plt>
   12cc0:	ldrb	r2, [r7, #20]
   12cc4:	str	r4, [sp]
   12cc8:	add	r3, sp, #8
   12ccc:	mov	r1, #1
   12cd0:	add	r0, r7, #21
   12cd4:	bl	141c0 <fputs@plt+0x2b64>
   12cd8:	subs	r9, r0, #0
   12cdc:	ble	12d40 <fputs@plt+0x16e4>
   12ce0:	ldrb	r5, [r7, #278]	; 0x116
   12ce4:	ldr	r4, [pc, #344]	; 12e44 <fputs@plt+0x17e8>
   12ce8:	ldr	r3, [r7, #12]
   12cec:	add	r5, r5, #1
   12cf0:	strh	r3, [sp, #8]
   12cf4:	uxtb	r5, r5
   12cf8:	ldr	r3, [r4]
   12cfc:	ldr	sl, [pc, #324]	; 12e48 <fputs@plt+0x17ec>
   12d00:	mov	r8, #0
   12d04:	sub	fp, r5, #1
   12d08:	add	r3, r3, #1
   12d0c:	strb	r5, [r7, #278]	; 0x116
   12d10:	str	r3, [r4]
   12d14:	ldr	r1, [sl]
   12d18:	cmp	r8, r1
   12d1c:	blt	12d4c <fputs@plt+0x16f0>
   12d20:	mov	r8, #0
   12d24:	ldr	sl, [pc, #288]	; 12e4c <fputs@plt+0x17f0>
   12d28:	sub	r5, r5, #1
   12d2c:	mov	fp, r8
   12d30:	ldr	r3, [pc, #272]	; 12e48 <fputs@plt+0x17ec>
   12d34:	ldr	r1, [r3]
   12d38:	cmp	r8, r1
   12d3c:	blt	12de0 <fputs@plt+0x1784>
   12d40:	add	sp, sp, #1024	; 0x400
   12d44:	add	sp, sp, #12
   12d48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12d4c:	add	r0, fp, r8
   12d50:	bl	175d8 <fputs@plt+0x5f7c>
   12d54:	add	r3, r4, r1, lsl #2
   12d58:	mov	r6, r1
   12d5c:	ldr	r3, [r3, #4]
   12d60:	cmp	r3, #0
   12d64:	beq	12d94 <fputs@plt+0x1738>
   12d68:	sub	r3, r3, #1
   12d6c:	cmp	r3, #3
   12d70:	movhi	r1, #243	; 0xf3
   12d74:	ldrls	r2, [pc, #212]	; 12e50 <fputs@plt+0x17f4>
   12d78:	ldr	r0, [r4]
   12d7c:	ldrsbls	r1, [r2, r3]
   12d80:	bl	175d8 <fputs@plt+0x5f7c>
   12d84:	cmp	r1, #0
   12d88:	beq	12d94 <fputs@plt+0x1738>
   12d8c:	add	r8, r8, #1
   12d90:	b	12d14 <fputs@plt+0x16b8>
   12d94:	ldr	r0, [r4, #44]	; 0x2c
   12d98:	bl	11308 <rb_get_fd@plt>
   12d9c:	ldr	r3, [pc, #168]	; 12e4c <fputs@plt+0x17f0>
   12da0:	lsl	r2, r6, #7
   12da4:	add	r1, r2, r3
   12da8:	ldrh	r3, [r2, r3]
   12dac:	mov	r2, r9
   12db0:	cmp	r3, #2
   12db4:	moveq	r3, #16
   12db8:	movne	r3, #28
   12dbc:	stm	sp, {r1, r3}
   12dc0:	mov	r3, #0
   12dc4:	add	r1, sp, #8
   12dc8:	bl	11398 <sendto@plt>
   12dcc:	cmp	r9, r0
   12dd0:	bne	12d8c <fputs@plt+0x1730>
   12dd4:	cmn	r6, #1
   12dd8:	strne	r6, [r7, #288]	; 0x120
   12ddc:	b	12d40 <fputs@plt+0x16e4>
   12de0:	add	r0, r5, r8
   12de4:	bl	175d8 <fputs@plt+0x5f7c>
   12de8:	add	r3, r4, r1, lsl #2
   12dec:	mov	r6, r1
   12df0:	ldr	r3, [r3, #4]
   12df4:	cmp	r3, #0
   12df8:	bne	12e04 <fputs@plt+0x17a8>
   12dfc:	add	r8, r8, #1
   12e00:	b	12d30 <fputs@plt+0x16d4>
   12e04:	ldr	r0, [r4, #44]	; 0x2c
   12e08:	bl	11308 <rb_get_fd@plt>
   12e0c:	lsl	r3, r6, #7
   12e10:	add	r2, r3, sl
   12e14:	ldrh	r3, [r3, sl]
   12e18:	add	r1, sp, #8
   12e1c:	cmp	r3, #2
   12e20:	moveq	r3, #16
   12e24:	movne	r3, #28
   12e28:	stm	sp, {r2, r3}
   12e2c:	mov	r3, fp
   12e30:	mov	r2, r9
   12e34:	bl	11398 <sendto@plt>
   12e38:	cmp	r9, r0
   12e3c:	bne	12dfc <fputs@plt+0x17a0>
   12e40:	b	12dd4 <fputs@plt+0x1778>
   12e44:	muleq	r2, ip, pc	; <UNPREDICTABLE>
   12e48:	ldrdeq	sp, [r2], -ip
   12e4c:	muleq	r2, ip, r2
   12e50:	andeq	r7, r1, pc, ror #23
   12e54:	push	{r4, r5, r6, lr}
   12e58:	bl	13ac8 <fputs@plt+0x246c>
   12e5c:	ldr	r3, [pc, #128]	; 12ee4 <fputs@plt+0x1888>
   12e60:	ldr	r1, [pc, #128]	; 12ee8 <fputs@plt+0x188c>
   12e64:	ldr	r2, [r3]
   12e68:	mov	r3, #0
   12e6c:	mov	r0, r3
   12e70:	cmp	r3, r2
   12e74:	blt	12ed8 <fputs@plt+0x187c>
   12e78:	ldr	r5, [pc, #108]	; 12eec <fputs@plt+0x1890>
   12e7c:	ldr	r4, [r5, #44]	; 0x2c
   12e80:	cmp	r4, #0
   12e84:	popne	{r4, r5, r6, pc}
   12e88:	ldr	r0, [pc, #96]	; 12ef0 <fputs@plt+0x1894>
   12e8c:	ldr	r3, [pc, #96]	; 12ef4 <fputs@plt+0x1898>
   12e90:	mov	r2, r4
   12e94:	mov	r1, #2
   12e98:	ldrh	r0, [r0]
   12e9c:	bl	1132c <rb_socket@plt>
   12ea0:	cmp	r0, #0
   12ea4:	str	r0, [r5, #44]	; 0x2c
   12ea8:	popeq	{r4, r5, r6, pc}
   12eac:	mov	r3, r4
   12eb0:	ldr	r2, [pc, #64]	; 12ef8 <fputs@plt+0x189c>
   12eb4:	mov	r1, #1
   12eb8:	bl	112fc <rb_setselect@plt>
   12ebc:	mov	r3, #1
   12ec0:	mov	r2, r4
   12ec4:	ldr	r1, [pc, #48]	; 12efc <fputs@plt+0x18a0>
   12ec8:	ldr	r0, [pc, #48]	; 12f00 <fputs@plt+0x18a4>
   12ecc:	bl	115c0 <rb_event_add@plt>
   12ed0:	str	r0, [r5, #48]	; 0x30
   12ed4:	pop	{r4, r5, r6, pc}
   12ed8:	str	r0, [r1, r3, lsl #2]
   12edc:	add	r3, r3, #1
   12ee0:	b	12e70 <fputs@plt+0x1814>
   12ee4:	ldrdeq	sp, [r2], -ip
   12ee8:	andeq	sp, r2, r0, lsr #31
   12eec:	muleq	r2, ip, pc	; <UNPREDICTABLE>
   12ef0:	muleq	r2, ip, r2
   12ef4:	andeq	r7, r1, pc, lsr #24
   12ef8:	muleq	r1, r8, r9
   12efc:	andeq	r3, r1, r8, lsr r4
   12f00:	andeq	r7, r1, r3, asr #24
   12f04:	push	{r4, lr}
   12f08:	subs	r4, r0, #0
   12f0c:	bne	12f24 <fputs@plt+0x18c8>
   12f10:	ldr	r3, [pc, #104]	; 12f80 <fputs@plt+0x1924>
   12f14:	mov	r2, #235	; 0xeb
   12f18:	ldr	r1, [pc, #100]	; 12f84 <fputs@plt+0x1928>
   12f1c:	ldr	r0, [pc, #100]	; 12f88 <fputs@plt+0x192c>
   12f20:	bl	113e0 <__assert_fail@plt>
   12f24:	ldr	r2, [r4, #8]
   12f28:	ldr	r3, [pc, #92]	; 12f8c <fputs@plt+0x1930>
   12f2c:	ldr	r1, [r4, #4]
   12f30:	cmp	r2, #0
   12f34:	strne	r1, [r2, #4]
   12f38:	streq	r1, [r3, #56]	; 0x38
   12f3c:	ldr	r1, [r4, #4]
   12f40:	ldr	r0, [r4, #420]	; 0x1a4
   12f44:	cmp	r1, #0
   12f48:	strne	r2, [r1, #8]
   12f4c:	streq	r2, [r3, #52]	; 0x34
   12f50:	mov	r2, #0
   12f54:	str	r2, [r4, #4]
   12f58:	str	r2, [r4, #8]
   12f5c:	ldr	r2, [r3, #60]	; 0x3c
   12f60:	cmp	r0, #0
   12f64:	sub	r2, r2, #1
   12f68:	str	r2, [r3, #60]	; 0x3c
   12f6c:	beq	12f74 <fputs@plt+0x1918>
   12f70:	bl	11410 <free@plt>
   12f74:	mov	r0, r4
   12f78:	pop	{r4, lr}
   12f7c:	b	11410 <free@plt>
   12f80:	andeq	r7, r1, ip, lsl #24
   12f84:	ldrdeq	r7, [r1], -lr
   12f88:	strdeq	r7, [r1], -sl
   12f8c:	muleq	r2, ip, pc	; <UNPREDICTABLE>
   12f90:	push	{r0, r1, r4, r5, r6, lr}
   12f94:	mov	r5, r0
   12f98:	mov	r0, #428	; 0x1ac
   12f9c:	bl	12c80 <fputs@plt+0x1624>
   12fa0:	ldr	r6, [pc, #156]	; 13044 <fputs@plt+0x19e8>
   12fa4:	mov	r4, r0
   12fa8:	bl	11470 <rb_current_time@plt>
   12fac:	mov	r3, #3
   12fb0:	str	r5, [r4, #424]	; 0x1a8
   12fb4:	mov	r5, r6
   12fb8:	strb	r3, [r4, #277]	; 0x115
   12fbc:	mov	r3, #4
   12fc0:	str	r3, [r4, #284]	; 0x11c
   12fc4:	str	r0, [r4, #280]	; 0x118
   12fc8:	mov	r1, #2
   12fcc:	add	r0, sp, #6
   12fd0:	bl	115cc <rb_get_random@plt>
   12fd4:	ldr	r2, [r6, #52]	; 0x34
   12fd8:	ldrh	r1, [sp, #6]
   12fdc:	mov	r3, r2
   12fe0:	cmp	r3, #0
   12fe4:	bne	1302c <fputs@plt+0x19d0>
   12fe8:	cmp	r2, #0
   12fec:	str	r1, [r4, #12]
   12ff0:	str	r4, [r4]
   12ff4:	str	r3, [r4, #4]
   12ff8:	str	r2, [r4, #8]
   12ffc:	strne	r4, [r2, #4]
   13000:	bne	13010 <fputs@plt+0x19b4>
   13004:	ldr	r3, [r5, #56]	; 0x38
   13008:	cmp	r3, #0
   1300c:	streq	r4, [r5, #56]	; 0x38
   13010:	ldr	r3, [r5, #60]	; 0x3c
   13014:	mov	r0, r4
   13018:	add	r3, r3, #1
   1301c:	str	r4, [r5, #52]	; 0x34
   13020:	str	r3, [r5, #60]	; 0x3c
   13024:	add	sp, sp, #8
   13028:	pop	{r4, r5, r6, pc}
   1302c:	ldr	r0, [r3]
   13030:	ldr	r0, [r0, #12]
   13034:	cmp	r1, r0
   13038:	beq	12fc8 <fputs@plt+0x196c>
   1303c:	ldr	r3, [r3, #8]
   13040:	b	12fe0 <fputs@plt+0x1984>
   13044:	muleq	r2, ip, pc	; <UNPREDICTABLE>
   13048:	push	{r4, r5, r6, r7, r8, lr}
   1304c:	subs	r4, r2, #0
   13050:	mov	r5, r1
   13054:	mov	r6, r3
   13058:	bne	1308c <fputs@plt+0x1a30>
   1305c:	bl	12f90 <fputs@plt+0x1934>
   13060:	mov	r4, r0
   13064:	mov	r0, r5
   13068:	bl	11464 <strlen@plt>
   1306c:	add	r0, r0, #1
   13070:	bl	11554 <malloc@plt>
   13074:	subs	r7, r0, #0
   13078:	bne	13080 <fputs@plt+0x1a24>
   1307c:	bl	11524 <rb_outofmemory@plt>
   13080:	mov	r1, r5
   13084:	bl	114c4 <strcpy@plt>
   13088:	str	r7, [r4, #420]	; 0x1a4
   1308c:	mov	r1, r5
   13090:	add	r0, r4, #21
   13094:	mov	r2, #256	; 0x100
   13098:	bl	113ec <rb_strlcpy@plt>
   1309c:	strb	r6, [r4, #20]
   130a0:	mov	r0, r4
   130a4:	pop	{r4, r5, r6, r7, r8, lr}
   130a8:	b	12c9c <fputs@plt+0x1640>
   130ac:	b	12e54 <fputs@plt+0x17f8>
   130b0:	push	{r4, lr}
   130b4:	ldr	r4, [pc, #28]	; 130d8 <fputs@plt+0x1a7c>
   130b8:	ldr	r0, [r4, #44]	; 0x2c
   130bc:	bl	114a0 <rb_close@plt>
   130c0:	mov	r3, #0
   130c4:	ldr	r0, [r4, #48]	; 0x30
   130c8:	str	r3, [r4, #44]	; 0x2c
   130cc:	bl	112f0 <rb_event_delete@plt>
   130d0:	pop	{r4, lr}
   130d4:	b	12e54 <fputs@plt+0x17f8>
   130d8:	muleq	r2, ip, pc	; <UNPREDICTABLE>
   130dc:	push	{r4, r5, r6, r7, lr}
   130e0:	mov	r6, r1
   130e4:	subs	r1, r0, #0
   130e8:	sub	sp, sp, #260	; 0x104
   130ec:	bne	13104 <fputs@plt+0x1aa8>
   130f0:	ldr	r3, [pc, #160]	; 13198 <fputs@plt+0x1b3c>
   130f4:	mov	r2, #412	; 0x19c
   130f8:	ldr	r1, [pc, #156]	; 1319c <fputs@plt+0x1b40>
   130fc:	ldr	r0, [pc, #156]	; 131a0 <fputs@plt+0x1b44>
   13100:	bl	113e0 <__assert_fail@plt>
   13104:	mov	r7, r2
   13108:	mov	r0, sp
   1310c:	mov	r2, #256	; 0x100
   13110:	bl	113ec <rb_strlcpy@plt>
   13114:	mov	r1, #46	; 0x2e
   13118:	mov	r0, sp
   1311c:	bl	1135c <strchr@plt>
   13120:	cmp	r0, #0
   13124:	bne	1317c <fputs@plt+0x1b20>
   13128:	ldr	r5, [pc, #116]	; 131a4 <fputs@plt+0x1b48>
   1312c:	ldrb	r3, [r5]
   13130:	cmp	r3, #0
   13134:	beq	1317c <fputs@plt+0x1b20>
   13138:	mov	r0, sp
   1313c:	bl	11464 <strlen@plt>
   13140:	mov	r4, r0
   13144:	mov	r0, r5
   13148:	bl	11464 <strlen@plt>
   1314c:	add	r0, r4, r0
   13150:	add	r0, r0, #2
   13154:	cmp	r0, #254	; 0xfe
   13158:	bhi	1317c <fputs@plt+0x1b20>
   1315c:	add	r3, sp, #256	; 0x100
   13160:	add	r3, r3, r4
   13164:	mov	r2, #46	; 0x2e
   13168:	add	r0, r4, #1
   1316c:	strb	r2, [r3, #-256]	; 0xffffff00
   13170:	mov	r1, r5
   13174:	add	r0, sp, r0
   13178:	bl	114c4 <strcpy@plt>
   1317c:	mov	r3, r7
   13180:	mov	r2, #0
   13184:	mov	r1, sp
   13188:	mov	r0, r6
   1318c:	bl	13048 <fputs@plt+0x19ec>
   13190:	add	sp, sp, #260	; 0x104
   13194:	pop	{r4, r5, r6, r7, pc}
   13198:	andeq	r7, r1, fp, lsl ip
   1319c:	andeq	r7, r1, r4, asr ip
   131a0:	andeq	r7, r1, sl, asr ip
   131a4:	muleq	r2, ip, r1
   131a8:	ldrh	ip, [r2]
   131ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   131b0:	sub	sp, sp, #132	; 0x84
   131b4:	cmp	ip, #2
   131b8:	bne	131fc <fputs@plt+0x1ba0>
   131bc:	ldrb	ip, [r2, #7]
   131c0:	ldrb	lr, [r2, #6]
   131c4:	ldrb	r4, [r2, #5]
   131c8:	ldr	r5, [pc, #396]	; 1335c <fputs@plt+0x1d00>
   131cc:	ldrb	r2, [r2, #4]
   131d0:	cmp	r3, #0
   131d4:	moveq	r3, r5
   131d8:	str	r3, [sp, #12]
   131dc:	str	r2, [sp, #8]
   131e0:	str	r4, [sp, #4]
   131e4:	str	lr, [sp]
   131e8:	mov	r3, ip
   131ec:	ldr	r2, [pc, #364]	; 13360 <fputs@plt+0x1d04>
   131f0:	bl	115e4 <snprintf@plt>
   131f4:	add	sp, sp, #132	; 0x84
   131f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   131fc:	cmp	ip, #10
   13200:	bne	131f4 <fputs@plt+0x1b98>
   13204:	ldrb	r6, [r2, #23]
   13208:	ldr	fp, [pc, #340]	; 13364 <fputs@plt+0x1d08>
   1320c:	cmp	r3, #0
   13210:	moveq	r3, fp
   13214:	lsr	ip, r6, #4
   13218:	str	ip, [sp]
   1321c:	ldrb	ip, [r2, #22]
   13220:	and	lr, ip, #15
   13224:	lsr	ip, ip, #4
   13228:	str	lr, [sp, #4]
   1322c:	str	ip, [sp, #8]
   13230:	ldrb	ip, [r2, #21]
   13234:	and	lr, ip, #15
   13238:	lsr	ip, ip, #4
   1323c:	str	lr, [sp, #12]
   13240:	str	ip, [sp, #16]
   13244:	ldrb	ip, [r2, #20]
   13248:	and	lr, ip, #15
   1324c:	lsr	ip, ip, #4
   13250:	str	lr, [sp, #20]
   13254:	str	ip, [sp, #24]
   13258:	ldrb	ip, [r2, #19]
   1325c:	and	lr, ip, #15
   13260:	lsr	ip, ip, #4
   13264:	str	lr, [sp, #28]
   13268:	str	ip, [sp, #32]
   1326c:	ldrb	ip, [r2, #18]
   13270:	and	lr, ip, #15
   13274:	lsr	ip, ip, #4
   13278:	str	lr, [sp, #36]	; 0x24
   1327c:	str	ip, [sp, #40]	; 0x28
   13280:	ldrb	ip, [r2, #17]
   13284:	and	lr, ip, #15
   13288:	lsr	ip, ip, #4
   1328c:	str	lr, [sp, #44]	; 0x2c
   13290:	str	ip, [sp, #48]	; 0x30
   13294:	ldrb	ip, [r2, #16]
   13298:	and	lr, ip, #15
   1329c:	lsr	ip, ip, #4
   132a0:	str	lr, [sp, #52]	; 0x34
   132a4:	str	ip, [sp, #56]	; 0x38
   132a8:	ldrb	ip, [r2, #15]
   132ac:	and	lr, ip, #15
   132b0:	lsr	ip, ip, #4
   132b4:	str	lr, [sp, #60]	; 0x3c
   132b8:	str	ip, [sp, #64]	; 0x40
   132bc:	ldrb	ip, [r2, #14]
   132c0:	and	lr, ip, #15
   132c4:	lsr	ip, ip, #4
   132c8:	str	lr, [sp, #68]	; 0x44
   132cc:	str	ip, [sp, #72]	; 0x48
   132d0:	ldrb	ip, [r2, #13]
   132d4:	and	lr, ip, #15
   132d8:	lsr	ip, ip, #4
   132dc:	str	lr, [sp, #76]	; 0x4c
   132e0:	str	ip, [sp, #80]	; 0x50
   132e4:	ldrb	ip, [r2, #12]
   132e8:	and	lr, ip, #15
   132ec:	str	lr, [sp, #84]	; 0x54
   132f0:	ldrb	lr, [r2, #11]
   132f4:	ldrb	r4, [r2, #10]
   132f8:	ldrb	r5, [r2, #9]
   132fc:	ldrb	r2, [r2, #8]
   13300:	and	r7, lr, #15
   13304:	and	r8, r4, #15
   13308:	and	sl, r2, #15
   1330c:	lsr	r2, r2, #4
   13310:	and	r9, r5, #15
   13314:	lsr	ip, ip, #4
   13318:	lsr	lr, lr, #4
   1331c:	lsr	r4, r4, #4
   13320:	lsr	r5, r5, #4
   13324:	str	r3, [sp, #124]	; 0x7c
   13328:	str	r2, [sp, #120]	; 0x78
   1332c:	and	r3, r6, #15
   13330:	ldr	r2, [pc, #48]	; 13368 <fputs@plt+0x1d0c>
   13334:	str	sl, [sp, #116]	; 0x74
   13338:	str	r5, [sp, #112]	; 0x70
   1333c:	str	r9, [sp, #108]	; 0x6c
   13340:	str	r4, [sp, #104]	; 0x68
   13344:	str	r8, [sp, #100]	; 0x64
   13348:	str	lr, [sp, #96]	; 0x60
   1334c:	str	r7, [sp, #92]	; 0x5c
   13350:	str	ip, [sp, #88]	; 0x58
   13354:	bl	115e4 <snprintf@plt>
   13358:	b	131f4 <fputs@plt+0x1b98>
   1335c:	andeq	r7, r1, r4, ror #24
   13360:	andeq	r7, r1, sl, ror ip
   13364:	andeq	r7, r1, r1, ror ip
   13368:	andeq	r7, r1, r9, lsl #25
   1336c:	push	{r4, r5, r6, lr}
   13370:	subs	r4, r2, #0
   13374:	mov	r5, r1
   13378:	bne	133a0 <fputs@plt+0x1d44>
   1337c:	bl	12f90 <fputs@plt+0x1934>
   13380:	mov	r2, #128	; 0x80
   13384:	mov	r1, r5
   13388:	mov	r4, r0
   1338c:	add	r0, r0, #292	; 0x124
   13390:	bl	11488 <memcpy@plt>
   13394:	mov	r0, #256	; 0x100
   13398:	bl	12c80 <fputs@plt+0x1624>
   1339c:	str	r0, [r4, #420]	; 0x1a4
   133a0:	add	r0, r4, #21
   133a4:	mov	r3, #0
   133a8:	mov	r2, r5
   133ac:	mov	r1, #256	; 0x100
   133b0:	bl	131a8 <fputs@plt+0x1b4c>
   133b4:	mov	r3, #12
   133b8:	strb	r3, [r4, #20]
   133bc:	mov	r0, r4
   133c0:	pop	{r4, r5, r6, lr}
   133c4:	b	12c9c <fputs@plt+0x1640>
   133c8:	ldrb	r1, [r0, #277]	; 0x115
   133cc:	mov	r2, r0
   133d0:	sub	r1, r1, #1
   133d4:	uxtb	r1, r1
   133d8:	cmp	r1, #0
   133dc:	strb	r1, [r0, #277]	; 0x115
   133e0:	bne	13404 <fputs@plt+0x1da8>
   133e4:	ldr	r3, [r0, #424]	; 0x1a8
   133e8:	push	{r4, lr}
   133ec:	mov	r4, r0
   133f0:	ldm	r3, {r0, r2}
   133f4:	blx	r2
   133f8:	mov	r0, r4
   133fc:	pop	{r4, lr}
   13400:	b	12f04 <fputs@plt+0x18a8>
   13404:	ldrb	r3, [r0, #20]
   13408:	cmp	r3, #12
   1340c:	beq	1342c <fputs@plt+0x1dd0>
   13410:	cmp	r3, #28
   13414:	beq	13420 <fputs@plt+0x1dc4>
   13418:	cmp	r3, #1
   1341c:	bxne	lr
   13420:	ldr	r1, [r2, #420]	; 0x1a4
   13424:	mov	r0, #0
   13428:	b	13048 <fputs@plt+0x19ec>
   1342c:	add	r1, r0, #292	; 0x124
   13430:	mov	r0, #0
   13434:	b	1336c <fputs@plt+0x1d10>
   13438:	push	{r4, r5, r6, lr}
   1343c:	bl	11470 <rb_current_time@plt>
   13440:	ldr	r5, [pc, #96]	; 134a8 <fputs@plt+0x1e4c>
   13444:	ldr	r3, [r5, #52]	; 0x34
   13448:	cmp	r3, #0
   1344c:	popeq	{r4, r5, r6, pc}
   13450:	ldr	r4, [r3, #8]
   13454:	mov	r6, r0
   13458:	ldr	r0, [r3]
   1345c:	ldr	r3, [r0, #284]	; 0x11c
   13460:	ldr	r2, [r0, #280]	; 0x118
   13464:	add	r2, r3, r2
   13468:	cmp	r6, r2
   1346c:	blt	13494 <fputs@plt+0x1e38>
   13470:	ldr	r2, [r0, #288]	; 0x120
   13474:	lsl	r3, r3, #1
   13478:	str	r6, [r0, #280]	; 0x118
   1347c:	add	r2, r5, r2, lsl #2
   13480:	str	r3, [r0, #284]	; 0x11c
   13484:	ldr	r1, [r2, #4]
   13488:	add	r1, r1, #1
   1348c:	str	r1, [r2, #4]
   13490:	bl	133c8 <fputs@plt+0x1d6c>
   13494:	cmp	r4, #0
   13498:	popeq	{r4, r5, r6, pc}
   1349c:	mov	r3, r4
   134a0:	ldr	r4, [r4, #8]
   134a4:	b	13458 <fputs@plt+0x1dfc>
   134a8:	muleq	r2, ip, pc	; <UNPREDICTABLE>
   134ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   134b0:	sub	sp, sp, #1552	; 0x610
   134b4:	sub	sp, sp, #12
   134b8:	mov	r3, #128	; 0x80
   134bc:	add	r9, sp, #40	; 0x28
   134c0:	str	r3, [sp, #36]	; 0x24
   134c4:	add	r5, sp, #524	; 0x20c
   134c8:	bl	11308 <rb_get_fd@plt>
   134cc:	sub	r3, r9, #4
   134d0:	str	r3, [sp, #4]
   134d4:	str	r9, [sp]
   134d8:	mov	r3, #0
   134dc:	ldr	r2, [pc, #1180]	; 13980 <fputs@plt+0x2324>
   134e0:	mov	r1, r5
   134e4:	bl	11608 <recvfrom@plt>
   134e8:	add	r3, r0, #1
   134ec:	cmp	r3, #1
   134f0:	movls	r0, #0
   134f4:	bls	13508 <fputs@plt+0x1eac>
   134f8:	cmp	r0, #12
   134fc:	mov	r7, r0
   13500:	bgt	13514 <fputs@plt+0x1eb8>
   13504:	mov	r0, #1
   13508:	add	sp, sp, #1552	; 0x610
   1350c:	add	sp, sp, #12
   13510:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13514:	ldrh	r3, [r5, #6]
   13518:	ldr	r6, [pc, #1124]	; 13984 <fputs@plt+0x2328>
   1351c:	rev16	r3, r3
   13520:	strh	r3, [r5, #6]
   13524:	ldrh	r3, [r5, #4]
   13528:	rev16	r3, r3
   1352c:	strh	r3, [r5, #4]
   13530:	uxth	r2, r3
   13534:	str	r2, [sp, #16]
   13538:	ldrh	r3, [r5, #8]
   1353c:	ldrh	r2, [r5]
   13540:	rev16	r3, r3
   13544:	strh	r3, [r5, #8]
   13548:	ldrh	r3, [r5, #10]
   1354c:	rev16	r3, r3
   13550:	strh	r3, [r5, #10]
   13554:	ldr	r3, [r6, #52]	; 0x34
   13558:	cmp	r3, #0
   1355c:	beq	13504 <fputs@plt+0x1ea8>
   13560:	ldr	r4, [r3]
   13564:	ldr	r1, [r4, #12]
   13568:	cmp	r2, r1
   1356c:	bne	13740 <fputs@plt+0x20e4>
   13570:	ldr	r3, [pc, #1040]	; 13988 <fputs@plt+0x232c>
   13574:	ldr	r8, [pc, #1040]	; 1398c <fputs@plt+0x2330>
   13578:	ldrh	fp, [r9, #2]
   1357c:	ldr	r3, [r3]
   13580:	mov	sl, #0
   13584:	str	r3, [sp, #24]
   13588:	ldrh	r3, [r9]
   1358c:	str	r3, [sp, #12]
   13590:	ldr	r3, [sp, #44]	; 0x2c
   13594:	str	r3, [sp, #20]
   13598:	add	r3, r9, #8
   1359c:	mov	r9, #16
   135a0:	str	r3, [sp, #28]
   135a4:	ldr	r3, [sp, #24]
   135a8:	cmp	sl, r3
   135ac:	blt	13748 <fputs@plt+0x20ec>
   135b0:	mov	r8, #0
   135b4:	ldr	r3, [r4, #288]	; 0x120
   135b8:	cmp	r3, r8
   135bc:	ldrne	r3, [pc, #960]	; 13984 <fputs@plt+0x2328>
   135c0:	addne	r3, r3, r8, lsl #2
   135c4:	ldrne	r2, [r3, #4]
   135c8:	addne	r2, r2, #3
   135cc:	strne	r2, [r3, #4]
   135d0:	ldr	r3, [sp, #16]
   135d4:	cmp	r3, #1
   135d8:	bne	13504 <fputs@plt+0x1ea8>
   135dc:	mov	r3, #256	; 0x100
   135e0:	add	r7, r5, r7
   135e4:	str	r3, [sp]
   135e8:	add	r2, sp, #536	; 0x218
   135ec:	add	r3, sp, #168	; 0xa8
   135f0:	mov	r1, r7
   135f4:	mov	r0, r5
   135f8:	bl	13c58 <fputs@plt+0x25fc>
   135fc:	cmp	r0, #0
   13600:	ble	13504 <fputs@plt+0x1ea8>
   13604:	add	r1, r4, #21
   13608:	add	r0, sp, #168	; 0xa8
   1360c:	bl	11434 <rb_strcasecmp@plt>
   13610:	cmp	r0, #0
   13614:	bne	13504 <fputs@plt+0x1ea8>
   13618:	ldrb	r3, [sp, #527]	; 0x20f
   1361c:	ands	r3, r3, #15
   13620:	bne	137e8 <fputs@plt+0x218c>
   13624:	ldrh	r2, [r5, #6]
   13628:	cmp	r2, #0
   1362c:	beq	137e8 <fputs@plt+0x218c>
   13630:	add	r5, sp, #536	; 0x218
   13634:	sub	r9, r5, #12
   13638:	ldrh	sl, [r9, #4]
   1363c:	cmp	sl, #0
   13640:	bne	13850 <fputs@plt+0x21f4>
   13644:	ldr	fp, [pc, #836]	; 13990 <fputs@plt+0x2334>
   13648:	add	r9, sp, #524	; 0x20c
   1364c:	ldrh	r3, [r9, #6]
   13650:	cmp	r3, #0
   13654:	cmpne	r7, r5
   13658:	bls	13708 <fputs@plt+0x20ac>
   1365c:	sub	r3, r3, #1
   13660:	strh	r3, [r9, #6]
   13664:	mov	r2, r5
   13668:	str	fp, [sp]
   1366c:	add	r3, sp, #168	; 0xa8
   13670:	mov	r1, r7
   13674:	mov	r0, r9
   13678:	bl	13c58 <fputs@plt+0x25fc>
   1367c:	cmp	r0, #0
   13680:	ble	137f8 <fputs@plt+0x219c>
   13684:	add	r5, r5, r0
   13688:	add	r2, r5, #10
   1368c:	cmp	r7, r2
   13690:	strb	sl, [sp, #423]	; 0x1a7
   13694:	str	r2, [sp, #16]
   13698:	bls	13708 <fputs@plt+0x20ac>
   1369c:	mov	r0, r5
   136a0:	bl	1415c <fputs@plt+0x2b00>
   136a4:	str	r0, [sp, #12]
   136a8:	add	r0, r5, #2
   136ac:	bl	1415c <fputs@plt+0x2b00>
   136b0:	add	r0, r5, #4
   136b4:	bl	1416c <fputs@plt+0x2b10>
   136b8:	str	r0, [r4, #16]
   136bc:	add	r0, r5, #8
   136c0:	bl	1415c <fputs@plt+0x2b00>
   136c4:	ldr	r3, [sp, #12]
   136c8:	ldr	r2, [sp, #16]
   136cc:	cmp	r3, #12
   136d0:	beq	138b4 <fputs@plt+0x2258>
   136d4:	cmp	r3, #28
   136d8:	beq	1387c <fputs@plt+0x2220>
   136dc:	cmp	r3, #1
   136e0:	bne	138f0 <fputs@plt+0x2294>
   136e4:	ldrb	r3, [r4, #20]
   136e8:	cmp	r0, #4
   136ec:	cmpeq	r3, #1
   136f0:	bne	137f8 <fputs@plt+0x219c>
   136f4:	add	r3, r4, #292	; 0x124
   136f8:	mov	r2, #2
   136fc:	strh	r2, [r3]
   13700:	ldr	r3, [r5, #10]
   13704:	str	r3, [r4, #296]	; 0x128
   13708:	ldrb	r3, [r4, #20]
   1370c:	lsl	r8, r8, #2
   13710:	cmp	r3, #12
   13714:	bne	13940 <fputs@plt+0x22e4>
   13718:	ldr	r1, [r4, #420]	; 0x1a4
   1371c:	cmp	r1, #0
   13720:	bne	138f8 <fputs@plt+0x229c>
   13724:	add	r8, r6, r8
   13728:	ldr	r3, [r8, #4]
   1372c:	add	r3, r3, #1
   13730:	str	r3, [r8, #4]
   13734:	mov	r0, r4
   13738:	bl	133c8 <fputs@plt+0x1d6c>
   1373c:	b	13504 <fputs@plt+0x1ea8>
   13740:	ldr	r3, [r3, #8]
   13744:	b	13558 <fputs@plt+0x1efc>
   13748:	ldrh	r3, [r8, #-8]
   1374c:	cmp	r3, #2
   13750:	beq	137b0 <fputs@plt+0x2154>
   13754:	cmp	r3, #10
   13758:	bne	137a4 <fputs@plt+0x2148>
   1375c:	ldr	r3, [sp, #12]
   13760:	cmp	r3, #10
   13764:	bne	137a4 <fputs@plt+0x2148>
   13768:	ldrh	r3, [r8, #-6]
   1376c:	cmp	r3, fp
   13770:	bne	137a4 <fputs@plt+0x2148>
   13774:	mov	r2, r9
   13778:	ldr	r1, [sp, #28]
   1377c:	mov	r0, r8
   13780:	bl	112d8 <memcmp@plt>
   13784:	cmp	r0, #0
   13788:	beq	137e0 <fputs@plt+0x2184>
   1378c:	mov	r2, r9
   13790:	ldr	r1, [pc, #508]	; 13994 <fputs@plt+0x2338>
   13794:	mov	r0, r8
   13798:	bl	112d8 <memcmp@plt>
   1379c:	cmp	r0, #0
   137a0:	beq	137e0 <fputs@plt+0x2184>
   137a4:	add	sl, sl, #1
   137a8:	add	r8, r8, #128	; 0x80
   137ac:	b	135a4 <fputs@plt+0x1f48>
   137b0:	ldr	r3, [sp, #12]
   137b4:	cmp	r3, #2
   137b8:	bne	137a4 <fputs@plt+0x2148>
   137bc:	ldrh	r3, [r8, #-6]
   137c0:	cmp	r3, fp
   137c4:	bne	137a4 <fputs@plt+0x2148>
   137c8:	ldr	r3, [r8, #-4]
   137cc:	cmp	r3, #0
   137d0:	beq	137e0 <fputs@plt+0x2184>
   137d4:	ldr	r2, [sp, #20]
   137d8:	cmp	r3, r2
   137dc:	b	137a0 <fputs@plt+0x2144>
   137e0:	mov	r8, #1
   137e4:	b	135b4 <fputs@plt+0x1f58>
   137e8:	sub	r2, r3, #4
   137ec:	cmp	r3, #2
   137f0:	cmpne	r2, #1
   137f4:	bhi	1380c <fputs@plt+0x21b0>
   137f8:	add	r6, r6, r8, lsl #2
   137fc:	ldr	r3, [r6, #4]
   13800:	add	r3, r3, #1
   13804:	str	r3, [r6, #4]
   13808:	b	13734 <fputs@plt+0x20d8>
   1380c:	cmp	r3, #3
   13810:	bne	13830 <fputs@plt+0x21d4>
   13814:	add	r6, r6, r8, lsl #2
   13818:	ldr	r3, [r6, #4]
   1381c:	add	r2, r3, #3
   13820:	cmp	r3, #0
   13824:	movlt	r3, r2
   13828:	asr	r3, r3, #2
   1382c:	str	r3, [r6, #4]
   13830:	ldr	r3, [r4, #424]	; 0x1a8
   13834:	mov	r1, #0
   13838:	ldr	r0, [r3]
   1383c:	ldr	r2, [r3, #4]
   13840:	blx	r2
   13844:	mov	r0, r4
   13848:	bl	12f04 <fputs@plt+0x18a8>
   1384c:	b	13504 <fputs@plt+0x1ea8>
   13850:	mov	r1, r7
   13854:	mov	r0, r5
   13858:	bl	140d8 <fputs@plt+0x2a7c>
   1385c:	cmp	r0, #0
   13860:	blt	137f8 <fputs@plt+0x219c>
   13864:	ldrh	r3, [r9, #4]
   13868:	add	r0, r0, #4
   1386c:	add	r5, r5, r0
   13870:	sub	r3, r3, #1
   13874:	strh	r3, [r9, #4]
   13878:	b	13638 <fputs@plt+0x1fdc>
   1387c:	ldrb	r3, [r4, #20]
   13880:	cmp	r0, #16
   13884:	cmpeq	r3, #28
   13888:	bne	137f8 <fputs@plt+0x219c>
   1388c:	add	r3, r4, #292	; 0x124
   13890:	mov	r1, #10
   13894:	strh	r1, [r3]
   13898:	add	r0, r5, #26
   1389c:	add	r3, r4, #300	; 0x12c
   138a0:	ldr	r1, [r2], #4
   138a4:	cmp	r2, r0
   138a8:	str	r1, [r3], #4
   138ac:	bne	138a0 <fputs@plt+0x2244>
   138b0:	b	13708 <fputs@plt+0x20ac>
   138b4:	ldrb	r3, [r4, #20]
   138b8:	cmp	r3, #12
   138bc:	bne	137f8 <fputs@plt+0x219c>
   138c0:	str	fp, [sp]
   138c4:	add	r3, sp, #168	; 0xa8
   138c8:	mov	r1, r7
   138cc:	mov	r0, r9
   138d0:	bl	13c58 <fputs@plt+0x25fc>
   138d4:	cmp	r0, #0
   138d8:	ble	137f8 <fputs@plt+0x219c>
   138dc:	mov	r2, #256	; 0x100
   138e0:	add	r1, sp, #168	; 0xa8
   138e4:	ldr	r0, [r4, #420]	; 0x1a4
   138e8:	bl	113ec <rb_strlcpy@plt>
   138ec:	b	13708 <fputs@plt+0x20ac>
   138f0:	add	r5, r2, r0
   138f4:	b	1364c <fputs@plt+0x1ff0>
   138f8:	add	r3, r4, #292	; 0x124
   138fc:	mov	r2, #0
   13900:	ldrh	r3, [r3]
   13904:	ldr	r0, [r4, #424]	; 0x1a8
   13908:	cmp	r3, #10
   1390c:	moveq	r3, #28
   13910:	movne	r3, #1
   13914:	bl	13048 <fputs@plt+0x19ec>
   13918:	add	r8, r6, r8
   1391c:	mov	r0, r4
   13920:	bl	12f04 <fputs@plt+0x18a8>
   13924:	ldr	r3, [r8, #4]
   13928:	add	r2, r3, #3
   1392c:	cmp	r3, #0
   13930:	movlt	r3, r2
   13934:	asr	r3, r3, #2
   13938:	str	r3, [r8, #4]
   1393c:	b	13504 <fputs@plt+0x1ea8>
   13940:	mov	r0, #132	; 0x84
   13944:	bl	12c80 <fputs@plt+0x1624>
   13948:	ldr	r3, [r4, #420]	; 0x1a4
   1394c:	add	r1, r4, #292	; 0x124
   13950:	mov	r2, #128	; 0x80
   13954:	mov	r5, r0
   13958:	str	r3, [r0], #4
   1395c:	bl	11488 <memcpy@plt>
   13960:	ldr	r3, [r4, #424]	; 0x1a8
   13964:	mov	r1, r5
   13968:	ldr	r0, [r3]
   1396c:	ldr	r2, [r3, #4]
   13970:	blx	r2
   13974:	mov	r0, r5
   13978:	bl	11410 <free@plt>
   1397c:	b	13918 <fputs@plt+0x22bc>
   13980:	andeq	r0, r0, ip, lsl #8
   13984:	muleq	r2, ip, pc	; <UNPREDICTABLE>
   13988:	ldrdeq	sp, [r2], -ip
   1398c:	andeq	lr, r2, r4, lsr #5
   13990:	andeq	r0, r0, r3, ror #2
   13994:	strdeq	r8, [r2], -r0
   13998:	push	{r4, lr}
   1399c:	mov	r4, r0
   139a0:	mov	r0, r4
   139a4:	bl	134ac <fputs@plt+0x1e50>
   139a8:	subs	r3, r0, #0
   139ac:	bne	139a0 <fputs@plt+0x2344>
   139b0:	mov	r0, r4
   139b4:	ldr	r2, [pc, #8]	; 139c4 <fputs@plt+0x2368>
   139b8:	mov	r1, #1
   139bc:	pop	{r4, lr}
   139c0:	b	112fc <rb_setselect@plt>
   139c4:	muleq	r1, r8, r9
   139c8:	mov	r3, r1
   139cc:	mov	r2, #0
   139d0:	mov	r1, r0
   139d4:	mov	r0, r3
   139d8:	b	1336c <fputs@plt+0x1d10>
   139dc:	push	{r4, r5, r6, lr}
   139e0:	sub	sp, sp, #40	; 0x28
   139e4:	ldr	r6, [pc, #132]	; 13a70 <fputs@plt+0x2414>
   139e8:	ldr	r3, [r6]
   139ec:	cmp	r3, #9
   139f0:	bgt	13a68 <fputs@plt+0x240c>
   139f4:	mov	r4, r0
   139f8:	mov	r2, #32
   139fc:	mov	r1, #0
   13a00:	add	r0, sp, #8
   13a04:	bl	113b0 <memset@plt>
   13a08:	mov	r3, #2
   13a0c:	str	r3, [sp, #16]
   13a10:	mov	r3, #5
   13a14:	str	r3, [sp, #8]
   13a18:	add	r2, sp, #8
   13a1c:	add	r3, sp, #4
   13a20:	ldr	r1, [pc, #76]	; 13a74 <fputs@plt+0x2418>
   13a24:	mov	r0, r4
   13a28:	bl	11440 <getaddrinfo@plt>
   13a2c:	cmp	r0, #0
   13a30:	bne	13a68 <fputs@plt+0x240c>
   13a34:	ldr	r4, [sp, #4]
   13a38:	cmp	r4, #0
   13a3c:	beq	13a68 <fputs@plt+0x240c>
   13a40:	ldr	r5, [r6]
   13a44:	ldr	r0, [pc, #44]	; 13a78 <fputs@plt+0x241c>
   13a48:	ldr	r2, [r4, #16]
   13a4c:	add	r0, r0, r5, lsl #7
   13a50:	ldr	r1, [r4, #20]
   13a54:	bl	11488 <memcpy@plt>
   13a58:	add	r5, r5, #1
   13a5c:	mov	r0, r4
   13a60:	str	r5, [r6]
   13a64:	bl	113bc <freeaddrinfo@plt>
   13a68:	add	sp, sp, #40	; 0x28
   13a6c:	pop	{r4, r5, r6, pc}
   13a70:	ldrdeq	sp, [r2], -ip
   13a74:	strdeq	r7, [r1], -r7	; <UNPREDICTABLE>
   13a78:	muleq	r2, ip, r2
   13a7c:	ldrb	r3, [r0]
   13a80:	and	r2, r3, #192	; 0xc0
   13a84:	cmp	r2, #192	; 0xc0
   13a88:	beq	13ac0 <fputs@plt+0x2464>
   13a8c:	cmp	r2, #64	; 0x40
   13a90:	beq	13a9c <fputs@plt+0x2440>
   13a94:	mov	r0, r3
   13a98:	bx	lr
   13a9c:	cmp	r3, #65	; 0x41
   13aa0:	bne	13ac0 <fputs@plt+0x2464>
   13aa4:	ldrb	r0, [r0, #1]
   13aa8:	cmp	r0, #0
   13aac:	moveq	r0, #256	; 0x100
   13ab0:	add	r0, r0, #7
   13ab4:	asr	r0, r0, #3
   13ab8:	add	r0, r0, #1
   13abc:	bx	lr
   13ac0:	mvn	r0, #0
   13ac4:	bx	lr
   13ac8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13acc:	mov	r4, #0
   13ad0:	ldr	r5, [pc, #348]	; 13c34 <fputs@plt+0x25d8>
   13ad4:	sub	sp, sp, #128	; 0x80
   13ad8:	ldr	r1, [pc, #344]	; 13c38 <fputs@plt+0x25dc>
   13adc:	ldr	r0, [pc, #344]	; 13c3c <fputs@plt+0x25e0>
   13ae0:	str	r4, [r5]
   13ae4:	bl	113a4 <fopen@plt>
   13ae8:	subs	r6, r0, #0
   13aec:	ldrne	r8, [pc, #332]	; 13c40 <fputs@plt+0x25e4>
   13af0:	bne	13b84 <fputs@plt+0x2528>
   13af4:	ldr	r3, [r5]
   13af8:	cmp	r3, #0
   13afc:	bne	13b08 <fputs@plt+0x24ac>
   13b00:	ldr	r0, [pc, #316]	; 13c44 <fputs@plt+0x25e8>
   13b04:	bl	139dc <fputs@plt+0x2380>
   13b08:	mov	r0, #0
   13b0c:	add	sp, sp, #128	; 0x80
   13b10:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13b14:	mov	r1, r8
   13b18:	mov	r0, sp
   13b1c:	bl	11620 <strpbrk@plt>
   13b20:	cmp	r0, #0
   13b24:	strbne	r4, [r0]
   13b28:	bl	11530 <__ctype_b_loc@plt>
   13b2c:	mov	r2, sp
   13b30:	ldr	r1, [r0]
   13b34:	mov	r0, r2
   13b38:	mov	r7, r2
   13b3c:	ldrb	r3, [r0], #1
   13b40:	lsl	ip, r3, #1
   13b44:	ldrh	ip, [r1, ip]
   13b48:	tst	ip, #8192	; 0x2000
   13b4c:	bne	13ba8 <fputs@plt+0x254c>
   13b50:	cmp	r3, #0
   13b54:	beq	13b84 <fputs@plt+0x2528>
   13b58:	cmp	r3, #59	; 0x3b
   13b5c:	cmpne	r3, #35	; 0x23
   13b60:	beq	13b84 <fputs@plt+0x2528>
   13b64:	mov	r3, r2
   13b68:	ldrb	r0, [r2], #1
   13b6c:	lsl	ip, r0, #1
   13b70:	ldrh	ip, [r1, ip]
   13b74:	tst	ip, #8192	; 0x2000
   13b78:	bne	13bb0 <fputs@plt+0x2554>
   13b7c:	cmp	r0, #0
   13b80:	bne	13b64 <fputs@plt+0x2508>
   13b84:	mov	r2, r6
   13b88:	mov	r1, #128	; 0x80
   13b8c:	mov	r0, sp
   13b90:	bl	11344 <fgets@plt>
   13b94:	cmp	r0, #0
   13b98:	bne	13b14 <fputs@plt+0x24b8>
   13b9c:	mov	r0, r6
   13ba0:	bl	11338 <fclose@plt>
   13ba4:	b	13af4 <fputs@plt+0x2498>
   13ba8:	mov	r2, r0
   13bac:	b	13b34 <fputs@plt+0x24d8>
   13bb0:	cmp	r0, #0
   13bb4:	beq	13b84 <fputs@plt+0x2528>
   13bb8:	strb	r4, [r3], #1
   13bbc:	mov	r9, r3
   13bc0:	add	r3, r3, #1
   13bc4:	ldrb	r2, [r9]
   13bc8:	lsl	r2, r2, #1
   13bcc:	ldrh	r2, [r1, r2]
   13bd0:	ands	sl, r2, #8192	; 0x2000
   13bd4:	bne	13bbc <fputs@plt+0x2560>
   13bd8:	ldr	r1, [pc, #104]	; 13c48 <fputs@plt+0x25ec>
   13bdc:	mov	r0, r9
   13be0:	bl	11620 <strpbrk@plt>
   13be4:	ldr	r1, [pc, #96]	; 13c4c <fputs@plt+0x25f0>
   13be8:	cmp	r0, #0
   13bec:	strbne	sl, [r0]
   13bf0:	mov	r0, r7
   13bf4:	bl	11434 <rb_strcasecmp@plt>
   13bf8:	cmp	r0, #0
   13bfc:	bne	13c14 <fputs@plt+0x25b8>
   13c00:	mov	r2, #256	; 0x100
   13c04:	mov	r1, r9
   13c08:	ldr	r0, [pc, #64]	; 13c50 <fputs@plt+0x25f4>
   13c0c:	bl	113ec <rb_strlcpy@plt>
   13c10:	b	13b84 <fputs@plt+0x2528>
   13c14:	ldr	r1, [pc, #56]	; 13c54 <fputs@plt+0x25f8>
   13c18:	mov	r0, r7
   13c1c:	bl	11434 <rb_strcasecmp@plt>
   13c20:	cmp	r0, #0
   13c24:	bne	13b84 <fputs@plt+0x2528>
   13c28:	mov	r0, r9
   13c2c:	bl	139dc <fputs@plt+0x2380>
   13c30:	b	13b84 <fputs@plt+0x2528>
   13c34:	ldrdeq	sp, [r2], -ip
   13c38:	andeq	r8, r1, r0, asr r6
   13c3c:	strdeq	r7, [r1], -lr
   13c40:	andeq	r8, r1, r0, ror r5
   13c44:	andeq	r7, r1, sp, lsl lr
   13c48:	andeq	r7, r1, pc, lsl #28
   13c4c:	strdeq	r7, [r1], -r7	; <UNPREDICTABLE>
   13c50:	muleq	r2, ip, r1
   13c54:	andeq	r7, r1, r2, lsl lr
   13c58:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13c5c:	sub	sp, sp, #276	; 0x114
   13c60:	cmp	r0, r2
   13c64:	cmpls	r2, r1
   13c68:	str	r0, [sp, #4]
   13c6c:	mov	r8, r3
   13c70:	movcs	r7, #1
   13c74:	movcc	r7, #0
   13c78:	bcs	13d7c <fputs@plt+0x2720>
   13c7c:	mvn	r3, #0
   13c80:	add	fp, sp, #16
   13c84:	str	r3, [sp]
   13c88:	mov	r6, r2
   13c8c:	add	r3, fp, #255	; 0xff
   13c90:	mov	r9, r1
   13c94:	mov	r5, r2
   13c98:	str	r3, [sp, #8]
   13c9c:	sub	r3, r1, r0
   13ca0:	str	r3, [sp, #12]
   13ca4:	ldrb	r4, [r5]
   13ca8:	add	r1, r5, #1
   13cac:	cmp	r4, #0
   13cb0:	bne	13d50 <fputs@plt+0x26f4>
   13cb4:	ldr	r3, [sp]
   13cb8:	strb	r4, [fp]
   13cbc:	cmp	r3, #0
   13cc0:	bge	13cd4 <fputs@plt+0x2678>
   13cc4:	sub	r3, r1, r6
   13cc8:	cmn	r3, #1
   13ccc:	str	r3, [sp]
   13cd0:	beq	13ee8 <fputs@plt+0x288c>
   13cd4:	ldr	r7, [sp, #312]	; 0x138
   13cd8:	ldr	sl, [pc, #996]	; 140c4 <fputs@plt+0x2a68>
   13cdc:	add	r7, r8, r7
   13ce0:	mov	r5, r8
   13ce4:	add	fp, sp, #16
   13ce8:	ldrb	r1, [fp]
   13cec:	cmp	r1, #0
   13cf0:	bne	13e28 <fputs@plt+0x27cc>
   13cf4:	cmp	r8, r5
   13cf8:	bne	13d10 <fputs@plt+0x26b4>
   13cfc:	cmp	r7, r8
   13d00:	movhi	r3, #46	; 0x2e
   13d04:	strbhi	r3, [r8]
   13d08:	addhi	r5, r8, #1
   13d0c:	bls	13d7c <fputs@plt+0x2720>
   13d10:	cmp	r7, r5
   13d14:	bls	13d7c <fputs@plt+0x2720>
   13d18:	mov	r3, #0
   13d1c:	strb	r3, [r5], #1
   13d20:	sub	r5, r5, r8
   13d24:	cmn	r5, #1
   13d28:	beq	13ee8 <fputs@plt+0x288c>
   13d2c:	ldr	r2, [sp]
   13d30:	cmp	r2, r3
   13d34:	ble	13d44 <fputs@plt+0x26e8>
   13d38:	ldrb	r2, [r8]
   13d3c:	cmp	r2, #46	; 0x2e
   13d40:	strbeq	r3, [r8]
   13d44:	ldr	r0, [sp]
   13d48:	add	sp, sp, #276	; 0x114
   13d4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13d50:	and	r3, r4, #192	; 0xc0
   13d54:	cmp	r3, #64	; 0x40
   13d58:	beq	13d6c <fputs@plt+0x2710>
   13d5c:	cmp	r3, #192	; 0xc0
   13d60:	beq	13dc8 <fputs@plt+0x276c>
   13d64:	cmp	r3, #0
   13d68:	bne	13d7c <fputs@plt+0x2720>
   13d6c:	mov	r0, r5
   13d70:	bl	13a7c <fputs@plt+0x2420>
   13d74:	subs	sl, r0, #0
   13d78:	bge	13d88 <fputs@plt+0x272c>
   13d7c:	bl	11644 <__errno_location@plt>
   13d80:	mov	r3, #90	; 0x5a
   13d84:	b	13ee4 <fputs@plt+0x2888>
   13d88:	add	r3, sl, #1
   13d8c:	ldr	r0, [sp, #8]
   13d90:	add	r2, fp, r3
   13d94:	cmp	r0, r2
   13d98:	bls	13d7c <fputs@plt+0x2720>
   13d9c:	add	r5, r1, sl
   13da0:	cmp	r9, r5
   13da4:	bls	13d7c <fputs@plt+0x2720>
   13da8:	add	r7, r7, r3
   13dac:	add	r3, fp, #1
   13db0:	strb	r4, [fp]
   13db4:	mov	r2, sl
   13db8:	mov	r0, r3
   13dbc:	bl	11488 <memcpy@plt>
   13dc0:	add	fp, r0, sl
   13dc4:	b	13ca4 <fputs@plt+0x2648>
   13dc8:	cmp	r9, r1
   13dcc:	bls	13d7c <fputs@plt+0x2720>
   13dd0:	ldr	r3, [sp]
   13dd4:	ldrb	r5, [r5, #1]
   13dd8:	cmp	r3, #0
   13ddc:	sublt	r1, r1, r6
   13de0:	addlt	r3, r1, #1
   13de4:	lsl	r4, r4, #8
   13de8:	strlt	r3, [sp]
   13dec:	and	r4, r4, #16128	; 0x3f00
   13df0:	ldr	r3, [sp, #4]
   13df4:	orr	r5, r4, r5
   13df8:	adds	r5, r3, r5
   13dfc:	movcs	r3, #1
   13e00:	movcc	r3, #0
   13e04:	cmp	r9, r5
   13e08:	orrls	r3, r3, #1
   13e0c:	cmp	r3, #0
   13e10:	bne	13d7c <fputs@plt+0x2720>
   13e14:	ldr	r3, [sp, #12]
   13e18:	add	r7, r7, #2
   13e1c:	cmp	r7, r3
   13e20:	blt	13ca4 <fputs@plt+0x2648>
   13e24:	b	13d7c <fputs@plt+0x2720>
   13e28:	and	r4, r1, #192	; 0xc0
   13e2c:	cmp	r4, #192	; 0xc0
   13e30:	beq	13d7c <fputs@plt+0x2720>
   13e34:	cmp	r8, r5
   13e38:	beq	13e50 <fputs@plt+0x27f4>
   13e3c:	cmp	r7, r5
   13e40:	bls	13d7c <fputs@plt+0x2720>
   13e44:	mov	r3, #46	; 0x2e
   13e48:	strb	r3, [r5]
   13e4c:	add	r5, r5, #1
   13e50:	mov	r0, fp
   13e54:	bl	13a7c <fputs@plt+0x2420>
   13e58:	subs	r9, r0, #0
   13e5c:	blt	13d7c <fputs@plt+0x2720>
   13e60:	add	r3, r5, r9
   13e64:	cmp	r7, r3
   13e68:	bls	13d7c <fputs@plt+0x2720>
   13e6c:	cmp	r4, #64	; 0x40
   13e70:	beq	13ed4 <fputs@plt+0x2878>
   13e74:	add	fp, fp, #1
   13e78:	mov	r4, r5
   13e7c:	mov	r2, #92	; 0x5c
   13e80:	mov	r6, #10
   13e84:	cmp	r9, #0
   13e88:	beq	13fac <fputs@plt+0x2950>
   13e8c:	ldrb	r5, [fp], #1
   13e90:	cmp	r5, #41	; 0x29
   13e94:	bhi	14000 <fputs@plt+0x29a4>
   13e98:	cmp	r5, #40	; 0x28
   13e9c:	bcs	13eb0 <fputs@plt+0x2854>
   13ea0:	cmp	r5, #34	; 0x22
   13ea4:	beq	13eb0 <fputs@plt+0x2854>
   13ea8:	cmp	r5, #36	; 0x24
   13eac:	bne	140a4 <fputs@plt+0x2a48>
   13eb0:	add	r3, r4, #1
   13eb4:	cmp	r7, r3
   13eb8:	bls	13d7c <fputs@plt+0x2720>
   13ebc:	mov	r3, r4
   13ec0:	strb	r2, [r3], #2
   13ec4:	strb	r5, [r4, #1]
   13ec8:	mov	r4, r3
   13ecc:	sub	r9, r9, #1
   13ed0:	b	13e84 <fputs@plt+0x2828>
   13ed4:	cmp	r1, #65	; 0x41
   13ed8:	beq	13ef4 <fputs@plt+0x2898>
   13edc:	bl	11644 <__errno_location@plt>
   13ee0:	mov	r3, #22
   13ee4:	str	r3, [r0]
   13ee8:	mvn	r3, #0
   13eec:	str	r3, [sp]
   13ef0:	b	13d44 <fputs@plt+0x26e8>
   13ef4:	ldrb	r6, [fp, #1]
   13ef8:	cmp	r6, #0
   13efc:	moveq	r6, #256	; 0x100
   13f00:	add	r3, r6, #3
   13f04:	cmp	r6, #99	; 0x63
   13f08:	asr	r3, r3, #2
   13f0c:	movgt	r2, #9
   13f10:	bgt	13f20 <fputs@plt+0x28c4>
   13f14:	cmp	r6, #9
   13f18:	movgt	r2, #8
   13f1c:	movle	r2, #7
   13f20:	add	r3, r3, r2
   13f24:	add	r3, r5, r3
   13f28:	cmp	r7, r3
   13f2c:	bls	13d7c <fputs@plt+0x2720>
   13f30:	add	r9, fp, #2
   13f34:	ldr	r1, [pc, #396]	; 140c8 <fputs@plt+0x2a6c>
   13f38:	mov	r0, r5
   13f3c:	bl	114c4 <strcpy@plt>
   13f40:	add	r4, r5, #3
   13f44:	mov	fp, r6
   13f48:	mov	r3, r9
   13f4c:	cmp	fp, #7
   13f50:	bgt	13fb4 <fputs@plt+0x2958>
   13f54:	lsr	r2, r6, #3
   13f58:	add	fp, r9, r2
   13f5c:	sub	r3, r6, r2, lsl #3
   13f60:	cmp	r3, #4
   13f64:	ble	13fd8 <fputs@plt+0x297c>
   13f68:	ldrb	r2, [r9, r6, lsr #3]
   13f6c:	mov	r1, #255	; 0xff
   13f70:	rsb	r3, r3, #8
   13f74:	add	fp, fp, #1
   13f78:	and	r2, r2, r1, lsl r3
   13f7c:	ldr	r1, [pc, #328]	; 140cc <fputs@plt+0x2a70>
   13f80:	mov	r0, r4
   13f84:	bl	11650 <sprintf@plt>
   13f88:	add	r4, r4, r0
   13f8c:	mov	r0, r4
   13f90:	mov	r2, r6
   13f94:	ldr	r1, [pc, #308]	; 140d0 <fputs@plt+0x2a74>
   13f98:	bl	11650 <sprintf@plt>
   13f9c:	add	r4, r4, r0
   13fa0:	sub	r5, r4, r5
   13fa4:	cmp	r5, #0
   13fa8:	blt	13d7c <fputs@plt+0x2720>
   13fac:	mov	r5, r4
   13fb0:	b	13ce8 <fputs@plt+0x268c>
   13fb4:	ldrb	r2, [r3], #1
   13fb8:	mov	r0, r4
   13fbc:	ldr	r1, [pc, #264]	; 140cc <fputs@plt+0x2a70>
   13fc0:	str	r3, [sp, #4]
   13fc4:	bl	11650 <sprintf@plt>
   13fc8:	sub	fp, fp, #8
   13fcc:	ldr	r3, [sp, #4]
   13fd0:	add	r4, r4, r0
   13fd4:	b	13f4c <fputs@plt+0x28f0>
   13fd8:	cmp	r3, #0
   13fdc:	beq	13f8c <fputs@plt+0x2930>
   13fe0:	mov	r1, #15
   13fe4:	ldrb	r2, [r9, r2]
   13fe8:	rsb	r3, r3, #4
   13fec:	add	fp, fp, #1
   13ff0:	lsl	r3, r1, r3
   13ff4:	ldr	r1, [pc, #216]	; 140d4 <fputs@plt+0x2a78>
   13ff8:	and	r2, r3, r2, lsr #4
   13ffc:	b	13f80 <fputs@plt+0x2924>
   14000:	cmp	r5, #59	; 0x3b
   14004:	beq	13eb0 <fputs@plt+0x2854>
   14008:	bhi	14014 <fputs@plt+0x29b8>
   1400c:	cmp	r5, #46	; 0x2e
   14010:	b	13eac <fputs@plt+0x2850>
   14014:	cmp	r5, #64	; 0x40
   14018:	beq	13eb0 <fputs@plt+0x2854>
   1401c:	cmp	r5, #92	; 0x5c
   14020:	b	13eac <fputs@plt+0x2850>
   14024:	add	r3, r4, #3
   14028:	cmp	r7, r3
   1402c:	bls	13d7c <fputs@plt+0x2720>
   14030:	strb	r2, [r4]
   14034:	mov	r1, #100	; 0x64
   14038:	mov	r0, r5
   1403c:	str	r2, [sp, #8]
   14040:	bl	171ac <fputs@plt+0x5b50>
   14044:	mov	r1, #100	; 0x64
   14048:	uxtb	r0, r0
   1404c:	ldrb	r3, [sl, r0]
   14050:	mov	r0, r5
   14054:	strb	r3, [r4, #1]
   14058:	bl	17398 <fputs@plt+0x5d3c>
   1405c:	uxtb	r0, r1
   14060:	mov	r1, r6
   14064:	bl	171ac <fputs@plt+0x5b50>
   14068:	mov	r1, r6
   1406c:	uxtb	r0, r0
   14070:	ldrb	r3, [sl, r0]
   14074:	mov	r0, r5
   14078:	strb	r3, [r4, #2]
   1407c:	add	r3, r4, #4
   14080:	str	r3, [sp, #4]
   14084:	bl	17398 <fputs@plt+0x5d3c>
   14088:	ldr	r3, [sp, #4]
   1408c:	ldr	r2, [sp, #8]
   14090:	uxtb	r1, r1
   14094:	ldrb	r1, [sl, r1]
   14098:	strb	r1, [r4, #3]
   1409c:	mov	r4, r3
   140a0:	b	13ecc <fputs@plt+0x2870>
   140a4:	sub	r3, r5, #33	; 0x21
   140a8:	cmp	r3, #93	; 0x5d
   140ac:	bhi	14024 <fputs@plt+0x29c8>
   140b0:	cmp	r7, r4
   140b4:	bls	13d7c <fputs@plt+0x2720>
   140b8:	strb	r5, [r4]
   140bc:	add	r4, r4, #1
   140c0:	b	13ecc <fputs@plt+0x2870>
   140c4:	andeq	r7, r1, ip, ror #25
   140c8:	andeq	r7, r1, r7, lsr #28
   140cc:	andeq	r7, r1, fp, lsr #28
   140d0:	andeq	r7, r1, r4, lsr lr
   140d4:	andeq	r7, r1, r0, lsr lr
   140d8:	push	{r4, r5, r6, lr}
   140dc:	mov	r5, r0
   140e0:	cmp	r1, r0
   140e4:	bls	1414c <fputs@plt+0x2af0>
   140e8:	ldrb	r3, [r0]
   140ec:	add	r4, r0, #1
   140f0:	cmp	r3, #0
   140f4:	moveq	r0, r4
   140f8:	beq	1414c <fputs@plt+0x2af0>
   140fc:	and	r2, r3, #192	; 0xc0
   14100:	cmp	r2, #64	; 0x40
   14104:	beq	14120 <fputs@plt+0x2ac4>
   14108:	cmp	r2, #192	; 0xc0
   1410c:	beq	14148 <fputs@plt+0x2aec>
   14110:	cmp	r2, #0
   14114:	bne	1412c <fputs@plt+0x2ad0>
   14118:	add	r0, r4, r3
   1411c:	b	140e0 <fputs@plt+0x2a84>
   14120:	bl	13a7c <fputs@plt+0x2420>
   14124:	cmp	r0, #0
   14128:	bge	14140 <fputs@plt+0x2ae4>
   1412c:	bl	11644 <__errno_location@plt>
   14130:	mov	r3, #90	; 0x5a
   14134:	str	r3, [r0]
   14138:	mvn	r0, #0
   1413c:	pop	{r4, r5, r6, pc}
   14140:	add	r0, r4, r0
   14144:	b	140e0 <fputs@plt+0x2a84>
   14148:	add	r0, r0, #2
   1414c:	cmp	r1, r0
   14150:	bcc	1412c <fputs@plt+0x2ad0>
   14154:	sub	r0, r0, r5
   14158:	pop	{r4, r5, r6, pc}
   1415c:	ldrb	r2, [r0]
   14160:	ldrb	r0, [r0, #1]
   14164:	orr	r0, r0, r2, lsl #8
   14168:	bx	lr
   1416c:	ldrb	r3, [r0, #1]
   14170:	ldrb	r2, [r0]
   14174:	lsl	r3, r3, #16
   14178:	orr	r3, r3, r2, lsl #24
   1417c:	ldrb	r2, [r0, #3]
   14180:	ldrb	r0, [r0, #2]
   14184:	orr	r3, r3, r2
   14188:	orr	r0, r3, r0, lsl #8
   1418c:	bx	lr
   14190:	lsr	r3, r0, #8
   14194:	strb	r3, [r1]
   14198:	strb	r0, [r1, #1]
   1419c:	bx	lr
   141a0:	lsr	r3, r0, #24
   141a4:	strb	r3, [r1]
   141a8:	lsr	r3, r0, #16
   141ac:	strb	r3, [r1, #1]
   141b0:	lsr	r3, r0, #8
   141b4:	strb	r3, [r1, #2]
   141b8:	strb	r0, [r1, #3]
   141bc:	bx	lr
   141c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   141c4:	sub	sp, sp, #388	; 0x184
   141c8:	str	r2, [sp, #32]
   141cc:	ldr	r2, [sp, #424]	; 0x1a8
   141d0:	str	r1, [sp, #28]
   141d4:	cmp	r3, #0
   141d8:	cmpne	r2, #11
   141dc:	movle	r6, #1
   141e0:	movgt	r6, #0
   141e4:	bgt	141f0 <fputs@plt+0x2b94>
   141e8:	mvn	r0, #0
   141ec:	b	1485c <fputs@plt+0x3200>
   141f0:	mov	r5, r3
   141f4:	str	r6, [r3]
   141f8:	str	r6, [r3, #4]
   141fc:	str	r6, [r3, #8]
   14200:	strh	r6, [r3]
   14204:	ldrb	r3, [r3, #2]
   14208:	str	r5, [sp, #48]	; 0x30
   1420c:	str	r6, [sp, #52]	; 0x34
   14210:	and	r3, r3, #135	; 0x87
   14214:	orr	r3, r3, #1
   14218:	strb	r3, [r5, #2]
   1421c:	ldrb	r3, [r5, #3]
   14220:	bic	r3, r3, #15
   14224:	strb	r3, [r5, #3]
   14228:	subs	r3, r2, #16
   1422c:	str	r3, [sp, #12]
   14230:	bmi	141e8 <fputs@plt+0x2b8c>
   14234:	add	fp, sp, #128	; 0x80
   14238:	add	r3, fp, #1
   1423c:	mov	r7, r0
   14240:	mov	r8, fp
   14244:	str	r3, [sp, #40]	; 0x28
   14248:	add	r3, fp, #255	; 0xff
   1424c:	str	r3, [sp, #20]
   14250:	ldrb	r4, [r7]
   14254:	add	sl, r7, #1
   14258:	cmp	r4, #0
   1425c:	bne	142bc <fputs@plt+0x2c60>
   14260:	ldr	r3, [sp, #40]	; 0x28
   14264:	sub	r3, r3, r8
   14268:	sub	r3, r3, #1
   1426c:	ands	r1, r3, #192	; 0xc0
   14270:	bne	1453c <fputs@plt+0x2ee0>
   14274:	add	r2, sp, #380	; 0x17c
   14278:	add	r2, r2, #3
   1427c:	cmp	r8, r2
   14280:	bcs	1453c <fputs@plt+0x2ee0>
   14284:	cmp	r3, #0
   14288:	strb	r3, [r8]
   1428c:	beq	142a8 <fputs@plt+0x2c4c>
   14290:	ldr	r3, [sp, #40]	; 0x28
   14294:	cmp	r3, r2
   14298:	addcc	r2, r3, #1
   1429c:	strcc	r2, [sp, #40]	; 0x28
   142a0:	strbcc	r1, [r3]
   142a4:	bcs	1453c <fputs@plt+0x2ee0>
   142a8:	ldr	r3, [sp, #40]	; 0x28
   142ac:	add	r2, sp, #128	; 0x80
   142b0:	sub	r3, r3, r2
   142b4:	cmp	r3, #255	; 0xff
   142b8:	b	1461c <fputs@plt+0x2fc0>
   142bc:	cmp	r6, #0
   142c0:	beq	145ac <fputs@plt+0x2f50>
   142c4:	cmp	r4, #91	; 0x5b
   142c8:	bne	144fc <fputs@plt+0x2ea0>
   142cc:	mov	r1, #93	; 0x5d
   142d0:	mov	r0, sl
   142d4:	bl	1135c <strchr@plt>
   142d8:	cmp	r0, #0
   142dc:	bne	142f0 <fputs@plt+0x2c94>
   142e0:	bl	11644 <__errno_location@plt>
   142e4:	mov	r3, #22
   142e8:	str	r3, [r0]
   142ec:	b	141e8 <fputs@plt+0x2b8c>
   142f0:	add	r3, r0, #2
   142f4:	sub	sl, r3, sl
   142f8:	mov	r4, #0
   142fc:	cmp	sl, #1
   14300:	str	r3, [sp, #4]
   14304:	str	r4, [sp, #44]	; 0x2c
   14308:	ble	14930 <fputs@plt+0x32d4>
   1430c:	ldrb	r3, [r7, #1]
   14310:	cmp	r3, #120	; 0x78
   14314:	bne	14930 <fputs@plt+0x32d4>
   14318:	bl	11530 <__ctype_b_loc@plt>
   1431c:	ldrb	r3, [r7, #2]
   14320:	lsl	r3, r3, #1
   14324:	ldr	lr, [r0]
   14328:	ldrh	r3, [lr, r3]
   1432c:	tst	r3, #4096	; 0x1000
   14330:	beq	14930 <fputs@plt+0x32d4>
   14334:	add	r3, r7, #2
   14338:	str	r3, [sp, #8]
   1433c:	add	r1, sp, #128	; 0x80
   14340:	mov	r3, r4
   14344:	mov	sl, r4
   14348:	mov	r0, r4
   1434c:	add	r7, sp, #44	; 0x2c
   14350:	mov	r2, r4
   14354:	add	r1, r1, #255	; 0xff
   14358:	str	r1, [sp, #16]
   1435c:	ldmib	sp, {r1, r9}
   14360:	ldr	ip, [sp, #16]
   14364:	cmp	r1, r9
   14368:	movls	r1, #0
   1436c:	movhi	r1, #1
   14370:	cmp	r7, ip
   14374:	movcs	r1, #0
   14378:	cmp	r1, #0
   1437c:	moveq	r2, r1
   14380:	beq	143ec <fputs@plt+0x2d90>
   14384:	ldr	ip, [sp, #8]
   14388:	ldrb	r1, [ip], #1
   1438c:	cmp	r1, #47	; 0x2f
   14390:	str	ip, [sp, #8]
   14394:	beq	144ec <fputs@plt+0x2e90>
   14398:	cmp	r1, #93	; 0x5d
   1439c:	bne	1447c <fputs@plt+0x2e20>
   143a0:	cmp	r2, #0
   143a4:	beq	143d8 <fputs@plt+0x2d7c>
   143a8:	cmp	r0, #0
   143ac:	str	r3, [sp, #8]
   143b0:	beq	14930 <fputs@plt+0x32d4>
   143b4:	mov	r2, #10
   143b8:	add	r1, sp, #44	; 0x2c
   143bc:	bl	114ac <strtol@plt>
   143c0:	ldr	r1, [sp, #44]	; 0x2c
   143c4:	ldr	r3, [sp, #8]
   143c8:	ldrb	r1, [r1]
   143cc:	cmp	r1, #93	; 0x5d
   143d0:	mov	r2, r0
   143d4:	bne	14930 <fputs@plt+0x32d4>
   143d8:	cmp	r3, #0
   143dc:	lslne	r3, sl, #4
   143e0:	strbne	r3, [r7]
   143e4:	add	r9, r9, #1
   143e8:	addne	r7, r7, #1
   143ec:	ldr	r3, [sp, #20]
   143f0:	cmp	r7, r3
   143f4:	ldr	r3, [sp, #4]
   143f8:	movcc	r0, #0
   143fc:	movcs	r0, #1
   14400:	cmp	r3, r9
   14404:	orrls	r0, r0, #1
   14408:	cmp	r0, #0
   1440c:	bne	14940 <fputs@plt+0x32e4>
   14410:	cmp	r2, #0
   14414:	ble	144f4 <fputs@plt+0x2e98>
   14418:	add	r3, r2, #3
   1441c:	bic	r3, r3, #3
   14420:	cmp	r4, r3
   14424:	bne	14930 <fputs@plt+0x32d4>
   14428:	sub	r4, r4, r2
   1442c:	rsb	r4, r4, #8
   14430:	lsl	sl, sl, r4
   14434:	tst	sl, #255	; 0xff
   14438:	bne	14930 <fputs@plt+0x32d4>
   1443c:	mov	r3, #65	; 0x41
   14440:	strb	r3, [r8]
   14444:	ldr	r3, [sp, #40]	; 0x28
   14448:	cmp	r2, #256	; 0x100
   1444c:	moveq	r2, #0
   14450:	strb	r2, [r3]
   14454:	add	r3, r7, #1
   14458:	str	r3, [sp, #40]	; 0x28
   1445c:	ldrb	r3, [r9]
   14460:	add	sl, r9, #1
   14464:	cmp	r3, #0
   14468:	beq	14948 <fputs@plt+0x32ec>
   1446c:	cmp	r3, #46	; 0x2e
   14470:	bne	142e0 <fputs@plt+0x2c84>
   14474:	mov	r8, r7
   14478:	b	145a4 <fputs@plt+0x2f48>
   1447c:	sxth	ip, r1
   14480:	cmp	r2, #0
   14484:	lsl	ip, ip, #1
   14488:	ldrh	ip, [lr, ip]
   1448c:	beq	144b0 <fputs@plt+0x2e54>
   14490:	tst	ip, #2048	; 0x800
   14494:	beq	14930 <fputs@plt+0x32d4>
   14498:	cmp	r0, #0
   1449c:	bne	1435c <fputs@plt+0x2d00>
   144a0:	cmp	r1, #48	; 0x30
   144a4:	beq	14930 <fputs@plt+0x32d4>
   144a8:	mov	r0, r9
   144ac:	b	1435c <fputs@plt+0x2d00>
   144b0:	tst	ip, #4096	; 0x1000
   144b4:	beq	14930 <fputs@plt+0x32d4>
   144b8:	ldr	ip, [pc, #1168]	; 14950 <fputs@plt+0x32f4>
   144bc:	add	r4, r4, #4
   144c0:	add	r1, ip, r1
   144c4:	cmp	r4, #256	; 0x100
   144c8:	ldrb	r1, [r1, #11]
   144cc:	add	r3, r3, #4
   144d0:	add	sl, r1, sl, lsl #4
   144d4:	bgt	14930 <fputs@plt+0x32d4>
   144d8:	cmp	r3, #8
   144dc:	strbeq	sl, [r7]
   144e0:	moveq	r3, r2
   144e4:	addeq	r7, r7, #1
   144e8:	b	1435c <fputs@plt+0x2d00>
   144ec:	mov	r2, r6
   144f0:	b	1435c <fputs@plt+0x2d00>
   144f4:	mov	r2, r4
   144f8:	b	1443c <fputs@plt+0x2de0>
   144fc:	ldr	r6, [pc, #1100]	; 14950 <fputs@plt+0x32f4>
   14500:	mov	r1, r4
   14504:	mov	r0, r6
   14508:	bl	1135c <strchr@plt>
   1450c:	cmp	r0, #0
   14510:	beq	14584 <fputs@plt+0x2f28>
   14514:	ldrb	r1, [r7, #1]
   14518:	sub	r0, r0, r6
   1451c:	mov	r9, #100	; 0x64
   14520:	cmp	r1, #0
   14524:	mul	sl, r9, r0
   14528:	beq	1453c <fputs@plt+0x2ee0>
   1452c:	mov	r0, r6
   14530:	bl	1135c <strchr@plt>
   14534:	subs	r4, r0, #0
   14538:	bne	14548 <fputs@plt+0x2eec>
   1453c:	bl	11644 <__errno_location@plt>
   14540:	mov	r3, #90	; 0x5a
   14544:	b	142e8 <fputs@plt+0x2c8c>
   14548:	ldrb	r1, [r7, #2]
   1454c:	sub	r4, r4, r6
   14550:	mov	r9, #10
   14554:	cmp	r1, #0
   14558:	mla	r9, r9, r4, sl
   1455c:	add	sl, r7, #3
   14560:	beq	1453c <fputs@plt+0x2ee0>
   14564:	mov	r0, r6
   14568:	bl	1135c <strchr@plt>
   1456c:	subs	r4, r0, #0
   14570:	beq	1453c <fputs@plt+0x2ee0>
   14574:	sub	r4, r4, r6
   14578:	add	r4, r4, r9
   1457c:	cmp	r4, #255	; 0xff
   14580:	bgt	1453c <fputs@plt+0x2ee0>
   14584:	ldr	r3, [sp, #40]	; 0x28
   14588:	add	r2, sp, #128	; 0x80
   1458c:	add	r2, r2, #255	; 0xff
   14590:	cmp	r3, r2
   14594:	bcs	1453c <fputs@plt+0x2ee0>
   14598:	add	r2, r3, #1
   1459c:	str	r2, [sp, #40]	; 0x28
   145a0:	strb	r4, [r3]
   145a4:	mov	r6, #0
   145a8:	b	14650 <fputs@plt+0x2ff4>
   145ac:	cmp	r4, #92	; 0x5c
   145b0:	beq	14658 <fputs@plt+0x2ffc>
   145b4:	cmp	r4, #46	; 0x2e
   145b8:	bne	14584 <fputs@plt+0x2f28>
   145bc:	ldr	r3, [sp, #40]	; 0x28
   145c0:	sub	r3, r3, r8
   145c4:	sub	r3, r3, #1
   145c8:	ands	r6, r3, #192	; 0xc0
   145cc:	bne	1453c <fputs@plt+0x2ee0>
   145d0:	add	r2, sp, #128	; 0x80
   145d4:	add	r1, r2, #255	; 0xff
   145d8:	cmp	r8, r1
   145dc:	bcs	1453c <fputs@plt+0x2ee0>
   145e0:	strb	r3, [r8]
   145e4:	ldrb	r2, [r7, #1]
   145e8:	cmp	r2, #0
   145ec:	bne	14638 <fputs@plt+0x2fdc>
   145f0:	cmp	r3, #0
   145f4:	beq	14610 <fputs@plt+0x2fb4>
   145f8:	ldr	r3, [sp, #40]	; 0x28
   145fc:	cmp	r3, r1
   14600:	addcc	r2, r3, #1
   14604:	strcc	r2, [sp, #40]	; 0x28
   14608:	strbcc	r6, [r3]
   1460c:	bcs	1453c <fputs@plt+0x2ee0>
   14610:	ldr	r3, [sp, #40]	; 0x28
   14614:	sub	fp, r3, fp
   14618:	cmp	fp, #255	; 0xff
   1461c:	bgt	1453c <fputs@plt+0x2ee0>
   14620:	ldr	r8, [sp, #48]	; 0x30
   14624:	cmp	r8, #0
   14628:	addne	r3, sp, #52	; 0x34
   1462c:	bne	14660 <fputs@plt+0x3004>
   14630:	str	r8, [sp, #4]
   14634:	b	14678 <fputs@plt+0x301c>
   14638:	cmp	r2, #46	; 0x2e
   1463c:	cmpne	r3, #0
   14640:	beq	1453c <fputs@plt+0x2ee0>
   14644:	ldr	r8, [sp, #40]	; 0x28
   14648:	add	r3, r8, #1
   1464c:	str	r3, [sp, #40]	; 0x28
   14650:	mov	r7, sl
   14654:	b	14250 <fputs@plt+0x2bf4>
   14658:	mov	r6, #1
   1465c:	b	14650 <fputs@plt+0x2ff4>
   14660:	str	r3, [sp, #4]
   14664:	ldr	r2, [sp, #4]
   14668:	add	r3, r3, #4
   1466c:	ldr	r2, [r2]
   14670:	cmp	r2, #0
   14674:	bne	14660 <fputs@plt+0x3004>
   14678:	add	r1, sp, #128	; 0x80
   1467c:	mov	r4, #0
   14680:	mov	r6, r1
   14684:	ldrb	r7, [r1]
   14688:	and	r3, r7, #192	; 0xc0
   1468c:	cmp	r3, #192	; 0xc0
   14690:	beq	1453c <fputs@plt+0x2ee0>
   14694:	mov	r0, r1
   14698:	bl	13a7c <fputs@plt+0x2420>
   1469c:	cmp	r0, #0
   146a0:	blt	142e0 <fputs@plt+0x2c84>
   146a4:	add	r0, r0, #1
   146a8:	add	r4, r4, r0
   146ac:	cmp	r4, #255	; 0xff
   146b0:	bgt	1453c <fputs@plt+0x2ee0>
   146b4:	cmp	r7, #0
   146b8:	add	r1, r1, r0
   146bc:	bne	14684 <fputs@plt+0x3028>
   146c0:	ldr	r3, [sp, #12]
   146c4:	add	r9, r5, #12
   146c8:	ldr	sl, [sp, #4]
   146cc:	add	r3, r9, r3
   146d0:	mov	r4, r9
   146d4:	str	r3, [sp, #16]
   146d8:	mov	r3, #1
   146dc:	str	r3, [sp, #24]
   146e0:	ldrb	r3, [r6]
   146e4:	cmp	r3, #0
   146e8:	cmpne	r8, #0
   146ec:	str	r3, [sp, #20]
   146f0:	addne	r3, sp, #52	; 0x34
   146f4:	strne	r3, [sp, #8]
   146f8:	bne	14914 <fputs@plt+0x32b8>
   146fc:	ldr	r3, [sp, #20]
   14700:	and	r3, r3, #192	; 0xc0
   14704:	cmp	r3, #192	; 0xc0
   14708:	beq	1453c <fputs@plt+0x2ee0>
   1470c:	mov	r0, r6
   14710:	bl	13a7c <fputs@plt+0x2420>
   14714:	ldr	r2, [sp, #16]
   14718:	add	r7, r0, #1
   1471c:	add	r3, r4, r7
   14720:	cmp	r2, r3
   14724:	mov	fp, r0
   14728:	str	r3, [sp, #8]
   1472c:	bls	1453c <fputs@plt+0x2ee0>
   14730:	mov	r1, r6
   14734:	mov	r0, r4
   14738:	mov	r2, r7
   1473c:	bl	11488 <memcpy@plt>
   14740:	ldr	r3, [sp, #8]
   14744:	cmp	fp, #0
   14748:	add	r6, r6, r7
   1474c:	mov	r4, r3
   14750:	bne	146e0 <fputs@plt+0x3084>
   14754:	b	14814 <fputs@plt+0x31b8>
   14758:	ldr	r3, [sp, #8]
   1475c:	ldr	fp, [r3], #4
   14760:	str	r3, [sp, #8]
   14764:	ldrb	r3, [fp]
   14768:	cmp	r3, #0
   1476c:	str	r3, [sp, #12]
   14770:	beq	14914 <fputs@plt+0x32b8>
   14774:	tst	r3, #192	; 0xc0
   14778:	bne	14914 <fputs@plt+0x32b8>
   1477c:	ldr	r2, [pc, #464]	; 14954 <fputs@plt+0x32f8>
   14780:	sub	r3, fp, r8
   14784:	cmp	r3, r2
   14788:	bgt	14914 <fputs@plt+0x32b8>
   1478c:	mov	r1, fp
   14790:	mov	r7, r6
   14794:	b	148b0 <fputs@plt+0x3254>
   14798:	mov	r0, r1
   1479c:	str	r3, [sp, #36]	; 0x24
   147a0:	bl	13a7c <fputs@plt+0x2420>
   147a4:	ldrb	ip, [r7]
   147a8:	add	r2, r7, #1
   147ac:	cmp	r0, ip
   147b0:	bne	1488c <fputs@plt+0x3230>
   147b4:	add	r0, r0, #1
   147b8:	ldr	r3, [sp, #36]	; 0x24
   147bc:	add	r0, r7, r0
   147c0:	add	r1, r1, #1
   147c4:	mov	r7, r2
   147c8:	cmp	r7, r0
   147cc:	bne	14864 <fputs@plt+0x3208>
   147d0:	ldrb	r2, [r7]
   147d4:	cmp	r2, #0
   147d8:	bne	148b0 <fputs@plt+0x3254>
   147dc:	ldrb	r2, [r1]
   147e0:	cmp	r2, #0
   147e4:	bne	1488c <fputs@plt+0x3230>
   147e8:	cmp	r3, #0
   147ec:	blt	148d8 <fputs@plt+0x327c>
   147f0:	ldr	r1, [sp, #16]
   147f4:	add	r2, r4, #1
   147f8:	cmp	r1, r2
   147fc:	bls	1453c <fputs@plt+0x2ee0>
   14800:	mvn	r2, #63	; 0x3f
   14804:	orr	r2, r2, r3, asr #8
   14808:	strb	r2, [r4]
   1480c:	strb	r3, [r4, #1]
   14810:	add	r4, r4, #2
   14814:	sub	r4, r4, r9
   14818:	cmp	r4, #0
   1481c:	blt	141e8 <fputs@plt+0x2b8c>
   14820:	ldr	r3, [sp, #32]
   14824:	add	r0, r9, r4
   14828:	add	r0, r0, #4
   1482c:	lsr	r3, r3, #8
   14830:	strb	r3, [r9, r4]
   14834:	ldrb	r3, [sp, #32]
   14838:	strb	r3, [r0, #-3]
   1483c:	ldr	r3, [sp, #28]
   14840:	lsr	r3, r3, #8
   14844:	strb	r3, [r0, #-2]
   14848:	ldrb	r3, [sp, #28]
   1484c:	strb	r3, [r0, #-1]
   14850:	sub	r0, r0, r5
   14854:	mov	r3, #256	; 0x100
   14858:	strh	r3, [r5, #4]
   1485c:	add	sp, sp, #388	; 0x184
   14860:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14864:	ldrb	r2, [r7], #1
   14868:	sub	ip, r2, #65	; 0x41
   1486c:	cmp	ip, #25
   14870:	ldrb	ip, [r1], #1
   14874:	addls	r2, r2, #32
   14878:	sub	lr, ip, #65	; 0x41
   1487c:	cmp	lr, #25
   14880:	addls	ip, ip, #32
   14884:	cmp	ip, r2
   14888:	beq	147c8 <fputs@plt+0x316c>
   1488c:	ldr	r3, [sp, #12]
   14890:	add	r3, r3, #1
   14894:	add	fp, fp, r3
   14898:	b	14764 <fputs@plt+0x3108>
   1489c:	ldrb	r1, [r1, #1]
   148a0:	lsl	r2, r2, #8
   148a4:	and	r2, r2, #16128	; 0x3f00
   148a8:	orr	r1, r2, r1
   148ac:	add	r1, r8, r1
   148b0:	ldrb	r2, [r1]
   148b4:	cmp	r2, #0
   148b8:	beq	1488c <fputs@plt+0x3230>
   148bc:	ands	r0, r2, #192	; 0xc0
   148c0:	beq	14798 <fputs@plt+0x313c>
   148c4:	cmp	r0, #192	; 0xc0
   148c8:	beq	1489c <fputs@plt+0x3240>
   148cc:	bl	11644 <__errno_location@plt>
   148d0:	mov	r3, #90	; 0x5a
   148d4:	str	r3, [r0]
   148d8:	add	r3, sp, #124	; 0x7c
   148dc:	cmp	sl, r3
   148e0:	bcs	146fc <fputs@plt+0x30a0>
   148e4:	ldr	r2, [pc, #104]	; 14954 <fputs@plt+0x32f8>
   148e8:	sub	r3, r4, r8
   148ec:	cmp	r3, r2
   148f0:	bgt	146fc <fputs@plt+0x30a0>
   148f4:	ldr	r3, [sp, #24]
   148f8:	cmp	r3, #0
   148fc:	movne	r3, #0
   14900:	strne	r4, [sl]
   14904:	strne	r3, [sl, #4]
   14908:	strne	r3, [sp, #24]
   1490c:	addne	sl, sl, #4
   14910:	b	146fc <fputs@plt+0x30a0>
   14914:	ldr	r3, [sp, #4]
   14918:	ldr	r2, [sp, #8]
   1491c:	cmp	r3, r2
   14920:	bhi	14758 <fputs@plt+0x30fc>
   14924:	bl	11644 <__errno_location@plt>
   14928:	mov	r3, #2
   1492c:	b	148d4 <fputs@plt+0x3278>
   14930:	mov	r4, #22
   14934:	bl	11644 <__errno_location@plt>
   14938:	str	r4, [r0]
   1493c:	b	141e8 <fputs@plt+0x2b8c>
   14940:	mov	r4, #90	; 0x5a
   14944:	b	14934 <fputs@plt+0x32d8>
   14948:	strb	r3, [r7]
   1494c:	b	142a8 <fputs@plt+0x2c4c>
   14950:	andeq	r7, r1, ip, ror #25
   14954:	strdeq	r3, [r0], -pc	; <UNPREDICTABLE>
   14958:	ldr	r0, [r2]
   1495c:	push	{r4, lr}
   14960:	bl	114dc <atoi@plt>
   14964:	subs	r2, r0, #0
   14968:	bge	14980 <fputs@plt+0x3324>
   1496c:	mov	r0, #67	; 0x43
   14970:	ldr	r1, [pc, #20]	; 1498c <fputs@plt+0x3330>
   14974:	bl	12120 <fputs@plt+0xac4>
   14978:	mov	r0, #3
   1497c:	bl	11638 <exit@plt>
   14980:	ldr	r3, [pc, #8]	; 14990 <fputs@plt+0x3334>
   14984:	str	r2, [r3]
   14988:	pop	{r4, pc}
   1498c:	andeq	r7, r1, r8, ror #28
   14990:	andeq	r9, r2, ip, ror #26
   14994:	cmp	r0, #0
   14998:	bxeq	lr
   1499c:	b	11410 <free@plt>
   149a0:	ldr	r3, [pc, #60]	; 149e4 <fputs@plt+0x3388>
   149a4:	push	{r4, r5, r6, lr}
   149a8:	mov	r6, r0
   149ac:	ldr	r4, [r3]
   149b0:	cmp	r4, #0
   149b4:	bne	149c4 <fputs@plt+0x3368>
   149b8:	mov	r5, r4
   149bc:	mov	r0, r5
   149c0:	pop	{r4, r5, r6, pc}
   149c4:	ldr	r5, [r4]
   149c8:	mov	r1, r6
   149cc:	mov	r0, r5
   149d0:	bl	11374 <strcasecmp@plt>
   149d4:	cmp	r0, #0
   149d8:	beq	149bc <fputs@plt+0x3360>
   149dc:	ldr	r4, [r4, #8]
   149e0:	b	149b0 <fputs@plt+0x3354>
   149e4:	andeq	sp, r2, r0, ror #31
   149e8:	ldr	r3, [pc, #88]	; 14a48 <fputs@plt+0x33ec>
   149ec:	push	{r4, r5, r6, r7, r8, lr}
   149f0:	mov	r6, r0
   149f4:	ldr	r4, [r3]
   149f8:	mov	r7, r1
   149fc:	cmp	r4, #0
   14a00:	bne	14a0c <fputs@plt+0x33b0>
   14a04:	mov	r0, #1
   14a08:	pop	{r4, r5, r6, r7, r8, pc}
   14a0c:	ldr	r5, [r4]
   14a10:	mov	r1, r7
   14a14:	ldr	r0, [r5, #16]
   14a18:	bl	11374 <strcasecmp@plt>
   14a1c:	cmp	r0, #0
   14a20:	ldrne	r4, [r4, #8]
   14a24:	bne	149fc <fputs@plt+0x33a0>
   14a28:	ldr	r2, [r5, #12]
   14a2c:	ldr	r3, [r6, #464]	; 0x1d0
   14a30:	add	r3, r3, r2, lsl #4
   14a34:	ldr	r0, [r3, #12]
   14a38:	sub	r0, r0, #2
   14a3c:	clz	r0, r0
   14a40:	lsr	r0, r0, #5
   14a44:	pop	{r4, r5, r6, r7, r8, pc}
   14a48:	andeq	lr, r2, ip, ror r1
   14a4c:	push	{r4, lr}
   14a50:	mov	r1, r0
   14a54:	mov	r0, #1
   14a58:	bl	11380 <calloc@plt>
   14a5c:	cmp	r0, #0
   14a60:	popne	{r4, pc}
   14a64:	bl	11524 <rb_outofmemory@plt>
   14a68:	cmp	r0, #0
   14a6c:	push	{r4, lr}
   14a70:	bne	14a88 <fputs@plt+0x342c>
   14a74:	ldr	r3, [pc, #124]	; 14af8 <fputs@plt+0x349c>
   14a78:	ldr	r1, [pc, #124]	; 14afc <fputs@plt+0x34a0>
   14a7c:	ldr	r0, [pc, #124]	; 14b00 <fputs@plt+0x34a4>
   14a80:	mov	r2, #143	; 0x8f
   14a84:	bl	113e0 <__assert_fail@plt>
   14a88:	cmp	r1, #0
   14a8c:	ldreq	r3, [pc, #100]	; 14af8 <fputs@plt+0x349c>
   14a90:	moveq	r2, #144	; 0x90
   14a94:	ldreq	r1, [pc, #96]	; 14afc <fputs@plt+0x34a0>
   14a98:	ldreq	r0, [pc, #100]	; 14b04 <fputs@plt+0x34a8>
   14a9c:	beq	14a84 <fputs@plt+0x3428>
   14aa0:	cmp	r2, #0
   14aa4:	ldreq	r3, [pc, #76]	; 14af8 <fputs@plt+0x349c>
   14aa8:	moveq	r2, #145	; 0x91
   14aac:	ldreq	r1, [pc, #72]	; 14afc <fputs@plt+0x34a0>
   14ab0:	ldreq	r0, [pc, #80]	; 14b08 <fputs@plt+0x34ac>
   14ab4:	beq	14a84 <fputs@plt+0x3428>
   14ab8:	mov	r3, #0
   14abc:	str	r3, [r1, #4]
   14ac0:	ldr	r3, [r2]
   14ac4:	str	r0, [r1]
   14ac8:	cmp	r3, #0
   14acc:	str	r3, [r1, #8]
   14ad0:	strne	r1, [r3, #4]
   14ad4:	bne	14ae4 <fputs@plt+0x3488>
   14ad8:	ldr	r3, [r2, #4]
   14adc:	cmp	r3, #0
   14ae0:	streq	r1, [r2, #4]
   14ae4:	ldr	r3, [r2, #8]
   14ae8:	str	r1, [r2]
   14aec:	add	r3, r3, #1
   14af0:	str	r3, [r2, #8]
   14af4:	pop	{r4, pc}
   14af8:	andeq	r7, r1, r9, lsr lr
   14afc:	ldrdeq	r7, [r1], -lr
   14b00:	andeq	r7, r1, r1, lsl sl
   14b04:	strdeq	r7, [r1], -sl
   14b08:	andeq	r7, r1, r4, lsl #20
   14b0c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14b10:	sub	sp, sp, #28
   14b14:	ldr	r4, [r2, #8]
   14b18:	mov	r3, #0
   14b1c:	mov	r0, r4
   14b20:	mov	r6, r2
   14b24:	str	r3, [sp, #12]
   14b28:	str	r3, [sp, #16]
   14b2c:	str	r3, [sp, #20]
   14b30:	bl	11464 <strlen@plt>
   14b34:	add	r0, r0, #1
   14b38:	bl	11554 <malloc@plt>
   14b3c:	subs	r8, r0, #0
   14b40:	bne	14b48 <fputs@plt+0x34ec>
   14b44:	bl	11524 <rb_outofmemory@plt>
   14b48:	mov	r1, r4
   14b4c:	bl	114c4 <strcpy@plt>
   14b50:	ldrb	r3, [r8]
   14b54:	cmp	r3, #42	; 0x2a
   14b58:	bne	14b9c <fputs@plt+0x3540>
   14b5c:	mov	r0, r8
   14b60:	bl	14994 <fputs@plt+0x3338>
   14b64:	ldr	r0, [r6, #4]
   14b68:	bl	114dc <atoi@plt>
   14b6c:	ldr	r7, [r6]
   14b70:	ldr	r6, [r6, #12]
   14b74:	cmp	r6, #0
   14b78:	cmpne	r7, #0
   14b7c:	moveq	r5, #1
   14b80:	movne	r5, #0
   14b84:	ands	r8, r0, #3
   14b88:	orreq	r5, r5, #1
   14b8c:	cmp	r5, #0
   14b90:	beq	14c94 <fputs@plt+0x3638>
   14b94:	ldr	r1, [pc, #416]	; 14d3c <fputs@plt+0x36e0>
   14b98:	b	14c0c <fputs@plt+0x35b0>
   14b9c:	add	r2, sp, #8
   14ba0:	ldr	r1, [pc, #408]	; 14d40 <fputs@plt+0x36e4>
   14ba4:	mov	r0, r8
   14ba8:	bl	11350 <rb_strtok_r@plt>
   14bac:	mov	sl, #1
   14bb0:	mov	r7, r0
   14bb4:	cmp	r7, #0
   14bb8:	beq	14b5c <fputs@plt+0x3500>
   14bbc:	mov	r0, #72	; 0x48
   14bc0:	bl	14a4c <fputs@plt+0x33f0>
   14bc4:	mov	fp, #2
   14bc8:	sub	r2, r7, #1
   14bcc:	mov	r4, #0
   14bd0:	mov	r9, r0
   14bd4:	ldrb	r5, [r2, #1]!
   14bd8:	cmp	r5, #0
   14bdc:	bne	14bf4 <fputs@plt+0x3598>
   14be0:	sub	r4, r4, #1
   14be4:	cmp	r4, #1
   14be8:	bhi	14c58 <fputs@plt+0x35fc>
   14bec:	ldr	r1, [pc, #336]	; 14d44 <fputs@plt+0x36e8>
   14bf0:	b	14c0c <fputs@plt+0x35b0>
   14bf4:	cmp	r5, #46	; 0x2e
   14bf8:	bne	14c18 <fputs@plt+0x35bc>
   14bfc:	add	r4, r4, #1
   14c00:	cmp	r4, #3
   14c04:	ble	14c50 <fputs@plt+0x35f4>
   14c08:	ldr	r1, [pc, #312]	; 14d48 <fputs@plt+0x36ec>
   14c0c:	mov	r0, #67	; 0x43
   14c10:	bl	12120 <fputs@plt+0xac4>
   14c14:	b	14c48 <fputs@plt+0x35ec>
   14c18:	str	r2, [sp, #4]
   14c1c:	bl	11530 <__ctype_b_loc@plt>
   14c20:	lsl	r3, r5, #1
   14c24:	ldr	r2, [sp, #4]
   14c28:	ldr	r1, [r0]
   14c2c:	ldrh	r3, [r1, r3]
   14c30:	tst	r3, #2048	; 0x800
   14c34:	bne	14bd4 <fputs@plt+0x3578>
   14c38:	mov	r2, r5
   14c3c:	ldr	r1, [pc, #264]	; 14d4c <fputs@plt+0x36f0>
   14c40:	mov	r0, #67	; 0x43
   14c44:	bl	12120 <fputs@plt+0xac4>
   14c48:	mov	r0, #3
   14c4c:	bl	11638 <exit@plt>
   14c50:	mov	fp, sl
   14c54:	b	14bd4 <fputs@plt+0x3578>
   14c58:	mov	r0, r9
   14c5c:	mov	r1, r7
   14c60:	mov	r2, #53	; 0x35
   14c64:	str	fp, [r0], #4
   14c68:	bl	113ec <rb_strlcpy@plt>
   14c6c:	add	r2, sp, #12
   14c70:	add	r1, r9, #60	; 0x3c
   14c74:	mov	r0, r9
   14c78:	bl	14a68 <fputs@plt+0x340c>
   14c7c:	add	r2, sp, #8
   14c80:	ldr	r1, [pc, #184]	; 14d40 <fputs@plt+0x36e4>
   14c84:	mov	r0, r5
   14c88:	bl	11350 <rb_strtok_r@plt>
   14c8c:	mov	r7, r0
   14c90:	b	14bb4 <fputs@plt+0x3558>
   14c94:	mov	r0, r7
   14c98:	bl	149a0 <fputs@plt+0x3344>
   14c9c:	subs	r4, r0, #0
   14ca0:	strbne	r5, [r4, #784]	; 0x310
   14ca4:	bne	14cc8 <fputs@plt+0x366c>
   14ca8:	mov	r0, #800	; 0x320
   14cac:	bl	14a4c <fputs@plt+0x33f0>
   14cb0:	mov	r4, r0
   14cb4:	bl	115d8 <rb_make_rb_dlink_node@plt>
   14cb8:	ldr	r2, [pc, #144]	; 14d50 <fputs@plt+0x36f4>
   14cbc:	mov	r1, r0
   14cc0:	mov	r0, r4
   14cc4:	bl	14a68 <fputs@plt+0x340c>
   14cc8:	mov	r2, #256	; 0x100
   14ccc:	mov	r1, r7
   14cd0:	mov	r0, r4
   14cd4:	bl	113ec <rb_strlcpy@plt>
   14cd8:	mov	r2, #512	; 0x200
   14cdc:	mov	r1, r6
   14ce0:	add	r0, r4, #256	; 0x100
   14ce4:	bl	113ec <rb_strlcpy@plt>
   14ce8:	ldr	r2, [sp, #12]
   14cec:	strb	r8, [r4, #768]	; 0x300
   14cf0:	cmp	r2, #0
   14cf4:	beq	14d2c <fputs@plt+0x36d0>
   14cf8:	ldr	r1, [r4, #772]	; 0x304
   14cfc:	ldr	ip, [sp, #20]
   14d00:	cmp	r1, #0
   14d04:	ldr	r0, [sp, #16]
   14d08:	ldrne	r3, [r4, #780]	; 0x30c
   14d0c:	streq	r2, [r4, #772]	; 0x304
   14d10:	addne	r3, r3, ip
   14d14:	strne	r1, [r0, #8]
   14d18:	streq	r0, [r4, #776]	; 0x308
   14d1c:	strne	r0, [r1, #4]
   14d20:	streq	ip, [r4, #780]	; 0x30c
   14d24:	strne	r2, [r4, #772]	; 0x304
   14d28:	strne	r3, [r4, #780]	; 0x30c
   14d2c:	mov	r3, #0
   14d30:	str	r3, [r4, #796]	; 0x31c
   14d34:	add	sp, sp, #28
   14d38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14d3c:	andeq	r7, r1, r7, asr pc
   14d40:	andeq	r7, r1, sp, lsl #29
   14d44:	andeq	r7, r1, r9, lsl pc
   14d48:	andeq	r7, r1, pc, lsl #29
   14d4c:	andeq	r7, r1, r9, asr #29
   14d50:	andeq	sp, r2, r0, ror #31
   14d54:	cmp	r0, #0
   14d58:	push	{r4, lr}
   14d5c:	bne	14d74 <fputs@plt+0x3718>
   14d60:	ldr	r3, [pc, #100]	; 14dcc <fputs@plt+0x3770>
   14d64:	ldr	r1, [pc, #100]	; 14dd0 <fputs@plt+0x3774>
   14d68:	ldr	r0, [pc, #100]	; 14dd4 <fputs@plt+0x3778>
   14d6c:	mov	r2, #235	; 0xeb
   14d70:	bl	113e0 <__assert_fail@plt>
   14d74:	cmp	r1, #0
   14d78:	ldreq	r3, [pc, #76]	; 14dcc <fputs@plt+0x3770>
   14d7c:	moveq	r2, #236	; 0xec
   14d80:	ldreq	r1, [pc, #72]	; 14dd0 <fputs@plt+0x3774>
   14d84:	ldreq	r0, [pc, #76]	; 14dd8 <fputs@plt+0x377c>
   14d88:	beq	14d70 <fputs@plt+0x3714>
   14d8c:	ldr	r3, [r0, #8]
   14d90:	ldr	r2, [r0, #4]
   14d94:	cmp	r3, #0
   14d98:	strne	r2, [r3, #4]
   14d9c:	streq	r2, [r1, #4]
   14da0:	ldr	r2, [r0, #4]
   14da4:	cmp	r2, #0
   14da8:	strne	r3, [r2, #8]
   14dac:	streq	r3, [r1]
   14db0:	mov	r3, #0
   14db4:	str	r3, [r0, #4]
   14db8:	str	r3, [r0, #8]
   14dbc:	ldr	r3, [r1, #8]
   14dc0:	sub	r3, r3, #1
   14dc4:	str	r3, [r1, #8]
   14dc8:	pop	{r4, pc}
   14dcc:	andeq	r7, r1, r5, asr #28
   14dd0:	ldrdeq	r7, [r1], -lr
   14dd4:	strdeq	r7, [r1], -sl
   14dd8:	andeq	r7, r1, r4, lsl #20
   14ddc:	subs	r1, r0, #0
   14de0:	push	{r4, lr}
   14de4:	ldrne	r3, [pc, #124]	; 14e68 <fputs@plt+0x380c>
   14de8:	ldrne	r0, [r3]
   14dec:	bne	14e18 <fputs@plt+0x37bc>
   14df0:	ldr	r3, [pc, #116]	; 14e6c <fputs@plt+0x3810>
   14df4:	mov	r2, #288	; 0x120
   14df8:	ldr	r1, [pc, #112]	; 14e70 <fputs@plt+0x3814>
   14dfc:	ldr	r0, [pc, #112]	; 14e74 <fputs@plt+0x3818>
   14e00:	bl	113e0 <__assert_fail@plt>
   14e04:	ldr	r2, [r0]
   14e08:	cmp	r1, r2
   14e0c:	ldr	r2, [r0, #8]
   14e10:	beq	14e24 <fputs@plt+0x37c8>
   14e14:	mov	r0, r2
   14e18:	cmp	r0, #0
   14e1c:	bne	14e04 <fputs@plt+0x37a8>
   14e20:	pop	{r4, pc}
   14e24:	ldr	r1, [r0, #4]
   14e28:	cmp	r2, #0
   14e2c:	strne	r1, [r2, #4]
   14e30:	streq	r1, [r3, #4]
   14e34:	ldr	r1, [r0, #4]
   14e38:	cmp	r1, #0
   14e3c:	strne	r2, [r1, #8]
   14e40:	streq	r2, [r3]
   14e44:	mov	r2, #0
   14e48:	str	r2, [r0, #4]
   14e4c:	str	r2, [r0, #8]
   14e50:	ldr	r2, [r3, #8]
   14e54:	sub	r2, r2, #1
   14e58:	str	r2, [r3, #8]
   14e5c:	bl	11494 <rb_free_rb_dlink_node@plt>
   14e60:	mov	r0, #1
   14e64:	pop	{r4, pc}
   14e68:	andeq	sp, r2, r0, ror #31
   14e6c:	andeq	r7, r1, r4, asr lr
   14e70:	ldrdeq	r7, [r1], -lr
   14e74:	andeq	r7, r1, r1, lsl sl
   14e78:	ldr	r3, [r0, #788]	; 0x314
   14e7c:	ldrb	r2, [r0, #784]	; 0x310
   14e80:	sub	r3, r3, #1
   14e84:	str	r3, [r0, #788]	; 0x314
   14e88:	cmp	r3, #0
   14e8c:	movgt	r3, #0
   14e90:	andle	r3, r2, #1
   14e94:	cmp	r3, #0
   14e98:	bxeq	lr
   14e9c:	push	{r4, r5, r6, r7, r8, lr}
   14ea0:	mov	r4, r0
   14ea4:	ldr	r5, [r0, #772]	; 0x304
   14ea8:	cmp	r5, #0
   14eac:	addne	r7, r0, #772	; 0x304
   14eb0:	ldrne	r6, [r5, #8]
   14eb4:	bne	14ecc <fputs@plt+0x3870>
   14eb8:	mov	r0, r4
   14ebc:	bl	14ddc <fputs@plt+0x3780>
   14ec0:	mov	r0, r4
   14ec4:	pop	{r4, r5, r6, r7, r8, lr}
   14ec8:	b	14994 <fputs@plt+0x3338>
   14ecc:	mov	r1, r7
   14ed0:	mov	r0, r5
   14ed4:	bl	14d54 <fputs@plt+0x36f8>
   14ed8:	mov	r0, r5
   14edc:	bl	14994 <fputs@plt+0x3338>
   14ee0:	cmp	r6, #0
   14ee4:	beq	14eb8 <fputs@plt+0x385c>
   14ee8:	mov	r5, r6
   14eec:	ldr	r6, [r6, #8]
   14ef0:	b	14ecc <fputs@plt+0x3870>
   14ef4:	push	{r4, r5, r6, lr}
   14ef8:	ldr	r5, [r2]
   14efc:	mov	r0, r5
   14f00:	bl	149a0 <fputs@plt+0x3344>
   14f04:	subs	r4, r0, #0
   14f08:	bne	14f20 <fputs@plt+0x38c4>
   14f0c:	mov	r2, r5
   14f10:	ldr	r1, [pc, #48]	; 14f48 <fputs@plt+0x38ec>
   14f14:	mov	r0, #87	; 0x57
   14f18:	pop	{r4, r5, r6, lr}
   14f1c:	b	12120 <fputs@plt+0xac4>
   14f20:	ldr	r3, [r4, #788]	; 0x314
   14f24:	cmp	r3, #0
   14f28:	ble	14f38 <fputs@plt+0x38dc>
   14f2c:	mov	r3, #1
   14f30:	strb	r3, [r4, #784]	; 0x310
   14f34:	pop	{r4, r5, r6, pc}
   14f38:	bl	14ddc <fputs@plt+0x3780>
   14f3c:	mov	r0, r4
   14f40:	pop	{r4, r5, r6, lr}
   14f44:	b	14994 <fputs@plt+0x3338>
   14f48:	andeq	r7, r1, r4, lsl #31
   14f4c:	ldr	r3, [pc, #76]	; 14fa0 <fputs@plt+0x3944>
   14f50:	ldr	r3, [r3]
   14f54:	cmp	r3, #0
   14f58:	bxeq	lr
   14f5c:	push	{r4, r5, r6, lr}
   14f60:	mov	r6, #1
   14f64:	ldr	r4, [r3, #8]
   14f68:	ldr	r5, [r3]
   14f6c:	ldr	r3, [r5, #788]	; 0x314
   14f70:	cmp	r3, #0
   14f74:	strbgt	r6, [r5, #784]	; 0x310
   14f78:	bgt	14f8c <fputs@plt+0x3930>
   14f7c:	mov	r0, r5
   14f80:	bl	14ddc <fputs@plt+0x3780>
   14f84:	mov	r0, r5
   14f88:	bl	14994 <fputs@plt+0x3338>
   14f8c:	cmp	r4, #0
   14f90:	popeq	{r4, r5, r6, pc}
   14f94:	mov	r3, r4
   14f98:	ldr	r4, [r4, #8]
   14f9c:	b	14f68 <fputs@plt+0x390c>
   14fa0:	andeq	sp, r2, r0, ror #31
   14fa4:	b	14f4c <fputs@plt+0x38f0>
   14fa8:	ldr	r2, [pc, #220]	; 1508c <fputs@plt+0x3a30>
   14fac:	ldr	r3, [r0, #464]	; 0x1d0
   14fb0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14fb4:	ldr	ip, [r2, #16]
   14fb8:	add	r3, r3, ip, lsl #4
   14fbc:	ldr	r5, [r3, #8]
   14fc0:	cmp	r5, #0
   14fc4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   14fc8:	ldr	r3, [r5, #12]
   14fcc:	mov	r9, r2
   14fd0:	cmp	r3, #0
   14fd4:	mov	r4, r0
   14fd8:	bne	15030 <fputs@plt+0x39d4>
   14fdc:	mov	r0, r5
   14fe0:	bl	14994 <fputs@plt+0x3338>
   14fe4:	ldr	r1, [r9, #16]
   14fe8:	ldr	r2, [r4, #464]	; 0x1d0
   14fec:	mov	r0, #0
   14ff0:	lsl	ip, r1, #4
   14ff4:	add	r2, r2, ip
   14ff8:	str	r0, [r2, #8]
   14ffc:	ldr	r3, [r4, #464]	; 0x1d0
   15000:	add	r3, r3, ip
   15004:	str	r0, [r3, #4]
   15008:	mov	r0, r4
   1500c:	bl	12908 <fputs@plt+0x12ac>
   15010:	ldr	r3, [r4, #460]	; 0x1cc
   15014:	sub	r3, r3, #1
   15018:	cmp	r3, #0
   1501c:	str	r3, [r4, #460]	; 0x1cc
   15020:	popne	{r4, r5, r6, r7, r8, r9, sl, pc}
   15024:	mov	r0, r4
   15028:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   1502c:	b	12594 <fputs@plt+0xf38>
   15030:	ldr	r0, [r0]
   15034:	bl	120c8 <fputs@plt+0xa6c>
   15038:	ldr	r3, [r5, #4]
   1503c:	cmp	r3, #0
   15040:	beq	14fdc <fputs@plt+0x3980>
   15044:	ldr	r6, [r3, #8]
   15048:	add	sl, r5, #4
   1504c:	ldr	r7, [r3]
   15050:	mov	r8, r7
   15054:	ldr	r0, [r7, #8]
   15058:	bl	11ee8 <fputs@plt+0x88c>
   1505c:	ldr	r0, [r8], #12
   15060:	bl	14e78 <fputs@plt+0x381c>
   15064:	mov	r1, sl
   15068:	mov	r0, r8
   1506c:	bl	14d54 <fputs@plt+0x36f8>
   15070:	mov	r0, r7
   15074:	bl	14994 <fputs@plt+0x3338>
   15078:	cmp	r6, #0
   1507c:	beq	14fdc <fputs@plt+0x3980>
   15080:	mov	r3, r6
   15084:	ldr	r6, [r6, #8]
   15088:	b	1504c <fputs@plt+0x39f0>
   1508c:	andeq	r9, r2, ip, ror #26
   15090:	ldrh	r3, [r0, #248]	; 0xf8
   15094:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15098:	mov	r4, r0
   1509c:	cmp	r3, #2
   150a0:	sub	sp, sp, #268	; 0x10c
   150a4:	beq	150c4 <fputs@plt+0x3a68>
   150a8:	cmp	r3, #10
   150ac:	moveq	fp, #2
   150b0:	beq	150c8 <fputs@plt+0x3a6c>
   150b4:	ldr	r1, [pc, #328]	; 15204 <fputs@plt+0x3ba8>
   150b8:	mov	r0, r4
   150bc:	bl	14fa8 <fputs@plt+0x394c>
   150c0:	b	1512c <fputs@plt+0x3ad0>
   150c4:	mov	fp, #1
   150c8:	ldr	r7, [pc, #312]	; 15208 <fputs@plt+0x3bac>
   150cc:	ldr	r3, [r4, #464]	; 0x1d0
   150d0:	mov	r9, r4
   150d4:	ldr	r2, [r7, #16]
   150d8:	ldr	r1, [pc, #300]	; 1520c <fputs@plt+0x3bb0>
   150dc:	ldr	r0, [r9], #248	; 0xf8
   150e0:	add	r3, r3, r2, lsl #4
   150e4:	ldr	sl, [r3, #8]
   150e8:	mov	r3, #1
   150ec:	strb	r3, [sl]
   150f0:	bl	120c8 <fputs@plt+0xa6c>
   150f4:	ldr	r3, [pc, #276]	; 15210 <fputs@plt+0x3bb4>
   150f8:	ldr	r8, [r3]
   150fc:	cmp	r8, #0
   15100:	bne	15134 <fputs@plt+0x3ad8>
   15104:	ldr	r3, [sl, #12]
   15108:	cmp	r3, #0
   1510c:	beq	150b4 <fputs@plt+0x3a58>
   15110:	ldr	r3, [r7, #16]
   15114:	ldr	r4, [r4, #464]	; 0x1d0
   15118:	ldr	r5, [r7]
   1511c:	add	r4, r4, r3, lsl #4
   15120:	bl	11470 <rb_current_time@plt>
   15124:	add	r0, r5, r0
   15128:	str	r0, [r4, #4]
   1512c:	add	sp, sp, #268	; 0x10c
   15130:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15134:	ldr	r5, [r8]
   15138:	ldrb	r3, [r5, #784]	; 0x310
   1513c:	cmp	r3, #0
   15140:	bne	15198 <fputs@plt+0x3b3c>
   15144:	ldrb	r3, [r5, #768]	; 0x300
   15148:	tst	r3, fp
   1514c:	beq	15198 <fputs@plt+0x3b3c>
   15150:	mov	r0, #24
   15154:	bl	14a4c <fputs@plt+0x33f0>
   15158:	ldr	r2, [r7, #16]
   1515c:	ldr	r3, [r4, #464]	; 0x1d0
   15160:	add	r3, r3, r2, lsl #4
   15164:	ldr	r3, [r3, #8]
   15168:	str	r3, [sp, #4]
   1516c:	ldrh	r3, [r4, #248]	; 0xf8
   15170:	cmp	r3, #2
   15174:	mov	r6, r0
   15178:	str	r5, [r0]
   1517c:	str	r4, [r0, #4]
   15180:	bne	151a0 <fputs@plt+0x3b44>
   15184:	ldrb	r3, [r5, #768]	; 0x300
   15188:	tst	r3, #1
   1518c:	bne	151b4 <fputs@plt+0x3b58>
   15190:	mov	r0, r6
   15194:	bl	14994 <fputs@plt+0x3338>
   15198:	ldr	r8, [r8, #8]
   1519c:	b	150fc <fputs@plt+0x3aa0>
   151a0:	cmp	r3, #10
   151a4:	bne	151b4 <fputs@plt+0x3b58>
   151a8:	ldrb	r3, [r5, #768]	; 0x300
   151ac:	tst	r3, #2
   151b0:	b	1518c <fputs@plt+0x3b30>
   151b4:	mov	r3, r5
   151b8:	mov	r2, r9
   151bc:	mov	r1, #256	; 0x100
   151c0:	add	r0, sp, #8
   151c4:	bl	131a8 <fputs@plt+0x1b4c>
   151c8:	mov	r3, r6
   151cc:	ldr	r2, [pc, #64]	; 15214 <fputs@plt+0x3bb8>
   151d0:	mov	r1, #2
   151d4:	add	r0, sp, #8
   151d8:	bl	11d88 <fputs@plt+0x72c>
   151dc:	ldr	r3, [sp, #4]
   151e0:	add	r1, r6, #12
   151e4:	add	r2, r3, #4
   151e8:	str	r0, [r6, #8]
   151ec:	mov	r0, r6
   151f0:	bl	14a68 <fputs@plt+0x340c>
   151f4:	ldr	r3, [r5, #788]	; 0x314
   151f8:	add	r3, r3, #1
   151fc:	str	r3, [r5, #788]	; 0x314
   15200:	b	15198 <fputs@plt+0x3b3c>
   15204:	ldrdeq	r7, [r1], -r4
   15208:	andeq	r9, r2, ip, ror #26
   1520c:			; <UNDEFINED> instruction: 0x00017fb0
   15210:	andeq	sp, r2, r0, ror #31
   15214:	andeq	r5, r1, r0, lsr r3
   15218:	ldr	r3, [pc, #88]	; 15278 <fputs@plt+0x3c1c>
   1521c:	ldr	r2, [r3, #16]
   15220:	ldr	r3, [r0, #464]	; 0x1d0
   15224:	add	r3, r3, r2, lsl #4
   15228:	ldr	r3, [r3, #8]
   1522c:	cmp	r3, #0
   15230:	bxeq	lr
   15234:	ldrb	r3, [r3]
   15238:	cmp	r3, #0
   1523c:	bxne	lr
   15240:	push	{r4, lr}
   15244:	mov	r4, r0
   15248:	ldr	r1, [pc, #44]	; 1527c <fputs@plt+0x3c20>
   1524c:	bl	149e8 <fputs@plt+0x338c>
   15250:	cmp	r0, #0
   15254:	popeq	{r4, pc}
   15258:	ldr	r1, [pc, #32]	; 15280 <fputs@plt+0x3c24>
   1525c:	mov	r0, r4
   15260:	bl	149e8 <fputs@plt+0x338c>
   15264:	cmp	r0, #0
   15268:	popeq	{r4, pc}
   1526c:	mov	r0, r4
   15270:	pop	{r4, lr}
   15274:	b	15090 <fputs@plt+0x3a34>
   15278:	andeq	r9, r2, ip, ror #26
   1527c:	andeq	r7, r1, pc, ror #31
   15280:	andeq	r8, r1, lr, lsr r1
   15284:	ldr	r3, [pc, #124]	; 15308 <fputs@plt+0x3cac>
   15288:	push	{r4, r5, r6, lr}
   1528c:	ldr	r3, [r3, #8]
   15290:	ldr	r2, [pc, #116]	; 1530c <fputs@plt+0x3cb0>
   15294:	cmp	r3, #0
   15298:	bne	152ac <fputs@plt+0x3c50>
   1529c:	ldr	r1, [r2, #16]
   152a0:	bl	12908 <fputs@plt+0x12ac>
   152a4:	mov	r0, #1
   152a8:	pop	{r4, r5, r6, pc}
   152ac:	ldr	r3, [r0, #460]	; 0x1cc
   152b0:	mov	r4, r0
   152b4:	add	r3, r3, #1
   152b8:	str	r3, [r0, #460]	; 0x1cc
   152bc:	mov	r0, #16
   152c0:	ldr	r5, [r2, #16]
   152c4:	bl	14a4c <fputs@plt+0x33f0>
   152c8:	ldr	r3, [r4, #464]	; 0x1d0
   152cc:	ldr	r1, [pc, #60]	; 15310 <fputs@plt+0x3cb4>
   152d0:	add	r3, r3, r5, lsl #4
   152d4:	str	r0, [r3, #8]
   152d8:	mov	r0, r4
   152dc:	bl	149e8 <fputs@plt+0x338c>
   152e0:	cmp	r0, #0
   152e4:	beq	152a4 <fputs@plt+0x3c48>
   152e8:	ldr	r1, [pc, #36]	; 15314 <fputs@plt+0x3cb8>
   152ec:	mov	r0, r4
   152f0:	bl	149e8 <fputs@plt+0x338c>
   152f4:	cmp	r0, #0
   152f8:	beq	152a4 <fputs@plt+0x3c48>
   152fc:	mov	r0, r4
   15300:	bl	15090 <fputs@plt+0x3a34>
   15304:	b	152a4 <fputs@plt+0x3c48>
   15308:	andeq	sp, r2, r0, ror #31
   1530c:	andeq	r9, r2, ip, ror #26
   15310:	andeq	r7, r1, pc, ror #31
   15314:	andeq	r8, r1, lr, lsr r1
   15318:	ldr	r1, [pc]	; 15320 <fputs@plt+0x3cc4>
   1531c:	b	14fa8 <fputs@plt+0x394c>
   15320:	strdeq	r7, [r1], -r4
   15324:	ldr	r1, [pc]	; 1532c <fputs@plt+0x3cd0>
   15328:	b	14fa8 <fputs@plt+0x394c>
   1532c:	andeq	r8, r1, r0, lsl r0
   15330:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15334:	ldr	r8, [pc, #448]	; 154fc <fputs@plt+0x3ea0>
   15338:	ldm	r3, {r4, r5}
   1533c:	ldr	sl, [r8, #16]
   15340:	ldr	r2, [r5, #464]	; 0x1d0
   15344:	add	r2, r2, sl, lsl #4
   15348:	ldr	r9, [r2, #8]
   1534c:	cmp	r9, #0
   15350:	beq	154f4 <fputs@plt+0x3e98>
   15354:	cmp	r0, #0
   15358:	moveq	r1, #0
   1535c:	andne	r1, r1, #1
   15360:	cmp	r1, #0
   15364:	mov	r7, r0
   15368:	mov	r6, r3
   1536c:	beq	1542c <fputs@plt+0x3dd0>
   15370:	ldr	r3, [r4, #780]	; 0x30c
   15374:	cmp	r3, #0
   15378:	beq	154c4 <fputs@plt+0x3e68>
   1537c:	mov	r1, #46	; 0x2e
   15380:	bl	113c8 <strrchr@plt>
   15384:	cmp	r0, #0
   15388:	beq	153a0 <fputs@plt+0x3d44>
   1538c:	ldrb	r3, [r0, #1]
   15390:	cmp	r3, #0
   15394:	addne	r2, r0, #1
   15398:	ldrne	fp, [r4, #772]	; 0x304
   1539c:	bne	15424 <fputs@plt+0x3dc8>
   153a0:	ldr	sl, [r4, #796]	; 0x31c
   153a4:	bl	11470 <rb_current_time@plt>
   153a8:	add	sl, sl, #3600	; 0xe10
   153ac:	cmp	sl, r0
   153b0:	bge	1542c <fputs@plt+0x3dd0>
   153b4:	mov	r3, r7
   153b8:	mov	r2, r4
   153bc:	ldr	r1, [pc, #316]	; 15500 <fputs@plt+0x3ea4>
   153c0:	mov	r0, #87	; 0x57
   153c4:	bl	12120 <fputs@plt+0xac4>
   153c8:	bl	11470 <rb_current_time@plt>
   153cc:	str	r0, [r4, #796]	; 0x31c
   153d0:	b	1542c <fputs@plt+0x3dd0>
   153d4:	ldr	r1, [fp]
   153d8:	ldr	r3, [r1]
   153dc:	cmp	r3, #1
   153e0:	beq	15404 <fputs@plt+0x3da8>
   153e4:	cmp	r3, #2
   153e8:	beq	154bc <fputs@plt+0x3e60>
   153ec:	mov	r0, #67	; 0x43
   153f0:	mov	r2, r4
   153f4:	ldr	r1, [pc, #264]	; 15504 <fputs@plt+0x3ea8>
   153f8:	bl	12120 <fputs@plt+0xac4>
   153fc:	mov	r0, #3
   15400:	bl	11638 <exit@plt>
   15404:	mov	r0, r7
   15408:	add	r1, r1, #4
   1540c:	str	r2, [sp, #4]
   15410:	bl	1162c <strcmp@plt>
   15414:	cmp	r0, #0
   15418:	beq	154c4 <fputs@plt+0x3e68>
   1541c:	ldr	fp, [fp, #8]
   15420:	ldr	r2, [sp, #4]
   15424:	cmp	fp, #0
   15428:	bne	153d4 <fputs@plt+0x3d78>
   1542c:	mov	r0, r4
   15430:	bl	14e78 <fputs@plt+0x381c>
   15434:	ldr	r0, [r6, #8]
   15438:	bl	11ee8 <fputs@plt+0x88c>
   1543c:	add	r1, r9, #4
   15440:	add	r0, r6, #12
   15444:	bl	14d54 <fputs@plt+0x36f8>
   15448:	mov	r0, r6
   1544c:	bl	14994 <fputs@plt+0x3338>
   15450:	ldr	r4, [r9, #12]
   15454:	cmp	r4, #0
   15458:	bne	154f4 <fputs@plt+0x3e98>
   1545c:	ldr	r1, [pc, #164]	; 15508 <fputs@plt+0x3eac>
   15460:	ldr	r0, [r5]
   15464:	bl	120c8 <fputs@plt+0xa6c>
   15468:	mov	r0, r9
   1546c:	bl	14994 <fputs@plt+0x3338>
   15470:	ldr	r1, [r8, #16]
   15474:	ldr	r2, [r5, #464]	; 0x1d0
   15478:	lsl	r0, r1, #4
   1547c:	add	r2, r2, r0
   15480:	str	r4, [r2, #8]
   15484:	ldr	r3, [r5, #464]	; 0x1d0
   15488:	add	r3, r3, r0
   1548c:	mov	r0, r5
   15490:	str	r4, [r3, #4]
   15494:	bl	12908 <fputs@plt+0x12ac>
   15498:	ldr	r3, [r5, #460]	; 0x1cc
   1549c:	sub	r3, r3, #1
   154a0:	cmp	r3, #0
   154a4:	str	r3, [r5, #460]	; 0x1cc
   154a8:	bne	154f4 <fputs@plt+0x3e98>
   154ac:	mov	r0, r5
   154b0:	add	sp, sp, #12
   154b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   154b8:	b	12594 <fputs@plt+0xf38>
   154bc:	mov	r0, r2
   154c0:	b	15408 <fputs@plt+0x3dac>
   154c4:	ldr	r3, [r4, #792]	; 0x318
   154c8:	mov	r0, r5
   154cc:	add	r3, r3, #1
   154d0:	str	r3, [r4, #792]	; 0x318
   154d4:	mov	r2, r4
   154d8:	add	r3, r4, #256	; 0x100
   154dc:	mov	r1, sl
   154e0:	bl	12718 <fputs@plt+0x10bc>
   154e4:	mov	r0, r5
   154e8:	add	sp, sp, #12
   154ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   154f0:	b	15324 <fputs@plt+0x3cc8>
   154f4:	add	sp, sp, #12
   154f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   154fc:	andeq	r9, r2, ip, ror #26
   15500:	andeq	r8, r1, r9, asr r0
   15504:	andeq	r8, r1, sl, lsr #32
   15508:	muleq	r1, r8, r0
   1550c:	push	{r0, r1, r4, lr}
   15510:	mov	r1, sp
   15514:	ldr	r4, [pc, #56]	; 15554 <fputs@plt+0x3ef8>
   15518:	ldr	r0, [r4]
   1551c:	bl	1144c <rb_dictionary_foreach_start@plt>
   15520:	mov	r1, sp
   15524:	ldr	r0, [r4]
   15528:	bl	11368 <rb_dictionary_foreach_cur@plt>
   1552c:	cmp	r0, #0
   15530:	bne	15540 <fputs@plt+0x3ee4>
   15534:	bl	14f4c <fputs@plt+0x38f0>
   15538:	add	sp, sp, #8
   1553c:	pop	{r4, pc}
   15540:	bl	15324 <fputs@plt+0x3cc8>
   15544:	mov	r1, sp
   15548:	ldr	r0, [r4]
   1554c:	bl	11404 <rb_dictionary_foreach_next@plt>
   15550:	b	15520 <fputs@plt+0x3ec4>
   15554:	andeq	lr, r2, r8, ror r1
   15558:	ldr	r3, [r2]
   1555c:	ldr	r2, [pc, #20]	; 15578 <fputs@plt+0x3f1c>
   15560:	ldrb	r3, [r3]
   15564:	sub	r3, r3, #49	; 0x31
   15568:	clz	r3, r3
   1556c:	lsr	r3, r3, #5
   15570:	strb	r3, [r2]
   15574:	bx	lr
   15578:	andeq	r9, r2, r8, ror #27
   1557c:	ldr	r0, [r2]
   15580:	push	{r4, lr}
   15584:	bl	114dc <atoi@plt>
   15588:	subs	r2, r0, #0
   1558c:	bge	155a4 <fputs@plt+0x3f48>
   15590:	mov	r0, #67	; 0x43
   15594:	ldr	r1, [pc, #20]	; 155b0 <fputs@plt+0x3f54>
   15598:	bl	12120 <fputs@plt+0xac4>
   1559c:	mov	r0, #3
   155a0:	bl	11638 <exit@plt>
   155a4:	ldr	r3, [pc, #8]	; 155b4 <fputs@plt+0x3f58>
   155a8:	str	r2, [r3, #4]
   155ac:	pop	{r4, pc}
   155b0:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   155b4:	andeq	r9, r2, r8, ror #27
   155b8:	push	{r4, r5, r6, r7, r8, lr}
   155bc:	mov	r4, r0
   155c0:	ldr	r5, [pc, #152]	; 15660 <fputs@plt+0x4004>
   155c4:	ldr	r3, [r0, #464]	; 0x1d0
   155c8:	mov	r6, r1
   155cc:	ldr	r2, [r5, #20]
   155d0:	ldr	r1, [pc, #140]	; 15664 <fputs@plt+0x4008>
   155d4:	add	r0, r0, #440	; 0x1b8
   155d8:	add	r3, r3, r2, lsl #4
   155dc:	mov	r2, #11
   155e0:	ldr	r7, [r3, #8]
   155e4:	bl	113ec <rb_strlcpy@plt>
   155e8:	ldr	r0, [r7]
   155ec:	cmp	r0, #0
   155f0:	beq	155f8 <fputs@plt+0x3f9c>
   155f4:	bl	114a0 <rb_close@plt>
   155f8:	mov	r0, r7
   155fc:	bl	11410 <free@plt>
   15600:	ldr	r3, [r5, #20]
   15604:	ldr	r2, [r4, #464]	; 0x1d0
   15608:	mov	r1, #0
   1560c:	lsl	r3, r3, #4
   15610:	add	r2, r2, r3
   15614:	ldr	r0, [r4]
   15618:	str	r1, [r2, #8]
   1561c:	ldr	r2, [r4, #464]	; 0x1d0
   15620:	add	r3, r2, r3
   15624:	str	r1, [r3, #4]
   15628:	ldr	r3, [pc, #56]	; 15668 <fputs@plt+0x400c>
   1562c:	ldr	r1, [r3, r6, lsl #2]
   15630:	bl	120c8 <fputs@plt+0xa6c>
   15634:	ldr	r1, [r5, #20]
   15638:	mov	r0, r4
   1563c:	bl	12908 <fputs@plt+0x12ac>
   15640:	ldr	r3, [r4, #460]	; 0x1cc
   15644:	sub	r3, r3, #1
   15648:	cmp	r3, #0
   1564c:	str	r3, [r4, #460]	; 0x1cc
   15650:	popne	{r4, r5, r6, r7, r8, pc}
   15654:	mov	r0, r4
   15658:	pop	{r4, r5, r6, r7, r8, lr}
   1565c:	b	12594 <fputs@plt+0xf38>
   15660:	andeq	r9, r2, r8, ror #27
   15664:	andeq	r7, r1, r4, lsl #18
   15668:	andeq	r8, r1, r4, ror #1
   1566c:	ldr	r3, [pc, #28]	; 15690 <fputs@plt+0x4034>
   15670:	ldr	r2, [r3, #20]
   15674:	ldr	r3, [r0, #464]	; 0x1d0
   15678:	add	r3, r3, r2, lsl #4
   1567c:	ldr	r3, [r3, #8]
   15680:	cmp	r3, #0
   15684:	bxeq	lr
   15688:	mov	r1, #2
   1568c:	b	155b8 <fputs@plt+0x3f5c>
   15690:	andeq	r9, r2, r8, ror #27
   15694:	push	{r4, r5, r6, r7, r8, r9, lr}
   15698:	mov	r1, #4
   1569c:	sub	sp, sp, #268	; 0x10c
   156a0:	mov	r4, r0
   156a4:	mov	r0, #1
   156a8:	bl	11380 <calloc@plt>
   156ac:	subs	r6, r0, #0
   156b0:	bne	156b8 <fputs@plt+0x405c>
   156b4:	bl	11524 <rb_outofmemory@plt>
   156b8:	ldr	r5, [pc, #288]	; 157e0 <fputs@plt+0x4184>
   156bc:	mov	r7, r5
   156c0:	ldrb	r3, [r5]
   156c4:	cmp	r3, #0
   156c8:	bne	156f4 <fputs@plt+0x4098>
   156cc:	bl	11410 <free@plt>
   156d0:	ldr	r1, [pc, #268]	; 157e4 <fputs@plt+0x4188>
   156d4:	ldr	r0, [r4]
   156d8:	bl	120c8 <fputs@plt+0xa6c>
   156dc:	ldr	r1, [r5, #20]
   156e0:	mov	r0, r4
   156e4:	bl	12908 <fputs@plt+0x12ac>
   156e8:	mov	r0, #1
   156ec:	add	sp, sp, #268	; 0x10c
   156f0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   156f4:	ldr	r3, [r4, #460]	; 0x1cc
   156f8:	ldr	r1, [pc, #232]	; 157e8 <fputs@plt+0x418c>
   156fc:	add	r3, r3, #1
   15700:	str	r3, [r4, #460]	; 0x1cc
   15704:	ldr	r0, [r4]
   15708:	ldrh	r8, [r4, #248]	; 0xf8
   1570c:	bl	120c8 <fputs@plt+0xa6c>
   15710:	ldr	r3, [r5, #20]
   15714:	ldr	r2, [r4, #464]	; 0x1d0
   15718:	ldr	r9, [r5, #4]
   1571c:	lsl	r3, r3, #4
   15720:	add	r2, r2, r3
   15724:	str	r6, [r2, #8]
   15728:	ldr	r5, [r4, #464]	; 0x1d0
   1572c:	add	r5, r5, r3
   15730:	bl	11470 <rb_current_time@plt>
   15734:	ldr	r3, [pc, #176]	; 157ec <fputs@plt+0x4190>
   15738:	ldr	r2, [r4, #4]
   1573c:	mov	r1, #1
   15740:	add	r0, r9, r0
   15744:	str	r0, [r5, #4]
   15748:	mov	r0, r8
   1574c:	bl	1132c <rb_socket@plt>
   15750:	cmp	r0, #0
   15754:	mov	r5, r0
   15758:	str	r0, [r6]
   1575c:	bne	1578c <fputs@plt+0x4130>
   15760:	bl	11644 <__errno_location@plt>
   15764:	ldr	r0, [r0]
   15768:	bl	11278 <strerror@plt>
   1576c:	ldr	r1, [pc, #124]	; 157f0 <fputs@plt+0x4194>
   15770:	mov	r2, r0
   15774:	mov	r0, #68	; 0x44
   15778:	bl	12120 <fputs@plt+0xac4>
   1577c:	mov	r1, #2
   15780:	mov	r0, r4
   15784:	bl	155b8 <fputs@plt+0x3f5c>
   15788:	b	156e8 <fputs@plt+0x408c>
   1578c:	add	r1, r4, #64	; 0x40
   15790:	mov	r2, #128	; 0x80
   15794:	add	r0, sp, #8
   15798:	bl	11488 <memcpy@plt>
   1579c:	add	r1, r4, #248	; 0xf8
   157a0:	mov	r2, #128	; 0x80
   157a4:	add	r0, sp, #136	; 0x88
   157a8:	bl	11488 <memcpy@plt>
   157ac:	mov	r3, #0
   157b0:	strh	r3, [sp, #10]
   157b4:	mov	r3, #28928	; 0x7100
   157b8:	strh	r3, [sp, #138]	; 0x8a
   157bc:	ldr	r3, [r7, #4]
   157c0:	add	r2, sp, #8
   157c4:	str	r3, [sp, #4]
   157c8:	str	r4, [sp]
   157cc:	ldr	r3, [pc, #32]	; 157f4 <fputs@plt+0x4198>
   157d0:	add	r1, sp, #136	; 0x88
   157d4:	mov	r0, r5
   157d8:	bl	112cc <rb_connect_tcp@plt>
   157dc:	b	156e8 <fputs@plt+0x408c>
   157e0:	andeq	r9, r2, r8, ror #27
   157e4:	andeq	r8, r1, sp, lsl r1
   157e8:	andeq	r8, r1, r4, asr #2
   157ec:	andeq	r8, r1, lr, lsr r1
   157f0:	andeq	r8, r1, r7, asr r1
   157f4:	andeq	r5, r1, r4, lsr #21
   157f8:	push	{r0, r1, r4, r5, r6, lr}
   157fc:	mov	r1, sp
   15800:	ldr	r4, [pc, #88]	; 15860 <fputs@plt+0x4204>
   15804:	ldr	r5, [pc, #88]	; 15864 <fputs@plt+0x4208>
   15808:	mov	r6, #2
   1580c:	ldr	r0, [r4]
   15810:	bl	1144c <rb_dictionary_foreach_start@plt>
   15814:	mov	r1, sp
   15818:	ldr	r0, [r4]
   1581c:	bl	11368 <rb_dictionary_foreach_cur@plt>
   15820:	subs	r3, r0, #0
   15824:	bne	15830 <fputs@plt+0x41d4>
   15828:	add	sp, sp, #8
   1582c:	pop	{r4, r5, r6, pc}
   15830:	ldr	r2, [r5, #20]
   15834:	ldr	r3, [r3, #464]	; 0x1d0
   15838:	add	r3, r3, r2, lsl #4
   1583c:	ldr	r3, [r3, #8]
   15840:	cmp	r3, #0
   15844:	beq	15850 <fputs@plt+0x41f4>
   15848:	mov	r1, r6
   1584c:	bl	155b8 <fputs@plt+0x3f5c>
   15850:	mov	r1, sp
   15854:	ldr	r0, [r4]
   15858:	bl	11404 <rb_dictionary_foreach_next@plt>
   1585c:	b	15814 <fputs@plt+0x41b8>
   15860:	andeq	lr, r2, r8, ror r1
   15864:	andeq	r9, r2, r8, ror #27
   15868:	push	{r4, r5, r6, r7, r8, lr}
   1586c:	sub	sp, sp, #136	; 0x88
   15870:	mov	r5, r0
   15874:	mov	r2, #129	; 0x81
   15878:	mov	r4, r1
   1587c:	add	r0, sp, #4
   15880:	mov	r1, #0
   15884:	bl	113b0 <memset@plt>
   15888:	mov	r2, #128	; 0x80
   1588c:	add	r1, sp, #4
   15890:	mov	r0, r5
   15894:	bl	11428 <rb_read@plt>
   15898:	cmp	r0, #0
   1589c:	bge	158d0 <fputs@plt+0x4274>
   158a0:	bl	11644 <__errno_location@plt>
   158a4:	ldr	r0, [r0]
   158a8:	bl	112b4 <rb_ignore_errno@plt>
   158ac:	cmp	r0, #0
   158b0:	beq	15a84 <fputs@plt+0x4428>
   158b4:	mov	r3, r4
   158b8:	ldr	r2, [pc, #468]	; 15a94 <fputs@plt+0x4438>
   158bc:	mov	r1, #1
   158c0:	mov	r0, r5
   158c4:	bl	112fc <rb_setselect@plt>
   158c8:	add	sp, sp, #136	; 0x88
   158cc:	pop	{r4, r5, r6, r7, r8, pc}
   158d0:	beq	15a84 <fputs@plt+0x4428>
   158d4:	mov	r1, #58	; 0x3a
   158d8:	add	r0, sp, #4
   158dc:	bl	1135c <strchr@plt>
   158e0:	subs	r5, r0, #0
   158e4:	bne	158f8 <fputs@plt+0x429c>
   158e8:	mov	r1, #3
   158ec:	mov	r0, r4
   158f0:	bl	155b8 <fputs@plt+0x3f5c>
   158f4:	b	158c8 <fputs@plt+0x426c>
   158f8:	mov	r7, #0
   158fc:	strb	r7, [r5], #1
   15900:	mov	r1, #58	; 0x3a
   15904:	mov	r0, r5
   15908:	bl	1135c <strchr@plt>
   1590c:	subs	r6, r0, #0
   15910:	beq	158e8 <fputs@plt+0x428c>
   15914:	strb	r7, [r6], #1
   15918:	mov	r1, #44	; 0x2c
   1591c:	add	r0, sp, #4
   15920:	bl	1135c <strchr@plt>
   15924:	subs	r8, r0, #0
   15928:	beq	158e8 <fputs@plt+0x428c>
   1592c:	strb	r7, [r8], #1
   15930:	add	r0, sp, #4
   15934:	bl	114dc <atoi@plt>
   15938:	cmp	r0, r7
   1593c:	beq	158e8 <fputs@plt+0x428c>
   15940:	mov	r0, r8
   15944:	bl	114dc <atoi@plt>
   15948:	cmp	r0, r7
   1594c:	beq	158e8 <fputs@plt+0x428c>
   15950:	ldr	r1, [pc, #320]	; 15a98 <fputs@plt+0x443c>
   15954:	mov	r0, r5
   15958:	bl	11500 <strstr@plt>
   1595c:	cmp	r0, r7
   15960:	beq	158e8 <fputs@plt+0x428c>
   15964:	mov	r1, #58	; 0x3a
   15968:	mov	r0, r6
   1596c:	bl	1135c <strchr@plt>
   15970:	cmp	r0, #0
   15974:	beq	158e8 <fputs@plt+0x428c>
   15978:	strb	r7, [r0], #1
   1597c:	cmp	r0, r7
   15980:	beq	158e8 <fputs@plt+0x428c>
   15984:	add	r1, r4, #440	; 0x1b8
   15988:	mov	r2, r0
   1598c:	add	r0, r0, #1
   15990:	ldrb	r3, [r2]
   15994:	and	r3, r3, #223	; 0xdf
   15998:	cmp	r3, #94	; 0x5e
   1599c:	beq	15988 <fputs@plt+0x432c>
   159a0:	sub	r2, r2, #1
   159a4:	mov	r0, #10
   159a8:	ldrb	r3, [r2, #1]!
   159ac:	and	ip, r3, #191	; 0xbf
   159b0:	cmp	r0, #0
   159b4:	cmpne	ip, #0
   159b8:	beq	159c8 <fputs@plt+0x436c>
   159bc:	cmp	r3, #10
   159c0:	cmpne	r3, #13
   159c4:	bne	15a54 <fputs@plt+0x43f8>
   159c8:	ldr	r5, [pc, #204]	; 15a9c <fputs@plt+0x4440>
   159cc:	mov	r3, #0
   159d0:	strb	r3, [r1]
   159d4:	ldr	r2, [r5, #20]
   159d8:	ldr	r3, [r4, #464]	; 0x1d0
   159dc:	add	r3, r3, r2, lsl #4
   159e0:	ldr	r6, [r3, #8]
   159e4:	ldr	r0, [r6]
   159e8:	cmp	r0, #0
   159ec:	bne	15a8c <fputs@plt+0x4430>
   159f0:	mov	r0, r6
   159f4:	bl	11410 <free@plt>
   159f8:	ldr	r3, [r5, #20]
   159fc:	ldr	r2, [r4, #464]	; 0x1d0
   15a00:	mov	r1, #0
   15a04:	lsl	r3, r3, #4
   15a08:	add	r2, r2, r3
   15a0c:	ldr	r0, [r4]
   15a10:	str	r1, [r2, #8]
   15a14:	ldr	r2, [r4, #464]	; 0x1d0
   15a18:	add	r3, r2, r3
   15a1c:	str	r1, [r3, #4]
   15a20:	ldr	r1, [pc, #120]	; 15aa0 <fputs@plt+0x4444>
   15a24:	bl	120c8 <fputs@plt+0xa6c>
   15a28:	ldr	r1, [r5, #20]
   15a2c:	mov	r0, r4
   15a30:	bl	12908 <fputs@plt+0x12ac>
   15a34:	ldr	r3, [r4, #460]	; 0x1cc
   15a38:	sub	r3, r3, #1
   15a3c:	cmp	r3, #0
   15a40:	str	r3, [r4, #460]	; 0x1cc
   15a44:	bne	158c8 <fputs@plt+0x426c>
   15a48:	mov	r0, r4
   15a4c:	bl	12594 <fputs@plt+0xf38>
   15a50:	b	158c8 <fputs@plt+0x426c>
   15a54:	cmp	r3, #32
   15a58:	cmpne	r3, #58	; 0x3a
   15a5c:	movne	ip, #1
   15a60:	moveq	ip, #0
   15a64:	cmp	r3, #91	; 0x5b
   15a68:	moveq	ip, #0
   15a6c:	andne	ip, ip, #1
   15a70:	cmp	ip, #0
   15a74:	strbne	r3, [r1]
   15a78:	subne	r0, r0, #1
   15a7c:	addne	r1, r1, #1
   15a80:	b	159a8 <fputs@plt+0x434c>
   15a84:	mov	r1, #2
   15a88:	b	158ec <fputs@plt+0x4290>
   15a8c:	bl	114a0 <rb_close@plt>
   15a90:	b	159f0 <fputs@plt+0x4394>
   15a94:	andeq	r5, r1, r8, ror #16
   15a98:	andeq	r8, r1, r9, ror r1
   15a9c:	andeq	r9, r2, r8, ror #27
   15aa0:	andeq	r8, r1, r0, lsl #3
   15aa4:	cmp	r1, #0
   15aa8:	push	{r4, r5, r6, lr}
   15aac:	mov	r4, r2
   15ab0:	sub	sp, sp, #40	; 0x28
   15ab4:	beq	15acc <fputs@plt+0x4470>
   15ab8:	mov	r1, #2
   15abc:	mov	r0, r4
   15ac0:	bl	155b8 <fputs@plt+0x3f5c>
   15ac4:	add	sp, sp, #40	; 0x28
   15ac8:	pop	{r4, r5, r6, pc}
   15acc:	ldr	r3, [pc, #92]	; 15b30 <fputs@plt+0x44d4>
   15ad0:	mov	r1, #32
   15ad4:	add	r0, sp, #8
   15ad8:	ldr	r2, [r3, #20]
   15adc:	ldr	r3, [r4, #464]	; 0x1d0
   15ae0:	add	r3, r3, r2, lsl #4
   15ae4:	ldrh	r2, [r4, #62]	; 0x3e
   15ae8:	ldr	r5, [r3, #8]
   15aec:	ldrh	r3, [r4, #246]	; 0xf6
   15af0:	str	r2, [sp]
   15af4:	ldr	r2, [pc, #56]	; 15b34 <fputs@plt+0x44d8>
   15af8:	bl	115e4 <snprintf@plt>
   15afc:	add	r0, sp, #8
   15b00:	bl	11464 <strlen@plt>
   15b04:	add	r1, sp, #8
   15b08:	mov	r6, r0
   15b0c:	mov	r2, r0
   15b10:	ldr	r0, [r5]
   15b14:	bl	113d4 <rb_write@plt>
   15b18:	cmp	r6, r0
   15b1c:	bne	15ab8 <fputs@plt+0x445c>
   15b20:	mov	r1, r4
   15b24:	ldr	r0, [r5]
   15b28:	bl	15868 <fputs@plt+0x420c>
   15b2c:	b	15ac4 <fputs@plt+0x4468>
   15b30:	andeq	r9, r2, r8, ror #27
   15b34:	muleq	r1, r7, r1
   15b38:	ldr	r0, [r2]
   15b3c:	push	{r4, lr}
   15b40:	bl	114dc <atoi@plt>
   15b44:	subs	r2, r0, #0
   15b48:	bge	15b60 <fputs@plt+0x4504>
   15b4c:	mov	r0, #67	; 0x43
   15b50:	ldr	r1, [pc, #20]	; 15b6c <fputs@plt+0x4510>
   15b54:	bl	12120 <fputs@plt+0xac4>
   15b58:	mov	r0, #3
   15b5c:	bl	11638 <exit@plt>
   15b60:	ldr	r3, [pc, #8]	; 15b70 <fputs@plt+0x4514>
   15b64:	str	r2, [r3]
   15b68:	pop	{r4, pc}
   15b6c:	andeq	r8, r1, r0, lsl r2
   15b70:	andeq	r9, r2, r0, asr lr
   15b74:	push	{r4, r5, r6, r7, r8, lr}
   15b78:	mov	r4, r0
   15b7c:	ldr	r5, [pc, #140]	; 15c10 <fputs@plt+0x45b4>
   15b80:	ldr	r3, [r0, #464]	; 0x1d0
   15b84:	mov	r7, r1
   15b88:	ldr	r2, [r5, #16]
   15b8c:	ldr	r1, [pc, #128]	; 15c14 <fputs@plt+0x45b8>
   15b90:	add	r0, r0, #376	; 0x178
   15b94:	add	r3, r3, r2, lsl #4
   15b98:	mov	r2, #64	; 0x40
   15b9c:	ldr	r6, [r3, #8]
   15ba0:	bl	113ec <rb_strlcpy@plt>
   15ba4:	ldr	r3, [pc, #108]	; 15c18 <fputs@plt+0x45bc>
   15ba8:	ldr	r0, [r4]
   15bac:	ldr	r1, [r3, r7, lsl #2]
   15bb0:	bl	120c8 <fputs@plt+0xa6c>
   15bb4:	ldr	r0, [r6]
   15bb8:	bl	11ee8 <fputs@plt+0x88c>
   15bbc:	mov	r0, r6
   15bc0:	bl	11410 <free@plt>
   15bc4:	ldr	r1, [r5, #16]
   15bc8:	ldr	r2, [r4, #464]	; 0x1d0
   15bcc:	mov	r0, #0
   15bd0:	lsl	ip, r1, #4
   15bd4:	add	r2, r2, ip
   15bd8:	str	r0, [r2, #8]
   15bdc:	ldr	r3, [r4, #464]	; 0x1d0
   15be0:	add	r3, r3, ip
   15be4:	str	r0, [r3, #4]
   15be8:	mov	r0, r4
   15bec:	bl	12908 <fputs@plt+0x12ac>
   15bf0:	ldr	r3, [r4, #460]	; 0x1cc
   15bf4:	sub	r3, r3, #1
   15bf8:	cmp	r3, #0
   15bfc:	str	r3, [r4, #460]	; 0x1cc
   15c00:	popne	{r4, r5, r6, r7, r8, pc}
   15c04:	mov	r0, r4
   15c08:	pop	{r4, r5, r6, r7, r8, lr}
   15c0c:	b	12594 <fputs@plt+0xf38>
   15c10:	andeq	r9, r2, r0, asr lr
   15c14:	andeq	r7, r1, r4, lsl #18
   15c18:	andeq	r8, r1, r4, lsl #4
   15c1c:	ldr	r3, [pc, #28]	; 15c40 <fputs@plt+0x45e4>
   15c20:	ldr	r2, [r3, #16]
   15c24:	ldr	r3, [r0, #464]	; 0x1d0
   15c28:	add	r3, r3, r2, lsl #4
   15c2c:	ldr	r3, [r3, #8]
   15c30:	cmp	r3, #0
   15c34:	bxeq	lr
   15c38:	mov	r1, #1
   15c3c:	b	15b74 <fputs@plt+0x4518>
   15c40:	andeq	r9, r2, r0, asr lr
   15c44:	push	{r0, r1, r4, r5, r6, lr}
   15c48:	mov	r1, sp
   15c4c:	ldr	r4, [pc, #88]	; 15cac <fputs@plt+0x4650>
   15c50:	ldr	r5, [pc, #88]	; 15cb0 <fputs@plt+0x4654>
   15c54:	mov	r6, #1
   15c58:	ldr	r0, [r4]
   15c5c:	bl	1144c <rb_dictionary_foreach_start@plt>
   15c60:	mov	r1, sp
   15c64:	ldr	r0, [r4]
   15c68:	bl	11368 <rb_dictionary_foreach_cur@plt>
   15c6c:	subs	r3, r0, #0
   15c70:	bne	15c7c <fputs@plt+0x4620>
   15c74:	add	sp, sp, #8
   15c78:	pop	{r4, r5, r6, pc}
   15c7c:	ldr	r2, [r5, #16]
   15c80:	ldr	r3, [r3, #464]	; 0x1d0
   15c84:	add	r3, r3, r2, lsl #4
   15c88:	ldr	r3, [r3, #8]
   15c8c:	cmp	r3, #0
   15c90:	beq	15c9c <fputs@plt+0x4640>
   15c94:	mov	r1, r6
   15c98:	bl	15b74 <fputs@plt+0x4518>
   15c9c:	mov	r1, sp
   15ca0:	ldr	r0, [r4]
   15ca4:	bl	11404 <rb_dictionary_foreach_next@plt>
   15ca8:	b	15c60 <fputs@plt+0x4604>
   15cac:	andeq	lr, r2, r8, ror r1
   15cb0:	andeq	r9, r2, r0, asr lr
   15cb4:	push	{r4, r5, r6, r7, r8, lr}
   15cb8:	mov	r1, #4
   15cbc:	mov	r4, r0
   15cc0:	mov	r0, #1
   15cc4:	bl	11380 <calloc@plt>
   15cc8:	subs	r7, r0, #0
   15ccc:	bne	15cd4 <fputs@plt+0x4678>
   15cd0:	bl	11524 <rb_outofmemory@plt>
   15cd4:	ldr	r3, [r4, #460]	; 0x1cc
   15cd8:	ldr	r1, [pc, #88]	; 15d38 <fputs@plt+0x46dc>
   15cdc:	add	r3, r3, #1
   15ce0:	str	r3, [r4, #460]	; 0x1cc
   15ce4:	ldr	r3, [r1, #16]
   15ce8:	ldr	r2, [r4, #464]	; 0x1d0
   15cec:	ldr	r6, [r1]
   15cf0:	lsl	r3, r3, #4
   15cf4:	add	r2, r2, r3
   15cf8:	str	r7, [r2, #8]
   15cfc:	ldr	r5, [r4, #464]	; 0x1d0
   15d00:	add	r5, r5, r3
   15d04:	bl	11470 <rb_current_time@plt>
   15d08:	mov	r2, r4
   15d0c:	ldr	r1, [pc, #40]	; 15d3c <fputs@plt+0x46e0>
   15d10:	add	r0, r6, r0
   15d14:	str	r0, [r5, #4]
   15d18:	add	r0, r4, #192	; 0xc0
   15d1c:	bl	11e30 <fputs@plt+0x7d4>
   15d20:	ldr	r1, [pc, #24]	; 15d40 <fputs@plt+0x46e4>
   15d24:	str	r0, [r7]
   15d28:	ldr	r0, [r4]
   15d2c:	bl	120c8 <fputs@plt+0xa6c>
   15d30:	mov	r0, #1
   15d34:	pop	{r4, r5, r6, r7, r8, pc}
   15d38:	andeq	r9, r2, r0, asr lr
   15d3c:	andeq	r5, r1, r4, asr #26
   15d40:	andeq	r8, r1, r2, lsr r2
   15d44:	eor	r1, r1, #1
   15d48:	push	{r4, r5, r6, r7, r8, lr}
   15d4c:	cmp	r0, #0
   15d50:	movne	r5, r1
   15d54:	orreq	r5, r1, #1
   15d58:	cmp	r5, #0
   15d5c:	movne	r1, #1
   15d60:	movne	r0, r3
   15d64:	bne	15d84 <fputs@plt+0x4728>
   15d68:	mov	r7, r0
   15d6c:	mov	r4, r3
   15d70:	bl	11464 <strlen@plt>
   15d74:	cmp	r0, #63	; 0x3f
   15d78:	bls	15d8c <fputs@plt+0x4730>
   15d7c:	mov	r1, #2
   15d80:	mov	r0, r4
   15d84:	pop	{r4, r5, r6, r7, r8, lr}
   15d88:	b	15b74 <fputs@plt+0x4518>
   15d8c:	mov	r1, r7
   15d90:	ldr	r7, [pc, #132]	; 15e1c <fputs@plt+0x47c0>
   15d94:	add	r6, r4, #376	; 0x178
   15d98:	mov	r2, #64	; 0x40
   15d9c:	mov	r0, r6
   15da0:	bl	113ec <rb_strlcpy@plt>
   15da4:	ldr	r2, [r7, #16]
   15da8:	ldr	r3, [r4, #464]	; 0x1d0
   15dac:	ldr	r1, [pc, #108]	; 15e20 <fputs@plt+0x47c4>
   15db0:	add	r3, r3, r2, lsl #4
   15db4:	ldr	r0, [r4]
   15db8:	ldr	r8, [r3, #8]
   15dbc:	mov	r2, r6
   15dc0:	bl	120c8 <fputs@plt+0xa6c>
   15dc4:	ldr	r0, [r8]
   15dc8:	bl	11ee8 <fputs@plt+0x88c>
   15dcc:	mov	r0, r8
   15dd0:	bl	11410 <free@plt>
   15dd4:	ldr	r1, [r7, #16]
   15dd8:	ldr	r2, [r4, #464]	; 0x1d0
   15ddc:	lsl	r0, r1, #4
   15de0:	add	r2, r2, r0
   15de4:	str	r5, [r2, #8]
   15de8:	ldr	r3, [r4, #464]	; 0x1d0
   15dec:	add	r3, r3, r0
   15df0:	mov	r0, r4
   15df4:	str	r5, [r3, #4]
   15df8:	bl	12908 <fputs@plt+0x12ac>
   15dfc:	ldr	r3, [r4, #460]	; 0x1cc
   15e00:	sub	r3, r3, #1
   15e04:	cmp	r3, #0
   15e08:	str	r3, [r4, #460]	; 0x1cc
   15e0c:	popne	{r4, r5, r6, r7, r8, pc}
   15e10:	mov	r0, r4
   15e14:	pop	{r4, r5, r6, r7, r8, lr}
   15e18:	b	12594 <fputs@plt+0xf38>
   15e1c:	andeq	r9, r2, r0, asr lr
   15e20:	andeq	r8, r1, r2, asr r2
   15e24:	cmp	r0, #0
   15e28:	bxeq	lr
   15e2c:	b	11410 <free@plt>
   15e30:	ldr	r3, [pc, #184]	; 15ef0 <fputs@plt+0x4894>
   15e34:	ldr	r2, [r0, #464]	; 0x1d0
   15e38:	push	{r4, r5, r6, r7, r8, lr}
   15e3c:	ldr	r1, [r3, #12]
   15e40:	add	r2, r2, r1, lsl #4
   15e44:	ldr	r7, [r2, #8]
   15e48:	cmp	r7, #0
   15e4c:	popeq	{r4, r5, r6, r7, r8, pc}
   15e50:	mov	r4, r0
   15e54:	ldr	r1, [pc, #152]	; 15ef4 <fputs@plt+0x4898>
   15e58:	ldr	r0, [r0]
   15e5c:	mov	r6, r3
   15e60:	bl	120c8 <fputs@plt+0xa6c>
   15e64:	ldr	r3, [r7]
   15e68:	cmp	r3, #0
   15e6c:	ldrne	r5, [r3, #8]
   15e70:	bne	15ec8 <fputs@plt+0x486c>
   15e74:	mov	r0, r7
   15e78:	bl	15e24 <fputs@plt+0x47c8>
   15e7c:	ldr	r1, [r6, #12]
   15e80:	ldr	r2, [r4, #464]	; 0x1d0
   15e84:	mov	r0, #0
   15e88:	lsl	ip, r1, #4
   15e8c:	add	r2, r2, ip
   15e90:	str	r0, [r2, #8]
   15e94:	ldr	r3, [r4, #464]	; 0x1d0
   15e98:	add	r3, r3, ip
   15e9c:	str	r0, [r3, #4]
   15ea0:	mov	r0, r4
   15ea4:	bl	12908 <fputs@plt+0x12ac>
   15ea8:	ldr	r3, [r4, #460]	; 0x1cc
   15eac:	sub	r3, r3, #1
   15eb0:	cmp	r3, #0
   15eb4:	str	r3, [r4, #460]	; 0x1cc
   15eb8:	popne	{r4, r5, r6, r7, r8, pc}
   15ebc:	mov	r0, r4
   15ec0:	pop	{r4, r5, r6, r7, r8, lr}
   15ec4:	b	12594 <fputs@plt+0xf38>
   15ec8:	ldr	r8, [r3]
   15ecc:	ldr	r0, [r8, #4]
   15ed0:	bl	114a0 <rb_close@plt>
   15ed4:	mov	r0, r8
   15ed8:	bl	15e24 <fputs@plt+0x47c8>
   15edc:	cmp	r5, #0
   15ee0:	beq	15e74 <fputs@plt+0x4818>
   15ee4:	mov	r3, r5
   15ee8:	ldr	r5, [r5, #8]
   15eec:	b	15ec8 <fputs@plt+0x486c>
   15ef0:	andeq	r9, r2, r8, lsr #29
   15ef4:	strdeq	r8, [r1], -r1
   15ef8:	push	{r0, r1, r4, lr}
   15efc:	mov	r1, sp
   15f00:	ldr	r4, [pc, #52]	; 15f3c <fputs@plt+0x48e0>
   15f04:	ldr	r0, [r4]
   15f08:	bl	1144c <rb_dictionary_foreach_start@plt>
   15f0c:	mov	r1, sp
   15f10:	ldr	r0, [r4]
   15f14:	bl	11368 <rb_dictionary_foreach_cur@plt>
   15f18:	cmp	r0, #0
   15f1c:	bne	15f28 <fputs@plt+0x48cc>
   15f20:	add	sp, sp, #8
   15f24:	pop	{r4, pc}
   15f28:	bl	15e30 <fputs@plt+0x47d4>
   15f2c:	mov	r1, sp
   15f30:	ldr	r0, [r4]
   15f34:	bl	11404 <rb_dictionary_foreach_next@plt>
   15f38:	b	15f0c <fputs@plt+0x48b0>
   15f3c:	andeq	lr, r2, r8, ror r1
   15f40:	ldr	r0, [r2]
   15f44:	push	{r4, lr}
   15f48:	bl	114dc <atoi@plt>
   15f4c:	subs	r2, r0, #0
   15f50:	bge	15f64 <fputs@plt+0x4908>
   15f54:	ldr	r1, [pc, #20]	; 15f70 <fputs@plt+0x4914>
   15f58:	mov	r0, #67	; 0x43
   15f5c:	pop	{r4, lr}
   15f60:	b	12120 <fputs@plt+0xac4>
   15f64:	ldr	r3, [pc, #8]	; 15f74 <fputs@plt+0x4918>
   15f68:	str	r2, [r3, #60]	; 0x3c
   15f6c:	pop	{r4, pc}
   15f70:	andeq	r8, r1, r1, lsl r3
   15f74:	andeq	r9, r2, r8, lsr #29
   15f78:	ldr	r3, [pc, #88]	; 15fd8 <fputs@plt+0x497c>
   15f7c:	push	{r4, r5, r6, r7, r8, lr}
   15f80:	mov	r6, r0
   15f84:	ldr	r4, [r3]
   15f88:	mov	r7, r1
   15f8c:	cmp	r4, #0
   15f90:	bne	15f9c <fputs@plt+0x4940>
   15f94:	mov	r0, #1
   15f98:	pop	{r4, r5, r6, r7, r8, pc}
   15f9c:	ldr	r5, [r4]
   15fa0:	mov	r1, r7
   15fa4:	ldr	r0, [r5, #16]
   15fa8:	bl	11374 <strcasecmp@plt>
   15fac:	cmp	r0, #0
   15fb0:	ldrne	r4, [r4, #8]
   15fb4:	bne	15f8c <fputs@plt+0x4930>
   15fb8:	ldr	r2, [r5, #12]
   15fbc:	ldr	r3, [r6, #464]	; 0x1d0
   15fc0:	add	r3, r3, r2, lsl #4
   15fc4:	ldr	r0, [r3, #12]
   15fc8:	sub	r0, r0, #2
   15fcc:	clz	r0, r0
   15fd0:	lsr	r0, r0, #5
   15fd4:	pop	{r4, r5, r6, r7, r8, pc}
   15fd8:	andeq	lr, r2, ip, ror r1
   15fdc:	push	{r4, lr}
   15fe0:	mov	r1, r0
   15fe4:	mov	r0, #1
   15fe8:	bl	11380 <calloc@plt>
   15fec:	cmp	r0, #0
   15ff0:	popne	{r4, pc}
   15ff4:	bl	11524 <rb_outofmemory@plt>
   15ff8:	ldr	r3, [pc, #56]	; 16038 <fputs@plt+0x49dc>
   15ffc:	push	{r4, lr}
   16000:	mov	r4, r3
   16004:	ldr	r0, [r3, #184]	; 0xb8
   16008:	cmp	r0, #0
   1600c:	beq	16014 <fputs@plt+0x49b8>
   16010:	bl	114a0 <rb_close@plt>
   16014:	ldr	r0, [r4, #372]	; 0x174
   16018:	cmp	r0, #0
   1601c:	beq	16024 <fputs@plt+0x49c8>
   16020:	bl	114a0 <rb_close@plt>
   16024:	mov	r2, #376	; 0x178
   16028:	mov	r1, #0
   1602c:	ldr	r0, [pc, #4]	; 16038 <fputs@plt+0x49dc>
   16030:	pop	{r4, lr}
   16034:	b	113b0 <memset@plt>
   16038:	andeq	sp, r2, ip, ror #31
   1603c:	push	{r4, r5, lr}
   16040:	sub	sp, sp, #148	; 0x94
   16044:	mov	r3, #128	; 0x80
   16048:	str	r3, [sp, #4]
   1604c:	ldr	r3, [sp, #160]	; 0xa0
   16050:	clz	r3, r3
   16054:	lsr	r3, r3, #5
   16058:	cmp	r1, #0
   1605c:	moveq	r1, r3
   16060:	orrne	r1, r3, #1
   16064:	cmp	r1, #0
   16068:	mov	r5, r0
   1606c:	beq	16080 <fputs@plt+0x4a24>
   16070:	mov	r0, r5
   16074:	bl	114a0 <rb_close@plt>
   16078:	add	sp, sp, #148	; 0x94
   1607c:	pop	{r4, r5, pc}
   16080:	bl	11308 <rb_get_fd@plt>
   16084:	add	r2, sp, #4
   16088:	add	r1, sp, #16
   1608c:	bl	112a8 <getsockname@plt>
   16090:	cmp	r0, #0
   16094:	bne	16070 <fputs@plt+0x4a14>
   16098:	ldr	r4, [pc, #188]	; 1615c <fputs@plt+0x4b00>
   1609c:	add	r1, sp, #8
   160a0:	ldr	r0, [r4]
   160a4:	bl	1144c <rb_dictionary_foreach_start@plt>
   160a8:	add	r1, sp, #8
   160ac:	ldr	r0, [r4]
   160b0:	bl	11368 <rb_dictionary_foreach_cur@plt>
   160b4:	subs	r3, r0, #0
   160b8:	beq	16070 <fputs@plt+0x4a14>
   160bc:	ldrh	r1, [r3, #248]	; 0xf8
   160c0:	ldrh	r2, [sp, #16]
   160c4:	cmp	r2, r1
   160c8:	bne	1614c <fputs@plt+0x4af0>
   160cc:	cmp	r2, #2
   160d0:	beq	160f0 <fputs@plt+0x4a94>
   160d4:	cmp	r2, #10
   160d8:	beq	16114 <fputs@plt+0x4ab8>
   160dc:	mov	r0, #67	; 0x43
   160e0:	ldr	r1, [pc, #120]	; 16160 <fputs@plt+0x4b04>
   160e4:	bl	12120 <fputs@plt+0xac4>
   160e8:	mov	r0, #3
   160ec:	bl	11638 <exit@plt>
   160f0:	ldr	r2, [r3, #252]	; 0xfc
   160f4:	ldr	r1, [sp, #20]
   160f8:	cmp	r1, r2
   160fc:	bne	1614c <fputs@plt+0x4af0>
   16100:	ldr	r2, [pc, #92]	; 16164 <fputs@plt+0x4b08>
   16104:	mov	r1, #1
   16108:	mov	r0, r5
   1610c:	bl	112fc <rb_setselect@plt>
   16110:	b	16078 <fputs@plt+0x4a1c>
   16114:	ldr	r2, [r3, #256]	; 0x100
   16118:	ldr	r1, [sp, #24]
   1611c:	cmp	r1, r2
   16120:	bne	1614c <fputs@plt+0x4af0>
   16124:	ldr	r2, [r3, #260]	; 0x104
   16128:	ldr	r1, [sp, #28]
   1612c:	cmp	r1, r2
   16130:	bne	1614c <fputs@plt+0x4af0>
   16134:	ldr	r2, [r3, #264]	; 0x108
   16138:	ldr	r1, [sp, #32]
   1613c:	cmp	r1, r2
   16140:	ldreq	r2, [r3, #268]	; 0x10c
   16144:	ldreq	r1, [sp, #36]	; 0x24
   16148:	beq	160f8 <fputs@plt+0x4a9c>
   1614c:	add	r1, sp, #8
   16150:	ldr	r0, [r4]
   16154:	bl	11404 <rb_dictionary_foreach_next@plt>
   16158:	b	160a8 <fputs@plt+0x4a4c>
   1615c:	andeq	lr, r2, r8, ror r1
   16160:	andeq	r8, r1, r2, lsr r3
   16164:	andeq	r6, r1, r8, ror #2
   16168:	push	{r4, r5, r6, r7, r8, r9, lr}
   1616c:	sub	sp, sp, #132	; 0x84
   16170:	ldr	r5, [pc, #252]	; 16274 <fputs@plt+0x4c18>
   16174:	ldr	r3, [r1, #464]	; 0x1d0
   16178:	mov	r7, r1
   1617c:	ldr	r2, [r5, #12]
   16180:	mov	r1, sp
   16184:	mov	r6, r0
   16188:	add	r3, r3, r2, lsl #4
   1618c:	mov	r2, #128	; 0x80
   16190:	ldr	r8, [r3, #8]
   16194:	bl	11428 <rb_read@plt>
   16198:	cmp	r0, #0
   1619c:	bge	161dc <fputs@plt+0x4b80>
   161a0:	bl	11644 <__errno_location@plt>
   161a4:	ldr	r0, [r0]
   161a8:	bl	112b4 <rb_ignore_errno@plt>
   161ac:	cmp	r0, #0
   161b0:	bne	161c0 <fputs@plt+0x4b64>
   161b4:	mov	r0, r6
   161b8:	bl	114a0 <rb_close@plt>
   161bc:	b	161d4 <fputs@plt+0x4b78>
   161c0:	mov	r3, r7
   161c4:	ldr	r2, [pc, #172]	; 16278 <fputs@plt+0x4c1c>
   161c8:	mov	r1, #1
   161cc:	mov	r0, r6
   161d0:	bl	112fc <rb_setselect@plt>
   161d4:	add	sp, sp, #132	; 0x84
   161d8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   161dc:	ldrne	r3, [pc, #152]	; 1627c <fputs@plt+0x4c20>
   161e0:	ldrne	r4, [r3, #376]	; 0x178
   161e4:	beq	161b4 <fputs@plt+0x4b58>
   161e8:	cmp	r4, #0
   161ec:	beq	161b4 <fputs@plt+0x4b58>
   161f0:	ldr	r9, [r4]
   161f4:	mov	r0, r9
   161f8:	bl	11464 <strlen@plt>
   161fc:	mov	r1, sp
   16200:	mov	r2, r0
   16204:	mov	r0, r9
   16208:	bl	115fc <strncmp@plt>
   1620c:	cmp	r0, #0
   16210:	bne	1626c <fputs@plt+0x4c10>
   16214:	ldr	r3, [r8]
   16218:	cmp	r3, #0
   1621c:	ldrne	r4, [r3, #8]
   16220:	bne	16244 <fputs@plt+0x4be8>
   16224:	mov	r0, r8
   16228:	bl	15e24 <fputs@plt+0x47c8>
   1622c:	ldr	r3, [pc, #76]	; 16280 <fputs@plt+0x4c24>
   16230:	mov	r2, sp
   16234:	ldr	r1, [r5, #12]
   16238:	mov	r0, r7
   1623c:	bl	12718 <fputs@plt+0x10bc>
   16240:	b	161b4 <fputs@plt+0x4b58>
   16244:	ldr	r9, [r3]
   16248:	ldr	r0, [r9, #4]
   1624c:	bl	114a0 <rb_close@plt>
   16250:	mov	r0, r9
   16254:	bl	15e24 <fputs@plt+0x47c8>
   16258:	cmp	r4, #0
   1625c:	beq	16224 <fputs@plt+0x4bc8>
   16260:	mov	r3, r4
   16264:	ldr	r4, [r4, #8]
   16268:	b	16244 <fputs@plt+0x4be8>
   1626c:	ldr	r4, [r4, #8]
   16270:	b	161e8 <fputs@plt+0x4b8c>
   16274:	andeq	r9, r2, r8, lsr #29
   16278:	andeq	r6, r1, r8, ror #2
   1627c:	andeq	sp, r2, ip, ror #31
   16280:	andeq	r8, r1, pc, asr r3
   16284:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16288:	sub	sp, sp, #152	; 0x98
   1628c:	mov	r3, #1
   16290:	mov	r8, r1
   16294:	add	r1, sp, #24
   16298:	mov	r9, r0
   1629c:	str	r3, [sp, #12]
   162a0:	bl	11458 <rb_inet_pton_sock@plt>
   162a4:	cmp	r0, #0
   162a8:	bne	162c8 <fputs@plt+0x4c6c>
   162ac:	mov	r3, r8
   162b0:	mov	r2, r9
   162b4:	ldr	r1, [pc, #616]	; 16524 <fputs@plt+0x4ec8>
   162b8:	mov	r0, #67	; 0x43
   162bc:	bl	12120 <fputs@plt+0xac4>
   162c0:	mov	r0, #3
   162c4:	bl	11638 <exit@plt>
   162c8:	ldrh	r0, [sp, #24]
   162cc:	rev16	r3, r8
   162d0:	ldr	r4, [pc, #592]	; 16528 <fputs@plt+0x4ecc>
   162d4:	cmp	r0, #2
   162d8:	strheq	r3, [sp, #26]
   162dc:	beq	1636c <fputs@plt+0x4d10>
   162e0:	cmp	r0, #10
   162e4:	uxth	r2, r3
   162e8:	strh	r3, [sp, #26]
   162ec:	bne	1636c <fputs@plt+0x4d10>
   162f0:	ldr	r3, [r4, #252]	; 0xfc
   162f4:	ldr	r1, [sp, #32]
   162f8:	cmp	r1, r3
   162fc:	bne	16330 <fputs@plt+0x4cd4>
   16300:	ldr	r3, [r4, #256]	; 0x100
   16304:	ldr	r1, [sp, #36]	; 0x24
   16308:	cmp	r1, r3
   1630c:	bne	16330 <fputs@plt+0x4cd4>
   16310:	ldr	r3, [r4, #260]	; 0x104
   16314:	ldr	r1, [sp, #40]	; 0x28
   16318:	cmp	r1, r3
   1631c:	bne	16330 <fputs@plt+0x4cd4>
   16320:	ldr	r3, [r4, #264]	; 0x108
   16324:	ldr	r1, [sp, #44]	; 0x2c
   16328:	cmp	r1, r3
   1632c:	beq	16500 <fputs@plt+0x4ea4>
   16330:	add	r5, r4, #188	; 0xbc
   16334:	ldr	r3, [pc, #496]	; 1652c <fputs@plt+0x4ed0>
   16338:	mov	r2, #0
   1633c:	mov	r1, #1
   16340:	bl	1132c <rb_socket@plt>
   16344:	subs	r7, r0, #0
   16348:	bne	163a0 <fputs@plt+0x4d44>
   1634c:	bl	11644 <__errno_location@plt>
   16350:	ldr	r0, [r0]
   16354:	bl	11278 <strerror@plt>
   16358:	ldr	r1, [pc, #464]	; 16530 <fputs@plt+0x4ed4>
   1635c:	mov	r2, r0
   16360:	mov	r0, #67	; 0x43
   16364:	bl	12120 <fputs@plt+0xac4>
   16368:	b	162c0 <fputs@plt+0x4c64>
   1636c:	ldr	r3, [r4, #60]	; 0x3c
   16370:	ldr	r2, [sp, #28]
   16374:	cmp	r2, r3
   16378:	bne	16398 <fputs@plt+0x4d3c>
   1637c:	ldrh	r2, [sp, #26]
   16380:	ldrh	r3, [r4, #58]	; 0x3a
   16384:	cmp	r2, r3
   16388:	bne	16398 <fputs@plt+0x4d3c>
   1638c:	ldr	r3, [r4, #184]	; 0xb8
   16390:	cmp	r3, #0
   16394:	bne	16518 <fputs@plt+0x4ebc>
   16398:	ldr	r5, [pc, #392]	; 16528 <fputs@plt+0x4ecc>
   1639c:	b	16334 <fputs@plt+0x4cd8>
   163a0:	bl	11308 <rb_get_fd@plt>
   163a4:	mov	r3, #4
   163a8:	str	r3, [sp]
   163ac:	mov	r2, #2
   163b0:	add	r3, sp, #12
   163b4:	mov	r1, #1
   163b8:	bl	11614 <setsockopt@plt>
   163bc:	subs	sl, r0, #0
   163c0:	beq	163dc <fputs@plt+0x4d80>
   163c4:	bl	11644 <__errno_location@plt>
   163c8:	ldr	r0, [r0]
   163cc:	bl	11278 <strerror@plt>
   163d0:	ldr	r1, [pc, #348]	; 16534 <fputs@plt+0x4ed8>
   163d4:	mov	r2, r0
   163d8:	b	16360 <fputs@plt+0x4d04>
   163dc:	mov	r0, r7
   163e0:	bl	11308 <rb_get_fd@plt>
   163e4:	ldrh	r2, [sp, #24]
   163e8:	add	r1, sp, #24
   163ec:	cmp	r2, #2
   163f0:	moveq	r2, #16
   163f4:	movne	r2, #28
   163f8:	bl	114f4 <bind@plt>
   163fc:	subs	r6, r0, #0
   16400:	beq	1642c <fputs@plt+0x4dd0>
   16404:	bl	11644 <__errno_location@plt>
   16408:	ldr	r0, [r0]
   1640c:	bl	11278 <strerror@plt>
   16410:	ldr	r1, [pc, #288]	; 16538 <fputs@plt+0x4edc>
   16414:	mov	r2, r0
   16418:	mov	r0, #87	; 0x57
   1641c:	bl	12120 <fputs@plt+0xac4>
   16420:	mov	r0, r7
   16424:	bl	114a0 <rb_close@plt>
   16428:	b	16518 <fputs@plt+0x4ebc>
   1642c:	mov	r2, r6
   16430:	mov	r1, #128	; 0x80
   16434:	mov	r0, r7
   16438:	bl	115f0 <rb_listen@plt>
   1643c:	cmp	r0, #0
   16440:	beq	16470 <fputs@plt+0x4e14>
   16444:	bl	11644 <__errno_location@plt>
   16448:	ldr	r0, [r0]
   1644c:	bl	11278 <strerror@plt>
   16450:	ldr	r1, [pc, #228]	; 1653c <fputs@plt+0x4ee0>
   16454:	mov	r2, r0
   16458:	mov	r0, #87	; 0x57
   1645c:	bl	12120 <fputs@plt+0xac4>
   16460:	mov	r0, r7
   16464:	bl	114a0 <rb_close@plt>
   16468:	mov	r0, r6
   1646c:	b	1651c <fputs@plt+0x4ec0>
   16470:	ldr	r0, [r5, #184]	; 0xb8
   16474:	cmp	r0, #0
   16478:	beq	16480 <fputs@plt+0x4e24>
   1647c:	bl	114a0 <rb_close@plt>
   16480:	ldr	r6, [pc, #184]	; 16540 <fputs@plt+0x4ee4>
   16484:	str	r7, [r5, #184]	; 0xb8
   16488:	add	r1, sp, #16
   1648c:	ldr	r0, [r6]
   16490:	bl	1144c <rb_dictionary_foreach_start@plt>
   16494:	add	r1, sp, #16
   16498:	ldr	r0, [r6]
   1649c:	bl	11368 <rb_dictionary_foreach_cur@plt>
   164a0:	subs	r7, r0, #0
   164a4:	bne	164ec <fputs@plt+0x4e90>
   164a8:	mov	r1, r9
   164ac:	mov	r2, #53	; 0x35
   164b0:	mov	r0, r5
   164b4:	bl	113ec <rb_strlcpy@plt>
   164b8:	add	r1, sp, #24
   164bc:	strh	r8, [r5, #54]	; 0x36
   164c0:	mov	r2, #128	; 0x80
   164c4:	add	r0, r5, #56	; 0x38
   164c8:	bl	11488 <memcpy@plt>
   164cc:	mov	r6, #1
   164d0:	mov	r3, r5
   164d4:	ldr	r2, [pc, #104]	; 16544 <fputs@plt+0x4ee8>
   164d8:	mov	r1, r7
   164dc:	ldr	r0, [r5, #184]	; 0xb8
   164e0:	strb	r6, [r4, #388]	; 0x184
   164e4:	bl	115a8 <rb_accept_tcp@plt>
   164e8:	b	16468 <fputs@plt+0x4e0c>
   164ec:	bl	15e30 <fputs@plt+0x47d4>
   164f0:	add	r1, sp, #16
   164f4:	ldr	r0, [r6]
   164f8:	bl	11404 <rb_dictionary_foreach_next@plt>
   164fc:	b	16494 <fputs@plt+0x4e38>
   16500:	ldrh	r3, [r4, #246]	; 0xf6
   16504:	cmp	r3, r2
   16508:	bne	16330 <fputs@plt+0x4cd4>
   1650c:	ldr	r3, [r4, #372]	; 0x174
   16510:	cmp	r3, #0
   16514:	beq	16330 <fputs@plt+0x4cd4>
   16518:	mov	r0, #0
   1651c:	add	sp, sp, #152	; 0x98
   16520:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16524:	andeq	r8, r1, r3, ror r3
   16528:	andeq	sp, r2, ip, ror #31
   1652c:	muleq	r1, r3, r3
   16530:	andeq	r8, r1, r7, lsr #7
   16534:	andeq	r8, r1, r5, asr #7
   16538:	andeq	r8, r1, fp, ror #7
   1653c:	andeq	r8, r1, sl, lsl #8
   16540:	andeq	lr, r2, r8, ror r1
   16544:	andeq	r6, r1, ip, lsr r0
   16548:	push	{r4, r5, r6, lr}
   1654c:	ldm	r2, {r4, r5}
   16550:	mov	r0, r5
   16554:	bl	114dc <atoi@plt>
   16558:	ldr	r3, [pc, #52]	; 16594 <fputs@plt+0x4f38>
   1655c:	sub	r2, r0, #1
   16560:	cmp	r2, r3
   16564:	bls	16584 <fputs@plt+0x4f28>
   16568:	mov	r0, #67	; 0x43
   1656c:	mov	r3, r5
   16570:	mov	r2, r4
   16574:	ldr	r1, [pc, #28]	; 16598 <fputs@plt+0x4f3c>
   16578:	bl	12120 <fputs@plt+0xac4>
   1657c:	mov	r0, #3
   16580:	bl	11638 <exit@plt>
   16584:	uxth	r1, r0
   16588:	mov	r0, r4
   1658c:	pop	{r4, r5, r6, lr}
   16590:	b	16284 <fputs@plt+0x4c28>
   16594:	strdeq	pc, [r0], -lr
   16598:	andeq	r8, r1, fp, lsr #8
   1659c:	ldr	r3, [r2]
   165a0:	push	{r0, r1, r4, r5, r6, lr}
   165a4:	ldrb	r3, [r3]
   165a8:	ldr	r4, [pc, #228]	; 16694 <fputs@plt+0x5038>
   165ac:	cmp	r3, #49	; 0x31
   165b0:	moveq	r6, #1
   165b4:	movne	r6, #0
   165b8:	beq	16638 <fputs@plt+0x4fdc>
   165bc:	ldr	r0, [r4, #184]	; 0xb8
   165c0:	cmp	r0, #0
   165c4:	bne	165e0 <fputs@plt+0x4f84>
   165c8:	ldr	r3, [r4, #372]	; 0x174
   165cc:	cmp	r3, #0
   165d0:	bne	165e4 <fputs@plt+0x4f88>
   165d4:	strb	r6, [r4, #388]	; 0x184
   165d8:	add	sp, sp, #8
   165dc:	pop	{r4, r5, r6, pc}
   165e0:	bl	114a0 <rb_close@plt>
   165e4:	ldr	r0, [r4, #372]	; 0x174
   165e8:	cmp	r0, #0
   165ec:	beq	165f4 <fputs@plt+0x4f98>
   165f0:	bl	114a0 <rb_close@plt>
   165f4:	ldr	r5, [pc, #156]	; 16698 <fputs@plt+0x503c>
   165f8:	mov	r3, #0
   165fc:	mov	r1, sp
   16600:	ldr	r0, [r5]
   16604:	str	r3, [r4, #372]	; 0x174
   16608:	str	r3, [r4, #184]	; 0xb8
   1660c:	bl	1144c <rb_dictionary_foreach_start@plt>
   16610:	mov	r1, sp
   16614:	ldr	r0, [r5]
   16618:	bl	11368 <rb_dictionary_foreach_cur@plt>
   1661c:	cmp	r0, #0
   16620:	beq	165d4 <fputs@plt+0x4f78>
   16624:	bl	15e30 <fputs@plt+0x47d4>
   16628:	mov	r1, sp
   1662c:	ldr	r0, [r5]
   16630:	bl	11404 <rb_dictionary_foreach_next@plt>
   16634:	b	16610 <fputs@plt+0x4fb4>
   16638:	ldrb	r3, [r4]
   1663c:	cmp	r3, #0
   16640:	beq	16664 <fputs@plt+0x5008>
   16644:	ldrh	r1, [r4, #54]	; 0x36
   16648:	cmp	r1, #0
   1664c:	beq	16664 <fputs@plt+0x5008>
   16650:	ldr	r3, [r4, #184]	; 0xb8
   16654:	cmp	r3, #0
   16658:	bne	16664 <fputs@plt+0x5008>
   1665c:	mov	r0, r4
   16660:	bl	16284 <fputs@plt+0x4c28>
   16664:	ldrb	r3, [r4, #188]	; 0xbc
   16668:	cmp	r3, #0
   1666c:	beq	165d4 <fputs@plt+0x4f78>
   16670:	ldrh	r1, [r4, #242]	; 0xf2
   16674:	cmp	r1, #0
   16678:	beq	165d4 <fputs@plt+0x4f78>
   1667c:	ldr	r3, [r4, #372]	; 0x174
   16680:	cmp	r3, #0
   16684:	bne	165d4 <fputs@plt+0x4f78>
   16688:	ldr	r0, [pc, #12]	; 1669c <fputs@plt+0x5040>
   1668c:	bl	16284 <fputs@plt+0x4c28>
   16690:	b	165d4 <fputs@plt+0x4f78>
   16694:	andeq	sp, r2, ip, ror #31
   16698:	andeq	lr, r2, r8, ror r1
   1669c:	andeq	lr, r2, r8, lsr #1
   166a0:	cmp	r0, #0
   166a4:	push	{r4, lr}
   166a8:	bne	166c0 <fputs@plt+0x5064>
   166ac:	ldr	r3, [pc, #100]	; 16718 <fputs@plt+0x50bc>
   166b0:	ldr	r1, [pc, #100]	; 1671c <fputs@plt+0x50c0>
   166b4:	ldr	r0, [pc, #100]	; 16720 <fputs@plt+0x50c4>
   166b8:	mov	r2, #235	; 0xeb
   166bc:	bl	113e0 <__assert_fail@plt>
   166c0:	cmp	r1, #0
   166c4:	ldreq	r3, [pc, #76]	; 16718 <fputs@plt+0x50bc>
   166c8:	moveq	r2, #236	; 0xec
   166cc:	ldreq	r1, [pc, #72]	; 1671c <fputs@plt+0x50c0>
   166d0:	ldreq	r0, [pc, #76]	; 16724 <fputs@plt+0x50c8>
   166d4:	beq	166bc <fputs@plt+0x5060>
   166d8:	ldr	r3, [r0, #8]
   166dc:	ldr	r2, [r0, #4]
   166e0:	cmp	r3, #0
   166e4:	strne	r2, [r3, #4]
   166e8:	streq	r2, [r1, #4]
   166ec:	ldr	r2, [r0, #4]
   166f0:	cmp	r2, #0
   166f4:	strne	r3, [r2, #8]
   166f8:	streq	r3, [r1]
   166fc:	mov	r3, #0
   16700:	str	r3, [r0, #4]
   16704:	str	r3, [r0, #8]
   16708:	ldr	r3, [r1, #8]
   1670c:	sub	r3, r3, #1
   16710:	str	r3, [r1, #8]
   16714:	pop	{r4, pc}
   16718:	andeq	r8, r1, pc, asr #5
   1671c:	ldrdeq	r7, [r1], -lr
   16720:	strdeq	r7, [r1], -sl
   16724:	andeq	r7, r1, r4, lsl #20
   16728:	ldr	r3, [pc, #152]	; 167c8 <fputs@plt+0x516c>
   1672c:	ldr	r0, [r2]
   16730:	push	{r4, r5, r6, lr}
   16734:	mov	r4, r2
   16738:	ldr	r2, [r3, #12]
   1673c:	ldr	r3, [r0, #464]	; 0x1d0
   16740:	cmp	r1, #0
   16744:	add	r3, r3, r2, lsl #4
   16748:	ldr	r5, [r3, #8]
   1674c:	bne	16778 <fputs@plt+0x511c>
   16750:	ldr	r3, [pc, #116]	; 167cc <fputs@plt+0x5170>
   16754:	ldrb	r2, [r3, #388]	; 0x184
   16758:	cmp	r2, #0
   1675c:	beq	16778 <fputs@plt+0x511c>
   16760:	ldrh	r1, [r0, #248]	; 0xf8
   16764:	ldr	r2, [r4, #8]
   16768:	cmp	r1, #2
   1676c:	beq	16798 <fputs@plt+0x513c>
   16770:	cmp	r1, #10
   16774:	beq	167b4 <fputs@plt+0x5158>
   16778:	ldr	r0, [r4, #4]
   1677c:	bl	114a0 <rb_close@plt>
   16780:	add	r0, r4, #16
   16784:	mov	r1, r5
   16788:	bl	166a0 <fputs@plt+0x5044>
   1678c:	mov	r0, r4
   16790:	pop	{r4, r5, r6, lr}
   16794:	b	15e24 <fputs@plt+0x47c8>
   16798:	ldr	r3, [r3, #184]	; 0xb8
   1679c:	cmp	r3, #0
   167a0:	beq	16778 <fputs@plt+0x511c>
   167a4:	ldr	r3, [r2, #24]
   167a8:	mov	r0, r4
   167ac:	blx	r3
   167b0:	b	16778 <fputs@plt+0x511c>
   167b4:	ldrb	r1, [r2, #23]
   167b8:	cmp	r1, #0
   167bc:	beq	16778 <fputs@plt+0x511c>
   167c0:	ldr	r3, [r3, #372]	; 0x174
   167c4:	b	1679c <fputs@plt+0x5140>
   167c8:	andeq	r9, r2, r8, lsr #29
   167cc:	andeq	sp, r2, ip, ror #31
   167d0:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   167d4:	ldr	r4, [pc, #124]	; 16858 <fputs@plt+0x51fc>
   167d8:	ldr	r5, [r4, #376]	; 0x178
   167dc:	cmp	r5, #0
   167e0:	addne	r7, r4, #376	; 0x178
   167e4:	ldrne	r6, [r5, #8]
   167e8:	bne	1681c <fputs@plt+0x51c0>
   167ec:	ldr	r5, [pc, #104]	; 1685c <fputs@plt+0x5200>
   167f0:	mov	r1, sp
   167f4:	ldr	r0, [r5]
   167f8:	bl	1144c <rb_dictionary_foreach_start@plt>
   167fc:	mov	r1, sp
   16800:	ldr	r0, [r5]
   16804:	bl	11368 <rb_dictionary_foreach_cur@plt>
   16808:	subs	r3, r0, #0
   1680c:	bne	16844 <fputs@plt+0x51e8>
   16810:	strb	r3, [r4, #388]	; 0x184
   16814:	add	sp, sp, #12
   16818:	pop	{r4, r5, r6, r7, pc}
   1681c:	ldr	r0, [r5]
   16820:	bl	15e24 <fputs@plt+0x47c8>
   16824:	mov	r1, r7
   16828:	mov	r0, r5
   1682c:	bl	166a0 <fputs@plt+0x5044>
   16830:	cmp	r6, #0
   16834:	beq	167ec <fputs@plt+0x5190>
   16838:	mov	r5, r6
   1683c:	ldr	r6, [r6, #8]
   16840:	b	1681c <fputs@plt+0x51c0>
   16844:	bl	15e30 <fputs@plt+0x47d4>
   16848:	mov	r1, sp
   1684c:	ldr	r0, [r5]
   16850:	bl	11404 <rb_dictionary_foreach_next@plt>
   16854:	b	167fc <fputs@plt+0x51a0>
   16858:	andeq	sp, r2, ip, ror #31
   1685c:	andeq	lr, r2, r8, ror r1
   16860:	cmp	r0, #0
   16864:	push	{r4, lr}
   16868:	bne	16880 <fputs@plt+0x5224>
   1686c:	ldr	r3, [pc, #124]	; 168f0 <fputs@plt+0x5294>
   16870:	ldr	r1, [pc, #124]	; 168f4 <fputs@plt+0x5298>
   16874:	ldr	r0, [pc, #124]	; 168f8 <fputs@plt+0x529c>
   16878:	mov	r2, #143	; 0x8f
   1687c:	bl	113e0 <__assert_fail@plt>
   16880:	cmp	r1, #0
   16884:	ldreq	r3, [pc, #100]	; 168f0 <fputs@plt+0x5294>
   16888:	moveq	r2, #144	; 0x90
   1688c:	ldreq	r1, [pc, #96]	; 168f4 <fputs@plt+0x5298>
   16890:	ldreq	r0, [pc, #100]	; 168fc <fputs@plt+0x52a0>
   16894:	beq	1687c <fputs@plt+0x5220>
   16898:	cmp	r2, #0
   1689c:	ldreq	r3, [pc, #76]	; 168f0 <fputs@plt+0x5294>
   168a0:	moveq	r2, #145	; 0x91
   168a4:	ldreq	r1, [pc, #72]	; 168f4 <fputs@plt+0x5298>
   168a8:	ldreq	r0, [pc, #80]	; 16900 <fputs@plt+0x52a4>
   168ac:	beq	1687c <fputs@plt+0x5220>
   168b0:	mov	r3, #0
   168b4:	str	r3, [r1, #4]
   168b8:	ldr	r3, [r2]
   168bc:	str	r0, [r1]
   168c0:	cmp	r3, #0
   168c4:	str	r3, [r1, #8]
   168c8:	strne	r1, [r3, #4]
   168cc:	bne	168dc <fputs@plt+0x5280>
   168d0:	ldr	r3, [r2, #4]
   168d4:	cmp	r3, #0
   168d8:	streq	r1, [r2, #4]
   168dc:	ldr	r3, [r2, #8]
   168e0:	str	r1, [r2]
   168e4:	add	r3, r3, #1
   168e8:	str	r3, [r2, #8]
   168ec:	pop	{r4, pc}
   168f0:	ldrdeq	r8, [r1], -lr
   168f4:	ldrdeq	r7, [r1], -lr
   168f8:	andeq	r7, r1, r1, lsl sl
   168fc:	strdeq	r7, [r1], -sl
   16900:	andeq	r7, r1, r4, lsl #20
   16904:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16908:	mov	r9, r0
   1690c:	ldr	r6, [pc, #336]	; 16a64 <fputs@plt+0x5408>
   16910:	ldr	r3, [r0, #464]	; 0x1d0
   16914:	sub	sp, sp, #272	; 0x110
   16918:	ldr	r2, [r6, #12]
   1691c:	mov	r0, #28
   16920:	mov	r5, r1
   16924:	add	r3, r3, r2, lsl #4
   16928:	ldr	r8, [r3, #8]
   1692c:	bl	15fdc <fputs@plt+0x4980>
   16930:	ldrh	sl, [r9, #248]	; 0xf8
   16934:	mov	r3, #1
   16938:	str	r3, [sp, #12]
   1693c:	cmp	sl, #10
   16940:	ldrne	r7, [pc, #288]	; 16a68 <fputs@plt+0x540c>
   16944:	mov	r4, r0
   16948:	bne	16968 <fputs@plt+0x530c>
   1694c:	ldr	r3, [r5, #16]
   16950:	cmp	r3, #1
   16954:	ldrne	r7, [pc, #272]	; 16a6c <fputs@plt+0x5410>
   16958:	bne	16968 <fputs@plt+0x530c>
   1695c:	bl	15e24 <fputs@plt+0x47c8>
   16960:	add	sp, sp, #272	; 0x110
   16964:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16968:	ldr	r3, [r7, #184]	; 0xb8
   1696c:	cmp	r3, #0
   16970:	bne	1697c <fputs@plt+0x5320>
   16974:	mov	r0, r4
   16978:	b	1695c <fputs@plt+0x5300>
   1697c:	mov	r2, #128	; 0x80
   16980:	add	r1, r9, #248	; 0xf8
   16984:	add	r0, sp, #16
   16988:	bl	11488 <memcpy@plt>
   1698c:	mov	r2, #128	; 0x80
   16990:	add	r1, r7, #56	; 0x38
   16994:	add	r0, sp, #144	; 0x90
   16998:	bl	11488 <memcpy@plt>
   1699c:	str	r9, [r4]
   169a0:	str	r5, [r4, #8]
   169a4:	str	r7, [r4, #12]
   169a8:	mov	r3, r5
   169ac:	mov	r2, #0
   169b0:	mov	r1, #1
   169b4:	mov	r0, sl
   169b8:	bl	1132c <rb_socket@plt>
   169bc:	cmp	r0, #0
   169c0:	str	r0, [r4, #4]
   169c4:	bne	169ec <fputs@plt+0x5390>
   169c8:	bl	11644 <__errno_location@plt>
   169cc:	ldr	r0, [r0]
   169d0:	bl	11278 <strerror@plt>
   169d4:	mov	r2, r5
   169d8:	ldr	r1, [pc, #144]	; 16a70 <fputs@plt+0x5414>
   169dc:	mov	r3, r0
   169e0:	mov	r0, #87	; 0x57
   169e4:	bl	12120 <fputs@plt+0xac4>
   169e8:	b	16974 <fputs@plt+0x5318>
   169ec:	bl	11308 <rb_get_fd@plt>
   169f0:	mov	r3, #4
   169f4:	str	r3, [sp]
   169f8:	mov	r2, #1
   169fc:	add	r3, sp, #12
   16a00:	mov	r1, #6
   16a04:	bl	11614 <setsockopt@plt>
   16a08:	mov	r3, #0
   16a0c:	strh	r3, [sp, #146]	; 0x92
   16a10:	ldrh	r3, [r5, #20]
   16a14:	mov	r2, r8
   16a18:	add	r1, r4, #16
   16a1c:	rev16	r3, r3
   16a20:	mov	r0, r4
   16a24:	strh	r3, [sp, #18]
   16a28:	bl	16860 <fputs@plt+0x5204>
   16a2c:	ldrb	r3, [r5, #22]
   16a30:	str	r4, [sp]
   16a34:	add	r2, sp, #144	; 0x90
   16a38:	cmp	r3, #0
   16a3c:	ldr	r3, [r6, #60]	; 0x3c
   16a40:	add	r1, sp, #16
   16a44:	str	r3, [sp, #4]
   16a48:	ldr	r3, [pc, #36]	; 16a74 <fputs@plt+0x5418>
   16a4c:	ldr	r0, [r4, #4]
   16a50:	bne	16a5c <fputs@plt+0x5400>
   16a54:	bl	112cc <rb_connect_tcp@plt>
   16a58:	b	16960 <fputs@plt+0x5304>
   16a5c:	bl	112c0 <rb_connect_tcp_ssl@plt>
   16a60:	b	16960 <fputs@plt+0x5304>
   16a64:	andeq	r9, r2, r8, lsr #29
   16a68:	andeq	sp, r2, ip, ror #31
   16a6c:	andeq	lr, r2, r8, lsr #1
   16a70:	andeq	r8, r1, sl, asr #8
   16a74:	andeq	r6, r1, r8, lsr #14
   16a78:	push	{r4, lr}
   16a7c:	mov	r4, r0
   16a80:	ldr	r1, [pc, #100]	; 16aec <fputs@plt+0x5490>
   16a84:	bl	11374 <strcasecmp@plt>
   16a88:	cmp	r0, #0
   16a8c:	beq	16ad4 <fputs@plt+0x5478>
   16a90:	ldr	r1, [pc, #88]	; 16af0 <fputs@plt+0x5494>
   16a94:	mov	r0, r4
   16a98:	bl	11374 <strcasecmp@plt>
   16a9c:	cmp	r0, #0
   16aa0:	beq	16adc <fputs@plt+0x5480>
   16aa4:	ldr	r1, [pc, #72]	; 16af4 <fputs@plt+0x5498>
   16aa8:	mov	r0, r4
   16aac:	bl	11374 <strcasecmp@plt>
   16ab0:	cmp	r0, #0
   16ab4:	beq	16ae4 <fputs@plt+0x5488>
   16ab8:	ldr	r1, [pc, #56]	; 16af8 <fputs@plt+0x549c>
   16abc:	mov	r0, r4
   16ac0:	bl	11374 <strcasecmp@plt>
   16ac4:	cmp	r0, #0
   16ac8:	moveq	r0, #4
   16acc:	movne	r0, #0
   16ad0:	pop	{r4, pc}
   16ad4:	mov	r0, #1
   16ad8:	pop	{r4, pc}
   16adc:	mov	r0, #2
   16ae0:	pop	{r4, pc}
   16ae4:	mov	r0, #3
   16ae8:	pop	{r4, pc}
   16aec:	andeq	r8, r1, sl, ror r4
   16af0:	andeq	r8, r1, r1, lsl #9
   16af4:	andeq	r8, r1, r8, lsl #9
   16af8:	muleq	r1, r4, r4
   16afc:	push	{r4, r5, r6, r7, r8, lr}
   16b00:	mov	r6, r2
   16b04:	ldr	r0, [r2, #4]
   16b08:	bl	114dc <atoi@plt>
   16b0c:	mov	r5, r0
   16b10:	mov	r0, #40	; 0x28
   16b14:	bl	15fdc <fputs@plt+0x4980>
   16b18:	ldr	r3, [pc, #344]	; 16c78 <fputs@plt+0x561c>
   16b1c:	sub	r2, r5, #1
   16b20:	cmp	r2, r3
   16b24:	bls	16b40 <fputs@plt+0x54e4>
   16b28:	ldm	r6, {r2, r3}
   16b2c:	ldr	r1, [pc, #328]	; 16c7c <fputs@plt+0x5620>
   16b30:	mov	r0, #67	; 0x43
   16b34:	bl	12120 <fputs@plt+0xac4>
   16b38:	mov	r0, #3
   16b3c:	bl	11638 <exit@plt>
   16b40:	ldr	r7, [r6]
   16b44:	mov	r4, r0
   16b48:	strh	r5, [r0, #20]
   16b4c:	mov	r0, r7
   16b50:	bl	16a78 <fputs@plt+0x541c>
   16b54:	mov	r3, r5
   16b58:	str	r0, [r4, #16]
   16b5c:	sub	r0, r0, #1
   16b60:	cmp	r0, #3
   16b64:	ldrls	pc, [pc, r0, lsl #2]
   16b68:	b	16c2c <fputs@plt+0x55d0>
   16b6c:	andeq	r6, r1, ip, ror fp
   16b70:	andeq	r6, r1, r8, asr #23
   16b74:	andeq	r6, r1, r8, ror #23
   16b78:	andeq	r6, r1, r8, lsl #24
   16b7c:	ldr	r2, [pc, #252]	; 16c80 <fputs@plt+0x5624>
   16b80:	mov	r1, #16
   16b84:	mov	r0, r4
   16b88:	bl	115e4 <snprintf@plt>
   16b8c:	mov	r3, #0
   16b90:	strb	r3, [r4, #22]
   16b94:	ldr	r3, [pc, #232]	; 16c84 <fputs@plt+0x5628>
   16b98:	str	r3, [r4, #24]
   16b9c:	ldr	r2, [pc, #228]	; 16c88 <fputs@plt+0x562c>
   16ba0:	ldrh	r3, [r4, #20]
   16ba4:	ldr	r0, [r4, #16]
   16ba8:	ldr	r2, [r2, #376]	; 0x178
   16bac:	cmp	r2, #0
   16bb0:	bne	16c38 <fputs@plt+0x55dc>
   16bb4:	add	r1, r4, #28
   16bb8:	mov	r0, r4
   16bbc:	ldr	r2, [pc, #200]	; 16c8c <fputs@plt+0x5630>
   16bc0:	pop	{r4, r5, r6, r7, r8, lr}
   16bc4:	b	16860 <fputs@plt+0x5204>
   16bc8:	ldr	r2, [pc, #192]	; 16c90 <fputs@plt+0x5634>
   16bcc:	mov	r1, #16
   16bd0:	mov	r0, r4
   16bd4:	bl	115e4 <snprintf@plt>
   16bd8:	mov	r3, #0
   16bdc:	strb	r3, [r4, #22]
   16be0:	ldr	r3, [pc, #172]	; 16c94 <fputs@plt+0x5638>
   16be4:	b	16b98 <fputs@plt+0x553c>
   16be8:	ldr	r2, [pc, #168]	; 16c98 <fputs@plt+0x563c>
   16bec:	mov	r1, #16
   16bf0:	mov	r0, r4
   16bf4:	bl	115e4 <snprintf@plt>
   16bf8:	mov	r3, #0
   16bfc:	strb	r3, [r4, #22]
   16c00:	ldr	r3, [pc, #148]	; 16c9c <fputs@plt+0x5640>
   16c04:	b	16b98 <fputs@plt+0x553c>
   16c08:	ldr	r2, [pc, #144]	; 16ca0 <fputs@plt+0x5644>
   16c0c:	mov	r1, #16
   16c10:	mov	r0, r4
   16c14:	bl	115e4 <snprintf@plt>
   16c18:	ldr	r3, [pc, #124]	; 16c9c <fputs@plt+0x5640>
   16c1c:	str	r3, [r4, #24]
   16c20:	mov	r3, #1
   16c24:	strb	r3, [r4, #22]
   16c28:	b	16b9c <fputs@plt+0x5540>
   16c2c:	mov	r2, r7
   16c30:	ldr	r1, [pc, #108]	; 16ca4 <fputs@plt+0x5648>
   16c34:	b	16b30 <fputs@plt+0x54d4>
   16c38:	ldr	r1, [r2]
   16c3c:	ldr	ip, [r1, #16]
   16c40:	cmp	r0, ip
   16c44:	bne	16c54 <fputs@plt+0x55f8>
   16c48:	ldrh	r1, [r1, #20]
   16c4c:	cmp	r1, r3
   16c50:	beq	16c5c <fputs@plt+0x5600>
   16c54:	ldr	r2, [r2, #8]
   16c58:	b	16bac <fputs@plt+0x5550>
   16c5c:	ldr	r2, [r6]
   16c60:	mov	r0, #67	; 0x43
   16c64:	ldr	r1, [pc, #60]	; 16ca8 <fputs@plt+0x564c>
   16c68:	bl	12120 <fputs@plt+0xac4>
   16c6c:	mov	r0, r4
   16c70:	pop	{r4, r5, r6, r7, r8, lr}
   16c74:	b	15e24 <fputs@plt+0x47c8>
   16c78:	strdeq	pc, [r0], -lr
   16c7c:	andeq	r8, r1, r1, lsr #9
   16c80:	andeq	r8, r1, r6, asr #9
   16c84:	andeq	r6, r1, r0, lsl lr
   16c88:	andeq	sp, r2, ip, ror #31
   16c8c:	andeq	lr, r2, r4, ror #2
   16c90:	ldrdeq	r8, [r1], -r1
   16c94:	andeq	r6, r1, r8, lsr sp
   16c98:	ldrdeq	r8, [r1], -ip
   16c9c:	andeq	r6, r1, ip, lsr #25
   16ca0:	andeq	r8, r1, ip, ror #9
   16ca4:	strdeq	r8, [r1], -sp
   16ca8:	andeq	r8, r1, fp, lsr #10
   16cac:	ldr	r3, [r0, #12]
   16cb0:	push	{r4, r5, lr}
   16cb4:	sub	sp, sp, #140	; 0x8c
   16cb8:	ldrh	r2, [r3, #54]	; 0x36
   16cbc:	mov	r1, #128	; 0x80
   16cc0:	mov	r4, r0
   16cc4:	str	r2, [sp]
   16cc8:	add	r0, sp, #8
   16ccc:	ldr	r2, [pc, #92]	; 16d30 <fputs@plt+0x56d4>
   16cd0:	bl	115e4 <snprintf@plt>
   16cd4:	add	r0, sp, #8
   16cd8:	bl	11464 <strlen@plt>
   16cdc:	add	r1, sp, #8
   16ce0:	mov	r2, r0
   16ce4:	ldr	r0, [r4, #4]
   16ce8:	bl	113d4 <rb_write@plt>
   16cec:	cmp	r0, #0
   16cf0:	ble	16d28 <fputs@plt+0x56cc>
   16cf4:	ldr	r5, [r4, #8]
   16cf8:	mov	r0, r5
   16cfc:	bl	11464 <strlen@plt>
   16d00:	mov	r1, r5
   16d04:	add	r2, r0, #1
   16d08:	ldr	r0, [r4, #4]
   16d0c:	bl	113d4 <rb_write@plt>
   16d10:	cmp	r0, #0
   16d14:	ble	16d28 <fputs@plt+0x56cc>
   16d18:	mov	r2, #2
   16d1c:	ldr	r1, [pc, #16]	; 16d34 <fputs@plt+0x56d8>
   16d20:	ldr	r0, [r4, #4]
   16d24:	bl	113d4 <rb_write@plt>
   16d28:	add	sp, sp, #140	; 0x8c
   16d2c:	pop	{r4, r5, pc}
   16d30:	andeq	r8, r1, r7, asr r5
   16d34:	andeq	r8, r1, r0, ror r5
   16d38:	ldr	r2, [pc, #204]	; 16e0c <fputs@plt+0x57b0>
   16d3c:	ldr	ip, [r0]
   16d40:	mov	r3, r0
   16d44:	ldr	r0, [r2]
   16d48:	ldrh	r2, [r2, #4]
   16d4c:	push	{r4, r5, lr}
   16d50:	sub	sp, sp, #36	; 0x24
   16d54:	add	r1, sp, #4
   16d58:	strh	r2, [sp, #8]
   16d5c:	ldrh	r2, [ip, #248]	; 0xf8
   16d60:	str	r0, [sp, #4]
   16d64:	cmp	r2, #2
   16d68:	beq	16d7c <fputs@plt+0x5720>
   16d6c:	cmp	r2, #10
   16d70:	beq	16dd4 <fputs@plt+0x5778>
   16d74:	add	sp, sp, #36	; 0x24
   16d78:	pop	{r4, r5, pc}
   16d7c:	mov	r2, #1
   16d80:	strb	r2, [sp, #10]
   16d84:	ldr	r2, [r3, #12]
   16d88:	ldr	r0, [r2, #60]	; 0x3c
   16d8c:	ldrh	r2, [r2, #58]	; 0x3a
   16d90:	str	r0, [sp, #11]
   16d94:	strh	r2, [sp, #15]
   16d98:	add	r2, r1, #13
   16d9c:	sub	r2, r1, r2
   16da0:	ldr	r0, [r3, #4]
   16da4:	mov	r4, r3
   16da8:	bl	113d4 <rb_write@plt>
   16dac:	cmp	r0, #0
   16db0:	ble	16d74 <fputs@plt+0x5718>
   16db4:	ldr	r5, [r4, #8]
   16db8:	mov	r0, r5
   16dbc:	bl	11464 <strlen@plt>
   16dc0:	mov	r1, r5
   16dc4:	add	r2, r0, #1
   16dc8:	ldr	r0, [r4, #4]
   16dcc:	bl	113d4 <rb_write@plt>
   16dd0:	b	16d74 <fputs@plt+0x5718>
   16dd4:	mov	r2, #4
   16dd8:	strb	r2, [sp, #10]
   16ddc:	ldr	r2, [r3, #12]
   16de0:	add	ip, r1, #7
   16de4:	add	r0, r2, #64	; 0x40
   16de8:	add	lr, r2, #80	; 0x50
   16dec:	ldr	r4, [r0], #4
   16df0:	cmp	r0, lr
   16df4:	str	r4, [ip], #4
   16df8:	bne	16dec <fputs@plt+0x5790>
   16dfc:	ldrh	r2, [r2, #58]	; 0x3a
   16e00:	strh	r2, [sp, #27]
   16e04:	add	r2, r1, #25
   16e08:	b	16d9c <fputs@plt+0x5740>
   16e0c:	andeq	r8, r1, sl, ror #5
   16e10:	push	{r4, r5, lr}
   16e14:	sub	sp, sp, #20
   16e18:	mov	r3, #260	; 0x104
   16e1c:	strh	r3, [sp, #4]
   16e20:	ldr	r3, [r0, #12]
   16e24:	mov	r4, r0
   16e28:	add	r1, sp, #4
   16e2c:	ldrh	r2, [r3, #58]	; 0x3a
   16e30:	ldr	r3, [r3, #60]	; 0x3c
   16e34:	ldr	r0, [r0, #4]
   16e38:	strh	r2, [sp, #6]
   16e3c:	str	r3, [sp, #8]
   16e40:	mov	r2, #9
   16e44:	mov	r3, #0
   16e48:	strb	r3, [sp, #12]
   16e4c:	bl	113d4 <rb_write@plt>
   16e50:	cmp	r0, #0
   16e54:	blt	16e74 <fputs@plt+0x5818>
   16e58:	ldr	r5, [r4, #8]
   16e5c:	mov	r0, r5
   16e60:	bl	11464 <strlen@plt>
   16e64:	mov	r1, r5
   16e68:	add	r2, r0, #1
   16e6c:	ldr	r0, [r4, #4]
   16e70:	bl	113d4 <rb_write@plt>
   16e74:	add	sp, sp, #20
   16e78:	pop	{r4, r5, pc}
   16e7c:	push	{r4, r5, r6, r7, r8, lr}
   16e80:	mov	r5, r0
   16e84:	ldr	r1, [pc, #104]	; 16ef4 <fputs@plt+0x5898>
   16e88:	bl	15f78 <fputs@plt+0x491c>
   16e8c:	cmp	r0, #0
   16e90:	popeq	{r4, r5, r6, r7, r8, pc}
   16e94:	ldr	r3, [pc, #92]	; 16ef8 <fputs@plt+0x589c>
   16e98:	ldr	r4, [r5, #464]	; 0x1d0
   16e9c:	ldr	r2, [r3, #12]
   16ea0:	ldr	r6, [r3, #60]	; 0x3c
   16ea4:	add	r4, r4, r2, lsl #4
   16ea8:	ldr	r7, [r4, #8]
   16eac:	bl	11470 <rb_current_time@plt>
   16eb0:	mov	r3, #1
   16eb4:	add	r0, r6, r0
   16eb8:	str	r0, [r4, #4]
   16ebc:	strb	r3, [r7, #12]
   16ec0:	ldr	r3, [pc, #52]	; 16efc <fputs@plt+0x58a0>
   16ec4:	ldr	r4, [r3, #376]	; 0x178
   16ec8:	cmp	r4, #0
   16ecc:	bne	16ee0 <fputs@plt+0x5884>
   16ed0:	ldr	r0, [r5]
   16ed4:	ldr	r1, [pc, #36]	; 16f00 <fputs@plt+0x58a4>
   16ed8:	pop	{r4, r5, r6, r7, r8, lr}
   16edc:	b	120c8 <fputs@plt+0xa6c>
   16ee0:	ldr	r1, [r4]
   16ee4:	mov	r0, r5
   16ee8:	bl	16904 <fputs@plt+0x52a8>
   16eec:	ldr	r4, [r4, #8]
   16ef0:	b	16ec8 <fputs@plt+0x586c>
   16ef4:	andeq	r8, r1, lr, lsr r1
   16ef8:	andeq	r9, r2, r8, lsr #29
   16efc:	andeq	sp, r2, ip, ror #31
   16f00:	andeq	r8, r1, r3, ror r5
   16f04:	ldr	r2, [pc, #68]	; 16f50 <fputs@plt+0x58f4>
   16f08:	ldr	r1, [r2, #12]
   16f0c:	ldr	r2, [r0, #464]	; 0x1d0
   16f10:	add	r2, r2, r1, lsl #4
   16f14:	ldr	r2, [r2, #8]
   16f18:	cmp	r2, #0
   16f1c:	bxeq	lr
   16f20:	ldrb	r2, [r2, #12]
   16f24:	cmp	r2, #0
   16f28:	bxne	lr
   16f2c:	push	{r4, lr}
   16f30:	mov	r4, r0
   16f34:	ldr	r1, [pc, #24]	; 16f54 <fputs@plt+0x58f8>
   16f38:	bl	15f78 <fputs@plt+0x491c>
   16f3c:	cmp	r0, #0
   16f40:	popeq	{r4, pc}
   16f44:	mov	r0, r4
   16f48:	pop	{r4, lr}
   16f4c:	b	16e7c <fputs@plt+0x5820>
   16f50:	andeq	r9, r2, r8, lsr #29
   16f54:	andeq	r7, r1, pc, ror #31
   16f58:	ldr	r3, [pc, #120]	; 16fd8 <fputs@plt+0x597c>
   16f5c:	push	{r4, r5, r6, lr}
   16f60:	mov	r4, r0
   16f64:	ldrb	r2, [r3, #388]	; 0x184
   16f68:	cmp	r2, #0
   16f6c:	ldr	r2, [pc, #104]	; 16fdc <fputs@plt+0x5980>
   16f70:	beq	16f80 <fputs@plt+0x5924>
   16f74:	ldr	r3, [r3, #384]	; 0x180
   16f78:	cmp	r3, #0
   16f7c:	bne	16f94 <fputs@plt+0x5938>
   16f80:	ldr	r1, [r2, #12]
   16f84:	mov	r0, r4
   16f88:	bl	12908 <fputs@plt+0x12ac>
   16f8c:	mov	r0, #1
   16f90:	pop	{r4, r5, r6, pc}
   16f94:	ldr	r3, [r0, #460]	; 0x1cc
   16f98:	ldr	r5, [r2, #12]
   16f9c:	add	r3, r3, #1
   16fa0:	str	r3, [r0, #460]	; 0x1cc
   16fa4:	mov	r0, #16
   16fa8:	bl	15fdc <fputs@plt+0x4980>
   16fac:	ldr	r3, [r4, #464]	; 0x1d0
   16fb0:	ldr	r1, [pc, #40]	; 16fe0 <fputs@plt+0x5984>
   16fb4:	add	r3, r3, r5, lsl #4
   16fb8:	str	r0, [r3, #8]
   16fbc:	mov	r0, r4
   16fc0:	bl	15f78 <fputs@plt+0x491c>
   16fc4:	cmp	r0, #0
   16fc8:	beq	16f8c <fputs@plt+0x5930>
   16fcc:	mov	r0, r4
   16fd0:	bl	16e7c <fputs@plt+0x5820>
   16fd4:	b	16f8c <fputs@plt+0x5930>
   16fd8:	andeq	sp, r2, ip, ror #31
   16fdc:	andeq	r9, r2, r8, lsr #29
   16fe0:	andeq	r7, r1, pc, ror #31
   16fe4:	push	{r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   16fe8:	mov	r5, r2
   16fec:	ldr	r4, [r2]
   16ff0:	mov	r0, r4
   16ff4:	bl	16a78 <fputs@plt+0x541c>
   16ff8:	ldr	r5, [r5, #4]
   16ffc:	mov	r6, r0
   17000:	mov	r0, r5
   17004:	bl	114dc <atoi@plt>
   17008:	ldr	r2, [pc, #380]	; 1718c <fputs@plt+0x5b30>
   1700c:	sub	r1, r0, #1
   17010:	cmp	r1, r2
   17014:	bls	17034 <fputs@plt+0x59d8>
   17018:	ldr	r1, [pc, #368]	; 17190 <fputs@plt+0x5b34>
   1701c:	mov	r3, r5
   17020:	mov	r2, r4
   17024:	mov	r0, #67	; 0x43
   17028:	bl	12120 <fputs@plt+0xac4>
   1702c:	mov	r0, #3
   17030:	bl	11638 <exit@plt>
   17034:	cmp	r6, #0
   17038:	mov	r3, r0
   1703c:	moveq	r2, r4
   17040:	ldreq	r1, [pc, #332]	; 17194 <fputs@plt+0x5b38>
   17044:	beq	17024 <fputs@plt+0x59c8>
   17048:	ldr	r7, [pc, #328]	; 17198 <fputs@plt+0x5b3c>
   1704c:	uxth	r1, r0
   17050:	ldr	r2, [r7, #376]	; 0x178
   17054:	cmp	r2, #0
   17058:	moveq	r2, r4
   1705c:	ldreq	r1, [pc, #312]	; 1719c <fputs@plt+0x5b40>
   17060:	beq	17024 <fputs@plt+0x59c8>
   17064:	ldr	r5, [r2]
   17068:	ldr	r0, [r5, #16]
   1706c:	cmp	r6, r0
   17070:	bne	17080 <fputs@plt+0x5a24>
   17074:	ldrh	r0, [r5, #20]
   17078:	cmp	r0, r1
   1707c:	beq	17174 <fputs@plt+0x5b18>
   17080:	ldr	r2, [r2, #8]
   17084:	b	17054 <fputs@plt+0x59f8>
   17088:	ldr	r2, [r8, #12]
   1708c:	ldr	r3, [r4, #464]	; 0x1d0
   17090:	add	r3, r3, r2, lsl #4
   17094:	ldr	r9, [r3, #8]
   17098:	cmp	r9, #0
   1709c:	beq	17124 <fputs@plt+0x5ac8>
   170a0:	ldr	r3, [r4, #460]	; 0x1cc
   170a4:	add	r3, r3, #1
   170a8:	str	r3, [r4, #460]	; 0x1cc
   170ac:	ldr	r3, [r9]
   170b0:	cmp	r3, #0
   170b4:	beq	17108 <fputs@plt+0x5aac>
   170b8:	ldr	sl, [r3]
   170bc:	ldrh	r1, [r5, #20]
   170c0:	ldr	r2, [sl, #8]
   170c4:	ldrh	r0, [r2, #20]
   170c8:	cmp	r0, r1
   170cc:	bne	1716c <fputs@plt+0x5b10>
   170d0:	ldr	r1, [r2, #16]
   170d4:	ldr	r2, [r5, #16]
   170d8:	cmp	r1, r2
   170dc:	bne	1716c <fputs@plt+0x5b10>
   170e0:	mov	r1, r9
   170e4:	add	r0, sl, #16
   170e8:	bl	166a0 <fputs@plt+0x5044>
   170ec:	mov	r0, sl
   170f0:	bl	15e24 <fputs@plt+0x47c8>
   170f4:	ldr	r3, [r9, #8]
   170f8:	cmp	r3, #0
   170fc:	bne	17108 <fputs@plt+0x5aac>
   17100:	mov	r0, r4
   17104:	bl	15e30 <fputs@plt+0x47d4>
   17108:	ldr	r3, [r4, #460]	; 0x1cc
   1710c:	sub	r3, r3, #1
   17110:	cmp	r3, #0
   17114:	str	r3, [r4, #460]	; 0x1cc
   17118:	bne	17124 <fputs@plt+0x5ac8>
   1711c:	mov	r0, r4
   17120:	bl	12594 <fputs@plt+0xf38>
   17124:	mov	r1, sp
   17128:	ldr	r0, [r6]
   1712c:	bl	11404 <rb_dictionary_foreach_next@plt>
   17130:	mov	r1, sp
   17134:	ldr	r0, [r6]
   17138:	bl	11368 <rb_dictionary_foreach_cur@plt>
   1713c:	subs	r4, r0, #0
   17140:	bne	17088 <fputs@plt+0x5a2c>
   17144:	ldr	r1, [pc, #84]	; 171a0 <fputs@plt+0x5b44>
   17148:	add	r0, r5, #28
   1714c:	bl	166a0 <fputs@plt+0x5044>
   17150:	mov	r0, r5
   17154:	bl	15e24 <fputs@plt+0x47c8>
   17158:	ldr	r3, [r7, #384]	; 0x180
   1715c:	cmp	r3, #0
   17160:	strbeq	r3, [r7, #388]	; 0x184
   17164:	add	sp, sp, #8
   17168:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1716c:	ldr	r3, [r3, #8]
   17170:	b	170b0 <fputs@plt+0x5a54>
   17174:	ldr	r6, [pc, #40]	; 171a4 <fputs@plt+0x5b48>
   17178:	mov	r1, sp
   1717c:	ldr	r8, [pc, #36]	; 171a8 <fputs@plt+0x5b4c>
   17180:	ldr	r0, [r6]
   17184:	bl	1144c <rb_dictionary_foreach_start@plt>
   17188:	b	17130 <fputs@plt+0x5ad4>
   1718c:	strdeq	pc, [r0], -lr
   17190:	muleq	r1, r4, r5
   17194:	andeq	r8, r1, r3, asr #11
   17198:	andeq	sp, r2, ip, ror #31
   1719c:	strdeq	r8, [r1], -sl
   171a0:	andeq	lr, r2, r4, ror #2
   171a4:	andeq	lr, r2, r8, ror r1
   171a8:	andeq	r9, r2, r8, lsr #29
   171ac:	subs	r2, r1, #1
   171b0:	bxeq	lr
   171b4:	bcc	1738c <fputs@plt+0x5d30>
   171b8:	cmp	r0, r1
   171bc:	bls	17370 <fputs@plt+0x5d14>
   171c0:	tst	r1, r2
   171c4:	beq	1737c <fputs@plt+0x5d20>
   171c8:	clz	r3, r0
   171cc:	clz	r2, r1
   171d0:	sub	r3, r2, r3
   171d4:	rsbs	r3, r3, #31
   171d8:	addne	r3, r3, r3, lsl #1
   171dc:	mov	r2, #0
   171e0:	addne	pc, pc, r3, lsl #2
   171e4:	nop			; (mov r0, r0)
   171e8:	cmp	r0, r1, lsl #31
   171ec:	adc	r2, r2, r2
   171f0:	subcs	r0, r0, r1, lsl #31
   171f4:	cmp	r0, r1, lsl #30
   171f8:	adc	r2, r2, r2
   171fc:	subcs	r0, r0, r1, lsl #30
   17200:	cmp	r0, r1, lsl #29
   17204:	adc	r2, r2, r2
   17208:	subcs	r0, r0, r1, lsl #29
   1720c:	cmp	r0, r1, lsl #28
   17210:	adc	r2, r2, r2
   17214:	subcs	r0, r0, r1, lsl #28
   17218:	cmp	r0, r1, lsl #27
   1721c:	adc	r2, r2, r2
   17220:	subcs	r0, r0, r1, lsl #27
   17224:	cmp	r0, r1, lsl #26
   17228:	adc	r2, r2, r2
   1722c:	subcs	r0, r0, r1, lsl #26
   17230:	cmp	r0, r1, lsl #25
   17234:	adc	r2, r2, r2
   17238:	subcs	r0, r0, r1, lsl #25
   1723c:	cmp	r0, r1, lsl #24
   17240:	adc	r2, r2, r2
   17244:	subcs	r0, r0, r1, lsl #24
   17248:	cmp	r0, r1, lsl #23
   1724c:	adc	r2, r2, r2
   17250:	subcs	r0, r0, r1, lsl #23
   17254:	cmp	r0, r1, lsl #22
   17258:	adc	r2, r2, r2
   1725c:	subcs	r0, r0, r1, lsl #22
   17260:	cmp	r0, r1, lsl #21
   17264:	adc	r2, r2, r2
   17268:	subcs	r0, r0, r1, lsl #21
   1726c:	cmp	r0, r1, lsl #20
   17270:	adc	r2, r2, r2
   17274:	subcs	r0, r0, r1, lsl #20
   17278:	cmp	r0, r1, lsl #19
   1727c:	adc	r2, r2, r2
   17280:	subcs	r0, r0, r1, lsl #19
   17284:	cmp	r0, r1, lsl #18
   17288:	adc	r2, r2, r2
   1728c:	subcs	r0, r0, r1, lsl #18
   17290:	cmp	r0, r1, lsl #17
   17294:	adc	r2, r2, r2
   17298:	subcs	r0, r0, r1, lsl #17
   1729c:	cmp	r0, r1, lsl #16
   172a0:	adc	r2, r2, r2
   172a4:	subcs	r0, r0, r1, lsl #16
   172a8:	cmp	r0, r1, lsl #15
   172ac:	adc	r2, r2, r2
   172b0:	subcs	r0, r0, r1, lsl #15
   172b4:	cmp	r0, r1, lsl #14
   172b8:	adc	r2, r2, r2
   172bc:	subcs	r0, r0, r1, lsl #14
   172c0:	cmp	r0, r1, lsl #13
   172c4:	adc	r2, r2, r2
   172c8:	subcs	r0, r0, r1, lsl #13
   172cc:	cmp	r0, r1, lsl #12
   172d0:	adc	r2, r2, r2
   172d4:	subcs	r0, r0, r1, lsl #12
   172d8:	cmp	r0, r1, lsl #11
   172dc:	adc	r2, r2, r2
   172e0:	subcs	r0, r0, r1, lsl #11
   172e4:	cmp	r0, r1, lsl #10
   172e8:	adc	r2, r2, r2
   172ec:	subcs	r0, r0, r1, lsl #10
   172f0:	cmp	r0, r1, lsl #9
   172f4:	adc	r2, r2, r2
   172f8:	subcs	r0, r0, r1, lsl #9
   172fc:	cmp	r0, r1, lsl #8
   17300:	adc	r2, r2, r2
   17304:	subcs	r0, r0, r1, lsl #8
   17308:	cmp	r0, r1, lsl #7
   1730c:	adc	r2, r2, r2
   17310:	subcs	r0, r0, r1, lsl #7
   17314:	cmp	r0, r1, lsl #6
   17318:	adc	r2, r2, r2
   1731c:	subcs	r0, r0, r1, lsl #6
   17320:	cmp	r0, r1, lsl #5
   17324:	adc	r2, r2, r2
   17328:	subcs	r0, r0, r1, lsl #5
   1732c:	cmp	r0, r1, lsl #4
   17330:	adc	r2, r2, r2
   17334:	subcs	r0, r0, r1, lsl #4
   17338:	cmp	r0, r1, lsl #3
   1733c:	adc	r2, r2, r2
   17340:	subcs	r0, r0, r1, lsl #3
   17344:	cmp	r0, r1, lsl #2
   17348:	adc	r2, r2, r2
   1734c:	subcs	r0, r0, r1, lsl #2
   17350:	cmp	r0, r1, lsl #1
   17354:	adc	r2, r2, r2
   17358:	subcs	r0, r0, r1, lsl #1
   1735c:	cmp	r0, r1
   17360:	adc	r2, r2, r2
   17364:	subcs	r0, r0, r1
   17368:	mov	r0, r2
   1736c:	bx	lr
   17370:	moveq	r0, #1
   17374:	movne	r0, #0
   17378:	bx	lr
   1737c:	clz	r2, r1
   17380:	rsb	r2, r2, #31
   17384:	lsr	r0, r0, r2
   17388:	bx	lr
   1738c:	cmp	r0, #0
   17390:	mvnne	r0, #0
   17394:	b	175f8 <fputs@plt+0x5f9c>
   17398:	cmp	r1, #0
   1739c:	beq	1738c <fputs@plt+0x5d30>
   173a0:	push	{r0, r1, lr}
   173a4:	bl	171ac <fputs@plt+0x5b50>
   173a8:	pop	{r1, r2, lr}
   173ac:	mul	r3, r2, r0
   173b0:	sub	r1, r1, r3
   173b4:	bx	lr
   173b8:	cmp	r1, #0
   173bc:	beq	175c8 <fputs@plt+0x5f6c>
   173c0:	eor	ip, r0, r1
   173c4:	rsbmi	r1, r1, #0
   173c8:	subs	r2, r1, #1
   173cc:	beq	17594 <fputs@plt+0x5f38>
   173d0:	movs	r3, r0
   173d4:	rsbmi	r3, r0, #0
   173d8:	cmp	r3, r1
   173dc:	bls	175a0 <fputs@plt+0x5f44>
   173e0:	tst	r1, r2
   173e4:	beq	175b0 <fputs@plt+0x5f54>
   173e8:	clz	r2, r3
   173ec:	clz	r0, r1
   173f0:	sub	r2, r0, r2
   173f4:	rsbs	r2, r2, #31
   173f8:	addne	r2, r2, r2, lsl #1
   173fc:	mov	r0, #0
   17400:	addne	pc, pc, r2, lsl #2
   17404:	nop			; (mov r0, r0)
   17408:	cmp	r3, r1, lsl #31
   1740c:	adc	r0, r0, r0
   17410:	subcs	r3, r3, r1, lsl #31
   17414:	cmp	r3, r1, lsl #30
   17418:	adc	r0, r0, r0
   1741c:	subcs	r3, r3, r1, lsl #30
   17420:	cmp	r3, r1, lsl #29
   17424:	adc	r0, r0, r0
   17428:	subcs	r3, r3, r1, lsl #29
   1742c:	cmp	r3, r1, lsl #28
   17430:	adc	r0, r0, r0
   17434:	subcs	r3, r3, r1, lsl #28
   17438:	cmp	r3, r1, lsl #27
   1743c:	adc	r0, r0, r0
   17440:	subcs	r3, r3, r1, lsl #27
   17444:	cmp	r3, r1, lsl #26
   17448:	adc	r0, r0, r0
   1744c:	subcs	r3, r3, r1, lsl #26
   17450:	cmp	r3, r1, lsl #25
   17454:	adc	r0, r0, r0
   17458:	subcs	r3, r3, r1, lsl #25
   1745c:	cmp	r3, r1, lsl #24
   17460:	adc	r0, r0, r0
   17464:	subcs	r3, r3, r1, lsl #24
   17468:	cmp	r3, r1, lsl #23
   1746c:	adc	r0, r0, r0
   17470:	subcs	r3, r3, r1, lsl #23
   17474:	cmp	r3, r1, lsl #22
   17478:	adc	r0, r0, r0
   1747c:	subcs	r3, r3, r1, lsl #22
   17480:	cmp	r3, r1, lsl #21
   17484:	adc	r0, r0, r0
   17488:	subcs	r3, r3, r1, lsl #21
   1748c:	cmp	r3, r1, lsl #20
   17490:	adc	r0, r0, r0
   17494:	subcs	r3, r3, r1, lsl #20
   17498:	cmp	r3, r1, lsl #19
   1749c:	adc	r0, r0, r0
   174a0:	subcs	r3, r3, r1, lsl #19
   174a4:	cmp	r3, r1, lsl #18
   174a8:	adc	r0, r0, r0
   174ac:	subcs	r3, r3, r1, lsl #18
   174b0:	cmp	r3, r1, lsl #17
   174b4:	adc	r0, r0, r0
   174b8:	subcs	r3, r3, r1, lsl #17
   174bc:	cmp	r3, r1, lsl #16
   174c0:	adc	r0, r0, r0
   174c4:	subcs	r3, r3, r1, lsl #16
   174c8:	cmp	r3, r1, lsl #15
   174cc:	adc	r0, r0, r0
   174d0:	subcs	r3, r3, r1, lsl #15
   174d4:	cmp	r3, r1, lsl #14
   174d8:	adc	r0, r0, r0
   174dc:	subcs	r3, r3, r1, lsl #14
   174e0:	cmp	r3, r1, lsl #13
   174e4:	adc	r0, r0, r0
   174e8:	subcs	r3, r3, r1, lsl #13
   174ec:	cmp	r3, r1, lsl #12
   174f0:	adc	r0, r0, r0
   174f4:	subcs	r3, r3, r1, lsl #12
   174f8:	cmp	r3, r1, lsl #11
   174fc:	adc	r0, r0, r0
   17500:	subcs	r3, r3, r1, lsl #11
   17504:	cmp	r3, r1, lsl #10
   17508:	adc	r0, r0, r0
   1750c:	subcs	r3, r3, r1, lsl #10
   17510:	cmp	r3, r1, lsl #9
   17514:	adc	r0, r0, r0
   17518:	subcs	r3, r3, r1, lsl #9
   1751c:	cmp	r3, r1, lsl #8
   17520:	adc	r0, r0, r0
   17524:	subcs	r3, r3, r1, lsl #8
   17528:	cmp	r3, r1, lsl #7
   1752c:	adc	r0, r0, r0
   17530:	subcs	r3, r3, r1, lsl #7
   17534:	cmp	r3, r1, lsl #6
   17538:	adc	r0, r0, r0
   1753c:	subcs	r3, r3, r1, lsl #6
   17540:	cmp	r3, r1, lsl #5
   17544:	adc	r0, r0, r0
   17548:	subcs	r3, r3, r1, lsl #5
   1754c:	cmp	r3, r1, lsl #4
   17550:	adc	r0, r0, r0
   17554:	subcs	r3, r3, r1, lsl #4
   17558:	cmp	r3, r1, lsl #3
   1755c:	adc	r0, r0, r0
   17560:	subcs	r3, r3, r1, lsl #3
   17564:	cmp	r3, r1, lsl #2
   17568:	adc	r0, r0, r0
   1756c:	subcs	r3, r3, r1, lsl #2
   17570:	cmp	r3, r1, lsl #1
   17574:	adc	r0, r0, r0
   17578:	subcs	r3, r3, r1, lsl #1
   1757c:	cmp	r3, r1
   17580:	adc	r0, r0, r0
   17584:	subcs	r3, r3, r1
   17588:	cmp	ip, #0
   1758c:	rsbmi	r0, r0, #0
   17590:	bx	lr
   17594:	teq	ip, r0
   17598:	rsbmi	r0, r0, #0
   1759c:	bx	lr
   175a0:	movcc	r0, #0
   175a4:	asreq	r0, ip, #31
   175a8:	orreq	r0, r0, #1
   175ac:	bx	lr
   175b0:	clz	r2, r1
   175b4:	rsb	r2, r2, #31
   175b8:	cmp	ip, #0
   175bc:	lsr	r0, r3, r2
   175c0:	rsbmi	r0, r0, #0
   175c4:	bx	lr
   175c8:	cmp	r0, #0
   175cc:	mvngt	r0, #-2147483648	; 0x80000000
   175d0:	movlt	r0, #-2147483648	; 0x80000000
   175d4:	b	175f8 <fputs@plt+0x5f9c>
   175d8:	cmp	r1, #0
   175dc:	beq	175c8 <fputs@plt+0x5f6c>
   175e0:	push	{r0, r1, lr}
   175e4:	bl	173c0 <fputs@plt+0x5d64>
   175e8:	pop	{r1, r2, lr}
   175ec:	mul	r3, r2, r0
   175f0:	sub	r1, r1, r3
   175f4:	bx	lr
   175f8:	push	{r1, lr}
   175fc:	mov	r0, #8
   17600:	bl	114d0 <raise@plt>
   17604:	pop	{r1, pc}
   17608:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1760c:	mov	r7, r0
   17610:	ldr	r6, [pc, #72]	; 17660 <fputs@plt+0x6004>
   17614:	ldr	r5, [pc, #72]	; 17664 <fputs@plt+0x6008>
   17618:	add	r6, pc, r6
   1761c:	add	r5, pc, r5
   17620:	sub	r6, r6, r5
   17624:	mov	r8, r1
   17628:	mov	r9, r2
   1762c:	bl	1124c <sigemptyset@plt-0x20>
   17630:	asrs	r6, r6, #2
   17634:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   17638:	mov	r4, #0
   1763c:	add	r4, r4, #1
   17640:	ldr	r3, [r5], #4
   17644:	mov	r2, r9
   17648:	mov	r1, r8
   1764c:	mov	r0, r7
   17650:	blx	r3
   17654:	cmp	r6, r4
   17658:	bne	1763c <fputs@plt+0x5fe0>
   1765c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17660:	andeq	r1, r1, r8, asr #17
   17664:	andeq	r1, r1, r0, asr #17
   17668:	bx	lr

Disassembly of section .fini:

0001766c <.fini>:
   1766c:	push	{r3, lr}
   17670:	pop	{r3, pc}
