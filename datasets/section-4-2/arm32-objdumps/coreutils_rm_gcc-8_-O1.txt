
../repos/coreutils/src/rm:     file format elf32-littlearm


Disassembly of section .init:

00010f80 <.init>:
   10f80:	push	{r3, lr}
   10f84:	bl	1131c <__assert_fail@plt+0x4c>
   10f88:	pop	{r3, pc}

Disassembly of section .plt:

00010f8c <fstatfs64@plt-0x14>:
   10f8c:	push	{lr}		; (str lr, [sp, #-4]!)
   10f90:	ldr	lr, [pc, #4]	; 10f9c <fstatfs64@plt-0x4>
   10f94:	add	lr, pc, lr
   10f98:	ldr	pc, [lr, #8]!
   10f9c:	andeq	ip, r1, r4, rrx

00010fa0 <fstatfs64@plt>:
   10fa0:	add	ip, pc, #0, 12
   10fa4:	add	ip, ip, #28, 20	; 0x1c000
   10fa8:	ldr	pc, [ip, #100]!	; 0x64

00010fac <calloc@plt>:
   10fac:	add	ip, pc, #0, 12
   10fb0:	add	ip, ip, #28, 20	; 0x1c000
   10fb4:	ldr	pc, [ip, #92]!	; 0x5c

00010fb8 <fputs_unlocked@plt>:
   10fb8:	add	ip, pc, #0, 12
   10fbc:	add	ip, ip, #28, 20	; 0x1c000
   10fc0:	ldr	pc, [ip, #84]!	; 0x54

00010fc4 <raise@plt>:
   10fc4:	add	ip, pc, #0, 12
   10fc8:	add	ip, ip, #28, 20	; 0x1c000
   10fcc:	ldr	pc, [ip, #76]!	; 0x4c

00010fd0 <__getdelim@plt>:
   10fd0:	add	ip, pc, #0, 12
   10fd4:	add	ip, ip, #28, 20	; 0x1c000
   10fd8:	ldr	pc, [ip, #68]!	; 0x44

00010fdc <strcmp@plt>:
   10fdc:	add	ip, pc, #0, 12
   10fe0:	add	ip, ip, #28, 20	; 0x1c000
   10fe4:	ldr	pc, [ip, #60]!	; 0x3c

00010fe8 <fflush@plt>:
   10fe8:	add	ip, pc, #0, 12
   10fec:	add	ip, ip, #28, 20	; 0x1c000
   10ff0:	ldr	pc, [ip, #52]!	; 0x34

00010ff4 <unlinkat@plt>:
   10ff4:	add	ip, pc, #0, 12
   10ff8:	add	ip, ip, #28, 20	; 0x1c000
   10ffc:	ldr	pc, [ip, #44]!	; 0x2c

00011000 <memmove@plt>:
   11000:	add	ip, pc, #0, 12
   11004:	add	ip, ip, #28, 20	; 0x1c000
   11008:	ldr	pc, [ip, #36]!	; 0x24

0001100c <free@plt>:
   1100c:	add	ip, pc, #0, 12
   11010:	add	ip, ip, #28, 20	; 0x1c000
   11014:	ldr	pc, [ip, #28]!

00011018 <faccessat@plt>:
   11018:	add	ip, pc, #0, 12
   1101c:	add	ip, ip, #28, 20	; 0x1c000
   11020:	ldr	pc, [ip, #20]!

00011024 <_exit@plt>:
   11024:	add	ip, pc, #0, 12
   11028:	add	ip, ip, #28, 20	; 0x1c000
   1102c:	ldr	pc, [ip, #12]!

00011030 <memcpy@plt>:
   11030:	add	ip, pc, #0, 12
   11034:	add	ip, ip, #28, 20	; 0x1c000
   11038:	ldr	pc, [ip, #4]!

0001103c <mbsinit@plt>:
   1103c:	add	ip, pc, #0, 12
   11040:	add	ip, ip, #110592	; 0x1b000
   11044:	ldr	pc, [ip, #4092]!	; 0xffc

00011048 <memcmp@plt>:
   11048:	add	ip, pc, #0, 12
   1104c:	add	ip, ip, #110592	; 0x1b000
   11050:	ldr	pc, [ip, #4084]!	; 0xff4

00011054 <fputc_unlocked@plt>:
   11054:	add	ip, pc, #0, 12
   11058:	add	ip, ip, #110592	; 0x1b000
   1105c:	ldr	pc, [ip, #4076]!	; 0xfec

00011060 <dcgettext@plt>:
   11060:	add	ip, pc, #0, 12
   11064:	add	ip, ip, #110592	; 0x1b000
   11068:	ldr	pc, [ip, #4068]!	; 0xfe4

0001106c <realloc@plt>:
   1106c:	add	ip, pc, #0, 12
   11070:	add	ip, ip, #110592	; 0x1b000
   11074:	ldr	pc, [ip, #4060]!	; 0xfdc

00011078 <textdomain@plt>:
   11078:	add	ip, pc, #0, 12
   1107c:	add	ip, ip, #110592	; 0x1b000
   11080:	ldr	pc, [ip, #4052]!	; 0xfd4

00011084 <geteuid@plt>:
   11084:	add	ip, pc, #0, 12
   11088:	add	ip, ip, #110592	; 0x1b000
   1108c:	ldr	pc, [ip, #4044]!	; 0xfcc

00011090 <__fxstatat64@plt>:
   11090:	add	ip, pc, #0, 12
   11094:	add	ip, ip, #110592	; 0x1b000
   11098:	ldr	pc, [ip, #4036]!	; 0xfc4

0001109c <iswprint@plt>:
   1109c:	add	ip, pc, #0, 12
   110a0:	add	ip, ip, #110592	; 0x1b000
   110a4:	ldr	pc, [ip, #4028]!	; 0xfbc

000110a8 <__fxstat64@plt>:
   110a8:	add	ip, pc, #0, 12
   110ac:	add	ip, ip, #110592	; 0x1b000
   110b0:	ldr	pc, [ip, #4020]!	; 0xfb4

000110b4 <fwrite@plt>:
   110b4:	add	ip, pc, #0, 12
   110b8:	add	ip, ip, #110592	; 0x1b000
   110bc:	ldr	pc, [ip, #4012]!	; 0xfac

000110c0 <lseek64@plt>:
   110c0:	add	ip, pc, #0, 12
   110c4:	add	ip, ip, #110592	; 0x1b000
   110c8:	ldr	pc, [ip, #4004]!	; 0xfa4

000110cc <__ctype_get_mb_cur_max@plt>:
   110cc:	add	ip, pc, #0, 12
   110d0:	add	ip, ip, #110592	; 0x1b000
   110d4:	ldr	pc, [ip, #3996]!	; 0xf9c

000110d8 <__fpending@plt>:
   110d8:	add	ip, pc, #0, 12
   110dc:	add	ip, ip, #110592	; 0x1b000
   110e0:	ldr	pc, [ip, #3988]!	; 0xf94

000110e4 <mbrtowc@plt>:
   110e4:	add	ip, pc, #0, 12
   110e8:	add	ip, ip, #110592	; 0x1b000
   110ec:	ldr	pc, [ip, #3980]!	; 0xf8c

000110f0 <error@plt>:
   110f0:	add	ip, pc, #0, 12
   110f4:	add	ip, ip, #110592	; 0x1b000
   110f8:	ldr	pc, [ip, #3972]!	; 0xf84

000110fc <open64@plt>:
   110fc:	add	ip, pc, #0, 12
   11100:	add	ip, ip, #110592	; 0x1b000
   11104:	ldr	pc, [ip, #3964]!	; 0xf7c

00011108 <malloc@plt>:
   11108:	add	ip, pc, #0, 12
   1110c:	add	ip, ip, #110592	; 0x1b000
   11110:	ldr	pc, [ip, #3956]!	; 0xf74

00011114 <__libc_start_main@plt>:
   11114:	add	ip, pc, #0, 12
   11118:	add	ip, ip, #110592	; 0x1b000
   1111c:	ldr	pc, [ip, #3948]!	; 0xf6c

00011120 <__freading@plt>:
   11120:	add	ip, pc, #0, 12
   11124:	add	ip, ip, #110592	; 0x1b000
   11128:	ldr	pc, [ip, #3940]!	; 0xf64

0001112c <__gmon_start__@plt>:
   1112c:	add	ip, pc, #0, 12
   11130:	add	ip, ip, #110592	; 0x1b000
   11134:	ldr	pc, [ip, #3932]!	; 0xf5c

00011138 <mempcpy@plt>:
   11138:	add	ip, pc, #0, 12
   1113c:	add	ip, ip, #110592	; 0x1b000
   11140:	ldr	pc, [ip, #3924]!	; 0xf54

00011144 <getopt_long@plt>:
   11144:	add	ip, pc, #0, 12
   11148:	add	ip, ip, #110592	; 0x1b000
   1114c:	ldr	pc, [ip, #3916]!	; 0xf4c

00011150 <__ctype_b_loc@plt>:
   11150:	add	ip, pc, #0, 12
   11154:	add	ip, ip, #110592	; 0x1b000
   11158:	ldr	pc, [ip, #3908]!	; 0xf44

0001115c <exit@plt>:
   1115c:	add	ip, pc, #0, 12
   11160:	add	ip, ip, #110592	; 0x1b000
   11164:	ldr	pc, [ip, #3900]!	; 0xf3c

00011168 <strlen@plt>:
   11168:	add	ip, pc, #0, 12
   1116c:	add	ip, ip, #110592	; 0x1b000
   11170:	ldr	pc, [ip, #3892]!	; 0xf34

00011174 <openat64@plt>:
   11174:	add	ip, pc, #0, 12
   11178:	add	ip, ip, #110592	; 0x1b000
   1117c:	ldr	pc, [ip, #3884]!	; 0xf2c

00011180 <__errno_location@plt>:
   11180:	add	ip, pc, #0, 12
   11184:	add	ip, ip, #110592	; 0x1b000
   11188:	ldr	pc, [ip, #3876]!	; 0xf24

0001118c <__cxa_atexit@plt>:
   1118c:	add	ip, pc, #0, 12
   11190:	add	ip, ip, #110592	; 0x1b000
   11194:	ldr	pc, [ip, #3868]!	; 0xf1c

00011198 <memset@plt>:
   11198:	add	ip, pc, #0, 12
   1119c:	add	ip, ip, #110592	; 0x1b000
   111a0:	ldr	pc, [ip, #3860]!	; 0xf14

000111a4 <__printf_chk@plt>:
   111a4:	add	ip, pc, #0, 12
   111a8:	add	ip, ip, #110592	; 0x1b000
   111ac:	ldr	pc, [ip, #3852]!	; 0xf0c

000111b0 <fileno@plt>:
   111b0:	add	ip, pc, #0, 12
   111b4:	add	ip, ip, #110592	; 0x1b000
   111b8:	ldr	pc, [ip, #3844]!	; 0xf04

000111bc <__fprintf_chk@plt>:
   111bc:	add	ip, pc, #0, 12
   111c0:	add	ip, ip, #110592	; 0x1b000
   111c4:	ldr	pc, [ip, #3836]!	; 0xefc

000111c8 <fclose@plt>:
   111c8:	add	ip, pc, #0, 12
   111cc:	add	ip, ip, #110592	; 0x1b000
   111d0:	ldr	pc, [ip, #3828]!	; 0xef4

000111d4 <fseeko64@plt>:
   111d4:	add	ip, pc, #0, 12
   111d8:	add	ip, ip, #110592	; 0x1b000
   111dc:	ldr	pc, [ip, #3820]!	; 0xeec

000111e0 <fcntl64@plt>:
   111e0:	add	ip, pc, #0, 12
   111e4:	add	ip, ip, #110592	; 0x1b000
   111e8:	ldr	pc, [ip, #3812]!	; 0xee4

000111ec <rpmatch@plt>:
   111ec:	add	ip, pc, #0, 12
   111f0:	add	ip, ip, #110592	; 0x1b000
   111f4:	ldr	pc, [ip, #3804]!	; 0xedc

000111f8 <__overflow@plt>:
   111f8:	add	ip, pc, #0, 12
   111fc:	add	ip, ip, #110592	; 0x1b000
   11200:	ldr	pc, [ip, #3796]!	; 0xed4

00011204 <setlocale@plt>:
   11204:	add	ip, pc, #0, 12
   11208:	add	ip, ip, #110592	; 0x1b000
   1120c:	ldr	pc, [ip, #3788]!	; 0xecc

00011210 <strrchr@plt>:
   11210:	add	ip, pc, #0, 12
   11214:	add	ip, ip, #110592	; 0x1b000
   11218:	ldr	pc, [ip, #3780]!	; 0xec4

0001121c <nl_langinfo@plt>:
   1121c:	add	ip, pc, #0, 12
   11220:	add	ip, ip, #110592	; 0x1b000
   11224:	ldr	pc, [ip, #3772]!	; 0xebc

00011228 <readdir64@plt>:
   11228:	add	ip, pc, #0, 12
   1122c:	add	ip, ip, #110592	; 0x1b000
   11230:	ldr	pc, [ip, #3764]!	; 0xeb4

00011234 <fdopendir@plt>:
   11234:	add	ip, pc, #0, 12
   11238:	add	ip, ip, #110592	; 0x1b000
   1123c:	ldr	pc, [ip, #3756]!	; 0xeac

00011240 <dirfd@plt>:
   11240:	add	ip, pc, #0, 12
   11244:	add	ip, ip, #110592	; 0x1b000
   11248:	ldr	pc, [ip, #3748]!	; 0xea4

0001124c <fchdir@plt>:
   1124c:	add	ip, pc, #0, 12
   11250:	add	ip, ip, #110592	; 0x1b000
   11254:	ldr	pc, [ip, #3740]!	; 0xe9c

00011258 <qsort@plt>:
   11258:	add	ip, pc, #0, 12
   1125c:	add	ip, ip, #110592	; 0x1b000
   11260:	ldr	pc, [ip, #3732]!	; 0xe94

00011264 <bindtextdomain@plt>:
   11264:	add	ip, pc, #0, 12
   11268:	add	ip, ip, #110592	; 0x1b000
   1126c:	ldr	pc, [ip, #3724]!	; 0xe8c

00011270 <__xstat64@plt>:
   11270:	add	ip, pc, #0, 12
   11274:	add	ip, ip, #110592	; 0x1b000
   11278:	ldr	pc, [ip, #3716]!	; 0xe84

0001127c <isatty@plt>:
   1127c:	add	ip, pc, #0, 12
   11280:	add	ip, ip, #110592	; 0x1b000
   11284:	ldr	pc, [ip, #3708]!	; 0xe7c

00011288 <strncmp@plt>:
   11288:	add	ip, pc, #0, 12
   1128c:	add	ip, ip, #110592	; 0x1b000
   11290:	ldr	pc, [ip, #3700]!	; 0xe74

00011294 <abort@plt>:
   11294:	add	ip, pc, #0, 12
   11298:	add	ip, ip, #110592	; 0x1b000
   1129c:	ldr	pc, [ip, #3692]!	; 0xe6c

000112a0 <close@plt>:
   112a0:	add	ip, pc, #0, 12
   112a4:	add	ip, ip, #110592	; 0x1b000
   112a8:	ldr	pc, [ip, #3684]!	; 0xe64

000112ac <__lxstat64@plt>:
   112ac:	add	ip, pc, #0, 12
   112b0:	add	ip, ip, #110592	; 0x1b000
   112b4:	ldr	pc, [ip, #3676]!	; 0xe5c

000112b8 <dcngettext@plt>:
   112b8:	add	ip, pc, #0, 12
   112bc:	add	ip, ip, #110592	; 0x1b000
   112c0:	ldr	pc, [ip, #3668]!	; 0xe54

000112c4 <closedir@plt>:
   112c4:	add	ip, pc, #0, 12
   112c8:	add	ip, ip, #110592	; 0x1b000
   112cc:	ldr	pc, [ip, #3660]!	; 0xe4c

000112d0 <__assert_fail@plt>:
   112d0:	add	ip, pc, #0, 12
   112d4:	add	ip, ip, #110592	; 0x1b000
   112d8:	ldr	pc, [ip, #3652]!	; 0xe44

Disassembly of section .text:

000112e0 <.text>:
   112e0:	mov	fp, #0
   112e4:	mov	lr, #0
   112e8:	pop	{r1}		; (ldr r1, [sp], #4)
   112ec:	mov	r2, sp
   112f0:	push	{r2}		; (str r2, [sp, #-4]!)
   112f4:	push	{r0}		; (str r0, [sp, #-4]!)
   112f8:	ldr	ip, [pc, #16]	; 11310 <__assert_fail@plt+0x40>
   112fc:	push	{ip}		; (str ip, [sp, #-4]!)
   11300:	ldr	r0, [pc, #12]	; 11314 <__assert_fail@plt+0x44>
   11304:	ldr	r3, [pc, #12]	; 11318 <__assert_fail@plt+0x48>
   11308:	bl	11114 <__libc_start_main@plt>
   1130c:	bl	11294 <abort@plt>
   11310:	andeq	sl, r1, r0, lsr sl
   11314:	andeq	r1, r1, r0, lsl r8
   11318:	ldrdeq	sl, [r1], -r0
   1131c:	ldr	r3, [pc, #20]	; 11338 <__assert_fail@plt+0x68>
   11320:	ldr	r2, [pc, #20]	; 1133c <__assert_fail@plt+0x6c>
   11324:	add	r3, pc, r3
   11328:	ldr	r2, [r3, r2]
   1132c:	cmp	r2, #0
   11330:	bxeq	lr
   11334:	b	1112c <__gmon_start__@plt>
   11338:	ldrdeq	fp, [r1], -r4
   1133c:	andeq	r0, r0, r0, lsr #2
   11340:	ldr	r0, [pc, #24]	; 11360 <__assert_fail@plt+0x90>
   11344:	ldr	r3, [pc, #24]	; 11364 <__assert_fail@plt+0x94>
   11348:	cmp	r3, r0
   1134c:	bxeq	lr
   11350:	ldr	r3, [pc, #16]	; 11368 <__assert_fail@plt+0x98>
   11354:	cmp	r3, #0
   11358:	bxeq	lr
   1135c:	bx	r3
   11360:	andeq	sp, r2, r8, ror r1
   11364:	andeq	sp, r2, r8, ror r1
   11368:	andeq	r0, r0, r0
   1136c:	ldr	r0, [pc, #36]	; 11398 <__assert_fail@plt+0xc8>
   11370:	ldr	r1, [pc, #36]	; 1139c <__assert_fail@plt+0xcc>
   11374:	sub	r1, r1, r0
   11378:	asr	r1, r1, #2
   1137c:	add	r1, r1, r1, lsr #31
   11380:	asrs	r1, r1, #1
   11384:	bxeq	lr
   11388:	ldr	r3, [pc, #16]	; 113a0 <__assert_fail@plt+0xd0>
   1138c:	cmp	r3, #0
   11390:	bxeq	lr
   11394:	bx	r3
   11398:	andeq	sp, r2, r8, ror r1
   1139c:	andeq	sp, r2, r8, ror r1
   113a0:	andeq	r0, r0, r0
   113a4:	push	{r4, lr}
   113a8:	ldr	r4, [pc, #24]	; 113c8 <__assert_fail@plt+0xf8>
   113ac:	ldrb	r3, [r4]
   113b0:	cmp	r3, #0
   113b4:	popne	{r4, pc}
   113b8:	bl	11340 <__assert_fail@plt+0x70>
   113bc:	mov	r3, #1
   113c0:	strb	r3, [r4]
   113c4:	pop	{r4, pc}
   113c8:	muleq	r2, ip, r1
   113cc:	b	1136c <__assert_fail@plt+0x9c>
   113d0:	push	{lr}		; (str lr, [sp, #-4]!)
   113d4:	sub	sp, sp, #60	; 0x3c
   113d8:	subs	r5, r0, #0
   113dc:	beq	11424 <__assert_fail@plt+0x154>
   113e0:	movw	r3, #53640	; 0xd188
   113e4:	movt	r3, #2
   113e8:	ldr	r4, [r3]
   113ec:	mov	r2, #5
   113f0:	movw	r1, #43920	; 0xab90
   113f4:	movt	r1, #1
   113f8:	mov	r0, #0
   113fc:	bl	11060 <dcgettext@plt>
   11400:	movw	r3, #53692	; 0xd1bc
   11404:	movt	r3, #2
   11408:	ldr	r3, [r3]
   1140c:	mov	r2, r0
   11410:	mov	r1, #1
   11414:	mov	r0, r4
   11418:	bl	111bc <__fprintf_chk@plt>
   1141c:	mov	r0, r5
   11420:	bl	1115c <exit@plt>
   11424:	mov	r2, #5
   11428:	movw	r1, #43960	; 0xabb8
   1142c:	movt	r1, #1
   11430:	mov	r0, #0
   11434:	bl	11060 <dcgettext@plt>
   11438:	movw	r6, #53692	; 0xd1bc
   1143c:	movt	r6, #2
   11440:	ldr	r2, [r6]
   11444:	mov	r1, r0
   11448:	mov	r0, #1
   1144c:	bl	111a4 <__printf_chk@plt>
   11450:	mov	r2, #5
   11454:	movw	r1, #43996	; 0xabdc
   11458:	movt	r1, #1
   1145c:	mov	r0, #0
   11460:	bl	11060 <dcgettext@plt>
   11464:	movw	r4, #53652	; 0xd194
   11468:	movt	r4, #2
   1146c:	ldr	r1, [r4]
   11470:	bl	10fb8 <fputs_unlocked@plt>
   11474:	mov	r2, #5
   11478:	movw	r1, #44156	; 0xac7c
   1147c:	movt	r1, #1
   11480:	mov	r0, #0
   11484:	bl	11060 <dcgettext@plt>
   11488:	ldr	r1, [r4]
   1148c:	bl	10fb8 <fputs_unlocked@plt>
   11490:	mov	r2, #5
   11494:	movw	r1, #44532	; 0xadf4
   11498:	movt	r1, #1
   1149c:	mov	r0, #0
   114a0:	bl	11060 <dcgettext@plt>
   114a4:	ldr	r1, [r4]
   114a8:	bl	10fb8 <fputs_unlocked@plt>
   114ac:	mov	r2, #5
   114b0:	movw	r1, #44756	; 0xaed4
   114b4:	movt	r1, #1
   114b8:	mov	r0, #0
   114bc:	bl	11060 <dcgettext@plt>
   114c0:	ldr	r1, [r4]
   114c4:	bl	10fb8 <fputs_unlocked@plt>
   114c8:	mov	r2, #5
   114cc:	movw	r1, #45012	; 0xafd4
   114d0:	movt	r1, #1
   114d4:	mov	r0, #0
   114d8:	bl	11060 <dcgettext@plt>
   114dc:	ldr	r1, [r4]
   114e0:	bl	10fb8 <fputs_unlocked@plt>
   114e4:	mov	r2, #5
   114e8:	movw	r1, #45188	; 0xb084
   114ec:	movt	r1, #1
   114f0:	mov	r0, #0
   114f4:	bl	11060 <dcgettext@plt>
   114f8:	ldr	r1, [r4]
   114fc:	bl	10fb8 <fputs_unlocked@plt>
   11500:	mov	r2, #5
   11504:	movw	r1, #45236	; 0xb0b4
   11508:	movt	r1, #1
   1150c:	mov	r0, #0
   11510:	bl	11060 <dcgettext@plt>
   11514:	ldr	r1, [r4]
   11518:	bl	10fb8 <fputs_unlocked@plt>
   1151c:	mov	r2, #5
   11520:	movw	r1, #45292	; 0xb0ec
   11524:	movt	r1, #1
   11528:	mov	r0, #0
   1152c:	bl	11060 <dcgettext@plt>
   11530:	ldr	r1, [r4]
   11534:	bl	10fb8 <fputs_unlocked@plt>
   11538:	mov	r2, #5
   1153c:	movw	r1, #45448	; 0xb188
   11540:	movt	r1, #1
   11544:	mov	r0, #0
   11548:	bl	11060 <dcgettext@plt>
   1154c:	ldr	r2, [r6]
   11550:	mov	r3, r2
   11554:	mov	r1, r0
   11558:	mov	r0, #1
   1155c:	bl	111a4 <__printf_chk@plt>
   11560:	mov	r2, #5
   11564:	movw	r1, #45572	; 0xb204
   11568:	movt	r1, #1
   1156c:	mov	r0, #0
   11570:	bl	11060 <dcgettext@plt>
   11574:	ldr	r1, [r4]
   11578:	bl	10fb8 <fputs_unlocked@plt>
   1157c:	movw	r0, #43608	; 0xaa58
   11580:	movt	r0, #1
   11584:	ldr	r1, [r0]
   11588:	ldr	r3, [r0, #4]
   1158c:	str	r1, [sp]
   11590:	str	r3, [sp, #4]
   11594:	ldrd	r2, [r0, #8]
   11598:	strd	r2, [sp, #8]
   1159c:	ldrd	r2, [r0, #16]
   115a0:	strd	r2, [sp, #16]
   115a4:	ldrd	r2, [r0, #24]
   115a8:	strd	r2, [sp, #24]
   115ac:	ldrd	r2, [r0, #32]
   115b0:	strd	r2, [sp, #32]
   115b4:	ldrd	r2, [r0, #40]	; 0x28
   115b8:	strd	r2, [sp, #40]	; 0x28
   115bc:	ldrd	r2, [r0, #48]	; 0x30
   115c0:	strd	r2, [sp, #48]	; 0x30
   115c4:	cmp	r1, #0
   115c8:	moveq	r4, sp
   115cc:	beq	115f8 <__assert_fail@plt+0x328>
   115d0:	mov	r4, sp
   115d4:	movw	r6, #43916	; 0xab8c
   115d8:	movt	r6, #1
   115dc:	mov	r0, r6
   115e0:	bl	10fdc <strcmp@plt>
   115e4:	cmp	r0, #0
   115e8:	beq	115f8 <__assert_fail@plt+0x328>
   115ec:	ldr	r1, [r4, #8]!
   115f0:	cmp	r1, #0
   115f4:	bne	115dc <__assert_fail@plt+0x30c>
   115f8:	ldr	r4, [r4, #4]
   115fc:	cmp	r4, #0
   11600:	beq	1175c <__assert_fail@plt+0x48c>
   11604:	mov	r2, #5
   11608:	movw	r1, #45804	; 0xb2ec
   1160c:	movt	r1, #1
   11610:	mov	r0, #0
   11614:	bl	11060 <dcgettext@plt>
   11618:	movw	r3, #45828	; 0xb304
   1161c:	movt	r3, #1
   11620:	movw	r2, #45868	; 0xb32c
   11624:	movt	r2, #1
   11628:	mov	r1, r0
   1162c:	mov	r0, #1
   11630:	bl	111a4 <__printf_chk@plt>
   11634:	mov	r1, #0
   11638:	mov	r0, #5
   1163c:	bl	11204 <setlocale@plt>
   11640:	cmp	r0, #0
   11644:	beq	11660 <__assert_fail@plt+0x390>
   11648:	mov	r2, #3
   1164c:	movw	r1, #45884	; 0xb33c
   11650:	movt	r1, #1
   11654:	bl	11288 <strncmp@plt>
   11658:	cmp	r0, #0
   1165c:	bne	116dc <__assert_fail@plt+0x40c>
   11660:	mov	r2, #5
   11664:	movw	r1, #45960	; 0xb388
   11668:	movt	r1, #1
   1166c:	mov	r0, #0
   11670:	bl	11060 <dcgettext@plt>
   11674:	movw	r6, #43916	; 0xab8c
   11678:	movt	r6, #1
   1167c:	mov	r3, r6
   11680:	movw	r2, #45828	; 0xb304
   11684:	movt	r2, #1
   11688:	mov	r1, r0
   1168c:	mov	r0, #1
   11690:	bl	111a4 <__printf_chk@plt>
   11694:	mov	r2, #5
   11698:	movw	r1, #45988	; 0xb3a4
   1169c:	movt	r1, #1
   116a0:	mov	r0, #0
   116a4:	bl	11060 <dcgettext@plt>
   116a8:	mov	r1, r0
   116ac:	movw	r2, #46548	; 0xb5d4
   116b0:	movt	r2, #1
   116b4:	movw	r3, #48112	; 0xbbf0
   116b8:	movt	r3, #1
   116bc:	cmp	r4, r6
   116c0:	moveq	r3, r2
   116c4:	mov	r2, r4
   116c8:	mov	r0, #1
   116cc:	bl	111a4 <__printf_chk@plt>
   116d0:	b	1141c <__assert_fail@plt+0x14c>
   116d4:	movw	r4, #43916	; 0xab8c
   116d8:	movt	r4, #1
   116dc:	mov	r2, #5
   116e0:	movw	r1, #45888	; 0xb340
   116e4:	movt	r1, #1
   116e8:	mov	r0, #0
   116ec:	bl	11060 <dcgettext@plt>
   116f0:	movw	r3, #53652	; 0xd194
   116f4:	movt	r3, #2
   116f8:	ldr	r1, [r3]
   116fc:	bl	10fb8 <fputs_unlocked@plt>
   11700:	b	11660 <__assert_fail@plt+0x390>
   11704:	mov	r2, #5
   11708:	movw	r1, #45960	; 0xb388
   1170c:	movt	r1, #1
   11710:	mov	r0, #0
   11714:	bl	11060 <dcgettext@plt>
   11718:	movw	r4, #43916	; 0xab8c
   1171c:	movt	r4, #1
   11720:	mov	r3, r4
   11724:	movw	r2, #45828	; 0xb304
   11728:	movt	r2, #1
   1172c:	mov	r1, r0
   11730:	mov	r0, #1
   11734:	bl	111a4 <__printf_chk@plt>
   11738:	mov	r2, #5
   1173c:	movw	r1, #45988	; 0xb3a4
   11740:	movt	r1, #1
   11744:	mov	r0, #0
   11748:	bl	11060 <dcgettext@plt>
   1174c:	mov	r1, r0
   11750:	movw	r3, #46548	; 0xb5d4
   11754:	movt	r3, #1
   11758:	b	116c4 <__assert_fail@plt+0x3f4>
   1175c:	mov	r2, #5
   11760:	movw	r1, #45804	; 0xb2ec
   11764:	movt	r1, #1
   11768:	mov	r0, #0
   1176c:	bl	11060 <dcgettext@plt>
   11770:	movw	r3, #45828	; 0xb304
   11774:	movt	r3, #1
   11778:	movw	r2, #45868	; 0xb32c
   1177c:	movt	r2, #1
   11780:	mov	r1, r0
   11784:	mov	r0, #1
   11788:	bl	111a4 <__printf_chk@plt>
   1178c:	mov	r1, #0
   11790:	mov	r0, #5
   11794:	bl	11204 <setlocale@plt>
   11798:	cmp	r0, #0
   1179c:	beq	11704 <__assert_fail@plt+0x434>
   117a0:	mov	r2, #3
   117a4:	movw	r1, #45884	; 0xb33c
   117a8:	movt	r1, #1
   117ac:	bl	11288 <strncmp@plt>
   117b0:	cmp	r0, #0
   117b4:	bne	116d4 <__assert_fail@plt+0x404>
   117b8:	mov	r2, #5
   117bc:	movw	r1, #45960	; 0xb388
   117c0:	movt	r1, #1
   117c4:	mov	r0, #0
   117c8:	bl	11060 <dcgettext@plt>
   117cc:	movw	r4, #43916	; 0xab8c
   117d0:	movt	r4, #1
   117d4:	mov	r3, r4
   117d8:	movw	r2, #45828	; 0xb304
   117dc:	movt	r2, #1
   117e0:	mov	r1, r0
   117e4:	mov	r0, #1
   117e8:	bl	111a4 <__printf_chk@plt>
   117ec:	mov	r2, #5
   117f0:	movw	r1, #45988	; 0xb3a4
   117f4:	movt	r1, #1
   117f8:	mov	r0, #0
   117fc:	bl	11060 <dcgettext@plt>
   11800:	mov	r1, r0
   11804:	movw	r3, #46548	; 0xb5d4
   11808:	movt	r3, #1
   1180c:	b	116c4 <__assert_fail@plt+0x3f4>
   11810:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11814:	strd	r6, [sp, #8]
   11818:	strd	r8, [sp, #16]
   1181c:	strd	sl, [sp, #24]
   11820:	str	lr, [sp, #32]
   11824:	sub	sp, sp, #156	; 0x9c
   11828:	mov	r7, r0
   1182c:	mov	r5, r1
   11830:	ldr	r0, [r1]
   11834:	bl	17054 <__assert_fail@plt+0x5d84>
   11838:	movw	r1, #48112	; 0xbbf0
   1183c:	movt	r1, #1
   11840:	mov	r0, #6
   11844:	bl	11204 <setlocale@plt>
   11848:	movw	r4, #45872	; 0xb330
   1184c:	movt	r4, #1
   11850:	movw	r1, #46040	; 0xb3d8
   11854:	movt	r1, #1
   11858:	mov	r0, r4
   1185c:	bl	11264 <bindtextdomain@plt>
   11860:	mov	r0, r4
   11864:	bl	11078 <textdomain@plt>
   11868:	movw	r0, #13284	; 0x33e4
   1186c:	movt	r0, #1
   11870:	bl	1aa34 <__assert_fail@plt+0x9764>
   11874:	mov	r4, #0
   11878:	strb	r4, [sp, #132]	; 0x84
   1187c:	mov	r3, #4
   11880:	str	r3, [sp, #136]	; 0x88
   11884:	strb	r4, [sp, #140]	; 0x8c
   11888:	strb	r4, [sp, #142]	; 0x8e
   1188c:	strb	r4, [sp, #141]	; 0x8d
   11890:	str	r4, [sp, #144]	; 0x90
   11894:	strb	r4, [sp, #148]	; 0x94
   11898:	mov	r0, r4
   1189c:	bl	1127c <isatty@plt>
   118a0:	subs	r0, r0, r4
   118a4:	movne	r0, #1
   118a8:	strb	r0, [sp, #149]	; 0x95
   118ac:	strb	r4, [sp, #150]	; 0x96
   118b0:	strb	r4, [sp, #151]	; 0x97
   118b4:	mov	fp, #1
   118b8:	movw	r9, #43608	; 0xaa58
   118bc:	movt	r9, #1
   118c0:	add	r8, r9, #108	; 0x6c
   118c4:	movw	r6, #46308	; 0xb4e4
   118c8:	movt	r6, #1
   118cc:	movw	sl, #53656	; 0xd198
   118d0:	movt	sl, #2
   118d4:	mov	r3, #0
   118d8:	str	r3, [sp]
   118dc:	mov	r3, r8
   118e0:	mov	r2, r6
   118e4:	mov	r1, r5
   118e8:	mov	r0, r7
   118ec:	bl	11144 <getopt_long@plt>
   118f0:	cmn	r0, #1
   118f4:	beq	11c98 <__assert_fail@plt+0x9c8>
   118f8:	cmp	r0, #105	; 0x69
   118fc:	beq	11acc <__assert_fail@plt+0x7fc>
   11900:	ble	11938 <__assert_fail@plt+0x668>
   11904:	movw	r3, #257	; 0x101
   11908:	cmp	r0, r3
   1190c:	beq	11b2c <__assert_fail@plt+0x85c>
   11910:	ble	11a24 <__assert_fail@plt+0x754>
   11914:	movw	r3, #259	; 0x103
   11918:	cmp	r0, r3
   1191c:	beq	11b8c <__assert_fail@plt+0x8bc>
   11920:	blt	11b38 <__assert_fail@plt+0x868>
   11924:	cmp	r0, #260	; 0x104
   11928:	bne	11ab8 <__assert_fail@plt+0x7e8>
   1192c:	mov	r3, #1
   11930:	strb	r3, [sp, #149]	; 0x95
   11934:	b	118d4 <__assert_fail@plt+0x604>
   11938:	cmp	r0, #73	; 0x49
   1193c:	beq	11ae0 <__assert_fail@plt+0x810>
   11940:	ble	1196c <__assert_fail@plt+0x69c>
   11944:	cmp	r0, #100	; 0x64
   11948:	beq	11ac0 <__assert_fail@plt+0x7f0>
   1194c:	cmp	r0, #102	; 0x66
   11950:	bne	119f4 <__assert_fail@plt+0x724>
   11954:	mov	r3, #5
   11958:	str	r3, [sp, #136]	; 0x88
   1195c:	mov	r3, #1
   11960:	strb	r3, [sp, #132]	; 0x84
   11964:	mov	r4, #0
   11968:	b	118d4 <__assert_fail@plt+0x604>
   1196c:	cmn	r0, #3
   11970:	bne	119e0 <__assert_fail@plt+0x710>
   11974:	movw	r3, #53548	; 0xd12c
   11978:	movt	r3, #2
   1197c:	movw	r0, #53652	; 0xd194
   11980:	movt	r0, #2
   11984:	mov	r4, #0
   11988:	str	r4, [sp, #16]
   1198c:	movw	r2, #46204	; 0xb47c
   11990:	movt	r2, #1
   11994:	str	r2, [sp, #12]
   11998:	movw	r2, #46220	; 0xb48c
   1199c:	movt	r2, #1
   119a0:	str	r2, [sp, #8]
   119a4:	movw	r2, #46240	; 0xb4a0
   119a8:	movt	r2, #1
   119ac:	str	r2, [sp, #4]
   119b0:	movw	r2, #46256	; 0xb4b0
   119b4:	movt	r2, #1
   119b8:	str	r2, [sp]
   119bc:	ldr	r3, [r3]
   119c0:	movw	r2, #45868	; 0xb32c
   119c4:	movt	r2, #1
   119c8:	movw	r1, #43916	; 0xab8c
   119cc:	movt	r1, #1
   119d0:	ldr	r0, [r0]
   119d4:	bl	198fc <__assert_fail@plt+0x862c>
   119d8:	mov	r0, r4
   119dc:	bl	1115c <exit@plt>
   119e0:	cmn	r0, #2
   119e4:	movne	r4, #1
   119e8:	bne	11a00 <__assert_fail@plt+0x730>
   119ec:	mov	r0, #0
   119f0:	bl	113d0 <__assert_fail@plt+0x100>
   119f4:	cmp	r0, #82	; 0x52
   119f8:	beq	11af8 <__assert_fail@plt+0x828>
   119fc:	mov	r4, #1
   11a00:	mov	r6, #3
   11a04:	cmp	r7, r4
   11a08:	ble	11c88 <__assert_fail@plt+0x9b8>
   11a0c:	ldr	r8, [r5, r4, lsl #2]
   11a10:	ldrb	r3, [r8]
   11a14:	cmp	r3, #45	; 0x2d
   11a18:	beq	11c04 <__assert_fail@plt+0x934>
   11a1c:	add	r4, r4, #1
   11a20:	b	11a04 <__assert_fail@plt+0x734>
   11a24:	cmp	r0, #118	; 0x76
   11a28:	beq	11bf8 <__assert_fail@plt+0x928>
   11a2c:	cmp	r0, #256	; 0x100
   11a30:	bne	11aa8 <__assert_fail@plt+0x7d8>
   11a34:	ldr	r1, [sl]
   11a38:	cmp	r1, #0
   11a3c:	beq	11a94 <__assert_fail@plt+0x7c4>
   11a40:	mov	r3, #1
   11a44:	str	r3, [sp, #8]
   11a48:	movw	r3, #53552	; 0xd130
   11a4c:	movt	r3, #2
   11a50:	ldr	r3, [r3]
   11a54:	str	r3, [sp, #4]
   11a58:	mov	r3, #4
   11a5c:	str	r3, [sp]
   11a60:	add	r3, r9, #56	; 0x38
   11a64:	add	r2, r9, #80	; 0x50
   11a68:	movw	r0, #46064	; 0xb3f0
   11a6c:	movt	r0, #1
   11a70:	bl	13208 <__assert_fail@plt+0x1f38>
   11a74:	add	r0, r9, r0, lsl #2
   11a78:	ldr	r3, [r0, #56]	; 0x38
   11a7c:	cmp	r3, #1
   11a80:	beq	11b14 <__assert_fail@plt+0x844>
   11a84:	cmp	r3, #0
   11a88:	beq	11b04 <__assert_fail@plt+0x834>
   11a8c:	cmp	r3, #2
   11a90:	bne	118d4 <__assert_fail@plt+0x604>
   11a94:	mov	r3, #3
   11a98:	str	r3, [sp, #136]	; 0x88
   11a9c:	mov	r4, #0
   11aa0:	strb	r4, [sp, #132]	; 0x84
   11aa4:	b	118d4 <__assert_fail@plt+0x604>
   11aa8:	cmp	r0, #114	; 0x72
   11aac:	beq	11af8 <__assert_fail@plt+0x828>
   11ab0:	mov	r4, #1
   11ab4:	b	11a00 <__assert_fail@plt+0x730>
   11ab8:	mov	r4, #1
   11abc:	b	11a00 <__assert_fail@plt+0x730>
   11ac0:	mov	r3, #1
   11ac4:	strb	r3, [sp, #142]	; 0x8e
   11ac8:	b	118d4 <__assert_fail@plt+0x604>
   11acc:	mov	r3, #3
   11ad0:	str	r3, [sp, #136]	; 0x88
   11ad4:	mov	r4, #0
   11ad8:	strb	r4, [sp, #132]	; 0x84
   11adc:	b	118d4 <__assert_fail@plt+0x604>
   11ae0:	mov	r3, #4
   11ae4:	str	r3, [sp, #136]	; 0x88
   11ae8:	mov	r3, #0
   11aec:	strb	r3, [sp, #132]	; 0x84
   11af0:	mov	r4, #1
   11af4:	b	118d4 <__assert_fail@plt+0x604>
   11af8:	mov	r3, #1
   11afc:	strb	r3, [sp, #141]	; 0x8d
   11b00:	b	118d4 <__assert_fail@plt+0x604>
   11b04:	mov	r3, #5
   11b08:	str	r3, [sp, #136]	; 0x88
   11b0c:	mov	r4, #0
   11b10:	b	118d4 <__assert_fail@plt+0x604>
   11b14:	mov	r3, #4
   11b18:	str	r3, [sp, #136]	; 0x88
   11b1c:	mov	r3, #0
   11b20:	strb	r3, [sp, #132]	; 0x84
   11b24:	mov	r4, #1
   11b28:	b	118d4 <__assert_fail@plt+0x604>
   11b2c:	mov	r3, #1
   11b30:	strb	r3, [sp, #140]	; 0x8c
   11b34:	b	118d4 <__assert_fail@plt+0x604>
   11b38:	movw	r3, #53632	; 0xd180
   11b3c:	movt	r3, #2
   11b40:	ldr	r3, [r3]
   11b44:	sub	r3, r3, #-1073741823	; 0xc0000001
   11b48:	movw	r1, #46080	; 0xb400
   11b4c:	movt	r1, #1
   11b50:	ldr	r0, [r5, r3, lsl #2]
   11b54:	bl	10fdc <strcmp@plt>
   11b58:	cmp	r0, #0
   11b5c:	bne	11b68 <__assert_fail@plt+0x898>
   11b60:	mov	fp, #0
   11b64:	b	118d4 <__assert_fail@plt+0x604>
   11b68:	mov	r2, #5
   11b6c:	movw	r1, #46100	; 0xb414
   11b70:	movt	r1, #1
   11b74:	mov	r0, #0
   11b78:	bl	11060 <dcgettext@plt>
   11b7c:	mov	r2, r0
   11b80:	mov	r1, #0
   11b84:	mov	r0, #1
   11b88:	bl	110f0 <error@plt>
   11b8c:	ldr	r0, [sl]
   11b90:	cmp	r0, #0
   11b94:	beq	11c90 <__assert_fail@plt+0x9c0>
   11b98:	movw	r1, #46156	; 0xb44c
   11b9c:	movt	r1, #1
   11ba0:	bl	10fdc <strcmp@plt>
   11ba4:	cmp	r0, #0
   11ba8:	bne	11bb8 <__assert_fail@plt+0x8e8>
   11bac:	mov	fp, #1
   11bb0:	strb	fp, [sp, #148]	; 0x94
   11bb4:	b	118d4 <__assert_fail@plt+0x604>
   11bb8:	mov	r2, #5
   11bbc:	movw	r1, #46160	; 0xb450
   11bc0:	movt	r1, #1
   11bc4:	mov	r0, #0
   11bc8:	bl	11060 <dcgettext@plt>
   11bcc:	mov	r4, r0
   11bd0:	movw	r3, #53656	; 0xd198
   11bd4:	movt	r3, #2
   11bd8:	ldr	r1, [r3]
   11bdc:	mov	r0, #4
   11be0:	bl	19060 <__assert_fail@plt+0x7d90>
   11be4:	mov	r3, r0
   11be8:	mov	r2, r4
   11bec:	mov	r1, #0
   11bf0:	mov	r0, #1
   11bf4:	bl	110f0 <error@plt>
   11bf8:	mov	r3, #1
   11bfc:	strb	r3, [sp, #150]	; 0x96
   11c00:	b	118d4 <__assert_fail@plt+0x604>
   11c04:	ldrb	r3, [r8, #1]
   11c08:	cmp	r3, #0
   11c0c:	beq	11a1c <__assert_fail@plt+0x74c>
   11c10:	add	r2, sp, #24
   11c14:	mov	r1, r8
   11c18:	mov	r0, r6
   11c1c:	bl	112ac <__lxstat64@plt>
   11c20:	cmp	r0, #0
   11c24:	bne	11a1c <__assert_fail@plt+0x74c>
   11c28:	movw	r3, #53640	; 0xd188
   11c2c:	movt	r3, #2
   11c30:	ldr	r4, [r3]
   11c34:	mov	r2, #5
   11c38:	movw	r1, #46268	; 0xb4bc
   11c3c:	movt	r1, #1
   11c40:	bl	11060 <dcgettext@plt>
   11c44:	mov	r6, r0
   11c48:	ldr	r5, [r5]
   11c4c:	mov	r2, r8
   11c50:	mov	r1, #3
   11c54:	mov	r0, #1
   11c58:	bl	18fd4 <__assert_fail@plt+0x7d04>
   11c5c:	mov	r7, r0
   11c60:	mov	r1, r8
   11c64:	mov	r0, #4
   11c68:	bl	19060 <__assert_fail@plt+0x7d90>
   11c6c:	str	r0, [sp, #4]
   11c70:	str	r7, [sp]
   11c74:	mov	r3, r5
   11c78:	mov	r2, r6
   11c7c:	mov	r1, #1
   11c80:	mov	r0, r4
   11c84:	bl	111bc <__fprintf_chk@plt>
   11c88:	mov	r0, #1
   11c8c:	bl	113d0 <__assert_fail@plt+0x100>
   11c90:	mov	fp, #1
   11c94:	b	118d4 <__assert_fail@plt+0x604>
   11c98:	movw	r3, #53632	; 0xd180
   11c9c:	movt	r3, #2
   11ca0:	ldr	r3, [r3]
   11ca4:	cmp	r3, r7
   11ca8:	blt	11d04 <__assert_fail@plt+0xa34>
   11cac:	ldrb	r3, [sp, #132]	; 0x84
   11cb0:	cmp	r3, #0
   11cb4:	movne	r0, #0
   11cb8:	beq	11cd8 <__assert_fail@plt+0xa08>
   11cbc:	add	sp, sp, #156	; 0x9c
   11cc0:	ldrd	r4, [sp]
   11cc4:	ldrd	r6, [sp, #8]
   11cc8:	ldrd	r8, [sp, #16]
   11ccc:	ldrd	sl, [sp, #24]
   11cd0:	add	sp, sp, #32
   11cd4:	pop	{pc}		; (ldr pc, [sp], #4)
   11cd8:	mov	r2, #5
   11cdc:	movw	r1, #46316	; 0xb4ec
   11ce0:	movt	r1, #1
   11ce4:	mov	r0, #0
   11ce8:	bl	11060 <dcgettext@plt>
   11cec:	mov	r2, r0
   11cf0:	mov	r1, #0
   11cf4:	mov	r0, r1
   11cf8:	bl	110f0 <error@plt>
   11cfc:	mov	r0, #1
   11d00:	bl	113d0 <__assert_fail@plt+0x100>
   11d04:	ldrb	r3, [sp, #141]	; 0x8d
   11d08:	tst	fp, r3
   11d0c:	bne	11e10 <__assert_fail@plt+0xb40>
   11d10:	movw	r3, #53632	; 0xd180
   11d14:	movt	r3, #2
   11d18:	ldr	r3, [r3]
   11d1c:	add	r6, r5, r3, lsl #2
   11d20:	cmp	r4, #0
   11d24:	beq	11de8 <__assert_fail@plt+0xb18>
   11d28:	sub	r7, r7, r3
   11d2c:	mov	r4, r7
   11d30:	asr	r5, r7, #31
   11d34:	ldrb	r2, [sp, #141]	; 0x8d
   11d38:	cmp	r5, #0
   11d3c:	cmpeq	r7, #3
   11d40:	movls	r3, r2
   11d44:	orrhi	r3, r2, #1
   11d48:	cmp	r3, #0
   11d4c:	beq	11de8 <__assert_fail@plt+0xb18>
   11d50:	movw	r3, #53640	; 0xd188
   11d54:	movt	r3, #2
   11d58:	ldr	r8, [r3]
   11d5c:	cmp	r2, #0
   11d60:	beq	11e6c <__assert_fail@plt+0xb9c>
   11d64:	mvn	r2, #0
   11d68:	mov	r3, #0
   11d6c:	cmp	r5, r3
   11d70:	cmpeq	r7, r2
   11d74:	movls	r3, r7
   11d78:	bls	11d9c <__assert_fail@plt+0xacc>
   11d7c:	movw	r2, #16960	; 0x4240
   11d80:	movt	r2, #15
   11d84:	mov	r3, #0
   11d88:	mov	r0, r7
   11d8c:	mov	r1, r5
   11d90:	bl	1a85c <__assert_fail@plt+0x958c>
   11d94:	add	r3, r2, #999424	; 0xf4000
   11d98:	add	r3, r3, #576	; 0x240
   11d9c:	mov	r2, #5
   11da0:	str	r2, [sp]
   11da4:	movw	r2, #46368	; 0xb520
   11da8:	movt	r2, #1
   11dac:	movw	r1, #46408	; 0xb548
   11db0:	movt	r1, #1
   11db4:	mov	r0, #0
   11db8:	bl	112b8 <dcngettext@plt>
   11dbc:	mov	r2, r0
   11dc0:	movw	r3, #53692	; 0xd1bc
   11dc4:	movt	r3, #2
   11dc8:	strd	r4, [sp]
   11dcc:	ldr	r3, [r3]
   11dd0:	mov	r1, #1
   11dd4:	mov	r0, r8
   11dd8:	bl	111bc <__fprintf_chk@plt>
   11ddc:	bl	19fa0 <__assert_fail@plt+0x8cd0>
   11de0:	cmp	r0, #0
   11de4:	beq	11ee8 <__assert_fail@plt+0xc18>
   11de8:	add	r1, sp, #132	; 0x84
   11dec:	mov	r0, r6
   11df0:	bl	12684 <__assert_fail@plt+0x13b4>
   11df4:	sub	r3, r0, #2
   11df8:	cmp	r3, #2
   11dfc:	bhi	11ecc <__assert_fail@plt+0xbfc>
   11e00:	cmp	r0, #4
   11e04:	movne	r0, #0
   11e08:	moveq	r0, #1
   11e0c:	b	11cbc <__assert_fail@plt+0x9ec>
   11e10:	movw	r0, #53664	; 0xd1a0
   11e14:	movt	r0, #2
   11e18:	bl	19370 <__assert_fail@plt+0x80a0>
   11e1c:	str	r0, [sp, #144]	; 0x90
   11e20:	cmp	r0, #0
   11e24:	bne	11d10 <__assert_fail@plt+0xa40>
   11e28:	bl	11180 <__errno_location@plt>
   11e2c:	ldr	r4, [r0]
   11e30:	mov	r2, #5
   11e34:	movw	r1, #46332	; 0xb4fc
   11e38:	movt	r1, #1
   11e3c:	mov	r0, #0
   11e40:	bl	11060 <dcgettext@plt>
   11e44:	mov	r5, r0
   11e48:	movw	r1, #46364	; 0xb51c
   11e4c:	movt	r1, #1
   11e50:	mov	r0, #4
   11e54:	bl	19060 <__assert_fail@plt+0x7d90>
   11e58:	mov	r3, r0
   11e5c:	mov	r2, r5
   11e60:	mov	r1, r4
   11e64:	mov	r0, #1
   11e68:	bl	110f0 <error@plt>
   11e6c:	mvn	r2, #0
   11e70:	mov	r3, #0
   11e74:	cmp	r5, r3
   11e78:	cmpeq	r7, r2
   11e7c:	movls	r3, r7
   11e80:	bls	11ea4 <__assert_fail@plt+0xbd4>
   11e84:	movw	r2, #16960	; 0x4240
   11e88:	movt	r2, #15
   11e8c:	mov	r3, #0
   11e90:	mov	r0, r7
   11e94:	mov	r1, r5
   11e98:	bl	1a85c <__assert_fail@plt+0x958c>
   11e9c:	add	r3, r2, #999424	; 0xf4000
   11ea0:	add	r3, r3, #576	; 0x240
   11ea4:	mov	r2, #5
   11ea8:	str	r2, [sp]
   11eac:	movw	r2, #46448	; 0xb570
   11eb0:	movt	r2, #1
   11eb4:	movw	r1, #46476	; 0xb58c
   11eb8:	movt	r1, #1
   11ebc:	mov	r0, #0
   11ec0:	bl	112b8 <dcngettext@plt>
   11ec4:	mov	r2, r0
   11ec8:	b	11dc0 <__assert_fail@plt+0xaf0>
   11ecc:	ldr	r3, [pc, #28]	; 11ef0 <__assert_fail@plt+0xc20>
   11ed0:	movw	r2, #371	; 0x173
   11ed4:	movw	r1, #46504	; 0xb5a8
   11ed8:	movt	r1, #1
   11edc:	movw	r0, #46516	; 0xb5b4
   11ee0:	movt	r0, #1
   11ee4:	bl	112d0 <__assert_fail@plt>
   11ee8:	mov	r0, #0
   11eec:	b	11cbc <__assert_fail@plt+0x9ec>
   11ef0:	andeq	sl, r1, r4, lsl #23
   11ef4:	ldr	r3, [r0, #4]
   11ef8:	ldr	r2, [r3, #48]	; 0x30
   11efc:	cmp	r2, #0
   11f00:	blt	11f34 <__assert_fail@plt+0xc64>
   11f04:	ldr	r2, [r3, #16]
   11f08:	cmp	r2, #0
   11f0c:	bne	11f34 <__assert_fail@plt+0xc64>
   11f10:	mov	r1, #1
   11f14:	str	r1, [r3, #16]
   11f18:	ldr	r3, [r3, #4]
   11f1c:	ldr	r2, [r3, #48]	; 0x30
   11f20:	cmp	r2, #0
   11f24:	blt	11f34 <__assert_fail@plt+0xc64>
   11f28:	ldr	r2, [r3, #16]
   11f2c:	cmp	r2, #0
   11f30:	beq	11f14 <__assert_fail@plt+0xc44>
   11f34:	bx	lr
   11f38:	str	r4, [sp, #-16]!
   11f3c:	strd	r6, [sp, #4]
   11f40:	str	lr, [sp, #12]
   11f44:	sub	sp, sp, #8
   11f48:	mov	r4, r2
   11f4c:	mov	ip, r3
   11f50:	ldrd	r6, [r2, #48]	; 0x30
   11f54:	mvn	r2, #0
   11f58:	mvn	r3, #0
   11f5c:	cmp	r7, r3
   11f60:	cmpeq	r6, r2
   11f64:	beq	11f90 <__assert_fail@plt+0xcc0>
   11f68:	ldrd	r2, [r4, #48]	; 0x30
   11f6c:	cmp	r2, #0
   11f70:	sbcs	r3, r3, #0
   11f74:	movge	r0, #0
   11f78:	blt	11fcc <__assert_fail@plt+0xcfc>
   11f7c:	add	sp, sp, #8
   11f80:	ldr	r4, [sp]
   11f84:	ldrd	r6, [sp, #4]
   11f88:	add	sp, sp, #12
   11f8c:	pop	{pc}		; (ldr pc, [sp], #4)
   11f90:	str	ip, [sp]
   11f94:	mov	r3, r4
   11f98:	mov	r2, r1
   11f9c:	mov	r1, r0
   11fa0:	mov	r0, #3
   11fa4:	bl	11090 <__fxstatat64@plt>
   11fa8:	cmp	r0, #0
   11fac:	beq	11f68 <__assert_fail@plt+0xc98>
   11fb0:	mvn	r2, #1
   11fb4:	mvn	r3, #0
   11fb8:	strd	r2, [r4, #48]	; 0x30
   11fbc:	bl	11180 <__errno_location@plt>
   11fc0:	ldr	r2, [r0]
   11fc4:	asr	r3, r2, #31
   11fc8:	strd	r2, [r4, #96]	; 0x60
   11fcc:	bl	11180 <__errno_location@plt>
   11fd0:	ldr	r3, [r4, #96]	; 0x60
   11fd4:	str	r3, [r0]
   11fd8:	mvn	r0, #0
   11fdc:	b	11f7c <__assert_fail@plt+0xcac>
   11fe0:	strd	r4, [sp, #-20]!	; 0xffffffec
   11fe4:	strd	r6, [sp, #8]
   11fe8:	str	lr, [sp, #16]
   11fec:	sub	sp, sp, #116	; 0x74
   11ff0:	mov	r6, r0
   11ff4:	mov	r4, r1
   11ff8:	mov	r7, r2
   11ffc:	subs	r5, r3, #0
   12000:	movne	r2, #512	; 0x200
   12004:	moveq	r2, #0
   12008:	ldr	r1, [r1, #24]
   1200c:	ldr	r0, [r0, #32]
   12010:	bl	10ff4 <unlinkat@plt>
   12014:	cmp	r0, #0
   12018:	beq	12068 <__assert_fail@plt+0xd98>
   1201c:	bl	11180 <__errno_location@plt>
   12020:	mov	r5, r0
   12024:	ldr	r3, [r0]
   12028:	cmp	r3, #30
   1202c:	beq	120d4 <__assert_fail@plt+0xe04>
   12030:	ldr	r3, [r5]
   12034:	ldrb	r2, [r7]
   12038:	cmp	r2, #0
   1203c:	beq	12118 <__assert_fail@plt+0xe48>
   12040:	cmp	r3, #20
   12044:	beq	121bc <__assert_fail@plt+0xeec>
   12048:	ble	12110 <__assert_fail@plt+0xe40>
   1204c:	cmp	r3, #22
   12050:	moveq	r0, #2
   12054:	beq	1216c <__assert_fail@plt+0xe9c>
   12058:	cmp	r3, #84	; 0x54
   1205c:	moveq	r0, #2
   12060:	bne	12118 <__assert_fail@plt+0xe48>
   12064:	b	1216c <__assert_fail@plt+0xe9c>
   12068:	ldrb	r3, [r7, #18]
   1206c:	cmp	r3, #0
   12070:	moveq	r0, #2
   12074:	beq	1216c <__assert_fail@plt+0xe9c>
   12078:	cmp	r5, #0
   1207c:	beq	120b8 <__assert_fail@plt+0xde8>
   12080:	mov	r2, #5
   12084:	movw	r1, #46824	; 0xb6e8
   12088:	movt	r1, #1
   1208c:	bl	11060 <dcgettext@plt>
   12090:	mov	r5, r0
   12094:	ldr	r1, [r4, #28]
   12098:	mov	r0, #4
   1209c:	bl	19060 <__assert_fail@plt+0x7d90>
   120a0:	mov	r2, r0
   120a4:	mov	r1, r5
   120a8:	mov	r0, #1
   120ac:	bl	111a4 <__printf_chk@plt>
   120b0:	mov	r0, #2
   120b4:	b	1216c <__assert_fail@plt+0xe9c>
   120b8:	mov	r2, #5
   120bc:	movw	r1, #46848	; 0xb700
   120c0:	movt	r1, #1
   120c4:	mov	r0, #0
   120c8:	bl	11060 <dcgettext@plt>
   120cc:	mov	r5, r0
   120d0:	b	12094 <__assert_fail@plt+0xdc4>
   120d4:	mov	r3, #256	; 0x100
   120d8:	str	r3, [sp]
   120dc:	add	r3, sp, #8
   120e0:	ldr	r2, [r4, #24]
   120e4:	ldr	r1, [r6, #32]
   120e8:	mov	r0, #3
   120ec:	bl	11090 <__fxstatat64@plt>
   120f0:	cmp	r0, #0
   120f4:	beq	12104 <__assert_fail@plt+0xe34>
   120f8:	ldr	r3, [r5]
   120fc:	cmp	r3, #2
   12100:	beq	12030 <__assert_fail@plt+0xd60>
   12104:	mov	r3, #30
   12108:	str	r3, [r5]
   1210c:	b	12030 <__assert_fail@plt+0xd60>
   12110:	cmp	r3, #2
   12114:	beq	121c4 <__assert_fail@plt+0xef4>
   12118:	ldrh	r2, [r4, #56]	; 0x38
   1211c:	cmp	r2, #4
   12120:	beq	12180 <__assert_fail@plt+0xeb0>
   12124:	ldr	r5, [r5]
   12128:	mov	r2, #5
   1212c:	movw	r1, #46860	; 0xb70c
   12130:	movt	r1, #1
   12134:	mov	r0, #0
   12138:	bl	11060 <dcgettext@plt>
   1213c:	mov	r6, r0
   12140:	ldr	r1, [r4, #28]
   12144:	mov	r0, #4
   12148:	bl	19060 <__assert_fail@plt+0x7d90>
   1214c:	mov	r3, r0
   12150:	mov	r2, r6
   12154:	mov	r1, r5
   12158:	mov	r0, #0
   1215c:	bl	110f0 <error@plt>
   12160:	mov	r0, r4
   12164:	bl	11ef4 <__assert_fail@plt+0xc24>
   12168:	mov	r0, #4
   1216c:	add	sp, sp, #116	; 0x74
   12170:	ldrd	r4, [sp]
   12174:	ldrd	r6, [sp, #8]
   12178:	add	sp, sp, #16
   1217c:	pop	{pc}		; (ldr pc, [sp], #4)
   12180:	cmp	r3, #17
   12184:	cmpne	r3, #39	; 0x27
   12188:	moveq	r2, #1
   1218c:	movne	r2, #0
   12190:	sub	r3, r3, #20
   12194:	cmp	r3, #1
   12198:	movhi	r3, r2
   1219c:	orrls	r3, r2, #1
   121a0:	cmp	r3, #0
   121a4:	beq	12124 <__assert_fail@plt+0xe54>
   121a8:	ldr	r3, [r4, #32]
   121ac:	cmp	r3, #13
   121b0:	cmpne	r3, #1
   121b4:	streq	r3, [r5]
   121b8:	b	12124 <__assert_fail@plt+0xe54>
   121bc:	mov	r0, #2
   121c0:	b	1216c <__assert_fail@plt+0xe9c>
   121c4:	mov	r0, #2
   121c8:	b	1216c <__assert_fail@plt+0xe9c>
   121cc:	str	r4, [sp, #-8]!
   121d0:	str	lr, [sp, #4]
   121d4:	mov	r4, r0
   121d8:	mov	r2, #4
   121dc:	bl	15c1c <__assert_fail@plt+0x494c>
   121e0:	mov	r0, r4
   121e4:	bl	1558c <__assert_fail@plt+0x42bc>
   121e8:	ldr	r4, [sp]
   121ec:	add	sp, sp, #4
   121f0:	pop	{pc}		; (ldr pc, [sp], #4)
   121f4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   121f8:	strd	r6, [sp, #8]
   121fc:	strd	r8, [sp, #16]
   12200:	strd	sl, [sp, #24]
   12204:	str	lr, [sp, #32]
   12208:	sub	sp, sp, #124	; 0x7c
   1220c:	mov	r4, r1
   12210:	mov	r5, r2
   12214:	mov	r7, r3
   12218:	ldr	r6, [sp, #164]	; 0xa4
   1221c:	ldr	r8, [r0, #32]
   12220:	ldr	r3, [r1, #28]
   12224:	str	r3, [sp, #8]
   12228:	ldr	r9, [r1, #24]
   1222c:	cmp	r6, #0
   12230:	beq	12660 <__assert_fail@plt+0x1390>
   12234:	mov	r3, #2
   12238:	str	r3, [r6]
   1223c:	mvn	r2, #0
   12240:	mvn	r3, #0
   12244:	strd	r2, [sp, #64]	; 0x40
   12248:	cmp	r5, #0
   1224c:	moveq	sl, #0
   12250:	movne	sl, #4
   12254:	mov	r2, #51456	; 0xc900
   12258:	mov	r1, r9
   1225c:	mov	r0, r8
   12260:	bl	11174 <openat64@plt>
   12264:	subs	r5, r0, #0
   12268:	blt	122c0 <__assert_fail@plt+0xff0>
   1226c:	mov	r0, r5
   12270:	bl	11234 <fdopendir@plt>
   12274:	subs	r3, r0, #0
   12278:	str	r3, [sp, #12]
   1227c:	beq	122cc <__assert_fail@plt+0xffc>
   12280:	bl	11180 <__errno_location@plt>
   12284:	mov	r5, r0
   12288:	mov	r3, #0
   1228c:	str	r3, [r0]
   12290:	ldr	r0, [sp, #12]
   12294:	bl	11228 <readdir64@plt>
   12298:	cmp	r0, #0
   1229c:	beq	125bc <__assert_fail@plt+0x12ec>
   122a0:	ldrb	r3, [r0, #19]
   122a4:	cmp	r3, #46	; 0x2e
   122a8:	beq	122d8 <__assert_fail@plt+0x1008>
   122ac:	ldr	r3, [r5]
   122b0:	mov	fp, r3
   122b4:	ldr	r0, [sp, #12]
   122b8:	bl	112c4 <closedir@plt>
   122bc:	str	fp, [r5]
   122c0:	mov	r5, #0
   122c4:	mov	r3, #3
   122c8:	b	125e0 <__assert_fail@plt+0x1310>
   122cc:	mov	r0, r5
   122d0:	bl	112a0 <close@plt>
   122d4:	b	122c0 <__assert_fail@plt+0xff0>
   122d8:	ldrb	r3, [r0, #20]
   122dc:	cmp	r3, #46	; 0x2e
   122e0:	moveq	r3, #2
   122e4:	movne	r3, #1
   122e8:	add	r0, r0, r3
   122ec:	ldrb	r3, [r0, #19]
   122f0:	cmp	r3, #47	; 0x2f
   122f4:	cmpne	r3, #0
   122f8:	beq	12290 <__assert_fail@plt+0xfc0>
   122fc:	b	122ac <__assert_fail@plt+0xfdc>
   12300:	mov	r3, #256	; 0x100
   12304:	add	r2, sp, #16
   12308:	mov	r1, r9
   1230c:	mov	r0, r8
   12310:	bl	11f38 <__assert_fail@plt+0xc68>
   12314:	cmp	r0, #0
   12318:	bne	12358 <__assert_fail@plt+0x1088>
   1231c:	ldr	r3, [sp, #32]
   12320:	and	r3, r3, #61440	; 0xf000
   12324:	cmp	r3, #40960	; 0xa000
   12328:	beq	12634 <__assert_fail@plt+0x1364>
   1232c:	mov	r3, #512	; 0x200
   12330:	mov	r2, #2
   12334:	mov	r1, r9
   12338:	mov	r0, r8
   1233c:	bl	11018 <faccessat@plt>
   12340:	cmp	r0, #0
   12344:	beq	12634 <__assert_fail@plt+0x1364>
   12348:	bl	11180 <__errno_location@plt>
   1234c:	ldr	r3, [r0]
   12350:	cmp	r3, #13
   12354:	beq	12560 <__assert_fail@plt+0x1290>
   12358:	bl	11180 <__errno_location@plt>
   1235c:	ldr	r4, [r0]
   12360:	b	1236c <__assert_fail@plt+0x109c>
   12364:	bl	11180 <__errno_location@plt>
   12368:	ldr	r4, [r0]
   1236c:	ldr	r1, [sp, #8]
   12370:	mov	r0, #4
   12374:	bl	19060 <__assert_fail@plt+0x7d90>
   12378:	mov	r5, r0
   1237c:	mov	r2, #5
   12380:	movw	r1, #46860	; 0xb70c
   12384:	movt	r1, #1
   12388:	mov	r0, #0
   1238c:	bl	11060 <dcgettext@plt>
   12390:	mov	r3, r5
   12394:	mov	r2, r0
   12398:	mov	r1, r4
   1239c:	mov	r0, #0
   123a0:	bl	110f0 <error@plt>
   123a4:	mov	r0, #4
   123a8:	b	12644 <__assert_fail@plt+0x1374>
   123ac:	mov	r4, sl
   123b0:	ldr	r3, [r7, #4]
   123b4:	cmp	r3, #3
   123b8:	moveq	sl, #10
   123bc:	beq	1247c <__assert_fail@plt+0x11ac>
   123c0:	mov	r0, #2
   123c4:	b	12644 <__assert_fail@plt+0x1374>
   123c8:	mov	r4, sl
   123cc:	ldrb	r3, [r7, #9]
   123d0:	cmp	r3, #0
   123d4:	bne	12478 <__assert_fail@plt+0x11a8>
   123d8:	ldrb	r3, [r7, #10]
   123dc:	tst	r5, r3
   123e0:	moveq	r4, #21
   123e4:	beq	1236c <__assert_fail@plt+0x109c>
   123e8:	mov	sl, #4
   123ec:	b	1247c <__assert_fail@plt+0x11ac>
   123f0:	movw	r3, #53640	; 0xd188
   123f4:	movt	r3, #2
   123f8:	ldr	r5, [r3]
   123fc:	cmp	r4, #0
   12400:	mov	r2, #5
   12404:	movwne	r1, #46880	; 0xb720
   12408:	movtne	r1, #1
   1240c:	movweq	r1, #46928	; 0xb750
   12410:	movteq	r1, #1
   12414:	mov	r0, #0
   12418:	bl	11060 <dcgettext@plt>
   1241c:	mov	r2, r0
   12420:	movw	r3, #53692	; 0xd1bc
   12424:	movt	r3, #2
   12428:	str	r6, [sp]
   1242c:	ldr	r3, [r3]
   12430:	mov	r1, #1
   12434:	mov	r0, r5
   12438:	bl	111bc <__fprintf_chk@plt>
   1243c:	b	12528 <__assert_fail@plt+0x1258>
   12440:	bl	11180 <__errno_location@plt>
   12444:	ldr	r4, [r0]
   12448:	mov	r2, #5
   1244c:	movw	r1, #46860	; 0xb70c
   12450:	movt	r1, #1
   12454:	mov	r0, #0
   12458:	bl	11060 <dcgettext@plt>
   1245c:	mov	r3, r6
   12460:	mov	r2, r0
   12464:	mov	r1, r4
   12468:	mov	r0, #0
   1246c:	bl	110f0 <error@plt>
   12470:	mov	r0, #4
   12474:	b	12644 <__assert_fail@plt+0x1374>
   12478:	mov	sl, #4
   1247c:	ldr	r1, [sp, #8]
   12480:	mov	r0, #4
   12484:	bl	19060 <__assert_fail@plt+0x7d90>
   12488:	mov	r6, r0
   1248c:	ldr	r3, [sp, #160]	; 0xa0
   12490:	cmp	sl, #4
   12494:	cmpeq	r3, #2
   12498:	moveq	sl, #1
   1249c:	movne	sl, #0
   124a0:	eor	sl, sl, #1
   124a4:	orrs	r3, r5, sl
   124a8:	beq	123f0 <__assert_fail@plt+0x1120>
   124ac:	mov	r3, #256	; 0x100
   124b0:	add	r2, sp, #16
   124b4:	mov	r1, r9
   124b8:	mov	r0, r8
   124bc:	bl	11f38 <__assert_fail@plt+0xc68>
   124c0:	cmp	r0, #0
   124c4:	bne	12440 <__assert_fail@plt+0x1170>
   124c8:	movw	r3, #53640	; 0xd188
   124cc:	movt	r3, #2
   124d0:	ldr	r5, [r3]
   124d4:	cmp	r4, #0
   124d8:	mov	r2, #5
   124dc:	movwne	r1, #46960	; 0xb770
   124e0:	movtne	r1, #1
   124e4:	movweq	r1, #46996	; 0xb794
   124e8:	movteq	r1, #1
   124ec:	mov	r0, #0
   124f0:	bl	11060 <dcgettext@plt>
   124f4:	mov	r4, r0
   124f8:	movw	r3, #53692	; 0xd1bc
   124fc:	movt	r3, #2
   12500:	ldr	r7, [r3]
   12504:	add	r0, sp, #16
   12508:	bl	136b8 <__assert_fail@plt+0x23e8>
   1250c:	str	r6, [sp, #4]
   12510:	str	r0, [sp]
   12514:	mov	r3, r7
   12518:	mov	r2, r4
   1251c:	mov	r1, #1
   12520:	mov	r0, r5
   12524:	bl	111bc <__fprintf_chk@plt>
   12528:	bl	19fa0 <__assert_fail@plt+0x8cd0>
   1252c:	cmp	r0, #0
   12530:	movne	r0, #2
   12534:	moveq	r0, #3
   12538:	b	12644 <__assert_fail@plt+0x1374>
   1253c:	cmp	sl, #0
   12540:	beq	12570 <__assert_fail@plt+0x12a0>
   12544:	cmp	sl, #4
   12548:	beq	123cc <__assert_fail@plt+0x10fc>
   1254c:	ldr	r1, [sp, #8]
   12550:	mov	r0, #4
   12554:	bl	19060 <__assert_fail@plt+0x7d90>
   12558:	mov	r6, r0
   1255c:	b	1248c <__assert_fail@plt+0x11bc>
   12560:	cmp	sl, #0
   12564:	movne	r4, #1
   12568:	bne	12544 <__assert_fail@plt+0x1274>
   1256c:	mov	sl, #1
   12570:	mov	r3, #256	; 0x100
   12574:	add	r2, sp, #16
   12578:	mov	r1, r9
   1257c:	mov	r0, r8
   12580:	bl	11f38 <__assert_fail@plt+0xc68>
   12584:	cmp	r0, #0
   12588:	bne	12364 <__assert_fail@plt+0x1094>
   1258c:	ldr	r3, [sp, #32]
   12590:	and	r3, r3, #61440	; 0xf000
   12594:	cmp	r3, #40960	; 0xa000
   12598:	beq	123ac <__assert_fail@plt+0x10dc>
   1259c:	cmp	r3, #16384	; 0x4000
   125a0:	beq	123c8 <__assert_fail@plt+0x10f8>
   125a4:	ldr	r1, [sp, #8]
   125a8:	mov	r0, #4
   125ac:	bl	19060 <__assert_fail@plt+0x7d90>
   125b0:	mov	r6, r0
   125b4:	mov	r4, sl
   125b8:	b	124ac <__assert_fail@plt+0x11dc>
   125bc:	ldr	fp, [r5]
   125c0:	ldr	r0, [sp, #12]
   125c4:	bl	112c4 <closedir@plt>
   125c8:	str	fp, [r5]
   125cc:	clz	r5, fp
   125d0:	lsr	r5, r5, #5
   125d4:	cmp	fp, #0
   125d8:	moveq	r3, #4
   125dc:	movne	r3, #3
   125e0:	str	r3, [r6]
   125e4:	ldr	r4, [r4, #16]
   125e8:	cmp	r4, #0
   125ec:	movne	r0, #3
   125f0:	bne	12644 <__assert_fail@plt+0x1374>
   125f4:	ldr	r3, [r7, #4]
   125f8:	cmp	r3, #5
   125fc:	moveq	r0, #2
   12600:	beq	12644 <__assert_fail@plt+0x1374>
   12604:	ldrb	r2, [r7]
   12608:	cmp	r2, #0
   1260c:	bne	12634 <__assert_fail@plt+0x1364>
   12610:	cmp	r3, #3
   12614:	beq	12628 <__assert_fail@plt+0x1358>
   12618:	ldrb	r3, [r7, #17]
   1261c:	cmp	r3, #0
   12620:	moveq	r0, #2
   12624:	beq	12644 <__assert_fail@plt+0x1374>
   12628:	bl	199d4 <__assert_fail@plt+0x8704>
   1262c:	cmp	r0, #0
   12630:	beq	12300 <__assert_fail@plt+0x1030>
   12634:	ldr	r3, [r7, #4]
   12638:	cmp	r3, #3
   1263c:	movne	r0, #2
   12640:	beq	1253c <__assert_fail@plt+0x126c>
   12644:	add	sp, sp, #124	; 0x7c
   12648:	ldrd	r4, [sp]
   1264c:	ldrd	r6, [sp, #8]
   12650:	ldrd	r8, [sp, #16]
   12654:	ldrd	sl, [sp, #24]
   12658:	add	sp, sp, #32
   1265c:	pop	{pc}		; (ldr pc, [sp], #4)
   12660:	mvn	r2, #0
   12664:	mvn	r3, #0
   12668:	strd	r2, [sp, #64]	; 0x40
   1266c:	cmp	r5, #0
   12670:	moveq	sl, #0
   12674:	beq	125e4 <__assert_fail@plt+0x1314>
   12678:	mov	sl, #4
   1267c:	mov	r5, #0
   12680:	b	125e4 <__assert_fail@plt+0x1314>
   12684:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12688:	strd	r6, [sp, #8]
   1268c:	strd	r8, [sp, #16]
   12690:	strd	sl, [sp, #24]
   12694:	str	lr, [sp, #32]
   12698:	sub	sp, sp, #124	; 0x7c
   1269c:	ldr	r3, [r0]
   126a0:	cmp	r3, #0
   126a4:	beq	12d80 <__assert_fail@plt+0x1ab0>
   126a8:	mov	r7, r1
   126ac:	ldrb	r3, [r1, #8]
   126b0:	cmp	r3, #0
   126b4:	mov	r2, #0
   126b8:	moveq	r1, #536	; 0x218
   126bc:	movne	r1, #600	; 0x258
   126c0:	bl	19f10 <__assert_fail@plt+0x8c40>
   126c4:	mov	r6, r0
   126c8:	mov	r5, #2
   126cc:	movw	r9, #47560	; 0xb9c8
   126d0:	movt	r9, #1
   126d4:	movw	sl, #47372	; 0xb90c
   126d8:	movt	sl, #1
   126dc:	movw	r3, #47284	; 0xb8b4
   126e0:	movt	r3, #1
   126e4:	str	r3, [sp, #12]
   126e8:	b	12b90 <__assert_fail@plt+0x18c0>
   126ec:	mov	r5, r8
   126f0:	b	12b90 <__assert_fail@plt+0x18c0>
   126f4:	bl	11180 <__errno_location@plt>
   126f8:	mov	r7, r0
   126fc:	ldr	r4, [r0]
   12700:	cmp	r4, #0
   12704:	bne	12738 <__assert_fail@plt+0x1468>
   12708:	mov	r0, r6
   1270c:	bl	15410 <__assert_fail@plt+0x4140>
   12710:	cmp	r0, #0
   12714:	bne	12d50 <__assert_fail@plt+0x1a80>
   12718:	mov	r0, r5
   1271c:	add	sp, sp, #124	; 0x7c
   12720:	ldrd	r4, [sp]
   12724:	ldrd	r6, [sp, #8]
   12728:	ldrd	r8, [sp, #16]
   1272c:	ldrd	sl, [sp, #24]
   12730:	add	sp, sp, #32
   12734:	pop	{pc}		; (ldr pc, [sp], #4)
   12738:	mov	r2, #5
   1273c:	movw	r1, #47016	; 0xb7a8
   12740:	movt	r1, #1
   12744:	mov	r0, #0
   12748:	bl	11060 <dcgettext@plt>
   1274c:	mov	r2, r0
   12750:	mov	r1, r4
   12754:	mov	r0, #0
   12758:	bl	110f0 <error@plt>
   1275c:	mov	r5, #4
   12760:	b	12708 <__assert_fail@plt+0x1438>
   12764:	ldrb	r3, [r7, #9]
   12768:	cmp	r3, #0
   1276c:	bne	12e18 <__assert_fail@plt+0x1b48>
   12770:	ldrb	r3, [r7, #10]
   12774:	cmp	r3, #0
   12778:	beq	1282c <__assert_fail@plt+0x155c>
   1277c:	mov	r2, #51456	; 0xc900
   12780:	ldr	r1, [r4, #24]
   12784:	ldr	r0, [r6, #32]
   12788:	bl	11174 <openat64@plt>
   1278c:	subs	r8, r0, #0
   12790:	blt	127e4 <__assert_fail@plt+0x1514>
   12794:	mov	r0, r8
   12798:	bl	11234 <fdopendir@plt>
   1279c:	subs	r3, r0, #0
   127a0:	str	r3, [sp, #8]
   127a4:	beq	127f8 <__assert_fail@plt+0x1528>
   127a8:	bl	11180 <__errno_location@plt>
   127ac:	mov	r8, r0
   127b0:	mov	r3, #0
   127b4:	str	r3, [r0]
   127b8:	ldr	r0, [sp, #8]
   127bc:	bl	11228 <readdir64@plt>
   127c0:	cmp	r0, #0
   127c4:	beq	12e00 <__assert_fail@plt+0x1b30>
   127c8:	ldrb	r3, [r0, #19]
   127cc:	cmp	r3, #46	; 0x2e
   127d0:	beq	12804 <__assert_fail@plt+0x1534>
   127d4:	ldr	r5, [r8]
   127d8:	ldr	r0, [sp, #8]
   127dc:	bl	112c4 <closedir@plt>
   127e0:	str	r5, [r8]
   127e4:	ldrb	r3, [r7, #10]
   127e8:	cmp	r3, #0
   127ec:	movne	r5, #39	; 0x27
   127f0:	moveq	r5, #21
   127f4:	b	12830 <__assert_fail@plt+0x1560>
   127f8:	mov	r0, r8
   127fc:	bl	112a0 <close@plt>
   12800:	b	127e4 <__assert_fail@plt+0x1514>
   12804:	ldrb	r3, [r0, #20]
   12808:	cmp	r3, #46	; 0x2e
   1280c:	moveq	r3, #2
   12810:	movne	r3, #1
   12814:	add	r0, r0, r3
   12818:	ldrb	r3, [r0, #19]
   1281c:	cmp	r3, #47	; 0x2f
   12820:	cmpne	r3, #0
   12824:	beq	127b8 <__assert_fail@plt+0x14e8>
   12828:	b	127d4 <__assert_fail@plt+0x1504>
   1282c:	mov	r5, #21
   12830:	mov	r2, #5
   12834:	movw	r1, #46860	; 0xb70c
   12838:	movt	r1, #1
   1283c:	mov	r0, #0
   12840:	bl	11060 <dcgettext@plt>
   12844:	mov	r8, r0
   12848:	ldr	r1, [r4, #28]
   1284c:	mov	r0, #4
   12850:	bl	19060 <__assert_fail@plt+0x7d90>
   12854:	mov	r3, r0
   12858:	mov	r2, r8
   1285c:	mov	r1, r5
   12860:	mov	r0, #0
   12864:	bl	110f0 <error@plt>
   12868:	mov	r0, r4
   1286c:	bl	11ef4 <__assert_fail@plt+0xc24>
   12870:	mov	r1, r4
   12874:	mov	r0, r6
   12878:	bl	121cc <__assert_fail@plt+0xefc>
   1287c:	b	12c88 <__assert_fail@plt+0x19b8>
   12880:	ldrb	r3, [r0, #1]
   12884:	cmp	r3, #46	; 0x2e
   12888:	moveq	r3, #2
   1288c:	movne	r3, #1
   12890:	ldrb	r3, [r0, r3]
   12894:	cmp	r3, #47	; 0x2f
   12898:	cmpne	r3, #0
   1289c:	bne	12e3c <__assert_fail@plt+0x1b6c>
   128a0:	mov	r2, #5
   128a4:	movw	r1, #47032	; 0xb7b8
   128a8:	movt	r1, #1
   128ac:	mov	r0, #0
   128b0:	bl	11060 <dcgettext@plt>
   128b4:	mov	fp, r0
   128b8:	movw	r2, #47084	; 0xb7ec
   128bc:	movt	r2, #1
   128c0:	mov	r1, #4
   128c4:	mov	r0, #0
   128c8:	bl	18fd4 <__assert_fail@plt+0x7d04>
   128cc:	mov	r5, r0
   128d0:	movw	r2, #47088	; 0xb7f0
   128d4:	movt	r2, #1
   128d8:	mov	r1, #4
   128dc:	mov	r0, #1
   128e0:	bl	18fd4 <__assert_fail@plt+0x7d04>
   128e4:	mov	r8, r0
   128e8:	ldr	r2, [r4, #28]
   128ec:	mov	r1, #4
   128f0:	mov	r0, #2
   128f4:	bl	18fd4 <__assert_fail@plt+0x7d04>
   128f8:	str	r0, [sp, #4]
   128fc:	str	r8, [sp]
   12900:	mov	r3, r5
   12904:	mov	r2, fp
   12908:	mov	r1, #0
   1290c:	mov	r0, r1
   12910:	bl	110f0 <error@plt>
   12914:	mov	r1, r4
   12918:	mov	r0, r6
   1291c:	bl	121cc <__assert_fail@plt+0xefc>
   12920:	b	12c88 <__assert_fail@plt+0x19b8>
   12924:	ldrd	r2, [r4, #64]	; 0x40
   12928:	ldrd	r0, [ip, #8]
   1292c:	cmp	r3, r1
   12930:	cmpeq	r2, r0
   12934:	bne	12e5c <__assert_fail@plt+0x1b8c>
   12938:	movw	r1, #46364	; 0xb51c
   1293c:	movt	r1, #1
   12940:	ldr	r0, [r4, #28]
   12944:	bl	10fdc <strcmp@plt>
   12948:	cmp	r0, #0
   1294c:	bne	129b8 <__assert_fail@plt+0x16e8>
   12950:	mov	r2, #5
   12954:	movw	r1, #47092	; 0xb7f4
   12958:	movt	r1, #1
   1295c:	bl	11060 <dcgettext@plt>
   12960:	mov	r5, r0
   12964:	ldr	r1, [r4, #28]
   12968:	mov	r0, #4
   1296c:	bl	19060 <__assert_fail@plt+0x7d90>
   12970:	mov	r3, r0
   12974:	mov	r2, r5
   12978:	mov	r1, #0
   1297c:	mov	r0, r1
   12980:	bl	110f0 <error@plt>
   12984:	mov	r2, #5
   12988:	movw	r1, #47200	; 0xb860
   1298c:	movt	r1, #1
   12990:	mov	r0, #0
   12994:	bl	11060 <dcgettext@plt>
   12998:	mov	r2, r0
   1299c:	mov	r1, #0
   129a0:	mov	r0, r1
   129a4:	bl	110f0 <error@plt>
   129a8:	mov	r1, r4
   129ac:	mov	r0, r6
   129b0:	bl	121cc <__assert_fail@plt+0xefc>
   129b4:	b	12c88 <__assert_fail@plt+0x19b8>
   129b8:	mov	r2, #5
   129bc:	movw	r1, #47140	; 0xb824
   129c0:	movt	r1, #1
   129c4:	mov	r0, #0
   129c8:	bl	11060 <dcgettext@plt>
   129cc:	mov	r5, r0
   129d0:	ldr	r2, [r4, #28]
   129d4:	mov	r1, #4
   129d8:	mov	r0, #0
   129dc:	bl	18fd4 <__assert_fail@plt+0x7d04>
   129e0:	mov	r8, r0
   129e4:	movw	r2, #46364	; 0xb51c
   129e8:	movt	r2, #1
   129ec:	mov	r1, #4
   129f0:	mov	r0, #1
   129f4:	bl	18fd4 <__assert_fail@plt+0x7d04>
   129f8:	str	r0, [sp]
   129fc:	mov	r3, r8
   12a00:	mov	r2, r5
   12a04:	mov	r1, #0
   12a08:	mov	r0, r1
   12a0c:	bl	110f0 <error@plt>
   12a10:	b	12984 <__assert_fail@plt+0x16b4>
   12a14:	mov	r2, #0
   12a18:	movw	r1, #47088	; 0xb7f0
   12a1c:	movt	r1, #1
   12a20:	mov	r0, r8
   12a24:	bl	137c4 <__assert_fail@plt+0x24f4>
   12a28:	mov	r8, r0
   12a2c:	add	r2, sp, #16
   12a30:	mov	r1, r0
   12a34:	mov	r0, #3
   12a38:	bl	112ac <__lxstat64@plt>
   12a3c:	cmp	r0, #0
   12a40:	beq	12d88 <__assert_fail@plt+0x1ab8>
   12a44:	mov	r2, #5
   12a48:	movw	r1, #47252	; 0xb894
   12a4c:	movt	r1, #1
   12a50:	mov	r0, #0
   12a54:	bl	11060 <dcgettext@plt>
   12a58:	mov	fp, r0
   12a5c:	mov	r2, r8
   12a60:	mov	r1, #4
   12a64:	mov	r0, #0
   12a68:	bl	18fd4 <__assert_fail@plt+0x7d04>
   12a6c:	mov	r5, r0
   12a70:	ldr	r2, [r4, #24]
   12a74:	mov	r1, #4
   12a78:	mov	r0, #1
   12a7c:	bl	18fd4 <__assert_fail@plt+0x7d04>
   12a80:	str	r0, [sp]
   12a84:	mov	r3, r5
   12a88:	mov	r2, fp
   12a8c:	mov	r1, #0
   12a90:	mov	r0, r1
   12a94:	bl	110f0 <error@plt>
   12a98:	mov	r0, r8
   12a9c:	bl	13924 <__assert_fail@plt+0x2654>
   12aa0:	mov	r1, r4
   12aa4:	mov	r0, r6
   12aa8:	bl	121cc <__assert_fail@plt+0xefc>
   12aac:	b	12c88 <__assert_fail@plt+0x19b8>
   12ab0:	ldr	r3, [sp, #16]
   12ab4:	cmp	r3, #4
   12ab8:	bne	12b64 <__assert_fail@plt+0x1894>
   12abc:	mov	r3, #1
   12ac0:	mov	r2, r7
   12ac4:	mov	r1, r4
   12ac8:	mov	r0, r6
   12acc:	bl	11fe0 <__assert_fail@plt+0xd10>
   12ad0:	cmp	r0, #2
   12ad4:	movne	r8, r0
   12ad8:	bne	12e98 <__assert_fail@plt+0x1bc8>
   12adc:	mov	r1, r4
   12ae0:	mov	r0, r6
   12ae4:	bl	121cc <__assert_fail@plt+0xefc>
   12ae8:	b	12b64 <__assert_fail@plt+0x1894>
   12aec:	cmp	fp, #6
   12af0:	bne	12b20 <__assert_fail@plt+0x1850>
   12af4:	ldrb	r3, [r7, #8]
   12af8:	cmp	r3, #0
   12afc:	beq	12b20 <__assert_fail@plt+0x1850>
   12b00:	ldr	r3, [r4, #48]	; 0x30
   12b04:	cmp	r3, #0
   12b08:	ble	12b20 <__assert_fail@plt+0x1850>
   12b0c:	ldrd	r0, [r4, #64]	; 0x40
   12b10:	ldrd	r2, [r6, #16]
   12b14:	cmp	r1, r3
   12b18:	cmpeq	r0, r2
   12b1c:	bne	12be8 <__assert_fail@plt+0x1918>
   12b20:	bic	fp, fp, #2
   12b24:	uxth	fp, fp
   12b28:	cmp	fp, #4
   12b2c:	movne	fp, #0
   12b30:	moveq	fp, #1
   12b34:	mov	r3, #0
   12b38:	str	r3, [sp, #4]
   12b3c:	mov	r3, #3
   12b40:	str	r3, [sp]
   12b44:	mov	r3, r7
   12b48:	mov	r2, fp
   12b4c:	mov	r1, r4
   12b50:	mov	r0, r6
   12b54:	bl	121f4 <__assert_fail@plt+0xf24>
   12b58:	mov	r8, r0
   12b5c:	cmp	r0, #2
   12b60:	beq	12c28 <__assert_fail@plt+0x1958>
   12b64:	sub	r3, r8, #2
   12b68:	cmp	r3, #2
   12b6c:	bhi	12d30 <__assert_fail@plt+0x1a60>
   12b70:	cmp	r8, #4
   12b74:	beq	126ec <__assert_fail@plt+0x141c>
   12b78:	cmp	r8, #3
   12b7c:	cmpeq	r5, #2
   12b80:	moveq	r8, #1
   12b84:	movne	r8, #0
   12b88:	cmp	r8, #0
   12b8c:	movne	r5, #3
   12b90:	mov	r0, r6
   12b94:	bl	1558c <__assert_fail@plt+0x42bc>
   12b98:	subs	r4, r0, #0
   12b9c:	beq	126f4 <__assert_fail@plt+0x1424>
   12ba0:	ldrh	fp, [r4, #56]	; 0x38
   12ba4:	sub	r3, fp, #1
   12ba8:	cmp	r3, #12
   12bac:	ldrls	pc, [pc, r3, lsl #2]
   12bb0:	b	12cdc <__assert_fail@plt+0x1a0c>
   12bb4:	andeq	r2, r1, r4, ror #14
   12bb8:	andeq	r2, r1, r4, asr #24
   12bbc:	andeq	r2, r1, ip, ror #21
   12bc0:	andeq	r2, r1, ip, ror #21
   12bc4:	ldrdeq	r2, [r1], -ip
   12bc8:	andeq	r2, r1, ip, ror #21
   12bcc:	muleq	r1, r0, ip
   12bd0:	andeq	r2, r1, ip, ror #21
   12bd4:	ldrdeq	r2, [r1], -ip
   12bd8:	andeq	r2, r1, ip, ror #21
   12bdc:	andeq	r2, r1, ip, ror #21
   12be0:	andeq	r2, r1, ip, ror #21
   12be4:	andeq	r2, r1, ip, ror #21
   12be8:	mov	r0, r4
   12bec:	bl	11ef4 <__assert_fail@plt+0xc24>
   12bf0:	mov	r2, #5
   12bf4:	ldr	r1, [sp, #12]
   12bf8:	mov	r0, #0
   12bfc:	bl	11060 <dcgettext@plt>
   12c00:	mov	r5, r0
   12c04:	ldr	r1, [r4, #28]
   12c08:	mov	r0, #4
   12c0c:	bl	19060 <__assert_fail@plt+0x7d90>
   12c10:	mov	r3, r0
   12c14:	mov	r2, r5
   12c18:	mov	r1, #0
   12c1c:	mov	r0, r1
   12c20:	bl	110f0 <error@plt>
   12c24:	b	12c88 <__assert_fail@plt+0x19b8>
   12c28:	mov	r3, fp
   12c2c:	mov	r2, r7
   12c30:	mov	r1, r4
   12c34:	mov	r0, r6
   12c38:	bl	11fe0 <__assert_fail@plt+0xd10>
   12c3c:	mov	r8, r0
   12c40:	b	12b64 <__assert_fail@plt+0x1894>
   12c44:	mov	r2, #5
   12c48:	mov	r1, sl
   12c4c:	mov	r0, #0
   12c50:	bl	11060 <dcgettext@plt>
   12c54:	mov	r5, r0
   12c58:	ldr	r2, [r4, #28]
   12c5c:	mov	r1, #3
   12c60:	mov	r0, #0
   12c64:	bl	19184 <__assert_fail@plt+0x7eb4>
   12c68:	mov	r3, r0
   12c6c:	mov	r2, r5
   12c70:	mov	r1, #0
   12c74:	mov	r0, r1
   12c78:	bl	110f0 <error@plt>
   12c7c:	mov	r1, r4
   12c80:	mov	r0, r6
   12c84:	bl	121cc <__assert_fail@plt+0xefc>
   12c88:	mov	r5, #4
   12c8c:	b	12b90 <__assert_fail@plt+0x18c0>
   12c90:	ldr	r5, [r4, #32]
   12c94:	mov	r2, #5
   12c98:	mov	r1, r9
   12c9c:	mov	r0, #0
   12ca0:	bl	11060 <dcgettext@plt>
   12ca4:	mov	r8, r0
   12ca8:	ldr	r2, [r4, #28]
   12cac:	mov	r1, #3
   12cb0:	mov	r0, #0
   12cb4:	bl	19184 <__assert_fail@plt+0x7eb4>
   12cb8:	mov	r3, r0
   12cbc:	mov	r2, r8
   12cc0:	mov	r1, r5
   12cc4:	mov	r0, #0
   12cc8:	bl	110f0 <error@plt>
   12ccc:	mov	r1, r4
   12cd0:	mov	r0, r6
   12cd4:	bl	121cc <__assert_fail@plt+0xefc>
   12cd8:	b	12c88 <__assert_fail@plt+0x19b8>
   12cdc:	mov	r2, #5
   12ce0:	movw	r1, #47584	; 0xb9e0
   12ce4:	movt	r1, #1
   12ce8:	mov	r0, #0
   12cec:	bl	11060 <dcgettext@plt>
   12cf0:	mov	r5, r0
   12cf4:	ldrh	r6, [r4, #56]	; 0x38
   12cf8:	ldr	r2, [r4, #28]
   12cfc:	mov	r1, #3
   12d00:	mov	r0, #0
   12d04:	bl	19184 <__assert_fail@plt+0x7eb4>
   12d08:	movw	r3, #47640	; 0xba18
   12d0c:	movt	r3, #1
   12d10:	str	r3, [sp, #4]
   12d14:	str	r0, [sp]
   12d18:	mov	r3, r6
   12d1c:	mov	r2, r5
   12d20:	mov	r1, #0
   12d24:	mov	r0, r1
   12d28:	bl	110f0 <error@plt>
   12d2c:	bl	11294 <abort@plt>
   12d30:	movw	r3, #46820	; 0xb6e4
   12d34:	movt	r3, #1
   12d38:	movw	r2, #610	; 0x262
   12d3c:	movw	r1, #47664	; 0xba30
   12d40:	movt	r1, #1
   12d44:	movw	r0, #47680	; 0xba40
   12d48:	movt	r0, #1
   12d4c:	bl	112d0 <__assert_fail@plt>
   12d50:	ldr	r4, [r7]
   12d54:	mov	r2, #5
   12d58:	movw	r1, #47700	; 0xba54
   12d5c:	movt	r1, #1
   12d60:	mov	r0, #0
   12d64:	bl	11060 <dcgettext@plt>
   12d68:	mov	r2, r0
   12d6c:	mov	r1, r4
   12d70:	mov	r0, #0
   12d74:	bl	110f0 <error@plt>
   12d78:	mov	r5, #4
   12d7c:	b	12718 <__assert_fail@plt+0x1448>
   12d80:	mov	r5, #2
   12d84:	b	12718 <__assert_fail@plt+0x1448>
   12d88:	mov	r0, r8
   12d8c:	bl	13924 <__assert_fail@plt+0x2654>
   12d90:	ldrd	r0, [r6, #16]
   12d94:	ldrd	r2, [sp, #16]
   12d98:	cmp	r1, r3
   12d9c:	cmpeq	r0, r2
   12da0:	beq	12e68 <__assert_fail@plt+0x1b98>
   12da4:	mov	r2, #5
   12da8:	ldr	r1, [sp, #12]
   12dac:	mov	r0, #0
   12db0:	bl	11060 <dcgettext@plt>
   12db4:	mov	r5, r0
   12db8:	ldr	r1, [r4, #28]
   12dbc:	mov	r0, #4
   12dc0:	bl	19060 <__assert_fail@plt+0x7d90>
   12dc4:	mov	r3, r0
   12dc8:	mov	r2, r5
   12dcc:	mov	r1, #0
   12dd0:	mov	r0, r1
   12dd4:	bl	110f0 <error@plt>
   12dd8:	mov	r2, #5
   12ddc:	movw	r1, #47332	; 0xb8e4
   12de0:	movt	r1, #1
   12de4:	mov	r0, #0
   12de8:	bl	11060 <dcgettext@plt>
   12dec:	mov	r2, r0
   12df0:	mov	r1, #0
   12df4:	mov	r0, r1
   12df8:	bl	110f0 <error@plt>
   12dfc:	b	12aa0 <__assert_fail@plt+0x17d0>
   12e00:	ldr	fp, [r8]
   12e04:	ldr	r0, [sp, #8]
   12e08:	bl	112c4 <closedir@plt>
   12e0c:	str	fp, [r8]
   12e10:	cmp	fp, #0
   12e14:	bne	127e4 <__assert_fail@plt+0x1514>
   12e18:	ldr	r3, [r4, #48]	; 0x30
   12e1c:	cmp	r3, #0
   12e20:	bne	12e68 <__assert_fail@plt+0x1b98>
   12e24:	ldr	r8, [r4, #24]
   12e28:	mov	r0, r8
   12e2c:	bl	13310 <__assert_fail@plt+0x2040>
   12e30:	ldrb	r3, [r0]
   12e34:	cmp	r3, #46	; 0x2e
   12e38:	beq	12880 <__assert_fail@plt+0x15b0>
   12e3c:	ldr	ip, [r7, #12]
   12e40:	cmp	ip, #0
   12e44:	beq	12e5c <__assert_fail@plt+0x1b8c>
   12e48:	ldrd	r0, [r4, #160]	; 0xa0
   12e4c:	ldrd	r2, [ip]
   12e50:	cmp	r1, r3
   12e54:	cmpeq	r0, r2
   12e58:	beq	12924 <__assert_fail@plt+0x1654>
   12e5c:	ldrb	r3, [r7, #16]
   12e60:	cmp	r3, #0
   12e64:	bne	12a14 <__assert_fail@plt+0x1744>
   12e68:	add	r3, sp, #16
   12e6c:	str	r3, [sp, #4]
   12e70:	mov	r3, #2
   12e74:	str	r3, [sp]
   12e78:	mov	r3, r7
   12e7c:	mov	r2, #1
   12e80:	mov	r1, r4
   12e84:	mov	r0, r6
   12e88:	bl	121f4 <__assert_fail@plt+0xf24>
   12e8c:	mov	r8, r0
   12e90:	cmp	r0, #2
   12e94:	beq	12ab0 <__assert_fail@plt+0x17e0>
   12e98:	mov	r0, r4
   12e9c:	bl	11ef4 <__assert_fail@plt+0xc24>
   12ea0:	mov	r1, r4
   12ea4:	mov	r0, r6
   12ea8:	bl	121cc <__assert_fail@plt+0xefc>
   12eac:	b	12b64 <__assert_fail@plt+0x1894>
   12eb0:	str	r4, [sp, #-8]!
   12eb4:	str	lr, [sp, #4]
   12eb8:	mov	r0, #1
   12ebc:	bl	113d0 <__assert_fail@plt+0x100>
   12ec0:	ldr	r4, [sp]
   12ec4:	add	sp, sp, #4
   12ec8:	pop	{pc}		; (ldr pc, [sp], #4)
   12ecc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12ed0:	strd	r6, [sp, #8]
   12ed4:	strd	r8, [sp, #16]
   12ed8:	strd	sl, [sp, #24]
   12edc:	str	lr, [sp, #32]
   12ee0:	sub	sp, sp, #12
   12ee4:	str	r0, [sp]
   12ee8:	mov	r5, r1
   12eec:	mov	r6, r2
   12ef0:	str	r2, [sp, #4]
   12ef4:	mov	r9, r3
   12ef8:	bl	11168 <strlen@plt>
   12efc:	ldr	r4, [r5]
   12f00:	cmp	r4, #0
   12f04:	beq	12fc0 <__assert_fail@plt+0x1cf0>
   12f08:	mov	r8, r0
   12f0c:	mov	fp, #0
   12f10:	mvn	sl, #0
   12f14:	mov	r7, fp
   12f18:	b	12f38 <__assert_fail@plt+0x1c68>
   12f1c:	mov	sl, r7
   12f20:	b	12fa0 <__assert_fail@plt+0x1cd0>
   12f24:	add	r7, r7, #1
   12f28:	ldr	r4, [r5, #4]!
   12f2c:	add	r6, r6, r9
   12f30:	cmp	r4, #0
   12f34:	beq	12f98 <__assert_fail@plt+0x1cc8>
   12f38:	mov	r2, r8
   12f3c:	ldr	r1, [sp]
   12f40:	mov	r0, r4
   12f44:	bl	11288 <strncmp@plt>
   12f48:	cmp	r0, #0
   12f4c:	bne	12f24 <__assert_fail@plt+0x1c54>
   12f50:	mov	r0, r4
   12f54:	bl	11168 <strlen@plt>
   12f58:	cmp	r0, r8
   12f5c:	beq	12f1c <__assert_fail@plt+0x1c4c>
   12f60:	cmn	sl, #1
   12f64:	moveq	sl, r7
   12f68:	beq	12f24 <__assert_fail@plt+0x1c54>
   12f6c:	ldr	r3, [sp, #4]
   12f70:	cmp	r3, #0
   12f74:	moveq	fp, #1
   12f78:	beq	12f24 <__assert_fail@plt+0x1c54>
   12f7c:	mov	r2, r9
   12f80:	mov	r1, r6
   12f84:	mla	r0, r9, sl, r3
   12f88:	bl	11048 <memcmp@plt>
   12f8c:	cmp	r0, #0
   12f90:	movne	fp, #1
   12f94:	b	12f24 <__assert_fail@plt+0x1c54>
   12f98:	cmp	fp, #0
   12f9c:	mvnne	sl, #1
   12fa0:	mov	r0, sl
   12fa4:	add	sp, sp, #12
   12fa8:	ldrd	r4, [sp]
   12fac:	ldrd	r6, [sp, #8]
   12fb0:	ldrd	r8, [sp, #16]
   12fb4:	ldrd	sl, [sp, #24]
   12fb8:	add	sp, sp, #32
   12fbc:	pop	{pc}		; (ldr pc, [sp], #4)
   12fc0:	mvn	sl, #0
   12fc4:	b	12fa0 <__assert_fail@plt+0x1cd0>
   12fc8:	strd	r4, [sp, #-16]!
   12fcc:	str	r6, [sp, #8]
   12fd0:	str	lr, [sp, #12]
   12fd4:	mov	r6, r0
   12fd8:	ldr	r0, [r1]
   12fdc:	cmp	r0, #0
   12fe0:	beq	13028 <__assert_fail@plt+0x1d58>
   12fe4:	mov	r4, r1
   12fe8:	mov	r5, #0
   12fec:	mov	r1, r6
   12ff0:	bl	10fdc <strcmp@plt>
   12ff4:	cmp	r0, #0
   12ff8:	beq	13014 <__assert_fail@plt+0x1d44>
   12ffc:	add	r5, r5, #1
   13000:	ldr	r0, [r4, #4]!
   13004:	cmp	r0, #0
   13008:	bne	12fec <__assert_fail@plt+0x1d1c>
   1300c:	mvn	r0, #0
   13010:	b	13018 <__assert_fail@plt+0x1d48>
   13014:	mov	r0, r5
   13018:	ldrd	r4, [sp]
   1301c:	ldr	r6, [sp, #8]
   13020:	add	sp, sp, #12
   13024:	pop	{pc}		; (ldr pc, [sp], #4)
   13028:	mvn	r0, #0
   1302c:	b	13018 <__assert_fail@plt+0x1d48>
   13030:	strd	r4, [sp, #-16]!
   13034:	str	r6, [sp, #8]
   13038:	str	lr, [sp, #12]
   1303c:	sub	sp, sp, #8
   13040:	mov	r6, r0
   13044:	mov	r5, r1
   13048:	cmn	r2, #1
   1304c:	mov	r2, #5
   13050:	movweq	r1, #47736	; 0xba78
   13054:	movteq	r1, #1
   13058:	movwne	r1, #47764	; 0xba94
   1305c:	movtne	r1, #1
   13060:	mov	r0, #0
   13064:	bl	11060 <dcgettext@plt>
   13068:	mov	r4, r0
   1306c:	mov	r2, r5
   13070:	mov	r1, #8
   13074:	mov	r0, #0
   13078:	bl	18fd4 <__assert_fail@plt+0x7d04>
   1307c:	mov	r5, r0
   13080:	mov	r1, r6
   13084:	mov	r0, #1
   13088:	bl	19334 <__assert_fail@plt+0x8064>
   1308c:	str	r0, [sp]
   13090:	mov	r3, r5
   13094:	mov	r2, r4
   13098:	mov	r1, #0
   1309c:	mov	r0, r1
   130a0:	bl	110f0 <error@plt>
   130a4:	add	sp, sp, #8
   130a8:	ldrd	r4, [sp]
   130ac:	ldr	r6, [sp, #8]
   130b0:	add	sp, sp, #12
   130b4:	pop	{pc}		; (ldr pc, [sp], #4)
   130b8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   130bc:	strd	r6, [sp, #8]
   130c0:	strd	r8, [sp, #16]
   130c4:	strd	sl, [sp, #24]
   130c8:	str	lr, [sp, #32]
   130cc:	sub	sp, sp, #12
   130d0:	mov	r7, r0
   130d4:	mov	r4, r1
   130d8:	mov	r8, r2
   130dc:	mov	r2, #5
   130e0:	movw	r1, #47796	; 0xbab4
   130e4:	movt	r1, #1
   130e8:	mov	r0, #0
   130ec:	bl	11060 <dcgettext@plt>
   130f0:	movw	r3, #53640	; 0xd188
   130f4:	movt	r3, #2
   130f8:	ldr	r1, [r3]
   130fc:	bl	10fb8 <fputs_unlocked@plt>
   13100:	ldr	r5, [r7]
   13104:	cmp	r5, #0
   13108:	beq	131b4 <__assert_fail@plt+0x1ee4>
   1310c:	mov	r3, #0
   13110:	str	r3, [sp]
   13114:	mov	r6, r3
   13118:	movw	sl, #53640	; 0xd188
   1311c:	movt	sl, #2
   13120:	movw	fp, #47820	; 0xbacc
   13124:	movt	fp, #1
   13128:	movw	r3, #47828	; 0xbad4
   1312c:	movt	r3, #1
   13130:	str	r3, [sp, #4]
   13134:	b	13170 <__assert_fail@plt+0x1ea0>
   13138:	ldr	r9, [sl]
   1313c:	mov	r0, r5
   13140:	bl	19350 <__assert_fail@plt+0x8080>
   13144:	mov	r3, r0
   13148:	mov	r2, fp
   1314c:	mov	r1, #1
   13150:	mov	r0, r9
   13154:	bl	111bc <__fprintf_chk@plt>
   13158:	str	r4, [sp]
   1315c:	add	r6, r6, #1
   13160:	ldr	r5, [r7, #4]!
   13164:	add	r4, r4, r8
   13168:	cmp	r5, #0
   1316c:	beq	131b4 <__assert_fail@plt+0x1ee4>
   13170:	cmp	r6, #0
   13174:	beq	13138 <__assert_fail@plt+0x1e68>
   13178:	mov	r2, r8
   1317c:	mov	r1, r4
   13180:	ldr	r0, [sp]
   13184:	bl	11048 <memcmp@plt>
   13188:	cmp	r0, #0
   1318c:	bne	13138 <__assert_fail@plt+0x1e68>
   13190:	ldr	r9, [sl]
   13194:	mov	r0, r5
   13198:	bl	19350 <__assert_fail@plt+0x8080>
   1319c:	mov	r3, r0
   131a0:	ldr	r2, [sp, #4]
   131a4:	mov	r1, #1
   131a8:	mov	r0, r9
   131ac:	bl	111bc <__fprintf_chk@plt>
   131b0:	b	1315c <__assert_fail@plt+0x1e8c>
   131b4:	movw	r3, #53640	; 0xd188
   131b8:	movt	r3, #2
   131bc:	ldr	r0, [r3]
   131c0:	ldr	r3, [r0, #20]
   131c4:	ldr	r2, [r0, #24]
   131c8:	cmp	r3, r2
   131cc:	addcc	r2, r3, #1
   131d0:	strcc	r2, [r0, #20]
   131d4:	movcc	r2, #10
   131d8:	strbcc	r2, [r3]
   131dc:	bcs	131fc <__assert_fail@plt+0x1f2c>
   131e0:	add	sp, sp, #12
   131e4:	ldrd	r4, [sp]
   131e8:	ldrd	r6, [sp, #8]
   131ec:	ldrd	r8, [sp, #16]
   131f0:	ldrd	sl, [sp, #24]
   131f4:	add	sp, sp, #32
   131f8:	pop	{pc}		; (ldr pc, [sp], #4)
   131fc:	mov	r1, #10
   13200:	bl	111f8 <__overflow@plt>
   13204:	b	131e0 <__assert_fail@plt+0x1f10>
   13208:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1320c:	strd	r6, [sp, #8]
   13210:	str	r8, [sp, #16]
   13214:	str	lr, [sp, #20]
   13218:	mov	r7, r0
   1321c:	mov	r5, r1
   13220:	mov	r4, r2
   13224:	mov	r6, r3
   13228:	ldrb	r3, [sp, #32]
   1322c:	cmp	r3, #0
   13230:	beq	13264 <__assert_fail@plt+0x1f94>
   13234:	ldr	r3, [sp, #24]
   13238:	mov	r2, r6
   1323c:	mov	r1, r4
   13240:	mov	r0, r5
   13244:	bl	12ecc <__assert_fail@plt+0x1bfc>
   13248:	cmp	r0, #0
   1324c:	blt	13274 <__assert_fail@plt+0x1fa4>
   13250:	ldrd	r4, [sp]
   13254:	ldrd	r6, [sp, #8]
   13258:	ldr	r8, [sp, #16]
   1325c:	add	sp, sp, #20
   13260:	pop	{pc}		; (ldr pc, [sp], #4)
   13264:	mov	r1, r2
   13268:	mov	r0, r5
   1326c:	bl	12fc8 <__assert_fail@plt+0x1cf8>
   13270:	b	13248 <__assert_fail@plt+0x1f78>
   13274:	mov	r2, r0
   13278:	mov	r1, r5
   1327c:	mov	r0, r7
   13280:	bl	13030 <__assert_fail@plt+0x1d60>
   13284:	ldr	r2, [sp, #24]
   13288:	mov	r1, r6
   1328c:	mov	r0, r4
   13290:	bl	130b8 <__assert_fail@plt+0x1de8>
   13294:	ldr	r3, [sp, #28]
   13298:	blx	r3
   1329c:	mvn	r0, #0
   132a0:	b	13250 <__assert_fail@plt+0x1f80>
   132a4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   132a8:	strd	r6, [sp, #8]
   132ac:	str	r8, [sp, #16]
   132b0:	str	lr, [sp, #20]
   132b4:	ldr	r7, [r1]
   132b8:	cmp	r7, #0
   132bc:	beq	132f8 <__assert_fail@plt+0x2028>
   132c0:	mov	r6, r3
   132c4:	mov	r8, r0
   132c8:	mov	r4, r2
   132cc:	mov	r5, r1
   132d0:	mov	r2, r6
   132d4:	mov	r1, r4
   132d8:	mov	r0, r8
   132dc:	bl	11048 <memcmp@plt>
   132e0:	cmp	r0, #0
   132e4:	beq	132f8 <__assert_fail@plt+0x2028>
   132e8:	ldr	r7, [r5, #4]!
   132ec:	add	r4, r4, r6
   132f0:	cmp	r7, #0
   132f4:	bne	132d0 <__assert_fail@plt+0x2000>
   132f8:	mov	r0, r7
   132fc:	ldrd	r4, [sp]
   13300:	ldrd	r6, [sp, #8]
   13304:	ldr	r8, [sp, #16]
   13308:	add	sp, sp, #20
   1330c:	pop	{pc}		; (ldr pc, [sp], #4)
   13310:	ldrb	r3, [r0]
   13314:	cmp	r3, #47	; 0x2f
   13318:	bne	13328 <__assert_fail@plt+0x2058>
   1331c:	ldrb	r3, [r0, #1]!
   13320:	cmp	r3, #47	; 0x2f
   13324:	beq	1331c <__assert_fail@plt+0x204c>
   13328:	ldrb	r2, [r0]
   1332c:	cmp	r2, #0
   13330:	bxeq	lr
   13334:	push	{lr}		; (str lr, [sp, #-4]!)
   13338:	mov	r1, r0
   1333c:	mov	r3, #0
   13340:	mov	lr, #1
   13344:	mov	ip, r3
   13348:	b	13364 <__assert_fail@plt+0x2094>
   1334c:	cmp	r3, #0
   13350:	movne	r0, r1
   13354:	movne	r3, ip
   13358:	ldrb	r2, [r1, #1]!
   1335c:	cmp	r2, #0
   13360:	beq	13374 <__assert_fail@plt+0x20a4>
   13364:	cmp	r2, #47	; 0x2f
   13368:	moveq	r3, lr
   1336c:	bne	1334c <__assert_fail@plt+0x207c>
   13370:	b	13358 <__assert_fail@plt+0x2088>
   13374:	pop	{pc}		; (ldr pc, [sp], #4)
   13378:	str	r4, [sp, #-8]!
   1337c:	str	lr, [sp, #4]
   13380:	mov	r4, r0
   13384:	bl	11168 <strlen@plt>
   13388:	cmp	r0, #1
   1338c:	bls	133ac <__assert_fail@plt+0x20dc>
   13390:	add	r3, r4, r0
   13394:	ldrb	r3, [r3, #-1]
   13398:	cmp	r3, #47	; 0x2f
   1339c:	subeq	r0, r0, #2
   133a0:	addeq	r3, r4, r0
   133a4:	rsbeq	r1, r4, #1
   133a8:	beq	133b8 <__assert_fail@plt+0x20e8>
   133ac:	ldr	r4, [sp]
   133b0:	add	sp, sp, #4
   133b4:	pop	{pc}		; (ldr pc, [sp], #4)
   133b8:	add	r0, r1, r3
   133bc:	cmp	r3, r4
   133c0:	beq	133ac <__assert_fail@plt+0x20dc>
   133c4:	ldrb	r2, [r3], #-1
   133c8:	cmp	r2, #47	; 0x2f
   133cc:	bne	133ac <__assert_fail@plt+0x20dc>
   133d0:	b	133b8 <__assert_fail@plt+0x20e8>
   133d4:	movw	r3, #53680	; 0xd1b0
   133d8:	movt	r3, #2
   133dc:	str	r0, [r3]
   133e0:	bx	lr
   133e4:	strd	r4, [sp, #-16]!
   133e8:	str	r6, [sp, #8]
   133ec:	str	lr, [sp, #12]
   133f0:	sub	sp, sp, #8
   133f4:	movw	r3, #53648	; 0xd190
   133f8:	movt	r3, #2
   133fc:	ldr	r4, [r3]
   13400:	mov	r0, r4
   13404:	bl	138e0 <__assert_fail@plt+0x2610>
   13408:	cmp	r0, #0
   1340c:	bne	13494 <__assert_fail@plt+0x21c4>
   13410:	movw	r3, #53648	; 0xd190
   13414:	movt	r3, #2
   13418:	ldr	r0, [r3]
   1341c:	bl	1a134 <__assert_fail@plt+0x8e64>
   13420:	cmp	r0, #0
   13424:	beq	134e0 <__assert_fail@plt+0x2210>
   13428:	mov	r2, #5
   1342c:	movw	r1, #47836	; 0xbadc
   13430:	movt	r1, #1
   13434:	mov	r0, #0
   13438:	bl	11060 <dcgettext@plt>
   1343c:	mov	r5, r0
   13440:	movw	r3, #53680	; 0xd1b0
   13444:	movt	r3, #2
   13448:	ldr	r4, [r3]
   1344c:	cmp	r4, #0
   13450:	beq	134f8 <__assert_fail@plt+0x2228>
   13454:	bl	11180 <__errno_location@plt>
   13458:	ldr	r6, [r0]
   1345c:	mov	r0, r4
   13460:	bl	1914c <__assert_fail@plt+0x7e7c>
   13464:	str	r5, [sp]
   13468:	mov	r3, r0
   1346c:	movw	r2, #47856	; 0xbaf0
   13470:	movt	r2, #1
   13474:	mov	r1, r6
   13478:	mov	r0, #0
   1347c:	bl	110f0 <error@plt>
   13480:	bl	13538 <__assert_fail@plt+0x2268>
   13484:	movw	r3, #53556	; 0xd134
   13488:	movt	r3, #2
   1348c:	ldr	r0, [r3]
   13490:	bl	11024 <_exit@plt>
   13494:	mov	r3, #1
   13498:	str	r3, [sp]
   1349c:	mov	r2, #0
   134a0:	mov	r3, #0
   134a4:	mov	r0, r4
   134a8:	bl	13984 <__assert_fail@plt+0x26b4>
   134ac:	cmp	r0, #0
   134b0:	bne	13410 <__assert_fail@plt+0x2140>
   134b4:	movw	r4, #53648	; 0xd190
   134b8:	movt	r4, #2
   134bc:	ldr	r0, [r4]
   134c0:	bl	13648 <__assert_fail@plt+0x2378>
   134c4:	mov	r5, r0
   134c8:	ldr	r0, [r4]
   134cc:	bl	1a134 <__assert_fail@plt+0x8e64>
   134d0:	cmp	r0, #0
   134d4:	bne	13428 <__assert_fail@plt+0x2158>
   134d8:	cmp	r5, #0
   134dc:	bne	13428 <__assert_fail@plt+0x2158>
   134e0:	bl	13538 <__assert_fail@plt+0x2268>
   134e4:	add	sp, sp, #8
   134e8:	ldrd	r4, [sp]
   134ec:	ldr	r6, [sp, #8]
   134f0:	add	sp, sp, #12
   134f4:	pop	{pc}		; (ldr pc, [sp], #4)
   134f8:	bl	11180 <__errno_location@plt>
   134fc:	mov	r3, r5
   13500:	movw	r2, #47860	; 0xbaf4
   13504:	movt	r2, #1
   13508:	ldr	r1, [r0]
   1350c:	mov	r0, #0
   13510:	bl	110f0 <error@plt>
   13514:	b	13480 <__assert_fail@plt+0x21b0>
   13518:	movw	r3, #53684	; 0xd1b4
   1351c:	movt	r3, #2
   13520:	str	r0, [r3]
   13524:	bx	lr
   13528:	movw	r3, #53684	; 0xd1b4
   1352c:	movt	r3, #2
   13530:	strb	r0, [r3, #4]
   13534:	bx	lr
   13538:	strd	r4, [sp, #-16]!
   1353c:	str	r6, [sp, #8]
   13540:	str	lr, [sp, #12]
   13544:	sub	sp, sp, #8
   13548:	movw	r3, #53652	; 0xd194
   1354c:	movt	r3, #2
   13550:	ldr	r0, [r3]
   13554:	bl	1a134 <__assert_fail@plt+0x8e64>
   13558:	cmp	r0, #0
   1355c:	beq	13584 <__assert_fail@plt+0x22b4>
   13560:	movw	r3, #53684	; 0xd1b4
   13564:	movt	r3, #2
   13568:	ldrb	r3, [r3, #4]
   1356c:	cmp	r3, #0
   13570:	beq	135b0 <__assert_fail@plt+0x22e0>
   13574:	bl	11180 <__errno_location@plt>
   13578:	ldr	r3, [r0]
   1357c:	cmp	r3, #32
   13580:	bne	135b0 <__assert_fail@plt+0x22e0>
   13584:	movw	r3, #53640	; 0xd188
   13588:	movt	r3, #2
   1358c:	ldr	r0, [r3]
   13590:	bl	1a134 <__assert_fail@plt+0x8e64>
   13594:	cmp	r0, #0
   13598:	bne	13638 <__assert_fail@plt+0x2368>
   1359c:	add	sp, sp, #8
   135a0:	ldrd	r4, [sp]
   135a4:	ldr	r6, [sp, #8]
   135a8:	add	sp, sp, #12
   135ac:	pop	{pc}		; (ldr pc, [sp], #4)
   135b0:	mov	r2, #5
   135b4:	movw	r1, #47864	; 0xbaf8
   135b8:	movt	r1, #1
   135bc:	mov	r0, #0
   135c0:	bl	11060 <dcgettext@plt>
   135c4:	mov	r4, r0
   135c8:	movw	r3, #53684	; 0xd1b4
   135cc:	movt	r3, #2
   135d0:	ldr	r5, [r3]
   135d4:	cmp	r5, #0
   135d8:	beq	13618 <__assert_fail@plt+0x2348>
   135dc:	bl	11180 <__errno_location@plt>
   135e0:	ldr	r6, [r0]
   135e4:	mov	r0, r5
   135e8:	bl	1914c <__assert_fail@plt+0x7e7c>
   135ec:	str	r4, [sp]
   135f0:	mov	r3, r0
   135f4:	movw	r2, #47856	; 0xbaf0
   135f8:	movt	r2, #1
   135fc:	mov	r1, r6
   13600:	mov	r0, #0
   13604:	bl	110f0 <error@plt>
   13608:	movw	r3, #53556	; 0xd134
   1360c:	movt	r3, #2
   13610:	ldr	r0, [r3]
   13614:	bl	11024 <_exit@plt>
   13618:	bl	11180 <__errno_location@plt>
   1361c:	mov	r3, r4
   13620:	movw	r2, #47860	; 0xbaf4
   13624:	movt	r2, #1
   13628:	ldr	r1, [r0]
   1362c:	mov	r0, #0
   13630:	bl	110f0 <error@plt>
   13634:	b	13608 <__assert_fail@plt+0x2338>
   13638:	movw	r3, #53556	; 0xd134
   1363c:	movt	r3, #2
   13640:	ldr	r0, [r3]
   13644:	bl	11024 <_exit@plt>
   13648:	str	r4, [sp, #-8]!
   1364c:	str	lr, [sp, #4]
   13650:	sub	sp, sp, #8
   13654:	subs	r4, r0, #0
   13658:	beq	1366c <__assert_fail@plt+0x239c>
   1365c:	mov	r0, r4
   13660:	bl	11120 <__freading@plt>
   13664:	cmp	r0, #0
   13668:	bne	13684 <__assert_fail@plt+0x23b4>
   1366c:	mov	r0, r4
   13670:	bl	10fe8 <fflush@plt>
   13674:	add	sp, sp, #8
   13678:	ldr	r4, [sp]
   1367c:	add	sp, sp, #4
   13680:	pop	{pc}		; (ldr pc, [sp], #4)
   13684:	ldr	r3, [r4]
   13688:	tst	r3, #256	; 0x100
   1368c:	bne	1369c <__assert_fail@plt+0x23cc>
   13690:	mov	r0, r4
   13694:	bl	10fe8 <fflush@plt>
   13698:	b	13674 <__assert_fail@plt+0x23a4>
   1369c:	mov	r3, #1
   136a0:	str	r3, [sp]
   136a4:	mov	r2, #0
   136a8:	mov	r3, #0
   136ac:	mov	r0, r4
   136b0:	bl	13984 <__assert_fail@plt+0x26b4>
   136b4:	b	13690 <__assert_fail@plt+0x23c0>
   136b8:	str	r4, [sp, #-8]!
   136bc:	str	lr, [sp, #4]
   136c0:	ldr	r3, [r0, #16]
   136c4:	and	r3, r3, #61440	; 0xf000
   136c8:	cmp	r3, #32768	; 0x8000
   136cc:	beq	13724 <__assert_fail@plt+0x2454>
   136d0:	cmp	r3, #16384	; 0x4000
   136d4:	beq	1374c <__assert_fail@plt+0x247c>
   136d8:	cmp	r3, #40960	; 0xa000
   136dc:	beq	13764 <__assert_fail@plt+0x2494>
   136e0:	cmp	r3, #24576	; 0x6000
   136e4:	beq	1377c <__assert_fail@plt+0x24ac>
   136e8:	cmp	r3, #8192	; 0x2000
   136ec:	beq	13794 <__assert_fail@plt+0x24c4>
   136f0:	cmp	r3, #4096	; 0x1000
   136f4:	beq	137ac <__assert_fail@plt+0x24dc>
   136f8:	cmp	r3, #49152	; 0xc000
   136fc:	mov	r2, #5
   13700:	movweq	r1, #47992	; 0xbb78
   13704:	movteq	r1, #1
   13708:	movwne	r1, #48000	; 0xbb80
   1370c:	movtne	r1, #1
   13710:	mov	r0, #0
   13714:	bl	11060 <dcgettext@plt>
   13718:	ldr	r4, [sp]
   1371c:	add	sp, sp, #4
   13720:	pop	{pc}		; (ldr pc, [sp], #4)
   13724:	ldrd	r2, [r0, #48]	; 0x30
   13728:	orrs	r3, r2, r3
   1372c:	mov	r2, #5
   13730:	movweq	r1, #47876	; 0xbb04
   13734:	movteq	r1, #1
   13738:	movwne	r1, #47896	; 0xbb18
   1373c:	movtne	r1, #1
   13740:	mov	r0, #0
   13744:	bl	11060 <dcgettext@plt>
   13748:	b	13718 <__assert_fail@plt+0x2448>
   1374c:	mov	r2, #5
   13750:	movw	r1, #47912	; 0xbb28
   13754:	movt	r1, #1
   13758:	mov	r0, #0
   1375c:	bl	11060 <dcgettext@plt>
   13760:	b	13718 <__assert_fail@plt+0x2448>
   13764:	mov	r2, #5
   13768:	movw	r1, #47924	; 0xbb34
   1376c:	movt	r1, #1
   13770:	mov	r0, #0
   13774:	bl	11060 <dcgettext@plt>
   13778:	b	13718 <__assert_fail@plt+0x2448>
   1377c:	mov	r2, #5
   13780:	movw	r1, #47940	; 0xbb44
   13784:	movt	r1, #1
   13788:	mov	r0, #0
   1378c:	bl	11060 <dcgettext@plt>
   13790:	b	13718 <__assert_fail@plt+0x2448>
   13794:	mov	r2, #5
   13798:	movw	r1, #47960	; 0xbb58
   1379c:	movt	r1, #1
   137a0:	mov	r0, #0
   137a4:	bl	11060 <dcgettext@plt>
   137a8:	b	13718 <__assert_fail@plt+0x2448>
   137ac:	mov	r2, #5
   137b0:	movw	r1, #47984	; 0xbb70
   137b4:	movt	r1, #1
   137b8:	mov	r0, #0
   137bc:	bl	11060 <dcgettext@plt>
   137c0:	b	13718 <__assert_fail@plt+0x2448>
   137c4:	str	r4, [sp, #-8]!
   137c8:	str	lr, [sp, #4]
   137cc:	bl	137e8 <__assert_fail@plt+0x2518>
   137d0:	cmp	r0, #0
   137d4:	beq	137e4 <__assert_fail@plt+0x2514>
   137d8:	ldr	r4, [sp]
   137dc:	add	sp, sp, #4
   137e0:	pop	{pc}		; (ldr pc, [sp], #4)
   137e4:	bl	19ecc <__assert_fail@plt+0x8bfc>
   137e8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   137ec:	strd	r6, [sp, #8]
   137f0:	strd	r8, [sp, #16]
   137f4:	strd	sl, [sp, #24]
   137f8:	str	lr, [sp, #32]
   137fc:	sub	sp, sp, #4
   13800:	mov	r6, r0
   13804:	mov	r5, r1
   13808:	mov	r9, r2
   1380c:	bl	13310 <__assert_fail@plt+0x2040>
   13810:	mov	r4, r0
   13814:	bl	13378 <__assert_fail@plt+0x20a8>
   13818:	mov	r8, r0
   1381c:	sub	r4, r4, r6
   13820:	add	r4, r4, r0
   13824:	mov	r0, r5
   13828:	bl	11168 <strlen@plt>
   1382c:	mov	r7, r0
   13830:	cmp	r8, #0
   13834:	beq	13860 <__assert_fail@plt+0x2590>
   13838:	add	r3, r6, r4
   1383c:	ldrb	r3, [r3, #-1]
   13840:	cmp	r3, #47	; 0x2f
   13844:	moveq	r8, #0
   13848:	beq	13870 <__assert_fail@plt+0x25a0>
   1384c:	ldrb	r3, [r5]
   13850:	cmp	r3, #47	; 0x2f
   13854:	moveq	r8, #0
   13858:	movne	r8, #47	; 0x2f
   1385c:	b	13870 <__assert_fail@plt+0x25a0>
   13860:	ldrb	r3, [r5]
   13864:	cmp	r3, #47	; 0x2f
   13868:	movne	r8, #0
   1386c:	moveq	r8, #46	; 0x2e
   13870:	adds	sl, r8, #0
   13874:	movne	sl, #1
   13878:	add	r0, r7, #1
   1387c:	add	r0, r0, r4
   13880:	add	r0, r0, sl
   13884:	bl	1a09c <__assert_fail@plt+0x8dcc>
   13888:	subs	fp, r0, #0
   1388c:	beq	138c0 <__assert_fail@plt+0x25f0>
   13890:	mov	r2, r4
   13894:	mov	r1, r6
   13898:	mov	r0, fp
   1389c:	bl	11138 <mempcpy@plt>
   138a0:	strb	r8, [r0], sl
   138a4:	cmp	r9, #0
   138a8:	strne	r0, [r9]
   138ac:	mov	r2, r7
   138b0:	mov	r1, r5
   138b4:	bl	11138 <mempcpy@plt>
   138b8:	mov	r3, #0
   138bc:	strb	r3, [r0]
   138c0:	mov	r0, fp
   138c4:	add	sp, sp, #4
   138c8:	ldrd	r4, [sp]
   138cc:	ldrd	r6, [sp, #8]
   138d0:	ldrd	r8, [sp, #16]
   138d4:	ldrd	sl, [sp, #24]
   138d8:	add	sp, sp, #32
   138dc:	pop	{pc}		; (ldr pc, [sp], #4)
   138e0:	ldr	r2, [r0, #20]
   138e4:	ldr	r3, [r0, #16]
   138e8:	cmp	r2, r3
   138ec:	bhi	1391c <__assert_fail@plt+0x264c>
   138f0:	ldr	r3, [r0, #8]
   138f4:	ldr	r2, [r0, #4]
   138f8:	sub	r3, r3, r2
   138fc:	ldr	r2, [r0]
   13900:	ands	r2, r2, #256	; 0x100
   13904:	beq	13914 <__assert_fail@plt+0x2644>
   13908:	ldr	r2, [r0, #44]	; 0x2c
   1390c:	ldr	r0, [r0, #36]	; 0x24
   13910:	sub	r2, r2, r0
   13914:	add	r0, r3, r2
   13918:	bx	lr
   1391c:	mov	r0, #0
   13920:	bx	lr
   13924:	strd	r4, [sp, #-12]!
   13928:	str	lr, [sp, #8]
   1392c:	sub	sp, sp, #12
   13930:	mov	r5, r0
   13934:	bl	11180 <__errno_location@plt>
   13938:	mov	r4, r0
   1393c:	ldr	r3, [r0]
   13940:	str	r3, [sp]
   13944:	str	r3, [sp, #4]
   13948:	mov	r3, #0
   1394c:	str	r3, [r0]
   13950:	mov	r0, r5
   13954:	bl	1100c <free@plt>
   13958:	ldr	r3, [r4]
   1395c:	clz	r3, r3
   13960:	lsr	r3, r3, #5
   13964:	add	r2, sp, #8
   13968:	add	r3, r2, r3, lsl #2
   1396c:	ldr	r3, [r3, #-8]
   13970:	str	r3, [r4]
   13974:	add	sp, sp, #12
   13978:	ldrd	r4, [sp]
   1397c:	add	sp, sp, #8
   13980:	pop	{pc}		; (ldr pc, [sp], #4)
   13984:	str	r4, [sp, #-16]!
   13988:	strd	r6, [sp, #4]
   1398c:	str	lr, [sp, #12]
   13990:	sub	sp, sp, #8
   13994:	mov	r4, r0
   13998:	mov	r6, r2
   1399c:	mov	r7, r3
   139a0:	ldr	r2, [r0, #8]
   139a4:	ldr	r3, [r0, #4]
   139a8:	cmp	r2, r3
   139ac:	beq	139dc <__assert_fail@plt+0x270c>
   139b0:	ldr	r3, [sp, #24]
   139b4:	str	r3, [sp]
   139b8:	mov	r2, r6
   139bc:	mov	r3, r7
   139c0:	mov	r0, r4
   139c4:	bl	111d4 <fseeko64@plt>
   139c8:	add	sp, sp, #8
   139cc:	ldr	r4, [sp]
   139d0:	ldrd	r6, [sp, #4]
   139d4:	add	sp, sp, #12
   139d8:	pop	{pc}		; (ldr pc, [sp], #4)
   139dc:	ldr	r2, [r0, #20]
   139e0:	ldr	r3, [r0, #16]
   139e4:	cmp	r2, r3
   139e8:	bne	139b0 <__assert_fail@plt+0x26e0>
   139ec:	ldr	r3, [r0, #36]	; 0x24
   139f0:	cmp	r3, #0
   139f4:	bne	139b0 <__assert_fail@plt+0x26e0>
   139f8:	bl	111b0 <fileno@plt>
   139fc:	ldr	r3, [sp, #24]
   13a00:	str	r3, [sp]
   13a04:	mov	r2, r6
   13a08:	mov	r3, r7
   13a0c:	bl	110c0 <lseek64@plt>
   13a10:	mvn	r2, #0
   13a14:	mvn	r3, #0
   13a18:	cmp	r1, r3
   13a1c:	cmpeq	r0, r2
   13a20:	beq	13a3c <__assert_fail@plt+0x276c>
   13a24:	ldr	r3, [r4]
   13a28:	bic	r3, r3, #16
   13a2c:	str	r3, [r4]
   13a30:	strd	r0, [r4, #80]	; 0x50
   13a34:	mov	r0, #0
   13a38:	b	139c8 <__assert_fail@plt+0x26f8>
   13a3c:	mvn	r0, #0
   13a40:	b	139c8 <__assert_fail@plt+0x26f8>
   13a44:	strd	r4, [sp, #-8]!
   13a48:	ldrd	r4, [r0, #8]
   13a4c:	ldrd	r2, [r1, #8]
   13a50:	cmp	r5, r3
   13a54:	cmpeq	r4, r2
   13a58:	movne	r0, #0
   13a5c:	beq	13a6c <__assert_fail@plt+0x279c>
   13a60:	ldrd	r4, [sp]
   13a64:	add	sp, sp, #8
   13a68:	bx	lr
   13a6c:	ldrd	r4, [r0]
   13a70:	ldrd	r2, [r1]
   13a74:	cmp	r5, r3
   13a78:	cmpeq	r4, r2
   13a7c:	moveq	r0, #1
   13a80:	movne	r0, #0
   13a84:	b	13a60 <__assert_fail@plt+0x2790>
   13a88:	str	r4, [sp, #-8]!
   13a8c:	str	lr, [sp, #4]
   13a90:	mov	r2, r1
   13a94:	mov	r3, #0
   13a98:	ldrd	r0, [r0, #8]
   13a9c:	bl	1a85c <__assert_fail@plt+0x958c>
   13aa0:	mov	r0, r2
   13aa4:	ldr	r4, [sp]
   13aa8:	add	sp, sp, #4
   13aac:	pop	{pc}		; (ldr pc, [sp], #4)
   13ab0:	str	r4, [sp, #-8]!
   13ab4:	str	lr, [sp, #4]
   13ab8:	mov	r2, r1
   13abc:	mov	r3, #0
   13ac0:	ldrd	r0, [r0]
   13ac4:	bl	1a85c <__assert_fail@plt+0x958c>
   13ac8:	mov	r0, r2
   13acc:	ldr	r4, [sp]
   13ad0:	add	sp, sp, #4
   13ad4:	pop	{pc}		; (ldr pc, [sp], #4)
   13ad8:	strd	r4, [sp, #-8]!
   13adc:	ldrd	r4, [r0]
   13ae0:	ldrd	r2, [r1]
   13ae4:	cmp	r5, r3
   13ae8:	cmpeq	r4, r2
   13aec:	moveq	r0, #1
   13af0:	movne	r0, #0
   13af4:	ldrd	r4, [sp]
   13af8:	add	sp, sp, #8
   13afc:	bx	lr
   13b00:	strd	r4, [sp, #-8]!
   13b04:	ldr	r3, [r0]
   13b08:	ldrd	r4, [r3, #160]	; 0xa0
   13b0c:	ldr	r3, [r1]
   13b10:	ldrd	r2, [r3, #160]	; 0xa0
   13b14:	cmp	r5, r3
   13b18:	cmpeq	r4, r2
   13b1c:	movhi	r0, #1
   13b20:	movls	r0, #0
   13b24:	movcc	r3, #1
   13b28:	movcs	r3, #0
   13b2c:	sub	r0, r0, r3
   13b30:	ldrd	r4, [sp]
   13b34:	add	sp, sp, #8
   13b38:	bx	lr
   13b3c:	strd	r4, [sp, #-16]!
   13b40:	str	r6, [sp, #8]
   13b44:	str	lr, [sp, #12]
   13b48:	mov	r4, r0
   13b4c:	ldr	r3, [r0, #36]	; 0x24
   13b50:	add	r1, r1, #256	; 0x100
   13b54:	adds	r1, r1, r3
   13b58:	bcs	13b88 <__assert_fail@plt+0x28b8>
   13b5c:	str	r1, [r0, #36]	; 0x24
   13b60:	ldr	r0, [r0, #24]
   13b64:	bl	1a0d8 <__assert_fail@plt+0x8e08>
   13b68:	cmp	r0, #0
   13b6c:	strne	r0, [r4, #24]
   13b70:	movne	r0, #1
   13b74:	beq	13bac <__assert_fail@plt+0x28dc>
   13b78:	ldrd	r4, [sp]
   13b7c:	ldr	r6, [sp, #8]
   13b80:	add	sp, sp, #12
   13b84:	pop	{pc}		; (ldr pc, [sp], #4)
   13b88:	ldr	r0, [r0, #24]
   13b8c:	bl	13924 <__assert_fail@plt+0x2654>
   13b90:	mov	r5, #0
   13b94:	str	r5, [r4, #24]
   13b98:	bl	11180 <__errno_location@plt>
   13b9c:	mov	r3, #36	; 0x24
   13ba0:	str	r3, [r0]
   13ba4:	mov	r0, r5
   13ba8:	b	13b78 <__assert_fail@plt+0x28a8>
   13bac:	ldr	r0, [r4, #24]
   13bb0:	bl	13924 <__assert_fail@plt+0x2654>
   13bb4:	mov	r0, #0
   13bb8:	str	r0, [r4, #24]
   13bbc:	b	13b78 <__assert_fail@plt+0x28a8>
   13bc0:	strd	r4, [sp, #-16]!
   13bc4:	str	r6, [sp, #8]
   13bc8:	str	lr, [sp, #12]
   13bcc:	sub	sp, sp, #8
   13bd0:	mov	r4, r1
   13bd4:	add	r5, r1, #64	; 0x40
   13bd8:	ldr	r3, [r1, #48]	; 0x30
   13bdc:	cmp	r3, #0
   13be0:	bne	13bf0 <__assert_fail@plt+0x2920>
   13be4:	ldr	r3, [r0, #48]	; 0x30
   13be8:	tst	r3, #1
   13bec:	bne	13c00 <__assert_fail@plt+0x2930>
   13bf0:	ldr	r3, [r0, #48]	; 0x30
   13bf4:	ubfx	r3, r3, #1, #1
   13bf8:	orrs	r3, r2, r3
   13bfc:	beq	13c74 <__assert_fail@plt+0x29a4>
   13c00:	mov	r2, r5
   13c04:	ldr	r1, [r4, #24]
   13c08:	mov	r0, #3
   13c0c:	bl	11270 <__xstat64@plt>
   13c10:	cmp	r0, #0
   13c14:	beq	13c98 <__assert_fail@plt+0x29c8>
   13c18:	bl	11180 <__errno_location@plt>
   13c1c:	mov	r6, r0
   13c20:	ldr	r3, [r0]
   13c24:	cmp	r3, #2
   13c28:	bne	13c54 <__assert_fail@plt+0x2984>
   13c2c:	mov	r2, r5
   13c30:	ldr	r1, [r4, #24]
   13c34:	mov	r0, #3
   13c38:	bl	112ac <__lxstat64@plt>
   13c3c:	cmp	r0, #0
   13c40:	bne	13c54 <__assert_fail@plt+0x2984>
   13c44:	mov	r3, #0
   13c48:	str	r3, [r6]
   13c4c:	mov	r0, #13
   13c50:	b	13cbc <__assert_fail@plt+0x29ec>
   13c54:	ldr	r3, [r6]
   13c58:	str	r3, [r4, #32]
   13c5c:	mov	r2, #104	; 0x68
   13c60:	mov	r1, #0
   13c64:	mov	r0, r5
   13c68:	bl	11198 <memset@plt>
   13c6c:	mov	r0, #10
   13c70:	b	13cbc <__assert_fail@plt+0x29ec>
   13c74:	mov	r3, #256	; 0x100
   13c78:	str	r3, [sp]
   13c7c:	mov	r3, r5
   13c80:	ldr	r2, [r4, #24]
   13c84:	ldr	r1, [r0, #32]
   13c88:	mov	r0, #3
   13c8c:	bl	11090 <__fxstatat64@plt>
   13c90:	cmp	r0, #0
   13c94:	bne	13cd0 <__assert_fail@plt+0x2a00>
   13c98:	ldr	r3, [r4, #80]	; 0x50
   13c9c:	and	r3, r3, #61440	; 0xf000
   13ca0:	cmp	r3, #16384	; 0x4000
   13ca4:	beq	13ce0 <__assert_fail@plt+0x2a10>
   13ca8:	cmp	r3, #40960	; 0xa000
   13cac:	beq	13d28 <__assert_fail@plt+0x2a58>
   13cb0:	cmp	r3, #32768	; 0x8000
   13cb4:	movne	r0, #3
   13cb8:	moveq	r0, #8
   13cbc:	add	sp, sp, #8
   13cc0:	ldrd	r4, [sp]
   13cc4:	ldr	r6, [sp, #8]
   13cc8:	add	sp, sp, #12
   13ccc:	pop	{pc}		; (ldr pc, [sp], #4)
   13cd0:	bl	11180 <__errno_location@plt>
   13cd4:	ldr	r3, [r0]
   13cd8:	str	r3, [r4, #32]
   13cdc:	b	13c5c <__assert_fail@plt+0x298c>
   13ce0:	ldrb	r3, [r4, #168]	; 0xa8
   13ce4:	cmp	r3, #46	; 0x2e
   13ce8:	movne	r0, #1
   13cec:	bne	13cbc <__assert_fail@plt+0x29ec>
   13cf0:	ldrb	r3, [r4, #169]	; 0xa9
   13cf4:	cmp	r3, #0
   13cf8:	beq	13d14 <__assert_fail@plt+0x2a44>
   13cfc:	ldr	r3, [r4, #168]	; 0xa8
   13d00:	bic	r3, r3, #-16777216	; 0xff000000
   13d04:	bic	r3, r3, #255	; 0xff
   13d08:	cmp	r3, #11776	; 0x2e00
   13d0c:	movne	r0, #1
   13d10:	bne	13cbc <__assert_fail@plt+0x29ec>
   13d14:	ldr	r3, [r4, #48]	; 0x30
   13d18:	cmp	r3, #0
   13d1c:	moveq	r0, #1
   13d20:	movne	r0, #5
   13d24:	b	13cbc <__assert_fail@plt+0x29ec>
   13d28:	mov	r0, #12
   13d2c:	b	13cbc <__assert_fail@plt+0x29ec>
   13d30:	strd	r4, [sp, #-24]!	; 0xffffffe8
   13d34:	strd	r6, [sp, #8]
   13d38:	str	r8, [sp, #16]
   13d3c:	str	lr, [sp, #20]
   13d40:	mov	r6, r0
   13d44:	mov	r4, r1
   13d48:	mov	r5, r2
   13d4c:	ldr	r7, [r0, #44]	; 0x2c
   13d50:	ldr	r3, [r0, #40]	; 0x28
   13d54:	cmp	r3, r2
   13d58:	bcs	13d84 <__assert_fail@plt+0x2ab4>
   13d5c:	add	r1, r2, #40	; 0x28
   13d60:	str	r1, [r0, #40]	; 0x28
   13d64:	cmn	r1, #-1073741823	; 0xc0000001
   13d68:	bhi	13e04 <__assert_fail@plt+0x2b34>
   13d6c:	lsl	r1, r1, #2
   13d70:	ldr	r0, [r0, #8]
   13d74:	bl	1a0d8 <__assert_fail@plt+0x8e08>
   13d78:	cmp	r0, #0
   13d7c:	strne	r0, [r6, #8]
   13d80:	beq	13e04 <__assert_fail@plt+0x2b34>
   13d84:	ldr	r3, [r6, #8]
   13d88:	cmp	r4, #0
   13d8c:	beq	13da0 <__assert_fail@plt+0x2ad0>
   13d90:	str	r4, [r3], #4
   13d94:	ldr	r4, [r4, #8]
   13d98:	cmp	r4, #0
   13d9c:	bne	13d90 <__assert_fail@plt+0x2ac0>
   13da0:	mov	r3, r7
   13da4:	mov	r2, #4
   13da8:	mov	r1, r5
   13dac:	ldr	r0, [r6, #8]
   13db0:	bl	11258 <qsort@plt>
   13db4:	ldr	lr, [r6, #8]
   13db8:	ldr	r0, [lr]
   13dbc:	subs	r3, r5, #1
   13dc0:	beq	13de4 <__assert_fail@plt+0x2b14>
   13dc4:	mov	r2, lr
   13dc8:	ldr	r1, [r2]
   13dcc:	ldr	ip, [r2, #4]!
   13dd0:	str	ip, [r1, #8]
   13dd4:	subs	r3, r3, #1
   13dd8:	bne	13dc8 <__assert_fail@plt+0x2af8>
   13ddc:	sub	r5, r5, #-1073741823	; 0xc0000001
   13de0:	add	lr, lr, r5, lsl #2
   13de4:	ldr	r3, [lr]
   13de8:	mov	r2, #0
   13dec:	str	r2, [r3, #8]
   13df0:	ldrd	r4, [sp]
   13df4:	ldrd	r6, [sp, #8]
   13df8:	ldr	r8, [sp, #16]
   13dfc:	add	sp, sp, #20
   13e00:	pop	{pc}		; (ldr pc, [sp], #4)
   13e04:	ldr	r0, [r6, #8]
   13e08:	bl	13924 <__assert_fail@plt+0x2654>
   13e0c:	mov	r3, #0
   13e10:	str	r3, [r6, #8]
   13e14:	str	r3, [r6, #40]	; 0x28
   13e18:	mov	r0, r4
   13e1c:	b	13df0 <__assert_fail@plt+0x2b20>
   13e20:	strd	r4, [sp, #-24]!	; 0xffffffe8
   13e24:	strd	r6, [sp, #8]
   13e28:	str	r8, [sp, #16]
   13e2c:	str	lr, [sp, #20]
   13e30:	mov	r6, r0
   13e34:	mov	r7, r1
   13e38:	mov	r5, r2
   13e3c:	add	r0, r2, #176	; 0xb0
   13e40:	bic	r0, r0, #7
   13e44:	bl	1a09c <__assert_fail@plt+0x8dcc>
   13e48:	subs	r4, r0, #0
   13e4c:	beq	13e98 <__assert_fail@plt+0x2bc8>
   13e50:	mov	r2, r5
   13e54:	mov	r1, r7
   13e58:	add	r0, r4, #168	; 0xa8
   13e5c:	bl	11030 <memcpy@plt>
   13e60:	add	r2, r4, r5
   13e64:	mov	r3, #0
   13e68:	strb	r3, [r2, #168]	; 0xa8
   13e6c:	str	r5, [r4, #52]	; 0x34
   13e70:	str	r6, [r4, #44]	; 0x2c
   13e74:	ldr	r2, [r6, #24]
   13e78:	str	r2, [r4, #28]
   13e7c:	str	r3, [r4, #32]
   13e80:	str	r3, [r4, #12]
   13e84:	strh	r3, [r4, #58]	; 0x3a
   13e88:	mov	r2, #3
   13e8c:	strh	r2, [r4, #60]	; 0x3c
   13e90:	str	r3, [r4, #16]
   13e94:	str	r3, [r4, #20]
   13e98:	mov	r0, r4
   13e9c:	ldrd	r4, [sp]
   13ea0:	ldrd	r6, [sp, #8]
   13ea4:	ldr	r8, [sp, #16]
   13ea8:	add	sp, sp, #20
   13eac:	pop	{pc}		; (ldr pc, [sp], #4)
   13eb0:	str	r4, [sp, #-8]!
   13eb4:	str	lr, [sp, #4]
   13eb8:	sub	sp, sp, #8
   13ebc:	mov	r4, r0
   13ec0:	ldr	r3, [r0, #48]	; 0x30
   13ec4:	movw	r2, #258	; 0x102
   13ec8:	tst	r2, r3
   13ecc:	beq	13f14 <__assert_fail@plt+0x2c44>
   13ed0:	movw	r3, #14628	; 0x3924
   13ed4:	movt	r3, #1
   13ed8:	str	r3, [sp]
   13edc:	movw	r3, #14916	; 0x3a44
   13ee0:	movt	r3, #1
   13ee4:	movw	r2, #14984	; 0x3a88
   13ee8:	movt	r2, #1
   13eec:	mov	r1, #0
   13ef0:	mov	r0, #31
   13ef4:	bl	167ac <__assert_fail@plt+0x54dc>
   13ef8:	str	r0, [r4, #56]	; 0x38
   13efc:	adds	r0, r0, #0
   13f00:	movne	r0, #1
   13f04:	add	sp, sp, #8
   13f08:	ldr	r4, [sp]
   13f0c:	add	sp, sp, #4
   13f10:	pop	{pc}		; (ldr pc, [sp], #4)
   13f14:	mov	r0, #32
   13f18:	bl	1a09c <__assert_fail@plt+0x8dcc>
   13f1c:	str	r0, [r4, #56]	; 0x38
   13f20:	cmp	r0, #0
   13f24:	moveq	r0, #0
   13f28:	beq	13f04 <__assert_fail@plt+0x2c34>
   13f2c:	bl	1a1c0 <__assert_fail@plt+0x8ef0>
   13f30:	mov	r0, #1
   13f34:	b	13f04 <__assert_fail@plt+0x2c34>
   13f38:	str	r4, [sp, #-8]!
   13f3c:	str	lr, [sp, #4]
   13f40:	mov	ip, r1
   13f44:	ldr	r3, [r0, #48]	; 0x30
   13f48:	lsl	r2, r3, #11
   13f4c:	and	r2, r2, #32768	; 0x8000
   13f50:	orr	r2, r2, #540672	; 0x84000
   13f54:	orr	r2, r2, #2304	; 0x900
   13f58:	tst	r3, #512	; 0x200
   13f5c:	beq	13f74 <__assert_fail@plt+0x2ca4>
   13f60:	ldr	r0, [r0, #32]
   13f64:	bl	16fa4 <__assert_fail@plt+0x5cd4>
   13f68:	ldr	r4, [sp]
   13f6c:	add	sp, sp, #4
   13f70:	pop	{pc}		; (ldr pc, [sp], #4)
   13f74:	mov	r1, r2
   13f78:	mov	r0, ip
   13f7c:	bl	1a5f4 <__assert_fail@plt+0x9324>
   13f80:	b	13f68 <__assert_fail@plt+0x2c98>
   13f84:	strd	r4, [sp, #-16]!
   13f88:	str	r6, [sp, #8]
   13f8c:	str	lr, [sp, #12]
   13f90:	subs	r4, r0, #0
   13f94:	bne	13fc0 <__assert_fail@plt+0x2cf0>
   13f98:	ldrd	r4, [sp]
   13f9c:	ldr	r6, [sp, #8]
   13fa0:	add	sp, sp, #12
   13fa4:	pop	{pc}		; (ldr pc, [sp], #4)
   13fa8:	bl	112c4 <closedir@plt>
   13fac:	mov	r0, r4
   13fb0:	bl	13924 <__assert_fail@plt+0x2654>
   13fb4:	mov	r4, r5
   13fb8:	cmp	r5, #0
   13fbc:	beq	13f98 <__assert_fail@plt+0x2cc8>
   13fc0:	ldr	r5, [r4, #8]
   13fc4:	ldr	r0, [r4, #12]
   13fc8:	cmp	r0, #0
   13fcc:	bne	13fa8 <__assert_fail@plt+0x2cd8>
   13fd0:	b	13fac <__assert_fail@plt+0x2cdc>
   13fd4:	str	r4, [sp, #-8]!
   13fd8:	str	lr, [sp, #4]
   13fdc:	ldr	r3, [r0, #48]	; 0x30
   13fe0:	movw	r2, #258	; 0x102
   13fe4:	tst	r2, r3
   13fe8:	beq	14008 <__assert_fail@plt+0x2d38>
   13fec:	ldr	r0, [r0, #56]	; 0x38
   13ff0:	cmp	r0, #0
   13ff4:	beq	13ffc <__assert_fail@plt+0x2d2c>
   13ff8:	bl	16978 <__assert_fail@plt+0x56a8>
   13ffc:	ldr	r4, [sp]
   14000:	add	sp, sp, #4
   14004:	pop	{pc}		; (ldr pc, [sp], #4)
   14008:	ldr	r0, [r0, #56]	; 0x38
   1400c:	bl	13924 <__assert_fail@plt+0x2654>
   14010:	b	13ffc <__assert_fail@plt+0x2d2c>
   14014:	str	r4, [sp, #-8]!
   14018:	str	lr, [sp, #4]
   1401c:	mov	r4, r0
   14020:	mov	r0, r4
   14024:	bl	16f00 <__assert_fail@plt+0x5c30>
   14028:	cmp	r0, #0
   1402c:	bne	14048 <__assert_fail@plt+0x2d78>
   14030:	mov	r0, r4
   14034:	bl	16f54 <__assert_fail@plt+0x5c84>
   14038:	cmp	r0, #0
   1403c:	blt	14020 <__assert_fail@plt+0x2d50>
   14040:	bl	112a0 <close@plt>
   14044:	b	14020 <__assert_fail@plt+0x2d50>
   14048:	ldr	r4, [sp]
   1404c:	add	sp, sp, #4
   14050:	pop	{pc}		; (ldr pc, [sp], #4)
   14054:	strd	r4, [sp, #-20]!	; 0xffffffec
   14058:	strd	r6, [sp, #8]
   1405c:	str	lr, [sp, #16]
   14060:	sub	sp, sp, #116	; 0x74
   14064:	ldr	r7, [r0, #44]	; 0x2c
   14068:	ldr	r3, [r7, #48]	; 0x30
   1406c:	ands	r3, r3, #512	; 0x200
   14070:	beq	14160 <__assert_fail@plt+0x2e90>
   14074:	mov	r6, r1
   14078:	mov	r5, r0
   1407c:	ldr	r4, [r7, #52]	; 0x34
   14080:	cmp	r4, #0
   14084:	beq	140ac <__assert_fail@plt+0x2ddc>
   14088:	ldrd	r2, [r5, #64]	; 0x40
   1408c:	strd	r2, [sp, #8]
   14090:	add	r1, sp, #8
   14094:	mov	r0, r4
   14098:	bl	164b8 <__assert_fail@plt+0x51e8>
   1409c:	cmp	r0, #0
   140a0:	beq	140e4 <__assert_fail@plt+0x2e14>
   140a4:	ldr	r3, [r0, #8]
   140a8:	b	14160 <__assert_fail@plt+0x2e90>
   140ac:	movw	r3, #14628	; 0x3924
   140b0:	movt	r3, #1
   140b4:	str	r3, [sp]
   140b8:	movw	r3, #15064	; 0x3ad8
   140bc:	movt	r3, #1
   140c0:	movw	r2, #15024	; 0x3ab0
   140c4:	movt	r2, #1
   140c8:	mov	r1, #0
   140cc:	mov	r0, #13
   140d0:	bl	167ac <__assert_fail@plt+0x54dc>
   140d4:	mov	r4, r0
   140d8:	str	r0, [r7, #52]	; 0x34
   140dc:	cmp	r0, #0
   140e0:	bne	14088 <__assert_fail@plt+0x2db8>
   140e4:	cmp	r6, #0
   140e8:	blt	1415c <__assert_fail@plt+0x2e8c>
   140ec:	add	r1, sp, #24
   140f0:	mov	r0, r6
   140f4:	bl	10fa0 <fstatfs64@plt>
   140f8:	cmp	r0, #0
   140fc:	bne	14178 <__assert_fail@plt+0x2ea8>
   14100:	cmp	r4, #0
   14104:	beq	14144 <__assert_fail@plt+0x2e74>
   14108:	mov	r0, #16
   1410c:	bl	1a09c <__assert_fail@plt+0x8dcc>
   14110:	subs	r6, r0, #0
   14114:	beq	14144 <__assert_fail@plt+0x2e74>
   14118:	ldrd	r2, [r5, #64]	; 0x40
   1411c:	strd	r2, [r6]
   14120:	ldr	r3, [sp, #24]
   14124:	str	r3, [r6, #8]
   14128:	mov	r1, r6
   1412c:	mov	r0, r4
   14130:	bl	16d60 <__assert_fail@plt+0x5a90>
   14134:	cmp	r0, #0
   14138:	beq	14150 <__assert_fail@plt+0x2e80>
   1413c:	cmp	r6, r0
   14140:	bne	1414c <__assert_fail@plt+0x2e7c>
   14144:	ldr	r3, [sp, #24]
   14148:	b	14160 <__assert_fail@plt+0x2e90>
   1414c:	bl	11294 <abort@plt>
   14150:	mov	r0, r6
   14154:	bl	13924 <__assert_fail@plt+0x2654>
   14158:	b	14144 <__assert_fail@plt+0x2e74>
   1415c:	mov	r3, #0
   14160:	mov	r0, r3
   14164:	add	sp, sp, #116	; 0x74
   14168:	ldrd	r4, [sp]
   1416c:	ldrd	r6, [sp, #8]
   14170:	add	sp, sp, #16
   14174:	pop	{pc}		; (ldr pc, [sp], #4)
   14178:	mov	r3, #0
   1417c:	b	14160 <__assert_fail@plt+0x2e90>
   14180:	strd	r4, [sp, #-16]!
   14184:	str	r6, [sp, #8]
   14188:	str	lr, [sp, #12]
   1418c:	mov	r5, r0
   14190:	mov	r4, r1
   14194:	ldr	r3, [r0, #48]	; 0x30
   14198:	movw	r2, #258	; 0x102
   1419c:	tst	r2, r3
   141a0:	beq	14214 <__assert_fail@plt+0x2f44>
   141a4:	mov	r0, #24
   141a8:	bl	1a09c <__assert_fail@plt+0x8dcc>
   141ac:	subs	r6, r0, #0
   141b0:	moveq	r0, #0
   141b4:	beq	14238 <__assert_fail@plt+0x2f68>
   141b8:	ldrd	r2, [r4, #64]	; 0x40
   141bc:	strd	r2, [r6]
   141c0:	ldrd	r2, [r4, #160]	; 0xa0
   141c4:	strd	r2, [r6, #8]
   141c8:	str	r4, [r6, #16]
   141cc:	mov	r1, r6
   141d0:	ldr	r0, [r5, #56]	; 0x38
   141d4:	bl	16d60 <__assert_fail@plt+0x5a90>
   141d8:	mov	r5, r0
   141dc:	cmp	r6, r0
   141e0:	moveq	r0, #1
   141e4:	beq	14238 <__assert_fail@plt+0x2f68>
   141e8:	mov	r0, r6
   141ec:	bl	13924 <__assert_fail@plt+0x2654>
   141f0:	cmp	r5, #0
   141f4:	moveq	r0, #0
   141f8:	beq	14238 <__assert_fail@plt+0x2f68>
   141fc:	ldr	r3, [r5, #16]
   14200:	str	r3, [r4]
   14204:	mov	r3, #2
   14208:	strh	r3, [r4, #56]	; 0x38
   1420c:	mov	r0, #1
   14210:	b	14238 <__assert_fail@plt+0x2f68>
   14214:	add	r1, r1, #64	; 0x40
   14218:	ldr	r0, [r0, #56]	; 0x38
   1421c:	bl	1a1dc <__assert_fail@plt+0x8f0c>
   14220:	cmp	r0, #0
   14224:	moveq	r0, #1
   14228:	beq	14238 <__assert_fail@plt+0x2f68>
   1422c:	str	r4, [r4]
   14230:	mov	r3, #2
   14234:	strh	r3, [r4, #56]	; 0x38
   14238:	ldrd	r4, [sp]
   1423c:	ldr	r6, [sp, #8]
   14240:	add	sp, sp, #12
   14244:	pop	{pc}		; (ldr pc, [sp], #4)
   14248:	strd	r4, [sp, #-16]!
   1424c:	str	r6, [sp, #8]
   14250:	str	lr, [sp, #12]
   14254:	mov	r5, r1
   14258:	ldr	r1, [r0, #32]
   1425c:	cmp	r1, r5
   14260:	movne	r3, #0
   14264:	moveq	r3, #1
   14268:	cmn	r1, #100	; 0x64
   1426c:	moveq	r3, #0
   14270:	cmp	r3, #0
   14274:	bne	142b8 <__assert_fail@plt+0x2fe8>
   14278:	mov	r4, r0
   1427c:	cmp	r2, #0
   14280:	bne	142bc <__assert_fail@plt+0x2fec>
   14284:	ldr	r3, [r0, #48]	; 0x30
   14288:	eor	r3, r3, #4
   1428c:	ubfx	r3, r3, #2, #1
   14290:	cmp	r1, #0
   14294:	movlt	r3, #0
   14298:	andge	r3, r3, #1
   1429c:	cmp	r3, #0
   142a0:	bne	142d4 <__assert_fail@plt+0x3004>
   142a4:	str	r5, [r4, #32]
   142a8:	ldrd	r4, [sp]
   142ac:	ldr	r6, [sp, #8]
   142b0:	add	sp, sp, #12
   142b4:	pop	{pc}		; (ldr pc, [sp], #4)
   142b8:	bl	11294 <abort@plt>
   142bc:	add	r0, r0, #60	; 0x3c
   142c0:	bl	16f08 <__assert_fail@plt+0x5c38>
   142c4:	cmp	r0, #0
   142c8:	blt	142a4 <__assert_fail@plt+0x2fd4>
   142cc:	bl	112a0 <close@plt>
   142d0:	b	142a4 <__assert_fail@plt+0x2fd4>
   142d4:	mov	r0, r1
   142d8:	bl	112a0 <close@plt>
   142dc:	b	142a4 <__assert_fail@plt+0x2fd4>
   142e0:	strd	r4, [sp, #-16]!
   142e4:	str	r6, [sp, #8]
   142e8:	str	lr, [sp, #12]
   142ec:	mov	r4, r0
   142f0:	ldr	r3, [r0, #48]	; 0x30
   142f4:	ands	r5, r3, #4
   142f8:	movne	r5, #0
   142fc:	bne	14314 <__assert_fail@plt+0x3044>
   14300:	tst	r3, #512	; 0x200
   14304:	beq	14330 <__assert_fail@plt+0x3060>
   14308:	mov	r2, #1
   1430c:	mvn	r1, #99	; 0x63
   14310:	bl	14248 <__assert_fail@plt+0x2f78>
   14314:	add	r0, r4, #60	; 0x3c
   14318:	bl	14014 <__assert_fail@plt+0x2d44>
   1431c:	mov	r0, r5
   14320:	ldrd	r4, [sp]
   14324:	ldr	r6, [sp, #8]
   14328:	add	sp, sp, #12
   1432c:	pop	{pc}		; (ldr pc, [sp], #4)
   14330:	ldr	r0, [r0, #28]
   14334:	bl	1124c <fchdir@plt>
   14338:	adds	r5, r0, #0
   1433c:	movne	r5, #1
   14340:	b	14314 <__assert_fail@plt+0x3044>
   14344:	strd	r4, [sp, #-28]!	; 0xffffffe4
   14348:	strd	r6, [sp, #8]
   1434c:	strd	r8, [sp, #16]
   14350:	str	lr, [sp, #24]
   14354:	sub	sp, sp, #108	; 0x6c
   14358:	mov	r4, r0
   1435c:	mov	r7, r1
   14360:	mov	r5, r2
   14364:	subs	r9, r3, #0
   14368:	beq	14494 <__assert_fail@plt+0x31c4>
   1436c:	movw	r1, #47088	; 0xb7f0
   14370:	movt	r1, #1
   14374:	mov	r0, r9
   14378:	bl	10fdc <strcmp@plt>
   1437c:	cmp	r0, #0
   14380:	bne	14494 <__assert_fail@plt+0x31c4>
   14384:	ldr	r3, [r4, #48]	; 0x30
   14388:	tst	r3, #4
   1438c:	bne	143d4 <__assert_fail@plt+0x3104>
   14390:	cmp	r5, #0
   14394:	bge	14448 <__assert_fail@plt+0x3178>
   14398:	tst	r3, #512	; 0x200
   1439c:	beq	143b4 <__assert_fail@plt+0x30e4>
   143a0:	add	r6, r4, #60	; 0x3c
   143a4:	mov	r0, r6
   143a8:	bl	16f00 <__assert_fail@plt+0x5c30>
   143ac:	cmp	r0, #0
   143b0:	beq	14400 <__assert_fail@plt+0x3130>
   143b4:	mov	r8, #1
   143b8:	mov	r1, r9
   143bc:	mov	r0, r4
   143c0:	bl	13f38 <__assert_fail@plt+0x2c68>
   143c4:	subs	r6, r0, #0
   143c8:	bge	144b0 <__assert_fail@plt+0x31e0>
   143cc:	mvn	r4, #0
   143d0:	b	14534 <__assert_fail@plt+0x3264>
   143d4:	ubfx	r3, r3, #9, #1
   143d8:	cmp	r5, #0
   143dc:	movlt	r3, #0
   143e0:	andge	r3, r3, #1
   143e4:	cmp	r3, #0
   143e8:	moveq	r4, #0
   143ec:	beq	14534 <__assert_fail@plt+0x3264>
   143f0:	mov	r0, r5
   143f4:	bl	112a0 <close@plt>
   143f8:	mov	r4, #0
   143fc:	b	14534 <__assert_fail@plt+0x3264>
   14400:	mov	r0, r6
   14404:	bl	16f54 <__assert_fail@plt+0x5c84>
   14408:	subs	r6, r0, #0
   1440c:	blt	143b4 <__assert_fail@plt+0x30e4>
   14410:	ldr	r3, [r4, #48]	; 0x30
   14414:	tst	r3, #2
   14418:	bne	14454 <__assert_fail@plt+0x3184>
   1441c:	mov	r5, r6
   14420:	mov	r8, #1
   14424:	ldr	r3, [r4, #48]	; 0x30
   14428:	tst	r3, #512	; 0x200
   1442c:	bne	14460 <__assert_fail@plt+0x3190>
   14430:	mov	r0, r6
   14434:	bl	1124c <fchdir@plt>
   14438:	mov	r4, r0
   1443c:	b	1452c <__assert_fail@plt+0x325c>
   14440:	mov	r8, #0
   14444:	b	143b8 <__assert_fail@plt+0x30e8>
   14448:	mov	r6, r5
   1444c:	mov	r8, #1
   14450:	b	144b0 <__assert_fail@plt+0x31e0>
   14454:	mov	r5, r6
   14458:	mov	r8, #1
   1445c:	b	144dc <__assert_fail@plt+0x320c>
   14460:	eor	r2, r8, #1
   14464:	mov	r1, r6
   14468:	mov	r0, r4
   1446c:	bl	14248 <__assert_fail@plt+0x2f78>
   14470:	mov	r4, #0
   14474:	b	14534 <__assert_fail@plt+0x3264>
   14478:	bl	11180 <__errno_location@plt>
   1447c:	mov	r5, r0
   14480:	ldr	r7, [r0]
   14484:	mov	r0, r6
   14488:	bl	112a0 <close@plt>
   1448c:	str	r7, [r5]
   14490:	b	14534 <__assert_fail@plt+0x3264>
   14494:	ldr	r3, [r4, #48]	; 0x30
   14498:	tst	r3, #4
   1449c:	bne	143d4 <__assert_fail@plt+0x3104>
   144a0:	cmp	r5, #0
   144a4:	movge	r6, r5
   144a8:	movge	r8, #0
   144ac:	blt	14440 <__assert_fail@plt+0x3170>
   144b0:	ldr	r3, [r4, #48]	; 0x30
   144b4:	tst	r3, #2
   144b8:	bne	144dc <__assert_fail@plt+0x320c>
   144bc:	cmp	r9, #0
   144c0:	beq	14424 <__assert_fail@plt+0x3154>
   144c4:	movw	r1, #47088	; 0xb7f0
   144c8:	movt	r1, #1
   144cc:	mov	r0, r9
   144d0:	bl	10fdc <strcmp@plt>
   144d4:	cmp	r0, #0
   144d8:	bne	14424 <__assert_fail@plt+0x3154>
   144dc:	mov	r2, sp
   144e0:	mov	r1, r6
   144e4:	mov	r0, #3
   144e8:	bl	110a8 <__fxstat64@plt>
   144ec:	cmp	r0, #0
   144f0:	bne	14528 <__assert_fail@plt+0x3258>
   144f4:	ldrd	r0, [r7, #64]	; 0x40
   144f8:	ldrd	r2, [sp]
   144fc:	cmp	r1, r3
   14500:	cmpeq	r0, r2
   14504:	bne	1451c <__assert_fail@plt+0x324c>
   14508:	ldrd	r0, [r7, #160]	; 0xa0
   1450c:	ldrd	r2, [sp, #96]	; 0x60
   14510:	cmp	r1, r3
   14514:	cmpeq	r0, r2
   14518:	beq	14424 <__assert_fail@plt+0x3154>
   1451c:	bl	11180 <__errno_location@plt>
   14520:	mov	r3, #2
   14524:	str	r3, [r0]
   14528:	mvn	r4, #0
   1452c:	cmp	r5, #0
   14530:	blt	14478 <__assert_fail@plt+0x31a8>
   14534:	mov	r0, r4
   14538:	add	sp, sp, #108	; 0x6c
   1453c:	ldrd	r4, [sp]
   14540:	ldrd	r6, [sp, #8]
   14544:	ldrd	r8, [sp, #16]
   14548:	add	sp, sp, #24
   1454c:	pop	{pc}		; (ldr pc, [sp], #4)
   14550:	strd	r4, [sp, #-12]!
   14554:	str	lr, [sp, #8]
   14558:	sub	sp, sp, #28
   1455c:	ldr	r3, [r0, #48]	; 0x30
   14560:	movw	r2, #258	; 0x102
   14564:	tst	r2, r3
   14568:	bne	145d4 <__assert_fail@plt+0x3304>
   1456c:	ldr	ip, [r1, #4]
   14570:	cmp	ip, #0
   14574:	beq	145fc <__assert_fail@plt+0x332c>
   14578:	ldr	r3, [ip, #48]	; 0x30
   1457c:	cmp	r3, #0
   14580:	blt	145fc <__assert_fail@plt+0x332c>
   14584:	ldr	lr, [r0, #56]	; 0x38
   14588:	ldrd	r2, [lr, #16]
   1458c:	orrs	r3, r2, r3
   14590:	beq	14610 <__assert_fail@plt+0x3340>
   14594:	ldrd	r4, [lr]
   14598:	ldrd	r2, [r1, #160]	; 0xa0
   1459c:	cmp	r5, r3
   145a0:	cmpeq	r4, r2
   145a4:	bne	145fc <__assert_fail@plt+0x332c>
   145a8:	ldrd	r2, [lr, #8]
   145ac:	ldrd	r4, [r1, #64]	; 0x40
   145b0:	cmp	r3, r5
   145b4:	cmpeq	r2, r4
   145b8:	bne	145fc <__assert_fail@plt+0x332c>
   145bc:	ldrd	r2, [ip, #64]	; 0x40
   145c0:	strd	r2, [lr, #8]
   145c4:	ldr	r3, [r0, #56]	; 0x38
   145c8:	ldrd	r0, [ip, #160]	; 0xa0
   145cc:	strd	r0, [r3]
   145d0:	b	145fc <__assert_fail@plt+0x332c>
   145d4:	ldrd	r2, [r1, #64]	; 0x40
   145d8:	strd	r2, [sp]
   145dc:	ldrd	r2, [r1, #160]	; 0xa0
   145e0:	strd	r2, [sp, #8]
   145e4:	mov	r1, sp
   145e8:	ldr	r0, [r0, #56]	; 0x38
   145ec:	bl	16da0 <__assert_fail@plt+0x5ad0>
   145f0:	cmp	r0, #0
   145f4:	beq	1460c <__assert_fail@plt+0x333c>
   145f8:	bl	13924 <__assert_fail@plt+0x2654>
   145fc:	add	sp, sp, #28
   14600:	ldrd	r4, [sp]
   14604:	add	sp, sp, #8
   14608:	pop	{pc}		; (ldr pc, [sp], #4)
   1460c:	bl	11294 <abort@plt>
   14610:	bl	11294 <abort@plt>
   14614:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14618:	strd	r6, [sp, #8]
   1461c:	strd	r8, [sp, #16]
   14620:	strd	sl, [sp, #24]
   14624:	str	lr, [sp, #32]
   14628:	sub	sp, sp, #68	; 0x44
   1462c:	mov	r5, r0
   14630:	str	r1, [sp, #32]
   14634:	ldr	r9, [r0]
   14638:	ldr	r0, [r9, #12]
   1463c:	str	r0, [sp, #40]	; 0x28
   14640:	cmp	r0, #0
   14644:	beq	14754 <__assert_fail@plt+0x3484>
   14648:	bl	11240 <dirfd@plt>
   1464c:	str	r0, [sp, #60]	; 0x3c
   14650:	cmp	r0, #0
   14654:	blt	14710 <__assert_fail@plt+0x3440>
   14658:	ldr	r2, [r5, #44]	; 0x2c
   1465c:	movw	r3, #34464	; 0x86a0
   14660:	movt	r3, #1
   14664:	cmp	r2, #0
   14668:	mvnne	r3, #0
   1466c:	str	r3, [sp, #16]
   14670:	mov	r3, #1
   14674:	str	r3, [sp, #52]	; 0x34
   14678:	ldr	r3, [r9, #40]	; 0x28
   1467c:	sub	r1, r3, #1
   14680:	ldr	r2, [r9, #28]
   14684:	ldrb	r2, [r2, r1]
   14688:	cmp	r2, #47	; 0x2f
   1468c:	movne	r1, r3
   14690:	str	r1, [sp, #28]
   14694:	ldr	r3, [r5, #48]	; 0x30
   14698:	tst	r3, #4
   1469c:	moveq	r3, #0
   146a0:	streq	r3, [sp, #20]
   146a4:	beq	146c0 <__assert_fail@plt+0x33f0>
   146a8:	ldr	r3, [r5, #24]
   146ac:	add	r2, r3, r1
   146b0:	add	r2, r2, #1
   146b4:	str	r2, [sp, #20]
   146b8:	mov	r2, #47	; 0x2f
   146bc:	strb	r2, [r3, r1]
   146c0:	ldr	r3, [sp, #28]
   146c4:	add	sl, r3, #1
   146c8:	ldr	fp, [r5, #36]	; 0x24
   146cc:	sub	fp, fp, sl
   146d0:	ldr	r3, [r9, #48]	; 0x30
   146d4:	add	r3, r3, #1
   146d8:	str	r3, [sp, #12]
   146dc:	mov	r3, #0
   146e0:	str	r3, [sp, #36]	; 0x24
   146e4:	str	r3, [sp, #24]
   146e8:	str	r3, [sp]
   146ec:	mov	r8, r3
   146f0:	str	r3, [sp, #4]
   146f4:	movw	r3, #6548	; 0x1994
   146f8:	movt	r3, #258	; 0x102
   146fc:	str	r3, [sp, #44]	; 0x2c
   14700:	movw	r3, #19778	; 0x4d42
   14704:	movt	r3, #65363	; 0xff53
   14708:	str	r3, [sp, #48]	; 0x30
   1470c:	b	14cec <__assert_fail@plt+0x3a1c>
   14710:	ldr	r0, [r9, #12]
   14714:	bl	112c4 <closedir@plt>
   14718:	mov	r3, #0
   1471c:	str	r3, [r9, #12]
   14720:	ldr	r3, [sp, #32]
   14724:	cmp	r3, #3
   14728:	movne	r3, #0
   1472c:	strne	r3, [sp, #4]
   14730:	bne	14b9c <__assert_fail@plt+0x38cc>
   14734:	mov	r3, #4
   14738:	strh	r3, [r9, #56]	; 0x38
   1473c:	bl	11180 <__errno_location@plt>
   14740:	ldr	r3, [r0]
   14744:	str	r3, [r9, #32]
   14748:	mov	r3, #0
   1474c:	str	r3, [sp, #4]
   14750:	b	14b9c <__assert_fail@plt+0x38cc>
   14754:	ldr	r3, [r5, #48]	; 0x30
   14758:	and	r2, r3, #516	; 0x204
   1475c:	cmp	r2, #512	; 0x200
   14760:	ldreq	r0, [r5, #32]
   14764:	mvnne	r0, #99	; 0x63
   14768:	ldr	r1, [r9, #24]
   1476c:	ands	r2, r3, #16
   14770:	beq	1478c <__assert_fail@plt+0x34bc>
   14774:	tst	r3, #1
   14778:	moveq	r2, #32768	; 0x8000
   1477c:	beq	1478c <__assert_fail@plt+0x34bc>
   14780:	ldr	r2, [r9, #48]	; 0x30
   14784:	cmp	r2, #0
   14788:	movne	r2, #32768	; 0x8000
   1478c:	add	r3, sp, #60	; 0x3c
   14790:	bl	16fe0 <__assert_fail@plt+0x5d10>
   14794:	str	r0, [sp, #4]
   14798:	str	r0, [r9, #12]
   1479c:	cmp	r0, #0
   147a0:	beq	14874 <__assert_fail@plt+0x35a4>
   147a4:	ldrh	r3, [r9, #56]	; 0x38
   147a8:	cmp	r3, #11
   147ac:	beq	14898 <__assert_fail@plt+0x35c8>
   147b0:	ldr	r3, [r5, #48]	; 0x30
   147b4:	tst	r3, #256	; 0x100
   147b8:	bne	148b0 <__assert_fail@plt+0x35e0>
   147bc:	ldr	r2, [r5, #44]	; 0x2c
   147c0:	movw	r3, #34464	; 0x86a0
   147c4:	movt	r3, #1
   147c8:	cmp	r2, #0
   147cc:	mvnne	r3, #0
   147d0:	str	r3, [sp, #16]
   147d4:	ldr	r3, [sp, #32]
   147d8:	cmp	r3, #2
   147dc:	beq	149d4 <__assert_fail@plt+0x3704>
   147e0:	ldr	r3, [r5, #48]	; 0x30
   147e4:	and	r3, r3, #56	; 0x38
   147e8:	cmp	r3, #24
   147ec:	beq	148f8 <__assert_fail@plt+0x3628>
   147f0:	ldr	r3, [sp, #32]
   147f4:	cmp	r3, #3
   147f8:	movne	r4, #0
   147fc:	moveq	r4, #1
   14800:	mov	r6, #1
   14804:	ldr	r3, [r5, #48]	; 0x30
   14808:	tst	r3, #512	; 0x200
   1480c:	bne	14990 <__assert_fail@plt+0x36c0>
   14810:	ldr	r2, [sp, #60]	; 0x3c
   14814:	cmp	r2, #0
   14818:	bge	149a8 <__assert_fail@plt+0x36d8>
   1481c:	tst	r4, r6
   14820:	beq	14830 <__assert_fail@plt+0x3560>
   14824:	bl	11180 <__errno_location@plt>
   14828:	ldr	r3, [r0]
   1482c:	str	r3, [r9, #32]
   14830:	ldrh	r3, [r9, #58]	; 0x3a
   14834:	orr	r3, r3, #1
   14838:	strh	r3, [r9, #58]	; 0x3a
   1483c:	ldr	r0, [r9, #12]
   14840:	bl	112c4 <closedir@plt>
   14844:	mov	r3, #0
   14848:	str	r3, [r9, #12]
   1484c:	ldr	r3, [r5, #48]	; 0x30
   14850:	tst	r3, #512	; 0x200
   14854:	beq	14864 <__assert_fail@plt+0x3594>
   14858:	ldr	r0, [sp, #60]	; 0x3c
   1485c:	cmp	r0, #0
   14860:	bge	149cc <__assert_fail@plt+0x36fc>
   14864:	mov	r3, #0
   14868:	str	r3, [r9, #12]
   1486c:	str	r3, [sp, #52]	; 0x34
   14870:	b	14678 <__assert_fail@plt+0x33a8>
   14874:	ldr	r3, [sp, #32]
   14878:	cmp	r3, #3
   1487c:	bne	14b9c <__assert_fail@plt+0x38cc>
   14880:	mov	r3, #4
   14884:	strh	r3, [r9, #56]	; 0x38
   14888:	bl	11180 <__errno_location@plt>
   1488c:	ldr	r3, [r0]
   14890:	str	r3, [r9, #32]
   14894:	b	14b9c <__assert_fail@plt+0x38cc>
   14898:	mov	r2, #0
   1489c:	mov	r1, r9
   148a0:	mov	r0, r5
   148a4:	bl	13bc0 <__assert_fail@plt+0x28f0>
   148a8:	strh	r0, [r9, #56]	; 0x38
   148ac:	b	147bc <__assert_fail@plt+0x34ec>
   148b0:	mov	r1, r9
   148b4:	mov	r0, r5
   148b8:	bl	14550 <__assert_fail@plt+0x3280>
   148bc:	mov	r2, #0
   148c0:	mov	r1, r9
   148c4:	mov	r0, r5
   148c8:	bl	13bc0 <__assert_fail@plt+0x28f0>
   148cc:	mov	r1, r9
   148d0:	mov	r0, r5
   148d4:	bl	14180 <__assert_fail@plt+0x2eb0>
   148d8:	cmp	r0, #0
   148dc:	bne	147bc <__assert_fail@plt+0x34ec>
   148e0:	bl	11180 <__errno_location@plt>
   148e4:	mov	r3, #12
   148e8:	str	r3, [r0]
   148ec:	ldr	r3, [sp, #40]	; 0x28
   148f0:	str	r3, [sp, #4]
   148f4:	b	14b9c <__assert_fail@plt+0x38cc>
   148f8:	ldr	r3, [r9, #84]	; 0x54
   148fc:	cmp	r3, #2
   14900:	bne	147f0 <__assert_fail@plt+0x3520>
   14904:	ldr	r1, [sp, #60]	; 0x3c
   14908:	mov	r0, r9
   1490c:	bl	14054 <__assert_fail@plt+0x2d84>
   14910:	movw	r3, #26985	; 0x6969
   14914:	cmp	r0, r3
   14918:	beq	14978 <__assert_fail@plt+0x36a8>
   1491c:	bgt	1495c <__assert_fail@plt+0x368c>
   14920:	movw	r3, #19778	; 0x4d42
   14924:	movt	r3, #65363	; 0xff53
   14928:	cmp	r0, r3
   1492c:	beq	14978 <__assert_fail@plt+0x36a8>
   14930:	cmp	r0, #0
   14934:	beq	14978 <__assert_fail@plt+0x36a8>
   14938:	ldr	r3, [sp, #32]
   1493c:	cmp	r3, #3
   14940:	moveq	r4, #1
   14944:	movne	r4, #0
   14948:	movne	r3, #0
   1494c:	strne	r3, [sp, #52]	; 0x34
   14950:	bne	14678 <__assert_fail@plt+0x33a8>
   14954:	mov	r6, #0
   14958:	b	14804 <__assert_fail@plt+0x3534>
   1495c:	movw	r3, #40864	; 0x9fa0
   14960:	cmp	r0, r3
   14964:	beq	14978 <__assert_fail@plt+0x36a8>
   14968:	movw	r3, #16719	; 0x414f
   1496c:	movt	r3, #21318	; 0x5346
   14970:	cmp	r0, r3
   14974:	bne	14938 <__assert_fail@plt+0x3668>
   14978:	ldr	r3, [sp, #32]
   1497c:	cmp	r3, #3
   14980:	movne	r4, #0
   14984:	moveq	r4, #1
   14988:	mov	r6, #1
   1498c:	b	14804 <__assert_fail@plt+0x3534>
   14990:	mov	r2, #3
   14994:	movw	r1, #1030	; 0x406
   14998:	ldr	r0, [sp, #60]	; 0x3c
   1499c:	bl	1a388 <__assert_fail@plt+0x90b8>
   149a0:	str	r0, [sp, #60]	; 0x3c
   149a4:	b	14810 <__assert_fail@plt+0x3540>
   149a8:	mov	r3, #0
   149ac:	mov	r1, r9
   149b0:	mov	r0, r5
   149b4:	bl	14344 <__assert_fail@plt+0x3074>
   149b8:	cmp	r0, #0
   149bc:	moveq	r3, #1
   149c0:	streq	r3, [sp, #52]	; 0x34
   149c4:	beq	14678 <__assert_fail@plt+0x33a8>
   149c8:	b	1481c <__assert_fail@plt+0x354c>
   149cc:	bl	112a0 <close@plt>
   149d0:	b	14864 <__assert_fail@plt+0x3594>
   149d4:	mov	r3, #0
   149d8:	str	r3, [sp, #52]	; 0x34
   149dc:	b	14678 <__assert_fail@plt+0x33a8>
   149e0:	ldr	r3, [sp, #8]
   149e4:	ldr	r3, [r3]
   149e8:	cmp	r3, #0
   149ec:	beq	14a0c <__assert_fail@plt+0x373c>
   149f0:	str	r3, [r9, #32]
   149f4:	ldr	r3, [sp, #40]	; 0x28
   149f8:	orr	r3, r3, r8
   149fc:	cmp	r3, #0
   14a00:	movne	r3, #7
   14a04:	moveq	r3, #4
   14a08:	strh	r3, [r9, #56]	; 0x38
   14a0c:	ldr	r0, [r9, #12]
   14a10:	cmp	r0, #0
   14a14:	beq	14a24 <__assert_fail@plt+0x3754>
   14a18:	bl	112c4 <closedir@plt>
   14a1c:	mov	r3, #0
   14a20:	str	r3, [r9, #12]
   14a24:	ldr	r3, [sp, #24]
   14a28:	cmp	r3, #0
   14a2c:	bne	14eec <__assert_fail@plt+0x3c1c>
   14a30:	ldr	r3, [r5, #48]	; 0x30
   14a34:	tst	r3, #4
   14a38:	beq	14a64 <__assert_fail@plt+0x3794>
   14a3c:	ldr	r3, [r5, #36]	; 0x24
   14a40:	cmp	r8, #0
   14a44:	cmpne	r3, sl
   14a48:	bne	14a58 <__assert_fail@plt+0x3788>
   14a4c:	ldr	r3, [sp, #20]
   14a50:	sub	r3, r3, #1
   14a54:	str	r3, [sp, #20]
   14a58:	mov	r3, #0
   14a5c:	ldr	r2, [sp, #20]
   14a60:	strb	r3, [r2]
   14a64:	ldr	r3, [sp, #52]	; 0x34
   14a68:	ldr	r2, [sp, #40]	; 0x28
   14a6c:	cmp	r2, #0
   14a70:	movne	r3, #0
   14a74:	cmp	r3, #0
   14a78:	beq	14ab0 <__assert_fail@plt+0x37e0>
   14a7c:	ldr	r3, [sp, #32]
   14a80:	cmp	r8, #0
   14a84:	cmpne	r3, #1
   14a88:	bne	14ab8 <__assert_fail@plt+0x37e8>
   14a8c:	ldr	r3, [r9, #48]	; 0x30
   14a90:	cmp	r3, #0
   14a94:	bne	14f7c <__assert_fail@plt+0x3cac>
   14a98:	mov	r0, r5
   14a9c:	bl	142e0 <__assert_fail@plt+0x3010>
   14aa0:	adds	r0, r0, #0
   14aa4:	movne	r0, #1
   14aa8:	cmp	r0, #0
   14aac:	bne	14fa0 <__assert_fail@plt+0x3cd0>
   14ab0:	cmp	r8, #0
   14ab4:	beq	14fc8 <__assert_fail@plt+0x3cf8>
   14ab8:	ldr	r3, [sp, #36]	; 0x24
   14abc:	cmp	r3, #0
   14ac0:	bne	15000 <__assert_fail@plt+0x3d30>
   14ac4:	ldr	r3, [r5, #44]	; 0x2c
   14ac8:	cmp	r3, #0
   14acc:	cmpne	r8, #1
   14ad0:	bls	14b9c <__assert_fail@plt+0x38cc>
   14ad4:	mov	r2, r8
   14ad8:	ldr	r1, [sp, #4]
   14adc:	mov	r0, r5
   14ae0:	bl	13d30 <__assert_fail@plt+0x2a60>
   14ae4:	str	r0, [sp, #4]
   14ae8:	b	14b9c <__assert_fail@plt+0x38cc>
   14aec:	ldrb	r3, [r7, #20]
   14af0:	cmp	r3, #0
   14af4:	beq	14ee4 <__assert_fail@plt+0x3c14>
   14af8:	ldrh	r3, [r7, #20]
   14afc:	cmp	r3, #46	; 0x2e
   14b00:	bne	14d30 <__assert_fail@plt+0x3a60>
   14b04:	ldr	r4, [sp]
   14b08:	b	14ce8 <__assert_fail@plt+0x3a18>
   14b0c:	ldr	fp, [r5, #24]
   14b10:	ldr	r3, [sp, #28]
   14b14:	add	r1, r3, #2
   14b18:	add	r1, r1, r6
   14b1c:	mov	r0, r5
   14b20:	bl	13b3c <__assert_fail@plt+0x286c>
   14b24:	cmp	r0, #0
   14b28:	beq	14b58 <__assert_fail@plt+0x3888>
   14b2c:	ldr	r3, [r5, #24]
   14b30:	cmp	r3, fp
   14b34:	beq	14bbc <__assert_fail@plt+0x38ec>
   14b38:	ldr	r2, [r5, #48]	; 0x30
   14b3c:	tst	r2, #4
   14b40:	addne	r3, r3, sl
   14b44:	strne	r3, [sp, #20]
   14b48:	ldr	fp, [r5, #36]	; 0x24
   14b4c:	sub	fp, fp, sl
   14b50:	str	r0, [sp, #24]
   14b54:	b	14d60 <__assert_fail@plt+0x3a90>
   14b58:	ldr	r7, [sp, #8]
   14b5c:	ldr	r6, [r7]
   14b60:	mov	r0, r4
   14b64:	bl	13924 <__assert_fail@plt+0x2654>
   14b68:	ldr	r0, [sp, #4]
   14b6c:	bl	13f84 <__assert_fail@plt+0x2cb4>
   14b70:	ldr	r0, [r9, #12]
   14b74:	bl	112c4 <closedir@plt>
   14b78:	mov	r2, #0
   14b7c:	str	r2, [r9, #12]
   14b80:	mov	r3, #7
   14b84:	strh	r3, [r9, #56]	; 0x38
   14b88:	ldr	r3, [r5, #48]	; 0x30
   14b8c:	orr	r3, r3, #8192	; 0x2000
   14b90:	str	r3, [r5, #48]	; 0x30
   14b94:	str	r6, [r7]
   14b98:	str	r2, [sp, #4]
   14b9c:	ldr	r0, [sp, #4]
   14ba0:	add	sp, sp, #68	; 0x44
   14ba4:	ldrd	r4, [sp]
   14ba8:	ldrd	r6, [sp, #8]
   14bac:	ldrd	r8, [sp, #16]
   14bb0:	ldrd	sl, [sp, #24]
   14bb4:	add	sp, sp, #32
   14bb8:	pop	{pc}		; (ldr pc, [sp], #4)
   14bbc:	ldr	r0, [sp, #24]
   14bc0:	b	14b48 <__assert_fail@plt+0x3878>
   14bc4:	mov	r0, r4
   14bc8:	bl	13924 <__assert_fail@plt+0x2654>
   14bcc:	ldr	r0, [sp, #4]
   14bd0:	bl	13f84 <__assert_fail@plt+0x2cb4>
   14bd4:	ldr	r0, [r9, #12]
   14bd8:	bl	112c4 <closedir@plt>
   14bdc:	mov	r2, #0
   14be0:	str	r2, [r9, #12]
   14be4:	mov	r3, #7
   14be8:	strh	r3, [r9, #56]	; 0x38
   14bec:	ldr	r3, [r5, #48]	; 0x30
   14bf0:	orr	r3, r3, #8192	; 0x2000
   14bf4:	str	r3, [r5, #48]	; 0x30
   14bf8:	mov	r3, #36	; 0x24
   14bfc:	ldr	r1, [sp, #8]
   14c00:	str	r3, [r1]
   14c04:	str	r2, [sp, #4]
   14c08:	b	14b9c <__assert_fail@plt+0x38cc>
   14c0c:	ldr	r3, [r4, #28]
   14c10:	str	r3, [r4, #24]
   14c14:	ldr	r2, [r4, #52]	; 0x34
   14c18:	add	r2, r2, #1
   14c1c:	add	r1, r4, #168	; 0xa8
   14c20:	ldr	r0, [sp, #20]
   14c24:	bl	11000 <memmove@plt>
   14c28:	b	14d98 <__assert_fail@plt+0x3ac8>
   14c2c:	ubfx	r3, r3, #4, #1
   14c30:	cmp	r2, #10
   14c34:	orrne	r3, r3, #1
   14c38:	cmp	r3, #0
   14c3c:	beq	14dc8 <__assert_fail@plt+0x3af8>
   14c40:	mov	r2, #11
   14c44:	strh	r2, [r4, #56]	; 0x38
   14c48:	ldrb	r2, [r7, #18]
   14c4c:	sub	r2, r2, #1
   14c50:	cmp	r2, #11
   14c54:	ldrls	pc, [pc, r2, lsl #2]
   14c58:	b	14e54 <__assert_fail@plt+0x3b84>
   14c5c:	andeq	r4, r1, r4, lsr #28
   14c60:	muleq	r1, r0, ip
   14c64:	andeq	r4, r1, r4, asr lr
   14c68:	andeq	r4, r1, r8, lsl lr
   14c6c:	andeq	r4, r1, r4, asr lr
   14c70:	andeq	r5, r1, ip, lsr #32
   14c74:	andeq	r4, r1, r4, asr lr
   14c78:	andeq	r4, r1, ip, lsr lr
   14c7c:	andeq	r4, r1, r4, asr lr
   14c80:	andeq	r4, r1, r0, lsr lr
   14c84:	andeq	r4, r1, r4, asr lr
   14c88:	andeq	r4, r1, r8, asr #28
   14c8c:	mov	r3, #0
   14c90:	mov	r2, #8192	; 0x2000
   14c94:	str	r2, [r4, #80]	; 0x50
   14c98:	cmp	r3, #0
   14c9c:	movne	r2, #1
   14ca0:	moveq	r2, #2
   14ca4:	mov	r3, #0
   14ca8:	str	r2, [r4, #112]	; 0x70
   14cac:	str	r3, [r4, #116]	; 0x74
   14cb0:	mov	r3, #0
   14cb4:	str	r3, [r4, #8]
   14cb8:	ldr	r3, [sp, #4]
   14cbc:	cmp	r3, #0
   14cc0:	ldrne	r3, [sp]
   14cc4:	strne	r4, [r3, #8]
   14cc8:	streq	r4, [sp, #4]
   14ccc:	movw	r3, #10000	; 0x2710
   14cd0:	cmp	r8, r3
   14cd4:	beq	14e74 <__assert_fail@plt+0x3ba4>
   14cd8:	add	r8, r8, #1
   14cdc:	ldr	r3, [sp, #16]
   14ce0:	cmp	r8, r3
   14ce4:	bcs	14a24 <__assert_fail@plt+0x3754>
   14ce8:	str	r4, [sp]
   14cec:	ldr	r3, [r9, #12]
   14cf0:	cmp	r3, #0
   14cf4:	beq	14a24 <__assert_fail@plt+0x3754>
   14cf8:	bl	11180 <__errno_location@plt>
   14cfc:	str	r0, [sp, #8]
   14d00:	mov	r3, #0
   14d04:	str	r3, [r0]
   14d08:	ldr	r0, [r9, #12]
   14d0c:	bl	11228 <readdir64@plt>
   14d10:	subs	r7, r0, #0
   14d14:	beq	149e0 <__assert_fail@plt+0x3710>
   14d18:	ldr	r3, [r5, #48]	; 0x30
   14d1c:	tst	r3, #32
   14d20:	bne	14d30 <__assert_fail@plt+0x3a60>
   14d24:	ldrb	r3, [r7, #19]
   14d28:	cmp	r3, #46	; 0x2e
   14d2c:	beq	14aec <__assert_fail@plt+0x381c>
   14d30:	add	r4, r7, #19
   14d34:	mov	r0, r4
   14d38:	bl	11168 <strlen@plt>
   14d3c:	mov	r6, r0
   14d40:	mov	r2, r0
   14d44:	mov	r1, r4
   14d48:	mov	r0, r5
   14d4c:	bl	13e20 <__assert_fail@plt+0x2b50>
   14d50:	subs	r4, r0, #0
   14d54:	beq	14b58 <__assert_fail@plt+0x3888>
   14d58:	cmp	fp, r6
   14d5c:	bls	14b0c <__assert_fail@plt+0x383c>
   14d60:	adds	r6, sl, r6
   14d64:	bcs	14bc4 <__assert_fail@plt+0x38f4>
   14d68:	ldr	r3, [sp, #12]
   14d6c:	str	r3, [r4, #48]	; 0x30
   14d70:	ldr	r3, [r5]
   14d74:	str	r3, [r4, #4]
   14d78:	str	r6, [r4, #40]	; 0x28
   14d7c:	ldrd	r2, [r7]
   14d80:	strd	r2, [r4, #160]	; 0xa0
   14d84:	ldr	r3, [r5, #48]	; 0x30
   14d88:	tst	r3, #4
   14d8c:	addeq	r3, r4, #168	; 0xa8
   14d90:	streq	r3, [r4, #24]
   14d94:	bne	14c0c <__assert_fail@plt+0x393c>
   14d98:	ldr	r3, [r5, #44]	; 0x2c
   14d9c:	cmp	r3, #0
   14da0:	beq	14db0 <__assert_fail@plt+0x3ae0>
   14da4:	ldr	r3, [r5, #48]	; 0x30
   14da8:	tst	r3, #1024	; 0x400
   14dac:	beq	14e5c <__assert_fail@plt+0x3b8c>
   14db0:	ldr	r3, [r5, #48]	; 0x30
   14db4:	tst	r3, #8
   14db8:	beq	14dc8 <__assert_fail@plt+0x3af8>
   14dbc:	ldrb	r2, [r7, #18]
   14dc0:	tst	r2, #251	; 0xfb
   14dc4:	bne	14c2c <__assert_fail@plt+0x395c>
   14dc8:	mov	r3, #11
   14dcc:	strh	r3, [r4, #56]	; 0x38
   14dd0:	ldrb	r3, [r7, #18]
   14dd4:	sub	r3, r3, #1
   14dd8:	cmp	r3, #11
   14ddc:	ldrls	pc, [pc, r3, lsl #2]
   14de0:	b	14e50 <__assert_fail@plt+0x3b80>
   14de4:	andeq	r4, r1, r0, lsr #28
   14de8:	andeq	r4, r1, ip, lsl #25
   14dec:	andeq	r4, r1, r0, asr lr
   14df0:	andeq	r4, r1, r4, lsl lr
   14df4:	andeq	r4, r1, r0, asr lr
   14df8:	andeq	r5, r1, r0, asr #32
   14dfc:	andeq	r4, r1, r0, asr lr
   14e00:	andeq	r4, r1, r8, lsr lr
   14e04:	andeq	r4, r1, r0, asr lr
   14e08:	andeq	r4, r1, ip, lsr #28
   14e0c:	andeq	r4, r1, r0, asr lr
   14e10:	andeq	r4, r1, r4, asr #28
   14e14:	mov	r3, #0
   14e18:	mov	r2, #16384	; 0x4000
   14e1c:	b	14c94 <__assert_fail@plt+0x39c4>
   14e20:	mov	r3, #0
   14e24:	mov	r2, #4096	; 0x1000
   14e28:	b	14c94 <__assert_fail@plt+0x39c4>
   14e2c:	mov	r3, #0
   14e30:	mov	r2, #40960	; 0xa000
   14e34:	b	14c94 <__assert_fail@plt+0x39c4>
   14e38:	mov	r3, #0
   14e3c:	mov	r2, #32768	; 0x8000
   14e40:	b	14c94 <__assert_fail@plt+0x39c4>
   14e44:	mov	r3, #0
   14e48:	mov	r2, #49152	; 0xc000
   14e4c:	b	14c94 <__assert_fail@plt+0x39c4>
   14e50:	mov	r3, #0
   14e54:	mov	r2, #0
   14e58:	b	14c94 <__assert_fail@plt+0x39c4>
   14e5c:	mov	r2, #0
   14e60:	mov	r1, r4
   14e64:	mov	r0, r5
   14e68:	bl	13bc0 <__assert_fail@plt+0x28f0>
   14e6c:	strh	r0, [r4, #56]	; 0x38
   14e70:	b	14cb0 <__assert_fail@plt+0x39e0>
   14e74:	ldr	r3, [r5, #44]	; 0x2c
   14e78:	cmp	r3, #0
   14e7c:	beq	14e88 <__assert_fail@plt+0x3bb8>
   14e80:	movw	r8, #10001	; 0x2711
   14e84:	b	14ce8 <__assert_fail@plt+0x3a18>
   14e88:	ldr	r1, [sp, #60]	; 0x3c
   14e8c:	mov	r0, r9
   14e90:	bl	14054 <__assert_fail@plt+0x2d84>
   14e94:	movw	r3, #26985	; 0x6969
   14e98:	cmp	r0, r3
   14e9c:	beq	14ecc <__assert_fail@plt+0x3bfc>
   14ea0:	ldr	r3, [sp, #44]	; 0x2c
   14ea4:	cmp	r0, r3
   14ea8:	beq	14ed8 <__assert_fail@plt+0x3c08>
   14eac:	ldr	r3, [sp, #48]	; 0x30
   14eb0:	cmp	r0, r3
   14eb4:	moveq	r3, #0
   14eb8:	streq	r3, [sp, #36]	; 0x24
   14ebc:	beq	14cd8 <__assert_fail@plt+0x3a08>
   14ec0:	mov	r3, #1
   14ec4:	str	r3, [sp, #36]	; 0x24
   14ec8:	b	14e80 <__assert_fail@plt+0x3bb0>
   14ecc:	mov	r3, #0
   14ed0:	str	r3, [sp, #36]	; 0x24
   14ed4:	b	14cd8 <__assert_fail@plt+0x3a08>
   14ed8:	mov	r3, #0
   14edc:	str	r3, [sp, #36]	; 0x24
   14ee0:	b	14cd8 <__assert_fail@plt+0x3a08>
   14ee4:	ldr	r4, [sp]
   14ee8:	b	14ce8 <__assert_fail@plt+0x3a18>
   14eec:	ldr	r1, [r5, #24]
   14ef0:	ldr	r3, [r5, #4]
   14ef4:	cmp	r3, #0
   14ef8:	bne	14f14 <__assert_fail@plt+0x3c44>
   14efc:	ldr	r3, [sp, #4]
   14f00:	b	14f4c <__assert_fail@plt+0x3c7c>
   14f04:	str	r1, [r3, #28]
   14f08:	ldr	r3, [r3, #8]
   14f0c:	cmp	r3, #0
   14f10:	beq	14efc <__assert_fail@plt+0x3c2c>
   14f14:	ldr	r2, [r3, #24]
   14f18:	add	r0, r3, #168	; 0xa8
   14f1c:	cmp	r2, r0
   14f20:	beq	14f04 <__assert_fail@plt+0x3c34>
   14f24:	ldr	r0, [r3, #28]
   14f28:	sub	r2, r2, r0
   14f2c:	add	r2, r1, r2
   14f30:	str	r2, [r3, #24]
   14f34:	b	14f04 <__assert_fail@plt+0x3c34>
   14f38:	str	r1, [r3, #28]
   14f3c:	ldr	r2, [r3, #8]
   14f40:	cmp	r2, #0
   14f44:	ldreq	r2, [r3, #4]
   14f48:	mov	r3, r2
   14f4c:	ldr	r2, [r3, #48]	; 0x30
   14f50:	cmp	r2, #0
   14f54:	blt	14a30 <__assert_fail@plt+0x3760>
   14f58:	ldr	r2, [r3, #24]
   14f5c:	add	r0, r3, #168	; 0xa8
   14f60:	cmp	r2, r0
   14f64:	beq	14f38 <__assert_fail@plt+0x3c68>
   14f68:	ldr	r0, [r3, #28]
   14f6c:	sub	r2, r2, r0
   14f70:	add	r2, r1, r2
   14f74:	str	r2, [r3, #24]
   14f78:	b	14f38 <__assert_fail@plt+0x3c68>
   14f7c:	movw	r3, #47088	; 0xb7f0
   14f80:	movt	r3, #1
   14f84:	mvn	r2, #0
   14f88:	ldr	r1, [r9, #4]
   14f8c:	mov	r0, r5
   14f90:	bl	14344 <__assert_fail@plt+0x3074>
   14f94:	adds	r0, r0, #0
   14f98:	movne	r0, #1
   14f9c:	b	14aa8 <__assert_fail@plt+0x37d8>
   14fa0:	mov	r3, #7
   14fa4:	strh	r3, [r9, #56]	; 0x38
   14fa8:	ldr	r3, [r5, #48]	; 0x30
   14fac:	orr	r3, r3, #8192	; 0x2000
   14fb0:	str	r3, [r5, #48]	; 0x30
   14fb4:	ldr	r0, [sp, #4]
   14fb8:	bl	13f84 <__assert_fail@plt+0x2cb4>
   14fbc:	mov	r3, #0
   14fc0:	str	r3, [sp, #4]
   14fc4:	b	14b9c <__assert_fail@plt+0x38cc>
   14fc8:	ldr	r3, [sp, #32]
   14fcc:	cmp	r3, #3
   14fd0:	beq	14fe8 <__assert_fail@plt+0x3d18>
   14fd4:	ldr	r0, [sp, #4]
   14fd8:	bl	13f84 <__assert_fail@plt+0x2cb4>
   14fdc:	mov	r3, #0
   14fe0:	str	r3, [sp, #4]
   14fe4:	b	14b9c <__assert_fail@plt+0x38cc>
   14fe8:	ldrh	r3, [r9, #56]	; 0x38
   14fec:	cmp	r3, #7
   14ff0:	cmpne	r3, #4
   14ff4:	movne	r3, #6
   14ff8:	strhne	r3, [r9, #56]	; 0x38
   14ffc:	b	14fd4 <__assert_fail@plt+0x3d04>
   15000:	movw	r3, #15104	; 0x3b00
   15004:	movt	r3, #1
   15008:	str	r3, [r5, #44]	; 0x2c
   1500c:	mov	r2, r8
   15010:	ldr	r1, [sp, #4]
   15014:	mov	r0, r5
   15018:	bl	13d30 <__assert_fail@plt+0x2a60>
   1501c:	str	r0, [sp, #4]
   15020:	mov	r3, #0
   15024:	str	r3, [r5, #44]	; 0x2c
   15028:	b	14b9c <__assert_fail@plt+0x38cc>
   1502c:	mov	r3, #24576	; 0x6000
   15030:	str	r3, [r4, #80]	; 0x50
   15034:	mov	r2, #1
   15038:	mov	r3, #0
   1503c:	b	14ca8 <__assert_fail@plt+0x39d8>
   15040:	mov	r3, #24576	; 0x6000
   15044:	str	r3, [r4, #80]	; 0x50
   15048:	mov	r2, #2
   1504c:	mov	r3, #0
   15050:	b	14ca8 <__assert_fail@plt+0x39d8>
   15054:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15058:	strd	r6, [sp, #8]
   1505c:	strd	r8, [sp, #16]
   15060:	strd	sl, [sp, #24]
   15064:	str	lr, [sp, #32]
   15068:	sub	sp, sp, #20
   1506c:	bic	r3, r1, #4080	; 0xff0
   15070:	bic	r3, r3, #15
   15074:	cmp	r3, #0
   15078:	bne	15158 <__assert_fail@plt+0x3e88>
   1507c:	mov	r6, r0
   15080:	mov	r9, r1
   15084:	mov	sl, r2
   15088:	and	r3, r1, #516	; 0x204
   1508c:	cmp	r3, #516	; 0x204
   15090:	beq	1516c <__assert_fail@plt+0x3e9c>
   15094:	tst	r1, #18
   15098:	beq	15180 <__assert_fail@plt+0x3eb0>
   1509c:	mov	r1, #96	; 0x60
   150a0:	mov	r0, #1
   150a4:	bl	1a028 <__assert_fail@plt+0x8d58>
   150a8:	subs	r5, r0, #0
   150ac:	beq	153a8 <__assert_fail@plt+0x40d8>
   150b0:	str	sl, [r5, #44]	; 0x2c
   150b4:	tst	r9, #2
   150b8:	streq	r9, [r5, #48]	; 0x30
   150bc:	bicne	r3, r9, #512	; 0x200
   150c0:	orrne	r3, r3, #4
   150c4:	strne	r3, [r5, #48]	; 0x30
   150c8:	mvn	r3, #99	; 0x63
   150cc:	str	r3, [r5, #32]
   150d0:	ldr	r0, [r6]
   150d4:	cmp	r0, #0
   150d8:	beq	15194 <__assert_fail@plt+0x3ec4>
   150dc:	mov	r7, r6
   150e0:	mov	r4, #0
   150e4:	bl	11168 <strlen@plt>
   150e8:	cmp	r4, r0
   150ec:	movcc	r4, r0
   150f0:	ldr	r0, [r7, #4]!
   150f4:	cmp	r0, #0
   150f8:	bne	150e4 <__assert_fail@plt+0x3e14>
   150fc:	add	r1, r4, #1
   15100:	cmp	r1, #4096	; 0x1000
   15104:	movcc	r1, #4096	; 0x1000
   15108:	mov	r0, r5
   1510c:	bl	13b3c <__assert_fail@plt+0x286c>
   15110:	cmp	r0, #0
   15114:	beq	1539c <__assert_fail@plt+0x40cc>
   15118:	ldr	fp, [r6]
   1511c:	cmp	fp, #0
   15120:	beq	153c8 <__assert_fail@plt+0x40f8>
   15124:	mov	r2, #0
   15128:	movw	r1, #48112	; 0xbbf0
   1512c:	movt	r1, #1
   15130:	mov	r0, r5
   15134:	bl	13e20 <__assert_fail@plt+0x2b50>
   15138:	subs	fp, r0, #0
   1513c:	beq	15394 <__assert_fail@plt+0x40c4>
   15140:	mvn	r3, #0
   15144:	str	r3, [fp, #48]	; 0x30
   15148:	cmp	sl, #0
   1514c:	moveq	r3, #1
   15150:	bne	153d0 <__assert_fail@plt+0x4100>
   15154:	b	153d8 <__assert_fail@plt+0x4108>
   15158:	bl	11180 <__errno_location@plt>
   1515c:	mov	r3, #22
   15160:	str	r3, [r0]
   15164:	mov	r5, #0
   15168:	b	153a8 <__assert_fail@plt+0x40d8>
   1516c:	bl	11180 <__errno_location@plt>
   15170:	mov	r3, #22
   15174:	str	r3, [r0]
   15178:	mov	r5, #0
   1517c:	b	153a8 <__assert_fail@plt+0x40d8>
   15180:	bl	11180 <__errno_location@plt>
   15184:	mov	r3, #22
   15188:	str	r3, [r0]
   1518c:	mov	r5, #0
   15190:	b	153a8 <__assert_fail@plt+0x40d8>
   15194:	mov	r4, #0
   15198:	b	150fc <__assert_fail@plt+0x3e2c>
   1519c:	sub	r1, r0, #1
   151a0:	ldrb	r3, [r4, r1]
   151a4:	cmp	r3, #47	; 0x2f
   151a8:	bne	15234 <__assert_fail@plt+0x3f64>
   151ac:	sub	r0, r0, #2
   151b0:	add	r3, r4, r0
   151b4:	ldrb	r0, [r4, r0]
   151b8:	cmp	r0, #47	; 0x2f
   151bc:	moveq	r2, r1
   151c0:	bne	15234 <__assert_fail@plt+0x3f64>
   151c4:	ldrb	r1, [r3, #-1]!
   151c8:	cmp	r1, #47	; 0x2f
   151cc:	bne	15234 <__assert_fail@plt+0x3f64>
   151d0:	sub	r2, r2, #1
   151d4:	cmp	r2, #1
   151d8:	bhi	151c4 <__assert_fail@plt+0x3ef4>
   151dc:	b	15234 <__assert_fail@plt+0x3f64>
   151e0:	mov	r2, r9
   151e4:	mov	r1, r4
   151e8:	ldr	r0, [sp, #4]
   151ec:	bl	13bc0 <__assert_fail@plt+0x28f0>
   151f0:	strh	r0, [r4, #56]	; 0x38
   151f4:	cmp	sl, #0
   151f8:	beq	1529c <__assert_fail@plt+0x3fcc>
   151fc:	str	r7, [r4, #8]
   15200:	mov	r7, r4
   15204:	add	r8, r8, #1
   15208:	ldr	r4, [r6, #4]!
   1520c:	cmp	r4, #0
   15210:	beq	152b4 <__assert_fail@plt+0x3fe4>
   15214:	mov	r0, r4
   15218:	bl	11168 <strlen@plt>
   1521c:	mov	r2, r0
   15220:	cmp	r0, #2
   15224:	movls	r3, #0
   15228:	andhi	r3, r5, #1
   1522c:	cmp	r3, #0
   15230:	bne	1519c <__assert_fail@plt+0x3ecc>
   15234:	mov	r1, r4
   15238:	ldr	r0, [sp, #4]
   1523c:	bl	13e20 <__assert_fail@plt+0x2b50>
   15240:	subs	r4, r0, #0
   15244:	beq	15380 <__assert_fail@plt+0x40b0>
   15248:	str	r9, [r4, #48]	; 0x30
   1524c:	str	fp, [r4, #4]
   15250:	add	r3, r4, #168	; 0xa8
   15254:	str	r3, [r4, #24]
   15258:	ldr	r3, [sp, #8]
   1525c:	cmp	r7, #0
   15260:	moveq	r3, #0
   15264:	cmp	r3, #0
   15268:	beq	151e0 <__assert_fail@plt+0x3f10>
   1526c:	mov	r3, #11
   15270:	strh	r3, [r4, #56]	; 0x38
   15274:	mov	r2, #2
   15278:	mov	r3, #0
   1527c:	strd	r2, [r4, #112]	; 0x70
   15280:	cmp	sl, #0
   15284:	bne	151fc <__assert_fail@plt+0x3f2c>
   15288:	str	r9, [r4, #8]
   1528c:	ldr	r3, [sp, #12]
   15290:	str	r4, [r3, #8]
   15294:	str	r4, [sp, #12]
   15298:	b	15204 <__assert_fail@plt+0x3f34>
   1529c:	str	r9, [r4, #8]
   152a0:	cmp	r7, #0
   152a4:	streq	r4, [sp, #12]
   152a8:	moveq	r7, r4
   152ac:	beq	15204 <__assert_fail@plt+0x3f34>
   152b0:	b	1528c <__assert_fail@plt+0x3fbc>
   152b4:	ldr	r5, [sp, #4]
   152b8:	cmp	sl, #0
   152bc:	cmpne	r8, #1
   152c0:	bhi	1532c <__assert_fail@plt+0x405c>
   152c4:	mov	r2, #0
   152c8:	movw	r1, #48112	; 0xbbf0
   152cc:	movt	r1, #1
   152d0:	mov	r0, r5
   152d4:	bl	13e20 <__assert_fail@plt+0x2b50>
   152d8:	str	r0, [r5]
   152dc:	cmp	r0, #0
   152e0:	beq	15384 <__assert_fail@plt+0x40b4>
   152e4:	str	r7, [r0, #8]
   152e8:	ldr	r3, [r5]
   152ec:	mov	r2, #9
   152f0:	strh	r2, [r3, #56]	; 0x38
   152f4:	ldr	r3, [r5]
   152f8:	mov	r2, #1
   152fc:	str	r2, [r3, #48]	; 0x30
   15300:	mov	r0, r5
   15304:	bl	13eb0 <__assert_fail@plt+0x2be0>
   15308:	cmp	r0, #0
   1530c:	beq	15384 <__assert_fail@plt+0x40b4>
   15310:	ldr	r3, [r5, #48]	; 0x30
   15314:	tst	r3, #516	; 0x204
   15318:	beq	15354 <__assert_fail@plt+0x4084>
   1531c:	mvn	r1, #0
   15320:	add	r0, r5, #60	; 0x3c
   15324:	bl	16ed4 <__assert_fail@plt+0x5c04>
   15328:	b	153a8 <__assert_fail@plt+0x40d8>
   1532c:	mov	r2, r8
   15330:	mov	r1, r7
   15334:	mov	r0, r5
   15338:	bl	13d30 <__assert_fail@plt+0x2a60>
   1533c:	mov	r7, r0
   15340:	b	152c4 <__assert_fail@plt+0x3ff4>
   15344:	mov	r7, r4
   15348:	b	152c4 <__assert_fail@plt+0x3ff4>
   1534c:	mov	r7, fp
   15350:	b	152c4 <__assert_fail@plt+0x3ff4>
   15354:	movw	r1, #47084	; 0xb7ec
   15358:	movt	r1, #1
   1535c:	mov	r0, r5
   15360:	bl	13f38 <__assert_fail@plt+0x2c68>
   15364:	str	r0, [r5, #28]
   15368:	cmp	r0, #0
   1536c:	bge	1531c <__assert_fail@plt+0x404c>
   15370:	ldr	r3, [r5, #48]	; 0x30
   15374:	orr	r3, r3, #4
   15378:	str	r3, [r5, #48]	; 0x30
   1537c:	b	1531c <__assert_fail@plt+0x404c>
   15380:	ldr	r5, [sp, #4]
   15384:	mov	r0, r7
   15388:	bl	13f84 <__assert_fail@plt+0x2cb4>
   1538c:	mov	r0, fp
   15390:	bl	13924 <__assert_fail@plt+0x2654>
   15394:	ldr	r0, [r5, #24]
   15398:	bl	13924 <__assert_fail@plt+0x2654>
   1539c:	mov	r0, r5
   153a0:	bl	13924 <__assert_fail@plt+0x2654>
   153a4:	mov	r5, #0
   153a8:	mov	r0, r5
   153ac:	add	sp, sp, #20
   153b0:	ldrd	r4, [sp]
   153b4:	ldrd	r6, [sp, #8]
   153b8:	ldrd	r8, [sp, #16]
   153bc:	ldrd	sl, [sp, #24]
   153c0:	add	sp, sp, #32
   153c4:	pop	{pc}		; (ldr pc, [sp], #4)
   153c8:	cmp	sl, #0
   153cc:	beq	1534c <__assert_fail@plt+0x407c>
   153d0:	ldr	r3, [r5, #48]	; 0x30
   153d4:	ubfx	r3, r3, #10, #1
   153d8:	str	r3, [sp, #8]
   153dc:	ldr	r4, [r6]
   153e0:	cmp	r4, #0
   153e4:	beq	15344 <__assert_fail@plt+0x4074>
   153e8:	mov	r3, #0
   153ec:	mov	r7, r3
   153f0:	str	r3, [sp, #12]
   153f4:	mov	r8, r3
   153f8:	eor	r9, r9, #2048	; 0x800
   153fc:	ubfx	r3, r9, #11, #1
   15400:	mov	r9, r7
   15404:	str	r5, [sp, #4]
   15408:	mov	r5, r3
   1540c:	b	15214 <__assert_fail@plt+0x3f44>
   15410:	strd	r4, [sp, #-16]!
   15414:	str	r6, [sp, #8]
   15418:	str	lr, [sp, #12]
   1541c:	mov	r5, r0
   15420:	ldr	r0, [r0]
   15424:	cmp	r0, #0
   15428:	beq	15460 <__assert_fail@plt+0x4190>
   1542c:	ldr	r3, [r0, #48]	; 0x30
   15430:	cmp	r3, #0
   15434:	blt	154b0 <__assert_fail@plt+0x41e0>
   15438:	ldr	r4, [r0, #8]
   1543c:	cmp	r4, #0
   15440:	ldreq	r4, [r0, #4]
   15444:	bl	13924 <__assert_fail@plt+0x2654>
   15448:	mov	r0, r4
   1544c:	ldr	r3, [r4, #48]	; 0x30
   15450:	cmp	r3, #0
   15454:	bge	15438 <__assert_fail@plt+0x4168>
   15458:	mov	r0, r4
   1545c:	bl	13924 <__assert_fail@plt+0x2654>
   15460:	ldr	r0, [r5, #4]
   15464:	cmp	r0, #0
   15468:	beq	15470 <__assert_fail@plt+0x41a0>
   1546c:	bl	13f84 <__assert_fail@plt+0x2cb4>
   15470:	ldr	r0, [r5, #8]
   15474:	bl	13924 <__assert_fail@plt+0x2654>
   15478:	ldr	r0, [r5, #24]
   1547c:	bl	13924 <__assert_fail@plt+0x2654>
   15480:	ldr	r3, [r5, #48]	; 0x30
   15484:	tst	r3, #512	; 0x200
   15488:	beq	154b8 <__assert_fail@plt+0x41e8>
   1548c:	ldr	r0, [r5, #32]
   15490:	cmp	r0, #0
   15494:	blt	154c0 <__assert_fail@plt+0x41f0>
   15498:	bl	112a0 <close@plt>
   1549c:	cmp	r0, #0
   154a0:	beq	154c0 <__assert_fail@plt+0x41f0>
   154a4:	bl	11180 <__errno_location@plt>
   154a8:	ldr	r4, [r0]
   154ac:	b	15540 <__assert_fail@plt+0x4270>
   154b0:	mov	r4, r0
   154b4:	b	15458 <__assert_fail@plt+0x4188>
   154b8:	tst	r3, #4
   154bc:	beq	15508 <__assert_fail@plt+0x4238>
   154c0:	add	r0, r5, #60	; 0x3c
   154c4:	bl	14014 <__assert_fail@plt+0x2d44>
   154c8:	ldr	r0, [r5, #52]	; 0x34
   154cc:	cmp	r0, #0
   154d0:	movne	r4, #0
   154d4:	beq	15574 <__assert_fail@plt+0x42a4>
   154d8:	bl	16978 <__assert_fail@plt+0x56a8>
   154dc:	mov	r0, r5
   154e0:	bl	13fd4 <__assert_fail@plt+0x2d04>
   154e4:	mov	r0, r5
   154e8:	bl	13924 <__assert_fail@plt+0x2654>
   154ec:	cmp	r4, #0
   154f0:	bne	15564 <__assert_fail@plt+0x4294>
   154f4:	mov	r0, r4
   154f8:	ldrd	r4, [sp]
   154fc:	ldr	r6, [sp, #8]
   15500:	add	sp, sp, #12
   15504:	pop	{pc}		; (ldr pc, [sp], #4)
   15508:	ldr	r0, [r5, #28]
   1550c:	bl	1124c <fchdir@plt>
   15510:	subs	r4, r0, #0
   15514:	beq	15520 <__assert_fail@plt+0x4250>
   15518:	bl	11180 <__errno_location@plt>
   1551c:	ldr	r4, [r0]
   15520:	ldr	r0, [r5, #28]
   15524:	bl	112a0 <close@plt>
   15528:	adds	r0, r0, #0
   1552c:	movne	r0, #1
   15530:	cmp	r4, #0
   15534:	movne	r0, #0
   15538:	cmp	r0, #0
   1553c:	bne	15558 <__assert_fail@plt+0x4288>
   15540:	add	r0, r5, #60	; 0x3c
   15544:	bl	14014 <__assert_fail@plt+0x2d44>
   15548:	ldr	r0, [r5, #52]	; 0x34
   1554c:	cmp	r0, #0
   15550:	bne	154d8 <__assert_fail@plt+0x4208>
   15554:	b	154dc <__assert_fail@plt+0x420c>
   15558:	bl	11180 <__errno_location@plt>
   1555c:	ldr	r4, [r0]
   15560:	b	15540 <__assert_fail@plt+0x4270>
   15564:	bl	11180 <__errno_location@plt>
   15568:	str	r4, [r0]
   1556c:	mvn	r4, #0
   15570:	b	154f4 <__assert_fail@plt+0x4224>
   15574:	mov	r0, r5
   15578:	bl	13fd4 <__assert_fail@plt+0x2d04>
   1557c:	mov	r0, r5
   15580:	bl	13924 <__assert_fail@plt+0x2654>
   15584:	mov	r4, #0
   15588:	b	154f4 <__assert_fail@plt+0x4224>
   1558c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15590:	strd	r6, [sp, #8]
   15594:	str	r8, [sp, #16]
   15598:	str	lr, [sp, #20]
   1559c:	ldr	r5, [r0]
   155a0:	cmp	r5, #0
   155a4:	beq	15c04 <__assert_fail@plt+0x4934>
   155a8:	ldr	r3, [r0, #48]	; 0x30
   155ac:	tst	r3, #8192	; 0x2000
   155b0:	bne	15c00 <__assert_fail@plt+0x4930>
   155b4:	mov	r8, r0
   155b8:	ldrh	r3, [r5, #60]	; 0x3c
   155bc:	mov	r2, #3
   155c0:	strh	r2, [r5, #60]	; 0x3c
   155c4:	cmp	r3, #1
   155c8:	beq	15644 <__assert_fail@plt+0x4374>
   155cc:	cmp	r3, #2
   155d0:	beq	15658 <__assert_fail@plt+0x4388>
   155d4:	ldrh	r2, [r5, #56]	; 0x38
   155d8:	cmp	r2, #1
   155dc:	bne	158d8 <__assert_fail@plt+0x4608>
   155e0:	cmp	r3, #4
   155e4:	beq	15608 <__assert_fail@plt+0x4338>
   155e8:	ldr	r1, [r8, #48]	; 0x30
   155ec:	tst	r1, #64	; 0x40
   155f0:	beq	156ec <__assert_fail@plt+0x441c>
   155f4:	ldrd	r6, [r5, #64]	; 0x40
   155f8:	ldrd	r2, [r8, #16]
   155fc:	cmp	r7, r3
   15600:	cmpeq	r6, r2
   15604:	beq	156ec <__assert_fail@plt+0x441c>
   15608:	ldrh	r3, [r5, #58]	; 0x3a
   1560c:	tst	r3, #2
   15610:	bne	156e0 <__assert_fail@plt+0x4410>
   15614:	ldr	r0, [r8, #4]
   15618:	cmp	r0, #0
   1561c:	beq	1562c <__assert_fail@plt+0x435c>
   15620:	bl	13f84 <__assert_fail@plt+0x2cb4>
   15624:	mov	r3, #0
   15628:	str	r3, [r8, #4]
   1562c:	mov	r3, #6
   15630:	strh	r3, [r5, #56]	; 0x38
   15634:	mov	r1, r5
   15638:	mov	r0, r8
   1563c:	bl	14550 <__assert_fail@plt+0x3280>
   15640:	b	15c04 <__assert_fail@plt+0x4934>
   15644:	mov	r2, #0
   15648:	mov	r1, r5
   1564c:	bl	13bc0 <__assert_fail@plt+0x28f0>
   15650:	strh	r0, [r5, #56]	; 0x38
   15654:	b	15c04 <__assert_fail@plt+0x4934>
   15658:	ldrh	r2, [r5, #56]	; 0x38
   1565c:	sub	r3, r2, #12
   15660:	uxth	r3, r3
   15664:	cmp	r3, #1
   15668:	bls	15678 <__assert_fail@plt+0x43a8>
   1566c:	cmp	r2, #1
   15670:	bne	158d8 <__assert_fail@plt+0x4608>
   15674:	b	155e8 <__assert_fail@plt+0x4318>
   15678:	mov	r2, #1
   1567c:	mov	r1, r5
   15680:	bl	13bc0 <__assert_fail@plt+0x28f0>
   15684:	strh	r0, [r5, #56]	; 0x38
   15688:	cmp	r0, #1
   1568c:	bne	15768 <__assert_fail@plt+0x4498>
   15690:	ldr	r3, [r8, #48]	; 0x30
   15694:	tst	r3, #4
   15698:	bne	15768 <__assert_fail@plt+0x4498>
   1569c:	movw	r1, #47084	; 0xb7ec
   156a0:	movt	r1, #1
   156a4:	mov	r0, r8
   156a8:	bl	13f38 <__assert_fail@plt+0x2c68>
   156ac:	str	r0, [r5, #36]	; 0x24
   156b0:	cmp	r0, #0
   156b4:	blt	156c8 <__assert_fail@plt+0x43f8>
   156b8:	ldrh	r3, [r5, #58]	; 0x3a
   156bc:	orr	r3, r3, #2
   156c0:	strh	r3, [r5, #58]	; 0x3a
   156c4:	b	15768 <__assert_fail@plt+0x4498>
   156c8:	bl	11180 <__errno_location@plt>
   156cc:	ldr	r3, [r0]
   156d0:	str	r3, [r5, #32]
   156d4:	mov	r3, #7
   156d8:	strh	r3, [r5, #56]	; 0x38
   156dc:	b	15768 <__assert_fail@plt+0x4498>
   156e0:	ldr	r0, [r5, #36]	; 0x24
   156e4:	bl	112a0 <close@plt>
   156e8:	b	15614 <__assert_fail@plt+0x4344>
   156ec:	ldr	r0, [r8, #4]
   156f0:	cmp	r0, #0
   156f4:	beq	157d0 <__assert_fail@plt+0x4500>
   156f8:	tst	r1, #4096	; 0x1000
   156fc:	bne	157bc <__assert_fail@plt+0x44ec>
   15700:	ldr	r3, [r5, #24]
   15704:	mvn	r2, #0
   15708:	mov	r1, r5
   1570c:	mov	r0, r8
   15710:	bl	14344 <__assert_fail@plt+0x3074>
   15714:	cmp	r0, #0
   15718:	bne	15824 <__assert_fail@plt+0x4554>
   1571c:	ldr	r5, [r8, #4]
   15720:	mov	r3, #0
   15724:	str	r3, [r8, #4]
   15728:	ldr	r2, [r8, #24]
   1572c:	ldr	r0, [r5, #4]
   15730:	ldr	r1, [r0, #40]	; 0x28
   15734:	sub	r3, r1, #1
   15738:	ldr	r0, [r0, #28]
   1573c:	ldrb	r0, [r0, r3]
   15740:	cmp	r0, #47	; 0x2f
   15744:	movne	r3, r1
   15748:	add	r0, r2, r3
   1574c:	mov	r1, #47	; 0x2f
   15750:	strb	r1, [r2, r3]
   15754:	ldr	r2, [r5, #52]	; 0x34
   15758:	add	r2, r2, #1
   1575c:	add	r1, r5, #168	; 0xa8
   15760:	add	r0, r0, #1
   15764:	bl	11000 <memmove@plt>
   15768:	str	r5, [r8]
   1576c:	ldrh	r3, [r5, #56]	; 0x38
   15770:	cmp	r3, #11
   15774:	beq	15af8 <__assert_fail@plt+0x4828>
   15778:	ldrh	r3, [r5, #56]	; 0x38
   1577c:	cmp	r3, #1
   15780:	bne	15c04 <__assert_fail@plt+0x4934>
   15784:	ldr	r3, [r5, #48]	; 0x30
   15788:	cmp	r3, #0
   1578c:	ldrdeq	r2, [r5, #64]	; 0x40
   15790:	strdeq	r2, [r8, #16]
   15794:	mov	r1, r5
   15798:	mov	r0, r8
   1579c:	bl	14180 <__assert_fail@plt+0x2eb0>
   157a0:	cmp	r0, #0
   157a4:	bne	15c04 <__assert_fail@plt+0x4934>
   157a8:	bl	11180 <__errno_location@plt>
   157ac:	mov	r3, #12
   157b0:	str	r3, [r0]
   157b4:	mov	r5, #0
   157b8:	b	15c04 <__assert_fail@plt+0x4934>
   157bc:	bic	r1, r1, #4096	; 0x1000
   157c0:	str	r1, [r8, #48]	; 0x30
   157c4:	bl	13f84 <__assert_fail@plt+0x2cb4>
   157c8:	mov	r3, #0
   157cc:	str	r3, [r8, #4]
   157d0:	mov	r1, #3
   157d4:	mov	r0, r8
   157d8:	bl	14614 <__assert_fail@plt+0x3344>
   157dc:	str	r0, [r8, #4]
   157e0:	cmp	r0, #0
   157e4:	bne	1571c <__assert_fail@plt+0x444c>
   157e8:	ldr	r3, [r8, #48]	; 0x30
   157ec:	tst	r3, #8192	; 0x2000
   157f0:	movne	r5, r0
   157f4:	bne	15c04 <__assert_fail@plt+0x4934>
   157f8:	ldr	r3, [r5, #32]
   157fc:	cmp	r3, #0
   15800:	beq	15814 <__assert_fail@plt+0x4544>
   15804:	ldrh	r3, [r5, #56]	; 0x38
   15808:	cmp	r3, #4
   1580c:	movne	r3, #7
   15810:	strhne	r3, [r5, #56]	; 0x38
   15814:	mov	r1, r5
   15818:	mov	r0, r8
   1581c:	bl	14550 <__assert_fail@plt+0x3280>
   15820:	b	15c04 <__assert_fail@plt+0x4934>
   15824:	bl	11180 <__errno_location@plt>
   15828:	ldr	r3, [r0]
   1582c:	str	r3, [r5, #32]
   15830:	ldrh	r3, [r5, #58]	; 0x3a
   15834:	orr	r3, r3, #1
   15838:	strh	r3, [r5, #58]	; 0x3a
   1583c:	ldr	r3, [r8, #4]
   15840:	cmp	r3, #0
   15844:	beq	1571c <__assert_fail@plt+0x444c>
   15848:	ldr	r2, [r3, #4]
   1584c:	ldr	r2, [r2, #24]
   15850:	str	r2, [r3, #24]
   15854:	ldr	r3, [r3, #8]
   15858:	cmp	r3, #0
   1585c:	bne	15848 <__assert_fail@plt+0x4578>
   15860:	b	1571c <__assert_fail@plt+0x444c>
   15864:	str	r3, [r8]
   15868:	ldr	r2, [r8, #24]
   1586c:	ldr	r3, [r3, #40]	; 0x28
   15870:	mov	r1, #0
   15874:	strb	r1, [r2, r3]
   15878:	mov	r1, #3
   1587c:	mov	r0, r8
   15880:	bl	14614 <__assert_fail@plt+0x3344>
   15884:	subs	r6, r0, #0
   15888:	bne	158a0 <__assert_fail@plt+0x45d0>
   1588c:	ldr	r3, [r8, #48]	; 0x30
   15890:	tst	r3, #8192	; 0x2000
   15894:	beq	158f4 <__assert_fail@plt+0x4624>
   15898:	mov	r5, r6
   1589c:	b	15c04 <__assert_fail@plt+0x4934>
   158a0:	mov	r0, r5
   158a4:	bl	13924 <__assert_fail@plt+0x2654>
   158a8:	mov	r5, r6
   158ac:	b	15728 <__assert_fail@plt+0x4458>
   158b0:	str	r4, [r8]
   158b4:	mov	r0, r5
   158b8:	bl	13924 <__assert_fail@plt+0x2654>
   158bc:	ldr	r3, [r4, #48]	; 0x30
   158c0:	cmp	r3, #0
   158c4:	beq	159bc <__assert_fail@plt+0x46ec>
   158c8:	ldrh	r3, [r4, #60]	; 0x3c
   158cc:	mov	r5, r4
   158d0:	cmp	r3, #4
   158d4:	bne	15a70 <__assert_fail@plt+0x47a0>
   158d8:	ldr	r4, [r5, #8]
   158dc:	cmp	r4, #0
   158e0:	bne	158b0 <__assert_fail@plt+0x45e0>
   158e4:	ldr	r3, [r5, #4]
   158e8:	ldr	r2, [r3, #12]
   158ec:	cmp	r2, #0
   158f0:	bne	15864 <__assert_fail@plt+0x4594>
   158f4:	ldr	r6, [r5, #4]
   158f8:	str	r6, [r8]
   158fc:	mov	r0, r5
   15900:	bl	13924 <__assert_fail@plt+0x2654>
   15904:	ldr	r3, [r6, #48]	; 0x30
   15908:	cmn	r3, #1
   1590c:	beq	15b30 <__assert_fail@plt+0x4860>
   15910:	ldrh	r3, [r6, #56]	; 0x38
   15914:	cmp	r3, #11
   15918:	beq	15b50 <__assert_fail@plt+0x4880>
   1591c:	ldr	r2, [r8, #24]
   15920:	ldr	r3, [r6, #40]	; 0x28
   15924:	mov	r1, #0
   15928:	strb	r1, [r2, r3]
   1592c:	ldr	r3, [r6, #48]	; 0x30
   15930:	cmp	r3, r1
   15934:	beq	15b54 <__assert_fail@plt+0x4884>
   15938:	ldrh	r3, [r6, #58]	; 0x3a
   1593c:	tst	r3, #2
   15940:	beq	15bbc <__assert_fail@plt+0x48ec>
   15944:	ldr	r3, [r8, #48]	; 0x30
   15948:	tst	r3, #4
   1594c:	bne	15968 <__assert_fail@plt+0x4698>
   15950:	tst	r3, #512	; 0x200
   15954:	beq	15b90 <__assert_fail@plt+0x48c0>
   15958:	mov	r2, #1
   1595c:	ldr	r1, [r6, #36]	; 0x24
   15960:	mov	r0, r8
   15964:	bl	14248 <__assert_fail@plt+0x2f78>
   15968:	ldr	r0, [r6, #36]	; 0x24
   1596c:	bl	112a0 <close@plt>
   15970:	ldrh	r3, [r6, #56]	; 0x38
   15974:	cmp	r3, #2
   15978:	beq	159a4 <__assert_fail@plt+0x46d4>
   1597c:	ldr	r3, [r6, #32]
   15980:	cmp	r3, #0
   15984:	movne	r3, #7
   15988:	strhne	r3, [r6, #56]	; 0x38
   1598c:	bne	159a4 <__assert_fail@plt+0x46d4>
   15990:	mov	r3, #6
   15994:	strh	r3, [r6, #56]	; 0x38
   15998:	mov	r1, r6
   1599c:	mov	r0, r8
   159a0:	bl	14550 <__assert_fail@plt+0x3280>
   159a4:	ldr	r5, [r8, #48]	; 0x30
   159a8:	and	r5, r5, #8192	; 0x2000
   159ac:	cmp	r5, #0
   159b0:	moveq	r5, r6
   159b4:	movne	r5, r4
   159b8:	b	15c04 <__assert_fail@plt+0x4934>
   159bc:	mov	r0, r8
   159c0:	bl	142e0 <__assert_fail@plt+0x3010>
   159c4:	cmp	r0, #0
   159c8:	bne	15a4c <__assert_fail@plt+0x477c>
   159cc:	mov	r0, r8
   159d0:	bl	13fd4 <__assert_fail@plt+0x2d04>
   159d4:	ldr	r2, [r4, #52]	; 0x34
   159d8:	str	r2, [r4, #40]	; 0x28
   159dc:	add	r5, r4, #168	; 0xa8
   159e0:	add	r2, r2, #1
   159e4:	mov	r1, r5
   159e8:	ldr	r0, [r8, #24]
   159ec:	bl	11000 <memmove@plt>
   159f0:	mov	r1, #47	; 0x2f
   159f4:	mov	r0, r5
   159f8:	bl	11210 <strrchr@plt>
   159fc:	cmp	r0, #0
   15a00:	beq	15a30 <__assert_fail@plt+0x4760>
   15a04:	cmp	r5, r0
   15a08:	beq	15a60 <__assert_fail@plt+0x4790>
   15a0c:	add	r6, r0, #1
   15a10:	mov	r0, r6
   15a14:	bl	11168 <strlen@plt>
   15a18:	mov	r7, r0
   15a1c:	add	r2, r0, #1
   15a20:	mov	r1, r6
   15a24:	mov	r0, r5
   15a28:	bl	11000 <memmove@plt>
   15a2c:	str	r7, [r4, #52]	; 0x34
   15a30:	ldr	r3, [r8, #24]
   15a34:	str	r3, [r4, #28]
   15a38:	str	r3, [r4, #24]
   15a3c:	mov	r0, r8
   15a40:	bl	13eb0 <__assert_fail@plt+0x2be0>
   15a44:	mov	r5, r4
   15a48:	b	15768 <__assert_fail@plt+0x4498>
   15a4c:	ldr	r3, [r8, #48]	; 0x30
   15a50:	orr	r3, r3, #8192	; 0x2000
   15a54:	str	r3, [r8, #48]	; 0x30
   15a58:	mov	r5, #0
   15a5c:	b	15c04 <__assert_fail@plt+0x4934>
   15a60:	ldrb	r3, [r0, #1]
   15a64:	cmp	r3, #0
   15a68:	beq	15a30 <__assert_fail@plt+0x4760>
   15a6c:	b	15a0c <__assert_fail@plt+0x473c>
   15a70:	cmp	r3, #2
   15a74:	movne	r5, r4
   15a78:	bne	15728 <__assert_fail@plt+0x4458>
   15a7c:	mov	r2, #1
   15a80:	mov	r1, r4
   15a84:	mov	r0, r8
   15a88:	bl	13bc0 <__assert_fail@plt+0x28f0>
   15a8c:	strh	r0, [r4, #56]	; 0x38
   15a90:	cmp	r0, #1
   15a94:	beq	15aa8 <__assert_fail@plt+0x47d8>
   15a98:	mov	r3, #3
   15a9c:	strh	r3, [r4, #60]	; 0x3c
   15aa0:	mov	r5, r4
   15aa4:	b	15728 <__assert_fail@plt+0x4458>
   15aa8:	ldr	r3, [r8, #48]	; 0x30
   15aac:	tst	r3, #4
   15ab0:	bne	15a98 <__assert_fail@plt+0x47c8>
   15ab4:	movw	r1, #47084	; 0xb7ec
   15ab8:	movt	r1, #1
   15abc:	mov	r0, r8
   15ac0:	bl	13f38 <__assert_fail@plt+0x2c68>
   15ac4:	str	r0, [r4, #36]	; 0x24
   15ac8:	cmp	r0, #0
   15acc:	blt	15ae0 <__assert_fail@plt+0x4810>
   15ad0:	ldrh	r3, [r4, #58]	; 0x3a
   15ad4:	orr	r3, r3, #2
   15ad8:	strh	r3, [r4, #58]	; 0x3a
   15adc:	b	15a98 <__assert_fail@plt+0x47c8>
   15ae0:	bl	11180 <__errno_location@plt>
   15ae4:	ldr	r3, [r0]
   15ae8:	str	r3, [r4, #32]
   15aec:	mov	r3, #7
   15af0:	strh	r3, [r4, #56]	; 0x38
   15af4:	b	15a98 <__assert_fail@plt+0x47c8>
   15af8:	ldrd	r2, [r5, #112]	; 0x70
   15afc:	cmp	r3, #0
   15b00:	cmpeq	r2, #2
   15b04:	beq	15b18 <__assert_fail@plt+0x4848>
   15b08:	cmp	r3, #0
   15b0c:	cmpeq	r2, #1
   15b10:	beq	15c04 <__assert_fail@plt+0x4934>
   15b14:	bl	11294 <abort@plt>
   15b18:	mov	r2, #0
   15b1c:	mov	r1, r5
   15b20:	mov	r0, r8
   15b24:	bl	13bc0 <__assert_fail@plt+0x28f0>
   15b28:	strh	r0, [r5, #56]	; 0x38
   15b2c:	b	15778 <__assert_fail@plt+0x44a8>
   15b30:	mov	r0, r6
   15b34:	bl	13924 <__assert_fail@plt+0x2654>
   15b38:	bl	11180 <__errno_location@plt>
   15b3c:	mov	r3, #0
   15b40:	str	r3, [r0]
   15b44:	str	r3, [r8]
   15b48:	mov	r5, r4
   15b4c:	b	15c04 <__assert_fail@plt+0x4934>
   15b50:	bl	11294 <abort@plt>
   15b54:	mov	r0, r8
   15b58:	bl	142e0 <__assert_fail@plt+0x3010>
   15b5c:	cmp	r0, #0
   15b60:	beq	15970 <__assert_fail@plt+0x46a0>
   15b64:	bl	11180 <__errno_location@plt>
   15b68:	ldr	r3, [r0]
   15b6c:	str	r3, [r6, #32]
   15b70:	ldr	r3, [r8, #48]	; 0x30
   15b74:	orr	r3, r3, #8192	; 0x2000
   15b78:	str	r3, [r8, #48]	; 0x30
   15b7c:	ldrh	r3, [r6, #56]	; 0x38
   15b80:	cmp	r3, #2
   15b84:	moveq	r5, r4
   15b88:	bne	1597c <__assert_fail@plt+0x46ac>
   15b8c:	b	15c04 <__assert_fail@plt+0x4934>
   15b90:	ldr	r0, [r6, #36]	; 0x24
   15b94:	bl	1124c <fchdir@plt>
   15b98:	cmp	r0, #0
   15b9c:	beq	15968 <__assert_fail@plt+0x4698>
   15ba0:	bl	11180 <__errno_location@plt>
   15ba4:	ldr	r3, [r0]
   15ba8:	str	r3, [r6, #32]
   15bac:	ldr	r3, [r8, #48]	; 0x30
   15bb0:	orr	r3, r3, #8192	; 0x2000
   15bb4:	str	r3, [r8, #48]	; 0x30
   15bb8:	b	15968 <__assert_fail@plt+0x4698>
   15bbc:	tst	r3, #1
   15bc0:	bne	15970 <__assert_fail@plt+0x46a0>
   15bc4:	movw	r3, #47088	; 0xb7f0
   15bc8:	movt	r3, #1
   15bcc:	mvn	r2, #0
   15bd0:	ldr	r1, [r6, #4]
   15bd4:	mov	r0, r8
   15bd8:	bl	14344 <__assert_fail@plt+0x3074>
   15bdc:	cmp	r0, #0
   15be0:	beq	15970 <__assert_fail@plt+0x46a0>
   15be4:	bl	11180 <__errno_location@plt>
   15be8:	ldr	r3, [r0]
   15bec:	str	r3, [r6, #32]
   15bf0:	ldr	r3, [r8, #48]	; 0x30
   15bf4:	orr	r3, r3, #8192	; 0x2000
   15bf8:	str	r3, [r8, #48]	; 0x30
   15bfc:	b	15b7c <__assert_fail@plt+0x48ac>
   15c00:	mov	r5, #0
   15c04:	mov	r0, r5
   15c08:	ldrd	r4, [sp]
   15c0c:	ldrd	r6, [sp, #8]
   15c10:	ldr	r8, [sp, #16]
   15c14:	add	sp, sp, #20
   15c18:	pop	{pc}		; (ldr pc, [sp], #4)
   15c1c:	cmp	r2, #4
   15c20:	bhi	15c30 <__assert_fail@plt+0x4960>
   15c24:	strh	r2, [r1, #60]	; 0x3c
   15c28:	mov	r0, #0
   15c2c:	bx	lr
   15c30:	str	r4, [sp, #-8]!
   15c34:	str	lr, [sp, #4]
   15c38:	bl	11180 <__errno_location@plt>
   15c3c:	mov	r3, #22
   15c40:	str	r3, [r0]
   15c44:	mov	r0, #1
   15c48:	ldr	r4, [sp]
   15c4c:	add	sp, sp, #4
   15c50:	pop	{pc}		; (ldr pc, [sp], #4)
   15c54:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15c58:	strd	r6, [sp, #8]
   15c5c:	str	r8, [sp, #16]
   15c60:	str	lr, [sp, #20]
   15c64:	bics	r3, r1, #4096	; 0x1000
   15c68:	bne	15d18 <__assert_fail@plt+0x4a48>
   15c6c:	mov	r4, r0
   15c70:	mov	r5, r1
   15c74:	ldr	r6, [r0]
   15c78:	bl	11180 <__errno_location@plt>
   15c7c:	mov	r7, r0
   15c80:	mov	r3, #0
   15c84:	str	r3, [r0]
   15c88:	ldr	r3, [r4, #48]	; 0x30
   15c8c:	tst	r3, #8192	; 0x2000
   15c90:	movne	r0, #0
   15c94:	bne	15d04 <__assert_fail@plt+0x4a34>
   15c98:	ldrh	r3, [r6, #56]	; 0x38
   15c9c:	cmp	r3, #9
   15ca0:	beq	15d2c <__assert_fail@plt+0x4a5c>
   15ca4:	cmp	r3, #1
   15ca8:	movne	r0, #0
   15cac:	bne	15d04 <__assert_fail@plt+0x4a34>
   15cb0:	ldr	r0, [r4, #4]
   15cb4:	cmp	r0, #0
   15cb8:	beq	15cc0 <__assert_fail@plt+0x49f0>
   15cbc:	bl	13f84 <__assert_fail@plt+0x2cb4>
   15cc0:	cmp	r5, #4096	; 0x1000
   15cc4:	movne	r5, #1
   15cc8:	beq	15d34 <__assert_fail@plt+0x4a64>
   15ccc:	ldr	r3, [r6, #48]	; 0x30
   15cd0:	cmp	r3, #0
   15cd4:	bne	15cf4 <__assert_fail@plt+0x4a24>
   15cd8:	ldr	r3, [r6, #24]
   15cdc:	ldrb	r3, [r3]
   15ce0:	cmp	r3, #47	; 0x2f
   15ce4:	beq	15cf4 <__assert_fail@plt+0x4a24>
   15ce8:	ldr	r3, [r4, #48]	; 0x30
   15cec:	tst	r3, #4
   15cf0:	beq	15d48 <__assert_fail@plt+0x4a78>
   15cf4:	mov	r1, r5
   15cf8:	mov	r0, r4
   15cfc:	bl	14614 <__assert_fail@plt+0x3344>
   15d00:	str	r0, [r4, #4]
   15d04:	ldrd	r4, [sp]
   15d08:	ldrd	r6, [sp, #8]
   15d0c:	ldr	r8, [sp, #16]
   15d10:	add	sp, sp, #20
   15d14:	pop	{pc}		; (ldr pc, [sp], #4)
   15d18:	bl	11180 <__errno_location@plt>
   15d1c:	mov	r3, #22
   15d20:	str	r3, [r0]
   15d24:	mov	r0, #0
   15d28:	b	15d04 <__assert_fail@plt+0x4a34>
   15d2c:	ldr	r0, [r6, #8]
   15d30:	b	15d04 <__assert_fail@plt+0x4a34>
   15d34:	ldr	r3, [r4, #48]	; 0x30
   15d38:	orr	r3, r3, #4096	; 0x1000
   15d3c:	str	r3, [r4, #48]	; 0x30
   15d40:	mov	r5, #2
   15d44:	b	15ccc <__assert_fail@plt+0x49fc>
   15d48:	movw	r1, #47084	; 0xb7ec
   15d4c:	movt	r1, #1
   15d50:	mov	r0, r4
   15d54:	bl	13f38 <__assert_fail@plt+0x2c68>
   15d58:	subs	r6, r0, #0
   15d5c:	movlt	r0, #0
   15d60:	strlt	r0, [r4, #4]
   15d64:	blt	15d04 <__assert_fail@plt+0x4a34>
   15d68:	mov	r1, r5
   15d6c:	mov	r0, r4
   15d70:	bl	14614 <__assert_fail@plt+0x3344>
   15d74:	str	r0, [r4, #4]
   15d78:	ldr	r3, [r4, #48]	; 0x30
   15d7c:	tst	r3, #512	; 0x200
   15d80:	beq	15d9c <__assert_fail@plt+0x4acc>
   15d84:	mov	r2, #1
   15d88:	mov	r1, r6
   15d8c:	mov	r0, r4
   15d90:	bl	14248 <__assert_fail@plt+0x2f78>
   15d94:	ldr	r0, [r4, #4]
   15d98:	b	15d04 <__assert_fail@plt+0x4a34>
   15d9c:	mov	r0, r6
   15da0:	bl	1124c <fchdir@plt>
   15da4:	cmp	r0, #0
   15da8:	bne	15db8 <__assert_fail@plt+0x4ae8>
   15dac:	mov	r0, r6
   15db0:	bl	112a0 <close@plt>
   15db4:	b	15d94 <__assert_fail@plt+0x4ac4>
   15db8:	ldr	r4, [r7]
   15dbc:	mov	r0, r6
   15dc0:	bl	112a0 <close@plt>
   15dc4:	str	r4, [r7]
   15dc8:	mov	r0, #0
   15dcc:	b	15d04 <__assert_fail@plt+0x4a34>
   15dd0:	ror	r0, r0, #3
   15dd4:	udiv	r3, r0, r1
   15dd8:	mls	r0, r3, r1, r0
   15ddc:	bx	lr
   15de0:	cmp	r1, r0
   15de4:	movne	r0, #0
   15de8:	moveq	r0, #1
   15dec:	bx	lr
   15df0:	ldr	r2, [r0, #20]
   15df4:	movw	r3, #48012	; 0xbb8c
   15df8:	movt	r3, #1
   15dfc:	cmp	r2, r3
   15e00:	beq	15e9c <__assert_fail@plt+0x4bcc>
   15e04:	vldr	s15, [r2, #8]
   15e08:	vldr	s14, [pc, #148]	; 15ea4 <__assert_fail@plt+0x4bd4>
   15e0c:	vcmpe.f32	s15, s14
   15e10:	vmrs	APSR_nzcv, fpscr
   15e14:	ble	15e74 <__assert_fail@plt+0x4ba4>
   15e18:	vldr	s14, [pc, #136]	; 15ea8 <__assert_fail@plt+0x4bd8>
   15e1c:	vcmpe.f32	s15, s14
   15e20:	vmrs	APSR_nzcv, fpscr
   15e24:	bpl	15e74 <__assert_fail@plt+0x4ba4>
   15e28:	vldr	s13, [r2, #12]
   15e2c:	vldr	s14, [pc, #120]	; 15eac <__assert_fail@plt+0x4bdc>
   15e30:	vcmpe.f32	s13, s14
   15e34:	vmrs	APSR_nzcv, fpscr
   15e38:	ble	15e74 <__assert_fail@plt+0x4ba4>
   15e3c:	vldr	s14, [r2]
   15e40:	vcmpe.f32	s14, #0.0
   15e44:	vmrs	APSR_nzcv, fpscr
   15e48:	blt	15e74 <__assert_fail@plt+0x4ba4>
   15e4c:	vldr	s13, [pc, #80]	; 15ea4 <__assert_fail@plt+0x4bd4>
   15e50:	vadd.f32	s14, s14, s13
   15e54:	vldr	s13, [r2, #4]
   15e58:	vcmpe.f32	s14, s13
   15e5c:	vmrs	APSR_nzcv, fpscr
   15e60:	bpl	15e74 <__assert_fail@plt+0x4ba4>
   15e64:	vldr	s12, [pc, #68]	; 15eb0 <__assert_fail@plt+0x4be0>
   15e68:	vcmpe.f32	s13, s12
   15e6c:	vmrs	APSR_nzcv, fpscr
   15e70:	bls	15e88 <__assert_fail@plt+0x4bb8>
   15e74:	movw	r3, #48012	; 0xbb8c
   15e78:	movt	r3, #1
   15e7c:	str	r3, [r0, #20]
   15e80:	mov	r0, #0
   15e84:	bx	lr
   15e88:	vcmpe.f32	s15, s14
   15e8c:	vmrs	APSR_nzcv, fpscr
   15e90:	ble	15e74 <__assert_fail@plt+0x4ba4>
   15e94:	mov	r0, #1
   15e98:	bx	lr
   15e9c:	mov	r0, #1
   15ea0:	bx	lr
   15ea4:	stclcc	12, cr12, [ip, #820]	; 0x334
   15ea8:	svccc	0x00666666
   15eac:	svccc	0x008ccccd
   15eb0:	svccc	0x00800000
   15eb4:	ldrb	r3, [r1, #16]
   15eb8:	cmp	r3, #0
   15ebc:	bne	15ee8 <__assert_fail@plt+0x4c18>
   15ec0:	vmov	s15, r0
   15ec4:	vcvt.f32.u32	s15, s15
   15ec8:	vldr	s13, [r1, #8]
   15ecc:	vdiv.f32	s14, s15, s13
   15ed0:	vldr	s15, [pc, #224]	; 15fb8 <__assert_fail@plt+0x4ce8>
   15ed4:	vcmpe.f32	s14, s15
   15ed8:	vmrs	APSR_nzcv, fpscr
   15edc:	bge	15fa8 <__assert_fail@plt+0x4cd8>
   15ee0:	vcvt.u32.f32	s15, s14
   15ee4:	vmov	r0, s15
   15ee8:	cmp	r0, #10
   15eec:	movcc	r0, #10
   15ef0:	orr	r0, r0, #1
   15ef4:	cmn	r0, #1
   15ef8:	beq	15f0c <__assert_fail@plt+0x4c3c>
   15efc:	push	{lr}		; (str lr, [sp, #-4]!)
   15f00:	movw	lr, #43691	; 0xaaab
   15f04:	movt	lr, #43690	; 0xaaaa
   15f08:	b	15f34 <__assert_fail@plt+0x4c64>
   15f0c:	mov	r0, #0
   15f10:	bx	lr
   15f14:	mov	r3, #3
   15f18:	udiv	r2, r0, r3
   15f1c:	mls	r3, r3, r2, r0
   15f20:	cmp	r3, #0
   15f24:	bne	15f84 <__assert_fail@plt+0x4cb4>
   15f28:	add	r0, r0, #2
   15f2c:	cmn	r0, #1
   15f30:	beq	15fb0 <__assert_fail@plt+0x4ce0>
   15f34:	cmp	r0, #9
   15f38:	bls	15f14 <__assert_fail@plt+0x4c44>
   15f3c:	umull	r2, r3, lr, r0
   15f40:	lsr	r3, r3, #1
   15f44:	add	r3, r3, r3, lsl #1
   15f48:	cmp	r0, r3
   15f4c:	beq	15f28 <__assert_fail@plt+0x4c58>
   15f50:	mov	r1, #16
   15f54:	mov	r2, #9
   15f58:	mov	r3, #3
   15f5c:	add	r2, r2, r1
   15f60:	add	r3, r3, #2
   15f64:	cmp	r2, r0
   15f68:	bcs	15f18 <__assert_fail@plt+0x4c48>
   15f6c:	add	r1, r1, #8
   15f70:	udiv	ip, r0, r3
   15f74:	mls	ip, r3, ip, r0
   15f78:	cmp	ip, #0
   15f7c:	bne	15f5c <__assert_fail@plt+0x4c8c>
   15f80:	b	15f28 <__assert_fail@plt+0x4c58>
   15f84:	lsl	r2, r0, #2
   15f88:	lsr	r3, r0, #30
   15f8c:	adds	r3, r3, #0
   15f90:	movne	r3, #1
   15f94:	cmp	r2, #0
   15f98:	movlt	r3, #1
   15f9c:	cmp	r3, #0
   15fa0:	movne	r0, #0
   15fa4:	pop	{pc}		; (ldr pc, [sp], #4)
   15fa8:	mov	r0, #0
   15fac:	bx	lr
   15fb0:	mov	r0, #0
   15fb4:	b	15fa4 <__assert_fail@plt+0x4cd4>
   15fb8:	svcmi	0x00800000
   15fbc:	str	r4, [sp, #-8]!
   15fc0:	str	lr, [sp, #4]
   15fc4:	mov	r4, r0
   15fc8:	mov	r0, r1
   15fcc:	ldr	r3, [r4, #24]
   15fd0:	ldr	r1, [r4, #8]
   15fd4:	blx	r3
   15fd8:	ldr	r3, [r4, #8]
   15fdc:	cmp	r3, r0
   15fe0:	bls	15ff8 <__assert_fail@plt+0x4d28>
   15fe4:	ldr	r3, [r4]
   15fe8:	add	r0, r3, r0, lsl #3
   15fec:	ldr	r4, [sp]
   15ff0:	add	sp, sp, #4
   15ff4:	pop	{pc}		; (ldr pc, [sp], #4)
   15ff8:	bl	11294 <abort@plt>
   15ffc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16000:	strd	r6, [sp, #8]
   16004:	strd	r8, [sp, #16]
   16008:	strd	sl, [sp, #24]
   1600c:	str	lr, [sp, #32]
   16010:	sub	sp, sp, #4
   16014:	ldr	r7, [r1]
   16018:	ldr	r3, [r1, #4]
   1601c:	cmp	r7, r3
   16020:	bcs	16178 <__assert_fail@plt+0x4ea8>
   16024:	mov	fp, r2
   16028:	mov	r9, r1
   1602c:	mov	r6, r0
   16030:	add	r7, r7, #8
   16034:	mov	sl, #0
   16038:	b	1610c <__assert_fail@plt+0x4e3c>
   1603c:	str	r5, [r0]
   16040:	ldr	r2, [r6, #12]
   16044:	add	r2, r2, #1
   16048:	str	r2, [r6, #12]
   1604c:	str	sl, [r4]
   16050:	ldr	r2, [r6, #36]	; 0x24
   16054:	str	r2, [r4, #4]
   16058:	str	r4, [r6, #36]	; 0x24
   1605c:	mov	r4, r3
   16060:	cmp	r3, #0
   16064:	beq	16098 <__assert_fail@plt+0x4dc8>
   16068:	ldr	r5, [r4]
   1606c:	mov	r1, r5
   16070:	mov	r0, r6
   16074:	bl	15fbc <__assert_fail@plt+0x4cec>
   16078:	ldr	r3, [r4, #4]
   1607c:	ldr	r2, [r0]
   16080:	cmp	r2, #0
   16084:	beq	1603c <__assert_fail@plt+0x4d6c>
   16088:	ldr	r2, [r0, #4]
   1608c:	str	r2, [r4, #4]
   16090:	str	r4, [r0, #4]
   16094:	b	1605c <__assert_fail@plt+0x4d8c>
   16098:	ldr	r4, [r8, #-8]
   1609c:	str	sl, [r8, #-4]
   160a0:	cmp	fp, #0
   160a4:	bne	160f8 <__assert_fail@plt+0x4e28>
   160a8:	mov	r1, r4
   160ac:	mov	r0, r6
   160b0:	bl	15fbc <__assert_fail@plt+0x4cec>
   160b4:	mov	r5, r0
   160b8:	ldr	r3, [r0]
   160bc:	cmp	r3, #0
   160c0:	beq	16144 <__assert_fail@plt+0x4e74>
   160c4:	ldr	r0, [r6, #36]	; 0x24
   160c8:	cmp	r0, #0
   160cc:	beq	1612c <__assert_fail@plt+0x4e5c>
   160d0:	ldr	r3, [r0, #4]
   160d4:	str	r3, [r6, #36]	; 0x24
   160d8:	str	r4, [r0]
   160dc:	ldr	r3, [r5, #4]
   160e0:	str	r3, [r0, #4]
   160e4:	str	r0, [r5, #4]
   160e8:	str	sl, [r8, #-8]
   160ec:	ldr	r3, [r9, #12]
   160f0:	sub	r3, r3, #1
   160f4:	str	r3, [r9, #12]
   160f8:	add	r2, r7, #8
   160fc:	ldr	r3, [r9, #4]
   16100:	cmp	r3, r7
   16104:	bls	16158 <__assert_fail@plt+0x4e88>
   16108:	mov	r7, r2
   1610c:	mov	r8, r7
   16110:	ldr	r3, [r7, #-8]
   16114:	cmp	r3, #0
   16118:	beq	160f8 <__assert_fail@plt+0x4e28>
   1611c:	ldr	r4, [r7, #-4]
   16120:	cmp	r4, #0
   16124:	bne	16068 <__assert_fail@plt+0x4d98>
   16128:	b	16098 <__assert_fail@plt+0x4dc8>
   1612c:	mov	r0, #8
   16130:	bl	1a09c <__assert_fail@plt+0x8dcc>
   16134:	cmp	r0, #0
   16138:	bne	160d8 <__assert_fail@plt+0x4e08>
   1613c:	mov	r0, fp
   16140:	b	1615c <__assert_fail@plt+0x4e8c>
   16144:	str	r4, [r0]
   16148:	ldr	r3, [r6, #12]
   1614c:	add	r3, r3, #1
   16150:	str	r3, [r6, #12]
   16154:	b	160e8 <__assert_fail@plt+0x4e18>
   16158:	mov	r0, #1
   1615c:	add	sp, sp, #4
   16160:	ldrd	r4, [sp]
   16164:	ldrd	r6, [sp, #8]
   16168:	ldrd	r8, [sp, #16]
   1616c:	ldrd	sl, [sp, #24]
   16170:	add	sp, sp, #32
   16174:	pop	{pc}		; (ldr pc, [sp], #4)
   16178:	mov	r0, #1
   1617c:	b	1615c <__assert_fail@plt+0x4e8c>
   16180:	strd	r4, [sp, #-24]!	; 0xffffffe8
   16184:	strd	r6, [sp, #8]
   16188:	str	r8, [sp, #16]
   1618c:	str	lr, [sp, #20]
   16190:	mov	r6, r0
   16194:	mov	r5, r1
   16198:	mov	r7, r2
   1619c:	mov	r8, r3
   161a0:	bl	15fbc <__assert_fail@plt+0x4cec>
   161a4:	mov	r4, r0
   161a8:	str	r0, [r7]
   161ac:	ldr	r0, [r0]
   161b0:	cmp	r0, #0
   161b4:	beq	16230 <__assert_fail@plt+0x4f60>
   161b8:	cmp	r0, r5
   161bc:	beq	16244 <__assert_fail@plt+0x4f74>
   161c0:	ldr	r3, [r6, #28]
   161c4:	mov	r1, r0
   161c8:	mov	r0, r5
   161cc:	blx	r3
   161d0:	cmp	r0, #0
   161d4:	bne	16244 <__assert_fail@plt+0x4f74>
   161d8:	ldr	r0, [r4, #4]
   161dc:	cmp	r0, #0
   161e0:	beq	16230 <__assert_fail@plt+0x4f60>
   161e4:	ldr	r1, [r0]
   161e8:	cmp	r5, r1
   161ec:	beq	16220 <__assert_fail@plt+0x4f50>
   161f0:	ldr	r3, [r6, #28]
   161f4:	mov	r0, r5
   161f8:	blx	r3
   161fc:	cmp	r0, #0
   16200:	bne	16220 <__assert_fail@plt+0x4f50>
   16204:	ldr	r4, [r4, #4]
   16208:	ldr	r0, [r4, #4]
   1620c:	cmp	r0, #0
   16210:	beq	16230 <__assert_fail@plt+0x4f60>
   16214:	ldr	r1, [r0]
   16218:	cmp	r1, r5
   1621c:	bne	161f0 <__assert_fail@plt+0x4f20>
   16220:	ldr	r3, [r4, #4]
   16224:	ldr	r0, [r3]
   16228:	cmp	r8, #0
   1622c:	bne	16284 <__assert_fail@plt+0x4fb4>
   16230:	ldrd	r4, [sp]
   16234:	ldrd	r6, [sp, #8]
   16238:	ldr	r8, [sp, #16]
   1623c:	add	sp, sp, #20
   16240:	pop	{pc}		; (ldr pc, [sp], #4)
   16244:	ldr	r0, [r4]
   16248:	cmp	r8, #0
   1624c:	beq	16230 <__assert_fail@plt+0x4f60>
   16250:	ldr	r1, [r4, #4]
   16254:	cmp	r1, #0
   16258:	moveq	r3, #0
   1625c:	streq	r3, [r4]
   16260:	beq	16230 <__assert_fail@plt+0x4f60>
   16264:	ldrd	r2, [r1]
   16268:	strd	r2, [r4]
   1626c:	mov	r3, #0
   16270:	str	r3, [r1]
   16274:	ldr	r3, [r6, #36]	; 0x24
   16278:	str	r3, [r1, #4]
   1627c:	str	r1, [r6, #36]	; 0x24
   16280:	b	16230 <__assert_fail@plt+0x4f60>
   16284:	ldr	r2, [r3, #4]
   16288:	str	r2, [r4, #4]
   1628c:	mov	r2, #0
   16290:	str	r2, [r3]
   16294:	ldr	r2, [r6, #36]	; 0x24
   16298:	str	r2, [r3, #4]
   1629c:	str	r3, [r6, #36]	; 0x24
   162a0:	b	16230 <__assert_fail@plt+0x4f60>
   162a4:	ldr	r0, [r0, #8]
   162a8:	bx	lr
   162ac:	ldr	r0, [r0, #12]
   162b0:	bx	lr
   162b4:	ldr	r0, [r0, #16]
   162b8:	bx	lr
   162bc:	ldr	r2, [r0]
   162c0:	ldr	r3, [r0, #4]
   162c4:	cmp	r2, r3
   162c8:	bcs	16338 <__assert_fail@plt+0x5068>
   162cc:	add	r1, r2, #8
   162d0:	sub	ip, r3, #1
   162d4:	sub	ip, ip, r2
   162d8:	bic	ip, ip, #7
   162dc:	add	r2, r2, #16
   162e0:	add	ip, ip, r2
   162e4:	mov	r0, #0
   162e8:	b	16304 <__assert_fail@plt+0x5034>
   162ec:	mov	r2, #1
   162f0:	cmp	r0, r2
   162f4:	movcc	r0, r2
   162f8:	add	r1, r1, #8
   162fc:	cmp	r1, ip
   16300:	beq	16334 <__assert_fail@plt+0x5064>
   16304:	ldr	r3, [r1, #-8]
   16308:	cmp	r3, #0
   1630c:	beq	162f8 <__assert_fail@plt+0x5028>
   16310:	ldr	r3, [r1, #-4]
   16314:	cmp	r3, #0
   16318:	beq	162ec <__assert_fail@plt+0x501c>
   1631c:	mov	r2, #1
   16320:	add	r2, r2, #1
   16324:	ldr	r3, [r3, #4]
   16328:	cmp	r3, #0
   1632c:	bne	16320 <__assert_fail@plt+0x5050>
   16330:	b	162f0 <__assert_fail@plt+0x5020>
   16334:	bx	lr
   16338:	mov	r0, #0
   1633c:	bx	lr
   16340:	push	{lr}		; (str lr, [sp, #-4]!)
   16344:	ldr	r2, [r0]
   16348:	ldr	r3, [r0, #4]
   1634c:	cmp	r2, r3
   16350:	bcs	163b8 <__assert_fail@plt+0x50e8>
   16354:	add	r1, r2, #8
   16358:	sub	ip, r3, #1
   1635c:	sub	ip, ip, r2
   16360:	bic	ip, ip, #7
   16364:	add	r2, r2, #16
   16368:	add	ip, ip, r2
   1636c:	mov	r2, #0
   16370:	mov	lr, r2
   16374:	b	16384 <__assert_fail@plt+0x50b4>
   16378:	add	r1, r1, #8
   1637c:	cmp	r1, ip
   16380:	beq	163c0 <__assert_fail@plt+0x50f0>
   16384:	ldr	r3, [r1, #-8]
   16388:	cmp	r3, #0
   1638c:	beq	16378 <__assert_fail@plt+0x50a8>
   16390:	add	lr, lr, #1
   16394:	add	r2, r2, #1
   16398:	ldr	r3, [r1, #-4]
   1639c:	cmp	r3, #0
   163a0:	beq	16378 <__assert_fail@plt+0x50a8>
   163a4:	add	r2, r2, #1
   163a8:	ldr	r3, [r3, #4]
   163ac:	cmp	r3, #0
   163b0:	bne	163a4 <__assert_fail@plt+0x50d4>
   163b4:	b	16378 <__assert_fail@plt+0x50a8>
   163b8:	mov	r2, #0
   163bc:	mov	lr, r2
   163c0:	ldr	r3, [r0, #12]
   163c4:	cmp	r3, lr
   163c8:	movne	r0, #0
   163cc:	beq	163d4 <__assert_fail@plt+0x5104>
   163d0:	pop	{pc}		; (ldr pc, [sp], #4)
   163d4:	ldr	r0, [r0, #16]
   163d8:	cmp	r0, r2
   163dc:	movne	r0, #0
   163e0:	moveq	r0, #1
   163e4:	b	163d0 <__assert_fail@plt+0x5100>
   163e8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   163ec:	strd	r6, [sp, #8]
   163f0:	str	r8, [sp, #16]
   163f4:	str	lr, [sp, #20]
   163f8:	sub	sp, sp, #8
   163fc:	mov	r6, r0
   16400:	mov	r4, r1
   16404:	ldr	r5, [r0, #8]
   16408:	ldr	r7, [r0, #12]
   1640c:	bl	162bc <__assert_fail@plt+0x4fec>
   16410:	mov	r8, r0
   16414:	ldr	r3, [r6, #16]
   16418:	movw	r2, #48032	; 0xbba0
   1641c:	movt	r2, #1
   16420:	mov	r1, #1
   16424:	mov	r0, r4
   16428:	bl	111bc <__fprintf_chk@plt>
   1642c:	mov	r3, r5
   16430:	movw	r2, #48056	; 0xbbb8
   16434:	movt	r2, #1
   16438:	mov	r1, #1
   1643c:	mov	r0, r4
   16440:	bl	111bc <__fprintf_chk@plt>
   16444:	vmov	s15, r7
   16448:	vcvt.f64.u32	d6, s15
   1644c:	vldr	d7, [pc, #92]	; 164b0 <__assert_fail@plt+0x51e0>
   16450:	vmul.f64	d6, d6, d7
   16454:	vmov	s15, r5
   16458:	vcvt.f64.u32	d7, s15
   1645c:	vdiv.f64	d5, d6, d7
   16460:	vstr	d5, [sp]
   16464:	mov	r3, r7
   16468:	movw	r2, #48080	; 0xbbd0
   1646c:	movt	r2, #1
   16470:	mov	r1, #1
   16474:	mov	r0, r4
   16478:	bl	111bc <__fprintf_chk@plt>
   1647c:	mov	r3, r8
   16480:	movw	r2, #48116	; 0xbbf4
   16484:	movt	r2, #1
   16488:	mov	r1, #1
   1648c:	mov	r0, r4
   16490:	bl	111bc <__fprintf_chk@plt>
   16494:	add	sp, sp, #8
   16498:	ldrd	r4, [sp]
   1649c:	ldrd	r6, [sp, #8]
   164a0:	ldr	r8, [sp, #16]
   164a4:	add	sp, sp, #20
   164a8:	pop	{pc}		; (ldr pc, [sp], #4)
   164ac:	nop	{0}
   164b0:	andeq	r0, r0, r0
   164b4:	subsmi	r0, r9, r0
   164b8:	strd	r4, [sp, #-16]!
   164bc:	str	r6, [sp, #8]
   164c0:	str	lr, [sp, #12]
   164c4:	mov	r6, r0
   164c8:	mov	r5, r1
   164cc:	bl	15fbc <__assert_fail@plt+0x4cec>
   164d0:	ldr	r1, [r0]
   164d4:	cmp	r1, #0
   164d8:	beq	1652c <__assert_fail@plt+0x525c>
   164dc:	mov	r4, r0
   164e0:	cmp	r1, r5
   164e4:	beq	16514 <__assert_fail@plt+0x5244>
   164e8:	ldr	r3, [r6, #28]
   164ec:	mov	r0, r5
   164f0:	blx	r3
   164f4:	cmp	r0, #0
   164f8:	bne	16514 <__assert_fail@plt+0x5244>
   164fc:	ldr	r4, [r4, #4]
   16500:	cmp	r4, #0
   16504:	beq	16518 <__assert_fail@plt+0x5248>
   16508:	ldr	r1, [r4]
   1650c:	cmp	r1, r5
   16510:	bne	164e8 <__assert_fail@plt+0x5218>
   16514:	ldr	r4, [r4]
   16518:	mov	r0, r4
   1651c:	ldrd	r4, [sp]
   16520:	ldr	r6, [sp, #8]
   16524:	add	sp, sp, #12
   16528:	pop	{pc}		; (ldr pc, [sp], #4)
   1652c:	mov	r4, r1
   16530:	b	16518 <__assert_fail@plt+0x5248>
   16534:	ldr	r3, [r0, #16]
   16538:	cmp	r3, #0
   1653c:	beq	16594 <__assert_fail@plt+0x52c4>
   16540:	ldr	r2, [r0]
   16544:	ldr	r1, [r0, #4]
   16548:	cmp	r2, r1
   1654c:	bcs	16588 <__assert_fail@plt+0x52b8>
   16550:	ldr	r0, [r2]
   16554:	cmp	r0, #0
   16558:	bxne	lr
   1655c:	mov	r3, r2
   16560:	sub	r1, r1, #1
   16564:	sub	r1, r1, r2
   16568:	bic	r1, r1, #7
   1656c:	add	r2, r2, r1
   16570:	cmp	r3, r2
   16574:	beq	16588 <__assert_fail@plt+0x52b8>
   16578:	ldr	r0, [r3, #8]!
   1657c:	cmp	r0, #0
   16580:	beq	16570 <__assert_fail@plt+0x52a0>
   16584:	bx	lr
   16588:	str	r4, [sp, #-8]!
   1658c:	str	lr, [sp, #4]
   16590:	bl	11294 <abort@plt>
   16594:	mov	r0, #0
   16598:	bx	lr
   1659c:	strd	r4, [sp, #-16]!
   165a0:	str	r6, [sp, #8]
   165a4:	str	lr, [sp, #12]
   165a8:	mov	r5, r0
   165ac:	mov	r4, r1
   165b0:	bl	15fbc <__assert_fail@plt+0x4cec>
   165b4:	mov	r2, r0
   165b8:	mov	r3, r0
   165bc:	b	165cc <__assert_fail@plt+0x52fc>
   165c0:	ldr	r3, [r3, #4]
   165c4:	cmp	r3, #0
   165c8:	beq	165e8 <__assert_fail@plt+0x5318>
   165cc:	ldr	r1, [r3]
   165d0:	cmp	r1, r4
   165d4:	bne	165c0 <__assert_fail@plt+0x52f0>
   165d8:	ldr	r3, [r3, #4]
   165dc:	cmp	r3, #0
   165e0:	ldrne	r0, [r3]
   165e4:	bne	1660c <__assert_fail@plt+0x533c>
   165e8:	ldr	r3, [r5, #4]
   165ec:	add	r2, r2, #8
   165f0:	cmp	r3, r2
   165f4:	bls	16608 <__assert_fail@plt+0x5338>
   165f8:	ldr	r0, [r2]
   165fc:	cmp	r0, #0
   16600:	beq	165ec <__assert_fail@plt+0x531c>
   16604:	b	1660c <__assert_fail@plt+0x533c>
   16608:	mov	r0, #0
   1660c:	ldrd	r4, [sp]
   16610:	ldr	r6, [sp, #8]
   16614:	add	sp, sp, #12
   16618:	pop	{pc}		; (ldr pc, [sp], #4)
   1661c:	strd	r4, [sp, #-12]!
   16620:	str	lr, [sp, #8]
   16624:	ldr	r4, [r0]
   16628:	ldr	r3, [r0, #4]
   1662c:	cmp	r4, r3
   16630:	bcs	16698 <__assert_fail@plt+0x53c8>
   16634:	mov	r5, r0
   16638:	mov	r0, #0
   1663c:	b	16650 <__assert_fail@plt+0x5380>
   16640:	add	r4, r4, #8
   16644:	ldr	r3, [r5, #4]
   16648:	cmp	r3, r4
   1664c:	bls	1668c <__assert_fail@plt+0x53bc>
   16650:	ldr	r3, [r4]
   16654:	cmp	r3, #0
   16658:	beq	16640 <__assert_fail@plt+0x5370>
   1665c:	cmp	r2, r0
   16660:	bls	1668c <__assert_fail@plt+0x53bc>
   16664:	add	ip, r1, r0, lsl #2
   16668:	mov	r3, r4
   1666c:	add	r0, r0, #1
   16670:	ldr	lr, [r3]
   16674:	str	lr, [ip], #4
   16678:	ldr	r3, [r3, #4]
   1667c:	cmp	r3, #0
   16680:	beq	16640 <__assert_fail@plt+0x5370>
   16684:	cmp	r2, r0
   16688:	bne	1666c <__assert_fail@plt+0x539c>
   1668c:	ldrd	r4, [sp]
   16690:	add	sp, sp, #8
   16694:	pop	{pc}		; (ldr pc, [sp], #4)
   16698:	mov	r0, #0
   1669c:	b	1668c <__assert_fail@plt+0x53bc>
   166a0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   166a4:	strd	r6, [sp, #8]
   166a8:	strd	r8, [sp, #16]
   166ac:	str	sl, [sp, #24]
   166b0:	str	lr, [sp, #28]
   166b4:	ldr	r8, [r0]
   166b8:	ldr	r3, [r0, #4]
   166bc:	cmp	r8, r3
   166c0:	bcs	16720 <__assert_fail@plt+0x5450>
   166c4:	mov	r7, r2
   166c8:	mov	r6, r1
   166cc:	mov	r9, r0
   166d0:	mov	r5, #0
   166d4:	b	166e8 <__assert_fail@plt+0x5418>
   166d8:	add	r8, r8, #8
   166dc:	ldr	r3, [r9, #4]
   166e0:	cmp	r3, r8
   166e4:	bls	16724 <__assert_fail@plt+0x5454>
   166e8:	ldr	r3, [r8]
   166ec:	cmp	r3, #0
   166f0:	beq	166d8 <__assert_fail@plt+0x5408>
   166f4:	mov	r4, r8
   166f8:	mov	r1, r7
   166fc:	ldr	r0, [r4]
   16700:	blx	r6
   16704:	cmp	r0, #0
   16708:	beq	16724 <__assert_fail@plt+0x5454>
   1670c:	add	r5, r5, #1
   16710:	ldr	r4, [r4, #4]
   16714:	cmp	r4, #0
   16718:	bne	166f8 <__assert_fail@plt+0x5428>
   1671c:	b	166d8 <__assert_fail@plt+0x5408>
   16720:	mov	r5, #0
   16724:	mov	r0, r5
   16728:	ldrd	r4, [sp]
   1672c:	ldrd	r6, [sp, #8]
   16730:	ldrd	r8, [sp, #16]
   16734:	ldr	sl, [sp, #24]
   16738:	add	sp, sp, #28
   1673c:	pop	{pc}		; (ldr pc, [sp], #4)
   16740:	ldrb	r2, [r0]
   16744:	cmp	r2, #0
   16748:	beq	16774 <__assert_fail@plt+0x54a4>
   1674c:	mov	r3, #0
   16750:	rsb	r3, r3, r3, lsl #5
   16754:	add	r3, r3, r2
   16758:	udiv	r2, r3, r1
   1675c:	mls	r3, r1, r2, r3
   16760:	ldrb	r2, [r0, #1]!
   16764:	cmp	r2, #0
   16768:	bne	16750 <__assert_fail@plt+0x5480>
   1676c:	mov	r0, r3
   16770:	bx	lr
   16774:	mov	r3, #0
   16778:	b	1676c <__assert_fail@plt+0x549c>
   1677c:	strd	r4, [sp, #-8]!
   16780:	movw	r3, #48012	; 0xbb8c
   16784:	movt	r3, #1
   16788:	ldrd	r4, [r3]
   1678c:	strd	r4, [r0]
   16790:	ldrd	r4, [r3, #8]
   16794:	strd	r4, [r0, #8]
   16798:	ldr	r3, [r3, #16]
   1679c:	str	r3, [r0, #16]
   167a0:	ldrd	r4, [sp]
   167a4:	add	sp, sp, #8
   167a8:	bx	lr
   167ac:	strd	r4, [sp, #-24]!	; 0xffffffe8
   167b0:	strd	r6, [sp, #8]
   167b4:	str	r8, [sp, #16]
   167b8:	str	lr, [sp, #20]
   167bc:	mov	r8, r0
   167c0:	mov	r5, r1
   167c4:	subs	r7, r2, #0
   167c8:	movw	r2, #24016	; 0x5dd0
   167cc:	movt	r2, #1
   167d0:	cmp	r7, #0
   167d4:	moveq	r7, r2
   167d8:	subs	r6, r3, #0
   167dc:	movw	r3, #24032	; 0x5de0
   167e0:	movt	r3, #1
   167e4:	cmp	r6, #0
   167e8:	moveq	r6, r3
   167ec:	mov	r0, #40	; 0x28
   167f0:	bl	1a09c <__assert_fail@plt+0x8dcc>
   167f4:	subs	r4, r0, #0
   167f8:	beq	16878 <__assert_fail@plt+0x55a8>
   167fc:	movw	r3, #48012	; 0xbb8c
   16800:	movt	r3, #1
   16804:	cmp	r5, #0
   16808:	moveq	r5, r3
   1680c:	str	r5, [r4, #20]
   16810:	mov	r0, r4
   16814:	bl	15df0 <__assert_fail@plt+0x4b20>
   16818:	cmp	r0, #0
   1681c:	beq	16890 <__assert_fail@plt+0x55c0>
   16820:	mov	r1, r5
   16824:	mov	r0, r8
   16828:	bl	15eb4 <__assert_fail@plt+0x4be4>
   1682c:	str	r0, [r4, #8]
   16830:	cmp	r0, #0
   16834:	beq	16890 <__assert_fail@plt+0x55c0>
   16838:	mov	r1, #8
   1683c:	bl	1a028 <__assert_fail@plt+0x8d58>
   16840:	str	r0, [r4]
   16844:	cmp	r0, #0
   16848:	beq	16890 <__assert_fail@plt+0x55c0>
   1684c:	ldr	r3, [r4, #8]
   16850:	add	r0, r0, r3, lsl #3
   16854:	str	r0, [r4, #4]
   16858:	mov	r3, #0
   1685c:	str	r3, [r4, #12]
   16860:	str	r3, [r4, #16]
   16864:	str	r7, [r4, #24]
   16868:	str	r6, [r4, #28]
   1686c:	ldr	r2, [sp, #24]
   16870:	str	r2, [r4, #32]
   16874:	str	r3, [r4, #36]	; 0x24
   16878:	mov	r0, r4
   1687c:	ldrd	r4, [sp]
   16880:	ldrd	r6, [sp, #8]
   16884:	ldr	r8, [sp, #16]
   16888:	add	sp, sp, #20
   1688c:	pop	{pc}		; (ldr pc, [sp], #4)
   16890:	mov	r0, r4
   16894:	bl	13924 <__assert_fail@plt+0x2654>
   16898:	mov	r4, #0
   1689c:	b	16878 <__assert_fail@plt+0x55a8>
   168a0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   168a4:	strd	r6, [sp, #8]
   168a8:	str	r8, [sp, #16]
   168ac:	str	lr, [sp, #20]
   168b0:	mov	r5, r0
   168b4:	ldr	r6, [r0]
   168b8:	ldr	r3, [r0, #4]
   168bc:	cmp	r6, r3
   168c0:	bcs	16958 <__assert_fail@plt+0x5688>
   168c4:	add	r6, r6, #8
   168c8:	mov	r7, #0
   168cc:	b	16938 <__assert_fail@plt+0x5668>
   168d0:	str	r7, [r4]
   168d4:	ldr	r3, [r4, #4]
   168d8:	ldr	r2, [r5, #36]	; 0x24
   168dc:	str	r2, [r4, #4]
   168e0:	str	r4, [r5, #36]	; 0x24
   168e4:	mov	r4, r3
   168e8:	cmp	r3, #0
   168ec:	beq	16908 <__assert_fail@plt+0x5638>
   168f0:	ldr	r3, [r5, #32]
   168f4:	cmp	r3, #0
   168f8:	beq	168d0 <__assert_fail@plt+0x5600>
   168fc:	ldr	r0, [r4]
   16900:	blx	r3
   16904:	b	168d0 <__assert_fail@plt+0x5600>
   16908:	ldr	r3, [r5, #32]
   1690c:	cmp	r3, #0
   16910:	beq	1691c <__assert_fail@plt+0x564c>
   16914:	ldr	r0, [r8, #-8]
   16918:	blx	r3
   1691c:	str	r7, [r8, #-8]
   16920:	str	r7, [r8, #-4]
   16924:	add	r2, r6, #8
   16928:	ldr	r3, [r5, #4]
   1692c:	cmp	r3, r6
   16930:	bls	16958 <__assert_fail@plt+0x5688>
   16934:	mov	r6, r2
   16938:	mov	r8, r6
   1693c:	ldr	r3, [r6, #-8]
   16940:	cmp	r3, #0
   16944:	beq	16924 <__assert_fail@plt+0x5654>
   16948:	ldr	r4, [r6, #-4]
   1694c:	cmp	r4, #0
   16950:	bne	168f0 <__assert_fail@plt+0x5620>
   16954:	b	16908 <__assert_fail@plt+0x5638>
   16958:	mov	r3, #0
   1695c:	str	r3, [r5, #12]
   16960:	str	r3, [r5, #16]
   16964:	ldrd	r4, [sp]
   16968:	ldrd	r6, [sp, #8]
   1696c:	ldr	r8, [sp, #16]
   16970:	add	sp, sp, #20
   16974:	pop	{pc}		; (ldr pc, [sp], #4)
   16978:	strd	r4, [sp, #-16]!
   1697c:	str	r6, [sp, #8]
   16980:	str	lr, [sp, #12]
   16984:	mov	r6, r0
   16988:	ldr	r3, [r0, #32]
   1698c:	cmp	r3, #0
   16990:	beq	169f0 <__assert_fail@plt+0x5720>
   16994:	ldr	r3, [r0, #16]
   16998:	cmp	r3, #0
   1699c:	beq	169f0 <__assert_fail@plt+0x5720>
   169a0:	ldr	r5, [r0]
   169a4:	ldr	r3, [r0, #4]
   169a8:	cmp	r5, r3
   169ac:	bcc	169c4 <__assert_fail@plt+0x56f4>
   169b0:	b	16a00 <__assert_fail@plt+0x5730>
   169b4:	add	r5, r5, #8
   169b8:	ldr	r3, [r6, #4]
   169bc:	cmp	r3, r5
   169c0:	bls	169f0 <__assert_fail@plt+0x5720>
   169c4:	ldr	r3, [r5]
   169c8:	cmp	r3, #0
   169cc:	beq	169b4 <__assert_fail@plt+0x56e4>
   169d0:	mov	r4, r5
   169d4:	ldr	r3, [r6, #32]
   169d8:	ldr	r0, [r4]
   169dc:	blx	r3
   169e0:	ldr	r4, [r4, #4]
   169e4:	cmp	r4, #0
   169e8:	bne	169d4 <__assert_fail@plt+0x5704>
   169ec:	b	169b4 <__assert_fail@plt+0x56e4>
   169f0:	ldr	r5, [r6]
   169f4:	ldr	r3, [r6, #4]
   169f8:	cmp	r5, r3
   169fc:	bcc	16a50 <__assert_fail@plt+0x5780>
   16a00:	ldr	r0, [r6, #36]	; 0x24
   16a04:	cmp	r0, #0
   16a08:	beq	16a20 <__assert_fail@plt+0x5750>
   16a0c:	ldr	r4, [r0, #4]
   16a10:	bl	13924 <__assert_fail@plt+0x2654>
   16a14:	mov	r0, r4
   16a18:	cmp	r4, #0
   16a1c:	bne	16a0c <__assert_fail@plt+0x573c>
   16a20:	ldr	r0, [r6]
   16a24:	bl	13924 <__assert_fail@plt+0x2654>
   16a28:	mov	r0, r6
   16a2c:	bl	13924 <__assert_fail@plt+0x2654>
   16a30:	ldrd	r4, [sp]
   16a34:	ldr	r6, [sp, #8]
   16a38:	add	sp, sp, #12
   16a3c:	pop	{pc}		; (ldr pc, [sp], #4)
   16a40:	add	r5, r5, #8
   16a44:	ldr	r3, [r6, #4]
   16a48:	cmp	r3, r5
   16a4c:	bls	16a00 <__assert_fail@plt+0x5730>
   16a50:	ldr	r0, [r5, #4]
   16a54:	cmp	r0, #0
   16a58:	beq	16a40 <__assert_fail@plt+0x5770>
   16a5c:	ldr	r4, [r0, #4]
   16a60:	bl	13924 <__assert_fail@plt+0x2654>
   16a64:	mov	r0, r4
   16a68:	cmp	r4, #0
   16a6c:	bne	16a5c <__assert_fail@plt+0x578c>
   16a70:	b	16a40 <__assert_fail@plt+0x5770>
   16a74:	strd	r4, [sp, #-12]!
   16a78:	str	lr, [sp, #8]
   16a7c:	sub	sp, sp, #44	; 0x2c
   16a80:	mov	r4, r0
   16a84:	mov	r0, r1
   16a88:	ldr	r1, [r4, #20]
   16a8c:	bl	15eb4 <__assert_fail@plt+0x4be4>
   16a90:	subs	r5, r0, #0
   16a94:	beq	16b8c <__assert_fail@plt+0x58bc>
   16a98:	ldr	r3, [r4, #8]
   16a9c:	cmp	r3, r5
   16aa0:	beq	16ba4 <__assert_fail@plt+0x58d4>
   16aa4:	mov	r1, #8
   16aa8:	mov	r0, r5
   16aac:	bl	1a028 <__assert_fail@plt+0x8d58>
   16ab0:	str	r0, [sp]
   16ab4:	cmp	r0, #0
   16ab8:	beq	16bac <__assert_fail@plt+0x58dc>
   16abc:	str	r5, [sp, #8]
   16ac0:	add	r0, r0, r5, lsl #3
   16ac4:	str	r0, [sp, #4]
   16ac8:	mov	r2, #0
   16acc:	str	r2, [sp, #12]
   16ad0:	str	r2, [sp, #16]
   16ad4:	ldr	r3, [r4, #20]
   16ad8:	str	r3, [sp, #20]
   16adc:	ldr	r3, [r4, #24]
   16ae0:	str	r3, [sp, #24]
   16ae4:	ldr	r3, [r4, #28]
   16ae8:	str	r3, [sp, #28]
   16aec:	ldr	r3, [r4, #32]
   16af0:	str	r3, [sp, #32]
   16af4:	ldr	r3, [r4, #36]	; 0x24
   16af8:	str	r3, [sp, #36]	; 0x24
   16afc:	mov	r1, r4
   16b00:	mov	r0, sp
   16b04:	bl	15ffc <__assert_fail@plt+0x4d2c>
   16b08:	subs	r5, r0, #0
   16b0c:	bne	16b54 <__assert_fail@plt+0x5884>
   16b10:	ldr	r3, [sp, #36]	; 0x24
   16b14:	str	r3, [r4, #36]	; 0x24
   16b18:	mov	r2, #1
   16b1c:	mov	r1, sp
   16b20:	mov	r0, r4
   16b24:	bl	15ffc <__assert_fail@plt+0x4d2c>
   16b28:	cmp	r0, #0
   16b2c:	beq	16b88 <__assert_fail@plt+0x58b8>
   16b30:	mov	r2, #0
   16b34:	mov	r1, sp
   16b38:	mov	r0, r4
   16b3c:	bl	15ffc <__assert_fail@plt+0x4d2c>
   16b40:	cmp	r0, #0
   16b44:	beq	16b88 <__assert_fail@plt+0x58b8>
   16b48:	ldr	r0, [sp]
   16b4c:	bl	13924 <__assert_fail@plt+0x2654>
   16b50:	b	16b90 <__assert_fail@plt+0x58c0>
   16b54:	ldr	r0, [r4]
   16b58:	bl	13924 <__assert_fail@plt+0x2654>
   16b5c:	ldr	r3, [sp]
   16b60:	str	r3, [r4]
   16b64:	ldr	r3, [sp, #4]
   16b68:	str	r3, [r4, #4]
   16b6c:	ldr	r3, [sp, #8]
   16b70:	str	r3, [r4, #8]
   16b74:	ldr	r3, [sp, #12]
   16b78:	str	r3, [r4, #12]
   16b7c:	ldr	r3, [sp, #36]	; 0x24
   16b80:	str	r3, [r4, #36]	; 0x24
   16b84:	b	16b90 <__assert_fail@plt+0x58c0>
   16b88:	bl	11294 <abort@plt>
   16b8c:	mov	r5, #0
   16b90:	mov	r0, r5
   16b94:	add	sp, sp, #44	; 0x2c
   16b98:	ldrd	r4, [sp]
   16b9c:	add	sp, sp, #8
   16ba0:	pop	{pc}		; (ldr pc, [sp], #4)
   16ba4:	mov	r5, #1
   16ba8:	b	16b90 <__assert_fail@plt+0x58c0>
   16bac:	mov	r5, #0
   16bb0:	b	16b90 <__assert_fail@plt+0x58c0>
   16bb4:	strd	r4, [sp, #-16]!
   16bb8:	str	r6, [sp, #8]
   16bbc:	str	lr, [sp, #12]
   16bc0:	sub	sp, sp, #8
   16bc4:	subs	r5, r1, #0
   16bc8:	beq	16c14 <__assert_fail@plt+0x5944>
   16bcc:	mov	r4, r0
   16bd0:	mov	r6, r2
   16bd4:	mov	r3, #0
   16bd8:	add	r2, sp, #4
   16bdc:	mov	r1, r5
   16be0:	bl	16180 <__assert_fail@plt+0x4eb0>
   16be4:	cmp	r0, #0
   16be8:	beq	16c18 <__assert_fail@plt+0x5948>
   16bec:	cmp	r6, #0
   16bf0:	moveq	r0, #0
   16bf4:	beq	16c00 <__assert_fail@plt+0x5930>
   16bf8:	str	r0, [r6]
   16bfc:	mov	r0, #0
   16c00:	add	sp, sp, #8
   16c04:	ldrd	r4, [sp]
   16c08:	ldr	r6, [sp, #8]
   16c0c:	add	sp, sp, #12
   16c10:	pop	{pc}		; (ldr pc, [sp], #4)
   16c14:	bl	11294 <abort@plt>
   16c18:	vldr	s15, [r4, #12]
   16c1c:	vcvt.f32.u32	s14, s15
   16c20:	ldr	r3, [r4, #20]
   16c24:	vldr	s15, [r4, #8]
   16c28:	vcvt.f32.u32	s15, s15
   16c2c:	vldr	s13, [r3, #8]
   16c30:	vmul.f32	s15, s15, s13
   16c34:	vcmpe.f32	s14, s15
   16c38:	vmrs	APSR_nzcv, fpscr
   16c3c:	bgt	16c8c <__assert_fail@plt+0x59bc>
   16c40:	ldr	r3, [sp, #4]
   16c44:	ldr	r2, [r3]
   16c48:	cmp	r2, #0
   16c4c:	beq	16d38 <__assert_fail@plt+0x5a68>
   16c50:	ldr	r0, [r4, #36]	; 0x24
   16c54:	cmp	r0, #0
   16c58:	beq	16d20 <__assert_fail@plt+0x5a50>
   16c5c:	ldr	r3, [r0, #4]
   16c60:	str	r3, [r4, #36]	; 0x24
   16c64:	str	r5, [r0]
   16c68:	ldr	r3, [sp, #4]
   16c6c:	ldr	r2, [r3, #4]
   16c70:	str	r2, [r0, #4]
   16c74:	str	r0, [r3, #4]
   16c78:	ldr	r3, [r4, #16]
   16c7c:	add	r3, r3, #1
   16c80:	str	r3, [r4, #16]
   16c84:	mov	r0, #1
   16c88:	b	16c00 <__assert_fail@plt+0x5930>
   16c8c:	mov	r0, r4
   16c90:	bl	15df0 <__assert_fail@plt+0x4b20>
   16c94:	ldr	r3, [r4, #20]
   16c98:	vldr	s13, [r3, #8]
   16c9c:	vldr	s15, [r4, #8]
   16ca0:	vcvt.f32.u32	s15, s15
   16ca4:	vldr	s14, [r4, #12]
   16ca8:	vcvt.f32.u32	s14, s14
   16cac:	vmul.f32	s12, s13, s15
   16cb0:	vcmpe.f32	s14, s12
   16cb4:	vmrs	APSR_nzcv, fpscr
   16cb8:	ble	16c40 <__assert_fail@plt+0x5970>
   16cbc:	ldrb	r2, [r3, #16]
   16cc0:	cmp	r2, #0
   16cc4:	vldr	s14, [r3, #12]
   16cc8:	vmul.f32	s15, s15, s14
   16ccc:	vmuleq.f32	s15, s15, s13
   16cd0:	vldr	s14, [pc, #132]	; 16d5c <__assert_fail@plt+0x5a8c>
   16cd4:	vcmpe.f32	s15, s14
   16cd8:	vmrs	APSR_nzcv, fpscr
   16cdc:	mvnge	r0, #0
   16ce0:	bge	16c00 <__assert_fail@plt+0x5930>
   16ce4:	vcvt.u32.f32	s15, s15
   16ce8:	vmov	r1, s15
   16cec:	mov	r0, r4
   16cf0:	bl	16a74 <__assert_fail@plt+0x57a4>
   16cf4:	cmp	r0, #0
   16cf8:	mvneq	r0, #0
   16cfc:	beq	16c00 <__assert_fail@plt+0x5930>
   16d00:	mov	r3, #0
   16d04:	add	r2, sp, #4
   16d08:	mov	r1, r5
   16d0c:	mov	r0, r4
   16d10:	bl	16180 <__assert_fail@plt+0x4eb0>
   16d14:	cmp	r0, #0
   16d18:	beq	16c40 <__assert_fail@plt+0x5970>
   16d1c:	bl	11294 <abort@plt>
   16d20:	mov	r0, #8
   16d24:	bl	1a09c <__assert_fail@plt+0x8dcc>
   16d28:	cmp	r0, #0
   16d2c:	mvneq	r0, #0
   16d30:	beq	16c00 <__assert_fail@plt+0x5930>
   16d34:	b	16c64 <__assert_fail@plt+0x5994>
   16d38:	str	r5, [r3]
   16d3c:	ldr	r3, [r4, #16]
   16d40:	add	r3, r3, #1
   16d44:	str	r3, [r4, #16]
   16d48:	ldr	r3, [r4, #12]
   16d4c:	add	r3, r3, #1
   16d50:	str	r3, [r4, #12]
   16d54:	mov	r0, #1
   16d58:	b	16c00 <__assert_fail@plt+0x5930>
   16d5c:	svcmi	0x00800000
   16d60:	str	r4, [sp, #-8]!
   16d64:	str	lr, [sp, #4]
   16d68:	sub	sp, sp, #8
   16d6c:	mov	r4, r1
   16d70:	add	r2, sp, #4
   16d74:	bl	16bb4 <__assert_fail@plt+0x58e4>
   16d78:	cmn	r0, #1
   16d7c:	moveq	r0, #0
   16d80:	beq	16d90 <__assert_fail@plt+0x5ac0>
   16d84:	cmp	r0, #0
   16d88:	ldreq	r0, [sp, #4]
   16d8c:	movne	r0, r4
   16d90:	add	sp, sp, #8
   16d94:	ldr	r4, [sp]
   16d98:	add	sp, sp, #4
   16d9c:	pop	{pc}		; (ldr pc, [sp], #4)
   16da0:	strd	r4, [sp, #-16]!
   16da4:	str	r6, [sp, #8]
   16da8:	str	lr, [sp, #12]
   16dac:	sub	sp, sp, #8
   16db0:	mov	r4, r0
   16db4:	mov	r3, #1
   16db8:	add	r2, sp, #4
   16dbc:	bl	16180 <__assert_fail@plt+0x4eb0>
   16dc0:	subs	r5, r0, #0
   16dc4:	beq	16de4 <__assert_fail@plt+0x5b14>
   16dc8:	ldr	r3, [r4, #16]
   16dcc:	sub	r3, r3, #1
   16dd0:	str	r3, [r4, #16]
   16dd4:	ldr	r3, [sp, #4]
   16dd8:	ldr	r3, [r3]
   16ddc:	cmp	r3, #0
   16de0:	beq	16dfc <__assert_fail@plt+0x5b2c>
   16de4:	mov	r0, r5
   16de8:	add	sp, sp, #8
   16dec:	ldrd	r4, [sp]
   16df0:	ldr	r6, [sp, #8]
   16df4:	add	sp, sp, #12
   16df8:	pop	{pc}		; (ldr pc, [sp], #4)
   16dfc:	ldr	r3, [r4, #12]
   16e00:	sub	r3, r3, #1
   16e04:	str	r3, [r4, #12]
   16e08:	vmov	s15, r3
   16e0c:	vcvt.f32.u32	s15, s15
   16e10:	ldr	r3, [r4, #20]
   16e14:	vldr	s14, [r4, #8]
   16e18:	vcvt.f32.u32	s14, s14
   16e1c:	vldr	s13, [r3]
   16e20:	vmul.f32	s14, s14, s13
   16e24:	vcmpe.f32	s15, s14
   16e28:	vmrs	APSR_nzcv, fpscr
   16e2c:	bpl	16de4 <__assert_fail@plt+0x5b14>
   16e30:	mov	r0, r4
   16e34:	bl	15df0 <__assert_fail@plt+0x4b20>
   16e38:	ldr	r3, [r4, #20]
   16e3c:	vldr	s15, [r4, #8]
   16e40:	vcvt.f32.u32	s15, s15
   16e44:	vldr	s14, [r4, #12]
   16e48:	vcvt.f32.u32	s13, s14
   16e4c:	vldr	s14, [r3]
   16e50:	vmul.f32	s14, s15, s14
   16e54:	vcmpe.f32	s13, s14
   16e58:	vmrs	APSR_nzcv, fpscr
   16e5c:	bpl	16de4 <__assert_fail@plt+0x5b14>
   16e60:	ldrb	r2, [r3, #16]
   16e64:	cmp	r2, #0
   16e68:	vldr	s14, [r3, #4]
   16e6c:	vmuleq.f32	s15, s15, s14
   16e70:	vldreq	s14, [r3, #8]
   16e74:	vmul.f32	s15, s15, s14
   16e78:	vcvt.u32.f32	s15, s15
   16e7c:	vmov	r1, s15
   16e80:	mov	r0, r4
   16e84:	bl	16a74 <__assert_fail@plt+0x57a4>
   16e88:	cmp	r0, #0
   16e8c:	bne	16de4 <__assert_fail@plt+0x5b14>
   16e90:	ldr	r0, [r4, #36]	; 0x24
   16e94:	cmp	r0, #0
   16e98:	beq	16eb0 <__assert_fail@plt+0x5be0>
   16e9c:	ldr	r6, [r0, #4]
   16ea0:	bl	13924 <__assert_fail@plt+0x2654>
   16ea4:	mov	r0, r6
   16ea8:	cmp	r6, #0
   16eac:	bne	16e9c <__assert_fail@plt+0x5bcc>
   16eb0:	mov	r3, #0
   16eb4:	str	r3, [r4, #36]	; 0x24
   16eb8:	b	16de4 <__assert_fail@plt+0x5b14>
   16ebc:	str	r4, [sp, #-8]!
   16ec0:	str	lr, [sp, #4]
   16ec4:	bl	16da0 <__assert_fail@plt+0x5ad0>
   16ec8:	ldr	r4, [sp]
   16ecc:	add	sp, sp, #4
   16ed0:	pop	{pc}		; (ldr pc, [sp], #4)
   16ed4:	mov	r3, #1
   16ed8:	strb	r3, [r0, #28]
   16edc:	mov	r3, #0
   16ee0:	str	r3, [r0, #20]
   16ee4:	str	r3, [r0, #24]
   16ee8:	str	r1, [r0]
   16eec:	str	r1, [r0, #4]
   16ef0:	str	r1, [r0, #8]
   16ef4:	str	r1, [r0, #12]
   16ef8:	str	r1, [r0, #16]
   16efc:	bx	lr
   16f00:	ldrb	r0, [r0, #28]
   16f04:	bx	lr
   16f08:	mov	r2, r0
   16f0c:	ldrb	ip, [r0, #28]
   16f10:	eor	ip, ip, #1
   16f14:	ldr	r3, [r0, #20]
   16f18:	add	r3, ip, r3
   16f1c:	and	r3, r3, #3
   16f20:	ldr	r0, [r0, r3, lsl #2]
   16f24:	str	r1, [r2, r3, lsl #2]
   16f28:	str	r3, [r2, #20]
   16f2c:	ldr	r1, [r2, #24]
   16f30:	cmp	r1, r3
   16f34:	beq	16f44 <__assert_fail@plt+0x5c74>
   16f38:	mov	r3, #0
   16f3c:	strb	r3, [r2, #28]
   16f40:	bx	lr
   16f44:	add	ip, ip, r1
   16f48:	and	ip, ip, #3
   16f4c:	str	ip, [r2, #24]
   16f50:	b	16f38 <__assert_fail@plt+0x5c68>
   16f54:	ldrb	r3, [r0, #28]
   16f58:	cmp	r3, #0
   16f5c:	bne	16f98 <__assert_fail@plt+0x5cc8>
   16f60:	ldr	r3, [r0, #20]
   16f64:	ldr	r2, [r0, r3, lsl #2]
   16f68:	ldr	r1, [r0, #16]
   16f6c:	str	r1, [r0, r3, lsl #2]
   16f70:	ldr	r1, [r0, #24]
   16f74:	cmp	r3, r1
   16f78:	moveq	r3, #1
   16f7c:	strbeq	r3, [r0, #28]
   16f80:	beq	16f90 <__assert_fail@plt+0x5cc0>
   16f84:	add	r3, r3, #3
   16f88:	and	r3, r3, #3
   16f8c:	str	r3, [r0, #20]
   16f90:	mov	r0, r2
   16f94:	bx	lr
   16f98:	str	r4, [sp, #-8]!
   16f9c:	str	lr, [sp, #4]
   16fa0:	bl	11294 <abort@plt>
   16fa4:	push	{r2, r3}
   16fa8:	push	{lr}		; (str lr, [sp, #-4]!)
   16fac:	sub	sp, sp, #12
   16fb0:	ldr	r2, [sp, #16]
   16fb4:	tst	r2, #64	; 0x40
   16fb8:	addne	r3, sp, #24
   16fbc:	strne	r3, [sp, #4]
   16fc0:	ldrne	r3, [sp, #20]
   16fc4:	moveq	r3, #0
   16fc8:	bl	11174 <openat64@plt>
   16fcc:	bl	193c4 <__assert_fail@plt+0x80f4>
   16fd0:	add	sp, sp, #12
   16fd4:	pop	{lr}		; (ldr lr, [sp], #4)
   16fd8:	add	sp, sp, #8
   16fdc:	bx	lr
   16fe0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   16fe4:	strd	r6, [sp, #8]
   16fe8:	str	r8, [sp, #16]
   16fec:	str	lr, [sp, #20]
   16ff0:	mov	r6, r3
   16ff4:	orr	r2, r2, #540672	; 0x84000
   16ff8:	orr	r2, r2, #2304	; 0x900
   16ffc:	bl	16fa4 <__assert_fail@plt+0x5cd4>
   17000:	subs	r4, r0, #0
   17004:	movlt	r5, #0
   17008:	blt	17020 <__assert_fail@plt+0x5d50>
   1700c:	mov	r0, r4
   17010:	bl	11234 <fdopendir@plt>
   17014:	subs	r5, r0, #0
   17018:	strne	r4, [r6]
   1701c:	beq	17038 <__assert_fail@plt+0x5d68>
   17020:	mov	r0, r5
   17024:	ldrd	r4, [sp]
   17028:	ldrd	r6, [sp, #8]
   1702c:	ldr	r8, [sp, #16]
   17030:	add	sp, sp, #20
   17034:	pop	{pc}		; (ldr pc, [sp], #4)
   17038:	bl	11180 <__errno_location@plt>
   1703c:	mov	r6, r0
   17040:	ldr	r7, [r0]
   17044:	mov	r0, r4
   17048:	bl	112a0 <close@plt>
   1704c:	str	r7, [r6]
   17050:	b	17020 <__assert_fail@plt+0x5d50>
   17054:	strd	r4, [sp, #-16]!
   17058:	str	r6, [sp, #8]
   1705c:	str	lr, [sp, #12]
   17060:	subs	r4, r0, #0
   17064:	beq	17100 <__assert_fail@plt+0x5e30>
   17068:	mov	r1, #47	; 0x2f
   1706c:	mov	r0, r4
   17070:	bl	11210 <strrchr@plt>
   17074:	subs	r5, r0, #0
   17078:	beq	170d8 <__assert_fail@plt+0x5e08>
   1707c:	add	r6, r5, #1
   17080:	sub	r3, r6, r4
   17084:	cmp	r3, #6
   17088:	ble	170d8 <__assert_fail@plt+0x5e08>
   1708c:	mov	r2, #7
   17090:	movw	r1, #48196	; 0xbc44
   17094:	movt	r1, #1
   17098:	sub	r0, r5, #6
   1709c:	bl	11288 <strncmp@plt>
   170a0:	cmp	r0, #0
   170a4:	bne	170d8 <__assert_fail@plt+0x5e08>
   170a8:	mov	r2, #3
   170ac:	movw	r1, #48204	; 0xbc4c
   170b0:	movt	r1, #1
   170b4:	mov	r0, r6
   170b8:	bl	11288 <strncmp@plt>
   170bc:	cmp	r0, #0
   170c0:	movne	r4, r6
   170c4:	bne	170d8 <__assert_fail@plt+0x5e08>
   170c8:	add	r4, r5, #4
   170cc:	movw	r3, #53624	; 0xd178
   170d0:	movt	r3, #2
   170d4:	str	r4, [r3]
   170d8:	movw	r3, #53692	; 0xd1bc
   170dc:	movt	r3, #2
   170e0:	str	r4, [r3]
   170e4:	movw	r3, #53628	; 0xd17c
   170e8:	movt	r3, #2
   170ec:	str	r4, [r3]
   170f0:	ldrd	r4, [sp]
   170f4:	ldr	r6, [sp, #8]
   170f8:	add	sp, sp, #12
   170fc:	pop	{pc}		; (ldr pc, [sp], #4)
   17100:	movw	r3, #53640	; 0xd188
   17104:	movt	r3, #2
   17108:	ldr	r3, [r3]
   1710c:	mov	r2, #55	; 0x37
   17110:	mov	r1, #1
   17114:	movw	r0, #48140	; 0xbc0c
   17118:	movt	r0, #1
   1711c:	bl	110b4 <fwrite@plt>
   17120:	bl	11294 <abort@plt>
   17124:	mov	r2, #0
   17128:	mov	r3, #0
   1712c:	strd	r2, [r0]
   17130:	strd	r2, [r0, #8]
   17134:	strd	r2, [r0, #16]
   17138:	strd	r2, [r0, #24]
   1713c:	strd	r2, [r0, #32]
   17140:	strd	r2, [r0, #40]	; 0x28
   17144:	cmp	r1, #10
   17148:	beq	17154 <__assert_fail@plt+0x5e84>
   1714c:	str	r1, [r0]
   17150:	bx	lr
   17154:	str	r4, [sp, #-8]!
   17158:	str	lr, [sp, #4]
   1715c:	bl	11294 <abort@plt>
   17160:	strd	r4, [sp, #-16]!
   17164:	str	r6, [sp, #8]
   17168:	str	lr, [sp, #12]
   1716c:	mov	r5, r0
   17170:	mov	r6, r1
   17174:	mov	r2, #5
   17178:	mov	r1, r0
   1717c:	mov	r0, #0
   17180:	bl	11060 <dcgettext@plt>
   17184:	mov	r4, r0
   17188:	cmp	r5, r0
   1718c:	beq	171a4 <__assert_fail@plt+0x5ed4>
   17190:	mov	r0, r4
   17194:	ldrd	r4, [sp]
   17198:	ldr	r6, [sp, #8]
   1719c:	add	sp, sp, #12
   171a0:	pop	{pc}		; (ldr pc, [sp], #4)
   171a4:	bl	1a630 <__assert_fail@plt+0x9360>
   171a8:	ldrb	r3, [r0]
   171ac:	bic	r3, r3, #32
   171b0:	cmp	r3, #85	; 0x55
   171b4:	bne	17238 <__assert_fail@plt+0x5f68>
   171b8:	ldrb	r3, [r0, #1]
   171bc:	bic	r3, r3, #32
   171c0:	cmp	r3, #84	; 0x54
   171c4:	bne	171fc <__assert_fail@plt+0x5f2c>
   171c8:	ldrb	r3, [r0, #2]
   171cc:	bic	r3, r3, #32
   171d0:	cmp	r3, #70	; 0x46
   171d4:	bne	171fc <__assert_fail@plt+0x5f2c>
   171d8:	ldrb	r3, [r0, #3]
   171dc:	cmp	r3, #45	; 0x2d
   171e0:	bne	171fc <__assert_fail@plt+0x5f2c>
   171e4:	ldrb	r3, [r0, #4]
   171e8:	cmp	r3, #56	; 0x38
   171ec:	bne	171fc <__assert_fail@plt+0x5f2c>
   171f0:	ldrb	r3, [r0, #5]
   171f4:	cmp	r3, #0
   171f8:	beq	17218 <__assert_fail@plt+0x5f48>
   171fc:	movw	r4, #48292	; 0xbca4
   17200:	movt	r4, #1
   17204:	movw	r3, #48312	; 0xbcb8
   17208:	movt	r3, #1
   1720c:	cmp	r6, #9
   17210:	movne	r4, r3
   17214:	b	17190 <__assert_fail@plt+0x5ec0>
   17218:	ldrb	r2, [r4]
   1721c:	movw	r4, #48308	; 0xbcb4
   17220:	movt	r4, #1
   17224:	movw	r3, #48296	; 0xbca8
   17228:	movt	r3, #1
   1722c:	cmp	r2, #96	; 0x60
   17230:	movne	r4, r3
   17234:	b	17190 <__assert_fail@plt+0x5ec0>
   17238:	cmp	r3, #71	; 0x47
   1723c:	bne	171fc <__assert_fail@plt+0x5f2c>
   17240:	ldrb	r3, [r0, #1]
   17244:	bic	r3, r3, #32
   17248:	cmp	r3, #66	; 0x42
   1724c:	bne	171fc <__assert_fail@plt+0x5f2c>
   17250:	ldrb	r3, [r0, #2]
   17254:	cmp	r3, #49	; 0x31
   17258:	bne	171fc <__assert_fail@plt+0x5f2c>
   1725c:	ldrb	r3, [r0, #3]
   17260:	cmp	r3, #56	; 0x38
   17264:	bne	171fc <__assert_fail@plt+0x5f2c>
   17268:	ldrb	r3, [r0, #4]
   1726c:	cmp	r3, #48	; 0x30
   17270:	bne	171fc <__assert_fail@plt+0x5f2c>
   17274:	ldrb	r3, [r0, #5]
   17278:	cmp	r3, #51	; 0x33
   1727c:	bne	171fc <__assert_fail@plt+0x5f2c>
   17280:	ldrb	r3, [r0, #6]
   17284:	cmp	r3, #48	; 0x30
   17288:	bne	171fc <__assert_fail@plt+0x5f2c>
   1728c:	ldrb	r3, [r0, #7]
   17290:	cmp	r3, #0
   17294:	bne	171fc <__assert_fail@plt+0x5f2c>
   17298:	ldrb	r2, [r4]
   1729c:	movw	r4, #48304	; 0xbcb0
   172a0:	movt	r4, #1
   172a4:	movw	r3, #48300	; 0xbcac
   172a8:	movt	r3, #1
   172ac:	cmp	r2, #96	; 0x60
   172b0:	movne	r4, r3
   172b4:	b	17190 <__assert_fail@plt+0x5ec0>
   172b8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   172bc:	strd	r6, [sp, #8]
   172c0:	strd	r8, [sp, #16]
   172c4:	strd	sl, [sp, #24]
   172c8:	str	lr, [sp, #32]
   172cc:	sub	sp, sp, #116	; 0x74
   172d0:	str	r0, [sp, #64]	; 0x40
   172d4:	mov	r8, r1
   172d8:	str	r2, [sp, #48]	; 0x30
   172dc:	str	r3, [sp, #24]
   172e0:	ldr	r7, [sp, #152]	; 0x98
   172e4:	bl	110cc <__ctype_get_mb_cur_max@plt>
   172e8:	str	r0, [sp, #76]	; 0x4c
   172ec:	ldr	r3, [sp, #156]	; 0x9c
   172f0:	ubfx	r3, r3, #1, #1
   172f4:	str	r3, [sp, #32]
   172f8:	mov	r3, #1
   172fc:	str	r3, [sp, #40]	; 0x28
   17300:	mov	r3, #0
   17304:	str	r3, [sp, #68]	; 0x44
   17308:	str	r3, [sp, #36]	; 0x24
   1730c:	str	r3, [sp, #28]
   17310:	str	r3, [sp, #52]	; 0x34
   17314:	str	r3, [sp, #60]	; 0x3c
   17318:	str	r3, [sp, #72]	; 0x48
   1731c:	movw	r3, #48316	; 0xbcbc
   17320:	movt	r3, #1
   17324:	str	r3, [sp, #80]	; 0x50
   17328:	mov	r9, r8
   1732c:	mov	sl, r7
   17330:	cmp	sl, #10
   17334:	ldrls	pc, [pc, sl, lsl #2]
   17338:	b	174fc <__assert_fail@plt+0x622c>
   1733c:	muleq	r1, ip, r3
   17340:	andeq	r7, r1, r0, ror r3
   17344:	ldrdeq	r7, [r1], -r4
   17348:	andeq	r7, r1, r8, ror #6
   1734c:	andeq	r7, r1, r8, lsl #9
   17350:	andeq	r7, r1, ip, lsr #7
   17354:	andeq	r8, r1, r8, ror r7
   17358:	andeq	r7, r1, r0, lsl #10
   1735c:	andeq	r7, r1, r8, ror #7
   17360:	andeq	r7, r1, r8, ror #7
   17364:	andeq	r7, r1, r8, ror #7
   17368:	mov	r3, #1
   1736c:	str	r3, [sp, #28]
   17370:	mov	r3, #1
   17374:	str	r3, [sp, #32]
   17378:	str	r3, [sp, #52]	; 0x34
   1737c:	movw	r3, #48312	; 0xbcb8
   17380:	movt	r3, #1
   17384:	str	r3, [sp, #60]	; 0x3c
   17388:	mov	fp, #0
   1738c:	mov	sl, #2
   17390:	mov	r6, #0
   17394:	ldr	r8, [sp, #64]	; 0x40
   17398:	b	17c10 <__assert_fail@plt+0x6940>
   1739c:	mov	fp, sl
   173a0:	mov	r3, #0
   173a4:	str	r3, [sp, #32]
   173a8:	b	17390 <__assert_fail@plt+0x60c0>
   173ac:	ldr	r3, [sp, #32]
   173b0:	cmp	r3, #0
   173b4:	bne	17514 <__assert_fail@plt+0x6244>
   173b8:	cmp	r9, #0
   173bc:	beq	17538 <__assert_fail@plt+0x6268>
   173c0:	mov	r3, #34	; 0x22
   173c4:	ldr	r2, [sp, #64]	; 0x40
   173c8:	strb	r3, [r2]
   173cc:	mov	fp, #1
   173d0:	str	fp, [sp, #28]
   173d4:	str	fp, [sp, #52]	; 0x34
   173d8:	movw	r3, #48292	; 0xbca4
   173dc:	movt	r3, #1
   173e0:	str	r3, [sp, #60]	; 0x3c
   173e4:	b	17390 <__assert_fail@plt+0x60c0>
   173e8:	cmp	sl, #10
   173ec:	bne	17420 <__assert_fail@plt+0x6150>
   173f0:	ldr	r3, [sp, #32]
   173f4:	cmp	r3, #0
   173f8:	movne	fp, #0
   173fc:	beq	17448 <__assert_fail@plt+0x6178>
   17400:	ldr	r0, [sp, #168]	; 0xa8
   17404:	bl	11168 <strlen@plt>
   17408:	str	r0, [sp, #52]	; 0x34
   1740c:	ldr	r3, [sp, #168]	; 0xa8
   17410:	str	r3, [sp, #60]	; 0x3c
   17414:	mov	r3, #1
   17418:	str	r3, [sp, #28]
   1741c:	b	17390 <__assert_fail@plt+0x60c0>
   17420:	mov	r1, sl
   17424:	ldr	r0, [sp, #80]	; 0x50
   17428:	bl	17160 <__assert_fail@plt+0x5e90>
   1742c:	str	r0, [sp, #164]	; 0xa4
   17430:	mov	r1, sl
   17434:	movw	r0, #48312	; 0xbcb8
   17438:	movt	r0, #1
   1743c:	bl	17160 <__assert_fail@plt+0x5e90>
   17440:	str	r0, [sp, #168]	; 0xa8
   17444:	b	173f0 <__assert_fail@plt+0x6120>
   17448:	ldr	r3, [sp, #164]	; 0xa4
   1744c:	ldrb	r3, [r3]
   17450:	cmp	r3, #0
   17454:	beq	17480 <__assert_fail@plt+0x61b0>
   17458:	ldr	r2, [sp, #164]	; 0xa4
   1745c:	mov	fp, #0
   17460:	ldr	r1, [sp, #64]	; 0x40
   17464:	cmp	r9, fp
   17468:	strbhi	r3, [r1, fp]
   1746c:	add	fp, fp, #1
   17470:	ldrb	r3, [r2, #1]!
   17474:	cmp	r3, #0
   17478:	bne	17464 <__assert_fail@plt+0x6194>
   1747c:	b	17400 <__assert_fail@plt+0x6130>
   17480:	mov	fp, #0
   17484:	b	17400 <__assert_fail@plt+0x6130>
   17488:	ldr	r3, [sp, #32]
   1748c:	cmp	r3, #0
   17490:	bne	17370 <__assert_fail@plt+0x60a0>
   17494:	mov	r3, #1
   17498:	str	r3, [sp, #28]
   1749c:	cmp	r9, #0
   174a0:	beq	17554 <__assert_fail@plt+0x6284>
   174a4:	mov	r3, #39	; 0x27
   174a8:	ldr	r2, [sp, #64]	; 0x40
   174ac:	strb	r3, [r2]
   174b0:	mov	r3, #0
   174b4:	str	r3, [sp, #32]
   174b8:	mov	fp, #1
   174bc:	str	fp, [sp, #52]	; 0x34
   174c0:	movw	r3, #48312	; 0xbcb8
   174c4:	movt	r3, #1
   174c8:	str	r3, [sp, #60]	; 0x3c
   174cc:	mov	sl, #2
   174d0:	b	17390 <__assert_fail@plt+0x60c0>
   174d4:	ldr	r3, [sp, #32]
   174d8:	cmp	r3, #0
   174dc:	beq	1749c <__assert_fail@plt+0x61cc>
   174e0:	mov	r3, #1
   174e4:	str	r3, [sp, #52]	; 0x34
   174e8:	movw	r3, #48312	; 0xbcb8
   174ec:	movt	r3, #1
   174f0:	str	r3, [sp, #60]	; 0x3c
   174f4:	mov	fp, #0
   174f8:	b	17390 <__assert_fail@plt+0x60c0>
   174fc:	bl	11294 <abort@plt>
   17500:	mov	fp, #0
   17504:	str	fp, [sp, #32]
   17508:	mov	r3, #1
   1750c:	str	r3, [sp, #28]
   17510:	b	17390 <__assert_fail@plt+0x60c0>
   17514:	ldr	r3, [sp, #32]
   17518:	str	r3, [sp, #28]
   1751c:	mov	r3, #1
   17520:	str	r3, [sp, #52]	; 0x34
   17524:	movw	r3, #48292	; 0xbca4
   17528:	movt	r3, #1
   1752c:	str	r3, [sp, #60]	; 0x3c
   17530:	mov	fp, #0
   17534:	b	17390 <__assert_fail@plt+0x60c0>
   17538:	mov	fp, #1
   1753c:	str	fp, [sp, #28]
   17540:	str	fp, [sp, #52]	; 0x34
   17544:	movw	r3, #48292	; 0xbca4
   17548:	movt	r3, #1
   1754c:	str	r3, [sp, #60]	; 0x3c
   17550:	b	17390 <__assert_fail@plt+0x60c0>
   17554:	mov	r3, #0
   17558:	str	r3, [sp, #32]
   1755c:	mov	fp, #1
   17560:	str	fp, [sp, #52]	; 0x34
   17564:	movw	r3, #48312	; 0xbcb8
   17568:	movt	r3, #1
   1756c:	str	r3, [sp, #60]	; 0x3c
   17570:	mov	sl, #2
   17574:	b	17390 <__assert_fail@plt+0x60c0>
   17578:	mov	r3, r2
   1757c:	add	r4, r6, r2
   17580:	ldr	r2, [sp, #24]
   17584:	cmp	r3, #1
   17588:	movls	r3, #0
   1758c:	movhi	r3, #1
   17590:	cmn	r2, #1
   17594:	movne	r3, #0
   17598:	cmp	r3, #0
   1759c:	beq	175ac <__assert_fail@plt+0x62dc>
   175a0:	ldr	r0, [sp, #48]	; 0x30
   175a4:	bl	11168 <strlen@plt>
   175a8:	str	r0, [sp, #24]
   175ac:	ldr	r3, [sp, #24]
   175b0:	cmp	r4, r3
   175b4:	bhi	187a0 <__assert_fail@plt+0x74d0>
   175b8:	ldr	r3, [sp, #48]	; 0x30
   175bc:	add	r4, r3, r6
   175c0:	ldr	r2, [sp, #52]	; 0x34
   175c4:	ldr	r1, [sp, #60]	; 0x3c
   175c8:	mov	r0, r4
   175cc:	bl	11048 <memcmp@plt>
   175d0:	cmp	r0, #0
   175d4:	bne	187a0 <__assert_fail@plt+0x74d0>
   175d8:	ldr	r3, [sp, #32]
   175dc:	cmp	r3, #0
   175e0:	bne	177f0 <__assert_fail@plt+0x6520>
   175e4:	ldrb	r4, [r4]
   175e8:	cmp	r4, #126	; 0x7e
   175ec:	ldrls	pc, [pc, r4, lsl #2]
   175f0:	b	180a4 <__assert_fail@plt+0x6dd4>
   175f4:	andeq	r7, r1, r4, lsr r8
   175f8:	andeq	r8, r1, r4, lsr #1
   175fc:	andeq	r8, r1, r4, lsr #1
   17600:	andeq	r8, r1, r4, lsr #1
   17604:	andeq	r8, r1, r4, lsr #1
   17608:	andeq	r8, r1, r4, lsr #1
   1760c:	andeq	r8, r1, r4, lsr #1
   17610:	andeq	r7, r1, ip, asr #30
   17614:	ldrdeq	r7, [r1], -r0
   17618:	andeq	r7, r1, r4, ror lr
   1761c:	andeq	r7, r1, r0, lsr #30
   17620:	andeq	r7, r1, r8, lsl #29
   17624:	andeq	r7, r1, r4, ror #21
   17628:	strdeq	r7, [r1], -r8
   1762c:	andeq	r8, r1, r4, lsr #1
   17630:	andeq	r8, r1, r4, lsr #1
   17634:	andeq	r8, r1, r4, lsr #1
   17638:	andeq	r8, r1, r4, lsr #1
   1763c:	andeq	r8, r1, r4, lsr #1
   17640:	andeq	r8, r1, r4, lsr #1
   17644:	andeq	r8, r1, r4, lsr #1
   17648:	andeq	r8, r1, r4, lsr #1
   1764c:	andeq	r8, r1, r4, lsr #1
   17650:	andeq	r8, r1, r4, lsr #1
   17654:	andeq	r8, r1, r4, lsr #1
   17658:	andeq	r8, r1, r4, lsr #1
   1765c:	andeq	r8, r1, r4, lsr #1
   17660:	andeq	r8, r1, r4, lsr #1
   17664:	andeq	r8, r1, r4, lsr #1
   17668:	andeq	r8, r1, r4, lsr #1
   1766c:	andeq	r8, r1, r4, lsr #1
   17670:	andeq	r8, r1, r4, lsr #1
   17674:	andeq	r7, r1, r0, asr #31
   17678:	andeq	r7, r1, r4, ror #31
   1767c:	andeq	r7, r1, r4, ror #31
   17680:	andeq	r7, r1, ip, ror pc
   17684:	andeq	r7, r1, r4, ror #31
   17688:	andeq	r8, r1, r4, lsl #10
   1768c:	andeq	r7, r1, r4, ror #31
   17690:	andeq	r8, r1, r4
   17694:	andeq	r7, r1, r4, ror #31
   17698:	andeq	r7, r1, r4, ror #31
   1769c:	andeq	r7, r1, r4, ror #31
   176a0:	andeq	r8, r1, r4, lsl #10
   176a4:	andeq	r8, r1, r4, lsl #10
   176a8:	andeq	r8, r1, r4, lsl #10
   176ac:	andeq	r8, r1, r4, lsl #10
   176b0:	andeq	r8, r1, r4, lsl #10
   176b4:	andeq	r8, r1, r4, lsl #10
   176b8:	andeq	r8, r1, r4, lsl #10
   176bc:	andeq	r8, r1, r4, lsl #10
   176c0:	andeq	r8, r1, r4, lsl #10
   176c4:	andeq	r8, r1, r4, lsl #10
   176c8:	andeq	r8, r1, r4, lsl #10
   176cc:	andeq	r8, r1, r4, lsl #10
   176d0:	andeq	r8, r1, r4, lsl #10
   176d4:	andeq	r8, r1, r4, lsl #10
   176d8:	andeq	r8, r1, r4, lsl #10
   176dc:	andeq	r8, r1, r4, lsl #10
   176e0:	andeq	r7, r1, r4, ror #31
   176e4:	andeq	r7, r1, r4, ror #31
   176e8:	andeq	r7, r1, r4, ror #31
   176ec:	andeq	r7, r1, r4, ror #31
   176f0:	andeq	r7, r1, r4, ror #18
   176f4:	andeq	r8, r1, r4, lsr #1
   176f8:	andeq	r8, r1, r4, lsl #10
   176fc:	andeq	r8, r1, r4, lsl #10
   17700:	andeq	r8, r1, r4, lsl #10
   17704:	andeq	r8, r1, r4, lsl #10
   17708:	andeq	r8, r1, r4, lsl #10
   1770c:	andeq	r8, r1, r4, lsl #10
   17710:	andeq	r8, r1, r4, lsl #10
   17714:	andeq	r8, r1, r4, lsl #10
   17718:	andeq	r8, r1, r4, lsl #10
   1771c:	andeq	r8, r1, r4, lsl #10
   17720:	andeq	r8, r1, r4, lsl #10
   17724:	andeq	r8, r1, r4, lsl #10
   17728:	andeq	r8, r1, r4, lsl #10
   1772c:	andeq	r8, r1, r4, lsl #10
   17730:	andeq	r8, r1, r4, lsl #10
   17734:	andeq	r8, r1, r4, lsl #10
   17738:	andeq	r8, r1, r4, lsl #10
   1773c:	andeq	r8, r1, r4, lsl #10
   17740:	andeq	r8, r1, r4, lsl #10
   17744:	andeq	r8, r1, r4, lsl #10
   17748:	andeq	r8, r1, r4, lsl #10
   1774c:	andeq	r8, r1, r4, lsl #10
   17750:	andeq	r8, r1, r4, lsl #10
   17754:	andeq	r8, r1, r4, lsl #10
   17758:	andeq	r8, r1, r4, lsl #10
   1775c:	andeq	r8, r1, r4, lsl #10
   17760:	andeq	r7, r1, r4, ror #31
   17764:	muleq	r1, ip, lr
   17768:	andeq	r8, r1, r4, lsl #10
   1776c:	andeq	r7, r1, r4, ror #31
   17770:	andeq	r8, r1, r4, lsl #10
   17774:	andeq	r7, r1, r4, ror #31
   17778:	andeq	r8, r1, r4, lsl #10
   1777c:	andeq	r8, r1, r4, lsl #10
   17780:	andeq	r8, r1, r4, lsl #10
   17784:	andeq	r8, r1, r4, lsl #10
   17788:	andeq	r8, r1, r4, lsl #10
   1778c:	andeq	r8, r1, r4, lsl #10
   17790:	andeq	r8, r1, r4, lsl #10
   17794:	andeq	r8, r1, r4, lsl #10
   17798:	andeq	r8, r1, r4, lsl #10
   1779c:	andeq	r8, r1, r4, lsl #10
   177a0:	andeq	r8, r1, r4, lsl #10
   177a4:	andeq	r8, r1, r4, lsl #10
   177a8:	andeq	r8, r1, r4, lsl #10
   177ac:	andeq	r8, r1, r4, lsl #10
   177b0:	andeq	r8, r1, r4, lsl #10
   177b4:	andeq	r8, r1, r4, lsl #10
   177b8:	andeq	r8, r1, r4, lsl #10
   177bc:	andeq	r8, r1, r4, lsl #10
   177c0:	andeq	r8, r1, r4, lsl #10
   177c4:	andeq	r8, r1, r4, lsl #10
   177c8:	andeq	r8, r1, r4, lsl #10
   177cc:	andeq	r8, r1, r4, lsl #10
   177d0:	andeq	r8, r1, r4, lsl #10
   177d4:	andeq	r8, r1, r4, lsl #10
   177d8:	andeq	r8, r1, r4, lsl #10
   177dc:	andeq	r8, r1, r4, lsl #10
   177e0:	andeq	r7, r1, ip, asr pc
   177e4:	andeq	r7, r1, r4, ror #31
   177e8:	andeq	r7, r1, ip, asr pc
   177ec:	andeq	r7, r1, ip, ror pc
   177f0:	mov	r8, r9
   177f4:	mov	r7, sl
   177f8:	b	186f8 <__assert_fail@plt+0x7428>
   177fc:	ldr	r3, [sp, #28]
   17800:	cmp	r3, #0
   17804:	bne	17824 <__assert_fail@plt+0x6554>
   17808:	ldr	r3, [sp, #156]	; 0x9c
   1780c:	tst	r3, #1
   17810:	bne	17c0c <__assert_fail@plt+0x693c>
   17814:	ldr	r3, [sp, #28]
   17818:	str	r3, [sp, #44]	; 0x2c
   1781c:	mov	r5, r3
   17820:	b	17b2c <__assert_fail@plt+0x685c>
   17824:	ldr	r3, [sp, #32]
   17828:	cmp	r3, #0
   1782c:	bne	186a8 <__assert_fail@plt+0x73d8>
   17830:	str	r3, [sp, #44]	; 0x2c
   17834:	ldr	r3, [sp, #36]	; 0x24
   17838:	eor	r3, r3, #1
   1783c:	cmp	sl, #2
   17840:	movne	r3, #0
   17844:	andeq	r3, r3, #1
   17848:	cmp	r3, #0
   1784c:	beq	178a4 <__assert_fail@plt+0x65d4>
   17850:	cmp	r9, fp
   17854:	movhi	r2, #39	; 0x27
   17858:	strbhi	r2, [r8, fp]
   1785c:	add	r2, fp, #1
   17860:	cmp	r9, r2
   17864:	movhi	r1, #36	; 0x24
   17868:	strbhi	r1, [r8, r2]
   1786c:	add	r2, fp, #2
   17870:	cmp	r9, r2
   17874:	movhi	r1, #39	; 0x27
   17878:	strbhi	r1, [r8, r2]
   1787c:	add	r2, fp, #3
   17880:	cmp	r9, r2
   17884:	bls	18764 <__assert_fail@plt+0x7494>
   17888:	mov	r1, #92	; 0x5c
   1788c:	strb	r1, [r8, r2]
   17890:	add	fp, fp, #4
   17894:	str	r3, [sp, #36]	; 0x24
   17898:	mov	r5, #0
   1789c:	mov	r4, #48	; 0x30
   178a0:	b	17b78 <__assert_fail@plt+0x68a8>
   178a4:	cmp	r9, fp
   178a8:	bhi	178d0 <__assert_fail@plt+0x6600>
   178ac:	add	r1, fp, #1
   178b0:	ldr	r2, [sp, #56]	; 0x38
   178b4:	cmp	r2, #0
   178b8:	bne	178f8 <__assert_fail@plt+0x6628>
   178bc:	mov	r3, r5
   178c0:	ldr	r5, [sp, #56]	; 0x38
   178c4:	mov	fp, r1
   178c8:	mov	r4, #48	; 0x30
   178cc:	b	17b2c <__assert_fail@plt+0x685c>
   178d0:	mov	r2, #92	; 0x5c
   178d4:	strb	r2, [r8, fp]
   178d8:	add	r1, fp, #1
   178dc:	ldr	r2, [sp, #56]	; 0x38
   178e0:	cmp	r2, #0
   178e4:	moveq	r3, r5
   178e8:	moveq	r5, r2
   178ec:	moveq	fp, r1
   178f0:	moveq	r4, #48	; 0x30
   178f4:	beq	17b78 <__assert_fail@plt+0x68a8>
   178f8:	add	r2, r6, #1
   178fc:	ldr	r0, [sp, #24]
   17900:	cmp	r2, r0
   17904:	bcs	17920 <__assert_fail@plt+0x6650>
   17908:	ldr	r0, [sp, #48]	; 0x30
   1790c:	ldrb	r2, [r0, r2]
   17910:	sub	r2, r2, #48	; 0x30
   17914:	uxtb	r2, r2
   17918:	cmp	r2, #9
   1791c:	bls	17938 <__assert_fail@plt+0x6668>
   17920:	mov	r2, r3
   17924:	mov	r3, r5
   17928:	mov	r5, r2
   1792c:	mov	fp, r1
   17930:	mov	r4, #48	; 0x30
   17934:	b	17b50 <__assert_fail@plt+0x6880>
   17938:	cmp	r9, r1
   1793c:	movhi	r2, #48	; 0x30
   17940:	strbhi	r2, [r8, r1]
   17944:	add	r2, fp, #2
   17948:	cmp	r9, r2
   1794c:	movhi	r1, #48	; 0x30
   17950:	strbhi	r1, [r8, r2]
   17954:	add	r1, fp, #3
   17958:	b	17920 <__assert_fail@plt+0x6650>
   1795c:	mov	r3, #0
   17960:	str	r3, [sp, #44]	; 0x2c
   17964:	cmp	sl, #2
   17968:	beq	17984 <__assert_fail@plt+0x66b4>
   1796c:	cmp	sl, #5
   17970:	beq	1799c <__assert_fail@plt+0x66cc>
   17974:	mov	r5, #0
   17978:	mov	r3, r5
   1797c:	mov	r4, #63	; 0x3f
   17980:	b	17b2c <__assert_fail@plt+0x685c>
   17984:	ldr	r3, [sp, #32]
   17988:	cmp	r3, #0
   1798c:	bne	186b4 <__assert_fail@plt+0x73e4>
   17990:	mov	r5, r3
   17994:	mov	r4, #63	; 0x3f
   17998:	b	18094 <__assert_fail@plt+0x6dc4>
   1799c:	ldr	r3, [sp, #156]	; 0x9c
   179a0:	tst	r3, #4
   179a4:	beq	184cc <__assert_fail@plt+0x71fc>
   179a8:	add	r2, r6, #2
   179ac:	ldr	r3, [sp, #24]
   179b0:	cmp	r2, r3
   179b4:	bcs	184dc <__assert_fail@plt+0x720c>
   179b8:	ldr	r3, [sp, #48]	; 0x30
   179bc:	add	r3, r3, r6
   179c0:	ldrb	r4, [r3, #1]
   179c4:	cmp	r4, #63	; 0x3f
   179c8:	movne	r5, #0
   179cc:	movne	r3, r5
   179d0:	movne	r4, #63	; 0x3f
   179d4:	bne	17b2c <__assert_fail@plt+0x685c>
   179d8:	ldr	r3, [sp, #48]	; 0x30
   179dc:	ldrb	r1, [r3, r2]
   179e0:	sub	r3, r1, #33	; 0x21
   179e4:	cmp	r3, #29
   179e8:	ldrls	pc, [pc, r3, lsl #2]
   179ec:	b	184ec <__assert_fail@plt+0x721c>
   179f0:	andeq	r7, r1, r8, ror #20
   179f4:	andeq	r8, r1, ip, ror #9
   179f8:	andeq	r8, r1, ip, ror #9
   179fc:	andeq	r8, r1, ip, ror #9
   17a00:	andeq	r8, r1, ip, ror #9
   17a04:	andeq	r8, r1, ip, ror #9
   17a08:	andeq	r7, r1, r8, ror #20
   17a0c:	andeq	r7, r1, r8, ror #20
   17a10:	andeq	r7, r1, r8, ror #20
   17a14:	andeq	r8, r1, ip, ror #9
   17a18:	andeq	r8, r1, ip, ror #9
   17a1c:	andeq	r8, r1, ip, ror #9
   17a20:	andeq	r7, r1, r8, ror #20
   17a24:	andeq	r8, r1, ip, ror #9
   17a28:	andeq	r7, r1, r8, ror #20
   17a2c:	andeq	r8, r1, ip, ror #9
   17a30:	andeq	r8, r1, ip, ror #9
   17a34:	andeq	r8, r1, ip, ror #9
   17a38:	andeq	r8, r1, ip, ror #9
   17a3c:	andeq	r8, r1, ip, ror #9
   17a40:	andeq	r8, r1, ip, ror #9
   17a44:	andeq	r8, r1, ip, ror #9
   17a48:	andeq	r8, r1, ip, ror #9
   17a4c:	andeq	r8, r1, ip, ror #9
   17a50:	andeq	r8, r1, ip, ror #9
   17a54:	andeq	r8, r1, ip, ror #9
   17a58:	andeq	r8, r1, ip, ror #9
   17a5c:	andeq	r7, r1, r8, ror #20
   17a60:	andeq	r7, r1, r8, ror #20
   17a64:	andeq	r7, r1, r8, ror #20
   17a68:	ldr	r3, [sp, #32]
   17a6c:	cmp	r3, #0
   17a70:	bne	18758 <__assert_fail@plt+0x7488>
   17a74:	cmp	r9, fp
   17a78:	movhi	r3, #63	; 0x3f
   17a7c:	strbhi	r3, [r8, fp]
   17a80:	add	r3, fp, #1
   17a84:	cmp	r9, r3
   17a88:	movhi	r0, #34	; 0x22
   17a8c:	strbhi	r0, [r8, r3]
   17a90:	add	r3, fp, #2
   17a94:	cmp	r9, r3
   17a98:	movhi	r0, #34	; 0x22
   17a9c:	strbhi	r0, [r8, r3]
   17aa0:	add	r3, fp, #3
   17aa4:	cmp	r9, r3
   17aa8:	movhi	r0, #63	; 0x3f
   17aac:	strbhi	r0, [r8, r3]
   17ab0:	add	fp, fp, #4
   17ab4:	ldr	r3, [sp, #32]
   17ab8:	mov	r5, r3
   17abc:	mov	r4, r1
   17ac0:	mov	r6, r2
   17ac4:	b	17b2c <__assert_fail@plt+0x685c>
   17ac8:	mov	r3, #0
   17acc:	str	r3, [sp, #44]	; 0x2c
   17ad0:	mov	r4, #8
   17ad4:	mov	r3, #98	; 0x62
   17ad8:	b	17b18 <__assert_fail@plt+0x6848>
   17adc:	mov	r3, #0
   17ae0:	str	r3, [sp, #44]	; 0x2c
   17ae4:	mov	r4, #12
   17ae8:	mov	r3, #102	; 0x66
   17aec:	b	17b18 <__assert_fail@plt+0x6848>
   17af0:	mov	r3, #0
   17af4:	str	r3, [sp, #44]	; 0x2c
   17af8:	mov	r4, #13
   17afc:	mov	r3, #114	; 0x72
   17b00:	ldr	r2, [sp, #32]
   17b04:	cmp	sl, #2
   17b08:	movne	r2, #0
   17b0c:	andeq	r2, r2, #1
   17b10:	cmp	r2, #0
   17b14:	bne	17f38 <__assert_fail@plt+0x6c68>
   17b18:	ldr	r2, [sp, #28]
   17b1c:	cmp	r2, #0
   17b20:	bne	18520 <__assert_fail@plt+0x7250>
   17b24:	mov	r5, r2
   17b28:	mov	r3, r2
   17b2c:	ldr	r2, [sp, #28]
   17b30:	eor	r2, r2, #1
   17b34:	cmp	sl, #2
   17b38:	orreq	r2, r2, #1
   17b3c:	eor	r2, r2, #1
   17b40:	ldr	r1, [sp, #32]
   17b44:	orr	r2, r1, r2
   17b48:	tst	r2, #255	; 0xff
   17b4c:	beq	17b78 <__assert_fail@plt+0x68a8>
   17b50:	ldr	r2, [sp, #160]	; 0xa0
   17b54:	cmp	r2, #0
   17b58:	beq	17b78 <__assert_fail@plt+0x68a8>
   17b5c:	ubfx	r1, r4, #5, #8
   17b60:	and	r2, r4, #31
   17b64:	ldr	r0, [sp, #160]	; 0xa0
   17b68:	ldr	r1, [r0, r1, lsl #2]
   17b6c:	lsr	r2, r1, r2
   17b70:	tst	r2, #1
   17b74:	bne	17b84 <__assert_fail@plt+0x68b4>
   17b78:	ldr	r2, [sp, #44]	; 0x2c
   17b7c:	cmp	r2, #0
   17b80:	beq	17ed8 <__assert_fail@plt+0x6c08>
   17b84:	ldr	r3, [sp, #32]
   17b88:	cmp	r3, #0
   17b8c:	bne	186d8 <__assert_fail@plt+0x7408>
   17b90:	ldr	r3, [sp, #36]	; 0x24
   17b94:	eor	r3, r3, #1
   17b98:	cmp	sl, #2
   17b9c:	movne	r3, #0
   17ba0:	andeq	r3, r3, #1
   17ba4:	cmp	r3, #0
   17ba8:	beq	17be0 <__assert_fail@plt+0x6910>
   17bac:	cmp	r9, fp
   17bb0:	movhi	r2, #39	; 0x27
   17bb4:	strbhi	r2, [r8, fp]
   17bb8:	add	r2, fp, #1
   17bbc:	cmp	r9, r2
   17bc0:	movhi	r1, #36	; 0x24
   17bc4:	strbhi	r1, [r8, r2]
   17bc8:	add	r2, fp, #2
   17bcc:	cmp	r9, r2
   17bd0:	movhi	r1, #39	; 0x27
   17bd4:	strbhi	r1, [r8, r2]
   17bd8:	add	fp, fp, #3
   17bdc:	str	r3, [sp, #36]	; 0x24
   17be0:	cmp	r9, fp
   17be4:	movhi	r3, #92	; 0x5c
   17be8:	strbhi	r3, [r8, fp]
   17bec:	add	fp, fp, #1
   17bf0:	cmp	fp, r9
   17bf4:	strbcc	r4, [r8, fp]
   17bf8:	add	fp, fp, #1
   17bfc:	cmp	r5, #0
   17c00:	ldr	r3, [sp, #40]	; 0x28
   17c04:	moveq	r3, r5
   17c08:	str	r3, [sp, #40]	; 0x28
   17c0c:	add	r6, r6, #1
   17c10:	ldr	r3, [sp, #24]
   17c14:	cmn	r3, #1
   17c18:	beq	18548 <__assert_fail@plt+0x7278>
   17c1c:	ldr	r3, [sp, #24]
   17c20:	subs	r5, r3, r6
   17c24:	movne	r5, #1
   17c28:	cmp	r5, #0
   17c2c:	beq	1855c <__assert_fail@plt+0x728c>
   17c30:	ldr	r3, [sp, #28]
   17c34:	cmp	sl, #2
   17c38:	moveq	r3, #0
   17c3c:	andne	r3, r3, #1
   17c40:	str	r3, [sp, #56]	; 0x38
   17c44:	ldr	r2, [sp, #52]	; 0x34
   17c48:	adds	r7, r2, #0
   17c4c:	movne	r7, #1
   17c50:	ands	r3, r3, r7
   17c54:	str	r3, [sp, #44]	; 0x2c
   17c58:	bne	17578 <__assert_fail@plt+0x62a8>
   17c5c:	ldr	r3, [sp, #48]	; 0x30
   17c60:	ldrb	r4, [r3, r6]
   17c64:	cmp	r4, #126	; 0x7e
   17c68:	ldrls	pc, [pc, r4, lsl #2]
   17c6c:	b	180a4 <__assert_fail@plt+0x6dd4>
   17c70:	strdeq	r7, [r1], -ip
   17c74:	andeq	r8, r1, r4, lsr #1
   17c78:	andeq	r8, r1, r4, lsr #1
   17c7c:	andeq	r8, r1, r4, lsr #1
   17c80:	andeq	r8, r1, r4, lsr #1
   17c84:	andeq	r8, r1, r4, lsr #1
   17c88:	andeq	r8, r1, r4, lsr #1
   17c8c:	andeq	r7, r1, r4, asr #30
   17c90:	ldrdeq	r7, [r1], -r0
   17c94:	andeq	r7, r1, r4, ror lr
   17c98:	andeq	r7, r1, r8, lsl pc
   17c9c:	andeq	r7, r1, r8, lsl #29
   17ca0:	andeq	r7, r1, r4, ror #21
   17ca4:	strdeq	r7, [r1], -r8
   17ca8:	andeq	r8, r1, r4, lsr #1
   17cac:	andeq	r8, r1, r4, lsr #1
   17cb0:	andeq	r8, r1, r4, lsr #1
   17cb4:	andeq	r8, r1, r4, lsr #1
   17cb8:	andeq	r8, r1, r4, lsr #1
   17cbc:	andeq	r8, r1, r4, lsr #1
   17cc0:	andeq	r8, r1, r4, lsr #1
   17cc4:	andeq	r8, r1, r4, lsr #1
   17cc8:	andeq	r8, r1, r4, lsr #1
   17ccc:	andeq	r8, r1, r4, lsr #1
   17cd0:	andeq	r8, r1, r4, lsr #1
   17cd4:	andeq	r8, r1, r4, lsr #1
   17cd8:	andeq	r8, r1, r4, lsr #1
   17cdc:	andeq	r8, r1, r4, lsr #1
   17ce0:	andeq	r8, r1, r4, lsr #1
   17ce4:	andeq	r8, r1, r4, lsr #1
   17ce8:	andeq	r8, r1, r4, lsr #1
   17cec:	andeq	r8, r1, r4, lsr #1
   17cf0:	andeq	r7, r1, r0, asr #31
   17cf4:			; <UNDEFINED> instruction: 0x00017fbc
   17cf8:			; <UNDEFINED> instruction: 0x00017fbc
   17cfc:	andeq	r7, r1, ip, ror pc
   17d00:			; <UNDEFINED> instruction: 0x00017fbc
   17d04:	andeq	r8, r1, r4, asr #9
   17d08:			; <UNDEFINED> instruction: 0x00017fbc
   17d0c:	andeq	r8, r1, r4
   17d10:			; <UNDEFINED> instruction: 0x00017fbc
   17d14:			; <UNDEFINED> instruction: 0x00017fbc
   17d18:			; <UNDEFINED> instruction: 0x00017fbc
   17d1c:	andeq	r8, r1, r4, asr #9
   17d20:	andeq	r8, r1, r4, asr #9
   17d24:	andeq	r8, r1, r4, asr #9
   17d28:	andeq	r8, r1, r4, asr #9
   17d2c:	andeq	r8, r1, r4, asr #9
   17d30:	andeq	r8, r1, r4, asr #9
   17d34:	andeq	r8, r1, r4, asr #9
   17d38:	andeq	r8, r1, r4, asr #9
   17d3c:	andeq	r8, r1, r4, asr #9
   17d40:	andeq	r8, r1, r4, asr #9
   17d44:	andeq	r8, r1, r4, asr #9
   17d48:	andeq	r8, r1, r4, asr #9
   17d4c:	andeq	r8, r1, r4, asr #9
   17d50:	andeq	r8, r1, r4, asr #9
   17d54:	andeq	r8, r1, r4, asr #9
   17d58:	andeq	r8, r1, r4, asr #9
   17d5c:			; <UNDEFINED> instruction: 0x00017fbc
   17d60:			; <UNDEFINED> instruction: 0x00017fbc
   17d64:			; <UNDEFINED> instruction: 0x00017fbc
   17d68:			; <UNDEFINED> instruction: 0x00017fbc
   17d6c:	andeq	r7, r1, r4, ror #18
   17d70:	andeq	r8, r1, r4, lsr #1
   17d74:	andeq	r8, r1, r4, asr #9
   17d78:	andeq	r8, r1, r4, asr #9
   17d7c:	andeq	r8, r1, r4, asr #9
   17d80:	andeq	r8, r1, r4, asr #9
   17d84:	andeq	r8, r1, r4, asr #9
   17d88:	andeq	r8, r1, r4, asr #9
   17d8c:	andeq	r8, r1, r4, asr #9
   17d90:	andeq	r8, r1, r4, asr #9
   17d94:	andeq	r8, r1, r4, asr #9
   17d98:	andeq	r8, r1, r4, asr #9
   17d9c:	andeq	r8, r1, r4, asr #9
   17da0:	andeq	r8, r1, r4, asr #9
   17da4:	andeq	r8, r1, r4, asr #9
   17da8:	andeq	r8, r1, r4, asr #9
   17dac:	andeq	r8, r1, r4, asr #9
   17db0:	andeq	r8, r1, r4, asr #9
   17db4:	andeq	r8, r1, r4, asr #9
   17db8:	andeq	r8, r1, r4, asr #9
   17dbc:	andeq	r8, r1, r4, asr #9
   17dc0:	andeq	r8, r1, r4, asr #9
   17dc4:	andeq	r8, r1, r4, asr #9
   17dc8:	andeq	r8, r1, r4, asr #9
   17dcc:	andeq	r8, r1, r4, asr #9
   17dd0:	andeq	r8, r1, r4, asr #9
   17dd4:	andeq	r8, r1, r4, asr #9
   17dd8:	andeq	r8, r1, r4, asr #9
   17ddc:			; <UNDEFINED> instruction: 0x00017fbc
   17de0:	muleq	r1, ip, lr
   17de4:	andeq	r8, r1, r4, asr #9
   17de8:			; <UNDEFINED> instruction: 0x00017fbc
   17dec:	andeq	r8, r1, r4, asr #9
   17df0:			; <UNDEFINED> instruction: 0x00017fbc
   17df4:	andeq	r8, r1, r4, asr #9
   17df8:	andeq	r8, r1, r4, asr #9
   17dfc:	andeq	r8, r1, r4, asr #9
   17e00:	andeq	r8, r1, r4, asr #9
   17e04:	andeq	r8, r1, r4, asr #9
   17e08:	andeq	r8, r1, r4, asr #9
   17e0c:	andeq	r8, r1, r4, asr #9
   17e10:	andeq	r8, r1, r4, asr #9
   17e14:	andeq	r8, r1, r4, asr #9
   17e18:	andeq	r8, r1, r4, asr #9
   17e1c:	andeq	r8, r1, r4, asr #9
   17e20:	andeq	r8, r1, r4, asr #9
   17e24:	andeq	r8, r1, r4, asr #9
   17e28:	andeq	r8, r1, r4, asr #9
   17e2c:	andeq	r8, r1, r4, asr #9
   17e30:	andeq	r8, r1, r4, asr #9
   17e34:	andeq	r8, r1, r4, asr #9
   17e38:	andeq	r8, r1, r4, asr #9
   17e3c:	andeq	r8, r1, r4, asr #9
   17e40:	andeq	r8, r1, r4, asr #9
   17e44:	andeq	r8, r1, r4, asr #9
   17e48:	andeq	r8, r1, r4, asr #9
   17e4c:	andeq	r8, r1, r4, asr #9
   17e50:	andeq	r8, r1, r4, asr #9
   17e54:	andeq	r8, r1, r4, asr #9
   17e58:	andeq	r8, r1, r4, asr #9
   17e5c:	andeq	r7, r1, ip, asr pc
   17e60:			; <UNDEFINED> instruction: 0x00017fbc
   17e64:	andeq	r7, r1, ip, asr pc
   17e68:	andeq	r7, r1, ip, ror pc
   17e6c:	mov	r3, #0
   17e70:	str	r3, [sp, #44]	; 0x2c
   17e74:	mov	r4, #9
   17e78:	mov	r3, #116	; 0x74
   17e7c:	b	17b00 <__assert_fail@plt+0x6830>
   17e80:	mov	r3, #0
   17e84:	str	r3, [sp, #44]	; 0x2c
   17e88:	mov	r4, #11
   17e8c:	mov	r3, #118	; 0x76
   17e90:	b	17b18 <__assert_fail@plt+0x6848>
   17e94:	mov	r3, #0
   17e98:	str	r3, [sp, #44]	; 0x2c
   17e9c:	cmp	sl, #2
   17ea0:	beq	17ec4 <__assert_fail@plt+0x6bf4>
   17ea4:	ldr	r3, [sp, #28]
   17ea8:	ldr	r2, [sp, #32]
   17eac:	and	r3, r3, r2
   17eb0:	tst	r7, r3
   17eb4:	bne	18538 <__assert_fail@plt+0x7268>
   17eb8:	mov	r4, #92	; 0x5c
   17ebc:	mov	r3, r4
   17ec0:	b	17b18 <__assert_fail@plt+0x6848>
   17ec4:	ldr	r3, [sp, #32]
   17ec8:	cmp	r3, #0
   17ecc:	bne	186c0 <__assert_fail@plt+0x73f0>
   17ed0:	mov	r5, r3
   17ed4:	mov	r4, #92	; 0x5c
   17ed8:	eor	r3, r3, #1
   17edc:	ldr	r2, [sp, #36]	; 0x24
   17ee0:	and	r3, r3, r2
   17ee4:	tst	r3, #255	; 0xff
   17ee8:	beq	17bf0 <__assert_fail@plt+0x6920>
   17eec:	cmp	r9, fp
   17ef0:	movhi	r3, #39	; 0x27
   17ef4:	strbhi	r3, [r8, fp]
   17ef8:	add	r3, fp, #1
   17efc:	cmp	r9, r3
   17f00:	movhi	r2, #39	; 0x27
   17f04:	strbhi	r2, [r8, r3]
   17f08:	add	fp, fp, #2
   17f0c:	mov	r3, #0
   17f10:	str	r3, [sp, #36]	; 0x24
   17f14:	b	17bf0 <__assert_fail@plt+0x6920>
   17f18:	mov	r3, #110	; 0x6e
   17f1c:	b	17b00 <__assert_fail@plt+0x6830>
   17f20:	mov	r3, #110	; 0x6e
   17f24:	b	17b00 <__assert_fail@plt+0x6830>
   17f28:	mov	r3, #0
   17f2c:	str	r3, [sp, #44]	; 0x2c
   17f30:	mov	r3, #110	; 0x6e
   17f34:	b	17b00 <__assert_fail@plt+0x6830>
   17f38:	mov	r8, r9
   17f3c:	mov	r7, #2
   17f40:	b	186e0 <__assert_fail@plt+0x7410>
   17f44:	mov	r3, #97	; 0x61
   17f48:	b	17b18 <__assert_fail@plt+0x6848>
   17f4c:	mov	r3, #97	; 0x61
   17f50:	b	17b18 <__assert_fail@plt+0x6848>
   17f54:	mov	r3, #0
   17f58:	str	r3, [sp, #44]	; 0x2c
   17f5c:	ldr	r3, [sp, #24]
   17f60:	cmn	r3, #1
   17f64:	beq	17f90 <__assert_fail@plt+0x6cc0>
   17f68:	ldr	r3, [sp, #24]
   17f6c:	subs	r3, r3, #1
   17f70:	movne	r3, #1
   17f74:	cmp	r3, #0
   17f78:	bne	184f8 <__assert_fail@plt+0x7228>
   17f7c:	cmp	r6, #0
   17f80:	beq	17fc0 <__assert_fail@plt+0x6cf0>
   17f84:	mov	r5, #0
   17f88:	mov	r3, r5
   17f8c:	b	17b2c <__assert_fail@plt+0x685c>
   17f90:	ldr	r3, [sp, #48]	; 0x30
   17f94:	ldrb	r3, [r3, #1]
   17f98:	adds	r3, r3, #0
   17f9c:	movne	r3, #1
   17fa0:	b	17f74 <__assert_fail@plt+0x6ca4>
   17fa4:	mov	r3, #0
   17fa8:	str	r3, [sp, #44]	; 0x2c
   17fac:	b	17f7c <__assert_fail@plt+0x6cac>
   17fb0:	mov	r3, #0
   17fb4:	str	r3, [sp, #44]	; 0x2c
   17fb8:	b	17fc0 <__assert_fail@plt+0x6cf0>
   17fbc:	ldr	r5, [sp, #44]	; 0x2c
   17fc0:	ldr	r3, [sp, #32]
   17fc4:	cmp	sl, #2
   17fc8:	movne	r3, #0
   17fcc:	andeq	r3, r3, #1
   17fd0:	cmp	r3, #0
   17fd4:	beq	17b2c <__assert_fail@plt+0x685c>
   17fd8:	mov	r8, r9
   17fdc:	mov	r7, #2
   17fe0:	b	186e0 <__assert_fail@plt+0x7410>
   17fe4:	ldr	r5, [sp, #32]
   17fe8:	b	17fc0 <__assert_fail@plt+0x6cf0>
   17fec:	mov	r3, #0
   17ff0:	str	r3, [sp, #44]	; 0x2c
   17ff4:	mov	r5, r3
   17ff8:	b	17fc0 <__assert_fail@plt+0x6cf0>
   17ffc:	mov	r3, #0
   18000:	str	r3, [sp, #44]	; 0x2c
   18004:	cmp	sl, #2
   18008:	strne	r5, [sp, #68]	; 0x44
   1800c:	movne	r3, #0
   18010:	movne	r4, #39	; 0x27
   18014:	bne	17b2c <__assert_fail@plt+0x685c>
   18018:	ldr	r3, [sp, #32]
   1801c:	cmp	r3, #0
   18020:	bne	186cc <__assert_fail@plt+0x73fc>
   18024:	ldr	r3, [sp, #72]	; 0x48
   18028:	clz	r3, r3
   1802c:	lsr	r3, r3, #5
   18030:	cmp	r9, #0
   18034:	moveq	r3, #0
   18038:	cmp	r3, #0
   1803c:	movne	r3, #0
   18040:	bne	18068 <__assert_fail@plt+0x6d98>
   18044:	cmp	r9, fp
   18048:	movhi	r3, #39	; 0x27
   1804c:	strbhi	r3, [r8, fp]
   18050:	add	r3, fp, #1
   18054:	cmp	r9, r3
   18058:	movhi	r2, #92	; 0x5c
   1805c:	strbhi	r2, [r8, r3]
   18060:	mov	r3, r9
   18064:	ldr	r9, [sp, #72]	; 0x48
   18068:	add	r2, fp, #2
   1806c:	cmp	r2, r3
   18070:	movcc	r1, #39	; 0x27
   18074:	strbcc	r1, [r8, r2]
   18078:	add	fp, fp, #3
   1807c:	str	r5, [sp, #68]	; 0x44
   18080:	ldr	r2, [sp, #32]
   18084:	str	r2, [sp, #36]	; 0x24
   18088:	str	r9, [sp, #72]	; 0x48
   1808c:	mov	r9, r3
   18090:	mov	r4, #39	; 0x27
   18094:	mov	r3, #0
   18098:	b	17b78 <__assert_fail@plt+0x68a8>
   1809c:	mov	r3, #0
   180a0:	str	r3, [sp, #44]	; 0x2c
   180a4:	ldr	r7, [sp, #76]	; 0x4c
   180a8:	cmp	r7, #1
   180ac:	bne	180e4 <__assert_fail@plt+0x6e14>
   180b0:	bl	11150 <__ctype_b_loc@plt>
   180b4:	ldr	r2, [r0]
   180b8:	lsl	r3, r4, #1
   180bc:	ldrh	r5, [r2, r3]
   180c0:	ubfx	r5, r5, #14, #1
   180c4:	mov	ip, r7
   180c8:	eor	r3, r5, #1
   180cc:	ldr	r2, [sp, #28]
   180d0:	and	r3, r3, r2
   180d4:	ands	r3, r3, #255	; 0xff
   180d8:	beq	17b2c <__assert_fail@plt+0x685c>
   180dc:	mov	r5, #0
   180e0:	b	18340 <__assert_fail@plt+0x7070>
   180e4:	mov	r2, #0
   180e8:	mov	r3, #0
   180ec:	strd	r2, [sp, #104]	; 0x68
   180f0:	ldr	r3, [sp, #24]
   180f4:	cmn	r3, #1
   180f8:	beq	1811c <__assert_fail@plt+0x6e4c>
   180fc:	mov	r3, #0
   18100:	str	r4, [sp, #88]	; 0x58
   18104:	str	fp, [sp, #92]	; 0x5c
   18108:	str	r8, [sp, #56]	; 0x38
   1810c:	mov	r8, r3
   18110:	str	r9, [sp, #84]	; 0x54
   18114:	ldr	r9, [sp, #48]	; 0x30
   18118:	b	18268 <__assert_fail@plt+0x6f98>
   1811c:	ldr	r0, [sp, #48]	; 0x30
   18120:	bl	11168 <strlen@plt>
   18124:	str	r0, [sp, #24]
   18128:	b	180fc <__assert_fail@plt+0x6e2c>
   1812c:	mov	r1, fp
   18130:	ldr	r4, [sp, #88]	; 0x58
   18134:	mov	r2, r8
   18138:	mov	ip, r8
   1813c:	ldr	fp, [sp, #92]	; 0x5c
   18140:	ldr	r8, [sp, #56]	; 0x38
   18144:	ldr	r9, [sp, #84]	; 0x54
   18148:	ldr	r0, [sp, #24]
   1814c:	cmp	r7, r0
   18150:	bcs	18308 <__assert_fail@plt+0x7038>
   18154:	ldrb	r3, [r1]
   18158:	cmp	r3, #0
   1815c:	beq	18310 <__assert_fail@plt+0x7040>
   18160:	mov	r3, r1
   18164:	add	r2, r2, #1
   18168:	add	r1, r6, r2
   1816c:	cmp	r0, r1
   18170:	bls	18318 <__assert_fail@plt+0x7048>
   18174:	ldrb	r1, [r3, #1]!
   18178:	cmp	r1, #0
   1817c:	bne	18164 <__assert_fail@plt+0x6e94>
   18180:	mov	ip, r2
   18184:	mov	r5, #0
   18188:	b	18338 <__assert_fail@plt+0x7068>
   1818c:	ldr	r3, [sp, #56]	; 0x38
   18190:	str	r3, [sp, #64]	; 0x40
   18194:	ldr	r8, [sp, #84]	; 0x54
   18198:	mov	r7, #2
   1819c:	b	186e0 <__assert_fail@plt+0x7410>
   181a0:	cmp	r2, r7
   181a4:	beq	18244 <__assert_fail@plt+0x6f74>
   181a8:	ldrb	r3, [r2], #1
   181ac:	sub	r3, r3, #91	; 0x5b
   181b0:	cmp	r3, #33	; 0x21
   181b4:	ldrls	pc, [pc, r3, lsl #2]
   181b8:	b	181a0 <__assert_fail@plt+0x6ed0>
   181bc:	andeq	r8, r1, ip, lsl #3
   181c0:	andeq	r8, r1, ip, lsl #3
   181c4:	andeq	r8, r1, r0, lsr #3
   181c8:	andeq	r8, r1, ip, lsl #3
   181cc:	andeq	r8, r1, r0, lsr #3
   181d0:	andeq	r8, r1, ip, lsl #3
   181d4:	andeq	r8, r1, r0, lsr #3
   181d8:	andeq	r8, r1, r0, lsr #3
   181dc:	andeq	r8, r1, r0, lsr #3
   181e0:	andeq	r8, r1, r0, lsr #3
   181e4:	andeq	r8, r1, r0, lsr #3
   181e8:	andeq	r8, r1, r0, lsr #3
   181ec:	andeq	r8, r1, r0, lsr #3
   181f0:	andeq	r8, r1, r0, lsr #3
   181f4:	andeq	r8, r1, r0, lsr #3
   181f8:	andeq	r8, r1, r0, lsr #3
   181fc:	andeq	r8, r1, r0, lsr #3
   18200:	andeq	r8, r1, r0, lsr #3
   18204:	andeq	r8, r1, r0, lsr #3
   18208:	andeq	r8, r1, r0, lsr #3
   1820c:	andeq	r8, r1, r0, lsr #3
   18210:	andeq	r8, r1, r0, lsr #3
   18214:	andeq	r8, r1, r0, lsr #3
   18218:	andeq	r8, r1, r0, lsr #3
   1821c:	andeq	r8, r1, r0, lsr #3
   18220:	andeq	r8, r1, r0, lsr #3
   18224:	andeq	r8, r1, r0, lsr #3
   18228:	andeq	r8, r1, r0, lsr #3
   1822c:	andeq	r8, r1, r0, lsr #3
   18230:	andeq	r8, r1, r0, lsr #3
   18234:	andeq	r8, r1, r0, lsr #3
   18238:	andeq	r8, r1, r0, lsr #3
   1823c:	andeq	r8, r1, r0, lsr #3
   18240:	andeq	r8, r1, ip, lsl #3
   18244:	ldr	r0, [sp, #100]	; 0x64
   18248:	bl	1109c <iswprint@plt>
   1824c:	cmp	r0, #0
   18250:	moveq	r5, #0
   18254:	add	r8, r8, r4
   18258:	add	r0, sp, #104	; 0x68
   1825c:	bl	1103c <mbsinit@plt>
   18260:	cmp	r0, #0
   18264:	bne	182d4 <__assert_fail@plt+0x7004>
   18268:	add	r7, r6, r8
   1826c:	add	fp, r9, r7
   18270:	add	r3, sp, #104	; 0x68
   18274:	ldr	r2, [sp, #24]
   18278:	sub	r2, r2, r7
   1827c:	mov	r1, fp
   18280:	add	r0, sp, #100	; 0x64
   18284:	bl	1a674 <__assert_fail@plt+0x93a4>
   18288:	subs	r4, r0, #0
   1828c:	beq	18324 <__assert_fail@plt+0x7054>
   18290:	cmn	r4, #1
   18294:	beq	182ec <__assert_fail@plt+0x701c>
   18298:	cmn	r4, #2
   1829c:	beq	1812c <__assert_fail@plt+0x6e5c>
   182a0:	ldr	r3, [sp, #32]
   182a4:	cmp	sl, #2
   182a8:	movne	r3, #0
   182ac:	andeq	r3, r3, #1
   182b0:	cmp	r3, #0
   182b4:	beq	18244 <__assert_fail@plt+0x6f74>
   182b8:	cmp	r4, #1
   182bc:	bls	18244 <__assert_fail@plt+0x6f74>
   182c0:	add	r2, r7, #1
   182c4:	add	r2, r9, r2
   182c8:	add	r3, r9, r4
   182cc:	add	r7, r3, r7
   182d0:	b	181a8 <__assert_fail@plt+0x6ed8>
   182d4:	ldr	r4, [sp, #88]	; 0x58
   182d8:	mov	ip, r8
   182dc:	ldr	fp, [sp, #92]	; 0x5c
   182e0:	ldr	r8, [sp, #56]	; 0x38
   182e4:	ldr	r9, [sp, #84]	; 0x54
   182e8:	b	18338 <__assert_fail@plt+0x7068>
   182ec:	ldr	r4, [sp, #88]	; 0x58
   182f0:	mov	ip, r8
   182f4:	ldr	fp, [sp, #92]	; 0x5c
   182f8:	ldr	r8, [sp, #56]	; 0x38
   182fc:	ldr	r9, [sp, #84]	; 0x54
   18300:	mov	r5, #0
   18304:	b	18338 <__assert_fail@plt+0x7068>
   18308:	mov	r5, #0
   1830c:	b	18338 <__assert_fail@plt+0x7068>
   18310:	mov	r5, #0
   18314:	b	18338 <__assert_fail@plt+0x7068>
   18318:	mov	ip, r2
   1831c:	mov	r5, #0
   18320:	b	18338 <__assert_fail@plt+0x7068>
   18324:	ldr	r4, [sp, #88]	; 0x58
   18328:	mov	ip, r8
   1832c:	ldr	fp, [sp, #92]	; 0x5c
   18330:	ldr	r8, [sp, #56]	; 0x38
   18334:	ldr	r9, [sp, #84]	; 0x54
   18338:	cmp	ip, #1
   1833c:	bls	180c8 <__assert_fail@plt+0x6df8>
   18340:	add	lr, r6, ip
   18344:	ldr	r3, [sp, #48]	; 0x30
   18348:	add	r1, r3, r6
   1834c:	mov	r3, #0
   18350:	eor	r0, r5, #1
   18354:	ldr	r2, [sp, #28]
   18358:	and	r0, r0, r2
   1835c:	uxtb	r0, r0
   18360:	str	r0, [sp, #56]	; 0x38
   18364:	mov	r7, #92	; 0x5c
   18368:	ldr	ip, [sp, #36]	; 0x24
   1836c:	str	r5, [sp, #84]	; 0x54
   18370:	ldr	r2, [sp, #44]	; 0x2c
   18374:	b	183e4 <__assert_fail@plt+0x7114>
   18378:	cmp	r2, #0
   1837c:	beq	1838c <__assert_fail@plt+0x70bc>
   18380:	cmp	r9, fp
   18384:	strbhi	r7, [r8, fp]
   18388:	add	fp, fp, #1
   1838c:	add	r5, r6, #1
   18390:	cmp	r5, lr
   18394:	bcs	184a0 <__assert_fail@plt+0x71d0>
   18398:	eor	r2, r3, #1
   1839c:	and	r2, r2, ip
   183a0:	ands	r2, r2, #255	; 0xff
   183a4:	beq	184bc <__assert_fail@plt+0x71ec>
   183a8:	cmp	r9, fp
   183ac:	movhi	r2, #39	; 0x27
   183b0:	strbhi	r2, [r8, fp]
   183b4:	add	r2, fp, #1
   183b8:	cmp	r9, r2
   183bc:	movhi	ip, #39	; 0x27
   183c0:	strbhi	ip, [r8, r2]
   183c4:	add	fp, fp, #2
   183c8:	ldr	ip, [sp, #56]	; 0x38
   183cc:	mov	r2, ip
   183d0:	mov	r6, r5
   183d4:	cmp	r9, fp
   183d8:	strbhi	r4, [r8, fp]
   183dc:	add	fp, fp, #1
   183e0:	ldrb	r4, [r1, #1]!
   183e4:	cmp	r0, #0
   183e8:	beq	18378 <__assert_fail@plt+0x70a8>
   183ec:	ldr	r3, [sp, #32]
   183f0:	cmp	r3, #0
   183f4:	bne	18688 <__assert_fail@plt+0x73b8>
   183f8:	eor	r3, ip, #1
   183fc:	cmp	sl, #2
   18400:	movne	r3, #0
   18404:	andeq	r3, r3, #1
   18408:	cmp	r3, #0
   1840c:	beq	18444 <__assert_fail@plt+0x7174>
   18410:	cmp	r9, fp
   18414:	movhi	ip, #39	; 0x27
   18418:	strbhi	ip, [r8, fp]
   1841c:	add	ip, fp, #1
   18420:	cmp	r9, ip
   18424:	movhi	r5, #36	; 0x24
   18428:	strbhi	r5, [r8, ip]
   1842c:	add	ip, fp, #2
   18430:	cmp	r9, ip
   18434:	movhi	r5, #39	; 0x27
   18438:	strbhi	r5, [r8, ip]
   1843c:	add	fp, fp, #3
   18440:	mov	ip, r3
   18444:	cmp	r9, fp
   18448:	strbhi	r7, [r8, fp]
   1844c:	add	r3, fp, #1
   18450:	cmp	r9, r3
   18454:	bls	18464 <__assert_fail@plt+0x7194>
   18458:	lsr	r5, r4, #6
   1845c:	add	r5, r5, #48	; 0x30
   18460:	strb	r5, [r8, r3]
   18464:	add	r3, fp, #2
   18468:	cmp	r9, r3
   1846c:	bls	1847c <__assert_fail@plt+0x71ac>
   18470:	ubfx	r5, r4, #3, #3
   18474:	add	r5, r5, #48	; 0x30
   18478:	strb	r5, [r8, r3]
   1847c:	add	fp, fp, #3
   18480:	and	r4, r4, #7
   18484:	add	r4, r4, #48	; 0x30
   18488:	add	r5, r6, #1
   1848c:	cmp	r5, lr
   18490:	bcs	184ac <__assert_fail@plt+0x71dc>
   18494:	ldr	r3, [sp, #56]	; 0x38
   18498:	mov	r6, r5
   1849c:	b	183d4 <__assert_fail@plt+0x7104>
   184a0:	str	ip, [sp, #36]	; 0x24
   184a4:	ldr	r5, [sp, #84]	; 0x54
   184a8:	b	17ed8 <__assert_fail@plt+0x6c08>
   184ac:	str	ip, [sp, #36]	; 0x24
   184b0:	ldr	r5, [sp, #84]	; 0x54
   184b4:	mov	r3, r0
   184b8:	b	17ed8 <__assert_fail@plt+0x6c08>
   184bc:	mov	r6, r5
   184c0:	b	183d4 <__assert_fail@plt+0x7104>
   184c4:	ldr	r3, [sp, #44]	; 0x2c
   184c8:	b	17b2c <__assert_fail@plt+0x685c>
   184cc:	mov	r5, #0
   184d0:	mov	r3, r5
   184d4:	mov	r4, #63	; 0x3f
   184d8:	b	17b2c <__assert_fail@plt+0x685c>
   184dc:	mov	r5, #0
   184e0:	mov	r3, r5
   184e4:	mov	r4, #63	; 0x3f
   184e8:	b	17b2c <__assert_fail@plt+0x685c>
   184ec:	mov	r5, #0
   184f0:	mov	r3, r5
   184f4:	b	17b2c <__assert_fail@plt+0x685c>
   184f8:	mov	r5, #0
   184fc:	mov	r3, r5
   18500:	b	17b2c <__assert_fail@plt+0x685c>
   18504:	ldr	r5, [sp, #44]	; 0x2c
   18508:	ldr	r3, [sp, #32]
   1850c:	b	17b2c <__assert_fail@plt+0x685c>
   18510:	ldr	r5, [sp, #44]	; 0x2c
   18514:	mov	r3, #0
   18518:	str	r3, [sp, #44]	; 0x2c
   1851c:	b	17b2c <__assert_fail@plt+0x685c>
   18520:	mov	r4, r3
   18524:	mov	r5, #0
   18528:	b	17b84 <__assert_fail@plt+0x68b4>
   1852c:	mov	r5, #0
   18530:	mov	r4, #97	; 0x61
   18534:	b	17b84 <__assert_fail@plt+0x68b4>
   18538:	mov	r5, #0
   1853c:	mov	r3, r5
   18540:	mov	r4, #92	; 0x5c
   18544:	b	17ed8 <__assert_fail@plt+0x6c08>
   18548:	ldr	r3, [sp, #48]	; 0x30
   1854c:	ldrb	r5, [r3, r6]
   18550:	adds	r5, r5, #0
   18554:	movne	r5, #1
   18558:	b	17c28 <__assert_fail@plt+0x6958>
   1855c:	cmp	sl, #2
   18560:	movne	r3, #0
   18564:	moveq	r3, #1
   18568:	ldr	r1, [sp, #32]
   1856c:	cmp	fp, #0
   18570:	andeq	r2, r3, r1
   18574:	movne	r2, #0
   18578:	cmp	r2, #0
   1857c:	bne	1869c <__assert_fail@plt+0x73cc>
   18580:	eor	r2, r1, #1
   18584:	uxtb	r2, r2
   18588:	and	r3, r3, r2
   1858c:	ldr	r1, [sp, #68]	; 0x44
   18590:	ands	r3, r1, r3
   18594:	beq	18628 <__assert_fail@plt+0x7358>
   18598:	ldr	r2, [sp, #40]	; 0x28
   1859c:	cmp	r2, #0
   185a0:	bne	185d8 <__assert_fail@plt+0x7308>
   185a4:	ldr	r2, [sp, #72]	; 0x48
   185a8:	adds	r2, r2, #0
   185ac:	movne	r2, #1
   185b0:	cmp	r9, #0
   185b4:	movne	r2, #0
   185b8:	str	r2, [sp, #68]	; 0x44
   185bc:	mov	sl, #2
   185c0:	ldr	r1, [sp, #40]	; 0x28
   185c4:	str	r1, [sp, #32]
   185c8:	cmp	r2, #0
   185cc:	beq	1861c <__assert_fail@plt+0x734c>
   185d0:	ldr	r9, [sp, #72]	; 0x48
   185d4:	b	17330 <__assert_fail@plt+0x6060>
   185d8:	ldr	r3, [sp, #168]	; 0xa8
   185dc:	str	r3, [sp, #16]
   185e0:	ldr	r3, [sp, #164]	; 0xa4
   185e4:	str	r3, [sp, #12]
   185e8:	ldr	r3, [sp, #160]	; 0xa0
   185ec:	str	r3, [sp, #8]
   185f0:	ldr	r3, [sp, #156]	; 0x9c
   185f4:	str	r3, [sp, #4]
   185f8:	mov	r3, #5
   185fc:	str	r3, [sp]
   18600:	ldr	r3, [sp, #24]
   18604:	ldr	r2, [sp, #48]	; 0x30
   18608:	ldr	r1, [sp, #72]	; 0x48
   1860c:	ldr	r0, [sp, #64]	; 0x40
   18610:	bl	172b8 <__assert_fail@plt+0x5fe8>
   18614:	mov	fp, r0
   18618:	b	18738 <__assert_fail@plt+0x7468>
   1861c:	mov	r8, r9
   18620:	mov	r2, r3
   18624:	b	1862c <__assert_fail@plt+0x735c>
   18628:	mov	r8, r9
   1862c:	ldr	r3, [sp, #60]	; 0x3c
   18630:	cmp	r3, #0
   18634:	moveq	r2, #0
   18638:	andne	r2, r2, #1
   1863c:	cmp	r2, #0
   18640:	beq	18670 <__assert_fail@plt+0x73a0>
   18644:	mov	r2, r3
   18648:	ldrb	r3, [r3]
   1864c:	cmp	r3, #0
   18650:	beq	18670 <__assert_fail@plt+0x73a0>
   18654:	ldr	r1, [sp, #64]	; 0x40
   18658:	cmp	r8, fp
   1865c:	strbhi	r3, [r1, fp]
   18660:	add	fp, fp, #1
   18664:	ldrb	r3, [r2, #1]!
   18668:	cmp	r3, #0
   1866c:	bne	18658 <__assert_fail@plt+0x7388>
   18670:	cmp	r8, fp
   18674:	bls	18738 <__assert_fail@plt+0x7468>
   18678:	mov	r3, #0
   1867c:	ldr	r2, [sp, #64]	; 0x40
   18680:	strb	r3, [r2, fp]
   18684:	b	18738 <__assert_fail@plt+0x7468>
   18688:	mov	r8, r9
   1868c:	mov	r7, sl
   18690:	ldr	r3, [sp, #32]
   18694:	str	r3, [sp, #28]
   18698:	b	186e0 <__assert_fail@plt+0x7410>
   1869c:	mov	r8, r9
   186a0:	mov	r7, #2
   186a4:	b	186e0 <__assert_fail@plt+0x7410>
   186a8:	mov	r8, r9
   186ac:	mov	r7, sl
   186b0:	b	186e0 <__assert_fail@plt+0x7410>
   186b4:	mov	r8, r9
   186b8:	mov	r7, sl
   186bc:	b	186e0 <__assert_fail@plt+0x7410>
   186c0:	mov	r8, r9
   186c4:	mov	r7, sl
   186c8:	b	186e0 <__assert_fail@plt+0x7410>
   186cc:	mov	r8, r9
   186d0:	mov	r7, sl
   186d4:	b	186e0 <__assert_fail@plt+0x7410>
   186d8:	mov	r8, r9
   186dc:	mov	r7, sl
   186e0:	ldr	r3, [sp, #28]
   186e4:	cmp	r7, #2
   186e8:	movne	r3, #0
   186ec:	andeq	r3, r3, #1
   186f0:	cmp	r3, #0
   186f4:	movne	r7, #4
   186f8:	ldr	r3, [sp, #168]	; 0xa8
   186fc:	str	r3, [sp, #16]
   18700:	ldr	r3, [sp, #164]	; 0xa4
   18704:	str	r3, [sp, #12]
   18708:	mov	r3, #0
   1870c:	str	r3, [sp, #8]
   18710:	ldr	r3, [sp, #156]	; 0x9c
   18714:	bic	r3, r3, #2
   18718:	str	r3, [sp, #4]
   1871c:	str	r7, [sp]
   18720:	ldr	r3, [sp, #24]
   18724:	ldr	r2, [sp, #48]	; 0x30
   18728:	mov	r1, r8
   1872c:	ldr	r0, [sp, #64]	; 0x40
   18730:	bl	172b8 <__assert_fail@plt+0x5fe8>
   18734:	mov	fp, r0
   18738:	mov	r0, fp
   1873c:	add	sp, sp, #116	; 0x74
   18740:	ldrd	r4, [sp]
   18744:	ldrd	r6, [sp, #8]
   18748:	ldrd	r8, [sp, #16]
   1874c:	ldrd	sl, [sp, #24]
   18750:	add	sp, sp, #32
   18754:	pop	{pc}		; (ldr pc, [sp], #4)
   18758:	mov	r8, r9
   1875c:	mov	r7, sl
   18760:	b	186f8 <__assert_fail@plt+0x7428>
   18764:	add	fp, fp, #4
   18768:	str	r3, [sp, #36]	; 0x24
   1876c:	mov	r5, #0
   18770:	mov	r4, #48	; 0x30
   18774:	b	17b2c <__assert_fail@plt+0x685c>
   18778:	mov	r3, #1
   1877c:	str	r3, [sp, #32]
   18780:	str	r3, [sp, #28]
   18784:	str	r3, [sp, #52]	; 0x34
   18788:	movw	r3, #48292	; 0xbca4
   1878c:	movt	r3, #1
   18790:	str	r3, [sp, #60]	; 0x3c
   18794:	mov	fp, #0
   18798:	mov	sl, #5
   1879c:	b	17390 <__assert_fail@plt+0x60c0>
   187a0:	ldr	r3, [sp, #48]	; 0x30
   187a4:	ldrb	r4, [r3, r6]
   187a8:	cmp	r4, #126	; 0x7e
   187ac:	ldrls	pc, [pc, r4, lsl #2]
   187b0:	b	1809c <__assert_fail@plt+0x6dcc>
   187b4:	andeq	r7, r1, r4, lsr #16
   187b8:	muleq	r1, ip, r0
   187bc:	muleq	r1, ip, r0
   187c0:	muleq	r1, ip, r0
   187c4:	muleq	r1, ip, r0
   187c8:	muleq	r1, ip, r0
   187cc:	muleq	r1, ip, r0
   187d0:	andeq	r8, r1, ip, lsr #10
   187d4:	andeq	r7, r1, r8, asr #21
   187d8:	andeq	r7, r1, ip, ror #28
   187dc:	andeq	r7, r1, r8, lsr #30
   187e0:	andeq	r7, r1, r0, lsl #29
   187e4:	ldrdeq	r7, [r1], -ip
   187e8:	strdeq	r7, [r1], -r0
   187ec:	muleq	r1, ip, r0
   187f0:	muleq	r1, ip, r0
   187f4:	muleq	r1, ip, r0
   187f8:	muleq	r1, ip, r0
   187fc:	muleq	r1, ip, r0
   18800:	muleq	r1, ip, r0
   18804:	muleq	r1, ip, r0
   18808:	muleq	r1, ip, r0
   1880c:	muleq	r1, ip, r0
   18810:	muleq	r1, ip, r0
   18814:	muleq	r1, ip, r0
   18818:	muleq	r1, ip, r0
   1881c:	muleq	r1, ip, r0
   18820:	muleq	r1, ip, r0
   18824:	muleq	r1, ip, r0
   18828:	muleq	r1, ip, r0
   1882c:	muleq	r1, ip, r0
   18830:	muleq	r1, ip, r0
   18834:			; <UNDEFINED> instruction: 0x00017fb0
   18838:	andeq	r7, r1, ip, ror #31
   1883c:	andeq	r7, r1, ip, ror #31
   18840:	andeq	r7, r1, r4, lsr #31
   18844:	andeq	r7, r1, ip, ror #31
   18848:	andeq	r8, r1, r0, lsl r5
   1884c:	andeq	r7, r1, ip, ror #31
   18850:	strdeq	r7, [r1], -ip
   18854:	andeq	r7, r1, ip, ror #31
   18858:	andeq	r7, r1, ip, ror #31
   1885c:	andeq	r7, r1, ip, ror #31
   18860:	andeq	r8, r1, r0, lsl r5
   18864:	andeq	r8, r1, r0, lsl r5
   18868:	andeq	r8, r1, r0, lsl r5
   1886c:	andeq	r8, r1, r0, lsl r5
   18870:	andeq	r8, r1, r0, lsl r5
   18874:	andeq	r8, r1, r0, lsl r5
   18878:	andeq	r8, r1, r0, lsl r5
   1887c:	andeq	r8, r1, r0, lsl r5
   18880:	andeq	r8, r1, r0, lsl r5
   18884:	andeq	r8, r1, r0, lsl r5
   18888:	andeq	r8, r1, r0, lsl r5
   1888c:	andeq	r8, r1, r0, lsl r5
   18890:	andeq	r8, r1, r0, lsl r5
   18894:	andeq	r8, r1, r0, lsl r5
   18898:	andeq	r8, r1, r0, lsl r5
   1889c:	andeq	r8, r1, r0, lsl r5
   188a0:	andeq	r7, r1, ip, ror #31
   188a4:	andeq	r7, r1, ip, ror #31
   188a8:	andeq	r7, r1, ip, ror #31
   188ac:	andeq	r7, r1, ip, ror #31
   188b0:	andeq	r7, r1, ip, asr r9
   188b4:	muleq	r1, ip, r0
   188b8:	andeq	r8, r1, r0, lsl r5
   188bc:	andeq	r8, r1, r0, lsl r5
   188c0:	andeq	r8, r1, r0, lsl r5
   188c4:	andeq	r8, r1, r0, lsl r5
   188c8:	andeq	r8, r1, r0, lsl r5
   188cc:	andeq	r8, r1, r0, lsl r5
   188d0:	andeq	r8, r1, r0, lsl r5
   188d4:	andeq	r8, r1, r0, lsl r5
   188d8:	andeq	r8, r1, r0, lsl r5
   188dc:	andeq	r8, r1, r0, lsl r5
   188e0:	andeq	r8, r1, r0, lsl r5
   188e4:	andeq	r8, r1, r0, lsl r5
   188e8:	andeq	r8, r1, r0, lsl r5
   188ec:	andeq	r8, r1, r0, lsl r5
   188f0:	andeq	r8, r1, r0, lsl r5
   188f4:	andeq	r8, r1, r0, lsl r5
   188f8:	andeq	r8, r1, r0, lsl r5
   188fc:	andeq	r8, r1, r0, lsl r5
   18900:	andeq	r8, r1, r0, lsl r5
   18904:	andeq	r8, r1, r0, lsl r5
   18908:	andeq	r8, r1, r0, lsl r5
   1890c:	andeq	r8, r1, r0, lsl r5
   18910:	andeq	r8, r1, r0, lsl r5
   18914:	andeq	r8, r1, r0, lsl r5
   18918:	andeq	r8, r1, r0, lsl r5
   1891c:	andeq	r8, r1, r0, lsl r5
   18920:	andeq	r7, r1, ip, ror #31
   18924:	muleq	r1, r4, lr
   18928:	andeq	r8, r1, r0, lsl r5
   1892c:	andeq	r7, r1, ip, ror #31
   18930:	andeq	r8, r1, r0, lsl r5
   18934:	andeq	r7, r1, ip, ror #31
   18938:	andeq	r8, r1, r0, lsl r5
   1893c:	andeq	r8, r1, r0, lsl r5
   18940:	andeq	r8, r1, r0, lsl r5
   18944:	andeq	r8, r1, r0, lsl r5
   18948:	andeq	r8, r1, r0, lsl r5
   1894c:	andeq	r8, r1, r0, lsl r5
   18950:	andeq	r8, r1, r0, lsl r5
   18954:	andeq	r8, r1, r0, lsl r5
   18958:	andeq	r8, r1, r0, lsl r5
   1895c:	andeq	r8, r1, r0, lsl r5
   18960:	andeq	r8, r1, r0, lsl r5
   18964:	andeq	r8, r1, r0, lsl r5
   18968:	andeq	r8, r1, r0, lsl r5
   1896c:	andeq	r8, r1, r0, lsl r5
   18970:	andeq	r8, r1, r0, lsl r5
   18974:	andeq	r8, r1, r0, lsl r5
   18978:	andeq	r8, r1, r0, lsl r5
   1897c:	andeq	r8, r1, r0, lsl r5
   18980:	andeq	r8, r1, r0, lsl r5
   18984:	andeq	r8, r1, r0, lsl r5
   18988:	andeq	r8, r1, r0, lsl r5
   1898c:	andeq	r8, r1, r0, lsl r5
   18990:	andeq	r8, r1, r0, lsl r5
   18994:	andeq	r8, r1, r0, lsl r5
   18998:	andeq	r8, r1, r0, lsl r5
   1899c:	andeq	r8, r1, r0, lsl r5
   189a0:	andeq	r7, r1, r4, asr pc
   189a4:	andeq	r7, r1, ip, ror #31
   189a8:	andeq	r7, r1, r4, asr pc
   189ac:	andeq	r7, r1, r4, lsr #31
   189b0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   189b4:	strd	r6, [sp, #8]
   189b8:	strd	r8, [sp, #16]
   189bc:	strd	sl, [sp, #24]
   189c0:	str	lr, [sp, #32]
   189c4:	sub	sp, sp, #52	; 0x34
   189c8:	mov	r5, r0
   189cc:	str	r1, [sp, #24]
   189d0:	str	r2, [sp, #28]
   189d4:	mov	r4, r3
   189d8:	bl	11180 <__errno_location@plt>
   189dc:	str	r0, [sp, #32]
   189e0:	ldr	r3, [r0]
   189e4:	str	r3, [sp, #36]	; 0x24
   189e8:	movw	r3, #53560	; 0xd138
   189ec:	movt	r3, #2
   189f0:	ldr	r6, [r3]
   189f4:	cmn	r5, #-2147483647	; 0x80000001
   189f8:	movne	r3, #0
   189fc:	moveq	r3, #1
   18a00:	orrs	r3, r3, r5, lsr #31
   18a04:	bne	18b68 <__assert_fail@plt+0x7898>
   18a08:	movw	r3, #53560	; 0xd138
   18a0c:	movt	r3, #2
   18a10:	ldr	r2, [r3, #4]
   18a14:	cmp	r2, r5
   18a18:	bgt	18a88 <__assert_fail@plt+0x77b8>
   18a1c:	str	r2, [sp, #44]	; 0x2c
   18a20:	add	r3, r3, #8
   18a24:	cmp	r6, r3
   18a28:	beq	18b6c <__assert_fail@plt+0x789c>
   18a2c:	sub	r2, r5, r2
   18a30:	mov	r3, #8
   18a34:	str	r3, [sp]
   18a38:	mvn	r3, #-2147483648	; 0x80000000
   18a3c:	add	r2, r2, #1
   18a40:	add	r1, sp, #44	; 0x2c
   18a44:	mov	r0, r6
   18a48:	bl	19c84 <__assert_fail@plt+0x89b4>
   18a4c:	mov	r6, r0
   18a50:	movw	r3, #53560	; 0xd138
   18a54:	movt	r3, #2
   18a58:	str	r0, [r3]
   18a5c:	movw	r7, #53560	; 0xd138
   18a60:	movt	r7, #2
   18a64:	ldr	r0, [r7, #4]
   18a68:	ldr	r2, [sp, #44]	; 0x2c
   18a6c:	sub	r2, r2, r0
   18a70:	lsl	r2, r2, #3
   18a74:	mov	r1, #0
   18a78:	add	r0, r6, r0, lsl #3
   18a7c:	bl	11198 <memset@plt>
   18a80:	ldr	r3, [sp, #44]	; 0x2c
   18a84:	str	r3, [r7, #4]
   18a88:	add	fp, r6, r5, lsl #3
   18a8c:	ldr	r8, [r6, r5, lsl #3]
   18a90:	ldr	r7, [fp, #4]
   18a94:	ldr	r3, [r4, #4]
   18a98:	orr	r9, r3, #1
   18a9c:	add	sl, r4, #8
   18aa0:	ldr	r3, [r4, #44]	; 0x2c
   18aa4:	str	r3, [sp, #16]
   18aa8:	ldr	r3, [r4, #40]	; 0x28
   18aac:	str	r3, [sp, #12]
   18ab0:	str	sl, [sp, #8]
   18ab4:	str	r9, [sp, #4]
   18ab8:	ldr	r3, [r4]
   18abc:	str	r3, [sp]
   18ac0:	ldr	r3, [sp, #28]
   18ac4:	ldr	r2, [sp, #24]
   18ac8:	mov	r1, r8
   18acc:	mov	r0, r7
   18ad0:	bl	172b8 <__assert_fail@plt+0x5fe8>
   18ad4:	cmp	r8, r0
   18ad8:	bhi	18b3c <__assert_fail@plt+0x786c>
   18adc:	add	r8, r0, #1
   18ae0:	str	r8, [r6, r5, lsl #3]
   18ae4:	movw	r3, #53696	; 0xd1c0
   18ae8:	movt	r3, #2
   18aec:	cmp	r7, r3
   18af0:	beq	18afc <__assert_fail@plt+0x782c>
   18af4:	mov	r0, r7
   18af8:	bl	13924 <__assert_fail@plt+0x2654>
   18afc:	mov	r0, r8
   18b00:	bl	19a80 <__assert_fail@plt+0x87b0>
   18b04:	mov	r7, r0
   18b08:	str	r0, [fp, #4]
   18b0c:	ldr	r3, [r4, #44]	; 0x2c
   18b10:	str	r3, [sp, #16]
   18b14:	ldr	r3, [r4, #40]	; 0x28
   18b18:	str	r3, [sp, #12]
   18b1c:	str	sl, [sp, #8]
   18b20:	str	r9, [sp, #4]
   18b24:	ldr	r3, [r4]
   18b28:	str	r3, [sp]
   18b2c:	ldr	r3, [sp, #28]
   18b30:	ldr	r2, [sp, #24]
   18b34:	mov	r1, r8
   18b38:	bl	172b8 <__assert_fail@plt+0x5fe8>
   18b3c:	ldr	r3, [sp, #32]
   18b40:	ldr	r2, [sp, #36]	; 0x24
   18b44:	str	r2, [r3]
   18b48:	mov	r0, r7
   18b4c:	add	sp, sp, #52	; 0x34
   18b50:	ldrd	r4, [sp]
   18b54:	ldrd	r6, [sp, #8]
   18b58:	ldrd	r8, [sp, #16]
   18b5c:	ldrd	sl, [sp, #24]
   18b60:	add	sp, sp, #32
   18b64:	pop	{pc}		; (ldr pc, [sp], #4)
   18b68:	bl	11294 <abort@plt>
   18b6c:	sub	r2, r5, r2
   18b70:	mov	r3, #8
   18b74:	str	r3, [sp]
   18b78:	mvn	r3, #-2147483648	; 0x80000000
   18b7c:	add	r2, r2, #1
   18b80:	add	r1, sp, #44	; 0x2c
   18b84:	mov	r0, #0
   18b88:	bl	19c84 <__assert_fail@plt+0x89b4>
   18b8c:	mov	r6, r0
   18b90:	movw	r3, #53560	; 0xd138
   18b94:	movt	r3, #2
   18b98:	str	r0, [r3]
   18b9c:	ldrd	r2, [r3, #8]
   18ba0:	strd	r2, [r0]
   18ba4:	b	18a5c <__assert_fail@plt+0x778c>
   18ba8:	strd	r4, [sp, #-16]!
   18bac:	str	r6, [sp, #8]
   18bb0:	str	lr, [sp, #12]
   18bb4:	mov	r4, r0
   18bb8:	bl	11180 <__errno_location@plt>
   18bbc:	mov	r5, r0
   18bc0:	ldr	r6, [r0]
   18bc4:	cmp	r4, #0
   18bc8:	ldr	r3, [pc, #32]	; 18bf0 <__assert_fail@plt+0x7920>
   18bcc:	moveq	r4, r3
   18bd0:	mov	r1, #48	; 0x30
   18bd4:	mov	r0, r4
   18bd8:	bl	19df4 <__assert_fail@plt+0x8b24>
   18bdc:	str	r6, [r5]
   18be0:	ldrd	r4, [sp]
   18be4:	ldr	r6, [sp, #8]
   18be8:	add	sp, sp, #12
   18bec:	pop	{pc}		; (ldr pc, [sp], #4)
   18bf0:	andeq	sp, r2, r0, asr #5
   18bf4:	subs	r3, r0, #0
   18bf8:	ldr	r2, [pc, #8]	; 18c08 <__assert_fail@plt+0x7938>
   18bfc:	moveq	r3, r2
   18c00:	ldr	r0, [r3]
   18c04:	bx	lr
   18c08:	andeq	sp, r2, r0, asr #5
   18c0c:	subs	r3, r0, #0
   18c10:	ldr	r2, [pc, #8]	; 18c20 <__assert_fail@plt+0x7950>
   18c14:	moveq	r3, r2
   18c18:	str	r1, [r3]
   18c1c:	bx	lr
   18c20:	andeq	sp, r2, r0, asr #5
   18c24:	push	{lr}		; (str lr, [sp, #-4]!)
   18c28:	subs	r3, r0, #0
   18c2c:	ldr	r0, [pc, #44]	; 18c60 <__assert_fail@plt+0x7990>
   18c30:	moveq	r3, r0
   18c34:	add	r3, r3, #8
   18c38:	lsr	lr, r1, #5
   18c3c:	and	r1, r1, #31
   18c40:	ldr	ip, [r3, lr, lsl #2]
   18c44:	lsr	r0, ip, r1
   18c48:	eor	r2, r2, r0
   18c4c:	and	r2, r2, #1
   18c50:	eor	r1, ip, r2, lsl r1
   18c54:	str	r1, [r3, lr, lsl #2]
   18c58:	and	r0, r0, #1
   18c5c:	pop	{pc}		; (ldr pc, [sp], #4)
   18c60:	andeq	sp, r2, r0, asr #5
   18c64:	subs	r3, r0, #0
   18c68:	ldr	r2, [pc, #12]	; 18c7c <__assert_fail@plt+0x79ac>
   18c6c:	moveq	r3, r2
   18c70:	ldr	r0, [r3, #4]
   18c74:	str	r1, [r3, #4]
   18c78:	bx	lr
   18c7c:	andeq	sp, r2, r0, asr #5
   18c80:	subs	r3, r0, #0
   18c84:	ldr	r0, [pc, #44]	; 18cb8 <__assert_fail@plt+0x79e8>
   18c88:	moveq	r3, r0
   18c8c:	mov	r0, #10
   18c90:	str	r0, [r3]
   18c94:	cmp	r2, #0
   18c98:	cmpne	r1, #0
   18c9c:	beq	18cac <__assert_fail@plt+0x79dc>
   18ca0:	str	r1, [r3, #40]	; 0x28
   18ca4:	str	r2, [r3, #44]	; 0x2c
   18ca8:	bx	lr
   18cac:	str	r4, [sp, #-8]!
   18cb0:	str	lr, [sp, #4]
   18cb4:	bl	11294 <abort@plt>
   18cb8:	andeq	sp, r2, r0, asr #5
   18cbc:	strd	r4, [sp, #-32]!	; 0xffffffe0
   18cc0:	strd	r6, [sp, #8]
   18cc4:	strd	r8, [sp, #16]
   18cc8:	str	sl, [sp, #24]
   18ccc:	str	lr, [sp, #28]
   18cd0:	sub	sp, sp, #24
   18cd4:	mov	r7, r0
   18cd8:	mov	r8, r1
   18cdc:	mov	r9, r2
   18ce0:	mov	sl, r3
   18ce4:	ldr	r4, [sp, #56]	; 0x38
   18ce8:	cmp	r4, #0
   18cec:	ldr	r3, [pc, #104]	; 18d5c <__assert_fail@plt+0x7a8c>
   18cf0:	moveq	r4, r3
   18cf4:	bl	11180 <__errno_location@plt>
   18cf8:	mov	r5, r0
   18cfc:	ldr	r6, [r0]
   18d00:	ldr	r3, [r4, #44]	; 0x2c
   18d04:	str	r3, [sp, #16]
   18d08:	ldr	r3, [r4, #40]	; 0x28
   18d0c:	str	r3, [sp, #12]
   18d10:	add	r3, r4, #8
   18d14:	str	r3, [sp, #8]
   18d18:	ldr	r3, [r4, #4]
   18d1c:	str	r3, [sp, #4]
   18d20:	ldr	r3, [r4]
   18d24:	str	r3, [sp]
   18d28:	mov	r3, sl
   18d2c:	mov	r2, r9
   18d30:	mov	r1, r8
   18d34:	mov	r0, r7
   18d38:	bl	172b8 <__assert_fail@plt+0x5fe8>
   18d3c:	str	r6, [r5]
   18d40:	add	sp, sp, #24
   18d44:	ldrd	r4, [sp]
   18d48:	ldrd	r6, [sp, #8]
   18d4c:	ldrd	r8, [sp, #16]
   18d50:	ldr	sl, [sp, #24]
   18d54:	add	sp, sp, #28
   18d58:	pop	{pc}		; (ldr pc, [sp], #4)
   18d5c:	andeq	sp, r2, r0, asr #5
   18d60:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18d64:	strd	r6, [sp, #8]
   18d68:	strd	r8, [sp, #16]
   18d6c:	strd	sl, [sp, #24]
   18d70:	str	lr, [sp, #32]
   18d74:	sub	sp, sp, #44	; 0x2c
   18d78:	mov	r8, r0
   18d7c:	mov	sl, r1
   18d80:	mov	r6, r2
   18d84:	subs	r4, r3, #0
   18d88:	ldr	r3, [pc, #200]	; 18e58 <__assert_fail@plt+0x7b88>
   18d8c:	moveq	r4, r3
   18d90:	bl	11180 <__errno_location@plt>
   18d94:	mov	r7, r0
   18d98:	ldr	fp, [r0]
   18d9c:	ldr	r5, [r4, #4]
   18da0:	cmp	r6, #0
   18da4:	orreq	r5, r5, #1
   18da8:	add	r9, r4, #8
   18dac:	ldr	r3, [r4, #44]	; 0x2c
   18db0:	str	r3, [sp, #16]
   18db4:	ldr	r3, [r4, #40]	; 0x28
   18db8:	str	r3, [sp, #12]
   18dbc:	str	r9, [sp, #8]
   18dc0:	str	r5, [sp, #4]
   18dc4:	ldr	r3, [r4]
   18dc8:	str	r3, [sp]
   18dcc:	str	sl, [sp, #36]	; 0x24
   18dd0:	mov	r3, sl
   18dd4:	str	r8, [sp, #32]
   18dd8:	mov	r2, r8
   18ddc:	mov	r1, #0
   18de0:	mov	r0, r1
   18de4:	bl	172b8 <__assert_fail@plt+0x5fe8>
   18de8:	mov	sl, r0
   18dec:	add	r8, r0, #1
   18df0:	mov	r0, r8
   18df4:	bl	19a80 <__assert_fail@plt+0x87b0>
   18df8:	str	r0, [sp, #28]
   18dfc:	ldr	r3, [r4, #44]	; 0x2c
   18e00:	str	r3, [sp, #16]
   18e04:	ldr	r3, [r4, #40]	; 0x28
   18e08:	str	r3, [sp, #12]
   18e0c:	str	r9, [sp, #8]
   18e10:	str	r5, [sp, #4]
   18e14:	ldr	r3, [r4]
   18e18:	str	r3, [sp]
   18e1c:	ldr	r3, [sp, #36]	; 0x24
   18e20:	ldr	r2, [sp, #32]
   18e24:	mov	r1, r8
   18e28:	bl	172b8 <__assert_fail@plt+0x5fe8>
   18e2c:	str	fp, [r7]
   18e30:	cmp	r6, #0
   18e34:	strne	sl, [r6]
   18e38:	ldr	r0, [sp, #28]
   18e3c:	add	sp, sp, #44	; 0x2c
   18e40:	ldrd	r4, [sp]
   18e44:	ldrd	r6, [sp, #8]
   18e48:	ldrd	r8, [sp, #16]
   18e4c:	ldrd	sl, [sp, #24]
   18e50:	add	sp, sp, #32
   18e54:	pop	{pc}		; (ldr pc, [sp], #4)
   18e58:	andeq	sp, r2, r0, asr #5
   18e5c:	str	r4, [sp, #-8]!
   18e60:	str	lr, [sp, #4]
   18e64:	mov	r3, r2
   18e68:	mov	r2, #0
   18e6c:	bl	18d60 <__assert_fail@plt+0x7a90>
   18e70:	ldr	r4, [sp]
   18e74:	add	sp, sp, #4
   18e78:	pop	{pc}		; (ldr pc, [sp], #4)
   18e7c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   18e80:	strd	r6, [sp, #8]
   18e84:	str	r8, [sp, #16]
   18e88:	str	lr, [sp, #20]
   18e8c:	movw	r3, #53560	; 0xd138
   18e90:	movt	r3, #2
   18e94:	ldr	r7, [r3]
   18e98:	ldr	r3, [r3, #4]
   18e9c:	cmp	r3, #1
   18ea0:	ble	18ecc <__assert_fail@plt+0x7bfc>
   18ea4:	mov	r4, #1
   18ea8:	add	r6, r7, #4
   18eac:	movw	r5, #53560	; 0xd138
   18eb0:	movt	r5, #2
   18eb4:	ldr	r0, [r6, r4, lsl #3]
   18eb8:	bl	13924 <__assert_fail@plt+0x2654>
   18ebc:	add	r4, r4, #1
   18ec0:	ldr	r3, [r5, #4]
   18ec4:	cmp	r3, r4
   18ec8:	bgt	18eb4 <__assert_fail@plt+0x7be4>
   18ecc:	ldr	r0, [r7, #4]
   18ed0:	movw	r3, #53696	; 0xd1c0
   18ed4:	movt	r3, #2
   18ed8:	cmp	r0, r3
   18edc:	beq	18f00 <__assert_fail@plt+0x7c30>
   18ee0:	bl	13924 <__assert_fail@plt+0x2654>
   18ee4:	movw	r3, #53560	; 0xd138
   18ee8:	movt	r3, #2
   18eec:	mov	r2, #256	; 0x100
   18ef0:	str	r2, [r3, #8]
   18ef4:	movw	r2, #53696	; 0xd1c0
   18ef8:	movt	r2, #2
   18efc:	str	r2, [r3, #12]
   18f00:	ldr	r3, [pc, #64]	; 18f48 <__assert_fail@plt+0x7c78>
   18f04:	cmp	r7, r3
   18f08:	beq	18f24 <__assert_fail@plt+0x7c54>
   18f0c:	mov	r0, r7
   18f10:	bl	13924 <__assert_fail@plt+0x2654>
   18f14:	movw	r3, #53560	; 0xd138
   18f18:	movt	r3, #2
   18f1c:	add	r2, r3, #8
   18f20:	str	r2, [r3]
   18f24:	movw	r3, #53560	; 0xd138
   18f28:	movt	r3, #2
   18f2c:	mov	r2, #1
   18f30:	str	r2, [r3, #4]
   18f34:	ldrd	r4, [sp]
   18f38:	ldrd	r6, [sp, #8]
   18f3c:	ldr	r8, [sp, #16]
   18f40:	add	sp, sp, #20
   18f44:	pop	{pc}		; (ldr pc, [sp], #4)
   18f48:	andeq	sp, r2, r0, asr #2
   18f4c:	str	r4, [sp, #-8]!
   18f50:	str	lr, [sp, #4]
   18f54:	ldr	r3, [pc, #16]	; 18f6c <__assert_fail@plt+0x7c9c>
   18f58:	mvn	r2, #0
   18f5c:	bl	189b0 <__assert_fail@plt+0x76e0>
   18f60:	ldr	r4, [sp]
   18f64:	add	sp, sp, #4
   18f68:	pop	{pc}		; (ldr pc, [sp], #4)
   18f6c:	andeq	sp, r2, r0, asr #5
   18f70:	str	r4, [sp, #-8]!
   18f74:	str	lr, [sp, #4]
   18f78:	ldr	r3, [pc, #12]	; 18f8c <__assert_fail@plt+0x7cbc>
   18f7c:	bl	189b0 <__assert_fail@plt+0x76e0>
   18f80:	ldr	r4, [sp]
   18f84:	add	sp, sp, #4
   18f88:	pop	{pc}		; (ldr pc, [sp], #4)
   18f8c:	andeq	sp, r2, r0, asr #5
   18f90:	str	r4, [sp, #-8]!
   18f94:	str	lr, [sp, #4]
   18f98:	mov	r1, r0
   18f9c:	mov	r0, #0
   18fa0:	bl	18f4c <__assert_fail@plt+0x7c7c>
   18fa4:	ldr	r4, [sp]
   18fa8:	add	sp, sp, #4
   18fac:	pop	{pc}		; (ldr pc, [sp], #4)
   18fb0:	str	r4, [sp, #-8]!
   18fb4:	str	lr, [sp, #4]
   18fb8:	mov	r2, r1
   18fbc:	mov	r1, r0
   18fc0:	mov	r0, #0
   18fc4:	bl	18f70 <__assert_fail@plt+0x7ca0>
   18fc8:	ldr	r4, [sp]
   18fcc:	add	sp, sp, #4
   18fd0:	pop	{pc}		; (ldr pc, [sp], #4)
   18fd4:	strd	r4, [sp, #-12]!
   18fd8:	str	lr, [sp, #8]
   18fdc:	sub	sp, sp, #52	; 0x34
   18fe0:	mov	r4, r0
   18fe4:	mov	r5, r2
   18fe8:	mov	r0, sp
   18fec:	bl	17124 <__assert_fail@plt+0x5e54>
   18ff0:	mov	r3, sp
   18ff4:	mvn	r2, #0
   18ff8:	mov	r1, r5
   18ffc:	mov	r0, r4
   19000:	bl	189b0 <__assert_fail@plt+0x76e0>
   19004:	add	sp, sp, #52	; 0x34
   19008:	ldrd	r4, [sp]
   1900c:	add	sp, sp, #8
   19010:	pop	{pc}		; (ldr pc, [sp], #4)
   19014:	strd	r4, [sp, #-16]!
   19018:	str	r6, [sp, #8]
   1901c:	str	lr, [sp, #12]
   19020:	sub	sp, sp, #48	; 0x30
   19024:	mov	r4, r0
   19028:	mov	r5, r2
   1902c:	mov	r6, r3
   19030:	mov	r0, sp
   19034:	bl	17124 <__assert_fail@plt+0x5e54>
   19038:	mov	r3, sp
   1903c:	mov	r2, r6
   19040:	mov	r1, r5
   19044:	mov	r0, r4
   19048:	bl	189b0 <__assert_fail@plt+0x76e0>
   1904c:	add	sp, sp, #48	; 0x30
   19050:	ldrd	r4, [sp]
   19054:	ldr	r6, [sp, #8]
   19058:	add	sp, sp, #12
   1905c:	pop	{pc}		; (ldr pc, [sp], #4)
   19060:	str	r4, [sp, #-8]!
   19064:	str	lr, [sp, #4]
   19068:	mov	r2, r1
   1906c:	mov	r1, r0
   19070:	mov	r0, #0
   19074:	bl	18fd4 <__assert_fail@plt+0x7d04>
   19078:	ldr	r4, [sp]
   1907c:	add	sp, sp, #4
   19080:	pop	{pc}		; (ldr pc, [sp], #4)
   19084:	str	r4, [sp, #-8]!
   19088:	str	lr, [sp, #4]
   1908c:	mov	r3, r2
   19090:	mov	r2, r1
   19094:	mov	r1, r0
   19098:	mov	r0, #0
   1909c:	bl	19014 <__assert_fail@plt+0x7d44>
   190a0:	ldr	r4, [sp]
   190a4:	add	sp, sp, #4
   190a8:	pop	{pc}		; (ldr pc, [sp], #4)
   190ac:	strd	r4, [sp, #-12]!
   190b0:	str	lr, [sp, #8]
   190b4:	sub	sp, sp, #52	; 0x34
   190b8:	mov	r4, r0
   190bc:	mov	r5, r1
   190c0:	mov	r1, r2
   190c4:	ldr	r0, [pc, #92]	; 19128 <__assert_fail@plt+0x7e58>
   190c8:	ldrd	r2, [r0]
   190cc:	strd	r2, [sp]
   190d0:	ldrd	r2, [r0, #8]
   190d4:	strd	r2, [sp, #8]
   190d8:	ldrd	r2, [r0, #16]
   190dc:	strd	r2, [sp, #16]
   190e0:	ldrd	r2, [r0, #24]
   190e4:	strd	r2, [sp, #24]
   190e8:	ldrd	r2, [r0, #32]
   190ec:	strd	r2, [sp, #32]
   190f0:	ldrd	r2, [r0, #40]	; 0x28
   190f4:	strd	r2, [sp, #40]	; 0x28
   190f8:	mov	r2, #1
   190fc:	mov	r0, sp
   19100:	bl	18c24 <__assert_fail@plt+0x7954>
   19104:	mov	r3, sp
   19108:	mov	r2, r5
   1910c:	mov	r1, r4
   19110:	mov	r0, #0
   19114:	bl	189b0 <__assert_fail@plt+0x76e0>
   19118:	add	sp, sp, #52	; 0x34
   1911c:	ldrd	r4, [sp]
   19120:	add	sp, sp, #8
   19124:	pop	{pc}		; (ldr pc, [sp], #4)
   19128:	andeq	sp, r2, r0, asr #5
   1912c:	str	r4, [sp, #-8]!
   19130:	str	lr, [sp, #4]
   19134:	mov	r2, r1
   19138:	mvn	r1, #0
   1913c:	bl	190ac <__assert_fail@plt+0x7ddc>
   19140:	ldr	r4, [sp]
   19144:	add	sp, sp, #4
   19148:	pop	{pc}		; (ldr pc, [sp], #4)
   1914c:	str	r4, [sp, #-8]!
   19150:	str	lr, [sp, #4]
   19154:	mov	r1, #58	; 0x3a
   19158:	bl	1912c <__assert_fail@plt+0x7e5c>
   1915c:	ldr	r4, [sp]
   19160:	add	sp, sp, #4
   19164:	pop	{pc}		; (ldr pc, [sp], #4)
   19168:	str	r4, [sp, #-8]!
   1916c:	str	lr, [sp, #4]
   19170:	mov	r2, #58	; 0x3a
   19174:	bl	190ac <__assert_fail@plt+0x7ddc>
   19178:	ldr	r4, [sp]
   1917c:	add	sp, sp, #4
   19180:	pop	{pc}		; (ldr pc, [sp], #4)
   19184:	strd	r4, [sp, #-12]!
   19188:	str	lr, [sp, #8]
   1918c:	sub	sp, sp, #100	; 0x64
   19190:	mov	r4, r0
   19194:	mov	r5, r2
   19198:	mov	r0, sp
   1919c:	bl	17124 <__assert_fail@plt+0x5e54>
   191a0:	ldrd	r2, [sp]
   191a4:	strd	r2, [sp, #48]	; 0x30
   191a8:	ldrd	r2, [sp, #8]
   191ac:	strd	r2, [sp, #56]	; 0x38
   191b0:	ldrd	r2, [sp, #16]
   191b4:	strd	r2, [sp, #64]	; 0x40
   191b8:	ldrd	r2, [sp, #24]
   191bc:	strd	r2, [sp, #72]	; 0x48
   191c0:	ldrd	r2, [sp, #32]
   191c4:	strd	r2, [sp, #80]	; 0x50
   191c8:	ldrd	r2, [sp, #40]	; 0x28
   191cc:	strd	r2, [sp, #88]	; 0x58
   191d0:	mov	r2, #1
   191d4:	mov	r1, #58	; 0x3a
   191d8:	add	r0, sp, #48	; 0x30
   191dc:	bl	18c24 <__assert_fail@plt+0x7954>
   191e0:	add	r3, sp, #48	; 0x30
   191e4:	mvn	r2, #0
   191e8:	mov	r1, r5
   191ec:	mov	r0, r4
   191f0:	bl	189b0 <__assert_fail@plt+0x76e0>
   191f4:	add	sp, sp, #100	; 0x64
   191f8:	ldrd	r4, [sp]
   191fc:	add	sp, sp, #8
   19200:	pop	{pc}		; (ldr pc, [sp], #4)
   19204:	strd	r4, [sp, #-20]!	; 0xffffffec
   19208:	strd	r6, [sp, #8]
   1920c:	str	lr, [sp, #16]
   19210:	sub	sp, sp, #52	; 0x34
   19214:	mov	r4, r0
   19218:	mov	r5, r3
   1921c:	ldr	r3, [pc, #92]	; 19280 <__assert_fail@plt+0x7fb0>
   19220:	ldrd	r6, [r3]
   19224:	strd	r6, [sp]
   19228:	ldrd	r6, [r3, #8]
   1922c:	strd	r6, [sp, #8]
   19230:	ldrd	r6, [r3, #16]
   19234:	strd	r6, [sp, #16]
   19238:	ldrd	r6, [r3, #24]
   1923c:	strd	r6, [sp, #24]
   19240:	ldrd	r6, [r3, #32]
   19244:	strd	r6, [sp, #32]
   19248:	ldrd	r6, [r3, #40]	; 0x28
   1924c:	strd	r6, [sp, #40]	; 0x28
   19250:	mov	r0, sp
   19254:	bl	18c80 <__assert_fail@plt+0x79b0>
   19258:	mov	r3, sp
   1925c:	ldr	r2, [sp, #72]	; 0x48
   19260:	mov	r1, r5
   19264:	mov	r0, r4
   19268:	bl	189b0 <__assert_fail@plt+0x76e0>
   1926c:	add	sp, sp, #52	; 0x34
   19270:	ldrd	r4, [sp]
   19274:	ldrd	r6, [sp, #8]
   19278:	add	sp, sp, #16
   1927c:	pop	{pc}		; (ldr pc, [sp], #4)
   19280:	andeq	sp, r2, r0, asr #5
   19284:	push	{lr}		; (str lr, [sp, #-4]!)
   19288:	sub	sp, sp, #12
   1928c:	mvn	ip, #0
   19290:	str	ip, [sp]
   19294:	bl	19204 <__assert_fail@plt+0x7f34>
   19298:	add	sp, sp, #12
   1929c:	pop	{pc}		; (ldr pc, [sp], #4)
   192a0:	str	r4, [sp, #-8]!
   192a4:	str	lr, [sp, #4]
   192a8:	mov	r3, r2
   192ac:	mov	r2, r1
   192b0:	mov	r1, r0
   192b4:	mov	r0, #0
   192b8:	bl	19284 <__assert_fail@plt+0x7fb4>
   192bc:	ldr	r4, [sp]
   192c0:	add	sp, sp, #4
   192c4:	pop	{pc}		; (ldr pc, [sp], #4)
   192c8:	push	{lr}		; (str lr, [sp, #-4]!)
   192cc:	sub	sp, sp, #12
   192d0:	str	r3, [sp]
   192d4:	mov	r3, r2
   192d8:	mov	r2, r1
   192dc:	mov	r1, r0
   192e0:	mov	r0, #0
   192e4:	bl	19204 <__assert_fail@plt+0x7f34>
   192e8:	add	sp, sp, #12
   192ec:	pop	{pc}		; (ldr pc, [sp], #4)
   192f0:	str	r4, [sp, #-8]!
   192f4:	str	lr, [sp, #4]
   192f8:	ldr	r3, [pc, #12]	; 1930c <__assert_fail@plt+0x803c>
   192fc:	bl	189b0 <__assert_fail@plt+0x76e0>
   19300:	ldr	r4, [sp]
   19304:	add	sp, sp, #4
   19308:	pop	{pc}		; (ldr pc, [sp], #4)
   1930c:	andeq	sp, r2, r8, asr #2
   19310:	str	r4, [sp, #-8]!
   19314:	str	lr, [sp, #4]
   19318:	mov	r2, r1
   1931c:	mov	r1, r0
   19320:	mov	r0, #0
   19324:	bl	192f0 <__assert_fail@plt+0x8020>
   19328:	ldr	r4, [sp]
   1932c:	add	sp, sp, #4
   19330:	pop	{pc}		; (ldr pc, [sp], #4)
   19334:	str	r4, [sp, #-8]!
   19338:	str	lr, [sp, #4]
   1933c:	mvn	r2, #0
   19340:	bl	192f0 <__assert_fail@plt+0x8020>
   19344:	ldr	r4, [sp]
   19348:	add	sp, sp, #4
   1934c:	pop	{pc}		; (ldr pc, [sp], #4)
   19350:	str	r4, [sp, #-8]!
   19354:	str	lr, [sp, #4]
   19358:	mov	r1, r0
   1935c:	mov	r0, #0
   19360:	bl	19334 <__assert_fail@plt+0x8064>
   19364:	ldr	r4, [sp]
   19368:	add	sp, sp, #4
   1936c:	pop	{pc}		; (ldr pc, [sp], #4)
   19370:	str	r4, [sp, #-8]!
   19374:	str	lr, [sp, #4]
   19378:	sub	sp, sp, #104	; 0x68
   1937c:	mov	r4, r0
   19380:	mov	r2, sp
   19384:	movw	r1, #46364	; 0xb51c
   19388:	movt	r1, #1
   1938c:	mov	r0, #3
   19390:	bl	112ac <__lxstat64@plt>
   19394:	cmp	r0, #0
   19398:	movne	r0, #0
   1939c:	bne	193b4 <__assert_fail@plt+0x80e4>
   193a0:	ldrd	r2, [sp, #96]	; 0x60
   193a4:	strd	r2, [r4]
   193a8:	ldrd	r2, [sp]
   193ac:	strd	r2, [r4, #8]
   193b0:	mov	r0, r4
   193b4:	add	sp, sp, #104	; 0x68
   193b8:	ldr	r4, [sp]
   193bc:	add	sp, sp, #4
   193c0:	pop	{pc}		; (ldr pc, [sp], #4)
   193c4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   193c8:	strd	r6, [sp, #8]
   193cc:	str	r8, [sp, #16]
   193d0:	str	lr, [sp, #20]
   193d4:	mov	r4, r0
   193d8:	cmp	r0, #2
   193dc:	bls	193f8 <__assert_fail@plt+0x8128>
   193e0:	mov	r0, r4
   193e4:	ldrd	r4, [sp]
   193e8:	ldrd	r6, [sp, #8]
   193ec:	ldr	r8, [sp, #16]
   193f0:	add	sp, sp, #20
   193f4:	pop	{pc}		; (ldr pc, [sp], #4)
   193f8:	bl	1a720 <__assert_fail@plt+0x9450>
   193fc:	mov	r6, r0
   19400:	bl	11180 <__errno_location@plt>
   19404:	mov	r5, r0
   19408:	ldr	r7, [r0]
   1940c:	mov	r0, r4
   19410:	bl	112a0 <close@plt>
   19414:	str	r7, [r5]
   19418:	mov	r4, r6
   1941c:	b	193e0 <__assert_fail@plt+0x8110>
   19420:	strd	r4, [sp, #-16]!
   19424:	str	r6, [sp, #8]
   19428:	str	lr, [sp, #12]
   1942c:	sub	sp, sp, #32
   19430:	mov	r4, r0
   19434:	ldr	r5, [sp, #48]	; 0x30
   19438:	ldr	r6, [sp, #52]	; 0x34
   1943c:	cmp	r1, #0
   19440:	beq	1950c <__assert_fail@plt+0x823c>
   19444:	str	r3, [sp, #4]
   19448:	str	r2, [sp]
   1944c:	mov	r3, r1
   19450:	movw	r2, #48420	; 0xbd24
   19454:	movt	r2, #1
   19458:	mov	r1, #1
   1945c:	bl	111bc <__fprintf_chk@plt>
   19460:	mov	r2, #5
   19464:	movw	r1, #48440	; 0xbd38
   19468:	movt	r1, #1
   1946c:	mov	r0, #0
   19470:	bl	11060 <dcgettext@plt>
   19474:	movw	r3, #2022	; 0x7e6
   19478:	str	r3, [sp]
   1947c:	mov	r3, r0
   19480:	movw	r2, #49144	; 0xbff8
   19484:	movt	r2, #1
   19488:	mov	r1, #1
   1948c:	mov	r0, r4
   19490:	bl	111bc <__fprintf_chk@plt>
   19494:	mov	r1, r4
   19498:	mov	r0, #10
   1949c:	bl	11054 <fputc_unlocked@plt>
   194a0:	mov	r2, #5
   194a4:	movw	r1, #48444	; 0xbd3c
   194a8:	movt	r1, #1
   194ac:	mov	r0, #0
   194b0:	bl	11060 <dcgettext@plt>
   194b4:	movw	r3, #48616	; 0xbde8
   194b8:	movt	r3, #1
   194bc:	mov	r2, r0
   194c0:	mov	r1, #1
   194c4:	mov	r0, r4
   194c8:	bl	111bc <__fprintf_chk@plt>
   194cc:	mov	r1, r4
   194d0:	mov	r0, #10
   194d4:	bl	11054 <fputc_unlocked@plt>
   194d8:	cmp	r6, #9
   194dc:	ldrls	pc, [pc, r6, lsl #2]
   194e0:	b	197e4 <__assert_fail@plt+0x8514>
   194e4:	andeq	r9, r1, r0, asr r5
   194e8:	andeq	r9, r1, r8, lsr #10
   194ec:	andeq	r9, r1, r4, ror #10
   194f0:	muleq	r1, r8, r5
   194f4:	ldrdeq	r9, [r1], -r4
   194f8:	andeq	r9, r1, r8, lsl r6
   194fc:	andeq	r9, r1, r4, ror #12
   19500:			; <UNDEFINED> instruction: 0x000196b8
   19504:	andeq	r9, r1, r4, lsl r7
   19508:	andeq	r9, r1, r8, ror r7
   1950c:	str	r3, [sp]
   19510:	mov	r3, r2
   19514:	movw	r2, #48432	; 0xbd30
   19518:	movt	r2, #1
   1951c:	mov	r1, #1
   19520:	bl	111bc <__fprintf_chk@plt>
   19524:	b	19460 <__assert_fail@plt+0x8190>
   19528:	mov	r2, #5
   1952c:	movw	r1, #48652	; 0xbe0c
   19530:	movt	r1, #1
   19534:	mov	r0, #0
   19538:	bl	11060 <dcgettext@plt>
   1953c:	ldr	r3, [r5]
   19540:	mov	r2, r0
   19544:	mov	r1, #1
   19548:	mov	r0, r4
   1954c:	bl	111bc <__fprintf_chk@plt>
   19550:	add	sp, sp, #32
   19554:	ldrd	r4, [sp]
   19558:	ldr	r6, [sp, #8]
   1955c:	add	sp, sp, #12
   19560:	pop	{pc}		; (ldr pc, [sp], #4)
   19564:	mov	r2, #5
   19568:	movw	r1, #48668	; 0xbe1c
   1956c:	movt	r1, #1
   19570:	mov	r0, #0
   19574:	bl	11060 <dcgettext@plt>
   19578:	ldr	r3, [r5, #4]
   1957c:	str	r3, [sp]
   19580:	ldr	r3, [r5]
   19584:	mov	r2, r0
   19588:	mov	r1, #1
   1958c:	mov	r0, r4
   19590:	bl	111bc <__fprintf_chk@plt>
   19594:	b	19550 <__assert_fail@plt+0x8280>
   19598:	mov	r2, #5
   1959c:	movw	r1, #48692	; 0xbe34
   195a0:	movt	r1, #1
   195a4:	mov	r0, #0
   195a8:	bl	11060 <dcgettext@plt>
   195ac:	ldr	r3, [r5, #8]
   195b0:	str	r3, [sp, #4]
   195b4:	ldr	r3, [r5, #4]
   195b8:	str	r3, [sp]
   195bc:	ldr	r3, [r5]
   195c0:	mov	r2, r0
   195c4:	mov	r1, #1
   195c8:	mov	r0, r4
   195cc:	bl	111bc <__fprintf_chk@plt>
   195d0:	b	19550 <__assert_fail@plt+0x8280>
   195d4:	mov	r2, #5
   195d8:	movw	r1, #48720	; 0xbe50
   195dc:	movt	r1, #1
   195e0:	mov	r0, #0
   195e4:	bl	11060 <dcgettext@plt>
   195e8:	ldr	r3, [r5, #12]
   195ec:	str	r3, [sp, #8]
   195f0:	ldr	r3, [r5, #8]
   195f4:	str	r3, [sp, #4]
   195f8:	ldr	r3, [r5, #4]
   195fc:	str	r3, [sp]
   19600:	ldr	r3, [r5]
   19604:	mov	r2, r0
   19608:	mov	r1, #1
   1960c:	mov	r0, r4
   19610:	bl	111bc <__fprintf_chk@plt>
   19614:	b	19550 <__assert_fail@plt+0x8280>
   19618:	mov	r2, #5
   1961c:	movw	r1, #48752	; 0xbe70
   19620:	movt	r1, #1
   19624:	mov	r0, #0
   19628:	bl	11060 <dcgettext@plt>
   1962c:	ldr	r3, [r5, #16]
   19630:	str	r3, [sp, #12]
   19634:	ldr	r3, [r5, #12]
   19638:	str	r3, [sp, #8]
   1963c:	ldr	r3, [r5, #8]
   19640:	str	r3, [sp, #4]
   19644:	ldr	r3, [r5, #4]
   19648:	str	r3, [sp]
   1964c:	ldr	r3, [r5]
   19650:	mov	r2, r0
   19654:	mov	r1, #1
   19658:	mov	r0, r4
   1965c:	bl	111bc <__fprintf_chk@plt>
   19660:	b	19550 <__assert_fail@plt+0x8280>
   19664:	mov	r2, #5
   19668:	movw	r1, #48788	; 0xbe94
   1966c:	movt	r1, #1
   19670:	mov	r0, #0
   19674:	bl	11060 <dcgettext@plt>
   19678:	ldr	r3, [r5, #20]
   1967c:	str	r3, [sp, #16]
   19680:	ldr	r3, [r5, #16]
   19684:	str	r3, [sp, #12]
   19688:	ldr	r3, [r5, #12]
   1968c:	str	r3, [sp, #8]
   19690:	ldr	r3, [r5, #8]
   19694:	str	r3, [sp, #4]
   19698:	ldr	r3, [r5, #4]
   1969c:	str	r3, [sp]
   196a0:	ldr	r3, [r5]
   196a4:	mov	r2, r0
   196a8:	mov	r1, #1
   196ac:	mov	r0, r4
   196b0:	bl	111bc <__fprintf_chk@plt>
   196b4:	b	19550 <__assert_fail@plt+0x8280>
   196b8:	mov	r2, #5
   196bc:	movw	r1, #48828	; 0xbebc
   196c0:	movt	r1, #1
   196c4:	mov	r0, #0
   196c8:	bl	11060 <dcgettext@plt>
   196cc:	ldr	r3, [r5, #24]
   196d0:	str	r3, [sp, #20]
   196d4:	ldr	r3, [r5, #20]
   196d8:	str	r3, [sp, #16]
   196dc:	ldr	r3, [r5, #16]
   196e0:	str	r3, [sp, #12]
   196e4:	ldr	r3, [r5, #12]
   196e8:	str	r3, [sp, #8]
   196ec:	ldr	r3, [r5, #8]
   196f0:	str	r3, [sp, #4]
   196f4:	ldr	r3, [r5, #4]
   196f8:	str	r3, [sp]
   196fc:	ldr	r3, [r5]
   19700:	mov	r2, r0
   19704:	mov	r1, #1
   19708:	mov	r0, r4
   1970c:	bl	111bc <__fprintf_chk@plt>
   19710:	b	19550 <__assert_fail@plt+0x8280>
   19714:	mov	r2, #5
   19718:	movw	r1, #48872	; 0xbee8
   1971c:	movt	r1, #1
   19720:	mov	r0, #0
   19724:	bl	11060 <dcgettext@plt>
   19728:	ldr	r3, [r5, #28]
   1972c:	str	r3, [sp, #24]
   19730:	ldr	r3, [r5, #24]
   19734:	str	r3, [sp, #20]
   19738:	ldr	r3, [r5, #20]
   1973c:	str	r3, [sp, #16]
   19740:	ldr	r3, [r5, #16]
   19744:	str	r3, [sp, #12]
   19748:	ldr	r3, [r5, #12]
   1974c:	str	r3, [sp, #8]
   19750:	ldr	r3, [r5, #8]
   19754:	str	r3, [sp, #4]
   19758:	ldr	r3, [r5, #4]
   1975c:	str	r3, [sp]
   19760:	ldr	r3, [r5]
   19764:	mov	r2, r0
   19768:	mov	r1, #1
   1976c:	mov	r0, r4
   19770:	bl	111bc <__fprintf_chk@plt>
   19774:	b	19550 <__assert_fail@plt+0x8280>
   19778:	mov	r2, #5
   1977c:	movw	r1, #48920	; 0xbf18
   19780:	movt	r1, #1
   19784:	mov	r0, #0
   19788:	bl	11060 <dcgettext@plt>
   1978c:	ldr	r3, [r5, #32]
   19790:	str	r3, [sp, #28]
   19794:	ldr	r3, [r5, #28]
   19798:	str	r3, [sp, #24]
   1979c:	ldr	r3, [r5, #24]
   197a0:	str	r3, [sp, #20]
   197a4:	ldr	r3, [r5, #20]
   197a8:	str	r3, [sp, #16]
   197ac:	ldr	r3, [r5, #16]
   197b0:	str	r3, [sp, #12]
   197b4:	ldr	r3, [r5, #12]
   197b8:	str	r3, [sp, #8]
   197bc:	ldr	r3, [r5, #8]
   197c0:	str	r3, [sp, #4]
   197c4:	ldr	r3, [r5, #4]
   197c8:	str	r3, [sp]
   197cc:	ldr	r3, [r5]
   197d0:	mov	r2, r0
   197d4:	mov	r1, #1
   197d8:	mov	r0, r4
   197dc:	bl	111bc <__fprintf_chk@plt>
   197e0:	b	19550 <__assert_fail@plt+0x8280>
   197e4:	mov	r2, #5
   197e8:	movw	r1, #48972	; 0xbf4c
   197ec:	movt	r1, #1
   197f0:	mov	r0, #0
   197f4:	bl	11060 <dcgettext@plt>
   197f8:	ldr	r3, [r5, #32]
   197fc:	str	r3, [sp, #28]
   19800:	ldr	r3, [r5, #28]
   19804:	str	r3, [sp, #24]
   19808:	ldr	r3, [r5, #24]
   1980c:	str	r3, [sp, #20]
   19810:	ldr	r3, [r5, #20]
   19814:	str	r3, [sp, #16]
   19818:	ldr	r3, [r5, #16]
   1981c:	str	r3, [sp, #12]
   19820:	ldr	r3, [r5, #12]
   19824:	str	r3, [sp, #8]
   19828:	ldr	r3, [r5, #8]
   1982c:	str	r3, [sp, #4]
   19830:	ldr	r3, [r5, #4]
   19834:	str	r3, [sp]
   19838:	ldr	r3, [r5]
   1983c:	mov	r2, r0
   19840:	mov	r1, #1
   19844:	mov	r0, r4
   19848:	bl	111bc <__fprintf_chk@plt>
   1984c:	b	19550 <__assert_fail@plt+0x8280>
   19850:	strd	r4, [sp, #-12]!
   19854:	str	lr, [sp, #8]
   19858:	sub	sp, sp, #12
   1985c:	ldr	r5, [sp, #24]
   19860:	ldr	ip, [r5]
   19864:	cmp	ip, #0
   19868:	beq	198a0 <__assert_fail@plt+0x85d0>
   1986c:	mov	lr, r5
   19870:	mov	ip, #0
   19874:	add	ip, ip, #1
   19878:	ldr	r4, [lr, #4]!
   1987c:	cmp	r4, #0
   19880:	bne	19874 <__assert_fail@plt+0x85a4>
   19884:	str	ip, [sp, #4]
   19888:	str	r5, [sp]
   1988c:	bl	19420 <__assert_fail@plt+0x8150>
   19890:	add	sp, sp, #12
   19894:	ldrd	r4, [sp]
   19898:	add	sp, sp, #8
   1989c:	pop	{pc}		; (ldr pc, [sp], #4)
   198a0:	mov	ip, #0
   198a4:	b	19884 <__assert_fail@plt+0x85b4>
   198a8:	strd	r4, [sp, #-12]!
   198ac:	str	lr, [sp, #8]
   198b0:	sub	sp, sp, #52	; 0x34
   198b4:	ldr	r5, [sp, #64]	; 0x40
   198b8:	add	r4, sp, #8
   198bc:	mov	ip, #0
   198c0:	ldr	lr, [r5], #4
   198c4:	str	lr, [r4], #4
   198c8:	cmp	lr, #0
   198cc:	beq	198dc <__assert_fail@plt+0x860c>
   198d0:	add	ip, ip, #1
   198d4:	cmp	ip, #10
   198d8:	bne	198c0 <__assert_fail@plt+0x85f0>
   198dc:	str	ip, [sp, #4]
   198e0:	add	ip, sp, #8
   198e4:	str	ip, [sp]
   198e8:	bl	19420 <__assert_fail@plt+0x8150>
   198ec:	add	sp, sp, #52	; 0x34
   198f0:	ldrd	r4, [sp]
   198f4:	add	sp, sp, #8
   198f8:	pop	{pc}		; (ldr pc, [sp], #4)
   198fc:	push	{r3}		; (str r3, [sp, #-4]!)
   19900:	push	{lr}		; (str lr, [sp, #-4]!)
   19904:	sub	sp, sp, #16
   19908:	add	r3, sp, #24
   1990c:	str	r3, [sp, #12]
   19910:	str	r3, [sp]
   19914:	ldr	r3, [sp, #20]
   19918:	bl	198a8 <__assert_fail@plt+0x85d8>
   1991c:	add	sp, sp, #16
   19920:	pop	{lr}		; (ldr lr, [sp], #4)
   19924:	add	sp, sp, #4
   19928:	bx	lr
   1992c:	str	r4, [sp, #-8]!
   19930:	str	lr, [sp, #4]
   19934:	movw	r3, #53652	; 0xd194
   19938:	movt	r3, #2
   1993c:	ldr	r1, [r3]
   19940:	mov	r0, #10
   19944:	bl	11054 <fputc_unlocked@plt>
   19948:	mov	r2, #5
   1994c:	movw	r1, #49032	; 0xbf88
   19950:	movt	r1, #1
   19954:	mov	r0, #0
   19958:	bl	11060 <dcgettext@plt>
   1995c:	movw	r2, #47640	; 0xba18
   19960:	movt	r2, #1
   19964:	mov	r1, r0
   19968:	mov	r0, #1
   1996c:	bl	111a4 <__printf_chk@plt>
   19970:	mov	r2, #5
   19974:	movw	r1, #49052	; 0xbf9c
   19978:	movt	r1, #1
   1997c:	mov	r0, #0
   19980:	bl	11060 <dcgettext@plt>
   19984:	movw	r3, #45828	; 0xb304
   19988:	movt	r3, #1
   1998c:	movw	r2, #45868	; 0xb32c
   19990:	movt	r2, #1
   19994:	mov	r1, r0
   19998:	mov	r0, #1
   1999c:	bl	111a4 <__printf_chk@plt>
   199a0:	mov	r2, #5
   199a4:	movw	r1, #49072	; 0xbfb0
   199a8:	movt	r1, #1
   199ac:	mov	r0, #0
   199b0:	bl	11060 <dcgettext@plt>
   199b4:	movw	r2, #49112	; 0xbfd8
   199b8:	movt	r2, #1
   199bc:	mov	r1, r0
   199c0:	mov	r0, #1
   199c4:	bl	111a4 <__printf_chk@plt>
   199c8:	ldr	r4, [sp]
   199cc:	add	sp, sp, #4
   199d0:	pop	{pc}		; (ldr pc, [sp], #4)
   199d4:	movw	r3, #54000	; 0xd2f0
   199d8:	movt	r3, #2
   199dc:	ldrb	r3, [r3]
   199e0:	cmp	r3, #0
   199e4:	beq	199f8 <__assert_fail@plt+0x8728>
   199e8:	movw	r3, #54000	; 0xd2f0
   199ec:	movt	r3, #2
   199f0:	ldrb	r0, [r3, #1]
   199f4:	bx	lr
   199f8:	str	r4, [sp, #-8]!
   199fc:	str	lr, [sp, #4]
   19a00:	bl	11084 <geteuid@plt>
   19a04:	movw	r3, #54000	; 0xd2f0
   19a08:	movt	r3, #2
   19a0c:	clz	r0, r0
   19a10:	lsr	r0, r0, #5
   19a14:	strb	r0, [r3, #1]
   19a18:	mov	r2, #1
   19a1c:	strb	r2, [r3]
   19a20:	movw	r3, #54000	; 0xd2f0
   19a24:	movt	r3, #2
   19a28:	ldrb	r0, [r3, #1]
   19a2c:	ldr	r4, [sp]
   19a30:	add	sp, sp, #4
   19a34:	pop	{pc}		; (ldr pc, [sp], #4)
   19a38:	str	r4, [sp, #-8]!
   19a3c:	str	lr, [sp, #4]
   19a40:	bl	1a09c <__assert_fail@plt+0x8dcc>
   19a44:	cmp	r0, #0
   19a48:	beq	19a58 <__assert_fail@plt+0x8788>
   19a4c:	ldr	r4, [sp]
   19a50:	add	sp, sp, #4
   19a54:	pop	{pc}		; (ldr pc, [sp], #4)
   19a58:	bl	19ecc <__assert_fail@plt+0x8bfc>
   19a5c:	str	r4, [sp, #-8]!
   19a60:	str	lr, [sp, #4]
   19a64:	bl	1a09c <__assert_fail@plt+0x8dcc>
   19a68:	cmp	r0, #0
   19a6c:	beq	19a7c <__assert_fail@plt+0x87ac>
   19a70:	ldr	r4, [sp]
   19a74:	add	sp, sp, #4
   19a78:	pop	{pc}		; (ldr pc, [sp], #4)
   19a7c:	bl	19ecc <__assert_fail@plt+0x8bfc>
   19a80:	str	r4, [sp, #-8]!
   19a84:	str	lr, [sp, #4]
   19a88:	bl	19a38 <__assert_fail@plt+0x8768>
   19a8c:	ldr	r4, [sp]
   19a90:	add	sp, sp, #4
   19a94:	pop	{pc}		; (ldr pc, [sp], #4)
   19a98:	strd	r4, [sp, #-16]!
   19a9c:	str	r6, [sp, #8]
   19aa0:	str	lr, [sp, #12]
   19aa4:	mov	r5, r0
   19aa8:	mov	r4, r1
   19aac:	bl	1a0d8 <__assert_fail@plt+0x8e08>
   19ab0:	cmp	r0, #0
   19ab4:	beq	19ac8 <__assert_fail@plt+0x87f8>
   19ab8:	ldrd	r4, [sp]
   19abc:	ldr	r6, [sp, #8]
   19ac0:	add	sp, sp, #12
   19ac4:	pop	{pc}		; (ldr pc, [sp], #4)
   19ac8:	adds	r4, r4, #0
   19acc:	movne	r4, #1
   19ad0:	cmp	r5, #0
   19ad4:	moveq	r4, #1
   19ad8:	cmp	r4, #0
   19adc:	beq	19ab8 <__assert_fail@plt+0x87e8>
   19ae0:	bl	19ecc <__assert_fail@plt+0x8bfc>
   19ae4:	str	r4, [sp, #-8]!
   19ae8:	str	lr, [sp, #4]
   19aec:	cmp	r1, #0
   19af0:	orreq	r1, r1, #1
   19af4:	bl	1a0d8 <__assert_fail@plt+0x8e08>
   19af8:	cmp	r0, #0
   19afc:	beq	19b0c <__assert_fail@plt+0x883c>
   19b00:	ldr	r4, [sp]
   19b04:	add	sp, sp, #4
   19b08:	pop	{pc}		; (ldr pc, [sp], #4)
   19b0c:	bl	19ecc <__assert_fail@plt+0x8bfc>
   19b10:	strd	r4, [sp, #-16]!
   19b14:	str	r6, [sp, #8]
   19b18:	str	lr, [sp, #12]
   19b1c:	mov	r4, r0
   19b20:	mov	r6, r1
   19b24:	mov	r5, r2
   19b28:	bl	1a6e4 <__assert_fail@plt+0x9414>
   19b2c:	cmp	r0, #0
   19b30:	beq	19b44 <__assert_fail@plt+0x8874>
   19b34:	ldrd	r4, [sp]
   19b38:	ldr	r6, [sp, #8]
   19b3c:	add	sp, sp, #12
   19b40:	pop	{pc}		; (ldr pc, [sp], #4)
   19b44:	cmp	r4, #0
   19b48:	beq	19b58 <__assert_fail@plt+0x8888>
   19b4c:	cmp	r6, #0
   19b50:	cmpne	r5, #0
   19b54:	beq	19b34 <__assert_fail@plt+0x8864>
   19b58:	bl	19ecc <__assert_fail@plt+0x8bfc>
   19b5c:	str	r4, [sp, #-8]!
   19b60:	str	lr, [sp, #4]
   19b64:	bl	19b10 <__assert_fail@plt+0x8840>
   19b68:	ldr	r4, [sp]
   19b6c:	add	sp, sp, #4
   19b70:	pop	{pc}		; (ldr pc, [sp], #4)
   19b74:	str	r4, [sp, #-8]!
   19b78:	str	lr, [sp, #4]
   19b7c:	mov	ip, r1
   19b80:	mov	r3, r2
   19b84:	cmp	r2, #0
   19b88:	cmpne	r1, #0
   19b8c:	moveq	r3, #1
   19b90:	moveq	ip, r3
   19b94:	mov	r2, r3
   19b98:	mov	r1, ip
   19b9c:	bl	1a6e4 <__assert_fail@plt+0x9414>
   19ba0:	cmp	r0, #0
   19ba4:	beq	19bb4 <__assert_fail@plt+0x88e4>
   19ba8:	ldr	r4, [sp]
   19bac:	add	sp, sp, #4
   19bb0:	pop	{pc}		; (ldr pc, [sp], #4)
   19bb4:	bl	19ecc <__assert_fail@plt+0x8bfc>
   19bb8:	str	r4, [sp, #-8]!
   19bbc:	str	lr, [sp, #4]
   19bc0:	mov	r2, r1
   19bc4:	mov	r1, r0
   19bc8:	mov	r0, #0
   19bcc:	bl	19b10 <__assert_fail@plt+0x8840>
   19bd0:	ldr	r4, [sp]
   19bd4:	add	sp, sp, #4
   19bd8:	pop	{pc}		; (ldr pc, [sp], #4)
   19bdc:	str	r4, [sp, #-8]!
   19be0:	str	lr, [sp, #4]
   19be4:	mov	r2, r1
   19be8:	mov	r1, r0
   19bec:	mov	r0, #0
   19bf0:	bl	19b74 <__assert_fail@plt+0x88a4>
   19bf4:	ldr	r4, [sp]
   19bf8:	add	sp, sp, #4
   19bfc:	pop	{pc}		; (ldr pc, [sp], #4)
   19c00:	strd	r4, [sp, #-16]!
   19c04:	str	r6, [sp, #8]
   19c08:	str	lr, [sp, #12]
   19c0c:	mov	r5, r1
   19c10:	ldr	r4, [r1]
   19c14:	cmp	r0, #0
   19c18:	beq	19c48 <__assert_fail@plt+0x8978>
   19c1c:	lsr	r3, r4, #1
   19c20:	add	r3, r3, #1
   19c24:	adds	r4, r4, r3
   19c28:	bcs	19c64 <__assert_fail@plt+0x8994>
   19c2c:	mov	r1, r4
   19c30:	bl	19b10 <__assert_fail@plt+0x8840>
   19c34:	str	r4, [r5]
   19c38:	ldrd	r4, [sp]
   19c3c:	ldr	r6, [sp, #8]
   19c40:	add	sp, sp, #12
   19c44:	pop	{pc}		; (ldr pc, [sp], #4)
   19c48:	cmp	r4, #0
   19c4c:	bne	19c2c <__assert_fail@plt+0x895c>
   19c50:	mov	r4, #64	; 0x40
   19c54:	udiv	r4, r4, r2
   19c58:	cmp	r2, #64	; 0x40
   19c5c:	addhi	r4, r4, #1
   19c60:	b	19c2c <__assert_fail@plt+0x895c>
   19c64:	bl	19ecc <__assert_fail@plt+0x8bfc>
   19c68:	str	r4, [sp, #-8]!
   19c6c:	str	lr, [sp, #4]
   19c70:	mov	r2, #1
   19c74:	bl	19c00 <__assert_fail@plt+0x8930>
   19c78:	ldr	r4, [sp]
   19c7c:	add	sp, sp, #4
   19c80:	pop	{pc}		; (ldr pc, [sp], #4)
   19c84:	strd	r4, [sp, #-24]!	; 0xffffffe8
   19c88:	strd	r6, [sp, #8]
   19c8c:	str	r8, [sp, #16]
   19c90:	str	lr, [sp, #20]
   19c94:	mov	r5, r1
   19c98:	ldr	lr, [sp, #24]
   19c9c:	ldr	ip, [r1]
   19ca0:	asr	r4, ip, #1
   19ca4:	adds	r4, ip, r4
   19ca8:	movvs	r1, #1
   19cac:	movvc	r1, #0
   19cb0:	cmp	r1, #0
   19cb4:	mvnne	r4, #-2147483648	; 0x80000000
   19cb8:	mvn	r8, r3
   19cbc:	lsr	r8, r8, #31
   19cc0:	cmp	r3, r4
   19cc4:	movge	r1, #0
   19cc8:	andlt	r1, r8, #1
   19ccc:	cmp	r1, #0
   19cd0:	movne	r4, r3
   19cd4:	smull	r6, r7, r4, lr
   19cd8:	asr	r1, r6, #31
   19cdc:	cmp	r1, r7
   19ce0:	bne	19cf8 <__assert_fail@plt+0x8a28>
   19ce4:	mov	r1, r6
   19ce8:	cmp	r6, #63	; 0x3f
   19cec:	movle	r1, #64	; 0x40
   19cf0:	ble	19cfc <__assert_fail@plt+0x8a2c>
   19cf4:	b	19d08 <__assert_fail@plt+0x8a38>
   19cf8:	mvn	r1, #-2147483648	; 0x80000000
   19cfc:	sdiv	r4, r1, lr
   19d00:	mls	r6, lr, r4, r1
   19d04:	sub	r1, r1, r6
   19d08:	cmp	r0, #0
   19d0c:	moveq	r6, #0
   19d10:	streq	r6, [r5]
   19d14:	sub	r6, r4, ip
   19d18:	cmp	r6, r2
   19d1c:	bge	19d54 <__assert_fail@plt+0x8a84>
   19d20:	adds	r2, ip, r2
   19d24:	mov	r4, r2
   19d28:	bvs	19d70 <__assert_fail@plt+0x8aa0>
   19d2c:	cmp	r2, r3
   19d30:	movle	r3, #0
   19d34:	andgt	r3, r8, #1
   19d38:	cmp	r3, #0
   19d3c:	bne	19d70 <__assert_fail@plt+0x8aa0>
   19d40:	smull	r2, r3, r2, lr
   19d44:	asr	ip, r2, #31
   19d48:	mov	r1, r2
   19d4c:	cmp	ip, r3
   19d50:	bne	19d70 <__assert_fail@plt+0x8aa0>
   19d54:	bl	19a98 <__assert_fail@plt+0x87c8>
   19d58:	str	r4, [r5]
   19d5c:	ldrd	r4, [sp]
   19d60:	ldrd	r6, [sp, #8]
   19d64:	ldr	r8, [sp, #16]
   19d68:	add	sp, sp, #20
   19d6c:	pop	{pc}		; (ldr pc, [sp], #4)
   19d70:	bl	19ecc <__assert_fail@plt+0x8bfc>
   19d74:	str	r4, [sp, #-8]!
   19d78:	str	lr, [sp, #4]
   19d7c:	bl	1a028 <__assert_fail@plt+0x8d58>
   19d80:	cmp	r0, #0
   19d84:	beq	19d94 <__assert_fail@plt+0x8ac4>
   19d88:	ldr	r4, [sp]
   19d8c:	add	sp, sp, #4
   19d90:	pop	{pc}		; (ldr pc, [sp], #4)
   19d94:	bl	19ecc <__assert_fail@plt+0x8bfc>
   19d98:	str	r4, [sp, #-8]!
   19d9c:	str	lr, [sp, #4]
   19da0:	mov	r1, #1
   19da4:	bl	19d74 <__assert_fail@plt+0x8aa4>
   19da8:	ldr	r4, [sp]
   19dac:	add	sp, sp, #4
   19db0:	pop	{pc}		; (ldr pc, [sp], #4)
   19db4:	str	r4, [sp, #-8]!
   19db8:	str	lr, [sp, #4]
   19dbc:	bl	1a028 <__assert_fail@plt+0x8d58>
   19dc0:	cmp	r0, #0
   19dc4:	beq	19dd4 <__assert_fail@plt+0x8b04>
   19dc8:	ldr	r4, [sp]
   19dcc:	add	sp, sp, #4
   19dd0:	pop	{pc}		; (ldr pc, [sp], #4)
   19dd4:	bl	19ecc <__assert_fail@plt+0x8bfc>
   19dd8:	str	r4, [sp, #-8]!
   19ddc:	str	lr, [sp, #4]
   19de0:	mov	r1, #1
   19de4:	bl	19db4 <__assert_fail@plt+0x8ae4>
   19de8:	ldr	r4, [sp]
   19dec:	add	sp, sp, #4
   19df0:	pop	{pc}		; (ldr pc, [sp], #4)
   19df4:	strd	r4, [sp, #-16]!
   19df8:	str	r6, [sp, #8]
   19dfc:	str	lr, [sp, #12]
   19e00:	mov	r5, r0
   19e04:	mov	r4, r1
   19e08:	mov	r0, r1
   19e0c:	bl	19a38 <__assert_fail@plt+0x8768>
   19e10:	mov	r2, r4
   19e14:	mov	r1, r5
   19e18:	bl	11030 <memcpy@plt>
   19e1c:	ldrd	r4, [sp]
   19e20:	ldr	r6, [sp, #8]
   19e24:	add	sp, sp, #12
   19e28:	pop	{pc}		; (ldr pc, [sp], #4)
   19e2c:	strd	r4, [sp, #-16]!
   19e30:	str	r6, [sp, #8]
   19e34:	str	lr, [sp, #12]
   19e38:	mov	r5, r0
   19e3c:	mov	r4, r1
   19e40:	mov	r0, r1
   19e44:	bl	19a5c <__assert_fail@plt+0x878c>
   19e48:	mov	r2, r4
   19e4c:	mov	r1, r5
   19e50:	bl	11030 <memcpy@plt>
   19e54:	ldrd	r4, [sp]
   19e58:	ldr	r6, [sp, #8]
   19e5c:	add	sp, sp, #12
   19e60:	pop	{pc}		; (ldr pc, [sp], #4)
   19e64:	strd	r4, [sp, #-16]!
   19e68:	str	r6, [sp, #8]
   19e6c:	str	lr, [sp, #12]
   19e70:	mov	r5, r0
   19e74:	mov	r4, r1
   19e78:	add	r0, r1, #1
   19e7c:	bl	19a5c <__assert_fail@plt+0x878c>
   19e80:	mov	r2, #0
   19e84:	strb	r2, [r0, r4]
   19e88:	mov	r2, r4
   19e8c:	mov	r1, r5
   19e90:	bl	11030 <memcpy@plt>
   19e94:	ldrd	r4, [sp]
   19e98:	ldr	r6, [sp, #8]
   19e9c:	add	sp, sp, #12
   19ea0:	pop	{pc}		; (ldr pc, [sp], #4)
   19ea4:	str	r4, [sp, #-8]!
   19ea8:	str	lr, [sp, #4]
   19eac:	mov	r4, r0
   19eb0:	bl	11168 <strlen@plt>
   19eb4:	add	r1, r0, #1
   19eb8:	mov	r0, r4
   19ebc:	bl	19df4 <__assert_fail@plt+0x8b24>
   19ec0:	ldr	r4, [sp]
   19ec4:	add	sp, sp, #4
   19ec8:	pop	{pc}		; (ldr pc, [sp], #4)
   19ecc:	str	r4, [sp, #-8]!
   19ed0:	str	lr, [sp, #4]
   19ed4:	movw	r3, #53556	; 0xd134
   19ed8:	movt	r3, #2
   19edc:	ldr	r4, [r3]
   19ee0:	mov	r2, #5
   19ee4:	movw	r1, #49192	; 0xc028
   19ee8:	movt	r1, #1
   19eec:	mov	r0, #0
   19ef0:	bl	11060 <dcgettext@plt>
   19ef4:	mov	r3, r0
   19ef8:	movw	r2, #47860	; 0xbaf4
   19efc:	movt	r2, #1
   19f00:	mov	r1, #0
   19f04:	mov	r0, r4
   19f08:	bl	110f0 <error@plt>
   19f0c:	bl	11294 <abort@plt>
   19f10:	str	r4, [sp, #-8]!
   19f14:	str	lr, [sp, #4]
   19f18:	orr	r1, r1, #512	; 0x200
   19f1c:	bl	15054 <__assert_fail@plt+0x3d84>
   19f20:	cmp	r0, #0
   19f24:	beq	19f34 <__assert_fail@plt+0x8c64>
   19f28:	ldr	r4, [sp]
   19f2c:	add	sp, sp, #4
   19f30:	pop	{pc}		; (ldr pc, [sp], #4)
   19f34:	bl	11180 <__errno_location@plt>
   19f38:	ldr	r3, [r0]
   19f3c:	cmp	r3, #22
   19f40:	beq	19f48 <__assert_fail@plt+0x8c78>
   19f44:	bl	19ecc <__assert_fail@plt+0x8bfc>
   19f48:	movw	r3, #49212	; 0xc03c
   19f4c:	movt	r3, #1
   19f50:	mov	r2, #41	; 0x29
   19f54:	movw	r1, #49224	; 0xc048
   19f58:	movt	r1, #1
   19f5c:	movw	r0, #49236	; 0xc054
   19f60:	movt	r0, #1
   19f64:	bl	112d0 <__assert_fail@plt>
   19f68:	ldr	r3, [r0, #48]	; 0x30
   19f6c:	and	r3, r3, #17
   19f70:	cmp	r3, #16
   19f74:	beq	19f98 <__assert_fail@plt+0x8cc8>
   19f78:	cmp	r3, #17
   19f7c:	beq	19f88 <__assert_fail@plt+0x8cb8>
   19f80:	mov	r0, #0
   19f84:	bx	lr
   19f88:	ldr	r0, [r1, #48]	; 0x30
   19f8c:	adds	r0, r0, #0
   19f90:	movne	r0, #1
   19f94:	bx	lr
   19f98:	mov	r0, #1
   19f9c:	bx	lr
   19fa0:	str	r4, [sp, #-8]!
   19fa4:	str	lr, [sp, #4]
   19fa8:	sub	sp, sp, #8
   19fac:	mov	r3, #0
   19fb0:	str	r3, [sp, #4]
   19fb4:	str	r3, [sp]
   19fb8:	movw	r3, #53648	; 0xd190
   19fbc:	movt	r3, #2
   19fc0:	ldr	r3, [r3]
   19fc4:	mov	r2, #10
   19fc8:	mov	r1, sp
   19fcc:	add	r0, sp, #4
   19fd0:	bl	10fd0 <__getdelim@plt>
   19fd4:	cmp	r0, #0
   19fd8:	movle	r4, #0
   19fdc:	ble	1a00c <__assert_fail@plt+0x8d3c>
   19fe0:	sub	r0, r0, #1
   19fe4:	ldr	r3, [sp, #4]
   19fe8:	ldrb	r2, [r3, r0]
   19fec:	cmp	r2, #10
   19ff0:	moveq	r2, #0
   19ff4:	strbeq	r2, [r3, r0]
   19ff8:	ldr	r0, [sp, #4]
   19ffc:	bl	111ec <rpmatch@plt>
   1a000:	cmp	r0, #0
   1a004:	movle	r4, #0
   1a008:	movgt	r4, #1
   1a00c:	ldr	r0, [sp, #4]
   1a010:	bl	13924 <__assert_fail@plt+0x2654>
   1a014:	mov	r0, r4
   1a018:	add	sp, sp, #8
   1a01c:	ldr	r4, [sp]
   1a020:	add	sp, sp, #4
   1a024:	pop	{pc}		; (ldr pc, [sp], #4)
   1a028:	strd	r4, [sp, #-16]!
   1a02c:	str	r6, [sp, #8]
   1a030:	str	lr, [sp, #12]
   1a034:	cmp	r1, #0
   1a038:	cmpne	r0, #0
   1a03c:	beq	1a078 <__assert_fail@plt+0x8da8>
   1a040:	mov	r2, r0
   1a044:	mov	r3, r1
   1a048:	umull	r4, r5, r0, r1
   1a04c:	adds	r1, r5, #0
   1a050:	movne	r1, #1
   1a054:	cmp	r4, #0
   1a058:	movlt	r1, #1
   1a05c:	cmp	r1, #0
   1a060:	beq	1a080 <__assert_fail@plt+0x8db0>
   1a064:	bl	11180 <__errno_location@plt>
   1a068:	mov	r3, #12
   1a06c:	str	r3, [r0]
   1a070:	mov	r0, #0
   1a074:	b	1a08c <__assert_fail@plt+0x8dbc>
   1a078:	mov	r3, #1
   1a07c:	mov	r2, r3
   1a080:	mov	r1, r3
   1a084:	mov	r0, r2
   1a088:	bl	10fac <calloc@plt>
   1a08c:	ldrd	r4, [sp]
   1a090:	ldr	r6, [sp, #8]
   1a094:	add	sp, sp, #12
   1a098:	pop	{pc}		; (ldr pc, [sp], #4)
   1a09c:	str	r4, [sp, #-8]!
   1a0a0:	str	lr, [sp, #4]
   1a0a4:	cmp	r0, #0
   1a0a8:	beq	1a0c4 <__assert_fail@plt+0x8df4>
   1a0ac:	bge	1a0c8 <__assert_fail@plt+0x8df8>
   1a0b0:	bl	11180 <__errno_location@plt>
   1a0b4:	mov	r3, #12
   1a0b8:	str	r3, [r0]
   1a0bc:	mov	r0, #0
   1a0c0:	b	1a0cc <__assert_fail@plt+0x8dfc>
   1a0c4:	mov	r0, #1
   1a0c8:	bl	11108 <malloc@plt>
   1a0cc:	ldr	r4, [sp]
   1a0d0:	add	sp, sp, #4
   1a0d4:	pop	{pc}		; (ldr pc, [sp], #4)
   1a0d8:	str	r4, [sp, #-8]!
   1a0dc:	str	lr, [sp, #4]
   1a0e0:	cmp	r0, #0
   1a0e4:	beq	1a108 <__assert_fail@plt+0x8e38>
   1a0e8:	cmp	r1, #0
   1a0ec:	beq	1a114 <__assert_fail@plt+0x8e44>
   1a0f0:	cmp	r1, #0
   1a0f4:	blt	1a120 <__assert_fail@plt+0x8e50>
   1a0f8:	bl	1106c <realloc@plt>
   1a0fc:	ldr	r4, [sp]
   1a100:	add	sp, sp, #4
   1a104:	pop	{pc}		; (ldr pc, [sp], #4)
   1a108:	mov	r0, r1
   1a10c:	bl	1a09c <__assert_fail@plt+0x8dcc>
   1a110:	b	1a0fc <__assert_fail@plt+0x8e2c>
   1a114:	bl	13924 <__assert_fail@plt+0x2654>
   1a118:	mov	r0, #0
   1a11c:	b	1a0fc <__assert_fail@plt+0x8e2c>
   1a120:	bl	11180 <__errno_location@plt>
   1a124:	mov	r3, #12
   1a128:	str	r3, [r0]
   1a12c:	mov	r0, #0
   1a130:	b	1a0fc <__assert_fail@plt+0x8e2c>
   1a134:	strd	r4, [sp, #-16]!
   1a138:	str	r6, [sp, #8]
   1a13c:	str	lr, [sp, #12]
   1a140:	mov	r5, r0
   1a144:	bl	110d8 <__fpending@plt>
   1a148:	mov	r6, r0
   1a14c:	ldr	r4, [r5]
   1a150:	and	r4, r4, #32
   1a154:	mov	r0, r5
   1a158:	bl	1a2cc <__assert_fail@plt+0x8ffc>
   1a15c:	cmp	r4, #0
   1a160:	bne	1a194 <__assert_fail@plt+0x8ec4>
   1a164:	cmp	r0, #0
   1a168:	beq	1a184 <__assert_fail@plt+0x8eb4>
   1a16c:	cmp	r6, #0
   1a170:	bne	1a1b0 <__assert_fail@plt+0x8ee0>
   1a174:	bl	11180 <__errno_location@plt>
   1a178:	ldr	r0, [r0]
   1a17c:	subs	r0, r0, #9
   1a180:	mvnne	r0, #0
   1a184:	ldrd	r4, [sp]
   1a188:	ldr	r6, [sp, #8]
   1a18c:	add	sp, sp, #12
   1a190:	pop	{pc}		; (ldr pc, [sp], #4)
   1a194:	cmp	r0, #0
   1a198:	bne	1a1b8 <__assert_fail@plt+0x8ee8>
   1a19c:	bl	11180 <__errno_location@plt>
   1a1a0:	mov	r3, #0
   1a1a4:	str	r3, [r0]
   1a1a8:	mvn	r0, #0
   1a1ac:	b	1a184 <__assert_fail@plt+0x8eb4>
   1a1b0:	mvn	r0, #0
   1a1b4:	b	1a184 <__assert_fail@plt+0x8eb4>
   1a1b8:	mvn	r0, #0
   1a1bc:	b	1a184 <__assert_fail@plt+0x8eb4>
   1a1c0:	mov	r2, #0
   1a1c4:	mov	r3, #0
   1a1c8:	strd	r2, [r0, #16]
   1a1cc:	movw	r3, #62998	; 0xf616
   1a1d0:	movt	r3, #149	; 0x95
   1a1d4:	str	r3, [r0, #24]
   1a1d8:	bx	lr
   1a1dc:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1a1e0:	strd	r6, [sp, #8]
   1a1e4:	strd	r8, [sp, #16]
   1a1e8:	str	sl, [sp, #24]
   1a1ec:	str	lr, [sp, #28]
   1a1f0:	movw	r3, #62998	; 0xf616
   1a1f4:	movt	r3, #149	; 0x95
   1a1f8:	ldr	r2, [r0, #24]
   1a1fc:	cmp	r2, r3
   1a200:	bne	1a25c <__assert_fail@plt+0x8f8c>
   1a204:	ldrd	r6, [r0, #16]
   1a208:	orrs	r3, r6, r7
   1a20c:	beq	1a2a8 <__assert_fail@plt+0x8fd8>
   1a210:	ldrd	r4, [r1, #96]	; 0x60
   1a214:	ldrd	r2, [r0]
   1a218:	cmp	r5, r3
   1a21c:	cmpeq	r4, r2
   1a220:	beq	1a27c <__assert_fail@plt+0x8fac>
   1a224:	adds	r8, r6, #1
   1a228:	adc	r9, r7, #0
   1a22c:	strd	r8, [r0, #16]
   1a230:	and	r2, r6, r8
   1a234:	and	r3, r7, r9
   1a238:	orrs	r3, r2, r3
   1a23c:	movne	r0, #0
   1a240:	beq	1a298 <__assert_fail@plt+0x8fc8>
   1a244:	ldrd	r4, [sp]
   1a248:	ldrd	r6, [sp, #8]
   1a24c:	ldrd	r8, [sp, #16]
   1a250:	ldr	sl, [sp, #24]
   1a254:	add	sp, sp, #28
   1a258:	pop	{pc}		; (ldr pc, [sp], #4)
   1a25c:	movw	r3, #49252	; 0xc064
   1a260:	movt	r3, #1
   1a264:	mov	r2, #60	; 0x3c
   1a268:	movw	r1, #49264	; 0xc070
   1a26c:	movt	r1, #1
   1a270:	movw	r0, #49284	; 0xc084
   1a274:	movt	r0, #1
   1a278:	bl	112d0 <__assert_fail@plt>
   1a27c:	ldrd	r4, [r1]
   1a280:	ldrd	r2, [r0, #8]
   1a284:	cmp	r5, r3
   1a288:	cmpeq	r4, r2
   1a28c:	moveq	r0, #1
   1a290:	bne	1a224 <__assert_fail@plt+0x8f54>
   1a294:	b	1a244 <__assert_fail@plt+0x8f74>
   1a298:	orrs	r3, r8, r9
   1a29c:	moveq	r0, #1
   1a2a0:	beq	1a244 <__assert_fail@plt+0x8f74>
   1a2a4:	b	1a2b4 <__assert_fail@plt+0x8fe4>
   1a2a8:	mov	r2, #1
   1a2ac:	mov	r3, #0
   1a2b0:	strd	r2, [r0, #16]
   1a2b4:	ldrd	r2, [r1]
   1a2b8:	strd	r2, [r0, #8]
   1a2bc:	ldrd	r2, [r1, #96]	; 0x60
   1a2c0:	strd	r2, [r0]
   1a2c4:	mov	r0, #0
   1a2c8:	b	1a244 <__assert_fail@plt+0x8f74>
   1a2cc:	strd	r4, [sp, #-16]!
   1a2d0:	str	r6, [sp, #8]
   1a2d4:	str	lr, [sp, #12]
   1a2d8:	sub	sp, sp, #8
   1a2dc:	mov	r4, r0
   1a2e0:	bl	111b0 <fileno@plt>
   1a2e4:	cmp	r0, #0
   1a2e8:	blt	1a360 <__assert_fail@plt+0x9090>
   1a2ec:	mov	r0, r4
   1a2f0:	bl	11120 <__freading@plt>
   1a2f4:	cmp	r0, #0
   1a2f8:	beq	1a32c <__assert_fail@plt+0x905c>
   1a2fc:	mov	r0, r4
   1a300:	bl	111b0 <fileno@plt>
   1a304:	mov	r3, #1
   1a308:	str	r3, [sp]
   1a30c:	mov	r2, #0
   1a310:	mov	r3, #0
   1a314:	bl	110c0 <lseek64@plt>
   1a318:	mvn	r2, #0
   1a31c:	mvn	r3, #0
   1a320:	cmp	r1, r3
   1a324:	cmpeq	r0, r2
   1a328:	beq	1a36c <__assert_fail@plt+0x909c>
   1a32c:	mov	r0, r4
   1a330:	bl	13648 <__assert_fail@plt+0x2378>
   1a334:	cmp	r0, #0
   1a338:	beq	1a36c <__assert_fail@plt+0x909c>
   1a33c:	bl	11180 <__errno_location@plt>
   1a340:	mov	r5, r0
   1a344:	ldr	r6, [r0]
   1a348:	mov	r0, r4
   1a34c:	bl	111c8 <fclose@plt>
   1a350:	cmp	r6, #0
   1a354:	strne	r6, [r5]
   1a358:	mvnne	r0, #0
   1a35c:	b	1a374 <__assert_fail@plt+0x90a4>
   1a360:	mov	r0, r4
   1a364:	bl	111c8 <fclose@plt>
   1a368:	b	1a374 <__assert_fail@plt+0x90a4>
   1a36c:	mov	r0, r4
   1a370:	bl	111c8 <fclose@plt>
   1a374:	add	sp, sp, #8
   1a378:	ldrd	r4, [sp]
   1a37c:	ldr	r6, [sp, #8]
   1a380:	add	sp, sp, #12
   1a384:	pop	{pc}		; (ldr pc, [sp], #4)
   1a388:	push	{r1, r2, r3}
   1a38c:	strd	r4, [sp, #-16]!
   1a390:	str	r6, [sp, #8]
   1a394:	str	lr, [sp, #12]
   1a398:	sub	sp, sp, #12
   1a39c:	mov	r5, r0
   1a3a0:	ldr	r1, [sp, #28]
   1a3a4:	add	r3, sp, #32
   1a3a8:	str	r3, [sp, #4]
   1a3ac:	cmp	r1, #0
   1a3b0:	beq	1a3f8 <__assert_fail@plt+0x9128>
   1a3b4:	movw	r3, #1030	; 0x406
   1a3b8:	cmp	r1, r3
   1a3bc:	beq	1a434 <__assert_fail@plt+0x9164>
   1a3c0:	cmp	r1, #11
   1a3c4:	beq	1a5e4 <__assert_fail@plt+0x9314>
   1a3c8:	bgt	1a570 <__assert_fail@plt+0x92a0>
   1a3cc:	cmp	r1, #3
   1a3d0:	beq	1a5e4 <__assert_fail@plt+0x9314>
   1a3d4:	ble	1a530 <__assert_fail@plt+0x9260>
   1a3d8:	cmp	r1, #8
   1a3dc:	beq	1a550 <__assert_fail@plt+0x9280>
   1a3e0:	ble	1a548 <__assert_fail@plt+0x9278>
   1a3e4:	cmp	r1, #9
   1a3e8:	beq	1a5e4 <__assert_fail@plt+0x9314>
   1a3ec:	cmp	r1, #10
   1a3f0:	bne	1a5a8 <__assert_fail@plt+0x92d8>
   1a3f4:	b	1a550 <__assert_fail@plt+0x9280>
   1a3f8:	ldr	r3, [sp, #4]
   1a3fc:	add	r2, r3, #4
   1a400:	str	r2, [sp, #4]
   1a404:	ldr	r2, [r3]
   1a408:	mov	r1, #0
   1a40c:	bl	111e0 <fcntl64@plt>
   1a410:	mov	r4, r0
   1a414:	mov	r0, r4
   1a418:	add	sp, sp, #12
   1a41c:	ldrd	r4, [sp]
   1a420:	ldr	r6, [sp, #8]
   1a424:	ldr	lr, [sp, #12]
   1a428:	add	sp, sp, #16
   1a42c:	add	sp, sp, #12
   1a430:	bx	lr
   1a434:	ldr	r3, [sp, #4]
   1a438:	add	r2, r3, #4
   1a43c:	str	r2, [sp, #4]
   1a440:	ldr	r6, [r3]
   1a444:	movw	r3, #54004	; 0xd2f4
   1a448:	movt	r3, #2
   1a44c:	ldr	r3, [r3]
   1a450:	cmp	r3, #0
   1a454:	blt	1a4bc <__assert_fail@plt+0x91ec>
   1a458:	mov	r2, r6
   1a45c:	movw	r1, #1030	; 0x406
   1a460:	bl	111e0 <fcntl64@plt>
   1a464:	subs	r4, r0, #0
   1a468:	blt	1a480 <__assert_fail@plt+0x91b0>
   1a46c:	movw	r3, #54004	; 0xd2f4
   1a470:	movt	r3, #2
   1a474:	mov	r2, #1
   1a478:	str	r2, [r3]
   1a47c:	b	1a414 <__assert_fail@plt+0x9144>
   1a480:	bl	11180 <__errno_location@plt>
   1a484:	ldr	r3, [r0]
   1a488:	cmp	r3, #22
   1a48c:	bne	1a46c <__assert_fail@plt+0x919c>
   1a490:	mov	r2, r6
   1a494:	mov	r1, #0
   1a498:	mov	r0, r5
   1a49c:	bl	111e0 <fcntl64@plt>
   1a4a0:	subs	r4, r0, #0
   1a4a4:	blt	1a414 <__assert_fail@plt+0x9144>
   1a4a8:	movw	r3, #54004	; 0xd2f4
   1a4ac:	movt	r3, #2
   1a4b0:	mvn	r2, #0
   1a4b4:	str	r2, [r3]
   1a4b8:	b	1a4e4 <__assert_fail@plt+0x9214>
   1a4bc:	mov	r2, r6
   1a4c0:	mov	r1, #0
   1a4c4:	bl	111e0 <fcntl64@plt>
   1a4c8:	subs	r4, r0, #0
   1a4cc:	blt	1a414 <__assert_fail@plt+0x9144>
   1a4d0:	movw	r3, #54004	; 0xd2f4
   1a4d4:	movt	r3, #2
   1a4d8:	ldr	r3, [r3]
   1a4dc:	cmn	r3, #1
   1a4e0:	bne	1a414 <__assert_fail@plt+0x9144>
   1a4e4:	mov	r1, #1
   1a4e8:	mov	r0, r4
   1a4ec:	bl	111e0 <fcntl64@plt>
   1a4f0:	subs	r2, r0, #0
   1a4f4:	blt	1a510 <__assert_fail@plt+0x9240>
   1a4f8:	orr	r2, r2, #1
   1a4fc:	mov	r1, #2
   1a500:	mov	r0, r4
   1a504:	bl	111e0 <fcntl64@plt>
   1a508:	cmn	r0, #1
   1a50c:	bne	1a414 <__assert_fail@plt+0x9144>
   1a510:	bl	11180 <__errno_location@plt>
   1a514:	mov	r5, r0
   1a518:	ldr	r6, [r0]
   1a51c:	mov	r0, r4
   1a520:	bl	112a0 <close@plt>
   1a524:	str	r6, [r5]
   1a528:	mvn	r4, #0
   1a52c:	b	1a414 <__assert_fail@plt+0x9144>
   1a530:	cmp	r1, #1
   1a534:	beq	1a5e4 <__assert_fail@plt+0x9314>
   1a538:	bgt	1a550 <__assert_fail@plt+0x9280>
   1a53c:	cmp	r1, #0
   1a540:	bne	1a5a8 <__assert_fail@plt+0x92d8>
   1a544:	b	1a550 <__assert_fail@plt+0x9280>
   1a548:	cmp	r1, #4
   1a54c:	bne	1a5a8 <__assert_fail@plt+0x92d8>
   1a550:	ldr	r3, [sp, #4]
   1a554:	add	r2, r3, #4
   1a558:	str	r2, [sp, #4]
   1a55c:	ldr	r2, [r3]
   1a560:	mov	r0, r5
   1a564:	bl	111e0 <fcntl64@plt>
   1a568:	mov	r4, r0
   1a56c:	b	1a414 <__assert_fail@plt+0x9144>
   1a570:	movw	r3, #1031	; 0x407
   1a574:	cmp	r1, r3
   1a578:	bgt	1a5c8 <__assert_fail@plt+0x92f8>
   1a57c:	movw	r3, #1030	; 0x406
   1a580:	cmp	r1, r3
   1a584:	bge	1a550 <__assert_fail@plt+0x9280>
   1a588:	movw	r3, #1025	; 0x401
   1a58c:	cmp	r1, r3
   1a590:	beq	1a5e4 <__assert_fail@plt+0x9314>
   1a594:	movw	r3, #1026	; 0x402
   1a598:	cmp	r1, r3
   1a59c:	beq	1a550 <__assert_fail@plt+0x9280>
   1a5a0:	cmp	r1, #1024	; 0x400
   1a5a4:	beq	1a550 <__assert_fail@plt+0x9280>
   1a5a8:	ldr	r3, [sp, #4]
   1a5ac:	add	r2, r3, #4
   1a5b0:	str	r2, [sp, #4]
   1a5b4:	ldr	r2, [r3]
   1a5b8:	mov	r0, r5
   1a5bc:	bl	111e0 <fcntl64@plt>
   1a5c0:	mov	r4, r0
   1a5c4:	b	1a414 <__assert_fail@plt+0x9144>
   1a5c8:	movw	r3, #1033	; 0x409
   1a5cc:	cmp	r1, r3
   1a5d0:	beq	1a550 <__assert_fail@plt+0x9280>
   1a5d4:	blt	1a5e4 <__assert_fail@plt+0x9314>
   1a5d8:	movw	r3, #1034	; 0x40a
   1a5dc:	cmp	r1, r3
   1a5e0:	bne	1a5a8 <__assert_fail@plt+0x92d8>
   1a5e4:	mov	r0, r5
   1a5e8:	bl	111e0 <fcntl64@plt>
   1a5ec:	mov	r4, r0
   1a5f0:	b	1a414 <__assert_fail@plt+0x9144>
   1a5f4:	push	{r1, r2, r3}
   1a5f8:	push	{lr}		; (str lr, [sp, #-4]!)
   1a5fc:	sub	sp, sp, #8
   1a600:	ldr	r1, [sp, #12]
   1a604:	tst	r1, #64	; 0x40
   1a608:	addne	r3, sp, #20
   1a60c:	strne	r3, [sp, #4]
   1a610:	ldrne	r2, [sp, #16]
   1a614:	moveq	r2, #0
   1a618:	bl	110fc <open64@plt>
   1a61c:	bl	193c4 <__assert_fail@plt+0x80f4>
   1a620:	add	sp, sp, #8
   1a624:	pop	{lr}		; (ldr lr, [sp], #4)
   1a628:	add	sp, sp, #12
   1a62c:	bx	lr
   1a630:	str	r4, [sp, #-8]!
   1a634:	str	lr, [sp, #4]
   1a638:	mov	r0, #14
   1a63c:	bl	1121c <nl_langinfo@plt>
   1a640:	cmp	r0, #0
   1a644:	beq	1a668 <__assert_fail@plt+0x9398>
   1a648:	ldrb	r2, [r0]
   1a64c:	movw	r3, #49308	; 0xc09c
   1a650:	movt	r3, #1
   1a654:	cmp	r2, #0
   1a658:	moveq	r0, r3
   1a65c:	ldr	r4, [sp]
   1a660:	add	sp, sp, #4
   1a664:	pop	{pc}		; (ldr pc, [sp], #4)
   1a668:	movw	r0, #49308	; 0xc09c
   1a66c:	movt	r0, #1
   1a670:	b	1a65c <__assert_fail@plt+0x938c>
   1a674:	strd	r4, [sp, #-20]!	; 0xffffffec
   1a678:	strd	r6, [sp, #8]
   1a67c:	str	lr, [sp, #16]
   1a680:	sub	sp, sp, #12
   1a684:	mov	r7, r1
   1a688:	mov	r5, r2
   1a68c:	subs	r6, r0, #0
   1a690:	addeq	r6, sp, #4
   1a694:	mov	r0, r6
   1a698:	bl	110e4 <mbrtowc@plt>
   1a69c:	mov	r4, r0
   1a6a0:	cmp	r5, #0
   1a6a4:	cmnne	r0, #3
   1a6a8:	bhi	1a6c4 <__assert_fail@plt+0x93f4>
   1a6ac:	mov	r0, r4
   1a6b0:	add	sp, sp, #12
   1a6b4:	ldrd	r4, [sp]
   1a6b8:	ldrd	r6, [sp, #8]
   1a6bc:	add	sp, sp, #16
   1a6c0:	pop	{pc}		; (ldr pc, [sp], #4)
   1a6c4:	mov	r0, #0
   1a6c8:	bl	1a740 <__assert_fail@plt+0x9470>
   1a6cc:	cmp	r0, #0
   1a6d0:	bne	1a6ac <__assert_fail@plt+0x93dc>
   1a6d4:	ldrb	r3, [r7]
   1a6d8:	str	r3, [r6]
   1a6dc:	mov	r4, #1
   1a6e0:	b	1a6ac <__assert_fail@plt+0x93dc>
   1a6e4:	str	r4, [sp, #-8]!
   1a6e8:	str	lr, [sp, #4]
   1a6ec:	umull	r2, r3, r1, r2
   1a6f0:	cmp	r3, #0
   1a6f4:	bne	1a70c <__assert_fail@plt+0x943c>
   1a6f8:	mov	r1, r2
   1a6fc:	bl	1a0d8 <__assert_fail@plt+0x8e08>
   1a700:	ldr	r4, [sp]
   1a704:	add	sp, sp, #4
   1a708:	pop	{pc}		; (ldr pc, [sp], #4)
   1a70c:	bl	11180 <__errno_location@plt>
   1a710:	mov	r3, #12
   1a714:	str	r3, [r0]
   1a718:	mov	r0, #0
   1a71c:	b	1a700 <__assert_fail@plt+0x9430>
   1a720:	str	r4, [sp, #-8]!
   1a724:	str	lr, [sp, #4]
   1a728:	mov	r2, #3
   1a72c:	mov	r1, #0
   1a730:	bl	1a388 <__assert_fail@plt+0x90b8>
   1a734:	ldr	r4, [sp]
   1a738:	add	sp, sp, #4
   1a73c:	pop	{pc}		; (ldr pc, [sp], #4)
   1a740:	push	{lr}		; (str lr, [sp, #-4]!)
   1a744:	sub	sp, sp, #268	; 0x10c
   1a748:	movw	r2, #257	; 0x101
   1a74c:	add	r1, sp, #4
   1a750:	bl	1a79c <__assert_fail@plt+0x94cc>
   1a754:	cmp	r0, #0
   1a758:	movne	r0, #0
   1a75c:	bne	1a794 <__assert_fail@plt+0x94c4>
   1a760:	movw	r1, #49316	; 0xc0a4
   1a764:	movt	r1, #1
   1a768:	add	r0, sp, #4
   1a76c:	bl	10fdc <strcmp@plt>
   1a770:	cmp	r0, #0
   1a774:	beq	1a790 <__assert_fail@plt+0x94c0>
   1a778:	movw	r1, #49320	; 0xc0a8
   1a77c:	movt	r1, #1
   1a780:	add	r0, sp, #4
   1a784:	bl	10fdc <strcmp@plt>
   1a788:	adds	r0, r0, #0
   1a78c:	movne	r0, #1
   1a790:	and	r0, r0, #1
   1a794:	add	sp, sp, #268	; 0x10c
   1a798:	pop	{pc}		; (ldr pc, [sp], #4)
   1a79c:	strd	r4, [sp, #-16]!
   1a7a0:	str	r6, [sp, #8]
   1a7a4:	str	lr, [sp, #12]
   1a7a8:	mov	r6, r1
   1a7ac:	mov	r4, r2
   1a7b0:	mov	r1, #0
   1a7b4:	bl	11204 <setlocale@plt>
   1a7b8:	subs	r5, r0, #0
   1a7bc:	beq	1a800 <__assert_fail@plt+0x9530>
   1a7c0:	mov	r0, r5
   1a7c4:	bl	11168 <strlen@plt>
   1a7c8:	cmp	r4, r0
   1a7cc:	bhi	1a81c <__assert_fail@plt+0x954c>
   1a7d0:	cmp	r4, #0
   1a7d4:	moveq	r0, #34	; 0x22
   1a7d8:	beq	1a830 <__assert_fail@plt+0x9560>
   1a7dc:	sub	r4, r4, #1
   1a7e0:	mov	r2, r4
   1a7e4:	mov	r1, r5
   1a7e8:	mov	r0, r6
   1a7ec:	bl	11030 <memcpy@plt>
   1a7f0:	mov	r3, #0
   1a7f4:	strb	r3, [r6, r4]
   1a7f8:	mov	r0, #34	; 0x22
   1a7fc:	b	1a830 <__assert_fail@plt+0x9560>
   1a800:	cmp	r4, #0
   1a804:	moveq	r0, #22
   1a808:	beq	1a830 <__assert_fail@plt+0x9560>
   1a80c:	mov	r3, #0
   1a810:	strb	r3, [r6]
   1a814:	mov	r0, #22
   1a818:	b	1a830 <__assert_fail@plt+0x9560>
   1a81c:	add	r2, r0, #1
   1a820:	mov	r1, r5
   1a824:	mov	r0, r6
   1a828:	bl	11030 <memcpy@plt>
   1a82c:	mov	r0, #0
   1a830:	ldrd	r4, [sp]
   1a834:	ldr	r6, [sp, #8]
   1a838:	add	sp, sp, #12
   1a83c:	pop	{pc}		; (ldr pc, [sp], #4)
   1a840:	str	r4, [sp, #-8]!
   1a844:	str	lr, [sp, #4]
   1a848:	mov	r1, #0
   1a84c:	bl	11204 <setlocale@plt>
   1a850:	ldr	r4, [sp]
   1a854:	add	sp, sp, #4
   1a858:	pop	{pc}		; (ldr pc, [sp], #4)
   1a85c:	cmp	r3, #0
   1a860:	cmpeq	r2, #0
   1a864:	bne	1a87c <__assert_fail@plt+0x95ac>
   1a868:	cmp	r1, #0
   1a86c:	cmpeq	r0, #0
   1a870:	mvnne	r1, #0
   1a874:	mvnne	r0, #0
   1a878:	b	1a898 <__assert_fail@plt+0x95c8>
   1a87c:	sub	sp, sp, #8
   1a880:	push	{sp, lr}
   1a884:	bl	1a8a8 <__assert_fail@plt+0x95d8>
   1a888:	ldr	lr, [sp, #4]
   1a88c:	add	sp, sp, #8
   1a890:	pop	{r2, r3}
   1a894:	bx	lr
   1a898:	push	{r1, lr}
   1a89c:	mov	r0, #8
   1a8a0:	bl	10fc4 <raise@plt>
   1a8a4:	pop	{r1, pc}
   1a8a8:	cmp	r1, r3
   1a8ac:	cmpeq	r0, r2
   1a8b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a8b4:	mov	r4, r0
   1a8b8:	movcc	r0, #0
   1a8bc:	mov	r5, r1
   1a8c0:	ldr	lr, [sp, #36]	; 0x24
   1a8c4:	movcc	r1, r0
   1a8c8:	bcc	1a9c4 <__assert_fail@plt+0x96f4>
   1a8cc:	cmp	r3, #0
   1a8d0:	clzeq	ip, r2
   1a8d4:	clzne	ip, r3
   1a8d8:	addeq	ip, ip, #32
   1a8dc:	cmp	r5, #0
   1a8e0:	clzeq	r1, r4
   1a8e4:	addeq	r1, r1, #32
   1a8e8:	clzne	r1, r5
   1a8ec:	sub	ip, ip, r1
   1a8f0:	sub	sl, ip, #32
   1a8f4:	lsl	r9, r3, ip
   1a8f8:	rsb	fp, ip, #32
   1a8fc:	orr	r9, r9, r2, lsl sl
   1a900:	orr	r9, r9, r2, lsr fp
   1a904:	lsl	r8, r2, ip
   1a908:	cmp	r5, r9
   1a90c:	cmpeq	r4, r8
   1a910:	movcc	r0, #0
   1a914:	movcc	r1, r0
   1a918:	bcc	1a934 <__assert_fail@plt+0x9664>
   1a91c:	mov	r0, #1
   1a920:	subs	r4, r4, r8
   1a924:	lsl	r1, r0, sl
   1a928:	orr	r1, r1, r0, lsr fp
   1a92c:	lsl	r0, r0, ip
   1a930:	sbc	r5, r5, r9
   1a934:	cmp	ip, #0
   1a938:	beq	1a9c4 <__assert_fail@plt+0x96f4>
   1a93c:	lsr	r6, r8, #1
   1a940:	orr	r6, r6, r9, lsl #31
   1a944:	lsr	r7, r9, #1
   1a948:	mov	r2, ip
   1a94c:	b	1a970 <__assert_fail@plt+0x96a0>
   1a950:	subs	r3, r4, r6
   1a954:	sbc	r8, r5, r7
   1a958:	adds	r3, r3, r3
   1a95c:	adc	r8, r8, r8
   1a960:	adds	r4, r3, #1
   1a964:	adc	r5, r8, #0
   1a968:	subs	r2, r2, #1
   1a96c:	beq	1a98c <__assert_fail@plt+0x96bc>
   1a970:	cmp	r5, r7
   1a974:	cmpeq	r4, r6
   1a978:	bcs	1a950 <__assert_fail@plt+0x9680>
   1a97c:	adds	r4, r4, r4
   1a980:	adc	r5, r5, r5
   1a984:	subs	r2, r2, #1
   1a988:	bne	1a970 <__assert_fail@plt+0x96a0>
   1a98c:	lsr	r3, r4, ip
   1a990:	orr	r3, r3, r5, lsl fp
   1a994:	lsr	r2, r5, ip
   1a998:	orr	r3, r3, r5, lsr sl
   1a99c:	adds	r0, r0, r4
   1a9a0:	mov	r4, r3
   1a9a4:	lsl	r3, r2, ip
   1a9a8:	orr	r3, r3, r4, lsl sl
   1a9ac:	lsl	ip, r4, ip
   1a9b0:	orr	r3, r3, r4, lsr fp
   1a9b4:	adc	r1, r1, r5
   1a9b8:	subs	r0, r0, ip
   1a9bc:	mov	r5, r2
   1a9c0:	sbc	r1, r1, r3
   1a9c4:	cmp	lr, #0
   1a9c8:	strdne	r4, [lr]
   1a9cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a9d0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a9d4:	mov	r7, r0
   1a9d8:	ldr	r6, [pc, #72]	; 1aa28 <__assert_fail@plt+0x9758>
   1a9dc:	ldr	r5, [pc, #72]	; 1aa2c <__assert_fail@plt+0x975c>
   1a9e0:	add	r6, pc, r6
   1a9e4:	add	r5, pc, r5
   1a9e8:	sub	r6, r6, r5
   1a9ec:	mov	r8, r1
   1a9f0:	mov	r9, r2
   1a9f4:	bl	10f80 <fstatfs64@plt-0x20>
   1a9f8:	asrs	r6, r6, #2
   1a9fc:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1aa00:	mov	r4, #0
   1aa04:	add	r4, r4, #1
   1aa08:	ldr	r3, [r5], #4
   1aa0c:	mov	r2, r9
   1aa10:	mov	r1, r8
   1aa14:	mov	r0, r7
   1aa18:	blx	r3
   1aa1c:	cmp	r6, r4
   1aa20:	bne	1aa04 <__assert_fail@plt+0x9734>
   1aa24:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1aa28:	andeq	r2, r1, ip, lsr #10
   1aa2c:	andeq	r2, r1, r4, lsr #10
   1aa30:	bx	lr
   1aa34:	ldr	r3, [pc, #12]	; 1aa48 <__assert_fail@plt+0x9778>
   1aa38:	mov	r1, #0
   1aa3c:	add	r3, pc, r3
   1aa40:	ldr	r2, [r3]
   1aa44:	b	1118c <__cxa_atexit@plt>
   1aa48:	andeq	r2, r1, r4, ror #13

Disassembly of section .fini:

0001aa4c <.fini>:
   1aa4c:	push	{r3, lr}
   1aa50:	pop	{r3, pc}
