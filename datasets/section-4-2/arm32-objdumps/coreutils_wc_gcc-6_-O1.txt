
../repos/coreutils/src/wc:     file format elf32-littlearm


Disassembly of section .init:

00011044 <.init>:
   11044:	push	{r3, lr}
   11048:	bl	113d4 <__assert_fail@plt+0x4c>
   1104c:	pop	{r3, pc}

Disassembly of section .plt:

00011050 <calloc@plt-0x14>:
   11050:	push	{lr}		; (str lr, [sp, #-4]!)
   11054:	ldr	lr, [pc, #4]	; 11060 <calloc@plt-0x4>
   11058:	add	lr, pc, lr
   1105c:	ldr	pc, [lr, #8]!
   11060:	andeq	r7, r1, r0, lsr #31

00011064 <calloc@plt>:
   11064:	add	ip, pc, #0, 12
   11068:	add	ip, ip, #94208	; 0x17000
   1106c:	ldr	pc, [ip, #4000]!	; 0xfa0

00011070 <fputs_unlocked@plt>:
   11070:	add	ip, pc, #0, 12
   11074:	add	ip, ip, #94208	; 0x17000
   11078:	ldr	pc, [ip, #3992]!	; 0xf98

0001107c <raise@plt>:
   1107c:	add	ip, pc, #0, 12
   11080:	add	ip, ip, #94208	; 0x17000
   11084:	ldr	pc, [ip, #3984]!	; 0xf90

00011088 <strcmp@plt>:
   11088:	add	ip, pc, #0, 12
   1108c:	add	ip, ip, #94208	; 0x17000
   11090:	ldr	pc, [ip, #3976]!	; 0xf88

00011094 <posix_fadvise64@plt>:
   11094:	add	ip, pc, #0, 12
   11098:	add	ip, ip, #94208	; 0x17000
   1109c:	ldr	pc, [ip, #3968]!	; 0xf80

000110a0 <read@plt>:
   110a0:	add	ip, pc, #0, 12
   110a4:	add	ip, ip, #94208	; 0x17000
   110a8:	ldr	pc, [ip, #3960]!	; 0xf78

000110ac <fflush@plt>:
   110ac:	add	ip, pc, #0, 12
   110b0:	add	ip, ip, #94208	; 0x17000
   110b4:	ldr	pc, [ip, #3952]!	; 0xf70

000110b8 <wcwidth@plt>:
   110b8:	add	ip, pc, #0, 12
   110bc:	add	ip, ip, #94208	; 0x17000
   110c0:	ldr	pc, [ip, #3944]!	; 0xf68

000110c4 <__memmove_chk@plt>:
   110c4:	add	ip, pc, #0, 12
   110c8:	add	ip, ip, #94208	; 0x17000
   110cc:	ldr	pc, [ip, #3936]!	; 0xf60

000110d0 <free@plt>:
   110d0:	add	ip, pc, #0, 12
   110d4:	add	ip, ip, #94208	; 0x17000
   110d8:	ldr	pc, [ip, #3928]!	; 0xf58

000110dc <ferror@plt>:
   110dc:	add	ip, pc, #0, 12
   110e0:	add	ip, ip, #94208	; 0x17000
   110e4:	ldr	pc, [ip, #3920]!	; 0xf50

000110e8 <_exit@plt>:
   110e8:	add	ip, pc, #0, 12
   110ec:	add	ip, ip, #94208	; 0x17000
   110f0:	ldr	pc, [ip, #3912]!	; 0xf48

000110f4 <memcpy@plt>:
   110f4:	add	ip, pc, #0, 12
   110f8:	add	ip, ip, #94208	; 0x17000
   110fc:	ldr	pc, [ip, #3904]!	; 0xf40

00011100 <mbsinit@plt>:
   11100:	add	ip, pc, #0, 12
   11104:	add	ip, ip, #94208	; 0x17000
   11108:	ldr	pc, [ip, #3896]!	; 0xf38

0001110c <memcmp@plt>:
   1110c:	add	ip, pc, #0, 12
   11110:	add	ip, ip, #94208	; 0x17000
   11114:	ldr	pc, [ip, #3888]!	; 0xf30

00011118 <fputc_unlocked@plt>:
   11118:	add	ip, pc, #0, 12
   1111c:	add	ip, ip, #94208	; 0x17000
   11120:	ldr	pc, [ip, #3880]!	; 0xf28

00011124 <dcgettext@plt>:
   11124:	add	ip, pc, #0, 12
   11128:	add	ip, ip, #94208	; 0x17000
   1112c:	ldr	pc, [ip, #3872]!	; 0xf20

00011130 <sysconf@plt>:
   11130:	add	ip, pc, #0, 12
   11134:	add	ip, ip, #94208	; 0x17000
   11138:	ldr	pc, [ip, #3864]!	; 0xf18

0001113c <realloc@plt>:
   1113c:	add	ip, pc, #0, 12
   11140:	add	ip, ip, #94208	; 0x17000
   11144:	ldr	pc, [ip, #3856]!	; 0xf10

00011148 <textdomain@plt>:
   11148:	add	ip, pc, #0, 12
   1114c:	add	ip, ip, #94208	; 0x17000
   11150:	ldr	pc, [ip, #3848]!	; 0xf08

00011154 <iswcntrl@plt>:
   11154:	add	ip, pc, #0, 12
   11158:	add	ip, ip, #94208	; 0x17000
   1115c:	ldr	pc, [ip, #3840]!	; 0xf00

00011160 <rawmemchr@plt>:
   11160:	add	ip, pc, #0, 12
   11164:	add	ip, ip, #94208	; 0x17000
   11168:	ldr	pc, [ip, #3832]!	; 0xef8

0001116c <iswprint@plt>:
   1116c:	add	ip, pc, #0, 12
   11170:	add	ip, ip, #94208	; 0x17000
   11174:	ldr	pc, [ip, #3824]!	; 0xef0

00011178 <__fxstat64@plt>:
   11178:	add	ip, pc, #0, 12
   1117c:	add	ip, ip, #94208	; 0x17000
   11180:	ldr	pc, [ip, #3816]!	; 0xee8

00011184 <fwrite@plt>:
   11184:	add	ip, pc, #0, 12
   11188:	add	ip, ip, #94208	; 0x17000
   1118c:	ldr	pc, [ip, #3808]!	; 0xee0

00011190 <lseek64@plt>:
   11190:	add	ip, pc, #0, 12
   11194:	add	ip, ip, #94208	; 0x17000
   11198:	ldr	pc, [ip, #3800]!	; 0xed8

0001119c <__ctype_get_mb_cur_max@plt>:
   1119c:	add	ip, pc, #0, 12
   111a0:	add	ip, ip, #94208	; 0x17000
   111a4:	ldr	pc, [ip, #3792]!	; 0xed0

000111a8 <__fpending@plt>:
   111a8:	add	ip, pc, #0, 12
   111ac:	add	ip, ip, #94208	; 0x17000
   111b0:	ldr	pc, [ip, #3784]!	; 0xec8

000111b4 <mbrtowc@plt>:
   111b4:	add	ip, pc, #0, 12
   111b8:	add	ip, ip, #94208	; 0x17000
   111bc:	ldr	pc, [ip, #3776]!	; 0xec0

000111c0 <error@plt>:
   111c0:	add	ip, pc, #0, 12
   111c4:	add	ip, ip, #94208	; 0x17000
   111c8:	ldr	pc, [ip, #3768]!	; 0xeb8

000111cc <open64@plt>:
   111cc:	add	ip, pc, #0, 12
   111d0:	add	ip, ip, #94208	; 0x17000
   111d4:	ldr	pc, [ip, #3760]!	; 0xeb0

000111d8 <getenv@plt>:
   111d8:	add	ip, pc, #0, 12
   111dc:	add	ip, ip, #94208	; 0x17000
   111e0:	ldr	pc, [ip, #3752]!	; 0xea8

000111e4 <sysinfo@plt>:
   111e4:	add	ip, pc, #0, 12
   111e8:	add	ip, ip, #94208	; 0x17000
   111ec:	ldr	pc, [ip, #3744]!	; 0xea0

000111f0 <malloc@plt>:
   111f0:	add	ip, pc, #0, 12
   111f4:	add	ip, ip, #94208	; 0x17000
   111f8:	ldr	pc, [ip, #3736]!	; 0xe98

000111fc <__libc_start_main@plt>:
   111fc:	add	ip, pc, #0, 12
   11200:	add	ip, ip, #94208	; 0x17000
   11204:	ldr	pc, [ip, #3728]!	; 0xe90

00011208 <__freading@plt>:
   11208:	add	ip, pc, #0, 12
   1120c:	add	ip, ip, #94208	; 0x17000
   11210:	ldr	pc, [ip, #3720]!	; 0xe88

00011214 <__gmon_start__@plt>:
   11214:	add	ip, pc, #0, 12
   11218:	add	ip, ip, #94208	; 0x17000
   1121c:	ldr	pc, [ip, #3712]!	; 0xe80

00011220 <getopt_long@plt>:
   11220:	add	ip, pc, #0, 12
   11224:	add	ip, ip, #94208	; 0x17000
   11228:	ldr	pc, [ip, #3704]!	; 0xe78

0001122c <__ctype_b_loc@plt>:
   1122c:	add	ip, pc, #0, 12
   11230:	add	ip, ip, #94208	; 0x17000
   11234:	ldr	pc, [ip, #3696]!	; 0xe70

00011238 <exit@plt>:
   11238:	add	ip, pc, #0, 12
   1123c:	add	ip, ip, #94208	; 0x17000
   11240:	ldr	pc, [ip, #3688]!	; 0xe68

00011244 <feof@plt>:
   11244:	add	ip, pc, #0, 12
   11248:	add	ip, ip, #94208	; 0x17000
   1124c:	ldr	pc, [ip, #3680]!	; 0xe60

00011250 <iswspace@plt>:
   11250:	add	ip, pc, #0, 12
   11254:	add	ip, ip, #94208	; 0x17000
   11258:	ldr	pc, [ip, #3672]!	; 0xe58

0001125c <strlen@plt>:
   1125c:	add	ip, pc, #0, 12
   11260:	add	ip, ip, #94208	; 0x17000
   11264:	ldr	pc, [ip, #3664]!	; 0xe50

00011268 <strchr@plt>:
   11268:	add	ip, pc, #0, 12
   1126c:	add	ip, ip, #94208	; 0x17000
   11270:	ldr	pc, [ip, #3656]!	; 0xe48

00011274 <getpagesize@plt>:
   11274:	add	ip, pc, #0, 12
   11278:	add	ip, ip, #94208	; 0x17000
   1127c:	ldr	pc, [ip, #3648]!	; 0xe40

00011280 <__errno_location@plt>:
   11280:	add	ip, pc, #0, 12
   11284:	add	ip, ip, #94208	; 0x17000
   11288:	ldr	pc, [ip, #3640]!	; 0xe38

0001128c <__cxa_atexit@plt>:
   1128c:	add	ip, pc, #0, 12
   11290:	add	ip, ip, #94208	; 0x17000
   11294:	ldr	pc, [ip, #3632]!	; 0xe30

00011298 <setvbuf@plt>:
   11298:	add	ip, pc, #0, 12
   1129c:	add	ip, ip, #94208	; 0x17000
   112a0:	ldr	pc, [ip, #3624]!	; 0xe28

000112a4 <memset@plt>:
   112a4:	add	ip, pc, #0, 12
   112a8:	add	ip, ip, #94208	; 0x17000
   112ac:	ldr	pc, [ip, #3616]!	; 0xe20

000112b0 <btowc@plt>:
   112b0:	add	ip, pc, #0, 12
   112b4:	add	ip, ip, #94208	; 0x17000
   112b8:	ldr	pc, [ip, #3608]!	; 0xe18

000112bc <fgetc@plt>:
   112bc:	add	ip, pc, #0, 12
   112c0:	add	ip, ip, #94208	; 0x17000
   112c4:	ldr	pc, [ip, #3600]!	; 0xe10

000112c8 <__printf_chk@plt>:
   112c8:	add	ip, pc, #0, 12
   112cc:	add	ip, ip, #94208	; 0x17000
   112d0:	ldr	pc, [ip, #3592]!	; 0xe08

000112d4 <fileno@plt>:
   112d4:	add	ip, pc, #0, 12
   112d8:	add	ip, ip, #94208	; 0x17000
   112dc:	ldr	pc, [ip, #3584]!	; 0xe00

000112e0 <__fprintf_chk@plt>:
   112e0:	add	ip, pc, #0, 12
   112e4:	add	ip, ip, #94208	; 0x17000
   112e8:	ldr	pc, [ip, #3576]!	; 0xdf8

000112ec <fclose@plt>:
   112ec:	add	ip, pc, #0, 12
   112f0:	add	ip, ip, #94208	; 0x17000
   112f4:	ldr	pc, [ip, #3568]!	; 0xdf0

000112f8 <fseeko64@plt>:
   112f8:	add	ip, pc, #0, 12
   112fc:	add	ip, ip, #94208	; 0x17000
   11300:	ldr	pc, [ip, #3560]!	; 0xde8

00011304 <__overflow@plt>:
   11304:	add	ip, pc, #0, 12
   11308:	add	ip, ip, #94208	; 0x17000
   1130c:	ldr	pc, [ip, #3552]!	; 0xde0

00011310 <setlocale@plt>:
   11310:	add	ip, pc, #0, 12
   11314:	add	ip, ip, #94208	; 0x17000
   11318:	ldr	pc, [ip, #3544]!	; 0xdd8

0001131c <strrchr@plt>:
   1131c:	add	ip, pc, #0, 12
   11320:	add	ip, ip, #94208	; 0x17000
   11324:	ldr	pc, [ip, #3536]!	; 0xdd0

00011328 <nl_langinfo@plt>:
   11328:	add	ip, pc, #0, 12
   1132c:	add	ip, ip, #94208	; 0x17000
   11330:	ldr	pc, [ip, #3528]!	; 0xdc8

00011334 <fopen64@plt>:
   11334:	add	ip, pc, #0, 12
   11338:	add	ip, ip, #94208	; 0x17000
   1133c:	ldr	pc, [ip, #3520]!	; 0xdc0

00011340 <bindtextdomain@plt>:
   11340:	add	ip, pc, #0, 12
   11344:	add	ip, ip, #94208	; 0x17000
   11348:	ldr	pc, [ip, #3512]!	; 0xdb8

0001134c <getdelim@plt>:
   1134c:	add	ip, pc, #0, 12
   11350:	add	ip, ip, #94208	; 0x17000
   11354:	ldr	pc, [ip, #3504]!	; 0xdb0

00011358 <__xstat64@plt>:
   11358:	add	ip, pc, #0, 12
   1135c:	add	ip, ip, #94208	; 0x17000
   11360:	ldr	pc, [ip, #3496]!	; 0xda8

00011364 <strncmp@plt>:
   11364:	add	ip, pc, #0, 12
   11368:	add	ip, ip, #94208	; 0x17000
   1136c:	ldr	pc, [ip, #3488]!	; 0xda0

00011370 <abort@plt>:
   11370:	add	ip, pc, #0, 12
   11374:	add	ip, ip, #94208	; 0x17000
   11378:	ldr	pc, [ip, #3480]!	; 0xd98

0001137c <close@plt>:
   1137c:	add	ip, pc, #0, 12
   11380:	add	ip, ip, #94208	; 0x17000
   11384:	ldr	pc, [ip, #3472]!	; 0xd90

00011388 <__assert_fail@plt>:
   11388:	add	ip, pc, #0, 12
   1138c:	add	ip, ip, #94208	; 0x17000
   11390:	ldr	pc, [ip, #3464]!	; 0xd88

Disassembly of section .text:

00011398 <_obstack_begin@@Base-0x524c>:
   11398:	mov	fp, #0
   1139c:	mov	lr, #0
   113a0:	pop	{r1}		; (ldr r1, [sp], #4)
   113a4:	mov	r2, sp
   113a8:	push	{r2}		; (str r2, [sp, #-4]!)
   113ac:	push	{r0}		; (str r0, [sp, #-4]!)
   113b0:	ldr	ip, [pc, #16]	; 113c8 <__assert_fail@plt+0x40>
   113b4:	push	{ip}		; (str ip, [sp, #-4]!)
   113b8:	ldr	r0, [pc, #12]	; 113cc <__assert_fail@plt+0x44>
   113bc:	ldr	r3, [pc, #12]	; 113d0 <__assert_fail@plt+0x48>
   113c0:	bl	111fc <__libc_start_main@plt>
   113c4:	bl	11370 <abort@plt>
   113c8:	strdeq	r7, [r1], -ip
   113cc:			; <UNDEFINED> instruction: 0x000126bc
   113d0:	muleq	r1, ip, r2
   113d4:	ldr	r3, [pc, #20]	; 113f0 <__assert_fail@plt+0x68>
   113d8:	ldr	r2, [pc, #20]	; 113f4 <__assert_fail@plt+0x6c>
   113dc:	add	r3, pc, r3
   113e0:	ldr	r2, [r3, r2]
   113e4:	cmp	r2, #0
   113e8:	bxeq	lr
   113ec:	b	11214 <__gmon_start__@plt>
   113f0:	andeq	r7, r1, ip, lsl ip
   113f4:	andeq	r0, r0, ip, lsl r1
   113f8:	ldr	r3, [pc, #28]	; 1141c <__assert_fail@plt+0x94>
   113fc:	ldr	r0, [pc, #28]	; 11420 <__assert_fail@plt+0x98>
   11400:	sub	r3, r3, r0
   11404:	cmp	r3, #6
   11408:	bxls	lr
   1140c:	ldr	r3, [pc, #16]	; 11424 <__assert_fail@plt+0x9c>
   11410:	cmp	r3, #0
   11414:	bxeq	lr
   11418:	bx	r3
   1141c:	andeq	r9, r2, r7, ror r1
   11420:	andeq	r9, r2, r4, ror r1
   11424:	andeq	r0, r0, r0
   11428:	ldr	r1, [pc, #36]	; 11454 <__assert_fail@plt+0xcc>
   1142c:	ldr	r0, [pc, #36]	; 11458 <__assert_fail@plt+0xd0>
   11430:	sub	r1, r1, r0
   11434:	asr	r1, r1, #2
   11438:	add	r1, r1, r1, lsr #31
   1143c:	asrs	r1, r1, #1
   11440:	bxeq	lr
   11444:	ldr	r3, [pc, #16]	; 1145c <__assert_fail@plt+0xd4>
   11448:	cmp	r3, #0
   1144c:	bxeq	lr
   11450:	bx	r3
   11454:	andeq	r9, r2, r4, ror r1
   11458:	andeq	r9, r2, r4, ror r1
   1145c:	andeq	r0, r0, r0
   11460:	push	{r4, lr}
   11464:	ldr	r4, [pc, #24]	; 11484 <__assert_fail@plt+0xfc>
   11468:	ldrb	r3, [r4]
   1146c:	cmp	r3, #0
   11470:	popne	{r4, pc}
   11474:	bl	113f8 <__assert_fail@plt+0x70>
   11478:	mov	r3, #1
   1147c:	strb	r3, [r4]
   11480:	pop	{r4, pc}
   11484:	muleq	r2, ip, r1
   11488:	ldr	r0, [pc, #40]	; 114b8 <__assert_fail@plt+0x130>
   1148c:	ldr	r3, [r0]
   11490:	cmp	r3, #0
   11494:	bne	1149c <__assert_fail@plt+0x114>
   11498:	b	11428 <__assert_fail@plt+0xa0>
   1149c:	ldr	r3, [pc, #24]	; 114bc <__assert_fail@plt+0x134>
   114a0:	cmp	r3, #0
   114a4:	beq	11498 <__assert_fail@plt+0x110>
   114a8:	push	{r4, lr}
   114ac:	blx	r3
   114b0:	pop	{r4, lr}
   114b4:	b	11428 <__assert_fail@plt+0xa0>
   114b8:	andeq	r8, r2, r4, lsl pc
   114bc:	andeq	r0, r0, r0
   114c0:	ldr	r3, [pc, #68]	; 1150c <__assert_fail@plt+0x184>
   114c4:	ldrb	r3, [r3]
   114c8:	cmp	r3, #0
   114cc:	bne	114fc <__assert_fail@plt+0x174>
   114d0:	ldr	r3, [pc, #56]	; 11510 <__assert_fail@plt+0x188>
   114d4:	cmp	r0, r3
   114d8:	cmpne	r0, #160	; 0xa0
   114dc:	beq	11504 <__assert_fail@plt+0x17c>
   114e0:	add	r3, r3, #89	; 0x59
   114e4:	ldr	r2, [pc, #40]	; 11514 <__assert_fail@plt+0x18c>
   114e8:	cmp	r0, r3
   114ec:	cmpne	r0, r2
   114f0:	moveq	r0, #1
   114f4:	movne	r0, #0
   114f8:	bx	lr
   114fc:	mov	r0, #0
   11500:	bx	lr
   11504:	mov	r0, #1
   11508:	bx	lr
   1150c:	andeq	r9, r2, r0, lsr #3
   11510:	andeq	r2, r0, r7
   11514:	andeq	r2, r0, pc, lsr #32
   11518:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1151c:	sub	sp, sp, #16384	; 0x4000
   11520:	sub	sp, sp, #52	; 0x34
   11524:	cmp	r3, #0
   11528:	cmpne	r2, #0
   1152c:	moveq	sl, #1
   11530:	movne	sl, #0
   11534:	str	sl, [sp, #24]
   11538:	moveq	r3, #0
   1153c:	streq	r3, [sp, #24]
   11540:	beq	11694 <__assert_fail@plt+0x30c>
   11544:	str	r3, [sp, #36]	; 0x24
   11548:	str	r2, [sp, #32]
   1154c:	str	r1, [sp, #20]
   11550:	str	r0, [sp, #28]
   11554:	mov	r2, #0
   11558:	mov	r3, #0
   1155c:	strd	r2, [sp, #8]
   11560:	strd	r2, [sp]
   11564:	add	r9, sp, #44	; 0x2c
   11568:	mov	r8, #10
   1156c:	ldr	fp, [pc, #304]	; 116a4 <__assert_fail@plt+0x31c>
   11570:	b	115fc <__assert_fail@plt+0x274>
   11574:	bl	11280 <__errno_location@plt>
   11578:	ldr	r4, [r0]
   1157c:	ldr	r2, [sp, #28]
   11580:	mov	r1, #3
   11584:	mov	r0, #0
   11588:	bl	15250 <__assert_fail@plt+0x3ec8>
   1158c:	mov	r3, r0
   11590:	ldr	r2, [pc, #272]	; 116a8 <__assert_fail@plt+0x320>
   11594:	mov	r1, r4
   11598:	mov	r0, #0
   1159c:	bl	111c0 <error@plt>
   115a0:	b	11694 <__assert_fail@plt+0x30c>
   115a4:	strb	r8, [r9, r7]
   115a8:	ldrd	r4, [sp]
   115ac:	mov	r0, r9
   115b0:	b	115c0 <__assert_fail@plt+0x238>
   115b4:	add	r0, r0, #1
   115b8:	adds	r4, r4, #1
   115bc:	adc	r5, r5, #0
   115c0:	mov	r1, r8
   115c4:	bl	11160 <rawmemchr@plt>
   115c8:	cmp	r6, r0
   115cc:	bhi	115b4 <__assert_fail@plt+0x22c>
   115d0:	ldrd	r0, [sp]
   115d4:	subs	r0, r4, r0
   115d8:	sbc	r1, r5, r1
   115dc:	umull	r3, r2, fp, r7
   115e0:	lsr	r2, r2, #3
   115e4:	mov	r3, #0
   115e8:	cmp	r1, r3
   115ec:	cmpeq	r0, r2
   115f0:	movls	sl, #1
   115f4:	movhi	sl, #0
   115f8:	strd	r4, [sp]
   115fc:	mov	r2, #16384	; 0x4000
   11600:	mov	r1, r9
   11604:	ldr	r0, [sp, #20]
   11608:	bl	156ec <__assert_fail@plt+0x4364>
   1160c:	subs	r7, r0, #0
   11610:	beq	11674 <__assert_fail@plt+0x2ec>
   11614:	cmn	r7, #1
   11618:	beq	11574 <__assert_fail@plt+0x1ec>
   1161c:	ldrd	r2, [sp, #8]
   11620:	adds	r2, r2, r7
   11624:	adc	r3, r3, #0
   11628:	strd	r2, [sp, #8]
   1162c:	add	r6, r9, r7
   11630:	cmp	sl, #0
   11634:	bne	115a4 <__assert_fail@plt+0x21c>
   11638:	cmp	r6, r9
   1163c:	beq	1166c <__assert_fail@plt+0x2e4>
   11640:	ldrd	r4, [sp]
   11644:	add	r2, sp, #44	; 0x2c
   11648:	ldrb	r3, [r2], #1
   1164c:	cmp	r3, #10
   11650:	movne	r3, #0
   11654:	moveq	r3, #1
   11658:	adds	r4, r4, r3
   1165c:	adc	r5, r5, #0
   11660:	cmp	r6, r2
   11664:	bne	11648 <__assert_fail@plt+0x2c0>
   11668:	b	115d0 <__assert_fail@plt+0x248>
   1166c:	ldrd	r4, [sp]
   11670:	b	115d0 <__assert_fail@plt+0x248>
   11674:	ldr	r1, [sp, #36]	; 0x24
   11678:	ldrd	r2, [sp, #8]
   1167c:	strd	r2, [r1]
   11680:	ldr	r1, [sp, #32]
   11684:	ldrd	r2, [sp]
   11688:	strd	r2, [r1]
   1168c:	mov	r3, #1
   11690:	str	r3, [sp, #24]
   11694:	ldr	r0, [sp, #24]
   11698:	add	sp, sp, #16384	; 0x4000
   1169c:	add	sp, sp, #52	; 0x34
   116a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   116a4:	stmhi	r8, {r0, r3, r7, fp, pc}
   116a8:	andeq	r7, r1, r8, lsr #23
   116ac:	push	{r4, r5, r6, r7, r8, lr}
   116b0:	sub	sp, sp, #24
   116b4:	mov	r6, r2
   116b8:	mov	r7, r3
   116bc:	ldr	r4, [sp, #72]	; 0x48
   116c0:	ldr	r3, [pc, #436]	; 1187c <__assert_fail@plt+0x4f4>
   116c4:	ldrb	r3, [r3, #1]
   116c8:	cmp	r3, #0
   116cc:	ldreq	r5, [pc, #428]	; 11880 <__assert_fail@plt+0x4f8>
   116d0:	bne	11784 <__assert_fail@plt+0x3fc>
   116d4:	ldr	r3, [pc, #416]	; 1187c <__assert_fail@plt+0x4f4>
   116d8:	ldrb	r3, [r3, #8]
   116dc:	cmp	r3, #0
   116e0:	bne	117b0 <__assert_fail@plt+0x428>
   116e4:	ldr	r3, [pc, #400]	; 1187c <__assert_fail@plt+0x4f4>
   116e8:	ldrb	r3, [r3, #9]
   116ec:	cmp	r3, #0
   116f0:	bne	117e4 <__assert_fail@plt+0x45c>
   116f4:	ldr	r3, [pc, #384]	; 1187c <__assert_fail@plt+0x4f4>
   116f8:	ldrb	r3, [r3, #10]
   116fc:	cmp	r3, #0
   11700:	bne	11814 <__assert_fail@plt+0x48c>
   11704:	ldr	r3, [pc, #368]	; 1187c <__assert_fail@plt+0x4f4>
   11708:	ldrb	r3, [r3, #11]
   1170c:	cmp	r3, #0
   11710:	bne	11844 <__assert_fail@plt+0x4bc>
   11714:	cmp	r4, #0
   11718:	beq	11754 <__assert_fail@plt+0x3cc>
   1171c:	mov	r1, #10
   11720:	mov	r0, r4
   11724:	bl	11268 <strchr@plt>
   11728:	cmp	r0, #0
   1172c:	beq	11744 <__assert_fail@plt+0x3bc>
   11730:	mov	r2, r4
   11734:	mov	r1, #3
   11738:	mov	r0, #0
   1173c:	bl	15250 <__assert_fail@plt+0x3ec8>
   11740:	mov	r4, r0
   11744:	mov	r2, r4
   11748:	ldr	r1, [pc, #308]	; 11884 <__assert_fail@plt+0x4fc>
   1174c:	mov	r0, #1
   11750:	bl	112c8 <__printf_chk@plt>
   11754:	ldr	r3, [pc, #300]	; 11888 <__assert_fail@plt+0x500>
   11758:	ldr	r0, [r3]
   1175c:	ldr	r3, [r0, #20]
   11760:	ldr	r2, [r0, #24]
   11764:	cmp	r3, r2
   11768:	addcc	r2, r3, #1
   1176c:	strcc	r2, [r0, #20]
   11770:	movcc	r2, #10
   11774:	strbcc	r2, [r3]
   11778:	bcs	11870 <__assert_fail@plt+0x4e8>
   1177c:	add	sp, sp, #24
   11780:	pop	{r4, r5, r6, r7, r8, pc}
   11784:	ldr	r3, [pc, #240]	; 1187c <__assert_fail@plt+0x4f4>
   11788:	ldr	r8, [r3, #4]
   1178c:	mov	r2, sp
   11790:	bl	135dc <__assert_fail@plt+0x2254>
   11794:	ldr	r5, [pc, #240]	; 1188c <__assert_fail@plt+0x504>
   11798:	mov	r3, r0
   1179c:	mov	r2, r8
   117a0:	add	r1, r5, #1
   117a4:	mov	r0, #1
   117a8:	bl	112c8 <__printf_chk@plt>
   117ac:	b	116d4 <__assert_fail@plt+0x34c>
   117b0:	ldr	r3, [pc, #196]	; 1187c <__assert_fail@plt+0x4f4>
   117b4:	ldr	r8, [r3, #4]
   117b8:	mov	r2, sp
   117bc:	mov	r0, r6
   117c0:	mov	r1, r7
   117c4:	bl	135dc <__assert_fail@plt+0x2254>
   117c8:	mov	r3, r0
   117cc:	mov	r2, r8
   117d0:	mov	r1, r5
   117d4:	mov	r0, #1
   117d8:	bl	112c8 <__printf_chk@plt>
   117dc:	ldr	r5, [pc, #168]	; 1188c <__assert_fail@plt+0x504>
   117e0:	b	116e4 <__assert_fail@plt+0x35c>
   117e4:	ldr	r3, [pc, #144]	; 1187c <__assert_fail@plt+0x4f4>
   117e8:	ldr	r6, [r3, #4]
   117ec:	mov	r2, sp
   117f0:	ldrd	r0, [sp, #48]	; 0x30
   117f4:	bl	135dc <__assert_fail@plt+0x2254>
   117f8:	mov	r3, r0
   117fc:	mov	r2, r6
   11800:	mov	r1, r5
   11804:	mov	r0, #1
   11808:	bl	112c8 <__printf_chk@plt>
   1180c:	ldr	r5, [pc, #120]	; 1188c <__assert_fail@plt+0x504>
   11810:	b	116f4 <__assert_fail@plt+0x36c>
   11814:	ldr	r3, [pc, #96]	; 1187c <__assert_fail@plt+0x4f4>
   11818:	ldr	r6, [r3, #4]
   1181c:	mov	r2, sp
   11820:	ldrd	r0, [sp, #56]	; 0x38
   11824:	bl	135dc <__assert_fail@plt+0x2254>
   11828:	mov	r3, r0
   1182c:	mov	r2, r6
   11830:	mov	r1, r5
   11834:	mov	r0, #1
   11838:	bl	112c8 <__printf_chk@plt>
   1183c:	ldr	r5, [pc, #72]	; 1188c <__assert_fail@plt+0x504>
   11840:	b	11704 <__assert_fail@plt+0x37c>
   11844:	ldr	r3, [pc, #48]	; 1187c <__assert_fail@plt+0x4f4>
   11848:	ldr	r6, [r3, #4]
   1184c:	mov	r2, sp
   11850:	ldrd	r0, [sp, #64]	; 0x40
   11854:	bl	135dc <__assert_fail@plt+0x2254>
   11858:	mov	r3, r0
   1185c:	mov	r2, r6
   11860:	mov	r1, r5
   11864:	mov	r0, #1
   11868:	bl	112c8 <__printf_chk@plt>
   1186c:	b	11714 <__assert_fail@plt+0x38c>
   11870:	mov	r1, #10
   11874:	bl	11304 <__overflow@plt>
   11878:	b	1177c <__assert_fail@plt+0x3f4>
   1187c:	andeq	r9, r2, r0, lsr #3
   11880:	andeq	r7, r1, r5, lsr #6
   11884:	andeq	r7, r1, ip, lsl #8
   11888:	muleq	r2, r4, r1
   1188c:	andeq	r7, r1, r4, lsr #6
   11890:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11894:	sub	sp, sp, #16384	; 0x4000
   11898:	sub	sp, sp, #140	; 0x8c
   1189c:	str	r0, [sp, #72]	; 0x48
   118a0:	mov	r6, r2
   118a4:	subs	r3, r1, #0
   118a8:	str	r3, [sp, #80]	; 0x50
   118ac:	ldrne	r3, [sp, #80]	; 0x50
   118b0:	strne	r3, [sp, #84]	; 0x54
   118b4:	beq	11a18 <__assert_fail@plt+0x690>
   118b8:	mov	r2, #0
   118bc:	mov	r3, #0
   118c0:	strd	r2, [sp, #112]	; 0x70
   118c4:	strd	r2, [sp, #120]	; 0x78
   118c8:	bl	1119c <__ctype_get_mb_cur_max@plt>
   118cc:	cmp	r0, #1
   118d0:	bls	11a30 <__assert_fail@plt+0x6a8>
   118d4:	ldr	r3, [pc, #2660]	; 12340 <__assert_fail@plt+0xfb8>
   118d8:	ldrb	r5, [r3, #10]
   118dc:	ldrb	r3, [r3, #9]
   118e0:	str	r3, [sp, #76]	; 0x4c
   118e4:	ldr	r3, [pc, #2644]	; 12340 <__assert_fail@plt+0xfb8>
   118e8:	ldrb	r3, [r3, #8]
   118ec:	str	r3, [sp, #68]	; 0x44
   118f0:	cmp	r3, #0
   118f4:	bne	1222c <__assert_fail@plt+0xea4>
   118f8:	ldr	r3, [pc, #2624]	; 12340 <__assert_fail@plt+0xfb8>
   118fc:	ldrb	r4, [r3, #11]
   11900:	eor	r3, r5, #1
   11904:	ldr	r2, [sp, #76]	; 0x4c
   11908:	orrs	r3, r3, r2
   1190c:	bne	11a4c <__assert_fail@plt+0x6c4>
   11910:	ldr	r3, [pc, #2600]	; 12340 <__assert_fail@plt+0xfb8>
   11914:	ldrb	r3, [r3, #1]
   11918:	orrs	r3, r4, r3
   1191c:	bne	11a4c <__assert_fail@plt+0x6c4>
   11920:	ldr	r3, [sp, #76]	; 0x4c
   11924:	eor	r3, r3, #1
   11928:	tst	r5, r3
   1192c:	beq	1224c <__assert_fail@plt+0xec4>
   11930:	ldr	r3, [r6]
   11934:	cmp	r3, #0
   11938:	ble	11950 <__assert_fail@plt+0x5c8>
   1193c:	add	r2, r6, #8
   11940:	ldr	r1, [sp, #72]	; 0x48
   11944:	mov	r0, #3
   11948:	bl	11178 <__fxstat64@plt>
   1194c:	str	r0, [r6]
   11950:	ldr	r3, [r6]
   11954:	cmp	r3, #0
   11958:	bne	11b5c <__assert_fail@plt+0x7d4>
   1195c:	ldr	r3, [r6, #24]
   11960:	and	r3, r3, #53248	; 0xd000
   11964:	cmp	r3, #32768	; 0x8000
   11968:	bne	11b5c <__assert_fail@plt+0x7d4>
   1196c:	ldrd	r4, [r6, #56]	; 0x38
   11970:	cmp	r4, #0
   11974:	sbcs	r3, r5, #0
   11978:	blt	11b5c <__assert_fail@plt+0x7d4>
   1197c:	add	r3, sp, #16384	; 0x4000
   11980:	add	r3, r3, #176	; 0xb0
   11984:	ldrd	r2, [r3]
   11988:	cmp	r2, #0
   1198c:	sbcs	r3, r3, #0
   11990:	blt	11a90 <__assert_fail@plt+0x708>
   11994:	ldr	r3, [pc, #2468]	; 12340 <__assert_fail@plt+0xfb8>
   11998:	ldr	r1, [r3, #12]
   1199c:	mov	r0, r4
   119a0:	bl	16b10 <_obstack_memory_used@@Base+0x314>
   119a4:	cmp	r1, #0
   119a8:	beq	11ab8 <__assert_fail@plt+0x730>
   119ac:	mov	r2, r4
   119b0:	mov	r3, #0
   119b4:	add	r1, sp, #16384	; 0x4000
   119b8:	add	r1, r1, #176	; 0xb0
   119bc:	ldrd	r0, [r1]
   119c0:	cmp	r4, r0
   119c4:	sbcs	r1, r3, r1
   119c8:	movlt	r2, #0
   119cc:	movlt	r3, #0
   119d0:	blt	119f0 <__assert_fail@plt+0x668>
   119d4:	add	r1, sp, #16384	; 0x4000
   119d8:	add	r1, r1, #176	; 0xb0
   119dc:	ldrd	r0, [r1]
   119e0:	subs	r0, r2, r0
   119e4:	sbc	r1, r3, r1
   119e8:	mov	r2, r0
   119ec:	mov	r3, r1
   119f0:	strd	r2, [sp, #112]	; 0x70
   119f4:	mov	r6, #0
   119f8:	mov	r7, #0
   119fc:	mov	sl, r6
   11a00:	mov	fp, r7
   11a04:	mov	r8, r6
   11a08:	mov	r9, r7
   11a0c:	mov	r3, #1
   11a10:	str	r3, [sp, #68]	; 0x44
   11a14:	b	12290 <__assert_fail@plt+0xf08>
   11a18:	mov	r2, #5
   11a1c:	ldr	r1, [pc, #2336]	; 12344 <__assert_fail@plt+0xfbc>
   11a20:	mov	r0, #0
   11a24:	bl	11124 <dcgettext@plt>
   11a28:	str	r0, [sp, #84]	; 0x54
   11a2c:	b	118b8 <__assert_fail@plt+0x530>
   11a30:	ldr	r3, [pc, #2312]	; 12340 <__assert_fail@plt+0xfb8>
   11a34:	ldrb	r5, [r3, #10]
   11a38:	cmp	r5, #0
   11a3c:	ldrbeq	r5, [r3, #9]
   11a40:	mov	r3, #0
   11a44:	str	r3, [sp, #76]	; 0x4c
   11a48:	b	118e4 <__assert_fail@plt+0x55c>
   11a4c:	mov	r3, #2
   11a50:	str	r3, [sp, #8]
   11a54:	mov	r2, #0
   11a58:	mov	r3, #0
   11a5c:	strd	r2, [sp]
   11a60:	ldr	r0, [sp, #72]	; 0x48
   11a64:	bl	13378 <__assert_fail@plt+0x1ff0>
   11a68:	ldr	r3, [sp, #76]	; 0x4c
   11a6c:	eor	r3, r3, #1
   11a70:	tst	r5, r3
   11a74:	beq	1224c <__assert_fail@plt+0xec4>
   11a78:	ldr	r3, [pc, #2240]	; 12340 <__assert_fail@plt+0xfb8>
   11a7c:	ldrb	r3, [r3, #1]
   11a80:	orr	r3, r4, r3
   11a84:	tst	r3, #255	; 0xff
   11a88:	beq	11930 <__assert_fail@plt+0x5a8>
   11a8c:	b	1224c <__assert_fail@plt+0xec4>
   11a90:	mov	r3, #1
   11a94:	str	r3, [sp]
   11a98:	mov	r2, #0
   11a9c:	mov	r3, #0
   11aa0:	ldr	r0, [sp, #72]	; 0x48
   11aa4:	bl	11190 <lseek64@plt>
   11aa8:	add	r3, sp, #16384	; 0x4000
   11aac:	add	r3, r3, #176	; 0xb0
   11ab0:	strd	r0, [r3]
   11ab4:	b	11994 <__assert_fail@plt+0x60c>
   11ab8:	ldr	r1, [r6, #64]	; 0x40
   11abc:	sub	r3, r1, #1
   11ac0:	cmn	r3, #-536870911	; 0xe0000001
   11ac4:	addls	r1, r1, #1
   11ac8:	ldrhi	r1, [pc, #2168]	; 12348 <__assert_fail@plt+0xfc0>
   11acc:	mov	r0, r4
   11ad0:	bl	16b10 <_obstack_memory_used@@Base+0x314>
   11ad4:	sub	r4, r4, r1
   11ad8:	mov	r5, #0
   11adc:	add	r3, sp, #16384	; 0x4000
   11ae0:	add	r3, r3, #176	; 0xb0
   11ae4:	ldrd	r2, [r3]
   11ae8:	cmp	r2, r4
   11aec:	sbcs	r3, r3, r5
   11af0:	movlt	r3, #1
   11af4:	movge	r3, #0
   11af8:	add	r2, sp, #16384	; 0x4000
   11afc:	add	r2, r2, #180	; 0xb4
   11b00:	ldr	r2, [r2]
   11b04:	cmp	r2, #0
   11b08:	movlt	r3, #0
   11b0c:	andge	r3, r3, #1
   11b10:	cmp	r3, #0
   11b14:	beq	11b5c <__assert_fail@plt+0x7d4>
   11b18:	mov	r3, #1
   11b1c:	str	r3, [sp]
   11b20:	mov	r2, r4
   11b24:	mov	r3, r5
   11b28:	ldr	r0, [sp, #72]	; 0x48
   11b2c:	bl	11190 <lseek64@plt>
   11b30:	cmp	r0, #0
   11b34:	sbcs	r3, r1, #0
   11b38:	blt	11b5c <__assert_fail@plt+0x7d4>
   11b3c:	add	r3, sp, #16384	; 0x4000
   11b40:	add	r3, r3, #176	; 0xb0
   11b44:	ldrd	r2, [r3]
   11b48:	subs	r2, r4, r2
   11b4c:	sbc	r3, r5, r3
   11b50:	mov	r4, r2
   11b54:	mov	r5, r3
   11b58:	strd	r4, [sp, #112]	; 0x70
   11b5c:	mov	r3, #2
   11b60:	str	r3, [sp, #8]
   11b64:	mov	r2, #0
   11b68:	mov	r3, #0
   11b6c:	strd	r2, [sp]
   11b70:	ldr	r0, [sp, #72]	; 0x48
   11b74:	bl	13378 <__assert_fail@plt+0x1ff0>
   11b78:	mov	r4, #16384	; 0x4000
   11b7c:	mov	r2, r4
   11b80:	add	r1, sp, #132	; 0x84
   11b84:	ldr	r0, [sp, #72]	; 0x48
   11b88:	bl	156ec <__assert_fail@plt+0x4364>
   11b8c:	cmp	r0, #0
   11b90:	beq	11bf8 <__assert_fail@plt+0x870>
   11b94:	cmn	r0, #1
   11b98:	beq	11bb0 <__assert_fail@plt+0x828>
   11b9c:	ldrd	r2, [sp, #112]	; 0x70
   11ba0:	adds	r2, r2, r0
   11ba4:	adc	r3, r3, #0
   11ba8:	strd	r2, [sp, #112]	; 0x70
   11bac:	b	11b7c <__assert_fail@plt+0x7f4>
   11bb0:	bl	11280 <__errno_location@plt>
   11bb4:	ldr	r4, [r0]
   11bb8:	ldr	r2, [sp, #84]	; 0x54
   11bbc:	mov	r1, #3
   11bc0:	mov	r0, #0
   11bc4:	bl	15250 <__assert_fail@plt+0x3ec8>
   11bc8:	mov	r3, r0
   11bcc:	ldr	r2, [pc, #1912]	; 1234c <__assert_fail@plt+0xfc4>
   11bd0:	mov	r1, r4
   11bd4:	mov	r0, #0
   11bd8:	bl	111c0 <error@plt>
   11bdc:	mov	r6, #0
   11be0:	mov	r7, #0
   11be4:	mov	sl, r6
   11be8:	mov	fp, r7
   11bec:	mov	r8, r6
   11bf0:	mov	r9, r7
   11bf4:	b	12290 <__assert_fail@plt+0xf08>
   11bf8:	mov	r6, #0
   11bfc:	mov	r7, #0
   11c00:	mov	sl, r6
   11c04:	mov	fp, r7
   11c08:	mov	r8, r6
   11c0c:	mov	r9, r7
   11c10:	mov	r3, #1
   11c14:	str	r3, [sp, #68]	; 0x44
   11c18:	b	12290 <__assert_fail@plt+0xf08>
   11c1c:	bl	1119c <__ctype_get_mb_cur_max@plt>
   11c20:	cmp	r0, #1
   11c24:	bls	1215c <__assert_fail@plt+0xdd4>
   11c28:	mov	r5, #0
   11c2c:	str	r5, [sp, #96]	; 0x60
   11c30:	str	r5, [sp, #100]	; 0x64
   11c34:	mov	r6, r5
   11c38:	mov	r8, r5
   11c3c:	mov	r2, #0
   11c40:	mov	r3, #0
   11c44:	strd	r2, [sp, #40]	; 0x28
   11c48:	strd	r2, [sp, #56]	; 0x38
   11c4c:	mov	sl, r2
   11c50:	mov	fp, r3
   11c54:	strd	r2, [sp, #32]
   11c58:	add	r3, sp, #104	; 0x68
   11c5c:	str	r3, [sp, #52]	; 0x34
   11c60:	b	11dc0 <__assert_fail@plt+0xa38>
   11c64:	bl	11280 <__errno_location@plt>
   11c68:	ldr	r4, [r0]
   11c6c:	ldr	r2, [sp, #84]	; 0x54
   11c70:	mov	r1, #3
   11c74:	mov	r0, #0
   11c78:	bl	15250 <__assert_fail@plt+0x3ec8>
   11c7c:	mov	r3, r0
   11c80:	ldr	r2, [pc, #1732]	; 1234c <__assert_fail@plt+0xfc4>
   11c84:	mov	r1, r4
   11c88:	mov	r0, #0
   11c8c:	bl	111c0 <error@plt>
   11c90:	mov	r3, #0
   11c94:	str	r3, [sp, #68]	; 0x44
   11c98:	ldrd	r2, [sp, #56]	; 0x38
   11c9c:	mov	r6, r2
   11ca0:	mov	r7, r3
   11ca4:	ldrd	r0, [sp, #40]	; 0x28
   11ca8:	cmp	r3, r1
   11cac:	cmpeq	r2, r0
   11cb0:	movcc	r6, r0
   11cb4:	movcc	r7, r1
   11cb8:	uxtb	r8, r5
   11cbc:	mov	r9, #0
   11cc0:	ldrd	r2, [sp, #32]
   11cc4:	adds	r2, r2, r8
   11cc8:	adc	r3, r3, r9
   11ccc:	mov	r8, r2
   11cd0:	mov	r9, r3
   11cd4:	b	12290 <__assert_fail@plt+0xf08>
   11cd8:	ldm	r9, {r0, r1}
   11cdc:	ldr	r3, [sp, #52]	; 0x34
   11ce0:	stm	r3, {r0, r1}
   11ce4:	mov	r3, r9
   11ce8:	mov	r2, r6
   11cec:	mov	r1, r7
   11cf0:	add	r0, sp, #92	; 0x5c
   11cf4:	bl	136e4 <__assert_fail@plt+0x235c>
   11cf8:	mov	r4, r0
   11cfc:	cmn	r0, #2
   11d00:	beq	11d84 <__assert_fail@plt+0x9fc>
   11d04:	cmn	r0, #1
   11d08:	beq	11e10 <__assert_fail@plt+0xa88>
   11d0c:	mov	r0, r9
   11d10:	bl	11100 <mbsinit@plt>
   11d14:	clz	r8, r0
   11d18:	lsr	r8, r8, #5
   11d1c:	cmp	r4, #0
   11d20:	bne	121b4 <__assert_fail@plt+0xe2c>
   11d24:	mov	r3, #0
   11d28:	str	r3, [sp, #92]	; 0x5c
   11d2c:	str	r3, [sp, #64]	; 0x40
   11d30:	mov	r4, #1
   11d34:	ldr	r0, [sp, #64]	; 0x40
   11d38:	bl	1116c <iswprint@plt>
   11d3c:	cmp	r0, #0
   11d40:	beq	11e70 <__assert_fail@plt+0xae8>
   11d44:	ldr	r3, [pc, #1524]	; 12340 <__assert_fail@plt+0xfb8>
   11d48:	ldrb	r3, [r3, #11]
   11d4c:	cmp	r3, #0
   11d50:	bne	11f70 <__assert_fail@plt+0xbe8>
   11d54:	ldr	r3, [sp, #92]	; 0x5c
   11d58:	str	r3, [sp, #64]	; 0x40
   11d5c:	mov	r0, r3
   11d60:	bl	11250 <iswspace@plt>
   11d64:	cmp	r0, #0
   11d68:	bne	11e54 <__assert_fail@plt+0xacc>
   11d6c:	ldr	r0, [sp, #64]	; 0x40
   11d70:	bl	114c0 <__assert_fail@plt+0x138>
   11d74:	cmp	r0, #0
   11d78:	bne	11e54 <__assert_fail@plt+0xacc>
   11d7c:	ldr	r5, [sp, #68]	; 0x44
   11d80:	b	11e70 <__assert_fail@plt+0xae8>
   11d84:	add	r3, sp, #96	; 0x60
   11d88:	ldr	r2, [sp, #52]	; 0x34
   11d8c:	ldm	r2, {r0, r1}
   11d90:	stm	r3, {r0, r1}
   11d94:	cmp	r6, #0
   11d98:	beq	11e08 <__assert_fail@plt+0xa80>
   11d9c:	cmp	r6, #16384	; 0x4000
   11da0:	addeq	r7, r7, #1
   11da4:	subeq	r6, r6, #1
   11da8:	ldr	r3, [pc, #1440]	; 12350 <__assert_fail@plt+0xfc8>
   11dac:	mov	r2, r6
   11db0:	mov	r1, r7
   11db4:	add	r0, sp, #132	; 0x84
   11db8:	bl	110c4 <__memmove_chk@plt>
   11dbc:	ldr	r8, [sp, #68]	; 0x44
   11dc0:	rsb	r2, r6, #16384	; 0x4000
   11dc4:	add	r3, sp, #132	; 0x84
   11dc8:	add	r1, r3, r6
   11dcc:	ldr	r0, [sp, #72]	; 0x48
   11dd0:	bl	156ec <__assert_fail@plt+0x4364>
   11dd4:	cmp	r0, #0
   11dd8:	beq	11c98 <__assert_fail@plt+0x910>
   11ddc:	cmn	r0, #1
   11de0:	beq	11c64 <__assert_fail@plt+0x8dc>
   11de4:	ldrd	r2, [sp, #112]	; 0x70
   11de8:	adds	r2, r2, r0
   11dec:	adc	r3, r3, #0
   11df0:	strd	r2, [sp, #112]	; 0x70
   11df4:	add	r6, r6, r0
   11df8:	add	r3, sp, #136	; 0x88
   11dfc:	add	r7, sp, #132	; 0x84
   11e00:	sub	r9, r3, #40	; 0x28
   11e04:	b	11e88 <__assert_fail@plt+0xb00>
   11e08:	ldr	r8, [sp, #68]	; 0x44
   11e0c:	b	11dc0 <__assert_fail@plt+0xa38>
   11e10:	add	r7, r7, #1
   11e14:	sub	r6, r6, #1
   11e18:	ldr	r8, [sp, #68]	; 0x44
   11e1c:	b	11e80 <__assert_fail@plt+0xaf8>
   11e20:	mov	r4, #1
   11e24:	ldrd	r2, [sp, #120]	; 0x78
   11e28:	adds	r2, r2, #1
   11e2c:	adc	r3, r3, #0
   11e30:	strd	r2, [sp, #120]	; 0x78
   11e34:	ldrd	r0, [sp, #56]	; 0x38
   11e38:	ldrd	r2, [sp, #40]	; 0x28
   11e3c:	cmp	r1, r3
   11e40:	cmpeq	r0, r2
   11e44:	strdcc	r2, [sp, #56]	; 0x38
   11e48:	mov	r2, #0
   11e4c:	mov	r3, #0
   11e50:	strd	r2, [sp, #40]	; 0x28
   11e54:	uxtb	r2, r5
   11e58:	mov	r3, #0
   11e5c:	ldrd	r0, [sp, #32]
   11e60:	adds	r0, r0, r2
   11e64:	adc	r1, r1, r3
   11e68:	strd	r0, [sp, #32]
   11e6c:	mov	r5, #0
   11e70:	add	r7, r7, r4
   11e74:	sub	r6, r6, r4
   11e78:	adds	sl, sl, #1
   11e7c:	adc	fp, fp, #0
   11e80:	cmp	r6, #0
   11e84:	beq	11dc0 <__assert_fail@plt+0xa38>
   11e88:	cmp	r8, #0
   11e8c:	bne	11cd8 <__assert_fail@plt+0x950>
   11e90:	ldrb	r3, [r7]
   11e94:	lsr	r2, r3, #5
   11e98:	and	r1, r3, #31
   11e9c:	ldr	r0, [pc, #1200]	; 12354 <__assert_fail@plt+0xfcc>
   11ea0:	ldr	r2, [r0, r2, lsl #2]
   11ea4:	lsr	r2, r2, r1
   11ea8:	tst	r2, #1
   11eac:	beq	11cd8 <__assert_fail@plt+0x950>
   11eb0:	str	r3, [sp, #92]	; 0x5c
   11eb4:	sub	r3, r3, #9
   11eb8:	cmp	r3, #23
   11ebc:	ldrls	pc, [pc, r3, lsl #2]
   11ec0:	b	11f94 <__assert_fail@plt+0xc0c>
   11ec4:	andeq	r1, r1, ip, lsr #30
   11ec8:	andeq	r1, r1, r0, lsr #28
   11ecc:	andeq	r1, r1, r0, ror #30
   11ed0:	andeq	r1, r1, r4, lsr #30
   11ed4:	andeq	r1, r1, r4, lsr #30
   11ed8:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   11edc:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   11ee0:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   11ee4:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   11ee8:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   11eec:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   11ef0:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   11ef4:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   11ef8:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   11efc:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   11f00:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   11f04:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   11f08:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   11f0c:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   11f10:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   11f14:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   11f18:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   11f1c:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   11f20:	andeq	r1, r1, r8, asr #30
   11f24:	mov	r4, #1
   11f28:	b	11e34 <__assert_fail@plt+0xaac>
   11f2c:	mov	r4, #1
   11f30:	ldrd	r2, [sp, #40]	; 0x28
   11f34:	bic	r2, r2, #7
   11f38:	adds	r0, r2, #8
   11f3c:	adc	r1, r3, #0
   11f40:	strd	r0, [sp, #40]	; 0x28
   11f44:	b	11e54 <__assert_fail@plt+0xacc>
   11f48:	mov	r4, #1
   11f4c:	ldrd	r2, [sp, #40]	; 0x28
   11f50:	adds	r2, r2, #1
   11f54:	adc	r3, r3, #0
   11f58:	strd	r2, [sp, #40]	; 0x28
   11f5c:	b	11e54 <__assert_fail@plt+0xacc>
   11f60:	mov	r4, #1
   11f64:	b	11e54 <__assert_fail@plt+0xacc>
   11f68:	mov	r4, #1
   11f6c:	b	11e54 <__assert_fail@plt+0xacc>
   11f70:	ldr	r0, [sp, #64]	; 0x40
   11f74:	bl	110b8 <wcwidth@plt>
   11f78:	cmp	r0, #0
   11f7c:	ble	11d54 <__assert_fail@plt+0x9cc>
   11f80:	ldrd	r2, [sp, #40]	; 0x28
   11f84:	adds	r2, r2, r0
   11f88:	adc	r3, r3, r0, asr #31
   11f8c:	strd	r2, [sp, #40]	; 0x28
   11f90:	b	11d54 <__assert_fail@plt+0x9cc>
   11f94:	bl	1122c <__ctype_b_loc@plt>
   11f98:	ldrb	r3, [r7]
   11f9c:	ldr	r2, [r0]
   11fa0:	lsl	r3, r3, #1
   11fa4:	ldrh	r3, [r2, r3]
   11fa8:	tst	r3, #16384	; 0x4000
   11fac:	moveq	r4, #1
   11fb0:	beq	11e70 <__assert_fail@plt+0xae8>
   11fb4:	ldrd	r0, [sp, #40]	; 0x28
   11fb8:	adds	r0, r0, #1
   11fbc:	adc	r1, r1, #0
   11fc0:	strd	r0, [sp, #40]	; 0x28
   11fc4:	tst	r3, #8192	; 0x2000
   11fc8:	bne	11f68 <__assert_fail@plt+0xbe0>
   11fcc:	ldr	r5, [sp, #68]	; 0x44
   11fd0:	mov	r4, #1
   11fd4:	b	11e70 <__assert_fail@plt+0xae8>
   11fd8:	bl	11280 <__errno_location@plt>
   11fdc:	ldr	r6, [r0]
   11fe0:	ldr	r2, [sp, #84]	; 0x54
   11fe4:	mov	r1, #3
   11fe8:	mov	r0, #0
   11fec:	bl	15250 <__assert_fail@plt+0x3ec8>
   11ff0:	mov	r3, r0
   11ff4:	ldr	r2, [pc, #848]	; 1234c <__assert_fail@plt+0xfc4>
   11ff8:	mov	r1, r6
   11ffc:	mov	r0, #0
   12000:	bl	111c0 <error@plt>
   12004:	mov	r3, #0
   12008:	str	r3, [sp, #68]	; 0x44
   1200c:	ldrd	r2, [sp, #32]
   12010:	mov	r6, r2
   12014:	mov	r7, r3
   12018:	cmp	r3, r5
   1201c:	cmpeq	r2, r4
   12020:	movcc	r6, r4
   12024:	movcc	r7, r5
   12028:	uxtb	sl, sl
   1202c:	mov	fp, #0
   12030:	adds	r8, r8, sl
   12034:	adc	r9, r9, fp
   12038:	mov	sl, #0
   1203c:	mov	fp, #0
   12040:	b	12290 <__assert_fail@plt+0xf08>
   12044:	ldrd	r2, [sp, #120]	; 0x78
   12048:	adds	r2, r2, #1
   1204c:	adc	r3, r3, #0
   12050:	strd	r2, [sp, #120]	; 0x78
   12054:	ldrd	r2, [sp, #32]
   12058:	cmp	r3, r5
   1205c:	cmpeq	r2, r4
   12060:	strdcc	r4, [sp, #32]
   12064:	mov	r4, #0
   12068:	mov	r5, #0
   1206c:	uxtb	r2, sl
   12070:	mov	r3, #0
   12074:	adds	r8, r8, r2
   12078:	adc	r9, r9, r3
   1207c:	mov	sl, #0
   12080:	cmp	fp, r6
   12084:	beq	12174 <__assert_fail@plt+0xdec>
   12088:	ldrb	r7, [fp], #1
   1208c:	sub	r3, r7, #9
   12090:	cmp	r3, #23
   12094:	ldrls	pc, [pc, r3, lsl #2]
   12098:	b	12118 <__assert_fail@plt+0xd90>
   1209c:	strdeq	r2, [r1], -ip
   120a0:	andeq	r2, r1, r4, asr #32
   120a4:	andeq	r2, r1, ip, rrx
   120a8:	andeq	r2, r1, r4, asr r0
   120ac:	andeq	r2, r1, r4, asr r0
   120b0:	andeq	r2, r1, r8, lsl r1
   120b4:	andeq	r2, r1, r8, lsl r1
   120b8:	andeq	r2, r1, r8, lsl r1
   120bc:	andeq	r2, r1, r8, lsl r1
   120c0:	andeq	r2, r1, r8, lsl r1
   120c4:	andeq	r2, r1, r8, lsl r1
   120c8:	andeq	r2, r1, r8, lsl r1
   120cc:	andeq	r2, r1, r8, lsl r1
   120d0:	andeq	r2, r1, r8, lsl r1
   120d4:	andeq	r2, r1, r8, lsl r1
   120d8:	andeq	r2, r1, r8, lsl r1
   120dc:	andeq	r2, r1, r8, lsl r1
   120e0:	andeq	r2, r1, r8, lsl r1
   120e4:	andeq	r2, r1, r8, lsl r1
   120e8:	andeq	r2, r1, r8, lsl r1
   120ec:	andeq	r2, r1, r8, lsl r1
   120f0:	andeq	r2, r1, r8, lsl r1
   120f4:	andeq	r2, r1, r8, lsl r1
   120f8:	andeq	r2, r1, ip, lsl #2
   120fc:	bic	r4, r4, #7
   12100:	adds	r4, r4, #8
   12104:	adc	r5, r5, #0
   12108:	b	1206c <__assert_fail@plt+0xce4>
   1210c:	adds	r4, r4, #1
   12110:	adc	r5, r5, #0
   12114:	b	1206c <__assert_fail@plt+0xce4>
   12118:	bl	1122c <__ctype_b_loc@plt>
   1211c:	ldr	r2, [r0]
   12120:	lsl	r3, r7, #1
   12124:	ldrh	r3, [r2, r3]
   12128:	tst	r3, #16384	; 0x4000
   1212c:	beq	12080 <__assert_fail@plt+0xcf8>
   12130:	adds	r4, r4, #1
   12134:	adc	r5, r5, #0
   12138:	tst	r3, #8192	; 0x2000
   1213c:	bne	1206c <__assert_fail@plt+0xce4>
   12140:	mov	r0, r7
   12144:	bl	112b0 <btowc@plt>
   12148:	bl	114c0 <__assert_fail@plt+0x138>
   1214c:	cmp	r0, #0
   12150:	bne	1206c <__assert_fail@plt+0xce4>
   12154:	ldr	sl, [sp, #68]	; 0x44
   12158:	b	12080 <__assert_fail@plt+0xcf8>
   1215c:	mov	r4, #0
   12160:	mov	r5, #0
   12164:	mov	sl, #0
   12168:	strd	r4, [sp, #32]
   1216c:	mov	r8, r4
   12170:	mov	r9, r5
   12174:	mov	r2, #16384	; 0x4000
   12178:	add	r1, sp, #132	; 0x84
   1217c:	ldr	r0, [sp, #72]	; 0x48
   12180:	bl	156ec <__assert_fail@plt+0x4364>
   12184:	cmp	r0, #0
   12188:	beq	1200c <__assert_fail@plt+0xc84>
   1218c:	cmn	r0, #1
   12190:	beq	11fd8 <__assert_fail@plt+0xc50>
   12194:	ldrd	r2, [sp, #112]	; 0x70
   12198:	adds	r2, r2, r0
   1219c:	adc	r3, r3, #0
   121a0:	strd	r2, [sp, #112]	; 0x70
   121a4:	add	r3, sp, #132	; 0x84
   121a8:	add	r6, r3, r0
   121ac:	mov	fp, r3
   121b0:	b	12088 <__assert_fail@plt+0xd00>
   121b4:	ldr	r3, [sp, #92]	; 0x5c
   121b8:	str	r3, [sp, #64]	; 0x40
   121bc:	sub	r3, r3, #9
   121c0:	cmp	r3, #23
   121c4:	ldrls	pc, [pc, r3, lsl #2]
   121c8:	b	11d34 <__assert_fail@plt+0x9ac>
   121cc:	andeq	r1, r1, r0, lsr pc
   121d0:	andeq	r1, r1, r4, lsr #28
   121d4:	andeq	r1, r1, r4, asr lr
   121d8:	andeq	r1, r1, r4, lsr lr
   121dc:	andeq	r1, r1, r4, lsr lr
   121e0:	andeq	r1, r1, r4, lsr sp
   121e4:	andeq	r1, r1, r4, lsr sp
   121e8:	andeq	r1, r1, r4, lsr sp
   121ec:	andeq	r1, r1, r4, lsr sp
   121f0:	andeq	r1, r1, r4, lsr sp
   121f4:	andeq	r1, r1, r4, lsr sp
   121f8:	andeq	r1, r1, r4, lsr sp
   121fc:	andeq	r1, r1, r4, lsr sp
   12200:	andeq	r1, r1, r4, lsr sp
   12204:	andeq	r1, r1, r4, lsr sp
   12208:	andeq	r1, r1, r4, lsr sp
   1220c:	andeq	r1, r1, r4, lsr sp
   12210:	andeq	r1, r1, r4, lsr sp
   12214:	andeq	r1, r1, r4, lsr sp
   12218:	andeq	r1, r1, r4, lsr sp
   1221c:	andeq	r1, r1, r4, lsr sp
   12220:	andeq	r1, r1, r4, lsr sp
   12224:	andeq	r1, r1, r4, lsr sp
   12228:	andeq	r1, r1, ip, asr #30
   1222c:	mov	r3, #2
   12230:	str	r3, [sp, #8]
   12234:	mov	r2, #0
   12238:	mov	r3, #0
   1223c:	strd	r2, [sp]
   12240:	ldr	r0, [sp, #72]	; 0x48
   12244:	bl	13378 <__assert_fail@plt+0x1ff0>
   12248:	ldr	r4, [sp, #68]	; 0x44
   1224c:	ldr	r3, [sp, #76]	; 0x4c
   12250:	orr	r3, r3, r4
   12254:	ands	r3, r3, #255	; 0xff
   12258:	str	r3, [sp, #68]	; 0x44
   1225c:	bne	11c1c <__assert_fail@plt+0x894>
   12260:	add	r3, sp, #112	; 0x70
   12264:	add	r2, sp, #120	; 0x78
   12268:	ldr	r1, [sp, #72]	; 0x48
   1226c:	ldr	r0, [sp, #84]	; 0x54
   12270:	bl	11518 <__assert_fail@plt+0x190>
   12274:	str	r0, [sp, #68]	; 0x44
   12278:	mov	r6, #0
   1227c:	mov	r7, #0
   12280:	mov	sl, r6
   12284:	mov	fp, r7
   12288:	mov	r8, r6
   1228c:	mov	r9, r7
   12290:	ldr	r3, [pc, #168]	; 12340 <__assert_fail@plt+0xfb8>
   12294:	ldrb	r3, [r3, #9]
   12298:	ldr	r2, [sp, #76]	; 0x4c
   1229c:	cmp	r2, r3
   122a0:	ldrdlt	sl, [sp, #112]	; 0x70
   122a4:	ldrd	r2, [sp, #120]	; 0x78
   122a8:	strd	r2, [sp, #32]
   122ac:	ldr	r3, [sp, #80]	; 0x50
   122b0:	str	r3, [sp, #24]
   122b4:	strd	r6, [sp, #16]
   122b8:	ldrd	r2, [sp, #112]	; 0x70
   122bc:	strd	r2, [sp, #8]
   122c0:	strd	sl, [sp]
   122c4:	mov	r2, r8
   122c8:	mov	r3, r9
   122cc:	ldrd	r0, [sp, #32]
   122d0:	bl	116ac <__assert_fail@plt+0x324>
   122d4:	ldr	ip, [pc, #100]	; 12340 <__assert_fail@plt+0xfb8>
   122d8:	ldrd	r2, [ip, #16]
   122dc:	ldrd	r0, [sp, #120]	; 0x78
   122e0:	adds	r2, r2, r0
   122e4:	adc	r3, r3, r1
   122e8:	strd	r2, [ip, #16]
   122ec:	ldrd	r2, [ip, #24]
   122f0:	adds	r8, r8, r2
   122f4:	adc	r9, r9, r3
   122f8:	strd	r8, [ip, #24]
   122fc:	ldrd	r2, [ip, #32]
   12300:	adds	r2, r2, sl
   12304:	adc	r3, r3, fp
   12308:	strd	r2, [ip, #32]
   1230c:	ldrd	r2, [ip, #40]	; 0x28
   12310:	ldrd	r0, [sp, #112]	; 0x70
   12314:	adds	r2, r2, r0
   12318:	adc	r3, r3, r1
   1231c:	strd	r2, [ip, #40]	; 0x28
   12320:	ldrd	r2, [ip, #48]	; 0x30
   12324:	cmp	r7, r3
   12328:	cmpeq	r6, r2
   1232c:	strdhi	r6, [ip, #48]	; 0x30
   12330:	ldr	r0, [sp, #68]	; 0x44
   12334:	add	sp, sp, #16384	; 0x4000
   12338:	add	sp, sp, #140	; 0x8c
   1233c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12340:	andeq	r9, r2, r0, lsr #3
   12344:	andeq	r7, r1, r0, lsl r4
   12348:	andeq	r0, r0, r1, lsl #4
   1234c:	andeq	r7, r1, r8, lsr #23
   12350:	andeq	r4, r0, r1
   12354:	andeq	r7, r1, ip, lsr #23
   12358:	push	{lr}		; (str lr, [sp, #-4]!)
   1235c:	sub	sp, sp, #60	; 0x3c
   12360:	subs	r6, r0, #0
   12364:	beq	123a0 <__assert_fail@plt+0x1018>
   12368:	ldr	r3, [pc, #756]	; 12664 <__assert_fail@plt+0x12dc>
   1236c:	ldr	r4, [r3]
   12370:	mov	r2, #5
   12374:	ldr	r1, [pc, #748]	; 12668 <__assert_fail@plt+0x12e0>
   12378:	mov	r0, #0
   1237c:	bl	11124 <dcgettext@plt>
   12380:	ldr	r3, [pc, #740]	; 1266c <__assert_fail@plt+0x12e4>
   12384:	ldr	r3, [r3]
   12388:	mov	r2, r0
   1238c:	mov	r1, #1
   12390:	mov	r0, r4
   12394:	bl	112e0 <__fprintf_chk@plt>
   12398:	mov	r0, r6
   1239c:	bl	11238 <exit@plt>
   123a0:	mov	r2, #5
   123a4:	ldr	r1, [pc, #708]	; 12670 <__assert_fail@plt+0x12e8>
   123a8:	mov	r0, #0
   123ac:	bl	11124 <dcgettext@plt>
   123b0:	ldr	r3, [pc, #692]	; 1266c <__assert_fail@plt+0x12e4>
   123b4:	ldr	r2, [r3]
   123b8:	mov	r3, r2
   123bc:	mov	r1, r0
   123c0:	mov	r0, #1
   123c4:	bl	112c8 <__printf_chk@plt>
   123c8:	mov	r2, #5
   123cc:	ldr	r1, [pc, #672]	; 12674 <__assert_fail@plt+0x12ec>
   123d0:	mov	r0, #0
   123d4:	bl	11124 <dcgettext@plt>
   123d8:	ldr	r4, [pc, #664]	; 12678 <__assert_fail@plt+0x12f0>
   123dc:	ldr	r1, [r4]
   123e0:	bl	11070 <fputs_unlocked@plt>
   123e4:	mov	r2, #5
   123e8:	ldr	r1, [pc, #652]	; 1267c <__assert_fail@plt+0x12f4>
   123ec:	mov	r0, #0
   123f0:	bl	11124 <dcgettext@plt>
   123f4:	ldr	r1, [r4]
   123f8:	bl	11070 <fputs_unlocked@plt>
   123fc:	mov	r2, #5
   12400:	ldr	r1, [pc, #632]	; 12680 <__assert_fail@plt+0x12f8>
   12404:	mov	r0, #0
   12408:	bl	11124 <dcgettext@plt>
   1240c:	ldr	r1, [r4]
   12410:	bl	11070 <fputs_unlocked@plt>
   12414:	mov	r2, #5
   12418:	ldr	r1, [pc, #612]	; 12684 <__assert_fail@plt+0x12fc>
   1241c:	mov	r0, #0
   12420:	bl	11124 <dcgettext@plt>
   12424:	ldr	r1, [r4]
   12428:	bl	11070 <fputs_unlocked@plt>
   1242c:	mov	r2, #5
   12430:	ldr	r1, [pc, #592]	; 12688 <__assert_fail@plt+0x1300>
   12434:	mov	r0, #0
   12438:	bl	11124 <dcgettext@plt>
   1243c:	ldr	r1, [r4]
   12440:	bl	11070 <fputs_unlocked@plt>
   12444:	mov	r2, #5
   12448:	ldr	r1, [pc, #572]	; 1268c <__assert_fail@plt+0x1304>
   1244c:	mov	r0, #0
   12450:	bl	11124 <dcgettext@plt>
   12454:	ldr	r1, [r4]
   12458:	bl	11070 <fputs_unlocked@plt>
   1245c:	mov	ip, sp
   12460:	ldr	lr, [pc, #552]	; 12690 <__assert_fail@plt+0x1308>
   12464:	ldm	lr!, {r0, r1, r2, r3}
   12468:	stmia	ip!, {r0, r1, r2, r3}
   1246c:	ldm	lr!, {r0, r1, r2, r3}
   12470:	stmia	ip!, {r0, r1, r2, r3}
   12474:	ldm	lr!, {r0, r1, r2, r3}
   12478:	stmia	ip!, {r0, r1, r2, r3}
   1247c:	ldm	lr, {r0, r1}
   12480:	stm	ip, {r0, r1}
   12484:	ldr	r1, [sp]
   12488:	cmp	r1, #0
   1248c:	moveq	r4, sp
   12490:	beq	124b8 <__assert_fail@plt+0x1130>
   12494:	mov	r4, sp
   12498:	ldr	r5, [pc, #500]	; 12694 <__assert_fail@plt+0x130c>
   1249c:	mov	r0, r5
   124a0:	bl	11088 <strcmp@plt>
   124a4:	cmp	r0, #0
   124a8:	beq	124b8 <__assert_fail@plt+0x1130>
   124ac:	ldr	r1, [r4, #8]!
   124b0:	cmp	r1, #0
   124b4:	bne	1249c <__assert_fail@plt+0x1114>
   124b8:	ldr	r4, [r4, #4]
   124bc:	cmp	r4, #0
   124c0:	beq	125d4 <__assert_fail@plt+0x124c>
   124c4:	mov	r2, #5
   124c8:	ldr	r1, [pc, #456]	; 12698 <__assert_fail@plt+0x1310>
   124cc:	mov	r0, #0
   124d0:	bl	11124 <dcgettext@plt>
   124d4:	ldr	r3, [pc, #448]	; 1269c <__assert_fail@plt+0x1314>
   124d8:	ldr	r2, [pc, #448]	; 126a0 <__assert_fail@plt+0x1318>
   124dc:	mov	r1, r0
   124e0:	mov	r0, #1
   124e4:	bl	112c8 <__printf_chk@plt>
   124e8:	mov	r1, #0
   124ec:	mov	r0, #5
   124f0:	bl	11310 <setlocale@plt>
   124f4:	cmp	r0, #0
   124f8:	beq	12510 <__assert_fail@plt+0x1188>
   124fc:	mov	r2, #3
   12500:	ldr	r1, [pc, #412]	; 126a4 <__assert_fail@plt+0x131c>
   12504:	bl	11364 <strncmp@plt>
   12508:	cmp	r0, #0
   1250c:	bne	12570 <__assert_fail@plt+0x11e8>
   12510:	mov	r2, #5
   12514:	ldr	r1, [pc, #396]	; 126a8 <__assert_fail@plt+0x1320>
   12518:	mov	r0, #0
   1251c:	bl	11124 <dcgettext@plt>
   12520:	ldr	r5, [pc, #364]	; 12694 <__assert_fail@plt+0x130c>
   12524:	mov	r3, r5
   12528:	ldr	r2, [pc, #364]	; 1269c <__assert_fail@plt+0x1314>
   1252c:	mov	r1, r0
   12530:	mov	r0, #1
   12534:	bl	112c8 <__printf_chk@plt>
   12538:	mov	r2, #5
   1253c:	ldr	r1, [pc, #360]	; 126ac <__assert_fail@plt+0x1324>
   12540:	mov	r0, #0
   12544:	bl	11124 <dcgettext@plt>
   12548:	mov	r1, r0
   1254c:	ldr	r2, [pc, #348]	; 126b0 <__assert_fail@plt+0x1328>
   12550:	ldr	r3, [pc, #348]	; 126b4 <__assert_fail@plt+0x132c>
   12554:	cmp	r4, r5
   12558:	movne	r3, r2
   1255c:	mov	r2, r4
   12560:	mov	r0, #1
   12564:	bl	112c8 <__printf_chk@plt>
   12568:	b	12398 <__assert_fail@plt+0x1010>
   1256c:	ldr	r4, [pc, #288]	; 12694 <__assert_fail@plt+0x130c>
   12570:	mov	r2, #5
   12574:	ldr	r1, [pc, #316]	; 126b8 <__assert_fail@plt+0x1330>
   12578:	mov	r0, #0
   1257c:	bl	11124 <dcgettext@plt>
   12580:	ldr	r3, [pc, #240]	; 12678 <__assert_fail@plt+0x12f0>
   12584:	ldr	r1, [r3]
   12588:	bl	11070 <fputs_unlocked@plt>
   1258c:	b	12510 <__assert_fail@plt+0x1188>
   12590:	mov	r2, #5
   12594:	ldr	r1, [pc, #268]	; 126a8 <__assert_fail@plt+0x1320>
   12598:	mov	r0, #0
   1259c:	bl	11124 <dcgettext@plt>
   125a0:	ldr	r4, [pc, #236]	; 12694 <__assert_fail@plt+0x130c>
   125a4:	mov	r3, r4
   125a8:	ldr	r2, [pc, #236]	; 1269c <__assert_fail@plt+0x1314>
   125ac:	mov	r1, r0
   125b0:	mov	r0, #1
   125b4:	bl	112c8 <__printf_chk@plt>
   125b8:	mov	r2, #5
   125bc:	ldr	r1, [pc, #232]	; 126ac <__assert_fail@plt+0x1324>
   125c0:	mov	r0, #0
   125c4:	bl	11124 <dcgettext@plt>
   125c8:	mov	r1, r0
   125cc:	ldr	r3, [pc, #224]	; 126b4 <__assert_fail@plt+0x132c>
   125d0:	b	1255c <__assert_fail@plt+0x11d4>
   125d4:	mov	r2, #5
   125d8:	ldr	r1, [pc, #184]	; 12698 <__assert_fail@plt+0x1310>
   125dc:	mov	r0, #0
   125e0:	bl	11124 <dcgettext@plt>
   125e4:	ldr	r3, [pc, #176]	; 1269c <__assert_fail@plt+0x1314>
   125e8:	ldr	r2, [pc, #176]	; 126a0 <__assert_fail@plt+0x1318>
   125ec:	mov	r1, r0
   125f0:	mov	r0, #1
   125f4:	bl	112c8 <__printf_chk@plt>
   125f8:	mov	r1, #0
   125fc:	mov	r0, #5
   12600:	bl	11310 <setlocale@plt>
   12604:	cmp	r0, #0
   12608:	beq	12590 <__assert_fail@plt+0x1208>
   1260c:	mov	r2, #3
   12610:	ldr	r1, [pc, #140]	; 126a4 <__assert_fail@plt+0x131c>
   12614:	bl	11364 <strncmp@plt>
   12618:	cmp	r0, #0
   1261c:	bne	1256c <__assert_fail@plt+0x11e4>
   12620:	mov	r2, #5
   12624:	ldr	r1, [pc, #124]	; 126a8 <__assert_fail@plt+0x1320>
   12628:	mov	r0, #0
   1262c:	bl	11124 <dcgettext@plt>
   12630:	ldr	r4, [pc, #92]	; 12694 <__assert_fail@plt+0x130c>
   12634:	mov	r3, r4
   12638:	ldr	r2, [pc, #92]	; 1269c <__assert_fail@plt+0x1314>
   1263c:	mov	r1, r0
   12640:	mov	r0, #1
   12644:	bl	112c8 <__printf_chk@plt>
   12648:	mov	r2, #5
   1264c:	ldr	r1, [pc, #88]	; 126ac <__assert_fail@plt+0x1324>
   12650:	mov	r0, #0
   12654:	bl	11124 <dcgettext@plt>
   12658:	mov	r1, r0
   1265c:	ldr	r3, [pc, #80]	; 126b4 <__assert_fail@plt+0x132c>
   12660:	b	1255c <__assert_fail@plt+0x11d4>
   12664:	andeq	r9, r2, r8, lsl #3
   12668:	andeq	r7, r1, r4, lsr #8
   1266c:	andeq	r9, r2, r8, ror #3
   12670:	andeq	r7, r1, ip, asr #8
   12674:	muleq	r1, r4, r4
   12678:	muleq	r2, r4, r1
   1267c:	andeq	r7, r1, r8, asr r5
   12680:	muleq	r1, r0, r5
   12684:	andeq	r7, r1, r0, asr #13
   12688:	strdeq	r7, [r1], -r0
   1268c:	andeq	r7, r1, r0, lsr #16
   12690:	andeq	r7, r1, ip, lsr #6
   12694:	andeq	r7, r1, r0, lsr #8
   12698:	andeq	r7, r1, r8, asr r8
   1269c:	andeq	r7, r1, r0, ror r8
   126a0:	muleq	r1, r8, r8
   126a4:	andeq	r7, r1, r8, lsr #17
   126a8:	strdeq	r7, [r1], -r4
   126ac:	andeq	r7, r1, r0, lsl r9
   126b0:	andeq	r7, r1, ip, ror #15
   126b4:	ldrdeq	r7, [r1], -ip
   126b8:	andeq	r7, r1, ip, lsr #17
   126bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   126c0:	vpush	{d8}
   126c4:	sub	sp, sp, #316	; 0x13c
   126c8:	str	r0, [sp, #36]	; 0x24
   126cc:	mov	r5, r1
   126d0:	ldr	r0, [r1]
   126d4:	bl	13868 <__assert_fail@plt+0x24e0>
   126d8:	ldr	r1, [pc, #1816]	; 12df8 <__assert_fail@plt+0x1a70>
   126dc:	mov	r0, #6
   126e0:	bl	11310 <setlocale@plt>
   126e4:	ldr	r6, [pc, #1808]	; 12dfc <__assert_fail@plt+0x1a74>
   126e8:	ldr	r1, [pc, #1808]	; 12e00 <__assert_fail@plt+0x1a78>
   126ec:	mov	r0, r6
   126f0:	bl	11340 <bindtextdomain@plt>
   126f4:	mov	r0, r6
   126f8:	bl	11148 <textdomain@plt>
   126fc:	ldr	r0, [pc, #1792]	; 12e04 <__assert_fail@plt+0x1a7c>
   12700:	bl	17300 <_obstack_memory_used@@Base+0xb04>
   12704:	bl	11274 <getpagesize@plt>
   12708:	ldr	r6, [pc, #1900]	; 12e7c <__assert_fail@plt+0x1af4>
   1270c:	str	r0, [r6, #12]
   12710:	mov	r3, #0
   12714:	mov	r2, #1
   12718:	mov	r1, r3
   1271c:	ldr	r0, [pc, #1764]	; 12e08 <__assert_fail@plt+0x1a80>
   12720:	ldr	r0, [r0]
   12724:	bl	11298 <setvbuf@plt>
   12728:	ldr	r0, [pc, #1756]	; 12e0c <__assert_fail@plt+0x1a84>
   1272c:	bl	111d8 <getenv@plt>
   12730:	adds	r0, r0, #0
   12734:	movne	r0, #1
   12738:	strb	r0, [r6]
   1273c:	mov	r3, #0
   12740:	strb	r3, [r6, #10]
   12744:	strb	r3, [r6, #9]
   12748:	strb	r3, [r6, #8]
   1274c:	strb	r3, [r6, #1]
   12750:	strb	r3, [r6, #11]
   12754:	mov	r0, #0
   12758:	mov	r1, #0
   1275c:	strd	r0, [r6, #48]	; 0x30
   12760:	strd	r0, [r6, #40]	; 0x28
   12764:	strd	r0, [r6, #32]
   12768:	strd	r0, [r6, #24]
   1276c:	strd	r0, [r6, #16]
   12770:	mov	sl, r3
   12774:	ldr	r7, [pc, #1684]	; 12e10 <__assert_fail@plt+0x1a88>
   12778:	ldr	r6, [pc, #1684]	; 12e14 <__assert_fail@plt+0x1a8c>
   1277c:	ldr	r9, [pc, #1784]	; 12e7c <__assert_fail@plt+0x1af4>
   12780:	mov	r8, #1
   12784:	ldr	r4, [pc, #1676]	; 12e18 <__assert_fail@plt+0x1a90>
   12788:	ldr	fp, [pc, #1676]	; 12e1c <__assert_fail@plt+0x1a94>
   1278c:	mov	r3, #0
   12790:	str	r3, [sp]
   12794:	mov	r3, r7
   12798:	mov	r2, r6
   1279c:	mov	r1, r5
   127a0:	ldr	r0, [sp, #36]	; 0x24
   127a4:	bl	11220 <getopt_long@plt>
   127a8:	cmn	r0, #1
   127ac:	beq	12880 <__assert_fail@plt+0x14f8>
   127b0:	cmp	r0, #108	; 0x6c
   127b4:	beq	12858 <__assert_fail@plt+0x14d0>
   127b8:	bgt	12824 <__assert_fail@plt+0x149c>
   127bc:	cmn	r0, #2
   127c0:	beq	12870 <__assert_fail@plt+0x14e8>
   127c4:	ble	127e0 <__assert_fail@plt+0x1458>
   127c8:	cmp	r0, #76	; 0x4c
   127cc:	beq	12868 <__assert_fail@plt+0x14e0>
   127d0:	cmp	r0, #99	; 0x63
   127d4:	bne	12878 <__assert_fail@plt+0x14f0>
   127d8:	strb	r8, [r9, #10]
   127dc:	b	1278c <__assert_fail@plt+0x1404>
   127e0:	cmn	r0, #3
   127e4:	bne	12878 <__assert_fail@plt+0x14f0>
   127e8:	mov	r4, #0
   127ec:	str	r4, [sp, #8]
   127f0:	ldr	r3, [pc, #1576]	; 12e20 <__assert_fail@plt+0x1a98>
   127f4:	str	r3, [sp, #4]
   127f8:	ldr	r3, [pc, #1572]	; 12e24 <__assert_fail@plt+0x1a9c>
   127fc:	str	r3, [sp]
   12800:	ldr	r3, [pc, #1568]	; 12e28 <__assert_fail@plt+0x1aa0>
   12804:	ldr	r3, [r3]
   12808:	ldr	r2, [pc, #1564]	; 12e2c <__assert_fail@plt+0x1aa4>
   1280c:	ldr	r1, [pc, #1564]	; 12e30 <__assert_fail@plt+0x1aa8>
   12810:	ldr	r0, [pc, #1520]	; 12e08 <__assert_fail@plt+0x1a80>
   12814:	ldr	r0, [r0]
   12818:	bl	15c18 <__assert_fail@plt+0x4890>
   1281c:	mov	r0, r4
   12820:	bl	11238 <exit@plt>
   12824:	cmp	r0, #119	; 0x77
   12828:	beq	12860 <__assert_fail@plt+0x14d8>
   1282c:	ble	12848 <__assert_fail@plt+0x14c0>
   12830:	cmp	r0, #256	; 0x100
   12834:	beq	1278c <__assert_fail@plt+0x1404>
   12838:	cmp	r0, r4
   1283c:	bne	12878 <__assert_fail@plt+0x14f0>
   12840:	ldr	sl, [fp]
   12844:	b	1278c <__assert_fail@plt+0x1404>
   12848:	cmp	r0, #109	; 0x6d
   1284c:	bne	12878 <__assert_fail@plt+0x14f0>
   12850:	strb	r8, [r9, #9]
   12854:	b	1278c <__assert_fail@plt+0x1404>
   12858:	strb	r8, [r9, #1]
   1285c:	b	1278c <__assert_fail@plt+0x1404>
   12860:	strb	r8, [r9, #8]
   12864:	b	1278c <__assert_fail@plt+0x1404>
   12868:	strb	r8, [r9, #11]
   1286c:	b	1278c <__assert_fail@plt+0x1404>
   12870:	mov	r0, #0
   12874:	bl	12358 <__assert_fail@plt+0xfd0>
   12878:	mov	r0, #1
   1287c:	bl	12358 <__assert_fail@plt+0xfd0>
   12880:	ldr	r3, [pc, #1524]	; 12e7c <__assert_fail@plt+0x1af4>
   12884:	ldrb	r3, [r3, #1]
   12888:	cmp	r3, #0
   1288c:	bne	128e0 <__assert_fail@plt+0x1558>
   12890:	ldr	r3, [pc, #1508]	; 12e7c <__assert_fail@plt+0x1af4>
   12894:	ldrb	r3, [r3, #8]
   12898:	cmp	r3, #0
   1289c:	bne	128e0 <__assert_fail@plt+0x1558>
   128a0:	ldr	r3, [pc, #1492]	; 12e7c <__assert_fail@plt+0x1af4>
   128a4:	ldrb	r3, [r3, #9]
   128a8:	cmp	r3, #0
   128ac:	bne	128e0 <__assert_fail@plt+0x1558>
   128b0:	ldr	r3, [pc, #1476]	; 12e7c <__assert_fail@plt+0x1af4>
   128b4:	ldrb	r3, [r3, #10]
   128b8:	cmp	r3, #0
   128bc:	bne	128e0 <__assert_fail@plt+0x1558>
   128c0:	ldr	r3, [pc, #1460]	; 12e7c <__assert_fail@plt+0x1af4>
   128c4:	ldrb	r3, [r3, #11]
   128c8:	cmp	r3, #0
   128cc:	ldreq	r3, [pc, #1448]	; 12e7c <__assert_fail@plt+0x1af4>
   128d0:	moveq	r2, #1
   128d4:	strbeq	r2, [r3, #10]
   128d8:	strbeq	r2, [r3, #8]
   128dc:	strbeq	r2, [r3, #1]
   128e0:	cmp	sl, #0
   128e4:	beq	12b28 <__assert_fail@plt+0x17a0>
   128e8:	ldr	r3, [pc, #1348]	; 12e34 <__assert_fail@plt+0x1aac>
   128ec:	ldr	r3, [r3]
   128f0:	ldr	r2, [sp, #36]	; 0x24
   128f4:	cmp	r2, r3
   128f8:	bgt	129a4 <__assert_fail@plt+0x161c>
   128fc:	ldr	r1, [pc, #1404]	; 12e80 <__assert_fail@plt+0x1af8>
   12900:	mov	r0, sl
   12904:	bl	11088 <strcmp@plt>
   12908:	cmp	r0, #0
   1290c:	bne	12a14 <__assert_fail@plt+0x168c>
   12910:	ldr	r3, [pc, #1312]	; 12e38 <__assert_fail@plt+0x1ab0>
   12914:	ldr	r4, [r3]
   12918:	mov	r0, r4
   1291c:	bl	112d4 <fileno@plt>
   12920:	add	r2, sp, #64	; 0x40
   12924:	mov	r1, r0
   12928:	mov	r0, #3
   1292c:	bl	11178 <__fxstat64@plt>
   12930:	cmp	r0, #0
   12934:	bne	12948 <__assert_fail@plt+0x15c0>
   12938:	ldr	r3, [sp, #80]	; 0x50
   1293c:	and	r3, r3, #61440	; 0xf000
   12940:	cmp	r3, #32768	; 0x8000
   12944:	beq	12a64 <__assert_fail@plt+0x16dc>
   12948:	mov	r0, r4
   1294c:	bl	1314c <__assert_fail@plt+0x1dc4>
   12950:	str	r0, [sp, #36]	; 0x24
   12954:	mov	r4, #0
   12958:	str	r4, [sp, #48]	; 0x30
   1295c:	mov	r5, r4
   12960:	ldr	r3, [sp, #36]	; 0x24
   12964:	cmp	r3, #0
   12968:	beq	12b60 <__assert_fail@plt+0x17d8>
   1296c:	cmp	r4, #0
   12970:	bne	12fc0 <__assert_fail@plt+0x1c38>
   12974:	mov	r1, #112	; 0x70
   12978:	mov	r0, #1
   1297c:	bl	15ddc <__assert_fail@plt+0x4a54>
   12980:	mov	fp, r0
   12984:	mov	r5, #1
   12988:	str	r5, [fp]
   1298c:	ldr	r3, [pc, #1256]	; 12e7c <__assert_fail@plt+0x1af4>
   12990:	str	r5, [r3, #4]
   12994:	mov	r7, #0
   12998:	mov	r6, #1
   1299c:	mov	r9, r3
   129a0:	b	13080 <__assert_fail@plt+0x1cf8>
   129a4:	mov	r2, #5
   129a8:	ldr	r1, [pc, #1164]	; 12e3c <__assert_fail@plt+0x1ab4>
   129ac:	mov	r0, #0
   129b0:	bl	11124 <dcgettext@plt>
   129b4:	mov	r4, r0
   129b8:	ldr	r3, [pc, #1140]	; 12e34 <__assert_fail@plt+0x1aac>
   129bc:	ldr	r3, [r3]
   129c0:	ldr	r1, [r5, r3, lsl #2]
   129c4:	mov	r0, #4
   129c8:	bl	15184 <__assert_fail@plt+0x3dfc>
   129cc:	mov	r3, r0
   129d0:	mov	r2, r4
   129d4:	mov	r1, #0
   129d8:	mov	r0, r1
   129dc:	bl	111c0 <error@plt>
   129e0:	ldr	r3, [pc, #1112]	; 12e40 <__assert_fail@plt+0x1ab8>
   129e4:	ldr	r4, [r3]
   129e8:	mov	r2, #5
   129ec:	ldr	r1, [pc, #1104]	; 12e44 <__assert_fail@plt+0x1abc>
   129f0:	mov	r0, #0
   129f4:	bl	11124 <dcgettext@plt>
   129f8:	mov	r3, r0
   129fc:	ldr	r2, [pc, #1092]	; 12e48 <__assert_fail@plt+0x1ac0>
   12a00:	mov	r1, #1
   12a04:	mov	r0, r4
   12a08:	bl	112e0 <__fprintf_chk@plt>
   12a0c:	mov	r0, #1
   12a10:	bl	12358 <__assert_fail@plt+0xfd0>
   12a14:	ldr	r1, [pc, #1072]	; 12e4c <__assert_fail@plt+0x1ac4>
   12a18:	mov	r0, sl
   12a1c:	bl	11334 <fopen64@plt>
   12a20:	subs	r4, r0, #0
   12a24:	bne	12918 <__assert_fail@plt+0x1590>
   12a28:	bl	11280 <__errno_location@plt>
   12a2c:	ldr	r4, [r0]
   12a30:	mov	r2, #5
   12a34:	ldr	r1, [pc, #1044]	; 12e50 <__assert_fail@plt+0x1ac8>
   12a38:	mov	r0, #0
   12a3c:	bl	11124 <dcgettext@plt>
   12a40:	mov	r5, r0
   12a44:	mov	r1, sl
   12a48:	mov	r0, #4
   12a4c:	bl	15184 <__assert_fail@plt+0x3dfc>
   12a50:	mov	r3, r0
   12a54:	mov	r2, r5
   12a58:	mov	r1, r4
   12a5c:	mov	r0, #1
   12a60:	bl	111c0 <error@plt>
   12a64:	ldrd	r0, [sp, #112]	; 0x70
   12a68:	bl	170c8 <_obstack_memory_used@@Base+0x8cc>
   12a6c:	vmov	d8, r0, r1
   12a70:	bl	137c8 <__assert_fail@plt+0x2440>
   12a74:	vldr	d7, [pc, #876]	; 12de8 <__assert_fail@plt+0x1a60>
   12a78:	vmul.f64	d7, d0, d7
   12a7c:	vldr	d6, [pc, #876]	; 12df0 <__assert_fail@plt+0x1a68>
   12a80:	vcmpe.f64	d7, d6
   12a84:	vmrs	APSR_nzcv, fpscr
   12a88:	ble	12ae4 <__assert_fail@plt+0x175c>
   12a8c:	vldr	d0, [pc, #860]	; 12df0 <__assert_fail@plt+0x1a68>
   12a90:	vcmpe.f64	d0, d8
   12a94:	vmrs	APSR_nzcv, fpscr
   12a98:	blt	12948 <__assert_fail@plt+0x15c0>
   12a9c:	add	r0, sp, #168	; 0xa8
   12aa0:	bl	154a4 <__assert_fail@plt+0x411c>
   12aa4:	add	r1, sp, #168	; 0xa8
   12aa8:	mov	r0, r4
   12aac:	bl	15550 <__assert_fail@plt+0x41c8>
   12ab0:	subs	r3, r0, #0
   12ab4:	str	r3, [sp, #48]	; 0x30
   12ab8:	beq	12af4 <__assert_fail@plt+0x176c>
   12abc:	mov	r0, r4
   12ac0:	bl	133d0 <__assert_fail@plt+0x2048>
   12ac4:	cmp	r0, #0
   12ac8:	bne	12af4 <__assert_fail@plt+0x176c>
   12acc:	ldr	r5, [sp, #172]	; 0xac
   12ad0:	ldr	r4, [sp, #168]	; 0xa8
   12ad4:	mov	r0, r5
   12ad8:	bl	13124 <__assert_fail@plt+0x1d9c>
   12adc:	str	r0, [sp, #36]	; 0x24
   12ae0:	b	12960 <__assert_fail@plt+0x15d8>
   12ae4:	bl	137c8 <__assert_fail@plt+0x2440>
   12ae8:	vldr	d7, [pc, #760]	; 12de8 <__assert_fail@plt+0x1a60>
   12aec:	vmul.f64	d0, d0, d7
   12af0:	b	12a90 <__assert_fail@plt+0x1708>
   12af4:	mov	r2, #5
   12af8:	ldr	r1, [pc, #852]	; 12e54 <__assert_fail@plt+0x1acc>
   12afc:	mov	r0, #0
   12b00:	bl	11124 <dcgettext@plt>
   12b04:	mov	r4, r0
   12b08:	mov	r1, sl
   12b0c:	mov	r0, #4
   12b10:	bl	15184 <__assert_fail@plt+0x3dfc>
   12b14:	mov	r3, r0
   12b18:	mov	r2, r4
   12b1c:	mov	r1, #0
   12b20:	mov	r0, #1
   12b24:	bl	111c0 <error@plt>
   12b28:	ldr	r3, [pc, #772]	; 12e34 <__assert_fail@plt+0x1aac>
   12b2c:	ldr	r3, [r3]
   12b30:	ldr	r2, [sp, #36]	; 0x24
   12b34:	cmp	r2, r3
   12b38:	addgt	r5, r5, r3, lsl #2
   12b3c:	subgt	r4, r2, r3
   12b40:	ldrle	r5, [pc, #784]	; 12e58 <__assert_fail@plt+0x1ad0>
   12b44:	movle	r4, #1
   12b48:	mov	r0, r5
   12b4c:	bl	13124 <__assert_fail@plt+0x1d9c>
   12b50:	str	r0, [sp, #36]	; 0x24
   12b54:	mov	r3, #0
   12b58:	str	r3, [sp, #48]	; 0x30
   12b5c:	b	12960 <__assert_fail@plt+0x15d8>
   12b60:	bl	16288 <__assert_fail@plt+0x4f00>
   12b64:	ldr	r2, [pc, #784]	; 12e7c <__assert_fail@plt+0x1af4>
   12b68:	ldrb	r3, [r2, #1]
   12b6c:	ldrb	r1, [r2, #8]
   12b70:	add	r3, r3, r1
   12b74:	ldrb	r1, [r2, #9]
   12b78:	add	r3, r3, r1
   12b7c:	ldrb	r1, [r2, #10]
   12b80:	add	r3, r3, r1
   12b84:	ldrb	r2, [r2, #11]
   12b88:	add	r3, r3, r2
   12b8c:	cmp	r3, #1
   12b90:	bne	12fd8 <__assert_fail@plt+0x1c50>
   12b94:	b	12984 <__assert_fail@plt+0x15fc>
   12b98:	mov	r2, r7
   12b9c:	mov	r1, #0
   12ba0:	mov	r0, r9
   12ba4:	bl	11178 <__fxstat64@plt>
   12ba8:	str	r0, [r7, #-8]
   12bac:	add	r6, r6, #1
   12bb0:	add	r7, r7, #112	; 0x70
   12bb4:	cmp	r4, r6
   12bb8:	beq	12fe8 <__assert_fail@plt+0x1c60>
   12bbc:	ldr	r8, [r5, r6, lsl #2]
   12bc0:	cmp	r8, #0
   12bc4:	beq	12b98 <__assert_fail@plt+0x1810>
   12bc8:	ldr	r1, [pc, #688]	; 12e80 <__assert_fail@plt+0x1af8>
   12bcc:	mov	r0, r8
   12bd0:	bl	11088 <strcmp@plt>
   12bd4:	cmp	r0, #0
   12bd8:	beq	12b98 <__assert_fail@plt+0x1810>
   12bdc:	mov	r2, r7
   12be0:	mov	r1, r8
   12be4:	mov	r0, r9
   12be8:	bl	11358 <__xstat64@plt>
   12bec:	b	12ba8 <__assert_fail@plt+0x1820>
   12bf0:	add	ip, ip, #112	; 0x70
   12bf4:	cmp	r6, ip
   12bf8:	beq	12c2c <__assert_fail@plt+0x18a4>
   12bfc:	ldr	r3, [ip]
   12c00:	cmp	r3, #0
   12c04:	bne	12bf0 <__assert_fail@plt+0x1868>
   12c08:	ldr	r3, [ip, #24]
   12c0c:	and	r3, r3, #61440	; 0xf000
   12c10:	cmp	r3, #32768	; 0x8000
   12c14:	movne	r8, lr
   12c18:	bne	12bf0 <__assert_fail@plt+0x1868>
   12c1c:	ldrd	r2, [ip, #56]	; 0x38
   12c20:	adds	r0, r0, r2
   12c24:	adc	r1, r1, r3
   12c28:	b	12bf0 <__assert_fail@plt+0x1868>
   12c2c:	mov	r5, #1
   12c30:	mov	r6, #10
   12c34:	mov	r7, #0
   12c38:	b	12c4c <__assert_fail@plt+0x18c4>
   12c3c:	add	r5, r5, #1
   12c40:	mov	r2, r6
   12c44:	mov	r3, r7
   12c48:	bl	17128 <_obstack_memory_used@@Base+0x92c>
   12c4c:	cmp	r1, #0
   12c50:	cmpeq	r0, #9
   12c54:	bhi	12c3c <__assert_fail@plt+0x18b4>
   12c58:	cmp	r5, r8
   12c5c:	movlt	r5, r8
   12c60:	b	1298c <__assert_fail@plt+0x1604>
   12c64:	ldr	r3, [sp, #64]	; 0x40
   12c68:	cmp	r3, #3
   12c6c:	beq	12d78 <__assert_fail@plt+0x19f0>
   12c70:	cmp	r3, #4
   12c74:	beq	12c94 <__assert_fail@plt+0x190c>
   12c78:	cmp	r3, #2
   12c7c:	beq	12f3c <__assert_fail@plt+0x1bb4>
   12c80:	ldr	r3, [pc, #468]	; 12e5c <__assert_fail@plt+0x1ad4>
   12c84:	ldr	r2, [pc, #468]	; 12e60 <__assert_fail@plt+0x1ad8>
   12c88:	ldr	r1, [pc, #468]	; 12e64 <__assert_fail@plt+0x1adc>
   12c8c:	ldr	r0, [pc, #468]	; 12e68 <__assert_fail@plt+0x1ae0>
   12c90:	bl	11388 <__assert_fail@plt>
   12c94:	bl	11280 <__errno_location@plt>
   12c98:	ldr	r4, [r0]
   12c9c:	mov	r2, #5
   12ca0:	ldr	r1, [pc, #452]	; 12e6c <__assert_fail@plt+0x1ae4>
   12ca4:	mov	r0, #0
   12ca8:	bl	11124 <dcgettext@plt>
   12cac:	mov	r5, r0
   12cb0:	mov	r2, sl
   12cb4:	mov	r1, #3
   12cb8:	mov	r0, #0
   12cbc:	bl	15250 <__assert_fail@plt+0x3ec8>
   12cc0:	mov	r3, r0
   12cc4:	mov	r2, r5
   12cc8:	mov	r1, r4
   12ccc:	mov	r0, #0
   12cd0:	bl	111c0 <error@plt>
   12cd4:	mov	r6, #0
   12cd8:	ldr	r3, [sp, #48]	; 0x30
   12cdc:	cmp	r3, #0
   12ce0:	bne	12f90 <__assert_fail@plt+0x1c08>
   12ce4:	ldr	r0, [sp, #36]	; 0x24
   12ce8:	bl	1321c <__assert_fail@plt+0x1e94>
   12cec:	cmp	r0, #1
   12cf0:	bls	12d48 <__assert_fail@plt+0x19c0>
   12cf4:	ldr	r3, [pc, #384]	; 12e7c <__assert_fail@plt+0x1af4>
   12cf8:	ldrd	r0, [r3, #16]
   12cfc:	strd	r0, [sp, #40]	; 0x28
   12d00:	ldrd	r4, [r3, #24]
   12d04:	strd	r4, [sp, #48]	; 0x30
   12d08:	ldrd	r8, [r3, #32]
   12d0c:	strd	r8, [sp, #56]	; 0x38
   12d10:	ldrd	r8, [r3, #40]	; 0x28
   12d14:	ldrd	r4, [r3, #48]	; 0x30
   12d18:	mov	r2, #5
   12d1c:	ldr	r1, [pc, #332]	; 12e70 <__assert_fail@plt+0x1ae8>
   12d20:	mov	r0, #0
   12d24:	bl	11124 <dcgettext@plt>
   12d28:	str	r0, [sp, #24]
   12d2c:	strd	r4, [sp, #16]
   12d30:	strd	r8, [sp, #8]
   12d34:	ldrd	r8, [sp, #56]	; 0x38
   12d38:	strd	r8, [sp]
   12d3c:	ldrd	r2, [sp, #48]	; 0x30
   12d40:	ldrd	r0, [sp, #40]	; 0x28
   12d44:	bl	116ac <__assert_fail@plt+0x324>
   12d48:	ldr	r0, [sp, #36]	; 0x24
   12d4c:	bl	1323c <__assert_fail@plt+0x1eb4>
   12d50:	mov	r0, fp
   12d54:	bl	134dc <__assert_fail@plt+0x2154>
   12d58:	ldr	r3, [pc, #284]	; 12e7c <__assert_fail@plt+0x1af4>
   12d5c:	ldrb	r3, [r3, #60]	; 0x3c
   12d60:	cmp	r3, #0
   12d64:	bne	12f9c <__assert_fail@plt+0x1c14>
   12d68:	eor	r0, r6, #1
   12d6c:	add	sp, sp, #316	; 0x13c
   12d70:	vpop	{d8}
   12d74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12d78:	bl	16288 <__assert_fail@plt+0x4f00>
   12d7c:	mov	r2, #5
   12d80:	ldr	r1, [pc, #236]	; 12e74 <__assert_fail@plt+0x1aec>
   12d84:	bl	11124 <dcgettext@plt>
   12d88:	mov	r6, r0
   12d8c:	mov	r1, r5
   12d90:	mov	r0, #4
   12d94:	bl	15184 <__assert_fail@plt+0x3dfc>
   12d98:	mov	r3, r0
   12d9c:	mov	r2, r6
   12da0:	mov	r1, #0
   12da4:	mov	r0, r1
   12da8:	bl	111c0 <error@plt>
   12dac:	ldrb	r3, [r5]
   12db0:	cmp	r3, #0
   12db4:	movne	r6, #0
   12db8:	beq	130d0 <__assert_fail@plt+0x1d48>
   12dbc:	b	13070 <__assert_fail@plt+0x1ce8>
   12dc0:	mov	r2, #5
   12dc4:	ldr	r1, [pc, #184]	; 12e84 <__assert_fail@plt+0x1afc>
   12dc8:	mov	r0, #0
   12dcc:	bl	11124 <dcgettext@plt>
   12dd0:	mov	r3, r0
   12dd4:	ldr	r2, [pc, #156]	; 12e78 <__assert_fail@plt+0x1af0>
   12dd8:	mov	r1, #0
   12ddc:	mov	r0, r1
   12de0:	bl	111c0 <error@plt>
   12de4:	b	1311c <__assert_fail@plt+0x1d94>
   12de8:	andeq	r0, r0, r0
   12dec:	svccc	0x00e00000
   12df0:	andeq	r0, r0, r0
   12df4:	cmnmi	r4, r0
   12df8:	andeq	r7, r1, ip, ror #15
   12dfc:	muleq	r1, ip, r8
   12e00:	andeq	r7, r1, r4, asr #18
   12e04:	andeq	r3, r1, r4, lsl #5
   12e08:	muleq	r2, r4, r1
   12e0c:	andeq	r7, r1, ip, asr r9
   12e10:	andeq	r7, r1, r4, ror #6
   12e14:	andeq	r7, r1, r8, lsl #19
   12e18:	andeq	r0, r0, r1, lsl #2
   12e1c:	muleq	r2, r8, r1
   12e20:	andeq	r7, r1, ip, ror #18
   12e24:	andeq	r7, r1, ip, ror r9
   12e28:	andeq	r9, r2, r8, lsr #2
   12e2c:	muleq	r1, r8, r8
   12e30:	andeq	r7, r1, r0, lsr #8
   12e34:	andeq	r9, r2, r0, lsl #3
   12e38:	muleq	r2, r0, r1
   12e3c:	muleq	r1, r0, r9
   12e40:	andeq	r9, r2, r8, lsl #3
   12e44:	andeq	r7, r1, r4, lsr #19
   12e48:	strdeq	r7, [r1], -r0
   12e4c:	ldrdeq	r7, [r1], -ip
   12e50:	andeq	r7, r1, r0, ror #19
   12e54:	strdeq	r7, [r1], -ip
   12e58:	ldrdeq	r9, [r2], -r8
   12e5c:	andeq	r7, r1, r4, lsl #8
   12e60:	andeq	r0, r0, sl, lsr #7
   12e64:	andeq	r7, r1, ip, lsr #20
   12e68:	andeq	r7, r1, r8, lsr sl
   12e6c:	andeq	r7, r1, ip, lsl sl
   12e70:	andeq	r7, r1, ip, asr #21
   12e74:	andeq	r7, r1, r0, ror #20
   12e78:	andeq	r7, r1, r8, lsr #23
   12e7c:	andeq	r9, r2, r0, lsr #3
   12e80:	ldrdeq	r7, [r1], -r8
   12e84:	andeq	r7, r1, r0, lsr #21
   12e88:	andeq	r7, r1, r0, asr #21
   12e8c:	mov	r1, #0
   12e90:	mov	r0, r5
   12e94:	bl	111cc <open64@plt>
   12e98:	str	r0, [sp, #40]	; 0x28
   12e9c:	cmn	r0, #1
   12ea0:	beq	12f08 <__assert_fail@plt+0x1b80>
   12ea4:	mov	r2, #0
   12ea8:	mov	r3, #0
   12eac:	strd	r2, [sp]
   12eb0:	mov	r2, r8
   12eb4:	mov	r1, r5
   12eb8:	ldr	r0, [sp, #40]	; 0x28
   12ebc:	bl	11890 <__assert_fail@plt+0x508>
   12ec0:	mov	r8, r0
   12ec4:	ldr	r0, [sp, #40]	; 0x28
   12ec8:	bl	1137c <close@plt>
   12ecc:	cmp	r0, #0
   12ed0:	beq	1306c <__assert_fail@plt+0x1ce4>
   12ed4:	bl	11280 <__errno_location@plt>
   12ed8:	ldr	r8, [r0]
   12edc:	mov	r2, r5
   12ee0:	mov	r1, #3
   12ee4:	mov	r0, #0
   12ee8:	bl	15250 <__assert_fail@plt+0x3ec8>
   12eec:	mov	r3, r0
   12ef0:	ldr	r2, [pc, #-128]	; 12e78 <__assert_fail@plt+0x1af0>
   12ef4:	mov	r1, r8
   12ef8:	mov	r0, #0
   12efc:	bl	111c0 <error@plt>
   12f00:	mov	r8, #0
   12f04:	b	1306c <__assert_fail@plt+0x1ce4>
   12f08:	bl	11280 <__errno_location@plt>
   12f0c:	ldr	r8, [r0]
   12f10:	mov	r2, r5
   12f14:	mov	r1, #3
   12f18:	mov	r0, #0
   12f1c:	bl	15250 <__assert_fail@plt+0x3ec8>
   12f20:	mov	r3, r0
   12f24:	ldr	r2, [pc, #-180]	; 12e78 <__assert_fail@plt+0x1af0>
   12f28:	mov	r1, r8
   12f2c:	mov	r0, #0
   12f30:	bl	111c0 <error@plt>
   12f34:	mov	r8, #0
   12f38:	b	1306c <__assert_fail@plt+0x1ce4>
   12f3c:	cmp	sl, #0
   12f40:	movne	r3, #0
   12f44:	andeq	r3, r6, #1
   12f48:	cmp	r3, #0
   12f4c:	beq	12cd8 <__assert_fail@plt+0x1950>
   12f50:	ldr	r0, [sp, #36]	; 0x24
   12f54:	bl	1321c <__assert_fail@plt+0x1e94>
   12f58:	cmp	r0, #0
   12f5c:	bne	12cd8 <__assert_fail@plt+0x1950>
   12f60:	mov	r2, #1
   12f64:	ldr	r3, [pc, #-240]	; 12e7c <__assert_fail@plt+0x1af4>
   12f68:	strb	r2, [r3, #60]	; 0x3c
   12f6c:	mvn	r2, #0
   12f70:	mvn	r3, #0
   12f74:	strd	r2, [sp]
   12f78:	mov	r2, fp
   12f7c:	mov	r1, #0
   12f80:	mov	r0, r1
   12f84:	bl	11890 <__assert_fail@plt+0x508>
   12f88:	and	r6, r6, r0
   12f8c:	b	12cd8 <__assert_fail@plt+0x1950>
   12f90:	add	r0, sp, #168	; 0xa8
   12f94:	bl	15520 <__assert_fail@plt+0x4198>
   12f98:	b	12ce4 <__assert_fail@plt+0x195c>
   12f9c:	mov	r0, #0
   12fa0:	bl	1137c <close@plt>
   12fa4:	cmp	r0, #0
   12fa8:	beq	12d68 <__assert_fail@plt+0x19e0>
   12fac:	bl	11280 <__errno_location@plt>
   12fb0:	ldr	r2, [pc, #-312]	; 12e80 <__assert_fail@plt+0x1af8>
   12fb4:	ldr	r1, [r0]
   12fb8:	mov	r0, #1
   12fbc:	bl	111c0 <error@plt>
   12fc0:	mov	r1, #112	; 0x70
   12fc4:	mov	r0, r4
   12fc8:	bl	15ddc <__assert_fail@plt+0x4a54>
   12fcc:	mov	fp, r0
   12fd0:	cmp	r4, #1
   12fd4:	beq	12b64 <__assert_fail@plt+0x17dc>
   12fd8:	add	r7, fp, #8
   12fdc:	mov	r6, #0
   12fe0:	mov	r9, #3
   12fe4:	b	12bbc <__assert_fail@plt+0x1834>
   12fe8:	ldr	r3, [fp]
   12fec:	cmp	r3, #0
   12ff0:	movgt	r5, #1
   12ff4:	bgt	1298c <__assert_fail@plt+0x1604>
   12ff8:	mov	ip, fp
   12ffc:	mov	r3, #112	; 0x70
   13000:	mla	r6, r3, r6, fp
   13004:	mov	r0, #0
   13008:	mov	r1, #0
   1300c:	mov	r8, #1
   13010:	mov	lr, #7
   13014:	b	12bf4 <__assert_fail@plt+0x186c>
   13018:	ldrb	r3, [r5]
   1301c:	cmp	r3, #0
   13020:	beq	12dc0 <__assert_fail@plt+0x1a38>
   13024:	cmp	r4, #0
   13028:	movne	r8, r7
   1302c:	moveq	r8, #0
   13030:	add	r8, fp, r8
   13034:	ldr	r1, [pc, #-444]	; 12e80 <__assert_fail@plt+0x1af8>
   13038:	mov	r0, r5
   1303c:	bl	11088 <strcmp@plt>
   13040:	cmp	r0, #0
   13044:	bne	12e8c <__assert_fail@plt+0x1b04>
   13048:	mov	r3, #1
   1304c:	strb	r3, [r9, #60]	; 0x3c
   13050:	mvn	r2, #0
   13054:	mvn	r3, #0
   13058:	strd	r2, [sp]
   1305c:	mov	r2, r8
   13060:	mov	r1, r5
   13064:	bl	11890 <__assert_fail@plt+0x508>
   13068:	mov	r8, r0
   1306c:	and	r6, r6, r8
   13070:	cmp	r4, #0
   13074:	moveq	r3, #1
   13078:	streq	r3, [fp]
   1307c:	add	r7, r7, #112	; 0x70
   13080:	add	r1, sp, #64	; 0x40
   13084:	ldr	r0, [sp, #36]	; 0x24
   13088:	bl	13180 <__assert_fail@plt+0x1df8>
   1308c:	subs	r5, r0, #0
   13090:	beq	12c64 <__assert_fail@plt+0x18dc>
   13094:	cmp	sl, #0
   13098:	beq	13018 <__assert_fail@plt+0x1c90>
   1309c:	ldr	r1, [pc, #-548]	; 12e80 <__assert_fail@plt+0x1af8>
   130a0:	mov	r0, sl
   130a4:	bl	11088 <strcmp@plt>
   130a8:	cmp	r0, #0
   130ac:	bne	130c4 <__assert_fail@plt+0x1d3c>
   130b0:	ldr	r1, [pc, #-568]	; 12e80 <__assert_fail@plt+0x1af8>
   130b4:	mov	r0, r5
   130b8:	bl	11088 <strcmp@plt>
   130bc:	cmp	r0, #0
   130c0:	beq	12d7c <__assert_fail@plt+0x19f4>
   130c4:	ldrb	r3, [r5]
   130c8:	cmp	r3, #0
   130cc:	bne	13024 <__assert_fail@plt+0x1c9c>
   130d0:	ldr	r0, [sp, #36]	; 0x24
   130d4:	bl	1321c <__assert_fail@plt+0x1e94>
   130d8:	mov	r6, r0
   130dc:	mov	r2, sl
   130e0:	mov	r1, #3
   130e4:	mov	r0, #0
   130e8:	bl	15250 <__assert_fail@plt+0x3ec8>
   130ec:	mov	r5, r0
   130f0:	mov	r2, #5
   130f4:	ldr	r1, [pc, #-632]	; 12e84 <__assert_fail@plt+0x1afc>
   130f8:	mov	r0, #0
   130fc:	bl	11124 <dcgettext@plt>
   13100:	str	r0, [sp, #4]
   13104:	str	r6, [sp]
   13108:	mov	r3, r5
   1310c:	ldr	r2, [pc, #-652]	; 12e88 <__assert_fail@plt+0x1b00>
   13110:	mov	r1, #0
   13114:	mov	r0, r1
   13118:	bl	111c0 <error@plt>
   1311c:	mov	r6, #0
   13120:	b	13070 <__assert_fail@plt+0x1ce8>
   13124:	push	{r4, lr}
   13128:	mov	r4, r0
   1312c:	mov	r0, #24
   13130:	bl	16318 <__assert_fail@plt+0x4f90>
   13134:	cmp	r0, #0
   13138:	movne	r3, #0
   1313c:	strne	r3, [r0]
   13140:	strne	r4, [r0, #16]
   13144:	strne	r4, [r0, #20]
   13148:	pop	{r4, pc}
   1314c:	push	{r4, lr}
   13150:	mov	r4, r0
   13154:	mov	r0, #24
   13158:	bl	16318 <__assert_fail@plt+0x4f90>
   1315c:	cmp	r0, #0
   13160:	popeq	{r4, pc}
   13164:	str	r4, [r0]
   13168:	mov	r3, #0
   1316c:	str	r3, [r0, #8]
   13170:	str	r3, [r0, #12]
   13174:	str	r3, [r0, #4]
   13178:	str	r3, [r0, #16]
   1317c:	pop	{r4, pc}
   13180:	push	{r4, r5, r6, lr}
   13184:	mov	r4, r0
   13188:	ldr	r3, [r0]
   1318c:	cmp	r3, #0
   13190:	beq	131ec <__assert_fail@plt+0x1e64>
   13194:	mov	r5, r1
   13198:	mov	r2, #0
   1319c:	add	r1, r0, #12
   131a0:	add	r0, r0, #8
   131a4:	bl	1134c <getdelim@plt>
   131a8:	cmp	r0, #0
   131ac:	blt	131cc <__assert_fail@plt+0x1e44>
   131b0:	mov	r3, #1
   131b4:	str	r3, [r5]
   131b8:	ldr	r3, [r4, #4]
   131bc:	add	r3, r3, #1
   131c0:	str	r3, [r4, #4]
   131c4:	ldr	r0, [r4, #8]
   131c8:	pop	{r4, r5, r6, pc}
   131cc:	ldr	r0, [r4]
   131d0:	bl	11244 <feof@plt>
   131d4:	cmp	r0, #0
   131d8:	movne	r3, #2
   131dc:	moveq	r3, #4
   131e0:	str	r3, [r5]
   131e4:	mov	r0, #0
   131e8:	pop	{r4, r5, r6, pc}
   131ec:	ldr	r3, [r0, #20]
   131f0:	ldr	r0, [r3]
   131f4:	cmp	r0, #0
   131f8:	moveq	r3, #2
   131fc:	streq	r3, [r1]
   13200:	movne	r3, #1
   13204:	strne	r3, [r1]
   13208:	ldrne	r3, [r4, #20]
   1320c:	addne	r2, r3, #4
   13210:	strne	r2, [r4, #20]
   13214:	ldrne	r0, [r3]
   13218:	pop	{r4, r5, r6, pc}
   1321c:	ldr	r3, [r0]
   13220:	cmp	r3, #0
   13224:	ldrne	r0, [r0, #4]
   13228:	ldreq	r3, [r0, #20]
   1322c:	ldreq	r0, [r0, #16]
   13230:	subeq	r0, r3, r0
   13234:	asreq	r0, r0, #2
   13238:	bx	lr
   1323c:	push	{r4, lr}
   13240:	mov	r4, r0
   13244:	ldr	r3, [r0]
   13248:	cmp	r3, #0
   1324c:	beq	13258 <__assert_fail@plt+0x1ed0>
   13250:	ldr	r0, [r0, #8]
   13254:	bl	134dc <__assert_fail@plt+0x2154>
   13258:	mov	r0, r4
   1325c:	bl	134dc <__assert_fail@plt+0x2154>
   13260:	pop	{r4, pc}
   13264:	ldr	r3, [pc, #4]	; 13270 <__assert_fail@plt+0x1ee8>
   13268:	str	r0, [r3]
   1326c:	bx	lr
   13270:	andeq	r9, r2, r0, ror #3
   13274:	ldr	r3, [pc, #4]	; 13280 <__assert_fail@plt+0x1ef8>
   13278:	strb	r0, [r3, #4]
   1327c:	bx	lr
   13280:	andeq	r9, r2, r0, ror #3
   13284:	push	{r4, r5, r6, lr}
   13288:	sub	sp, sp, #8
   1328c:	ldr	r3, [pc, #200]	; 1335c <__assert_fail@plt+0x1fd4>
   13290:	ldr	r0, [r3]
   13294:	bl	16398 <__assert_fail@plt+0x5010>
   13298:	cmp	r0, #0
   1329c:	beq	132c0 <__assert_fail@plt+0x1f38>
   132a0:	ldr	r3, [pc, #184]	; 13360 <__assert_fail@plt+0x1fd8>
   132a4:	ldrb	r3, [r3, #4]
   132a8:	cmp	r3, #0
   132ac:	beq	132dc <__assert_fail@plt+0x1f54>
   132b0:	bl	11280 <__errno_location@plt>
   132b4:	ldr	r3, [r0]
   132b8:	cmp	r3, #32
   132bc:	bne	132dc <__assert_fail@plt+0x1f54>
   132c0:	ldr	r3, [pc, #156]	; 13364 <__assert_fail@plt+0x1fdc>
   132c4:	ldr	r0, [r3]
   132c8:	bl	16398 <__assert_fail@plt+0x5010>
   132cc:	cmp	r0, #0
   132d0:	bne	13350 <__assert_fail@plt+0x1fc8>
   132d4:	add	sp, sp, #8
   132d8:	pop	{r4, r5, r6, pc}
   132dc:	mov	r2, #5
   132e0:	ldr	r1, [pc, #128]	; 13368 <__assert_fail@plt+0x1fe0>
   132e4:	mov	r0, #0
   132e8:	bl	11124 <dcgettext@plt>
   132ec:	mov	r4, r0
   132f0:	ldr	r3, [pc, #104]	; 13360 <__assert_fail@plt+0x1fd8>
   132f4:	ldr	r5, [r3]
   132f8:	cmp	r5, #0
   132fc:	beq	13334 <__assert_fail@plt+0x1fac>
   13300:	bl	11280 <__errno_location@plt>
   13304:	ldr	r6, [r0]
   13308:	mov	r0, r5
   1330c:	bl	15230 <__assert_fail@plt+0x3ea8>
   13310:	str	r4, [sp]
   13314:	mov	r3, r0
   13318:	ldr	r2, [pc, #76]	; 1336c <__assert_fail@plt+0x1fe4>
   1331c:	mov	r1, r6
   13320:	mov	r0, #0
   13324:	bl	111c0 <error@plt>
   13328:	ldr	r3, [pc, #64]	; 13370 <__assert_fail@plt+0x1fe8>
   1332c:	ldr	r0, [r3]
   13330:	bl	110e8 <_exit@plt>
   13334:	bl	11280 <__errno_location@plt>
   13338:	mov	r3, r4
   1333c:	ldr	r2, [pc, #48]	; 13374 <__assert_fail@plt+0x1fec>
   13340:	ldr	r1, [r0]
   13344:	mov	r0, #0
   13348:	bl	111c0 <error@plt>
   1334c:	b	13328 <__assert_fail@plt+0x1fa0>
   13350:	ldr	r3, [pc, #24]	; 13370 <__assert_fail@plt+0x1fe8>
   13354:	ldr	r0, [r3]
   13358:	bl	110e8 <_exit@plt>
   1335c:	muleq	r2, r4, r1
   13360:	andeq	r9, r2, r0, ror #3
   13364:	andeq	r9, r2, r8, lsl #3
   13368:	muleq	r1, r8, fp
   1336c:	andeq	r7, r1, r4, lsr #23
   13370:	andeq	r9, r2, ip, lsr #2
   13374:	andeq	r7, r1, r8, lsr #23
   13378:	push	{r4, r5, lr}
   1337c:	sub	sp, sp, #20
   13380:	ldr	r1, [sp, #40]	; 0x28
   13384:	str	r1, [sp, #8]
   13388:	ldrd	r4, [sp, #32]
   1338c:	strd	r4, [sp]
   13390:	bl	11094 <posix_fadvise64@plt>
   13394:	add	sp, sp, #20
   13398:	pop	{r4, r5, pc}
   1339c:	cmp	r0, #0
   133a0:	bxeq	lr
   133a4:	push	{r4, lr}
   133a8:	sub	sp, sp, #16
   133ac:	mov	r4, r1
   133b0:	bl	112d4 <fileno@plt>
   133b4:	str	r4, [sp, #8]
   133b8:	mov	r2, #0
   133bc:	mov	r3, #0
   133c0:	strd	r2, [sp]
   133c4:	bl	11094 <posix_fadvise64@plt>
   133c8:	add	sp, sp, #16
   133cc:	pop	{r4, pc}
   133d0:	push	{r4, r5, r6, lr}
   133d4:	sub	sp, sp, #8
   133d8:	mov	r4, r0
   133dc:	bl	112d4 <fileno@plt>
   133e0:	cmp	r0, #0
   133e4:	blt	1345c <__assert_fail@plt+0x20d4>
   133e8:	mov	r0, r4
   133ec:	bl	11208 <__freading@plt>
   133f0:	cmp	r0, #0
   133f4:	beq	13428 <__assert_fail@plt+0x20a0>
   133f8:	mov	r0, r4
   133fc:	bl	112d4 <fileno@plt>
   13400:	mov	r3, #1
   13404:	str	r3, [sp]
   13408:	mov	r2, #0
   1340c:	mov	r3, #0
   13410:	bl	11190 <lseek64@plt>
   13414:	mvn	r2, #0
   13418:	mvn	r3, #0
   1341c:	cmp	r1, r3
   13420:	cmpeq	r0, r2
   13424:	beq	13468 <__assert_fail@plt+0x20e0>
   13428:	mov	r0, r4
   1342c:	bl	13478 <__assert_fail@plt+0x20f0>
   13430:	cmp	r0, #0
   13434:	beq	13468 <__assert_fail@plt+0x20e0>
   13438:	bl	11280 <__errno_location@plt>
   1343c:	mov	r5, r0
   13440:	ldr	r6, [r0]
   13444:	mov	r0, r4
   13448:	bl	112ec <fclose@plt>
   1344c:	cmp	r6, #0
   13450:	strne	r6, [r5]
   13454:	mvnne	r0, #0
   13458:	b	13470 <__assert_fail@plt+0x20e8>
   1345c:	mov	r0, r4
   13460:	bl	112ec <fclose@plt>
   13464:	b	13470 <__assert_fail@plt+0x20e8>
   13468:	mov	r0, r4
   1346c:	bl	112ec <fclose@plt>
   13470:	add	sp, sp, #8
   13474:	pop	{r4, r5, r6, pc}
   13478:	push	{r4, lr}
   1347c:	sub	sp, sp, #8
   13480:	subs	r4, r0, #0
   13484:	beq	13498 <__assert_fail@plt+0x2110>
   13488:	mov	r0, r4
   1348c:	bl	11208 <__freading@plt>
   13490:	cmp	r0, #0
   13494:	bne	134a8 <__assert_fail@plt+0x2120>
   13498:	mov	r0, r4
   1349c:	bl	110ac <fflush@plt>
   134a0:	add	sp, sp, #8
   134a4:	pop	{r4, pc}
   134a8:	ldr	r3, [r4]
   134ac:	tst	r3, #256	; 0x100
   134b0:	bne	134c0 <__assert_fail@plt+0x2138>
   134b4:	mov	r0, r4
   134b8:	bl	110ac <fflush@plt>
   134bc:	b	134a0 <__assert_fail@plt+0x2118>
   134c0:	mov	r3, #1
   134c4:	str	r3, [sp]
   134c8:	mov	r2, #0
   134cc:	mov	r3, #0
   134d0:	mov	r0, r4
   134d4:	bl	13534 <__assert_fail@plt+0x21ac>
   134d8:	b	134b4 <__assert_fail@plt+0x212c>
   134dc:	push	{r4, r5, lr}
   134e0:	sub	sp, sp, #12
   134e4:	mov	r5, r0
   134e8:	bl	11280 <__errno_location@plt>
   134ec:	mov	r4, r0
   134f0:	ldr	r3, [r0]
   134f4:	str	r3, [sp]
   134f8:	str	r3, [sp, #4]
   134fc:	mov	r3, #0
   13500:	str	r3, [r0]
   13504:	mov	r0, r5
   13508:	bl	110d0 <free@plt>
   1350c:	ldr	r3, [r4]
   13510:	cmp	r3, #0
   13514:	moveq	r3, #4
   13518:	movne	r3, #0
   1351c:	add	r2, sp, #8
   13520:	add	r3, r2, r3
   13524:	ldr	r3, [r3, #-8]
   13528:	str	r3, [r4]
   1352c:	add	sp, sp, #12
   13530:	pop	{r4, r5, pc}
   13534:	push	{r4, r5, r6, r7, lr}
   13538:	sub	sp, sp, #12
   1353c:	mov	r4, r0
   13540:	mov	r6, r2
   13544:	mov	r7, r3
   13548:	ldr	r5, [sp, #32]
   1354c:	ldr	r2, [r0, #8]
   13550:	ldr	r3, [r0, #4]
   13554:	cmp	r2, r3
   13558:	beq	13578 <__assert_fail@plt+0x21f0>
   1355c:	str	r5, [sp]
   13560:	mov	r2, r6
   13564:	mov	r3, r7
   13568:	mov	r0, r4
   1356c:	bl	112f8 <fseeko64@plt>
   13570:	add	sp, sp, #12
   13574:	pop	{r4, r5, r6, r7, pc}
   13578:	ldr	r2, [r0, #20]
   1357c:	ldr	r3, [r0, #16]
   13580:	cmp	r2, r3
   13584:	bne	1355c <__assert_fail@plt+0x21d4>
   13588:	ldr	r3, [r0, #36]	; 0x24
   1358c:	cmp	r3, #0
   13590:	bne	1355c <__assert_fail@plt+0x21d4>
   13594:	bl	112d4 <fileno@plt>
   13598:	str	r5, [sp]
   1359c:	mov	r2, r6
   135a0:	mov	r3, r7
   135a4:	bl	11190 <lseek64@plt>
   135a8:	mvn	r2, #0
   135ac:	mvn	r3, #0
   135b0:	cmp	r1, r3
   135b4:	cmpeq	r0, r2
   135b8:	beq	135d4 <__assert_fail@plt+0x224c>
   135bc:	ldr	r3, [r4]
   135c0:	bic	r3, r3, #16
   135c4:	str	r3, [r4]
   135c8:	strd	r0, [r4, #80]	; 0x50
   135cc:	mov	r0, #0
   135d0:	b	13570 <__assert_fail@plt+0x21e8>
   135d4:	mvn	r0, #0
   135d8:	b	13570 <__assert_fail@plt+0x21e8>
   135dc:	push	{r4, r5, r6, r8, r9, lr}
   135e0:	mov	r4, r0
   135e4:	mov	r5, r1
   135e8:	add	r6, r2, #20
   135ec:	mov	r3, #0
   135f0:	strb	r3, [r2, #20]
   135f4:	mov	r8, #10
   135f8:	mov	r9, #0
   135fc:	mov	r2, r8
   13600:	mov	r3, r9
   13604:	mov	r0, r4
   13608:	mov	r1, r5
   1360c:	bl	17128 <_obstack_memory_used@@Base+0x92c>
   13610:	add	r2, r2, #48	; 0x30
   13614:	strb	r2, [r6, #-1]!
   13618:	mov	r2, r8
   1361c:	mov	r3, r9
   13620:	mov	r0, r4
   13624:	mov	r1, r5
   13628:	bl	17128 <_obstack_memory_used@@Base+0x92c>
   1362c:	mov	r4, r0
   13630:	mov	r5, r1
   13634:	orrs	r3, r4, r5
   13638:	bne	135fc <__assert_fail@plt+0x2274>
   1363c:	mov	r0, r6
   13640:	pop	{r4, r5, r6, r8, r9, pc}
   13644:	push	{r4, lr}
   13648:	mov	r4, r0
   1364c:	bl	110b8 <wcwidth@plt>
   13650:	cmp	r0, #0
   13654:	popge	{r4, pc}
   13658:	mov	r0, r4
   1365c:	bl	11154 <iswcntrl@plt>
   13660:	clz	r0, r0
   13664:	lsr	r0, r0, #5
   13668:	pop	{r4, pc}
   1366c:	push	{r4, r5, r6, lr}
   13670:	mov	r5, r0
   13674:	mov	r4, r1
   13678:	mov	r3, r1
   1367c:	ldr	r1, [r3], #16
   13680:	cmp	r1, r3
   13684:	strne	r1, [r0]
   13688:	beq	136ac <__assert_fail@plt+0x2324>
   1368c:	ldr	r3, [r4, #4]
   13690:	str	r3, [r5, #4]
   13694:	ldrb	r3, [r4, #8]
   13698:	strb	r3, [r5, #8]
   1369c:	cmp	r3, #0
   136a0:	ldrne	r3, [r4, #12]
   136a4:	strne	r3, [r5, #12]
   136a8:	pop	{r4, r5, r6, pc}
   136ac:	add	r6, r0, #16
   136b0:	ldr	r2, [r4, #4]
   136b4:	mov	r0, r6
   136b8:	bl	110f4 <memcpy@plt>
   136bc:	str	r6, [r5]
   136c0:	b	1368c <__assert_fail@plt+0x2304>
   136c4:	lsr	r2, r0, #5
   136c8:	and	r0, r0, #31
   136cc:	ldr	r3, [pc, #12]	; 136e0 <__assert_fail@plt+0x2358>
   136d0:	ldr	r3, [r3, r2, lsl #2]
   136d4:	lsr	r0, r3, r0
   136d8:	and	r0, r0, #1
   136dc:	bx	lr
   136e0:	andeq	r7, r1, ip, lsr #23
   136e4:	push	{r4, r5, r6, r7, lr}
   136e8:	sub	sp, sp, #12
   136ec:	mov	r7, r1
   136f0:	mov	r5, r2
   136f4:	subs	r6, r0, #0
   136f8:	addeq	r6, sp, #4
   136fc:	mov	r0, r6
   13700:	bl	111b4 <mbrtowc@plt>
   13704:	mov	r4, r0
   13708:	cmp	r5, #0
   1370c:	cmnne	r0, #3
   13710:	bhi	13720 <__assert_fail@plt+0x2398>
   13714:	mov	r0, r4
   13718:	add	sp, sp, #12
   1371c:	pop	{r4, r5, r6, r7, pc}
   13720:	mov	r0, #0
   13724:	bl	16410 <__assert_fail@plt+0x5088>
   13728:	cmp	r0, #0
   1372c:	ldrbeq	r3, [r7]
   13730:	streq	r3, [r6]
   13734:	moveq	r4, #1
   13738:	b	13714 <__assert_fail@plt+0x238c>
   1373c:	andeq	r0, r0, r0
   13740:	push	{lr}		; (str lr, [sp, #-4]!)
   13744:	vpush	{d8}
   13748:	sub	sp, sp, #68	; 0x44
   1374c:	mov	r0, #85	; 0x55
   13750:	bl	11130 <sysconf@plt>
   13754:	vmov	s15, r0
   13758:	vcvt.f64.s32	d8, s15
   1375c:	mov	r0, #30
   13760:	bl	11130 <sysconf@plt>
   13764:	vcmpe.f64	d8, #0.0
   13768:	vmrs	APSR_nzcv, fpscr
   1376c:	blt	13794 <__assert_fail@plt+0x240c>
   13770:	vmov	s15, r0
   13774:	vcvt.f64.s32	d0, s15
   13778:	vcmpe.f64	d0, #0.0
   1377c:	vmrs	APSR_nzcv, fpscr
   13780:	vmulge.f64	d0, d8, d0
   13784:	blt	13794 <__assert_fail@plt+0x240c>
   13788:	add	sp, sp, #68	; 0x44
   1378c:	vpop	{d8}
   13790:	pop	{pc}		; (ldr pc, [sp], #4)
   13794:	mov	r0, sp
   13798:	bl	111e4 <sysinfo@plt>
   1379c:	cmp	r0, #0
   137a0:	vldreq	s15, [sp, #16]
   137a4:	vcvteq.f64.u32	d0, s15
   137a8:	vldreq	s15, [sp, #52]	; 0x34
   137ac:	vcvteq.f64.u32	d8, s15
   137b0:	vmuleq.f64	d0, d0, d8
   137b4:	vldrne	d0, [pc, #4]	; 137c0 <__assert_fail@plt+0x2438>
   137b8:	b	13788 <__assert_fail@plt+0x2400>
   137bc:	nop			; (mov r0, r0)
   137c0:	andeq	r0, r0, r0
   137c4:	orrsmi	r0, r0, r0
   137c8:	push	{lr}		; (str lr, [sp, #-4]!)
   137cc:	vpush	{d8}
   137d0:	sub	sp, sp, #68	; 0x44
   137d4:	mov	r0, #86	; 0x56
   137d8:	bl	11130 <sysconf@plt>
   137dc:	vmov	s15, r0
   137e0:	vcvt.f64.s32	d8, s15
   137e4:	mov	r0, #30
   137e8:	bl	11130 <sysconf@plt>
   137ec:	vcmpe.f64	d8, #0.0
   137f0:	vmrs	APSR_nzcv, fpscr
   137f4:	blt	1381c <__assert_fail@plt+0x2494>
   137f8:	vmov	s15, r0
   137fc:	vcvt.f64.s32	d0, s15
   13800:	vcmpe.f64	d0, #0.0
   13804:	vmrs	APSR_nzcv, fpscr
   13808:	vmulge.f64	d0, d8, d0
   1380c:	blt	1381c <__assert_fail@plt+0x2494>
   13810:	add	sp, sp, #68	; 0x44
   13814:	vpop	{d8}
   13818:	pop	{pc}		; (ldr pc, [sp], #4)
   1381c:	mov	r0, sp
   13820:	bl	111e4 <sysinfo@plt>
   13824:	cmp	r0, #0
   13828:	bne	13850 <__assert_fail@plt+0x24c8>
   1382c:	vldr	s15, [sp, #20]
   13830:	vcvt.f64.u32	d0, s15
   13834:	vldr	s15, [sp, #28]
   13838:	vcvt.f64.u32	d8, s15
   1383c:	vadd.f64	d0, d0, d8
   13840:	vldr	s15, [sp, #52]	; 0x34
   13844:	vcvt.f64.u32	d8, s15
   13848:	vmul.f64	d0, d0, d8
   1384c:	b	13810 <__assert_fail@plt+0x2488>
   13850:	bl	13740 <__assert_fail@plt+0x23b8>
   13854:	vldr	d8, [pc, #4]	; 13860 <__assert_fail@plt+0x24d8>
   13858:	vmul.f64	d0, d0, d8
   1385c:	b	13810 <__assert_fail@plt+0x2488>
   13860:	andeq	r0, r0, r0
   13864:	svccc	0x00d00000
   13868:	push	{r4, r5, r6, lr}
   1386c:	subs	r4, r0, #0
   13870:	beq	138e8 <__assert_fail@plt+0x2560>
   13874:	mov	r1, #47	; 0x2f
   13878:	mov	r0, r4
   1387c:	bl	1131c <strrchr@plt>
   13880:	cmp	r0, #0
   13884:	addne	r5, r0, #1
   13888:	moveq	r5, r4
   1388c:	sub	r3, r5, r4
   13890:	cmp	r3, #6
   13894:	ble	138d4 <__assert_fail@plt+0x254c>
   13898:	mov	r2, #7
   1389c:	ldr	r1, [pc, #96]	; 13904 <__assert_fail@plt+0x257c>
   138a0:	sub	r0, r5, #7
   138a4:	bl	11364 <strncmp@plt>
   138a8:	cmp	r0, #0
   138ac:	bne	138d4 <__assert_fail@plt+0x254c>
   138b0:	mov	r2, #3
   138b4:	ldr	r1, [pc, #76]	; 13908 <__assert_fail@plt+0x2580>
   138b8:	mov	r0, r5
   138bc:	bl	11364 <strncmp@plt>
   138c0:	cmp	r0, #0
   138c4:	addeq	r4, r5, #3
   138c8:	ldreq	r3, [pc, #60]	; 1390c <__assert_fail@plt+0x2584>
   138cc:	streq	r4, [r3]
   138d0:	movne	r4, r5
   138d4:	ldr	r3, [pc, #52]	; 13910 <__assert_fail@plt+0x2588>
   138d8:	str	r4, [r3]
   138dc:	ldr	r3, [pc, #48]	; 13914 <__assert_fail@plt+0x258c>
   138e0:	str	r4, [r3]
   138e4:	pop	{r4, r5, r6, pc}
   138e8:	ldr	r3, [pc, #40]	; 13918 <__assert_fail@plt+0x2590>
   138ec:	ldr	r3, [r3]
   138f0:	mov	r2, #55	; 0x37
   138f4:	mov	r1, #1
   138f8:	ldr	r0, [pc, #28]	; 1391c <__assert_fail@plt+0x2594>
   138fc:	bl	11184 <fwrite@plt>
   13900:	bl	11370 <abort@plt>
   13904:	andeq	r7, r1, r4, lsl #24
   13908:	andeq	r7, r1, ip, lsl #24
   1390c:	andeq	r9, r2, r8, ror r1
   13910:	andeq	r9, r2, r8, ror #3
   13914:	andeq	r9, r2, ip, ror r1
   13918:	andeq	r9, r2, r8, lsl #3
   1391c:	andeq	r7, r1, ip, asr #23
   13920:	push	{r4, r5, r6, lr}
   13924:	mov	r5, r0
   13928:	mov	r4, r1
   1392c:	mov	r2, #48	; 0x30
   13930:	mov	r1, #0
   13934:	bl	112a4 <memset@plt>
   13938:	cmp	r4, #10
   1393c:	beq	1394c <__assert_fail@plt+0x25c4>
   13940:	str	r4, [r5]
   13944:	mov	r0, r5
   13948:	pop	{r4, r5, r6, pc}
   1394c:	bl	11370 <abort@plt>
   13950:	push	{r4, r5, r6, lr}
   13954:	mov	r4, r0
   13958:	mov	r5, r1
   1395c:	mov	r2, #5
   13960:	mov	r1, r0
   13964:	mov	r0, #0
   13968:	bl	11124 <dcgettext@plt>
   1396c:	cmp	r4, r0
   13970:	popne	{r4, r5, r6, pc}
   13974:	bl	16470 <__assert_fail@plt+0x50e8>
   13978:	ldrb	r3, [r0]
   1397c:	bic	r3, r3, #32
   13980:	cmp	r3, #85	; 0x55
   13984:	beq	13a00 <__assert_fail@plt+0x2678>
   13988:	cmp	r3, #71	; 0x47
   1398c:	bne	13a5c <__assert_fail@plt+0x26d4>
   13990:	ldrb	r3, [r0, #1]
   13994:	bic	r3, r3, #32
   13998:	cmp	r3, #66	; 0x42
   1399c:	bne	13a5c <__assert_fail@plt+0x26d4>
   139a0:	ldrb	r3, [r0, #2]
   139a4:	cmp	r3, #49	; 0x31
   139a8:	bne	13a5c <__assert_fail@plt+0x26d4>
   139ac:	ldrb	r3, [r0, #3]
   139b0:	cmp	r3, #56	; 0x38
   139b4:	bne	13a5c <__assert_fail@plt+0x26d4>
   139b8:	ldrb	r3, [r0, #4]
   139bc:	cmp	r3, #48	; 0x30
   139c0:	bne	13a5c <__assert_fail@plt+0x26d4>
   139c4:	ldrb	r3, [r0, #5]
   139c8:	cmp	r3, #51	; 0x33
   139cc:	bne	13a5c <__assert_fail@plt+0x26d4>
   139d0:	ldrb	r3, [r0, #6]
   139d4:	cmp	r3, #48	; 0x30
   139d8:	bne	13a5c <__assert_fail@plt+0x26d4>
   139dc:	ldrb	r3, [r0, #7]
   139e0:	cmp	r3, #0
   139e4:	bne	13a5c <__assert_fail@plt+0x26d4>
   139e8:	ldrb	r2, [r4]
   139ec:	ldr	r3, [pc, #124]	; 13a70 <__assert_fail@plt+0x26e8>
   139f0:	ldr	r0, [pc, #124]	; 13a74 <__assert_fail@plt+0x26ec>
   139f4:	cmp	r2, #96	; 0x60
   139f8:	movne	r0, r3
   139fc:	pop	{r4, r5, r6, pc}
   13a00:	ldrb	r3, [r0, #1]
   13a04:	bic	r3, r3, #32
   13a08:	cmp	r3, #84	; 0x54
   13a0c:	bne	13a5c <__assert_fail@plt+0x26d4>
   13a10:	ldrb	r3, [r0, #2]
   13a14:	bic	r3, r3, #32
   13a18:	cmp	r3, #70	; 0x46
   13a1c:	bne	13a5c <__assert_fail@plt+0x26d4>
   13a20:	ldrb	r3, [r0, #3]
   13a24:	cmp	r3, #45	; 0x2d
   13a28:	bne	13a5c <__assert_fail@plt+0x26d4>
   13a2c:	ldrb	r3, [r0, #4]
   13a30:	cmp	r3, #56	; 0x38
   13a34:	bne	13a5c <__assert_fail@plt+0x26d4>
   13a38:	ldrb	r3, [r0, #5]
   13a3c:	cmp	r3, #0
   13a40:	bne	13a5c <__assert_fail@plt+0x26d4>
   13a44:	ldrb	r2, [r4]
   13a48:	ldr	r3, [pc, #40]	; 13a78 <__assert_fail@plt+0x26f0>
   13a4c:	ldr	r0, [pc, #40]	; 13a7c <__assert_fail@plt+0x26f4>
   13a50:	cmp	r2, #96	; 0x60
   13a54:	movne	r0, r3
   13a58:	pop	{r4, r5, r6, pc}
   13a5c:	ldr	r3, [pc, #28]	; 13a80 <__assert_fail@plt+0x26f8>
   13a60:	ldr	r0, [pc, #28]	; 13a84 <__assert_fail@plt+0x26fc>
   13a64:	cmp	r5, #9
   13a68:	movne	r0, r3
   13a6c:	pop	{r4, r5, r6, pc}
   13a70:	andeq	r7, r1, r8, ror #24
   13a74:	andeq	r7, r1, r4, ror ip
   13a78:	andeq	r7, r1, r4, ror #24
   13a7c:	andeq	r7, r1, r8, ror ip
   13a80:	andeq	r7, r1, ip, ror #24
   13a84:	andeq	r7, r1, r0, ror ip
   13a88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13a8c:	sub	sp, sp, #116	; 0x74
   13a90:	str	r0, [sp, #36]	; 0x24
   13a94:	mov	sl, r1
   13a98:	str	r2, [sp, #52]	; 0x34
   13a9c:	str	r3, [sp, #28]
   13aa0:	ldr	r8, [sp, #152]	; 0x98
   13aa4:	bl	1119c <__ctype_get_mb_cur_max@plt>
   13aa8:	str	r0, [sp, #84]	; 0x54
   13aac:	ldr	r3, [sp, #156]	; 0x9c
   13ab0:	lsr	r3, r3, #1
   13ab4:	and	r3, r3, #1
   13ab8:	str	r3, [sp, #32]
   13abc:	mov	r3, #1
   13ac0:	str	r3, [sp, #40]	; 0x28
   13ac4:	mov	r3, #0
   13ac8:	str	r3, [sp, #80]	; 0x50
   13acc:	str	r3, [sp, #44]	; 0x2c
   13ad0:	str	r3, [sp, #48]	; 0x30
   13ad4:	str	r3, [sp, #60]	; 0x3c
   13ad8:	str	r3, [sp, #72]	; 0x48
   13adc:	str	r3, [sp, #76]	; 0x4c
   13ae0:	mov	r7, sl
   13ae4:	mov	sl, r8
   13ae8:	cmp	sl, #10
   13aec:	ldrls	pc, [pc, sl, lsl #2]
   13af0:	b	13ca8 <__assert_fail@plt+0x2920>
   13af4:	andeq	r3, r1, r8, asr fp
   13af8:	andeq	r3, r1, r8, lsr #22
   13afc:	andeq	r3, r1, r4, lsl #25
   13b00:	andeq	r3, r1, r0, lsr #22
   13b04:	andeq	r3, r1, r8, lsr ip
   13b08:	andeq	r3, r1, r8, ror #22
   13b0c:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13b10:	andeq	r3, r1, ip, lsr #25
   13b14:	andeq	r3, r1, r4, lsr #23
   13b18:	andeq	r3, r1, r4, lsr #23
   13b1c:	andeq	r3, r1, r4, lsr #23
   13b20:	mov	r3, #1
   13b24:	str	r3, [sp, #48]	; 0x30
   13b28:	mov	r3, #1
   13b2c:	str	r3, [sp, #32]
   13b30:	str	r3, [sp, #60]	; 0x3c
   13b34:	ldr	r3, [pc, #4068]	; 14b20 <__assert_fail@plt+0x3798>
   13b38:	str	r3, [sp, #72]	; 0x48
   13b3c:	mov	fp, #0
   13b40:	mov	sl, #2
   13b44:	mov	r6, #0
   13b48:	ldr	r3, [sp, #48]	; 0x30
   13b4c:	eor	r3, r3, #1
   13b50:	str	r3, [sp, #68]	; 0x44
   13b54:	b	1443c <__assert_fail@plt+0x30b4>
   13b58:	mov	r3, #0
   13b5c:	str	r3, [sp, #32]
   13b60:	mov	fp, r3
   13b64:	b	13b44 <__assert_fail@plt+0x27bc>
   13b68:	ldr	r3, [sp, #32]
   13b6c:	cmp	r3, #0
   13b70:	bne	13cc4 <__assert_fail@plt+0x293c>
   13b74:	cmp	r7, #0
   13b78:	beq	13ce4 <__assert_fail@plt+0x295c>
   13b7c:	ldr	r3, [sp, #36]	; 0x24
   13b80:	mov	r2, #34	; 0x22
   13b84:	strb	r2, [r3]
   13b88:	mov	r3, #1
   13b8c:	str	r3, [sp, #48]	; 0x30
   13b90:	str	r3, [sp, #60]	; 0x3c
   13b94:	ldr	r3, [pc, #3980]	; 14b28 <__assert_fail@plt+0x37a0>
   13b98:	str	r3, [sp, #72]	; 0x48
   13b9c:	mov	fp, #1
   13ba0:	b	13b44 <__assert_fail@plt+0x27bc>
   13ba4:	cmp	sl, #10
   13ba8:	beq	13bcc <__assert_fail@plt+0x2844>
   13bac:	mov	r1, sl
   13bb0:	ldr	r0, [pc, #3948]	; 14b24 <__assert_fail@plt+0x379c>
   13bb4:	bl	13950 <__assert_fail@plt+0x25c8>
   13bb8:	str	r0, [sp, #164]	; 0xa4
   13bbc:	mov	r1, sl
   13bc0:	ldr	r0, [pc, #3928]	; 14b20 <__assert_fail@plt+0x3798>
   13bc4:	bl	13950 <__assert_fail@plt+0x25c8>
   13bc8:	str	r0, [sp, #168]	; 0xa8
   13bcc:	ldr	r3, [sp, #32]
   13bd0:	cmp	r3, #0
   13bd4:	movne	fp, #0
   13bd8:	bne	13c10 <__assert_fail@plt+0x2888>
   13bdc:	ldr	r3, [sp, #164]	; 0xa4
   13be0:	ldrb	r3, [r3]
   13be4:	cmp	r3, #0
   13be8:	beq	13c30 <__assert_fail@plt+0x28a8>
   13bec:	ldr	r2, [sp, #164]	; 0xa4
   13bf0:	mov	fp, #0
   13bf4:	ldr	r1, [sp, #36]	; 0x24
   13bf8:	cmp	r7, fp
   13bfc:	strbhi	r3, [r1, fp]
   13c00:	add	fp, fp, #1
   13c04:	ldrb	r3, [r2, #1]!
   13c08:	cmp	r3, #0
   13c0c:	bne	13bf8 <__assert_fail@plt+0x2870>
   13c10:	ldr	r0, [sp, #168]	; 0xa8
   13c14:	bl	1125c <strlen@plt>
   13c18:	str	r0, [sp, #60]	; 0x3c
   13c1c:	ldr	r3, [sp, #168]	; 0xa8
   13c20:	str	r3, [sp, #72]	; 0x48
   13c24:	mov	r3, #1
   13c28:	str	r3, [sp, #48]	; 0x30
   13c2c:	b	13b44 <__assert_fail@plt+0x27bc>
   13c30:	mov	fp, #0
   13c34:	b	13c10 <__assert_fail@plt+0x2888>
   13c38:	ldr	r3, [sp, #32]
   13c3c:	cmp	r3, #0
   13c40:	bne	13d00 <__assert_fail@plt+0x2978>
   13c44:	mov	r3, #1
   13c48:	str	r3, [sp, #48]	; 0x30
   13c4c:	cmp	r7, #0
   13c50:	beq	13d1c <__assert_fail@plt+0x2994>
   13c54:	ldr	r3, [sp, #36]	; 0x24
   13c58:	mov	r2, #39	; 0x27
   13c5c:	strb	r2, [r3]
   13c60:	mov	r3, #0
   13c64:	str	r3, [sp, #32]
   13c68:	mov	r3, #1
   13c6c:	str	r3, [sp, #60]	; 0x3c
   13c70:	ldr	r3, [pc, #3752]	; 14b20 <__assert_fail@plt+0x3798>
   13c74:	str	r3, [sp, #72]	; 0x48
   13c78:	mov	fp, #1
   13c7c:	mov	sl, #2
   13c80:	b	13b44 <__assert_fail@plt+0x27bc>
   13c84:	ldr	r3, [sp, #32]
   13c88:	cmp	r3, #0
   13c8c:	beq	13c4c <__assert_fail@plt+0x28c4>
   13c90:	mov	r3, #1
   13c94:	str	r3, [sp, #60]	; 0x3c
   13c98:	ldr	r3, [pc, #3712]	; 14b20 <__assert_fail@plt+0x3798>
   13c9c:	str	r3, [sp, #72]	; 0x48
   13ca0:	mov	fp, #0
   13ca4:	b	13b44 <__assert_fail@plt+0x27bc>
   13ca8:	bl	11370 <abort@plt>
   13cac:	mov	r3, #0
   13cb0:	str	r3, [sp, #32]
   13cb4:	mov	r3, #1
   13cb8:	str	r3, [sp, #48]	; 0x30
   13cbc:	mov	fp, #0
   13cc0:	b	13b44 <__assert_fail@plt+0x27bc>
   13cc4:	ldr	r3, [sp, #32]
   13cc8:	str	r3, [sp, #48]	; 0x30
   13ccc:	mov	r3, #1
   13cd0:	str	r3, [sp, #60]	; 0x3c
   13cd4:	ldr	r3, [pc, #3660]	; 14b28 <__assert_fail@plt+0x37a0>
   13cd8:	str	r3, [sp, #72]	; 0x48
   13cdc:	mov	fp, #0
   13ce0:	b	13b44 <__assert_fail@plt+0x27bc>
   13ce4:	mov	r3, #1
   13ce8:	str	r3, [sp, #48]	; 0x30
   13cec:	str	r3, [sp, #60]	; 0x3c
   13cf0:	ldr	r3, [pc, #3632]	; 14b28 <__assert_fail@plt+0x37a0>
   13cf4:	str	r3, [sp, #72]	; 0x48
   13cf8:	mov	fp, #1
   13cfc:	b	13b44 <__assert_fail@plt+0x27bc>
   13d00:	mov	r3, #1
   13d04:	str	r3, [sp, #60]	; 0x3c
   13d08:	ldr	r3, [pc, #3600]	; 14b20 <__assert_fail@plt+0x3798>
   13d0c:	str	r3, [sp, #72]	; 0x48
   13d10:	mov	fp, #0
   13d14:	mov	sl, #2
   13d18:	b	13b44 <__assert_fail@plt+0x27bc>
   13d1c:	mov	r3, #0
   13d20:	str	r3, [sp, #32]
   13d24:	mov	r3, #1
   13d28:	str	r3, [sp, #60]	; 0x3c
   13d2c:	ldr	r3, [pc, #3564]	; 14b20 <__assert_fail@plt+0x3798>
   13d30:	str	r3, [sp, #72]	; 0x48
   13d34:	mov	fp, #1
   13d38:	mov	sl, #2
   13d3c:	b	13b44 <__assert_fail@plt+0x27bc>
   13d40:	mov	r3, #0
   13d44:	str	r3, [sp, #56]	; 0x38
   13d48:	ldr	r3, [sp, #52]	; 0x34
   13d4c:	add	r2, r3, r6
   13d50:	str	r2, [sp, #64]	; 0x40
   13d54:	ldrb	r4, [r3, r6]
   13d58:	cmp	r4, #126	; 0x7e
   13d5c:	ldrls	pc, [pc, r4, lsl #2]
   13d60:	b	1459c <__assert_fail@plt+0x3214>
   13d64:	andeq	r3, r1, ip, ror pc
   13d68:	muleq	r1, ip, r5
   13d6c:	muleq	r1, ip, r5
   13d70:	muleq	r1, ip, r5
   13d74:	muleq	r1, ip, r5
   13d78:	muleq	r1, ip, r5
   13d7c:	muleq	r1, ip, r5
   13d80:	ldrdeq	r4, [r1], -r8
   13d84:	andeq	r3, r1, r4, ror pc
   13d88:	muleq	r1, r0, r2
   13d8c:	andeq	r4, r1, r8, lsl #5
   13d90:	strdeq	r4, [r1], -r8
   13d94:	strdeq	r4, [r1], -r0
   13d98:	andeq	r3, r1, ip, ror #30
   13d9c:	muleq	r1, ip, r5
   13da0:	muleq	r1, ip, r5
   13da4:	muleq	r1, ip, r5
   13da8:	muleq	r1, ip, r5
   13dac:	muleq	r1, ip, r5
   13db0:	muleq	r1, ip, r5
   13db4:	muleq	r1, ip, r5
   13db8:	muleq	r1, ip, r5
   13dbc:	muleq	r1, ip, r5
   13dc0:	muleq	r1, ip, r5
   13dc4:	muleq	r1, ip, r5
   13dc8:	muleq	r1, ip, r5
   13dcc:	muleq	r1, ip, r5
   13dd0:	muleq	r1, ip, r5
   13dd4:	muleq	r1, ip, r5
   13dd8:	muleq	r1, ip, r5
   13ddc:	muleq	r1, ip, r5
   13de0:	muleq	r1, ip, r5
   13de4:	andeq	r4, r1, ip, lsr #6
   13de8:	andeq	r4, r1, r8, lsr #6
   13dec:	andeq	r4, r1, r8, lsr #6
   13df0:	andeq	r4, r1, r0, lsl #6
   13df4:	andeq	r4, r1, r8, lsr #6
   13df8:	andeq	r4, r1, r0, ror r9
   13dfc:	andeq	r4, r1, r8, lsr #6
   13e00:	andeq	r4, r1, r0, lsl #10
   13e04:	andeq	r4, r1, r8, lsr #6
   13e08:	andeq	r4, r1, r8, lsr #6
   13e0c:	andeq	r4, r1, r8, lsr #6
   13e10:	andeq	r4, r1, r0, ror r9
   13e14:	andeq	r4, r1, r0, ror r9
   13e18:	andeq	r4, r1, r0, ror r9
   13e1c:	andeq	r4, r1, r0, ror r9
   13e20:	andeq	r4, r1, r0, ror r9
   13e24:	andeq	r4, r1, r0, ror r9
   13e28:	andeq	r4, r1, r0, ror r9
   13e2c:	andeq	r4, r1, r0, ror r9
   13e30:	andeq	r4, r1, r0, ror r9
   13e34:	andeq	r4, r1, r0, ror r9
   13e38:	andeq	r4, r1, r0, ror r9
   13e3c:	andeq	r4, r1, r0, ror r9
   13e40:	andeq	r4, r1, r0, ror r9
   13e44:	andeq	r4, r1, r0, ror r9
   13e48:	andeq	r4, r1, r0, ror r9
   13e4c:	andeq	r4, r1, r0, ror r9
   13e50:	andeq	r4, r1, r8, lsr #6
   13e54:	andeq	r4, r1, r8, lsr #6
   13e58:	andeq	r4, r1, r8, lsr #6
   13e5c:	andeq	r4, r1, r8, lsr #6
   13e60:	andeq	r4, r1, r4, lsl #1
   13e64:	muleq	r1, ip, r5
   13e68:	andeq	r4, r1, r0, ror r9
   13e6c:	andeq	r4, r1, r0, ror r9
   13e70:	andeq	r4, r1, r0, ror r9
   13e74:	andeq	r4, r1, r0, ror r9
   13e78:	andeq	r4, r1, r0, ror r9
   13e7c:	andeq	r4, r1, r0, ror r9
   13e80:	andeq	r4, r1, r0, ror r9
   13e84:	andeq	r4, r1, r0, ror r9
   13e88:	andeq	r4, r1, r0, ror r9
   13e8c:	andeq	r4, r1, r0, ror r9
   13e90:	andeq	r4, r1, r0, ror r9
   13e94:	andeq	r4, r1, r0, ror r9
   13e98:	andeq	r4, r1, r0, ror r9
   13e9c:	andeq	r4, r1, r0, ror r9
   13ea0:	andeq	r4, r1, r0, ror r9
   13ea4:	andeq	r4, r1, r0, ror r9
   13ea8:	andeq	r4, r1, r0, ror r9
   13eac:	andeq	r4, r1, r0, ror r9
   13eb0:	andeq	r4, r1, r0, ror r9
   13eb4:	andeq	r4, r1, r0, ror r9
   13eb8:	andeq	r4, r1, r0, ror r9
   13ebc:	andeq	r4, r1, r0, ror r9
   13ec0:	andeq	r4, r1, r0, ror r9
   13ec4:	andeq	r4, r1, r0, ror r9
   13ec8:	andeq	r4, r1, r0, ror r9
   13ecc:	andeq	r4, r1, r0, ror r9
   13ed0:	andeq	r4, r1, r8, lsr #6
   13ed4:	andeq	r4, r1, r0, lsl #4
   13ed8:	andeq	r4, r1, r0, ror r9
   13edc:	andeq	r4, r1, r8, lsr #6
   13ee0:	andeq	r4, r1, r0, ror r9
   13ee4:	andeq	r4, r1, r8, lsr #6
   13ee8:	andeq	r4, r1, r0, ror r9
   13eec:	andeq	r4, r1, r0, ror r9
   13ef0:	andeq	r4, r1, r0, ror r9
   13ef4:	andeq	r4, r1, r0, ror r9
   13ef8:	andeq	r4, r1, r0, ror r9
   13efc:	andeq	r4, r1, r0, ror r9
   13f00:	andeq	r4, r1, r0, ror r9
   13f04:	andeq	r4, r1, r0, ror r9
   13f08:	andeq	r4, r1, r0, ror r9
   13f0c:	andeq	r4, r1, r0, ror r9
   13f10:	andeq	r4, r1, r0, ror r9
   13f14:	andeq	r4, r1, r0, ror r9
   13f18:	andeq	r4, r1, r0, ror r9
   13f1c:	andeq	r4, r1, r0, ror r9
   13f20:	andeq	r4, r1, r0, ror r9
   13f24:	andeq	r4, r1, r0, ror r9
   13f28:	andeq	r4, r1, r0, ror r9
   13f2c:	andeq	r4, r1, r0, ror r9
   13f30:	andeq	r4, r1, r0, ror r9
   13f34:	andeq	r4, r1, r0, ror r9
   13f38:	andeq	r4, r1, r0, ror r9
   13f3c:	andeq	r4, r1, r0, ror r9
   13f40:	andeq	r4, r1, r0, ror r9
   13f44:	andeq	r4, r1, r0, ror r9
   13f48:	andeq	r4, r1, r0, ror r9
   13f4c:	andeq	r4, r1, r0, ror r9
   13f50:	andeq	r4, r1, r0, ror #5
   13f54:	andeq	r4, r1, r8, lsr #6
   13f58:	andeq	r4, r1, r0, ror #5
   13f5c:	andeq	r4, r1, r0, lsl #6
   13f60:	mov	r3, #0
   13f64:	str	r3, [sp, #56]	; 0x38
   13f68:	b	13d48 <__assert_fail@plt+0x29c0>
   13f6c:	mov	r3, #114	; 0x72
   13f70:	b	14294 <__assert_fail@plt+0x2f0c>
   13f74:	mov	r3, #98	; 0x62
   13f78:	b	142ac <__assert_fail@plt+0x2f24>
   13f7c:	ldr	r3, [sp, #48]	; 0x30
   13f80:	cmp	r3, #0
   13f84:	beq	1406c <__assert_fail@plt+0x2ce4>
   13f88:	ldr	r3, [sp, #32]
   13f8c:	cmp	r3, #0
   13f90:	bne	14af4 <__assert_fail@plt+0x376c>
   13f94:	ldr	r3, [sp, #44]	; 0x2c
   13f98:	eor	r3, r3, #1
   13f9c:	cmp	sl, #2
   13fa0:	movne	r3, #0
   13fa4:	andeq	r3, r3, #1
   13fa8:	cmp	r3, #0
   13fac:	moveq	r2, fp
   13fb0:	beq	13ff4 <__assert_fail@plt+0x2c6c>
   13fb4:	cmp	r7, fp
   13fb8:	ldrhi	r2, [sp, #36]	; 0x24
   13fbc:	movhi	r1, #39	; 0x27
   13fc0:	strbhi	r1, [r2, fp]
   13fc4:	add	r2, fp, #1
   13fc8:	cmp	r7, r2
   13fcc:	ldrhi	r1, [sp, #36]	; 0x24
   13fd0:	movhi	r0, #36	; 0x24
   13fd4:	strbhi	r0, [r1, r2]
   13fd8:	add	r2, fp, #2
   13fdc:	cmp	r7, r2
   13fe0:	ldrhi	r1, [sp, #36]	; 0x24
   13fe4:	movhi	r0, #39	; 0x27
   13fe8:	strbhi	r0, [r1, r2]
   13fec:	add	r2, fp, #3
   13ff0:	str	r3, [sp, #44]	; 0x2c
   13ff4:	cmp	r7, r2
   13ff8:	ldrhi	r3, [sp, #36]	; 0x24
   13ffc:	movhi	r1, #92	; 0x5c
   14000:	strbhi	r1, [r3, r2]
   14004:	add	fp, r2, #1
   14008:	cmp	r5, #0
   1400c:	beq	14978 <__assert_fail@plt+0x35f0>
   14010:	add	r3, r6, #1
   14014:	ldr	r1, [sp, #28]
   14018:	cmp	r1, r3
   1401c:	bls	14988 <__assert_fail@plt+0x3600>
   14020:	ldr	r1, [sp, #52]	; 0x34
   14024:	ldrb	r3, [r1, r3]
   14028:	sub	r3, r3, #48	; 0x30
   1402c:	uxtb	r3, r3
   14030:	cmp	r3, #9
   14034:	bhi	14994 <__assert_fail@plt+0x360c>
   14038:	cmp	r7, fp
   1403c:	movhi	r3, #48	; 0x30
   14040:	ldrhi	r1, [sp, #36]	; 0x24
   14044:	strbhi	r3, [r1, fp]
   14048:	add	r3, r2, #2
   1404c:	cmp	r7, r3
   14050:	movhi	r1, #48	; 0x30
   14054:	ldrhi	r0, [sp, #36]	; 0x24
   14058:	strbhi	r1, [r0, r3]
   1405c:	add	fp, r2, #3
   14060:	ldr	r8, [sp, #32]
   14064:	mov	r4, #48	; 0x30
   14068:	b	14344 <__assert_fail@plt+0x2fbc>
   1406c:	ldr	r3, [sp, #156]	; 0x9c
   14070:	tst	r3, #1
   14074:	bne	14438 <__assert_fail@plt+0x30b0>
   14078:	ldr	r5, [sp, #48]	; 0x30
   1407c:	mov	r8, r5
   14080:	b	14344 <__assert_fail@plt+0x2fbc>
   14084:	cmp	sl, #2
   14088:	beq	140a0 <__assert_fail@plt+0x2d18>
   1408c:	cmp	sl, #5
   14090:	beq	140b8 <__assert_fail@plt+0x2d30>
   14094:	mov	r8, #0
   14098:	mov	r5, r8
   1409c:	b	14344 <__assert_fail@plt+0x2fbc>
   140a0:	ldr	r3, [sp, #32]
   140a4:	cmp	r3, #0
   140a8:	bne	14b08 <__assert_fail@plt+0x3780>
   140ac:	mov	r8, r3
   140b0:	mov	r5, r3
   140b4:	b	14344 <__assert_fail@plt+0x2fbc>
   140b8:	ldr	r3, [sp, #156]	; 0x9c
   140bc:	tst	r3, #4
   140c0:	beq	149a0 <__assert_fail@plt+0x3618>
   140c4:	add	r3, r6, #2
   140c8:	ldr	r2, [sp, #28]
   140cc:	cmp	r2, r3
   140d0:	bls	149ac <__assert_fail@plt+0x3624>
   140d4:	ldr	r2, [sp, #52]	; 0x34
   140d8:	add	r2, r2, r6
   140dc:	ldrb	r2, [r2, #1]
   140e0:	cmp	r2, #63	; 0x3f
   140e4:	movne	r8, #0
   140e8:	movne	r5, r8
   140ec:	bne	14344 <__assert_fail@plt+0x2fbc>
   140f0:	ldr	r2, [sp, #52]	; 0x34
   140f4:	ldrb	r2, [r2, r3]
   140f8:	sub	r1, r2, #33	; 0x21
   140fc:	cmp	r1, #29
   14100:	ldrls	pc, [pc, r1, lsl #2]
   14104:	b	149b8 <__assert_fail@plt+0x3630>
   14108:	andeq	r4, r1, r0, lsl #3
   1410c:			; <UNDEFINED> instruction: 0x000149b8
   14110:			; <UNDEFINED> instruction: 0x000149b8
   14114:			; <UNDEFINED> instruction: 0x000149b8
   14118:			; <UNDEFINED> instruction: 0x000149b8
   1411c:			; <UNDEFINED> instruction: 0x000149b8
   14120:	andeq	r4, r1, r0, lsl #3
   14124:	andeq	r4, r1, r0, lsl #3
   14128:	andeq	r4, r1, r0, lsl #3
   1412c:			; <UNDEFINED> instruction: 0x000149b8
   14130:			; <UNDEFINED> instruction: 0x000149b8
   14134:			; <UNDEFINED> instruction: 0x000149b8
   14138:	andeq	r4, r1, r0, lsl #3
   1413c:			; <UNDEFINED> instruction: 0x000149b8
   14140:	andeq	r4, r1, r0, lsl #3
   14144:			; <UNDEFINED> instruction: 0x000149b8
   14148:			; <UNDEFINED> instruction: 0x000149b8
   1414c:			; <UNDEFINED> instruction: 0x000149b8
   14150:			; <UNDEFINED> instruction: 0x000149b8
   14154:			; <UNDEFINED> instruction: 0x000149b8
   14158:			; <UNDEFINED> instruction: 0x000149b8
   1415c:			; <UNDEFINED> instruction: 0x000149b8
   14160:			; <UNDEFINED> instruction: 0x000149b8
   14164:			; <UNDEFINED> instruction: 0x000149b8
   14168:			; <UNDEFINED> instruction: 0x000149b8
   1416c:			; <UNDEFINED> instruction: 0x000149b8
   14170:			; <UNDEFINED> instruction: 0x000149b8
   14174:	andeq	r4, r1, r0, lsl #3
   14178:	andeq	r4, r1, r0, lsl #3
   1417c:	andeq	r4, r1, r0, lsl #3
   14180:	ldr	r1, [sp, #32]
   14184:	cmp	r1, #0
   14188:	bne	14bc8 <__assert_fail@plt+0x3840>
   1418c:	cmp	r7, fp
   14190:	movhi	r1, #63	; 0x3f
   14194:	ldrhi	r0, [sp, #36]	; 0x24
   14198:	strbhi	r1, [r0, fp]
   1419c:	add	r1, fp, #1
   141a0:	cmp	r7, r1
   141a4:	ldrhi	r0, [sp, #36]	; 0x24
   141a8:	movhi	ip, #34	; 0x22
   141ac:	strbhi	ip, [r0, r1]
   141b0:	add	r1, fp, #2
   141b4:	cmp	r7, r1
   141b8:	ldrhi	r0, [sp, #36]	; 0x24
   141bc:	movhi	ip, #34	; 0x22
   141c0:	strbhi	ip, [r0, r1]
   141c4:	add	r1, fp, #3
   141c8:	cmp	r7, r1
   141cc:	movhi	r0, #63	; 0x3f
   141d0:	ldrhi	ip, [sp, #36]	; 0x24
   141d4:	strbhi	r0, [ip, r1]
   141d8:	add	fp, fp, #4
   141dc:	ldr	r5, [sp, #32]
   141e0:	mov	r8, r5
   141e4:	mov	r4, r2
   141e8:	mov	r6, r3
   141ec:	b	14344 <__assert_fail@plt+0x2fbc>
   141f0:	mov	r3, #102	; 0x66
   141f4:	b	142ac <__assert_fail@plt+0x2f24>
   141f8:	mov	r3, #118	; 0x76
   141fc:	b	142ac <__assert_fail@plt+0x2f24>
   14200:	cmp	sl, #2
   14204:	beq	14270 <__assert_fail@plt+0x2ee8>
   14208:	ldr	r3, [sp, #48]	; 0x30
   1420c:	ldr	r2, [sp, #32]
   14210:	and	r3, r3, r2
   14214:	tst	r9, r3
   14218:	moveq	r3, r4
   1421c:	beq	142ac <__assert_fail@plt+0x2f24>
   14220:	mov	r8, #0
   14224:	mov	r5, r8
   14228:	eor	r5, r5, #1
   1422c:	ldr	r3, [sp, #44]	; 0x2c
   14230:	and	r5, r5, r3
   14234:	tst	r5, #255	; 0xff
   14238:	beq	14418 <__assert_fail@plt+0x3090>
   1423c:	cmp	r7, fp
   14240:	ldrhi	r3, [sp, #36]	; 0x24
   14244:	movhi	r2, #39	; 0x27
   14248:	strbhi	r2, [r3, fp]
   1424c:	add	r3, fp, #1
   14250:	cmp	r7, r3
   14254:	ldrhi	r2, [sp, #36]	; 0x24
   14258:	movhi	r1, #39	; 0x27
   1425c:	strbhi	r1, [r2, r3]
   14260:	add	fp, fp, #2
   14264:	mov	r3, #0
   14268:	str	r3, [sp, #44]	; 0x2c
   1426c:	b	14418 <__assert_fail@plt+0x3090>
   14270:	ldr	r3, [sp, #32]
   14274:	cmp	r3, #0
   14278:	bne	14b14 <__assert_fail@plt+0x378c>
   1427c:	mov	r8, r3
   14280:	mov	r5, r3
   14284:	b	14228 <__assert_fail@plt+0x2ea0>
   14288:	mov	r3, #110	; 0x6e
   1428c:	b	14294 <__assert_fail@plt+0x2f0c>
   14290:	mov	r3, #116	; 0x74
   14294:	ldr	r2, [sp, #32]
   14298:	cmp	sl, #2
   1429c:	movne	r2, #0
   142a0:	andeq	r2, r2, #1
   142a4:	cmp	r2, #0
   142a8:	bne	142cc <__assert_fail@plt+0x2f44>
   142ac:	ldr	r2, [sp, #48]	; 0x30
   142b0:	cmp	r2, #0
   142b4:	moveq	r8, r2
   142b8:	moveq	r5, r2
   142bc:	beq	14344 <__assert_fail@plt+0x2fbc>
   142c0:	mov	r4, r3
   142c4:	mov	r8, #0
   142c8:	b	1439c <__assert_fail@plt+0x3014>
   142cc:	mov	r8, sl
   142d0:	mov	sl, r7
   142d4:	b	14b40 <__assert_fail@plt+0x37b8>
   142d8:	mov	r3, #97	; 0x61
   142dc:	b	142ac <__assert_fail@plt+0x2f24>
   142e0:	ldr	r3, [sp, #28]
   142e4:	cmn	r3, #1
   142e8:	beq	14314 <__assert_fail@plt+0x2f8c>
   142ec:	ldr	r3, [sp, #28]
   142f0:	subs	r3, r3, #1
   142f4:	movne	r3, #1
   142f8:	cmp	r3, #0
   142fc:	bne	149c4 <__assert_fail@plt+0x363c>
   14300:	cmp	r6, #0
   14304:	beq	1432c <__assert_fail@plt+0x2fa4>
   14308:	mov	r8, #0
   1430c:	mov	r5, r8
   14310:	b	14344 <__assert_fail@plt+0x2fbc>
   14314:	ldr	r3, [sp, #52]	; 0x34
   14318:	ldrb	r3, [r3, #1]
   1431c:	adds	r3, r3, #0
   14320:	movne	r3, #1
   14324:	b	142f8 <__assert_fail@plt+0x2f70>
   14328:	mov	r8, #0
   1432c:	ldr	r5, [sp, #32]
   14330:	cmp	sl, #2
   14334:	movne	r5, #0
   14338:	andeq	r5, r5, #1
   1433c:	cmp	r5, #0
   14340:	bne	144f4 <__assert_fail@plt+0x316c>
   14344:	ldr	r3, [sp, #68]	; 0x44
   14348:	cmp	sl, #2
   1434c:	orreq	r3, r3, #1
   14350:	eor	r3, r3, #1
   14354:	ldr	r2, [sp, #32]
   14358:	orr	r3, r2, r3
   1435c:	tst	r3, #255	; 0xff
   14360:	beq	14390 <__assert_fail@plt+0x3008>
   14364:	ldr	r3, [sp, #160]	; 0xa0
   14368:	cmp	r3, #0
   1436c:	beq	14390 <__assert_fail@plt+0x3008>
   14370:	lsr	r2, r4, #5
   14374:	uxtb	r2, r2
   14378:	and	r3, r4, #31
   1437c:	ldr	r1, [sp, #160]	; 0xa0
   14380:	ldr	r2, [r1, r2, lsl #2]
   14384:	lsr	r3, r2, r3
   14388:	tst	r3, #1
   1438c:	bne	1439c <__assert_fail@plt+0x3014>
   14390:	ldr	r3, [sp, #56]	; 0x38
   14394:	cmp	r3, #0
   14398:	beq	14228 <__assert_fail@plt+0x2ea0>
   1439c:	ldr	r3, [sp, #32]
   143a0:	cmp	r3, #0
   143a4:	bne	14bb0 <__assert_fail@plt+0x3828>
   143a8:	ldr	r3, [sp, #44]	; 0x2c
   143ac:	eor	r3, r3, #1
   143b0:	cmp	sl, #2
   143b4:	movne	r3, #0
   143b8:	andeq	r3, r3, #1
   143bc:	cmp	r3, #0
   143c0:	beq	14404 <__assert_fail@plt+0x307c>
   143c4:	cmp	r7, fp
   143c8:	ldrhi	r2, [sp, #36]	; 0x24
   143cc:	movhi	r1, #39	; 0x27
   143d0:	strbhi	r1, [r2, fp]
   143d4:	add	r2, fp, #1
   143d8:	cmp	r7, r2
   143dc:	ldrhi	r1, [sp, #36]	; 0x24
   143e0:	movhi	r0, #36	; 0x24
   143e4:	strbhi	r0, [r1, r2]
   143e8:	add	r2, fp, #2
   143ec:	cmp	r7, r2
   143f0:	ldrhi	r1, [sp, #36]	; 0x24
   143f4:	movhi	r0, #39	; 0x27
   143f8:	strbhi	r0, [r1, r2]
   143fc:	add	fp, fp, #3
   14400:	str	r3, [sp, #44]	; 0x2c
   14404:	cmp	r7, fp
   14408:	ldrhi	r3, [sp, #36]	; 0x24
   1440c:	movhi	r2, #92	; 0x5c
   14410:	strbhi	r2, [r3, fp]
   14414:	add	fp, fp, #1
   14418:	cmp	fp, r7
   1441c:	ldrcc	r3, [sp, #36]	; 0x24
   14420:	strbcc	r4, [r3, fp]
   14424:	add	fp, fp, #1
   14428:	ldr	r3, [sp, #40]	; 0x28
   1442c:	cmp	r8, #0
   14430:	moveq	r3, #0
   14434:	str	r3, [sp, #40]	; 0x28
   14438:	add	r6, r6, #1
   1443c:	ldr	r3, [sp, #28]
   14440:	cmn	r3, #1
   14444:	beq	149d0 <__assert_fail@plt+0x3648>
   14448:	ldr	r3, [sp, #28]
   1444c:	subs	r8, r3, r6
   14450:	movne	r8, #1
   14454:	cmp	r8, #0
   14458:	beq	149e4 <__assert_fail@plt+0x365c>
   1445c:	ldr	r5, [sp, #48]	; 0x30
   14460:	cmp	sl, #2
   14464:	moveq	r5, #0
   14468:	andne	r5, r5, #1
   1446c:	ldr	r3, [sp, #60]	; 0x3c
   14470:	adds	r9, r3, #0
   14474:	movne	r9, #1
   14478:	ands	r2, r5, r9
   1447c:	str	r2, [sp, #56]	; 0x38
   14480:	beq	13d48 <__assert_fail@plt+0x29c0>
   14484:	add	r4, r6, r3
   14488:	ldr	r2, [sp, #28]
   1448c:	cmp	r3, #1
   14490:	movls	r3, #0
   14494:	movhi	r3, #1
   14498:	cmn	r2, #1
   1449c:	movne	r3, #0
   144a0:	cmp	r3, #0
   144a4:	beq	144b4 <__assert_fail@plt+0x312c>
   144a8:	ldr	r0, [sp, #52]	; 0x34
   144ac:	bl	1125c <strlen@plt>
   144b0:	str	r0, [sp, #28]
   144b4:	ldr	r3, [sp, #28]
   144b8:	cmp	r3, r4
   144bc:	bcc	13d40 <__assert_fail@plt+0x29b8>
   144c0:	ldr	r2, [sp, #60]	; 0x3c
   144c4:	ldr	r1, [sp, #72]	; 0x48
   144c8:	ldr	r3, [sp, #52]	; 0x34
   144cc:	add	r0, r3, r6
   144d0:	bl	1110c <memcmp@plt>
   144d4:	cmp	r0, #0
   144d8:	bne	13f60 <__assert_fail@plt+0x2bd8>
   144dc:	ldr	r3, [sp, #32]
   144e0:	cmp	r3, #0
   144e4:	beq	13d48 <__assert_fail@plt+0x29c0>
   144e8:	mov	r8, sl
   144ec:	mov	sl, r7
   144f0:	b	14b40 <__assert_fail@plt+0x37b8>
   144f4:	mov	r8, sl
   144f8:	mov	sl, r7
   144fc:	b	14b40 <__assert_fail@plt+0x37b8>
   14500:	cmp	sl, #2
   14504:	strne	r8, [sp, #80]	; 0x50
   14508:	movne	r5, #0
   1450c:	bne	14344 <__assert_fail@plt+0x2fbc>
   14510:	ldr	r3, [sp, #32]
   14514:	cmp	r3, #0
   14518:	bne	14b2c <__assert_fail@plt+0x37a4>
   1451c:	ldr	r2, [sp, #76]	; 0x4c
   14520:	adds	r3, r7, #0
   14524:	movne	r3, #1
   14528:	cmp	r2, #0
   1452c:	movne	r3, #0
   14530:	cmp	r3, #0
   14534:	movne	r3, #0
   14538:	bne	14568 <__assert_fail@plt+0x31e0>
   1453c:	cmp	r7, fp
   14540:	ldrhi	r3, [sp, #36]	; 0x24
   14544:	movhi	r2, #39	; 0x27
   14548:	strbhi	r2, [r3, fp]
   1454c:	add	r3, fp, #1
   14550:	cmp	r7, r3
   14554:	ldrhi	r2, [sp, #36]	; 0x24
   14558:	movhi	r1, #92	; 0x5c
   1455c:	strbhi	r1, [r2, r3]
   14560:	mov	r3, r7
   14564:	ldr	r7, [sp, #76]	; 0x4c
   14568:	add	r2, fp, #2
   1456c:	cmp	r2, r3
   14570:	ldrcc	r1, [sp, #36]	; 0x24
   14574:	movcc	r0, #39	; 0x27
   14578:	strbcc	r0, [r1, r2]
   1457c:	add	fp, fp, #3
   14580:	ldr	r2, [sp, #32]
   14584:	mov	r5, r2
   14588:	str	r8, [sp, #80]	; 0x50
   1458c:	str	r2, [sp, #44]	; 0x2c
   14590:	str	r7, [sp, #76]	; 0x4c
   14594:	mov	r7, r3
   14598:	b	14344 <__assert_fail@plt+0x2fbc>
   1459c:	ldr	r5, [sp, #84]	; 0x54
   145a0:	cmp	r5, #1
   145a4:	beq	145d4 <__assert_fail@plt+0x324c>
   145a8:	mov	r3, #0
   145ac:	str	r3, [sp, #104]	; 0x68
   145b0:	str	r3, [sp, #108]	; 0x6c
   145b4:	ldr	r3, [sp, #28]
   145b8:	cmn	r3, #1
   145bc:	beq	14608 <__assert_fail@plt+0x3280>
   145c0:	mov	r3, #0
   145c4:	str	r4, [sp, #88]	; 0x58
   145c8:	str	fp, [sp, #92]	; 0x5c
   145cc:	mov	fp, r3
   145d0:	b	14730 <__assert_fail@plt+0x33a8>
   145d4:	bl	1122c <__ctype_b_loc@plt>
   145d8:	ldr	r2, [r0]
   145dc:	lsl	r3, r4, #1
   145e0:	ldrh	r8, [r2, r3]
   145e4:	lsr	r8, r8, #14
   145e8:	and	r8, r8, #1
   145ec:	mov	r2, r5
   145f0:	eor	r5, r8, #1
   145f4:	ldr	r3, [sp, #48]	; 0x30
   145f8:	and	r5, r5, r3
   145fc:	ands	r5, r5, #255	; 0xff
   14600:	beq	14344 <__assert_fail@plt+0x2fbc>
   14604:	b	147c8 <__assert_fail@plt+0x3440>
   14608:	ldr	r0, [sp, #52]	; 0x34
   1460c:	bl	1125c <strlen@plt>
   14610:	str	r0, [sp, #28]
   14614:	b	145c0 <__assert_fail@plt+0x3238>
   14618:	mov	r2, fp
   1461c:	mov	r1, r4
   14620:	ldr	r4, [sp, #88]	; 0x58
   14624:	ldr	fp, [sp, #92]	; 0x5c
   14628:	ldr	r0, [sp, #28]
   1462c:	cmp	r0, r5
   14630:	bls	147fc <__assert_fail@plt+0x3474>
   14634:	ldrb	r3, [r1]
   14638:	cmp	r3, #0
   1463c:	beq	14804 <__assert_fail@plt+0x347c>
   14640:	mov	r3, r1
   14644:	add	r2, r2, #1
   14648:	add	r1, r6, r2
   1464c:	cmp	r0, r1
   14650:	bls	1480c <__assert_fail@plt+0x3484>
   14654:	ldrb	r1, [r3, #1]!
   14658:	cmp	r1, #0
   1465c:	bne	14644 <__assert_fail@plt+0x32bc>
   14660:	mov	r8, #0
   14664:	b	147c0 <__assert_fail@plt+0x3438>
   14668:	cmp	r4, r5
   1466c:	beq	1470c <__assert_fail@plt+0x3384>
   14670:	ldrb	r3, [r4, #1]!
   14674:	sub	r3, r3, #91	; 0x5b
   14678:	cmp	r3, #33	; 0x21
   1467c:	ldrls	pc, [pc, r3, lsl #2]
   14680:	b	14668 <__assert_fail@plt+0x32e0>
   14684:	andeq	r4, r1, r8, lsr fp
   14688:	andeq	r4, r1, r8, lsr fp
   1468c:	andeq	r4, r1, r8, ror #12
   14690:	andeq	r4, r1, r8, lsr fp
   14694:	andeq	r4, r1, r8, ror #12
   14698:	andeq	r4, r1, r8, lsr fp
   1469c:	andeq	r4, r1, r8, ror #12
   146a0:	andeq	r4, r1, r8, ror #12
   146a4:	andeq	r4, r1, r8, ror #12
   146a8:	andeq	r4, r1, r8, ror #12
   146ac:	andeq	r4, r1, r8, ror #12
   146b0:	andeq	r4, r1, r8, ror #12
   146b4:	andeq	r4, r1, r8, ror #12
   146b8:	andeq	r4, r1, r8, ror #12
   146bc:	andeq	r4, r1, r8, ror #12
   146c0:	andeq	r4, r1, r8, ror #12
   146c4:	andeq	r4, r1, r8, ror #12
   146c8:	andeq	r4, r1, r8, ror #12
   146cc:	andeq	r4, r1, r8, ror #12
   146d0:	andeq	r4, r1, r8, ror #12
   146d4:	andeq	r4, r1, r8, ror #12
   146d8:	andeq	r4, r1, r8, ror #12
   146dc:	andeq	r4, r1, r8, ror #12
   146e0:	andeq	r4, r1, r8, ror #12
   146e4:	andeq	r4, r1, r8, ror #12
   146e8:	andeq	r4, r1, r8, ror #12
   146ec:	andeq	r4, r1, r8, ror #12
   146f0:	andeq	r4, r1, r8, ror #12
   146f4:	andeq	r4, r1, r8, ror #12
   146f8:	andeq	r4, r1, r8, ror #12
   146fc:	andeq	r4, r1, r8, ror #12
   14700:	andeq	r4, r1, r8, ror #12
   14704:	andeq	r4, r1, r8, ror #12
   14708:	andeq	r4, r1, r8, lsr fp
   1470c:	ldr	r0, [sp, #100]	; 0x64
   14710:	bl	1116c <iswprint@plt>
   14714:	cmp	r0, #0
   14718:	moveq	r8, #0
   1471c:	add	fp, fp, r9
   14720:	add	r0, sp, #104	; 0x68
   14724:	bl	11100 <mbsinit@plt>
   14728:	cmp	r0, #0
   1472c:	bne	147a0 <__assert_fail@plt+0x3418>
   14730:	add	r5, r6, fp
   14734:	ldr	r3, [sp, #52]	; 0x34
   14738:	add	r4, r3, r5
   1473c:	add	r3, sp, #104	; 0x68
   14740:	ldr	r2, [sp, #28]
   14744:	sub	r2, r2, r5
   14748:	mov	r1, r4
   1474c:	add	r0, sp, #100	; 0x64
   14750:	bl	136e4 <__assert_fail@plt+0x235c>
   14754:	subs	r9, r0, #0
   14758:	beq	14814 <__assert_fail@plt+0x348c>
   1475c:	cmn	r9, #1
   14760:	beq	147b0 <__assert_fail@plt+0x3428>
   14764:	cmn	r9, #2
   14768:	beq	14618 <__assert_fail@plt+0x3290>
   1476c:	ldr	r3, [sp, #32]
   14770:	cmp	sl, #2
   14774:	movne	r3, #0
   14778:	andeq	r3, r3, #1
   1477c:	cmp	r3, #0
   14780:	beq	1470c <__assert_fail@plt+0x3384>
   14784:	cmp	r9, #1
   14788:	bls	1470c <__assert_fail@plt+0x3384>
   1478c:	sub	r3, r9, #1
   14790:	add	r5, r3, r5
   14794:	ldr	r3, [sp, #52]	; 0x34
   14798:	add	r5, r3, r5
   1479c:	b	14670 <__assert_fail@plt+0x32e8>
   147a0:	ldr	r4, [sp, #88]	; 0x58
   147a4:	mov	r2, fp
   147a8:	ldr	fp, [sp, #92]	; 0x5c
   147ac:	b	147c0 <__assert_fail@plt+0x3438>
   147b0:	ldr	r4, [sp, #88]	; 0x58
   147b4:	mov	r2, fp
   147b8:	ldr	fp, [sp, #92]	; 0x5c
   147bc:	mov	r8, #0
   147c0:	cmp	r2, #1
   147c4:	bls	145f0 <__assert_fail@plt+0x3268>
   147c8:	add	r1, r6, r2
   147cc:	ldr	ip, [sp, #64]	; 0x40
   147d0:	mov	r5, #0
   147d4:	eor	r3, r8, #1
   147d8:	ldr	r2, [sp, #48]	; 0x30
   147dc:	and	r3, r3, r2
   147e0:	uxtb	r3, r3
   147e4:	ldr	r9, [sp, #32]
   147e8:	ldr	lr, [sp, #44]	; 0x2c
   147ec:	ldr	r2, [sp, #56]	; 0x38
   147f0:	str	r8, [sp, #56]	; 0x38
   147f4:	ldr	r0, [sp, #36]	; 0x24
   147f8:	b	14894 <__assert_fail@plt+0x350c>
   147fc:	mov	r8, #0
   14800:	b	147c0 <__assert_fail@plt+0x3438>
   14804:	mov	r8, #0
   14808:	b	147c0 <__assert_fail@plt+0x3438>
   1480c:	mov	r8, #0
   14810:	b	147c0 <__assert_fail@plt+0x3438>
   14814:	ldr	r4, [sp, #88]	; 0x58
   14818:	mov	r2, fp
   1481c:	ldr	fp, [sp, #92]	; 0x5c
   14820:	b	147c0 <__assert_fail@plt+0x3438>
   14824:	cmp	r2, #0
   14828:	beq	1483c <__assert_fail@plt+0x34b4>
   1482c:	cmp	r7, fp
   14830:	movhi	r2, #92	; 0x5c
   14834:	strbhi	r2, [r0, fp]
   14838:	add	fp, fp, #1
   1483c:	add	r8, r6, #1
   14840:	cmp	r1, r8
   14844:	bls	1494c <__assert_fail@plt+0x35c4>
   14848:	eor	r2, r5, #1
   1484c:	and	r2, r2, lr
   14850:	ands	r2, r2, #255	; 0xff
   14854:	beq	14968 <__assert_fail@plt+0x35e0>
   14858:	cmp	r7, fp
   1485c:	movhi	r2, #39	; 0x27
   14860:	strbhi	r2, [r0, fp]
   14864:	add	r2, fp, #1
   14868:	cmp	r7, r2
   1486c:	movhi	lr, #39	; 0x27
   14870:	strbhi	lr, [r0, r2]
   14874:	add	fp, fp, #2
   14878:	mov	r6, r8
   1487c:	mov	r2, r3
   14880:	mov	lr, r3
   14884:	cmp	r7, fp
   14888:	strbhi	r4, [r0, fp]
   1488c:	add	fp, fp, #1
   14890:	ldrb	r4, [ip, #1]!
   14894:	cmp	r3, #0
   14898:	beq	14824 <__assert_fail@plt+0x349c>
   1489c:	cmp	r9, #0
   148a0:	bne	14ba4 <__assert_fail@plt+0x381c>
   148a4:	eor	r5, lr, #1
   148a8:	cmp	sl, #2
   148ac:	movne	r5, #0
   148b0:	andeq	r5, r5, #1
   148b4:	cmp	r5, #0
   148b8:	beq	148f0 <__assert_fail@plt+0x3568>
   148bc:	cmp	r7, fp
   148c0:	movhi	lr, #39	; 0x27
   148c4:	strbhi	lr, [r0, fp]
   148c8:	add	lr, fp, #1
   148cc:	cmp	r7, lr
   148d0:	movhi	r8, #36	; 0x24
   148d4:	strbhi	r8, [r0, lr]
   148d8:	add	lr, fp, #2
   148dc:	cmp	r7, lr
   148e0:	movhi	r8, #39	; 0x27
   148e4:	strbhi	r8, [r0, lr]
   148e8:	add	fp, fp, #3
   148ec:	mov	lr, r5
   148f0:	cmp	r7, fp
   148f4:	movhi	r5, #92	; 0x5c
   148f8:	strbhi	r5, [r0, fp]
   148fc:	add	r5, fp, #1
   14900:	cmp	r7, r5
   14904:	lsrhi	r8, r4, #6
   14908:	addhi	r8, r8, #48	; 0x30
   1490c:	strbhi	r8, [r0, r5]
   14910:	add	r8, fp, #2
   14914:	cmp	r7, r8
   14918:	lsrhi	r5, r4, #3
   1491c:	andhi	r5, r5, #7
   14920:	addhi	r5, r5, #48	; 0x30
   14924:	strbhi	r5, [r0, r8]
   14928:	add	fp, fp, #3
   1492c:	and	r4, r4, #7
   14930:	add	r4, r4, #48	; 0x30
   14934:	add	r5, r6, #1
   14938:	cmp	r1, r5
   1493c:	bls	14958 <__assert_fail@plt+0x35d0>
   14940:	mov	r6, r5
   14944:	mov	r5, r3
   14948:	b	14884 <__assert_fail@plt+0x34fc>
   1494c:	str	lr, [sp, #44]	; 0x2c
   14950:	ldr	r8, [sp, #56]	; 0x38
   14954:	b	14228 <__assert_fail@plt+0x2ea0>
   14958:	str	lr, [sp, #44]	; 0x2c
   1495c:	ldr	r8, [sp, #56]	; 0x38
   14960:	mov	r5, r3
   14964:	b	14228 <__assert_fail@plt+0x2ea0>
   14968:	mov	r6, r8
   1496c:	b	14884 <__assert_fail@plt+0x34fc>
   14970:	mov	r5, #0
   14974:	b	14344 <__assert_fail@plt+0x2fbc>
   14978:	mov	r8, r5
   1497c:	ldr	r5, [sp, #48]	; 0x30
   14980:	mov	r4, #48	; 0x30
   14984:	b	14344 <__assert_fail@plt+0x2fbc>
   14988:	ldr	r8, [sp, #32]
   1498c:	mov	r4, #48	; 0x30
   14990:	b	14344 <__assert_fail@plt+0x2fbc>
   14994:	ldr	r8, [sp, #32]
   14998:	mov	r4, #48	; 0x30
   1499c:	b	14344 <__assert_fail@plt+0x2fbc>
   149a0:	mov	r8, #0
   149a4:	mov	r5, r8
   149a8:	b	14344 <__assert_fail@plt+0x2fbc>
   149ac:	mov	r8, #0
   149b0:	mov	r5, r8
   149b4:	b	14344 <__assert_fail@plt+0x2fbc>
   149b8:	mov	r8, #0
   149bc:	mov	r5, r8
   149c0:	b	14344 <__assert_fail@plt+0x2fbc>
   149c4:	mov	r8, #0
   149c8:	mov	r5, r8
   149cc:	b	14344 <__assert_fail@plt+0x2fbc>
   149d0:	ldr	r3, [sp, #52]	; 0x34
   149d4:	ldrb	r8, [r3, r6]
   149d8:	adds	r8, r8, #0
   149dc:	movne	r8, #1
   149e0:	b	14454 <__assert_fail@plt+0x30cc>
   149e4:	cmp	sl, #2
   149e8:	movne	r3, #0
   149ec:	moveq	r3, #1
   149f0:	ldr	r1, [sp, #32]
   149f4:	mov	r2, r1
   149f8:	and	r2, r2, r3
   149fc:	cmp	fp, #0
   14a00:	movne	r2, #0
   14a04:	andeq	r2, r2, #1
   14a08:	cmp	r2, #0
   14a0c:	bne	14bbc <__assert_fail@plt+0x3834>
   14a10:	eor	r2, r1, #1
   14a14:	and	r3, r3, r2
   14a18:	ldr	r1, [sp, #80]	; 0x50
   14a1c:	tst	r1, r3
   14a20:	beq	14a98 <__assert_fail@plt+0x3710>
   14a24:	ldr	r3, [sp, #40]	; 0x28
   14a28:	cmp	r3, #0
   14a2c:	bne	14a54 <__assert_fail@plt+0x36cc>
   14a30:	ldr	r1, [sp, #76]	; 0x4c
   14a34:	clz	r3, r7
   14a38:	lsr	r3, r3, #5
   14a3c:	cmp	r1, #0
   14a40:	moveq	r3, #0
   14a44:	cmp	r3, #0
   14a48:	beq	14a98 <__assert_fail@plt+0x3710>
   14a4c:	ldr	r7, [sp, #76]	; 0x4c
   14a50:	b	13ae8 <__assert_fail@plt+0x2760>
   14a54:	ldr	r3, [sp, #168]	; 0xa8
   14a58:	str	r3, [sp, #16]
   14a5c:	ldr	r3, [sp, #164]	; 0xa4
   14a60:	str	r3, [sp, #12]
   14a64:	ldr	r3, [sp, #160]	; 0xa0
   14a68:	str	r3, [sp, #8]
   14a6c:	ldr	r3, [sp, #156]	; 0x9c
   14a70:	str	r3, [sp, #4]
   14a74:	mov	r3, #5
   14a78:	str	r3, [sp]
   14a7c:	ldr	r3, [sp, #28]
   14a80:	ldr	r2, [sp, #52]	; 0x34
   14a84:	ldr	r1, [sp, #76]	; 0x4c
   14a88:	ldr	r0, [sp, #36]	; 0x24
   14a8c:	bl	13a88 <__assert_fail@plt+0x2700>
   14a90:	mov	fp, r0
   14a94:	b	14b98 <__assert_fail@plt+0x3810>
   14a98:	mov	sl, r7
   14a9c:	ldr	r3, [sp, #72]	; 0x48
   14aa0:	cmp	r3, #0
   14aa4:	moveq	r2, #0
   14aa8:	andne	r2, r2, #1
   14aac:	cmp	r2, #0
   14ab0:	beq	14ae0 <__assert_fail@plt+0x3758>
   14ab4:	mov	r2, r3
   14ab8:	ldrb	r3, [r3]
   14abc:	cmp	r3, #0
   14ac0:	beq	14ae0 <__assert_fail@plt+0x3758>
   14ac4:	ldr	r1, [sp, #36]	; 0x24
   14ac8:	cmp	sl, fp
   14acc:	strbhi	r3, [r1, fp]
   14ad0:	add	fp, fp, #1
   14ad4:	ldrb	r3, [r2, #1]!
   14ad8:	cmp	r3, #0
   14adc:	bne	14ac8 <__assert_fail@plt+0x3740>
   14ae0:	cmp	sl, fp
   14ae4:	movhi	r3, #0
   14ae8:	ldrhi	r2, [sp, #36]	; 0x24
   14aec:	strbhi	r3, [r2, fp]
   14af0:	b	14b98 <__assert_fail@plt+0x3810>
   14af4:	mov	r8, sl
   14af8:	mov	sl, r7
   14afc:	ldr	r3, [sp, #32]
   14b00:	str	r3, [sp, #48]	; 0x30
   14b04:	b	14b40 <__assert_fail@plt+0x37b8>
   14b08:	mov	r8, sl
   14b0c:	mov	sl, r7
   14b10:	b	14b40 <__assert_fail@plt+0x37b8>
   14b14:	mov	r8, sl
   14b18:	mov	sl, r7
   14b1c:	b	14b40 <__assert_fail@plt+0x37b8>
   14b20:	andeq	r7, r1, ip, ror #24
   14b24:	andeq	r7, r1, ip, ror ip
   14b28:	andeq	r7, r1, r0, ror ip
   14b2c:	mov	r8, sl
   14b30:	mov	sl, r7
   14b34:	b	14b40 <__assert_fail@plt+0x37b8>
   14b38:	mov	r8, sl
   14b3c:	mov	sl, r7
   14b40:	ldr	r3, [sp, #48]	; 0x30
   14b44:	cmp	r8, #2
   14b48:	movne	r3, #0
   14b4c:	andeq	r3, r3, #1
   14b50:	cmp	r3, #0
   14b54:	movne	r8, #4
   14b58:	ldr	r3, [sp, #168]	; 0xa8
   14b5c:	str	r3, [sp, #16]
   14b60:	ldr	r3, [sp, #164]	; 0xa4
   14b64:	str	r3, [sp, #12]
   14b68:	mov	r3, #0
   14b6c:	str	r3, [sp, #8]
   14b70:	ldr	r3, [sp, #156]	; 0x9c
   14b74:	bic	r3, r3, #2
   14b78:	str	r3, [sp, #4]
   14b7c:	str	r8, [sp]
   14b80:	ldr	r3, [sp, #28]
   14b84:	ldr	r2, [sp, #52]	; 0x34
   14b88:	mov	r1, sl
   14b8c:	ldr	r0, [sp, #36]	; 0x24
   14b90:	bl	13a88 <__assert_fail@plt+0x2700>
   14b94:	mov	fp, r0
   14b98:	mov	r0, fp
   14b9c:	add	sp, sp, #116	; 0x74
   14ba0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14ba4:	mov	r8, sl
   14ba8:	mov	sl, r7
   14bac:	b	14b40 <__assert_fail@plt+0x37b8>
   14bb0:	mov	r8, sl
   14bb4:	mov	sl, r7
   14bb8:	b	14b40 <__assert_fail@plt+0x37b8>
   14bbc:	mov	r8, sl
   14bc0:	mov	sl, r7
   14bc4:	b	14b40 <__assert_fail@plt+0x37b8>
   14bc8:	mov	r8, sl
   14bcc:	mov	sl, r7
   14bd0:	b	14b58 <__assert_fail@plt+0x37d0>
   14bd4:	mov	r3, #1
   14bd8:	str	r3, [sp, #32]
   14bdc:	str	r3, [sp, #48]	; 0x30
   14be0:	str	r3, [sp, #60]	; 0x3c
   14be4:	ldr	r3, [pc, #-196]	; 14b28 <__assert_fail@plt+0x37a0>
   14be8:	str	r3, [sp, #72]	; 0x48
   14bec:	mov	fp, #0
   14bf0:	mov	sl, #5
   14bf4:	b	13b44 <__assert_fail@plt+0x27bc>
   14bf8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14bfc:	sub	sp, sp, #52	; 0x34
   14c00:	mov	r5, r0
   14c04:	str	r1, [sp, #24]
   14c08:	str	r2, [sp, #28]
   14c0c:	mov	r4, r3
   14c10:	bl	11280 <__errno_location@plt>
   14c14:	str	r0, [sp, #32]
   14c18:	ldr	r3, [r0]
   14c1c:	str	r3, [sp, #36]	; 0x24
   14c20:	ldr	r3, [pc, #396]	; 14db4 <__assert_fail@plt+0x3a2c>
   14c24:	ldr	r6, [r3]
   14c28:	cmn	r5, #-2147483647	; 0x80000001
   14c2c:	movne	r3, #0
   14c30:	moveq	r3, #1
   14c34:	orrs	r3, r3, r5, lsr #31
   14c38:	bne	14d78 <__assert_fail@plt+0x39f0>
   14c3c:	ldr	r3, [pc, #368]	; 14db4 <__assert_fail@plt+0x3a2c>
   14c40:	ldr	r2, [r3, #4]
   14c44:	cmp	r5, r2
   14c48:	blt	14cb0 <__assert_fail@plt+0x3928>
   14c4c:	str	r2, [sp, #44]	; 0x2c
   14c50:	add	r3, r3, #8
   14c54:	cmp	r6, r3
   14c58:	beq	14d7c <__assert_fail@plt+0x39f4>
   14c5c:	sub	r2, r5, r2
   14c60:	mov	r3, #8
   14c64:	str	r3, [sp]
   14c68:	mvn	r3, #-2147483648	; 0x80000000
   14c6c:	add	r2, r2, #1
   14c70:	add	r1, sp, #44	; 0x2c
   14c74:	mov	r0, r6
   14c78:	bl	15e90 <__assert_fail@plt+0x4b08>
   14c7c:	mov	r6, r0
   14c80:	ldr	r3, [pc, #300]	; 14db4 <__assert_fail@plt+0x3a2c>
   14c84:	str	r0, [r3]
   14c88:	ldr	r7, [pc, #292]	; 14db4 <__assert_fail@plt+0x3a2c>
   14c8c:	ldr	r0, [r7, #4]
   14c90:	ldr	r2, [sp, #44]	; 0x2c
   14c94:	sub	r2, r2, r0
   14c98:	lsl	r2, r2, #3
   14c9c:	mov	r1, #0
   14ca0:	add	r0, r6, r0, lsl #3
   14ca4:	bl	112a4 <memset@plt>
   14ca8:	ldr	r3, [sp, #44]	; 0x2c
   14cac:	str	r3, [r7, #4]
   14cb0:	add	fp, r6, r5, lsl #3
   14cb4:	ldr	r8, [r6, r5, lsl #3]
   14cb8:	ldr	r7, [fp, #4]
   14cbc:	ldr	r9, [r4, #4]
   14cc0:	orr	r9, r9, #1
   14cc4:	add	sl, r4, #8
   14cc8:	ldr	r3, [r4, #44]	; 0x2c
   14ccc:	str	r3, [sp, #16]
   14cd0:	ldr	r3, [r4, #40]	; 0x28
   14cd4:	str	r3, [sp, #12]
   14cd8:	str	sl, [sp, #8]
   14cdc:	str	r9, [sp, #4]
   14ce0:	ldr	r3, [r4]
   14ce4:	str	r3, [sp]
   14ce8:	ldr	r3, [sp, #28]
   14cec:	ldr	r2, [sp, #24]
   14cf0:	mov	r1, r8
   14cf4:	mov	r0, r7
   14cf8:	bl	13a88 <__assert_fail@plt+0x2700>
   14cfc:	cmp	r8, r0
   14d00:	bhi	14d60 <__assert_fail@plt+0x39d8>
   14d04:	add	r8, r0, #1
   14d08:	str	r8, [r6, r5, lsl #3]
   14d0c:	ldr	r3, [pc, #164]	; 14db8 <__assert_fail@plt+0x3a30>
   14d10:	cmp	r7, r3
   14d14:	beq	14d20 <__assert_fail@plt+0x3998>
   14d18:	mov	r0, r7
   14d1c:	bl	134dc <__assert_fail@plt+0x2154>
   14d20:	mov	r0, r8
   14d24:	bl	15d0c <__assert_fail@plt+0x4984>
   14d28:	mov	r7, r0
   14d2c:	str	r0, [fp, #4]
   14d30:	ldr	r3, [r4, #44]	; 0x2c
   14d34:	str	r3, [sp, #16]
   14d38:	ldr	r3, [r4, #40]	; 0x28
   14d3c:	str	r3, [sp, #12]
   14d40:	str	sl, [sp, #8]
   14d44:	str	r9, [sp, #4]
   14d48:	ldr	r3, [r4]
   14d4c:	str	r3, [sp]
   14d50:	ldr	r3, [sp, #28]
   14d54:	ldr	r2, [sp, #24]
   14d58:	mov	r1, r8
   14d5c:	bl	13a88 <__assert_fail@plt+0x2700>
   14d60:	ldr	r3, [sp, #32]
   14d64:	ldr	r2, [sp, #36]	; 0x24
   14d68:	str	r2, [r3]
   14d6c:	mov	r0, r7
   14d70:	add	sp, sp, #52	; 0x34
   14d74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14d78:	bl	11370 <abort@plt>
   14d7c:	sub	r2, r5, r2
   14d80:	mov	r3, #8
   14d84:	str	r3, [sp]
   14d88:	mvn	r3, #-2147483648	; 0x80000000
   14d8c:	add	r2, r2, #1
   14d90:	add	r1, sp, #44	; 0x2c
   14d94:	mov	r0, #0
   14d98:	bl	15e90 <__assert_fail@plt+0x4b08>
   14d9c:	mov	r6, r0
   14da0:	ldr	r3, [pc, #12]	; 14db4 <__assert_fail@plt+0x3a2c>
   14da4:	str	r0, [r3], #8
   14da8:	ldm	r3, {r0, r1}
   14dac:	stm	r6, {r0, r1}
   14db0:	b	14c88 <__assert_fail@plt+0x3900>
   14db4:	andeq	r9, r2, r0, lsr r1
   14db8:	andeq	r9, r2, ip, ror #3
   14dbc:	push	{r4, r5, r6, lr}
   14dc0:	mov	r4, r0
   14dc4:	bl	11280 <__errno_location@plt>
   14dc8:	mov	r5, r0
   14dcc:	ldr	r6, [r0]
   14dd0:	cmp	r4, #0
   14dd4:	ldr	r3, [pc, #20]	; 14df0 <__assert_fail@plt+0x3a68>
   14dd8:	moveq	r4, r3
   14ddc:	mov	r1, #48	; 0x30
   14de0:	mov	r0, r4
   14de4:	bl	161f8 <__assert_fail@plt+0x4e70>
   14de8:	str	r6, [r5]
   14dec:	pop	{r4, r5, r6, pc}
   14df0:	andeq	r9, r2, ip, ror #5
   14df4:	subs	r3, r0, #0
   14df8:	ldr	r2, [pc, #8]	; 14e08 <__assert_fail@plt+0x3a80>
   14dfc:	moveq	r3, r2
   14e00:	ldr	r0, [r3]
   14e04:	bx	lr
   14e08:	andeq	r9, r2, ip, ror #5
   14e0c:	subs	r3, r0, #0
   14e10:	ldr	r2, [pc, #8]	; 14e20 <__assert_fail@plt+0x3a98>
   14e14:	moveq	r3, r2
   14e18:	str	r1, [r3]
   14e1c:	bx	lr
   14e20:	andeq	r9, r2, ip, ror #5
   14e24:	push	{lr}		; (str lr, [sp, #-4]!)
   14e28:	subs	r3, r0, #0
   14e2c:	ldr	r0, [pc, #44]	; 14e60 <__assert_fail@plt+0x3ad8>
   14e30:	moveq	r3, r0
   14e34:	add	r3, r3, #8
   14e38:	lsr	lr, r1, #5
   14e3c:	and	r1, r1, #31
   14e40:	ldr	ip, [r3, lr, lsl #2]
   14e44:	lsr	r0, ip, r1
   14e48:	eor	r2, r2, r0
   14e4c:	and	r2, r2, #1
   14e50:	eor	r1, ip, r2, lsl r1
   14e54:	str	r1, [r3, lr, lsl #2]
   14e58:	and	r0, r0, #1
   14e5c:	pop	{pc}		; (ldr pc, [sp], #4)
   14e60:	andeq	r9, r2, ip, ror #5
   14e64:	subs	r3, r0, #0
   14e68:	ldr	r2, [pc, #12]	; 14e7c <__assert_fail@plt+0x3af4>
   14e6c:	moveq	r3, r2
   14e70:	ldr	r0, [r3, #4]
   14e74:	str	r1, [r3, #4]
   14e78:	bx	lr
   14e7c:	andeq	r9, r2, ip, ror #5
   14e80:	subs	r3, r0, #0
   14e84:	ldr	r0, [pc, #40]	; 14eb4 <__assert_fail@plt+0x3b2c>
   14e88:	moveq	r3, r0
   14e8c:	mov	r0, #10
   14e90:	str	r0, [r3]
   14e94:	cmp	r2, #0
   14e98:	cmpne	r1, #0
   14e9c:	beq	14eac <__assert_fail@plt+0x3b24>
   14ea0:	str	r1, [r3, #40]	; 0x28
   14ea4:	str	r2, [r3, #44]	; 0x2c
   14ea8:	bx	lr
   14eac:	push	{r4, lr}
   14eb0:	bl	11370 <abort@plt>
   14eb4:	andeq	r9, r2, ip, ror #5
   14eb8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14ebc:	sub	sp, sp, #24
   14ec0:	mov	r7, r0
   14ec4:	mov	r8, r1
   14ec8:	mov	r9, r2
   14ecc:	mov	sl, r3
   14ed0:	ldr	r4, [sp, #56]	; 0x38
   14ed4:	cmp	r4, #0
   14ed8:	ldr	r3, [pc, #84]	; 14f34 <__assert_fail@plt+0x3bac>
   14edc:	moveq	r4, r3
   14ee0:	bl	11280 <__errno_location@plt>
   14ee4:	mov	r5, r0
   14ee8:	ldr	r6, [r0]
   14eec:	ldr	r3, [r4, #44]	; 0x2c
   14ef0:	str	r3, [sp, #16]
   14ef4:	ldr	r3, [r4, #40]	; 0x28
   14ef8:	str	r3, [sp, #12]
   14efc:	add	r3, r4, #8
   14f00:	str	r3, [sp, #8]
   14f04:	ldr	r3, [r4, #4]
   14f08:	str	r3, [sp, #4]
   14f0c:	ldr	r3, [r4]
   14f10:	str	r3, [sp]
   14f14:	mov	r3, sl
   14f18:	mov	r2, r9
   14f1c:	mov	r1, r8
   14f20:	mov	r0, r7
   14f24:	bl	13a88 <__assert_fail@plt+0x2700>
   14f28:	str	r6, [r5]
   14f2c:	add	sp, sp, #24
   14f30:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14f34:	andeq	r9, r2, ip, ror #5
   14f38:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14f3c:	sub	sp, sp, #44	; 0x2c
   14f40:	str	r0, [sp, #28]
   14f44:	str	r1, [sp, #32]
   14f48:	mov	r6, r2
   14f4c:	subs	r4, r3, #0
   14f50:	ldr	r3, [pc, #172]	; 15004 <__assert_fail@plt+0x3c7c>
   14f54:	moveq	r4, r3
   14f58:	bl	11280 <__errno_location@plt>
   14f5c:	mov	r7, r0
   14f60:	ldr	fp, [r0]
   14f64:	ldr	r5, [r4, #4]
   14f68:	cmp	r6, #0
   14f6c:	orreq	r5, r5, #1
   14f70:	add	r9, r4, #8
   14f74:	ldr	r3, [r4, #44]	; 0x2c
   14f78:	str	r3, [sp, #16]
   14f7c:	ldr	r3, [r4, #40]	; 0x28
   14f80:	str	r3, [sp, #12]
   14f84:	str	r9, [sp, #8]
   14f88:	str	r5, [sp, #4]
   14f8c:	ldr	r3, [r4]
   14f90:	str	r3, [sp]
   14f94:	ldr	r3, [sp, #32]
   14f98:	ldr	r2, [sp, #28]
   14f9c:	mov	r1, #0
   14fa0:	mov	r0, r1
   14fa4:	bl	13a88 <__assert_fail@plt+0x2700>
   14fa8:	mov	sl, r0
   14fac:	add	r8, r0, #1
   14fb0:	mov	r0, r8
   14fb4:	bl	15d0c <__assert_fail@plt+0x4984>
   14fb8:	str	r0, [sp, #36]	; 0x24
   14fbc:	ldr	r3, [r4, #44]	; 0x2c
   14fc0:	str	r3, [sp, #16]
   14fc4:	ldr	r3, [r4, #40]	; 0x28
   14fc8:	str	r3, [sp, #12]
   14fcc:	str	r9, [sp, #8]
   14fd0:	str	r5, [sp, #4]
   14fd4:	ldr	r3, [r4]
   14fd8:	str	r3, [sp]
   14fdc:	ldr	r3, [sp, #32]
   14fe0:	ldr	r2, [sp, #28]
   14fe4:	mov	r1, r8
   14fe8:	bl	13a88 <__assert_fail@plt+0x2700>
   14fec:	str	fp, [r7]
   14ff0:	cmp	r6, #0
   14ff4:	strne	sl, [r6]
   14ff8:	ldr	r0, [sp, #36]	; 0x24
   14ffc:	add	sp, sp, #44	; 0x2c
   15000:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15004:	andeq	r9, r2, ip, ror #5
   15008:	push	{r4, lr}
   1500c:	mov	r3, r2
   15010:	mov	r2, #0
   15014:	bl	14f38 <__assert_fail@plt+0x3bb0>
   15018:	pop	{r4, pc}
   1501c:	push	{r4, r5, r6, r7, r8, lr}
   15020:	ldr	r3, [pc, #140]	; 150b4 <__assert_fail@plt+0x3d2c>
   15024:	ldr	r7, [r3]
   15028:	ldr	r3, [r3, #4]
   1502c:	cmp	r3, #1
   15030:	ble	1505c <__assert_fail@plt+0x3cd4>
   15034:	mov	r5, r7
   15038:	mov	r4, #1
   1503c:	ldr	r6, [pc, #112]	; 150b4 <__assert_fail@plt+0x3d2c>
   15040:	ldr	r0, [r5, #12]
   15044:	bl	134dc <__assert_fail@plt+0x2154>
   15048:	add	r4, r4, #1
   1504c:	add	r5, r5, #8
   15050:	ldr	r3, [r6, #4]
   15054:	cmp	r3, r4
   15058:	bgt	15040 <__assert_fail@plt+0x3cb8>
   1505c:	ldr	r0, [r7, #4]
   15060:	ldr	r3, [pc, #80]	; 150b8 <__assert_fail@plt+0x3d30>
   15064:	cmp	r0, r3
   15068:	beq	15084 <__assert_fail@plt+0x3cfc>
   1506c:	bl	134dc <__assert_fail@plt+0x2154>
   15070:	ldr	r3, [pc, #60]	; 150b4 <__assert_fail@plt+0x3d2c>
   15074:	mov	r2, #256	; 0x100
   15078:	str	r2, [r3, #8]
   1507c:	ldr	r2, [pc, #52]	; 150b8 <__assert_fail@plt+0x3d30>
   15080:	str	r2, [r3, #12]
   15084:	ldr	r3, [pc, #48]	; 150bc <__assert_fail@plt+0x3d34>
   15088:	cmp	r7, r3
   1508c:	beq	150a4 <__assert_fail@plt+0x3d1c>
   15090:	mov	r0, r7
   15094:	bl	134dc <__assert_fail@plt+0x2154>
   15098:	ldr	r3, [pc, #20]	; 150b4 <__assert_fail@plt+0x3d2c>
   1509c:	add	r2, r3, #8
   150a0:	str	r2, [r3]
   150a4:	mov	r2, #1
   150a8:	ldr	r3, [pc, #4]	; 150b4 <__assert_fail@plt+0x3d2c>
   150ac:	str	r2, [r3, #4]
   150b0:	pop	{r4, r5, r6, r7, r8, pc}
   150b4:	andeq	r9, r2, r0, lsr r1
   150b8:	andeq	r9, r2, ip, ror #3
   150bc:	andeq	r9, r2, r8, lsr r1
   150c0:	push	{r4, lr}
   150c4:	ldr	r3, [pc, #8]	; 150d4 <__assert_fail@plt+0x3d4c>
   150c8:	mvn	r2, #0
   150cc:	bl	14bf8 <__assert_fail@plt+0x3870>
   150d0:	pop	{r4, pc}
   150d4:	andeq	r9, r2, ip, ror #5
   150d8:	push	{r4, lr}
   150dc:	ldr	r3, [pc, #4]	; 150e8 <__assert_fail@plt+0x3d60>
   150e0:	bl	14bf8 <__assert_fail@plt+0x3870>
   150e4:	pop	{r4, pc}
   150e8:	andeq	r9, r2, ip, ror #5
   150ec:	push	{r4, lr}
   150f0:	mov	r1, r0
   150f4:	mov	r0, #0
   150f8:	bl	150c0 <__assert_fail@plt+0x3d38>
   150fc:	pop	{r4, pc}
   15100:	push	{r4, lr}
   15104:	mov	r2, r1
   15108:	mov	r1, r0
   1510c:	mov	r0, #0
   15110:	bl	150d8 <__assert_fail@plt+0x3d50>
   15114:	pop	{r4, pc}
   15118:	push	{r4, r5, lr}
   1511c:	sub	sp, sp, #52	; 0x34
   15120:	mov	r4, r0
   15124:	mov	r5, r2
   15128:	mov	r0, sp
   1512c:	bl	13920 <__assert_fail@plt+0x2598>
   15130:	mov	r3, sp
   15134:	mvn	r2, #0
   15138:	mov	r1, r5
   1513c:	mov	r0, r4
   15140:	bl	14bf8 <__assert_fail@plt+0x3870>
   15144:	add	sp, sp, #52	; 0x34
   15148:	pop	{r4, r5, pc}
   1514c:	push	{r4, r5, r6, lr}
   15150:	sub	sp, sp, #48	; 0x30
   15154:	mov	r4, r0
   15158:	mov	r5, r2
   1515c:	mov	r6, r3
   15160:	mov	r0, sp
   15164:	bl	13920 <__assert_fail@plt+0x2598>
   15168:	mov	r3, sp
   1516c:	mov	r2, r6
   15170:	mov	r1, r5
   15174:	mov	r0, r4
   15178:	bl	14bf8 <__assert_fail@plt+0x3870>
   1517c:	add	sp, sp, #48	; 0x30
   15180:	pop	{r4, r5, r6, pc}
   15184:	push	{r4, lr}
   15188:	mov	r2, r1
   1518c:	mov	r1, r0
   15190:	mov	r0, #0
   15194:	bl	15118 <__assert_fail@plt+0x3d90>
   15198:	pop	{r4, pc}
   1519c:	push	{r4, lr}
   151a0:	mov	r3, r2
   151a4:	mov	r2, r1
   151a8:	mov	r1, r0
   151ac:	mov	r0, #0
   151b0:	bl	1514c <__assert_fail@plt+0x3dc4>
   151b4:	pop	{r4, pc}
   151b8:	push	{r4, r5, r6, lr}
   151bc:	sub	sp, sp, #48	; 0x30
   151c0:	mov	r4, r0
   151c4:	mov	r5, r1
   151c8:	mov	r6, r2
   151cc:	mov	ip, sp
   151d0:	ldr	lr, [pc, #64]	; 15218 <__assert_fail@plt+0x3e90>
   151d4:	ldm	lr!, {r0, r1, r2, r3}
   151d8:	stmia	ip!, {r0, r1, r2, r3}
   151dc:	ldm	lr!, {r0, r1, r2, r3}
   151e0:	stmia	ip!, {r0, r1, r2, r3}
   151e4:	ldm	lr, {r0, r1, r2, r3}
   151e8:	stm	ip, {r0, r1, r2, r3}
   151ec:	mov	r2, #1
   151f0:	mov	r1, r6
   151f4:	mov	r0, sp
   151f8:	bl	14e24 <__assert_fail@plt+0x3a9c>
   151fc:	mov	r3, sp
   15200:	mov	r2, r5
   15204:	mov	r1, r4
   15208:	mov	r0, #0
   1520c:	bl	14bf8 <__assert_fail@plt+0x3870>
   15210:	add	sp, sp, #48	; 0x30
   15214:	pop	{r4, r5, r6, pc}
   15218:	andeq	r9, r2, ip, ror #5
   1521c:	push	{r4, lr}
   15220:	mov	r2, r1
   15224:	mvn	r1, #0
   15228:	bl	151b8 <__assert_fail@plt+0x3e30>
   1522c:	pop	{r4, pc}
   15230:	push	{r4, lr}
   15234:	mov	r1, #58	; 0x3a
   15238:	bl	1521c <__assert_fail@plt+0x3e94>
   1523c:	pop	{r4, pc}
   15240:	push	{r4, lr}
   15244:	mov	r2, #58	; 0x3a
   15248:	bl	151b8 <__assert_fail@plt+0x3e30>
   1524c:	pop	{r4, pc}
   15250:	push	{r4, r5, lr}
   15254:	sub	sp, sp, #100	; 0x64
   15258:	mov	r4, r0
   1525c:	mov	r5, r2
   15260:	mov	r0, sp
   15264:	bl	13920 <__assert_fail@plt+0x2598>
   15268:	add	lr, sp, #48	; 0x30
   1526c:	mov	ip, sp
   15270:	ldm	ip!, {r0, r1, r2, r3}
   15274:	stmia	lr!, {r0, r1, r2, r3}
   15278:	ldm	ip!, {r0, r1, r2, r3}
   1527c:	stmia	lr!, {r0, r1, r2, r3}
   15280:	ldm	ip, {r0, r1, r2, r3}
   15284:	stm	lr, {r0, r1, r2, r3}
   15288:	mov	r2, #1
   1528c:	mov	r1, #58	; 0x3a
   15290:	add	r0, sp, #48	; 0x30
   15294:	bl	14e24 <__assert_fail@plt+0x3a9c>
   15298:	add	r3, sp, #48	; 0x30
   1529c:	mvn	r2, #0
   152a0:	mov	r1, r5
   152a4:	mov	r0, r4
   152a8:	bl	14bf8 <__assert_fail@plt+0x3870>
   152ac:	add	sp, sp, #100	; 0x64
   152b0:	pop	{r4, r5, pc}
   152b4:	push	{r4, r5, r6, r7, lr}
   152b8:	sub	sp, sp, #52	; 0x34
   152bc:	mov	r4, r0
   152c0:	mov	r6, r1
   152c4:	mov	r7, r2
   152c8:	mov	r5, r3
   152cc:	mov	ip, sp
   152d0:	ldr	lr, [pc, #64]	; 15318 <__assert_fail@plt+0x3f90>
   152d4:	ldm	lr!, {r0, r1, r2, r3}
   152d8:	stmia	ip!, {r0, r1, r2, r3}
   152dc:	ldm	lr!, {r0, r1, r2, r3}
   152e0:	stmia	ip!, {r0, r1, r2, r3}
   152e4:	ldm	lr, {r0, r1, r2, r3}
   152e8:	stm	ip, {r0, r1, r2, r3}
   152ec:	mov	r2, r7
   152f0:	mov	r1, r6
   152f4:	mov	r0, sp
   152f8:	bl	14e80 <__assert_fail@plt+0x3af8>
   152fc:	mov	r3, sp
   15300:	ldr	r2, [sp, #72]	; 0x48
   15304:	mov	r1, r5
   15308:	mov	r0, r4
   1530c:	bl	14bf8 <__assert_fail@plt+0x3870>
   15310:	add	sp, sp, #52	; 0x34
   15314:	pop	{r4, r5, r6, r7, pc}
   15318:	andeq	r9, r2, ip, ror #5
   1531c:	push	{lr}		; (str lr, [sp, #-4]!)
   15320:	sub	sp, sp, #12
   15324:	mvn	ip, #0
   15328:	str	ip, [sp]
   1532c:	bl	152b4 <__assert_fail@plt+0x3f2c>
   15330:	add	sp, sp, #12
   15334:	pop	{pc}		; (ldr pc, [sp], #4)
   15338:	push	{r4, lr}
   1533c:	mov	r3, r2
   15340:	mov	r2, r1
   15344:	mov	r1, r0
   15348:	mov	r0, #0
   1534c:	bl	1531c <__assert_fail@plt+0x3f94>
   15350:	pop	{r4, pc}
   15354:	push	{lr}		; (str lr, [sp, #-4]!)
   15358:	sub	sp, sp, #12
   1535c:	str	r3, [sp]
   15360:	mov	r3, r2
   15364:	mov	r2, r1
   15368:	mov	r1, r0
   1536c:	mov	r0, #0
   15370:	bl	152b4 <__assert_fail@plt+0x3f2c>
   15374:	add	sp, sp, #12
   15378:	pop	{pc}		; (ldr pc, [sp], #4)
   1537c:	push	{r4, lr}
   15380:	ldr	r3, [pc, #4]	; 1538c <__assert_fail@plt+0x4004>
   15384:	bl	14bf8 <__assert_fail@plt+0x3870>
   15388:	pop	{r4, pc}
   1538c:	andeq	r9, r2, r0, asr #2
   15390:	push	{r4, lr}
   15394:	mov	r2, r1
   15398:	mov	r1, r0
   1539c:	mov	r0, #0
   153a0:	bl	1537c <__assert_fail@plt+0x3ff4>
   153a4:	pop	{r4, pc}
   153a8:	push	{r4, lr}
   153ac:	mvn	r2, #0
   153b0:	bl	1537c <__assert_fail@plt+0x3ff4>
   153b4:	pop	{r4, pc}
   153b8:	push	{r4, lr}
   153bc:	mov	r1, r0
   153c0:	mov	r0, #0
   153c4:	bl	153a8 <__assert_fail@plt+0x4020>
   153c8:	pop	{r4, pc}
   153cc:	push	{r4, r5, r6, lr}
   153d0:	mov	r4, r0
   153d4:	ldr	r3, [r0, #24]
   153d8:	ldr	r6, [r0, #20]
   153dc:	sub	r5, r3, r6
   153e0:	sub	r5, r5, #1
   153e4:	cmp	r3, r6
   153e8:	ldrbeq	r2, [r0, #52]	; 0x34
   153ec:	orreq	r2, r2, #2
   153f0:	strbeq	r2, [r0, #52]	; 0x34
   153f4:	ldr	r2, [r0, #36]	; 0x24
   153f8:	add	r3, r3, r2
   153fc:	bic	r3, r3, r2
   15400:	str	r3, [r0, #24]
   15404:	ldr	r2, [r0, #16]
   15408:	ldr	r1, [r0, #28]
   1540c:	sub	r3, r3, r2
   15410:	sub	r2, r1, r2
   15414:	cmp	r3, r2
   15418:	strhi	r1, [r0, #24]
   1541c:	ldr	r3, [r0, #24]
   15420:	str	r3, [r0, #20]
   15424:	ldr	r3, [r0, #72]	; 0x48
   15428:	ldr	r2, [r0, #68]	; 0x44
   1542c:	sub	r3, r3, r2
   15430:	cmp	r3, #3
   15434:	bls	15484 <__assert_fail@plt+0x40fc>
   15438:	ldr	r3, [r4, #68]	; 0x44
   1543c:	str	r6, [r3]
   15440:	ldr	r3, [r4, #68]	; 0x44
   15444:	add	r3, r3, #4
   15448:	str	r3, [r4, #68]	; 0x44
   1544c:	ldr	r3, [r4, #116]	; 0x74
   15450:	ldr	r2, [r4, #112]	; 0x70
   15454:	sub	r3, r3, r2
   15458:	cmp	r3, #3
   1545c:	bls	15494 <__assert_fail@plt+0x410c>
   15460:	ldr	r3, [r4, #112]	; 0x70
   15464:	str	r5, [r3]
   15468:	ldr	r3, [r4, #112]	; 0x70
   1546c:	add	r3, r3, #4
   15470:	str	r3, [r4, #112]	; 0x70
   15474:	ldr	r3, [r4]
   15478:	add	r3, r3, #1
   1547c:	str	r3, [r4]
   15480:	pop	{r4, r5, r6, pc}
   15484:	mov	r1, #4
   15488:	add	r0, r0, #56	; 0x38
   1548c:	bl	16634 <_obstack_newchunk@@Base>
   15490:	b	15438 <__assert_fail@plt+0x40b0>
   15494:	mov	r1, #4
   15498:	add	r0, r4, #100	; 0x64
   1549c:	bl	16634 <_obstack_newchunk@@Base>
   154a0:	b	15460 <__assert_fail@plt+0x40d8>
   154a4:	push	{r4, r5, r6, r7, lr}
   154a8:	sub	sp, sp, #12
   154ac:	mov	r5, r0
   154b0:	mov	r4, #0
   154b4:	str	r4, [r0]
   154b8:	str	r4, [r0, #4]
   154bc:	str	r4, [r0, #8]
   154c0:	ldr	r6, [pc, #80]	; 15518 <__assert_fail@plt+0x4190>
   154c4:	ldr	r7, [pc, #80]	; 1551c <__assert_fail@plt+0x4194>
   154c8:	str	r7, [sp]
   154cc:	mov	r3, r6
   154d0:	mov	r2, r4
   154d4:	mov	r1, r4
   154d8:	add	r0, r0, #12
   154dc:	bl	165e4 <_obstack_begin@@Base>
   154e0:	str	r7, [sp]
   154e4:	mov	r3, r6
   154e8:	mov	r2, r4
   154ec:	mov	r1, r4
   154f0:	add	r0, r5, #56	; 0x38
   154f4:	bl	165e4 <_obstack_begin@@Base>
   154f8:	str	r7, [sp]
   154fc:	mov	r3, r6
   15500:	mov	r2, r4
   15504:	mov	r1, r4
   15508:	add	r0, r5, #100	; 0x64
   1550c:	bl	165e4 <_obstack_begin@@Base>
   15510:	add	sp, sp, #12
   15514:	pop	{r4, r5, r6, r7, pc}
   15518:	andeq	r6, r1, r8, lsl r3
   1551c:	ldrdeq	r3, [r1], -ip
   15520:	push	{r4, lr}
   15524:	mov	r4, r0
   15528:	mov	r1, #0
   1552c:	add	r0, r0, #12
   15530:	bl	16780 <_obstack_free@@Base>
   15534:	mov	r1, #0
   15538:	add	r0, r4, #56	; 0x38
   1553c:	bl	16780 <_obstack_free@@Base>
   15540:	mov	r1, #0
   15544:	add	r0, r4, #100	; 0x64
   15548:	bl	16780 <_obstack_free@@Base>
   1554c:	pop	{r4, pc}
   15550:	push	{r4, r5, r6, r7, r8, lr}
   15554:	mov	r6, r0
   15558:	mov	r4, r1
   1555c:	add	r8, r1, #12
   15560:	mov	r7, #1
   15564:	b	1569c <__assert_fail@plt+0x4314>
   15568:	ldr	r3, [r4, #24]
   1556c:	ldr	r2, [r4, #20]
   15570:	cmp	r2, r3
   15574:	beq	155a0 <__assert_fail@plt+0x4218>
   15578:	ldr	r2, [r4, #28]
   1557c:	cmp	r2, r3
   15580:	beq	15674 <__assert_fail@plt+0x42ec>
   15584:	ldr	r3, [r4, #24]
   15588:	add	r2, r3, #1
   1558c:	str	r2, [r4, #24]
   15590:	mov	r2, #0
   15594:	strb	r2, [r3]
   15598:	mov	r0, r4
   1559c:	bl	153cc <__assert_fail@plt+0x4044>
   155a0:	ldr	r3, [r4, #72]	; 0x48
   155a4:	ldr	r2, [r4, #68]	; 0x44
   155a8:	sub	r3, r3, r2
   155ac:	cmp	r3, #3
   155b0:	bls	156dc <__assert_fail@plt+0x4354>
   155b4:	ldr	r3, [r4, #68]	; 0x44
   155b8:	mov	r2, #0
   155bc:	str	r2, [r3]
   155c0:	ldr	r3, [r4, #68]	; 0x44
   155c4:	add	r3, r3, #4
   155c8:	str	r3, [r4, #68]	; 0x44
   155cc:	ldr	r1, [r4, #64]	; 0x40
   155d0:	cmp	r3, r1
   155d4:	ldrbeq	r2, [r4, #96]	; 0x60
   155d8:	orreq	r2, r2, #2
   155dc:	strbeq	r2, [r4, #96]	; 0x60
   155e0:	ldr	r2, [r4, #80]	; 0x50
   155e4:	add	r3, r3, r2
   155e8:	bic	r3, r3, r2
   155ec:	str	r3, [r4, #68]	; 0x44
   155f0:	ldr	r2, [r4, #60]	; 0x3c
   155f4:	ldr	r0, [r4, #72]	; 0x48
   155f8:	sub	r3, r3, r2
   155fc:	sub	r2, r0, r2
   15600:	cmp	r3, r2
   15604:	strhi	r0, [r4, #68]	; 0x44
   15608:	ldr	r3, [r4, #68]	; 0x44
   1560c:	str	r3, [r4, #64]	; 0x40
   15610:	str	r1, [r4, #4]
   15614:	ldr	r1, [r4, #108]	; 0x6c
   15618:	ldr	r3, [r4, #112]	; 0x70
   1561c:	cmp	r1, r3
   15620:	ldrbeq	r2, [r4, #140]	; 0x8c
   15624:	orreq	r2, r2, #2
   15628:	strbeq	r2, [r4, #140]	; 0x8c
   1562c:	ldr	r2, [r4, #124]	; 0x7c
   15630:	add	r3, r3, r2
   15634:	bic	r3, r3, r2
   15638:	str	r3, [r4, #112]	; 0x70
   1563c:	ldr	r2, [r4, #104]	; 0x68
   15640:	ldr	r0, [r4, #116]	; 0x74
   15644:	sub	r3, r3, r2
   15648:	sub	r2, r0, r2
   1564c:	cmp	r3, r2
   15650:	strhi	r0, [r4, #112]	; 0x70
   15654:	ldr	r3, [r4, #112]	; 0x70
   15658:	str	r3, [r4, #108]	; 0x6c
   1565c:	str	r1, [r4, #8]
   15660:	mov	r0, r6
   15664:	bl	110dc <ferror@plt>
   15668:	clz	r0, r0
   1566c:	lsr	r0, r0, #5
   15670:	pop	{r4, r5, r6, r7, r8, pc}
   15674:	mov	r1, #1
   15678:	add	r0, r4, #12
   1567c:	bl	16634 <_obstack_newchunk@@Base>
   15680:	b	15584 <__assert_fail@plt+0x41fc>
   15684:	ldr	r3, [r4, #24]
   15688:	add	r2, r3, #1
   1568c:	str	r2, [r4, #24]
   15690:	strb	r5, [r3]
   15694:	cmp	r5, #0
   15698:	beq	156d0 <__assert_fail@plt+0x4348>
   1569c:	mov	r0, r6
   156a0:	bl	112bc <fgetc@plt>
   156a4:	mov	r5, r0
   156a8:	cmn	r0, #1
   156ac:	beq	15568 <__assert_fail@plt+0x41e0>
   156b0:	ldr	r2, [r4, #28]
   156b4:	ldr	r3, [r4, #24]
   156b8:	cmp	r2, r3
   156bc:	bne	15684 <__assert_fail@plt+0x42fc>
   156c0:	mov	r1, r7
   156c4:	mov	r0, r8
   156c8:	bl	16634 <_obstack_newchunk@@Base>
   156cc:	b	15684 <__assert_fail@plt+0x42fc>
   156d0:	mov	r0, r4
   156d4:	bl	153cc <__assert_fail@plt+0x4044>
   156d8:	b	1569c <__assert_fail@plt+0x4314>
   156dc:	mov	r1, #4
   156e0:	add	r0, r4, #56	; 0x38
   156e4:	bl	16634 <_obstack_newchunk@@Base>
   156e8:	b	155b4 <__assert_fail@plt+0x422c>
   156ec:	push	{r4, r5, r6, r7, r8, lr}
   156f0:	mov	r8, r0
   156f4:	mov	r7, r1
   156f8:	mov	r4, r2
   156fc:	ldr	r5, [pc, #88]	; 1575c <__assert_fail@plt+0x43d4>
   15700:	b	15708 <__assert_fail@plt+0x4380>
   15704:	mov	r4, r5
   15708:	mov	r2, r4
   1570c:	mov	r1, r7
   15710:	mov	r0, r8
   15714:	bl	110a0 <read@plt>
   15718:	subs	r6, r0, #0
   1571c:	bge	15754 <__assert_fail@plt+0x43cc>
   15720:	bl	11280 <__errno_location@plt>
   15724:	ldr	r3, [r0]
   15728:	cmp	r3, #4
   1572c:	beq	15708 <__assert_fail@plt+0x4380>
   15730:	cmp	r4, r5
   15734:	movls	r4, #0
   15738:	movhi	r4, #1
   1573c:	cmp	r3, #22
   15740:	movne	r4, #0
   15744:	cmp	r4, #0
   15748:	bne	15704 <__assert_fail@plt+0x437c>
   1574c:	mov	r0, r6
   15750:	pop	{r4, r5, r6, r7, r8, pc}
   15754:	mov	r0, r6
   15758:	pop	{r4, r5, r6, r7, r8, pc}
   1575c:	svcvc	0x00f00000	; IMB
   15760:	push	{r4, r5, r6, lr}
   15764:	sub	sp, sp, #32
   15768:	mov	r4, r0
   1576c:	ldr	r5, [sp, #48]	; 0x30
   15770:	ldr	r6, [sp, #52]	; 0x34
   15774:	cmp	r1, #0
   15778:	beq	15830 <__assert_fail@plt+0x44a8>
   1577c:	str	r3, [sp, #4]
   15780:	str	r2, [sp]
   15784:	mov	r3, r1
   15788:	ldr	r2, [pc, #940]	; 15b3c <__assert_fail@plt+0x47b4>
   1578c:	mov	r1, #1
   15790:	bl	112e0 <__fprintf_chk@plt>
   15794:	mov	r2, #5
   15798:	ldr	r1, [pc, #928]	; 15b40 <__assert_fail@plt+0x47b8>
   1579c:	mov	r0, #0
   157a0:	bl	11124 <dcgettext@plt>
   157a4:	ldr	r3, [pc, #920]	; 15b44 <__assert_fail@plt+0x47bc>
   157a8:	str	r3, [sp]
   157ac:	mov	r3, r0
   157b0:	ldr	r2, [pc, #912]	; 15b48 <__assert_fail@plt+0x47c0>
   157b4:	mov	r1, #1
   157b8:	mov	r0, r4
   157bc:	bl	112e0 <__fprintf_chk@plt>
   157c0:	mov	r1, r4
   157c4:	mov	r0, #10
   157c8:	bl	11118 <fputc_unlocked@plt>
   157cc:	mov	r2, #5
   157d0:	ldr	r1, [pc, #884]	; 15b4c <__assert_fail@plt+0x47c4>
   157d4:	mov	r0, #0
   157d8:	bl	11124 <dcgettext@plt>
   157dc:	ldr	r3, [pc, #876]	; 15b50 <__assert_fail@plt+0x47c8>
   157e0:	mov	r2, r0
   157e4:	mov	r1, #1
   157e8:	mov	r0, r4
   157ec:	bl	112e0 <__fprintf_chk@plt>
   157f0:	mov	r1, r4
   157f4:	mov	r0, #10
   157f8:	bl	11118 <fputc_unlocked@plt>
   157fc:	cmp	r6, #9
   15800:	ldrls	pc, [pc, r6, lsl #2]
   15804:	b	15ad4 <__assert_fail@plt+0x474c>
   15808:	andeq	r5, r1, ip, ror #16
   1580c:	andeq	r5, r1, r8, asr #16
   15810:	andeq	r5, r1, r4, ror r8
   15814:	andeq	r5, r1, r4, lsr #17
   15818:	ldrdeq	r5, [r1], -ip
   1581c:	andeq	r5, r1, ip, lsl r9
   15820:	andeq	r5, r1, r4, ror #18
   15824:			; <UNDEFINED> instruction: 0x000159b4
   15828:	andeq	r5, r1, ip, lsl #20
   1582c:	andeq	r5, r1, ip, ror #20
   15830:	str	r3, [sp]
   15834:	mov	r3, r2
   15838:	ldr	r2, [pc, #788]	; 15b54 <__assert_fail@plt+0x47cc>
   1583c:	mov	r1, #1
   15840:	bl	112e0 <__fprintf_chk@plt>
   15844:	b	15794 <__assert_fail@plt+0x440c>
   15848:	mov	r2, #5
   1584c:	ldr	r1, [pc, #772]	; 15b58 <__assert_fail@plt+0x47d0>
   15850:	mov	r0, #0
   15854:	bl	11124 <dcgettext@plt>
   15858:	ldr	r3, [r5]
   1585c:	mov	r2, r0
   15860:	mov	r1, #1
   15864:	mov	r0, r4
   15868:	bl	112e0 <__fprintf_chk@plt>
   1586c:	add	sp, sp, #32
   15870:	pop	{r4, r5, r6, pc}
   15874:	mov	r2, #5
   15878:	ldr	r1, [pc, #732]	; 15b5c <__assert_fail@plt+0x47d4>
   1587c:	mov	r0, #0
   15880:	bl	11124 <dcgettext@plt>
   15884:	ldr	r3, [r5]
   15888:	ldr	r2, [r5, #4]
   1588c:	str	r2, [sp]
   15890:	mov	r2, r0
   15894:	mov	r1, #1
   15898:	mov	r0, r4
   1589c:	bl	112e0 <__fprintf_chk@plt>
   158a0:	b	1586c <__assert_fail@plt+0x44e4>
   158a4:	mov	r2, #5
   158a8:	ldr	r1, [pc, #688]	; 15b60 <__assert_fail@plt+0x47d8>
   158ac:	mov	r0, #0
   158b0:	bl	11124 <dcgettext@plt>
   158b4:	ldr	r3, [r5]
   158b8:	ldr	r2, [r5, #8]
   158bc:	str	r2, [sp, #4]
   158c0:	ldr	r2, [r5, #4]
   158c4:	str	r2, [sp]
   158c8:	mov	r2, r0
   158cc:	mov	r1, #1
   158d0:	mov	r0, r4
   158d4:	bl	112e0 <__fprintf_chk@plt>
   158d8:	b	1586c <__assert_fail@plt+0x44e4>
   158dc:	mov	r2, #5
   158e0:	ldr	r1, [pc, #636]	; 15b64 <__assert_fail@plt+0x47dc>
   158e4:	mov	r0, #0
   158e8:	bl	11124 <dcgettext@plt>
   158ec:	ldr	r3, [r5]
   158f0:	ldr	r2, [r5, #12]
   158f4:	str	r2, [sp, #8]
   158f8:	ldr	r2, [r5, #8]
   158fc:	str	r2, [sp, #4]
   15900:	ldr	r2, [r5, #4]
   15904:	str	r2, [sp]
   15908:	mov	r2, r0
   1590c:	mov	r1, #1
   15910:	mov	r0, r4
   15914:	bl	112e0 <__fprintf_chk@plt>
   15918:	b	1586c <__assert_fail@plt+0x44e4>
   1591c:	mov	r2, #5
   15920:	ldr	r1, [pc, #576]	; 15b68 <__assert_fail@plt+0x47e0>
   15924:	mov	r0, #0
   15928:	bl	11124 <dcgettext@plt>
   1592c:	ldr	r3, [r5]
   15930:	ldr	r2, [r5, #16]
   15934:	str	r2, [sp, #12]
   15938:	ldr	r2, [r5, #12]
   1593c:	str	r2, [sp, #8]
   15940:	ldr	r2, [r5, #8]
   15944:	str	r2, [sp, #4]
   15948:	ldr	r2, [r5, #4]
   1594c:	str	r2, [sp]
   15950:	mov	r2, r0
   15954:	mov	r1, #1
   15958:	mov	r0, r4
   1595c:	bl	112e0 <__fprintf_chk@plt>
   15960:	b	1586c <__assert_fail@plt+0x44e4>
   15964:	mov	r2, #5
   15968:	ldr	r1, [pc, #508]	; 15b6c <__assert_fail@plt+0x47e4>
   1596c:	mov	r0, #0
   15970:	bl	11124 <dcgettext@plt>
   15974:	ldr	r3, [r5]
   15978:	ldr	r2, [r5, #20]
   1597c:	str	r2, [sp, #16]
   15980:	ldr	r2, [r5, #16]
   15984:	str	r2, [sp, #12]
   15988:	ldr	r2, [r5, #12]
   1598c:	str	r2, [sp, #8]
   15990:	ldr	r2, [r5, #8]
   15994:	str	r2, [sp, #4]
   15998:	ldr	r2, [r5, #4]
   1599c:	str	r2, [sp]
   159a0:	mov	r2, r0
   159a4:	mov	r1, #1
   159a8:	mov	r0, r4
   159ac:	bl	112e0 <__fprintf_chk@plt>
   159b0:	b	1586c <__assert_fail@plt+0x44e4>
   159b4:	mov	r2, #5
   159b8:	ldr	r1, [pc, #432]	; 15b70 <__assert_fail@plt+0x47e8>
   159bc:	mov	r0, #0
   159c0:	bl	11124 <dcgettext@plt>
   159c4:	ldr	r3, [r5]
   159c8:	ldr	r2, [r5, #24]
   159cc:	str	r2, [sp, #20]
   159d0:	ldr	r2, [r5, #20]
   159d4:	str	r2, [sp, #16]
   159d8:	ldr	r2, [r5, #16]
   159dc:	str	r2, [sp, #12]
   159e0:	ldr	r2, [r5, #12]
   159e4:	str	r2, [sp, #8]
   159e8:	ldr	r2, [r5, #8]
   159ec:	str	r2, [sp, #4]
   159f0:	ldr	r2, [r5, #4]
   159f4:	str	r2, [sp]
   159f8:	mov	r2, r0
   159fc:	mov	r1, #1
   15a00:	mov	r0, r4
   15a04:	bl	112e0 <__fprintf_chk@plt>
   15a08:	b	1586c <__assert_fail@plt+0x44e4>
   15a0c:	mov	r2, #5
   15a10:	ldr	r1, [pc, #348]	; 15b74 <__assert_fail@plt+0x47ec>
   15a14:	mov	r0, #0
   15a18:	bl	11124 <dcgettext@plt>
   15a1c:	ldr	r3, [r5]
   15a20:	ldr	r2, [r5, #28]
   15a24:	str	r2, [sp, #24]
   15a28:	ldr	r2, [r5, #24]
   15a2c:	str	r2, [sp, #20]
   15a30:	ldr	r2, [r5, #20]
   15a34:	str	r2, [sp, #16]
   15a38:	ldr	r2, [r5, #16]
   15a3c:	str	r2, [sp, #12]
   15a40:	ldr	r2, [r5, #12]
   15a44:	str	r2, [sp, #8]
   15a48:	ldr	r2, [r5, #8]
   15a4c:	str	r2, [sp, #4]
   15a50:	ldr	r2, [r5, #4]
   15a54:	str	r2, [sp]
   15a58:	mov	r2, r0
   15a5c:	mov	r1, #1
   15a60:	mov	r0, r4
   15a64:	bl	112e0 <__fprintf_chk@plt>
   15a68:	b	1586c <__assert_fail@plt+0x44e4>
   15a6c:	mov	r2, #5
   15a70:	ldr	r1, [pc, #256]	; 15b78 <__assert_fail@plt+0x47f0>
   15a74:	mov	r0, #0
   15a78:	bl	11124 <dcgettext@plt>
   15a7c:	ldr	r3, [r5]
   15a80:	ldr	r2, [r5, #32]
   15a84:	str	r2, [sp, #28]
   15a88:	ldr	r2, [r5, #28]
   15a8c:	str	r2, [sp, #24]
   15a90:	ldr	r2, [r5, #24]
   15a94:	str	r2, [sp, #20]
   15a98:	ldr	r2, [r5, #20]
   15a9c:	str	r2, [sp, #16]
   15aa0:	ldr	r2, [r5, #16]
   15aa4:	str	r2, [sp, #12]
   15aa8:	ldr	r2, [r5, #12]
   15aac:	str	r2, [sp, #8]
   15ab0:	ldr	r2, [r5, #8]
   15ab4:	str	r2, [sp, #4]
   15ab8:	ldr	r2, [r5, #4]
   15abc:	str	r2, [sp]
   15ac0:	mov	r2, r0
   15ac4:	mov	r1, #1
   15ac8:	mov	r0, r4
   15acc:	bl	112e0 <__fprintf_chk@plt>
   15ad0:	b	1586c <__assert_fail@plt+0x44e4>
   15ad4:	mov	r2, #5
   15ad8:	ldr	r1, [pc, #156]	; 15b7c <__assert_fail@plt+0x47f4>
   15adc:	mov	r0, #0
   15ae0:	bl	11124 <dcgettext@plt>
   15ae4:	ldr	r3, [r5]
   15ae8:	ldr	r2, [r5, #32]
   15aec:	str	r2, [sp, #28]
   15af0:	ldr	r2, [r5, #28]
   15af4:	str	r2, [sp, #24]
   15af8:	ldr	r2, [r5, #24]
   15afc:	str	r2, [sp, #20]
   15b00:	ldr	r2, [r5, #20]
   15b04:	str	r2, [sp, #16]
   15b08:	ldr	r2, [r5, #16]
   15b0c:	str	r2, [sp, #12]
   15b10:	ldr	r2, [r5, #12]
   15b14:	str	r2, [sp, #8]
   15b18:	ldr	r2, [r5, #8]
   15b1c:	str	r2, [sp, #4]
   15b20:	ldr	r2, [r5, #4]
   15b24:	str	r2, [sp]
   15b28:	mov	r2, r0
   15b2c:	mov	r1, #1
   15b30:	mov	r0, r4
   15b34:	bl	112e0 <__fprintf_chk@plt>
   15b38:	b	1586c <__assert_fail@plt+0x44e4>
   15b3c:	andeq	r7, r1, r8, ror #25
   15b40:	strdeq	r7, [r1], -ip
   15b44:	andeq	r0, r0, r6, ror #15
   15b48:	ldrdeq	r7, [r1], -r4
   15b4c:	andeq	r7, r1, r0, lsl #26
   15b50:	andeq	r7, r1, ip, lsr #27
   15b54:	strdeq	r7, [r1], -r4
   15b58:	ldrdeq	r7, [r1], -r0
   15b5c:	andeq	r7, r1, r0, ror #27
   15b60:	strdeq	r7, [r1], -r8
   15b64:	andeq	r7, r1, r4, lsl lr
   15b68:	andeq	r7, r1, r4, lsr lr
   15b6c:	andeq	r7, r1, r8, asr lr
   15b70:	andeq	r7, r1, r0, lsl #29
   15b74:	andeq	r7, r1, ip, lsr #29
   15b78:	ldrdeq	r7, [r1], -ip
   15b7c:	andeq	r7, r1, r0, lsl pc
   15b80:	push	{r4, r5, lr}
   15b84:	sub	sp, sp, #12
   15b88:	ldr	r5, [sp, #24]
   15b8c:	ldr	ip, [r5]
   15b90:	cmp	ip, #0
   15b94:	beq	15bc4 <__assert_fail@plt+0x483c>
   15b98:	mov	lr, r5
   15b9c:	mov	ip, #0
   15ba0:	add	ip, ip, #1
   15ba4:	ldr	r4, [lr, #4]!
   15ba8:	cmp	r4, #0
   15bac:	bne	15ba0 <__assert_fail@plt+0x4818>
   15bb0:	str	ip, [sp, #4]
   15bb4:	str	r5, [sp]
   15bb8:	bl	15760 <__assert_fail@plt+0x43d8>
   15bbc:	add	sp, sp, #12
   15bc0:	pop	{r4, r5, pc}
   15bc4:	mov	ip, #0
   15bc8:	b	15bb0 <__assert_fail@plt+0x4828>
   15bcc:	push	{r4, r5, lr}
   15bd0:	sub	sp, sp, #52	; 0x34
   15bd4:	ldr	r4, [sp, #64]	; 0x40
   15bd8:	sub	r4, r4, #4
   15bdc:	add	r5, sp, #4
   15be0:	mov	ip, #0
   15be4:	ldr	lr, [r4, #4]!
   15be8:	str	lr, [r5, #4]!
   15bec:	cmp	lr, #0
   15bf0:	beq	15c00 <__assert_fail@plt+0x4878>
   15bf4:	add	ip, ip, #1
   15bf8:	cmp	ip, #10
   15bfc:	bne	15be4 <__assert_fail@plt+0x485c>
   15c00:	str	ip, [sp, #4]
   15c04:	add	ip, sp, #8
   15c08:	str	ip, [sp]
   15c0c:	bl	15760 <__assert_fail@plt+0x43d8>
   15c10:	add	sp, sp, #52	; 0x34
   15c14:	pop	{r4, r5, pc}
   15c18:	push	{r3}		; (str r3, [sp, #-4]!)
   15c1c:	push	{lr}		; (str lr, [sp, #-4]!)
   15c20:	sub	sp, sp, #16
   15c24:	add	r3, sp, #24
   15c28:	str	r3, [sp, #12]
   15c2c:	str	r3, [sp]
   15c30:	ldr	r3, [sp, #20]
   15c34:	bl	15bcc <__assert_fail@plt+0x4844>
   15c38:	add	sp, sp, #16
   15c3c:	pop	{lr}		; (ldr lr, [sp], #4)
   15c40:	add	sp, sp, #4
   15c44:	bx	lr
   15c48:	push	{r4, lr}
   15c4c:	ldr	r3, [pc, #112]	; 15cc4 <__assert_fail@plt+0x493c>
   15c50:	ldr	r1, [r3]
   15c54:	mov	r0, #10
   15c58:	bl	11118 <fputc_unlocked@plt>
   15c5c:	mov	r2, #5
   15c60:	ldr	r1, [pc, #96]	; 15cc8 <__assert_fail@plt+0x4940>
   15c64:	mov	r0, #0
   15c68:	bl	11124 <dcgettext@plt>
   15c6c:	ldr	r2, [pc, #88]	; 15ccc <__assert_fail@plt+0x4944>
   15c70:	mov	r1, r0
   15c74:	mov	r0, #1
   15c78:	bl	112c8 <__printf_chk@plt>
   15c7c:	mov	r2, #5
   15c80:	ldr	r1, [pc, #72]	; 15cd0 <__assert_fail@plt+0x4948>
   15c84:	mov	r0, #0
   15c88:	bl	11124 <dcgettext@plt>
   15c8c:	ldr	r3, [pc, #64]	; 15cd4 <__assert_fail@plt+0x494c>
   15c90:	ldr	r2, [pc, #64]	; 15cd8 <__assert_fail@plt+0x4950>
   15c94:	mov	r1, r0
   15c98:	mov	r0, #1
   15c9c:	bl	112c8 <__printf_chk@plt>
   15ca0:	mov	r2, #5
   15ca4:	ldr	r1, [pc, #48]	; 15cdc <__assert_fail@plt+0x4954>
   15ca8:	mov	r0, #0
   15cac:	bl	11124 <dcgettext@plt>
   15cb0:	ldr	r2, [pc, #40]	; 15ce0 <__assert_fail@plt+0x4958>
   15cb4:	mov	r1, r0
   15cb8:	mov	r0, #1
   15cbc:	bl	112c8 <__printf_chk@plt>
   15cc0:	pop	{r4, pc}
   15cc4:	muleq	r2, r4, r1
   15cc8:	andeq	r7, r1, ip, asr #30
   15ccc:	andeq	r7, r1, r0, ror #30
   15cd0:	andeq	r7, r1, r8, ror pc
   15cd4:	andeq	r7, r1, r0, ror r8
   15cd8:	muleq	r1, r8, r8
   15cdc:	andeq	r7, r1, ip, lsl #31
   15ce0:			; <UNDEFINED> instruction: 0x00017fb4
   15ce4:	push	{r4, lr}
   15ce8:	bl	16318 <__assert_fail@plt+0x4f90>
   15cec:	cmp	r0, #0
   15cf0:	popne	{r4, pc}
   15cf4:	bl	16288 <__assert_fail@plt+0x4f00>
   15cf8:	push	{r4, lr}
   15cfc:	bl	16318 <__assert_fail@plt+0x4f90>
   15d00:	cmp	r0, #0
   15d04:	popne	{r4, pc}
   15d08:	bl	16288 <__assert_fail@plt+0x4f00>
   15d0c:	push	{r4, lr}
   15d10:	bl	15ce4 <__assert_fail@plt+0x495c>
   15d14:	pop	{r4, pc}
   15d18:	push	{r4, r5, r6, lr}
   15d1c:	mov	r5, r0
   15d20:	mov	r4, r1
   15d24:	bl	16348 <__assert_fail@plt+0x4fc0>
   15d28:	cmp	r0, #0
   15d2c:	popne	{r4, r5, r6, pc}
   15d30:	adds	r4, r4, #0
   15d34:	movne	r4, #1
   15d38:	cmp	r5, #0
   15d3c:	orreq	r4, r4, #1
   15d40:	cmp	r4, #0
   15d44:	popeq	{r4, r5, r6, pc}
   15d48:	bl	16288 <__assert_fail@plt+0x4f00>
   15d4c:	push	{r4, lr}
   15d50:	cmp	r1, #0
   15d54:	orreq	r1, r1, #1
   15d58:	bl	16348 <__assert_fail@plt+0x4fc0>
   15d5c:	cmp	r0, #0
   15d60:	popne	{r4, pc}
   15d64:	bl	16288 <__assert_fail@plt+0x4f00>
   15d68:	push	{r4, r5, r6, lr}
   15d6c:	mov	r6, r0
   15d70:	mov	r5, r1
   15d74:	mov	r4, r2
   15d78:	bl	16830 <_obstack_memory_used@@Base+0x34>
   15d7c:	cmp	r0, #0
   15d80:	popne	{r4, r5, r6, pc}
   15d84:	cmp	r6, #0
   15d88:	beq	15d98 <__assert_fail@plt+0x4a10>
   15d8c:	cmp	r5, #0
   15d90:	cmpne	r4, #0
   15d94:	popeq	{r4, r5, r6, pc}
   15d98:	bl	16288 <__assert_fail@plt+0x4f00>
   15d9c:	push	{r4, lr}
   15da0:	bl	15d68 <__assert_fail@plt+0x49e0>
   15da4:	pop	{r4, pc}
   15da8:	push	{r4, lr}
   15dac:	mov	ip, r1
   15db0:	mov	r3, r2
   15db4:	cmp	r2, #0
   15db8:	cmpne	r1, #0
   15dbc:	moveq	r3, #1
   15dc0:	moveq	ip, r3
   15dc4:	mov	r2, r3
   15dc8:	mov	r1, ip
   15dcc:	bl	16830 <_obstack_memory_used@@Base+0x34>
   15dd0:	cmp	r0, #0
   15dd4:	popne	{r4, pc}
   15dd8:	bl	16288 <__assert_fail@plt+0x4f00>
   15ddc:	push	{r4, lr}
   15de0:	mov	r2, r1
   15de4:	mov	r1, r0
   15de8:	mov	r0, #0
   15dec:	bl	15d68 <__assert_fail@plt+0x49e0>
   15df0:	pop	{r4, pc}
   15df4:	push	{r4, lr}
   15df8:	mov	r2, r1
   15dfc:	mov	r1, r0
   15e00:	mov	r0, #0
   15e04:	bl	15da8 <__assert_fail@plt+0x4a20>
   15e08:	pop	{r4, pc}
   15e0c:	push	{r4, r5, r6, r7, r8, lr}
   15e10:	mov	r5, r1
   15e14:	mov	r6, r2
   15e18:	ldr	r4, [r1]
   15e1c:	subs	r7, r0, #0
   15e20:	beq	15e3c <__assert_fail@plt+0x4ab4>
   15e24:	lsr	r2, r4, #1
   15e28:	add	r3, r2, #1
   15e2c:	mvn	r3, r3
   15e30:	cmp	r4, r3
   15e34:	bls	15e60 <__assert_fail@plt+0x4ad8>
   15e38:	bl	16288 <__assert_fail@plt+0x4f00>
   15e3c:	cmp	r4, #0
   15e40:	bne	15e68 <__assert_fail@plt+0x4ae0>
   15e44:	mov	r1, r2
   15e48:	mov	r0, #64	; 0x40
   15e4c:	bl	16924 <_obstack_memory_used@@Base+0x128>
   15e50:	cmp	r0, #0
   15e54:	movne	r4, r0
   15e58:	addeq	r4, r0, #1
   15e5c:	b	15e68 <__assert_fail@plt+0x4ae0>
   15e60:	add	r4, r4, #1
   15e64:	add	r4, r4, r2
   15e68:	mov	r2, r6
   15e6c:	mov	r1, r4
   15e70:	mov	r0, r7
   15e74:	bl	15d68 <__assert_fail@plt+0x49e0>
   15e78:	str	r4, [r5]
   15e7c:	pop	{r4, r5, r6, r7, r8, pc}
   15e80:	push	{r4, lr}
   15e84:	mov	r2, #1
   15e88:	bl	15e0c <__assert_fail@plt+0x4a84>
   15e8c:	pop	{r4, pc}
   15e90:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15e94:	sub	sp, sp, #12
   15e98:	mov	fp, r0
   15e9c:	mov	sl, r1
   15ea0:	mov	r9, r2
   15ea4:	mov	r7, r3
   15ea8:	ldr	r6, [sp, #48]	; 0x30
   15eac:	ldr	r5, [r1]
   15eb0:	asrs	r4, r5, #1
   15eb4:	bmi	16010 <__assert_fail@plt+0x4c88>
   15eb8:	cmp	r5, #0
   15ebc:	blt	16024 <__assert_fail@plt+0x4c9c>
   15ec0:	mvn	r3, #-2147483648	; 0x80000000
   15ec4:	sub	r3, r3, r4
   15ec8:	cmp	r5, r3
   15ecc:	movle	r3, #0
   15ed0:	movgt	r3, #1
   15ed4:	cmp	r3, #0
   15ed8:	addeq	r4, r4, r5
   15edc:	mvnne	r4, #-2147483648	; 0x80000000
   15ee0:	mvn	r8, r7
   15ee4:	lsr	r8, r8, #31
   15ee8:	cmp	r7, r4
   15eec:	movge	r3, #0
   15ef0:	andlt	r3, r8, #1
   15ef4:	cmp	r3, #0
   15ef8:	movne	r4, r7
   15efc:	cmp	r6, #0
   15f00:	blt	16038 <__assert_fail@plt+0x4cb0>
   15f04:	cmp	r6, #0
   15f08:	beq	160e4 <__assert_fail@plt+0x4d5c>
   15f0c:	cmp	r4, #0
   15f10:	blt	16094 <__assert_fail@plt+0x4d0c>
   15f14:	mov	r1, r6
   15f18:	mvn	r0, #-2147483648	; 0x80000000
   15f1c:	bl	16b30 <_obstack_memory_used@@Base+0x334>
   15f20:	cmp	r0, r4
   15f24:	movge	r0, #0
   15f28:	movlt	r0, #1
   15f2c:	cmp	r0, #0
   15f30:	mvnne	r3, #-2147483648	; 0x80000000
   15f34:	strne	r3, [sp, #4]
   15f38:	beq	160cc <__assert_fail@plt+0x4d44>
   15f3c:	mov	r1, r6
   15f40:	ldr	r0, [sp, #4]
   15f44:	bl	16b30 <_obstack_memory_used@@Base+0x334>
   15f48:	mov	r4, r0
   15f4c:	mov	r1, r6
   15f50:	ldr	r0, [sp, #4]
   15f54:	bl	16d50 <_obstack_memory_used@@Base+0x554>
   15f58:	ldr	r3, [sp, #4]
   15f5c:	sub	r1, r3, r1
   15f60:	cmp	fp, #0
   15f64:	moveq	r3, #0
   15f68:	streq	r3, [sl]
   15f6c:	sub	r3, r4, r5
   15f70:	cmp	r3, r9
   15f74:	bge	15ffc <__assert_fail@plt+0x4c74>
   15f78:	cmp	r9, #0
   15f7c:	blt	160f0 <__assert_fail@plt+0x4d68>
   15f80:	cmp	r5, #0
   15f84:	blt	16104 <__assert_fail@plt+0x4d7c>
   15f88:	mvn	r3, #-2147483648	; 0x80000000
   15f8c:	sub	r3, r3, r9
   15f90:	cmp	r5, r3
   15f94:	movle	r3, #0
   15f98:	movgt	r3, #1
   15f9c:	cmp	r3, #0
   15fa0:	bne	161ac <__assert_fail@plt+0x4e24>
   15fa4:	add	r5, r5, r9
   15fa8:	mov	r4, r5
   15fac:	cmp	r7, r5
   15fb0:	movge	r7, #0
   15fb4:	andlt	r7, r8, #1
   15fb8:	cmp	r7, #0
   15fbc:	bne	161ac <__assert_fail@plt+0x4e24>
   15fc0:	cmp	r6, #0
   15fc4:	blt	16118 <__assert_fail@plt+0x4d90>
   15fc8:	cmp	r6, #0
   15fcc:	beq	15ff8 <__assert_fail@plt+0x4c70>
   15fd0:	cmp	r5, #0
   15fd4:	blt	16174 <__assert_fail@plt+0x4dec>
   15fd8:	mov	r1, r6
   15fdc:	mvn	r0, #-2147483648	; 0x80000000
   15fe0:	bl	16b30 <_obstack_memory_used@@Base+0x334>
   15fe4:	cmp	r5, r0
   15fe8:	movle	r0, #0
   15fec:	movgt	r0, #1
   15ff0:	cmp	r0, #0
   15ff4:	bne	161ac <__assert_fail@plt+0x4e24>
   15ff8:	mul	r1, r5, r6
   15ffc:	mov	r0, fp
   16000:	bl	15d18 <__assert_fail@plt+0x4990>
   16004:	str	r4, [sl]
   16008:	add	sp, sp, #12
   1600c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16010:	rsb	r3, r4, #-2147483648	; 0x80000000
   16014:	cmp	r5, r3
   16018:	movge	r3, #0
   1601c:	movlt	r3, #1
   16020:	b	15ed4 <__assert_fail@plt+0x4b4c>
   16024:	rsb	r3, r5, #-2147483648	; 0x80000000
   16028:	cmp	r4, r3
   1602c:	movge	r3, #0
   16030:	movlt	r3, #1
   16034:	b	15ed4 <__assert_fail@plt+0x4b4c>
   16038:	cmp	r4, #0
   1603c:	blt	16064 <__assert_fail@plt+0x4cdc>
   16040:	cmn	r6, #1
   16044:	beq	16080 <__assert_fail@plt+0x4cf8>
   16048:	mov	r1, r6
   1604c:	mov	r0, #-2147483648	; 0x80000000
   16050:	bl	16b30 <_obstack_memory_used@@Base+0x334>
   16054:	cmp	r0, r4
   16058:	movge	r0, #0
   1605c:	movlt	r0, #1
   16060:	b	15f2c <__assert_fail@plt+0x4ba4>
   16064:	mov	r1, r6
   16068:	mvn	r0, #-2147483648	; 0x80000000
   1606c:	bl	16b30 <_obstack_memory_used@@Base+0x334>
   16070:	cmp	r0, r4
   16074:	movle	r0, #0
   16078:	movgt	r0, #1
   1607c:	b	15f2c <__assert_fail@plt+0x4ba4>
   16080:	add	r0, r4, #-2147483648	; 0x80000000
   16084:	cmp	r0, #0
   16088:	movle	r0, #0
   1608c:	movgt	r0, #1
   16090:	b	15f2c <__assert_fail@plt+0x4ba4>
   16094:	cmn	r4, #1
   16098:	beq	160b8 <__assert_fail@plt+0x4d30>
   1609c:	mov	r1, r4
   160a0:	mov	r0, #-2147483648	; 0x80000000
   160a4:	bl	16b30 <_obstack_memory_used@@Base+0x334>
   160a8:	cmp	r6, r0
   160ac:	movle	r0, #0
   160b0:	movgt	r0, #1
   160b4:	b	15f2c <__assert_fail@plt+0x4ba4>
   160b8:	add	r0, r6, #-2147483648	; 0x80000000
   160bc:	cmp	r0, #0
   160c0:	movle	r0, #0
   160c4:	movgt	r0, #1
   160c8:	b	15f2c <__assert_fail@plt+0x4ba4>
   160cc:	mul	r1, r6, r4
   160d0:	cmp	r1, #63	; 0x3f
   160d4:	movle	r3, #64	; 0x40
   160d8:	strle	r3, [sp, #4]
   160dc:	bgt	15f60 <__assert_fail@plt+0x4bd8>
   160e0:	b	15f3c <__assert_fail@plt+0x4bb4>
   160e4:	mov	r3, #64	; 0x40
   160e8:	str	r3, [sp, #4]
   160ec:	b	15f3c <__assert_fail@plt+0x4bb4>
   160f0:	rsb	r3, r9, #-2147483648	; 0x80000000
   160f4:	cmp	r5, r3
   160f8:	movge	r3, #0
   160fc:	movlt	r3, #1
   16100:	b	15f9c <__assert_fail@plt+0x4c14>
   16104:	rsb	r3, r5, #-2147483648	; 0x80000000
   16108:	cmp	r9, r3
   1610c:	movge	r3, #0
   16110:	movlt	r3, #1
   16114:	b	15f9c <__assert_fail@plt+0x4c14>
   16118:	cmp	r5, #0
   1611c:	blt	16144 <__assert_fail@plt+0x4dbc>
   16120:	cmn	r6, #1
   16124:	beq	16160 <__assert_fail@plt+0x4dd8>
   16128:	mov	r1, r6
   1612c:	mov	r0, #-2147483648	; 0x80000000
   16130:	bl	16b30 <_obstack_memory_used@@Base+0x334>
   16134:	cmp	r5, r0
   16138:	movle	r0, #0
   1613c:	movgt	r0, #1
   16140:	b	15ff0 <__assert_fail@plt+0x4c68>
   16144:	mov	r1, r6
   16148:	mvn	r0, #-2147483648	; 0x80000000
   1614c:	bl	16b30 <_obstack_memory_used@@Base+0x334>
   16150:	cmp	r5, r0
   16154:	movge	r0, #0
   16158:	movlt	r0, #1
   1615c:	b	15ff0 <__assert_fail@plt+0x4c68>
   16160:	add	r0, r5, #-2147483648	; 0x80000000
   16164:	cmp	r0, #0
   16168:	movle	r0, #0
   1616c:	movgt	r0, #1
   16170:	b	15ff0 <__assert_fail@plt+0x4c68>
   16174:	cmn	r5, #1
   16178:	beq	16198 <__assert_fail@plt+0x4e10>
   1617c:	mov	r1, r5
   16180:	mov	r0, #-2147483648	; 0x80000000
   16184:	bl	16b30 <_obstack_memory_used@@Base+0x334>
   16188:	cmp	r6, r0
   1618c:	movle	r0, #0
   16190:	movgt	r0, #1
   16194:	b	15ff0 <__assert_fail@plt+0x4c68>
   16198:	add	r0, r6, #-2147483648	; 0x80000000
   1619c:	cmp	r0, #0
   161a0:	movle	r0, #0
   161a4:	movgt	r0, #1
   161a8:	b	15ff0 <__assert_fail@plt+0x4c68>
   161ac:	bl	16288 <__assert_fail@plt+0x4f00>
   161b0:	push	{r4, lr}
   161b4:	bl	162c8 <__assert_fail@plt+0x4f40>
   161b8:	cmp	r0, #0
   161bc:	popne	{r4, pc}
   161c0:	bl	16288 <__assert_fail@plt+0x4f00>
   161c4:	push	{r4, lr}
   161c8:	mov	r1, #1
   161cc:	bl	161b0 <__assert_fail@plt+0x4e28>
   161d0:	pop	{r4, pc}
   161d4:	push	{r4, lr}
   161d8:	bl	162c8 <__assert_fail@plt+0x4f40>
   161dc:	cmp	r0, #0
   161e0:	popne	{r4, pc}
   161e4:	bl	16288 <__assert_fail@plt+0x4f00>
   161e8:	push	{r4, lr}
   161ec:	mov	r1, #1
   161f0:	bl	161d4 <__assert_fail@plt+0x4e4c>
   161f4:	pop	{r4, pc}
   161f8:	push	{r4, r5, r6, lr}
   161fc:	mov	r5, r0
   16200:	mov	r4, r1
   16204:	mov	r0, r1
   16208:	bl	15ce4 <__assert_fail@plt+0x495c>
   1620c:	mov	r2, r4
   16210:	mov	r1, r5
   16214:	bl	110f4 <memcpy@plt>
   16218:	pop	{r4, r5, r6, pc}
   1621c:	push	{r4, r5, r6, lr}
   16220:	mov	r5, r0
   16224:	mov	r4, r1
   16228:	mov	r0, r1
   1622c:	bl	15cf8 <__assert_fail@plt+0x4970>
   16230:	mov	r2, r4
   16234:	mov	r1, r5
   16238:	bl	110f4 <memcpy@plt>
   1623c:	pop	{r4, r5, r6, pc}
   16240:	push	{r4, r5, r6, lr}
   16244:	mov	r5, r0
   16248:	mov	r4, r1
   1624c:	add	r0, r1, #1
   16250:	bl	15cf8 <__assert_fail@plt+0x4970>
   16254:	mov	r2, #0
   16258:	strb	r2, [r0, r4]
   1625c:	mov	r2, r4
   16260:	mov	r1, r5
   16264:	bl	110f4 <memcpy@plt>
   16268:	pop	{r4, r5, r6, pc}
   1626c:	push	{r4, lr}
   16270:	mov	r4, r0
   16274:	bl	1125c <strlen@plt>
   16278:	add	r1, r0, #1
   1627c:	mov	r0, r4
   16280:	bl	161f8 <__assert_fail@plt+0x4e70>
   16284:	pop	{r4, pc}
   16288:	push	{r4, lr}
   1628c:	ldr	r3, [pc, #40]	; 162bc <__assert_fail@plt+0x4f34>
   16290:	ldr	r4, [r3]
   16294:	mov	r2, #5
   16298:	ldr	r1, [pc, #32]	; 162c0 <__assert_fail@plt+0x4f38>
   1629c:	mov	r0, #0
   162a0:	bl	11124 <dcgettext@plt>
   162a4:	mov	r3, r0
   162a8:	ldr	r2, [pc, #20]	; 162c4 <__assert_fail@plt+0x4f3c>
   162ac:	mov	r1, #0
   162b0:	mov	r0, r4
   162b4:	bl	111c0 <error@plt>
   162b8:	bl	11370 <abort@plt>
   162bc:	andeq	r9, r2, ip, lsr #2
   162c0:	andeq	r8, r1, r4
   162c4:	andeq	r7, r1, r8, lsr #23
   162c8:	push	{r4, lr}
   162cc:	mov	r2, r0
   162d0:	mov	r3, r1
   162d4:	cmp	r1, #0
   162d8:	cmpne	r0, #0
   162dc:	moveq	r3, #1
   162e0:	moveq	r2, r3
   162e4:	umull	r0, r1, r2, r3
   162e8:	cmp	r0, #0
   162ec:	cmpge	r1, #0
   162f0:	bne	16304 <__assert_fail@plt+0x4f7c>
   162f4:	mov	r1, r3
   162f8:	mov	r0, r2
   162fc:	bl	11064 <calloc@plt>
   16300:	pop	{r4, pc}
   16304:	bl	11280 <__errno_location@plt>
   16308:	mov	r3, #12
   1630c:	str	r3, [r0]
   16310:	mov	r0, #0
   16314:	pop	{r4, pc}
   16318:	push	{r4, lr}
   1631c:	cmp	r0, #0
   16320:	moveq	r0, #1
   16324:	cmp	r0, #0
   16328:	blt	16334 <__assert_fail@plt+0x4fac>
   1632c:	bl	111f0 <malloc@plt>
   16330:	pop	{r4, pc}
   16334:	bl	11280 <__errno_location@plt>
   16338:	mov	r3, #12
   1633c:	str	r3, [r0]
   16340:	mov	r0, #0
   16344:	pop	{r4, pc}
   16348:	push	{r4, lr}
   1634c:	cmp	r0, #0
   16350:	beq	1636c <__assert_fail@plt+0x4fe4>
   16354:	cmp	r1, #0
   16358:	beq	16378 <__assert_fail@plt+0x4ff0>
   1635c:	cmp	r1, #0
   16360:	blt	16384 <__assert_fail@plt+0x4ffc>
   16364:	bl	1113c <realloc@plt>
   16368:	pop	{r4, pc}
   1636c:	mov	r0, r1
   16370:	bl	16318 <__assert_fail@plt+0x4f90>
   16374:	pop	{r4, pc}
   16378:	bl	134dc <__assert_fail@plt+0x2154>
   1637c:	mov	r0, #0
   16380:	pop	{r4, pc}
   16384:	bl	11280 <__errno_location@plt>
   16388:	mov	r3, #12
   1638c:	str	r3, [r0]
   16390:	mov	r0, #0
   16394:	pop	{r4, pc}
   16398:	push	{r4, r5, r6, lr}
   1639c:	mov	r5, r0
   163a0:	bl	111a8 <__fpending@plt>
   163a4:	mov	r6, r0
   163a8:	ldr	r4, [r5]
   163ac:	and	r4, r4, #32
   163b0:	mov	r0, r5
   163b4:	bl	133d0 <__assert_fail@plt+0x2048>
   163b8:	cmp	r4, #0
   163bc:	bne	163e4 <__assert_fail@plt+0x505c>
   163c0:	cmp	r0, #0
   163c4:	popeq	{r4, r5, r6, pc}
   163c8:	cmp	r6, #0
   163cc:	bne	16400 <__assert_fail@plt+0x5078>
   163d0:	bl	11280 <__errno_location@plt>
   163d4:	ldr	r0, [r0]
   163d8:	subs	r0, r0, #9
   163dc:	mvnne	r0, #0
   163e0:	pop	{r4, r5, r6, pc}
   163e4:	cmp	r0, #0
   163e8:	bne	16408 <__assert_fail@plt+0x5080>
   163ec:	bl	11280 <__errno_location@plt>
   163f0:	mov	r3, #0
   163f4:	str	r3, [r0]
   163f8:	mvn	r0, #0
   163fc:	pop	{r4, r5, r6, pc}
   16400:	mvn	r0, #0
   16404:	pop	{r4, r5, r6, pc}
   16408:	mvn	r0, #0
   1640c:	pop	{r4, r5, r6, pc}
   16410:	push	{lr}		; (str lr, [sp, #-4]!)
   16414:	sub	sp, sp, #268	; 0x10c
   16418:	ldr	r2, [pc, #68]	; 16464 <__assert_fail@plt+0x50dc>
   1641c:	add	r1, sp, #4
   16420:	bl	1687c <_obstack_memory_used@@Base+0x80>
   16424:	cmp	r0, #0
   16428:	movne	r0, #0
   1642c:	bne	1645c <__assert_fail@plt+0x50d4>
   16430:	ldr	r1, [pc, #48]	; 16468 <__assert_fail@plt+0x50e0>
   16434:	add	r0, sp, #4
   16438:	bl	11088 <strcmp@plt>
   1643c:	cmp	r0, #0
   16440:	moveq	r0, #0
   16444:	beq	1645c <__assert_fail@plt+0x50d4>
   16448:	ldr	r1, [pc, #28]	; 1646c <__assert_fail@plt+0x50e4>
   1644c:	add	r0, sp, #4
   16450:	bl	11088 <strcmp@plt>
   16454:	adds	r0, r0, #0
   16458:	movne	r0, #1
   1645c:	add	sp, sp, #268	; 0x10c
   16460:	pop	{pc}		; (ldr pc, [sp], #4)
   16464:	andeq	r0, r0, r1, lsl #2
   16468:	andeq	r8, r1, r8, lsl r0
   1646c:	andeq	r8, r1, ip, lsl r0
   16470:	push	{r4, lr}
   16474:	mov	r0, #14
   16478:	bl	11328 <nl_langinfo@plt>
   1647c:	cmp	r0, #0
   16480:	beq	16498 <__assert_fail@plt+0x5110>
   16484:	ldrb	r2, [r0]
   16488:	ldr	r3, [pc, #16]	; 164a0 <__assert_fail@plt+0x5118>
   1648c:	cmp	r2, #0
   16490:	moveq	r0, r3
   16494:	pop	{r4, pc}
   16498:	ldr	r0, [pc]	; 164a0 <__assert_fail@plt+0x5118>
   1649c:	pop	{r4, pc}
   164a0:	andeq	r8, r1, r4, lsr #32
   164a4:	push	{r4, lr}
   164a8:	ldrb	r3, [r0, #40]	; 0x28
   164ac:	tst	r3, #1
   164b0:	bne	164c4 <__assert_fail@plt+0x513c>
   164b4:	ldr	r3, [r0, #28]
   164b8:	mov	r0, r1
   164bc:	blx	r3
   164c0:	pop	{r4, pc}
   164c4:	ldr	r3, [r0, #28]
   164c8:	ldr	r0, [r0, #36]	; 0x24
   164cc:	blx	r3
   164d0:	pop	{r4, pc}
   164d4:	push	{r4, lr}
   164d8:	ldrb	r3, [r0, #40]	; 0x28
   164dc:	tst	r3, #1
   164e0:	bne	164f4 <__assert_fail@plt+0x516c>
   164e4:	ldr	r3, [r0, #32]
   164e8:	mov	r0, r1
   164ec:	blx	r3
   164f0:	pop	{r4, pc}
   164f4:	ldr	r3, [r0, #32]
   164f8:	ldr	r0, [r0, #36]	; 0x24
   164fc:	blx	r3
   16500:	pop	{r4, pc}
   16504:	push	{r4, r5, r6, lr}
   16508:	mov	r4, r0
   1650c:	subs	r5, r2, #0
   16510:	cmp	r2, #0
   16514:	moveq	r5, #8
   16518:	ldr	r3, [pc, #112]	; 16590 <__assert_fail@plt+0x5208>
   1651c:	cmp	r1, #0
   16520:	moveq	r1, r3
   16524:	str	r1, [r0]
   16528:	sub	r6, r5, #1
   1652c:	str	r6, [r0, #24]
   16530:	bl	164a4 <__assert_fail@plt+0x511c>
   16534:	str	r0, [r4, #4]
   16538:	cmp	r0, #0
   1653c:	beq	16584 <__assert_fail@plt+0x51fc>
   16540:	add	r3, r0, #8
   16544:	add	r3, r3, r6
   16548:	rsb	r5, r5, #0
   1654c:	and	r5, r5, r3
   16550:	str	r5, [r4, #8]
   16554:	str	r5, [r4, #12]
   16558:	ldr	r3, [r4]
   1655c:	add	r3, r0, r3
   16560:	str	r3, [r0]
   16564:	str	r3, [r4, #16]
   16568:	mov	r3, #0
   1656c:	str	r3, [r0, #4]
   16570:	ldrb	r3, [r4, #40]	; 0x28
   16574:	and	r3, r3, #249	; 0xf9
   16578:	strb	r3, [r4, #40]	; 0x28
   1657c:	mov	r0, #1
   16580:	pop	{r4, r5, r6, pc}
   16584:	ldr	r3, [pc, #8]	; 16594 <__assert_fail@plt+0x520c>
   16588:	ldr	r3, [r3]
   1658c:	blx	r3
   16590:	andeq	r0, r0, r8, ror #31
   16594:	andeq	r9, r2, r0, ror r1
   16598:	push	{r4, lr}
   1659c:	ldr	r3, [pc, #48]	; 165d4 <__assert_fail@plt+0x524c>
   165a0:	ldr	r4, [r3]
   165a4:	mov	r2, #5
   165a8:	ldr	r1, [pc, #40]	; 165d8 <__assert_fail@plt+0x5250>
   165ac:	mov	r0, #0
   165b0:	bl	11124 <dcgettext@plt>
   165b4:	mov	r3, r0
   165b8:	ldr	r2, [pc, #28]	; 165dc <__assert_fail@plt+0x5254>
   165bc:	mov	r1, #1
   165c0:	mov	r0, r4
   165c4:	bl	112e0 <__fprintf_chk@plt>
   165c8:	ldr	r3, [pc, #16]	; 165e0 <__assert_fail@plt+0x5258>
   165cc:	ldr	r0, [r3]
   165d0:	bl	11238 <exit@plt>
   165d4:	andeq	r9, r2, r8, lsl #3
   165d8:	andeq	r8, r1, r4
   165dc:	strdeq	r7, [r1], -r0
   165e0:	andeq	r9, r2, ip, lsr #2

000165e4 <_obstack_begin@@Base>:
   165e4:	push	{r4, lr}
   165e8:	str	r3, [r0, #28]
   165ec:	ldr	r3, [sp, #8]
   165f0:	str	r3, [r0, #32]
   165f4:	ldrb	r3, [r0, #40]	; 0x28
   165f8:	bic	r3, r3, #1
   165fc:	strb	r3, [r0, #40]	; 0x28
   16600:	bl	16504 <__assert_fail@plt+0x517c>
   16604:	pop	{r4, pc}

00016608 <_obstack_begin_1@@Base>:
   16608:	push	{r4, lr}
   1660c:	str	r3, [r0, #28]
   16610:	ldr	r3, [sp, #8]
   16614:	str	r3, [r0, #32]
   16618:	ldr	r3, [sp, #12]
   1661c:	str	r3, [r0, #36]	; 0x24
   16620:	ldrb	r3, [r0, #40]	; 0x28
   16624:	orr	r3, r3, #1
   16628:	strb	r3, [r0, #40]	; 0x28
   1662c:	bl	16504 <__assert_fail@plt+0x517c>
   16630:	pop	{r4, pc}

00016634 <_obstack_newchunk@@Base>:
   16634:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16638:	ldr	r5, [r0, #12]
   1663c:	ldr	r3, [r0, #8]
   16640:	sub	r7, r5, r3
   16644:	add	r1, r7, r1
   16648:	ldr	r3, [r0, #24]
   1664c:	adds	r3, r1, r3
   16650:	movcc	r2, #1
   16654:	movcs	r2, #0
   16658:	cmp	r7, r1
   1665c:	movhi	r1, #0
   16660:	andls	r1, r2, #1
   16664:	cmp	r1, #0
   16668:	bne	16678 <_obstack_newchunk@@Base+0x44>
   1666c:	ldr	r3, [pc, #204]	; 16740 <_obstack_newchunk@@Base+0x10c>
   16670:	ldr	r3, [r3]
   16674:	blx	r3
   16678:	mov	r4, r0
   1667c:	ldr	r8, [r0, #4]
   16680:	add	r1, r3, r7, lsr #3
   16684:	add	r1, r1, #100	; 0x64
   16688:	ldr	r6, [r0]
   1668c:	cmp	r3, r6
   16690:	movcc	r3, r6
   16694:	cmp	r3, r1
   16698:	movcs	r6, r3
   1669c:	movcc	r6, r1
   166a0:	mov	r1, r6
   166a4:	bl	164a4 <__assert_fail@plt+0x511c>
   166a8:	subs	r9, r0, #0
   166ac:	beq	1666c <_obstack_newchunk@@Base+0x38>
   166b0:	str	r9, [r4, #4]
   166b4:	str	r8, [r9, #4]
   166b8:	add	r1, r9, r6
   166bc:	str	r1, [r4, #16]
   166c0:	mov	r5, r9
   166c4:	str	r1, [r5], #8
   166c8:	ldr	r3, [r4, #24]
   166cc:	add	r5, r5, r3
   166d0:	bic	r5, r5, r3
   166d4:	mov	r2, r7
   166d8:	ldr	r1, [r4, #8]
   166dc:	mov	r0, r5
   166e0:	bl	110f4 <memcpy@plt>
   166e4:	ldrb	r3, [r4, #40]	; 0x28
   166e8:	tst	r3, #2
   166ec:	bne	1670c <_obstack_newchunk@@Base+0xd8>
   166f0:	ldr	r2, [r4, #24]
   166f4:	add	r3, r8, #8
   166f8:	add	r3, r3, r2
   166fc:	bic	r3, r3, r2
   16700:	ldr	r2, [r4, #8]
   16704:	cmp	r2, r3
   16708:	beq	16728 <_obstack_newchunk@@Base+0xf4>
   1670c:	str	r5, [r4, #8]
   16710:	add	r5, r5, r7
   16714:	str	r5, [r4, #12]
   16718:	ldrb	r3, [r4, #40]	; 0x28
   1671c:	bic	r3, r3, #2
   16720:	strb	r3, [r4, #40]	; 0x28
   16724:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16728:	ldr	r3, [r8, #4]
   1672c:	str	r3, [r9, #4]
   16730:	mov	r1, r8
   16734:	mov	r0, r4
   16738:	bl	164d4 <__assert_fail@plt+0x514c>
   1673c:	b	1670c <_obstack_newchunk@@Base+0xd8>
   16740:	andeq	r9, r2, r0, ror r1

00016744 <_obstack_allocated_p@@Base>:
   16744:	ldr	r0, [r0, #4]
   16748:	cmp	r0, #0
   1674c:	bne	16760 <_obstack_allocated_p@@Base+0x1c>
   16750:	b	16774 <_obstack_allocated_p@@Base+0x30>
   16754:	ldr	r0, [r0, #4]
   16758:	cmp	r0, #0
   1675c:	beq	16774 <_obstack_allocated_p@@Base+0x30>
   16760:	cmp	r1, r0
   16764:	bls	16754 <_obstack_allocated_p@@Base+0x10>
   16768:	ldr	r3, [r0]
   1676c:	cmp	r1, r3
   16770:	bhi	16754 <_obstack_allocated_p@@Base+0x10>
   16774:	adds	r0, r0, #0
   16778:	movne	r0, #1
   1677c:	bx	lr

00016780 <_obstack_free@@Base>:
   16780:	push	{r4, r5, r6, lr}
   16784:	mov	r4, r0
   16788:	mov	r6, r1
   1678c:	ldr	r1, [r0, #4]
   16790:	cmp	r1, #0
   16794:	bne	167c8 <_obstack_free@@Base+0x48>
   16798:	cmp	r6, #0
   1679c:	popeq	{r4, r5, r6, pc}
   167a0:	bl	11370 <abort@plt>
   167a4:	ldr	r5, [r1, #4]
   167a8:	mov	r0, r4
   167ac:	bl	164d4 <__assert_fail@plt+0x514c>
   167b0:	ldrb	r3, [r4, #40]	; 0x28
   167b4:	orr	r3, r3, #2
   167b8:	strb	r3, [r4, #40]	; 0x28
   167bc:	mov	r1, r5
   167c0:	cmp	r5, #0
   167c4:	beq	16798 <_obstack_free@@Base+0x18>
   167c8:	cmp	r6, r1
   167cc:	bls	167a4 <_obstack_free@@Base+0x24>
   167d0:	ldr	r3, [r1]
   167d4:	cmp	r6, r3
   167d8:	bhi	167a4 <_obstack_free@@Base+0x24>
   167dc:	cmp	r1, #0
   167e0:	beq	16798 <_obstack_free@@Base+0x18>
   167e4:	str	r6, [r4, #12]
   167e8:	str	r6, [r4, #8]
   167ec:	ldr	r3, [r1]
   167f0:	str	r3, [r4, #16]
   167f4:	str	r1, [r4, #4]
   167f8:	pop	{r4, r5, r6, pc}

000167fc <_obstack_memory_used@@Base>:
   167fc:	ldr	r3, [r0, #4]
   16800:	cmp	r3, #0
   16804:	beq	16828 <_obstack_memory_used@@Base+0x2c>
   16808:	mov	r0, #0
   1680c:	ldr	r2, [r3]
   16810:	sub	r2, r2, r3
   16814:	add	r0, r0, r2
   16818:	ldr	r3, [r3, #4]
   1681c:	cmp	r3, #0
   16820:	bne	1680c <_obstack_memory_used@@Base+0x10>
   16824:	bx	lr
   16828:	mov	r0, #0
   1682c:	bx	lr
   16830:	push	{r4, r5, r6, lr}
   16834:	mov	r6, r0
   16838:	mov	r5, r1
   1683c:	subs	r4, r2, #0
   16840:	beq	1686c <_obstack_memory_used@@Base+0x70>
   16844:	mov	r1, r4
   16848:	mvn	r0, #0
   1684c:	bl	16924 <_obstack_memory_used@@Base+0x128>
   16850:	cmp	r0, r5
   16854:	bcs	1686c <_obstack_memory_used@@Base+0x70>
   16858:	bl	11280 <__errno_location@plt>
   1685c:	mov	r3, #12
   16860:	str	r3, [r0]
   16864:	mov	r0, #0
   16868:	pop	{r4, r5, r6, pc}
   1686c:	mul	r1, r5, r4
   16870:	mov	r0, r6
   16874:	bl	16348 <__assert_fail@plt+0x4fc0>
   16878:	pop	{r4, r5, r6, pc}
   1687c:	push	{r4, r5, r6, lr}
   16880:	mov	r6, r1
   16884:	mov	r4, r2
   16888:	mov	r1, #0
   1688c:	bl	11310 <setlocale@plt>
   16890:	subs	r5, r0, #0
   16894:	beq	168b8 <_obstack_memory_used@@Base+0xbc>
   16898:	mov	r0, r5
   1689c:	bl	1125c <strlen@plt>
   168a0:	cmp	r4, r0
   168a4:	bhi	168d0 <_obstack_memory_used@@Base+0xd4>
   168a8:	cmp	r4, #0
   168ac:	bne	168e8 <_obstack_memory_used@@Base+0xec>
   168b0:	mov	r0, #34	; 0x22
   168b4:	pop	{r4, r5, r6, pc}
   168b8:	cmp	r4, #0
   168bc:	beq	1690c <_obstack_memory_used@@Base+0x110>
   168c0:	mov	r3, #0
   168c4:	strb	r3, [r6]
   168c8:	mov	r0, #22
   168cc:	pop	{r4, r5, r6, pc}
   168d0:	add	r2, r0, #1
   168d4:	mov	r1, r5
   168d8:	mov	r0, r6
   168dc:	bl	110f4 <memcpy@plt>
   168e0:	mov	r0, #0
   168e4:	pop	{r4, r5, r6, pc}
   168e8:	sub	r4, r4, #1
   168ec:	mov	r2, r4
   168f0:	mov	r1, r5
   168f4:	mov	r0, r6
   168f8:	bl	110f4 <memcpy@plt>
   168fc:	mov	r3, #0
   16900:	strb	r3, [r6, r4]
   16904:	mov	r0, #34	; 0x22
   16908:	pop	{r4, r5, r6, pc}
   1690c:	mov	r0, #22
   16910:	pop	{r4, r5, r6, pc}
   16914:	push	{r4, lr}
   16918:	mov	r1, #0
   1691c:	bl	11310 <setlocale@plt>
   16920:	pop	{r4, pc}
   16924:	subs	r2, r1, #1
   16928:	bxeq	lr
   1692c:	bcc	16b04 <_obstack_memory_used@@Base+0x308>
   16930:	cmp	r0, r1
   16934:	bls	16ae8 <_obstack_memory_used@@Base+0x2ec>
   16938:	tst	r1, r2
   1693c:	beq	16af4 <_obstack_memory_used@@Base+0x2f8>
   16940:	clz	r3, r0
   16944:	clz	r2, r1
   16948:	sub	r3, r2, r3
   1694c:	rsbs	r3, r3, #31
   16950:	addne	r3, r3, r3, lsl #1
   16954:	mov	r2, #0
   16958:	addne	pc, pc, r3, lsl #2
   1695c:	nop			; (mov r0, r0)
   16960:	cmp	r0, r1, lsl #31
   16964:	adc	r2, r2, r2
   16968:	subcs	r0, r0, r1, lsl #31
   1696c:	cmp	r0, r1, lsl #30
   16970:	adc	r2, r2, r2
   16974:	subcs	r0, r0, r1, lsl #30
   16978:	cmp	r0, r1, lsl #29
   1697c:	adc	r2, r2, r2
   16980:	subcs	r0, r0, r1, lsl #29
   16984:	cmp	r0, r1, lsl #28
   16988:	adc	r2, r2, r2
   1698c:	subcs	r0, r0, r1, lsl #28
   16990:	cmp	r0, r1, lsl #27
   16994:	adc	r2, r2, r2
   16998:	subcs	r0, r0, r1, lsl #27
   1699c:	cmp	r0, r1, lsl #26
   169a0:	adc	r2, r2, r2
   169a4:	subcs	r0, r0, r1, lsl #26
   169a8:	cmp	r0, r1, lsl #25
   169ac:	adc	r2, r2, r2
   169b0:	subcs	r0, r0, r1, lsl #25
   169b4:	cmp	r0, r1, lsl #24
   169b8:	adc	r2, r2, r2
   169bc:	subcs	r0, r0, r1, lsl #24
   169c0:	cmp	r0, r1, lsl #23
   169c4:	adc	r2, r2, r2
   169c8:	subcs	r0, r0, r1, lsl #23
   169cc:	cmp	r0, r1, lsl #22
   169d0:	adc	r2, r2, r2
   169d4:	subcs	r0, r0, r1, lsl #22
   169d8:	cmp	r0, r1, lsl #21
   169dc:	adc	r2, r2, r2
   169e0:	subcs	r0, r0, r1, lsl #21
   169e4:	cmp	r0, r1, lsl #20
   169e8:	adc	r2, r2, r2
   169ec:	subcs	r0, r0, r1, lsl #20
   169f0:	cmp	r0, r1, lsl #19
   169f4:	adc	r2, r2, r2
   169f8:	subcs	r0, r0, r1, lsl #19
   169fc:	cmp	r0, r1, lsl #18
   16a00:	adc	r2, r2, r2
   16a04:	subcs	r0, r0, r1, lsl #18
   16a08:	cmp	r0, r1, lsl #17
   16a0c:	adc	r2, r2, r2
   16a10:	subcs	r0, r0, r1, lsl #17
   16a14:	cmp	r0, r1, lsl #16
   16a18:	adc	r2, r2, r2
   16a1c:	subcs	r0, r0, r1, lsl #16
   16a20:	cmp	r0, r1, lsl #15
   16a24:	adc	r2, r2, r2
   16a28:	subcs	r0, r0, r1, lsl #15
   16a2c:	cmp	r0, r1, lsl #14
   16a30:	adc	r2, r2, r2
   16a34:	subcs	r0, r0, r1, lsl #14
   16a38:	cmp	r0, r1, lsl #13
   16a3c:	adc	r2, r2, r2
   16a40:	subcs	r0, r0, r1, lsl #13
   16a44:	cmp	r0, r1, lsl #12
   16a48:	adc	r2, r2, r2
   16a4c:	subcs	r0, r0, r1, lsl #12
   16a50:	cmp	r0, r1, lsl #11
   16a54:	adc	r2, r2, r2
   16a58:	subcs	r0, r0, r1, lsl #11
   16a5c:	cmp	r0, r1, lsl #10
   16a60:	adc	r2, r2, r2
   16a64:	subcs	r0, r0, r1, lsl #10
   16a68:	cmp	r0, r1, lsl #9
   16a6c:	adc	r2, r2, r2
   16a70:	subcs	r0, r0, r1, lsl #9
   16a74:	cmp	r0, r1, lsl #8
   16a78:	adc	r2, r2, r2
   16a7c:	subcs	r0, r0, r1, lsl #8
   16a80:	cmp	r0, r1, lsl #7
   16a84:	adc	r2, r2, r2
   16a88:	subcs	r0, r0, r1, lsl #7
   16a8c:	cmp	r0, r1, lsl #6
   16a90:	adc	r2, r2, r2
   16a94:	subcs	r0, r0, r1, lsl #6
   16a98:	cmp	r0, r1, lsl #5
   16a9c:	adc	r2, r2, r2
   16aa0:	subcs	r0, r0, r1, lsl #5
   16aa4:	cmp	r0, r1, lsl #4
   16aa8:	adc	r2, r2, r2
   16aac:	subcs	r0, r0, r1, lsl #4
   16ab0:	cmp	r0, r1, lsl #3
   16ab4:	adc	r2, r2, r2
   16ab8:	subcs	r0, r0, r1, lsl #3
   16abc:	cmp	r0, r1, lsl #2
   16ac0:	adc	r2, r2, r2
   16ac4:	subcs	r0, r0, r1, lsl #2
   16ac8:	cmp	r0, r1, lsl #1
   16acc:	adc	r2, r2, r2
   16ad0:	subcs	r0, r0, r1, lsl #1
   16ad4:	cmp	r0, r1
   16ad8:	adc	r2, r2, r2
   16adc:	subcs	r0, r0, r1
   16ae0:	mov	r0, r2
   16ae4:	bx	lr
   16ae8:	moveq	r0, #1
   16aec:	movne	r0, #0
   16af0:	bx	lr
   16af4:	clz	r2, r1
   16af8:	rsb	r2, r2, #31
   16afc:	lsr	r0, r0, r2
   16b00:	bx	lr
   16b04:	cmp	r0, #0
   16b08:	mvnne	r0, #0
   16b0c:	b	17164 <_obstack_memory_used@@Base+0x968>
   16b10:	cmp	r1, #0
   16b14:	beq	16b04 <_obstack_memory_used@@Base+0x308>
   16b18:	push	{r0, r1, lr}
   16b1c:	bl	16924 <_obstack_memory_used@@Base+0x128>
   16b20:	pop	{r1, r2, lr}
   16b24:	mul	r3, r2, r0
   16b28:	sub	r1, r1, r3
   16b2c:	bx	lr
   16b30:	cmp	r1, #0
   16b34:	beq	16d40 <_obstack_memory_used@@Base+0x544>
   16b38:	eor	ip, r0, r1
   16b3c:	rsbmi	r1, r1, #0
   16b40:	subs	r2, r1, #1
   16b44:	beq	16d0c <_obstack_memory_used@@Base+0x510>
   16b48:	movs	r3, r0
   16b4c:	rsbmi	r3, r0, #0
   16b50:	cmp	r3, r1
   16b54:	bls	16d18 <_obstack_memory_used@@Base+0x51c>
   16b58:	tst	r1, r2
   16b5c:	beq	16d28 <_obstack_memory_used@@Base+0x52c>
   16b60:	clz	r2, r3
   16b64:	clz	r0, r1
   16b68:	sub	r2, r0, r2
   16b6c:	rsbs	r2, r2, #31
   16b70:	addne	r2, r2, r2, lsl #1
   16b74:	mov	r0, #0
   16b78:	addne	pc, pc, r2, lsl #2
   16b7c:	nop			; (mov r0, r0)
   16b80:	cmp	r3, r1, lsl #31
   16b84:	adc	r0, r0, r0
   16b88:	subcs	r3, r3, r1, lsl #31
   16b8c:	cmp	r3, r1, lsl #30
   16b90:	adc	r0, r0, r0
   16b94:	subcs	r3, r3, r1, lsl #30
   16b98:	cmp	r3, r1, lsl #29
   16b9c:	adc	r0, r0, r0
   16ba0:	subcs	r3, r3, r1, lsl #29
   16ba4:	cmp	r3, r1, lsl #28
   16ba8:	adc	r0, r0, r0
   16bac:	subcs	r3, r3, r1, lsl #28
   16bb0:	cmp	r3, r1, lsl #27
   16bb4:	adc	r0, r0, r0
   16bb8:	subcs	r3, r3, r1, lsl #27
   16bbc:	cmp	r3, r1, lsl #26
   16bc0:	adc	r0, r0, r0
   16bc4:	subcs	r3, r3, r1, lsl #26
   16bc8:	cmp	r3, r1, lsl #25
   16bcc:	adc	r0, r0, r0
   16bd0:	subcs	r3, r3, r1, lsl #25
   16bd4:	cmp	r3, r1, lsl #24
   16bd8:	adc	r0, r0, r0
   16bdc:	subcs	r3, r3, r1, lsl #24
   16be0:	cmp	r3, r1, lsl #23
   16be4:	adc	r0, r0, r0
   16be8:	subcs	r3, r3, r1, lsl #23
   16bec:	cmp	r3, r1, lsl #22
   16bf0:	adc	r0, r0, r0
   16bf4:	subcs	r3, r3, r1, lsl #22
   16bf8:	cmp	r3, r1, lsl #21
   16bfc:	adc	r0, r0, r0
   16c00:	subcs	r3, r3, r1, lsl #21
   16c04:	cmp	r3, r1, lsl #20
   16c08:	adc	r0, r0, r0
   16c0c:	subcs	r3, r3, r1, lsl #20
   16c10:	cmp	r3, r1, lsl #19
   16c14:	adc	r0, r0, r0
   16c18:	subcs	r3, r3, r1, lsl #19
   16c1c:	cmp	r3, r1, lsl #18
   16c20:	adc	r0, r0, r0
   16c24:	subcs	r3, r3, r1, lsl #18
   16c28:	cmp	r3, r1, lsl #17
   16c2c:	adc	r0, r0, r0
   16c30:	subcs	r3, r3, r1, lsl #17
   16c34:	cmp	r3, r1, lsl #16
   16c38:	adc	r0, r0, r0
   16c3c:	subcs	r3, r3, r1, lsl #16
   16c40:	cmp	r3, r1, lsl #15
   16c44:	adc	r0, r0, r0
   16c48:	subcs	r3, r3, r1, lsl #15
   16c4c:	cmp	r3, r1, lsl #14
   16c50:	adc	r0, r0, r0
   16c54:	subcs	r3, r3, r1, lsl #14
   16c58:	cmp	r3, r1, lsl #13
   16c5c:	adc	r0, r0, r0
   16c60:	subcs	r3, r3, r1, lsl #13
   16c64:	cmp	r3, r1, lsl #12
   16c68:	adc	r0, r0, r0
   16c6c:	subcs	r3, r3, r1, lsl #12
   16c70:	cmp	r3, r1, lsl #11
   16c74:	adc	r0, r0, r0
   16c78:	subcs	r3, r3, r1, lsl #11
   16c7c:	cmp	r3, r1, lsl #10
   16c80:	adc	r0, r0, r0
   16c84:	subcs	r3, r3, r1, lsl #10
   16c88:	cmp	r3, r1, lsl #9
   16c8c:	adc	r0, r0, r0
   16c90:	subcs	r3, r3, r1, lsl #9
   16c94:	cmp	r3, r1, lsl #8
   16c98:	adc	r0, r0, r0
   16c9c:	subcs	r3, r3, r1, lsl #8
   16ca0:	cmp	r3, r1, lsl #7
   16ca4:	adc	r0, r0, r0
   16ca8:	subcs	r3, r3, r1, lsl #7
   16cac:	cmp	r3, r1, lsl #6
   16cb0:	adc	r0, r0, r0
   16cb4:	subcs	r3, r3, r1, lsl #6
   16cb8:	cmp	r3, r1, lsl #5
   16cbc:	adc	r0, r0, r0
   16cc0:	subcs	r3, r3, r1, lsl #5
   16cc4:	cmp	r3, r1, lsl #4
   16cc8:	adc	r0, r0, r0
   16ccc:	subcs	r3, r3, r1, lsl #4
   16cd0:	cmp	r3, r1, lsl #3
   16cd4:	adc	r0, r0, r0
   16cd8:	subcs	r3, r3, r1, lsl #3
   16cdc:	cmp	r3, r1, lsl #2
   16ce0:	adc	r0, r0, r0
   16ce4:	subcs	r3, r3, r1, lsl #2
   16ce8:	cmp	r3, r1, lsl #1
   16cec:	adc	r0, r0, r0
   16cf0:	subcs	r3, r3, r1, lsl #1
   16cf4:	cmp	r3, r1
   16cf8:	adc	r0, r0, r0
   16cfc:	subcs	r3, r3, r1
   16d00:	cmp	ip, #0
   16d04:	rsbmi	r0, r0, #0
   16d08:	bx	lr
   16d0c:	teq	ip, r0
   16d10:	rsbmi	r0, r0, #0
   16d14:	bx	lr
   16d18:	movcc	r0, #0
   16d1c:	asreq	r0, ip, #31
   16d20:	orreq	r0, r0, #1
   16d24:	bx	lr
   16d28:	clz	r2, r1
   16d2c:	rsb	r2, r2, #31
   16d30:	cmp	ip, #0
   16d34:	lsr	r0, r3, r2
   16d38:	rsbmi	r0, r0, #0
   16d3c:	bx	lr
   16d40:	cmp	r0, #0
   16d44:	mvngt	r0, #-2147483648	; 0x80000000
   16d48:	movlt	r0, #-2147483648	; 0x80000000
   16d4c:	b	17164 <_obstack_memory_used@@Base+0x968>
   16d50:	cmp	r1, #0
   16d54:	beq	16d40 <_obstack_memory_used@@Base+0x544>
   16d58:	push	{r0, r1, lr}
   16d5c:	bl	16b38 <_obstack_memory_used@@Base+0x33c>
   16d60:	pop	{r1, r2, lr}
   16d64:	mul	r3, r2, r0
   16d68:	sub	r1, r1, r3
   16d6c:	bx	lr
   16d70:	eor	r1, r1, #-2147483648	; 0x80000000
   16d74:	b	16d7c <_obstack_memory_used@@Base+0x580>
   16d78:	eor	r3, r3, #-2147483648	; 0x80000000
   16d7c:	push	{r4, r5, lr}
   16d80:	lsl	r4, r1, #1
   16d84:	lsl	r5, r3, #1
   16d88:	teq	r4, r5
   16d8c:	teqeq	r0, r2
   16d90:	orrsne	ip, r4, r0
   16d94:	orrsne	ip, r5, r2
   16d98:	mvnsne	ip, r4, asr #21
   16d9c:	mvnsne	ip, r5, asr #21
   16da0:	beq	16f8c <_obstack_memory_used@@Base+0x790>
   16da4:	lsr	r4, r4, #21
   16da8:	rsbs	r5, r4, r5, lsr #21
   16dac:	rsblt	r5, r5, #0
   16db0:	ble	16dd0 <_obstack_memory_used@@Base+0x5d4>
   16db4:	add	r4, r4, r5
   16db8:	eor	r2, r0, r2
   16dbc:	eor	r3, r1, r3
   16dc0:	eor	r0, r2, r0
   16dc4:	eor	r1, r3, r1
   16dc8:	eor	r2, r0, r2
   16dcc:	eor	r3, r1, r3
   16dd0:	cmp	r5, #54	; 0x36
   16dd4:	pophi	{r4, r5, pc}
   16dd8:	tst	r1, #-2147483648	; 0x80000000
   16ddc:	lsl	r1, r1, #12
   16de0:	mov	ip, #1048576	; 0x100000
   16de4:	orr	r1, ip, r1, lsr #12
   16de8:	beq	16df4 <_obstack_memory_used@@Base+0x5f8>
   16dec:	rsbs	r0, r0, #0
   16df0:	rsc	r1, r1, #0
   16df4:	tst	r3, #-2147483648	; 0x80000000
   16df8:	lsl	r3, r3, #12
   16dfc:	orr	r3, ip, r3, lsr #12
   16e00:	beq	16e0c <_obstack_memory_used@@Base+0x610>
   16e04:	rsbs	r2, r2, #0
   16e08:	rsc	r3, r3, #0
   16e0c:	teq	r4, r5
   16e10:	beq	16f74 <_obstack_memory_used@@Base+0x778>
   16e14:	sub	r4, r4, #1
   16e18:	rsbs	lr, r5, #32
   16e1c:	blt	16e38 <_obstack_memory_used@@Base+0x63c>
   16e20:	lsl	ip, r2, lr
   16e24:	adds	r0, r0, r2, lsr r5
   16e28:	adc	r1, r1, #0
   16e2c:	adds	r0, r0, r3, lsl lr
   16e30:	adcs	r1, r1, r3, asr r5
   16e34:	b	16e54 <_obstack_memory_used@@Base+0x658>
   16e38:	sub	r5, r5, #32
   16e3c:	add	lr, lr, #32
   16e40:	cmp	r2, #1
   16e44:	lsl	ip, r3, lr
   16e48:	orrcs	ip, ip, #2
   16e4c:	adds	r0, r0, r3, asr r5
   16e50:	adcs	r1, r1, r3, asr #31
   16e54:	and	r5, r1, #-2147483648	; 0x80000000
   16e58:	bpl	16e68 <_obstack_memory_used@@Base+0x66c>
   16e5c:	rsbs	ip, ip, #0
   16e60:	rscs	r0, r0, #0
   16e64:	rsc	r1, r1, #0
   16e68:	cmp	r1, #1048576	; 0x100000
   16e6c:	bcc	16eac <_obstack_memory_used@@Base+0x6b0>
   16e70:	cmp	r1, #2097152	; 0x200000
   16e74:	bcc	16e94 <_obstack_memory_used@@Base+0x698>
   16e78:	lsrs	r1, r1, #1
   16e7c:	rrxs	r0, r0
   16e80:	rrx	ip, ip
   16e84:	add	r4, r4, #1
   16e88:	lsl	r2, r4, #21
   16e8c:	cmn	r2, #4194304	; 0x400000
   16e90:	bcs	16fec <_obstack_memory_used@@Base+0x7f0>
   16e94:	cmp	ip, #-2147483648	; 0x80000000
   16e98:	lsrseq	ip, r0, #1
   16e9c:	adcs	r0, r0, #0
   16ea0:	adc	r1, r1, r4, lsl #20
   16ea4:	orr	r1, r1, r5
   16ea8:	pop	{r4, r5, pc}
   16eac:	lsls	ip, ip, #1
   16eb0:	adcs	r0, r0, r0
   16eb4:	adc	r1, r1, r1
   16eb8:	tst	r1, #1048576	; 0x100000
   16ebc:	sub	r4, r4, #1
   16ec0:	bne	16e94 <_obstack_memory_used@@Base+0x698>
   16ec4:	teq	r1, #0
   16ec8:	moveq	r1, r0
   16ecc:	moveq	r0, #0
   16ed0:	clz	r3, r1
   16ed4:	addeq	r3, r3, #32
   16ed8:	sub	r3, r3, #11
   16edc:	subs	r2, r3, #32
   16ee0:	bge	16f04 <_obstack_memory_used@@Base+0x708>
   16ee4:	adds	r2, r2, #12
   16ee8:	ble	16f00 <_obstack_memory_used@@Base+0x704>
   16eec:	add	ip, r2, #20
   16ef0:	rsb	r2, r2, #12
   16ef4:	lsl	r0, r1, ip
   16ef8:	lsr	r1, r1, r2
   16efc:	b	16f14 <_obstack_memory_used@@Base+0x718>
   16f00:	add	r2, r2, #20
   16f04:	rsble	ip, r2, #32
   16f08:	lsl	r1, r1, r2
   16f0c:	orrle	r1, r1, r0, lsr ip
   16f10:	lslle	r0, r0, r2
   16f14:	subs	r4, r4, r3
   16f18:	addge	r1, r1, r4, lsl #20
   16f1c:	orrge	r1, r1, r5
   16f20:	popge	{r4, r5, pc}
   16f24:	mvn	r4, r4
   16f28:	subs	r4, r4, #31
   16f2c:	bge	16f68 <_obstack_memory_used@@Base+0x76c>
   16f30:	adds	r4, r4, #12
   16f34:	bgt	16f50 <_obstack_memory_used@@Base+0x754>
   16f38:	add	r4, r4, #20
   16f3c:	rsb	r2, r4, #32
   16f40:	lsr	r0, r0, r4
   16f44:	orr	r0, r0, r1, lsl r2
   16f48:	orr	r1, r5, r1, lsr r4
   16f4c:	pop	{r4, r5, pc}
   16f50:	rsb	r4, r4, #12
   16f54:	rsb	r2, r4, #32
   16f58:	lsr	r0, r0, r2
   16f5c:	orr	r0, r0, r1, lsl r4
   16f60:	mov	r1, r5
   16f64:	pop	{r4, r5, pc}
   16f68:	lsr	r0, r1, r4
   16f6c:	mov	r1, r5
   16f70:	pop	{r4, r5, pc}
   16f74:	teq	r4, #0
   16f78:	eor	r3, r3, #1048576	; 0x100000
   16f7c:	eoreq	r1, r1, #1048576	; 0x100000
   16f80:	addeq	r4, r4, #1
   16f84:	subne	r5, r5, #1
   16f88:	b	16e14 <_obstack_memory_used@@Base+0x618>
   16f8c:	mvns	ip, r4, asr #21
   16f90:	mvnsne	ip, r5, asr #21
   16f94:	beq	16ffc <_obstack_memory_used@@Base+0x800>
   16f98:	teq	r4, r5
   16f9c:	teqeq	r0, r2
   16fa0:	beq	16fb4 <_obstack_memory_used@@Base+0x7b8>
   16fa4:	orrs	ip, r4, r0
   16fa8:	moveq	r1, r3
   16fac:	moveq	r0, r2
   16fb0:	pop	{r4, r5, pc}
   16fb4:	teq	r1, r3
   16fb8:	movne	r1, #0
   16fbc:	movne	r0, #0
   16fc0:	popne	{r4, r5, pc}
   16fc4:	lsrs	ip, r4, #21
   16fc8:	bne	16fdc <_obstack_memory_used@@Base+0x7e0>
   16fcc:	lsls	r0, r0, #1
   16fd0:	adcs	r1, r1, r1
   16fd4:	orrcs	r1, r1, #-2147483648	; 0x80000000
   16fd8:	pop	{r4, r5, pc}
   16fdc:	adds	r4, r4, #4194304	; 0x400000
   16fe0:	addcc	r1, r1, #1048576	; 0x100000
   16fe4:	popcc	{r4, r5, pc}
   16fe8:	and	r5, r1, #-2147483648	; 0x80000000
   16fec:	orr	r1, r5, #2130706432	; 0x7f000000
   16ff0:	orr	r1, r1, #15728640	; 0xf00000
   16ff4:	mov	r0, #0
   16ff8:	pop	{r4, r5, pc}
   16ffc:	mvns	ip, r4, asr #21
   17000:	movne	r1, r3
   17004:	movne	r0, r2
   17008:	mvnseq	ip, r5, asr #21
   1700c:	movne	r3, r1
   17010:	movne	r2, r0
   17014:	orrs	r4, r0, r1, lsl #12
   17018:	orrseq	r5, r2, r3, lsl #12
   1701c:	teqeq	r1, r3
   17020:	orrne	r1, r1, #524288	; 0x80000
   17024:	pop	{r4, r5, pc}
   17028:	teq	r0, #0
   1702c:	moveq	r1, #0
   17030:	bxeq	lr
   17034:	push	{r4, r5, lr}
   17038:	mov	r4, #1024	; 0x400
   1703c:	add	r4, r4, #50	; 0x32
   17040:	mov	r5, #0
   17044:	mov	r1, #0
   17048:	b	16ec4 <_obstack_memory_used@@Base+0x6c8>
   1704c:	teq	r0, #0
   17050:	moveq	r1, #0
   17054:	bxeq	lr
   17058:	push	{r4, r5, lr}
   1705c:	mov	r4, #1024	; 0x400
   17060:	add	r4, r4, #50	; 0x32
   17064:	ands	r5, r0, #-2147483648	; 0x80000000
   17068:	rsbmi	r0, r0, #0
   1706c:	mov	r1, #0
   17070:	b	16ec4 <_obstack_memory_used@@Base+0x6c8>
   17074:	lsls	r2, r0, #1
   17078:	asr	r1, r2, #3
   1707c:	rrx	r1, r1
   17080:	lsl	r0, r2, #28
   17084:	andsne	r3, r2, #-16777216	; 0xff000000
   17088:	teqne	r3, #-16777216	; 0xff000000
   1708c:	eorne	r1, r1, #939524096	; 0x38000000
   17090:	bxne	lr
   17094:	teq	r2, #0
   17098:	teqne	r3, #-16777216	; 0xff000000
   1709c:	bxeq	lr
   170a0:	push	{r4, r5, lr}
   170a4:	mov	r4, #896	; 0x380
   170a8:	and	r5, r1, #-2147483648	; 0x80000000
   170ac:	bic	r1, r1, #-2147483648	; 0x80000000
   170b0:	b	16ec4 <_obstack_memory_used@@Base+0x6c8>
   170b4:	orrs	r2, r0, r1
   170b8:	bxeq	lr
   170bc:	push	{r4, r5, lr}
   170c0:	mov	r5, #0
   170c4:	b	170e4 <_obstack_memory_used@@Base+0x8e8>
   170c8:	orrs	r2, r0, r1
   170cc:	bxeq	lr
   170d0:	push	{r4, r5, lr}
   170d4:	ands	r5, r1, #-2147483648	; 0x80000000
   170d8:	bpl	170e4 <_obstack_memory_used@@Base+0x8e8>
   170dc:	rsbs	r0, r0, #0
   170e0:	rsc	r1, r1, #0
   170e4:	mov	r4, #1024	; 0x400
   170e8:	add	r4, r4, #50	; 0x32
   170ec:	lsrs	ip, r1, #22
   170f0:	beq	16e68 <_obstack_memory_used@@Base+0x66c>
   170f4:	mov	r2, #3
   170f8:	lsrs	ip, ip, #3
   170fc:	addne	r2, r2, #3
   17100:	lsrs	ip, ip, #3
   17104:	addne	r2, r2, #3
   17108:	add	r2, r2, ip, lsr #3
   1710c:	rsb	r3, r2, #32
   17110:	lsl	ip, r0, r3
   17114:	lsr	r0, r0, r2
   17118:	orr	r0, r0, r1, lsl r3
   1711c:	lsr	r1, r1, r2
   17120:	add	r4, r4, r2
   17124:	b	16e68 <_obstack_memory_used@@Base+0x66c>
   17128:	cmp	r3, #0
   1712c:	cmpeq	r2, #0
   17130:	bne	17148 <_obstack_memory_used@@Base+0x94c>
   17134:	cmp	r1, #0
   17138:	cmpeq	r0, #0
   1713c:	mvnne	r1, #0
   17140:	mvnne	r0, #0
   17144:	b	17164 <_obstack_memory_used@@Base+0x968>
   17148:	sub	sp, sp, #8
   1714c:	push	{sp, lr}
   17150:	bl	17174 <_obstack_memory_used@@Base+0x978>
   17154:	ldr	lr, [sp, #4]
   17158:	add	sp, sp, #8
   1715c:	pop	{r2, r3}
   17160:	bx	lr
   17164:	push	{r1, lr}
   17168:	mov	r0, #8
   1716c:	bl	1107c <raise@plt>
   17170:	pop	{r1, pc}
   17174:	cmp	r1, r3
   17178:	push	{r4, r5, r6, r7, r8, r9, lr}
   1717c:	cmpeq	r0, r2
   17180:	mov	r4, r0
   17184:	mov	r5, r1
   17188:	ldr	r9, [sp, #28]
   1718c:	movcc	r0, #0
   17190:	movcc	r1, #0
   17194:	bcc	1728c <_obstack_memory_used@@Base+0xa90>
   17198:	cmp	r3, #0
   1719c:	clzeq	ip, r2
   171a0:	clzne	ip, r3
   171a4:	addeq	ip, ip, #32
   171a8:	cmp	r5, #0
   171ac:	clzeq	r1, r4
   171b0:	addeq	r1, r1, #32
   171b4:	clzne	r1, r5
   171b8:	sub	ip, ip, r1
   171bc:	sub	lr, ip, #32
   171c0:	lsl	r7, r3, ip
   171c4:	rsb	r8, ip, #32
   171c8:	orr	r7, r7, r2, lsl lr
   171cc:	orr	r7, r7, r2, lsr r8
   171d0:	lsl	r6, r2, ip
   171d4:	cmp	r5, r7
   171d8:	cmpeq	r4, r6
   171dc:	movcc	r0, #0
   171e0:	movcc	r1, #0
   171e4:	bcc	17200 <_obstack_memory_used@@Base+0xa04>
   171e8:	mov	r3, #1
   171ec:	subs	r4, r4, r6
   171f0:	lsl	r1, r3, lr
   171f4:	lsl	r0, r3, ip
   171f8:	orr	r1, r1, r3, lsr r8
   171fc:	sbc	r5, r5, r7
   17200:	cmp	ip, #0
   17204:	beq	1728c <_obstack_memory_used@@Base+0xa90>
   17208:	lsrs	r3, r7, #1
   1720c:	rrx	r2, r6
   17210:	mov	r6, ip
   17214:	b	17238 <_obstack_memory_used@@Base+0xa3c>
   17218:	subs	r4, r4, r2
   1721c:	sbc	r5, r5, r3
   17220:	adds	r4, r4, r4
   17224:	adc	r5, r5, r5
   17228:	adds	r4, r4, #1
   1722c:	adc	r5, r5, #0
   17230:	subs	r6, r6, #1
   17234:	beq	17254 <_obstack_memory_used@@Base+0xa58>
   17238:	cmp	r5, r3
   1723c:	cmpeq	r4, r2
   17240:	bcs	17218 <_obstack_memory_used@@Base+0xa1c>
   17244:	adds	r4, r4, r4
   17248:	adc	r5, r5, r5
   1724c:	subs	r6, r6, #1
   17250:	bne	17238 <_obstack_memory_used@@Base+0xa3c>
   17254:	lsr	r6, r4, ip
   17258:	lsr	r7, r5, ip
   1725c:	orr	r6, r6, r5, lsl r8
   17260:	adds	r2, r0, r4
   17264:	orr	r6, r6, r5, lsr lr
   17268:	adc	r3, r1, r5
   1726c:	lsl	r1, r7, ip
   17270:	orr	r1, r1, r6, lsl lr
   17274:	lsl	r0, r6, ip
   17278:	orr	r1, r1, r6, lsr r8
   1727c:	subs	r0, r2, r0
   17280:	mov	r4, r6
   17284:	mov	r5, r7
   17288:	sbc	r1, r3, r1
   1728c:	cmp	r9, #0
   17290:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   17294:	strd	r4, [r9]
   17298:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1729c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   172a0:	mov	r7, r0
   172a4:	ldr	r6, [pc, #72]	; 172f4 <_obstack_memory_used@@Base+0xaf8>
   172a8:	ldr	r5, [pc, #72]	; 172f8 <_obstack_memory_used@@Base+0xafc>
   172ac:	add	r6, pc, r6
   172b0:	add	r5, pc, r5
   172b4:	sub	r6, r6, r5
   172b8:	mov	r8, r1
   172bc:	mov	r9, r2
   172c0:	bl	11044 <calloc@plt-0x20>
   172c4:	asrs	r6, r6, #2
   172c8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   172cc:	mov	r4, #0
   172d0:	add	r4, r4, #1
   172d4:	ldr	r3, [r5], #4
   172d8:	mov	r2, r9
   172dc:	mov	r1, r8
   172e0:	mov	r0, r7
   172e4:	blx	r3
   172e8:	cmp	r6, r4
   172ec:	bne	172d0 <_obstack_memory_used@@Base+0xad4>
   172f0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   172f4:	andeq	r1, r1, ip, asr ip
   172f8:	andeq	r1, r1, r4, asr ip
   172fc:	bx	lr
   17300:	ldr	r3, [pc, #12]	; 17314 <_obstack_memory_used@@Base+0xb18>
   17304:	mov	r1, #0
   17308:	add	r3, pc, r3
   1730c:	ldr	r2, [r3]
   17310:	b	1128c <__cxa_atexit@plt>
   17314:	andeq	r1, r1, r4, lsl lr

Disassembly of section .fini:

00017318 <.fini>:
   17318:	push	{r3, lr}
   1731c:	pop	{r3, pc}
