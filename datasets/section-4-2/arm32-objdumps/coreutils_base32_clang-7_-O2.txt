
../repos/coreutils/src/base32:     file format elf32-littlearm


Disassembly of section .init:

00010e04 <.init>:
   10e04:	push	{r3, lr}
   10e08:	bl	110d0 <__assert_fail@plt+0x48>
   10e0c:	pop	{r3, pc}

Disassembly of section .plt:

00010e10 <calloc@plt-0x14>:
   10e10:	push	{lr}		; (str lr, [sp, #-4]!)
   10e14:	ldr	lr, [pc, #4]	; 10e20 <calloc@plt-0x4>
   10e18:	add	lr, pc, lr
   10e1c:	ldr	pc, [lr, #8]!
   10e20:	andeq	r7, r1, r0, ror #3

00010e24 <calloc@plt>:
   10e24:	add	ip, pc, #0, 12
   10e28:	add	ip, ip, #94208	; 0x17000
   10e2c:	ldr	pc, [ip, #480]!	; 0x1e0

00010e30 <fputs_unlocked@plt>:
   10e30:	add	ip, pc, #0, 12
   10e34:	add	ip, ip, #94208	; 0x17000
   10e38:	ldr	pc, [ip, #472]!	; 0x1d8

00010e3c <raise@plt>:
   10e3c:	add	ip, pc, #0, 12
   10e40:	add	ip, ip, #94208	; 0x17000
   10e44:	ldr	pc, [ip, #464]!	; 0x1d0

00010e48 <strcmp@plt>:
   10e48:	add	ip, pc, #0, 12
   10e4c:	add	ip, ip, #94208	; 0x17000
   10e50:	ldr	pc, [ip, #456]!	; 0x1c8

00010e54 <posix_fadvise64@plt>:
   10e54:	add	ip, pc, #0, 12
   10e58:	add	ip, ip, #94208	; 0x17000
   10e5c:	ldr	pc, [ip, #448]!	; 0x1c0

00010e60 <fflush@plt>:
   10e60:	add	ip, pc, #0, 12
   10e64:	add	ip, ip, #94208	; 0x17000
   10e68:	ldr	pc, [ip, #440]!	; 0x1b8

00010e6c <memmove@plt>:
   10e6c:	add	ip, pc, #0, 12
   10e70:	add	ip, ip, #94208	; 0x17000
   10e74:	ldr	pc, [ip, #432]!	; 0x1b0

00010e78 <free@plt>:
   10e78:	add	ip, pc, #0, 12
   10e7c:	add	ip, ip, #94208	; 0x17000
   10e80:	ldr	pc, [ip, #424]!	; 0x1a8

00010e84 <_exit@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #94208	; 0x17000
   10e8c:	ldr	pc, [ip, #416]!	; 0x1a0

00010e90 <memcpy@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #94208	; 0x17000
   10e98:	ldr	pc, [ip, #408]!	; 0x198

00010e9c <mbsinit@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #94208	; 0x17000
   10ea4:	ldr	pc, [ip, #400]!	; 0x190

00010ea8 <fwrite_unlocked@plt>:
   10ea8:	add	ip, pc, #0, 12
   10eac:	add	ip, ip, #94208	; 0x17000
   10eb0:	ldr	pc, [ip, #392]!	; 0x188

00010eb4 <memcmp@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #94208	; 0x17000
   10ebc:	ldr	pc, [ip, #384]!	; 0x180

00010ec0 <dcgettext@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #94208	; 0x17000
   10ec8:	ldr	pc, [ip, #376]!	; 0x178

00010ecc <realloc@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #94208	; 0x17000
   10ed4:	ldr	pc, [ip, #368]!	; 0x170

00010ed8 <textdomain@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #94208	; 0x17000
   10ee0:	ldr	pc, [ip, #360]!	; 0x168

00010ee4 <iswprint@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #94208	; 0x17000
   10eec:	ldr	pc, [ip, #352]!	; 0x160

00010ef0 <fwrite@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #94208	; 0x17000
   10ef8:	ldr	pc, [ip, #344]!	; 0x158

00010efc <lseek64@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #94208	; 0x17000
   10f04:	ldr	pc, [ip, #336]!	; 0x150

00010f08 <__ctype_get_mb_cur_max@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #94208	; 0x17000
   10f10:	ldr	pc, [ip, #328]!	; 0x148

00010f14 <__fpending@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #94208	; 0x17000
   10f1c:	ldr	pc, [ip, #320]!	; 0x140

00010f20 <mbrtowc@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #94208	; 0x17000
   10f28:	ldr	pc, [ip, #312]!	; 0x138

00010f2c <error@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #94208	; 0x17000
   10f34:	ldr	pc, [ip, #304]!	; 0x130

00010f38 <malloc@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #94208	; 0x17000
   10f40:	ldr	pc, [ip, #296]!	; 0x128

00010f44 <__libc_start_main@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #94208	; 0x17000
   10f4c:	ldr	pc, [ip, #288]!	; 0x120

00010f50 <__freading@plt>:
   10f50:	add	ip, pc, #0, 12
   10f54:	add	ip, ip, #94208	; 0x17000
   10f58:	ldr	pc, [ip, #280]!	; 0x118

00010f5c <__gmon_start__@plt>:
   10f5c:	add	ip, pc, #0, 12
   10f60:	add	ip, ip, #94208	; 0x17000
   10f64:	ldr	pc, [ip, #272]!	; 0x110

00010f68 <getopt_long@plt>:
   10f68:	add	ip, pc, #0, 12
   10f6c:	add	ip, ip, #94208	; 0x17000
   10f70:	ldr	pc, [ip, #264]!	; 0x108

00010f74 <__ctype_b_loc@plt>:
   10f74:	add	ip, pc, #0, 12
   10f78:	add	ip, ip, #94208	; 0x17000
   10f7c:	ldr	pc, [ip, #256]!	; 0x100

00010f80 <exit@plt>:
   10f80:	add	ip, pc, #0, 12
   10f84:	add	ip, ip, #94208	; 0x17000
   10f88:	ldr	pc, [ip, #248]!	; 0xf8

00010f8c <strlen@plt>:
   10f8c:	add	ip, pc, #0, 12
   10f90:	add	ip, ip, #94208	; 0x17000
   10f94:	ldr	pc, [ip, #240]!	; 0xf0

00010f98 <strchr@plt>:
   10f98:	add	ip, pc, #0, 12
   10f9c:	add	ip, ip, #94208	; 0x17000
   10fa0:	ldr	pc, [ip, #232]!	; 0xe8

00010fa4 <__errno_location@plt>:
   10fa4:	add	ip, pc, #0, 12
   10fa8:	add	ip, ip, #94208	; 0x17000
   10fac:	ldr	pc, [ip, #224]!	; 0xe0

00010fb0 <__cxa_atexit@plt>:
   10fb0:	add	ip, pc, #0, 12
   10fb4:	add	ip, ip, #94208	; 0x17000
   10fb8:	ldr	pc, [ip, #216]!	; 0xd8

00010fbc <memset@plt>:
   10fbc:	add	ip, pc, #0, 12
   10fc0:	add	ip, ip, #94208	; 0x17000
   10fc4:	ldr	pc, [ip, #208]!	; 0xd0

00010fc8 <__printf_chk@plt>:
   10fc8:	add	ip, pc, #0, 12
   10fcc:	add	ip, ip, #94208	; 0x17000
   10fd0:	ldr	pc, [ip, #200]!	; 0xc8

00010fd4 <fileno@plt>:
   10fd4:	add	ip, pc, #0, 12
   10fd8:	add	ip, ip, #94208	; 0x17000
   10fdc:	ldr	pc, [ip, #192]!	; 0xc0

00010fe0 <__fprintf_chk@plt>:
   10fe0:	add	ip, pc, #0, 12
   10fe4:	add	ip, ip, #94208	; 0x17000
   10fe8:	ldr	pc, [ip, #184]!	; 0xb8

00010fec <memchr@plt>:
   10fec:	add	ip, pc, #0, 12
   10ff0:	add	ip, ip, #94208	; 0x17000
   10ff4:	ldr	pc, [ip, #176]!	; 0xb0

00010ff8 <fclose@plt>:
   10ff8:	add	ip, pc, #0, 12
   10ffc:	add	ip, ip, #94208	; 0x17000
   11000:	ldr	pc, [ip, #168]!	; 0xa8

00011004 <fseeko64@plt>:
   11004:	add	ip, pc, #0, 12
   11008:	add	ip, ip, #94208	; 0x17000
   1100c:	ldr	pc, [ip, #160]!	; 0xa0

00011010 <__overflow@plt>:
   11010:	add	ip, pc, #0, 12
   11014:	add	ip, ip, #94208	; 0x17000
   11018:	ldr	pc, [ip, #152]!	; 0x98

0001101c <setlocale@plt>:
   1101c:	add	ip, pc, #0, 12
   11020:	add	ip, ip, #94208	; 0x17000
   11024:	ldr	pc, [ip, #144]!	; 0x90

00011028 <strrchr@plt>:
   11028:	add	ip, pc, #0, 12
   1102c:	add	ip, ip, #94208	; 0x17000
   11030:	ldr	pc, [ip, #136]!	; 0x88

00011034 <nl_langinfo@plt>:
   11034:	add	ip, pc, #0, 12
   11038:	add	ip, ip, #94208	; 0x17000
   1103c:	ldr	pc, [ip, #128]!	; 0x80

00011040 <__strtoll_internal@plt>:
   11040:	add	ip, pc, #0, 12
   11044:	add	ip, ip, #94208	; 0x17000
   11048:	ldr	pc, [ip, #120]!	; 0x78

0001104c <fopen64@plt>:
   1104c:	add	ip, pc, #0, 12
   11050:	add	ip, ip, #94208	; 0x17000
   11054:	ldr	pc, [ip, #112]!	; 0x70

00011058 <bindtextdomain@plt>:
   11058:	add	ip, pc, #0, 12
   1105c:	add	ip, ip, #94208	; 0x17000
   11060:	ldr	pc, [ip, #104]!	; 0x68

00011064 <fread_unlocked@plt>:
   11064:	add	ip, pc, #0, 12
   11068:	add	ip, ip, #94208	; 0x17000
   1106c:	ldr	pc, [ip, #96]!	; 0x60

00011070 <strncmp@plt>:
   11070:	add	ip, pc, #0, 12
   11074:	add	ip, ip, #94208	; 0x17000
   11078:	ldr	pc, [ip, #88]!	; 0x58

0001107c <abort@plt>:
   1107c:	add	ip, pc, #0, 12
   11080:	add	ip, ip, #94208	; 0x17000
   11084:	ldr	pc, [ip, #80]!	; 0x50

00011088 <__assert_fail@plt>:
   11088:	add	ip, pc, #0, 12
   1108c:	add	ip, ip, #94208	; 0x17000
   11090:	ldr	pc, [ip, #72]!	; 0x48

Disassembly of section .text:

00011094 <.text>:
   11094:	mov	fp, #0
   11098:	mov	lr, #0
   1109c:	pop	{r1}		; (ldr r1, [sp], #4)
   110a0:	mov	r2, sp
   110a4:	push	{r2}		; (str r2, [sp, #-4]!)
   110a8:	push	{r0}		; (str r0, [sp, #-4]!)
   110ac:	ldr	ip, [pc, #16]	; 110c4 <__assert_fail@plt+0x3c>
   110b0:	push	{ip}		; (str ip, [sp, #-4]!)
   110b4:	ldr	r0, [pc, #12]	; 110c8 <__assert_fail@plt+0x40>
   110b8:	ldr	r3, [pc, #12]	; 110cc <__assert_fail@plt+0x44>
   110bc:	bl	10f44 <__libc_start_main@plt>
   110c0:	bl	1107c <abort@plt>
   110c4:			; <UNDEFINED> instruction: 0x00016fbc
   110c8:	andeq	r1, r1, ip, asr #8
   110cc:	andeq	r6, r1, ip, asr pc
   110d0:	ldr	r3, [pc, #20]	; 110ec <__assert_fail@plt+0x64>
   110d4:	ldr	r2, [pc, #20]	; 110f0 <__assert_fail@plt+0x68>
   110d8:	add	r3, pc, r3
   110dc:	ldr	r2, [r3, r2]
   110e0:	cmp	r2, #0
   110e4:	bxeq	lr
   110e8:	b	10f5c <__gmon_start__@plt>
   110ec:	andeq	r6, r1, r0, lsr #30
   110f0:	ldrdeq	r0, [r0], -ip
   110f4:	ldr	r0, [pc, #24]	; 11114 <__assert_fail@plt+0x8c>
   110f8:	ldr	r3, [pc, #24]	; 11118 <__assert_fail@plt+0x90>
   110fc:	cmp	r3, r0
   11100:	bxeq	lr
   11104:	ldr	r3, [pc, #16]	; 1111c <__assert_fail@plt+0x94>
   11108:	cmp	r3, #0
   1110c:	bxeq	lr
   11110:	bx	r3
   11114:	andeq	r8, r2, r0, lsr r1
   11118:	andeq	r8, r2, r0, lsr r1
   1111c:	andeq	r0, r0, r0
   11120:	ldr	r0, [pc, #36]	; 1114c <__assert_fail@plt+0xc4>
   11124:	ldr	r1, [pc, #36]	; 11150 <__assert_fail@plt+0xc8>
   11128:	sub	r1, r1, r0
   1112c:	asr	r1, r1, #2
   11130:	add	r1, r1, r1, lsr #31
   11134:	asrs	r1, r1, #1
   11138:	bxeq	lr
   1113c:	ldr	r3, [pc, #16]	; 11154 <__assert_fail@plt+0xcc>
   11140:	cmp	r3, #0
   11144:	bxeq	lr
   11148:	bx	r3
   1114c:	andeq	r8, r2, r0, lsr r1
   11150:	andeq	r8, r2, r0, lsr r1
   11154:	andeq	r0, r0, r0
   11158:	push	{r4, lr}
   1115c:	ldr	r4, [pc, #24]	; 1117c <__assert_fail@plt+0xf4>
   11160:	ldrb	r3, [r4]
   11164:	cmp	r3, #0
   11168:	popne	{r4, pc}
   1116c:	bl	110f4 <__assert_fail@plt+0x6c>
   11170:	mov	r3, #1
   11174:	strb	r3, [r4]
   11178:	pop	{r4, pc}
   1117c:	andeq	r8, r2, r4, asr r1
   11180:	b	11120 <__assert_fail@plt+0x98>
   11184:	push	{fp, lr}
   11188:	mov	fp, sp
   1118c:	sub	sp, sp, #56	; 0x38
   11190:	mov	r4, r0
   11194:	cmp	r0, #0
   11198:	bne	11408 <__assert_fail@plt+0x380>
   1119c:	movw	r1, #28683	; 0x700b
   111a0:	mov	r0, #0
   111a4:	mov	r2, #5
   111a8:	movt	r1, #1
   111ac:	bl	10ec0 <dcgettext@plt>
   111b0:	mov	r1, r0
   111b4:	movw	r0, #33120	; 0x8160
   111b8:	movt	r0, #2
   111bc:	ldr	r2, [r0]
   111c0:	mov	r0, #1
   111c4:	bl	10fc8 <__printf_chk@plt>
   111c8:	movw	r1, #28713	; 0x7029
   111cc:	mov	r0, #0
   111d0:	mov	r2, #5
   111d4:	movt	r1, #1
   111d8:	bl	10ec0 <dcgettext@plt>
   111dc:	mov	r1, r0
   111e0:	mov	r0, #1
   111e4:	mov	r2, #32
   111e8:	bl	10fc8 <__printf_chk@plt>
   111ec:	movw	r1, #29503	; 0x733f
   111f0:	mov	r0, #0
   111f4:	mov	r2, #5
   111f8:	movt	r1, #1
   111fc:	bl	10ec0 <dcgettext@plt>
   11200:	movw	r7, #33100	; 0x814c
   11204:	movt	r7, #2
   11208:	ldr	r1, [r7]
   1120c:	bl	10e30 <fputs_unlocked@plt>
   11210:	movw	r1, #29559	; 0x7377
   11214:	mov	r0, #0
   11218:	mov	r2, #5
   1121c:	movt	r1, #1
   11220:	bl	10ec0 <dcgettext@plt>
   11224:	ldr	r1, [r7]
   11228:	bl	10e30 <fputs_unlocked@plt>
   1122c:	movw	r1, #28783	; 0x706f
   11230:	mov	r0, #0
   11234:	mov	r2, #5
   11238:	movt	r1, #1
   1123c:	bl	10ec0 <dcgettext@plt>
   11240:	ldr	r1, [r7]
   11244:	bl	10e30 <fputs_unlocked@plt>
   11248:	movw	r1, #29025	; 0x7161
   1124c:	mov	r0, #0
   11250:	mov	r2, #5
   11254:	movt	r1, #1
   11258:	bl	10ec0 <dcgettext@plt>
   1125c:	ldr	r1, [r7]
   11260:	bl	10e30 <fputs_unlocked@plt>
   11264:	movw	r1, #29070	; 0x718e
   11268:	mov	r0, #0
   1126c:	mov	r2, #5
   11270:	movt	r1, #1
   11274:	bl	10ec0 <dcgettext@plt>
   11278:	ldr	r1, [r7]
   1127c:	bl	10e30 <fputs_unlocked@plt>
   11280:	movw	r1, #29124	; 0x71c4
   11284:	mov	r0, #0
   11288:	mov	r2, #5
   1128c:	movt	r1, #1
   11290:	bl	10ec0 <dcgettext@plt>
   11294:	movw	r5, #29392	; 0x72d0
   11298:	mov	r1, r0
   1129c:	mov	r0, #1
   112a0:	movt	r5, #1
   112a4:	mov	r2, r5
   112a8:	mov	r3, r5
   112ac:	bl	10fc8 <__printf_chk@plt>
   112b0:	movw	r0, #30144	; 0x75c0
   112b4:	mov	r2, #48	; 0x30
   112b8:	mov	r6, sp
   112bc:	movt	r0, #1
   112c0:	add	r1, r0, #32
   112c4:	add	r3, r0, #16
   112c8:	vld1.64	{d18-d19}, [r0], r2
   112cc:	vld1.64	{d16-d17}, [r1]
   112d0:	vld1.64	{d20-d21}, [r3]
   112d4:	add	r1, r6, #32
   112d8:	vldr	d22, [r0]
   112dc:	add	r0, r6, #16
   112e0:	vst1.64	{d16-d17}, [r1]
   112e4:	movw	r1, #29634	; 0x73c2
   112e8:	vst1.64	{d20-d21}, [r0]
   112ec:	mov	r0, r6
   112f0:	vst1.64	{d18-d19}, [r0], r2
   112f4:	movt	r1, #1
   112f8:	vstr	d22, [r0]
   112fc:	mov	r0, r5
   11300:	bl	10e48 <strcmp@plt>
   11304:	cmp	r0, #0
   11308:	ldrne	r1, [r6, #8]!
   1130c:	cmpne	r1, #0
   11310:	bne	112fc <__assert_fail@plt+0x274>
   11314:	ldr	r6, [r6, #4]
   11318:	movw	r1, #29729	; 0x7421
   1131c:	mov	r0, #0
   11320:	mov	r2, #5
   11324:	movt	r1, #1
   11328:	bl	10ec0 <dcgettext@plt>
   1132c:	movw	r2, #29453	; 0x730d
   11330:	movw	r3, #29752	; 0x7438
   11334:	mov	r1, r0
   11338:	mov	r0, #1
   1133c:	movt	r2, #1
   11340:	movt	r3, #1
   11344:	bl	10fc8 <__printf_chk@plt>
   11348:	cmp	r6, #0
   1134c:	mov	r0, #5
   11350:	mov	r1, #0
   11354:	moveq	r6, r5
   11358:	bl	1101c <setlocale@plt>
   1135c:	cmp	r0, #0
   11360:	beq	11398 <__assert_fail@plt+0x310>
   11364:	movw	r1, #29792	; 0x7460
   11368:	mov	r2, #3
   1136c:	movt	r1, #1
   11370:	bl	11070 <strncmp@plt>
   11374:	cmp	r0, #0
   11378:	beq	11398 <__assert_fail@plt+0x310>
   1137c:	movw	r1, #29796	; 0x7464
   11380:	mov	r0, #0
   11384:	mov	r2, #5
   11388:	movt	r1, #1
   1138c:	bl	10ec0 <dcgettext@plt>
   11390:	ldr	r1, [r7]
   11394:	bl	10e30 <fputs_unlocked@plt>
   11398:	movw	r1, #29867	; 0x74ab
   1139c:	mov	r0, #0
   113a0:	mov	r2, #5
   113a4:	movt	r1, #1
   113a8:	bl	10ec0 <dcgettext@plt>
   113ac:	movw	r2, #29752	; 0x7438
   113b0:	mov	r1, r0
   113b4:	mov	r0, #1
   113b8:	mov	r3, r5
   113bc:	movt	r2, #1
   113c0:	bl	10fc8 <__printf_chk@plt>
   113c4:	movw	r1, #29894	; 0x74c6
   113c8:	mov	r0, #0
   113cc:	mov	r2, #5
   113d0:	movt	r1, #1
   113d4:	bl	10ec0 <dcgettext@plt>
   113d8:	movw	r3, #29944	; 0x74f8
   113dc:	mov	r1, r0
   113e0:	movw	r0, #29662	; 0x73de
   113e4:	cmp	r6, r5
   113e8:	mov	r2, r6
   113ec:	movt	r0, #1
   113f0:	movt	r3, #1
   113f4:	moveq	r3, r0
   113f8:	mov	r0, #1
   113fc:	bl	10fc8 <__printf_chk@plt>
   11400:	mov	r0, r4
   11404:	bl	10f80 <exit@plt>
   11408:	movw	r0, #33088	; 0x8140
   1140c:	movw	r1, #28644	; 0x6fe4
   11410:	mov	r2, #5
   11414:	movt	r0, #2
   11418:	movt	r1, #1
   1141c:	ldr	r5, [r0]
   11420:	mov	r0, #0
   11424:	bl	10ec0 <dcgettext@plt>
   11428:	mov	r2, r0
   1142c:	movw	r0, #33120	; 0x8160
   11430:	mov	r1, #1
   11434:	movt	r0, #2
   11438:	ldr	r3, [r0]
   1143c:	mov	r0, r5
   11440:	bl	10fe0 <__fprintf_chk@plt>
   11444:	mov	r0, r4
   11448:	bl	10f80 <exit@plt>
   1144c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11450:	add	fp, sp, #28
   11454:	sub	sp, sp, #28
   11458:	mov	r5, r0
   1145c:	ldr	r0, [r1]
   11460:	mov	r4, r1
   11464:	bl	126fc <__assert_fail@plt+0x1674>
   11468:	movw	r1, #29944	; 0x74f8
   1146c:	mov	r0, #6
   11470:	movt	r1, #1
   11474:	bl	1101c <setlocale@plt>
   11478:	movw	r6, #29457	; 0x7311
   1147c:	movw	r1, #29399	; 0x72d7
   11480:	movt	r6, #1
   11484:	movt	r1, #1
   11488:	mov	r0, r6
   1148c:	bl	11058 <bindtextdomain@plt>
   11490:	mov	r0, r6
   11494:	bl	10ed8 <textdomain@plt>
   11498:	movw	r0, #9232	; 0x2410
   1149c:	movt	r0, #1
   114a0:	bl	16fc0 <__assert_fail@plt+0x5f38>
   114a4:	movw	r9, #29423	; 0x72ef
   114a8:	movw	r7, #30048	; 0x7560
   114ac:	mov	r6, #76	; 0x4c
   114b0:	mov	r8, #0
   114b4:	mov	sl, #0
   114b8:	mov	r0, #0
   114bc:	movt	r9, #1
   114c0:	movt	r7, #1
   114c4:	b	114cc <__assert_fail@plt+0x444>
   114c8:	mov	r0, #1
   114cc:	str	r0, [sp, #12]
   114d0:	b	114d8 <__assert_fail@plt+0x450>
   114d4:	mov	sl, #1
   114d8:	mov	r0, r5
   114dc:	mov	r1, r4
   114e0:	mov	r2, r9
   114e4:	mov	r3, r7
   114e8:	str	r8, [sp]
   114ec:	bl	10f68 <getopt_long@plt>
   114f0:	cmp	r0, #99	; 0x63
   114f4:	ble	1156c <__assert_fail@plt+0x4e4>
   114f8:	cmp	r0, #100	; 0x64
   114fc:	beq	114d4 <__assert_fail@plt+0x44c>
   11500:	cmp	r0, #105	; 0x69
   11504:	beq	114c8 <__assert_fail@plt+0x440>
   11508:	cmp	r0, #119	; 0x77
   1150c:	bne	1173c <__assert_fail@plt+0x6b4>
   11510:	movw	r0, #33104	; 0x8150
   11514:	movw	r1, #29944	; 0x74f8
   11518:	mov	r2, #10
   1151c:	add	r3, sp, #16
   11520:	movt	r0, #2
   11524:	movt	r1, #1
   11528:	ldr	r0, [r0]
   1152c:	str	r1, [sp]
   11530:	mov	r1, #0
   11534:	bl	150c4 <__assert_fail@plt+0x403c>
   11538:	cmp	r0, #1
   1153c:	bhi	116f8 <__assert_fail@plt+0x670>
   11540:	ldr	r1, [sp, #20]
   11544:	cmn	r1, #1
   11548:	ble	116f8 <__assert_fail@plt+0x670>
   1154c:	ldr	r2, [sp, #16]
   11550:	mvn	r3, #-2147483648	; 0x80000000
   11554:	subs	r3, r3, r2
   11558:	rscs	r1, r1, #0
   1155c:	movwlt	r2, #0
   11560:	subs	r6, r0, #1
   11564:	movne	r6, r2
   11568:	b	114d8 <__assert_fail@plt+0x450>
   1156c:	cmn	r0, #3
   11570:	beq	11584 <__assert_fail@plt+0x4fc>
   11574:	cmn	r0, #2
   11578:	bne	115cc <__assert_fail@plt+0x544>
   1157c:	mov	r0, #0
   11580:	bl	11184 <__assert_fail@plt+0xfc>
   11584:	movw	r0, #33000	; 0x80e8
   11588:	movw	r2, #29467	; 0x731b
   1158c:	mov	r1, #0
   11590:	movt	r0, #2
   11594:	movt	r2, #1
   11598:	str	r1, [sp, #4]
   1159c:	movw	r1, #29392	; 0x72d0
   115a0:	ldr	r3, [r0]
   115a4:	movw	r0, #33100	; 0x814c
   115a8:	str	r2, [sp]
   115ac:	movw	r2, #29453	; 0x730d
   115b0:	movt	r1, #1
   115b4:	movt	r0, #2
   115b8:	movt	r2, #1
   115bc:	ldr	r0, [r0]
   115c0:	bl	148ec <__assert_fail@plt+0x3864>
   115c4:	mov	r0, #0
   115c8:	bl	10f80 <exit@plt>
   115cc:	cmn	r0, #1
   115d0:	bne	1173c <__assert_fail@plt+0x6b4>
   115d4:	movw	r7, #33080	; 0x8138
   115d8:	movt	r7, #2
   115dc:	ldr	r0, [r7]
   115e0:	sub	r1, r5, r0
   115e4:	cmp	r1, #2
   115e8:	blt	11630 <__assert_fail@plt+0x5a8>
   115ec:	movw	r1, #29483	; 0x732b
   115f0:	mov	r0, #0
   115f4:	mov	r2, #5
   115f8:	movt	r1, #1
   115fc:	bl	10ec0 <dcgettext@plt>
   11600:	mov	r5, r0
   11604:	ldr	r0, [r7]
   11608:	add	r0, r4, r0, lsl #2
   1160c:	ldr	r0, [r0, #4]
   11610:	bl	14330 <__assert_fail@plt+0x32a8>
   11614:	mov	r3, r0
   11618:	mov	r0, #0
   1161c:	mov	r1, #0
   11620:	mov	r2, r5
   11624:	bl	10f2c <error@plt>
   11628:	mov	r0, #1
   1162c:	bl	11184 <__assert_fail@plt+0xfc>
   11630:	cmp	r0, r5
   11634:	movw	r1, #30569	; 0x7769
   11638:	ldrlt	r4, [r4, r0, lsl #2]
   1163c:	movt	r1, #1
   11640:	movwge	r4, #30569	; 0x7769
   11644:	movtge	r4, #1
   11648:	mov	r0, r4
   1164c:	bl	10e48 <strcmp@plt>
   11650:	cmp	r0, #0
   11654:	bne	11668 <__assert_fail@plt+0x5e0>
   11658:	movw	r0, #33096	; 0x8148
   1165c:	movt	r0, #2
   11660:	ldr	r5, [r0]
   11664:	b	116b4 <__assert_fail@plt+0x62c>
   11668:	movw	r1, #29500	; 0x733c
   1166c:	mov	r0, r4
   11670:	movt	r1, #1
   11674:	bl	1104c <fopen64@plt>
   11678:	mov	r5, r0
   1167c:	cmp	r0, #0
   11680:	bne	116b4 <__assert_fail@plt+0x62c>
   11684:	bl	10fa4 <__errno_location@plt>
   11688:	ldr	r5, [r0]
   1168c:	mov	r0, #0
   11690:	mov	r1, #3
   11694:	mov	r2, r4
   11698:	bl	14084 <__assert_fail@plt+0x2ffc>
   1169c:	movw	r2, #29432	; 0x72f8
   116a0:	mov	r3, r0
   116a4:	mov	r0, #1
   116a8:	mov	r1, r5
   116ac:	movt	r2, #1
   116b0:	bl	10f2c <error@plt>
   116b4:	mov	r0, r5
   116b8:	mov	r1, #2
   116bc:	bl	124fc <__assert_fail@plt+0x1474>
   116c0:	movw	r0, #33100	; 0x814c
   116c4:	tst	sl, #1
   116c8:	movt	r0, #2
   116cc:	ldr	r2, [r0]
   116d0:	beq	116e8 <__assert_fail@plt+0x660>
   116d4:	ldr	r0, [sp, #12]
   116d8:	mov	r1, r4
   116dc:	and	r3, r0, #1
   116e0:	mov	r0, r5
   116e4:	bl	11744 <__assert_fail@plt+0x6bc>
   116e8:	mov	r0, r5
   116ec:	mov	r1, r4
   116f0:	mov	r3, r6
   116f4:	bl	11940 <__assert_fail@plt+0x8b8>
   116f8:	movw	r1, #29435	; 0x72fb
   116fc:	mov	r0, #0
   11700:	mov	r2, #5
   11704:	movt	r1, #1
   11708:	bl	10ec0 <dcgettext@plt>
   1170c:	mov	r4, r0
   11710:	movw	r0, #33104	; 0x8150
   11714:	movt	r0, #2
   11718:	ldr	r0, [r0]
   1171c:	bl	14330 <__assert_fail@plt+0x32a8>
   11720:	movw	r2, #29428	; 0x72f4
   11724:	str	r0, [sp]
   11728:	mov	r0, #1
   1172c:	mov	r1, #0
   11730:	mov	r3, r4
   11734:	movt	r2, #1
   11738:	bl	10f2c <error@plt>
   1173c:	mov	r0, #1
   11740:	bl	11184 <__assert_fail@plt+0xfc>
   11744:	push	{fp, lr}
   11748:	mov	fp, sp
   1174c:	sub	sp, sp, #40	; 0x28
   11750:	stmib	sp, {r1, r2, r3}
   11754:	str	r0, [sp, #20]
   11758:	mov	r0, #8192	; 0x2000
   1175c:	bl	14b20 <__assert_fail@plt+0x3a98>
   11760:	mov	r4, r0
   11764:	mov	r0, #5120	; 0x1400
   11768:	bl	14b20 <__assert_fail@plt+0x3a98>
   1176c:	str	r0, [sp, #16]
   11770:	sub	r0, fp, #12
   11774:	bl	11ed8 <__assert_fail@plt+0xe50>
   11778:	mov	sl, #0
   1177c:	ldr	r3, [sp, #20]
   11780:	add	r9, r4, sl
   11784:	rsb	r2, sl, #8192	; 0x2000
   11788:	mov	r1, #1
   1178c:	mov	r0, r9
   11790:	mov	r6, r3
   11794:	bl	11064 <fread_unlocked@plt>
   11798:	mov	r8, r0
   1179c:	cmp	r0, #1
   117a0:	blt	11808 <__assert_fail@plt+0x780>
   117a4:	ldr	r0, [sp, #12]
   117a8:	cmp	r0, #0
   117ac:	beq	11808 <__assert_fail@plt+0x780>
   117b0:	mov	r5, #0
   117b4:	add	r0, r5, sl
   117b8:	ldrb	r7, [r4, r0]
   117bc:	mov	r0, r7
   117c0:	bl	11eb8 <__assert_fail@plt+0xe30>
   117c4:	cmp	r0, #0
   117c8:	bne	117fc <__assert_fail@plt+0x774>
   117cc:	cmp	r7, #61	; 0x3d
   117d0:	beq	117fc <__assert_fail@plt+0x774>
   117d4:	sub	r8, r8, #1
   117d8:	add	r0, r9, r5
   117dc:	sub	r2, r8, r5
   117e0:	add	r1, r0, #1
   117e4:	bl	10e6c <memmove@plt>
   117e8:	cmp	r8, #1
   117ec:	blt	11808 <__assert_fail@plt+0x780>
   117f0:	cmp	r5, r8
   117f4:	blt	117b4 <__assert_fail@plt+0x72c>
   117f8:	b	11808 <__assert_fail@plt+0x780>
   117fc:	add	r5, r5, #1
   11800:	cmp	r8, #1
   11804:	bge	117f0 <__assert_fail@plt+0x768>
   11808:	ldr	r0, [r6]
   1180c:	tst	r0, #32
   11810:	bne	1192c <__assert_fail@plt+0x8a4>
   11814:	add	sl, r8, sl
   11818:	cmp	sl, #8192	; 0x2000
   1181c:	bge	11828 <__assert_fail@plt+0x7a0>
   11820:	ands	r0, r0, #16
   11824:	beq	1177c <__assert_fail@plt+0x6f4>
   11828:	ldr	r9, [sp, #8]
   1182c:	mov	r6, #0
   11830:	mov	r5, #0
   11834:	ldr	r8, [sp, #16]
   11838:	mov	r0, #5120	; 0x1400
   1183c:	cmp	r6, #0
   11840:	mov	r2, #0
   11844:	mov	r1, r4
   11848:	str	r0, [fp, #-16]
   1184c:	sub	r0, fp, #16
   11850:	moveq	r2, sl
   11854:	str	r0, [sp]
   11858:	sub	r0, fp, #12
   1185c:	mov	r3, r8
   11860:	bl	11ee4 <__assert_fail@plt+0xe5c>
   11864:	ldr	r2, [fp, #-16]
   11868:	mov	r7, r0
   1186c:	mov	r0, r8
   11870:	mov	r1, #1
   11874:	mov	r3, r9
   11878:	bl	10ea8 <fwrite_unlocked@plt>
   1187c:	ldr	r1, [fp, #-16]
   11880:	cmp	r0, r1
   11884:	bcc	11900 <__assert_fail@plt+0x878>
   11888:	cmp	r7, #0
   1188c:	beq	118dc <__assert_fail@plt+0x854>
   11890:	ldr	r0, [sp, #20]
   11894:	mov	r2, #2
   11898:	add	r1, r5, #1
   1189c:	ldr	r0, [r0]
   118a0:	ands	r0, r0, #16
   118a4:	movweq	r2, #1
   118a8:	cmp	r1, r2
   118ac:	bcs	118c4 <__assert_fail@plt+0x83c>
   118b0:	ldr	r2, [fp, #-12]
   118b4:	sub	r6, r6, #1
   118b8:	orrs	r2, r5, r2
   118bc:	mov	r5, r1
   118c0:	bne	11834 <__assert_fail@plt+0x7ac>
   118c4:	mov	sl, #0
   118c8:	cmp	r0, #0
   118cc:	beq	1177c <__assert_fail@plt+0x6f4>
   118d0:	ldr	r0, [sp, #20]
   118d4:	ldr	r1, [sp, #4]
   118d8:	bl	11b80 <__assert_fail@plt+0xaf8>
   118dc:	movw	r1, #30008	; 0x7538
   118e0:	mov	r0, #0
   118e4:	mov	r2, #5
   118e8:	movt	r1, #1
   118ec:	bl	10ec0 <dcgettext@plt>
   118f0:	mov	r2, r0
   118f4:	mov	r0, #1
   118f8:	mov	r1, #0
   118fc:	bl	10f2c <error@plt>
   11900:	bl	10fa4 <__errno_location@plt>
   11904:	ldr	r4, [r0]
   11908:	movw	r1, #29996	; 0x752c
   1190c:	movt	r1, #1
   11910:	mov	r0, #0
   11914:	mov	r2, #5
   11918:	bl	10ec0 <dcgettext@plt>
   1191c:	mov	r2, r0
   11920:	mov	r0, #1
   11924:	mov	r1, r4
   11928:	bl	10f2c <error@plt>
   1192c:	bl	10fa4 <__errno_location@plt>
   11930:	ldr	r4, [r0]
   11934:	movw	r1, #29985	; 0x7521
   11938:	movt	r1, #1
   1193c:	b	11910 <__assert_fail@plt+0x888>
   11940:	push	{fp, lr}
   11944:	mov	fp, sp
   11948:	sub	sp, sp, #16
   1194c:	mov	r5, r0
   11950:	mov	r0, #30720	; 0x7800
   11954:	str	r3, [fp, #-4]
   11958:	stm	sp, {r1, r2}
   1195c:	bl	14b20 <__assert_fail@plt+0x3a98>
   11960:	mov	r4, r0
   11964:	mov	r0, #49152	; 0xc000
   11968:	bl	14b20 <__assert_fail@plt+0x3a98>
   1196c:	mov	r7, r0
   11970:	mov	sl, #0
   11974:	str	r0, [sp, #8]
   11978:	mov	r6, #0
   1197c:	add	r0, r4, r6
   11980:	rsb	r2, r6, #30720	; 0x7800
   11984:	mov	r1, #1
   11988:	mov	r3, r5
   1198c:	bl	11064 <fread_unlocked@plt>
   11990:	add	r6, r0, r6
   11994:	ldr	r0, [r5]
   11998:	tst	r0, #16
   1199c:	bne	119b0 <__assert_fail@plt+0x928>
   119a0:	cmp	r6, #30720	; 0x7800
   119a4:	bge	119b0 <__assert_fail@plt+0x928>
   119a8:	ands	r0, r0, #32
   119ac:	beq	1197c <__assert_fail@plt+0x8f4>
   119b0:	cmp	r6, #1
   119b4:	blt	11ac0 <__assert_fail@plt+0xa38>
   119b8:	movw	r1, #26215	; 0x6667
   119bc:	add	r0, r6, #4
   119c0:	mov	r2, r7
   119c4:	movt	r1, #26214	; 0x6666
   119c8:	smmul	r0, r0, r1
   119cc:	lsr	r1, r0, #1
   119d0:	add	r0, r1, r0, lsr #31
   119d4:	mov	r1, r6
   119d8:	lsl	r8, r0, #3
   119dc:	mov	r0, r4
   119e0:	mov	r3, r8
   119e4:	bl	11c10 <__assert_fail@plt+0xb88>
   119e8:	ldr	r0, [fp, #-4]
   119ec:	cmp	r0, #0
   119f0:	beq	11a9c <__assert_fail@plt+0xa14>
   119f4:	mov	r7, #0
   119f8:	ldr	r0, [fp, #-4]
   119fc:	sub	r9, r8, r7
   11a00:	sub	r0, r0, sl
   11a04:	cmp	r0, r9
   11a08:	movlt	r9, r0
   11a0c:	cmp	r9, #0
   11a10:	beq	11a50 <__assert_fail@plt+0x9c8>
   11a14:	movw	r1, #33100	; 0x814c
   11a18:	ldr	r0, [sp, #8]
   11a1c:	mov	r2, r9
   11a20:	movt	r1, #2
   11a24:	ldr	r3, [r1]
   11a28:	mov	r1, #1
   11a2c:	add	r0, r0, r7
   11a30:	bl	10ea8 <fwrite_unlocked@plt>
   11a34:	cmp	r0, r9
   11a38:	bcc	11b28 <__assert_fail@plt+0xaa0>
   11a3c:	add	r7, r9, r7
   11a40:	add	sl, r9, sl
   11a44:	cmp	r7, r8
   11a48:	blt	119f8 <__assert_fail@plt+0x970>
   11a4c:	b	11ac0 <__assert_fail@plt+0xa38>
   11a50:	ldr	r0, [sp, #4]
   11a54:	ldr	r2, [r0, #20]
   11a58:	ldr	r1, [r0, #24]
   11a5c:	cmp	r2, r1
   11a60:	bcs	11a84 <__assert_fail@plt+0x9fc>
   11a64:	add	r1, r2, #1
   11a68:	mov	sl, #0
   11a6c:	str	r1, [r0, #20]
   11a70:	mov	r0, #10
   11a74:	strb	r0, [r2]
   11a78:	cmp	r7, r8
   11a7c:	blt	119f8 <__assert_fail@plt+0x970>
   11a80:	b	11ac0 <__assert_fail@plt+0xa38>
   11a84:	mov	r1, #10
   11a88:	bl	11010 <__overflow@plt>
   11a8c:	mov	sl, #0
   11a90:	cmn	r0, #1
   11a94:	bne	11a78 <__assert_fail@plt+0x9f0>
   11a98:	b	11b28 <__assert_fail@plt+0xaa0>
   11a9c:	movw	r0, #33100	; 0x814c
   11aa0:	mov	r1, #1
   11aa4:	mov	r2, r8
   11aa8:	movt	r0, #2
   11aac:	ldr	r3, [r0]
   11ab0:	mov	r0, r7
   11ab4:	bl	10ea8 <fwrite_unlocked@plt>
   11ab8:	cmp	r0, r8
   11abc:	bcc	11b28 <__assert_fail@plt+0xaa0>
   11ac0:	ldr	r0, [r5]
   11ac4:	ldr	r7, [sp, #8]
   11ac8:	tst	r0, #16
   11acc:	cmpeq	r6, #30720	; 0x7800
   11ad0:	bne	11adc <__assert_fail@plt+0xa54>
   11ad4:	ands	r0, r0, #32
   11ad8:	beq	11978 <__assert_fail@plt+0x8f0>
   11adc:	ldr	r0, [fp, #-4]
   11ae0:	cmp	r0, #0
   11ae4:	beq	11b3c <__assert_fail@plt+0xab4>
   11ae8:	cmp	sl, #1
   11aec:	blt	11b3c <__assert_fail@plt+0xab4>
   11af0:	ldr	r0, [sp, #4]
   11af4:	ldr	r2, [r0, #20]
   11af8:	ldr	r1, [r0, #24]
   11afc:	cmp	r2, r1
   11b00:	bcs	11b18 <__assert_fail@plt+0xa90>
   11b04:	add	r1, r2, #1
   11b08:	str	r1, [r0, #20]
   11b0c:	mov	r1, #10
   11b10:	strb	r1, [r2]
   11b14:	b	11b3c <__assert_fail@plt+0xab4>
   11b18:	mov	r1, #10
   11b1c:	bl	11010 <__overflow@plt>
   11b20:	cmn	r0, #1
   11b24:	bne	11b3c <__assert_fail@plt+0xab4>
   11b28:	bl	10fa4 <__errno_location@plt>
   11b2c:	ldr	r4, [r0]
   11b30:	movw	r1, #29996	; 0x752c
   11b34:	movt	r1, #1
   11b38:	b	11b64 <__assert_fail@plt+0xadc>
   11b3c:	ldrb	r0, [r5]
   11b40:	tst	r0, #32
   11b44:	bne	11b54 <__assert_fail@plt+0xacc>
   11b48:	ldr	r1, [sp]
   11b4c:	mov	r0, r5
   11b50:	bl	11b80 <__assert_fail@plt+0xaf8>
   11b54:	bl	10fa4 <__errno_location@plt>
   11b58:	ldr	r4, [r0]
   11b5c:	movw	r1, #29985	; 0x7521
   11b60:	movt	r1, #1
   11b64:	mov	r0, #0
   11b68:	mov	r2, #5
   11b6c:	bl	10ec0 <dcgettext@plt>
   11b70:	mov	r2, r0
   11b74:	mov	r0, #1
   11b78:	mov	r1, r4
   11b7c:	bl	10f2c <error@plt>
   11b80:	push	{fp, lr}
   11b84:	mov	fp, sp
   11b88:	mov	r5, r1
   11b8c:	bl	12538 <__assert_fail@plt+0x14b0>
   11b90:	cmp	r0, #0
   11b94:	bne	11ba0 <__assert_fail@plt+0xb18>
   11b98:	mov	r0, #0
   11b9c:	bl	10f80 <exit@plt>
   11ba0:	movw	r1, #30569	; 0x7769
   11ba4:	mov	r0, r5
   11ba8:	movt	r1, #1
   11bac:	bl	10e48 <strcmp@plt>
   11bb0:	mov	r6, r0
   11bb4:	bl	10fa4 <__errno_location@plt>
   11bb8:	ldr	r4, [r0]
   11bbc:	cmp	r6, #0
   11bc0:	bne	11be8 <__assert_fail@plt+0xb60>
   11bc4:	movw	r1, #30022	; 0x7546
   11bc8:	mov	r0, #0
   11bcc:	mov	r2, #5
   11bd0:	movt	r1, #1
   11bd4:	bl	10ec0 <dcgettext@plt>
   11bd8:	mov	r2, r0
   11bdc:	mov	r0, #1
   11be0:	mov	r1, r4
   11be4:	bl	10f2c <error@plt>
   11be8:	mov	r0, #0
   11bec:	mov	r1, #3
   11bf0:	mov	r2, r5
   11bf4:	bl	14084 <__assert_fail@plt+0x2ffc>
   11bf8:	movw	r2, #29432	; 0x72f8
   11bfc:	mov	r3, r0
   11c00:	mov	r0, #1
   11c04:	mov	r1, r4
   11c08:	movt	r2, #1
   11c0c:	bl	10f2c <error@plt>
   11c10:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   11c14:	add	fp, sp, #24
   11c18:	cmp	r1, #0
   11c1c:	cmpne	r3, #0
   11c20:	bne	11c38 <__assert_fail@plt+0xbb0>
   11c24:	cmp	r3, #0
   11c28:	beq	11c34 <__assert_fail@plt+0xbac>
   11c2c:	mov	r0, #0
   11c30:	strb	r0, [r2]
   11c34:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   11c38:	movw	lr, #30215	; 0x7607
   11c3c:	add	r0, r0, #2
   11c40:	rsb	ip, r3, #0
   11c44:	mov	r8, #0
   11c48:	movt	lr, #1
   11c4c:	ldrb	r3, [r0, #-2]
   11c50:	add	r5, ip, r8
   11c54:	mov	r4, r2
   11c58:	cmn	r5, #1
   11c5c:	ldrb	r3, [lr, r3, lsr #3]
   11c60:	strb	r3, [r4, r8]!
   11c64:	beq	11c34 <__assert_fail@plt+0xbac>
   11c68:	ldrb	r3, [r0, #-2]
   11c6c:	cmp	r1, #1
   11c70:	add	r6, r5, #2
   11c74:	lsl	r7, r3, #2
   11c78:	mov	r3, #0
   11c7c:	ldrbne	r3, [r0, #-1]
   11c80:	lsrne	r3, r3, #6
   11c84:	cmp	r6, #0
   11c88:	add	r3, r3, r7
   11c8c:	and	r3, r3, #31
   11c90:	ldrb	r3, [lr, r3]
   11c94:	strb	r3, [r4, #1]
   11c98:	beq	11c34 <__assert_fail@plt+0xbac>
   11c9c:	cmp	r1, #1
   11ca0:	mov	r7, #61	; 0x3d
   11ca4:	add	r6, r5, #3
   11ca8:	ldrbne	r3, [r0, #-1]
   11cac:	ubfxne	r3, r3, #1, #5
   11cb0:	ldrbne	r7, [lr, r3]
   11cb4:	cmp	r6, #0
   11cb8:	strb	r7, [r4, #2]
   11cbc:	beq	11c34 <__assert_fail@plt+0xbac>
   11cc0:	add	r6, r5, #4
   11cc4:	cmp	r1, #1
   11cc8:	beq	11cf4 <__assert_fail@plt+0xc6c>
   11ccc:	ldrb	r3, [r0, #-1]
   11cd0:	subs	r1, r1, #2
   11cd4:	lsl	r7, r3, #4
   11cd8:	ldrbne	r3, [r0]
   11cdc:	lsrne	r3, r3, #4
   11ce0:	moveq	r3, #0
   11ce4:	add	r3, r3, r7
   11ce8:	and	r3, r3, #31
   11cec:	ldrb	r7, [lr, r3]
   11cf0:	b	11cfc <__assert_fail@plt+0xc74>
   11cf4:	mov	r7, #61	; 0x3d
   11cf8:	mov	r1, #0
   11cfc:	cmp	r6, #0
   11d00:	strb	r7, [r4, #3]
   11d04:	beq	11c34 <__assert_fail@plt+0xbac>
   11d08:	add	r6, r5, #5
   11d0c:	cmp	r1, #0
   11d10:	beq	11d3c <__assert_fail@plt+0xcb4>
   11d14:	ldrb	r3, [r0]
   11d18:	subs	r1, r1, #1
   11d1c:	lsl	r7, r3, #1
   11d20:	ldrbne	r3, [r0, #1]
   11d24:	lsrne	r3, r3, #7
   11d28:	moveq	r3, #0
   11d2c:	add	r3, r3, r7
   11d30:	and	r3, r3, #31
   11d34:	ldrb	r7, [lr, r3]
   11d38:	b	11d44 <__assert_fail@plt+0xcbc>
   11d3c:	mov	r7, #61	; 0x3d
   11d40:	mov	r1, #0
   11d44:	cmp	r6, #0
   11d48:	strb	r7, [r4, #4]
   11d4c:	beq	11c34 <__assert_fail@plt+0xbac>
   11d50:	add	r6, r5, #6
   11d54:	cmp	r1, #0
   11d58:	beq	11d6c <__assert_fail@plt+0xce4>
   11d5c:	ldrb	r3, [r0, #1]
   11d60:	ubfx	r3, r3, #2, #5
   11d64:	ldrb	r3, [lr, r3]
   11d68:	b	11d70 <__assert_fail@plt+0xce8>
   11d6c:	mov	r3, #61	; 0x3d
   11d70:	cmp	r6, #0
   11d74:	strb	r3, [r4, #5]
   11d78:	beq	11c34 <__assert_fail@plt+0xbac>
   11d7c:	add	r7, r5, #7
   11d80:	cmp	r1, #0
   11d84:	beq	11db0 <__assert_fail@plt+0xd28>
   11d88:	subs	r6, r1, #1
   11d8c:	ldrb	r1, [r0, #1]
   11d90:	ldrbne	r3, [r0, #2]
   11d94:	lsl	r1, r1, #3
   11d98:	lsrne	r3, r3, #5
   11d9c:	moveq	r3, #0
   11da0:	add	r1, r3, r1
   11da4:	and	r1, r1, #31
   11da8:	ldrb	r1, [lr, r1]
   11dac:	b	11db8 <__assert_fail@plt+0xd30>
   11db0:	mov	r1, #61	; 0x3d
   11db4:	mov	r6, #0
   11db8:	cmp	r7, #0
   11dbc:	strb	r1, [r4, #6]
   11dc0:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   11dc4:	cmp	r6, #0
   11dc8:	beq	11ddc <__assert_fail@plt+0xd54>
   11dcc:	ldrb	r1, [r0, #2]
   11dd0:	and	r1, r1, #31
   11dd4:	ldrb	r1, [lr, r1]
   11dd8:	b	11de0 <__assert_fail@plt+0xd58>
   11ddc:	mov	r1, #61	; 0x3d
   11de0:	cmn	r5, #8
   11de4:	strb	r1, [r4, #7]
   11de8:	beq	11c34 <__assert_fail@plt+0xbac>
   11dec:	subs	r1, r6, #1
   11df0:	add	r8, r8, #8
   11df4:	addne	r0, r0, #5
   11df8:	cmpne	r6, #0
   11dfc:	bne	11c4c <__assert_fail@plt+0xbc4>
   11e00:	add	r2, r2, r8
   11e04:	b	11c2c <__assert_fail@plt+0xba4>
   11e08:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   11e0c:	add	fp, sp, #24
   11e10:	mov	r8, r0
   11e14:	movw	r0, #26215	; 0x6667
   11e18:	mov	r4, r1
   11e1c:	mov	r6, r2
   11e20:	movt	r0, #26214	; 0x6666
   11e24:	smmul	r0, r1, r0
   11e28:	asr	r1, r0, #1
   11e2c:	add	r0, r1, r0, lsr #31
   11e30:	add	r1, r0, r0, lsl #2
   11e34:	subs	r1, r4, r1
   11e38:	addne	r0, r0, #1
   11e3c:	cmn	r0, #1
   11e40:	ble	11e50 <__assert_fail@plt+0xdc8>
   11e44:	cmn	r0, #-268435455	; 0xf0000001
   11e48:	ble	11e64 <__assert_fail@plt+0xddc>
   11e4c:	b	11ea8 <__assert_fail@plt+0xe20>
   11e50:	beq	11e64 <__assert_fail@plt+0xddc>
   11e54:	mov	r1, #-2147483648	; 0x80000000
   11e58:	sdiv	r1, r1, r0
   11e5c:	cmp	r1, #8
   11e60:	blt	11ea8 <__assert_fail@plt+0xe20>
   11e64:	cmn	r4, #1
   11e68:	ble	11ea8 <__assert_fail@plt+0xe20>
   11e6c:	lsl	r7, r0, #3
   11e70:	orr	r5, r7, #1
   11e74:	mov	r0, r5
   11e78:	bl	16a30 <__assert_fail@plt+0x59a8>
   11e7c:	cmp	r0, #0
   11e80:	str	r0, [r6]
   11e84:	moveq	r0, r5
   11e88:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   11e8c:	mov	r2, r0
   11e90:	mov	r0, r8
   11e94:	mov	r1, r4
   11e98:	mov	r3, r5
   11e9c:	bl	11c10 <__assert_fail@plt+0xb88>
   11ea0:	mov	r0, r7
   11ea4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   11ea8:	mov	r7, #0
   11eac:	mov	r0, r7
   11eb0:	str	r7, [r6]
   11eb4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   11eb8:	movw	r1, #30247	; 0x7627
   11ebc:	movt	r1, #1
   11ec0:	add	r0, r1, r0
   11ec4:	ldrsb	r1, [r0]
   11ec8:	mov	r0, #0
   11ecc:	cmn	r1, #1
   11ed0:	movwgt	r0, #1
   11ed4:	bx	lr
   11ed8:	mov	r1, #0
   11edc:	str	r1, [r0]
   11ee0:	bx	lr
   11ee4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11ee8:	add	fp, sp, #28
   11eec:	sub	sp, sp, #28
   11ef0:	mov	r6, r2
   11ef4:	mov	r2, r0
   11ef8:	ldr	r0, [fp, #8]
   11efc:	str	r3, [sp, #24]
   11f00:	mov	r5, r1
   11f04:	mov	r8, #0
   11f08:	cmp	r2, #0
   11f0c:	ldr	r7, [r0]
   11f10:	mov	r0, #0
   11f14:	str	r7, [sp, #20]
   11f18:	beq	11f30 <__assert_fail@plt+0xea8>
   11f1c:	clz	r0, r6
   11f20:	lsr	r8, r0, #5
   11f24:	ldr	r0, [r2]
   11f28:	cmp	r0, #0
   11f2c:	movwne	r0, #1
   11f30:	orr	r0, r0, r8
   11f34:	add	sl, sp, #24
   11f38:	add	r4, sp, #20
   11f3c:	str	r2, [sp, #16]
   11f40:	str	r0, [sp, #8]
   11f44:	add	r0, r2, #4
   11f48:	str	r0, [sp, #4]
   11f4c:	clz	r0, r2
   11f50:	lsr	r0, r0, #5
   11f54:	str	r0, [sp, #12]
   11f58:	b	11f68 <__assert_fail@plt+0xee0>
   11f5c:	ldr	r7, [sp, #20]
   11f60:	ldr	r2, [sp, #16]
   11f64:	sub	r6, r9, r5
   11f68:	ldr	r0, [sp, #8]
   11f6c:	cmp	r0, #0
   11f70:	beq	11f84 <__assert_fail@plt+0xefc>
   11f74:	b	11fa4 <__assert_fail@plt+0xf1c>
   11f78:	ldr	r7, [sp, #20]
   11f7c:	add	r5, r5, #8
   11f80:	sub	r6, r6, #8
   11f84:	mov	r0, r5
   11f88:	mov	r1, r6
   11f8c:	mov	r2, sl
   11f90:	mov	r3, r4
   11f94:	bl	1214c <__assert_fail@plt+0x10c4>
   11f98:	cmp	r0, #0
   11f9c:	bne	11f78 <__assert_fail@plt+0xef0>
   11fa0:	ldr	r2, [sp, #16]
   11fa4:	cmp	r6, #0
   11fa8:	mov	r0, r6
   11fac:	movwne	r0, #1
   11fb0:	orr	r0, r8, r0
   11fb4:	cmp	r0, #1
   11fb8:	bne	12120 <__assert_fail@plt+0x1098>
   11fbc:	cmp	r6, #0
   11fc0:	beq	11fdc <__assert_fail@plt+0xf54>
   11fc4:	ldrb	r0, [r5]
   11fc8:	ldr	r1, [sp, #12]
   11fcc:	subs	r0, r0, #10
   11fd0:	movwne	r0, #1
   11fd4:	orrs	r0, r0, r1
   11fd8:	beq	120a0 <__assert_fail@plt+0x1018>
   11fdc:	ldr	r0, [sp, #20]
   11fe0:	ldr	r1, [sp, #24]
   11fe4:	add	r9, r5, r6
   11fe8:	cmp	r2, #0
   11fec:	str	r7, [sp, #20]
   11ff0:	sub	r0, r0, r7
   11ff4:	add	r0, r1, r0
   11ff8:	str	r0, [sp, #24]
   11ffc:	beq	120b0 <__assert_fail@plt+0x1028>
   12000:	ldr	r7, [r2]
   12004:	cmp	r7, #0
   12008:	beq	1201c <__assert_fail@plt+0xf94>
   1200c:	cmp	r7, #8
   12010:	bne	12048 <__assert_fail@plt+0xfc0>
   12014:	mov	r0, #0
   12018:	str	r0, [r2]
   1201c:	sub	r0, r9, r5
   12020:	mov	r7, #0
   12024:	cmp	r0, #8
   12028:	blt	12048 <__assert_fail@plt+0xfc0>
   1202c:	mov	r0, r5
   12030:	mov	r1, #10
   12034:	mov	r2, #8
   12038:	bl	10fec <memchr@plt>
   1203c:	ldr	r2, [sp, #16]
   12040:	cmp	r0, #0
   12044:	beq	1210c <__assert_fail@plt+0x1084>
   12048:	cmp	r6, #1
   1204c:	blt	120b8 <__assert_fail@plt+0x1030>
   12050:	mov	r6, r7
   12054:	mov	r0, r5
   12058:	ldrb	r1, [r5], #1
   1205c:	cmp	r1, #10
   12060:	bne	12070 <__assert_fail@plt+0xfe8>
   12064:	cmp	r5, r9
   12068:	bcc	12054 <__assert_fail@plt+0xfcc>
   1206c:	b	12098 <__assert_fail@plt+0x1010>
   12070:	add	r7, r6, #1
   12074:	mov	r3, r2
   12078:	add	r5, r0, #1
   1207c:	str	r7, [r3], r6
   12080:	cmp	r5, r9
   12084:	strb	r1, [r3, #4]
   12088:	ldr	r6, [r2]
   1208c:	bcs	12098 <__assert_fail@plt+0x1010>
   12090:	cmp	r6, #8
   12094:	bne	12054 <__assert_fail@plt+0xfcc>
   12098:	add	r5, r0, #1
   1209c:	b	120bc <__assert_fail@plt+0x1034>
   120a0:	ldr	r7, [sp, #20]
   120a4:	sub	r6, r6, #1
   120a8:	add	r5, r5, #1
   120ac:	b	11f68 <__assert_fail@plt+0xee0>
   120b0:	mov	r0, r5
   120b4:	b	120c0 <__assert_fail@plt+0x1038>
   120b8:	mov	r6, r7
   120bc:	ldr	r0, [sp, #4]
   120c0:	mov	r1, #0
   120c4:	cmp	r6, #0
   120c8:	beq	12124 <__assert_fail@plt+0x109c>
   120cc:	ldr	r3, [sp, #12]
   120d0:	cmp	r6, #7
   120d4:	mov	r2, #0
   120d8:	movwgt	r2, #1
   120dc:	orr	r2, r8, r2
   120e0:	orr	r2, r2, r3
   120e4:	cmp	r2, #1
   120e8:	bne	12124 <__assert_fail@plt+0x109c>
   120ec:	mov	r1, r6
   120f0:	mov	r2, sl
   120f4:	mov	r3, r4
   120f8:	bl	1214c <__assert_fail@plt+0x10c4>
   120fc:	cmp	r0, #0
   12100:	mov	r1, r6
   12104:	bne	11f5c <__assert_fail@plt+0xed4>
   12108:	b	12124 <__assert_fail@plt+0x109c>
   1210c:	add	r1, r5, #8
   12110:	mov	r0, r5
   12114:	mov	r6, #8
   12118:	mov	r5, r1
   1211c:	b	120ec <__assert_fail@plt+0x1064>
   12120:	mov	r1, r6
   12124:	ldr	r0, [fp, #8]
   12128:	ldr	r2, [sp, #20]
   1212c:	mov	r3, r0
   12130:	ldr	r0, [r0]
   12134:	sub	r0, r0, r2
   12138:	str	r0, [r3]
   1213c:	clz	r0, r1
   12140:	lsr	r0, r0, #5
   12144:	sub	sp, fp, #28
   12148:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1214c:	push	{r4, r5, r6, sl, fp, lr}
   12150:	add	fp, sp, #16
   12154:	mov	ip, #0
   12158:	cmp	r1, #8
   1215c:	blt	12354 <__assert_fail@plt+0x12cc>
   12160:	ldrb	r1, [r0]
   12164:	movw	lr, #30247	; 0x7627
   12168:	movt	lr, #1
   1216c:	add	r1, lr, r1
   12170:	ldrsb	r4, [r1]
   12174:	cmp	r4, #0
   12178:	blt	12354 <__assert_fail@plt+0x12cc>
   1217c:	ldrb	r1, [r0, #1]
   12180:	add	r1, lr, r1
   12184:	ldrsb	r1, [r1]
   12188:	cmp	r1, #0
   1218c:	blt	12354 <__assert_fail@plt+0x12cc>
   12190:	ldr	r5, [r3]
   12194:	ldr	ip, [r2]
   12198:	cmp	r5, #0
   1219c:	beq	121bc <__assert_fail@plt+0x1134>
   121a0:	ubfx	r5, r1, #2, #6
   121a4:	orr	r4, r5, r4, lsl #3
   121a8:	strb	r4, [ip], #1
   121ac:	ldr	r4, [r3]
   121b0:	sub	r5, r4, #1
   121b4:	str	r5, [r3]
   121b8:	b	121c0 <__assert_fail@plt+0x1138>
   121bc:	mov	r5, #0
   121c0:	ldrb	r4, [r0, #2]
   121c4:	cmp	r4, #61	; 0x3d
   121c8:	bne	121e4 <__assert_fail@plt+0x115c>
   121cc:	ldrb	r1, [r0, #3]
   121d0:	cmp	r1, #61	; 0x3d
   121d4:	ldrbeq	r1, [r0, #4]
   121d8:	cmpeq	r1, #61	; 0x3d
   121dc:	bne	122ac <__assert_fail@plt+0x1224>
   121e0:	b	12244 <__assert_fail@plt+0x11bc>
   121e4:	add	r4, lr, r4
   121e8:	ldrsb	r6, [r4]
   121ec:	cmp	r6, #0
   121f0:	blt	122ac <__assert_fail@plt+0x1224>
   121f4:	ldrb	r4, [r0, #3]
   121f8:	add	r4, lr, r4
   121fc:	ldrsb	r4, [r4]
   12200:	cmn	r4, #1
   12204:	ble	122ac <__assert_fail@plt+0x1224>
   12208:	cmp	r5, #0
   1220c:	beq	12234 <__assert_fail@plt+0x11ac>
   12210:	lsl	r5, r6, #1
   12214:	orr	r1, r5, r1, lsl #6
   12218:	and	r5, r4, #240	; 0xf0
   1221c:	orr	r1, r1, r5, lsr #4
   12220:	strb	r1, [ip], #1
   12224:	ldr	r1, [r3]
   12228:	sub	r5, r1, #1
   1222c:	str	r5, [r3]
   12230:	b	12238 <__assert_fail@plt+0x11b0>
   12234:	mov	r5, #0
   12238:	ldrb	r1, [r0, #4]
   1223c:	cmp	r1, #61	; 0x3d
   12240:	bne	12254 <__assert_fail@plt+0x11cc>
   12244:	ldrb	r1, [r0, #5]
   12248:	cmp	r1, #61	; 0x3d
   1224c:	beq	12298 <__assert_fail@plt+0x1210>
   12250:	b	122ac <__assert_fail@plt+0x1224>
   12254:	add	r1, lr, r1
   12258:	ldrsb	r1, [r1]
   1225c:	cmn	r1, #1
   12260:	ble	122ac <__assert_fail@plt+0x1224>
   12264:	cmp	r5, #0
   12268:	beq	12288 <__assert_fail@plt+0x1200>
   1226c:	ubfx	r5, r1, #1, #7
   12270:	orr	r4, r5, r4, lsl #4
   12274:	strb	r4, [ip], #1
   12278:	ldr	r4, [r3]
   1227c:	sub	r4, r4, #1
   12280:	str	r4, [r3]
   12284:	b	1228c <__assert_fail@plt+0x1204>
   12288:	mov	r4, #0
   1228c:	ldrb	r5, [r0, #5]
   12290:	cmp	r5, #61	; 0x3d
   12294:	bne	122bc <__assert_fail@plt+0x1234>
   12298:	ldrb	r1, [r0, #6]
   1229c:	cmp	r1, #61	; 0x3d
   122a0:	ldrbeq	r0, [r0, #7]
   122a4:	cmpeq	r0, #61	; 0x3d
   122a8:	beq	1234c <__assert_fail@plt+0x12c4>
   122ac:	str	ip, [r2]
   122b0:	mov	ip, #0
   122b4:	mov	r0, ip
   122b8:	pop	{r4, r5, r6, sl, fp, pc}
   122bc:	add	r5, lr, r5
   122c0:	ldrsb	r5, [r5]
   122c4:	cmp	r5, #0
   122c8:	blt	122ac <__assert_fail@plt+0x1224>
   122cc:	ldrb	r6, [r0, #6]
   122d0:	add	r6, lr, r6
   122d4:	ldrsb	r6, [r6]
   122d8:	cmn	r6, #1
   122dc:	ble	122ac <__assert_fail@plt+0x1224>
   122e0:	cmp	r4, #0
   122e4:	beq	12308 <__assert_fail@plt+0x1280>
   122e8:	ubfx	r4, r6, #3, #5
   122ec:	orr	r4, r4, r5, lsl #2
   122f0:	orr	r1, r4, r1, lsl #7
   122f4:	strb	r1, [ip], #1
   122f8:	ldr	r1, [r3]
   122fc:	sub	r1, r1, #1
   12300:	str	r1, [r3]
   12304:	b	1230c <__assert_fail@plt+0x1284>
   12308:	mov	r1, #0
   1230c:	ldrb	r4, [r0, #7]
   12310:	cmp	r4, #61	; 0x3d
   12314:	beq	1234c <__assert_fail@plt+0x12c4>
   12318:	add	r4, lr, r4
   1231c:	ldrsb	r4, [r4]
   12320:	cmn	r4, #1
   12324:	ble	122ac <__assert_fail@plt+0x1224>
   12328:	cmp	r1, #0
   1232c:	beq	1234c <__assert_fail@plt+0x12c4>
   12330:	ldrb	r0, [r0, #6]
   12334:	ldrb	r0, [lr, r0]
   12338:	orr	r0, r4, r0, lsl #5
   1233c:	strb	r0, [ip], #1
   12340:	ldr	r0, [r3]
   12344:	sub	r0, r0, #1
   12348:	str	r0, [r3]
   1234c:	str	ip, [r2]
   12350:	mov	ip, #1
   12354:	mov	r0, ip
   12358:	pop	{r4, r5, r6, sl, fp, pc}
   1235c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12360:	add	fp, sp, #24
   12364:	sub	sp, sp, #8
   12368:	mov	r7, r0
   1236c:	asr	r0, r2, #3
   12370:	mov	r4, r3
   12374:	mov	r6, r2
   12378:	mov	r8, r1
   1237c:	add	r0, r0, r0, lsl #2
   12380:	add	r0, r0, #5
   12384:	str	r0, [sp, #4]
   12388:	bl	16a30 <__assert_fail@plt+0x59a8>
   1238c:	mov	r5, #1
   12390:	cmp	r0, #0
   12394:	str	r0, [r4]
   12398:	beq	123e4 <__assert_fail@plt+0x135c>
   1239c:	mov	r3, r0
   123a0:	add	r0, sp, #4
   123a4:	mov	r1, r8
   123a8:	mov	r2, r6
   123ac:	str	r0, [sp]
   123b0:	mov	r0, r7
   123b4:	bl	11ee4 <__assert_fail@plt+0xe5c>
   123b8:	cmp	r0, #0
   123bc:	beq	123d4 <__assert_fail@plt+0x134c>
   123c0:	ldr	r0, [fp, #8]
   123c4:	cmp	r0, #0
   123c8:	ldrne	r1, [sp, #4]
   123cc:	strne	r1, [r0]
   123d0:	b	123e4 <__assert_fail@plt+0x135c>
   123d4:	ldr	r0, [r4]
   123d8:	bl	12630 <__assert_fail@plt+0x15a8>
   123dc:	mov	r5, #0
   123e0:	str	r5, [r4]
   123e4:	mov	r0, r5
   123e8:	sub	sp, fp, #24
   123ec:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   123f0:	movw	r1, #33112	; 0x8158
   123f4:	movt	r1, #2
   123f8:	str	r0, [r1]
   123fc:	bx	lr
   12400:	movw	r1, #33116	; 0x815c
   12404:	movt	r1, #2
   12408:	strb	r0, [r1]
   1240c:	bx	lr
   12410:	push	{r4, r5, r6, sl, fp, lr}
   12414:	add	fp, sp, #16
   12418:	sub	sp, sp, #8
   1241c:	movw	r0, #33100	; 0x814c
   12420:	movt	r0, #2
   12424:	ldr	r0, [r0]
   12428:	bl	16ab4 <__assert_fail@plt+0x5a2c>
   1242c:	cmp	r0, #0
   12430:	beq	12458 <__assert_fail@plt+0x13d0>
   12434:	movw	r0, #33116	; 0x815c
   12438:	movt	r0, #2
   1243c:	ldrb	r0, [r0]
   12440:	cmp	r0, #0
   12444:	beq	12478 <__assert_fail@plt+0x13f0>
   12448:	bl	10fa4 <__errno_location@plt>
   1244c:	ldr	r0, [r0]
   12450:	cmp	r0, #32
   12454:	bne	12478 <__assert_fail@plt+0x13f0>
   12458:	movw	r0, #33088	; 0x8140
   1245c:	movt	r0, #2
   12460:	ldr	r0, [r0]
   12464:	bl	16ab4 <__assert_fail@plt+0x5a2c>
   12468:	cmp	r0, #0
   1246c:	subeq	sp, fp, #16
   12470:	popeq	{r4, r5, r6, sl, fp, pc}
   12474:	b	124e8 <__assert_fail@plt+0x1460>
   12478:	movw	r1, #29996	; 0x752c
   1247c:	mov	r0, #0
   12480:	mov	r2, #5
   12484:	movt	r1, #1
   12488:	bl	10ec0 <dcgettext@plt>
   1248c:	mov	r4, r0
   12490:	movw	r0, #33112	; 0x8158
   12494:	movt	r0, #2
   12498:	ldr	r6, [r0]
   1249c:	bl	10fa4 <__errno_location@plt>
   124a0:	ldr	r5, [r0]
   124a4:	cmp	r6, #0
   124a8:	bne	124c4 <__assert_fail@plt+0x143c>
   124ac:	movw	r2, #29432	; 0x72f8
   124b0:	mov	r0, #0
   124b4:	mov	r1, r5
   124b8:	mov	r3, r4
   124bc:	movt	r2, #1
   124c0:	b	124e4 <__assert_fail@plt+0x145c>
   124c4:	mov	r0, r6
   124c8:	bl	13fa8 <__assert_fail@plt+0x2f20>
   124cc:	movw	r2, #29428	; 0x72f4
   124d0:	mov	r3, r0
   124d4:	str	r4, [sp]
   124d8:	mov	r0, #0
   124dc:	mov	r1, r5
   124e0:	movt	r2, #1
   124e4:	bl	10f2c <error@plt>
   124e8:	movw	r0, #33004	; 0x80ec
   124ec:	movt	r0, #2
   124f0:	ldr	r0, [r0]
   124f4:	bl	10e84 <_exit@plt>
   124f8:	b	10e54 <posix_fadvise64@plt>
   124fc:	cmp	r0, #0
   12500:	bxeq	lr
   12504:	push	{r4, sl, fp, lr}
   12508:	add	fp, sp, #8
   1250c:	sub	sp, sp, #16
   12510:	mov	r4, r1
   12514:	bl	10fd4 <fileno@plt>
   12518:	mov	r1, #0
   1251c:	mov	r2, #0
   12520:	mov	r3, #0
   12524:	str	r1, [sp]
   12528:	stmib	sp, {r1, r4}
   1252c:	bl	10e54 <posix_fadvise64@plt>
   12530:	sub	sp, fp, #8
   12534:	pop	{r4, sl, fp, pc}
   12538:	push	{r4, r5, r6, sl, fp, lr}
   1253c:	add	fp, sp, #16
   12540:	sub	sp, sp, #8
   12544:	mov	r4, r0
   12548:	bl	10fd4 <fileno@plt>
   1254c:	cmn	r0, #1
   12550:	ble	125c4 <__assert_fail@plt+0x153c>
   12554:	mov	r0, r4
   12558:	bl	10f50 <__freading@plt>
   1255c:	cmp	r0, #0
   12560:	beq	1258c <__assert_fail@plt+0x1504>
   12564:	mov	r0, r4
   12568:	bl	10fd4 <fileno@plt>
   1256c:	mov	r1, #1
   12570:	mov	r2, #0
   12574:	mov	r3, #0
   12578:	str	r1, [sp]
   1257c:	bl	10efc <lseek64@plt>
   12580:	and	r0, r0, r1
   12584:	cmn	r0, #1
   12588:	beq	125c4 <__assert_fail@plt+0x153c>
   1258c:	mov	r0, r4
   12590:	bl	125d4 <__assert_fail@plt+0x154c>
   12594:	cmp	r0, #0
   12598:	beq	125c4 <__assert_fail@plt+0x153c>
   1259c:	bl	10fa4 <__errno_location@plt>
   125a0:	ldr	r6, [r0]
   125a4:	mov	r5, r0
   125a8:	mov	r0, r4
   125ac:	bl	10ff8 <fclose@plt>
   125b0:	cmp	r6, #0
   125b4:	strne	r6, [r5]
   125b8:	mvnne	r0, #0
   125bc:	sub	sp, fp, #16
   125c0:	pop	{r4, r5, r6, sl, fp, pc}
   125c4:	mov	r0, r4
   125c8:	sub	sp, fp, #16
   125cc:	pop	{r4, r5, r6, sl, fp, lr}
   125d0:	b	10ff8 <fclose@plt>
   125d4:	push	{r4, sl, fp, lr}
   125d8:	add	fp, sp, #8
   125dc:	sub	sp, sp, #8
   125e0:	mov	r4, r0
   125e4:	cmp	r0, #0
   125e8:	beq	12604 <__assert_fail@plt+0x157c>
   125ec:	mov	r0, r4
   125f0:	bl	10f50 <__freading@plt>
   125f4:	cmp	r0, #0
   125f8:	ldrbne	r0, [r4, #1]
   125fc:	tstne	r0, #1
   12600:	bne	12614 <__assert_fail@plt+0x158c>
   12604:	mov	r0, r4
   12608:	sub	sp, fp, #8
   1260c:	pop	{r4, sl, fp, lr}
   12610:	b	10e60 <fflush@plt>
   12614:	mov	r0, #1
   12618:	mov	r2, #0
   1261c:	mov	r3, #0
   12620:	str	r0, [sp]
   12624:	mov	r0, r4
   12628:	bl	12658 <__assert_fail@plt+0x15d0>
   1262c:	b	12604 <__assert_fail@plt+0x157c>
   12630:	push	{r4, r5, r6, sl, fp, lr}
   12634:	add	fp, sp, #16
   12638:	mov	r4, r0
   1263c:	bl	10fa4 <__errno_location@plt>
   12640:	ldr	r6, [r0]
   12644:	mov	r5, r0
   12648:	mov	r0, r4
   1264c:	bl	10e78 <free@plt>
   12650:	str	r6, [r5]
   12654:	pop	{r4, r5, r6, sl, fp, pc}
   12658:	push	{r4, r5, r6, r7, fp, lr}
   1265c:	add	fp, sp, #16
   12660:	sub	sp, sp, #8
   12664:	mov	r4, r0
   12668:	ldr	r0, [r0, #4]
   1266c:	mov	r5, r3
   12670:	mov	r6, r2
   12674:	ldr	r1, [r4, #8]
   12678:	cmp	r1, r0
   1267c:	bne	12698 <__assert_fail@plt+0x1610>
   12680:	ldrd	r0, [r4, #16]
   12684:	cmp	r1, r0
   12688:	bne	12698 <__assert_fail@plt+0x1610>
   1268c:	ldr	r0, [r4, #36]	; 0x24
   12690:	cmp	r0, #0
   12694:	beq	126b0 <__assert_fail@plt+0x1628>
   12698:	mov	r0, r4
   1269c:	mov	r2, r6
   126a0:	mov	r3, r5
   126a4:	sub	sp, fp, #16
   126a8:	pop	{r4, r5, r6, r7, fp, lr}
   126ac:	b	11004 <fseeko64@plt>
   126b0:	ldr	r7, [fp, #8]
   126b4:	mov	r0, r4
   126b8:	bl	10fd4 <fileno@plt>
   126bc:	mov	r2, r6
   126c0:	mov	r3, r5
   126c4:	str	r7, [sp]
   126c8:	bl	10efc <lseek64@plt>
   126cc:	and	r2, r0, r1
   126d0:	cmn	r2, #1
   126d4:	mvneq	r0, #0
   126d8:	subeq	sp, fp, #16
   126dc:	popeq	{r4, r5, r6, r7, fp, pc}
   126e0:	strd	r0, [r4, #80]	; 0x50
   126e4:	ldr	r0, [r4]
   126e8:	bic	r0, r0, #16
   126ec:	str	r0, [r4]
   126f0:	mov	r0, #0
   126f4:	sub	sp, fp, #16
   126f8:	pop	{r4, r5, r6, r7, fp, pc}
   126fc:	push	{r4, r5, fp, lr}
   12700:	add	fp, sp, #8
   12704:	cmp	r0, #0
   12708:	beq	1279c <__assert_fail@plt+0x1714>
   1270c:	mov	r1, #47	; 0x2f
   12710:	mov	r4, r0
   12714:	bl	11028 <strrchr@plt>
   12718:	cmp	r0, #0
   1271c:	mov	r5, r4
   12720:	addne	r5, r0, #1
   12724:	sub	r0, r5, r4
   12728:	cmp	r0, #7
   1272c:	blt	12780 <__assert_fail@plt+0x16f8>
   12730:	movw	r1, #30559	; 0x775f
   12734:	sub	r0, r5, #7
   12738:	mov	r2, #7
   1273c:	movt	r1, #1
   12740:	bl	11070 <strncmp@plt>
   12744:	cmp	r0, #0
   12748:	bne	12780 <__assert_fail@plt+0x16f8>
   1274c:	movw	r1, #30567	; 0x7767
   12750:	mov	r0, r5
   12754:	mov	r2, #3
   12758:	movt	r1, #1
   1275c:	bl	11070 <strncmp@plt>
   12760:	cmp	r0, #0
   12764:	beq	12770 <__assert_fail@plt+0x16e8>
   12768:	mov	r4, r5
   1276c:	b	12780 <__assert_fail@plt+0x16f8>
   12770:	movw	r0, #33072	; 0x8130
   12774:	add	r4, r5, #3
   12778:	movt	r0, #2
   1277c:	str	r4, [r0]
   12780:	movw	r0, #33076	; 0x8134
   12784:	movt	r0, #2
   12788:	str	r4, [r0]
   1278c:	movw	r0, #33120	; 0x8160
   12790:	movt	r0, #2
   12794:	str	r4, [r0]
   12798:	pop	{r4, r5, fp, pc}
   1279c:	movw	r0, #33088	; 0x8140
   127a0:	mov	r1, #55	; 0x37
   127a4:	mov	r2, #1
   127a8:	movt	r0, #2
   127ac:	ldr	r3, [r0]
   127b0:	movw	r0, #30503	; 0x7727
   127b4:	movt	r0, #1
   127b8:	bl	10ef0 <fwrite@plt>
   127bc:	bl	1107c <abort@plt>
   127c0:	push	{r4, r5, r6, sl, fp, lr}
   127c4:	add	fp, sp, #16
   127c8:	mov	r4, r0
   127cc:	movw	r0, #33128	; 0x8168
   127d0:	movt	r0, #2
   127d4:	cmp	r4, #0
   127d8:	moveq	r4, r0
   127dc:	bl	10fa4 <__errno_location@plt>
   127e0:	ldr	r6, [r0]
   127e4:	mov	r5, r0
   127e8:	mov	r0, r4
   127ec:	mov	r1, #48	; 0x30
   127f0:	bl	14f80 <__assert_fail@plt+0x3ef8>
   127f4:	str	r6, [r5]
   127f8:	pop	{r4, r5, r6, sl, fp, pc}
   127fc:	movw	r1, #33128	; 0x8168
   12800:	cmp	r0, #0
   12804:	movt	r1, #2
   12808:	movne	r1, r0
   1280c:	ldr	r0, [r1]
   12810:	bx	lr
   12814:	movw	r2, #33128	; 0x8168
   12818:	cmp	r0, #0
   1281c:	movt	r2, #2
   12820:	movne	r2, r0
   12824:	str	r1, [r2]
   12828:	bx	lr
   1282c:	movw	r3, #33128	; 0x8168
   12830:	cmp	r0, #0
   12834:	movt	r3, #2
   12838:	movne	r3, r0
   1283c:	ubfx	r0, r1, #5, #3
   12840:	and	r1, r1, #31
   12844:	add	r0, r3, r0, lsl #2
   12848:	ldr	r3, [r0, #8]
   1284c:	eor	r2, r2, r3, lsr r1
   12850:	and	r2, r2, #1
   12854:	eor	r2, r3, r2, lsl r1
   12858:	str	r2, [r0, #8]
   1285c:	mov	r0, #1
   12860:	and	r0, r0, r3, lsr r1
   12864:	bx	lr
   12868:	movw	r2, #33128	; 0x8168
   1286c:	cmp	r0, #0
   12870:	movt	r2, #2
   12874:	movne	r2, r0
   12878:	ldr	r0, [r2, #4]
   1287c:	str	r1, [r2, #4]
   12880:	bx	lr
   12884:	movw	r3, #33128	; 0x8168
   12888:	cmp	r0, #0
   1288c:	movt	r3, #2
   12890:	movne	r3, r0
   12894:	cmp	r1, #0
   12898:	mov	r0, #10
   1289c:	cmpne	r2, #0
   128a0:	str	r0, [r3]
   128a4:	bne	128b4 <__assert_fail@plt+0x182c>
   128a8:	push	{fp, lr}
   128ac:	mov	fp, sp
   128b0:	bl	1107c <abort@plt>
   128b4:	str	r1, [r3, #40]	; 0x28
   128b8:	str	r2, [r3, #44]	; 0x2c
   128bc:	bx	lr
   128c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   128c4:	add	fp, sp, #28
   128c8:	sub	sp, sp, #20
   128cc:	mov	r7, r0
   128d0:	ldr	r0, [fp, #8]
   128d4:	movw	r5, #33128	; 0x8168
   128d8:	mov	r8, r3
   128dc:	mov	r9, r2
   128e0:	mov	sl, r1
   128e4:	movt	r5, #2
   128e8:	cmp	r0, #0
   128ec:	movne	r5, r0
   128f0:	bl	10fa4 <__errno_location@plt>
   128f4:	mov	r4, r0
   128f8:	ldm	r5, {r0, r1}
   128fc:	ldr	r2, [r5, #40]	; 0x28
   12900:	ldr	r3, [r5, #44]	; 0x2c
   12904:	add	r5, r5, #8
   12908:	ldr	r6, [r4]
   1290c:	stm	sp, {r0, r1, r5}
   12910:	str	r2, [sp, #12]
   12914:	str	r3, [sp, #16]
   12918:	mov	r0, r7
   1291c:	mov	r1, sl
   12920:	mov	r2, r9
   12924:	mov	r3, r8
   12928:	bl	12938 <__assert_fail@plt+0x18b0>
   1292c:	str	r6, [r4]
   12930:	sub	sp, fp, #28
   12934:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12938:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1293c:	add	fp, sp, #28
   12940:	sub	sp, sp, #156	; 0x9c
   12944:	str	r0, [sp, #80]	; 0x50
   12948:	ldr	r0, [fp, #12]
   1294c:	mov	r6, r1
   12950:	mov	r9, r3
   12954:	str	r2, [fp, #-84]	; 0xffffffac
   12958:	and	r1, r0, #4
   1295c:	str	r1, [sp, #32]
   12960:	and	r1, r0, #1
   12964:	str	r1, [sp, #36]	; 0x24
   12968:	ubfx	r4, r0, #1, #1
   1296c:	bl	10f08 <__ctype_get_mb_cur_max@plt>
   12970:	str	r0, [sp, #40]	; 0x28
   12974:	ldr	r0, [fp, #24]
   12978:	ldr	r7, [fp, #8]
   1297c:	mov	r1, #0
   12980:	mov	r5, #1
   12984:	str	r1, [fp, #-56]	; 0xffffffc8
   12988:	mov	r1, #0
   1298c:	str	r1, [sp, #60]	; 0x3c
   12990:	str	r0, [sp, #76]	; 0x4c
   12994:	ldr	r0, [fp, #20]
   12998:	str	r0, [sp, #72]	; 0x48
   1299c:	mov	r0, #0
   129a0:	str	r0, [sp, #56]	; 0x38
   129a4:	mov	r0, #0
   129a8:	str	r0, [sp, #92]	; 0x5c
   129ac:	mov	r0, #0
   129b0:	str	r0, [fp, #-76]	; 0xffffffb4
   129b4:	mov	r0, #0
   129b8:	cmp	r7, #10
   129bc:	bhi	1393c <__assert_fail@plt+0x28b4>
   129c0:	add	r1, pc, #28
   129c4:	mov	sl, r6
   129c8:	ldr	r6, [sp, #80]	; 0x50
   129cc:	ldr	ip, [fp, #-84]	; 0xffffffac
   129d0:	mov	r8, #0
   129d4:	mov	r2, #1
   129d8:	mov	r3, #0
   129dc:	mov	lr, r9
   129e0:	ldr	pc, [r1, r7, lsl #2]
   129e4:	andeq	r2, r1, r8, asr #21
   129e8:	strdeq	r2, [r1], -r4
   129ec:			; <UNDEFINED> instruction: 0x00012ab8
   129f0:			; <UNDEFINED> instruction: 0x00012ab0
   129f4:	andeq	r2, r1, r8, ror #21
   129f8:	andeq	r2, r1, ip, lsr fp
   129fc:	ldrdeq	r2, [r1], -r8
   12a00:	muleq	r1, r8, fp
   12a04:	andeq	r2, r1, r0, lsl sl
   12a08:	andeq	r2, r1, r0, lsl sl
   12a0c:	andeq	r2, r1, r8, lsr sl
   12a10:	movw	r0, #30649	; 0x77b9
   12a14:	mov	r1, r7
   12a18:	movt	r0, #1
   12a1c:	bl	14348 <__assert_fail@plt+0x32c0>
   12a20:	str	r0, [sp, #72]	; 0x48
   12a24:	movw	r0, #30651	; 0x77bb
   12a28:	mov	r1, r7
   12a2c:	movt	r0, #1
   12a30:	bl	14348 <__assert_fail@plt+0x32c0>
   12a34:	str	r0, [sp, #76]	; 0x4c
   12a38:	str	r5, [fp, #-48]	; 0xffffffd0
   12a3c:	mov	r8, #0
   12a40:	mov	r5, r7
   12a44:	tst	r4, #1
   12a48:	bne	12a80 <__assert_fail@plt+0x19f8>
   12a4c:	ldr	r0, [sp, #72]	; 0x48
   12a50:	ldrb	r0, [r0]
   12a54:	cmp	r0, #0
   12a58:	beq	12a80 <__assert_fail@plt+0x19f8>
   12a5c:	ldr	r1, [sp, #72]	; 0x48
   12a60:	mov	r8, #0
   12a64:	add	r1, r1, #1
   12a68:	cmp	r8, sl
   12a6c:	strbcc	r0, [r6, r8]
   12a70:	ldrb	r0, [r1, r8]
   12a74:	add	r8, r8, #1
   12a78:	cmp	r0, #0
   12a7c:	bne	12a68 <__assert_fail@plt+0x19e0>
   12a80:	ldr	r7, [sp, #76]	; 0x4c
   12a84:	mov	r0, r7
   12a88:	bl	10f8c <strlen@plt>
   12a8c:	str	r7, [sp, #92]	; 0x5c
   12a90:	mov	r7, r5
   12a94:	ldr	ip, [fp, #-84]	; 0xffffffac
   12a98:	ldr	r5, [fp, #-48]	; 0xffffffd0
   12a9c:	str	r0, [fp, #-76]	; 0xffffffb4
   12aa0:	mov	r2, #1
   12aa4:	mov	r3, r4
   12aa8:	mov	lr, r9
   12aac:	b	12b98 <__assert_fail@plt+0x1b10>
   12ab0:	mov	r0, #1
   12ab4:	b	12af4 <__assert_fail@plt+0x1a6c>
   12ab8:	tst	r4, #1
   12abc:	bne	12af4 <__assert_fail@plt+0x1a6c>
   12ac0:	mov	r2, r0
   12ac4:	b	12b1c <__assert_fail@plt+0x1a94>
   12ac8:	mov	r7, #0
   12acc:	mov	r8, #0
   12ad0:	mov	r2, r0
   12ad4:	b	12b94 <__assert_fail@plt+0x1b0c>
   12ad8:	mov	r0, #1
   12adc:	mov	r8, #0
   12ae0:	mov	r7, #5
   12ae4:	b	12b50 <__assert_fail@plt+0x1ac8>
   12ae8:	mov	r2, #1
   12aec:	tst	r4, #1
   12af0:	beq	12b1c <__assert_fail@plt+0x1a94>
   12af4:	mov	r1, #1
   12af8:	mov	r8, #0
   12afc:	mov	r7, #2
   12b00:	mov	r2, r0
   12b04:	mov	r3, #1
   12b08:	str	r1, [fp, #-76]	; 0xffffffb4
   12b0c:	movw	r1, #30651	; 0x77bb
   12b10:	movt	r1, #1
   12b14:	str	r1, [sp, #92]	; 0x5c
   12b18:	b	12b98 <__assert_fail@plt+0x1b10>
   12b1c:	cmp	sl, #0
   12b20:	mov	r8, #1
   12b24:	mov	r7, #2
   12b28:	movne	r0, #39	; 0x27
   12b2c:	strbne	r0, [r6]
   12b30:	movw	r0, #30651	; 0x77bb
   12b34:	movt	r0, #1
   12b38:	b	12b88 <__assert_fail@plt+0x1b00>
   12b3c:	mov	r7, #5
   12b40:	tst	r4, #1
   12b44:	beq	12b6c <__assert_fail@plt+0x1ae4>
   12b48:	mov	r0, #1
   12b4c:	mov	r8, #0
   12b50:	str	r0, [fp, #-76]	; 0xffffffb4
   12b54:	movw	r0, #30647	; 0x77b7
   12b58:	mov	r2, #1
   12b5c:	mov	r3, #1
   12b60:	movt	r0, #1
   12b64:	str	r0, [sp, #92]	; 0x5c
   12b68:	b	12b98 <__assert_fail@plt+0x1b10>
   12b6c:	cmp	sl, #0
   12b70:	mov	r8, #1
   12b74:	mov	r2, #1
   12b78:	movne	r0, #34	; 0x22
   12b7c:	strbne	r0, [r6]
   12b80:	movw	r0, #30647	; 0x77b7
   12b84:	movt	r0, #1
   12b88:	str	r0, [sp, #92]	; 0x5c
   12b8c:	mov	r0, #1
   12b90:	str	r0, [fp, #-76]	; 0xffffffb4
   12b94:	mov	r3, #0
   12b98:	ldr	r0, [fp, #16]
   12b9c:	str	r3, [fp, #-72]	; 0xffffffb8
   12ba0:	str	r7, [fp, #-64]	; 0xffffffc0
   12ba4:	str	r2, [sp, #84]	; 0x54
   12ba8:	cmp	r0, #0
   12bac:	movwne	r0, #1
   12bb0:	and	r0, r0, r3
   12bb4:	str	r0, [fp, #-88]	; 0xffffffa8
   12bb8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12bbc:	cmp	r0, #0
   12bc0:	movwne	r0, #1
   12bc4:	subs	r4, r7, #2
   12bc8:	mov	r7, #0
   12bcc:	and	r1, r0, r3
   12bd0:	str	r4, [fp, #-80]	; 0xffffffb0
   12bd4:	and	r1, r2, r1
   12bd8:	str	r1, [sp, #48]	; 0x30
   12bdc:	clz	r1, r4
   12be0:	lsr	r1, r1, #5
   12be4:	and	r1, r1, r3
   12be8:	eor	r3, r3, #1
   12bec:	str	r1, [sp, #64]	; 0x40
   12bf0:	mov	r1, r4
   12bf4:	str	r3, [sp, #88]	; 0x58
   12bf8:	movwne	r1, #1
   12bfc:	orr	r3, r1, r3
   12c00:	and	r1, r1, r2
   12c04:	and	r0, r0, r1
   12c08:	str	r3, [sp, #68]	; 0x44
   12c0c:	str	r1, [fp, #-68]	; 0xffffffbc
   12c10:	str	r0, [fp, #-60]	; 0xffffffc4
   12c14:	eor	r0, r2, #1
   12c18:	str	r0, [sp, #52]	; 0x34
   12c1c:	cmn	lr, #1
   12c20:	beq	12c30 <__assert_fail@plt+0x1ba8>
   12c24:	cmp	r7, lr
   12c28:	bne	12c3c <__assert_fail@plt+0x1bb4>
   12c2c:	b	13764 <__assert_fail@plt+0x26dc>
   12c30:	ldrb	r0, [ip, r7]
   12c34:	cmp	r0, #0
   12c38:	beq	1376c <__assert_fail@plt+0x26e4>
   12c3c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   12c40:	mov	r9, #0
   12c44:	str	r5, [fp, #-48]	; 0xffffffd0
   12c48:	cmp	r0, #0
   12c4c:	beq	12c80 <__assert_fail@plt+0x1bf8>
   12c50:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12c54:	add	r4, r7, r0
   12c58:	cmp	r0, #2
   12c5c:	bcc	12c78 <__assert_fail@plt+0x1bf0>
   12c60:	cmn	lr, #1
   12c64:	bne	12c78 <__assert_fail@plt+0x1bf0>
   12c68:	mov	r0, ip
   12c6c:	bl	10f8c <strlen@plt>
   12c70:	ldr	ip, [fp, #-84]	; 0xffffffac
   12c74:	mov	lr, r0
   12c78:	cmp	r4, lr
   12c7c:	bls	12c88 <__assert_fail@plt+0x1c00>
   12c80:	mov	r0, #0
   12c84:	b	12cc8 <__assert_fail@plt+0x1c40>
   12c88:	ldr	r1, [sp, #92]	; 0x5c
   12c8c:	ldr	r2, [fp, #-76]	; 0xffffffb4
   12c90:	add	r0, ip, r7
   12c94:	mov	r4, lr
   12c98:	bl	10eb4 <memcmp@plt>
   12c9c:	ldr	r2, [sp, #88]	; 0x58
   12ca0:	cmp	r0, #0
   12ca4:	mov	r1, r0
   12ca8:	movwne	r1, #1
   12cac:	orr	r1, r1, r2
   12cb0:	tst	r1, #1
   12cb4:	beq	137fc <__assert_fail@plt+0x2774>
   12cb8:	ldr	ip, [fp, #-84]	; 0xffffffac
   12cbc:	clz	r0, r0
   12cc0:	mov	lr, r4
   12cc4:	lsr	r0, r0, #5
   12cc8:	str	r0, [fp, #-52]	; 0xffffffcc
   12ccc:	ldrb	r5, [ip, r7]
   12cd0:	cmp	r5, #126	; 0x7e
   12cd4:	bhi	1308c <__assert_fail@plt+0x2004>
   12cd8:	add	r3, pc, #16
   12cdc:	mov	r4, #1
   12ce0:	mov	r2, #110	; 0x6e
   12ce4:	mov	r0, #97	; 0x61
   12ce8:	mov	r1, #0
   12cec:	ldr	pc, [r3, r5, lsl #2]
   12cf0:	andeq	r2, r1, r8, lsl #31
   12cf4:	andeq	r3, r1, ip, lsl #1
   12cf8:	andeq	r3, r1, ip, lsl #1
   12cfc:	andeq	r3, r1, ip, lsl #1
   12d00:	andeq	r3, r1, ip, lsl #1
   12d04:	andeq	r3, r1, ip, lsl #1
   12d08:	andeq	r3, r1, ip, lsl #1
   12d0c:	andeq	r3, r1, r0, asr #2
   12d10:	andeq	r2, r1, r8, ror #30
   12d14:	andeq	r2, r1, r0, ror #30
   12d18:	andeq	r2, r1, r4, ror pc
   12d1c:	strdeq	r2, [r1], -r4
   12d20:	andeq	r2, r1, r8, asr pc
   12d24:	andeq	r2, r1, r0, ror pc
   12d28:	andeq	r3, r1, ip, lsl #1
   12d2c:	andeq	r3, r1, ip, lsl #1
   12d30:	andeq	r3, r1, ip, lsl #1
   12d34:	andeq	r3, r1, ip, lsl #1
   12d38:	andeq	r3, r1, ip, lsl #1
   12d3c:	andeq	r3, r1, ip, lsl #1
   12d40:	andeq	r3, r1, ip, lsl #1
   12d44:	andeq	r3, r1, ip, lsl #1
   12d48:	andeq	r3, r1, ip, lsl #1
   12d4c:	andeq	r3, r1, ip, lsl #1
   12d50:	andeq	r3, r1, ip, lsl #1
   12d54:	andeq	r3, r1, ip, lsl #1
   12d58:	andeq	r3, r1, ip, lsl #1
   12d5c:	andeq	r3, r1, ip, lsl #1
   12d60:	andeq	r3, r1, ip, lsl #1
   12d64:	andeq	r3, r1, ip, lsl #1
   12d68:	andeq	r3, r1, ip, lsl #1
   12d6c:	andeq	r3, r1, ip, lsl #1
   12d70:	strdeq	r3, [r1], -r8
   12d74:	strdeq	r3, [r1], -ip
   12d78:	strdeq	r3, [r1], -ip
   12d7c:	andeq	r2, r1, r0, lsl #30
   12d80:	strdeq	r3, [r1], -ip
   12d84:	andeq	r2, r1, ip, ror #29
   12d88:	strdeq	r3, [r1], -ip
   12d8c:	strdeq	r2, [r1], -ip
   12d90:	strdeq	r3, [r1], -ip
   12d94:	strdeq	r3, [r1], -ip
   12d98:	strdeq	r3, [r1], -ip
   12d9c:	andeq	r2, r1, ip, ror #29
   12da0:	andeq	r2, r1, ip, ror #29
   12da4:	andeq	r2, r1, ip, ror #29
   12da8:	andeq	r2, r1, ip, ror #29
   12dac:	andeq	r2, r1, ip, ror #29
   12db0:	andeq	r2, r1, ip, ror #29
   12db4:	andeq	r2, r1, ip, ror #29
   12db8:	andeq	r2, r1, ip, ror #29
   12dbc:	andeq	r2, r1, ip, ror #29
   12dc0:	andeq	r2, r1, ip, ror #29
   12dc4:	andeq	r2, r1, ip, ror #29
   12dc8:	andeq	r2, r1, ip, ror #29
   12dcc:	andeq	r2, r1, ip, ror #29
   12dd0:	andeq	r2, r1, ip, ror #29
   12dd4:	andeq	r2, r1, ip, ror #29
   12dd8:	andeq	r2, r1, ip, ror #29
   12ddc:	strdeq	r3, [r1], -ip
   12de0:	strdeq	r3, [r1], -ip
   12de4:	strdeq	r3, [r1], -ip
   12de8:	strdeq	r3, [r1], -ip
   12dec:	andeq	r2, r1, r8, asr #31
   12df0:	andeq	r3, r1, ip, lsl #1
   12df4:	andeq	r2, r1, ip, ror #29
   12df8:	andeq	r2, r1, ip, ror #29
   12dfc:	andeq	r2, r1, ip, ror #29
   12e00:	andeq	r2, r1, ip, ror #29
   12e04:	andeq	r2, r1, ip, ror #29
   12e08:	andeq	r2, r1, ip, ror #29
   12e0c:	andeq	r2, r1, ip, ror #29
   12e10:	andeq	r2, r1, ip, ror #29
   12e14:	andeq	r2, r1, ip, ror #29
   12e18:	andeq	r2, r1, ip, ror #29
   12e1c:	andeq	r2, r1, ip, ror #29
   12e20:	andeq	r2, r1, ip, ror #29
   12e24:	andeq	r2, r1, ip, ror #29
   12e28:	andeq	r2, r1, ip, ror #29
   12e2c:	andeq	r2, r1, ip, ror #29
   12e30:	andeq	r2, r1, ip, ror #29
   12e34:	andeq	r2, r1, ip, ror #29
   12e38:	andeq	r2, r1, ip, ror #29
   12e3c:	andeq	r2, r1, ip, ror #29
   12e40:	andeq	r2, r1, ip, ror #29
   12e44:	andeq	r2, r1, ip, ror #29
   12e48:	andeq	r2, r1, ip, ror #29
   12e4c:	andeq	r2, r1, ip, ror #29
   12e50:	andeq	r2, r1, ip, ror #29
   12e54:	andeq	r2, r1, ip, ror #29
   12e58:	andeq	r2, r1, ip, ror #29
   12e5c:	strdeq	r3, [r1], -ip
   12e60:	andeq	r2, r1, r4, lsr pc
   12e64:	andeq	r2, r1, ip, ror #29
   12e68:	strdeq	r3, [r1], -ip
   12e6c:	andeq	r2, r1, ip, ror #29
   12e70:	strdeq	r3, [r1], -ip
   12e74:	andeq	r2, r1, ip, ror #29
   12e78:	andeq	r2, r1, ip, ror #29
   12e7c:	andeq	r2, r1, ip, ror #29
   12e80:	andeq	r2, r1, ip, ror #29
   12e84:	andeq	r2, r1, ip, ror #29
   12e88:	andeq	r2, r1, ip, ror #29
   12e8c:	andeq	r2, r1, ip, ror #29
   12e90:	andeq	r2, r1, ip, ror #29
   12e94:	andeq	r2, r1, ip, ror #29
   12e98:	andeq	r2, r1, ip, ror #29
   12e9c:	andeq	r2, r1, ip, ror #29
   12ea0:	andeq	r2, r1, ip, ror #29
   12ea4:	andeq	r2, r1, ip, ror #29
   12ea8:	andeq	r2, r1, ip, ror #29
   12eac:	andeq	r2, r1, ip, ror #29
   12eb0:	andeq	r2, r1, ip, ror #29
   12eb4:	andeq	r2, r1, ip, ror #29
   12eb8:	andeq	r2, r1, ip, ror #29
   12ebc:	andeq	r2, r1, ip, ror #29
   12ec0:	andeq	r2, r1, ip, ror #29
   12ec4:	andeq	r2, r1, ip, ror #29
   12ec8:	andeq	r2, r1, ip, ror #29
   12ecc:	andeq	r2, r1, ip, ror #29
   12ed0:	andeq	r2, r1, ip, ror #29
   12ed4:	andeq	r2, r1, ip, ror #29
   12ed8:	andeq	r2, r1, ip, ror #29
   12edc:	andeq	r2, r1, r4, lsl pc
   12ee0:	strdeq	r3, [r1], -ip
   12ee4:	andeq	r2, r1, r4, lsl pc
   12ee8:	andeq	r2, r1, r0, lsl #30
   12eec:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12ef0:	cmp	r0, #0
   12ef4:	beq	13154 <__assert_fail@plt+0x20cc>
   12ef8:	ldr	r0, [fp, #16]
   12efc:	b	13158 <__assert_fail@plt+0x20d0>
   12f00:	mov	r4, #0
   12f04:	cmp	r7, #0
   12f08:	beq	130f8 <__assert_fail@plt+0x2070>
   12f0c:	mov	r9, #0
   12f10:	b	12eec <__assert_fail@plt+0x1e64>
   12f14:	mov	r4, #0
   12f18:	cmn	lr, #1
   12f1c:	beq	130dc <__assert_fail@plt+0x2054>
   12f20:	cmp	r7, #0
   12f24:	bne	12f0c <__assert_fail@plt+0x1e84>
   12f28:	cmp	lr, #1
   12f2c:	beq	130f8 <__assert_fail@plt+0x2070>
   12f30:	b	12f0c <__assert_fail@plt+0x1e84>
   12f34:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12f38:	cmp	r0, #2
   12f3c:	bne	1311c <__assert_fail@plt+0x2094>
   12f40:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12f44:	tst	r0, #1
   12f48:	bne	13818 <__assert_fail@plt+0x2790>
   12f4c:	mov	r9, #0
   12f50:	mov	r0, #92	; 0x5c
   12f54:	b	13130 <__assert_fail@plt+0x20a8>
   12f58:	mov	r0, #102	; 0x66
   12f5c:	b	13140 <__assert_fail@plt+0x20b8>
   12f60:	mov	r2, #116	; 0x74
   12f64:	b	12f74 <__assert_fail@plt+0x1eec>
   12f68:	mov	r0, #98	; 0x62
   12f6c:	b	13140 <__assert_fail@plt+0x20b8>
   12f70:	mov	r2, #114	; 0x72
   12f74:	ldr	r0, [sp, #68]	; 0x44
   12f78:	tst	r0, #1
   12f7c:	mov	r0, r2
   12f80:	bne	13140 <__assert_fail@plt+0x20b8>
   12f84:	b	13818 <__assert_fail@plt+0x2790>
   12f88:	ldr	r0, [sp, #84]	; 0x54
   12f8c:	tst	r0, #1
   12f90:	beq	13230 <__assert_fail@plt+0x21a8>
   12f94:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12f98:	tst	r0, #1
   12f9c:	bne	13928 <__assert_fail@plt+0x28a0>
   12fa0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12fa4:	ldr	r2, [fp, #-56]	; 0xffffffc8
   12fa8:	cmp	r0, #2
   12fac:	ldr	r0, [fp, #-80]	; 0xffffffb0
   12fb0:	movwne	r0, #1
   12fb4:	orr	r0, r0, r2
   12fb8:	tst	r0, #1
   12fbc:	beq	13600 <__assert_fail@plt+0x2578>
   12fc0:	mov	r0, r8
   12fc4:	b	13634 <__assert_fail@plt+0x25ac>
   12fc8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12fcc:	mov	r9, #0
   12fd0:	mov	r5, #63	; 0x3f
   12fd4:	cmp	r0, #5
   12fd8:	beq	133e4 <__assert_fail@plt+0x235c>
   12fdc:	cmp	r0, #2
   12fe0:	bne	13488 <__assert_fail@plt+0x2400>
   12fe4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12fe8:	tst	r0, #1
   12fec:	beq	1348c <__assert_fail@plt+0x2404>
   12ff0:	b	13818 <__assert_fail@plt+0x2790>
   12ff4:	mov	r0, #118	; 0x76
   12ff8:	b	13140 <__assert_fail@plt+0x20b8>
   12ffc:	mov	r0, #1
   13000:	mov	r5, #39	; 0x27
   13004:	str	r0, [sp, #60]	; 0x3c
   13008:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1300c:	cmp	r0, #2
   13010:	bne	13084 <__assert_fail@plt+0x1ffc>
   13014:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13018:	tst	r0, #1
   1301c:	bne	13818 <__assert_fail@plt+0x2790>
   13020:	ldr	r2, [sp, #56]	; 0x38
   13024:	clz	r1, sl
   13028:	mov	r9, #0
   1302c:	lsr	r1, r1, #5
   13030:	cmp	r2, #0
   13034:	mov	r0, r2
   13038:	movwne	r0, #1
   1303c:	orrs	r0, r0, r1
   13040:	moveq	r2, sl
   13044:	moveq	sl, r0
   13048:	cmp	r8, sl
   1304c:	str	r2, [sp, #56]	; 0x38
   13050:	movcc	r0, #39	; 0x27
   13054:	strbcc	r0, [r6, r8]
   13058:	add	r0, r8, #1
   1305c:	cmp	r0, sl
   13060:	movcc	r1, #92	; 0x5c
   13064:	strbcc	r1, [r6, r0]
   13068:	add	r0, r8, #2
   1306c:	add	r8, r8, #3
   13070:	cmp	r0, sl
   13074:	movcc	r1, #39	; 0x27
   13078:	strbcc	r1, [r6, r0]
   1307c:	mov	r0, #0
   13080:	str	r0, [fp, #-56]	; 0xffffffc8
   13084:	mov	r4, #1
   13088:	b	12eec <__assert_fail@plt+0x1e64>
   1308c:	ldr	r0, [sp, #40]	; 0x28
   13090:	cmp	r0, #1
   13094:	bne	1325c <__assert_fail@plt+0x21d4>
   13098:	str	lr, [sp, #28]
   1309c:	bl	10f74 <__ctype_b_loc@plt>
   130a0:	ldr	r0, [r0]
   130a4:	ldr	ip, [fp, #-84]	; 0xffffffac
   130a8:	mov	r1, #1
   130ac:	add	r0, r0, r5, lsl #1
   130b0:	ldrb	r0, [r0, #1]
   130b4:	ubfx	r4, r0, #6, #1
   130b8:	ldr	r0, [sp, #52]	; 0x34
   130bc:	mov	r2, r1
   130c0:	cmp	r1, #1
   130c4:	orr	r0, r4, r0
   130c8:	bhi	13494 <__assert_fail@plt+0x240c>
   130cc:	tst	r0, #1
   130d0:	beq	13494 <__assert_fail@plt+0x240c>
   130d4:	ldr	lr, [sp, #28]
   130d8:	b	12eec <__assert_fail@plt+0x1e64>
   130dc:	cmp	r7, #0
   130e0:	ldrbeq	r0, [ip, #1]
   130e4:	cmpeq	r0, #0
   130e8:	beq	130f8 <__assert_fail@plt+0x2070>
   130ec:	mvn	lr, #0
   130f0:	mov	r9, #0
   130f4:	b	12eec <__assert_fail@plt+0x1e64>
   130f8:	mov	r1, #1
   130fc:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13100:	cmp	r0, #2
   13104:	bne	13114 <__assert_fail@plt+0x208c>
   13108:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1310c:	tst	r0, #1
   13110:	bne	13818 <__assert_fail@plt+0x2790>
   13114:	mov	r4, r1
   13118:	b	12eec <__assert_fail@plt+0x1e64>
   1311c:	ldr	r1, [sp, #48]	; 0x30
   13120:	mov	r9, #0
   13124:	mov	r0, #92	; 0x5c
   13128:	cmp	r1, #0
   1312c:	beq	13140 <__assert_fail@plt+0x20b8>
   13130:	mov	r4, #0
   13134:	cmp	r9, #0
   13138:	beq	136cc <__assert_fail@plt+0x2644>
   1313c:	b	13708 <__assert_fail@plt+0x2680>
   13140:	ldr	r1, [sp, #84]	; 0x54
   13144:	mov	r4, #0
   13148:	mov	r9, #0
   1314c:	tst	r1, #1
   13150:	bne	13190 <__assert_fail@plt+0x2108>
   13154:	ldr	r0, [fp, #-88]	; 0xffffffa8
   13158:	cmp	r0, #0
   1315c:	mov	r0, r5
   13160:	beq	13184 <__assert_fail@plt+0x20fc>
   13164:	ldr	r1, [fp, #16]
   13168:	ubfx	r0, r5, #5, #3
   1316c:	mov	r2, #1
   13170:	ldr	r0, [r1, r0, lsl #2]
   13174:	and	r1, r5, #31
   13178:	tst	r0, r2, lsl r1
   1317c:	mov	r0, r5
   13180:	bne	13190 <__assert_fail@plt+0x2108>
   13184:	ldr	r1, [fp, #-52]	; 0xffffffcc
   13188:	cmp	r1, #0
   1318c:	beq	136c4 <__assert_fail@plt+0x263c>
   13190:	ldr	r1, [fp, #-72]	; 0xffffffb8
   13194:	tst	r1, #1
   13198:	bne	137f0 <__assert_fail@plt+0x2768>
   1319c:	ldr	r1, [fp, #-64]	; 0xffffffc0
   131a0:	ldr	r2, [fp, #-56]	; 0xffffffc8
   131a4:	cmp	r1, #2
   131a8:	ldr	r1, [fp, #-80]	; 0xffffffb0
   131ac:	movwne	r1, #1
   131b0:	orr	r1, r1, r2
   131b4:	tst	r1, #1
   131b8:	beq	131c4 <__assert_fail@plt+0x213c>
   131bc:	ldr	r5, [fp, #-48]	; 0xffffffd0
   131c0:	b	13200 <__assert_fail@plt+0x2178>
   131c4:	cmp	r8, sl
   131c8:	ldr	r5, [fp, #-48]	; 0xffffffd0
   131cc:	movcc	r1, #39	; 0x27
   131d0:	strbcc	r1, [r6, r8]
   131d4:	add	r1, r8, #1
   131d8:	cmp	r1, sl
   131dc:	movcc	r2, #36	; 0x24
   131e0:	strbcc	r2, [r6, r1]
   131e4:	add	r1, r8, #2
   131e8:	add	r8, r8, #3
   131ec:	cmp	r1, sl
   131f0:	movcc	r2, #39	; 0x27
   131f4:	strbcc	r2, [r6, r1]
   131f8:	mov	r1, #1
   131fc:	str	r1, [fp, #-56]	; 0xffffffc8
   13200:	cmp	r8, sl
   13204:	movcc	r1, #92	; 0x5c
   13208:	strbcc	r1, [r6, r8]
   1320c:	add	r8, r8, #1
   13210:	cmp	r8, sl
   13214:	and	r5, r5, r4
   13218:	add	r7, r7, #1
   1321c:	strbcc	r0, [r6, r8]
   13220:	add	r8, r8, #1
   13224:	cmn	lr, #1
   13228:	bne	12c24 <__assert_fail@plt+0x1b9c>
   1322c:	b	12c30 <__assert_fail@plt+0x1ba8>
   13230:	ldr	r0, [sp, #36]	; 0x24
   13234:	mov	r4, #0
   13238:	mov	r9, #0
   1323c:	mov	r5, #0
   13240:	cmp	r0, #0
   13244:	beq	13154 <__assert_fail@plt+0x20cc>
   13248:	ldr	r5, [fp, #-48]	; 0xffffffd0
   1324c:	add	r7, r7, #1
   13250:	cmn	lr, #1
   13254:	bne	12c24 <__assert_fail@plt+0x1b9c>
   13258:	b	12c30 <__assert_fail@plt+0x1ba8>
   1325c:	mov	r0, #0
   13260:	cmn	lr, #1
   13264:	str	r0, [fp, #-36]	; 0xffffffdc
   13268:	str	r0, [fp, #-40]	; 0xffffffd8
   1326c:	bne	13280 <__assert_fail@plt+0x21f8>
   13270:	mov	r0, ip
   13274:	bl	10f8c <strlen@plt>
   13278:	ldr	ip, [fp, #-84]	; 0xffffffac
   1327c:	mov	lr, r0
   13280:	add	r0, ip, r7
   13284:	mov	r4, #1
   13288:	mov	r6, #0
   1328c:	str	lr, [sp, #28]
   13290:	str	r0, [sp, #24]
   13294:	sub	r0, fp, #40	; 0x28
   13298:	mov	r3, r0
   1329c:	str	r6, [sp, #44]	; 0x2c
   132a0:	add	r6, r6, r7
   132a4:	sub	r0, fp, #44	; 0x2c
   132a8:	add	r1, ip, r6
   132ac:	sub	r2, lr, r6
   132b0:	bl	16b70 <__assert_fail@plt+0x5ae8>
   132b4:	cmp	r0, #0
   132b8:	beq	13750 <__assert_fail@plt+0x26c8>
   132bc:	cmn	r0, #1
   132c0:	beq	13710 <__assert_fail@plt+0x2688>
   132c4:	ldr	lr, [sp, #28]
   132c8:	cmn	r0, #2
   132cc:	beq	13718 <__assert_fail@plt+0x2690>
   132d0:	ldr	r2, [sp, #64]	; 0x40
   132d4:	cmp	r0, #2
   132d8:	mov	r1, #0
   132dc:	movwcc	r1, #1
   132e0:	eor	r2, r2, #1
   132e4:	orrs	r1, r2, r1
   132e8:	bne	133a8 <__assert_fail@plt+0x2320>
   132ec:	ldr	r1, [sp, #44]	; 0x2c
   132f0:	ldr	r2, [sp, #24]
   132f4:	add	r1, r2, r1
   132f8:	mov	r2, #1
   132fc:	ldrb	r3, [r1, r2]
   13300:	sub	r3, r3, #91	; 0x5b
   13304:	cmp	r3, #33	; 0x21
   13308:	bhi	1339c <__assert_fail@plt+0x2314>
   1330c:	add	r6, pc, #0
   13310:	ldr	pc, [r6, r3, lsl #2]
   13314:	andeq	r3, r1, r0, lsl r8
   13318:	andeq	r3, r1, r0, lsl r8
   1331c:	muleq	r1, ip, r3
   13320:	andeq	r3, r1, r0, lsl r8
   13324:	muleq	r1, ip, r3
   13328:	andeq	r3, r1, r0, lsl r8
   1332c:	muleq	r1, ip, r3
   13330:	muleq	r1, ip, r3
   13334:	muleq	r1, ip, r3
   13338:	muleq	r1, ip, r3
   1333c:	muleq	r1, ip, r3
   13340:	muleq	r1, ip, r3
   13344:	muleq	r1, ip, r3
   13348:	muleq	r1, ip, r3
   1334c:	muleq	r1, ip, r3
   13350:	muleq	r1, ip, r3
   13354:	muleq	r1, ip, r3
   13358:	muleq	r1, ip, r3
   1335c:	muleq	r1, ip, r3
   13360:	muleq	r1, ip, r3
   13364:	muleq	r1, ip, r3
   13368:	muleq	r1, ip, r3
   1336c:	muleq	r1, ip, r3
   13370:	muleq	r1, ip, r3
   13374:	muleq	r1, ip, r3
   13378:	muleq	r1, ip, r3
   1337c:	muleq	r1, ip, r3
   13380:	muleq	r1, ip, r3
   13384:	muleq	r1, ip, r3
   13388:	muleq	r1, ip, r3
   1338c:	muleq	r1, ip, r3
   13390:	muleq	r1, ip, r3
   13394:	muleq	r1, ip, r3
   13398:	andeq	r3, r1, r0, lsl r8
   1339c:	add	r2, r2, #1
   133a0:	cmp	r2, r0
   133a4:	bcc	132fc <__assert_fail@plt+0x2274>
   133a8:	ldr	r6, [sp, #44]	; 0x2c
   133ac:	add	r6, r0, r6
   133b0:	ldr	r0, [fp, #-44]	; 0xffffffd4
   133b4:	bl	10ee4 <iswprint@plt>
   133b8:	cmp	r0, #0
   133bc:	movwne	r0, #1
   133c0:	and	r4, r4, r0
   133c4:	sub	r0, fp, #40	; 0x28
   133c8:	bl	10e9c <mbsinit@plt>
   133cc:	ldr	lr, [sp, #28]
   133d0:	ldr	ip, [fp, #-84]	; 0xffffffac
   133d4:	sub	r3, fp, #40	; 0x28
   133d8:	cmp	r0, #0
   133dc:	beq	1329c <__assert_fail@plt+0x2214>
   133e0:	b	13758 <__assert_fail@plt+0x26d0>
   133e4:	ldr	r0, [sp, #32]
   133e8:	cmp	r0, #0
   133ec:	beq	13488 <__assert_fail@plt+0x2400>
   133f0:	add	r0, r7, #2
   133f4:	cmp	r0, lr
   133f8:	bcs	13488 <__assert_fail@plt+0x2400>
   133fc:	add	r1, ip, r7
   13400:	ldrb	r1, [r1, #1]
   13404:	cmp	r1, #63	; 0x3f
   13408:	bne	13488 <__assert_fail@plt+0x2400>
   1340c:	ldrb	r5, [ip, r0]
   13410:	sub	r1, r5, #33	; 0x21
   13414:	cmp	r1, #29
   13418:	bhi	13488 <__assert_fail@plt+0x2400>
   1341c:	movw	r3, #20929	; 0x51c1
   13420:	mov	r2, #1
   13424:	movt	r3, #14336	; 0x3800
   13428:	tst	r3, r2, lsl r1
   1342c:	beq	13488 <__assert_fail@plt+0x2400>
   13430:	ldr	r1, [fp, #-72]	; 0xffffffb8
   13434:	tst	r1, #1
   13438:	bne	13930 <__assert_fail@plt+0x28a8>
   1343c:	cmp	r8, sl
   13440:	mov	r7, r0
   13444:	mov	r4, #0
   13448:	movcc	r1, #63	; 0x3f
   1344c:	strbcc	r1, [r6, r8]
   13450:	add	r1, r8, #1
   13454:	cmp	r1, sl
   13458:	movcc	r2, #34	; 0x22
   1345c:	strbcc	r2, [r6, r1]
   13460:	add	r1, r8, #2
   13464:	cmp	r1, sl
   13468:	movcc	r2, #34	; 0x22
   1346c:	strbcc	r2, [r6, r1]
   13470:	add	r1, r8, #3
   13474:	add	r8, r8, #4
   13478:	cmp	r1, sl
   1347c:	movcc	r2, #63	; 0x3f
   13480:	strbcc	r2, [r6, r1]
   13484:	b	12eec <__assert_fail@plt+0x1e64>
   13488:	mov	r5, #63	; 0x3f
   1348c:	mov	r4, #0
   13490:	b	12eec <__assert_fail@plt+0x1e64>
   13494:	add	r1, r2, r7
   13498:	ldr	lr, [sp, #28]
   1349c:	mov	r3, #0
   134a0:	str	r1, [sp, #44]	; 0x2c
   134a4:	add	r1, r7, #1
   134a8:	ldr	r7, [fp, #-64]	; 0xffffffc0
   134ac:	tst	r0, #1
   134b0:	bne	13584 <__assert_fail@plt+0x24fc>
   134b4:	ldr	r2, [fp, #-72]	; 0xffffffb8
   134b8:	tst	r2, #1
   134bc:	bne	13878 <__assert_fail@plt+0x27f0>
   134c0:	ldr	r3, [fp, #-80]	; 0xffffffb0
   134c4:	ldr	r2, [fp, #-56]	; 0xffffffc8
   134c8:	cmp	r7, #2
   134cc:	movwne	r3, #1
   134d0:	orr	r3, r3, r2
   134d4:	tst	r3, #1
   134d8:	bne	13514 <__assert_fail@plt+0x248c>
   134dc:	cmp	r8, sl
   134e0:	add	r3, r8, #1
   134e4:	movcc	r2, #39	; 0x27
   134e8:	strbcc	r2, [r6, r8]
   134ec:	cmp	r3, sl
   134f0:	movcc	r2, #36	; 0x24
   134f4:	strbcc	r2, [r6, r3]
   134f8:	add	r3, r8, #2
   134fc:	add	r8, r8, #3
   13500:	cmp	r3, sl
   13504:	movcc	r2, #39	; 0x27
   13508:	strbcc	r2, [r6, r3]
   1350c:	mov	r2, #1
   13510:	str	r2, [fp, #-56]	; 0xffffffc8
   13514:	cmp	r8, sl
   13518:	movcc	r3, #92	; 0x5c
   1351c:	strbcc	r3, [r6, r8]
   13520:	add	r3, r8, #1
   13524:	cmp	r3, sl
   13528:	andcc	r7, r5, #192	; 0xc0
   1352c:	movcc	r2, #48	; 0x30
   13530:	orrcc	r7, r2, r7, lsr #6
   13534:	strbcc	r7, [r6, r3]
   13538:	add	r3, r8, #2
   1353c:	add	r8, r8, #3
   13540:	cmp	r3, sl
   13544:	lsrcc	r7, r5, #3
   13548:	movcc	r2, #6
   1354c:	bficc	r7, r2, #3, #29
   13550:	mov	r2, #6
   13554:	strbcc	r7, [r6, r3]
   13558:	bfi	r5, r2, #3, #29
   1355c:	mov	r3, #1
   13560:	b	135a8 <__assert_fail@plt+0x2520>
   13564:	cmp	r8, sl
   13568:	ldr	r7, [fp, #-64]	; 0xffffffc0
   1356c:	strbcc	r5, [r6, r8]
   13570:	add	r8, r8, #1
   13574:	ldrb	r5, [ip, r1]
   13578:	add	r1, r1, #1
   1357c:	tst	r0, #1
   13580:	beq	134b4 <__assert_fail@plt+0x242c>
   13584:	ldr	r2, [fp, #-52]	; 0xffffffcc
   13588:	tst	r2, #1
   1358c:	beq	135a0 <__assert_fail@plt+0x2518>
   13590:	cmp	r8, sl
   13594:	movcc	r7, #92	; 0x5c
   13598:	strbcc	r7, [r6, r8]
   1359c:	add	r8, r8, #1
   135a0:	mov	r2, #0
   135a4:	str	r2, [fp, #-52]	; 0xffffffcc
   135a8:	ldr	r2, [sp, #44]	; 0x2c
   135ac:	and	r9, r3, #1
   135b0:	cmp	r2, r1
   135b4:	bls	136b4 <__assert_fail@plt+0x262c>
   135b8:	ldr	r2, [fp, #-56]	; 0xffffffc8
   135bc:	cmp	r9, #0
   135c0:	movwne	r9, #1
   135c4:	mvn	r7, r2
   135c8:	orr	r7, r7, r9
   135cc:	tst	r7, #1
   135d0:	bne	13564 <__assert_fail@plt+0x24dc>
   135d4:	cmp	r8, sl
   135d8:	movcc	r7, #39	; 0x27
   135dc:	strbcc	r7, [r6, r8]
   135e0:	add	r7, r8, #1
   135e4:	add	r8, r8, #2
   135e8:	cmp	r7, sl
   135ec:	movcc	r2, #39	; 0x27
   135f0:	strbcc	r2, [r6, r7]
   135f4:	mov	r2, #0
   135f8:	str	r2, [fp, #-56]	; 0xffffffc8
   135fc:	b	13564 <__assert_fail@plt+0x24dc>
   13600:	cmp	r8, sl
   13604:	mov	r2, #1
   13608:	movcc	r0, #39	; 0x27
   1360c:	strbcc	r0, [r6, r8]
   13610:	add	r0, r8, #1
   13614:	cmp	r0, sl
   13618:	movcc	r1, #36	; 0x24
   1361c:	strbcc	r1, [r6, r0]
   13620:	add	r0, r8, #2
   13624:	cmp	r0, sl
   13628:	movcc	r1, #39	; 0x27
   1362c:	strbcc	r1, [r6, r0]
   13630:	add	r0, r8, #3
   13634:	cmp	r0, sl
   13638:	add	r8, r0, #1
   1363c:	str	r2, [fp, #-56]	; 0xffffffc8
   13640:	movcc	r1, #92	; 0x5c
   13644:	strbcc	r1, [r6, r0]
   13648:	ldr	r1, [fp, #-64]	; 0xffffffc0
   1364c:	cmp	r1, #2
   13650:	beq	136a4 <__assert_fail@plt+0x261c>
   13654:	add	r1, r7, #1
   13658:	mov	r4, #0
   1365c:	mov	r9, #1
   13660:	mov	r5, #48	; 0x30
   13664:	cmp	r1, lr
   13668:	bcs	12eec <__assert_fail@plt+0x1e64>
   1366c:	ldrb	r1, [ip, r1]
   13670:	sub	r1, r1, #48	; 0x30
   13674:	uxtb	r1, r1
   13678:	cmp	r1, #9
   1367c:	bhi	12eec <__assert_fail@plt+0x1e64>
   13680:	cmp	r8, sl
   13684:	movcc	r1, #48	; 0x30
   13688:	strbcc	r1, [r6, r8]
   1368c:	add	r1, r0, #2
   13690:	add	r8, r0, #3
   13694:	cmp	r1, sl
   13698:	movcc	r2, #48	; 0x30
   1369c:	strbcc	r2, [r6, r1]
   136a0:	b	12eec <__assert_fail@plt+0x1e64>
   136a4:	mov	r0, #48	; 0x30
   136a8:	mov	r9, #1
   136ac:	mov	r4, #0
   136b0:	b	13184 <__assert_fail@plt+0x20fc>
   136b4:	cmp	r9, #0
   136b8:	sub	r7, r1, #1
   136bc:	mov	r0, r5
   136c0:	movwne	r9, #1
   136c4:	cmp	r9, #0
   136c8:	bne	13708 <__assert_fail@plt+0x2680>
   136cc:	ldr	r1, [fp, #-56]	; 0xffffffc8
   136d0:	tst	r1, #1
   136d4:	beq	13708 <__assert_fail@plt+0x2680>
   136d8:	cmp	r8, sl
   136dc:	ldr	r5, [fp, #-48]	; 0xffffffd0
   136e0:	movcc	r1, #39	; 0x27
   136e4:	strbcc	r1, [r6, r8]
   136e8:	add	r1, r8, #1
   136ec:	add	r8, r8, #2
   136f0:	cmp	r1, sl
   136f4:	movcc	r2, #39	; 0x27
   136f8:	strbcc	r2, [r6, r1]
   136fc:	mov	r1, #0
   13700:	str	r1, [fp, #-56]	; 0xffffffc8
   13704:	b	13210 <__assert_fail@plt+0x2188>
   13708:	ldr	r5, [fp, #-48]	; 0xffffffd0
   1370c:	b	13210 <__assert_fail@plt+0x2188>
   13710:	mov	r4, #0
   13714:	b	13750 <__assert_fail@plt+0x26c8>
   13718:	mov	r4, #0
   1371c:	cmp	lr, r6
   13720:	bls	13750 <__assert_fail@plt+0x26c8>
   13724:	ldr	ip, [fp, #-84]	; 0xffffffac
   13728:	ldr	r6, [sp, #44]	; 0x2c
   1372c:	ldr	r0, [sp, #24]
   13730:	ldrb	r0, [r0, r6]
   13734:	cmp	r0, #0
   13738:	beq	13758 <__assert_fail@plt+0x26d0>
   1373c:	add	r6, r6, #1
   13740:	add	r0, r7, r6
   13744:	cmp	r0, lr
   13748:	bcc	1372c <__assert_fail@plt+0x26a4>
   1374c:	b	13758 <__assert_fail@plt+0x26d0>
   13750:	ldr	ip, [fp, #-84]	; 0xffffffac
   13754:	ldr	r6, [sp, #44]	; 0x2c
   13758:	mov	r1, r6
   1375c:	ldr	r6, [sp, #80]	; 0x50
   13760:	b	130b8 <__assert_fail@plt+0x2030>
   13764:	mov	lr, r7
   13768:	b	13770 <__assert_fail@plt+0x26e8>
   1376c:	mvn	lr, #0
   13770:	ldr	r7, [fp, #-64]	; 0xffffffc0
   13774:	ldr	r1, [fp, #-72]	; 0xffffffb8
   13778:	eor	r0, r7, #2
   1377c:	orr	r0, r0, r8
   13780:	clz	r0, r0
   13784:	lsr	r0, r0, #5
   13788:	tst	r1, r0
   1378c:	bne	13818 <__assert_fail@plt+0x2790>
   13790:	mov	r0, r1
   13794:	ldr	r1, [fp, #-80]	; 0xffffffb0
   13798:	cmp	r7, #2
   1379c:	movwne	r1, #1
   137a0:	orr	r0, r0, r1
   137a4:	tst	r0, #1
   137a8:	ldreq	r0, [sp, #60]	; 0x3c
   137ac:	eoreq	r0, r0, #1
   137b0:	tsteq	r0, #1
   137b4:	bne	138c4 <__assert_fail@plt+0x283c>
   137b8:	mov	r9, lr
   137bc:	tst	r5, #1
   137c0:	bne	13880 <__assert_fail@plt+0x27f8>
   137c4:	ldr	r6, [sp, #56]	; 0x38
   137c8:	mov	r4, #0
   137cc:	cmp	r6, #0
   137d0:	beq	138bc <__assert_fail@plt+0x2834>
   137d4:	ldr	r0, [sp, #84]	; 0x54
   137d8:	mov	r1, #0
   137dc:	cmp	sl, #0
   137e0:	mov	r5, #0
   137e4:	str	r1, [fp, #-72]	; 0xffffffb8
   137e8:	beq	129b8 <__assert_fail@plt+0x1930>
   137ec:	b	138c4 <__assert_fail@plt+0x283c>
   137f0:	ldr	r7, [fp, #-64]	; 0xffffffc0
   137f4:	ldr	r2, [sp, #84]	; 0x54
   137f8:	b	13820 <__assert_fail@plt+0x2798>
   137fc:	ldr	ip, [fp, #-84]	; 0xffffffac
   13800:	mov	r2, #1
   13804:	mov	lr, r4
   13808:	ldr	r7, [fp, #-64]	; 0xffffffc0
   1380c:	b	13820 <__assert_fail@plt+0x2798>
   13810:	ldr	r6, [sp, #80]	; 0x50
   13814:	ldr	ip, [fp, #-84]	; 0xffffffac
   13818:	ldr	r2, [sp, #84]	; 0x54
   1381c:	mov	r7, #2
   13820:	mov	r0, #0
   13824:	ldr	r1, [fp, #12]
   13828:	tst	r2, #1
   1382c:	mov	r2, r7
   13830:	mov	r3, lr
   13834:	str	r0, [sp, #8]
   13838:	ldr	r0, [sp, #72]	; 0x48
   1383c:	movwne	r2, #4
   13840:	cmp	r7, #2
   13844:	movne	r2, r7
   13848:	str	r2, [sp]
   1384c:	mov	r2, ip
   13850:	bic	r1, r1, #2
   13854:	str	r0, [sp, #12]
   13858:	ldr	r0, [sp, #76]	; 0x4c
   1385c:	str	r1, [sp, #4]
   13860:	mov	r1, sl
   13864:	str	r0, [sp, #16]
   13868:	mov	r0, r6
   1386c:	bl	12938 <__assert_fail@plt+0x18b0>
   13870:	mov	r8, r0
   13874:	b	1391c <__assert_fail@plt+0x2894>
   13878:	ldr	r2, [sp, #84]	; 0x54
   1387c:	b	13820 <__assert_fail@plt+0x2798>
   13880:	mov	r0, #5
   13884:	ldr	r1, [sp, #56]	; 0x38
   13888:	ldr	r2, [fp, #-84]	; 0xffffffac
   1388c:	mov	r3, r9
   13890:	str	r0, [sp]
   13894:	ldr	r0, [fp, #12]
   13898:	str	r0, [sp, #4]
   1389c:	ldr	r0, [fp, #16]
   138a0:	str	r0, [sp, #8]
   138a4:	ldr	r0, [sp, #72]	; 0x48
   138a8:	str	r0, [sp, #12]
   138ac:	ldr	r0, [sp, #76]	; 0x4c
   138b0:	str	r0, [sp, #16]
   138b4:	ldr	r0, [sp, #80]	; 0x50
   138b8:	b	1386c <__assert_fail@plt+0x27e4>
   138bc:	mov	r0, #0
   138c0:	str	r0, [fp, #-72]	; 0xffffffb8
   138c4:	ldr	r1, [sp, #92]	; 0x5c
   138c8:	cmp	r1, #0
   138cc:	beq	1390c <__assert_fail@plt+0x2884>
   138d0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   138d4:	ldr	r2, [sp, #80]	; 0x50
   138d8:	tst	r0, #1
   138dc:	bne	13910 <__assert_fail@plt+0x2888>
   138e0:	ldrb	r0, [r1]
   138e4:	cmp	r0, #0
   138e8:	beq	13910 <__assert_fail@plt+0x2888>
   138ec:	add	r1, r1, #1
   138f0:	cmp	r8, sl
   138f4:	strbcc	r0, [r2, r8]
   138f8:	add	r8, r8, #1
   138fc:	ldrb	r0, [r1], #1
   13900:	cmp	r0, #0
   13904:	bne	138f0 <__assert_fail@plt+0x2868>
   13908:	b	13910 <__assert_fail@plt+0x2888>
   1390c:	ldr	r2, [sp, #80]	; 0x50
   13910:	cmp	r8, sl
   13914:	movcc	r0, #0
   13918:	strbcc	r0, [r2, r8]
   1391c:	mov	r0, r8
   13920:	sub	sp, fp, #28
   13924:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13928:	mov	r2, #1
   1392c:	b	13808 <__assert_fail@plt+0x2780>
   13930:	ldr	r2, [sp, #84]	; 0x54
   13934:	mov	r7, #5
   13938:	b	13820 <__assert_fail@plt+0x2798>
   1393c:	bl	1107c <abort@plt>
   13940:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13944:	add	fp, sp, #28
   13948:	sub	sp, sp, #28
   1394c:	movw	r5, #33128	; 0x8168
   13950:	cmp	r2, #0
   13954:	mov	r4, r1
   13958:	mov	r7, r0
   1395c:	str	r0, [sp, #20]
   13960:	movt	r5, #2
   13964:	movne	r5, r2
   13968:	bl	10fa4 <__errno_location@plt>
   1396c:	mov	sl, r0
   13970:	ldm	r5, {r0, r1}
   13974:	ldr	r2, [r5, #40]	; 0x28
   13978:	ldr	r3, [r5, #44]	; 0x2c
   1397c:	add	r9, r5, #8
   13980:	ldr	r6, [sl]
   13984:	orr	r8, r1, #1
   13988:	mov	r1, #0
   1398c:	str	r6, [sp, #24]
   13990:	stm	sp, {r0, r8, r9}
   13994:	str	r2, [sp, #12]
   13998:	str	r3, [sp, #16]
   1399c:	mov	r0, #0
   139a0:	mov	r2, r7
   139a4:	mov	r3, r4
   139a8:	mov	r6, r4
   139ac:	bl	12938 <__assert_fail@plt+0x18b0>
   139b0:	add	r7, r0, #1
   139b4:	mov	r0, r7
   139b8:	bl	14b50 <__assert_fail@plt+0x3ac8>
   139bc:	mov	r4, r0
   139c0:	ldr	r0, [r5]
   139c4:	ldr	r2, [r5, #44]	; 0x2c
   139c8:	ldr	r1, [r5, #40]	; 0x28
   139cc:	mov	r3, r6
   139d0:	stm	sp, {r0, r8, r9}
   139d4:	str	r2, [sp, #16]
   139d8:	str	r1, [sp, #12]
   139dc:	mov	r0, r4
   139e0:	mov	r1, r7
   139e4:	ldr	r2, [sp, #20]
   139e8:	bl	12938 <__assert_fail@plt+0x18b0>
   139ec:	ldr	r0, [sp, #24]
   139f0:	str	r0, [sl]
   139f4:	mov	r0, r4
   139f8:	sub	sp, fp, #28
   139fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13a00:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13a04:	add	fp, sp, #28
   13a08:	sub	sp, sp, #36	; 0x24
   13a0c:	movw	r8, #33128	; 0x8168
   13a10:	cmp	r3, #0
   13a14:	mov	r4, r2
   13a18:	str	r2, [sp, #24]
   13a1c:	mov	r5, r1
   13a20:	mov	r6, r0
   13a24:	str	r0, [sp, #20]
   13a28:	movt	r8, #2
   13a2c:	movne	r8, r3
   13a30:	bl	10fa4 <__errno_location@plt>
   13a34:	str	r0, [sp, #28]
   13a38:	cmp	r4, #0
   13a3c:	add	sl, r8, #8
   13a40:	ldm	r8, {r3, r9}
   13a44:	ldr	r7, [r0]
   13a48:	ldr	r1, [r8, #40]	; 0x28
   13a4c:	ldr	r2, [r8, #44]	; 0x2c
   13a50:	mov	r0, #0
   13a54:	orreq	r9, r9, #1
   13a58:	str	r7, [sp, #32]
   13a5c:	mov	r7, r5
   13a60:	stm	sp, {r3, r9, sl}
   13a64:	str	r1, [sp, #12]
   13a68:	str	r2, [sp, #16]
   13a6c:	mov	r1, #0
   13a70:	mov	r2, r6
   13a74:	mov	r3, r5
   13a78:	bl	12938 <__assert_fail@plt+0x18b0>
   13a7c:	add	r4, r0, #1
   13a80:	mov	r5, r0
   13a84:	mov	r0, r4
   13a88:	bl	14b50 <__assert_fail@plt+0x3ac8>
   13a8c:	mov	r6, r0
   13a90:	ldr	r0, [r8]
   13a94:	ldr	r2, [r8, #44]	; 0x2c
   13a98:	ldr	r1, [r8, #40]	; 0x28
   13a9c:	mov	r3, r7
   13aa0:	stm	sp, {r0, r9, sl}
   13aa4:	str	r2, [sp, #16]
   13aa8:	str	r1, [sp, #12]
   13aac:	mov	r0, r6
   13ab0:	mov	r1, r4
   13ab4:	ldr	r2, [sp, #20]
   13ab8:	bl	12938 <__assert_fail@plt+0x18b0>
   13abc:	ldr	r0, [sp, #24]
   13ac0:	ldr	r1, [sp, #32]
   13ac4:	ldr	r2, [sp, #28]
   13ac8:	cmp	r0, #0
   13acc:	str	r1, [r2]
   13ad0:	strne	r5, [r0]
   13ad4:	mov	r0, r6
   13ad8:	sub	sp, fp, #28
   13adc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ae0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13ae4:	add	fp, sp, #24
   13ae8:	movw	r5, #33012	; 0x80f4
   13aec:	movw	r8, #33008	; 0x80f0
   13af0:	movt	r5, #2
   13af4:	movt	r8, #2
   13af8:	ldr	r0, [r5]
   13afc:	ldr	r4, [r8]
   13b00:	cmp	r0, #2
   13b04:	blt	13b30 <__assert_fail@plt+0x2aa8>
   13b08:	add	r7, r4, #12
   13b0c:	mov	r6, #0
   13b10:	ldr	r0, [r7, r6, lsl #3]
   13b14:	bl	12630 <__assert_fail@plt+0x15a8>
   13b18:	ldr	r1, [r5]
   13b1c:	add	r2, r6, #2
   13b20:	add	r0, r6, #1
   13b24:	mov	r6, r0
   13b28:	cmp	r2, r1
   13b2c:	blt	13b10 <__assert_fail@plt+0x2a88>
   13b30:	ldr	r0, [r4, #4]
   13b34:	movw	r7, #33176	; 0x8198
   13b38:	movt	r7, #2
   13b3c:	cmp	r0, r7
   13b40:	beq	13b58 <__assert_fail@plt+0x2ad0>
   13b44:	bl	12630 <__assert_fail@plt+0x15a8>
   13b48:	movw	r0, #33016	; 0x80f8
   13b4c:	mov	r6, #256	; 0x100
   13b50:	movt	r0, #2
   13b54:	strd	r6, [r0]
   13b58:	movw	r6, #33016	; 0x80f8
   13b5c:	movt	r6, #2
   13b60:	cmp	r4, r6
   13b64:	beq	13b74 <__assert_fail@plt+0x2aec>
   13b68:	mov	r0, r4
   13b6c:	bl	12630 <__assert_fail@plt+0x15a8>
   13b70:	str	r6, [r8]
   13b74:	mov	r0, #1
   13b78:	str	r0, [r5]
   13b7c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13b80:	movw	r3, #33128	; 0x8168
   13b84:	mvn	r2, #0
   13b88:	movt	r3, #2
   13b8c:	b	13b90 <__assert_fail@plt+0x2b08>
   13b90:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13b94:	add	fp, sp, #28
   13b98:	sub	sp, sp, #44	; 0x2c
   13b9c:	mov	r7, r3
   13ba0:	str	r2, [sp, #36]	; 0x24
   13ba4:	str	r1, [sp, #32]
   13ba8:	mov	r5, r0
   13bac:	bl	10fa4 <__errno_location@plt>
   13bb0:	cmp	r5, #0
   13bb4:	blt	13d20 <__assert_fail@plt+0x2c98>
   13bb8:	cmn	r5, #-2147483647	; 0x80000001
   13bbc:	beq	13d20 <__assert_fail@plt+0x2c98>
   13bc0:	movw	r8, #33012	; 0x80f4
   13bc4:	movw	r4, #33008	; 0x80f0
   13bc8:	str	r0, [sp, #28]
   13bcc:	ldr	r0, [r0]
   13bd0:	movt	r8, #2
   13bd4:	movt	r4, #2
   13bd8:	ldr	r1, [r8]
   13bdc:	ldr	r6, [r4]
   13be0:	str	r0, [sp, #24]
   13be4:	cmp	r1, r5
   13be8:	ble	13bf4 <__assert_fail@plt+0x2b6c>
   13bec:	mov	sl, r6
   13bf0:	b	13c5c <__assert_fail@plt+0x2bd4>
   13bf4:	movw	r9, #33016	; 0x80f8
   13bf8:	mov	r0, #8
   13bfc:	add	r2, r5, #1
   13c00:	str	r1, [fp, #-32]	; 0xffffffe0
   13c04:	mvn	r3, #-2147483648	; 0x80000000
   13c08:	movt	r9, #2
   13c0c:	str	r0, [sp]
   13c10:	sub	r2, r2, r1
   13c14:	sub	r1, fp, #32
   13c18:	subs	r0, r6, r9
   13c1c:	movne	r0, r6
   13c20:	bl	14d50 <__assert_fail@plt+0x3cc8>
   13c24:	cmp	r6, r9
   13c28:	mov	sl, r0
   13c2c:	str	r0, [r4]
   13c30:	ldrdeq	r0, [r9]
   13c34:	stmeq	sl, {r0, r1}
   13c38:	ldr	r1, [r8]
   13c3c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13c40:	add	r0, sl, r1, lsl #3
   13c44:	sub	r1, r2, r1
   13c48:	lsl	r2, r1, #3
   13c4c:	mov	r1, #0
   13c50:	bl	10fbc <memset@plt>
   13c54:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13c58:	str	r0, [r8]
   13c5c:	mov	r9, sl
   13c60:	ldr	r6, [r9, r5, lsl #3]!
   13c64:	ldr	r4, [r9, #4]!
   13c68:	ldm	r7, {r0, r1}
   13c6c:	ldr	r2, [r7, #40]	; 0x28
   13c70:	ldr	r3, [r7, #44]	; 0x2c
   13c74:	orr	r8, r1, #1
   13c78:	add	r1, r7, #8
   13c7c:	stm	sp, {r0, r8}
   13c80:	add	r0, sp, #8
   13c84:	str	r1, [sp, #20]
   13c88:	stm	r0, {r1, r2, r3}
   13c8c:	mov	r0, r4
   13c90:	mov	r1, r6
   13c94:	ldr	r2, [sp, #32]
   13c98:	ldr	r3, [sp, #36]	; 0x24
   13c9c:	bl	12938 <__assert_fail@plt+0x18b0>
   13ca0:	cmp	r6, r0
   13ca4:	bhi	13d08 <__assert_fail@plt+0x2c80>
   13ca8:	add	r6, r0, #1
   13cac:	movw	r0, #33176	; 0x8198
   13cb0:	movt	r0, #2
   13cb4:	str	r6, [sl, r5, lsl #3]
   13cb8:	cmp	r4, r0
   13cbc:	beq	13cc8 <__assert_fail@plt+0x2c40>
   13cc0:	mov	r0, r4
   13cc4:	bl	12630 <__assert_fail@plt+0x15a8>
   13cc8:	mov	r0, r6
   13ccc:	bl	14b50 <__assert_fail@plt+0x3ac8>
   13cd0:	str	r0, [r9]
   13cd4:	mov	r4, r0
   13cd8:	add	r3, sp, #8
   13cdc:	ldr	r0, [r7]
   13ce0:	ldr	r1, [r7, #40]	; 0x28
   13ce4:	ldr	r2, [r7, #44]	; 0x2c
   13ce8:	stm	sp, {r0, r8}
   13cec:	ldr	r0, [sp, #20]
   13cf0:	stm	r3, {r0, r1, r2}
   13cf4:	mov	r0, r4
   13cf8:	mov	r1, r6
   13cfc:	ldr	r2, [sp, #32]
   13d00:	ldr	r3, [sp, #36]	; 0x24
   13d04:	bl	12938 <__assert_fail@plt+0x18b0>
   13d08:	ldr	r0, [sp, #28]
   13d0c:	ldr	r1, [sp, #24]
   13d10:	str	r1, [r0]
   13d14:	mov	r0, r4
   13d18:	sub	sp, fp, #28
   13d1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13d20:	bl	1107c <abort@plt>
   13d24:	movw	r3, #33128	; 0x8168
   13d28:	movt	r3, #2
   13d2c:	b	13b90 <__assert_fail@plt+0x2b08>
   13d30:	movw	r3, #33128	; 0x8168
   13d34:	mov	r1, r0
   13d38:	mov	r0, #0
   13d3c:	mvn	r2, #0
   13d40:	movt	r3, #2
   13d44:	b	13b90 <__assert_fail@plt+0x2b08>
   13d48:	movw	r3, #33128	; 0x8168
   13d4c:	mov	r2, r1
   13d50:	mov	r1, r0
   13d54:	mov	r0, #0
   13d58:	movt	r3, #2
   13d5c:	b	13b90 <__assert_fail@plt+0x2b08>
   13d60:	push	{fp, lr}
   13d64:	mov	fp, sp
   13d68:	sub	sp, sp, #48	; 0x30
   13d6c:	vmov.i32	q8, #0	; 0x00000000
   13d70:	mov	ip, #32
   13d74:	mov	r3, sp
   13d78:	mov	lr, r2
   13d7c:	cmp	r1, #10
   13d80:	add	r2, r3, #16
   13d84:	vst1.64	{d16-d17}, [r3], ip
   13d88:	vst1.64	{d16-d17}, [r3]
   13d8c:	vst1.64	{d16-d17}, [r2]
   13d90:	beq	13db0 <__assert_fail@plt+0x2d28>
   13d94:	str	r1, [sp]
   13d98:	mov	r3, sp
   13d9c:	mov	r1, lr
   13da0:	mvn	r2, #0
   13da4:	bl	13b90 <__assert_fail@plt+0x2b08>
   13da8:	mov	sp, fp
   13dac:	pop	{fp, pc}
   13db0:	bl	1107c <abort@plt>
   13db4:	push	{r4, sl, fp, lr}
   13db8:	add	fp, sp, #8
   13dbc:	sub	sp, sp, #48	; 0x30
   13dc0:	mov	ip, r3
   13dc4:	mov	r3, sp
   13dc8:	vmov.i32	q8, #0	; 0x00000000
   13dcc:	mov	lr, #32
   13dd0:	cmp	r1, #10
   13dd4:	add	r4, r3, #16
   13dd8:	vst1.64	{d16-d17}, [r3], lr
   13ddc:	vst1.64	{d16-d17}, [r3]
   13de0:	vst1.64	{d16-d17}, [r4]
   13de4:	beq	13e04 <__assert_fail@plt+0x2d7c>
   13de8:	str	r1, [sp]
   13dec:	mov	r1, r2
   13df0:	mov	r3, sp
   13df4:	mov	r2, ip
   13df8:	bl	13b90 <__assert_fail@plt+0x2b08>
   13dfc:	sub	sp, fp, #8
   13e00:	pop	{r4, sl, fp, pc}
   13e04:	bl	1107c <abort@plt>
   13e08:	push	{fp, lr}
   13e0c:	mov	fp, sp
   13e10:	sub	sp, sp, #48	; 0x30
   13e14:	mov	r3, sp
   13e18:	vmov.i32	q8, #0	; 0x00000000
   13e1c:	mov	ip, #32
   13e20:	cmp	r0, #10
   13e24:	add	r2, r3, #16
   13e28:	vst1.64	{d16-d17}, [r3], ip
   13e2c:	vst1.64	{d16-d17}, [r3]
   13e30:	vst1.64	{d16-d17}, [r2]
   13e34:	beq	13e54 <__assert_fail@plt+0x2dcc>
   13e38:	str	r0, [sp]
   13e3c:	mov	r3, sp
   13e40:	mov	r0, #0
   13e44:	mvn	r2, #0
   13e48:	bl	13b90 <__assert_fail@plt+0x2b08>
   13e4c:	mov	sp, fp
   13e50:	pop	{fp, pc}
   13e54:	bl	1107c <abort@plt>
   13e58:	push	{fp, lr}
   13e5c:	mov	fp, sp
   13e60:	sub	sp, sp, #48	; 0x30
   13e64:	mov	r3, sp
   13e68:	vmov.i32	q8, #0	; 0x00000000
   13e6c:	mov	ip, #32
   13e70:	cmp	r0, #10
   13e74:	add	lr, r3, #16
   13e78:	vst1.64	{d16-d17}, [r3], ip
   13e7c:	vst1.64	{d16-d17}, [r3]
   13e80:	vst1.64	{d16-d17}, [lr]
   13e84:	beq	13ea0 <__assert_fail@plt+0x2e18>
   13e88:	str	r0, [sp]
   13e8c:	mov	r3, sp
   13e90:	mov	r0, #0
   13e94:	bl	13b90 <__assert_fail@plt+0x2b08>
   13e98:	mov	sp, fp
   13e9c:	pop	{fp, pc}
   13ea0:	bl	1107c <abort@plt>
   13ea4:	push	{r4, sl, fp, lr}
   13ea8:	add	fp, sp, #8
   13eac:	sub	sp, sp, #48	; 0x30
   13eb0:	mov	lr, r0
   13eb4:	movw	r0, #33128	; 0x8168
   13eb8:	mov	r3, #32
   13ebc:	mov	ip, r1
   13ec0:	mov	r4, #1
   13ec4:	movt	r0, #2
   13ec8:	add	r1, r0, #16
   13ecc:	vld1.64	{d16-d17}, [r0], r3
   13ed0:	mov	r3, sp
   13ed4:	vld1.64	{d18-d19}, [r1]
   13ed8:	add	r1, r3, #16
   13edc:	vld1.64	{d20-d21}, [r0]
   13ee0:	add	r0, r3, #32
   13ee4:	vst1.64	{d18-d19}, [r1]
   13ee8:	mov	r1, r3
   13eec:	vst1.64	{d20-d21}, [r0]
   13ef0:	mov	r0, #28
   13ef4:	and	r0, r0, r2, lsr #3
   13ef8:	and	r2, r2, #31
   13efc:	vst1.64	{d16-d17}, [r1], r0
   13f00:	ldr	r0, [r1, #8]
   13f04:	bic	r4, r4, r0, lsr r2
   13f08:	eor	r0, r0, r4, lsl r2
   13f0c:	mov	r2, ip
   13f10:	str	r0, [r1, #8]
   13f14:	mov	r0, #0
   13f18:	mov	r1, lr
   13f1c:	bl	13b90 <__assert_fail@plt+0x2b08>
   13f20:	sub	sp, fp, #8
   13f24:	pop	{r4, sl, fp, pc}
   13f28:	push	{fp, lr}
   13f2c:	mov	fp, sp
   13f30:	sub	sp, sp, #48	; 0x30
   13f34:	mov	ip, r0
   13f38:	movw	r0, #33128	; 0x8168
   13f3c:	mov	r3, #32
   13f40:	movt	r0, #2
   13f44:	add	r2, r0, #16
   13f48:	vld1.64	{d16-d17}, [r0], r3
   13f4c:	mov	r3, sp
   13f50:	vld1.64	{d18-d19}, [r2]
   13f54:	add	r2, r3, #16
   13f58:	vld1.64	{d20-d21}, [r0]
   13f5c:	add	r0, r3, #32
   13f60:	vst1.64	{d18-d19}, [r2]
   13f64:	mov	r2, r3
   13f68:	vst1.64	{d20-d21}, [r0]
   13f6c:	mov	r0, #28
   13f70:	and	r0, r0, r1, lsr #3
   13f74:	and	r1, r1, #31
   13f78:	vst1.64	{d16-d17}, [r2], r0
   13f7c:	mov	r0, #1
   13f80:	ldr	lr, [r2, #8]
   13f84:	bic	r0, r0, lr, lsr r1
   13f88:	eor	r0, lr, r0, lsl r1
   13f8c:	mov	r1, ip
   13f90:	str	r0, [r2, #8]
   13f94:	mov	r0, #0
   13f98:	mvn	r2, #0
   13f9c:	bl	13b90 <__assert_fail@plt+0x2b08>
   13fa0:	mov	sp, fp
   13fa4:	pop	{fp, pc}
   13fa8:	push	{fp, lr}
   13fac:	mov	fp, sp
   13fb0:	sub	sp, sp, #48	; 0x30
   13fb4:	movw	r2, #33128	; 0x8168
   13fb8:	mov	r3, #32
   13fbc:	mov	r1, r0
   13fc0:	movt	r2, #2
   13fc4:	add	r0, r2, #16
   13fc8:	vld1.64	{d16-d17}, [r2], r3
   13fcc:	mov	r3, sp
   13fd0:	vld1.64	{d18-d19}, [r0]
   13fd4:	add	r0, r3, #16
   13fd8:	vld1.64	{d20-d21}, [r2]
   13fdc:	mov	r2, r3
   13fe0:	vst1.64	{d18-d19}, [r0]
   13fe4:	add	r0, r3, #32
   13fe8:	vst1.64	{d20-d21}, [r0]
   13fec:	mov	r0, #12
   13ff0:	vst1.64	{d16-d17}, [r2], r0
   13ff4:	ldr	r0, [r2]
   13ff8:	orr	r0, r0, #67108864	; 0x4000000
   13ffc:	str	r0, [r2]
   14000:	mov	r0, #0
   14004:	mvn	r2, #0
   14008:	bl	13b90 <__assert_fail@plt+0x2b08>
   1400c:	mov	sp, fp
   14010:	pop	{fp, pc}
   14014:	push	{fp, lr}
   14018:	mov	fp, sp
   1401c:	sub	sp, sp, #48	; 0x30
   14020:	mov	ip, r1
   14024:	mov	r1, r0
   14028:	movw	r0, #33128	; 0x8168
   1402c:	mov	r3, #32
   14030:	movt	r0, #2
   14034:	add	r2, r0, #16
   14038:	vld1.64	{d16-d17}, [r0], r3
   1403c:	mov	r3, sp
   14040:	vld1.64	{d18-d19}, [r2]
   14044:	add	r2, r3, #16
   14048:	vld1.64	{d20-d21}, [r0]
   1404c:	add	r0, r3, #32
   14050:	vst1.64	{d18-d19}, [r2]
   14054:	mov	r2, r3
   14058:	vst1.64	{d20-d21}, [r0]
   1405c:	mov	r0, #12
   14060:	vst1.64	{d16-d17}, [r2], r0
   14064:	ldr	r0, [r2]
   14068:	orr	r0, r0, #67108864	; 0x4000000
   1406c:	str	r0, [r2]
   14070:	mov	r0, #0
   14074:	mov	r2, ip
   14078:	bl	13b90 <__assert_fail@plt+0x2b08>
   1407c:	mov	sp, fp
   14080:	pop	{fp, pc}
   14084:	push	{r4, sl, fp, lr}
   14088:	add	fp, sp, #8
   1408c:	sub	sp, sp, #96	; 0x60
   14090:	mov	ip, r2
   14094:	mov	r2, sp
   14098:	vmov.i32	q8, #0	; 0x00000000
   1409c:	mov	r4, #28
   140a0:	cmp	r1, #10
   140a4:	mov	r3, r2
   140a8:	add	lr, r2, #16
   140ac:	vst1.64	{d16-d17}, [r3], r4
   140b0:	vst1.64	{d16-d17}, [lr]
   140b4:	vst1.32	{d16-d17}, [r3]
   140b8:	beq	14108 <__assert_fail@plt+0x3080>
   140bc:	vld1.64	{d16-d17}, [r2], r4
   140c0:	vld1.64	{d18-d19}, [lr]
   140c4:	add	r3, sp, #48	; 0x30
   140c8:	add	r4, r3, #4
   140cc:	vld1.32	{d20-d21}, [r2]
   140d0:	add	r2, r3, #20
   140d4:	vst1.32	{d16-d17}, [r4]
   140d8:	vst1.32	{d18-d19}, [r2]
   140dc:	add	r2, r3, #32
   140e0:	vst1.32	{d20-d21}, [r2]
   140e4:	str	r1, [sp, #48]	; 0x30
   140e8:	mvn	r2, #0
   140ec:	ldr	r1, [sp, #60]	; 0x3c
   140f0:	orr	r1, r1, #67108864	; 0x4000000
   140f4:	str	r1, [sp, #60]	; 0x3c
   140f8:	mov	r1, ip
   140fc:	bl	13b90 <__assert_fail@plt+0x2b08>
   14100:	sub	sp, fp, #8
   14104:	pop	{r4, sl, fp, pc}
   14108:	bl	1107c <abort@plt>
   1410c:	push	{r4, r5, fp, lr}
   14110:	add	fp, sp, #8
   14114:	sub	sp, sp, #48	; 0x30
   14118:	mov	ip, r3
   1411c:	movw	r3, #33128	; 0x8168
   14120:	mov	lr, #32
   14124:	cmp	r1, #0
   14128:	mov	r5, sp
   1412c:	movt	r3, #2
   14130:	cmpne	r2, #0
   14134:	add	r4, r3, #16
   14138:	vld1.64	{d16-d17}, [r3], lr
   1413c:	vld1.64	{d18-d19}, [r4]
   14140:	add	r4, r5, #16
   14144:	vld1.64	{d20-d21}, [r3]
   14148:	vst1.64	{d16-d17}, [r5], lr
   1414c:	mov	r3, #10
   14150:	vst1.64	{d18-d19}, [r4]
   14154:	vst1.64	{d20-d21}, [r5]
   14158:	str	r3, [sp]
   1415c:	bne	14164 <__assert_fail@plt+0x30dc>
   14160:	bl	1107c <abort@plt>
   14164:	str	r2, [sp, #44]	; 0x2c
   14168:	str	r1, [sp, #40]	; 0x28
   1416c:	mov	r3, sp
   14170:	mov	r1, ip
   14174:	mvn	r2, #0
   14178:	bl	13b90 <__assert_fail@plt+0x2b08>
   1417c:	sub	sp, fp, #8
   14180:	pop	{r4, r5, fp, pc}
   14184:	push	{r4, r5, fp, lr}
   14188:	add	fp, sp, #8
   1418c:	sub	sp, sp, #48	; 0x30
   14190:	mov	lr, r3
   14194:	movw	r3, #33128	; 0x8168
   14198:	mov	ip, #32
   1419c:	cmp	r1, #0
   141a0:	mov	r5, sp
   141a4:	movt	r3, #2
   141a8:	cmpne	r2, #0
   141ac:	add	r4, r3, #16
   141b0:	vld1.64	{d16-d17}, [r3], ip
   141b4:	vld1.64	{d18-d19}, [r4]
   141b8:	add	r4, r5, #16
   141bc:	vld1.64	{d20-d21}, [r3]
   141c0:	vst1.64	{d16-d17}, [r5], ip
   141c4:	mov	r3, #10
   141c8:	vst1.64	{d18-d19}, [r4]
   141cc:	vst1.64	{d20-d21}, [r5]
   141d0:	str	r3, [sp]
   141d4:	bne	141dc <__assert_fail@plt+0x3154>
   141d8:	bl	1107c <abort@plt>
   141dc:	ldr	ip, [fp, #8]
   141e0:	str	r2, [sp, #44]	; 0x2c
   141e4:	str	r1, [sp, #40]	; 0x28
   141e8:	mov	r3, sp
   141ec:	mov	r1, lr
   141f0:	mov	r2, ip
   141f4:	bl	13b90 <__assert_fail@plt+0x2b08>
   141f8:	sub	sp, fp, #8
   141fc:	pop	{r4, r5, fp, pc}
   14200:	push	{r4, sl, fp, lr}
   14204:	add	fp, sp, #8
   14208:	sub	sp, sp, #48	; 0x30
   1420c:	mov	ip, r2
   14210:	movw	r2, #33128	; 0x8168
   14214:	mov	lr, #32
   14218:	cmp	r0, #0
   1421c:	mov	r4, sp
   14220:	movt	r2, #2
   14224:	cmpne	r1, #0
   14228:	add	r3, r2, #16
   1422c:	vld1.64	{d16-d17}, [r2], lr
   14230:	vld1.64	{d18-d19}, [r3]
   14234:	add	r3, r4, #16
   14238:	vld1.64	{d20-d21}, [r2]
   1423c:	vst1.64	{d16-d17}, [r4], lr
   14240:	mov	r2, #10
   14244:	vst1.64	{d18-d19}, [r3]
   14248:	vst1.64	{d20-d21}, [r4]
   1424c:	str	r2, [sp]
   14250:	bne	14258 <__assert_fail@plt+0x31d0>
   14254:	bl	1107c <abort@plt>
   14258:	str	r1, [sp, #44]	; 0x2c
   1425c:	str	r0, [sp, #40]	; 0x28
   14260:	mov	r3, sp
   14264:	mov	r0, #0
   14268:	mov	r1, ip
   1426c:	mvn	r2, #0
   14270:	bl	13b90 <__assert_fail@plt+0x2b08>
   14274:	sub	sp, fp, #8
   14278:	pop	{r4, sl, fp, pc}
   1427c:	push	{r4, r5, fp, lr}
   14280:	add	fp, sp, #8
   14284:	sub	sp, sp, #48	; 0x30
   14288:	mov	lr, r2
   1428c:	movw	r2, #33128	; 0x8168
   14290:	mov	ip, r3
   14294:	mov	r3, #32
   14298:	cmp	r0, #0
   1429c:	mov	r5, sp
   142a0:	movt	r2, #2
   142a4:	cmpne	r1, #0
   142a8:	add	r4, r2, #16
   142ac:	vld1.64	{d16-d17}, [r2], r3
   142b0:	vld1.64	{d18-d19}, [r4]
   142b4:	add	r4, r5, #16
   142b8:	vld1.64	{d20-d21}, [r2]
   142bc:	vst1.64	{d16-d17}, [r5], r3
   142c0:	mov	r2, #10
   142c4:	vst1.64	{d18-d19}, [r4]
   142c8:	vst1.64	{d20-d21}, [r5]
   142cc:	str	r2, [sp]
   142d0:	bne	142d8 <__assert_fail@plt+0x3250>
   142d4:	bl	1107c <abort@plt>
   142d8:	str	r1, [sp, #44]	; 0x2c
   142dc:	str	r0, [sp, #40]	; 0x28
   142e0:	mov	r3, sp
   142e4:	mov	r0, #0
   142e8:	mov	r1, lr
   142ec:	mov	r2, ip
   142f0:	bl	13b90 <__assert_fail@plt+0x2b08>
   142f4:	sub	sp, fp, #8
   142f8:	pop	{r4, r5, fp, pc}
   142fc:	movw	r3, #33024	; 0x8100
   14300:	movt	r3, #2
   14304:	b	13b90 <__assert_fail@plt+0x2b08>
   14308:	movw	r3, #33024	; 0x8100
   1430c:	mov	r2, r1
   14310:	mov	r1, r0
   14314:	mov	r0, #0
   14318:	movt	r3, #2
   1431c:	b	13b90 <__assert_fail@plt+0x2b08>
   14320:	movw	r3, #33024	; 0x8100
   14324:	mvn	r2, #0
   14328:	movt	r3, #2
   1432c:	b	13b90 <__assert_fail@plt+0x2b08>
   14330:	movw	r3, #33024	; 0x8100
   14334:	mov	r1, r0
   14338:	mov	r0, #0
   1433c:	mvn	r2, #0
   14340:	movt	r3, #2
   14344:	b	13b90 <__assert_fail@plt+0x2b08>
   14348:	push	{r4, r5, fp, lr}
   1434c:	add	fp, sp, #8
   14350:	mov	r5, r0
   14354:	mov	r4, r1
   14358:	mov	r0, #0
   1435c:	mov	r2, #5
   14360:	mov	r1, r5
   14364:	bl	10ec0 <dcgettext@plt>
   14368:	cmp	r0, r5
   1436c:	popne	{r4, r5, fp, pc}
   14370:	bl	16b38 <__assert_fail@plt+0x5ab0>
   14374:	ldrb	r1, [r0]
   14378:	and	r1, r1, #223	; 0xdf
   1437c:	cmp	r1, #71	; 0x47
   14380:	beq	143e8 <__assert_fail@plt+0x3360>
   14384:	cmp	r1, #85	; 0x55
   14388:	bne	1440c <__assert_fail@plt+0x3384>
   1438c:	ldrb	r1, [r0, #1]
   14390:	and	r1, r1, #223	; 0xdf
   14394:	cmp	r1, #84	; 0x54
   14398:	bne	1440c <__assert_fail@plt+0x3384>
   1439c:	ldrb	r1, [r0, #2]
   143a0:	and	r1, r1, #223	; 0xdf
   143a4:	cmp	r1, #70	; 0x46
   143a8:	ldrbeq	r1, [r0, #3]
   143ac:	cmpeq	r1, #45	; 0x2d
   143b0:	bne	1440c <__assert_fail@plt+0x3384>
   143b4:	ldrb	r1, [r0, #4]
   143b8:	cmp	r1, #56	; 0x38
   143bc:	ldrbeq	r0, [r0, #5]
   143c0:	cmpeq	r0, #0
   143c4:	bne	1440c <__assert_fail@plt+0x3384>
   143c8:	ldrb	r1, [r5]
   143cc:	movw	r2, #30653	; 0x77bd
   143d0:	movw	r0, #30657	; 0x77c1
   143d4:	movt	r2, #1
   143d8:	movt	r0, #1
   143dc:	cmp	r1, #96	; 0x60
   143e0:	moveq	r0, r2
   143e4:	pop	{r4, r5, fp, pc}
   143e8:	ldrb	r1, [r0, #1]
   143ec:	and	r1, r1, #223	; 0xdf
   143f0:	cmp	r1, #66	; 0x42
   143f4:	bne	1440c <__assert_fail@plt+0x3384>
   143f8:	ldrb	r1, [r0, #2]
   143fc:	cmp	r1, #49	; 0x31
   14400:	ldrbeq	r1, [r0, #3]
   14404:	cmpeq	r1, #56	; 0x38
   14408:	beq	14428 <__assert_fail@plt+0x33a0>
   1440c:	movw	r1, #30647	; 0x77b7
   14410:	movw	r0, #30651	; 0x77bb
   14414:	cmp	r4, #9
   14418:	movt	r1, #1
   1441c:	movt	r0, #1
   14420:	moveq	r0, r1
   14424:	pop	{r4, r5, fp, pc}
   14428:	ldrb	r1, [r0, #4]
   1442c:	cmp	r1, #48	; 0x30
   14430:	ldrbeq	r1, [r0, #5]
   14434:	cmpeq	r1, #51	; 0x33
   14438:	bne	1440c <__assert_fail@plt+0x3384>
   1443c:	ldrb	r1, [r0, #6]
   14440:	cmp	r1, #48	; 0x30
   14444:	ldrbeq	r0, [r0, #7]
   14448:	cmpeq	r0, #0
   1444c:	bne	1440c <__assert_fail@plt+0x3384>
   14450:	ldrb	r1, [r5]
   14454:	movw	r2, #30661	; 0x77c5
   14458:	movw	r0, #30665	; 0x77c9
   1445c:	movt	r2, #1
   14460:	movt	r0, #1
   14464:	b	143dc <__assert_fail@plt+0x3354>
   14468:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1446c:	add	fp, sp, #24
   14470:	sub	sp, sp, #32
   14474:	ldr	r6, [fp, #12]
   14478:	ldr	r7, [fp, #8]
   1447c:	mov	r4, r2
   14480:	mov	r8, r0
   14484:	cmp	r1, #0
   14488:	beq	144b0 <__assert_fail@plt+0x3428>
   1448c:	movw	r2, #30752	; 0x7820
   14490:	mov	r5, r1
   14494:	str	r3, [sp, #4]
   14498:	str	r4, [sp]
   1449c:	mov	r0, r8
   144a0:	mov	r1, #1
   144a4:	movt	r2, #1
   144a8:	mov	r3, r5
   144ac:	b	144c8 <__assert_fail@plt+0x3440>
   144b0:	movw	r2, #30764	; 0x782c
   144b4:	str	r3, [sp]
   144b8:	mov	r0, r8
   144bc:	mov	r1, #1
   144c0:	mov	r3, r4
   144c4:	movt	r2, #1
   144c8:	bl	10fe0 <__fprintf_chk@plt>
   144cc:	movw	r1, #30771	; 0x7833
   144d0:	mov	r0, #0
   144d4:	mov	r2, #5
   144d8:	movt	r1, #1
   144dc:	bl	10ec0 <dcgettext@plt>
   144e0:	movw	r2, #31489	; 0x7b01
   144e4:	mov	r3, r0
   144e8:	movw	r0, #2022	; 0x7e6
   144ec:	mov	r1, #1
   144f0:	str	r0, [sp]
   144f4:	movt	r2, #1
   144f8:	mov	r0, r8
   144fc:	bl	10fe0 <__fprintf_chk@plt>
   14500:	movw	r4, #29943	; 0x74f7
   14504:	mov	r1, r8
   14508:	movt	r4, #1
   1450c:	mov	r0, r4
   14510:	bl	10e30 <fputs_unlocked@plt>
   14514:	movw	r1, #30775	; 0x7837
   14518:	mov	r0, #0
   1451c:	mov	r2, #5
   14520:	movt	r1, #1
   14524:	bl	10ec0 <dcgettext@plt>
   14528:	movw	r3, #30946	; 0x78e2
   1452c:	mov	r2, r0
   14530:	mov	r0, r8
   14534:	mov	r1, #1
   14538:	movt	r3, #1
   1453c:	bl	10fe0 <__fprintf_chk@plt>
   14540:	mov	r0, r4
   14544:	mov	r1, r8
   14548:	bl	10e30 <fputs_unlocked@plt>
   1454c:	cmp	r6, #9
   14550:	bhi	1458c <__assert_fail@plt+0x3504>
   14554:	add	r0, pc, #0
   14558:	ldr	pc, [r0, r6, lsl #2]
   1455c:	andeq	r4, r1, r4, lsl #11
   14560:	muleq	r1, r8, r5
   14564:	andeq	r4, r1, r8, asr #11
   14568:	strdeq	r4, [r1], -r0
   1456c:	andeq	r4, r1, r8, lsl r6
   14570:	andeq	r4, r1, r0, asr #12
   14574:	andeq	r4, r1, r8, ror #12
   14578:	andeq	r4, r1, r0, lsr #13
   1457c:	andeq	r4, r1, r0, asr #14
   14580:	andeq	r4, r1, r8, ror #13
   14584:	sub	sp, fp, #24
   14588:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1458c:	movw	r1, #31299	; 0x7a43
   14590:	movt	r1, #1
   14594:	b	146f0 <__assert_fail@plt+0x3668>
   14598:	movw	r1, #30980	; 0x7904
   1459c:	mov	r0, #0
   145a0:	mov	r2, #5
   145a4:	movt	r1, #1
   145a8:	bl	10ec0 <dcgettext@plt>
   145ac:	ldr	r3, [r7]
   145b0:	mov	r2, r0
   145b4:	mov	r0, r8
   145b8:	mov	r1, #1
   145bc:	sub	sp, fp, #24
   145c0:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   145c4:	b	10fe0 <__fprintf_chk@plt>
   145c8:	movw	r1, #30996	; 0x7914
   145cc:	mov	r0, #0
   145d0:	mov	r2, #5
   145d4:	movt	r1, #1
   145d8:	bl	10ec0 <dcgettext@plt>
   145dc:	mov	r2, r0
   145e0:	ldr	r3, [r7]
   145e4:	ldr	r0, [r7, #4]
   145e8:	str	r0, [sp]
   145ec:	b	146dc <__assert_fail@plt+0x3654>
   145f0:	movw	r1, #31019	; 0x792b
   145f4:	mov	r0, #0
   145f8:	mov	r2, #5
   145fc:	movt	r1, #1
   14600:	bl	10ec0 <dcgettext@plt>
   14604:	ldr	r3, [r7]
   14608:	mov	r2, r0
   1460c:	ldmib	r7, {r0, r1}
   14610:	stm	sp, {r0, r1}
   14614:	b	146dc <__assert_fail@plt+0x3654>
   14618:	movw	r1, #31047	; 0x7947
   1461c:	mov	r0, #0
   14620:	mov	r2, #5
   14624:	movt	r1, #1
   14628:	bl	10ec0 <dcgettext@plt>
   1462c:	ldr	r3, [r7]
   14630:	mov	r2, r0
   14634:	ldmib	r7, {r0, r1, r7}
   14638:	stm	sp, {r0, r1, r7}
   1463c:	b	146dc <__assert_fail@plt+0x3654>
   14640:	movw	r1, #31079	; 0x7967
   14644:	mov	r0, #0
   14648:	mov	r2, #5
   1464c:	movt	r1, #1
   14650:	bl	10ec0 <dcgettext@plt>
   14654:	ldr	r3, [r7]
   14658:	mov	r2, r0
   1465c:	ldmib	r7, {r0, r1, r6, r7}
   14660:	stm	sp, {r0, r1, r6, r7}
   14664:	b	146dc <__assert_fail@plt+0x3654>
   14668:	movw	r1, #31115	; 0x798b
   1466c:	mov	r0, #0
   14670:	mov	r2, #5
   14674:	movt	r1, #1
   14678:	bl	10ec0 <dcgettext@plt>
   1467c:	ldr	r3, [r7]
   14680:	mov	r2, r0
   14684:	ldmib	r7, {r0, r1, r6}
   14688:	ldr	r5, [r7, #16]
   1468c:	ldr	r7, [r7, #20]
   14690:	stm	sp, {r0, r1, r6}
   14694:	str	r5, [sp, #12]
   14698:	str	r7, [sp, #16]
   1469c:	b	146dc <__assert_fail@plt+0x3654>
   146a0:	movw	r1, #31155	; 0x79b3
   146a4:	mov	r0, #0
   146a8:	mov	r2, #5
   146ac:	movt	r1, #1
   146b0:	bl	10ec0 <dcgettext@plt>
   146b4:	ldr	r3, [r7]
   146b8:	mov	r2, r0
   146bc:	ldmib	r7, {r0, r1, r6}
   146c0:	ldr	r5, [r7, #16]
   146c4:	ldr	r4, [r7, #20]
   146c8:	ldr	r7, [r7, #24]
   146cc:	stm	sp, {r0, r1, r6}
   146d0:	str	r5, [sp, #12]
   146d4:	str	r4, [sp, #16]
   146d8:	str	r7, [sp, #20]
   146dc:	mov	r0, r8
   146e0:	mov	r1, #1
   146e4:	b	14790 <__assert_fail@plt+0x3708>
   146e8:	movw	r1, #31247	; 0x7a0f
   146ec:	movt	r1, #1
   146f0:	mov	r0, #0
   146f4:	mov	r2, #5
   146f8:	bl	10ec0 <dcgettext@plt>
   146fc:	mov	ip, r0
   14700:	ldr	r3, [r7]
   14704:	ldr	r0, [r7, #4]
   14708:	ldr	r1, [r7, #8]
   1470c:	ldr	r6, [r7, #12]
   14710:	ldr	r5, [r7, #16]
   14714:	ldr	r4, [r7, #20]
   14718:	ldr	r2, [r7, #24]
   1471c:	ldr	lr, [r7, #28]
   14720:	ldr	r7, [r7, #32]
   14724:	stm	sp, {r0, r1, r6}
   14728:	str	r5, [sp, #12]
   1472c:	str	r4, [sp, #16]
   14730:	str	r2, [sp, #20]
   14734:	str	lr, [sp, #24]
   14738:	str	r7, [sp, #28]
   1473c:	b	14784 <__assert_fail@plt+0x36fc>
   14740:	movw	r1, #31199	; 0x79df
   14744:	mov	r0, #0
   14748:	mov	r2, #5
   1474c:	movt	r1, #1
   14750:	bl	10ec0 <dcgettext@plt>
   14754:	mov	ip, r0
   14758:	ldr	r3, [r7]
   1475c:	ldmib	r7, {r0, r1, r6}
   14760:	ldr	r5, [r7, #16]
   14764:	ldr	r4, [r7, #20]
   14768:	ldr	r2, [r7, #24]
   1476c:	ldr	r7, [r7, #28]
   14770:	stm	sp, {r0, r1, r6}
   14774:	str	r5, [sp, #12]
   14778:	str	r4, [sp, #16]
   1477c:	str	r2, [sp, #20]
   14780:	str	r7, [sp, #24]
   14784:	mov	r0, r8
   14788:	mov	r1, #1
   1478c:	mov	r2, ip
   14790:	bl	10fe0 <__fprintf_chk@plt>
   14794:	sub	sp, fp, #24
   14798:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1479c:	push	{r4, sl, fp, lr}
   147a0:	add	fp, sp, #8
   147a4:	sub	sp, sp, #8
   147a8:	ldr	ip, [fp, #8]
   147ac:	mov	lr, #0
   147b0:	ldr	r4, [ip, lr, lsl #2]
   147b4:	add	lr, lr, #1
   147b8:	cmp	r4, #0
   147bc:	bne	147b0 <__assert_fail@plt+0x3728>
   147c0:	sub	r4, lr, #1
   147c4:	str	ip, [sp]
   147c8:	str	r4, [sp, #4]
   147cc:	bl	14468 <__assert_fail@plt+0x33e0>
   147d0:	sub	sp, fp, #8
   147d4:	pop	{r4, sl, fp, pc}
   147d8:	push	{fp, lr}
   147dc:	mov	fp, sp
   147e0:	sub	sp, sp, #48	; 0x30
   147e4:	ldr	ip, [fp, #8]
   147e8:	ldr	lr, [ip]
   147ec:	cmp	lr, #0
   147f0:	str	lr, [sp, #8]
   147f4:	beq	14890 <__assert_fail@plt+0x3808>
   147f8:	ldr	lr, [ip, #4]
   147fc:	cmp	lr, #0
   14800:	str	lr, [sp, #12]
   14804:	beq	14898 <__assert_fail@plt+0x3810>
   14808:	ldr	lr, [ip, #8]
   1480c:	cmp	lr, #0
   14810:	str	lr, [sp, #16]
   14814:	beq	148a0 <__assert_fail@plt+0x3818>
   14818:	ldr	lr, [ip, #12]
   1481c:	cmp	lr, #0
   14820:	str	lr, [sp, #20]
   14824:	beq	148a8 <__assert_fail@plt+0x3820>
   14828:	ldr	lr, [ip, #16]
   1482c:	cmp	lr, #0
   14830:	str	lr, [sp, #24]
   14834:	beq	148b0 <__assert_fail@plt+0x3828>
   14838:	ldr	lr, [ip, #20]
   1483c:	cmp	lr, #0
   14840:	str	lr, [sp, #28]
   14844:	beq	148b8 <__assert_fail@plt+0x3830>
   14848:	ldr	lr, [ip, #24]
   1484c:	cmp	lr, #0
   14850:	str	lr, [sp, #32]
   14854:	beq	148c0 <__assert_fail@plt+0x3838>
   14858:	ldr	lr, [ip, #28]
   1485c:	cmp	lr, #0
   14860:	str	lr, [sp, #36]	; 0x24
   14864:	beq	148c8 <__assert_fail@plt+0x3840>
   14868:	ldr	lr, [ip, #32]
   1486c:	cmp	lr, #0
   14870:	str	lr, [sp, #40]	; 0x28
   14874:	beq	148d0 <__assert_fail@plt+0x3848>
   14878:	ldr	lr, [ip, #36]	; 0x24
   1487c:	mov	ip, #10
   14880:	cmp	lr, #0
   14884:	str	lr, [sp, #44]	; 0x2c
   14888:	movweq	ip, #9
   1488c:	b	148d4 <__assert_fail@plt+0x384c>
   14890:	mov	ip, #0
   14894:	b	148d4 <__assert_fail@plt+0x384c>
   14898:	mov	ip, #1
   1489c:	b	148d4 <__assert_fail@plt+0x384c>
   148a0:	mov	ip, #2
   148a4:	b	148d4 <__assert_fail@plt+0x384c>
   148a8:	mov	ip, #3
   148ac:	b	148d4 <__assert_fail@plt+0x384c>
   148b0:	mov	ip, #4
   148b4:	b	148d4 <__assert_fail@plt+0x384c>
   148b8:	mov	ip, #5
   148bc:	b	148d4 <__assert_fail@plt+0x384c>
   148c0:	mov	ip, #6
   148c4:	b	148d4 <__assert_fail@plt+0x384c>
   148c8:	mov	ip, #7
   148cc:	b	148d4 <__assert_fail@plt+0x384c>
   148d0:	mov	ip, #8
   148d4:	add	lr, sp, #8
   148d8:	str	ip, [sp, #4]
   148dc:	str	lr, [sp]
   148e0:	bl	14468 <__assert_fail@plt+0x33e0>
   148e4:	mov	sp, fp
   148e8:	pop	{fp, pc}
   148ec:	push	{fp, lr}
   148f0:	mov	fp, sp
   148f4:	sub	sp, sp, #56	; 0x38
   148f8:	add	ip, fp, #8
   148fc:	str	ip, [sp, #12]
   14900:	ldr	lr, [fp, #8]
   14904:	cmp	lr, #0
   14908:	str	lr, [sp, #16]
   1490c:	beq	149a8 <__assert_fail@plt+0x3920>
   14910:	ldr	lr, [ip, #4]
   14914:	cmp	lr, #0
   14918:	str	lr, [sp, #20]
   1491c:	beq	149b0 <__assert_fail@plt+0x3928>
   14920:	ldr	lr, [ip, #8]
   14924:	cmp	lr, #0
   14928:	str	lr, [sp, #24]
   1492c:	beq	149b8 <__assert_fail@plt+0x3930>
   14930:	ldr	lr, [ip, #12]
   14934:	cmp	lr, #0
   14938:	str	lr, [sp, #28]
   1493c:	beq	149c0 <__assert_fail@plt+0x3938>
   14940:	ldr	lr, [ip, #16]
   14944:	cmp	lr, #0
   14948:	str	lr, [sp, #32]
   1494c:	beq	149c8 <__assert_fail@plt+0x3940>
   14950:	ldr	lr, [ip, #20]
   14954:	cmp	lr, #0
   14958:	str	lr, [sp, #36]	; 0x24
   1495c:	beq	149d0 <__assert_fail@plt+0x3948>
   14960:	ldr	lr, [ip, #24]
   14964:	cmp	lr, #0
   14968:	str	lr, [sp, #40]	; 0x28
   1496c:	beq	149d8 <__assert_fail@plt+0x3950>
   14970:	ldr	lr, [ip, #28]
   14974:	cmp	lr, #0
   14978:	str	lr, [sp, #44]	; 0x2c
   1497c:	beq	149e0 <__assert_fail@plt+0x3958>
   14980:	ldr	lr, [ip, #32]
   14984:	cmp	lr, #0
   14988:	str	lr, [sp, #48]	; 0x30
   1498c:	beq	149e8 <__assert_fail@plt+0x3960>
   14990:	ldr	lr, [ip, #36]	; 0x24
   14994:	mov	ip, #10
   14998:	cmp	lr, #0
   1499c:	str	lr, [sp, #52]	; 0x34
   149a0:	movweq	ip, #9
   149a4:	b	149ec <__assert_fail@plt+0x3964>
   149a8:	mov	ip, #0
   149ac:	b	149ec <__assert_fail@plt+0x3964>
   149b0:	mov	ip, #1
   149b4:	b	149ec <__assert_fail@plt+0x3964>
   149b8:	mov	ip, #2
   149bc:	b	149ec <__assert_fail@plt+0x3964>
   149c0:	mov	ip, #3
   149c4:	b	149ec <__assert_fail@plt+0x3964>
   149c8:	mov	ip, #4
   149cc:	b	149ec <__assert_fail@plt+0x3964>
   149d0:	mov	ip, #5
   149d4:	b	149ec <__assert_fail@plt+0x3964>
   149d8:	mov	ip, #6
   149dc:	b	149ec <__assert_fail@plt+0x3964>
   149e0:	mov	ip, #7
   149e4:	b	149ec <__assert_fail@plt+0x3964>
   149e8:	mov	ip, #8
   149ec:	add	lr, sp, #16
   149f0:	str	ip, [sp, #4]
   149f4:	str	lr, [sp]
   149f8:	bl	14468 <__assert_fail@plt+0x33e0>
   149fc:	mov	sp, fp
   14a00:	pop	{fp, pc}
   14a04:	push	{fp, lr}
   14a08:	mov	fp, sp
   14a0c:	movw	r0, #33100	; 0x814c
   14a10:	movt	r0, #2
   14a14:	ldr	r1, [r0]
   14a18:	movw	r0, #29943	; 0x74f7
   14a1c:	movt	r0, #1
   14a20:	bl	10e30 <fputs_unlocked@plt>
   14a24:	movw	r1, #31359	; 0x7a7f
   14a28:	mov	r0, #0
   14a2c:	mov	r2, #5
   14a30:	movt	r1, #1
   14a34:	bl	10ec0 <dcgettext@plt>
   14a38:	movw	r2, #31379	; 0x7a93
   14a3c:	mov	r1, r0
   14a40:	mov	r0, #1
   14a44:	movt	r2, #1
   14a48:	bl	10fc8 <__printf_chk@plt>
   14a4c:	movw	r1, #31401	; 0x7aa9
   14a50:	mov	r0, #0
   14a54:	mov	r2, #5
   14a58:	movt	r1, #1
   14a5c:	bl	10ec0 <dcgettext@plt>
   14a60:	movw	r2, #29453	; 0x730d
   14a64:	movw	r3, #29752	; 0x7438
   14a68:	mov	r1, r0
   14a6c:	mov	r0, #1
   14a70:	movt	r2, #1
   14a74:	movt	r3, #1
   14a78:	bl	10fc8 <__printf_chk@plt>
   14a7c:	movw	r1, #31421	; 0x7abd
   14a80:	mov	r0, #0
   14a84:	mov	r2, #5
   14a88:	movt	r1, #1
   14a8c:	bl	10ec0 <dcgettext@plt>
   14a90:	movw	r2, #31460	; 0x7ae4
   14a94:	mov	r1, r0
   14a98:	mov	r0, #1
   14a9c:	movt	r2, #1
   14aa0:	pop	{fp, lr}
   14aa4:	b	10fc8 <__printf_chk@plt>
   14aa8:	push	{r4, r5, r6, sl, fp, lr}
   14aac:	add	fp, sp, #16
   14ab0:	mov	r4, r2
   14ab4:	mov	r5, r1
   14ab8:	mov	r6, r0
   14abc:	bl	16bd0 <__assert_fail@plt+0x5b48>
   14ac0:	cmp	r0, #0
   14ac4:	popne	{r4, r5, r6, sl, fp, pc}
   14ac8:	cmp	r6, #0
   14acc:	beq	14ae0 <__assert_fail@plt+0x3a58>
   14ad0:	cmp	r5, #0
   14ad4:	cmpne	r4, #0
   14ad8:	bne	14ae0 <__assert_fail@plt+0x3a58>
   14adc:	pop	{r4, r5, r6, sl, fp, pc}
   14ae0:	bl	15080 <__assert_fail@plt+0x3ff8>
   14ae4:	push	{r4, r5, r6, sl, fp, lr}
   14ae8:	add	fp, sp, #16
   14aec:	mov	r4, r2
   14af0:	mov	r5, r1
   14af4:	mov	r6, r0
   14af8:	bl	16bd0 <__assert_fail@plt+0x5b48>
   14afc:	cmp	r0, #0
   14b00:	popne	{r4, r5, r6, sl, fp, pc}
   14b04:	cmp	r6, #0
   14b08:	beq	14b1c <__assert_fail@plt+0x3a94>
   14b0c:	cmp	r5, #0
   14b10:	cmpne	r4, #0
   14b14:	bne	14b1c <__assert_fail@plt+0x3a94>
   14b18:	pop	{r4, r5, r6, sl, fp, pc}
   14b1c:	bl	15080 <__assert_fail@plt+0x3ff8>
   14b20:	push	{fp, lr}
   14b24:	mov	fp, sp
   14b28:	bl	16a30 <__assert_fail@plt+0x59a8>
   14b2c:	cmp	r0, #0
   14b30:	popne	{fp, pc}
   14b34:	bl	15080 <__assert_fail@plt+0x3ff8>
   14b38:	push	{fp, lr}
   14b3c:	mov	fp, sp
   14b40:	bl	16a30 <__assert_fail@plt+0x59a8>
   14b44:	cmp	r0, #0
   14b48:	popne	{fp, pc}
   14b4c:	bl	15080 <__assert_fail@plt+0x3ff8>
   14b50:	push	{fp, lr}
   14b54:	mov	fp, sp
   14b58:	bl	16a30 <__assert_fail@plt+0x59a8>
   14b5c:	cmp	r0, #0
   14b60:	popne	{fp, pc}
   14b64:	bl	15080 <__assert_fail@plt+0x3ff8>
   14b68:	push	{r4, r5, fp, lr}
   14b6c:	add	fp, sp, #8
   14b70:	mov	r4, r1
   14b74:	mov	r5, r0
   14b78:	bl	16a60 <__assert_fail@plt+0x59d8>
   14b7c:	cmp	r0, #0
   14b80:	popne	{r4, r5, fp, pc}
   14b84:	cmp	r5, #0
   14b88:	beq	14b98 <__assert_fail@plt+0x3b10>
   14b8c:	cmp	r4, #0
   14b90:	bne	14b98 <__assert_fail@plt+0x3b10>
   14b94:	pop	{r4, r5, fp, pc}
   14b98:	bl	15080 <__assert_fail@plt+0x3ff8>
   14b9c:	push	{fp, lr}
   14ba0:	mov	fp, sp
   14ba4:	cmp	r1, #0
   14ba8:	orreq	r1, r1, #1
   14bac:	bl	16a60 <__assert_fail@plt+0x59d8>
   14bb0:	cmp	r0, #0
   14bb4:	popne	{fp, pc}
   14bb8:	bl	15080 <__assert_fail@plt+0x3ff8>
   14bbc:	push	{fp, lr}
   14bc0:	mov	fp, sp
   14bc4:	clz	r3, r2
   14bc8:	lsr	ip, r3, #5
   14bcc:	clz	r3, r1
   14bd0:	lsr	r3, r3, #5
   14bd4:	orrs	r3, r3, ip
   14bd8:	movwne	r1, #1
   14bdc:	movwne	r2, #1
   14be0:	bl	16bd0 <__assert_fail@plt+0x5b48>
   14be4:	cmp	r0, #0
   14be8:	popne	{fp, pc}
   14bec:	bl	15080 <__assert_fail@plt+0x3ff8>
   14bf0:	push	{fp, lr}
   14bf4:	mov	fp, sp
   14bf8:	mov	r2, r1
   14bfc:	mov	r1, r0
   14c00:	mov	r0, #0
   14c04:	bl	16bd0 <__assert_fail@plt+0x5b48>
   14c08:	cmp	r0, #0
   14c0c:	popne	{fp, pc}
   14c10:	bl	15080 <__assert_fail@plt+0x3ff8>
   14c14:	push	{fp, lr}
   14c18:	mov	fp, sp
   14c1c:	mov	r2, r1
   14c20:	mov	r1, r0
   14c24:	clz	r0, r2
   14c28:	clz	r3, r1
   14c2c:	lsr	r0, r0, #5
   14c30:	lsr	r3, r3, #5
   14c34:	orrs	r0, r3, r0
   14c38:	movwne	r1, #1
   14c3c:	movwne	r2, #1
   14c40:	mov	r0, #0
   14c44:	bl	16bd0 <__assert_fail@plt+0x5b48>
   14c48:	cmp	r0, #0
   14c4c:	popne	{fp, pc}
   14c50:	bl	15080 <__assert_fail@plt+0x3ff8>
   14c54:	push	{r4, r5, r6, sl, fp, lr}
   14c58:	add	fp, sp, #16
   14c5c:	ldr	r5, [r1]
   14c60:	mov	r4, r1
   14c64:	mov	r6, r0
   14c68:	cmp	r0, #0
   14c6c:	beq	14c84 <__assert_fail@plt+0x3bfc>
   14c70:	mov	r0, #1
   14c74:	add	r0, r0, r5, lsr #1
   14c78:	adds	r5, r5, r0
   14c7c:	bcc	14c8c <__assert_fail@plt+0x3c04>
   14c80:	b	14cc8 <__assert_fail@plt+0x3c40>
   14c84:	cmp	r5, #0
   14c88:	movweq	r5, #64	; 0x40
   14c8c:	mov	r0, r6
   14c90:	mov	r1, r5
   14c94:	mov	r2, #1
   14c98:	bl	16bd0 <__assert_fail@plt+0x5b48>
   14c9c:	cmp	r5, #0
   14ca0:	mov	r1, r5
   14ca4:	movwne	r1, #1
   14ca8:	cmp	r0, #0
   14cac:	bne	14cc0 <__assert_fail@plt+0x3c38>
   14cb0:	clz	r2, r6
   14cb4:	lsr	r2, r2, #5
   14cb8:	orrs	r1, r2, r1
   14cbc:	bne	14cc8 <__assert_fail@plt+0x3c40>
   14cc0:	str	r5, [r4]
   14cc4:	pop	{r4, r5, r6, sl, fp, pc}
   14cc8:	bl	15080 <__assert_fail@plt+0x3ff8>
   14ccc:	push	{r4, r5, r6, r7, fp, lr}
   14cd0:	add	fp, sp, #16
   14cd4:	ldr	r5, [r1]
   14cd8:	mov	r6, r2
   14cdc:	mov	r4, r1
   14ce0:	mov	r7, r0
   14ce4:	cmp	r0, #0
   14ce8:	beq	14d00 <__assert_fail@plt+0x3c78>
   14cec:	mov	r0, #1
   14cf0:	add	r0, r0, r5, lsr #1
   14cf4:	adds	r5, r5, r0
   14cf8:	bcc	14d18 <__assert_fail@plt+0x3c90>
   14cfc:	b	14d4c <__assert_fail@plt+0x3cc4>
   14d00:	cmp	r5, #0
   14d04:	bne	14d18 <__assert_fail@plt+0x3c90>
   14d08:	mov	r0, #64	; 0x40
   14d0c:	cmp	r6, #64	; 0x40
   14d10:	udiv	r5, r0, r6
   14d14:	addhi	r5, r5, #1
   14d18:	mov	r0, r7
   14d1c:	mov	r1, r5
   14d20:	mov	r2, r6
   14d24:	bl	16bd0 <__assert_fail@plt+0x5b48>
   14d28:	cmp	r0, #0
   14d2c:	bne	14d44 <__assert_fail@plt+0x3cbc>
   14d30:	cmp	r7, #0
   14d34:	beq	14d4c <__assert_fail@plt+0x3cc4>
   14d38:	cmp	r6, #0
   14d3c:	cmpne	r5, #0
   14d40:	bne	14d4c <__assert_fail@plt+0x3cc4>
   14d44:	str	r5, [r4]
   14d48:	pop	{r4, r5, r6, r7, fp, pc}
   14d4c:	bl	15080 <__assert_fail@plt+0x3ff8>
   14d50:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14d54:	add	fp, sp, #24
   14d58:	mov	r8, r1
   14d5c:	ldr	r1, [r1]
   14d60:	mov	r5, r0
   14d64:	add	r0, r1, r1, asr #1
   14d68:	cmp	r0, r1
   14d6c:	mvnvs	r0, #-2147483648	; 0x80000000
   14d70:	cmp	r0, r3
   14d74:	mov	r7, r0
   14d78:	movgt	r7, r3
   14d7c:	cmn	r3, #1
   14d80:	movle	r7, r0
   14d84:	ldr	r0, [fp, #8]
   14d88:	cmn	r0, #1
   14d8c:	ble	14db4 <__assert_fail@plt+0x3d2c>
   14d90:	cmp	r0, #0
   14d94:	beq	14e08 <__assert_fail@plt+0x3d80>
   14d98:	cmn	r7, #1
   14d9c:	ble	14ddc <__assert_fail@plt+0x3d54>
   14da0:	mvn	r4, #-2147483648	; 0x80000000
   14da4:	udiv	r6, r4, r0
   14da8:	cmp	r6, r7
   14dac:	bge	14e08 <__assert_fail@plt+0x3d80>
   14db0:	b	14e18 <__assert_fail@plt+0x3d90>
   14db4:	cmn	r7, #1
   14db8:	ble	14df8 <__assert_fail@plt+0x3d70>
   14dbc:	cmn	r0, #1
   14dc0:	beq	14e08 <__assert_fail@plt+0x3d80>
   14dc4:	mov	r6, #-2147483648	; 0x80000000
   14dc8:	mvn	r4, #-2147483648	; 0x80000000
   14dcc:	sdiv	r6, r6, r0
   14dd0:	cmp	r6, r7
   14dd4:	bge	14e08 <__assert_fail@plt+0x3d80>
   14dd8:	b	14e18 <__assert_fail@plt+0x3d90>
   14ddc:	beq	14e08 <__assert_fail@plt+0x3d80>
   14de0:	mov	r6, #-2147483648	; 0x80000000
   14de4:	mvn	r4, #-2147483648	; 0x80000000
   14de8:	sdiv	r6, r6, r7
   14dec:	cmp	r6, r0
   14df0:	bge	14e08 <__assert_fail@plt+0x3d80>
   14df4:	b	14e18 <__assert_fail@plt+0x3d90>
   14df8:	mvn	r4, #-2147483648	; 0x80000000
   14dfc:	sdiv	r6, r4, r0
   14e00:	cmp	r7, r6
   14e04:	blt	14e18 <__assert_fail@plt+0x3d90>
   14e08:	mul	r6, r7, r0
   14e0c:	mov	r4, #64	; 0x40
   14e10:	cmp	r6, #63	; 0x3f
   14e14:	bgt	14e20 <__assert_fail@plt+0x3d98>
   14e18:	sdiv	r7, r4, r0
   14e1c:	mul	r6, r7, r0
   14e20:	cmp	r5, #0
   14e24:	moveq	r4, #0
   14e28:	streq	r4, [r8]
   14e2c:	sub	r4, r7, r1
   14e30:	cmp	r4, r2
   14e34:	bge	14ee0 <__assert_fail@plt+0x3e58>
   14e38:	add	r7, r1, r2
   14e3c:	mov	r6, #0
   14e40:	mov	r2, #0
   14e44:	cmp	r7, r3
   14e48:	movwgt	r6, #1
   14e4c:	cmn	r3, #1
   14e50:	movwgt	r2, #1
   14e54:	cmp	r7, r1
   14e58:	bvs	14f14 <__assert_fail@plt+0x3e8c>
   14e5c:	ands	r1, r2, r6
   14e60:	bne	14f14 <__assert_fail@plt+0x3e8c>
   14e64:	cmn	r0, #1
   14e68:	ble	14e90 <__assert_fail@plt+0x3e08>
   14e6c:	cmp	r0, #0
   14e70:	beq	14edc <__assert_fail@plt+0x3e54>
   14e74:	cmn	r7, #1
   14e78:	ble	14eb4 <__assert_fail@plt+0x3e2c>
   14e7c:	mvn	r1, #-2147483648	; 0x80000000
   14e80:	udiv	r1, r1, r0
   14e84:	cmp	r1, r7
   14e88:	bge	14edc <__assert_fail@plt+0x3e54>
   14e8c:	b	14f14 <__assert_fail@plt+0x3e8c>
   14e90:	cmn	r7, #1
   14e94:	ble	14ecc <__assert_fail@plt+0x3e44>
   14e98:	cmn	r0, #1
   14e9c:	beq	14edc <__assert_fail@plt+0x3e54>
   14ea0:	mov	r1, #-2147483648	; 0x80000000
   14ea4:	sdiv	r1, r1, r0
   14ea8:	cmp	r1, r7
   14eac:	bge	14edc <__assert_fail@plt+0x3e54>
   14eb0:	b	14f14 <__assert_fail@plt+0x3e8c>
   14eb4:	beq	14edc <__assert_fail@plt+0x3e54>
   14eb8:	mov	r1, #-2147483648	; 0x80000000
   14ebc:	sdiv	r1, r1, r7
   14ec0:	cmp	r1, r0
   14ec4:	bge	14edc <__assert_fail@plt+0x3e54>
   14ec8:	b	14f14 <__assert_fail@plt+0x3e8c>
   14ecc:	mvn	r1, #-2147483648	; 0x80000000
   14ed0:	sdiv	r1, r1, r0
   14ed4:	cmp	r7, r1
   14ed8:	blt	14f14 <__assert_fail@plt+0x3e8c>
   14edc:	mul	r6, r7, r0
   14ee0:	mov	r0, r5
   14ee4:	mov	r1, r6
   14ee8:	bl	16a60 <__assert_fail@plt+0x59d8>
   14eec:	cmp	r6, #0
   14ef0:	movwne	r6, #1
   14ef4:	cmp	r0, #0
   14ef8:	bne	14f0c <__assert_fail@plt+0x3e84>
   14efc:	clz	r1, r5
   14f00:	lsr	r1, r1, #5
   14f04:	orrs	r1, r1, r6
   14f08:	bne	14f14 <__assert_fail@plt+0x3e8c>
   14f0c:	str	r7, [r8]
   14f10:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14f14:	bl	15080 <__assert_fail@plt+0x3ff8>
   14f18:	push	{fp, lr}
   14f1c:	mov	fp, sp
   14f20:	mov	r1, #1
   14f24:	bl	169dc <__assert_fail@plt+0x5954>
   14f28:	cmp	r0, #0
   14f2c:	popne	{fp, pc}
   14f30:	bl	15080 <__assert_fail@plt+0x3ff8>
   14f34:	push	{fp, lr}
   14f38:	mov	fp, sp
   14f3c:	bl	169dc <__assert_fail@plt+0x5954>
   14f40:	cmp	r0, #0
   14f44:	popne	{fp, pc}
   14f48:	bl	15080 <__assert_fail@plt+0x3ff8>
   14f4c:	push	{fp, lr}
   14f50:	mov	fp, sp
   14f54:	mov	r1, #1
   14f58:	bl	169dc <__assert_fail@plt+0x5954>
   14f5c:	cmp	r0, #0
   14f60:	popne	{fp, pc}
   14f64:	bl	15080 <__assert_fail@plt+0x3ff8>
   14f68:	push	{fp, lr}
   14f6c:	mov	fp, sp
   14f70:	bl	169dc <__assert_fail@plt+0x5954>
   14f74:	cmp	r0, #0
   14f78:	popne	{fp, pc}
   14f7c:	bl	15080 <__assert_fail@plt+0x3ff8>
   14f80:	push	{r4, r5, r6, sl, fp, lr}
   14f84:	add	fp, sp, #16
   14f88:	mov	r5, r0
   14f8c:	mov	r0, r1
   14f90:	mov	r4, r1
   14f94:	bl	16a30 <__assert_fail@plt+0x59a8>
   14f98:	cmp	r0, #0
   14f9c:	beq	14fb8 <__assert_fail@plt+0x3f30>
   14fa0:	mov	r1, r5
   14fa4:	mov	r2, r4
   14fa8:	mov	r6, r0
   14fac:	bl	10e90 <memcpy@plt>
   14fb0:	mov	r0, r6
   14fb4:	pop	{r4, r5, r6, sl, fp, pc}
   14fb8:	bl	15080 <__assert_fail@plt+0x3ff8>
   14fbc:	push	{r4, r5, r6, sl, fp, lr}
   14fc0:	add	fp, sp, #16
   14fc4:	mov	r5, r0
   14fc8:	mov	r0, r1
   14fcc:	mov	r4, r1
   14fd0:	bl	16a30 <__assert_fail@plt+0x59a8>
   14fd4:	cmp	r0, #0
   14fd8:	beq	14ff4 <__assert_fail@plt+0x3f6c>
   14fdc:	mov	r1, r5
   14fe0:	mov	r2, r4
   14fe4:	mov	r6, r0
   14fe8:	bl	10e90 <memcpy@plt>
   14fec:	mov	r0, r6
   14ff0:	pop	{r4, r5, r6, sl, fp, pc}
   14ff4:	bl	15080 <__assert_fail@plt+0x3ff8>
   14ff8:	push	{r4, r5, r6, sl, fp, lr}
   14ffc:	add	fp, sp, #16
   15000:	mov	r5, r0
   15004:	add	r0, r1, #1
   15008:	mov	r4, r1
   1500c:	bl	16a30 <__assert_fail@plt+0x59a8>
   15010:	cmp	r0, #0
   15014:	beq	1503c <__assert_fail@plt+0x3fb4>
   15018:	mov	r6, r0
   1501c:	mov	r0, #0
   15020:	mov	r1, r5
   15024:	mov	r2, r4
   15028:	strb	r0, [r6, r4]
   1502c:	mov	r0, r6
   15030:	bl	10e90 <memcpy@plt>
   15034:	mov	r0, r6
   15038:	pop	{r4, r5, r6, sl, fp, pc}
   1503c:	bl	15080 <__assert_fail@plt+0x3ff8>
   15040:	push	{r4, r5, r6, sl, fp, lr}
   15044:	add	fp, sp, #16
   15048:	mov	r4, r0
   1504c:	bl	10f8c <strlen@plt>
   15050:	add	r5, r0, #1
   15054:	mov	r0, r5
   15058:	bl	16a30 <__assert_fail@plt+0x59a8>
   1505c:	cmp	r0, #0
   15060:	beq	1507c <__assert_fail@plt+0x3ff4>
   15064:	mov	r1, r4
   15068:	mov	r2, r5
   1506c:	mov	r6, r0
   15070:	bl	10e90 <memcpy@plt>
   15074:	mov	r0, r6
   15078:	pop	{r4, r5, r6, sl, fp, pc}
   1507c:	bl	15080 <__assert_fail@plt+0x3ff8>
   15080:	push	{fp, lr}
   15084:	mov	fp, sp
   15088:	movw	r0, #33004	; 0x80ec
   1508c:	movw	r1, #31536	; 0x7b30
   15090:	mov	r2, #5
   15094:	movt	r0, #2
   15098:	movt	r1, #1
   1509c:	ldr	r4, [r0]
   150a0:	mov	r0, #0
   150a4:	bl	10ec0 <dcgettext@plt>
   150a8:	movw	r2, #29432	; 0x72f8
   150ac:	mov	r3, r0
   150b0:	mov	r0, r4
   150b4:	mov	r1, #0
   150b8:	movt	r2, #1
   150bc:	bl	10f2c <error@plt>
   150c0:	bl	1107c <abort@plt>
   150c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   150c8:	add	fp, sp, #28
   150cc:	sub	sp, sp, #36	; 0x24
   150d0:	cmp	r2, #37	; 0x25
   150d4:	bcs	169bc <__assert_fail@plt+0x5934>
   150d8:	ldr	r8, [fp, #8]
   150dc:	mov	r9, r3
   150e0:	mov	r6, r2
   150e4:	mov	r7, r1
   150e8:	mov	r4, r0
   150ec:	bl	10fa4 <__errno_location@plt>
   150f0:	add	sl, sp, #32
   150f4:	cmp	r7, #0
   150f8:	mov	r5, r0
   150fc:	mov	r0, #0
   15100:	mov	r2, r6
   15104:	mov	r3, #0
   15108:	movne	sl, r7
   1510c:	str	r0, [r5]
   15110:	mov	r0, r4
   15114:	mov	r1, sl
   15118:	bl	11040 <__strtoll_internal@plt>
   1511c:	mov	r7, r1
   15120:	ldr	r1, [sl]
   15124:	cmp	r1, r4
   15128:	beq	15158 <__assert_fail@plt+0x40d0>
   1512c:	mov	r6, r0
   15130:	ldr	r0, [r5]
   15134:	cmp	r0, #0
   15138:	beq	15198 <__assert_fail@plt+0x4110>
   1513c:	mov	r5, #4
   15140:	cmp	r0, #34	; 0x22
   15144:	bne	165cc <__assert_fail@plt+0x5544>
   15148:	mov	r5, #1
   1514c:	cmp	r8, #0
   15150:	bne	151a4 <__assert_fail@plt+0x411c>
   15154:	b	165c8 <__assert_fail@plt+0x5540>
   15158:	mov	r5, #4
   1515c:	cmp	r8, #0
   15160:	beq	165cc <__assert_fail@plt+0x5544>
   15164:	mov	r6, r1
   15168:	ldrb	r1, [r4]
   1516c:	cmp	r1, #0
   15170:	beq	165cc <__assert_fail@plt+0x5544>
   15174:	mov	r0, r8
   15178:	bl	10f98 <strchr@plt>
   1517c:	cmp	r0, #0
   15180:	beq	165cc <__assert_fail@plt+0x5544>
   15184:	mov	r1, r6
   15188:	mov	r5, #0
   1518c:	mov	r6, #1
   15190:	mov	r7, #0
   15194:	b	151a4 <__assert_fail@plt+0x411c>
   15198:	mov	r5, r0
   1519c:	cmp	r8, #0
   151a0:	beq	165c8 <__assert_fail@plt+0x5540>
   151a4:	ldrb	r4, [r1]
   151a8:	cmp	r4, #0
   151ac:	beq	165c8 <__assert_fail@plt+0x5540>
   151b0:	str	r1, [sp, #20]
   151b4:	mov	r0, r8
   151b8:	mov	r1, r4
   151bc:	bl	10f98 <strchr@plt>
   151c0:	cmp	r0, #0
   151c4:	beq	15450 <__assert_fail@plt+0x43c8>
   151c8:	sub	r0, r4, #69	; 0x45
   151cc:	mov	r1, #1
   151d0:	mov	r3, #0
   151d4:	mov	r2, #1024	; 0x400
   151d8:	cmp	r0, #47	; 0x2f
   151dc:	str	r1, [sp, #16]
   151e0:	bhi	1531c <__assert_fail@plt+0x4294>
   151e4:	add	r1, pc, #0
   151e8:	ldr	pc, [r1, r0, lsl #2]
   151ec:	andeq	r5, r1, ip, lsr #5
   151f0:	andeq	r5, r1, ip, lsl r3
   151f4:	andeq	r5, r1, ip, lsr #5
   151f8:	andeq	r5, r1, ip, lsl r3
   151fc:	andeq	r5, r1, ip, lsl r3
   15200:	andeq	r5, r1, ip, lsl r3
   15204:	andeq	r5, r1, ip, lsr #5
   15208:	andeq	r5, r1, ip, lsl r3
   1520c:	andeq	r5, r1, ip, lsr #5
   15210:	andeq	r5, r1, ip, lsl r3
   15214:	andeq	r5, r1, ip, lsl r3
   15218:	andeq	r5, r1, ip, lsr #5
   1521c:	andeq	r5, r1, ip, lsl r3
   15220:	andeq	r5, r1, ip, lsl r3
   15224:	andeq	r5, r1, ip, lsl r3
   15228:	andeq	r5, r1, ip, lsr #5
   1522c:	andeq	r5, r1, ip, lsl r3
   15230:	andeq	r5, r1, ip, lsl r3
   15234:	andeq	r5, r1, ip, lsl r3
   15238:	andeq	r5, r1, ip, lsl r3
   1523c:	andeq	r5, r1, ip, lsr #5
   15240:	andeq	r5, r1, ip, lsr #5
   15244:	andeq	r5, r1, ip, lsl r3
   15248:	andeq	r5, r1, ip, lsl r3
   1524c:	andeq	r5, r1, ip, lsl r3
   15250:	andeq	r5, r1, ip, lsl r3
   15254:	andeq	r5, r1, ip, lsl r3
   15258:	andeq	r5, r1, ip, lsl r3
   1525c:	andeq	r5, r1, ip, lsl r3
   15260:	andeq	r5, r1, ip, lsl r3
   15264:	andeq	r5, r1, ip, lsl r3
   15268:	andeq	r5, r1, ip, lsl r3
   1526c:	andeq	r5, r1, ip, lsl r3
   15270:	andeq	r5, r1, ip, lsl r3
   15274:	andeq	r5, r1, ip, lsr #5
   15278:	andeq	r5, r1, ip, lsl r3
   1527c:	andeq	r5, r1, ip, lsl r3
   15280:	andeq	r5, r1, ip, lsl r3
   15284:	andeq	r5, r1, ip, lsr #5
   15288:	andeq	r5, r1, ip, lsl r3
   1528c:	andeq	r5, r1, ip, lsr #5
   15290:	andeq	r5, r1, ip, lsl r3
   15294:	andeq	r5, r1, ip, lsl r3
   15298:	andeq	r5, r1, ip, lsl r3
   1529c:	andeq	r5, r1, ip, lsl r3
   152a0:	andeq	r5, r1, ip, lsl r3
   152a4:	andeq	r5, r1, ip, lsl r3
   152a8:	andeq	r5, r1, ip, lsr #5
   152ac:	mov	r0, r8
   152b0:	mov	r1, #48	; 0x30
   152b4:	bl	10f98 <strchr@plt>
   152b8:	cmp	r0, #0
   152bc:	beq	152e8 <__assert_fail@plt+0x4260>
   152c0:	ldr	r1, [sp, #20]
   152c4:	ldrb	r0, [r1, #1]
   152c8:	cmp	r0, #66	; 0x42
   152cc:	cmpne	r0, #68	; 0x44
   152d0:	bne	152f0 <__assert_fail@plt+0x4268>
   152d4:	mov	r0, #2
   152d8:	mov	r2, #1000	; 0x3e8
   152dc:	mov	r3, #0
   152e0:	str	r0, [sp, #16]
   152e4:	b	1531c <__assert_fail@plt+0x4294>
   152e8:	mov	r3, #0
   152ec:	b	15318 <__assert_fail@plt+0x4290>
   152f0:	cmp	r0, #105	; 0x69
   152f4:	mov	r3, #0
   152f8:	bne	15318 <__assert_fail@plt+0x4290>
   152fc:	ldrb	r0, [r1, #2]
   15300:	mov	r1, #1
   15304:	mov	r2, #1024	; 0x400
   15308:	cmp	r0, #66	; 0x42
   1530c:	movweq	r1, #3
   15310:	str	r1, [sp, #16]
   15314:	b	1531c <__assert_fail@plt+0x4294>
   15318:	mov	r2, #1024	; 0x400
   1531c:	sub	r0, r4, #66	; 0x42
   15320:	cmp	r0, #53	; 0x35
   15324:	bhi	15450 <__assert_fail@plt+0x43c8>
   15328:	add	r1, pc, #8
   1532c:	str	r3, [sp, #28]
   15330:	str	r2, [sp, #24]
   15334:	ldr	pc, [r1, r0, lsl #2]
   15338:	andeq	r5, r1, r0, asr r5
   1533c:	andeq	r5, r1, r0, asr r4
   15340:	andeq	r5, r1, r0, asr r4
   15344:	andeq	r5, r1, r4, ror #10
   15348:	andeq	r5, r1, r0, asr r4
   1534c:	andeq	r5, r1, r0, lsl r4
   15350:	andeq	r5, r1, r0, asr r4
   15354:	andeq	r5, r1, r0, asr r4
   15358:	andeq	r5, r1, r0, asr r4
   1535c:	andeq	r5, r1, r8, asr r4
   15360:	andeq	r5, r1, r0, asr r4
   15364:	andeq	r5, r1, r8, lsl #9
   15368:	andeq	r5, r1, r0, asr r4
   1536c:	andeq	r5, r1, r0, asr r4
   15370:	andeq	r5, r1, r8, lsr #11
   15374:	andeq	r5, r1, r0, asr r4
   15378:	andeq	r5, r1, r0, asr r4
   1537c:	andeq	r5, r1, r0, asr r4
   15380:	andeq	r5, r1, r8, asr #9
   15384:	andeq	r5, r1, r0, asr r4
   15388:	andeq	r5, r1, r0, asr r4
   1538c:	andeq	r5, r1, r0, asr r4
   15390:	andeq	r5, r1, r0, asr r4
   15394:	andeq	r5, r1, ip, ror #11
   15398:	andeq	r5, r1, ip, lsl #10
   1539c:	andeq	r5, r1, r0, asr r4
   153a0:	andeq	r5, r1, r0, asr r4
   153a4:	andeq	r5, r1, r0, asr r4
   153a8:	andeq	r5, r1, r0, asr r4
   153ac:	andeq	r5, r1, r0, asr r4
   153b0:	andeq	r5, r1, r0, asr r4
   153b4:	andeq	r5, r1, r0, asr r4
   153b8:	andeq	r5, r1, r0, lsr r6
   153bc:	andeq	r6, r1, r8, lsr #11
   153c0:	andeq	r5, r1, r0, asr r4
   153c4:	andeq	r5, r1, r0, asr r4
   153c8:	andeq	r5, r1, r0, asr r4
   153cc:	andeq	r5, r1, r0, lsl r4
   153d0:	andeq	r5, r1, r0, asr r4
   153d4:	andeq	r5, r1, r0, asr r4
   153d8:	andeq	r5, r1, r0, asr r4
   153dc:	andeq	r5, r1, r8, asr r4
   153e0:	andeq	r5, r1, r0, asr r4
   153e4:	andeq	r5, r1, r8, lsl #9
   153e8:	andeq	r5, r1, r0, asr r4
   153ec:	andeq	r5, r1, r0, asr r4
   153f0:	andeq	r5, r1, r0, asr r4
   153f4:	andeq	r5, r1, r0, asr r4
   153f8:	andeq	r5, r1, r0, asr r4
   153fc:	andeq	r5, r1, r0, asr r4
   15400:	andeq	r5, r1, r8, asr #9
   15404:	andeq	r5, r1, r0, asr r4
   15408:	andeq	r5, r1, r0, asr r4
   1540c:	andeq	r5, r1, r4, asr #12
   15410:	cmn	r7, #1
   15414:	str	r9, [sp, #12]
   15418:	ble	15658 <__assert_fail@plt+0x45d0>
   1541c:	ldr	r3, [sp, #28]
   15420:	mvn	r0, #0
   15424:	mvn	r1, #-2147483648	; 0x80000000
   15428:	mvn	r8, #0
   1542c:	mvn	r9, #-2147483648	; 0x80000000
   15430:	bl	16de8 <__assert_fail@plt+0x5d60>
   15434:	ldr	r2, [sp, #24]
   15438:	ldr	r3, [sp, #28]
   1543c:	subs	r0, r0, r6
   15440:	mov	r4, #1
   15444:	sbcs	r0, r1, r7
   15448:	bge	15698 <__assert_fail@plt+0x4610>
   1544c:	b	156b0 <__assert_fail@plt+0x4628>
   15450:	orr	r5, r5, #2
   15454:	b	165c8 <__assert_fail@plt+0x5540>
   15458:	cmn	r7, #1
   1545c:	ble	156ec <__assert_fail@plt+0x4664>
   15460:	ldr	r3, [sp, #28]
   15464:	mvn	r0, #0
   15468:	mvn	r1, #-2147483648	; 0x80000000
   1546c:	bl	16de8 <__assert_fail@plt+0x5d60>
   15470:	ldr	r2, [sp, #24]
   15474:	ldr	r3, [sp, #28]
   15478:	subs	r0, r0, r6
   1547c:	sbcs	r0, r1, r7
   15480:	bge	15720 <__assert_fail@plt+0x4698>
   15484:	b	15e30 <__assert_fail@plt+0x4da8>
   15488:	cmn	r7, #1
   1548c:	str	r9, [sp, #12]
   15490:	ble	15734 <__assert_fail@plt+0x46ac>
   15494:	ldr	r3, [sp, #28]
   15498:	mvn	r0, #0
   1549c:	mvn	r1, #-2147483648	; 0x80000000
   154a0:	mvn	r8, #0
   154a4:	mvn	r9, #-2147483648	; 0x80000000
   154a8:	bl	16de8 <__assert_fail@plt+0x5d60>
   154ac:	ldr	r2, [sp, #24]
   154b0:	ldr	r3, [sp, #28]
   154b4:	subs	r0, r0, r6
   154b8:	mov	r4, #1
   154bc:	sbcs	r0, r1, r7
   154c0:	bge	15774 <__assert_fail@plt+0x46ec>
   154c4:	b	1578c <__assert_fail@plt+0x4704>
   154c8:	cmn	r7, #1
   154cc:	str	r9, [sp, #12]
   154d0:	ble	157c4 <__assert_fail@plt+0x473c>
   154d4:	ldr	r3, [sp, #28]
   154d8:	mvn	r0, #0
   154dc:	mvn	r1, #-2147483648	; 0x80000000
   154e0:	mvn	r9, #-2147483648	; 0x80000000
   154e4:	str	r0, [sp, #8]
   154e8:	mvn	r0, #0
   154ec:	bl	16de8 <__assert_fail@plt+0x5d60>
   154f0:	ldr	r2, [sp, #24]
   154f4:	ldr	r3, [sp, #28]
   154f8:	subs	r0, r0, r6
   154fc:	mov	r4, #1
   15500:	sbcs	r0, r1, r7
   15504:	bge	15808 <__assert_fail@plt+0x4780>
   15508:	b	15824 <__assert_fail@plt+0x479c>
   1550c:	cmp	r7, #0
   15510:	str	r9, [sp, #12]
   15514:	blt	15b0c <__assert_fail@plt+0x4a84>
   15518:	ldr	r3, [sp, #28]
   1551c:	mvn	r0, #0
   15520:	mvn	r1, #-2147483648	; 0x80000000
   15524:	mvn	r9, #-2147483648	; 0x80000000
   15528:	str	r0, [sp, #8]
   1552c:	mvn	r0, #0
   15530:	bl	16de8 <__assert_fail@plt+0x5d60>
   15534:	ldr	r2, [sp, #24]
   15538:	ldr	r3, [sp, #28]
   1553c:	subs	r0, r0, r6
   15540:	mov	r4, #1
   15544:	sbcs	r0, r1, r7
   15548:	bge	15b50 <__assert_fail@plt+0x4ac8>
   1554c:	b	15b6c <__assert_fail@plt+0x4ae4>
   15550:	cmn	r7, #1
   15554:	ble	15ba8 <__assert_fail@plt+0x4b20>
   15558:	cmp	r7, #2097152	; 0x200000
   1555c:	blt	15bd8 <__assert_fail@plt+0x4b50>
   15560:	b	15e30 <__assert_fail@plt+0x4da8>
   15564:	cmp	r7, #0
   15568:	str	r9, [sp, #12]
   1556c:	blt	15be8 <__assert_fail@plt+0x4b60>
   15570:	ldr	r3, [sp, #28]
   15574:	mvn	r0, #0
   15578:	mvn	r1, #-2147483648	; 0x80000000
   1557c:	mvn	r9, #-2147483648	; 0x80000000
   15580:	str	r0, [sp, #8]
   15584:	mvn	r0, #0
   15588:	bl	16de8 <__assert_fail@plt+0x5d60>
   1558c:	ldr	r2, [sp, #24]
   15590:	ldr	r3, [sp, #28]
   15594:	subs	r0, r0, r6
   15598:	mov	r4, #1
   1559c:	sbcs	r0, r1, r7
   155a0:	bge	15c2c <__assert_fail@plt+0x4ba4>
   155a4:	b	15c48 <__assert_fail@plt+0x4bc0>
   155a8:	cmp	r7, #0
   155ac:	str	r9, [sp, #12]
   155b0:	blt	15c84 <__assert_fail@plt+0x4bfc>
   155b4:	ldr	r3, [sp, #28]
   155b8:	mvn	r0, #0
   155bc:	mvn	r1, #-2147483648	; 0x80000000
   155c0:	mvn	r8, #-2147483648	; 0x80000000
   155c4:	str	r0, [sp, #8]
   155c8:	mvn	r0, #0
   155cc:	bl	16de8 <__assert_fail@plt+0x5d60>
   155d0:	ldr	r2, [sp, #24]
   155d4:	ldr	r3, [sp, #28]
   155d8:	subs	r0, r0, r6
   155dc:	mov	r4, #1
   155e0:	sbcs	r0, r1, r7
   155e4:	bge	15cc8 <__assert_fail@plt+0x4c40>
   155e8:	b	15ce4 <__assert_fail@plt+0x4c5c>
   155ec:	cmp	r7, #0
   155f0:	str	r9, [sp, #12]
   155f4:	blt	15d20 <__assert_fail@plt+0x4c98>
   155f8:	ldr	r3, [sp, #28]
   155fc:	mvn	r0, #0
   15600:	mvn	r1, #-2147483648	; 0x80000000
   15604:	mvn	r9, #-2147483648	; 0x80000000
   15608:	str	r0, [sp, #8]
   1560c:	mvn	r0, #0
   15610:	bl	16de8 <__assert_fail@plt+0x5d60>
   15614:	ldr	r2, [sp, #24]
   15618:	ldr	r3, [sp, #28]
   1561c:	subs	r0, r0, r6
   15620:	mov	r4, #1
   15624:	sbcs	r0, r1, r7
   15628:	bge	15d64 <__assert_fail@plt+0x4cdc>
   1562c:	b	15d80 <__assert_fail@plt+0x4cf8>
   15630:	cmn	r7, #1
   15634:	ble	15dc0 <__assert_fail@plt+0x4d38>
   15638:	cmp	r7, #4194304	; 0x400000
   1563c:	blt	15df0 <__assert_fail@plt+0x4d68>
   15640:	b	15e30 <__assert_fail@plt+0x4da8>
   15644:	cmn	r7, #1
   15648:	ble	15e00 <__assert_fail@plt+0x4d78>
   1564c:	cmp	r7, #1073741824	; 0x40000000
   15650:	bge	15e30 <__assert_fail@plt+0x4da8>
   15654:	b	15e50 <__assert_fail@plt+0x4dc8>
   15658:	and	r0, r6, r7
   1565c:	cmn	r0, #1
   15660:	beq	15698 <__assert_fail@plt+0x4610>
   15664:	mov	r0, #0
   15668:	mov	r1, #-2147483648	; 0x80000000
   1566c:	mov	r2, r6
   15670:	mov	r3, r7
   15674:	mov	r8, #0
   15678:	mov	r9, #-2147483648	; 0x80000000
   1567c:	bl	16d14 <__assert_fail@plt+0x5c8c>
   15680:	ldr	r2, [sp, #24]
   15684:	ldr	r3, [sp, #28]
   15688:	mov	r4, #1
   1568c:	subs	r0, r0, r2
   15690:	sbcs	r0, r1, r3
   15694:	blt	15860 <__assert_fail@plt+0x47d8>
   15698:	umull	r8, r0, r6, r2
   1569c:	mov	r4, #0
   156a0:	mla	r0, r6, r3, r0
   156a4:	mla	r9, r7, r2, r0
   156a8:	cmp	r9, #0
   156ac:	blt	15860 <__assert_fail@plt+0x47d8>
   156b0:	ldr	r3, [sp, #28]
   156b4:	mvn	r0, #-2147483648	; 0x80000000
   156b8:	mvn	r1, #-2147483648	; 0x80000000
   156bc:	mov	r6, r4
   156c0:	mvn	r4, #0
   156c4:	str	r0, [sp, #8]
   156c8:	mvn	r0, #0
   156cc:	bl	16de8 <__assert_fail@plt+0x5d60>
   156d0:	ldr	r2, [sp, #24]
   156d4:	ldr	r3, [sp, #28]
   156d8:	subs	r0, r0, r8
   156dc:	mov	r7, #1
   156e0:	sbcs	r0, r1, r9
   156e4:	bge	1589c <__assert_fail@plt+0x4814>
   156e8:	b	158b8 <__assert_fail@plt+0x4830>
   156ec:	and	r0, r6, r7
   156f0:	cmn	r0, #1
   156f4:	beq	15720 <__assert_fail@plt+0x4698>
   156f8:	mov	r0, #0
   156fc:	mov	r1, #-2147483648	; 0x80000000
   15700:	mov	r2, r6
   15704:	mov	r3, r7
   15708:	bl	16d14 <__assert_fail@plt+0x5c8c>
   1570c:	ldr	r2, [sp, #24]
   15710:	ldr	r3, [sp, #28]
   15714:	subs	r0, r0, r2
   15718:	sbcs	r0, r1, r3
   1571c:	blt	15e30 <__assert_fail@plt+0x4da8>
   15720:	umull	r0, r1, r6, r2
   15724:	mla	r1, r6, r3, r1
   15728:	mov	r6, r0
   1572c:	mla	r7, r7, r2, r1
   15730:	b	165a8 <__assert_fail@plt+0x5520>
   15734:	and	r0, r6, r7
   15738:	cmn	r0, #1
   1573c:	beq	15774 <__assert_fail@plt+0x46ec>
   15740:	mov	r0, #0
   15744:	mov	r1, #-2147483648	; 0x80000000
   15748:	mov	r2, r6
   1574c:	mov	r3, r7
   15750:	mov	r8, #0
   15754:	mov	r9, #-2147483648	; 0x80000000
   15758:	bl	16d14 <__assert_fail@plt+0x5c8c>
   1575c:	ldr	r2, [sp, #24]
   15760:	ldr	r3, [sp, #28]
   15764:	mov	r4, #1
   15768:	subs	r0, r0, r2
   1576c:	sbcs	r0, r1, r3
   15770:	blt	1594c <__assert_fail@plt+0x48c4>
   15774:	umull	r8, r0, r6, r2
   15778:	mov	r4, #0
   1577c:	mla	r0, r6, r3, r0
   15780:	mla	r9, r7, r2, r0
   15784:	cmp	r9, #0
   15788:	blt	1594c <__assert_fail@plt+0x48c4>
   1578c:	ldr	r3, [sp, #28]
   15790:	mvn	r0, #0
   15794:	mvn	r1, #-2147483648	; 0x80000000
   15798:	str	r4, [sp, #8]
   1579c:	mvn	r6, #0
   157a0:	mvn	r7, #-2147483648	; 0x80000000
   157a4:	bl	16de8 <__assert_fail@plt+0x5d60>
   157a8:	ldr	r4, [sp, #24]
   157ac:	ldr	r3, [sp, #28]
   157b0:	subs	r0, r0, r8
   157b4:	mov	r2, #1
   157b8:	sbcs	r0, r1, r9
   157bc:	bge	15984 <__assert_fail@plt+0x48fc>
   157c0:	b	15abc <__assert_fail@plt+0x4a34>
   157c4:	and	r0, r6, r7
   157c8:	cmn	r0, #1
   157cc:	beq	15808 <__assert_fail@plt+0x4780>
   157d0:	mov	r0, #0
   157d4:	mov	r1, #-2147483648	; 0x80000000
   157d8:	mov	r2, r6
   157dc:	mov	r3, r7
   157e0:	bl	16d14 <__assert_fail@plt+0x5c8c>
   157e4:	ldr	r2, [sp, #24]
   157e8:	ldr	r3, [sp, #28]
   157ec:	mov	r4, #1
   157f0:	mov	r9, #-2147483648	; 0x80000000
   157f4:	subs	r0, r0, r2
   157f8:	sbcs	r0, r1, r3
   157fc:	mov	r0, #0
   15800:	str	r0, [sp, #8]
   15804:	blt	15998 <__assert_fail@plt+0x4910>
   15808:	umull	r1, r0, r6, r2
   1580c:	mov	r4, #0
   15810:	mla	r0, r6, r3, r0
   15814:	str	r1, [sp, #8]
   15818:	mla	r9, r7, r2, r0
   1581c:	cmp	r9, #0
   15820:	blt	15998 <__assert_fail@plt+0x4910>
   15824:	ldr	r3, [sp, #28]
   15828:	mvn	r0, #0
   1582c:	mvn	r1, #-2147483648	; 0x80000000
   15830:	str	r4, [sp, #4]
   15834:	mvn	r6, #0
   15838:	mvn	r8, #-2147483648	; 0x80000000
   1583c:	bl	16de8 <__assert_fail@plt+0x5d60>
   15840:	ldr	r4, [sp, #8]
   15844:	ldr	r2, [sp, #24]
   15848:	ldr	r3, [sp, #28]
   1584c:	mov	r7, #1
   15850:	subs	r0, r0, r4
   15854:	sbcs	r0, r1, r9
   15858:	bge	159d4 <__assert_fail@plt+0x494c>
   1585c:	b	159ec <__assert_fail@plt+0x4964>
   15860:	mov	r0, #-2147483648	; 0x80000000
   15864:	mov	r1, #-2147483648	; 0x80000000
   15868:	mov	r2, r8
   1586c:	mov	r3, r9
   15870:	mov	r6, r4
   15874:	mov	r4, #0
   15878:	str	r0, [sp, #8]
   1587c:	mov	r0, #0
   15880:	bl	16d14 <__assert_fail@plt+0x5c8c>
   15884:	ldr	r2, [sp, #24]
   15888:	ldr	r3, [sp, #28]
   1588c:	mov	r7, #1
   15890:	subs	r0, r0, r2
   15894:	sbcs	r0, r1, r3
   15898:	blt	1590c <__assert_fail@plt+0x4884>
   1589c:	umull	r4, r0, r8, r2
   158a0:	mov	r7, r6
   158a4:	mla	r0, r8, r3, r0
   158a8:	mla	r0, r9, r2, r0
   158ac:	cmp	r0, #0
   158b0:	str	r0, [sp, #8]
   158b4:	blt	1590c <__assert_fail@plt+0x4884>
   158b8:	ldr	r3, [sp, #28]
   158bc:	mvn	r0, #0
   158c0:	mvn	r1, #-2147483648	; 0x80000000
   158c4:	mov	r9, r7
   158c8:	mvn	r6, #0
   158cc:	mvn	r7, #-2147483648	; 0x80000000
   158d0:	bl	16de8 <__assert_fail@plt+0x5d60>
   158d4:	ldr	r8, [sp, #8]
   158d8:	ldr	r3, [sp, #24]
   158dc:	ldr	ip, [sp, #28]
   158e0:	subs	r0, r0, r4
   158e4:	mov	r2, #1
   158e8:	sbcs	r0, r1, r8
   158ec:	blt	15900 <__assert_fail@plt+0x4878>
   158f0:	umull	r6, r0, r4, r3
   158f4:	mov	r2, #0
   158f8:	mla	r0, r4, ip, r0
   158fc:	mla	r7, r8, r3, r0
   15900:	orr	r3, r2, r9
   15904:	ldr	r9, [sp, #12]
   15908:	b	165a8 <__assert_fail@plt+0x5520>
   1590c:	ldr	r8, [sp, #8]
   15910:	mov	r0, #0
   15914:	mov	r1, #-2147483648	; 0x80000000
   15918:	mov	r2, r4
   1591c:	mov	r9, r7
   15920:	mov	r6, #0
   15924:	mov	r7, #-2147483648	; 0x80000000
   15928:	mov	r3, r8
   1592c:	bl	16d14 <__assert_fail@plt+0x5c8c>
   15930:	ldr	r3, [sp, #24]
   15934:	ldr	ip, [sp, #28]
   15938:	mov	r2, #1
   1593c:	subs	r0, r0, r3
   15940:	sbcs	r0, r1, ip
   15944:	bge	158f0 <__assert_fail@plt+0x4868>
   15948:	b	15900 <__assert_fail@plt+0x4878>
   1594c:	mov	r0, #0
   15950:	mov	r1, #-2147483648	; 0x80000000
   15954:	mov	r2, r8
   15958:	mov	r3, r9
   1595c:	str	r4, [sp, #8]
   15960:	mov	r6, #0
   15964:	mov	r7, #-2147483648	; 0x80000000
   15968:	bl	16d14 <__assert_fail@plt+0x5c8c>
   1596c:	ldr	r4, [sp, #24]
   15970:	ldr	r3, [sp, #28]
   15974:	mov	r2, #1
   15978:	subs	r0, r0, r4
   1597c:	sbcs	r0, r1, r3
   15980:	blt	15abc <__assert_fail@plt+0x4a34>
   15984:	umull	r6, r0, r8, r4
   15988:	mov	r2, #0
   1598c:	mla	r0, r8, r3, r0
   15990:	mla	r7, r9, r4, r0
   15994:	b	15abc <__assert_fail@plt+0x4a34>
   15998:	str	r4, [sp, #4]
   1599c:	ldr	r4, [sp, #8]
   159a0:	mov	r0, #0
   159a4:	mov	r1, #-2147483648	; 0x80000000
   159a8:	mov	r3, r9
   159ac:	mov	r2, r4
   159b0:	bl	16d14 <__assert_fail@plt+0x5c8c>
   159b4:	ldr	r2, [sp, #24]
   159b8:	ldr	r3, [sp, #28]
   159bc:	mov	r7, #1
   159c0:	mov	r6, #0
   159c4:	mov	r8, #-2147483648	; 0x80000000
   159c8:	subs	r0, r0, r2
   159cc:	sbcs	r0, r1, r3
   159d0:	blt	15a24 <__assert_fail@plt+0x499c>
   159d4:	umull	r6, r0, r4, r2
   159d8:	ldr	r7, [sp, #4]
   159dc:	mla	r0, r4, r3, r0
   159e0:	mla	r8, r9, r2, r0
   159e4:	cmp	r8, #0
   159e8:	blt	15a24 <__assert_fail@plt+0x499c>
   159ec:	ldr	r3, [sp, #28]
   159f0:	mvn	r0, #0
   159f4:	mvn	r1, #-2147483648	; 0x80000000
   159f8:	str	r7, [sp, #8]
   159fc:	mvn	r4, #0
   15a00:	mvn	r9, #-2147483648	; 0x80000000
   15a04:	bl	16de8 <__assert_fail@plt+0x5d60>
   15a08:	ldr	r2, [sp, #24]
   15a0c:	ldr	r3, [sp, #28]
   15a10:	subs	r0, r0, r6
   15a14:	mov	r7, #1
   15a18:	sbcs	r0, r1, r8
   15a1c:	bge	15a5c <__assert_fail@plt+0x49d4>
   15a20:	b	15a74 <__assert_fail@plt+0x49ec>
   15a24:	mov	r0, #0
   15a28:	mov	r1, #-2147483648	; 0x80000000
   15a2c:	mov	r2, r6
   15a30:	mov	r3, r8
   15a34:	str	r7, [sp, #8]
   15a38:	bl	16d14 <__assert_fail@plt+0x5c8c>
   15a3c:	ldr	r2, [sp, #24]
   15a40:	ldr	r3, [sp, #28]
   15a44:	mov	r7, #1
   15a48:	mov	r4, #0
   15a4c:	mov	r9, #-2147483648	; 0x80000000
   15a50:	subs	r0, r0, r2
   15a54:	sbcs	r0, r1, r3
   15a58:	blt	15acc <__assert_fail@plt+0x4a44>
   15a5c:	umull	r4, r0, r6, r2
   15a60:	ldr	r7, [sp, #8]
   15a64:	mla	r0, r6, r3, r0
   15a68:	mla	r9, r8, r2, r0
   15a6c:	cmp	r9, #0
   15a70:	blt	15acc <__assert_fail@plt+0x4a44>
   15a74:	ldr	r3, [sp, #28]
   15a78:	mvn	r0, #0
   15a7c:	mvn	r1, #-2147483648	; 0x80000000
   15a80:	str	r7, [sp, #8]
   15a84:	mvn	r6, #0
   15a88:	mvn	r7, #-2147483648	; 0x80000000
   15a8c:	bl	16de8 <__assert_fail@plt+0x5d60>
   15a90:	ldr	r3, [sp, #24]
   15a94:	ldr	ip, [sp, #28]
   15a98:	subs	r0, r0, r4
   15a9c:	mov	r2, #1
   15aa0:	mov	r8, r4
   15aa4:	sbcs	r0, r1, r9
   15aa8:	blt	15abc <__assert_fail@plt+0x4a34>
   15aac:	umull	r6, r0, r8, r3
   15ab0:	mov	r2, #0
   15ab4:	mla	r0, r8, ip, r0
   15ab8:	mla	r7, r9, r3, r0
   15abc:	ldr	r0, [sp, #8]
   15ac0:	ldr	r9, [sp, #12]
   15ac4:	orr	r3, r2, r0
   15ac8:	b	165a8 <__assert_fail@plt+0x5520>
   15acc:	mov	r0, #0
   15ad0:	mov	r1, #-2147483648	; 0x80000000
   15ad4:	mov	r2, r4
   15ad8:	mov	r3, r9
   15adc:	str	r7, [sp, #8]
   15ae0:	mov	r8, r4
   15ae4:	bl	16d14 <__assert_fail@plt+0x5c8c>
   15ae8:	ldr	r3, [sp, #24]
   15aec:	ldr	ip, [sp, #28]
   15af0:	mov	r2, #1
   15af4:	mov	r6, #0
   15af8:	mov	r7, #-2147483648	; 0x80000000
   15afc:	subs	r0, r0, r3
   15b00:	sbcs	r0, r1, ip
   15b04:	bge	15aac <__assert_fail@plt+0x4a24>
   15b08:	b	15abc <__assert_fail@plt+0x4a34>
   15b0c:	and	r0, r6, r7
   15b10:	cmn	r0, #1
   15b14:	beq	15b50 <__assert_fail@plt+0x4ac8>
   15b18:	mov	r0, #0
   15b1c:	mov	r1, #-2147483648	; 0x80000000
   15b20:	mov	r2, r6
   15b24:	mov	r3, r7
   15b28:	bl	16d14 <__assert_fail@plt+0x5c8c>
   15b2c:	ldr	r2, [sp, #24]
   15b30:	ldr	r3, [sp, #28]
   15b34:	mov	r4, #1
   15b38:	mov	r9, #-2147483648	; 0x80000000
   15b3c:	subs	r0, r0, r2
   15b40:	sbcs	r0, r1, r3
   15b44:	mov	r0, #0
   15b48:	str	r0, [sp, #8]
   15b4c:	blt	15e60 <__assert_fail@plt+0x4dd8>
   15b50:	umull	r1, r0, r6, r2
   15b54:	mov	r4, #0
   15b58:	mla	r0, r6, r3, r0
   15b5c:	str	r1, [sp, #8]
   15b60:	mla	r9, r7, r2, r0
   15b64:	cmp	r9, #0
   15b68:	blt	15e60 <__assert_fail@plt+0x4dd8>
   15b6c:	ldr	r3, [sp, #28]
   15b70:	mvn	r0, #0
   15b74:	mvn	r1, #-2147483648	; 0x80000000
   15b78:	str	r4, [sp, #4]
   15b7c:	mvn	r8, #0
   15b80:	mvn	r4, #-2147483648	; 0x80000000
   15b84:	bl	16de8 <__assert_fail@plt+0x5d60>
   15b88:	ldr	r6, [sp, #8]
   15b8c:	ldr	r2, [sp, #24]
   15b90:	ldr	r3, [sp, #28]
   15b94:	mov	r7, #1
   15b98:	subs	r0, r0, r6
   15b9c:	sbcs	r0, r1, r9
   15ba0:	bge	15e9c <__assert_fail@plt+0x4e14>
   15ba4:	b	15eb4 <__assert_fail@plt+0x4e2c>
   15ba8:	and	r0, r6, r7
   15bac:	cmn	r0, #1
   15bb0:	beq	15bd8 <__assert_fail@plt+0x4b50>
   15bb4:	mov	r0, #0
   15bb8:	mov	r1, #-2147483648	; 0x80000000
   15bbc:	mov	r2, r6
   15bc0:	mov	r3, r7
   15bc4:	bl	16d14 <__assert_fail@plt+0x5c8c>
   15bc8:	ldr	r3, [sp, #28]
   15bcc:	subs	r0, r0, #1024	; 0x400
   15bd0:	sbcs	r0, r1, #0
   15bd4:	blt	15e30 <__assert_fail@plt+0x4da8>
   15bd8:	lsl	r0, r7, #10
   15bdc:	orr	r7, r0, r6, lsr #22
   15be0:	lsl	r6, r6, #10
   15be4:	b	165a8 <__assert_fail@plt+0x5520>
   15be8:	and	r0, r6, r7
   15bec:	cmn	r0, #1
   15bf0:	beq	15c2c <__assert_fail@plt+0x4ba4>
   15bf4:	mov	r0, #0
   15bf8:	mov	r1, #-2147483648	; 0x80000000
   15bfc:	mov	r2, r6
   15c00:	mov	r3, r7
   15c04:	bl	16d14 <__assert_fail@plt+0x5c8c>
   15c08:	ldr	r2, [sp, #24]
   15c0c:	ldr	r3, [sp, #28]
   15c10:	mov	r4, #1
   15c14:	mov	r9, #-2147483648	; 0x80000000
   15c18:	subs	r0, r0, r2
   15c1c:	sbcs	r0, r1, r3
   15c20:	mov	r0, #0
   15c24:	str	r0, [sp, #8]
   15c28:	blt	16178 <__assert_fail@plt+0x50f0>
   15c2c:	umull	r1, r0, r6, r2
   15c30:	mov	r4, #0
   15c34:	mla	r0, r6, r3, r0
   15c38:	str	r1, [sp, #8]
   15c3c:	mla	r9, r7, r2, r0
   15c40:	cmp	r9, #0
   15c44:	blt	16178 <__assert_fail@plt+0x50f0>
   15c48:	ldr	r3, [sp, #28]
   15c4c:	mvn	r0, #0
   15c50:	mvn	r1, #-2147483648	; 0x80000000
   15c54:	str	r4, [sp, #4]
   15c58:	mvn	r8, #0
   15c5c:	mvn	r4, #-2147483648	; 0x80000000
   15c60:	bl	16de8 <__assert_fail@plt+0x5d60>
   15c64:	ldr	r6, [sp, #8]
   15c68:	ldr	r2, [sp, #24]
   15c6c:	ldr	r3, [sp, #28]
   15c70:	mov	r7, #1
   15c74:	subs	r0, r0, r6
   15c78:	sbcs	r0, r1, r9
   15c7c:	bge	161b4 <__assert_fail@plt+0x512c>
   15c80:	b	161cc <__assert_fail@plt+0x5144>
   15c84:	and	r0, r6, r7
   15c88:	cmn	r0, #1
   15c8c:	beq	15cc8 <__assert_fail@plt+0x4c40>
   15c90:	mov	r0, #0
   15c94:	mov	r1, #-2147483648	; 0x80000000
   15c98:	mov	r2, r6
   15c9c:	mov	r3, r7
   15ca0:	bl	16d14 <__assert_fail@plt+0x5c8c>
   15ca4:	ldr	r2, [sp, #24]
   15ca8:	ldr	r3, [sp, #28]
   15cac:	mov	r4, #1
   15cb0:	mov	r8, #-2147483648	; 0x80000000
   15cb4:	subs	r0, r0, r2
   15cb8:	sbcs	r0, r1, r3
   15cbc:	mov	r0, #0
   15cc0:	str	r0, [sp, #8]
   15cc4:	blt	163f4 <__assert_fail@plt+0x536c>
   15cc8:	umull	r1, r0, r6, r2
   15ccc:	mov	r4, #0
   15cd0:	mla	r0, r6, r3, r0
   15cd4:	str	r1, [sp, #8]
   15cd8:	mla	r8, r7, r2, r0
   15cdc:	cmp	r8, #0
   15ce0:	blt	163f4 <__assert_fail@plt+0x536c>
   15ce4:	ldr	r3, [sp, #28]
   15ce8:	mvn	r0, #0
   15cec:	mvn	r1, #-2147483648	; 0x80000000
   15cf0:	str	r4, [sp, #4]
   15cf4:	mvn	r9, #0
   15cf8:	mvn	r4, #-2147483648	; 0x80000000
   15cfc:	bl	16de8 <__assert_fail@plt+0x5d60>
   15d00:	ldr	r6, [sp, #8]
   15d04:	ldr	r2, [sp, #24]
   15d08:	ldr	r3, [sp, #28]
   15d0c:	mov	r7, #1
   15d10:	subs	r0, r0, r6
   15d14:	sbcs	r0, r1, r8
   15d18:	bge	16430 <__assert_fail@plt+0x53a8>
   15d1c:	b	16448 <__assert_fail@plt+0x53c0>
   15d20:	and	r0, r6, r7
   15d24:	cmn	r0, #1
   15d28:	beq	15d64 <__assert_fail@plt+0x4cdc>
   15d2c:	mov	r0, #0
   15d30:	mov	r1, #-2147483648	; 0x80000000
   15d34:	mov	r2, r6
   15d38:	mov	r3, r7
   15d3c:	bl	16d14 <__assert_fail@plt+0x5c8c>
   15d40:	ldr	r2, [sp, #24]
   15d44:	ldr	r3, [sp, #28]
   15d48:	mov	r4, #1
   15d4c:	mov	r9, #-2147483648	; 0x80000000
   15d50:	subs	r0, r0, r2
   15d54:	sbcs	r0, r1, r3
   15d58:	mov	r0, #0
   15d5c:	str	r0, [sp, #8]
   15d60:	blt	16610 <__assert_fail@plt+0x5588>
   15d64:	umull	r1, r0, r6, r2
   15d68:	mov	r4, #0
   15d6c:	mla	r0, r6, r3, r0
   15d70:	str	r1, [sp, #8]
   15d74:	mla	r9, r7, r2, r0
   15d78:	cmp	r9, #0
   15d7c:	blt	16610 <__assert_fail@plt+0x5588>
   15d80:	ldr	r3, [sp, #28]
   15d84:	mvn	r0, #0
   15d88:	mvn	r1, #-2147483648	; 0x80000000
   15d8c:	str	r4, [sp]
   15d90:	mvn	r8, #-2147483648	; 0x80000000
   15d94:	str	r0, [sp, #4]
   15d98:	mvn	r0, #0
   15d9c:	bl	16de8 <__assert_fail@plt+0x5d60>
   15da0:	ldr	r6, [sp, #8]
   15da4:	ldr	r2, [sp, #24]
   15da8:	ldr	r3, [sp, #28]
   15dac:	mov	r7, #1
   15db0:	subs	r0, r0, r6
   15db4:	sbcs	r0, r1, r9
   15db8:	bge	16650 <__assert_fail@plt+0x55c8>
   15dbc:	b	1666c <__assert_fail@plt+0x55e4>
   15dc0:	and	r0, r6, r7
   15dc4:	cmn	r0, #1
   15dc8:	beq	15df0 <__assert_fail@plt+0x4d68>
   15dcc:	mov	r0, #0
   15dd0:	mov	r1, #-2147483648	; 0x80000000
   15dd4:	mov	r2, r6
   15dd8:	mov	r3, r7
   15ddc:	bl	16d14 <__assert_fail@plt+0x5c8c>
   15de0:	ldr	r3, [sp, #28]
   15de4:	subs	r0, r0, #512	; 0x200
   15de8:	sbcs	r0, r1, #0
   15dec:	blt	15e30 <__assert_fail@plt+0x4da8>
   15df0:	lsl	r0, r7, #9
   15df4:	orr	r7, r0, r6, lsr #23
   15df8:	lsl	r6, r6, #9
   15dfc:	b	165a8 <__assert_fail@plt+0x5520>
   15e00:	and	r0, r6, r7
   15e04:	cmn	r0, #1
   15e08:	beq	15e50 <__assert_fail@plt+0x4dc8>
   15e0c:	mov	r0, #0
   15e10:	mov	r1, #-2147483648	; 0x80000000
   15e14:	mov	r2, r6
   15e18:	mov	r3, r7
   15e1c:	bl	16d14 <__assert_fail@plt+0x5c8c>
   15e20:	ldr	r3, [sp, #28]
   15e24:	subs	r0, r0, #2
   15e28:	sbcs	r0, r1, #0
   15e2c:	bge	15e50 <__assert_fail@plt+0x4dc8>
   15e30:	mvn	r0, #-2147483648	; 0x80000000
   15e34:	cmp	r7, #0
   15e38:	mvn	r6, #0
   15e3c:	mov	r3, #1
   15e40:	movlt	r0, #-2147483648	; 0x80000000
   15e44:	movwlt	r6, #0
   15e48:	mov	r7, r0
   15e4c:	b	165a8 <__assert_fail@plt+0x5520>
   15e50:	lsl	r0, r7, #1
   15e54:	orr	r7, r0, r6, lsr #31
   15e58:	lsl	r6, r6, #1
   15e5c:	b	165a8 <__assert_fail@plt+0x5520>
   15e60:	ldr	r6, [sp, #8]
   15e64:	mov	r0, #0
   15e68:	mov	r1, #-2147483648	; 0x80000000
   15e6c:	mov	r3, r9
   15e70:	str	r4, [sp, #4]
   15e74:	mov	r2, r6
   15e78:	bl	16d14 <__assert_fail@plt+0x5c8c>
   15e7c:	ldr	r2, [sp, #24]
   15e80:	ldr	r3, [sp, #28]
   15e84:	mov	r7, #1
   15e88:	mov	r8, #0
   15e8c:	mov	r4, #-2147483648	; 0x80000000
   15e90:	subs	r0, r0, r2
   15e94:	sbcs	r0, r1, r3
   15e98:	blt	15eec <__assert_fail@plt+0x4e64>
   15e9c:	umull	r8, r0, r6, r2
   15ea0:	ldr	r7, [sp, #4]
   15ea4:	mla	r0, r6, r3, r0
   15ea8:	mla	r4, r9, r2, r0
   15eac:	cmp	r4, #0
   15eb0:	blt	15eec <__assert_fail@plt+0x4e64>
   15eb4:	ldr	r3, [sp, #28]
   15eb8:	mvn	r0, #0
   15ebc:	mvn	r1, #-2147483648	; 0x80000000
   15ec0:	str	r7, [sp, #8]
   15ec4:	mvn	r7, #0
   15ec8:	mvn	r9, #-2147483648	; 0x80000000
   15ecc:	bl	16de8 <__assert_fail@plt+0x5d60>
   15ed0:	ldr	r2, [sp, #24]
   15ed4:	ldr	r3, [sp, #28]
   15ed8:	subs	r0, r0, r8
   15edc:	mov	r6, #1
   15ee0:	sbcs	r0, r1, r4
   15ee4:	bge	15f24 <__assert_fail@plt+0x4e9c>
   15ee8:	b	15f3c <__assert_fail@plt+0x4eb4>
   15eec:	mov	r0, #0
   15ef0:	mov	r1, #-2147483648	; 0x80000000
   15ef4:	mov	r2, r8
   15ef8:	mov	r3, r4
   15efc:	str	r7, [sp, #8]
   15f00:	bl	16d14 <__assert_fail@plt+0x5c8c>
   15f04:	ldr	r2, [sp, #24]
   15f08:	ldr	r3, [sp, #28]
   15f0c:	mov	r6, #1
   15f10:	mov	r7, #0
   15f14:	mov	r9, #-2147483648	; 0x80000000
   15f18:	subs	r0, r0, r2
   15f1c:	sbcs	r0, r1, r3
   15f20:	blt	15f7c <__assert_fail@plt+0x4ef4>
   15f24:	umull	r7, r0, r8, r2
   15f28:	ldr	r6, [sp, #8]
   15f2c:	mla	r0, r8, r3, r0
   15f30:	mla	r9, r4, r2, r0
   15f34:	cmp	r9, #0
   15f38:	blt	15f7c <__assert_fail@plt+0x4ef4>
   15f3c:	ldr	r3, [sp, #28]
   15f40:	mvn	r0, #0
   15f44:	mvn	r1, #-2147483648	; 0x80000000
   15f48:	str	r6, [sp, #8]
   15f4c:	mvn	r8, #0
   15f50:	mvn	r4, #-2147483648	; 0x80000000
   15f54:	bl	16de8 <__assert_fail@plt+0x5d60>
   15f58:	ldr	r2, [sp, #24]
   15f5c:	ldr	r3, [sp, #28]
   15f60:	subs	r0, r0, r7
   15f64:	sbcs	r0, r1, r9
   15f68:	bge	15fc0 <__assert_fail@plt+0x4f38>
   15f6c:	mov	r0, #1
   15f70:	mov	r6, #0
   15f74:	str	r0, [sp, #8]
   15f78:	b	15fd8 <__assert_fail@plt+0x4f50>
   15f7c:	mov	r0, #0
   15f80:	mov	r1, #-2147483648	; 0x80000000
   15f84:	mov	r2, r7
   15f88:	mov	r3, r9
   15f8c:	str	r6, [sp, #8]
   15f90:	bl	16d14 <__assert_fail@plt+0x5c8c>
   15f94:	ldr	r2, [sp, #24]
   15f98:	ldr	r3, [sp, #28]
   15f9c:	subs	r0, r0, r2
   15fa0:	sbcs	r0, r1, r3
   15fa4:	bge	15fc0 <__assert_fail@plt+0x4f38>
   15fa8:	mov	r0, #1
   15fac:	mov	r8, #0
   15fb0:	mov	r4, #-2147483648	; 0x80000000
   15fb4:	mov	r6, #0
   15fb8:	str	r0, [sp, #8]
   15fbc:	b	16010 <__assert_fail@plt+0x4f88>
   15fc0:	umull	r8, r0, r7, r2
   15fc4:	mov	r6, #0
   15fc8:	mla	r0, r7, r3, r0
   15fcc:	mla	r4, r9, r2, r0
   15fd0:	cmp	r4, #0
   15fd4:	blt	16010 <__assert_fail@plt+0x4f88>
   15fd8:	ldr	r3, [sp, #28]
   15fdc:	mvn	r0, #0
   15fe0:	mvn	r1, #-2147483648	; 0x80000000
   15fe4:	mvn	r9, #0
   15fe8:	mvn	r7, #-2147483648	; 0x80000000
   15fec:	bl	16de8 <__assert_fail@plt+0x5d60>
   15ff0:	ldr	r2, [sp, #24]
   15ff4:	ldr	r3, [sp, #28]
   15ff8:	subs	r0, r0, r8
   15ffc:	sbcs	r0, r1, r4
   16000:	bge	1604c <__assert_fail@plt+0x4fc4>
   16004:	mov	r0, #1
   16008:	str	r0, [sp, #8]
   1600c:	b	16060 <__assert_fail@plt+0x4fd8>
   16010:	mov	r0, #0
   16014:	mov	r1, #-2147483648	; 0x80000000
   16018:	mov	r2, r8
   1601c:	mov	r3, r4
   16020:	bl	16d14 <__assert_fail@plt+0x5c8c>
   16024:	ldr	r2, [sp, #24]
   16028:	ldr	r3, [sp, #28]
   1602c:	subs	r0, r0, r2
   16030:	sbcs	r0, r1, r3
   16034:	bge	1604c <__assert_fail@plt+0x4fc4>
   16038:	mov	r0, #1
   1603c:	mov	r9, #0
   16040:	mov	r7, #-2147483648	; 0x80000000
   16044:	str	r0, [sp, #8]
   16048:	b	1609c <__assert_fail@plt+0x5014>
   1604c:	umull	r9, r0, r8, r2
   16050:	mla	r0, r8, r3, r0
   16054:	mla	r7, r4, r2, r0
   16058:	cmp	r7, #0
   1605c:	blt	1609c <__assert_fail@plt+0x5014>
   16060:	ldr	r3, [sp, #28]
   16064:	mvn	r0, #0
   16068:	mvn	r1, #-2147483648	; 0x80000000
   1606c:	mvn	r8, #0
   16070:	mvn	r4, #-2147483648	; 0x80000000
   16074:	bl	16de8 <__assert_fail@plt+0x5d60>
   16078:	ldr	r2, [sp, #24]
   1607c:	ldr	r3, [sp, #28]
   16080:	subs	r0, r0, r9
   16084:	sbcs	r0, r1, r7
   16088:	bge	160dc <__assert_fail@plt+0x5054>
   1608c:	ldr	r9, [sp, #12]
   16090:	mov	r0, #1
   16094:	str	r0, [sp, #8]
   16098:	b	160f4 <__assert_fail@plt+0x506c>
   1609c:	mov	r0, #0
   160a0:	mov	r1, #-2147483648	; 0x80000000
   160a4:	mov	r2, r9
   160a8:	mov	r3, r7
   160ac:	bl	16d14 <__assert_fail@plt+0x5c8c>
   160b0:	ldr	r2, [sp, #24]
   160b4:	ldr	r3, [sp, #28]
   160b8:	subs	r0, r0, r2
   160bc:	sbcs	r0, r1, r3
   160c0:	bge	160dc <__assert_fail@plt+0x5054>
   160c4:	ldr	r9, [sp, #12]
   160c8:	mov	r0, #1
   160cc:	mov	r8, #0
   160d0:	mov	r4, #-2147483648	; 0x80000000
   160d4:	str	r0, [sp, #8]
   160d8:	b	16144 <__assert_fail@plt+0x50bc>
   160dc:	umull	r8, r0, r9, r2
   160e0:	mla	r0, r9, r3, r0
   160e4:	ldr	r9, [sp, #12]
   160e8:	mla	r4, r7, r2, r0
   160ec:	cmp	r4, #0
   160f0:	blt	16144 <__assert_fail@plt+0x50bc>
   160f4:	ldr	r3, [sp, #28]
   160f8:	mvn	r0, #0
   160fc:	mvn	r1, #-2147483648	; 0x80000000
   16100:	mvn	r6, #0
   16104:	bl	16de8 <__assert_fail@plt+0x5d60>
   16108:	ldr	r7, [sp, #24]
   1610c:	ldr	r3, [sp, #28]
   16110:	subs	r0, r0, r8
   16114:	mov	r2, #1
   16118:	sbcs	r0, r1, r4
   1611c:	mvn	r0, #-2147483648	; 0x80000000
   16120:	blt	16134 <__assert_fail@plt+0x50ac>
   16124:	umull	r6, r0, r8, r7
   16128:	mov	r2, #0
   1612c:	mla	r0, r8, r3, r0
   16130:	mla	r0, r4, r7, r0
   16134:	ldr	r1, [sp, #8]
   16138:	mov	r7, r0
   1613c:	orr	r3, r2, r1
   16140:	b	165a8 <__assert_fail@plt+0x5520>
   16144:	mov	r0, #0
   16148:	mov	r1, #-2147483648	; 0x80000000
   1614c:	mov	r2, r8
   16150:	mov	r3, r4
   16154:	bl	16d14 <__assert_fail@plt+0x5c8c>
   16158:	ldr	r7, [sp, #24]
   1615c:	ldr	r3, [sp, #28]
   16160:	mov	r2, #1
   16164:	subs	r0, r0, r7
   16168:	sbcs	r0, r1, r3
   1616c:	mov	r0, #-2147483648	; 0x80000000
   16170:	bge	16124 <__assert_fail@plt+0x509c>
   16174:	b	16134 <__assert_fail@plt+0x50ac>
   16178:	ldr	r6, [sp, #8]
   1617c:	mov	r0, #0
   16180:	mov	r1, #-2147483648	; 0x80000000
   16184:	mov	r3, r9
   16188:	str	r4, [sp, #4]
   1618c:	mov	r2, r6
   16190:	bl	16d14 <__assert_fail@plt+0x5c8c>
   16194:	ldr	r2, [sp, #24]
   16198:	ldr	r3, [sp, #28]
   1619c:	mov	r7, #1
   161a0:	mov	r8, #0
   161a4:	mov	r4, #-2147483648	; 0x80000000
   161a8:	subs	r0, r0, r2
   161ac:	sbcs	r0, r1, r3
   161b0:	blt	16208 <__assert_fail@plt+0x5180>
   161b4:	umull	r8, r0, r6, r2
   161b8:	ldr	r7, [sp, #4]
   161bc:	mla	r0, r6, r3, r0
   161c0:	mla	r4, r9, r2, r0
   161c4:	cmp	r4, #0
   161c8:	blt	16208 <__assert_fail@plt+0x5180>
   161cc:	ldr	r3, [sp, #28]
   161d0:	mvn	r0, #0
   161d4:	mvn	r1, #-2147483648	; 0x80000000
   161d8:	str	r7, [sp, #4]
   161dc:	mvn	r7, #0
   161e0:	mvn	r9, #-2147483648	; 0x80000000
   161e4:	bl	16de8 <__assert_fail@plt+0x5d60>
   161e8:	ldr	r2, [sp, #24]
   161ec:	ldr	r3, [sp, #28]
   161f0:	subs	r0, r0, r8
   161f4:	mov	r6, #1
   161f8:	sbcs	r0, r1, r4
   161fc:	str	r6, [sp, #8]
   16200:	bge	16244 <__assert_fail@plt+0x51bc>
   16204:	b	16260 <__assert_fail@plt+0x51d8>
   16208:	mov	r0, #0
   1620c:	mov	r1, #-2147483648	; 0x80000000
   16210:	mov	r2, r8
   16214:	mov	r3, r4
   16218:	str	r7, [sp, #4]
   1621c:	bl	16d14 <__assert_fail@plt+0x5c8c>
   16220:	ldr	r2, [sp, #24]
   16224:	ldr	r3, [sp, #28]
   16228:	mov	r7, #1
   1622c:	mov	r9, #-2147483648	; 0x80000000
   16230:	str	r7, [sp, #8]
   16234:	mov	r7, #0
   16238:	subs	r0, r0, r2
   1623c:	sbcs	r0, r1, r3
   16240:	blt	16298 <__assert_fail@plt+0x5210>
   16244:	umull	r7, r0, r8, r2
   16248:	mla	r0, r8, r3, r0
   1624c:	mla	r9, r4, r2, r0
   16250:	ldr	r0, [sp, #4]
   16254:	cmp	r9, #0
   16258:	str	r0, [sp, #8]
   1625c:	blt	16298 <__assert_fail@plt+0x5210>
   16260:	ldr	r3, [sp, #28]
   16264:	mvn	r0, #0
   16268:	mvn	r1, #-2147483648	; 0x80000000
   1626c:	mvn	r4, #0
   16270:	mvn	r8, #-2147483648	; 0x80000000
   16274:	bl	16de8 <__assert_fail@plt+0x5d60>
   16278:	ldr	r2, [sp, #24]
   1627c:	ldr	r3, [sp, #28]
   16280:	subs	r0, r0, r7
   16284:	sbcs	r0, r1, r9
   16288:	bge	162d4 <__assert_fail@plt+0x524c>
   1628c:	mov	r0, #1
   16290:	str	r0, [sp, #8]
   16294:	b	162e8 <__assert_fail@plt+0x5260>
   16298:	mov	r0, #0
   1629c:	mov	r1, #-2147483648	; 0x80000000
   162a0:	mov	r2, r7
   162a4:	mov	r3, r9
   162a8:	bl	16d14 <__assert_fail@plt+0x5c8c>
   162ac:	ldr	r2, [sp, #24]
   162b0:	ldr	r3, [sp, #28]
   162b4:	subs	r0, r0, r2
   162b8:	sbcs	r0, r1, r3
   162bc:	bge	162d4 <__assert_fail@plt+0x524c>
   162c0:	mov	r0, #1
   162c4:	mov	r4, #0
   162c8:	mov	r8, #-2147483648	; 0x80000000
   162cc:	str	r0, [sp, #8]
   162d0:	b	1631c <__assert_fail@plt+0x5294>
   162d4:	umull	r4, r0, r7, r2
   162d8:	mla	r0, r7, r3, r0
   162dc:	mla	r8, r9, r2, r0
   162e0:	cmp	r8, #0
   162e4:	blt	1631c <__assert_fail@plt+0x5294>
   162e8:	ldr	r3, [sp, #28]
   162ec:	mvn	r0, #0
   162f0:	mvn	r1, #-2147483648	; 0x80000000
   162f4:	mvn	r6, #0
   162f8:	mvn	r9, #-2147483648	; 0x80000000
   162fc:	bl	16de8 <__assert_fail@plt+0x5d60>
   16300:	ldr	r2, [sp, #24]
   16304:	ldr	r3, [sp, #28]
   16308:	subs	r0, r0, r4
   1630c:	sbcs	r0, r1, r8
   16310:	bge	16354 <__assert_fail@plt+0x52cc>
   16314:	mov	r8, #1
   16318:	b	1636c <__assert_fail@plt+0x52e4>
   1631c:	mov	r0, #0
   16320:	mov	r1, #-2147483648	; 0x80000000
   16324:	mov	r2, r4
   16328:	mov	r3, r8
   1632c:	bl	16d14 <__assert_fail@plt+0x5c8c>
   16330:	ldr	r2, [sp, #24]
   16334:	ldr	r3, [sp, #28]
   16338:	subs	r0, r0, r2
   1633c:	sbcs	r0, r1, r3
   16340:	bge	16354 <__assert_fail@plt+0x52cc>
   16344:	mov	r8, #1
   16348:	mov	r6, #0
   1634c:	mov	r9, #-2147483648	; 0x80000000
   16350:	b	163bc <__assert_fail@plt+0x5334>
   16354:	umull	r6, r0, r4, r2
   16358:	mla	r0, r4, r3, r0
   1635c:	mla	r9, r8, r2, r0
   16360:	ldr	r8, [sp, #8]
   16364:	cmp	r9, #0
   16368:	blt	163bc <__assert_fail@plt+0x5334>
   1636c:	ldr	r3, [sp, #28]
   16370:	mvn	r0, #0
   16374:	mvn	r1, #-2147483648	; 0x80000000
   16378:	mvn	r4, #0
   1637c:	mvn	r7, #-2147483648	; 0x80000000
   16380:	bl	16de8 <__assert_fail@plt+0x5d60>
   16384:	ldr	r3, [sp, #24]
   16388:	ldr	ip, [sp, #28]
   1638c:	subs	r0, r0, r6
   16390:	mov	r2, #1
   16394:	sbcs	r0, r1, r9
   16398:	blt	163ac <__assert_fail@plt+0x5324>
   1639c:	umull	r4, r0, r6, r3
   163a0:	mov	r2, #0
   163a4:	mla	r0, r6, ip, r0
   163a8:	mla	r7, r9, r3, r0
   163ac:	ldr	r9, [sp, #12]
   163b0:	orr	r3, r2, r8
   163b4:	mov	r6, r4
   163b8:	b	165a8 <__assert_fail@plt+0x5520>
   163bc:	mov	r0, #0
   163c0:	mov	r1, #-2147483648	; 0x80000000
   163c4:	mov	r2, r6
   163c8:	mov	r3, r9
   163cc:	bl	16d14 <__assert_fail@plt+0x5c8c>
   163d0:	ldr	r3, [sp, #24]
   163d4:	ldr	ip, [sp, #28]
   163d8:	mov	r2, #1
   163dc:	mov	r4, #0
   163e0:	mov	r7, #-2147483648	; 0x80000000
   163e4:	subs	r0, r0, r3
   163e8:	sbcs	r0, r1, ip
   163ec:	bge	1639c <__assert_fail@plt+0x5314>
   163f0:	b	163ac <__assert_fail@plt+0x5324>
   163f4:	ldr	r6, [sp, #8]
   163f8:	mov	r0, #0
   163fc:	mov	r1, #-2147483648	; 0x80000000
   16400:	mov	r3, r8
   16404:	str	r4, [sp, #4]
   16408:	mov	r2, r6
   1640c:	bl	16d14 <__assert_fail@plt+0x5c8c>
   16410:	ldr	r2, [sp, #24]
   16414:	ldr	r3, [sp, #28]
   16418:	mov	r7, #1
   1641c:	mov	r9, #0
   16420:	mov	r4, #-2147483648	; 0x80000000
   16424:	subs	r0, r0, r2
   16428:	sbcs	r0, r1, r3
   1642c:	blt	16484 <__assert_fail@plt+0x53fc>
   16430:	umull	r9, r0, r6, r2
   16434:	ldr	r7, [sp, #4]
   16438:	mla	r0, r6, r3, r0
   1643c:	mla	r4, r8, r2, r0
   16440:	cmp	r4, #0
   16444:	blt	16484 <__assert_fail@plt+0x53fc>
   16448:	ldr	r3, [sp, #28]
   1644c:	mvn	r0, #0
   16450:	mvn	r1, #-2147483648	; 0x80000000
   16454:	str	r7, [sp, #4]
   16458:	mvn	r8, #0
   1645c:	mvn	r7, #-2147483648	; 0x80000000
   16460:	bl	16de8 <__assert_fail@plt+0x5d60>
   16464:	ldr	r2, [sp, #24]
   16468:	ldr	r3, [sp, #28]
   1646c:	subs	r0, r0, r9
   16470:	mov	r6, #1
   16474:	sbcs	r0, r1, r4
   16478:	str	r6, [sp, #8]
   1647c:	bge	164c0 <__assert_fail@plt+0x5438>
   16480:	b	164dc <__assert_fail@plt+0x5454>
   16484:	mov	r0, #0
   16488:	mov	r1, #-2147483648	; 0x80000000
   1648c:	mov	r2, r9
   16490:	mov	r3, r4
   16494:	str	r7, [sp, #4]
   16498:	bl	16d14 <__assert_fail@plt+0x5c8c>
   1649c:	ldr	r2, [sp, #24]
   164a0:	ldr	r3, [sp, #28]
   164a4:	mov	r7, #1
   164a8:	mov	r8, #0
   164ac:	str	r7, [sp, #8]
   164b0:	mov	r7, #-2147483648	; 0x80000000
   164b4:	subs	r0, r0, r2
   164b8:	sbcs	r0, r1, r3
   164bc:	blt	16510 <__assert_fail@plt+0x5488>
   164c0:	umull	r8, r0, r9, r2
   164c4:	mla	r0, r9, r3, r0
   164c8:	mla	r7, r4, r2, r0
   164cc:	ldr	r0, [sp, #4]
   164d0:	cmp	r7, #0
   164d4:	str	r0, [sp, #8]
   164d8:	blt	16510 <__assert_fail@plt+0x5488>
   164dc:	ldr	r3, [sp, #28]
   164e0:	mvn	r0, #0
   164e4:	mvn	r1, #-2147483648	; 0x80000000
   164e8:	mvn	r4, #0
   164ec:	mvn	r9, #-2147483648	; 0x80000000
   164f0:	bl	16de8 <__assert_fail@plt+0x5d60>
   164f4:	ldr	r2, [sp, #24]
   164f8:	ldr	r3, [sp, #28]
   164fc:	subs	r0, r0, r8
   16500:	sbcs	r0, r1, r7
   16504:	bge	16548 <__assert_fail@plt+0x54c0>
   16508:	mov	r8, #1
   1650c:	b	16560 <__assert_fail@plt+0x54d8>
   16510:	mov	r0, #0
   16514:	mov	r1, #-2147483648	; 0x80000000
   16518:	mov	r2, r8
   1651c:	mov	r3, r7
   16520:	bl	16d14 <__assert_fail@plt+0x5c8c>
   16524:	ldr	r2, [sp, #24]
   16528:	ldr	r3, [sp, #28]
   1652c:	subs	r0, r0, r2
   16530:	sbcs	r0, r1, r3
   16534:	bge	16548 <__assert_fail@plt+0x54c0>
   16538:	mov	r8, #1
   1653c:	mov	r4, #0
   16540:	mov	r9, #-2147483648	; 0x80000000
   16544:	b	165d8 <__assert_fail@plt+0x5550>
   16548:	umull	r4, r0, r8, r2
   1654c:	mla	r0, r8, r3, r0
   16550:	ldr	r8, [sp, #8]
   16554:	mla	r9, r7, r2, r0
   16558:	cmp	r9, #0
   1655c:	blt	165d8 <__assert_fail@plt+0x5550>
   16560:	ldr	r3, [sp, #28]
   16564:	mvn	r0, #0
   16568:	mvn	r1, #-2147483648	; 0x80000000
   1656c:	mvn	r6, #0
   16570:	mvn	r7, #-2147483648	; 0x80000000
   16574:	bl	16de8 <__assert_fail@plt+0x5d60>
   16578:	ldr	r3, [sp, #24]
   1657c:	ldr	ip, [sp, #28]
   16580:	subs	r0, r0, r4
   16584:	mov	r2, #1
   16588:	sbcs	r0, r1, r9
   1658c:	blt	165a0 <__assert_fail@plt+0x5518>
   16590:	umull	r6, r0, r4, r3
   16594:	mov	r2, #0
   16598:	mla	r0, r4, ip, r0
   1659c:	mla	r7, r9, r3, r0
   165a0:	ldr	r9, [sp, #12]
   165a4:	orr	r3, r2, r8
   165a8:	ldr	r1, [sp, #20]
   165ac:	ldr	r2, [sp, #16]
   165b0:	orr	r5, r3, r5
   165b4:	add	r0, r1, r2
   165b8:	str	r0, [sl]
   165bc:	ldrb	r0, [r1, r2]
   165c0:	cmp	r0, #0
   165c4:	orrne	r5, r5, #2
   165c8:	strd	r6, [r9]
   165cc:	mov	r0, r5
   165d0:	sub	sp, fp, #28
   165d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   165d8:	mov	r0, #0
   165dc:	mov	r1, #-2147483648	; 0x80000000
   165e0:	mov	r2, r4
   165e4:	mov	r3, r9
   165e8:	bl	16d14 <__assert_fail@plt+0x5c8c>
   165ec:	ldr	r3, [sp, #24]
   165f0:	ldr	ip, [sp, #28]
   165f4:	mov	r2, #1
   165f8:	mov	r6, #0
   165fc:	mov	r7, #-2147483648	; 0x80000000
   16600:	subs	r0, r0, r3
   16604:	sbcs	r0, r1, ip
   16608:	bge	16590 <__assert_fail@plt+0x5508>
   1660c:	b	165a0 <__assert_fail@plt+0x5518>
   16610:	ldr	r6, [sp, #8]
   16614:	mov	r0, #0
   16618:	mov	r1, #-2147483648	; 0x80000000
   1661c:	mov	r3, r9
   16620:	str	r4, [sp]
   16624:	mov	r2, r6
   16628:	bl	16d14 <__assert_fail@plt+0x5c8c>
   1662c:	ldr	r2, [sp, #24]
   16630:	ldr	r3, [sp, #28]
   16634:	mov	r7, #1
   16638:	mov	r8, #-2147483648	; 0x80000000
   1663c:	subs	r0, r0, r2
   16640:	sbcs	r0, r1, r3
   16644:	mov	r0, #0
   16648:	str	r0, [sp, #4]
   1664c:	blt	166ac <__assert_fail@plt+0x5624>
   16650:	umull	r1, r0, r6, r2
   16654:	ldr	r7, [sp]
   16658:	mla	r0, r6, r3, r0
   1665c:	str	r1, [sp, #4]
   16660:	mla	r8, r9, r2, r0
   16664:	cmp	r8, #0
   16668:	blt	166ac <__assert_fail@plt+0x5624>
   1666c:	ldr	r3, [sp, #28]
   16670:	mvn	r0, #0
   16674:	mvn	r1, #-2147483648	; 0x80000000
   16678:	str	r7, [sp]
   1667c:	mvn	r7, #0
   16680:	mvn	r4, #-2147483648	; 0x80000000
   16684:	bl	16de8 <__assert_fail@plt+0x5d60>
   16688:	mov	r6, #1
   1668c:	ldr	r2, [sp, #24]
   16690:	ldr	r3, [sp, #28]
   16694:	str	r6, [sp, #8]
   16698:	ldr	r6, [sp, #4]
   1669c:	subs	r0, r0, r6
   166a0:	sbcs	r0, r1, r8
   166a4:	bge	166ec <__assert_fail@plt+0x5664>
   166a8:	b	16708 <__assert_fail@plt+0x5680>
   166ac:	ldr	r6, [sp, #4]
   166b0:	mov	r0, #0
   166b4:	mov	r1, #-2147483648	; 0x80000000
   166b8:	mov	r3, r8
   166bc:	str	r7, [sp]
   166c0:	mov	r2, r6
   166c4:	bl	16d14 <__assert_fail@plt+0x5c8c>
   166c8:	ldr	r2, [sp, #24]
   166cc:	ldr	r3, [sp, #28]
   166d0:	mov	r7, #1
   166d4:	mov	r4, #-2147483648	; 0x80000000
   166d8:	str	r7, [sp, #8]
   166dc:	mov	r7, #0
   166e0:	subs	r0, r0, r2
   166e4:	sbcs	r0, r1, r3
   166e8:	blt	16740 <__assert_fail@plt+0x56b8>
   166ec:	umull	r7, r0, r6, r2
   166f0:	mla	r0, r6, r3, r0
   166f4:	mla	r4, r8, r2, r0
   166f8:	ldr	r0, [sp]
   166fc:	cmp	r4, #0
   16700:	str	r0, [sp, #8]
   16704:	blt	16740 <__assert_fail@plt+0x56b8>
   16708:	ldr	r3, [sp, #28]
   1670c:	mvn	r0, #0
   16710:	mvn	r1, #-2147483648	; 0x80000000
   16714:	mvn	r9, #0
   16718:	mvn	r8, #-2147483648	; 0x80000000
   1671c:	bl	16de8 <__assert_fail@plt+0x5d60>
   16720:	ldr	r2, [sp, #24]
   16724:	ldr	r3, [sp, #28]
   16728:	subs	r0, r0, r7
   1672c:	sbcs	r0, r1, r4
   16730:	bge	1677c <__assert_fail@plt+0x56f4>
   16734:	mov	r0, #1
   16738:	str	r0, [sp, #8]
   1673c:	b	16790 <__assert_fail@plt+0x5708>
   16740:	mov	r0, #0
   16744:	mov	r1, #-2147483648	; 0x80000000
   16748:	mov	r2, r7
   1674c:	mov	r3, r4
   16750:	bl	16d14 <__assert_fail@plt+0x5c8c>
   16754:	ldr	r2, [sp, #24]
   16758:	ldr	r3, [sp, #28]
   1675c:	subs	r0, r0, r2
   16760:	sbcs	r0, r1, r3
   16764:	bge	1677c <__assert_fail@plt+0x56f4>
   16768:	mov	r0, #1
   1676c:	mov	r9, #0
   16770:	mov	r8, #-2147483648	; 0x80000000
   16774:	str	r0, [sp, #8]
   16778:	b	167c8 <__assert_fail@plt+0x5740>
   1677c:	umull	r9, r0, r7, r2
   16780:	mla	r0, r7, r3, r0
   16784:	mla	r8, r4, r2, r0
   16788:	cmp	r8, #0
   1678c:	blt	167c8 <__assert_fail@plt+0x5740>
   16790:	ldr	r3, [sp, #28]
   16794:	mvn	r0, #0
   16798:	mvn	r1, #-2147483648	; 0x80000000
   1679c:	mvn	r4, #0
   167a0:	mvn	r7, #-2147483648	; 0x80000000
   167a4:	bl	16de8 <__assert_fail@plt+0x5d60>
   167a8:	ldr	r2, [sp, #24]
   167ac:	ldr	r3, [sp, #28]
   167b0:	subs	r0, r0, r9
   167b4:	sbcs	r0, r1, r8
   167b8:	bge	16804 <__assert_fail@plt+0x577c>
   167bc:	mov	r0, #1
   167c0:	str	r0, [sp, #8]
   167c4:	b	16818 <__assert_fail@plt+0x5790>
   167c8:	mov	r0, #0
   167cc:	mov	r1, #-2147483648	; 0x80000000
   167d0:	mov	r2, r9
   167d4:	mov	r3, r8
   167d8:	bl	16d14 <__assert_fail@plt+0x5c8c>
   167dc:	ldr	r2, [sp, #24]
   167e0:	ldr	r3, [sp, #28]
   167e4:	subs	r0, r0, r2
   167e8:	sbcs	r0, r1, r3
   167ec:	bge	16804 <__assert_fail@plt+0x577c>
   167f0:	mov	r0, #1
   167f4:	mov	r4, #0
   167f8:	mov	r7, #-2147483648	; 0x80000000
   167fc:	str	r0, [sp, #8]
   16800:	b	16850 <__assert_fail@plt+0x57c8>
   16804:	umull	r4, r0, r9, r2
   16808:	mla	r0, r9, r3, r0
   1680c:	mla	r7, r8, r2, r0
   16810:	cmp	r7, #0
   16814:	blt	16850 <__assert_fail@plt+0x57c8>
   16818:	ldr	r3, [sp, #28]
   1681c:	mvn	r0, #0
   16820:	mvn	r1, #-2147483648	; 0x80000000
   16824:	mvn	r8, #0
   16828:	mvn	r9, #-2147483648	; 0x80000000
   1682c:	bl	16de8 <__assert_fail@plt+0x5d60>
   16830:	ldr	r2, [sp, #24]
   16834:	ldr	r3, [sp, #28]
   16838:	subs	r0, r0, r4
   1683c:	sbcs	r0, r1, r7
   16840:	bge	1688c <__assert_fail@plt+0x5804>
   16844:	mov	r0, #1
   16848:	str	r0, [sp, #8]
   1684c:	b	168a0 <__assert_fail@plt+0x5818>
   16850:	mov	r0, #0
   16854:	mov	r1, #-2147483648	; 0x80000000
   16858:	mov	r2, r4
   1685c:	mov	r3, r7
   16860:	bl	16d14 <__assert_fail@plt+0x5c8c>
   16864:	ldr	r2, [sp, #24]
   16868:	ldr	r3, [sp, #28]
   1686c:	subs	r0, r0, r2
   16870:	sbcs	r0, r1, r3
   16874:	bge	1688c <__assert_fail@plt+0x5804>
   16878:	mov	r0, #1
   1687c:	mov	r8, #0
   16880:	mov	r9, #-2147483648	; 0x80000000
   16884:	str	r0, [sp, #8]
   16888:	b	168dc <__assert_fail@plt+0x5854>
   1688c:	umull	r8, r0, r4, r2
   16890:	mla	r0, r4, r3, r0
   16894:	mla	r9, r7, r2, r0
   16898:	cmp	r9, #0
   1689c:	blt	168dc <__assert_fail@plt+0x5854>
   168a0:	ldr	r3, [sp, #28]
   168a4:	mvn	r0, #0
   168a8:	mvn	r1, #-2147483648	; 0x80000000
   168ac:	mvn	r4, #0
   168b0:	mvn	r6, #-2147483648	; 0x80000000
   168b4:	bl	16de8 <__assert_fail@plt+0x5d60>
   168b8:	ldr	r2, [sp, #24]
   168bc:	ldr	r3, [sp, #28]
   168c0:	subs	r0, r0, r8
   168c4:	sbcs	r0, r1, r9
   168c8:	bge	1691c <__assert_fail@plt+0x5894>
   168cc:	ldr	r9, [sp, #12]
   168d0:	mov	r0, #1
   168d4:	str	r0, [sp, #8]
   168d8:	b	16934 <__assert_fail@plt+0x58ac>
   168dc:	mov	r0, #0
   168e0:	mov	r1, #-2147483648	; 0x80000000
   168e4:	mov	r2, r8
   168e8:	mov	r3, r9
   168ec:	bl	16d14 <__assert_fail@plt+0x5c8c>
   168f0:	ldr	r2, [sp, #24]
   168f4:	ldr	r3, [sp, #28]
   168f8:	subs	r0, r0, r2
   168fc:	sbcs	r0, r1, r3
   16900:	bge	1691c <__assert_fail@plt+0x5894>
   16904:	ldr	r9, [sp, #12]
   16908:	mov	r0, #1
   1690c:	mov	r4, #0
   16910:	mov	r6, #-2147483648	; 0x80000000
   16914:	str	r0, [sp, #8]
   16918:	b	16980 <__assert_fail@plt+0x58f8>
   1691c:	umull	r4, r0, r8, r2
   16920:	mla	r0, r8, r3, r0
   16924:	mla	r6, r9, r2, r0
   16928:	ldr	r9, [sp, #12]
   1692c:	cmp	r6, #0
   16930:	blt	16980 <__assert_fail@plt+0x58f8>
   16934:	ldr	r3, [sp, #28]
   16938:	mvn	r0, #0
   1693c:	mvn	r1, #-2147483648	; 0x80000000
   16940:	mov	r8, r6
   16944:	mvn	r6, #0
   16948:	mvn	r7, #-2147483648	; 0x80000000
   1694c:	bl	16de8 <__assert_fail@plt+0x5d60>
   16950:	ldr	r3, [sp, #24]
   16954:	ldr	ip, [sp, #28]
   16958:	subs	r0, r0, r4
   1695c:	mov	r2, #1
   16960:	sbcs	r0, r1, r8
   16964:	blt	16978 <__assert_fail@plt+0x58f0>
   16968:	umull	r6, r0, r4, r3
   1696c:	mov	r2, #0
   16970:	mla	r0, r4, ip, r0
   16974:	mla	r7, r8, r3, r0
   16978:	ldr	r0, [sp, #8]
   1697c:	b	15ac4 <__assert_fail@plt+0x4a3c>
   16980:	mov	r0, #0
   16984:	mov	r1, #-2147483648	; 0x80000000
   16988:	mov	r2, r4
   1698c:	mov	r3, r6
   16990:	bl	16d14 <__assert_fail@plt+0x5c8c>
   16994:	ldr	r3, [sp, #24]
   16998:	ldr	ip, [sp, #28]
   1699c:	mov	r8, r6
   169a0:	mov	r2, #1
   169a4:	mov	r6, #0
   169a8:	mov	r7, #-2147483648	; 0x80000000
   169ac:	subs	r0, r0, r3
   169b0:	sbcs	r0, r1, ip
   169b4:	bge	16968 <__assert_fail@plt+0x58e0>
   169b8:	b	16978 <__assert_fail@plt+0x58f0>
   169bc:	movw	r0, #31553	; 0x7b41
   169c0:	movw	r1, #31591	; 0x7b67
   169c4:	movw	r3, #31607	; 0x7b77
   169c8:	mov	r2, #85	; 0x55
   169cc:	movt	r0, #1
   169d0:	movt	r1, #1
   169d4:	movt	r3, #1
   169d8:	bl	11088 <__assert_fail@plt>
   169dc:	clz	r2, r1
   169e0:	clz	r3, r0
   169e4:	lsr	r2, r2, #5
   169e8:	lsr	r3, r3, #5
   169ec:	orrs	r2, r3, r2
   169f0:	movwne	r1, #1
   169f4:	movwne	r0, #1
   169f8:	cmp	r1, #0
   169fc:	beq	16a2c <__assert_fail@plt+0x59a4>
   16a00:	mvn	r2, #-2147483648	; 0x80000000
   16a04:	udiv	r2, r2, r1
   16a08:	cmp	r2, r0
   16a0c:	bcs	16a2c <__assert_fail@plt+0x59a4>
   16a10:	push	{fp, lr}
   16a14:	mov	fp, sp
   16a18:	bl	10fa4 <__errno_location@plt>
   16a1c:	mov	r1, #12
   16a20:	str	r1, [r0]
   16a24:	mov	r0, #0
   16a28:	pop	{fp, pc}
   16a2c:	b	10e24 <calloc@plt>
   16a30:	cmp	r0, #0
   16a34:	movweq	r0, #1
   16a38:	cmn	r0, #1
   16a3c:	ble	16a44 <__assert_fail@plt+0x59bc>
   16a40:	b	10f38 <malloc@plt>
   16a44:	push	{fp, lr}
   16a48:	mov	fp, sp
   16a4c:	bl	10fa4 <__errno_location@plt>
   16a50:	mov	r1, #12
   16a54:	str	r1, [r0]
   16a58:	mov	r0, #0
   16a5c:	pop	{fp, pc}
   16a60:	push	{fp, lr}
   16a64:	mov	fp, sp
   16a68:	cmp	r0, #0
   16a6c:	beq	16a88 <__assert_fail@plt+0x5a00>
   16a70:	cmp	r1, #0
   16a74:	beq	16a94 <__assert_fail@plt+0x5a0c>
   16a78:	cmn	r1, #1
   16a7c:	ble	16aa0 <__assert_fail@plt+0x5a18>
   16a80:	pop	{fp, lr}
   16a84:	b	10ecc <realloc@plt>
   16a88:	mov	r0, r1
   16a8c:	pop	{fp, lr}
   16a90:	b	16a30 <__assert_fail@plt+0x59a8>
   16a94:	bl	12630 <__assert_fail@plt+0x15a8>
   16a98:	mov	r0, #0
   16a9c:	pop	{fp, pc}
   16aa0:	bl	10fa4 <__errno_location@plt>
   16aa4:	mov	r1, #12
   16aa8:	str	r1, [r0]
   16aac:	mov	r0, #0
   16ab0:	pop	{fp, pc}
   16ab4:	push	{r4, r5, r6, sl, fp, lr}
   16ab8:	add	fp, sp, #16
   16abc:	mov	r4, r0
   16ac0:	bl	10f14 <__fpending@plt>
   16ac4:	ldr	r6, [r4]
   16ac8:	mov	r5, r0
   16acc:	mov	r0, r4
   16ad0:	bl	12538 <__assert_fail@plt+0x14b0>
   16ad4:	tst	r6, #32
   16ad8:	bne	16b10 <__assert_fail@plt+0x5a88>
   16adc:	cmp	r0, #0
   16ae0:	mov	r4, r0
   16ae4:	mvnne	r4, #0
   16ae8:	cmp	r5, #0
   16aec:	bne	16b1c <__assert_fail@plt+0x5a94>
   16af0:	cmp	r0, #0
   16af4:	beq	16b1c <__assert_fail@plt+0x5a94>
   16af8:	bl	10fa4 <__errno_location@plt>
   16afc:	ldr	r0, [r0]
   16b00:	subs	r4, r0, #9
   16b04:	mvnne	r4, #0
   16b08:	mov	r0, r4
   16b0c:	pop	{r4, r5, r6, sl, fp, pc}
   16b10:	mvn	r4, #0
   16b14:	cmp	r0, #0
   16b18:	beq	16b24 <__assert_fail@plt+0x5a9c>
   16b1c:	mov	r0, r4
   16b20:	pop	{r4, r5, r6, sl, fp, pc}
   16b24:	bl	10fa4 <__errno_location@plt>
   16b28:	mov	r1, #0
   16b2c:	str	r1, [r0]
   16b30:	mov	r0, r4
   16b34:	pop	{r4, r5, r6, sl, fp, pc}
   16b38:	push	{fp, lr}
   16b3c:	mov	fp, sp
   16b40:	mov	r0, #14
   16b44:	bl	11034 <nl_langinfo@plt>
   16b48:	movw	r1, #29944	; 0x74f8
   16b4c:	cmp	r0, #0
   16b50:	movt	r1, #1
   16b54:	movne	r1, r0
   16b58:	movw	r0, #31685	; 0x7bc5
   16b5c:	ldrb	r2, [r1]
   16b60:	movt	r0, #1
   16b64:	cmp	r2, #0
   16b68:	movne	r0, r1
   16b6c:	pop	{fp, pc}
   16b70:	push	{r4, r5, r6, r7, fp, lr}
   16b74:	add	fp, sp, #16
   16b78:	sub	sp, sp, #8
   16b7c:	add	r5, sp, #4
   16b80:	cmp	r0, #0
   16b84:	mov	r7, r2
   16b88:	mov	r4, r1
   16b8c:	movne	r5, r0
   16b90:	mov	r0, r5
   16b94:	bl	10f20 <mbrtowc@plt>
   16b98:	mov	r6, r0
   16b9c:	cmp	r7, #0
   16ba0:	beq	16bc4 <__assert_fail@plt+0x5b3c>
   16ba4:	cmn	r6, #2
   16ba8:	bcc	16bc4 <__assert_fail@plt+0x5b3c>
   16bac:	mov	r0, #0
   16bb0:	bl	16c0c <__assert_fail@plt+0x5b84>
   16bb4:	cmp	r0, #0
   16bb8:	ldrbeq	r0, [r4]
   16bbc:	moveq	r6, #1
   16bc0:	streq	r0, [r5]
   16bc4:	mov	r0, r6
   16bc8:	sub	sp, fp, #16
   16bcc:	pop	{r4, r5, r6, r7, fp, pc}
   16bd0:	cmp	r2, #0
   16bd4:	beq	16c04 <__assert_fail@plt+0x5b7c>
   16bd8:	mvn	r3, #0
   16bdc:	udiv	r3, r3, r2
   16be0:	cmp	r3, r1
   16be4:	bcs	16c04 <__assert_fail@plt+0x5b7c>
   16be8:	push	{fp, lr}
   16bec:	mov	fp, sp
   16bf0:	bl	10fa4 <__errno_location@plt>
   16bf4:	mov	r1, #12
   16bf8:	str	r1, [r0]
   16bfc:	mov	r0, #0
   16c00:	pop	{fp, pc}
   16c04:	mul	r1, r2, r1
   16c08:	b	16a60 <__assert_fail@plt+0x59d8>
   16c0c:	push	{r4, sl, fp, lr}
   16c10:	add	fp, sp, #8
   16c14:	sub	sp, sp, #264	; 0x108
   16c18:	add	r1, sp, #7
   16c1c:	movw	r2, #257	; 0x101
   16c20:	bl	16c70 <__assert_fail@plt+0x5be8>
   16c24:	mov	r4, #0
   16c28:	cmp	r0, #0
   16c2c:	bne	16c64 <__assert_fail@plt+0x5bdc>
   16c30:	movw	r1, #31691	; 0x7bcb
   16c34:	add	r0, sp, #7
   16c38:	movt	r1, #1
   16c3c:	bl	10e48 <strcmp@plt>
   16c40:	cmp	r0, #0
   16c44:	beq	16c64 <__assert_fail@plt+0x5bdc>
   16c48:	movw	r1, #31693	; 0x7bcd
   16c4c:	add	r0, sp, #7
   16c50:	movt	r1, #1
   16c54:	bl	10e48 <strcmp@plt>
   16c58:	mov	r4, r0
   16c5c:	cmp	r0, #0
   16c60:	movwne	r4, #1
   16c64:	mov	r0, r4
   16c68:	sub	sp, fp, #8
   16c6c:	pop	{r4, sl, fp, pc}
   16c70:	push	{r4, r5, r6, r7, fp, lr}
   16c74:	add	fp, sp, #16
   16c78:	mov	r4, r1
   16c7c:	mov	r1, #0
   16c80:	mov	r6, r2
   16c84:	bl	1101c <setlocale@plt>
   16c88:	cmp	r0, #0
   16c8c:	beq	16cbc <__assert_fail@plt+0x5c34>
   16c90:	mov	r7, r0
   16c94:	bl	10f8c <strlen@plt>
   16c98:	cmp	r0, r6
   16c9c:	bcs	16cdc <__assert_fail@plt+0x5c54>
   16ca0:	add	r2, r0, #1
   16ca4:	mov	r0, r4
   16ca8:	mov	r1, r7
   16cac:	bl	10e90 <memcpy@plt>
   16cb0:	mov	r5, #0
   16cb4:	mov	r0, r5
   16cb8:	pop	{r4, r5, r6, r7, fp, pc}
   16cbc:	cmp	r6, #0
   16cc0:	mov	r5, #22
   16cc4:	movne	r0, #0
   16cc8:	strbne	r0, [r4]
   16ccc:	movne	r0, r5
   16cd0:	popne	{r4, r5, r6, r7, fp, pc}
   16cd4:	mov	r0, r5
   16cd8:	pop	{r4, r5, r6, r7, fp, pc}
   16cdc:	mov	r5, #34	; 0x22
   16ce0:	cmp	r6, #0
   16ce4:	beq	16d04 <__assert_fail@plt+0x5c7c>
   16ce8:	sub	r6, r6, #1
   16cec:	mov	r0, r4
   16cf0:	mov	r1, r7
   16cf4:	mov	r2, r6
   16cf8:	bl	10e90 <memcpy@plt>
   16cfc:	mov	r0, #0
   16d00:	strb	r0, [r4, r6]
   16d04:	mov	r0, r5
   16d08:	pop	{r4, r5, r6, r7, fp, pc}
   16d0c:	mov	r1, #0
   16d10:	b	1101c <setlocale@plt>
   16d14:	cmp	r3, #0
   16d18:	cmpeq	r2, #0
   16d1c:	bne	16d40 <__assert_fail@plt+0x5cb8>
   16d20:	cmp	r1, #0
   16d24:	movlt	r1, #-2147483648	; 0x80000000
   16d28:	movlt	r0, #0
   16d2c:	blt	16d3c <__assert_fail@plt+0x5cb4>
   16d30:	cmpeq	r0, #0
   16d34:	mvnne	r1, #-2147483648	; 0x80000000
   16d38:	mvnne	r0, #0
   16d3c:	b	16e24 <__assert_fail@plt+0x5d9c>
   16d40:	sub	sp, sp, #8
   16d44:	push	{sp, lr}
   16d48:	cmp	r1, #0
   16d4c:	blt	16d6c <__assert_fail@plt+0x5ce4>
   16d50:	cmp	r3, #0
   16d54:	blt	16da0 <__assert_fail@plt+0x5d18>
   16d58:	bl	16e34 <__assert_fail@plt+0x5dac>
   16d5c:	ldr	lr, [sp, #4]
   16d60:	add	sp, sp, #8
   16d64:	pop	{r2, r3}
   16d68:	bx	lr
   16d6c:	rsbs	r0, r0, #0
   16d70:	sbc	r1, r1, r1, lsl #1
   16d74:	cmp	r3, #0
   16d78:	blt	16dc4 <__assert_fail@plt+0x5d3c>
   16d7c:	bl	16e34 <__assert_fail@plt+0x5dac>
   16d80:	ldr	lr, [sp, #4]
   16d84:	add	sp, sp, #8
   16d88:	pop	{r2, r3}
   16d8c:	rsbs	r0, r0, #0
   16d90:	sbc	r1, r1, r1, lsl #1
   16d94:	rsbs	r2, r2, #0
   16d98:	sbc	r3, r3, r3, lsl #1
   16d9c:	bx	lr
   16da0:	rsbs	r2, r2, #0
   16da4:	sbc	r3, r3, r3, lsl #1
   16da8:	bl	16e34 <__assert_fail@plt+0x5dac>
   16dac:	ldr	lr, [sp, #4]
   16db0:	add	sp, sp, #8
   16db4:	pop	{r2, r3}
   16db8:	rsbs	r0, r0, #0
   16dbc:	sbc	r1, r1, r1, lsl #1
   16dc0:	bx	lr
   16dc4:	rsbs	r2, r2, #0
   16dc8:	sbc	r3, r3, r3, lsl #1
   16dcc:	bl	16e34 <__assert_fail@plt+0x5dac>
   16dd0:	ldr	lr, [sp, #4]
   16dd4:	add	sp, sp, #8
   16dd8:	pop	{r2, r3}
   16ddc:	rsbs	r2, r2, #0
   16de0:	sbc	r3, r3, r3, lsl #1
   16de4:	bx	lr
   16de8:	cmp	r3, #0
   16dec:	cmpeq	r2, #0
   16df0:	bne	16e08 <__assert_fail@plt+0x5d80>
   16df4:	cmp	r1, #0
   16df8:	cmpeq	r0, #0
   16dfc:	mvnne	r1, #0
   16e00:	mvnne	r0, #0
   16e04:	b	16e24 <__assert_fail@plt+0x5d9c>
   16e08:	sub	sp, sp, #8
   16e0c:	push	{sp, lr}
   16e10:	bl	16e34 <__assert_fail@plt+0x5dac>
   16e14:	ldr	lr, [sp, #4]
   16e18:	add	sp, sp, #8
   16e1c:	pop	{r2, r3}
   16e20:	bx	lr
   16e24:	push	{r1, lr}
   16e28:	mov	r0, #8
   16e2c:	bl	10e3c <raise@plt>
   16e30:	pop	{r1, pc}
   16e34:	cmp	r1, r3
   16e38:	cmpeq	r0, r2
   16e3c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16e40:	mov	r4, r0
   16e44:	movcc	r0, #0
   16e48:	mov	r5, r1
   16e4c:	ldr	lr, [sp, #36]	; 0x24
   16e50:	movcc	r1, r0
   16e54:	bcc	16f50 <__assert_fail@plt+0x5ec8>
   16e58:	cmp	r3, #0
   16e5c:	clzeq	ip, r2
   16e60:	clzne	ip, r3
   16e64:	addeq	ip, ip, #32
   16e68:	cmp	r5, #0
   16e6c:	clzeq	r1, r4
   16e70:	addeq	r1, r1, #32
   16e74:	clzne	r1, r5
   16e78:	sub	ip, ip, r1
   16e7c:	sub	sl, ip, #32
   16e80:	lsl	r9, r3, ip
   16e84:	rsb	fp, ip, #32
   16e88:	orr	r9, r9, r2, lsl sl
   16e8c:	orr	r9, r9, r2, lsr fp
   16e90:	lsl	r8, r2, ip
   16e94:	cmp	r5, r9
   16e98:	cmpeq	r4, r8
   16e9c:	movcc	r0, #0
   16ea0:	movcc	r1, r0
   16ea4:	bcc	16ec0 <__assert_fail@plt+0x5e38>
   16ea8:	mov	r0, #1
   16eac:	subs	r4, r4, r8
   16eb0:	lsl	r1, r0, sl
   16eb4:	orr	r1, r1, r0, lsr fp
   16eb8:	lsl	r0, r0, ip
   16ebc:	sbc	r5, r5, r9
   16ec0:	cmp	ip, #0
   16ec4:	beq	16f50 <__assert_fail@plt+0x5ec8>
   16ec8:	lsr	r6, r8, #1
   16ecc:	orr	r6, r6, r9, lsl #31
   16ed0:	lsr	r7, r9, #1
   16ed4:	mov	r2, ip
   16ed8:	b	16efc <__assert_fail@plt+0x5e74>
   16edc:	subs	r3, r4, r6
   16ee0:	sbc	r8, r5, r7
   16ee4:	adds	r3, r3, r3
   16ee8:	adc	r8, r8, r8
   16eec:	adds	r4, r3, #1
   16ef0:	adc	r5, r8, #0
   16ef4:	subs	r2, r2, #1
   16ef8:	beq	16f18 <__assert_fail@plt+0x5e90>
   16efc:	cmp	r5, r7
   16f00:	cmpeq	r4, r6
   16f04:	bcs	16edc <__assert_fail@plt+0x5e54>
   16f08:	adds	r4, r4, r4
   16f0c:	adc	r5, r5, r5
   16f10:	subs	r2, r2, #1
   16f14:	bne	16efc <__assert_fail@plt+0x5e74>
   16f18:	lsr	r3, r4, ip
   16f1c:	orr	r3, r3, r5, lsl fp
   16f20:	lsr	r2, r5, ip
   16f24:	orr	r3, r3, r5, lsr sl
   16f28:	adds	r0, r0, r4
   16f2c:	mov	r4, r3
   16f30:	lsl	r3, r2, ip
   16f34:	orr	r3, r3, r4, lsl sl
   16f38:	lsl	ip, r4, ip
   16f3c:	orr	r3, r3, r4, lsr fp
   16f40:	adc	r1, r1, r5
   16f44:	subs	r0, r0, ip
   16f48:	mov	r5, r2
   16f4c:	sbc	r1, r1, r3
   16f50:	cmp	lr, #0
   16f54:	strdne	r4, [lr]
   16f58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16f5c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16f60:	mov	r7, r0
   16f64:	ldr	r6, [pc, #72]	; 16fb4 <__assert_fail@plt+0x5f2c>
   16f68:	ldr	r5, [pc, #72]	; 16fb8 <__assert_fail@plt+0x5f30>
   16f6c:	add	r6, pc, r6
   16f70:	add	r5, pc, r5
   16f74:	sub	r6, r6, r5
   16f78:	mov	r8, r1
   16f7c:	mov	r9, r2
   16f80:	bl	10e04 <calloc@plt-0x20>
   16f84:	asrs	r6, r6, #2
   16f88:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   16f8c:	mov	r4, #0
   16f90:	add	r4, r4, #1
   16f94:	ldr	r3, [r5], #4
   16f98:	mov	r2, r9
   16f9c:	mov	r1, r8
   16fa0:	mov	r0, r7
   16fa4:	blx	r3
   16fa8:	cmp	r6, r4
   16fac:	bne	16f90 <__assert_fail@plt+0x5f08>
   16fb0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16fb4:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   16fb8:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   16fbc:	bx	lr
   16fc0:	ldr	r3, [pc, #12]	; 16fd4 <__assert_fail@plt+0x5f4c>
   16fc4:	mov	r1, #0
   16fc8:	add	r3, pc, r3
   16fcc:	ldr	r2, [r3]
   16fd0:	b	10fb0 <__cxa_atexit@plt>
   16fd4:	andeq	r1, r1, r4, lsl r1

Disassembly of section .fini:

00016fd8 <.fini>:
   16fd8:	push	{r3, lr}
   16fdc:	pop	{r3, pc}
