
../repos/coreutils/src/base32:     file format elf32-littlearm


Disassembly of section .init:

00010c8c <.init>:
   10c8c:	push	{r3, lr}
   10c90:	bl	10f64 <__assert_fail@plt+0x48>
   10c94:	pop	{r3, pc}

Disassembly of section .plt:

00010c98 <calloc@plt-0x14>:
   10c98:	push	{lr}		; (str lr, [sp, #-4]!)
   10c9c:	ldr	lr, [pc, #4]	; 10ca8 <calloc@plt-0x4>
   10ca0:	add	lr, pc, lr
   10ca4:	ldr	pc, [lr, #8]!
   10ca8:	andeq	r9, r1, r8, asr r3

00010cac <calloc@plt>:
   10cac:	add	ip, pc, #0, 12
   10cb0:	add	ip, ip, #102400	; 0x19000
   10cb4:	ldr	pc, [ip, #856]!	; 0x358

00010cb8 <fputs_unlocked@plt>:
   10cb8:	add	ip, pc, #0, 12
   10cbc:	add	ip, ip, #102400	; 0x19000
   10cc0:	ldr	pc, [ip, #848]!	; 0x350

00010cc4 <strcmp@plt>:
   10cc4:	add	ip, pc, #0, 12
   10cc8:	add	ip, ip, #102400	; 0x19000
   10ccc:	ldr	pc, [ip, #840]!	; 0x348

00010cd0 <posix_fadvise64@plt>:
   10cd0:	add	ip, pc, #0, 12
   10cd4:	add	ip, ip, #102400	; 0x19000
   10cd8:	ldr	pc, [ip, #832]!	; 0x340

00010cdc <printf@plt>:
   10cdc:	add	ip, pc, #0, 12
   10ce0:	add	ip, ip, #102400	; 0x19000
   10ce4:	ldr	pc, [ip, #824]!	; 0x338

00010ce8 <fflush@plt>:
   10ce8:	add	ip, pc, #0, 12
   10cec:	add	ip, ip, #102400	; 0x19000
   10cf0:	ldr	pc, [ip, #816]!	; 0x330

00010cf4 <memmove@plt>:
   10cf4:	add	ip, pc, #0, 12
   10cf8:	add	ip, ip, #102400	; 0x19000
   10cfc:	ldr	pc, [ip, #808]!	; 0x328

00010d00 <free@plt>:
   10d00:	add	ip, pc, #0, 12
   10d04:	add	ip, ip, #102400	; 0x19000
   10d08:	ldr	pc, [ip, #800]!	; 0x320

00010d0c <_exit@plt>:
   10d0c:	add	ip, pc, #0, 12
   10d10:	add	ip, ip, #102400	; 0x19000
   10d14:	ldr	pc, [ip, #792]!	; 0x318

00010d18 <memcpy@plt>:
   10d18:	add	ip, pc, #0, 12
   10d1c:	add	ip, ip, #102400	; 0x19000
   10d20:	ldr	pc, [ip, #784]!	; 0x310

00010d24 <mbsinit@plt>:
   10d24:	add	ip, pc, #0, 12
   10d28:	add	ip, ip, #102400	; 0x19000
   10d2c:	ldr	pc, [ip, #776]!	; 0x308

00010d30 <fwrite_unlocked@plt>:
   10d30:	add	ip, pc, #0, 12
   10d34:	add	ip, ip, #102400	; 0x19000
   10d38:	ldr	pc, [ip, #768]!	; 0x300

00010d3c <memcmp@plt>:
   10d3c:	add	ip, pc, #0, 12
   10d40:	add	ip, ip, #102400	; 0x19000
   10d44:	ldr	pc, [ip, #760]!	; 0x2f8

00010d48 <fputc_unlocked@plt>:
   10d48:	add	ip, pc, #0, 12
   10d4c:	add	ip, ip, #102400	; 0x19000
   10d50:	ldr	pc, [ip, #752]!	; 0x2f0

00010d54 <realloc@plt>:
   10d54:	add	ip, pc, #0, 12
   10d58:	add	ip, ip, #102400	; 0x19000
   10d5c:	ldr	pc, [ip, #744]!	; 0x2e8

00010d60 <textdomain@plt>:
   10d60:	add	ip, pc, #0, 12
   10d64:	add	ip, ip, #102400	; 0x19000
   10d68:	ldr	pc, [ip, #736]!	; 0x2e0

00010d6c <iswprint@plt>:
   10d6c:	add	ip, pc, #0, 12
   10d70:	add	ip, ip, #102400	; 0x19000
   10d74:	ldr	pc, [ip, #728]!	; 0x2d8

00010d78 <fwrite@plt>:
   10d78:	add	ip, pc, #0, 12
   10d7c:	add	ip, ip, #102400	; 0x19000
   10d80:	ldr	pc, [ip, #720]!	; 0x2d0

00010d84 <lseek64@plt>:
   10d84:	add	ip, pc, #0, 12
   10d88:	add	ip, ip, #102400	; 0x19000
   10d8c:	ldr	pc, [ip, #712]!	; 0x2c8

00010d90 <__ctype_get_mb_cur_max@plt>:
   10d90:	add	ip, pc, #0, 12
   10d94:	add	ip, ip, #102400	; 0x19000
   10d98:	ldr	pc, [ip, #704]!	; 0x2c0

00010d9c <__fpending@plt>:
   10d9c:	add	ip, pc, #0, 12
   10da0:	add	ip, ip, #102400	; 0x19000
   10da4:	ldr	pc, [ip, #696]!	; 0x2b8

00010da8 <ferror_unlocked@plt>:
   10da8:	add	ip, pc, #0, 12
   10dac:	add	ip, ip, #102400	; 0x19000
   10db0:	ldr	pc, [ip, #688]!	; 0x2b0

00010db4 <mbrtowc@plt>:
   10db4:	add	ip, pc, #0, 12
   10db8:	add	ip, ip, #102400	; 0x19000
   10dbc:	ldr	pc, [ip, #680]!	; 0x2a8

00010dc0 <error@plt>:
   10dc0:	add	ip, pc, #0, 12
   10dc4:	add	ip, ip, #102400	; 0x19000
   10dc8:	ldr	pc, [ip, #672]!	; 0x2a0

00010dcc <malloc@plt>:
   10dcc:	add	ip, pc, #0, 12
   10dd0:	add	ip, ip, #102400	; 0x19000
   10dd4:	ldr	pc, [ip, #664]!	; 0x298

00010dd8 <__libc_start_main@plt>:
   10dd8:	add	ip, pc, #0, 12
   10ddc:	add	ip, ip, #102400	; 0x19000
   10de0:	ldr	pc, [ip, #656]!	; 0x290

00010de4 <__freading@plt>:
   10de4:	add	ip, pc, #0, 12
   10de8:	add	ip, ip, #102400	; 0x19000
   10dec:	ldr	pc, [ip, #648]!	; 0x288

00010df0 <__gmon_start__@plt>:
   10df0:	add	ip, pc, #0, 12
   10df4:	add	ip, ip, #102400	; 0x19000
   10df8:	ldr	pc, [ip, #640]!	; 0x280

00010dfc <getopt_long@plt>:
   10dfc:	add	ip, pc, #0, 12
   10e00:	add	ip, ip, #102400	; 0x19000
   10e04:	ldr	pc, [ip, #632]!	; 0x278

00010e08 <__ctype_b_loc@plt>:
   10e08:	add	ip, pc, #0, 12
   10e0c:	add	ip, ip, #102400	; 0x19000
   10e10:	ldr	pc, [ip, #624]!	; 0x270

00010e14 <exit@plt>:
   10e14:	add	ip, pc, #0, 12
   10e18:	add	ip, ip, #102400	; 0x19000
   10e1c:	ldr	pc, [ip, #616]!	; 0x268

00010e20 <gettext@plt>:
   10e20:	add	ip, pc, #0, 12
   10e24:	add	ip, ip, #102400	; 0x19000
   10e28:	ldr	pc, [ip, #608]!	; 0x260

00010e2c <strlen@plt>:
   10e2c:	add	ip, pc, #0, 12
   10e30:	add	ip, ip, #102400	; 0x19000
   10e34:	ldr	pc, [ip, #600]!	; 0x258

00010e38 <strchr@plt>:
   10e38:	add	ip, pc, #0, 12
   10e3c:	add	ip, ip, #102400	; 0x19000
   10e40:	ldr	pc, [ip, #592]!	; 0x250

00010e44 <fprintf@plt>:
   10e44:	add	ip, pc, #0, 12
   10e48:	add	ip, ip, #102400	; 0x19000
   10e4c:	ldr	pc, [ip, #584]!	; 0x248

00010e50 <__errno_location@plt>:
   10e50:	add	ip, pc, #0, 12
   10e54:	add	ip, ip, #102400	; 0x19000
   10e58:	ldr	pc, [ip, #576]!	; 0x240

00010e5c <__cxa_atexit@plt>:
   10e5c:	add	ip, pc, #0, 12
   10e60:	add	ip, ip, #102400	; 0x19000
   10e64:	ldr	pc, [ip, #568]!	; 0x238

00010e68 <memset@plt>:
   10e68:	add	ip, pc, #0, 12
   10e6c:	add	ip, ip, #102400	; 0x19000
   10e70:	ldr	pc, [ip, #560]!	; 0x230

00010e74 <fileno@plt>:
   10e74:	add	ip, pc, #0, 12
   10e78:	add	ip, ip, #102400	; 0x19000
   10e7c:	ldr	pc, [ip, #552]!	; 0x228

00010e80 <memchr@plt>:
   10e80:	add	ip, pc, #0, 12
   10e84:	add	ip, ip, #102400	; 0x19000
   10e88:	ldr	pc, [ip, #544]!	; 0x220

00010e8c <strtoimax@plt>:
   10e8c:	add	ip, pc, #0, 12
   10e90:	add	ip, ip, #102400	; 0x19000
   10e94:	ldr	pc, [ip, #536]!	; 0x218

00010e98 <fclose@plt>:
   10e98:	add	ip, pc, #0, 12
   10e9c:	add	ip, ip, #102400	; 0x19000
   10ea0:	ldr	pc, [ip, #528]!	; 0x210

00010ea4 <fseeko64@plt>:
   10ea4:	add	ip, pc, #0, 12
   10ea8:	add	ip, ip, #102400	; 0x19000
   10eac:	ldr	pc, [ip, #520]!	; 0x208

00010eb0 <setlocale@plt>:
   10eb0:	add	ip, pc, #0, 12
   10eb4:	add	ip, ip, #102400	; 0x19000
   10eb8:	ldr	pc, [ip, #512]!	; 0x200

00010ebc <strrchr@plt>:
   10ebc:	add	ip, pc, #0, 12
   10ec0:	add	ip, ip, #102400	; 0x19000
   10ec4:	ldr	pc, [ip, #504]!	; 0x1f8

00010ec8 <nl_langinfo@plt>:
   10ec8:	add	ip, pc, #0, 12
   10ecc:	add	ip, ip, #102400	; 0x19000
   10ed0:	ldr	pc, [ip, #496]!	; 0x1f0

00010ed4 <fopen64@plt>:
   10ed4:	add	ip, pc, #0, 12
   10ed8:	add	ip, ip, #102400	; 0x19000
   10edc:	ldr	pc, [ip, #488]!	; 0x1e8

00010ee0 <bindtextdomain@plt>:
   10ee0:	add	ip, pc, #0, 12
   10ee4:	add	ip, ip, #102400	; 0x19000
   10ee8:	ldr	pc, [ip, #480]!	; 0x1e0

00010eec <fread_unlocked@plt>:
   10eec:	add	ip, pc, #0, 12
   10ef0:	add	ip, ip, #102400	; 0x19000
   10ef4:	ldr	pc, [ip, #472]!	; 0x1d8

00010ef8 <strncmp@plt>:
   10ef8:	add	ip, pc, #0, 12
   10efc:	add	ip, ip, #102400	; 0x19000
   10f00:	ldr	pc, [ip, #464]!	; 0x1d0

00010f04 <abort@plt>:
   10f04:	add	ip, pc, #0, 12
   10f08:	add	ip, ip, #102400	; 0x19000
   10f0c:	ldr	pc, [ip, #456]!	; 0x1c8

00010f10 <feof_unlocked@plt>:
   10f10:	add	ip, pc, #0, 12
   10f14:	add	ip, ip, #102400	; 0x19000
   10f18:	ldr	pc, [ip, #448]!	; 0x1c0

00010f1c <__assert_fail@plt>:
   10f1c:	add	ip, pc, #0, 12
   10f20:	add	ip, ip, #102400	; 0x19000
   10f24:	ldr	pc, [ip, #440]!	; 0x1b8

Disassembly of section .text:

00010f28 <.text>:
   10f28:	mov	fp, #0
   10f2c:	mov	lr, #0
   10f30:	pop	{r1}		; (ldr r1, [sp], #4)
   10f34:	mov	r2, sp
   10f38:	push	{r2}		; (str r2, [sp, #-4]!)
   10f3c:	push	{r0}		; (str r0, [sp, #-4]!)
   10f40:	ldr	ip, [pc, #16]	; 10f58 <__assert_fail@plt+0x3c>
   10f44:	push	{ip}		; (str ip, [sp, #-4]!)
   10f48:	ldr	r0, [pc, #12]	; 10f5c <__assert_fail@plt+0x40>
   10f4c:	ldr	r3, [pc, #12]	; 10f60 <__assert_fail@plt+0x44>
   10f50:	bl	10dd8 <__libc_start_main@plt>
   10f54:	bl	10f04 <abort@plt>
   10f58:	andeq	r8, r1, r4, lsl #22
   10f5c:	andeq	r1, r1, r0, asr #23
   10f60:	andeq	r8, r1, r4, lsr #21
   10f64:	ldr	r3, [pc, #20]	; 10f80 <__assert_fail@plt+0x64>
   10f68:	ldr	r2, [pc, #20]	; 10f84 <__assert_fail@plt+0x68>
   10f6c:	add	r3, pc, r3
   10f70:	ldr	r2, [r3, r2]
   10f74:	cmp	r2, #0
   10f78:	bxeq	lr
   10f7c:	b	10df0 <__gmon_start__@plt>
   10f80:	andeq	r9, r1, ip, lsl #1
   10f84:	andeq	r0, r0, r0, ror #1
   10f88:	ldr	r0, [pc, #24]	; 10fa8 <__assert_fail@plt+0x8c>
   10f8c:	ldr	r3, [pc, #24]	; 10fac <__assert_fail@plt+0x90>
   10f90:	cmp	r3, r0
   10f94:	bxeq	lr
   10f98:	ldr	r3, [pc, #16]	; 10fb0 <__assert_fail@plt+0x94>
   10f9c:	cmp	r3, #0
   10fa0:	bxeq	lr
   10fa4:	bx	r3
   10fa8:	andeq	sl, r2, r4, lsr r1
   10fac:	andeq	sl, r2, r4, lsr r1
   10fb0:	andeq	r0, r0, r0
   10fb4:	ldr	r0, [pc, #36]	; 10fe0 <__assert_fail@plt+0xc4>
   10fb8:	ldr	r1, [pc, #36]	; 10fe4 <__assert_fail@plt+0xc8>
   10fbc:	sub	r1, r1, r0
   10fc0:	asr	r1, r1, #2
   10fc4:	add	r1, r1, r1, lsr #31
   10fc8:	asrs	r1, r1, #1
   10fcc:	bxeq	lr
   10fd0:	ldr	r3, [pc, #16]	; 10fe8 <__assert_fail@plt+0xcc>
   10fd4:	cmp	r3, #0
   10fd8:	bxeq	lr
   10fdc:	bx	r3
   10fe0:	andeq	sl, r2, r4, lsr r1
   10fe4:	andeq	sl, r2, r4, lsr r1
   10fe8:	andeq	r0, r0, r0
   10fec:	push	{r4, lr}
   10ff0:	ldr	r4, [pc, #24]	; 11010 <__assert_fail@plt+0xf4>
   10ff4:	ldrb	r3, [r4]
   10ff8:	cmp	r3, #0
   10ffc:	popne	{r4, pc}
   11000:	bl	10f88 <__assert_fail@plt+0x6c>
   11004:	mov	r3, #1
   11008:	strb	r3, [r4]
   1100c:	pop	{r4, pc}
   11010:	andeq	sl, r2, ip, asr r1
   11014:	b	10fb4 <__assert_fail@plt+0x98>
   11018:	str	fp, [sp, #-8]!
   1101c:	str	lr, [sp, #4]
   11020:	add	fp, sp, #4
   11024:	movw	r0, #35628	; 0x8b2c
   11028:	movt	r0, #1
   1102c:	bl	10e20 <gettext@plt>
   11030:	mov	r2, r0
   11034:	movw	r3, #41300	; 0xa154
   11038:	movt	r3, #2
   1103c:	ldr	r3, [r3]
   11040:	mov	r1, r3
   11044:	mov	r0, r2
   11048:	bl	10cb8 <fputs_unlocked@plt>
   1104c:	nop	{0}
   11050:	sub	sp, fp, #4
   11054:	ldr	fp, [sp]
   11058:	add	sp, sp, #4
   1105c:	pop	{pc}		; (ldr pc, [sp], #4)
   11060:	str	fp, [sp, #-8]!
   11064:	str	lr, [sp, #4]
   11068:	add	fp, sp, #4
   1106c:	movw	r0, #35684	; 0x8b64
   11070:	movt	r0, #1
   11074:	bl	10e20 <gettext@plt>
   11078:	mov	r2, r0
   1107c:	movw	r3, #41300	; 0xa154
   11080:	movt	r3, #2
   11084:	ldr	r3, [r3]
   11088:	mov	r1, r3
   1108c:	mov	r0, r2
   11090:	bl	10cb8 <fputs_unlocked@plt>
   11094:	nop	{0}
   11098:	sub	sp, fp, #4
   1109c:	ldr	fp, [sp]
   110a0:	add	sp, sp, #4
   110a4:	pop	{pc}		; (ldr pc, [sp], #4)
   110a8:	str	fp, [sp, #-8]!
   110ac:	str	lr, [sp, #4]
   110b0:	add	fp, sp, #4
   110b4:	sub	sp, sp, #80	; 0x50
   110b8:	str	r0, [fp, #-80]	; 0xffffffb0
   110bc:	movw	r2, #36132	; 0x8d24
   110c0:	movt	r2, #1
   110c4:	sub	r3, fp, #72	; 0x48
   110c8:	ldrd	r0, [r2]
   110cc:	strd	r0, [r3]
   110d0:	ldrd	r0, [r2, #8]
   110d4:	strd	r0, [r3, #8]
   110d8:	ldrd	r0, [r2, #16]
   110dc:	strd	r0, [r3, #16]
   110e0:	ldrd	r0, [r2, #24]
   110e4:	strd	r0, [r3, #24]
   110e8:	ldrd	r0, [r2, #32]
   110ec:	strd	r0, [r3, #32]
   110f0:	ldrd	r0, [r2, #40]	; 0x28
   110f4:	strd	r0, [r3, #40]	; 0x28
   110f8:	ldrd	r0, [r2, #48]	; 0x30
   110fc:	strd	r0, [r3, #48]	; 0x30
   11100:	ldr	r3, [fp, #-80]	; 0xffffffb0
   11104:	str	r3, [fp, #-8]
   11108:	sub	r3, fp, #72	; 0x48
   1110c:	str	r3, [fp, #-12]
   11110:	b	11120 <__assert_fail@plt+0x204>
   11114:	ldr	r3, [fp, #-12]
   11118:	add	r3, r3, #8
   1111c:	str	r3, [fp, #-12]
   11120:	ldr	r3, [fp, #-12]
   11124:	ldr	r3, [r3]
   11128:	cmp	r3, #0
   1112c:	beq	11150 <__assert_fail@plt+0x234>
   11130:	ldr	r3, [fp, #-12]
   11134:	ldr	r3, [r3]
   11138:	mov	r1, r3
   1113c:	ldr	r0, [fp, #-80]	; 0xffffffb0
   11140:	bl	10cc4 <strcmp@plt>
   11144:	mov	r3, r0
   11148:	cmp	r3, #0
   1114c:	bne	11114 <__assert_fail@plt+0x1f8>
   11150:	ldr	r3, [fp, #-12]
   11154:	ldr	r3, [r3, #4]
   11158:	cmp	r3, #0
   1115c:	beq	1116c <__assert_fail@plt+0x250>
   11160:	ldr	r3, [fp, #-12]
   11164:	ldr	r3, [r3, #4]
   11168:	str	r3, [fp, #-8]
   1116c:	movw	r0, #35760	; 0x8bb0
   11170:	movt	r0, #1
   11174:	bl	10e20 <gettext@plt>
   11178:	mov	r3, r0
   1117c:	movw	r2, #35784	; 0x8bc8
   11180:	movt	r2, #1
   11184:	movw	r1, #35824	; 0x8bf0
   11188:	movt	r1, #1
   1118c:	mov	r0, r3
   11190:	bl	10cdc <printf@plt>
   11194:	mov	r1, #0
   11198:	mov	r0, #5
   1119c:	bl	10eb0 <setlocale@plt>
   111a0:	str	r0, [fp, #-16]
   111a4:	ldr	r3, [fp, #-16]
   111a8:	cmp	r3, #0
   111ac:	beq	111f8 <__assert_fail@plt+0x2dc>
   111b0:	mov	r2, #3
   111b4:	movw	r1, #35840	; 0x8c00
   111b8:	movt	r1, #1
   111bc:	ldr	r0, [fp, #-16]
   111c0:	bl	10ef8 <strncmp@plt>
   111c4:	mov	r3, r0
   111c8:	cmp	r3, #0
   111cc:	beq	111f8 <__assert_fail@plt+0x2dc>
   111d0:	movw	r0, #35844	; 0x8c04
   111d4:	movt	r0, #1
   111d8:	bl	10e20 <gettext@plt>
   111dc:	mov	r2, r0
   111e0:	movw	r3, #41300	; 0xa154
   111e4:	movt	r3, #2
   111e8:	ldr	r3, [r3]
   111ec:	mov	r1, r3
   111f0:	mov	r0, r2
   111f4:	bl	10cb8 <fputs_unlocked@plt>
   111f8:	movw	r0, #35916	; 0x8c4c
   111fc:	movt	r0, #1
   11200:	bl	10e20 <gettext@plt>
   11204:	mov	r3, r0
   11208:	ldr	r2, [fp, #-80]	; 0xffffffb0
   1120c:	movw	r1, #35784	; 0x8bc8
   11210:	movt	r1, #1
   11214:	mov	r0, r3
   11218:	bl	10cdc <printf@plt>
   1121c:	movw	r0, #35944	; 0x8c68
   11220:	movt	r0, #1
   11224:	bl	10e20 <gettext@plt>
   11228:	ldr	r2, [fp, #-8]
   1122c:	ldr	r3, [fp, #-80]	; 0xffffffb0
   11230:	cmp	r2, r3
   11234:	bne	11244 <__assert_fail@plt+0x328>
   11238:	movw	r3, #35996	; 0x8c9c
   1123c:	movt	r3, #1
   11240:	b	1124c <__assert_fail@plt+0x330>
   11244:	movw	r3, #36008	; 0x8ca8
   11248:	movt	r3, #1
   1124c:	mov	r2, r3
   11250:	ldr	r1, [fp, #-8]
   11254:	bl	10cdc <printf@plt>
   11258:	nop	{0}
   1125c:	sub	sp, fp, #4
   11260:	ldr	fp, [sp]
   11264:	add	sp, sp, #4
   11268:	pop	{pc}		; (ldr pc, [sp], #4)
   1126c:	str	r4, [sp, #-12]!
   11270:	str	fp, [sp, #4]
   11274:	str	lr, [sp, #8]
   11278:	add	fp, sp, #8
   1127c:	sub	sp, sp, #12
   11280:	str	r0, [fp, #-16]
   11284:	ldr	r3, [fp, #-16]
   11288:	cmp	r3, #0
   1128c:	beq	112c8 <__assert_fail@plt+0x3ac>
   11290:	movw	r3, #41288	; 0xa148
   11294:	movt	r3, #2
   11298:	ldr	r4, [r3]
   1129c:	movw	r0, #36332	; 0x8dec
   112a0:	movt	r0, #1
   112a4:	bl	10e20 <gettext@plt>
   112a8:	mov	r1, r0
   112ac:	movw	r3, #41320	; 0xa168
   112b0:	movt	r3, #2
   112b4:	ldr	r3, [r3]
   112b8:	mov	r2, r3
   112bc:	mov	r0, r4
   112c0:	bl	10e44 <fprintf@plt>
   112c4:	b	113c0 <__assert_fail@plt+0x4a4>
   112c8:	movw	r0, #36372	; 0x8e14
   112cc:	movt	r0, #1
   112d0:	bl	10e20 <gettext@plt>
   112d4:	mov	r2, r0
   112d8:	movw	r3, #41320	; 0xa168
   112dc:	movt	r3, #2
   112e0:	ldr	r3, [r3]
   112e4:	mov	r1, r3
   112e8:	mov	r0, r2
   112ec:	bl	10cdc <printf@plt>
   112f0:	movw	r0, #36404	; 0x8e34
   112f4:	movt	r0, #1
   112f8:	bl	10e20 <gettext@plt>
   112fc:	mov	r3, r0
   11300:	mov	r1, #32
   11304:	mov	r0, r3
   11308:	bl	10cdc <printf@plt>
   1130c:	bl	11018 <__assert_fail@plt+0xfc>
   11310:	bl	11060 <__assert_fail@plt+0x144>
   11314:	movw	r0, #36476	; 0x8e7c
   11318:	movt	r0, #1
   1131c:	bl	10e20 <gettext@plt>
   11320:	mov	r2, r0
   11324:	movw	r3, #41300	; 0xa154
   11328:	movt	r3, #2
   1132c:	ldr	r3, [r3]
   11330:	mov	r1, r3
   11334:	mov	r0, r2
   11338:	bl	10cb8 <fputs_unlocked@plt>
   1133c:	movw	r0, #36720	; 0x8f70
   11340:	movt	r0, #1
   11344:	bl	10e20 <gettext@plt>
   11348:	mov	r2, r0
   1134c:	movw	r3, #41300	; 0xa154
   11350:	movt	r3, #2
   11354:	ldr	r3, [r3]
   11358:	mov	r1, r3
   1135c:	mov	r0, r2
   11360:	bl	10cb8 <fputs_unlocked@plt>
   11364:	movw	r0, #36768	; 0x8fa0
   11368:	movt	r0, #1
   1136c:	bl	10e20 <gettext@plt>
   11370:	mov	r2, r0
   11374:	movw	r3, #41300	; 0xa154
   11378:	movt	r3, #2
   1137c:	ldr	r3, [r3]
   11380:	mov	r1, r3
   11384:	mov	r0, r2
   11388:	bl	10cb8 <fputs_unlocked@plt>
   1138c:	movw	r0, #36824	; 0x8fd8
   11390:	movt	r0, #1
   11394:	bl	10e20 <gettext@plt>
   11398:	mov	r3, r0
   1139c:	movw	r2, #37092	; 0x90e4
   113a0:	movt	r2, #1
   113a4:	movw	r1, #37092	; 0x90e4
   113a8:	movt	r1, #1
   113ac:	mov	r0, r3
   113b0:	bl	10cdc <printf@plt>
   113b4:	movw	r0, #37092	; 0x90e4
   113b8:	movt	r0, #1
   113bc:	bl	110a8 <__assert_fail@plt+0x18c>
   113c0:	ldr	r0, [fp, #-16]
   113c4:	bl	10e14 <exit@plt>
   113c8:	str	r4, [sp, #-12]!
   113cc:	str	fp, [sp, #4]
   113d0:	str	lr, [sp, #8]
   113d4:	add	fp, sp, #8
   113d8:	sub	sp, sp, #28
   113dc:	str	r0, [fp, #-24]	; 0xffffffe8
   113e0:	str	r1, [fp, #-28]	; 0xffffffe4
   113e4:	str	r2, [fp, #-32]	; 0xffffffe0
   113e8:	str	r3, [fp, #-36]	; 0xffffffdc
   113ec:	ldr	r3, [fp, #-32]	; 0xffffffe0
   113f0:	cmp	r3, #0
   113f4:	bne	11450 <__assert_fail@plt+0x534>
   113f8:	ldr	r2, [fp, #-28]	; 0xffffffe4
   113fc:	movw	r3, #41300	; 0xa154
   11400:	movt	r3, #2
   11404:	ldr	r3, [r3]
   11408:	mov	r1, #1
   1140c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   11410:	bl	10d30 <fwrite_unlocked@plt>
   11414:	mov	r2, r0
   11418:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1141c:	cmp	r2, r3
   11420:	bcs	11580 <__assert_fail@plt+0x664>
   11424:	bl	10e50 <__errno_location@plt>
   11428:	mov	r3, r0
   1142c:	ldr	r4, [r3]
   11430:	movw	r0, #37100	; 0x90ec
   11434:	movt	r0, #1
   11438:	bl	10e20 <gettext@plt>
   1143c:	mov	r3, r0
   11440:	mov	r2, r3
   11444:	mov	r1, r4
   11448:	mov	r0, #1
   1144c:	bl	10dc0 <error@plt>
   11450:	mov	r3, #0
   11454:	str	r3, [fp, #-16]
   11458:	b	11570 <__assert_fail@plt+0x654>
   1145c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   11460:	ldr	r3, [fp, #-16]
   11464:	sub	r2, r2, r3
   11468:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1146c:	ldr	r3, [r3]
   11470:	ldr	r1, [fp, #-32]	; 0xffffffe0
   11474:	sub	r3, r1, r3
   11478:	cmp	r2, r3
   1147c:	movlt	r3, r2
   11480:	movge	r3, r3
   11484:	str	r3, [fp, #-20]	; 0xffffffec
   11488:	ldr	r3, [fp, #-20]	; 0xffffffec
   1148c:	cmp	r3, #0
   11490:	bne	114e8 <__assert_fail@plt+0x5cc>
   11494:	ldr	r1, [fp, #4]
   11498:	mov	r0, #10
   1149c:	bl	10d48 <fputc_unlocked@plt>
   114a0:	mov	r3, r0
   114a4:	cmn	r3, #1
   114a8:	bne	114d8 <__assert_fail@plt+0x5bc>
   114ac:	bl	10e50 <__errno_location@plt>
   114b0:	mov	r3, r0
   114b4:	ldr	r4, [r3]
   114b8:	movw	r0, #37100	; 0x90ec
   114bc:	movt	r0, #1
   114c0:	bl	10e20 <gettext@plt>
   114c4:	mov	r3, r0
   114c8:	mov	r2, r3
   114cc:	mov	r1, r4
   114d0:	mov	r0, #1
   114d4:	bl	10dc0 <error@plt>
   114d8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   114dc:	mov	r2, #0
   114e0:	str	r2, [r3]
   114e4:	b	11570 <__assert_fail@plt+0x654>
   114e8:	ldr	r3, [fp, #-16]
   114ec:	ldr	r2, [fp, #-24]	; 0xffffffe8
   114f0:	add	r0, r2, r3
   114f4:	ldr	r2, [fp, #-20]	; 0xffffffec
   114f8:	movw	r3, #41300	; 0xa154
   114fc:	movt	r3, #2
   11500:	ldr	r3, [r3]
   11504:	mov	r1, #1
   11508:	bl	10d30 <fwrite_unlocked@plt>
   1150c:	mov	r2, r0
   11510:	ldr	r3, [fp, #-20]	; 0xffffffec
   11514:	cmp	r2, r3
   11518:	bcs	11548 <__assert_fail@plt+0x62c>
   1151c:	bl	10e50 <__errno_location@plt>
   11520:	mov	r3, r0
   11524:	ldr	r4, [r3]
   11528:	movw	r0, #37100	; 0x90ec
   1152c:	movt	r0, #1
   11530:	bl	10e20 <gettext@plt>
   11534:	mov	r3, r0
   11538:	mov	r2, r3
   1153c:	mov	r1, r4
   11540:	mov	r0, #1
   11544:	bl	10dc0 <error@plt>
   11548:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1154c:	ldr	r2, [r3]
   11550:	ldr	r3, [fp, #-20]	; 0xffffffec
   11554:	add	r2, r2, r3
   11558:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1155c:	str	r2, [r3]
   11560:	ldr	r2, [fp, #-16]
   11564:	ldr	r3, [fp, #-20]	; 0xffffffec
   11568:	add	r3, r2, r3
   1156c:	str	r3, [fp, #-16]
   11570:	ldr	r2, [fp, #-16]
   11574:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11578:	cmp	r2, r3
   1157c:	blt	1145c <__assert_fail@plt+0x540>
   11580:	nop	{0}
   11584:	sub	sp, fp, #8
   11588:	ldr	r4, [sp]
   1158c:	ldr	fp, [sp, #4]
   11590:	add	sp, sp, #8
   11594:	pop	{pc}		; (ldr pc, [sp], #4)
   11598:	str	r4, [sp, #-12]!
   1159c:	str	fp, [sp, #4]
   115a0:	str	lr, [sp, #8]
   115a4:	add	fp, sp, #8
   115a8:	sub	sp, sp, #12
   115ac:	str	r0, [fp, #-16]
   115b0:	str	r1, [fp, #-20]	; 0xffffffec
   115b4:	ldr	r0, [fp, #-16]
   115b8:	bl	1352c <__assert_fail@plt+0x2610>
   115bc:	mov	r3, r0
   115c0:	cmp	r3, #0
   115c4:	beq	11644 <__assert_fail@plt+0x728>
   115c8:	movw	r1, #37112	; 0x90f8
   115cc:	movt	r1, #1
   115d0:	ldr	r0, [fp, #-20]	; 0xffffffec
   115d4:	bl	10cc4 <strcmp@plt>
   115d8:	mov	r3, r0
   115dc:	cmp	r3, #0
   115e0:	bne	11610 <__assert_fail@plt+0x6f4>
   115e4:	bl	10e50 <__errno_location@plt>
   115e8:	mov	r3, r0
   115ec:	ldr	r4, [r3]
   115f0:	movw	r0, #37116	; 0x90fc
   115f4:	movt	r0, #1
   115f8:	bl	10e20 <gettext@plt>
   115fc:	mov	r3, r0
   11600:	mov	r2, r3
   11604:	mov	r1, r4
   11608:	mov	r0, #1
   1160c:	bl	10dc0 <error@plt>
   11610:	bl	10e50 <__errno_location@plt>
   11614:	mov	r3, r0
   11618:	ldr	r4, [r3]
   1161c:	ldr	r2, [fp, #-20]	; 0xffffffec
   11620:	mov	r1, #3
   11624:	mov	r0, #0
   11628:	bl	16064 <__assert_fail@plt+0x5148>
   1162c:	mov	r3, r0
   11630:	movw	r2, #37140	; 0x9114
   11634:	movt	r2, #1
   11638:	mov	r1, r4
   1163c:	mov	r0, #1
   11640:	bl	10dc0 <error@plt>
   11644:	mov	r0, #0
   11648:	bl	10e14 <exit@plt>
   1164c:	str	r4, [sp, #-12]!
   11650:	str	fp, [sp, #4]
   11654:	str	lr, [sp, #8]
   11658:	add	fp, sp, #8
   1165c:	sub	sp, sp, #52	; 0x34
   11660:	str	r0, [fp, #-40]	; 0xffffffd8
   11664:	str	r1, [fp, #-44]	; 0xffffffd4
   11668:	str	r2, [fp, #-48]	; 0xffffffd0
   1166c:	str	r3, [fp, #-52]	; 0xffffffcc
   11670:	mov	r3, #0
   11674:	str	r3, [fp, #-32]	; 0xffffffe0
   11678:	mov	r0, #30720	; 0x7800
   1167c:	bl	16c8c <__assert_fail@plt+0x5d70>
   11680:	mov	r3, r0
   11684:	str	r3, [fp, #-20]	; 0xffffffec
   11688:	mov	r0, #49152	; 0xc000
   1168c:	bl	16c8c <__assert_fail@plt+0x5d70>
   11690:	mov	r3, r0
   11694:	str	r3, [fp, #-24]	; 0xffffffe8
   11698:	mov	r3, #0
   1169c:	str	r3, [fp, #-16]
   116a0:	ldr	r3, [fp, #-16]
   116a4:	ldr	r2, [fp, #-20]	; 0xffffffec
   116a8:	add	r0, r2, r3
   116ac:	ldr	r3, [fp, #-16]
   116b0:	rsb	r3, r3, #30720	; 0x7800
   116b4:	mov	r2, r3
   116b8:	ldr	r3, [fp, #-40]	; 0xffffffd8
   116bc:	mov	r1, #1
   116c0:	bl	10eec <fread_unlocked@plt>
   116c4:	mov	r3, r0
   116c8:	str	r3, [fp, #-28]	; 0xffffffe4
   116cc:	ldr	r2, [fp, #-16]
   116d0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   116d4:	add	r3, r2, r3
   116d8:	str	r3, [fp, #-16]
   116dc:	ldr	r0, [fp, #-40]	; 0xffffffd8
   116e0:	bl	10f10 <feof_unlocked@plt>
   116e4:	mov	r3, r0
   116e8:	cmp	r3, #0
   116ec:	bne	11710 <__assert_fail@plt+0x7f4>
   116f0:	ldr	r0, [fp, #-40]	; 0xffffffd8
   116f4:	bl	10da8 <ferror_unlocked@plt>
   116f8:	mov	r3, r0
   116fc:	cmp	r3, #0
   11700:	bne	11710 <__assert_fail@plt+0x7f4>
   11704:	ldr	r3, [fp, #-16]
   11708:	cmp	r3, #30720	; 0x7800
   1170c:	blt	116a0 <__assert_fail@plt+0x784>
   11710:	ldr	r3, [fp, #-16]
   11714:	cmp	r3, #0
   11718:	ble	11790 <__assert_fail@plt+0x874>
   1171c:	ldr	r3, [fp, #-16]
   11720:	add	r2, r3, #4
   11724:	movw	r3, #26215	; 0x6667
   11728:	movt	r3, #26214	; 0x6666
   1172c:	smull	r1, r3, r3, r2
   11730:	asr	r1, r3, #1
   11734:	asr	r3, r2, #31
   11738:	sub	r3, r1, r3
   1173c:	lsl	r3, r3, #3
   11740:	ldr	r2, [fp, #-24]	; 0xffffffe8
   11744:	ldr	r1, [fp, #-16]
   11748:	ldr	r0, [fp, #-20]	; 0xffffffec
   1174c:	bl	11fe8 <__assert_fail@plt+0x10cc>
   11750:	ldr	r3, [fp, #-16]
   11754:	add	r2, r3, #4
   11758:	movw	r3, #26215	; 0x6667
   1175c:	movt	r3, #26214	; 0x6666
   11760:	smull	r1, r3, r3, r2
   11764:	asr	r1, r3, #1
   11768:	asr	r3, r2, #31
   1176c:	sub	r3, r1, r3
   11770:	lsl	r1, r3, #3
   11774:	sub	r2, fp, #32
   11778:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1177c:	str	r3, [sp]
   11780:	mov	r3, r2
   11784:	ldr	r2, [fp, #-52]	; 0xffffffcc
   11788:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1178c:	bl	113c8 <__assert_fail@plt+0x4ac>
   11790:	ldr	r0, [fp, #-40]	; 0xffffffd8
   11794:	bl	10f10 <feof_unlocked@plt>
   11798:	mov	r3, r0
   1179c:	cmp	r3, #0
   117a0:	bne	117c4 <__assert_fail@plt+0x8a8>
   117a4:	ldr	r0, [fp, #-40]	; 0xffffffd8
   117a8:	bl	10da8 <ferror_unlocked@plt>
   117ac:	mov	r3, r0
   117b0:	cmp	r3, #0
   117b4:	bne	117c4 <__assert_fail@plt+0x8a8>
   117b8:	ldr	r3, [fp, #-16]
   117bc:	cmp	r3, #30720	; 0x7800
   117c0:	beq	11698 <__assert_fail@plt+0x77c>
   117c4:	ldr	r3, [fp, #-52]	; 0xffffffcc
   117c8:	cmp	r3, #0
   117cc:	beq	11820 <__assert_fail@plt+0x904>
   117d0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   117d4:	cmp	r3, #0
   117d8:	ble	11820 <__assert_fail@plt+0x904>
   117dc:	ldr	r1, [fp, #-48]	; 0xffffffd0
   117e0:	mov	r0, #10
   117e4:	bl	10d48 <fputc_unlocked@plt>
   117e8:	mov	r3, r0
   117ec:	cmn	r3, #1
   117f0:	bne	11820 <__assert_fail@plt+0x904>
   117f4:	bl	10e50 <__errno_location@plt>
   117f8:	mov	r3, r0
   117fc:	ldr	r4, [r3]
   11800:	movw	r0, #37100	; 0x90ec
   11804:	movt	r0, #1
   11808:	bl	10e20 <gettext@plt>
   1180c:	mov	r3, r0
   11810:	mov	r2, r3
   11814:	mov	r1, r4
   11818:	mov	r0, #1
   1181c:	bl	10dc0 <error@plt>
   11820:	ldr	r0, [fp, #-40]	; 0xffffffd8
   11824:	bl	10da8 <ferror_unlocked@plt>
   11828:	mov	r3, r0
   1182c:	cmp	r3, #0
   11830:	beq	11860 <__assert_fail@plt+0x944>
   11834:	bl	10e50 <__errno_location@plt>
   11838:	mov	r3, r0
   1183c:	ldr	r4, [r3]
   11840:	movw	r0, #37144	; 0x9118
   11844:	movt	r0, #1
   11848:	bl	10e20 <gettext@plt>
   1184c:	mov	r3, r0
   11850:	mov	r2, r3
   11854:	mov	r1, r4
   11858:	mov	r0, #1
   1185c:	bl	10dc0 <error@plt>
   11860:	ldr	r1, [fp, #-44]	; 0xffffffd4
   11864:	ldr	r0, [fp, #-40]	; 0xffffffd8
   11868:	bl	11598 <__assert_fail@plt+0x67c>
   1186c:	nop	{0}
   11870:	sub	sp, fp, #8
   11874:	ldr	r4, [sp]
   11878:	ldr	fp, [sp, #4]
   1187c:	add	sp, sp, #8
   11880:	pop	{pc}		; (ldr pc, [sp], #4)
   11884:	str	r4, [sp, #-12]!
   11888:	str	fp, [sp, #4]
   1188c:	str	lr, [sp, #8]
   11890:	add	fp, sp, #8
   11894:	sub	sp, sp, #76	; 0x4c
   11898:	str	r0, [fp, #-64]	; 0xffffffc0
   1189c:	str	r1, [fp, #-68]	; 0xffffffbc
   118a0:	str	r2, [fp, #-72]	; 0xffffffb8
   118a4:	strb	r3, [fp, #-73]	; 0xffffffb7
   118a8:	mov	r0, #8192	; 0x2000
   118ac:	bl	16c8c <__assert_fail@plt+0x5d70>
   118b0:	mov	r3, r0
   118b4:	str	r3, [fp, #-32]	; 0xffffffe0
   118b8:	mov	r0, #5120	; 0x1400
   118bc:	bl	16c8c <__assert_fail@plt+0x5d70>
   118c0:	mov	r3, r0
   118c4:	str	r3, [fp, #-36]	; 0xffffffdc
   118c8:	sub	r3, fp, #52	; 0x34
   118cc:	mov	r0, r3
   118d0:	bl	126d4 <__assert_fail@plt+0x17b8>
   118d4:	mov	r3, #0
   118d8:	str	r3, [fp, #-16]
   118dc:	ldr	r3, [fp, #-16]
   118e0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   118e4:	add	r0, r2, r3
   118e8:	ldr	r3, [fp, #-16]
   118ec:	rsb	r3, r3, #8192	; 0x2000
   118f0:	mov	r2, r3
   118f4:	ldr	r3, [fp, #-64]	; 0xffffffc0
   118f8:	mov	r1, #1
   118fc:	bl	10eec <fread_unlocked@plt>
   11900:	mov	r3, r0
   11904:	str	r3, [fp, #-20]	; 0xffffffec
   11908:	ldrb	r3, [fp, #-73]	; 0xffffffb7
   1190c:	cmp	r3, #0
   11910:	beq	119ec <__assert_fail@plt+0xad0>
   11914:	mov	r3, #0
   11918:	str	r3, [fp, #-24]	; 0xffffffe8
   1191c:	b	119d0 <__assert_fail@plt+0xab4>
   11920:	ldr	r2, [fp, #-16]
   11924:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11928:	add	r3, r2, r3
   1192c:	mov	r2, r3
   11930:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11934:	add	r3, r3, r2
   11938:	ldrb	r3, [r3]
   1193c:	mov	r0, r3
   11940:	bl	12678 <__assert_fail@plt+0x175c>
   11944:	mov	r3, r0
   11948:	cmp	r3, #0
   1194c:	bne	11974 <__assert_fail@plt+0xa58>
   11950:	ldr	r2, [fp, #-16]
   11954:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11958:	add	r3, r2, r3
   1195c:	mov	r2, r3
   11960:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11964:	add	r3, r3, r2
   11968:	ldrb	r3, [r3]
   1196c:	cmp	r3, #61	; 0x3d
   11970:	bne	11984 <__assert_fail@plt+0xa68>
   11974:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11978:	add	r3, r3, #1
   1197c:	str	r3, [fp, #-24]	; 0xffffffe8
   11980:	b	119d0 <__assert_fail@plt+0xab4>
   11984:	ldr	r2, [fp, #-16]
   11988:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1198c:	add	r3, r2, r3
   11990:	ldr	r2, [fp, #-32]	; 0xffffffe0
   11994:	add	r0, r2, r3
   11998:	ldr	r2, [fp, #-16]
   1199c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   119a0:	add	r3, r2, r3
   119a4:	add	r3, r3, #1
   119a8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   119ac:	add	r1, r2, r3
   119b0:	ldr	r3, [fp, #-20]	; 0xffffffec
   119b4:	sub	r3, r3, #1
   119b8:	str	r3, [fp, #-20]	; 0xffffffec
   119bc:	ldr	r2, [fp, #-20]	; 0xffffffec
   119c0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   119c4:	sub	r3, r2, r3
   119c8:	mov	r2, r3
   119cc:	bl	10cf4 <memmove@plt>
   119d0:	ldr	r3, [fp, #-20]	; 0xffffffec
   119d4:	cmp	r3, #0
   119d8:	ble	119ec <__assert_fail@plt+0xad0>
   119dc:	ldr	r2, [fp, #-24]	; 0xffffffe8
   119e0:	ldr	r3, [fp, #-20]	; 0xffffffec
   119e4:	cmp	r2, r3
   119e8:	blt	11920 <__assert_fail@plt+0xa04>
   119ec:	ldr	r2, [fp, #-16]
   119f0:	ldr	r3, [fp, #-20]	; 0xffffffec
   119f4:	add	r3, r2, r3
   119f8:	str	r3, [fp, #-16]
   119fc:	ldr	r0, [fp, #-64]	; 0xffffffc0
   11a00:	bl	10da8 <ferror_unlocked@plt>
   11a04:	mov	r3, r0
   11a08:	cmp	r3, #0
   11a0c:	beq	11a3c <__assert_fail@plt+0xb20>
   11a10:	bl	10e50 <__errno_location@plt>
   11a14:	mov	r3, r0
   11a18:	ldr	r4, [r3]
   11a1c:	movw	r0, #37144	; 0x9118
   11a20:	movt	r0, #1
   11a24:	bl	10e20 <gettext@plt>
   11a28:	mov	r3, r0
   11a2c:	mov	r2, r3
   11a30:	mov	r1, r4
   11a34:	mov	r0, #1
   11a38:	bl	10dc0 <error@plt>
   11a3c:	ldr	r3, [fp, #-16]
   11a40:	cmp	r3, #8192	; 0x2000
   11a44:	bge	11a5c <__assert_fail@plt+0xb40>
   11a48:	ldr	r0, [fp, #-64]	; 0xffffffc0
   11a4c:	bl	10f10 <feof_unlocked@plt>
   11a50:	mov	r3, r0
   11a54:	cmp	r3, #0
   11a58:	beq	118dc <__assert_fail@plt+0x9c0>
   11a5c:	mov	r3, #0
   11a60:	str	r3, [fp, #-28]	; 0xffffffe4
   11a64:	b	11b54 <__assert_fail@plt+0xc38>
   11a68:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11a6c:	cmp	r3, #1
   11a70:	bne	11a80 <__assert_fail@plt+0xb64>
   11a74:	ldr	r3, [fp, #-52]	; 0xffffffcc
   11a78:	cmp	r3, #0
   11a7c:	beq	11b84 <__assert_fail@plt+0xc68>
   11a80:	mov	r3, #5120	; 0x1400
   11a84:	str	r3, [fp, #-56]	; 0xffffffc8
   11a88:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11a8c:	cmp	r3, #0
   11a90:	bne	11a9c <__assert_fail@plt+0xb80>
   11a94:	ldr	r2, [fp, #-16]
   11a98:	b	11aa0 <__assert_fail@plt+0xb84>
   11a9c:	mov	r2, #0
   11aa0:	sub	r0, fp, #52	; 0x34
   11aa4:	sub	r3, fp, #56	; 0x38
   11aa8:	str	r3, [sp]
   11aac:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11ab0:	ldr	r1, [fp, #-32]	; 0xffffffe0
   11ab4:	bl	12f40 <__assert_fail@plt+0x2024>
   11ab8:	mov	r3, r0
   11abc:	strb	r3, [fp, #-37]	; 0xffffffdb
   11ac0:	ldr	r3, [fp, #-56]	; 0xffffffc8
   11ac4:	mov	r2, r3
   11ac8:	ldr	r3, [fp, #-72]	; 0xffffffb8
   11acc:	mov	r1, #1
   11ad0:	ldr	r0, [fp, #-36]	; 0xffffffdc
   11ad4:	bl	10d30 <fwrite_unlocked@plt>
   11ad8:	mov	r2, r0
   11adc:	ldr	r3, [fp, #-56]	; 0xffffffc8
   11ae0:	cmp	r2, r3
   11ae4:	bcs	11b14 <__assert_fail@plt+0xbf8>
   11ae8:	bl	10e50 <__errno_location@plt>
   11aec:	mov	r3, r0
   11af0:	ldr	r4, [r3]
   11af4:	movw	r0, #37100	; 0x90ec
   11af8:	movt	r0, #1
   11afc:	bl	10e20 <gettext@plt>
   11b00:	mov	r3, r0
   11b04:	mov	r2, r3
   11b08:	mov	r1, r4
   11b0c:	mov	r0, #1
   11b10:	bl	10dc0 <error@plt>
   11b14:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   11b18:	eor	r3, r3, #1
   11b1c:	uxtb	r3, r3
   11b20:	cmp	r3, #0
   11b24:	beq	11b48 <__assert_fail@plt+0xc2c>
   11b28:	movw	r0, #37156	; 0x9124
   11b2c:	movt	r0, #1
   11b30:	bl	10e20 <gettext@plt>
   11b34:	mov	r3, r0
   11b38:	mov	r2, r3
   11b3c:	mov	r1, #0
   11b40:	mov	r0, #1
   11b44:	bl	10dc0 <error@plt>
   11b48:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11b4c:	add	r3, r3, #1
   11b50:	str	r3, [fp, #-28]	; 0xffffffe4
   11b54:	ldr	r0, [fp, #-64]	; 0xffffffc0
   11b58:	bl	10f10 <feof_unlocked@plt>
   11b5c:	mov	r3, r0
   11b60:	cmp	r3, #0
   11b64:	beq	11b70 <__assert_fail@plt+0xc54>
   11b68:	mov	r2, #2
   11b6c:	b	11b74 <__assert_fail@plt+0xc58>
   11b70:	mov	r2, #1
   11b74:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11b78:	cmp	r2, r3
   11b7c:	bgt	11a68 <__assert_fail@plt+0xb4c>
   11b80:	b	11b88 <__assert_fail@plt+0xc6c>
   11b84:	nop	{0}
   11b88:	ldr	r0, [fp, #-64]	; 0xffffffc0
   11b8c:	bl	10f10 <feof_unlocked@plt>
   11b90:	mov	r3, r0
   11b94:	cmp	r3, #0
   11b98:	beq	118d4 <__assert_fail@plt+0x9b8>
   11b9c:	ldr	r1, [fp, #-68]	; 0xffffffbc
   11ba0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   11ba4:	bl	11598 <__assert_fail@plt+0x67c>
   11ba8:	nop	{0}
   11bac:	sub	sp, fp, #8
   11bb0:	ldr	r4, [sp]
   11bb4:	ldr	fp, [sp, #4]
   11bb8:	add	sp, sp, #8
   11bbc:	pop	{pc}		; (ldr pc, [sp], #4)
   11bc0:	str	r4, [sp, #-12]!
   11bc4:	str	fp, [sp, #4]
   11bc8:	str	lr, [sp, #8]
   11bcc:	add	fp, sp, #8
   11bd0:	sub	sp, sp, #52	; 0x34
   11bd4:	str	r0, [fp, #-48]	; 0xffffffd0
   11bd8:	str	r1, [fp, #-52]	; 0xffffffcc
   11bdc:	mov	r3, #0
   11be0:	strb	r3, [fp, #-21]	; 0xffffffeb
   11be4:	mov	r3, #0
   11be8:	strb	r3, [fp, #-22]	; 0xffffffea
   11bec:	mov	r3, #76	; 0x4c
   11bf0:	str	r3, [fp, #-28]	; 0xffffffe4
   11bf4:	ldr	r3, [fp, #-52]	; 0xffffffcc
   11bf8:	ldr	r3, [r3]
   11bfc:	mov	r0, r3
   11c00:	bl	13a00 <__assert_fail@plt+0x2ae4>
   11c04:	movw	r1, #36008	; 0x8ca8
   11c08:	movt	r1, #1
   11c0c:	mov	r0, #6
   11c10:	bl	10eb0 <setlocale@plt>
   11c14:	movw	r1, #37172	; 0x9134
   11c18:	movt	r1, #1
   11c1c:	movw	r0, #36032	; 0x8cc0
   11c20:	movt	r0, #1
   11c24:	bl	10ee0 <bindtextdomain@plt>
   11c28:	movw	r0, #36032	; 0x8cc0
   11c2c:	movt	r0, #1
   11c30:	bl	10d60 <textdomain@plt>
   11c34:	movw	r0, #13096	; 0x3328
   11c38:	movt	r0, #1
   11c3c:	bl	18b08 <__assert_fail@plt+0x7bec>
   11c40:	b	11dd4 <__assert_fail@plt+0xeb8>
   11c44:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11c48:	cmp	r3, #100	; 0x64
   11c4c:	beq	11c94 <__assert_fail@plt+0xd78>
   11c50:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11c54:	cmp	r3, #100	; 0x64
   11c58:	bgt	11c78 <__assert_fail@plt+0xd5c>
   11c5c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11c60:	cmn	r3, #3
   11c64:	beq	11d80 <__assert_fail@plt+0xe64>
   11c68:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11c6c:	cmn	r3, #2
   11c70:	beq	11d78 <__assert_fail@plt+0xe5c>
   11c74:	b	11dcc <__assert_fail@plt+0xeb0>
   11c78:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11c7c:	cmp	r3, #105	; 0x69
   11c80:	beq	11d6c <__assert_fail@plt+0xe50>
   11c84:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11c88:	cmp	r3, #119	; 0x77
   11c8c:	beq	11ca0 <__assert_fail@plt+0xd84>
   11c90:	b	11dcc <__assert_fail@plt+0xeb0>
   11c94:	mov	r3, #1
   11c98:	strb	r3, [fp, #-21]	; 0xffffffeb
   11c9c:	b	11dd4 <__assert_fail@plt+0xeb8>
   11ca0:	movw	r3, #41304	; 0xa158
   11ca4:	movt	r3, #2
   11ca8:	ldr	r0, [r3]
   11cac:	sub	r2, fp, #44	; 0x2c
   11cb0:	movw	r3, #36008	; 0x8ca8
   11cb4:	movt	r3, #1
   11cb8:	str	r3, [sp]
   11cbc:	mov	r3, r2
   11cc0:	mov	r2, #10
   11cc4:	mov	r1, #0
   11cc8:	bl	1782c <__assert_fail@plt+0x6910>
   11ccc:	str	r0, [fp, #-36]	; 0xffffffdc
   11cd0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11cd4:	cmp	r3, #1
   11cd8:	bhi	11cec <__assert_fail@plt+0xdd0>
   11cdc:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   11ce0:	cmp	r2, #0
   11ce4:	sbcs	r3, r3, #0
   11ce8:	bge	11d30 <__assert_fail@plt+0xe14>
   11cec:	movw	r0, #37196	; 0x914c
   11cf0:	movt	r0, #1
   11cf4:	bl	10e20 <gettext@plt>
   11cf8:	mov	r4, r0
   11cfc:	movw	r3, #41304	; 0xa158
   11d00:	movt	r3, #2
   11d04:	ldr	r3, [r3]
   11d08:	mov	r0, r3
   11d0c:	bl	16360 <__assert_fail@plt+0x5444>
   11d10:	mov	r3, r0
   11d14:	str	r3, [sp]
   11d18:	mov	r3, r4
   11d1c:	movw	r2, #37216	; 0x9160
   11d20:	movt	r2, #1
   11d24:	mov	r1, #0
   11d28:	mov	r0, #1
   11d2c:	bl	10dc0 <error@plt>
   11d30:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11d34:	cmp	r3, #1
   11d38:	beq	11d60 <__assert_fail@plt+0xe44>
   11d3c:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   11d40:	mvn	r0, #-2147483648	; 0x80000000
   11d44:	mov	r1, #0
   11d48:	cmp	r0, r2
   11d4c:	sbcs	r3, r1, r3
   11d50:	blt	11d60 <__assert_fail@plt+0xe44>
   11d54:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   11d58:	mov	r3, r2
   11d5c:	b	11d64 <__assert_fail@plt+0xe48>
   11d60:	mov	r3, #0
   11d64:	str	r3, [fp, #-28]	; 0xffffffe4
   11d68:	b	11dd4 <__assert_fail@plt+0xeb8>
   11d6c:	mov	r3, #1
   11d70:	strb	r3, [fp, #-22]	; 0xffffffea
   11d74:	b	11dd4 <__assert_fail@plt+0xeb8>
   11d78:	mov	r0, #0
   11d7c:	bl	1126c <__assert_fail@plt+0x350>
   11d80:	movw	r3, #41300	; 0xa154
   11d84:	movt	r3, #2
   11d88:	ldr	r0, [r3]
   11d8c:	movw	r3, #41196	; 0xa0ec
   11d90:	movt	r3, #2
   11d94:	ldr	r2, [r3]
   11d98:	mov	r3, #0
   11d9c:	str	r3, [sp, #4]
   11da0:	movw	r3, #37224	; 0x9168
   11da4:	movt	r3, #1
   11da8:	str	r3, [sp]
   11dac:	mov	r3, r2
   11db0:	movw	r2, #35824	; 0x8bf0
   11db4:	movt	r2, #1
   11db8:	movw	r1, #37092	; 0x90e4
   11dbc:	movt	r1, #1
   11dc0:	bl	16b0c <__assert_fail@plt+0x5bf0>
   11dc4:	mov	r0, #0
   11dc8:	bl	10e14 <exit@plt>
   11dcc:	mov	r0, #1
   11dd0:	bl	1126c <__assert_fail@plt+0x350>
   11dd4:	mov	r3, #0
   11dd8:	str	r3, [sp]
   11ddc:	movw	r3, #36236	; 0x8d8c
   11de0:	movt	r3, #1
   11de4:	movw	r2, #37240	; 0x9178
   11de8:	movt	r2, #1
   11dec:	ldr	r1, [fp, #-52]	; 0xffffffcc
   11df0:	ldr	r0, [fp, #-48]	; 0xffffffd0
   11df4:	bl	10dfc <getopt_long@plt>
   11df8:	str	r0, [fp, #-32]	; 0xffffffe0
   11dfc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11e00:	cmn	r3, #1
   11e04:	bne	11c44 <__assert_fail@plt+0xd28>
   11e08:	movw	r3, #41280	; 0xa140
   11e0c:	movt	r3, #2
   11e10:	ldr	r3, [r3]
   11e14:	ldr	r2, [fp, #-48]	; 0xffffffd0
   11e18:	sub	r3, r2, r3
   11e1c:	cmp	r3, #1
   11e20:	ble	11e78 <__assert_fail@plt+0xf5c>
   11e24:	movw	r0, #37248	; 0x9180
   11e28:	movt	r0, #1
   11e2c:	bl	10e20 <gettext@plt>
   11e30:	mov	r4, r0
   11e34:	movw	r3, #41280	; 0xa140
   11e38:	movt	r3, #2
   11e3c:	ldr	r3, [r3]
   11e40:	add	r3, r3, #1
   11e44:	lsl	r3, r3, #2
   11e48:	ldr	r2, [fp, #-52]	; 0xffffffcc
   11e4c:	add	r3, r2, r3
   11e50:	ldr	r3, [r3]
   11e54:	mov	r0, r3
   11e58:	bl	16360 <__assert_fail@plt+0x5444>
   11e5c:	mov	r3, r0
   11e60:	mov	r2, r4
   11e64:	mov	r1, #0
   11e68:	mov	r0, #0
   11e6c:	bl	10dc0 <error@plt>
   11e70:	mov	r0, #1
   11e74:	bl	1126c <__assert_fail@plt+0x350>
   11e78:	movw	r3, #41280	; 0xa140
   11e7c:	movt	r3, #2
   11e80:	ldr	r3, [r3]
   11e84:	ldr	r2, [fp, #-48]	; 0xffffffd0
   11e88:	cmp	r2, r3
   11e8c:	ble	11eb4 <__assert_fail@plt+0xf98>
   11e90:	movw	r3, #41280	; 0xa140
   11e94:	movt	r3, #2
   11e98:	ldr	r3, [r3]
   11e9c:	lsl	r3, r3, #2
   11ea0:	ldr	r2, [fp, #-52]	; 0xffffffcc
   11ea4:	add	r3, r2, r3
   11ea8:	ldr	r3, [r3]
   11eac:	str	r3, [fp, #-20]	; 0xffffffec
   11eb0:	b	11ec0 <__assert_fail@plt+0xfa4>
   11eb4:	movw	r3, #37112	; 0x90f8
   11eb8:	movt	r3, #1
   11ebc:	str	r3, [fp, #-20]	; 0xffffffec
   11ec0:	movw	r1, #37112	; 0x90f8
   11ec4:	movt	r1, #1
   11ec8:	ldr	r0, [fp, #-20]	; 0xffffffec
   11ecc:	bl	10cc4 <strcmp@plt>
   11ed0:	mov	r3, r0
   11ed4:	cmp	r3, #0
   11ed8:	bne	11efc <__assert_fail@plt+0xfe0>
   11edc:	mov	r1, #0
   11ee0:	mov	r0, #0
   11ee4:	bl	1755c <__assert_fail@plt+0x6640>
   11ee8:	movw	r3, #41296	; 0xa150
   11eec:	movt	r3, #2
   11ef0:	ldr	r3, [r3]
   11ef4:	str	r3, [fp, #-16]
   11ef8:	b	11f50 <__assert_fail@plt+0x1034>
   11efc:	movw	r1, #37268	; 0x9194
   11f00:	movt	r1, #1
   11f04:	ldr	r0, [fp, #-20]	; 0xffffffec
   11f08:	bl	10ed4 <fopen64@plt>
   11f0c:	str	r0, [fp, #-16]
   11f10:	ldr	r3, [fp, #-16]
   11f14:	cmp	r3, #0
   11f18:	bne	11f50 <__assert_fail@plt+0x1034>
   11f1c:	bl	10e50 <__errno_location@plt>
   11f20:	mov	r3, r0
   11f24:	ldr	r4, [r3]
   11f28:	ldr	r2, [fp, #-20]	; 0xffffffec
   11f2c:	mov	r1, #3
   11f30:	mov	r0, #0
   11f34:	bl	16064 <__assert_fail@plt+0x5148>
   11f38:	mov	r3, r0
   11f3c:	movw	r2, #37140	; 0x9114
   11f40:	movt	r2, #1
   11f44:	mov	r1, r4
   11f48:	mov	r0, #1
   11f4c:	bl	10dc0 <error@plt>
   11f50:	mov	r1, #2
   11f54:	ldr	r0, [fp, #-16]
   11f58:	bl	134c4 <__assert_fail@plt+0x25a8>
   11f5c:	ldrb	r3, [fp, #-21]	; 0xffffffeb
   11f60:	cmp	r3, #0
   11f64:	beq	11f88 <__assert_fail@plt+0x106c>
   11f68:	movw	r3, #41300	; 0xa154
   11f6c:	movt	r3, #2
   11f70:	ldr	r2, [r3]
   11f74:	ldrb	r3, [fp, #-22]	; 0xffffffea
   11f78:	ldr	r1, [fp, #-20]	; 0xffffffec
   11f7c:	ldr	r0, [fp, #-16]
   11f80:	bl	11884 <__assert_fail@plt+0x968>
   11f84:	b	11fa4 <__assert_fail@plt+0x1088>
   11f88:	movw	r3, #41300	; 0xa154
   11f8c:	movt	r3, #2
   11f90:	ldr	r2, [r3]
   11f94:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11f98:	ldr	r1, [fp, #-20]	; 0xffffffec
   11f9c:	ldr	r0, [fp, #-16]
   11fa0:	bl	1164c <__assert_fail@plt+0x730>
   11fa4:	mov	r3, #0
   11fa8:	mov	r0, r3
   11fac:	sub	sp, fp, #8
   11fb0:	ldr	r4, [sp]
   11fb4:	ldr	fp, [sp, #4]
   11fb8:	add	sp, sp, #8
   11fbc:	pop	{pc}		; (ldr pc, [sp], #4)
   11fc0:	push	{fp}		; (str fp, [sp, #-4]!)
   11fc4:	add	fp, sp, #0
   11fc8:	sub	sp, sp, #12
   11fcc:	mov	r3, r0
   11fd0:	strb	r3, [fp, #-5]
   11fd4:	ldrb	r3, [fp, #-5]
   11fd8:	mov	r0, r3
   11fdc:	add	sp, fp, #0
   11fe0:	pop	{fp}		; (ldr fp, [sp], #4)
   11fe4:	bx	lr
   11fe8:	str	r4, [sp, #-12]!
   11fec:	str	fp, [sp, #4]
   11ff0:	str	lr, [sp, #8]
   11ff4:	add	fp, sp, #8
   11ff8:	sub	sp, sp, #20
   11ffc:	str	r0, [fp, #-16]
   12000:	str	r1, [fp, #-20]	; 0xffffffec
   12004:	str	r2, [fp, #-24]	; 0xffffffe8
   12008:	str	r3, [fp, #-28]	; 0xffffffe4
   1200c:	b	12480 <__assert_fail@plt+0x1564>
   12010:	ldr	r3, [fp, #-16]
   12014:	ldrb	r3, [r3]
   12018:	mov	r0, r3
   1201c:	bl	11fc0 <__assert_fail@plt+0x10a4>
   12020:	mov	r3, r0
   12024:	lsr	r3, r3, #3
   12028:	uxtb	r3, r3
   1202c:	and	r1, r3, #31
   12030:	ldr	r2, [fp, #-24]	; 0xffffffe8
   12034:	add	r3, r2, #1
   12038:	str	r3, [fp, #-24]	; 0xffffffe8
   1203c:	movw	r3, #37544	; 0x92a8
   12040:	movt	r3, #1
   12044:	ldrb	r3, [r3, r1]
   12048:	strb	r3, [r2]
   1204c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12050:	sub	r3, r3, #1
   12054:	str	r3, [fp, #-28]	; 0xffffffe4
   12058:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1205c:	cmp	r3, #0
   12060:	beq	1249c <__assert_fail@plt+0x1580>
   12064:	ldr	r3, [fp, #-16]
   12068:	ldrb	r3, [r3]
   1206c:	mov	r0, r3
   12070:	bl	11fc0 <__assert_fail@plt+0x10a4>
   12074:	mov	r3, r0
   12078:	lsl	r4, r3, #2
   1207c:	ldr	r3, [fp, #-20]	; 0xffffffec
   12080:	sub	r3, r3, #1
   12084:	str	r3, [fp, #-20]	; 0xffffffec
   12088:	ldr	r3, [fp, #-20]	; 0xffffffec
   1208c:	cmp	r3, #0
   12090:	beq	120b8 <__assert_fail@plt+0x119c>
   12094:	ldr	r3, [fp, #-16]
   12098:	add	r3, r3, #1
   1209c:	ldrb	r3, [r3]
   120a0:	mov	r0, r3
   120a4:	bl	11fc0 <__assert_fail@plt+0x10a4>
   120a8:	mov	r3, r0
   120ac:	lsr	r3, r3, #6
   120b0:	uxtb	r3, r3
   120b4:	b	120bc <__assert_fail@plt+0x11a0>
   120b8:	mov	r3, #0
   120bc:	add	r3, r3, r4
   120c0:	and	r1, r3, #31
   120c4:	ldr	r2, [fp, #-24]	; 0xffffffe8
   120c8:	add	r3, r2, #1
   120cc:	str	r3, [fp, #-24]	; 0xffffffe8
   120d0:	movw	r3, #37544	; 0x92a8
   120d4:	movt	r3, #1
   120d8:	ldrb	r3, [r3, r1]
   120dc:	strb	r3, [r2]
   120e0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   120e4:	sub	r3, r3, #1
   120e8:	str	r3, [fp, #-28]	; 0xffffffe4
   120ec:	ldr	r3, [fp, #-28]	; 0xffffffe4
   120f0:	cmp	r3, #0
   120f4:	beq	124a4 <__assert_fail@plt+0x1588>
   120f8:	ldr	r3, [fp, #-20]	; 0xffffffec
   120fc:	cmp	r3, #0
   12100:	beq	12138 <__assert_fail@plt+0x121c>
   12104:	ldr	r3, [fp, #-16]
   12108:	add	r3, r3, #1
   1210c:	ldrb	r3, [r3]
   12110:	mov	r0, r3
   12114:	bl	11fc0 <__assert_fail@plt+0x10a4>
   12118:	mov	r3, r0
   1211c:	lsr	r3, r3, #1
   12120:	uxtb	r3, r3
   12124:	and	r2, r3, #31
   12128:	movw	r3, #37544	; 0x92a8
   1212c:	movt	r3, #1
   12130:	ldrb	r1, [r3, r2]
   12134:	b	1213c <__assert_fail@plt+0x1220>
   12138:	mov	r1, #61	; 0x3d
   1213c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12140:	add	r2, r3, #1
   12144:	str	r2, [fp, #-24]	; 0xffffffe8
   12148:	mov	r2, r1
   1214c:	strb	r2, [r3]
   12150:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12154:	sub	r3, r3, #1
   12158:	str	r3, [fp, #-28]	; 0xffffffe4
   1215c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12160:	cmp	r3, #0
   12164:	beq	124ac <__assert_fail@plt+0x1590>
   12168:	ldr	r3, [fp, #-20]	; 0xffffffec
   1216c:	cmp	r3, #0
   12170:	beq	121e8 <__assert_fail@plt+0x12cc>
   12174:	ldr	r3, [fp, #-16]
   12178:	add	r3, r3, #1
   1217c:	ldrb	r3, [r3]
   12180:	mov	r0, r3
   12184:	bl	11fc0 <__assert_fail@plt+0x10a4>
   12188:	mov	r3, r0
   1218c:	lsl	r4, r3, #4
   12190:	ldr	r3, [fp, #-20]	; 0xffffffec
   12194:	sub	r3, r3, #1
   12198:	str	r3, [fp, #-20]	; 0xffffffec
   1219c:	ldr	r3, [fp, #-20]	; 0xffffffec
   121a0:	cmp	r3, #0
   121a4:	beq	121cc <__assert_fail@plt+0x12b0>
   121a8:	ldr	r3, [fp, #-16]
   121ac:	add	r3, r3, #2
   121b0:	ldrb	r3, [r3]
   121b4:	mov	r0, r3
   121b8:	bl	11fc0 <__assert_fail@plt+0x10a4>
   121bc:	mov	r3, r0
   121c0:	lsr	r3, r3, #4
   121c4:	uxtb	r3, r3
   121c8:	b	121d0 <__assert_fail@plt+0x12b4>
   121cc:	mov	r3, #0
   121d0:	add	r3, r3, r4
   121d4:	and	r2, r3, #31
   121d8:	movw	r3, #37544	; 0x92a8
   121dc:	movt	r3, #1
   121e0:	ldrb	r1, [r3, r2]
   121e4:	b	121ec <__assert_fail@plt+0x12d0>
   121e8:	mov	r1, #61	; 0x3d
   121ec:	ldr	r3, [fp, #-24]	; 0xffffffe8
   121f0:	add	r2, r3, #1
   121f4:	str	r2, [fp, #-24]	; 0xffffffe8
   121f8:	mov	r2, r1
   121fc:	strb	r2, [r3]
   12200:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12204:	sub	r3, r3, #1
   12208:	str	r3, [fp, #-28]	; 0xffffffe4
   1220c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12210:	cmp	r3, #0
   12214:	beq	124b4 <__assert_fail@plt+0x1598>
   12218:	ldr	r3, [fp, #-20]	; 0xffffffec
   1221c:	cmp	r3, #0
   12220:	beq	12298 <__assert_fail@plt+0x137c>
   12224:	ldr	r3, [fp, #-16]
   12228:	add	r3, r3, #2
   1222c:	ldrb	r3, [r3]
   12230:	mov	r0, r3
   12234:	bl	11fc0 <__assert_fail@plt+0x10a4>
   12238:	mov	r3, r0
   1223c:	lsl	r4, r3, #1
   12240:	ldr	r3, [fp, #-20]	; 0xffffffec
   12244:	sub	r3, r3, #1
   12248:	str	r3, [fp, #-20]	; 0xffffffec
   1224c:	ldr	r3, [fp, #-20]	; 0xffffffec
   12250:	cmp	r3, #0
   12254:	beq	1227c <__assert_fail@plt+0x1360>
   12258:	ldr	r3, [fp, #-16]
   1225c:	add	r3, r3, #3
   12260:	ldrb	r3, [r3]
   12264:	mov	r0, r3
   12268:	bl	11fc0 <__assert_fail@plt+0x10a4>
   1226c:	mov	r3, r0
   12270:	lsr	r3, r3, #7
   12274:	uxtb	r3, r3
   12278:	b	12280 <__assert_fail@plt+0x1364>
   1227c:	mov	r3, #0
   12280:	add	r3, r3, r4
   12284:	and	r2, r3, #31
   12288:	movw	r3, #37544	; 0x92a8
   1228c:	movt	r3, #1
   12290:	ldrb	r1, [r3, r2]
   12294:	b	1229c <__assert_fail@plt+0x1380>
   12298:	mov	r1, #61	; 0x3d
   1229c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   122a0:	add	r2, r3, #1
   122a4:	str	r2, [fp, #-24]	; 0xffffffe8
   122a8:	mov	r2, r1
   122ac:	strb	r2, [r3]
   122b0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   122b4:	sub	r3, r3, #1
   122b8:	str	r3, [fp, #-28]	; 0xffffffe4
   122bc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   122c0:	cmp	r3, #0
   122c4:	beq	124bc <__assert_fail@plt+0x15a0>
   122c8:	ldr	r3, [fp, #-20]	; 0xffffffec
   122cc:	cmp	r3, #0
   122d0:	beq	12308 <__assert_fail@plt+0x13ec>
   122d4:	ldr	r3, [fp, #-16]
   122d8:	add	r3, r3, #3
   122dc:	ldrb	r3, [r3]
   122e0:	mov	r0, r3
   122e4:	bl	11fc0 <__assert_fail@plt+0x10a4>
   122e8:	mov	r3, r0
   122ec:	lsr	r3, r3, #2
   122f0:	uxtb	r3, r3
   122f4:	and	r2, r3, #31
   122f8:	movw	r3, #37544	; 0x92a8
   122fc:	movt	r3, #1
   12300:	ldrb	r1, [r3, r2]
   12304:	b	1230c <__assert_fail@plt+0x13f0>
   12308:	mov	r1, #61	; 0x3d
   1230c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12310:	add	r2, r3, #1
   12314:	str	r2, [fp, #-24]	; 0xffffffe8
   12318:	mov	r2, r1
   1231c:	strb	r2, [r3]
   12320:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12324:	sub	r3, r3, #1
   12328:	str	r3, [fp, #-28]	; 0xffffffe4
   1232c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12330:	cmp	r3, #0
   12334:	beq	124c4 <__assert_fail@plt+0x15a8>
   12338:	ldr	r3, [fp, #-20]	; 0xffffffec
   1233c:	cmp	r3, #0
   12340:	beq	123b8 <__assert_fail@plt+0x149c>
   12344:	ldr	r3, [fp, #-16]
   12348:	add	r3, r3, #3
   1234c:	ldrb	r3, [r3]
   12350:	mov	r0, r3
   12354:	bl	11fc0 <__assert_fail@plt+0x10a4>
   12358:	mov	r3, r0
   1235c:	lsl	r4, r3, #3
   12360:	ldr	r3, [fp, #-20]	; 0xffffffec
   12364:	sub	r3, r3, #1
   12368:	str	r3, [fp, #-20]	; 0xffffffec
   1236c:	ldr	r3, [fp, #-20]	; 0xffffffec
   12370:	cmp	r3, #0
   12374:	beq	1239c <__assert_fail@plt+0x1480>
   12378:	ldr	r3, [fp, #-16]
   1237c:	add	r3, r3, #4
   12380:	ldrb	r3, [r3]
   12384:	mov	r0, r3
   12388:	bl	11fc0 <__assert_fail@plt+0x10a4>
   1238c:	mov	r3, r0
   12390:	lsr	r3, r3, #5
   12394:	uxtb	r3, r3
   12398:	b	123a0 <__assert_fail@plt+0x1484>
   1239c:	mov	r3, #0
   123a0:	add	r3, r3, r4
   123a4:	and	r2, r3, #31
   123a8:	movw	r3, #37544	; 0x92a8
   123ac:	movt	r3, #1
   123b0:	ldrb	r1, [r3, r2]
   123b4:	b	123bc <__assert_fail@plt+0x14a0>
   123b8:	mov	r1, #61	; 0x3d
   123bc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   123c0:	add	r2, r3, #1
   123c4:	str	r2, [fp, #-24]	; 0xffffffe8
   123c8:	mov	r2, r1
   123cc:	strb	r2, [r3]
   123d0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   123d4:	sub	r3, r3, #1
   123d8:	str	r3, [fp, #-28]	; 0xffffffe4
   123dc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   123e0:	cmp	r3, #0
   123e4:	beq	124cc <__assert_fail@plt+0x15b0>
   123e8:	ldr	r3, [fp, #-20]	; 0xffffffec
   123ec:	cmp	r3, #0
   123f0:	beq	12420 <__assert_fail@plt+0x1504>
   123f4:	ldr	r3, [fp, #-16]
   123f8:	add	r3, r3, #4
   123fc:	ldrb	r3, [r3]
   12400:	mov	r0, r3
   12404:	bl	11fc0 <__assert_fail@plt+0x10a4>
   12408:	mov	r3, r0
   1240c:	and	r2, r3, #31
   12410:	movw	r3, #37544	; 0x92a8
   12414:	movt	r3, #1
   12418:	ldrb	r1, [r3, r2]
   1241c:	b	12424 <__assert_fail@plt+0x1508>
   12420:	mov	r1, #61	; 0x3d
   12424:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12428:	add	r2, r3, #1
   1242c:	str	r2, [fp, #-24]	; 0xffffffe8
   12430:	mov	r2, r1
   12434:	strb	r2, [r3]
   12438:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1243c:	sub	r3, r3, #1
   12440:	str	r3, [fp, #-28]	; 0xffffffe4
   12444:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12448:	cmp	r3, #0
   1244c:	beq	124d4 <__assert_fail@plt+0x15b8>
   12450:	ldr	r3, [fp, #-20]	; 0xffffffec
   12454:	cmp	r3, #0
   12458:	beq	12468 <__assert_fail@plt+0x154c>
   1245c:	ldr	r3, [fp, #-20]	; 0xffffffec
   12460:	sub	r3, r3, #1
   12464:	str	r3, [fp, #-20]	; 0xffffffec
   12468:	ldr	r3, [fp, #-20]	; 0xffffffec
   1246c:	cmp	r3, #0
   12470:	beq	12480 <__assert_fail@plt+0x1564>
   12474:	ldr	r3, [fp, #-16]
   12478:	add	r3, r3, #5
   1247c:	str	r3, [fp, #-16]
   12480:	ldr	r3, [fp, #-20]	; 0xffffffec
   12484:	cmp	r3, #0
   12488:	beq	124d8 <__assert_fail@plt+0x15bc>
   1248c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12490:	cmp	r3, #0
   12494:	bne	12010 <__assert_fail@plt+0x10f4>
   12498:	b	124d8 <__assert_fail@plt+0x15bc>
   1249c:	nop	{0}
   124a0:	b	124d8 <__assert_fail@plt+0x15bc>
   124a4:	nop	{0}
   124a8:	b	124d8 <__assert_fail@plt+0x15bc>
   124ac:	nop	{0}
   124b0:	b	124d8 <__assert_fail@plt+0x15bc>
   124b4:	nop	{0}
   124b8:	b	124d8 <__assert_fail@plt+0x15bc>
   124bc:	nop	{0}
   124c0:	b	124d8 <__assert_fail@plt+0x15bc>
   124c4:	nop	{0}
   124c8:	b	124d8 <__assert_fail@plt+0x15bc>
   124cc:	nop	{0}
   124d0:	b	124d8 <__assert_fail@plt+0x15bc>
   124d4:	nop	{0}
   124d8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   124dc:	cmp	r3, #0
   124e0:	beq	124f0 <__assert_fail@plt+0x15d4>
   124e4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   124e8:	mov	r2, #0
   124ec:	strb	r2, [r3]
   124f0:	nop	{0}
   124f4:	sub	sp, fp, #8
   124f8:	ldr	r4, [sp]
   124fc:	ldr	fp, [sp, #4]
   12500:	add	sp, sp, #8
   12504:	pop	{pc}		; (ldr pc, [sp], #4)
   12508:	str	fp, [sp, #-8]!
   1250c:	str	lr, [sp, #4]
   12510:	add	fp, sp, #4
   12514:	sub	sp, sp, #24
   12518:	str	r0, [fp, #-16]
   1251c:	str	r1, [fp, #-20]	; 0xffffffec
   12520:	str	r2, [fp, #-24]	; 0xffffffe8
   12524:	ldr	r2, [fp, #-20]	; 0xffffffec
   12528:	movw	r3, #26215	; 0x6667
   1252c:	movt	r3, #26214	; 0x6666
   12530:	smull	r1, r3, r3, r2
   12534:	asr	r1, r3, #1
   12538:	asr	r3, r2, #31
   1253c:	sub	r0, r1, r3
   12540:	ldr	r1, [fp, #-20]	; 0xffffffec
   12544:	movw	r3, #26215	; 0x6667
   12548:	movt	r3, #26214	; 0x6666
   1254c:	smull	r2, r3, r3, r1
   12550:	asr	r2, r3, #1
   12554:	asr	r3, r1, #31
   12558:	sub	r2, r2, r3
   1255c:	mov	r3, r2
   12560:	lsl	r3, r3, #2
   12564:	add	r3, r3, r2
   12568:	sub	r2, r1, r3
   1256c:	cmp	r2, #0
   12570:	movne	r3, #1
   12574:	moveq	r3, #0
   12578:	uxtb	r3, r3
   1257c:	add	r3, r0, r3
   12580:	str	r3, [fp, #-8]
   12584:	mov	lr, #0
   12588:	ldr	r3, [fp, #-8]
   1258c:	mov	r0, r3
   12590:	asr	r1, r0, #31
   12594:	mov	r2, #0
   12598:	mov	r3, #0
   1259c:	lsl	r3, r1, #3
   125a0:	orr	r3, r3, r0, lsr #29
   125a4:	lsl	r2, r0, #3
   125a8:	mov	r0, #0
   125ac:	mov	r1, #0
   125b0:	mov	r0, r3
   125b4:	asr	r1, r3, #31
   125b8:	asr	ip, r2, #31
   125bc:	cmp	ip, r0
   125c0:	beq	125c8 <__assert_fail@plt+0x16ac>
   125c4:	mov	lr, #1
   125c8:	mov	r3, r2
   125cc:	str	r3, [fp, #-12]
   125d0:	mov	r3, lr
   125d4:	and	r3, r3, #1
   125d8:	uxtb	r3, r3
   125dc:	cmp	r3, #0
   125e0:	bne	125f0 <__assert_fail@plt+0x16d4>
   125e4:	ldr	r3, [fp, #-20]	; 0xffffffec
   125e8:	cmp	r3, #0
   125ec:	bge	12604 <__assert_fail@plt+0x16e8>
   125f0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   125f4:	mov	r2, #0
   125f8:	str	r2, [r3]
   125fc:	mov	r3, #0
   12600:	b	12664 <__assert_fail@plt+0x1748>
   12604:	ldr	r3, [fp, #-12]
   12608:	add	r3, r3, #1
   1260c:	str	r3, [fp, #-12]
   12610:	ldr	r3, [fp, #-12]
   12614:	mov	r0, r3
   12618:	bl	138b8 <__assert_fail@plt+0x299c>
   1261c:	mov	r3, r0
   12620:	mov	r2, r3
   12624:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12628:	str	r2, [r3]
   1262c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12630:	ldr	r3, [r3]
   12634:	cmp	r3, #0
   12638:	bne	12644 <__assert_fail@plt+0x1728>
   1263c:	ldr	r3, [fp, #-12]
   12640:	b	12664 <__assert_fail@plt+0x1748>
   12644:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12648:	ldr	r2, [r3]
   1264c:	ldr	r3, [fp, #-12]
   12650:	ldr	r1, [fp, #-20]	; 0xffffffec
   12654:	ldr	r0, [fp, #-16]
   12658:	bl	11fe8 <__assert_fail@plt+0x10cc>
   1265c:	ldr	r3, [fp, #-12]
   12660:	sub	r3, r3, #1
   12664:	mov	r0, r3
   12668:	sub	sp, fp, #4
   1266c:	ldr	fp, [sp]
   12670:	add	sp, sp, #4
   12674:	pop	{pc}		; (ldr pc, [sp], #4)
   12678:	str	fp, [sp, #-8]!
   1267c:	str	lr, [sp, #4]
   12680:	add	fp, sp, #4
   12684:	sub	sp, sp, #8
   12688:	mov	r3, r0
   1268c:	strb	r3, [fp, #-5]
   12690:	ldrb	r3, [fp, #-5]
   12694:	mov	r0, r3
   12698:	bl	11fc0 <__assert_fail@plt+0x10a4>
   1269c:	mov	r3, r0
   126a0:	mov	r2, r3
   126a4:	movw	r3, #37288	; 0x91a8
   126a8:	movt	r3, #1
   126ac:	ldrsb	r3, [r3, r2]
   126b0:	mvn	r3, r3
   126b4:	uxtb	r3, r3
   126b8:	lsr	r3, r3, #7
   126bc:	uxtb	r3, r3
   126c0:	mov	r0, r3
   126c4:	sub	sp, fp, #4
   126c8:	ldr	fp, [sp]
   126cc:	add	sp, sp, #4
   126d0:	pop	{pc}		; (ldr pc, [sp], #4)
   126d4:	push	{fp}		; (str fp, [sp, #-4]!)
   126d8:	add	fp, sp, #0
   126dc:	sub	sp, sp, #12
   126e0:	str	r0, [fp, #-8]
   126e4:	ldr	r3, [fp, #-8]
   126e8:	mov	r2, #0
   126ec:	str	r2, [r3]
   126f0:	nop	{0}
   126f4:	add	sp, fp, #0
   126f8:	pop	{fp}		; (ldr fp, [sp], #4)
   126fc:	bx	lr
   12700:	str	fp, [sp, #-8]!
   12704:	str	lr, [sp, #4]
   12708:	add	fp, sp, #4
   1270c:	sub	sp, sp, #32
   12710:	str	r0, [fp, #-24]	; 0xffffffe8
   12714:	str	r1, [fp, #-28]	; 0xffffffe4
   12718:	str	r2, [fp, #-32]	; 0xffffffe0
   1271c:	str	r3, [fp, #-36]	; 0xffffffdc
   12720:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12724:	ldr	r3, [r3]
   12728:	cmp	r3, #8
   1272c:	bne	1273c <__assert_fail@plt+0x1820>
   12730:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12734:	mov	r2, #0
   12738:	str	r2, [r3]
   1273c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12740:	ldr	r3, [r3]
   12744:	cmp	r3, #0
   12748:	bne	127b4 <__assert_fail@plt+0x1898>
   1274c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12750:	ldr	r3, [r3]
   12754:	str	r3, [fp, #-12]
   12758:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1275c:	ldr	r3, [r3]
   12760:	ldr	r2, [fp, #-32]	; 0xffffffe0
   12764:	sub	r3, r2, r3
   12768:	cmp	r3, #7
   1276c:	ble	127b4 <__assert_fail@plt+0x1898>
   12770:	mov	r2, #8
   12774:	mov	r1, #10
   12778:	ldr	r0, [fp, #-12]
   1277c:	bl	10e80 <memchr@plt>
   12780:	mov	r3, r0
   12784:	cmp	r3, #0
   12788:	bne	127b4 <__assert_fail@plt+0x1898>
   1278c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12790:	ldr	r3, [r3]
   12794:	add	r2, r3, #8
   12798:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1279c:	str	r2, [r3]
   127a0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   127a4:	mov	r2, #8
   127a8:	str	r2, [r3]
   127ac:	ldr	r3, [fp, #-12]
   127b0:	b	12854 <__assert_fail@plt+0x1938>
   127b4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   127b8:	ldr	r3, [r3]
   127bc:	str	r3, [fp, #-8]
   127c0:	b	12818 <__assert_fail@plt+0x18fc>
   127c4:	ldr	r3, [fp, #-8]
   127c8:	add	r2, r3, #1
   127cc:	str	r2, [fp, #-8]
   127d0:	ldrb	r3, [r3]
   127d4:	strb	r3, [fp, #-13]
   127d8:	ldrb	r3, [fp, #-13]
   127dc:	cmp	r3, #10
   127e0:	beq	12818 <__assert_fail@plt+0x18fc>
   127e4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   127e8:	ldr	r3, [r3]
   127ec:	add	r1, r3, #1
   127f0:	ldr	r2, [fp, #-24]	; 0xffffffe8
   127f4:	str	r1, [r2]
   127f8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   127fc:	add	r3, r2, r3
   12800:	ldrb	r2, [fp, #-13]
   12804:	strb	r2, [r3, #4]
   12808:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1280c:	ldr	r3, [r3]
   12810:	cmp	r3, #8
   12814:	beq	1282c <__assert_fail@plt+0x1910>
   12818:	ldr	r2, [fp, #-8]
   1281c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12820:	cmp	r2, r3
   12824:	bcc	127c4 <__assert_fail@plt+0x18a8>
   12828:	b	12830 <__assert_fail@plt+0x1914>
   1282c:	nop	{0}
   12830:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12834:	ldr	r2, [fp, #-8]
   12838:	str	r2, [r3]
   1283c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12840:	ldr	r2, [r3]
   12844:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12848:	str	r2, [r3]
   1284c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12850:	add	r3, r3, #4
   12854:	mov	r0, r3
   12858:	sub	sp, fp, #4
   1285c:	ldr	fp, [sp]
   12860:	add	sp, sp, #4
   12864:	pop	{pc}		; (ldr pc, [sp], #4)
   12868:	str	r4, [sp, #-12]!
   1286c:	str	fp, [sp, #4]
   12870:	str	lr, [sp, #8]
   12874:	add	fp, sp, #8
   12878:	sub	sp, sp, #28
   1287c:	str	r0, [fp, #-24]	; 0xffffffe8
   12880:	str	r1, [fp, #-28]	; 0xffffffe4
   12884:	str	r2, [fp, #-32]	; 0xffffffe0
   12888:	str	r3, [fp, #-36]	; 0xffffffdc
   1288c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12890:	ldr	r3, [r3]
   12894:	str	r3, [fp, #-16]
   12898:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1289c:	cmp	r3, #7
   128a0:	bgt	128ac <__assert_fail@plt+0x1990>
   128a4:	mov	r3, #0
   128a8:	b	12f28 <__assert_fail@plt+0x200c>
   128ac:	ldr	r3, [fp, #-24]	; 0xffffffe8
   128b0:	ldrb	r3, [r3]
   128b4:	mov	r0, r3
   128b8:	bl	12678 <__assert_fail@plt+0x175c>
   128bc:	mov	r3, r0
   128c0:	eor	r3, r3, #1
   128c4:	uxtb	r3, r3
   128c8:	cmp	r3, #0
   128cc:	bne	128f8 <__assert_fail@plt+0x19dc>
   128d0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   128d4:	add	r3, r3, #1
   128d8:	ldrb	r3, [r3]
   128dc:	mov	r0, r3
   128e0:	bl	12678 <__assert_fail@plt+0x175c>
   128e4:	mov	r3, r0
   128e8:	eor	r3, r3, #1
   128ec:	uxtb	r3, r3
   128f0:	cmp	r3, #0
   128f4:	beq	12900 <__assert_fail@plt+0x19e4>
   128f8:	mov	r3, #0
   128fc:	b	12f28 <__assert_fail@plt+0x200c>
   12900:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12904:	ldr	r3, [r3]
   12908:	cmp	r3, #0
   1290c:	beq	1299c <__assert_fail@plt+0x1a80>
   12910:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12914:	ldrb	r3, [r3]
   12918:	mov	r0, r3
   1291c:	bl	11fc0 <__assert_fail@plt+0x10a4>
   12920:	mov	r3, r0
   12924:	mov	r2, r3
   12928:	movw	r3, #37288	; 0x91a8
   1292c:	movt	r3, #1
   12930:	ldrsb	r3, [r3, r2]
   12934:	lsl	r3, r3, #3
   12938:	sxtb	r4, r3
   1293c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12940:	add	r3, r3, #1
   12944:	ldrb	r3, [r3]
   12948:	mov	r0, r3
   1294c:	bl	11fc0 <__assert_fail@plt+0x10a4>
   12950:	mov	r3, r0
   12954:	mov	r2, r3
   12958:	movw	r3, #37288	; 0x91a8
   1295c:	movt	r3, #1
   12960:	ldrsb	r3, [r3, r2]
   12964:	asr	r3, r3, #2
   12968:	sxtb	r3, r3
   1296c:	orr	r3, r4, r3
   12970:	sxtb	r1, r3
   12974:	ldr	r3, [fp, #-16]
   12978:	add	r2, r3, #1
   1297c:	str	r2, [fp, #-16]
   12980:	uxtb	r2, r1
   12984:	strb	r2, [r3]
   12988:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1298c:	ldr	r3, [r3]
   12990:	sub	r2, r3, #1
   12994:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12998:	str	r2, [r3]
   1299c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   129a0:	add	r3, r3, #2
   129a4:	ldrb	r3, [r3]
   129a8:	cmp	r3, #61	; 0x3d
   129ac:	bne	12a28 <__assert_fail@plt+0x1b0c>
   129b0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   129b4:	add	r3, r3, #3
   129b8:	ldrb	r3, [r3]
   129bc:	cmp	r3, #61	; 0x3d
   129c0:	bne	12a14 <__assert_fail@plt+0x1af8>
   129c4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   129c8:	add	r3, r3, #4
   129cc:	ldrb	r3, [r3]
   129d0:	cmp	r3, #61	; 0x3d
   129d4:	bne	12a14 <__assert_fail@plt+0x1af8>
   129d8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   129dc:	add	r3, r3, #5
   129e0:	ldrb	r3, [r3]
   129e4:	cmp	r3, #61	; 0x3d
   129e8:	bne	12a14 <__assert_fail@plt+0x1af8>
   129ec:	ldr	r3, [fp, #-24]	; 0xffffffe8
   129f0:	add	r3, r3, #6
   129f4:	ldrb	r3, [r3]
   129f8:	cmp	r3, #61	; 0x3d
   129fc:	bne	12a14 <__assert_fail@plt+0x1af8>
   12a00:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12a04:	add	r3, r3, #7
   12a08:	ldrb	r3, [r3]
   12a0c:	cmp	r3, #61	; 0x3d
   12a10:	beq	12f18 <__assert_fail@plt+0x1ffc>
   12a14:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12a18:	ldr	r2, [fp, #-16]
   12a1c:	str	r2, [r3]
   12a20:	mov	r3, #0
   12a24:	b	12f28 <__assert_fail@plt+0x200c>
   12a28:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12a2c:	add	r3, r3, #2
   12a30:	ldrb	r3, [r3]
   12a34:	mov	r0, r3
   12a38:	bl	12678 <__assert_fail@plt+0x175c>
   12a3c:	mov	r3, r0
   12a40:	eor	r3, r3, #1
   12a44:	uxtb	r3, r3
   12a48:	cmp	r3, #0
   12a4c:	bne	12a78 <__assert_fail@plt+0x1b5c>
   12a50:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12a54:	add	r3, r3, #3
   12a58:	ldrb	r3, [r3]
   12a5c:	mov	r0, r3
   12a60:	bl	12678 <__assert_fail@plt+0x175c>
   12a64:	mov	r3, r0
   12a68:	eor	r3, r3, #1
   12a6c:	uxtb	r3, r3
   12a70:	cmp	r3, #0
   12a74:	beq	12a8c <__assert_fail@plt+0x1b70>
   12a78:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12a7c:	ldr	r2, [fp, #-16]
   12a80:	str	r2, [r3]
   12a84:	mov	r3, #0
   12a88:	b	12f28 <__assert_fail@plt+0x200c>
   12a8c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12a90:	ldr	r3, [r3]
   12a94:	cmp	r3, #0
   12a98:	beq	12b64 <__assert_fail@plt+0x1c48>
   12a9c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12aa0:	add	r3, r3, #1
   12aa4:	ldrb	r3, [r3]
   12aa8:	mov	r0, r3
   12aac:	bl	11fc0 <__assert_fail@plt+0x10a4>
   12ab0:	mov	r3, r0
   12ab4:	mov	r2, r3
   12ab8:	movw	r3, #37288	; 0x91a8
   12abc:	movt	r3, #1
   12ac0:	ldrsb	r3, [r3, r2]
   12ac4:	lsl	r3, r3, #6
   12ac8:	sxtb	r4, r3
   12acc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12ad0:	add	r3, r3, #2
   12ad4:	ldrb	r3, [r3]
   12ad8:	mov	r0, r3
   12adc:	bl	11fc0 <__assert_fail@plt+0x10a4>
   12ae0:	mov	r3, r0
   12ae4:	mov	r2, r3
   12ae8:	movw	r3, #37288	; 0x91a8
   12aec:	movt	r3, #1
   12af0:	ldrsb	r3, [r3, r2]
   12af4:	lsl	r3, r3, #1
   12af8:	sxtb	r3, r3
   12afc:	orr	r3, r4, r3
   12b00:	sxtb	r4, r3
   12b04:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12b08:	add	r3, r3, #3
   12b0c:	ldrb	r3, [r3]
   12b10:	mov	r0, r3
   12b14:	bl	11fc0 <__assert_fail@plt+0x10a4>
   12b18:	mov	r3, r0
   12b1c:	mov	r2, r3
   12b20:	movw	r3, #37288	; 0x91a8
   12b24:	movt	r3, #1
   12b28:	ldrsb	r3, [r3, r2]
   12b2c:	asr	r3, r3, #4
   12b30:	sxtb	r3, r3
   12b34:	orr	r3, r4, r3
   12b38:	sxtb	r1, r3
   12b3c:	ldr	r3, [fp, #-16]
   12b40:	add	r2, r3, #1
   12b44:	str	r2, [fp, #-16]
   12b48:	uxtb	r2, r1
   12b4c:	strb	r2, [r3]
   12b50:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12b54:	ldr	r3, [r3]
   12b58:	sub	r2, r3, #1
   12b5c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12b60:	str	r2, [r3]
   12b64:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12b68:	add	r3, r3, #4
   12b6c:	ldrb	r3, [r3]
   12b70:	cmp	r3, #61	; 0x3d
   12b74:	bne	12bc8 <__assert_fail@plt+0x1cac>
   12b78:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12b7c:	add	r3, r3, #5
   12b80:	ldrb	r3, [r3]
   12b84:	cmp	r3, #61	; 0x3d
   12b88:	bne	12bb4 <__assert_fail@plt+0x1c98>
   12b8c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12b90:	add	r3, r3, #6
   12b94:	ldrb	r3, [r3]
   12b98:	cmp	r3, #61	; 0x3d
   12b9c:	bne	12bb4 <__assert_fail@plt+0x1c98>
   12ba0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12ba4:	add	r3, r3, #7
   12ba8:	ldrb	r3, [r3]
   12bac:	cmp	r3, #61	; 0x3d
   12bb0:	beq	12f18 <__assert_fail@plt+0x1ffc>
   12bb4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12bb8:	ldr	r2, [fp, #-16]
   12bbc:	str	r2, [r3]
   12bc0:	mov	r3, #0
   12bc4:	b	12f28 <__assert_fail@plt+0x200c>
   12bc8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12bcc:	add	r3, r3, #4
   12bd0:	ldrb	r3, [r3]
   12bd4:	mov	r0, r3
   12bd8:	bl	12678 <__assert_fail@plt+0x175c>
   12bdc:	mov	r3, r0
   12be0:	eor	r3, r3, #1
   12be4:	uxtb	r3, r3
   12be8:	cmp	r3, #0
   12bec:	beq	12c04 <__assert_fail@plt+0x1ce8>
   12bf0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12bf4:	ldr	r2, [fp, #-16]
   12bf8:	str	r2, [r3]
   12bfc:	mov	r3, #0
   12c00:	b	12f28 <__assert_fail@plt+0x200c>
   12c04:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12c08:	ldr	r3, [r3]
   12c0c:	cmp	r3, #0
   12c10:	beq	12ca4 <__assert_fail@plt+0x1d88>
   12c14:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12c18:	add	r3, r3, #3
   12c1c:	ldrb	r3, [r3]
   12c20:	mov	r0, r3
   12c24:	bl	11fc0 <__assert_fail@plt+0x10a4>
   12c28:	mov	r3, r0
   12c2c:	mov	r2, r3
   12c30:	movw	r3, #37288	; 0x91a8
   12c34:	movt	r3, #1
   12c38:	ldrsb	r3, [r3, r2]
   12c3c:	lsl	r3, r3, #4
   12c40:	sxtb	r4, r3
   12c44:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12c48:	add	r3, r3, #4
   12c4c:	ldrb	r3, [r3]
   12c50:	mov	r0, r3
   12c54:	bl	11fc0 <__assert_fail@plt+0x10a4>
   12c58:	mov	r3, r0
   12c5c:	mov	r2, r3
   12c60:	movw	r3, #37288	; 0x91a8
   12c64:	movt	r3, #1
   12c68:	ldrsb	r3, [r3, r2]
   12c6c:	asr	r3, r3, #1
   12c70:	sxtb	r3, r3
   12c74:	orr	r3, r4, r3
   12c78:	sxtb	r1, r3
   12c7c:	ldr	r3, [fp, #-16]
   12c80:	add	r2, r3, #1
   12c84:	str	r2, [fp, #-16]
   12c88:	uxtb	r2, r1
   12c8c:	strb	r2, [r3]
   12c90:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12c94:	ldr	r3, [r3]
   12c98:	sub	r2, r3, #1
   12c9c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12ca0:	str	r2, [r3]
   12ca4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12ca8:	add	r3, r3, #5
   12cac:	ldrb	r3, [r3]
   12cb0:	cmp	r3, #61	; 0x3d
   12cb4:	bne	12cf4 <__assert_fail@plt+0x1dd8>
   12cb8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12cbc:	add	r3, r3, #6
   12cc0:	ldrb	r3, [r3]
   12cc4:	cmp	r3, #61	; 0x3d
   12cc8:	bne	12ce0 <__assert_fail@plt+0x1dc4>
   12ccc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12cd0:	add	r3, r3, #7
   12cd4:	ldrb	r3, [r3]
   12cd8:	cmp	r3, #61	; 0x3d
   12cdc:	beq	12f18 <__assert_fail@plt+0x1ffc>
   12ce0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12ce4:	ldr	r2, [fp, #-16]
   12ce8:	str	r2, [r3]
   12cec:	mov	r3, #0
   12cf0:	b	12f28 <__assert_fail@plt+0x200c>
   12cf4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12cf8:	add	r3, r3, #5
   12cfc:	ldrb	r3, [r3]
   12d00:	mov	r0, r3
   12d04:	bl	12678 <__assert_fail@plt+0x175c>
   12d08:	mov	r3, r0
   12d0c:	eor	r3, r3, #1
   12d10:	uxtb	r3, r3
   12d14:	cmp	r3, #0
   12d18:	bne	12d44 <__assert_fail@plt+0x1e28>
   12d1c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12d20:	add	r3, r3, #6
   12d24:	ldrb	r3, [r3]
   12d28:	mov	r0, r3
   12d2c:	bl	12678 <__assert_fail@plt+0x175c>
   12d30:	mov	r3, r0
   12d34:	eor	r3, r3, #1
   12d38:	uxtb	r3, r3
   12d3c:	cmp	r3, #0
   12d40:	beq	12d58 <__assert_fail@plt+0x1e3c>
   12d44:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12d48:	ldr	r2, [fp, #-16]
   12d4c:	str	r2, [r3]
   12d50:	mov	r3, #0
   12d54:	b	12f28 <__assert_fail@plt+0x200c>
   12d58:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12d5c:	ldr	r3, [r3]
   12d60:	cmp	r3, #0
   12d64:	beq	12e30 <__assert_fail@plt+0x1f14>
   12d68:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12d6c:	add	r3, r3, #4
   12d70:	ldrb	r3, [r3]
   12d74:	mov	r0, r3
   12d78:	bl	11fc0 <__assert_fail@plt+0x10a4>
   12d7c:	mov	r3, r0
   12d80:	mov	r2, r3
   12d84:	movw	r3, #37288	; 0x91a8
   12d88:	movt	r3, #1
   12d8c:	ldrsb	r3, [r3, r2]
   12d90:	lsl	r3, r3, #7
   12d94:	sxtb	r4, r3
   12d98:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12d9c:	add	r3, r3, #5
   12da0:	ldrb	r3, [r3]
   12da4:	mov	r0, r3
   12da8:	bl	11fc0 <__assert_fail@plt+0x10a4>
   12dac:	mov	r3, r0
   12db0:	mov	r2, r3
   12db4:	movw	r3, #37288	; 0x91a8
   12db8:	movt	r3, #1
   12dbc:	ldrsb	r3, [r3, r2]
   12dc0:	lsl	r3, r3, #2
   12dc4:	sxtb	r3, r3
   12dc8:	orr	r3, r4, r3
   12dcc:	sxtb	r4, r3
   12dd0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12dd4:	add	r3, r3, #6
   12dd8:	ldrb	r3, [r3]
   12ddc:	mov	r0, r3
   12de0:	bl	11fc0 <__assert_fail@plt+0x10a4>
   12de4:	mov	r3, r0
   12de8:	mov	r2, r3
   12dec:	movw	r3, #37288	; 0x91a8
   12df0:	movt	r3, #1
   12df4:	ldrsb	r3, [r3, r2]
   12df8:	asr	r3, r3, #3
   12dfc:	sxtb	r3, r3
   12e00:	orr	r3, r4, r3
   12e04:	sxtb	r1, r3
   12e08:	ldr	r3, [fp, #-16]
   12e0c:	add	r2, r3, #1
   12e10:	str	r2, [fp, #-16]
   12e14:	uxtb	r2, r1
   12e18:	strb	r2, [r3]
   12e1c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12e20:	ldr	r3, [r3]
   12e24:	sub	r2, r3, #1
   12e28:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12e2c:	str	r2, [r3]
   12e30:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12e34:	add	r3, r3, #7
   12e38:	ldrb	r3, [r3]
   12e3c:	cmp	r3, #61	; 0x3d
   12e40:	beq	12f18 <__assert_fail@plt+0x1ffc>
   12e44:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12e48:	add	r3, r3, #7
   12e4c:	ldrb	r3, [r3]
   12e50:	mov	r0, r3
   12e54:	bl	12678 <__assert_fail@plt+0x175c>
   12e58:	mov	r3, r0
   12e5c:	eor	r3, r3, #1
   12e60:	uxtb	r3, r3
   12e64:	cmp	r3, #0
   12e68:	beq	12e80 <__assert_fail@plt+0x1f64>
   12e6c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12e70:	ldr	r2, [fp, #-16]
   12e74:	str	r2, [r3]
   12e78:	mov	r3, #0
   12e7c:	b	12f28 <__assert_fail@plt+0x200c>
   12e80:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12e84:	ldr	r3, [r3]
   12e88:	cmp	r3, #0
   12e8c:	beq	12f18 <__assert_fail@plt+0x1ffc>
   12e90:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12e94:	add	r3, r3, #6
   12e98:	ldrb	r3, [r3]
   12e9c:	mov	r0, r3
   12ea0:	bl	11fc0 <__assert_fail@plt+0x10a4>
   12ea4:	mov	r3, r0
   12ea8:	mov	r2, r3
   12eac:	movw	r3, #37288	; 0x91a8
   12eb0:	movt	r3, #1
   12eb4:	ldrsb	r3, [r3, r2]
   12eb8:	lsl	r3, r3, #5
   12ebc:	sxtb	r4, r3
   12ec0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12ec4:	add	r3, r3, #7
   12ec8:	ldrb	r3, [r3]
   12ecc:	mov	r0, r3
   12ed0:	bl	11fc0 <__assert_fail@plt+0x10a4>
   12ed4:	mov	r3, r0
   12ed8:	mov	r2, r3
   12edc:	movw	r3, #37288	; 0x91a8
   12ee0:	movt	r3, #1
   12ee4:	ldrsb	r3, [r3, r2]
   12ee8:	orr	r3, r4, r3
   12eec:	sxtb	r1, r3
   12ef0:	ldr	r3, [fp, #-16]
   12ef4:	add	r2, r3, #1
   12ef8:	str	r2, [fp, #-16]
   12efc:	uxtb	r2, r1
   12f00:	strb	r2, [r3]
   12f04:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12f08:	ldr	r3, [r3]
   12f0c:	sub	r2, r3, #1
   12f10:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12f14:	str	r2, [r3]
   12f18:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12f1c:	ldr	r2, [fp, #-16]
   12f20:	str	r2, [r3]
   12f24:	mov	r3, #1
   12f28:	mov	r0, r3
   12f2c:	sub	sp, fp, #8
   12f30:	ldr	r4, [sp]
   12f34:	ldr	fp, [sp, #4]
   12f38:	add	sp, sp, #8
   12f3c:	pop	{pc}		; (ldr pc, [sp], #4)
   12f40:	str	fp, [sp, #-8]!
   12f44:	str	lr, [sp, #4]
   12f48:	add	fp, sp, #4
   12f4c:	sub	sp, sp, #48	; 0x30
   12f50:	str	r0, [fp, #-40]	; 0xffffffd8
   12f54:	str	r1, [fp, #-44]	; 0xffffffd4
   12f58:	str	r2, [fp, #-48]	; 0xffffffd0
   12f5c:	str	r3, [fp, #-52]	; 0xffffffcc
   12f60:	ldr	r3, [fp, #4]
   12f64:	ldr	r3, [r3]
   12f68:	str	r3, [fp, #-32]	; 0xffffffe0
   12f6c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   12f70:	cmp	r3, #0
   12f74:	movne	r3, #1
   12f78:	moveq	r3, #0
   12f7c:	strb	r3, [fp, #-21]	; 0xffffffeb
   12f80:	mov	r3, #0
   12f84:	strb	r3, [fp, #-5]
   12f88:	mov	r3, #0
   12f8c:	str	r3, [fp, #-12]
   12f90:	ldrb	r3, [fp, #-21]	; 0xffffffeb
   12f94:	cmp	r3, #0
   12f98:	beq	12fbc <__assert_fail@plt+0x20a0>
   12f9c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   12fa0:	ldr	r3, [r3]
   12fa4:	str	r3, [fp, #-12]
   12fa8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12fac:	cmp	r3, #0
   12fb0:	moveq	r3, #1
   12fb4:	movne	r3, #0
   12fb8:	strb	r3, [fp, #-5]
   12fbc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12fc0:	str	r3, [fp, #-16]
   12fc4:	ldr	r3, [fp, #-12]
   12fc8:	cmp	r3, #0
   12fcc:	bne	13034 <__assert_fail@plt+0x2118>
   12fd0:	ldrb	r3, [fp, #-5]
   12fd4:	eor	r3, r3, #1
   12fd8:	uxtb	r3, r3
   12fdc:	cmp	r3, #0
   12fe0:	beq	13034 <__assert_fail@plt+0x2118>
   12fe4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12fe8:	str	r3, [fp, #-16]
   12fec:	ldr	r0, [fp, #-44]	; 0xffffffd4
   12ff0:	ldr	r1, [fp, #-48]	; 0xffffffd0
   12ff4:	sub	r3, fp, #32
   12ff8:	sub	r2, fp, #52	; 0x34
   12ffc:	bl	12868 <__assert_fail@plt+0x194c>
   13000:	mov	r3, r0
   13004:	eor	r3, r3, #1
   13008:	uxtb	r3, r3
   1300c:	cmp	r3, #0
   13010:	bne	13030 <__assert_fail@plt+0x2114>
   13014:	ldr	r3, [fp, #-44]	; 0xffffffd4
   13018:	add	r3, r3, #8
   1301c:	str	r3, [fp, #-44]	; 0xffffffd4
   13020:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13024:	sub	r3, r3, #8
   13028:	str	r3, [fp, #-48]	; 0xffffffd0
   1302c:	b	12fe4 <__assert_fail@plt+0x20c8>
   13030:	nop	{0}
   13034:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13038:	cmp	r3, #0
   1303c:	bne	13054 <__assert_fail@plt+0x2138>
   13040:	ldrb	r3, [fp, #-5]
   13044:	eor	r3, r3, #1
   13048:	uxtb	r3, r3
   1304c:	cmp	r3, #0
   13050:	bne	1317c <__assert_fail@plt+0x2260>
   13054:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13058:	cmp	r3, #0
   1305c:	beq	13098 <__assert_fail@plt+0x217c>
   13060:	ldr	r3, [fp, #-44]	; 0xffffffd4
   13064:	ldrb	r3, [r3]
   13068:	cmp	r3, #10
   1306c:	bne	13098 <__assert_fail@plt+0x217c>
   13070:	ldrb	r3, [fp, #-21]	; 0xffffffeb
   13074:	cmp	r3, #0
   13078:	beq	13098 <__assert_fail@plt+0x217c>
   1307c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   13080:	add	r3, r3, #1
   13084:	str	r3, [fp, #-44]	; 0xffffffd4
   13088:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1308c:	sub	r3, r3, #1
   13090:	str	r3, [fp, #-48]	; 0xffffffd0
   13094:	b	13178 <__assert_fail@plt+0x225c>
   13098:	ldr	r2, [fp, #-52]	; 0xffffffcc
   1309c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   130a0:	ldr	r1, [fp, #-16]
   130a4:	sub	r3, r1, r3
   130a8:	rsb	r3, r3, #0
   130ac:	add	r3, r2, r3
   130b0:	str	r3, [fp, #-52]	; 0xffffffcc
   130b4:	ldr	r3, [fp, #-16]
   130b8:	str	r3, [fp, #-32]	; 0xffffffe0
   130bc:	ldr	r3, [fp, #-44]	; 0xffffffd4
   130c0:	ldr	r2, [fp, #-48]	; 0xffffffd0
   130c4:	add	r3, r3, r2
   130c8:	str	r3, [fp, #-28]	; 0xffffffe4
   130cc:	ldrb	r3, [fp, #-21]	; 0xffffffeb
   130d0:	cmp	r3, #0
   130d4:	beq	130f4 <__assert_fail@plt+0x21d8>
   130d8:	sub	r3, fp, #48	; 0x30
   130dc:	sub	r1, fp, #44	; 0x2c
   130e0:	ldr	r2, [fp, #-28]	; 0xffffffe4
   130e4:	ldr	r0, [fp, #-40]	; 0xffffffd8
   130e8:	bl	12700 <__assert_fail@plt+0x17e4>
   130ec:	str	r0, [fp, #-20]	; 0xffffffec
   130f0:	b	130fc <__assert_fail@plt+0x21e0>
   130f4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   130f8:	str	r3, [fp, #-20]	; 0xffffffec
   130fc:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13100:	cmp	r3, #0
   13104:	beq	13134 <__assert_fail@plt+0x2218>
   13108:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1310c:	cmp	r3, #7
   13110:	bgt	13140 <__assert_fail@plt+0x2224>
   13114:	ldrb	r3, [fp, #-5]
   13118:	eor	r3, r3, #1
   1311c:	uxtb	r3, r3
   13120:	cmp	r3, #0
   13124:	beq	13140 <__assert_fail@plt+0x2224>
   13128:	ldrb	r3, [fp, #-21]	; 0xffffffeb
   1312c:	cmp	r3, #0
   13130:	beq	13140 <__assert_fail@plt+0x2224>
   13134:	mov	r3, #0
   13138:	str	r3, [fp, #-48]	; 0xffffffd0
   1313c:	b	13188 <__assert_fail@plt+0x226c>
   13140:	ldr	r1, [fp, #-48]	; 0xffffffd0
   13144:	sub	r3, fp, #32
   13148:	sub	r2, fp, #52	; 0x34
   1314c:	ldr	r0, [fp, #-20]	; 0xffffffec
   13150:	bl	12868 <__assert_fail@plt+0x194c>
   13154:	mov	r3, r0
   13158:	eor	r3, r3, #1
   1315c:	uxtb	r3, r3
   13160:	cmp	r3, #0
   13164:	bne	13184 <__assert_fail@plt+0x2268>
   13168:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1316c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   13170:	sub	r3, r2, r3
   13174:	str	r3, [fp, #-48]	; 0xffffffd0
   13178:	b	12fbc <__assert_fail@plt+0x20a0>
   1317c:	nop	{0}
   13180:	b	13188 <__assert_fail@plt+0x226c>
   13184:	nop	{0}
   13188:	ldr	r3, [fp, #4]
   1318c:	ldr	r2, [r3]
   13190:	ldr	r3, [fp, #-32]	; 0xffffffe0
   13194:	sub	r2, r2, r3
   13198:	ldr	r3, [fp, #4]
   1319c:	str	r2, [r3]
   131a0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   131a4:	cmp	r3, #0
   131a8:	moveq	r3, #1
   131ac:	movne	r3, #0
   131b0:	uxtb	r3, r3
   131b4:	mov	r0, r3
   131b8:	sub	sp, fp, #4
   131bc:	ldr	fp, [sp]
   131c0:	add	sp, sp, #4
   131c4:	pop	{pc}		; (ldr pc, [sp], #4)
   131c8:	str	fp, [sp, #-8]!
   131cc:	str	lr, [sp, #4]
   131d0:	add	fp, sp, #4
   131d4:	sub	sp, sp, #32
   131d8:	str	r0, [fp, #-16]
   131dc:	str	r1, [fp, #-20]	; 0xffffffec
   131e0:	str	r2, [fp, #-24]	; 0xffffffe8
   131e4:	str	r3, [fp, #-28]	; 0xffffffe4
   131e8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   131ec:	asr	r3, r3, #3
   131f0:	add	r2, r3, #1
   131f4:	mov	r3, r2
   131f8:	lsl	r3, r3, #2
   131fc:	add	r3, r3, r2
   13200:	str	r3, [fp, #-8]
   13204:	ldr	r3, [fp, #-8]
   13208:	mov	r0, r3
   1320c:	bl	138b8 <__assert_fail@plt+0x299c>
   13210:	mov	r3, r0
   13214:	mov	r2, r3
   13218:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1321c:	str	r2, [r3]
   13220:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13224:	ldr	r3, [r3]
   13228:	cmp	r3, #0
   1322c:	bne	13238 <__assert_fail@plt+0x231c>
   13230:	mov	r3, #1
   13234:	b	132b0 <__assert_fail@plt+0x2394>
   13238:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1323c:	ldr	r2, [r3]
   13240:	sub	r3, fp, #8
   13244:	str	r3, [sp]
   13248:	mov	r3, r2
   1324c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   13250:	ldr	r1, [fp, #-20]	; 0xffffffec
   13254:	ldr	r0, [fp, #-16]
   13258:	bl	12f40 <__assert_fail@plt+0x2024>
   1325c:	mov	r3, r0
   13260:	eor	r3, r3, #1
   13264:	uxtb	r3, r3
   13268:	cmp	r3, #0
   1326c:	beq	13294 <__assert_fail@plt+0x2378>
   13270:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13274:	ldr	r3, [r3]
   13278:	mov	r0, r3
   1327c:	bl	136f0 <__assert_fail@plt+0x27d4>
   13280:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13284:	mov	r2, #0
   13288:	str	r2, [r3]
   1328c:	mov	r3, #0
   13290:	b	132b0 <__assert_fail@plt+0x2394>
   13294:	ldr	r3, [fp, #4]
   13298:	cmp	r3, #0
   1329c:	beq	132ac <__assert_fail@plt+0x2390>
   132a0:	ldr	r2, [fp, #-8]
   132a4:	ldr	r3, [fp, #4]
   132a8:	str	r2, [r3]
   132ac:	mov	r3, #1
   132b0:	mov	r0, r3
   132b4:	sub	sp, fp, #4
   132b8:	ldr	fp, [sp]
   132bc:	add	sp, sp, #4
   132c0:	pop	{pc}		; (ldr pc, [sp], #4)
   132c4:	push	{fp}		; (str fp, [sp, #-4]!)
   132c8:	add	fp, sp, #0
   132cc:	sub	sp, sp, #12
   132d0:	str	r0, [fp, #-8]
   132d4:	movw	r3, #41312	; 0xa160
   132d8:	movt	r3, #2
   132dc:	ldr	r2, [fp, #-8]
   132e0:	str	r2, [r3]
   132e4:	nop	{0}
   132e8:	add	sp, fp, #0
   132ec:	pop	{fp}		; (ldr fp, [sp], #4)
   132f0:	bx	lr
   132f4:	push	{fp}		; (str fp, [sp, #-4]!)
   132f8:	add	fp, sp, #0
   132fc:	sub	sp, sp, #12
   13300:	mov	r3, r0
   13304:	strb	r3, [fp, #-5]
   13308:	movw	r3, #41316	; 0xa164
   1330c:	movt	r3, #2
   13310:	ldrb	r2, [fp, #-5]
   13314:	strb	r2, [r3]
   13318:	nop	{0}
   1331c:	add	sp, fp, #0
   13320:	pop	{fp}		; (ldr fp, [sp], #4)
   13324:	bx	lr
   13328:	str	r4, [sp, #-12]!
   1332c:	str	fp, [sp, #4]
   13330:	str	lr, [sp, #8]
   13334:	add	fp, sp, #8
   13338:	sub	sp, sp, #20
   1333c:	movw	r3, #41300	; 0xa154
   13340:	movt	r3, #2
   13344:	ldr	r3, [r3]
   13348:	mov	r0, r3
   1334c:	bl	1813c <__assert_fail@plt+0x7220>
   13350:	mov	r3, r0
   13354:	cmp	r3, #0
   13358:	beq	1342c <__assert_fail@plt+0x2510>
   1335c:	movw	r3, #41316	; 0xa164
   13360:	movt	r3, #2
   13364:	ldrb	r3, [r3]
   13368:	eor	r3, r3, #1
   1336c:	uxtb	r3, r3
   13370:	cmp	r3, #0
   13374:	bne	1338c <__assert_fail@plt+0x2470>
   13378:	bl	10e50 <__errno_location@plt>
   1337c:	mov	r3, r0
   13380:	ldr	r3, [r3]
   13384:	cmp	r3, #32
   13388:	beq	1342c <__assert_fail@plt+0x2510>
   1338c:	movw	r0, #37576	; 0x92c8
   13390:	movt	r0, #1
   13394:	bl	10e20 <gettext@plt>
   13398:	str	r0, [fp, #-16]
   1339c:	movw	r3, #41312	; 0xa160
   133a0:	movt	r3, #2
   133a4:	ldr	r3, [r3]
   133a8:	cmp	r3, #0
   133ac:	beq	133f8 <__assert_fail@plt+0x24dc>
   133b0:	bl	10e50 <__errno_location@plt>
   133b4:	mov	r3, r0
   133b8:	ldr	r4, [r3]
   133bc:	movw	r3, #41312	; 0xa160
   133c0:	movt	r3, #2
   133c4:	ldr	r3, [r3]
   133c8:	mov	r0, r3
   133cc:	bl	15fec <__assert_fail@plt+0x50d0>
   133d0:	mov	r2, r0
   133d4:	ldr	r3, [fp, #-16]
   133d8:	str	r3, [sp]
   133dc:	mov	r3, r2
   133e0:	movw	r2, #37588	; 0x92d4
   133e4:	movt	r2, #1
   133e8:	mov	r1, r4
   133ec:	mov	r0, #0
   133f0:	bl	10dc0 <error@plt>
   133f4:	b	13418 <__assert_fail@plt+0x24fc>
   133f8:	bl	10e50 <__errno_location@plt>
   133fc:	mov	r3, r0
   13400:	ldr	r1, [r3]
   13404:	ldr	r3, [fp, #-16]
   13408:	movw	r2, #37596	; 0x92dc
   1340c:	movt	r2, #1
   13410:	mov	r0, #0
   13414:	bl	10dc0 <error@plt>
   13418:	movw	r3, #41200	; 0xa0f0
   1341c:	movt	r3, #2
   13420:	ldr	r3, [r3]
   13424:	mov	r0, r3
   13428:	bl	10d0c <_exit@plt>
   1342c:	movw	r3, #41288	; 0xa148
   13430:	movt	r3, #2
   13434:	ldr	r3, [r3]
   13438:	mov	r0, r3
   1343c:	bl	1813c <__assert_fail@plt+0x7220>
   13440:	mov	r3, r0
   13444:	cmp	r3, #0
   13448:	beq	13460 <__assert_fail@plt+0x2544>
   1344c:	movw	r3, #41200	; 0xa0f0
   13450:	movt	r3, #2
   13454:	ldr	r3, [r3]
   13458:	mov	r0, r3
   1345c:	bl	10d0c <_exit@plt>
   13460:	nop	{0}
   13464:	sub	sp, fp, #8
   13468:	ldr	r4, [sp]
   1346c:	ldr	fp, [sp, #4]
   13470:	add	sp, sp, #8
   13474:	pop	{pc}		; (ldr pc, [sp], #4)
   13478:	str	fp, [sp, #-8]!
   1347c:	str	lr, [sp, #4]
   13480:	add	fp, sp, #4
   13484:	sub	sp, sp, #40	; 0x28
   13488:	str	r0, [fp, #-16]
   1348c:	strd	r2, [fp, #-28]	; 0xffffffe4
   13490:	ldr	r3, [fp, #12]
   13494:	str	r3, [sp, #8]
   13498:	ldrd	r2, [fp, #4]
   1349c:	strd	r2, [sp]
   134a0:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   134a4:	ldr	r0, [fp, #-16]
   134a8:	bl	10cd0 <posix_fadvise64@plt>
   134ac:	str	r0, [fp, #-8]
   134b0:	nop	{0}
   134b4:	sub	sp, fp, #4
   134b8:	ldr	fp, [sp]
   134bc:	add	sp, sp, #4
   134c0:	pop	{pc}		; (ldr pc, [sp], #4)
   134c4:	str	fp, [sp, #-8]!
   134c8:	str	lr, [sp, #4]
   134cc:	add	fp, sp, #4
   134d0:	sub	sp, sp, #24
   134d4:	str	r0, [fp, #-8]
   134d8:	str	r1, [fp, #-12]
   134dc:	ldr	r3, [fp, #-8]
   134e0:	cmp	r3, #0
   134e4:	beq	13518 <__assert_fail@plt+0x25fc>
   134e8:	ldr	r0, [fp, #-8]
   134ec:	bl	10e74 <fileno@plt>
   134f0:	mov	r1, r0
   134f4:	ldr	r3, [fp, #-12]
   134f8:	str	r3, [sp, #8]
   134fc:	mov	r2, #0
   13500:	mov	r3, #0
   13504:	strd	r2, [sp]
   13508:	mov	r2, #0
   1350c:	mov	r3, #0
   13510:	mov	r0, r1
   13514:	bl	13478 <__assert_fail@plt+0x255c>
   13518:	nop	{0}
   1351c:	sub	sp, fp, #4
   13520:	ldr	fp, [sp]
   13524:	add	sp, sp, #4
   13528:	pop	{pc}		; (ldr pc, [sp], #4)
   1352c:	str	fp, [sp, #-8]!
   13530:	str	lr, [sp, #4]
   13534:	add	fp, sp, #4
   13538:	sub	sp, sp, #32
   1353c:	str	r0, [fp, #-24]	; 0xffffffe8
   13540:	mov	r3, #0
   13544:	str	r3, [fp, #-8]
   13548:	mov	r3, #0
   1354c:	str	r3, [fp, #-12]
   13550:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13554:	bl	10e74 <fileno@plt>
   13558:	str	r0, [fp, #-16]
   1355c:	ldr	r3, [fp, #-16]
   13560:	cmp	r3, #0
   13564:	bge	13578 <__assert_fail@plt+0x265c>
   13568:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1356c:	bl	10e98 <fclose@plt>
   13570:	mov	r3, r0
   13574:	b	1361c <__assert_fail@plt+0x2700>
   13578:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1357c:	bl	10de4 <__freading@plt>
   13580:	mov	r3, r0
   13584:	cmp	r3, #0
   13588:	beq	135c4 <__assert_fail@plt+0x26a8>
   1358c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13590:	bl	10e74 <fileno@plt>
   13594:	mov	r1, r0
   13598:	mov	r3, #1
   1359c:	str	r3, [sp]
   135a0:	mov	r2, #0
   135a4:	mov	r3, #0
   135a8:	mov	r0, r1
   135ac:	bl	10d84 <lseek64@plt>
   135b0:	mvn	r2, #0
   135b4:	mvn	r3, #0
   135b8:	cmp	r1, r3
   135bc:	cmpeq	r0, r2
   135c0:	beq	135e8 <__assert_fail@plt+0x26cc>
   135c4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   135c8:	bl	13684 <__assert_fail@plt+0x2768>
   135cc:	mov	r3, r0
   135d0:	cmp	r3, #0
   135d4:	beq	135e8 <__assert_fail@plt+0x26cc>
   135d8:	bl	10e50 <__errno_location@plt>
   135dc:	mov	r3, r0
   135e0:	ldr	r3, [r3]
   135e4:	str	r3, [fp, #-8]
   135e8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   135ec:	bl	10e98 <fclose@plt>
   135f0:	str	r0, [fp, #-12]
   135f4:	ldr	r3, [fp, #-8]
   135f8:	cmp	r3, #0
   135fc:	beq	13618 <__assert_fail@plt+0x26fc>
   13600:	bl	10e50 <__errno_location@plt>
   13604:	mov	r2, r0
   13608:	ldr	r3, [fp, #-8]
   1360c:	str	r3, [r2]
   13610:	mvn	r3, #0
   13614:	str	r3, [fp, #-12]
   13618:	ldr	r3, [fp, #-12]
   1361c:	mov	r0, r3
   13620:	sub	sp, fp, #4
   13624:	ldr	fp, [sp]
   13628:	add	sp, sp, #4
   1362c:	pop	{pc}		; (ldr pc, [sp], #4)
   13630:	str	fp, [sp, #-8]!
   13634:	str	lr, [sp, #4]
   13638:	add	fp, sp, #4
   1363c:	sub	sp, sp, #16
   13640:	str	r0, [fp, #-8]
   13644:	ldr	r3, [fp, #-8]
   13648:	ldr	r3, [r3]
   1364c:	and	r3, r3, #256	; 0x100
   13650:	cmp	r3, #0
   13654:	beq	13670 <__assert_fail@plt+0x2754>
   13658:	mov	r3, #1
   1365c:	str	r3, [sp]
   13660:	mov	r2, #0
   13664:	mov	r3, #0
   13668:	ldr	r0, [fp, #-8]
   1366c:	bl	13794 <__assert_fail@plt+0x2878>
   13670:	nop	{0}
   13674:	sub	sp, fp, #4
   13678:	ldr	fp, [sp]
   1367c:	add	sp, sp, #4
   13680:	pop	{pc}		; (ldr pc, [sp], #4)
   13684:	str	fp, [sp, #-8]!
   13688:	str	lr, [sp, #4]
   1368c:	add	fp, sp, #4
   13690:	sub	sp, sp, #8
   13694:	str	r0, [fp, #-8]
   13698:	ldr	r3, [fp, #-8]
   1369c:	cmp	r3, #0
   136a0:	beq	136b8 <__assert_fail@plt+0x279c>
   136a4:	ldr	r0, [fp, #-8]
   136a8:	bl	10de4 <__freading@plt>
   136ac:	mov	r3, r0
   136b0:	cmp	r3, #0
   136b4:	bne	136c8 <__assert_fail@plt+0x27ac>
   136b8:	ldr	r0, [fp, #-8]
   136bc:	bl	10ce8 <fflush@plt>
   136c0:	mov	r3, r0
   136c4:	b	136dc <__assert_fail@plt+0x27c0>
   136c8:	ldr	r0, [fp, #-8]
   136cc:	bl	13630 <__assert_fail@plt+0x2714>
   136d0:	ldr	r0, [fp, #-8]
   136d4:	bl	10ce8 <fflush@plt>
   136d8:	mov	r3, r0
   136dc:	mov	r0, r3
   136e0:	sub	sp, fp, #4
   136e4:	ldr	fp, [sp]
   136e8:	add	sp, sp, #4
   136ec:	pop	{pc}		; (ldr pc, [sp], #4)
   136f0:	str	r4, [sp, #-12]!
   136f4:	str	fp, [sp, #4]
   136f8:	str	lr, [sp, #8]
   136fc:	add	fp, sp, #8
   13700:	sub	sp, sp, #20
   13704:	str	r0, [fp, #-24]	; 0xffffffe8
   13708:	bl	10e50 <__errno_location@plt>
   1370c:	mov	r3, r0
   13710:	ldr	r3, [r3]
   13714:	str	r3, [fp, #-20]	; 0xffffffec
   13718:	bl	10e50 <__errno_location@plt>
   1371c:	mov	r3, r0
   13720:	ldr	r3, [r3]
   13724:	str	r3, [fp, #-16]
   13728:	bl	10e50 <__errno_location@plt>
   1372c:	mov	r2, r0
   13730:	mov	r3, #0
   13734:	str	r3, [r2]
   13738:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1373c:	bl	10d00 <free@plt>
   13740:	bl	10e50 <__errno_location@plt>
   13744:	mov	r3, r0
   13748:	ldr	r3, [r3]
   1374c:	cmp	r3, #0
   13750:	moveq	r3, #1
   13754:	movne	r3, #0
   13758:	uxtb	r3, r3
   1375c:	mov	r4, r3
   13760:	bl	10e50 <__errno_location@plt>
   13764:	mov	r2, r0
   13768:	lsl	r3, r4, #2
   1376c:	sub	r1, fp, #12
   13770:	add	r3, r1, r3
   13774:	ldr	r3, [r3, #-8]
   13778:	str	r3, [r2]
   1377c:	nop	{0}
   13780:	sub	sp, fp, #8
   13784:	ldr	r4, [sp]
   13788:	ldr	fp, [sp, #4]
   1378c:	add	sp, sp, #8
   13790:	pop	{pc}		; (ldr pc, [sp], #4)
   13794:	str	fp, [sp, #-8]!
   13798:	str	lr, [sp, #4]
   1379c:	add	fp, sp, #4
   137a0:	sub	sp, sp, #32
   137a4:	str	r0, [fp, #-16]
   137a8:	strd	r2, [fp, #-28]	; 0xffffffe4
   137ac:	ldr	r3, [fp, #-16]
   137b0:	ldr	r2, [r3, #8]
   137b4:	ldr	r3, [fp, #-16]
   137b8:	ldr	r3, [r3, #4]
   137bc:	cmp	r2, r3
   137c0:	bne	13858 <__assert_fail@plt+0x293c>
   137c4:	ldr	r3, [fp, #-16]
   137c8:	ldr	r2, [r3, #20]
   137cc:	ldr	r3, [fp, #-16]
   137d0:	ldr	r3, [r3, #16]
   137d4:	cmp	r2, r3
   137d8:	bne	13858 <__assert_fail@plt+0x293c>
   137dc:	ldr	r3, [fp, #-16]
   137e0:	ldr	r3, [r3, #36]	; 0x24
   137e4:	cmp	r3, #0
   137e8:	bne	13858 <__assert_fail@plt+0x293c>
   137ec:	ldr	r0, [fp, #-16]
   137f0:	bl	10e74 <fileno@plt>
   137f4:	mov	r1, r0
   137f8:	ldr	r3, [fp, #4]
   137fc:	str	r3, [sp]
   13800:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   13804:	mov	r0, r1
   13808:	bl	10d84 <lseek64@plt>
   1380c:	strd	r0, [fp, #-12]
   13810:	ldrd	r2, [fp, #-12]
   13814:	mvn	r0, #0
   13818:	mvn	r1, #0
   1381c:	cmp	r3, r1
   13820:	cmpeq	r2, r0
   13824:	bne	13830 <__assert_fail@plt+0x2914>
   13828:	mvn	r3, #0
   1382c:	b	13870 <__assert_fail@plt+0x2954>
   13830:	ldr	r3, [fp, #-16]
   13834:	ldr	r3, [r3]
   13838:	bic	r2, r3, #16
   1383c:	ldr	r3, [fp, #-16]
   13840:	str	r2, [r3]
   13844:	ldr	r1, [fp, #-16]
   13848:	ldrd	r2, [fp, #-12]
   1384c:	strd	r2, [r1, #80]	; 0x50
   13850:	mov	r3, #0
   13854:	b	13870 <__assert_fail@plt+0x2954>
   13858:	ldr	r3, [fp, #4]
   1385c:	str	r3, [sp]
   13860:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   13864:	ldr	r0, [fp, #-16]
   13868:	bl	10ea4 <fseeko64@plt>
   1386c:	mov	r3, r0
   13870:	mov	r0, r3
   13874:	sub	sp, fp, #4
   13878:	ldr	fp, [sp]
   1387c:	add	sp, sp, #4
   13880:	pop	{pc}		; (ldr pc, [sp], #4)
   13884:	str	fp, [sp, #-8]!
   13888:	str	lr, [sp, #4]
   1388c:	add	fp, sp, #4
   13890:	bl	10e50 <__errno_location@plt>
   13894:	mov	r2, r0
   13898:	mov	r3, #12
   1389c:	str	r3, [r2]
   138a0:	mov	r3, #0
   138a4:	mov	r0, r3
   138a8:	sub	sp, fp, #4
   138ac:	ldr	fp, [sp]
   138b0:	add	sp, sp, #4
   138b4:	pop	{pc}		; (ldr pc, [sp], #4)
   138b8:	str	fp, [sp, #-8]!
   138bc:	str	lr, [sp, #4]
   138c0:	add	fp, sp, #4
   138c4:	sub	sp, sp, #8
   138c8:	str	r0, [fp, #-8]
   138cc:	ldr	r3, [fp, #-8]
   138d0:	mov	r0, r3
   138d4:	bl	17ee4 <__assert_fail@plt+0x6fc8>
   138d8:	mov	r3, r0
   138dc:	mov	r0, r3
   138e0:	sub	sp, fp, #4
   138e4:	ldr	fp, [sp]
   138e8:	add	sp, sp, #4
   138ec:	pop	{pc}		; (ldr pc, [sp], #4)
   138f0:	str	fp, [sp, #-8]!
   138f4:	str	lr, [sp, #4]
   138f8:	add	fp, sp, #4
   138fc:	sub	sp, sp, #8
   13900:	str	r0, [fp, #-8]
   13904:	str	r1, [fp, #-12]
   13908:	ldr	r3, [fp, #-12]
   1390c:	cmp	r3, #0
   13910:	moveq	r3, #1
   13914:	movne	r3, #0
   13918:	uxtb	r3, r3
   1391c:	mov	r2, r3
   13920:	ldr	r3, [fp, #-12]
   13924:	orr	r3, r2, r3
   13928:	mov	r1, r3
   1392c:	ldr	r0, [fp, #-8]
   13930:	bl	17f74 <__assert_fail@plt+0x7058>
   13934:	mov	r3, r0
   13938:	mov	r0, r3
   1393c:	sub	sp, fp, #4
   13940:	ldr	fp, [sp]
   13944:	add	sp, sp, #4
   13948:	pop	{pc}		; (ldr pc, [sp], #4)
   1394c:	str	fp, [sp, #-8]!
   13950:	str	lr, [sp, #4]
   13954:	add	fp, sp, #4
   13958:	sub	sp, sp, #8
   1395c:	str	r0, [fp, #-8]
   13960:	str	r1, [fp, #-12]
   13964:	ldr	r3, [fp, #-8]
   13968:	ldr	r2, [fp, #-12]
   1396c:	mov	r1, r2
   13970:	mov	r0, r3
   13974:	bl	17e14 <__assert_fail@plt+0x6ef8>
   13978:	mov	r3, r0
   1397c:	mov	r0, r3
   13980:	sub	sp, fp, #4
   13984:	ldr	fp, [sp]
   13988:	add	sp, sp, #4
   1398c:	pop	{pc}		; (ldr pc, [sp], #4)
   13990:	str	fp, [sp, #-8]!
   13994:	str	lr, [sp, #4]
   13998:	add	fp, sp, #4
   1399c:	sub	sp, sp, #16
   139a0:	str	r0, [fp, #-8]
   139a4:	str	r1, [fp, #-12]
   139a8:	str	r2, [fp, #-16]
   139ac:	ldr	r3, [fp, #-12]
   139b0:	cmp	r3, #0
   139b4:	beq	139c4 <__assert_fail@plt+0x2aa8>
   139b8:	ldr	r3, [fp, #-16]
   139bc:	cmp	r3, #0
   139c0:	bne	139d4 <__assert_fail@plt+0x2ab8>
   139c4:	mov	r3, #1
   139c8:	str	r3, [fp, #-16]
   139cc:	ldr	r3, [fp, #-16]
   139d0:	str	r3, [fp, #-12]
   139d4:	ldr	r3, [fp, #-12]
   139d8:	ldr	r2, [fp, #-16]
   139dc:	mov	r1, r3
   139e0:	ldr	r0, [fp, #-8]
   139e4:	bl	16398 <__assert_fail@plt+0x547c>
   139e8:	mov	r3, r0
   139ec:	mov	r0, r3
   139f0:	sub	sp, fp, #4
   139f4:	ldr	fp, [sp]
   139f8:	add	sp, sp, #4
   139fc:	pop	{pc}		; (ldr pc, [sp], #4)
   13a00:	str	fp, [sp, #-8]!
   13a04:	str	lr, [sp, #4]
   13a08:	add	fp, sp, #4
   13a0c:	sub	sp, sp, #16
   13a10:	str	r0, [fp, #-16]
   13a14:	ldr	r3, [fp, #-16]
   13a18:	cmp	r3, #0
   13a1c:	bne	13a44 <__assert_fail@plt+0x2b28>
   13a20:	movw	r3, #41288	; 0xa148
   13a24:	movt	r3, #2
   13a28:	ldr	r3, [r3]
   13a2c:	mov	r2, #55	; 0x37
   13a30:	mov	r1, #1
   13a34:	movw	r0, #37600	; 0x92e0
   13a38:	movt	r0, #1
   13a3c:	bl	10d78 <fwrite@plt>
   13a40:	bl	10f04 <abort@plt>
   13a44:	mov	r1, #47	; 0x2f
   13a48:	ldr	r0, [fp, #-16]
   13a4c:	bl	10ebc <strrchr@plt>
   13a50:	str	r0, [fp, #-8]
   13a54:	ldr	r3, [fp, #-8]
   13a58:	cmp	r3, #0
   13a5c:	beq	13a6c <__assert_fail@plt+0x2b50>
   13a60:	ldr	r3, [fp, #-8]
   13a64:	add	r3, r3, #1
   13a68:	b	13a70 <__assert_fail@plt+0x2b54>
   13a6c:	ldr	r3, [fp, #-16]
   13a70:	str	r3, [fp, #-12]
   13a74:	ldr	r2, [fp, #-12]
   13a78:	ldr	r3, [fp, #-16]
   13a7c:	sub	r3, r2, r3
   13a80:	cmp	r3, #6
   13a84:	ble	13af4 <__assert_fail@plt+0x2bd8>
   13a88:	ldr	r3, [fp, #-12]
   13a8c:	sub	r3, r3, #7
   13a90:	mov	r2, #7
   13a94:	movw	r1, #37656	; 0x9318
   13a98:	movt	r1, #1
   13a9c:	mov	r0, r3
   13aa0:	bl	10ef8 <strncmp@plt>
   13aa4:	mov	r3, r0
   13aa8:	cmp	r3, #0
   13aac:	bne	13af4 <__assert_fail@plt+0x2bd8>
   13ab0:	ldr	r3, [fp, #-12]
   13ab4:	str	r3, [fp, #-16]
   13ab8:	mov	r2, #3
   13abc:	movw	r1, #37664	; 0x9320
   13ac0:	movt	r1, #1
   13ac4:	ldr	r0, [fp, #-12]
   13ac8:	bl	10ef8 <strncmp@plt>
   13acc:	mov	r3, r0
   13ad0:	cmp	r3, #0
   13ad4:	bne	13af4 <__assert_fail@plt+0x2bd8>
   13ad8:	ldr	r3, [fp, #-12]
   13adc:	add	r3, r3, #3
   13ae0:	str	r3, [fp, #-16]
   13ae4:	movw	r3, #41272	; 0xa138
   13ae8:	movt	r3, #2
   13aec:	ldr	r2, [fp, #-16]
   13af0:	str	r2, [r3]
   13af4:	movw	r3, #41320	; 0xa168
   13af8:	movt	r3, #2
   13afc:	ldr	r2, [fp, #-16]
   13b00:	str	r2, [r3]
   13b04:	movw	r3, #41276	; 0xa13c
   13b08:	movt	r3, #2
   13b0c:	ldr	r2, [fp, #-16]
   13b10:	str	r2, [r3]
   13b14:	nop	{0}
   13b18:	sub	sp, fp, #4
   13b1c:	ldr	fp, [sp]
   13b20:	add	sp, sp, #4
   13b24:	pop	{pc}		; (ldr pc, [sp], #4)
   13b28:	str	fp, [sp, #-8]!
   13b2c:	str	lr, [sp, #4]
   13b30:	add	fp, sp, #4
   13b34:	sub	sp, sp, #16
   13b38:	str	r0, [fp, #-16]
   13b3c:	bl	10e50 <__errno_location@plt>
   13b40:	mov	r3, r0
   13b44:	ldr	r3, [r3]
   13b48:	str	r3, [fp, #-8]
   13b4c:	ldr	r3, [fp, #-16]
   13b50:	cmp	r3, #0
   13b54:	beq	13b60 <__assert_fail@plt+0x2c44>
   13b58:	ldr	r3, [fp, #-16]
   13b5c:	b	13b68 <__assert_fail@plt+0x2c4c>
   13b60:	movw	r3, #41324	; 0xa16c
   13b64:	movt	r3, #2
   13b68:	mov	r1, #48	; 0x30
   13b6c:	mov	r0, r3
   13b70:	bl	173ac <__assert_fail@plt+0x6490>
   13b74:	mov	r3, r0
   13b78:	str	r3, [fp, #-12]
   13b7c:	bl	10e50 <__errno_location@plt>
   13b80:	mov	r2, r0
   13b84:	ldr	r3, [fp, #-8]
   13b88:	str	r3, [r2]
   13b8c:	ldr	r3, [fp, #-12]
   13b90:	mov	r0, r3
   13b94:	sub	sp, fp, #4
   13b98:	ldr	fp, [sp]
   13b9c:	add	sp, sp, #4
   13ba0:	pop	{pc}		; (ldr pc, [sp], #4)
   13ba4:	push	{fp}		; (str fp, [sp, #-4]!)
   13ba8:	add	fp, sp, #0
   13bac:	sub	sp, sp, #12
   13bb0:	str	r0, [fp, #-8]
   13bb4:	ldr	r3, [fp, #-8]
   13bb8:	cmp	r3, #0
   13bbc:	beq	13bc8 <__assert_fail@plt+0x2cac>
   13bc0:	ldr	r3, [fp, #-8]
   13bc4:	b	13bd0 <__assert_fail@plt+0x2cb4>
   13bc8:	movw	r3, #41324	; 0xa16c
   13bcc:	movt	r3, #2
   13bd0:	ldr	r3, [r3]
   13bd4:	mov	r0, r3
   13bd8:	add	sp, fp, #0
   13bdc:	pop	{fp}		; (ldr fp, [sp], #4)
   13be0:	bx	lr
   13be4:	push	{fp}		; (str fp, [sp, #-4]!)
   13be8:	add	fp, sp, #0
   13bec:	sub	sp, sp, #12
   13bf0:	str	r0, [fp, #-8]
   13bf4:	str	r1, [fp, #-12]
   13bf8:	ldr	r3, [fp, #-8]
   13bfc:	cmp	r3, #0
   13c00:	beq	13c0c <__assert_fail@plt+0x2cf0>
   13c04:	ldr	r3, [fp, #-8]
   13c08:	b	13c14 <__assert_fail@plt+0x2cf8>
   13c0c:	movw	r3, #41324	; 0xa16c
   13c10:	movt	r3, #2
   13c14:	ldr	r2, [fp, #-12]
   13c18:	str	r2, [r3]
   13c1c:	nop	{0}
   13c20:	add	sp, fp, #0
   13c24:	pop	{fp}		; (ldr fp, [sp], #4)
   13c28:	bx	lr
   13c2c:	push	{fp}		; (str fp, [sp, #-4]!)
   13c30:	add	fp, sp, #0
   13c34:	sub	sp, sp, #36	; 0x24
   13c38:	str	r0, [fp, #-24]	; 0xffffffe8
   13c3c:	mov	r3, r1
   13c40:	str	r2, [fp, #-32]	; 0xffffffe0
   13c44:	strb	r3, [fp, #-25]	; 0xffffffe7
   13c48:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   13c4c:	strb	r3, [fp, #-5]
   13c50:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13c54:	cmp	r3, #0
   13c58:	beq	13c64 <__assert_fail@plt+0x2d48>
   13c5c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13c60:	b	13c6c <__assert_fail@plt+0x2d50>
   13c64:	movw	r3, #41324	; 0xa16c
   13c68:	movt	r3, #2
   13c6c:	add	r2, r3, #8
   13c70:	ldrb	r3, [fp, #-5]
   13c74:	lsr	r3, r3, #5
   13c78:	uxtb	r3, r3
   13c7c:	lsl	r3, r3, #2
   13c80:	add	r3, r2, r3
   13c84:	str	r3, [fp, #-12]
   13c88:	ldrb	r3, [fp, #-5]
   13c8c:	and	r3, r3, #31
   13c90:	str	r3, [fp, #-16]
   13c94:	ldr	r3, [fp, #-12]
   13c98:	ldr	r2, [r3]
   13c9c:	ldr	r3, [fp, #-16]
   13ca0:	lsr	r3, r2, r3
   13ca4:	and	r3, r3, #1
   13ca8:	str	r3, [fp, #-20]	; 0xffffffec
   13cac:	ldr	r3, [fp, #-12]
   13cb0:	ldr	r3, [r3]
   13cb4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13cb8:	and	r1, r2, #1
   13cbc:	ldr	r2, [fp, #-20]	; 0xffffffec
   13cc0:	eor	r1, r1, r2
   13cc4:	ldr	r2, [fp, #-16]
   13cc8:	lsl	r2, r1, r2
   13ccc:	eor	r2, r2, r3
   13cd0:	ldr	r3, [fp, #-12]
   13cd4:	str	r2, [r3]
   13cd8:	ldr	r3, [fp, #-20]	; 0xffffffec
   13cdc:	mov	r0, r3
   13ce0:	add	sp, fp, #0
   13ce4:	pop	{fp}		; (ldr fp, [sp], #4)
   13ce8:	bx	lr
   13cec:	push	{fp}		; (str fp, [sp, #-4]!)
   13cf0:	add	fp, sp, #0
   13cf4:	sub	sp, sp, #20
   13cf8:	str	r0, [fp, #-16]
   13cfc:	str	r1, [fp, #-20]	; 0xffffffec
   13d00:	ldr	r3, [fp, #-16]
   13d04:	cmp	r3, #0
   13d08:	bne	13d18 <__assert_fail@plt+0x2dfc>
   13d0c:	movw	r3, #41324	; 0xa16c
   13d10:	movt	r3, #2
   13d14:	str	r3, [fp, #-16]
   13d18:	ldr	r3, [fp, #-16]
   13d1c:	ldr	r3, [r3, #4]
   13d20:	str	r3, [fp, #-8]
   13d24:	ldr	r3, [fp, #-16]
   13d28:	ldr	r2, [fp, #-20]	; 0xffffffec
   13d2c:	str	r2, [r3, #4]
   13d30:	ldr	r3, [fp, #-8]
   13d34:	mov	r0, r3
   13d38:	add	sp, fp, #0
   13d3c:	pop	{fp}		; (ldr fp, [sp], #4)
   13d40:	bx	lr
   13d44:	str	fp, [sp, #-8]!
   13d48:	str	lr, [sp, #4]
   13d4c:	add	fp, sp, #4
   13d50:	sub	sp, sp, #16
   13d54:	str	r0, [fp, #-8]
   13d58:	str	r1, [fp, #-12]
   13d5c:	str	r2, [fp, #-16]
   13d60:	ldr	r3, [fp, #-8]
   13d64:	cmp	r3, #0
   13d68:	bne	13d78 <__assert_fail@plt+0x2e5c>
   13d6c:	movw	r3, #41324	; 0xa16c
   13d70:	movt	r3, #2
   13d74:	str	r3, [fp, #-8]
   13d78:	ldr	r3, [fp, #-8]
   13d7c:	mov	r2, #10
   13d80:	str	r2, [r3]
   13d84:	ldr	r3, [fp, #-12]
   13d88:	cmp	r3, #0
   13d8c:	beq	13d9c <__assert_fail@plt+0x2e80>
   13d90:	ldr	r3, [fp, #-16]
   13d94:	cmp	r3, #0
   13d98:	bne	13da0 <__assert_fail@plt+0x2e84>
   13d9c:	bl	10f04 <abort@plt>
   13da0:	ldr	r3, [fp, #-8]
   13da4:	ldr	r2, [fp, #-12]
   13da8:	str	r2, [r3, #40]	; 0x28
   13dac:	ldr	r3, [fp, #-8]
   13db0:	ldr	r2, [fp, #-16]
   13db4:	str	r2, [r3, #44]	; 0x2c
   13db8:	nop	{0}
   13dbc:	sub	sp, fp, #4
   13dc0:	ldr	fp, [sp]
   13dc4:	add	sp, sp, #4
   13dc8:	pop	{pc}		; (ldr pc, [sp], #4)
   13dcc:	str	fp, [sp, #-8]!
   13dd0:	str	lr, [sp, #4]
   13dd4:	add	fp, sp, #4
   13dd8:	sub	sp, sp, #56	; 0x38
   13ddc:	str	r0, [fp, #-56]	; 0xffffffc8
   13de0:	str	r1, [fp, #-60]	; 0xffffffc4
   13de4:	sub	r1, fp, #52	; 0x34
   13de8:	mov	r2, #0
   13dec:	mov	r3, #0
   13df0:	strd	r2, [r1]
   13df4:	strd	r2, [r1, #8]
   13df8:	strd	r2, [r1, #16]
   13dfc:	strd	r2, [r1, #24]
   13e00:	strd	r2, [r1, #32]
   13e04:	strd	r2, [r1, #40]	; 0x28
   13e08:	ldr	r3, [fp, #-60]	; 0xffffffc4
   13e0c:	cmp	r3, #10
   13e10:	bne	13e18 <__assert_fail@plt+0x2efc>
   13e14:	bl	10f04 <abort@plt>
   13e18:	ldr	r3, [fp, #-60]	; 0xffffffc4
   13e1c:	str	r3, [fp, #-52]	; 0xffffffcc
   13e20:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13e24:	mov	r2, r3
   13e28:	sub	r3, fp, #52	; 0x34
   13e2c:	ldrd	r0, [r3]
   13e30:	strd	r0, [r2]
   13e34:	ldrd	r0, [r3, #8]
   13e38:	strd	r0, [r2, #8]
   13e3c:	ldrd	r0, [r3, #16]
   13e40:	strd	r0, [r2, #16]
   13e44:	ldrd	r0, [r3, #24]
   13e48:	strd	r0, [r2, #24]
   13e4c:	ldrd	r0, [r3, #32]
   13e50:	strd	r0, [r2, #32]
   13e54:	ldrd	r0, [r3, #40]	; 0x28
   13e58:	strd	r0, [r2, #40]	; 0x28
   13e5c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   13e60:	sub	sp, fp, #4
   13e64:	ldr	fp, [sp]
   13e68:	add	sp, sp, #4
   13e6c:	pop	{pc}		; (ldr pc, [sp], #4)
   13e70:	str	fp, [sp, #-8]!
   13e74:	str	lr, [sp, #4]
   13e78:	add	fp, sp, #4
   13e7c:	sub	sp, sp, #16
   13e80:	str	r0, [fp, #-16]
   13e84:	str	r1, [fp, #-20]	; 0xffffffec
   13e88:	ldr	r0, [fp, #-16]
   13e8c:	bl	10e20 <gettext@plt>
   13e90:	str	r0, [fp, #-8]
   13e94:	ldr	r2, [fp, #-8]
   13e98:	ldr	r3, [fp, #-16]
   13e9c:	cmp	r2, r3
   13ea0:	beq	13eac <__assert_fail@plt+0x2f90>
   13ea4:	ldr	r3, [fp, #-8]
   13ea8:	b	13f5c <__assert_fail@plt+0x3040>
   13eac:	bl	18220 <__assert_fail@plt+0x7304>
   13eb0:	str	r0, [fp, #-12]
   13eb4:	movw	r1, #37856	; 0x93e0
   13eb8:	movt	r1, #1
   13ebc:	ldr	r0, [fp, #-12]
   13ec0:	bl	18090 <__assert_fail@plt+0x7174>
   13ec4:	mov	r3, r0
   13ec8:	cmp	r3, #0
   13ecc:	bne	13ef8 <__assert_fail@plt+0x2fdc>
   13ed0:	ldr	r3, [fp, #-16]
   13ed4:	ldrb	r3, [r3]
   13ed8:	cmp	r3, #96	; 0x60
   13edc:	bne	13eec <__assert_fail@plt+0x2fd0>
   13ee0:	movw	r3, #37864	; 0x93e8
   13ee4:	movt	r3, #1
   13ee8:	b	13f5c <__assert_fail@plt+0x3040>
   13eec:	movw	r3, #37868	; 0x93ec
   13ef0:	movt	r3, #1
   13ef4:	b	13f5c <__assert_fail@plt+0x3040>
   13ef8:	movw	r1, #37872	; 0x93f0
   13efc:	movt	r1, #1
   13f00:	ldr	r0, [fp, #-12]
   13f04:	bl	18090 <__assert_fail@plt+0x7174>
   13f08:	mov	r3, r0
   13f0c:	cmp	r3, #0
   13f10:	bne	13f3c <__assert_fail@plt+0x3020>
   13f14:	ldr	r3, [fp, #-16]
   13f18:	ldrb	r3, [r3]
   13f1c:	cmp	r3, #96	; 0x60
   13f20:	bne	13f30 <__assert_fail@plt+0x3014>
   13f24:	movw	r3, #37880	; 0x93f8
   13f28:	movt	r3, #1
   13f2c:	b	13f5c <__assert_fail@plt+0x3040>
   13f30:	movw	r3, #37884	; 0x93fc
   13f34:	movt	r3, #1
   13f38:	b	13f5c <__assert_fail@plt+0x3040>
   13f3c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13f40:	cmp	r3, #9
   13f44:	bne	13f54 <__assert_fail@plt+0x3038>
   13f48:	movw	r3, #37888	; 0x9400
   13f4c:	movt	r3, #1
   13f50:	b	13f5c <__assert_fail@plt+0x3040>
   13f54:	movw	r3, #37892	; 0x9404
   13f58:	movt	r3, #1
   13f5c:	mov	r0, r3
   13f60:	sub	sp, fp, #4
   13f64:	ldr	fp, [sp]
   13f68:	add	sp, sp, #4
   13f6c:	pop	{pc}		; (ldr pc, [sp], #4)
   13f70:	str	r4, [sp, #-12]!
   13f74:	str	fp, [sp, #4]
   13f78:	str	lr, [sp, #8]
   13f7c:	add	fp, sp, #8
   13f80:	sub	sp, sp, #116	; 0x74
   13f84:	str	r0, [fp, #-88]	; 0xffffffa8
   13f88:	str	r1, [fp, #-92]	; 0xffffffa4
   13f8c:	str	r2, [fp, #-96]	; 0xffffffa0
   13f90:	str	r3, [fp, #-100]	; 0xffffff9c
   13f94:	mov	r3, #0
   13f98:	str	r3, [fp, #-20]	; 0xffffffec
   13f9c:	mov	r3, #0
   13fa0:	str	r3, [fp, #-24]	; 0xffffffe8
   13fa4:	mov	r3, #0
   13fa8:	str	r3, [fp, #-28]	; 0xffffffe4
   13fac:	mov	r3, #0
   13fb0:	str	r3, [fp, #-32]	; 0xffffffe0
   13fb4:	mov	r3, #0
   13fb8:	strb	r3, [fp, #-33]	; 0xffffffdf
   13fbc:	bl	10d90 <__ctype_get_mb_cur_max@plt>
   13fc0:	mov	r3, r0
   13fc4:	cmp	r3, #1
   13fc8:	moveq	r3, #1
   13fcc:	movne	r3, #0
   13fd0:	strb	r3, [fp, #-57]	; 0xffffffc7
   13fd4:	ldr	r3, [fp, #8]
   13fd8:	and	r3, r3, #2
   13fdc:	cmp	r3, #0
   13fe0:	movne	r3, #1
   13fe4:	moveq	r3, #0
   13fe8:	strb	r3, [fp, #-34]	; 0xffffffde
   13fec:	mov	r3, #0
   13ff0:	strb	r3, [fp, #-35]	; 0xffffffdd
   13ff4:	mov	r3, #0
   13ff8:	strb	r3, [fp, #-36]	; 0xffffffdc
   13ffc:	mov	r3, #1
   14000:	strb	r3, [fp, #-37]	; 0xffffffdb
   14004:	ldr	r3, [fp, #4]
   14008:	cmp	r3, #10
   1400c:	ldrls	pc, [pc, r3, lsl #2]
   14010:	b	14228 <__assert_fail@plt+0x330c>
   14014:	andeq	r4, r1, ip, lsl r2
   14018:	muleq	r1, r4, r1
   1401c:			; <UNDEFINED> instruction: 0x000141b8
   14020:	andeq	r4, r1, ip, lsl #3
   14024:	muleq	r1, ip, r1
   14028:	andeq	r4, r1, r0, asr r0
   1402c:	andeq	r4, r1, r0, asr #32
   14030:	strheq	r4, [r1], -r4	; <UNPREDICTABLE>
   14034:	andeq	r4, r1, r8, asr #1
   14038:	andeq	r4, r1, r8, asr #1
   1403c:	andeq	r4, r1, r8, asr #1
   14040:	mov	r3, #5
   14044:	str	r3, [fp, #4]
   14048:	mov	r3, #1
   1404c:	strb	r3, [fp, #-34]	; 0xffffffde
   14050:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14054:	eor	r3, r3, #1
   14058:	uxtb	r3, r3
   1405c:	cmp	r3, #0
   14060:	beq	14094 <__assert_fail@plt+0x3178>
   14064:	ldr	r2, [fp, #-20]	; 0xffffffec
   14068:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1406c:	cmp	r2, r3
   14070:	bcs	14088 <__assert_fail@plt+0x316c>
   14074:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14078:	ldr	r3, [fp, #-20]	; 0xffffffec
   1407c:	add	r3, r2, r3
   14080:	mov	r2, #34	; 0x22
   14084:	strb	r2, [r3]
   14088:	ldr	r3, [fp, #-20]	; 0xffffffec
   1408c:	add	r3, r3, #1
   14090:	str	r3, [fp, #-20]	; 0xffffffec
   14094:	mov	r3, #1
   14098:	strb	r3, [fp, #-33]	; 0xffffffdf
   1409c:	movw	r3, #37888	; 0x9400
   140a0:	movt	r3, #1
   140a4:	str	r3, [fp, #-28]	; 0xffffffe4
   140a8:	mov	r3, #1
   140ac:	str	r3, [fp, #-32]	; 0xffffffe0
   140b0:	b	1422c <__assert_fail@plt+0x3310>
   140b4:	mov	r3, #1
   140b8:	strb	r3, [fp, #-33]	; 0xffffffdf
   140bc:	mov	r3, #0
   140c0:	strb	r3, [fp, #-34]	; 0xffffffde
   140c4:	b	1422c <__assert_fail@plt+0x3310>
   140c8:	ldr	r3, [fp, #4]
   140cc:	cmp	r3, #10
   140d0:	beq	140fc <__assert_fail@plt+0x31e0>
   140d4:	ldr	r1, [fp, #4]
   140d8:	movw	r0, #37896	; 0x9408
   140dc:	movt	r0, #1
   140e0:	bl	13e70 <__assert_fail@plt+0x2f54>
   140e4:	str	r0, [fp, #16]
   140e8:	ldr	r1, [fp, #4]
   140ec:	movw	r0, #37892	; 0x9404
   140f0:	movt	r0, #1
   140f4:	bl	13e70 <__assert_fail@plt+0x2f54>
   140f8:	str	r0, [fp, #20]
   140fc:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14100:	eor	r3, r3, #1
   14104:	uxtb	r3, r3
   14108:	cmp	r3, #0
   1410c:	beq	1416c <__assert_fail@plt+0x3250>
   14110:	ldr	r3, [fp, #16]
   14114:	str	r3, [fp, #-28]	; 0xffffffe4
   14118:	b	1415c <__assert_fail@plt+0x3240>
   1411c:	ldr	r2, [fp, #-20]	; 0xffffffec
   14120:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14124:	cmp	r2, r3
   14128:	bcs	14144 <__assert_fail@plt+0x3228>
   1412c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14130:	ldr	r3, [fp, #-20]	; 0xffffffec
   14134:	add	r3, r2, r3
   14138:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1413c:	ldrb	r2, [r2]
   14140:	strb	r2, [r3]
   14144:	ldr	r3, [fp, #-20]	; 0xffffffec
   14148:	add	r3, r3, #1
   1414c:	str	r3, [fp, #-20]	; 0xffffffec
   14150:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14154:	add	r3, r3, #1
   14158:	str	r3, [fp, #-28]	; 0xffffffe4
   1415c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14160:	ldrb	r3, [r3]
   14164:	cmp	r3, #0
   14168:	bne	1411c <__assert_fail@plt+0x3200>
   1416c:	mov	r3, #1
   14170:	strb	r3, [fp, #-33]	; 0xffffffdf
   14174:	ldr	r3, [fp, #20]
   14178:	str	r3, [fp, #-28]	; 0xffffffe4
   1417c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   14180:	bl	10e2c <strlen@plt>
   14184:	str	r0, [fp, #-32]	; 0xffffffe0
   14188:	b	1422c <__assert_fail@plt+0x3310>
   1418c:	mov	r3, #1
   14190:	strb	r3, [fp, #-33]	; 0xffffffdf
   14194:	mov	r3, #1
   14198:	strb	r3, [fp, #-34]	; 0xffffffde
   1419c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   141a0:	eor	r3, r3, #1
   141a4:	uxtb	r3, r3
   141a8:	cmp	r3, #0
   141ac:	beq	141b8 <__assert_fail@plt+0x329c>
   141b0:	mov	r3, #1
   141b4:	strb	r3, [fp, #-33]	; 0xffffffdf
   141b8:	mov	r3, #2
   141bc:	str	r3, [fp, #4]
   141c0:	ldrb	r3, [fp, #-34]	; 0xffffffde
   141c4:	eor	r3, r3, #1
   141c8:	uxtb	r3, r3
   141cc:	cmp	r3, #0
   141d0:	beq	14204 <__assert_fail@plt+0x32e8>
   141d4:	ldr	r2, [fp, #-20]	; 0xffffffec
   141d8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   141dc:	cmp	r2, r3
   141e0:	bcs	141f8 <__assert_fail@plt+0x32dc>
   141e4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   141e8:	ldr	r3, [fp, #-20]	; 0xffffffec
   141ec:	add	r3, r2, r3
   141f0:	mov	r2, #39	; 0x27
   141f4:	strb	r2, [r3]
   141f8:	ldr	r3, [fp, #-20]	; 0xffffffec
   141fc:	add	r3, r3, #1
   14200:	str	r3, [fp, #-20]	; 0xffffffec
   14204:	movw	r3, #37892	; 0x9404
   14208:	movt	r3, #1
   1420c:	str	r3, [fp, #-28]	; 0xffffffe4
   14210:	mov	r3, #1
   14214:	str	r3, [fp, #-32]	; 0xffffffe0
   14218:	b	1422c <__assert_fail@plt+0x3310>
   1421c:	mov	r3, #0
   14220:	strb	r3, [fp, #-34]	; 0xffffffde
   14224:	b	1422c <__assert_fail@plt+0x3310>
   14228:	bl	10f04 <abort@plt>
   1422c:	mov	r3, #0
   14230:	str	r3, [fp, #-16]
   14234:	b	153d0 <__assert_fail@plt+0x44b4>
   14238:	mov	r3, #0
   1423c:	strb	r3, [fp, #-40]	; 0xffffffd8
   14240:	mov	r3, #0
   14244:	strb	r3, [fp, #-41]	; 0xffffffd7
   14248:	mov	r3, #0
   1424c:	strb	r3, [fp, #-42]	; 0xffffffd6
   14250:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   14254:	cmp	r3, #0
   14258:	beq	142f4 <__assert_fail@plt+0x33d8>
   1425c:	ldr	r3, [fp, #4]
   14260:	cmp	r3, #2
   14264:	beq	142f4 <__assert_fail@plt+0x33d8>
   14268:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1426c:	cmp	r3, #0
   14270:	beq	142f4 <__assert_fail@plt+0x33d8>
   14274:	ldr	r2, [fp, #-16]
   14278:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1427c:	add	r4, r2, r3
   14280:	ldr	r3, [fp, #-100]	; 0xffffff9c
   14284:	cmn	r3, #1
   14288:	bne	142ac <__assert_fail@plt+0x3390>
   1428c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   14290:	cmp	r3, #1
   14294:	bls	142ac <__assert_fail@plt+0x3390>
   14298:	ldr	r0, [fp, #-96]	; 0xffffffa0
   1429c:	bl	10e2c <strlen@plt>
   142a0:	str	r0, [fp, #-100]	; 0xffffff9c
   142a4:	ldr	r3, [fp, #-100]	; 0xffffff9c
   142a8:	b	142b0 <__assert_fail@plt+0x3394>
   142ac:	ldr	r3, [fp, #-100]	; 0xffffff9c
   142b0:	cmp	r3, r4
   142b4:	bcc	142f4 <__assert_fail@plt+0x33d8>
   142b8:	ldr	r2, [fp, #-96]	; 0xffffffa0
   142bc:	ldr	r3, [fp, #-16]
   142c0:	add	r3, r2, r3
   142c4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   142c8:	ldr	r1, [fp, #-28]	; 0xffffffe4
   142cc:	mov	r0, r3
   142d0:	bl	10d3c <memcmp@plt>
   142d4:	mov	r3, r0
   142d8:	cmp	r3, #0
   142dc:	bne	142f4 <__assert_fail@plt+0x33d8>
   142e0:	ldrb	r3, [fp, #-34]	; 0xffffffde
   142e4:	cmp	r3, #0
   142e8:	bne	1558c <__assert_fail@plt+0x4670>
   142ec:	mov	r3, #1
   142f0:	strb	r3, [fp, #-40]	; 0xffffffd8
   142f4:	ldr	r2, [fp, #-96]	; 0xffffffa0
   142f8:	ldr	r3, [fp, #-16]
   142fc:	add	r3, r2, r3
   14300:	ldrb	r3, [r3]
   14304:	strb	r3, [fp, #-38]	; 0xffffffda
   14308:	ldrb	r3, [fp, #-38]	; 0xffffffda
   1430c:	cmp	r3, #126	; 0x7e
   14310:	ldrls	pc, [pc, r3, lsl #2]
   14314:	b	14b4c <__assert_fail@plt+0x3c30>
   14318:	andeq	r4, r1, r4, lsl r5
   1431c:	andeq	r4, r1, ip, asr #22
   14320:	andeq	r4, r1, ip, asr #22
   14324:	andeq	r4, r1, ip, asr #22
   14328:	andeq	r4, r1, ip, asr #22
   1432c:	andeq	r4, r1, ip, asr #22
   14330:	andeq	r4, r1, ip, asr #22
   14334:	andeq	r4, r1, r8, lsl #18
   14338:	andeq	r4, r1, r4, lsl r9
   1433c:	andeq	r4, r1, r4, asr #18
   14340:	andeq	r4, r1, ip, lsr #18
   14344:	andeq	r4, r1, r0, asr r9
   14348:	andeq	r4, r1, r0, lsr #18
   1434c:	andeq	r4, r1, r8, lsr r9
   14350:	andeq	r4, r1, ip, asr #22
   14354:	andeq	r4, r1, ip, asr #22
   14358:	andeq	r4, r1, ip, asr #22
   1435c:	andeq	r4, r1, ip, asr #22
   14360:	andeq	r4, r1, ip, asr #22
   14364:	andeq	r4, r1, ip, asr #22
   14368:	andeq	r4, r1, ip, asr #22
   1436c:	andeq	r4, r1, ip, asr #22
   14370:	andeq	r4, r1, ip, asr #22
   14374:	andeq	r4, r1, ip, asr #22
   14378:	andeq	r4, r1, ip, asr #22
   1437c:	andeq	r4, r1, ip, asr #22
   14380:	andeq	r4, r1, ip, asr #22
   14384:	andeq	r4, r1, ip, asr #22
   14388:	andeq	r4, r1, ip, asr #22
   1438c:	andeq	r4, r1, ip, asr #22
   14390:	andeq	r4, r1, ip, asr #22
   14394:	andeq	r4, r1, ip, asr #22
   14398:	andeq	r4, r1, r0, lsr sl
   1439c:	andeq	r4, r1, r8, lsr sl
   143a0:	andeq	r4, r1, r8, lsr sl
   143a4:	andeq	r4, r1, r4, lsr #20
   143a8:	andeq	r4, r1, r8, lsr sl
   143ac:	andeq	r4, r1, r0, asr #22
   143b0:	andeq	r4, r1, r8, lsr sl
   143b4:	andeq	r4, r1, r4, asr sl
   143b8:	andeq	r4, r1, r8, lsr sl
   143bc:	andeq	r4, r1, r8, lsr sl
   143c0:	andeq	r4, r1, r8, lsr sl
   143c4:	andeq	r4, r1, r0, asr #22
   143c8:	andeq	r4, r1, r0, asr #22
   143cc:	andeq	r4, r1, r0, asr #22
   143d0:	andeq	r4, r1, r0, asr #22
   143d4:	andeq	r4, r1, r0, asr #22
   143d8:	andeq	r4, r1, r0, asr #22
   143dc:	andeq	r4, r1, r0, asr #22
   143e0:	andeq	r4, r1, r0, asr #22
   143e4:	andeq	r4, r1, r0, asr #22
   143e8:	andeq	r4, r1, r0, asr #22
   143ec:	andeq	r4, r1, r0, asr #22
   143f0:	andeq	r4, r1, r0, asr #22
   143f4:	andeq	r4, r1, r0, asr #22
   143f8:	andeq	r4, r1, r0, asr #22
   143fc:	andeq	r4, r1, r0, asr #22
   14400:	andeq	r4, r1, r0, asr #22
   14404:	andeq	r4, r1, r8, lsr sl
   14408:	andeq	r4, r1, r8, lsr sl
   1440c:	andeq	r4, r1, r8, lsr sl
   14410:	andeq	r4, r1, r8, lsr sl
   14414:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14418:	andeq	r4, r1, ip, asr #22
   1441c:	andeq	r4, r1, r0, asr #22
   14420:	andeq	r4, r1, r0, asr #22
   14424:	andeq	r4, r1, r0, asr #22
   14428:	andeq	r4, r1, r0, asr #22
   1442c:	andeq	r4, r1, r0, asr #22
   14430:	andeq	r4, r1, r0, asr #22
   14434:	andeq	r4, r1, r0, asr #22
   14438:	andeq	r4, r1, r0, asr #22
   1443c:	andeq	r4, r1, r0, asr #22
   14440:	andeq	r4, r1, r0, asr #22
   14444:	andeq	r4, r1, r0, asr #22
   14448:	andeq	r4, r1, r0, asr #22
   1444c:	andeq	r4, r1, r0, asr #22
   14450:	andeq	r4, r1, r0, asr #22
   14454:	andeq	r4, r1, r0, asr #22
   14458:	andeq	r4, r1, r0, asr #22
   1445c:	andeq	r4, r1, r0, asr #22
   14460:	andeq	r4, r1, r0, asr #22
   14464:	andeq	r4, r1, r0, asr #22
   14468:	andeq	r4, r1, r0, asr #22
   1446c:	andeq	r4, r1, r0, asr #22
   14470:	andeq	r4, r1, r0, asr #22
   14474:	andeq	r4, r1, r0, asr #22
   14478:	andeq	r4, r1, r0, asr #22
   1447c:	andeq	r4, r1, r0, asr #22
   14480:	andeq	r4, r1, r0, asr #22
   14484:	andeq	r4, r1, r8, lsr sl
   14488:	andeq	r4, r1, ip, asr r9
   1448c:	andeq	r4, r1, r0, asr #22
   14490:	andeq	r4, r1, r8, lsr sl
   14494:	andeq	r4, r1, r0, asr #22
   14498:	andeq	r4, r1, r8, lsr sl
   1449c:	andeq	r4, r1, r0, asr #22
   144a0:	andeq	r4, r1, r0, asr #22
   144a4:	andeq	r4, r1, r0, asr #22
   144a8:	andeq	r4, r1, r0, asr #22
   144ac:	andeq	r4, r1, r0, asr #22
   144b0:	andeq	r4, r1, r0, asr #22
   144b4:	andeq	r4, r1, r0, asr #22
   144b8:	andeq	r4, r1, r0, asr #22
   144bc:	andeq	r4, r1, r0, asr #22
   144c0:	andeq	r4, r1, r0, asr #22
   144c4:	andeq	r4, r1, r0, asr #22
   144c8:	andeq	r4, r1, r0, asr #22
   144cc:	andeq	r4, r1, r0, asr #22
   144d0:	andeq	r4, r1, r0, asr #22
   144d4:	andeq	r4, r1, r0, asr #22
   144d8:	andeq	r4, r1, r0, asr #22
   144dc:	andeq	r4, r1, r0, asr #22
   144e0:	andeq	r4, r1, r0, asr #22
   144e4:	andeq	r4, r1, r0, asr #22
   144e8:	andeq	r4, r1, r0, asr #22
   144ec:	andeq	r4, r1, r0, asr #22
   144f0:	andeq	r4, r1, r0, asr #22
   144f4:	andeq	r4, r1, r0, asr #22
   144f8:	andeq	r4, r1, r0, asr #22
   144fc:	andeq	r4, r1, r0, asr #22
   14500:	andeq	r4, r1, r0, asr #22
   14504:	ldrdeq	r4, [r1], -ip
   14508:	andeq	r4, r1, r8, lsr sl
   1450c:	ldrdeq	r4, [r1], -ip
   14510:	andeq	r4, r1, r4, lsr #20
   14514:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   14518:	cmp	r3, #0
   1451c:	beq	146e0 <__assert_fail@plt+0x37c4>
   14520:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14524:	cmp	r3, #0
   14528:	bne	15594 <__assert_fail@plt+0x4678>
   1452c:	mov	r3, #1
   14530:	strb	r3, [fp, #-41]	; 0xffffffd7
   14534:	ldr	r3, [fp, #4]
   14538:	cmp	r3, #2
   1453c:	bne	145ec <__assert_fail@plt+0x36d0>
   14540:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   14544:	eor	r3, r3, #1
   14548:	uxtb	r3, r3
   1454c:	cmp	r3, #0
   14550:	beq	145ec <__assert_fail@plt+0x36d0>
   14554:	ldr	r2, [fp, #-20]	; 0xffffffec
   14558:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1455c:	cmp	r2, r3
   14560:	bcs	14578 <__assert_fail@plt+0x365c>
   14564:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14568:	ldr	r3, [fp, #-20]	; 0xffffffec
   1456c:	add	r3, r2, r3
   14570:	mov	r2, #39	; 0x27
   14574:	strb	r2, [r3]
   14578:	ldr	r3, [fp, #-20]	; 0xffffffec
   1457c:	add	r3, r3, #1
   14580:	str	r3, [fp, #-20]	; 0xffffffec
   14584:	ldr	r2, [fp, #-20]	; 0xffffffec
   14588:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1458c:	cmp	r2, r3
   14590:	bcs	145a8 <__assert_fail@plt+0x368c>
   14594:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14598:	ldr	r3, [fp, #-20]	; 0xffffffec
   1459c:	add	r3, r2, r3
   145a0:	mov	r2, #36	; 0x24
   145a4:	strb	r2, [r3]
   145a8:	ldr	r3, [fp, #-20]	; 0xffffffec
   145ac:	add	r3, r3, #1
   145b0:	str	r3, [fp, #-20]	; 0xffffffec
   145b4:	ldr	r2, [fp, #-20]	; 0xffffffec
   145b8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   145bc:	cmp	r2, r3
   145c0:	bcs	145d8 <__assert_fail@plt+0x36bc>
   145c4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   145c8:	ldr	r3, [fp, #-20]	; 0xffffffec
   145cc:	add	r3, r2, r3
   145d0:	mov	r2, #39	; 0x27
   145d4:	strb	r2, [r3]
   145d8:	ldr	r3, [fp, #-20]	; 0xffffffec
   145dc:	add	r3, r3, #1
   145e0:	str	r3, [fp, #-20]	; 0xffffffec
   145e4:	mov	r3, #1
   145e8:	strb	r3, [fp, #-35]	; 0xffffffdd
   145ec:	ldr	r2, [fp, #-20]	; 0xffffffec
   145f0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   145f4:	cmp	r2, r3
   145f8:	bcs	14610 <__assert_fail@plt+0x36f4>
   145fc:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14600:	ldr	r3, [fp, #-20]	; 0xffffffec
   14604:	add	r3, r2, r3
   14608:	mov	r2, #92	; 0x5c
   1460c:	strb	r2, [r3]
   14610:	ldr	r3, [fp, #-20]	; 0xffffffec
   14614:	add	r3, r3, #1
   14618:	str	r3, [fp, #-20]	; 0xffffffec
   1461c:	ldr	r3, [fp, #4]
   14620:	cmp	r3, #2
   14624:	beq	146d4 <__assert_fail@plt+0x37b8>
   14628:	ldr	r3, [fp, #-16]
   1462c:	add	r3, r3, #1
   14630:	ldr	r2, [fp, #-100]	; 0xffffff9c
   14634:	cmp	r2, r3
   14638:	bls	146d4 <__assert_fail@plt+0x37b8>
   1463c:	ldr	r3, [fp, #-16]
   14640:	add	r3, r3, #1
   14644:	ldr	r2, [fp, #-96]	; 0xffffffa0
   14648:	add	r3, r2, r3
   1464c:	ldrb	r3, [r3]
   14650:	cmp	r3, #47	; 0x2f
   14654:	bls	146d4 <__assert_fail@plt+0x37b8>
   14658:	ldr	r3, [fp, #-16]
   1465c:	add	r3, r3, #1
   14660:	ldr	r2, [fp, #-96]	; 0xffffffa0
   14664:	add	r3, r2, r3
   14668:	ldrb	r3, [r3]
   1466c:	cmp	r3, #57	; 0x39
   14670:	bhi	146d4 <__assert_fail@plt+0x37b8>
   14674:	ldr	r2, [fp, #-20]	; 0xffffffec
   14678:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1467c:	cmp	r2, r3
   14680:	bcs	14698 <__assert_fail@plt+0x377c>
   14684:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14688:	ldr	r3, [fp, #-20]	; 0xffffffec
   1468c:	add	r3, r2, r3
   14690:	mov	r2, #48	; 0x30
   14694:	strb	r2, [r3]
   14698:	ldr	r3, [fp, #-20]	; 0xffffffec
   1469c:	add	r3, r3, #1
   146a0:	str	r3, [fp, #-20]	; 0xffffffec
   146a4:	ldr	r2, [fp, #-20]	; 0xffffffec
   146a8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   146ac:	cmp	r2, r3
   146b0:	bcs	146c8 <__assert_fail@plt+0x37ac>
   146b4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   146b8:	ldr	r3, [fp, #-20]	; 0xffffffec
   146bc:	add	r3, r2, r3
   146c0:	mov	r2, #48	; 0x30
   146c4:	strb	r2, [r3]
   146c8:	ldr	r3, [fp, #-20]	; 0xffffffec
   146cc:	add	r3, r3, #1
   146d0:	str	r3, [fp, #-20]	; 0xffffffec
   146d4:	mov	r3, #48	; 0x30
   146d8:	strb	r3, [fp, #-38]	; 0xffffffda
   146dc:	b	1511c <__assert_fail@plt+0x4200>
   146e0:	ldr	r3, [fp, #8]
   146e4:	and	r3, r3, #1
   146e8:	cmp	r3, #0
   146ec:	beq	1511c <__assert_fail@plt+0x4200>
   146f0:	b	153c4 <__assert_fail@plt+0x44a8>
   146f4:	ldr	r3, [fp, #4]
   146f8:	cmp	r3, #2
   146fc:	beq	14710 <__assert_fail@plt+0x37f4>
   14700:	ldr	r3, [fp, #4]
   14704:	cmp	r3, #5
   14708:	beq	14720 <__assert_fail@plt+0x3804>
   1470c:	b	14904 <__assert_fail@plt+0x39e8>
   14710:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14714:	cmp	r3, #0
   14718:	beq	148f8 <__assert_fail@plt+0x39dc>
   1471c:	b	155c8 <__assert_fail@plt+0x46ac>
   14720:	ldr	r3, [fp, #8]
   14724:	and	r3, r3, #4
   14728:	cmp	r3, #0
   1472c:	beq	14900 <__assert_fail@plt+0x39e4>
   14730:	ldr	r3, [fp, #-16]
   14734:	add	r3, r3, #2
   14738:	ldr	r2, [fp, #-100]	; 0xffffff9c
   1473c:	cmp	r2, r3
   14740:	bls	14900 <__assert_fail@plt+0x39e4>
   14744:	ldr	r3, [fp, #-16]
   14748:	add	r3, r3, #1
   1474c:	ldr	r2, [fp, #-96]	; 0xffffffa0
   14750:	add	r3, r2, r3
   14754:	ldrb	r3, [r3]
   14758:	cmp	r3, #63	; 0x3f
   1475c:	bne	14900 <__assert_fail@plt+0x39e4>
   14760:	ldr	r3, [fp, #-16]
   14764:	add	r3, r3, #2
   14768:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1476c:	add	r3, r2, r3
   14770:	ldrb	r3, [r3]
   14774:	sub	r3, r3, #33	; 0x21
   14778:	cmp	r3, #29
   1477c:	ldrls	pc, [pc, r3, lsl #2]
   14780:	b	148f0 <__assert_fail@plt+0x39d4>
   14784:	strdeq	r4, [r1], -ip
   14788:	strdeq	r4, [r1], -r0
   1478c:	strdeq	r4, [r1], -r0
   14790:	strdeq	r4, [r1], -r0
   14794:	strdeq	r4, [r1], -r0
   14798:	strdeq	r4, [r1], -r0
   1479c:	strdeq	r4, [r1], -ip
   147a0:	strdeq	r4, [r1], -ip
   147a4:	strdeq	r4, [r1], -ip
   147a8:	strdeq	r4, [r1], -r0
   147ac:	strdeq	r4, [r1], -r0
   147b0:	strdeq	r4, [r1], -r0
   147b4:	strdeq	r4, [r1], -ip
   147b8:	strdeq	r4, [r1], -r0
   147bc:	strdeq	r4, [r1], -ip
   147c0:	strdeq	r4, [r1], -r0
   147c4:	strdeq	r4, [r1], -r0
   147c8:	strdeq	r4, [r1], -r0
   147cc:	strdeq	r4, [r1], -r0
   147d0:	strdeq	r4, [r1], -r0
   147d4:	strdeq	r4, [r1], -r0
   147d8:	strdeq	r4, [r1], -r0
   147dc:	strdeq	r4, [r1], -r0
   147e0:	strdeq	r4, [r1], -r0
   147e4:	strdeq	r4, [r1], -r0
   147e8:	strdeq	r4, [r1], -r0
   147ec:	strdeq	r4, [r1], -r0
   147f0:	strdeq	r4, [r1], -ip
   147f4:	strdeq	r4, [r1], -ip
   147f8:	strdeq	r4, [r1], -ip
   147fc:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14800:	cmp	r3, #0
   14804:	bne	1559c <__assert_fail@plt+0x4680>
   14808:	ldr	r3, [fp, #-16]
   1480c:	add	r3, r3, #2
   14810:	ldr	r2, [fp, #-96]	; 0xffffffa0
   14814:	add	r3, r2, r3
   14818:	ldrb	r3, [r3]
   1481c:	strb	r3, [fp, #-38]	; 0xffffffda
   14820:	ldr	r3, [fp, #-16]
   14824:	add	r3, r3, #2
   14828:	str	r3, [fp, #-16]
   1482c:	ldr	r2, [fp, #-20]	; 0xffffffec
   14830:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14834:	cmp	r2, r3
   14838:	bcs	14850 <__assert_fail@plt+0x3934>
   1483c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14840:	ldr	r3, [fp, #-20]	; 0xffffffec
   14844:	add	r3, r2, r3
   14848:	mov	r2, #63	; 0x3f
   1484c:	strb	r2, [r3]
   14850:	ldr	r3, [fp, #-20]	; 0xffffffec
   14854:	add	r3, r3, #1
   14858:	str	r3, [fp, #-20]	; 0xffffffec
   1485c:	ldr	r2, [fp, #-20]	; 0xffffffec
   14860:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14864:	cmp	r2, r3
   14868:	bcs	14880 <__assert_fail@plt+0x3964>
   1486c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14870:	ldr	r3, [fp, #-20]	; 0xffffffec
   14874:	add	r3, r2, r3
   14878:	mov	r2, #34	; 0x22
   1487c:	strb	r2, [r3]
   14880:	ldr	r3, [fp, #-20]	; 0xffffffec
   14884:	add	r3, r3, #1
   14888:	str	r3, [fp, #-20]	; 0xffffffec
   1488c:	ldr	r2, [fp, #-20]	; 0xffffffec
   14890:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14894:	cmp	r2, r3
   14898:	bcs	148b0 <__assert_fail@plt+0x3994>
   1489c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   148a0:	ldr	r3, [fp, #-20]	; 0xffffffec
   148a4:	add	r3, r2, r3
   148a8:	mov	r2, #34	; 0x22
   148ac:	strb	r2, [r3]
   148b0:	ldr	r3, [fp, #-20]	; 0xffffffec
   148b4:	add	r3, r3, #1
   148b8:	str	r3, [fp, #-20]	; 0xffffffec
   148bc:	ldr	r2, [fp, #-20]	; 0xffffffec
   148c0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   148c4:	cmp	r2, r3
   148c8:	bcs	148e0 <__assert_fail@plt+0x39c4>
   148cc:	ldr	r2, [fp, #-88]	; 0xffffffa8
   148d0:	ldr	r3, [fp, #-20]	; 0xffffffec
   148d4:	add	r3, r2, r3
   148d8:	mov	r2, #63	; 0x3f
   148dc:	strb	r2, [r3]
   148e0:	ldr	r3, [fp, #-20]	; 0xffffffec
   148e4:	add	r3, r3, #1
   148e8:	str	r3, [fp, #-20]	; 0xffffffec
   148ec:	b	148f4 <__assert_fail@plt+0x39d8>
   148f0:	nop	{0}
   148f4:	b	14900 <__assert_fail@plt+0x39e4>
   148f8:	nop	{0}
   148fc:	b	15150 <__assert_fail@plt+0x4234>
   14900:	nop	{0}
   14904:	b	15150 <__assert_fail@plt+0x4234>
   14908:	mov	r3, #97	; 0x61
   1490c:	strb	r3, [fp, #-39]	; 0xffffffd9
   14910:	b	149c4 <__assert_fail@plt+0x3aa8>
   14914:	mov	r3, #98	; 0x62
   14918:	strb	r3, [fp, #-39]	; 0xffffffd9
   1491c:	b	149c4 <__assert_fail@plt+0x3aa8>
   14920:	mov	r3, #102	; 0x66
   14924:	strb	r3, [fp, #-39]	; 0xffffffd9
   14928:	b	149c4 <__assert_fail@plt+0x3aa8>
   1492c:	mov	r3, #110	; 0x6e
   14930:	strb	r3, [fp, #-39]	; 0xffffffd9
   14934:	b	149a8 <__assert_fail@plt+0x3a8c>
   14938:	mov	r3, #114	; 0x72
   1493c:	strb	r3, [fp, #-39]	; 0xffffffd9
   14940:	b	149a8 <__assert_fail@plt+0x3a8c>
   14944:	mov	r3, #116	; 0x74
   14948:	strb	r3, [fp, #-39]	; 0xffffffd9
   1494c:	b	149a8 <__assert_fail@plt+0x3a8c>
   14950:	mov	r3, #118	; 0x76
   14954:	strb	r3, [fp, #-39]	; 0xffffffd9
   14958:	b	149c4 <__assert_fail@plt+0x3aa8>
   1495c:	ldrb	r3, [fp, #-38]	; 0xffffffda
   14960:	strb	r3, [fp, #-39]	; 0xffffffd9
   14964:	ldr	r3, [fp, #4]
   14968:	cmp	r3, #2
   1496c:	bne	14980 <__assert_fail@plt+0x3a64>
   14970:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14974:	cmp	r3, #0
   14978:	beq	152dc <__assert_fail@plt+0x43c0>
   1497c:	b	155c8 <__assert_fail@plt+0x46ac>
   14980:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   14984:	cmp	r3, #0
   14988:	beq	149a4 <__assert_fail@plt+0x3a88>
   1498c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14990:	cmp	r3, #0
   14994:	beq	149a4 <__assert_fail@plt+0x3a88>
   14998:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1499c:	cmp	r3, #0
   149a0:	bne	152e4 <__assert_fail@plt+0x43c8>
   149a4:	nop	{0}
   149a8:	ldr	r3, [fp, #4]
   149ac:	cmp	r3, #2
   149b0:	bne	149c0 <__assert_fail@plt+0x3aa4>
   149b4:	ldrb	r3, [fp, #-34]	; 0xffffffde
   149b8:	cmp	r3, #0
   149bc:	bne	155a4 <__assert_fail@plt+0x4688>
   149c0:	nop	{0}
   149c4:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   149c8:	cmp	r3, #0
   149cc:	beq	15124 <__assert_fail@plt+0x4208>
   149d0:	ldrb	r3, [fp, #-39]	; 0xffffffd9
   149d4:	strb	r3, [fp, #-38]	; 0xffffffda
   149d8:	b	151dc <__assert_fail@plt+0x42c0>
   149dc:	ldr	r3, [fp, #-100]	; 0xffffff9c
   149e0:	cmn	r3, #1
   149e4:	bne	14a08 <__assert_fail@plt+0x3aec>
   149e8:	ldr	r3, [fp, #-96]	; 0xffffffa0
   149ec:	add	r3, r3, #1
   149f0:	ldrb	r3, [r3]
   149f4:	cmp	r3, #0
   149f8:	movne	r3, #1
   149fc:	moveq	r3, #0
   14a00:	uxtb	r3, r3
   14a04:	b	14a1c <__assert_fail@plt+0x3b00>
   14a08:	ldr	r3, [fp, #-100]	; 0xffffff9c
   14a0c:	cmp	r3, #1
   14a10:	movne	r3, #1
   14a14:	moveq	r3, #0
   14a18:	uxtb	r3, r3
   14a1c:	cmp	r3, #0
   14a20:	bne	1512c <__assert_fail@plt+0x4210>
   14a24:	ldr	r3, [fp, #-16]
   14a28:	cmp	r3, #0
   14a2c:	bne	15134 <__assert_fail@plt+0x4218>
   14a30:	mov	r3, #1
   14a34:	strb	r3, [fp, #-42]	; 0xffffffd6
   14a38:	ldr	r3, [fp, #4]
   14a3c:	cmp	r3, #2
   14a40:	bne	1513c <__assert_fail@plt+0x4220>
   14a44:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14a48:	cmp	r3, #0
   14a4c:	beq	1513c <__assert_fail@plt+0x4220>
   14a50:	b	155c8 <__assert_fail@plt+0x46ac>
   14a54:	mov	r3, #1
   14a58:	strb	r3, [fp, #-36]	; 0xffffffdc
   14a5c:	mov	r3, #1
   14a60:	strb	r3, [fp, #-42]	; 0xffffffd6
   14a64:	ldr	r3, [fp, #4]
   14a68:	cmp	r3, #2
   14a6c:	bne	15144 <__assert_fail@plt+0x4228>
   14a70:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14a74:	cmp	r3, #0
   14a78:	bne	155ac <__assert_fail@plt+0x4690>
   14a7c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14a80:	cmp	r3, #0
   14a84:	beq	14aa4 <__assert_fail@plt+0x3b88>
   14a88:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14a8c:	cmp	r3, #0
   14a90:	bne	14aa4 <__assert_fail@plt+0x3b88>
   14a94:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14a98:	str	r3, [fp, #-24]	; 0xffffffe8
   14a9c:	mov	r3, #0
   14aa0:	str	r3, [fp, #-92]	; 0xffffffa4
   14aa4:	ldr	r2, [fp, #-20]	; 0xffffffec
   14aa8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14aac:	cmp	r2, r3
   14ab0:	bcs	14ac8 <__assert_fail@plt+0x3bac>
   14ab4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14ab8:	ldr	r3, [fp, #-20]	; 0xffffffec
   14abc:	add	r3, r2, r3
   14ac0:	mov	r2, #39	; 0x27
   14ac4:	strb	r2, [r3]
   14ac8:	ldr	r3, [fp, #-20]	; 0xffffffec
   14acc:	add	r3, r3, #1
   14ad0:	str	r3, [fp, #-20]	; 0xffffffec
   14ad4:	ldr	r2, [fp, #-20]	; 0xffffffec
   14ad8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14adc:	cmp	r2, r3
   14ae0:	bcs	14af8 <__assert_fail@plt+0x3bdc>
   14ae4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14ae8:	ldr	r3, [fp, #-20]	; 0xffffffec
   14aec:	add	r3, r2, r3
   14af0:	mov	r2, #92	; 0x5c
   14af4:	strb	r2, [r3]
   14af8:	ldr	r3, [fp, #-20]	; 0xffffffec
   14afc:	add	r3, r3, #1
   14b00:	str	r3, [fp, #-20]	; 0xffffffec
   14b04:	ldr	r2, [fp, #-20]	; 0xffffffec
   14b08:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14b0c:	cmp	r2, r3
   14b10:	bcs	14b28 <__assert_fail@plt+0x3c0c>
   14b14:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14b18:	ldr	r3, [fp, #-20]	; 0xffffffec
   14b1c:	add	r3, r2, r3
   14b20:	mov	r2, #39	; 0x27
   14b24:	strb	r2, [r3]
   14b28:	ldr	r3, [fp, #-20]	; 0xffffffec
   14b2c:	add	r3, r3, #1
   14b30:	str	r3, [fp, #-20]	; 0xffffffec
   14b34:	mov	r3, #0
   14b38:	strb	r3, [fp, #-35]	; 0xffffffdd
   14b3c:	b	15144 <__assert_fail@plt+0x4228>
   14b40:	mov	r3, #1
   14b44:	strb	r3, [fp, #-42]	; 0xffffffd6
   14b48:	b	15150 <__assert_fail@plt+0x4234>
   14b4c:	ldrb	r3, [fp, #-57]	; 0xffffffc7
   14b50:	cmp	r3, #0
   14b54:	beq	14b94 <__assert_fail@plt+0x3c78>
   14b58:	mov	r3, #1
   14b5c:	str	r3, [fp, #-48]	; 0xffffffd0
   14b60:	bl	10e08 <__ctype_b_loc@plt>
   14b64:	mov	r3, r0
   14b68:	ldr	r2, [r3]
   14b6c:	ldrb	r3, [fp, #-38]	; 0xffffffda
   14b70:	lsl	r3, r3, #1
   14b74:	add	r3, r2, r3
   14b78:	ldrh	r3, [r3]
   14b7c:	and	r3, r3, #16384	; 0x4000
   14b80:	cmp	r3, #0
   14b84:	movne	r3, #1
   14b88:	moveq	r3, #0
   14b8c:	strb	r3, [fp, #-49]	; 0xffffffcf
   14b90:	b	14de0 <__assert_fail@plt+0x3ec4>
   14b94:	sub	r3, fp, #76	; 0x4c
   14b98:	mov	r2, #8
   14b9c:	mov	r1, #0
   14ba0:	mov	r0, r3
   14ba4:	bl	10e68 <memset@plt>
   14ba8:	mov	r3, #0
   14bac:	str	r3, [fp, #-48]	; 0xffffffd0
   14bb0:	mov	r3, #1
   14bb4:	strb	r3, [fp, #-49]	; 0xffffffcf
   14bb8:	ldr	r3, [fp, #-100]	; 0xffffff9c
   14bbc:	cmn	r3, #1
   14bc0:	bne	14bd0 <__assert_fail@plt+0x3cb4>
   14bc4:	ldr	r0, [fp, #-96]	; 0xffffffa0
   14bc8:	bl	10e2c <strlen@plt>
   14bcc:	str	r0, [fp, #-100]	; 0xffffff9c
   14bd0:	ldr	r2, [fp, #-16]
   14bd4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14bd8:	add	r3, r2, r3
   14bdc:	ldr	r2, [fp, #-96]	; 0xffffffa0
   14be0:	add	r1, r2, r3
   14be4:	ldr	r2, [fp, #-16]
   14be8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14bec:	add	r3, r2, r3
   14bf0:	ldr	r2, [fp, #-100]	; 0xffffff9c
   14bf4:	sub	r2, r2, r3
   14bf8:	sub	r3, fp, #76	; 0x4c
   14bfc:	sub	r0, fp, #80	; 0x50
   14c00:	bl	18288 <__assert_fail@plt+0x736c>
   14c04:	str	r0, [fp, #-64]	; 0xffffffc0
   14c08:	ldr	r3, [fp, #-64]	; 0xffffffc0
   14c0c:	cmp	r3, #0
   14c10:	beq	14dd4 <__assert_fail@plt+0x3eb8>
   14c14:	ldr	r3, [fp, #-64]	; 0xffffffc0
   14c18:	cmn	r3, #1
   14c1c:	bne	14c2c <__assert_fail@plt+0x3d10>
   14c20:	mov	r3, #0
   14c24:	strb	r3, [fp, #-49]	; 0xffffffcf
   14c28:	b	14de0 <__assert_fail@plt+0x3ec4>
   14c2c:	ldr	r3, [fp, #-64]	; 0xffffffc0
   14c30:	cmn	r3, #2
   14c34:	bne	14c8c <__assert_fail@plt+0x3d70>
   14c38:	mov	r3, #0
   14c3c:	strb	r3, [fp, #-49]	; 0xffffffcf
   14c40:	b	14c50 <__assert_fail@plt+0x3d34>
   14c44:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14c48:	add	r3, r3, #1
   14c4c:	str	r3, [fp, #-48]	; 0xffffffd0
   14c50:	ldr	r2, [fp, #-16]
   14c54:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14c58:	add	r3, r2, r3
   14c5c:	ldr	r2, [fp, #-100]	; 0xffffff9c
   14c60:	cmp	r2, r3
   14c64:	bls	14ddc <__assert_fail@plt+0x3ec0>
   14c68:	ldr	r2, [fp, #-16]
   14c6c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14c70:	add	r3, r2, r3
   14c74:	ldr	r2, [fp, #-96]	; 0xffffffa0
   14c78:	add	r3, r2, r3
   14c7c:	ldrb	r3, [r3]
   14c80:	cmp	r3, #0
   14c84:	bne	14c44 <__assert_fail@plt+0x3d28>
   14c88:	b	14ddc <__assert_fail@plt+0x3ec0>
   14c8c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14c90:	cmp	r3, #0
   14c94:	beq	14d88 <__assert_fail@plt+0x3e6c>
   14c98:	ldr	r3, [fp, #4]
   14c9c:	cmp	r3, #2
   14ca0:	bne	14d88 <__assert_fail@plt+0x3e6c>
   14ca4:	mov	r3, #1
   14ca8:	str	r3, [fp, #-56]	; 0xffffffc8
   14cac:	b	14d78 <__assert_fail@plt+0x3e5c>
   14cb0:	ldr	r2, [fp, #-16]
   14cb4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14cb8:	add	r2, r2, r3
   14cbc:	ldr	r3, [fp, #-56]	; 0xffffffc8
   14cc0:	add	r3, r2, r3
   14cc4:	ldr	r2, [fp, #-96]	; 0xffffffa0
   14cc8:	add	r3, r2, r3
   14ccc:	ldrb	r3, [r3]
   14cd0:	sub	r3, r3, #91	; 0x5b
   14cd4:	cmp	r3, #33	; 0x21
   14cd8:	ldrls	pc, [pc, r3, lsl #2]
   14cdc:	b	14d68 <__assert_fail@plt+0x3e4c>
   14ce0:	andeq	r5, r1, r8, asr #11
   14ce4:	andeq	r5, r1, r8, asr #11
   14ce8:	andeq	r4, r1, r8, ror #26
   14cec:	andeq	r5, r1, r8, asr #11
   14cf0:	andeq	r4, r1, r8, ror #26
   14cf4:	andeq	r5, r1, r8, asr #11
   14cf8:	andeq	r4, r1, r8, ror #26
   14cfc:	andeq	r4, r1, r8, ror #26
   14d00:	andeq	r4, r1, r8, ror #26
   14d04:	andeq	r4, r1, r8, ror #26
   14d08:	andeq	r4, r1, r8, ror #26
   14d0c:	andeq	r4, r1, r8, ror #26
   14d10:	andeq	r4, r1, r8, ror #26
   14d14:	andeq	r4, r1, r8, ror #26
   14d18:	andeq	r4, r1, r8, ror #26
   14d1c:	andeq	r4, r1, r8, ror #26
   14d20:	andeq	r4, r1, r8, ror #26
   14d24:	andeq	r4, r1, r8, ror #26
   14d28:	andeq	r4, r1, r8, ror #26
   14d2c:	andeq	r4, r1, r8, ror #26
   14d30:	andeq	r4, r1, r8, ror #26
   14d34:	andeq	r4, r1, r8, ror #26
   14d38:	andeq	r4, r1, r8, ror #26
   14d3c:	andeq	r4, r1, r8, ror #26
   14d40:	andeq	r4, r1, r8, ror #26
   14d44:	andeq	r4, r1, r8, ror #26
   14d48:	andeq	r4, r1, r8, ror #26
   14d4c:	andeq	r4, r1, r8, ror #26
   14d50:	andeq	r4, r1, r8, ror #26
   14d54:	andeq	r4, r1, r8, ror #26
   14d58:	andeq	r4, r1, r8, ror #26
   14d5c:	andeq	r4, r1, r8, ror #26
   14d60:	andeq	r4, r1, r8, ror #26
   14d64:	andeq	r5, r1, r8, asr #11
   14d68:	nop	{0}
   14d6c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   14d70:	add	r3, r3, #1
   14d74:	str	r3, [fp, #-56]	; 0xffffffc8
   14d78:	ldr	r2, [fp, #-56]	; 0xffffffc8
   14d7c:	ldr	r3, [fp, #-64]	; 0xffffffc0
   14d80:	cmp	r2, r3
   14d84:	bcc	14cb0 <__assert_fail@plt+0x3d94>
   14d88:	ldr	r3, [fp, #-80]	; 0xffffffb0
   14d8c:	mov	r0, r3
   14d90:	bl	10d6c <iswprint@plt>
   14d94:	mov	r3, r0
   14d98:	cmp	r3, #0
   14d9c:	bne	14da8 <__assert_fail@plt+0x3e8c>
   14da0:	mov	r3, #0
   14da4:	strb	r3, [fp, #-49]	; 0xffffffcf
   14da8:	ldr	r2, [fp, #-48]	; 0xffffffd0
   14dac:	ldr	r3, [fp, #-64]	; 0xffffffc0
   14db0:	add	r3, r2, r3
   14db4:	str	r3, [fp, #-48]	; 0xffffffd0
   14db8:	sub	r3, fp, #76	; 0x4c
   14dbc:	mov	r0, r3
   14dc0:	bl	10d24 <mbsinit@plt>
   14dc4:	mov	r3, r0
   14dc8:	cmp	r3, #0
   14dcc:	beq	14bd0 <__assert_fail@plt+0x3cb4>
   14dd0:	b	14de0 <__assert_fail@plt+0x3ec4>
   14dd4:	nop	{0}
   14dd8:	b	14de0 <__assert_fail@plt+0x3ec4>
   14ddc:	nop	{0}
   14de0:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   14de4:	strb	r3, [fp, #-42]	; 0xffffffd6
   14de8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14dec:	cmp	r3, #1
   14df0:	bhi	14e14 <__assert_fail@plt+0x3ef8>
   14df4:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   14df8:	cmp	r3, #0
   14dfc:	beq	1514c <__assert_fail@plt+0x4230>
   14e00:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   14e04:	eor	r3, r3, #1
   14e08:	uxtb	r3, r3
   14e0c:	cmp	r3, #0
   14e10:	beq	1514c <__assert_fail@plt+0x4230>
   14e14:	ldr	r2, [fp, #-16]
   14e18:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14e1c:	add	r3, r2, r3
   14e20:	str	r3, [fp, #-68]	; 0xffffffbc
   14e24:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   14e28:	cmp	r3, #0
   14e2c:	beq	14fe0 <__assert_fail@plt+0x40c4>
   14e30:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   14e34:	eor	r3, r3, #1
   14e38:	uxtb	r3, r3
   14e3c:	cmp	r3, #0
   14e40:	beq	14fe0 <__assert_fail@plt+0x40c4>
   14e44:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14e48:	cmp	r3, #0
   14e4c:	bne	155b4 <__assert_fail@plt+0x4698>
   14e50:	mov	r3, #1
   14e54:	strb	r3, [fp, #-41]	; 0xffffffd7
   14e58:	ldr	r3, [fp, #4]
   14e5c:	cmp	r3, #2
   14e60:	bne	14f10 <__assert_fail@plt+0x3ff4>
   14e64:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   14e68:	eor	r3, r3, #1
   14e6c:	uxtb	r3, r3
   14e70:	cmp	r3, #0
   14e74:	beq	14f10 <__assert_fail@plt+0x3ff4>
   14e78:	ldr	r2, [fp, #-20]	; 0xffffffec
   14e7c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14e80:	cmp	r2, r3
   14e84:	bcs	14e9c <__assert_fail@plt+0x3f80>
   14e88:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14e8c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14e90:	add	r3, r2, r3
   14e94:	mov	r2, #39	; 0x27
   14e98:	strb	r2, [r3]
   14e9c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14ea0:	add	r3, r3, #1
   14ea4:	str	r3, [fp, #-20]	; 0xffffffec
   14ea8:	ldr	r2, [fp, #-20]	; 0xffffffec
   14eac:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14eb0:	cmp	r2, r3
   14eb4:	bcs	14ecc <__assert_fail@plt+0x3fb0>
   14eb8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14ebc:	ldr	r3, [fp, #-20]	; 0xffffffec
   14ec0:	add	r3, r2, r3
   14ec4:	mov	r2, #36	; 0x24
   14ec8:	strb	r2, [r3]
   14ecc:	ldr	r3, [fp, #-20]	; 0xffffffec
   14ed0:	add	r3, r3, #1
   14ed4:	str	r3, [fp, #-20]	; 0xffffffec
   14ed8:	ldr	r2, [fp, #-20]	; 0xffffffec
   14edc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14ee0:	cmp	r2, r3
   14ee4:	bcs	14efc <__assert_fail@plt+0x3fe0>
   14ee8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14eec:	ldr	r3, [fp, #-20]	; 0xffffffec
   14ef0:	add	r3, r2, r3
   14ef4:	mov	r2, #39	; 0x27
   14ef8:	strb	r2, [r3]
   14efc:	ldr	r3, [fp, #-20]	; 0xffffffec
   14f00:	add	r3, r3, #1
   14f04:	str	r3, [fp, #-20]	; 0xffffffec
   14f08:	mov	r3, #1
   14f0c:	strb	r3, [fp, #-35]	; 0xffffffdd
   14f10:	ldr	r2, [fp, #-20]	; 0xffffffec
   14f14:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14f18:	cmp	r2, r3
   14f1c:	bcs	14f34 <__assert_fail@plt+0x4018>
   14f20:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14f24:	ldr	r3, [fp, #-20]	; 0xffffffec
   14f28:	add	r3, r2, r3
   14f2c:	mov	r2, #92	; 0x5c
   14f30:	strb	r2, [r3]
   14f34:	ldr	r3, [fp, #-20]	; 0xffffffec
   14f38:	add	r3, r3, #1
   14f3c:	str	r3, [fp, #-20]	; 0xffffffec
   14f40:	ldr	r2, [fp, #-20]	; 0xffffffec
   14f44:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14f48:	cmp	r2, r3
   14f4c:	bcs	14f74 <__assert_fail@plt+0x4058>
   14f50:	ldrb	r3, [fp, #-38]	; 0xffffffda
   14f54:	lsr	r3, r3, #6
   14f58:	uxtb	r2, r3
   14f5c:	ldr	r1, [fp, #-88]	; 0xffffffa8
   14f60:	ldr	r3, [fp, #-20]	; 0xffffffec
   14f64:	add	r3, r1, r3
   14f68:	add	r2, r2, #48	; 0x30
   14f6c:	uxtb	r2, r2
   14f70:	strb	r2, [r3]
   14f74:	ldr	r3, [fp, #-20]	; 0xffffffec
   14f78:	add	r3, r3, #1
   14f7c:	str	r3, [fp, #-20]	; 0xffffffec
   14f80:	ldr	r2, [fp, #-20]	; 0xffffffec
   14f84:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14f88:	cmp	r2, r3
   14f8c:	bcs	14fbc <__assert_fail@plt+0x40a0>
   14f90:	ldrb	r3, [fp, #-38]	; 0xffffffda
   14f94:	lsr	r3, r3, #3
   14f98:	uxtb	r3, r3
   14f9c:	and	r3, r3, #7
   14fa0:	uxtb	r2, r3
   14fa4:	ldr	r1, [fp, #-88]	; 0xffffffa8
   14fa8:	ldr	r3, [fp, #-20]	; 0xffffffec
   14fac:	add	r3, r1, r3
   14fb0:	add	r2, r2, #48	; 0x30
   14fb4:	uxtb	r2, r2
   14fb8:	strb	r2, [r3]
   14fbc:	ldr	r3, [fp, #-20]	; 0xffffffec
   14fc0:	add	r3, r3, #1
   14fc4:	str	r3, [fp, #-20]	; 0xffffffec
   14fc8:	ldrb	r3, [fp, #-38]	; 0xffffffda
   14fcc:	and	r3, r3, #7
   14fd0:	uxtb	r3, r3
   14fd4:	add	r3, r3, #48	; 0x30
   14fd8:	strb	r3, [fp, #-38]	; 0xffffffda
   14fdc:	b	15024 <__assert_fail@plt+0x4108>
   14fe0:	ldrb	r3, [fp, #-40]	; 0xffffffd8
   14fe4:	cmp	r3, #0
   14fe8:	beq	15024 <__assert_fail@plt+0x4108>
   14fec:	ldr	r2, [fp, #-20]	; 0xffffffec
   14ff0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14ff4:	cmp	r2, r3
   14ff8:	bcs	15010 <__assert_fail@plt+0x40f4>
   14ffc:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15000:	ldr	r3, [fp, #-20]	; 0xffffffec
   15004:	add	r3, r2, r3
   15008:	mov	r2, #92	; 0x5c
   1500c:	strb	r2, [r3]
   15010:	ldr	r3, [fp, #-20]	; 0xffffffec
   15014:	add	r3, r3, #1
   15018:	str	r3, [fp, #-20]	; 0xffffffec
   1501c:	mov	r3, #0
   15020:	strb	r3, [fp, #-40]	; 0xffffffd8
   15024:	ldr	r3, [fp, #-16]
   15028:	add	r3, r3, #1
   1502c:	ldr	r2, [fp, #-68]	; 0xffffffbc
   15030:	cmp	r2, r3
   15034:	bls	15114 <__assert_fail@plt+0x41f8>
   15038:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   1503c:	cmp	r3, #0
   15040:	beq	150c0 <__assert_fail@plt+0x41a4>
   15044:	ldrb	r3, [fp, #-41]	; 0xffffffd7
   15048:	eor	r3, r3, #1
   1504c:	uxtb	r3, r3
   15050:	cmp	r3, #0
   15054:	beq	150c0 <__assert_fail@plt+0x41a4>
   15058:	ldr	r2, [fp, #-20]	; 0xffffffec
   1505c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15060:	cmp	r2, r3
   15064:	bcs	1507c <__assert_fail@plt+0x4160>
   15068:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1506c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15070:	add	r3, r2, r3
   15074:	mov	r2, #39	; 0x27
   15078:	strb	r2, [r3]
   1507c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15080:	add	r3, r3, #1
   15084:	str	r3, [fp, #-20]	; 0xffffffec
   15088:	ldr	r2, [fp, #-20]	; 0xffffffec
   1508c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15090:	cmp	r2, r3
   15094:	bcs	150ac <__assert_fail@plt+0x4190>
   15098:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1509c:	ldr	r3, [fp, #-20]	; 0xffffffec
   150a0:	add	r3, r2, r3
   150a4:	mov	r2, #39	; 0x27
   150a8:	strb	r2, [r3]
   150ac:	ldr	r3, [fp, #-20]	; 0xffffffec
   150b0:	add	r3, r3, #1
   150b4:	str	r3, [fp, #-20]	; 0xffffffec
   150b8:	mov	r3, #0
   150bc:	strb	r3, [fp, #-35]	; 0xffffffdd
   150c0:	ldr	r2, [fp, #-20]	; 0xffffffec
   150c4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   150c8:	cmp	r2, r3
   150cc:	bcs	150e4 <__assert_fail@plt+0x41c8>
   150d0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   150d4:	ldr	r3, [fp, #-20]	; 0xffffffec
   150d8:	add	r3, r2, r3
   150dc:	ldrb	r2, [fp, #-38]	; 0xffffffda
   150e0:	strb	r2, [r3]
   150e4:	ldr	r3, [fp, #-20]	; 0xffffffec
   150e8:	add	r3, r3, #1
   150ec:	str	r3, [fp, #-20]	; 0xffffffec
   150f0:	ldr	r3, [fp, #-16]
   150f4:	add	r3, r3, #1
   150f8:	str	r3, [fp, #-16]
   150fc:	ldr	r2, [fp, #-96]	; 0xffffffa0
   15100:	ldr	r3, [fp, #-16]
   15104:	add	r3, r2, r3
   15108:	ldrb	r3, [r3]
   1510c:	strb	r3, [fp, #-38]	; 0xffffffda
   15110:	b	14e24 <__assert_fail@plt+0x3f08>
   15114:	nop	{0}
   15118:	b	152f0 <__assert_fail@plt+0x43d4>
   1511c:	nop	{0}
   15120:	b	15150 <__assert_fail@plt+0x4234>
   15124:	nop	{0}
   15128:	b	15150 <__assert_fail@plt+0x4234>
   1512c:	nop	{0}
   15130:	b	15150 <__assert_fail@plt+0x4234>
   15134:	nop	{0}
   15138:	b	15150 <__assert_fail@plt+0x4234>
   1513c:	nop	{0}
   15140:	b	15150 <__assert_fail@plt+0x4234>
   15144:	nop	{0}
   15148:	b	15150 <__assert_fail@plt+0x4234>
   1514c:	nop	{0}
   15150:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   15154:	eor	r3, r3, #1
   15158:	uxtb	r3, r3
   1515c:	cmp	r3, #0
   15160:	bne	15170 <__assert_fail@plt+0x4254>
   15164:	ldr	r3, [fp, #4]
   15168:	cmp	r3, #2
   1516c:	bne	15184 <__assert_fail@plt+0x4268>
   15170:	ldrb	r3, [fp, #-34]	; 0xffffffde
   15174:	eor	r3, r3, #1
   15178:	uxtb	r3, r3
   1517c:	cmp	r3, #0
   15180:	bne	151c4 <__assert_fail@plt+0x42a8>
   15184:	ldr	r3, [fp, #12]
   15188:	cmp	r3, #0
   1518c:	beq	151c4 <__assert_fail@plt+0x42a8>
   15190:	ldrb	r3, [fp, #-38]	; 0xffffffda
   15194:	lsr	r3, r3, #5
   15198:	uxtb	r3, r3
   1519c:	lsl	r3, r3, #2
   151a0:	ldr	r2, [fp, #12]
   151a4:	add	r3, r2, r3
   151a8:	ldr	r2, [r3]
   151ac:	ldrb	r3, [fp, #-38]	; 0xffffffda
   151b0:	and	r3, r3, #31
   151b4:	lsr	r3, r2, r3
   151b8:	and	r3, r3, #1
   151bc:	cmp	r3, #0
   151c0:	bne	151d8 <__assert_fail@plt+0x42bc>
   151c4:	ldrb	r3, [fp, #-40]	; 0xffffffd8
   151c8:	eor	r3, r3, #1
   151cc:	uxtb	r3, r3
   151d0:	cmp	r3, #0
   151d4:	bne	152ec <__assert_fail@plt+0x43d0>
   151d8:	nop	{0}
   151dc:	ldrb	r3, [fp, #-34]	; 0xffffffde
   151e0:	cmp	r3, #0
   151e4:	bne	155bc <__assert_fail@plt+0x46a0>
   151e8:	mov	r3, #1
   151ec:	strb	r3, [fp, #-41]	; 0xffffffd7
   151f0:	ldr	r3, [fp, #4]
   151f4:	cmp	r3, #2
   151f8:	bne	152a8 <__assert_fail@plt+0x438c>
   151fc:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   15200:	eor	r3, r3, #1
   15204:	uxtb	r3, r3
   15208:	cmp	r3, #0
   1520c:	beq	152a8 <__assert_fail@plt+0x438c>
   15210:	ldr	r2, [fp, #-20]	; 0xffffffec
   15214:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15218:	cmp	r2, r3
   1521c:	bcs	15234 <__assert_fail@plt+0x4318>
   15220:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15224:	ldr	r3, [fp, #-20]	; 0xffffffec
   15228:	add	r3, r2, r3
   1522c:	mov	r2, #39	; 0x27
   15230:	strb	r2, [r3]
   15234:	ldr	r3, [fp, #-20]	; 0xffffffec
   15238:	add	r3, r3, #1
   1523c:	str	r3, [fp, #-20]	; 0xffffffec
   15240:	ldr	r2, [fp, #-20]	; 0xffffffec
   15244:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15248:	cmp	r2, r3
   1524c:	bcs	15264 <__assert_fail@plt+0x4348>
   15250:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15254:	ldr	r3, [fp, #-20]	; 0xffffffec
   15258:	add	r3, r2, r3
   1525c:	mov	r2, #36	; 0x24
   15260:	strb	r2, [r3]
   15264:	ldr	r3, [fp, #-20]	; 0xffffffec
   15268:	add	r3, r3, #1
   1526c:	str	r3, [fp, #-20]	; 0xffffffec
   15270:	ldr	r2, [fp, #-20]	; 0xffffffec
   15274:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15278:	cmp	r2, r3
   1527c:	bcs	15294 <__assert_fail@plt+0x4378>
   15280:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15284:	ldr	r3, [fp, #-20]	; 0xffffffec
   15288:	add	r3, r2, r3
   1528c:	mov	r2, #39	; 0x27
   15290:	strb	r2, [r3]
   15294:	ldr	r3, [fp, #-20]	; 0xffffffec
   15298:	add	r3, r3, #1
   1529c:	str	r3, [fp, #-20]	; 0xffffffec
   152a0:	mov	r3, #1
   152a4:	strb	r3, [fp, #-35]	; 0xffffffdd
   152a8:	ldr	r2, [fp, #-20]	; 0xffffffec
   152ac:	ldr	r3, [fp, #-92]	; 0xffffffa4
   152b0:	cmp	r2, r3
   152b4:	bcs	152cc <__assert_fail@plt+0x43b0>
   152b8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   152bc:	ldr	r3, [fp, #-20]	; 0xffffffec
   152c0:	add	r3, r2, r3
   152c4:	mov	r2, #92	; 0x5c
   152c8:	strb	r2, [r3]
   152cc:	ldr	r3, [fp, #-20]	; 0xffffffec
   152d0:	add	r3, r3, #1
   152d4:	str	r3, [fp, #-20]	; 0xffffffec
   152d8:	b	152f0 <__assert_fail@plt+0x43d4>
   152dc:	nop	{0}
   152e0:	b	152f0 <__assert_fail@plt+0x43d4>
   152e4:	nop	{0}
   152e8:	b	152f0 <__assert_fail@plt+0x43d4>
   152ec:	nop	{0}
   152f0:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   152f4:	cmp	r3, #0
   152f8:	beq	15378 <__assert_fail@plt+0x445c>
   152fc:	ldrb	r3, [fp, #-41]	; 0xffffffd7
   15300:	eor	r3, r3, #1
   15304:	uxtb	r3, r3
   15308:	cmp	r3, #0
   1530c:	beq	15378 <__assert_fail@plt+0x445c>
   15310:	ldr	r2, [fp, #-20]	; 0xffffffec
   15314:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15318:	cmp	r2, r3
   1531c:	bcs	15334 <__assert_fail@plt+0x4418>
   15320:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15324:	ldr	r3, [fp, #-20]	; 0xffffffec
   15328:	add	r3, r2, r3
   1532c:	mov	r2, #39	; 0x27
   15330:	strb	r2, [r3]
   15334:	ldr	r3, [fp, #-20]	; 0xffffffec
   15338:	add	r3, r3, #1
   1533c:	str	r3, [fp, #-20]	; 0xffffffec
   15340:	ldr	r2, [fp, #-20]	; 0xffffffec
   15344:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15348:	cmp	r2, r3
   1534c:	bcs	15364 <__assert_fail@plt+0x4448>
   15350:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15354:	ldr	r3, [fp, #-20]	; 0xffffffec
   15358:	add	r3, r2, r3
   1535c:	mov	r2, #39	; 0x27
   15360:	strb	r2, [r3]
   15364:	ldr	r3, [fp, #-20]	; 0xffffffec
   15368:	add	r3, r3, #1
   1536c:	str	r3, [fp, #-20]	; 0xffffffec
   15370:	mov	r3, #0
   15374:	strb	r3, [fp, #-35]	; 0xffffffdd
   15378:	ldr	r2, [fp, #-20]	; 0xffffffec
   1537c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15380:	cmp	r2, r3
   15384:	bcs	1539c <__assert_fail@plt+0x4480>
   15388:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1538c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15390:	add	r3, r2, r3
   15394:	ldrb	r2, [fp, #-38]	; 0xffffffda
   15398:	strb	r2, [r3]
   1539c:	ldr	r3, [fp, #-20]	; 0xffffffec
   153a0:	add	r3, r3, #1
   153a4:	str	r3, [fp, #-20]	; 0xffffffec
   153a8:	ldrb	r3, [fp, #-42]	; 0xffffffd6
   153ac:	eor	r3, r3, #1
   153b0:	uxtb	r3, r3
   153b4:	cmp	r3, #0
   153b8:	beq	153c4 <__assert_fail@plt+0x44a8>
   153bc:	mov	r3, #0
   153c0:	strb	r3, [fp, #-37]	; 0xffffffdb
   153c4:	ldr	r3, [fp, #-16]
   153c8:	add	r3, r3, #1
   153cc:	str	r3, [fp, #-16]
   153d0:	ldr	r3, [fp, #-100]	; 0xffffff9c
   153d4:	cmn	r3, #1
   153d8:	bne	15400 <__assert_fail@plt+0x44e4>
   153dc:	ldr	r2, [fp, #-96]	; 0xffffffa0
   153e0:	ldr	r3, [fp, #-16]
   153e4:	add	r3, r2, r3
   153e8:	ldrb	r3, [r3]
   153ec:	cmp	r3, #0
   153f0:	movne	r3, #1
   153f4:	moveq	r3, #0
   153f8:	uxtb	r3, r3
   153fc:	b	15418 <__assert_fail@plt+0x44fc>
   15400:	ldr	r2, [fp, #-16]
   15404:	ldr	r3, [fp, #-100]	; 0xffffff9c
   15408:	cmp	r2, r3
   1540c:	movne	r3, #1
   15410:	moveq	r3, #0
   15414:	uxtb	r3, r3
   15418:	cmp	r3, #0
   1541c:	bne	14238 <__assert_fail@plt+0x331c>
   15420:	ldr	r3, [fp, #-20]	; 0xffffffec
   15424:	cmp	r3, #0
   15428:	bne	15444 <__assert_fail@plt+0x4528>
   1542c:	ldr	r3, [fp, #4]
   15430:	cmp	r3, #2
   15434:	bne	15444 <__assert_fail@plt+0x4528>
   15438:	ldrb	r3, [fp, #-34]	; 0xffffffde
   1543c:	cmp	r3, #0
   15440:	bne	155c4 <__assert_fail@plt+0x46a8>
   15444:	ldr	r3, [fp, #4]
   15448:	cmp	r3, #2
   1544c:	bne	154ec <__assert_fail@plt+0x45d0>
   15450:	ldrb	r3, [fp, #-34]	; 0xffffffde
   15454:	eor	r3, r3, #1
   15458:	uxtb	r3, r3
   1545c:	cmp	r3, #0
   15460:	beq	154ec <__assert_fail@plt+0x45d0>
   15464:	ldrb	r3, [fp, #-36]	; 0xffffffdc
   15468:	cmp	r3, #0
   1546c:	beq	154ec <__assert_fail@plt+0x45d0>
   15470:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   15474:	cmp	r3, #0
   15478:	beq	154c0 <__assert_fail@plt+0x45a4>
   1547c:	ldr	r3, [fp, #20]
   15480:	str	r3, [sp, #16]
   15484:	ldr	r3, [fp, #16]
   15488:	str	r3, [sp, #12]
   1548c:	ldr	r3, [fp, #12]
   15490:	str	r3, [sp, #8]
   15494:	ldr	r3, [fp, #8]
   15498:	str	r3, [sp, #4]
   1549c:	mov	r3, #5
   154a0:	str	r3, [sp]
   154a4:	ldr	r3, [fp, #-100]	; 0xffffff9c
   154a8:	ldr	r2, [fp, #-96]	; 0xffffffa0
   154ac:	ldr	r1, [fp, #-24]	; 0xffffffe8
   154b0:	ldr	r0, [fp, #-88]	; 0xffffffa8
   154b4:	bl	13f70 <__assert_fail@plt+0x3054>
   154b8:	mov	r3, r0
   154bc:	b	1562c <__assert_fail@plt+0x4710>
   154c0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   154c4:	cmp	r3, #0
   154c8:	bne	154ec <__assert_fail@plt+0x45d0>
   154cc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   154d0:	cmp	r3, #0
   154d4:	beq	154ec <__assert_fail@plt+0x45d0>
   154d8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   154dc:	str	r3, [fp, #-92]	; 0xffffffa4
   154e0:	mov	r3, #0
   154e4:	str	r3, [fp, #-20]	; 0xffffffec
   154e8:	b	14004 <__assert_fail@plt+0x30e8>
   154ec:	ldr	r3, [fp, #-28]	; 0xffffffe4
   154f0:	cmp	r3, #0
   154f4:	beq	15560 <__assert_fail@plt+0x4644>
   154f8:	ldrb	r3, [fp, #-34]	; 0xffffffde
   154fc:	eor	r3, r3, #1
   15500:	uxtb	r3, r3
   15504:	cmp	r3, #0
   15508:	beq	15560 <__assert_fail@plt+0x4644>
   1550c:	b	15550 <__assert_fail@plt+0x4634>
   15510:	ldr	r2, [fp, #-20]	; 0xffffffec
   15514:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15518:	cmp	r2, r3
   1551c:	bcs	15538 <__assert_fail@plt+0x461c>
   15520:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15524:	ldr	r3, [fp, #-20]	; 0xffffffec
   15528:	add	r3, r2, r3
   1552c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   15530:	ldrb	r2, [r2]
   15534:	strb	r2, [r3]
   15538:	ldr	r3, [fp, #-20]	; 0xffffffec
   1553c:	add	r3, r3, #1
   15540:	str	r3, [fp, #-20]	; 0xffffffec
   15544:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15548:	add	r3, r3, #1
   1554c:	str	r3, [fp, #-28]	; 0xffffffe4
   15550:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15554:	ldrb	r3, [r3]
   15558:	cmp	r3, #0
   1555c:	bne	15510 <__assert_fail@plt+0x45f4>
   15560:	ldr	r2, [fp, #-20]	; 0xffffffec
   15564:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15568:	cmp	r2, r3
   1556c:	bcs	15584 <__assert_fail@plt+0x4668>
   15570:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15574:	ldr	r3, [fp, #-20]	; 0xffffffec
   15578:	add	r3, r2, r3
   1557c:	mov	r2, #0
   15580:	strb	r2, [r3]
   15584:	ldr	r3, [fp, #-20]	; 0xffffffec
   15588:	b	1562c <__assert_fail@plt+0x4710>
   1558c:	nop	{0}
   15590:	b	155c8 <__assert_fail@plt+0x46ac>
   15594:	nop	{0}
   15598:	b	155c8 <__assert_fail@plt+0x46ac>
   1559c:	nop	{0}
   155a0:	b	155c8 <__assert_fail@plt+0x46ac>
   155a4:	nop	{0}
   155a8:	b	155c8 <__assert_fail@plt+0x46ac>
   155ac:	nop	{0}
   155b0:	b	155c8 <__assert_fail@plt+0x46ac>
   155b4:	nop	{0}
   155b8:	b	155c8 <__assert_fail@plt+0x46ac>
   155bc:	nop	{0}
   155c0:	b	155c8 <__assert_fail@plt+0x46ac>
   155c4:	nop	{0}
   155c8:	ldr	r3, [fp, #4]
   155cc:	cmp	r3, #2
   155d0:	bne	155e8 <__assert_fail@plt+0x46cc>
   155d4:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   155d8:	cmp	r3, #0
   155dc:	beq	155e8 <__assert_fail@plt+0x46cc>
   155e0:	mov	r3, #4
   155e4:	str	r3, [fp, #4]
   155e8:	ldr	r3, [fp, #8]
   155ec:	bic	r3, r3, #2
   155f0:	ldr	r2, [fp, #20]
   155f4:	str	r2, [sp, #16]
   155f8:	ldr	r2, [fp, #16]
   155fc:	str	r2, [sp, #12]
   15600:	mov	r2, #0
   15604:	str	r2, [sp, #8]
   15608:	str	r3, [sp, #4]
   1560c:	ldr	r3, [fp, #4]
   15610:	str	r3, [sp]
   15614:	ldr	r3, [fp, #-100]	; 0xffffff9c
   15618:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1561c:	ldr	r1, [fp, #-92]	; 0xffffffa4
   15620:	ldr	r0, [fp, #-88]	; 0xffffffa8
   15624:	bl	13f70 <__assert_fail@plt+0x3054>
   15628:	mov	r3, r0
   1562c:	mov	r0, r3
   15630:	sub	sp, fp, #8
   15634:	ldr	r4, [sp]
   15638:	ldr	fp, [sp, #4]
   1563c:	add	sp, sp, #8
   15640:	pop	{pc}		; (ldr pc, [sp], #4)
   15644:	str	fp, [sp, #-8]!
   15648:	str	lr, [sp, #4]
   1564c:	add	fp, sp, #4
   15650:	sub	sp, sp, #56	; 0x38
   15654:	str	r0, [fp, #-24]	; 0xffffffe8
   15658:	str	r1, [fp, #-28]	; 0xffffffe4
   1565c:	str	r2, [fp, #-32]	; 0xffffffe0
   15660:	str	r3, [fp, #-36]	; 0xffffffdc
   15664:	ldr	r3, [fp, #4]
   15668:	cmp	r3, #0
   1566c:	beq	15678 <__assert_fail@plt+0x475c>
   15670:	ldr	r3, [fp, #4]
   15674:	b	15680 <__assert_fail@plt+0x4764>
   15678:	movw	r3, #41324	; 0xa16c
   1567c:	movt	r3, #2
   15680:	str	r3, [fp, #-8]
   15684:	bl	10e50 <__errno_location@plt>
   15688:	mov	r3, r0
   1568c:	ldr	r3, [r3]
   15690:	str	r3, [fp, #-12]
   15694:	ldr	r3, [fp, #-8]
   15698:	ldr	r3, [r3]
   1569c:	ldr	r2, [fp, #-8]
   156a0:	ldr	r2, [r2, #4]
   156a4:	ldr	r1, [fp, #-8]
   156a8:	add	r1, r1, #8
   156ac:	ldr	r0, [fp, #-8]
   156b0:	ldr	r0, [r0, #40]	; 0x28
   156b4:	ldr	ip, [fp, #-8]
   156b8:	ldr	ip, [ip, #44]	; 0x2c
   156bc:	str	ip, [sp, #16]
   156c0:	str	r0, [sp, #12]
   156c4:	str	r1, [sp, #8]
   156c8:	str	r2, [sp, #4]
   156cc:	str	r3, [sp]
   156d0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   156d4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   156d8:	ldr	r1, [fp, #-28]	; 0xffffffe4
   156dc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   156e0:	bl	13f70 <__assert_fail@plt+0x3054>
   156e4:	str	r0, [fp, #-16]
   156e8:	bl	10e50 <__errno_location@plt>
   156ec:	mov	r2, r0
   156f0:	ldr	r3, [fp, #-12]
   156f4:	str	r3, [r2]
   156f8:	ldr	r3, [fp, #-16]
   156fc:	mov	r0, r3
   15700:	sub	sp, fp, #4
   15704:	ldr	fp, [sp]
   15708:	add	sp, sp, #4
   1570c:	pop	{pc}		; (ldr pc, [sp], #4)
   15710:	str	fp, [sp, #-8]!
   15714:	str	lr, [sp, #4]
   15718:	add	fp, sp, #4
   1571c:	sub	sp, sp, #16
   15720:	str	r0, [fp, #-8]
   15724:	str	r1, [fp, #-12]
   15728:	str	r2, [fp, #-16]
   1572c:	ldr	r3, [fp, #-16]
   15730:	mov	r2, #0
   15734:	ldr	r1, [fp, #-12]
   15738:	ldr	r0, [fp, #-8]
   1573c:	bl	15758 <__assert_fail@plt+0x483c>
   15740:	mov	r3, r0
   15744:	mov	r0, r3
   15748:	sub	sp, fp, #4
   1574c:	ldr	fp, [sp]
   15750:	add	sp, sp, #4
   15754:	pop	{pc}		; (ldr pc, [sp], #4)
   15758:	str	fp, [sp, #-8]!
   1575c:	str	lr, [sp, #4]
   15760:	add	fp, sp, #4
   15764:	sub	sp, sp, #64	; 0x40
   15768:	str	r0, [fp, #-32]	; 0xffffffe0
   1576c:	str	r1, [fp, #-36]	; 0xffffffdc
   15770:	str	r2, [fp, #-40]	; 0xffffffd8
   15774:	str	r3, [fp, #-44]	; 0xffffffd4
   15778:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1577c:	cmp	r3, #0
   15780:	beq	1578c <__assert_fail@plt+0x4870>
   15784:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15788:	b	15794 <__assert_fail@plt+0x4878>
   1578c:	movw	r3, #41324	; 0xa16c
   15790:	movt	r3, #2
   15794:	str	r3, [fp, #-8]
   15798:	bl	10e50 <__errno_location@plt>
   1579c:	mov	r3, r0
   157a0:	ldr	r3, [r3]
   157a4:	str	r3, [fp, #-12]
   157a8:	ldr	r3, [fp, #-8]
   157ac:	ldr	r3, [r3, #4]
   157b0:	ldr	r2, [fp, #-40]	; 0xffffffd8
   157b4:	cmp	r2, #0
   157b8:	moveq	r2, #1
   157bc:	movne	r2, #0
   157c0:	uxtb	r2, r2
   157c4:	orr	r3, r3, r2
   157c8:	str	r3, [fp, #-16]
   157cc:	ldr	r3, [fp, #-8]
   157d0:	ldr	r3, [r3]
   157d4:	ldr	r2, [fp, #-8]
   157d8:	add	r2, r2, #8
   157dc:	ldr	r1, [fp, #-8]
   157e0:	ldr	r1, [r1, #40]	; 0x28
   157e4:	ldr	r0, [fp, #-8]
   157e8:	ldr	r0, [r0, #44]	; 0x2c
   157ec:	str	r0, [sp, #16]
   157f0:	str	r1, [sp, #12]
   157f4:	str	r2, [sp, #8]
   157f8:	ldr	r2, [fp, #-16]
   157fc:	str	r2, [sp, #4]
   15800:	str	r3, [sp]
   15804:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15808:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1580c:	mov	r1, #0
   15810:	mov	r0, #0
   15814:	bl	13f70 <__assert_fail@plt+0x3054>
   15818:	mov	r3, r0
   1581c:	add	r3, r3, #1
   15820:	str	r3, [fp, #-20]	; 0xffffffec
   15824:	ldr	r0, [fp, #-20]	; 0xffffffec
   15828:	bl	16d0c <__assert_fail@plt+0x5df0>
   1582c:	mov	r3, r0
   15830:	str	r3, [fp, #-24]	; 0xffffffe8
   15834:	ldr	r3, [fp, #-8]
   15838:	ldr	r3, [r3]
   1583c:	ldr	r2, [fp, #-8]
   15840:	add	r2, r2, #8
   15844:	ldr	r1, [fp, #-8]
   15848:	ldr	r1, [r1, #40]	; 0x28
   1584c:	ldr	r0, [fp, #-8]
   15850:	ldr	r0, [r0, #44]	; 0x2c
   15854:	str	r0, [sp, #16]
   15858:	str	r1, [sp, #12]
   1585c:	str	r2, [sp, #8]
   15860:	ldr	r2, [fp, #-16]
   15864:	str	r2, [sp, #4]
   15868:	str	r3, [sp]
   1586c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15870:	ldr	r2, [fp, #-32]	; 0xffffffe0
   15874:	ldr	r1, [fp, #-20]	; 0xffffffec
   15878:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1587c:	bl	13f70 <__assert_fail@plt+0x3054>
   15880:	bl	10e50 <__errno_location@plt>
   15884:	mov	r2, r0
   15888:	ldr	r3, [fp, #-12]
   1588c:	str	r3, [r2]
   15890:	ldr	r3, [fp, #-40]	; 0xffffffd8
   15894:	cmp	r3, #0
   15898:	beq	158ac <__assert_fail@plt+0x4990>
   1589c:	ldr	r3, [fp, #-20]	; 0xffffffec
   158a0:	sub	r2, r3, #1
   158a4:	ldr	r3, [fp, #-40]	; 0xffffffd8
   158a8:	str	r2, [r3]
   158ac:	ldr	r3, [fp, #-24]	; 0xffffffe8
   158b0:	mov	r0, r3
   158b4:	sub	sp, fp, #4
   158b8:	ldr	fp, [sp]
   158bc:	add	sp, sp, #4
   158c0:	pop	{pc}		; (ldr pc, [sp], #4)
   158c4:	str	fp, [sp, #-8]!
   158c8:	str	lr, [sp, #4]
   158cc:	add	fp, sp, #4
   158d0:	sub	sp, sp, #8
   158d4:	movw	r3, #41216	; 0xa100
   158d8:	movt	r3, #2
   158dc:	ldr	r3, [r3]
   158e0:	str	r3, [fp, #-12]
   158e4:	mov	r3, #1
   158e8:	str	r3, [fp, #-8]
   158ec:	b	15918 <__assert_fail@plt+0x49fc>
   158f0:	ldr	r3, [fp, #-8]
   158f4:	lsl	r3, r3, #3
   158f8:	ldr	r2, [fp, #-12]
   158fc:	add	r3, r2, r3
   15900:	ldr	r3, [r3, #4]
   15904:	mov	r0, r3
   15908:	bl	136f0 <__assert_fail@plt+0x27d4>
   1590c:	ldr	r3, [fp, #-8]
   15910:	add	r3, r3, #1
   15914:	str	r3, [fp, #-8]
   15918:	movw	r3, #41204	; 0xa0f4
   1591c:	movt	r3, #2
   15920:	ldr	r3, [r3]
   15924:	ldr	r2, [fp, #-8]
   15928:	cmp	r2, r3
   1592c:	blt	158f0 <__assert_fail@plt+0x49d4>
   15930:	ldr	r3, [fp, #-12]
   15934:	ldr	r2, [r3, #4]
   15938:	movw	r3, #41372	; 0xa19c
   1593c:	movt	r3, #2
   15940:	cmp	r2, r3
   15944:	beq	1597c <__assert_fail@plt+0x4a60>
   15948:	ldr	r3, [fp, #-12]
   1594c:	ldr	r3, [r3, #4]
   15950:	mov	r0, r3
   15954:	bl	136f0 <__assert_fail@plt+0x27d4>
   15958:	movw	r3, #41208	; 0xa0f8
   1595c:	movt	r3, #2
   15960:	mov	r2, #256	; 0x100
   15964:	str	r2, [r3]
   15968:	movw	r3, #41208	; 0xa0f8
   1596c:	movt	r3, #2
   15970:	movw	r2, #41372	; 0xa19c
   15974:	movt	r2, #2
   15978:	str	r2, [r3, #4]
   1597c:	ldr	r2, [fp, #-12]
   15980:	movw	r3, #41208	; 0xa0f8
   15984:	movt	r3, #2
   15988:	cmp	r2, r3
   1598c:	beq	159ac <__assert_fail@plt+0x4a90>
   15990:	ldr	r0, [fp, #-12]
   15994:	bl	136f0 <__assert_fail@plt+0x27d4>
   15998:	movw	r3, #41216	; 0xa100
   1599c:	movt	r3, #2
   159a0:	movw	r2, #41208	; 0xa0f8
   159a4:	movt	r2, #2
   159a8:	str	r2, [r3]
   159ac:	movw	r3, #41204	; 0xa0f4
   159b0:	movt	r3, #2
   159b4:	mov	r2, #1
   159b8:	str	r2, [r3]
   159bc:	nop	{0}
   159c0:	sub	sp, fp, #4
   159c4:	ldr	fp, [sp]
   159c8:	add	sp, sp, #4
   159cc:	pop	{pc}		; (ldr pc, [sp], #4)
   159d0:	str	fp, [sp, #-8]!
   159d4:	str	lr, [sp, #4]
   159d8:	add	fp, sp, #4
   159dc:	sub	sp, sp, #80	; 0x50
   159e0:	str	r0, [fp, #-48]	; 0xffffffd0
   159e4:	str	r1, [fp, #-52]	; 0xffffffcc
   159e8:	str	r2, [fp, #-56]	; 0xffffffc8
   159ec:	str	r3, [fp, #-60]	; 0xffffffc4
   159f0:	bl	10e50 <__errno_location@plt>
   159f4:	mov	r3, r0
   159f8:	ldr	r3, [r3]
   159fc:	str	r3, [fp, #-16]
   15a00:	movw	r3, #41216	; 0xa100
   15a04:	movt	r3, #2
   15a08:	ldr	r3, [r3]
   15a0c:	str	r3, [fp, #-8]
   15a10:	mvn	r3, #-2147483648	; 0x80000000
   15a14:	str	r3, [fp, #-20]	; 0xffffffec
   15a18:	ldr	r3, [fp, #-48]	; 0xffffffd0
   15a1c:	cmp	r3, #0
   15a20:	blt	15a34 <__assert_fail@plt+0x4b18>
   15a24:	ldr	r2, [fp, #-48]	; 0xffffffd0
   15a28:	ldr	r3, [fp, #-20]	; 0xffffffec
   15a2c:	cmp	r2, r3
   15a30:	blt	15a38 <__assert_fail@plt+0x4b1c>
   15a34:	bl	10f04 <abort@plt>
   15a38:	movw	r3, #41204	; 0xa0f4
   15a3c:	movt	r3, #2
   15a40:	ldr	r3, [r3]
   15a44:	ldr	r2, [fp, #-48]	; 0xffffffd0
   15a48:	cmp	r2, r3
   15a4c:	blt	15b44 <__assert_fail@plt+0x4c28>
   15a50:	ldr	r2, [fp, #-8]
   15a54:	movw	r3, #41208	; 0xa0f8
   15a58:	movt	r3, #2
   15a5c:	cmp	r2, r3
   15a60:	moveq	r3, #1
   15a64:	movne	r3, #0
   15a68:	strb	r3, [fp, #-21]	; 0xffffffeb
   15a6c:	movw	r3, #41204	; 0xa0f4
   15a70:	movt	r3, #2
   15a74:	ldr	r3, [r3]
   15a78:	str	r3, [fp, #-40]	; 0xffffffd8
   15a7c:	ldrb	r3, [fp, #-21]	; 0xffffffeb
   15a80:	cmp	r3, #0
   15a84:	beq	15a90 <__assert_fail@plt+0x4b74>
   15a88:	mov	r0, #0
   15a8c:	b	15a94 <__assert_fail@plt+0x4b78>
   15a90:	ldr	r0, [fp, #-8]
   15a94:	movw	r3, #41204	; 0xa0f4
   15a98:	movt	r3, #2
   15a9c:	ldr	r3, [r3]
   15aa0:	ldr	r2, [fp, #-48]	; 0xffffffd0
   15aa4:	sub	r3, r2, r3
   15aa8:	add	r2, r3, #1
   15aac:	sub	r1, fp, #40	; 0x28
   15ab0:	mov	r3, #8
   15ab4:	str	r3, [sp]
   15ab8:	ldr	r3, [fp, #-20]	; 0xffffffec
   15abc:	bl	1706c <__assert_fail@plt+0x6150>
   15ac0:	str	r0, [fp, #-8]
   15ac4:	movw	r3, #41216	; 0xa100
   15ac8:	movt	r3, #2
   15acc:	ldr	r2, [fp, #-8]
   15ad0:	str	r2, [r3]
   15ad4:	ldrb	r3, [fp, #-21]	; 0xffffffeb
   15ad8:	cmp	r3, #0
   15adc:	beq	15af8 <__assert_fail@plt+0x4bdc>
   15ae0:	ldr	r2, [fp, #-8]
   15ae4:	movw	r3, #41208	; 0xa0f8
   15ae8:	movt	r3, #2
   15aec:	mov	r1, r2
   15af0:	ldrd	r2, [r3]
   15af4:	strd	r2, [r1]
   15af8:	movw	r3, #41204	; 0xa0f4
   15afc:	movt	r3, #2
   15b00:	ldr	r3, [r3]
   15b04:	lsl	r3, r3, #3
   15b08:	ldr	r2, [fp, #-8]
   15b0c:	add	r0, r2, r3
   15b10:	ldr	r2, [fp, #-40]	; 0xffffffd8
   15b14:	movw	r3, #41204	; 0xa0f4
   15b18:	movt	r3, #2
   15b1c:	ldr	r3, [r3]
   15b20:	sub	r3, r2, r3
   15b24:	lsl	r3, r3, #3
   15b28:	mov	r2, r3
   15b2c:	mov	r1, #0
   15b30:	bl	10e68 <memset@plt>
   15b34:	ldr	r2, [fp, #-40]	; 0xffffffd8
   15b38:	movw	r3, #41204	; 0xa0f4
   15b3c:	movt	r3, #2
   15b40:	str	r2, [r3]
   15b44:	ldr	r3, [fp, #-48]	; 0xffffffd0
   15b48:	lsl	r3, r3, #3
   15b4c:	ldr	r2, [fp, #-8]
   15b50:	add	r3, r2, r3
   15b54:	ldr	r3, [r3]
   15b58:	str	r3, [fp, #-28]	; 0xffffffe4
   15b5c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   15b60:	lsl	r3, r3, #3
   15b64:	ldr	r2, [fp, #-8]
   15b68:	add	r3, r2, r3
   15b6c:	ldr	r3, [r3, #4]
   15b70:	str	r3, [fp, #-12]
   15b74:	ldr	r3, [fp, #-60]	; 0xffffffc4
   15b78:	ldr	r3, [r3, #4]
   15b7c:	orr	r3, r3, #1
   15b80:	str	r3, [fp, #-32]	; 0xffffffe0
   15b84:	ldr	r3, [fp, #-60]	; 0xffffffc4
   15b88:	ldr	r3, [r3]
   15b8c:	ldr	r2, [fp, #-60]	; 0xffffffc4
   15b90:	add	r2, r2, #8
   15b94:	ldr	r1, [fp, #-60]	; 0xffffffc4
   15b98:	ldr	r1, [r1, #40]	; 0x28
   15b9c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   15ba0:	ldr	r0, [r0, #44]	; 0x2c
   15ba4:	str	r0, [sp, #16]
   15ba8:	str	r1, [sp, #12]
   15bac:	str	r2, [sp, #8]
   15bb0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   15bb4:	str	r2, [sp, #4]
   15bb8:	str	r3, [sp]
   15bbc:	ldr	r3, [fp, #-56]	; 0xffffffc8
   15bc0:	ldr	r2, [fp, #-52]	; 0xffffffcc
   15bc4:	ldr	r1, [fp, #-28]	; 0xffffffe4
   15bc8:	ldr	r0, [fp, #-12]
   15bcc:	bl	13f70 <__assert_fail@plt+0x3054>
   15bd0:	str	r0, [fp, #-36]	; 0xffffffdc
   15bd4:	ldr	r2, [fp, #-28]	; 0xffffffe4
   15bd8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15bdc:	cmp	r2, r3
   15be0:	bhi	15c98 <__assert_fail@plt+0x4d7c>
   15be4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15be8:	add	r3, r3, #1
   15bec:	str	r3, [fp, #-28]	; 0xffffffe4
   15bf0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   15bf4:	lsl	r3, r3, #3
   15bf8:	ldr	r2, [fp, #-8]
   15bfc:	add	r3, r2, r3
   15c00:	ldr	r2, [fp, #-28]	; 0xffffffe4
   15c04:	str	r2, [r3]
   15c08:	ldr	r2, [fp, #-12]
   15c0c:	movw	r3, #41372	; 0xa19c
   15c10:	movt	r3, #2
   15c14:	cmp	r2, r3
   15c18:	beq	15c24 <__assert_fail@plt+0x4d08>
   15c1c:	ldr	r0, [fp, #-12]
   15c20:	bl	136f0 <__assert_fail@plt+0x27d4>
   15c24:	ldr	r0, [fp, #-28]	; 0xffffffe4
   15c28:	bl	16d0c <__assert_fail@plt+0x5df0>
   15c2c:	mov	r3, r0
   15c30:	str	r3, [fp, #-12]
   15c34:	ldr	r3, [fp, #-48]	; 0xffffffd0
   15c38:	lsl	r3, r3, #3
   15c3c:	ldr	r2, [fp, #-8]
   15c40:	add	r3, r2, r3
   15c44:	ldr	r2, [fp, #-12]
   15c48:	str	r2, [r3, #4]
   15c4c:	ldr	r3, [fp, #-60]	; 0xffffffc4
   15c50:	ldr	r3, [r3]
   15c54:	ldr	r2, [fp, #-60]	; 0xffffffc4
   15c58:	add	r2, r2, #8
   15c5c:	ldr	r1, [fp, #-60]	; 0xffffffc4
   15c60:	ldr	r1, [r1, #40]	; 0x28
   15c64:	ldr	r0, [fp, #-60]	; 0xffffffc4
   15c68:	ldr	r0, [r0, #44]	; 0x2c
   15c6c:	str	r0, [sp, #16]
   15c70:	str	r1, [sp, #12]
   15c74:	str	r2, [sp, #8]
   15c78:	ldr	r2, [fp, #-32]	; 0xffffffe0
   15c7c:	str	r2, [sp, #4]
   15c80:	str	r3, [sp]
   15c84:	ldr	r3, [fp, #-56]	; 0xffffffc8
   15c88:	ldr	r2, [fp, #-52]	; 0xffffffcc
   15c8c:	ldr	r1, [fp, #-28]	; 0xffffffe4
   15c90:	ldr	r0, [fp, #-12]
   15c94:	bl	13f70 <__assert_fail@plt+0x3054>
   15c98:	bl	10e50 <__errno_location@plt>
   15c9c:	mov	r2, r0
   15ca0:	ldr	r3, [fp, #-16]
   15ca4:	str	r3, [r2]
   15ca8:	ldr	r3, [fp, #-12]
   15cac:	mov	r0, r3
   15cb0:	sub	sp, fp, #4
   15cb4:	ldr	fp, [sp]
   15cb8:	add	sp, sp, #4
   15cbc:	pop	{pc}		; (ldr pc, [sp], #4)
   15cc0:	str	fp, [sp, #-8]!
   15cc4:	str	lr, [sp, #4]
   15cc8:	add	fp, sp, #4
   15ccc:	sub	sp, sp, #8
   15cd0:	str	r0, [fp, #-8]
   15cd4:	str	r1, [fp, #-12]
   15cd8:	movw	r3, #41324	; 0xa16c
   15cdc:	movt	r3, #2
   15ce0:	mvn	r2, #0
   15ce4:	ldr	r1, [fp, #-12]
   15ce8:	ldr	r0, [fp, #-8]
   15cec:	bl	159d0 <__assert_fail@plt+0x4ab4>
   15cf0:	mov	r3, r0
   15cf4:	mov	r0, r3
   15cf8:	sub	sp, fp, #4
   15cfc:	ldr	fp, [sp]
   15d00:	add	sp, sp, #4
   15d04:	pop	{pc}		; (ldr pc, [sp], #4)
   15d08:	str	fp, [sp, #-8]!
   15d0c:	str	lr, [sp, #4]
   15d10:	add	fp, sp, #4
   15d14:	sub	sp, sp, #16
   15d18:	str	r0, [fp, #-8]
   15d1c:	str	r1, [fp, #-12]
   15d20:	str	r2, [fp, #-16]
   15d24:	movw	r3, #41324	; 0xa16c
   15d28:	movt	r3, #2
   15d2c:	ldr	r2, [fp, #-16]
   15d30:	ldr	r1, [fp, #-12]
   15d34:	ldr	r0, [fp, #-8]
   15d38:	bl	159d0 <__assert_fail@plt+0x4ab4>
   15d3c:	mov	r3, r0
   15d40:	mov	r0, r3
   15d44:	sub	sp, fp, #4
   15d48:	ldr	fp, [sp]
   15d4c:	add	sp, sp, #4
   15d50:	pop	{pc}		; (ldr pc, [sp], #4)
   15d54:	str	fp, [sp, #-8]!
   15d58:	str	lr, [sp, #4]
   15d5c:	add	fp, sp, #4
   15d60:	sub	sp, sp, #8
   15d64:	str	r0, [fp, #-8]
   15d68:	ldr	r1, [fp, #-8]
   15d6c:	mov	r0, #0
   15d70:	bl	15cc0 <__assert_fail@plt+0x4da4>
   15d74:	mov	r3, r0
   15d78:	mov	r0, r3
   15d7c:	sub	sp, fp, #4
   15d80:	ldr	fp, [sp]
   15d84:	add	sp, sp, #4
   15d88:	pop	{pc}		; (ldr pc, [sp], #4)
   15d8c:	str	fp, [sp, #-8]!
   15d90:	str	lr, [sp, #4]
   15d94:	add	fp, sp, #4
   15d98:	sub	sp, sp, #8
   15d9c:	str	r0, [fp, #-8]
   15da0:	str	r1, [fp, #-12]
   15da4:	ldr	r2, [fp, #-12]
   15da8:	ldr	r1, [fp, #-8]
   15dac:	mov	r0, #0
   15db0:	bl	15d08 <__assert_fail@plt+0x4dec>
   15db4:	mov	r3, r0
   15db8:	mov	r0, r3
   15dbc:	sub	sp, fp, #4
   15dc0:	ldr	fp, [sp]
   15dc4:	add	sp, sp, #4
   15dc8:	pop	{pc}		; (ldr pc, [sp], #4)
   15dcc:	str	fp, [sp, #-8]!
   15dd0:	str	lr, [sp, #4]
   15dd4:	add	fp, sp, #4
   15dd8:	sub	sp, sp, #64	; 0x40
   15ddc:	str	r0, [fp, #-56]	; 0xffffffc8
   15de0:	str	r1, [fp, #-60]	; 0xffffffc4
   15de4:	str	r2, [fp, #-64]	; 0xffffffc0
   15de8:	sub	r3, fp, #52	; 0x34
   15dec:	ldr	r1, [fp, #-60]	; 0xffffffc4
   15df0:	mov	r0, r3
   15df4:	bl	13dcc <__assert_fail@plt+0x2eb0>
   15df8:	sub	r3, fp, #52	; 0x34
   15dfc:	mvn	r2, #0
   15e00:	ldr	r1, [fp, #-64]	; 0xffffffc0
   15e04:	ldr	r0, [fp, #-56]	; 0xffffffc8
   15e08:	bl	159d0 <__assert_fail@plt+0x4ab4>
   15e0c:	mov	r3, r0
   15e10:	mov	r0, r3
   15e14:	sub	sp, fp, #4
   15e18:	ldr	fp, [sp]
   15e1c:	add	sp, sp, #4
   15e20:	pop	{pc}		; (ldr pc, [sp], #4)
   15e24:	str	fp, [sp, #-8]!
   15e28:	str	lr, [sp, #4]
   15e2c:	add	fp, sp, #4
   15e30:	sub	sp, sp, #64	; 0x40
   15e34:	str	r0, [fp, #-56]	; 0xffffffc8
   15e38:	str	r1, [fp, #-60]	; 0xffffffc4
   15e3c:	str	r2, [fp, #-64]	; 0xffffffc0
   15e40:	str	r3, [fp, #-68]	; 0xffffffbc
   15e44:	sub	r3, fp, #52	; 0x34
   15e48:	ldr	r1, [fp, #-60]	; 0xffffffc4
   15e4c:	mov	r0, r3
   15e50:	bl	13dcc <__assert_fail@plt+0x2eb0>
   15e54:	sub	r3, fp, #52	; 0x34
   15e58:	ldr	r2, [fp, #-68]	; 0xffffffbc
   15e5c:	ldr	r1, [fp, #-64]	; 0xffffffc0
   15e60:	ldr	r0, [fp, #-56]	; 0xffffffc8
   15e64:	bl	159d0 <__assert_fail@plt+0x4ab4>
   15e68:	mov	r3, r0
   15e6c:	mov	r0, r3
   15e70:	sub	sp, fp, #4
   15e74:	ldr	fp, [sp]
   15e78:	add	sp, sp, #4
   15e7c:	pop	{pc}		; (ldr pc, [sp], #4)
   15e80:	str	fp, [sp, #-8]!
   15e84:	str	lr, [sp, #4]
   15e88:	add	fp, sp, #4
   15e8c:	sub	sp, sp, #8
   15e90:	str	r0, [fp, #-8]
   15e94:	str	r1, [fp, #-12]
   15e98:	ldr	r2, [fp, #-12]
   15e9c:	ldr	r1, [fp, #-8]
   15ea0:	mov	r0, #0
   15ea4:	bl	15dcc <__assert_fail@plt+0x4eb0>
   15ea8:	mov	r3, r0
   15eac:	mov	r0, r3
   15eb0:	sub	sp, fp, #4
   15eb4:	ldr	fp, [sp]
   15eb8:	add	sp, sp, #4
   15ebc:	pop	{pc}		; (ldr pc, [sp], #4)
   15ec0:	str	fp, [sp, #-8]!
   15ec4:	str	lr, [sp, #4]
   15ec8:	add	fp, sp, #4
   15ecc:	sub	sp, sp, #16
   15ed0:	str	r0, [fp, #-8]
   15ed4:	str	r1, [fp, #-12]
   15ed8:	str	r2, [fp, #-16]
   15edc:	ldr	r3, [fp, #-16]
   15ee0:	ldr	r2, [fp, #-12]
   15ee4:	ldr	r1, [fp, #-8]
   15ee8:	mov	r0, #0
   15eec:	bl	15e24 <__assert_fail@plt+0x4f08>
   15ef0:	mov	r3, r0
   15ef4:	mov	r0, r3
   15ef8:	sub	sp, fp, #4
   15efc:	ldr	fp, [sp]
   15f00:	add	sp, sp, #4
   15f04:	pop	{pc}		; (ldr pc, [sp], #4)
   15f08:	str	fp, [sp, #-8]!
   15f0c:	str	lr, [sp, #4]
   15f10:	add	fp, sp, #4
   15f14:	sub	sp, sp, #64	; 0x40
   15f18:	str	r0, [fp, #-56]	; 0xffffffc8
   15f1c:	str	r1, [fp, #-60]	; 0xffffffc4
   15f20:	mov	r3, r2
   15f24:	strb	r3, [fp, #-61]	; 0xffffffc3
   15f28:	movw	r2, #41324	; 0xa16c
   15f2c:	movt	r2, #2
   15f30:	sub	r3, fp, #52	; 0x34
   15f34:	ldrd	r0, [r2]
   15f38:	strd	r0, [r3]
   15f3c:	ldrd	r0, [r2, #8]
   15f40:	strd	r0, [r3, #8]
   15f44:	ldrd	r0, [r2, #16]
   15f48:	strd	r0, [r3, #16]
   15f4c:	ldrd	r0, [r2, #24]
   15f50:	strd	r0, [r3, #24]
   15f54:	ldrd	r0, [r2, #32]
   15f58:	strd	r0, [r3, #32]
   15f5c:	ldrd	r0, [r2, #40]	; 0x28
   15f60:	strd	r0, [r3, #40]	; 0x28
   15f64:	ldrb	r1, [fp, #-61]	; 0xffffffc3
   15f68:	sub	r3, fp, #52	; 0x34
   15f6c:	mov	r2, #1
   15f70:	mov	r0, r3
   15f74:	bl	13c2c <__assert_fail@plt+0x2d10>
   15f78:	sub	r3, fp, #52	; 0x34
   15f7c:	ldr	r2, [fp, #-60]	; 0xffffffc4
   15f80:	ldr	r1, [fp, #-56]	; 0xffffffc8
   15f84:	mov	r0, #0
   15f88:	bl	159d0 <__assert_fail@plt+0x4ab4>
   15f8c:	mov	r3, r0
   15f90:	mov	r0, r3
   15f94:	sub	sp, fp, #4
   15f98:	ldr	fp, [sp]
   15f9c:	add	sp, sp, #4
   15fa0:	pop	{pc}		; (ldr pc, [sp], #4)
   15fa4:	str	fp, [sp, #-8]!
   15fa8:	str	lr, [sp, #4]
   15fac:	add	fp, sp, #4
   15fb0:	sub	sp, sp, #8
   15fb4:	str	r0, [fp, #-8]
   15fb8:	mov	r3, r1
   15fbc:	strb	r3, [fp, #-9]
   15fc0:	ldrb	r3, [fp, #-9]
   15fc4:	mov	r2, r3
   15fc8:	mvn	r1, #0
   15fcc:	ldr	r0, [fp, #-8]
   15fd0:	bl	15f08 <__assert_fail@plt+0x4fec>
   15fd4:	mov	r3, r0
   15fd8:	mov	r0, r3
   15fdc:	sub	sp, fp, #4
   15fe0:	ldr	fp, [sp]
   15fe4:	add	sp, sp, #4
   15fe8:	pop	{pc}		; (ldr pc, [sp], #4)
   15fec:	str	fp, [sp, #-8]!
   15ff0:	str	lr, [sp, #4]
   15ff4:	add	fp, sp, #4
   15ff8:	sub	sp, sp, #8
   15ffc:	str	r0, [fp, #-8]
   16000:	mov	r1, #58	; 0x3a
   16004:	ldr	r0, [fp, #-8]
   16008:	bl	15fa4 <__assert_fail@plt+0x5088>
   1600c:	mov	r3, r0
   16010:	mov	r0, r3
   16014:	sub	sp, fp, #4
   16018:	ldr	fp, [sp]
   1601c:	add	sp, sp, #4
   16020:	pop	{pc}		; (ldr pc, [sp], #4)
   16024:	str	fp, [sp, #-8]!
   16028:	str	lr, [sp, #4]
   1602c:	add	fp, sp, #4
   16030:	sub	sp, sp, #8
   16034:	str	r0, [fp, #-8]
   16038:	str	r1, [fp, #-12]
   1603c:	mov	r2, #58	; 0x3a
   16040:	ldr	r1, [fp, #-12]
   16044:	ldr	r0, [fp, #-8]
   16048:	bl	15f08 <__assert_fail@plt+0x4fec>
   1604c:	mov	r3, r0
   16050:	mov	r0, r3
   16054:	sub	sp, fp, #4
   16058:	ldr	fp, [sp]
   1605c:	add	sp, sp, #4
   16060:	pop	{pc}		; (ldr pc, [sp], #4)
   16064:	str	fp, [sp, #-8]!
   16068:	str	lr, [sp, #4]
   1606c:	add	fp, sp, #4
   16070:	sub	sp, sp, #112	; 0x70
   16074:	str	r0, [fp, #-56]	; 0xffffffc8
   16078:	str	r1, [fp, #-60]	; 0xffffffc4
   1607c:	str	r2, [fp, #-64]	; 0xffffffc0
   16080:	sub	r3, fp, #116	; 0x74
   16084:	ldr	r1, [fp, #-60]	; 0xffffffc4
   16088:	mov	r0, r3
   1608c:	bl	13dcc <__assert_fail@plt+0x2eb0>
   16090:	sub	r3, fp, #52	; 0x34
   16094:	sub	r2, fp, #116	; 0x74
   16098:	ldrd	r0, [r2]
   1609c:	strd	r0, [r3]
   160a0:	ldrd	r0, [r2, #8]
   160a4:	strd	r0, [r3, #8]
   160a8:	ldrd	r0, [r2, #16]
   160ac:	strd	r0, [r3, #16]
   160b0:	ldrd	r0, [r2, #24]
   160b4:	strd	r0, [r3, #24]
   160b8:	ldrd	r0, [r2, #32]
   160bc:	strd	r0, [r3, #32]
   160c0:	ldrd	r0, [r2, #40]	; 0x28
   160c4:	strd	r0, [r3, #40]	; 0x28
   160c8:	sub	r3, fp, #52	; 0x34
   160cc:	mov	r2, #1
   160d0:	mov	r1, #58	; 0x3a
   160d4:	mov	r0, r3
   160d8:	bl	13c2c <__assert_fail@plt+0x2d10>
   160dc:	sub	r3, fp, #52	; 0x34
   160e0:	mvn	r2, #0
   160e4:	ldr	r1, [fp, #-64]	; 0xffffffc0
   160e8:	ldr	r0, [fp, #-56]	; 0xffffffc8
   160ec:	bl	159d0 <__assert_fail@plt+0x4ab4>
   160f0:	mov	r3, r0
   160f4:	mov	r0, r3
   160f8:	sub	sp, fp, #4
   160fc:	ldr	fp, [sp]
   16100:	add	sp, sp, #4
   16104:	pop	{pc}		; (ldr pc, [sp], #4)
   16108:	str	fp, [sp, #-8]!
   1610c:	str	lr, [sp, #4]
   16110:	add	fp, sp, #4
   16114:	sub	sp, sp, #24
   16118:	str	r0, [fp, #-8]
   1611c:	str	r1, [fp, #-12]
   16120:	str	r2, [fp, #-16]
   16124:	str	r3, [fp, #-20]	; 0xffffffec
   16128:	mvn	r3, #0
   1612c:	str	r3, [sp]
   16130:	ldr	r3, [fp, #-20]	; 0xffffffec
   16134:	ldr	r2, [fp, #-16]
   16138:	ldr	r1, [fp, #-12]
   1613c:	ldr	r0, [fp, #-8]
   16140:	bl	1615c <__assert_fail@plt+0x5240>
   16144:	mov	r3, r0
   16148:	mov	r0, r3
   1614c:	sub	sp, fp, #4
   16150:	ldr	fp, [sp]
   16154:	add	sp, sp, #4
   16158:	pop	{pc}		; (ldr pc, [sp], #4)
   1615c:	str	fp, [sp, #-8]!
   16160:	str	lr, [sp, #4]
   16164:	add	fp, sp, #4
   16168:	sub	sp, sp, #64	; 0x40
   1616c:	str	r0, [fp, #-56]	; 0xffffffc8
   16170:	str	r1, [fp, #-60]	; 0xffffffc4
   16174:	str	r2, [fp, #-64]	; 0xffffffc0
   16178:	str	r3, [fp, #-68]	; 0xffffffbc
   1617c:	movw	r2, #41324	; 0xa16c
   16180:	movt	r2, #2
   16184:	sub	r3, fp, #52	; 0x34
   16188:	ldrd	r0, [r2]
   1618c:	strd	r0, [r3]
   16190:	ldrd	r0, [r2, #8]
   16194:	strd	r0, [r3, #8]
   16198:	ldrd	r0, [r2, #16]
   1619c:	strd	r0, [r3, #16]
   161a0:	ldrd	r0, [r2, #24]
   161a4:	strd	r0, [r3, #24]
   161a8:	ldrd	r0, [r2, #32]
   161ac:	strd	r0, [r3, #32]
   161b0:	ldrd	r0, [r2, #40]	; 0x28
   161b4:	strd	r0, [r3, #40]	; 0x28
   161b8:	sub	r3, fp, #52	; 0x34
   161bc:	ldr	r2, [fp, #-64]	; 0xffffffc0
   161c0:	ldr	r1, [fp, #-60]	; 0xffffffc4
   161c4:	mov	r0, r3
   161c8:	bl	13d44 <__assert_fail@plt+0x2e28>
   161cc:	sub	r3, fp, #52	; 0x34
   161d0:	ldr	r2, [fp, #4]
   161d4:	ldr	r1, [fp, #-68]	; 0xffffffbc
   161d8:	ldr	r0, [fp, #-56]	; 0xffffffc8
   161dc:	bl	159d0 <__assert_fail@plt+0x4ab4>
   161e0:	mov	r3, r0
   161e4:	mov	r0, r3
   161e8:	sub	sp, fp, #4
   161ec:	ldr	fp, [sp]
   161f0:	add	sp, sp, #4
   161f4:	pop	{pc}		; (ldr pc, [sp], #4)
   161f8:	str	fp, [sp, #-8]!
   161fc:	str	lr, [sp, #4]
   16200:	add	fp, sp, #4
   16204:	sub	sp, sp, #16
   16208:	str	r0, [fp, #-8]
   1620c:	str	r1, [fp, #-12]
   16210:	str	r2, [fp, #-16]
   16214:	ldr	r3, [fp, #-16]
   16218:	ldr	r2, [fp, #-12]
   1621c:	ldr	r1, [fp, #-8]
   16220:	mov	r0, #0
   16224:	bl	16108 <__assert_fail@plt+0x51ec>
   16228:	mov	r3, r0
   1622c:	mov	r0, r3
   16230:	sub	sp, fp, #4
   16234:	ldr	fp, [sp]
   16238:	add	sp, sp, #4
   1623c:	pop	{pc}		; (ldr pc, [sp], #4)
   16240:	str	fp, [sp, #-8]!
   16244:	str	lr, [sp, #4]
   16248:	add	fp, sp, #4
   1624c:	sub	sp, sp, #24
   16250:	str	r0, [fp, #-8]
   16254:	str	r1, [fp, #-12]
   16258:	str	r2, [fp, #-16]
   1625c:	str	r3, [fp, #-20]	; 0xffffffec
   16260:	ldr	r3, [fp, #-20]	; 0xffffffec
   16264:	str	r3, [sp]
   16268:	ldr	r3, [fp, #-16]
   1626c:	ldr	r2, [fp, #-12]
   16270:	ldr	r1, [fp, #-8]
   16274:	mov	r0, #0
   16278:	bl	1615c <__assert_fail@plt+0x5240>
   1627c:	mov	r3, r0
   16280:	mov	r0, r3
   16284:	sub	sp, fp, #4
   16288:	ldr	fp, [sp]
   1628c:	add	sp, sp, #4
   16290:	pop	{pc}		; (ldr pc, [sp], #4)
   16294:	str	fp, [sp, #-8]!
   16298:	str	lr, [sp, #4]
   1629c:	add	fp, sp, #4
   162a0:	sub	sp, sp, #16
   162a4:	str	r0, [fp, #-8]
   162a8:	str	r1, [fp, #-12]
   162ac:	str	r2, [fp, #-16]
   162b0:	movw	r3, #41220	; 0xa104
   162b4:	movt	r3, #2
   162b8:	ldr	r2, [fp, #-16]
   162bc:	ldr	r1, [fp, #-12]
   162c0:	ldr	r0, [fp, #-8]
   162c4:	bl	159d0 <__assert_fail@plt+0x4ab4>
   162c8:	mov	r3, r0
   162cc:	mov	r0, r3
   162d0:	sub	sp, fp, #4
   162d4:	ldr	fp, [sp]
   162d8:	add	sp, sp, #4
   162dc:	pop	{pc}		; (ldr pc, [sp], #4)
   162e0:	str	fp, [sp, #-8]!
   162e4:	str	lr, [sp, #4]
   162e8:	add	fp, sp, #4
   162ec:	sub	sp, sp, #8
   162f0:	str	r0, [fp, #-8]
   162f4:	str	r1, [fp, #-12]
   162f8:	ldr	r2, [fp, #-12]
   162fc:	ldr	r1, [fp, #-8]
   16300:	mov	r0, #0
   16304:	bl	16294 <__assert_fail@plt+0x5378>
   16308:	mov	r3, r0
   1630c:	mov	r0, r3
   16310:	sub	sp, fp, #4
   16314:	ldr	fp, [sp]
   16318:	add	sp, sp, #4
   1631c:	pop	{pc}		; (ldr pc, [sp], #4)
   16320:	str	fp, [sp, #-8]!
   16324:	str	lr, [sp, #4]
   16328:	add	fp, sp, #4
   1632c:	sub	sp, sp, #8
   16330:	str	r0, [fp, #-8]
   16334:	str	r1, [fp, #-12]
   16338:	mvn	r2, #0
   1633c:	ldr	r1, [fp, #-12]
   16340:	ldr	r0, [fp, #-8]
   16344:	bl	16294 <__assert_fail@plt+0x5378>
   16348:	mov	r3, r0
   1634c:	mov	r0, r3
   16350:	sub	sp, fp, #4
   16354:	ldr	fp, [sp]
   16358:	add	sp, sp, #4
   1635c:	pop	{pc}		; (ldr pc, [sp], #4)
   16360:	str	fp, [sp, #-8]!
   16364:	str	lr, [sp, #4]
   16368:	add	fp, sp, #4
   1636c:	sub	sp, sp, #8
   16370:	str	r0, [fp, #-8]
   16374:	ldr	r1, [fp, #-8]
   16378:	mov	r0, #0
   1637c:	bl	16320 <__assert_fail@plt+0x5404>
   16380:	mov	r3, r0
   16384:	mov	r0, r3
   16388:	sub	sp, fp, #4
   1638c:	ldr	fp, [sp]
   16390:	add	sp, sp, #4
   16394:	pop	{pc}		; (ldr pc, [sp], #4)
   16398:	str	fp, [sp, #-8]!
   1639c:	str	lr, [sp, #4]
   163a0:	add	fp, sp, #4
   163a4:	sub	sp, sp, #24
   163a8:	str	r0, [fp, #-16]
   163ac:	str	r1, [fp, #-20]	; 0xffffffec
   163b0:	str	r2, [fp, #-24]	; 0xffffffe8
   163b4:	mov	ip, #0
   163b8:	ldr	r2, [fp, #-20]	; 0xffffffec
   163bc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   163c0:	umull	r0, r1, r2, r3
   163c4:	mov	r2, #0
   163c8:	mov	r3, #0
   163cc:	mov	r2, r1
   163d0:	mov	r3, #0
   163d4:	cmp	r2, #0
   163d8:	beq	163e0 <__assert_fail@plt+0x54c4>
   163dc:	mov	ip, #1
   163e0:	mov	r3, r0
   163e4:	str	r3, [fp, #-8]
   163e8:	mov	r3, ip
   163ec:	and	r3, r3, #1
   163f0:	uxtb	r3, r3
   163f4:	cmp	r3, #0
   163f8:	beq	16414 <__assert_fail@plt+0x54f8>
   163fc:	bl	10e50 <__errno_location@plt>
   16400:	mov	r2, r0
   16404:	mov	r3, #12
   16408:	str	r3, [r2]
   1640c:	mov	r3, #0
   16410:	b	16428 <__assert_fail@plt+0x550c>
   16414:	ldr	r3, [fp, #-8]
   16418:	mov	r1, r3
   1641c:	ldr	r0, [fp, #-16]
   16420:	bl	17f74 <__assert_fail@plt+0x7058>
   16424:	mov	r3, r0
   16428:	mov	r0, r3
   1642c:	sub	sp, fp, #4
   16430:	ldr	fp, [sp]
   16434:	add	sp, sp, #4
   16438:	pop	{pc}		; (ldr pc, [sp], #4)
   1643c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   16440:	strd	r6, [sp, #8]
   16444:	str	fp, [sp, #16]
   16448:	str	lr, [sp, #20]
   1644c:	add	fp, sp, #20
   16450:	sub	sp, sp, #48	; 0x30
   16454:	str	r0, [fp, #-24]	; 0xffffffe8
   16458:	str	r1, [fp, #-28]	; 0xffffffe4
   1645c:	str	r2, [fp, #-32]	; 0xffffffe0
   16460:	str	r3, [fp, #-36]	; 0xffffffdc
   16464:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16468:	cmp	r3, #0
   1646c:	beq	16494 <__assert_fail@plt+0x5578>
   16470:	ldr	r3, [fp, #-36]	; 0xffffffdc
   16474:	str	r3, [sp]
   16478:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1647c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   16480:	movw	r1, #37900	; 0x940c
   16484:	movt	r1, #1
   16488:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1648c:	bl	10e44 <fprintf@plt>
   16490:	b	164ac <__assert_fail@plt+0x5590>
   16494:	ldr	r3, [fp, #-36]	; 0xffffffdc
   16498:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1649c:	movw	r1, #37912	; 0x9418
   164a0:	movt	r1, #1
   164a4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   164a8:	bl	10e44 <fprintf@plt>
   164ac:	movw	r0, #37920	; 0x9420
   164b0:	movt	r0, #1
   164b4:	bl	10e20 <gettext@plt>
   164b8:	mov	r2, r0
   164bc:	movw	r3, #2022	; 0x7e6
   164c0:	movw	r1, #38704	; 0x9730
   164c4:	movt	r1, #1
   164c8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   164cc:	bl	10e44 <fprintf@plt>
   164d0:	ldr	r1, [fp, #-24]	; 0xffffffe8
   164d4:	mov	r0, #10
   164d8:	bl	10d48 <fputc_unlocked@plt>
   164dc:	movw	r0, #37924	; 0x9424
   164e0:	movt	r0, #1
   164e4:	bl	10e20 <gettext@plt>
   164e8:	mov	r3, r0
   164ec:	movw	r2, #38096	; 0x94d0
   164f0:	movt	r2, #1
   164f4:	mov	r1, r3
   164f8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   164fc:	bl	10e44 <fprintf@plt>
   16500:	ldr	r1, [fp, #-24]	; 0xffffffe8
   16504:	mov	r0, #10
   16508:	bl	10d48 <fputc_unlocked@plt>
   1650c:	ldr	r3, [fp, #8]
   16510:	cmp	r3, #9
   16514:	ldrls	pc, [pc, r3, lsl #2]
   16518:	b	168f8 <__assert_fail@plt+0x59dc>
   1651c:	andeq	r6, r1, r4, lsr #19
   16520:	andeq	r6, r1, r4, asr #10
   16524:	andeq	r6, r1, ip, ror #10
   16528:	muleq	r1, ip, r5
   1652c:	andeq	r6, r1, r0, ror #11
   16530:	andeq	r6, r1, ip, lsr r6
   16534:	andeq	r6, r1, r8, lsr #13
   16538:	andeq	r6, r1, r4, lsr #14
   1653c:			; <UNDEFINED> instruction: 0x000167b0
   16540:	andeq	r6, r1, ip, asr #16
   16544:	movw	r0, #38132	; 0x94f4
   16548:	movt	r0, #1
   1654c:	bl	10e20 <gettext@plt>
   16550:	mov	r1, r0
   16554:	ldr	r3, [fp, #4]
   16558:	ldr	r3, [r3]
   1655c:	mov	r2, r3
   16560:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16564:	bl	10e44 <fprintf@plt>
   16568:	b	169a8 <__assert_fail@plt+0x5a8c>
   1656c:	movw	r0, #38148	; 0x9504
   16570:	movt	r0, #1
   16574:	bl	10e20 <gettext@plt>
   16578:	mov	r1, r0
   1657c:	ldr	r3, [fp, #4]
   16580:	ldr	r2, [r3]
   16584:	ldr	r3, [fp, #4]
   16588:	add	r3, r3, #4
   1658c:	ldr	r3, [r3]
   16590:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16594:	bl	10e44 <fprintf@plt>
   16598:	b	169a8 <__assert_fail@plt+0x5a8c>
   1659c:	movw	r0, #38172	; 0x951c
   165a0:	movt	r0, #1
   165a4:	bl	10e20 <gettext@plt>
   165a8:	ldr	r3, [fp, #4]
   165ac:	ldr	r2, [r3]
   165b0:	ldr	r3, [fp, #4]
   165b4:	add	r3, r3, #4
   165b8:	ldr	r1, [r3]
   165bc:	ldr	r3, [fp, #4]
   165c0:	add	r3, r3, #8
   165c4:	ldr	r3, [r3]
   165c8:	str	r3, [sp]
   165cc:	mov	r3, r1
   165d0:	mov	r1, r0
   165d4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   165d8:	bl	10e44 <fprintf@plt>
   165dc:	b	169a8 <__assert_fail@plt+0x5a8c>
   165e0:	movw	r0, #38200	; 0x9538
   165e4:	movt	r0, #1
   165e8:	bl	10e20 <gettext@plt>
   165ec:	mov	ip, r0
   165f0:	ldr	r3, [fp, #4]
   165f4:	ldr	r1, [r3]
   165f8:	ldr	r3, [fp, #4]
   165fc:	add	r3, r3, #4
   16600:	ldr	r0, [r3]
   16604:	ldr	r3, [fp, #4]
   16608:	add	r3, r3, #8
   1660c:	ldr	r3, [r3]
   16610:	ldr	r2, [fp, #4]
   16614:	add	r2, r2, #12
   16618:	ldr	r2, [r2]
   1661c:	str	r2, [sp, #4]
   16620:	str	r3, [sp]
   16624:	mov	r3, r0
   16628:	mov	r2, r1
   1662c:	mov	r1, ip
   16630:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16634:	bl	10e44 <fprintf@plt>
   16638:	b	169a8 <__assert_fail@plt+0x5a8c>
   1663c:	movw	r0, #38232	; 0x9558
   16640:	movt	r0, #1
   16644:	bl	10e20 <gettext@plt>
   16648:	mov	lr, r0
   1664c:	ldr	r3, [fp, #4]
   16650:	ldr	r0, [r3]
   16654:	ldr	r3, [fp, #4]
   16658:	add	r3, r3, #4
   1665c:	ldr	ip, [r3]
   16660:	ldr	r3, [fp, #4]
   16664:	add	r3, r3, #8
   16668:	ldr	r3, [r3]
   1666c:	ldr	r2, [fp, #4]
   16670:	add	r2, r2, #12
   16674:	ldr	r2, [r2]
   16678:	ldr	r1, [fp, #4]
   1667c:	add	r1, r1, #16
   16680:	ldr	r1, [r1]
   16684:	str	r1, [sp, #8]
   16688:	str	r2, [sp, #4]
   1668c:	str	r3, [sp]
   16690:	mov	r3, ip
   16694:	mov	r2, r0
   16698:	mov	r1, lr
   1669c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   166a0:	bl	10e44 <fprintf@plt>
   166a4:	b	169a8 <__assert_fail@plt+0x5a8c>
   166a8:	movw	r0, #38268	; 0x957c
   166ac:	movt	r0, #1
   166b0:	bl	10e20 <gettext@plt>
   166b4:	mov	r4, r0
   166b8:	ldr	r3, [fp, #4]
   166bc:	ldr	ip, [r3]
   166c0:	ldr	r3, [fp, #4]
   166c4:	add	r3, r3, #4
   166c8:	ldr	lr, [r3]
   166cc:	ldr	r3, [fp, #4]
   166d0:	add	r3, r3, #8
   166d4:	ldr	r3, [r3]
   166d8:	ldr	r2, [fp, #4]
   166dc:	add	r2, r2, #12
   166e0:	ldr	r2, [r2]
   166e4:	ldr	r1, [fp, #4]
   166e8:	add	r1, r1, #16
   166ec:	ldr	r1, [r1]
   166f0:	ldr	r0, [fp, #4]
   166f4:	add	r0, r0, #20
   166f8:	ldr	r0, [r0]
   166fc:	str	r0, [sp, #12]
   16700:	str	r1, [sp, #8]
   16704:	str	r2, [sp, #4]
   16708:	str	r3, [sp]
   1670c:	mov	r3, lr
   16710:	mov	r2, ip
   16714:	mov	r1, r4
   16718:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1671c:	bl	10e44 <fprintf@plt>
   16720:	b	169a8 <__assert_fail@plt+0x5a8c>
   16724:	movw	r0, #38308	; 0x95a4
   16728:	movt	r0, #1
   1672c:	bl	10e20 <gettext@plt>
   16730:	mov	r5, r0
   16734:	ldr	r3, [fp, #4]
   16738:	ldr	lr, [r3]
   1673c:	ldr	r3, [fp, #4]
   16740:	add	r3, r3, #4
   16744:	ldr	r4, [r3]
   16748:	ldr	r3, [fp, #4]
   1674c:	add	r3, r3, #8
   16750:	ldr	r3, [r3]
   16754:	ldr	r2, [fp, #4]
   16758:	add	r2, r2, #12
   1675c:	ldr	r2, [r2]
   16760:	ldr	r1, [fp, #4]
   16764:	add	r1, r1, #16
   16768:	ldr	r1, [r1]
   1676c:	ldr	r0, [fp, #4]
   16770:	add	r0, r0, #20
   16774:	ldr	r0, [r0]
   16778:	ldr	ip, [fp, #4]
   1677c:	add	ip, ip, #24
   16780:	ldr	ip, [ip]
   16784:	str	ip, [sp, #16]
   16788:	str	r0, [sp, #12]
   1678c:	str	r1, [sp, #8]
   16790:	str	r2, [sp, #4]
   16794:	str	r3, [sp]
   16798:	mov	r3, r4
   1679c:	mov	r2, lr
   167a0:	mov	r1, r5
   167a4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   167a8:	bl	10e44 <fprintf@plt>
   167ac:	b	169a8 <__assert_fail@plt+0x5a8c>
   167b0:	movw	r0, #38352	; 0x95d0
   167b4:	movt	r0, #1
   167b8:	bl	10e20 <gettext@plt>
   167bc:	mov	r6, r0
   167c0:	ldr	r3, [fp, #4]
   167c4:	ldr	r4, [r3]
   167c8:	ldr	r3, [fp, #4]
   167cc:	add	r3, r3, #4
   167d0:	ldr	r5, [r3]
   167d4:	ldr	r3, [fp, #4]
   167d8:	add	r3, r3, #8
   167dc:	ldr	r3, [r3]
   167e0:	ldr	r2, [fp, #4]
   167e4:	add	r2, r2, #12
   167e8:	ldr	r2, [r2]
   167ec:	ldr	r1, [fp, #4]
   167f0:	add	r1, r1, #16
   167f4:	ldr	r1, [r1]
   167f8:	ldr	r0, [fp, #4]
   167fc:	add	r0, r0, #20
   16800:	ldr	r0, [r0]
   16804:	ldr	ip, [fp, #4]
   16808:	add	ip, ip, #24
   1680c:	ldr	ip, [ip]
   16810:	ldr	lr, [fp, #4]
   16814:	add	lr, lr, #28
   16818:	ldr	lr, [lr]
   1681c:	str	lr, [sp, #20]
   16820:	str	ip, [sp, #16]
   16824:	str	r0, [sp, #12]
   16828:	str	r1, [sp, #8]
   1682c:	str	r2, [sp, #4]
   16830:	str	r3, [sp]
   16834:	mov	r3, r5
   16838:	mov	r2, r4
   1683c:	mov	r1, r6
   16840:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16844:	bl	10e44 <fprintf@plt>
   16848:	b	169a8 <__assert_fail@plt+0x5a8c>
   1684c:	movw	r0, #38400	; 0x9600
   16850:	movt	r0, #1
   16854:	bl	10e20 <gettext@plt>
   16858:	mov	r7, r0
   1685c:	ldr	r3, [fp, #4]
   16860:	ldr	r5, [r3]
   16864:	ldr	r3, [fp, #4]
   16868:	add	r3, r3, #4
   1686c:	ldr	r6, [r3]
   16870:	ldr	r3, [fp, #4]
   16874:	add	r3, r3, #8
   16878:	ldr	r3, [r3]
   1687c:	ldr	r2, [fp, #4]
   16880:	add	r2, r2, #12
   16884:	ldr	r2, [r2]
   16888:	ldr	r1, [fp, #4]
   1688c:	add	r1, r1, #16
   16890:	ldr	r1, [r1]
   16894:	ldr	r0, [fp, #4]
   16898:	add	r0, r0, #20
   1689c:	ldr	r0, [r0]
   168a0:	ldr	ip, [fp, #4]
   168a4:	add	ip, ip, #24
   168a8:	ldr	ip, [ip]
   168ac:	ldr	lr, [fp, #4]
   168b0:	add	lr, lr, #28
   168b4:	ldr	lr, [lr]
   168b8:	ldr	r4, [fp, #4]
   168bc:	add	r4, r4, #32
   168c0:	ldr	r4, [r4]
   168c4:	str	r4, [sp, #24]
   168c8:	str	lr, [sp, #20]
   168cc:	str	ip, [sp, #16]
   168d0:	str	r0, [sp, #12]
   168d4:	str	r1, [sp, #8]
   168d8:	str	r2, [sp, #4]
   168dc:	str	r3, [sp]
   168e0:	mov	r3, r6
   168e4:	mov	r2, r5
   168e8:	mov	r1, r7
   168ec:	ldr	r0, [fp, #-24]	; 0xffffffe8
   168f0:	bl	10e44 <fprintf@plt>
   168f4:	b	169a8 <__assert_fail@plt+0x5a8c>
   168f8:	movw	r0, #38452	; 0x9634
   168fc:	movt	r0, #1
   16900:	bl	10e20 <gettext@plt>
   16904:	mov	r7, r0
   16908:	ldr	r3, [fp, #4]
   1690c:	ldr	r5, [r3]
   16910:	ldr	r3, [fp, #4]
   16914:	add	r3, r3, #4
   16918:	ldr	r6, [r3]
   1691c:	ldr	r3, [fp, #4]
   16920:	add	r3, r3, #8
   16924:	ldr	r3, [r3]
   16928:	ldr	r2, [fp, #4]
   1692c:	add	r2, r2, #12
   16930:	ldr	r2, [r2]
   16934:	ldr	r1, [fp, #4]
   16938:	add	r1, r1, #16
   1693c:	ldr	r1, [r1]
   16940:	ldr	r0, [fp, #4]
   16944:	add	r0, r0, #20
   16948:	ldr	r0, [r0]
   1694c:	ldr	ip, [fp, #4]
   16950:	add	ip, ip, #24
   16954:	ldr	ip, [ip]
   16958:	ldr	lr, [fp, #4]
   1695c:	add	lr, lr, #28
   16960:	ldr	lr, [lr]
   16964:	ldr	r4, [fp, #4]
   16968:	add	r4, r4, #32
   1696c:	ldr	r4, [r4]
   16970:	str	r4, [sp, #24]
   16974:	str	lr, [sp, #20]
   16978:	str	ip, [sp, #16]
   1697c:	str	r0, [sp, #12]
   16980:	str	r1, [sp, #8]
   16984:	str	r2, [sp, #4]
   16988:	str	r3, [sp]
   1698c:	mov	r3, r6
   16990:	mov	r2, r5
   16994:	mov	r1, r7
   16998:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1699c:	bl	10e44 <fprintf@plt>
   169a0:	b	169a8 <__assert_fail@plt+0x5a8c>
   169a4:	nop	{0}
   169a8:	nop	{0}
   169ac:	sub	sp, fp, #20
   169b0:	ldrd	r4, [sp]
   169b4:	ldrd	r6, [sp, #8]
   169b8:	ldr	fp, [sp, #16]
   169bc:	add	sp, sp, #20
   169c0:	pop	{pc}		; (ldr pc, [sp], #4)
   169c4:	str	fp, [sp, #-8]!
   169c8:	str	lr, [sp, #4]
   169cc:	add	fp, sp, #4
   169d0:	sub	sp, sp, #32
   169d4:	str	r0, [fp, #-16]
   169d8:	str	r1, [fp, #-20]	; 0xffffffec
   169dc:	str	r2, [fp, #-24]	; 0xffffffe8
   169e0:	str	r3, [fp, #-28]	; 0xffffffe4
   169e4:	mov	r3, #0
   169e8:	str	r3, [fp, #-8]
   169ec:	b	169fc <__assert_fail@plt+0x5ae0>
   169f0:	ldr	r3, [fp, #-8]
   169f4:	add	r3, r3, #1
   169f8:	str	r3, [fp, #-8]
   169fc:	ldr	r3, [fp, #-8]
   16a00:	lsl	r3, r3, #2
   16a04:	ldr	r2, [fp, #4]
   16a08:	add	r3, r2, r3
   16a0c:	ldr	r3, [r3]
   16a10:	cmp	r3, #0
   16a14:	bne	169f0 <__assert_fail@plt+0x5ad4>
   16a18:	ldr	r3, [fp, #-8]
   16a1c:	str	r3, [sp, #4]
   16a20:	ldr	r3, [fp, #4]
   16a24:	str	r3, [sp]
   16a28:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16a2c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   16a30:	ldr	r1, [fp, #-20]	; 0xffffffec
   16a34:	ldr	r0, [fp, #-16]
   16a38:	bl	1643c <__assert_fail@plt+0x5520>
   16a3c:	nop	{0}
   16a40:	sub	sp, fp, #4
   16a44:	ldr	fp, [sp]
   16a48:	add	sp, sp, #4
   16a4c:	pop	{pc}		; (ldr pc, [sp], #4)
   16a50:	str	fp, [sp, #-8]!
   16a54:	str	lr, [sp, #4]
   16a58:	add	fp, sp, #4
   16a5c:	sub	sp, sp, #72	; 0x48
   16a60:	str	r0, [fp, #-56]	; 0xffffffc8
   16a64:	str	r1, [fp, #-60]	; 0xffffffc4
   16a68:	str	r2, [fp, #-64]	; 0xffffffc0
   16a6c:	str	r3, [fp, #-68]	; 0xffffffbc
   16a70:	mov	r3, #0
   16a74:	str	r3, [fp, #-8]
   16a78:	b	16a88 <__assert_fail@plt+0x5b6c>
   16a7c:	ldr	r3, [fp, #-8]
   16a80:	add	r3, r3, #1
   16a84:	str	r3, [fp, #-8]
   16a88:	ldr	r3, [fp, #-8]
   16a8c:	cmp	r3, #9
   16a90:	bhi	16ad4 <__assert_fail@plt+0x5bb8>
   16a94:	ldr	r3, [fp, #4]
   16a98:	add	r2, r3, #4
   16a9c:	str	r2, [fp, #4]
   16aa0:	ldr	r2, [r3]
   16aa4:	ldr	r3, [fp, #-8]
   16aa8:	lsl	r3, r3, #2
   16aac:	sub	r1, fp, #4
   16ab0:	add	r3, r1, r3
   16ab4:	str	r2, [r3, #-44]	; 0xffffffd4
   16ab8:	ldr	r3, [fp, #-8]
   16abc:	lsl	r3, r3, #2
   16ac0:	sub	r2, fp, #4
   16ac4:	add	r3, r2, r3
   16ac8:	ldr	r3, [r3, #-44]	; 0xffffffd4
   16acc:	cmp	r3, #0
   16ad0:	bne	16a7c <__assert_fail@plt+0x5b60>
   16ad4:	ldr	r3, [fp, #-8]
   16ad8:	str	r3, [sp, #4]
   16adc:	sub	r3, fp, #48	; 0x30
   16ae0:	str	r3, [sp]
   16ae4:	ldr	r3, [fp, #-68]	; 0xffffffbc
   16ae8:	ldr	r2, [fp, #-64]	; 0xffffffc0
   16aec:	ldr	r1, [fp, #-60]	; 0xffffffc4
   16af0:	ldr	r0, [fp, #-56]	; 0xffffffc8
   16af4:	bl	1643c <__assert_fail@plt+0x5520>
   16af8:	nop	{0}
   16afc:	sub	sp, fp, #4
   16b00:	ldr	fp, [sp]
   16b04:	add	sp, sp, #4
   16b08:	pop	{pc}		; (ldr pc, [sp], #4)
   16b0c:	push	{r3}		; (str r3, [sp, #-4]!)
   16b10:	str	fp, [sp, #-8]!
   16b14:	str	lr, [sp, #4]
   16b18:	add	fp, sp, #4
   16b1c:	sub	sp, sp, #36	; 0x24
   16b20:	str	r0, [fp, #-20]	; 0xffffffec
   16b24:	str	r1, [fp, #-24]	; 0xffffffe8
   16b28:	str	r2, [fp, #-28]	; 0xffffffe4
   16b2c:	add	r3, fp, #8
   16b30:	str	r3, [fp, #-12]
   16b34:	ldr	r3, [fp, #-12]
   16b38:	str	r3, [sp]
   16b3c:	ldr	r3, [fp, #4]
   16b40:	ldr	r2, [fp, #-28]	; 0xffffffe4
   16b44:	ldr	r1, [fp, #-24]	; 0xffffffe8
   16b48:	ldr	r0, [fp, #-20]	; 0xffffffec
   16b4c:	bl	16a50 <__assert_fail@plt+0x5b34>
   16b50:	nop	{0}
   16b54:	sub	sp, fp, #4
   16b58:	ldr	fp, [sp]
   16b5c:	ldr	lr, [sp, #4]
   16b60:	add	sp, sp, #8
   16b64:	add	sp, sp, #4
   16b68:	bx	lr
   16b6c:	str	fp, [sp, #-8]!
   16b70:	str	lr, [sp, #4]
   16b74:	add	fp, sp, #4
   16b78:	movw	r3, #41300	; 0xa154
   16b7c:	movt	r3, #2
   16b80:	ldr	r3, [r3]
   16b84:	mov	r1, r3
   16b88:	mov	r0, #10
   16b8c:	bl	10d48 <fputc_unlocked@plt>
   16b90:	movw	r0, #38512	; 0x9670
   16b94:	movt	r0, #1
   16b98:	bl	10e20 <gettext@plt>
   16b9c:	mov	r3, r0
   16ba0:	movw	r1, #38532	; 0x9684
   16ba4:	movt	r1, #1
   16ba8:	mov	r0, r3
   16bac:	bl	10cdc <printf@plt>
   16bb0:	movw	r0, #38556	; 0x969c
   16bb4:	movt	r0, #1
   16bb8:	bl	10e20 <gettext@plt>
   16bbc:	mov	r3, r0
   16bc0:	movw	r2, #38576	; 0x96b0
   16bc4:	movt	r2, #1
   16bc8:	movw	r1, #38616	; 0x96d8
   16bcc:	movt	r1, #1
   16bd0:	mov	r0, r3
   16bd4:	bl	10cdc <printf@plt>
   16bd8:	movw	r0, #38632	; 0x96e8
   16bdc:	movt	r0, #1
   16be0:	bl	10e20 <gettext@plt>
   16be4:	mov	r3, r0
   16be8:	movw	r1, #38672	; 0x9710
   16bec:	movt	r1, #1
   16bf0:	mov	r0, r3
   16bf4:	bl	10cdc <printf@plt>
   16bf8:	nop	{0}
   16bfc:	sub	sp, fp, #4
   16c00:	ldr	fp, [sp]
   16c04:	add	sp, sp, #4
   16c08:	pop	{pc}		; (ldr pc, [sp], #4)
   16c0c:	str	fp, [sp, #-8]!
   16c10:	str	lr, [sp, #4]
   16c14:	add	fp, sp, #4
   16c18:	sub	sp, sp, #16
   16c1c:	str	r0, [fp, #-8]
   16c20:	str	r1, [fp, #-12]
   16c24:	str	r2, [fp, #-16]
   16c28:	ldr	r2, [fp, #-16]
   16c2c:	ldr	r1, [fp, #-12]
   16c30:	ldr	r0, [fp, #-8]
   16c34:	bl	16df0 <__assert_fail@plt+0x5ed4>
   16c38:	mov	r3, r0
   16c3c:	mov	r0, r3
   16c40:	sub	sp, fp, #4
   16c44:	ldr	fp, [sp]
   16c48:	add	sp, sp, #4
   16c4c:	pop	{pc}		; (ldr pc, [sp], #4)
   16c50:	str	fp, [sp, #-8]!
   16c54:	str	lr, [sp, #4]
   16c58:	add	fp, sp, #4
   16c5c:	sub	sp, sp, #8
   16c60:	str	r0, [fp, #-8]
   16c64:	ldr	r3, [fp, #-8]
   16c68:	cmp	r3, #0
   16c6c:	bne	16c74 <__assert_fail@plt+0x5d58>
   16c70:	bl	17500 <__assert_fail@plt+0x65e4>
   16c74:	ldr	r3, [fp, #-8]
   16c78:	mov	r0, r3
   16c7c:	sub	sp, fp, #4
   16c80:	ldr	fp, [sp]
   16c84:	add	sp, sp, #4
   16c88:	pop	{pc}		; (ldr pc, [sp], #4)
   16c8c:	str	fp, [sp, #-8]!
   16c90:	str	lr, [sp, #4]
   16c94:	add	fp, sp, #4
   16c98:	sub	sp, sp, #8
   16c9c:	str	r0, [fp, #-8]
   16ca0:	ldr	r0, [fp, #-8]
   16ca4:	bl	17ee4 <__assert_fail@plt+0x6fc8>
   16ca8:	mov	r3, r0
   16cac:	mov	r0, r3
   16cb0:	bl	16c50 <__assert_fail@plt+0x5d34>
   16cb4:	mov	r3, r0
   16cb8:	mov	r0, r3
   16cbc:	sub	sp, fp, #4
   16cc0:	ldr	fp, [sp]
   16cc4:	add	sp, sp, #4
   16cc8:	pop	{pc}		; (ldr pc, [sp], #4)
   16ccc:	str	fp, [sp, #-8]!
   16cd0:	str	lr, [sp, #4]
   16cd4:	add	fp, sp, #4
   16cd8:	sub	sp, sp, #8
   16cdc:	str	r0, [fp, #-8]
   16ce0:	ldr	r0, [fp, #-8]
   16ce4:	bl	138b8 <__assert_fail@plt+0x299c>
   16ce8:	mov	r3, r0
   16cec:	mov	r0, r3
   16cf0:	bl	16c50 <__assert_fail@plt+0x5d34>
   16cf4:	mov	r3, r0
   16cf8:	mov	r0, r3
   16cfc:	sub	sp, fp, #4
   16d00:	ldr	fp, [sp]
   16d04:	add	sp, sp, #4
   16d08:	pop	{pc}		; (ldr pc, [sp], #4)
   16d0c:	str	fp, [sp, #-8]!
   16d10:	str	lr, [sp, #4]
   16d14:	add	fp, sp, #4
   16d18:	sub	sp, sp, #8
   16d1c:	str	r0, [fp, #-8]
   16d20:	ldr	r0, [fp, #-8]
   16d24:	bl	16c8c <__assert_fail@plt+0x5d70>
   16d28:	mov	r3, r0
   16d2c:	mov	r0, r3
   16d30:	sub	sp, fp, #4
   16d34:	ldr	fp, [sp]
   16d38:	add	sp, sp, #4
   16d3c:	pop	{pc}		; (ldr pc, [sp], #4)
   16d40:	str	fp, [sp, #-8]!
   16d44:	str	lr, [sp, #4]
   16d48:	add	fp, sp, #4
   16d4c:	sub	sp, sp, #16
   16d50:	str	r0, [fp, #-16]
   16d54:	str	r1, [fp, #-20]	; 0xffffffec
   16d58:	ldr	r1, [fp, #-20]	; 0xffffffec
   16d5c:	ldr	r0, [fp, #-16]
   16d60:	bl	17f74 <__assert_fail@plt+0x7058>
   16d64:	str	r0, [fp, #-8]
   16d68:	ldr	r3, [fp, #-8]
   16d6c:	cmp	r3, #0
   16d70:	bne	16d90 <__assert_fail@plt+0x5e74>
   16d74:	ldr	r3, [fp, #-16]
   16d78:	cmp	r3, #0
   16d7c:	beq	16d8c <__assert_fail@plt+0x5e70>
   16d80:	ldr	r3, [fp, #-20]	; 0xffffffec
   16d84:	cmp	r3, #0
   16d88:	beq	16d90 <__assert_fail@plt+0x5e74>
   16d8c:	bl	17500 <__assert_fail@plt+0x65e4>
   16d90:	ldr	r3, [fp, #-8]
   16d94:	mov	r0, r3
   16d98:	sub	sp, fp, #4
   16d9c:	ldr	fp, [sp]
   16da0:	add	sp, sp, #4
   16da4:	pop	{pc}		; (ldr pc, [sp], #4)
   16da8:	str	fp, [sp, #-8]!
   16dac:	str	lr, [sp, #4]
   16db0:	add	fp, sp, #4
   16db4:	sub	sp, sp, #8
   16db8:	str	r0, [fp, #-8]
   16dbc:	str	r1, [fp, #-12]
   16dc0:	ldr	r1, [fp, #-12]
   16dc4:	ldr	r0, [fp, #-8]
   16dc8:	bl	138f0 <__assert_fail@plt+0x29d4>
   16dcc:	mov	r3, r0
   16dd0:	mov	r0, r3
   16dd4:	bl	16c50 <__assert_fail@plt+0x5d34>
   16dd8:	mov	r3, r0
   16ddc:	mov	r0, r3
   16de0:	sub	sp, fp, #4
   16de4:	ldr	fp, [sp]
   16de8:	add	sp, sp, #4
   16dec:	pop	{pc}		; (ldr pc, [sp], #4)
   16df0:	str	fp, [sp, #-8]!
   16df4:	str	lr, [sp, #4]
   16df8:	add	fp, sp, #4
   16dfc:	sub	sp, sp, #24
   16e00:	str	r0, [fp, #-16]
   16e04:	str	r1, [fp, #-20]	; 0xffffffec
   16e08:	str	r2, [fp, #-24]	; 0xffffffe8
   16e0c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   16e10:	ldr	r1, [fp, #-20]	; 0xffffffec
   16e14:	ldr	r0, [fp, #-16]
   16e18:	bl	16398 <__assert_fail@plt+0x547c>
   16e1c:	str	r0, [fp, #-8]
   16e20:	ldr	r3, [fp, #-8]
   16e24:	cmp	r3, #0
   16e28:	bne	16e54 <__assert_fail@plt+0x5f38>
   16e2c:	ldr	r3, [fp, #-16]
   16e30:	cmp	r3, #0
   16e34:	beq	16e50 <__assert_fail@plt+0x5f34>
   16e38:	ldr	r3, [fp, #-20]	; 0xffffffec
   16e3c:	cmp	r3, #0
   16e40:	beq	16e54 <__assert_fail@plt+0x5f38>
   16e44:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16e48:	cmp	r3, #0
   16e4c:	beq	16e54 <__assert_fail@plt+0x5f38>
   16e50:	bl	17500 <__assert_fail@plt+0x65e4>
   16e54:	ldr	r3, [fp, #-8]
   16e58:	mov	r0, r3
   16e5c:	sub	sp, fp, #4
   16e60:	ldr	fp, [sp]
   16e64:	add	sp, sp, #4
   16e68:	pop	{pc}		; (ldr pc, [sp], #4)
   16e6c:	str	fp, [sp, #-8]!
   16e70:	str	lr, [sp, #4]
   16e74:	add	fp, sp, #4
   16e78:	sub	sp, sp, #16
   16e7c:	str	r0, [fp, #-8]
   16e80:	str	r1, [fp, #-12]
   16e84:	str	r2, [fp, #-16]
   16e88:	ldr	r2, [fp, #-16]
   16e8c:	ldr	r1, [fp, #-12]
   16e90:	ldr	r0, [fp, #-8]
   16e94:	bl	13990 <__assert_fail@plt+0x2a74>
   16e98:	mov	r3, r0
   16e9c:	mov	r0, r3
   16ea0:	bl	16c50 <__assert_fail@plt+0x5d34>
   16ea4:	mov	r3, r0
   16ea8:	mov	r0, r3
   16eac:	sub	sp, fp, #4
   16eb0:	ldr	fp, [sp]
   16eb4:	add	sp, sp, #4
   16eb8:	pop	{pc}		; (ldr pc, [sp], #4)
   16ebc:	str	fp, [sp, #-8]!
   16ec0:	str	lr, [sp, #4]
   16ec4:	add	fp, sp, #4
   16ec8:	sub	sp, sp, #8
   16ecc:	str	r0, [fp, #-8]
   16ed0:	str	r1, [fp, #-12]
   16ed4:	ldr	r2, [fp, #-12]
   16ed8:	ldr	r1, [fp, #-8]
   16edc:	mov	r0, #0
   16ee0:	bl	16df0 <__assert_fail@plt+0x5ed4>
   16ee4:	mov	r3, r0
   16ee8:	mov	r0, r3
   16eec:	sub	sp, fp, #4
   16ef0:	ldr	fp, [sp]
   16ef4:	add	sp, sp, #4
   16ef8:	pop	{pc}		; (ldr pc, [sp], #4)
   16efc:	str	fp, [sp, #-8]!
   16f00:	str	lr, [sp, #4]
   16f04:	add	fp, sp, #4
   16f08:	sub	sp, sp, #8
   16f0c:	str	r0, [fp, #-8]
   16f10:	str	r1, [fp, #-12]
   16f14:	ldr	r2, [fp, #-12]
   16f18:	ldr	r1, [fp, #-8]
   16f1c:	mov	r0, #0
   16f20:	bl	16e6c <__assert_fail@plt+0x5f50>
   16f24:	mov	r3, r0
   16f28:	mov	r0, r3
   16f2c:	sub	sp, fp, #4
   16f30:	ldr	fp, [sp]
   16f34:	add	sp, sp, #4
   16f38:	pop	{pc}		; (ldr pc, [sp], #4)
   16f3c:	str	fp, [sp, #-8]!
   16f40:	str	lr, [sp, #4]
   16f44:	add	fp, sp, #4
   16f48:	sub	sp, sp, #8
   16f4c:	str	r0, [fp, #-8]
   16f50:	str	r1, [fp, #-12]
   16f54:	mov	r2, #1
   16f58:	ldr	r1, [fp, #-12]
   16f5c:	ldr	r0, [fp, #-8]
   16f60:	bl	16f7c <__assert_fail@plt+0x6060>
   16f64:	mov	r3, r0
   16f68:	mov	r0, r3
   16f6c:	sub	sp, fp, #4
   16f70:	ldr	fp, [sp]
   16f74:	add	sp, sp, #4
   16f78:	pop	{pc}		; (ldr pc, [sp], #4)
   16f7c:	str	fp, [sp, #-8]!
   16f80:	str	lr, [sp, #4]
   16f84:	add	fp, sp, #4
   16f88:	sub	sp, sp, #24
   16f8c:	str	r0, [fp, #-16]
   16f90:	str	r1, [fp, #-20]	; 0xffffffec
   16f94:	str	r2, [fp, #-24]	; 0xffffffe8
   16f98:	ldr	r3, [fp, #-20]	; 0xffffffec
   16f9c:	ldr	r3, [r3]
   16fa0:	str	r3, [fp, #-8]
   16fa4:	ldr	r3, [fp, #-16]
   16fa8:	cmp	r3, #0
   16fac:	bne	16ff4 <__assert_fail@plt+0x60d8>
   16fb0:	ldr	r3, [fp, #-8]
   16fb4:	cmp	r3, #0
   16fb8:	bne	17030 <__assert_fail@plt+0x6114>
   16fbc:	mov	r2, #64	; 0x40
   16fc0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16fc4:	udiv	r3, r2, r3
   16fc8:	str	r3, [fp, #-8]
   16fcc:	ldr	r3, [fp, #-8]
   16fd0:	cmp	r3, #0
   16fd4:	moveq	r3, #1
   16fd8:	movne	r3, #0
   16fdc:	uxtb	r3, r3
   16fe0:	mov	r2, r3
   16fe4:	ldr	r3, [fp, #-8]
   16fe8:	add	r3, r2, r3
   16fec:	str	r3, [fp, #-8]
   16ff0:	b	17030 <__assert_fail@plt+0x6114>
   16ff4:	ldr	r2, [fp, #-8]
   16ff8:	ldr	r3, [fp, #-8]
   16ffc:	lsr	r3, r3, #1
   17000:	add	r3, r3, #1
   17004:	mov	r1, #0
   17008:	adds	r3, r2, r3
   1700c:	bcc	17014 <__assert_fail@plt+0x60f8>
   17010:	mov	r1, #1
   17014:	str	r3, [fp, #-8]
   17018:	mov	r3, r1
   1701c:	and	r3, r3, #1
   17020:	uxtb	r3, r3
   17024:	cmp	r3, #0
   17028:	beq	17030 <__assert_fail@plt+0x6114>
   1702c:	bl	17500 <__assert_fail@plt+0x65e4>
   17030:	ldr	r3, [fp, #-8]
   17034:	ldr	r2, [fp, #-24]	; 0xffffffe8
   17038:	mov	r1, r3
   1703c:	ldr	r0, [fp, #-16]
   17040:	bl	16df0 <__assert_fail@plt+0x5ed4>
   17044:	str	r0, [fp, #-16]
   17048:	ldr	r2, [fp, #-8]
   1704c:	ldr	r3, [fp, #-20]	; 0xffffffec
   17050:	str	r2, [r3]
   17054:	ldr	r3, [fp, #-16]
   17058:	mov	r0, r3
   1705c:	sub	sp, fp, #4
   17060:	ldr	fp, [sp]
   17064:	add	sp, sp, #4
   17068:	pop	{pc}		; (ldr pc, [sp], #4)
   1706c:	str	fp, [sp, #-8]!
   17070:	str	lr, [sp, #4]
   17074:	add	fp, sp, #4
   17078:	sub	sp, sp, #32
   1707c:	str	r0, [fp, #-24]	; 0xffffffe8
   17080:	str	r1, [fp, #-28]	; 0xffffffe4
   17084:	str	r2, [fp, #-32]	; 0xffffffe0
   17088:	str	r3, [fp, #-36]	; 0xffffffdc
   1708c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17090:	ldr	r3, [r3]
   17094:	str	r3, [fp, #-8]
   17098:	ldr	r3, [fp, #-8]
   1709c:	asr	r3, r3, #1
   170a0:	mov	r1, #0
   170a4:	ldr	r2, [fp, #-8]
   170a8:	adds	r3, r2, r3
   170ac:	bvc	170b4 <__assert_fail@plt+0x6198>
   170b0:	mov	r1, #1
   170b4:	str	r3, [fp, #-16]
   170b8:	mov	r3, r1
   170bc:	and	r3, r3, #1
   170c0:	uxtb	r3, r3
   170c4:	cmp	r3, #0
   170c8:	beq	170d4 <__assert_fail@plt+0x61b8>
   170cc:	mvn	r3, #-2147483648	; 0x80000000
   170d0:	str	r3, [fp, #-16]
   170d4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   170d8:	cmp	r3, #0
   170dc:	blt	170f8 <__assert_fail@plt+0x61dc>
   170e0:	ldr	r3, [fp, #-16]
   170e4:	ldr	r2, [fp, #-36]	; 0xffffffdc
   170e8:	cmp	r2, r3
   170ec:	bge	170f8 <__assert_fail@plt+0x61dc>
   170f0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   170f4:	str	r3, [fp, #-16]
   170f8:	ldr	r2, [fp, #-16]
   170fc:	mov	lr, #0
   17100:	ldr	r3, [fp, #4]
   17104:	smull	r2, r3, r2, r3
   17108:	mov	r0, #0
   1710c:	mov	r1, #0
   17110:	mov	r0, r3
   17114:	asr	r1, r3, #31
   17118:	asr	ip, r2, #31
   1711c:	cmp	ip, r0
   17120:	beq	17128 <__assert_fail@plt+0x620c>
   17124:	mov	lr, #1
   17128:	mov	r3, r2
   1712c:	str	r3, [fp, #-20]	; 0xffffffec
   17130:	mov	r3, lr
   17134:	and	r3, r3, #1
   17138:	uxtb	r3, r3
   1713c:	cmp	r3, #0
   17140:	beq	1714c <__assert_fail@plt+0x6230>
   17144:	mvn	r3, #-2147483648	; 0x80000000
   17148:	b	17164 <__assert_fail@plt+0x6248>
   1714c:	ldr	r3, [fp, #-20]	; 0xffffffec
   17150:	cmp	r3, #63	; 0x3f
   17154:	bgt	17160 <__assert_fail@plt+0x6244>
   17158:	mov	r3, #64	; 0x40
   1715c:	b	17164 <__assert_fail@plt+0x6248>
   17160:	mov	r3, #0
   17164:	str	r3, [fp, #-12]
   17168:	ldr	r3, [fp, #-12]
   1716c:	cmp	r3, #0
   17170:	beq	171a8 <__assert_fail@plt+0x628c>
   17174:	ldr	r2, [fp, #-12]
   17178:	ldr	r3, [fp, #4]
   1717c:	sdiv	r3, r2, r3
   17180:	str	r3, [fp, #-16]
   17184:	ldr	r3, [fp, #-12]
   17188:	ldr	r2, [fp, #4]
   1718c:	sdiv	r2, r3, r2
   17190:	ldr	r1, [fp, #4]
   17194:	mul	r2, r1, r2
   17198:	sub	r3, r3, r2
   1719c:	ldr	r2, [fp, #-12]
   171a0:	sub	r3, r2, r3
   171a4:	str	r3, [fp, #-20]	; 0xffffffec
   171a8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   171ac:	cmp	r3, #0
   171b0:	bne	171c0 <__assert_fail@plt+0x62a4>
   171b4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   171b8:	mov	r2, #0
   171bc:	str	r2, [r3]
   171c0:	ldr	r2, [fp, #-16]
   171c4:	ldr	r3, [fp, #-8]
   171c8:	sub	r3, r2, r3
   171cc:	ldr	r2, [fp, #-32]	; 0xffffffe0
   171d0:	cmp	r2, r3
   171d4:	ble	17274 <__assert_fail@plt+0x6358>
   171d8:	mov	r1, #0
   171dc:	ldr	r2, [fp, #-8]
   171e0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   171e4:	adds	r3, r2, r3
   171e8:	bvc	171f0 <__assert_fail@plt+0x62d4>
   171ec:	mov	r1, #1
   171f0:	str	r3, [fp, #-16]
   171f4:	mov	r3, r1
   171f8:	and	r3, r3, #1
   171fc:	uxtb	r3, r3
   17200:	cmp	r3, #0
   17204:	bne	17270 <__assert_fail@plt+0x6354>
   17208:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1720c:	cmp	r3, #0
   17210:	blt	17224 <__assert_fail@plt+0x6308>
   17214:	ldr	r3, [fp, #-16]
   17218:	ldr	r2, [fp, #-36]	; 0xffffffdc
   1721c:	cmp	r2, r3
   17220:	blt	17270 <__assert_fail@plt+0x6354>
   17224:	ldr	r2, [fp, #-16]
   17228:	mov	lr, #0
   1722c:	ldr	r3, [fp, #4]
   17230:	smull	r2, r3, r2, r3
   17234:	mov	r0, #0
   17238:	mov	r1, #0
   1723c:	mov	r0, r3
   17240:	asr	r1, r3, #31
   17244:	asr	ip, r2, #31
   17248:	cmp	ip, r0
   1724c:	beq	17254 <__assert_fail@plt+0x6338>
   17250:	mov	lr, #1
   17254:	mov	r3, r2
   17258:	str	r3, [fp, #-20]	; 0xffffffec
   1725c:	mov	r3, lr
   17260:	and	r3, r3, #1
   17264:	uxtb	r3, r3
   17268:	cmp	r3, #0
   1726c:	beq	17274 <__assert_fail@plt+0x6358>
   17270:	bl	17500 <__assert_fail@plt+0x65e4>
   17274:	ldr	r3, [fp, #-20]	; 0xffffffec
   17278:	mov	r1, r3
   1727c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17280:	bl	16d40 <__assert_fail@plt+0x5e24>
   17284:	str	r0, [fp, #-24]	; 0xffffffe8
   17288:	ldr	r2, [fp, #-16]
   1728c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17290:	str	r2, [r3]
   17294:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17298:	mov	r0, r3
   1729c:	sub	sp, fp, #4
   172a0:	ldr	fp, [sp]
   172a4:	add	sp, sp, #4
   172a8:	pop	{pc}		; (ldr pc, [sp], #4)
   172ac:	str	fp, [sp, #-8]!
   172b0:	str	lr, [sp, #4]
   172b4:	add	fp, sp, #4
   172b8:	sub	sp, sp, #8
   172bc:	str	r0, [fp, #-8]
   172c0:	mov	r1, #1
   172c4:	ldr	r0, [fp, #-8]
   172c8:	bl	1731c <__assert_fail@plt+0x6400>
   172cc:	mov	r3, r0
   172d0:	mov	r0, r3
   172d4:	sub	sp, fp, #4
   172d8:	ldr	fp, [sp]
   172dc:	add	sp, sp, #4
   172e0:	pop	{pc}		; (ldr pc, [sp], #4)
   172e4:	str	fp, [sp, #-8]!
   172e8:	str	lr, [sp, #4]
   172ec:	add	fp, sp, #4
   172f0:	sub	sp, sp, #8
   172f4:	str	r0, [fp, #-8]
   172f8:	mov	r1, #1
   172fc:	ldr	r0, [fp, #-8]
   17300:	bl	17364 <__assert_fail@plt+0x6448>
   17304:	mov	r3, r0
   17308:	mov	r0, r3
   1730c:	sub	sp, fp, #4
   17310:	ldr	fp, [sp]
   17314:	add	sp, sp, #4
   17318:	pop	{pc}		; (ldr pc, [sp], #4)
   1731c:	str	fp, [sp, #-8]!
   17320:	str	lr, [sp, #4]
   17324:	add	fp, sp, #4
   17328:	sub	sp, sp, #8
   1732c:	str	r0, [fp, #-8]
   17330:	str	r1, [fp, #-12]
   17334:	ldr	r1, [fp, #-12]
   17338:	ldr	r0, [fp, #-8]
   1733c:	bl	17e14 <__assert_fail@plt+0x6ef8>
   17340:	mov	r3, r0
   17344:	mov	r0, r3
   17348:	bl	16c50 <__assert_fail@plt+0x5d34>
   1734c:	mov	r3, r0
   17350:	mov	r0, r3
   17354:	sub	sp, fp, #4
   17358:	ldr	fp, [sp]
   1735c:	add	sp, sp, #4
   17360:	pop	{pc}		; (ldr pc, [sp], #4)
   17364:	str	fp, [sp, #-8]!
   17368:	str	lr, [sp, #4]
   1736c:	add	fp, sp, #4
   17370:	sub	sp, sp, #8
   17374:	str	r0, [fp, #-8]
   17378:	str	r1, [fp, #-12]
   1737c:	ldr	r1, [fp, #-12]
   17380:	ldr	r0, [fp, #-8]
   17384:	bl	1394c <__assert_fail@plt+0x2a30>
   17388:	mov	r3, r0
   1738c:	mov	r0, r3
   17390:	bl	16c50 <__assert_fail@plt+0x5d34>
   17394:	mov	r3, r0
   17398:	mov	r0, r3
   1739c:	sub	sp, fp, #4
   173a0:	ldr	fp, [sp]
   173a4:	add	sp, sp, #4
   173a8:	pop	{pc}		; (ldr pc, [sp], #4)
   173ac:	str	fp, [sp, #-8]!
   173b0:	str	lr, [sp, #4]
   173b4:	add	fp, sp, #4
   173b8:	sub	sp, sp, #8
   173bc:	str	r0, [fp, #-8]
   173c0:	str	r1, [fp, #-12]
   173c4:	ldr	r0, [fp, #-12]
   173c8:	bl	16c8c <__assert_fail@plt+0x5d70>
   173cc:	mov	r3, r0
   173d0:	ldr	r2, [fp, #-12]
   173d4:	ldr	r1, [fp, #-8]
   173d8:	mov	r0, r3
   173dc:	bl	10d18 <memcpy@plt>
   173e0:	mov	r3, r0
   173e4:	mov	r0, r3
   173e8:	sub	sp, fp, #4
   173ec:	ldr	fp, [sp]
   173f0:	add	sp, sp, #4
   173f4:	pop	{pc}		; (ldr pc, [sp], #4)
   173f8:	str	fp, [sp, #-8]!
   173fc:	str	lr, [sp, #4]
   17400:	add	fp, sp, #4
   17404:	sub	sp, sp, #8
   17408:	str	r0, [fp, #-8]
   1740c:	str	r1, [fp, #-12]
   17410:	ldr	r0, [fp, #-12]
   17414:	bl	16ccc <__assert_fail@plt+0x5db0>
   17418:	mov	r3, r0
   1741c:	mov	r0, r3
   17420:	ldr	r3, [fp, #-12]
   17424:	mov	r2, r3
   17428:	ldr	r1, [fp, #-8]
   1742c:	bl	10d18 <memcpy@plt>
   17430:	mov	r3, r0
   17434:	mov	r0, r3
   17438:	sub	sp, fp, #4
   1743c:	ldr	fp, [sp]
   17440:	add	sp, sp, #4
   17444:	pop	{pc}		; (ldr pc, [sp], #4)
   17448:	str	fp, [sp, #-8]!
   1744c:	str	lr, [sp, #4]
   17450:	add	fp, sp, #4
   17454:	sub	sp, sp, #16
   17458:	str	r0, [fp, #-16]
   1745c:	str	r1, [fp, #-20]	; 0xffffffec
   17460:	ldr	r3, [fp, #-20]	; 0xffffffec
   17464:	add	r3, r3, #1
   17468:	mov	r0, r3
   1746c:	bl	16ccc <__assert_fail@plt+0x5db0>
   17470:	mov	r3, r0
   17474:	str	r3, [fp, #-8]
   17478:	ldr	r3, [fp, #-20]	; 0xffffffec
   1747c:	ldr	r2, [fp, #-8]
   17480:	add	r3, r2, r3
   17484:	mov	r2, #0
   17488:	strb	r2, [r3]
   1748c:	ldr	r3, [fp, #-20]	; 0xffffffec
   17490:	mov	r2, r3
   17494:	ldr	r1, [fp, #-16]
   17498:	ldr	r0, [fp, #-8]
   1749c:	bl	10d18 <memcpy@plt>
   174a0:	mov	r3, r0
   174a4:	mov	r0, r3
   174a8:	sub	sp, fp, #4
   174ac:	ldr	fp, [sp]
   174b0:	add	sp, sp, #4
   174b4:	pop	{pc}		; (ldr pc, [sp], #4)
   174b8:	str	fp, [sp, #-8]!
   174bc:	str	lr, [sp, #4]
   174c0:	add	fp, sp, #4
   174c4:	sub	sp, sp, #8
   174c8:	str	r0, [fp, #-8]
   174cc:	ldr	r0, [fp, #-8]
   174d0:	bl	10e2c <strlen@plt>
   174d4:	mov	r3, r0
   174d8:	add	r3, r3, #1
   174dc:	mov	r1, r3
   174e0:	ldr	r0, [fp, #-8]
   174e4:	bl	173ac <__assert_fail@plt+0x6490>
   174e8:	mov	r3, r0
   174ec:	mov	r0, r3
   174f0:	sub	sp, fp, #4
   174f4:	ldr	fp, [sp]
   174f8:	add	sp, sp, #4
   174fc:	pop	{pc}		; (ldr pc, [sp], #4)
   17500:	strd	r4, [sp, #-16]!
   17504:	str	fp, [sp, #8]
   17508:	str	lr, [sp, #12]
   1750c:	add	fp, sp, #12
   17510:	movw	r3, #41200	; 0xa0f0
   17514:	movt	r3, #2
   17518:	ldr	r4, [r3]
   1751c:	movw	r0, #38752	; 0x9760
   17520:	movt	r0, #1
   17524:	bl	10e20 <gettext@plt>
   17528:	mov	r3, r0
   1752c:	movw	r2, #38772	; 0x9774
   17530:	movt	r2, #1
   17534:	mov	r1, #0
   17538:	mov	r0, r4
   1753c:	bl	10dc0 <error@plt>
   17540:	bl	10f04 <abort@plt>
   17544:	push	{fp}		; (str fp, [sp, #-4]!)
   17548:	add	fp, sp, #0
   1754c:	nop	{0}
   17550:	add	sp, fp, #0
   17554:	pop	{fp}		; (ldr fp, [sp], #4)
   17558:	bx	lr
   1755c:	str	fp, [sp, #-8]!
   17560:	str	lr, [sp, #4]
   17564:	add	fp, sp, #4
   17568:	sub	sp, sp, #8
   1756c:	str	r0, [fp, #-8]
   17570:	str	r1, [fp, #-12]
   17574:	ldr	r1, [fp, #-12]
   17578:	ldr	r0, [fp, #-8]
   1757c:	bl	18054 <__assert_fail@plt+0x7138>
   17580:	mov	r3, r0
   17584:	cmp	r3, #0
   17588:	bge	17590 <__assert_fail@plt+0x6674>
   1758c:	bl	17544 <__assert_fail@plt+0x6628>
   17590:	nop	{0}
   17594:	sub	sp, fp, #4
   17598:	ldr	fp, [sp]
   1759c:	add	sp, sp, #4
   175a0:	pop	{pc}		; (ldr pc, [sp], #4)
   175a4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   175a8:	strd	r6, [sp, #8]
   175ac:	strd	r8, [sp, #16]
   175b0:	str	fp, [sp, #24]
   175b4:	str	lr, [sp, #28]
   175b8:	add	fp, sp, #28
   175bc:	sub	sp, sp, #72	; 0x48
   175c0:	str	r0, [fp, #-40]	; 0xffffffd8
   175c4:	str	r1, [fp, #-44]	; 0xffffffd4
   175c8:	ldr	r3, [fp, #-40]	; 0xffffffd8
   175cc:	ldrd	r6, [r3]
   175d0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   175d4:	mov	r8, r3
   175d8:	asr	r9, r8, #31
   175dc:	mov	r2, #0
   175e0:	mov	r3, #0
   175e4:	strd	r2, [fp, #-60]	; 0xffffffc4
   175e8:	mov	r0, #0
   175ec:	mov	r1, #0
   175f0:	mov	r0, r7
   175f4:	asr	r1, r7, #31
   175f8:	asr	ip, r6, #31
   175fc:	mov	r2, #0
   17600:	mov	r3, #0
   17604:	mov	r2, r9
   17608:	asr	r3, r9, #31
   1760c:	cmp	ip, r0
   17610:	bne	17620 <__assert_fail@plt+0x6704>
   17614:	smull	r2, r3, r6, r8
   17618:	strd	r2, [fp, #-52]	; 0xffffffcc
   1761c:	b	17734 <__assert_fail@plt+0x6818>
   17620:	strd	r6, [fp, #-92]	; 0xffffffa4
   17624:	mov	ip, r0
   17628:	mov	lr, r8
   1762c:	umull	r2, r3, r6, r8
   17630:	strd	r2, [fp, #-100]	; 0xffffff9c
   17634:	umull	r2, r3, lr, ip
   17638:	mov	r0, r2
   1763c:	mov	r1, r3
   17640:	cmp	ip, #0
   17644:	bge	17674 <__assert_fail@plt+0x6758>
   17648:	mov	r2, lr
   1764c:	mov	r3, #0
   17650:	mov	r4, #0
   17654:	mov	r5, #0
   17658:	mov	r5, r2
   1765c:	mov	r4, #0
   17660:	subs	r3, r0, r4
   17664:	str	r3, [fp, #-68]	; 0xffffffbc
   17668:	sbc	r3, r1, r5
   1766c:	str	r3, [fp, #-64]	; 0xffffffc0
   17670:	ldrd	r0, [fp, #-68]	; 0xffffffbc
   17674:	cmp	lr, #0
   17678:	bge	17698 <__assert_fail@plt+0x677c>
   1767c:	ldrd	r2, [fp, #-92]	; 0xffffffa4
   17680:	mov	ip, r2
   17684:	subs	ip, r0, ip
   17688:	str	ip, [fp, #-76]	; 0xffffffb4
   1768c:	sbc	r3, r1, r3
   17690:	str	r3, [fp, #-72]	; 0xffffffb8
   17694:	ldrd	r0, [fp, #-76]	; 0xffffffb4
   17698:	mov	r2, #0
   1769c:	mov	r3, #0
   176a0:	ldrd	r4, [fp, #-100]	; 0xffffff9c
   176a4:	mov	ip, r5
   176a8:	mov	r2, ip
   176ac:	mov	r3, #0
   176b0:	adds	ip, r0, r2
   176b4:	str	ip, [fp, #-84]	; 0xffffffac
   176b8:	adc	r3, r1, r3
   176bc:	str	r3, [fp, #-80]	; 0xffffffb0
   176c0:	ldrd	r0, [fp, #-84]	; 0xffffffac
   176c4:	mov	r2, #0
   176c8:	mov	r3, #0
   176cc:	mov	r2, r1
   176d0:	asr	r3, r1, #31
   176d4:	asr	ip, r0, #31
   176d8:	cmp	ip, r2
   176dc:	bne	1770c <__assert_fail@plt+0x67f0>
   176e0:	mov	r2, #0
   176e4:	mov	r3, #0
   176e8:	mov	r3, r0
   176ec:	mov	r2, #0
   176f0:	mov	r0, r4
   176f4:	mov	r1, #0
   176f8:	orr	ip, r2, r0
   176fc:	str	ip, [fp, #-52]	; 0xffffffcc
   17700:	orr	r3, r3, r1
   17704:	str	r3, [fp, #-48]	; 0xffffffd0
   17708:	b	17734 <__assert_fail@plt+0x6818>
   1770c:	mul	r2, r8, r7
   17710:	mul	r3, r6, r9
   17714:	add	r1, r2, r3
   17718:	umull	r2, r3, r6, r8
   1771c:	add	r1, r1, r3
   17720:	mov	r3, r1
   17724:	strd	r2, [fp, #-52]	; 0xffffffcc
   17728:	mov	r2, #1
   1772c:	mov	r3, #0
   17730:	strd	r2, [fp, #-60]	; 0xffffffc4
   17734:	ldrd	r2, [fp, #-52]	; 0xffffffcc
   17738:	strd	r2, [fp, #-36]	; 0xffffffdc
   1773c:	ldrd	r2, [fp, #-60]	; 0xffffffc4
   17740:	mov	r3, r2
   17744:	and	r3, r3, #1
   17748:	uxtb	r3, r3
   1774c:	cmp	r3, #0
   17750:	beq	1778c <__assert_fail@plt+0x6870>
   17754:	ldr	r3, [fp, #-40]	; 0xffffffd8
   17758:	ldrd	r2, [r3]
   1775c:	cmp	r2, #0
   17760:	sbcs	r3, r3, #0
   17764:	bge	17774 <__assert_fail@plt+0x6858>
   17768:	mov	r2, #0
   1776c:	mov	r3, #-2147483648	; 0x80000000
   17770:	b	1777c <__assert_fail@plt+0x6860>
   17774:	mvn	r2, #0
   17778:	mvn	r3, #-2147483648	; 0x80000000
   1777c:	ldr	r1, [fp, #-40]	; 0xffffffd8
   17780:	strd	r2, [r1]
   17784:	mov	r3, #1
   17788:	b	1779c <__assert_fail@plt+0x6880>
   1778c:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   17790:	ldr	r1, [fp, #-40]	; 0xffffffd8
   17794:	strd	r2, [r1]
   17798:	mov	r3, #0
   1779c:	mov	r0, r3
   177a0:	sub	sp, fp, #28
   177a4:	ldrd	r4, [sp]
   177a8:	ldrd	r6, [sp, #8]
   177ac:	ldrd	r8, [sp, #16]
   177b0:	ldr	fp, [sp, #24]
   177b4:	add	sp, sp, #28
   177b8:	pop	{pc}		; (ldr pc, [sp], #4)
   177bc:	str	fp, [sp, #-8]!
   177c0:	str	lr, [sp, #4]
   177c4:	add	fp, sp, #4
   177c8:	sub	sp, sp, #24
   177cc:	str	r0, [fp, #-16]
   177d0:	str	r1, [fp, #-20]	; 0xffffffec
   177d4:	str	r2, [fp, #-24]	; 0xffffffe8
   177d8:	mov	r3, #0
   177dc:	str	r3, [fp, #-8]
   177e0:	b	17800 <__assert_fail@plt+0x68e4>
   177e4:	ldr	r1, [fp, #-20]	; 0xffffffec
   177e8:	ldr	r0, [fp, #-16]
   177ec:	bl	175a4 <__assert_fail@plt+0x6688>
   177f0:	mov	r2, r0
   177f4:	ldr	r3, [fp, #-8]
   177f8:	orr	r3, r3, r2
   177fc:	str	r3, [fp, #-8]
   17800:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17804:	sub	r2, r3, #1
   17808:	str	r2, [fp, #-24]	; 0xffffffe8
   1780c:	cmp	r3, #0
   17810:	bne	177e4 <__assert_fail@plt+0x68c8>
   17814:	ldr	r3, [fp, #-8]
   17818:	mov	r0, r3
   1781c:	sub	sp, fp, #4
   17820:	ldr	fp, [sp]
   17824:	add	sp, sp, #4
   17828:	pop	{pc}		; (ldr pc, [sp], #4)
   1782c:	str	fp, [sp, #-8]!
   17830:	str	lr, [sp, #4]
   17834:	add	fp, sp, #4
   17838:	sub	sp, sp, #48	; 0x30
   1783c:	str	r0, [fp, #-40]	; 0xffffffd8
   17840:	str	r1, [fp, #-44]	; 0xffffffd4
   17844:	str	r2, [fp, #-48]	; 0xffffffd0
   17848:	str	r3, [fp, #-52]	; 0xffffffcc
   1784c:	mov	r3, #0
   17850:	str	r3, [fp, #-8]
   17854:	ldr	r3, [fp, #-48]	; 0xffffffd0
   17858:	cmp	r3, #0
   1785c:	blt	1786c <__assert_fail@plt+0x6950>
   17860:	ldr	r3, [fp, #-48]	; 0xffffffd0
   17864:	cmp	r3, #36	; 0x24
   17868:	ble	1788c <__assert_fail@plt+0x6970>
   1786c:	movw	r3, #38832	; 0x97b0
   17870:	movt	r3, #1
   17874:	mov	r2, #85	; 0x55
   17878:	movw	r1, #38776	; 0x9778
   1787c:	movt	r1, #1
   17880:	movw	r0, #38792	; 0x9788
   17884:	movt	r0, #1
   17888:	bl	10f1c <__assert_fail@plt>
   1788c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   17890:	cmp	r3, #0
   17894:	bne	178a0 <__assert_fail@plt+0x6984>
   17898:	sub	r3, fp, #28
   1789c:	b	178a4 <__assert_fail@plt+0x6988>
   178a0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   178a4:	str	r3, [fp, #-24]	; 0xffffffe8
   178a8:	bl	10e50 <__errno_location@plt>
   178ac:	mov	r2, r0
   178b0:	mov	r3, #0
   178b4:	str	r3, [r2]
   178b8:	ldr	r2, [fp, #-48]	; 0xffffffd0
   178bc:	ldr	r1, [fp, #-24]	; 0xffffffe8
   178c0:	ldr	r0, [fp, #-40]	; 0xffffffd8
   178c4:	bl	10e8c <strtoimax@plt>
   178c8:	mov	r2, r0
   178cc:	mov	r3, r1
   178d0:	strd	r2, [fp, #-36]	; 0xffffffdc
   178d4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   178d8:	ldr	r3, [r3]
   178dc:	ldr	r2, [fp, #-40]	; 0xffffffd8
   178e0:	cmp	r2, r3
   178e4:	bne	17944 <__assert_fail@plt+0x6a28>
   178e8:	ldr	r3, [fp, #4]
   178ec:	cmp	r3, #0
   178f0:	beq	1793c <__assert_fail@plt+0x6a20>
   178f4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   178f8:	ldr	r3, [r3]
   178fc:	ldrb	r3, [r3]
   17900:	cmp	r3, #0
   17904:	beq	1793c <__assert_fail@plt+0x6a20>
   17908:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1790c:	ldr	r3, [r3]
   17910:	ldrb	r3, [r3]
   17914:	mov	r1, r3
   17918:	ldr	r0, [fp, #4]
   1791c:	bl	10e38 <strchr@plt>
   17920:	mov	r3, r0
   17924:	cmp	r3, #0
   17928:	beq	1793c <__assert_fail@plt+0x6a20>
   1792c:	mov	r2, #1
   17930:	mov	r3, #0
   17934:	strd	r2, [fp, #-36]	; 0xffffffdc
   17938:	b	1797c <__assert_fail@plt+0x6a60>
   1793c:	mov	r3, #4
   17940:	b	17e00 <__assert_fail@plt+0x6ee4>
   17944:	bl	10e50 <__errno_location@plt>
   17948:	mov	r3, r0
   1794c:	ldr	r3, [r3]
   17950:	cmp	r3, #0
   17954:	beq	1797c <__assert_fail@plt+0x6a60>
   17958:	bl	10e50 <__errno_location@plt>
   1795c:	mov	r3, r0
   17960:	ldr	r3, [r3]
   17964:	cmp	r3, #34	; 0x22
   17968:	beq	17974 <__assert_fail@plt+0x6a58>
   1796c:	mov	r3, #4
   17970:	b	17e00 <__assert_fail@plt+0x6ee4>
   17974:	mov	r3, #1
   17978:	str	r3, [fp, #-8]
   1797c:	ldr	r3, [fp, #4]
   17980:	cmp	r3, #0
   17984:	bne	1799c <__assert_fail@plt+0x6a80>
   17988:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   1798c:	ldr	r1, [fp, #-52]	; 0xffffffcc
   17990:	strd	r2, [r1]
   17994:	ldr	r3, [fp, #-8]
   17998:	b	17e00 <__assert_fail@plt+0x6ee4>
   1799c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   179a0:	ldr	r3, [r3]
   179a4:	ldrb	r3, [r3]
   179a8:	cmp	r3, #0
   179ac:	beq	17df0 <__assert_fail@plt+0x6ed4>
   179b0:	mov	r3, #1024	; 0x400
   179b4:	str	r3, [fp, #-12]
   179b8:	mov	r3, #1
   179bc:	str	r3, [fp, #-16]
   179c0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   179c4:	ldr	r3, [r3]
   179c8:	ldrb	r3, [r3]
   179cc:	mov	r1, r3
   179d0:	ldr	r0, [fp, #4]
   179d4:	bl	10e38 <strchr@plt>
   179d8:	mov	r3, r0
   179dc:	cmp	r3, #0
   179e0:	bne	179fc <__assert_fail@plt+0x6ae0>
   179e4:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   179e8:	ldr	r1, [fp, #-52]	; 0xffffffcc
   179ec:	strd	r2, [r1]
   179f0:	ldr	r3, [fp, #-8]
   179f4:	orr	r3, r3, #2
   179f8:	b	17e00 <__assert_fail@plt+0x6ee4>
   179fc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17a00:	ldr	r3, [r3]
   17a04:	ldrb	r3, [r3]
   17a08:	sub	r3, r3, #69	; 0x45
   17a0c:	cmp	r3, #47	; 0x2f
   17a10:	ldrls	pc, [pc, r3, lsl #2]
   17a14:	b	17b68 <__assert_fail@plt+0x6c4c>
   17a18:	ldrdeq	r7, [r1], -r8
   17a1c:	andeq	r7, r1, r8, ror #22
   17a20:	ldrdeq	r7, [r1], -r8
   17a24:	andeq	r7, r1, r8, ror #22
   17a28:	andeq	r7, r1, r8, ror #22
   17a2c:	andeq	r7, r1, r8, ror #22
   17a30:	ldrdeq	r7, [r1], -r8
   17a34:	andeq	r7, r1, r8, ror #22
   17a38:	ldrdeq	r7, [r1], -r8
   17a3c:	andeq	r7, r1, r8, ror #22
   17a40:	andeq	r7, r1, r8, ror #22
   17a44:	ldrdeq	r7, [r1], -r8
   17a48:	andeq	r7, r1, r8, ror #22
   17a4c:	andeq	r7, r1, r8, ror #22
   17a50:	andeq	r7, r1, r8, ror #22
   17a54:	ldrdeq	r7, [r1], -r8
   17a58:	andeq	r7, r1, r8, ror #22
   17a5c:	andeq	r7, r1, r8, ror #22
   17a60:	andeq	r7, r1, r8, ror #22
   17a64:	andeq	r7, r1, r8, ror #22
   17a68:	ldrdeq	r7, [r1], -r8
   17a6c:	ldrdeq	r7, [r1], -r8
   17a70:	andeq	r7, r1, r8, ror #22
   17a74:	andeq	r7, r1, r8, ror #22
   17a78:	andeq	r7, r1, r8, ror #22
   17a7c:	andeq	r7, r1, r8, ror #22
   17a80:	andeq	r7, r1, r8, ror #22
   17a84:	andeq	r7, r1, r8, ror #22
   17a88:	andeq	r7, r1, r8, ror #22
   17a8c:	andeq	r7, r1, r8, ror #22
   17a90:	andeq	r7, r1, r8, ror #22
   17a94:	andeq	r7, r1, r8, ror #22
   17a98:	andeq	r7, r1, r8, ror #22
   17a9c:	andeq	r7, r1, r8, ror #22
   17aa0:	ldrdeq	r7, [r1], -r8
   17aa4:	andeq	r7, r1, r8, ror #22
   17aa8:	andeq	r7, r1, r8, ror #22
   17aac:	andeq	r7, r1, r8, ror #22
   17ab0:	ldrdeq	r7, [r1], -r8
   17ab4:	andeq	r7, r1, r8, ror #22
   17ab8:	ldrdeq	r7, [r1], -r8
   17abc:	andeq	r7, r1, r8, ror #22
   17ac0:	andeq	r7, r1, r8, ror #22
   17ac4:	andeq	r7, r1, r8, ror #22
   17ac8:	andeq	r7, r1, r8, ror #22
   17acc:	andeq	r7, r1, r8, ror #22
   17ad0:	andeq	r7, r1, r8, ror #22
   17ad4:	ldrdeq	r7, [r1], -r8
   17ad8:	mov	r1, #48	; 0x30
   17adc:	ldr	r0, [fp, #4]
   17ae0:	bl	10e38 <strchr@plt>
   17ae4:	mov	r3, r0
   17ae8:	cmp	r3, #0
   17aec:	beq	17b5c <__assert_fail@plt+0x6c40>
   17af0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17af4:	ldr	r3, [r3]
   17af8:	add	r3, r3, #1
   17afc:	ldrb	r3, [r3]
   17b00:	cmp	r3, #68	; 0x44
   17b04:	beq	17b44 <__assert_fail@plt+0x6c28>
   17b08:	cmp	r3, #105	; 0x69
   17b0c:	beq	17b1c <__assert_fail@plt+0x6c00>
   17b10:	cmp	r3, #66	; 0x42
   17b14:	beq	17b44 <__assert_fail@plt+0x6c28>
   17b18:	b	17b68 <__assert_fail@plt+0x6c4c>
   17b1c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17b20:	ldr	r3, [r3]
   17b24:	add	r3, r3, #2
   17b28:	ldrb	r3, [r3]
   17b2c:	cmp	r3, #66	; 0x42
   17b30:	bne	17b64 <__assert_fail@plt+0x6c48>
   17b34:	ldr	r3, [fp, #-16]
   17b38:	add	r3, r3, #2
   17b3c:	str	r3, [fp, #-16]
   17b40:	b	17b64 <__assert_fail@plt+0x6c48>
   17b44:	mov	r3, #1000	; 0x3e8
   17b48:	str	r3, [fp, #-12]
   17b4c:	ldr	r3, [fp, #-16]
   17b50:	add	r3, r3, #1
   17b54:	str	r3, [fp, #-16]
   17b58:	b	17b68 <__assert_fail@plt+0x6c4c>
   17b5c:	nop	{0}
   17b60:	b	17b68 <__assert_fail@plt+0x6c4c>
   17b64:	nop	{0}
   17b68:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17b6c:	ldr	r3, [r3]
   17b70:	ldrb	r3, [r3]
   17b74:	sub	r3, r3, #66	; 0x42
   17b78:	cmp	r3, #53	; 0x35
   17b7c:	ldrls	pc, [pc, r3, lsl #2]
   17b80:	b	17d90 <__assert_fail@plt+0x6e74>
   17b84:	andeq	r7, r1, r4, ror ip
   17b88:	muleq	r1, r0, sp
   17b8c:	muleq	r1, r0, sp
   17b90:	muleq	r1, r8, ip
   17b94:	muleq	r1, r0, sp
   17b98:			; <UNDEFINED> instruction: 0x00017cb4
   17b9c:	muleq	r1, r0, sp
   17ba0:	muleq	r1, r0, sp
   17ba4:	muleq	r1, r0, sp
   17ba8:	ldrdeq	r7, [r1], -r0
   17bac:	muleq	r1, r0, sp
   17bb0:	andeq	r7, r1, ip, ror #25
   17bb4:	muleq	r1, r0, sp
   17bb8:	muleq	r1, r0, sp
   17bbc:	andeq	r7, r1, r8, lsl #26
   17bc0:	muleq	r1, r0, sp
   17bc4:	muleq	r1, r0, sp
   17bc8:	muleq	r1, r0, sp
   17bcc:	andeq	r7, r1, r4, lsr #26
   17bd0:	muleq	r1, r0, sp
   17bd4:	muleq	r1, r0, sp
   17bd8:	muleq	r1, r0, sp
   17bdc:	muleq	r1, r0, sp
   17be0:	andeq	r7, r1, r8, asr sp
   17be4:	andeq	r7, r1, r4, ror sp
   17be8:	muleq	r1, r0, sp
   17bec:	muleq	r1, r0, sp
   17bf0:	muleq	r1, r0, sp
   17bf4:	muleq	r1, r0, sp
   17bf8:	muleq	r1, r0, sp
   17bfc:	muleq	r1, r0, sp
   17c00:	muleq	r1, r0, sp
   17c04:	andeq	r7, r1, ip, asr ip
   17c08:	andeq	r7, r1, ip, lsl #25
   17c0c:	muleq	r1, r0, sp
   17c10:	muleq	r1, r0, sp
   17c14:	muleq	r1, r0, sp
   17c18:			; <UNDEFINED> instruction: 0x00017cb4
   17c1c:	muleq	r1, r0, sp
   17c20:	muleq	r1, r0, sp
   17c24:	muleq	r1, r0, sp
   17c28:	ldrdeq	r7, [r1], -r0
   17c2c:	muleq	r1, r0, sp
   17c30:	andeq	r7, r1, ip, ror #25
   17c34:	muleq	r1, r0, sp
   17c38:	muleq	r1, r0, sp
   17c3c:	muleq	r1, r0, sp
   17c40:	muleq	r1, r0, sp
   17c44:	muleq	r1, r0, sp
   17c48:	muleq	r1, r0, sp
   17c4c:	andeq	r7, r1, r4, lsr #26
   17c50:	muleq	r1, r0, sp
   17c54:	muleq	r1, r0, sp
   17c58:	andeq	r7, r1, r0, asr #26
   17c5c:	sub	r3, fp, #36	; 0x24
   17c60:	mov	r1, #512	; 0x200
   17c64:	mov	r0, r3
   17c68:	bl	175a4 <__assert_fail@plt+0x6688>
   17c6c:	str	r0, [fp, #-20]	; 0xffffffec
   17c70:	b	17da8 <__assert_fail@plt+0x6e8c>
   17c74:	sub	r3, fp, #36	; 0x24
   17c78:	mov	r1, #1024	; 0x400
   17c7c:	mov	r0, r3
   17c80:	bl	175a4 <__assert_fail@plt+0x6688>
   17c84:	str	r0, [fp, #-20]	; 0xffffffec
   17c88:	b	17da8 <__assert_fail@plt+0x6e8c>
   17c8c:	mov	r3, #0
   17c90:	str	r3, [fp, #-20]	; 0xffffffec
   17c94:	b	17da8 <__assert_fail@plt+0x6e8c>
   17c98:	sub	r3, fp, #36	; 0x24
   17c9c:	mov	r2, #6
   17ca0:	ldr	r1, [fp, #-12]
   17ca4:	mov	r0, r3
   17ca8:	bl	177bc <__assert_fail@plt+0x68a0>
   17cac:	str	r0, [fp, #-20]	; 0xffffffec
   17cb0:	b	17da8 <__assert_fail@plt+0x6e8c>
   17cb4:	sub	r3, fp, #36	; 0x24
   17cb8:	mov	r2, #3
   17cbc:	ldr	r1, [fp, #-12]
   17cc0:	mov	r0, r3
   17cc4:	bl	177bc <__assert_fail@plt+0x68a0>
   17cc8:	str	r0, [fp, #-20]	; 0xffffffec
   17ccc:	b	17da8 <__assert_fail@plt+0x6e8c>
   17cd0:	sub	r3, fp, #36	; 0x24
   17cd4:	mov	r2, #1
   17cd8:	ldr	r1, [fp, #-12]
   17cdc:	mov	r0, r3
   17ce0:	bl	177bc <__assert_fail@plt+0x68a0>
   17ce4:	str	r0, [fp, #-20]	; 0xffffffec
   17ce8:	b	17da8 <__assert_fail@plt+0x6e8c>
   17cec:	sub	r3, fp, #36	; 0x24
   17cf0:	mov	r2, #2
   17cf4:	ldr	r1, [fp, #-12]
   17cf8:	mov	r0, r3
   17cfc:	bl	177bc <__assert_fail@plt+0x68a0>
   17d00:	str	r0, [fp, #-20]	; 0xffffffec
   17d04:	b	17da8 <__assert_fail@plt+0x6e8c>
   17d08:	sub	r3, fp, #36	; 0x24
   17d0c:	mov	r2, #5
   17d10:	ldr	r1, [fp, #-12]
   17d14:	mov	r0, r3
   17d18:	bl	177bc <__assert_fail@plt+0x68a0>
   17d1c:	str	r0, [fp, #-20]	; 0xffffffec
   17d20:	b	17da8 <__assert_fail@plt+0x6e8c>
   17d24:	sub	r3, fp, #36	; 0x24
   17d28:	mov	r2, #4
   17d2c:	ldr	r1, [fp, #-12]
   17d30:	mov	r0, r3
   17d34:	bl	177bc <__assert_fail@plt+0x68a0>
   17d38:	str	r0, [fp, #-20]	; 0xffffffec
   17d3c:	b	17da8 <__assert_fail@plt+0x6e8c>
   17d40:	sub	r3, fp, #36	; 0x24
   17d44:	mov	r1, #2
   17d48:	mov	r0, r3
   17d4c:	bl	175a4 <__assert_fail@plt+0x6688>
   17d50:	str	r0, [fp, #-20]	; 0xffffffec
   17d54:	b	17da8 <__assert_fail@plt+0x6e8c>
   17d58:	sub	r3, fp, #36	; 0x24
   17d5c:	mov	r2, #8
   17d60:	ldr	r1, [fp, #-12]
   17d64:	mov	r0, r3
   17d68:	bl	177bc <__assert_fail@plt+0x68a0>
   17d6c:	str	r0, [fp, #-20]	; 0xffffffec
   17d70:	b	17da8 <__assert_fail@plt+0x6e8c>
   17d74:	sub	r3, fp, #36	; 0x24
   17d78:	mov	r2, #7
   17d7c:	ldr	r1, [fp, #-12]
   17d80:	mov	r0, r3
   17d84:	bl	177bc <__assert_fail@plt+0x68a0>
   17d88:	str	r0, [fp, #-20]	; 0xffffffec
   17d8c:	b	17da8 <__assert_fail@plt+0x6e8c>
   17d90:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   17d94:	ldr	r1, [fp, #-52]	; 0xffffffcc
   17d98:	strd	r2, [r1]
   17d9c:	ldr	r3, [fp, #-8]
   17da0:	orr	r3, r3, #2
   17da4:	b	17e00 <__assert_fail@plt+0x6ee4>
   17da8:	ldr	r2, [fp, #-8]
   17dac:	ldr	r3, [fp, #-20]	; 0xffffffec
   17db0:	orr	r3, r2, r3
   17db4:	str	r3, [fp, #-8]
   17db8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17dbc:	ldr	r2, [r3]
   17dc0:	ldr	r3, [fp, #-16]
   17dc4:	add	r2, r2, r3
   17dc8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17dcc:	str	r2, [r3]
   17dd0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17dd4:	ldr	r3, [r3]
   17dd8:	ldrb	r3, [r3]
   17ddc:	cmp	r3, #0
   17de0:	beq	17df0 <__assert_fail@plt+0x6ed4>
   17de4:	ldr	r3, [fp, #-8]
   17de8:	orr	r3, r3, #2
   17dec:	str	r3, [fp, #-8]
   17df0:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   17df4:	ldr	r1, [fp, #-52]	; 0xffffffcc
   17df8:	strd	r2, [r1]
   17dfc:	ldr	r3, [fp, #-8]
   17e00:	mov	r0, r3
   17e04:	sub	sp, fp, #4
   17e08:	ldr	fp, [sp]
   17e0c:	add	sp, sp, #4
   17e10:	pop	{pc}		; (ldr pc, [sp], #4)
   17e14:	str	fp, [sp, #-8]!
   17e18:	str	lr, [sp, #4]
   17e1c:	add	fp, sp, #4
   17e20:	sub	sp, sp, #16
   17e24:	str	r0, [fp, #-16]
   17e28:	str	r1, [fp, #-20]	; 0xffffffec
   17e2c:	ldr	r3, [fp, #-16]
   17e30:	cmp	r3, #0
   17e34:	beq	17e44 <__assert_fail@plt+0x6f28>
   17e38:	ldr	r3, [fp, #-20]	; 0xffffffec
   17e3c:	cmp	r3, #0
   17e40:	bne	17e54 <__assert_fail@plt+0x6f38>
   17e44:	mov	r3, #1
   17e48:	str	r3, [fp, #-20]	; 0xffffffec
   17e4c:	ldr	r3, [fp, #-20]	; 0xffffffec
   17e50:	str	r3, [fp, #-16]
   17e54:	mov	ip, #0
   17e58:	ldr	r2, [fp, #-16]
   17e5c:	ldr	r3, [fp, #-20]	; 0xffffffec
   17e60:	umull	r0, r1, r2, r3
   17e64:	mov	r2, #0
   17e68:	mov	r3, #0
   17e6c:	mov	r2, r1
   17e70:	mov	r3, #0
   17e74:	cmp	r2, #0
   17e78:	beq	17e80 <__assert_fail@plt+0x6f64>
   17e7c:	mov	ip, #1
   17e80:	cmp	r0, #0
   17e84:	bge	17e8c <__assert_fail@plt+0x6f70>
   17e88:	mov	ip, #1
   17e8c:	mov	r3, ip
   17e90:	and	r3, r3, #1
   17e94:	uxtb	r3, r3
   17e98:	cmp	r3, #0
   17e9c:	beq	17eb8 <__assert_fail@plt+0x6f9c>
   17ea0:	bl	10e50 <__errno_location@plt>
   17ea4:	mov	r2, r0
   17ea8:	mov	r3, #12
   17eac:	str	r3, [r2]
   17eb0:	mov	r3, #0
   17eb4:	b	17ed0 <__assert_fail@plt+0x6fb4>
   17eb8:	ldr	r1, [fp, #-20]	; 0xffffffec
   17ebc:	ldr	r0, [fp, #-16]
   17ec0:	bl	10cac <calloc@plt>
   17ec4:	mov	r3, r0
   17ec8:	str	r3, [fp, #-8]
   17ecc:	ldr	r3, [fp, #-8]
   17ed0:	mov	r0, r3
   17ed4:	sub	sp, fp, #4
   17ed8:	ldr	fp, [sp]
   17edc:	add	sp, sp, #4
   17ee0:	pop	{pc}		; (ldr pc, [sp], #4)
   17ee4:	str	fp, [sp, #-8]!
   17ee8:	str	lr, [sp, #4]
   17eec:	add	fp, sp, #4
   17ef0:	sub	sp, sp, #16
   17ef4:	str	r0, [fp, #-16]
   17ef8:	ldr	r3, [fp, #-16]
   17efc:	cmp	r3, #0
   17f00:	bne	17f0c <__assert_fail@plt+0x6ff0>
   17f04:	mov	r3, #1
   17f08:	str	r3, [fp, #-16]
   17f0c:	mov	r2, #0
   17f10:	ldr	r3, [fp, #-16]
   17f14:	cmp	r3, #0
   17f18:	bge	17f20 <__assert_fail@plt+0x7004>
   17f1c:	mov	r2, #1
   17f20:	mov	r3, r2
   17f24:	and	r3, r3, #1
   17f28:	uxtb	r3, r3
   17f2c:	cmp	r3, #0
   17f30:	beq	17f4c <__assert_fail@plt+0x7030>
   17f34:	bl	10e50 <__errno_location@plt>
   17f38:	mov	r2, r0
   17f3c:	mov	r3, #12
   17f40:	str	r3, [r2]
   17f44:	mov	r3, #0
   17f48:	b	17f60 <__assert_fail@plt+0x7044>
   17f4c:	ldr	r0, [fp, #-16]
   17f50:	bl	10dcc <malloc@plt>
   17f54:	mov	r3, r0
   17f58:	str	r3, [fp, #-8]
   17f5c:	ldr	r3, [fp, #-8]
   17f60:	mov	r0, r3
   17f64:	sub	sp, fp, #4
   17f68:	ldr	fp, [sp]
   17f6c:	add	sp, sp, #4
   17f70:	pop	{pc}		; (ldr pc, [sp], #4)
   17f74:	str	fp, [sp, #-8]!
   17f78:	str	lr, [sp, #4]
   17f7c:	add	fp, sp, #4
   17f80:	sub	sp, sp, #16
   17f84:	str	r0, [fp, #-16]
   17f88:	str	r1, [fp, #-20]	; 0xffffffec
   17f8c:	ldr	r3, [fp, #-16]
   17f90:	cmp	r3, #0
   17f94:	bne	17fa8 <__assert_fail@plt+0x708c>
   17f98:	ldr	r0, [fp, #-20]	; 0xffffffec
   17f9c:	bl	17ee4 <__assert_fail@plt+0x6fc8>
   17fa0:	mov	r3, r0
   17fa4:	b	18018 <__assert_fail@plt+0x70fc>
   17fa8:	ldr	r3, [fp, #-20]	; 0xffffffec
   17fac:	cmp	r3, #0
   17fb0:	bne	17fc4 <__assert_fail@plt+0x70a8>
   17fb4:	ldr	r0, [fp, #-16]
   17fb8:	bl	136f0 <__assert_fail@plt+0x27d4>
   17fbc:	mov	r3, #0
   17fc0:	b	18018 <__assert_fail@plt+0x70fc>
   17fc4:	mov	r2, #0
   17fc8:	ldr	r3, [fp, #-20]	; 0xffffffec
   17fcc:	cmp	r3, #0
   17fd0:	bge	17fd8 <__assert_fail@plt+0x70bc>
   17fd4:	mov	r2, #1
   17fd8:	mov	r3, r2
   17fdc:	and	r3, r3, #1
   17fe0:	uxtb	r3, r3
   17fe4:	cmp	r3, #0
   17fe8:	beq	18004 <__assert_fail@plt+0x70e8>
   17fec:	bl	10e50 <__errno_location@plt>
   17ff0:	mov	r2, r0
   17ff4:	mov	r3, #12
   17ff8:	str	r3, [r2]
   17ffc:	mov	r3, #0
   18000:	b	18018 <__assert_fail@plt+0x70fc>
   18004:	ldr	r1, [fp, #-20]	; 0xffffffec
   18008:	ldr	r0, [fp, #-16]
   1800c:	bl	10d54 <realloc@plt>
   18010:	str	r0, [fp, #-8]
   18014:	ldr	r3, [fp, #-8]
   18018:	mov	r0, r3
   1801c:	sub	sp, fp, #4
   18020:	ldr	fp, [sp]
   18024:	add	sp, sp, #4
   18028:	pop	{pc}		; (ldr pc, [sp], #4)
   1802c:	push	{fp}		; (str fp, [sp, #-4]!)
   18030:	add	fp, sp, #0
   18034:	sub	sp, sp, #12
   18038:	str	r0, [fp, #-8]
   1803c:	str	r1, [fp, #-12]
   18040:	mov	r3, #0
   18044:	mov	r0, r3
   18048:	add	sp, fp, #0
   1804c:	pop	{fp}		; (ldr fp, [sp], #4)
   18050:	bx	lr
   18054:	str	fp, [sp, #-8]!
   18058:	str	lr, [sp, #4]
   1805c:	add	fp, sp, #4
   18060:	sub	sp, sp, #8
   18064:	str	r0, [fp, #-8]
   18068:	str	r1, [fp, #-12]
   1806c:	ldr	r1, [fp, #-12]
   18070:	ldr	r0, [fp, #-8]
   18074:	bl	1802c <__assert_fail@plt+0x7110>
   18078:	mov	r3, r0
   1807c:	mov	r0, r3
   18080:	sub	sp, fp, #4
   18084:	ldr	fp, [sp]
   18088:	add	sp, sp, #4
   1808c:	pop	{pc}		; (ldr pc, [sp], #4)
   18090:	strd	r4, [sp, #-16]!
   18094:	str	fp, [sp, #8]
   18098:	str	lr, [sp, #12]
   1809c:	add	fp, sp, #12
   180a0:	sub	sp, sp, #16
   180a4:	str	r0, [fp, #-24]	; 0xffffffe8
   180a8:	str	r1, [fp, #-28]	; 0xffffffe4
   180ac:	ldr	r5, [fp, #-24]	; 0xffffffe8
   180b0:	ldr	r4, [fp, #-28]	; 0xffffffe4
   180b4:	cmp	r5, r4
   180b8:	bne	180c4 <__assert_fail@plt+0x71a8>
   180bc:	mov	r3, #0
   180c0:	b	18124 <__assert_fail@plt+0x7208>
   180c4:	ldrb	r3, [r5]
   180c8:	mov	r0, r3
   180cc:	bl	187e8 <__assert_fail@plt+0x78cc>
   180d0:	mov	r3, r0
   180d4:	strb	r3, [fp, #-13]
   180d8:	ldrb	r3, [r4]
   180dc:	mov	r0, r3
   180e0:	bl	187e8 <__assert_fail@plt+0x78cc>
   180e4:	mov	r3, r0
   180e8:	strb	r3, [fp, #-14]
   180ec:	ldrb	r3, [fp, #-13]
   180f0:	cmp	r3, #0
   180f4:	beq	18114 <__assert_fail@plt+0x71f8>
   180f8:	add	r5, r5, #1
   180fc:	add	r4, r4, #1
   18100:	ldrb	r2, [fp, #-13]
   18104:	ldrb	r3, [fp, #-14]
   18108:	cmp	r2, r3
   1810c:	beq	180c4 <__assert_fail@plt+0x71a8>
   18110:	b	18118 <__assert_fail@plt+0x71fc>
   18114:	nop	{0}
   18118:	ldrb	r2, [fp, #-13]
   1811c:	ldrb	r3, [fp, #-14]
   18120:	sub	r3, r2, r3
   18124:	mov	r0, r3
   18128:	sub	sp, fp, #12
   1812c:	ldrd	r4, [sp]
   18130:	ldr	fp, [sp, #8]
   18134:	add	sp, sp, #12
   18138:	pop	{pc}		; (ldr pc, [sp], #4)
   1813c:	str	fp, [sp, #-8]!
   18140:	str	lr, [sp, #4]
   18144:	add	fp, sp, #4
   18148:	sub	sp, sp, #16
   1814c:	str	r0, [fp, #-16]
   18150:	ldr	r0, [fp, #-16]
   18154:	bl	10d9c <__fpending@plt>
   18158:	mov	r3, r0
   1815c:	cmp	r3, #0
   18160:	movne	r3, #1
   18164:	moveq	r3, #0
   18168:	strb	r3, [fp, #-5]
   1816c:	ldr	r0, [fp, #-16]
   18170:	bl	10da8 <ferror_unlocked@plt>
   18174:	mov	r3, r0
   18178:	cmp	r3, #0
   1817c:	movne	r3, #1
   18180:	moveq	r3, #0
   18184:	strb	r3, [fp, #-6]
   18188:	ldr	r0, [fp, #-16]
   1818c:	bl	1352c <__assert_fail@plt+0x2610>
   18190:	mov	r3, r0
   18194:	cmp	r3, #0
   18198:	movne	r3, #1
   1819c:	moveq	r3, #0
   181a0:	strb	r3, [fp, #-7]
   181a4:	ldrb	r3, [fp, #-6]
   181a8:	cmp	r3, #0
   181ac:	bne	181dc <__assert_fail@plt+0x72c0>
   181b0:	ldrb	r3, [fp, #-7]
   181b4:	cmp	r3, #0
   181b8:	beq	18208 <__assert_fail@plt+0x72ec>
   181bc:	ldrb	r3, [fp, #-5]
   181c0:	cmp	r3, #0
   181c4:	bne	181dc <__assert_fail@plt+0x72c0>
   181c8:	bl	10e50 <__errno_location@plt>
   181cc:	mov	r3, r0
   181d0:	ldr	r3, [r3]
   181d4:	cmp	r3, #9
   181d8:	beq	18208 <__assert_fail@plt+0x72ec>
   181dc:	ldrb	r3, [fp, #-7]
   181e0:	eor	r3, r3, #1
   181e4:	uxtb	r3, r3
   181e8:	cmp	r3, #0
   181ec:	beq	18200 <__assert_fail@plt+0x72e4>
   181f0:	bl	10e50 <__errno_location@plt>
   181f4:	mov	r2, r0
   181f8:	mov	r3, #0
   181fc:	str	r3, [r2]
   18200:	mvn	r3, #0
   18204:	b	1820c <__assert_fail@plt+0x72f0>
   18208:	mov	r3, #0
   1820c:	mov	r0, r3
   18210:	sub	sp, fp, #4
   18214:	ldr	fp, [sp]
   18218:	add	sp, sp, #4
   1821c:	pop	{pc}		; (ldr pc, [sp], #4)
   18220:	str	fp, [sp, #-8]!
   18224:	str	lr, [sp, #4]
   18228:	add	fp, sp, #4
   1822c:	sub	sp, sp, #8
   18230:	mov	r0, #14
   18234:	bl	10ec8 <nl_langinfo@plt>
   18238:	str	r0, [fp, #-8]
   1823c:	ldr	r3, [fp, #-8]
   18240:	cmp	r3, #0
   18244:	bne	18254 <__assert_fail@plt+0x7338>
   18248:	movw	r3, #38844	; 0x97bc
   1824c:	movt	r3, #1
   18250:	str	r3, [fp, #-8]
   18254:	ldr	r3, [fp, #-8]
   18258:	ldrb	r3, [r3]
   1825c:	cmp	r3, #0
   18260:	bne	18270 <__assert_fail@plt+0x7354>
   18264:	movw	r3, #38848	; 0x97c0
   18268:	movt	r3, #1
   1826c:	str	r3, [fp, #-8]
   18270:	ldr	r3, [fp, #-8]
   18274:	mov	r0, r3
   18278:	sub	sp, fp, #4
   1827c:	ldr	fp, [sp]
   18280:	add	sp, sp, #4
   18284:	pop	{pc}		; (ldr pc, [sp], #4)
   18288:	str	fp, [sp, #-8]!
   1828c:	str	lr, [sp, #4]
   18290:	add	fp, sp, #4
   18294:	sub	sp, sp, #32
   18298:	str	r0, [fp, #-24]	; 0xffffffe8
   1829c:	str	r1, [fp, #-28]	; 0xffffffe4
   182a0:	str	r2, [fp, #-32]	; 0xffffffe0
   182a4:	str	r3, [fp, #-36]	; 0xffffffdc
   182a8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   182ac:	cmp	r3, #0
   182b0:	bne	182bc <__assert_fail@plt+0x73a0>
   182b4:	sub	r3, fp, #16
   182b8:	str	r3, [fp, #-24]	; 0xffffffe8
   182bc:	ldr	r3, [fp, #-36]	; 0xffffffdc
   182c0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   182c4:	ldr	r1, [fp, #-28]	; 0xffffffe4
   182c8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   182cc:	bl	10db4 <mbrtowc@plt>
   182d0:	str	r0, [fp, #-8]
   182d4:	ldr	r3, [fp, #-8]
   182d8:	cmn	r3, #3
   182dc:	bls	18328 <__assert_fail@plt+0x740c>
   182e0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   182e4:	cmp	r3, #0
   182e8:	beq	18328 <__assert_fail@plt+0x740c>
   182ec:	mov	r0, #0
   182f0:	bl	18868 <__assert_fail@plt+0x794c>
   182f4:	mov	r3, r0
   182f8:	eor	r3, r3, #1
   182fc:	uxtb	r3, r3
   18300:	cmp	r3, #0
   18304:	beq	18328 <__assert_fail@plt+0x740c>
   18308:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1830c:	ldrb	r3, [r3]
   18310:	strb	r3, [fp, #-9]
   18314:	ldrb	r2, [fp, #-9]
   18318:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1831c:	str	r2, [r3]
   18320:	mov	r3, #1
   18324:	b	1832c <__assert_fail@plt+0x7410>
   18328:	ldr	r3, [fp, #-8]
   1832c:	mov	r0, r3
   18330:	sub	sp, fp, #4
   18334:	ldr	fp, [sp]
   18338:	add	sp, sp, #4
   1833c:	pop	{pc}		; (ldr pc, [sp], #4)
   18340:	push	{fp}		; (str fp, [sp, #-4]!)
   18344:	add	fp, sp, #0
   18348:	sub	sp, sp, #12
   1834c:	str	r0, [fp, #-8]
   18350:	ldr	r3, [fp, #-8]
   18354:	cmp	r3, #90	; 0x5a
   18358:	bgt	1837c <__assert_fail@plt+0x7460>
   1835c:	ldr	r3, [fp, #-8]
   18360:	cmp	r3, #65	; 0x41
   18364:	bge	1838c <__assert_fail@plt+0x7470>
   18368:	ldr	r3, [fp, #-8]
   1836c:	sub	r3, r3, #48	; 0x30
   18370:	cmp	r3, #9
   18374:	bhi	18394 <__assert_fail@plt+0x7478>
   18378:	b	1838c <__assert_fail@plt+0x7470>
   1837c:	ldr	r3, [fp, #-8]
   18380:	sub	r3, r3, #97	; 0x61
   18384:	cmp	r3, #25
   18388:	bhi	18394 <__assert_fail@plt+0x7478>
   1838c:	mov	r3, #1
   18390:	b	18398 <__assert_fail@plt+0x747c>
   18394:	mov	r3, #0
   18398:	mov	r0, r3
   1839c:	add	sp, fp, #0
   183a0:	pop	{fp}		; (ldr fp, [sp], #4)
   183a4:	bx	lr
   183a8:	push	{fp}		; (str fp, [sp, #-4]!)
   183ac:	add	fp, sp, #0
   183b0:	sub	sp, sp, #12
   183b4:	str	r0, [fp, #-8]
   183b8:	ldr	r3, [fp, #-8]
   183bc:	cmp	r3, #65	; 0x41
   183c0:	blt	183e8 <__assert_fail@plt+0x74cc>
   183c4:	ldr	r3, [fp, #-8]
   183c8:	cmp	r3, #90	; 0x5a
   183cc:	ble	183e0 <__assert_fail@plt+0x74c4>
   183d0:	ldr	r3, [fp, #-8]
   183d4:	sub	r3, r3, #97	; 0x61
   183d8:	cmp	r3, #25
   183dc:	bhi	183e8 <__assert_fail@plt+0x74cc>
   183e0:	mov	r3, #1
   183e4:	b	183ec <__assert_fail@plt+0x74d0>
   183e8:	mov	r3, #0
   183ec:	mov	r0, r3
   183f0:	add	sp, fp, #0
   183f4:	pop	{fp}		; (ldr fp, [sp], #4)
   183f8:	bx	lr
   183fc:	push	{fp}		; (str fp, [sp, #-4]!)
   18400:	add	fp, sp, #0
   18404:	sub	sp, sp, #12
   18408:	str	r0, [fp, #-8]
   1840c:	ldr	r3, [fp, #-8]
   18410:	cmp	r3, #127	; 0x7f
   18414:	bhi	18420 <__assert_fail@plt+0x7504>
   18418:	mov	r3, #1
   1841c:	b	18424 <__assert_fail@plt+0x7508>
   18420:	mov	r3, #0
   18424:	mov	r0, r3
   18428:	add	sp, fp, #0
   1842c:	pop	{fp}		; (ldr fp, [sp], #4)
   18430:	bx	lr
   18434:	push	{fp}		; (str fp, [sp, #-4]!)
   18438:	add	fp, sp, #0
   1843c:	sub	sp, sp, #12
   18440:	str	r0, [fp, #-8]
   18444:	ldr	r3, [fp, #-8]
   18448:	cmp	r3, #32
   1844c:	beq	1845c <__assert_fail@plt+0x7540>
   18450:	ldr	r3, [fp, #-8]
   18454:	cmp	r3, #9
   18458:	bne	18464 <__assert_fail@plt+0x7548>
   1845c:	mov	r3, #1
   18460:	b	18468 <__assert_fail@plt+0x754c>
   18464:	mov	r3, #0
   18468:	and	r3, r3, #1
   1846c:	uxtb	r3, r3
   18470:	mov	r0, r3
   18474:	add	sp, fp, #0
   18478:	pop	{fp}		; (ldr fp, [sp], #4)
   1847c:	bx	lr
   18480:	push	{fp}		; (str fp, [sp, #-4]!)
   18484:	add	fp, sp, #0
   18488:	sub	sp, sp, #12
   1848c:	str	r0, [fp, #-8]
   18490:	ldr	r3, [fp, #-8]
   18494:	cmp	r3, #0
   18498:	blt	184bc <__assert_fail@plt+0x75a0>
   1849c:	ldr	r3, [fp, #-8]
   184a0:	cmp	r3, #31
   184a4:	ble	184b4 <__assert_fail@plt+0x7598>
   184a8:	ldr	r3, [fp, #-8]
   184ac:	cmp	r3, #127	; 0x7f
   184b0:	bne	184bc <__assert_fail@plt+0x75a0>
   184b4:	mov	r3, #1
   184b8:	b	184c0 <__assert_fail@plt+0x75a4>
   184bc:	mov	r3, #0
   184c0:	mov	r0, r3
   184c4:	add	sp, fp, #0
   184c8:	pop	{fp}		; (ldr fp, [sp], #4)
   184cc:	bx	lr
   184d0:	push	{fp}		; (str fp, [sp, #-4]!)
   184d4:	add	fp, sp, #0
   184d8:	sub	sp, sp, #12
   184dc:	str	r0, [fp, #-8]
   184e0:	ldr	r3, [fp, #-8]
   184e4:	sub	r3, r3, #48	; 0x30
   184e8:	cmp	r3, #9
   184ec:	bhi	184f8 <__assert_fail@plt+0x75dc>
   184f0:	mov	r3, #1
   184f4:	b	184fc <__assert_fail@plt+0x75e0>
   184f8:	mov	r3, #0
   184fc:	mov	r0, r3
   18500:	add	sp, fp, #0
   18504:	pop	{fp}		; (ldr fp, [sp], #4)
   18508:	bx	lr
   1850c:	push	{fp}		; (str fp, [sp, #-4]!)
   18510:	add	fp, sp, #0
   18514:	sub	sp, sp, #12
   18518:	str	r0, [fp, #-8]
   1851c:	ldr	r3, [fp, #-8]
   18520:	sub	r3, r3, #33	; 0x21
   18524:	cmp	r3, #93	; 0x5d
   18528:	bhi	18534 <__assert_fail@plt+0x7618>
   1852c:	mov	r3, #1
   18530:	b	18538 <__assert_fail@plt+0x761c>
   18534:	mov	r3, #0
   18538:	mov	r0, r3
   1853c:	add	sp, fp, #0
   18540:	pop	{fp}		; (ldr fp, [sp], #4)
   18544:	bx	lr
   18548:	push	{fp}		; (str fp, [sp, #-4]!)
   1854c:	add	fp, sp, #0
   18550:	sub	sp, sp, #12
   18554:	str	r0, [fp, #-8]
   18558:	ldr	r3, [fp, #-8]
   1855c:	sub	r3, r3, #97	; 0x61
   18560:	cmp	r3, #25
   18564:	bhi	18570 <__assert_fail@plt+0x7654>
   18568:	mov	r3, #1
   1856c:	b	18574 <__assert_fail@plt+0x7658>
   18570:	mov	r3, #0
   18574:	mov	r0, r3
   18578:	add	sp, fp, #0
   1857c:	pop	{fp}		; (ldr fp, [sp], #4)
   18580:	bx	lr
   18584:	push	{fp}		; (str fp, [sp, #-4]!)
   18588:	add	fp, sp, #0
   1858c:	sub	sp, sp, #12
   18590:	str	r0, [fp, #-8]
   18594:	ldr	r3, [fp, #-8]
   18598:	sub	r3, r3, #32
   1859c:	cmp	r3, #94	; 0x5e
   185a0:	bhi	185ac <__assert_fail@plt+0x7690>
   185a4:	mov	r3, #1
   185a8:	b	185b0 <__assert_fail@plt+0x7694>
   185ac:	mov	r3, #0
   185b0:	mov	r0, r3
   185b4:	add	sp, fp, #0
   185b8:	pop	{fp}		; (ldr fp, [sp], #4)
   185bc:	bx	lr
   185c0:	push	{fp}		; (str fp, [sp, #-4]!)
   185c4:	add	fp, sp, #0
   185c8:	sub	sp, sp, #12
   185cc:	str	r0, [fp, #-8]
   185d0:	ldr	r3, [fp, #-8]
   185d4:	cmp	r3, #64	; 0x40
   185d8:	bgt	185fc <__assert_fail@plt+0x76e0>
   185dc:	ldr	r3, [fp, #-8]
   185e0:	cmp	r3, #58	; 0x3a
   185e4:	bge	18624 <__assert_fail@plt+0x7708>
   185e8:	ldr	r3, [fp, #-8]
   185ec:	sub	r3, r3, #33	; 0x21
   185f0:	cmp	r3, #14
   185f4:	bhi	1862c <__assert_fail@plt+0x7710>
   185f8:	b	18624 <__assert_fail@plt+0x7708>
   185fc:	ldr	r3, [fp, #-8]
   18600:	cmp	r3, #91	; 0x5b
   18604:	blt	1862c <__assert_fail@plt+0x7710>
   18608:	ldr	r3, [fp, #-8]
   1860c:	cmp	r3, #96	; 0x60
   18610:	ble	18624 <__assert_fail@plt+0x7708>
   18614:	ldr	r3, [fp, #-8]
   18618:	sub	r3, r3, #123	; 0x7b
   1861c:	cmp	r3, #3
   18620:	bhi	1862c <__assert_fail@plt+0x7710>
   18624:	mov	r3, #1
   18628:	b	18630 <__assert_fail@plt+0x7714>
   1862c:	mov	r3, #0
   18630:	mov	r0, r3
   18634:	add	sp, fp, #0
   18638:	pop	{fp}		; (ldr fp, [sp], #4)
   1863c:	bx	lr
   18640:	push	{fp}		; (str fp, [sp, #-4]!)
   18644:	add	fp, sp, #0
   18648:	sub	sp, sp, #12
   1864c:	str	r0, [fp, #-8]
   18650:	ldr	r3, [fp, #-8]
   18654:	cmp	r3, #9
   18658:	blt	1867c <__assert_fail@plt+0x7760>
   1865c:	ldr	r3, [fp, #-8]
   18660:	cmp	r3, #13
   18664:	ble	18674 <__assert_fail@plt+0x7758>
   18668:	ldr	r3, [fp, #-8]
   1866c:	cmp	r3, #32
   18670:	bne	1867c <__assert_fail@plt+0x7760>
   18674:	mov	r3, #1
   18678:	b	18680 <__assert_fail@plt+0x7764>
   1867c:	mov	r3, #0
   18680:	mov	r0, r3
   18684:	add	sp, fp, #0
   18688:	pop	{fp}		; (ldr fp, [sp], #4)
   1868c:	bx	lr
   18690:	push	{fp}		; (str fp, [sp, #-4]!)
   18694:	add	fp, sp, #0
   18698:	sub	sp, sp, #12
   1869c:	str	r0, [fp, #-8]
   186a0:	ldr	r3, [fp, #-8]
   186a4:	sub	r3, r3, #65	; 0x41
   186a8:	cmp	r3, #25
   186ac:	bhi	186b8 <__assert_fail@plt+0x779c>
   186b0:	mov	r3, #1
   186b4:	b	186bc <__assert_fail@plt+0x77a0>
   186b8:	mov	r3, #0
   186bc:	mov	r0, r3
   186c0:	add	sp, fp, #0
   186c4:	pop	{fp}		; (ldr fp, [sp], #4)
   186c8:	bx	lr
   186cc:	push	{fp}		; (str fp, [sp, #-4]!)
   186d0:	add	fp, sp, #0
   186d4:	sub	sp, sp, #12
   186d8:	str	r0, [fp, #-8]
   186dc:	ldr	r3, [fp, #-8]
   186e0:	sub	r3, r3, #48	; 0x30
   186e4:	cmp	r3, #54	; 0x36
   186e8:	ldrls	pc, [pc, r3, lsl #2]
   186ec:	b	187d4 <__assert_fail@plt+0x78b8>
   186f0:	andeq	r8, r1, ip, asr #15
   186f4:	andeq	r8, r1, ip, asr #15
   186f8:	andeq	r8, r1, ip, asr #15
   186fc:	andeq	r8, r1, ip, asr #15
   18700:	andeq	r8, r1, ip, asr #15
   18704:	andeq	r8, r1, ip, asr #15
   18708:	andeq	r8, r1, ip, asr #15
   1870c:	andeq	r8, r1, ip, asr #15
   18710:	andeq	r8, r1, ip, asr #15
   18714:	andeq	r8, r1, ip, asr #15
   18718:	ldrdeq	r8, [r1], -r4
   1871c:	ldrdeq	r8, [r1], -r4
   18720:	ldrdeq	r8, [r1], -r4
   18724:	ldrdeq	r8, [r1], -r4
   18728:	ldrdeq	r8, [r1], -r4
   1872c:	ldrdeq	r8, [r1], -r4
   18730:	ldrdeq	r8, [r1], -r4
   18734:	andeq	r8, r1, ip, asr #15
   18738:	andeq	r8, r1, ip, asr #15
   1873c:	andeq	r8, r1, ip, asr #15
   18740:	andeq	r8, r1, ip, asr #15
   18744:	andeq	r8, r1, ip, asr #15
   18748:	andeq	r8, r1, ip, asr #15
   1874c:	ldrdeq	r8, [r1], -r4
   18750:	ldrdeq	r8, [r1], -r4
   18754:	ldrdeq	r8, [r1], -r4
   18758:	ldrdeq	r8, [r1], -r4
   1875c:	ldrdeq	r8, [r1], -r4
   18760:	ldrdeq	r8, [r1], -r4
   18764:	ldrdeq	r8, [r1], -r4
   18768:	ldrdeq	r8, [r1], -r4
   1876c:	ldrdeq	r8, [r1], -r4
   18770:	ldrdeq	r8, [r1], -r4
   18774:	ldrdeq	r8, [r1], -r4
   18778:	ldrdeq	r8, [r1], -r4
   1877c:	ldrdeq	r8, [r1], -r4
   18780:	ldrdeq	r8, [r1], -r4
   18784:	ldrdeq	r8, [r1], -r4
   18788:	ldrdeq	r8, [r1], -r4
   1878c:	ldrdeq	r8, [r1], -r4
   18790:	ldrdeq	r8, [r1], -r4
   18794:	ldrdeq	r8, [r1], -r4
   18798:	ldrdeq	r8, [r1], -r4
   1879c:	ldrdeq	r8, [r1], -r4
   187a0:	ldrdeq	r8, [r1], -r4
   187a4:	ldrdeq	r8, [r1], -r4
   187a8:	ldrdeq	r8, [r1], -r4
   187ac:	ldrdeq	r8, [r1], -r4
   187b0:	ldrdeq	r8, [r1], -r4
   187b4:	andeq	r8, r1, ip, asr #15
   187b8:	andeq	r8, r1, ip, asr #15
   187bc:	andeq	r8, r1, ip, asr #15
   187c0:	andeq	r8, r1, ip, asr #15
   187c4:	andeq	r8, r1, ip, asr #15
   187c8:	andeq	r8, r1, ip, asr #15
   187cc:	mov	r3, #1
   187d0:	b	187d8 <__assert_fail@plt+0x78bc>
   187d4:	mov	r3, #0
   187d8:	mov	r0, r3
   187dc:	add	sp, fp, #0
   187e0:	pop	{fp}		; (ldr fp, [sp], #4)
   187e4:	bx	lr
   187e8:	push	{fp}		; (str fp, [sp, #-4]!)
   187ec:	add	fp, sp, #0
   187f0:	sub	sp, sp, #12
   187f4:	str	r0, [fp, #-8]
   187f8:	ldr	r3, [fp, #-8]
   187fc:	sub	r3, r3, #65	; 0x41
   18800:	cmp	r3, #25
   18804:	bhi	18814 <__assert_fail@plt+0x78f8>
   18808:	ldr	r3, [fp, #-8]
   1880c:	add	r3, r3, #32
   18810:	b	18818 <__assert_fail@plt+0x78fc>
   18814:	ldr	r3, [fp, #-8]
   18818:	mov	r0, r3
   1881c:	add	sp, fp, #0
   18820:	pop	{fp}		; (ldr fp, [sp], #4)
   18824:	bx	lr
   18828:	push	{fp}		; (str fp, [sp, #-4]!)
   1882c:	add	fp, sp, #0
   18830:	sub	sp, sp, #12
   18834:	str	r0, [fp, #-8]
   18838:	ldr	r3, [fp, #-8]
   1883c:	sub	r3, r3, #97	; 0x61
   18840:	cmp	r3, #25
   18844:	bhi	18854 <__assert_fail@plt+0x7938>
   18848:	ldr	r3, [fp, #-8]
   1884c:	sub	r3, r3, #32
   18850:	b	18858 <__assert_fail@plt+0x793c>
   18854:	ldr	r3, [fp, #-8]
   18858:	mov	r0, r3
   1885c:	add	sp, fp, #0
   18860:	pop	{fp}		; (ldr fp, [sp], #4)
   18864:	bx	lr
   18868:	str	fp, [sp, #-8]!
   1886c:	str	lr, [sp, #4]
   18870:	add	fp, sp, #4
   18874:	sub	sp, sp, #272	; 0x110
   18878:	str	r0, [fp, #-272]	; 0xfffffef0
   1887c:	sub	r3, fp, #264	; 0x108
   18880:	movw	r2, #257	; 0x101
   18884:	mov	r1, r3
   18888:	ldr	r0, [fp, #-272]	; 0xfffffef0
   1888c:	bl	18a2c <__assert_fail@plt+0x7b10>
   18890:	mov	r3, r0
   18894:	cmp	r3, #0
   18898:	beq	188a4 <__assert_fail@plt+0x7988>
   1889c:	mov	r3, #0
   188a0:	b	188f8 <__assert_fail@plt+0x79dc>
   188a4:	sub	r3, fp, #264	; 0x108
   188a8:	movw	r1, #38856	; 0x97c8
   188ac:	movt	r1, #1
   188b0:	mov	r0, r3
   188b4:	bl	10cc4 <strcmp@plt>
   188b8:	mov	r3, r0
   188bc:	cmp	r3, #0
   188c0:	beq	188ec <__assert_fail@plt+0x79d0>
   188c4:	sub	r3, fp, #264	; 0x108
   188c8:	movw	r1, #38860	; 0x97cc
   188cc:	movt	r1, #1
   188d0:	mov	r0, r3
   188d4:	bl	10cc4 <strcmp@plt>
   188d8:	mov	r3, r0
   188dc:	cmp	r3, #0
   188e0:	beq	188ec <__assert_fail@plt+0x79d0>
   188e4:	mov	r3, #1
   188e8:	b	188f0 <__assert_fail@plt+0x79d4>
   188ec:	mov	r3, #0
   188f0:	and	r3, r3, #1
   188f4:	uxtb	r3, r3
   188f8:	mov	r0, r3
   188fc:	sub	sp, fp, #4
   18900:	ldr	fp, [sp]
   18904:	add	sp, sp, #4
   18908:	pop	{pc}		; (ldr pc, [sp], #4)
   1890c:	str	fp, [sp, #-8]!
   18910:	str	lr, [sp, #4]
   18914:	add	fp, sp, #4
   18918:	sub	sp, sp, #16
   1891c:	str	r0, [fp, #-16]
   18920:	mov	r1, #0
   18924:	ldr	r0, [fp, #-16]
   18928:	bl	10eb0 <setlocale@plt>
   1892c:	str	r0, [fp, #-8]
   18930:	ldr	r3, [fp, #-8]
   18934:	mov	r0, r3
   18938:	sub	sp, fp, #4
   1893c:	ldr	fp, [sp]
   18940:	add	sp, sp, #4
   18944:	pop	{pc}		; (ldr pc, [sp], #4)
   18948:	str	fp, [sp, #-8]!
   1894c:	str	lr, [sp, #4]
   18950:	add	fp, sp, #4
   18954:	sub	sp, sp, #24
   18958:	str	r0, [fp, #-16]
   1895c:	str	r1, [fp, #-20]	; 0xffffffec
   18960:	str	r2, [fp, #-24]	; 0xffffffe8
   18964:	ldr	r0, [fp, #-16]
   18968:	bl	1890c <__assert_fail@plt+0x79f0>
   1896c:	str	r0, [fp, #-8]
   18970:	ldr	r3, [fp, #-8]
   18974:	cmp	r3, #0
   18978:	bne	1899c <__assert_fail@plt+0x7a80>
   1897c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18980:	cmp	r3, #0
   18984:	beq	18994 <__assert_fail@plt+0x7a78>
   18988:	ldr	r3, [fp, #-20]	; 0xffffffec
   1898c:	mov	r2, #0
   18990:	strb	r2, [r3]
   18994:	mov	r3, #22
   18998:	b	18a18 <__assert_fail@plt+0x7afc>
   1899c:	ldr	r0, [fp, #-8]
   189a0:	bl	10e2c <strlen@plt>
   189a4:	str	r0, [fp, #-12]
   189a8:	ldr	r2, [fp, #-12]
   189ac:	ldr	r3, [fp, #-24]	; 0xffffffe8
   189b0:	cmp	r2, r3
   189b4:	bcs	189d8 <__assert_fail@plt+0x7abc>
   189b8:	ldr	r3, [fp, #-12]
   189bc:	add	r3, r3, #1
   189c0:	mov	r2, r3
   189c4:	ldr	r1, [fp, #-8]
   189c8:	ldr	r0, [fp, #-20]	; 0xffffffec
   189cc:	bl	10d18 <memcpy@plt>
   189d0:	mov	r3, #0
   189d4:	b	18a18 <__assert_fail@plt+0x7afc>
   189d8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   189dc:	cmp	r3, #0
   189e0:	beq	18a14 <__assert_fail@plt+0x7af8>
   189e4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   189e8:	sub	r3, r3, #1
   189ec:	mov	r2, r3
   189f0:	ldr	r1, [fp, #-8]
   189f4:	ldr	r0, [fp, #-20]	; 0xffffffec
   189f8:	bl	10d18 <memcpy@plt>
   189fc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18a00:	sub	r3, r3, #1
   18a04:	ldr	r2, [fp, #-20]	; 0xffffffec
   18a08:	add	r3, r2, r3
   18a0c:	mov	r2, #0
   18a10:	strb	r2, [r3]
   18a14:	mov	r3, #34	; 0x22
   18a18:	mov	r0, r3
   18a1c:	sub	sp, fp, #4
   18a20:	ldr	fp, [sp]
   18a24:	add	sp, sp, #4
   18a28:	pop	{pc}		; (ldr pc, [sp], #4)
   18a2c:	str	fp, [sp, #-8]!
   18a30:	str	lr, [sp, #4]
   18a34:	add	fp, sp, #4
   18a38:	sub	sp, sp, #16
   18a3c:	str	r0, [fp, #-8]
   18a40:	str	r1, [fp, #-12]
   18a44:	str	r2, [fp, #-16]
   18a48:	ldr	r2, [fp, #-16]
   18a4c:	ldr	r1, [fp, #-12]
   18a50:	ldr	r0, [fp, #-8]
   18a54:	bl	18948 <__assert_fail@plt+0x7a2c>
   18a58:	mov	r3, r0
   18a5c:	mov	r0, r3
   18a60:	sub	sp, fp, #4
   18a64:	ldr	fp, [sp]
   18a68:	add	sp, sp, #4
   18a6c:	pop	{pc}		; (ldr pc, [sp], #4)
   18a70:	str	fp, [sp, #-8]!
   18a74:	str	lr, [sp, #4]
   18a78:	add	fp, sp, #4
   18a7c:	sub	sp, sp, #8
   18a80:	str	r0, [fp, #-8]
   18a84:	ldr	r0, [fp, #-8]
   18a88:	bl	1890c <__assert_fail@plt+0x79f0>
   18a8c:	mov	r3, r0
   18a90:	mov	r0, r3
   18a94:	sub	sp, fp, #4
   18a98:	ldr	fp, [sp]
   18a9c:	add	sp, sp, #4
   18aa0:	pop	{pc}		; (ldr pc, [sp], #4)
   18aa4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18aa8:	mov	r7, r0
   18aac:	ldr	r6, [pc, #72]	; 18afc <__assert_fail@plt+0x7be0>
   18ab0:	ldr	r5, [pc, #72]	; 18b00 <__assert_fail@plt+0x7be4>
   18ab4:	add	r6, pc, r6
   18ab8:	add	r5, pc, r5
   18abc:	sub	r6, r6, r5
   18ac0:	mov	r8, r1
   18ac4:	mov	r9, r2
   18ac8:	bl	10c8c <calloc@plt-0x20>
   18acc:	asrs	r6, r6, #2
   18ad0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   18ad4:	mov	r4, #0
   18ad8:	add	r4, r4, #1
   18adc:	ldr	r3, [r5], #4
   18ae0:	mov	r2, r9
   18ae4:	mov	r1, r8
   18ae8:	mov	r0, r7
   18aec:	blx	r3
   18af0:	cmp	r6, r4
   18af4:	bne	18ad8 <__assert_fail@plt+0x7bbc>
   18af8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18afc:	andeq	r1, r1, r8, asr r4
   18b00:	andeq	r1, r1, r0, asr r4
   18b04:	bx	lr
   18b08:	ldr	r3, [pc, #12]	; 18b1c <__assert_fail@plt+0x7c00>
   18b0c:	mov	r1, #0
   18b10:	add	r3, pc, r3
   18b14:	ldr	r2, [r3]
   18b18:	b	10e5c <__cxa_atexit@plt>
   18b1c:	ldrdeq	r1, [r1], -r0

Disassembly of section .fini:

00018b20 <.fini>:
   18b20:	push	{r3, lr}
   18b24:	pop	{r3, pc}
