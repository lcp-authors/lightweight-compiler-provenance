
../repos/coreutils/src/base32:     file format elf32-littlearm


Disassembly of section .init:

00010c7c <.init>:
   10c7c:	push	{r3, lr}
   10c80:	bl	1164c <__assert_fail@plt+0x74c>
   10c84:	pop	{r3, pc}

Disassembly of section .plt:

00010c88 <calloc@plt-0x14>:
   10c88:	push	{lr}		; (str lr, [sp, #-4]!)
   10c8c:	ldr	lr, [pc, #4]	; 10c98 <calloc@plt-0x4>
   10c90:	add	lr, pc, lr
   10c94:	ldr	pc, [lr, #8]!
   10c98:	andeq	r9, r1, r8, ror #6

00010c9c <calloc@plt>:
   10c9c:	add	ip, pc, #0, 12
   10ca0:	add	ip, ip, #102400	; 0x19000
   10ca4:	ldr	pc, [ip, #872]!	; 0x368

00010ca8 <fputs_unlocked@plt>:
   10ca8:	add	ip, pc, #0, 12
   10cac:	add	ip, ip, #102400	; 0x19000
   10cb0:	ldr	pc, [ip, #864]!	; 0x360

00010cb4 <strcmp@plt>:
   10cb4:	add	ip, pc, #0, 12
   10cb8:	add	ip, ip, #102400	; 0x19000
   10cbc:	ldr	pc, [ip, #856]!	; 0x358

00010cc0 <posix_fadvise64@plt>:
   10cc0:	add	ip, pc, #0, 12
   10cc4:	add	ip, ip, #102400	; 0x19000
   10cc8:	ldr	pc, [ip, #848]!	; 0x350

00010ccc <fflush@plt>:
   10ccc:	add	ip, pc, #0, 12
   10cd0:	add	ip, ip, #102400	; 0x19000
   10cd4:	ldr	pc, [ip, #840]!	; 0x348

00010cd8 <memmove@plt>:
   10cd8:	add	ip, pc, #0, 12
   10cdc:	add	ip, ip, #102400	; 0x19000
   10ce0:	ldr	pc, [ip, #832]!	; 0x340

00010ce4 <free@plt>:
   10ce4:	add	ip, pc, #0, 12
   10ce8:	add	ip, ip, #102400	; 0x19000
   10cec:	ldr	pc, [ip, #824]!	; 0x338

00010cf0 <_exit@plt>:
   10cf0:	add	ip, pc, #0, 12
   10cf4:	add	ip, ip, #102400	; 0x19000
   10cf8:	ldr	pc, [ip, #816]!	; 0x330

00010cfc <memcpy@plt>:
   10cfc:	add	ip, pc, #0, 12
   10d00:	add	ip, ip, #102400	; 0x19000
   10d04:	ldr	pc, [ip, #808]!	; 0x328

00010d08 <mbsinit@plt>:
   10d08:	add	ip, pc, #0, 12
   10d0c:	add	ip, ip, #102400	; 0x19000
   10d10:	ldr	pc, [ip, #800]!	; 0x320

00010d14 <fwrite_unlocked@plt>:
   10d14:	add	ip, pc, #0, 12
   10d18:	add	ip, ip, #102400	; 0x19000
   10d1c:	ldr	pc, [ip, #792]!	; 0x318

00010d20 <memcmp@plt>:
   10d20:	add	ip, pc, #0, 12
   10d24:	add	ip, ip, #102400	; 0x19000
   10d28:	ldr	pc, [ip, #784]!	; 0x310

00010d2c <fputc_unlocked@plt>:
   10d2c:	add	ip, pc, #0, 12
   10d30:	add	ip, ip, #102400	; 0x19000
   10d34:	ldr	pc, [ip, #776]!	; 0x308

00010d38 <dcgettext@plt>:
   10d38:	add	ip, pc, #0, 12
   10d3c:	add	ip, ip, #102400	; 0x19000
   10d40:	ldr	pc, [ip, #768]!	; 0x300

00010d44 <realloc@plt>:
   10d44:	add	ip, pc, #0, 12
   10d48:	add	ip, ip, #102400	; 0x19000
   10d4c:	ldr	pc, [ip, #760]!	; 0x2f8

00010d50 <textdomain@plt>:
   10d50:	add	ip, pc, #0, 12
   10d54:	add	ip, ip, #102400	; 0x19000
   10d58:	ldr	pc, [ip, #752]!	; 0x2f0

00010d5c <iswprint@plt>:
   10d5c:	add	ip, pc, #0, 12
   10d60:	add	ip, ip, #102400	; 0x19000
   10d64:	ldr	pc, [ip, #744]!	; 0x2e8

00010d68 <fwrite@plt>:
   10d68:	add	ip, pc, #0, 12
   10d6c:	add	ip, ip, #102400	; 0x19000
   10d70:	ldr	pc, [ip, #736]!	; 0x2e0

00010d74 <lseek64@plt>:
   10d74:	add	ip, pc, #0, 12
   10d78:	add	ip, ip, #102400	; 0x19000
   10d7c:	ldr	pc, [ip, #728]!	; 0x2d8

00010d80 <__ctype_get_mb_cur_max@plt>:
   10d80:	add	ip, pc, #0, 12
   10d84:	add	ip, ip, #102400	; 0x19000
   10d88:	ldr	pc, [ip, #720]!	; 0x2d0

00010d8c <__fpending@plt>:
   10d8c:	add	ip, pc, #0, 12
   10d90:	add	ip, ip, #102400	; 0x19000
   10d94:	ldr	pc, [ip, #712]!	; 0x2c8

00010d98 <mbrtowc@plt>:
   10d98:	add	ip, pc, #0, 12
   10d9c:	add	ip, ip, #102400	; 0x19000
   10da0:	ldr	pc, [ip, #704]!	; 0x2c0

00010da4 <error@plt>:
   10da4:	add	ip, pc, #0, 12
   10da8:	add	ip, ip, #102400	; 0x19000
   10dac:	ldr	pc, [ip, #696]!	; 0x2b8

00010db0 <malloc@plt>:
   10db0:	add	ip, pc, #0, 12
   10db4:	add	ip, ip, #102400	; 0x19000
   10db8:	ldr	pc, [ip, #688]!	; 0x2b0

00010dbc <__libc_start_main@plt>:
   10dbc:	add	ip, pc, #0, 12
   10dc0:	add	ip, ip, #102400	; 0x19000
   10dc4:	ldr	pc, [ip, #680]!	; 0x2a8

00010dc8 <__freading@plt>:
   10dc8:	add	ip, pc, #0, 12
   10dcc:	add	ip, ip, #102400	; 0x19000
   10dd0:	ldr	pc, [ip, #672]!	; 0x2a0

00010dd4 <__gmon_start__@plt>:
   10dd4:	add	ip, pc, #0, 12
   10dd8:	add	ip, ip, #102400	; 0x19000
   10ddc:	ldr	pc, [ip, #664]!	; 0x298

00010de0 <getopt_long@plt>:
   10de0:	add	ip, pc, #0, 12
   10de4:	add	ip, ip, #102400	; 0x19000
   10de8:	ldr	pc, [ip, #656]!	; 0x290

00010dec <__ctype_b_loc@plt>:
   10dec:	add	ip, pc, #0, 12
   10df0:	add	ip, ip, #102400	; 0x19000
   10df4:	ldr	pc, [ip, #648]!	; 0x288

00010df8 <exit@plt>:
   10df8:	add	ip, pc, #0, 12
   10dfc:	add	ip, ip, #102400	; 0x19000
   10e00:	ldr	pc, [ip, #640]!	; 0x280

00010e04 <strlen@plt>:
   10e04:	add	ip, pc, #0, 12
   10e08:	add	ip, ip, #102400	; 0x19000
   10e0c:	ldr	pc, [ip, #632]!	; 0x278

00010e10 <strchr@plt>:
   10e10:	add	ip, pc, #0, 12
   10e14:	add	ip, ip, #102400	; 0x19000
   10e18:	ldr	pc, [ip, #624]!	; 0x270

00010e1c <__errno_location@plt>:
   10e1c:	add	ip, pc, #0, 12
   10e20:	add	ip, ip, #102400	; 0x19000
   10e24:	ldr	pc, [ip, #616]!	; 0x268

00010e28 <__cxa_atexit@plt>:
   10e28:	add	ip, pc, #0, 12
   10e2c:	add	ip, ip, #102400	; 0x19000
   10e30:	ldr	pc, [ip, #608]!	; 0x260

00010e34 <memset@plt>:
   10e34:	add	ip, pc, #0, 12
   10e38:	add	ip, ip, #102400	; 0x19000
   10e3c:	ldr	pc, [ip, #600]!	; 0x258

00010e40 <__printf_chk@plt>:
   10e40:	add	ip, pc, #0, 12
   10e44:	add	ip, ip, #102400	; 0x19000
   10e48:	ldr	pc, [ip, #592]!	; 0x250

00010e4c <fileno@plt>:
   10e4c:	add	ip, pc, #0, 12
   10e50:	add	ip, ip, #102400	; 0x19000
   10e54:	ldr	pc, [ip, #584]!	; 0x248

00010e58 <__fprintf_chk@plt>:
   10e58:	add	ip, pc, #0, 12
   10e5c:	add	ip, ip, #102400	; 0x19000
   10e60:	ldr	pc, [ip, #576]!	; 0x240

00010e64 <memchr@plt>:
   10e64:	add	ip, pc, #0, 12
   10e68:	add	ip, ip, #102400	; 0x19000
   10e6c:	ldr	pc, [ip, #568]!	; 0x238

00010e70 <fclose@plt>:
   10e70:	add	ip, pc, #0, 12
   10e74:	add	ip, ip, #102400	; 0x19000
   10e78:	ldr	pc, [ip, #560]!	; 0x230

00010e7c <fseeko64@plt>:
   10e7c:	add	ip, pc, #0, 12
   10e80:	add	ip, ip, #102400	; 0x19000
   10e84:	ldr	pc, [ip, #552]!	; 0x228

00010e88 <__overflow@plt>:
   10e88:	add	ip, pc, #0, 12
   10e8c:	add	ip, ip, #102400	; 0x19000
   10e90:	ldr	pc, [ip, #544]!	; 0x220

00010e94 <setlocale@plt>:
   10e94:	add	ip, pc, #0, 12
   10e98:	add	ip, ip, #102400	; 0x19000
   10e9c:	ldr	pc, [ip, #536]!	; 0x218

00010ea0 <strrchr@plt>:
   10ea0:	add	ip, pc, #0, 12
   10ea4:	add	ip, ip, #102400	; 0x19000
   10ea8:	ldr	pc, [ip, #528]!	; 0x210

00010eac <nl_langinfo@plt>:
   10eac:	add	ip, pc, #0, 12
   10eb0:	add	ip, ip, #102400	; 0x19000
   10eb4:	ldr	pc, [ip, #520]!	; 0x208

00010eb8 <__strtoll_internal@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #102400	; 0x19000
   10ec0:	ldr	pc, [ip, #512]!	; 0x200

00010ec4 <fopen64@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #102400	; 0x19000
   10ecc:	ldr	pc, [ip, #504]!	; 0x1f8

00010ed0 <bindtextdomain@plt>:
   10ed0:	add	ip, pc, #0, 12
   10ed4:	add	ip, ip, #102400	; 0x19000
   10ed8:	ldr	pc, [ip, #496]!	; 0x1f0

00010edc <fread_unlocked@plt>:
   10edc:	add	ip, pc, #0, 12
   10ee0:	add	ip, ip, #102400	; 0x19000
   10ee4:	ldr	pc, [ip, #488]!	; 0x1e8

00010ee8 <strncmp@plt>:
   10ee8:	add	ip, pc, #0, 12
   10eec:	add	ip, ip, #102400	; 0x19000
   10ef0:	ldr	pc, [ip, #480]!	; 0x1e0

00010ef4 <abort@plt>:
   10ef4:	add	ip, pc, #0, 12
   10ef8:	add	ip, ip, #102400	; 0x19000
   10efc:	ldr	pc, [ip, #472]!	; 0x1d8

00010f00 <__assert_fail@plt>:
   10f00:	add	ip, pc, #0, 12
   10f04:	add	ip, ip, #102400	; 0x19000
   10f08:	ldr	pc, [ip, #464]!	; 0x1d0

Disassembly of section .text:

00010f0c <.text>:
   10f0c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   10f10:	strd	r6, [sp, #8]
   10f14:	mov	r7, #0
   10f18:	movw	r6, #35584	; 0x8b00
   10f1c:	movt	r6, #1
   10f20:	strd	r8, [sp, #16]
   10f24:	mov	r8, r1
   10f28:	strd	sl, [sp, #24]
   10f2c:	mov	sl, r0
   10f30:	movw	r9, #41296	; 0xa150
   10f34:	movt	r9, #2
   10f38:	str	lr, [sp, #32]
   10f3c:	sub	sp, sp, #68	; 0x44
   10f40:	ldr	r0, [r1]
   10f44:	mov	r4, r7
   10f48:	bl	128cc <__assert_fail@plt+0x19cc>
   10f4c:	movw	r1, #34952	; 0x8888
   10f50:	movt	r1, #1
   10f54:	ldr	fp, [pc, #1712]	; 1160c <__assert_fail@plt+0x70c>
   10f58:	mov	r0, #6
   10f5c:	bl	10e94 <setlocale@plt>
   10f60:	movw	r1, #35516	; 0x8abc
   10f64:	movt	r1, #1
   10f68:	movw	r0, #35348	; 0x8a14
   10f6c:	movt	r0, #1
   10f70:	bl	10ed0 <bindtextdomain@plt>
   10f74:	movw	r0, #35348	; 0x8a14
   10f78:	movt	r0, #1
   10f7c:	bl	10d50 <textdomain@plt>
   10f80:	movw	r0, #9544	; 0x2548
   10f84:	movt	r0, #1
   10f88:	bl	18574 <__assert_fail@plt+0x7674>
   10f8c:	mov	r3, #76	; 0x4c
   10f90:	str	r3, [sp, #12]
   10f94:	mov	r5, #0
   10f98:	mov	r3, fp
   10f9c:	mov	r2, r6
   10fa0:	mov	r1, r8
   10fa4:	mov	r0, sl
   10fa8:	str	r5, [sp]
   10fac:	bl	10de0 <getopt_long@plt>
   10fb0:	cmn	r0, #1
   10fb4:	beq	11124 <__assert_fail@plt+0x224>
   10fb8:	cmp	r0, #100	; 0x64
   10fbc:	beq	110e0 <__assert_fail@plt+0x1e0>
   10fc0:	bgt	10fdc <__assert_fail@plt+0xdc>
   10fc4:	cmn	r0, #3
   10fc8:	beq	110a0 <__assert_fail@plt+0x1a0>
   10fcc:	cmn	r0, #2
   10fd0:	bne	11098 <__assert_fail@plt+0x198>
   10fd4:	mov	r0, r5
   10fd8:	bl	1178c <__assert_fail@plt+0x88c>
   10fdc:	cmp	r0, #105	; 0x69
   10fe0:	beq	11054 <__assert_fail@plt+0x154>
   10fe4:	cmp	r0, #119	; 0x77
   10fe8:	bne	11098 <__assert_fail@plt+0x198>
   10fec:	movw	r2, #34952	; 0x8888
   10ff0:	movt	r2, #1
   10ff4:	ldr	r0, [r9]
   10ff8:	mov	r1, r5
   10ffc:	add	r3, sp, #48	; 0x30
   11000:	str	r2, [sp]
   11004:	mov	r2, #10
   11008:	bl	1710c <__assert_fail@plt+0x620c>
   1100c:	cmp	r0, #1
   11010:	mov	ip, r0
   11014:	bhi	110e8 <__assert_fail@plt+0x1e8>
   11018:	ldrd	r2, [sp, #48]	; 0x30
   1101c:	cmp	r2, #0
   11020:	sbcs	r1, r3, #0
   11024:	blt	110e8 <__assert_fail@plt+0x1e8>
   11028:	mvn	r0, #-2147483648	; 0x80000000
   1102c:	mov	r1, #0
   11030:	cmp	r0, r2
   11034:	eor	ip, ip, #1
   11038:	sbcs	r1, r1, r3
   1103c:	movlt	ip, #0
   11040:	andge	ip, ip, #1
   11044:	cmp	ip, #0
   11048:	moveq	r2, #0
   1104c:	str	r2, [sp, #12]
   11050:	b	10f94 <__assert_fail@plt+0x94>
   11054:	mov	r7, #1
   11058:	b	10f94 <__assert_fail@plt+0x94>
   1105c:	mov	r2, #5
   11060:	movw	r1, #35592	; 0x8b08
   11064:	movt	r1, #1
   11068:	mov	r0, r5
   1106c:	bl	10d38 <dcgettext@plt>
   11070:	ldr	r3, [r6]
   11074:	mov	r4, r0
   11078:	add	r3, r3, #1
   1107c:	ldr	r0, [r8, r3, lsl #2]
   11080:	bl	1623c <__assert_fail@plt+0x533c>
   11084:	mov	r3, r0
   11088:	mov	r2, r4
   1108c:	mov	r1, r5
   11090:	mov	r0, r5
   11094:	bl	10da4 <error@plt>
   11098:	mov	r0, #1
   1109c:	bl	1178c <__assert_fail@plt+0x88c>
   110a0:	movw	r2, #35568	; 0x8af0
   110a4:	movt	r2, #1
   110a8:	movw	r3, #41192	; 0xa0e8
   110ac:	movt	r3, #2
   110b0:	movw	r0, #41292	; 0xa14c
   110b4:	movt	r0, #2
   110b8:	stm	sp, {r2, r5}
   110bc:	movw	r1, #34380	; 0x864c
   110c0:	movt	r1, #1
   110c4:	ldr	r0, [r0]
   110c8:	movw	r2, #35344	; 0x8a10
   110cc:	movt	r2, #1
   110d0:	ldr	r3, [r3]
   110d4:	bl	16900 <__assert_fail@plt+0x5a00>
   110d8:	mov	r0, r5
   110dc:	bl	10df8 <exit@plt>
   110e0:	mov	r4, #1
   110e4:	b	10f94 <__assert_fail@plt+0x94>
   110e8:	mov	r2, #5
   110ec:	movw	r1, #35540	; 0x8ad4
   110f0:	movt	r1, #1
   110f4:	mov	r0, #0
   110f8:	bl	10d38 <dcgettext@plt>
   110fc:	mov	r4, r0
   11100:	ldr	r0, [r9]
   11104:	bl	1623c <__assert_fail@plt+0x533c>
   11108:	movw	r2, #35560	; 0x8ae8
   1110c:	movt	r2, #1
   11110:	str	r0, [sp]
   11114:	mov	r3, r4
   11118:	mov	r1, #0
   1111c:	mov	r0, #1
   11120:	bl	10da4 <error@plt>
   11124:	movw	r6, #41272	; 0xa138
   11128:	movt	r6, #2
   1112c:	ldr	r3, [r6]
   11130:	sub	r2, sl, r3
   11134:	cmp	r2, #1
   11138:	bgt	1105c <__assert_fail@plt+0x15c>
   1113c:	cmp	r3, sl
   11140:	bge	11350 <__assert_fail@plt+0x450>
   11144:	ldr	r3, [r8, r3, lsl #2]
   11148:	movw	r1, #34352	; 0x8630
   1114c:	movt	r1, #1
   11150:	mov	r0, r3
   11154:	str	r3, [sp, #24]
   11158:	bl	10cb4 <strcmp@plt>
   1115c:	cmp	r0, #0
   11160:	beq	1135c <__assert_fail@plt+0x45c>
   11164:	movw	r1, #35612	; 0x8b1c
   11168:	movt	r1, #1
   1116c:	ldr	r0, [sp, #24]
   11170:	bl	10ec4 <fopen64@plt>
   11174:	subs	r5, r0, #0
   11178:	beq	115c4 <__assert_fail@plt+0x6c4>
   1117c:	mov	r1, #2
   11180:	mov	r0, r5
   11184:	bl	12638 <__assert_fail@plt+0x1738>
   11188:	cmp	r4, #0
   1118c:	movw	r3, #41292	; 0xa14c
   11190:	movt	r3, #2
   11194:	beq	1136c <__assert_fail@plt+0x46c>
   11198:	ldr	r3, [r3]
   1119c:	mov	r0, #8192	; 0x2000
   111a0:	str	r3, [sp, #16]
   111a4:	bl	16b10 <__assert_fail@plt+0x5c10>
   111a8:	mov	r9, r0
   111ac:	mov	r0, #5120	; 0x1400
   111b0:	bl	16b10 <__assert_fail@plt+0x5c10>
   111b4:	str	r0, [sp, #20]
   111b8:	add	r0, sp, #48	; 0x30
   111bc:	bl	11dfc <__assert_fail@plt+0xefc>
   111c0:	str	r7, [sp, #12]
   111c4:	mov	r6, #0
   111c8:	b	111f0 <__assert_fail@plt+0x2f0>
   111cc:	ldr	r3, [r5]
   111d0:	add	r6, r6, r4
   111d4:	tst	r3, #32
   111d8:	bne	113e0 <__assert_fail@plt+0x4e0>
   111dc:	cmp	r6, #8192	; 0x2000
   111e0:	and	r3, r3, #16
   111e4:	bge	1127c <__assert_fail@plt+0x37c>
   111e8:	cmp	r3, #0
   111ec:	bne	1127c <__assert_fail@plt+0x37c>
   111f0:	mov	r3, r5
   111f4:	rsb	r2, r6, #8192	; 0x2000
   111f8:	mov	r1, #1
   111fc:	add	r0, r9, r6
   11200:	bl	10edc <fread_unlocked@plt>
   11204:	ldr	r3, [sp, #12]
   11208:	mov	r4, r0
   1120c:	cmp	r3, #0
   11210:	beq	111cc <__assert_fail@plt+0x2cc>
   11214:	cmp	r0, #0
   11218:	ble	111cc <__assert_fail@plt+0x2cc>
   1121c:	mov	r7, #0
   11220:	mov	r8, r6
   11224:	ldrb	sl, [r9, r8]
   11228:	add	fp, r9, r8
   1122c:	mov	r0, sl
   11230:	bl	11de0 <__assert_fail@plt+0xee0>
   11234:	cmp	sl, #61	; 0x3d
   11238:	orreq	r0, r0, #1
   1123c:	tst	r0, #255	; 0xff
   11240:	beq	11258 <__assert_fail@plt+0x358>
   11244:	add	r7, r7, #1
   11248:	cmp	r7, r4
   1124c:	bge	111cc <__assert_fail@plt+0x2cc>
   11250:	add	r8, r6, r7
   11254:	b	11224 <__assert_fail@plt+0x324>
   11258:	sub	r4, r4, #1
   1125c:	add	r1, r8, #1
   11260:	mov	r0, fp
   11264:	sub	r2, r4, r7
   11268:	add	r1, r9, r1
   1126c:	bl	10cd8 <memmove@plt>
   11270:	cmp	r4, r7
   11274:	bgt	11224 <__assert_fail@plt+0x324>
   11278:	b	111cc <__assert_fail@plt+0x2cc>
   1127c:	mov	r2, r6
   11280:	ldr	r6, [sp, #20]
   11284:	add	r1, sp, #44	; 0x2c
   11288:	mov	r7, #5120	; 0x1400
   1128c:	add	r0, sp, #48	; 0x30
   11290:	str	r1, [sp]
   11294:	mov	r1, r9
   11298:	str	r7, [sp, #44]	; 0x2c
   1129c:	mov	r3, r6
   112a0:	bl	11e08 <__assert_fail@plt+0xf08>
   112a4:	ldr	r8, [sp, #16]
   112a8:	mov	r4, r0
   112ac:	mov	r1, #1
   112b0:	mov	r0, r6
   112b4:	ldr	r2, [sp, #44]	; 0x2c
   112b8:	mov	r3, r8
   112bc:	bl	10d14 <fwrite_unlocked@plt>
   112c0:	ldr	r3, [sp, #44]	; 0x2c
   112c4:	cmp	r3, r0
   112c8:	bhi	11590 <__assert_fail@plt+0x690>
   112cc:	cmp	r4, #0
   112d0:	beq	115a0 <__assert_fail@plt+0x6a0>
   112d4:	ldr	r3, [r5]
   112d8:	tst	r3, #16
   112dc:	beq	111c4 <__assert_fail@plt+0x2c4>
   112e0:	ldr	r3, [sp, #48]	; 0x30
   112e4:	cmp	r3, #0
   112e8:	beq	11344 <__assert_fail@plt+0x444>
   112ec:	add	r1, sp, #44	; 0x2c
   112f0:	mov	r3, r6
   112f4:	mov	r2, #0
   112f8:	add	r0, sp, #48	; 0x30
   112fc:	str	r1, [sp]
   11300:	mov	r1, r9
   11304:	str	r7, [sp, #44]	; 0x2c
   11308:	bl	11e08 <__assert_fail@plt+0xf08>
   1130c:	mov	r4, r0
   11310:	mov	r3, r8
   11314:	ldr	r2, [sp, #44]	; 0x2c
   11318:	mov	r1, #1
   1131c:	mov	r0, r6
   11320:	bl	10d14 <fwrite_unlocked@plt>
   11324:	ldr	r3, [sp, #44]	; 0x2c
   11328:	cmp	r3, r0
   1132c:	bhi	11590 <__assert_fail@plt+0x690>
   11330:	cmp	r4, #0
   11334:	beq	115a0 <__assert_fail@plt+0x6a0>
   11338:	ldr	r3, [r5]
   1133c:	tst	r3, #16
   11340:	beq	111c4 <__assert_fail@plt+0x2c4>
   11344:	mov	r0, r5
   11348:	ldr	r1, [sp, #24]
   1134c:	bl	11700 <__assert_fail@plt+0x800>
   11350:	movw	r3, #34352	; 0x8630
   11354:	movt	r3, #1
   11358:	str	r3, [sp, #24]
   1135c:	movw	r3, #41288	; 0xa148
   11360:	movt	r3, #2
   11364:	ldr	r5, [r3]
   11368:	b	1117c <__assert_fail@plt+0x27c>
   1136c:	mov	r0, #30720	; 0x7800
   11370:	str	r3, [sp, #20]
   11374:	ldr	r9, [r3]
   11378:	bl	16b10 <__assert_fail@plt+0x5c10>
   1137c:	mov	fp, r0
   11380:	mov	r0, #49152	; 0xc000
   11384:	bl	16b10 <__assert_fail@plt+0x5c10>
   11388:	str	r0, [sp, #16]
   1138c:	mov	r6, #0
   11390:	b	1139c <__assert_fail@plt+0x49c>
   11394:	cmp	r6, #30720	; 0x7800
   11398:	bge	1140c <__assert_fail@plt+0x50c>
   1139c:	mov	r3, r5
   113a0:	rsb	r2, r6, #30720	; 0x7800
   113a4:	add	r0, fp, r6
   113a8:	mov	r1, #1
   113ac:	bl	10edc <fread_unlocked@plt>
   113b0:	ldr	r3, [r5]
   113b4:	add	r6, r6, r0
   113b8:	tst	r3, #48	; 0x30
   113bc:	beq	11394 <__assert_fail@plt+0x494>
   113c0:	cmp	r6, #0
   113c4:	bgt	1140c <__assert_fail@plt+0x50c>
   113c8:	ldr	r2, [sp, #12]
   113cc:	cmp	r2, #0
   113d0:	cmpne	r4, #0
   113d4:	bgt	11554 <__assert_fail@plt+0x654>
   113d8:	tst	r3, #32
   113dc:	beq	11344 <__assert_fail@plt+0x444>
   113e0:	bl	10e1c <__errno_location@plt>
   113e4:	movw	r1, #35616	; 0x8b20
   113e8:	movt	r1, #1
   113ec:	ldr	r4, [r0]
   113f0:	mov	r2, #5
   113f4:	mov	r0, #0
   113f8:	bl	10d38 <dcgettext@plt>
   113fc:	mov	r2, r0
   11400:	mov	r1, r4
   11404:	mov	r0, #1
   11408:	bl	10da4 <error@plt>
   1140c:	add	r8, r6, #4
   11410:	mov	r7, #5
   11414:	ldr	sl, [sp, #16]
   11418:	mov	r1, r6
   1141c:	mov	r0, fp
   11420:	udiv	r8, r8, r7
   11424:	mov	r2, sl
   11428:	lsl	r8, r8, #3
   1142c:	mov	r3, r8
   11430:	bl	11b2c <__assert_fail@plt+0xc2c>
   11434:	ldr	r3, [sp, #12]
   11438:	cmp	r3, #0
   1143c:	bne	11478 <__assert_fail@plt+0x578>
   11440:	ldr	r3, [sp, #20]
   11444:	mov	r2, r8
   11448:	mov	r1, #1
   1144c:	mov	r0, sl
   11450:	ldr	r3, [r3]
   11454:	bl	10d14 <fwrite_unlocked@plt>
   11458:	cmp	r8, r0
   1145c:	bhi	115f4 <__assert_fail@plt+0x6f4>
   11460:	ldr	r3, [r5]
   11464:	and	r2, r3, #48	; 0x30
   11468:	cmp	r6, #30720	; 0x7800
   1146c:	cmpeq	r2, #0
   11470:	beq	1138c <__assert_fail@plt+0x48c>
   11474:	b	113c8 <__assert_fail@plt+0x4c8>
   11478:	str	r5, [sp, #28]
   1147c:	add	r5, sp, #12
   11480:	mov	sl, r4
   11484:	mov	r7, #0
   11488:	str	fp, [sp, #32]
   1148c:	str	r6, [sp, #36]	; 0x24
   11490:	ldm	r5, {r5, r6, fp}
   11494:	b	114c4 <__assert_fail@plt+0x5c4>
   11498:	ldr	r3, [r9, #20]
   1149c:	ldr	r2, [r9, #24]
   114a0:	cmp	r3, r2
   114a4:	addcc	r2, r3, #1
   114a8:	strcc	r2, [r9, #20]
   114ac:	movcc	r2, #10
   114b0:	strbcc	r2, [r3]
   114b4:	bcs	11504 <__assert_fail@plt+0x604>
   114b8:	cmp	r7, r8
   114bc:	bge	11544 <__assert_fail@plt+0x644>
   114c0:	mov	sl, r4
   114c4:	sub	r4, r5, r4
   114c8:	sub	r3, r8, r7
   114cc:	cmp	r3, r4
   114d0:	movlt	r4, r3
   114d4:	cmp	r4, #0
   114d8:	beq	11498 <__assert_fail@plt+0x598>
   114dc:	mov	r2, r4
   114e0:	mov	r1, #1
   114e4:	ldr	r3, [fp]
   114e8:	add	r0, r6, r7
   114ec:	bl	10d14 <fwrite_unlocked@plt>
   114f0:	cmp	r4, r0
   114f4:	bhi	11590 <__assert_fail@plt+0x690>
   114f8:	add	r7, r7, r4
   114fc:	add	r4, r4, sl
   11500:	b	114b8 <__assert_fail@plt+0x5b8>
   11504:	mov	r1, #10
   11508:	mov	r0, r9
   1150c:	bl	10e88 <__overflow@plt>
   11510:	cmn	r0, #1
   11514:	bne	114b8 <__assert_fail@plt+0x5b8>
   11518:	bl	10e1c <__errno_location@plt>
   1151c:	ldr	r5, [r0]
   11520:	mov	r2, #5
   11524:	movw	r1, #35628	; 0x8b2c
   11528:	movt	r1, #1
   1152c:	mov	r0, r4
   11530:	bl	10d38 <dcgettext@plt>
   11534:	mov	r2, r0
   11538:	mov	r0, #1
   1153c:	mov	r1, r5
   11540:	bl	10da4 <error@plt>
   11544:	ldr	r5, [sp, #28]
   11548:	ldr	fp, [sp, #32]
   1154c:	ldr	r6, [sp, #36]	; 0x24
   11550:	b	11460 <__assert_fail@plt+0x560>
   11554:	ldr	r3, [r9, #20]
   11558:	ldr	r2, [r9, #24]
   1155c:	cmp	r3, r2
   11560:	addcc	r1, r3, #1
   11564:	movcc	r2, #10
   11568:	strcc	r1, [r9, #20]
   1156c:	strbcc	r2, [r3]
   11570:	bcs	1157c <__assert_fail@plt+0x67c>
   11574:	ldr	r3, [r5]
   11578:	b	113d8 <__assert_fail@plt+0x4d8>
   1157c:	mov	r0, r9
   11580:	mov	r1, #10
   11584:	bl	10e88 <__overflow@plt>
   11588:	cmn	r0, #1
   1158c:	bne	11574 <__assert_fail@plt+0x674>
   11590:	bl	10e1c <__errno_location@plt>
   11594:	movw	r1, #35628	; 0x8b2c
   11598:	movt	r1, #1
   1159c:	b	113ec <__assert_fail@plt+0x4ec>
   115a0:	mov	r2, #5
   115a4:	movw	r1, #35640	; 0x8b38
   115a8:	movt	r1, #1
   115ac:	mov	r0, #0
   115b0:	bl	10d38 <dcgettext@plt>
   115b4:	mov	r2, r0
   115b8:	mov	r1, #0
   115bc:	mov	r0, #1
   115c0:	bl	10da4 <error@plt>
   115c4:	bl	10e1c <__errno_location@plt>
   115c8:	ldr	r4, [r0]
   115cc:	mov	r1, #3
   115d0:	mov	r0, r5
   115d4:	ldr	r2, [sp, #24]
   115d8:	bl	15a90 <__assert_fail@plt+0x4b90>
   115dc:	mov	r3, r0
   115e0:	movw	r2, #35564	; 0x8aec
   115e4:	movt	r2, #1
   115e8:	mov	r0, #1
   115ec:	mov	r1, r4
   115f0:	bl	10da4 <error@plt>
   115f4:	bl	10e1c <__errno_location@plt>
   115f8:	movw	r1, #35628	; 0x8b2c
   115fc:	movt	r1, #1
   11600:	ldr	r4, [r0]
   11604:	mov	r2, r7
   11608:	b	113f4 <__assert_fail@plt+0x4f4>
   1160c:	ldrdeq	r8, [r1], -r0
   11610:	mov	fp, #0
   11614:	mov	lr, #0
   11618:	pop	{r1}		; (ldr r1, [sp], #4)
   1161c:	mov	r2, sp
   11620:	push	{r2}		; (str r2, [sp, #-4]!)
   11624:	push	{r0}		; (str r0, [sp, #-4]!)
   11628:	ldr	ip, [pc, #16]	; 11640 <__assert_fail@plt+0x740>
   1162c:	push	{ip}		; (str ip, [sp, #-4]!)
   11630:	ldr	r0, [pc, #12]	; 11644 <__assert_fail@plt+0x744>
   11634:	ldr	r3, [pc, #12]	; 11648 <__assert_fail@plt+0x748>
   11638:	bl	10dbc <__libc_start_main@plt>
   1163c:	bl	10ef4 <abort@plt>
   11640:	andeq	r8, r1, r0, ror r5
   11644:	andeq	r0, r1, ip, lsl #30
   11648:	andeq	r8, r1, r0, lsl r5
   1164c:	ldr	r3, [pc, #20]	; 11668 <__assert_fail@plt+0x768>
   11650:	ldr	r2, [pc, #20]	; 1166c <__assert_fail@plt+0x76c>
   11654:	add	r3, pc, r3
   11658:	ldr	r2, [r3, r2]
   1165c:	cmp	r2, #0
   11660:	bxeq	lr
   11664:	b	10dd4 <__gmon_start__@plt>
   11668:	andeq	r8, r1, r4, lsr #19
   1166c:	ldrdeq	r0, [r0], -ip
   11670:	ldr	r0, [pc, #24]	; 11690 <__assert_fail@plt+0x790>
   11674:	ldr	r3, [pc, #24]	; 11694 <__assert_fail@plt+0x794>
   11678:	cmp	r3, r0
   1167c:	bxeq	lr
   11680:	ldr	r3, [pc, #16]	; 11698 <__assert_fail@plt+0x798>
   11684:	cmp	r3, #0
   11688:	bxeq	lr
   1168c:	bx	r3
   11690:	andeq	sl, r2, r0, lsr r1
   11694:	andeq	sl, r2, r0, lsr r1
   11698:	andeq	r0, r0, r0
   1169c:	ldr	r0, [pc, #36]	; 116c8 <__assert_fail@plt+0x7c8>
   116a0:	ldr	r1, [pc, #36]	; 116cc <__assert_fail@plt+0x7cc>
   116a4:	sub	r1, r1, r0
   116a8:	asr	r1, r1, #2
   116ac:	add	r1, r1, r1, lsr #31
   116b0:	asrs	r1, r1, #1
   116b4:	bxeq	lr
   116b8:	ldr	r3, [pc, #16]	; 116d0 <__assert_fail@plt+0x7d0>
   116bc:	cmp	r3, #0
   116c0:	bxeq	lr
   116c4:	bx	r3
   116c8:	andeq	sl, r2, r0, lsr r1
   116cc:	andeq	sl, r2, r0, lsr r1
   116d0:	andeq	r0, r0, r0
   116d4:	push	{r4, lr}
   116d8:	ldr	r4, [pc, #24]	; 116f8 <__assert_fail@plt+0x7f8>
   116dc:	ldrb	r3, [r4]
   116e0:	cmp	r3, #0
   116e4:	popne	{r4, pc}
   116e8:	bl	11670 <__assert_fail@plt+0x770>
   116ec:	mov	r3, #1
   116f0:	strb	r3, [r4]
   116f4:	pop	{r4, pc}
   116f8:	andeq	sl, r2, r4, asr r1
   116fc:	b	1169c <__assert_fail@plt+0x79c>
   11700:	str	r4, [sp, #-8]!
   11704:	mov	r4, r1
   11708:	str	lr, [sp, #4]
   1170c:	bl	12688 <__assert_fail@plt+0x1788>
   11710:	cmp	r0, #0
   11714:	beq	11788 <__assert_fail@plt+0x888>
   11718:	movw	r1, #34352	; 0x8630
   1171c:	movt	r1, #1
   11720:	mov	r0, r4
   11724:	bl	10cb4 <strcmp@plt>
   11728:	mov	r5, r0
   1172c:	bl	10e1c <__errno_location@plt>
   11730:	cmp	r5, #0
   11734:	ldr	r6, [r0]
   11738:	bne	11760 <__assert_fail@plt+0x860>
   1173c:	mov	r2, #5
   11740:	mov	r0, r5
   11744:	movw	r1, #34356	; 0x8634
   11748:	movt	r1, #1
   1174c:	bl	10d38 <dcgettext@plt>
   11750:	mov	r2, r0
   11754:	mov	r1, r6
   11758:	mov	r0, #1
   1175c:	bl	10da4 <error@plt>
   11760:	mov	r2, r4
   11764:	mov	r1, #3
   11768:	mov	r0, #0
   1176c:	bl	15a90 <__assert_fail@plt+0x4b90>
   11770:	mov	r3, r0
   11774:	movw	r2, #35564	; 0x8aec
   11778:	movt	r2, #1
   1177c:	mov	r1, r6
   11780:	mov	r0, #1
   11784:	bl	10da4 <error@plt>
   11788:	bl	10df8 <exit@plt>
   1178c:	subs	r6, r0, #0
   11790:	str	r7, [sp, #-8]!
   11794:	str	lr, [sp, #4]
   11798:	sub	sp, sp, #56	; 0x38
   1179c:	beq	117e4 <__assert_fail@plt+0x8e4>
   117a0:	movw	r3, #41280	; 0xa140
   117a4:	movt	r3, #2
   117a8:	ldr	r4, [r3]
   117ac:	mov	r2, #5
   117b0:	movw	r1, #34388	; 0x8654
   117b4:	movt	r1, #1
   117b8:	mov	r0, #0
   117bc:	bl	10d38 <dcgettext@plt>
   117c0:	movw	r3, #41312	; 0xa160
   117c4:	movt	r3, #2
   117c8:	mov	r2, r0
   117cc:	mov	r1, #1
   117d0:	ldr	r3, [r3]
   117d4:	mov	r0, r4
   117d8:	bl	10e58 <__fprintf_chk@plt>
   117dc:	mov	r0, r6
   117e0:	bl	10df8 <exit@plt>
   117e4:	mov	r2, #5
   117e8:	movw	r1, #34428	; 0x867c
   117ec:	movt	r1, #1
   117f0:	movw	r7, #41292	; 0xa14c
   117f4:	movt	r7, #2
   117f8:	bl	10d38 <dcgettext@plt>
   117fc:	movw	r3, #41312	; 0xa160
   11800:	movt	r3, #2
   11804:	mov	r1, r0
   11808:	mov	r0, #1
   1180c:	ldr	r2, [r3]
   11810:	bl	10e40 <__printf_chk@plt>
   11814:	mov	r2, #5
   11818:	movw	r1, #34460	; 0x869c
   1181c:	movt	r1, #1
   11820:	mov	r0, r6
   11824:	bl	10d38 <dcgettext@plt>
   11828:	mov	r1, r0
   1182c:	mov	r2, #32
   11830:	mov	r0, #1
   11834:	bl	10e40 <__printf_chk@plt>
   11838:	mov	r2, #5
   1183c:	movw	r1, #34532	; 0x86e4
   11840:	movt	r1, #1
   11844:	mov	r0, r6
   11848:	bl	10d38 <dcgettext@plt>
   1184c:	ldr	r1, [r7]
   11850:	bl	10ca8 <fputs_unlocked@plt>
   11854:	mov	r2, #5
   11858:	movw	r1, #34588	; 0x871c
   1185c:	movt	r1, #1
   11860:	mov	r0, r6
   11864:	bl	10d38 <dcgettext@plt>
   11868:	ldr	r1, [r7]
   1186c:	bl	10ca8 <fputs_unlocked@plt>
   11870:	mov	r2, #5
   11874:	movw	r1, #34664	; 0x8768
   11878:	movt	r1, #1
   1187c:	mov	r0, r6
   11880:	bl	10d38 <dcgettext@plt>
   11884:	ldr	r1, [r7]
   11888:	bl	10ca8 <fputs_unlocked@plt>
   1188c:	mov	r2, #5
   11890:	movw	r1, #34908	; 0x885c
   11894:	movt	r1, #1
   11898:	mov	r0, r6
   1189c:	bl	10d38 <dcgettext@plt>
   118a0:	ldr	r1, [r7]
   118a4:	bl	10ca8 <fputs_unlocked@plt>
   118a8:	mov	r2, #5
   118ac:	movw	r1, #34956	; 0x888c
   118b0:	movt	r1, #1
   118b4:	mov	r0, r6
   118b8:	bl	10d38 <dcgettext@plt>
   118bc:	ldr	r1, [r7]
   118c0:	bl	10ca8 <fputs_unlocked@plt>
   118c4:	mov	r2, #5
   118c8:	movw	r1, #35012	; 0x88c4
   118cc:	movt	r1, #1
   118d0:	mov	r0, r6
   118d4:	bl	10d38 <dcgettext@plt>
   118d8:	movw	r3, #34380	; 0x864c
   118dc:	movt	r3, #1
   118e0:	mov	r1, r0
   118e4:	mov	r2, r3
   118e8:	mov	r0, #1
   118ec:	bl	10e40 <__printf_chk@plt>
   118f0:	movw	lr, #34200	; 0x8598
   118f4:	movt	lr, #1
   118f8:	ldr	ip, [lr]
   118fc:	ldr	r4, [lr, #4]
   11900:	ldrd	r8, [lr, #8]
   11904:	subs	r1, ip, #0
   11908:	str	ip, [sp]
   1190c:	ldrd	r2, [lr, #16]
   11910:	str	r4, [sp, #4]
   11914:	ldrd	r4, [lr, #24]
   11918:	strd	r8, [sp, #8]
   1191c:	ldrd	r8, [lr, #32]
   11920:	strd	r2, [sp, #16]
   11924:	ldrd	r2, [lr, #40]	; 0x28
   11928:	strd	r4, [sp, #24]
   1192c:	ldrd	r4, [lr, #48]	; 0x30
   11930:	strd	r8, [sp, #32]
   11934:	strd	r2, [sp, #40]	; 0x28
   11938:	strd	r4, [sp, #48]	; 0x30
   1193c:	movwne	r5, #34380	; 0x864c
   11940:	mov	r4, sp
   11944:	movtne	r5, #1
   11948:	bne	11a40 <__assert_fail@plt+0xb40>
   1194c:	ldr	r4, [r4, #4]
   11950:	movw	r1, #35280	; 0x89d0
   11954:	movt	r1, #1
   11958:	mov	r2, #5
   1195c:	cmp	r4, #0
   11960:	beq	11a54 <__assert_fail@plt+0xb54>
   11964:	mov	r0, #0
   11968:	bl	10d38 <dcgettext@plt>
   1196c:	mov	r1, r0
   11970:	movw	r3, #35304	; 0x89e8
   11974:	movt	r3, #1
   11978:	movw	r2, #35344	; 0x8a10
   1197c:	movt	r2, #1
   11980:	mov	r0, #1
   11984:	bl	10e40 <__printf_chk@plt>
   11988:	mov	r1, #0
   1198c:	mov	r0, #5
   11990:	bl	10e94 <setlocale@plt>
   11994:	cmp	r0, #0
   11998:	movweq	r5, #34380	; 0x864c
   1199c:	movteq	r5, #1
   119a0:	beq	119c4 <__assert_fail@plt+0xac4>
   119a4:	movw	r1, #35360	; 0x8a20
   119a8:	movt	r1, #1
   119ac:	mov	r2, #3
   119b0:	movw	r5, #34380	; 0x864c
   119b4:	movt	r5, #1
   119b8:	bl	10ee8 <strncmp@plt>
   119bc:	cmp	r0, #0
   119c0:	bne	11b0c <__assert_fail@plt+0xc0c>
   119c4:	mov	r2, #5
   119c8:	movw	r1, #35436	; 0x8a6c
   119cc:	movt	r1, #1
   119d0:	mov	r0, #0
   119d4:	bl	10d38 <dcgettext@plt>
   119d8:	mov	r1, r0
   119dc:	movw	r3, #34380	; 0x864c
   119e0:	movt	r3, #1
   119e4:	movw	r2, #35304	; 0x89e8
   119e8:	movt	r2, #1
   119ec:	mov	r0, #1
   119f0:	bl	10e40 <__printf_chk@plt>
   119f4:	mov	r2, #5
   119f8:	movw	r1, #35464	; 0x8a88
   119fc:	movt	r1, #1
   11a00:	mov	r0, #0
   11a04:	bl	10d38 <dcgettext@plt>
   11a08:	movw	r2, #35664	; 0x8b50
   11a0c:	movt	r2, #1
   11a10:	cmp	r4, r5
   11a14:	movw	r3, #34952	; 0x8888
   11a18:	movt	r3, #1
   11a1c:	mov	r1, r0
   11a20:	moveq	r3, r2
   11a24:	mov	r2, r4
   11a28:	mov	r0, #1
   11a2c:	bl	10e40 <__printf_chk@plt>
   11a30:	b	117dc <__assert_fail@plt+0x8dc>
   11a34:	ldr	r1, [r4, #8]!
   11a38:	cmp	r1, #0
   11a3c:	beq	1194c <__assert_fail@plt+0xa4c>
   11a40:	mov	r0, r5
   11a44:	bl	10cb4 <strcmp@plt>
   11a48:	cmp	r0, #0
   11a4c:	bne	11a34 <__assert_fail@plt+0xb34>
   11a50:	b	1194c <__assert_fail@plt+0xa4c>
   11a54:	mov	r0, r4
   11a58:	bl	10d38 <dcgettext@plt>
   11a5c:	mov	r1, r0
   11a60:	movw	r3, #35304	; 0x89e8
   11a64:	movt	r3, #1
   11a68:	movw	r2, #35344	; 0x8a10
   11a6c:	movt	r2, #1
   11a70:	mov	r0, #1
   11a74:	bl	10e40 <__printf_chk@plt>
   11a78:	mov	r1, r4
   11a7c:	mov	r0, #5
   11a80:	bl	10e94 <setlocale@plt>
   11a84:	cmp	r0, #0
   11a88:	beq	11aa4 <__assert_fail@plt+0xba4>
   11a8c:	movw	r1, #35360	; 0x8a20
   11a90:	movt	r1, #1
   11a94:	mov	r2, #3
   11a98:	bl	10ee8 <strncmp@plt>
   11a9c:	cmp	r0, #0
   11aa0:	bne	11b00 <__assert_fail@plt+0xc00>
   11aa4:	mov	r2, #5
   11aa8:	movw	r1, #35436	; 0x8a6c
   11aac:	movt	r1, #1
   11ab0:	mov	r0, #0
   11ab4:	bl	10d38 <dcgettext@plt>
   11ab8:	mov	r1, r0
   11abc:	movw	r3, #34380	; 0x864c
   11ac0:	movt	r3, #1
   11ac4:	movw	r2, #35304	; 0x89e8
   11ac8:	movt	r2, #1
   11acc:	mov	r0, #1
   11ad0:	bl	10e40 <__printf_chk@plt>
   11ad4:	movw	r1, #35464	; 0x8a88
   11ad8:	movt	r1, #1
   11adc:	mov	r2, #5
   11ae0:	mov	r0, #0
   11ae4:	bl	10d38 <dcgettext@plt>
   11ae8:	movw	r4, #34380	; 0x864c
   11aec:	movt	r4, #1
   11af0:	movw	r3, #35664	; 0x8b50
   11af4:	movt	r3, #1
   11af8:	mov	r1, r0
   11afc:	b	11a24 <__assert_fail@plt+0xb24>
   11b00:	movw	r5, #34380	; 0x864c
   11b04:	movt	r5, #1
   11b08:	mov	r4, r5
   11b0c:	mov	r2, #5
   11b10:	movw	r1, #35364	; 0x8a24
   11b14:	movt	r1, #1
   11b18:	mov	r0, #0
   11b1c:	bl	10d38 <dcgettext@plt>
   11b20:	ldr	r1, [r7]
   11b24:	bl	10ca8 <fputs_unlocked@plt>
   11b28:	b	119c4 <__assert_fail@plt+0xac4>
   11b2c:	add	r2, r2, #8
   11b30:	strd	r4, [sp, #-12]!
   11b34:	mov	r5, #61	; 0x3d
   11b38:	str	lr, [sp, #8]
   11b3c:	movw	lr, #35828	; 0x8bf4
   11b40:	movt	lr, #1
   11b44:	b	11c28 <__assert_fail@plt+0xd28>
   11b48:	ldrb	r4, [r0, #1]
   11b4c:	cmp	r3, #2
   11b50:	add	ip, ip, r4, lsr #6
   11b54:	and	ip, ip, #31
   11b58:	ldrb	ip, [lr, ip]
   11b5c:	strb	ip, [r2, #-7]
   11b60:	beq	11cd8 <__assert_fail@plt+0xdd8>
   11b64:	ubfx	ip, r4, #1, #5
   11b68:	cmp	r3, #3
   11b6c:	ldrb	ip, [lr, ip]
   11b70:	strb	ip, [r2, #-6]
   11b74:	beq	11cd8 <__assert_fail@plt+0xdd8>
   11b78:	cmp	r1, #2
   11b7c:	lsl	r4, r4, #4
   11b80:	beq	11cc4 <__assert_fail@plt+0xdc4>
   11b84:	ldrb	ip, [r0, #2]
   11b88:	cmp	r3, #4
   11b8c:	add	r4, r4, ip, lsr #4
   11b90:	and	r4, r4, #31
   11b94:	ldrb	r4, [lr, r4]
   11b98:	strb	r4, [r2, #-5]
   11b9c:	beq	11cd8 <__assert_fail@plt+0xdd8>
   11ba0:	cmp	r1, #3
   11ba4:	lsl	r4, ip, #1
   11ba8:	beq	11ce4 <__assert_fail@plt+0xde4>
   11bac:	ldrb	ip, [r0, #3]
   11bb0:	cmp	r3, #5
   11bb4:	add	r4, r4, ip, lsr #7
   11bb8:	and	r4, r4, #31
   11bbc:	ldrb	r4, [lr, r4]
   11bc0:	strb	r4, [r2, #-4]
   11bc4:	beq	11cd8 <__assert_fail@plt+0xdd8>
   11bc8:	ubfx	r4, ip, #2, #5
   11bcc:	cmp	r3, #6
   11bd0:	ldrb	r4, [lr, r4]
   11bd4:	strb	r4, [r2, #-3]
   11bd8:	beq	11cd8 <__assert_fail@plt+0xdd8>
   11bdc:	cmp	r1, #4
   11be0:	lsl	ip, ip, #3
   11be4:	beq	11d04 <__assert_fail@plt+0xe04>
   11be8:	ldrb	r4, [r0, #4]
   11bec:	cmp	r3, #7
   11bf0:	add	ip, ip, r4, lsr #5
   11bf4:	and	ip, ip, #31
   11bf8:	ldrb	ip, [lr, ip]
   11bfc:	strb	ip, [r2, #-2]
   11c00:	beq	11cd8 <__assert_fail@plt+0xdd8>
   11c04:	and	r4, r4, #31
   11c08:	cmp	r3, #8
   11c0c:	ldrb	ip, [lr, r4]
   11c10:	strb	ip, [r2, #-1]
   11c14:	beq	11cd8 <__assert_fail@plt+0xdd8>
   11c18:	subs	r1, r1, #5
   11c1c:	addne	r0, r0, #5
   11c20:	sub	r3, r3, #8
   11c24:	add	r2, r2, #8
   11c28:	adds	ip, r3, #0
   11c2c:	movne	ip, #1
   11c30:	cmp	r1, #0
   11c34:	moveq	ip, #0
   11c38:	cmp	ip, #0
   11c3c:	beq	11d1c <__assert_fail@plt+0xe1c>
   11c40:	ldrb	ip, [r0]
   11c44:	cmp	r3, #1
   11c48:	ldrb	r4, [lr, ip, lsr #3]
   11c4c:	strb	r4, [r2, #-8]
   11c50:	beq	11cd8 <__assert_fail@plt+0xdd8>
   11c54:	cmp	r1, #1
   11c58:	lsl	ip, ip, #2
   11c5c:	bne	11b48 <__assert_fail@plt+0xc48>
   11c60:	and	ip, ip, #31
   11c64:	cmp	r3, #2
   11c68:	ldrb	r1, [lr, ip]
   11c6c:	strb	r1, [r2, #-7]
   11c70:	beq	11cd8 <__assert_fail@plt+0xdd8>
   11c74:	cmp	r3, #3
   11c78:	strb	r5, [r2, #-6]
   11c7c:	beq	11cd8 <__assert_fail@plt+0xdd8>
   11c80:	cmp	r3, #4
   11c84:	strb	r5, [r2, #-5]
   11c88:	beq	11cd8 <__assert_fail@plt+0xdd8>
   11c8c:	cmp	r3, #5
   11c90:	strb	r5, [r2, #-4]
   11c94:	beq	11cd8 <__assert_fail@plt+0xdd8>
   11c98:	cmp	r3, #6
   11c9c:	strb	r5, [r2, #-3]
   11ca0:	beq	11cd8 <__assert_fail@plt+0xdd8>
   11ca4:	cmp	r3, #7
   11ca8:	strb	r5, [r2, #-2]
   11cac:	beq	11cd8 <__assert_fail@plt+0xdd8>
   11cb0:	cmp	r3, #8
   11cb4:	strb	r5, [r2, #-1]
   11cb8:	beq	11cd8 <__assert_fail@plt+0xdd8>
   11cbc:	mov	r1, #0
   11cc0:	b	11c20 <__assert_fail@plt+0xd20>
   11cc4:	and	r4, r4, #31
   11cc8:	cmp	r3, #4
   11ccc:	ldrb	r1, [lr, r4]
   11cd0:	strb	r1, [r2, #-5]
   11cd4:	bne	11c8c <__assert_fail@plt+0xd8c>
   11cd8:	ldrd	r4, [sp]
   11cdc:	add	sp, sp, #8
   11ce0:	pop	{pc}		; (ldr pc, [sp], #4)
   11ce4:	and	ip, r4, #31
   11ce8:	cmp	r3, #5
   11cec:	ldrb	r1, [lr, ip]
   11cf0:	strb	r1, [r2, #-4]
   11cf4:	bne	11c98 <__assert_fail@plt+0xd98>
   11cf8:	ldrd	r4, [sp]
   11cfc:	add	sp, sp, #8
   11d00:	pop	{pc}		; (ldr pc, [sp], #4)
   11d04:	and	ip, ip, #31
   11d08:	cmp	r3, #7
   11d0c:	ldrb	r1, [lr, ip]
   11d10:	strb	r1, [r2, #-2]
   11d14:	beq	11cd8 <__assert_fail@plt+0xdd8>
   11d18:	b	11cb0 <__assert_fail@plt+0xdb0>
   11d1c:	cmp	r3, #0
   11d20:	strbne	ip, [r2, #-8]
   11d24:	b	11cd8 <__assert_fail@plt+0xdd8>
   11d28:	movw	ip, #26215	; 0x6667
   11d2c:	movt	ip, #26214	; 0x6666
   11d30:	strd	r4, [sp, #-24]!	; 0xffffffe8
   11d34:	asr	r3, r1, #31
   11d38:	strd	r6, [sp, #8]
   11d3c:	str	lr, [sp, #20]
   11d40:	smull	lr, ip, ip, r1
   11d44:	str	r8, [sp, #16]
   11d48:	rsb	r3, r3, ip, asr #1
   11d4c:	add	ip, r3, r3, lsl #2
   11d50:	cmp	r1, ip
   11d54:	addne	r3, r3, #1
   11d58:	asr	r7, r3, #31
   11d5c:	lsl	r5, r3, #3
   11d60:	lsl	ip, r7, #3
   11d64:	orr	ip, ip, r3, lsr #29
   11d68:	cmp	ip, r5, asr #31
   11d6c:	movne	r3, #1
   11d70:	moveq	r3, #0
   11d74:	orrs	r3, r3, r1, lsr #31
   11d78:	beq	11da0 <__assert_fail@plt+0xea0>
   11d7c:	mov	r3, #0
   11d80:	mov	r5, r3
   11d84:	str	r3, [r2]
   11d88:	mov	r0, r5
   11d8c:	ldrd	r4, [sp]
   11d90:	ldrd	r6, [sp, #8]
   11d94:	ldr	r8, [sp, #16]
   11d98:	add	sp, sp, #20
   11d9c:	pop	{pc}		; (ldr pc, [sp], #4)
   11da0:	add	r8, r5, #1
   11da4:	mov	r7, r0
   11da8:	mov	r0, r8
   11dac:	mov	r6, r2
   11db0:	mov	r4, r1
   11db4:	bl	181e4 <__assert_fail@plt+0x72e4>
   11db8:	cmp	r0, #0
   11dbc:	str	r0, [r6]
   11dc0:	moveq	r5, r8
   11dc4:	beq	11d88 <__assert_fail@plt+0xe88>
   11dc8:	mov	r2, r0
   11dcc:	mov	r3, r8
   11dd0:	mov	r1, r4
   11dd4:	mov	r0, r7
   11dd8:	bl	11b2c <__assert_fail@plt+0xc2c>
   11ddc:	b	11d88 <__assert_fail@plt+0xe88>
   11de0:	movw	r3, #35828	; 0x8bf4
   11de4:	movt	r3, #1
   11de8:	add	r0, r3, r0
   11dec:	ldrb	r0, [r0, #32]
   11df0:	mvn	r0, r0
   11df4:	ubfx	r0, r0, #7, #1
   11df8:	bx	lr
   11dfc:	mov	r3, #0
   11e00:	str	r3, [r0]
   11e04:	bx	lr
   11e08:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11e0c:	mov	r4, r1
   11e10:	mov	r5, r2
   11e14:	strd	r6, [sp, #8]
   11e18:	mov	r7, r3
   11e1c:	strd	r8, [sp, #16]
   11e20:	subs	r8, r0, #0
   11e24:	movne	r3, #1
   11e28:	moveq	r3, #0
   11e2c:	strd	sl, [sp, #24]
   11e30:	str	lr, [sp, #32]
   11e34:	sub	sp, sp, #20
   11e38:	str	r3, [sp, #8]
   11e3c:	ldr	r3, [sp, #56]	; 0x38
   11e40:	ldr	r9, [r3]
   11e44:	beq	12350 <__assert_fail@plt+0x1450>
   11e48:	adds	sl, r2, #0
   11e4c:	ldr	r3, [r8]
   11e50:	movne	sl, #1
   11e54:	cmp	r3, #0
   11e58:	moveq	r3, sl
   11e5c:	movne	r3, #0
   11e60:	str	r3, [sp, #4]
   11e64:	movw	r6, #35828	; 0x8bf4
   11e68:	movt	r6, #1
   11e6c:	add	r3, r8, #4
   11e70:	str	r3, [sp, #12]
   11e74:	ldr	r3, [sp, #4]
   11e78:	cmp	r3, #0
   11e7c:	bne	11f2c <__assert_fail@plt+0x102c>
   11e80:	cmp	r5, #0
   11e84:	moveq	r0, sl
   11e88:	movne	r0, #0
   11e8c:	cmp	r0, #0
   11e90:	bne	11ed8 <__assert_fail@plt+0xfd8>
   11e94:	cmp	r5, #0
   11e98:	bne	12054 <__assert_fail@plt+0x1154>
   11e9c:	cmp	r8, #0
   11ea0:	beq	1236c <__assert_fail@plt+0x146c>
   11ea4:	ldr	r5, [r8]
   11ea8:	cmp	r5, #8
   11eac:	beq	12188 <__assert_fail@plt+0x1288>
   11eb0:	mov	fp, r4
   11eb4:	cmp	r5, #0
   11eb8:	ldr	r2, [sp, #12]
   11ebc:	beq	1236c <__assert_fail@plt+0x146c>
   11ec0:	cmp	r5, #7
   11ec4:	mov	r3, r4
   11ec8:	mov	r4, r2
   11ecc:	bgt	12084 <__assert_fail@plt+0x1184>
   11ed0:	ldr	r0, [sp, #8]
   11ed4:	and	r0, r0, sl
   11ed8:	ldr	r3, [sp, #56]	; 0x38
   11edc:	ldr	r3, [r3]
   11ee0:	sub	r9, r3, r9
   11ee4:	ldr	r3, [sp, #56]	; 0x38
   11ee8:	str	r9, [r3]
   11eec:	add	sp, sp, #20
   11ef0:	ldrd	r4, [sp]
   11ef4:	ldrd	r6, [sp, #8]
   11ef8:	ldrd	r8, [sp, #16]
   11efc:	ldrd	sl, [sp, #24]
   11f00:	add	sp, sp, #32
   11f04:	pop	{pc}		; (ldr pc, [sp], #4)
   11f08:	cmp	r3, #61	; 0x3d
   11f0c:	beq	11f20 <__assert_fail@plt+0x1020>
   11f10:	add	r3, r6, r3
   11f14:	ldrsb	r3, [r3, #32]
   11f18:	cmp	r3, #0
   11f1c:	blt	12058 <__assert_fail@plt+0x1158>
   11f20:	mov	r9, r0
   11f24:	sub	r5, r5, #8
   11f28:	add	r4, r4, #8
   11f2c:	cmp	r5, #7
   11f30:	ble	11e80 <__assert_fail@plt+0xf80>
   11f34:	ldrb	r3, [r4]
   11f38:	add	r3, r6, r3
   11f3c:	ldrsb	r3, [r3, #32]
   11f40:	cmp	r3, #0
   11f44:	blt	12054 <__assert_fail@plt+0x1154>
   11f48:	ldrb	r2, [r4, #1]
   11f4c:	add	r2, r6, r2
   11f50:	ldrsb	r1, [r2, #32]
   11f54:	cmp	r1, #0
   11f58:	blt	12054 <__assert_fail@plt+0x1154>
   11f5c:	cmp	r9, #0
   11f60:	moveq	r0, r9
   11f64:	beq	11f78 <__assert_fail@plt+0x1078>
   11f68:	asr	r2, r1, #2
   11f6c:	sub	r0, r9, #1
   11f70:	orr	r3, r2, r3, lsl #3
   11f74:	strb	r3, [r7], #1
   11f78:	ldrb	r3, [r4, #2]
   11f7c:	cmp	r3, #61	; 0x3d
   11f80:	beq	12128 <__assert_fail@plt+0x1228>
   11f84:	add	r3, r6, r3
   11f88:	ldrsb	r2, [r3, #32]
   11f8c:	cmp	r2, #0
   11f90:	blt	12058 <__assert_fail@plt+0x1158>
   11f94:	ldrb	r3, [r4, #3]
   11f98:	add	r3, r6, r3
   11f9c:	ldrsb	ip, [r3, #32]
   11fa0:	cmp	ip, #0
   11fa4:	blt	12058 <__assert_fail@plt+0x1158>
   11fa8:	cmp	r0, #0
   11fac:	ldrb	r3, [r4, #4]
   11fb0:	bne	12194 <__assert_fail@plt+0x1294>
   11fb4:	cmp	r3, #61	; 0x3d
   11fb8:	beq	12140 <__assert_fail@plt+0x1240>
   11fbc:	add	r3, r6, r3
   11fc0:	ldrsb	r2, [r3, #32]
   11fc4:	cmp	r2, #0
   11fc8:	blt	12058 <__assert_fail@plt+0x1158>
   11fcc:	ldrb	r3, [r4, #5]
   11fd0:	cmp	r3, #61	; 0x3d
   11fd4:	beq	1214c <__assert_fail@plt+0x124c>
   11fd8:	add	r3, r6, r3
   11fdc:	ldrsb	r1, [r3, #32]
   11fe0:	cmp	r1, #0
   11fe4:	blt	12058 <__assert_fail@plt+0x1158>
   11fe8:	ldrb	r3, [r4, #6]
   11fec:	add	r3, r6, r3
   11ff0:	ldrsb	ip, [r3, #32]
   11ff4:	cmp	ip, #0
   11ff8:	blt	12058 <__assert_fail@plt+0x1158>
   11ffc:	cmp	r0, #0
   12000:	ldrb	r3, [r4, #7]
   12004:	beq	11f08 <__assert_fail@plt+0x1008>
   12008:	asr	fp, ip, #3
   1200c:	mov	lr, r7
   12010:	cmp	r3, #61	; 0x3d
   12014:	orr	fp, fp, r1, lsl #2
   12018:	sub	r1, r0, #1
   1201c:	orr	r2, fp, r2, lsl #7
   12020:	strb	r2, [lr], #1
   12024:	beq	12374 <__assert_fail@plt+0x1474>
   12028:	add	r3, r6, r3
   1202c:	ldrsb	r3, [r3, #32]
   12030:	cmp	r3, #0
   12034:	blt	1244c <__assert_fail@plt+0x154c>
   12038:	cmp	r1, #0
   1203c:	beq	12374 <__assert_fail@plt+0x1474>
   12040:	orr	r3, r3, ip, lsl #5
   12044:	sub	r9, r0, #2
   12048:	add	r7, r7, #2
   1204c:	strb	r3, [r7, #-1]
   12050:	b	11f24 <__assert_fail@plt+0x1024>
   12054:	mov	r0, r9
   12058:	ldrb	r3, [r4]
   1205c:	cmp	r3, #10
   12060:	beq	12170 <__assert_fail@plt+0x1270>
   12064:	sub	r3, r9, r0
   12068:	cmp	r8, #0
   1206c:	sub	r7, r7, r3
   12070:	add	fp, r4, r5
   12074:	bne	123a8 <__assert_fail@plt+0x14a8>
   12078:	cmp	r5, #7
   1207c:	mov	r3, r4
   12080:	ble	11ed0 <__assert_fail@plt+0xfd0>
   12084:	mov	r2, r4
   12088:	mov	r4, r3
   1208c:	ldrb	r3, [r2]
   12090:	add	r3, r6, r3
   12094:	ldrsb	r1, [r3, #32]
   12098:	cmp	r1, #0
   1209c:	blt	12120 <__assert_fail@plt+0x1220>
   120a0:	ldrb	r3, [r2, #1]
   120a4:	add	r3, r6, r3
   120a8:	ldrsb	r0, [r3, #32]
   120ac:	cmp	r0, #0
   120b0:	blt	12120 <__assert_fail@plt+0x1220>
   120b4:	cmp	r9, #0
   120b8:	beq	120cc <__assert_fail@plt+0x11cc>
   120bc:	asr	r3, r0, #2
   120c0:	sub	r9, r9, #1
   120c4:	orr	r1, r3, r1, lsl #3
   120c8:	strb	r1, [r7], #1
   120cc:	ldrb	r3, [r2, #2]
   120d0:	cmp	r3, #61	; 0x3d
   120d4:	beq	121e4 <__assert_fail@plt+0x12e4>
   120d8:	add	r3, r6, r3
   120dc:	ldrsb	r3, [r3, #32]
   120e0:	cmp	r3, #0
   120e4:	blt	12120 <__assert_fail@plt+0x1220>
   120e8:	ldrb	r1, [r2, #3]
   120ec:	add	r1, r6, r1
   120f0:	ldrsb	ip, [r1, #32]
   120f4:	cmp	ip, #0
   120f8:	blt	12120 <__assert_fail@plt+0x1220>
   120fc:	cmp	r9, #0
   12100:	ldrb	r1, [r2, #4]
   12104:	bne	1223c <__assert_fail@plt+0x133c>
   12108:	cmp	r1, #61	; 0x3d
   1210c:	beq	12320 <__assert_fail@plt+0x1420>
   12110:	add	r1, r6, r1
   12114:	ldrsb	r1, [r1, #32]
   12118:	cmp	r1, #0
   1211c:	bge	1228c <__assert_fail@plt+0x138c>
   12120:	mov	r0, #0
   12124:	b	11ed8 <__assert_fail@plt+0xfd8>
   12128:	ldrb	r3, [r4, #3]
   1212c:	cmp	r3, #61	; 0x3d
   12130:	bne	12058 <__assert_fail@plt+0x1158>
   12134:	ldrb	r3, [r4, #4]
   12138:	cmp	r3, #61	; 0x3d
   1213c:	bne	12058 <__assert_fail@plt+0x1158>
   12140:	ldrb	r3, [r4, #5]
   12144:	cmp	r3, #61	; 0x3d
   12148:	bne	12058 <__assert_fail@plt+0x1158>
   1214c:	ldrb	r3, [r4, #6]
   12150:	cmp	r3, #61	; 0x3d
   12154:	bne	12058 <__assert_fail@plt+0x1158>
   12158:	ldrb	r3, [r4, #7]
   1215c:	cmp	r3, #61	; 0x3d
   12160:	beq	11f20 <__assert_fail@plt+0x1020>
   12164:	ldrb	r3, [r4]
   12168:	cmp	r3, #10
   1216c:	bne	12064 <__assert_fail@plt+0x1164>
   12170:	cmp	r8, #0
   12174:	beq	12228 <__assert_fail@plt+0x1328>
   12178:	add	r4, r4, #1
   1217c:	sub	r5, r5, #1
   12180:	mov	r9, r0
   12184:	b	11e74 <__assert_fail@plt+0xf74>
   12188:	str	r0, [r8]
   1218c:	mov	r0, #1
   12190:	b	11ed8 <__assert_fail@plt+0xfd8>
   12194:	asr	fp, ip, #4
   12198:	mov	lr, r7
   1219c:	cmp	r3, #61	; 0x3d
   121a0:	orr	r1, fp, r1, lsl #6
   121a4:	sub	fp, r0, #1
   121a8:	orr	r2, r1, r2, lsl #1
   121ac:	strb	r2, [lr], #1
   121b0:	beq	12314 <__assert_fail@plt+0x1414>
   121b4:	add	r3, r6, r3
   121b8:	ldrsb	r2, [r3, #32]
   121bc:	cmp	r2, #0
   121c0:	blt	12360 <__assert_fail@plt+0x1460>
   121c4:	cmp	fp, #0
   121c8:	beq	1239c <__assert_fail@plt+0x149c>
   121cc:	asr	r3, r2, #1
   121d0:	sub	r0, r0, #2
   121d4:	add	r7, r7, #2
   121d8:	orr	ip, r3, ip, lsl #4
   121dc:	strb	ip, [r7, #-1]
   121e0:	b	11fcc <__assert_fail@plt+0x10cc>
   121e4:	ldrb	r3, [r2, #3]
   121e8:	cmp	r3, #61	; 0x3d
   121ec:	bne	12120 <__assert_fail@plt+0x1220>
   121f0:	ldrb	r3, [r2, #4]
   121f4:	cmp	r3, #61	; 0x3d
   121f8:	bne	12120 <__assert_fail@plt+0x1220>
   121fc:	ldrb	r3, [r2, #5]
   12200:	cmp	r3, #61	; 0x3d
   12204:	bne	12120 <__assert_fail@plt+0x1220>
   12208:	ldrb	r3, [r2, #6]
   1220c:	cmp	r3, #61	; 0x3d
   12210:	bne	12120 <__assert_fail@plt+0x1220>
   12214:	ldrb	r3, [r2, #7]
   12218:	cmp	r3, #61	; 0x3d
   1221c:	bne	12120 <__assert_fail@plt+0x1220>
   12220:	sub	r5, fp, r4
   12224:	b	11e74 <__assert_fail@plt+0xf74>
   12228:	sub	r3, r9, r0
   1222c:	add	fp, r4, r5
   12230:	sub	r7, r7, r3
   12234:	mov	r2, r4
   12238:	b	11ec0 <__assert_fail@plt+0xfc0>
   1223c:	lsl	r3, r3, #1
   12240:	mov	r5, r7
   12244:	cmp	r1, #61	; 0x3d
   12248:	sub	lr, r9, #1
   1224c:	orr	r0, r3, r0, lsl #6
   12250:	moveq	r9, lr
   12254:	orr	r0, r0, ip, asr #4
   12258:	strb	r0, [r5], #1
   1225c:	beq	12324 <__assert_fail@plt+0x1424>
   12260:	add	r1, r6, r1
   12264:	ldrsb	r1, [r1, #32]
   12268:	cmp	r1, #0
   1226c:	blt	12434 <__assert_fail@plt+0x1534>
   12270:	cmp	lr, #0
   12274:	beq	12440 <__assert_fail@plt+0x1540>
   12278:	asr	r3, r1, #1
   1227c:	sub	r9, r9, #2
   12280:	add	r7, r7, #2
   12284:	orr	ip, r3, ip, lsl #4
   12288:	strb	ip, [r7, #-1]
   1228c:	ldrb	r3, [r2, #5]
   12290:	cmp	r3, #61	; 0x3d
   12294:	beq	12208 <__assert_fail@plt+0x1308>
   12298:	add	r3, r6, r3
   1229c:	ldrsb	r0, [r3, #32]
   122a0:	cmp	r0, #0
   122a4:	blt	12120 <__assert_fail@plt+0x1220>
   122a8:	ldrb	r3, [r2, #6]
   122ac:	add	r3, r6, r3
   122b0:	ldrsb	ip, [r3, #32]
   122b4:	cmp	ip, #0
   122b8:	blt	12120 <__assert_fail@plt+0x1220>
   122bc:	cmp	r9, #0
   122c0:	ldrb	r3, [r2, #7]
   122c4:	beq	12380 <__assert_fail@plt+0x1480>
   122c8:	asr	lr, ip, #3
   122cc:	mov	r2, r7
   122d0:	cmp	r3, #61	; 0x3d
   122d4:	sub	r5, r9, #1
   122d8:	orr	r0, lr, r0, lsl #2
   122dc:	orr	r1, r0, r1, lsl #7
   122e0:	strb	r1, [r2], #1
   122e4:	beq	12458 <__assert_fail@plt+0x1558>
   122e8:	add	r3, r6, r3
   122ec:	ldrsb	r3, [r3, #32]
   122f0:	cmp	r3, #0
   122f4:	blt	12470 <__assert_fail@plt+0x1570>
   122f8:	cmp	r5, #0
   122fc:	beq	12458 <__assert_fail@plt+0x1558>
   12300:	orr	r3, r3, ip, lsl #5
   12304:	sub	r9, r9, #2
   12308:	add	r7, r7, #2
   1230c:	strb	r3, [r7, #-1]
   12310:	b	12220 <__assert_fail@plt+0x1320>
   12314:	mov	r0, fp
   12318:	mov	r7, lr
   1231c:	b	12140 <__assert_fail@plt+0x1240>
   12320:	mov	r5, r7
   12324:	ldrb	r3, [r2, #5]
   12328:	cmp	r3, #61	; 0x3d
   1232c:	bne	12120 <__assert_fail@plt+0x1220>
   12330:	ldrb	r3, [r2, #6]
   12334:	cmp	r3, #61	; 0x3d
   12338:	bne	12120 <__assert_fail@plt+0x1220>
   1233c:	ldrb	r3, [r2, #7]
   12340:	cmp	r3, #61	; 0x3d
   12344:	bne	12120 <__assert_fail@plt+0x1220>
   12348:	mov	r7, r5
   1234c:	b	12220 <__assert_fail@plt+0x1320>
   12350:	mov	r3, #1
   12354:	mov	sl, r3
   12358:	str	r3, [sp, #4]
   1235c:	b	11e64 <__assert_fail@plt+0xf64>
   12360:	mov	r0, fp
   12364:	mov	r7, lr
   12368:	b	12058 <__assert_fail@plt+0x1158>
   1236c:	mov	r0, #1
   12370:	b	11ed8 <__assert_fail@plt+0xfd8>
   12374:	mov	r9, r1
   12378:	mov	r7, lr
   1237c:	b	11f24 <__assert_fail@plt+0x1024>
   12380:	cmp	r3, #61	; 0x3d
   12384:	beq	12220 <__assert_fail@plt+0x1320>
   12388:	add	r3, r6, r3
   1238c:	ldrsb	r3, [r3, #32]
   12390:	cmp	r3, #0
   12394:	bge	12220 <__assert_fail@plt+0x1320>
   12398:	b	12120 <__assert_fail@plt+0x1220>
   1239c:	mov	r0, fp
   123a0:	mov	r7, lr
   123a4:	b	11fcc <__assert_fail@plt+0x10cc>
   123a8:	ldr	r2, [r8]
   123ac:	cmp	r5, #7
   123b0:	movle	r3, #0
   123b4:	movgt	r3, #1
   123b8:	cmp	r2, #8
   123bc:	beq	12464 <__assert_fail@plt+0x1564>
   123c0:	cmp	r2, #0
   123c4:	mov	r5, r2
   123c8:	movne	r3, #0
   123cc:	cmp	r3, #0
   123d0:	beq	123ec <__assert_fail@plt+0x14ec>
   123d4:	mov	r2, #8
   123d8:	mov	r1, #10
   123dc:	mov	r0, r4
   123e0:	bl	10e64 <memchr@plt>
   123e4:	cmp	r0, #0
   123e8:	beq	12428 <__assert_fail@plt+0x1528>
   123ec:	cmp	fp, r4
   123f0:	bls	11eb4 <__assert_fail@plt+0xfb4>
   123f4:	ldrb	r1, [r4], #1
   123f8:	add	r3, r5, #1
   123fc:	mov	r2, r8
   12400:	cmp	r1, #10
   12404:	beq	1241c <__assert_fail@plt+0x151c>
   12408:	cmp	r3, #8
   1240c:	str	r3, [r2], r5
   12410:	mov	r5, r3
   12414:	strb	r1, [r2, #4]
   12418:	beq	11eb4 <__assert_fail@plt+0xfb4>
   1241c:	cmp	r4, fp
   12420:	bne	123f4 <__assert_fail@plt+0x14f4>
   12424:	b	11eb4 <__assert_fail@plt+0xfb4>
   12428:	mov	r2, r4
   1242c:	add	r4, r4, #8
   12430:	b	1208c <__assert_fail@plt+0x118c>
   12434:	mov	r9, lr
   12438:	mov	r0, #0
   1243c:	b	11ed8 <__assert_fail@plt+0xfd8>
   12440:	mov	r9, lr
   12444:	mov	r7, r5
   12448:	b	1228c <__assert_fail@plt+0x138c>
   1244c:	mov	r0, r1
   12450:	mov	r7, lr
   12454:	b	12058 <__assert_fail@plt+0x1158>
   12458:	mov	r9, r5
   1245c:	mov	r7, r2
   12460:	b	12220 <__assert_fail@plt+0x1320>
   12464:	mov	r5, #0
   12468:	str	r5, [r8]
   1246c:	b	123cc <__assert_fail@plt+0x14cc>
   12470:	mov	r9, r5
   12474:	b	12120 <__assert_fail@plt+0x1220>
   12478:	strd	r4, [sp, #-20]!	; 0xffffffec
   1247c:	mov	r5, r3
   12480:	mov	r4, r2
   12484:	strd	r6, [sp, #8]
   12488:	mov	r6, r0
   1248c:	asr	r0, r2, #3
   12490:	str	lr, [sp, #16]
   12494:	sub	sp, sp, #20
   12498:	mov	r7, r1
   1249c:	add	r3, r0, #1
   124a0:	add	r3, r3, r3, lsl #2
   124a4:	mov	r0, r3
   124a8:	str	r3, [sp, #12]
   124ac:	bl	181e4 <__assert_fail@plt+0x72e4>
   124b0:	cmp	r0, #0
   124b4:	str	r0, [r5]
   124b8:	beq	12510 <__assert_fail@plt+0x1610>
   124bc:	add	ip, sp, #12
   124c0:	mov	r3, r0
   124c4:	mov	r2, r4
   124c8:	mov	r1, r7
   124cc:	mov	r0, r6
   124d0:	str	ip, [sp]
   124d4:	bl	11e08 <__assert_fail@plt+0xf08>
   124d8:	subs	r4, r0, #0
   124dc:	beq	12518 <__assert_fail@plt+0x1618>
   124e0:	ldr	r3, [sp, #40]	; 0x28
   124e4:	cmp	r3, #0
   124e8:	beq	12510 <__assert_fail@plt+0x1610>
   124ec:	mov	r2, r3
   124f0:	ldr	r3, [sp, #12]
   124f4:	str	r3, [r2]
   124f8:	mov	r0, r4
   124fc:	add	sp, sp, #20
   12500:	ldrd	r4, [sp]
   12504:	ldrd	r6, [sp, #8]
   12508:	add	sp, sp, #16
   1250c:	pop	{pc}		; (ldr pc, [sp], #4)
   12510:	mov	r4, #1
   12514:	b	124f8 <__assert_fail@plt+0x15f8>
   12518:	ldr	r0, [r5]
   1251c:	bl	1279c <__assert_fail@plt+0x189c>
   12520:	str	r4, [r5]
   12524:	b	124f8 <__assert_fail@plt+0x15f8>
   12528:	movw	r3, #41304	; 0xa158
   1252c:	movt	r3, #2
   12530:	str	r0, [r3]
   12534:	bx	lr
   12538:	movw	r3, #41304	; 0xa158
   1253c:	movt	r3, #2
   12540:	strb	r0, [r3, #4]
   12544:	bx	lr
   12548:	movw	r3, #41292	; 0xa14c
   1254c:	movt	r3, #2
   12550:	strd	r4, [sp, #-16]!
   12554:	ldr	r0, [r3]
   12558:	str	r6, [sp, #8]
   1255c:	str	lr, [sp, #12]
   12560:	sub	sp, sp, #8
   12564:	bl	18278 <__assert_fail@plt+0x7378>
   12568:	cmp	r0, #0
   1256c:	beq	12598 <__assert_fail@plt+0x1698>
   12570:	movw	r4, #41304	; 0xa158
   12574:	movt	r4, #2
   12578:	ldrb	r6, [r4, #4]
   1257c:	bl	10e1c <__errno_location@plt>
   12580:	mov	r5, r0
   12584:	cmp	r6, #0
   12588:	beq	125c4 <__assert_fail@plt+0x16c4>
   1258c:	ldr	r3, [r0]
   12590:	cmp	r3, #32
   12594:	bne	125c4 <__assert_fail@plt+0x16c4>
   12598:	movw	r3, #41280	; 0xa140
   1259c:	movt	r3, #2
   125a0:	ldr	r0, [r3]
   125a4:	bl	18278 <__assert_fail@plt+0x7378>
   125a8:	cmp	r0, #0
   125ac:	bne	1260c <__assert_fail@plt+0x170c>
   125b0:	add	sp, sp, #8
   125b4:	ldrd	r4, [sp]
   125b8:	ldr	r6, [sp, #8]
   125bc:	add	sp, sp, #12
   125c0:	pop	{pc}		; (ldr pc, [sp], #4)
   125c4:	movw	r1, #35628	; 0x8b2c
   125c8:	movt	r1, #1
   125cc:	mov	r2, #5
   125d0:	mov	r0, #0
   125d4:	bl	10d38 <dcgettext@plt>
   125d8:	mov	r6, r0
   125dc:	ldr	r0, [r4]
   125e0:	cmp	r0, #0
   125e4:	beq	1261c <__assert_fail@plt+0x171c>
   125e8:	ldr	r4, [r5]
   125ec:	bl	156c0 <__assert_fail@plt+0x47c0>
   125f0:	mov	r3, r0
   125f4:	movw	r2, #35560	; 0x8ae8
   125f8:	movt	r2, #1
   125fc:	mov	r0, #0
   12600:	str	r6, [sp]
   12604:	mov	r1, r4
   12608:	bl	10da4 <error@plt>
   1260c:	movw	r3, #41196	; 0xa0ec
   12610:	movt	r3, #2
   12614:	ldr	r0, [r3]
   12618:	bl	10cf0 <_exit@plt>
   1261c:	mov	r3, r6
   12620:	movw	r2, #35564	; 0x8aec
   12624:	movt	r2, #1
   12628:	ldr	r1, [r5]
   1262c:	bl	10da4 <error@plt>
   12630:	b	1260c <__assert_fail@plt+0x170c>
   12634:	b	10cc0 <posix_fadvise64@plt>
   12638:	cmp	r0, #0
   1263c:	bxeq	lr
   12640:	str	r4, [sp, #-16]!
   12644:	mov	r4, r1
   12648:	strd	r6, [sp, #4]
   1264c:	mov	r6, #0
   12650:	mov	r7, #0
   12654:	str	lr, [sp, #12]
   12658:	sub	sp, sp, #16
   1265c:	bl	10e4c <fileno@plt>
   12660:	mov	r2, r6
   12664:	mov	r3, r7
   12668:	strd	r6, [sp]
   1266c:	str	r4, [sp, #8]
   12670:	bl	10cc0 <posix_fadvise64@plt>
   12674:	add	sp, sp, #16
   12678:	ldr	r4, [sp]
   1267c:	ldrd	r6, [sp, #4]
   12680:	add	sp, sp, #12
   12684:	pop	{pc}		; (ldr pc, [sp], #4)
   12688:	strd	r4, [sp, #-12]!
   1268c:	mov	r4, r0
   12690:	str	lr, [sp, #8]
   12694:	sub	sp, sp, #12
   12698:	bl	10e4c <fileno@plt>
   1269c:	cmp	r0, #0
   126a0:	mov	r0, r4
   126a4:	blt	12728 <__assert_fail@plt+0x1828>
   126a8:	bl	10dc8 <__freading@plt>
   126ac:	cmp	r0, #0
   126b0:	bne	126f4 <__assert_fail@plt+0x17f4>
   126b4:	mov	r0, r4
   126b8:	bl	1273c <__assert_fail@plt+0x183c>
   126bc:	cmp	r0, #0
   126c0:	beq	12724 <__assert_fail@plt+0x1824>
   126c4:	bl	10e1c <__errno_location@plt>
   126c8:	mov	r5, r0
   126cc:	mov	r0, r4
   126d0:	ldr	r4, [r5]
   126d4:	bl	10e70 <fclose@plt>
   126d8:	cmp	r4, #0
   126dc:	mvnne	r0, #0
   126e0:	strne	r4, [r5]
   126e4:	add	sp, sp, #12
   126e8:	ldrd	r4, [sp]
   126ec:	add	sp, sp, #8
   126f0:	pop	{pc}		; (ldr pc, [sp], #4)
   126f4:	mov	r0, r4
   126f8:	bl	10e4c <fileno@plt>
   126fc:	mov	r1, #1
   12700:	mov	r2, #0
   12704:	mov	r3, #0
   12708:	str	r1, [sp]
   1270c:	bl	10d74 <lseek64@plt>
   12710:	mvn	r3, #0
   12714:	mvn	r2, #0
   12718:	cmp	r1, r3
   1271c:	cmpeq	r0, r2
   12720:	bne	126b4 <__assert_fail@plt+0x17b4>
   12724:	mov	r0, r4
   12728:	add	sp, sp, #12
   1272c:	ldrd	r4, [sp]
   12730:	ldr	lr, [sp, #8]
   12734:	add	sp, sp, #12
   12738:	b	10e70 <fclose@plt>
   1273c:	str	r4, [sp, #-8]!
   12740:	subs	r4, r0, #0
   12744:	str	lr, [sp, #4]
   12748:	sub	sp, sp, #8
   1274c:	beq	12768 <__assert_fail@plt+0x1868>
   12750:	bl	10dc8 <__freading@plt>
   12754:	cmp	r0, #0
   12758:	beq	12768 <__assert_fail@plt+0x1868>
   1275c:	ldr	r3, [r4]
   12760:	tst	r3, #256	; 0x100
   12764:	bne	12780 <__assert_fail@plt+0x1880>
   12768:	mov	r0, r4
   1276c:	add	sp, sp, #8
   12770:	ldr	r4, [sp]
   12774:	ldr	lr, [sp, #4]
   12778:	add	sp, sp, #8
   1277c:	b	10ccc <fflush@plt>
   12780:	mov	r1, #1
   12784:	mov	r2, #0
   12788:	mov	r3, #0
   1278c:	mov	r0, r4
   12790:	str	r1, [sp]
   12794:	bl	127fc <__assert_fail@plt+0x18fc>
   12798:	b	12768 <__assert_fail@plt+0x1868>
   1279c:	strd	r4, [sp, #-12]!
   127a0:	mov	r5, r0
   127a4:	str	lr, [sp, #8]
   127a8:	sub	sp, sp, #12
   127ac:	bl	10e1c <__errno_location@plt>
   127b0:	mov	r4, r0
   127b4:	mov	r2, #0
   127b8:	ldr	r3, [r4]
   127bc:	mov	r0, r5
   127c0:	str	r2, [r4]
   127c4:	str	r3, [sp]
   127c8:	str	r3, [sp, #4]
   127cc:	bl	10ce4 <free@plt>
   127d0:	ldr	r3, [r4]
   127d4:	add	r2, sp, #8
   127d8:	clz	r3, r3
   127dc:	lsr	r3, r3, #5
   127e0:	add	r3, r2, r3, lsl #2
   127e4:	ldr	r3, [r3, #-8]
   127e8:	str	r3, [r4]
   127ec:	add	sp, sp, #12
   127f0:	ldrd	r4, [sp]
   127f4:	add	sp, sp, #8
   127f8:	pop	{pc}		; (ldr pc, [sp], #4)
   127fc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   12800:	mov	r4, r0
   12804:	ldr	ip, [r0, #4]
   12808:	strd	r6, [sp, #8]
   1280c:	str	lr, [sp, #20]
   12810:	ldr	lr, [r0, #8]
   12814:	str	r8, [sp, #16]
   12818:	sub	sp, sp, #8
   1281c:	ldr	r5, [sp, #32]
   12820:	cmp	lr, ip
   12824:	beq	1284c <__assert_fail@plt+0x194c>
   12828:	mov	r0, r4
   1282c:	str	r5, [sp, #32]
   12830:	add	sp, sp, #8
   12834:	ldrd	r4, [sp]
   12838:	ldrd	r6, [sp, #8]
   1283c:	ldr	r8, [sp, #16]
   12840:	ldr	lr, [sp, #20]
   12844:	add	sp, sp, #24
   12848:	b	10e7c <fseeko64@plt>
   1284c:	ldr	ip, [r0, #16]
   12850:	ldr	lr, [r0, #20]
   12854:	cmp	lr, ip
   12858:	bne	12828 <__assert_fail@plt+0x1928>
   1285c:	ldr	r8, [r0, #36]	; 0x24
   12860:	cmp	r8, #0
   12864:	bne	12828 <__assert_fail@plt+0x1928>
   12868:	mov	r6, r2
   1286c:	mov	r7, r3
   12870:	bl	10e4c <fileno@plt>
   12874:	mov	r2, r6
   12878:	mov	r3, r7
   1287c:	str	r5, [sp]
   12880:	bl	10d74 <lseek64@plt>
   12884:	mvn	r3, #0
   12888:	mvn	r2, #0
   1288c:	cmp	r1, r3
   12890:	cmpeq	r0, r2
   12894:	beq	128c4 <__assert_fail@plt+0x19c4>
   12898:	ldr	r3, [r4]
   1289c:	strd	r0, [r4, #80]	; 0x50
   128a0:	bic	r3, r3, #16
   128a4:	str	r3, [r4]
   128a8:	mov	r0, r8
   128ac:	add	sp, sp, #8
   128b0:	ldrd	r4, [sp]
   128b4:	ldrd	r6, [sp, #8]
   128b8:	ldr	r8, [sp, #16]
   128bc:	add	sp, sp, #20
   128c0:	pop	{pc}		; (ldr pc, [sp], #4)
   128c4:	mvn	r8, #0
   128c8:	b	128a8 <__assert_fail@plt+0x19a8>
   128cc:	strd	r4, [sp, #-16]!
   128d0:	subs	r4, r0, #0
   128d4:	str	r6, [sp, #8]
   128d8:	str	lr, [sp, #12]
   128dc:	beq	12974 <__assert_fail@plt+0x1a74>
   128e0:	mov	r1, #47	; 0x2f
   128e4:	bl	10ea0 <strrchr@plt>
   128e8:	subs	r5, r0, #0
   128ec:	beq	1294c <__assert_fail@plt+0x1a4c>
   128f0:	add	r6, r5, #1
   128f4:	sub	r3, r6, r4
   128f8:	cmp	r3, #6
   128fc:	ble	1294c <__assert_fail@plt+0x1a4c>
   12900:	movw	r1, #36172	; 0x8d4c
   12904:	movt	r1, #1
   12908:	mov	r2, #7
   1290c:	sub	r0, r5, #6
   12910:	bl	10ee8 <strncmp@plt>
   12914:	cmp	r0, #0
   12918:	bne	1294c <__assert_fail@plt+0x1a4c>
   1291c:	movw	r1, #36180	; 0x8d54
   12920:	movt	r1, #1
   12924:	mov	r2, #3
   12928:	mov	r0, r6
   1292c:	bl	10ee8 <strncmp@plt>
   12930:	cmp	r0, #0
   12934:	movne	r4, r6
   12938:	bne	1294c <__assert_fail@plt+0x1a4c>
   1293c:	add	r4, r5, #4
   12940:	movw	r3, #41264	; 0xa130
   12944:	movt	r3, #2
   12948:	str	r4, [r3]
   1294c:	movw	r2, #41312	; 0xa160
   12950:	movt	r2, #2
   12954:	ldr	r6, [sp, #8]
   12958:	movw	r3, #41268	; 0xa134
   1295c:	movt	r3, #2
   12960:	str	r4, [r2]
   12964:	str	r4, [r3]
   12968:	ldrd	r4, [sp]
   1296c:	add	sp, sp, #12
   12970:	pop	{pc}		; (ldr pc, [sp], #4)
   12974:	movw	r3, #41280	; 0xa140
   12978:	movt	r3, #2
   1297c:	movw	r0, #36116	; 0x8d14
   12980:	movt	r0, #1
   12984:	ldr	r3, [r3]
   12988:	mov	r2, #55	; 0x37
   1298c:	mov	r1, #1
   12990:	bl	10d68 <fwrite@plt>
   12994:	bl	10ef4 <abort@plt>
   12998:	mov	r2, #5
   1299c:	strd	r4, [sp, #-16]!
   129a0:	mov	r5, r0
   129a4:	str	r6, [sp, #8]
   129a8:	mov	r6, r1
   129ac:	mov	r1, r0
   129b0:	mov	r0, #0
   129b4:	str	lr, [sp, #12]
   129b8:	bl	10d38 <dcgettext@plt>
   129bc:	cmp	r5, r0
   129c0:	mov	r4, r0
   129c4:	beq	129dc <__assert_fail@plt+0x1adc>
   129c8:	mov	r0, r4
   129cc:	ldrd	r4, [sp]
   129d0:	ldr	r6, [sp, #8]
   129d4:	add	sp, sp, #12
   129d8:	pop	{pc}		; (ldr pc, [sp], #4)
   129dc:	bl	18300 <__assert_fail@plt+0x7400>
   129e0:	ldrb	r3, [r0]
   129e4:	bic	r3, r3, #32
   129e8:	cmp	r3, #85	; 0x55
   129ec:	bne	12a54 <__assert_fail@plt+0x1b54>
   129f0:	ldrb	r3, [r0, #1]
   129f4:	bic	r3, r3, #32
   129f8:	cmp	r3, #84	; 0x54
   129fc:	bne	12ad4 <__assert_fail@plt+0x1bd4>
   12a00:	ldrb	r3, [r0, #2]
   12a04:	bic	r3, r3, #32
   12a08:	cmp	r3, #70	; 0x46
   12a0c:	bne	12ad4 <__assert_fail@plt+0x1bd4>
   12a10:	ldrb	r3, [r0, #3]
   12a14:	cmp	r3, #45	; 0x2d
   12a18:	bne	12ad4 <__assert_fail@plt+0x1bd4>
   12a1c:	ldrb	r3, [r0, #4]
   12a20:	cmp	r3, #56	; 0x38
   12a24:	bne	12ad4 <__assert_fail@plt+0x1bd4>
   12a28:	ldrb	r3, [r0, #5]
   12a2c:	cmp	r3, #0
   12a30:	bne	12ad4 <__assert_fail@plt+0x1bd4>
   12a34:	ldrb	r2, [r4]
   12a38:	movw	r3, #36272	; 0x8db0
   12a3c:	movt	r3, #1
   12a40:	movw	r4, #36284	; 0x8dbc
   12a44:	movt	r4, #1
   12a48:	cmp	r2, #96	; 0x60
   12a4c:	movne	r4, r3
   12a50:	b	129c8 <__assert_fail@plt+0x1ac8>
   12a54:	cmp	r3, #71	; 0x47
   12a58:	bne	12ad4 <__assert_fail@plt+0x1bd4>
   12a5c:	ldrb	r3, [r0, #1]
   12a60:	bic	r3, r3, #32
   12a64:	cmp	r3, #66	; 0x42
   12a68:	bne	12ad4 <__assert_fail@plt+0x1bd4>
   12a6c:	ldrb	r3, [r0, #2]
   12a70:	cmp	r3, #49	; 0x31
   12a74:	bne	12ad4 <__assert_fail@plt+0x1bd4>
   12a78:	ldrb	r3, [r0, #3]
   12a7c:	cmp	r3, #56	; 0x38
   12a80:	bne	12ad4 <__assert_fail@plt+0x1bd4>
   12a84:	ldrb	r3, [r0, #4]
   12a88:	cmp	r3, #48	; 0x30
   12a8c:	bne	12ad4 <__assert_fail@plt+0x1bd4>
   12a90:	ldrb	r3, [r0, #5]
   12a94:	cmp	r3, #51	; 0x33
   12a98:	bne	12ad4 <__assert_fail@plt+0x1bd4>
   12a9c:	ldrb	r3, [r0, #6]
   12aa0:	cmp	r3, #48	; 0x30
   12aa4:	bne	12ad4 <__assert_fail@plt+0x1bd4>
   12aa8:	ldrb	r3, [r0, #7]
   12aac:	cmp	r3, #0
   12ab0:	bne	12ad4 <__assert_fail@plt+0x1bd4>
   12ab4:	ldrb	r2, [r4]
   12ab8:	movw	r3, #36276	; 0x8db4
   12abc:	movt	r3, #1
   12ac0:	movw	r4, #36280	; 0x8db8
   12ac4:	movt	r4, #1
   12ac8:	cmp	r2, #96	; 0x60
   12acc:	movne	r4, r3
   12ad0:	b	129c8 <__assert_fail@plt+0x1ac8>
   12ad4:	movw	r3, #36288	; 0x8dc0
   12ad8:	movt	r3, #1
   12adc:	cmp	r6, #9
   12ae0:	movw	r4, #36268	; 0x8dac
   12ae4:	movt	r4, #1
   12ae8:	movne	r4, r3
   12aec:	b	129c8 <__assert_fail@plt+0x1ac8>
   12af0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12af4:	strd	r6, [sp, #8]
   12af8:	strd	r8, [sp, #16]
   12afc:	mov	r8, r3
   12b00:	strd	sl, [sp, #24]
   12b04:	mov	fp, r0
   12b08:	mov	sl, r1
   12b0c:	str	lr, [sp, #32]
   12b10:	sub	sp, sp, #140	; 0x8c
   12b14:	ldr	r3, [sp, #180]	; 0xb4
   12b18:	str	r2, [sp, #28]
   12b1c:	and	r4, r3, #2
   12b20:	ubfx	r3, r3, #1, #1
   12b24:	str	r3, [sp, #44]	; 0x2c
   12b28:	bl	10d80 <__ctype_get_mb_cur_max@plt>
   12b2c:	ldr	r3, [sp, #176]	; 0xb0
   12b30:	str	r0, [sp, #76]	; 0x4c
   12b34:	cmp	r3, #10
   12b38:	ldrls	pc, [pc, r3, lsl #2]
   12b3c:	b	144d8 <__assert_fail@plt+0x35d8>
   12b40:	andeq	r2, r1, r0, asr #31
   12b44:	ldrdeq	r3, [r1], -ip
   12b48:	andeq	r3, r1, r8, asr r6
   12b4c:	andeq	r3, r1, r8, asr #2
   12b50:	andeq	r2, r1, r8, asr #29
   12b54:	andeq	r2, r1, r4, asr #30
   12b58:	andeq	r3, r1, ip, lsl r0
   12b5c:	andeq	r3, r1, r4, lsl #1
   12b60:	andeq	r2, r1, ip, ror #22
   12b64:	andeq	r2, r1, ip, ror #22
   12b68:	andeq	r2, r1, ip, ror #22
   12b6c:	ldr	r3, [sp, #176]	; 0xb0
   12b70:	cmp	r3, #10
   12b74:	beq	12ba0 <__assert_fail@plt+0x1ca0>
   12b78:	mov	r1, r3
   12b7c:	movw	r0, #36292	; 0x8dc4
   12b80:	movt	r0, #1
   12b84:	bl	12998 <__assert_fail@plt+0x1a98>
   12b88:	str	r0, [sp, #188]	; 0xbc
   12b8c:	movw	r0, #36288	; 0x8dc0
   12b90:	movt	r0, #1
   12b94:	ldr	r1, [sp, #176]	; 0xb0
   12b98:	bl	12998 <__assert_fail@plt+0x1a98>
   12b9c:	str	r0, [sp, #192]	; 0xc0
   12ba0:	cmp	r4, #0
   12ba4:	movne	r4, #0
   12ba8:	beq	14264 <__assert_fail@plt+0x3364>
   12bac:	mov	r5, #0
   12bb0:	ldr	r0, [sp, #192]	; 0xc0
   12bb4:	mov	r9, r5
   12bb8:	str	r5, [sp, #64]	; 0x40
   12bbc:	bl	10e04 <strlen@plt>
   12bc0:	mov	r3, #1
   12bc4:	ldr	r2, [sp, #44]	; 0x2c
   12bc8:	cmp	r0, r5
   12bcc:	moveq	r2, r5
   12bd0:	str	r3, [sp, #32]
   12bd4:	str	r3, [sp, #48]	; 0x30
   12bd8:	str	r5, [sp, #52]	; 0x34
   12bdc:	str	r3, [sp, #60]	; 0x3c
   12be0:	ldr	r3, [sp, #180]	; 0xb4
   12be4:	str	r0, [sp, #56]	; 0x38
   12be8:	str	r5, [sp, #68]	; 0x44
   12bec:	str	r5, [sp, #80]	; 0x50
   12bf0:	str	r5, [sp, #84]	; 0x54
   12bf4:	and	r3, r3, #1
   12bf8:	str	r2, [sp, #88]	; 0x58
   12bfc:	str	r3, [sp, #92]	; 0x5c
   12c00:	ldr	r3, [sp, #180]	; 0xb4
   12c04:	and	r3, r3, #4
   12c08:	str	r3, [sp, #96]	; 0x60
   12c0c:	ldr	r3, [sp, #192]	; 0xc0
   12c10:	str	r3, [sp, #72]	; 0x48
   12c14:	mov	r3, fp
   12c18:	mov	r7, #0
   12c1c:	mov	fp, r9
   12c20:	mov	r9, r3
   12c24:	cmn	r8, #1
   12c28:	beq	1322c <__assert_fail@plt+0x232c>
   12c2c:	subs	r6, r8, r7
   12c30:	movne	r6, #1
   12c34:	cmp	r6, #0
   12c38:	beq	13244 <__assert_fail@plt+0x2344>
   12c3c:	ldr	r0, [sp, #28]
   12c40:	ldr	r3, [sp, #48]	; 0x30
   12c44:	cmp	r3, #0
   12c48:	add	r3, r0, r7
   12c4c:	str	r3, [sp, #36]	; 0x24
   12c50:	beq	136d0 <__assert_fail@plt+0x27d0>
   12c54:	ldr	r2, [sp, #56]	; 0x38
   12c58:	cmp	r2, #0
   12c5c:	beq	13bd0 <__assert_fail@plt+0x2cd0>
   12c60:	cmp	r2, #1
   12c64:	mov	r3, r2
   12c68:	movls	r3, #0
   12c6c:	movhi	r3, #1
   12c70:	cmn	r8, #1
   12c74:	add	r5, r7, r2
   12c78:	movne	r3, #0
   12c7c:	cmp	r3, #0
   12c80:	beq	12c8c <__assert_fail@plt+0x1d8c>
   12c84:	bl	10e04 <strlen@plt>
   12c88:	mov	r8, r0
   12c8c:	cmp	r5, r8
   12c90:	bhi	13bd0 <__assert_fail@plt+0x2cd0>
   12c94:	ldr	r0, [sp, #36]	; 0x24
   12c98:	ldr	r2, [sp, #56]	; 0x38
   12c9c:	ldr	r1, [sp, #72]	; 0x48
   12ca0:	bl	10d20 <memcmp@plt>
   12ca4:	cmp	r0, #0
   12ca8:	bne	13bd0 <__assert_fail@plt+0x2cd0>
   12cac:	ldr	r3, [sp, #44]	; 0x2c
   12cb0:	cmp	r3, #0
   12cb4:	bne	1437c <__assert_fail@plt+0x347c>
   12cb8:	ldr	r3, [sp, #36]	; 0x24
   12cbc:	ldrb	r5, [r3]
   12cc0:	cmp	r5, #126	; 0x7e
   12cc4:	ldrls	pc, [pc, r5, lsl #2]
   12cc8:	b	14164 <__assert_fail@plt+0x3264>
   12ccc:	andeq	r3, r1, r0, lsr #7
   12cd0:	andeq	r4, r1, r4, ror #2
   12cd4:	andeq	r4, r1, r4, ror #2
   12cd8:	andeq	r4, r1, r4, ror #2
   12cdc:	andeq	r4, r1, r4, ror #2
   12ce0:	andeq	r4, r1, r4, ror #2
   12ce4:	andeq	r4, r1, r4, ror #2
   12ce8:	strdeq	r3, [r1], -r8
   12cec:	strdeq	r3, [r1], -r0
   12cf0:	andeq	r3, r1, r0, lsl #6
   12cf4:	andeq	r3, r1, r4, lsl #9
   12cf8:	andeq	r3, r1, r4, ror r4
   12cfc:	muleq	r1, ip, r1
   12d00:	andeq	r3, r1, r0, asr r4
   12d04:	andeq	r4, r1, r4, ror #2
   12d08:	andeq	r4, r1, r4, ror #2
   12d0c:	andeq	r4, r1, r4, ror #2
   12d10:	andeq	r4, r1, r4, ror #2
   12d14:	andeq	r4, r1, r4, ror #2
   12d18:	andeq	r4, r1, r4, ror #2
   12d1c:	andeq	r4, r1, r4, ror #2
   12d20:	andeq	r4, r1, r4, ror #2
   12d24:	andeq	r4, r1, r4, ror #2
   12d28:	andeq	r4, r1, r4, ror #2
   12d2c:	andeq	r4, r1, r4, ror #2
   12d30:	andeq	r4, r1, r4, ror #2
   12d34:	andeq	r4, r1, r4, ror #2
   12d38:	andeq	r4, r1, r4, ror #2
   12d3c:	andeq	r4, r1, r4, ror #2
   12d40:	andeq	r4, r1, r4, ror #2
   12d44:	andeq	r4, r1, r4, ror #2
   12d48:	andeq	r4, r1, r4, ror #2
   12d4c:	strdeq	r3, [r1], -ip
   12d50:	strdeq	r3, [r1], -r0
   12d54:	strdeq	r3, [r1], -r0
   12d58:	andeq	r3, r1, r4, ror #9
   12d5c:	strdeq	r3, [r1], -r0
   12d60:	andeq	r3, r1, r8, asr #11
   12d64:	strdeq	r3, [r1], -r0
   12d68:	andeq	r3, r1, r8, lsr r6
   12d6c:	strdeq	r3, [r1], -r0
   12d70:	strdeq	r3, [r1], -r0
   12d74:	strdeq	r3, [r1], -r0
   12d78:	andeq	r3, r1, r8, asr #11
   12d7c:	andeq	r3, r1, r8, asr #11
   12d80:	andeq	r3, r1, r8, asr #11
   12d84:	andeq	r3, r1, r8, asr #11
   12d88:	andeq	r3, r1, r8, asr #11
   12d8c:	andeq	r3, r1, r8, asr #11
   12d90:	andeq	r3, r1, r8, asr #11
   12d94:	andeq	r3, r1, r8, asr #11
   12d98:	andeq	r3, r1, r8, asr #11
   12d9c:	andeq	r3, r1, r8, asr #11
   12da0:	andeq	r3, r1, r8, asr #11
   12da4:	andeq	r3, r1, r8, asr #11
   12da8:	andeq	r3, r1, r8, asr #11
   12dac:	andeq	r3, r1, r8, asr #11
   12db0:	andeq	r3, r1, r8, asr #11
   12db4:	andeq	r3, r1, r8, asr #11
   12db8:	strdeq	r3, [r1], -r0
   12dbc:	strdeq	r3, [r1], -r0
   12dc0:	strdeq	r3, [r1], -r0
   12dc4:	strdeq	r3, [r1], -r0
   12dc8:	andeq	r3, r1, r8, ror #11
   12dcc:	andeq	r4, r1, r4, ror #2
   12dd0:	andeq	r3, r1, r8, asr #11
   12dd4:	andeq	r3, r1, r8, asr #11
   12dd8:	andeq	r3, r1, r8, asr #11
   12ddc:	andeq	r3, r1, r8, asr #11
   12de0:	andeq	r3, r1, r8, asr #11
   12de4:	andeq	r3, r1, r8, asr #11
   12de8:	andeq	r3, r1, r8, asr #11
   12dec:	andeq	r3, r1, r8, asr #11
   12df0:	andeq	r3, r1, r8, asr #11
   12df4:	andeq	r3, r1, r8, asr #11
   12df8:	andeq	r3, r1, r8, asr #11
   12dfc:	andeq	r3, r1, r8, asr #11
   12e00:	andeq	r3, r1, r8, asr #11
   12e04:	andeq	r3, r1, r8, asr #11
   12e08:	andeq	r3, r1, r8, asr #11
   12e0c:	andeq	r3, r1, r8, asr #11
   12e10:	andeq	r3, r1, r8, asr #11
   12e14:	andeq	r3, r1, r8, asr #11
   12e18:	andeq	r3, r1, r8, asr #11
   12e1c:	andeq	r3, r1, r8, asr #11
   12e20:	andeq	r3, r1, r8, asr #11
   12e24:	andeq	r3, r1, r8, asr #11
   12e28:	andeq	r3, r1, r8, asr #11
   12e2c:	andeq	r3, r1, r8, asr #11
   12e30:	andeq	r3, r1, r8, asr #11
   12e34:	andeq	r3, r1, r8, asr #11
   12e38:	strdeq	r3, [r1], -r0
   12e3c:	andeq	r3, r1, ip, lsl #11
   12e40:	andeq	r3, r1, r8, asr #11
   12e44:	strdeq	r3, [r1], -r0
   12e48:	andeq	r3, r1, r8, asr #11
   12e4c:	strdeq	r3, [r1], -r0
   12e50:	andeq	r3, r1, r8, asr #11
   12e54:	andeq	r3, r1, r8, asr #11
   12e58:	andeq	r3, r1, r8, asr #11
   12e5c:	andeq	r3, r1, r8, asr #11
   12e60:	andeq	r3, r1, r8, asr #11
   12e64:	andeq	r3, r1, r8, asr #11
   12e68:	andeq	r3, r1, r8, asr #11
   12e6c:	andeq	r3, r1, r8, asr #11
   12e70:	andeq	r3, r1, r8, asr #11
   12e74:	andeq	r3, r1, r8, asr #11
   12e78:	andeq	r3, r1, r8, asr #11
   12e7c:	andeq	r3, r1, r8, asr #11
   12e80:	andeq	r3, r1, r8, asr #11
   12e84:	andeq	r3, r1, r8, asr #11
   12e88:	andeq	r3, r1, r8, asr #11
   12e8c:	andeq	r3, r1, r8, asr #11
   12e90:	andeq	r3, r1, r8, asr #11
   12e94:	andeq	r3, r1, r8, asr #11
   12e98:	andeq	r3, r1, r8, asr #11
   12e9c:	andeq	r3, r1, r8, asr #11
   12ea0:	andeq	r3, r1, r8, asr #11
   12ea4:	andeq	r3, r1, r8, asr #11
   12ea8:	andeq	r3, r1, r8, asr #11
   12eac:	andeq	r3, r1, r8, asr #11
   12eb0:	andeq	r3, r1, r8, asr #11
   12eb4:	andeq	r3, r1, r8, asr #11
   12eb8:	muleq	r1, r8, r4
   12ebc:	strdeq	r3, [r1], -r0
   12ec0:	muleq	r1, r8, r4
   12ec4:	andeq	r3, r1, r4, ror #9
   12ec8:	ldr	r3, [sp, #180]	; 0xb4
   12ecc:	cmp	r4, #0
   12ed0:	and	r3, r3, #1
   12ed4:	str	r3, [sp, #92]	; 0x5c
   12ed8:	ldr	r3, [sp, #180]	; 0xb4
   12edc:	and	r3, r3, #4
   12ee0:	str	r3, [sp, #96]	; 0x60
   12ee4:	moveq	r3, #1
   12ee8:	streq	r3, [sp, #60]	; 0x3c
   12eec:	beq	1367c <__assert_fail@plt+0x277c>
   12ef0:	mov	r3, #0
   12ef4:	mov	r2, #1
   12ef8:	mov	r4, r3
   12efc:	mov	r9, r3
   12f00:	str	r2, [sp, #32]
   12f04:	str	r2, [sp, #44]	; 0x2c
   12f08:	str	r3, [sp, #48]	; 0x30
   12f0c:	str	r2, [sp, #52]	; 0x34
   12f10:	str	r2, [sp, #56]	; 0x38
   12f14:	str	r3, [sp, #60]	; 0x3c
   12f18:	str	r2, [sp, #64]	; 0x40
   12f1c:	str	r2, [sp, #68]	; 0x44
   12f20:	str	r3, [sp, #80]	; 0x50
   12f24:	str	r3, [sp, #84]	; 0x54
   12f28:	str	r3, [sp, #88]	; 0x58
   12f2c:	movw	r3, #36288	; 0x8dc0
   12f30:	movt	r3, #1
   12f34:	str	r3, [sp, #72]	; 0x48
   12f38:	mov	r3, #2
   12f3c:	str	r3, [sp, #176]	; 0xb0
   12f40:	b	12c14 <__assert_fail@plt+0x1d14>
   12f44:	ldr	r3, [sp, #180]	; 0xb4
   12f48:	cmp	r4, #0
   12f4c:	and	r3, r3, #1
   12f50:	str	r3, [sp, #92]	; 0x5c
   12f54:	ldr	r3, [sp, #180]	; 0xb4
   12f58:	and	r3, r3, #4
   12f5c:	str	r3, [sp, #96]	; 0x60
   12f60:	bne	14334 <__assert_fail@plt+0x3434>
   12f64:	cmp	sl, #0
   12f68:	beq	140e0 <__assert_fail@plt+0x31e0>
   12f6c:	mov	r3, #34	; 0x22
   12f70:	mov	r2, r4
   12f74:	mov	r1, #1
   12f78:	mov	r9, r2
   12f7c:	strb	r3, [fp]
   12f80:	movw	r3, #36268	; 0x8dac
   12f84:	movt	r3, #1
   12f88:	mov	r4, r1
   12f8c:	str	r1, [sp, #32]
   12f90:	str	r2, [sp, #44]	; 0x2c
   12f94:	str	r1, [sp, #48]	; 0x30
   12f98:	str	r2, [sp, #52]	; 0x34
   12f9c:	str	r1, [sp, #56]	; 0x38
   12fa0:	str	r1, [sp, #60]	; 0x3c
   12fa4:	str	r2, [sp, #64]	; 0x40
   12fa8:	str	r2, [sp, #68]	; 0x44
   12fac:	str	r3, [sp, #72]	; 0x48
   12fb0:	str	r2, [sp, #80]	; 0x50
   12fb4:	str	r2, [sp, #84]	; 0x54
   12fb8:	str	r2, [sp, #88]	; 0x58
   12fbc:	b	12c14 <__assert_fail@plt+0x1d14>
   12fc0:	mov	r3, #0
   12fc4:	mov	r2, #1
   12fc8:	mov	r9, r3
   12fcc:	str	r2, [sp, #32]
   12fd0:	str	r3, [sp, #44]	; 0x2c
   12fd4:	str	r3, [sp, #48]	; 0x30
   12fd8:	str	r3, [sp, #52]	; 0x34
   12fdc:	str	r3, [sp, #60]	; 0x3c
   12fe0:	strd	r2, [sp, #64]	; 0x40
   12fe4:	str	r3, [sp, #72]	; 0x48
   12fe8:	str	r3, [sp, #80]	; 0x50
   12fec:	str	r3, [sp, #88]	; 0x58
   12ff0:	ldr	r3, [sp, #180]	; 0xb4
   12ff4:	and	r3, r3, r2
   12ff8:	str	r3, [sp, #92]	; 0x5c
   12ffc:	ldr	r3, [sp, #180]	; 0xb4
   13000:	and	r3, r3, #4
   13004:	str	r3, [sp, #96]	; 0x60
   13008:	ldr	r3, [sp, #176]	; 0xb0
   1300c:	mov	r4, r3
   13010:	str	r3, [sp, #56]	; 0x38
   13014:	str	r3, [sp, #84]	; 0x54
   13018:	b	12c14 <__assert_fail@plt+0x1d14>
   1301c:	mov	r3, #1
   13020:	mov	r4, #0
   13024:	mov	r9, r4
   13028:	str	r3, [sp, #32]
   1302c:	str	r3, [sp, #44]	; 0x2c
   13030:	str	r3, [sp, #48]	; 0x30
   13034:	str	r4, [sp, #52]	; 0x34
   13038:	str	r3, [sp, #56]	; 0x38
   1303c:	str	r3, [sp, #60]	; 0x3c
   13040:	str	r3, [sp, #88]	; 0x58
   13044:	movw	r3, #36268	; 0x8dac
   13048:	movt	r3, #1
   1304c:	str	r4, [sp, #64]	; 0x40
   13050:	str	r4, [sp, #68]	; 0x44
   13054:	str	r3, [sp, #72]	; 0x48
   13058:	ldr	r3, [sp, #180]	; 0xb4
   1305c:	str	r4, [sp, #80]	; 0x50
   13060:	str	r4, [sp, #84]	; 0x54
   13064:	and	r3, r3, #1
   13068:	str	r3, [sp, #92]	; 0x5c
   1306c:	ldr	r3, [sp, #180]	; 0xb4
   13070:	and	r3, r3, #4
   13074:	str	r3, [sp, #96]	; 0x60
   13078:	mov	r3, #5
   1307c:	str	r3, [sp, #176]	; 0xb0
   13080:	b	12c14 <__assert_fail@plt+0x1d14>
   13084:	mov	r3, #1
   13088:	mov	r4, #0
   1308c:	mov	r9, r4
   13090:	str	r3, [sp, #32]
   13094:	str	r4, [sp, #44]	; 0x2c
   13098:	str	r3, [sp, #48]	; 0x30
   1309c:	str	r3, [sp, #60]	; 0x3c
   130a0:	ldr	r3, [sp, #180]	; 0xb4
   130a4:	str	r4, [sp, #52]	; 0x34
   130a8:	str	r4, [sp, #56]	; 0x38
   130ac:	str	r4, [sp, #64]	; 0x40
   130b0:	str	r4, [sp, #68]	; 0x44
   130b4:	and	r3, r3, #1
   130b8:	str	r4, [sp, #72]	; 0x48
   130bc:	str	r4, [sp, #80]	; 0x50
   130c0:	str	r4, [sp, #84]	; 0x54
   130c4:	str	r3, [sp, #92]	; 0x5c
   130c8:	ldr	r3, [sp, #180]	; 0xb4
   130cc:	str	r4, [sp, #88]	; 0x58
   130d0:	and	r3, r3, #4
   130d4:	str	r3, [sp, #96]	; 0x60
   130d8:	b	12c14 <__assert_fail@plt+0x1d14>
   130dc:	mov	r3, #0
   130e0:	mov	r2, #1
   130e4:	ldr	r1, [sp, #176]	; 0xb0
   130e8:	mov	r4, r3
   130ec:	mov	r9, r3
   130f0:	movw	r3, #36288	; 0x8dc0
   130f4:	movt	r3, #1
   130f8:	str	r2, [sp, #32]
   130fc:	str	r2, [sp, #44]	; 0x2c
   13100:	str	r4, [sp, #48]	; 0x30
   13104:	strd	r2, [sp, #68]	; 0x44
   13108:	ldr	r3, [sp, #180]	; 0xb4
   1310c:	str	r2, [sp, #52]	; 0x34
   13110:	str	r1, [sp, #56]	; 0x38
   13114:	str	r4, [sp, #60]	; 0x3c
   13118:	str	r2, [sp, #64]	; 0x40
   1311c:	and	r3, r3, r2
   13120:	str	r4, [sp, #80]	; 0x50
   13124:	str	r4, [sp, #84]	; 0x54
   13128:	str	r4, [sp, #88]	; 0x58
   1312c:	str	r3, [sp, #92]	; 0x5c
   13130:	ldr	r3, [sp, #180]	; 0xb4
   13134:	and	r3, r3, #4
   13138:	str	r3, [sp, #96]	; 0x60
   1313c:	mov	r3, #2
   13140:	str	r3, [sp, #176]	; 0xb0
   13144:	b	12c14 <__assert_fail@plt+0x1d14>
   13148:	mov	r3, #1
   1314c:	mov	r2, #0
   13150:	mov	r4, r2
   13154:	mov	r9, r2
   13158:	str	r3, [sp, #32]
   1315c:	str	r3, [sp, #44]	; 0x2c
   13160:	str	r2, [sp, #48]	; 0x30
   13164:	str	r3, [sp, #52]	; 0x34
   13168:	str	r3, [sp, #56]	; 0x38
   1316c:	str	r3, [sp, #60]	; 0x3c
   13170:	str	r3, [sp, #64]	; 0x40
   13174:	str	r3, [sp, #68]	; 0x44
   13178:	str	r3, [sp, #88]	; 0x58
   1317c:	movw	r3, #36288	; 0x8dc0
   13180:	movt	r3, #1
   13184:	str	r3, [sp, #72]	; 0x48
   13188:	ldr	r3, [sp, #180]	; 0xb4
   1318c:	str	r2, [sp, #80]	; 0x50
   13190:	str	r2, [sp, #84]	; 0x54
   13194:	and	r3, r3, #1
   13198:	b	1312c <__assert_fail@plt+0x222c>
   1319c:	mov	r5, #102	; 0x66
   131a0:	mov	r6, #0
   131a4:	ldr	r3, [sp, #44]	; 0x2c
   131a8:	cmp	r3, #0
   131ac:	bne	1405c <__assert_fail@plt+0x315c>
   131b0:	ldr	r2, [sp, #52]	; 0x34
   131b4:	eor	r3, fp, #1
   131b8:	ands	r3, r2, r3
   131bc:	beq	131f4 <__assert_fail@plt+0x22f4>
   131c0:	cmp	sl, r4
   131c4:	mov	fp, r3
   131c8:	movhi	r2, #39	; 0x27
   131cc:	strbhi	r2, [r9, r4]
   131d0:	add	r2, r4, #1
   131d4:	cmp	sl, r2
   131d8:	movhi	r1, #36	; 0x24
   131dc:	strbhi	r1, [r9, r2]
   131e0:	add	r2, r4, #2
   131e4:	add	r4, r4, #3
   131e8:	cmp	sl, r2
   131ec:	movhi	r1, #39	; 0x27
   131f0:	strbhi	r1, [r9, r2]
   131f4:	cmp	sl, r4
   131f8:	add	r7, r7, #1
   131fc:	movhi	r3, #92	; 0x5c
   13200:	strbhi	r3, [r9, r4]
   13204:	add	r4, r4, #1
   13208:	cmp	r4, sl
   1320c:	ldr	r3, [sp, #32]
   13210:	strbcc	r5, [r9, r4]
   13214:	cmp	r6, #0
   13218:	add	r4, r4, #1
   1321c:	moveq	r3, #0
   13220:	cmn	r8, #1
   13224:	str	r3, [sp, #32]
   13228:	bne	12c2c <__assert_fail@plt+0x1d2c>
   1322c:	ldr	r3, [sp, #28]
   13230:	ldrb	r6, [r3, r7]
   13234:	adds	r6, r6, #0
   13238:	movne	r6, #1
   1323c:	cmp	r6, #0
   13240:	bne	12c3c <__assert_fail@plt+0x1d3c>
   13244:	mov	r3, r9
   13248:	mov	r9, fp
   1324c:	mov	fp, r3
   13250:	ldr	r3, [sp, #68]	; 0x44
   13254:	cmp	r4, #0
   13258:	movne	r3, #0
   1325c:	cmp	r3, #0
   13260:	bne	14454 <__assert_fail@plt+0x3554>
   13264:	ldr	r3, [sp, #44]	; 0x2c
   13268:	ldr	r2, [sp, #52]	; 0x34
   1326c:	eor	r3, r3, #1
   13270:	ands	r2, r3, r2
   13274:	beq	1438c <__assert_fail@plt+0x348c>
   13278:	ldr	r3, [sp, #80]	; 0x50
   1327c:	cmp	r3, #0
   13280:	beq	14390 <__assert_fail@plt+0x3490>
   13284:	ldr	r3, [sp, #32]
   13288:	cmp	r3, #0
   1328c:	bne	14404 <__assert_fail@plt+0x3504>
   13290:	ldr	r3, [sp, #84]	; 0x54
   13294:	adds	r3, r3, #0
   13298:	movne	r3, #1
   1329c:	cmp	sl, #0
   132a0:	movne	r3, #0
   132a4:	cmp	r3, #0
   132a8:	ldreq	r2, [sp, #80]	; 0x50
   132ac:	beq	14390 <__assert_fail@plt+0x3490>
   132b0:	ldr	r2, [sp, #84]	; 0x54
   132b4:	mov	sl, r2
   132b8:	mov	r0, #0
   132bc:	mov	r4, #1
   132c0:	mov	r1, #39	; 0x27
   132c4:	str	r0, [sp, #44]	; 0x2c
   132c8:	strb	r1, [fp]
   132cc:	str	r0, [sp, #48]	; 0x30
   132d0:	str	r4, [sp, #52]	; 0x34
   132d4:	str	r4, [sp, #56]	; 0x38
   132d8:	str	r4, [sp, #64]	; 0x40
   132dc:	str	r0, [sp, #68]	; 0x44
   132e0:	str	r3, [sp, #80]	; 0x50
   132e4:	str	r2, [sp, #84]	; 0x54
   132e8:	str	r0, [sp, #88]	; 0x58
   132ec:	b	12f2c <__assert_fail@plt+0x202c>
   132f0:	mov	r5, #98	; 0x62
   132f4:	b	131a0 <__assert_fail@plt+0x22a0>
   132f8:	mov	r5, #97	; 0x61
   132fc:	b	131a0 <__assert_fail@plt+0x22a0>
   13300:	ldr	r3, [sp, #48]	; 0x30
   13304:	str	r3, [sp, #40]	; 0x28
   13308:	mov	r3, #116	; 0x74
   1330c:	ldr	r2, [sp, #68]	; 0x44
   13310:	cmp	r2, #0
   13314:	bne	13510 <__assert_fail@plt+0x2610>
   13318:	ldr	r2, [sp, #60]	; 0x3c
   1331c:	cmp	r2, #0
   13320:	bne	1346c <__assert_fail@plt+0x256c>
   13324:	ldr	r3, [sp, #44]	; 0x2c
   13328:	mov	r6, #0
   1332c:	cmp	r3, #0
   13330:	beq	134dc <__assert_fail@plt+0x25dc>
   13334:	mov	r3, fp
   13338:	ldr	r2, [sp, #184]	; 0xb8
   1333c:	cmp	r2, #0
   13340:	beq	13360 <__assert_fail@plt+0x2460>
   13344:	ubfx	r1, r5, #5, #8
   13348:	mov	r0, r2
   1334c:	and	r2, r5, #31
   13350:	ldr	r1, [r0, r1, lsl #2]
   13354:	lsr	r2, r1, r2
   13358:	tst	r2, #1
   1335c:	bne	131a4 <__assert_fail@plt+0x22a4>
   13360:	ldr	r2, [sp, #40]	; 0x28
   13364:	cmp	r2, #0
   13368:	addeq	r7, r7, #1
   1336c:	bne	131a4 <__assert_fail@plt+0x22a4>
   13370:	cmp	r3, #0
   13374:	beq	13208 <__assert_fail@plt+0x2308>
   13378:	cmp	sl, r4
   1337c:	mov	fp, #0
   13380:	movhi	r3, #39	; 0x27
   13384:	strbhi	r3, [r9, r4]
   13388:	add	r3, r4, #1
   1338c:	add	r4, r4, #2
   13390:	cmp	sl, r3
   13394:	movhi	r2, #39	; 0x27
   13398:	strbhi	r2, [r9, r3]
   1339c:	b	13208 <__assert_fail@plt+0x2308>
   133a0:	ldr	r3, [sp, #48]	; 0x30
   133a4:	str	r3, [sp, #40]	; 0x28
   133a8:	eor	r3, fp, #1
   133ac:	ldr	r2, [sp, #52]	; 0x34
   133b0:	ands	r2, r2, r3
   133b4:	beq	14074 <__assert_fail@plt+0x3174>
   133b8:	cmp	sl, r4
   133bc:	movhi	r3, #39	; 0x27
   133c0:	strbhi	r3, [r9, r4]
   133c4:	add	r3, r4, #1
   133c8:	cmp	sl, r3
   133cc:	movhi	r1, #36	; 0x24
   133d0:	strbhi	r1, [r9, r3]
   133d4:	add	r3, r4, #2
   133d8:	cmp	sl, r3
   133dc:	movhi	r1, #39	; 0x27
   133e0:	strbhi	r1, [r9, r3]
   133e4:	add	r3, r4, #3
   133e8:	cmp	sl, r3
   133ec:	bls	140c0 <__assert_fail@plt+0x31c0>
   133f0:	mov	r4, r3
   133f4:	mov	r3, #92	; 0x5c
   133f8:	mov	fp, r2
   133fc:	mov	r2, r4
   13400:	strb	r3, [r9, r4]
   13404:	ldr	r3, [sp, #176]	; 0xb0
   13408:	add	r4, r4, #1
   1340c:	cmp	r3, #2
   13410:	beq	14128 <__assert_fail@plt+0x3228>
   13414:	add	r3, r7, #1
   13418:	cmp	r3, r8
   1341c:	bcs	13434 <__assert_fail@plt+0x2534>
   13420:	ldr	r1, [sp, #28]
   13424:	ldrb	r3, [r1, r3]
   13428:	sub	r3, r3, #48	; 0x30
   1342c:	cmp	r3, #9
   13430:	bls	14138 <__assert_fail@plt+0x3238>
   13434:	mov	r3, #0
   13438:	mov	r5, #48	; 0x30
   1343c:	ldr	r6, [sp, #64]	; 0x40
   13440:	cmp	r6, #0
   13444:	beq	13338 <__assert_fail@plt+0x2438>
   13448:	mov	r6, #0
   1344c:	b	13360 <__assert_fail@plt+0x2460>
   13450:	ldr	r3, [sp, #48]	; 0x30
   13454:	str	r3, [sp, #40]	; 0x28
   13458:	ldr	r2, [sp, #60]	; 0x3c
   1345c:	mov	r5, #13
   13460:	mov	r3, #114	; 0x72
   13464:	cmp	r2, #0
   13468:	beq	13324 <__assert_fail@plt+0x2424>
   1346c:	mov	r5, r3
   13470:	b	131a0 <__assert_fail@plt+0x22a0>
   13474:	ldr	r3, [sp, #48]	; 0x30
   13478:	str	r3, [sp, #40]	; 0x28
   1347c:	mov	r3, #118	; 0x76
   13480:	b	13318 <__assert_fail@plt+0x2418>
   13484:	ldr	r3, [sp, #48]	; 0x30
   13488:	str	r3, [sp, #40]	; 0x28
   1348c:	mov	r5, #10
   13490:	mov	r3, #110	; 0x6e
   13494:	b	13318 <__assert_fail@plt+0x2418>
   13498:	ldr	r3, [sp, #48]	; 0x30
   1349c:	cmn	r8, #1
   134a0:	str	r3, [sp, #40]	; 0x28
   134a4:	beq	138ec <__assert_fail@plt+0x29ec>
   134a8:	subs	r3, r8, #1
   134ac:	movne	r3, #1
   134b0:	cmp	r3, #0
   134b4:	bne	134c0 <__assert_fail@plt+0x25c0>
   134b8:	cmp	r7, #0
   134bc:	beq	13504 <__assert_fail@plt+0x2604>
   134c0:	mov	r6, #0
   134c4:	ldr	r3, [sp, #64]	; 0x40
   134c8:	cmp	r3, #0
   134cc:	beq	13334 <__assert_fail@plt+0x2434>
   134d0:	ldr	r3, [sp, #44]	; 0x2c
   134d4:	cmp	r3, #0
   134d8:	bne	13334 <__assert_fail@plt+0x2434>
   134dc:	mov	r3, fp
   134e0:	b	13360 <__assert_fail@plt+0x2460>
   134e4:	ldr	r3, [sp, #48]	; 0x30
   134e8:	str	r3, [sp, #40]	; 0x28
   134ec:	b	134b8 <__assert_fail@plt+0x25b8>
   134f0:	ldr	r3, [sp, #48]	; 0x30
   134f4:	str	r3, [sp, #40]	; 0x28
   134f8:	b	134c0 <__assert_fail@plt+0x25c0>
   134fc:	ldr	r6, [sp, #48]	; 0x30
   13500:	str	r6, [sp, #40]	; 0x28
   13504:	ldr	r3, [sp, #68]	; 0x44
   13508:	cmp	r3, #0
   1350c:	beq	134c4 <__assert_fail@plt+0x25c4>
   13510:	mov	r3, #2
   13514:	mov	fp, r9
   13518:	str	r3, [sp, #176]	; 0xb0
   1351c:	ldr	r3, [sp, #60]	; 0x3c
   13520:	cmp	r3, #0
   13524:	ldr	r3, [sp, #176]	; 0xb0
   13528:	movne	r3, #4
   1352c:	str	r3, [sp, #176]	; 0xb0
   13530:	mov	lr, #0
   13534:	mov	r0, fp
   13538:	ldr	r2, [sp, #28]
   1353c:	ldr	r3, [sp, #180]	; 0xb4
   13540:	ldr	r1, [sp, #188]	; 0xbc
   13544:	bic	ip, r3, #2
   13548:	ldr	r3, [sp, #176]	; 0xb0
   1354c:	stm	sp, {r3, ip, lr}
   13550:	mov	r3, r8
   13554:	ldr	ip, [sp, #192]	; 0xc0
   13558:	str	r1, [sp, #12]
   1355c:	mov	r1, sl
   13560:	str	ip, [sp, #16]
   13564:	bl	12af0 <__assert_fail@plt+0x1bf0>
   13568:	mov	r4, r0
   1356c:	mov	r0, r4
   13570:	add	sp, sp, #140	; 0x8c
   13574:	ldrd	r4, [sp]
   13578:	ldrd	r6, [sp, #8]
   1357c:	ldrd	r8, [sp, #16]
   13580:	ldrd	sl, [sp, #24]
   13584:	add	sp, sp, #32
   13588:	pop	{pc}		; (ldr pc, [sp], #4)
   1358c:	ldr	r3, [sp, #48]	; 0x30
   13590:	str	r3, [sp, #40]	; 0x28
   13594:	ldr	r3, [sp, #176]	; 0xb0
   13598:	cmp	r3, #2
   1359c:	beq	13914 <__assert_fail@plt+0x2a14>
   135a0:	ldr	r3, [sp, #88]	; 0x58
   135a4:	cmp	r3, #0
   135a8:	moveq	r5, #92	; 0x5c
   135ac:	moveq	r3, r5
   135b0:	beq	13318 <__assert_fail@plt+0x2418>
   135b4:	add	r7, r7, #1
   135b8:	mov	r3, fp
   135bc:	mov	r6, #0
   135c0:	mov	r5, #92	; 0x5c
   135c4:	b	13370 <__assert_fail@plt+0x2470>
   135c8:	ldr	r3, [sp, #64]	; 0x40
   135cc:	cmp	r3, #0
   135d0:	bne	14448 <__assert_fail@plt+0x3548>
   135d4:	ldr	r2, [sp, #48]	; 0x30
   135d8:	mov	r3, fp
   135dc:	mov	r6, r2
   135e0:	str	r2, [sp, #40]	; 0x28
   135e4:	b	13338 <__assert_fail@plt+0x2438>
   135e8:	ldr	r3, [sp, #176]	; 0xb0
   135ec:	cmp	r3, #2
   135f0:	beq	14384 <__assert_fail@plt+0x3484>
   135f4:	cmp	r3, #5
   135f8:	ldr	r3, [sp, #48]	; 0x30
   135fc:	str	r3, [sp, #40]	; 0x28
   13600:	bne	1362c <__assert_fail@plt+0x272c>
   13604:	ldr	r3, [sp, #96]	; 0x60
   13608:	cmp	r3, #0
   1360c:	beq	14088 <__assert_fail@plt+0x3188>
   13610:	add	r3, r7, #2
   13614:	cmp	r3, r8
   13618:	bcs	1362c <__assert_fail@plt+0x272c>
   1361c:	ldr	r2, [sp, #36]	; 0x24
   13620:	ldrb	r5, [r2, #1]
   13624:	cmp	r5, #63	; 0x3f
   13628:	beq	14170 <__assert_fail@plt+0x3270>
   1362c:	mov	r6, #0
   13630:	mov	r5, #63	; 0x3f
   13634:	b	134c4 <__assert_fail@plt+0x25c4>
   13638:	ldr	r3, [sp, #176]	; 0xb0
   1363c:	cmp	r3, #2
   13640:	ldr	r3, [sp, #48]	; 0x30
   13644:	beq	13e2c <__assert_fail@plt+0x2f2c>
   13648:	mov	r5, #39	; 0x27
   1364c:	str	r3, [sp, #40]	; 0x28
   13650:	str	r6, [sp, #80]	; 0x50
   13654:	b	134c4 <__assert_fail@plt+0x25c4>
   13658:	ldr	r3, [sp, #180]	; 0xb4
   1365c:	cmp	r4, #0
   13660:	and	r3, r3, #1
   13664:	str	r3, [sp, #92]	; 0x5c
   13668:	ldr	r3, [sp, #180]	; 0xb4
   1366c:	and	r3, r3, #4
   13670:	str	r3, [sp, #96]	; 0x60
   13674:	bne	14494 <__assert_fail@plt+0x3594>
   13678:	str	r4, [sp, #60]	; 0x3c
   1367c:	cmp	sl, #0
   13680:	bne	14478 <__assert_fail@plt+0x3578>
   13684:	mov	r3, #1
   13688:	movw	r2, #36288	; 0x8dc0
   1368c:	movt	r2, #1
   13690:	mov	r4, r3
   13694:	mov	r3, #2
   13698:	mov	r9, sl
   1369c:	str	r4, [sp, #32]
   136a0:	str	sl, [sp, #44]	; 0x2c
   136a4:	str	sl, [sp, #48]	; 0x30
   136a8:	str	r4, [sp, #52]	; 0x34
   136ac:	str	r4, [sp, #56]	; 0x38
   136b0:	str	r4, [sp, #64]	; 0x40
   136b4:	str	sl, [sp, #68]	; 0x44
   136b8:	str	r2, [sp, #72]	; 0x48
   136bc:	str	sl, [sp, #80]	; 0x50
   136c0:	str	sl, [sp, #84]	; 0x54
   136c4:	str	sl, [sp, #88]	; 0x58
   136c8:	str	r3, [sp, #176]	; 0xb0
   136cc:	b	12c14 <__assert_fail@plt+0x1d14>
   136d0:	ldrb	r5, [r0, r7]
   136d4:	cmp	r5, #126	; 0x7e
   136d8:	ldrls	pc, [pc, r5, lsl #2]
   136dc:	b	13a40 <__assert_fail@plt+0x2b40>
   136e0:	andeq	r3, r1, ip, lsl #20
   136e4:	andeq	r3, r1, r0, asr #20
   136e8:	andeq	r3, r1, r0, asr #20
   136ec:	andeq	r3, r1, r0, asr #20
   136f0:	andeq	r3, r1, r0, asr #20
   136f4:	andeq	r3, r1, r0, asr #20
   136f8:	andeq	r3, r1, r0, asr #20
   136fc:	strdeq	r3, [r1], -ip
   13700:	andeq	r3, r1, ip, ror #19
   13704:	andeq	r3, r1, r0, ror r9
   13708:	ldrdeq	r3, [r1], -ip
   1370c:	andeq	r3, r1, r0, asr r9
   13710:	andeq	r3, r1, r0, lsr sl
   13714:			; <UNDEFINED> instruction: 0x000139bc
   13718:	andeq	r3, r1, r0, asr #20
   1371c:	andeq	r3, r1, r0, asr #20
   13720:	andeq	r3, r1, r0, asr #20
   13724:	andeq	r3, r1, r0, asr #20
   13728:	andeq	r3, r1, r0, asr #20
   1372c:	andeq	r3, r1, r0, asr #20
   13730:	andeq	r3, r1, r0, asr #20
   13734:	andeq	r3, r1, r0, asr #20
   13738:	andeq	r3, r1, r0, asr #20
   1373c:	andeq	r3, r1, r0, asr #20
   13740:	andeq	r3, r1, r0, asr #20
   13744:	andeq	r3, r1, r0, asr #20
   13748:	andeq	r3, r1, r0, asr #20
   1374c:	andeq	r3, r1, r0, asr #20
   13750:	andeq	r3, r1, r0, asr #20
   13754:	andeq	r3, r1, r0, asr #20
   13758:	andeq	r3, r1, r0, asr #20
   1375c:	andeq	r3, r1, r0, asr #20
   13760:	andeq	r3, r1, r4, ror #18
   13764:	andeq	r3, r1, ip, asr #19
   13768:	andeq	r3, r1, ip, asr #19
   1376c:	andeq	r3, r1, r4, asr #18
   13770:	andeq	r3, r1, ip, asr #19
   13774:	andeq	r3, r1, r8, lsr r9
   13778:	andeq	r3, r1, ip, asr #19
   1377c:	andeq	r3, r1, r8, lsr #19
   13780:	andeq	r3, r1, ip, asr #19
   13784:	andeq	r3, r1, ip, asr #19
   13788:	andeq	r3, r1, ip, asr #19
   1378c:	andeq	r3, r1, r8, lsr r9
   13790:	andeq	r3, r1, r8, lsr r9
   13794:	andeq	r3, r1, r8, lsr r9
   13798:	andeq	r3, r1, r8, lsr r9
   1379c:	andeq	r3, r1, r8, lsr r9
   137a0:	andeq	r3, r1, r8, lsr r9
   137a4:	andeq	r3, r1, r8, lsr r9
   137a8:	andeq	r3, r1, r8, lsr r9
   137ac:	andeq	r3, r1, r8, lsr r9
   137b0:	andeq	r3, r1, r8, lsr r9
   137b4:	andeq	r3, r1, r8, lsr r9
   137b8:	andeq	r3, r1, r8, lsr r9
   137bc:	andeq	r3, r1, r8, lsr r9
   137c0:	andeq	r3, r1, r8, lsr r9
   137c4:	andeq	r3, r1, r8, lsr r9
   137c8:	andeq	r3, r1, r8, lsr r9
   137cc:	andeq	r3, r1, ip, asr #19
   137d0:	andeq	r3, r1, ip, asr #19
   137d4:	andeq	r3, r1, ip, asr #19
   137d8:	andeq	r3, r1, ip, asr #19
   137dc:	andeq	r3, r1, r0, lsl #19
   137e0:	andeq	r3, r1, r0, asr #20
   137e4:	andeq	r3, r1, r8, lsr r9
   137e8:	andeq	r3, r1, r8, lsr r9
   137ec:	andeq	r3, r1, r8, lsr r9
   137f0:	andeq	r3, r1, r8, lsr r9
   137f4:	andeq	r3, r1, r8, lsr r9
   137f8:	andeq	r3, r1, r8, lsr r9
   137fc:	andeq	r3, r1, r8, lsr r9
   13800:	andeq	r3, r1, r8, lsr r9
   13804:	andeq	r3, r1, r8, lsr r9
   13808:	andeq	r3, r1, r8, lsr r9
   1380c:	andeq	r3, r1, r8, lsr r9
   13810:	andeq	r3, r1, r8, lsr r9
   13814:	andeq	r3, r1, r8, lsr r9
   13818:	andeq	r3, r1, r8, lsr r9
   1381c:	andeq	r3, r1, r8, lsr r9
   13820:	andeq	r3, r1, r8, lsr r9
   13824:	andeq	r3, r1, r8, lsr r9
   13828:	andeq	r3, r1, r8, lsr r9
   1382c:	andeq	r3, r1, r8, lsr r9
   13830:	andeq	r3, r1, r8, lsr r9
   13834:	andeq	r3, r1, r8, lsr r9
   13838:	andeq	r3, r1, r8, lsr r9
   1383c:	andeq	r3, r1, r8, lsr r9
   13840:	andeq	r3, r1, r8, lsr r9
   13844:	andeq	r3, r1, r8, lsr r9
   13848:	andeq	r3, r1, r8, lsr r9
   1384c:	andeq	r3, r1, ip, asr #19
   13850:	andeq	r3, r1, r0, lsl #18
   13854:	andeq	r3, r1, r8, lsr r9
   13858:	andeq	r3, r1, ip, asr #19
   1385c:	andeq	r3, r1, r8, lsr r9
   13860:	andeq	r3, r1, ip, asr #19
   13864:	andeq	r3, r1, r8, lsr r9
   13868:	andeq	r3, r1, r8, lsr r9
   1386c:	andeq	r3, r1, r8, lsr r9
   13870:	andeq	r3, r1, r8, lsr r9
   13874:	andeq	r3, r1, r8, lsr r9
   13878:	andeq	r3, r1, r8, lsr r9
   1387c:	andeq	r3, r1, r8, lsr r9
   13880:	andeq	r3, r1, r8, lsr r9
   13884:	andeq	r3, r1, r8, lsr r9
   13888:	andeq	r3, r1, r8, lsr r9
   1388c:	andeq	r3, r1, r8, lsr r9
   13890:	andeq	r3, r1, r8, lsr r9
   13894:	andeq	r3, r1, r8, lsr r9
   13898:	andeq	r3, r1, r8, lsr r9
   1389c:	andeq	r3, r1, r8, lsr r9
   138a0:	andeq	r3, r1, r8, lsr r9
   138a4:	andeq	r3, r1, r8, lsr r9
   138a8:	andeq	r3, r1, r8, lsr r9
   138ac:	andeq	r3, r1, r8, lsr r9
   138b0:	andeq	r3, r1, r8, lsr r9
   138b4:	andeq	r3, r1, r8, lsr r9
   138b8:	andeq	r3, r1, r8, lsr r9
   138bc:	andeq	r3, r1, r8, lsr r9
   138c0:	andeq	r3, r1, r8, lsr r9
   138c4:	andeq	r3, r1, r8, lsr r9
   138c8:	andeq	r3, r1, r8, lsr r9
   138cc:	ldrdeq	r3, [r1], -ip
   138d0:	andeq	r3, r1, ip, asr #19
   138d4:	ldrdeq	r3, [r1], -ip
   138d8:	andeq	r3, r1, r4, asr #18
   138dc:	mov	r3, #0
   138e0:	cmn	r8, #1
   138e4:	str	r3, [sp, #40]	; 0x28
   138e8:	bne	134a8 <__assert_fail@plt+0x25a8>
   138ec:	ldr	r3, [sp, #28]
   138f0:	ldrb	r3, [r3, #1]
   138f4:	adds	r3, r3, #0
   138f8:	movne	r3, #1
   138fc:	b	134b0 <__assert_fail@plt+0x25b0>
   13900:	mov	r3, #0
   13904:	str	r3, [sp, #40]	; 0x28
   13908:	ldr	r3, [sp, #176]	; 0xb0
   1390c:	cmp	r3, #2
   13910:	bne	135a0 <__assert_fail@plt+0x26a0>
   13914:	ldr	r3, [sp, #44]	; 0x2c
   13918:	cmp	r3, #0
   1391c:	bne	1425c <__assert_fail@plt+0x335c>
   13920:	mov	r6, r3
   13924:	add	r7, r7, #1
   13928:	mov	r3, fp
   1392c:	mov	r5, #92	; 0x5c
   13930:	b	13370 <__assert_fail@plt+0x2470>
   13934:	ldr	r6, [sp, #48]	; 0x30
   13938:	mov	r3, #0
   1393c:	str	r3, [sp, #40]	; 0x28
   13940:	b	134c4 <__assert_fail@plt+0x25c4>
   13944:	mov	r3, #0
   13948:	str	r3, [sp, #40]	; 0x28
   1394c:	b	134b8 <__assert_fail@plt+0x25b8>
   13950:	mov	r3, #0
   13954:	str	r3, [sp, #40]	; 0x28
   13958:	mov	r3, #118	; 0x76
   1395c:	b	13318 <__assert_fail@plt+0x2418>
   13960:	ldr	r6, [sp, #48]	; 0x30
   13964:	mov	r3, #0
   13968:	str	r3, [sp, #40]	; 0x28
   1396c:	b	13504 <__assert_fail@plt+0x2604>
   13970:	mov	r3, #0
   13974:	str	r3, [sp, #40]	; 0x28
   13978:	mov	r3, #116	; 0x74
   1397c:	b	1330c <__assert_fail@plt+0x240c>
   13980:	ldr	r3, [sp, #176]	; 0xb0
   13984:	cmp	r3, #2
   13988:	beq	13e98 <__assert_fail@plt+0x2f98>
   1398c:	cmp	r3, #5
   13990:	mov	r3, #0
   13994:	str	r3, [sp, #40]	; 0x28
   13998:	beq	13604 <__assert_fail@plt+0x2704>
   1399c:	mov	r6, #0
   139a0:	mov	r5, #63	; 0x3f
   139a4:	b	134c4 <__assert_fail@plt+0x25c4>
   139a8:	ldr	r3, [sp, #176]	; 0xb0
   139ac:	cmp	r3, #2
   139b0:	beq	13e20 <__assert_fail@plt+0x2f20>
   139b4:	mov	r3, #0
   139b8:	b	13648 <__assert_fail@plt+0x2748>
   139bc:	mov	r3, #0
   139c0:	str	r3, [sp, #40]	; 0x28
   139c4:	mov	r3, #114	; 0x72
   139c8:	b	1330c <__assert_fail@plt+0x240c>
   139cc:	mov	r3, #0
   139d0:	mov	r6, r3
   139d4:	str	r3, [sp, #40]	; 0x28
   139d8:	b	13504 <__assert_fail@plt+0x2604>
   139dc:	mov	r3, #0
   139e0:	str	r3, [sp, #40]	; 0x28
   139e4:	mov	r3, #110	; 0x6e
   139e8:	b	1330c <__assert_fail@plt+0x240c>
   139ec:	mov	r3, #0
   139f0:	str	r3, [sp, #40]	; 0x28
   139f4:	mov	r3, #98	; 0x62
   139f8:	b	13318 <__assert_fail@plt+0x2418>
   139fc:	mov	r3, #0
   13a00:	str	r3, [sp, #40]	; 0x28
   13a04:	mov	r3, #97	; 0x61
   13a08:	b	13318 <__assert_fail@plt+0x2418>
   13a0c:	ldr	r3, [sp, #60]	; 0x3c
   13a10:	cmp	r3, #0
   13a14:	bne	13e04 <__assert_fail@plt+0x2f04>
   13a18:	ldr	r3, [sp, #92]	; 0x5c
   13a1c:	cmp	r3, #0
   13a20:	addne	r7, r7, #1
   13a24:	bne	12c24 <__assert_fail@plt+0x1d24>
   13a28:	str	r3, [sp, #40]	; 0x28
   13a2c:	b	13324 <__assert_fail@plt+0x2424>
   13a30:	mov	r3, #0
   13a34:	str	r3, [sp, #40]	; 0x28
   13a38:	mov	r3, #102	; 0x66
   13a3c:	b	13318 <__assert_fail@plt+0x2418>
   13a40:	mov	r3, #0
   13a44:	str	r3, [sp, #40]	; 0x28
   13a48:	ldr	r3, [sp, #76]	; 0x4c
   13a4c:	cmp	r3, #1
   13a50:	bne	13eb8 <__assert_fail@plt+0x2fb8>
   13a54:	bl	10dec <__ctype_b_loc@plt>
   13a58:	ldr	r2, [r0]
   13a5c:	sxth	r3, r5
   13a60:	lsl	r3, r3, #1
   13a64:	ldr	r1, [sp, #76]	; 0x4c
   13a68:	ldrh	r3, [r2, r3]
   13a6c:	mov	r0, r1
   13a70:	and	r3, r3, #16384	; 0x4000
   13a74:	cmp	r3, #0
   13a78:	ldr	r3, [sp, #60]	; 0x3c
   13a7c:	movne	r6, #1
   13a80:	moveq	r6, #0
   13a84:	movne	r2, #0
   13a88:	andeq	r2, r3, #1
   13a8c:	cmp	r2, #0
   13a90:	beq	134c4 <__assert_fail@plt+0x25c4>
   13a94:	ldr	r2, [sp, #60]	; 0x3c
   13a98:	mov	r6, #0
   13a9c:	add	r1, r0, r7
   13aa0:	mov	ip, #39	; 0x27
   13aa4:	str	r6, [sp, #100]	; 0x64
   13aa8:	mov	r0, #0
   13aac:	ldr	lr, [sp, #36]	; 0x24
   13ab0:	str	r8, [sp, #36]	; 0x24
   13ab4:	ldr	r6, [sp, #40]	; 0x28
   13ab8:	ldr	r8, [sp, #44]	; 0x2c
   13abc:	b	13b6c <__assert_fail@plt+0x2c6c>
   13ac0:	cmp	r8, #0
   13ac4:	bne	140a0 <__assert_fail@plt+0x31a0>
   13ac8:	ldr	r0, [sp, #52]	; 0x34
   13acc:	eor	r3, fp, #1
   13ad0:	ands	r3, r0, r3
   13ad4:	beq	13b04 <__assert_fail@plt+0x2c04>
   13ad8:	cmp	sl, r4
   13adc:	add	r0, r4, #1
   13ae0:	strbhi	ip, [r9, r4]
   13ae4:	cmp	sl, r0
   13ae8:	movhi	fp, #36	; 0x24
   13aec:	strbhi	fp, [r9, r0]
   13af0:	add	r0, r4, #2
   13af4:	mov	fp, r3
   13af8:	cmp	sl, r0
   13afc:	add	r4, r4, #3
   13b00:	strbhi	ip, [r9, r0]
   13b04:	cmp	sl, r4
   13b08:	movhi	r3, #92	; 0x5c
   13b0c:	strbhi	r3, [r9, r4]
   13b10:	add	r3, r4, #1
   13b14:	cmp	sl, r3
   13b18:	bls	13b28 <__assert_fail@plt+0x2c28>
   13b1c:	lsr	r0, r5, #6
   13b20:	add	r0, r0, #48	; 0x30
   13b24:	strb	r0, [r9, r3]
   13b28:	add	r3, r4, #2
   13b2c:	cmp	sl, r3
   13b30:	bls	13b40 <__assert_fail@plt+0x2c40>
   13b34:	ubfx	r0, r5, #3, #3
   13b38:	add	r0, r0, #48	; 0x30
   13b3c:	strb	r0, [r9, r3]
   13b40:	add	r7, r7, #1
   13b44:	and	r5, r5, #7
   13b48:	cmp	r1, r7
   13b4c:	add	r5, r5, #48	; 0x30
   13b50:	add	r4, r4, #3
   13b54:	bls	140b4 <__assert_fail@plt+0x31b4>
   13b58:	mov	r0, r2
   13b5c:	cmp	sl, r4
   13b60:	strbhi	r5, [r9, r4]
   13b64:	add	r4, r4, #1
   13b68:	ldrb	r5, [lr, #1]!
   13b6c:	cmp	r2, #0
   13b70:	bne	13ac0 <__assert_fail@plt+0x2bc0>
   13b74:	eor	r3, r0, #1
   13b78:	cmp	r6, #0
   13b7c:	and	r3, r3, fp
   13b80:	uxtb	r3, r3
   13b84:	beq	13b98 <__assert_fail@plt+0x2c98>
   13b88:	cmp	sl, r4
   13b8c:	movhi	r6, #92	; 0x5c
   13b90:	strbhi	r6, [r9, r4]
   13b94:	add	r4, r4, #1
   13b98:	add	r7, r7, #1
   13b9c:	cmp	r7, r1
   13ba0:	bcs	14094 <__assert_fail@plt+0x3194>
   13ba4:	cmp	r3, #0
   13ba8:	beq	140d8 <__assert_fail@plt+0x31d8>
   13bac:	cmp	sl, r4
   13bb0:	add	r3, r4, #1
   13bb4:	mov	r6, #0
   13bb8:	strbhi	ip, [r9, r4]
   13bbc:	cmp	sl, r3
   13bc0:	add	r4, r4, #2
   13bc4:	mov	fp, r6
   13bc8:	strbhi	ip, [r9, r3]
   13bcc:	b	13b5c <__assert_fail@plt+0x2c5c>
   13bd0:	ldr	r3, [sp, #36]	; 0x24
   13bd4:	ldrb	r5, [r3]
   13bd8:	cmp	r5, #126	; 0x7e
   13bdc:	ldrls	pc, [pc, r5, lsl #2]
   13be0:	b	13a40 <__assert_fail@plt+0x2b40>
   13be4:	andeq	r3, r1, r4, lsl #28
   13be8:	andeq	r3, r1, r0, asr #20
   13bec:	andeq	r3, r1, r0, asr #20
   13bf0:	andeq	r3, r1, r0, asr #20
   13bf4:	andeq	r3, r1, r0, asr #20
   13bf8:	andeq	r3, r1, r0, asr #20
   13bfc:	andeq	r3, r1, r0, asr #20
   13c00:	strdeq	r3, [r1], -r8
   13c04:	strdeq	r3, [r1], -r0
   13c08:	andeq	r3, r1, r0, ror r9
   13c0c:	strdeq	r3, [r1], -r8
   13c10:	andeq	r3, r1, r0, asr r9
   13c14:	muleq	r1, ip, r1
   13c18:	andeq	r3, r1, ip, ror #27
   13c1c:	andeq	r3, r1, r0, asr #20
   13c20:	andeq	r3, r1, r0, asr #20
   13c24:	andeq	r3, r1, r0, asr #20
   13c28:	andeq	r3, r1, r0, asr #20
   13c2c:	andeq	r3, r1, r0, asr #20
   13c30:	andeq	r3, r1, r0, asr #20
   13c34:	andeq	r3, r1, r0, asr #20
   13c38:	andeq	r3, r1, r0, asr #20
   13c3c:	andeq	r3, r1, r0, asr #20
   13c40:	andeq	r3, r1, r0, asr #20
   13c44:	andeq	r3, r1, r0, asr #20
   13c48:	andeq	r3, r1, r0, asr #20
   13c4c:	andeq	r3, r1, r0, asr #20
   13c50:	andeq	r3, r1, r0, asr #20
   13c54:	andeq	r3, r1, r0, asr #20
   13c58:	andeq	r3, r1, r0, asr #20
   13c5c:	andeq	r3, r1, r0, asr #20
   13c60:	andeq	r3, r1, r0, asr #20
   13c64:	andeq	r3, r1, r0, ror #18
   13c68:	andeq	r3, r1, r0, ror #27
   13c6c:	andeq	r3, r1, r0, ror #27
   13c70:	andeq	r3, r1, r4, asr #18
   13c74:	andeq	r3, r1, r0, ror #27
   13c78:	andeq	r3, r1, r4, lsr r9
   13c7c:	andeq	r3, r1, r0, ror #27
   13c80:	andeq	r3, r1, r8, lsr #19
   13c84:	andeq	r3, r1, r0, ror #27
   13c88:	andeq	r3, r1, r0, ror #27
   13c8c:	andeq	r3, r1, r0, ror #27
   13c90:	andeq	r3, r1, r4, lsr r9
   13c94:	andeq	r3, r1, r4, lsr r9
   13c98:	andeq	r3, r1, r4, lsr r9
   13c9c:	andeq	r3, r1, r4, lsr r9
   13ca0:	andeq	r3, r1, r4, lsr r9
   13ca4:	andeq	r3, r1, r4, lsr r9
   13ca8:	andeq	r3, r1, r4, lsr r9
   13cac:	andeq	r3, r1, r4, lsr r9
   13cb0:	andeq	r3, r1, r4, lsr r9
   13cb4:	andeq	r3, r1, r4, lsr r9
   13cb8:	andeq	r3, r1, r4, lsr r9
   13cbc:	andeq	r3, r1, r4, lsr r9
   13cc0:	andeq	r3, r1, r4, lsr r9
   13cc4:	andeq	r3, r1, r4, lsr r9
   13cc8:	andeq	r3, r1, r4, lsr r9
   13ccc:	andeq	r3, r1, r4, lsr r9
   13cd0:	andeq	r3, r1, r0, ror #27
   13cd4:	andeq	r3, r1, r0, ror #27
   13cd8:	andeq	r3, r1, r0, ror #27
   13cdc:	andeq	r3, r1, r0, ror #27
   13ce0:	andeq	r3, r1, r0, lsl #19
   13ce4:	andeq	r3, r1, r0, asr #20
   13ce8:	andeq	r3, r1, r4, lsr r9
   13cec:	andeq	r3, r1, r4, lsr r9
   13cf0:	andeq	r3, r1, r4, lsr r9
   13cf4:	andeq	r3, r1, r4, lsr r9
   13cf8:	andeq	r3, r1, r4, lsr r9
   13cfc:	andeq	r3, r1, r4, lsr r9
   13d00:	andeq	r3, r1, r4, lsr r9
   13d04:	andeq	r3, r1, r4, lsr r9
   13d08:	andeq	r3, r1, r4, lsr r9
   13d0c:	andeq	r3, r1, r4, lsr r9
   13d10:	andeq	r3, r1, r4, lsr r9
   13d14:	andeq	r3, r1, r4, lsr r9
   13d18:	andeq	r3, r1, r4, lsr r9
   13d1c:	andeq	r3, r1, r4, lsr r9
   13d20:	andeq	r3, r1, r4, lsr r9
   13d24:	andeq	r3, r1, r4, lsr r9
   13d28:	andeq	r3, r1, r4, lsr r9
   13d2c:	andeq	r3, r1, r4, lsr r9
   13d30:	andeq	r3, r1, r4, lsr r9
   13d34:	andeq	r3, r1, r4, lsr r9
   13d38:	andeq	r3, r1, r4, lsr r9
   13d3c:	andeq	r3, r1, r4, lsr r9
   13d40:	andeq	r3, r1, r4, lsr r9
   13d44:	andeq	r3, r1, r4, lsr r9
   13d48:	andeq	r3, r1, r4, lsr r9
   13d4c:	andeq	r3, r1, r4, lsr r9
   13d50:	andeq	r3, r1, r0, ror #27
   13d54:	andeq	r3, r1, r0, lsl #18
   13d58:	andeq	r3, r1, r4, lsr r9
   13d5c:	andeq	r3, r1, r0, ror #27
   13d60:	andeq	r3, r1, r4, lsr r9
   13d64:	andeq	r3, r1, r0, ror #27
   13d68:	andeq	r3, r1, r4, lsr r9
   13d6c:	andeq	r3, r1, r4, lsr r9
   13d70:	andeq	r3, r1, r4, lsr r9
   13d74:	andeq	r3, r1, r4, lsr r9
   13d78:	andeq	r3, r1, r4, lsr r9
   13d7c:	andeq	r3, r1, r4, lsr r9
   13d80:	andeq	r3, r1, r4, lsr r9
   13d84:	andeq	r3, r1, r4, lsr r9
   13d88:	andeq	r3, r1, r4, lsr r9
   13d8c:	andeq	r3, r1, r4, lsr r9
   13d90:	andeq	r3, r1, r4, lsr r9
   13d94:	andeq	r3, r1, r4, lsr r9
   13d98:	andeq	r3, r1, r4, lsr r9
   13d9c:	andeq	r3, r1, r4, lsr r9
   13da0:	andeq	r3, r1, r4, lsr r9
   13da4:	andeq	r3, r1, r4, lsr r9
   13da8:	andeq	r3, r1, r4, lsr r9
   13dac:	andeq	r3, r1, r4, lsr r9
   13db0:	andeq	r3, r1, r4, lsr r9
   13db4:	andeq	r3, r1, r4, lsr r9
   13db8:	andeq	r3, r1, r4, lsr r9
   13dbc:	andeq	r3, r1, r4, lsr r9
   13dc0:	andeq	r3, r1, r4, lsr r9
   13dc4:	andeq	r3, r1, r4, lsr r9
   13dc8:	andeq	r3, r1, r4, lsr r9
   13dcc:	andeq	r3, r1, r4, lsr r9
   13dd0:	ldrdeq	r3, [r1], -ip
   13dd4:	andeq	r3, r1, r0, ror #27
   13dd8:	ldrdeq	r3, [r1], -ip
   13ddc:	andeq	r3, r1, r4, asr #18
   13de0:	mov	r3, #0
   13de4:	str	r3, [sp, #40]	; 0x28
   13de8:	b	134c0 <__assert_fail@plt+0x25c0>
   13dec:	mov	r3, #0
   13df0:	str	r3, [sp, #40]	; 0x28
   13df4:	b	13458 <__assert_fail@plt+0x2558>
   13df8:	mov	r3, #0
   13dfc:	str	r3, [sp, #40]	; 0x28
   13e00:	b	1348c <__assert_fail@plt+0x258c>
   13e04:	ldr	r3, [sp, #44]	; 0x2c
   13e08:	cmp	r3, #0
   13e0c:	beq	133a4 <__assert_fail@plt+0x24a4>
   13e10:	ldr	r3, [sp, #52]	; 0x34
   13e14:	mov	fp, r9
   13e18:	str	r3, [sp, #60]	; 0x3c
   13e1c:	b	1351c <__assert_fail@plt+0x261c>
   13e20:	ldr	r3, [sp, #44]	; 0x2c
   13e24:	cmp	r3, #0
   13e28:	bne	1425c <__assert_fail@plt+0x335c>
   13e2c:	str	r3, [sp, #40]	; 0x28
   13e30:	cmp	sl, #0
   13e34:	ldr	r3, [sp, #84]	; 0x54
   13e38:	clz	r3, r3
   13e3c:	lsr	r3, r3, #5
   13e40:	moveq	r3, #0
   13e44:	cmp	r3, #0
   13e48:	strne	sl, [sp, #84]	; 0x54
   13e4c:	movne	sl, #0
   13e50:	bne	13e80 <__assert_fail@plt+0x2f80>
   13e54:	cmp	sl, r4
   13e58:	movhi	r3, #39	; 0x27
   13e5c:	strbhi	r3, [r9, r4]
   13e60:	add	r3, r4, #1
   13e64:	cmp	sl, r3
   13e68:	movhi	r2, #92	; 0x5c
   13e6c:	strbhi	r2, [r9, r3]
   13e70:	add	r3, r4, #2
   13e74:	cmp	sl, r3
   13e78:	movhi	r2, #39	; 0x27
   13e7c:	strbhi	r2, [r9, r3]
   13e80:	mov	r3, #0
   13e84:	add	r4, r4, #3
   13e88:	str	r6, [sp, #80]	; 0x50
   13e8c:	mov	fp, r3
   13e90:	mov	r5, #39	; 0x27
   13e94:	b	13360 <__assert_fail@plt+0x2460>
   13e98:	ldr	r3, [sp, #44]	; 0x2c
   13e9c:	cmp	r3, #0
   13ea0:	bne	1425c <__assert_fail@plt+0x335c>
   13ea4:	mov	r6, #0
   13ea8:	mov	r5, #63	; 0x3f
   13eac:	str	r3, [sp, #40]	; 0x28
   13eb0:	mov	r3, fp
   13eb4:	b	13360 <__assert_fail@plt+0x2460>
   13eb8:	mov	r2, #0
   13ebc:	mov	r3, #0
   13ec0:	cmn	r8, #1
   13ec4:	strd	r2, [sp, #128]	; 0x80
   13ec8:	bne	13ed8 <__assert_fail@plt+0x2fd8>
   13ecc:	ldr	r0, [sp, #28]
   13ed0:	bl	10e04 <strlen@plt>
   13ed4:	mov	r8, r0
   13ed8:	str	r9, [sp, #100]	; 0x64
   13edc:	mov	r3, #0
   13ee0:	strd	sl, [sp, #104]	; 0x68
   13ee4:	ldr	sl, [sp, #28]
   13ee8:	str	r5, [sp, #112]	; 0x70
   13eec:	mov	r5, r3
   13ef0:	ldr	r9, [sp, #68]	; 0x44
   13ef4:	str	r4, [sp, #116]	; 0x74
   13ef8:	add	r4, r7, r5
   13efc:	add	r3, sp, #128	; 0x80
   13f00:	add	fp, sl, r4
   13f04:	sub	r2, r8, r4
   13f08:	mov	r1, fp
   13f0c:	add	r0, sp, #124	; 0x7c
   13f10:	bl	1834c <__assert_fail@plt+0x744c>
   13f14:	subs	r1, r0, #0
   13f18:	beq	13f58 <__assert_fail@plt+0x3058>
   13f1c:	cmn	r1, #1
   13f20:	beq	142b0 <__assert_fail@plt+0x33b0>
   13f24:	cmn	r1, #2
   13f28:	beq	142d0 <__assert_fail@plt+0x33d0>
   13f2c:	cmp	r9, #0
   13f30:	bne	13f88 <__assert_fail@plt+0x3088>
   13f34:	ldr	r0, [sp, #124]	; 0x7c
   13f38:	add	r5, r5, r1
   13f3c:	bl	10d5c <iswprint@plt>
   13f40:	cmp	r0, #0
   13f44:	add	r0, sp, #128	; 0x80
   13f48:	moveq	r6, #0
   13f4c:	bl	10d08 <mbsinit@plt>
   13f50:	cmp	r0, #0
   13f54:	beq	13ef8 <__assert_fail@plt+0x2ff8>
   13f58:	ldr	r3, [sp, #60]	; 0x3c
   13f5c:	add	r9, sp, #100	; 0x64
   13f60:	mov	r0, r5
   13f64:	ldm	r9, {r9, sl, fp}
   13f68:	eor	r2, r6, #1
   13f6c:	ldr	r5, [sp, #112]	; 0x70
   13f70:	and	r2, r2, r3
   13f74:	uxtb	r2, r2
   13f78:	ldr	r4, [sp, #116]	; 0x74
   13f7c:	cmp	r0, #1
   13f80:	bhi	13a9c <__assert_fail@plt+0x2b9c>
   13f84:	b	13a8c <__assert_fail@plt+0x2b8c>
   13f88:	cmp	r1, #1
   13f8c:	beq	13f34 <__assert_fail@plt+0x3034>
   13f90:	add	r2, r4, #1
   13f94:	add	r3, sl, r1
   13f98:	add	r2, sl, r2
   13f9c:	add	r4, r3, r4
   13fa0:	ldrb	r3, [r2], #1
   13fa4:	sub	r3, r3, #91	; 0x5b
   13fa8:	cmp	r3, #33	; 0x21
   13fac:	ldrls	pc, [pc, r3, lsl #2]
   13fb0:	b	1403c <__assert_fail@plt+0x313c>
   13fb4:	andeq	r4, r1, r8, asr #32
   13fb8:	andeq	r4, r1, r8, asr #32
   13fbc:	andeq	r4, r1, ip, lsr r0
   13fc0:	andeq	r4, r1, r8, asr #32
   13fc4:	andeq	r4, r1, ip, lsr r0
   13fc8:	andeq	r4, r1, r8, asr #32
   13fcc:	andeq	r4, r1, ip, lsr r0
   13fd0:	andeq	r4, r1, ip, lsr r0
   13fd4:	andeq	r4, r1, ip, lsr r0
   13fd8:	andeq	r4, r1, ip, lsr r0
   13fdc:	andeq	r4, r1, ip, lsr r0
   13fe0:	andeq	r4, r1, ip, lsr r0
   13fe4:	andeq	r4, r1, ip, lsr r0
   13fe8:	andeq	r4, r1, ip, lsr r0
   13fec:	andeq	r4, r1, ip, lsr r0
   13ff0:	andeq	r4, r1, ip, lsr r0
   13ff4:	andeq	r4, r1, ip, lsr r0
   13ff8:	andeq	r4, r1, ip, lsr r0
   13ffc:	andeq	r4, r1, ip, lsr r0
   14000:	andeq	r4, r1, ip, lsr r0
   14004:	andeq	r4, r1, ip, lsr r0
   14008:	andeq	r4, r1, ip, lsr r0
   1400c:	andeq	r4, r1, ip, lsr r0
   14010:	andeq	r4, r1, ip, lsr r0
   14014:	andeq	r4, r1, ip, lsr r0
   14018:	andeq	r4, r1, ip, lsr r0
   1401c:	andeq	r4, r1, ip, lsr r0
   14020:	andeq	r4, r1, ip, lsr r0
   14024:	andeq	r4, r1, ip, lsr r0
   14028:	andeq	r4, r1, ip, lsr r0
   1402c:	andeq	r4, r1, ip, lsr r0
   14030:	andeq	r4, r1, ip, lsr r0
   14034:	andeq	r4, r1, ip, lsr r0
   14038:	andeq	r4, r1, r8, asr #32
   1403c:	cmp	r4, r2
   14040:	bne	13fa0 <__assert_fail@plt+0x30a0>
   14044:	b	13f34 <__assert_fail@plt+0x3034>
   14048:	mov	r3, #2
   1404c:	ldr	fp, [sp, #100]	; 0x64
   14050:	str	r3, [sp, #176]	; 0xb0
   14054:	ldr	sl, [sp, #104]	; 0x68
   14058:	b	1351c <__assert_fail@plt+0x261c>
   1405c:	ldr	r2, [sp, #52]	; 0x34
   14060:	mov	fp, r9
   14064:	ldr	r3, [sp, #60]	; 0x3c
   14068:	and	r3, r3, r2
   1406c:	str	r3, [sp, #60]	; 0x3c
   14070:	b	1351c <__assert_fail@plt+0x261c>
   14074:	cmp	sl, r4
   14078:	movhi	r2, fp
   1407c:	bhi	133f4 <__assert_fail@plt+0x24f4>
   14080:	mov	r2, r4
   14084:	b	13404 <__assert_fail@plt+0x2504>
   14088:	mov	r6, r3
   1408c:	mov	r5, #63	; 0x3f
   14090:	b	134c4 <__assert_fail@plt+0x25c4>
   14094:	ldr	r8, [sp, #36]	; 0x24
   14098:	ldr	r6, [sp, #100]	; 0x64
   1409c:	b	13370 <__assert_fail@plt+0x2470>
   140a0:	mov	fp, r9
   140a4:	ldr	r8, [sp, #36]	; 0x24
   140a8:	ldr	r3, [sp, #52]	; 0x34
   140ac:	str	r3, [sp, #60]	; 0x3c
   140b0:	b	1351c <__assert_fail@plt+0x261c>
   140b4:	ldr	r8, [sp, #36]	; 0x24
   140b8:	ldr	r6, [sp, #100]	; 0x64
   140bc:	b	13208 <__assert_fail@plt+0x2308>
   140c0:	mov	r3, #0
   140c4:	add	r4, r4, #4
   140c8:	mov	fp, r2
   140cc:	mov	r6, r3
   140d0:	mov	r5, #48	; 0x30
   140d4:	b	13360 <__assert_fail@plt+0x2460>
   140d8:	mov	r6, r3
   140dc:	b	13b5c <__assert_fail@plt+0x2c5c>
   140e0:	mov	r3, #1
   140e4:	movw	r2, #36268	; 0x8dac
   140e8:	movt	r2, #1
   140ec:	mov	r4, r3
   140f0:	mov	r9, sl
   140f4:	str	r3, [sp, #32]
   140f8:	str	sl, [sp, #44]	; 0x2c
   140fc:	str	r3, [sp, #48]	; 0x30
   14100:	str	sl, [sp, #52]	; 0x34
   14104:	str	r3, [sp, #56]	; 0x38
   14108:	str	r3, [sp, #60]	; 0x3c
   1410c:	str	sl, [sp, #64]	; 0x40
   14110:	str	sl, [sp, #68]	; 0x44
   14114:	str	r2, [sp, #72]	; 0x48
   14118:	str	sl, [sp, #80]	; 0x50
   1411c:	str	sl, [sp, #84]	; 0x54
   14120:	str	sl, [sp, #88]	; 0x58
   14124:	b	12c14 <__assert_fail@plt+0x1d14>
   14128:	mov	r3, #0
   1412c:	mov	r5, #48	; 0x30
   14130:	mov	r6, r3
   14134:	b	13360 <__assert_fail@plt+0x2460>
   14138:	cmp	sl, r4
   1413c:	mov	r5, #48	; 0x30
   14140:	movhi	r3, #48	; 0x30
   14144:	strbhi	r3, [r9, r4]
   14148:	add	r3, r2, #2
   1414c:	add	r4, r2, #3
   14150:	cmp	sl, r3
   14154:	movhi	r1, #48	; 0x30
   14158:	strbhi	r1, [r9, r3]
   1415c:	mov	r3, #0
   14160:	b	1343c <__assert_fail@plt+0x253c>
   14164:	ldr	r3, [sp, #48]	; 0x30
   14168:	str	r3, [sp, #40]	; 0x28
   1416c:	b	13a48 <__assert_fail@plt+0x2b48>
   14170:	ldr	r2, [sp, #28]
   14174:	ldrb	r2, [r2, r3]
   14178:	sub	r1, r2, #33	; 0x21
   1417c:	cmp	r1, #29
   14180:	ldrls	pc, [pc, r1, lsl #2]
   14184:	b	134c0 <__assert_fail@plt+0x25c0>
   14188:	andeq	r4, r1, r0, lsl #4
   1418c:	andeq	r3, r1, r0, asr #9
   14190:	andeq	r3, r1, r0, asr #9
   14194:	andeq	r3, r1, r0, asr #9
   14198:	andeq	r3, r1, r0, asr #9
   1419c:	andeq	r3, r1, r0, asr #9
   141a0:	andeq	r4, r1, r0, lsl #4
   141a4:	andeq	r4, r1, r0, lsl #4
   141a8:	andeq	r4, r1, r0, lsl #4
   141ac:	andeq	r3, r1, r0, asr #9
   141b0:	andeq	r3, r1, r0, asr #9
   141b4:	andeq	r3, r1, r0, asr #9
   141b8:	andeq	r4, r1, r0, lsl #4
   141bc:	andeq	r3, r1, r0, asr #9
   141c0:	andeq	r4, r1, r0, lsl #4
   141c4:	andeq	r3, r1, r0, asr #9
   141c8:	andeq	r3, r1, r0, asr #9
   141cc:	andeq	r3, r1, r0, asr #9
   141d0:	andeq	r3, r1, r0, asr #9
   141d4:	andeq	r3, r1, r0, asr #9
   141d8:	andeq	r3, r1, r0, asr #9
   141dc:	andeq	r3, r1, r0, asr #9
   141e0:	andeq	r3, r1, r0, asr #9
   141e4:	andeq	r3, r1, r0, asr #9
   141e8:	andeq	r3, r1, r0, asr #9
   141ec:	andeq	r3, r1, r0, asr #9
   141f0:	andeq	r3, r1, r0, asr #9
   141f4:	andeq	r4, r1, r0, lsl #4
   141f8:	andeq	r4, r1, r0, lsl #4
   141fc:	andeq	r4, r1, r0, lsl #4
   14200:	ldr	r1, [sp, #44]	; 0x2c
   14204:	cmp	r1, #0
   14208:	bne	14468 <__assert_fail@plt+0x3568>
   1420c:	cmp	sl, r4
   14210:	mov	r7, r3
   14214:	movhi	r1, #63	; 0x3f
   14218:	mov	r5, r2
   1421c:	mov	r3, fp
   14220:	strbhi	r1, [r9, r4]
   14224:	add	r1, r4, #1
   14228:	cmp	sl, r1
   1422c:	movhi	r0, #34	; 0x22
   14230:	strbhi	r0, [r9, r1]
   14234:	add	r1, r4, #2
   14238:	cmp	sl, r1
   1423c:	movhi	r0, #34	; 0x22
   14240:	strbhi	r0, [r9, r1]
   14244:	add	r1, r4, #3
   14248:	add	r4, r4, #4
   1424c:	cmp	sl, r1
   14250:	movhi	r0, #63	; 0x3f
   14254:	strbhi	r0, [r9, r1]
   14258:	b	1343c <__assert_fail@plt+0x253c>
   1425c:	mov	fp, r9
   14260:	b	1351c <__assert_fail@plt+0x261c>
   14264:	ldr	r3, [sp, #188]	; 0xbc
   14268:	ldrb	r3, [r3]
   1426c:	cmp	r3, #0
   14270:	beq	12bac <__assert_fail@plt+0x1cac>
   14274:	ldr	r2, [sp, #188]	; 0xbc
   14278:	cmp	sl, r4
   1427c:	bls	1429c <__assert_fail@plt+0x339c>
   14280:	strb	r3, [fp, r4]
   14284:	add	r4, r4, #1
   14288:	ldrb	r3, [r2, #1]!
   1428c:	cmp	r3, #0
   14290:	beq	12bac <__assert_fail@plt+0x1cac>
   14294:	cmp	sl, r4
   14298:	bhi	14280 <__assert_fail@plt+0x3380>
   1429c:	ldrb	r3, [r2, #1]!
   142a0:	add	r4, r4, #1
   142a4:	cmp	r3, #0
   142a8:	bne	14278 <__assert_fail@plt+0x3378>
   142ac:	b	12bac <__assert_fail@plt+0x1cac>
   142b0:	add	r9, sp, #100	; 0x64
   142b4:	mov	r0, r5
   142b8:	ldr	r2, [sp, #60]	; 0x3c
   142bc:	mov	r6, #0
   142c0:	ldm	r9, {r9, sl, fp}
   142c4:	ldr	r5, [sp, #112]	; 0x70
   142c8:	ldr	r4, [sp, #116]	; 0x74
   142cc:	b	13f7c <__assert_fail@plt+0x307c>
   142d0:	cmp	r4, r8
   142d4:	add	r9, sp, #100	; 0x64
   142d8:	mov	r1, r4
   142dc:	mov	r2, fp
   142e0:	ldm	r9, {r9, sl, fp}
   142e4:	mov	r3, r5
   142e8:	mov	r0, r5
   142ec:	ldr	r5, [sp, #112]	; 0x70
   142f0:	ldr	r4, [sp, #116]	; 0x74
   142f4:	bcs	14328 <__assert_fail@plt+0x3428>
   142f8:	ldrb	r6, [r2]
   142fc:	cmp	r6, #0
   14300:	bne	14314 <__assert_fail@plt+0x3414>
   14304:	b	14460 <__assert_fail@plt+0x3560>
   14308:	ldrb	r6, [r2, #1]!
   1430c:	cmp	r6, #0
   14310:	beq	143f8 <__assert_fail@plt+0x34f8>
   14314:	add	r3, r3, #1
   14318:	add	r1, r7, r3
   1431c:	cmp	r8, r1
   14320:	bhi	14308 <__assert_fail@plt+0x3408>
   14324:	mov	r0, r3
   14328:	mov	r6, #0
   1432c:	ldr	r2, [sp, #60]	; 0x3c
   14330:	b	13f7c <__assert_fail@plt+0x307c>
   14334:	mov	r3, #1
   14338:	mov	r4, #0
   1433c:	mov	r9, r4
   14340:	str	r3, [sp, #32]
   14344:	str	r3, [sp, #44]	; 0x2c
   14348:	str	r3, [sp, #48]	; 0x30
   1434c:	str	r4, [sp, #52]	; 0x34
   14350:	str	r3, [sp, #56]	; 0x38
   14354:	str	r3, [sp, #60]	; 0x3c
   14358:	str	r3, [sp, #88]	; 0x58
   1435c:	movw	r3, #36268	; 0x8dac
   14360:	movt	r3, #1
   14364:	str	r4, [sp, #64]	; 0x40
   14368:	str	r4, [sp, #68]	; 0x44
   1436c:	str	r3, [sp, #72]	; 0x48
   14370:	str	r4, [sp, #80]	; 0x50
   14374:	str	r4, [sp, #84]	; 0x54
   14378:	b	12c14 <__assert_fail@plt+0x1d14>
   1437c:	mov	fp, r9
   14380:	b	13530 <__assert_fail@plt+0x2630>
   14384:	ldr	r3, [sp, #48]	; 0x30
   14388:	b	13ea4 <__assert_fail@plt+0x2fa4>
   1438c:	mov	r2, r3
   14390:	ldr	r3, [sp, #72]	; 0x48
   14394:	cmp	r3, #0
   14398:	moveq	r2, #0
   1439c:	andne	r2, r2, #1
   143a0:	cmp	r2, #0
   143a4:	beq	143d4 <__assert_fail@plt+0x34d4>
   143a8:	mov	r2, r3
   143ac:	ldrb	r3, [r3]
   143b0:	cmp	r3, #0
   143b4:	beq	143d4 <__assert_fail@plt+0x34d4>
   143b8:	cmp	sl, r4
   143bc:	bls	143e4 <__assert_fail@plt+0x34e4>
   143c0:	strb	r3, [fp, r4]
   143c4:	add	r4, r4, #1
   143c8:	ldrb	r3, [r2, #1]!
   143cc:	cmp	r3, #0
   143d0:	bne	143b8 <__assert_fail@plt+0x34b8>
   143d4:	cmp	sl, r4
   143d8:	movhi	r3, #0
   143dc:	strbhi	r3, [fp, r4]
   143e0:	b	1356c <__assert_fail@plt+0x266c>
   143e4:	ldrb	r3, [r2, #1]!
   143e8:	add	r4, r4, #1
   143ec:	cmp	r3, #0
   143f0:	bne	143b8 <__assert_fail@plt+0x34b8>
   143f4:	b	143d4 <__assert_fail@plt+0x34d4>
   143f8:	mov	r0, r3
   143fc:	ldr	r2, [sp, #60]	; 0x3c
   14400:	b	13f7c <__assert_fail@plt+0x307c>
   14404:	mov	ip, #5
   14408:	mov	r3, r8
   1440c:	ldr	r1, [sp, #84]	; 0x54
   14410:	str	ip, [sp]
   14414:	ldr	r2, [sp, #180]	; 0xb4
   14418:	ldr	ip, [sp, #188]	; 0xbc
   1441c:	ldr	r0, [sp, #184]	; 0xb8
   14420:	str	r2, [sp, #4]
   14424:	ldr	r2, [sp, #28]
   14428:	str	ip, [sp, #12]
   1442c:	ldr	ip, [sp, #192]	; 0xc0
   14430:	str	r0, [sp, #8]
   14434:	mov	r0, fp
   14438:	str	ip, [sp, #16]
   1443c:	bl	12af0 <__assert_fail@plt+0x1bf0>
   14440:	mov	r4, r0
   14444:	b	1356c <__assert_fail@plt+0x266c>
   14448:	mov	r6, r3
   1444c:	str	r3, [sp, #40]	; 0x28
   14450:	b	134dc <__assert_fail@plt+0x25dc>
   14454:	mov	r3, #2
   14458:	str	r3, [sp, #176]	; 0xb0
   1445c:	b	1351c <__assert_fail@plt+0x261c>
   14460:	ldr	r2, [sp, #60]	; 0x3c
   14464:	b	13f7c <__assert_fail@plt+0x307c>
   14468:	mov	r3, #5
   1446c:	mov	fp, r9
   14470:	str	r3, [sp, #176]	; 0xb0
   14474:	b	13530 <__assert_fail@plt+0x2630>
   14478:	mov	r1, #1
   1447c:	mov	r9, #0
   14480:	mov	r3, r9
   14484:	mov	r2, r9
   14488:	str	r1, [sp, #32]
   1448c:	str	sl, [sp, #84]	; 0x54
   14490:	b	132b8 <__assert_fail@plt+0x23b8>
   14494:	mov	r3, #0
   14498:	mov	r2, #1
   1449c:	mov	r9, r3
   144a0:	mov	r4, r3
   144a4:	str	r2, [sp, #32]
   144a8:	strd	r2, [sp, #44]	; 0x2c
   144ac:	strd	r2, [sp, #56]	; 0x38
   144b0:	str	r3, [sp, #80]	; 0x50
   144b4:	str	r3, [sp, #84]	; 0x54
   144b8:	str	r3, [sp, #88]	; 0x58
   144bc:	movw	r3, #36288	; 0x8dc0
   144c0:	movt	r3, #1
   144c4:	str	r2, [sp, #52]	; 0x34
   144c8:	str	r2, [sp, #64]	; 0x40
   144cc:	str	r2, [sp, #68]	; 0x44
   144d0:	str	r3, [sp, #72]	; 0x48
   144d4:	b	12c14 <__assert_fail@plt+0x1d14>
   144d8:	bl	10ef4 <abort@plt>
   144dc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   144e0:	mov	r4, r0
   144e4:	mov	r5, r3
   144e8:	strd	r6, [sp, #8]
   144ec:	movw	r7, #41200	; 0xa0f0
   144f0:	movt	r7, #2
   144f4:	strd	r8, [sp, #16]
   144f8:	strd	sl, [sp, #24]
   144fc:	mov	sl, r1
   14500:	mov	fp, r2
   14504:	str	lr, [sp, #32]
   14508:	sub	sp, sp, #60	; 0x3c
   1450c:	bl	10e1c <__errno_location@plt>
   14510:	mov	r8, r0
   14514:	cmn	r4, #-2147483647	; 0x80000001
   14518:	ldr	r6, [r7]
   1451c:	movne	r0, #0
   14520:	moveq	r0, #1
   14524:	ldr	r3, [r8]
   14528:	orrs	r0, r0, r4, lsr #31
   1452c:	str	r3, [sp, #28]
   14530:	bne	146c0 <__assert_fail@plt+0x37c0>
   14534:	ldr	r3, [r7, #4]
   14538:	cmp	r3, r4
   1453c:	bgt	1459c <__assert_fail@plt+0x369c>
   14540:	add	r1, r7, #8
   14544:	sub	r2, r4, r3
   14548:	str	r3, [sp, #52]	; 0x34
   1454c:	cmp	r6, r1
   14550:	add	r2, r2, #1
   14554:	beq	14698 <__assert_fail@plt+0x3798>
   14558:	mov	r1, #8
   1455c:	mov	r0, r6
   14560:	mvn	r3, #-2147483648	; 0x80000000
   14564:	str	r1, [sp]
   14568:	add	r1, sp, #52	; 0x34
   1456c:	bl	16dfc <__assert_fail@plt+0x5efc>
   14570:	mov	r6, r0
   14574:	str	r0, [r7]
   14578:	ldr	r0, [r7, #4]
   1457c:	mov	r1, #0
   14580:	ldr	r2, [sp, #52]	; 0x34
   14584:	sub	r2, r2, r0
   14588:	add	r0, r6, r0, lsl #3
   1458c:	lsl	r2, r2, #3
   14590:	bl	10e34 <memset@plt>
   14594:	ldr	r3, [sp, #52]	; 0x34
   14598:	str	r3, [r7, #4]
   1459c:	ldr	r1, [r5, #4]
   145a0:	add	r0, r6, r4, lsl #3
   145a4:	add	ip, r5, #8
   145a8:	mov	r3, fp
   145ac:	mov	r2, sl
   145b0:	ldr	r7, [r0, #4]
   145b4:	str	r0, [sp, #36]	; 0x24
   145b8:	str	ip, [sp, #40]	; 0x28
   145bc:	orr	r0, r1, #1
   145c0:	ldr	r9, [r6, r4, lsl #3]
   145c4:	str	ip, [sp, #8]
   145c8:	ldr	lr, [r5, #44]	; 0x2c
   145cc:	str	r0, [sp, #4]
   145d0:	ldr	ip, [r5]
   145d4:	mov	r1, r9
   145d8:	str	ip, [sp, #32]
   145dc:	ldr	ip, [r5, #40]	; 0x28
   145e0:	str	ip, [sp, #12]
   145e4:	ldr	ip, [sp, #32]
   145e8:	str	lr, [sp, #16]
   145ec:	str	r0, [sp, #44]	; 0x2c
   145f0:	mov	r0, r7
   145f4:	str	ip, [sp]
   145f8:	bl	12af0 <__assert_fail@plt+0x1bf0>
   145fc:	cmp	r9, r0
   14600:	bhi	14670 <__assert_fail@plt+0x3770>
   14604:	add	r9, r0, #1
   14608:	movw	r3, #41316	; 0xa164
   1460c:	movt	r3, #2
   14610:	cmp	r7, r3
   14614:	str	r9, [r6, r4, lsl #3]
   14618:	beq	14624 <__assert_fail@plt+0x3724>
   1461c:	mov	r0, r7
   14620:	bl	1279c <__assert_fail@plt+0x189c>
   14624:	mov	r0, r9
   14628:	bl	16b58 <__assert_fail@plt+0x5c58>
   1462c:	ldr	ip, [r5]
   14630:	mov	r3, fp
   14634:	mov	r2, sl
   14638:	mov	r1, r9
   1463c:	mov	r7, r0
   14640:	ldr	lr, [sp, #36]	; 0x24
   14644:	ldr	r4, [r5, #40]	; 0x28
   14648:	str	r0, [lr, #4]
   1464c:	ldr	lr, [r5, #44]	; 0x2c
   14650:	str	ip, [sp]
   14654:	ldr	ip, [sp, #44]	; 0x2c
   14658:	str	ip, [sp, #4]
   1465c:	ldr	ip, [sp, #40]	; 0x28
   14660:	str	r4, [sp, #12]
   14664:	str	lr, [sp, #16]
   14668:	str	ip, [sp, #8]
   1466c:	bl	12af0 <__assert_fail@plt+0x1bf0>
   14670:	ldr	r3, [sp, #28]
   14674:	mov	r0, r7
   14678:	str	r3, [r8]
   1467c:	add	sp, sp, #60	; 0x3c
   14680:	ldrd	r4, [sp]
   14684:	ldrd	r6, [sp, #8]
   14688:	ldrd	r8, [sp, #16]
   1468c:	ldrd	sl, [sp, #24]
   14690:	add	sp, sp, #32
   14694:	pop	{pc}		; (ldr pc, [sp], #4)
   14698:	mov	r1, #8
   1469c:	mvn	r3, #-2147483648	; 0x80000000
   146a0:	str	r1, [sp]
   146a4:	add	r1, sp, #52	; 0x34
   146a8:	bl	16dfc <__assert_fail@plt+0x5efc>
   146ac:	ldrd	r2, [r7, #8]
   146b0:	mov	r6, r0
   146b4:	str	r0, [r7]
   146b8:	strd	r2, [r0]
   146bc:	b	14578 <__assert_fail@plt+0x3678>
   146c0:	bl	10ef4 <abort@plt>
   146c4:	strd	r4, [sp, #-16]!
   146c8:	mov	r5, r0
   146cc:	str	r6, [sp, #8]
   146d0:	str	lr, [sp, #12]
   146d4:	bl	10e1c <__errno_location@plt>
   146d8:	mov	r4, r0
   146dc:	cmp	r5, #0
   146e0:	ldr	r0, [pc, #32]	; 14708 <__assert_fail@plt+0x3808>
   146e4:	mov	r1, #48	; 0x30
   146e8:	movne	r0, r5
   146ec:	ldr	r6, [r4]
   146f0:	bl	16f9c <__assert_fail@plt+0x609c>
   146f4:	str	r6, [r4]
   146f8:	ldrd	r4, [sp]
   146fc:	ldr	r6, [sp, #8]
   14700:	add	sp, sp, #12
   14704:	pop	{pc}		; (ldr pc, [sp], #4)
   14708:	andeq	sl, r2, r4, ror #4
   1470c:	ldr	r3, [pc, #12]	; 14720 <__assert_fail@plt+0x3820>
   14710:	cmp	r0, #0
   14714:	moveq	r0, r3
   14718:	ldr	r0, [r0]
   1471c:	bx	lr
   14720:	andeq	sl, r2, r4, ror #4
   14724:	ldr	r3, [pc, #12]	; 14738 <__assert_fail@plt+0x3838>
   14728:	cmp	r0, #0
   1472c:	moveq	r0, r3
   14730:	str	r1, [r0]
   14734:	bx	lr
   14738:	andeq	sl, r2, r4, ror #4
   1473c:	ldr	r3, [pc, #52]	; 14778 <__assert_fail@plt+0x3878>
   14740:	cmp	r0, #0
   14744:	push	{lr}		; (str lr, [sp, #-4]!)
   14748:	lsr	lr, r1, #5
   1474c:	and	r1, r1, #31
   14750:	moveq	r0, r3
   14754:	add	r3, r0, #8
   14758:	ldr	ip, [r3, lr, lsl #2]
   1475c:	lsr	r0, ip, r1
   14760:	eor	r2, r2, r0
   14764:	and	r0, r0, #1
   14768:	and	r2, r2, #1
   1476c:	eor	r1, ip, r2, lsl r1
   14770:	str	r1, [r3, lr, lsl #2]
   14774:	pop	{pc}		; (ldr pc, [sp], #4)
   14778:	andeq	sl, r2, r4, ror #4
   1477c:	ldr	r3, [pc, #16]	; 14794 <__assert_fail@plt+0x3894>
   14780:	cmp	r0, #0
   14784:	movne	r3, r0
   14788:	ldr	r0, [r3, #4]
   1478c:	str	r1, [r3, #4]
   14790:	bx	lr
   14794:	andeq	sl, r2, r4, ror #4
   14798:	ldr	r3, [pc, #48]	; 147d0 <__assert_fail@plt+0x38d0>
   1479c:	cmp	r0, #0
   147a0:	mov	ip, #10
   147a4:	moveq	r0, r3
   147a8:	cmp	r2, #0
   147ac:	cmpne	r1, #0
   147b0:	str	ip, [r0]
   147b4:	beq	147c4 <__assert_fail@plt+0x38c4>
   147b8:	str	r1, [r0, #40]	; 0x28
   147bc:	str	r2, [r0, #44]	; 0x2c
   147c0:	bx	lr
   147c4:	str	r4, [sp, #-8]!
   147c8:	str	lr, [sp, #4]
   147cc:	bl	10ef4 <abort@plt>
   147d0:	andeq	sl, r2, r4, ror #4
   147d4:	strd	r4, [sp, #-28]!	; 0xffffffe4
   147d8:	strd	r6, [sp, #8]
   147dc:	mov	r7, r0
   147e0:	mov	r6, r1
   147e4:	strd	r8, [sp, #16]
   147e8:	mov	r8, r2
   147ec:	mov	r9, r3
   147f0:	str	lr, [sp, #24]
   147f4:	sub	sp, sp, #28
   147f8:	ldr	r4, [sp, #56]	; 0x38
   147fc:	ldr	ip, [pc, #104]	; 1486c <__assert_fail@plt+0x396c>
   14800:	cmp	r4, #0
   14804:	moveq	r4, ip
   14808:	bl	10e1c <__errno_location@plt>
   1480c:	ldr	ip, [r4, #44]	; 0x2c
   14810:	mov	r5, r0
   14814:	mov	r1, r6
   14818:	add	lr, r4, #8
   1481c:	mov	r3, r9
   14820:	ldr	r6, [r5]
   14824:	mov	r2, r8
   14828:	mov	r0, r7
   1482c:	str	ip, [sp, #16]
   14830:	ldr	ip, [r4, #40]	; 0x28
   14834:	str	lr, [sp, #8]
   14838:	str	ip, [sp, #12]
   1483c:	ldr	ip, [r4, #4]
   14840:	str	ip, [sp, #4]
   14844:	ldr	ip, [r4]
   14848:	str	ip, [sp]
   1484c:	bl	12af0 <__assert_fail@plt+0x1bf0>
   14850:	str	r6, [r5]
   14854:	add	sp, sp, #28
   14858:	ldrd	r4, [sp]
   1485c:	ldrd	r6, [sp, #8]
   14860:	ldrd	r8, [sp, #16]
   14864:	add	sp, sp, #24
   14868:	pop	{pc}		; (ldr pc, [sp], #4)
   1486c:	andeq	sl, r2, r4, ror #4
   14870:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14874:	cmp	r2, #0
   14878:	ldr	r4, [pc, #192]	; 14940 <__assert_fail@plt+0x3a40>
   1487c:	movne	r4, r2
   14880:	strd	r6, [sp, #8]
   14884:	strd	r8, [sp, #16]
   14888:	mov	r9, r1
   1488c:	mov	r8, r0
   14890:	strd	sl, [sp, #24]
   14894:	str	lr, [sp, #32]
   14898:	sub	sp, sp, #36	; 0x24
   1489c:	bl	10e1c <__errno_location@plt>
   148a0:	ldr	r5, [r4, #4]
   148a4:	mov	r6, r0
   148a8:	add	r7, r4, #8
   148ac:	mov	r1, #0
   148b0:	mov	r3, r9
   148b4:	ldr	ip, [r4, #44]	; 0x2c
   148b8:	mov	r2, r8
   148bc:	mov	r0, r1
   148c0:	ldr	sl, [r6]
   148c4:	orr	r5, r5, #1
   148c8:	str	ip, [sp, #16]
   148cc:	ldr	ip, [r4, #40]	; 0x28
   148d0:	stmib	sp, {r5, r7, ip}
   148d4:	ldr	ip, [r4]
   148d8:	str	ip, [sp]
   148dc:	bl	12af0 <__assert_fail@plt+0x1bf0>
   148e0:	add	r1, r0, #1
   148e4:	mov	r0, r1
   148e8:	str	r1, [sp, #28]
   148ec:	bl	16b58 <__assert_fail@plt+0x5c58>
   148f0:	ldr	ip, [r4, #44]	; 0x2c
   148f4:	mov	fp, r0
   148f8:	mov	r3, r9
   148fc:	mov	r2, r8
   14900:	ldr	r1, [sp, #28]
   14904:	str	ip, [sp, #16]
   14908:	ldr	ip, [r4, #40]	; 0x28
   1490c:	stmib	sp, {r5, r7, ip}
   14910:	ldr	ip, [r4]
   14914:	str	ip, [sp]
   14918:	bl	12af0 <__assert_fail@plt+0x1bf0>
   1491c:	mov	r0, fp
   14920:	str	sl, [r6]
   14924:	add	sp, sp, #36	; 0x24
   14928:	ldrd	r4, [sp]
   1492c:	ldrd	r6, [sp, #8]
   14930:	ldrd	r8, [sp, #16]
   14934:	ldrd	sl, [sp, #24]
   14938:	add	sp, sp, #32
   1493c:	pop	{pc}		; (ldr pc, [sp], #4)
   14940:	andeq	sl, r2, r4, ror #4
   14944:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14948:	cmp	r3, #0
   1494c:	ldr	r4, [pc, #220]	; 14a30 <__assert_fail@plt+0x3b30>
   14950:	movne	r4, r3
   14954:	strd	r6, [sp, #8]
   14958:	mov	r6, r2
   1495c:	strd	r8, [sp, #16]
   14960:	mov	r9, r0
   14964:	strd	sl, [sp, #24]
   14968:	mov	sl, r1
   1496c:	str	lr, [sp, #32]
   14970:	sub	sp, sp, #44	; 0x2c
   14974:	bl	10e1c <__errno_location@plt>
   14978:	ldr	r5, [r4, #4]
   1497c:	mov	r7, r0
   14980:	mov	r1, #0
   14984:	add	r8, r4, #8
   14988:	mov	r3, sl
   1498c:	ldr	ip, [r4, #44]	; 0x2c
   14990:	mov	r2, r9
   14994:	mov	r0, r1
   14998:	ldr	lr, [r7]
   1499c:	cmp	r6, r1
   149a0:	orreq	r5, r5, #1
   149a4:	str	ip, [sp, #16]
   149a8:	ldr	ip, [r4, #40]	; 0x28
   149ac:	stmib	sp, {r5, r8, ip}
   149b0:	ldr	ip, [r4]
   149b4:	str	lr, [sp, #28]
   149b8:	str	ip, [sp]
   149bc:	bl	12af0 <__assert_fail@plt+0x1bf0>
   149c0:	add	r1, r0, #1
   149c4:	mov	fp, r0
   149c8:	mov	r0, r1
   149cc:	str	r1, [sp, #36]	; 0x24
   149d0:	bl	16b58 <__assert_fail@plt+0x5c58>
   149d4:	ldr	ip, [r4, #44]	; 0x2c
   149d8:	mov	r3, sl
   149dc:	mov	r2, r9
   149e0:	ldr	r1, [sp, #36]	; 0x24
   149e4:	str	ip, [sp, #16]
   149e8:	ldr	ip, [r4, #40]	; 0x28
   149ec:	str	r0, [sp, #32]
   149f0:	stmib	sp, {r5, r8, ip}
   149f4:	ldr	ip, [r4]
   149f8:	str	ip, [sp]
   149fc:	bl	12af0 <__assert_fail@plt+0x1bf0>
   14a00:	ldr	lr, [sp, #28]
   14a04:	cmp	r6, #0
   14a08:	ldr	r0, [sp, #32]
   14a0c:	str	lr, [r7]
   14a10:	strne	fp, [r6]
   14a14:	add	sp, sp, #44	; 0x2c
   14a18:	ldrd	r4, [sp]
   14a1c:	ldrd	r6, [sp, #8]
   14a20:	ldrd	r8, [sp, #16]
   14a24:	ldrd	sl, [sp, #24]
   14a28:	add	sp, sp, #32
   14a2c:	pop	{pc}		; (ldr pc, [sp], #4)
   14a30:	andeq	sl, r2, r4, ror #4
   14a34:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14a38:	movw	r5, #41200	; 0xa0f0
   14a3c:	movt	r5, #2
   14a40:	ldr	r3, [r5, #4]
   14a44:	strd	r6, [sp, #8]
   14a48:	str	r8, [sp, #16]
   14a4c:	str	lr, [sp, #20]
   14a50:	ldr	r7, [r5]
   14a54:	cmp	r3, #1
   14a58:	ble	14a7c <__assert_fail@plt+0x3b7c>
   14a5c:	mov	r4, #1
   14a60:	add	r6, r7, #4
   14a64:	ldr	r0, [r6, r4, lsl #3]
   14a68:	add	r4, r4, #1
   14a6c:	bl	1279c <__assert_fail@plt+0x189c>
   14a70:	ldr	r3, [r5, #4]
   14a74:	cmp	r3, r4
   14a78:	bgt	14a64 <__assert_fail@plt+0x3b64>
   14a7c:	ldr	r0, [r7, #4]
   14a80:	movw	r4, #41316	; 0xa164
   14a84:	movt	r4, #2
   14a88:	cmp	r0, r4
   14a8c:	beq	14aa0 <__assert_fail@plt+0x3ba0>
   14a90:	bl	1279c <__assert_fail@plt+0x189c>
   14a94:	mov	r3, #256	; 0x100
   14a98:	str	r3, [r5, #8]
   14a9c:	str	r4, [r5, #12]
   14aa0:	ldr	r4, [pc, #44]	; 14ad4 <__assert_fail@plt+0x3bd4>
   14aa4:	cmp	r7, r4
   14aa8:	beq	14ab8 <__assert_fail@plt+0x3bb8>
   14aac:	mov	r0, r7
   14ab0:	bl	1279c <__assert_fail@plt+0x189c>
   14ab4:	str	r4, [r5]
   14ab8:	mov	r3, #1
   14abc:	ldrd	r6, [sp, #8]
   14ac0:	str	r3, [r5, #4]
   14ac4:	ldrd	r4, [sp]
   14ac8:	ldr	r8, [sp, #16]
   14acc:	add	sp, sp, #20
   14ad0:	pop	{pc}		; (ldr pc, [sp], #4)
   14ad4:	strdeq	sl, [r2], -r8
   14ad8:	ldr	r3, [pc, #4]	; 14ae4 <__assert_fail@plt+0x3be4>
   14adc:	mvn	r2, #0
   14ae0:	b	144dc <__assert_fail@plt+0x35dc>
   14ae4:	andeq	sl, r2, r4, ror #4
   14ae8:	ldr	r3, [pc]	; 14af0 <__assert_fail@plt+0x3bf0>
   14aec:	b	144dc <__assert_fail@plt+0x35dc>
   14af0:	andeq	sl, r2, r4, ror #4
   14af4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14af8:	movw	r4, #41200	; 0xa0f0
   14afc:	movt	r4, #2
   14b00:	strd	r6, [sp, #8]
   14b04:	strd	r8, [sp, #16]
   14b08:	strd	sl, [sp, #24]
   14b0c:	mov	sl, r0
   14b10:	str	lr, [sp, #32]
   14b14:	sub	sp, sp, #44	; 0x2c
   14b18:	bl	10e1c <__errno_location@plt>
   14b1c:	ldr	r3, [r0]
   14b20:	mov	r8, r0
   14b24:	ldr	r2, [r4, #4]
   14b28:	ldr	r5, [r4]
   14b2c:	str	r3, [sp, #28]
   14b30:	cmp	r2, #0
   14b34:	bgt	14b90 <__assert_fail@plt+0x3c90>
   14b38:	add	r3, r4, #8
   14b3c:	str	r2, [sp, #36]	; 0x24
   14b40:	rsb	r2, r2, #1
   14b44:	cmp	r5, r3
   14b48:	beq	14c5c <__assert_fail@plt+0x3d5c>
   14b4c:	mov	r1, #8
   14b50:	mov	r0, r5
   14b54:	mvn	r3, #-2147483648	; 0x80000000
   14b58:	str	r1, [sp]
   14b5c:	add	r1, sp, #36	; 0x24
   14b60:	bl	16dfc <__assert_fail@plt+0x5efc>
   14b64:	mov	r5, r0
   14b68:	str	r0, [r4]
   14b6c:	ldr	r0, [r4, #4]
   14b70:	mov	r1, #0
   14b74:	ldr	r2, [sp, #36]	; 0x24
   14b78:	sub	r2, r2, r0
   14b7c:	add	r0, r5, r0, lsl #3
   14b80:	lsl	r2, r2, #3
   14b84:	bl	10e34 <memset@plt>
   14b88:	ldr	r3, [sp, #36]	; 0x24
   14b8c:	str	r3, [r4, #4]
   14b90:	movw	r4, #41316	; 0xa164
   14b94:	movt	r4, #2
   14b98:	ldr	r9, [r5]
   14b9c:	add	fp, r4, #264	; 0x108
   14ba0:	mvn	r3, #0
   14ba4:	ldr	r7, [r4, #260]	; 0x104
   14ba8:	mov	r2, sl
   14bac:	ldr	r6, [r5, #4]
   14bb0:	str	fp, [sp, #8]
   14bb4:	mov	r1, r9
   14bb8:	ldr	ip, [r4, #256]	; 0x100
   14bbc:	orr	r7, r7, #1
   14bc0:	ldr	lr, [r4, #300]	; 0x12c
   14bc4:	mov	r0, r6
   14bc8:	str	ip, [sp]
   14bcc:	str	r7, [sp, #4]
   14bd0:	str	lr, [sp, #16]
   14bd4:	ldr	ip, [r4, #296]	; 0x128
   14bd8:	str	ip, [sp, #12]
   14bdc:	bl	12af0 <__assert_fail@plt+0x1bf0>
   14be0:	cmp	r9, r0
   14be4:	bhi	14c34 <__assert_fail@plt+0x3d34>
   14be8:	add	r9, r0, #1
   14bec:	cmp	r6, r4
   14bf0:	str	r9, [r5]
   14bf4:	beq	14c00 <__assert_fail@plt+0x3d00>
   14bf8:	mov	r0, r6
   14bfc:	bl	1279c <__assert_fail@plt+0x189c>
   14c00:	mov	r0, r9
   14c04:	bl	16b58 <__assert_fail@plt+0x5c58>
   14c08:	ldr	r3, [r4, #256]	; 0x100
   14c0c:	mov	r2, sl
   14c10:	mov	r1, r9
   14c14:	mov	r6, r0
   14c18:	ldr	lr, [r4, #296]	; 0x128
   14c1c:	ldr	ip, [r4, #300]	; 0x12c
   14c20:	str	r0, [r5, #4]
   14c24:	stm	sp, {r3, r7, fp, lr}
   14c28:	mvn	r3, #0
   14c2c:	str	ip, [sp, #16]
   14c30:	bl	12af0 <__assert_fail@plt+0x1bf0>
   14c34:	ldr	r3, [sp, #28]
   14c38:	mov	r0, r6
   14c3c:	str	r3, [r8]
   14c40:	add	sp, sp, #44	; 0x2c
   14c44:	ldrd	r4, [sp]
   14c48:	ldrd	r6, [sp, #8]
   14c4c:	ldrd	r8, [sp, #16]
   14c50:	ldrd	sl, [sp, #24]
   14c54:	add	sp, sp, #32
   14c58:	pop	{pc}		; (ldr pc, [sp], #4)
   14c5c:	mov	r0, #8
   14c60:	mvn	r3, #-2147483648	; 0x80000000
   14c64:	add	r1, sp, #36	; 0x24
   14c68:	str	r0, [sp]
   14c6c:	mov	r0, #0
   14c70:	bl	16dfc <__assert_fail@plt+0x5efc>
   14c74:	ldrd	r2, [r4, #8]
   14c78:	mov	r5, r0
   14c7c:	str	r0, [r4]
   14c80:	strd	r2, [r0]
   14c84:	b	14b6c <__assert_fail@plt+0x3c6c>
   14c88:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14c8c:	movw	r4, #41200	; 0xa0f0
   14c90:	movt	r4, #2
   14c94:	strd	r6, [sp, #8]
   14c98:	strd	r8, [sp, #16]
   14c9c:	strd	sl, [sp, #24]
   14ca0:	mov	sl, r0
   14ca4:	mov	fp, r1
   14ca8:	str	lr, [sp, #32]
   14cac:	sub	sp, sp, #44	; 0x2c
   14cb0:	bl	10e1c <__errno_location@plt>
   14cb4:	ldr	r3, [r0]
   14cb8:	mov	r8, r0
   14cbc:	ldr	r2, [r4, #4]
   14cc0:	ldr	r5, [r4]
   14cc4:	str	r3, [sp, #28]
   14cc8:	cmp	r2, #0
   14ccc:	bgt	14d28 <__assert_fail@plt+0x3e28>
   14cd0:	add	r3, r4, #8
   14cd4:	str	r2, [sp, #36]	; 0x24
   14cd8:	rsb	r2, r2, #1
   14cdc:	cmp	r5, r3
   14ce0:	beq	14e04 <__assert_fail@plt+0x3f04>
   14ce4:	mov	r1, #8
   14ce8:	mov	r0, r5
   14cec:	mvn	r3, #-2147483648	; 0x80000000
   14cf0:	str	r1, [sp]
   14cf4:	add	r1, sp, #36	; 0x24
   14cf8:	bl	16dfc <__assert_fail@plt+0x5efc>
   14cfc:	mov	r5, r0
   14d00:	str	r0, [r4]
   14d04:	ldr	r0, [r4, #4]
   14d08:	mov	r1, #0
   14d0c:	ldr	r2, [sp, #36]	; 0x24
   14d10:	sub	r2, r2, r0
   14d14:	add	r0, r5, r0, lsl #3
   14d18:	lsl	r2, r2, #3
   14d1c:	bl	10e34 <memset@plt>
   14d20:	ldr	r3, [sp, #36]	; 0x24
   14d24:	str	r3, [r4, #4]
   14d28:	movw	r4, #41316	; 0xa164
   14d2c:	movt	r4, #2
   14d30:	ldr	r9, [r5]
   14d34:	add	r0, r4, #264	; 0x108
   14d38:	mov	r3, fp
   14d3c:	ldr	r7, [r4, #260]	; 0x104
   14d40:	mov	r2, sl
   14d44:	ldr	r6, [r5, #4]
   14d48:	str	r0, [sp, #8]
   14d4c:	mov	r1, r9
   14d50:	ldr	ip, [r4, #256]	; 0x100
   14d54:	orr	r7, r7, #1
   14d58:	ldr	lr, [r4, #300]	; 0x12c
   14d5c:	mov	r0, r6
   14d60:	str	ip, [sp]
   14d64:	str	r7, [sp, #4]
   14d68:	str	lr, [sp, #16]
   14d6c:	ldr	ip, [r4, #296]	; 0x128
   14d70:	str	ip, [sp, #12]
   14d74:	bl	12af0 <__assert_fail@plt+0x1bf0>
   14d78:	cmp	r9, r0
   14d7c:	bhi	14ddc <__assert_fail@plt+0x3edc>
   14d80:	add	r9, r0, #1
   14d84:	cmp	r6, r4
   14d88:	str	r9, [r5]
   14d8c:	beq	14d98 <__assert_fail@plt+0x3e98>
   14d90:	mov	r0, r6
   14d94:	bl	1279c <__assert_fail@plt+0x189c>
   14d98:	mov	r0, r9
   14d9c:	bl	16b58 <__assert_fail@plt+0x5c58>
   14da0:	ldr	ip, [r4, #256]	; 0x100
   14da4:	mov	r1, r9
   14da8:	mov	r3, fp
   14dac:	mov	r2, sl
   14db0:	mov	r6, r0
   14db4:	ldr	r9, [r4, #296]	; 0x128
   14db8:	ldr	lr, [r4, #300]	; 0x12c
   14dbc:	str	r0, [r5, #4]
   14dc0:	str	ip, [sp]
   14dc4:	ldr	ip, [pc, #100]	; 14e30 <__assert_fail@plt+0x3f30>
   14dc8:	str	r7, [sp, #4]
   14dcc:	str	ip, [sp, #8]
   14dd0:	str	r9, [sp, #12]
   14dd4:	str	lr, [sp, #16]
   14dd8:	bl	12af0 <__assert_fail@plt+0x1bf0>
   14ddc:	ldr	r3, [sp, #28]
   14de0:	mov	r0, r6
   14de4:	str	r3, [r8]
   14de8:	add	sp, sp, #44	; 0x2c
   14dec:	ldrd	r4, [sp]
   14df0:	ldrd	r6, [sp, #8]
   14df4:	ldrd	r8, [sp, #16]
   14df8:	ldrd	sl, [sp, #24]
   14dfc:	add	sp, sp, #32
   14e00:	pop	{pc}		; (ldr pc, [sp], #4)
   14e04:	mov	r0, #8
   14e08:	mvn	r3, #-2147483648	; 0x80000000
   14e0c:	add	r1, sp, #36	; 0x24
   14e10:	str	r0, [sp]
   14e14:	mov	r0, #0
   14e18:	bl	16dfc <__assert_fail@plt+0x5efc>
   14e1c:	ldrd	r2, [r4, #8]
   14e20:	mov	r5, r0
   14e24:	str	r0, [r4]
   14e28:	strd	r2, [r0]
   14e2c:	b	14d04 <__assert_fail@plt+0x3e04>
   14e30:	andeq	sl, r2, ip, ror #4
   14e34:	strd	r4, [sp, #-20]!	; 0xffffffec
   14e38:	mov	r4, #0
   14e3c:	mov	r5, #0
   14e40:	strd	r6, [sp, #8]
   14e44:	cmp	r1, #10
   14e48:	str	lr, [sp, #16]
   14e4c:	sub	sp, sp, #100	; 0x64
   14e50:	strd	r4, [sp, #48]	; 0x30
   14e54:	beq	14e9c <__assert_fail@plt+0x3f9c>
   14e58:	mov	r3, sp
   14e5c:	strd	r4, [sp, #8]
   14e60:	str	r1, [sp, #48]	; 0x30
   14e64:	mov	r1, r2
   14e68:	mvn	r2, #0
   14e6c:	ldrd	r6, [sp, #48]	; 0x30
   14e70:	strd	r6, [sp]
   14e74:	strd	r4, [sp, #16]
   14e78:	strd	r4, [sp, #24]
   14e7c:	strd	r4, [sp, #32]
   14e80:	strd	r4, [sp, #40]	; 0x28
   14e84:	bl	144dc <__assert_fail@plt+0x35dc>
   14e88:	add	sp, sp, #100	; 0x64
   14e8c:	ldrd	r4, [sp]
   14e90:	ldrd	r6, [sp, #8]
   14e94:	add	sp, sp, #16
   14e98:	pop	{pc}		; (ldr pc, [sp], #4)
   14e9c:	bl	10ef4 <abort@plt>
   14ea0:	strd	r4, [sp, #-20]!	; 0xffffffec
   14ea4:	mov	r4, #0
   14ea8:	mov	r5, #0
   14eac:	strd	r6, [sp, #8]
   14eb0:	cmp	r1, #10
   14eb4:	str	lr, [sp, #16]
   14eb8:	sub	sp, sp, #100	; 0x64
   14ebc:	strd	r4, [sp, #48]	; 0x30
   14ec0:	beq	14f0c <__assert_fail@plt+0x400c>
   14ec4:	mov	ip, r2
   14ec8:	mov	r2, r3
   14ecc:	strd	r4, [sp, #8]
   14ed0:	str	r1, [sp, #48]	; 0x30
   14ed4:	mov	r3, sp
   14ed8:	mov	r1, ip
   14edc:	ldrd	r6, [sp, #48]	; 0x30
   14ee0:	strd	r6, [sp]
   14ee4:	strd	r4, [sp, #16]
   14ee8:	strd	r4, [sp, #24]
   14eec:	strd	r4, [sp, #32]
   14ef0:	strd	r4, [sp, #40]	; 0x28
   14ef4:	bl	144dc <__assert_fail@plt+0x35dc>
   14ef8:	add	sp, sp, #100	; 0x64
   14efc:	ldrd	r4, [sp]
   14f00:	ldrd	r6, [sp, #8]
   14f04:	add	sp, sp, #16
   14f08:	pop	{pc}		; (ldr pc, [sp], #4)
   14f0c:	bl	10ef4 <abort@plt>
   14f10:	mov	r2, #0
   14f14:	mov	r3, #0
   14f18:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14f1c:	strd	r6, [sp, #8]
   14f20:	cmp	r0, #10
   14f24:	strd	r8, [sp, #16]
   14f28:	strd	sl, [sp, #24]
   14f2c:	str	lr, [sp, #32]
   14f30:	sub	sp, sp, #124	; 0x7c
   14f34:	strd	r2, [sp, #72]	; 0x48
   14f38:	strd	r2, [sp, #80]	; 0x50
   14f3c:	strd	r2, [sp, #88]	; 0x58
   14f40:	strd	r2, [sp, #96]	; 0x60
   14f44:	strd	r2, [sp, #104]	; 0x68
   14f48:	strd	r2, [sp, #112]	; 0x70
   14f4c:	beq	150f0 <__assert_fail@plt+0x41f0>
   14f50:	mov	r6, r1
   14f54:	movw	r4, #41200	; 0xa0f0
   14f58:	movt	r4, #2
   14f5c:	str	r0, [sp, #72]	; 0x48
   14f60:	ldrd	r0, [sp, #72]	; 0x48
   14f64:	strd	r0, [sp, #24]
   14f68:	strd	r2, [sp, #32]
   14f6c:	strd	r2, [sp, #40]	; 0x28
   14f70:	strd	r2, [sp, #48]	; 0x30
   14f74:	strd	r2, [sp, #56]	; 0x38
   14f78:	strd	r2, [sp, #64]	; 0x40
   14f7c:	bl	10e1c <__errno_location@plt>
   14f80:	mov	r8, r0
   14f84:	ldr	r5, [r4]
   14f88:	ldr	r2, [r4, #4]
   14f8c:	ldr	r9, [r0]
   14f90:	cmp	r2, #0
   14f94:	bgt	14ff0 <__assert_fail@plt+0x40f0>
   14f98:	add	r3, r4, #8
   14f9c:	str	r2, [sp, #72]	; 0x48
   14fa0:	rsb	r2, r2, #1
   14fa4:	cmp	r5, r3
   14fa8:	beq	150c4 <__assert_fail@plt+0x41c4>
   14fac:	mov	r3, #8
   14fb0:	mov	r0, r5
   14fb4:	add	r1, sp, #72	; 0x48
   14fb8:	str	r3, [sp]
   14fbc:	mvn	r3, #-2147483648	; 0x80000000
   14fc0:	bl	16dfc <__assert_fail@plt+0x5efc>
   14fc4:	mov	r5, r0
   14fc8:	str	r0, [r4]
   14fcc:	ldr	r0, [r4, #4]
   14fd0:	mov	r1, #0
   14fd4:	ldr	r2, [sp, #72]	; 0x48
   14fd8:	sub	r2, r2, r0
   14fdc:	add	r0, r5, r0, lsl #3
   14fe0:	lsl	r2, r2, #3
   14fe4:	bl	10e34 <memset@plt>
   14fe8:	ldr	r3, [sp, #72]	; 0x48
   14fec:	str	r3, [r4, #4]
   14ff0:	ldr	sl, [r5]
   14ff4:	add	r0, sp, #32
   14ff8:	mvn	r3, #0
   14ffc:	mov	r2, r6
   15000:	ldr	r7, [sp, #28]
   15004:	ldr	r4, [r5, #4]
   15008:	mov	r1, sl
   1500c:	str	r0, [sp, #8]
   15010:	ldr	lr, [sp, #24]
   15014:	orr	r7, r7, #1
   15018:	ldr	ip, [sp, #64]	; 0x40
   1501c:	mov	r0, r4
   15020:	ldr	fp, [sp, #68]	; 0x44
   15024:	str	lr, [sp]
   15028:	str	r7, [sp, #4]
   1502c:	str	ip, [sp, #12]
   15030:	str	fp, [sp, #16]
   15034:	bl	12af0 <__assert_fail@plt+0x1bf0>
   15038:	cmp	sl, r0
   1503c:	bhi	150a0 <__assert_fail@plt+0x41a0>
   15040:	add	sl, r0, #1
   15044:	movw	r3, #41316	; 0xa164
   15048:	movt	r3, #2
   1504c:	cmp	r4, r3
   15050:	str	sl, [r5]
   15054:	beq	15060 <__assert_fail@plt+0x4160>
   15058:	mov	r0, r4
   1505c:	bl	1279c <__assert_fail@plt+0x189c>
   15060:	mov	r0, sl
   15064:	bl	16b58 <__assert_fail@plt+0x5c58>
   15068:	ldr	r3, [sp, #24]
   1506c:	mov	r2, r6
   15070:	mov	r1, sl
   15074:	mov	r4, r0
   15078:	ldr	lr, [sp, #64]	; 0x40
   1507c:	ldr	ip, [sp, #68]	; 0x44
   15080:	str	r0, [r5, #4]
   15084:	add	r5, sp, #32
   15088:	stm	sp, {r3, r7}
   1508c:	mvn	r3, #0
   15090:	str	r5, [sp, #8]
   15094:	str	lr, [sp, #12]
   15098:	str	ip, [sp, #16]
   1509c:	bl	12af0 <__assert_fail@plt+0x1bf0>
   150a0:	mov	r0, r4
   150a4:	str	r9, [r8]
   150a8:	add	sp, sp, #124	; 0x7c
   150ac:	ldrd	r4, [sp]
   150b0:	ldrd	r6, [sp, #8]
   150b4:	ldrd	r8, [sp, #16]
   150b8:	ldrd	sl, [sp, #24]
   150bc:	add	sp, sp, #32
   150c0:	pop	{pc}		; (ldr pc, [sp], #4)
   150c4:	mov	r0, #8
   150c8:	mvn	r3, #-2147483648	; 0x80000000
   150cc:	add	r1, sp, #72	; 0x48
   150d0:	str	r0, [sp]
   150d4:	mov	r0, #0
   150d8:	bl	16dfc <__assert_fail@plt+0x5efc>
   150dc:	ldrd	r2, [r4, #8]
   150e0:	mov	r5, r0
   150e4:	str	r0, [r4]
   150e8:	strd	r2, [r0]
   150ec:	b	14fcc <__assert_fail@plt+0x40cc>
   150f0:	bl	10ef4 <abort@plt>
   150f4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   150f8:	cmp	r0, #10
   150fc:	strd	r6, [sp, #8]
   15100:	mov	r6, #0
   15104:	mov	r7, #0
   15108:	strd	r8, [sp, #16]
   1510c:	strd	sl, [sp, #24]
   15110:	str	lr, [sp, #32]
   15114:	sub	sp, sp, #124	; 0x7c
   15118:	strd	r6, [sp, #72]	; 0x48
   1511c:	strd	r6, [sp, #80]	; 0x50
   15120:	strd	r6, [sp, #88]	; 0x58
   15124:	strd	r6, [sp, #96]	; 0x60
   15128:	strd	r6, [sp, #104]	; 0x68
   1512c:	strd	r6, [sp, #112]	; 0x70
   15130:	beq	152dc <__assert_fail@plt+0x43dc>
   15134:	mov	sl, r2
   15138:	movw	r5, #41200	; 0xa0f0
   1513c:	movt	r5, #2
   15140:	str	r0, [sp, #72]	; 0x48
   15144:	mov	r9, r1
   15148:	ldrd	r2, [sp, #72]	; 0x48
   1514c:	strd	r2, [sp, #24]
   15150:	strd	r6, [sp, #32]
   15154:	strd	r6, [sp, #40]	; 0x28
   15158:	strd	r6, [sp, #48]	; 0x30
   1515c:	strd	r6, [sp, #56]	; 0x38
   15160:	strd	r6, [sp, #64]	; 0x40
   15164:	bl	10e1c <__errno_location@plt>
   15168:	mov	r7, r0
   1516c:	ldr	r4, [r5]
   15170:	ldr	r2, [r5, #4]
   15174:	ldr	fp, [r0]
   15178:	cmp	r2, #0
   1517c:	bgt	151d8 <__assert_fail@plt+0x42d8>
   15180:	add	r3, r5, #8
   15184:	str	r2, [sp, #72]	; 0x48
   15188:	rsb	r2, r2, #1
   1518c:	cmp	r4, r3
   15190:	beq	152b0 <__assert_fail@plt+0x43b0>
   15194:	mov	r3, #8
   15198:	mov	r0, r4
   1519c:	add	r1, sp, #72	; 0x48
   151a0:	str	r3, [sp]
   151a4:	mvn	r3, #-2147483648	; 0x80000000
   151a8:	bl	16dfc <__assert_fail@plt+0x5efc>
   151ac:	mov	r4, r0
   151b0:	str	r0, [r5]
   151b4:	ldr	r0, [r5, #4]
   151b8:	mov	r1, #0
   151bc:	ldr	r2, [sp, #72]	; 0x48
   151c0:	sub	r2, r2, r0
   151c4:	add	r0, r4, r0, lsl #3
   151c8:	lsl	r2, r2, #3
   151cc:	bl	10e34 <memset@plt>
   151d0:	ldr	r3, [sp, #72]	; 0x48
   151d4:	str	r3, [r5, #4]
   151d8:	ldr	ip, [sp, #24]
   151dc:	add	r0, sp, #32
   151e0:	mov	r3, sl
   151e4:	mov	r2, r9
   151e8:	ldr	r6, [sp, #28]
   151ec:	ldr	r8, [r4]
   151f0:	ldr	r5, [r4, #4]
   151f4:	str	ip, [sp]
   151f8:	orr	r6, r6, #1
   151fc:	ldr	ip, [sp, #64]	; 0x40
   15200:	mov	r1, r8
   15204:	str	r6, [sp, #4]
   15208:	ldr	lr, [sp, #68]	; 0x44
   1520c:	str	r0, [sp, #8]
   15210:	mov	r0, r5
   15214:	str	ip, [sp, #12]
   15218:	str	lr, [sp, #16]
   1521c:	bl	12af0 <__assert_fail@plt+0x1bf0>
   15220:	cmp	r8, r0
   15224:	bhi	1528c <__assert_fail@plt+0x438c>
   15228:	add	r8, r0, #1
   1522c:	movw	r3, #41316	; 0xa164
   15230:	movt	r3, #2
   15234:	cmp	r5, r3
   15238:	str	r8, [r4]
   1523c:	beq	15248 <__assert_fail@plt+0x4348>
   15240:	mov	r0, r5
   15244:	bl	1279c <__assert_fail@plt+0x189c>
   15248:	mov	r0, r8
   1524c:	bl	16b58 <__assert_fail@plt+0x5c58>
   15250:	ldr	lr, [sp, #24]
   15254:	mov	r1, r8
   15258:	mov	r3, sl
   1525c:	mov	r2, r9
   15260:	mov	r5, r0
   15264:	ldr	r8, [sp, #64]	; 0x40
   15268:	ldr	ip, [sp, #68]	; 0x44
   1526c:	str	r0, [r4, #4]
   15270:	str	lr, [sp]
   15274:	add	lr, sp, #32
   15278:	str	r6, [sp, #4]
   1527c:	str	lr, [sp, #8]
   15280:	str	r8, [sp, #12]
   15284:	str	ip, [sp, #16]
   15288:	bl	12af0 <__assert_fail@plt+0x1bf0>
   1528c:	mov	r0, r5
   15290:	str	fp, [r7]
   15294:	add	sp, sp, #124	; 0x7c
   15298:	ldrd	r4, [sp]
   1529c:	ldrd	r6, [sp, #8]
   152a0:	ldrd	r8, [sp, #16]
   152a4:	ldrd	sl, [sp, #24]
   152a8:	add	sp, sp, #32
   152ac:	pop	{pc}		; (ldr pc, [sp], #4)
   152b0:	mov	r0, #8
   152b4:	mvn	r3, #-2147483648	; 0x80000000
   152b8:	add	r1, sp, #72	; 0x48
   152bc:	str	r0, [sp]
   152c0:	mov	r0, #0
   152c4:	bl	16dfc <__assert_fail@plt+0x5efc>
   152c8:	ldrd	r2, [r5, #8]
   152cc:	mov	r4, r0
   152d0:	str	r0, [r5]
   152d4:	strd	r2, [r0]
   152d8:	b	151b4 <__assert_fail@plt+0x42b4>
   152dc:	bl	10ef4 <abort@plt>
   152e0:	ldr	r3, [pc, #492]	; 154d4 <__assert_fail@plt+0x45d4>
   152e4:	lsr	ip, r2, #5
   152e8:	and	r2, r2, #31
   152ec:	strd	r4, [sp, #-36]!	; 0xffffffdc
   152f0:	movw	r5, #41200	; 0xa0f0
   152f4:	movt	r5, #2
   152f8:	strd	r6, [sp, #8]
   152fc:	strd	r8, [sp, #16]
   15300:	strd	sl, [sp, #24]
   15304:	mov	sl, r0
   15308:	mov	fp, r1
   1530c:	ldrd	r0, [r3]
   15310:	str	lr, [sp, #32]
   15314:	sub	sp, sp, #92	; 0x5c
   15318:	ldrd	r8, [r3, #8]
   1531c:	add	r6, sp, #48	; 0x30
   15320:	strd	r0, [sp, #40]	; 0x28
   15324:	ldrd	r0, [r3, #16]
   15328:	strd	r8, [sp, #48]	; 0x30
   1532c:	ldrd	r8, [r3, #24]
   15330:	strd	r0, [sp, #56]	; 0x38
   15334:	ldrd	r0, [r3, #32]
   15338:	strd	r8, [sp, #64]	; 0x40
   1533c:	ldrd	r8, [r3, #40]	; 0x28
   15340:	strd	r0, [sp, #72]	; 0x48
   15344:	strd	r8, [sp, #80]	; 0x50
   15348:	ldr	r3, [r6, ip, lsl #2]
   1534c:	mvn	r1, r3, lsr r2
   15350:	and	r1, r1, #1
   15354:	eor	r2, r3, r1, lsl r2
   15358:	str	r2, [r6, ip, lsl #2]
   1535c:	bl	10e1c <__errno_location@plt>
   15360:	ldr	r3, [r0]
   15364:	mov	r8, r0
   15368:	ldr	r2, [r5, #4]
   1536c:	ldr	r4, [r5]
   15370:	str	r3, [sp, #28]
   15374:	cmp	r2, #0
   15378:	bgt	153d4 <__assert_fail@plt+0x44d4>
   1537c:	add	r3, r5, #8
   15380:	str	r2, [sp, #36]	; 0x24
   15384:	rsb	r2, r2, #1
   15388:	cmp	r4, r3
   1538c:	beq	154a8 <__assert_fail@plt+0x45a8>
   15390:	mov	r1, #8
   15394:	mov	r0, r4
   15398:	mvn	r3, #-2147483648	; 0x80000000
   1539c:	str	r1, [sp]
   153a0:	add	r1, sp, #36	; 0x24
   153a4:	bl	16dfc <__assert_fail@plt+0x5efc>
   153a8:	mov	r4, r0
   153ac:	str	r0, [r5]
   153b0:	ldr	r0, [r5, #4]
   153b4:	mov	r1, #0
   153b8:	ldr	r2, [sp, #36]	; 0x24
   153bc:	sub	r2, r2, r0
   153c0:	add	r0, r4, r0, lsl #3
   153c4:	lsl	r2, r2, #3
   153c8:	bl	10e34 <memset@plt>
   153cc:	ldr	r3, [sp, #36]	; 0x24
   153d0:	str	r3, [r5, #4]
   153d4:	ldr	ip, [sp, #40]	; 0x28
   153d8:	mov	r3, fp
   153dc:	mov	r2, sl
   153e0:	ldr	r7, [sp, #44]	; 0x2c
   153e4:	ldr	r9, [r4]
   153e8:	ldr	r5, [r4, #4]
   153ec:	str	ip, [sp]
   153f0:	orr	r7, r7, #1
   153f4:	ldr	ip, [sp, #80]	; 0x50
   153f8:	mov	r1, r9
   153fc:	str	r7, [sp, #4]
   15400:	ldr	lr, [sp, #84]	; 0x54
   15404:	mov	r0, r5
   15408:	str	r6, [sp, #8]
   1540c:	str	ip, [sp, #12]
   15410:	str	lr, [sp, #16]
   15414:	bl	12af0 <__assert_fail@plt+0x1bf0>
   15418:	cmp	r9, r0
   1541c:	bhi	15480 <__assert_fail@plt+0x4580>
   15420:	add	r9, r0, #1
   15424:	movw	r3, #41316	; 0xa164
   15428:	movt	r3, #2
   1542c:	cmp	r5, r3
   15430:	str	r9, [r4]
   15434:	beq	15440 <__assert_fail@plt+0x4540>
   15438:	mov	r0, r5
   1543c:	bl	1279c <__assert_fail@plt+0x189c>
   15440:	mov	r0, r9
   15444:	bl	16b58 <__assert_fail@plt+0x5c58>
   15448:	mov	r1, r9
   1544c:	ldr	ip, [sp, #40]	; 0x28
   15450:	mov	r3, fp
   15454:	mov	r2, sl
   15458:	mov	r5, r0
   1545c:	ldr	r9, [sp, #80]	; 0x50
   15460:	ldr	lr, [sp, #84]	; 0x54
   15464:	str	r0, [r4, #4]
   15468:	str	ip, [sp]
   1546c:	str	r7, [sp, #4]
   15470:	str	r6, [sp, #8]
   15474:	str	r9, [sp, #12]
   15478:	str	lr, [sp, #16]
   1547c:	bl	12af0 <__assert_fail@plt+0x1bf0>
   15480:	ldr	r3, [sp, #28]
   15484:	mov	r0, r5
   15488:	str	r3, [r8]
   1548c:	add	sp, sp, #92	; 0x5c
   15490:	ldrd	r4, [sp]
   15494:	ldrd	r6, [sp, #8]
   15498:	ldrd	r8, [sp, #16]
   1549c:	ldrd	sl, [sp, #24]
   154a0:	add	sp, sp, #32
   154a4:	pop	{pc}		; (ldr pc, [sp], #4)
   154a8:	mov	r0, #8
   154ac:	mvn	r3, #-2147483648	; 0x80000000
   154b0:	add	r1, sp, #36	; 0x24
   154b4:	str	r0, [sp]
   154b8:	mov	r0, #0
   154bc:	bl	16dfc <__assert_fail@plt+0x5efc>
   154c0:	ldrd	r2, [r5, #8]
   154c4:	mov	r4, r0
   154c8:	str	r0, [r5]
   154cc:	strd	r2, [r0]
   154d0:	b	153b0 <__assert_fail@plt+0x44b0>
   154d4:	andeq	sl, r2, r4, ror #4
   154d8:	ldr	ip, [pc, #476]	; 156bc <__assert_fail@plt+0x47bc>
   154dc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   154e0:	movw	r4, #41200	; 0xa0f0
   154e4:	movt	r4, #2
   154e8:	ldrd	r2, [ip, #8]
   154ec:	strd	r6, [sp, #8]
   154f0:	lsr	r7, r1, #5
   154f4:	mov	r6, r0
   154f8:	strd	r8, [sp, #16]
   154fc:	str	lr, [sp, #32]
   15500:	and	lr, r1, #31
   15504:	ldrd	r0, [ip]
   15508:	strd	sl, [sp, #24]
   1550c:	sub	sp, sp, #84	; 0x54
   15510:	add	r5, sp, #40	; 0x28
   15514:	strd	r0, [sp, #32]
   15518:	strd	r2, [sp, #40]	; 0x28
   1551c:	ldrd	r0, [ip, #16]
   15520:	ldrd	r2, [ip, #24]
   15524:	strd	r0, [sp, #48]	; 0x30
   15528:	ldrd	r0, [ip, #32]
   1552c:	strd	r2, [sp, #56]	; 0x38
   15530:	ldrd	r2, [ip, #40]	; 0x28
   15534:	strd	r0, [sp, #64]	; 0x40
   15538:	strd	r2, [sp, #72]	; 0x48
   1553c:	ldr	r1, [r5, r7, lsl #2]
   15540:	mvn	r3, r1, lsr lr
   15544:	and	r3, r3, #1
   15548:	eor	r1, r1, r3, lsl lr
   1554c:	str	r1, [r5, r7, lsl #2]
   15550:	bl	10e1c <__errno_location@plt>
   15554:	mov	r9, r0
   15558:	ldr	sl, [r0]
   1555c:	ldr	r2, [r4, #4]
   15560:	ldr	r7, [r4]
   15564:	cmp	r2, #0
   15568:	bgt	155c4 <__assert_fail@plt+0x46c4>
   1556c:	add	r3, r4, #8
   15570:	str	r2, [sp, #28]
   15574:	rsb	r2, r2, #1
   15578:	cmp	r7, r3
   1557c:	beq	15690 <__assert_fail@plt+0x4790>
   15580:	mov	r1, #8
   15584:	mov	r0, r7
   15588:	mvn	r3, #-2147483648	; 0x80000000
   1558c:	str	r1, [sp]
   15590:	add	r1, sp, #28
   15594:	bl	16dfc <__assert_fail@plt+0x5efc>
   15598:	mov	r7, r0
   1559c:	str	r0, [r4]
   155a0:	ldr	r0, [r4, #4]
   155a4:	mov	r1, #0
   155a8:	ldr	r2, [sp, #28]
   155ac:	sub	r2, r2, r0
   155b0:	add	r0, r7, r0, lsl #3
   155b4:	lsl	r2, r2, #3
   155b8:	bl	10e34 <memset@plt>
   155bc:	ldr	r3, [sp, #28]
   155c0:	str	r3, [r4, #4]
   155c4:	ldr	ip, [sp, #32]
   155c8:	mvn	r3, #0
   155cc:	mov	r2, r6
   155d0:	ldr	r8, [sp, #36]	; 0x24
   155d4:	ldr	fp, [r7]
   155d8:	ldr	r4, [r7, #4]
   155dc:	str	ip, [sp]
   155e0:	orr	r8, r8, #1
   155e4:	ldr	ip, [sp, #72]	; 0x48
   155e8:	mov	r1, fp
   155ec:	str	r8, [sp, #4]
   155f0:	ldr	lr, [sp, #76]	; 0x4c
   155f4:	mov	r0, r4
   155f8:	str	r5, [sp, #8]
   155fc:	str	ip, [sp, #12]
   15600:	str	lr, [sp, #16]
   15604:	bl	12af0 <__assert_fail@plt+0x1bf0>
   15608:	cmp	fp, r0
   1560c:	bhi	1566c <__assert_fail@plt+0x476c>
   15610:	add	fp, r0, #1
   15614:	movw	r3, #41316	; 0xa164
   15618:	movt	r3, #2
   1561c:	cmp	r4, r3
   15620:	str	fp, [r7]
   15624:	beq	15630 <__assert_fail@plt+0x4730>
   15628:	mov	r0, r4
   1562c:	bl	1279c <__assert_fail@plt+0x189c>
   15630:	mov	r0, fp
   15634:	bl	16b58 <__assert_fail@plt+0x5c58>
   15638:	ldr	r3, [sp, #32]
   1563c:	mov	r2, r6
   15640:	mov	r1, fp
   15644:	mov	r4, r0
   15648:	ldr	lr, [sp, #72]	; 0x48
   1564c:	ldr	ip, [sp, #76]	; 0x4c
   15650:	str	r0, [r7, #4]
   15654:	stm	sp, {r3, r8}
   15658:	mvn	r3, #0
   1565c:	str	r5, [sp, #8]
   15660:	str	lr, [sp, #12]
   15664:	str	ip, [sp, #16]
   15668:	bl	12af0 <__assert_fail@plt+0x1bf0>
   1566c:	mov	r0, r4
   15670:	str	sl, [r9]
   15674:	add	sp, sp, #84	; 0x54
   15678:	ldrd	r4, [sp]
   1567c:	ldrd	r6, [sp, #8]
   15680:	ldrd	r8, [sp, #16]
   15684:	ldrd	sl, [sp, #24]
   15688:	add	sp, sp, #32
   1568c:	pop	{pc}		; (ldr pc, [sp], #4)
   15690:	mov	r0, #8
   15694:	mvn	r3, #-2147483648	; 0x80000000
   15698:	add	r1, sp, #28
   1569c:	str	r0, [sp]
   156a0:	mov	r0, #0
   156a4:	bl	16dfc <__assert_fail@plt+0x5efc>
   156a8:	ldrd	r2, [r4, #8]
   156ac:	mov	r7, r0
   156b0:	str	r0, [r4]
   156b4:	strd	r2, [r0]
   156b8:	b	155a0 <__assert_fail@plt+0x46a0>
   156bc:	andeq	sl, r2, r4, ror #4
   156c0:	ldr	ip, [pc, #472]	; 158a0 <__assert_fail@plt+0x49a0>
   156c4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   156c8:	mov	r5, r0
   156cc:	movw	r4, #41200	; 0xa0f0
   156d0:	movt	r4, #2
   156d4:	ldrd	r2, [ip]
   156d8:	ldrd	r0, [ip, #8]
   156dc:	strd	r6, [sp, #8]
   156e0:	strd	r8, [sp, #16]
   156e4:	strd	sl, [sp, #24]
   156e8:	str	lr, [sp, #32]
   156ec:	sub	sp, sp, #84	; 0x54
   156f0:	strd	r2, [sp, #32]
   156f4:	strd	r0, [sp, #40]	; 0x28
   156f8:	ldr	r6, [sp, #44]	; 0x2c
   156fc:	ldrd	r2, [ip, #16]
   15700:	ldrd	r0, [ip, #24]
   15704:	mvn	lr, r6
   15708:	and	lr, lr, #67108864	; 0x4000000
   1570c:	eor	lr, lr, r6
   15710:	ldrd	r6, [ip, #40]	; 0x28
   15714:	strd	r2, [sp, #48]	; 0x30
   15718:	ldrd	r2, [ip, #32]
   1571c:	str	lr, [sp, #44]	; 0x2c
   15720:	strd	r0, [sp, #56]	; 0x38
   15724:	strd	r2, [sp, #64]	; 0x40
   15728:	strd	r6, [sp, #72]	; 0x48
   1572c:	bl	10e1c <__errno_location@plt>
   15730:	mov	r8, r0
   15734:	ldr	r9, [r0]
   15738:	ldr	r2, [r4, #4]
   1573c:	ldr	r6, [r4]
   15740:	cmp	r2, #0
   15744:	bgt	157a0 <__assert_fail@plt+0x48a0>
   15748:	add	r3, r4, #8
   1574c:	str	r2, [sp, #28]
   15750:	rsb	r2, r2, #1
   15754:	cmp	r6, r3
   15758:	beq	15874 <__assert_fail@plt+0x4974>
   1575c:	mov	r1, #8
   15760:	mov	r0, r6
   15764:	mvn	r3, #-2147483648	; 0x80000000
   15768:	str	r1, [sp]
   1576c:	add	r1, sp, #28
   15770:	bl	16dfc <__assert_fail@plt+0x5efc>
   15774:	mov	r6, r0
   15778:	str	r0, [r4]
   1577c:	ldr	r0, [r4, #4]
   15780:	mov	r1, #0
   15784:	ldr	r2, [sp, #28]
   15788:	sub	r2, r2, r0
   1578c:	add	r0, r6, r0, lsl #3
   15790:	lsl	r2, r2, #3
   15794:	bl	10e34 <memset@plt>
   15798:	ldr	r3, [sp, #28]
   1579c:	str	r3, [r4, #4]
   157a0:	ldr	sl, [r6]
   157a4:	add	r0, sp, #40	; 0x28
   157a8:	mvn	r3, #0
   157ac:	mov	r2, r5
   157b0:	ldr	r7, [sp, #36]	; 0x24
   157b4:	ldr	r4, [r6, #4]
   157b8:	mov	r1, sl
   157bc:	str	r0, [sp, #8]
   157c0:	ldr	lr, [sp, #32]
   157c4:	orr	r7, r7, #1
   157c8:	ldr	ip, [sp, #72]	; 0x48
   157cc:	mov	r0, r4
   157d0:	ldr	fp, [sp, #76]	; 0x4c
   157d4:	str	lr, [sp]
   157d8:	str	r7, [sp, #4]
   157dc:	str	ip, [sp, #12]
   157e0:	str	fp, [sp, #16]
   157e4:	bl	12af0 <__assert_fail@plt+0x1bf0>
   157e8:	cmp	sl, r0
   157ec:	bhi	15850 <__assert_fail@plt+0x4950>
   157f0:	add	sl, r0, #1
   157f4:	movw	r3, #41316	; 0xa164
   157f8:	movt	r3, #2
   157fc:	cmp	r4, r3
   15800:	str	sl, [r6]
   15804:	beq	15810 <__assert_fail@plt+0x4910>
   15808:	mov	r0, r4
   1580c:	bl	1279c <__assert_fail@plt+0x189c>
   15810:	mov	r0, sl
   15814:	bl	16b58 <__assert_fail@plt+0x5c58>
   15818:	ldr	r3, [sp, #32]
   1581c:	mov	r2, r5
   15820:	add	r5, sp, #40	; 0x28
   15824:	mov	r1, sl
   15828:	mov	r4, r0
   1582c:	ldr	lr, [sp, #72]	; 0x48
   15830:	ldr	ip, [sp, #76]	; 0x4c
   15834:	str	r0, [r6, #4]
   15838:	stm	sp, {r3, r7}
   1583c:	mvn	r3, #0
   15840:	str	r5, [sp, #8]
   15844:	str	lr, [sp, #12]
   15848:	str	ip, [sp, #16]
   1584c:	bl	12af0 <__assert_fail@plt+0x1bf0>
   15850:	mov	r0, r4
   15854:	str	r9, [r8]
   15858:	add	sp, sp, #84	; 0x54
   1585c:	ldrd	r4, [sp]
   15860:	ldrd	r6, [sp, #8]
   15864:	ldrd	r8, [sp, #16]
   15868:	ldrd	sl, [sp, #24]
   1586c:	add	sp, sp, #32
   15870:	pop	{pc}		; (ldr pc, [sp], #4)
   15874:	mov	r0, #8
   15878:	mvn	r3, #-2147483648	; 0x80000000
   1587c:	add	r1, sp, #28
   15880:	str	r0, [sp]
   15884:	mov	r0, #0
   15888:	bl	16dfc <__assert_fail@plt+0x5efc>
   1588c:	ldrd	r2, [r4, #8]
   15890:	mov	r6, r0
   15894:	str	r0, [r4]
   15898:	strd	r2, [r0]
   1589c:	b	1577c <__assert_fail@plt+0x487c>
   158a0:	andeq	sl, r2, r4, ror #4
   158a4:	ldr	ip, [pc, #480]	; 15a8c <__assert_fail@plt+0x4b8c>
   158a8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   158ac:	mov	r5, r0
   158b0:	movw	r4, #41200	; 0xa0f0
   158b4:	movt	r4, #2
   158b8:	ldrd	r2, [ip]
   158bc:	strd	r6, [sp, #8]
   158c0:	mov	r6, r1
   158c4:	ldrd	r0, [ip, #8]
   158c8:	strd	r8, [sp, #16]
   158cc:	strd	sl, [sp, #24]
   158d0:	str	lr, [sp, #32]
   158d4:	sub	sp, sp, #84	; 0x54
   158d8:	ldrd	r8, [ip, #40]	; 0x28
   158dc:	strd	r2, [sp, #32]
   158e0:	strd	r0, [sp, #40]	; 0x28
   158e4:	ldrd	r2, [ip, #16]
   158e8:	ldr	r7, [sp, #44]	; 0x2c
   158ec:	ldrd	r0, [ip, #24]
   158f0:	strd	r2, [sp, #48]	; 0x30
   158f4:	ldrd	r2, [ip, #32]
   158f8:	mvn	lr, r7
   158fc:	and	lr, lr, #67108864	; 0x4000000
   15900:	eor	lr, lr, r7
   15904:	str	lr, [sp, #44]	; 0x2c
   15908:	strd	r0, [sp, #56]	; 0x38
   1590c:	strd	r2, [sp, #64]	; 0x40
   15910:	strd	r8, [sp, #72]	; 0x48
   15914:	bl	10e1c <__errno_location@plt>
   15918:	mov	r9, r0
   1591c:	ldr	sl, [r0]
   15920:	ldr	r2, [r4, #4]
   15924:	ldr	r7, [r4]
   15928:	cmp	r2, #0
   1592c:	bgt	15988 <__assert_fail@plt+0x4a88>
   15930:	add	r3, r4, #8
   15934:	str	r2, [sp, #28]
   15938:	rsb	r2, r2, #1
   1593c:	cmp	r7, r3
   15940:	beq	15a60 <__assert_fail@plt+0x4b60>
   15944:	mov	r1, #8
   15948:	mov	r0, r7
   1594c:	mvn	r3, #-2147483648	; 0x80000000
   15950:	str	r1, [sp]
   15954:	add	r1, sp, #28
   15958:	bl	16dfc <__assert_fail@plt+0x5efc>
   1595c:	mov	r7, r0
   15960:	str	r0, [r4]
   15964:	ldr	r0, [r4, #4]
   15968:	mov	r1, #0
   1596c:	ldr	r2, [sp, #28]
   15970:	sub	r2, r2, r0
   15974:	add	r0, r7, r0, lsl #3
   15978:	lsl	r2, r2, #3
   1597c:	bl	10e34 <memset@plt>
   15980:	ldr	r3, [sp, #28]
   15984:	str	r3, [r4, #4]
   15988:	ldr	ip, [sp, #32]
   1598c:	add	r0, sp, #40	; 0x28
   15990:	mov	r3, r6
   15994:	mov	r2, r5
   15998:	ldr	r8, [sp, #36]	; 0x24
   1599c:	ldr	fp, [r7]
   159a0:	ldr	r4, [r7, #4]
   159a4:	str	ip, [sp]
   159a8:	orr	r8, r8, #1
   159ac:	ldr	ip, [sp, #72]	; 0x48
   159b0:	mov	r1, fp
   159b4:	str	r8, [sp, #4]
   159b8:	ldr	lr, [sp, #76]	; 0x4c
   159bc:	str	r0, [sp, #8]
   159c0:	mov	r0, r4
   159c4:	str	ip, [sp, #12]
   159c8:	str	lr, [sp, #16]
   159cc:	bl	12af0 <__assert_fail@plt+0x1bf0>
   159d0:	cmp	fp, r0
   159d4:	bhi	15a3c <__assert_fail@plt+0x4b3c>
   159d8:	add	fp, r0, #1
   159dc:	movw	r3, #41316	; 0xa164
   159e0:	movt	r3, #2
   159e4:	cmp	r4, r3
   159e8:	str	fp, [r7]
   159ec:	beq	159f8 <__assert_fail@plt+0x4af8>
   159f0:	mov	r0, r4
   159f4:	bl	1279c <__assert_fail@plt+0x189c>
   159f8:	mov	r0, fp
   159fc:	bl	16b58 <__assert_fail@plt+0x5c58>
   15a00:	ldr	lr, [sp, #32]
   15a04:	mov	r2, r5
   15a08:	mov	r3, r6
   15a0c:	mov	r1, fp
   15a10:	mov	r4, r0
   15a14:	ldr	r5, [sp, #72]	; 0x48
   15a18:	ldr	ip, [sp, #76]	; 0x4c
   15a1c:	str	r0, [r7, #4]
   15a20:	str	lr, [sp]
   15a24:	add	lr, sp, #40	; 0x28
   15a28:	str	r8, [sp, #4]
   15a2c:	str	lr, [sp, #8]
   15a30:	str	r5, [sp, #12]
   15a34:	str	ip, [sp, #16]
   15a38:	bl	12af0 <__assert_fail@plt+0x1bf0>
   15a3c:	mov	r0, r4
   15a40:	str	sl, [r9]
   15a44:	add	sp, sp, #84	; 0x54
   15a48:	ldrd	r4, [sp]
   15a4c:	ldrd	r6, [sp, #8]
   15a50:	ldrd	r8, [sp, #16]
   15a54:	ldrd	sl, [sp, #24]
   15a58:	add	sp, sp, #32
   15a5c:	pop	{pc}		; (ldr pc, [sp], #4)
   15a60:	mov	r0, #8
   15a64:	mvn	r3, #-2147483648	; 0x80000000
   15a68:	add	r1, sp, #28
   15a6c:	str	r0, [sp]
   15a70:	mov	r0, #0
   15a74:	bl	16dfc <__assert_fail@plt+0x5efc>
   15a78:	ldrd	r2, [r4, #8]
   15a7c:	mov	r7, r0
   15a80:	str	r0, [r4]
   15a84:	strd	r2, [r0]
   15a88:	b	15964 <__assert_fail@plt+0x4a64>
   15a8c:	andeq	sl, r2, r4, ror #4
   15a90:	strd	r4, [sp, #-12]!
   15a94:	mov	r4, #0
   15a98:	mov	r5, #0
   15a9c:	str	lr, [sp, #8]
   15aa0:	sub	sp, sp, #100	; 0x64
   15aa4:	cmp	r1, #10
   15aa8:	strd	r4, [sp]
   15aac:	strd	r4, [sp, #8]
   15ab0:	strd	r4, [sp, #16]
   15ab4:	strd	r4, [sp, #24]
   15ab8:	strd	r4, [sp, #32]
   15abc:	strd	r4, [sp, #40]	; 0x28
   15ac0:	beq	15af0 <__assert_fail@plt+0x4bf0>
   15ac4:	mov	ip, #67108864	; 0x4000000
   15ac8:	mov	r3, sp
   15acc:	str	r1, [sp]
   15ad0:	mov	r1, r2
   15ad4:	mvn	r2, #0
   15ad8:	str	ip, [sp, #12]
   15adc:	bl	144dc <__assert_fail@plt+0x35dc>
   15ae0:	add	sp, sp, #100	; 0x64
   15ae4:	ldrd	r4, [sp]
   15ae8:	add	sp, sp, #8
   15aec:	pop	{pc}		; (ldr pc, [sp], #4)
   15af0:	bl	10ef4 <abort@plt>
   15af4:	ldr	ip, [pc, #156]	; 15b98 <__assert_fail@plt+0x4c98>
   15af8:	cmp	r2, #0
   15afc:	cmpne	r1, #0
   15b00:	strd	r4, [sp, #-32]!	; 0xffffffe0
   15b04:	strd	r6, [sp, #8]
   15b08:	mov	r6, r2
   15b0c:	str	r8, [sp, #16]
   15b10:	mov	r8, r3
   15b14:	strd	sl, [sp, #20]
   15b18:	ldrd	r4, [ip]
   15b1c:	str	lr, [sp, #28]
   15b20:	sub	sp, sp, #48	; 0x30
   15b24:	mov	lr, #10
   15b28:	ldrd	r2, [ip, #8]
   15b2c:	ldrd	sl, [ip, #16]
   15b30:	strd	r4, [sp]
   15b34:	ldrd	r4, [ip, #32]
   15b38:	str	lr, [sp]
   15b3c:	strd	r2, [sp, #8]
   15b40:	strd	sl, [sp, #16]
   15b44:	ldrd	r2, [ip, #24]
   15b48:	ldrd	sl, [ip, #40]	; 0x28
   15b4c:	strd	r2, [sp, #24]
   15b50:	strd	r4, [sp, #32]
   15b54:	strd	sl, [sp, #40]	; 0x28
   15b58:	beq	15b94 <__assert_fail@plt+0x4c94>
   15b5c:	mov	r7, r1
   15b60:	mov	r3, sp
   15b64:	mov	r1, r8
   15b68:	mvn	r2, #0
   15b6c:	str	r7, [sp, #40]	; 0x28
   15b70:	str	r6, [sp, #44]	; 0x2c
   15b74:	bl	144dc <__assert_fail@plt+0x35dc>
   15b78:	add	sp, sp, #48	; 0x30
   15b7c:	ldrd	r4, [sp]
   15b80:	ldrd	r6, [sp, #8]
   15b84:	ldr	r8, [sp, #16]
   15b88:	ldrd	sl, [sp, #20]
   15b8c:	add	sp, sp, #28
   15b90:	pop	{pc}		; (ldr pc, [sp], #4)
   15b94:	bl	10ef4 <abort@plt>
   15b98:	andeq	sl, r2, r4, ror #4
   15b9c:	ldr	ip, [pc, #156]	; 15c40 <__assert_fail@plt+0x4d40>
   15ba0:	cmp	r2, #0
   15ba4:	cmpne	r1, #0
   15ba8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   15bac:	strd	r6, [sp, #8]
   15bb0:	mov	r6, r2
   15bb4:	str	r8, [sp, #16]
   15bb8:	mov	r8, r3
   15bbc:	strd	sl, [sp, #20]
   15bc0:	ldrd	r4, [ip]
   15bc4:	str	lr, [sp, #28]
   15bc8:	sub	sp, sp, #48	; 0x30
   15bcc:	mov	lr, #10
   15bd0:	ldrd	r2, [ip, #8]
   15bd4:	ldrd	sl, [ip, #16]
   15bd8:	strd	r4, [sp]
   15bdc:	ldrd	r4, [ip, #32]
   15be0:	str	lr, [sp]
   15be4:	strd	r2, [sp, #8]
   15be8:	strd	sl, [sp, #16]
   15bec:	ldrd	r2, [ip, #24]
   15bf0:	ldrd	sl, [ip, #40]	; 0x28
   15bf4:	strd	r2, [sp, #24]
   15bf8:	strd	r4, [sp, #32]
   15bfc:	strd	sl, [sp, #40]	; 0x28
   15c00:	beq	15c3c <__assert_fail@plt+0x4d3c>
   15c04:	ldr	r2, [sp, #80]	; 0x50
   15c08:	mov	r7, r1
   15c0c:	mov	r3, sp
   15c10:	mov	r1, r8
   15c14:	str	r7, [sp, #40]	; 0x28
   15c18:	str	r6, [sp, #44]	; 0x2c
   15c1c:	bl	144dc <__assert_fail@plt+0x35dc>
   15c20:	add	sp, sp, #48	; 0x30
   15c24:	ldrd	r4, [sp]
   15c28:	ldrd	r6, [sp, #8]
   15c2c:	ldr	r8, [sp, #16]
   15c30:	ldrd	sl, [sp, #20]
   15c34:	add	sp, sp, #28
   15c38:	pop	{pc}		; (ldr pc, [sp], #4)
   15c3c:	bl	10ef4 <abort@plt>
   15c40:	andeq	sl, r2, r4, ror #4
   15c44:	ldr	ip, [pc, #512]	; 15e4c <__assert_fail@plt+0x4f4c>
   15c48:	cmp	r0, #0
   15c4c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15c50:	ldrd	r4, [ip, #16]
   15c54:	strd	r6, [sp, #8]
   15c58:	clz	r6, r1
   15c5c:	mov	r7, r1
   15c60:	strd	r8, [sp, #16]
   15c64:	mov	r8, r0
   15c68:	lsr	r6, r6, #5
   15c6c:	strd	sl, [sp, #24]
   15c70:	mov	fp, r2
   15c74:	mov	sl, #10
   15c78:	ldrd	r2, [ip]
   15c7c:	moveq	r6, #1
   15c80:	str	lr, [sp, #32]
   15c84:	sub	sp, sp, #92	; 0x5c
   15c88:	cmp	r6, #0
   15c8c:	ldrd	r0, [ip, #8]
   15c90:	strd	r2, [sp, #40]	; 0x28
   15c94:	strd	r4, [sp, #56]	; 0x38
   15c98:	ldrd	r2, [ip, #24]
   15c9c:	strd	r0, [sp, #48]	; 0x30
   15ca0:	ldrd	r0, [ip, #32]
   15ca4:	str	sl, [sp, #40]	; 0x28
   15ca8:	ldrd	r4, [ip, #40]	; 0x28
   15cac:	strd	r2, [sp, #64]	; 0x40
   15cb0:	strd	r0, [sp, #72]	; 0x48
   15cb4:	strd	r4, [sp, #80]	; 0x50
   15cb8:	bne	15e48 <__assert_fail@plt+0x4f48>
   15cbc:	movw	r5, #41200	; 0xa0f0
   15cc0:	movt	r5, #2
   15cc4:	str	r8, [sp, #80]	; 0x50
   15cc8:	str	r7, [sp, #84]	; 0x54
   15ccc:	bl	10e1c <__errno_location@plt>
   15cd0:	ldr	r3, [r0]
   15cd4:	mov	r9, r0
   15cd8:	ldr	r2, [r5, #4]
   15cdc:	ldr	r4, [r5]
   15ce0:	str	r3, [sp, #28]
   15ce4:	cmp	r2, #0
   15ce8:	movgt	r1, sl
   15cec:	bgt	15d54 <__assert_fail@plt+0x4e54>
   15cf0:	add	r3, r5, #8
   15cf4:	str	r2, [sp, #36]	; 0x24
   15cf8:	rsb	r2, r2, #1
   15cfc:	cmp	r4, r3
   15d00:	beq	15e1c <__assert_fail@plt+0x4f1c>
   15d04:	mov	r1, #8
   15d08:	mov	r0, r4
   15d0c:	mvn	r3, #-2147483648	; 0x80000000
   15d10:	str	r1, [sp]
   15d14:	add	r1, sp, #36	; 0x24
   15d18:	bl	16dfc <__assert_fail@plt+0x5efc>
   15d1c:	mov	r4, r0
   15d20:	str	r0, [r5]
   15d24:	ldr	r0, [r5, #4]
   15d28:	mov	r1, #0
   15d2c:	ldr	r2, [sp, #36]	; 0x24
   15d30:	sub	r2, r2, r0
   15d34:	add	r0, r4, r0, lsl #3
   15d38:	lsl	r2, r2, #3
   15d3c:	bl	10e34 <memset@plt>
   15d40:	ldr	r3, [sp, #36]	; 0x24
   15d44:	ldr	r1, [sp, #40]	; 0x28
   15d48:	ldr	r8, [sp, #80]	; 0x50
   15d4c:	str	r3, [r5, #4]
   15d50:	ldr	r7, [sp, #84]	; 0x54
   15d54:	mvn	r3, #0
   15d58:	mov	r2, fp
   15d5c:	ldr	r6, [sp, #44]	; 0x2c
   15d60:	ldr	sl, [r4]
   15d64:	ldr	r5, [r4, #4]
   15d68:	orr	r6, r6, #1
   15d6c:	stm	sp, {r1, r6}
   15d70:	add	r1, sp, #48	; 0x30
   15d74:	str	r8, [sp, #12]
   15d78:	mov	r0, r5
   15d7c:	str	r1, [sp, #8]
   15d80:	mov	r1, sl
   15d84:	str	r7, [sp, #16]
   15d88:	bl	12af0 <__assert_fail@plt+0x1bf0>
   15d8c:	cmp	sl, r0
   15d90:	bhi	15df4 <__assert_fail@plt+0x4ef4>
   15d94:	add	r7, r0, #1
   15d98:	movw	r3, #41316	; 0xa164
   15d9c:	movt	r3, #2
   15da0:	cmp	r5, r3
   15da4:	str	r7, [r4]
   15da8:	beq	15db4 <__assert_fail@plt+0x4eb4>
   15dac:	mov	r0, r5
   15db0:	bl	1279c <__assert_fail@plt+0x189c>
   15db4:	mov	r0, r7
   15db8:	bl	16b58 <__assert_fail@plt+0x5c58>
   15dbc:	ldr	r3, [sp, #40]	; 0x28
   15dc0:	mov	r2, fp
   15dc4:	mov	r1, r7
   15dc8:	mov	r5, r0
   15dcc:	ldr	lr, [sp, #80]	; 0x50
   15dd0:	ldr	ip, [sp, #84]	; 0x54
   15dd4:	str	r0, [r4, #4]
   15dd8:	add	r4, sp, #48	; 0x30
   15ddc:	stm	sp, {r3, r6}
   15de0:	mvn	r3, #0
   15de4:	str	r4, [sp, #8]
   15de8:	str	lr, [sp, #12]
   15dec:	str	ip, [sp, #16]
   15df0:	bl	12af0 <__assert_fail@plt+0x1bf0>
   15df4:	ldr	r3, [sp, #28]
   15df8:	mov	r0, r5
   15dfc:	str	r3, [r9]
   15e00:	add	sp, sp, #92	; 0x5c
   15e04:	ldrd	r4, [sp]
   15e08:	ldrd	r6, [sp, #8]
   15e0c:	ldrd	r8, [sp, #16]
   15e10:	ldrd	sl, [sp, #24]
   15e14:	add	sp, sp, #32
   15e18:	pop	{pc}		; (ldr pc, [sp], #4)
   15e1c:	mov	r1, #8
   15e20:	mvn	r3, #-2147483648	; 0x80000000
   15e24:	mov	r0, r6
   15e28:	str	r1, [sp]
   15e2c:	add	r1, sp, #36	; 0x24
   15e30:	bl	16dfc <__assert_fail@plt+0x5efc>
   15e34:	ldrd	r2, [r5, #8]
   15e38:	mov	r4, r0
   15e3c:	str	r0, [r5]
   15e40:	strd	r2, [r0]
   15e44:	b	15d24 <__assert_fail@plt+0x4e24>
   15e48:	bl	10ef4 <abort@plt>
   15e4c:	andeq	sl, r2, r4, ror #4
   15e50:	ldr	ip, [pc, #536]	; 16070 <__assert_fail@plt+0x5170>
   15e54:	cmp	r0, #0
   15e58:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15e5c:	ldrd	r4, [ip, #16]
   15e60:	strd	r6, [sp, #8]
   15e64:	mov	r6, r1
   15e68:	mov	r7, r0
   15e6c:	strd	r8, [sp, #16]
   15e70:	mov	r9, #10
   15e74:	strd	sl, [sp, #24]
   15e78:	mov	sl, r2
   15e7c:	mov	fp, r3
   15e80:	str	lr, [sp, #32]
   15e84:	clz	lr, r1
   15e88:	sub	sp, sp, #92	; 0x5c
   15e8c:	ldrd	r2, [ip]
   15e90:	lsr	lr, lr, #5
   15e94:	moveq	lr, #1
   15e98:	ldrd	r0, [ip, #8]
   15e9c:	cmp	lr, #0
   15ea0:	strd	r4, [sp, #56]	; 0x38
   15ea4:	ldrd	r4, [ip, #40]	; 0x28
   15ea8:	str	lr, [sp, #28]
   15eac:	strd	r2, [sp, #40]	; 0x28
   15eb0:	ldrd	r2, [ip, #24]
   15eb4:	strd	r0, [sp, #48]	; 0x30
   15eb8:	ldrd	r0, [ip, #32]
   15ebc:	str	r9, [sp, #40]	; 0x28
   15ec0:	strd	r2, [sp, #64]	; 0x40
   15ec4:	strd	r4, [sp, #80]	; 0x50
   15ec8:	strd	r0, [sp, #72]	; 0x48
   15ecc:	bne	1606c <__assert_fail@plt+0x516c>
   15ed0:	movw	r5, #41200	; 0xa0f0
   15ed4:	movt	r5, #2
   15ed8:	str	r7, [sp, #80]	; 0x50
   15edc:	str	r6, [sp, #84]	; 0x54
   15ee0:	bl	10e1c <__errno_location@plt>
   15ee4:	ldr	r3, [r0]
   15ee8:	mov	r8, r0
   15eec:	ldr	r2, [r5, #4]
   15ef0:	ldr	r4, [r5]
   15ef4:	str	r3, [sp, #24]
   15ef8:	cmp	r2, #0
   15efc:	movgt	r1, r9
   15f00:	bgt	15f68 <__assert_fail@plt+0x5068>
   15f04:	add	r3, r5, #8
   15f08:	str	r2, [sp, #36]	; 0x24
   15f0c:	rsb	r2, r2, #1
   15f10:	cmp	r4, r3
   15f14:	beq	16040 <__assert_fail@plt+0x5140>
   15f18:	mov	r1, #8
   15f1c:	mov	r0, r4
   15f20:	mvn	r3, #-2147483648	; 0x80000000
   15f24:	str	r1, [sp]
   15f28:	add	r1, sp, #36	; 0x24
   15f2c:	bl	16dfc <__assert_fail@plt+0x5efc>
   15f30:	mov	r4, r0
   15f34:	str	r0, [r5]
   15f38:	ldr	r0, [r5, #4]
   15f3c:	mov	r1, #0
   15f40:	ldr	r2, [sp, #36]	; 0x24
   15f44:	sub	r2, r2, r0
   15f48:	add	r0, r4, r0, lsl #3
   15f4c:	lsl	r2, r2, #3
   15f50:	bl	10e34 <memset@plt>
   15f54:	ldr	r3, [sp, #36]	; 0x24
   15f58:	ldr	r1, [sp, #40]	; 0x28
   15f5c:	ldr	r7, [sp, #80]	; 0x50
   15f60:	str	r3, [r5, #4]
   15f64:	ldr	r6, [sp, #84]	; 0x54
   15f68:	mov	r3, fp
   15f6c:	mov	r2, sl
   15f70:	ldr	r0, [sp, #44]	; 0x2c
   15f74:	ldr	r9, [r4]
   15f78:	ldr	r5, [r4, #4]
   15f7c:	orr	r0, r0, #1
   15f80:	str	r1, [sp]
   15f84:	add	r1, sp, #48	; 0x30
   15f88:	str	r0, [sp, #4]
   15f8c:	str	r1, [sp, #8]
   15f90:	mov	r1, r9
   15f94:	str	r7, [sp, #12]
   15f98:	str	r6, [sp, #16]
   15f9c:	str	r0, [sp, #28]
   15fa0:	mov	r0, r5
   15fa4:	bl	12af0 <__assert_fail@plt+0x1bf0>
   15fa8:	cmp	r9, r0
   15fac:	bhi	16018 <__assert_fail@plt+0x5118>
   15fb0:	add	r6, r0, #1
   15fb4:	movw	r3, #41316	; 0xa164
   15fb8:	movt	r3, #2
   15fbc:	cmp	r5, r3
   15fc0:	str	r6, [r4]
   15fc4:	beq	15fd0 <__assert_fail@plt+0x50d0>
   15fc8:	mov	r0, r5
   15fcc:	bl	1279c <__assert_fail@plt+0x189c>
   15fd0:	mov	r0, r6
   15fd4:	bl	16b58 <__assert_fail@plt+0x5c58>
   15fd8:	ldr	lr, [sp, #40]	; 0x28
   15fdc:	mov	r1, r6
   15fe0:	mov	r3, fp
   15fe4:	mov	r2, sl
   15fe8:	mov	r5, r0
   15fec:	ldr	r6, [sp, #80]	; 0x50
   15ff0:	ldr	ip, [sp, #84]	; 0x54
   15ff4:	str	r0, [r4, #4]
   15ff8:	str	lr, [sp]
   15ffc:	ldr	lr, [sp, #28]
   16000:	str	lr, [sp, #4]
   16004:	add	lr, sp, #48	; 0x30
   16008:	str	r6, [sp, #12]
   1600c:	str	lr, [sp, #8]
   16010:	str	ip, [sp, #16]
   16014:	bl	12af0 <__assert_fail@plt+0x1bf0>
   16018:	ldr	r3, [sp, #24]
   1601c:	mov	r0, r5
   16020:	str	r3, [r8]
   16024:	add	sp, sp, #92	; 0x5c
   16028:	ldrd	r4, [sp]
   1602c:	ldrd	r6, [sp, #8]
   16030:	ldrd	r8, [sp, #16]
   16034:	ldrd	sl, [sp, #24]
   16038:	add	sp, sp, #32
   1603c:	pop	{pc}		; (ldr pc, [sp], #4)
   16040:	mov	r1, #8
   16044:	mvn	r3, #-2147483648	; 0x80000000
   16048:	ldr	r0, [sp, #28]
   1604c:	str	r1, [sp]
   16050:	add	r1, sp, #36	; 0x24
   16054:	bl	16dfc <__assert_fail@plt+0x5efc>
   16058:	ldrd	r2, [r5, #8]
   1605c:	mov	r4, r0
   16060:	str	r0, [r5]
   16064:	strd	r2, [r0]
   16068:	b	15f38 <__assert_fail@plt+0x5038>
   1606c:	bl	10ef4 <abort@plt>
   16070:	andeq	sl, r2, r4, ror #4
   16074:	ldr	r3, [pc]	; 1607c <__assert_fail@plt+0x517c>
   16078:	b	144dc <__assert_fail@plt+0x35dc>
   1607c:	andeq	sl, r2, r0, lsl #2
   16080:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16084:	movw	r4, #41200	; 0xa0f0
   16088:	movt	r4, #2
   1608c:	strd	r6, [sp, #8]
   16090:	strd	r8, [sp, #16]
   16094:	strd	sl, [sp, #24]
   16098:	mov	sl, r0
   1609c:	mov	fp, r1
   160a0:	str	lr, [sp, #32]
   160a4:	sub	sp, sp, #44	; 0x2c
   160a8:	bl	10e1c <__errno_location@plt>
   160ac:	ldr	r3, [r0]
   160b0:	mov	r8, r0
   160b4:	ldr	r2, [r4, #4]
   160b8:	ldr	r5, [r4]
   160bc:	str	r3, [sp, #28]
   160c0:	cmp	r2, #0
   160c4:	bgt	16120 <__assert_fail@plt+0x5220>
   160c8:	add	r3, r4, #8
   160cc:	str	r2, [sp, #36]	; 0x24
   160d0:	rsb	r2, r2, #1
   160d4:	cmp	r5, r3
   160d8:	beq	161fc <__assert_fail@plt+0x52fc>
   160dc:	mov	r1, #8
   160e0:	mov	r0, r5
   160e4:	mvn	r3, #-2147483648	; 0x80000000
   160e8:	str	r1, [sp]
   160ec:	add	r1, sp, #36	; 0x24
   160f0:	bl	16dfc <__assert_fail@plt+0x5efc>
   160f4:	mov	r5, r0
   160f8:	str	r0, [r4]
   160fc:	ldr	r0, [r4, #4]
   16100:	mov	r1, #0
   16104:	ldr	r2, [sp, #36]	; 0x24
   16108:	sub	r2, r2, r0
   1610c:	add	r0, r5, r0, lsl #3
   16110:	lsl	r2, r2, #3
   16114:	bl	10e34 <memset@plt>
   16118:	ldr	r3, [sp, #36]	; 0x24
   1611c:	str	r3, [r4, #4]
   16120:	ldr	ip, [r4, #16]
   16124:	mov	r3, fp
   16128:	mov	r2, sl
   1612c:	ldr	r7, [r4, #20]
   16130:	ldr	r0, [pc, #240]	; 16228 <__assert_fail@plt+0x5328>
   16134:	ldr	r9, [r5]
   16138:	orr	r7, r7, #1
   1613c:	ldr	r6, [r5, #4]
   16140:	str	ip, [sp]
   16144:	ldr	ip, [r4, #56]	; 0x38
   16148:	mov	r1, r9
   1614c:	str	r7, [sp, #4]
   16150:	ldr	lr, [r4, #60]	; 0x3c
   16154:	str	r0, [sp, #8]
   16158:	mov	r0, r6
   1615c:	str	ip, [sp, #12]
   16160:	str	lr, [sp, #16]
   16164:	bl	12af0 <__assert_fail@plt+0x1bf0>
   16168:	cmp	r9, r0
   1616c:	bhi	161d4 <__assert_fail@plt+0x52d4>
   16170:	add	r9, r0, #1
   16174:	movw	r3, #41316	; 0xa164
   16178:	movt	r3, #2
   1617c:	cmp	r6, r3
   16180:	str	r9, [r5]
   16184:	beq	16190 <__assert_fail@plt+0x5290>
   16188:	mov	r0, r6
   1618c:	bl	1279c <__assert_fail@plt+0x189c>
   16190:	mov	r0, r9
   16194:	bl	16b58 <__assert_fail@plt+0x5c58>
   16198:	ldr	ip, [r4, #16]
   1619c:	mov	r1, r9
   161a0:	mov	r3, fp
   161a4:	mov	r2, sl
   161a8:	mov	r6, r0
   161ac:	ldr	r9, [r4, #56]	; 0x38
   161b0:	ldr	lr, [r4, #60]	; 0x3c
   161b4:	str	r0, [r5, #4]
   161b8:	str	ip, [sp]
   161bc:	ldr	ip, [pc, #100]	; 16228 <__assert_fail@plt+0x5328>
   161c0:	str	r7, [sp, #4]
   161c4:	str	ip, [sp, #8]
   161c8:	str	r9, [sp, #12]
   161cc:	str	lr, [sp, #16]
   161d0:	bl	12af0 <__assert_fail@plt+0x1bf0>
   161d4:	ldr	r3, [sp, #28]
   161d8:	mov	r0, r6
   161dc:	str	r3, [r8]
   161e0:	add	sp, sp, #44	; 0x2c
   161e4:	ldrd	r4, [sp]
   161e8:	ldrd	r6, [sp, #8]
   161ec:	ldrd	r8, [sp, #16]
   161f0:	ldrd	sl, [sp, #24]
   161f4:	add	sp, sp, #32
   161f8:	pop	{pc}		; (ldr pc, [sp], #4)
   161fc:	mov	r0, #8
   16200:	mvn	r3, #-2147483648	; 0x80000000
   16204:	add	r1, sp, #36	; 0x24
   16208:	str	r0, [sp]
   1620c:	mov	r0, #0
   16210:	bl	16dfc <__assert_fail@plt+0x5efc>
   16214:	ldrd	r2, [r4, #8]
   16218:	mov	r5, r0
   1621c:	str	r0, [r4]
   16220:	strd	r2, [r0]
   16224:	b	160fc <__assert_fail@plt+0x51fc>
   16228:	andeq	sl, r2, r8, lsl #2
   1622c:	ldr	r3, [pc, #4]	; 16238 <__assert_fail@plt+0x5338>
   16230:	mvn	r2, #0
   16234:	b	144dc <__assert_fail@plt+0x35dc>
   16238:	andeq	sl, r2, r0, lsl #2
   1623c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16240:	movw	r4, #41200	; 0xa0f0
   16244:	movt	r4, #2
   16248:	strd	r6, [sp, #8]
   1624c:	strd	r8, [sp, #16]
   16250:	strd	sl, [sp, #24]
   16254:	mov	sl, r0
   16258:	str	lr, [sp, #32]
   1625c:	sub	sp, sp, #44	; 0x2c
   16260:	bl	10e1c <__errno_location@plt>
   16264:	ldr	r3, [r0]
   16268:	mov	r8, r0
   1626c:	ldr	r2, [r4, #4]
   16270:	ldr	r5, [r4]
   16274:	str	r3, [sp, #28]
   16278:	cmp	r2, #0
   1627c:	bgt	162d8 <__assert_fail@plt+0x53d8>
   16280:	add	r3, r4, #8
   16284:	str	r2, [sp, #36]	; 0x24
   16288:	rsb	r2, r2, #1
   1628c:	cmp	r5, r3
   16290:	beq	163a0 <__assert_fail@plt+0x54a0>
   16294:	mov	r1, #8
   16298:	mov	r0, r5
   1629c:	mvn	r3, #-2147483648	; 0x80000000
   162a0:	str	r1, [sp]
   162a4:	add	r1, sp, #36	; 0x24
   162a8:	bl	16dfc <__assert_fail@plt+0x5efc>
   162ac:	mov	r5, r0
   162b0:	str	r0, [r4]
   162b4:	ldr	r0, [r4, #4]
   162b8:	mov	r1, #0
   162bc:	ldr	r2, [sp, #36]	; 0x24
   162c0:	sub	r2, r2, r0
   162c4:	add	r0, r5, r0, lsl #3
   162c8:	lsl	r2, r2, #3
   162cc:	bl	10e34 <memset@plt>
   162d0:	ldr	r3, [sp, #36]	; 0x24
   162d4:	str	r3, [r4, #4]
   162d8:	ldr	ip, [r4, #16]
   162dc:	mvn	r3, #0
   162e0:	mov	r2, sl
   162e4:	ldr	r7, [r4, #20]
   162e8:	ldr	fp, [pc, #220]	; 163cc <__assert_fail@plt+0x54cc>
   162ec:	ldr	r9, [r5]
   162f0:	orr	r7, r7, #1
   162f4:	ldr	r6, [r5, #4]
   162f8:	str	ip, [sp]
   162fc:	ldr	ip, [r4, #56]	; 0x38
   16300:	mov	r1, r9
   16304:	stmib	sp, {r7, fp}
   16308:	ldr	lr, [r4, #60]	; 0x3c
   1630c:	mov	r0, r6
   16310:	str	ip, [sp, #12]
   16314:	str	lr, [sp, #16]
   16318:	bl	12af0 <__assert_fail@plt+0x1bf0>
   1631c:	cmp	r9, r0
   16320:	bhi	16378 <__assert_fail@plt+0x5478>
   16324:	add	r9, r0, #1
   16328:	movw	r3, #41316	; 0xa164
   1632c:	movt	r3, #2
   16330:	cmp	r6, r3
   16334:	str	r9, [r5]
   16338:	beq	16344 <__assert_fail@plt+0x5444>
   1633c:	mov	r0, r6
   16340:	bl	1279c <__assert_fail@plt+0x189c>
   16344:	mov	r0, r9
   16348:	bl	16b58 <__assert_fail@plt+0x5c58>
   1634c:	ldr	r3, [r4, #16]
   16350:	mov	r2, sl
   16354:	mov	r1, r9
   16358:	mov	r6, r0
   1635c:	ldr	lr, [r4, #56]	; 0x38
   16360:	ldr	ip, [r4, #60]	; 0x3c
   16364:	str	r0, [r5, #4]
   16368:	stm	sp, {r3, r7, fp, lr}
   1636c:	mvn	r3, #0
   16370:	str	ip, [sp, #16]
   16374:	bl	12af0 <__assert_fail@plt+0x1bf0>
   16378:	ldr	r3, [sp, #28]
   1637c:	mov	r0, r6
   16380:	str	r3, [r8]
   16384:	add	sp, sp, #44	; 0x2c
   16388:	ldrd	r4, [sp]
   1638c:	ldrd	r6, [sp, #8]
   16390:	ldrd	r8, [sp, #16]
   16394:	ldrd	sl, [sp, #24]
   16398:	add	sp, sp, #32
   1639c:	pop	{pc}		; (ldr pc, [sp], #4)
   163a0:	mov	r0, #8
   163a4:	mvn	r3, #-2147483648	; 0x80000000
   163a8:	add	r1, sp, #36	; 0x24
   163ac:	str	r0, [sp]
   163b0:	mov	r0, #0
   163b4:	bl	16dfc <__assert_fail@plt+0x5efc>
   163b8:	ldrd	r2, [r4, #8]
   163bc:	mov	r5, r0
   163c0:	str	r0, [r4]
   163c4:	strd	r2, [r0]
   163c8:	b	162b4 <__assert_fail@plt+0x53b4>
   163cc:	andeq	sl, r2, r8, lsl #2
   163d0:	cmp	r1, #0
   163d4:	strd	r4, [sp, #-16]!
   163d8:	mov	ip, r3
   163dc:	str	r6, [sp, #8]
   163e0:	mov	r4, r0
   163e4:	str	lr, [sp, #12]
   163e8:	sub	sp, sp, #32
   163ec:	ldr	r5, [sp, #48]	; 0x30
   163f0:	ldr	r6, [sp, #52]	; 0x34
   163f4:	beq	16538 <__assert_fail@plt+0x5638>
   163f8:	mov	r3, r1
   163fc:	mov	r1, #1
   16400:	stm	sp, {r2, ip}
   16404:	movw	r2, #36396	; 0x8e2c
   16408:	movt	r2, #1
   1640c:	bl	10e58 <__fprintf_chk@plt>
   16410:	mov	r2, #5
   16414:	movw	r1, #36416	; 0x8e40
   16418:	movt	r1, #1
   1641c:	mov	r0, #0
   16420:	bl	10d38 <dcgettext@plt>
   16424:	movw	ip, #2022	; 0x7e6
   16428:	mov	r3, r0
   1642c:	mov	r1, #1
   16430:	movw	r2, #37144	; 0x9118
   16434:	movt	r2, #1
   16438:	mov	r0, r4
   1643c:	str	ip, [sp]
   16440:	bl	10e58 <__fprintf_chk@plt>
   16444:	mov	r1, r4
   16448:	mov	r0, #10
   1644c:	bl	10d2c <fputc_unlocked@plt>
   16450:	mov	r2, #5
   16454:	movw	r1, #36420	; 0x8e44
   16458:	movt	r1, #1
   1645c:	mov	r0, #0
   16460:	bl	10d38 <dcgettext@plt>
   16464:	mov	r2, r0
   16468:	mov	r1, #1
   1646c:	movw	r3, #36592	; 0x8ef0
   16470:	movt	r3, #1
   16474:	mov	r0, r4
   16478:	bl	10e58 <__fprintf_chk@plt>
   1647c:	mov	r1, r4
   16480:	mov	r0, #10
   16484:	bl	10d2c <fputc_unlocked@plt>
   16488:	cmp	r6, #9
   1648c:	ldrls	pc, [pc, r6, lsl #2]
   16490:	b	167a4 <__assert_fail@plt+0x58a4>
   16494:	andeq	r6, r1, r4, lsr #10
   16498:	andeq	r6, r1, r4, asr r5
   1649c:	muleq	r1, r0, r5
   164a0:	ldrdeq	r6, [r1], -r0
   164a4:	andeq	r6, r1, r8, lsl r6
   164a8:	andeq	r6, r1, r0, asr r6
   164ac:	muleq	r1, r8, r6
   164b0:	andeq	r6, r1, ip, ror #13
   164b4:	andeq	r6, r1, r4, asr #14
   164b8:			; <UNDEFINED> instruction: 0x000164bc
   164bc:	movw	r1, #36896	; 0x9020
   164c0:	movt	r1, #1
   164c4:	mov	r2, #5
   164c8:	mov	r0, #0
   164cc:	bl	10d38 <dcgettext@plt>
   164d0:	ldr	lr, [r5, #4]
   164d4:	mov	r2, r0
   164d8:	mov	r1, #1
   164dc:	mov	r0, r4
   164e0:	ldr	r3, [r5, #8]
   164e4:	ldr	ip, [r5, #32]
   164e8:	str	lr, [sp]
   164ec:	ldr	lr, [r5, #12]
   164f0:	str	ip, [sp, #28]
   164f4:	ldr	ip, [r5, #28]
   164f8:	str	r3, [sp, #4]
   164fc:	ldr	r3, [r5, #16]
   16500:	str	lr, [sp, #8]
   16504:	ldr	lr, [r5, #20]
   16508:	str	ip, [sp, #24]
   1650c:	ldr	ip, [r5, #24]
   16510:	str	r3, [sp, #12]
   16514:	ldr	r3, [r5]
   16518:	str	lr, [sp, #16]
   1651c:	str	ip, [sp, #20]
   16520:	bl	10e58 <__fprintf_chk@plt>
   16524:	add	sp, sp, #32
   16528:	ldrd	r4, [sp]
   1652c:	ldr	r6, [sp, #8]
   16530:	add	sp, sp, #12
   16534:	pop	{pc}		; (ldr pc, [sp], #4)
   16538:	mov	r3, r2
   1653c:	mov	r1, #1
   16540:	str	ip, [sp]
   16544:	movw	r2, #36408	; 0x8e38
   16548:	movt	r2, #1
   1654c:	bl	10e58 <__fprintf_chk@plt>
   16550:	b	16410 <__assert_fail@plt+0x5510>
   16554:	mov	r2, #5
   16558:	movw	r1, #36628	; 0x8f14
   1655c:	movt	r1, #1
   16560:	mov	r0, #0
   16564:	bl	10d38 <dcgettext@plt>
   16568:	ldr	r3, [r5]
   1656c:	mov	r2, r0
   16570:	mov	r1, #1
   16574:	mov	r0, r4
   16578:	add	sp, sp, #32
   1657c:	ldrd	r4, [sp]
   16580:	ldr	r6, [sp, #8]
   16584:	ldr	lr, [sp, #12]
   16588:	add	sp, sp, #16
   1658c:	b	10e58 <__fprintf_chk@plt>
   16590:	mov	r2, #5
   16594:	movw	r1, #36644	; 0x8f24
   16598:	movt	r1, #1
   1659c:	mov	r0, #0
   165a0:	bl	10d38 <dcgettext@plt>
   165a4:	ldm	r5, {r3, ip}
   165a8:	mov	r2, r0
   165ac:	mov	r1, #1
   165b0:	mov	r0, r4
   165b4:	str	ip, [sp, #48]	; 0x30
   165b8:	add	sp, sp, #32
   165bc:	ldrd	r4, [sp]
   165c0:	ldr	r6, [sp, #8]
   165c4:	ldr	lr, [sp, #12]
   165c8:	add	sp, sp, #16
   165cc:	b	10e58 <__fprintf_chk@plt>
   165d0:	mov	r2, #5
   165d4:	movw	r1, #36668	; 0x8f3c
   165d8:	movt	r1, #1
   165dc:	mov	r0, #0
   165e0:	bl	10d38 <dcgettext@plt>
   165e4:	ldm	r5, {r3, lr}
   165e8:	mov	r2, r0
   165ec:	mov	r1, #1
   165f0:	mov	r0, r4
   165f4:	ldr	ip, [r5, #8]
   165f8:	str	lr, [sp, #48]	; 0x30
   165fc:	str	ip, [sp, #52]	; 0x34
   16600:	add	sp, sp, #32
   16604:	ldrd	r4, [sp]
   16608:	ldr	r6, [sp, #8]
   1660c:	ldr	lr, [sp, #12]
   16610:	add	sp, sp, #16
   16614:	b	10e58 <__fprintf_chk@plt>
   16618:	mov	r2, #5
   1661c:	movw	r1, #36696	; 0x8f58
   16620:	movt	r1, #1
   16624:	mov	r0, #0
   16628:	bl	10d38 <dcgettext@plt>
   1662c:	ldmib	r5, {r3, ip, lr}
   16630:	mov	r2, r0
   16634:	mov	r1, #1
   16638:	mov	r0, r4
   1663c:	str	r3, [sp]
   16640:	ldr	r3, [r5]
   16644:	stmib	sp, {ip, lr}
   16648:	bl	10e58 <__fprintf_chk@plt>
   1664c:	b	16524 <__assert_fail@plt+0x5624>
   16650:	mov	r2, #5
   16654:	movw	r1, #36728	; 0x8f78
   16658:	movt	r1, #1
   1665c:	mov	r0, #0
   16660:	bl	10d38 <dcgettext@plt>
   16664:	ldmib	r5, {ip, lr}
   16668:	mov	r2, r0
   1666c:	mov	r1, #1
   16670:	mov	r0, r4
   16674:	ldr	r3, [r5, #16]
   16678:	str	ip, [sp]
   1667c:	ldr	ip, [r5, #12]
   16680:	str	r3, [sp, #12]
   16684:	ldr	r3, [r5]
   16688:	str	lr, [sp, #4]
   1668c:	str	ip, [sp, #8]
   16690:	bl	10e58 <__fprintf_chk@plt>
   16694:	b	16524 <__assert_fail@plt+0x5624>
   16698:	mov	r2, #5
   1669c:	movw	r1, #36764	; 0x8f9c
   166a0:	movt	r1, #1
   166a4:	mov	r0, #0
   166a8:	bl	10d38 <dcgettext@plt>
   166ac:	ldr	lr, [r5, #4]
   166b0:	mov	r2, r0
   166b4:	mov	r1, #1
   166b8:	mov	r0, r4
   166bc:	ldr	r3, [r5, #8]
   166c0:	ldr	ip, [r5, #20]
   166c4:	str	lr, [sp]
   166c8:	ldr	lr, [r5, #12]
   166cc:	str	ip, [sp, #16]
   166d0:	ldr	ip, [r5, #16]
   166d4:	str	r3, [sp, #4]
   166d8:	ldr	r3, [r5]
   166dc:	str	lr, [sp, #8]
   166e0:	str	ip, [sp, #12]
   166e4:	bl	10e58 <__fprintf_chk@plt>
   166e8:	b	16524 <__assert_fail@plt+0x5624>
   166ec:	mov	r2, #5
   166f0:	movw	r1, #36804	; 0x8fc4
   166f4:	movt	r1, #1
   166f8:	mov	r0, #0
   166fc:	bl	10d38 <dcgettext@plt>
   16700:	ldmib	r5, {r3, ip}
   16704:	mov	r2, r0
   16708:	mov	r1, #1
   1670c:	mov	r0, r4
   16710:	ldr	lr, [r5, #24]
   16714:	str	r3, [sp]
   16718:	ldr	r3, [r5, #12]
   1671c:	str	lr, [sp, #20]
   16720:	ldr	lr, [r5, #20]
   16724:	str	ip, [sp, #4]
   16728:	ldr	ip, [r5, #16]
   1672c:	str	r3, [sp, #8]
   16730:	ldr	r3, [r5]
   16734:	str	ip, [sp, #12]
   16738:	str	lr, [sp, #16]
   1673c:	bl	10e58 <__fprintf_chk@plt>
   16740:	b	16524 <__assert_fail@plt+0x5624>
   16744:	mov	r2, #5
   16748:	movw	r1, #36848	; 0x8ff0
   1674c:	movt	r1, #1
   16750:	mov	r0, #0
   16754:	bl	10d38 <dcgettext@plt>
   16758:	ldmib	r5, {ip, lr}
   1675c:	mov	r2, r0
   16760:	mov	r1, #1
   16764:	mov	r0, r4
   16768:	ldr	r3, [r5, #28]
   1676c:	str	ip, [sp]
   16770:	ldr	ip, [r5, #12]
   16774:	str	r3, [sp, #24]
   16778:	ldr	r3, [r5, #24]
   1677c:	str	lr, [sp, #4]
   16780:	ldr	lr, [r5, #16]
   16784:	str	ip, [sp, #8]
   16788:	ldr	ip, [r5, #20]
   1678c:	str	r3, [sp, #20]
   16790:	ldr	r3, [r5]
   16794:	str	lr, [sp, #12]
   16798:	str	ip, [sp, #16]
   1679c:	bl	10e58 <__fprintf_chk@plt>
   167a0:	b	16524 <__assert_fail@plt+0x5624>
   167a4:	movw	r1, #36948	; 0x9054
   167a8:	movt	r1, #1
   167ac:	b	164c4 <__assert_fail@plt+0x55c4>
   167b0:	strd	r4, [sp, #-12]!
   167b4:	str	lr, [sp, #8]
   167b8:	sub	sp, sp, #12
   167bc:	ldr	r5, [sp, #24]
   167c0:	ldr	ip, [r5]
   167c4:	cmp	ip, #0
   167c8:	beq	167e4 <__assert_fail@plt+0x58e4>
   167cc:	mov	lr, r5
   167d0:	mov	ip, #0
   167d4:	ldr	r4, [lr, #4]!
   167d8:	add	ip, ip, #1
   167dc:	cmp	r4, #0
   167e0:	bne	167d4 <__assert_fail@plt+0x58d4>
   167e4:	stm	sp, {r5, ip}
   167e8:	bl	163d0 <__assert_fail@plt+0x54d0>
   167ec:	add	sp, sp, #12
   167f0:	ldrd	r4, [sp]
   167f4:	add	sp, sp, #8
   167f8:	pop	{pc}		; (ldr pc, [sp], #4)
   167fc:	push	{lr}		; (str lr, [sp, #-4]!)
   16800:	sub	sp, sp, #52	; 0x34
   16804:	ldr	ip, [sp, #56]	; 0x38
   16808:	ldr	lr, [ip]
   1680c:	cmp	lr, #0
   16810:	str	lr, [sp, #8]
   16814:	beq	168ac <__assert_fail@plt+0x59ac>
   16818:	ldr	lr, [ip, #4]
   1681c:	cmp	lr, #0
   16820:	str	lr, [sp, #12]
   16824:	beq	168c0 <__assert_fail@plt+0x59c0>
   16828:	ldr	lr, [ip, #8]
   1682c:	cmp	lr, #0
   16830:	str	lr, [sp, #16]
   16834:	beq	168c8 <__assert_fail@plt+0x59c8>
   16838:	ldr	lr, [ip, #12]
   1683c:	cmp	lr, #0
   16840:	str	lr, [sp, #20]
   16844:	beq	168d0 <__assert_fail@plt+0x59d0>
   16848:	ldr	lr, [ip, #16]
   1684c:	cmp	lr, #0
   16850:	str	lr, [sp, #24]
   16854:	beq	168d8 <__assert_fail@plt+0x59d8>
   16858:	ldr	lr, [ip, #20]
   1685c:	cmp	lr, #0
   16860:	str	lr, [sp, #28]
   16864:	beq	168e0 <__assert_fail@plt+0x59e0>
   16868:	ldr	lr, [ip, #24]
   1686c:	cmp	lr, #0
   16870:	str	lr, [sp, #32]
   16874:	beq	168e8 <__assert_fail@plt+0x59e8>
   16878:	ldr	lr, [ip, #28]
   1687c:	cmp	lr, #0
   16880:	str	lr, [sp, #36]	; 0x24
   16884:	beq	168f0 <__assert_fail@plt+0x59f0>
   16888:	ldr	lr, [ip, #32]
   1688c:	cmp	lr, #0
   16890:	str	lr, [sp, #40]	; 0x28
   16894:	beq	168f8 <__assert_fail@plt+0x59f8>
   16898:	ldr	ip, [ip, #36]	; 0x24
   1689c:	cmp	ip, #0
   168a0:	str	ip, [sp, #44]	; 0x2c
   168a4:	movne	lr, #10
   168a8:	moveq	lr, #9
   168ac:	add	ip, sp, #8
   168b0:	stm	sp, {ip, lr}
   168b4:	bl	163d0 <__assert_fail@plt+0x54d0>
   168b8:	add	sp, sp, #52	; 0x34
   168bc:	pop	{pc}		; (ldr pc, [sp], #4)
   168c0:	mov	lr, #1
   168c4:	b	168ac <__assert_fail@plt+0x59ac>
   168c8:	mov	lr, #2
   168cc:	b	168ac <__assert_fail@plt+0x59ac>
   168d0:	mov	lr, #3
   168d4:	b	168ac <__assert_fail@plt+0x59ac>
   168d8:	mov	lr, #4
   168dc:	b	168ac <__assert_fail@plt+0x59ac>
   168e0:	mov	lr, #5
   168e4:	b	168ac <__assert_fail@plt+0x59ac>
   168e8:	mov	lr, #6
   168ec:	b	168ac <__assert_fail@plt+0x59ac>
   168f0:	mov	lr, #7
   168f4:	b	168ac <__assert_fail@plt+0x59ac>
   168f8:	mov	lr, #8
   168fc:	b	168ac <__assert_fail@plt+0x59ac>
   16900:	push	{r3}		; (str r3, [sp, #-4]!)
   16904:	push	{lr}		; (str lr, [sp, #-4]!)
   16908:	sub	sp, sp, #56	; 0x38
   1690c:	ldr	ip, [sp, #64]	; 0x40
   16910:	add	r3, sp, #64	; 0x40
   16914:	str	r3, [sp, #12]
   16918:	cmp	ip, #0
   1691c:	str	ip, [sp, #16]
   16920:	beq	169b8 <__assert_fail@plt+0x5ab8>
   16924:	ldr	ip, [sp, #68]	; 0x44
   16928:	cmp	ip, #0
   1692c:	str	ip, [sp, #20]
   16930:	beq	169dc <__assert_fail@plt+0x5adc>
   16934:	ldr	ip, [sp, #72]	; 0x48
   16938:	cmp	ip, #0
   1693c:	str	ip, [sp, #24]
   16940:	beq	169e4 <__assert_fail@plt+0x5ae4>
   16944:	ldr	ip, [sp, #76]	; 0x4c
   16948:	cmp	ip, #0
   1694c:	str	ip, [sp, #28]
   16950:	beq	169ec <__assert_fail@plt+0x5aec>
   16954:	ldr	ip, [sp, #80]	; 0x50
   16958:	cmp	ip, #0
   1695c:	str	ip, [sp, #32]
   16960:	beq	169f4 <__assert_fail@plt+0x5af4>
   16964:	ldr	ip, [sp, #84]	; 0x54
   16968:	cmp	ip, #0
   1696c:	str	ip, [sp, #36]	; 0x24
   16970:	beq	169fc <__assert_fail@plt+0x5afc>
   16974:	ldr	ip, [sp, #88]	; 0x58
   16978:	cmp	ip, #0
   1697c:	str	ip, [sp, #40]	; 0x28
   16980:	beq	16a04 <__assert_fail@plt+0x5b04>
   16984:	ldr	ip, [sp, #92]	; 0x5c
   16988:	cmp	ip, #0
   1698c:	str	ip, [sp, #44]	; 0x2c
   16990:	beq	16a0c <__assert_fail@plt+0x5b0c>
   16994:	ldr	ip, [sp, #96]	; 0x60
   16998:	cmp	ip, #0
   1699c:	str	ip, [sp, #48]	; 0x30
   169a0:	beq	16a14 <__assert_fail@plt+0x5b14>
   169a4:	ldr	r3, [sp, #100]	; 0x64
   169a8:	cmp	r3, #0
   169ac:	str	r3, [sp, #52]	; 0x34
   169b0:	movne	ip, #10
   169b4:	moveq	ip, #9
   169b8:	ldr	r3, [sp, #60]	; 0x3c
   169bc:	add	lr, sp, #16
   169c0:	str	lr, [sp]
   169c4:	str	ip, [sp, #4]
   169c8:	bl	163d0 <__assert_fail@plt+0x54d0>
   169cc:	add	sp, sp, #56	; 0x38
   169d0:	pop	{lr}		; (ldr lr, [sp], #4)
   169d4:	add	sp, sp, #4
   169d8:	bx	lr
   169dc:	mov	ip, #1
   169e0:	b	169b8 <__assert_fail@plt+0x5ab8>
   169e4:	mov	ip, #2
   169e8:	b	169b8 <__assert_fail@plt+0x5ab8>
   169ec:	mov	ip, #3
   169f0:	b	169b8 <__assert_fail@plt+0x5ab8>
   169f4:	mov	ip, #4
   169f8:	b	169b8 <__assert_fail@plt+0x5ab8>
   169fc:	mov	ip, #5
   16a00:	b	169b8 <__assert_fail@plt+0x5ab8>
   16a04:	mov	ip, #6
   16a08:	b	169b8 <__assert_fail@plt+0x5ab8>
   16a0c:	mov	ip, #7
   16a10:	b	169b8 <__assert_fail@plt+0x5ab8>
   16a14:	mov	ip, #8
   16a18:	b	169b8 <__assert_fail@plt+0x5ab8>
   16a1c:	movw	r3, #41292	; 0xa14c
   16a20:	movt	r3, #2
   16a24:	str	r4, [sp, #-8]!
   16a28:	mov	r0, #10
   16a2c:	ldr	r1, [r3]
   16a30:	str	lr, [sp, #4]
   16a34:	bl	10d2c <fputc_unlocked@plt>
   16a38:	mov	r2, #5
   16a3c:	movw	r1, #37008	; 0x9090
   16a40:	movt	r1, #1
   16a44:	mov	r0, #0
   16a48:	bl	10d38 <dcgettext@plt>
   16a4c:	mov	r1, r0
   16a50:	movw	r2, #37028	; 0x90a4
   16a54:	movt	r2, #1
   16a58:	mov	r0, #1
   16a5c:	bl	10e40 <__printf_chk@plt>
   16a60:	mov	r2, #5
   16a64:	movw	r1, #37052	; 0x90bc
   16a68:	movt	r1, #1
   16a6c:	mov	r0, #0
   16a70:	bl	10d38 <dcgettext@plt>
   16a74:	mov	r1, r0
   16a78:	movw	r3, #35304	; 0x89e8
   16a7c:	movt	r3, #1
   16a80:	movw	r2, #35344	; 0x8a10
   16a84:	movt	r2, #1
   16a88:	mov	r0, #1
   16a8c:	bl	10e40 <__printf_chk@plt>
   16a90:	mov	r2, #5
   16a94:	movw	r1, #37072	; 0x90d0
   16a98:	movt	r1, #1
   16a9c:	mov	r0, #0
   16aa0:	bl	10d38 <dcgettext@plt>
   16aa4:	mov	r1, r0
   16aa8:	movw	r2, #37112	; 0x90f8
   16aac:	movt	r2, #1
   16ab0:	mov	r0, #1
   16ab4:	ldr	r4, [sp]
   16ab8:	ldr	lr, [sp, #4]
   16abc:	add	sp, sp, #8
   16ac0:	b	10e40 <__printf_chk@plt>
   16ac4:	strd	r4, [sp, #-16]!
   16ac8:	mov	r4, r0
   16acc:	mov	r5, r2
   16ad0:	str	r6, [sp, #8]
   16ad4:	mov	r6, r1
   16ad8:	str	lr, [sp, #12]
   16adc:	bl	183bc <__assert_fail@plt+0x74bc>
   16ae0:	cmp	r0, #0
   16ae4:	beq	16af8 <__assert_fail@plt+0x5bf8>
   16ae8:	ldrd	r4, [sp]
   16aec:	ldr	r6, [sp, #8]
   16af0:	add	sp, sp, #12
   16af4:	pop	{pc}		; (ldr pc, [sp], #4)
   16af8:	cmp	r4, #0
   16afc:	beq	16b0c <__assert_fail@plt+0x5c0c>
   16b00:	cmp	r6, #0
   16b04:	cmpne	r5, #0
   16b08:	beq	16ae8 <__assert_fail@plt+0x5be8>
   16b0c:	bl	170c8 <__assert_fail@plt+0x61c8>
   16b10:	str	r4, [sp, #-8]!
   16b14:	str	lr, [sp, #4]
   16b18:	bl	181e4 <__assert_fail@plt+0x72e4>
   16b1c:	cmp	r0, #0
   16b20:	beq	16b30 <__assert_fail@plt+0x5c30>
   16b24:	ldr	r4, [sp]
   16b28:	add	sp, sp, #4
   16b2c:	pop	{pc}		; (ldr pc, [sp], #4)
   16b30:	bl	170c8 <__assert_fail@plt+0x61c8>
   16b34:	str	r4, [sp, #-8]!
   16b38:	str	lr, [sp, #4]
   16b3c:	bl	181e4 <__assert_fail@plt+0x72e4>
   16b40:	cmp	r0, #0
   16b44:	beq	16b54 <__assert_fail@plt+0x5c54>
   16b48:	ldr	r4, [sp]
   16b4c:	add	sp, sp, #4
   16b50:	pop	{pc}		; (ldr pc, [sp], #4)
   16b54:	bl	170c8 <__assert_fail@plt+0x61c8>
   16b58:	str	r4, [sp, #-8]!
   16b5c:	str	lr, [sp, #4]
   16b60:	bl	181e4 <__assert_fail@plt+0x72e4>
   16b64:	cmp	r0, #0
   16b68:	beq	16b78 <__assert_fail@plt+0x5c78>
   16b6c:	ldr	r4, [sp]
   16b70:	add	sp, sp, #4
   16b74:	pop	{pc}		; (ldr pc, [sp], #4)
   16b78:	bl	170c8 <__assert_fail@plt+0x61c8>
   16b7c:	strd	r4, [sp, #-16]!
   16b80:	mov	r5, r0
   16b84:	mov	r4, r1
   16b88:	str	r6, [sp, #8]
   16b8c:	str	lr, [sp, #12]
   16b90:	bl	18220 <__assert_fail@plt+0x7320>
   16b94:	cmp	r0, #0
   16b98:	beq	16bac <__assert_fail@plt+0x5cac>
   16b9c:	ldrd	r4, [sp]
   16ba0:	ldr	r6, [sp, #8]
   16ba4:	add	sp, sp, #12
   16ba8:	pop	{pc}		; (ldr pc, [sp], #4)
   16bac:	adds	r4, r4, #0
   16bb0:	movne	r4, #1
   16bb4:	cmp	r5, #0
   16bb8:	moveq	r4, #1
   16bbc:	cmp	r4, #0
   16bc0:	beq	16b9c <__assert_fail@plt+0x5c9c>
   16bc4:	bl	170c8 <__assert_fail@plt+0x61c8>
   16bc8:	cmp	r1, #0
   16bcc:	orreq	r1, r1, #1
   16bd0:	str	r4, [sp, #-8]!
   16bd4:	str	lr, [sp, #4]
   16bd8:	bl	18220 <__assert_fail@plt+0x7320>
   16bdc:	cmp	r0, #0
   16be0:	beq	16bf0 <__assert_fail@plt+0x5cf0>
   16be4:	ldr	r4, [sp]
   16be8:	add	sp, sp, #4
   16bec:	pop	{pc}		; (ldr pc, [sp], #4)
   16bf0:	bl	170c8 <__assert_fail@plt+0x61c8>
   16bf4:	strd	r4, [sp, #-16]!
   16bf8:	mov	r4, r0
   16bfc:	mov	r5, r2
   16c00:	str	r6, [sp, #8]
   16c04:	mov	r6, r1
   16c08:	str	lr, [sp, #12]
   16c0c:	bl	183bc <__assert_fail@plt+0x74bc>
   16c10:	cmp	r0, #0
   16c14:	beq	16c28 <__assert_fail@plt+0x5d28>
   16c18:	ldrd	r4, [sp]
   16c1c:	ldr	r6, [sp, #8]
   16c20:	add	sp, sp, #12
   16c24:	pop	{pc}		; (ldr pc, [sp], #4)
   16c28:	cmp	r4, #0
   16c2c:	beq	16c3c <__assert_fail@plt+0x5d3c>
   16c30:	cmp	r6, #0
   16c34:	cmpne	r5, #0
   16c38:	beq	16c18 <__assert_fail@plt+0x5d18>
   16c3c:	bl	170c8 <__assert_fail@plt+0x61c8>
   16c40:	cmp	r2, #0
   16c44:	cmpne	r1, #0
   16c48:	str	r4, [sp, #-8]!
   16c4c:	moveq	r2, #1
   16c50:	str	lr, [sp, #4]
   16c54:	moveq	r1, r2
   16c58:	bl	183bc <__assert_fail@plt+0x74bc>
   16c5c:	cmp	r0, #0
   16c60:	beq	16c70 <__assert_fail@plt+0x5d70>
   16c64:	ldr	r4, [sp]
   16c68:	add	sp, sp, #4
   16c6c:	pop	{pc}		; (ldr pc, [sp], #4)
   16c70:	bl	170c8 <__assert_fail@plt+0x61c8>
   16c74:	mov	r2, r1
   16c78:	mov	r1, r0
   16c7c:	str	r4, [sp, #-8]!
   16c80:	mov	r0, #0
   16c84:	str	lr, [sp, #4]
   16c88:	bl	183bc <__assert_fail@plt+0x74bc>
   16c8c:	cmp	r0, #0
   16c90:	beq	16ca0 <__assert_fail@plt+0x5da0>
   16c94:	ldr	r4, [sp]
   16c98:	add	sp, sp, #4
   16c9c:	pop	{pc}		; (ldr pc, [sp], #4)
   16ca0:	bl	170c8 <__assert_fail@plt+0x61c8>
   16ca4:	cmp	r1, #0
   16ca8:	cmpne	r0, #0
   16cac:	str	r4, [sp, #-8]!
   16cb0:	moveq	r2, #1
   16cb4:	movne	r2, r1
   16cb8:	str	lr, [sp, #4]
   16cbc:	movne	r1, r0
   16cc0:	moveq	r1, r2
   16cc4:	mov	r0, #0
   16cc8:	bl	183bc <__assert_fail@plt+0x74bc>
   16ccc:	cmp	r0, #0
   16cd0:	beq	16ce0 <__assert_fail@plt+0x5de0>
   16cd4:	ldr	r4, [sp]
   16cd8:	add	sp, sp, #4
   16cdc:	pop	{pc}		; (ldr pc, [sp], #4)
   16ce0:	bl	170c8 <__assert_fail@plt+0x61c8>
   16ce4:	cmp	r0, #0
   16ce8:	strd	r4, [sp, #-16]!
   16cec:	mov	r5, r1
   16cf0:	ldr	r4, [r1]
   16cf4:	str	r6, [sp, #8]
   16cf8:	str	lr, [sp, #12]
   16cfc:	beq	16d44 <__assert_fail@plt+0x5e44>
   16d00:	lsr	r3, r4, #1
   16d04:	add	r3, r3, #1
   16d08:	adds	r4, r4, r3
   16d0c:	bcs	16d40 <__assert_fail@plt+0x5e40>
   16d10:	mov	r2, #1
   16d14:	mov	r1, r4
   16d18:	bl	183bc <__assert_fail@plt+0x74bc>
   16d1c:	cmp	r0, #0
   16d20:	beq	16d38 <__assert_fail@plt+0x5e38>
   16d24:	ldr	r6, [sp, #8]
   16d28:	str	r4, [r5]
   16d2c:	ldrd	r4, [sp]
   16d30:	add	sp, sp, #12
   16d34:	pop	{pc}		; (ldr pc, [sp], #4)
   16d38:	cmp	r4, #0
   16d3c:	beq	16d24 <__assert_fail@plt+0x5e24>
   16d40:	bl	170c8 <__assert_fail@plt+0x61c8>
   16d44:	cmp	r4, #0
   16d48:	mov	r2, #1
   16d4c:	moveq	r4, #64	; 0x40
   16d50:	mov	r1, r4
   16d54:	bl	183bc <__assert_fail@plt+0x74bc>
   16d58:	cmp	r0, #0
   16d5c:	bne	16d24 <__assert_fail@plt+0x5e24>
   16d60:	b	16d40 <__assert_fail@plt+0x5e40>
   16d64:	cmp	r0, #0
   16d68:	strd	r4, [sp, #-16]!
   16d6c:	mov	r5, r1
   16d70:	ldr	r4, [r1]
   16d74:	str	r6, [sp, #8]
   16d78:	mov	r6, r2
   16d7c:	str	lr, [sp, #12]
   16d80:	beq	16dc8 <__assert_fail@plt+0x5ec8>
   16d84:	lsr	r3, r4, #1
   16d88:	add	r3, r3, #1
   16d8c:	adds	r4, r4, r3
   16d90:	bcs	16dc4 <__assert_fail@plt+0x5ec4>
   16d94:	mov	r1, r4
   16d98:	bl	183bc <__assert_fail@plt+0x74bc>
   16d9c:	cmp	r0, #0
   16da0:	beq	16db8 <__assert_fail@plt+0x5eb8>
   16da4:	ldr	r6, [sp, #8]
   16da8:	str	r4, [r5]
   16dac:	ldrd	r4, [sp]
   16db0:	add	sp, sp, #12
   16db4:	pop	{pc}		; (ldr pc, [sp], #4)
   16db8:	cmp	r4, #0
   16dbc:	cmpne	r6, #0
   16dc0:	beq	16da4 <__assert_fail@plt+0x5ea4>
   16dc4:	bl	170c8 <__assert_fail@plt+0x61c8>
   16dc8:	cmp	r4, #0
   16dcc:	bne	16de0 <__assert_fail@plt+0x5ee0>
   16dd0:	mov	r4, #64	; 0x40
   16dd4:	udiv	r4, r4, r2
   16dd8:	cmp	r2, #64	; 0x40
   16ddc:	addhi	r4, r4, #1
   16de0:	mov	r2, r6
   16de4:	mov	r1, r4
   16de8:	mov	r0, #0
   16dec:	bl	183bc <__assert_fail@plt+0x74bc>
   16df0:	cmp	r0, #0
   16df4:	bne	16da4 <__assert_fail@plt+0x5ea4>
   16df8:	b	16dc4 <__assert_fail@plt+0x5ec4>
   16dfc:	ldr	ip, [r1]
   16e00:	strd	r4, [sp, #-24]!	; 0xffffffe8
   16e04:	strd	r6, [sp, #8]
   16e08:	mov	r7, r1
   16e0c:	mov	r6, r0
   16e10:	str	r8, [sp, #16]
   16e14:	mvn	r8, r3
   16e18:	lsr	r8, r8, #31
   16e1c:	str	lr, [sp, #20]
   16e20:	asr	r1, ip, #1
   16e24:	ldr	lr, [sp, #24]
   16e28:	adds	r4, ip, r1
   16e2c:	mvnvs	r4, #-2147483648	; 0x80000000
   16e30:	cmp	r3, r4
   16e34:	movge	r1, #0
   16e38:	andlt	r1, r8, #1
   16e3c:	cmp	r1, #0
   16e40:	movne	r4, r3
   16e44:	smull	r0, r1, r4, lr
   16e48:	cmp	r1, r0, asr #31
   16e4c:	bne	16efc <__assert_fail@plt+0x5ffc>
   16e50:	cmp	r0, #63	; 0x3f
   16e54:	mov	r5, r0
   16e58:	ble	16ec8 <__assert_fail@plt+0x5fc8>
   16e5c:	cmp	r6, #0
   16e60:	sub	r1, r4, ip
   16e64:	streq	r6, [r7]
   16e68:	cmp	r1, r2
   16e6c:	bge	16e9c <__assert_fail@plt+0x5f9c>
   16e70:	adds	r4, ip, r2
   16e74:	bvs	16ef8 <__assert_fail@plt+0x5ff8>
   16e78:	cmp	r4, r3
   16e7c:	movle	r3, #0
   16e80:	andgt	r3, r8, #1
   16e84:	cmp	r3, #0
   16e88:	bne	16ef8 <__assert_fail@plt+0x5ff8>
   16e8c:	smull	r0, r1, r4, lr
   16e90:	cmp	r1, r0, asr #31
   16e94:	mov	r5, r0
   16e98:	bne	16ef8 <__assert_fail@plt+0x5ff8>
   16e9c:	mov	r1, r5
   16ea0:	mov	r0, r6
   16ea4:	bl	18220 <__assert_fail@plt+0x7320>
   16ea8:	cmp	r0, #0
   16eac:	beq	16edc <__assert_fail@plt+0x5fdc>
   16eb0:	ldr	r8, [sp, #16]
   16eb4:	str	r4, [r7]
   16eb8:	ldrd	r4, [sp]
   16ebc:	ldrd	r6, [sp, #8]
   16ec0:	add	sp, sp, #20
   16ec4:	pop	{pc}		; (ldr pc, [sp], #4)
   16ec8:	mov	r0, #64	; 0x40
   16ecc:	sdiv	r4, r0, lr
   16ed0:	mls	r5, lr, r4, r0
   16ed4:	sub	r5, r0, r5
   16ed8:	b	16e5c <__assert_fail@plt+0x5f5c>
   16edc:	adds	r5, r5, #0
   16ee0:	movne	r5, #1
   16ee4:	cmp	r6, #0
   16ee8:	movne	r6, r5
   16eec:	moveq	r6, #1
   16ef0:	cmp	r6, #0
   16ef4:	beq	16eb0 <__assert_fail@plt+0x5fb0>
   16ef8:	bl	170c8 <__assert_fail@plt+0x61c8>
   16efc:	mvn	r0, #-2147483648	; 0x80000000
   16f00:	b	16ecc <__assert_fail@plt+0x5fcc>
   16f04:	mov	r1, #1
   16f08:	str	r4, [sp, #-8]!
   16f0c:	str	lr, [sp, #4]
   16f10:	bl	18170 <__assert_fail@plt+0x7270>
   16f14:	cmp	r0, #0
   16f18:	beq	16f28 <__assert_fail@plt+0x6028>
   16f1c:	ldr	r4, [sp]
   16f20:	add	sp, sp, #4
   16f24:	pop	{pc}		; (ldr pc, [sp], #4)
   16f28:	bl	170c8 <__assert_fail@plt+0x61c8>
   16f2c:	mov	r1, #1
   16f30:	str	r4, [sp, #-8]!
   16f34:	str	lr, [sp, #4]
   16f38:	bl	18170 <__assert_fail@plt+0x7270>
   16f3c:	cmp	r0, #0
   16f40:	beq	16f50 <__assert_fail@plt+0x6050>
   16f44:	ldr	r4, [sp]
   16f48:	add	sp, sp, #4
   16f4c:	pop	{pc}		; (ldr pc, [sp], #4)
   16f50:	bl	170c8 <__assert_fail@plt+0x61c8>
   16f54:	str	r4, [sp, #-8]!
   16f58:	str	lr, [sp, #4]
   16f5c:	bl	18170 <__assert_fail@plt+0x7270>
   16f60:	cmp	r0, #0
   16f64:	beq	16f74 <__assert_fail@plt+0x6074>
   16f68:	ldr	r4, [sp]
   16f6c:	add	sp, sp, #4
   16f70:	pop	{pc}		; (ldr pc, [sp], #4)
   16f74:	bl	170c8 <__assert_fail@plt+0x61c8>
   16f78:	str	r4, [sp, #-8]!
   16f7c:	str	lr, [sp, #4]
   16f80:	bl	18170 <__assert_fail@plt+0x7270>
   16f84:	cmp	r0, #0
   16f88:	beq	16f98 <__assert_fail@plt+0x6098>
   16f8c:	ldr	r4, [sp]
   16f90:	add	sp, sp, #4
   16f94:	pop	{pc}		; (ldr pc, [sp], #4)
   16f98:	bl	170c8 <__assert_fail@plt+0x61c8>
   16f9c:	strd	r4, [sp, #-16]!
   16fa0:	mov	r4, r1
   16fa4:	str	r6, [sp, #8]
   16fa8:	mov	r6, r0
   16fac:	mov	r0, r1
   16fb0:	str	lr, [sp, #12]
   16fb4:	bl	181e4 <__assert_fail@plt+0x72e4>
   16fb8:	subs	r5, r0, #0
   16fbc:	beq	16fe0 <__assert_fail@plt+0x60e0>
   16fc0:	mov	r2, r4
   16fc4:	mov	r1, r6
   16fc8:	bl	10cfc <memcpy@plt>
   16fcc:	mov	r0, r5
   16fd0:	ldrd	r4, [sp]
   16fd4:	ldr	r6, [sp, #8]
   16fd8:	add	sp, sp, #12
   16fdc:	pop	{pc}		; (ldr pc, [sp], #4)
   16fe0:	bl	170c8 <__assert_fail@plt+0x61c8>
   16fe4:	strd	r4, [sp, #-16]!
   16fe8:	mov	r4, r1
   16fec:	str	r6, [sp, #8]
   16ff0:	mov	r6, r0
   16ff4:	mov	r0, r1
   16ff8:	str	lr, [sp, #12]
   16ffc:	bl	181e4 <__assert_fail@plt+0x72e4>
   17000:	subs	r5, r0, #0
   17004:	beq	17028 <__assert_fail@plt+0x6128>
   17008:	mov	r2, r4
   1700c:	mov	r1, r6
   17010:	bl	10cfc <memcpy@plt>
   17014:	mov	r0, r5
   17018:	ldrd	r4, [sp]
   1701c:	ldr	r6, [sp, #8]
   17020:	add	sp, sp, #12
   17024:	pop	{pc}		; (ldr pc, [sp], #4)
   17028:	bl	170c8 <__assert_fail@plt+0x61c8>
   1702c:	strd	r4, [sp, #-16]!
   17030:	mov	r4, r1
   17034:	str	r6, [sp, #8]
   17038:	mov	r6, r0
   1703c:	add	r0, r1, #1
   17040:	str	lr, [sp, #12]
   17044:	bl	181e4 <__assert_fail@plt+0x72e4>
   17048:	subs	r5, r0, #0
   1704c:	beq	17078 <__assert_fail@plt+0x6178>
   17050:	mov	r3, #0
   17054:	mov	r1, r6
   17058:	mov	r2, r4
   1705c:	strb	r3, [r5, r4]
   17060:	bl	10cfc <memcpy@plt>
   17064:	mov	r0, r5
   17068:	ldrd	r4, [sp]
   1706c:	ldr	r6, [sp, #8]
   17070:	add	sp, sp, #12
   17074:	pop	{pc}		; (ldr pc, [sp], #4)
   17078:	bl	170c8 <__assert_fail@plt+0x61c8>
   1707c:	strd	r4, [sp, #-16]!
   17080:	str	r6, [sp, #8]
   17084:	mov	r6, r0
   17088:	str	lr, [sp, #12]
   1708c:	bl	10e04 <strlen@plt>
   17090:	add	r4, r0, #1
   17094:	mov	r0, r4
   17098:	bl	181e4 <__assert_fail@plt+0x72e4>
   1709c:	subs	r5, r0, #0
   170a0:	beq	170c4 <__assert_fail@plt+0x61c4>
   170a4:	mov	r2, r4
   170a8:	mov	r1, r6
   170ac:	bl	10cfc <memcpy@plt>
   170b0:	mov	r0, r5
   170b4:	ldrd	r4, [sp]
   170b8:	ldr	r6, [sp, #8]
   170bc:	add	sp, sp, #12
   170c0:	pop	{pc}		; (ldr pc, [sp], #4)
   170c4:	bl	170c8 <__assert_fail@plt+0x61c8>
   170c8:	movw	r3, #41196	; 0xa0ec
   170cc:	movt	r3, #2
   170d0:	str	r4, [sp, #-8]!
   170d4:	ldr	r4, [r3]
   170d8:	mov	r2, #5
   170dc:	movw	r1, #37192	; 0x9148
   170e0:	movt	r1, #1
   170e4:	mov	r0, #0
   170e8:	str	lr, [sp, #4]
   170ec:	bl	10d38 <dcgettext@plt>
   170f0:	mov	r3, r0
   170f4:	movw	r2, #35564	; 0x8aec
   170f8:	movt	r2, #1
   170fc:	mov	r1, #0
   17100:	mov	r0, r4
   17104:	bl	10da4 <error@plt>
   17108:	bl	10ef4 <abort@plt>
   1710c:	cmp	r2, #36	; 0x24
   17110:	strd	r4, [sp, #-36]!	; 0xffffffdc
   17114:	strd	r6, [sp, #8]
   17118:	strd	r8, [sp, #16]
   1711c:	strd	sl, [sp, #24]
   17120:	str	lr, [sp, #32]
   17124:	sub	sp, sp, #36	; 0x24
   17128:	bhi	17f04 <__assert_fail@plt+0x7004>
   1712c:	cmp	r1, #0
   17130:	mov	r5, r1
   17134:	mov	r6, r2
   17138:	addeq	r5, sp, #28
   1713c:	mov	sl, r0
   17140:	mov	r9, r3
   17144:	bl	10e1c <__errno_location@plt>
   17148:	mov	fp, r0
   1714c:	mov	r4, #0
   17150:	mov	r2, r6
   17154:	mov	r3, r4
   17158:	mov	r1, r5
   1715c:	mov	r0, sl
   17160:	str	r4, [fp]
   17164:	bl	10eb8 <__strtoll_internal@plt>
   17168:	ldr	r8, [r5]
   1716c:	mov	r6, r0
   17170:	mov	r7, r1
   17174:	cmp	r8, sl
   17178:	beq	171d0 <__assert_fail@plt+0x62d0>
   1717c:	ldr	r4, [fp]
   17180:	cmp	r4, #0
   17184:	beq	17194 <__assert_fail@plt+0x6294>
   17188:	cmp	r4, #34	; 0x22
   1718c:	bne	172d4 <__assert_fail@plt+0x63d4>
   17190:	mov	r4, #1
   17194:	ldr	r3, [sp, #72]	; 0x48
   17198:	cmp	r3, #0
   1719c:	beq	171ac <__assert_fail@plt+0x62ac>
   171a0:	ldrb	sl, [r8]
   171a4:	cmp	sl, #0
   171a8:	bne	173d8 <__assert_fail@plt+0x64d8>
   171ac:	strd	r6, [r9]
   171b0:	mov	r0, r4
   171b4:	add	sp, sp, #36	; 0x24
   171b8:	ldrd	r4, [sp]
   171bc:	ldrd	r6, [sp, #8]
   171c0:	ldrd	r8, [sp, #16]
   171c4:	ldrd	sl, [sp, #24]
   171c8:	add	sp, sp, #32
   171cc:	pop	{pc}		; (ldr pc, [sp], #4)
   171d0:	ldr	r3, [sp, #72]	; 0x48
   171d4:	cmp	r3, r4
   171d8:	beq	172d4 <__assert_fail@plt+0x63d4>
   171dc:	ldrb	sl, [sl]
   171e0:	cmp	sl, r4
   171e4:	beq	172d4 <__assert_fail@plt+0x63d4>
   171e8:	mov	r1, sl
   171ec:	mov	r0, r3
   171f0:	bl	10e10 <strchr@plt>
   171f4:	cmp	r0, r4
   171f8:	movne	r6, #1
   171fc:	movne	r7, #0
   17200:	beq	172d4 <__assert_fail@plt+0x63d4>
   17204:	sub	fp, sl, #69	; 0x45
   17208:	cmp	fp, #47	; 0x2f
   1720c:	ldrls	pc, [pc, fp, lsl #2]
   17210:	b	173f4 <__assert_fail@plt+0x64f4>
   17214:	ldrdeq	r7, [r1], -ip
   17218:	strdeq	r7, [r1], -r4
   1721c:	ldrdeq	r7, [r1], -ip
   17220:	strdeq	r7, [r1], -r4
   17224:	strdeq	r7, [r1], -r4
   17228:	strdeq	r7, [r1], -r4
   1722c:	ldrdeq	r7, [r1], -ip
   17230:	strdeq	r7, [r1], -r4
   17234:	ldrdeq	r7, [r1], -ip
   17238:	strdeq	r7, [r1], -r4
   1723c:	strdeq	r7, [r1], -r4
   17240:	ldrdeq	r7, [r1], -ip
   17244:	strdeq	r7, [r1], -r4
   17248:	strdeq	r7, [r1], -r4
   1724c:	strdeq	r7, [r1], -r4
   17250:	ldrdeq	r7, [r1], -ip
   17254:	strdeq	r7, [r1], -r4
   17258:	strdeq	r7, [r1], -r4
   1725c:	strdeq	r7, [r1], -r4
   17260:	strdeq	r7, [r1], -r4
   17264:	ldrdeq	r7, [r1], -ip
   17268:	ldrdeq	r7, [r1], -ip
   1726c:	strdeq	r7, [r1], -r4
   17270:	strdeq	r7, [r1], -r4
   17274:	strdeq	r7, [r1], -r4
   17278:	strdeq	r7, [r1], -r4
   1727c:	strdeq	r7, [r1], -r4
   17280:	strdeq	r7, [r1], -r4
   17284:	strdeq	r7, [r1], -r4
   17288:	strdeq	r7, [r1], -r4
   1728c:	strdeq	r7, [r1], -r4
   17290:	strdeq	r7, [r1], -r4
   17294:	strdeq	r7, [r1], -r4
   17298:	strdeq	r7, [r1], -r4
   1729c:	ldrdeq	r7, [r1], -ip
   172a0:	strdeq	r7, [r1], -r4
   172a4:	strdeq	r7, [r1], -r4
   172a8:	strdeq	r7, [r1], -r4
   172ac:	ldrdeq	r7, [r1], -ip
   172b0:	strdeq	r7, [r1], -r4
   172b4:	ldrdeq	r7, [r1], -ip
   172b8:	strdeq	r7, [r1], -r4
   172bc:	strdeq	r7, [r1], -r4
   172c0:	strdeq	r7, [r1], -r4
   172c4:	strdeq	r7, [r1], -r4
   172c8:	strdeq	r7, [r1], -r4
   172cc:	strdeq	r7, [r1], -r4
   172d0:	ldrdeq	r7, [r1], -ip
   172d4:	mov	r4, #4
   172d8:	b	171b0 <__assert_fail@plt+0x62b0>
   172dc:	mov	r1, #48	; 0x30
   172e0:	ldr	r0, [sp, #72]	; 0x48
   172e4:	bl	10e10 <strchr@plt>
   172e8:	cmp	r0, #0
   172ec:	beq	173f4 <__assert_fail@plt+0x64f4>
   172f0:	ldrb	r3, [r8, #1]
   172f4:	cmp	r3, #68	; 0x44
   172f8:	beq	17adc <__assert_fail@plt+0x6bdc>
   172fc:	cmp	r3, #105	; 0x69
   17300:	beq	17b24 <__assert_fail@plt+0x6c24>
   17304:	cmp	r3, #66	; 0x42
   17308:	beq	17adc <__assert_fail@plt+0x6bdc>
   1730c:	cmp	fp, #47	; 0x2f
   17310:	ldrls	pc, [pc, fp, lsl #2]
   17314:	b	173ec <__assert_fail@plt+0x64ec>
   17318:	strdeq	r7, [r1], -ip
   1731c:	andeq	r7, r1, ip, ror #7
   17320:	andeq	r7, r1, r0, asr #16
   17324:	andeq	r7, r1, ip, ror #7
   17328:	andeq	r7, r1, ip, ror #7
   1732c:	andeq	r7, r1, ip, ror #7
   17330:	andeq	r7, r1, r0, lsl r6
   17334:	andeq	r7, r1, ip, ror #7
   17338:	muleq	r1, ip, r9
   1733c:	andeq	r7, r1, ip, ror #7
   17340:	andeq	r7, r1, ip, ror #7
   17344:	andeq	r7, r1, r0, lsr #15
   17348:	andeq	r7, r1, ip, ror #7
   1734c:	andeq	r7, r1, ip, ror #7
   17350:	andeq	r7, r1, ip, ror #7
   17354:	andeq	r7, r1, r0, ror #17
   17358:	andeq	r7, r1, ip, ror #7
   1735c:	andeq	r7, r1, ip, ror #7
   17360:	andeq	r7, r1, ip, ror #7
   17364:	andeq	r7, r1, ip, ror #7
   17368:	ldrdeq	r7, [r1], -ip
   1736c:	andeq	r7, r1, r4, ror #9
   17370:	andeq	r7, r1, ip, ror #7
   17374:	andeq	r7, r1, ip, ror #7
   17378:	andeq	r7, r1, ip, ror #7
   1737c:	andeq	r7, r1, ip, ror #7
   17380:	andeq	r7, r1, ip, ror #7
   17384:	andeq	r7, r1, ip, ror #7
   17388:	andeq	r7, r1, ip, ror #7
   1738c:	andeq	r7, r1, ip, lsr #13
   17390:	muleq	r1, ip, sl
   17394:	andeq	r7, r1, ip, ror #7
   17398:	andeq	r7, r1, ip, ror #7
   1739c:	andeq	r7, r1, ip, ror #7
   173a0:	andeq	r7, r1, r0, asr #16
   173a4:	andeq	r7, r1, ip, ror #7
   173a8:	andeq	r7, r1, ip, ror #7
   173ac:	andeq	r7, r1, ip, ror #7
   173b0:	andeq	r7, r1, r0, lsl r6
   173b4:	andeq	r7, r1, ip, ror #7
   173b8:	muleq	r1, ip, r9
   173bc:	andeq	r7, r1, ip, ror #7
   173c0:	andeq	r7, r1, ip, ror #7
   173c4:	andeq	r7, r1, ip, ror #7
   173c8:	andeq	r7, r1, ip, ror #7
   173cc:	andeq	r7, r1, ip, ror #7
   173d0:	andeq	r7, r1, ip, ror #7
   173d4:	andeq	r7, r1, r0, ror #17
   173d8:	mov	r0, r3
   173dc:	mov	r1, sl
   173e0:	bl	10e10 <strchr@plt>
   173e4:	cmp	r0, #0
   173e8:	bne	17204 <__assert_fail@plt+0x6304>
   173ec:	orr	r4, r4, #2
   173f0:	b	171ac <__assert_fail@plt+0x62ac>
   173f4:	mov	fp, #1
   173f8:	mov	lr, #1024	; 0x400
   173fc:	sub	sl, sl, #66	; 0x42
   17400:	cmp	sl, #53	; 0x35
   17404:	ldrls	pc, [pc, sl, lsl #2]
   17408:	b	173ec <__assert_fail@plt+0x64ec>
   1740c:	andeq	r7, r1, r0, lsl #19
   17410:	andeq	r7, r1, ip, ror #7
   17414:	andeq	r7, r1, ip, ror #7
   17418:	andeq	r7, r1, r4, lsl #20
   1741c:	andeq	r7, r1, ip, ror #7
   17420:	andeq	r7, r1, r8, asr #16
   17424:	andeq	r7, r1, ip, ror #7
   17428:	andeq	r7, r1, ip, ror #7
   1742c:	andeq	r7, r1, ip, ror #7
   17430:	andeq	r7, r1, r8, lsl r6
   17434:	andeq	r7, r1, ip, ror #7
   17438:	andeq	r7, r1, r4, lsr #19
   1743c:	andeq	r7, r1, ip, ror #7
   17440:	andeq	r7, r1, ip, ror #7
   17444:	andeq	r7, r1, r8, lsr #15
   17448:	andeq	r7, r1, ip, ror #7
   1744c:	andeq	r7, r1, ip, ror #7
   17450:	andeq	r7, r1, ip, ror #7
   17454:	andeq	r7, r1, r8, ror #17
   17458:	andeq	r7, r1, ip, ror #7
   1745c:	andeq	r7, r1, ip, ror #7
   17460:	andeq	r7, r1, ip, ror #7
   17464:	andeq	r7, r1, ip, ror #7
   17468:	andeq	r7, r1, r4, ror #13
   1746c:	andeq	r7, r1, ip, ror #9
   17470:	andeq	r7, r1, ip, ror #7
   17474:	andeq	r7, r1, ip, ror #7
   17478:	andeq	r7, r1, ip, ror #7
   1747c:	andeq	r7, r1, ip, ror #7
   17480:	andeq	r7, r1, ip, ror #7
   17484:	andeq	r7, r1, ip, ror #7
   17488:	andeq	r7, r1, ip, ror #7
   1748c:			; <UNDEFINED> instruction: 0x000176b0
   17490:	strdeq	r7, [r1], -r8
   17494:	andeq	r7, r1, ip, ror #7
   17498:	andeq	r7, r1, ip, ror #7
   1749c:	andeq	r7, r1, ip, ror #7
   174a0:	andeq	r7, r1, r8, asr #16
   174a4:	andeq	r7, r1, ip, ror #7
   174a8:	andeq	r7, r1, ip, ror #7
   174ac:	andeq	r7, r1, ip, ror #7
   174b0:	andeq	r7, r1, r8, lsl r6
   174b4:	andeq	r7, r1, ip, ror #7
   174b8:	andeq	r7, r1, r4, lsr #19
   174bc:	andeq	r7, r1, ip, ror #7
   174c0:	andeq	r7, r1, ip, ror #7
   174c4:	andeq	r7, r1, ip, ror #7
   174c8:	andeq	r7, r1, ip, ror #7
   174cc:	andeq	r7, r1, ip, ror #7
   174d0:	andeq	r7, r1, ip, ror #7
   174d4:	andeq	r7, r1, r8, ror #17
   174d8:	andeq	r7, r1, ip, ror #7
   174dc:	andeq	r7, r1, ip, ror #7
   174e0:	andeq	r7, r1, r4, lsl #13
   174e4:	mov	fp, #1
   174e8:	mov	lr, #1024	; 0x400
   174ec:	asr	r3, lr, #31
   174f0:	mov	r2, lr
   174f4:	mov	r1, #0
   174f8:	cmp	r7, r6, asr #31
   174fc:	strd	r2, [sp]
   17500:	bne	17c10 <__assert_fail@plt+0x6d10>
   17504:	smull	r2, r3, r6, lr
   17508:	mov	ip, r2
   1750c:	cmp	r1, #0
   17510:	bne	17aa4 <__assert_fail@plt+0x6ba4>
   17514:	mov	r6, ip
   17518:	mov	r7, r3
   1751c:	cmp	r3, r6, asr #31
   17520:	mov	ip, r1
   17524:	bne	17744 <__assert_fail@plt+0x6844>
   17528:	smull	r2, r3, r6, lr
   1752c:	mov	sl, r2
   17530:	subs	r1, ip, #0
   17534:	bne	17aa4 <__assert_fail@plt+0x6ba4>
   17538:	cmp	r3, sl, asr #31
   1753c:	mov	r6, sl
   17540:	mov	ip, r1
   17544:	mov	r7, r3
   17548:	bne	17a40 <__assert_fail@plt+0x6b40>
   1754c:	smull	r2, r3, r6, lr
   17550:	mov	sl, r2
   17554:	subs	r1, ip, #0
   17558:	bne	17aa4 <__assert_fail@plt+0x6ba4>
   1755c:	cmp	r3, sl, asr #31
   17560:	mov	r6, sl
   17564:	mov	ip, r1
   17568:	mov	r7, r3
   1756c:	bne	177e4 <__assert_fail@plt+0x68e4>
   17570:	smull	r2, r3, r6, lr
   17574:	mov	sl, r2
   17578:	subs	r1, ip, #0
   1757c:	bne	17aa4 <__assert_fail@plt+0x6ba4>
   17580:	cmp	r3, sl, asr #31
   17584:	mov	r6, sl
   17588:	mov	ip, r1
   1758c:	mov	r7, r3
   17590:	bne	17924 <__assert_fail@plt+0x6a24>
   17594:	smull	r2, r3, r6, lr
   17598:	mov	sl, r2
   1759c:	subs	r1, ip, #0
   175a0:	bne	17aa4 <__assert_fail@plt+0x6ba4>
   175a4:	cmp	r3, sl, asr #31
   175a8:	mov	r6, sl
   175ac:	mov	ip, r1
   175b0:	mov	r7, r3
   175b4:	bne	17884 <__assert_fail@plt+0x6984>
   175b8:	smull	r2, r3, r6, lr
   175bc:	mov	sl, r2
   175c0:	cmp	ip, #0
   175c4:	bne	17aa4 <__assert_fail@plt+0x6ba4>
   175c8:	cmp	r3, sl, asr #31
   175cc:	mov	r0, sl
   175d0:	mov	r1, r3
   175d4:	bne	17b3c <__assert_fail@plt+0x6c3c>
   175d8:	smull	r2, r3, sl, lr
   175dc:	mov	lr, r2
   175e0:	mov	r2, r3
   175e4:	cmp	ip, #0
   175e8:	moveq	r6, lr
   175ec:	moveq	r7, r2
   175f0:	bne	17ac0 <__assert_fail@plt+0x6bc0>
   175f4:	orr	r4, r4, ip
   175f8:	add	r3, r8, fp
   175fc:	str	r3, [r5]
   17600:	ldrb	r3, [r8, fp]
   17604:	cmp	r3, #0
   17608:	beq	171ac <__assert_fail@plt+0x62ac>
   1760c:	b	173ec <__assert_fail@plt+0x64ec>
   17610:	mov	fp, #1
   17614:	mov	lr, #1024	; 0x400
   17618:	cmp	r7, r6, asr #31
   1761c:	mov	r0, lr
   17620:	mov	ip, #0
   17624:	asr	r1, lr, #31
   17628:	bne	17ae8 <__assert_fail@plt+0x6be8>
   1762c:	smull	r2, r3, r6, lr
   17630:	mov	r1, r2
   17634:	mov	lr, r3
   17638:	cmp	ip, #0
   1763c:	bne	1764c <__assert_fail@plt+0x674c>
   17640:	mov	r6, r1
   17644:	mov	r7, lr
   17648:	b	175f8 <__assert_fail@plt+0x66f8>
   1764c:	cmp	r6, #0
   17650:	mov	r4, #1
   17654:	sbcs	r3, r7, #0
   17658:	blt	17678 <__assert_fail@plt+0x6778>
   1765c:	mvn	r6, #0
   17660:	mvn	r7, #-2147483648	; 0x80000000
   17664:	b	175f8 <__assert_fail@plt+0x66f8>
   17668:	cmp	r0, #0
   1766c:	mov	r4, #1
   17670:	sbcs	r3, r1, #0
   17674:	bge	1765c <__assert_fail@plt+0x675c>
   17678:	mov	r6, #0
   1767c:	mov	r7, #-2147483648	; 0x80000000
   17680:	b	175f8 <__assert_fail@plt+0x66f8>
   17684:	cmp	r7, r6, asr #31
   17688:	mov	r1, #0
   1768c:	bne	17da8 <__assert_fail@plt+0x6ea8>
   17690:	adds	ip, r6, r6
   17694:	adc	r3, r7, r7
   17698:	cmp	r1, #0
   1769c:	bne	1764c <__assert_fail@plt+0x674c>
   176a0:	mov	r6, ip
   176a4:	mov	r7, r3
   176a8:	b	175f8 <__assert_fail@plt+0x66f8>
   176ac:	mov	fp, #1
   176b0:	cmp	r7, r6, asr #31
   176b4:	mov	ip, #0
   176b8:	bne	17e00 <__assert_fail@plt+0x6f00>
   176bc:	lsl	r3, r7, #9
   176c0:	lsl	r2, r6, #9
   176c4:	orr	r3, r3, r6, lsr #23
   176c8:	cmp	ip, #0
   176cc:	bne	1764c <__assert_fail@plt+0x674c>
   176d0:	mov	r6, r2
   176d4:	mov	r7, r3
   176d8:	b	175f8 <__assert_fail@plt+0x66f8>
   176dc:	mov	fp, #1
   176e0:	mov	lr, #1024	; 0x400
   176e4:	asr	r3, lr, #31
   176e8:	mov	r2, lr
   176ec:	mov	r1, #0
   176f0:	cmp	r7, r6, asr #31
   176f4:	strd	r2, [sp]
   176f8:	bne	17c90 <__assert_fail@plt+0x6d90>
   176fc:	smull	r2, r3, r6, lr
   17700:	mov	ip, r2
   17704:	cmp	r1, #0
   17708:	bne	17aa4 <__assert_fail@plt+0x6ba4>
   1770c:	mov	r6, ip
   17710:	mov	r7, r3
   17714:	cmp	r3, r6, asr #31
   17718:	mov	ip, r1
   1771c:	bne	17e54 <__assert_fail@plt+0x6f54>
   17720:	smull	r2, r3, r6, lr
   17724:	mov	sl, r2
   17728:	subs	r1, ip, #0
   1772c:	bne	17aa4 <__assert_fail@plt+0x6ba4>
   17730:	cmp	r3, sl, asr #31
   17734:	mov	r6, sl
   17738:	mov	ip, r1
   1773c:	mov	r7, r3
   17740:	beq	17528 <__assert_fail@plt+0x6628>
   17744:	umull	r0, r1, r6, lr
   17748:	cmp	r3, #0
   1774c:	umull	r2, r3, lr, r3
   17750:	strd	r0, [sp, #16]
   17754:	mov	r0, r2
   17758:	mov	r1, r3
   1775c:	strd	r0, [sp, #8]
   17760:	bge	17778 <__assert_fail@plt+0x6878>
   17764:	subs	r3, r0, ip
   17768:	str	r3, [sp, #8]
   1776c:	ldr	r3, [sp, #12]
   17770:	sbc	r3, r3, lr
   17774:	str	r3, [sp, #12]
   17778:	ldr	r1, [sp, #8]
   1777c:	mov	r2, #0
   17780:	ldr	r3, [sp, #20]
   17784:	adds	r3, r1, r3
   17788:	ldr	r1, [sp, #12]
   1778c:	adc	r2, r1, r2
   17790:	cmp	r2, r3, asr #31
   17794:	bne	180a8 <__assert_fail@plt+0x71a8>
   17798:	ldr	sl, [sp, #16]
   1779c:	b	17530 <__assert_fail@plt+0x6630>
   177a0:	mov	fp, #1
   177a4:	mov	lr, #1024	; 0x400
   177a8:	asr	r3, lr, #31
   177ac:	mov	r2, lr
   177b0:	mov	r1, #0
   177b4:	cmp	r7, r6, asr #31
   177b8:	strd	r2, [sp]
   177bc:	bne	17bd0 <__assert_fail@plt+0x6cd0>
   177c0:	smull	r2, r3, r6, lr
   177c4:	mov	ip, r2
   177c8:	cmp	r1, #0
   177cc:	bne	17aa4 <__assert_fail@plt+0x6ba4>
   177d0:	mov	r6, ip
   177d4:	mov	r7, r3
   177d8:	cmp	r3, r6, asr #31
   177dc:	mov	ip, r1
   177e0:	beq	17570 <__assert_fail@plt+0x6670>
   177e4:	umull	r0, r1, r6, lr
   177e8:	cmp	r3, #0
   177ec:	umull	r2, r3, lr, r3
   177f0:	strd	r0, [sp, #16]
   177f4:	mov	r0, r2
   177f8:	mov	r1, r3
   177fc:	strd	r0, [sp, #8]
   17800:	bge	17818 <__assert_fail@plt+0x6918>
   17804:	subs	r3, r0, ip
   17808:	str	r3, [sp, #8]
   1780c:	ldr	r3, [sp, #12]
   17810:	sbc	r3, r3, lr
   17814:	str	r3, [sp, #12]
   17818:	ldr	r1, [sp, #8]
   1781c:	mov	r2, #0
   17820:	ldr	r3, [sp, #20]
   17824:	adds	r3, r1, r3
   17828:	ldr	r1, [sp, #12]
   1782c:	adc	r2, r1, r2
   17830:	cmp	r2, r3, asr #31
   17834:	bne	17fd8 <__assert_fail@plt+0x70d8>
   17838:	ldr	sl, [sp, #16]
   1783c:	b	17578 <__assert_fail@plt+0x6678>
   17840:	mov	fp, #1
   17844:	mov	lr, #1024	; 0x400
   17848:	asr	r3, lr, #31
   1784c:	mov	r2, lr
   17850:	mov	r1, #0
   17854:	cmp	r7, r6, asr #31
   17858:	strd	r2, [sp]
   1785c:	bne	17b90 <__assert_fail@plt+0x6c90>
   17860:	smull	r2, r3, r6, lr
   17864:	mov	ip, r2
   17868:	cmp	r1, #0
   1786c:	bne	17aa4 <__assert_fail@plt+0x6ba4>
   17870:	mov	r6, ip
   17874:	mov	r7, r3
   17878:	cmp	r3, r6, asr #31
   1787c:	mov	ip, r1
   17880:	beq	175b8 <__assert_fail@plt+0x66b8>
   17884:	umull	r0, r1, r6, lr
   17888:	cmp	r3, #0
   1788c:	umull	r2, r3, lr, r3
   17890:	strd	r0, [sp, #16]
   17894:	mov	r0, r2
   17898:	mov	r1, r3
   1789c:	strd	r0, [sp, #8]
   178a0:	bge	178b8 <__assert_fail@plt+0x69b8>
   178a4:	subs	r3, r0, ip
   178a8:	str	r3, [sp, #8]
   178ac:	ldr	r3, [sp, #12]
   178b0:	sbc	r3, r3, lr
   178b4:	str	r3, [sp, #12]
   178b8:	ldr	r1, [sp, #8]
   178bc:	mov	r2, #0
   178c0:	ldr	r3, [sp, #20]
   178c4:	adds	r3, r1, r3
   178c8:	ldr	r1, [sp, #12]
   178cc:	adc	r2, r1, r2
   178d0:	cmp	r2, r3, asr #31
   178d4:	bne	17f48 <__assert_fail@plt+0x7048>
   178d8:	ldr	sl, [sp, #16]
   178dc:	b	175c0 <__assert_fail@plt+0x66c0>
   178e0:	mov	fp, #1
   178e4:	mov	lr, #1024	; 0x400
   178e8:	asr	r3, lr, #31
   178ec:	mov	r2, lr
   178f0:	mov	r1, #0
   178f4:	cmp	r7, r6, asr #31
   178f8:	strd	r2, [sp]
   178fc:	bne	17d68 <__assert_fail@plt+0x6e68>
   17900:	smull	r2, r3, r6, lr
   17904:	mov	ip, r2
   17908:	cmp	r1, #0
   1790c:	bne	17aa4 <__assert_fail@plt+0x6ba4>
   17910:	mov	r6, ip
   17914:	mov	r7, r3
   17918:	cmp	r3, r6, asr #31
   1791c:	mov	ip, r1
   17920:	beq	17594 <__assert_fail@plt+0x6694>
   17924:	umull	r0, r1, r6, lr
   17928:	cmp	r3, #0
   1792c:	umull	r2, r3, lr, r3
   17930:	strd	r0, [sp, #16]
   17934:	mov	r0, r2
   17938:	mov	r1, r3
   1793c:	strd	r0, [sp, #8]
   17940:	bge	17958 <__assert_fail@plt+0x6a58>
   17944:	subs	r3, r0, ip
   17948:	str	r3, [sp, #8]
   1794c:	ldr	r3, [sp, #12]
   17950:	sbc	r3, r3, lr
   17954:	str	r3, [sp, #12]
   17958:	ldr	r1, [sp, #8]
   1795c:	mov	r2, #0
   17960:	ldr	r3, [sp, #20]
   17964:	adds	r3, r1, r3
   17968:	ldr	r1, [sp, #12]
   1796c:	adc	r2, r1, r2
   17970:	cmp	r2, r3, asr #31
   17974:	bne	17f90 <__assert_fail@plt+0x7090>
   17978:	ldr	sl, [sp, #16]
   1797c:	b	1759c <__assert_fail@plt+0x669c>
   17980:	cmp	r7, r6, asr #31
   17984:	mov	ip, #0
   17988:	bne	17d10 <__assert_fail@plt+0x6e10>
   1798c:	lsl	r3, r7, #10
   17990:	lsl	r2, r6, #10
   17994:	orr	r3, r3, r6, lsr #22
   17998:	b	176c8 <__assert_fail@plt+0x67c8>
   1799c:	mov	fp, #1
   179a0:	mov	lr, #1024	; 0x400
   179a4:	asr	r3, lr, #31
   179a8:	mov	r2, lr
   179ac:	mov	r1, #0
   179b0:	cmp	r7, r6, asr #31
   179b4:	strd	r2, [sp]
   179b8:	bne	17cd0 <__assert_fail@plt+0x6dd0>
   179bc:	smull	r2, r3, r6, lr
   179c0:	mov	sl, r2
   179c4:	subs	ip, r1, #0
   179c8:	bne	1764c <__assert_fail@plt+0x674c>
   179cc:	cmp	r3, sl, asr #31
   179d0:	mov	r0, sl
   179d4:	mov	r1, r3
   179d8:	bne	17eb0 <__assert_fail@plt+0x6fb0>
   179dc:	smull	r2, r3, sl, lr
   179e0:	mov	lr, r2
   179e4:	mov	r2, r3
   179e8:	cmp	ip, #0
   179ec:	bne	17668 <__assert_fail@plt+0x6768>
   179f0:	mov	r6, lr
   179f4:	mov	r7, r2
   179f8:	b	175f8 <__assert_fail@plt+0x66f8>
   179fc:	mov	fp, #1
   17a00:	mov	lr, #1024	; 0x400
   17a04:	asr	r3, lr, #31
   17a08:	mov	r2, lr
   17a0c:	mov	r1, #0
   17a10:	cmp	r7, r6, asr #31
   17a14:	strd	r2, [sp]
   17a18:	bne	17c50 <__assert_fail@plt+0x6d50>
   17a1c:	smull	r2, r3, r6, lr
   17a20:	mov	ip, r2
   17a24:	cmp	r1, #0
   17a28:	bne	17aa4 <__assert_fail@plt+0x6ba4>
   17a2c:	mov	r6, ip
   17a30:	mov	r7, r3
   17a34:	cmp	r3, r6, asr #31
   17a38:	mov	ip, r1
   17a3c:	beq	1754c <__assert_fail@plt+0x664c>
   17a40:	umull	r0, r1, r6, lr
   17a44:	cmp	r3, #0
   17a48:	umull	r2, r3, lr, r3
   17a4c:	strd	r0, [sp, #16]
   17a50:	mov	r0, r2
   17a54:	mov	r1, r3
   17a58:	strd	r0, [sp, #8]
   17a5c:	bge	17a74 <__assert_fail@plt+0x6b74>
   17a60:	subs	r3, r0, ip
   17a64:	str	r3, [sp, #8]
   17a68:	ldr	r3, [sp, #12]
   17a6c:	sbc	r3, r3, lr
   17a70:	str	r3, [sp, #12]
   17a74:	ldr	r1, [sp, #8]
   17a78:	mov	r2, #0
   17a7c:	ldr	r3, [sp, #20]
   17a80:	adds	r3, r1, r3
   17a84:	ldr	r1, [sp, #12]
   17a88:	adc	r2, r1, r2
   17a8c:	cmp	r2, r3, asr #31
   17a90:	bne	17fb4 <__assert_fail@plt+0x70b4>
   17a94:	ldr	sl, [sp, #16]
   17a98:	b	17554 <__assert_fail@plt+0x6654>
   17a9c:	mov	fp, #1
   17aa0:	b	175f8 <__assert_fail@plt+0x66f8>
   17aa4:	cmp	r6, #0
   17aa8:	mov	ip, #1
   17aac:	sbcs	r3, r7, #0
   17ab0:	blt	17ad0 <__assert_fail@plt+0x6bd0>
   17ab4:	mvn	r6, #0
   17ab8:	mvn	r7, #-2147483648	; 0x80000000
   17abc:	b	175f4 <__assert_fail@plt+0x66f4>
   17ac0:	cmp	r0, #0
   17ac4:	mov	ip, #1
   17ac8:	sbcs	r3, r1, #0
   17acc:	bge	17ab4 <__assert_fail@plt+0x6bb4>
   17ad0:	mov	r6, #0
   17ad4:	mov	r7, #-2147483648	; 0x80000000
   17ad8:	b	175f4 <__assert_fail@plt+0x66f4>
   17adc:	mov	fp, #2
   17ae0:	mov	lr, #1000	; 0x3e8
   17ae4:	b	173fc <__assert_fail@plt+0x64fc>
   17ae8:	umull	r2, r3, r6, lr
   17aec:	cmp	r7, #0
   17af0:	strd	r2, [sp]
   17af4:	umull	r2, r3, lr, r7
   17af8:	bge	17b04 <__assert_fail@plt+0x6c04>
   17afc:	subs	r2, r2, ip
   17b00:	sbc	r3, r3, lr
   17b04:	ldr	lr, [sp, #4]
   17b08:	mov	sl, #0
   17b0c:	adds	lr, r2, lr
   17b10:	adc	sl, r3, sl
   17b14:	cmp	sl, lr, asr #31
   17b18:	bne	18068 <__assert_fail@plt+0x7168>
   17b1c:	ldr	r1, [sp]
   17b20:	b	17638 <__assert_fail@plt+0x6738>
   17b24:	ldrb	r3, [r8, #2]
   17b28:	mov	lr, #1024	; 0x400
   17b2c:	cmp	r3, #66	; 0x42
   17b30:	movne	fp, #1
   17b34:	moveq	fp, #3
   17b38:	b	173fc <__assert_fail@plt+0x64fc>
   17b3c:	cmp	r3, #0
   17b40:	umull	r6, r7, sl, lr
   17b44:	umull	r2, r3, lr, r3
   17b48:	strd	r2, [sp, #8]
   17b4c:	strd	r6, [sp, #16]
   17b50:	bge	17b68 <__assert_fail@plt+0x6c68>
   17b54:	subs	r3, r2, ip
   17b58:	str	r3, [sp, #8]
   17b5c:	ldr	r3, [sp, #12]
   17b60:	sbc	r3, r3, lr
   17b64:	str	r3, [sp, #12]
   17b68:	ldr	r3, [sp, #8]
   17b6c:	mov	lr, #0
   17b70:	ldr	r6, [sp, #20]
   17b74:	adds	r2, r3, r6
   17b78:	ldr	r3, [sp, #12]
   17b7c:	adc	lr, r3, lr
   17b80:	cmp	lr, r2, asr #31
   17b84:	bne	17ffc <__assert_fail@plt+0x70fc>
   17b88:	ldr	lr, [sp, #16]
   17b8c:	b	175e4 <__assert_fail@plt+0x66e4>
   17b90:	umull	r2, r3, r6, lr
   17b94:	cmp	r7, #0
   17b98:	strd	r2, [sp, #8]
   17b9c:	umull	r2, r3, lr, r7
   17ba0:	bge	17bac <__assert_fail@plt+0x6cac>
   17ba4:	subs	r2, r2, r1
   17ba8:	sbc	r3, r3, lr
   17bac:	ldr	r0, [sp, #12]
   17bb0:	mov	ip, #0
   17bb4:	adds	r0, r2, r0
   17bb8:	adc	ip, r3, ip
   17bbc:	cmp	ip, r0, asr #31
   17bc0:	bne	17f24 <__assert_fail@plt+0x7024>
   17bc4:	mov	r3, r0
   17bc8:	ldr	ip, [sp, #8]
   17bcc:	b	17868 <__assert_fail@plt+0x6968>
   17bd0:	umull	r2, r3, r6, lr
   17bd4:	cmp	r7, #0
   17bd8:	strd	r2, [sp, #8]
   17bdc:	umull	r2, r3, lr, r7
   17be0:	bge	17bec <__assert_fail@plt+0x6cec>
   17be4:	subs	r2, r2, r1
   17be8:	sbc	r3, r3, lr
   17bec:	ldr	r0, [sp, #12]
   17bf0:	mov	ip, #0
   17bf4:	adds	r0, r2, r0
   17bf8:	adc	ip, r3, ip
   17bfc:	cmp	ip, r0, asr #31
   17c00:	bne	18084 <__assert_fail@plt+0x7184>
   17c04:	mov	r3, r0
   17c08:	ldr	ip, [sp, #8]
   17c0c:	b	177c8 <__assert_fail@plt+0x68c8>
   17c10:	umull	r2, r3, r6, lr
   17c14:	cmp	r7, #0
   17c18:	strd	r2, [sp, #8]
   17c1c:	umull	r2, r3, lr, r7
   17c20:	bge	17c2c <__assert_fail@plt+0x6d2c>
   17c24:	subs	r2, r2, r1
   17c28:	sbc	r3, r3, lr
   17c2c:	ldr	r0, [sp, #12]
   17c30:	mov	ip, #0
   17c34:	adds	r0, r2, r0
   17c38:	adc	ip, r3, ip
   17c3c:	cmp	ip, r0, asr #31
   17c40:	bne	17f6c <__assert_fail@plt+0x706c>
   17c44:	mov	r3, r0
   17c48:	ldr	ip, [sp, #8]
   17c4c:	b	1750c <__assert_fail@plt+0x660c>
   17c50:	umull	r2, r3, r6, lr
   17c54:	cmp	r7, #0
   17c58:	strd	r2, [sp, #8]
   17c5c:	umull	r2, r3, lr, r7
   17c60:	bge	17c6c <__assert_fail@plt+0x6d6c>
   17c64:	subs	r2, r2, r1
   17c68:	sbc	r3, r3, lr
   17c6c:	ldr	r0, [sp, #12]
   17c70:	mov	ip, #0
   17c74:	adds	r0, r2, r0
   17c78:	adc	ip, r3, ip
   17c7c:	cmp	ip, r0, asr #31
   17c80:	bne	18124 <__assert_fail@plt+0x7224>
   17c84:	mov	r3, r0
   17c88:	ldr	ip, [sp, #8]
   17c8c:	b	17a24 <__assert_fail@plt+0x6b24>
   17c90:	umull	r2, r3, r6, lr
   17c94:	cmp	r7, #0
   17c98:	strd	r2, [sp, #8]
   17c9c:	umull	r2, r3, lr, r7
   17ca0:	bge	17cac <__assert_fail@plt+0x6dac>
   17ca4:	subs	r2, r2, r1
   17ca8:	sbc	r3, r3, lr
   17cac:	ldr	r0, [sp, #12]
   17cb0:	mov	ip, #0
   17cb4:	adds	r0, r2, r0
   17cb8:	adc	ip, r3, ip
   17cbc:	cmp	ip, r0, asr #31
   17cc0:	bne	18020 <__assert_fail@plt+0x7120>
   17cc4:	mov	r3, r0
   17cc8:	ldr	ip, [sp, #8]
   17ccc:	b	17704 <__assert_fail@plt+0x6804>
   17cd0:	umull	r2, r3, r6, lr
   17cd4:	cmp	r7, #0
   17cd8:	strd	r2, [sp, #8]
   17cdc:	umull	r2, r3, lr, r7
   17ce0:	bge	17cec <__assert_fail@plt+0x6dec>
   17ce4:	subs	r2, r2, r1
   17ce8:	sbc	r3, r3, lr
   17cec:	ldr	r0, [sp, #12]
   17cf0:	mov	ip, #0
   17cf4:	adds	r0, r2, r0
   17cf8:	adc	ip, r3, ip
   17cfc:	cmp	ip, r0, asr #31
   17d00:	bne	180cc <__assert_fail@plt+0x71cc>
   17d04:	mov	r3, r0
   17d08:	ldr	sl, [sp, #8]
   17d0c:	b	179c4 <__assert_fail@plt+0x6ac4>
   17d10:	mov	r2, r6
   17d14:	mov	r3, #0
   17d18:	mov	lr, #1024	; 0x400
   17d1c:	cmp	r7, #0
   17d20:	strd	r2, [sp]
   17d24:	lsr	r3, r6, #22
   17d28:	ldr	r2, [sp]
   17d2c:	umull	r0, r1, lr, r7
   17d30:	lsl	r2, r2, #10
   17d34:	bge	17d40 <__assert_fail@plt+0x6e40>
   17d38:	subs	r0, r0, ip
   17d3c:	sbc	r1, r1, lr
   17d40:	adds	r3, r0, r3
   17d44:	mov	lr, #0
   17d48:	adc	r1, r1, lr
   17d4c:	cmp	r1, r3, asr #31
   17d50:	beq	176c8 <__assert_fail@plt+0x67c8>
   17d54:	lsl	r3, r7, #10
   17d58:	mov	ip, #1
   17d5c:	lsl	r2, r6, #10
   17d60:	orr	r3, r3, r6, lsr #22
   17d64:	b	176c8 <__assert_fail@plt+0x67c8>
   17d68:	umull	r2, r3, r6, lr
   17d6c:	cmp	r7, #0
   17d70:	strd	r2, [sp, #8]
   17d74:	umull	r2, r3, lr, r7
   17d78:	bge	17d84 <__assert_fail@plt+0x6e84>
   17d7c:	subs	r2, r2, r1
   17d80:	sbc	r3, r3, lr
   17d84:	ldr	r0, [sp, #12]
   17d88:	mov	ip, #0
   17d8c:	adds	r0, r2, r0
   17d90:	adc	ip, r3, ip
   17d94:	cmp	ip, r0, asr #31
   17d98:	bne	180f0 <__assert_fail@plt+0x71f0>
   17d9c:	mov	r3, r0
   17da0:	ldr	ip, [sp, #8]
   17da4:	b	17908 <__assert_fail@plt+0x6a08>
   17da8:	mov	lr, #2
   17dac:	mov	r3, #0
   17db0:	adds	ip, r6, r6
   17db4:	adc	r0, r3, r3
   17db8:	umull	r2, r3, lr, r7
   17dbc:	cmp	r7, #0
   17dc0:	strd	r2, [sp]
   17dc4:	bge	17ddc <__assert_fail@plt+0x6edc>
   17dc8:	subs	r3, r2, r1
   17dcc:	str	r3, [sp]
   17dd0:	ldr	r3, [sp, #4]
   17dd4:	sbc	r3, r3, lr
   17dd8:	str	r3, [sp, #4]
   17ddc:	ldr	r3, [sp]
   17de0:	mov	lr, #0
   17de4:	adds	r2, r3, r0
   17de8:	ldr	r3, [sp, #4]
   17dec:	adc	r3, r3, lr
   17df0:	cmp	r3, r2, asr #31
   17df4:	bne	18114 <__assert_fail@plt+0x7214>
   17df8:	mov	r3, r2
   17dfc:	b	17698 <__assert_fail@plt+0x6798>
   17e00:	mov	r2, r6
   17e04:	mov	r3, #0
   17e08:	mov	lr, #512	; 0x200
   17e0c:	cmp	r7, #0
   17e10:	strd	r2, [sp]
   17e14:	lsr	r3, r6, #23
   17e18:	ldr	r2, [sp]
   17e1c:	umull	r0, r1, lr, r7
   17e20:	lsl	r2, r2, #9
   17e24:	bge	17e30 <__assert_fail@plt+0x6f30>
   17e28:	subs	r0, r0, ip
   17e2c:	sbc	r1, r1, lr
   17e30:	adds	r3, r0, r3
   17e34:	mov	lr, #0
   17e38:	adc	r1, r1, lr
   17e3c:	cmp	r1, r3, asr #31
   17e40:	lslne	r3, r7, #9
   17e44:	movne	ip, #1
   17e48:	lslne	r2, r6, #9
   17e4c:	orrne	r3, r3, r6, lsr #23
   17e50:	b	176c8 <__assert_fail@plt+0x67c8>
   17e54:	umull	r0, r1, r6, lr
   17e58:	cmp	r3, #0
   17e5c:	umull	r2, r3, lr, r3
   17e60:	strd	r0, [sp, #16]
   17e64:	mov	r0, r2
   17e68:	mov	r1, r3
   17e6c:	strd	r0, [sp, #8]
   17e70:	bge	17e88 <__assert_fail@plt+0x6f88>
   17e74:	subs	r3, r0, ip
   17e78:	str	r3, [sp, #8]
   17e7c:	ldr	r3, [sp, #12]
   17e80:	sbc	r3, r3, lr
   17e84:	str	r3, [sp, #12]
   17e88:	ldr	r1, [sp, #8]
   17e8c:	mov	r2, #0
   17e90:	ldr	r3, [sp, #20]
   17e94:	adds	r3, r1, r3
   17e98:	ldr	r1, [sp, #12]
   17e9c:	adc	r2, r1, r2
   17ea0:	cmp	r2, r3, asr #31
   17ea4:	bne	18044 <__assert_fail@plt+0x7144>
   17ea8:	ldr	sl, [sp, #16]
   17eac:	b	17728 <__assert_fail@plt+0x6828>
   17eb0:	cmp	r3, #0
   17eb4:	umull	r6, r7, sl, lr
   17eb8:	umull	r2, r3, lr, r3
   17ebc:	strd	r2, [sp, #8]
   17ec0:	strd	r6, [sp, #16]
   17ec4:	bge	17edc <__assert_fail@plt+0x6fdc>
   17ec8:	subs	r3, r2, ip
   17ecc:	str	r3, [sp, #8]
   17ed0:	ldr	r3, [sp, #12]
   17ed4:	sbc	r3, r3, lr
   17ed8:	str	r3, [sp, #12]
   17edc:	ldr	r3, [sp, #8]
   17ee0:	mov	lr, #0
   17ee4:	ldr	r6, [sp, #20]
   17ee8:	adds	r2, r3, r6
   17eec:	ldr	r3, [sp, #12]
   17ef0:	adc	lr, r3, lr
   17ef4:	cmp	lr, r2, asr #31
   17ef8:	bne	18148 <__assert_fail@plt+0x7248>
   17efc:	ldr	lr, [sp, #16]
   17f00:	b	179e8 <__assert_fail@plt+0x6ae8>
   17f04:	movw	r3, #37212	; 0x915c
   17f08:	movt	r3, #1
   17f0c:	movw	r1, #37224	; 0x9168
   17f10:	movt	r1, #1
   17f14:	movw	r0, #37240	; 0x9178
   17f18:	movt	r0, #1
   17f1c:	mov	r2, #85	; 0x55
   17f20:	bl	10f00 <__assert_fail@plt>
   17f24:	ldrd	r2, [sp]
   17f28:	mov	r1, #1
   17f2c:	ldr	ip, [sp]
   17f30:	mul	r0, r6, r3
   17f34:	umull	r2, r3, r6, r2
   17f38:	mla	r0, ip, r7, r0
   17f3c:	mov	ip, r2
   17f40:	add	r3, r0, r3
   17f44:	b	17868 <__assert_fail@plt+0x6968>
   17f48:	ldrd	r2, [sp]
   17f4c:	mov	ip, #1
   17f50:	ldr	r1, [sp]
   17f54:	mul	r0, r6, r3
   17f58:	umull	r2, r3, r6, r2
   17f5c:	mla	r0, r1, r7, r0
   17f60:	mov	sl, r2
   17f64:	add	r3, r0, r3
   17f68:	b	175c0 <__assert_fail@plt+0x66c0>
   17f6c:	ldrd	r2, [sp]
   17f70:	mov	r1, #1
   17f74:	ldr	ip, [sp]
   17f78:	mul	r0, r6, r3
   17f7c:	umull	r2, r3, r6, r2
   17f80:	mla	r0, ip, r7, r0
   17f84:	mov	ip, r2
   17f88:	add	r3, r0, r3
   17f8c:	b	1750c <__assert_fail@plt+0x660c>
   17f90:	ldrd	r2, [sp]
   17f94:	mov	ip, #1
   17f98:	ldr	r1, [sp]
   17f9c:	mul	r0, r6, r3
   17fa0:	umull	r2, r3, r6, r2
   17fa4:	mla	r0, r1, r7, r0
   17fa8:	mov	sl, r2
   17fac:	add	r3, r0, r3
   17fb0:	b	1759c <__assert_fail@plt+0x669c>
   17fb4:	ldrd	r2, [sp]
   17fb8:	mov	ip, #1
   17fbc:	ldr	r1, [sp]
   17fc0:	mul	r0, r6, r3
   17fc4:	umull	r2, r3, r6, r2
   17fc8:	mla	r0, r1, r7, r0
   17fcc:	mov	sl, r2
   17fd0:	add	r3, r0, r3
   17fd4:	b	17554 <__assert_fail@plt+0x6654>
   17fd8:	ldrd	r2, [sp]
   17fdc:	mov	ip, #1
   17fe0:	ldr	r1, [sp]
   17fe4:	mul	r0, r6, r3
   17fe8:	umull	r2, r3, r6, r2
   17fec:	mla	r0, r1, r7, r0
   17ff0:	mov	sl, r2
   17ff4:	add	r3, r0, r3
   17ff8:	b	17578 <__assert_fail@plt+0x6678>
   17ffc:	ldrd	r2, [sp]
   18000:	mov	ip, #1
   18004:	ldr	lr, [sp]
   18008:	mul	r6, r0, r3
   1800c:	umull	r2, r3, r0, r2
   18010:	mla	r6, lr, r1, r6
   18014:	mov	lr, r2
   18018:	add	r2, r6, r3
   1801c:	b	175e4 <__assert_fail@plt+0x66e4>
   18020:	ldrd	r2, [sp]
   18024:	mov	r1, #1
   18028:	ldr	ip, [sp]
   1802c:	mul	r0, r6, r3
   18030:	umull	r2, r3, r6, r2
   18034:	mla	r0, ip, r7, r0
   18038:	mov	ip, r2
   1803c:	add	r3, r0, r3
   18040:	b	17704 <__assert_fail@plt+0x6804>
   18044:	ldrd	r2, [sp]
   18048:	mov	ip, #1
   1804c:	ldr	r1, [sp]
   18050:	mul	r0, r6, r3
   18054:	umull	r2, r3, r6, r2
   18058:	mla	r0, r1, r7, r0
   1805c:	mov	sl, r2
   18060:	add	r3, r0, r3
   18064:	b	17728 <__assert_fail@plt+0x6828>
   18068:	mul	lr, r6, r1
   1806c:	mov	ip, #1
   18070:	umull	r2, r3, r6, r0
   18074:	mla	lr, r0, r7, lr
   18078:	mov	r1, r2
   1807c:	add	lr, lr, r3
   18080:	b	17638 <__assert_fail@plt+0x6738>
   18084:	ldrd	r2, [sp]
   18088:	mov	r1, #1
   1808c:	ldr	ip, [sp]
   18090:	mul	r0, r6, r3
   18094:	umull	r2, r3, r6, r2
   18098:	mla	r0, ip, r7, r0
   1809c:	mov	ip, r2
   180a0:	add	r3, r0, r3
   180a4:	b	177c8 <__assert_fail@plt+0x68c8>
   180a8:	ldrd	r2, [sp]
   180ac:	mov	ip, #1
   180b0:	ldr	r1, [sp]
   180b4:	mul	r0, r6, r3
   180b8:	umull	r2, r3, r6, r2
   180bc:	mla	r0, r1, r7, r0
   180c0:	mov	sl, r2
   180c4:	add	r3, r0, r3
   180c8:	b	17530 <__assert_fail@plt+0x6630>
   180cc:	ldrd	r2, [sp]
   180d0:	mov	r1, #1
   180d4:	ldr	ip, [sp]
   180d8:	mul	r0, r6, r3
   180dc:	umull	r2, r3, r6, r2
   180e0:	mla	r0, ip, r7, r0
   180e4:	mov	sl, r2
   180e8:	add	r3, r0, r3
   180ec:	b	179c4 <__assert_fail@plt+0x6ac4>
   180f0:	ldrd	r2, [sp]
   180f4:	mov	r1, #1
   180f8:	ldr	ip, [sp]
   180fc:	mul	r0, r6, r3
   18100:	umull	r2, r3, r6, r2
   18104:	mla	r0, ip, r7, r0
   18108:	mov	ip, r2
   1810c:	add	r3, r0, r3
   18110:	b	17908 <__assert_fail@plt+0x6a08>
   18114:	adds	ip, r6, r6
   18118:	mov	r1, #1
   1811c:	adc	r3, r7, r7
   18120:	b	17698 <__assert_fail@plt+0x6798>
   18124:	ldrd	r2, [sp]
   18128:	mov	r1, #1
   1812c:	ldr	ip, [sp]
   18130:	mul	r0, r6, r3
   18134:	umull	r2, r3, r6, r2
   18138:	mla	r0, ip, r7, r0
   1813c:	mov	ip, r2
   18140:	add	r3, r0, r3
   18144:	b	17a24 <__assert_fail@plt+0x6b24>
   18148:	ldrd	r2, [sp]
   1814c:	mov	ip, #1
   18150:	ldr	lr, [sp]
   18154:	mul	r6, r0, r3
   18158:	umull	r2, r3, r0, r2
   1815c:	mla	r6, lr, r1, r6
   18160:	mov	lr, r2
   18164:	add	r3, r6, r3
   18168:	mov	r2, r3
   1816c:	b	179e8 <__assert_fail@plt+0x6ae8>
   18170:	cmp	r1, #0
   18174:	cmpne	r0, #0
   18178:	beq	181c4 <__assert_fail@plt+0x72c4>
   1817c:	strd	r4, [sp, #-16]!
   18180:	umull	r4, r5, r0, r1
   18184:	str	r6, [sp, #8]
   18188:	str	lr, [sp, #12]
   1818c:	adds	r3, r5, #0
   18190:	movne	r3, #1
   18194:	cmp	r4, #0
   18198:	blt	181a4 <__assert_fail@plt+0x72a4>
   1819c:	cmp	r3, #0
   181a0:	beq	181d0 <__assert_fail@plt+0x72d0>
   181a4:	bl	10e1c <__errno_location@plt>
   181a8:	mov	r3, #12
   181ac:	ldrd	r4, [sp]
   181b0:	ldr	r6, [sp, #8]
   181b4:	add	sp, sp, #12
   181b8:	str	r3, [r0]
   181bc:	mov	r0, #0
   181c0:	pop	{pc}		; (ldr pc, [sp], #4)
   181c4:	mov	r1, #1
   181c8:	mov	r0, r1
   181cc:	b	10c9c <calloc@plt>
   181d0:	ldrd	r4, [sp]
   181d4:	ldr	r6, [sp, #8]
   181d8:	ldr	lr, [sp, #12]
   181dc:	add	sp, sp, #16
   181e0:	b	10c9c <calloc@plt>
   181e4:	cmp	r0, #0
   181e8:	beq	181f4 <__assert_fail@plt+0x72f4>
   181ec:	blt	181fc <__assert_fail@plt+0x72fc>
   181f0:	b	10db0 <malloc@plt>
   181f4:	mov	r0, #1
   181f8:	b	10db0 <malloc@plt>
   181fc:	str	r4, [sp, #-8]!
   18200:	str	lr, [sp, #4]
   18204:	bl	10e1c <__errno_location@plt>
   18208:	mov	r3, #12
   1820c:	ldr	r4, [sp]
   18210:	add	sp, sp, #4
   18214:	str	r3, [r0]
   18218:	mov	r0, #0
   1821c:	pop	{pc}		; (ldr pc, [sp], #4)
   18220:	cmp	r0, #0
   18224:	beq	1824c <__assert_fail@plt+0x734c>
   18228:	cmp	r1, #0
   1822c:	str	r4, [sp, #-8]!
   18230:	str	lr, [sp, #4]
   18234:	beq	18254 <__assert_fail@plt+0x7354>
   18238:	blt	18268 <__assert_fail@plt+0x7368>
   1823c:	ldr	r4, [sp]
   18240:	ldr	lr, [sp, #4]
   18244:	add	sp, sp, #8
   18248:	b	10d44 <realloc@plt>
   1824c:	mov	r0, r1
   18250:	b	181e4 <__assert_fail@plt+0x72e4>
   18254:	bl	1279c <__assert_fail@plt+0x189c>
   18258:	ldr	r4, [sp]
   1825c:	add	sp, sp, #4
   18260:	mov	r0, #0
   18264:	pop	{pc}		; (ldr pc, [sp], #4)
   18268:	bl	10e1c <__errno_location@plt>
   1826c:	mov	r3, #12
   18270:	str	r3, [r0]
   18274:	b	18258 <__assert_fail@plt+0x7358>
   18278:	strd	r4, [sp, #-16]!
   1827c:	mov	r4, r0
   18280:	str	r6, [sp, #8]
   18284:	str	lr, [sp, #12]
   18288:	bl	10d8c <__fpending@plt>
   1828c:	ldr	r5, [r4]
   18290:	mov	r6, r0
   18294:	mov	r0, r4
   18298:	bl	12688 <__assert_fail@plt+0x1788>
   1829c:	mov	r4, r0
   182a0:	and	r5, r5, #32
   182a4:	cmp	r5, #0
   182a8:	bne	182e0 <__assert_fail@plt+0x73e0>
   182ac:	cmp	r0, #0
   182b0:	beq	182cc <__assert_fail@plt+0x73cc>
   182b4:	cmp	r6, #0
   182b8:	bne	182f8 <__assert_fail@plt+0x73f8>
   182bc:	bl	10e1c <__errno_location@plt>
   182c0:	ldr	r4, [r0]
   182c4:	subs	r4, r4, #9
   182c8:	mvnne	r4, #0
   182cc:	mov	r0, r4
   182d0:	ldrd	r4, [sp]
   182d4:	ldr	r6, [sp, #8]
   182d8:	add	sp, sp, #12
   182dc:	pop	{pc}		; (ldr pc, [sp], #4)
   182e0:	cmp	r0, #0
   182e4:	bne	182f8 <__assert_fail@plt+0x73f8>
   182e8:	bl	10e1c <__errno_location@plt>
   182ec:	str	r4, [r0]
   182f0:	mvn	r4, #0
   182f4:	b	182cc <__assert_fail@plt+0x73cc>
   182f8:	mvn	r4, #0
   182fc:	b	182cc <__assert_fail@plt+0x73cc>
   18300:	mov	r0, #14
   18304:	str	r4, [sp, #-8]!
   18308:	str	lr, [sp, #4]
   1830c:	bl	10eac <nl_langinfo@plt>
   18310:	cmp	r0, #0
   18314:	beq	18338 <__assert_fail@plt+0x7438>
   18318:	ldrb	r2, [r0]
   1831c:	movw	r3, #37280	; 0x91a0
   18320:	movt	r3, #1
   18324:	ldr	r4, [sp]
   18328:	add	sp, sp, #4
   1832c:	cmp	r2, #0
   18330:	moveq	r0, r3
   18334:	pop	{pc}		; (ldr pc, [sp], #4)
   18338:	ldr	r4, [sp]
   1833c:	add	sp, sp, #4
   18340:	movw	r0, #37280	; 0x91a0
   18344:	movt	r0, #1
   18348:	pop	{pc}		; (ldr pc, [sp], #4)
   1834c:	strd	r4, [sp, #-20]!	; 0xffffffec
   18350:	mov	r5, r2
   18354:	strd	r6, [sp, #8]
   18358:	subs	r6, r0, #0
   1835c:	mov	r7, r1
   18360:	str	lr, [sp, #16]
   18364:	sub	sp, sp, #12
   18368:	addeq	r6, sp, #4
   1836c:	mov	r0, r6
   18370:	bl	10d98 <mbrtowc@plt>
   18374:	cmp	r5, #0
   18378:	cmnne	r0, #3
   1837c:	mov	r4, r0
   18380:	bhi	1839c <__assert_fail@plt+0x749c>
   18384:	mov	r0, r4
   18388:	add	sp, sp, #12
   1838c:	ldrd	r4, [sp]
   18390:	ldrd	r6, [sp, #8]
   18394:	add	sp, sp, #16
   18398:	pop	{pc}		; (ldr pc, [sp], #4)
   1839c:	mov	r0, #0
   183a0:	bl	183f4 <__assert_fail@plt+0x74f4>
   183a4:	cmp	r0, #0
   183a8:	bne	18384 <__assert_fail@plt+0x7484>
   183ac:	ldrb	r3, [r7]
   183b0:	mov	r4, #1
   183b4:	str	r3, [r6]
   183b8:	b	18384 <__assert_fail@plt+0x7484>
   183bc:	umull	r2, r3, r1, r2
   183c0:	cmp	r3, #0
   183c4:	bne	183d0 <__assert_fail@plt+0x74d0>
   183c8:	mov	r1, r2
   183cc:	b	18220 <__assert_fail@plt+0x7320>
   183d0:	str	r4, [sp, #-8]!
   183d4:	str	lr, [sp, #4]
   183d8:	bl	10e1c <__errno_location@plt>
   183dc:	mov	r3, #12
   183e0:	ldr	r4, [sp]
   183e4:	add	sp, sp, #4
   183e8:	str	r3, [r0]
   183ec:	mov	r0, #0
   183f0:	pop	{pc}		; (ldr pc, [sp], #4)
   183f4:	push	{lr}		; (str lr, [sp, #-4]!)
   183f8:	sub	sp, sp, #268	; 0x10c
   183fc:	movw	r2, #257	; 0x101
   18400:	add	r1, sp, #4
   18404:	bl	1844c <__assert_fail@plt+0x754c>
   18408:	cmp	r0, #0
   1840c:	movne	r0, #0
   18410:	bne	18444 <__assert_fail@plt+0x7544>
   18414:	movw	r1, #37288	; 0x91a8
   18418:	movt	r1, #1
   1841c:	add	r0, sp, #4
   18420:	bl	10cb4 <strcmp@plt>
   18424:	cmp	r0, #0
   18428:	beq	18444 <__assert_fail@plt+0x7544>
   1842c:	add	r0, sp, #4
   18430:	movw	r1, #37292	; 0x91ac
   18434:	movt	r1, #1
   18438:	bl	10cb4 <strcmp@plt>
   1843c:	adds	r0, r0, #0
   18440:	movne	r0, #1
   18444:	add	sp, sp, #268	; 0x10c
   18448:	pop	{pc}		; (ldr pc, [sp], #4)
   1844c:	strd	r4, [sp, #-16]!
   18450:	mov	r5, r1
   18454:	mov	r1, #0
   18458:	mov	r4, r2
   1845c:	str	r6, [sp, #8]
   18460:	str	lr, [sp, #12]
   18464:	bl	10e94 <setlocale@plt>
   18468:	subs	r6, r0, #0
   1846c:	beq	184ec <__assert_fail@plt+0x75ec>
   18470:	bl	10e04 <strlen@plt>
   18474:	cmp	r4, r0
   18478:	bhi	18498 <__assert_fail@plt+0x7598>
   1847c:	cmp	r4, #0
   18480:	moveq	r0, #34	; 0x22
   18484:	bne	184bc <__assert_fail@plt+0x75bc>
   18488:	ldrd	r4, [sp]
   1848c:	ldr	r6, [sp, #8]
   18490:	add	sp, sp, #12
   18494:	pop	{pc}		; (ldr pc, [sp], #4)
   18498:	add	r2, r0, #1
   1849c:	mov	r1, r6
   184a0:	mov	r0, r5
   184a4:	bl	10cfc <memcpy@plt>
   184a8:	ldrd	r4, [sp]
   184ac:	mov	r0, #0
   184b0:	ldr	r6, [sp, #8]
   184b4:	add	sp, sp, #12
   184b8:	pop	{pc}		; (ldr pc, [sp], #4)
   184bc:	sub	r4, r4, #1
   184c0:	mov	r1, r6
   184c4:	mov	r2, r4
   184c8:	mov	r0, r5
   184cc:	bl	10cfc <memcpy@plt>
   184d0:	mov	r3, #0
   184d4:	mov	r0, #34	; 0x22
   184d8:	strb	r3, [r5, r4]
   184dc:	ldrd	r4, [sp]
   184e0:	ldr	r6, [sp, #8]
   184e4:	add	sp, sp, #12
   184e8:	pop	{pc}		; (ldr pc, [sp], #4)
   184ec:	cmp	r4, #0
   184f0:	mov	r0, #22
   184f4:	strbne	r6, [r5]
   184f8:	ldrd	r4, [sp]
   184fc:	ldr	r6, [sp, #8]
   18500:	add	sp, sp, #12
   18504:	pop	{pc}		; (ldr pc, [sp], #4)
   18508:	mov	r1, #0
   1850c:	b	10e94 <setlocale@plt>
   18510:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18514:	mov	r7, r0
   18518:	ldr	r6, [pc, #72]	; 18568 <__assert_fail@plt+0x7668>
   1851c:	ldr	r5, [pc, #72]	; 1856c <__assert_fail@plt+0x766c>
   18520:	add	r6, pc, r6
   18524:	add	r5, pc, r5
   18528:	sub	r6, r6, r5
   1852c:	mov	r8, r1
   18530:	mov	r9, r2
   18534:	bl	10c7c <calloc@plt-0x20>
   18538:	asrs	r6, r6, #2
   1853c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   18540:	mov	r4, #0
   18544:	add	r4, r4, #1
   18548:	ldr	r3, [r5], #4
   1854c:	mov	r2, r9
   18550:	mov	r1, r8
   18554:	mov	r0, r7
   18558:	blx	r3
   1855c:	cmp	r6, r4
   18560:	bne	18544 <__assert_fail@plt+0x7644>
   18564:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18568:	andeq	r1, r1, ip, ror #19
   1856c:	andeq	r1, r1, r4, ror #19
   18570:	bx	lr
   18574:	ldr	r3, [pc, #12]	; 18588 <__assert_fail@plt+0x7688>
   18578:	mov	r1, #0
   1857c:	add	r3, pc, r3
   18580:	ldr	r2, [r3]
   18584:	b	10e28 <__cxa_atexit@plt>
   18588:	andeq	r1, r1, r0, ror #22

Disassembly of section .fini:

0001858c <.fini>:
   1858c:	push	{r3, lr}
   18590:	pop	{r3, pc}
