
../repos/coreutils/src/head:     file format elf32-littlearm


Disassembly of section .init:

00010cb0 <.init>:
   10cb0:	push	{r3, lr}
   10cb4:	bl	10fa0 <__assert_fail@plt+0x48>
   10cb8:	pop	{r3, pc}

Disassembly of section .plt:

00010cbc <calloc@plt-0x14>:
   10cbc:	push	{lr}		; (str lr, [sp, #-4]!)
   10cc0:	ldr	lr, [pc, #4]	; 10ccc <calloc@plt-0x4>
   10cc4:	add	lr, pc, lr
   10cc8:	ldr	pc, [lr, #8]!
   10ccc:	andeq	r7, r1, r4, lsr r3

00010cd0 <calloc@plt>:
   10cd0:	add	ip, pc, #0, 12
   10cd4:	add	ip, ip, #94208	; 0x17000
   10cd8:	ldr	pc, [ip, #820]!	; 0x334

00010cdc <fputs_unlocked@plt>:
   10cdc:	add	ip, pc, #0, 12
   10ce0:	add	ip, ip, #94208	; 0x17000
   10ce4:	ldr	pc, [ip, #812]!	; 0x32c

00010ce8 <raise@plt>:
   10ce8:	add	ip, pc, #0, 12
   10cec:	add	ip, ip, #94208	; 0x17000
   10cf0:	ldr	pc, [ip, #804]!	; 0x324

00010cf4 <strcmp@plt>:
   10cf4:	add	ip, pc, #0, 12
   10cf8:	add	ip, ip, #94208	; 0x17000
   10cfc:	ldr	pc, [ip, #796]!	; 0x31c

00010d00 <read@plt>:
   10d00:	add	ip, pc, #0, 12
   10d04:	add	ip, ip, #94208	; 0x17000
   10d08:	ldr	pc, [ip, #788]!	; 0x314

00010d0c <fflush@plt>:
   10d0c:	add	ip, pc, #0, 12
   10d10:	add	ip, ip, #94208	; 0x17000
   10d14:	ldr	pc, [ip, #780]!	; 0x30c

00010d18 <free@plt>:
   10d18:	add	ip, pc, #0, 12
   10d1c:	add	ip, ip, #94208	; 0x17000
   10d20:	ldr	pc, [ip, #772]!	; 0x304

00010d24 <_exit@plt>:
   10d24:	add	ip, pc, #0, 12
   10d28:	add	ip, ip, #94208	; 0x17000
   10d2c:	ldr	pc, [ip, #764]!	; 0x2fc

00010d30 <memcpy@plt>:
   10d30:	add	ip, pc, #0, 12
   10d34:	add	ip, ip, #94208	; 0x17000
   10d38:	ldr	pc, [ip, #756]!	; 0x2f4

00010d3c <__strtoull_internal@plt>:
   10d3c:	add	ip, pc, #0, 12
   10d40:	add	ip, ip, #94208	; 0x17000
   10d44:	ldr	pc, [ip, #748]!	; 0x2ec

00010d48 <mbsinit@plt>:
   10d48:	add	ip, pc, #0, 12
   10d4c:	add	ip, ip, #94208	; 0x17000
   10d50:	ldr	pc, [ip, #740]!	; 0x2e4

00010d54 <fwrite_unlocked@plt>:
   10d54:	add	ip, pc, #0, 12
   10d58:	add	ip, ip, #94208	; 0x17000
   10d5c:	ldr	pc, [ip, #732]!	; 0x2dc

00010d60 <memcmp@plt>:
   10d60:	add	ip, pc, #0, 12
   10d64:	add	ip, ip, #94208	; 0x17000
   10d68:	ldr	pc, [ip, #724]!	; 0x2d4

00010d6c <fputc_unlocked@plt>:
   10d6c:	add	ip, pc, #0, 12
   10d70:	add	ip, ip, #94208	; 0x17000
   10d74:	ldr	pc, [ip, #716]!	; 0x2cc

00010d78 <dcgettext@plt>:
   10d78:	add	ip, pc, #0, 12
   10d7c:	add	ip, ip, #94208	; 0x17000
   10d80:	ldr	pc, [ip, #708]!	; 0x2c4

00010d84 <realloc@plt>:
   10d84:	add	ip, pc, #0, 12
   10d88:	add	ip, ip, #94208	; 0x17000
   10d8c:	ldr	pc, [ip, #700]!	; 0x2bc

00010d90 <textdomain@plt>:
   10d90:	add	ip, pc, #0, 12
   10d94:	add	ip, ip, #94208	; 0x17000
   10d98:	ldr	pc, [ip, #692]!	; 0x2b4

00010d9c <rawmemchr@plt>:
   10d9c:	add	ip, pc, #0, 12
   10da0:	add	ip, ip, #94208	; 0x17000
   10da4:	ldr	pc, [ip, #684]!	; 0x2ac

00010da8 <iswprint@plt>:
   10da8:	add	ip, pc, #0, 12
   10dac:	add	ip, ip, #94208	; 0x17000
   10db0:	ldr	pc, [ip, #676]!	; 0x2a4

00010db4 <__fxstat64@plt>:
   10db4:	add	ip, pc, #0, 12
   10db8:	add	ip, ip, #94208	; 0x17000
   10dbc:	ldr	pc, [ip, #668]!	; 0x29c

00010dc0 <fwrite@plt>:
   10dc0:	add	ip, pc, #0, 12
   10dc4:	add	ip, ip, #94208	; 0x17000
   10dc8:	ldr	pc, [ip, #660]!	; 0x294

00010dcc <lseek64@plt>:
   10dcc:	add	ip, pc, #0, 12
   10dd0:	add	ip, ip, #94208	; 0x17000
   10dd4:	ldr	pc, [ip, #652]!	; 0x28c

00010dd8 <__ctype_get_mb_cur_max@plt>:
   10dd8:	add	ip, pc, #0, 12
   10ddc:	add	ip, ip, #94208	; 0x17000
   10de0:	ldr	pc, [ip, #644]!	; 0x284

00010de4 <__fpending@plt>:
   10de4:	add	ip, pc, #0, 12
   10de8:	add	ip, ip, #94208	; 0x17000
   10dec:	ldr	pc, [ip, #636]!	; 0x27c

00010df0 <mbrtowc@plt>:
   10df0:	add	ip, pc, #0, 12
   10df4:	add	ip, ip, #94208	; 0x17000
   10df8:	ldr	pc, [ip, #628]!	; 0x274

00010dfc <error@plt>:
   10dfc:	add	ip, pc, #0, 12
   10e00:	add	ip, ip, #94208	; 0x17000
   10e04:	ldr	pc, [ip, #620]!	; 0x26c

00010e08 <open64@plt>:
   10e08:	add	ip, pc, #0, 12
   10e0c:	add	ip, ip, #94208	; 0x17000
   10e10:	ldr	pc, [ip, #612]!	; 0x264

00010e14 <malloc@plt>:
   10e14:	add	ip, pc, #0, 12
   10e18:	add	ip, ip, #94208	; 0x17000
   10e1c:	ldr	pc, [ip, #604]!	; 0x25c

00010e20 <__libc_start_main@plt>:
   10e20:	add	ip, pc, #0, 12
   10e24:	add	ip, ip, #94208	; 0x17000
   10e28:	ldr	pc, [ip, #596]!	; 0x254

00010e2c <__freading@plt>:
   10e2c:	add	ip, pc, #0, 12
   10e30:	add	ip, ip, #94208	; 0x17000
   10e34:	ldr	pc, [ip, #588]!	; 0x24c

00010e38 <__gmon_start__@plt>:
   10e38:	add	ip, pc, #0, 12
   10e3c:	add	ip, ip, #94208	; 0x17000
   10e40:	ldr	pc, [ip, #580]!	; 0x244

00010e44 <getopt_long@plt>:
   10e44:	add	ip, pc, #0, 12
   10e48:	add	ip, ip, #94208	; 0x17000
   10e4c:	ldr	pc, [ip, #572]!	; 0x23c

00010e50 <__ctype_b_loc@plt>:
   10e50:	add	ip, pc, #0, 12
   10e54:	add	ip, ip, #94208	; 0x17000
   10e58:	ldr	pc, [ip, #564]!	; 0x234

00010e5c <exit@plt>:
   10e5c:	add	ip, pc, #0, 12
   10e60:	add	ip, ip, #94208	; 0x17000
   10e64:	ldr	pc, [ip, #556]!	; 0x22c

00010e68 <strlen@plt>:
   10e68:	add	ip, pc, #0, 12
   10e6c:	add	ip, ip, #94208	; 0x17000
   10e70:	ldr	pc, [ip, #548]!	; 0x224

00010e74 <strchr@plt>:
   10e74:	add	ip, pc, #0, 12
   10e78:	add	ip, ip, #94208	; 0x17000
   10e7c:	ldr	pc, [ip, #540]!	; 0x21c

00010e80 <memrchr@plt>:
   10e80:	add	ip, pc, #0, 12
   10e84:	add	ip, ip, #94208	; 0x17000
   10e88:	ldr	pc, [ip, #532]!	; 0x214

00010e8c <__errno_location@plt>:
   10e8c:	add	ip, pc, #0, 12
   10e90:	add	ip, ip, #94208	; 0x17000
   10e94:	ldr	pc, [ip, #524]!	; 0x20c

00010e98 <__cxa_atexit@plt>:
   10e98:	add	ip, pc, #0, 12
   10e9c:	add	ip, ip, #94208	; 0x17000
   10ea0:	ldr	pc, [ip, #516]!	; 0x204

00010ea4 <memset@plt>:
   10ea4:	add	ip, pc, #0, 12
   10ea8:	add	ip, ip, #94208	; 0x17000
   10eac:	ldr	pc, [ip, #508]!	; 0x1fc

00010eb0 <__printf_chk@plt>:
   10eb0:	add	ip, pc, #0, 12
   10eb4:	add	ip, ip, #94208	; 0x17000
   10eb8:	ldr	pc, [ip, #500]!	; 0x1f4

00010ebc <fileno@plt>:
   10ebc:	add	ip, pc, #0, 12
   10ec0:	add	ip, ip, #94208	; 0x17000
   10ec4:	ldr	pc, [ip, #492]!	; 0x1ec

00010ec8 <__fprintf_chk@plt>:
   10ec8:	add	ip, pc, #0, 12
   10ecc:	add	ip, ip, #94208	; 0x17000
   10ed0:	ldr	pc, [ip, #484]!	; 0x1e4

00010ed4 <memchr@plt>:
   10ed4:	add	ip, pc, #0, 12
   10ed8:	add	ip, ip, #94208	; 0x17000
   10edc:	ldr	pc, [ip, #476]!	; 0x1dc

00010ee0 <fclose@plt>:
   10ee0:	add	ip, pc, #0, 12
   10ee4:	add	ip, ip, #94208	; 0x17000
   10ee8:	ldr	pc, [ip, #468]!	; 0x1d4

00010eec <fseeko64@plt>:
   10eec:	add	ip, pc, #0, 12
   10ef0:	add	ip, ip, #94208	; 0x17000
   10ef4:	ldr	pc, [ip, #460]!	; 0x1cc

00010ef8 <setlocale@plt>:
   10ef8:	add	ip, pc, #0, 12
   10efc:	add	ip, ip, #94208	; 0x17000
   10f00:	ldr	pc, [ip, #452]!	; 0x1c4

00010f04 <strrchr@plt>:
   10f04:	add	ip, pc, #0, 12
   10f08:	add	ip, ip, #94208	; 0x17000
   10f0c:	ldr	pc, [ip, #444]!	; 0x1bc

00010f10 <nl_langinfo@plt>:
   10f10:	add	ip, pc, #0, 12
   10f14:	add	ip, ip, #94208	; 0x17000
   10f18:	ldr	pc, [ip, #436]!	; 0x1b4

00010f1c <clearerr_unlocked@plt>:
   10f1c:	add	ip, pc, #0, 12
   10f20:	add	ip, ip, #94208	; 0x17000
   10f24:	ldr	pc, [ip, #428]!	; 0x1ac

00010f28 <bindtextdomain@plt>:
   10f28:	add	ip, pc, #0, 12
   10f2c:	add	ip, ip, #94208	; 0x17000
   10f30:	ldr	pc, [ip, #420]!	; 0x1a4

00010f34 <strncmp@plt>:
   10f34:	add	ip, pc, #0, 12
   10f38:	add	ip, ip, #94208	; 0x17000
   10f3c:	ldr	pc, [ip, #412]!	; 0x19c

00010f40 <abort@plt>:
   10f40:	add	ip, pc, #0, 12
   10f44:	add	ip, ip, #94208	; 0x17000
   10f48:	ldr	pc, [ip, #404]!	; 0x194

00010f4c <close@plt>:
   10f4c:	add	ip, pc, #0, 12
   10f50:	add	ip, ip, #94208	; 0x17000
   10f54:	ldr	pc, [ip, #396]!	; 0x18c

00010f58 <__assert_fail@plt>:
   10f58:	add	ip, pc, #0, 12
   10f5c:	add	ip, ip, #94208	; 0x17000
   10f60:	ldr	pc, [ip, #388]!	; 0x184

Disassembly of section .text:

00010f64 <.text>:
   10f64:	mov	fp, #0
   10f68:	mov	lr, #0
   10f6c:	pop	{r1}		; (ldr r1, [sp], #4)
   10f70:	mov	r2, sp
   10f74:	push	{r2}		; (str r2, [sp, #-4]!)
   10f78:	push	{r0}		; (str r0, [sp, #-4]!)
   10f7c:	ldr	ip, [pc, #16]	; 10f94 <__assert_fail@plt+0x3c>
   10f80:	push	{ip}		; (str ip, [sp, #-4]!)
   10f84:	ldr	r0, [pc, #12]	; 10f98 <__assert_fail@plt+0x40>
   10f88:	ldr	r3, [pc, #12]	; 10f9c <__assert_fail@plt+0x44>
   10f8c:	bl	10e20 <__libc_start_main@plt>
   10f90:	bl	10f40 <abort@plt>
   10f94:	andeq	r6, r1, r8, lsr #22
   10f98:	andeq	r1, r1, ip, lsl #26
   10f9c:	andeq	r6, r1, r8, asr #21
   10fa0:	ldr	r3, [pc, #20]	; 10fbc <__assert_fail@plt+0x64>
   10fa4:	ldr	r2, [pc, #20]	; 10fc0 <__assert_fail@plt+0x68>
   10fa8:	add	r3, pc, r3
   10fac:	ldr	r2, [r3, r2]
   10fb0:	cmp	r2, #0
   10fb4:	bxeq	lr
   10fb8:	b	10e38 <__gmon_start__@plt>
   10fbc:	andeq	r7, r1, r0, asr r0
   10fc0:	andeq	r0, r0, r8, ror #1
   10fc4:	ldr	r3, [pc, #28]	; 10fe8 <__assert_fail@plt+0x90>
   10fc8:	ldr	r0, [pc, #28]	; 10fec <__assert_fail@plt+0x94>
   10fcc:	sub	r3, r3, r0
   10fd0:	cmp	r3, #6
   10fd4:	bxls	lr
   10fd8:	ldr	r3, [pc, #16]	; 10ff0 <__assert_fail@plt+0x98>
   10fdc:	cmp	r3, #0
   10fe0:	bxeq	lr
   10fe4:	bx	r3
   10fe8:	andeq	r8, r2, r3, asr #2
   10fec:	andeq	r8, r2, r0, asr #2
   10ff0:	andeq	r0, r0, r0
   10ff4:	ldr	r1, [pc, #36]	; 11020 <__assert_fail@plt+0xc8>
   10ff8:	ldr	r0, [pc, #36]	; 11024 <__assert_fail@plt+0xcc>
   10ffc:	sub	r1, r1, r0
   11000:	asr	r1, r1, #2
   11004:	add	r1, r1, r1, lsr #31
   11008:	asrs	r1, r1, #1
   1100c:	bxeq	lr
   11010:	ldr	r3, [pc, #16]	; 11028 <__assert_fail@plt+0xd0>
   11014:	cmp	r3, #0
   11018:	bxeq	lr
   1101c:	bx	r3
   11020:	andeq	r8, r2, r0, asr #2
   11024:	andeq	r8, r2, r0, asr #2
   11028:	andeq	r0, r0, r0
   1102c:	push	{r4, lr}
   11030:	ldr	r4, [pc, #24]	; 11050 <__assert_fail@plt+0xf8>
   11034:	ldrb	r3, [r4]
   11038:	cmp	r3, #0
   1103c:	popne	{r4, pc}
   11040:	bl	10fc4 <__assert_fail@plt+0x6c>
   11044:	mov	r3, #1
   11048:	strb	r3, [r4]
   1104c:	pop	{r4, pc}
   11050:	andeq	r8, r2, ip, asr r1
   11054:	ldr	r0, [pc, #40]	; 11084 <__assert_fail@plt+0x12c>
   11058:	ldr	r3, [r0]
   1105c:	cmp	r3, #0
   11060:	bne	11068 <__assert_fail@plt+0x110>
   11064:	b	10ff4 <__assert_fail@plt+0x9c>
   11068:	ldr	r3, [pc, #24]	; 11088 <__assert_fail@plt+0x130>
   1106c:	cmp	r3, #0
   11070:	beq	11064 <__assert_fail@plt+0x10c>
   11074:	push	{r4, lr}
   11078:	blx	r3
   1107c:	pop	{r4, lr}
   11080:	b	10ff4 <__assert_fail@plt+0x9c>
   11084:	andeq	r7, r2, r4, lsl pc
   11088:	andeq	r0, r0, r0
   1108c:	push	{r4, lr}
   11090:	sub	sp, sp, #24
   11094:	mov	r4, r1
   11098:	cmp	r0, #0
   1109c:	mov	r2, #5
   110a0:	ldrne	r1, [pc, #64]	; 110e8 <__assert_fail@plt+0x190>
   110a4:	ldreq	r1, [pc, #64]	; 110ec <__assert_fail@plt+0x194>
   110a8:	mov	r0, #0
   110ac:	bl	10d78 <dcgettext@plt>
   110b0:	mov	r3, #0
   110b4:	str	r3, [sp, #16]
   110b8:	str	r0, [sp, #12]
   110bc:	ldr	r3, [pc, #44]	; 110f0 <__assert_fail@plt+0x198>
   110c0:	str	r3, [sp, #8]
   110c4:	mvn	r2, #0
   110c8:	mvn	r3, #0
   110cc:	strd	r2, [sp]
   110d0:	mov	r2, #0
   110d4:	mov	r3, #0
   110d8:	mov	r0, r4
   110dc:	bl	159b8 <__assert_fail@plt+0x4a60>
   110e0:	add	sp, sp, #24
   110e4:	pop	{r4, pc}
   110e8:	andeq	r6, r1, r0, lsr ip
   110ec:	andeq	r6, r1, r8, asr #24
   110f0:	andeq	r6, r1, r0, ror #24
   110f4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   110f8:	sub	sp, sp, #32
   110fc:	mov	r8, r2
   11100:	mov	r9, r3
   11104:	ldr	r6, [sp, #64]	; 0x40
   11108:	str	r6, [sp]
   1110c:	bl	10dcc <lseek64@plt>
   11110:	mov	r4, r0
   11114:	mov	r5, r1
   11118:	cmp	r0, #0
   1111c:	sbcs	r3, r1, #0
   11120:	blt	11134 <__assert_fail@plt+0x1dc>
   11124:	mov	r0, r4
   11128:	mov	r1, r5
   1112c:	add	sp, sp, #32
   11130:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11134:	bl	10e8c <__errno_location@plt>
   11138:	ldr	r7, [r0]
   1113c:	mov	r2, #5
   11140:	ldr	r3, [pc, #84]	; 1119c <__assert_fail@plt+0x244>
   11144:	ldr	r1, [pc, #84]	; 111a0 <__assert_fail@plt+0x248>
   11148:	cmp	r6, #0
   1114c:	movne	r1, r3
   11150:	mov	r0, #0
   11154:	bl	10d78 <dcgettext@plt>
   11158:	mov	r6, r0
   1115c:	ldr	r2, [sp, #68]	; 0x44
   11160:	mov	r1, #3
   11164:	mov	r0, #0
   11168:	bl	14b28 <__assert_fail@plt+0x3bd0>
   1116c:	mov	sl, r0
   11170:	add	r2, sp, #8
   11174:	mov	r0, r8
   11178:	mov	r1, r9
   1117c:	bl	13004 <__assert_fail@plt+0x20ac>
   11180:	str	r0, [sp]
   11184:	mov	r3, sl
   11188:	mov	r2, r6
   1118c:	mov	r1, r7
   11190:	mov	r0, #0
   11194:	bl	10dfc <error@plt>
   11198:	b	11124 <__assert_fail@plt+0x1cc>
   1119c:	muleq	r1, r0, ip
   111a0:	andeq	r6, r1, r0, ror ip
   111a4:	push	{r4, r5, r6, lr}
   111a8:	subs	r4, r1, #0
   111ac:	popeq	{r4, r5, r6, pc}
   111b0:	ldr	r3, [pc, #92]	; 11214 <__assert_fail@plt+0x2bc>
   111b4:	ldr	r3, [r3]
   111b8:	mov	r2, r4
   111bc:	mov	r1, #1
   111c0:	bl	10d54 <fwrite_unlocked@plt>
   111c4:	cmp	r4, r0
   111c8:	popls	{r4, r5, r6, pc}
   111cc:	ldr	r3, [pc, #64]	; 11214 <__assert_fail@plt+0x2bc>
   111d0:	ldr	r0, [r3]
   111d4:	bl	10f1c <clearerr_unlocked@plt>
   111d8:	bl	10e8c <__errno_location@plt>
   111dc:	ldr	r4, [r0]
   111e0:	mov	r2, #5
   111e4:	ldr	r1, [pc, #44]	; 11218 <__assert_fail@plt+0x2c0>
   111e8:	mov	r0, #0
   111ec:	bl	10d78 <dcgettext@plt>
   111f0:	mov	r5, r0
   111f4:	ldr	r1, [pc, #32]	; 1121c <__assert_fail@plt+0x2c4>
   111f8:	mov	r0, #4
   111fc:	bl	14a5c <__assert_fail@plt+0x3b04>
   11200:	mov	r3, r0
   11204:	mov	r2, r5
   11208:	mov	r1, r4
   1120c:	mov	r0, #1
   11210:	bl	10dfc <error@plt>
   11214:	andeq	r8, r2, r4, asr r1
   11218:			; <UNDEFINED> instruction: 0x00016cb8
   1121c:	andeq	r6, r1, ip, asr #25
   11220:	push	{r4, r5, r6, r7, lr}
   11224:	sub	sp, sp, #8192	; 0x2000
   11228:	sub	sp, sp, #4
   1122c:	mov	r4, r2
   11230:	mov	r5, r3
   11234:	orrs	r3, r4, r5
   11238:	beq	112a8 <__assert_fail@plt+0x350>
   1123c:	mov	r6, r0
   11240:	mov	r7, #8192	; 0x2000
   11244:	mov	r2, r4
   11248:	cmp	r5, #0
   1124c:	cmpeq	r4, #8192	; 0x2000
   11250:	movhi	r2, r7
   11254:	mov	r1, sp
   11258:	mov	r0, r6
   1125c:	bl	14ca4 <__assert_fail@plt+0x3d4c>
   11260:	cmn	r0, #1
   11264:	beq	112b0 <__assert_fail@plt+0x358>
   11268:	subs	r4, r4, r0
   1126c:	sbc	r5, r5, #0
   11270:	orr	r2, r4, r5
   11274:	clz	r3, r0
   11278:	lsr	r3, r3, #5
   1127c:	cmp	r2, #0
   11280:	moveq	r3, #0
   11284:	cmp	r3, #0
   11288:	bne	112c0 <__assert_fail@plt+0x368>
   1128c:	mov	r1, r0
   11290:	mov	r0, sp
   11294:	bl	111a4 <__assert_fail@plt+0x24c>
   11298:	orrs	r3, r4, r5
   1129c:	bne	11244 <__assert_fail@plt+0x2ec>
   112a0:	mov	r0, #0
   112a4:	b	112b4 <__assert_fail@plt+0x35c>
   112a8:	mov	r0, #0
   112ac:	b	112b4 <__assert_fail@plt+0x35c>
   112b0:	mov	r0, #1
   112b4:	add	sp, sp, #8192	; 0x2000
   112b8:	add	sp, sp, #4
   112bc:	pop	{r4, r5, r6, r7, pc}
   112c0:	mov	r0, #2
   112c4:	b	112b4 <__assert_fail@plt+0x35c>
   112c8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   112cc:	sub	sp, sp, #8256	; 0x2040
   112d0:	sub	sp, sp, #48	; 0x30
   112d4:	mov	r6, r2
   112d8:	mov	r7, r3
   112dc:	orrs	r3, r6, r7
   112e0:	beq	11444 <__assert_fail@plt+0x4ec>
   112e4:	mov	sl, r0
   112e8:	mov	r5, r1
   112ec:	mov	r8, #8192	; 0x2000
   112f0:	ldr	r9, [pc, #348]	; 11454 <__assert_fail@plt+0x4fc>
   112f4:	b	1140c <__assert_fail@plt+0x4b4>
   112f8:	bl	10e8c <__errno_location@plt>
   112fc:	ldr	r4, [r0]
   11300:	mov	r2, #5
   11304:	ldr	r1, [pc, #332]	; 11458 <__assert_fail@plt+0x500>
   11308:	mov	r0, #0
   1130c:	bl	10d78 <dcgettext@plt>
   11310:	mov	r5, r0
   11314:	mov	r1, sl
   11318:	mov	r0, #4
   1131c:	bl	14a5c <__assert_fail@plt+0x3b04>
   11320:	mov	r3, r0
   11324:	mov	r2, r5
   11328:	mov	r1, r4
   1132c:	mov	r0, #0
   11330:	bl	10dfc <error@plt>
   11334:	mov	r0, #0
   11338:	b	113ec <__assert_fail@plt+0x494>
   1133c:	add	r2, sp, #8
   11340:	mov	r1, r5
   11344:	mov	r0, #3
   11348:	bl	10db4 <__fxstat64@plt>
   1134c:	cmp	r0, #0
   11350:	bne	11364 <__assert_fail@plt+0x40c>
   11354:	ldr	r3, [sp, #24]
   11358:	and	r3, r3, #61440	; 0xf000
   1135c:	cmp	r3, #32768	; 0x8000
   11360:	bne	113dc <__assert_fail@plt+0x484>
   11364:	str	sl, [sp, #4]
   11368:	mov	r3, #1
   1136c:	str	r3, [sp]
   11370:	mov	r2, r6
   11374:	mov	r3, r7
   11378:	mov	r0, r5
   1137c:	bl	110f4 <__assert_fail@plt+0x19c>
   11380:	b	113dc <__assert_fail@plt+0x484>
   11384:	cmp	r0, r4
   11388:	beq	113f8 <__assert_fail@plt+0x4a0>
   1138c:	add	r4, r4, #1
   11390:	ldrb	r2, [r3, #1]!
   11394:	cmp	r2, r1
   11398:	bne	11384 <__assert_fail@plt+0x42c>
   1139c:	subs	r6, r6, #1
   113a0:	sbc	r7, r7, #0
   113a4:	orrs	r2, r6, r7
   113a8:	bne	11384 <__assert_fail@plt+0x42c>
   113ac:	sub	r0, r0, r4
   113b0:	rsbs	r6, r0, #0
   113b4:	sbc	r7, r7, r7
   113b8:	mov	r3, #1
   113bc:	str	r3, [sp]
   113c0:	mov	r2, r6
   113c4:	mov	r3, r7
   113c8:	mov	r0, r5
   113cc:	bl	10dcc <lseek64@plt>
   113d0:	cmp	r0, #0
   113d4:	sbcs	r3, r1, #0
   113d8:	blt	1133c <__assert_fail@plt+0x3e4>
   113dc:	mov	r1, r4
   113e0:	add	r0, sp, #112	; 0x70
   113e4:	bl	111a4 <__assert_fail@plt+0x24c>
   113e8:	mov	r0, #1
   113ec:	add	sp, sp, #8256	; 0x2040
   113f0:	add	sp, sp, #48	; 0x30
   113f4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   113f8:	mov	r1, r4
   113fc:	add	r0, sp, #112	; 0x70
   11400:	bl	111a4 <__assert_fail@plt+0x24c>
   11404:	orrs	r3, r6, r7
   11408:	beq	1143c <__assert_fail@plt+0x4e4>
   1140c:	mov	r2, r8
   11410:	add	r1, sp, #112	; 0x70
   11414:	mov	r0, r5
   11418:	bl	14ca4 <__assert_fail@plt+0x3d4c>
   1141c:	cmn	r0, #1
   11420:	beq	112f8 <__assert_fail@plt+0x3a0>
   11424:	cmp	r0, #0
   11428:	beq	1144c <__assert_fail@plt+0x4f4>
   1142c:	ldrb	r1, [r9]
   11430:	add	r3, sp, #111	; 0x6f
   11434:	mov	r4, #0
   11438:	b	1138c <__assert_fail@plt+0x434>
   1143c:	mov	r0, #1
   11440:	b	113ec <__assert_fail@plt+0x494>
   11444:	mov	r0, #1
   11448:	b	113ec <__assert_fail@plt+0x494>
   1144c:	mov	r0, #1
   11450:	b	113ec <__assert_fail@plt+0x494>
   11454:	andeq	r8, r2, sp, asr r1
   11458:	ldrdeq	r6, [r1], -ip
   1145c:	push	{r4, r5, r6, r7, r8, r9, lr}
   11460:	sub	sp, sp, #8192	; 0x2000
   11464:	sub	sp, sp, #4
   11468:	mov	r4, r2
   1146c:	mov	r5, r3
   11470:	orrs	r3, r4, r5
   11474:	beq	11528 <__assert_fail@plt+0x5d0>
   11478:	mov	r9, r0
   1147c:	mov	r8, r1
   11480:	mov	r7, #8192	; 0x2000
   11484:	mov	r3, #0
   11488:	cmp	r3, r5
   1148c:	cmpeq	r7, r4
   11490:	movhi	r7, r4
   11494:	mov	r2, r7
   11498:	mov	r1, sp
   1149c:	mov	r0, r8
   114a0:	bl	14ca4 <__assert_fail@plt+0x3d4c>
   114a4:	mov	r6, r0
   114a8:	cmn	r0, #1
   114ac:	beq	114dc <__assert_fail@plt+0x584>
   114b0:	cmp	r0, #0
   114b4:	beq	11530 <__assert_fail@plt+0x5d8>
   114b8:	mov	r1, r0
   114bc:	mov	r0, sp
   114c0:	bl	111a4 <__assert_fail@plt+0x24c>
   114c4:	subs	r4, r4, r6
   114c8:	sbc	r5, r5, #0
   114cc:	orrs	r3, r4, r5
   114d0:	bne	11484 <__assert_fail@plt+0x52c>
   114d4:	mov	r0, #1
   114d8:	b	1151c <__assert_fail@plt+0x5c4>
   114dc:	bl	10e8c <__errno_location@plt>
   114e0:	ldr	r4, [r0]
   114e4:	mov	r2, #5
   114e8:	ldr	r1, [pc, #72]	; 11538 <__assert_fail@plt+0x5e0>
   114ec:	mov	r0, #0
   114f0:	bl	10d78 <dcgettext@plt>
   114f4:	mov	r5, r0
   114f8:	mov	r1, r9
   114fc:	mov	r0, #4
   11500:	bl	14a5c <__assert_fail@plt+0x3b04>
   11504:	mov	r3, r0
   11508:	mov	r2, r5
   1150c:	mov	r1, r4
   11510:	mov	r0, #0
   11514:	bl	10dfc <error@plt>
   11518:	mov	r0, #0
   1151c:	add	sp, sp, #8192	; 0x2000
   11520:	add	sp, sp, #4
   11524:	pop	{r4, r5, r6, r7, r8, r9, pc}
   11528:	mov	r0, #1
   1152c:	b	1151c <__assert_fail@plt+0x5c4>
   11530:	mov	r0, #1
   11534:	b	1151c <__assert_fail@plt+0x5c4>
   11538:	ldrdeq	r6, [r1], -ip
   1153c:	push	{r4, r5, r6, lr}
   11540:	mov	r4, r1
   11544:	cmp	r0, #1
   11548:	beq	11558 <__assert_fail@plt+0x600>
   1154c:	cmp	r0, #2
   11550:	beq	11598 <__assert_fail@plt+0x640>
   11554:	bl	10f40 <abort@plt>
   11558:	bl	10e8c <__errno_location@plt>
   1155c:	ldr	r5, [r0]
   11560:	mov	r2, #5
   11564:	ldr	r1, [pc, #112]	; 115dc <__assert_fail@plt+0x684>
   11568:	mov	r0, #0
   1156c:	bl	10d78 <dcgettext@plt>
   11570:	mov	r6, r0
   11574:	mov	r1, r4
   11578:	mov	r0, #4
   1157c:	bl	14a5c <__assert_fail@plt+0x3b04>
   11580:	mov	r3, r0
   11584:	mov	r2, r6
   11588:	mov	r1, r5
   1158c:	mov	r0, #0
   11590:	bl	10dfc <error@plt>
   11594:	pop	{r4, r5, r6, pc}
   11598:	bl	10e8c <__errno_location@plt>
   1159c:	ldr	r5, [r0]
   115a0:	mov	r2, #5
   115a4:	ldr	r1, [pc, #52]	; 115e0 <__assert_fail@plt+0x688>
   115a8:	mov	r0, #0
   115ac:	bl	10d78 <dcgettext@plt>
   115b0:	mov	r6, r0
   115b4:	mov	r2, r4
   115b8:	mov	r1, #3
   115bc:	mov	r0, #0
   115c0:	bl	14b28 <__assert_fail@plt+0x3bd0>
   115c4:	mov	r3, r0
   115c8:	mov	r2, r6
   115cc:	mov	r1, r5
   115d0:	mov	r0, #0
   115d4:	bl	10dfc <error@plt>
   115d8:	pop	{r4, r5, r6, pc}
   115dc:	ldrdeq	r6, [r1], -ip
   115e0:	strdeq	r6, [r1], -r0
   115e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   115e8:	sub	sp, sp, #8192	; 0x2000
   115ec:	sub	sp, sp, #20
   115f0:	mov	sl, r0
   115f4:	mov	ip, r1
   115f8:	mov	fp, r1
   115fc:	mov	r8, r2
   11600:	mov	r9, r3
   11604:	add	r3, sp, #8256	; 0x2040
   11608:	ldrd	r4, [r3]
   1160c:	add	r3, sp, #8192	; 0x2000
   11610:	add	r3, r3, #56	; 0x38
   11614:	ldrd	r2, [r3]
   11618:	subs	r2, r4, r2
   1161c:	sbc	r3, r5, r3
   11620:	asr	r0, r3, #31
   11624:	eor	r2, r2, r0
   11628:	subs	r2, r2, r0
   1162c:	ldr	r6, [pc, #776]	; 1193c <__assert_fail@plt+0x9e4>
   11630:	and	r2, r2, r6
   11634:	eor	r2, r2, r0
   11638:	subs	r2, r2, r0
   1163c:	mov	r6, r2
   11640:	cmp	r2, #0
   11644:	moveq	r6, #8192	; 0x2000
   11648:	subs	r2, r4, r6
   1164c:	sbc	r3, r5, #0
   11650:	mov	r0, r2
   11654:	mov	r1, r3
   11658:	strd	r0, [sp, #8]
   1165c:	str	sl, [sp, #4]
   11660:	mov	r3, #0
   11664:	str	r3, [sp]
   11668:	mov	r3, r1
   1166c:	mov	r4, ip
   11670:	mov	r0, ip
   11674:	bl	110f4 <__assert_fail@plt+0x19c>
   11678:	cmp	r0, #0
   1167c:	sbcs	r3, r1, #0
   11680:	movlt	r0, #0
   11684:	blt	1183c <__assert_fail@plt+0x8e4>
   11688:	mov	r2, r6
   1168c:	add	r1, sp, #16
   11690:	mov	r0, fp
   11694:	bl	14ca4 <__assert_fail@plt+0x3d4c>
   11698:	mov	r6, r0
   1169c:	cmn	r0, #1
   116a0:	beq	116ec <__assert_fail@plt+0x794>
   116a4:	orr	r3, r8, r9
   116a8:	cmp	r0, #0
   116ac:	cmpne	r3, #0
   116b0:	moveq	r4, r8
   116b4:	moveq	r5, r9
   116b8:	beq	116e0 <__assert_fail@plt+0x788>
   116bc:	add	r3, sp, #16
   116c0:	add	r3, r3, r0
   116c4:	ldrb	r2, [r3, #-1]
   116c8:	ldr	r3, [pc, #624]	; 11940 <__assert_fail@plt+0x9e8>
   116cc:	ldrb	r3, [r3]
   116d0:	cmp	r2, r3
   116d4:	beq	11730 <__assert_fail@plt+0x7d8>
   116d8:	subs	r4, r8, #1
   116dc:	sbc	r5, r9, #0
   116e0:	add	r7, sp, #16
   116e4:	mov	r2, r6
   116e8:	b	118cc <__assert_fail@plt+0x974>
   116ec:	bl	10e8c <__errno_location@plt>
   116f0:	ldr	r4, [r0]
   116f4:	mov	r2, #5
   116f8:	ldr	r1, [pc, #580]	; 11944 <__assert_fail@plt+0x9ec>
   116fc:	mov	r0, #0
   11700:	bl	10d78 <dcgettext@plt>
   11704:	mov	r5, r0
   11708:	mov	r1, sl
   1170c:	mov	r0, #4
   11710:	bl	14a5c <__assert_fail@plt+0x3b04>
   11714:	mov	r3, r0
   11718:	mov	r2, r5
   1171c:	mov	r1, r4
   11720:	mov	r0, #0
   11724:	bl	10dfc <error@plt>
   11728:	mov	r0, #0
   1172c:	b	1183c <__assert_fail@plt+0x8e4>
   11730:	mov	r4, r8
   11734:	mov	r5, r9
   11738:	b	116e0 <__assert_fail@plt+0x788>
   1173c:	subs	r0, r4, #1
   11740:	sbc	r1, r5, #0
   11744:	orrs	r3, r4, r5
   11748:	beq	11784 <__assert_fail@plt+0x82c>
   1174c:	cmp	r2, #0
   11750:	beq	11858 <__assert_fail@plt+0x900>
   11754:	mov	r4, r0
   11758:	mov	r5, r1
   1175c:	orrs	r3, r8, r9
   11760:	subeq	r2, r2, #1
   11764:	beq	1173c <__assert_fail@plt+0x7e4>
   11768:	mov	r1, r6
   1176c:	mov	r0, r7
   11770:	bl	10e80 <memrchr@plt>
   11774:	cmp	r0, #0
   11778:	beq	11860 <__assert_fail@plt+0x908>
   1177c:	sub	r2, r0, r7
   11780:	b	1173c <__assert_fail@plt+0x7e4>
   11784:	mov	r6, r2
   11788:	add	r3, sp, #8192	; 0x2000
   1178c:	add	r3, r3, #56	; 0x38
   11790:	ldrd	r0, [r3]
   11794:	ldrd	r4, [sp, #8]
   11798:	mov	r3, r5
   1179c:	cmp	r0, r4
   117a0:	sbcs	r3, r1, r3
   117a4:	bge	11800 <__assert_fail@plt+0x8a8>
   117a8:	str	sl, [sp, #4]
   117ac:	mov	r3, #0
   117b0:	str	r3, [sp]
   117b4:	mov	r2, r0
   117b8:	mov	r3, r1
   117bc:	mov	r0, fp
   117c0:	bl	110f4 <__assert_fail@plt+0x19c>
   117c4:	cmp	r0, #0
   117c8:	sbcs	r3, r1, #0
   117cc:	movlt	r0, #0
   117d0:	blt	1183c <__assert_fail@plt+0x8e4>
   117d4:	add	r1, sp, #8192	; 0x2000
   117d8:	add	r1, r1, #56	; 0x38
   117dc:	mov	r2, r4
   117e0:	mov	r3, r5
   117e4:	ldrd	r4, [r1]
   117e8:	subs	r2, r2, r4
   117ec:	sbc	r3, r3, r5
   117f0:	mov	r0, fp
   117f4:	bl	11220 <__assert_fail@plt+0x2c8>
   117f8:	cmp	r0, #0
   117fc:	bne	11848 <__assert_fail@plt+0x8f0>
   11800:	add	r1, r6, #1
   11804:	add	r0, sp, #16
   11808:	bl	111a4 <__assert_fail@plt+0x24c>
   1180c:	ldrd	r2, [sp, #8]
   11810:	adds	r2, r2, r6
   11814:	adc	r3, r3, #0
   11818:	str	sl, [sp, #4]
   1181c:	mov	r1, #0
   11820:	str	r1, [sp]
   11824:	adds	r2, r2, #1
   11828:	adc	r3, r3, #0
   1182c:	mov	r0, fp
   11830:	bl	110f4 <__assert_fail@plt+0x19c>
   11834:	mvn	r0, r1
   11838:	lsr	r0, r0, #31
   1183c:	add	sp, sp, #8192	; 0x2000
   11840:	add	sp, sp, #20
   11844:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11848:	mov	r1, sl
   1184c:	bl	1153c <__assert_fail@plt+0x5e4>
   11850:	mov	r0, #0
   11854:	b	1183c <__assert_fail@plt+0x8e4>
   11858:	mov	r4, r0
   1185c:	mov	r5, r1
   11860:	add	r1, sp, #8192	; 0x2000
   11864:	add	r1, r1, #56	; 0x38
   11868:	ldrd	r2, [sp, #8]
   1186c:	ldrd	r0, [r1]
   11870:	cmp	r3, r1
   11874:	cmpeq	r2, r0
   11878:	beq	1192c <__assert_fail@plt+0x9d4>
   1187c:	subs	r2, r2, #8192	; 0x2000
   11880:	sbc	r3, r3, #0
   11884:	strd	r2, [sp, #8]
   11888:	str	sl, [sp, #4]
   1188c:	mov	r1, #0
   11890:	str	r1, [sp]
   11894:	mov	r0, fp
   11898:	bl	110f4 <__assert_fail@plt+0x19c>
   1189c:	cmp	r0, #0
   118a0:	sbcs	r3, r1, #0
   118a4:	blt	11934 <__assert_fail@plt+0x9dc>
   118a8:	mov	r2, #8192	; 0x2000
   118ac:	mov	r1, r7
   118b0:	mov	r0, fp
   118b4:	bl	14ca4 <__assert_fail@plt+0x3d4c>
   118b8:	mov	r2, r0
   118bc:	cmn	r0, #1
   118c0:	beq	118e0 <__assert_fail@plt+0x988>
   118c4:	cmp	r0, #0
   118c8:	beq	11924 <__assert_fail@plt+0x9cc>
   118cc:	cmp	r2, #0
   118d0:	beq	11860 <__assert_fail@plt+0x908>
   118d4:	ldr	r3, [pc, #100]	; 11940 <__assert_fail@plt+0x9e8>
   118d8:	ldrb	r6, [r3]
   118dc:	b	1175c <__assert_fail@plt+0x804>
   118e0:	bl	10e8c <__errno_location@plt>
   118e4:	ldr	r4, [r0]
   118e8:	mov	r2, #5
   118ec:	ldr	r1, [pc, #80]	; 11944 <__assert_fail@plt+0x9ec>
   118f0:	mov	r0, #0
   118f4:	bl	10d78 <dcgettext@plt>
   118f8:	mov	r5, r0
   118fc:	mov	r1, sl
   11900:	mov	r0, #4
   11904:	bl	14a5c <__assert_fail@plt+0x3b04>
   11908:	mov	r3, r0
   1190c:	mov	r2, r5
   11910:	mov	r1, r4
   11914:	mov	r0, #0
   11918:	bl	10dfc <error@plt>
   1191c:	mov	r0, #0
   11920:	b	1183c <__assert_fail@plt+0x8e4>
   11924:	mov	r0, #1
   11928:	b	1183c <__assert_fail@plt+0x8e4>
   1192c:	mov	r0, #1
   11930:	b	1183c <__assert_fail@plt+0x8e4>
   11934:	mov	r0, #0
   11938:	b	1183c <__assert_fail@plt+0x8e4>
   1193c:	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
   11940:	andeq	r8, r2, sp, asr r1
   11944:	ldrdeq	r6, [r1], -ip
   11948:	push	{lr}		; (str lr, [sp, #-4]!)
   1194c:	sub	sp, sp, #60	; 0x3c
   11950:	subs	r6, r0, #0
   11954:	beq	11990 <__assert_fail@plt+0xa38>
   11958:	ldr	r3, [pc, #840]	; 11ca8 <__assert_fail@plt+0xd50>
   1195c:	ldr	r4, [r3]
   11960:	mov	r2, #5
   11964:	ldr	r1, [pc, #832]	; 11cac <__assert_fail@plt+0xd54>
   11968:	mov	r0, #0
   1196c:	bl	10d78 <dcgettext@plt>
   11970:	ldr	r3, [pc, #824]	; 11cb0 <__assert_fail@plt+0xd58>
   11974:	ldr	r3, [r3]
   11978:	mov	r2, r0
   1197c:	mov	r1, #1
   11980:	mov	r0, r4
   11984:	bl	10ec8 <__fprintf_chk@plt>
   11988:	mov	r0, r6
   1198c:	bl	10e5c <exit@plt>
   11990:	mov	r2, #5
   11994:	ldr	r1, [pc, #792]	; 11cb4 <__assert_fail@plt+0xd5c>
   11998:	mov	r0, #0
   1199c:	bl	10d78 <dcgettext@plt>
   119a0:	ldr	r3, [pc, #776]	; 11cb0 <__assert_fail@plt+0xd58>
   119a4:	ldr	r2, [r3]
   119a8:	mov	r1, r0
   119ac:	mov	r0, #1
   119b0:	bl	10eb0 <__printf_chk@plt>
   119b4:	mov	r2, #5
   119b8:	ldr	r1, [pc, #760]	; 11cb8 <__assert_fail@plt+0xd60>
   119bc:	mov	r0, #0
   119c0:	bl	10d78 <dcgettext@plt>
   119c4:	mov	r2, #10
   119c8:	mov	r1, r0
   119cc:	mov	r0, #1
   119d0:	bl	10eb0 <__printf_chk@plt>
   119d4:	mov	r2, #5
   119d8:	ldr	r1, [pc, #732]	; 11cbc <__assert_fail@plt+0xd64>
   119dc:	mov	r0, #0
   119e0:	bl	10d78 <dcgettext@plt>
   119e4:	ldr	r4, [pc, #724]	; 11cc0 <__assert_fail@plt+0xd68>
   119e8:	ldr	r1, [r4]
   119ec:	bl	10cdc <fputs_unlocked@plt>
   119f0:	mov	r2, #5
   119f4:	ldr	r1, [pc, #712]	; 11cc4 <__assert_fail@plt+0xd6c>
   119f8:	mov	r0, #0
   119fc:	bl	10d78 <dcgettext@plt>
   11a00:	ldr	r1, [r4]
   11a04:	bl	10cdc <fputs_unlocked@plt>
   11a08:	mov	r2, #5
   11a0c:	ldr	r1, [pc, #692]	; 11cc8 <__assert_fail@plt+0xd70>
   11a10:	mov	r0, #0
   11a14:	bl	10d78 <dcgettext@plt>
   11a18:	mov	r2, #10
   11a1c:	mov	r1, r0
   11a20:	mov	r0, #1
   11a24:	bl	10eb0 <__printf_chk@plt>
   11a28:	mov	r2, #5
   11a2c:	ldr	r1, [pc, #664]	; 11ccc <__assert_fail@plt+0xd74>
   11a30:	mov	r0, #0
   11a34:	bl	10d78 <dcgettext@plt>
   11a38:	ldr	r1, [r4]
   11a3c:	bl	10cdc <fputs_unlocked@plt>
   11a40:	mov	r2, #5
   11a44:	ldr	r1, [pc, #644]	; 11cd0 <__assert_fail@plt+0xd78>
   11a48:	mov	r0, #0
   11a4c:	bl	10d78 <dcgettext@plt>
   11a50:	ldr	r1, [r4]
   11a54:	bl	10cdc <fputs_unlocked@plt>
   11a58:	mov	r2, #5
   11a5c:	ldr	r1, [pc, #624]	; 11cd4 <__assert_fail@plt+0xd7c>
   11a60:	mov	r0, #0
   11a64:	bl	10d78 <dcgettext@plt>
   11a68:	ldr	r1, [r4]
   11a6c:	bl	10cdc <fputs_unlocked@plt>
   11a70:	mov	r2, #5
   11a74:	ldr	r1, [pc, #604]	; 11cd8 <__assert_fail@plt+0xd80>
   11a78:	mov	r0, #0
   11a7c:	bl	10d78 <dcgettext@plt>
   11a80:	ldr	r1, [r4]
   11a84:	bl	10cdc <fputs_unlocked@plt>
   11a88:	mov	r2, #5
   11a8c:	ldr	r1, [pc, #584]	; 11cdc <__assert_fail@plt+0xd84>
   11a90:	mov	r0, #0
   11a94:	bl	10d78 <dcgettext@plt>
   11a98:	ldr	r1, [r4]
   11a9c:	bl	10cdc <fputs_unlocked@plt>
   11aa0:	mov	ip, sp
   11aa4:	ldr	lr, [pc, #564]	; 11ce0 <__assert_fail@plt+0xd88>
   11aa8:	ldm	lr!, {r0, r1, r2, r3}
   11aac:	stmia	ip!, {r0, r1, r2, r3}
   11ab0:	ldm	lr!, {r0, r1, r2, r3}
   11ab4:	stmia	ip!, {r0, r1, r2, r3}
   11ab8:	ldm	lr!, {r0, r1, r2, r3}
   11abc:	stmia	ip!, {r0, r1, r2, r3}
   11ac0:	ldm	lr, {r0, r1}
   11ac4:	stm	ip, {r0, r1}
   11ac8:	ldr	r1, [sp]
   11acc:	cmp	r1, #0
   11ad0:	moveq	r4, sp
   11ad4:	beq	11afc <__assert_fail@plt+0xba4>
   11ad8:	mov	r4, sp
   11adc:	ldr	r5, [pc, #512]	; 11ce4 <__assert_fail@plt+0xd8c>
   11ae0:	mov	r0, r5
   11ae4:	bl	10cf4 <strcmp@plt>
   11ae8:	cmp	r0, #0
   11aec:	beq	11afc <__assert_fail@plt+0xba4>
   11af0:	ldr	r1, [r4, #8]!
   11af4:	cmp	r1, #0
   11af8:	bne	11ae0 <__assert_fail@plt+0xb88>
   11afc:	ldr	r4, [r4, #4]
   11b00:	cmp	r4, #0
   11b04:	beq	11c18 <__assert_fail@plt+0xcc0>
   11b08:	mov	r2, #5
   11b0c:	ldr	r1, [pc, #468]	; 11ce8 <__assert_fail@plt+0xd90>
   11b10:	mov	r0, #0
   11b14:	bl	10d78 <dcgettext@plt>
   11b18:	ldr	r3, [pc, #460]	; 11cec <__assert_fail@plt+0xd94>
   11b1c:	ldr	r2, [pc, #460]	; 11cf0 <__assert_fail@plt+0xd98>
   11b20:	mov	r1, r0
   11b24:	mov	r0, #1
   11b28:	bl	10eb0 <__printf_chk@plt>
   11b2c:	mov	r1, #0
   11b30:	mov	r0, #5
   11b34:	bl	10ef8 <setlocale@plt>
   11b38:	cmp	r0, #0
   11b3c:	beq	11b54 <__assert_fail@plt+0xbfc>
   11b40:	mov	r2, #3
   11b44:	ldr	r1, [pc, #424]	; 11cf4 <__assert_fail@plt+0xd9c>
   11b48:	bl	10f34 <strncmp@plt>
   11b4c:	cmp	r0, #0
   11b50:	bne	11bb4 <__assert_fail@plt+0xc5c>
   11b54:	mov	r2, #5
   11b58:	ldr	r1, [pc, #408]	; 11cf8 <__assert_fail@plt+0xda0>
   11b5c:	mov	r0, #0
   11b60:	bl	10d78 <dcgettext@plt>
   11b64:	ldr	r5, [pc, #376]	; 11ce4 <__assert_fail@plt+0xd8c>
   11b68:	mov	r3, r5
   11b6c:	ldr	r2, [pc, #376]	; 11cec <__assert_fail@plt+0xd94>
   11b70:	mov	r1, r0
   11b74:	mov	r0, #1
   11b78:	bl	10eb0 <__printf_chk@plt>
   11b7c:	mov	r2, #5
   11b80:	ldr	r1, [pc, #372]	; 11cfc <__assert_fail@plt+0xda4>
   11b84:	mov	r0, #0
   11b88:	bl	10d78 <dcgettext@plt>
   11b8c:	mov	r1, r0
   11b90:	ldr	r2, [pc, #360]	; 11d00 <__assert_fail@plt+0xda8>
   11b94:	ldr	r3, [pc, #360]	; 11d04 <__assert_fail@plt+0xdac>
   11b98:	cmp	r4, r5
   11b9c:	movne	r3, r2
   11ba0:	mov	r2, r4
   11ba4:	mov	r0, #1
   11ba8:	bl	10eb0 <__printf_chk@plt>
   11bac:	b	11988 <__assert_fail@plt+0xa30>
   11bb0:	ldr	r4, [pc, #300]	; 11ce4 <__assert_fail@plt+0xd8c>
   11bb4:	mov	r2, #5
   11bb8:	ldr	r1, [pc, #328]	; 11d08 <__assert_fail@plt+0xdb0>
   11bbc:	mov	r0, #0
   11bc0:	bl	10d78 <dcgettext@plt>
   11bc4:	ldr	r3, [pc, #244]	; 11cc0 <__assert_fail@plt+0xd68>
   11bc8:	ldr	r1, [r3]
   11bcc:	bl	10cdc <fputs_unlocked@plt>
   11bd0:	b	11b54 <__assert_fail@plt+0xbfc>
   11bd4:	mov	r2, #5
   11bd8:	ldr	r1, [pc, #280]	; 11cf8 <__assert_fail@plt+0xda0>
   11bdc:	mov	r0, #0
   11be0:	bl	10d78 <dcgettext@plt>
   11be4:	ldr	r4, [pc, #248]	; 11ce4 <__assert_fail@plt+0xd8c>
   11be8:	mov	r3, r4
   11bec:	ldr	r2, [pc, #248]	; 11cec <__assert_fail@plt+0xd94>
   11bf0:	mov	r1, r0
   11bf4:	mov	r0, #1
   11bf8:	bl	10eb0 <__printf_chk@plt>
   11bfc:	mov	r2, #5
   11c00:	ldr	r1, [pc, #244]	; 11cfc <__assert_fail@plt+0xda4>
   11c04:	mov	r0, #0
   11c08:	bl	10d78 <dcgettext@plt>
   11c0c:	mov	r1, r0
   11c10:	ldr	r3, [pc, #236]	; 11d04 <__assert_fail@plt+0xdac>
   11c14:	b	11ba0 <__assert_fail@plt+0xc48>
   11c18:	mov	r2, #5
   11c1c:	ldr	r1, [pc, #196]	; 11ce8 <__assert_fail@plt+0xd90>
   11c20:	mov	r0, #0
   11c24:	bl	10d78 <dcgettext@plt>
   11c28:	ldr	r3, [pc, #188]	; 11cec <__assert_fail@plt+0xd94>
   11c2c:	ldr	r2, [pc, #188]	; 11cf0 <__assert_fail@plt+0xd98>
   11c30:	mov	r1, r0
   11c34:	mov	r0, #1
   11c38:	bl	10eb0 <__printf_chk@plt>
   11c3c:	mov	r1, #0
   11c40:	mov	r0, #5
   11c44:	bl	10ef8 <setlocale@plt>
   11c48:	cmp	r0, #0
   11c4c:	beq	11bd4 <__assert_fail@plt+0xc7c>
   11c50:	mov	r2, #3
   11c54:	ldr	r1, [pc, #152]	; 11cf4 <__assert_fail@plt+0xd9c>
   11c58:	bl	10f34 <strncmp@plt>
   11c5c:	cmp	r0, #0
   11c60:	bne	11bb0 <__assert_fail@plt+0xc58>
   11c64:	mov	r2, #5
   11c68:	ldr	r1, [pc, #136]	; 11cf8 <__assert_fail@plt+0xda0>
   11c6c:	mov	r0, #0
   11c70:	bl	10d78 <dcgettext@plt>
   11c74:	ldr	r4, [pc, #104]	; 11ce4 <__assert_fail@plt+0xd8c>
   11c78:	mov	r3, r4
   11c7c:	ldr	r2, [pc, #104]	; 11cec <__assert_fail@plt+0xd94>
   11c80:	mov	r1, r0
   11c84:	mov	r0, #1
   11c88:	bl	10eb0 <__printf_chk@plt>
   11c8c:	mov	r2, #5
   11c90:	ldr	r1, [pc, #100]	; 11cfc <__assert_fail@plt+0xda4>
   11c94:	mov	r0, #0
   11c98:	bl	10d78 <dcgettext@plt>
   11c9c:	mov	r1, r0
   11ca0:	ldr	r3, [pc, #92]	; 11d04 <__assert_fail@plt+0xdac>
   11ca4:	b	11ba0 <__assert_fail@plt+0xc48>
   11ca8:	andeq	r8, r2, r0, asr r1
   11cac:	andeq	r6, r1, r8, lsl sp
   11cb0:	andeq	r8, r2, ip, ror #2
   11cb4:	andeq	r6, r1, r0, asr #26
   11cb8:	andeq	r6, r1, r4, ror #26
   11cbc:	andeq	r6, r1, ip, ror #27
   11cc0:	andeq	r8, r2, r4, asr r1
   11cc4:	andeq	r6, r1, r4, lsr #28
   11cc8:	andeq	r6, r1, r0, ror lr
   11ccc:	andeq	r7, r1, r0
   11cd0:	andeq	r7, r1, r4, lsl #1
   11cd4:	andeq	r7, r1, r4, asr #1
   11cd8:	strdeq	r7, [r1], -r4
   11cdc:	andeq	r7, r1, ip, lsr #2
   11ce0:	andeq	r6, r1, r0, asr fp
   11ce4:	andeq	r6, r1, r0, lsl sp
   11ce8:	andeq	r7, r1, r0, lsl #4
   11cec:	andeq	r7, r1, r8, lsl r2
   11cf0:	andeq	r7, r1, r0, asr #4
   11cf4:	andeq	r7, r1, r0, asr r2
   11cf8:	muleq	r1, ip, r2
   11cfc:			; <UNDEFINED> instruction: 0x000172b8
   11d00:	andeq	r6, r1, r0, ror #26
   11d04:	strdeq	r7, [r1], -r0
   11d08:	andeq	r7, r1, r4, asr r2
   11d0c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11d10:	sub	sp, sp, #252	; 0xfc
   11d14:	mov	r6, r0
   11d18:	mov	r5, r1
   11d1c:	ldr	r0, [r1]
   11d20:	bl	13140 <__assert_fail@plt+0x21e8>
   11d24:	ldr	r1, [pc, #3816]	; 12c14 <__assert_fail@plt+0x1cbc>
   11d28:	mov	r0, #6
   11d2c:	bl	10ef8 <setlocale@plt>
   11d30:	ldr	r4, [pc, #3808]	; 12c18 <__assert_fail@plt+0x1cc0>
   11d34:	ldr	r1, [pc, #3808]	; 12c1c <__assert_fail@plt+0x1cc4>
   11d38:	mov	r0, r4
   11d3c:	bl	10f28 <bindtextdomain@plt>
   11d40:	mov	r0, r4
   11d44:	bl	10d90 <textdomain@plt>
   11d48:	ldr	r0, [pc, #3792]	; 12c20 <__assert_fail@plt+0x1cc8>
   11d4c:	bl	16b2c <__assert_fail@plt+0x5bd4>
   11d50:	ldr	r3, [pc, #3788]	; 12c24 <__assert_fail@plt+0x1ccc>
   11d54:	mov	r2, #0
   11d58:	strb	r2, [r3, #1]
   11d5c:	strb	r2, [r3, #2]
   11d60:	mov	r2, #10
   11d64:	strb	r2, [r3]
   11d68:	cmp	r6, #1
   11d6c:	ble	11f94 <__assert_fail@plt+0x103c>
   11d70:	ldr	r1, [r5, #4]
   11d74:	ldrb	r3, [r1]
   11d78:	cmp	r3, #45	; 0x2d
   11d7c:	beq	11e0c <__assert_fail@plt+0xeb4>
   11d80:	mov	r3, #1
   11d84:	str	r3, [sp, #28]
   11d88:	mov	r2, #10
   11d8c:	mov	r3, #0
   11d90:	strd	r2, [sp, #16]
   11d94:	mov	r3, #0
   11d98:	str	r3, [sp, #36]	; 0x24
   11d9c:	mov	r3, #0
   11da0:	str	r3, [sp, #32]
   11da4:	ldr	r9, [pc, #3708]	; 12c28 <__assert_fail@plt+0x1cd0>
   11da8:	ldr	r8, [pc, #3708]	; 12c2c <__assert_fail@plt+0x1cd4>
   11dac:	mov	r7, r3
   11db0:	ldr	sl, [pc, #3704]	; 12c30 <__assert_fail@plt+0x1cd8>
   11db4:	ldr	fp, [pc, #3688]	; 12c24 <__assert_fail@plt+0x1ccc>
   11db8:	str	r7, [sp]
   11dbc:	mov	r3, r9
   11dc0:	mov	r2, r8
   11dc4:	mov	r1, r5
   11dc8:	mov	r0, r6
   11dcc:	bl	10e44 <getopt_long@plt>
   11dd0:	cmn	r0, #1
   11dd4:	beq	12118 <__assert_fail@plt+0x11c0>
   11dd8:	cmp	r0, #110	; 0x6e
   11ddc:	beq	12068 <__assert_fail@plt+0x1110>
   11de0:	ble	11fd4 <__assert_fail@plt+0x107c>
   11de4:	cmp	r0, #118	; 0x76
   11de8:	beq	12024 <__assert_fail@plt+0x10cc>
   11dec:	ble	12004 <__assert_fail@plt+0x10ac>
   11df0:	cmp	r0, #122	; 0x7a
   11df4:	beq	120a4 <__assert_fail@plt+0x114c>
   11df8:	cmp	r0, #256	; 0x100
   11dfc:	bne	1201c <__assert_fail@plt+0x10c4>
   11e00:	mov	r3, #1
   11e04:	strb	r3, [fp, #3]
   11e08:	b	11db8 <__assert_fail@plt+0xe60>
   11e0c:	ldrb	r3, [r1, #1]
   11e10:	sub	r3, r3, #48	; 0x30
   11e14:	cmp	r3, #9
   11e18:	bhi	11fb4 <__assert_fail@plt+0x105c>
   11e1c:	add	r1, r1, #1
   11e20:	mov	r3, r1
   11e24:	ldrb	r2, [r3, #1]!
   11e28:	sub	r2, r2, #48	; 0x30
   11e2c:	cmp	r2, #9
   11e30:	bls	11e24 <__assert_fail@plt+0xecc>
   11e34:	mov	r2, r3
   11e38:	mov	lr, #0
   11e3c:	mov	sl, #10
   11e40:	mov	r9, lr
   11e44:	mov	r0, #1
   11e48:	str	r0, [sp, #28]
   11e4c:	str	lr, [sp, #36]	; 0x24
   11e50:	mov	r8, r0
   11e54:	mov	r7, lr
   11e58:	str	lr, [sp, #16]
   11e5c:	mov	fp, #2
   11e60:	mov	r4, r2
   11e64:	ldrb	r0, [r2], #1
   11e68:	cmp	r0, #0
   11e6c:	beq	11f5c <__assert_fail@plt+0x1004>
   11e70:	sub	ip, r0, #98	; 0x62
   11e74:	cmp	ip, #24
   11e78:	ldrls	pc, [pc, ip, lsl #2]
   11e7c:	b	11f0c <__assert_fail@plt+0xfb4>
   11e80:	andeq	r1, r1, r4, ror #29
   11e84:	andeq	r1, r1, r4, asr #30
   11e88:	andeq	r1, r1, ip, lsl #30
   11e8c:	andeq	r1, r1, ip, lsl #30
   11e90:	andeq	r1, r1, ip, lsl #30
   11e94:	andeq	r1, r1, ip, lsl #30
   11e98:	andeq	r1, r1, ip, lsl #30
   11e9c:	andeq	r1, r1, ip, lsl #30
   11ea0:	andeq	r1, r1, ip, lsl #30
   11ea4:	andeq	r1, r1, r4, ror #29
   11ea8:	andeq	r1, r1, r4, asr pc
   11eac:	andeq	r1, r1, r4, ror #29
   11eb0:	andeq	r1, r1, ip, lsl #30
   11eb4:	andeq	r1, r1, ip, lsl #30
   11eb8:	andeq	r1, r1, ip, lsl #30
   11ebc:	strdeq	r1, [r1], -r0
   11ec0:	andeq	r1, r1, ip, lsl #30
   11ec4:	andeq	r1, r1, ip, lsl #30
   11ec8:	andeq	r1, r1, ip, lsl #30
   11ecc:	andeq	r1, r1, ip, lsl #30
   11ed0:	strdeq	r1, [r1], -r8
   11ed4:	andeq	r1, r1, ip, lsl #30
   11ed8:	andeq	r1, r1, ip, lsl #30
   11edc:	andeq	r1, r1, ip, lsl #30
   11ee0:	andeq	r1, r1, r0, lsl #30
   11ee4:	mov	r9, r0
   11ee8:	str	r7, [sp, #28]
   11eec:	b	11e60 <__assert_fail@plt+0xf08>
   11ef0:	str	fp, [sp, #36]	; 0x24
   11ef4:	b	11e60 <__assert_fail@plt+0xf08>
   11ef8:	str	r8, [sp, #36]	; 0x24
   11efc:	b	11e60 <__assert_fail@plt+0xf08>
   11f00:	mov	lr, r8
   11f04:	mov	sl, r7
   11f08:	b	11e60 <__assert_fail@plt+0xf08>
   11f0c:	cmp	lr, #0
   11f10:	ldrne	r3, [pc, #3340]	; 12c24 <__assert_fail@plt+0x1ccc>
   11f14:	strbne	sl, [r3]
   11f18:	mov	r2, #5
   11f1c:	ldr	r1, [pc, #3344]	; 12c34 <__assert_fail@plt+0x1cdc>
   11f20:	mov	r0, #0
   11f24:	bl	10d78 <dcgettext@plt>
   11f28:	ldrb	r3, [r4]
   11f2c:	mov	r2, r0
   11f30:	mov	r1, #0
   11f34:	mov	r0, r1
   11f38:	bl	10dfc <error@plt>
   11f3c:	mov	r0, #1
   11f40:	bl	11948 <__assert_fail@plt+0x9f0>
   11f44:	mov	r9, r7
   11f48:	ldr	r0, [sp, #16]
   11f4c:	str	r0, [sp, #28]
   11f50:	b	11e60 <__assert_fail@plt+0xf08>
   11f54:	str	r8, [sp, #28]
   11f58:	b	11e60 <__assert_fail@plt+0xf08>
   11f5c:	cmp	lr, #0
   11f60:	ldrne	r2, [pc, #3260]	; 12c24 <__assert_fail@plt+0x1ccc>
   11f64:	strbne	sl, [r2]
   11f68:	strb	r9, [r3]
   11f6c:	cmp	r9, #0
   11f70:	movne	r2, #0
   11f74:	strbne	r2, [r3, #1]
   11f78:	ldr	r0, [sp, #28]
   11f7c:	bl	1108c <__assert_fail@plt+0x134>
   11f80:	strd	r0, [sp, #16]
   11f84:	ldr	r3, [r5]
   11f88:	str	r3, [r5, #4]!
   11f8c:	sub	r6, r6, #1
   11f90:	b	11d9c <__assert_fail@plt+0xe44>
   11f94:	mov	r3, #1
   11f98:	str	r3, [sp, #28]
   11f9c:	mov	r2, #10
   11fa0:	mov	r3, #0
   11fa4:	strd	r2, [sp, #16]
   11fa8:	mov	r3, #0
   11fac:	str	r3, [sp, #36]	; 0x24
   11fb0:	b	11d9c <__assert_fail@plt+0xe44>
   11fb4:	mov	r3, #1
   11fb8:	str	r3, [sp, #28]
   11fbc:	mov	r2, #10
   11fc0:	mov	r3, #0
   11fc4:	strd	r2, [sp, #16]
   11fc8:	mov	r3, #0
   11fcc:	str	r3, [sp, #36]	; 0x24
   11fd0:	b	11d9c <__assert_fail@plt+0xe44>
   11fd4:	cmn	r0, #2
   11fd8:	beq	120ac <__assert_fail@plt+0x1154>
   11fdc:	cmp	r0, #99	; 0x63
   11fe0:	beq	12030 <__assert_fail@plt+0x10d8>
   11fe4:	mov	r4, r0
   11fe8:	cmn	r0, #3
   11fec:	beq	120b4 <__assert_fail@plt+0x115c>
   11ff0:	sub	r3, r4, #48	; 0x30
   11ff4:	cmp	r3, #9
   11ff8:	bls	120f0 <__assert_fail@plt+0x1198>
   11ffc:	mov	r0, #1
   12000:	bl	11948 <__assert_fail@plt+0x9f0>
   12004:	cmp	r0, #113	; 0x71
   12008:	moveq	r3, #2
   1200c:	streq	r3, [sp, #36]	; 0x24
   12010:	beq	11db8 <__assert_fail@plt+0xe60>
   12014:	mov	r4, r0
   12018:	b	11ff0 <__assert_fail@plt+0x1098>
   1201c:	mov	r4, r0
   12020:	b	11ff0 <__assert_fail@plt+0x1098>
   12024:	mov	r3, #1
   12028:	str	r3, [sp, #36]	; 0x24
   1202c:	b	11db8 <__assert_fail@plt+0xe60>
   12030:	ldr	r3, [sl]
   12034:	ldrb	r2, [r3]
   12038:	cmp	r2, #45	; 0x2d
   1203c:	moveq	r2, #1
   12040:	movne	r2, #0
   12044:	str	r2, [sp, #32]
   12048:	addeq	r3, r3, #1
   1204c:	streq	r3, [sl]
   12050:	ldr	r1, [sl]
   12054:	mov	r0, r7
   12058:	bl	1108c <__assert_fail@plt+0x134>
   1205c:	strd	r0, [sp, #16]
   12060:	str	r7, [sp, #28]
   12064:	b	11db8 <__assert_fail@plt+0xe60>
   12068:	ldr	r3, [sl]
   1206c:	ldrb	r2, [r3]
   12070:	cmp	r2, #45	; 0x2d
   12074:	moveq	r2, #1
   12078:	movne	r2, #0
   1207c:	str	r2, [sp, #32]
   12080:	addeq	r3, r3, #1
   12084:	streq	r3, [sl]
   12088:	ldr	r1, [sl]
   1208c:	mov	r0, #1
   12090:	bl	1108c <__assert_fail@plt+0x134>
   12094:	strd	r0, [sp, #16]
   12098:	mov	r3, #1
   1209c:	str	r3, [sp, #28]
   120a0:	b	11db8 <__assert_fail@plt+0xe60>
   120a4:	strb	r7, [fp]
   120a8:	b	11db8 <__assert_fail@plt+0xe60>
   120ac:	mov	r0, #0
   120b0:	bl	11948 <__assert_fail@plt+0x9f0>
   120b4:	mov	r4, #0
   120b8:	str	r4, [sp, #8]
   120bc:	ldr	r3, [pc, #2932]	; 12c38 <__assert_fail@plt+0x1ce0>
   120c0:	str	r3, [sp, #4]
   120c4:	ldr	r3, [pc, #2928]	; 12c3c <__assert_fail@plt+0x1ce4>
   120c8:	str	r3, [sp]
   120cc:	ldr	r3, [pc, #2924]	; 12c40 <__assert_fail@plt+0x1ce8>
   120d0:	ldr	r3, [r3]
   120d4:	ldr	r2, [pc, #2920]	; 12c44 <__assert_fail@plt+0x1cec>
   120d8:	ldr	r1, [pc, #2920]	; 12c48 <__assert_fail@plt+0x1cf0>
   120dc:	ldr	r0, [pc, #2920]	; 12c4c <__assert_fail@plt+0x1cf4>
   120e0:	ldr	r0, [r0]
   120e4:	bl	151d0 <__assert_fail@plt+0x4278>
   120e8:	mov	r0, r4
   120ec:	bl	10e5c <exit@plt>
   120f0:	mov	r2, #5
   120f4:	ldr	r1, [pc, #2872]	; 12c34 <__assert_fail@plt+0x1cdc>
   120f8:	mov	r0, #0
   120fc:	bl	10d78 <dcgettext@plt>
   12100:	mov	r3, r4
   12104:	mov	r2, r0
   12108:	mov	r1, #0
   1210c:	mov	r0, r1
   12110:	bl	10dfc <error@plt>
   12114:	b	11ffc <__assert_fail@plt+0x10a4>
   12118:	ldr	r3, [sp, #36]	; 0x24
   1211c:	cmp	r3, #1
   12120:	beq	12140 <__assert_fail@plt+0x11e8>
   12124:	cmp	r3, #0
   12128:	bne	1214c <__assert_fail@plt+0x11f4>
   1212c:	sub	r3, r6, #1
   12130:	ldr	r2, [pc, #2840]	; 12c50 <__assert_fail@plt+0x1cf8>
   12134:	ldr	r2, [r2]
   12138:	cmp	r3, r2
   1213c:	ble	1214c <__assert_fail@plt+0x11f4>
   12140:	mov	r2, #1
   12144:	ldr	r3, [pc, #2776]	; 12c24 <__assert_fail@plt+0x1ccc>
   12148:	strb	r2, [r3, #2]
   1214c:	ldr	r3, [sp, #28]
   12150:	eor	r3, r3, #1
   12154:	ldr	r2, [sp, #32]
   12158:	tst	r2, r3
   1215c:	beq	12170 <__assert_fail@plt+0x1218>
   12160:	ldrd	r2, [sp, #16]
   12164:	cmp	r2, #0
   12168:	sbcs	r3, r3, #0
   1216c:	blt	121dc <__assert_fail@plt+0x1284>
   12170:	ldr	r3, [pc, #2776]	; 12c50 <__assert_fail@plt+0x1cf8>
   12174:	ldr	r3, [r3]
   12178:	cmp	r6, r3
   1217c:	addgt	r5, r5, r3, lsl #2
   12180:	ldrle	r5, [pc, #2764]	; 12c54 <__assert_fail@plt+0x1cfc>
   12184:	ldrd	r0, [sp, #16]
   12188:	str	r0, [sp, #88]	; 0x58
   1218c:	lsl	r3, r0, #19
   12190:	lsr	r3, r3, #19
   12194:	str	r3, [sp, #112]	; 0x70
   12198:	rsb	r3, r3, #8192	; 0x2000
   1219c:	str	r3, [sp, #104]	; 0x68
   121a0:	add	r3, r3, r0
   121a4:	lsr	r3, r3, #13
   121a8:	add	r3, r3, #1
   121ac:	str	r3, [sp, #52]	; 0x34
   121b0:	lsr	r3, r3, #1
   121b4:	str	r3, [sp, #92]	; 0x5c
   121b8:	sub	fp, r5, #4
   121bc:	mov	r3, #1
   121c0:	str	r3, [sp, #44]	; 0x2c
   121c4:	ldr	sl, [pc, #2648]	; 12c24 <__assert_fail@plt+0x1ccc>
   121c8:	adds	r2, r0, #8192	; 0x2000
   121cc:	adc	r3, r1, #0
   121d0:	strd	r2, [sp, #96]	; 0x60
   121d4:	str	fp, [sp, #40]	; 0x28
   121d8:	b	12d14 <__assert_fail@plt+0x1dbc>
   121dc:	mov	r2, #5
   121e0:	ldr	r1, [pc, #2672]	; 12c58 <__assert_fail@plt+0x1d00>
   121e4:	mov	r0, #0
   121e8:	bl	10d78 <dcgettext@plt>
   121ec:	mov	r4, r0
   121f0:	add	r2, sp, #144	; 0x90
   121f4:	ldrd	r0, [sp, #16]
   121f8:	bl	130d8 <__assert_fail@plt+0x2180>
   121fc:	bl	14c90 <__assert_fail@plt+0x3d38>
   12200:	str	r0, [sp]
   12204:	mov	r3, r4
   12208:	ldr	r2, [pc, #2636]	; 12c5c <__assert_fail@plt+0x1d04>
   1220c:	mov	r1, #75	; 0x4b
   12210:	mov	r0, #1
   12214:	bl	10dfc <error@plt>
   12218:	mov	r1, #0
   1221c:	mov	r0, fp
   12220:	bl	10e08 <open64@plt>
   12224:	subs	r3, r0, #0
   12228:	str	r3, [sp, #36]	; 0x24
   1222c:	bge	12d5c <__assert_fail@plt+0x1e04>
   12230:	bl	10e8c <__errno_location@plt>
   12234:	ldr	r4, [r0]
   12238:	mov	r2, #5
   1223c:	ldr	r1, [pc, #2588]	; 12c60 <__assert_fail@plt+0x1d08>
   12240:	mov	r0, #0
   12244:	bl	10d78 <dcgettext@plt>
   12248:	mov	r5, r0
   1224c:	mov	r1, fp
   12250:	mov	r0, #4
   12254:	bl	14a5c <__assert_fail@plt+0x3b04>
   12258:	mov	r3, r0
   1225c:	mov	r2, r5
   12260:	mov	r1, r4
   12264:	mov	r0, #0
   12268:	bl	10dfc <error@plt>
   1226c:	mov	r4, #0
   12270:	b	12d08 <__assert_fail@plt+0x1db0>
   12274:	ldr	r3, [pc, #2536]	; 12c64 <__assert_fail@plt+0x1d0c>
   12278:	ldrb	r0, [r3]
   1227c:	mov	r3, fp
   12280:	ldr	r1, [pc, #2528]	; 12c68 <__assert_fail@plt+0x1d10>
   12284:	ldr	r2, [pc, #2440]	; 12c14 <__assert_fail@plt+0x1cbc>
   12288:	cmp	r0, #0
   1228c:	moveq	r2, r1
   12290:	ldr	r1, [pc, #2516]	; 12c6c <__assert_fail@plt+0x1d14>
   12294:	mov	r0, #1
   12298:	bl	10eb0 <__printf_chk@plt>
   1229c:	mov	r2, #0
   122a0:	ldr	r3, [pc, #2492]	; 12c64 <__assert_fail@plt+0x1d0c>
   122a4:	strb	r2, [r3]
   122a8:	b	12d68 <__assert_fail@plt+0x1e10>
   122ac:	add	r2, sp, #144	; 0x90
   122b0:	ldr	r1, [sp, #36]	; 0x24
   122b4:	mov	r0, #3
   122b8:	bl	10db4 <__fxstat64@plt>
   122bc:	cmp	r0, #0
   122c0:	bne	12378 <__assert_fail@plt+0x1420>
   122c4:	ldrb	r4, [sl, #3]
   122c8:	cmp	r4, #0
   122cc:	bne	122e0 <__assert_fail@plt+0x1388>
   122d0:	ldr	r3, [sp, #160]	; 0xa0
   122d4:	and	r3, r3, #53248	; 0xd000
   122d8:	cmp	r3, #32768	; 0x8000
   122dc:	beq	123bc <__assert_fail@plt+0x1464>
   122e0:	ldr	r3, [sp, #28]
   122e4:	cmp	r3, #0
   122e8:	bne	12448 <__assert_fail@plt+0x14f0>
   122ec:	mvn	r2, #0
   122f0:	mvn	r3, #0
   122f4:	strd	r2, [sp, #72]	; 0x48
   122f8:	ldrd	r2, [sp, #72]	; 0x48
   122fc:	strd	r2, [sp, #56]	; 0x38
   12300:	mvn	r2, #0
   12304:	mov	r3, #0
   12308:	ldrd	r0, [sp, #96]	; 0x60
   1230c:	cmp	r1, r3
   12310:	cmpeq	r0, r2
   12314:	bhi	12894 <__assert_fail@plt+0x193c>
   12318:	ldr	r3, [sp, #88]	; 0x58
   1231c:	cmp	r3, #1048576	; 0x100000
   12320:	bls	128c8 <__assert_fail@plt+0x1970>
   12324:	mov	r8, #0
   12328:	str	r8, [sp, #80]	; 0x50
   1232c:	mov	r3, #1
   12330:	str	r3, [sp, #64]	; 0x40
   12334:	mov	r9, r8
   12338:	mov	r0, r8
   1233c:	ldr	r3, [sp, #52]	; 0x34
   12340:	cmp	r3, #16
   12344:	movcs	r3, #16
   12348:	str	r3, [sp, #108]	; 0x6c
   1234c:	ldr	r3, [sp, #32]
   12350:	str	r3, [sp, #84]	; 0x54
   12354:	str	fp, [sp, #116]	; 0x74
   12358:	mov	r5, r8
   1235c:	ldr	r8, [sp, #108]	; 0x6c
   12360:	mov	r2, #4
   12364:	mov	r1, r8
   12368:	bl	15320 <__assert_fail@plt+0x43c8>
   1236c:	mov	r7, r0
   12370:	ldr	r6, [sp, #64]	; 0x40
   12374:	b	12af0 <__assert_fail@plt+0x1b98>
   12378:	bl	10e8c <__errno_location@plt>
   1237c:	ldr	r4, [r0]
   12380:	mov	r2, #5
   12384:	ldr	r1, [pc, #2276]	; 12c70 <__assert_fail@plt+0x1d18>
   12388:	mov	r0, #0
   1238c:	bl	10d78 <dcgettext@plt>
   12390:	mov	r5, r0
   12394:	mov	r1, fp
   12398:	mov	r0, #4
   1239c:	bl	14a5c <__assert_fail@plt+0x3b04>
   123a0:	mov	r3, r0
   123a4:	mov	r2, r5
   123a8:	mov	r1, r4
   123ac:	mov	r0, #0
   123b0:	bl	10dfc <error@plt>
   123b4:	mov	r4, #0
   123b8:	b	12cfc <__assert_fail@plt+0x1da4>
   123bc:	str	fp, [sp, #4]
   123c0:	mov	r3, #1
   123c4:	str	r3, [sp]
   123c8:	mov	r2, #0
   123cc:	mov	r3, #0
   123d0:	ldr	r0, [sp, #36]	; 0x24
   123d4:	bl	110f4 <__assert_fail@plt+0x19c>
   123d8:	mov	r2, r0
   123dc:	mov	r3, r1
   123e0:	strd	r2, [sp, #72]	; 0x48
   123e4:	cmp	r0, #0
   123e8:	sbcs	r3, r3, #0
   123ec:	blt	12cfc <__assert_fail@plt+0x1da4>
   123f0:	ldr	r3, [sp, #28]
   123f4:	cmp	r3, #0
   123f8:	beq	12800 <__assert_fail@plt+0x18a8>
   123fc:	ldrb	r3, [sl, #3]
   12400:	cmp	r3, #0
   12404:	bne	12454 <__assert_fail@plt+0x14fc>
   12408:	ldr	r2, [sp, #200]	; 0xc8
   1240c:	sub	r3, r2, #1
   12410:	cmn	r3, #-536870911	; 0xe0000001
   12414:	movhi	r2, #512	; 0x200
   12418:	ldrd	r0, [sp, #192]	; 0xc0
   1241c:	asr	r3, r2, #31
   12420:	cmp	r2, r0
   12424:	sbcs	r3, r3, r1
   12428:	bge	12454 <__assert_fail@plt+0x14fc>
   1242c:	ldrd	r2, [sp, #72]	; 0x48
   12430:	cmp	r2, r0
   12434:	sbcs	r3, r3, r1
   12438:	movge	r0, #1
   1243c:	blt	127e0 <__assert_fail@plt+0x1888>
   12440:	and	r4, r0, #1
   12444:	b	12cfc <__assert_fail@plt+0x1da4>
   12448:	mvn	r2, #0
   1244c:	mvn	r3, #0
   12450:	strd	r2, [sp, #72]	; 0x48
   12454:	ldrd	r2, [sp, #72]	; 0x48
   12458:	strd	r2, [sp, #64]	; 0x40
   1245c:	ldr	r4, [pc, #2064]	; 12c74 <__assert_fail@plt+0x1d1c>
   12460:	mov	r0, r4
   12464:	bl	1529c <__assert_fail@plt+0x4344>
   12468:	mov	r9, r0
   1246c:	add	r3, r0, #8192	; 0x2000
   12470:	mov	r7, #0
   12474:	str	r7, [r3, #8]
   12478:	str	r7, [r3, #4]
   1247c:	str	r7, [r3, #12]
   12480:	mov	r0, r4
   12484:	bl	1529c <__assert_fail@plt+0x4344>
   12488:	mov	r8, r0
   1248c:	str	r9, [sp, #56]	; 0x38
   12490:	str	fp, [sp, #80]	; 0x50
   12494:	b	124b4 <__assert_fail@plt+0x155c>
   12498:	ldrd	r2, [sp, #64]	; 0x40
   1249c:	adds	r2, r2, r0
   124a0:	adc	r3, r3, #0
   124a4:	strd	r2, [sp, #64]	; 0x40
   124a8:	mov	r1, r0
   124ac:	mov	r0, r8
   124b0:	bl	111a4 <__assert_fail@plt+0x24c>
   124b4:	mov	fp, r8
   124b8:	mov	r2, #8192	; 0x2000
   124bc:	mov	r1, r8
   124c0:	ldr	r0, [sp, #36]	; 0x24
   124c4:	bl	14ca4 <__assert_fail@plt+0x3d4c>
   124c8:	sub	r3, r0, #1
   124cc:	cmn	r3, #3
   124d0:	bhi	1260c <__assert_fail@plt+0x16b4>
   124d4:	ldrd	r2, [sp, #16]
   124d8:	orrs	r3, r2, r3
   124dc:	beq	12498 <__assert_fail@plt+0x1540>
   124e0:	add	r3, r8, #8192	; 0x2000
   124e4:	str	r0, [r3, #4]
   124e8:	mov	r2, #0
   124ec:	str	r2, [r3, #8]
   124f0:	str	r2, [r3, #12]
   124f4:	add	r6, r8, r0
   124f8:	ldrb	r5, [sl]
   124fc:	strb	r5, [r8, r0]
   12500:	mov	r0, r8
   12504:	mov	r4, r3
   12508:	b	1251c <__assert_fail@plt+0x15c4>
   1250c:	add	r0, r0, #1
   12510:	ldr	r3, [r4, #8]
   12514:	add	r3, r3, #1
   12518:	str	r3, [r4, #8]
   1251c:	mov	r1, r5
   12520:	bl	10d9c <rawmemchr@plt>
   12524:	cmp	r6, r0
   12528:	bhi	1250c <__assert_fail@plt+0x15b4>
   1252c:	add	r3, r8, #8192	; 0x2000
   12530:	ldr	r2, [r3, #8]
   12534:	add	r7, r7, r2
   12538:	ldr	r2, [r3, #4]
   1253c:	ldr	r3, [sp, #56]	; 0x38
   12540:	add	r3, r3, #8192	; 0x2000
   12544:	ldr	r0, [r3, #4]
   12548:	add	r3, r2, r0
   1254c:	ldr	r1, [pc, #1828]	; 12c78 <__assert_fail@plt+0x1d20>
   12550:	cmp	r3, r1
   12554:	bls	125bc <__assert_fail@plt+0x1664>
   12558:	ldr	r3, [sp, #56]	; 0x38
   1255c:	add	r3, r3, #8192	; 0x2000
   12560:	str	r8, [r3, #12]
   12564:	add	r3, r9, #8192	; 0x2000
   12568:	ldr	r2, [r3, #8]
   1256c:	sub	r2, r7, r2
   12570:	mov	r3, #0
   12574:	ldrd	r0, [sp, #16]
   12578:	cmp	r1, r3
   1257c:	cmpeq	r0, r2
   12580:	bcs	125f8 <__assert_fail@plt+0x16a0>
   12584:	add	r4, r9, #8192	; 0x2000
   12588:	ldr	r1, [r4, #4]
   1258c:	ldrd	r2, [sp, #64]	; 0x40
   12590:	adds	r2, r2, r1
   12594:	adc	r3, r3, #0
   12598:	strd	r2, [sp, #64]	; 0x40
   1259c:	mov	r0, r9
   125a0:	bl	111a4 <__assert_fail@plt+0x24c>
   125a4:	ldr	r3, [r4, #8]
   125a8:	sub	r7, r7, r3
   125ac:	str	r8, [sp, #56]	; 0x38
   125b0:	mov	r8, r9
   125b4:	ldr	r9, [r4, #12]
   125b8:	b	124b4 <__assert_fail@plt+0x155c>
   125bc:	mov	r1, fp
   125c0:	ldr	r4, [sp, #56]	; 0x38
   125c4:	add	r0, r4, r0
   125c8:	bl	10d30 <memcpy@plt>
   125cc:	add	r3, r4, #8192	; 0x2000
   125d0:	add	r1, r8, #8192	; 0x2000
   125d4:	ldr	r2, [r3, #4]
   125d8:	ldr	r0, [r1, #4]
   125dc:	add	r2, r2, r0
   125e0:	str	r2, [r3, #4]
   125e4:	ldr	r2, [r3, #8]
   125e8:	ldr	r1, [r1, #8]
   125ec:	add	r2, r2, r1
   125f0:	str	r2, [r3, #8]
   125f4:	b	124b4 <__assert_fail@plt+0x155c>
   125f8:	ldr	r0, [pc, #1652]	; 12c74 <__assert_fail@plt+0x1d1c>
   125fc:	bl	1529c <__assert_fail@plt+0x4344>
   12600:	str	r8, [sp, #56]	; 0x38
   12604:	mov	r8, r0
   12608:	b	124b4 <__assert_fail@plt+0x155c>
   1260c:	ldr	fp, [sp, #80]	; 0x50
   12610:	mov	r4, r0
   12614:	mov	r0, r8
   12618:	bl	12f44 <__assert_fail@plt+0x1fec>
   1261c:	cmn	r4, #1
   12620:	beq	1266c <__assert_fail@plt+0x1714>
   12624:	ldr	r1, [sp, #56]	; 0x38
   12628:	add	r3, r1, #8192	; 0x2000
   1262c:	ldr	r3, [r3, #4]
   12630:	cmp	r3, #0
   12634:	beq	1265c <__assert_fail@plt+0x1704>
   12638:	add	r3, r1, r3
   1263c:	ldrb	r2, [r3, #-1]
   12640:	ldrb	r3, [sl]
   12644:	cmp	r2, r3
   12648:	addne	r3, r1, #8192	; 0x2000
   1264c:	ldrne	r2, [r3, #8]
   12650:	addne	r2, r2, #1
   12654:	strne	r2, [r3, #8]
   12658:	addne	r7, r7, #1
   1265c:	mov	r0, r9
   12660:	mov	r6, r9
   12664:	ldrd	r8, [sp, #64]	; 0x40
   12668:	b	126d4 <__assert_fail@plt+0x177c>
   1266c:	bl	10e8c <__errno_location@plt>
   12670:	ldr	r4, [r0]
   12674:	mov	r2, #5
   12678:	ldr	r1, [pc, #1532]	; 12c7c <__assert_fail@plt+0x1d24>
   1267c:	mov	r0, #0
   12680:	bl	10d78 <dcgettext@plt>
   12684:	mov	r5, r0
   12688:	mov	r1, fp
   1268c:	mov	r0, #4
   12690:	bl	14a5c <__assert_fail@plt+0x3b04>
   12694:	mov	r3, r0
   12698:	mov	r2, r5
   1269c:	mov	r1, r4
   126a0:	mov	r0, #0
   126a4:	bl	10dfc <error@plt>
   126a8:	mov	r4, #0
   126ac:	mov	r0, r9
   126b0:	b	127a0 <__assert_fail@plt+0x1848>
   126b4:	add	r4, r0, #8192	; 0x2000
   126b8:	ldr	r1, [r4, #4]
   126bc:	adds	r8, r8, r1
   126c0:	adc	r9, r9, #0
   126c4:	bl	111a4 <__assert_fail@plt+0x24c>
   126c8:	ldr	r3, [r4, #8]
   126cc:	sub	r7, r7, r3
   126d0:	ldr	r0, [r4, #12]
   126d4:	add	r3, r0, #8192	; 0x2000
   126d8:	ldr	r2, [r3, #8]
   126dc:	sub	r2, r7, r2
   126e0:	mov	r3, #0
   126e4:	ldrd	r4, [sp, #16]
   126e8:	cmp	r5, r3
   126ec:	cmpeq	r4, r2
   126f0:	bcc	126b4 <__assert_fail@plt+0x175c>
   126f4:	strd	r8, [sp, #64]	; 0x40
   126f8:	mov	r9, r6
   126fc:	mov	r3, #0
   12700:	cmp	r5, r3
   12704:	cmpeq	r4, r7
   12708:	ldrcs	r4, [sp, #32]
   1270c:	movcs	r0, r6
   12710:	bcs	127a0 <__assert_fail@plt+0x1848>
   12714:	ldr	r3, [sp, #88]	; 0x58
   12718:	sub	r7, r7, r3
   1271c:	mov	r8, r0
   12720:	add	r3, r0, #8192	; 0x2000
   12724:	ldr	r5, [r3, #4]
   12728:	add	r5, r0, r5
   1272c:	ldrb	r6, [sl]
   12730:	add	r4, r0, #8192	; 0x2000
   12734:	b	1274c <__assert_fail@plt+0x17f4>
   12738:	add	r0, r0, #1
   1273c:	ldr	r3, [r4, #8]
   12740:	add	r3, r3, #1
   12744:	str	r3, [r4, #8]
   12748:	sub	r7, r7, #1
   1274c:	cmp	r7, #0
   12750:	beq	12768 <__assert_fail@plt+0x1810>
   12754:	sub	r2, r5, r0
   12758:	mov	r1, r6
   1275c:	bl	10ed4 <memchr@plt>
   12760:	cmp	r0, #0
   12764:	bne	12738 <__assert_fail@plt+0x17e0>
   12768:	sub	r1, r0, r8
   1276c:	ldrd	r2, [sp, #64]	; 0x40
   12770:	adds	r2, r2, r1
   12774:	adc	r3, r3, r1, asr #31
   12778:	strd	r2, [sp, #64]	; 0x40
   1277c:	mov	r0, r8
   12780:	bl	111a4 <__assert_fail@plt+0x24c>
   12784:	ldr	r4, [sp, #32]
   12788:	mov	r0, r9
   1278c:	b	127a0 <__assert_fail@plt+0x1848>
   12790:	add	r3, r0, #8192	; 0x2000
   12794:	ldr	r5, [r3, #12]
   12798:	bl	12f44 <__assert_fail@plt+0x1fec>
   1279c:	mov	r0, r5
   127a0:	cmp	r0, #0
   127a4:	bne	12790 <__assert_fail@plt+0x1838>
   127a8:	ldrd	r2, [sp, #72]	; 0x48
   127ac:	cmp	r2, #0
   127b0:	sbcs	r3, r3, #0
   127b4:	blt	12cfc <__assert_fail@plt+0x1da4>
   127b8:	str	fp, [sp, #4]
   127bc:	mov	r3, #0
   127c0:	str	r3, [sp]
   127c4:	ldrd	r2, [sp, #64]	; 0x40
   127c8:	ldr	r0, [sp, #36]	; 0x24
   127cc:	bl	110f4 <__assert_fail@plt+0x19c>
   127d0:	cmp	r0, #0
   127d4:	sbcs	r3, r1, #0
   127d8:	movlt	r4, #0
   127dc:	b	12cfc <__assert_fail@plt+0x1da4>
   127e0:	strd	r0, [sp, #8]
   127e4:	ldrd	r2, [sp, #72]	; 0x48
   127e8:	strd	r2, [sp]
   127ec:	ldrd	r2, [sp, #16]
   127f0:	ldr	r1, [sp, #36]	; 0x24
   127f4:	mov	r0, fp
   127f8:	bl	115e4 <__assert_fail@plt+0x68c>
   127fc:	b	12440 <__assert_fail@plt+0x14e8>
   12800:	ldrb	r4, [sl, #3]
   12804:	ldr	r3, [sp, #76]	; 0x4c
   12808:	orrs	r4, r4, r3, lsr #31
   1280c:	bne	122f8 <__assert_fail@plt+0x13a0>
   12810:	ldr	r2, [sp, #200]	; 0xc8
   12814:	sub	r3, r2, #1
   12818:	cmn	r3, #-536870911	; 0xe0000001
   1281c:	movhi	r2, #512	; 0x200
   12820:	ldrd	r0, [sp, #192]	; 0xc0
   12824:	asr	r3, r2, #31
   12828:	cmp	r2, r0
   1282c:	sbcs	r3, r3, r1
   12830:	bge	122f8 <__assert_fail@plt+0x13a0>
   12834:	ldrd	r2, [sp, #72]	; 0x48
   12838:	subs	r2, r0, r2
   1283c:	sbc	r3, r1, r3
   12840:	cmp	r2, #0
   12844:	sbcs	r1, r3, #0
   12848:	movlt	r2, #0
   1284c:	movlt	r3, #0
   12850:	ldrd	r0, [sp, #16]
   12854:	cmp	r1, r3
   12858:	cmpeq	r0, r2
   1285c:	ldrcs	r4, [sp, #32]
   12860:	bcs	12cfc <__assert_fail@plt+0x1da4>
   12864:	subs	r0, r2, r0
   12868:	sbc	r1, r3, r1
   1286c:	mov	r2, r0
   12870:	mov	r3, r1
   12874:	ldr	r0, [sp, #36]	; 0x24
   12878:	bl	11220 <__assert_fail@plt+0x2c8>
   1287c:	cmp	r0, #0
   12880:	ldreq	r4, [sp, #32]
   12884:	beq	12cfc <__assert_fail@plt+0x1da4>
   12888:	mov	r1, fp
   1288c:	bl	1153c <__assert_fail@plt+0x5e4>
   12890:	b	12cfc <__assert_fail@plt+0x1da4>
   12894:	mov	r2, #5
   12898:	ldr	r1, [pc, #992]	; 12c80 <__assert_fail@plt+0x1d28>
   1289c:	mov	r0, #0
   128a0:	bl	10d78 <dcgettext@plt>
   128a4:	mov	r4, r0
   128a8:	add	r2, sp, #120	; 0x78
   128ac:	ldrd	r0, [sp, #16]
   128b0:	bl	130d8 <__assert_fail@plt+0x2180>
   128b4:	mov	r3, r0
   128b8:	mov	r2, r4
   128bc:	mov	r1, #0
   128c0:	mov	r0, #1
   128c4:	bl	10dfc <error@plt>
   128c8:	mov	r4, r3
   128cc:	add	r9, r3, #8192	; 0x2000
   128d0:	mov	r1, r9
   128d4:	mov	r0, #2
   128d8:	bl	15394 <__assert_fail@plt+0x443c>
   128dc:	str	r0, [sp, #64]	; 0x40
   128e0:	str	r0, [sp, #120]	; 0x78
   128e4:	add	r3, r0, r9
   128e8:	str	r3, [sp, #124]	; 0x7c
   128ec:	ldr	r8, [sp, #32]
   128f0:	mov	r6, #0
   128f4:	str	fp, [sp, #80]	; 0x50
   128f8:	mov	fp, r4
   128fc:	b	12968 <__assert_fail@plt+0x1a10>
   12900:	ldr	fp, [sp, #80]	; 0x50
   12904:	mov	r2, #5
   12908:	ldr	r1, [pc, #876]	; 12c7c <__assert_fail@plt+0x1d24>
   1290c:	mov	r0, #0
   12910:	bl	10d78 <dcgettext@plt>
   12914:	mov	r5, r0
   12918:	mov	r1, fp
   1291c:	mov	r0, #4
   12920:	bl	14a5c <__assert_fail@plt+0x3b04>
   12924:	mov	r3, r0
   12928:	mov	r2, r5
   1292c:	mov	r1, r4
   12930:	mov	r0, #0
   12934:	bl	10dfc <error@plt>
   12938:	mov	r4, #0
   1293c:	b	12a14 <__assert_fail@plt+0x1abc>
   12940:	mov	r3, #0
   12944:	mov	r4, r3
   12948:	cmp	r8, #0
   1294c:	beq	129c0 <__assert_fail@plt+0x1a68>
   12950:	cmp	fp, r5
   12954:	bcc	129f0 <__assert_fail@plt+0x1a98>
   12958:	eor	r6, r6, #1
   1295c:	mov	r8, r4
   12960:	cmp	r4, #0
   12964:	bne	12a10 <__assert_fail@plt+0x1ab8>
   12968:	add	r3, sp, #248	; 0xf8
   1296c:	add	r3, r3, r6, lsl #2
   12970:	ldr	r7, [r3, #-128]	; 0xffffff80
   12974:	mov	r2, r9
   12978:	mov	r1, r7
   1297c:	ldr	r0, [sp, #36]	; 0x24
   12980:	bl	12f9c <__assert_fail@plt+0x2044>
   12984:	mov	r5, r0
   12988:	cmp	r9, r0
   1298c:	bls	12940 <__assert_fail@plt+0x19e8>
   12990:	bl	10e8c <__errno_location@plt>
   12994:	ldr	r4, [r0]
   12998:	cmp	r4, #0
   1299c:	bne	12900 <__assert_fail@plt+0x19a8>
   129a0:	cmp	fp, r5
   129a4:	movcs	r4, r8
   129a8:	orrcc	r4, r8, #1
   129ac:	ands	r4, r4, #255	; 0xff
   129b0:	subeq	r3, fp, r5
   129b4:	ldreq	r4, [sp, #32]
   129b8:	movne	r3, #0
   129bc:	b	12948 <__assert_fail@plt+0x19f0>
   129c0:	sub	r1, fp, r3
   129c4:	ldrd	r2, [sp, #56]	; 0x38
   129c8:	adds	r2, r2, r1
   129cc:	adc	r3, r3, #0
   129d0:	strd	r2, [sp, #56]	; 0x38
   129d4:	eor	r3, r6, #1
   129d8:	add	r2, sp, #248	; 0xf8
   129dc:	add	r3, r2, r3, lsl #2
   129e0:	ldr	r0, [r3, #-128]	; 0xffffff80
   129e4:	add	r0, r0, #8192	; 0x2000
   129e8:	bl	111a4 <__assert_fail@plt+0x24c>
   129ec:	b	12950 <__assert_fail@plt+0x19f8>
   129f0:	sub	r1, r5, fp
   129f4:	ldrd	r2, [sp, #56]	; 0x38
   129f8:	adds	r2, r2, r1
   129fc:	adc	r3, r3, #0
   12a00:	strd	r2, [sp, #56]	; 0x38
   12a04:	mov	r0, r7
   12a08:	bl	111a4 <__assert_fail@plt+0x24c>
   12a0c:	b	12958 <__assert_fail@plt+0x1a00>
   12a10:	ldr	fp, [sp, #80]	; 0x50
   12a14:	ldr	r0, [sp, #64]	; 0x40
   12a18:	bl	12f44 <__assert_fail@plt+0x1fec>
   12a1c:	b	12cb0 <__assert_fail@plt+0x1d58>
   12a20:	str	r1, [sp, #64]	; 0x40
   12a24:	mov	r0, r7
   12a28:	cmp	r8, #0
   12a2c:	beq	12358 <__assert_fail@plt+0x1400>
   12a30:	ldr	r3, [sp, #92]	; 0x5c
   12a34:	cmp	r3, r8
   12a38:	lslcs	r8, r8, #1
   12a3c:	ldrcc	r8, [sp, #52]	; 0x34
   12a40:	mov	r0, r7
   12a44:	mov	r5, r6
   12a48:	b	12360 <__assert_fail@plt+0x1408>
   12a4c:	mov	r0, #8192	; 0x2000
   12a50:	bl	1529c <__assert_fail@plt+0x4344>
   12a54:	str	r0, [r7, r5, lsl #2]
   12a58:	add	r3, r5, #1
   12a5c:	str	r3, [sp, #80]	; 0x50
   12a60:	b	12af8 <__assert_fail@plt+0x1ba0>
   12a64:	ldr	fp, [sp, #116]	; 0x74
   12a68:	mov	r2, #5
   12a6c:	ldr	r1, [pc, #520]	; 12c7c <__assert_fail@plt+0x1d24>
   12a70:	mov	r0, #0
   12a74:	bl	10d78 <dcgettext@plt>
   12a78:	mov	r5, r0
   12a7c:	mov	r1, fp
   12a80:	mov	r0, #4
   12a84:	bl	14a5c <__assert_fail@plt+0x3b04>
   12a88:	mov	r3, r0
   12a8c:	mov	r2, r5
   12a90:	mov	r1, r4
   12a94:	mov	r0, #0
   12a98:	bl	10dfc <error@plt>
   12a9c:	mov	r4, #0
   12aa0:	mov	r5, #0
   12aa4:	ldr	r6, [sp, #80]	; 0x50
   12aa8:	b	12ca0 <__assert_fail@plt+0x1d48>
   12aac:	mov	r4, #0
   12ab0:	add	r5, r5, #1
   12ab4:	ldr	r3, [sp, #52]	; 0x34
   12ab8:	cmp	r3, r5
   12abc:	beq	12b30 <__assert_fail@plt+0x1bd8>
   12ac0:	cmp	r9, #0
   12ac4:	bne	12b30 <__assert_fail@plt+0x1bd8>
   12ac8:	add	r5, r6, #1
   12acc:	ldr	r1, [sp, #52]	; 0x34
   12ad0:	mov	r0, r5
   12ad4:	bl	16620 <__assert_fail@plt+0x56c8>
   12ad8:	cmp	r4, #0
   12adc:	bne	12b54 <__assert_fail@plt+0x1bfc>
   12ae0:	mov	r5, r6
   12ae4:	cmp	r8, r6
   12ae8:	beq	12a20 <__assert_fail@plt+0x1ac8>
   12aec:	mov	r6, r1
   12af0:	cmp	r9, #0
   12af4:	beq	12a4c <__assert_fail@plt+0x1af4>
   12af8:	mov	r2, #8192	; 0x2000
   12afc:	ldr	r1, [r7, r5, lsl #2]
   12b00:	ldr	r0, [sp, #36]	; 0x24
   12b04:	bl	12f9c <__assert_fail@plt+0x2044>
   12b08:	mov	fp, r0
   12b0c:	ldr	r3, [pc, #356]	; 12c78 <__assert_fail@plt+0x1d20>
   12b10:	cmp	r0, r3
   12b14:	bhi	12aac <__assert_fail@plt+0x1b54>
   12b18:	bl	10e8c <__errno_location@plt>
   12b1c:	ldr	r4, [r0]
   12b20:	cmp	r4, #0
   12b24:	bne	12a64 <__assert_fail@plt+0x1b0c>
   12b28:	ldr	r4, [sp, #32]
   12b2c:	b	12ab0 <__assert_fail@plt+0x1b58>
   12b30:	ldrd	r2, [sp, #56]	; 0x38
   12b34:	adds	r2, r2, fp
   12b38:	adc	r3, r3, #0
   12b3c:	strd	r2, [sp, #56]	; 0x38
   12b40:	mov	r1, fp
   12b44:	ldr	r0, [r7, r6, lsl #2]
   12b48:	bl	111a4 <__assert_fail@plt+0x24c>
   12b4c:	ldr	r9, [sp, #84]	; 0x54
   12b50:	b	12ac8 <__assert_fail@plt+0x1b70>
   12b54:	mov	r3, fp
   12b58:	str	fp, [sp, #84]	; 0x54
   12b5c:	ldr	fp, [sp, #116]	; 0x74
   12b60:	str	r1, [sp, #64]	; 0x40
   12b64:	ldr	r1, [sp, #104]	; 0x68
   12b68:	cmp	r1, #0
   12b6c:	beq	12aa0 <__assert_fail@plt+0x1b48>
   12b70:	cmp	r9, #0
   12b74:	beq	12bdc <__assert_fail@plt+0x1c84>
   12b78:	mov	ip, r3
   12b7c:	rsb	r4, r3, #8192	; 0x2000
   12b80:	ldrd	r2, [sp, #56]	; 0x38
   12b84:	adds	r2, r2, r1
   12b88:	adc	r3, r3, #0
   12b8c:	strd	r2, [sp, #56]	; 0x38
   12b90:	cmp	r1, r4
   12b94:	bcs	12bac <__assert_fail@plt+0x1c54>
   12b98:	ldr	r0, [r7, r6, lsl #2]
   12b9c:	add	r0, r0, ip
   12ba0:	bl	111a4 <__assert_fail@plt+0x24c>
   12ba4:	mov	r4, r9
   12ba8:	b	12aa0 <__assert_fail@plt+0x1b48>
   12bac:	ldr	r0, [r7, r6, lsl #2]
   12bb0:	mov	r1, r4
   12bb4:	ldr	r3, [sp, #84]	; 0x54
   12bb8:	add	r0, r0, r3
   12bbc:	bl	111a4 <__assert_fail@plt+0x24c>
   12bc0:	ldr	r3, [sp, #104]	; 0x68
   12bc4:	sub	r1, r3, r4
   12bc8:	ldr	r3, [sp, #64]	; 0x40
   12bcc:	ldr	r0, [r7, r3, lsl #2]
   12bd0:	bl	111a4 <__assert_fail@plt+0x24c>
   12bd4:	mov	r4, r9
   12bd8:	b	12aa0 <__assert_fail@plt+0x1b48>
   12bdc:	ldr	r3, [sp, #52]	; 0x34
   12be0:	cmp	r3, r5
   12be4:	bne	12aa0 <__assert_fail@plt+0x1b48>
   12be8:	ldr	r3, [sp, #84]	; 0x54
   12bec:	ldr	r2, [sp, #112]	; 0x70
   12bf0:	sub	r1, r3, r2
   12bf4:	ldrd	r2, [sp, #56]	; 0x38
   12bf8:	adds	r2, r2, r1
   12bfc:	adc	r3, r3, #0
   12c00:	strd	r2, [sp, #56]	; 0x38
   12c04:	ldr	r3, [sp, #64]	; 0x40
   12c08:	ldr	r0, [r7, r3, lsl #2]
   12c0c:	bl	111a4 <__assert_fail@plt+0x24c>
   12c10:	b	12aa0 <__assert_fail@plt+0x1b48>
   12c14:	andeq	r6, r1, r0, ror #26
   12c18:	andeq	r7, r1, r4, asr #4
   12c1c:	andeq	r7, r1, ip, ror #5
   12c20:	andeq	r2, r1, r0, asr lr
   12c24:	andeq	r8, r2, sp, asr r1
   12c28:	muleq	r1, r0, fp
   12c2c:	andeq	r7, r1, r4, asr #6
   12c30:	andeq	r8, r2, r8, asr r1
   12c34:	andeq	r7, r1, r4, lsl #6
   12c38:	andeq	r7, r1, r4, lsr #6
   12c3c:	andeq	r7, r1, r4, lsr r3
   12c40:	strdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   12c44:	andeq	r7, r1, r0, asr #4
   12c48:	andeq	r6, r1, r0, lsl sp
   12c4c:	andeq	r8, r2, r4, asr r1
   12c50:	andeq	r8, r2, r8, asr #2
   12c54:	andeq	r6, r1, r8, lsl #23
   12c58:	andeq	r6, r1, r8, asr #24
   12c5c:	andeq	r7, r1, r8, asr r3
   12c60:	andeq	r7, r1, r4, ror r3
   12c64:	strdeq	r8, [r2], -r4
   12c68:	muleq	r1, ip, r3
   12c6c:	muleq	r1, r0, r3
   12c70:	andeq	r7, r1, r0, lsr #7
   12c74:	andeq	r2, r0, r0, lsl r0
   12c78:	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
   12c7c:	ldrdeq	r6, [r1], -ip
   12c80:			; <UNDEFINED> instruction: 0x000173b0
   12c84:	andeq	r7, r1, r4, ror #6
   12c88:	ldrdeq	r7, [r1], -r4
   12c8c:	andeq	r8, r2, sp, asr r1
   12c90:	andeq	r7, r1, r0, ror #6
   12c94:	ldr	r0, [r7, r5, lsl #2]
   12c98:	bl	12f44 <__assert_fail@plt+0x1fec>
   12c9c:	add	r5, r5, #1
   12ca0:	cmp	r5, r6
   12ca4:	bne	12c94 <__assert_fail@plt+0x1d3c>
   12ca8:	mov	r0, r7
   12cac:	bl	12f44 <__assert_fail@plt+0x1fec>
   12cb0:	ldrd	r2, [sp, #72]	; 0x48
   12cb4:	cmp	r2, #0
   12cb8:	sbcs	r3, r3, #0
   12cbc:	blt	12cfc <__assert_fail@plt+0x1da4>
   12cc0:	str	fp, [sp, #4]
   12cc4:	mov	r3, #0
   12cc8:	str	r3, [sp]
   12ccc:	ldrd	r2, [sp, #56]	; 0x38
   12cd0:	ldr	r0, [sp, #36]	; 0x24
   12cd4:	bl	110f4 <__assert_fail@plt+0x19c>
   12cd8:	cmp	r0, #0
   12cdc:	sbcs	r3, r1, #0
   12ce0:	movlt	r4, #0
   12ce4:	b	12cfc <__assert_fail@plt+0x1da4>
   12ce8:	ldrd	r2, [sp, #16]
   12cec:	ldr	r1, [sp, #36]	; 0x24
   12cf0:	mov	r0, fp
   12cf4:	bl	112c8 <__assert_fail@plt+0x370>
   12cf8:	mov	r4, r0
   12cfc:	ldr	r3, [sp, #48]	; 0x30
   12d00:	cmp	r3, #0
   12d04:	bne	12d98 <__assert_fail@plt+0x1e40>
   12d08:	ldr	r3, [sp, #44]	; 0x2c
   12d0c:	and	r3, r3, r4
   12d10:	str	r3, [sp, #44]	; 0x2c
   12d14:	ldr	r3, [sp, #40]	; 0x28
   12d18:	ldr	fp, [r3, #4]!
   12d1c:	str	r3, [sp, #40]	; 0x28
   12d20:	cmp	fp, #0
   12d24:	beq	12dec <__assert_fail@plt+0x1e94>
   12d28:	ldr	r1, [pc, #-160]	; 12c90 <__assert_fail@plt+0x1d38>
   12d2c:	mov	r0, fp
   12d30:	bl	10cf4 <strcmp@plt>
   12d34:	subs	r4, r0, #0
   12d38:	str	r4, [sp, #48]	; 0x30
   12d3c:	bne	12218 <__assert_fail@plt+0x12c0>
   12d40:	mov	r3, #1
   12d44:	strb	r3, [sl, #1]
   12d48:	mov	r2, #5
   12d4c:	ldr	r1, [pc, #-208]	; 12c84 <__assert_fail@plt+0x1d2c>
   12d50:	bl	10d78 <dcgettext@plt>
   12d54:	mov	fp, r0
   12d58:	str	r4, [sp, #36]	; 0x24
   12d5c:	ldrb	r3, [sl, #2]
   12d60:	cmp	r3, #0
   12d64:	bne	12274 <__assert_fail@plt+0x131c>
   12d68:	ldr	r3, [sp, #32]
   12d6c:	cmp	r3, #0
   12d70:	bne	122ac <__assert_fail@plt+0x1354>
   12d74:	ldr	r3, [sp, #28]
   12d78:	cmp	r3, #0
   12d7c:	bne	12ce8 <__assert_fail@plt+0x1d90>
   12d80:	ldrd	r2, [sp, #16]
   12d84:	ldr	r1, [sp, #36]	; 0x24
   12d88:	mov	r0, fp
   12d8c:	bl	1145c <__assert_fail@plt+0x504>
   12d90:	mov	r4, r0
   12d94:	b	12cfc <__assert_fail@plt+0x1da4>
   12d98:	ldr	r0, [sp, #36]	; 0x24
   12d9c:	bl	10f4c <close@plt>
   12da0:	cmp	r0, #0
   12da4:	beq	12d08 <__assert_fail@plt+0x1db0>
   12da8:	bl	10e8c <__errno_location@plt>
   12dac:	ldr	r4, [r0]
   12db0:	mov	r2, #5
   12db4:	ldr	r1, [pc, #-308]	; 12c88 <__assert_fail@plt+0x1d30>
   12db8:	mov	r0, #0
   12dbc:	bl	10d78 <dcgettext@plt>
   12dc0:	mov	r5, r0
   12dc4:	mov	r1, fp
   12dc8:	mov	r0, #4
   12dcc:	bl	14a5c <__assert_fail@plt+0x3b04>
   12dd0:	mov	r3, r0
   12dd4:	mov	r2, r5
   12dd8:	mov	r1, r4
   12ddc:	mov	r0, #0
   12de0:	bl	10dfc <error@plt>
   12de4:	mov	r4, #0
   12de8:	b	12d08 <__assert_fail@plt+0x1db0>
   12dec:	ldr	r3, [pc, #-360]	; 12c8c <__assert_fail@plt+0x1d34>
   12df0:	ldrb	r3, [r3, #1]
   12df4:	cmp	r3, #0
   12df8:	bne	12e0c <__assert_fail@plt+0x1eb4>
   12dfc:	ldr	r3, [sp, #44]	; 0x2c
   12e00:	eor	r0, r3, #1
   12e04:	add	sp, sp, #252	; 0xfc
   12e08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12e0c:	mov	r0, #0
   12e10:	bl	10f4c <close@plt>
   12e14:	cmp	r0, #0
   12e18:	bge	12dfc <__assert_fail@plt+0x1ea4>
   12e1c:	bl	10e8c <__errno_location@plt>
   12e20:	ldr	r2, [pc, #-408]	; 12c90 <__assert_fail@plt+0x1d38>
   12e24:	ldr	r1, [r0]
   12e28:	mov	r0, #1
   12e2c:	bl	10dfc <error@plt>
   12e30:	ldr	r3, [pc, #4]	; 12e3c <__assert_fail@plt+0x1ee4>
   12e34:	str	r0, [r3]
   12e38:	bx	lr
   12e3c:	andeq	r8, r2, r4, ror #2
   12e40:	ldr	r3, [pc, #4]	; 12e4c <__assert_fail@plt+0x1ef4>
   12e44:	strb	r0, [r3, #4]
   12e48:	bx	lr
   12e4c:	andeq	r8, r2, r4, ror #2
   12e50:	push	{r4, r5, r6, lr}
   12e54:	sub	sp, sp, #8
   12e58:	ldr	r3, [pc, #200]	; 12f28 <__assert_fail@plt+0x1fd0>
   12e5c:	ldr	r0, [r3]
   12e60:	bl	16028 <__assert_fail@plt+0x50d0>
   12e64:	cmp	r0, #0
   12e68:	beq	12e8c <__assert_fail@plt+0x1f34>
   12e6c:	ldr	r3, [pc, #184]	; 12f2c <__assert_fail@plt+0x1fd4>
   12e70:	ldrb	r3, [r3, #4]
   12e74:	cmp	r3, #0
   12e78:	beq	12ea8 <__assert_fail@plt+0x1f50>
   12e7c:	bl	10e8c <__errno_location@plt>
   12e80:	ldr	r3, [r0]
   12e84:	cmp	r3, #32
   12e88:	bne	12ea8 <__assert_fail@plt+0x1f50>
   12e8c:	ldr	r3, [pc, #156]	; 12f30 <__assert_fail@plt+0x1fd8>
   12e90:	ldr	r0, [r3]
   12e94:	bl	16028 <__assert_fail@plt+0x50d0>
   12e98:	cmp	r0, #0
   12e9c:	bne	12f1c <__assert_fail@plt+0x1fc4>
   12ea0:	add	sp, sp, #8
   12ea4:	pop	{r4, r5, r6, pc}
   12ea8:	mov	r2, #5
   12eac:	ldr	r1, [pc, #128]	; 12f34 <__assert_fail@plt+0x1fdc>
   12eb0:	mov	r0, #0
   12eb4:	bl	10d78 <dcgettext@plt>
   12eb8:	mov	r4, r0
   12ebc:	ldr	r3, [pc, #104]	; 12f2c <__assert_fail@plt+0x1fd4>
   12ec0:	ldr	r5, [r3]
   12ec4:	cmp	r5, #0
   12ec8:	beq	12f00 <__assert_fail@plt+0x1fa8>
   12ecc:	bl	10e8c <__errno_location@plt>
   12ed0:	ldr	r6, [r0]
   12ed4:	mov	r0, r5
   12ed8:	bl	14b08 <__assert_fail@plt+0x3bb0>
   12edc:	str	r4, [sp]
   12ee0:	mov	r3, r0
   12ee4:	ldr	r2, [pc, #76]	; 12f38 <__assert_fail@plt+0x1fe0>
   12ee8:	mov	r1, r6
   12eec:	mov	r0, #0
   12ef0:	bl	10dfc <error@plt>
   12ef4:	ldr	r3, [pc, #64]	; 12f3c <__assert_fail@plt+0x1fe4>
   12ef8:	ldr	r0, [r3]
   12efc:	bl	10d24 <_exit@plt>
   12f00:	bl	10e8c <__errno_location@plt>
   12f04:	mov	r3, r4
   12f08:	ldr	r2, [pc, #48]	; 12f40 <__assert_fail@plt+0x1fe8>
   12f0c:	ldr	r1, [r0]
   12f10:	mov	r0, #0
   12f14:	bl	10dfc <error@plt>
   12f18:	b	12ef4 <__assert_fail@plt+0x1f9c>
   12f1c:	ldr	r3, [pc, #24]	; 12f3c <__assert_fail@plt+0x1fe4>
   12f20:	ldr	r0, [r3]
   12f24:	bl	10d24 <_exit@plt>
   12f28:	andeq	r8, r2, r4, asr r1
   12f2c:	andeq	r8, r2, r4, ror #2
   12f30:	andeq	r8, r2, r0, asr r1
   12f34:	andeq	r7, r1, r0, asr #9
   12f38:	andeq	r7, r1, r8, asr r3
   12f3c:	strdeq	r8, [r2], -ip
   12f40:	andeq	r7, r1, ip, asr r3
   12f44:	push	{r4, r5, lr}
   12f48:	sub	sp, sp, #12
   12f4c:	mov	r5, r0
   12f50:	bl	10e8c <__errno_location@plt>
   12f54:	mov	r4, r0
   12f58:	ldr	r3, [r0]
   12f5c:	str	r3, [sp]
   12f60:	str	r3, [sp, #4]
   12f64:	mov	r3, #0
   12f68:	str	r3, [r0]
   12f6c:	mov	r0, r5
   12f70:	bl	10d18 <free@plt>
   12f74:	ldr	r3, [r4]
   12f78:	cmp	r3, #0
   12f7c:	moveq	r3, #4
   12f80:	movne	r3, #0
   12f84:	add	r2, sp, #8
   12f88:	add	r3, r2, r3
   12f8c:	ldr	r3, [r3, #-8]
   12f90:	str	r3, [r4]
   12f94:	add	sp, sp, #12
   12f98:	pop	{r4, r5, pc}
   12f9c:	push	{r4, r5, r6, r7, r8, lr}
   12fa0:	subs	r4, r2, #0
   12fa4:	beq	12ffc <__assert_fail@plt+0x20a4>
   12fa8:	mov	r7, r0
   12fac:	mov	r5, r1
   12fb0:	mov	r6, #0
   12fb4:	mov	r2, r4
   12fb8:	mov	r1, r5
   12fbc:	mov	r0, r7
   12fc0:	bl	14ca4 <__assert_fail@plt+0x3d4c>
   12fc4:	cmn	r0, #1
   12fc8:	beq	12ff4 <__assert_fail@plt+0x209c>
   12fcc:	cmp	r0, #0
   12fd0:	beq	12fe8 <__assert_fail@plt+0x2090>
   12fd4:	add	r6, r6, r0
   12fd8:	add	r5, r5, r0
   12fdc:	subs	r4, r4, r0
   12fe0:	bne	12fb4 <__assert_fail@plt+0x205c>
   12fe4:	b	12ff4 <__assert_fail@plt+0x209c>
   12fe8:	bl	10e8c <__errno_location@plt>
   12fec:	mov	r3, #0
   12ff0:	str	r3, [r0]
   12ff4:	mov	r0, r6
   12ff8:	pop	{r4, r5, r6, r7, r8, pc}
   12ffc:	mov	r6, r4
   13000:	b	12ff4 <__assert_fail@plt+0x209c>
   13004:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13008:	mov	r4, r0
   1300c:	mov	r5, r1
   13010:	add	r6, r2, #20
   13014:	mov	r3, #0
   13018:	strb	r3, [r2, #20]
   1301c:	cmp	r0, #0
   13020:	sbcs	r3, r1, #0
   13024:	movlt	r8, #10
   13028:	movlt	r9, #0
   1302c:	blt	13084 <__assert_fail@plt+0x212c>
   13030:	mov	r8, #10
   13034:	mov	r9, #0
   13038:	mov	r2, r8
   1303c:	mov	r3, r9
   13040:	mov	r0, r4
   13044:	mov	r1, r5
   13048:	bl	16880 <__assert_fail@plt+0x5928>
   1304c:	add	r2, r2, #48	; 0x30
   13050:	strb	r2, [r6, #-1]!
   13054:	mov	r2, r8
   13058:	mov	r3, r9
   1305c:	mov	r0, r4
   13060:	mov	r1, r5
   13064:	bl	16880 <__assert_fail@plt+0x5928>
   13068:	mov	r4, r0
   1306c:	mov	r5, r1
   13070:	orrs	r3, r4, r5
   13074:	bne	13038 <__assert_fail@plt+0x20e0>
   13078:	mov	r0, r6
   1307c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13080:	mov	r6, r7
   13084:	sub	r7, r6, #1
   13088:	mov	r2, r8
   1308c:	mov	r3, r9
   13090:	mov	r0, r4
   13094:	mov	r1, r5
   13098:	bl	16880 <__assert_fail@plt+0x5928>
   1309c:	rsb	r2, r2, #48	; 0x30
   130a0:	strb	r2, [r6, #-1]
   130a4:	mov	r2, r8
   130a8:	mov	r3, r9
   130ac:	mov	r0, r4
   130b0:	mov	r1, r5
   130b4:	bl	16880 <__assert_fail@plt+0x5928>
   130b8:	mov	r4, r0
   130bc:	mov	r5, r1
   130c0:	orrs	r3, r4, r5
   130c4:	bne	13080 <__assert_fail@plt+0x2128>
   130c8:	sub	r6, r6, #2
   130cc:	mov	r3, #45	; 0x2d
   130d0:	strb	r3, [r7, #-1]
   130d4:	b	13078 <__assert_fail@plt+0x2120>
   130d8:	push	{r4, r5, r6, r8, r9, lr}
   130dc:	mov	r4, r0
   130e0:	mov	r5, r1
   130e4:	add	r6, r2, #20
   130e8:	mov	r3, #0
   130ec:	strb	r3, [r2, #20]
   130f0:	mov	r8, #10
   130f4:	mov	r9, #0
   130f8:	mov	r2, r8
   130fc:	mov	r3, r9
   13100:	mov	r0, r4
   13104:	mov	r1, r5
   13108:	bl	16954 <__assert_fail@plt+0x59fc>
   1310c:	add	r2, r2, #48	; 0x30
   13110:	strb	r2, [r6, #-1]!
   13114:	mov	r2, r8
   13118:	mov	r3, r9
   1311c:	mov	r0, r4
   13120:	mov	r1, r5
   13124:	bl	16954 <__assert_fail@plt+0x59fc>
   13128:	mov	r4, r0
   1312c:	mov	r5, r1
   13130:	orrs	r3, r4, r5
   13134:	bne	130f8 <__assert_fail@plt+0x21a0>
   13138:	mov	r0, r6
   1313c:	pop	{r4, r5, r6, r8, r9, pc}
   13140:	push	{r4, r5, r6, lr}
   13144:	subs	r4, r0, #0
   13148:	beq	131c0 <__assert_fail@plt+0x2268>
   1314c:	mov	r1, #47	; 0x2f
   13150:	mov	r0, r4
   13154:	bl	10f04 <strrchr@plt>
   13158:	cmp	r0, #0
   1315c:	addne	r5, r0, #1
   13160:	moveq	r5, r4
   13164:	sub	r3, r5, r4
   13168:	cmp	r3, #6
   1316c:	ble	131ac <__assert_fail@plt+0x2254>
   13170:	mov	r2, #7
   13174:	ldr	r1, [pc, #96]	; 131dc <__assert_fail@plt+0x2284>
   13178:	sub	r0, r5, #7
   1317c:	bl	10f34 <strncmp@plt>
   13180:	cmp	r0, #0
   13184:	bne	131ac <__assert_fail@plt+0x2254>
   13188:	mov	r2, #3
   1318c:	ldr	r1, [pc, #76]	; 131e0 <__assert_fail@plt+0x2288>
   13190:	mov	r0, r5
   13194:	bl	10f34 <strncmp@plt>
   13198:	cmp	r0, #0
   1319c:	addeq	r4, r5, #3
   131a0:	ldreq	r3, [pc, #60]	; 131e4 <__assert_fail@plt+0x228c>
   131a4:	streq	r4, [r3]
   131a8:	movne	r4, r5
   131ac:	ldr	r3, [pc, #52]	; 131e8 <__assert_fail@plt+0x2290>
   131b0:	str	r4, [r3]
   131b4:	ldr	r3, [pc, #48]	; 131ec <__assert_fail@plt+0x2294>
   131b8:	str	r4, [r3]
   131bc:	pop	{r4, r5, r6, pc}
   131c0:	ldr	r3, [pc, #40]	; 131f0 <__assert_fail@plt+0x2298>
   131c4:	ldr	r3, [r3]
   131c8:	mov	r2, #55	; 0x37
   131cc:	mov	r1, #1
   131d0:	ldr	r0, [pc, #28]	; 131f4 <__assert_fail@plt+0x229c>
   131d4:	bl	10dc0 <fwrite@plt>
   131d8:	bl	10f40 <abort@plt>
   131dc:	andeq	r7, r1, r4, lsl #10
   131e0:	andeq	r7, r1, ip, lsl #10
   131e4:	andeq	r8, r2, r0, asr #2
   131e8:	andeq	r8, r2, ip, ror #2
   131ec:	andeq	r8, r2, r4, asr #2
   131f0:	andeq	r8, r2, r0, asr r1
   131f4:	andeq	r7, r1, ip, asr #9
   131f8:	push	{r4, r5, r6, lr}
   131fc:	mov	r5, r0
   13200:	mov	r4, r1
   13204:	mov	r2, #48	; 0x30
   13208:	mov	r1, #0
   1320c:	bl	10ea4 <memset@plt>
   13210:	cmp	r4, #10
   13214:	beq	13224 <__assert_fail@plt+0x22cc>
   13218:	str	r4, [r5]
   1321c:	mov	r0, r5
   13220:	pop	{r4, r5, r6, pc}
   13224:	bl	10f40 <abort@plt>
   13228:	push	{r4, r5, r6, lr}
   1322c:	mov	r4, r0
   13230:	mov	r5, r1
   13234:	mov	r2, #5
   13238:	mov	r1, r0
   1323c:	mov	r0, #0
   13240:	bl	10d78 <dcgettext@plt>
   13244:	cmp	r4, r0
   13248:	popne	{r4, r5, r6, pc}
   1324c:	bl	16254 <__assert_fail@plt+0x52fc>
   13250:	ldrb	r3, [r0]
   13254:	bic	r3, r3, #32
   13258:	cmp	r3, #85	; 0x55
   1325c:	beq	132d8 <__assert_fail@plt+0x2380>
   13260:	cmp	r3, #71	; 0x47
   13264:	bne	13334 <__assert_fail@plt+0x23dc>
   13268:	ldrb	r3, [r0, #1]
   1326c:	bic	r3, r3, #32
   13270:	cmp	r3, #66	; 0x42
   13274:	bne	13334 <__assert_fail@plt+0x23dc>
   13278:	ldrb	r3, [r0, #2]
   1327c:	cmp	r3, #49	; 0x31
   13280:	bne	13334 <__assert_fail@plt+0x23dc>
   13284:	ldrb	r3, [r0, #3]
   13288:	cmp	r3, #56	; 0x38
   1328c:	bne	13334 <__assert_fail@plt+0x23dc>
   13290:	ldrb	r3, [r0, #4]
   13294:	cmp	r3, #48	; 0x30
   13298:	bne	13334 <__assert_fail@plt+0x23dc>
   1329c:	ldrb	r3, [r0, #5]
   132a0:	cmp	r3, #51	; 0x33
   132a4:	bne	13334 <__assert_fail@plt+0x23dc>
   132a8:	ldrb	r3, [r0, #6]
   132ac:	cmp	r3, #48	; 0x30
   132b0:	bne	13334 <__assert_fail@plt+0x23dc>
   132b4:	ldrb	r3, [r0, #7]
   132b8:	cmp	r3, #0
   132bc:	bne	13334 <__assert_fail@plt+0x23dc>
   132c0:	ldrb	r2, [r4]
   132c4:	ldr	r3, [pc, #124]	; 13348 <__assert_fail@plt+0x23f0>
   132c8:	ldr	r0, [pc, #124]	; 1334c <__assert_fail@plt+0x23f4>
   132cc:	cmp	r2, #96	; 0x60
   132d0:	movne	r0, r3
   132d4:	pop	{r4, r5, r6, pc}
   132d8:	ldrb	r3, [r0, #1]
   132dc:	bic	r3, r3, #32
   132e0:	cmp	r3, #84	; 0x54
   132e4:	bne	13334 <__assert_fail@plt+0x23dc>
   132e8:	ldrb	r3, [r0, #2]
   132ec:	bic	r3, r3, #32
   132f0:	cmp	r3, #70	; 0x46
   132f4:	bne	13334 <__assert_fail@plt+0x23dc>
   132f8:	ldrb	r3, [r0, #3]
   132fc:	cmp	r3, #45	; 0x2d
   13300:	bne	13334 <__assert_fail@plt+0x23dc>
   13304:	ldrb	r3, [r0, #4]
   13308:	cmp	r3, #56	; 0x38
   1330c:	bne	13334 <__assert_fail@plt+0x23dc>
   13310:	ldrb	r3, [r0, #5]
   13314:	cmp	r3, #0
   13318:	bne	13334 <__assert_fail@plt+0x23dc>
   1331c:	ldrb	r2, [r4]
   13320:	ldr	r3, [pc, #40]	; 13350 <__assert_fail@plt+0x23f8>
   13324:	ldr	r0, [pc, #40]	; 13354 <__assert_fail@plt+0x23fc>
   13328:	cmp	r2, #96	; 0x60
   1332c:	movne	r0, r3
   13330:	pop	{r4, r5, r6, pc}
   13334:	ldr	r3, [pc, #28]	; 13358 <__assert_fail@plt+0x2400>
   13338:	ldr	r0, [pc, #28]	; 1335c <__assert_fail@plt+0x2404>
   1333c:	cmp	r5, #9
   13340:	movne	r0, r3
   13344:	pop	{r4, r5, r6, pc}
   13348:	andeq	r7, r1, r8, ror #10
   1334c:	andeq	r7, r1, r4, ror r5
   13350:	andeq	r7, r1, r4, ror #10
   13354:	andeq	r7, r1, r8, ror r5
   13358:	andeq	r7, r1, ip, ror #10
   1335c:	andeq	r7, r1, r0, ror r5
   13360:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13364:	sub	sp, sp, #116	; 0x74
   13368:	str	r0, [sp, #36]	; 0x24
   1336c:	mov	sl, r1
   13370:	str	r2, [sp, #52]	; 0x34
   13374:	str	r3, [sp, #28]
   13378:	ldr	r8, [sp, #152]	; 0x98
   1337c:	bl	10dd8 <__ctype_get_mb_cur_max@plt>
   13380:	str	r0, [sp, #84]	; 0x54
   13384:	ldr	r3, [sp, #156]	; 0x9c
   13388:	lsr	r3, r3, #1
   1338c:	and	r3, r3, #1
   13390:	str	r3, [sp, #32]
   13394:	mov	r3, #1
   13398:	str	r3, [sp, #40]	; 0x28
   1339c:	mov	r3, #0
   133a0:	str	r3, [sp, #80]	; 0x50
   133a4:	str	r3, [sp, #44]	; 0x2c
   133a8:	str	r3, [sp, #48]	; 0x30
   133ac:	str	r3, [sp, #60]	; 0x3c
   133b0:	str	r3, [sp, #72]	; 0x48
   133b4:	str	r3, [sp, #76]	; 0x4c
   133b8:	mov	r7, sl
   133bc:	mov	sl, r8
   133c0:	cmp	sl, #10
   133c4:	ldrls	pc, [pc, sl, lsl #2]
   133c8:	b	13580 <__assert_fail@plt+0x2628>
   133cc:	andeq	r3, r1, r0, lsr r4
   133d0:	andeq	r3, r1, r0, lsl #8
   133d4:	andeq	r3, r1, ip, asr r5
   133d8:	strdeq	r3, [r1], -r8
   133dc:	andeq	r3, r1, r0, lsl r5
   133e0:	andeq	r3, r1, r0, asr #8
   133e4:	andeq	r4, r1, ip, lsr #9
   133e8:	andeq	r3, r1, r4, lsl #11
   133ec:	andeq	r3, r1, ip, ror r4
   133f0:	andeq	r3, r1, ip, ror r4
   133f4:	andeq	r3, r1, ip, ror r4
   133f8:	mov	r3, #1
   133fc:	str	r3, [sp, #48]	; 0x30
   13400:	mov	r3, #1
   13404:	str	r3, [sp, #32]
   13408:	str	r3, [sp, #60]	; 0x3c
   1340c:	ldr	r3, [pc, #4068]	; 143f8 <__assert_fail@plt+0x34a0>
   13410:	str	r3, [sp, #72]	; 0x48
   13414:	mov	fp, #0
   13418:	mov	sl, #2
   1341c:	mov	r6, #0
   13420:	ldr	r3, [sp, #48]	; 0x30
   13424:	eor	r3, r3, #1
   13428:	str	r3, [sp, #68]	; 0x44
   1342c:	b	13d14 <__assert_fail@plt+0x2dbc>
   13430:	mov	r3, #0
   13434:	str	r3, [sp, #32]
   13438:	mov	fp, r3
   1343c:	b	1341c <__assert_fail@plt+0x24c4>
   13440:	ldr	r3, [sp, #32]
   13444:	cmp	r3, #0
   13448:	bne	1359c <__assert_fail@plt+0x2644>
   1344c:	cmp	r7, #0
   13450:	beq	135bc <__assert_fail@plt+0x2664>
   13454:	ldr	r3, [sp, #36]	; 0x24
   13458:	mov	r2, #34	; 0x22
   1345c:	strb	r2, [r3]
   13460:	mov	r3, #1
   13464:	str	r3, [sp, #48]	; 0x30
   13468:	str	r3, [sp, #60]	; 0x3c
   1346c:	ldr	r3, [pc, #3980]	; 14400 <__assert_fail@plt+0x34a8>
   13470:	str	r3, [sp, #72]	; 0x48
   13474:	mov	fp, #1
   13478:	b	1341c <__assert_fail@plt+0x24c4>
   1347c:	cmp	sl, #10
   13480:	beq	134a4 <__assert_fail@plt+0x254c>
   13484:	mov	r1, sl
   13488:	ldr	r0, [pc, #3948]	; 143fc <__assert_fail@plt+0x34a4>
   1348c:	bl	13228 <__assert_fail@plt+0x22d0>
   13490:	str	r0, [sp, #164]	; 0xa4
   13494:	mov	r1, sl
   13498:	ldr	r0, [pc, #3928]	; 143f8 <__assert_fail@plt+0x34a0>
   1349c:	bl	13228 <__assert_fail@plt+0x22d0>
   134a0:	str	r0, [sp, #168]	; 0xa8
   134a4:	ldr	r3, [sp, #32]
   134a8:	cmp	r3, #0
   134ac:	movne	fp, #0
   134b0:	bne	134e8 <__assert_fail@plt+0x2590>
   134b4:	ldr	r3, [sp, #164]	; 0xa4
   134b8:	ldrb	r3, [r3]
   134bc:	cmp	r3, #0
   134c0:	beq	13508 <__assert_fail@plt+0x25b0>
   134c4:	ldr	r2, [sp, #164]	; 0xa4
   134c8:	mov	fp, #0
   134cc:	ldr	r1, [sp, #36]	; 0x24
   134d0:	cmp	r7, fp
   134d4:	strbhi	r3, [r1, fp]
   134d8:	add	fp, fp, #1
   134dc:	ldrb	r3, [r2, #1]!
   134e0:	cmp	r3, #0
   134e4:	bne	134d0 <__assert_fail@plt+0x2578>
   134e8:	ldr	r0, [sp, #168]	; 0xa8
   134ec:	bl	10e68 <strlen@plt>
   134f0:	str	r0, [sp, #60]	; 0x3c
   134f4:	ldr	r3, [sp, #168]	; 0xa8
   134f8:	str	r3, [sp, #72]	; 0x48
   134fc:	mov	r3, #1
   13500:	str	r3, [sp, #48]	; 0x30
   13504:	b	1341c <__assert_fail@plt+0x24c4>
   13508:	mov	fp, #0
   1350c:	b	134e8 <__assert_fail@plt+0x2590>
   13510:	ldr	r3, [sp, #32]
   13514:	cmp	r3, #0
   13518:	bne	135d8 <__assert_fail@plt+0x2680>
   1351c:	mov	r3, #1
   13520:	str	r3, [sp, #48]	; 0x30
   13524:	cmp	r7, #0
   13528:	beq	135f4 <__assert_fail@plt+0x269c>
   1352c:	ldr	r3, [sp, #36]	; 0x24
   13530:	mov	r2, #39	; 0x27
   13534:	strb	r2, [r3]
   13538:	mov	r3, #0
   1353c:	str	r3, [sp, #32]
   13540:	mov	r3, #1
   13544:	str	r3, [sp, #60]	; 0x3c
   13548:	ldr	r3, [pc, #3752]	; 143f8 <__assert_fail@plt+0x34a0>
   1354c:	str	r3, [sp, #72]	; 0x48
   13550:	mov	fp, #1
   13554:	mov	sl, #2
   13558:	b	1341c <__assert_fail@plt+0x24c4>
   1355c:	ldr	r3, [sp, #32]
   13560:	cmp	r3, #0
   13564:	beq	13524 <__assert_fail@plt+0x25cc>
   13568:	mov	r3, #1
   1356c:	str	r3, [sp, #60]	; 0x3c
   13570:	ldr	r3, [pc, #3712]	; 143f8 <__assert_fail@plt+0x34a0>
   13574:	str	r3, [sp, #72]	; 0x48
   13578:	mov	fp, #0
   1357c:	b	1341c <__assert_fail@plt+0x24c4>
   13580:	bl	10f40 <abort@plt>
   13584:	mov	r3, #0
   13588:	str	r3, [sp, #32]
   1358c:	mov	r3, #1
   13590:	str	r3, [sp, #48]	; 0x30
   13594:	mov	fp, #0
   13598:	b	1341c <__assert_fail@plt+0x24c4>
   1359c:	ldr	r3, [sp, #32]
   135a0:	str	r3, [sp, #48]	; 0x30
   135a4:	mov	r3, #1
   135a8:	str	r3, [sp, #60]	; 0x3c
   135ac:	ldr	r3, [pc, #3660]	; 14400 <__assert_fail@plt+0x34a8>
   135b0:	str	r3, [sp, #72]	; 0x48
   135b4:	mov	fp, #0
   135b8:	b	1341c <__assert_fail@plt+0x24c4>
   135bc:	mov	r3, #1
   135c0:	str	r3, [sp, #48]	; 0x30
   135c4:	str	r3, [sp, #60]	; 0x3c
   135c8:	ldr	r3, [pc, #3632]	; 14400 <__assert_fail@plt+0x34a8>
   135cc:	str	r3, [sp, #72]	; 0x48
   135d0:	mov	fp, #1
   135d4:	b	1341c <__assert_fail@plt+0x24c4>
   135d8:	mov	r3, #1
   135dc:	str	r3, [sp, #60]	; 0x3c
   135e0:	ldr	r3, [pc, #3600]	; 143f8 <__assert_fail@plt+0x34a0>
   135e4:	str	r3, [sp, #72]	; 0x48
   135e8:	mov	fp, #0
   135ec:	mov	sl, #2
   135f0:	b	1341c <__assert_fail@plt+0x24c4>
   135f4:	mov	r3, #0
   135f8:	str	r3, [sp, #32]
   135fc:	mov	r3, #1
   13600:	str	r3, [sp, #60]	; 0x3c
   13604:	ldr	r3, [pc, #3564]	; 143f8 <__assert_fail@plt+0x34a0>
   13608:	str	r3, [sp, #72]	; 0x48
   1360c:	mov	fp, #1
   13610:	mov	sl, #2
   13614:	b	1341c <__assert_fail@plt+0x24c4>
   13618:	mov	r3, #0
   1361c:	str	r3, [sp, #56]	; 0x38
   13620:	ldr	r3, [sp, #52]	; 0x34
   13624:	add	r2, r3, r6
   13628:	str	r2, [sp, #64]	; 0x40
   1362c:	ldrb	r4, [r3, r6]
   13630:	cmp	r4, #126	; 0x7e
   13634:	ldrls	pc, [pc, r4, lsl #2]
   13638:	b	13e74 <__assert_fail@plt+0x2f1c>
   1363c:	andeq	r3, r1, r4, asr r8
   13640:	andeq	r3, r1, r4, ror lr
   13644:	andeq	r3, r1, r4, ror lr
   13648:	andeq	r3, r1, r4, ror lr
   1364c:	andeq	r3, r1, r4, ror lr
   13650:	andeq	r3, r1, r4, ror lr
   13654:	andeq	r3, r1, r4, ror lr
   13658:			; <UNDEFINED> instruction: 0x00013bb0
   1365c:	andeq	r3, r1, ip, asr #16
   13660:	andeq	r3, r1, r8, ror #22
   13664:	andeq	r3, r1, r0, ror #22
   13668:	ldrdeq	r3, [r1], -r0
   1366c:	andeq	r3, r1, r8, asr #21
   13670:	andeq	r3, r1, r4, asr #16
   13674:	andeq	r3, r1, r4, ror lr
   13678:	andeq	r3, r1, r4, ror lr
   1367c:	andeq	r3, r1, r4, ror lr
   13680:	andeq	r3, r1, r4, ror lr
   13684:	andeq	r3, r1, r4, ror lr
   13688:	andeq	r3, r1, r4, ror lr
   1368c:	andeq	r3, r1, r4, ror lr
   13690:	andeq	r3, r1, r4, ror lr
   13694:	andeq	r3, r1, r4, ror lr
   13698:	andeq	r3, r1, r4, ror lr
   1369c:	andeq	r3, r1, r4, ror lr
   136a0:	andeq	r3, r1, r4, ror lr
   136a4:	andeq	r3, r1, r4, ror lr
   136a8:	andeq	r3, r1, r4, ror lr
   136ac:	andeq	r3, r1, r4, ror lr
   136b0:	andeq	r3, r1, r4, ror lr
   136b4:	andeq	r3, r1, r4, ror lr
   136b8:	andeq	r3, r1, r4, ror lr
   136bc:	andeq	r3, r1, r4, lsl #24
   136c0:	andeq	r3, r1, r0, lsl #24
   136c4:	andeq	r3, r1, r0, lsl #24
   136c8:	ldrdeq	r3, [r1], -r8
   136cc:	andeq	r3, r1, r0, lsl #24
   136d0:	andeq	r4, r1, r8, asr #4
   136d4:	andeq	r3, r1, r0, lsl #24
   136d8:	ldrdeq	r3, [r1], -r8
   136dc:	andeq	r3, r1, r0, lsl #24
   136e0:	andeq	r3, r1, r0, lsl #24
   136e4:	andeq	r3, r1, r0, lsl #24
   136e8:	andeq	r4, r1, r8, asr #4
   136ec:	andeq	r4, r1, r8, asr #4
   136f0:	andeq	r4, r1, r8, asr #4
   136f4:	andeq	r4, r1, r8, asr #4
   136f8:	andeq	r4, r1, r8, asr #4
   136fc:	andeq	r4, r1, r8, asr #4
   13700:	andeq	r4, r1, r8, asr #4
   13704:	andeq	r4, r1, r8, asr #4
   13708:	andeq	r4, r1, r8, asr #4
   1370c:	andeq	r4, r1, r8, asr #4
   13710:	andeq	r4, r1, r8, asr #4
   13714:	andeq	r4, r1, r8, asr #4
   13718:	andeq	r4, r1, r8, asr #4
   1371c:	andeq	r4, r1, r8, asr #4
   13720:	andeq	r4, r1, r8, asr #4
   13724:	andeq	r4, r1, r8, asr #4
   13728:	andeq	r3, r1, r0, lsl #24
   1372c:	andeq	r3, r1, r0, lsl #24
   13730:	andeq	r3, r1, r0, lsl #24
   13734:	andeq	r3, r1, r0, lsl #24
   13738:	andeq	r3, r1, ip, asr r9
   1373c:	andeq	r3, r1, r4, ror lr
   13740:	andeq	r4, r1, r8, asr #4
   13744:	andeq	r4, r1, r8, asr #4
   13748:	andeq	r4, r1, r8, asr #4
   1374c:	andeq	r4, r1, r8, asr #4
   13750:	andeq	r4, r1, r8, asr #4
   13754:	andeq	r4, r1, r8, asr #4
   13758:	andeq	r4, r1, r8, asr #4
   1375c:	andeq	r4, r1, r8, asr #4
   13760:	andeq	r4, r1, r8, asr #4
   13764:	andeq	r4, r1, r8, asr #4
   13768:	andeq	r4, r1, r8, asr #4
   1376c:	andeq	r4, r1, r8, asr #4
   13770:	andeq	r4, r1, r8, asr #4
   13774:	andeq	r4, r1, r8, asr #4
   13778:	andeq	r4, r1, r8, asr #4
   1377c:	andeq	r4, r1, r8, asr #4
   13780:	andeq	r4, r1, r8, asr #4
   13784:	andeq	r4, r1, r8, asr #4
   13788:	andeq	r4, r1, r8, asr #4
   1378c:	andeq	r4, r1, r8, asr #4
   13790:	andeq	r4, r1, r8, asr #4
   13794:	andeq	r4, r1, r8, asr #4
   13798:	andeq	r4, r1, r8, asr #4
   1379c:	andeq	r4, r1, r8, asr #4
   137a0:	andeq	r4, r1, r8, asr #4
   137a4:	andeq	r4, r1, r8, asr #4
   137a8:	andeq	r3, r1, r0, lsl #24
   137ac:	ldrdeq	r3, [r1], -r8
   137b0:	andeq	r4, r1, r8, asr #4
   137b4:	andeq	r3, r1, r0, lsl #24
   137b8:	andeq	r4, r1, r8, asr #4
   137bc:	andeq	r3, r1, r0, lsl #24
   137c0:	andeq	r4, r1, r8, asr #4
   137c4:	andeq	r4, r1, r8, asr #4
   137c8:	andeq	r4, r1, r8, asr #4
   137cc:	andeq	r4, r1, r8, asr #4
   137d0:	andeq	r4, r1, r8, asr #4
   137d4:	andeq	r4, r1, r8, asr #4
   137d8:	andeq	r4, r1, r8, asr #4
   137dc:	andeq	r4, r1, r8, asr #4
   137e0:	andeq	r4, r1, r8, asr #4
   137e4:	andeq	r4, r1, r8, asr #4
   137e8:	andeq	r4, r1, r8, asr #4
   137ec:	andeq	r4, r1, r8, asr #4
   137f0:	andeq	r4, r1, r8, asr #4
   137f4:	andeq	r4, r1, r8, asr #4
   137f8:	andeq	r4, r1, r8, asr #4
   137fc:	andeq	r4, r1, r8, asr #4
   13800:	andeq	r4, r1, r8, asr #4
   13804:	andeq	r4, r1, r8, asr #4
   13808:	andeq	r4, r1, r8, asr #4
   1380c:	andeq	r4, r1, r8, asr #4
   13810:	andeq	r4, r1, r8, asr #4
   13814:	andeq	r4, r1, r8, asr #4
   13818:	andeq	r4, r1, r8, asr #4
   1381c:	andeq	r4, r1, r8, asr #4
   13820:	andeq	r4, r1, r8, asr #4
   13824:	andeq	r4, r1, r8, asr #4
   13828:			; <UNDEFINED> instruction: 0x00013bb8
   1382c:	andeq	r3, r1, r0, lsl #24
   13830:			; <UNDEFINED> instruction: 0x00013bb8
   13834:	ldrdeq	r3, [r1], -r8
   13838:	mov	r3, #0
   1383c:	str	r3, [sp, #56]	; 0x38
   13840:	b	13620 <__assert_fail@plt+0x26c8>
   13844:	mov	r3, #114	; 0x72
   13848:	b	13b6c <__assert_fail@plt+0x2c14>
   1384c:	mov	r3, #98	; 0x62
   13850:	b	13b84 <__assert_fail@plt+0x2c2c>
   13854:	ldr	r3, [sp, #48]	; 0x30
   13858:	cmp	r3, #0
   1385c:	beq	13944 <__assert_fail@plt+0x29ec>
   13860:	ldr	r3, [sp, #32]
   13864:	cmp	r3, #0
   13868:	bne	143cc <__assert_fail@plt+0x3474>
   1386c:	ldr	r3, [sp, #44]	; 0x2c
   13870:	eor	r3, r3, #1
   13874:	cmp	sl, #2
   13878:	movne	r3, #0
   1387c:	andeq	r3, r3, #1
   13880:	cmp	r3, #0
   13884:	moveq	r2, fp
   13888:	beq	138cc <__assert_fail@plt+0x2974>
   1388c:	cmp	r7, fp
   13890:	ldrhi	r2, [sp, #36]	; 0x24
   13894:	movhi	r1, #39	; 0x27
   13898:	strbhi	r1, [r2, fp]
   1389c:	add	r2, fp, #1
   138a0:	cmp	r7, r2
   138a4:	ldrhi	r1, [sp, #36]	; 0x24
   138a8:	movhi	r0, #36	; 0x24
   138ac:	strbhi	r0, [r1, r2]
   138b0:	add	r2, fp, #2
   138b4:	cmp	r7, r2
   138b8:	ldrhi	r1, [sp, #36]	; 0x24
   138bc:	movhi	r0, #39	; 0x27
   138c0:	strbhi	r0, [r1, r2]
   138c4:	add	r2, fp, #3
   138c8:	str	r3, [sp, #44]	; 0x2c
   138cc:	cmp	r7, r2
   138d0:	ldrhi	r3, [sp, #36]	; 0x24
   138d4:	movhi	r1, #92	; 0x5c
   138d8:	strbhi	r1, [r3, r2]
   138dc:	add	fp, r2, #1
   138e0:	cmp	r5, #0
   138e4:	beq	14250 <__assert_fail@plt+0x32f8>
   138e8:	add	r3, r6, #1
   138ec:	ldr	r1, [sp, #28]
   138f0:	cmp	r1, r3
   138f4:	bls	14260 <__assert_fail@plt+0x3308>
   138f8:	ldr	r1, [sp, #52]	; 0x34
   138fc:	ldrb	r3, [r1, r3]
   13900:	sub	r3, r3, #48	; 0x30
   13904:	uxtb	r3, r3
   13908:	cmp	r3, #9
   1390c:	bhi	1426c <__assert_fail@plt+0x3314>
   13910:	cmp	r7, fp
   13914:	movhi	r3, #48	; 0x30
   13918:	ldrhi	r1, [sp, #36]	; 0x24
   1391c:	strbhi	r3, [r1, fp]
   13920:	add	r3, r2, #2
   13924:	cmp	r7, r3
   13928:	movhi	r1, #48	; 0x30
   1392c:	ldrhi	r0, [sp, #36]	; 0x24
   13930:	strbhi	r1, [r0, r3]
   13934:	add	fp, r2, #3
   13938:	ldr	r8, [sp, #32]
   1393c:	mov	r4, #48	; 0x30
   13940:	b	13c1c <__assert_fail@plt+0x2cc4>
   13944:	ldr	r3, [sp, #156]	; 0x9c
   13948:	tst	r3, #1
   1394c:	bne	13d10 <__assert_fail@plt+0x2db8>
   13950:	ldr	r5, [sp, #48]	; 0x30
   13954:	mov	r8, r5
   13958:	b	13c1c <__assert_fail@plt+0x2cc4>
   1395c:	cmp	sl, #2
   13960:	beq	13978 <__assert_fail@plt+0x2a20>
   13964:	cmp	sl, #5
   13968:	beq	13990 <__assert_fail@plt+0x2a38>
   1396c:	mov	r8, #0
   13970:	mov	r5, r8
   13974:	b	13c1c <__assert_fail@plt+0x2cc4>
   13978:	ldr	r3, [sp, #32]
   1397c:	cmp	r3, #0
   13980:	bne	143e0 <__assert_fail@plt+0x3488>
   13984:	mov	r8, r3
   13988:	mov	r5, r3
   1398c:	b	13c1c <__assert_fail@plt+0x2cc4>
   13990:	ldr	r3, [sp, #156]	; 0x9c
   13994:	tst	r3, #4
   13998:	beq	14278 <__assert_fail@plt+0x3320>
   1399c:	add	r3, r6, #2
   139a0:	ldr	r2, [sp, #28]
   139a4:	cmp	r2, r3
   139a8:	bls	14284 <__assert_fail@plt+0x332c>
   139ac:	ldr	r2, [sp, #52]	; 0x34
   139b0:	add	r2, r2, r6
   139b4:	ldrb	r2, [r2, #1]
   139b8:	cmp	r2, #63	; 0x3f
   139bc:	movne	r8, #0
   139c0:	movne	r5, r8
   139c4:	bne	13c1c <__assert_fail@plt+0x2cc4>
   139c8:	ldr	r2, [sp, #52]	; 0x34
   139cc:	ldrb	r2, [r2, r3]
   139d0:	sub	r1, r2, #33	; 0x21
   139d4:	cmp	r1, #29
   139d8:	ldrls	pc, [pc, r1, lsl #2]
   139dc:	b	14290 <__assert_fail@plt+0x3338>
   139e0:	andeq	r3, r1, r8, asr sl
   139e4:	muleq	r1, r0, r2
   139e8:	muleq	r1, r0, r2
   139ec:	muleq	r1, r0, r2
   139f0:	muleq	r1, r0, r2
   139f4:	muleq	r1, r0, r2
   139f8:	andeq	r3, r1, r8, asr sl
   139fc:	andeq	r3, r1, r8, asr sl
   13a00:	andeq	r3, r1, r8, asr sl
   13a04:	muleq	r1, r0, r2
   13a08:	muleq	r1, r0, r2
   13a0c:	muleq	r1, r0, r2
   13a10:	andeq	r3, r1, r8, asr sl
   13a14:	muleq	r1, r0, r2
   13a18:	andeq	r3, r1, r8, asr sl
   13a1c:	muleq	r1, r0, r2
   13a20:	muleq	r1, r0, r2
   13a24:	muleq	r1, r0, r2
   13a28:	muleq	r1, r0, r2
   13a2c:	muleq	r1, r0, r2
   13a30:	muleq	r1, r0, r2
   13a34:	muleq	r1, r0, r2
   13a38:	muleq	r1, r0, r2
   13a3c:	muleq	r1, r0, r2
   13a40:	muleq	r1, r0, r2
   13a44:	muleq	r1, r0, r2
   13a48:	muleq	r1, r0, r2
   13a4c:	andeq	r3, r1, r8, asr sl
   13a50:	andeq	r3, r1, r8, asr sl
   13a54:	andeq	r3, r1, r8, asr sl
   13a58:	ldr	r1, [sp, #32]
   13a5c:	cmp	r1, #0
   13a60:	bne	144a0 <__assert_fail@plt+0x3548>
   13a64:	cmp	r7, fp
   13a68:	movhi	r1, #63	; 0x3f
   13a6c:	ldrhi	r0, [sp, #36]	; 0x24
   13a70:	strbhi	r1, [r0, fp]
   13a74:	add	r1, fp, #1
   13a78:	cmp	r7, r1
   13a7c:	ldrhi	r0, [sp, #36]	; 0x24
   13a80:	movhi	ip, #34	; 0x22
   13a84:	strbhi	ip, [r0, r1]
   13a88:	add	r1, fp, #2
   13a8c:	cmp	r7, r1
   13a90:	ldrhi	r0, [sp, #36]	; 0x24
   13a94:	movhi	ip, #34	; 0x22
   13a98:	strbhi	ip, [r0, r1]
   13a9c:	add	r1, fp, #3
   13aa0:	cmp	r7, r1
   13aa4:	movhi	r0, #63	; 0x3f
   13aa8:	ldrhi	ip, [sp, #36]	; 0x24
   13aac:	strbhi	r0, [ip, r1]
   13ab0:	add	fp, fp, #4
   13ab4:	ldr	r5, [sp, #32]
   13ab8:	mov	r8, r5
   13abc:	mov	r4, r2
   13ac0:	mov	r6, r3
   13ac4:	b	13c1c <__assert_fail@plt+0x2cc4>
   13ac8:	mov	r3, #102	; 0x66
   13acc:	b	13b84 <__assert_fail@plt+0x2c2c>
   13ad0:	mov	r3, #118	; 0x76
   13ad4:	b	13b84 <__assert_fail@plt+0x2c2c>
   13ad8:	cmp	sl, #2
   13adc:	beq	13b48 <__assert_fail@plt+0x2bf0>
   13ae0:	ldr	r3, [sp, #48]	; 0x30
   13ae4:	ldr	r2, [sp, #32]
   13ae8:	and	r3, r3, r2
   13aec:	tst	r9, r3
   13af0:	moveq	r3, r4
   13af4:	beq	13b84 <__assert_fail@plt+0x2c2c>
   13af8:	mov	r8, #0
   13afc:	mov	r5, r8
   13b00:	eor	r5, r5, #1
   13b04:	ldr	r3, [sp, #44]	; 0x2c
   13b08:	and	r5, r5, r3
   13b0c:	tst	r5, #255	; 0xff
   13b10:	beq	13cf0 <__assert_fail@plt+0x2d98>
   13b14:	cmp	r7, fp
   13b18:	ldrhi	r3, [sp, #36]	; 0x24
   13b1c:	movhi	r2, #39	; 0x27
   13b20:	strbhi	r2, [r3, fp]
   13b24:	add	r3, fp, #1
   13b28:	cmp	r7, r3
   13b2c:	ldrhi	r2, [sp, #36]	; 0x24
   13b30:	movhi	r1, #39	; 0x27
   13b34:	strbhi	r1, [r2, r3]
   13b38:	add	fp, fp, #2
   13b3c:	mov	r3, #0
   13b40:	str	r3, [sp, #44]	; 0x2c
   13b44:	b	13cf0 <__assert_fail@plt+0x2d98>
   13b48:	ldr	r3, [sp, #32]
   13b4c:	cmp	r3, #0
   13b50:	bne	143ec <__assert_fail@plt+0x3494>
   13b54:	mov	r8, r3
   13b58:	mov	r5, r3
   13b5c:	b	13b00 <__assert_fail@plt+0x2ba8>
   13b60:	mov	r3, #110	; 0x6e
   13b64:	b	13b6c <__assert_fail@plt+0x2c14>
   13b68:	mov	r3, #116	; 0x74
   13b6c:	ldr	r2, [sp, #32]
   13b70:	cmp	sl, #2
   13b74:	movne	r2, #0
   13b78:	andeq	r2, r2, #1
   13b7c:	cmp	r2, #0
   13b80:	bne	13ba4 <__assert_fail@plt+0x2c4c>
   13b84:	ldr	r2, [sp, #48]	; 0x30
   13b88:	cmp	r2, #0
   13b8c:	moveq	r8, r2
   13b90:	moveq	r5, r2
   13b94:	beq	13c1c <__assert_fail@plt+0x2cc4>
   13b98:	mov	r4, r3
   13b9c:	mov	r8, #0
   13ba0:	b	13c74 <__assert_fail@plt+0x2d1c>
   13ba4:	mov	r8, sl
   13ba8:	mov	sl, r7
   13bac:	b	14418 <__assert_fail@plt+0x34c0>
   13bb0:	mov	r3, #97	; 0x61
   13bb4:	b	13b84 <__assert_fail@plt+0x2c2c>
   13bb8:	ldr	r3, [sp, #28]
   13bbc:	cmn	r3, #1
   13bc0:	beq	13bec <__assert_fail@plt+0x2c94>
   13bc4:	ldr	r3, [sp, #28]
   13bc8:	subs	r3, r3, #1
   13bcc:	movne	r3, #1
   13bd0:	cmp	r3, #0
   13bd4:	bne	1429c <__assert_fail@plt+0x3344>
   13bd8:	cmp	r6, #0
   13bdc:	beq	13c04 <__assert_fail@plt+0x2cac>
   13be0:	mov	r8, #0
   13be4:	mov	r5, r8
   13be8:	b	13c1c <__assert_fail@plt+0x2cc4>
   13bec:	ldr	r3, [sp, #52]	; 0x34
   13bf0:	ldrb	r3, [r3, #1]
   13bf4:	adds	r3, r3, #0
   13bf8:	movne	r3, #1
   13bfc:	b	13bd0 <__assert_fail@plt+0x2c78>
   13c00:	mov	r8, #0
   13c04:	ldr	r5, [sp, #32]
   13c08:	cmp	sl, #2
   13c0c:	movne	r5, #0
   13c10:	andeq	r5, r5, #1
   13c14:	cmp	r5, #0
   13c18:	bne	13dcc <__assert_fail@plt+0x2e74>
   13c1c:	ldr	r3, [sp, #68]	; 0x44
   13c20:	cmp	sl, #2
   13c24:	orreq	r3, r3, #1
   13c28:	eor	r3, r3, #1
   13c2c:	ldr	r2, [sp, #32]
   13c30:	orr	r3, r2, r3
   13c34:	tst	r3, #255	; 0xff
   13c38:	beq	13c68 <__assert_fail@plt+0x2d10>
   13c3c:	ldr	r3, [sp, #160]	; 0xa0
   13c40:	cmp	r3, #0
   13c44:	beq	13c68 <__assert_fail@plt+0x2d10>
   13c48:	lsr	r2, r4, #5
   13c4c:	uxtb	r2, r2
   13c50:	and	r3, r4, #31
   13c54:	ldr	r1, [sp, #160]	; 0xa0
   13c58:	ldr	r2, [r1, r2, lsl #2]
   13c5c:	lsr	r3, r2, r3
   13c60:	tst	r3, #1
   13c64:	bne	13c74 <__assert_fail@plt+0x2d1c>
   13c68:	ldr	r3, [sp, #56]	; 0x38
   13c6c:	cmp	r3, #0
   13c70:	beq	13b00 <__assert_fail@plt+0x2ba8>
   13c74:	ldr	r3, [sp, #32]
   13c78:	cmp	r3, #0
   13c7c:	bne	14488 <__assert_fail@plt+0x3530>
   13c80:	ldr	r3, [sp, #44]	; 0x2c
   13c84:	eor	r3, r3, #1
   13c88:	cmp	sl, #2
   13c8c:	movne	r3, #0
   13c90:	andeq	r3, r3, #1
   13c94:	cmp	r3, #0
   13c98:	beq	13cdc <__assert_fail@plt+0x2d84>
   13c9c:	cmp	r7, fp
   13ca0:	ldrhi	r2, [sp, #36]	; 0x24
   13ca4:	movhi	r1, #39	; 0x27
   13ca8:	strbhi	r1, [r2, fp]
   13cac:	add	r2, fp, #1
   13cb0:	cmp	r7, r2
   13cb4:	ldrhi	r1, [sp, #36]	; 0x24
   13cb8:	movhi	r0, #36	; 0x24
   13cbc:	strbhi	r0, [r1, r2]
   13cc0:	add	r2, fp, #2
   13cc4:	cmp	r7, r2
   13cc8:	ldrhi	r1, [sp, #36]	; 0x24
   13ccc:	movhi	r0, #39	; 0x27
   13cd0:	strbhi	r0, [r1, r2]
   13cd4:	add	fp, fp, #3
   13cd8:	str	r3, [sp, #44]	; 0x2c
   13cdc:	cmp	r7, fp
   13ce0:	ldrhi	r3, [sp, #36]	; 0x24
   13ce4:	movhi	r2, #92	; 0x5c
   13ce8:	strbhi	r2, [r3, fp]
   13cec:	add	fp, fp, #1
   13cf0:	cmp	fp, r7
   13cf4:	ldrcc	r3, [sp, #36]	; 0x24
   13cf8:	strbcc	r4, [r3, fp]
   13cfc:	add	fp, fp, #1
   13d00:	ldr	r3, [sp, #40]	; 0x28
   13d04:	cmp	r8, #0
   13d08:	moveq	r3, #0
   13d0c:	str	r3, [sp, #40]	; 0x28
   13d10:	add	r6, r6, #1
   13d14:	ldr	r3, [sp, #28]
   13d18:	cmn	r3, #1
   13d1c:	beq	142a8 <__assert_fail@plt+0x3350>
   13d20:	ldr	r3, [sp, #28]
   13d24:	subs	r8, r3, r6
   13d28:	movne	r8, #1
   13d2c:	cmp	r8, #0
   13d30:	beq	142bc <__assert_fail@plt+0x3364>
   13d34:	ldr	r5, [sp, #48]	; 0x30
   13d38:	cmp	sl, #2
   13d3c:	moveq	r5, #0
   13d40:	andne	r5, r5, #1
   13d44:	ldr	r3, [sp, #60]	; 0x3c
   13d48:	adds	r9, r3, #0
   13d4c:	movne	r9, #1
   13d50:	ands	r2, r5, r9
   13d54:	str	r2, [sp, #56]	; 0x38
   13d58:	beq	13620 <__assert_fail@plt+0x26c8>
   13d5c:	add	r4, r6, r3
   13d60:	ldr	r2, [sp, #28]
   13d64:	cmp	r3, #1
   13d68:	movls	r3, #0
   13d6c:	movhi	r3, #1
   13d70:	cmn	r2, #1
   13d74:	movne	r3, #0
   13d78:	cmp	r3, #0
   13d7c:	beq	13d8c <__assert_fail@plt+0x2e34>
   13d80:	ldr	r0, [sp, #52]	; 0x34
   13d84:	bl	10e68 <strlen@plt>
   13d88:	str	r0, [sp, #28]
   13d8c:	ldr	r3, [sp, #28]
   13d90:	cmp	r3, r4
   13d94:	bcc	13618 <__assert_fail@plt+0x26c0>
   13d98:	ldr	r2, [sp, #60]	; 0x3c
   13d9c:	ldr	r1, [sp, #72]	; 0x48
   13da0:	ldr	r3, [sp, #52]	; 0x34
   13da4:	add	r0, r3, r6
   13da8:	bl	10d60 <memcmp@plt>
   13dac:	cmp	r0, #0
   13db0:	bne	13838 <__assert_fail@plt+0x28e0>
   13db4:	ldr	r3, [sp, #32]
   13db8:	cmp	r3, #0
   13dbc:	beq	13620 <__assert_fail@plt+0x26c8>
   13dc0:	mov	r8, sl
   13dc4:	mov	sl, r7
   13dc8:	b	14418 <__assert_fail@plt+0x34c0>
   13dcc:	mov	r8, sl
   13dd0:	mov	sl, r7
   13dd4:	b	14418 <__assert_fail@plt+0x34c0>
   13dd8:	cmp	sl, #2
   13ddc:	strne	r8, [sp, #80]	; 0x50
   13de0:	movne	r5, #0
   13de4:	bne	13c1c <__assert_fail@plt+0x2cc4>
   13de8:	ldr	r3, [sp, #32]
   13dec:	cmp	r3, #0
   13df0:	bne	14404 <__assert_fail@plt+0x34ac>
   13df4:	ldr	r2, [sp, #76]	; 0x4c
   13df8:	adds	r3, r7, #0
   13dfc:	movne	r3, #1
   13e00:	cmp	r2, #0
   13e04:	movne	r3, #0
   13e08:	cmp	r3, #0
   13e0c:	movne	r3, #0
   13e10:	bne	13e40 <__assert_fail@plt+0x2ee8>
   13e14:	cmp	r7, fp
   13e18:	ldrhi	r3, [sp, #36]	; 0x24
   13e1c:	movhi	r2, #39	; 0x27
   13e20:	strbhi	r2, [r3, fp]
   13e24:	add	r3, fp, #1
   13e28:	cmp	r7, r3
   13e2c:	ldrhi	r2, [sp, #36]	; 0x24
   13e30:	movhi	r1, #92	; 0x5c
   13e34:	strbhi	r1, [r2, r3]
   13e38:	mov	r3, r7
   13e3c:	ldr	r7, [sp, #76]	; 0x4c
   13e40:	add	r2, fp, #2
   13e44:	cmp	r2, r3
   13e48:	ldrcc	r1, [sp, #36]	; 0x24
   13e4c:	movcc	r0, #39	; 0x27
   13e50:	strbcc	r0, [r1, r2]
   13e54:	add	fp, fp, #3
   13e58:	ldr	r2, [sp, #32]
   13e5c:	mov	r5, r2
   13e60:	str	r8, [sp, #80]	; 0x50
   13e64:	str	r2, [sp, #44]	; 0x2c
   13e68:	str	r7, [sp, #76]	; 0x4c
   13e6c:	mov	r7, r3
   13e70:	b	13c1c <__assert_fail@plt+0x2cc4>
   13e74:	ldr	r5, [sp, #84]	; 0x54
   13e78:	cmp	r5, #1
   13e7c:	beq	13eac <__assert_fail@plt+0x2f54>
   13e80:	mov	r3, #0
   13e84:	str	r3, [sp, #104]	; 0x68
   13e88:	str	r3, [sp, #108]	; 0x6c
   13e8c:	ldr	r3, [sp, #28]
   13e90:	cmn	r3, #1
   13e94:	beq	13ee0 <__assert_fail@plt+0x2f88>
   13e98:	mov	r3, #0
   13e9c:	str	r4, [sp, #88]	; 0x58
   13ea0:	str	fp, [sp, #92]	; 0x5c
   13ea4:	mov	fp, r3
   13ea8:	b	14008 <__assert_fail@plt+0x30b0>
   13eac:	bl	10e50 <__ctype_b_loc@plt>
   13eb0:	ldr	r2, [r0]
   13eb4:	lsl	r3, r4, #1
   13eb8:	ldrh	r8, [r2, r3]
   13ebc:	lsr	r8, r8, #14
   13ec0:	and	r8, r8, #1
   13ec4:	mov	r2, r5
   13ec8:	eor	r5, r8, #1
   13ecc:	ldr	r3, [sp, #48]	; 0x30
   13ed0:	and	r5, r5, r3
   13ed4:	ands	r5, r5, #255	; 0xff
   13ed8:	beq	13c1c <__assert_fail@plt+0x2cc4>
   13edc:	b	140a0 <__assert_fail@plt+0x3148>
   13ee0:	ldr	r0, [sp, #52]	; 0x34
   13ee4:	bl	10e68 <strlen@plt>
   13ee8:	str	r0, [sp, #28]
   13eec:	b	13e98 <__assert_fail@plt+0x2f40>
   13ef0:	mov	r2, fp
   13ef4:	mov	r1, r4
   13ef8:	ldr	r4, [sp, #88]	; 0x58
   13efc:	ldr	fp, [sp, #92]	; 0x5c
   13f00:	ldr	r0, [sp, #28]
   13f04:	cmp	r0, r5
   13f08:	bls	140d4 <__assert_fail@plt+0x317c>
   13f0c:	ldrb	r3, [r1]
   13f10:	cmp	r3, #0
   13f14:	beq	140dc <__assert_fail@plt+0x3184>
   13f18:	mov	r3, r1
   13f1c:	add	r2, r2, #1
   13f20:	add	r1, r6, r2
   13f24:	cmp	r0, r1
   13f28:	bls	140e4 <__assert_fail@plt+0x318c>
   13f2c:	ldrb	r1, [r3, #1]!
   13f30:	cmp	r1, #0
   13f34:	bne	13f1c <__assert_fail@plt+0x2fc4>
   13f38:	mov	r8, #0
   13f3c:	b	14098 <__assert_fail@plt+0x3140>
   13f40:	cmp	r4, r5
   13f44:	beq	13fe4 <__assert_fail@plt+0x308c>
   13f48:	ldrb	r3, [r4, #1]!
   13f4c:	sub	r3, r3, #91	; 0x5b
   13f50:	cmp	r3, #33	; 0x21
   13f54:	ldrls	pc, [pc, r3, lsl #2]
   13f58:	b	13f40 <__assert_fail@plt+0x2fe8>
   13f5c:	andeq	r4, r1, r0, lsl r4
   13f60:	andeq	r4, r1, r0, lsl r4
   13f64:	andeq	r3, r1, r0, asr #30
   13f68:	andeq	r4, r1, r0, lsl r4
   13f6c:	andeq	r3, r1, r0, asr #30
   13f70:	andeq	r4, r1, r0, lsl r4
   13f74:	andeq	r3, r1, r0, asr #30
   13f78:	andeq	r3, r1, r0, asr #30
   13f7c:	andeq	r3, r1, r0, asr #30
   13f80:	andeq	r3, r1, r0, asr #30
   13f84:	andeq	r3, r1, r0, asr #30
   13f88:	andeq	r3, r1, r0, asr #30
   13f8c:	andeq	r3, r1, r0, asr #30
   13f90:	andeq	r3, r1, r0, asr #30
   13f94:	andeq	r3, r1, r0, asr #30
   13f98:	andeq	r3, r1, r0, asr #30
   13f9c:	andeq	r3, r1, r0, asr #30
   13fa0:	andeq	r3, r1, r0, asr #30
   13fa4:	andeq	r3, r1, r0, asr #30
   13fa8:	andeq	r3, r1, r0, asr #30
   13fac:	andeq	r3, r1, r0, asr #30
   13fb0:	andeq	r3, r1, r0, asr #30
   13fb4:	andeq	r3, r1, r0, asr #30
   13fb8:	andeq	r3, r1, r0, asr #30
   13fbc:	andeq	r3, r1, r0, asr #30
   13fc0:	andeq	r3, r1, r0, asr #30
   13fc4:	andeq	r3, r1, r0, asr #30
   13fc8:	andeq	r3, r1, r0, asr #30
   13fcc:	andeq	r3, r1, r0, asr #30
   13fd0:	andeq	r3, r1, r0, asr #30
   13fd4:	andeq	r3, r1, r0, asr #30
   13fd8:	andeq	r3, r1, r0, asr #30
   13fdc:	andeq	r3, r1, r0, asr #30
   13fe0:	andeq	r4, r1, r0, lsl r4
   13fe4:	ldr	r0, [sp, #100]	; 0x64
   13fe8:	bl	10da8 <iswprint@plt>
   13fec:	cmp	r0, #0
   13ff0:	moveq	r8, #0
   13ff4:	add	fp, fp, r9
   13ff8:	add	r0, sp, #104	; 0x68
   13ffc:	bl	10d48 <mbsinit@plt>
   14000:	cmp	r0, #0
   14004:	bne	14078 <__assert_fail@plt+0x3120>
   14008:	add	r5, r6, fp
   1400c:	ldr	r3, [sp, #52]	; 0x34
   14010:	add	r4, r3, r5
   14014:	add	r3, sp, #104	; 0x68
   14018:	ldr	r2, [sp, #28]
   1401c:	sub	r2, r2, r5
   14020:	mov	r1, r4
   14024:	add	r0, sp, #100	; 0x64
   14028:	bl	16288 <__assert_fail@plt+0x5330>
   1402c:	subs	r9, r0, #0
   14030:	beq	140ec <__assert_fail@plt+0x3194>
   14034:	cmn	r9, #1
   14038:	beq	14088 <__assert_fail@plt+0x3130>
   1403c:	cmn	r9, #2
   14040:	beq	13ef0 <__assert_fail@plt+0x2f98>
   14044:	ldr	r3, [sp, #32]
   14048:	cmp	sl, #2
   1404c:	movne	r3, #0
   14050:	andeq	r3, r3, #1
   14054:	cmp	r3, #0
   14058:	beq	13fe4 <__assert_fail@plt+0x308c>
   1405c:	cmp	r9, #1
   14060:	bls	13fe4 <__assert_fail@plt+0x308c>
   14064:	sub	r3, r9, #1
   14068:	add	r5, r3, r5
   1406c:	ldr	r3, [sp, #52]	; 0x34
   14070:	add	r5, r3, r5
   14074:	b	13f48 <__assert_fail@plt+0x2ff0>
   14078:	ldr	r4, [sp, #88]	; 0x58
   1407c:	mov	r2, fp
   14080:	ldr	fp, [sp, #92]	; 0x5c
   14084:	b	14098 <__assert_fail@plt+0x3140>
   14088:	ldr	r4, [sp, #88]	; 0x58
   1408c:	mov	r2, fp
   14090:	ldr	fp, [sp, #92]	; 0x5c
   14094:	mov	r8, #0
   14098:	cmp	r2, #1
   1409c:	bls	13ec8 <__assert_fail@plt+0x2f70>
   140a0:	add	r1, r6, r2
   140a4:	ldr	ip, [sp, #64]	; 0x40
   140a8:	mov	r5, #0
   140ac:	eor	r3, r8, #1
   140b0:	ldr	r2, [sp, #48]	; 0x30
   140b4:	and	r3, r3, r2
   140b8:	uxtb	r3, r3
   140bc:	ldr	r9, [sp, #32]
   140c0:	ldr	lr, [sp, #44]	; 0x2c
   140c4:	ldr	r2, [sp, #56]	; 0x38
   140c8:	str	r8, [sp, #56]	; 0x38
   140cc:	ldr	r0, [sp, #36]	; 0x24
   140d0:	b	1416c <__assert_fail@plt+0x3214>
   140d4:	mov	r8, #0
   140d8:	b	14098 <__assert_fail@plt+0x3140>
   140dc:	mov	r8, #0
   140e0:	b	14098 <__assert_fail@plt+0x3140>
   140e4:	mov	r8, #0
   140e8:	b	14098 <__assert_fail@plt+0x3140>
   140ec:	ldr	r4, [sp, #88]	; 0x58
   140f0:	mov	r2, fp
   140f4:	ldr	fp, [sp, #92]	; 0x5c
   140f8:	b	14098 <__assert_fail@plt+0x3140>
   140fc:	cmp	r2, #0
   14100:	beq	14114 <__assert_fail@plt+0x31bc>
   14104:	cmp	r7, fp
   14108:	movhi	r2, #92	; 0x5c
   1410c:	strbhi	r2, [r0, fp]
   14110:	add	fp, fp, #1
   14114:	add	r8, r6, #1
   14118:	cmp	r1, r8
   1411c:	bls	14224 <__assert_fail@plt+0x32cc>
   14120:	eor	r2, r5, #1
   14124:	and	r2, r2, lr
   14128:	ands	r2, r2, #255	; 0xff
   1412c:	beq	14240 <__assert_fail@plt+0x32e8>
   14130:	cmp	r7, fp
   14134:	movhi	r2, #39	; 0x27
   14138:	strbhi	r2, [r0, fp]
   1413c:	add	r2, fp, #1
   14140:	cmp	r7, r2
   14144:	movhi	lr, #39	; 0x27
   14148:	strbhi	lr, [r0, r2]
   1414c:	add	fp, fp, #2
   14150:	mov	r6, r8
   14154:	mov	r2, r3
   14158:	mov	lr, r3
   1415c:	cmp	r7, fp
   14160:	strbhi	r4, [r0, fp]
   14164:	add	fp, fp, #1
   14168:	ldrb	r4, [ip, #1]!
   1416c:	cmp	r3, #0
   14170:	beq	140fc <__assert_fail@plt+0x31a4>
   14174:	cmp	r9, #0
   14178:	bne	1447c <__assert_fail@plt+0x3524>
   1417c:	eor	r5, lr, #1
   14180:	cmp	sl, #2
   14184:	movne	r5, #0
   14188:	andeq	r5, r5, #1
   1418c:	cmp	r5, #0
   14190:	beq	141c8 <__assert_fail@plt+0x3270>
   14194:	cmp	r7, fp
   14198:	movhi	lr, #39	; 0x27
   1419c:	strbhi	lr, [r0, fp]
   141a0:	add	lr, fp, #1
   141a4:	cmp	r7, lr
   141a8:	movhi	r8, #36	; 0x24
   141ac:	strbhi	r8, [r0, lr]
   141b0:	add	lr, fp, #2
   141b4:	cmp	r7, lr
   141b8:	movhi	r8, #39	; 0x27
   141bc:	strbhi	r8, [r0, lr]
   141c0:	add	fp, fp, #3
   141c4:	mov	lr, r5
   141c8:	cmp	r7, fp
   141cc:	movhi	r5, #92	; 0x5c
   141d0:	strbhi	r5, [r0, fp]
   141d4:	add	r5, fp, #1
   141d8:	cmp	r7, r5
   141dc:	lsrhi	r8, r4, #6
   141e0:	addhi	r8, r8, #48	; 0x30
   141e4:	strbhi	r8, [r0, r5]
   141e8:	add	r8, fp, #2
   141ec:	cmp	r7, r8
   141f0:	lsrhi	r5, r4, #3
   141f4:	andhi	r5, r5, #7
   141f8:	addhi	r5, r5, #48	; 0x30
   141fc:	strbhi	r5, [r0, r8]
   14200:	add	fp, fp, #3
   14204:	and	r4, r4, #7
   14208:	add	r4, r4, #48	; 0x30
   1420c:	add	r5, r6, #1
   14210:	cmp	r1, r5
   14214:	bls	14230 <__assert_fail@plt+0x32d8>
   14218:	mov	r6, r5
   1421c:	mov	r5, r3
   14220:	b	1415c <__assert_fail@plt+0x3204>
   14224:	str	lr, [sp, #44]	; 0x2c
   14228:	ldr	r8, [sp, #56]	; 0x38
   1422c:	b	13b00 <__assert_fail@plt+0x2ba8>
   14230:	str	lr, [sp, #44]	; 0x2c
   14234:	ldr	r8, [sp, #56]	; 0x38
   14238:	mov	r5, r3
   1423c:	b	13b00 <__assert_fail@plt+0x2ba8>
   14240:	mov	r6, r8
   14244:	b	1415c <__assert_fail@plt+0x3204>
   14248:	mov	r5, #0
   1424c:	b	13c1c <__assert_fail@plt+0x2cc4>
   14250:	mov	r8, r5
   14254:	ldr	r5, [sp, #48]	; 0x30
   14258:	mov	r4, #48	; 0x30
   1425c:	b	13c1c <__assert_fail@plt+0x2cc4>
   14260:	ldr	r8, [sp, #32]
   14264:	mov	r4, #48	; 0x30
   14268:	b	13c1c <__assert_fail@plt+0x2cc4>
   1426c:	ldr	r8, [sp, #32]
   14270:	mov	r4, #48	; 0x30
   14274:	b	13c1c <__assert_fail@plt+0x2cc4>
   14278:	mov	r8, #0
   1427c:	mov	r5, r8
   14280:	b	13c1c <__assert_fail@plt+0x2cc4>
   14284:	mov	r8, #0
   14288:	mov	r5, r8
   1428c:	b	13c1c <__assert_fail@plt+0x2cc4>
   14290:	mov	r8, #0
   14294:	mov	r5, r8
   14298:	b	13c1c <__assert_fail@plt+0x2cc4>
   1429c:	mov	r8, #0
   142a0:	mov	r5, r8
   142a4:	b	13c1c <__assert_fail@plt+0x2cc4>
   142a8:	ldr	r3, [sp, #52]	; 0x34
   142ac:	ldrb	r8, [r3, r6]
   142b0:	adds	r8, r8, #0
   142b4:	movne	r8, #1
   142b8:	b	13d2c <__assert_fail@plt+0x2dd4>
   142bc:	cmp	sl, #2
   142c0:	movne	r3, #0
   142c4:	moveq	r3, #1
   142c8:	ldr	r1, [sp, #32]
   142cc:	mov	r2, r1
   142d0:	and	r2, r2, r3
   142d4:	cmp	fp, #0
   142d8:	movne	r2, #0
   142dc:	andeq	r2, r2, #1
   142e0:	cmp	r2, #0
   142e4:	bne	14494 <__assert_fail@plt+0x353c>
   142e8:	eor	r2, r1, #1
   142ec:	and	r3, r3, r2
   142f0:	ldr	r1, [sp, #80]	; 0x50
   142f4:	tst	r1, r3
   142f8:	beq	14370 <__assert_fail@plt+0x3418>
   142fc:	ldr	r3, [sp, #40]	; 0x28
   14300:	cmp	r3, #0
   14304:	bne	1432c <__assert_fail@plt+0x33d4>
   14308:	ldr	r1, [sp, #76]	; 0x4c
   1430c:	clz	r3, r7
   14310:	lsr	r3, r3, #5
   14314:	cmp	r1, #0
   14318:	moveq	r3, #0
   1431c:	cmp	r3, #0
   14320:	beq	14370 <__assert_fail@plt+0x3418>
   14324:	ldr	r7, [sp, #76]	; 0x4c
   14328:	b	133c0 <__assert_fail@plt+0x2468>
   1432c:	ldr	r3, [sp, #168]	; 0xa8
   14330:	str	r3, [sp, #16]
   14334:	ldr	r3, [sp, #164]	; 0xa4
   14338:	str	r3, [sp, #12]
   1433c:	ldr	r3, [sp, #160]	; 0xa0
   14340:	str	r3, [sp, #8]
   14344:	ldr	r3, [sp, #156]	; 0x9c
   14348:	str	r3, [sp, #4]
   1434c:	mov	r3, #5
   14350:	str	r3, [sp]
   14354:	ldr	r3, [sp, #28]
   14358:	ldr	r2, [sp, #52]	; 0x34
   1435c:	ldr	r1, [sp, #76]	; 0x4c
   14360:	ldr	r0, [sp, #36]	; 0x24
   14364:	bl	13360 <__assert_fail@plt+0x2408>
   14368:	mov	fp, r0
   1436c:	b	14470 <__assert_fail@plt+0x3518>
   14370:	mov	sl, r7
   14374:	ldr	r3, [sp, #72]	; 0x48
   14378:	cmp	r3, #0
   1437c:	moveq	r2, #0
   14380:	andne	r2, r2, #1
   14384:	cmp	r2, #0
   14388:	beq	143b8 <__assert_fail@plt+0x3460>
   1438c:	mov	r2, r3
   14390:	ldrb	r3, [r3]
   14394:	cmp	r3, #0
   14398:	beq	143b8 <__assert_fail@plt+0x3460>
   1439c:	ldr	r1, [sp, #36]	; 0x24
   143a0:	cmp	sl, fp
   143a4:	strbhi	r3, [r1, fp]
   143a8:	add	fp, fp, #1
   143ac:	ldrb	r3, [r2, #1]!
   143b0:	cmp	r3, #0
   143b4:	bne	143a0 <__assert_fail@plt+0x3448>
   143b8:	cmp	sl, fp
   143bc:	movhi	r3, #0
   143c0:	ldrhi	r2, [sp, #36]	; 0x24
   143c4:	strbhi	r3, [r2, fp]
   143c8:	b	14470 <__assert_fail@plt+0x3518>
   143cc:	mov	r8, sl
   143d0:	mov	sl, r7
   143d4:	ldr	r3, [sp, #32]
   143d8:	str	r3, [sp, #48]	; 0x30
   143dc:	b	14418 <__assert_fail@plt+0x34c0>
   143e0:	mov	r8, sl
   143e4:	mov	sl, r7
   143e8:	b	14418 <__assert_fail@plt+0x34c0>
   143ec:	mov	r8, sl
   143f0:	mov	sl, r7
   143f4:	b	14418 <__assert_fail@plt+0x34c0>
   143f8:	andeq	r7, r1, ip, ror #10
   143fc:	andeq	r7, r1, ip, ror r5
   14400:	andeq	r7, r1, r0, ror r5
   14404:	mov	r8, sl
   14408:	mov	sl, r7
   1440c:	b	14418 <__assert_fail@plt+0x34c0>
   14410:	mov	r8, sl
   14414:	mov	sl, r7
   14418:	ldr	r3, [sp, #48]	; 0x30
   1441c:	cmp	r8, #2
   14420:	movne	r3, #0
   14424:	andeq	r3, r3, #1
   14428:	cmp	r3, #0
   1442c:	movne	r8, #4
   14430:	ldr	r3, [sp, #168]	; 0xa8
   14434:	str	r3, [sp, #16]
   14438:	ldr	r3, [sp, #164]	; 0xa4
   1443c:	str	r3, [sp, #12]
   14440:	mov	r3, #0
   14444:	str	r3, [sp, #8]
   14448:	ldr	r3, [sp, #156]	; 0x9c
   1444c:	bic	r3, r3, #2
   14450:	str	r3, [sp, #4]
   14454:	str	r8, [sp]
   14458:	ldr	r3, [sp, #28]
   1445c:	ldr	r2, [sp, #52]	; 0x34
   14460:	mov	r1, sl
   14464:	ldr	r0, [sp, #36]	; 0x24
   14468:	bl	13360 <__assert_fail@plt+0x2408>
   1446c:	mov	fp, r0
   14470:	mov	r0, fp
   14474:	add	sp, sp, #116	; 0x74
   14478:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1447c:	mov	r8, sl
   14480:	mov	sl, r7
   14484:	b	14418 <__assert_fail@plt+0x34c0>
   14488:	mov	r8, sl
   1448c:	mov	sl, r7
   14490:	b	14418 <__assert_fail@plt+0x34c0>
   14494:	mov	r8, sl
   14498:	mov	sl, r7
   1449c:	b	14418 <__assert_fail@plt+0x34c0>
   144a0:	mov	r8, sl
   144a4:	mov	sl, r7
   144a8:	b	14430 <__assert_fail@plt+0x34d8>
   144ac:	mov	r3, #1
   144b0:	str	r3, [sp, #32]
   144b4:	str	r3, [sp, #48]	; 0x30
   144b8:	str	r3, [sp, #60]	; 0x3c
   144bc:	ldr	r3, [pc, #-196]	; 14400 <__assert_fail@plt+0x34a8>
   144c0:	str	r3, [sp, #72]	; 0x48
   144c4:	mov	fp, #0
   144c8:	mov	sl, #5
   144cc:	b	1341c <__assert_fail@plt+0x24c4>
   144d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   144d4:	sub	sp, sp, #52	; 0x34
   144d8:	mov	r5, r0
   144dc:	str	r1, [sp, #24]
   144e0:	str	r2, [sp, #28]
   144e4:	mov	r4, r3
   144e8:	bl	10e8c <__errno_location@plt>
   144ec:	str	r0, [sp, #32]
   144f0:	ldr	r3, [r0]
   144f4:	str	r3, [sp, #36]	; 0x24
   144f8:	ldr	r3, [pc, #396]	; 1468c <__assert_fail@plt+0x3734>
   144fc:	ldr	r6, [r3]
   14500:	cmn	r5, #-2147483647	; 0x80000001
   14504:	movne	r3, #0
   14508:	moveq	r3, #1
   1450c:	orrs	r3, r3, r5, lsr #31
   14510:	bne	14650 <__assert_fail@plt+0x36f8>
   14514:	ldr	r3, [pc, #368]	; 1468c <__assert_fail@plt+0x3734>
   14518:	ldr	r2, [r3, #4]
   1451c:	cmp	r5, r2
   14520:	blt	14588 <__assert_fail@plt+0x3630>
   14524:	str	r2, [sp, #44]	; 0x2c
   14528:	add	r3, r3, #8
   1452c:	cmp	r6, r3
   14530:	beq	14654 <__assert_fail@plt+0x36fc>
   14534:	sub	r2, r5, r2
   14538:	mov	r3, #8
   1453c:	str	r3, [sp]
   14540:	mvn	r3, #-2147483648	; 0x80000000
   14544:	add	r2, r2, #1
   14548:	add	r1, sp, #44	; 0x2c
   1454c:	mov	r0, r6
   14550:	bl	15448 <__assert_fail@plt+0x44f0>
   14554:	mov	r6, r0
   14558:	ldr	r3, [pc, #300]	; 1468c <__assert_fail@plt+0x3734>
   1455c:	str	r0, [r3]
   14560:	ldr	r7, [pc, #292]	; 1468c <__assert_fail@plt+0x3734>
   14564:	ldr	r0, [r7, #4]
   14568:	ldr	r2, [sp, #44]	; 0x2c
   1456c:	sub	r2, r2, r0
   14570:	lsl	r2, r2, #3
   14574:	mov	r1, #0
   14578:	add	r0, r6, r0, lsl #3
   1457c:	bl	10ea4 <memset@plt>
   14580:	ldr	r3, [sp, #44]	; 0x2c
   14584:	str	r3, [r7, #4]
   14588:	add	fp, r6, r5, lsl #3
   1458c:	ldr	r8, [r6, r5, lsl #3]
   14590:	ldr	r7, [fp, #4]
   14594:	ldr	r9, [r4, #4]
   14598:	orr	r9, r9, #1
   1459c:	add	sl, r4, #8
   145a0:	ldr	r3, [r4, #44]	; 0x2c
   145a4:	str	r3, [sp, #16]
   145a8:	ldr	r3, [r4, #40]	; 0x28
   145ac:	str	r3, [sp, #12]
   145b0:	str	sl, [sp, #8]
   145b4:	str	r9, [sp, #4]
   145b8:	ldr	r3, [r4]
   145bc:	str	r3, [sp]
   145c0:	ldr	r3, [sp, #28]
   145c4:	ldr	r2, [sp, #24]
   145c8:	mov	r1, r8
   145cc:	mov	r0, r7
   145d0:	bl	13360 <__assert_fail@plt+0x2408>
   145d4:	cmp	r8, r0
   145d8:	bhi	14638 <__assert_fail@plt+0x36e0>
   145dc:	add	r8, r0, #1
   145e0:	str	r8, [r6, r5, lsl #3]
   145e4:	ldr	r3, [pc, #164]	; 14690 <__assert_fail@plt+0x3738>
   145e8:	cmp	r7, r3
   145ec:	beq	145f8 <__assert_fail@plt+0x36a0>
   145f0:	mov	r0, r7
   145f4:	bl	12f44 <__assert_fail@plt+0x1fec>
   145f8:	mov	r0, r8
   145fc:	bl	152c4 <__assert_fail@plt+0x436c>
   14600:	mov	r7, r0
   14604:	str	r0, [fp, #4]
   14608:	ldr	r3, [r4, #44]	; 0x2c
   1460c:	str	r3, [sp, #16]
   14610:	ldr	r3, [r4, #40]	; 0x28
   14614:	str	r3, [sp, #12]
   14618:	str	sl, [sp, #8]
   1461c:	str	r9, [sp, #4]
   14620:	ldr	r3, [r4]
   14624:	str	r3, [sp]
   14628:	ldr	r3, [sp, #28]
   1462c:	ldr	r2, [sp, #24]
   14630:	mov	r1, r8
   14634:	bl	13360 <__assert_fail@plt+0x2408>
   14638:	ldr	r3, [sp, #32]
   1463c:	ldr	r2, [sp, #36]	; 0x24
   14640:	str	r2, [r3]
   14644:	mov	r0, r7
   14648:	add	sp, sp, #52	; 0x34
   1464c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14650:	bl	10f40 <abort@plt>
   14654:	sub	r2, r5, r2
   14658:	mov	r3, #8
   1465c:	str	r3, [sp]
   14660:	mvn	r3, #-2147483648	; 0x80000000
   14664:	add	r2, r2, #1
   14668:	add	r1, sp, #44	; 0x2c
   1466c:	mov	r0, #0
   14670:	bl	15448 <__assert_fail@plt+0x44f0>
   14674:	mov	r6, r0
   14678:	ldr	r3, [pc, #12]	; 1468c <__assert_fail@plt+0x3734>
   1467c:	str	r0, [r3], #8
   14680:	ldm	r3, {r0, r1}
   14684:	stm	r6, {r0, r1}
   14688:	b	14560 <__assert_fail@plt+0x3608>
   1468c:	andeq	r8, r2, r0, lsl #2
   14690:	andeq	r8, r2, r0, ror r1
   14694:	push	{r4, r5, r6, lr}
   14698:	mov	r4, r0
   1469c:	bl	10e8c <__errno_location@plt>
   146a0:	mov	r5, r0
   146a4:	ldr	r6, [r0]
   146a8:	cmp	r4, #0
   146ac:	ldr	r3, [pc, #20]	; 146c8 <__assert_fail@plt+0x3770>
   146b0:	moveq	r4, r3
   146b4:	mov	r1, #48	; 0x30
   146b8:	mov	r0, r4
   146bc:	bl	157b0 <__assert_fail@plt+0x4858>
   146c0:	str	r6, [r5]
   146c4:	pop	{r4, r5, r6, pc}
   146c8:	andeq	r8, r2, r0, ror r2
   146cc:	subs	r3, r0, #0
   146d0:	ldr	r2, [pc, #8]	; 146e0 <__assert_fail@plt+0x3788>
   146d4:	moveq	r3, r2
   146d8:	ldr	r0, [r3]
   146dc:	bx	lr
   146e0:	andeq	r8, r2, r0, ror r2
   146e4:	subs	r3, r0, #0
   146e8:	ldr	r2, [pc, #8]	; 146f8 <__assert_fail@plt+0x37a0>
   146ec:	moveq	r3, r2
   146f0:	str	r1, [r3]
   146f4:	bx	lr
   146f8:	andeq	r8, r2, r0, ror r2
   146fc:	push	{lr}		; (str lr, [sp, #-4]!)
   14700:	subs	r3, r0, #0
   14704:	ldr	r0, [pc, #44]	; 14738 <__assert_fail@plt+0x37e0>
   14708:	moveq	r3, r0
   1470c:	add	r3, r3, #8
   14710:	lsr	lr, r1, #5
   14714:	and	r1, r1, #31
   14718:	ldr	ip, [r3, lr, lsl #2]
   1471c:	lsr	r0, ip, r1
   14720:	eor	r2, r2, r0
   14724:	and	r2, r2, #1
   14728:	eor	r1, ip, r2, lsl r1
   1472c:	str	r1, [r3, lr, lsl #2]
   14730:	and	r0, r0, #1
   14734:	pop	{pc}		; (ldr pc, [sp], #4)
   14738:	andeq	r8, r2, r0, ror r2
   1473c:	subs	r3, r0, #0
   14740:	ldr	r2, [pc, #12]	; 14754 <__assert_fail@plt+0x37fc>
   14744:	moveq	r3, r2
   14748:	ldr	r0, [r3, #4]
   1474c:	str	r1, [r3, #4]
   14750:	bx	lr
   14754:	andeq	r8, r2, r0, ror r2
   14758:	subs	r3, r0, #0
   1475c:	ldr	r0, [pc, #40]	; 1478c <__assert_fail@plt+0x3834>
   14760:	moveq	r3, r0
   14764:	mov	r0, #10
   14768:	str	r0, [r3]
   1476c:	cmp	r2, #0
   14770:	cmpne	r1, #0
   14774:	beq	14784 <__assert_fail@plt+0x382c>
   14778:	str	r1, [r3, #40]	; 0x28
   1477c:	str	r2, [r3, #44]	; 0x2c
   14780:	bx	lr
   14784:	push	{r4, lr}
   14788:	bl	10f40 <abort@plt>
   1478c:	andeq	r8, r2, r0, ror r2
   14790:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14794:	sub	sp, sp, #24
   14798:	mov	r7, r0
   1479c:	mov	r8, r1
   147a0:	mov	r9, r2
   147a4:	mov	sl, r3
   147a8:	ldr	r4, [sp, #56]	; 0x38
   147ac:	cmp	r4, #0
   147b0:	ldr	r3, [pc, #84]	; 1480c <__assert_fail@plt+0x38b4>
   147b4:	moveq	r4, r3
   147b8:	bl	10e8c <__errno_location@plt>
   147bc:	mov	r5, r0
   147c0:	ldr	r6, [r0]
   147c4:	ldr	r3, [r4, #44]	; 0x2c
   147c8:	str	r3, [sp, #16]
   147cc:	ldr	r3, [r4, #40]	; 0x28
   147d0:	str	r3, [sp, #12]
   147d4:	add	r3, r4, #8
   147d8:	str	r3, [sp, #8]
   147dc:	ldr	r3, [r4, #4]
   147e0:	str	r3, [sp, #4]
   147e4:	ldr	r3, [r4]
   147e8:	str	r3, [sp]
   147ec:	mov	r3, sl
   147f0:	mov	r2, r9
   147f4:	mov	r1, r8
   147f8:	mov	r0, r7
   147fc:	bl	13360 <__assert_fail@plt+0x2408>
   14800:	str	r6, [r5]
   14804:	add	sp, sp, #24
   14808:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1480c:	andeq	r8, r2, r0, ror r2
   14810:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14814:	sub	sp, sp, #44	; 0x2c
   14818:	str	r0, [sp, #28]
   1481c:	str	r1, [sp, #32]
   14820:	mov	r6, r2
   14824:	subs	r4, r3, #0
   14828:	ldr	r3, [pc, #172]	; 148dc <__assert_fail@plt+0x3984>
   1482c:	moveq	r4, r3
   14830:	bl	10e8c <__errno_location@plt>
   14834:	mov	r7, r0
   14838:	ldr	fp, [r0]
   1483c:	ldr	r5, [r4, #4]
   14840:	cmp	r6, #0
   14844:	orreq	r5, r5, #1
   14848:	add	r9, r4, #8
   1484c:	ldr	r3, [r4, #44]	; 0x2c
   14850:	str	r3, [sp, #16]
   14854:	ldr	r3, [r4, #40]	; 0x28
   14858:	str	r3, [sp, #12]
   1485c:	str	r9, [sp, #8]
   14860:	str	r5, [sp, #4]
   14864:	ldr	r3, [r4]
   14868:	str	r3, [sp]
   1486c:	ldr	r3, [sp, #32]
   14870:	ldr	r2, [sp, #28]
   14874:	mov	r1, #0
   14878:	mov	r0, r1
   1487c:	bl	13360 <__assert_fail@plt+0x2408>
   14880:	mov	sl, r0
   14884:	add	r8, r0, #1
   14888:	mov	r0, r8
   1488c:	bl	152c4 <__assert_fail@plt+0x436c>
   14890:	str	r0, [sp, #36]	; 0x24
   14894:	ldr	r3, [r4, #44]	; 0x2c
   14898:	str	r3, [sp, #16]
   1489c:	ldr	r3, [r4, #40]	; 0x28
   148a0:	str	r3, [sp, #12]
   148a4:	str	r9, [sp, #8]
   148a8:	str	r5, [sp, #4]
   148ac:	ldr	r3, [r4]
   148b0:	str	r3, [sp]
   148b4:	ldr	r3, [sp, #32]
   148b8:	ldr	r2, [sp, #28]
   148bc:	mov	r1, r8
   148c0:	bl	13360 <__assert_fail@plt+0x2408>
   148c4:	str	fp, [r7]
   148c8:	cmp	r6, #0
   148cc:	strne	sl, [r6]
   148d0:	ldr	r0, [sp, #36]	; 0x24
   148d4:	add	sp, sp, #44	; 0x2c
   148d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   148dc:	andeq	r8, r2, r0, ror r2
   148e0:	push	{r4, lr}
   148e4:	mov	r3, r2
   148e8:	mov	r2, #0
   148ec:	bl	14810 <__assert_fail@plt+0x38b8>
   148f0:	pop	{r4, pc}
   148f4:	push	{r4, r5, r6, r7, r8, lr}
   148f8:	ldr	r3, [pc, #140]	; 1498c <__assert_fail@plt+0x3a34>
   148fc:	ldr	r7, [r3]
   14900:	ldr	r3, [r3, #4]
   14904:	cmp	r3, #1
   14908:	ble	14934 <__assert_fail@plt+0x39dc>
   1490c:	mov	r5, r7
   14910:	mov	r4, #1
   14914:	ldr	r6, [pc, #112]	; 1498c <__assert_fail@plt+0x3a34>
   14918:	ldr	r0, [r5, #12]
   1491c:	bl	12f44 <__assert_fail@plt+0x1fec>
   14920:	add	r4, r4, #1
   14924:	add	r5, r5, #8
   14928:	ldr	r3, [r6, #4]
   1492c:	cmp	r3, r4
   14930:	bgt	14918 <__assert_fail@plt+0x39c0>
   14934:	ldr	r0, [r7, #4]
   14938:	ldr	r3, [pc, #80]	; 14990 <__assert_fail@plt+0x3a38>
   1493c:	cmp	r0, r3
   14940:	beq	1495c <__assert_fail@plt+0x3a04>
   14944:	bl	12f44 <__assert_fail@plt+0x1fec>
   14948:	ldr	r3, [pc, #60]	; 1498c <__assert_fail@plt+0x3a34>
   1494c:	mov	r2, #256	; 0x100
   14950:	str	r2, [r3, #8]
   14954:	ldr	r2, [pc, #52]	; 14990 <__assert_fail@plt+0x3a38>
   14958:	str	r2, [r3, #12]
   1495c:	ldr	r3, [pc, #48]	; 14994 <__assert_fail@plt+0x3a3c>
   14960:	cmp	r7, r3
   14964:	beq	1497c <__assert_fail@plt+0x3a24>
   14968:	mov	r0, r7
   1496c:	bl	12f44 <__assert_fail@plt+0x1fec>
   14970:	ldr	r3, [pc, #20]	; 1498c <__assert_fail@plt+0x3a34>
   14974:	add	r2, r3, #8
   14978:	str	r2, [r3]
   1497c:	mov	r2, #1
   14980:	ldr	r3, [pc, #4]	; 1498c <__assert_fail@plt+0x3a34>
   14984:	str	r2, [r3, #4]
   14988:	pop	{r4, r5, r6, r7, r8, pc}
   1498c:	andeq	r8, r2, r0, lsl #2
   14990:	andeq	r8, r2, r0, ror r1
   14994:	andeq	r8, r2, r8, lsl #2
   14998:	push	{r4, lr}
   1499c:	ldr	r3, [pc, #8]	; 149ac <__assert_fail@plt+0x3a54>
   149a0:	mvn	r2, #0
   149a4:	bl	144d0 <__assert_fail@plt+0x3578>
   149a8:	pop	{r4, pc}
   149ac:	andeq	r8, r2, r0, ror r2
   149b0:	push	{r4, lr}
   149b4:	ldr	r3, [pc, #4]	; 149c0 <__assert_fail@plt+0x3a68>
   149b8:	bl	144d0 <__assert_fail@plt+0x3578>
   149bc:	pop	{r4, pc}
   149c0:	andeq	r8, r2, r0, ror r2
   149c4:	push	{r4, lr}
   149c8:	mov	r1, r0
   149cc:	mov	r0, #0
   149d0:	bl	14998 <__assert_fail@plt+0x3a40>
   149d4:	pop	{r4, pc}
   149d8:	push	{r4, lr}
   149dc:	mov	r2, r1
   149e0:	mov	r1, r0
   149e4:	mov	r0, #0
   149e8:	bl	149b0 <__assert_fail@plt+0x3a58>
   149ec:	pop	{r4, pc}
   149f0:	push	{r4, r5, lr}
   149f4:	sub	sp, sp, #52	; 0x34
   149f8:	mov	r4, r0
   149fc:	mov	r5, r2
   14a00:	mov	r0, sp
   14a04:	bl	131f8 <__assert_fail@plt+0x22a0>
   14a08:	mov	r3, sp
   14a0c:	mvn	r2, #0
   14a10:	mov	r1, r5
   14a14:	mov	r0, r4
   14a18:	bl	144d0 <__assert_fail@plt+0x3578>
   14a1c:	add	sp, sp, #52	; 0x34
   14a20:	pop	{r4, r5, pc}
   14a24:	push	{r4, r5, r6, lr}
   14a28:	sub	sp, sp, #48	; 0x30
   14a2c:	mov	r4, r0
   14a30:	mov	r5, r2
   14a34:	mov	r6, r3
   14a38:	mov	r0, sp
   14a3c:	bl	131f8 <__assert_fail@plt+0x22a0>
   14a40:	mov	r3, sp
   14a44:	mov	r2, r6
   14a48:	mov	r1, r5
   14a4c:	mov	r0, r4
   14a50:	bl	144d0 <__assert_fail@plt+0x3578>
   14a54:	add	sp, sp, #48	; 0x30
   14a58:	pop	{r4, r5, r6, pc}
   14a5c:	push	{r4, lr}
   14a60:	mov	r2, r1
   14a64:	mov	r1, r0
   14a68:	mov	r0, #0
   14a6c:	bl	149f0 <__assert_fail@plt+0x3a98>
   14a70:	pop	{r4, pc}
   14a74:	push	{r4, lr}
   14a78:	mov	r3, r2
   14a7c:	mov	r2, r1
   14a80:	mov	r1, r0
   14a84:	mov	r0, #0
   14a88:	bl	14a24 <__assert_fail@plt+0x3acc>
   14a8c:	pop	{r4, pc}
   14a90:	push	{r4, r5, r6, lr}
   14a94:	sub	sp, sp, #48	; 0x30
   14a98:	mov	r4, r0
   14a9c:	mov	r5, r1
   14aa0:	mov	r6, r2
   14aa4:	mov	ip, sp
   14aa8:	ldr	lr, [pc, #64]	; 14af0 <__assert_fail@plt+0x3b98>
   14aac:	ldm	lr!, {r0, r1, r2, r3}
   14ab0:	stmia	ip!, {r0, r1, r2, r3}
   14ab4:	ldm	lr!, {r0, r1, r2, r3}
   14ab8:	stmia	ip!, {r0, r1, r2, r3}
   14abc:	ldm	lr, {r0, r1, r2, r3}
   14ac0:	stm	ip, {r0, r1, r2, r3}
   14ac4:	mov	r2, #1
   14ac8:	mov	r1, r6
   14acc:	mov	r0, sp
   14ad0:	bl	146fc <__assert_fail@plt+0x37a4>
   14ad4:	mov	r3, sp
   14ad8:	mov	r2, r5
   14adc:	mov	r1, r4
   14ae0:	mov	r0, #0
   14ae4:	bl	144d0 <__assert_fail@plt+0x3578>
   14ae8:	add	sp, sp, #48	; 0x30
   14aec:	pop	{r4, r5, r6, pc}
   14af0:	andeq	r8, r2, r0, ror r2
   14af4:	push	{r4, lr}
   14af8:	mov	r2, r1
   14afc:	mvn	r1, #0
   14b00:	bl	14a90 <__assert_fail@plt+0x3b38>
   14b04:	pop	{r4, pc}
   14b08:	push	{r4, lr}
   14b0c:	mov	r1, #58	; 0x3a
   14b10:	bl	14af4 <__assert_fail@plt+0x3b9c>
   14b14:	pop	{r4, pc}
   14b18:	push	{r4, lr}
   14b1c:	mov	r2, #58	; 0x3a
   14b20:	bl	14a90 <__assert_fail@plt+0x3b38>
   14b24:	pop	{r4, pc}
   14b28:	push	{r4, r5, lr}
   14b2c:	sub	sp, sp, #100	; 0x64
   14b30:	mov	r4, r0
   14b34:	mov	r5, r2
   14b38:	mov	r0, sp
   14b3c:	bl	131f8 <__assert_fail@plt+0x22a0>
   14b40:	add	lr, sp, #48	; 0x30
   14b44:	mov	ip, sp
   14b48:	ldm	ip!, {r0, r1, r2, r3}
   14b4c:	stmia	lr!, {r0, r1, r2, r3}
   14b50:	ldm	ip!, {r0, r1, r2, r3}
   14b54:	stmia	lr!, {r0, r1, r2, r3}
   14b58:	ldm	ip, {r0, r1, r2, r3}
   14b5c:	stm	lr, {r0, r1, r2, r3}
   14b60:	mov	r2, #1
   14b64:	mov	r1, #58	; 0x3a
   14b68:	add	r0, sp, #48	; 0x30
   14b6c:	bl	146fc <__assert_fail@plt+0x37a4>
   14b70:	add	r3, sp, #48	; 0x30
   14b74:	mvn	r2, #0
   14b78:	mov	r1, r5
   14b7c:	mov	r0, r4
   14b80:	bl	144d0 <__assert_fail@plt+0x3578>
   14b84:	add	sp, sp, #100	; 0x64
   14b88:	pop	{r4, r5, pc}
   14b8c:	push	{r4, r5, r6, r7, lr}
   14b90:	sub	sp, sp, #52	; 0x34
   14b94:	mov	r4, r0
   14b98:	mov	r6, r1
   14b9c:	mov	r7, r2
   14ba0:	mov	r5, r3
   14ba4:	mov	ip, sp
   14ba8:	ldr	lr, [pc, #64]	; 14bf0 <__assert_fail@plt+0x3c98>
   14bac:	ldm	lr!, {r0, r1, r2, r3}
   14bb0:	stmia	ip!, {r0, r1, r2, r3}
   14bb4:	ldm	lr!, {r0, r1, r2, r3}
   14bb8:	stmia	ip!, {r0, r1, r2, r3}
   14bbc:	ldm	lr, {r0, r1, r2, r3}
   14bc0:	stm	ip, {r0, r1, r2, r3}
   14bc4:	mov	r2, r7
   14bc8:	mov	r1, r6
   14bcc:	mov	r0, sp
   14bd0:	bl	14758 <__assert_fail@plt+0x3800>
   14bd4:	mov	r3, sp
   14bd8:	ldr	r2, [sp, #72]	; 0x48
   14bdc:	mov	r1, r5
   14be0:	mov	r0, r4
   14be4:	bl	144d0 <__assert_fail@plt+0x3578>
   14be8:	add	sp, sp, #52	; 0x34
   14bec:	pop	{r4, r5, r6, r7, pc}
   14bf0:	andeq	r8, r2, r0, ror r2
   14bf4:	push	{lr}		; (str lr, [sp, #-4]!)
   14bf8:	sub	sp, sp, #12
   14bfc:	mvn	ip, #0
   14c00:	str	ip, [sp]
   14c04:	bl	14b8c <__assert_fail@plt+0x3c34>
   14c08:	add	sp, sp, #12
   14c0c:	pop	{pc}		; (ldr pc, [sp], #4)
   14c10:	push	{r4, lr}
   14c14:	mov	r3, r2
   14c18:	mov	r2, r1
   14c1c:	mov	r1, r0
   14c20:	mov	r0, #0
   14c24:	bl	14bf4 <__assert_fail@plt+0x3c9c>
   14c28:	pop	{r4, pc}
   14c2c:	push	{lr}		; (str lr, [sp, #-4]!)
   14c30:	sub	sp, sp, #12
   14c34:	str	r3, [sp]
   14c38:	mov	r3, r2
   14c3c:	mov	r2, r1
   14c40:	mov	r1, r0
   14c44:	mov	r0, #0
   14c48:	bl	14b8c <__assert_fail@plt+0x3c34>
   14c4c:	add	sp, sp, #12
   14c50:	pop	{pc}		; (ldr pc, [sp], #4)
   14c54:	push	{r4, lr}
   14c58:	ldr	r3, [pc, #4]	; 14c64 <__assert_fail@plt+0x3d0c>
   14c5c:	bl	144d0 <__assert_fail@plt+0x3578>
   14c60:	pop	{r4, pc}
   14c64:	andeq	r8, r2, r0, lsl r1
   14c68:	push	{r4, lr}
   14c6c:	mov	r2, r1
   14c70:	mov	r1, r0
   14c74:	mov	r0, #0
   14c78:	bl	14c54 <__assert_fail@plt+0x3cfc>
   14c7c:	pop	{r4, pc}
   14c80:	push	{r4, lr}
   14c84:	mvn	r2, #0
   14c88:	bl	14c54 <__assert_fail@plt+0x3cfc>
   14c8c:	pop	{r4, pc}
   14c90:	push	{r4, lr}
   14c94:	mov	r1, r0
   14c98:	mov	r0, #0
   14c9c:	bl	14c80 <__assert_fail@plt+0x3d28>
   14ca0:	pop	{r4, pc}
   14ca4:	push	{r4, r5, r6, r7, r8, lr}
   14ca8:	mov	r8, r0
   14cac:	mov	r7, r1
   14cb0:	mov	r4, r2
   14cb4:	ldr	r5, [pc, #88]	; 14d14 <__assert_fail@plt+0x3dbc>
   14cb8:	b	14cc0 <__assert_fail@plt+0x3d68>
   14cbc:	mov	r4, r5
   14cc0:	mov	r2, r4
   14cc4:	mov	r1, r7
   14cc8:	mov	r0, r8
   14ccc:	bl	10d00 <read@plt>
   14cd0:	subs	r6, r0, #0
   14cd4:	bge	14d0c <__assert_fail@plt+0x3db4>
   14cd8:	bl	10e8c <__errno_location@plt>
   14cdc:	ldr	r3, [r0]
   14ce0:	cmp	r3, #4
   14ce4:	beq	14cc0 <__assert_fail@plt+0x3d68>
   14ce8:	cmp	r4, r5
   14cec:	movls	r4, #0
   14cf0:	movhi	r4, #1
   14cf4:	cmp	r3, #22
   14cf8:	movne	r4, #0
   14cfc:	cmp	r4, #0
   14d00:	bne	14cbc <__assert_fail@plt+0x3d64>
   14d04:	mov	r0, r6
   14d08:	pop	{r4, r5, r6, r7, r8, pc}
   14d0c:	mov	r0, r6
   14d10:	pop	{r4, r5, r6, r7, r8, pc}
   14d14:	svcvc	0x00f00000	; IMB
   14d18:	push	{r4, r5, r6, lr}
   14d1c:	sub	sp, sp, #32
   14d20:	mov	r4, r0
   14d24:	ldr	r5, [sp, #48]	; 0x30
   14d28:	ldr	r6, [sp, #52]	; 0x34
   14d2c:	cmp	r1, #0
   14d30:	beq	14de8 <__assert_fail@plt+0x3e90>
   14d34:	str	r3, [sp, #4]
   14d38:	str	r2, [sp]
   14d3c:	mov	r3, r1
   14d40:	ldr	r2, [pc, #940]	; 150f4 <__assert_fail@plt+0x419c>
   14d44:	mov	r1, #1
   14d48:	bl	10ec8 <__fprintf_chk@plt>
   14d4c:	mov	r2, #5
   14d50:	ldr	r1, [pc, #928]	; 150f8 <__assert_fail@plt+0x41a0>
   14d54:	mov	r0, #0
   14d58:	bl	10d78 <dcgettext@plt>
   14d5c:	ldr	r3, [pc, #920]	; 150fc <__assert_fail@plt+0x41a4>
   14d60:	str	r3, [sp]
   14d64:	mov	r3, r0
   14d68:	ldr	r2, [pc, #912]	; 15100 <__assert_fail@plt+0x41a8>
   14d6c:	mov	r1, #1
   14d70:	mov	r0, r4
   14d74:	bl	10ec8 <__fprintf_chk@plt>
   14d78:	mov	r1, r4
   14d7c:	mov	r0, #10
   14d80:	bl	10d6c <fputc_unlocked@plt>
   14d84:	mov	r2, #5
   14d88:	ldr	r1, [pc, #884]	; 15104 <__assert_fail@plt+0x41ac>
   14d8c:	mov	r0, #0
   14d90:	bl	10d78 <dcgettext@plt>
   14d94:	ldr	r3, [pc, #876]	; 15108 <__assert_fail@plt+0x41b0>
   14d98:	mov	r2, r0
   14d9c:	mov	r1, #1
   14da0:	mov	r0, r4
   14da4:	bl	10ec8 <__fprintf_chk@plt>
   14da8:	mov	r1, r4
   14dac:	mov	r0, #10
   14db0:	bl	10d6c <fputc_unlocked@plt>
   14db4:	cmp	r6, #9
   14db8:	ldrls	pc, [pc, r6, lsl #2]
   14dbc:	b	1508c <__assert_fail@plt+0x4134>
   14dc0:	andeq	r4, r1, r4, lsr #28
   14dc4:	andeq	r4, r1, r0, lsl #28
   14dc8:	andeq	r4, r1, ip, lsr #28
   14dcc:	andeq	r4, r1, ip, asr lr
   14dd0:	muleq	r1, r4, lr
   14dd4:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14dd8:	andeq	r4, r1, ip, lsl pc
   14ddc:	andeq	r4, r1, ip, ror #30
   14de0:	andeq	r4, r1, r4, asr #31
   14de4:	andeq	r5, r1, r4, lsr #32
   14de8:	str	r3, [sp]
   14dec:	mov	r3, r2
   14df0:	ldr	r2, [pc, #788]	; 1510c <__assert_fail@plt+0x41b4>
   14df4:	mov	r1, #1
   14df8:	bl	10ec8 <__fprintf_chk@plt>
   14dfc:	b	14d4c <__assert_fail@plt+0x3df4>
   14e00:	mov	r2, #5
   14e04:	ldr	r1, [pc, #772]	; 15110 <__assert_fail@plt+0x41b8>
   14e08:	mov	r0, #0
   14e0c:	bl	10d78 <dcgettext@plt>
   14e10:	ldr	r3, [r5]
   14e14:	mov	r2, r0
   14e18:	mov	r1, #1
   14e1c:	mov	r0, r4
   14e20:	bl	10ec8 <__fprintf_chk@plt>
   14e24:	add	sp, sp, #32
   14e28:	pop	{r4, r5, r6, pc}
   14e2c:	mov	r2, #5
   14e30:	ldr	r1, [pc, #732]	; 15114 <__assert_fail@plt+0x41bc>
   14e34:	mov	r0, #0
   14e38:	bl	10d78 <dcgettext@plt>
   14e3c:	ldr	r3, [r5]
   14e40:	ldr	r2, [r5, #4]
   14e44:	str	r2, [sp]
   14e48:	mov	r2, r0
   14e4c:	mov	r1, #1
   14e50:	mov	r0, r4
   14e54:	bl	10ec8 <__fprintf_chk@plt>
   14e58:	b	14e24 <__assert_fail@plt+0x3ecc>
   14e5c:	mov	r2, #5
   14e60:	ldr	r1, [pc, #688]	; 15118 <__assert_fail@plt+0x41c0>
   14e64:	mov	r0, #0
   14e68:	bl	10d78 <dcgettext@plt>
   14e6c:	ldr	r3, [r5]
   14e70:	ldr	r2, [r5, #8]
   14e74:	str	r2, [sp, #4]
   14e78:	ldr	r2, [r5, #4]
   14e7c:	str	r2, [sp]
   14e80:	mov	r2, r0
   14e84:	mov	r1, #1
   14e88:	mov	r0, r4
   14e8c:	bl	10ec8 <__fprintf_chk@plt>
   14e90:	b	14e24 <__assert_fail@plt+0x3ecc>
   14e94:	mov	r2, #5
   14e98:	ldr	r1, [pc, #636]	; 1511c <__assert_fail@plt+0x41c4>
   14e9c:	mov	r0, #0
   14ea0:	bl	10d78 <dcgettext@plt>
   14ea4:	ldr	r3, [r5]
   14ea8:	ldr	r2, [r5, #12]
   14eac:	str	r2, [sp, #8]
   14eb0:	ldr	r2, [r5, #8]
   14eb4:	str	r2, [sp, #4]
   14eb8:	ldr	r2, [r5, #4]
   14ebc:	str	r2, [sp]
   14ec0:	mov	r2, r0
   14ec4:	mov	r1, #1
   14ec8:	mov	r0, r4
   14ecc:	bl	10ec8 <__fprintf_chk@plt>
   14ed0:	b	14e24 <__assert_fail@plt+0x3ecc>
   14ed4:	mov	r2, #5
   14ed8:	ldr	r1, [pc, #576]	; 15120 <__assert_fail@plt+0x41c8>
   14edc:	mov	r0, #0
   14ee0:	bl	10d78 <dcgettext@plt>
   14ee4:	ldr	r3, [r5]
   14ee8:	ldr	r2, [r5, #16]
   14eec:	str	r2, [sp, #12]
   14ef0:	ldr	r2, [r5, #12]
   14ef4:	str	r2, [sp, #8]
   14ef8:	ldr	r2, [r5, #8]
   14efc:	str	r2, [sp, #4]
   14f00:	ldr	r2, [r5, #4]
   14f04:	str	r2, [sp]
   14f08:	mov	r2, r0
   14f0c:	mov	r1, #1
   14f10:	mov	r0, r4
   14f14:	bl	10ec8 <__fprintf_chk@plt>
   14f18:	b	14e24 <__assert_fail@plt+0x3ecc>
   14f1c:	mov	r2, #5
   14f20:	ldr	r1, [pc, #508]	; 15124 <__assert_fail@plt+0x41cc>
   14f24:	mov	r0, #0
   14f28:	bl	10d78 <dcgettext@plt>
   14f2c:	ldr	r3, [r5]
   14f30:	ldr	r2, [r5, #20]
   14f34:	str	r2, [sp, #16]
   14f38:	ldr	r2, [r5, #16]
   14f3c:	str	r2, [sp, #12]
   14f40:	ldr	r2, [r5, #12]
   14f44:	str	r2, [sp, #8]
   14f48:	ldr	r2, [r5, #8]
   14f4c:	str	r2, [sp, #4]
   14f50:	ldr	r2, [r5, #4]
   14f54:	str	r2, [sp]
   14f58:	mov	r2, r0
   14f5c:	mov	r1, #1
   14f60:	mov	r0, r4
   14f64:	bl	10ec8 <__fprintf_chk@plt>
   14f68:	b	14e24 <__assert_fail@plt+0x3ecc>
   14f6c:	mov	r2, #5
   14f70:	ldr	r1, [pc, #432]	; 15128 <__assert_fail@plt+0x41d0>
   14f74:	mov	r0, #0
   14f78:	bl	10d78 <dcgettext@plt>
   14f7c:	ldr	r3, [r5]
   14f80:	ldr	r2, [r5, #24]
   14f84:	str	r2, [sp, #20]
   14f88:	ldr	r2, [r5, #20]
   14f8c:	str	r2, [sp, #16]
   14f90:	ldr	r2, [r5, #16]
   14f94:	str	r2, [sp, #12]
   14f98:	ldr	r2, [r5, #12]
   14f9c:	str	r2, [sp, #8]
   14fa0:	ldr	r2, [r5, #8]
   14fa4:	str	r2, [sp, #4]
   14fa8:	ldr	r2, [r5, #4]
   14fac:	str	r2, [sp]
   14fb0:	mov	r2, r0
   14fb4:	mov	r1, #1
   14fb8:	mov	r0, r4
   14fbc:	bl	10ec8 <__fprintf_chk@plt>
   14fc0:	b	14e24 <__assert_fail@plt+0x3ecc>
   14fc4:	mov	r2, #5
   14fc8:	ldr	r1, [pc, #348]	; 1512c <__assert_fail@plt+0x41d4>
   14fcc:	mov	r0, #0
   14fd0:	bl	10d78 <dcgettext@plt>
   14fd4:	ldr	r3, [r5]
   14fd8:	ldr	r2, [r5, #28]
   14fdc:	str	r2, [sp, #24]
   14fe0:	ldr	r2, [r5, #24]
   14fe4:	str	r2, [sp, #20]
   14fe8:	ldr	r2, [r5, #20]
   14fec:	str	r2, [sp, #16]
   14ff0:	ldr	r2, [r5, #16]
   14ff4:	str	r2, [sp, #12]
   14ff8:	ldr	r2, [r5, #12]
   14ffc:	str	r2, [sp, #8]
   15000:	ldr	r2, [r5, #8]
   15004:	str	r2, [sp, #4]
   15008:	ldr	r2, [r5, #4]
   1500c:	str	r2, [sp]
   15010:	mov	r2, r0
   15014:	mov	r1, #1
   15018:	mov	r0, r4
   1501c:	bl	10ec8 <__fprintf_chk@plt>
   15020:	b	14e24 <__assert_fail@plt+0x3ecc>
   15024:	mov	r2, #5
   15028:	ldr	r1, [pc, #256]	; 15130 <__assert_fail@plt+0x41d8>
   1502c:	mov	r0, #0
   15030:	bl	10d78 <dcgettext@plt>
   15034:	ldr	r3, [r5]
   15038:	ldr	r2, [r5, #32]
   1503c:	str	r2, [sp, #28]
   15040:	ldr	r2, [r5, #28]
   15044:	str	r2, [sp, #24]
   15048:	ldr	r2, [r5, #24]
   1504c:	str	r2, [sp, #20]
   15050:	ldr	r2, [r5, #20]
   15054:	str	r2, [sp, #16]
   15058:	ldr	r2, [r5, #16]
   1505c:	str	r2, [sp, #12]
   15060:	ldr	r2, [r5, #12]
   15064:	str	r2, [sp, #8]
   15068:	ldr	r2, [r5, #8]
   1506c:	str	r2, [sp, #4]
   15070:	ldr	r2, [r5, #4]
   15074:	str	r2, [sp]
   15078:	mov	r2, r0
   1507c:	mov	r1, #1
   15080:	mov	r0, r4
   15084:	bl	10ec8 <__fprintf_chk@plt>
   15088:	b	14e24 <__assert_fail@plt+0x3ecc>
   1508c:	mov	r2, #5
   15090:	ldr	r1, [pc, #156]	; 15134 <__assert_fail@plt+0x41dc>
   15094:	mov	r0, #0
   15098:	bl	10d78 <dcgettext@plt>
   1509c:	ldr	r3, [r5]
   150a0:	ldr	r2, [r5, #32]
   150a4:	str	r2, [sp, #28]
   150a8:	ldr	r2, [r5, #28]
   150ac:	str	r2, [sp, #24]
   150b0:	ldr	r2, [r5, #24]
   150b4:	str	r2, [sp, #20]
   150b8:	ldr	r2, [r5, #20]
   150bc:	str	r2, [sp, #16]
   150c0:	ldr	r2, [r5, #16]
   150c4:	str	r2, [sp, #12]
   150c8:	ldr	r2, [r5, #12]
   150cc:	str	r2, [sp, #8]
   150d0:	ldr	r2, [r5, #8]
   150d4:	str	r2, [sp, #4]
   150d8:	ldr	r2, [r5, #4]
   150dc:	str	r2, [sp]
   150e0:	mov	r2, r0
   150e4:	mov	r1, #1
   150e8:	mov	r0, r4
   150ec:	bl	10ec8 <__fprintf_chk@plt>
   150f0:	b	14e24 <__assert_fail@plt+0x3ecc>
   150f4:	andeq	r7, r1, r4, ror #11
   150f8:	strdeq	r7, [r1], -r8
   150fc:	andeq	r0, r0, r6, ror #15
   15100:	ldrdeq	r7, [r1], -r0
   15104:	strdeq	r7, [r1], -ip
   15108:	andeq	r7, r1, r8, lsr #13
   1510c:	strdeq	r7, [r1], -r0
   15110:	andeq	r7, r1, ip, asr #13
   15114:	ldrdeq	r7, [r1], -ip
   15118:	strdeq	r7, [r1], -r4
   1511c:	andeq	r7, r1, r0, lsl r7
   15120:	andeq	r7, r1, r0, lsr r7
   15124:	andeq	r7, r1, r4, asr r7
   15128:	andeq	r7, r1, ip, ror r7
   1512c:	andeq	r7, r1, r8, lsr #15
   15130:	ldrdeq	r7, [r1], -r8
   15134:	andeq	r7, r1, ip, lsl #16
   15138:	push	{r4, r5, lr}
   1513c:	sub	sp, sp, #12
   15140:	ldr	r5, [sp, #24]
   15144:	ldr	ip, [r5]
   15148:	cmp	ip, #0
   1514c:	beq	1517c <__assert_fail@plt+0x4224>
   15150:	mov	lr, r5
   15154:	mov	ip, #0
   15158:	add	ip, ip, #1
   1515c:	ldr	r4, [lr, #4]!
   15160:	cmp	r4, #0
   15164:	bne	15158 <__assert_fail@plt+0x4200>
   15168:	str	ip, [sp, #4]
   1516c:	str	r5, [sp]
   15170:	bl	14d18 <__assert_fail@plt+0x3dc0>
   15174:	add	sp, sp, #12
   15178:	pop	{r4, r5, pc}
   1517c:	mov	ip, #0
   15180:	b	15168 <__assert_fail@plt+0x4210>
   15184:	push	{r4, r5, lr}
   15188:	sub	sp, sp, #52	; 0x34
   1518c:	ldr	r4, [sp, #64]	; 0x40
   15190:	sub	r4, r4, #4
   15194:	add	r5, sp, #4
   15198:	mov	ip, #0
   1519c:	ldr	lr, [r4, #4]!
   151a0:	str	lr, [r5, #4]!
   151a4:	cmp	lr, #0
   151a8:	beq	151b8 <__assert_fail@plt+0x4260>
   151ac:	add	ip, ip, #1
   151b0:	cmp	ip, #10
   151b4:	bne	1519c <__assert_fail@plt+0x4244>
   151b8:	str	ip, [sp, #4]
   151bc:	add	ip, sp, #8
   151c0:	str	ip, [sp]
   151c4:	bl	14d18 <__assert_fail@plt+0x3dc0>
   151c8:	add	sp, sp, #52	; 0x34
   151cc:	pop	{r4, r5, pc}
   151d0:	push	{r3}		; (str r3, [sp, #-4]!)
   151d4:	push	{lr}		; (str lr, [sp, #-4]!)
   151d8:	sub	sp, sp, #16
   151dc:	add	r3, sp, #24
   151e0:	str	r3, [sp, #12]
   151e4:	str	r3, [sp]
   151e8:	ldr	r3, [sp, #20]
   151ec:	bl	15184 <__assert_fail@plt+0x422c>
   151f0:	add	sp, sp, #16
   151f4:	pop	{lr}		; (ldr lr, [sp], #4)
   151f8:	add	sp, sp, #4
   151fc:	bx	lr
   15200:	push	{r4, lr}
   15204:	ldr	r3, [pc, #112]	; 1527c <__assert_fail@plt+0x4324>
   15208:	ldr	r1, [r3]
   1520c:	mov	r0, #10
   15210:	bl	10d6c <fputc_unlocked@plt>
   15214:	mov	r2, #5
   15218:	ldr	r1, [pc, #96]	; 15280 <__assert_fail@plt+0x4328>
   1521c:	mov	r0, #0
   15220:	bl	10d78 <dcgettext@plt>
   15224:	ldr	r2, [pc, #88]	; 15284 <__assert_fail@plt+0x432c>
   15228:	mov	r1, r0
   1522c:	mov	r0, #1
   15230:	bl	10eb0 <__printf_chk@plt>
   15234:	mov	r2, #5
   15238:	ldr	r1, [pc, #72]	; 15288 <__assert_fail@plt+0x4330>
   1523c:	mov	r0, #0
   15240:	bl	10d78 <dcgettext@plt>
   15244:	ldr	r3, [pc, #64]	; 1528c <__assert_fail@plt+0x4334>
   15248:	ldr	r2, [pc, #64]	; 15290 <__assert_fail@plt+0x4338>
   1524c:	mov	r1, r0
   15250:	mov	r0, #1
   15254:	bl	10eb0 <__printf_chk@plt>
   15258:	mov	r2, #5
   1525c:	ldr	r1, [pc, #48]	; 15294 <__assert_fail@plt+0x433c>
   15260:	mov	r0, #0
   15264:	bl	10d78 <dcgettext@plt>
   15268:	ldr	r2, [pc, #40]	; 15298 <__assert_fail@plt+0x4340>
   1526c:	mov	r1, r0
   15270:	mov	r0, #1
   15274:	bl	10eb0 <__printf_chk@plt>
   15278:	pop	{r4, pc}
   1527c:	andeq	r8, r2, r4, asr r1
   15280:	andeq	r7, r1, r8, asr #16
   15284:	andeq	r7, r1, ip, asr r8
   15288:	andeq	r7, r1, r4, ror r8
   1528c:	andeq	r7, r1, r8, lsl r2
   15290:	andeq	r7, r1, r0, asr #4
   15294:	andeq	r7, r1, r8, lsl #17
   15298:			; <UNDEFINED> instruction: 0x000178b0
   1529c:	push	{r4, lr}
   152a0:	bl	15fa8 <__assert_fail@plt+0x5050>
   152a4:	cmp	r0, #0
   152a8:	popne	{r4, pc}
   152ac:	bl	15840 <__assert_fail@plt+0x48e8>
   152b0:	push	{r4, lr}
   152b4:	bl	15fa8 <__assert_fail@plt+0x5050>
   152b8:	cmp	r0, #0
   152bc:	popne	{r4, pc}
   152c0:	bl	15840 <__assert_fail@plt+0x48e8>
   152c4:	push	{r4, lr}
   152c8:	bl	1529c <__assert_fail@plt+0x4344>
   152cc:	pop	{r4, pc}
   152d0:	push	{r4, r5, r6, lr}
   152d4:	mov	r5, r0
   152d8:	mov	r4, r1
   152dc:	bl	15fd8 <__assert_fail@plt+0x5080>
   152e0:	cmp	r0, #0
   152e4:	popne	{r4, r5, r6, pc}
   152e8:	adds	r4, r4, #0
   152ec:	movne	r4, #1
   152f0:	cmp	r5, #0
   152f4:	orreq	r4, r4, #1
   152f8:	cmp	r4, #0
   152fc:	popeq	{r4, r5, r6, pc}
   15300:	bl	15840 <__assert_fail@plt+0x48e8>
   15304:	push	{r4, lr}
   15308:	cmp	r1, #0
   1530c:	orreq	r1, r1, #1
   15310:	bl	15fd8 <__assert_fail@plt+0x5080>
   15314:	cmp	r0, #0
   15318:	popne	{r4, pc}
   1531c:	bl	15840 <__assert_fail@plt+0x48e8>
   15320:	push	{r4, r5, r6, lr}
   15324:	mov	r6, r0
   15328:	mov	r5, r1
   1532c:	mov	r4, r2
   15330:	bl	162e0 <__assert_fail@plt+0x5388>
   15334:	cmp	r0, #0
   15338:	popne	{r4, r5, r6, pc}
   1533c:	cmp	r6, #0
   15340:	beq	15350 <__assert_fail@plt+0x43f8>
   15344:	cmp	r5, #0
   15348:	cmpne	r4, #0
   1534c:	popeq	{r4, r5, r6, pc}
   15350:	bl	15840 <__assert_fail@plt+0x48e8>
   15354:	push	{r4, lr}
   15358:	bl	15320 <__assert_fail@plt+0x43c8>
   1535c:	pop	{r4, pc}
   15360:	push	{r4, lr}
   15364:	mov	ip, r1
   15368:	mov	r3, r2
   1536c:	cmp	r2, #0
   15370:	cmpne	r1, #0
   15374:	moveq	r3, #1
   15378:	moveq	ip, r3
   1537c:	mov	r2, r3
   15380:	mov	r1, ip
   15384:	bl	162e0 <__assert_fail@plt+0x5388>
   15388:	cmp	r0, #0
   1538c:	popne	{r4, pc}
   15390:	bl	15840 <__assert_fail@plt+0x48e8>
   15394:	push	{r4, lr}
   15398:	mov	r2, r1
   1539c:	mov	r1, r0
   153a0:	mov	r0, #0
   153a4:	bl	15320 <__assert_fail@plt+0x43c8>
   153a8:	pop	{r4, pc}
   153ac:	push	{r4, lr}
   153b0:	mov	r2, r1
   153b4:	mov	r1, r0
   153b8:	mov	r0, #0
   153bc:	bl	15360 <__assert_fail@plt+0x4408>
   153c0:	pop	{r4, pc}
   153c4:	push	{r4, r5, r6, r7, r8, lr}
   153c8:	mov	r5, r1
   153cc:	mov	r6, r2
   153d0:	ldr	r4, [r1]
   153d4:	subs	r7, r0, #0
   153d8:	beq	153f4 <__assert_fail@plt+0x449c>
   153dc:	lsr	r2, r4, #1
   153e0:	add	r3, r2, #1
   153e4:	mvn	r3, r3
   153e8:	cmp	r4, r3
   153ec:	bls	15418 <__assert_fail@plt+0x44c0>
   153f0:	bl	15840 <__assert_fail@plt+0x48e8>
   153f4:	cmp	r4, #0
   153f8:	bne	15420 <__assert_fail@plt+0x44c8>
   153fc:	mov	r1, r2
   15400:	mov	r0, #64	; 0x40
   15404:	bl	16434 <__assert_fail@plt+0x54dc>
   15408:	cmp	r0, #0
   1540c:	movne	r4, r0
   15410:	addeq	r4, r0, #1
   15414:	b	15420 <__assert_fail@plt+0x44c8>
   15418:	add	r4, r4, #1
   1541c:	add	r4, r4, r2
   15420:	mov	r2, r6
   15424:	mov	r1, r4
   15428:	mov	r0, r7
   1542c:	bl	15320 <__assert_fail@plt+0x43c8>
   15430:	str	r4, [r5]
   15434:	pop	{r4, r5, r6, r7, r8, pc}
   15438:	push	{r4, lr}
   1543c:	mov	r2, #1
   15440:	bl	153c4 <__assert_fail@plt+0x446c>
   15444:	pop	{r4, pc}
   15448:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1544c:	sub	sp, sp, #12
   15450:	mov	fp, r0
   15454:	mov	sl, r1
   15458:	mov	r9, r2
   1545c:	mov	r7, r3
   15460:	ldr	r6, [sp, #48]	; 0x30
   15464:	ldr	r5, [r1]
   15468:	asrs	r4, r5, #1
   1546c:	bmi	155c8 <__assert_fail@plt+0x4670>
   15470:	cmp	r5, #0
   15474:	blt	155dc <__assert_fail@plt+0x4684>
   15478:	mvn	r3, #-2147483648	; 0x80000000
   1547c:	sub	r3, r3, r4
   15480:	cmp	r5, r3
   15484:	movle	r3, #0
   15488:	movgt	r3, #1
   1548c:	cmp	r3, #0
   15490:	addeq	r4, r4, r5
   15494:	mvnne	r4, #-2147483648	; 0x80000000
   15498:	mvn	r8, r7
   1549c:	lsr	r8, r8, #31
   154a0:	cmp	r7, r4
   154a4:	movge	r3, #0
   154a8:	andlt	r3, r8, #1
   154ac:	cmp	r3, #0
   154b0:	movne	r4, r7
   154b4:	cmp	r6, #0
   154b8:	blt	155f0 <__assert_fail@plt+0x4698>
   154bc:	cmp	r6, #0
   154c0:	beq	1569c <__assert_fail@plt+0x4744>
   154c4:	cmp	r4, #0
   154c8:	blt	1564c <__assert_fail@plt+0x46f4>
   154cc:	mov	r1, r6
   154d0:	mvn	r0, #-2147483648	; 0x80000000
   154d4:	bl	16640 <__assert_fail@plt+0x56e8>
   154d8:	cmp	r0, r4
   154dc:	movge	r0, #0
   154e0:	movlt	r0, #1
   154e4:	cmp	r0, #0
   154e8:	mvnne	r3, #-2147483648	; 0x80000000
   154ec:	strne	r3, [sp, #4]
   154f0:	beq	15684 <__assert_fail@plt+0x472c>
   154f4:	mov	r1, r6
   154f8:	ldr	r0, [sp, #4]
   154fc:	bl	16640 <__assert_fail@plt+0x56e8>
   15500:	mov	r4, r0
   15504:	mov	r1, r6
   15508:	ldr	r0, [sp, #4]
   1550c:	bl	16860 <__assert_fail@plt+0x5908>
   15510:	ldr	r3, [sp, #4]
   15514:	sub	r1, r3, r1
   15518:	cmp	fp, #0
   1551c:	moveq	r3, #0
   15520:	streq	r3, [sl]
   15524:	sub	r3, r4, r5
   15528:	cmp	r3, r9
   1552c:	bge	155b4 <__assert_fail@plt+0x465c>
   15530:	cmp	r9, #0
   15534:	blt	156a8 <__assert_fail@plt+0x4750>
   15538:	cmp	r5, #0
   1553c:	blt	156bc <__assert_fail@plt+0x4764>
   15540:	mvn	r3, #-2147483648	; 0x80000000
   15544:	sub	r3, r3, r9
   15548:	cmp	r5, r3
   1554c:	movle	r3, #0
   15550:	movgt	r3, #1
   15554:	cmp	r3, #0
   15558:	bne	15764 <__assert_fail@plt+0x480c>
   1555c:	add	r5, r5, r9
   15560:	mov	r4, r5
   15564:	cmp	r7, r5
   15568:	movge	r7, #0
   1556c:	andlt	r7, r8, #1
   15570:	cmp	r7, #0
   15574:	bne	15764 <__assert_fail@plt+0x480c>
   15578:	cmp	r6, #0
   1557c:	blt	156d0 <__assert_fail@plt+0x4778>
   15580:	cmp	r6, #0
   15584:	beq	155b0 <__assert_fail@plt+0x4658>
   15588:	cmp	r5, #0
   1558c:	blt	1572c <__assert_fail@plt+0x47d4>
   15590:	mov	r1, r6
   15594:	mvn	r0, #-2147483648	; 0x80000000
   15598:	bl	16640 <__assert_fail@plt+0x56e8>
   1559c:	cmp	r5, r0
   155a0:	movle	r0, #0
   155a4:	movgt	r0, #1
   155a8:	cmp	r0, #0
   155ac:	bne	15764 <__assert_fail@plt+0x480c>
   155b0:	mul	r1, r5, r6
   155b4:	mov	r0, fp
   155b8:	bl	152d0 <__assert_fail@plt+0x4378>
   155bc:	str	r4, [sl]
   155c0:	add	sp, sp, #12
   155c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   155c8:	rsb	r3, r4, #-2147483648	; 0x80000000
   155cc:	cmp	r5, r3
   155d0:	movge	r3, #0
   155d4:	movlt	r3, #1
   155d8:	b	1548c <__assert_fail@plt+0x4534>
   155dc:	rsb	r3, r5, #-2147483648	; 0x80000000
   155e0:	cmp	r4, r3
   155e4:	movge	r3, #0
   155e8:	movlt	r3, #1
   155ec:	b	1548c <__assert_fail@plt+0x4534>
   155f0:	cmp	r4, #0
   155f4:	blt	1561c <__assert_fail@plt+0x46c4>
   155f8:	cmn	r6, #1
   155fc:	beq	15638 <__assert_fail@plt+0x46e0>
   15600:	mov	r1, r6
   15604:	mov	r0, #-2147483648	; 0x80000000
   15608:	bl	16640 <__assert_fail@plt+0x56e8>
   1560c:	cmp	r0, r4
   15610:	movge	r0, #0
   15614:	movlt	r0, #1
   15618:	b	154e4 <__assert_fail@plt+0x458c>
   1561c:	mov	r1, r6
   15620:	mvn	r0, #-2147483648	; 0x80000000
   15624:	bl	16640 <__assert_fail@plt+0x56e8>
   15628:	cmp	r0, r4
   1562c:	movle	r0, #0
   15630:	movgt	r0, #1
   15634:	b	154e4 <__assert_fail@plt+0x458c>
   15638:	add	r0, r4, #-2147483648	; 0x80000000
   1563c:	cmp	r0, #0
   15640:	movle	r0, #0
   15644:	movgt	r0, #1
   15648:	b	154e4 <__assert_fail@plt+0x458c>
   1564c:	cmn	r4, #1
   15650:	beq	15670 <__assert_fail@plt+0x4718>
   15654:	mov	r1, r4
   15658:	mov	r0, #-2147483648	; 0x80000000
   1565c:	bl	16640 <__assert_fail@plt+0x56e8>
   15660:	cmp	r6, r0
   15664:	movle	r0, #0
   15668:	movgt	r0, #1
   1566c:	b	154e4 <__assert_fail@plt+0x458c>
   15670:	add	r0, r6, #-2147483648	; 0x80000000
   15674:	cmp	r0, #0
   15678:	movle	r0, #0
   1567c:	movgt	r0, #1
   15680:	b	154e4 <__assert_fail@plt+0x458c>
   15684:	mul	r1, r6, r4
   15688:	cmp	r1, #63	; 0x3f
   1568c:	movle	r3, #64	; 0x40
   15690:	strle	r3, [sp, #4]
   15694:	bgt	15518 <__assert_fail@plt+0x45c0>
   15698:	b	154f4 <__assert_fail@plt+0x459c>
   1569c:	mov	r3, #64	; 0x40
   156a0:	str	r3, [sp, #4]
   156a4:	b	154f4 <__assert_fail@plt+0x459c>
   156a8:	rsb	r3, r9, #-2147483648	; 0x80000000
   156ac:	cmp	r5, r3
   156b0:	movge	r3, #0
   156b4:	movlt	r3, #1
   156b8:	b	15554 <__assert_fail@plt+0x45fc>
   156bc:	rsb	r3, r5, #-2147483648	; 0x80000000
   156c0:	cmp	r9, r3
   156c4:	movge	r3, #0
   156c8:	movlt	r3, #1
   156cc:	b	15554 <__assert_fail@plt+0x45fc>
   156d0:	cmp	r5, #0
   156d4:	blt	156fc <__assert_fail@plt+0x47a4>
   156d8:	cmn	r6, #1
   156dc:	beq	15718 <__assert_fail@plt+0x47c0>
   156e0:	mov	r1, r6
   156e4:	mov	r0, #-2147483648	; 0x80000000
   156e8:	bl	16640 <__assert_fail@plt+0x56e8>
   156ec:	cmp	r5, r0
   156f0:	movle	r0, #0
   156f4:	movgt	r0, #1
   156f8:	b	155a8 <__assert_fail@plt+0x4650>
   156fc:	mov	r1, r6
   15700:	mvn	r0, #-2147483648	; 0x80000000
   15704:	bl	16640 <__assert_fail@plt+0x56e8>
   15708:	cmp	r5, r0
   1570c:	movge	r0, #0
   15710:	movlt	r0, #1
   15714:	b	155a8 <__assert_fail@plt+0x4650>
   15718:	add	r0, r5, #-2147483648	; 0x80000000
   1571c:	cmp	r0, #0
   15720:	movle	r0, #0
   15724:	movgt	r0, #1
   15728:	b	155a8 <__assert_fail@plt+0x4650>
   1572c:	cmn	r5, #1
   15730:	beq	15750 <__assert_fail@plt+0x47f8>
   15734:	mov	r1, r5
   15738:	mov	r0, #-2147483648	; 0x80000000
   1573c:	bl	16640 <__assert_fail@plt+0x56e8>
   15740:	cmp	r6, r0
   15744:	movle	r0, #0
   15748:	movgt	r0, #1
   1574c:	b	155a8 <__assert_fail@plt+0x4650>
   15750:	add	r0, r6, #-2147483648	; 0x80000000
   15754:	cmp	r0, #0
   15758:	movle	r0, #0
   1575c:	movgt	r0, #1
   15760:	b	155a8 <__assert_fail@plt+0x4650>
   15764:	bl	15840 <__assert_fail@plt+0x48e8>
   15768:	push	{r4, lr}
   1576c:	bl	15f58 <__assert_fail@plt+0x5000>
   15770:	cmp	r0, #0
   15774:	popne	{r4, pc}
   15778:	bl	15840 <__assert_fail@plt+0x48e8>
   1577c:	push	{r4, lr}
   15780:	mov	r1, #1
   15784:	bl	15768 <__assert_fail@plt+0x4810>
   15788:	pop	{r4, pc}
   1578c:	push	{r4, lr}
   15790:	bl	15f58 <__assert_fail@plt+0x5000>
   15794:	cmp	r0, #0
   15798:	popne	{r4, pc}
   1579c:	bl	15840 <__assert_fail@plt+0x48e8>
   157a0:	push	{r4, lr}
   157a4:	mov	r1, #1
   157a8:	bl	1578c <__assert_fail@plt+0x4834>
   157ac:	pop	{r4, pc}
   157b0:	push	{r4, r5, r6, lr}
   157b4:	mov	r5, r0
   157b8:	mov	r4, r1
   157bc:	mov	r0, r1
   157c0:	bl	1529c <__assert_fail@plt+0x4344>
   157c4:	mov	r2, r4
   157c8:	mov	r1, r5
   157cc:	bl	10d30 <memcpy@plt>
   157d0:	pop	{r4, r5, r6, pc}
   157d4:	push	{r4, r5, r6, lr}
   157d8:	mov	r5, r0
   157dc:	mov	r4, r1
   157e0:	mov	r0, r1
   157e4:	bl	152b0 <__assert_fail@plt+0x4358>
   157e8:	mov	r2, r4
   157ec:	mov	r1, r5
   157f0:	bl	10d30 <memcpy@plt>
   157f4:	pop	{r4, r5, r6, pc}
   157f8:	push	{r4, r5, r6, lr}
   157fc:	mov	r5, r0
   15800:	mov	r4, r1
   15804:	add	r0, r1, #1
   15808:	bl	152b0 <__assert_fail@plt+0x4358>
   1580c:	mov	r2, #0
   15810:	strb	r2, [r0, r4]
   15814:	mov	r2, r4
   15818:	mov	r1, r5
   1581c:	bl	10d30 <memcpy@plt>
   15820:	pop	{r4, r5, r6, pc}
   15824:	push	{r4, lr}
   15828:	mov	r4, r0
   1582c:	bl	10e68 <strlen@plt>
   15830:	add	r1, r0, #1
   15834:	mov	r0, r4
   15838:	bl	157b0 <__assert_fail@plt+0x4858>
   1583c:	pop	{r4, pc}
   15840:	push	{r4, lr}
   15844:	ldr	r3, [pc, #40]	; 15874 <__assert_fail@plt+0x491c>
   15848:	ldr	r4, [r3]
   1584c:	mov	r2, #5
   15850:	ldr	r1, [pc, #32]	; 15878 <__assert_fail@plt+0x4920>
   15854:	mov	r0, #0
   15858:	bl	10d78 <dcgettext@plt>
   1585c:	mov	r3, r0
   15860:	ldr	r2, [pc, #20]	; 1587c <__assert_fail@plt+0x4924>
   15864:	mov	r1, #0
   15868:	mov	r0, r4
   1586c:	bl	10dfc <error@plt>
   15870:	bl	10f40 <abort@plt>
   15874:	strdeq	r8, [r2], -ip
   15878:	andeq	r7, r1, r0, lsl #18
   1587c:	andeq	r7, r1, ip, asr r3
   15880:	push	{r4, r5, r6, r7, lr}
   15884:	sub	sp, sp, #20
   15888:	mov	r7, r0
   1588c:	mov	r4, r2
   15890:	mov	r5, r3
   15894:	ldr	r6, [sp, #56]	; 0x38
   15898:	ldr	r3, [sp, #48]	; 0x30
   1589c:	str	r3, [sp]
   158a0:	add	r3, sp, #8
   158a4:	mov	r2, r1
   158a8:	mov	r1, #0
   158ac:	bl	15ad8 <__assert_fail@plt+0x4b80>
   158b0:	cmp	r0, #0
   158b4:	bne	15934 <__assert_fail@plt+0x49dc>
   158b8:	ldrd	r0, [sp, #8]
   158bc:	ldrd	r2, [sp, #40]	; 0x28
   158c0:	cmp	r1, r3
   158c4:	cmpeq	r0, r2
   158c8:	movhi	r3, #1
   158cc:	movls	r3, #0
   158d0:	cmp	r1, r5
   158d4:	cmpeq	r0, r4
   158d8:	orrcc	r3, r3, #1
   158dc:	cmp	r3, #0
   158e0:	beq	159ac <__assert_fail@plt+0x4a54>
   158e4:	mvn	r2, #-1073741824	; 0xc0000000
   158e8:	mov	r3, #0
   158ec:	cmp	r1, r3
   158f0:	cmpeq	r0, r2
   158f4:	bls	15924 <__assert_fail@plt+0x49cc>
   158f8:	bl	10e8c <__errno_location@plt>
   158fc:	mov	r3, #75	; 0x4b
   15900:	str	r3, [r0]
   15904:	cmp	r6, #0
   15908:	bne	15984 <__assert_fail@plt+0x4a2c>
   1590c:	mov	r6, #1
   15910:	bl	10e8c <__errno_location@plt>
   15914:	ldr	r4, [r0]
   15918:	cmp	r4, #22
   1591c:	moveq	r4, #0
   15920:	b	1598c <__assert_fail@plt+0x4a34>
   15924:	bl	10e8c <__errno_location@plt>
   15928:	mov	r3, #34	; 0x22
   1592c:	str	r3, [r0]
   15930:	b	15904 <__assert_fail@plt+0x49ac>
   15934:	cmp	r0, #1
   15938:	beq	15950 <__assert_fail@plt+0x49f8>
   1593c:	cmp	r0, #3
   15940:	beq	15974 <__assert_fail@plt+0x4a1c>
   15944:	cmp	r6, #0
   15948:	moveq	r6, #1
   1594c:	b	15910 <__assert_fail@plt+0x49b8>
   15950:	bl	10e8c <__errno_location@plt>
   15954:	mov	r3, #75	; 0x4b
   15958:	str	r3, [r0]
   1595c:	cmp	r6, #0
   15960:	bne	15910 <__assert_fail@plt+0x49b8>
   15964:	bl	10e8c <__errno_location@plt>
   15968:	ldr	r4, [r0]
   1596c:	mov	r6, #1
   15970:	b	1598c <__assert_fail@plt+0x4a34>
   15974:	bl	10e8c <__errno_location@plt>
   15978:	mov	r3, #0
   1597c:	str	r3, [r0]
   15980:	b	1595c <__assert_fail@plt+0x4a04>
   15984:	bl	10e8c <__errno_location@plt>
   15988:	ldr	r4, [r0]
   1598c:	mov	r0, r7
   15990:	bl	14c90 <__assert_fail@plt+0x3d38>
   15994:	str	r0, [sp]
   15998:	ldr	r3, [sp, #52]	; 0x34
   1599c:	ldr	r2, [pc, #16]	; 159b4 <__assert_fail@plt+0x4a5c>
   159a0:	mov	r1, r4
   159a4:	mov	r0, r6
   159a8:	bl	10dfc <error@plt>
   159ac:	add	sp, sp, #20
   159b0:	pop	{r4, r5, r6, r7, pc}
   159b4:	andeq	r7, r1, r8, asr r3
   159b8:	push	{r4, r5, lr}
   159bc:	sub	sp, sp, #28
   159c0:	ldr	r1, [sp, #56]	; 0x38
   159c4:	str	r1, [sp, #16]
   159c8:	ldr	r1, [sp, #52]	; 0x34
   159cc:	str	r1, [sp, #12]
   159d0:	ldr	r1, [sp, #48]	; 0x30
   159d4:	str	r1, [sp, #8]
   159d8:	ldrd	r4, [sp, #40]	; 0x28
   159dc:	strd	r4, [sp]
   159e0:	mov	r1, #10
   159e4:	bl	15880 <__assert_fail@plt+0x4928>
   159e8:	add	sp, sp, #28
   159ec:	pop	{r4, r5, pc}
   159f0:	push	{r4, r5, r6, lr}
   159f4:	mov	r5, r0
   159f8:	subs	r4, r1, #0
   159fc:	blt	15a50 <__assert_fail@plt+0x4af8>
   15a00:	cmp	r4, #0
   15a04:	moveq	r3, #0
   15a08:	beq	15a34 <__assert_fail@plt+0x4adc>
   15a0c:	mov	r2, r4
   15a10:	asr	r3, r4, #31
   15a14:	mvn	r0, #0
   15a18:	mvn	r1, #0
   15a1c:	bl	16954 <__assert_fail@plt+0x59fc>
   15a20:	ldrd	r2, [r5]
   15a24:	cmp	r1, r3
   15a28:	cmpeq	r0, r2
   15a2c:	movcc	r3, #1
   15a30:	movcs	r3, #0
   15a34:	cmp	r3, #0
   15a38:	beq	15a70 <__assert_fail@plt+0x4b18>
   15a3c:	mvn	r2, #0
   15a40:	mvn	r3, #0
   15a44:	strd	r2, [r5]
   15a48:	mov	r0, #1
   15a4c:	pop	{r4, r5, r6, pc}
   15a50:	mov	r1, r4
   15a54:	mov	r0, #0
   15a58:	bl	16640 <__assert_fail@plt+0x56e8>
   15a5c:	ldrd	r2, [r5]
   15a60:	orrs	r3, r2, r3
   15a64:	movne	r3, #1
   15a68:	moveq	r3, #0
   15a6c:	b	15a34 <__assert_fail@plt+0x4adc>
   15a70:	asr	r3, r4, #31
   15a74:	ldr	r1, [r5, #4]
   15a78:	ldr	r2, [r5]
   15a7c:	mul	r3, r3, r2
   15a80:	mla	r1, r4, r1, r3
   15a84:	umull	r2, r3, r2, r4
   15a88:	add	r3, r1, r3
   15a8c:	strd	r2, [r5]
   15a90:	mov	r0, #0
   15a94:	pop	{r4, r5, r6, pc}
   15a98:	push	{r4, r5, r6, r7, r8, lr}
   15a9c:	subs	r4, r2, #0
   15aa0:	beq	15ad0 <__assert_fail@plt+0x4b78>
   15aa4:	mov	r7, r1
   15aa8:	mov	r6, r0
   15aac:	mov	r5, #0
   15ab0:	mov	r1, r7
   15ab4:	mov	r0, r6
   15ab8:	bl	159f0 <__assert_fail@plt+0x4a98>
   15abc:	orr	r5, r5, r0
   15ac0:	subs	r4, r4, #1
   15ac4:	bne	15ab0 <__assert_fail@plt+0x4b58>
   15ac8:	mov	r0, r5
   15acc:	pop	{r4, r5, r6, r7, r8, pc}
   15ad0:	mov	r5, #0
   15ad4:	b	15ac8 <__assert_fail@plt+0x4b70>
   15ad8:	push	{r4, r5, r6, r7, r8, r9, lr}
   15adc:	sub	sp, sp, #20
   15ae0:	cmp	r2, #36	; 0x24
   15ae4:	bhi	15b24 <__assert_fail@plt+0x4bcc>
   15ae8:	mov	r5, r0
   15aec:	mov	r6, r1
   15af0:	mov	r7, r2
   15af4:	mov	r9, r3
   15af8:	cmp	r1, #0
   15afc:	addeq	r6, sp, #12
   15b00:	bl	10e8c <__errno_location@plt>
   15b04:	mov	r8, r0
   15b08:	mov	r3, #0
   15b0c:	str	r3, [r0]
   15b10:	ldrb	r4, [r5]
   15b14:	bl	10e50 <__ctype_b_loc@plt>
   15b18:	ldr	r1, [r0]
   15b1c:	mov	r2, r5
   15b20:	b	15b3c <__assert_fail@plt+0x4be4>
   15b24:	ldr	r3, [pc, #1056]	; 15f4c <__assert_fail@plt+0x4ff4>
   15b28:	mov	r2, #85	; 0x55
   15b2c:	ldr	r1, [pc, #1052]	; 15f50 <__assert_fail@plt+0x4ff8>
   15b30:	ldr	r0, [pc, #1052]	; 15f54 <__assert_fail@plt+0x4ffc>
   15b34:	bl	10f58 <__assert_fail@plt>
   15b38:	ldrb	r4, [r2, #1]!
   15b3c:	lsl	r3, r4, #1
   15b40:	ldrh	r3, [r1, r3]
   15b44:	tst	r3, #8192	; 0x2000
   15b48:	bne	15b38 <__assert_fail@plt+0x4be0>
   15b4c:	cmp	r4, #45	; 0x2d
   15b50:	moveq	r4, #4
   15b54:	bne	15b64 <__assert_fail@plt+0x4c0c>
   15b58:	mov	r0, r4
   15b5c:	add	sp, sp, #20
   15b60:	pop	{r4, r5, r6, r7, r8, r9, pc}
   15b64:	mov	r3, #0
   15b68:	mov	r2, r7
   15b6c:	mov	r1, r6
   15b70:	mov	r0, r5
   15b74:	bl	10d3c <__strtoull_internal@plt>
   15b78:	strd	r0, [sp]
   15b7c:	ldr	r7, [r6]
   15b80:	cmp	r5, r7
   15b84:	beq	15ba8 <__assert_fail@plt+0x4c50>
   15b88:	ldr	r3, [r8]
   15b8c:	cmp	r3, #0
   15b90:	beq	15bf0 <__assert_fail@plt+0x4c98>
   15b94:	cmp	r3, #34	; 0x22
   15b98:	moveq	r4, #1
   15b9c:	beq	15bf4 <__assert_fail@plt+0x4c9c>
   15ba0:	mov	r4, #4
   15ba4:	b	15b58 <__assert_fail@plt+0x4c00>
   15ba8:	ldr	r3, [sp, #48]	; 0x30
   15bac:	cmp	r3, #0
   15bb0:	moveq	r4, #4
   15bb4:	beq	15b58 <__assert_fail@plt+0x4c00>
   15bb8:	ldrb	r1, [r7]
   15bbc:	cmp	r1, #0
   15bc0:	moveq	r4, #4
   15bc4:	beq	15b58 <__assert_fail@plt+0x4c00>
   15bc8:	mov	r0, r3
   15bcc:	bl	10e74 <strchr@plt>
   15bd0:	cmp	r0, #0
   15bd4:	moveq	r4, #4
   15bd8:	beq	15b58 <__assert_fail@plt+0x4c00>
   15bdc:	mov	r2, #1
   15be0:	mov	r3, #0
   15be4:	strd	r2, [sp]
   15be8:	mov	r4, #0
   15bec:	b	15c00 <__assert_fail@plt+0x4ca8>
   15bf0:	mov	r4, #0
   15bf4:	ldr	r3, [sp, #48]	; 0x30
   15bf8:	cmp	r3, #0
   15bfc:	beq	15cf0 <__assert_fail@plt+0x4d98>
   15c00:	ldrb	r5, [r7]
   15c04:	cmp	r5, #0
   15c08:	beq	15e88 <__assert_fail@plt+0x4f30>
   15c0c:	mov	r1, r5
   15c10:	ldr	r0, [sp, #48]	; 0x30
   15c14:	bl	10e74 <strchr@plt>
   15c18:	cmp	r0, #0
   15c1c:	beq	15cf8 <__assert_fail@plt+0x4da0>
   15c20:	sub	r3, r5, #69	; 0x45
   15c24:	cmp	r3, #47	; 0x2f
   15c28:	ldrls	pc, [pc, r3, lsl #2]
   15c2c:	b	15d64 <__assert_fail@plt+0x4e0c>
   15c30:	andeq	r5, r1, r8, lsl #26
   15c34:	andeq	r5, r1, r4, ror #26
   15c38:	andeq	r5, r1, r8, lsl #26
   15c3c:	andeq	r5, r1, r4, ror #26
   15c40:	andeq	r5, r1, r4, ror #26
   15c44:	andeq	r5, r1, r4, ror #26
   15c48:	andeq	r5, r1, r8, lsl #26
   15c4c:	andeq	r5, r1, r4, ror #26
   15c50:	andeq	r5, r1, r8, lsl #26
   15c54:	andeq	r5, r1, r4, ror #26
   15c58:	andeq	r5, r1, r4, ror #26
   15c5c:	andeq	r5, r1, r8, lsl #26
   15c60:	andeq	r5, r1, r4, ror #26
   15c64:	andeq	r5, r1, r4, ror #26
   15c68:	andeq	r5, r1, r4, ror #26
   15c6c:	andeq	r5, r1, r8, lsl #26
   15c70:	andeq	r5, r1, r4, ror #26
   15c74:	andeq	r5, r1, r4, ror #26
   15c78:	andeq	r5, r1, r4, ror #26
   15c7c:	andeq	r5, r1, r4, ror #26
   15c80:	andeq	r5, r1, r8, lsl #26
   15c84:	andeq	r5, r1, r8, lsl #26
   15c88:	andeq	r5, r1, r4, ror #26
   15c8c:	andeq	r5, r1, r4, ror #26
   15c90:	andeq	r5, r1, r4, ror #26
   15c94:	andeq	r5, r1, r4, ror #26
   15c98:	andeq	r5, r1, r4, ror #26
   15c9c:	andeq	r5, r1, r4, ror #26
   15ca0:	andeq	r5, r1, r4, ror #26
   15ca4:	andeq	r5, r1, r4, ror #26
   15ca8:	andeq	r5, r1, r4, ror #26
   15cac:	andeq	r5, r1, r4, ror #26
   15cb0:	andeq	r5, r1, r4, ror #26
   15cb4:	andeq	r5, r1, r4, ror #26
   15cb8:	andeq	r5, r1, r8, lsl #26
   15cbc:	andeq	r5, r1, r4, ror #26
   15cc0:	andeq	r5, r1, r4, ror #26
   15cc4:	andeq	r5, r1, r4, ror #26
   15cc8:	andeq	r5, r1, r8, lsl #26
   15ccc:	andeq	r5, r1, r4, ror #26
   15cd0:	andeq	r5, r1, r8, lsl #26
   15cd4:	andeq	r5, r1, r4, ror #26
   15cd8:	andeq	r5, r1, r4, ror #26
   15cdc:	andeq	r5, r1, r4, ror #26
   15ce0:	andeq	r5, r1, r4, ror #26
   15ce4:	andeq	r5, r1, r4, ror #26
   15ce8:	andeq	r5, r1, r4, ror #26
   15cec:	andeq	r5, r1, r8, lsl #26
   15cf0:	strd	r0, [r9]
   15cf4:	b	15b58 <__assert_fail@plt+0x4c00>
   15cf8:	ldrd	r2, [sp]
   15cfc:	strd	r2, [r9]
   15d00:	orr	r4, r4, #2
   15d04:	b	15b58 <__assert_fail@plt+0x4c00>
   15d08:	mov	r1, #48	; 0x30
   15d0c:	ldr	r0, [sp, #48]	; 0x30
   15d10:	bl	10e74 <strchr@plt>
   15d14:	cmp	r0, #0
   15d18:	beq	15e54 <__assert_fail@plt+0x4efc>
   15d1c:	ldrb	r3, [r7, #1]
   15d20:	cmp	r3, #68	; 0x44
   15d24:	beq	15d40 <__assert_fail@plt+0x4de8>
   15d28:	cmp	r3, #105	; 0x69
   15d2c:	beq	15d4c <__assert_fail@plt+0x4df4>
   15d30:	cmp	r3, #66	; 0x42
   15d34:	movne	r7, #1
   15d38:	movne	r1, #1024	; 0x400
   15d3c:	bne	15d6c <__assert_fail@plt+0x4e14>
   15d40:	mov	r7, #2
   15d44:	mov	r1, #1000	; 0x3e8
   15d48:	b	15d6c <__assert_fail@plt+0x4e14>
   15d4c:	ldrb	r7, [r7, #2]
   15d50:	cmp	r7, #66	; 0x42
   15d54:	movne	r7, #1
   15d58:	moveq	r7, #3
   15d5c:	mov	r1, #1024	; 0x400
   15d60:	b	15d6c <__assert_fail@plt+0x4e14>
   15d64:	mov	r7, #1
   15d68:	mov	r1, #1024	; 0x400
   15d6c:	sub	r5, r5, #66	; 0x42
   15d70:	cmp	r5, #53	; 0x35
   15d74:	ldrls	pc, [pc, r5, lsl #2]
   15d78:	b	15f34 <__assert_fail@plt+0x4fdc>
   15d7c:	muleq	r1, r4, lr
   15d80:	andeq	r5, r1, r4, lsr pc
   15d84:	andeq	r5, r1, r4, lsr pc
   15d88:	andeq	r5, r1, r4, lsr #29
   15d8c:	andeq	r5, r1, r4, lsr pc
   15d90:			; <UNDEFINED> instruction: 0x00015eb4
   15d94:	andeq	r5, r1, r4, lsr pc
   15d98:	andeq	r5, r1, r4, lsr pc
   15d9c:	andeq	r5, r1, r4, lsr pc
   15da0:	andeq	r5, r1, r4, asr #29
   15da4:	andeq	r5, r1, r4, lsr pc
   15da8:	ldrdeq	r5, [r1], -r4
   15dac:	andeq	r5, r1, r4, lsr pc
   15db0:	andeq	r5, r1, r4, lsr pc
   15db4:	andeq	r5, r1, r4, ror #29
   15db8:	andeq	r5, r1, r4, lsr pc
   15dbc:	andeq	r5, r1, r4, lsr pc
   15dc0:	andeq	r5, r1, r4, lsr pc
   15dc4:	strdeq	r5, [r1], -r4
   15dc8:	andeq	r5, r1, r4, lsr pc
   15dcc:	andeq	r5, r1, r4, lsr pc
   15dd0:	andeq	r5, r1, r4, lsr pc
   15dd4:	andeq	r5, r1, r4, lsr pc
   15dd8:	andeq	r5, r1, r4, lsl pc
   15ddc:	andeq	r5, r1, r4, lsr #30
   15de0:	andeq	r5, r1, r4, lsr pc
   15de4:	andeq	r5, r1, r4, lsr pc
   15de8:	andeq	r5, r1, r4, lsr pc
   15dec:	andeq	r5, r1, r4, lsr pc
   15df0:	andeq	r5, r1, r4, lsr pc
   15df4:	andeq	r5, r1, r4, lsr pc
   15df8:	andeq	r5, r1, r4, lsr pc
   15dfc:	andeq	r5, r1, r0, ror #28
   15e00:	andeq	r5, r1, r4, asr #30
   15e04:	andeq	r5, r1, r4, lsr pc
   15e08:	andeq	r5, r1, r4, lsr pc
   15e0c:	andeq	r5, r1, r4, lsr pc
   15e10:			; <UNDEFINED> instruction: 0x00015eb4
   15e14:	andeq	r5, r1, r4, lsr pc
   15e18:	andeq	r5, r1, r4, lsr pc
   15e1c:	andeq	r5, r1, r4, lsr pc
   15e20:	andeq	r5, r1, r4, asr #29
   15e24:	andeq	r5, r1, r4, lsr pc
   15e28:	ldrdeq	r5, [r1], -r4
   15e2c:	andeq	r5, r1, r4, lsr pc
   15e30:	andeq	r5, r1, r4, lsr pc
   15e34:	andeq	r5, r1, r4, lsr pc
   15e38:	andeq	r5, r1, r4, lsr pc
   15e3c:	andeq	r5, r1, r4, lsr pc
   15e40:	andeq	r5, r1, r4, lsr pc
   15e44:	strdeq	r5, [r1], -r4
   15e48:	andeq	r5, r1, r4, lsr pc
   15e4c:	andeq	r5, r1, r4, lsr pc
   15e50:	andeq	r5, r1, r4, lsl #30
   15e54:	mov	r7, #1
   15e58:	mov	r1, #1024	; 0x400
   15e5c:	b	15d6c <__assert_fail@plt+0x4e14>
   15e60:	mov	r1, #512	; 0x200
   15e64:	mov	r0, sp
   15e68:	bl	159f0 <__assert_fail@plt+0x4a98>
   15e6c:	orr	r4, r4, r0
   15e70:	ldr	r3, [r6]
   15e74:	add	r2, r3, r7
   15e78:	str	r2, [r6]
   15e7c:	ldrb	r3, [r3, r7]
   15e80:	cmp	r3, #0
   15e84:	orrne	r4, r4, #2
   15e88:	ldrd	r2, [sp]
   15e8c:	strd	r2, [r9]
   15e90:	b	15b58 <__assert_fail@plt+0x4c00>
   15e94:	mov	r1, #1024	; 0x400
   15e98:	mov	r0, sp
   15e9c:	bl	159f0 <__assert_fail@plt+0x4a98>
   15ea0:	b	15e6c <__assert_fail@plt+0x4f14>
   15ea4:	mov	r2, #6
   15ea8:	mov	r0, sp
   15eac:	bl	15a98 <__assert_fail@plt+0x4b40>
   15eb0:	b	15e6c <__assert_fail@plt+0x4f14>
   15eb4:	mov	r2, #3
   15eb8:	mov	r0, sp
   15ebc:	bl	15a98 <__assert_fail@plt+0x4b40>
   15ec0:	b	15e6c <__assert_fail@plt+0x4f14>
   15ec4:	mov	r2, #1
   15ec8:	mov	r0, sp
   15ecc:	bl	15a98 <__assert_fail@plt+0x4b40>
   15ed0:	b	15e6c <__assert_fail@plt+0x4f14>
   15ed4:	mov	r2, #2
   15ed8:	mov	r0, sp
   15edc:	bl	15a98 <__assert_fail@plt+0x4b40>
   15ee0:	b	15e6c <__assert_fail@plt+0x4f14>
   15ee4:	mov	r2, #5
   15ee8:	mov	r0, sp
   15eec:	bl	15a98 <__assert_fail@plt+0x4b40>
   15ef0:	b	15e6c <__assert_fail@plt+0x4f14>
   15ef4:	mov	r2, #4
   15ef8:	mov	r0, sp
   15efc:	bl	15a98 <__assert_fail@plt+0x4b40>
   15f00:	b	15e6c <__assert_fail@plt+0x4f14>
   15f04:	mov	r1, #2
   15f08:	mov	r0, sp
   15f0c:	bl	159f0 <__assert_fail@plt+0x4a98>
   15f10:	b	15e6c <__assert_fail@plt+0x4f14>
   15f14:	mov	r2, #8
   15f18:	mov	r0, sp
   15f1c:	bl	15a98 <__assert_fail@plt+0x4b40>
   15f20:	b	15e6c <__assert_fail@plt+0x4f14>
   15f24:	mov	r2, #7
   15f28:	mov	r0, sp
   15f2c:	bl	15a98 <__assert_fail@plt+0x4b40>
   15f30:	b	15e6c <__assert_fail@plt+0x4f14>
   15f34:	ldrd	r2, [sp]
   15f38:	strd	r2, [r9]
   15f3c:	orr	r4, r4, #2
   15f40:	b	15b58 <__assert_fail@plt+0x4c00>
   15f44:	mov	r0, #0
   15f48:	b	15e6c <__assert_fail@plt+0x4f14>
   15f4c:	andeq	r7, r1, r4, lsl r9
   15f50:	andeq	r7, r1, r0, lsr #18
   15f54:	andeq	r7, r1, r0, lsr r9
   15f58:	push	{r4, lr}
   15f5c:	mov	r2, r0
   15f60:	mov	r3, r1
   15f64:	cmp	r1, #0
   15f68:	cmpne	r0, #0
   15f6c:	moveq	r3, #1
   15f70:	moveq	r2, r3
   15f74:	umull	r0, r1, r2, r3
   15f78:	cmp	r0, #0
   15f7c:	cmpge	r1, #0
   15f80:	bne	15f94 <__assert_fail@plt+0x503c>
   15f84:	mov	r1, r3
   15f88:	mov	r0, r2
   15f8c:	bl	10cd0 <calloc@plt>
   15f90:	pop	{r4, pc}
   15f94:	bl	10e8c <__errno_location@plt>
   15f98:	mov	r3, #12
   15f9c:	str	r3, [r0]
   15fa0:	mov	r0, #0
   15fa4:	pop	{r4, pc}
   15fa8:	push	{r4, lr}
   15fac:	cmp	r0, #0
   15fb0:	moveq	r0, #1
   15fb4:	cmp	r0, #0
   15fb8:	blt	15fc4 <__assert_fail@plt+0x506c>
   15fbc:	bl	10e14 <malloc@plt>
   15fc0:	pop	{r4, pc}
   15fc4:	bl	10e8c <__errno_location@plt>
   15fc8:	mov	r3, #12
   15fcc:	str	r3, [r0]
   15fd0:	mov	r0, #0
   15fd4:	pop	{r4, pc}
   15fd8:	push	{r4, lr}
   15fdc:	cmp	r0, #0
   15fe0:	beq	15ffc <__assert_fail@plt+0x50a4>
   15fe4:	cmp	r1, #0
   15fe8:	beq	16008 <__assert_fail@plt+0x50b0>
   15fec:	cmp	r1, #0
   15ff0:	blt	16014 <__assert_fail@plt+0x50bc>
   15ff4:	bl	10d84 <realloc@plt>
   15ff8:	pop	{r4, pc}
   15ffc:	mov	r0, r1
   16000:	bl	15fa8 <__assert_fail@plt+0x5050>
   16004:	pop	{r4, pc}
   16008:	bl	12f44 <__assert_fail@plt+0x1fec>
   1600c:	mov	r0, #0
   16010:	pop	{r4, pc}
   16014:	bl	10e8c <__errno_location@plt>
   16018:	mov	r3, #12
   1601c:	str	r3, [r0]
   16020:	mov	r0, #0
   16024:	pop	{r4, pc}
   16028:	push	{r4, r5, r6, lr}
   1602c:	mov	r5, r0
   16030:	bl	10de4 <__fpending@plt>
   16034:	mov	r6, r0
   16038:	ldr	r4, [r5]
   1603c:	and	r4, r4, #32
   16040:	mov	r0, r5
   16044:	bl	160a0 <__assert_fail@plt+0x5148>
   16048:	cmp	r4, #0
   1604c:	bne	16074 <__assert_fail@plt+0x511c>
   16050:	cmp	r0, #0
   16054:	popeq	{r4, r5, r6, pc}
   16058:	cmp	r6, #0
   1605c:	bne	16090 <__assert_fail@plt+0x5138>
   16060:	bl	10e8c <__errno_location@plt>
   16064:	ldr	r0, [r0]
   16068:	subs	r0, r0, #9
   1606c:	mvnne	r0, #0
   16070:	pop	{r4, r5, r6, pc}
   16074:	cmp	r0, #0
   16078:	bne	16098 <__assert_fail@plt+0x5140>
   1607c:	bl	10e8c <__errno_location@plt>
   16080:	mov	r3, #0
   16084:	str	r3, [r0]
   16088:	mvn	r0, #0
   1608c:	pop	{r4, r5, r6, pc}
   16090:	mvn	r0, #0
   16094:	pop	{r4, r5, r6, pc}
   16098:	mvn	r0, #0
   1609c:	pop	{r4, r5, r6, pc}
   160a0:	push	{r4, r5, r6, lr}
   160a4:	sub	sp, sp, #8
   160a8:	mov	r4, r0
   160ac:	bl	10ebc <fileno@plt>
   160b0:	cmp	r0, #0
   160b4:	blt	1612c <__assert_fail@plt+0x51d4>
   160b8:	mov	r0, r4
   160bc:	bl	10e2c <__freading@plt>
   160c0:	cmp	r0, #0
   160c4:	beq	160f8 <__assert_fail@plt+0x51a0>
   160c8:	mov	r0, r4
   160cc:	bl	10ebc <fileno@plt>
   160d0:	mov	r3, #1
   160d4:	str	r3, [sp]
   160d8:	mov	r2, #0
   160dc:	mov	r3, #0
   160e0:	bl	10dcc <lseek64@plt>
   160e4:	mvn	r2, #0
   160e8:	mvn	r3, #0
   160ec:	cmp	r1, r3
   160f0:	cmpeq	r0, r2
   160f4:	beq	16138 <__assert_fail@plt+0x51e0>
   160f8:	mov	r0, r4
   160fc:	bl	16148 <__assert_fail@plt+0x51f0>
   16100:	cmp	r0, #0
   16104:	beq	16138 <__assert_fail@plt+0x51e0>
   16108:	bl	10e8c <__errno_location@plt>
   1610c:	mov	r5, r0
   16110:	ldr	r6, [r0]
   16114:	mov	r0, r4
   16118:	bl	10ee0 <fclose@plt>
   1611c:	cmp	r6, #0
   16120:	strne	r6, [r5]
   16124:	mvnne	r0, #0
   16128:	b	16140 <__assert_fail@plt+0x51e8>
   1612c:	mov	r0, r4
   16130:	bl	10ee0 <fclose@plt>
   16134:	b	16140 <__assert_fail@plt+0x51e8>
   16138:	mov	r0, r4
   1613c:	bl	10ee0 <fclose@plt>
   16140:	add	sp, sp, #8
   16144:	pop	{r4, r5, r6, pc}
   16148:	push	{r4, lr}
   1614c:	sub	sp, sp, #8
   16150:	subs	r4, r0, #0
   16154:	beq	16168 <__assert_fail@plt+0x5210>
   16158:	mov	r0, r4
   1615c:	bl	10e2c <__freading@plt>
   16160:	cmp	r0, #0
   16164:	bne	16178 <__assert_fail@plt+0x5220>
   16168:	mov	r0, r4
   1616c:	bl	10d0c <fflush@plt>
   16170:	add	sp, sp, #8
   16174:	pop	{r4, pc}
   16178:	ldr	r3, [r4]
   1617c:	tst	r3, #256	; 0x100
   16180:	bne	16190 <__assert_fail@plt+0x5238>
   16184:	mov	r0, r4
   16188:	bl	10d0c <fflush@plt>
   1618c:	b	16170 <__assert_fail@plt+0x5218>
   16190:	mov	r3, #1
   16194:	str	r3, [sp]
   16198:	mov	r2, #0
   1619c:	mov	r3, #0
   161a0:	mov	r0, r4
   161a4:	bl	161ac <__assert_fail@plt+0x5254>
   161a8:	b	16184 <__assert_fail@plt+0x522c>
   161ac:	push	{r4, r5, r6, r7, lr}
   161b0:	sub	sp, sp, #12
   161b4:	mov	r4, r0
   161b8:	mov	r6, r2
   161bc:	mov	r7, r3
   161c0:	ldr	r5, [sp, #32]
   161c4:	ldr	r2, [r0, #8]
   161c8:	ldr	r3, [r0, #4]
   161cc:	cmp	r2, r3
   161d0:	beq	161f0 <__assert_fail@plt+0x5298>
   161d4:	str	r5, [sp]
   161d8:	mov	r2, r6
   161dc:	mov	r3, r7
   161e0:	mov	r0, r4
   161e4:	bl	10eec <fseeko64@plt>
   161e8:	add	sp, sp, #12
   161ec:	pop	{r4, r5, r6, r7, pc}
   161f0:	ldr	r2, [r0, #20]
   161f4:	ldr	r3, [r0, #16]
   161f8:	cmp	r2, r3
   161fc:	bne	161d4 <__assert_fail@plt+0x527c>
   16200:	ldr	r3, [r0, #36]	; 0x24
   16204:	cmp	r3, #0
   16208:	bne	161d4 <__assert_fail@plt+0x527c>
   1620c:	bl	10ebc <fileno@plt>
   16210:	str	r5, [sp]
   16214:	mov	r2, r6
   16218:	mov	r3, r7
   1621c:	bl	10dcc <lseek64@plt>
   16220:	mvn	r2, #0
   16224:	mvn	r3, #0
   16228:	cmp	r1, r3
   1622c:	cmpeq	r0, r2
   16230:	beq	1624c <__assert_fail@plt+0x52f4>
   16234:	ldr	r3, [r4]
   16238:	bic	r3, r3, #16
   1623c:	str	r3, [r4]
   16240:	strd	r0, [r4, #80]	; 0x50
   16244:	mov	r0, #0
   16248:	b	161e8 <__assert_fail@plt+0x5290>
   1624c:	mvn	r0, #0
   16250:	b	161e8 <__assert_fail@plt+0x5290>
   16254:	push	{r4, lr}
   16258:	mov	r0, #14
   1625c:	bl	10f10 <nl_langinfo@plt>
   16260:	cmp	r0, #0
   16264:	beq	1627c <__assert_fail@plt+0x5324>
   16268:	ldrb	r2, [r0]
   1626c:	ldr	r3, [pc, #16]	; 16284 <__assert_fail@plt+0x532c>
   16270:	cmp	r2, #0
   16274:	moveq	r0, r3
   16278:	pop	{r4, pc}
   1627c:	ldr	r0, [pc]	; 16284 <__assert_fail@plt+0x532c>
   16280:	pop	{r4, pc}
   16284:	andeq	r7, r1, r8, asr r9
   16288:	push	{r4, r5, r6, r7, lr}
   1628c:	sub	sp, sp, #12
   16290:	mov	r7, r1
   16294:	mov	r5, r2
   16298:	subs	r6, r0, #0
   1629c:	addeq	r6, sp, #4
   162a0:	mov	r0, r6
   162a4:	bl	10df0 <mbrtowc@plt>
   162a8:	mov	r4, r0
   162ac:	cmp	r5, #0
   162b0:	cmnne	r0, #3
   162b4:	bhi	162c4 <__assert_fail@plt+0x536c>
   162b8:	mov	r0, r4
   162bc:	add	sp, sp, #12
   162c0:	pop	{r4, r5, r6, r7, pc}
   162c4:	mov	r0, #0
   162c8:	bl	1632c <__assert_fail@plt+0x53d4>
   162cc:	cmp	r0, #0
   162d0:	ldrbeq	r3, [r7]
   162d4:	streq	r3, [r6]
   162d8:	moveq	r4, #1
   162dc:	b	162b8 <__assert_fail@plt+0x5360>
   162e0:	push	{r4, r5, r6, lr}
   162e4:	mov	r6, r0
   162e8:	mov	r5, r1
   162ec:	subs	r4, r2, #0
   162f0:	beq	1631c <__assert_fail@plt+0x53c4>
   162f4:	mov	r1, r4
   162f8:	mvn	r0, #0
   162fc:	bl	16434 <__assert_fail@plt+0x54dc>
   16300:	cmp	r0, r5
   16304:	bcs	1631c <__assert_fail@plt+0x53c4>
   16308:	bl	10e8c <__errno_location@plt>
   1630c:	mov	r3, #12
   16310:	str	r3, [r0]
   16314:	mov	r0, #0
   16318:	pop	{r4, r5, r6, pc}
   1631c:	mul	r1, r5, r4
   16320:	mov	r0, r6
   16324:	bl	15fd8 <__assert_fail@plt+0x5080>
   16328:	pop	{r4, r5, r6, pc}
   1632c:	push	{lr}		; (str lr, [sp, #-4]!)
   16330:	sub	sp, sp, #268	; 0x10c
   16334:	ldr	r2, [pc, #68]	; 16380 <__assert_fail@plt+0x5428>
   16338:	add	r1, sp, #4
   1633c:	bl	1638c <__assert_fail@plt+0x5434>
   16340:	cmp	r0, #0
   16344:	movne	r0, #0
   16348:	bne	16378 <__assert_fail@plt+0x5420>
   1634c:	ldr	r1, [pc, #48]	; 16384 <__assert_fail@plt+0x542c>
   16350:	add	r0, sp, #4
   16354:	bl	10cf4 <strcmp@plt>
   16358:	cmp	r0, #0
   1635c:	moveq	r0, #0
   16360:	beq	16378 <__assert_fail@plt+0x5420>
   16364:	ldr	r1, [pc, #28]	; 16388 <__assert_fail@plt+0x5430>
   16368:	add	r0, sp, #4
   1636c:	bl	10cf4 <strcmp@plt>
   16370:	adds	r0, r0, #0
   16374:	movne	r0, #1
   16378:	add	sp, sp, #268	; 0x10c
   1637c:	pop	{pc}		; (ldr pc, [sp], #4)
   16380:	andeq	r0, r0, r1, lsl #2
   16384:	andeq	r7, r1, r0, ror #18
   16388:	andeq	r7, r1, r4, ror #18
   1638c:	push	{r4, r5, r6, lr}
   16390:	mov	r6, r1
   16394:	mov	r4, r2
   16398:	mov	r1, #0
   1639c:	bl	10ef8 <setlocale@plt>
   163a0:	subs	r5, r0, #0
   163a4:	beq	163c8 <__assert_fail@plt+0x5470>
   163a8:	mov	r0, r5
   163ac:	bl	10e68 <strlen@plt>
   163b0:	cmp	r4, r0
   163b4:	bhi	163e0 <__assert_fail@plt+0x5488>
   163b8:	cmp	r4, #0
   163bc:	bne	163f8 <__assert_fail@plt+0x54a0>
   163c0:	mov	r0, #34	; 0x22
   163c4:	pop	{r4, r5, r6, pc}
   163c8:	cmp	r4, #0
   163cc:	beq	1641c <__assert_fail@plt+0x54c4>
   163d0:	mov	r3, #0
   163d4:	strb	r3, [r6]
   163d8:	mov	r0, #22
   163dc:	pop	{r4, r5, r6, pc}
   163e0:	add	r2, r0, #1
   163e4:	mov	r1, r5
   163e8:	mov	r0, r6
   163ec:	bl	10d30 <memcpy@plt>
   163f0:	mov	r0, #0
   163f4:	pop	{r4, r5, r6, pc}
   163f8:	sub	r4, r4, #1
   163fc:	mov	r2, r4
   16400:	mov	r1, r5
   16404:	mov	r0, r6
   16408:	bl	10d30 <memcpy@plt>
   1640c:	mov	r3, #0
   16410:	strb	r3, [r6, r4]
   16414:	mov	r0, #34	; 0x22
   16418:	pop	{r4, r5, r6, pc}
   1641c:	mov	r0, #22
   16420:	pop	{r4, r5, r6, pc}
   16424:	push	{r4, lr}
   16428:	mov	r1, #0
   1642c:	bl	10ef8 <setlocale@plt>
   16430:	pop	{r4, pc}
   16434:	subs	r2, r1, #1
   16438:	bxeq	lr
   1643c:	bcc	16614 <__assert_fail@plt+0x56bc>
   16440:	cmp	r0, r1
   16444:	bls	165f8 <__assert_fail@plt+0x56a0>
   16448:	tst	r1, r2
   1644c:	beq	16604 <__assert_fail@plt+0x56ac>
   16450:	clz	r3, r0
   16454:	clz	r2, r1
   16458:	sub	r3, r2, r3
   1645c:	rsbs	r3, r3, #31
   16460:	addne	r3, r3, r3, lsl #1
   16464:	mov	r2, #0
   16468:	addne	pc, pc, r3, lsl #2
   1646c:	nop			; (mov r0, r0)
   16470:	cmp	r0, r1, lsl #31
   16474:	adc	r2, r2, r2
   16478:	subcs	r0, r0, r1, lsl #31
   1647c:	cmp	r0, r1, lsl #30
   16480:	adc	r2, r2, r2
   16484:	subcs	r0, r0, r1, lsl #30
   16488:	cmp	r0, r1, lsl #29
   1648c:	adc	r2, r2, r2
   16490:	subcs	r0, r0, r1, lsl #29
   16494:	cmp	r0, r1, lsl #28
   16498:	adc	r2, r2, r2
   1649c:	subcs	r0, r0, r1, lsl #28
   164a0:	cmp	r0, r1, lsl #27
   164a4:	adc	r2, r2, r2
   164a8:	subcs	r0, r0, r1, lsl #27
   164ac:	cmp	r0, r1, lsl #26
   164b0:	adc	r2, r2, r2
   164b4:	subcs	r0, r0, r1, lsl #26
   164b8:	cmp	r0, r1, lsl #25
   164bc:	adc	r2, r2, r2
   164c0:	subcs	r0, r0, r1, lsl #25
   164c4:	cmp	r0, r1, lsl #24
   164c8:	adc	r2, r2, r2
   164cc:	subcs	r0, r0, r1, lsl #24
   164d0:	cmp	r0, r1, lsl #23
   164d4:	adc	r2, r2, r2
   164d8:	subcs	r0, r0, r1, lsl #23
   164dc:	cmp	r0, r1, lsl #22
   164e0:	adc	r2, r2, r2
   164e4:	subcs	r0, r0, r1, lsl #22
   164e8:	cmp	r0, r1, lsl #21
   164ec:	adc	r2, r2, r2
   164f0:	subcs	r0, r0, r1, lsl #21
   164f4:	cmp	r0, r1, lsl #20
   164f8:	adc	r2, r2, r2
   164fc:	subcs	r0, r0, r1, lsl #20
   16500:	cmp	r0, r1, lsl #19
   16504:	adc	r2, r2, r2
   16508:	subcs	r0, r0, r1, lsl #19
   1650c:	cmp	r0, r1, lsl #18
   16510:	adc	r2, r2, r2
   16514:	subcs	r0, r0, r1, lsl #18
   16518:	cmp	r0, r1, lsl #17
   1651c:	adc	r2, r2, r2
   16520:	subcs	r0, r0, r1, lsl #17
   16524:	cmp	r0, r1, lsl #16
   16528:	adc	r2, r2, r2
   1652c:	subcs	r0, r0, r1, lsl #16
   16530:	cmp	r0, r1, lsl #15
   16534:	adc	r2, r2, r2
   16538:	subcs	r0, r0, r1, lsl #15
   1653c:	cmp	r0, r1, lsl #14
   16540:	adc	r2, r2, r2
   16544:	subcs	r0, r0, r1, lsl #14
   16548:	cmp	r0, r1, lsl #13
   1654c:	adc	r2, r2, r2
   16550:	subcs	r0, r0, r1, lsl #13
   16554:	cmp	r0, r1, lsl #12
   16558:	adc	r2, r2, r2
   1655c:	subcs	r0, r0, r1, lsl #12
   16560:	cmp	r0, r1, lsl #11
   16564:	adc	r2, r2, r2
   16568:	subcs	r0, r0, r1, lsl #11
   1656c:	cmp	r0, r1, lsl #10
   16570:	adc	r2, r2, r2
   16574:	subcs	r0, r0, r1, lsl #10
   16578:	cmp	r0, r1, lsl #9
   1657c:	adc	r2, r2, r2
   16580:	subcs	r0, r0, r1, lsl #9
   16584:	cmp	r0, r1, lsl #8
   16588:	adc	r2, r2, r2
   1658c:	subcs	r0, r0, r1, lsl #8
   16590:	cmp	r0, r1, lsl #7
   16594:	adc	r2, r2, r2
   16598:	subcs	r0, r0, r1, lsl #7
   1659c:	cmp	r0, r1, lsl #6
   165a0:	adc	r2, r2, r2
   165a4:	subcs	r0, r0, r1, lsl #6
   165a8:	cmp	r0, r1, lsl #5
   165ac:	adc	r2, r2, r2
   165b0:	subcs	r0, r0, r1, lsl #5
   165b4:	cmp	r0, r1, lsl #4
   165b8:	adc	r2, r2, r2
   165bc:	subcs	r0, r0, r1, lsl #4
   165c0:	cmp	r0, r1, lsl #3
   165c4:	adc	r2, r2, r2
   165c8:	subcs	r0, r0, r1, lsl #3
   165cc:	cmp	r0, r1, lsl #2
   165d0:	adc	r2, r2, r2
   165d4:	subcs	r0, r0, r1, lsl #2
   165d8:	cmp	r0, r1, lsl #1
   165dc:	adc	r2, r2, r2
   165e0:	subcs	r0, r0, r1, lsl #1
   165e4:	cmp	r0, r1
   165e8:	adc	r2, r2, r2
   165ec:	subcs	r0, r0, r1
   165f0:	mov	r0, r2
   165f4:	bx	lr
   165f8:	moveq	r0, #1
   165fc:	movne	r0, #0
   16600:	bx	lr
   16604:	clz	r2, r1
   16608:	rsb	r2, r2, #31
   1660c:	lsr	r0, r0, r2
   16610:	bx	lr
   16614:	cmp	r0, #0
   16618:	mvnne	r0, #0
   1661c:	b	16990 <__assert_fail@plt+0x5a38>
   16620:	cmp	r1, #0
   16624:	beq	16614 <__assert_fail@plt+0x56bc>
   16628:	push	{r0, r1, lr}
   1662c:	bl	16434 <__assert_fail@plt+0x54dc>
   16630:	pop	{r1, r2, lr}
   16634:	mul	r3, r2, r0
   16638:	sub	r1, r1, r3
   1663c:	bx	lr
   16640:	cmp	r1, #0
   16644:	beq	16850 <__assert_fail@plt+0x58f8>
   16648:	eor	ip, r0, r1
   1664c:	rsbmi	r1, r1, #0
   16650:	subs	r2, r1, #1
   16654:	beq	1681c <__assert_fail@plt+0x58c4>
   16658:	movs	r3, r0
   1665c:	rsbmi	r3, r0, #0
   16660:	cmp	r3, r1
   16664:	bls	16828 <__assert_fail@plt+0x58d0>
   16668:	tst	r1, r2
   1666c:	beq	16838 <__assert_fail@plt+0x58e0>
   16670:	clz	r2, r3
   16674:	clz	r0, r1
   16678:	sub	r2, r0, r2
   1667c:	rsbs	r2, r2, #31
   16680:	addne	r2, r2, r2, lsl #1
   16684:	mov	r0, #0
   16688:	addne	pc, pc, r2, lsl #2
   1668c:	nop			; (mov r0, r0)
   16690:	cmp	r3, r1, lsl #31
   16694:	adc	r0, r0, r0
   16698:	subcs	r3, r3, r1, lsl #31
   1669c:	cmp	r3, r1, lsl #30
   166a0:	adc	r0, r0, r0
   166a4:	subcs	r3, r3, r1, lsl #30
   166a8:	cmp	r3, r1, lsl #29
   166ac:	adc	r0, r0, r0
   166b0:	subcs	r3, r3, r1, lsl #29
   166b4:	cmp	r3, r1, lsl #28
   166b8:	adc	r0, r0, r0
   166bc:	subcs	r3, r3, r1, lsl #28
   166c0:	cmp	r3, r1, lsl #27
   166c4:	adc	r0, r0, r0
   166c8:	subcs	r3, r3, r1, lsl #27
   166cc:	cmp	r3, r1, lsl #26
   166d0:	adc	r0, r0, r0
   166d4:	subcs	r3, r3, r1, lsl #26
   166d8:	cmp	r3, r1, lsl #25
   166dc:	adc	r0, r0, r0
   166e0:	subcs	r3, r3, r1, lsl #25
   166e4:	cmp	r3, r1, lsl #24
   166e8:	adc	r0, r0, r0
   166ec:	subcs	r3, r3, r1, lsl #24
   166f0:	cmp	r3, r1, lsl #23
   166f4:	adc	r0, r0, r0
   166f8:	subcs	r3, r3, r1, lsl #23
   166fc:	cmp	r3, r1, lsl #22
   16700:	adc	r0, r0, r0
   16704:	subcs	r3, r3, r1, lsl #22
   16708:	cmp	r3, r1, lsl #21
   1670c:	adc	r0, r0, r0
   16710:	subcs	r3, r3, r1, lsl #21
   16714:	cmp	r3, r1, lsl #20
   16718:	adc	r0, r0, r0
   1671c:	subcs	r3, r3, r1, lsl #20
   16720:	cmp	r3, r1, lsl #19
   16724:	adc	r0, r0, r0
   16728:	subcs	r3, r3, r1, lsl #19
   1672c:	cmp	r3, r1, lsl #18
   16730:	adc	r0, r0, r0
   16734:	subcs	r3, r3, r1, lsl #18
   16738:	cmp	r3, r1, lsl #17
   1673c:	adc	r0, r0, r0
   16740:	subcs	r3, r3, r1, lsl #17
   16744:	cmp	r3, r1, lsl #16
   16748:	adc	r0, r0, r0
   1674c:	subcs	r3, r3, r1, lsl #16
   16750:	cmp	r3, r1, lsl #15
   16754:	adc	r0, r0, r0
   16758:	subcs	r3, r3, r1, lsl #15
   1675c:	cmp	r3, r1, lsl #14
   16760:	adc	r0, r0, r0
   16764:	subcs	r3, r3, r1, lsl #14
   16768:	cmp	r3, r1, lsl #13
   1676c:	adc	r0, r0, r0
   16770:	subcs	r3, r3, r1, lsl #13
   16774:	cmp	r3, r1, lsl #12
   16778:	adc	r0, r0, r0
   1677c:	subcs	r3, r3, r1, lsl #12
   16780:	cmp	r3, r1, lsl #11
   16784:	adc	r0, r0, r0
   16788:	subcs	r3, r3, r1, lsl #11
   1678c:	cmp	r3, r1, lsl #10
   16790:	adc	r0, r0, r0
   16794:	subcs	r3, r3, r1, lsl #10
   16798:	cmp	r3, r1, lsl #9
   1679c:	adc	r0, r0, r0
   167a0:	subcs	r3, r3, r1, lsl #9
   167a4:	cmp	r3, r1, lsl #8
   167a8:	adc	r0, r0, r0
   167ac:	subcs	r3, r3, r1, lsl #8
   167b0:	cmp	r3, r1, lsl #7
   167b4:	adc	r0, r0, r0
   167b8:	subcs	r3, r3, r1, lsl #7
   167bc:	cmp	r3, r1, lsl #6
   167c0:	adc	r0, r0, r0
   167c4:	subcs	r3, r3, r1, lsl #6
   167c8:	cmp	r3, r1, lsl #5
   167cc:	adc	r0, r0, r0
   167d0:	subcs	r3, r3, r1, lsl #5
   167d4:	cmp	r3, r1, lsl #4
   167d8:	adc	r0, r0, r0
   167dc:	subcs	r3, r3, r1, lsl #4
   167e0:	cmp	r3, r1, lsl #3
   167e4:	adc	r0, r0, r0
   167e8:	subcs	r3, r3, r1, lsl #3
   167ec:	cmp	r3, r1, lsl #2
   167f0:	adc	r0, r0, r0
   167f4:	subcs	r3, r3, r1, lsl #2
   167f8:	cmp	r3, r1, lsl #1
   167fc:	adc	r0, r0, r0
   16800:	subcs	r3, r3, r1, lsl #1
   16804:	cmp	r3, r1
   16808:	adc	r0, r0, r0
   1680c:	subcs	r3, r3, r1
   16810:	cmp	ip, #0
   16814:	rsbmi	r0, r0, #0
   16818:	bx	lr
   1681c:	teq	ip, r0
   16820:	rsbmi	r0, r0, #0
   16824:	bx	lr
   16828:	movcc	r0, #0
   1682c:	asreq	r0, ip, #31
   16830:	orreq	r0, r0, #1
   16834:	bx	lr
   16838:	clz	r2, r1
   1683c:	rsb	r2, r2, #31
   16840:	cmp	ip, #0
   16844:	lsr	r0, r3, r2
   16848:	rsbmi	r0, r0, #0
   1684c:	bx	lr
   16850:	cmp	r0, #0
   16854:	mvngt	r0, #-2147483648	; 0x80000000
   16858:	movlt	r0, #-2147483648	; 0x80000000
   1685c:	b	16990 <__assert_fail@plt+0x5a38>
   16860:	cmp	r1, #0
   16864:	beq	16850 <__assert_fail@plt+0x58f8>
   16868:	push	{r0, r1, lr}
   1686c:	bl	16648 <__assert_fail@plt+0x56f0>
   16870:	pop	{r1, r2, lr}
   16874:	mul	r3, r2, r0
   16878:	sub	r1, r1, r3
   1687c:	bx	lr
   16880:	cmp	r3, #0
   16884:	cmpeq	r2, #0
   16888:	bne	168ac <__assert_fail@plt+0x5954>
   1688c:	cmp	r1, #0
   16890:	movlt	r1, #-2147483648	; 0x80000000
   16894:	movlt	r0, #0
   16898:	blt	168a8 <__assert_fail@plt+0x5950>
   1689c:	cmpeq	r0, #0
   168a0:	mvnne	r1, #-2147483648	; 0x80000000
   168a4:	mvnne	r0, #0
   168a8:	b	16990 <__assert_fail@plt+0x5a38>
   168ac:	sub	sp, sp, #8
   168b0:	push	{sp, lr}
   168b4:	cmp	r1, #0
   168b8:	blt	168d8 <__assert_fail@plt+0x5980>
   168bc:	cmp	r3, #0
   168c0:	blt	1690c <__assert_fail@plt+0x59b4>
   168c4:	bl	169a0 <__assert_fail@plt+0x5a48>
   168c8:	ldr	lr, [sp, #4]
   168cc:	add	sp, sp, #8
   168d0:	pop	{r2, r3}
   168d4:	bx	lr
   168d8:	rsbs	r0, r0, #0
   168dc:	sbc	r1, r1, r1, lsl #1
   168e0:	cmp	r3, #0
   168e4:	blt	16930 <__assert_fail@plt+0x59d8>
   168e8:	bl	169a0 <__assert_fail@plt+0x5a48>
   168ec:	ldr	lr, [sp, #4]
   168f0:	add	sp, sp, #8
   168f4:	pop	{r2, r3}
   168f8:	rsbs	r0, r0, #0
   168fc:	sbc	r1, r1, r1, lsl #1
   16900:	rsbs	r2, r2, #0
   16904:	sbc	r3, r3, r3, lsl #1
   16908:	bx	lr
   1690c:	rsbs	r2, r2, #0
   16910:	sbc	r3, r3, r3, lsl #1
   16914:	bl	169a0 <__assert_fail@plt+0x5a48>
   16918:	ldr	lr, [sp, #4]
   1691c:	add	sp, sp, #8
   16920:	pop	{r2, r3}
   16924:	rsbs	r0, r0, #0
   16928:	sbc	r1, r1, r1, lsl #1
   1692c:	bx	lr
   16930:	rsbs	r2, r2, #0
   16934:	sbc	r3, r3, r3, lsl #1
   16938:	bl	169a0 <__assert_fail@plt+0x5a48>
   1693c:	ldr	lr, [sp, #4]
   16940:	add	sp, sp, #8
   16944:	pop	{r2, r3}
   16948:	rsbs	r2, r2, #0
   1694c:	sbc	r3, r3, r3, lsl #1
   16950:	bx	lr
   16954:	cmp	r3, #0
   16958:	cmpeq	r2, #0
   1695c:	bne	16974 <__assert_fail@plt+0x5a1c>
   16960:	cmp	r1, #0
   16964:	cmpeq	r0, #0
   16968:	mvnne	r1, #0
   1696c:	mvnne	r0, #0
   16970:	b	16990 <__assert_fail@plt+0x5a38>
   16974:	sub	sp, sp, #8
   16978:	push	{sp, lr}
   1697c:	bl	169a0 <__assert_fail@plt+0x5a48>
   16980:	ldr	lr, [sp, #4]
   16984:	add	sp, sp, #8
   16988:	pop	{r2, r3}
   1698c:	bx	lr
   16990:	push	{r1, lr}
   16994:	mov	r0, #8
   16998:	bl	10ce8 <raise@plt>
   1699c:	pop	{r1, pc}
   169a0:	cmp	r1, r3
   169a4:	push	{r4, r5, r6, r7, r8, r9, lr}
   169a8:	cmpeq	r0, r2
   169ac:	mov	r4, r0
   169b0:	mov	r5, r1
   169b4:	ldr	r9, [sp, #28]
   169b8:	movcc	r0, #0
   169bc:	movcc	r1, #0
   169c0:	bcc	16ab8 <__assert_fail@plt+0x5b60>
   169c4:	cmp	r3, #0
   169c8:	clzeq	ip, r2
   169cc:	clzne	ip, r3
   169d0:	addeq	ip, ip, #32
   169d4:	cmp	r5, #0
   169d8:	clzeq	r1, r4
   169dc:	addeq	r1, r1, #32
   169e0:	clzne	r1, r5
   169e4:	sub	ip, ip, r1
   169e8:	sub	lr, ip, #32
   169ec:	lsl	r7, r3, ip
   169f0:	rsb	r8, ip, #32
   169f4:	orr	r7, r7, r2, lsl lr
   169f8:	orr	r7, r7, r2, lsr r8
   169fc:	lsl	r6, r2, ip
   16a00:	cmp	r5, r7
   16a04:	cmpeq	r4, r6
   16a08:	movcc	r0, #0
   16a0c:	movcc	r1, #0
   16a10:	bcc	16a2c <__assert_fail@plt+0x5ad4>
   16a14:	mov	r3, #1
   16a18:	subs	r4, r4, r6
   16a1c:	lsl	r1, r3, lr
   16a20:	lsl	r0, r3, ip
   16a24:	orr	r1, r1, r3, lsr r8
   16a28:	sbc	r5, r5, r7
   16a2c:	cmp	ip, #0
   16a30:	beq	16ab8 <__assert_fail@plt+0x5b60>
   16a34:	lsrs	r3, r7, #1
   16a38:	rrx	r2, r6
   16a3c:	mov	r6, ip
   16a40:	b	16a64 <__assert_fail@plt+0x5b0c>
   16a44:	subs	r4, r4, r2
   16a48:	sbc	r5, r5, r3
   16a4c:	adds	r4, r4, r4
   16a50:	adc	r5, r5, r5
   16a54:	adds	r4, r4, #1
   16a58:	adc	r5, r5, #0
   16a5c:	subs	r6, r6, #1
   16a60:	beq	16a80 <__assert_fail@plt+0x5b28>
   16a64:	cmp	r5, r3
   16a68:	cmpeq	r4, r2
   16a6c:	bcs	16a44 <__assert_fail@plt+0x5aec>
   16a70:	adds	r4, r4, r4
   16a74:	adc	r5, r5, r5
   16a78:	subs	r6, r6, #1
   16a7c:	bne	16a64 <__assert_fail@plt+0x5b0c>
   16a80:	lsr	r6, r4, ip
   16a84:	lsr	r7, r5, ip
   16a88:	orr	r6, r6, r5, lsl r8
   16a8c:	adds	r2, r0, r4
   16a90:	orr	r6, r6, r5, lsr lr
   16a94:	adc	r3, r1, r5
   16a98:	lsl	r1, r7, ip
   16a9c:	orr	r1, r1, r6, lsl lr
   16aa0:	lsl	r0, r6, ip
   16aa4:	orr	r1, r1, r6, lsr r8
   16aa8:	subs	r0, r2, r0
   16aac:	mov	r4, r6
   16ab0:	mov	r5, r7
   16ab4:	sbc	r1, r3, r1
   16ab8:	cmp	r9, #0
   16abc:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   16ac0:	strd	r4, [r9]
   16ac4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   16ac8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16acc:	mov	r7, r0
   16ad0:	ldr	r6, [pc, #72]	; 16b20 <__assert_fail@plt+0x5bc8>
   16ad4:	ldr	r5, [pc, #72]	; 16b24 <__assert_fail@plt+0x5bcc>
   16ad8:	add	r6, pc, r6
   16adc:	add	r5, pc, r5
   16ae0:	sub	r6, r6, r5
   16ae4:	mov	r8, r1
   16ae8:	mov	r9, r2
   16aec:	bl	10cb0 <calloc@plt-0x20>
   16af0:	asrs	r6, r6, #2
   16af4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   16af8:	mov	r4, #0
   16afc:	add	r4, r4, #1
   16b00:	ldr	r3, [r5], #4
   16b04:	mov	r2, r9
   16b08:	mov	r1, r8
   16b0c:	mov	r0, r7
   16b10:	blx	r3
   16b14:	cmp	r6, r4
   16b18:	bne	16afc <__assert_fail@plt+0x5ba4>
   16b1c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16b20:	andeq	r1, r1, r0, lsr r4
   16b24:	andeq	r1, r1, r8, lsr #8
   16b28:	bx	lr
   16b2c:	ldr	r3, [pc, #12]	; 16b40 <__assert_fail@plt+0x5be8>
   16b30:	mov	r1, #0
   16b34:	add	r3, pc, r3
   16b38:	ldr	r2, [r3]
   16b3c:	b	10e98 <__cxa_atexit@plt>
   16b40:			; <UNDEFINED> instruction: 0x000115b4

Disassembly of section .fini:

00016b44 <.fini>:
   16b44:	push	{r3, lr}
   16b48:	pop	{r3, pc}
