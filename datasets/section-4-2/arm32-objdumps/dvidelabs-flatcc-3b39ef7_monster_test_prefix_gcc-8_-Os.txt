
../repos/dvidelabs-flatcc-3b39ef7/test/monster_test_prefix/monster_test_prefix:     file format elf32-littlearm


Disassembly of section .init:

00012268 <.init>:
   12268:	push	{r3, lr}
   1226c:	bl	1245c <_start@@Base+0x3c>
   12270:	pop	{r3, pc}

Disassembly of section .plt:

00012274 <free@plt-0x14>:
   12274:	push	{lr}		; (str lr, [sp, #-4]!)
   12278:	ldr	lr, [pc, #4]	; 12284 <free@plt-0x4>
   1227c:	add	lr, pc, lr
   12280:	ldr	pc, [lr, #8]!
   12284:	andeq	r5, r1, ip, ror sp

00012288 <free@plt>:
   12288:	add	ip, pc, #0, 12
   1228c:	add	ip, ip, #86016	; 0x15000
   12290:	ldr	pc, [ip, #3452]!	; 0xd7c

00012294 <memcpy@plt>:
   12294:	add	ip, pc, #0, 12
   12298:	add	ip, ip, #86016	; 0x15000
   1229c:	ldr	pc, [ip, #3444]!	; 0xd74

000122a0 <memcmp@plt>:
   122a0:	add	ip, pc, #0, 12
   122a4:	add	ip, ip, #86016	; 0x15000
   122a8:	ldr	pc, [ip, #3436]!	; 0xd6c

000122ac <realloc@plt>:
   122ac:	add	ip, pc, #0, 12
   122b0:	add	ip, ip, #86016	; 0x15000
   122b4:	ldr	pc, [ip, #3428]!	; 0xd64

000122b8 <malloc@plt>:
   122b8:	add	ip, pc, #0, 12
   122bc:	add	ip, ip, #86016	; 0x15000
   122c0:	ldr	pc, [ip, #3420]!	; 0xd5c

000122c4 <__libc_start_main@plt>:
   122c4:	add	ip, pc, #0, 12
   122c8:	add	ip, ip, #86016	; 0x15000
   122cc:	ldr	pc, [ip, #3412]!	; 0xd54

000122d0 <__gmon_start__@plt>:
   122d0:	add	ip, pc, #0, 12
   122d4:	add	ip, ip, #86016	; 0x15000
   122d8:	ldr	pc, [ip, #3404]!	; 0xd4c

000122dc <strlen@plt>:
   122dc:	add	ip, pc, #0, 12
   122e0:	add	ip, ip, #86016	; 0x15000
   122e4:	ldr	pc, [ip, #3396]!	; 0xd44

000122e8 <posix_memalign@plt>:
   122e8:	add	ip, pc, #0, 12
   122ec:	add	ip, ip, #86016	; 0x15000
   122f0:	ldr	pc, [ip, #3388]!	; 0xd3c

000122f4 <memset@plt>:
   122f4:	add	ip, pc, #0, 12
   122f8:	add	ip, ip, #86016	; 0x15000
   122fc:	ldr	pc, [ip, #3380]!	; 0xd34

00012300 <strncpy@plt>:
   12300:	add	ip, pc, #0, 12
   12304:	add	ip, ip, #86016	; 0x15000
   12308:	ldr	pc, [ip, #3372]!	; 0xd2c

0001230c <memchr@plt>:
   1230c:	add	ip, pc, #0, 12
   12310:	add	ip, ip, #86016	; 0x15000
   12314:	ldr	pc, [ip, #3364]!	; 0xd24

00012318 <abort@plt>:
   12318:	add	ip, pc, #0, 12
   1231c:	add	ip, ip, #86016	; 0x15000
   12320:	ldr	pc, [ip, #3356]!	; 0xd1c

00012324 <__assert_fail@plt>:
   12324:	add	ip, pc, #0, 12
   12328:	add	ip, ip, #86016	; 0x15000
   1232c:	ldr	pc, [ip, #3348]!	; 0xd14

Disassembly of section .text:

00012330 <main@@Base>:
   12330:	push	{r4, lr}
   12334:	sub	sp, sp, #240	; 0xf0
   12338:	add	r0, sp, #8
   1233c:	bl	13624 <flatcc_builder_init@@Base>
   12340:	mov	r3, #0
   12344:	ldr	r1, [pc, #184]	; 12404 <main@@Base+0xd4>
   12348:	add	r0, sp, #8
   1234c:	mov	r2, r3
   12350:	bl	13d04 <flatcc_builder_start_buffer@@Base>
   12354:	cmp	r0, #0
   12358:	bne	12368 <main@@Base+0x38>
   1235c:	mov	r1, #36	; 0x24
   12360:	add	r0, sp, #8
   12364:	bl	144e0 <flatcc_builder_start_table@@Base>
   12368:	ldr	r1, [pc, #152]	; 12408 <main@@Base+0xd8>
   1236c:	add	r0, sp, #8
   12370:	bl	15370 <flatcc_builder_create_string_str@@Base>
   12374:	subs	r4, r0, #0
   12378:	beq	12390 <main@@Base+0x60>
   1237c:	mov	r1, #3
   12380:	add	r0, sp, #8
   12384:	bl	15608 <flatcc_builder_table_add_offset@@Base>
   12388:	cmp	r0, #0
   1238c:	strne	r4, [r0]
   12390:	mov	r2, #1
   12394:	ldr	r1, [pc, #112]	; 1240c <main@@Base+0xdc>
   12398:	add	r0, sp, #8
   1239c:	bl	14a8c <flatcc_builder_check_required@@Base>
   123a0:	cmp	r0, #0
   123a4:	bne	123bc <main@@Base+0x8c>
   123a8:	ldr	r3, [pc, #96]	; 12410 <main@@Base+0xe0>
   123ac:	movw	r2, #2398	; 0x95e
   123b0:	ldr	r1, [pc, #92]	; 12414 <main@@Base+0xe4>
   123b4:	ldr	r0, [pc, #92]	; 12418 <main@@Base+0xe8>
   123b8:	bl	12324 <__assert_fail@plt>
   123bc:	add	r0, sp, #8
   123c0:	bl	14b08 <flatcc_builder_end_table@@Base>
   123c4:	mov	r1, r0
   123c8:	add	r0, sp, #8
   123cc:	bl	13da0 <flatcc_builder_end_buffer@@Base>
   123d0:	add	r1, sp, #4
   123d4:	add	r0, sp, #8
   123d8:	bl	159e8 <flatcc_builder_get_direct_buffer@@Base>
   123dc:	ldr	r3, [pc, #56]	; 1241c <main@@Base+0xec>
   123e0:	ldr	r2, [pc, #28]	; 12404 <main@@Base+0xd4>
   123e4:	ldr	r1, [sp, #4]
   123e8:	bl	167c4 <flatcc_verify_table_as_root@@Base>
   123ec:	mov	r4, r0
   123f0:	add	r0, sp, #8
   123f4:	bl	137a0 <flatcc_builder_clear@@Base>
   123f8:	mov	r0, r4
   123fc:	add	sp, sp, #240	; 0xf0
   12400:	pop	{r4, pc}
   12404:	andeq	r6, r1, r7, asr sp
   12408:	andeq	r6, r1, ip, asr sp
   1240c:	andeq	r6, r1, r4, lsr sp
   12410:	andeq	r6, r1, r8, lsr sp
   12414:	andeq	r6, r1, r6, ror #26
   12418:	andeq	r6, r1, ip, asr #27
   1241c:	andeq	r2, r1, r0, ror r7

00012420 <_start@@Base>:
   12420:	mov	fp, #0
   12424:	mov	lr, #0
   12428:	pop	{r1}		; (ldr r1, [sp], #4)
   1242c:	mov	r2, sp
   12430:	push	{r2}		; (str r2, [sp, #-4]!)
   12434:	push	{r0}		; (str r0, [sp, #-4]!)
   12438:	ldr	ip, [pc, #16]	; 12450 <_start@@Base+0x30>
   1243c:	push	{ip}		; (str ip, [sp, #-4]!)
   12440:	ldr	r0, [pc, #12]	; 12454 <_start@@Base+0x34>
   12444:	ldr	r3, [pc, #12]	; 12458 <_start@@Base+0x38>
   12448:	bl	122c4 <__libc_start_main@plt>
   1244c:	bl	12318 <abort@plt>
   12450:	andeq	r6, r1, r4, lsr #26
   12454:	andeq	r2, r1, r0, lsr r3
   12458:	andeq	r6, r1, r4, asr #25
   1245c:	ldr	r3, [pc, #20]	; 12478 <_start@@Base+0x58>
   12460:	ldr	r2, [pc, #20]	; 1247c <_start@@Base+0x5c>
   12464:	add	r3, pc, r3
   12468:	ldr	r2, [r3, r2]
   1246c:	cmp	r2, #0
   12470:	bxeq	lr
   12474:	b	122d0 <__gmon_start__@plt>
   12478:	muleq	r1, r4, fp
   1247c:	andeq	r0, r0, r4, asr #32
   12480:	ldr	r0, [pc, #24]	; 124a0 <_start@@Base+0x80>
   12484:	ldr	r3, [pc, #24]	; 124a4 <_start@@Base+0x84>
   12488:	cmp	r3, r0
   1248c:	bxeq	lr
   12490:	ldr	r3, [pc, #16]	; 124a8 <_start@@Base+0x88>
   12494:	cmp	r3, #0
   12498:	bxeq	lr
   1249c:	bx	r3
   124a0:	andeq	r8, r2, r0, asr r0
   124a4:	andeq	r8, r2, r0, asr r0
   124a8:	andeq	r0, r0, r0
   124ac:	ldr	r0, [pc, #36]	; 124d8 <_start@@Base+0xb8>
   124b0:	ldr	r1, [pc, #36]	; 124dc <_start@@Base+0xbc>
   124b4:	sub	r1, r1, r0
   124b8:	asr	r1, r1, #2
   124bc:	add	r1, r1, r1, lsr #31
   124c0:	asrs	r1, r1, #1
   124c4:	bxeq	lr
   124c8:	ldr	r3, [pc, #16]	; 124e0 <_start@@Base+0xc0>
   124cc:	cmp	r3, #0
   124d0:	bxeq	lr
   124d4:	bx	r3
   124d8:	andeq	r8, r2, r0, asr r0
   124dc:	andeq	r8, r2, r0, asr r0
   124e0:	andeq	r0, r0, r0
   124e4:	push	{r4, lr}
   124e8:	ldr	r4, [pc, #24]	; 12508 <_start@@Base+0xe8>
   124ec:	ldrb	r3, [r4]
   124f0:	cmp	r3, #0
   124f4:	popne	{r4, pc}
   124f8:	bl	12480 <_start@@Base+0x60>
   124fc:	mov	r3, #1
   12500:	strb	r3, [r4]
   12504:	pop	{r4, pc}
   12508:	andeq	r8, r2, r0, asr r0
   1250c:	b	124ac <_start@@Base+0x8c>
   12510:	mov	r0, #0
   12514:	bx	lr
   12518:	mov	r3, #4
   1251c:	mov	r1, #0
   12520:	mov	r2, r3
   12524:	b	16350 <flatcc_verify_field@@Base>
   12528:	mov	r3, #8
   1252c:	push	{r4, lr}
   12530:	mov	r1, #0
   12534:	mov	r2, r3
   12538:	mov	r4, r0
   1253c:	bl	16350 <flatcc_verify_field@@Base>
   12540:	cmp	r0, #0
   12544:	popne	{r4, pc}
   12548:	mov	r3, #4
   1254c:	mov	r0, r4
   12550:	pop	{r4, lr}
   12554:	mov	r2, r3
   12558:	mov	r1, #1
   1255c:	b	16350 <flatcc_verify_field@@Base>
   12560:	mov	r3, #1
   12564:	push	{r4, lr}
   12568:	mov	r1, #0
   1256c:	mov	r2, r3
   12570:	mov	r4, r0
   12574:	bl	16350 <flatcc_verify_field@@Base>
   12578:	cmp	r0, #0
   1257c:	popne	{r4, pc}
   12580:	mov	r3, #1
   12584:	mov	r0, r4
   12588:	mov	r2, r3
   1258c:	mov	r1, r3
   12590:	bl	16350 <flatcc_verify_field@@Base>
   12594:	cmp	r0, #0
   12598:	popne	{r4, pc}
   1259c:	mov	r3, #1
   125a0:	mov	r1, #2
   125a4:	mov	r2, r3
   125a8:	mov	r0, r4
   125ac:	bl	16350 <flatcc_verify_field@@Base>
   125b0:	cmp	r0, #0
   125b4:	popne	{r4, pc}
   125b8:	mov	r3, #1
   125bc:	mov	r0, r4
   125c0:	pop	{r4, lr}
   125c4:	mov	r2, r3
   125c8:	mov	r1, #3
   125cc:	b	16350 <flatcc_verify_field@@Base>
   125d0:	mov	r2, #0
   125d4:	push	{r4, lr}
   125d8:	mov	r4, r0
   125dc:	mov	r1, r2
   125e0:	bl	163b0 <flatcc_verify_string_field@@Base>
   125e4:	cmp	r0, #0
   125e8:	popne	{r4, pc}
   125ec:	mov	r3, #8
   125f0:	mov	r1, #1
   125f4:	mov	r2, r3
   125f8:	mov	r0, r4
   125fc:	bl	16350 <flatcc_verify_field@@Base>
   12600:	cmp	r0, #0
   12604:	popne	{r4, pc}
   12608:	mov	r3, #2
   1260c:	mov	r0, r4
   12610:	pop	{r4, lr}
   12614:	mov	r2, r3
   12618:	mov	r1, r3
   1261c:	b	16350 <flatcc_verify_field@@Base>
   12620:	mov	r2, #0
   12624:	push	{r4, lr}
   12628:	mov	r4, r0
   1262c:	mov	r1, r2
   12630:	bl	163b0 <flatcc_verify_string_field@@Base>
   12634:	subs	r2, r0, #0
   12638:	bne	12708 <_start@@Base+0x2e8>
   1263c:	mov	r3, #4
   12640:	mov	r1, #1
   12644:	mov	r2, r3
   12648:	mov	r0, r4
   1264c:	bl	16350 <flatcc_verify_field@@Base>
   12650:	subs	r2, r0, #0
   12654:	bne	12708 <_start@@Base+0x2e8>
   12658:	mov	r1, #2
   1265c:	mov	r0, r4
   12660:	bl	163b0 <flatcc_verify_string_field@@Base>
   12664:	subs	r2, r0, #0
   12668:	bne	12708 <_start@@Base+0x2e8>
   1266c:	mov	r3, #8
   12670:	mov	r1, #3
   12674:	mov	r2, r3
   12678:	mov	r0, r4
   1267c:	bl	16350 <flatcc_verify_field@@Base>
   12680:	subs	r2, r0, #0
   12684:	bne	12708 <_start@@Base+0x2e8>
   12688:	mov	r1, #4
   1268c:	mov	r0, r4
   12690:	bl	163b0 <flatcc_verify_string_field@@Base>
   12694:	subs	r2, r0, #0
   12698:	bne	12708 <_start@@Base+0x2e8>
   1269c:	mov	r3, #8
   126a0:	mov	r1, #5
   126a4:	mov	r2, r3
   126a8:	mov	r0, r4
   126ac:	bl	16350 <flatcc_verify_field@@Base>
   126b0:	subs	r2, r0, #0
   126b4:	bne	12708 <_start@@Base+0x2e8>
   126b8:	mov	r3, #4
   126bc:	mov	r1, #6
   126c0:	mov	r2, r3
   126c4:	mov	r0, r4
   126c8:	bl	16350 <flatcc_verify_field@@Base>
   126cc:	subs	r2, r0, #0
   126d0:	bne	12708 <_start@@Base+0x2e8>
   126d4:	mov	r3, #8
   126d8:	mov	r1, #7
   126dc:	mov	r2, r3
   126e0:	mov	r0, r4
   126e4:	bl	16350 <flatcc_verify_field@@Base>
   126e8:	subs	r2, r0, #0
   126ec:	bne	12708 <_start@@Base+0x2e8>
   126f0:	mov	r3, #4
   126f4:	mov	r0, r4
   126f8:	pop	{r4, lr}
   126fc:	mov	r2, r3
   12700:	mov	r1, #8
   12704:	b	16350 <flatcc_verify_field@@Base>
   12708:	mov	r0, r2
   1270c:	pop	{r4, pc}
   12710:	mov	r2, #0
   12714:	push	{r4, lr}
   12718:	mov	r4, r0
   1271c:	mov	r1, r2
   12720:	ldr	r3, [pc, #60]	; 12764 <_start@@Base+0x344>
   12724:	bl	164ec <flatcc_verify_table_field@@Base>
   12728:	subs	r2, r0, #0
   1272c:	bne	1275c <_start@@Base+0x33c>
   12730:	ldr	r3, [pc, #48]	; 12768 <_start@@Base+0x348>
   12734:	mov	r1, #1
   12738:	mov	r0, r4
   1273c:	bl	164ec <flatcc_verify_table_field@@Base>
   12740:	subs	r2, r0, #0
   12744:	bne	1275c <_start@@Base+0x33c>
   12748:	mov	r0, r4
   1274c:	ldr	r3, [pc, #24]	; 1276c <_start@@Base+0x34c>
   12750:	mov	r1, #2
   12754:	pop	{r4, lr}
   12758:	b	164ec <flatcc_verify_table_field@@Base>
   1275c:	mov	r0, r2
   12760:	pop	{r4, pc}
   12764:	andeq	r2, r1, r0, lsr #12
   12768:	andeq	r2, r1, r8, lsl #27
   1276c:	andeq	r2, r1, r8, lsr #10
   12770:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   12774:	mov	r2, #32
   12778:	mov	r3, #16
   1277c:	mov	r1, #0
   12780:	mov	r4, r0
   12784:	bl	16350 <flatcc_verify_field@@Base>
   12788:	subs	r2, r0, #0
   1278c:	bne	12b40 <_start@@Base+0x720>
   12790:	mov	r3, #2
   12794:	mov	r0, r4
   12798:	mov	r2, r3
   1279c:	mov	r1, r3
   127a0:	bl	16350 <flatcc_verify_field@@Base>
   127a4:	subs	r2, r0, #0
   127a8:	bne	12b40 <_start@@Base+0x720>
   127ac:	mov	r3, #2
   127b0:	mov	r1, #1
   127b4:	mov	r2, r3
   127b8:	mov	r0, r4
   127bc:	bl	16350 <flatcc_verify_field@@Base>
   127c0:	subs	r2, r0, #0
   127c4:	bne	12b40 <_start@@Base+0x720>
   127c8:	mov	r2, #1
   127cc:	mov	r1, #3
   127d0:	mov	r0, r4
   127d4:	bl	163b0 <flatcc_verify_string_field@@Base>
   127d8:	subs	r2, r0, #0
   127dc:	bne	12b40 <_start@@Base+0x720>
   127e0:	mov	r3, #1
   127e4:	mov	r1, #6
   127e8:	mov	r2, r3
   127ec:	mov	r0, r4
   127f0:	bl	16350 <flatcc_verify_field@@Base>
   127f4:	subs	r2, r0, #0
   127f8:	bne	12b40 <_start@@Base+0x720>
   127fc:	mov	r5, #1
   12800:	mvn	r6, #0
   12804:	mov	r3, r5
   12808:	mov	r1, #5
   1280c:	mov	r0, r4
   12810:	stm	sp, {r5, r6}
   12814:	bl	163e8 <flatcc_verify_vector_field@@Base>
   12818:	subs	r2, r0, #0
   1281c:	bne	12b40 <_start@@Base+0x720>
   12820:	ldr	r3, [pc, #804]	; 12b4c <_start@@Base+0x72c>
   12824:	mov	r1, #11
   12828:	mov	r0, r4
   1282c:	bl	16534 <flatcc_verify_table_vector_field@@Base>
   12830:	subs	r2, r0, #0
   12834:	bne	12b40 <_start@@Base+0x720>
   12838:	mov	r1, #10
   1283c:	mov	r0, r4
   12840:	bl	1643c <flatcc_verify_string_vector_field@@Base>
   12844:	subs	r2, r0, #0
   12848:	bne	12b40 <_start@@Base+0x720>
   1284c:	mov	r1, #28
   12850:	mov	r0, r4
   12854:	bl	1643c <flatcc_verify_string_vector_field@@Base>
   12858:	subs	r2, r0, #0
   1285c:	bne	12b40 <_start@@Base+0x720>
   12860:	mov	r3, r5
   12864:	mov	r1, #24
   12868:	stm	sp, {r5, r6}
   1286c:	mov	r0, r4
   12870:	bl	163e8 <flatcc_verify_vector_field@@Base>
   12874:	subs	r2, r0, #0
   12878:	bne	12b40 <_start@@Base+0x720>
   1287c:	mvn	r3, #-536870912	; 0xe0000000
   12880:	mov	r5, #4
   12884:	mov	r2, #0
   12888:	mov	r1, #29
   1288c:	mov	r0, r4
   12890:	str	r5, [sp]
   12894:	str	r3, [sp, #4]
   12898:	mov	r3, #8
   1289c:	bl	163e8 <flatcc_verify_vector_field@@Base>
   128a0:	subs	r2, r0, #0
   128a4:	bne	12b40 <_start@@Base+0x720>
   128a8:	ldr	r6, [pc, #668]	; 12b4c <_start@@Base+0x72c>
   128ac:	mov	r1, #12
   128b0:	mov	r0, r4
   128b4:	mov	r3, r6
   128b8:	bl	164ec <flatcc_verify_table_field@@Base>
   128bc:	subs	r2, r0, #0
   128c0:	bne	12b40 <_start@@Base+0x720>
   128c4:	ldr	r3, [pc, #644]	; 12b50 <_start@@Base+0x730>
   128c8:	mov	r1, #8
   128cc:	mov	r0, r4
   128d0:	bl	169d0 <flatcc_verify_union_field@@Base>
   128d4:	subs	r2, r0, #0
   128d8:	bne	12b40 <_start@@Base+0x720>
   128dc:	mvn	r8, #-1073741824	; 0xc0000000
   128e0:	mov	r7, #2
   128e4:	mov	r3, r5
   128e8:	mov	r1, #9
   128ec:	mov	r0, r4
   128f0:	stm	sp, {r7, r8}
   128f4:	bl	163e8 <flatcc_verify_vector_field@@Base>
   128f8:	subs	r2, r0, #0
   128fc:	bne	12b40 <_start@@Base+0x720>
   12900:	mov	r3, r5
   12904:	mov	r1, #31
   12908:	stm	sp, {r7, r8}
   1290c:	mov	r0, r4
   12910:	bl	163e8 <flatcc_verify_vector_field@@Base>
   12914:	subs	r2, r0, #0
   12918:	bne	12b40 <_start@@Base+0x720>
   1291c:	str	r6, [sp, #4]
   12920:	mov	r6, #1
   12924:	mov	r3, r2
   12928:	mov	r1, #13
   1292c:	mov	r0, r4
   12930:	str	r6, [sp]
   12934:	bl	168f4 <flatcc_verify_table_as_nested_root@@Base>
   12938:	subs	r2, r0, #0
   1293c:	bne	12b40 <_start@@Base+0x720>
   12940:	ldr	r3, [pc, #524]	; 12b54 <_start@@Base+0x734>
   12944:	mov	r1, #14
   12948:	mov	r0, r4
   1294c:	bl	164ec <flatcc_verify_table_field@@Base>
   12950:	subs	r2, r0, #0
   12954:	bne	12b40 <_start@@Base+0x720>
   12958:	mov	r2, r6
   1295c:	mov	r3, r6
   12960:	mov	r1, #15
   12964:	mov	r0, r4
   12968:	bl	16350 <flatcc_verify_field@@Base>
   1296c:	subs	r2, r0, #0
   12970:	bne	12b40 <_start@@Base+0x720>
   12974:	mov	r2, r5
   12978:	mov	r3, r5
   1297c:	mov	r1, #16
   12980:	mov	r0, r4
   12984:	bl	16350 <flatcc_verify_field@@Base>
   12988:	subs	r2, r0, #0
   1298c:	bne	12b40 <_start@@Base+0x720>
   12990:	mov	r2, r5
   12994:	mov	r3, r5
   12998:	mov	r1, #17
   1299c:	mov	r0, r4
   129a0:	bl	16350 <flatcc_verify_field@@Base>
   129a4:	subs	r2, r0, #0
   129a8:	bne	12b40 <_start@@Base+0x720>
   129ac:	mov	r3, #8
   129b0:	mov	r1, #18
   129b4:	mov	r2, r3
   129b8:	mov	r0, r4
   129bc:	bl	16350 <flatcc_verify_field@@Base>
   129c0:	subs	r2, r0, #0
   129c4:	bne	12b40 <_start@@Base+0x720>
   129c8:	mov	r3, #8
   129cc:	mov	r1, #19
   129d0:	mov	r2, r3
   129d4:	mov	r0, r4
   129d8:	bl	16350 <flatcc_verify_field@@Base>
   129dc:	subs	r2, r0, #0
   129e0:	bne	12b40 <_start@@Base+0x720>
   129e4:	mov	r2, r5
   129e8:	mov	r3, r5
   129ec:	mov	r1, #20
   129f0:	mov	r0, r4
   129f4:	bl	16350 <flatcc_verify_field@@Base>
   129f8:	subs	r2, r0, #0
   129fc:	bne	12b40 <_start@@Base+0x720>
   12a00:	mov	r2, r5
   12a04:	mov	r3, r5
   12a08:	mov	r1, #21
   12a0c:	mov	r0, r4
   12a10:	bl	16350 <flatcc_verify_field@@Base>
   12a14:	subs	r2, r0, #0
   12a18:	bne	12b40 <_start@@Base+0x720>
   12a1c:	mov	r3, #8
   12a20:	mov	r1, #22
   12a24:	mov	r2, r3
   12a28:	mov	r0, r4
   12a2c:	bl	16350 <flatcc_verify_field@@Base>
   12a30:	subs	r2, r0, #0
   12a34:	bne	12b40 <_start@@Base+0x720>
   12a38:	mov	r3, #8
   12a3c:	mov	r1, #23
   12a40:	mov	r2, r3
   12a44:	mov	r0, r4
   12a48:	bl	16350 <flatcc_verify_field@@Base>
   12a4c:	subs	r2, r0, #0
   12a50:	bne	12b40 <_start@@Base+0x720>
   12a54:	mov	r2, r5
   12a58:	mov	r3, r5
   12a5c:	mov	r1, #25
   12a60:	mov	r0, r4
   12a64:	bl	16350 <flatcc_verify_field@@Base>
   12a68:	subs	r2, r0, #0
   12a6c:	bne	12b40 <_start@@Base+0x720>
   12a70:	mov	r2, r5
   12a74:	mov	r3, r5
   12a78:	mov	r1, #26
   12a7c:	mov	r0, r4
   12a80:	bl	16350 <flatcc_verify_field@@Base>
   12a84:	subs	r2, r0, #0
   12a88:	bne	12b40 <_start@@Base+0x720>
   12a8c:	mov	r2, r5
   12a90:	mov	r3, r5
   12a94:	mov	r1, #27
   12a98:	mov	r0, r4
   12a9c:	bl	16350 <flatcc_verify_field@@Base>
   12aa0:	subs	r2, r0, #0
   12aa4:	bne	12b40 <_start@@Base+0x720>
   12aa8:	mvn	r3, #0
   12aac:	mov	r1, #30
   12ab0:	str	r6, [sp]
   12ab4:	mov	r0, r4
   12ab8:	str	r3, [sp, #4]
   12abc:	mov	r3, r6
   12ac0:	bl	163e8 <flatcc_verify_vector_field@@Base>
   12ac4:	subs	r2, r0, #0
   12ac8:	bne	12b40 <_start@@Base+0x720>
   12acc:	mov	r5, #8
   12ad0:	mvn	r6, #-536870912	; 0xe0000000
   12ad4:	mov	r2, #0
   12ad8:	mov	r3, r5
   12adc:	mov	r1, #32
   12ae0:	mov	r0, r4
   12ae4:	stm	sp, {r5, r6}
   12ae8:	bl	163e8 <flatcc_verify_vector_field@@Base>
   12aec:	subs	r2, r0, #0
   12af0:	bne	12b40 <_start@@Base+0x720>
   12af4:	mov	r3, r5
   12af8:	mov	r1, #33	; 0x21
   12afc:	stm	sp, {r5, r6}
   12b00:	mov	r0, r4
   12b04:	bl	163e8 <flatcc_verify_vector_field@@Base>
   12b08:	subs	r2, r0, #0
   12b0c:	bne	12b40 <_start@@Base+0x720>
   12b10:	ldr	r3, [pc, #64]	; 12b58 <_start@@Base+0x738>
   12b14:	mov	r1, #34	; 0x22
   12b18:	mov	r0, r4
   12b1c:	bl	164ec <flatcc_verify_table_field@@Base>
   12b20:	subs	r2, r0, #0
   12b24:	bne	12b40 <_start@@Base+0x720>
   12b28:	ldr	r3, [pc, #44]	; 12b5c <_start@@Base+0x73c>
   12b2c:	mov	r1, #35	; 0x23
   12b30:	mov	r0, r4
   12b34:	add	sp, sp, #8
   12b38:	pop	{r4, r5, r6, r7, r8, lr}
   12b3c:	b	164ec <flatcc_verify_table_field@@Base>
   12b40:	mov	r0, r2
   12b44:	add	sp, sp, #8
   12b48:	pop	{r4, r5, r6, r7, r8, pc}
   12b4c:	andeq	r2, r1, r0, ror r7
   12b50:	ldrdeq	r2, [r1], -r8
   12b54:	ldrdeq	r2, [r1], -r0
   12b58:	andeq	r2, r1, r0, lsl r5
   12b5c:	andeq	r2, r1, r0, ror #22
   12b60:	push	{r0, r1, r4, r5, r6, lr}
   12b64:	mov	r4, #1
   12b68:	mvn	r6, #0
   12b6c:	mov	r2, #0
   12b70:	mov	r3, r4
   12b74:	mov	r1, r2
   12b78:	mov	r5, r0
   12b7c:	stm	sp, {r4, r6}
   12b80:	bl	163e8 <flatcc_verify_vector_field@@Base>
   12b84:	cmp	r0, #0
   12b88:	bne	12bcc <_start@@Base+0x7ac>
   12b8c:	mov	r2, r0
   12b90:	mov	r3, r4
   12b94:	stm	sp, {r4, r6}
   12b98:	mov	r1, r4
   12b9c:	mov	r0, r5
   12ba0:	bl	163e8 <flatcc_verify_vector_field@@Base>
   12ba4:	cmp	r0, #0
   12ba8:	bne	12bcc <_start@@Base+0x7ac>
   12bac:	ldr	r3, [pc, #32]	; 12bd4 <_start@@Base+0x7b4>
   12bb0:	mov	r2, r0
   12bb4:	mov	r1, #2
   12bb8:	str	r4, [sp]
   12bbc:	str	r3, [sp, #4]
   12bc0:	mov	r3, r0
   12bc4:	mov	r0, r5
   12bc8:	bl	168f4 <flatcc_verify_table_as_nested_root@@Base>
   12bcc:	add	sp, sp, #8
   12bd0:	pop	{r4, r5, r6, pc}
   12bd4:	andeq	r2, r1, r0, ror r7
   12bd8:	ldrb	r3, [r0, #12]
   12bdc:	sub	r3, r3, #1
   12be0:	cmp	r3, #3
   12be4:	ldrls	pc, [pc, r3, lsl #2]
   12be8:	b	12c1c <_start@@Base+0x7fc>
   12bec:	strdeq	r2, [r1], -ip
   12bf0:	andeq	r2, r1, r4, lsl #24
   12bf4:	andeq	r2, r1, ip, lsl #24
   12bf8:	andeq	r2, r1, r4, lsl ip
   12bfc:	ldr	r1, [pc, #32]	; 12c24 <_start@@Base+0x804>
   12c00:	b	16628 <flatcc_verify_union_table@@Base>
   12c04:	ldr	r1, [pc, #28]	; 12c28 <_start@@Base+0x808>
   12c08:	b	12c00 <_start@@Base+0x7e0>
   12c0c:	ldr	r1, [pc, #24]	; 12c2c <_start@@Base+0x80c>
   12c10:	b	12c00 <_start@@Base+0x7e0>
   12c14:	ldr	r1, [pc, #20]	; 12c30 <_start@@Base+0x810>
   12c18:	b	12c00 <_start@@Base+0x7e0>
   12c1c:	mov	r0, #0
   12c20:	bx	lr
   12c24:	andeq	r2, r1, r0, ror r7
   12c28:	andeq	r2, r1, r0, ror #10
   12c2c:	andeq	r2, r1, r0, lsl #27
   12c30:	andeq	r2, r1, r4, lsr ip
   12c34:	mov	r2, #0
   12c38:	push	{r4, lr}
   12c3c:	mov	r4, r0
   12c40:	mov	r1, r2
   12c44:	ldr	r3, [pc, #60]	; 12c88 <_start@@Base+0x868>
   12c48:	bl	164ec <flatcc_verify_table_field@@Base>
   12c4c:	subs	r2, r0, #0
   12c50:	bne	12c80 <_start@@Base+0x860>
   12c54:	ldr	r3, [pc, #48]	; 12c8c <_start@@Base+0x86c>
   12c58:	mov	r1, #1
   12c5c:	mov	r0, r4
   12c60:	bl	164ec <flatcc_verify_table_field@@Base>
   12c64:	subs	r2, r0, #0
   12c68:	bne	12c80 <_start@@Base+0x860>
   12c6c:	mov	r0, r4
   12c70:	ldr	r3, [pc, #24]	; 12c90 <_start@@Base+0x870>
   12c74:	mov	r1, #3
   12c78:	pop	{r4, lr}
   12c7c:	b	16adc <flatcc_verify_union_vector_field@@Base>
   12c80:	mov	r0, r2
   12c84:	pop	{r4, pc}
   12c88:	andeq	r2, r1, r0, lsl r7
   12c8c:	muleq	r1, r4, ip
   12c90:	ldrdeq	r2, [r1], -r8
   12c94:	push	{r4, lr}
   12c98:	mov	r2, #0
   12c9c:	mov	r1, #1
   12ca0:	mov	r4, r0
   12ca4:	ldr	r3, [pc, #108]	; 12d18 <_start@@Base+0x8f8>
   12ca8:	bl	169d0 <flatcc_verify_union_field@@Base>
   12cac:	subs	r2, r0, #0
   12cb0:	bne	12d10 <_start@@Base+0x8f0>
   12cb4:	ldr	r3, [pc, #92]	; 12d18 <_start@@Base+0x8f8>
   12cb8:	mov	r1, #3
   12cbc:	mov	r0, r4
   12cc0:	bl	169d0 <flatcc_verify_union_field@@Base>
   12cc4:	subs	r2, r0, #0
   12cc8:	bne	12d10 <_start@@Base+0x8f0>
   12ccc:	ldr	r3, [pc, #68]	; 12d18 <_start@@Base+0x8f8>
   12cd0:	mov	r1, #5
   12cd4:	mov	r0, r4
   12cd8:	bl	169d0 <flatcc_verify_union_field@@Base>
   12cdc:	subs	r2, r0, #0
   12ce0:	bne	12d10 <_start@@Base+0x8f0>
   12ce4:	ldr	r3, [pc, #44]	; 12d18 <_start@@Base+0x8f8>
   12ce8:	mov	r1, #7
   12cec:	mov	r0, r4
   12cf0:	bl	169d0 <flatcc_verify_union_field@@Base>
   12cf4:	subs	r2, r0, #0
   12cf8:	bne	12d10 <_start@@Base+0x8f0>
   12cfc:	mov	r0, r4
   12d00:	ldr	r3, [pc, #16]	; 12d18 <_start@@Base+0x8f8>
   12d04:	mov	r1, #9
   12d08:	pop	{r4, lr}
   12d0c:	b	16adc <flatcc_verify_union_vector_field@@Base>
   12d10:	mov	r0, r2
   12d14:	pop	{r4, pc}
   12d18:	andeq	r2, r1, ip, lsl sp
   12d1c:	ldrb	r3, [r0, #12]
   12d20:	mov	r2, r0
   12d24:	cmp	r3, #10
   12d28:	bhi	12d50 <_start@@Base+0x930>
   12d2c:	cmp	r3, #9
   12d30:	bcs	12d70 <_start@@Base+0x950>
   12d34:	cmp	r3, #2
   12d38:	beq	12d68 <_start@@Base+0x948>
   12d3c:	cmp	r3, #8
   12d40:	moveq	r2, #2
   12d44:	beq	12d74 <_start@@Base+0x954>
   12d48:	mov	r0, #0
   12d4c:	bx	lr
   12d50:	cmp	r3, #11
   12d54:	beq	12d60 <_start@@Base+0x940>
   12d58:	cmp	r3, #255	; 0xff
   12d5c:	bne	12d48 <_start@@Base+0x928>
   12d60:	mov	r0, r2
   12d64:	b	16674 <flatcc_verify_union_string@@Base>
   12d68:	ldr	r1, [pc, #12]	; 12d7c <_start@@Base+0x95c>
   12d6c:	b	16628 <flatcc_verify_union_table@@Base>
   12d70:	mov	r2, #4
   12d74:	mov	r1, r2
   12d78:	b	16650 <flatcc_verify_union_struct@@Base>
   12d7c:	andeq	r2, r1, r8, lsl r5
   12d80:	mov	r0, #0
   12d84:	bx	lr
   12d88:	mov	r3, #8
   12d8c:	push	{r4, lr}
   12d90:	mov	r1, #0
   12d94:	mov	r2, r3
   12d98:	mov	r4, r0
   12d9c:	bl	16350 <flatcc_verify_field@@Base>
   12da0:	cmp	r0, #0
   12da4:	popne	{r4, pc}
   12da8:	mov	r3, #4
   12dac:	mov	r0, r4
   12db0:	pop	{r4, lr}
   12db4:	mov	r2, r3
   12db8:	mov	r1, #1
   12dbc:	b	16350 <flatcc_verify_field@@Base>
   12dc0:	ldr	ip, [r0, #28]
   12dc4:	ldrd	r2, [r0, #60]	; 0x3c
   12dc8:	sub	r3, r3, ip
   12dcc:	add	r2, r2, ip
   12dd0:	cmp	r3, r1
   12dd4:	strls	r3, [r0, #24]
   12dd8:	strhi	r1, [r0, #24]
   12ddc:	ldr	r3, [r0, #32]
   12de0:	str	r2, [r0, #16]
   12de4:	str	r1, [r3, #4]
   12de8:	bx	lr
   12dec:	push	{r0, r1, r4, r5, r6, lr}
   12df0:	mov	r6, r2
   12df4:	mov	r3, #1
   12df8:	mov	r4, r0
   12dfc:	ldr	r2, [r0, #28]
   12e00:	str	r3, [sp]
   12e04:	ldr	r5, [r0, #48]	; 0x30
   12e08:	add	r2, r1, r2
   12e0c:	add	r1, r0, #60	; 0x3c
   12e10:	ldr	r0, [r0, #40]	; 0x28
   12e14:	blx	r5
   12e18:	subs	r5, r0, #0
   12e1c:	mvnne	r5, #0
   12e20:	bne	12e30 <_start@@Base+0xa10>
   12e24:	mov	r1, r6
   12e28:	mov	r0, r4
   12e2c:	bl	12dc0 <_start@@Base+0x9a0>
   12e30:	mov	r0, r5
   12e34:	add	sp, sp, #8
   12e38:	pop	{r4, r5, r6, pc}
   12e3c:	push	{r4, r5, r6, lr}
   12e40:	mov	r4, r0
   12e44:	ldr	r5, [r0, #20]
   12e48:	ldr	r3, [r0, #24]
   12e4c:	add	r1, r5, r1
   12e50:	cmp	r1, r3
   12e54:	str	r1, [r0, #20]
   12e58:	bcs	12e68 <_start@@Base+0xa48>
   12e5c:	ldr	r0, [r4, #16]
   12e60:	add	r0, r0, r5
   12e64:	pop	{r4, r5, r6, pc}
   12e68:	mvn	r2, #3
   12e6c:	add	r1, r1, #1
   12e70:	bl	12dec <_start@@Base+0x9cc>
   12e74:	cmp	r0, #0
   12e78:	beq	12e5c <_start@@Base+0xa3c>
   12e7c:	mov	r0, #0
   12e80:	pop	{r4, r5, r6, pc}
   12e84:	push	{r4, lr}
   12e88:	mov	r1, #0
   12e8c:	mov	r4, r0
   12e90:	ldr	r2, [r0, #20]
   12e94:	ldr	r0, [r0, #16]
   12e98:	bl	122f4 <memset@plt>
   12e9c:	ldr	r3, [r4, #32]
   12ea0:	mov	r0, r4
   12ea4:	ldmib	r3, {r1, r2}
   12ea8:	str	r2, [r4, #20]
   12eac:	ldr	r2, [r3]
   12eb0:	str	r2, [r4, #28]
   12eb4:	bl	12dc0 <_start@@Base+0x9a0>
   12eb8:	ldrh	r3, [r4, #130]	; 0x82
   12ebc:	ldrh	r2, [r4, #128]	; 0x80
   12ec0:	cmp	r2, r3
   12ec4:	strhcc	r3, [r4, #128]	; 0x80
   12ec8:	ldr	r3, [r4, #32]
   12ecc:	ldrh	r2, [r3, #12]
   12ed0:	sub	r3, r3, #36	; 0x24
   12ed4:	str	r3, [r4, #32]
   12ed8:	ldr	r3, [r4, #156]	; 0x9c
   12edc:	strh	r2, [r4, #130]	; 0x82
   12ee0:	sub	r3, r3, #1
   12ee4:	str	r3, [r4, #156]	; 0x9c
   12ee8:	pop	{r4, pc}
   12eec:	ldr	r3, [r0, #20]
   12ef0:	mov	r2, r1
   12ef4:	mov	r1, #0
   12ef8:	sub	r3, r3, r2
   12efc:	str	r3, [r0, #20]
   12f00:	ldr	r0, [r0, #16]
   12f04:	add	r0, r0, r3
   12f08:	b	122f4 <memset@plt>
   12f0c:	push	{r4, r5, r6, lr}
   12f10:	mov	r6, r1
   12f14:	mov	r1, r2
   12f18:	mov	r4, r2
   12f1c:	bl	12e3c <_start@@Base+0xa1c>
   12f20:	subs	r5, r0, #0
   12f24:	beq	12f34 <_start@@Base+0xb14>
   12f28:	mov	r2, r4
   12f2c:	mov	r1, r6
   12f30:	bl	12294 <memcpy@plt>
   12f34:	mov	r0, r5
   12f38:	pop	{r4, r5, r6, pc}
   12f3c:	push	{r0, r1, r4, lr}
   12f40:	cmp	r0, #4
   12f44:	mov	r4, #0
   12f48:	mov	r2, r1
   12f4c:	movcs	r1, r0
   12f50:	movcc	r1, #4
   12f54:	add	r0, sp, #4
   12f58:	str	r4, [sp, #4]
   12f5c:	bl	122e8 <posix_memalign@plt>
   12f60:	cmp	r0, r4
   12f64:	beq	12f7c <_start@@Base+0xb5c>
   12f68:	ldr	r0, [sp, #4]
   12f6c:	cmp	r0, r4
   12f70:	beq	12f7c <_start@@Base+0xb5c>
   12f74:	bl	12288 <free@plt>
   12f78:	str	r4, [sp, #4]
   12f7c:	ldr	r0, [sp, #4]
   12f80:	add	sp, sp, #8
   12f84:	pop	{r4, pc}

00012f88 <flatcc_builder_default_alloc@@Base>:
   12f88:	push	{r4, r5, r6, r7, r8, lr}
   12f8c:	subs	r6, r2, #0
   12f90:	mov	r5, r1
   12f94:	bne	12fb8 <flatcc_builder_default_alloc@@Base+0x30>
   12f98:	ldr	r0, [r1]
   12f9c:	cmp	r0, #0
   12fa0:	popeq	{r4, r5, r6, r7, r8, pc}
   12fa4:	bl	12288 <free@plt>
   12fa8:	str	r6, [r5]
   12fac:	str	r6, [r5, #4]
   12fb0:	mov	r0, #0
   12fb4:	pop	{r4, r5, r6, r7, r8, pc}
   12fb8:	ldr	r2, [sp, #24]
   12fbc:	mov	r7, r3
   12fc0:	sub	r2, r2, #1
   12fc4:	cmp	r2, #6
   12fc8:	ldrls	pc, [pc, r2, lsl #2]
   12fcc:	b	13060 <flatcc_builder_default_alloc@@Base+0xd8>
   12fd0:	andeq	r3, r1, r8, rrx
   12fd4:	andeq	r3, r1, r0, rrx
   12fd8:	andeq	r3, r1, r0, rrx
   12fdc:	andeq	r3, r1, r0, asr r0
   12fe0:	andeq	r2, r1, ip, ror #31
   12fe4:	andeq	r3, r1, r0, rrx
   12fe8:	andeq	r3, r1, r8, asr r0
   12fec:	mov	r4, r6
   12ff0:	cmp	r6, r4
   12ff4:	bhi	13070 <flatcc_builder_default_alloc@@Base+0xe8>
   12ff8:	ldr	r2, [r5, #4]
   12ffc:	cmp	r6, r2
   13000:	bhi	1300c <flatcc_builder_default_alloc@@Base+0x84>
   13004:	cmp	r4, r2, lsr #1
   13008:	bls	12fb0 <flatcc_builder_default_alloc@@Base+0x28>
   1300c:	mov	r1, r4
   13010:	ldr	r0, [r5]
   13014:	bl	122ac <realloc@plt>
   13018:	subs	r6, r0, #0
   1301c:	beq	13078 <flatcc_builder_default_alloc@@Base+0xf0>
   13020:	cmp	r7, #0
   13024:	beq	13044 <flatcc_builder_default_alloc@@Base+0xbc>
   13028:	ldr	r0, [r5, #4]
   1302c:	cmp	r4, r0
   13030:	bls	13044 <flatcc_builder_default_alloc@@Base+0xbc>
   13034:	sub	r2, r4, r0
   13038:	mov	r1, #0
   1303c:	add	r0, r6, r0
   13040:	bl	122f4 <memset@plt>
   13044:	str	r6, [r5]
   13048:	str	r4, [r5, #4]
   1304c:	b	12fb0 <flatcc_builder_default_alloc@@Base+0x28>
   13050:	mov	r4, #288	; 0x120
   13054:	b	12ff0 <flatcc_builder_default_alloc@@Base+0x68>
   13058:	mov	r4, #64	; 0x40
   1305c:	b	12ff0 <flatcc_builder_default_alloc@@Base+0x68>
   13060:	mov	r4, #32
   13064:	b	12ff0 <flatcc_builder_default_alloc@@Base+0x68>
   13068:	mov	r4, #256	; 0x100
   1306c:	b	12ff0 <flatcc_builder_default_alloc@@Base+0x68>
   13070:	lsl	r4, r4, #1
   13074:	b	12ff0 <flatcc_builder_default_alloc@@Base+0x68>
   13078:	mvn	r0, #0
   1307c:	pop	{r4, r5, r6, r7, r8, pc}
   13080:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   13084:	add	r6, r0, #52	; 0x34
   13088:	mov	r4, r1
   1308c:	add	r1, r6, r1, lsl #3
   13090:	mov	r5, r2
   13094:	add	r2, r2, r3
   13098:	ldr	r3, [r1, #4]
   1309c:	cmp	r2, r3
   130a0:	bls	130d4 <flatcc_builder_default_alloc@@Base+0x14c>
   130a4:	str	r4, [sp]
   130a8:	ldr	r3, [sp, #32]
   130ac:	ldr	r7, [r0, #48]	; 0x30
   130b0:	ldr	r0, [r0, #40]	; 0x28
   130b4:	blx	r7
   130b8:	cmp	r0, #0
   130bc:	beq	130d4 <flatcc_builder_default_alloc@@Base+0x14c>
   130c0:	ldr	r3, [pc, #28]	; 130e4 <flatcc_builder_default_alloc@@Base+0x15c>
   130c4:	mov	r2, #308	; 0x134
   130c8:	ldr	r1, [pc, #24]	; 130e8 <flatcc_builder_default_alloc@@Base+0x160>
   130cc:	ldr	r0, [pc, #24]	; 130ec <flatcc_builder_default_alloc@@Base+0x164>
   130d0:	bl	12324 <__assert_fail@plt>
   130d4:	ldr	r0, [r6, r4, lsl #3]
   130d8:	add	r0, r0, r5
   130dc:	add	sp, sp, #12
   130e0:	pop	{r4, r5, r6, r7, pc}
   130e4:	andeq	r6, r1, sl, ror lr
   130e8:	andeq	r7, r1, r9, ror r5
   130ec:	andeq	r7, r1, r6, ror #11
   130f0:	ldrd	r2, [r0, #156]	; 0x9c
   130f4:	push	{r0, r1, r4, r5, r6, lr}
   130f8:	mov	r5, r1
   130fc:	mov	r4, r0
   13100:	add	r1, r2, #1
   13104:	cmp	r1, r3
   13108:	str	r1, [r0, #156]	; 0x9c
   1310c:	ble	131b8 <flatcc_builder_default_alloc@@Base+0x230>
   13110:	ldr	r3, [r0, #176]	; 0xb0
   13114:	cmp	r1, r3
   13118:	cmpgt	r3, #0
   1311c:	movgt	r3, #1
   13120:	movle	r3, #0
   13124:	ble	13134 <flatcc_builder_default_alloc@@Base+0x1ac>
   13128:	mvn	r0, #0
   1312c:	add	sp, sp, #8
   13130:	pop	{r4, r5, r6, pc}
   13134:	mov	r6, #36	; 0x24
   13138:	mov	r1, #4
   1313c:	str	r3, [sp]
   13140:	mov	r3, r6
   13144:	mul	r2, r6, r2
   13148:	bl	13080 <flatcc_builder_default_alloc@@Base+0xf8>
   1314c:	cmp	r0, #0
   13150:	str	r0, [r4, #32]
   13154:	beq	13128 <flatcc_builder_default_alloc@@Base+0x1a0>
   13158:	ldr	r3, [r4, #88]	; 0x58
   1315c:	ldr	r2, [r4, #176]	; 0xb0
   13160:	udiv	r3, r3, r6
   13164:	cmp	r2, #0
   13168:	cmpgt	r3, r2
   1316c:	movgt	r3, r2
   13170:	str	r3, [r4, #160]	; 0xa0
   13174:	ldrh	r1, [r4, #130]	; 0x82
   13178:	mvn	r0, #3
   1317c:	ldr	r3, [r4, #20]
   13180:	ldr	r2, [r4, #32]
   13184:	str	r3, [r2, #8]
   13188:	strh	r1, [r2, #12]
   1318c:	ldr	r1, [r4, #28]
   13190:	strh	r5, [r4, #130]	; 0x82
   13194:	add	r3, r3, r1
   13198:	str	r0, [r2, #4]
   1319c:	mov	r0, #0
   131a0:	add	r3, r3, #7
   131a4:	str	r1, [r2]
   131a8:	bic	r3, r3, #7
   131ac:	str	r0, [r4, #20]
   131b0:	str	r3, [r4, #28]
   131b4:	b	1312c <flatcc_builder_default_alloc@@Base+0x1a4>
   131b8:	ldr	r3, [r0, #32]
   131bc:	add	r3, r3, #36	; 0x24
   131c0:	str	r3, [r0, #32]
   131c4:	b	13174 <flatcc_builder_default_alloc@@Base+0x1ec>
   131c8:	ldr	r3, [r0, #32]
   131cc:	push	{r0, r1, r2, r4, r5, lr}
   131d0:	add	r1, r1, #2
   131d4:	mov	r4, r0
   131d8:	lsl	r5, r1, #1
   131dc:	ldrh	r1, [r3, #28]
   131e0:	ldr	r2, [r3, #16]
   131e4:	mov	r3, #1
   131e8:	str	r3, [sp]
   131ec:	mov	r3, r5
   131f0:	add	r2, r2, r1, lsl #1
   131f4:	mov	r1, #0
   131f8:	bl	13080 <flatcc_builder_default_alloc@@Base+0xf8>
   131fc:	cmp	r0, #0
   13200:	streq	r0, [r4, #4]
   13204:	mvneq	r0, #0
   13208:	beq	13244 <flatcc_builder_default_alloc@@Base+0x2bc>
   1320c:	ldr	r2, [r4, #32]
   13210:	add	r0, r0, #4
   13214:	mov	r3, #0
   13218:	mov	r1, #3
   1321c:	str	r0, [r4, #4]
   13220:	mov	r0, r4
   13224:	str	r3, [sp]
   13228:	sub	r3, r5, #3
   1322c:	ldr	r2, [r2, #20]
   13230:	bl	13080 <flatcc_builder_default_alloc@@Base+0xf8>
   13234:	str	r0, [r4]
   13238:	clz	r0, r0
   1323c:	lsr	r0, r0, #5
   13240:	rsb	r0, r0, #0
   13244:	add	sp, sp, #12
   13248:	pop	{r4, r5, pc}
   1324c:	push	{r0, r1, r2, r4, r5, lr}
   13250:	ldr	r3, [r1]
   13254:	ldr	r4, [r0, #140]	; 0x8c
   13258:	add	r2, r3, r4
   1325c:	cmp	r2, r4
   13260:	ldrlt	r3, [pc, #76]	; 132b4 <flatcc_builder_default_alloc@@Base+0x32c>
   13264:	str	r2, [r0, #140]	; 0x8c
   13268:	movwlt	r2, #673	; 0x2a1
   1326c:	blt	1329c <flatcc_builder_default_alloc@@Base+0x314>
   13270:	add	r1, r1, #8
   13274:	str	r3, [sp]
   13278:	mov	r3, r4
   1327c:	ldr	r2, [r1, #-4]
   13280:	ldr	r5, [r0, #44]	; 0x2c
   13284:	ldr	r0, [r0, #36]	; 0x24
   13288:	blx	r5
   1328c:	cmp	r0, #0
   13290:	beq	132a8 <flatcc_builder_default_alloc@@Base+0x320>
   13294:	ldr	r3, [pc, #24]	; 132b4 <flatcc_builder_default_alloc@@Base+0x32c>
   13298:	movw	r2, #677	; 0x2a5
   1329c:	ldr	r1, [pc, #20]	; 132b8 <flatcc_builder_default_alloc@@Base+0x330>
   132a0:	ldr	r0, [pc, #20]	; 132bc <flatcc_builder_default_alloc@@Base+0x334>
   132a4:	bl	12324 <__assert_fail@plt>
   132a8:	add	r0, r4, #1
   132ac:	add	sp, sp, #12
   132b0:	pop	{r4, r5, pc}
   132b4:	andeq	r6, r1, r9, lsl #29
   132b8:	andeq	r7, r1, r9, ror r5
   132bc:	andeq	r7, r1, r6, ror #11
   132c0:	cmp	r2, #0
   132c4:	bne	132d4 <flatcc_builder_default_alloc@@Base+0x34c>
   132c8:	ldrh	r2, [r0, #132]	; 0x84
   132cc:	cmp	r2, #0
   132d0:	moveq	r2, #1
   132d4:	ldrh	ip, [r1]
   132d8:	cmp	ip, #3
   132dc:	movls	ip, #4
   132e0:	strhls	ip, [r1]
   132e4:	ldrh	ip, [r1]
   132e8:	cmp	ip, r2
   132ec:	strhcc	r2, [r1]
   132f0:	cmp	r3, #0
   132f4:	bne	13354 <flatcc_builder_default_alloc@@Base+0x3cc>
   132f8:	ldr	r3, [r0, #140]	; 0x8c
   132fc:	sub	r2, r2, #1
   13300:	ands	r2, r2, r3
   13304:	beq	13354 <flatcc_builder_default_alloc@@Base+0x3cc>
   13308:	push	{r4, lr}
   1330c:	mov	r3, #1
   13310:	sub	sp, sp, #72	; 0x48
   13314:	mov	r1, sp
   13318:	ldr	r4, [pc, #60]	; 1335c <flatcc_builder_default_alloc@@Base+0x3d4>
   1331c:	strd	r2, [sp]
   13320:	str	r4, [sp, #8]
   13324:	str	r2, [sp, #12]
   13328:	bl	1324c <flatcc_builder_default_alloc@@Base+0x2c4>
   1332c:	cmp	r0, #0
   13330:	bne	13348 <flatcc_builder_default_alloc@@Base+0x3c0>
   13334:	add	r3, r4, #512	; 0x200
   13338:	movw	r2, #702	; 0x2be
   1333c:	ldr	r1, [pc, #28]	; 13360 <flatcc_builder_default_alloc@@Base+0x3d8>
   13340:	ldr	r0, [pc, #28]	; 13364 <flatcc_builder_default_alloc@@Base+0x3dc>
   13344:	bl	12324 <__assert_fail@plt>
   13348:	mov	r0, #0
   1334c:	add	sp, sp, #72	; 0x48
   13350:	pop	{r4, pc}
   13354:	mov	r0, #0
   13358:	bx	lr
   1335c:	muleq	r1, r3, lr
   13360:	andeq	r7, r1, r9, ror r5
   13364:	andeq	r7, r1, r6, ror #11
   13368:	ldr	r3, [r1]
   1336c:	push	{r0, r1, r4, r5, r6, lr}
   13370:	ldr	r2, [r0, #136]	; 0x88
   13374:	sub	r4, r2, r3
   13378:	cmp	r2, r4
   1337c:	ldrle	r3, [pc, #80]	; 133d4 <flatcc_builder_default_alloc@@Base+0x44c>
   13380:	movwle	r2, #647	; 0x287
   13384:	ble	133b8 <flatcc_builder_default_alloc@@Base+0x430>
   13388:	mov	r5, r0
   1338c:	add	r1, r1, #8
   13390:	str	r3, [sp]
   13394:	mov	r3, r4
   13398:	ldr	r2, [r1, #-4]
   1339c:	ldr	r0, [r0, #36]	; 0x24
   133a0:	ldr	r6, [r5, #44]	; 0x2c
   133a4:	blx	r6
   133a8:	cmp	r0, #0
   133ac:	beq	133c4 <flatcc_builder_default_alloc@@Base+0x43c>
   133b0:	ldr	r3, [pc, #28]	; 133d4 <flatcc_builder_default_alloc@@Base+0x44c>
   133b4:	movw	r2, #651	; 0x28b
   133b8:	ldr	r1, [pc, #24]	; 133d8 <flatcc_builder_default_alloc@@Base+0x450>
   133bc:	ldr	r0, [pc, #24]	; 133dc <flatcc_builder_default_alloc@@Base+0x454>
   133c0:	bl	12324 <__assert_fail@plt>
   133c4:	mov	r0, r4
   133c8:	str	r4, [r5, #136]	; 0x88
   133cc:	add	sp, sp, #8
   133d0:	pop	{r4, r5, r6, pc}
   133d4:	andeq	r7, r1, r2, lsr #1
   133d8:	andeq	r7, r1, r9, ror r5
   133dc:	andeq	r7, r1, r6, ror #11
   133e0:	ldr	r3, [r0, #20]
   133e4:	adds	r1, r3, r1
   133e8:	movcs	r3, #1
   133ec:	movcc	r3, #0
   133f0:	cmp	r1, r2
   133f4:	movls	r2, r3
   133f8:	orrhi	r2, r3, #1
   133fc:	cmp	r2, #0
   13400:	beq	1341c <flatcc_builder_default_alloc@@Base+0x494>
   13404:	push	{r4, lr}
   13408:	mov	r2, #892	; 0x37c
   1340c:	ldr	r3, [pc, #20]	; 13428 <flatcc_builder_default_alloc@@Base+0x4a0>
   13410:	ldr	r1, [pc, #20]	; 1342c <flatcc_builder_default_alloc@@Base+0x4a4>
   13414:	ldr	r0, [pc, #20]	; 13430 <flatcc_builder_default_alloc@@Base+0x4a8>
   13418:	bl	12324 <__assert_fail@plt>
   1341c:	str	r1, [r0, #20]
   13420:	mov	r0, r2
   13424:	bx	lr
   13428:	andeq	r7, r1, sp, lsr #1
   1342c:	andeq	r7, r1, r9, ror r5
   13430:			; <UNDEFINED> instruction: 0x000175bf
   13434:	ldrh	ip, [r0, #128]	; 0x80
   13438:	push	{r4, r5, r6, lr}
   1343c:	sub	sp, sp, #80	; 0x50
   13440:	ldr	r5, [r0, #136]	; 0x88
   13444:	cmp	ip, #3
   13448:	movls	ip, #4
   1344c:	strhls	ip, [r0, #128]	; 0x80
   13450:	mov	ip, #4
   13454:	add	lr, sp, ip
   13458:	and	r4, r5, #3
   1345c:	stmib	sp, {r2, ip}
   13460:	str	lr, [sp, #16]
   13464:	str	ip, [sp, #20]
   13468:	mov	ip, #1
   1346c:	str	ip, [sp, #12]
   13470:	lsls	ip, r2, #2
   13474:	beq	13490 <flatcc_builder_default_alloc@@Base+0x508>
   13478:	add	lr, ip, #4
   1347c:	str	ip, [sp, #28]
   13480:	mov	ip, #2
   13484:	str	lr, [sp, #8]
   13488:	str	ip, [sp, #12]
   1348c:	str	r1, [sp, #24]
   13490:	cmp	r4, #0
   13494:	beq	134c4 <flatcc_builder_default_alloc@@Base+0x53c>
   13498:	ldr	ip, [sp, #8]
   1349c:	add	lr, sp, #80	; 0x50
   134a0:	ldr	r6, [pc, #204]	; 13574 <flatcc_builder_default_alloc@@Base+0x5ec>
   134a4:	add	ip, ip, r4
   134a8:	str	ip, [sp, #8]
   134ac:	ldr	ip, [sp, #12]
   134b0:	add	ip, ip, #1
   134b4:	add	lr, lr, ip, lsl #3
   134b8:	str	ip, [sp, #12]
   134bc:	str	r6, [lr, #-72]	; 0xffffffb8
   134c0:	str	r4, [lr, #-68]	; 0xffffffbc
   134c4:	ldr	lr, [sp, #8]
   134c8:	mov	ip, #0
   134cc:	mvn	r6, #3
   134d0:	sub	lr, lr, #4
   134d4:	sub	lr, lr, r5
   134d8:	cmp	r2, ip
   134dc:	bne	134f0 <flatcc_builder_default_alloc@@Base+0x568>
   134e0:	add	r1, sp, #8
   134e4:	bl	13368 <flatcc_builder_default_alloc@@Base+0x3e0>
   134e8:	add	sp, sp, #80	; 0x50
   134ec:	pop	{r4, r5, r6, pc}
   134f0:	ldr	r5, [r1, ip, lsl #2]
   134f4:	cmp	r5, #0
   134f8:	beq	13530 <flatcc_builder_default_alloc@@Base+0x5a8>
   134fc:	mla	r4, r6, ip, lr
   13500:	cmp	r3, #0
   13504:	add	r4, r4, r5
   13508:	str	r4, [r1, ip, lsl #2]
   1350c:	beq	1356c <flatcc_builder_default_alloc@@Base+0x5e4>
   13510:	ldrb	r4, [r3, ip]
   13514:	cmp	r4, #0
   13518:	bne	1356c <flatcc_builder_default_alloc@@Base+0x5e4>
   1351c:	ldr	r3, [pc, #84]	; 13578 <flatcc_builder_default_alloc@@Base+0x5f0>
   13520:	movw	r2, #1457	; 0x5b1
   13524:	ldr	r1, [pc, #80]	; 1357c <flatcc_builder_default_alloc@@Base+0x5f4>
   13528:	ldr	r0, [pc, #80]	; 13580 <flatcc_builder_default_alloc@@Base+0x5f8>
   1352c:	bl	12324 <__assert_fail@plt>
   13530:	cmp	r3, #0
   13534:	beq	13558 <flatcc_builder_default_alloc@@Base+0x5d0>
   13538:	ldrb	r4, [r3, ip]
   1353c:	cmp	r4, #0
   13540:	beq	1356c <flatcc_builder_default_alloc@@Base+0x5e4>
   13544:	ldr	r3, [pc, #44]	; 13578 <flatcc_builder_default_alloc@@Base+0x5f0>
   13548:	movw	r2, #1461	; 0x5b5
   1354c:	ldr	r1, [pc, #40]	; 1357c <flatcc_builder_default_alloc@@Base+0x5f4>
   13550:	ldr	r0, [pc, #44]	; 13584 <flatcc_builder_default_alloc@@Base+0x5fc>
   13554:	b	1352c <flatcc_builder_default_alloc@@Base+0x5a4>
   13558:	ldr	r3, [pc, #24]	; 13578 <flatcc_builder_default_alloc@@Base+0x5f0>
   1355c:	movw	r2, #1463	; 0x5b7
   13560:	ldr	r1, [pc, #20]	; 1357c <flatcc_builder_default_alloc@@Base+0x5f4>
   13564:	ldr	r0, [pc, #28]	; 13588 <flatcc_builder_default_alloc@@Base+0x600>
   13568:	b	1352c <flatcc_builder_default_alloc@@Base+0x5a4>
   1356c:	add	ip, ip, #1
   13570:	b	134d8 <flatcc_builder_default_alloc@@Base+0x550>
   13574:	muleq	r1, r3, lr
   13578:	strheq	r7, [r1], -lr
   1357c:	andeq	r7, r1, r9, ror r5
   13580:	ldrdeq	r7, [r1], -sl
   13584:	andeq	r7, r1, r8, ror #11
   13588:	andeq	r7, r1, r6, ror #11

0001358c <flatcc_builder_flush_vtable_cache@@Base>:
   1358c:	ldr	r3, [r0, #116]	; 0x74
   13590:	cmp	r3, #0
   13594:	bxeq	lr
   13598:	push	{r4, lr}
   1359c:	mov	r4, r0
   135a0:	mov	r1, #0
   135a4:	ldr	r0, [r0, #92]	; 0x5c
   135a8:	ldr	r2, [r4, #96]	; 0x60
   135ac:	bl	122f4 <memset@plt>
   135b0:	mov	r0, #0
   135b4:	mov	r1, #16
   135b8:	strd	r0, [r4, #120]	; 0x78
   135bc:	pop	{r4, pc}

000135c0 <flatcc_builder_custom_init@@Base>:
   135c0:	push	{r4, r5, r6, r7, r8, lr}
   135c4:	mov	r6, r1
   135c8:	mov	r7, r2
   135cc:	mov	r1, #0
   135d0:	mov	r2, #232	; 0xe8
   135d4:	mov	r4, r0
   135d8:	mov	r5, r3
   135dc:	bl	122f4 <memset@plt>
   135e0:	cmp	r6, #0
   135e4:	mov	r0, #0
   135e8:	moveq	r3, #1
   135ec:	addeq	r7, r4, #188	; 0xbc
   135f0:	ldreq	r6, [pc, #36]	; 1361c <flatcc_builder_custom_init@@Base+0x5c>
   135f4:	streq	r3, [r4, #184]	; 0xb8
   135f8:	cmp	r5, #0
   135fc:	ldr	r3, [pc, #28]	; 13620 <flatcc_builder_custom_init@@Base+0x60>
   13600:	str	r7, [r4, #36]	; 0x24
   13604:	str	r6, [r4, #44]	; 0x2c
   13608:	moveq	r5, r3
   1360c:	ldr	r3, [sp, #24]
   13610:	str	r3, [r4, #40]	; 0x28
   13614:	str	r5, [r4, #48]	; 0x30
   13618:	pop	{r4, r5, r6, r7, r8, pc}
   1361c:	ldrdeq	r5, [r1], -r0
   13620:	andeq	r2, r1, r8, lsl #31

00013624 <flatcc_builder_init@@Base>:
   13624:	push	{r4, lr}
   13628:	mov	r2, #232	; 0xe8
   1362c:	mov	r1, #0
   13630:	bl	122f4 <memset@plt>
   13634:	mov	r3, r0
   13638:	mov	r2, #1
   1363c:	mov	r0, #0
   13640:	str	r2, [r3, #184]	; 0xb8
   13644:	ldr	r2, [pc, #20]	; 13660 <flatcc_builder_init@@Base+0x3c>
   13648:	str	r2, [r3, #48]	; 0x30
   1364c:	add	r2, r3, #188	; 0xbc
   13650:	str	r2, [r3, #36]	; 0x24
   13654:	ldr	r2, [pc, #8]	; 13664 <flatcc_builder_init@@Base+0x40>
   13658:	str	r2, [r3, #44]	; 0x2c
   1365c:	pop	{r4, pc}
   13660:	andeq	r2, r1, r8, lsl #31
   13664:	ldrdeq	r5, [r1], -r0

00013668 <flatcc_builder_custom_reset@@Base>:
   13668:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1366c:	mov	r4, r0
   13670:	mov	r7, r1
   13674:	mov	r8, r2
   13678:	mov	r5, r0
   1367c:	mov	r6, #0
   13680:	ldr	r3, [r5, #52]	; 0x34
   13684:	add	r1, r5, #52	; 0x34
   13688:	cmp	r3, #0
   1368c:	beq	13768 <flatcc_builder_custom_reset@@Base+0x100>
   13690:	cmp	r6, #5
   13694:	cmpne	r8, #0
   13698:	bne	13740 <flatcc_builder_custom_reset@@Base+0xd8>
   1369c:	mov	r1, #0
   136a0:	ldr	r0, [r5, #52]	; 0x34
   136a4:	ldr	r2, [r5, #56]	; 0x38
   136a8:	bl	122f4 <memset@plt>
   136ac:	add	r6, r6, #1
   136b0:	add	r5, r5, #8
   136b4:	cmp	r6, #8
   136b8:	bne	13680 <flatcc_builder_custom_reset@@Base+0x18>
   136bc:	ldr	r2, [r4, #124]	; 0x7c
   136c0:	mov	r3, #0
   136c4:	ldr	r0, [r4, #184]	; 0xb8
   136c8:	str	r3, [r4, #24]
   136cc:	str	r3, [r4, #32]
   136d0:	cmp	r2, r3
   136d4:	str	r3, [r4, #120]	; 0x78
   136d8:	movne	r2, #16
   136dc:	strh	r3, [r4, #128]	; 0x80
   136e0:	str	r3, [r4, #136]	; 0x88
   136e4:	strne	r2, [r4, #124]	; 0x7c
   136e8:	cmp	r7, #0
   136ec:	ldr	r2, [r4, #60]	; 0x3c
   136f0:	strne	r3, [r4, #172]	; 0xac
   136f4:	strne	r3, [r4, #176]	; 0xb0
   136f8:	strne	r3, [r4, #180]	; 0xb4
   136fc:	cmp	r0, #0
   13700:	strd	r2, [r4, #16]
   13704:	ldr	r2, [r4, #76]	; 0x4c
   13708:	str	r2, [r4]
   1370c:	ldr	r2, [r4, #52]	; 0x34
   13710:	str	r3, [r4, #140]	; 0x8c
   13714:	str	r3, [r4, #148]	; 0x94
   13718:	str	r3, [r4, #152]	; 0x98
   1371c:	str	r3, [r4, #156]	; 0x9c
   13720:	str	r2, [r4, #4]
   13724:	str	r3, [r4, #160]	; 0xa0
   13728:	beq	13738 <flatcc_builder_custom_reset@@Base+0xd0>
   1372c:	add	r0, r4, #188	; 0xbc
   13730:	bl	15bd0 <flatcc_emitter_reset@@Base>
   13734:	mov	r0, #0
   13738:	add	sp, sp, #12
   1373c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   13740:	mov	r3, #1
   13744:	ldr	r0, [r4, #40]	; 0x28
   13748:	mov	r2, r3
   1374c:	ldr	r9, [r4, #48]	; 0x30
   13750:	str	r6, [sp]
   13754:	blx	r9
   13758:	cmp	r0, #0
   1375c:	beq	1369c <flatcc_builder_custom_reset@@Base+0x34>
   13760:	mvn	r0, #0
   13764:	b	13738 <flatcc_builder_custom_reset@@Base+0xd0>
   13768:	ldr	r3, [r5, #56]	; 0x38
   1376c:	cmp	r3, #0
   13770:	beq	136ac <flatcc_builder_custom_reset@@Base+0x44>
   13774:	ldr	r3, [pc, #12]	; 13788 <flatcc_builder_custom_reset@@Base+0x120>
   13778:	movw	r2, #434	; 0x1b2
   1377c:	ldr	r1, [pc, #8]	; 1378c <flatcc_builder_custom_reset@@Base+0x124>
   13780:	ldr	r0, [pc, #8]	; 13790 <flatcc_builder_custom_reset@@Base+0x128>
   13784:	bl	12324 <__assert_fail@plt>
   13788:	ldrdeq	r7, [r1], -fp
   1378c:	andeq	r7, r1, r9, ror r5
   13790:	strdeq	r7, [r1], -r6

00013794 <flatcc_builder_reset@@Base>:
   13794:	mov	r2, #0
   13798:	mov	r1, r2
   1379c:	b	13668 <flatcc_builder_custom_reset@@Base>

000137a0 <flatcc_builder_clear@@Base>:
   137a0:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   137a4:	mov	r4, r0
   137a8:	add	r6, r0, #52	; 0x34
   137ac:	mov	r5, #0
   137b0:	mov	r3, #0
   137b4:	mov	r1, r6
   137b8:	mov	r2, r3
   137bc:	ldr	r0, [r4, #40]	; 0x28
   137c0:	add	r6, r6, #8
   137c4:	ldr	r7, [r4, #48]	; 0x30
   137c8:	str	r5, [sp]
   137cc:	add	r5, r5, #1
   137d0:	blx	r7
   137d4:	cmp	r5, #8
   137d8:	bne	137b0 <flatcc_builder_clear@@Base+0x10>
   137dc:	ldr	r3, [r4, #184]	; 0xb8
   137e0:	cmp	r3, #0
   137e4:	beq	137f0 <flatcc_builder_clear@@Base+0x50>
   137e8:	add	r0, r4, #188	; 0xbc
   137ec:	bl	15c78 <flatcc_emitter_clear@@Base>
   137f0:	mov	r2, #232	; 0xe8
   137f4:	mov	r1, #0
   137f8:	mov	r0, r4
   137fc:	add	sp, sp, #12
   13800:	pop	{r4, r5, r6, r7, lr}
   13804:	b	122f4 <memset@plt>

00013808 <flatcc_builder_enter_user_frame_ptr@@Base>:
   13808:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1380c:	add	r5, r1, #3
   13810:	mov	r7, #0
   13814:	bic	r5, r5, #3
   13818:	mov	r1, #7
   1381c:	add	r5, r5, #4
   13820:	mov	r6, r0
   13824:	mov	r3, r5
   13828:	str	r7, [sp]
   1382c:	ldr	r2, [r0, #228]	; 0xe4
   13830:	bl	13080 <flatcc_builder_default_alloc@@Base+0xf8>
   13834:	subs	r4, r0, #0
   13838:	beq	13864 <flatcc_builder_enter_user_frame_ptr@@Base+0x5c>
   1383c:	mov	r2, r5
   13840:	mov	r1, r7
   13844:	bl	122f4 <memset@plt>
   13848:	ldr	r3, [r6, #224]	; 0xe0
   1384c:	str	r3, [r4], #4
   13850:	ldr	r1, [r6, #228]	; 0xe4
   13854:	add	r3, r1, #4
   13858:	add	r5, r1, r5
   1385c:	str	r3, [r6, #224]	; 0xe0
   13860:	str	r5, [r6, #228]	; 0xe4
   13864:	mov	r0, r4
   13868:	add	sp, sp, #12
   1386c:	pop	{r4, r5, r6, r7, pc}

00013870 <flatcc_builder_enter_user_frame@@Base>:
   13870:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   13874:	add	r4, r1, #3
   13878:	mov	r7, #0
   1387c:	bic	r4, r4, #3
   13880:	mov	r1, #7
   13884:	add	r4, r4, #4
   13888:	mov	r6, r0
   1388c:	mov	r3, r4
   13890:	str	r7, [sp]
   13894:	ldr	r2, [r0, #228]	; 0xe4
   13898:	bl	13080 <flatcc_builder_default_alloc@@Base+0xf8>
   1389c:	subs	r5, r0, #0
   138a0:	moveq	r0, r5
   138a4:	beq	138d0 <flatcc_builder_enter_user_frame@@Base+0x60>
   138a8:	mov	r2, r4
   138ac:	mov	r1, r7
   138b0:	bl	122f4 <memset@plt>
   138b4:	ldr	r3, [r6, #224]	; 0xe0
   138b8:	str	r3, [r5]
   138bc:	ldr	r1, [r6, #228]	; 0xe4
   138c0:	add	r0, r1, #4
   138c4:	add	r4, r1, r4
   138c8:	str	r0, [r6, #224]	; 0xe0
   138cc:	str	r4, [r6, #228]	; 0xe4
   138d0:	add	sp, sp, #12
   138d4:	pop	{r4, r5, r6, r7, pc}

000138d8 <flatcc_builder_exit_user_frame@@Base>:
   138d8:	ldr	r3, [r0, #224]	; 0xe0
   138dc:	cmp	r3, #0
   138e0:	bne	138fc <flatcc_builder_exit_user_frame@@Base+0x24>
   138e4:	push	{r4, lr}
   138e8:	movw	r2, #542	; 0x21e
   138ec:	ldr	r3, [pc, #40]	; 1391c <flatcc_builder_exit_user_frame@@Base+0x44>
   138f0:	ldr	r1, [pc, #40]	; 13920 <flatcc_builder_exit_user_frame@@Base+0x48>
   138f4:	ldr	r0, [pc, #40]	; 13924 <flatcc_builder_exit_user_frame@@Base+0x4c>
   138f8:	bl	12324 <__assert_fail@plt>
   138fc:	ldr	r1, [r0, #108]	; 0x6c
   13900:	mov	r2, r0
   13904:	add	r1, r1, r3
   13908:	sub	r3, r3, #4
   1390c:	str	r3, [r0, #228]	; 0xe4
   13910:	ldr	r0, [r1, #-4]
   13914:	str	r0, [r2, #224]	; 0xe0
   13918:	bx	lr
   1391c:	strdeq	r7, [r1], -r7	; <UNPREDICTABLE>
   13920:	andeq	r7, r1, r9, ror r5
   13924:	andeq	r7, r1, r8, lsl #12

00013928 <flatcc_builder_exit_user_frame_at@@Base>:
   13928:	ldr	r2, [r0, #224]	; 0xe0
   1392c:	cmp	r2, r1
   13930:	bcs	1394c <flatcc_builder_exit_user_frame_at@@Base+0x24>
   13934:	push	{r4, lr}
   13938:	movw	r2, #551	; 0x227
   1393c:	ldr	r3, [pc, #16]	; 13954 <flatcc_builder_exit_user_frame_at@@Base+0x2c>
   13940:	ldr	r1, [pc, #16]	; 13958 <flatcc_builder_exit_user_frame_at@@Base+0x30>
   13944:	ldr	r0, [pc, #16]	; 1395c <flatcc_builder_exit_user_frame_at@@Base+0x34>
   13948:	bl	12324 <__assert_fail@plt>
   1394c:	str	r1, [r0, #224]	; 0xe0
   13950:	b	138d8 <flatcc_builder_exit_user_frame@@Base>
   13954:	andeq	r7, r1, r6, lsl r1
   13958:	andeq	r7, r1, r9, ror r5
   1395c:	andeq	r7, r1, r1, lsr #12

00013960 <flatcc_builder_get_current_user_frame@@Base>:
   13960:	ldr	r0, [r0, #224]	; 0xe0
   13964:	bx	lr

00013968 <flatcc_builder_get_user_frame_ptr@@Base>:
   13968:	ldr	r0, [r0, #108]	; 0x6c
   1396c:	add	r0, r0, r1
   13970:	bx	lr

00013974 <flatcc_builder_embed_buffer@@Base>:
   13974:	push	{r4, r5, r6, lr}
   13978:	mov	r4, r3
   1397c:	sub	sp, sp, #80	; 0x50
   13980:	mov	r6, r2
   13984:	mov	r2, r1
   13988:	add	r1, sp, #96	; 0x60
   1398c:	mov	r5, r0
   13990:	ldr	r3, [r0, #152]	; 0x98
   13994:	adds	r3, r3, #0
   13998:	movne	r3, #1
   1399c:	bl	132c0 <flatcc_builder_default_alloc@@Base+0x338>
   139a0:	cmp	r0, #0
   139a4:	movne	r0, #0
   139a8:	bne	13a7c <flatcc_builder_embed_buffer@@Base+0x108>
   139ac:	ldr	r3, [sp, #100]	; 0x64
   139b0:	str	r0, [sp, #8]
   139b4:	str	r0, [sp, #12]
   139b8:	tst	r3, #2
   139bc:	ldr	r3, [r5, #136]	; 0x88
   139c0:	movne	r2, #4
   139c4:	moveq	r2, #0
   139c8:	sub	r3, r3, r4
   139cc:	sub	r3, r3, r2
   139d0:	ldrh	r2, [sp, #96]	; 0x60
   139d4:	sub	r2, r2, #1
   139d8:	and	r3, r3, r2
   139dc:	add	r2, r4, r3
   139e0:	str	r2, [sp, #4]
   139e4:	ldr	r2, [r5, #152]	; 0x98
   139e8:	cmp	r2, #0
   139ec:	beq	13a0c <flatcc_builder_embed_buffer@@Base+0x98>
   139f0:	mov	r2, #4
   139f4:	add	r1, sp, r2
   139f8:	str	r2, [sp, #8]
   139fc:	str	r1, [sp, #16]
   13a00:	str	r2, [sp, #20]
   13a04:	mov	r2, #1
   13a08:	str	r2, [sp, #12]
   13a0c:	cmp	r4, #0
   13a10:	beq	13a3c <flatcc_builder_embed_buffer@@Base+0xc8>
   13a14:	ldr	r2, [sp, #8]
   13a18:	add	r1, sp, #80	; 0x50
   13a1c:	add	r2, r2, r4
   13a20:	str	r2, [sp, #8]
   13a24:	ldr	r2, [sp, #12]
   13a28:	add	r2, r2, #1
   13a2c:	add	r1, r1, r2, lsl #3
   13a30:	str	r2, [sp, #12]
   13a34:	str	r6, [r1, #-72]	; 0xffffffb8
   13a38:	str	r4, [r1, #-68]	; 0xffffffbc
   13a3c:	cmp	r3, #0
   13a40:	beq	13a70 <flatcc_builder_embed_buffer@@Base+0xfc>
   13a44:	ldr	r2, [sp, #8]
   13a48:	add	r1, sp, #80	; 0x50
   13a4c:	ldr	r0, [pc, #48]	; 13a84 <flatcc_builder_embed_buffer@@Base+0x110>
   13a50:	add	r2, r2, r3
   13a54:	str	r2, [sp, #8]
   13a58:	ldr	r2, [sp, #12]
   13a5c:	add	r2, r2, #1
   13a60:	add	r1, r1, r2, lsl #3
   13a64:	str	r2, [sp, #12]
   13a68:	str	r0, [r1, #-72]	; 0xffffffb8
   13a6c:	str	r3, [r1, #-68]	; 0xffffffbc
   13a70:	add	r1, sp, #8
   13a74:	mov	r0, r5
   13a78:	bl	13368 <flatcc_builder_default_alloc@@Base+0x3e0>
   13a7c:	add	sp, sp, #80	; 0x50
   13a80:	pop	{r4, r5, r6, pc}
   13a84:	muleq	r1, r3, lr

00013a88 <flatcc_builder_create_buffer@@Base>:
   13a88:	push	{r4, r5, r6, r7, r8, r9, lr}
   13a8c:	sub	sp, sp, #92	; 0x5c
   13a90:	mov	r8, #0
   13a94:	mov	r9, r1
   13a98:	mov	r5, r3
   13a9c:	add	r1, sp, #120	; 0x78
   13aa0:	mov	r4, r0
   13aa4:	ldr	r7, [sp, #124]	; 0x7c
   13aa8:	str	r8, [sp, #12]
   13aac:	and	r6, r7, #1
   13ab0:	mov	r3, r6
   13ab4:	bl	132c0 <flatcc_builder_default_alloc@@Base+0x338>
   13ab8:	cmp	r0, r8
   13abc:	bne	13c2c <flatcc_builder_create_buffer@@Base+0x1a4>
   13ac0:	ldrh	r3, [r4, #128]	; 0x80
   13ac4:	ldrh	r1, [sp, #120]	; 0x78
   13ac8:	ldr	r2, [r4, #136]	; 0x88
   13acc:	cmp	r3, r1
   13ad0:	strhcc	r1, [r4, #128]	; 0x80
   13ad4:	cmp	r9, #0
   13ad8:	sub	r1, r1, #1
   13adc:	ldrne	r3, [r9]
   13ae0:	strne	r3, [sp, #12]
   13ae4:	sub	r3, r2, #4
   13ae8:	ldr	r0, [sp, #12]
   13aec:	cmp	r0, #0
   13af0:	movne	r0, #4
   13af4:	tst	r7, #2
   13af8:	movne	ip, #4
   13afc:	moveq	ip, #0
   13b00:	sub	r3, r3, r0
   13b04:	ands	r7, r7, #3
   13b08:	sub	r3, r3, ip
   13b0c:	and	r3, r3, r1
   13b10:	mov	r1, #0
   13b14:	str	r1, [sp, #16]
   13b18:	str	r1, [sp, #20]
   13b1c:	beq	13b3c <flatcc_builder_create_buffer@@Base+0xb4>
   13b20:	mov	r1, #4
   13b24:	add	ip, sp, #8
   13b28:	str	r1, [sp, #16]
   13b2c:	str	ip, [sp, #24]
   13b30:	str	r1, [sp, #28]
   13b34:	mov	r1, #1
   13b38:	str	r1, [sp, #20]
   13b3c:	ldr	ip, [sp, #16]
   13b40:	add	r8, sp, #88	; 0x58
   13b44:	add	r9, sp, #4
   13b48:	cmp	r0, #0
   13b4c:	ldr	lr, [sp, #20]
   13b50:	add	ip, ip, #4
   13b54:	add	r1, lr, #1
   13b58:	str	ip, [sp, #16]
   13b5c:	add	r8, r8, r1, lsl #3
   13b60:	str	r1, [sp, #20]
   13b64:	str	r9, [r8, #-72]	; 0xffffffb8
   13b68:	mov	r9, #4
   13b6c:	str	r9, [r8, #-68]	; 0xffffffbc
   13b70:	beq	13b9c <flatcc_builder_create_buffer@@Base+0x114>
   13b74:	add	ip, ip, r0
   13b78:	add	r1, lr, #2
   13b7c:	add	lr, lr, #2
   13b80:	str	ip, [sp, #16]
   13b84:	add	ip, sp, #88	; 0x58
   13b88:	add	r1, ip, r1, lsl #3
   13b8c:	add	ip, sp, #12
   13b90:	str	lr, [sp, #20]
   13b94:	str	ip, [r1, #-72]	; 0xffffffb8
   13b98:	str	r0, [r1, #-68]	; 0xffffffbc
   13b9c:	cmp	r3, #0
   13ba0:	beq	13bd0 <flatcc_builder_create_buffer@@Base+0x148>
   13ba4:	ldr	r1, [sp, #16]
   13ba8:	add	r0, sp, #88	; 0x58
   13bac:	ldr	ip, [pc, #132]	; 13c38 <flatcc_builder_create_buffer@@Base+0x1b0>
   13bb0:	add	r1, r1, r3
   13bb4:	str	r1, [sp, #16]
   13bb8:	ldr	r1, [sp, #20]
   13bbc:	add	r1, r1, #1
   13bc0:	add	r0, r0, r1, lsl #3
   13bc4:	str	r1, [sp, #20]
   13bc8:	str	ip, [r0, #-72]	; 0xffffffb8
   13bcc:	str	r3, [r0, #-68]	; 0xffffffbc
   13bd0:	ldr	r3, [sp, #16]
   13bd4:	cmp	r7, #0
   13bd8:	add	r1, sp, #16
   13bdc:	mov	r0, r4
   13be0:	sub	r3, r2, r3
   13be4:	movne	r2, #4
   13be8:	moveq	r2, #0
   13bec:	cmp	r6, #0
   13bf0:	add	r3, r3, r2
   13bf4:	ldrne	r2, [r4, #144]	; 0x90
   13bf8:	ldreq	r2, [r4, #140]	; 0x8c
   13bfc:	sub	r2, r2, r3
   13c00:	sub	r3, r5, r3
   13c04:	str	r3, [sp, #4]
   13c08:	str	r2, [sp, #8]
   13c0c:	bl	13368 <flatcc_builder_default_alloc@@Base+0x3e0>
   13c10:	cmp	r0, #0
   13c14:	bne	13c30 <flatcc_builder_create_buffer@@Base+0x1a8>
   13c18:	ldr	r3, [pc, #28]	; 13c3c <flatcc_builder_create_buffer@@Base+0x1b4>
   13c1c:	mov	r2, #772	; 0x304
   13c20:	ldr	r1, [pc, #24]	; 13c40 <flatcc_builder_create_buffer@@Base+0x1b8>
   13c24:	ldr	r0, [pc, #24]	; 13c44 <flatcc_builder_create_buffer@@Base+0x1bc>
   13c28:	bl	12324 <__assert_fail@plt>
   13c2c:	mov	r0, r8
   13c30:	add	sp, sp, #92	; 0x5c
   13c34:	pop	{r4, r5, r6, r7, r8, r9, pc}
   13c38:	muleq	r1, r3, lr
   13c3c:	andeq	r7, r1, r8, lsr r1
   13c40:	andeq	r7, r1, r9, ror r5
   13c44:	andeq	r7, r1, r6, ror #11

00013c48 <flatcc_builder_create_struct@@Base>:
   13c48:	cmp	r3, #0
   13c4c:	push	{lr}		; (str lr, [sp, #-4]!)
   13c50:	sub	sp, sp, #76	; 0x4c
   13c54:	bne	13c6c <flatcc_builder_create_struct@@Base+0x24>
   13c58:	ldr	r3, [pc, #148]	; 13cf4 <flatcc_builder_create_struct@@Base+0xac>
   13c5c:	movw	r2, #783	; 0x30f
   13c60:	ldr	r1, [pc, #144]	; 13cf8 <flatcc_builder_create_struct@@Base+0xb0>
   13c64:	ldr	r0, [pc, #144]	; 13cfc <flatcc_builder_create_struct@@Base+0xb4>
   13c68:	bl	12324 <__assert_fail@plt>
   13c6c:	ldrh	ip, [r0, #128]	; 0x80
   13c70:	cmp	ip, r3
   13c74:	ldr	ip, [r0, #136]	; 0x88
   13c78:	strhcc	r3, [r0, #128]	; 0x80
   13c7c:	sub	r3, r3, #1
   13c80:	sub	ip, ip, r2
   13c84:	and	r3, r3, ip
   13c88:	mov	ip, #0
   13c8c:	cmp	r2, ip
   13c90:	str	ip, [sp]
   13c94:	str	ip, [sp, #4]
   13c98:	beq	13cb0 <flatcc_builder_create_struct@@Base+0x68>
   13c9c:	str	r2, [sp]
   13ca0:	str	r1, [sp, #8]
   13ca4:	str	r2, [sp, #12]
   13ca8:	mov	r2, #1
   13cac:	str	r2, [sp, #4]
   13cb0:	cmp	r3, #0
   13cb4:	beq	13ce4 <flatcc_builder_create_struct@@Base+0x9c>
   13cb8:	ldr	r2, [sp]
   13cbc:	add	r1, sp, #72	; 0x48
   13cc0:	ldr	ip, [pc, #56]	; 13d00 <flatcc_builder_create_struct@@Base+0xb8>
   13cc4:	add	r2, r2, r3
   13cc8:	str	r2, [sp]
   13ccc:	ldr	r2, [sp, #4]
   13cd0:	add	r2, r2, #1
   13cd4:	add	r1, r1, r2, lsl #3
   13cd8:	str	r2, [sp, #4]
   13cdc:	str	ip, [r1, #-72]	; 0xffffffb8
   13ce0:	str	r3, [r1, #-68]	; 0xffffffbc
   13ce4:	mov	r1, sp
   13ce8:	bl	13368 <flatcc_builder_default_alloc@@Base+0x3e0>
   13cec:	add	sp, sp, #76	; 0x4c
   13cf0:	pop	{pc}		; (ldr pc, [sp], #4)
   13cf4:	andeq	r7, r1, r5, asr r1
   13cf8:	andeq	r7, r1, r9, ror r5
   13cfc:	andeq	r7, r1, r0, asr #12
   13d00:	muleq	r1, r3, lr

00013d04 <flatcc_builder_start_buffer@@Base>:
   13d04:	push	{r4, r5, r6, r7, r8, lr}
   13d08:	mov	r5, r1
   13d0c:	mov	r4, r0
   13d10:	mov	r7, r2
   13d14:	mov	r6, r3
   13d18:	ldrh	r1, [r0, #128]	; 0x80
   13d1c:	bl	130f0 <flatcc_builder_default_alloc@@Base+0x168>
   13d20:	cmp	r0, #0
   13d24:	bne	13d94 <flatcc_builder_start_buffer@@Base+0x90>
   13d28:	ldrh	r3, [r4, #132]	; 0x84
   13d2c:	mov	ip, #1
   13d30:	cmp	r5, #0
   13d34:	ldr	r1, [r4, #32]
   13d38:	strh	ip, [r4, #128]	; 0x80
   13d3c:	strh	r3, [r1, #34]	; 0x22
   13d40:	ldrh	r3, [r4, #164]	; 0xa4
   13d44:	strh	r7, [r4, #132]	; 0x84
   13d48:	strh	r3, [r1, #32]
   13d4c:	ldr	r3, [r4, #144]	; 0x90
   13d50:	strh	r6, [r4, #164]	; 0xa4
   13d54:	str	r3, [r1, #20]
   13d58:	ldr	r3, [r4, #152]	; 0x98
   13d5c:	str	r3, [r1, #28]
   13d60:	ldr	r3, [r4, #136]	; 0x88
   13d64:	str	r3, [r4, #144]	; 0x90
   13d68:	ldr	r3, [r4, #148]	; 0x94
   13d6c:	add	r2, r3, ip
   13d70:	strd	r2, [r4, #148]	; 0x94
   13d74:	ldr	r3, [r4, #168]	; 0xa8
   13d78:	str	r3, [r1, #16]
   13d7c:	ldr	r3, [pc, #24]	; 13d9c <flatcc_builder_start_buffer@@Base+0x98>
   13d80:	moveq	r5, r3
   13d84:	ldr	r3, [r5]
   13d88:	str	r3, [r4, #168]	; 0xa8
   13d8c:	strh	ip, [r1, #14]
   13d90:	pop	{r4, r5, r6, r7, r8, pc}
   13d94:	mvn	r0, #0
   13d98:	pop	{r4, r5, r6, r7, r8, pc}
   13d9c:	muleq	r1, r3, lr

00013da0 <flatcc_builder_end_buffer@@Base>:
   13da0:	push	{r0, r1, r2, r4, r5, lr}
   13da4:	mov	r4, r0
   13da8:	ldrh	r0, [r0, #164]	; 0xa4
   13dac:	ldr	r2, [r4, #152]	; 0x98
   13db0:	and	r0, r0, #2
   13db4:	cmp	r2, #0
   13db8:	orrne	r0, r0, #1
   13dbc:	ldr	r2, [r4, #32]
   13dc0:	ldrh	r2, [r2, #14]
   13dc4:	cmp	r2, #1
   13dc8:	beq	13de0 <flatcc_builder_end_buffer@@Base+0x40>
   13dcc:	ldr	r3, [pc, #120]	; 13e4c <flatcc_builder_end_buffer@@Base+0xac>
   13dd0:	movw	r2, #838	; 0x346
   13dd4:	ldr	r1, [pc, #116]	; 13e50 <flatcc_builder_end_buffer@@Base+0xb0>
   13dd8:	ldr	r0, [pc, #116]	; 13e54 <flatcc_builder_end_buffer@@Base+0xb4>
   13ddc:	bl	12324 <__assert_fail@plt>
   13de0:	ldrh	r2, [r4, #132]	; 0x84
   13de4:	mov	r3, r1
   13de8:	ldrh	r1, [r4, #128]	; 0x80
   13dec:	cmp	r1, r2
   13df0:	strhcc	r2, [r4, #128]	; 0x80
   13df4:	ldrh	r1, [r4, #128]	; 0x80
   13df8:	str	r1, [sp]
   13dfc:	add	r1, r4, #168	; 0xa8
   13e00:	str	r0, [sp, #4]
   13e04:	mov	r0, r4
   13e08:	bl	13a88 <flatcc_builder_create_buffer@@Base>
   13e0c:	subs	r5, r0, #0
   13e10:	beq	13e40 <flatcc_builder_end_buffer@@Base+0xa0>
   13e14:	ldr	r3, [r4, #32]
   13e18:	mov	r0, r4
   13e1c:	ldr	r2, [r3, #20]
   13e20:	str	r2, [r4, #144]	; 0x90
   13e24:	ldr	r2, [r3, #28]
   13e28:	str	r2, [r4, #152]	; 0x98
   13e2c:	ldr	r2, [r3, #16]
   13e30:	ldrh	r3, [r3, #32]
   13e34:	strh	r3, [r4, #164]	; 0xa4
   13e38:	str	r2, [r4, #168]	; 0xa8
   13e3c:	bl	12e84 <_start@@Base+0xa64>
   13e40:	mov	r0, r5
   13e44:	add	sp, sp, #12
   13e48:	pop	{r4, r5, pc}
   13e4c:	andeq	r7, r1, r2, ror r1
   13e50:	andeq	r7, r1, r9, ror r5
   13e54:	andeq	r7, r1, fp, asr #12

00013e58 <flatcc_builder_start_struct@@Base>:
   13e58:	push	{r4, r5, r6, lr}
   13e5c:	mov	r5, r1
   13e60:	mov	r1, r2
   13e64:	mov	r4, r0
   13e68:	bl	130f0 <flatcc_builder_default_alloc@@Base+0x168>
   13e6c:	cmp	r0, #0
   13e70:	bne	13e98 <flatcc_builder_start_struct@@Base+0x40>
   13e74:	ldr	r3, [r4, #32]
   13e78:	mov	r2, #2
   13e7c:	mvn	r1, #3
   13e80:	mov	r0, r4
   13e84:	strh	r2, [r3, #14]
   13e88:	bl	12dc0 <_start@@Base+0x9a0>
   13e8c:	mov	r1, r5
   13e90:	pop	{r4, r5, r6, lr}
   13e94:	b	12e3c <_start@@Base+0xa1c>
   13e98:	mov	r0, #0
   13e9c:	pop	{r4, r5, r6, pc}

00013ea0 <flatcc_builder_struct_edit@@Base>:
   13ea0:	ldr	r0, [r0, #16]
   13ea4:	bx	lr

00013ea8 <flatcc_builder_end_struct@@Base>:
   13ea8:	ldr	r3, [r0, #32]
   13eac:	push	{r4, r5, r6, lr}
   13eb0:	ldrh	r3, [r3, #14]
   13eb4:	cmp	r3, #2
   13eb8:	beq	13ed0 <flatcc_builder_end_struct@@Base+0x28>
   13ebc:	ldr	r3, [pc, #56]	; 13efc <flatcc_builder_end_struct@@Base+0x54>
   13ec0:	mov	r2, #872	; 0x368
   13ec4:	ldr	r1, [pc, #52]	; 13f00 <flatcc_builder_end_struct@@Base+0x58>
   13ec8:	ldr	r0, [pc, #52]	; 13f04 <flatcc_builder_end_struct@@Base+0x5c>
   13ecc:	bl	12324 <__assert_fail@plt>
   13ed0:	ldrh	r3, [r0, #130]	; 0x82
   13ed4:	mov	r4, r0
   13ed8:	ldr	r1, [r0, #16]
   13edc:	ldr	r2, [r0, #20]
   13ee0:	bl	13c48 <flatcc_builder_create_struct@@Base>
   13ee4:	subs	r5, r0, #0
   13ee8:	beq	13ef4 <flatcc_builder_end_struct@@Base+0x4c>
   13eec:	mov	r0, r4
   13ef0:	bl	12e84 <_start@@Base+0xa64>
   13ef4:	mov	r0, r5
   13ef8:	pop	{r4, r5, r6, pc}
   13efc:	andeq	r7, r1, ip, lsl #3
   13f00:	andeq	r7, r1, r9, ror r5
   13f04:	andeq	r7, r1, r7, ror r6

00013f08 <flatcc_builder_extend_vector@@Base>:
   13f08:	push	{r4, r5, r6, lr}
   13f0c:	mov	r4, r0
   13f10:	mov	r5, r1
   13f14:	ldr	r0, [r0, #32]
   13f18:	ldr	r2, [r0, #24]
   13f1c:	bl	133e0 <flatcc_builder_default_alloc@@Base+0x458>
   13f20:	cmp	r0, #0
   13f24:	bne	13f40 <flatcc_builder_extend_vector@@Base+0x38>
   13f28:	ldr	r3, [r4, #32]
   13f2c:	mov	r0, r4
   13f30:	ldr	r1, [r3, #16]
   13f34:	mul	r1, r1, r5
   13f38:	pop	{r4, r5, r6, lr}
   13f3c:	b	12e3c <_start@@Base+0xa1c>
   13f40:	mov	r0, #0
   13f44:	pop	{r4, r5, r6, pc}

00013f48 <flatcc_builder_vector_push@@Base>:
   13f48:	ldr	r3, [r0, #32]
   13f4c:	push	{r4, lr}
   13f50:	ldrh	r2, [r3, #14]
   13f54:	cmp	r2, #4
   13f58:	beq	13f70 <flatcc_builder_vector_push@@Base+0x28>
   13f5c:	ldr	r3, [pc, #68]	; 13fa8 <flatcc_builder_vector_push@@Base+0x60>
   13f60:	movw	r2, #907	; 0x38b
   13f64:	ldr	r1, [pc, #64]	; 13fac <flatcc_builder_vector_push@@Base+0x64>
   13f68:	ldr	r0, [pc, #64]	; 13fb0 <flatcc_builder_vector_push@@Base+0x68>
   13f6c:	bl	12324 <__assert_fail@plt>
   13f70:	ldr	r2, [r3, #20]
   13f74:	ldr	ip, [r3, #24]
   13f78:	cmp	r2, ip
   13f7c:	bls	13f94 <flatcc_builder_vector_push@@Base+0x4c>
   13f80:	ldr	r3, [pc, #32]	; 13fa8 <flatcc_builder_vector_push@@Base+0x60>
   13f84:	mov	r2, #908	; 0x38c
   13f88:	ldr	r1, [pc, #28]	; 13fac <flatcc_builder_vector_push@@Base+0x64>
   13f8c:	ldr	r0, [pc, #32]	; 13fb4 <flatcc_builder_vector_push@@Base+0x6c>
   13f90:	b	13f6c <flatcc_builder_vector_push@@Base+0x24>
   13f94:	add	r2, r2, #1
   13f98:	pop	{r4, lr}
   13f9c:	str	r2, [r3, #20]
   13fa0:	ldr	r2, [r3, #16]
   13fa4:	b	12f0c <_start@@Base+0xaec>
   13fa8:	andeq	r7, r1, r6, lsr #3
   13fac:	andeq	r7, r1, r9, ror r5
   13fb0:	andeq	r7, r1, r3, lsr #13
   13fb4:	andeq	r7, r1, pc, asr #13

00013fb8 <flatcc_builder_append_vector@@Base>:
   13fb8:	push	{r4, r5, r6, lr}
   13fbc:	mov	r4, r0
   13fc0:	ldr	r0, [r0, #32]
   13fc4:	ldrh	r3, [r0, #14]
   13fc8:	cmp	r3, #4
   13fcc:	beq	13fe4 <flatcc_builder_append_vector@@Base+0x2c>
   13fd0:	ldr	r3, [pc, #76]	; 14024 <flatcc_builder_append_vector@@Base+0x6c>
   13fd4:	movw	r2, #915	; 0x393
   13fd8:	ldr	r1, [pc, #72]	; 14028 <flatcc_builder_append_vector@@Base+0x70>
   13fdc:	ldr	r0, [pc, #72]	; 1402c <flatcc_builder_append_vector@@Base+0x74>
   13fe0:	bl	12324 <__assert_fail@plt>
   13fe4:	mov	r6, r1
   13fe8:	mov	r5, r2
   13fec:	mov	r1, r2
   13ff0:	ldr	r2, [r0, #24]
   13ff4:	bl	133e0 <flatcc_builder_default_alloc@@Base+0x458>
   13ff8:	cmp	r0, #0
   13ffc:	bne	1401c <flatcc_builder_append_vector@@Base+0x64>
   14000:	ldr	r3, [r4, #32]
   14004:	mov	r1, r6
   14008:	mov	r0, r4
   1400c:	ldr	r2, [r3, #16]
   14010:	mul	r2, r2, r5
   14014:	pop	{r4, r5, r6, lr}
   14018:	b	12f0c <_start@@Base+0xaec>
   1401c:	mov	r0, #0
   14020:	pop	{r4, r5, r6, pc}
   14024:	andeq	r7, r1, r1, asr #3
   14028:	andeq	r7, r1, r9, ror r5
   1402c:	andeq	r7, r1, r3, lsr #13

00014030 <flatcc_builder_extend_offset_vector@@Base>:
   14030:	push	{r4, r5, r6, lr}
   14034:	mvn	r2, #-1073741824	; 0xc0000000
   14038:	mov	r4, r0
   1403c:	mov	r5, r1
   14040:	ldr	r0, [r0, #32]
   14044:	bl	133e0 <flatcc_builder_default_alloc@@Base+0x458>
   14048:	cmp	r0, #0
   1404c:	bne	14060 <flatcc_builder_extend_offset_vector@@Base+0x30>
   14050:	lsl	r1, r5, #2
   14054:	mov	r0, r4
   14058:	pop	{r4, r5, r6, lr}
   1405c:	b	12e3c <_start@@Base+0xa1c>
   14060:	mov	r0, #0
   14064:	pop	{r4, r5, r6, pc}

00014068 <flatcc_builder_offset_vector_push@@Base>:
   14068:	ldr	r2, [r0, #32]
   1406c:	push	{r4, lr}
   14070:	ldrh	r3, [r2, #14]
   14074:	cmp	r3, #5
   14078:	beq	14090 <flatcc_builder_offset_vector_push@@Base+0x28>
   1407c:	ldr	r3, [pc, #64]	; 140c4 <flatcc_builder_offset_vector_push@@Base+0x5c>
   14080:	movw	r2, #934	; 0x3a6
   14084:	ldr	r1, [pc, #60]	; 140c8 <flatcc_builder_offset_vector_push@@Base+0x60>
   14088:	ldr	r0, [pc, #60]	; 140cc <flatcc_builder_offset_vector_push@@Base+0x64>
   1408c:	bl	12324 <__assert_fail@plt>
   14090:	ldr	r3, [r2, #20]
   14094:	cmn	r3, #-1073741823	; 0xc0000001
   14098:	beq	140bc <flatcc_builder_offset_vector_push@@Base+0x54>
   1409c:	add	r3, r3, #1
   140a0:	mov	r4, r1
   140a4:	mov	r1, #4
   140a8:	str	r3, [r2, #20]
   140ac:	bl	12e3c <_start@@Base+0xa1c>
   140b0:	cmp	r0, #0
   140b4:	strne	r4, [r0]
   140b8:	pop	{r4, pc}
   140bc:	mov	r0, #0
   140c0:	pop	{r4, pc}
   140c4:	ldrdeq	r7, [r1], -lr
   140c8:	andeq	r7, r1, r9, ror r5
   140cc:	andeq	r7, r1, ip, lsl #14

000140d0 <flatcc_builder_append_offset_vector@@Base>:
   140d0:	push	{r4, r5, r6, lr}
   140d4:	mov	r4, r0
   140d8:	ldr	r0, [r0, #32]
   140dc:	ldrh	r3, [r0, #14]
   140e0:	cmp	r3, #5
   140e4:	beq	140fc <flatcc_builder_append_offset_vector@@Base+0x2c>
   140e8:	ldr	r3, [pc, #68]	; 14134 <flatcc_builder_append_offset_vector@@Base+0x64>
   140ec:	mov	r2, #948	; 0x3b4
   140f0:	ldr	r1, [pc, #64]	; 14138 <flatcc_builder_append_offset_vector@@Base+0x68>
   140f4:	ldr	r0, [pc, #64]	; 1413c <flatcc_builder_append_offset_vector@@Base+0x6c>
   140f8:	bl	12324 <__assert_fail@plt>
   140fc:	mov	r5, r2
   14100:	mov	r6, r1
   14104:	mvn	r2, #-1073741824	; 0xc0000000
   14108:	mov	r1, r5
   1410c:	bl	133e0 <flatcc_builder_default_alloc@@Base+0x458>
   14110:	cmp	r0, #0
   14114:	bne	1412c <flatcc_builder_append_offset_vector@@Base+0x5c>
   14118:	lsl	r2, r5, #2
   1411c:	mov	r1, r6
   14120:	mov	r0, r4
   14124:	pop	{r4, r5, r6, lr}
   14128:	b	12f0c <_start@@Base+0xaec>
   1412c:	mov	r0, #0
   14130:	pop	{r4, r5, r6, pc}
   14134:	andeq	r7, r1, r0, lsl #4
   14138:	andeq	r7, r1, r9, ror r5
   1413c:	andeq	r7, r1, ip, lsl #14

00014140 <flatcc_builder_extend_string@@Base>:
   14140:	push	{r4, r5, r6, lr}
   14144:	mov	r4, r0
   14148:	ldr	r0, [r0, #32]
   1414c:	ldrh	r3, [r0, #14]
   14150:	cmp	r3, #6
   14154:	beq	1416c <flatcc_builder_extend_string@@Base+0x2c>
   14158:	ldr	r3, [pc, #56]	; 14198 <flatcc_builder_extend_string@@Base+0x58>
   1415c:	movw	r2, #957	; 0x3bd
   14160:	ldr	r1, [pc, #52]	; 1419c <flatcc_builder_extend_string@@Base+0x5c>
   14164:	ldr	r0, [pc, #52]	; 141a0 <flatcc_builder_extend_string@@Base+0x60>
   14168:	bl	12324 <__assert_fail@plt>
   1416c:	mvn	r2, #0
   14170:	mov	r5, r1
   14174:	bl	133e0 <flatcc_builder_default_alloc@@Base+0x458>
   14178:	cmp	r0, #0
   1417c:	bne	14190 <flatcc_builder_extend_string@@Base+0x50>
   14180:	mov	r1, r5
   14184:	mov	r0, r4
   14188:	pop	{r4, r5, r6, lr}
   1418c:	b	12e3c <_start@@Base+0xa1c>
   14190:	mov	r0, #0
   14194:	pop	{r4, r5, r6, pc}
   14198:	andeq	r7, r1, r4, lsr #4
   1419c:	andeq	r7, r1, r9, ror r5
   141a0:	andeq	r7, r1, pc, lsr r7

000141a4 <flatcc_builder_append_string@@Base>:
   141a4:	push	{r4, r5, r6, lr}
   141a8:	mov	r4, r0
   141ac:	ldr	r0, [r0, #32]
   141b0:	ldrh	r3, [r0, #14]
   141b4:	cmp	r3, #6
   141b8:	beq	141d0 <flatcc_builder_append_string@@Base+0x2c>
   141bc:	ldr	r3, [pc, #68]	; 14208 <flatcc_builder_append_string@@Base+0x64>
   141c0:	movw	r2, #966	; 0x3c6
   141c4:	ldr	r1, [pc, #64]	; 1420c <flatcc_builder_append_string@@Base+0x68>
   141c8:	ldr	r0, [pc, #64]	; 14210 <flatcc_builder_append_string@@Base+0x6c>
   141cc:	bl	12324 <__assert_fail@plt>
   141d0:	mov	r5, r2
   141d4:	mov	r6, r1
   141d8:	mvn	r2, #0
   141dc:	mov	r1, r5
   141e0:	bl	133e0 <flatcc_builder_default_alloc@@Base+0x458>
   141e4:	cmp	r0, #0
   141e8:	bne	14200 <flatcc_builder_append_string@@Base+0x5c>
   141ec:	mov	r2, r5
   141f0:	mov	r1, r6
   141f4:	mov	r0, r4
   141f8:	pop	{r4, r5, r6, lr}
   141fc:	b	12f0c <_start@@Base+0xaec>
   14200:	mov	r0, #0
   14204:	pop	{r4, r5, r6, pc}
   14208:	andeq	r7, r1, r1, asr #4
   1420c:	andeq	r7, r1, r9, ror r5
   14210:	andeq	r7, r1, pc, lsr r7

00014214 <flatcc_builder_append_string_str@@Base>:
   14214:	push	{r4, r5, r6, lr}
   14218:	mov	r5, r0
   1421c:	mov	r0, r1
   14220:	mov	r4, r1
   14224:	bl	122dc <strlen@plt>
   14228:	mov	r2, r0
   1422c:	mov	r1, r4
   14230:	mov	r0, r5
   14234:	pop	{r4, r5, r6, lr}
   14238:	b	141a4 <flatcc_builder_append_string@@Base>

0001423c <flatcc_builder_append_string_strn@@Base>:
   1423c:	push	{r4, r5, r6, lr}
   14240:	mov	r4, r1
   14244:	mov	r6, r0
   14248:	mov	r1, #0
   1424c:	mov	r0, r4
   14250:	mov	r5, r2
   14254:	bl	1230c <memchr@plt>
   14258:	cmp	r0, #0
   1425c:	mov	r1, r4
   14260:	subne	r5, r0, r4
   14264:	mov	r0, r6
   14268:	mov	r2, r5
   1426c:	pop	{r4, r5, r6, lr}
   14270:	b	141a4 <flatcc_builder_append_string@@Base>

00014274 <flatcc_builder_truncate_vector@@Base>:
   14274:	ldr	r3, [r0, #32]
   14278:	push	{r4, lr}
   1427c:	ldrh	r2, [r3, #14]
   14280:	cmp	r2, #4
   14284:	beq	1429c <flatcc_builder_truncate_vector@@Base+0x28>
   14288:	ldr	r3, [pc, #72]	; 142d8 <flatcc_builder_truncate_vector@@Base+0x64>
   1428c:	movw	r2, #985	; 0x3d9
   14290:	ldr	r1, [pc, #68]	; 142dc <flatcc_builder_truncate_vector@@Base+0x68>
   14294:	ldr	r0, [pc, #68]	; 142e0 <flatcc_builder_truncate_vector@@Base+0x6c>
   14298:	bl	12324 <__assert_fail@plt>
   1429c:	ldr	r2, [r3, #20]
   142a0:	cmp	r2, r1
   142a4:	bcs	142bc <flatcc_builder_truncate_vector@@Base+0x48>
   142a8:	ldr	r3, [pc, #40]	; 142d8 <flatcc_builder_truncate_vector@@Base+0x64>
   142ac:	movw	r2, #986	; 0x3da
   142b0:	ldr	r1, [pc, #36]	; 142dc <flatcc_builder_truncate_vector@@Base+0x68>
   142b4:	ldr	r0, [pc, #40]	; 142e4 <flatcc_builder_truncate_vector@@Base+0x70>
   142b8:	b	14298 <flatcc_builder_truncate_vector@@Base+0x24>
   142bc:	sub	r2, r2, r1
   142c0:	str	r2, [r3, #20]
   142c4:	ldr	r3, [r3, #16]
   142c8:	mul	r1, r3, r1
   142cc:	bl	12eec <_start@@Base+0xacc>
   142d0:	mov	r0, #0
   142d4:	pop	{r4, pc}
   142d8:	andeq	r7, r1, lr, asr r2
   142dc:	andeq	r7, r1, r9, ror r5
   142e0:	andeq	r7, r1, r3, lsr #13
   142e4:	andeq	r7, r1, fp, ror #14

000142e8 <flatcc_builder_truncate_offset_vector@@Base>:
   142e8:	ldr	r3, [r0, #32]
   142ec:	push	{r4, lr}
   142f0:	ldrh	r2, [r3, #14]
   142f4:	cmp	r2, #5
   142f8:	beq	14310 <flatcc_builder_truncate_offset_vector@@Base+0x28>
   142fc:	ldr	r3, [pc, #72]	; 1434c <flatcc_builder_truncate_offset_vector@@Base+0x64>
   14300:	movw	r2, #994	; 0x3e2
   14304:	ldr	r1, [pc, #68]	; 14350 <flatcc_builder_truncate_offset_vector@@Base+0x68>
   14308:	ldr	r0, [pc, #68]	; 14354 <flatcc_builder_truncate_offset_vector@@Base+0x6c>
   1430c:	bl	12324 <__assert_fail@plt>
   14310:	ldr	r2, [r3, #20]
   14314:	cmp	r2, r1
   14318:	bcs	14330 <flatcc_builder_truncate_offset_vector@@Base+0x48>
   1431c:	ldr	r3, [pc, #40]	; 1434c <flatcc_builder_truncate_offset_vector@@Base+0x64>
   14320:	movw	r2, #995	; 0x3e3
   14324:	ldr	r1, [pc, #36]	; 14350 <flatcc_builder_truncate_offset_vector@@Base+0x68>
   14328:	ldr	r0, [pc, #40]	; 14358 <flatcc_builder_truncate_offset_vector@@Base+0x70>
   1432c:	b	1430c <flatcc_builder_truncate_offset_vector@@Base+0x24>
   14330:	sub	r2, r2, r1
   14334:	str	r2, [r3, #20]
   14338:	ldr	r3, [r3, #16]
   1433c:	mul	r1, r3, r1
   14340:	bl	12eec <_start@@Base+0xacc>
   14344:	mov	r0, #0
   14348:	pop	{r4, pc}
   1434c:	andeq	r7, r1, sp, ror r2
   14350:	andeq	r7, r1, r9, ror r5
   14354:	andeq	r7, r1, ip, lsl #14
   14358:	andeq	r7, r1, pc, lsl #15

0001435c <flatcc_builder_truncate_string@@Base>:
   1435c:	ldr	r2, [r0, #32]
   14360:	push	{r4, lr}
   14364:	ldrh	r3, [r2, #14]
   14368:	cmp	r3, #6
   1436c:	beq	14384 <flatcc_builder_truncate_string@@Base+0x28>
   14370:	ldr	r3, [pc, #64]	; 143b8 <flatcc_builder_truncate_string@@Base+0x5c>
   14374:	movw	r2, #1003	; 0x3eb
   14378:	ldr	r1, [pc, #60]	; 143bc <flatcc_builder_truncate_string@@Base+0x60>
   1437c:	ldr	r0, [pc, #60]	; 143c0 <flatcc_builder_truncate_string@@Base+0x64>
   14380:	bl	12324 <__assert_fail@plt>
   14384:	ldr	r3, [r2, #20]
   14388:	cmp	r3, r1
   1438c:	bcs	143a4 <flatcc_builder_truncate_string@@Base+0x48>
   14390:	ldr	r3, [pc, #32]	; 143b8 <flatcc_builder_truncate_string@@Base+0x5c>
   14394:	mov	r2, #1004	; 0x3ec
   14398:	ldr	r1, [pc, #28]	; 143bc <flatcc_builder_truncate_string@@Base+0x60>
   1439c:	ldr	r0, [pc, #32]	; 143c4 <flatcc_builder_truncate_string@@Base+0x68>
   143a0:	b	14380 <flatcc_builder_truncate_string@@Base+0x24>
   143a4:	sub	r3, r3, r1
   143a8:	str	r3, [r2, #20]
   143ac:	bl	12eec <_start@@Base+0xacc>
   143b0:	mov	r0, #0
   143b4:	pop	{r4, pc}
   143b8:	andeq	r7, r1, r3, lsr #5
   143bc:	andeq	r7, r1, r9, ror r5
   143c0:	andeq	r7, r1, pc, lsr r7
   143c4:	andeq	r7, r1, sl, asr #15

000143c8 <flatcc_builder_start_vector@@Base>:
   143c8:	cmp	r2, #4
   143cc:	push	{r4, r5, r6, r7, r8, lr}
   143d0:	mov	r7, r1
   143d4:	movcs	r1, r2
   143d8:	movcc	r1, #4
   143dc:	mov	r5, r0
   143e0:	mov	r6, r3
   143e4:	bl	130f0 <flatcc_builder_default_alloc@@Base+0x168>
   143e8:	subs	r4, r0, #0
   143ec:	mvnne	r4, #0
   143f0:	bne	14418 <flatcc_builder_start_vector@@Base+0x50>
   143f4:	ldr	r2, [r5, #32]
   143f8:	mov	r3, #4
   143fc:	mvn	r1, #3
   14400:	mov	r0, r5
   14404:	strh	r3, [r2, #14]
   14408:	str	r7, [r2, #16]
   1440c:	str	r4, [r2, #20]
   14410:	str	r6, [r2, #24]
   14414:	bl	12dc0 <_start@@Base+0x9a0>
   14418:	mov	r0, r4
   1441c:	pop	{r4, r5, r6, r7, r8, pc}

00014420 <flatcc_builder_start_offset_vector@@Base>:
   14420:	push	{r4, r5, r6, lr}
   14424:	mov	r1, #4
   14428:	mov	r5, r0
   1442c:	bl	130f0 <flatcc_builder_default_alloc@@Base+0x168>
   14430:	subs	r4, r0, #0
   14434:	mvnne	r4, #0
   14438:	bne	14460 <flatcc_builder_start_offset_vector@@Base+0x40>
   1443c:	ldr	r3, [r5, #32]
   14440:	mov	r2, #4
   14444:	mvn	r1, #3
   14448:	mov	r0, r5
   1444c:	str	r2, [r3, #16]
   14450:	mov	r2, #5
   14454:	strh	r2, [r3, #14]
   14458:	str	r4, [r3, #20]
   1445c:	bl	12dc0 <_start@@Base+0x9a0>
   14460:	mov	r0, r4
   14464:	pop	{r4, r5, r6, pc}

00014468 <flatcc_builder_start_string@@Base>:
   14468:	push	{r4, r5, r6, lr}
   1446c:	mov	r1, #1
   14470:	mov	r5, r0
   14474:	bl	130f0 <flatcc_builder_default_alloc@@Base+0x168>
   14478:	subs	r4, r0, #0
   1447c:	mvnne	r4, #0
   14480:	bne	144a8 <flatcc_builder_start_string@@Base+0x40>
   14484:	ldr	r3, [r5, #32]
   14488:	mov	r2, #1
   1448c:	mvn	r1, #3
   14490:	mov	r0, r5
   14494:	str	r2, [r3, #16]
   14498:	mov	r2, #6
   1449c:	strh	r2, [r3, #14]
   144a0:	str	r4, [r3, #20]
   144a4:	bl	12dc0 <_start@@Base+0x9a0>
   144a8:	mov	r0, r4
   144ac:	pop	{r4, r5, r6, pc}

000144b0 <flatcc_builder_reserve_table@@Base>:
   144b0:	cmp	r1, #0
   144b4:	bge	144d0 <flatcc_builder_reserve_table@@Base+0x20>
   144b8:	push	{r4, lr}
   144bc:	movw	r2, #1065	; 0x429
   144c0:	ldr	r3, [pc, #12]	; 144d4 <flatcc_builder_reserve_table@@Base+0x24>
   144c4:	ldr	r1, [pc, #12]	; 144d8 <flatcc_builder_reserve_table@@Base+0x28>
   144c8:	ldr	r0, [pc, #12]	; 144dc <flatcc_builder_reserve_table@@Base+0x2c>
   144cc:	bl	12324 <__assert_fail@plt>
   144d0:	b	131c8 <flatcc_builder_default_alloc@@Base+0x240>
   144d4:	andeq	r7, r1, r2, asr #5
   144d8:	andeq	r7, r1, r9, ror r5
   144dc:	andeq	r7, r1, r2, lsl #16

000144e0 <flatcc_builder_start_table@@Base>:
   144e0:	push	{r4, r5, r6, lr}
   144e4:	mov	r5, r1
   144e8:	mov	r1, #4
   144ec:	mov	r4, r0
   144f0:	bl	130f0 <flatcc_builder_default_alloc@@Base+0x168>
   144f4:	cmp	r0, #0
   144f8:	beq	14508 <flatcc_builder_start_table@@Base+0x28>
   144fc:	mvn	r5, #0
   14500:	mov	r0, r5
   14504:	pop	{r4, r5, r6, pc}
   14508:	ldr	r2, [r4, #4]
   1450c:	ldr	r3, [r4, #32]
   14510:	ldr	r1, [r4, #52]	; 0x34
   14514:	sub	r2, r2, r1
   14518:	ldr	r1, [r4, #76]	; 0x4c
   1451c:	str	r2, [r3, #16]
   14520:	ldr	r2, [r4]
   14524:	sub	r2, r2, r1
   14528:	mov	r1, r5
   1452c:	str	r2, [r3, #20]
   14530:	ldr	r2, [r4, #12]
   14534:	str	r2, [r3, #24]
   14538:	ldrh	r2, [r4, #8]
   1453c:	strh	r2, [r3, #28]
   14540:	ldr	r2, [pc, #44]	; 14574 <flatcc_builder_start_table@@Base+0x94>
   14544:	strh	r0, [r4, #8]
   14548:	mov	r0, r4
   1454c:	str	r2, [r4, #12]
   14550:	mov	r2, #3
   14554:	strh	r2, [r3, #14]
   14558:	bl	131c8 <flatcc_builder_default_alloc@@Base+0x240>
   1455c:	subs	r5, r0, #0
   14560:	bne	144fc <flatcc_builder_start_table@@Base+0x1c>
   14564:	movw	r1, #65532	; 0xfffc
   14568:	mov	r0, r4
   1456c:	bl	12dc0 <_start@@Base+0x9a0>
   14570:	b	14500 <flatcc_builder_start_table@@Base+0x20>
   14574:	svccs	0x00693b52

00014578 <flatcc_builder_create_vtable@@Base>:
   14578:	mov	r3, #0
   1457c:	push	{lr}		; (str lr, [sp, #-4]!)
   14580:	sub	sp, sp, #76	; 0x4c
   14584:	cmp	r2, #0
   14588:	str	r3, [sp]
   1458c:	str	r3, [sp, #4]
   14590:	movne	r3, #1
   14594:	strne	r1, [sp, #8]
   14598:	mov	r1, sp
   1459c:	strdne	r2, [sp]
   145a0:	ldr	r3, [r0, #152]	; 0x98
   145a4:	strne	r2, [sp, #12]
   145a8:	cmp	r3, #0
   145ac:	bne	145c8 <flatcc_builder_create_vtable@@Base+0x50>
   145b0:	ldr	r3, [r0, #180]	; 0xb4
   145b4:	cmp	r3, #0
   145b8:	bne	145c8 <flatcc_builder_create_vtable@@Base+0x50>
   145bc:	bl	1324c <flatcc_builder_default_alloc@@Base+0x2c4>
   145c0:	add	sp, sp, #76	; 0x4c
   145c4:	pop	{pc}		; (ldr pc, [sp], #4)
   145c8:	bl	13368 <flatcc_builder_default_alloc@@Base+0x3e0>
   145cc:	cmp	r0, #0
   145d0:	addne	r0, r0, #1
   145d4:	b	145c0 <flatcc_builder_create_vtable@@Base+0x48>

000145d8 <flatcc_builder_create_cached_vtable@@Base>:
   145d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   145dc:	mov	r6, r3
   145e0:	sub	sp, sp, #20
   145e4:	mov	r4, r0
   145e8:	mov	sl, r1
   145ec:	mov	r7, r2
   145f0:	ldr	r3, [r0, #116]	; 0x74
   145f4:	cmp	r3, #0
   145f8:	bne	146a0 <flatcc_builder_create_cached_vtable@@Base+0xc8>
   145fc:	ldr	r5, [r0, #124]	; 0x7c
   14600:	add	r9, r0, #92	; 0x5c
   14604:	cmp	r5, #0
   14608:	beq	14620 <flatcc_builder_create_cached_vtable@@Base+0x48>
   1460c:	ldr	r3, [pc, #560]	; 14844 <flatcc_builder_create_cached_vtable@@Base+0x26c>
   14610:	movw	r2, #342	; 0x156
   14614:	ldr	r1, [pc, #556]	; 14848 <flatcc_builder_create_cached_vtable@@Base+0x270>
   14618:	ldr	r0, [pc, #556]	; 1484c <flatcc_builder_create_cached_vtable@@Base+0x274>
   1461c:	bl	12324 <__assert_fail@plt>
   14620:	mov	r3, #16
   14624:	mov	r2, r5
   14628:	str	r5, [sp]
   1462c:	mov	r1, #6
   14630:	bl	13080 <flatcc_builder_default_alloc@@Base+0xf8>
   14634:	cmp	r0, #0
   14638:	bne	14648 <flatcc_builder_create_cached_vtable@@Base+0x70>
   1463c:	mov	r0, #0
   14640:	add	sp, sp, #20
   14644:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14648:	mov	r3, #16
   1464c:	mov	r1, r9
   14650:	ldr	r0, [r4, #40]	; 0x28
   14654:	mov	r2, #256	; 0x100
   14658:	str	r3, [r4, #124]	; 0x7c
   1465c:	mov	r3, #5
   14660:	ldr	r8, [r4, #48]	; 0x30
   14664:	str	r3, [sp]
   14668:	mov	r3, #1
   1466c:	blx	r8
   14670:	cmp	r0, #0
   14674:	moveq	r3, #256	; 0x100
   14678:	ldreq	r1, [r4, #96]	; 0x60
   1467c:	bne	1463c <flatcc_builder_create_cached_vtable@@Base+0x64>
   14680:	lsl	r2, r3, #1
   14684:	cmp	r2, r1
   14688:	bls	14760 <flatcc_builder_create_cached_vtable@@Base+0x188>
   1468c:	lsr	r3, r3, #2
   14690:	mov	r2, #1
   14694:	cmp	r3, r2, lsl r5
   14698:	bhi	14768 <flatcc_builder_create_cached_vtable@@Base+0x190>
   1469c:	str	r5, [r4, #116]	; 0x74
   146a0:	ldr	r8, [r4, #92]	; 0x5c
   146a4:	ldr	r3, [r4, #116]	; 0x74
   146a8:	rsb	r3, r3, #32
   146ac:	lsr	r6, r6, r3
   146b0:	adds	r3, r8, r6, lsl #2
   146b4:	ldrne	r9, [r8, r6, lsl #2]
   146b8:	movne	fp, #0
   146bc:	str	r3, [sp, #8]
   146c0:	beq	1463c <flatcc_builder_create_cached_vtable@@Base+0x64>
   146c4:	cmp	r9, #0
   146c8:	bne	14770 <flatcc_builder_create_cached_vtable@@Base+0x198>
   146cc:	mov	r3, #16
   146d0:	mov	r1, #6
   146d4:	ldr	r2, [r4, #124]	; 0x7c
   146d8:	mov	r0, r4
   146dc:	str	r9, [sp]
   146e0:	bl	13080 <flatcc_builder_default_alloc@@Base+0xf8>
   146e4:	subs	r5, r0, #0
   146e8:	beq	1463c <flatcc_builder_create_cached_vtable@@Base+0x64>
   146ec:	ldr	r3, [r4, #124]	; 0x7c
   146f0:	mov	r1, sl
   146f4:	mov	r0, r4
   146f8:	add	r2, r3, #16
   146fc:	str	r2, [r4, #124]	; 0x7c
   14700:	ldr	r2, [r4, #152]	; 0x98
   14704:	str	r2, [r5, #4]
   14708:	ldr	r2, [r8, r6, lsl #2]
   1470c:	str	r2, [r5, #12]
   14710:	mov	r2, r7
   14714:	str	r3, [r8, r6, lsl #2]
   14718:	bl	14578 <flatcc_builder_create_vtable@@Base>
   1471c:	cmp	r0, #0
   14720:	str	r0, [r5]
   14724:	beq	1463c <flatcc_builder_create_cached_vtable@@Base+0x64>
   14728:	cmp	fp, #0
   1472c:	ldrne	r3, [fp, #8]
   14730:	strne	r3, [r5, #8]
   14734:	bne	147f8 <flatcc_builder_create_cached_vtable@@Base+0x220>
   14738:	ldr	r2, [r4, #120]	; 0x78
   1473c:	ldr	r3, [r4, #172]	; 0xac
   14740:	cmp	r3, #0
   14744:	beq	14800 <flatcc_builder_create_cached_vtable@@Base+0x228>
   14748:	add	r1, r7, r2
   1474c:	cmp	r3, r1
   14750:	bcs	14800 <flatcc_builder_create_cached_vtable@@Base+0x228>
   14754:	mov	r0, r4
   14758:	bl	1358c <flatcc_builder_flush_vtable_cache@@Base>
   1475c:	b	147f8 <flatcc_builder_create_cached_vtable@@Base+0x220>
   14760:	mov	r3, r2
   14764:	b	14680 <flatcc_builder_create_cached_vtable@@Base+0xa8>
   14768:	add	r5, r5, #1
   1476c:	b	14694 <flatcc_builder_create_cached_vtable@@Base+0xbc>
   14770:	ldr	r0, [r4, #68]	; 0x44
   14774:	str	r3, [sp, #12]
   14778:	ldr	r5, [r4, #100]	; 0x64
   1477c:	add	r5, r5, r9
   14780:	ldr	r2, [r5, #8]
   14784:	add	r1, r0, r2
   14788:	ldrh	r2, [r0, r2]
   1478c:	cmp	r2, r7
   14790:	bne	147ac <flatcc_builder_create_cached_vtable@@Base+0x1d4>
   14794:	mov	r2, r7
   14798:	mov	r0, sl
   1479c:	bl	122a0 <memcmp@plt>
   147a0:	cmp	r0, #0
   147a4:	ldr	r3, [sp, #12]
   147a8:	beq	147b8 <flatcc_builder_create_cached_vtable@@Base+0x1e0>
   147ac:	add	r3, r5, #12
   147b0:	ldr	r9, [r5, #12]
   147b4:	b	146c4 <flatcc_builder_create_cached_vtable@@Base+0xec>
   147b8:	ldr	r1, [r5, #4]
   147bc:	ldr	r2, [r4, #152]	; 0x98
   147c0:	cmp	r1, r2
   147c4:	beq	147d8 <flatcc_builder_create_cached_vtable@@Base+0x200>
   147c8:	add	r3, r5, #12
   147cc:	mov	fp, r5
   147d0:	ldr	r9, [r5, #12]
   147d4:	b	146c4 <flatcc_builder_create_cached_vtable@@Base+0xec>
   147d8:	ldr	r2, [sp, #8]
   147dc:	cmp	r3, r2
   147e0:	beq	147f8 <flatcc_builder_create_cached_vtable@@Base+0x220>
   147e4:	ldr	r2, [r5, #12]
   147e8:	str	r2, [r3]
   147ec:	ldr	r3, [r8, r6, lsl #2]
   147f0:	str	r3, [r5, #12]
   147f4:	str	r9, [r8, r6, lsl #2]
   147f8:	ldr	r0, [r5]
   147fc:	b	14640 <flatcc_builder_create_cached_vtable@@Base+0x68>
   14800:	mov	r3, #0
   14804:	mov	r1, #2
   14808:	mov	r0, r4
   1480c:	str	r3, [sp]
   14810:	mov	r3, r7
   14814:	bl	13080 <flatcc_builder_default_alloc@@Base+0xf8>
   14818:	cmp	r0, #0
   1481c:	mvneq	r0, #0
   14820:	beq	14640 <flatcc_builder_create_cached_vtable@@Base+0x68>
   14824:	ldr	r3, [r4, #120]	; 0x78
   14828:	mov	r2, r7
   1482c:	mov	r1, sl
   14830:	str	r3, [r5, #8]
   14834:	add	r3, r3, r7
   14838:	str	r3, [r4, #120]	; 0x78
   1483c:	bl	12294 <memcpy@plt>
   14840:	b	147f8 <flatcc_builder_create_cached_vtable@@Base+0x220>
   14844:	ldrdeq	r7, [r1], -pc	; <UNPREDICTABLE>
   14848:	andeq	r7, r1, r9, ror r5
   1484c:	andeq	r7, r1, ip, ror #15

00014850 <flatcc_builder_create_table@@Base>:
   14850:	push	{r4, r5, r6, r7, lr}
   14854:	sub	sp, sp, #84	; 0x54
   14858:	ldr	r4, [sp, #108]	; 0x6c
   1485c:	ldr	ip, [sp, #112]	; 0x70
   14860:	cmp	r4, #0
   14864:	bge	1487c <flatcc_builder_create_table@@Base+0x2c>
   14868:	ldr	r3, [pc, #276]	; 14984 <flatcc_builder_create_table@@Base+0x134>
   1486c:	movw	r2, #1237	; 0x4d5
   14870:	ldr	r1, [pc, #272]	; 14988 <flatcc_builder_create_table@@Base+0x138>
   14874:	ldr	r0, [pc, #272]	; 1498c <flatcc_builder_create_table@@Base+0x13c>
   14878:	bl	12324 <__assert_fail@plt>
   1487c:	tst	ip, #1
   14880:	bne	14898 <flatcc_builder_create_table@@Base+0x48>
   14884:	ldr	r3, [pc, #248]	; 14984 <flatcc_builder_create_table@@Base+0x134>
   14888:	movw	r2, #1243	; 0x4db
   1488c:	ldr	r1, [pc, #244]	; 14988 <flatcc_builder_create_table@@Base+0x138>
   14890:	ldr	r0, [pc, #248]	; 14990 <flatcc_builder_create_table@@Base+0x140>
   14894:	b	14878 <flatcc_builder_create_table@@Base+0x28>
   14898:	cmp	r3, #4
   1489c:	sub	ip, ip, #1
   148a0:	movcs	lr, r3
   148a4:	ldrh	r3, [r0, #128]	; 0x80
   148a8:	movcc	lr, #4
   148ac:	cmp	r3, lr
   148b0:	ldr	r3, [r0, #136]	; 0x88
   148b4:	strhcc	lr, [r0, #128]	; 0x80
   148b8:	sub	lr, lr, #1
   148bc:	sub	r5, r3, r2
   148c0:	sub	r3, r5, #4
   148c4:	and	lr, lr, r5
   148c8:	sub	ip, r3, ip
   148cc:	sub	r3, lr, r3
   148d0:	sub	ip, ip, lr
   148d4:	sub	r3, r3, #4
   148d8:	str	ip, [sp, #4]
   148dc:	ldr	ip, [sp, #104]	; 0x68
   148e0:	add	r4, ip, r4, lsl #1
   148e4:	cmp	r4, ip
   148e8:	bne	1496c <flatcc_builder_create_table@@Base+0x11c>
   148ec:	mov	r3, #4
   148f0:	cmp	r2, #0
   148f4:	add	ip, sp, r3
   148f8:	str	r3, [sp, #8]
   148fc:	str	ip, [sp, #16]
   14900:	str	r3, [sp, #20]
   14904:	mov	r3, #1
   14908:	str	r3, [sp, #12]
   1490c:	beq	14928 <flatcc_builder_create_table@@Base+0xd8>
   14910:	add	r3, r2, #4
   14914:	str	r3, [sp, #8]
   14918:	mov	r3, #2
   1491c:	str	r1, [sp, #24]
   14920:	str	r3, [sp, #12]
   14924:	str	r2, [sp, #28]
   14928:	cmp	lr, #0
   1492c:	beq	1495c <flatcc_builder_create_table@@Base+0x10c>
   14930:	ldr	r3, [sp, #8]
   14934:	add	r2, sp, #80	; 0x50
   14938:	ldr	r1, [pc, #84]	; 14994 <flatcc_builder_create_table@@Base+0x144>
   1493c:	add	r3, r3, lr
   14940:	str	r3, [sp, #8]
   14944:	ldr	r3, [sp, #12]
   14948:	add	r3, r3, #1
   1494c:	add	r2, r2, r3, lsl #3
   14950:	str	r3, [sp, #12]
   14954:	str	r1, [r2, #-72]	; 0xffffffb8
   14958:	str	lr, [r2, #-68]	; 0xffffffbc
   1495c:	add	r1, sp, #8
   14960:	bl	13368 <flatcc_builder_default_alloc@@Base+0x3e0>
   14964:	add	sp, sp, #84	; 0x54
   14968:	pop	{r4, r5, r6, r7, pc}
   1496c:	ldrh	r5, [ip], #2
   14970:	ldr	r6, [r1, r5]
   14974:	sub	r7, r3, r5
   14978:	add	r6, r6, r7
   1497c:	str	r6, [r1, r5]
   14980:	b	148e4 <flatcc_builder_create_table@@Base+0x94>
   14984:	andeq	r7, r1, r8, ror #5
   14988:	andeq	r7, r1, r9, ror r5
   1498c:	strdeq	r7, [r1], -fp
   14990:	andeq	r7, r1, sp, lsl #16
   14994:	muleq	r1, r3, lr

00014998 <flatcc_builder_check_required_field@@Base>:
   14998:	ldr	r3, [r0, #32]
   1499c:	ldrh	r3, [r3, #14]
   149a0:	cmp	r3, #3
   149a4:	beq	149c0 <flatcc_builder_check_required_field@@Base+0x28>
   149a8:	push	{r4, lr}
   149ac:	movw	r2, #1272	; 0x4f8
   149b0:	ldr	r3, [pc, #52]	; 149ec <flatcc_builder_check_required_field@@Base+0x54>
   149b4:	ldr	r1, [pc, #52]	; 149f0 <flatcc_builder_check_required_field@@Base+0x58>
   149b8:	ldr	r0, [pc, #52]	; 149f4 <flatcc_builder_check_required_field@@Base+0x5c>
   149bc:	bl	12324 <__assert_fail@plt>
   149c0:	ldrh	r3, [r0, #8]
   149c4:	cmp	r3, r1
   149c8:	bls	149e4 <flatcc_builder_check_required_field@@Base+0x4c>
   149cc:	ldr	r3, [r0, #4]
   149d0:	lsl	r1, r1, #1
   149d4:	ldrh	r0, [r3, r1]
   149d8:	adds	r0, r0, #0
   149dc:	movne	r0, #1
   149e0:	bx	lr
   149e4:	mov	r0, #0
   149e8:	bx	lr
   149ec:	andeq	r7, r1, r4, lsl #6
   149f0:	andeq	r7, r1, r9, ror r5
   149f4:	andeq	r7, r1, r8, lsl r8

000149f8 <flatcc_builder_check_union_field@@Base>:
   149f8:	ldr	r3, [r0, #32]
   149fc:	ldrh	r3, [r3, #14]
   14a00:	cmp	r3, #3
   14a04:	beq	14a20 <flatcc_builder_check_union_field@@Base+0x28>
   14a08:	push	{r4, lr}
   14a0c:	movw	r2, #1279	; 0x4ff
   14a10:	ldr	r3, [pc, #104]	; 14a80 <flatcc_builder_check_union_field@@Base+0x88>
   14a14:	ldr	r1, [pc, #104]	; 14a84 <flatcc_builder_check_union_field@@Base+0x8c>
   14a18:	ldr	r0, [pc, #104]	; 14a88 <flatcc_builder_check_union_field@@Base+0x90>
   14a1c:	bl	12324 <__assert_fail@plt>
   14a20:	cmp	r1, #0
   14a24:	beq	14a78 <flatcc_builder_check_union_field@@Base+0x80>
   14a28:	ldrh	r3, [r0, #8]
   14a2c:	cmp	r3, r1
   14a30:	bls	14a78 <flatcc_builder_check_union_field@@Base+0x80>
   14a34:	ldr	r3, [r0, #4]
   14a38:	sub	r1, r1, #-2147483647	; 0x80000001
   14a3c:	lsl	r1, r1, #1
   14a40:	ldrh	r2, [r3, r1]!
   14a44:	cmp	r2, #0
   14a48:	ldrh	r1, [r3, #2]
   14a4c:	bne	14a5c <flatcc_builder_check_union_field@@Base+0x64>
   14a50:	clz	r0, r1
   14a54:	lsr	r0, r0, #5
   14a58:	bx	lr
   14a5c:	ldr	r3, [r0, #16]
   14a60:	ldrb	r3, [r3, r2]
   14a64:	cmp	r3, #0
   14a68:	beq	14a50 <flatcc_builder_check_union_field@@Base+0x58>
   14a6c:	adds	r0, r1, #0
   14a70:	movne	r0, #1
   14a74:	bx	lr
   14a78:	mov	r0, #0
   14a7c:	bx	lr
   14a80:	andeq	r7, r1, r8, lsr #6
   14a84:	andeq	r7, r1, r9, ror r5
   14a88:	andeq	r7, r1, r8, lsl r8

00014a8c <flatcc_builder_check_required@@Base>:
   14a8c:	ldr	r3, [r0, #32]
   14a90:	push	{r4, lr}
   14a94:	ldrh	r3, [r3, #14]
   14a98:	cmp	r3, #3
   14a9c:	beq	14ab4 <flatcc_builder_check_required@@Base+0x28>
   14aa0:	ldr	r3, [pc, #84]	; 14afc <flatcc_builder_check_required@@Base+0x70>
   14aa4:	movw	r2, #1297	; 0x511
   14aa8:	ldr	r1, [pc, #80]	; 14b00 <flatcc_builder_check_required@@Base+0x74>
   14aac:	ldr	r0, [pc, #80]	; 14b04 <flatcc_builder_check_required@@Base+0x78>
   14ab0:	bl	12324 <__assert_fail@plt>
   14ab4:	ldrh	r3, [r0, #8]
   14ab8:	cmp	r3, r2
   14abc:	subge	r1, r1, #2
   14ac0:	movge	ip, #0
   14ac4:	bge	14aec <flatcc_builder_check_required@@Base+0x60>
   14ac8:	mov	r0, #0
   14acc:	pop	{r4, pc}
   14ad0:	ldrh	r3, [r1, #2]!
   14ad4:	ldr	lr, [r0, #4]
   14ad8:	lsl	r3, r3, #1
   14adc:	ldrh	r3, [lr, r3]
   14ae0:	cmp	r3, #0
   14ae4:	beq	14ac8 <flatcc_builder_check_required@@Base+0x3c>
   14ae8:	add	ip, ip, #1
   14aec:	cmp	ip, r2
   14af0:	blt	14ad0 <flatcc_builder_check_required@@Base+0x44>
   14af4:	mov	r0, #1
   14af8:	pop	{r4, pc}
   14afc:	andeq	r7, r1, r9, asr #6
   14b00:	andeq	r7, r1, r9, ror r5
   14b04:	andeq	r7, r1, r8, lsl r8

00014b08 <flatcc_builder_end_table@@Base>:
   14b08:	ldr	r3, [r0, #32]
   14b0c:	push	{r4, r5, r6, r7, lr}
   14b10:	sub	sp, sp, #20
   14b14:	ldrh	r3, [r3, #14]
   14b18:	cmp	r3, #3
   14b1c:	beq	14b34 <flatcc_builder_end_table@@Base+0x2c>
   14b20:	ldr	r3, [pc, #260]	; 14c2c <flatcc_builder_end_table@@Base+0x124>
   14b24:	movw	r2, #1317	; 0x525
   14b28:	ldr	r1, [pc, #256]	; 14c30 <flatcc_builder_end_table@@Base+0x128>
   14b2c:	ldr	r0, [pc, #256]	; 14c34 <flatcc_builder_end_table@@Base+0x12c>
   14b30:	bl	12324 <__assert_fail@plt>
   14b34:	ldrh	r5, [r0, #8]
   14b38:	mov	r4, r0
   14b3c:	ldr	r1, [r0, #4]
   14b40:	ldr	r3, [r0, #20]
   14b44:	add	r5, r5, #2
   14b48:	lsl	r5, r5, #1
   14b4c:	sub	r6, r1, #4
   14b50:	uxth	r5, r5
   14b54:	add	r3, r3, #4
   14b58:	uxth	r2, r3
   14b5c:	ldr	r3, [r0, #12]
   14b60:	strh	r5, [r1, #-4]
   14b64:	strh	r2, [r1, #-2]
   14b68:	ldr	r1, [pc, #200]	; 14c38 <flatcc_builder_end_table@@Base+0x130>
   14b6c:	eor	r3, r3, r5
   14b70:	mul	r3, r1, r3
   14b74:	eor	r3, r3, r2
   14b78:	mov	r2, r5
   14b7c:	mul	r3, r1, r3
   14b80:	mov	r1, r6
   14b84:	str	r3, [r0, #12]
   14b88:	bl	145d8 <flatcc_builder_create_cached_vtable@@Base>
   14b8c:	subs	r7, r0, #0
   14b90:	beq	14c20 <flatcc_builder_end_table@@Base+0x118>
   14b94:	mov	r2, r5
   14b98:	mov	r1, #0
   14b9c:	mov	r0, r6
   14ba0:	bl	122f4 <memset@plt>
   14ba4:	ldr	r3, [r4, #32]
   14ba8:	mov	r0, r4
   14bac:	ldr	r2, [r4, #76]	; 0x4c
   14bb0:	ldr	r3, [r3, #20]
   14bb4:	str	r7, [sp, #8]
   14bb8:	add	r2, r2, r3
   14bbc:	ldr	r3, [r4]
   14bc0:	sub	r3, r3, r2
   14bc4:	asr	r3, r3, #1
   14bc8:	strd	r2, [sp]
   14bcc:	ldrh	r3, [r4, #130]	; 0x82
   14bd0:	ldr	r1, [r4, #16]
   14bd4:	ldr	r2, [r4, #20]
   14bd8:	bl	14850 <flatcc_builder_create_table@@Base>
   14bdc:	subs	r7, r0, #0
   14be0:	beq	14c20 <flatcc_builder_end_table@@Base+0x118>
   14be4:	ldr	r3, [r4, #32]
   14be8:	mov	r0, r4
   14bec:	ldr	r1, [r3, #16]
   14bf0:	ldr	r2, [r3, #24]
   14bf4:	str	r2, [r4, #12]
   14bf8:	ldrh	r2, [r3, #28]
   14bfc:	ldr	r3, [r3, #20]
   14c00:	strh	r2, [r4, #8]
   14c04:	ldr	r2, [r4, #52]	; 0x34
   14c08:	add	r2, r2, r1
   14c0c:	str	r2, [r4, #4]
   14c10:	ldr	r2, [r4, #76]	; 0x4c
   14c14:	add	r3, r2, r3
   14c18:	str	r3, [r4]
   14c1c:	bl	12e84 <_start@@Base+0xa64>
   14c20:	mov	r0, r7
   14c24:	add	sp, sp, #20
   14c28:	pop	{r4, r5, r6, r7, pc}
   14c2c:	andeq	r7, r1, r7, ror #6
   14c30:	andeq	r7, r1, r9, ror r5
   14c34:	andeq	r7, r1, r8, lsl r8
   14c38:			; <UNDEFINED> instruction: 0x9e3779b1

00014c3c <flatcc_builder_create_vector@@Base>:
   14c3c:	push	{lr}		; (str lr, [sp, #-4]!)
   14c40:	sub	sp, sp, #84	; 0x54
   14c44:	ldr	lr, [sp, #92]	; 0x5c
   14c48:	ldrh	ip, [sp, #88]	; 0x58
   14c4c:	cmp	r2, lr
   14c50:	bls	14c68 <flatcc_builder_create_vector@@Base+0x2c>
   14c54:	ldr	r3, [pc, #184]	; 14d14 <flatcc_builder_create_vector@@Base+0xd8>
   14c58:	movw	r2, #1365	; 0x555
   14c5c:	ldr	r1, [pc, #180]	; 14d18 <flatcc_builder_create_vector@@Base+0xdc>
   14c60:	ldr	r0, [pc, #180]	; 14d1c <flatcc_builder_create_vector@@Base+0xe0>
   14c64:	bl	12324 <__assert_fail@plt>
   14c68:	ldrh	lr, [r0, #128]	; 0x80
   14c6c:	mul	r3, r3, r2
   14c70:	cmp	ip, #4
   14c74:	str	r2, [sp, #4]
   14c78:	movcc	ip, #4
   14c7c:	ldr	r2, [r0, #136]	; 0x88
   14c80:	cmp	lr, ip
   14c84:	sub	r2, r2, r3
   14c88:	strhcc	ip, [r0, #128]	; 0x80
   14c8c:	sub	ip, ip, #1
   14c90:	and	ip, ip, r2
   14c94:	mov	r2, #4
   14c98:	add	lr, sp, r2
   14c9c:	cmp	r3, #0
   14ca0:	str	r2, [sp, #8]
   14ca4:	str	lr, [sp, #16]
   14ca8:	str	r2, [sp, #20]
   14cac:	mov	r2, #1
   14cb0:	str	r2, [sp, #12]
   14cb4:	beq	14cd0 <flatcc_builder_create_vector@@Base+0x94>
   14cb8:	add	r2, r3, #4
   14cbc:	str	r3, [sp, #28]
   14cc0:	mov	r3, #2
   14cc4:	str	r2, [sp, #8]
   14cc8:	str	r3, [sp, #12]
   14ccc:	str	r1, [sp, #24]
   14cd0:	cmp	ip, #0
   14cd4:	beq	14d04 <flatcc_builder_create_vector@@Base+0xc8>
   14cd8:	ldr	r3, [sp, #8]
   14cdc:	add	r2, sp, #80	; 0x50
   14ce0:	ldr	r1, [pc, #56]	; 14d20 <flatcc_builder_create_vector@@Base+0xe4>
   14ce4:	add	r3, r3, ip
   14ce8:	str	r3, [sp, #8]
   14cec:	ldr	r3, [sp, #12]
   14cf0:	add	r3, r3, #1
   14cf4:	add	r2, r2, r3, lsl #3
   14cf8:	str	r3, [sp, #12]
   14cfc:	str	r1, [r2, #-72]	; 0xffffffb8
   14d00:	str	ip, [r2, #-68]	; 0xffffffbc
   14d04:	add	r1, sp, #8
   14d08:	bl	13368 <flatcc_builder_default_alloc@@Base+0x3e0>
   14d0c:	add	sp, sp, #84	; 0x54
   14d10:	pop	{pc}		; (ldr pc, [sp], #4)
   14d14:	andeq	r7, r1, r0, lsl #7
   14d18:	andeq	r7, r1, r9, ror r5
   14d1c:	andeq	r7, r1, r3, asr #16
   14d20:	muleq	r1, r3, lr

00014d24 <flatcc_builder_end_vector@@Base>:
   14d24:	push	{r0, r1, r2, r4, r5, lr}
   14d28:	ldr	r2, [r0, #32]
   14d2c:	ldrh	r3, [r2, #14]
   14d30:	cmp	r3, #4
   14d34:	beq	14d4c <flatcc_builder_end_vector@@Base+0x28>
   14d38:	ldr	r3, [pc, #76]	; 14d8c <flatcc_builder_end_vector@@Base+0x68>
   14d3c:	movw	r2, #1400	; 0x578
   14d40:	ldr	r1, [pc, #72]	; 14d90 <flatcc_builder_end_vector@@Base+0x6c>
   14d44:	ldr	r0, [pc, #72]	; 14d94 <flatcc_builder_end_vector@@Base+0x70>
   14d48:	bl	12324 <__assert_fail@plt>
   14d4c:	ldr	r3, [r2, #24]
   14d50:	mov	r4, r0
   14d54:	str	r3, [sp, #4]
   14d58:	ldrh	r3, [r0, #130]	; 0x82
   14d5c:	str	r3, [sp]
   14d60:	ldr	r3, [r2, #16]
   14d64:	ldr	r1, [r0, #16]
   14d68:	ldr	r2, [r2, #20]
   14d6c:	bl	14c3c <flatcc_builder_create_vector@@Base>
   14d70:	subs	r5, r0, #0
   14d74:	beq	14d80 <flatcc_builder_end_vector@@Base+0x5c>
   14d78:	mov	r0, r4
   14d7c:	bl	12e84 <_start@@Base+0xa64>
   14d80:	mov	r0, r5
   14d84:	add	sp, sp, #12
   14d88:	pop	{r4, r5, pc}
   14d8c:	muleq	r1, sp, r3
   14d90:	andeq	r7, r1, r9, ror r5
   14d94:	andeq	r7, r1, r3, lsr #13

00014d98 <flatcc_builder_vector_count@@Base>:
   14d98:	ldr	r3, [r0, #32]
   14d9c:	ldr	r0, [r3, #20]
   14da0:	bx	lr

00014da4 <flatcc_builder_vector_edit@@Base>:
   14da4:	ldr	r0, [r0, #16]
   14da8:	bx	lr

00014dac <flatcc_builder_create_offset_vector_direct@@Base>:
   14dac:	cmn	r2, #-1073741823	; 0xc0000001
   14db0:	bhi	14dbc <flatcc_builder_create_offset_vector_direct@@Base+0x10>
   14db4:	mov	r3, #0
   14db8:	b	13434 <flatcc_builder_default_alloc@@Base+0x4ac>
   14dbc:	mov	r0, #0
   14dc0:	bx	lr

00014dc4 <flatcc_builder_end_offset_vector@@Base>:
   14dc4:	ldr	r3, [r0, #32]
   14dc8:	push	{r4, r5, r6, lr}
   14dcc:	ldrh	r2, [r3, #14]
   14dd0:	cmp	r2, #5
   14dd4:	beq	14dec <flatcc_builder_end_offset_vector@@Base+0x28>
   14dd8:	ldr	r3, [pc, #52]	; 14e14 <flatcc_builder_end_offset_vector@@Base+0x50>
   14ddc:	movw	r2, #1480	; 0x5c8
   14de0:	ldr	r1, [pc, #48]	; 14e18 <flatcc_builder_end_offset_vector@@Base+0x54>
   14de4:	ldr	r0, [pc, #48]	; 14e1c <flatcc_builder_end_offset_vector@@Base+0x58>
   14de8:	bl	12324 <__assert_fail@plt>
   14dec:	ldr	r1, [r0, #16]
   14df0:	mov	r4, r0
   14df4:	ldr	r2, [r3, #20]
   14df8:	bl	14dac <flatcc_builder_create_offset_vector_direct@@Base>
   14dfc:	subs	r5, r0, #0
   14e00:	beq	14e0c <flatcc_builder_end_offset_vector@@Base+0x48>
   14e04:	mov	r0, r4
   14e08:	bl	12e84 <_start@@Base+0xa64>
   14e0c:	mov	r0, r5
   14e10:	pop	{r4, r5, r6, pc}
   14e14:			; <UNDEFINED> instruction: 0x000173b7
   14e18:	andeq	r7, r1, r9, ror r5
   14e1c:	andeq	r7, r1, ip, lsl #14

00014e20 <flatcc_builder_create_offset_vector@@Base>:
   14e20:	push	{r4, r5, r6, lr}
   14e24:	mov	r4, r0
   14e28:	mov	r6, r1
   14e2c:	mov	r5, r2
   14e30:	bl	14420 <flatcc_builder_start_offset_vector@@Base>
   14e34:	cmp	r0, #0
   14e38:	bne	14e68 <flatcc_builder_create_offset_vector@@Base+0x48>
   14e3c:	mov	r1, r5
   14e40:	mov	r0, r4
   14e44:	bl	14030 <flatcc_builder_extend_offset_vector@@Base>
   14e48:	cmp	r0, #0
   14e4c:	beq	14e68 <flatcc_builder_create_offset_vector@@Base+0x48>
   14e50:	lsl	r2, r5, #2
   14e54:	mov	r1, r6
   14e58:	bl	12294 <memcpy@plt>
   14e5c:	mov	r0, r4
   14e60:	pop	{r4, r5, r6, lr}
   14e64:	b	14dc4 <flatcc_builder_end_offset_vector@@Base>
   14e68:	mov	r0, #0
   14e6c:	pop	{r4, r5, r6, pc}

00014e70 <flatcc_builder_end_offset_vector_for_unions@@Base>:
   14e70:	ldr	r2, [r0, #32]
   14e74:	mov	r3, r1
   14e78:	push	{r4, r5, r6, lr}
   14e7c:	ldrh	r1, [r2, #14]
   14e80:	cmp	r1, #5
   14e84:	beq	14e9c <flatcc_builder_end_offset_vector_for_unions@@Base+0x2c>
   14e88:	ldr	r3, [pc, #64]	; 14ed0 <flatcc_builder_end_offset_vector_for_unions@@Base+0x60>
   14e8c:	movw	r2, #1493	; 0x5d5
   14e90:	ldr	r1, [pc, #60]	; 14ed4 <flatcc_builder_end_offset_vector_for_unions@@Base+0x64>
   14e94:	ldr	r0, [pc, #60]	; 14ed8 <flatcc_builder_end_offset_vector_for_unions@@Base+0x68>
   14e98:	bl	12324 <__assert_fail@plt>
   14e9c:	ldr	r2, [r2, #20]
   14ea0:	cmn	r2, #-1073741823	; 0xc0000001
   14ea4:	movhi	r5, #0
   14ea8:	bhi	14ec8 <flatcc_builder_end_offset_vector_for_unions@@Base+0x58>
   14eac:	ldr	r1, [r0, #16]
   14eb0:	mov	r4, r0
   14eb4:	bl	13434 <flatcc_builder_default_alloc@@Base+0x4ac>
   14eb8:	subs	r5, r0, #0
   14ebc:	beq	14ec8 <flatcc_builder_end_offset_vector_for_unions@@Base+0x58>
   14ec0:	mov	r0, r4
   14ec4:	bl	12e84 <_start@@Base+0xa64>
   14ec8:	mov	r0, r5
   14ecc:	pop	{r4, r5, r6, pc}
   14ed0:	ldrdeq	r7, [r1], -r8
   14ed4:	andeq	r7, r1, r9, ror r5
   14ed8:	andeq	r7, r1, ip, lsl #14

00014edc <flatcc_builder_offset_vector_edit@@Base>:
   14edc:	ldr	r0, [r0, #16]
   14ee0:	bx	lr

00014ee4 <flatcc_builder_offset_vector_count@@Base>:
   14ee4:	ldr	r3, [r0, #32]
   14ee8:	ldr	r0, [r3, #20]
   14eec:	bx	lr

00014ef0 <flatcc_builder_create_union_vector_direct@@Base>:
   14ef0:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   14ef4:	mov	r4, r0
   14ef8:	ldr	r5, [sp, #32]
   14efc:	cmn	r5, #-1073741823	; 0xc0000001
   14f00:	bls	14f1c <flatcc_builder_create_union_vector_direct@@Base+0x2c>
   14f04:	mov	r3, #0
   14f08:	str	r3, [r4]
   14f0c:	str	r3, [r4, #4]
   14f10:	mov	r0, r4
   14f14:	add	sp, sp, #8
   14f18:	pop	{r4, r5, r6, r7, r8, pc}
   14f1c:	mov	r7, r1
   14f20:	mov	r8, r2
   14f24:	mov	r1, r3
   14f28:	mov	r0, r7
   14f2c:	mov	r3, r2
   14f30:	mov	r2, r5
   14f34:	bl	13434 <flatcc_builder_default_alloc@@Base+0x4ac>
   14f38:	subs	r6, r0, #0
   14f3c:	beq	14f04 <flatcc_builder_create_union_vector_direct@@Base+0x14>
   14f40:	mvn	r3, #0
   14f44:	mov	r2, r5
   14f48:	mov	r1, r8
   14f4c:	mov	r0, r7
   14f50:	str	r3, [sp, #4]
   14f54:	mov	r3, #1
   14f58:	str	r3, [sp]
   14f5c:	bl	14c3c <flatcc_builder_create_vector@@Base>
   14f60:	stm	r4, {r0, r6}
   14f64:	b	14f10 <flatcc_builder_create_union_vector_direct@@Base+0x20>

00014f68 <flatcc_builder_create_union_vector@@Base>:
   14f68:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   14f6c:	mov	r6, r0
   14f70:	mov	r0, r1
   14f74:	mov	r5, r1
   14f78:	mov	r8, r2
   14f7c:	mov	r7, r3
   14f80:	bl	14420 <flatcc_builder_start_offset_vector@@Base>
   14f84:	subs	r4, r0, #0
   14f88:	beq	14fa4 <flatcc_builder_create_union_vector@@Base+0x3c>
   14f8c:	mov	r3, #0
   14f90:	str	r3, [r6]
   14f94:	str	r3, [r6, #4]
   14f98:	mov	r0, r6
   14f9c:	add	sp, sp, #16
   14fa0:	pop	{r4, r5, r6, r7, r8, pc}
   14fa4:	mov	r1, r7
   14fa8:	mov	r0, r5
   14fac:	bl	14030 <flatcc_builder_extend_offset_vector@@Base>
   14fb0:	cmp	r0, #0
   14fb4:	beq	14f8c <flatcc_builder_create_union_vector@@Base+0x24>
   14fb8:	mov	r1, r7
   14fbc:	mov	r0, r5
   14fc0:	bl	12e3c <_start@@Base+0xa1c>
   14fc4:	subs	r2, r0, #0
   14fc8:	movne	r1, r4
   14fcc:	addne	r0, r8, #4
   14fd0:	ldrne	r3, [r5, #16]
   14fd4:	beq	14f8c <flatcc_builder_create_union_vector@@Base+0x24>
   14fd8:	cmp	r1, r7
   14fdc:	bne	1500c <flatcc_builder_create_union_vector@@Base+0xa4>
   14fe0:	add	r0, sp, #8
   14fe4:	str	r1, [sp]
   14fe8:	mov	r1, r5
   14fec:	bl	14ef0 <flatcc_builder_create_union_vector_direct@@Base>
   14ff0:	ldr	r7, [sp, #8]
   14ff4:	mov	r0, r5
   14ff8:	ldr	r4, [sp, #12]
   14ffc:	bl	12e84 <_start@@Base+0xa64>
   15000:	str	r7, [r6]
   15004:	str	r4, [r6, #4]
   15008:	b	14f98 <flatcc_builder_create_union_vector@@Base+0x30>
   1500c:	ldrb	ip, [r8, r1, lsl #3]
   15010:	strb	ip, [r2, r1]
   15014:	ldr	ip, [r0, r1, lsl #3]
   15018:	str	ip, [r3, r1, lsl #2]
   1501c:	add	r1, r1, #1
   15020:	b	14fd8 <flatcc_builder_create_union_vector@@Base+0x70>

00015024 <flatcc_builder_start_union_vector@@Base>:
   15024:	push	{r4, r5, r6, lr}
   15028:	mov	r1, #4
   1502c:	mov	r5, r0
   15030:	bl	130f0 <flatcc_builder_default_alloc@@Base+0x168>
   15034:	subs	r4, r0, #0
   15038:	mvnne	r4, #0
   1503c:	bne	15064 <flatcc_builder_start_union_vector@@Base+0x40>
   15040:	ldr	r3, [r5, #32]
   15044:	mov	r2, #8
   15048:	mvn	r1, #3
   1504c:	mov	r0, r5
   15050:	str	r2, [r3, #16]
   15054:	mov	r2, #7
   15058:	strh	r2, [r3, #14]
   1505c:	str	r4, [r3, #20]
   15060:	bl	12dc0 <_start@@Base+0x9a0>
   15064:	mov	r0, r4
   15068:	pop	{r4, r5, r6, pc}

0001506c <flatcc_builder_end_union_vector@@Base>:
   1506c:	ldr	r3, [r1, #32]
   15070:	push	{r4, r5, r6, r7, lr}
   15074:	sub	sp, sp, #20
   15078:	ldrh	r2, [r3, #14]
   1507c:	cmp	r2, #7
   15080:	beq	15098 <flatcc_builder_end_union_vector@@Base+0x2c>
   15084:	ldr	r3, [pc, #156]	; 15128 <flatcc_builder_end_union_vector@@Base+0xbc>
   15088:	movw	r2, #1617	; 0x651
   1508c:	ldr	r1, [pc, #152]	; 1512c <flatcc_builder_end_union_vector@@Base+0xc0>
   15090:	ldr	r0, [pc, #152]	; 15130 <flatcc_builder_end_union_vector@@Base+0xc4>
   15094:	bl	12324 <__assert_fail@plt>
   15098:	ldr	r7, [r3, #20]
   1509c:	mov	r4, r0
   150a0:	mov	r5, r1
   150a4:	mov	r0, r1
   150a8:	lsl	r6, r7, #2
   150ac:	add	r1, r6, r7
   150b0:	bl	12e3c <_start@@Base+0xa1c>
   150b4:	subs	r3, r0, #0
   150b8:	streq	r3, [r4]
   150bc:	streq	r3, [r4, #4]
   150c0:	beq	15104 <flatcc_builder_end_union_vector@@Base+0x98>
   150c4:	ldr	r0, [r5, #16]
   150c8:	add	r2, r3, r6
   150cc:	mov	r1, #0
   150d0:	add	ip, r0, #4
   150d4:	cmp	r1, r7
   150d8:	bne	15110 <flatcc_builder_end_union_vector@@Base+0xa4>
   150dc:	add	r0, sp, #8
   150e0:	str	r1, [sp]
   150e4:	mov	r1, r5
   150e8:	bl	14ef0 <flatcc_builder_create_union_vector_direct@@Base>
   150ec:	ldr	r7, [sp, #8]
   150f0:	mov	r0, r5
   150f4:	ldr	r6, [sp, #12]
   150f8:	bl	12e84 <_start@@Base+0xa64>
   150fc:	str	r7, [r4]
   15100:	str	r6, [r4, #4]
   15104:	mov	r0, r4
   15108:	add	sp, sp, #20
   1510c:	pop	{r4, r5, r6, r7, pc}
   15110:	ldrb	lr, [r0, r1, lsl #3]
   15114:	strb	lr, [r2, r1]
   15118:	ldr	lr, [ip, r1, lsl #3]
   1511c:	str	lr, [r3, r1, lsl #2]
   15120:	add	r1, r1, #1
   15124:	b	150d4 <flatcc_builder_end_union_vector@@Base+0x68>
   15128:	andeq	r7, r1, r4, lsl #8
   1512c:	andeq	r7, r1, r9, ror r5
   15130:	andeq	r7, r1, r6, asr r8

00015134 <flatcc_builder_union_vector_edit@@Base>:
   15134:	ldr	r0, [r0, #16]
   15138:	bx	lr

0001513c <flatcc_builder_union_vector_count@@Base>:
   1513c:	ldr	r3, [r0, #32]
   15140:	ldr	r0, [r3, #20]
   15144:	bx	lr

00015148 <flatcc_builder_extend_union_vector@@Base>:
   15148:	push	{r4, r5, r6, lr}
   1514c:	mvn	r2, #-536870912	; 0xe0000000
   15150:	mov	r4, r0
   15154:	mov	r5, r1
   15158:	ldr	r0, [r0, #32]
   1515c:	bl	133e0 <flatcc_builder_default_alloc@@Base+0x458>
   15160:	cmp	r0, #0
   15164:	bne	15178 <flatcc_builder_extend_union_vector@@Base+0x30>
   15168:	lsl	r1, r5, #3
   1516c:	mov	r0, r4
   15170:	pop	{r4, r5, r6, lr}
   15174:	b	12e3c <_start@@Base+0xa1c>
   15178:	mov	r0, #0
   1517c:	pop	{r4, r5, r6, pc}

00015180 <flatcc_builder_truncate_union_vector@@Base>:
   15180:	ldr	r3, [r0, #32]
   15184:	push	{r4, lr}
   15188:	ldrh	r2, [r3, #14]
   1518c:	cmp	r2, #7
   15190:	beq	151a8 <flatcc_builder_truncate_union_vector@@Base+0x28>
   15194:	ldr	r3, [pc, #72]	; 151e4 <flatcc_builder_truncate_union_vector@@Base+0x64>
   15198:	movw	r2, #1665	; 0x681
   1519c:	ldr	r1, [pc, #68]	; 151e8 <flatcc_builder_truncate_union_vector@@Base+0x68>
   151a0:	ldr	r0, [pc, #68]	; 151ec <flatcc_builder_truncate_union_vector@@Base+0x6c>
   151a4:	bl	12324 <__assert_fail@plt>
   151a8:	ldr	r2, [r3, #20]
   151ac:	cmp	r2, r1
   151b0:	bcs	151c8 <flatcc_builder_truncate_union_vector@@Base+0x48>
   151b4:	ldr	r3, [pc, #40]	; 151e4 <flatcc_builder_truncate_union_vector@@Base+0x64>
   151b8:	movw	r2, #1666	; 0x682
   151bc:	ldr	r1, [pc, #36]	; 151e8 <flatcc_builder_truncate_union_vector@@Base+0x68>
   151c0:	ldr	r0, [pc, #40]	; 151f0 <flatcc_builder_truncate_union_vector@@Base+0x70>
   151c4:	b	151a4 <flatcc_builder_truncate_union_vector@@Base+0x24>
   151c8:	sub	r2, r2, r1
   151cc:	str	r2, [r3, #20]
   151d0:	ldr	r3, [r3, #16]
   151d4:	mul	r1, r3, r1
   151d8:	bl	12eec <_start@@Base+0xacc>
   151dc:	mov	r0, #0
   151e0:	pop	{r4, pc}
   151e4:	andeq	r7, r1, r4, lsr #8
   151e8:	andeq	r7, r1, r9, ror r5
   151ec:	andeq	r7, r1, r6, asr r8
   151f0:	andeq	r7, r1, pc, lsl #15

000151f4 <flatcc_builder_union_vector_push@@Base>:
   151f4:	push	{r0, r1, r4, lr}
   151f8:	mov	r4, sp
   151fc:	stm	r4, {r1, r2}
   15200:	ldr	r2, [r0, #32]
   15204:	ldrh	r3, [r2, #14]
   15208:	cmp	r3, #7
   1520c:	beq	15224 <flatcc_builder_union_vector_push@@Base+0x30>
   15210:	ldr	r3, [pc, #68]	; 1525c <flatcc_builder_union_vector_push@@Base+0x68>
   15214:	movw	r2, #1677	; 0x68d
   15218:	ldr	r1, [pc, #64]	; 15260 <flatcc_builder_union_vector_push@@Base+0x6c>
   1521c:	ldr	r0, [pc, #64]	; 15264 <flatcc_builder_union_vector_push@@Base+0x70>
   15220:	bl	12324 <__assert_fail@plt>
   15224:	ldr	r3, [r2, #20]
   15228:	cmn	r3, #-536870911	; 0xe0000001
   1522c:	moveq	r3, #0
   15230:	beq	15250 <flatcc_builder_union_vector_push@@Base+0x5c>
   15234:	add	r3, r3, #1
   15238:	mov	r1, #8
   1523c:	str	r3, [r2, #20]
   15240:	bl	12e3c <_start@@Base+0xa1c>
   15244:	subs	r3, r0, #0
   15248:	ldmne	r4, {r0, r1}
   1524c:	stmne	r3, {r0, r1}
   15250:	mov	r0, r3
   15254:	add	sp, sp, #8
   15258:	pop	{r4, pc}
   1525c:	andeq	r7, r1, r9, asr #8
   15260:	andeq	r7, r1, r9, ror r5
   15264:	andeq	r7, r1, r6, asr r8

00015268 <flatcc_builder_append_union_vector@@Base>:
   15268:	push	{r4, r5, r6, lr}
   1526c:	mov	r4, r0
   15270:	ldr	r0, [r0, #32]
   15274:	ldrh	r3, [r0, #14]
   15278:	cmp	r3, #7
   1527c:	beq	15294 <flatcc_builder_append_union_vector@@Base+0x2c>
   15280:	ldr	r3, [pc, #68]	; 152cc <flatcc_builder_append_union_vector@@Base+0x64>
   15284:	movw	r2, #1692	; 0x69c
   15288:	ldr	r1, [pc, #64]	; 152d0 <flatcc_builder_append_union_vector@@Base+0x68>
   1528c:	ldr	r0, [pc, #64]	; 152d4 <flatcc_builder_append_union_vector@@Base+0x6c>
   15290:	bl	12324 <__assert_fail@plt>
   15294:	mov	r5, r2
   15298:	mov	r6, r1
   1529c:	mvn	r2, #-536870912	; 0xe0000000
   152a0:	mov	r1, r5
   152a4:	bl	133e0 <flatcc_builder_default_alloc@@Base+0x458>
   152a8:	cmp	r0, #0
   152ac:	bne	152c4 <flatcc_builder_append_union_vector@@Base+0x5c>
   152b0:	lsl	r2, r5, #3
   152b4:	mov	r1, r6
   152b8:	mov	r0, r4
   152bc:	pop	{r4, r5, r6, lr}
   152c0:	b	12f0c <_start@@Base+0xaec>
   152c4:	mov	r0, #0
   152c8:	pop	{r4, r5, r6, pc}
   152cc:	andeq	r7, r1, sl, ror #8
   152d0:	andeq	r7, r1, r9, ror r5
   152d4:	andeq	r7, r1, r6, asr r8

000152d8 <flatcc_builder_create_string@@Base>:
   152d8:	ldr	r3, [r0, #136]	; 0x88
   152dc:	mov	ip, #4
   152e0:	cmp	r2, #0
   152e4:	push	{lr}		; (str lr, [sp, #-4]!)
   152e8:	sub	sp, sp, #84	; 0x54
   152ec:	add	lr, sp, ip
   152f0:	stmib	sp, {r2, ip}
   152f4:	sub	r3, r3, r2
   152f8:	str	lr, [sp, #16]
   152fc:	sub	r3, r3, #1
   15300:	str	ip, [sp, #20]
   15304:	mov	ip, #1
   15308:	and	r3, r3, #3
   1530c:	add	r3, r3, #1
   15310:	str	ip, [sp, #12]
   15314:	beq	15330 <flatcc_builder_create_string@@Base+0x58>
   15318:	add	ip, r2, #4
   1531c:	str	r2, [sp, #28]
   15320:	mov	r2, #2
   15324:	str	ip, [sp, #8]
   15328:	str	r2, [sp, #12]
   1532c:	str	r1, [sp, #24]
   15330:	ldr	r2, [sp, #8]
   15334:	add	r1, sp, #80	; 0x50
   15338:	ldr	ip, [pc, #44]	; 1536c <flatcc_builder_create_string@@Base+0x94>
   1533c:	add	r2, r2, r3
   15340:	str	r2, [sp, #8]
   15344:	ldr	r2, [sp, #12]
   15348:	add	r2, r2, #1
   1534c:	add	r1, r1, r2, lsl #3
   15350:	str	r2, [sp, #12]
   15354:	str	ip, [r1, #-72]	; 0xffffffb8
   15358:	str	r3, [r1, #-68]	; 0xffffffbc
   1535c:	add	r1, sp, #8
   15360:	bl	13368 <flatcc_builder_default_alloc@@Base+0x3e0>
   15364:	add	sp, sp, #84	; 0x54
   15368:	pop	{pc}		; (ldr pc, [sp], #4)
   1536c:	muleq	r1, r3, lr

00015370 <flatcc_builder_create_string_str@@Base>:
   15370:	push	{r4, r5, r6, lr}
   15374:	mov	r5, r0
   15378:	mov	r0, r1
   1537c:	mov	r4, r1
   15380:	bl	122dc <strlen@plt>
   15384:	mov	r2, r0
   15388:	mov	r1, r4
   1538c:	mov	r0, r5
   15390:	pop	{r4, r5, r6, lr}
   15394:	b	152d8 <flatcc_builder_create_string@@Base>

00015398 <flatcc_builder_create_string_strn@@Base>:
   15398:	push	{r4, r5, r6, lr}
   1539c:	mov	r4, r1
   153a0:	mov	r6, r0
   153a4:	mov	r1, #0
   153a8:	mov	r0, r4
   153ac:	mov	r5, r2
   153b0:	bl	1230c <memchr@plt>
   153b4:	cmp	r0, #0
   153b8:	mov	r1, r4
   153bc:	subne	r5, r0, r4
   153c0:	mov	r0, r6
   153c4:	mov	r2, r5
   153c8:	pop	{r4, r5, r6, lr}
   153cc:	b	152d8 <flatcc_builder_create_string@@Base>

000153d0 <flatcc_builder_end_string@@Base>:
   153d0:	ldr	r3, [r0, #32]
   153d4:	push	{r4, r5, r6, lr}
   153d8:	ldrh	r2, [r3, #14]
   153dc:	cmp	r2, #6
   153e0:	beq	153f8 <flatcc_builder_end_string@@Base+0x28>
   153e4:	ldr	r3, [pc, #84]	; 15440 <flatcc_builder_end_string@@Base+0x70>
   153e8:	movw	r2, #1732	; 0x6c4
   153ec:	ldr	r1, [pc, #80]	; 15444 <flatcc_builder_end_string@@Base+0x74>
   153f0:	ldr	r0, [pc, #80]	; 15448 <flatcc_builder_end_string@@Base+0x78>
   153f4:	bl	12324 <__assert_fail@plt>
   153f8:	ldr	r2, [r3, #20]
   153fc:	mov	r4, r0
   15400:	ldr	r1, [r0, #20]
   15404:	cmp	r2, r1
   15408:	beq	15420 <flatcc_builder_end_string@@Base+0x50>
   1540c:	ldr	r3, [pc, #44]	; 15440 <flatcc_builder_end_string@@Base+0x70>
   15410:	movw	r2, #1733	; 0x6c5
   15414:	ldr	r1, [pc, #40]	; 15444 <flatcc_builder_end_string@@Base+0x74>
   15418:	ldr	r0, [pc, #44]	; 1544c <flatcc_builder_end_string@@Base+0x7c>
   1541c:	b	153f4 <flatcc_builder_end_string@@Base+0x24>
   15420:	ldr	r1, [r0, #16]
   15424:	bl	152d8 <flatcc_builder_create_string@@Base>
   15428:	subs	r5, r0, #0
   1542c:	beq	15438 <flatcc_builder_end_string@@Base+0x68>
   15430:	mov	r0, r4
   15434:	bl	12e84 <_start@@Base+0xa64>
   15438:	mov	r0, r5
   1543c:	pop	{r4, r5, r6, pc}
   15440:	andeq	r7, r1, sp, lsl #9
   15444:	andeq	r7, r1, r9, ror r5
   15448:	andeq	r7, r1, pc, lsr r7
   1544c:	andeq	r7, r1, r8, lsl #17

00015450 <flatcc_builder_string_edit@@Base>:
   15450:	ldr	r0, [r0, #16]
   15454:	bx	lr

00015458 <flatcc_builder_string_len@@Base>:
   15458:	ldr	r3, [r0, #32]
   1545c:	ldr	r0, [r3, #20]
   15460:	bx	lr

00015464 <flatcc_builder_table_add@@Base>:
   15464:	push	{r4, r5, r6, r7, r8, lr}
   15468:	mov	r4, r0
   1546c:	ldr	r0, [r0, #32]
   15470:	ldrh	r0, [r0, #14]
   15474:	cmp	r0, #3
   15478:	beq	15490 <flatcc_builder_table_add@@Base+0x2c>
   1547c:	ldr	r3, [pc, #240]	; 15574 <flatcc_builder_table_add@@Base+0x110>
   15480:	movw	r2, #1773	; 0x6ed
   15484:	ldr	r1, [pc, #236]	; 15578 <flatcc_builder_table_add@@Base+0x114>
   15488:	ldr	r0, [pc, #236]	; 1557c <flatcc_builder_table_add@@Base+0x118>
   1548c:	bl	12324 <__assert_fail@plt>
   15490:	movw	r0, #32764	; 0x7ffc
   15494:	cmp	r1, r0
   15498:	bls	154b0 <flatcc_builder_table_add@@Base+0x4c>
   1549c:	ldr	r3, [pc, #208]	; 15574 <flatcc_builder_table_add@@Base+0x110>
   154a0:	movw	r2, #1774	; 0x6ee
   154a4:	ldr	r1, [pc, #204]	; 15578 <flatcc_builder_table_add@@Base+0x114>
   154a8:	ldr	r0, [pc, #208]	; 15580 <flatcc_builder_table_add@@Base+0x11c>
   154ac:	b	1548c <flatcc_builder_table_add@@Base+0x28>
   154b0:	ldrh	r0, [r4, #130]	; 0x82
   154b4:	lsl	r7, r1, #1
   154b8:	cmp	r0, r3
   154bc:	ldr	r0, [r4, #4]
   154c0:	strhcc	r3, [r4, #130]	; 0x82
   154c4:	ldrh	r5, [r0, r7]
   154c8:	cmp	r5, #0
   154cc:	beq	154e4 <flatcc_builder_table_add@@Base+0x80>
   154d0:	ldr	r3, [pc, #156]	; 15574 <flatcc_builder_table_add@@Base+0x110>
   154d4:	movw	r2, #1784	; 0x6f8
   154d8:	ldr	r1, [pc, #152]	; 15578 <flatcc_builder_table_add@@Base+0x114>
   154dc:	ldr	r0, [pc, #160]	; 15584 <flatcc_builder_table_add@@Base+0x120>
   154e0:	b	1548c <flatcc_builder_table_add@@Base+0x28>
   154e4:	ldr	ip, [r4, #12]
   154e8:	sub	r0, r3, #1
   154ec:	rsb	r3, r3, #0
   154f0:	uxth	r8, r1
   154f4:	ldr	lr, [pc, #140]	; 15588 <flatcc_builder_table_add@@Base+0x124>
   154f8:	ldr	r6, [r4, #20]
   154fc:	eor	ip, ip, r1
   15500:	mul	ip, lr, ip
   15504:	add	r0, r0, r6
   15508:	and	r6, r0, r3
   1550c:	ldr	r3, [r4, #24]
   15510:	eor	ip, ip, r2
   15514:	add	r1, r2, r6
   15518:	mul	ip, lr, ip
   1551c:	cmp	r1, r3
   15520:	str	ip, [r4, #12]
   15524:	str	r1, [r4, #20]
   15528:	bcs	15554 <flatcc_builder_table_add@@Base+0xf0>
   1552c:	ldr	r3, [r4, #4]
   15530:	add	r2, r6, #4
   15534:	ldr	r0, [r4, #16]
   15538:	strh	r2, [r3, r7]
   1553c:	ldrh	r3, [r4, #8]
   15540:	add	r0, r0, r6
   15544:	cmp	r3, r8
   15548:	addls	r1, r8, #1
   1554c:	strhls	r1, [r4, #8]
   15550:	pop	{r4, r5, r6, r7, r8, pc}
   15554:	movw	r2, #65532	; 0xfffc
   15558:	add	r1, r1, #1
   1555c:	mov	r0, r4
   15560:	bl	12dec <_start@@Base+0x9cc>
   15564:	cmp	r0, #0
   15568:	beq	1552c <flatcc_builder_table_add@@Base+0xc8>
   1556c:	mov	r0, r5
   15570:	pop	{r4, r5, r6, r7, r8, pc}
   15574:	andeq	r7, r1, r7, lsr #9
   15578:	andeq	r7, r1, r9, ror r5
   1557c:	andeq	r7, r1, r8, lsl r8
   15580:	andeq	r7, r1, ip, lsr #17
   15584:	andeq	r7, r1, r6, ror #11
   15588:			; <UNDEFINED> instruction: 0x9e3779b1

0001558c <flatcc_builder_table_edit@@Base>:
   1558c:	ldr	r3, [r0, #32]
   15590:	ldrh	r3, [r3, #14]
   15594:	cmp	r3, #3
   15598:	beq	155b4 <flatcc_builder_table_edit@@Base+0x28>
   1559c:	push	{r4, lr}
   155a0:	movw	r2, #1794	; 0x702
   155a4:	ldr	r3, [pc, #28]	; 155c8 <flatcc_builder_table_edit@@Base+0x3c>
   155a8:	ldr	r1, [pc, #28]	; 155cc <flatcc_builder_table_edit@@Base+0x40>
   155ac:	ldr	r0, [pc, #28]	; 155d0 <flatcc_builder_table_edit@@Base+0x44>
   155b0:	bl	12324 <__assert_fail@plt>
   155b4:	ldr	r3, [r0, #20]
   155b8:	ldr	r0, [r0, #16]
   155bc:	sub	r3, r3, r1
   155c0:	add	r0, r0, r3
   155c4:	bx	lr
   155c8:	andeq	r7, r1, r0, asr #9
   155cc:	andeq	r7, r1, r9, ror r5
   155d0:	andeq	r7, r1, r8, lsl r8

000155d4 <flatcc_builder_table_add_copy@@Base>:
   155d4:	push	{r4, r5, r6, lr}
   155d8:	mov	r4, r3
   155dc:	mov	r6, r2
   155e0:	mov	r2, r4
   155e4:	ldrh	r3, [sp, #16]
   155e8:	bl	15464 <flatcc_builder_table_add@@Base>
   155ec:	subs	r5, r0, #0
   155f0:	beq	15600 <flatcc_builder_table_add_copy@@Base+0x2c>
   155f4:	mov	r2, r4
   155f8:	mov	r1, r6
   155fc:	bl	12294 <memcpy@plt>
   15600:	mov	r0, r5
   15604:	pop	{r4, r5, r6, pc}

00015608 <flatcc_builder_table_add_offset@@Base>:
   15608:	ldr	r3, [r0, #32]
   1560c:	push	{r4, r5, r6, r7, r8, lr}
   15610:	ldrh	r3, [r3, #14]
   15614:	cmp	r3, #3
   15618:	beq	15630 <flatcc_builder_table_add_offset@@Base+0x28>
   1561c:	ldr	r3, [pc, #236]	; 15710 <flatcc_builder_table_add_offset@@Base+0x108>
   15620:	movw	r2, #1811	; 0x713
   15624:	ldr	r1, [pc, #232]	; 15714 <flatcc_builder_table_add_offset@@Base+0x10c>
   15628:	ldr	r0, [pc, #232]	; 15718 <flatcc_builder_table_add_offset@@Base+0x110>
   1562c:	bl	12324 <__assert_fail@plt>
   15630:	movw	r3, #32764	; 0x7ffc
   15634:	cmp	r1, r3
   15638:	bls	15650 <flatcc_builder_table_add_offset@@Base+0x48>
   1563c:	ldr	r3, [pc, #204]	; 15710 <flatcc_builder_table_add_offset@@Base+0x108>
   15640:	movw	r2, #1812	; 0x714
   15644:	ldr	r1, [pc, #200]	; 15714 <flatcc_builder_table_add_offset@@Base+0x10c>
   15648:	ldr	r0, [pc, #204]	; 1571c <flatcc_builder_table_add_offset@@Base+0x114>
   1564c:	b	1562c <flatcc_builder_table_add_offset@@Base+0x24>
   15650:	ldr	r3, [r0, #4]
   15654:	lsl	r7, r1, #1
   15658:	mov	r4, r0
   1565c:	ldrh	r6, [r3, r7]
   15660:	cmp	r6, #0
   15664:	beq	1567c <flatcc_builder_table_add_offset@@Base+0x74>
   15668:	ldr	r3, [pc, #160]	; 15710 <flatcc_builder_table_add_offset@@Base+0x108>
   1566c:	movw	r2, #1819	; 0x71b
   15670:	ldr	r1, [pc, #156]	; 15714 <flatcc_builder_table_add_offset@@Base+0x10c>
   15674:	ldr	r0, [pc, #164]	; 15720 <flatcc_builder_table_add_offset@@Base+0x118>
   15678:	b	1562c <flatcc_builder_table_add_offset@@Base+0x24>
   1567c:	ldr	r3, [r0, #12]
   15680:	uxth	r5, r1
   15684:	ldr	r2, [pc, #152]	; 15724 <flatcc_builder_table_add_offset@@Base+0x11c>
   15688:	ldr	r8, [r0, #20]
   1568c:	eor	r3, r3, r1
   15690:	mul	r3, r2, r3
   15694:	add	r8, r8, #3
   15698:	eor	r3, r3, #4
   1569c:	bic	r8, r8, #3
   156a0:	add	r1, r8, #4
   156a4:	mul	r3, r2, r3
   156a8:	str	r3, [r0, #12]
   156ac:	ldr	r3, [r0, #24]
   156b0:	str	r1, [r0, #20]
   156b4:	cmp	r1, r3
   156b8:	bhi	156f8 <flatcc_builder_table_add_offset@@Base+0xf0>
   156bc:	ldr	r3, [r4, #4]
   156c0:	uxth	r2, r8
   156c4:	add	r1, r2, #4
   156c8:	ldr	r0, [r4, #16]
   156cc:	strh	r1, [r3, r7]
   156d0:	ldrh	r3, [r4, #8]
   156d4:	add	r0, r0, r8
   156d8:	cmp	r3, r5
   156dc:	ldr	r3, [r4]
   156e0:	addls	r1, r5, #1
   156e4:	strhls	r1, [r4, #8]
   156e8:	add	r1, r3, #2
   156ec:	str	r1, [r4]
   156f0:	strh	r2, [r3]
   156f4:	pop	{r4, r5, r6, r7, r8, pc}
   156f8:	movw	r2, #65532	; 0xfffc
   156fc:	bl	12dec <_start@@Base+0x9cc>
   15700:	cmp	r0, #0
   15704:	beq	156bc <flatcc_builder_table_add_offset@@Base+0xb4>
   15708:	mov	r0, r6
   1570c:	pop	{r4, r5, r6, r7, r8, pc}
   15710:	ldrdeq	r7, [r1], -sl
   15714:	andeq	r7, r1, r9, ror r5
   15718:	andeq	r7, r1, r8, lsl r8
   1571c:	andeq	r7, r1, ip, lsr #17
   15720:	andeq	r7, r1, r6, ror #11
   15724:			; <UNDEFINED> instruction: 0x9e3779b1

00015728 <flatcc_builder_table_add_union@@Base>:
   15728:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1572c:	add	ip, sp, #8
   15730:	stmdb	ip, {r2, r3}
   15734:	ldr	r3, [r0, #32]
   15738:	ldrb	r5, [sp]
   1573c:	ldr	r4, [sp, #4]
   15740:	ldrh	r3, [r3, #14]
   15744:	cmp	r3, #3
   15748:	beq	15760 <flatcc_builder_table_add_union@@Base+0x38>
   1574c:	ldr	r3, [pc, #164]	; 157f8 <flatcc_builder_table_add_union@@Base+0xd0>
   15750:	movw	r2, #1518	; 0x5ee
   15754:	ldr	r1, [pc, #160]	; 157fc <flatcc_builder_table_add_union@@Base+0xd4>
   15758:	ldr	r0, [pc, #160]	; 15800 <flatcc_builder_table_add_union@@Base+0xd8>
   1575c:	bl	12324 <__assert_fail@plt>
   15760:	cmp	r5, #0
   15764:	mov	r6, r0
   15768:	mov	r7, r1
   1576c:	bne	1578c <flatcc_builder_table_add_union@@Base+0x64>
   15770:	cmp	r4, #0
   15774:	beq	157b8 <flatcc_builder_table_add_union@@Base+0x90>
   15778:	ldr	r3, [pc, #120]	; 157f8 <flatcc_builder_table_add_union@@Base+0xd0>
   1577c:	movw	r2, #1519	; 0x5ef
   15780:	ldr	r1, [pc, #116]	; 157fc <flatcc_builder_table_add_union@@Base+0xd4>
   15784:	ldr	r0, [pc, #120]	; 15804 <flatcc_builder_table_add_union@@Base+0xdc>
   15788:	b	1575c <flatcc_builder_table_add_union@@Base+0x34>
   1578c:	cmp	r4, #0
   15790:	beq	157b8 <flatcc_builder_table_add_union@@Base+0x90>
   15794:	bl	15608 <flatcc_builder_table_add_offset@@Base>
   15798:	cmp	r0, #0
   1579c:	strne	r4, [r0]
   157a0:	bne	157b8 <flatcc_builder_table_add_union@@Base+0x90>
   157a4:	ldr	r3, [pc, #76]	; 157f8 <flatcc_builder_table_add_union@@Base+0xd0>
   157a8:	movw	r2, #1522	; 0x5f2
   157ac:	ldr	r1, [pc, #72]	; 157fc <flatcc_builder_table_add_union@@Base+0xd4>
   157b0:	ldr	r0, [pc, #80]	; 15808 <flatcc_builder_table_add_union@@Base+0xe0>
   157b4:	b	1575c <flatcc_builder_table_add_union@@Base+0x34>
   157b8:	mov	r3, #1
   157bc:	sub	r1, r7, #1
   157c0:	mov	r2, r3
   157c4:	mov	r0, r6
   157c8:	bl	15464 <flatcc_builder_table_add@@Base>
   157cc:	cmp	r0, #0
   157d0:	bne	157e8 <flatcc_builder_table_add_union@@Base+0xc0>
   157d4:	ldr	r3, [pc, #28]	; 157f8 <flatcc_builder_table_add_union@@Base+0xd0>
   157d8:	movw	r2, #1526	; 0x5f6
   157dc:	ldr	r1, [pc, #24]	; 157fc <flatcc_builder_table_add_union@@Base+0xd4>
   157e0:	ldr	r0, [pc, #36]	; 1580c <flatcc_builder_table_add_union@@Base+0xe4>
   157e4:	b	1575c <flatcc_builder_table_add_union@@Base+0x34>
   157e8:	strb	r5, [r0]
   157ec:	mov	r0, #0
   157f0:	add	sp, sp, #12
   157f4:	pop	{r4, r5, r6, r7, pc}
   157f8:	strdeq	r7, [r1], -sl
   157fc:	andeq	r7, r1, r9, ror r5
   15800:	andeq	r7, r1, r8, lsl r8
   15804:	strdeq	r7, [r1], -r0
   15808:	andeq	r7, r1, r2, lsl r9
   1580c:	andeq	r7, r1, ip, lsl r9

00015810 <flatcc_builder_table_add_union_vector@@Base>:
   15810:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   15814:	mov	r7, r1
   15818:	add	r1, sp, #8
   1581c:	stmdb	r1, {r2, r3}
   15820:	ldr	r3, [r0, #32]
   15824:	ldrd	r4, [sp]
   15828:	ldrh	r3, [r3, #14]
   1582c:	cmp	r3, #3
   15830:	beq	15848 <flatcc_builder_table_add_union_vector@@Base+0x38>
   15834:	ldr	r3, [pc, #176]	; 158ec <flatcc_builder_table_add_union_vector@@Base+0xdc>
   15838:	mov	r2, #1536	; 0x600
   1583c:	ldr	r1, [pc, #172]	; 158f0 <flatcc_builder_table_add_union_vector@@Base+0xe0>
   15840:	ldr	r0, [pc, #172]	; 158f4 <flatcc_builder_table_add_union_vector@@Base+0xe4>
   15844:	bl	12324 <__assert_fail@plt>
   15848:	clz	r3, r5
   1584c:	clz	r2, r4
   15850:	lsr	r3, r3, #5
   15854:	lsr	r2, r2, #5
   15858:	cmp	r2, r3
   1585c:	beq	15888 <flatcc_builder_table_add_union_vector@@Base+0x78>
   15860:	adds	r4, r4, #0
   15864:	movne	r4, #1
   15868:	cmp	r4, r3
   1586c:	mvnne	r4, #0
   15870:	bne	158e0 <flatcc_builder_table_add_union_vector@@Base+0xd0>
   15874:	ldr	r3, [pc, #112]	; 158ec <flatcc_builder_table_add_union_vector@@Base+0xdc>
   15878:	movw	r2, #1537	; 0x601
   1587c:	ldr	r1, [pc, #108]	; 158f0 <flatcc_builder_table_add_union_vector@@Base+0xe0>
   15880:	ldr	r0, [pc, #112]	; 158f8 <flatcc_builder_table_add_union_vector@@Base+0xe8>
   15884:	b	15844 <flatcc_builder_table_add_union_vector@@Base+0x34>
   15888:	cmp	r4, #0
   1588c:	beq	158e0 <flatcc_builder_table_add_union_vector@@Base+0xd0>
   15890:	sub	r1, r7, #1
   15894:	mov	r6, r0
   15898:	bl	15608 <flatcc_builder_table_add_offset@@Base>
   1589c:	cmp	r0, #0
   158a0:	ldreq	r3, [pc, #68]	; 158ec <flatcc_builder_table_add_union_vector@@Base+0xdc>
   158a4:	movweq	r2, #1540	; 0x604
   158a8:	beq	158d4 <flatcc_builder_table_add_union_vector@@Base+0xc4>
   158ac:	mov	r1, r7
   158b0:	str	r4, [r0]
   158b4:	mov	r0, r6
   158b8:	bl	15608 <flatcc_builder_table_add_offset@@Base>
   158bc:	cmp	r0, #0
   158c0:	movne	r4, #0
   158c4:	strne	r5, [r0]
   158c8:	bne	158e0 <flatcc_builder_table_add_union_vector@@Base+0xd0>
   158cc:	ldr	r3, [pc, #24]	; 158ec <flatcc_builder_table_add_union_vector@@Base+0xdc>
   158d0:	movw	r2, #1544	; 0x608
   158d4:	ldr	r1, [pc, #20]	; 158f0 <flatcc_builder_table_add_union_vector@@Base+0xe0>
   158d8:	ldr	r0, [pc, #28]	; 158fc <flatcc_builder_table_add_union_vector@@Base+0xec>
   158dc:	b	15844 <flatcc_builder_table_add_union_vector@@Base+0x34>
   158e0:	mov	r0, r4
   158e4:	add	sp, sp, #12
   158e8:	pop	{r4, r5, r6, r7, pc}
   158ec:	andeq	r7, r1, r9, lsl r5
   158f0:	andeq	r7, r1, r9, ror r5
   158f4:	andeq	r7, r1, r8, lsl r8
   158f8:	andeq	r7, r1, r8, lsr #18
   158fc:	andeq	r7, r1, r2, lsl r9

00015900 <flatcc_builder_push_buffer_alignment@@Base>:
   15900:	mov	r3, r0
   15904:	mov	r2, #4
   15908:	ldrh	r0, [r0, #128]	; 0x80
   1590c:	strh	r2, [r3, #128]	; 0x80
   15910:	bx	lr

00015914 <flatcc_builder_pop_buffer_alignment@@Base>:
   15914:	ldrh	r3, [r0, #128]	; 0x80
   15918:	cmp	r3, r1
   1591c:	strhcc	r1, [r0, #128]	; 0x80
   15920:	bx	lr

00015924 <flatcc_builder_get_buffer_alignment@@Base>:
   15924:	ldrh	r0, [r0, #128]	; 0x80
   15928:	bx	lr

0001592c <flatcc_builder_set_vtable_clustering@@Base>:
   1592c:	clz	r1, r1
   15930:	lsr	r1, r1, #5
   15934:	str	r1, [r0, #180]	; 0xb4
   15938:	bx	lr

0001593c <flatcc_builder_set_block_align@@Base>:
   1593c:	strh	r1, [r0, #132]	; 0x84
   15940:	bx	lr

00015944 <flatcc_builder_get_level@@Base>:
   15944:	ldr	r0, [r0, #156]	; 0x9c
   15948:	bx	lr

0001594c <flatcc_builder_set_max_level@@Base>:
   1594c:	ldr	r3, [r0, #160]	; 0xa0
   15950:	str	r1, [r0, #176]	; 0xb0
   15954:	cmp	r3, r1
   15958:	strlt	r1, [r0, #160]	; 0xa0
   1595c:	bx	lr

00015960 <flatcc_builder_get_buffer_size@@Base>:
   15960:	ldr	r2, [r0, #140]	; 0x8c
   15964:	ldr	r0, [r0, #136]	; 0x88
   15968:	sub	r0, r2, r0
   1596c:	bx	lr

00015970 <flatcc_builder_get_buffer_start@@Base>:
   15970:	ldr	r0, [r0, #136]	; 0x88
   15974:	bx	lr

00015978 <flatcc_builder_get_buffer_end@@Base>:
   15978:	ldr	r0, [r0, #140]	; 0x8c
   1597c:	bx	lr

00015980 <flatcc_builder_set_vtable_cache_limit@@Base>:
   15980:	str	r1, [r0, #172]	; 0xac
   15984:	bx	lr

00015988 <flatcc_builder_set_identifier@@Base>:
   15988:	ldr	r3, [pc, #16]	; 159a0 <flatcc_builder_set_identifier@@Base+0x18>
   1598c:	cmp	r1, #0
   15990:	moveq	r1, r3
   15994:	ldr	r3, [r1]
   15998:	str	r3, [r0, #168]	; 0xa8
   1599c:	bx	lr
   159a0:	muleq	r1, r3, lr

000159a4 <flatcc_builder_get_type@@Base>:
   159a4:	ldr	r0, [r0, #32]
   159a8:	cmp	r0, #0
   159ac:	ldrhne	r0, [r0, #14]
   159b0:	bx	lr

000159b4 <flatcc_builder_get_type_at@@Base>:
   159b4:	cmp	r1, #0
   159b8:	ble	159e0 <flatcc_builder_get_type_at@@Base+0x2c>
   159bc:	ldr	r3, [r0, #156]	; 0x9c
   159c0:	cmp	r3, r1
   159c4:	blt	159e0 <flatcc_builder_get_type_at@@Base+0x2c>
   159c8:	sub	r1, r1, r3
   159cc:	ldr	r3, [r0, #32]
   159d0:	mov	r2, #36	; 0x24
   159d4:	mla	r1, r2, r1, r3
   159d8:	ldrh	r0, [r1, #14]
   159dc:	bx	lr
   159e0:	mov	r0, #0
   159e4:	bx	lr

000159e8 <flatcc_builder_get_direct_buffer@@Base>:
   159e8:	ldr	r3, [r0, #184]	; 0xb8
   159ec:	cmp	r3, #0
   159f0:	beq	15a18 <flatcc_builder_get_direct_buffer@@Base+0x30>
   159f4:	ldrd	r2, [r0, #188]	; 0xbc
   159f8:	cmp	r2, r3
   159fc:	bne	15a18 <flatcc_builder_get_direct_buffer@@Base+0x30>
   15a00:	cmp	r1, #0
   15a04:	ldrne	r3, [r0, #212]	; 0xd4
   15a08:	strne	r3, [r1]
   15a0c:	ldr	r1, [r0, #196]	; 0xc4
   15a10:	mov	r0, r1
   15a14:	bx	lr
   15a18:	cmp	r1, #0
   15a1c:	movne	r3, #0
   15a20:	strne	r3, [r1]
   15a24:	movne	r1, r3
   15a28:	b	15a10 <flatcc_builder_get_direct_buffer@@Base+0x28>

00015a2c <flatcc_builder_copy_buffer@@Base>:
   15a2c:	ldr	r3, [r0, #184]	; 0xb8
   15a30:	cmp	r3, #0
   15a34:	beq	15a60 <flatcc_builder_copy_buffer@@Base+0x34>
   15a38:	push	{r4, lr}
   15a3c:	add	r0, r0, #188	; 0xbc
   15a40:	bl	15fd4 <flatcc_emitter_copy_buffer@@Base>
   15a44:	cmp	r0, #0
   15a48:	popne	{r4, pc}
   15a4c:	ldr	r3, [pc, #20]	; 15a68 <flatcc_builder_copy_buffer@@Base+0x3c>
   15a50:	movw	r2, #1926	; 0x786
   15a54:	ldr	r1, [pc, #16]	; 15a6c <flatcc_builder_copy_buffer@@Base+0x40>
   15a58:	ldr	r0, [pc, #16]	; 15a70 <flatcc_builder_copy_buffer@@Base+0x44>
   15a5c:	bl	12324 <__assert_fail@plt>
   15a60:	mov	r0, r3
   15a64:	bx	lr
   15a68:	andeq	r7, r1, pc, lsr r5
   15a6c:	andeq	r7, r1, r9, ror r5
   15a70:	andeq	r7, r1, r0, ror r6

00015a74 <flatcc_builder_finalize_buffer@@Base>:
   15a74:	push	{r4, r5, r6, lr}
   15a78:	cmp	r1, #0
   15a7c:	mov	r5, r0
   15a80:	ldr	r2, [r0, #136]	; 0x88
   15a84:	ldr	r4, [r0, #140]	; 0x8c
   15a88:	sub	r4, r4, r2
   15a8c:	mov	r0, r4
   15a90:	strne	r4, [r1]
   15a94:	bl	122b8 <malloc@plt>
   15a98:	subs	r6, r0, #0
   15a9c:	ldreq	r3, [pc, #56]	; 15adc <flatcc_builder_finalize_buffer@@Base+0x68>
   15aa0:	movweq	r2, #1944	; 0x798
   15aa4:	beq	15ac8 <flatcc_builder_finalize_buffer@@Base+0x54>
   15aa8:	mov	r2, r4
   15aac:	mov	r1, r6
   15ab0:	mov	r0, r5
   15ab4:	bl	15a2c <flatcc_builder_copy_buffer@@Base>
   15ab8:	cmp	r0, #0
   15abc:	bne	15ad4 <flatcc_builder_finalize_buffer@@Base+0x60>
   15ac0:	ldr	r3, [pc, #20]	; 15adc <flatcc_builder_finalize_buffer@@Base+0x68>
   15ac4:	movw	r2, #1948	; 0x79c
   15ac8:	ldr	r1, [pc, #16]	; 15ae0 <flatcc_builder_finalize_buffer@@Base+0x6c>
   15acc:	ldr	r0, [pc, #16]	; 15ae4 <flatcc_builder_finalize_buffer@@Base+0x70>
   15ad0:	bl	12324 <__assert_fail@plt>
   15ad4:	mov	r0, r6
   15ad8:	pop	{r4, r5, r6, pc}
   15adc:	andeq	r7, r1, sl, asr r5
   15ae0:	andeq	r7, r1, r9, ror r5
   15ae4:	andeq	r7, r1, r6, ror #11

00015ae8 <flatcc_builder_finalize_aligned_buffer@@Base>:
   15ae8:	push	{r4, r5, r6, r7, r8, lr}
   15aec:	mov	r6, r0
   15af0:	subs	r7, r1, #0
   15af4:	ldr	r2, [r0, #136]	; 0x88
   15af8:	ldr	r4, [r0, #140]	; 0x8c
   15afc:	ldrh	r0, [r0, #128]	; 0x80
   15b00:	sub	r2, r4, r2
   15b04:	sub	r4, r0, #1
   15b08:	strne	r2, [r7]
   15b0c:	add	r4, r4, r2
   15b10:	rsb	r2, r0, #0
   15b14:	and	r4, r4, r2
   15b18:	mov	r1, r4
   15b1c:	bl	12f3c <_start@@Base+0xb1c>
   15b20:	subs	r5, r0, #0
   15b24:	beq	15b4c <flatcc_builder_finalize_aligned_buffer@@Base+0x64>
   15b28:	mov	r2, r4
   15b2c:	mov	r1, r5
   15b30:	mov	r0, r6
   15b34:	bl	15a2c <flatcc_builder_copy_buffer@@Base>
   15b38:	subs	r4, r0, #0
   15b3c:	bne	15b4c <flatcc_builder_finalize_aligned_buffer@@Base+0x64>
   15b40:	mov	r0, r5
   15b44:	mov	r5, r4
   15b48:	bl	12288 <free@plt>
   15b4c:	adds	r3, r7, #0
   15b50:	mov	r0, r5
   15b54:	movne	r3, #1
   15b58:	cmp	r5, #0
   15b5c:	movne	r3, #0
   15b60:	cmp	r3, #0
   15b64:	movne	r3, #0
   15b68:	strne	r3, [r7]
   15b6c:	pop	{r4, r5, r6, r7, r8, pc}

00015b70 <flatcc_builder_aligned_alloc@@Base>:
   15b70:	b	12f3c <_start@@Base+0xb1c>

00015b74 <flatcc_builder_aligned_free@@Base>:
   15b74:	b	12288 <free@plt>

00015b78 <flatcc_builder_get_emit_context@@Base>:
   15b78:	ldr	r0, [r0, #36]	; 0x24
   15b7c:	bx	lr

00015b80 <flatcc_emitter_recycle_page@@Base>:
   15b80:	ldr	r3, [r0]
   15b84:	cmp	r3, r1
   15b88:	beq	15bc8 <flatcc_emitter_recycle_page@@Base+0x48>
   15b8c:	ldr	r2, [r0, #4]
   15b90:	cmp	r2, r1
   15b94:	beq	15bc8 <flatcc_emitter_recycle_page@@Base+0x48>
   15b98:	ldr	r0, [r1, #2944]	; 0xb80
   15b9c:	ldr	r2, [r1, #2948]	; 0xb84
   15ba0:	str	r2, [r0, #2948]	; 0xb84
   15ba4:	str	r0, [r2, #2944]	; 0xb80
   15ba8:	mov	r0, #0
   15bac:	ldr	r2, [r3, #2948]	; 0xb84
   15bb0:	str	r3, [r1, #2944]	; 0xb80
   15bb4:	str	r2, [r1, #2948]	; 0xb84
   15bb8:	str	r1, [r2, #2944]	; 0xb80
   15bbc:	ldr	r3, [r1, #2944]	; 0xb80
   15bc0:	str	r1, [r3, #2948]	; 0xb84
   15bc4:	bx	lr
   15bc8:	mvn	r0, #0
   15bcc:	bx	lr

00015bd0 <flatcc_emitter_reset@@Base>:
   15bd0:	ldr	r3, [r0]
   15bd4:	cmp	r3, #0
   15bd8:	bxeq	lr
   15bdc:	add	r2, r3, #1472	; 0x5c0
   15be0:	push	{r4, lr}
   15be4:	mov	r4, r0
   15be8:	str	r3, [r0, #4]
   15bec:	str	r2, [r0, #8]
   15bf0:	str	r2, [r0, #16]
   15bf4:	mov	r2, #1472	; 0x5c0
   15bf8:	str	r2, [r0, #12]
   15bfc:	str	r2, [r0, #20]
   15c00:	sub	r2, r2, #2944	; 0xb80
   15c04:	str	r2, [r3, #2952]	; 0xb88
   15c08:	ldr	r3, [r0, #24]
   15c0c:	ldr	r2, [r0, #32]
   15c10:	cmp	r2, #0
   15c14:	streq	r3, [r0, #32]
   15c18:	lsr	r3, r3, #2
   15c1c:	ldr	r2, [r0, #32]
   15c20:	add	r2, r2, r2, lsl #1
   15c24:	add	r3, r3, r2, lsr #2
   15c28:	str	r3, [r0, #32]
   15c2c:	mov	r3, #0
   15c30:	str	r3, [r0, #24]
   15c34:	ldr	r3, [r4, #28]
   15c38:	ldr	r2, [r4, #32]
   15c3c:	cmp	r3, r2, lsl #1
   15c40:	popls	{r4, pc}
   15c44:	ldrd	r2, [r4]
   15c48:	ldr	r0, [r3, #2944]	; 0xb80
   15c4c:	cmp	r0, r2
   15c50:	popeq	{r4, pc}
   15c54:	ldr	r2, [r0, #2944]	; 0xb80
   15c58:	str	r2, [r3, #2944]	; 0xb80
   15c5c:	ldr	r2, [r0, #2944]	; 0xb80
   15c60:	str	r3, [r2, #2948]	; 0xb84
   15c64:	bl	12288 <free@plt>
   15c68:	ldr	r3, [r4, #28]
   15c6c:	sub	r3, r3, #2944	; 0xb80
   15c70:	str	r3, [r4, #28]
   15c74:	b	15c34 <flatcc_emitter_reset@@Base+0x64>

00015c78 <flatcc_emitter_clear@@Base>:
   15c78:	ldr	r3, [r0]
   15c7c:	cmp	r3, #0
   15c80:	bxeq	lr
   15c84:	push	{r4, r5, r6, lr}
   15c88:	mov	r1, #0
   15c8c:	mov	r4, r0
   15c90:	ldr	r2, [r3, #2948]	; 0xb84
   15c94:	str	r1, [r2, #2944]	; 0xb80
   15c98:	ldr	r5, [r3, #2944]	; 0xb80
   15c9c:	cmp	r5, #0
   15ca0:	bne	15cc0 <flatcc_emitter_clear@@Base+0x48>
   15ca4:	mov	r0, r3
   15ca8:	bl	12288 <free@plt>
   15cac:	mov	r1, r5
   15cb0:	mov	r0, r4
   15cb4:	pop	{r4, r5, r6, lr}
   15cb8:	mov	r2, #36	; 0x24
   15cbc:	b	122f4 <memset@plt>
   15cc0:	ldr	r0, [r5, #2948]	; 0xb84
   15cc4:	bl	12288 <free@plt>
   15cc8:	mov	r3, r5
   15ccc:	b	15c98 <flatcc_emitter_clear@@Base+0x20>

00015cd0 <flatcc_emitter@@Base>:
   15cd0:	push	{r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15cd4:	mov	r4, r0
   15cd8:	mov	r6, r2
   15cdc:	cmp	r3, #0
   15ce0:	ldr	r0, [r0, #24]
   15ce4:	ldr	r2, [sp, #40]	; 0x28
   15ce8:	add	r0, r0, r2
   15cec:	str	r0, [r4, #24]
   15cf0:	bge	15e88 <flatcc_emitter@@Base+0x1b8>
   15cf4:	ldr	r0, [r4, #12]
   15cf8:	cmp	r0, r2
   15cfc:	bcc	15d40 <flatcc_emitter@@Base+0x70>
   15d00:	ldr	r3, [r4, #8]
   15d04:	sub	r3, r3, r2
   15d08:	sub	r2, r0, r2
   15d0c:	str	r3, [r4, #8]
   15d10:	str	r2, [r4, #12]
   15d14:	mov	r4, r1
   15d18:	sub	r6, r6, #1
   15d1c:	add	r4, r4, #8
   15d20:	cmn	r6, #1
   15d24:	beq	15d54 <flatcc_emitter@@Base+0x84>
   15d28:	mov	r0, r3
   15d2c:	ldmdb	r4, {r1, r2}
   15d30:	bl	12294 <memcpy@plt>
   15d34:	ldr	r2, [r4, #-4]
   15d38:	add	r3, r0, r2
   15d3c:	b	15d18 <flatcc_emitter@@Base+0x48>
   15d40:	ldr	r9, [pc, #648]	; 15fd0 <flatcc_emitter@@Base+0x300>
   15d44:	add	r5, r1, r6, lsl #3
   15d48:	mov	r8, #2944	; 0xb80
   15d4c:	cmp	r6, #0
   15d50:	bne	15d5c <flatcc_emitter@@Base+0x8c>
   15d54:	mov	r0, #0
   15d58:	b	15df4 <flatcc_emitter@@Base+0x124>
   15d5c:	ldr	sl, [r5, #-8]
   15d60:	ldr	r7, [r5, #-4]
   15d64:	add	sl, sl, r7
   15d68:	cmp	r7, #0
   15d6c:	subeq	r5, r5, #8
   15d70:	subeq	r6, r6, #1
   15d74:	beq	15d4c <flatcc_emitter@@Base+0x7c>
   15d78:	ldr	r3, [r4, #12]
   15d7c:	cmp	r3, r7
   15d80:	bcs	15e58 <flatcc_emitter@@Base+0x188>
   15d84:	cmp	r3, #0
   15d88:	movne	r2, r3
   15d8c:	bne	15e5c <flatcc_emitter@@Base+0x18c>
   15d90:	ldr	fp, [r4]
   15d94:	cmp	fp, #0
   15d98:	beq	15de0 <flatcc_emitter@@Base+0x110>
   15d9c:	ldr	r2, [r4, #4]
   15da0:	ldr	r3, [fp, #2948]	; 0xb84
   15da4:	cmp	r3, r2
   15da8:	beq	15de0 <flatcc_emitter@@Base+0x110>
   15dac:	ldr	r2, [fp, #2952]	; 0xb88
   15db0:	sub	r2, r2, #2944	; 0xb80
   15db4:	str	r2, [r3, #2952]	; 0xb88
   15db8:	str	r3, [r4]
   15dbc:	ldr	r3, [r4]
   15dc0:	str	r8, [r4, #12]
   15dc4:	add	r2, r3, #2944	; 0xb80
   15dc8:	str	r2, [r4, #8]
   15dcc:	ldr	r2, [r3, #2944]	; 0xb80
   15dd0:	ldr	r2, [r2, #2952]	; 0xb88
   15dd4:	sub	r2, r2, #2944	; 0xb80
   15dd8:	str	r2, [r3, #2952]	; 0xb88
   15ddc:	b	15d68 <flatcc_emitter@@Base+0x98>
   15de0:	movw	r0, #2956	; 0xb8c
   15de4:	bl	122b8 <malloc@plt>
   15de8:	cmp	r0, #0
   15dec:	bne	15dfc <flatcc_emitter@@Base+0x12c>
   15df0:	mvn	r0, #0
   15df4:	add	sp, sp, #4
   15df8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15dfc:	ldr	r3, [r4, #28]
   15e00:	cmp	fp, #0
   15e04:	add	r3, r3, #2944	; 0xb80
   15e08:	str	r3, [r4, #28]
   15e0c:	beq	15e2c <flatcc_emitter@@Base+0x15c>
   15e10:	ldr	r3, [r4, #4]
   15e14:	str	fp, [r0, #2944]	; 0xb80
   15e18:	str	r3, [r0, #2948]	; 0xb84
   15e1c:	str	r0, [fp, #2948]	; 0xb84
   15e20:	str	r0, [r3, #2944]	; 0xb80
   15e24:	str	r0, [r4]
   15e28:	b	15dbc <flatcc_emitter@@Base+0xec>
   15e2c:	add	r3, r0, #1472	; 0x5c0
   15e30:	str	r0, [r4]
   15e34:	str	r0, [r0, #2944]	; 0xb80
   15e38:	stmib	r4, {r0, r3}
   15e3c:	str	r3, [r4, #16]
   15e40:	mov	r3, #1472	; 0x5c0
   15e44:	str	r0, [r0, #2948]	; 0xb84
   15e48:	str	r3, [r4, #12]
   15e4c:	str	r3, [r4, #20]
   15e50:	str	r9, [r0, #2952]	; 0xb88
   15e54:	b	15d68 <flatcc_emitter@@Base+0x98>
   15e58:	mov	r2, r7
   15e5c:	ldr	r0, [r4, #8]
   15e60:	rsb	r1, r2, #0
   15e64:	sub	r3, r3, r2
   15e68:	add	sl, sl, r1
   15e6c:	sub	r7, r7, r2
   15e70:	str	r3, [r4, #12]
   15e74:	add	r0, r0, r1
   15e78:	mov	r1, sl
   15e7c:	str	r0, [r4, #8]
   15e80:	bl	12294 <memcpy@plt>
   15e84:	b	15d68 <flatcc_emitter@@Base+0x98>
   15e88:	ldr	r0, [r4, #20]
   15e8c:	cmp	r0, r2
   15e90:	bcs	15ec4 <flatcc_emitter@@Base+0x1f4>
   15e94:	ldr	sl, [pc, #308]	; 15fd0 <flatcc_emitter@@Base+0x300>
   15e98:	add	r5, r1, #8
   15e9c:	mov	r9, #2944	; 0xb80
   15ea0:	cmp	r6, #0
   15ea4:	beq	15d54 <flatcc_emitter@@Base+0x84>
   15ea8:	ldr	fp, [r5, #-8]
   15eac:	ldr	r8, [r5, #-4]
   15eb0:	cmp	r8, #0
   15eb4:	bne	15edc <flatcc_emitter@@Base+0x20c>
   15eb8:	sub	r6, r6, #1
   15ebc:	add	r5, r5, #8
   15ec0:	b	15ea0 <flatcc_emitter@@Base+0x1d0>
   15ec4:	ldr	r3, [r4, #16]
   15ec8:	add	ip, r3, r2
   15ecc:	sub	r2, r0, r2
   15ed0:	str	ip, [r4, #16]
   15ed4:	str	r2, [r4, #20]
   15ed8:	b	15d14 <flatcc_emitter@@Base+0x44>
   15edc:	ldr	r7, [r4, #20]
   15ee0:	cmp	r7, r8
   15ee4:	bcs	15f98 <flatcc_emitter@@Base+0x2c8>
   15ee8:	cmp	r7, #0
   15eec:	bne	15f9c <flatcc_emitter@@Base+0x2cc>
   15ef0:	ldr	r7, [r4, #4]
   15ef4:	cmp	r7, #0
   15ef8:	beq	15f10 <flatcc_emitter@@Base+0x240>
   15efc:	ldr	r2, [r4]
   15f00:	ldr	r3, [r7, #2944]	; 0xb80
   15f04:	cmp	r3, r2
   15f08:	strne	r3, [r4, #4]
   15f0c:	bne	15f4c <flatcc_emitter@@Base+0x27c>
   15f10:	movw	r0, #2956	; 0xb8c
   15f14:	bl	122b8 <malloc@plt>
   15f18:	cmp	r0, #0
   15f1c:	beq	15df0 <flatcc_emitter@@Base+0x120>
   15f20:	ldr	r3, [r4, #28]
   15f24:	cmp	r7, #0
   15f28:	add	r3, r3, #2944	; 0xb80
   15f2c:	str	r3, [r4, #28]
   15f30:	beq	15f6c <flatcc_emitter@@Base+0x29c>
   15f34:	ldr	r3, [r4]
   15f38:	str	r3, [r0, #2944]	; 0xb80
   15f3c:	str	r7, [r0, #2948]	; 0xb84
   15f40:	str	r0, [r3, #2948]	; 0xb84
   15f44:	str	r0, [r7, #2944]	; 0xb80
   15f48:	str	r0, [r4, #4]
   15f4c:	ldr	r3, [r4, #4]
   15f50:	ldr	r2, [r3, #2948]	; 0xb84
   15f54:	ldr	r2, [r2, #2952]	; 0xb88
   15f58:	str	r3, [r4, #16]
   15f5c:	str	r9, [r4, #20]
   15f60:	add	r2, r2, #2944	; 0xb80
   15f64:	str	r2, [r3, #2952]	; 0xb88
   15f68:	b	15eb0 <flatcc_emitter@@Base+0x1e0>
   15f6c:	add	r3, r0, #1472	; 0x5c0
   15f70:	str	r0, [r4]
   15f74:	str	r0, [r0, #2944]	; 0xb80
   15f78:	stmib	r4, {r0, r3}
   15f7c:	str	r3, [r4, #16]
   15f80:	mov	r3, #1472	; 0x5c0
   15f84:	str	r0, [r0, #2948]	; 0xb84
   15f88:	str	r3, [r4, #12]
   15f8c:	str	r3, [r4, #20]
   15f90:	str	sl, [r0, #2952]	; 0xb88
   15f94:	b	15eb0 <flatcc_emitter@@Base+0x1e0>
   15f98:	mov	r7, r8
   15f9c:	mov	r2, r7
   15fa0:	mov	r1, fp
   15fa4:	ldr	r0, [r4, #16]
   15fa8:	bl	12294 <memcpy@plt>
   15fac:	ldr	r3, [r4, #16]
   15fb0:	sub	r8, r8, r7
   15fb4:	add	fp, fp, r7
   15fb8:	add	r3, r3, r7
   15fbc:	str	r3, [r4, #16]
   15fc0:	ldr	r3, [r4, #20]
   15fc4:	sub	r7, r3, r7
   15fc8:	str	r7, [r4, #20]
   15fcc:	b	15eb0 <flatcc_emitter@@Base+0x1e0>
   15fd0:			; <UNDEFINED> instruction: 0xfffffa40

00015fd4 <flatcc_emitter_copy_buffer@@Base>:
   15fd4:	ldr	ip, [r0, #24]
   15fd8:	push	{r4, r5, r6, lr}
   15fdc:	cmp	ip, r2
   15fe0:	movhi	r6, #0
   15fe4:	bhi	1601c <flatcc_emitter_copy_buffer@@Base+0x48>
   15fe8:	ldr	r6, [r0]
   15fec:	cmp	r6, #0
   15ff0:	beq	1601c <flatcc_emitter_copy_buffer@@Base+0x48>
   15ff4:	ldr	r2, [r0, #4]
   15ff8:	mov	r5, r1
   15ffc:	mov	r4, r0
   16000:	ldr	r1, [r0, #8]
   16004:	cmp	r6, r2
   16008:	bne	16024 <flatcc_emitter_copy_buffer@@Base+0x50>
   1600c:	mov	r2, ip
   16010:	mov	r0, r5
   16014:	mov	r6, r5
   16018:	bl	12294 <memcpy@plt>
   1601c:	mov	r0, r6
   16020:	pop	{r4, r5, r6, pc}
   16024:	ldr	r3, [r4, #12]
   16028:	mov	r0, r5
   1602c:	rsb	r6, r3, #2944	; 0xb80
   16030:	mov	r2, r6
   16034:	add	r6, r5, r6
   16038:	bl	12294 <memcpy@plt>
   1603c:	ldr	r2, [r4]
   16040:	ldr	r5, [r2, #2944]	; 0xb80
   16044:	ldr	r2, [r4, #4]
   16048:	cmp	r2, r5
   1604c:	bne	16068 <flatcc_emitter_copy_buffer@@Base+0x94>
   16050:	ldr	r2, [r4, #20]
   16054:	mov	r1, r5
   16058:	mov	r0, r6
   1605c:	rsb	r2, r2, #2944	; 0xb80
   16060:	bl	12294 <memcpy@plt>
   16064:	b	1601c <flatcc_emitter_copy_buffer@@Base+0x48>
   16068:	mov	r1, r5
   1606c:	mov	r0, r6
   16070:	mov	r2, #2944	; 0xb80
   16074:	add	r6, r6, #2944	; 0xb80
   16078:	bl	12294 <memcpy@plt>
   1607c:	ldr	r5, [r5, #2944]	; 0xb80
   16080:	b	16044 <flatcc_emitter_copy_buffer@@Base+0x70>
   16084:	cmp	r2, #0
   16088:	beq	160d0 <flatcc_emitter_copy_buffer@@Base+0xfc>
   1608c:	add	r1, r2, r1
   16090:	cmp	r1, r0
   16094:	bhi	160d0 <flatcc_emitter_copy_buffer@@Base+0xfc>
   16098:	adds	r3, r1, r3
   1609c:	bcs	160b0 <flatcc_emitter_copy_buffer@@Base+0xdc>
   160a0:	cmp	r3, r0
   160a4:	bls	160b8 <flatcc_emitter_copy_buffer@@Base+0xe4>
   160a8:	mov	r0, #9
   160ac:	bx	lr
   160b0:	mov	r0, #10
   160b4:	bx	lr
   160b8:	ldrh	r3, [sp]
   160bc:	sub	r3, r3, #1
   160c0:	tst	r3, r1
   160c4:	moveq	r0, #0
   160c8:	movne	r0, #11
   160cc:	bx	lr
   160d0:	mov	r0, #18
   160d4:	bx	lr
   160d8:	ldrh	r3, [r0, #22]
   160dc:	add	r1, r1, #2
   160e0:	lsl	r1, r1, #1
   160e4:	uxth	r1, r1
   160e8:	cmp	r3, r1
   160ec:	ldrhi	r3, [r0, #12]
   160f0:	ldrhhi	r0, [r3, r1]
   160f4:	movls	r0, #0
   160f8:	bx	lr
   160fc:	push	{r4, lr}
   16100:	mov	r2, r0
   16104:	bl	160d8 <flatcc_emitter_copy_buffer@@Base+0x104>
   16108:	uxth	r3, r0
   1610c:	cmp	r3, #0
   16110:	ldrne	r3, [r2, #16]
   16114:	uxtahne	r0, r3, r0
   16118:	ldrne	r3, [r2]
   1611c:	addne	r0, r3, r0
   16120:	moveq	r0, r3
   16124:	pop	{r4, pc}
   16128:	push	{r4, r5, r6, lr}
   1612c:	mov	r4, r3
   16130:	mov	r5, r0
   16134:	bl	160d8 <flatcc_emitter_copy_buffer@@Base+0x104>
   16138:	uxth	r3, r0
   1613c:	cmp	r3, #0
   16140:	bne	16158 <flatcc_emitter_copy_buffer@@Base+0x184>
   16144:	cmp	r2, #0
   16148:	str	r3, [r4]
   1614c:	movne	r2, #4
   16150:	mov	r0, r2
   16154:	pop	{r4, r5, r6, pc}
   16158:	ldrh	r2, [r5, #20]
   1615c:	uxth	r0, r0
   16160:	add	r3, r0, #4
   16164:	cmp	r2, r3
   16168:	movcc	r2, #13
   1616c:	bcc	16150 <flatcc_emitter_copy_buffer@@Base+0x17c>
   16170:	ldr	r3, [r5, #16]
   16174:	add	r0, r0, r3
   16178:	ands	r2, r0, #3
   1617c:	movne	r2, #12
   16180:	streq	r0, [r4]
   16184:	b	16150 <flatcc_emitter_copy_buffer@@Base+0x17c>
   16188:	add	r3, r2, r3
   1618c:	ldrh	ip, [sp, #4]
   16190:	cmp	r2, r3
   16194:	bcs	161e8 <flatcc_emitter_copy_buffer@@Base+0x214>
   16198:	add	r2, r3, #4
   1619c:	cmp	r1, r2
   161a0:	bcc	161e8 <flatcc_emitter_copy_buffer@@Base+0x214>
   161a4:	cmp	ip, #4
   161a8:	movcc	ip, #4
   161ac:	sub	ip, ip, #1
   161b0:	orr	ip, ip, #3
   161b4:	tst	ip, r2
   161b8:	bne	161e8 <flatcc_emitter_copy_buffer@@Base+0x214>
   161bc:	ldr	r3, [r0, r3]
   161c0:	ldr	r0, [sp, #8]
   161c4:	cmp	r3, r0
   161c8:	bhi	161f0 <flatcc_emitter_copy_buffer@@Base+0x21c>
   161cc:	ldr	r0, [sp]
   161d0:	sub	r1, r1, r2
   161d4:	mul	r0, r0, r3
   161d8:	cmp	r1, r0
   161dc:	movcc	r0, #26
   161e0:	movcs	r0, #0
   161e4:	bx	lr
   161e8:	mov	r0, #16
   161ec:	bx	lr
   161f0:	mov	r0, #25
   161f4:	bx	lr
   161f8:	push	{r4, lr}
   161fc:	sub	sp, sp, #24
   16200:	ldr	ip, [sp, #32]
   16204:	sub	ip, ip, #1
   16208:	cmp	ip, #0
   1620c:	moveq	r0, #3
   16210:	str	ip, [sp, #8]
   16214:	beq	162b8 <flatcc_emitter_copy_buffer@@Base+0x2e4>
   16218:	add	r3, r2, r3
   1621c:	cmp	r2, r3
   16220:	bcs	162c0 <flatcc_emitter_copy_buffer@@Base+0x2ec>
   16224:	add	r2, r3, #4
   16228:	cmp	r1, r2
   1622c:	bcc	162c0 <flatcc_emitter_copy_buffer@@Base+0x2ec>
   16230:	tst	r3, #3
   16234:	bne	162c0 <flatcc_emitter_copy_buffer@@Base+0x2ec>
   16238:	ldr	r2, [r0, r3]
   1623c:	str	r3, [sp, #16]
   16240:	subs	r2, r3, r2
   16244:	bmi	162c8 <flatcc_emitter_copy_buffer@@Base+0x2f4>
   16248:	tst	r2, #1
   1624c:	bne	162c8 <flatcc_emitter_copy_buffer@@Base+0x2f4>
   16250:	add	lr, r2, #2
   16254:	cmp	lr, r1
   16258:	movhi	r0, #27
   1625c:	bhi	162b8 <flatcc_emitter_copy_buffer@@Base+0x2e4>
   16260:	ldrh	ip, [r0, r2]
   16264:	add	r4, r0, r2
   16268:	add	r2, ip, r2
   1626c:	strh	ip, [sp, #22]
   16270:	cmp	r1, r2
   16274:	bcc	162d0 <flatcc_emitter_copy_buffer@@Base+0x2fc>
   16278:	tst	ip, #1
   1627c:	bne	162d0 <flatcc_emitter_copy_buffer@@Base+0x2fc>
   16280:	cmp	ip, #3
   16284:	movls	r0, #28
   16288:	bls	162b8 <flatcc_emitter_copy_buffer@@Base+0x2e4>
   1628c:	ldrh	r2, [r0, lr]
   16290:	sub	r3, r1, r3
   16294:	cmp	r3, r2
   16298:	strh	r2, [sp, #20]
   1629c:	movcc	r0, #20
   162a0:	bcc	162b8 <flatcc_emitter_copy_buffer@@Base+0x2e4>
   162a4:	strd	r0, [sp]
   162a8:	mov	r0, sp
   162ac:	ldr	r3, [sp, #36]	; 0x24
   162b0:	str	r4, [sp, #12]
   162b4:	blx	r3
   162b8:	add	sp, sp, #24
   162bc:	pop	{r4, pc}
   162c0:	mov	r0, #15
   162c4:	b	162b8 <flatcc_emitter_copy_buffer@@Base+0x2e4>
   162c8:	mov	r0, #29
   162cc:	b	162b8 <flatcc_emitter_copy_buffer@@Base+0x2e4>
   162d0:	mov	r0, #30
   162d4:	b	162b8 <flatcc_emitter_copy_buffer@@Base+0x2e4>
   162d8:	add	r3, r2, r3
   162dc:	cmp	r2, r3
   162e0:	bcs	16324 <flatcc_emitter_copy_buffer@@Base+0x350>
   162e4:	add	r2, r3, #4
   162e8:	cmp	r1, r2
   162ec:	bcc	16324 <flatcc_emitter_copy_buffer@@Base+0x350>
   162f0:	tst	r3, #3
   162f4:	bne	16324 <flatcc_emitter_copy_buffer@@Base+0x350>
   162f8:	ldr	r3, [r0, r3]
   162fc:	sub	r1, r1, r2
   16300:	add	ip, r3, #1
   16304:	cmp	r1, ip
   16308:	bcc	1632c <flatcc_emitter_copy_buffer@@Base+0x358>
   1630c:	add	r0, r0, r3
   16310:	ldrb	r3, [r0, r2]
   16314:	cmp	r3, #0
   16318:	moveq	r0, #0
   1631c:	movne	r0, #7
   16320:	bx	lr
   16324:	mov	r0, #17
   16328:	bx	lr
   1632c:	mov	r0, #8
   16330:	bx	lr

00016334 <flatcc_verify_error_string@@Base>:
   16334:	cmp	r0, #36	; 0x24
   16338:	ldrls	r3, [pc, #8]	; 16348 <flatcc_verify_error_string@@Base+0x14>
   1633c:	ldrls	r0, [r3, r0, lsl #2]
   16340:	ldrhi	r0, [pc, #4]	; 1634c <flatcc_verify_error_string@@Base+0x18>
   16344:	bx	lr
   16348:	andeq	r7, r1, r0, asr r9
   1634c:	andeq	r7, r1, r4, ror #19

00016350 <flatcc_verify_field@@Base>:
   16350:	push	{r4, r5, r6, lr}
   16354:	mov	r5, r0
   16358:	mov	r4, r3
   1635c:	bl	160d8 <flatcc_emitter_copy_buffer@@Base+0x104>
   16360:	uxth	r1, r0
   16364:	cmp	r1, #0
   16368:	beq	163a0 <flatcc_verify_field@@Base+0x50>
   1636c:	ldrh	r3, [r5, #20]
   16370:	add	r2, r2, r1
   16374:	cmp	r2, r3
   16378:	bhi	163a8 <flatcc_verify_field@@Base+0x58>
   1637c:	ldr	r0, [r5]
   16380:	sub	r4, r4, #1
   16384:	ldr	r3, [r5, #16]
   16388:	add	r0, r0, r3
   1638c:	add	r0, r0, r1
   16390:	tst	r0, r4
   16394:	moveq	r0, #0
   16398:	movne	r0, #12
   1639c:	pop	{r4, r5, r6, pc}
   163a0:	mov	r0, r1
   163a4:	pop	{r4, r5, r6, pc}
   163a8:	mov	r0, #13
   163ac:	pop	{r4, r5, r6, pc}

000163b0 <flatcc_verify_string_field@@Base>:
   163b0:	push	{r0, r1, r4, lr}
   163b4:	add	r3, sp, #4
   163b8:	mov	r4, r0
   163bc:	bl	16128 <flatcc_emitter_copy_buffer@@Base+0x154>
   163c0:	cmp	r0, #0
   163c4:	bne	163e0 <flatcc_verify_string_field@@Base+0x30>
   163c8:	ldr	r2, [sp, #4]
   163cc:	cmp	r2, #0
   163d0:	beq	163e0 <flatcc_verify_string_field@@Base+0x30>
   163d4:	ldrd	r0, [r4]
   163d8:	ldr	r3, [r0, r2]
   163dc:	bl	162d8 <flatcc_emitter_copy_buffer@@Base+0x304>
   163e0:	add	sp, sp, #8
   163e4:	pop	{r4, pc}

000163e8 <flatcc_verify_vector_field@@Base>:
   163e8:	push	{r4, r5, lr}
   163ec:	sub	sp, sp, #28
   163f0:	mov	r5, r3
   163f4:	add	r3, sp, #20
   163f8:	mov	r4, r0
   163fc:	bl	16128 <flatcc_emitter_copy_buffer@@Base+0x154>
   16400:	cmp	r0, #0
   16404:	bne	16434 <flatcc_verify_vector_field@@Base+0x4c>
   16408:	ldr	r2, [sp, #20]
   1640c:	cmp	r2, #0
   16410:	beq	16434 <flatcc_verify_vector_field@@Base+0x4c>
   16414:	ldr	r3, [sp, #44]	; 0x2c
   16418:	ldrd	r0, [r4]
   1641c:	str	r5, [sp]
   16420:	str	r3, [sp, #8]
   16424:	ldrh	r3, [sp, #40]	; 0x28
   16428:	str	r3, [sp, #4]
   1642c:	ldr	r3, [r0, r2]
   16430:	bl	16188 <flatcc_emitter_copy_buffer@@Base+0x1b4>
   16434:	add	sp, sp, #28
   16438:	pop	{r4, r5, pc}

0001643c <flatcc_verify_string_vector_field@@Base>:
   1643c:	push	{r4, r5, r6, r7, r8, r9, lr}
   16440:	sub	sp, sp, #28
   16444:	mov	r7, r0
   16448:	add	r3, sp, #20
   1644c:	bl	16128 <flatcc_emitter_copy_buffer@@Base+0x154>
   16450:	subs	r6, r0, #0
   16454:	bne	164b4 <flatcc_verify_string_vector_field@@Base+0x78>
   16458:	ldr	r4, [sp, #20]
   1645c:	cmp	r4, #0
   16460:	beq	164b4 <flatcc_verify_string_vector_field@@Base+0x78>
   16464:	ldm	r7, {r5, r8}
   16468:	mvn	r3, #-1073741824	; 0xc0000000
   1646c:	mov	r2, r4
   16470:	ldr	r7, [r5, r4]
   16474:	mov	r1, r8
   16478:	mov	r0, r5
   1647c:	str	r3, [sp, #8]
   16480:	mov	r3, #4
   16484:	str	r3, [sp]
   16488:	str	r3, [sp, #4]
   1648c:	mov	r3, r7
   16490:	bl	16188 <flatcc_emitter_copy_buffer@@Base+0x1b4>
   16494:	subs	r6, r0, #0
   16498:	bne	164b4 <flatcc_verify_string_vector_field@@Base+0x78>
   1649c:	add	r4, r4, r7
   164a0:	mov	r7, r6
   164a4:	ldr	r9, [r5, r4]
   164a8:	add	r4, r4, #4
   164ac:	cmp	r9, r7
   164b0:	bne	164c0 <flatcc_verify_string_vector_field@@Base+0x84>
   164b4:	mov	r0, r6
   164b8:	add	sp, sp, #28
   164bc:	pop	{r4, r5, r6, r7, r8, r9, pc}
   164c0:	mov	r2, r4
   164c4:	mov	r1, r8
   164c8:	ldr	r3, [r5, r4]
   164cc:	mov	r0, r5
   164d0:	bl	162d8 <flatcc_emitter_copy_buffer@@Base+0x304>
   164d4:	cmp	r0, #0
   164d8:	addeq	r7, r7, #1
   164dc:	addeq	r4, r4, #4
   164e0:	beq	164ac <flatcc_verify_string_vector_field@@Base+0x70>
   164e4:	mov	r6, r0
   164e8:	b	164b4 <flatcc_verify_string_vector_field@@Base+0x78>

000164ec <flatcc_verify_table_field@@Base>:
   164ec:	push	{r4, r5, lr}
   164f0:	sub	sp, sp, #20
   164f4:	mov	r5, r3
   164f8:	add	r3, sp, #12
   164fc:	mov	r4, r0
   16500:	bl	16128 <flatcc_emitter_copy_buffer@@Base+0x154>
   16504:	cmp	r0, #0
   16508:	bne	1652c <flatcc_verify_table_field@@Base+0x40>
   1650c:	ldr	r2, [sp, #12]
   16510:	cmp	r2, #0
   16514:	beq	1652c <flatcc_verify_table_field@@Base+0x40>
   16518:	ldrd	r0, [r4]
   1651c:	ldr	r3, [r4, #8]
   16520:	stm	sp, {r3, r5}
   16524:	ldr	r3, [r0, r2]
   16528:	bl	161f8 <flatcc_emitter_copy_buffer@@Base+0x224>
   1652c:	add	sp, sp, #20
   16530:	pop	{r4, r5, pc}

00016534 <flatcc_verify_table_vector_field@@Base>:
   16534:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16538:	sub	sp, sp, #36	; 0x24
   1653c:	mov	sl, r3
   16540:	add	r3, sp, #28
   16544:	mov	r7, r0
   16548:	bl	16128 <flatcc_emitter_copy_buffer@@Base+0x154>
   1654c:	subs	r6, r0, #0
   16550:	bne	165cc <flatcc_verify_table_vector_field@@Base+0x98>
   16554:	ldr	r4, [sp, #28]
   16558:	cmp	r4, #0
   1655c:	beq	165cc <flatcc_verify_table_vector_field@@Base+0x98>
   16560:	ldm	r7, {r5, r9}
   16564:	ldr	r7, [r7, #8]
   16568:	ldr	r8, [r5, r4]
   1656c:	cmp	r7, #0
   16570:	movle	r6, #3
   16574:	ble	165cc <flatcc_verify_table_vector_field@@Base+0x98>
   16578:	mvn	r3, #-1073741824	; 0xc0000000
   1657c:	mov	r2, r4
   16580:	mov	r1, r9
   16584:	mov	r0, r5
   16588:	str	r3, [sp, #8]
   1658c:	mov	r3, #4
   16590:	str	r3, [sp]
   16594:	str	r3, [sp, #4]
   16598:	mov	r3, r8
   1659c:	bl	16188 <flatcc_emitter_copy_buffer@@Base+0x1b4>
   165a0:	cmp	r0, #0
   165a4:	bne	16614 <flatcc_verify_table_vector_field@@Base+0xe0>
   165a8:	add	r4, r4, r8
   165ac:	sub	r7, r7, #1
   165b0:	ldr	r3, [r5, r4]
   165b4:	mov	r8, r6
   165b8:	add	r4, r4, #4
   165bc:	str	r3, [sp, #20]
   165c0:	ldr	r3, [sp, #20]
   165c4:	cmp	r3, r8
   165c8:	bne	165d8 <flatcc_verify_table_vector_field@@Base+0xa4>
   165cc:	mov	r0, r6
   165d0:	add	sp, sp, #36	; 0x24
   165d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   165d8:	mov	r2, r4
   165dc:	mov	r1, r9
   165e0:	stm	sp, {r7, sl}
   165e4:	mov	r0, r5
   165e8:	ldr	r3, [r5, r4]
   165ec:	add	fp, r5, r4
   165f0:	bl	161f8 <flatcc_emitter_copy_buffer@@Base+0x224>
   165f4:	cmp	r0, #0
   165f8:	beq	1661c <flatcc_verify_table_vector_field@@Base+0xe8>
   165fc:	mov	r2, r4
   16600:	mov	r1, r9
   16604:	stm	sp, {r7, sl}
   16608:	mov	r0, r5
   1660c:	ldr	r3, [fp]
   16610:	bl	161f8 <flatcc_emitter_copy_buffer@@Base+0x224>
   16614:	mov	r6, r0
   16618:	b	165cc <flatcc_verify_table_vector_field@@Base+0x98>
   1661c:	add	r8, r8, #1
   16620:	add	r4, r4, #4
   16624:	b	165c0 <flatcc_verify_table_vector_field@@Base+0x8c>

00016628 <flatcc_verify_union_table@@Base>:
   16628:	push	{r0, r1, r2, lr}
   1662c:	str	r1, [sp, #4]
   16630:	ldr	r3, [r0, #8]
   16634:	str	r3, [sp]
   16638:	ldr	r1, [r0, #4]
   1663c:	ldrd	r2, [r0, #16]
   16640:	ldr	r0, [r0]
   16644:	bl	161f8 <flatcc_emitter_copy_buffer@@Base+0x224>
   16648:	add	sp, sp, #12
   1664c:	pop	{pc}		; (ldr pc, [sp], #4)

00016650 <flatcc_verify_union_struct@@Base>:
   16650:	push	{r0, r1, r2, lr}
   16654:	mov	r3, r1
   16658:	str	r2, [sp]
   1665c:	ldr	r1, [r0, #16]
   16660:	ldr	r2, [r0, #20]
   16664:	ldr	r0, [r0, #4]
   16668:	bl	16084 <flatcc_emitter_copy_buffer@@Base+0xb0>
   1666c:	add	sp, sp, #12
   16670:	pop	{pc}		; (ldr pc, [sp], #4)

00016674 <flatcc_verify_union_string@@Base>:
   16674:	ldr	r1, [r0, #4]
   16678:	ldrd	r2, [r0, #16]
   1667c:	ldr	r0, [r0]
   16680:	b	162d8 <flatcc_emitter_copy_buffer@@Base+0x304>

00016684 <flatcc_verify_buffer_header@@Base>:
   16684:	tst	r0, #3
   16688:	push	{r0, r1, r4, lr}
   1668c:	movne	r0, #5
   16690:	bne	166b8 <flatcc_verify_buffer_header@@Base+0x34>
   16694:	cmn	r1, #9
   16698:	movhi	r0, #6
   1669c:	bhi	166b8 <flatcc_verify_buffer_header@@Base+0x34>
   166a0:	cmp	r1, #7
   166a4:	movls	r0, #1
   166a8:	bls	166b8 <flatcc_verify_buffer_header@@Base+0x34>
   166ac:	cmp	r2, #0
   166b0:	bne	166c0 <flatcc_verify_buffer_header@@Base+0x3c>
   166b4:	mov	r0, #0
   166b8:	add	sp, sp, #8
   166bc:	pop	{r4, pc}
   166c0:	mov	r1, r2
   166c4:	mov	r2, #4
   166c8:	mov	r4, r0
   166cc:	add	r0, sp, r2
   166d0:	bl	12300 <strncpy@plt>
   166d4:	ldr	r2, [r4, #4]
   166d8:	ldr	r3, [sp, #4]
   166dc:	cmp	r3, #0
   166e0:	cmpne	r2, r3
   166e4:	movne	r0, #2
   166e8:	beq	166b4 <flatcc_verify_buffer_header@@Base+0x30>
   166ec:	b	166b8 <flatcc_verify_buffer_header@@Base+0x34>

000166f0 <flatcc_verify_typed_buffer_header@@Base>:
   166f0:	tst	r0, #3
   166f4:	bne	16724 <flatcc_verify_typed_buffer_header@@Base+0x34>
   166f8:	cmn	r1, #9
   166fc:	bhi	1672c <flatcc_verify_typed_buffer_header@@Base+0x3c>
   16700:	cmp	r1, #7
   16704:	bls	16734 <flatcc_verify_typed_buffer_header@@Base+0x44>
   16708:	cmp	r2, #0
   1670c:	beq	1673c <flatcc_verify_typed_buffer_header@@Base+0x4c>
   16710:	ldr	r0, [r0, #4]
   16714:	cmp	r2, r0
   16718:	movne	r0, #2
   1671c:	moveq	r0, #0
   16720:	bx	lr
   16724:	mov	r0, #5
   16728:	bx	lr
   1672c:	mov	r0, #6
   16730:	bx	lr
   16734:	mov	r0, #1
   16738:	bx	lr
   1673c:	mov	r0, r2
   16740:	bx	lr

00016744 <flatcc_verify_struct_as_root@@Base>:
   16744:	push	{r4, r5, r6, r7, r8, lr}
   16748:	mov	r4, r1
   1674c:	mov	r5, r0
   16750:	mov	r8, r2
   16754:	mov	r6, r3
   16758:	ldrh	r7, [sp, #24]
   1675c:	bl	16684 <flatcc_verify_buffer_header@@Base>
   16760:	subs	r1, r0, #0
   16764:	beq	1677c <flatcc_verify_struct_as_root@@Base+0x38>
   16768:	mov	r2, r8
   1676c:	mov	r1, r4
   16770:	mov	r0, r5
   16774:	pop	{r4, r5, r6, r7, r8, lr}
   16778:	b	16684 <flatcc_verify_buffer_header@@Base>
   1677c:	mov	r3, r6
   16780:	mov	r0, r4
   16784:	ldr	r2, [r5]
   16788:	str	r7, [sp, #24]
   1678c:	pop	{r4, r5, r6, r7, r8, lr}
   16790:	b	16084 <flatcc_emitter_copy_buffer@@Base+0xb0>

00016794 <flatcc_verify_struct_as_typed_root@@Base>:
   16794:	push	{r4, r5, r6, lr}
   16798:	mov	r4, r1
   1679c:	mov	r5, r0
   167a0:	bl	166f0 <flatcc_verify_typed_buffer_header@@Base>
   167a4:	subs	r1, r0, #0
   167a8:	ldrh	r6, [sp, #16]
   167ac:	popne	{r4, r5, r6, pc}
   167b0:	mov	r0, r4
   167b4:	ldr	r2, [r5]
   167b8:	str	r6, [sp, #16]
   167bc:	pop	{r4, r5, r6, lr}
   167c0:	b	16084 <flatcc_emitter_copy_buffer@@Base+0xb0>

000167c4 <flatcc_verify_table_as_root@@Base>:
   167c4:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   167c8:	mov	r7, r2
   167cc:	mov	r4, r0
   167d0:	mov	r5, r1
   167d4:	mov	r6, r3
   167d8:	bl	16684 <flatcc_verify_buffer_header@@Base>
   167dc:	subs	r2, r0, #0
   167e0:	beq	167fc <flatcc_verify_table_as_root@@Base+0x38>
   167e4:	mov	r2, r7
   167e8:	mov	r1, r5
   167ec:	mov	r0, r4
   167f0:	add	sp, sp, #12
   167f4:	pop	{r4, r5, r6, r7, lr}
   167f8:	b	16684 <flatcc_verify_buffer_header@@Base>
   167fc:	mov	r3, #100	; 0x64
   16800:	mov	r1, r5
   16804:	mov	r0, r4
   16808:	stm	sp, {r3, r6}
   1680c:	ldr	r3, [r4]
   16810:	bl	161f8 <flatcc_emitter_copy_buffer@@Base+0x224>
   16814:	add	sp, sp, #12
   16818:	pop	{r4, r5, r6, r7, pc}

0001681c <flatcc_verify_table_as_typed_root@@Base>:
   1681c:	push	{r0, r1, r2, r4, r5, lr}
   16820:	mov	r4, r0
   16824:	bl	166f0 <flatcc_verify_typed_buffer_header@@Base>
   16828:	cmp	r0, #0
   1682c:	bne	1684c <flatcc_verify_table_as_typed_root@@Base+0x30>
   16830:	str	r3, [sp, #4]
   16834:	mov	r3, #100	; 0x64
   16838:	mov	r2, r0
   1683c:	mov	r0, r4
   16840:	str	r3, [sp]
   16844:	ldr	r3, [r4]
   16848:	bl	161f8 <flatcc_emitter_copy_buffer@@Base+0x224>
   1684c:	add	sp, sp, #12
   16850:	pop	{r4, r5, pc}

00016854 <flatcc_verify_struct_as_nested_root@@Base>:
   16854:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16858:	mvn	sl, #0
   1685c:	mov	r7, #1
   16860:	mov	r8, r3
   16864:	mov	r5, r0
   16868:	mov	r6, r1
   1686c:	mov	fp, r2
   16870:	ldrh	r4, [sp, #52]	; 0x34
   16874:	stm	sp, {r7, sl}
   16878:	ldr	r9, [sp, #48]	; 0x30
   1687c:	mov	r3, r4
   16880:	bl	163e8 <flatcc_verify_vector_field@@Base>
   16884:	cmp	r0, #0
   16888:	beq	168b0 <flatcc_verify_struct_as_nested_root@@Base+0x5c>
   1688c:	mov	r3, r4
   16890:	mov	r2, fp
   16894:	str	r7, [sp, #48]	; 0x30
   16898:	mov	r1, r6
   1689c:	mov	r0, r5
   168a0:	str	sl, [sp, #52]	; 0x34
   168a4:	add	sp, sp, #12
   168a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   168ac:	b	163e8 <flatcc_verify_vector_field@@Base>
   168b0:	mov	r1, r6
   168b4:	mov	r0, r5
   168b8:	bl	160fc <flatcc_emitter_copy_buffer@@Base+0x128>
   168bc:	subs	r1, r0, #0
   168c0:	beq	168ec <flatcc_verify_struct_as_nested_root@@Base+0x98>
   168c4:	ldr	ip, [r1]
   168c8:	mov	r3, r9
   168cc:	mov	r2, r8
   168d0:	str	r4, [sp, #48]	; 0x30
   168d4:	add	r0, r1, ip
   168d8:	ldr	r1, [r1, ip]
   168dc:	add	r0, r0, #4
   168e0:	add	sp, sp, #12
   168e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   168e8:	b	16744 <flatcc_verify_struct_as_root@@Base>
   168ec:	add	sp, sp, #12
   168f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

000168f4 <flatcc_verify_table_as_nested_root@@Base>:
   168f4:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   168f8:	mvn	sl, #0
   168fc:	mov	r7, #1
   16900:	mov	r8, r3
   16904:	mov	r6, r0
   16908:	mov	r4, r1
   1690c:	mov	fp, r2
   16910:	ldrh	r5, [sp, #48]	; 0x30
   16914:	stm	sp, {r7, sl}
   16918:	ldr	r9, [sp, #52]	; 0x34
   1691c:	mov	r3, r5
   16920:	bl	163e8 <flatcc_verify_vector_field@@Base>
   16924:	cmp	r0, #0
   16928:	beq	16950 <flatcc_verify_table_as_nested_root@@Base+0x5c>
   1692c:	mov	r3, r5
   16930:	mov	r2, fp
   16934:	str	r7, [sp, #48]	; 0x30
   16938:	mov	r1, r4
   1693c:	mov	r0, r6
   16940:	str	sl, [sp, #52]	; 0x34
   16944:	add	sp, sp, #12
   16948:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1694c:	b	163e8 <flatcc_verify_vector_field@@Base>
   16950:	mov	r1, r4
   16954:	mov	r0, r6
   16958:	bl	160fc <flatcc_emitter_copy_buffer@@Base+0x128>
   1695c:	subs	r3, r0, #0
   16960:	beq	169c8 <flatcc_verify_table_as_nested_root@@Base+0xd4>
   16964:	ldr	r2, [r3]
   16968:	ldr	r5, [r3, r2]
   1696c:	add	r7, r3, r2
   16970:	mov	r2, r8
   16974:	add	r4, r7, #4
   16978:	mov	r0, r4
   1697c:	mov	r1, r5
   16980:	bl	16684 <flatcc_verify_buffer_header@@Base>
   16984:	subs	r2, r0, #0
   16988:	beq	169a4 <flatcc_verify_table_as_nested_root@@Base+0xb0>
   1698c:	mov	r2, r8
   16990:	mov	r1, r5
   16994:	mov	r0, r4
   16998:	add	sp, sp, #12
   1699c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   169a0:	b	16684 <flatcc_verify_buffer_header@@Base>
   169a4:	ldr	r3, [r6, #8]
   169a8:	mov	r1, r5
   169ac:	mov	r0, r4
   169b0:	str	r3, [sp, #48]	; 0x30
   169b4:	str	r9, [sp, #52]	; 0x34
   169b8:	ldr	r3, [r7, #4]
   169bc:	add	sp, sp, #12
   169c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   169c4:	b	161f8 <flatcc_emitter_copy_buffer@@Base+0x224>
   169c8:	add	sp, sp, #12
   169cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

000169d0 <flatcc_verify_union_field@@Base>:
   169d0:	push	{r4, r5, r6, r7, r8, lr}
   169d4:	mov	r6, r1
   169d8:	sub	r1, r1, #1
   169dc:	sub	sp, sp, #32
   169e0:	uxth	r1, r1
   169e4:	mov	r7, r3
   169e8:	mov	r4, r0
   169ec:	bl	160d8 <flatcc_emitter_copy_buffer@@Base+0x104>
   169f0:	uxth	r3, r0
   169f4:	cmp	r3, #0
   169f8:	bne	16a30 <flatcc_verify_union_field@@Base+0x60>
   169fc:	mov	r1, r6
   16a00:	mov	r0, r4
   16a04:	bl	160d8 <flatcc_emitter_copy_buffer@@Base+0x104>
   16a08:	uxth	r0, r0
   16a0c:	cmp	r0, #0
   16a10:	movne	r0, #23
   16a14:	bne	16a28 <flatcc_verify_union_field@@Base+0x58>
   16a18:	cmp	r2, #0
   16a1c:	movne	r0, #21
   16a20:	bne	16a28 <flatcc_verify_union_field@@Base+0x58>
   16a24:	mov	r0, #0
   16a28:	add	sp, sp, #32
   16a2c:	pop	{r4, r5, r6, r7, r8, pc}
   16a30:	ldrh	r3, [r4, #20]
   16a34:	uxth	r5, r0
   16a38:	add	r1, r5, #1
   16a3c:	cmp	r1, r3
   16a40:	movhi	r0, #13
   16a44:	bhi	16a28 <flatcc_verify_union_field@@Base+0x58>
   16a48:	ldr	r8, [r4]
   16a4c:	ldr	r0, [r4, #16]
   16a50:	add	r5, r5, r0
   16a54:	ldrb	r3, [r8, r5]
   16a58:	cmp	r3, #0
   16a5c:	bne	16a80 <flatcc_verify_union_field@@Base+0xb0>
   16a60:	mov	r1, r6
   16a64:	mov	r0, r4
   16a68:	bl	160d8 <flatcc_emitter_copy_buffer@@Base+0x104>
   16a6c:	uxth	r0, r0
   16a70:	cmp	r0, #0
   16a74:	movne	r0, #24
   16a78:	beq	16a24 <flatcc_verify_union_field@@Base+0x54>
   16a7c:	b	16a28 <flatcc_verify_union_field@@Base+0x58>
   16a80:	add	r3, sp, #4
   16a84:	mov	r1, r6
   16a88:	mov	r0, r4
   16a8c:	bl	16128 <flatcc_emitter_copy_buffer@@Base+0x154>
   16a90:	cmp	r0, #0
   16a94:	bne	16a28 <flatcc_verify_union_field@@Base+0x58>
   16a98:	ldr	r3, [sp, #4]
   16a9c:	cmp	r3, #0
   16aa0:	beq	16a24 <flatcc_verify_union_field@@Base+0x54>
   16aa4:	ldr	r2, [r4]
   16aa8:	add	r0, sp, #8
   16aac:	ldr	r1, [r4, #4]
   16ab0:	str	r3, [sp, #24]
   16ab4:	str	r2, [sp, #8]
   16ab8:	str	r1, [sp, #12]
   16abc:	ldr	r1, [r4, #8]
   16ac0:	str	r1, [sp, #16]
   16ac4:	ldr	r3, [r2, r3]
   16ac8:	str	r3, [sp, #28]
   16acc:	ldrb	r3, [r8, r5]
   16ad0:	strb	r3, [sp, #20]
   16ad4:	blx	r7
   16ad8:	b	16a28 <flatcc_verify_union_field@@Base+0x58>

00016adc <flatcc_verify_union_vector_field@@Base>:
   16adc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16ae0:	sub	r4, r1, #1
   16ae4:	sub	sp, sp, #60	; 0x3c
   16ae8:	uxth	r4, r4
   16aec:	mov	sl, r1
   16af0:	mov	r1, r4
   16af4:	mov	r8, r0
   16af8:	mov	r6, r2
   16afc:	mov	r9, r3
   16b00:	bl	160d8 <flatcc_emitter_copy_buffer@@Base+0x104>
   16b04:	uxth	r0, r0
   16b08:	cmp	r0, #0
   16b0c:	bne	16b3c <flatcc_verify_union_vector_field@@Base+0x60>
   16b10:	mov	r1, sl
   16b14:	mov	r0, r8
   16b18:	bl	160d8 <flatcc_emitter_copy_buffer@@Base+0x104>
   16b1c:	adds	r3, r2, #0
   16b20:	uxth	r0, r0
   16b24:	movne	r3, #1
   16b28:	cmp	r0, #0
   16b2c:	movne	r3, #0
   16b30:	cmp	r3, #0
   16b34:	movne	r3, #22
   16b38:	bne	16b9c <flatcc_verify_union_vector_field@@Base+0xc0>
   16b3c:	mov	r5, #1
   16b40:	mvn	r7, #0
   16b44:	mov	r3, r5
   16b48:	mov	r2, r6
   16b4c:	mov	r1, r4
   16b50:	mov	r0, r8
   16b54:	stm	sp, {r5, r7}
   16b58:	bl	163e8 <flatcc_verify_vector_field@@Base>
   16b5c:	cmp	r0, #0
   16b60:	beq	16b84 <flatcc_verify_union_vector_field@@Base+0xa8>
   16b64:	mov	r3, r5
   16b68:	mov	r2, r6
   16b6c:	stm	sp, {r5, r7}
   16b70:	mov	r1, r4
   16b74:	mov	r0, r8
   16b78:	bl	163e8 <flatcc_verify_vector_field@@Base>
   16b7c:	mov	r3, r0
   16b80:	b	16b9c <flatcc_verify_union_vector_field@@Base+0xc0>
   16b84:	mov	r1, r4
   16b88:	mov	r0, r8
   16b8c:	bl	160fc <flatcc_emitter_copy_buffer@@Base+0x128>
   16b90:	cmp	r0, #0
   16b94:	bne	16ba8 <flatcc_verify_union_vector_field@@Base+0xcc>
   16b98:	mov	r3, #0
   16b9c:	mov	r0, r3
   16ba0:	add	sp, sp, #60	; 0x3c
   16ba4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16ba8:	ldr	r3, [r0]
   16bac:	mov	r2, r6
   16bb0:	mov	r1, sl
   16bb4:	add	r5, r0, r3
   16bb8:	ldr	r7, [r0, r3]
   16bbc:	add	r3, sp, #28
   16bc0:	mov	r0, r8
   16bc4:	bl	16128 <flatcc_emitter_copy_buffer@@Base+0x154>
   16bc8:	subs	r3, r0, #0
   16bcc:	bne	16b9c <flatcc_verify_union_vector_field@@Base+0xc0>
   16bd0:	ldr	r4, [sp, #28]
   16bd4:	cmp	r4, #0
   16bd8:	beq	16b98 <flatcc_verify_union_vector_field@@Base+0xbc>
   16bdc:	ldm	r8, {r6, sl}
   16be0:	ldr	r8, [r8, #8]
   16be4:	ldr	fp, [r6, r4]
   16be8:	cmp	r8, #0
   16bec:	movle	r3, #3
   16bf0:	ble	16b9c <flatcc_verify_union_vector_field@@Base+0xc0>
   16bf4:	mvn	r3, #-1073741824	; 0xc0000000
   16bf8:	mov	r2, r4
   16bfc:	mov	r1, sl
   16c00:	mov	r0, r6
   16c04:	str	r3, [sp, #8]
   16c08:	mov	r3, #4
   16c0c:	str	r3, [sp]
   16c10:	str	r3, [sp, #4]
   16c14:	mov	r3, fp
   16c18:	bl	16188 <flatcc_emitter_copy_buffer@@Base+0x1b4>
   16c1c:	subs	r3, r0, #0
   16c20:	bne	16b9c <flatcc_verify_union_vector_field@@Base+0xc0>
   16c24:	add	r4, r4, fp
   16c28:	ldr	r2, [r6, r4]
   16c2c:	cmp	r7, r2
   16c30:	movne	r3, #34	; 0x22
   16c34:	bne	16b9c <flatcc_verify_union_vector_field@@Base+0xc0>
   16c38:	sub	r8, r8, #1
   16c3c:	add	r4, r4, #4
   16c40:	str	r6, [sp, #32]
   16c44:	add	r7, r5, r7
   16c48:	str	sl, [sp, #36]	; 0x24
   16c4c:	str	r8, [sp, #40]	; 0x28
   16c50:	cmp	r7, r5
   16c54:	beq	16b9c <flatcc_verify_union_vector_field@@Base+0xc0>
   16c58:	ldr	r1, [r6, r4]
   16c5c:	ldrb	r2, [r5, #4]
   16c60:	cmp	r1, #0
   16c64:	bne	16c78 <flatcc_verify_union_vector_field@@Base+0x19c>
   16c68:	cmp	r2, #0
   16c6c:	beq	16cb0 <flatcc_verify_union_vector_field@@Base+0x1d4>
   16c70:	mov	r3, #32
   16c74:	b	16b9c <flatcc_verify_union_vector_field@@Base+0xc0>
   16c78:	cmp	r2, #0
   16c7c:	str	r3, [sp, #20]
   16c80:	beq	16cbc <flatcc_verify_union_vector_field@@Base+0x1e0>
   16c84:	add	r0, sp, #32
   16c88:	strb	r2, [sp, #44]	; 0x2c
   16c8c:	str	r4, [sp, #48]	; 0x30
   16c90:	str	r1, [sp, #52]	; 0x34
   16c94:	blx	r9
   16c98:	cmp	r0, #0
   16c9c:	ldr	r3, [sp, #20]
   16ca0:	beq	16cb0 <flatcc_verify_union_vector_field@@Base+0x1d4>
   16ca4:	add	r0, sp, #32
   16ca8:	blx	r9
   16cac:	b	16b7c <flatcc_verify_union_vector_field@@Base+0xa0>
   16cb0:	add	r4, r4, #4
   16cb4:	add	r5, r5, #1
   16cb8:	b	16c50 <flatcc_verify_union_vector_field@@Base+0x174>
   16cbc:	mov	r3, #33	; 0x21
   16cc0:	b	16b9c <flatcc_verify_union_vector_field@@Base+0xc0>

00016cc4 <__libc_csu_init@@Base>:
   16cc4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16cc8:	mov	r7, r0
   16ccc:	ldr	r6, [pc, #72]	; 16d1c <__libc_csu_init@@Base+0x58>
   16cd0:	ldr	r5, [pc, #72]	; 16d20 <__libc_csu_init@@Base+0x5c>
   16cd4:	add	r6, pc, r6
   16cd8:	add	r5, pc, r5
   16cdc:	sub	r6, r6, r5
   16ce0:	mov	r8, r1
   16ce4:	mov	r9, r2
   16ce8:	bl	12268 <free@plt-0x20>
   16cec:	asrs	r6, r6, #2
   16cf0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   16cf4:	mov	r4, #0
   16cf8:	add	r4, r4, #1
   16cfc:	ldr	r3, [r5], #4
   16d00:	mov	r2, r9
   16d04:	mov	r1, r8
   16d08:	mov	r0, r7
   16d0c:	blx	r3
   16d10:	cmp	r6, r4
   16d14:	bne	16cf8 <__libc_csu_init@@Base+0x34>
   16d18:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16d1c:	andeq	r1, r1, r8, lsr r2
   16d20:	andeq	r1, r1, r0, lsr r2

00016d24 <__libc_csu_fini@@Base>:
   16d24:	bx	lr

Disassembly of section .fini:

00016d28 <.fini>:
   16d28:	push	{r3, lr}
   16d2c:	pop	{r3, pc}
