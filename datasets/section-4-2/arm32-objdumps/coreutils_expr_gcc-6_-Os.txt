
../repos/coreutils/src/expr:     file format elf32-littlearm


Disassembly of section .init:

0001115c <.init>:
   1115c:	push	{r3, lr}
   11160:	bl	11730 <__assert_fail@plt+0x218>
   11164:	pop	{r3, pc}

Disassembly of section .plt:

00011168 <pthread_mutex_unlock@plt-0x14>:
   11168:	push	{lr}		; (str lr, [sp, #-4]!)
   1116c:	ldr	lr, [pc, #4]	; 11178 <pthread_mutex_unlock@plt-0x4>
   11170:	add	lr, pc, lr
   11174:	ldr	pc, [lr, #8]!
   11178:	andeq	r1, r2, r8, lsl #29

0001117c <pthread_mutex_unlock@plt>:
   1117c:	add	ip, pc, #0, 12
   11180:	add	ip, ip, #135168	; 0x21000
   11184:	ldr	pc, [ip, #3720]!	; 0xe88

00011188 <calloc@plt>:
   11188:	add	ip, pc, #0, 12
   1118c:	add	ip, ip, #135168	; 0x21000
   11190:	ldr	pc, [ip, #3712]!	; 0xe80

00011194 <fputs_unlocked@plt>:
   11194:	add	ip, pc, #0, 12
   11198:	add	ip, ip, #135168	; 0x21000
   1119c:	ldr	pc, [ip, #3704]!	; 0xe78

000111a0 <wctype@plt>:
   111a0:	add	ip, pc, #0, 12
   111a4:	add	ip, ip, #135168	; 0x21000
   111a8:	ldr	pc, [ip, #3696]!	; 0xe70

000111ac <raise@plt>:
   111ac:	add	ip, pc, #0, 12
   111b0:	add	ip, ip, #135168	; 0x21000
   111b4:	ldr	pc, [ip, #3688]!	; 0xe68

000111b8 <wcrtomb@plt>:
   111b8:	add	ip, pc, #0, 12
   111bc:	add	ip, ip, #135168	; 0x21000
   111c0:	ldr	pc, [ip, #3680]!	; 0xe60

000111c4 <iswctype@plt>:
   111c4:	add	ip, pc, #0, 12
   111c8:	add	ip, ip, #135168	; 0x21000
   111cc:	ldr	pc, [ip, #3672]!	; 0xe58

000111d0 <strcmp@plt>:
   111d0:	add	ip, pc, #0, 12
   111d4:	add	ip, ip, #135168	; 0x21000
   111d8:	ldr	pc, [ip, #3664]!	; 0xe50

000111dc <__gmpz_tdiv_q@plt>:
   111dc:	add	ip, pc, #0, 12
   111e0:	add	ip, ip, #135168	; 0x21000
   111e4:	ldr	pc, [ip, #3656]!	; 0xe48

000111e8 <strcspn@plt>:
   111e8:	add	ip, pc, #0, 12
   111ec:	add	ip, ip, #135168	; 0x21000
   111f0:	ldr	pc, [ip, #3648]!	; 0xe40

000111f4 <pthread_mutex_destroy@plt>:
   111f4:	add	ip, pc, #0, 12
   111f8:	add	ip, ip, #135168	; 0x21000
   111fc:	ldr	pc, [ip, #3640]!	; 0xe38

00011200 <fflush@plt>:
   11200:	add	ip, pc, #0, 12
   11204:	add	ip, ip, #135168	; 0x21000
   11208:	ldr	pc, [ip, #3632]!	; 0xe30

0001120c <wcwidth@plt>:
   1120c:	add	ip, pc, #0, 12
   11210:	add	ip, ip, #135168	; 0x21000
   11214:	ldr	pc, [ip, #3624]!	; 0xe28

00011218 <memmove@plt>:
   11218:	add	ip, pc, #0, 12
   1121c:	add	ip, ip, #135168	; 0x21000
   11220:	ldr	pc, [ip, #3616]!	; 0xe20

00011224 <free@plt>:
   11224:	add	ip, pc, #0, 12
   11228:	add	ip, ip, #135168	; 0x21000
   1122c:	ldr	pc, [ip, #3608]!	; 0xe18

00011230 <pthread_mutex_lock@plt>:
   11230:	add	ip, pc, #0, 12
   11234:	add	ip, ip, #135168	; 0x21000
   11238:	ldr	pc, [ip, #3600]!	; 0xe10

0001123c <_exit@plt>:
   1123c:	add	ip, pc, #0, 12
   11240:	add	ip, ip, #135168	; 0x21000
   11244:	ldr	pc, [ip, #3592]!	; 0xe08

00011248 <memcpy@plt>:
   11248:	add	ip, pc, #0, 12
   1124c:	add	ip, ip, #135168	; 0x21000
   11250:	ldr	pc, [ip, #3584]!	; 0xe00

00011254 <__gmpz_sub@plt>:
   11254:	add	ip, pc, #0, 12
   11258:	add	ip, ip, #135168	; 0x21000
   1125c:	ldr	pc, [ip, #3576]!	; 0xdf8

00011260 <tolower@plt>:
   11260:	add	ip, pc, #0, 12
   11264:	add	ip, ip, #135168	; 0x21000
   11268:	ldr	pc, [ip, #3568]!	; 0xdf0

0001126c <pthread_mutex_init@plt>:
   1126c:	add	ip, pc, #0, 12
   11270:	add	ip, ip, #135168	; 0x21000
   11274:	ldr	pc, [ip, #3560]!	; 0xde8

00011278 <towlower@plt>:
   11278:	add	ip, pc, #0, 12
   1127c:	add	ip, ip, #135168	; 0x21000
   11280:	ldr	pc, [ip, #3552]!	; 0xde0

00011284 <mbsinit@plt>:
   11284:	add	ip, pc, #0, 12
   11288:	add	ip, ip, #135168	; 0x21000
   1128c:	ldr	pc, [ip, #3544]!	; 0xdd8

00011290 <memcmp@plt>:
   11290:	add	ip, pc, #0, 12
   11294:	add	ip, ip, #135168	; 0x21000
   11298:	ldr	pc, [ip, #3536]!	; 0xdd0

0001129c <fputc_unlocked@plt>:
   1129c:	add	ip, pc, #0, 12
   112a0:	add	ip, ip, #135168	; 0x21000
   112a4:	ldr	pc, [ip, #3528]!	; 0xdc8

000112a8 <dcgettext@plt>:
   112a8:	add	ip, pc, #0, 12
   112ac:	add	ip, ip, #135168	; 0x21000
   112b0:	ldr	pc, [ip, #3520]!	; 0xdc0

000112b4 <__gmpz_get_str@plt>:
   112b4:	add	ip, pc, #0, 12
   112b8:	add	ip, ip, #135168	; 0x21000
   112bc:	ldr	pc, [ip, #3512]!	; 0xdb8

000112c0 <realloc@plt>:
   112c0:	add	ip, pc, #0, 12
   112c4:	add	ip, ip, #135168	; 0x21000
   112c8:	ldr	pc, [ip, #3504]!	; 0xdb0

000112cc <__gmpz_mul@plt>:
   112cc:	add	ip, pc, #0, 12
   112d0:	add	ip, ip, #135168	; 0x21000
   112d4:	ldr	pc, [ip, #3496]!	; 0xda8

000112d8 <textdomain@plt>:
   112d8:	add	ip, pc, #0, 12
   112dc:	add	ip, ip, #135168	; 0x21000
   112e0:	ldr	pc, [ip, #3488]!	; 0xda0

000112e4 <iswcntrl@plt>:
   112e4:	add	ip, pc, #0, 12
   112e8:	add	ip, ip, #135168	; 0x21000
   112ec:	ldr	pc, [ip, #3480]!	; 0xd98

000112f0 <__gmpz_out_str@plt>:
   112f0:	add	ip, pc, #0, 12
   112f4:	add	ip, ip, #135168	; 0x21000
   112f8:	ldr	pc, [ip, #3472]!	; 0xd90

000112fc <iswprint@plt>:
   112fc:	add	ip, pc, #0, 12
   11300:	add	ip, ip, #135168	; 0x21000
   11304:	ldr	pc, [ip, #3464]!	; 0xd88

00011308 <lseek64@plt>:
   11308:	add	ip, pc, #0, 12
   1130c:	add	ip, ip, #135168	; 0x21000
   11310:	ldr	pc, [ip, #3456]!	; 0xd80

00011314 <__ctype_get_mb_cur_max@plt>:
   11314:	add	ip, pc, #0, 12
   11318:	add	ip, ip, #135168	; 0x21000
   1131c:	ldr	pc, [ip, #3448]!	; 0xd78

00011320 <__fpending@plt>:
   11320:	add	ip, pc, #0, 12
   11324:	add	ip, ip, #135168	; 0x21000
   11328:	ldr	pc, [ip, #3440]!	; 0xd70

0001132c <ferror_unlocked@plt>:
   1132c:	add	ip, pc, #0, 12
   11330:	add	ip, ip, #135168	; 0x21000
   11334:	ldr	pc, [ip, #3432]!	; 0xd68

00011338 <mbrtowc@plt>:
   11338:	add	ip, pc, #0, 12
   1133c:	add	ip, ip, #135168	; 0x21000
   11340:	ldr	pc, [ip, #3424]!	; 0xd60

00011344 <error@plt>:
   11344:	add	ip, pc, #0, 12
   11348:	add	ip, ip, #135168	; 0x21000
   1134c:	ldr	pc, [ip, #3416]!	; 0xd58

00011350 <strcoll@plt>:
   11350:	add	ip, pc, #0, 12
   11354:	add	ip, ip, #135168	; 0x21000
   11358:	ldr	pc, [ip, #3408]!	; 0xd50

0001135c <puts@plt>:
   1135c:	add	ip, pc, #0, 12
   11360:	add	ip, ip, #135168	; 0x21000
   11364:	ldr	pc, [ip, #3400]!	; 0xd48

00011368 <malloc@plt>:
   11368:	add	ip, pc, #0, 12
   1136c:	add	ip, ip, #135168	; 0x21000
   11370:	ldr	pc, [ip, #3392]!	; 0xd40

00011374 <__libc_start_main@plt>:
   11374:	add	ip, pc, #0, 12
   11378:	add	ip, ip, #135168	; 0x21000
   1137c:	ldr	pc, [ip, #3384]!	; 0xd38

00011380 <__freading@plt>:
   11380:	add	ip, pc, #0, 12
   11384:	add	ip, ip, #135168	; 0x21000
   11388:	ldr	pc, [ip, #3376]!	; 0xd30

0001138c <__gmon_start__@plt>:
   1138c:	add	ip, pc, #0, 12
   11390:	add	ip, ip, #135168	; 0x21000
   11394:	ldr	pc, [ip, #3368]!	; 0xd28

00011398 <mempcpy@plt>:
   11398:	add	ip, pc, #0, 12
   1139c:	add	ip, ip, #135168	; 0x21000
   113a0:	ldr	pc, [ip, #3360]!	; 0xd20

000113a4 <getopt_long@plt>:
   113a4:	add	ip, pc, #0, 12
   113a8:	add	ip, ip, #135168	; 0x21000
   113ac:	ldr	pc, [ip, #3352]!	; 0xd18

000113b0 <__ctype_b_loc@plt>:
   113b0:	add	ip, pc, #0, 12
   113b4:	add	ip, ip, #135168	; 0x21000
   113b8:	ldr	pc, [ip, #3344]!	; 0xd10

000113bc <exit@plt>:
   113bc:	add	ip, pc, #0, 12
   113c0:	add	ip, ip, #135168	; 0x21000
   113c4:	ldr	pc, [ip, #3336]!	; 0xd08

000113c8 <strlen@plt>:
   113c8:	add	ip, pc, #0, 12
   113cc:	add	ip, ip, #135168	; 0x21000
   113d0:	ldr	pc, [ip, #3328]!	; 0xd00

000113d4 <strchr@plt>:
   113d4:	add	ip, pc, #0, 12
   113d8:	add	ip, ip, #135168	; 0x21000
   113dc:	ldr	pc, [ip, #3320]!	; 0xcf8

000113e0 <__gmpz_tdiv_r@plt>:
   113e0:	add	ip, pc, #0, 12
   113e4:	add	ip, ip, #135168	; 0x21000
   113e8:	ldr	pc, [ip, #3312]!	; 0xcf0

000113ec <__gmpz_clear@plt>:
   113ec:	add	ip, pc, #0, 12
   113f0:	add	ip, ip, #135168	; 0x21000
   113f4:	ldr	pc, [ip, #3304]!	; 0xce8

000113f8 <__errno_location@plt>:
   113f8:	add	ip, pc, #0, 12
   113fc:	add	ip, ip, #135168	; 0x21000
   11400:	ldr	pc, [ip, #3296]!	; 0xce0

00011404 <iswalnum@plt>:
   11404:	add	ip, pc, #0, 12
   11408:	add	ip, ip, #135168	; 0x21000
   1140c:	ldr	pc, [ip, #3288]!	; 0xcd8

00011410 <__cxa_atexit@plt>:
   11410:	add	ip, pc, #0, 12
   11414:	add	ip, ip, #135168	; 0x21000
   11418:	ldr	pc, [ip, #3280]!	; 0xcd0

0001141c <memset@plt>:
   1141c:	add	ip, pc, #0, 12
   11420:	add	ip, ip, #135168	; 0x21000
   11424:	ldr	pc, [ip, #3272]!	; 0xcc8

00011428 <btowc@plt>:
   11428:	add	ip, pc, #0, 12
   1142c:	add	ip, ip, #135168	; 0x21000
   11430:	ldr	pc, [ip, #3264]!	; 0xcc0

00011434 <__printf_chk@plt>:
   11434:	add	ip, pc, #0, 12
   11438:	add	ip, ip, #135168	; 0x21000
   1143c:	ldr	pc, [ip, #3256]!	; 0xcb8

00011440 <fileno@plt>:
   11440:	add	ip, pc, #0, 12
   11444:	add	ip, ip, #135168	; 0x21000
   11448:	ldr	pc, [ip, #3248]!	; 0xcb0

0001144c <__fprintf_chk@plt>:
   1144c:	add	ip, pc, #0, 12
   11450:	add	ip, ip, #135168	; 0x21000
   11454:	ldr	pc, [ip, #3240]!	; 0xca8

00011458 <memchr@plt>:
   11458:	add	ip, pc, #0, 12
   1145c:	add	ip, ip, #135168	; 0x21000
   11460:	ldr	pc, [ip, #3232]!	; 0xca0

00011464 <fclose@plt>:
   11464:	add	ip, pc, #0, 12
   11468:	add	ip, ip, #135168	; 0x21000
   1146c:	ldr	pc, [ip, #3224]!	; 0xc98

00011470 <fseeko64@plt>:
   11470:	add	ip, pc, #0, 12
   11474:	add	ip, ip, #135168	; 0x21000
   11478:	ldr	pc, [ip, #3216]!	; 0xc90

0001147c <__gmpz_init_set_ui@plt>:
   1147c:	add	ip, pc, #0, 12
   11480:	add	ip, ip, #135168	; 0x21000
   11484:	ldr	pc, [ip, #3208]!	; 0xc88

00011488 <setlocale@plt>:
   11488:	add	ip, pc, #0, 12
   1148c:	add	ip, ip, #135168	; 0x21000
   11490:	ldr	pc, [ip, #3200]!	; 0xc80

00011494 <toupper@plt>:
   11494:	add	ip, pc, #0, 12
   11498:	add	ip, ip, #135168	; 0x21000
   1149c:	ldr	pc, [ip, #3192]!	; 0xc78

000114a0 <strrchr@plt>:
   114a0:	add	ip, pc, #0, 12
   114a4:	add	ip, ip, #135168	; 0x21000
   114a8:	ldr	pc, [ip, #3184]!	; 0xc70

000114ac <nl_langinfo@plt>:
   114ac:	add	ip, pc, #0, 12
   114b0:	add	ip, ip, #135168	; 0x21000
   114b4:	ldr	pc, [ip, #3176]!	; 0xc68

000114b8 <__gmpz_add@plt>:
   114b8:	add	ip, pc, #0, 12
   114bc:	add	ip, ip, #135168	; 0x21000
   114c0:	ldr	pc, [ip, #3168]!	; 0xc60

000114c4 <__gmpz_init_set_str@plt>:
   114c4:	add	ip, pc, #0, 12
   114c8:	add	ip, ip, #135168	; 0x21000
   114cc:	ldr	pc, [ip, #3160]!	; 0xc58

000114d0 <bindtextdomain@plt>:
   114d0:	add	ip, pc, #0, 12
   114d4:	add	ip, ip, #135168	; 0x21000
   114d8:	ldr	pc, [ip, #3152]!	; 0xc50

000114dc <towupper@plt>:
   114dc:	add	ip, pc, #0, 12
   114e0:	add	ip, ip, #135168	; 0x21000
   114e4:	ldr	pc, [ip, #3144]!	; 0xc48

000114e8 <fputs@plt>:
   114e8:	add	ip, pc, #0, 12
   114ec:	add	ip, ip, #135168	; 0x21000
   114f0:	ldr	pc, [ip, #3136]!	; 0xc40

000114f4 <strncmp@plt>:
   114f4:	add	ip, pc, #0, 12
   114f8:	add	ip, ip, #135168	; 0x21000
   114fc:	ldr	pc, [ip, #3128]!	; 0xc38

00011500 <abort@plt>:
   11500:	add	ip, pc, #0, 12
   11504:	add	ip, ip, #135168	; 0x21000
   11508:	ldr	pc, [ip, #3120]!	; 0xc30

0001150c <putchar_unlocked@plt>:
   1150c:	add	ip, pc, #0, 12
   11510:	add	ip, ip, #135168	; 0x21000
   11514:	ldr	pc, [ip, #3112]!	; 0xc28

00011518 <__assert_fail@plt>:
   11518:	add	ip, pc, #0, 12
   1151c:	add	ip, ip, #135168	; 0x21000
   11520:	ldr	pc, [ip, #3104]!	; 0xc20

Disassembly of section .text:

00011524 <.text>:
   11524:	push	{r4, r5, lr}
   11528:	mov	r5, r0
   1152c:	sub	sp, sp, #28
   11530:	ldr	r0, [r1]
   11534:	mov	r4, r1
   11538:	bl	1378c <__assert_fail@plt+0x2274>
   1153c:	ldr	r1, [pc, #364]	; 116b0 <__assert_fail@plt+0x198>
   11540:	mov	r0, #6
   11544:	bl	11488 <setlocale@plt>
   11548:	ldr	r1, [pc, #356]	; 116b4 <__assert_fail@plt+0x19c>
   1154c:	ldr	r0, [pc, #356]	; 116b8 <__assert_fail@plt+0x1a0>
   11550:	bl	114d0 <bindtextdomain@plt>
   11554:	ldr	r0, [pc, #348]	; 116b8 <__assert_fail@plt+0x1a0>
   11558:	bl	112d8 <textdomain@plt>
   1155c:	ldr	r3, [pc, #344]	; 116bc <__assert_fail@plt+0x1a4>
   11560:	mov	r2, #3
   11564:	ldr	r0, [pc, #340]	; 116c0 <__assert_fail@plt+0x1a8>
   11568:	str	r2, [r3]
   1156c:	bl	2152c <__assert_fail@plt+0x10014>
   11570:	mov	r3, #0
   11574:	str	r3, [sp, #20]
   11578:	ldr	r3, [pc, #324]	; 116c4 <__assert_fail@plt+0x1ac>
   1157c:	ldr	r2, [pc, #324]	; 116c8 <__assert_fail@plt+0x1b0>
   11580:	str	r3, [sp, #16]
   11584:	ldr	r3, [pc, #320]	; 116cc <__assert_fail@plt+0x1b4>
   11588:	mov	r1, r4
   1158c:	str	r3, [sp, #12]
   11590:	ldr	r3, [pc, #312]	; 116d0 <__assert_fail@plt+0x1b8>
   11594:	mov	r0, r5
   11598:	str	r3, [sp, #8]
   1159c:	ldr	r3, [pc, #304]	; 116d4 <__assert_fail@plt+0x1bc>
   115a0:	str	r3, [sp, #4]
   115a4:	ldr	r3, [pc, #300]	; 116d8 <__assert_fail@plt+0x1c0>
   115a8:	str	r3, [sp]
   115ac:	ldr	r3, [pc, #296]	; 116dc <__assert_fail@plt+0x1c4>
   115b0:	bl	1313c <__assert_fail@plt+0x1c24>
   115b4:	cmp	r5, #1
   115b8:	bls	115dc <__assert_fail@plt+0xc4>
   115bc:	ldr	r1, [pc, #284]	; 116e0 <__assert_fail@plt+0x1c8>
   115c0:	ldr	r0, [r4, #4]
   115c4:	bl	111d0 <strcmp@plt>
   115c8:	cmp	r0, #0
   115cc:	bne	11604 <__assert_fail@plt+0xec>
   115d0:	cmp	r5, #2
   115d4:	add	r4, r4, #4
   115d8:	bne	11604 <__assert_fail@plt+0xec>
   115dc:	mov	r2, #5
   115e0:	ldr	r1, [pc, #252]	; 116e4 <__assert_fail@plt+0x1cc>
   115e4:	mov	r0, #0
   115e8:	bl	112a8 <dcgettext@plt>
   115ec:	mov	r1, #0
   115f0:	mov	r2, r0
   115f4:	mov	r0, r1
   115f8:	bl	11344 <error@plt>
   115fc:	mov	r0, #2
   11600:	bl	11db0 <__assert_fail@plt+0x898>
   11604:	ldr	r5, [pc, #220]	; 116e8 <__assert_fail@plt+0x1d0>
   11608:	add	r4, r4, #4
   1160c:	mov	r0, #1
   11610:	str	r4, [r5]
   11614:	bl	12f3c <__assert_fail@plt+0x1a24>
   11618:	ldr	r5, [r5]
   1161c:	ldr	r3, [r5]
   11620:	cmp	r3, #0
   11624:	mov	r4, r0
   11628:	beq	11664 <__assert_fail@plt+0x14c>
   1162c:	mov	r2, #5
   11630:	ldr	r1, [pc, #180]	; 116ec <__assert_fail@plt+0x1d4>
   11634:	mov	r0, #0
   11638:	bl	112a8 <dcgettext@plt>
   1163c:	ldr	r2, [r5]
   11640:	mov	r1, #8
   11644:	mov	r4, r0
   11648:	mov	r0, #0
   1164c:	bl	14b6c <__assert_fail@plt+0x3654>
   11650:	mov	r2, r4
   11654:	mov	r1, #0
   11658:	mov	r3, r0
   1165c:	mov	r0, #2
   11660:	bl	11344 <error@plt>
   11664:	ldr	r3, [r0]
   11668:	cmp	r3, #0
   1166c:	beq	1167c <__assert_fail@plt+0x164>
   11670:	cmp	r3, #1
   11674:	beq	116a4 <__assert_fail@plt+0x18c>
   11678:	bl	11500 <abort@plt>
   1167c:	ldr	r3, [pc, #108]	; 116f0 <__assert_fail@plt+0x1d8>
   11680:	add	r2, r0, #4
   11684:	mov	r1, #10
   11688:	ldr	r0, [r3]
   1168c:	bl	112f0 <__gmpz_out_str@plt>
   11690:	mov	r0, #10
   11694:	bl	1150c <putchar_unlocked@plt>
   11698:	mov	r0, r4
   1169c:	bl	1191c <__assert_fail@plt+0x404>
   116a0:	bl	113bc <exit@plt>
   116a4:	ldr	r0, [r0, #4]
   116a8:	bl	1135c <puts@plt>
   116ac:	b	11698 <__assert_fail@plt+0x180>
   116b0:	andeq	r1, r2, sl, asr #29
   116b4:			; <UNDEFINED> instruction: 0x00021fbd
   116b8:	andeq	r1, r2, r8, lsr #28
   116bc:	andeq	r3, r3, r0, asr r1
   116c0:	andeq	r3, r1, r4
   116c4:	ldrdeq	r1, [r2], -r5
   116c8:	andeq	r1, r2, r0, lsl r6
   116cc:	andeq	r1, r2, r1, ror #31
   116d0:	strdeq	r1, [r2], -r0
   116d4:			; <UNDEFINED> instruction: 0x00011db0
   116d8:	strdeq	r1, [r2], -ip
   116dc:	andeq	r1, r2, r4, lsr #28
   116e0:	andeq	r2, r2, fp
   116e4:	andeq	r2, r2, lr
   116e8:			; <UNDEFINED> instruction: 0x000331b8
   116ec:	andeq	r2, r2, lr, lsl r0
   116f0:	andeq	r3, r3, ip, lsr #3
   116f4:	mov	fp, #0
   116f8:	mov	lr, #0
   116fc:	pop	{r1}		; (ldr r1, [sp], #4)
   11700:	mov	r2, sp
   11704:	push	{r2}		; (str r2, [sp, #-4]!)
   11708:	push	{r0}		; (str r0, [sp, #-4]!)
   1170c:	ldr	ip, [pc, #16]	; 11724 <__assert_fail@plt+0x20c>
   11710:	push	{ip}		; (str ip, [sp, #-4]!)
   11714:	ldr	r0, [pc, #12]	; 11728 <__assert_fail@plt+0x210>
   11718:	ldr	r3, [pc, #12]	; 1172c <__assert_fail@plt+0x214>
   1171c:	bl	11374 <__libc_start_main@plt>
   11720:	bl	11500 <abort@plt>
   11724:	andeq	r1, r2, r8, lsr #10
   11728:	andeq	r1, r1, r4, lsr #10
   1172c:	andeq	r1, r2, r8, asr #9
   11730:	ldr	r3, [pc, #20]	; 1174c <__assert_fail@plt+0x234>
   11734:	ldr	r2, [pc, #20]	; 11750 <__assert_fail@plt+0x238>
   11738:	add	r3, pc, r3
   1173c:	ldr	r2, [r3, r2]
   11740:	cmp	r2, #0
   11744:	bxeq	lr
   11748:	b	1138c <__gmon_start__@plt>
   1174c:	andeq	r1, r2, r0, asr #17
   11750:	andeq	r0, r0, r4, asr #2
   11754:	ldr	r3, [pc, #28]	; 11778 <__assert_fail@plt+0x260>
   11758:	ldr	r0, [pc, #28]	; 1177c <__assert_fail@plt+0x264>
   1175c:	sub	r3, r3, r0
   11760:	cmp	r3, #6
   11764:	bxls	lr
   11768:	ldr	r3, [pc, #16]	; 11780 <__assert_fail@plt+0x268>
   1176c:	cmp	r3, #0
   11770:	bxeq	lr
   11774:	bx	r3
   11778:	muleq	r3, r7, r1
   1177c:	muleq	r3, r4, r1
   11780:	andeq	r0, r0, r0
   11784:	ldr	r1, [pc, #36]	; 117b0 <__assert_fail@plt+0x298>
   11788:	ldr	r0, [pc, #36]	; 117b4 <__assert_fail@plt+0x29c>
   1178c:	sub	r1, r1, r0
   11790:	asr	r1, r1, #2
   11794:	add	r1, r1, r1, lsr #31
   11798:	asrs	r1, r1, #1
   1179c:	bxeq	lr
   117a0:	ldr	r3, [pc, #16]	; 117b8 <__assert_fail@plt+0x2a0>
   117a4:	cmp	r3, #0
   117a8:	bxeq	lr
   117ac:	bx	r3
   117b0:	muleq	r3, r4, r1
   117b4:	muleq	r3, r4, r1
   117b8:	andeq	r0, r0, r0
   117bc:	push	{r4, lr}
   117c0:	ldr	r4, [pc, #24]	; 117e0 <__assert_fail@plt+0x2c8>
   117c4:	ldrb	r3, [r4]
   117c8:	cmp	r3, #0
   117cc:	popne	{r4, pc}
   117d0:	bl	11754 <__assert_fail@plt+0x23c>
   117d4:	mov	r3, #1
   117d8:	strb	r3, [r4]
   117dc:	pop	{r4, pc}
   117e0:			; <UNDEFINED> instruction: 0x000331b4
   117e4:	ldr	r0, [pc, #40]	; 11814 <__assert_fail@plt+0x2fc>
   117e8:	ldr	r3, [r0]
   117ec:	cmp	r3, #0
   117f0:	bne	117f8 <__assert_fail@plt+0x2e0>
   117f4:	b	11784 <__assert_fail@plt+0x26c>
   117f8:	ldr	r3, [pc, #24]	; 11818 <__assert_fail@plt+0x300>
   117fc:	cmp	r3, #0
   11800:	beq	117f4 <__assert_fail@plt+0x2dc>
   11804:	push	{r4, lr}
   11808:	blx	r3
   1180c:	pop	{r4, lr}
   11810:	b	11784 <__assert_fail@plt+0x26c>
   11814:	andeq	r2, r3, ip, lsl #30
   11818:	andeq	r0, r0, r0
   1181c:	ldrb	r3, [r0]
   11820:	cmp	r3, #45	; 0x2d
   11824:	addeq	r0, r0, #1
   11828:	ldrb	r3, [r0]
   1182c:	sub	r3, r3, #48	; 0x30
   11830:	cmp	r3, #9
   11834:	bhi	1184c <__assert_fail@plt+0x334>
   11838:	ldrb	r3, [r0, #1]!
   1183c:	cmp	r3, #0
   11840:	bne	11828 <__assert_fail@plt+0x310>
   11844:	mov	r0, #1
   11848:	bx	lr
   1184c:	mov	r0, #0
   11850:	bx	lr
   11854:	push	{r4, r5, r6, lr}
   11858:	mov	r1, r0
   1185c:	ldr	r5, [pc, #36]	; 11888 <__assert_fail@plt+0x370>
   11860:	ldr	r4, [r5]
   11864:	ldr	r0, [r4]
   11868:	cmp	r0, #0
   1186c:	popeq	{r4, r5, r6, pc}
   11870:	bl	111d0 <strcmp@plt>
   11874:	clz	r0, r0
   11878:	lsr	r0, r0, #5
   1187c:	add	r4, r4, r0, lsl #2
   11880:	str	r4, [r5]
   11884:	pop	{r4, r5, r6, pc}
   11888:			; <UNDEFINED> instruction: 0x000331b8
   1188c:	push	{r4, r5, r6, lr}
   11890:	mov	r5, r0
   11894:	mov	r0, #16
   11898:	bl	206a0 <__assert_fail@plt+0xf188>
   1189c:	mov	r3, #1
   118a0:	mov	r4, r0
   118a4:	str	r3, [r0]
   118a8:	mov	r0, r5
   118ac:	bl	20b18 <__assert_fail@plt+0xf600>
   118b0:	str	r0, [r4, #4]
   118b4:	mov	r0, r4
   118b8:	pop	{r4, r5, r6, pc}
   118bc:	ldr	r3, [r0]
   118c0:	push	{r4, lr}
   118c4:	cmp	r3, #1
   118c8:	mov	r4, r0
   118cc:	bne	118e4 <__assert_fail@plt+0x3cc>
   118d0:	ldr	r0, [r0, #4]
   118d4:	bl	130e8 <__assert_fail@plt+0x1bd0>
   118d8:	mov	r0, r4
   118dc:	pop	{r4, lr}
   118e0:	b	130e8 <__assert_fail@plt+0x1bd0>
   118e4:	add	r0, r0, #4
   118e8:	bl	113ec <__gmpz_clear@plt>
   118ec:	b	118d8 <__assert_fail@plt+0x3c0>
   118f0:	push	{r4, r5, r6, lr}
   118f4:	mov	r5, r0
   118f8:	mov	r0, #16
   118fc:	bl	206a0 <__assert_fail@plt+0xf188>
   11900:	mov	r3, #0
   11904:	mov	r1, r5
   11908:	mov	r4, r0
   1190c:	str	r3, [r0], #4
   11910:	bl	1147c <__gmpz_init_set_ui@plt>
   11914:	mov	r0, r4
   11918:	pop	{r4, r5, r6, pc}
   1191c:	ldr	r3, [r0]
   11920:	cmp	r3, #0
   11924:	beq	11938 <__assert_fail@plt+0x420>
   11928:	cmp	r3, #1
   1192c:	beq	11948 <__assert_fail@plt+0x430>
   11930:	push	{r4, lr}
   11934:	bl	11500 <abort@plt>
   11938:	ldr	r0, [r0, #8]
   1193c:	clz	r0, r0
   11940:	lsr	r0, r0, #5
   11944:	bx	lr
   11948:	ldr	r2, [r0, #4]
   1194c:	ldrb	r1, [r2]
   11950:	cmp	r1, #0
   11954:	beq	1197c <__assert_fail@plt+0x464>
   11958:	cmp	r1, #45	; 0x2d
   1195c:	movne	r3, r2
   11960:	addeq	r3, r2, #1
   11964:	ldrb	r2, [r3]
   11968:	cmp	r2, #48	; 0x30
   1196c:	bne	11984 <__assert_fail@plt+0x46c>
   11970:	ldrb	r2, [r3, #1]!
   11974:	cmp	r2, #0
   11978:	bne	11964 <__assert_fail@plt+0x44c>
   1197c:	mov	r0, #1
   11980:	b	11944 <__assert_fail@plt+0x42c>
   11984:	mov	r0, #0
   11988:	b	11944 <__assert_fail@plt+0x42c>
   1198c:	ldr	r3, [r0]
   11990:	push	{r4, r5, r6, r7, r8, lr}
   11994:	cmp	r3, #0
   11998:	beq	11a00 <__assert_fail@plt+0x4e8>
   1199c:	cmp	r3, #1
   119a0:	mov	r4, r0
   119a4:	bne	119fc <__assert_fail@plt+0x4e4>
   119a8:	ldr	r5, [r0, #4]
   119ac:	mov	r0, r5
   119b0:	bl	1181c <__assert_fail@plt+0x304>
   119b4:	subs	r6, r0, #0
   119b8:	beq	119f4 <__assert_fail@plt+0x4dc>
   119bc:	mov	r2, #10
   119c0:	mov	r1, r5
   119c4:	add	r0, r4, #4
   119c8:	bl	114c4 <__gmpz_init_set_str@plt>
   119cc:	subs	r7, r0, #0
   119d0:	beq	119e8 <__assert_fail@plt+0x4d0>
   119d4:	mov	r3, r5
   119d8:	ldr	r2, [pc, #40]	; 11a08 <__assert_fail@plt+0x4f0>
   119dc:	mov	r1, #34	; 0x22
   119e0:	mov	r0, #3
   119e4:	bl	11344 <error@plt>
   119e8:	mov	r0, r5
   119ec:	bl	130e8 <__assert_fail@plt+0x1bd0>
   119f0:	str	r7, [r4]
   119f4:	mov	r0, r6
   119f8:	pop	{r4, r5, r6, r7, r8, pc}
   119fc:	bl	11500 <abort@plt>
   11a00:	mov	r6, #1
   11a04:	b	119f4 <__assert_fail@plt+0x4dc>
   11a08:	strheq	r2, [r2], -r2	; <UNPREDICTABLE>
   11a0c:	push	{r4, r5, r6, lr}
   11a10:	mov	r4, r0
   11a14:	ldr	r0, [r0]
   11a18:	cmp	r0, #0
   11a1c:	beq	11a2c <__assert_fail@plt+0x514>
   11a20:	cmp	r0, #1
   11a24:	popeq	{r4, r5, r6, pc}
   11a28:	bl	11500 <abort@plt>
   11a2c:	add	r5, r4, #4
   11a30:	mov	r2, r5
   11a34:	mov	r1, #10
   11a38:	bl	112b4 <__gmpz_get_str@plt>
   11a3c:	mov	r6, r0
   11a40:	mov	r0, r5
   11a44:	bl	113ec <__gmpz_clear@plt>
   11a48:	mov	r3, #1
   11a4c:	str	r6, [r4, #4]
   11a50:	str	r3, [r4]
   11a54:	pop	{r4, r5, r6, pc}
   11a58:	push	{r4, r5, r6, r7, r8, r9, lr}
   11a5c:	mov	r6, r1
   11a60:	sub	sp, sp, #372	; 0x174
   11a64:	mov	r5, r0
   11a68:	bl	11a0c <__assert_fail@plt+0x4f4>
   11a6c:	mov	r0, r6
   11a70:	bl	11a0c <__assert_fail@plt+0x4f4>
   11a74:	add	r3, sp, #112	; 0x70
   11a78:	ldr	r6, [r6, #4]
   11a7c:	str	r3, [sp, #40]	; 0x28
   11a80:	ldr	r3, [pc, #764]	; 11d84 <__assert_fail@plt+0x86c>
   11a84:	ldr	r2, [pc, #764]	; 11d88 <__assert_fail@plt+0x870>
   11a88:	mov	r4, #0
   11a8c:	mov	r0, r6
   11a90:	str	r2, [r3]
   11a94:	str	r4, [sp, #12]
   11a98:	str	r4, [sp, #16]
   11a9c:	str	r4, [sp, #20]
   11aa0:	str	r4, [sp, #24]
   11aa4:	str	r4, [sp, #28]
   11aa8:	str	r4, [sp, #44]	; 0x2c
   11aac:	bl	113c8 <strlen@plt>
   11ab0:	add	r2, sp, #24
   11ab4:	mov	r1, r0
   11ab8:	mov	r0, r6
   11abc:	bl	1f5b8 <__assert_fail@plt+0xe0a0>
   11ac0:	subs	r7, r0, #0
   11ac4:	beq	11adc <__assert_fail@plt+0x5c4>
   11ac8:	mov	r3, r7
   11acc:	ldr	r2, [pc, #696]	; 11d8c <__assert_fail@plt+0x874>
   11ad0:	mov	r1, r4
   11ad4:	mov	r0, #2
   11ad8:	bl	11344 <error@plt>
   11adc:	ldrb	r3, [sp, #52]	; 0x34
   11ae0:	ldr	r4, [r5, #4]
   11ae4:	bic	r3, r3, #128	; 0x80
   11ae8:	mov	r0, r4
   11aec:	strb	r3, [sp, #52]	; 0x34
   11af0:	bl	113c8 <strlen@plt>
   11af4:	add	r3, sp, #12
   11af8:	str	r3, [sp]
   11afc:	mov	r1, r4
   11b00:	mov	r3, r7
   11b04:	mov	r2, r0
   11b08:	add	r0, sp, #24
   11b0c:	bl	1fdd4 <__assert_fail@plt+0xe8bc>
   11b10:	subs	r6, r0, #0
   11b14:	blt	11d0c <__assert_fail@plt+0x7f4>
   11b18:	ldr	r4, [sp, #48]	; 0x30
   11b1c:	cmp	r4, #0
   11b20:	beq	11b94 <__assert_fail@plt+0x67c>
   11b24:	ldr	r3, [sp, #20]
   11b28:	ldr	r3, [r3, #4]
   11b2c:	cmp	r3, #0
   11b30:	bge	11b78 <__assert_fail@plt+0x660>
   11b34:	ldr	r0, [pc, #596]	; 11d90 <__assert_fail@plt+0x878>
   11b38:	bl	1188c <__assert_fail@plt+0x374>
   11b3c:	ldr	r3, [sp, #12]
   11b40:	mov	r4, r0
   11b44:	cmp	r3, #0
   11b48:	beq	11b5c <__assert_fail@plt+0x644>
   11b4c:	ldr	r0, [sp, #16]
   11b50:	bl	130e8 <__assert_fail@plt+0x1bd0>
   11b54:	ldr	r0, [sp, #20]
   11b58:	bl	130e8 <__assert_fail@plt+0x1bd0>
   11b5c:	mov	r3, #0
   11b60:	add	r0, sp, #24
   11b64:	str	r3, [sp, #40]	; 0x28
   11b68:	bl	1fc6c <__assert_fail@plt+0xe754>
   11b6c:	mov	r0, r4
   11b70:	add	sp, sp, #372	; 0x174
   11b74:	pop	{r4, r5, r6, r7, r8, r9, pc}
   11b78:	ldr	r2, [r5, #4]
   11b7c:	strb	r7, [r2, r3]
   11b80:	ldr	r3, [sp, #16]
   11b84:	ldr	r0, [r5, #4]
   11b88:	ldr	r3, [r3, #4]
   11b8c:	add	r0, r0, r3
   11b90:	b	11b38 <__assert_fail@plt+0x620>
   11b94:	bl	11314 <__ctype_get_mb_cur_max@plt>
   11b98:	cmp	r0, #1
   11b9c:	beq	11d04 <__assert_fail@plt+0x7ec>
   11ba0:	ldr	r8, [pc, #492]	; 11d94 <__assert_fail@plt+0x87c>
   11ba4:	ldr	r7, [r5, #4]
   11ba8:	mov	r5, #1
   11bac:	str	r7, [sp, #72]	; 0x48
   11bb0:	strb	r4, [sp, #56]	; 0x38
   11bb4:	str	r4, [sp, #60]	; 0x3c
   11bb8:	str	r4, [sp, #64]	; 0x40
   11bbc:	strb	r4, [sp, #68]	; 0x44
   11bc0:	ldrb	r3, [sp, #56]	; 0x38
   11bc4:	ldr	r9, [sp, #72]	; 0x48
   11bc8:	cmp	r3, #0
   11bcc:	bne	11c4c <__assert_fail@plt+0x734>
   11bd0:	ldrb	r3, [r9]
   11bd4:	lsr	r2, r3, #5
   11bd8:	and	r3, r3, #31
   11bdc:	ldr	r2, [r8, r2, lsl #2]
   11be0:	lsr	r3, r2, r3
   11be4:	tst	r3, #1
   11be8:	beq	11c24 <__assert_fail@plt+0x70c>
   11bec:	str	r5, [sp, #76]	; 0x4c
   11bf0:	ldrb	r3, [r9]
   11bf4:	strb	r5, [sp, #80]	; 0x50
   11bf8:	str	r3, [sp, #84]	; 0x54
   11bfc:	ldrb	r3, [sp, #80]	; 0x50
   11c00:	strb	r5, [sp, #68]	; 0x44
   11c04:	cmp	r3, #0
   11c08:	beq	11d58 <__assert_fail@plt+0x840>
   11c0c:	ldr	r3, [sp, #84]	; 0x54
   11c10:	cmp	r3, #0
   11c14:	bne	11d58 <__assert_fail@plt+0x840>
   11c18:	mov	r0, r4
   11c1c:	bl	118f0 <__assert_fail@plt+0x3d8>
   11c20:	b	11b3c <__assert_fail@plt+0x624>
   11c24:	add	r0, sp, #60	; 0x3c
   11c28:	bl	11284 <mbsinit@plt>
   11c2c:	cmp	r0, #0
   11c30:	bne	11c48 <__assert_fail@plt+0x730>
   11c34:	ldr	r3, [pc, #348]	; 11d98 <__assert_fail@plt+0x880>
   11c38:	ldr	r1, [pc, #348]	; 11d9c <__assert_fail@plt+0x884>
   11c3c:	ldr	r0, [pc, #348]	; 11da0 <__assert_fail@plt+0x888>
   11c40:	mov	r2, #143	; 0x8f
   11c44:	bl	11518 <__assert_fail@plt>
   11c48:	strb	r5, [sp, #56]	; 0x38
   11c4c:	bl	11314 <__ctype_get_mb_cur_max@plt>
   11c50:	mov	r1, r0
   11c54:	mov	r0, r9
   11c58:	bl	1fedc <__assert_fail@plt+0xe9c4>
   11c5c:	add	r3, sp, #60	; 0x3c
   11c60:	mov	r1, r9
   11c64:	mov	r2, r0
   11c68:	add	r0, sp, #84	; 0x54
   11c6c:	bl	13358 <__assert_fail@plt+0x1e40>
   11c70:	cmn	r0, #1
   11c74:	str	r0, [sp, #76]	; 0x4c
   11c78:	streq	r5, [sp, #76]	; 0x4c
   11c7c:	beq	11c94 <__assert_fail@plt+0x77c>
   11c80:	cmn	r0, #2
   11c84:	bne	11ca0 <__assert_fail@plt+0x788>
   11c88:	ldr	r0, [sp, #72]	; 0x48
   11c8c:	bl	113c8 <strlen@plt>
   11c90:	str	r0, [sp, #76]	; 0x4c
   11c94:	mov	r3, #0
   11c98:	strb	r3, [sp, #80]	; 0x50
   11c9c:	b	11bfc <__assert_fail@plt+0x6e4>
   11ca0:	cmp	r0, #0
   11ca4:	bne	11ce8 <__assert_fail@plt+0x7d0>
   11ca8:	ldr	r3, [sp, #72]	; 0x48
   11cac:	str	r5, [sp, #76]	; 0x4c
   11cb0:	ldrb	r3, [r3]
   11cb4:	cmp	r3, #0
   11cb8:	ldrne	r3, [pc, #216]	; 11d98 <__assert_fail@plt+0x880>
   11cbc:	movne	r2, #171	; 0xab
   11cc0:	ldrne	r1, [pc, #212]	; 11d9c <__assert_fail@plt+0x884>
   11cc4:	ldrne	r0, [pc, #216]	; 11da4 <__assert_fail@plt+0x88c>
   11cc8:	bne	11c44 <__assert_fail@plt+0x72c>
   11ccc:	ldr	r3, [sp, #84]	; 0x54
   11cd0:	cmp	r3, #0
   11cd4:	ldrne	r3, [pc, #188]	; 11d98 <__assert_fail@plt+0x880>
   11cd8:	movne	r2, #172	; 0xac
   11cdc:	ldrne	r1, [pc, #184]	; 11d9c <__assert_fail@plt+0x884>
   11ce0:	ldrne	r0, [pc, #192]	; 11da8 <__assert_fail@plt+0x890>
   11ce4:	bne	11c44 <__assert_fail@plt+0x72c>
   11ce8:	add	r0, sp, #60	; 0x3c
   11cec:	strb	r5, [sp, #80]	; 0x50
   11cf0:	bl	11284 <mbsinit@plt>
   11cf4:	cmp	r0, #0
   11cf8:	movne	r3, #0
   11cfc:	strbne	r3, [sp, #56]	; 0x38
   11d00:	b	11bfc <__assert_fail@plt+0x6e4>
   11d04:	mov	r4, r6
   11d08:	b	11c18 <__assert_fail@plt+0x700>
   11d0c:	cmn	r6, #1
   11d10:	bne	11d24 <__assert_fail@plt+0x80c>
   11d14:	ldr	r0, [sp, #48]	; 0x30
   11d18:	cmp	r0, #0
   11d1c:	bne	11b34 <__assert_fail@plt+0x61c>
   11d20:	b	11c1c <__assert_fail@plt+0x704>
   11d24:	cmn	r6, #2
   11d28:	movne	r4, #75	; 0x4b
   11d2c:	bne	11d38 <__assert_fail@plt+0x820>
   11d30:	bl	113f8 <__errno_location@plt>
   11d34:	ldr	r4, [r0]
   11d38:	mov	r2, #5
   11d3c:	ldr	r1, [pc, #104]	; 11dac <__assert_fail@plt+0x894>
   11d40:	mov	r0, #0
   11d44:	bl	112a8 <dcgettext@plt>
   11d48:	mov	r1, r4
   11d4c:	mov	r2, r0
   11d50:	mov	r0, #3
   11d54:	bl	11344 <error@plt>
   11d58:	ldr	r3, [sp, #72]	; 0x48
   11d5c:	sub	r2, r3, r7
   11d60:	cmp	r6, r2
   11d64:	bls	11c18 <__assert_fail@plt+0x700>
   11d68:	ldr	r2, [sp, #76]	; 0x4c
   11d6c:	add	r4, r4, #1
   11d70:	add	r3, r3, r2
   11d74:	str	r3, [sp, #72]	; 0x48
   11d78:	mov	r3, #0
   11d7c:	strb	r3, [sp, #68]	; 0x44
   11d80:	b	11bc0 <__assert_fail@plt+0x6a8>
   11d84:	strdeq	r3, [r3], -r8
   11d88:	andeq	r0, r0, r6, asr #5
   11d8c:	strheq	r2, [r2], -r2	; <UNPREDICTABLE>
   11d90:	andeq	r1, r2, sl, asr #29
   11d94:	strdeq	r2, [r2], -r8
   11d98:	andeq	r1, r2, r0, asr r5
   11d9c:	muleq	r2, ip, r5
   11da0:	andeq	r1, r2, ip, lsr #11
   11da4:	andeq	r1, r2, r3, asr #11
   11da8:	ldrdeq	r1, [r2], -sl
   11dac:	andeq	r1, r2, ip, ror #11
   11db0:	subs	r5, r0, #0
   11db4:	push	{r7, lr}
   11db8:	sub	sp, sp, #56	; 0x38
   11dbc:	ldr	r4, [pc, #632]	; 1203c <__assert_fail@plt+0xb24>
   11dc0:	beq	11df8 <__assert_fail@plt+0x8e0>
   11dc4:	ldr	r3, [pc, #628]	; 12040 <__assert_fail@plt+0xb28>
   11dc8:	mov	r2, #5
   11dcc:	ldr	r1, [pc, #624]	; 12044 <__assert_fail@plt+0xb2c>
   11dd0:	mov	r0, #0
   11dd4:	ldr	r6, [r3]
   11dd8:	bl	112a8 <dcgettext@plt>
   11ddc:	ldr	r3, [r4]
   11de0:	mov	r1, #1
   11de4:	mov	r2, r0
   11de8:	mov	r0, r6
   11dec:	bl	1144c <__fprintf_chk@plt>
   11df0:	mov	r0, r5
   11df4:	bl	113bc <exit@plt>
   11df8:	mov	r2, #5
   11dfc:	ldr	r1, [pc, #580]	; 12048 <__assert_fail@plt+0xb30>
   11e00:	bl	112a8 <dcgettext@plt>
   11e04:	ldr	r3, [r4]
   11e08:	ldr	r4, [pc, #572]	; 1204c <__assert_fail@plt+0xb34>
   11e0c:	mov	r2, r3
   11e10:	ldr	r8, [pc, #568]	; 12050 <__assert_fail@plt+0xb38>
   11e14:	mov	r6, r5
   11e18:	mov	r1, r0
   11e1c:	mov	r0, #1
   11e20:	bl	11434 <__printf_chk@plt>
   11e24:	mov	r0, #10
   11e28:	bl	1150c <putchar_unlocked@plt>
   11e2c:	mov	r2, #5
   11e30:	ldr	r1, [pc, #540]	; 12054 <__assert_fail@plt+0xb3c>
   11e34:	mov	r0, r5
   11e38:	bl	112a8 <dcgettext@plt>
   11e3c:	ldr	r1, [r4]
   11e40:	bl	11194 <fputs_unlocked@plt>
   11e44:	mov	r2, #5
   11e48:	ldr	r1, [pc, #520]	; 12058 <__assert_fail@plt+0xb40>
   11e4c:	mov	r0, r5
   11e50:	bl	112a8 <dcgettext@plt>
   11e54:	ldr	r1, [r4]
   11e58:	bl	11194 <fputs_unlocked@plt>
   11e5c:	mov	r2, #5
   11e60:	ldr	r1, [pc, #500]	; 1205c <__assert_fail@plt+0xb44>
   11e64:	mov	r0, r5
   11e68:	bl	112a8 <dcgettext@plt>
   11e6c:	ldr	r1, [r4]
   11e70:	bl	11194 <fputs_unlocked@plt>
   11e74:	mov	r2, #5
   11e78:	ldr	r1, [pc, #480]	; 12060 <__assert_fail@plt+0xb48>
   11e7c:	mov	r0, r5
   11e80:	bl	112a8 <dcgettext@plt>
   11e84:	ldr	r1, [r4]
   11e88:	bl	11194 <fputs_unlocked@plt>
   11e8c:	mov	r2, #5
   11e90:	ldr	r1, [pc, #460]	; 12064 <__assert_fail@plt+0xb4c>
   11e94:	mov	r0, r5
   11e98:	bl	112a8 <dcgettext@plt>
   11e9c:	ldr	r1, [r4]
   11ea0:	bl	11194 <fputs_unlocked@plt>
   11ea4:	mov	r2, #5
   11ea8:	ldr	r1, [pc, #440]	; 12068 <__assert_fail@plt+0xb50>
   11eac:	mov	r0, r5
   11eb0:	bl	112a8 <dcgettext@plt>
   11eb4:	ldr	r1, [r4]
   11eb8:	bl	11194 <fputs_unlocked@plt>
   11ebc:	mov	r2, #5
   11ec0:	ldr	r1, [pc, #420]	; 1206c <__assert_fail@plt+0xb54>
   11ec4:	mov	r0, r5
   11ec8:	bl	112a8 <dcgettext@plt>
   11ecc:	ldr	r1, [r4]
   11ed0:	bl	11194 <fputs_unlocked@plt>
   11ed4:	mov	r2, #5
   11ed8:	ldr	r1, [pc, #400]	; 12070 <__assert_fail@plt+0xb58>
   11edc:	mov	r0, r5
   11ee0:	bl	112a8 <dcgettext@plt>
   11ee4:	ldr	r1, [r4]
   11ee8:	bl	11194 <fputs_unlocked@plt>
   11eec:	mov	r2, #5
   11ef0:	ldr	r1, [pc, #380]	; 12074 <__assert_fail@plt+0xb5c>
   11ef4:	mov	r0, r5
   11ef8:	bl	112a8 <dcgettext@plt>
   11efc:	ldr	r1, [r4]
   11f00:	bl	11194 <fputs_unlocked@plt>
   11f04:	mov	r2, #5
   11f08:	ldr	r1, [pc, #360]	; 12078 <__assert_fail@plt+0xb60>
   11f0c:	mov	r0, r5
   11f10:	bl	112a8 <dcgettext@plt>
   11f14:	ldr	r1, [r4]
   11f18:	bl	11194 <fputs_unlocked@plt>
   11f1c:	ldr	lr, [pc, #344]	; 1207c <__assert_fail@plt+0xb64>
   11f20:	mov	ip, sp
   11f24:	ldm	lr!, {r0, r1, r2, r3}
   11f28:	stmia	ip!, {r0, r1, r2, r3}
   11f2c:	ldm	lr!, {r0, r1, r2, r3}
   11f30:	stmia	ip!, {r0, r1, r2, r3}
   11f34:	ldm	lr!, {r0, r1, r2, r3}
   11f38:	stmia	ip!, {r0, r1, r2, r3}
   11f3c:	ldm	lr, {r0, r1}
   11f40:	stm	ip, {r0, r1}
   11f44:	ldr	r1, [sp, r6]
   11f48:	add	r7, sp, r6
   11f4c:	cmp	r1, #0
   11f50:	bne	11ff4 <__assert_fail@plt+0xadc>
   11f54:	ldr	r6, [r7, #4]
   11f58:	ldr	r7, [pc, #240]	; 12050 <__assert_fail@plt+0xb38>
   11f5c:	cmp	r6, #0
   11f60:	mov	r2, #5
   11f64:	ldr	r1, [pc, #276]	; 12080 <__assert_fail@plt+0xb68>
   11f68:	mov	r0, #0
   11f6c:	moveq	r6, r7
   11f70:	bl	112a8 <dcgettext@plt>
   11f74:	ldr	r3, [pc, #264]	; 12084 <__assert_fail@plt+0xb6c>
   11f78:	ldr	r2, [pc, #264]	; 12088 <__assert_fail@plt+0xb70>
   11f7c:	mov	r1, r0
   11f80:	mov	r0, #1
   11f84:	bl	11434 <__printf_chk@plt>
   11f88:	mov	r1, #0
   11f8c:	mov	r0, #5
   11f90:	bl	11488 <setlocale@plt>
   11f94:	cmp	r0, #0
   11f98:	bne	1200c <__assert_fail@plt+0xaf4>
   11f9c:	mov	r2, #5
   11fa0:	ldr	r1, [pc, #228]	; 1208c <__assert_fail@plt+0xb74>
   11fa4:	mov	r0, #0
   11fa8:	bl	112a8 <dcgettext@plt>
   11fac:	ldr	r3, [pc, #156]	; 12050 <__assert_fail@plt+0xb38>
   11fb0:	ldr	r2, [pc, #204]	; 12084 <__assert_fail@plt+0xb6c>
   11fb4:	mov	r1, r0
   11fb8:	mov	r0, #1
   11fbc:	bl	11434 <__printf_chk@plt>
   11fc0:	mov	r2, #5
   11fc4:	ldr	r1, [pc, #196]	; 12090 <__assert_fail@plt+0xb78>
   11fc8:	mov	r0, #0
   11fcc:	bl	112a8 <dcgettext@plt>
   11fd0:	ldr	r2, [pc, #188]	; 12094 <__assert_fail@plt+0xb7c>
   11fd4:	cmp	r6, r7
   11fd8:	ldr	r3, [pc, #184]	; 12098 <__assert_fail@plt+0xb80>
   11fdc:	moveq	r3, r2
   11fe0:	mov	r2, r6
   11fe4:	mov	r1, r0
   11fe8:	mov	r0, #1
   11fec:	bl	11434 <__printf_chk@plt>
   11ff0:	b	11df0 <__assert_fail@plt+0x8d8>
   11ff4:	mov	r0, r8
   11ff8:	bl	111d0 <strcmp@plt>
   11ffc:	add	r6, r6, #8
   12000:	cmp	r0, #0
   12004:	bne	11f44 <__assert_fail@plt+0xa2c>
   12008:	b	11f54 <__assert_fail@plt+0xa3c>
   1200c:	mov	r2, #3
   12010:	ldr	r1, [pc, #132]	; 1209c <__assert_fail@plt+0xb84>
   12014:	bl	114f4 <strncmp@plt>
   12018:	cmp	r0, #0
   1201c:	beq	11f9c <__assert_fail@plt+0xa84>
   12020:	mov	r2, #5
   12024:	ldr	r1, [pc, #116]	; 120a0 <__assert_fail@plt+0xb88>
   12028:	mov	r0, #0
   1202c:	bl	112a8 <dcgettext@plt>
   12030:	ldr	r1, [r4]
   12034:	bl	11194 <fputs_unlocked@plt>
   12038:	b	11f9c <__assert_fail@plt+0xa84>
   1203c:	andeq	r3, r3, r4, asr #3
   12040:	andeq	r3, r3, r8, lsr #3
   12044:	andeq	r1, r2, r5, lsl r6
   12048:	andeq	r1, r2, ip, lsr r6
   1204c:	andeq	r3, r3, ip, lsr #3
   12050:	andeq	r1, r2, r0, lsl r6
   12054:	andeq	r1, r2, r3, ror #12
   12058:	muleq	r2, r0, r6
   1205c:	andeq	r1, r2, r6, asr #13
   12060:	ldrdeq	r1, [r2], -r8
   12064:	strdeq	r1, [r2], -sl
   12068:	andeq	r1, r2, fp, ror #18
   1206c:	andeq	r1, r2, r6, lsr #20
   12070:	andeq	r1, r2, ip, asr fp
   12074:	andeq	r1, r2, r5, lsr #24
   12078:	andeq	r1, r2, r9, asr #26
   1207c:	andeq	r1, r2, r4, ror #10
   12080:	andeq	r1, r2, r5, ror #27
   12084:	strdeq	r1, [r2], -ip
   12088:	andeq	r1, r2, r4, lsr #28
   1208c:	andeq	r1, r2, sp, ror lr
   12090:	muleq	r2, r8, lr
   12094:	andeq	r2, r2, pc, asr r0
   12098:	andeq	r1, r2, sl, asr #29
   1209c:	andeq	r1, r2, r2, lsr lr
   120a0:	andeq	r1, r2, r6, lsr lr
   120a4:	ldr	r3, [pc, #72]	; 120f4 <__assert_fail@plt+0xbdc>
   120a8:	push	{r4, r5, r6, lr}
   120ac:	ldr	r5, [r3]
   120b0:	ldr	r4, [r5]
   120b4:	cmp	r4, #0
   120b8:	popne	{r4, r5, r6, pc}
   120bc:	mov	r2, #5
   120c0:	ldr	r1, [pc, #48]	; 120f8 <__assert_fail@plt+0xbe0>
   120c4:	mov	r0, r4
   120c8:	bl	112a8 <dcgettext@plt>
   120cc:	ldr	r2, [r5, #-4]
   120d0:	mov	r1, #8
   120d4:	mov	r6, r0
   120d8:	mov	r0, r4
   120dc:	bl	14b6c <__assert_fail@plt+0x3654>
   120e0:	mov	r2, r6
   120e4:	mov	r1, r4
   120e8:	mov	r3, r0
   120ec:	mov	r0, #2
   120f0:	bl	11344 <error@plt>
   120f4:			; <UNDEFINED> instruction: 0x000331b8
   120f8:	andeq	r1, r2, fp, asr #29
   120fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12100:	mov	r5, r0
   12104:	sub	sp, sp, #188	; 0xbc
   12108:	ldr	r0, [pc, #2304]	; 12a10 <__assert_fail@plt+0x14f8>
   1210c:	bl	11854 <__assert_fail@plt+0x33c>
   12110:	cmp	r0, #0
   12114:	beq	1213c <__assert_fail@plt+0xc24>
   12118:	bl	120a4 <__assert_fail@plt+0xb8c>
   1211c:	ldr	r2, [pc, #2288]	; 12a14 <__assert_fail@plt+0x14fc>
   12120:	ldr	r3, [r2]
   12124:	add	r1, r3, #4
   12128:	str	r1, [r2]
   1212c:	ldr	r0, [r3]
   12130:	bl	1188c <__assert_fail@plt+0x374>
   12134:	mov	r4, r0
   12138:	b	12174 <__assert_fail@plt+0xc5c>
   1213c:	ldr	r0, [pc, #2260]	; 12a18 <__assert_fail@plt+0x1500>
   12140:	bl	11854 <__assert_fail@plt+0x33c>
   12144:	cmp	r0, #0
   12148:	beq	12180 <__assert_fail@plt+0xc68>
   1214c:	mov	r0, r5
   12150:	bl	120fc <__assert_fail@plt+0xbe4>
   12154:	mov	r5, r0
   12158:	bl	11a0c <__assert_fail@plt+0x4f4>
   1215c:	ldr	r0, [r5, #4]
   12160:	bl	135ac <__assert_fail@plt+0x2094>
   12164:	bl	118f0 <__assert_fail@plt+0x3d8>
   12168:	mov	r4, r0
   1216c:	mov	r0, r5
   12170:	bl	118bc <__assert_fail@plt+0x3a4>
   12174:	mov	r0, r4
   12178:	add	sp, sp, #188	; 0xbc
   1217c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12180:	ldr	r0, [pc, #2196]	; 12a1c <__assert_fail@plt+0x1504>
   12184:	bl	11854 <__assert_fail@plt+0x33c>
   12188:	subs	r6, r0, #0
   1218c:	beq	121d4 <__assert_fail@plt+0xcbc>
   12190:	mov	r0, r5
   12194:	bl	120fc <__assert_fail@plt+0xbe4>
   12198:	mov	r4, r0
   1219c:	mov	r0, r5
   121a0:	bl	120fc <__assert_fail@plt+0xbe4>
   121a4:	cmp	r5, #0
   121a8:	mov	r6, r0
   121ac:	beq	121cc <__assert_fail@plt+0xcb4>
   121b0:	mov	r1, r0
   121b4:	mov	r0, r4
   121b8:	bl	11a58 <__assert_fail@plt+0x540>
   121bc:	mov	r5, r0
   121c0:	mov	r0, r4
   121c4:	bl	118bc <__assert_fail@plt+0x3a4>
   121c8:	mov	r4, r5
   121cc:	mov	r0, r6
   121d0:	b	12170 <__assert_fail@plt+0xc58>
   121d4:	ldr	r0, [pc, #2116]	; 12a20 <__assert_fail@plt+0x1508>
   121d8:	bl	11854 <__assert_fail@plt+0x33c>
   121dc:	cmp	r0, #0
   121e0:	beq	125d8 <__assert_fail@plt+0x10c0>
   121e4:	mov	r0, r5
   121e8:	bl	120fc <__assert_fail@plt+0xbe4>
   121ec:	mov	r9, r0
   121f0:	mov	r0, r5
   121f4:	bl	120fc <__assert_fail@plt+0xbe4>
   121f8:	mov	sl, r0
   121fc:	mov	r0, r9
   12200:	bl	11a0c <__assert_fail@plt+0x4f4>
   12204:	mov	r0, sl
   12208:	bl	11a0c <__assert_fail@plt+0x4f4>
   1220c:	ldr	r7, [sl, #4]
   12210:	ldrb	r3, [r7]
   12214:	cmp	r3, #0
   12218:	bne	1223c <__assert_fail@plt+0xd24>
   1221c:	mov	r4, #0
   12220:	mov	r0, r4
   12224:	bl	118f0 <__assert_fail@plt+0x3d8>
   12228:	mov	r4, r0
   1222c:	mov	r0, r9
   12230:	bl	118bc <__assert_fail@plt+0x3a4>
   12234:	mov	r0, sl
   12238:	b	12170 <__assert_fail@plt+0xc58>
   1223c:	ldr	r5, [r9, #4]
   12240:	bl	11314 <__ctype_get_mb_cur_max@plt>
   12244:	cmp	r0, #1
   12248:	bls	125b8 <__assert_fail@plt+0x10a0>
   1224c:	str	r5, [sp, #32]
   12250:	mov	r4, r6
   12254:	add	r5, sp, #184	; 0xb8
   12258:	add	fp, sp, #76	; 0x4c
   1225c:	strb	r6, [r5, #-168]!	; 0xffffff58
   12260:	str	r6, [sp, #20]
   12264:	str	r6, [r5, #8]
   12268:	strb	r6, [sp, #28]
   1226c:	ldrb	r3, [sp, #16]
   12270:	ldr	r8, [sp, #32]
   12274:	cmp	r3, #0
   12278:	bne	12514 <__assert_fail@plt+0xffc>
   1227c:	ldrb	r3, [r8]
   12280:	ldr	r2, [pc, #1948]	; 12a24 <__assert_fail@plt+0x150c>
   12284:	lsr	r1, r3, #5
   12288:	and	r3, r3, #31
   1228c:	ldr	r2, [r2, r1, lsl #2]
   12290:	lsr	r3, r2, r3
   12294:	tst	r3, #1
   12298:	beq	124fc <__assert_fail@plt+0xfe4>
   1229c:	mov	r3, #1
   122a0:	str	r3, [sp, #36]	; 0x24
   122a4:	ldrb	r2, [r8]
   122a8:	str	r2, [sp, #44]	; 0x2c
   122ac:	strb	r3, [sp, #40]	; 0x28
   122b0:	mov	r3, #1
   122b4:	strb	r3, [sp, #28]
   122b8:	ldrb	r3, [sp, #40]	; 0x28
   122bc:	cmp	r3, #0
   122c0:	beq	122d0 <__assert_fail@plt+0xdb8>
   122c4:	ldr	r3, [sp, #44]	; 0x2c
   122c8:	cmp	r3, #0
   122cc:	beq	1221c <__assert_fail@plt+0xd04>
   122d0:	ldr	r3, [sp, #36]	; 0x24
   122d4:	add	r4, r4, #1
   122d8:	cmp	r3, #1
   122dc:	bne	12314 <__assert_fail@plt+0xdfc>
   122e0:	ldr	r3, [sp, #32]
   122e4:	mov	r0, r7
   122e8:	ldrb	r1, [r3]
   122ec:	bl	133a8 <__assert_fail@plt+0x1e90>
   122f0:	cmp	r0, #0
   122f4:	bne	12220 <__assert_fail@plt+0xd08>
   122f8:	ldr	r3, [sp, #32]
   122fc:	ldr	r2, [sp, #36]	; 0x24
   12300:	add	r3, r3, r2
   12304:	str	r3, [sp, #32]
   12308:	mov	r3, #0
   1230c:	strb	r3, [sp, #28]
   12310:	b	1226c <__assert_fail@plt+0xd54>
   12314:	mov	r3, #0
   12318:	strb	r3, [sp, #72]	; 0x48
   1231c:	str	r3, [sp, #76]	; 0x4c
   12320:	str	r3, [sp, #80]	; 0x50
   12324:	strb	r3, [sp, #84]	; 0x54
   12328:	add	r3, sp, #100	; 0x64
   1232c:	str	r7, [sp, #88]	; 0x58
   12330:	str	r3, [sp, #4]
   12334:	ldrb	r3, [sp, #72]	; 0x48
   12338:	ldr	r8, [sp, #88]	; 0x58
   1233c:	cmp	r3, #0
   12340:	bne	12430 <__assert_fail@plt+0xf18>
   12344:	ldrb	r3, [r8]
   12348:	ldr	r1, [pc, #1748]	; 12a24 <__assert_fail@plt+0x150c>
   1234c:	lsr	r2, r3, #5
   12350:	and	r3, r3, #31
   12354:	ldr	r2, [r1, r2, lsl #2]
   12358:	lsr	r3, r2, r3
   1235c:	tst	r3, #1
   12360:	beq	12404 <__assert_fail@plt+0xeec>
   12364:	mov	r3, #1
   12368:	str	r3, [sp, #92]	; 0x5c
   1236c:	ldrb	r2, [r8]
   12370:	str	r2, [sp, #100]	; 0x64
   12374:	strb	r3, [sp, #96]	; 0x60
   12378:	mov	r3, #1
   1237c:	strb	r3, [sp, #84]	; 0x54
   12380:	ldrb	r3, [sp, #96]	; 0x60
   12384:	cmp	r3, #0
   12388:	beq	123d4 <__assert_fail@plt+0xebc>
   1238c:	ldr	r3, [sp, #100]	; 0x64
   12390:	cmp	r3, #0
   12394:	beq	122f8 <__assert_fail@plt+0xde0>
   12398:	ldrb	r2, [sp, #40]	; 0x28
   1239c:	cmp	r2, #0
   123a0:	beq	123d4 <__assert_fail@plt+0xebc>
   123a4:	ldr	r0, [sp, #44]	; 0x2c
   123a8:	sub	r0, r0, r3
   123ac:	clz	r0, r0
   123b0:	lsr	r0, r0, #5
   123b4:	cmp	r0, #0
   123b8:	bne	12220 <__assert_fail@plt+0xd08>
   123bc:	ldr	r3, [sp, #88]	; 0x58
   123c0:	ldr	r2, [sp, #92]	; 0x5c
   123c4:	strb	r0, [sp, #84]	; 0x54
   123c8:	add	r3, r3, r2
   123cc:	str	r3, [sp, #88]	; 0x58
   123d0:	b	12334 <__assert_fail@plt+0xe1c>
   123d4:	ldr	r2, [sp, #92]	; 0x5c
   123d8:	ldr	r3, [sp, #36]	; 0x24
   123dc:	cmp	r2, r3
   123e0:	movne	r0, r6
   123e4:	bne	123fc <__assert_fail@plt+0xee4>
   123e8:	ldr	r1, [sp, #32]
   123ec:	ldr	r0, [sp, #88]	; 0x58
   123f0:	bl	11290 <memcmp@plt>
   123f4:	clz	r0, r0
   123f8:	lsr	r0, r0, #5
   123fc:	and	r0, r0, #1
   12400:	b	123b4 <__assert_fail@plt+0xe9c>
   12404:	mov	r0, fp
   12408:	bl	11284 <mbsinit@plt>
   1240c:	cmp	r0, #0
   12410:	bne	12428 <__assert_fail@plt+0xf10>
   12414:	ldr	r3, [pc, #1548]	; 12a28 <__assert_fail@plt+0x1510>
   12418:	ldr	r1, [pc, #1548]	; 12a2c <__assert_fail@plt+0x1514>
   1241c:	ldr	r0, [pc, #1548]	; 12a30 <__assert_fail@plt+0x1518>
   12420:	mov	r2, #143	; 0x8f
   12424:	bl	11518 <__assert_fail@plt>
   12428:	mov	r3, #1
   1242c:	strb	r3, [sp, #72]	; 0x48
   12430:	bl	11314 <__ctype_get_mb_cur_max@plt>
   12434:	mov	r1, r0
   12438:	mov	r0, r8
   1243c:	bl	1fedc <__assert_fail@plt+0xe9c4>
   12440:	mov	r3, fp
   12444:	mov	r1, r8
   12448:	mov	r2, r0
   1244c:	ldr	r0, [sp, #4]
   12450:	bl	13358 <__assert_fail@plt+0x1e40>
   12454:	cmn	r0, #1
   12458:	str	r0, [sp, #92]	; 0x5c
   1245c:	bne	12470 <__assert_fail@plt+0xf58>
   12460:	mov	r3, #1
   12464:	str	r3, [sp, #92]	; 0x5c
   12468:	mov	r3, #0
   1246c:	b	12374 <__assert_fail@plt+0xe5c>
   12470:	cmn	r0, #2
   12474:	bne	12488 <__assert_fail@plt+0xf70>
   12478:	ldr	r0, [sp, #88]	; 0x58
   1247c:	bl	113c8 <strlen@plt>
   12480:	str	r0, [sp, #92]	; 0x5c
   12484:	b	12468 <__assert_fail@plt+0xf50>
   12488:	cmp	r0, #0
   1248c:	bne	124dc <__assert_fail@plt+0xfc4>
   12490:	mov	r3, #1
   12494:	str	r3, [sp, #92]	; 0x5c
   12498:	ldr	r3, [sp, #88]	; 0x58
   1249c:	ldrb	r3, [r3]
   124a0:	cmp	r3, #0
   124a4:	beq	124bc <__assert_fail@plt+0xfa4>
   124a8:	ldr	r3, [pc, #1400]	; 12a28 <__assert_fail@plt+0x1510>
   124ac:	mov	r2, #171	; 0xab
   124b0:	ldr	r1, [pc, #1396]	; 12a2c <__assert_fail@plt+0x1514>
   124b4:	ldr	r0, [pc, #1400]	; 12a34 <__assert_fail@plt+0x151c>
   124b8:	b	12424 <__assert_fail@plt+0xf0c>
   124bc:	ldr	r3, [sp, #100]	; 0x64
   124c0:	cmp	r3, #0
   124c4:	beq	124dc <__assert_fail@plt+0xfc4>
   124c8:	ldr	r3, [pc, #1368]	; 12a28 <__assert_fail@plt+0x1510>
   124cc:	mov	r2, #172	; 0xac
   124d0:	ldr	r1, [pc, #1364]	; 12a2c <__assert_fail@plt+0x1514>
   124d4:	ldr	r0, [pc, #1372]	; 12a38 <__assert_fail@plt+0x1520>
   124d8:	b	12424 <__assert_fail@plt+0xf0c>
   124dc:	mov	r3, #1
   124e0:	mov	r0, fp
   124e4:	strb	r3, [sp, #96]	; 0x60
   124e8:	bl	11284 <mbsinit@plt>
   124ec:	cmp	r0, #0
   124f0:	movne	r3, #0
   124f4:	strbne	r3, [sp, #72]	; 0x48
   124f8:	b	12378 <__assert_fail@plt+0xe60>
   124fc:	add	r0, r5, #4
   12500:	bl	11284 <mbsinit@plt>
   12504:	cmp	r0, #0
   12508:	beq	12414 <__assert_fail@plt+0xefc>
   1250c:	mov	r3, #1
   12510:	strb	r3, [sp, #16]
   12514:	bl	11314 <__ctype_get_mb_cur_max@plt>
   12518:	mov	r1, r0
   1251c:	mov	r0, r8
   12520:	bl	1fedc <__assert_fail@plt+0xe9c4>
   12524:	add	r3, r5, #4
   12528:	mov	r1, r8
   1252c:	mov	r2, r0
   12530:	add	r0, r5, #28
   12534:	bl	13358 <__assert_fail@plt+0x1e40>
   12538:	cmn	r0, #1
   1253c:	str	r0, [sp, #36]	; 0x24
   12540:	bne	12554 <__assert_fail@plt+0x103c>
   12544:	mov	r3, #1
   12548:	str	r3, [sp, #36]	; 0x24
   1254c:	mov	r3, #0
   12550:	b	122ac <__assert_fail@plt+0xd94>
   12554:	cmn	r0, #2
   12558:	bne	1256c <__assert_fail@plt+0x1054>
   1255c:	ldr	r0, [sp, #32]
   12560:	bl	113c8 <strlen@plt>
   12564:	str	r0, [sp, #36]	; 0x24
   12568:	b	1254c <__assert_fail@plt+0x1034>
   1256c:	cmp	r0, #0
   12570:	bne	12598 <__assert_fail@plt+0x1080>
   12574:	mov	r3, #1
   12578:	str	r3, [sp, #36]	; 0x24
   1257c:	ldr	r3, [sp, #32]
   12580:	ldrb	r3, [r3]
   12584:	cmp	r3, #0
   12588:	bne	124a8 <__assert_fail@plt+0xf90>
   1258c:	ldr	r3, [sp, #44]	; 0x2c
   12590:	cmp	r3, #0
   12594:	bne	124c8 <__assert_fail@plt+0xfb0>
   12598:	mov	r3, #1
   1259c:	add	r0, r5, #4
   125a0:	strb	r3, [sp, #40]	; 0x28
   125a4:	bl	11284 <mbsinit@plt>
   125a8:	cmp	r0, #0
   125ac:	movne	r3, #0
   125b0:	strbne	r3, [sp, #16]
   125b4:	b	122b0 <__assert_fail@plt+0xd98>
   125b8:	mov	r1, r7
   125bc:	mov	r0, r5
   125c0:	bl	111e8 <strcspn@plt>
   125c4:	ldrb	r3, [r5, r0]
   125c8:	cmp	r3, #0
   125cc:	beq	1221c <__assert_fail@plt+0xd04>
   125d0:	add	r4, r0, #1
   125d4:	b	12220 <__assert_fail@plt+0xd08>
   125d8:	ldr	r0, [pc, #1116]	; 12a3c <__assert_fail@plt+0x1524>
   125dc:	bl	11854 <__assert_fail@plt+0x33c>
   125e0:	cmp	r0, #0
   125e4:	beq	1293c <__assert_fail@plt+0x1424>
   125e8:	mov	r0, r5
   125ec:	bl	120fc <__assert_fail@plt+0xbe4>
   125f0:	mov	fp, r0
   125f4:	mov	r0, r5
   125f8:	bl	120fc <__assert_fail@plt+0xbe4>
   125fc:	mov	r7, r0
   12600:	mov	r0, r5
   12604:	bl	120fc <__assert_fail@plt+0xbe4>
   12608:	mov	r8, r0
   1260c:	mov	r0, fp
   12610:	bl	11a0c <__assert_fail@plt+0x4f4>
   12614:	mov	r0, r7
   12618:	bl	1198c <__assert_fail@plt+0x474>
   1261c:	cmp	r0, #0
   12620:	bne	12648 <__assert_fail@plt+0x1130>
   12624:	ldr	r0, [pc, #1044]	; 12a40 <__assert_fail@plt+0x1528>
   12628:	bl	1188c <__assert_fail@plt+0x374>
   1262c:	mov	r4, r0
   12630:	mov	r0, fp
   12634:	bl	118bc <__assert_fail@plt+0x3a4>
   12638:	mov	r0, r7
   1263c:	bl	118bc <__assert_fail@plt+0x3a4>
   12640:	mov	r0, r8
   12644:	b	12170 <__assert_fail@plt+0xc58>
   12648:	mov	r0, r8
   1264c:	bl	1198c <__assert_fail@plt+0x474>
   12650:	cmp	r0, #0
   12654:	beq	12624 <__assert_fail@plt+0x110c>
   12658:	ldr	r3, [r7, #8]
   1265c:	cmp	r3, #0
   12660:	mvnlt	r4, #0
   12664:	blt	12690 <__assert_fail@plt+0x1178>
   12668:	cmp	r3, #1
   1266c:	mvngt	r4, #1
   12670:	bgt	12690 <__assert_fail@plt+0x1178>
   12674:	ldr	r2, [r7, #12]
   12678:	cmp	r3, #0
   1267c:	ldr	r4, [r2]
   12680:	moveq	r4, #0
   12684:	beq	12690 <__assert_fail@plt+0x1178>
   12688:	cmn	r4, #1
   1268c:	mvneq	r4, #1
   12690:	ldr	r5, [r8, #8]
   12694:	cmp	r5, #0
   12698:	mvnlt	r6, #0
   1269c:	blt	126c8 <__assert_fail@plt+0x11b0>
   126a0:	cmp	r5, #1
   126a4:	mvngt	r6, #1
   126a8:	bgt	126c8 <__assert_fail@plt+0x11b0>
   126ac:	ldr	r3, [r8, #12]
   126b0:	cmp	r5, #0
   126b4:	ldr	r6, [r3]
   126b8:	moveq	r6, r5
   126bc:	beq	126c8 <__assert_fail@plt+0x11b0>
   126c0:	cmn	r6, #1
   126c4:	mvneq	r6, #1
   126c8:	ldr	r9, [fp, #4]
   126cc:	mov	r0, r9
   126d0:	bl	113c8 <strlen@plt>
   126d4:	str	r0, [sp, #4]
   126d8:	bl	11314 <__ctype_get_mb_cur_max@plt>
   126dc:	cmp	r0, #1
   126e0:	ldrls	r0, [sp, #4]
   126e4:	bls	126f0 <__assert_fail@plt+0x11d8>
   126e8:	mov	r0, r9
   126ec:	bl	135ac <__assert_fail@plt+0x2094>
   126f0:	clz	r3, r4
   126f4:	lsr	r3, r3, #5
   126f8:	cmp	r0, r4
   126fc:	movcs	sl, r3
   12700:	orrcc	sl, r3, #1
   12704:	cmp	sl, #0
   12708:	bne	12718 <__assert_fail@plt+0x1200>
   1270c:	sub	r2, r6, #1
   12710:	cmn	r2, #3
   12714:	bls	1273c <__assert_fail@plt+0x1224>
   12718:	ldr	r0, [pc, #800]	; 12a40 <__assert_fail@plt+0x1528>
   1271c:	bl	20b18 <__assert_fail@plt+0xf600>
   12720:	mov	r6, r0
   12724:	mov	r0, r6
   12728:	bl	1188c <__assert_fail@plt+0x374>
   1272c:	mov	r4, r0
   12730:	mov	r0, r6
   12734:	bl	130e8 <__assert_fail@plt+0x1bd0>
   12738:	b	12630 <__assert_fail@plt+0x1118>
   1273c:	rsb	r5, r4, #1
   12740:	add	r5, r5, r0
   12744:	cmp	r5, r6
   12748:	movcs	r5, r6
   1274c:	bl	11314 <__ctype_get_mb_cur_max@plt>
   12750:	cmp	r0, #1
   12754:	bne	12784 <__assert_fail@plt+0x126c>
   12758:	add	r0, r5, #1
   1275c:	bl	206a0 <__assert_fail@plt+0xf188>
   12760:	sub	r1, r4, #1
   12764:	add	r1, r9, r1
   12768:	mov	r2, r5
   1276c:	mov	r6, r0
   12770:	bl	11398 <mempcpy@plt>
   12774:	mov	r9, r0
   12778:	mov	r3, #0
   1277c:	strb	r3, [r9]
   12780:	b	12724 <__assert_fail@plt+0x120c>
   12784:	ldr	r3, [sp, #4]
   12788:	add	r0, r3, #1
   1278c:	bl	206a0 <__assert_fail@plt+0xf188>
   12790:	add	r2, sp, #184	; 0xb8
   12794:	mov	r3, #1
   12798:	str	r9, [sp, #144]	; 0x90
   1279c:	strb	sl, [r2, #-56]!	; 0xffffffc8
   127a0:	str	r3, [sp, #4]
   127a4:	add	r1, r2, #4
   127a8:	add	r3, r2, #28
   127ac:	str	sl, [sp, #132]	; 0x84
   127b0:	str	r1, [sp, #8]
   127b4:	str	sl, [r2, #8]
   127b8:	str	r3, [sp, #12]
   127bc:	strb	sl, [sp, #140]	; 0x8c
   127c0:	mov	r6, r0
   127c4:	mov	r9, r0
   127c8:	ldrb	r3, [sp, #128]	; 0x80
   127cc:	ldr	sl, [sp, #144]	; 0x90
   127d0:	cmp	r3, #0
   127d4:	bne	12898 <__assert_fail@plt+0x1380>
   127d8:	ldrb	r3, [sl]
   127dc:	ldr	r1, [pc, #576]	; 12a24 <__assert_fail@plt+0x150c>
   127e0:	lsr	r2, r3, #5
   127e4:	and	r3, r3, #31
   127e8:	ldr	r2, [r1, r2, lsl #2]
   127ec:	lsr	r3, r2, r3
   127f0:	tst	r3, #1
   127f4:	beq	12880 <__assert_fail@plt+0x1368>
   127f8:	mov	r3, #1
   127fc:	str	r3, [sp, #148]	; 0x94
   12800:	ldrb	r2, [sl]
   12804:	str	r2, [sp, #156]	; 0x9c
   12808:	strb	r3, [sp, #152]	; 0x98
   1280c:	mov	r3, #1
   12810:	strb	r3, [sp, #140]	; 0x8c
   12814:	ldrb	r3, [sp, #152]	; 0x98
   12818:	cmp	r3, #0
   1281c:	beq	1282c <__assert_fail@plt+0x1314>
   12820:	ldr	r3, [sp, #156]	; 0x9c
   12824:	cmp	r3, #0
   12828:	beq	12778 <__assert_fail@plt+0x1260>
   1282c:	cmp	r5, #0
   12830:	beq	12778 <__assert_fail@plt+0x1260>
   12834:	ldr	r3, [sp, #4]
   12838:	cmp	r3, r4
   1283c:	bcc	12858 <__assert_fail@plt+0x1340>
   12840:	mov	r0, r9
   12844:	ldr	r2, [sp, #148]	; 0x94
   12848:	ldr	r1, [sp, #144]	; 0x90
   1284c:	bl	11398 <mempcpy@plt>
   12850:	sub	r5, r5, #1
   12854:	mov	r9, r0
   12858:	ldr	r3, [sp, #144]	; 0x90
   1285c:	ldr	r2, [sp, #148]	; 0x94
   12860:	add	r3, r3, r2
   12864:	str	r3, [sp, #144]	; 0x90
   12868:	mov	r3, #0
   1286c:	strb	r3, [sp, #140]	; 0x8c
   12870:	ldr	r3, [sp, #4]
   12874:	add	r3, r3, #1
   12878:	str	r3, [sp, #4]
   1287c:	b	127c8 <__assert_fail@plt+0x12b0>
   12880:	ldr	r0, [sp, #8]
   12884:	bl	11284 <mbsinit@plt>
   12888:	cmp	r0, #0
   1288c:	beq	12414 <__assert_fail@plt+0xefc>
   12890:	mov	r3, #1
   12894:	strb	r3, [sp, #128]	; 0x80
   12898:	bl	11314 <__ctype_get_mb_cur_max@plt>
   1289c:	mov	r1, r0
   128a0:	mov	r0, sl
   128a4:	bl	1fedc <__assert_fail@plt+0xe9c4>
   128a8:	ldr	r3, [sp, #8]
   128ac:	mov	r1, sl
   128b0:	mov	r2, r0
   128b4:	ldr	r0, [sp, #12]
   128b8:	bl	13358 <__assert_fail@plt+0x1e40>
   128bc:	cmn	r0, #1
   128c0:	str	r0, [sp, #148]	; 0x94
   128c4:	bne	128d8 <__assert_fail@plt+0x13c0>
   128c8:	mov	r3, #1
   128cc:	str	r3, [sp, #148]	; 0x94
   128d0:	mov	r3, #0
   128d4:	b	12808 <__assert_fail@plt+0x12f0>
   128d8:	cmn	r0, #2
   128dc:	bne	128f0 <__assert_fail@plt+0x13d8>
   128e0:	ldr	r0, [sp, #144]	; 0x90
   128e4:	bl	113c8 <strlen@plt>
   128e8:	str	r0, [sp, #148]	; 0x94
   128ec:	b	128d0 <__assert_fail@plt+0x13b8>
   128f0:	cmp	r0, #0
   128f4:	bne	1291c <__assert_fail@plt+0x1404>
   128f8:	mov	r3, #1
   128fc:	str	r3, [sp, #148]	; 0x94
   12900:	ldr	r3, [sp, #144]	; 0x90
   12904:	ldrb	r3, [r3]
   12908:	cmp	r3, #0
   1290c:	bne	124a8 <__assert_fail@plt+0xf90>
   12910:	ldr	r3, [sp, #156]	; 0x9c
   12914:	cmp	r3, #0
   12918:	bne	124c8 <__assert_fail@plt+0xfb0>
   1291c:	mov	r3, #1
   12920:	ldr	r0, [sp, #8]
   12924:	strb	r3, [sp, #152]	; 0x98
   12928:	bl	11284 <mbsinit@plt>
   1292c:	cmp	r0, #0
   12930:	movne	r3, #0
   12934:	strbne	r3, [sp, #128]	; 0x80
   12938:	b	1280c <__assert_fail@plt+0x12f4>
   1293c:	bl	120a4 <__assert_fail@plt+0xb8c>
   12940:	ldr	r0, [pc, #252]	; 12a44 <__assert_fail@plt+0x152c>
   12944:	bl	11854 <__assert_fail@plt+0x33c>
   12948:	ldr	r6, [pc, #196]	; 12a14 <__assert_fail@plt+0x14fc>
   1294c:	subs	r4, r0, #0
   12950:	beq	129d4 <__assert_fail@plt+0x14bc>
   12954:	mov	r0, r5
   12958:	bl	12f3c <__assert_fail@plt+0x1a24>
   1295c:	ldr	r7, [r6]
   12960:	ldr	r5, [r7]
   12964:	cmp	r5, #0
   12968:	mov	r4, r0
   1296c:	bne	129a8 <__assert_fail@plt+0x1490>
   12970:	mov	r2, #5
   12974:	ldr	r1, [pc, #204]	; 12a48 <__assert_fail@plt+0x1530>
   12978:	mov	r0, r5
   1297c:	bl	112a8 <dcgettext@plt>
   12980:	ldr	r2, [r7, #-4]
   12984:	mov	r4, r0
   12988:	mov	r1, #8
   1298c:	mov	r0, r5
   12990:	bl	14b6c <__assert_fail@plt+0x3654>
   12994:	mov	r2, r4
   12998:	mov	r1, r5
   1299c:	mov	r3, r0
   129a0:	mov	r0, #2
   129a4:	bl	11344 <error@plt>
   129a8:	ldr	r0, [pc, #156]	; 12a4c <__assert_fail@plt+0x1534>
   129ac:	bl	11854 <__assert_fail@plt+0x33c>
   129b0:	subs	r5, r0, #0
   129b4:	bne	12174 <__assert_fail@plt+0xc5c>
   129b8:	mov	r2, #5
   129bc:	ldr	r1, [pc, #140]	; 12a50 <__assert_fail@plt+0x1538>
   129c0:	bl	112a8 <dcgettext@plt>
   129c4:	ldr	r3, [r6]
   129c8:	ldr	r2, [r3]
   129cc:	mov	r4, r0
   129d0:	b	12988 <__assert_fail@plt+0x1470>
   129d4:	ldr	r0, [pc, #112]	; 12a4c <__assert_fail@plt+0x1534>
   129d8:	bl	11854 <__assert_fail@plt+0x33c>
   129dc:	cmp	r0, #0
   129e0:	ldreq	r3, [r6]
   129e4:	addeq	r2, r3, #4
   129e8:	streq	r2, [r6]
   129ec:	beq	1212c <__assert_fail@plt+0xc14>
   129f0:	mov	r2, #5
   129f4:	ldr	r1, [pc, #88]	; 12a54 <__assert_fail@plt+0x153c>
   129f8:	mov	r0, r4
   129fc:	bl	112a8 <dcgettext@plt>
   12a00:	mov	r1, r4
   12a04:	mov	r2, r0
   12a08:	mov	r0, #2
   12a0c:	bl	11344 <error@plt>
   12a10:	strdeq	r1, [r2], -r3
   12a14:			; <UNDEFINED> instruction: 0x000331b8
   12a18:	strdeq	r1, [r2], -r5
   12a1c:	strdeq	r1, [r2], -ip
   12a20:	andeq	r1, r2, r2, lsl #30
   12a24:	strdeq	r2, [r2], -r8
   12a28:	andeq	r1, r2, r0, asr r5
   12a2c:	muleq	r2, ip, r5
   12a30:	andeq	r1, r2, ip, lsr #11
   12a34:	andeq	r1, r2, r3, asr #11
   12a38:	ldrdeq	r1, [r2], -sl
   12a3c:	andeq	r1, r2, r8, lsl #30
   12a40:	andeq	r1, r2, sl, asr #29
   12a44:	andeq	r1, r2, pc, lsl #30
   12a48:	andeq	r1, r2, r1, lsl pc
   12a4c:	andeq	r2, r2, sl, ror r4
   12a50:	andeq	r1, r2, r6, lsr pc
   12a54:	andeq	r1, r2, r0, ror #30
   12a58:	push	{r4, r5, r6, r7, r8, lr}
   12a5c:	mov	r6, r0
   12a60:	bl	120fc <__assert_fail@plt+0xbe4>
   12a64:	ldr	r7, [pc, #84]	; 12ac0 <__assert_fail@plt+0x15a8>
   12a68:	mov	r4, r0
   12a6c:	mov	r0, r7
   12a70:	bl	11854 <__assert_fail@plt+0x33c>
   12a74:	cmp	r0, #0
   12a78:	beq	12ab8 <__assert_fail@plt+0x15a0>
   12a7c:	mov	r0, r6
   12a80:	bl	120fc <__assert_fail@plt+0xbe4>
   12a84:	cmp	r6, #0
   12a88:	mov	r5, r0
   12a8c:	beq	12aac <__assert_fail@plt+0x1594>
   12a90:	mov	r1, r0
   12a94:	mov	r0, r4
   12a98:	bl	11a58 <__assert_fail@plt+0x540>
   12a9c:	mov	r8, r0
   12aa0:	mov	r0, r4
   12aa4:	bl	118bc <__assert_fail@plt+0x3a4>
   12aa8:	mov	r4, r8
   12aac:	mov	r0, r5
   12ab0:	bl	118bc <__assert_fail@plt+0x3a4>
   12ab4:	b	12a6c <__assert_fail@plt+0x1554>
   12ab8:	mov	r0, r4
   12abc:	pop	{r4, r5, r6, r7, r8, pc}
   12ac0:	andeq	r1, r2, sp, ror pc
   12ac4:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ac8:	mov	r7, r0
   12acc:	bl	12a58 <__assert_fail@plt+0x1540>
   12ad0:	ldr	r8, [pc, #240]	; 12bc8 <__assert_fail@plt+0x16b0>
   12ad4:	ldr	r9, [pc, #240]	; 12bcc <__assert_fail@plt+0x16b4>
   12ad8:	ldr	sl, [pc, #240]	; 12bd0 <__assert_fail@plt+0x16b8>
   12adc:	mov	r6, r0
   12ae0:	ldr	r0, [pc, #236]	; 12bd4 <__assert_fail@plt+0x16bc>
   12ae4:	bl	11854 <__assert_fail@plt+0x33c>
   12ae8:	cmp	r0, #0
   12aec:	bne	12b1c <__assert_fail@plt+0x1604>
   12af0:	ldr	r0, [pc, #224]	; 12bd8 <__assert_fail@plt+0x16c0>
   12af4:	bl	11854 <__assert_fail@plt+0x33c>
   12af8:	cmp	r0, #0
   12afc:	movne	r4, #1
   12b00:	bne	12b20 <__assert_fail@plt+0x1608>
   12b04:	ldr	r0, [pc, #208]	; 12bdc <__assert_fail@plt+0x16c4>
   12b08:	bl	11854 <__assert_fail@plt+0x33c>
   12b0c:	cmp	r0, #0
   12b10:	bne	12b64 <__assert_fail@plt+0x164c>
   12b14:	mov	r0, r6
   12b18:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12b1c:	mov	r4, #0
   12b20:	mov	r0, r7
   12b24:	bl	12a58 <__assert_fail@plt+0x1540>
   12b28:	cmp	r7, #0
   12b2c:	mov	r5, r0
   12b30:	beq	12bb4 <__assert_fail@plt+0x169c>
   12b34:	mov	r0, r6
   12b38:	bl	1198c <__assert_fail@plt+0x474>
   12b3c:	cmp	r0, #0
   12b40:	bne	12b6c <__assert_fail@plt+0x1654>
   12b44:	ldr	r1, [pc, #148]	; 12be0 <__assert_fail@plt+0x16c8>
   12b48:	mov	r2, #5
   12b4c:	mov	r0, #0
   12b50:	bl	112a8 <dcgettext@plt>
   12b54:	mov	r1, #0
   12b58:	mov	r2, r0
   12b5c:	mov	r0, #2
   12b60:	bl	11344 <error@plt>
   12b64:	mov	r4, #2
   12b68:	b	12b20 <__assert_fail@plt+0x1608>
   12b6c:	mov	r0, r5
   12b70:	bl	1198c <__assert_fail@plt+0x474>
   12b74:	cmp	r0, #0
   12b78:	beq	12b44 <__assert_fail@plt+0x162c>
   12b7c:	cmp	r4, #0
   12b80:	beq	12bc0 <__assert_fail@plt+0x16a8>
   12b84:	ldr	fp, [r5, #8]
   12b88:	cmp	fp, #0
   12b8c:	moveq	r2, #5
   12b90:	ldreq	r1, [pc, #76]	; 12be4 <__assert_fail@plt+0x16cc>
   12b94:	beq	12b4c <__assert_fail@plt+0x1634>
   12b98:	cmp	r4, #1
   12b9c:	moveq	r4, r9
   12ba0:	movne	r4, sl
   12ba4:	add	r1, r6, #4
   12ba8:	add	r2, r5, #4
   12bac:	mov	r0, r1
   12bb0:	blx	r4
   12bb4:	mov	r0, r5
   12bb8:	bl	118bc <__assert_fail@plt+0x3a4>
   12bbc:	b	12ae0 <__assert_fail@plt+0x15c8>
   12bc0:	mov	r4, r8
   12bc4:	b	12ba4 <__assert_fail@plt+0x168c>
   12bc8:	andeq	r1, r1, ip, asr #5
   12bcc:	ldrdeq	r1, [r1], -ip
   12bd0:	andeq	r1, r1, r0, ror #7
   12bd4:	andeq	r1, r2, pc, ror pc
   12bd8:	andeq	r2, r2, r4, asr #14
   12bdc:	andeq	r1, r2, r1, lsl #31
   12be0:	andeq	r1, r2, r3, lsl #31
   12be4:	muleq	r2, r8, pc	; <UNPREDICTABLE>
   12be8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12bec:	mov	r7, r0
   12bf0:	bl	12ac4 <__assert_fail@plt+0x15ac>
   12bf4:	ldr	r8, [pc, #184]	; 12cb4 <__assert_fail@plt+0x179c>
   12bf8:	ldr	r9, [pc, #184]	; 12cb8 <__assert_fail@plt+0x17a0>
   12bfc:	ldr	sl, [pc, #184]	; 12cbc <__assert_fail@plt+0x17a4>
   12c00:	mov	r5, r0
   12c04:	mov	r0, r8
   12c08:	bl	11854 <__assert_fail@plt+0x33c>
   12c0c:	cmp	r0, #0
   12c10:	bne	12c2c <__assert_fail@plt+0x1714>
   12c14:	ldr	r0, [pc, #164]	; 12cc0 <__assert_fail@plt+0x17a8>
   12c18:	bl	11854 <__assert_fail@plt+0x33c>
   12c1c:	cmp	r0, #0
   12c20:	bne	12c74 <__assert_fail@plt+0x175c>
   12c24:	mov	r0, r5
   12c28:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12c2c:	mov	r4, #0
   12c30:	mov	r0, r7
   12c34:	bl	12ac4 <__assert_fail@plt+0x15ac>
   12c38:	cmp	r7, #0
   12c3c:	mov	r6, r0
   12c40:	beq	12ca8 <__assert_fail@plt+0x1790>
   12c44:	mov	r0, r5
   12c48:	bl	1198c <__assert_fail@plt+0x474>
   12c4c:	cmp	r0, #0
   12c50:	bne	12c7c <__assert_fail@plt+0x1764>
   12c54:	mov	r2, #5
   12c58:	ldr	r1, [pc, #100]	; 12cc4 <__assert_fail@plt+0x17ac>
   12c5c:	mov	r0, #0
   12c60:	bl	112a8 <dcgettext@plt>
   12c64:	mov	r1, #0
   12c68:	mov	r2, r0
   12c6c:	mov	r0, #2
   12c70:	bl	11344 <error@plt>
   12c74:	mov	r4, #1
   12c78:	b	12c30 <__assert_fail@plt+0x1718>
   12c7c:	mov	r0, r6
   12c80:	bl	1198c <__assert_fail@plt+0x474>
   12c84:	cmp	r0, #0
   12c88:	beq	12c54 <__assert_fail@plt+0x173c>
   12c8c:	cmp	r4, #0
   12c90:	add	r1, r5, #4
   12c94:	moveq	r4, r9
   12c98:	movne	r4, sl
   12c9c:	add	r2, r6, #4
   12ca0:	mov	r0, r1
   12ca4:	blx	r4
   12ca8:	mov	r0, r6
   12cac:	bl	118bc <__assert_fail@plt+0x3a4>
   12cb0:	b	12c04 <__assert_fail@plt+0x16ec>
   12cb4:	strdeq	r1, [r2], -r3
   12cb8:			; <UNDEFINED> instruction: 0x000114b8
   12cbc:	andeq	r1, r1, r4, asr r2
   12cc0:	andeq	r2, r2, ip
   12cc4:	andeq	r1, r2, r3, lsl #31
   12cc8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12ccc:	mov	r8, r0
   12cd0:	bl	12be8 <__assert_fail@plt+0x16d0>
   12cd4:	ldr	r9, [pc, #412]	; 12e78 <__assert_fail@plt+0x1960>
   12cd8:	ldr	sl, [pc, #412]	; 12e7c <__assert_fail@plt+0x1964>
   12cdc:	mov	r7, #0
   12ce0:	mov	r5, r0
   12ce4:	mov	r0, r9
   12ce8:	bl	11854 <__assert_fail@plt+0x33c>
   12cec:	cmp	r0, #0
   12cf0:	bne	12de8 <__assert_fail@plt+0x18d0>
   12cf4:	mov	r0, sl
   12cf8:	bl	11854 <__assert_fail@plt+0x33c>
   12cfc:	cmp	r0, #0
   12d00:	movne	r4, #1
   12d04:	bne	12d1c <__assert_fail@plt+0x1804>
   12d08:	ldr	r0, [pc, #368]	; 12e80 <__assert_fail@plt+0x1968>
   12d0c:	bl	11854 <__assert_fail@plt+0x33c>
   12d10:	cmp	r0, #0
   12d14:	beq	12d98 <__assert_fail@plt+0x1880>
   12d18:	mov	r4, #2
   12d1c:	mov	r0, r8
   12d20:	bl	12be8 <__assert_fail@plt+0x16d0>
   12d24:	cmp	r8, #0
   12d28:	moveq	r4, r7
   12d2c:	mov	r6, r0
   12d30:	beq	12e14 <__assert_fail@plt+0x18fc>
   12d34:	mov	r0, r5
   12d38:	bl	11a0c <__assert_fail@plt+0x4f4>
   12d3c:	mov	r0, r6
   12d40:	bl	11a0c <__assert_fail@plt+0x4f4>
   12d44:	ldr	r2, [r5, #4]
   12d48:	mov	r0, r2
   12d4c:	bl	1181c <__assert_fail@plt+0x304>
   12d50:	cmp	r0, #0
   12d54:	beq	12df8 <__assert_fail@plt+0x18e0>
   12d58:	ldr	r1, [r6, #4]
   12d5c:	mov	r0, r1
   12d60:	bl	1181c <__assert_fail@plt+0x304>
   12d64:	cmp	r0, #0
   12d68:	beq	12df8 <__assert_fail@plt+0x18e0>
   12d6c:	mov	r0, r2
   12d70:	bl	1ffc4 <__assert_fail@plt+0xeaac>
   12d74:	sub	r4, r4, #1
   12d78:	cmp	r4, #4
   12d7c:	ldrls	pc, [pc, r4, lsl #2]
   12d80:	b	12e10 <__assert_fail@plt+0x18f8>
   12d84:	andeq	r2, r1, r4, lsr lr
   12d88:	andeq	r2, r1, r4, asr #28
   12d8c:	andeq	r2, r1, r0, asr lr
   12d90:	andeq	r2, r1, ip, asr lr
   12d94:	andeq	r2, r1, r8, ror #28
   12d98:	ldr	r0, [pc, #228]	; 12e84 <__assert_fail@plt+0x196c>
   12d9c:	bl	11854 <__assert_fail@plt+0x33c>
   12da0:	cmp	r0, #0
   12da4:	bne	12d18 <__assert_fail@plt+0x1800>
   12da8:	ldr	r0, [pc, #216]	; 12e88 <__assert_fail@plt+0x1970>
   12dac:	bl	11854 <__assert_fail@plt+0x33c>
   12db0:	cmp	r0, #0
   12db4:	movne	r4, #3
   12db8:	bne	12d1c <__assert_fail@plt+0x1804>
   12dbc:	ldr	r0, [pc, #200]	; 12e8c <__assert_fail@plt+0x1974>
   12dc0:	bl	11854 <__assert_fail@plt+0x33c>
   12dc4:	cmp	r0, #0
   12dc8:	movne	r4, #4
   12dcc:	bne	12d1c <__assert_fail@plt+0x1804>
   12dd0:	ldr	r0, [pc, #184]	; 12e90 <__assert_fail@plt+0x1978>
   12dd4:	bl	11854 <__assert_fail@plt+0x33c>
   12dd8:	cmp	r0, #0
   12ddc:	bne	12df0 <__assert_fail@plt+0x18d8>
   12de0:	mov	r0, r5
   12de4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12de8:	mov	r4, r7
   12dec:	b	12d1c <__assert_fail@plt+0x1804>
   12df0:	mov	r4, #5
   12df4:	b	12d1c <__assert_fail@plt+0x1804>
   12df8:	bl	113f8 <__errno_location@plt>
   12dfc:	str	r7, [r0]
   12e00:	ldr	r1, [r6, #4]
   12e04:	ldr	r0, [r5, #4]
   12e08:	bl	11350 <strcoll@plt>
   12e0c:	b	12d74 <__assert_fail@plt+0x185c>
   12e10:	lsr	r4, r0, #31
   12e14:	mov	r0, r5
   12e18:	bl	118bc <__assert_fail@plt+0x3a4>
   12e1c:	mov	r0, r6
   12e20:	bl	118bc <__assert_fail@plt+0x3a4>
   12e24:	mov	r0, r4
   12e28:	bl	118f0 <__assert_fail@plt+0x3d8>
   12e2c:	mov	r5, r0
   12e30:	b	12ce4 <__assert_fail@plt+0x17cc>
   12e34:	cmp	r0, #0
   12e38:	movgt	r4, #0
   12e3c:	movle	r4, #1
   12e40:	b	12e14 <__assert_fail@plt+0x18fc>
   12e44:	clz	r4, r0
   12e48:	lsr	r4, r4, #5
   12e4c:	b	12e14 <__assert_fail@plt+0x18fc>
   12e50:	adds	r4, r0, #0
   12e54:	movne	r4, #1
   12e58:	b	12e14 <__assert_fail@plt+0x18fc>
   12e5c:	mvn	r4, r0
   12e60:	lsr	r4, r4, #31
   12e64:	b	12e14 <__assert_fail@plt+0x18fc>
   12e68:	cmp	r0, #0
   12e6c:	movle	r4, #0
   12e70:	movgt	r4, #1
   12e74:	b	12e14 <__assert_fail@plt+0x18fc>
   12e78:	andeq	r1, r2, r9, lsr #31
   12e7c:	andeq	r1, r2, fp, lsr #31
   12e80:			; <UNDEFINED> instruction: 0x00021fb2
   12e84:	andeq	r1, r2, lr, lsr #31
   12e88:			; <UNDEFINED> instruction: 0x00021fb1
   12e8c:			; <UNDEFINED> instruction: 0x00021fb4
   12e90:			; <UNDEFINED> instruction: 0x00021fb7
   12e94:	push	{r4, r5, r6, r7, r8, lr}
   12e98:	mov	r7, r0
   12e9c:	bl	12cc8 <__assert_fail@plt+0x17b0>
   12ea0:	ldr	r8, [pc, #144]	; 12f38 <__assert_fail@plt+0x1a20>
   12ea4:	mov	r6, #0
   12ea8:	mov	r4, r0
   12eac:	mov	r0, r8
   12eb0:	bl	11854 <__assert_fail@plt+0x33c>
   12eb4:	cmp	r0, #0
   12eb8:	beq	12f30 <__assert_fail@plt+0x1a18>
   12ebc:	cmp	r7, #0
   12ec0:	moveq	r0, r6
   12ec4:	beq	12ed8 <__assert_fail@plt+0x19c0>
   12ec8:	mov	r0, r4
   12ecc:	bl	1191c <__assert_fail@plt+0x404>
   12ed0:	eor	r0, r0, #1
   12ed4:	uxtb	r0, r0
   12ed8:	and	r0, r0, #1
   12edc:	bl	12cc8 <__assert_fail@plt+0x17b0>
   12ee0:	mov	r5, r0
   12ee4:	mov	r0, r4
   12ee8:	bl	1191c <__assert_fail@plt+0x404>
   12eec:	cmp	r0, #0
   12ef0:	bne	12f04 <__assert_fail@plt+0x19ec>
   12ef4:	mov	r0, r5
   12ef8:	bl	1191c <__assert_fail@plt+0x404>
   12efc:	cmp	r0, #0
   12f00:	beq	12f24 <__assert_fail@plt+0x1a0c>
   12f04:	mov	r0, r4
   12f08:	bl	118bc <__assert_fail@plt+0x3a4>
   12f0c:	mov	r0, r5
   12f10:	bl	118bc <__assert_fail@plt+0x3a4>
   12f14:	mov	r0, r6
   12f18:	bl	118f0 <__assert_fail@plt+0x3d8>
   12f1c:	mov	r4, r0
   12f20:	b	12eac <__assert_fail@plt+0x1994>
   12f24:	mov	r0, r5
   12f28:	bl	118bc <__assert_fail@plt+0x3a4>
   12f2c:	b	12eac <__assert_fail@plt+0x1994>
   12f30:	mov	r0, r4
   12f34:	pop	{r4, r5, r6, r7, r8, pc}
   12f38:			; <UNDEFINED> instruction: 0x00021fb9
   12f3c:	push	{r4, r5, r6, r7, r8, lr}
   12f40:	mov	r7, r0
   12f44:	bl	12e94 <__assert_fail@plt+0x197c>
   12f48:	ldr	r8, [pc, #144]	; 12fe0 <__assert_fail@plt+0x1ac8>
   12f4c:	mov	r6, #0
   12f50:	mov	r4, r0
   12f54:	mov	r0, r8
   12f58:	bl	11854 <__assert_fail@plt+0x33c>
   12f5c:	cmp	r0, #0
   12f60:	beq	12fd8 <__assert_fail@plt+0x1ac0>
   12f64:	cmp	r7, #0
   12f68:	moveq	r0, r6
   12f6c:	beq	12f78 <__assert_fail@plt+0x1a60>
   12f70:	mov	r0, r4
   12f74:	bl	1191c <__assert_fail@plt+0x404>
   12f78:	and	r0, r0, #1
   12f7c:	bl	12e94 <__assert_fail@plt+0x197c>
   12f80:	mov	r5, r0
   12f84:	mov	r0, r4
   12f88:	bl	1191c <__assert_fail@plt+0x404>
   12f8c:	cmp	r0, #0
   12f90:	beq	12fc8 <__assert_fail@plt+0x1ab0>
   12f94:	mov	r0, r4
   12f98:	bl	118bc <__assert_fail@plt+0x3a4>
   12f9c:	mov	r0, r5
   12fa0:	bl	1191c <__assert_fail@plt+0x404>
   12fa4:	cmp	r0, #0
   12fa8:	beq	12fc0 <__assert_fail@plt+0x1aa8>
   12fac:	mov	r0, r5
   12fb0:	bl	118bc <__assert_fail@plt+0x3a4>
   12fb4:	mov	r0, r6
   12fb8:	bl	118f0 <__assert_fail@plt+0x3d8>
   12fbc:	mov	r5, r0
   12fc0:	mov	r4, r5
   12fc4:	b	12f54 <__assert_fail@plt+0x1a3c>
   12fc8:	mov	r0, r5
   12fcc:	bl	118bc <__assert_fail@plt+0x3a4>
   12fd0:	mov	r5, r4
   12fd4:	b	12fc0 <__assert_fail@plt+0x1aa8>
   12fd8:	mov	r0, r4
   12fdc:	pop	{r4, r5, r6, r7, r8, pc}
   12fe0:			; <UNDEFINED> instruction: 0x00021fbb
   12fe4:	ldr	r3, [pc, #4]	; 12ff0 <__assert_fail@plt+0x1ad8>
   12fe8:	str	r0, [r3]
   12fec:	bx	lr
   12ff0:			; <UNDEFINED> instruction: 0x000331bc
   12ff4:	ldr	r3, [pc, #4]	; 13000 <__assert_fail@plt+0x1ae8>
   12ff8:	strb	r0, [r3, #4]
   12ffc:	bx	lr
   13000:			; <UNDEFINED> instruction: 0x000331bc
   13004:	ldr	r3, [pc, #192]	; 130cc <__assert_fail@plt+0x1bb4>
   13008:	push	{r0, r1, r4, r5, r6, lr}
   1300c:	ldr	r0, [r3]
   13010:	bl	20c58 <__assert_fail@plt+0xf740>
   13014:	cmp	r0, #0
   13018:	beq	130b0 <__assert_fail@plt+0x1b98>
   1301c:	ldr	r3, [pc, #172]	; 130d0 <__assert_fail@plt+0x1bb8>
   13020:	mov	r4, r3
   13024:	ldrb	r2, [r3, #4]
   13028:	cmp	r2, #0
   1302c:	beq	13040 <__assert_fail@plt+0x1b28>
   13030:	bl	113f8 <__errno_location@plt>
   13034:	ldr	r3, [r0]
   13038:	cmp	r3, #32
   1303c:	beq	130b0 <__assert_fail@plt+0x1b98>
   13040:	mov	r2, #5
   13044:	ldr	r1, [pc, #136]	; 130d4 <__assert_fail@plt+0x1bbc>
   13048:	mov	r0, #0
   1304c:	bl	112a8 <dcgettext@plt>
   13050:	ldr	r4, [r4]
   13054:	cmp	r4, #0
   13058:	mov	r5, r0
   1305c:	beq	13094 <__assert_fail@plt+0x1b7c>
   13060:	bl	113f8 <__errno_location@plt>
   13064:	ldr	r6, [r0]
   13068:	mov	r0, r4
   1306c:	bl	14c6c <__assert_fail@plt+0x3754>
   13070:	str	r5, [sp]
   13074:	ldr	r2, [pc, #92]	; 130d8 <__assert_fail@plt+0x1bc0>
   13078:	mov	r1, r6
   1307c:	mov	r3, r0
   13080:	mov	r0, #0
   13084:	bl	11344 <error@plt>
   13088:	ldr	r3, [pc, #76]	; 130dc <__assert_fail@plt+0x1bc4>
   1308c:	ldr	r0, [r3]
   13090:	bl	1123c <_exit@plt>
   13094:	bl	113f8 <__errno_location@plt>
   13098:	mov	r3, r5
   1309c:	ldr	r2, [pc, #60]	; 130e0 <__assert_fail@plt+0x1bc8>
   130a0:	ldr	r1, [r0]
   130a4:	mov	r0, r4
   130a8:	bl	11344 <error@plt>
   130ac:	b	13088 <__assert_fail@plt+0x1b70>
   130b0:	ldr	r3, [pc, #44]	; 130e4 <__assert_fail@plt+0x1bcc>
   130b4:	ldr	r0, [r3]
   130b8:	bl	20c58 <__assert_fail@plt+0xf740>
   130bc:	cmp	r0, #0
   130c0:	bne	13088 <__assert_fail@plt+0x1b70>
   130c4:	add	sp, sp, #8
   130c8:	pop	{r4, r5, r6, pc}
   130cc:	andeq	r3, r3, ip, lsr #3
   130d0:			; <UNDEFINED> instruction: 0x000331bc
   130d4:	andeq	r2, r2, r2, lsr #1
   130d8:	andeq	r2, r2, lr, lsr #1
   130dc:	andeq	r3, r3, r0, asr r1
   130e0:	strheq	r2, [r2], -r2	; <UNPREDICTABLE>
   130e4:	andeq	r3, r3, r8, lsr #3
   130e8:	push	{r0, r1, r2, r4, r5, lr}
   130ec:	mov	r5, r0
   130f0:	bl	113f8 <__errno_location@plt>
   130f4:	ldr	r3, [r0]
   130f8:	mov	r4, r0
   130fc:	str	r3, [sp]
   13100:	str	r3, [sp, #4]
   13104:	mov	r3, #0
   13108:	str	r3, [r0]
   1310c:	mov	r0, r5
   13110:	bl	11224 <free@plt>
   13114:	ldr	r3, [r4]
   13118:	add	r2, sp, #8
   1311c:	cmp	r3, #0
   13120:	moveq	r3, #4
   13124:	movne	r3, #0
   13128:	add	r3, r2, r3
   1312c:	ldr	r3, [r3, #-8]
   13130:	str	r3, [r4]
   13134:	add	sp, sp, #12
   13138:	pop	{r4, r5, pc}
   1313c:	ldr	ip, [pc, #156]	; 131e0 <__assert_fail@plt+0x1cc8>
   13140:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   13144:	cmp	r0, #2
   13148:	mov	r6, #0
   1314c:	ldr	r7, [ip]
   13150:	mov	r8, ip
   13154:	str	r6, [ip]
   13158:	bne	1318c <__assert_fail@plt+0x1c74>
   1315c:	mov	r5, r3
   13160:	mov	r4, r2
   13164:	str	r6, [sp]
   13168:	ldr	r3, [pc, #116]	; 131e4 <__assert_fail@plt+0x1ccc>
   1316c:	ldr	r2, [pc, #116]	; 131e8 <__assert_fail@plt+0x1cd0>
   13170:	bl	113a4 <getopt_long@plt>
   13174:	cmn	r0, #1
   13178:	beq	1318c <__assert_fail@plt+0x1c74>
   1317c:	cmp	r0, #104	; 0x68
   13180:	beq	131a4 <__assert_fail@plt+0x1c8c>
   13184:	cmp	r0, #118	; 0x76
   13188:	beq	131b4 <__assert_fail@plt+0x1c9c>
   1318c:	ldr	r3, [pc, #88]	; 131ec <__assert_fail@plt+0x1cd4>
   13190:	mov	r2, #0
   13194:	str	r7, [r8]
   13198:	str	r2, [r3]
   1319c:	add	sp, sp, #16
   131a0:	pop	{r4, r5, r6, r7, r8, pc}
   131a4:	mov	r0, r6
   131a8:	ldr	r3, [sp, #44]	; 0x2c
   131ac:	blx	r3
   131b0:	b	1318c <__assert_fail@plt+0x1c74>
   131b4:	ldr	r0, [pc, #52]	; 131f0 <__assert_fail@plt+0x1cd8>
   131b8:	add	r3, sp, #48	; 0x30
   131bc:	str	r3, [sp]
   131c0:	str	r3, [sp, #12]
   131c4:	ldr	r0, [r0]
   131c8:	ldr	r3, [sp, #40]	; 0x28
   131cc:	mov	r2, r5
   131d0:	mov	r1, r4
   131d4:	bl	20594 <__assert_fail@plt+0xf07c>
   131d8:	mov	r0, r6
   131dc:	bl	113bc <exit@plt>
   131e0:			; <UNDEFINED> instruction: 0x000331b0
   131e4:	strheq	r2, [r2], -r8
   131e8:	strdeq	r1, [r2], -r3
   131ec:	andeq	r3, r3, r0, lsr #3
   131f0:	andeq	r3, r3, ip, lsr #3
   131f4:	push	{r4, r5, r6, r7, r8, r9, lr}
   131f8:	sub	sp, sp, #20
   131fc:	mov	r8, r3
   13200:	ldrb	lr, [sp, #52]	; 0x34
   13204:	ldr	r3, [pc, #152]	; 132a4 <__assert_fail@plt+0x1d8c>
   13208:	mov	r4, #0
   1320c:	ldr	ip, [pc, #148]	; 132a8 <__assert_fail@plt+0x1d90>
   13210:	cmp	lr, r4
   13214:	mov	r7, r2
   13218:	mov	r2, #1
   1321c:	ldr	r9, [r3]
   13220:	mov	r5, r3
   13224:	str	r2, [r3]
   13228:	ldr	r2, [pc, #124]	; 132ac <__assert_fail@plt+0x1d94>
   1322c:	str	r4, [sp]
   13230:	moveq	r2, ip
   13234:	ldr	r3, [pc, #116]	; 132b0 <__assert_fail@plt+0x1d98>
   13238:	ldr	r6, [sp, #56]	; 0x38
   1323c:	bl	113a4 <getopt_long@plt>
   13240:	cmn	r0, #1
   13244:	beq	1326c <__assert_fail@plt+0x1d54>
   13248:	cmp	r0, #104	; 0x68
   1324c:	beq	13264 <__assert_fail@plt+0x1d4c>
   13250:	cmp	r0, #118	; 0x76
   13254:	beq	13278 <__assert_fail@plt+0x1d60>
   13258:	ldr	r3, [pc, #84]	; 132b4 <__assert_fail@plt+0x1d9c>
   1325c:	ldr	r0, [r3]
   13260:	b	13268 <__assert_fail@plt+0x1d50>
   13264:	mov	r0, r4
   13268:	blx	r6
   1326c:	str	r9, [r5]
   13270:	add	sp, sp, #20
   13274:	pop	{r4, r5, r6, r7, r8, r9, pc}
   13278:	ldr	r0, [pc, #56]	; 132b8 <__assert_fail@plt+0x1da0>
   1327c:	add	r3, sp, #60	; 0x3c
   13280:	str	r3, [sp]
   13284:	str	r3, [sp, #12]
   13288:	ldr	r0, [r0]
   1328c:	ldr	r3, [sp, #48]	; 0x30
   13290:	mov	r2, r8
   13294:	mov	r1, r7
   13298:	bl	20594 <__assert_fail@plt+0xf07c>
   1329c:	mov	r0, r4
   132a0:	bl	113bc <exit@plt>
   132a4:			; <UNDEFINED> instruction: 0x000331b0
   132a8:	strdeq	r1, [r2], -r3
   132ac:	andeq	r1, r2, sl, asr #29
   132b0:	strheq	r2, [r2], -r8
   132b4:	andeq	r3, r3, r0, asr r1
   132b8:	andeq	r3, r3, ip, lsr #3
   132bc:	push	{r4, lr}
   132c0:	mov	r4, r0
   132c4:	bl	1120c <wcwidth@plt>
   132c8:	cmp	r0, #0
   132cc:	popge	{r4, pc}
   132d0:	mov	r0, r4
   132d4:	bl	112e4 <iswcntrl@plt>
   132d8:	clz	r0, r0
   132dc:	lsr	r0, r0, #5
   132e0:	pop	{r4, pc}
   132e4:	mov	r3, r1
   132e8:	push	{r4, r5, r6, lr}
   132ec:	mov	r5, r1
   132f0:	ldr	r1, [r3], #16
   132f4:	mov	r4, r0
   132f8:	cmp	r1, r3
   132fc:	strne	r1, [r0]
   13300:	bne	13318 <__assert_fail@plt+0x1e00>
   13304:	add	r3, r0, #16
   13308:	ldr	r2, [r5, #4]
   1330c:	mov	r0, r3
   13310:	bl	11248 <memcpy@plt>
   13314:	str	r0, [r4]
   13318:	ldr	r3, [r5, #4]
   1331c:	str	r3, [r4, #4]
   13320:	ldrb	r3, [r5, #8]
   13324:	cmp	r3, #0
   13328:	strb	r3, [r4, #8]
   1332c:	ldrne	r3, [r5, #12]
   13330:	strne	r3, [r4, #12]
   13334:	pop	{r4, r5, r6, pc}
   13338:	ldr	r3, [pc, #20]	; 13354 <__assert_fail@plt+0x1e3c>
   1333c:	lsr	r2, r0, #5
   13340:	and	r0, r0, #31
   13344:	ldr	r3, [r3, r2, lsl #2]
   13348:	lsr	r0, r3, r0
   1334c:	and	r0, r0, #1
   13350:	bx	lr
   13354:	strdeq	r2, [r2], -r8
   13358:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1335c:	subs	r5, r0, #0
   13360:	addeq	r5, sp, #4
   13364:	mov	r0, r5
   13368:	mov	r7, r2
   1336c:	mov	r6, r1
   13370:	bl	11338 <mbrtowc@plt>
   13374:	cmp	r7, #0
   13378:	cmnne	r0, #3
   1337c:	mov	r4, r0
   13380:	bls	1339c <__assert_fail@plt+0x1e84>
   13384:	mov	r0, #0
   13388:	bl	20f0c <__assert_fail@plt+0xf9f4>
   1338c:	cmp	r0, #0
   13390:	moveq	r4, #1
   13394:	ldrbeq	r3, [r6]
   13398:	streq	r3, [r5]
   1339c:	mov	r0, r4
   133a0:	add	sp, sp, #12
   133a4:	pop	{r4, r5, r6, r7, pc}
   133a8:	push	{r4, r5, r6, r7, r8, lr}
   133ac:	sub	sp, sp, #56	; 0x38
   133b0:	mov	r4, r0
   133b4:	mov	r5, r1
   133b8:	bl	11314 <__ctype_get_mb_cur_max@plt>
   133bc:	cmp	r0, #1
   133c0:	bls	13550 <__assert_fail@plt+0x2038>
   133c4:	uxtb	r6, r5
   133c8:	cmp	r6, #47	; 0x2f
   133cc:	bls	13550 <__assert_fail@plt+0x2038>
   133d0:	add	r5, sp, #56	; 0x38
   133d4:	mov	r3, #0
   133d8:	ldr	r7, [pc, #436]	; 13594 <__assert_fail@plt+0x207c>
   133dc:	strb	r3, [r5, #-56]!	; 0xffffffc8
   133e0:	str	r4, [sp, #16]
   133e4:	add	r4, r5, #4
   133e8:	add	r5, r5, #28
   133ec:	str	r3, [sp, #4]
   133f0:	str	r3, [r4, #4]
   133f4:	strb	r3, [sp, #12]
   133f8:	ldrb	r3, [sp]
   133fc:	ldr	r8, [sp, #16]
   13400:	cmp	r3, #0
   13404:	bne	1348c <__assert_fail@plt+0x1f74>
   13408:	ldrb	r3, [r8]
   1340c:	lsr	r2, r3, #5
   13410:	and	r3, r3, #31
   13414:	ldr	r2, [r7, r2, lsl #2]
   13418:	lsr	r3, r2, r3
   1341c:	tst	r3, #1
   13420:	beq	13460 <__assert_fail@plt+0x1f48>
   13424:	mov	r3, #1
   13428:	str	r3, [sp, #20]
   1342c:	ldrb	r2, [r8]
   13430:	str	r2, [sp, #28]
   13434:	strb	r3, [sp, #24]
   13438:	mov	r3, #1
   1343c:	strb	r3, [sp, #12]
   13440:	ldrb	r3, [sp, #24]
   13444:	cmp	r3, #0
   13448:	beq	13564 <__assert_fail@plt+0x204c>
   1344c:	ldr	r0, [sp, #28]
   13450:	cmp	r0, #0
   13454:	bne	13564 <__assert_fail@plt+0x204c>
   13458:	add	sp, sp, #56	; 0x38
   1345c:	pop	{r4, r5, r6, r7, r8, pc}
   13460:	mov	r0, r4
   13464:	bl	11284 <mbsinit@plt>
   13468:	cmp	r0, #0
   1346c:	bne	13484 <__assert_fail@plt+0x1f6c>
   13470:	ldr	r3, [pc, #288]	; 13598 <__assert_fail@plt+0x2080>
   13474:	ldr	r1, [pc, #288]	; 1359c <__assert_fail@plt+0x2084>
   13478:	ldr	r0, [pc, #288]	; 135a0 <__assert_fail@plt+0x2088>
   1347c:	mov	r2, #143	; 0x8f
   13480:	bl	11518 <__assert_fail@plt>
   13484:	mov	r3, #1
   13488:	strb	r3, [sp]
   1348c:	bl	11314 <__ctype_get_mb_cur_max@plt>
   13490:	mov	r1, r0
   13494:	mov	r0, r8
   13498:	bl	1fedc <__assert_fail@plt+0xe9c4>
   1349c:	mov	r3, r4
   134a0:	mov	r1, r8
   134a4:	mov	r2, r0
   134a8:	mov	r0, r5
   134ac:	bl	13358 <__assert_fail@plt+0x1e40>
   134b0:	cmn	r0, #1
   134b4:	str	r0, [sp, #20]
   134b8:	bne	134cc <__assert_fail@plt+0x1fb4>
   134bc:	mov	r3, #1
   134c0:	str	r3, [sp, #20]
   134c4:	mov	r3, #0
   134c8:	b	13434 <__assert_fail@plt+0x1f1c>
   134cc:	cmn	r0, #2
   134d0:	bne	134e4 <__assert_fail@plt+0x1fcc>
   134d4:	ldr	r0, [sp, #16]
   134d8:	bl	113c8 <strlen@plt>
   134dc:	str	r0, [sp, #20]
   134e0:	b	134c4 <__assert_fail@plt+0x1fac>
   134e4:	cmp	r0, #0
   134e8:	bne	13530 <__assert_fail@plt+0x2018>
   134ec:	mov	r3, #1
   134f0:	str	r3, [sp, #20]
   134f4:	ldr	r3, [sp, #16]
   134f8:	ldrb	r3, [r3]
   134fc:	cmp	r3, #0
   13500:	ldrne	r3, [pc, #144]	; 13598 <__assert_fail@plt+0x2080>
   13504:	movne	r2, #171	; 0xab
   13508:	ldrne	r1, [pc, #140]	; 1359c <__assert_fail@plt+0x2084>
   1350c:	ldrne	r0, [pc, #144]	; 135a4 <__assert_fail@plt+0x208c>
   13510:	bne	13480 <__assert_fail@plt+0x1f68>
   13514:	ldr	r3, [sp, #28]
   13518:	cmp	r3, #0
   1351c:	ldrne	r3, [pc, #116]	; 13598 <__assert_fail@plt+0x2080>
   13520:	movne	r2, #172	; 0xac
   13524:	ldrne	r1, [pc, #112]	; 1359c <__assert_fail@plt+0x2084>
   13528:	ldrne	r0, [pc, #120]	; 135a8 <__assert_fail@plt+0x2090>
   1352c:	bne	13480 <__assert_fail@plt+0x1f68>
   13530:	mov	r3, #1
   13534:	mov	r0, r4
   13538:	strb	r3, [sp, #24]
   1353c:	bl	11284 <mbsinit@plt>
   13540:	cmp	r0, #0
   13544:	movne	r3, #0
   13548:	strbne	r3, [sp]
   1354c:	b	13438 <__assert_fail@plt+0x1f20>
   13550:	mov	r1, r5
   13554:	mov	r0, r4
   13558:	add	sp, sp, #56	; 0x38
   1355c:	pop	{r4, r5, r6, r7, r8, lr}
   13560:	b	113d4 <strchr@plt>
   13564:	ldr	r3, [sp, #20]
   13568:	ldr	r0, [sp, #16]
   1356c:	cmp	r3, #1
   13570:	bne	13580 <__assert_fail@plt+0x2068>
   13574:	ldrb	r2, [r0]
   13578:	cmp	r2, r6
   1357c:	beq	13458 <__assert_fail@plt+0x1f40>
   13580:	add	r0, r0, r3
   13584:	mov	r3, #0
   13588:	str	r0, [sp, #16]
   1358c:	strb	r3, [sp, #12]
   13590:	b	133f8 <__assert_fail@plt+0x1ee0>
   13594:	strdeq	r2, [r2], -r8
   13598:	andeq	r2, r2, r8, lsl r1
   1359c:	muleq	r2, lr, r5
   135a0:	andeq	r1, r2, ip, lsr #11
   135a4:	andeq	r1, r2, r3, asr #11
   135a8:	ldrdeq	r1, [r2], -sl
   135ac:	push	{r4, r5, r6, r7, r8, lr}
   135b0:	sub	sp, sp, #56	; 0x38
   135b4:	mov	r4, r0
   135b8:	bl	11314 <__ctype_get_mb_cur_max@plt>
   135bc:	cmp	r0, #1
   135c0:	bls	13744 <__assert_fail@plt+0x222c>
   135c4:	add	r3, sp, #56	; 0x38
   135c8:	mov	r0, #0
   135cc:	ldr	r8, [pc, #416]	; 13774 <__assert_fail@plt+0x225c>
   135d0:	strb	r0, [r3, #-56]!	; 0xffffffc8
   135d4:	str	r4, [sp, #16]
   135d8:	add	r5, r3, #4
   135dc:	mov	r4, r0
   135e0:	add	r7, r3, #28
   135e4:	str	r0, [sp, #4]
   135e8:	str	r0, [r5, #4]
   135ec:	strb	r0, [sp, #12]
   135f0:	ldrb	r3, [sp]
   135f4:	ldr	r6, [sp, #16]
   135f8:	cmp	r3, #0
   135fc:	bne	13680 <__assert_fail@plt+0x2168>
   13600:	ldrb	r3, [r6]
   13604:	lsr	r2, r3, #5
   13608:	and	r3, r3, #31
   1360c:	ldr	r2, [r8, r2, lsl #2]
   13610:	lsr	r3, r2, r3
   13614:	tst	r3, #1
   13618:	beq	13654 <__assert_fail@plt+0x213c>
   1361c:	mov	r3, #1
   13620:	str	r3, [sp, #20]
   13624:	ldrb	r2, [r6]
   13628:	str	r2, [sp, #28]
   1362c:	strb	r3, [sp, #24]
   13630:	ldrb	r3, [sp, #24]
   13634:	cmp	r3, #0
   13638:	beq	13754 <__assert_fail@plt+0x223c>
   1363c:	ldr	r3, [sp, #28]
   13640:	cmp	r3, #0
   13644:	bne	13754 <__assert_fail@plt+0x223c>
   13648:	mov	r0, r4
   1364c:	add	sp, sp, #56	; 0x38
   13650:	pop	{r4, r5, r6, r7, r8, pc}
   13654:	mov	r0, r5
   13658:	bl	11284 <mbsinit@plt>
   1365c:	cmp	r0, #0
   13660:	bne	13678 <__assert_fail@plt+0x2160>
   13664:	ldr	r3, [pc, #268]	; 13778 <__assert_fail@plt+0x2260>
   13668:	ldr	r1, [pc, #268]	; 1377c <__assert_fail@plt+0x2264>
   1366c:	ldr	r0, [pc, #268]	; 13780 <__assert_fail@plt+0x2268>
   13670:	mov	r2, #143	; 0x8f
   13674:	bl	11518 <__assert_fail@plt>
   13678:	mov	r3, #1
   1367c:	strb	r3, [sp]
   13680:	bl	11314 <__ctype_get_mb_cur_max@plt>
   13684:	mov	r1, r0
   13688:	mov	r0, r6
   1368c:	bl	1fedc <__assert_fail@plt+0xe9c4>
   13690:	mov	r3, r5
   13694:	mov	r1, r6
   13698:	mov	r2, r0
   1369c:	mov	r0, r7
   136a0:	bl	13358 <__assert_fail@plt+0x1e40>
   136a4:	cmn	r0, #1
   136a8:	str	r0, [sp, #20]
   136ac:	bne	136c0 <__assert_fail@plt+0x21a8>
   136b0:	mov	r3, #1
   136b4:	str	r3, [sp, #20]
   136b8:	mov	r3, #0
   136bc:	b	1362c <__assert_fail@plt+0x2114>
   136c0:	cmn	r0, #2
   136c4:	bne	136d8 <__assert_fail@plt+0x21c0>
   136c8:	ldr	r0, [sp, #16]
   136cc:	bl	113c8 <strlen@plt>
   136d0:	str	r0, [sp, #20]
   136d4:	b	136b8 <__assert_fail@plt+0x21a0>
   136d8:	cmp	r0, #0
   136dc:	bne	13724 <__assert_fail@plt+0x220c>
   136e0:	mov	r3, #1
   136e4:	str	r3, [sp, #20]
   136e8:	ldr	r3, [sp, #16]
   136ec:	ldrb	r3, [r3]
   136f0:	cmp	r3, #0
   136f4:	ldrne	r3, [pc, #124]	; 13778 <__assert_fail@plt+0x2260>
   136f8:	movne	r2, #171	; 0xab
   136fc:	ldrne	r1, [pc, #120]	; 1377c <__assert_fail@plt+0x2264>
   13700:	ldrne	r0, [pc, #124]	; 13784 <__assert_fail@plt+0x226c>
   13704:	bne	13674 <__assert_fail@plt+0x215c>
   13708:	ldr	r3, [sp, #28]
   1370c:	cmp	r3, #0
   13710:	ldrne	r3, [pc, #96]	; 13778 <__assert_fail@plt+0x2260>
   13714:	movne	r2, #172	; 0xac
   13718:	ldrne	r1, [pc, #92]	; 1377c <__assert_fail@plt+0x2264>
   1371c:	ldrne	r0, [pc, #100]	; 13788 <__assert_fail@plt+0x2270>
   13720:	bne	13674 <__assert_fail@plt+0x215c>
   13724:	mov	r3, #1
   13728:	mov	r0, r5
   1372c:	strb	r3, [sp, #24]
   13730:	bl	11284 <mbsinit@plt>
   13734:	cmp	r0, #0
   13738:	movne	r3, #0
   1373c:	strbne	r3, [sp]
   13740:	b	13630 <__assert_fail@plt+0x2118>
   13744:	mov	r0, r4
   13748:	bl	113c8 <strlen@plt>
   1374c:	mov	r4, r0
   13750:	b	13648 <__assert_fail@plt+0x2130>
   13754:	ldr	r3, [sp, #16]
   13758:	ldr	r2, [sp, #20]
   1375c:	add	r4, r4, #1
   13760:	add	r3, r3, r2
   13764:	str	r3, [sp, #16]
   13768:	mov	r3, #0
   1376c:	strb	r3, [sp, #12]
   13770:	b	135f0 <__assert_fail@plt+0x20d8>
   13774:	strdeq	r2, [r2], -r8
   13778:	andeq	r2, r2, fp, lsr #2
   1377c:	muleq	r2, lr, r5
   13780:	andeq	r1, r2, ip, lsr #11
   13784:	andeq	r1, r2, r3, asr #11
   13788:	ldrdeq	r1, [r2], -sl
   1378c:	push	{r4, r5, r6, lr}
   13790:	subs	r5, r0, #0
   13794:	bne	137ac <__assert_fail@plt+0x2294>
   13798:	ldr	r3, [pc, #124]	; 1381c <__assert_fail@plt+0x2304>
   1379c:	ldr	r0, [pc, #124]	; 13820 <__assert_fail@plt+0x2308>
   137a0:	ldr	r1, [r3]
   137a4:	bl	114e8 <fputs@plt>
   137a8:	bl	11500 <abort@plt>
   137ac:	mov	r1, #47	; 0x2f
   137b0:	bl	114a0 <strrchr@plt>
   137b4:	cmp	r0, #0
   137b8:	addne	r4, r0, #1
   137bc:	moveq	r4, r5
   137c0:	sub	r3, r4, r5
   137c4:	cmp	r3, #6
   137c8:	ble	13808 <__assert_fail@plt+0x22f0>
   137cc:	mov	r2, #7
   137d0:	ldr	r1, [pc, #76]	; 13824 <__assert_fail@plt+0x230c>
   137d4:	sub	r0, r4, #7
   137d8:	bl	114f4 <strncmp@plt>
   137dc:	cmp	r0, #0
   137e0:	bne	13808 <__assert_fail@plt+0x22f0>
   137e4:	mov	r2, #3
   137e8:	ldr	r1, [pc, #56]	; 13828 <__assert_fail@plt+0x2310>
   137ec:	mov	r0, r4
   137f0:	bl	114f4 <strncmp@plt>
   137f4:	cmp	r0, #0
   137f8:	movne	r5, r4
   137fc:	ldreq	r3, [pc, #40]	; 1382c <__assert_fail@plt+0x2314>
   13800:	addeq	r5, r4, #3
   13804:	streq	r5, [r3]
   13808:	ldr	r3, [pc, #32]	; 13830 <__assert_fail@plt+0x2318>
   1380c:	str	r5, [r3]
   13810:	ldr	r3, [pc, #28]	; 13834 <__assert_fail@plt+0x231c>
   13814:	str	r5, [r3]
   13818:	pop	{r4, r5, r6, pc}
   1381c:	andeq	r3, r3, r8, lsr #3
   13820:	andeq	r2, r2, lr, lsr r1
   13824:	andeq	r2, r2, r6, ror r1
   13828:	andeq	r2, r2, lr, ror r1
   1382c:	muleq	r3, r8, r1
   13830:	andeq	r3, r3, r4, asr #3
   13834:	muleq	r3, ip, r1
   13838:	push	{r4, r5, r6, lr}
   1383c:	mov	r2, #48	; 0x30
   13840:	mov	r5, r1
   13844:	mov	r1, #0
   13848:	mov	r4, r0
   1384c:	bl	1141c <memset@plt>
   13850:	cmp	r5, #10
   13854:	bne	1385c <__assert_fail@plt+0x2344>
   13858:	bl	11500 <abort@plt>
   1385c:	str	r5, [r4]
   13860:	mov	r0, r4
   13864:	pop	{r4, r5, r6, pc}
   13868:	push	{r4, r5, r6, lr}
   1386c:	mov	r4, r0
   13870:	mov	r5, r1
   13874:	bl	20f68 <__assert_fail@plt+0xfa50>
   13878:	ldrb	r3, [r0]
   1387c:	bic	r3, r3, #32
   13880:	cmp	r3, #85	; 0x55
   13884:	bne	138f4 <__assert_fail@plt+0x23dc>
   13888:	ldrb	r3, [r0, #1]
   1388c:	bic	r3, r3, #32
   13890:	cmp	r3, #84	; 0x54
   13894:	bne	138cc <__assert_fail@plt+0x23b4>
   13898:	ldrb	r3, [r0, #2]
   1389c:	bic	r3, r3, #32
   138a0:	cmp	r3, #70	; 0x46
   138a4:	bne	138cc <__assert_fail@plt+0x23b4>
   138a8:	ldrb	r3, [r0, #3]
   138ac:	cmp	r3, #45	; 0x2d
   138b0:	bne	138cc <__assert_fail@plt+0x23b4>
   138b4:	ldrb	r3, [r0, #4]
   138b8:	cmp	r3, #56	; 0x38
   138bc:	bne	138cc <__assert_fail@plt+0x23b4>
   138c0:	ldrb	r3, [r0, #5]
   138c4:	cmp	r3, #0
   138c8:	beq	138e0 <__assert_fail@plt+0x23c8>
   138cc:	ldr	r1, [pc, #144]	; 13964 <__assert_fail@plt+0x244c>
   138d0:	ldr	r0, [pc, #144]	; 13968 <__assert_fail@plt+0x2450>
   138d4:	cmp	r5, #9
   138d8:	movne	r0, r1
   138dc:	pop	{r4, r5, r6, pc}
   138e0:	ldrb	r3, [r4]
   138e4:	ldr	r1, [pc, #128]	; 1396c <__assert_fail@plt+0x2454>
   138e8:	ldr	r0, [pc, #128]	; 13970 <__assert_fail@plt+0x2458>
   138ec:	cmp	r3, #96	; 0x60
   138f0:	b	138d8 <__assert_fail@plt+0x23c0>
   138f4:	cmp	r3, #71	; 0x47
   138f8:	bne	138cc <__assert_fail@plt+0x23b4>
   138fc:	ldrb	r3, [r0, #1]
   13900:	bic	r3, r3, #32
   13904:	cmp	r3, #66	; 0x42
   13908:	bne	138cc <__assert_fail@plt+0x23b4>
   1390c:	ldrb	r3, [r0, #2]
   13910:	cmp	r3, #49	; 0x31
   13914:	bne	138cc <__assert_fail@plt+0x23b4>
   13918:	ldrb	r3, [r0, #3]
   1391c:	cmp	r3, #56	; 0x38
   13920:	bne	138cc <__assert_fail@plt+0x23b4>
   13924:	ldrb	r3, [r0, #4]
   13928:	cmp	r3, #48	; 0x30
   1392c:	bne	138cc <__assert_fail@plt+0x23b4>
   13930:	ldrb	r3, [r0, #5]
   13934:	cmp	r3, #51	; 0x33
   13938:	bne	138cc <__assert_fail@plt+0x23b4>
   1393c:	ldrb	r3, [r0, #6]
   13940:	cmp	r3, #48	; 0x30
   13944:	bne	138cc <__assert_fail@plt+0x23b4>
   13948:	ldrb	r3, [r0, #7]
   1394c:	cmp	r3, #0
   13950:	bne	138cc <__assert_fail@plt+0x23b4>
   13954:	ldrb	r3, [r4]
   13958:	ldr	r1, [pc, #20]	; 13974 <__assert_fail@plt+0x245c>
   1395c:	ldr	r0, [pc, #20]	; 13978 <__assert_fail@plt+0x2460>
   13960:	b	138ec <__assert_fail@plt+0x23d4>
   13964:	andeq	r1, r2, fp, ror pc
   13968:	andeq	r2, r2, r7, ror #3
   1396c:	ldrdeq	r2, [r2], -ip
   13970:	ldrdeq	r2, [r2], -r8
   13974:	andeq	r2, r2, r4, ror #3
   13978:	andeq	r2, r2, r0, ror #3
   1397c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13980:	sub	sp, sp, #108	; 0x6c
   13984:	mov	r8, r0
   13988:	str	r3, [sp, #36]	; 0x24
   1398c:	mov	r5, r1
   13990:	str	r2, [sp, #44]	; 0x2c
   13994:	ldr	sl, [sp, #144]	; 0x90
   13998:	bl	11314 <__ctype_get_mb_cur_max@plt>
   1399c:	ldr	r3, [sp, #148]	; 0x94
   139a0:	mov	r7, #0
   139a4:	str	r7, [sp, #48]	; 0x30
   139a8:	lsr	r6, r3, #1
   139ac:	and	r6, r6, #1
   139b0:	mov	r3, #1
   139b4:	str	r3, [sp, #72]	; 0x48
   139b8:	str	r7, [sp, #24]
   139bc:	str	r7, [sp, #32]
   139c0:	str	r7, [sp, #40]	; 0x28
   139c4:	str	r7, [sp, #60]	; 0x3c
   139c8:	str	r0, [sp, #76]	; 0x4c
   139cc:	cmp	sl, #10
   139d0:	ldrls	pc, [pc, sl, lsl #2]
   139d4:	b	13c10 <__assert_fail@plt+0x26f8>
   139d8:	andeq	r3, r1, r4, lsl #20
   139dc:	muleq	r1, r8, r6
   139e0:	ldrdeq	r3, [r1], -ip
   139e4:	andeq	r3, r1, r8, lsr #24
   139e8:			; <UNDEFINED> instruction: 0x00013bb8
   139ec:	andeq	r3, r1, r0, lsl sl
   139f0:	andeq	r4, r1, r8, ror r6
   139f4:	andeq	r3, r1, r4, lsl ip
   139f8:	andeq	r3, r1, r8, lsl #22
   139fc:	andeq	r3, r1, r8, lsl #22
   13a00:	andeq	r3, r1, r8, lsl #22
   13a04:	mov	r6, #0
   13a08:	mov	r4, #0
   13a0c:	b	13a3c <__assert_fail@plt+0x2524>
   13a10:	cmp	r6, #0
   13a14:	bne	13c38 <__assert_fail@plt+0x2720>
   13a18:	cmp	r5, #0
   13a1c:	movne	r3, #34	; 0x22
   13a20:	strbne	r3, [r8]
   13a24:	mov	r3, #1
   13a28:	str	r3, [sp, #24]
   13a2c:	str	r3, [sp, #32]
   13a30:	mov	r4, #1
   13a34:	ldr	r3, [pc, #3172]	; 146a0 <__assert_fail@plt+0x3188>
   13a38:	str	r3, [sp, #40]	; 0x28
   13a3c:	mov	r9, r5
   13a40:	mov	r3, #0
   13a44:	str	r7, [sp, #68]	; 0x44
   13a48:	str	r3, [sp, #28]
   13a4c:	ldr	r3, [sp, #36]	; 0x24
   13a50:	cmn	r3, #1
   13a54:	bne	145e4 <__assert_fail@plt+0x30cc>
   13a58:	ldr	r3, [sp, #44]	; 0x2c
   13a5c:	ldr	r2, [sp, #28]
   13a60:	ldrb	r3, [r3, r2]
   13a64:	adds	r3, r3, #0
   13a68:	movne	r3, #1
   13a6c:	str	r3, [sp, #52]	; 0x34
   13a70:	ldr	r3, [sp, #52]	; 0x34
   13a74:	cmp	r3, #0
   13a78:	bne	13c60 <__assert_fail@plt+0x2748>
   13a7c:	sub	r2, sl, #2
   13a80:	clz	r2, r2
   13a84:	lsr	r2, r2, #5
   13a88:	and	r3, r6, r2
   13a8c:	cmp	r4, #0
   13a90:	movne	r3, #0
   13a94:	andeq	r3, r3, #1
   13a98:	cmp	r3, #0
   13a9c:	bne	13e28 <__assert_fail@plt+0x2910>
   13aa0:	eor	r3, r6, #1
   13aa4:	ands	r2, r2, r3
   13aa8:	beq	1461c <__assert_fail@plt+0x3104>
   13aac:	ldr	r3, [sp, #68]	; 0x44
   13ab0:	cmp	r3, #0
   13ab4:	beq	14654 <__assert_fail@plt+0x313c>
   13ab8:	ldr	r3, [sp, #72]	; 0x48
   13abc:	cmp	r3, #0
   13ac0:	beq	145f8 <__assert_fail@plt+0x30e0>
   13ac4:	ldr	r3, [sp, #160]	; 0xa0
   13ac8:	ldr	r2, [sp, #44]	; 0x2c
   13acc:	str	r3, [sp, #16]
   13ad0:	ldr	r3, [sp, #156]	; 0x9c
   13ad4:	ldr	r1, [sp, #60]	; 0x3c
   13ad8:	str	r3, [sp, #12]
   13adc:	ldr	r3, [sp, #152]	; 0x98
   13ae0:	str	r3, [sp, #8]
   13ae4:	ldr	r3, [sp, #148]	; 0x94
   13ae8:	str	r3, [sp, #4]
   13aec:	mov	r3, #5
   13af0:	str	r3, [sp]
   13af4:	ldr	r3, [sp, #36]	; 0x24
   13af8:	mov	r0, r8
   13afc:	bl	1397c <__assert_fail@plt+0x2464>
   13b00:	mov	r4, r0
   13b04:	b	14648 <__assert_fail@plt+0x3130>
   13b08:	cmp	sl, #10
   13b0c:	beq	13b68 <__assert_fail@plt+0x2650>
   13b10:	ldr	r4, [pc, #2956]	; 146a4 <__assert_fail@plt+0x318c>
   13b14:	mov	r2, #5
   13b18:	mov	r1, r4
   13b1c:	mov	r0, #0
   13b20:	bl	112a8 <dcgettext@plt>
   13b24:	cmp	r0, r4
   13b28:	str	r0, [sp, #156]	; 0x9c
   13b2c:	bne	13b3c <__assert_fail@plt+0x2624>
   13b30:	mov	r1, sl
   13b34:	bl	13868 <__assert_fail@plt+0x2350>
   13b38:	str	r0, [sp, #156]	; 0x9c
   13b3c:	ldr	r4, [pc, #2916]	; 146a8 <__assert_fail@plt+0x3190>
   13b40:	mov	r2, #5
   13b44:	mov	r1, r4
   13b48:	mov	r0, #0
   13b4c:	bl	112a8 <dcgettext@plt>
   13b50:	cmp	r0, r4
   13b54:	str	r0, [sp, #160]	; 0xa0
   13b58:	bne	13b68 <__assert_fail@plt+0x2650>
   13b5c:	mov	r1, sl
   13b60:	bl	13868 <__assert_fail@plt+0x2350>
   13b64:	str	r0, [sp, #160]	; 0xa0
   13b68:	cmp	r6, #0
   13b6c:	moveq	r4, r6
   13b70:	beq	13b88 <__assert_fail@plt+0x2670>
   13b74:	mov	r4, #0
   13b78:	b	13b98 <__assert_fail@plt+0x2680>
   13b7c:	cmp	r5, r4
   13b80:	strbhi	r3, [r8, r4]
   13b84:	add	r4, r4, #1
   13b88:	ldr	r3, [sp, #156]	; 0x9c
   13b8c:	ldrb	r3, [r3, r4]
   13b90:	cmp	r3, #0
   13b94:	bne	13b7c <__assert_fail@plt+0x2664>
   13b98:	ldr	r0, [sp, #160]	; 0xa0
   13b9c:	bl	113c8 <strlen@plt>
   13ba0:	ldr	r3, [sp, #160]	; 0xa0
   13ba4:	str	r3, [sp, #40]	; 0x28
   13ba8:	mov	r3, #1
   13bac:	str	r3, [sp, #24]
   13bb0:	str	r0, [sp, #32]
   13bb4:	b	13a3c <__assert_fail@plt+0x2524>
   13bb8:	mov	r3, #1
   13bbc:	cmp	r6, #0
   13bc0:	streq	r3, [sp, #24]
   13bc4:	beq	13be4 <__assert_fail@plt+0x26cc>
   13bc8:	str	r3, [sp, #32]
   13bcc:	ldr	r3, [pc, #2772]	; 146a8 <__assert_fail@plt+0x3190>
   13bd0:	mov	r4, #0
   13bd4:	str	r3, [sp, #40]	; 0x28
   13bd8:	b	13c08 <__assert_fail@plt+0x26f0>
   13bdc:	cmp	r6, #0
   13be0:	bne	13c50 <__assert_fail@plt+0x2738>
   13be4:	cmp	r5, #0
   13be8:	movne	r3, #39	; 0x27
   13bec:	strbne	r3, [r8]
   13bf0:	mov	r3, #1
   13bf4:	str	r3, [sp, #32]
   13bf8:	mov	r6, #0
   13bfc:	ldr	r3, [pc, #2724]	; 146a8 <__assert_fail@plt+0x3190>
   13c00:	mov	r4, #1
   13c04:	str	r3, [sp, #40]	; 0x28
   13c08:	mov	sl, #2
   13c0c:	b	13a3c <__assert_fail@plt+0x2524>
   13c10:	bl	11500 <abort@plt>
   13c14:	mov	r6, #0
   13c18:	mov	r3, #1
   13c1c:	str	r3, [sp, #24]
   13c20:	mov	r4, r6
   13c24:	b	13a3c <__assert_fail@plt+0x2524>
   13c28:	mov	r6, #1
   13c2c:	str	r6, [sp, #24]
   13c30:	str	r6, [sp, #32]
   13c34:	b	13bcc <__assert_fail@plt+0x26b4>
   13c38:	mov	r3, #1
   13c3c:	str	r3, [sp, #32]
   13c40:	ldr	r3, [pc, #2648]	; 146a0 <__assert_fail@plt+0x3188>
   13c44:	str	r6, [sp, #24]
   13c48:	str	r3, [sp, #40]	; 0x28
   13c4c:	b	13a08 <__assert_fail@plt+0x24f0>
   13c50:	mov	r3, #1
   13c54:	str	r3, [sp, #32]
   13c58:	ldr	r3, [pc, #2632]	; 146a8 <__assert_fail@plt+0x3190>
   13c5c:	b	13c48 <__assert_fail@plt+0x2730>
   13c60:	ldr	r3, [sp, #32]
   13c64:	ldr	fp, [sp, #24]
   13c68:	cmp	sl, #2
   13c6c:	moveq	fp, #0
   13c70:	andne	fp, fp, #1
   13c74:	adds	r5, r3, #0
   13c78:	movne	r5, #1
   13c7c:	ands	r3, r5, fp
   13c80:	str	r3, [sp, #64]	; 0x40
   13c84:	beq	13d54 <__assert_fail@plt+0x283c>
   13c88:	ldr	r2, [sp, #32]
   13c8c:	ldr	r3, [sp, #28]
   13c90:	add	r7, r3, r2
   13c94:	mov	r3, r2
   13c98:	ldr	r2, [sp, #36]	; 0x24
   13c9c:	cmp	r3, #1
   13ca0:	movls	r3, #0
   13ca4:	movhi	r3, #1
   13ca8:	cmn	r2, #1
   13cac:	movne	r3, #0
   13cb0:	cmp	r3, #0
   13cb4:	beq	13cc4 <__assert_fail@plt+0x27ac>
   13cb8:	ldr	r0, [sp, #44]	; 0x2c
   13cbc:	bl	113c8 <strlen@plt>
   13cc0:	str	r0, [sp, #36]	; 0x24
   13cc4:	ldr	r3, [sp, #36]	; 0x24
   13cc8:	cmp	r3, r7
   13ccc:	bcc	13d4c <__assert_fail@plt+0x2834>
   13cd0:	ldr	r3, [sp, #44]	; 0x2c
   13cd4:	ldr	r0, [sp, #28]
   13cd8:	ldr	r2, [sp, #32]
   13cdc:	ldr	r1, [sp, #40]	; 0x28
   13ce0:	add	r0, r3, r0
   13ce4:	bl	11290 <memcmp@plt>
   13ce8:	cmp	r0, #0
   13cec:	bne	13d4c <__assert_fail@plt+0x2834>
   13cf0:	cmp	r6, #0
   13cf4:	beq	13d54 <__assert_fail@plt+0x283c>
   13cf8:	str	r6, [sp, #24]
   13cfc:	ldr	r3, [sp, #24]
   13d00:	ldr	r2, [sp, #44]	; 0x2c
   13d04:	cmp	sl, #2
   13d08:	movne	r3, #0
   13d0c:	andeq	r3, r3, #1
   13d10:	cmp	r3, #0
   13d14:	ldr	r3, [sp, #160]	; 0xa0
   13d18:	movne	sl, #4
   13d1c:	str	r3, [sp, #16]
   13d20:	ldr	r3, [sp, #156]	; 0x9c
   13d24:	str	sl, [sp]
   13d28:	str	r3, [sp, #12]
   13d2c:	mov	r3, #0
   13d30:	str	r3, [sp, #8]
   13d34:	ldr	r3, [sp, #148]	; 0x94
   13d38:	mov	r1, r9
   13d3c:	bic	r3, r3, #2
   13d40:	str	r3, [sp, #4]
   13d44:	ldr	r3, [sp, #36]	; 0x24
   13d48:	b	13af8 <__assert_fail@plt+0x25e0>
   13d4c:	mov	r3, #0
   13d50:	str	r3, [sp, #64]	; 0x40
   13d54:	ldr	r2, [sp, #28]
   13d58:	ldr	r3, [sp, #44]	; 0x2c
   13d5c:	add	r3, r3, r2
   13d60:	str	r3, [sp, #80]	; 0x50
   13d64:	ldr	r3, [sp, #44]	; 0x2c
   13d68:	ldrb	r7, [r3, r2]
   13d6c:	cmp	r7, #58	; 0x3a
   13d70:	bhi	13ed8 <__assert_fail@plt+0x29c0>
   13d74:	cmp	r7, #43	; 0x2b
   13d78:	bcs	13f2c <__assert_fail@plt+0x2a14>
   13d7c:	cmp	r7, #32
   13d80:	beq	13f84 <__assert_fail@plt+0x2a6c>
   13d84:	bhi	13e30 <__assert_fail@plt+0x2918>
   13d88:	cmp	r7, #9
   13d8c:	beq	14238 <__assert_fail@plt+0x2d20>
   13d90:	bhi	13df4 <__assert_fail@plt+0x28dc>
   13d94:	cmp	r7, #7
   13d98:	beq	142e4 <__assert_fail@plt+0x2dcc>
   13d9c:	bhi	13fa0 <__assert_fail@plt+0x2a88>
   13da0:	cmp	r7, #0
   13da4:	beq	13fbc <__assert_fail@plt+0x2aa4>
   13da8:	ldr	r3, [sp, #76]	; 0x4c
   13dac:	cmp	r3, #1
   13db0:	bne	14328 <__assert_fail@plt+0x2e10>
   13db4:	bl	113b0 <__ctype_b_loc@plt>
   13db8:	sxth	r3, r7
   13dbc:	lsl	r3, r3, #1
   13dc0:	ldr	r2, [r0]
   13dc4:	ldrh	r5, [r2, r3]
   13dc8:	ldr	r3, [sp, #76]	; 0x4c
   13dcc:	str	r3, [sp, #56]	; 0x38
   13dd0:	lsr	r5, r5, #14
   13dd4:	and	r5, r5, #1
   13dd8:	ldr	r3, [sp, #24]
   13ddc:	eor	fp, r5, #1
   13de0:	and	fp, fp, r3
   13de4:	ands	fp, fp, #255	; 0xff
   13de8:	beq	14170 <__assert_fail@plt+0x2c58>
   13dec:	mov	r5, #0
   13df0:	b	143d4 <__assert_fail@plt+0x2ebc>
   13df4:	cmp	r7, #11
   13df8:	beq	14240 <__assert_fail@plt+0x2d28>
   13dfc:	bcc	142dc <__assert_fail@plt+0x2dc4>
   13e00:	cmp	r7, #12
   13e04:	beq	142ec <__assert_fail@plt+0x2dd4>
   13e08:	cmp	r7, #13
   13e0c:	moveq	r3, #114	; 0x72
   13e10:	bne	13da8 <__assert_fail@plt+0x2890>
   13e14:	cmp	sl, #2
   13e18:	movne	r2, #0
   13e1c:	andeq	r2, r6, #1
   13e20:	cmp	r2, #0
   13e24:	beq	13fa4 <__assert_fail@plt+0x2a8c>
   13e28:	mov	sl, #2
   13e2c:	b	13cfc <__assert_fail@plt+0x27e4>
   13e30:	cmp	r7, #37	; 0x25
   13e34:	beq	13f2c <__assert_fail@plt+0x2a14>
   13e38:	bhi	13e4c <__assert_fail@plt+0x2934>
   13e3c:	cmp	r7, #35	; 0x23
   13e40:	beq	13f78 <__assert_fail@plt+0x2a60>
   13e44:	mov	r5, #0
   13e48:	b	13f88 <__assert_fail@plt+0x2a70>
   13e4c:	cmp	r7, #39	; 0x27
   13e50:	bne	13e44 <__assert_fail@plt+0x292c>
   13e54:	cmp	sl, #2
   13e58:	ldrne	r5, [sp, #52]	; 0x34
   13e5c:	movne	r3, r5
   13e60:	strne	r3, [sp, #68]	; 0x44
   13e64:	bne	13f30 <__assert_fail@plt+0x2a18>
   13e68:	cmp	r6, #0
   13e6c:	bne	13cfc <__assert_fail@plt+0x27e4>
   13e70:	ldr	r2, [sp, #60]	; 0x3c
   13e74:	adds	r3, r9, #0
   13e78:	movne	r3, #1
   13e7c:	cmp	r2, #0
   13e80:	movne	r3, #0
   13e84:	cmp	r3, #0
   13e88:	strne	r9, [sp, #60]	; 0x3c
   13e8c:	movne	r9, #0
   13e90:	bne	13ea0 <__assert_fail@plt+0x2988>
   13e94:	cmp	r9, r4
   13e98:	movhi	r3, #39	; 0x27
   13e9c:	strbhi	r3, [r8, r4]
   13ea0:	add	r3, r4, #1
   13ea4:	cmp	r3, r9
   13ea8:	movcc	r2, #92	; 0x5c
   13eac:	strbcc	r2, [r8, r3]
   13eb0:	add	r3, r4, #2
   13eb4:	cmp	r3, r9
   13eb8:	ldr	r5, [sp, #52]	; 0x34
   13ebc:	movcc	r2, #39	; 0x27
   13ec0:	strbcc	r2, [r8, r3]
   13ec4:	add	r4, r4, #3
   13ec8:	mov	fp, r6
   13ecc:	str	r5, [sp, #68]	; 0x44
   13ed0:	str	r6, [sp, #48]	; 0x30
   13ed4:	b	14170 <__assert_fail@plt+0x2c58>
   13ed8:	cmp	r7, #94	; 0x5e
   13edc:	beq	13e44 <__assert_fail@plt+0x292c>
   13ee0:	bhi	13f38 <__assert_fail@plt+0x2a20>
   13ee4:	cmp	r7, #90	; 0x5a
   13ee8:	bhi	13f20 <__assert_fail@plt+0x2a08>
   13eec:	cmp	r7, #65	; 0x41
   13ef0:	bcs	13f2c <__assert_fail@plt+0x2a14>
   13ef4:	cmp	r7, #62	; 0x3e
   13ef8:	bls	13e44 <__assert_fail@plt+0x292c>
   13efc:	cmp	r7, #63	; 0x3f
   13f00:	bne	13da8 <__assert_fail@plt+0x2890>
   13f04:	cmp	sl, #2
   13f08:	beq	140ac <__assert_fail@plt+0x2b94>
   13f0c:	cmp	sl, #5
   13f10:	beq	140bc <__assert_fail@plt+0x2ba4>
   13f14:	mov	fp, #0
   13f18:	mov	r5, fp
   13f1c:	b	14170 <__assert_fail@plt+0x2c58>
   13f20:	cmp	r7, #92	; 0x5c
   13f24:	beq	14248 <__assert_fail@plt+0x2d30>
   13f28:	bls	13e44 <__assert_fail@plt+0x292c>
   13f2c:	ldr	r5, [sp, #52]	; 0x34
   13f30:	mov	fp, #0
   13f34:	b	14170 <__assert_fail@plt+0x2c58>
   13f38:	cmp	r7, #122	; 0x7a
   13f3c:	bhi	13f5c <__assert_fail@plt+0x2a44>
   13f40:	cmp	r7, #97	; 0x61
   13f44:	bcs	13f2c <__assert_fail@plt+0x2a14>
   13f48:	cmp	r7, #95	; 0x5f
   13f4c:	beq	13f2c <__assert_fail@plt+0x2a14>
   13f50:	cmp	r7, #96	; 0x60
   13f54:	bne	13da8 <__assert_fail@plt+0x2890>
   13f58:	b	13e44 <__assert_fail@plt+0x292c>
   13f5c:	cmp	r7, #124	; 0x7c
   13f60:	beq	13e44 <__assert_fail@plt+0x292c>
   13f64:	bcc	142f4 <__assert_fail@plt+0x2ddc>
   13f68:	cmp	r7, #125	; 0x7d
   13f6c:	beq	142f4 <__assert_fail@plt+0x2ddc>
   13f70:	cmp	r7, #126	; 0x7e
   13f74:	bne	13da8 <__assert_fail@plt+0x2890>
   13f78:	ldr	r3, [sp, #28]
   13f7c:	cmp	r3, #0
   13f80:	bne	140b4 <__assert_fail@plt+0x2b9c>
   13f84:	ldr	r5, [sp, #52]	; 0x34
   13f88:	cmp	sl, #2
   13f8c:	movne	fp, #0
   13f90:	andeq	fp, r6, #1
   13f94:	cmp	fp, #0
   13f98:	beq	14170 <__assert_fail@plt+0x2c58>
   13f9c:	b	13e28 <__assert_fail@plt+0x2910>
   13fa0:	mov	r3, #98	; 0x62
   13fa4:	ldr	r2, [sp, #24]
   13fa8:	cmp	r2, #0
   13fac:	beq	140b4 <__assert_fail@plt+0x2b9c>
   13fb0:	mov	r7, r3
   13fb4:	mov	r5, #0
   13fb8:	b	141c8 <__assert_fail@plt+0x2cb0>
   13fbc:	ldr	r3, [sp, #24]
   13fc0:	cmp	r3, #0
   13fc4:	beq	14090 <__assert_fail@plt+0x2b78>
   13fc8:	cmp	r6, #0
   13fcc:	bne	13cf8 <__assert_fail@plt+0x27e0>
   13fd0:	ldr	r3, [sp, #48]	; 0x30
   13fd4:	eor	r2, r3, #1
   13fd8:	cmp	sl, #2
   13fdc:	movne	r2, #0
   13fe0:	andeq	r2, r2, #1
   13fe4:	cmp	r2, #0
   13fe8:	moveq	r3, r4
   13fec:	beq	14024 <__assert_fail@plt+0x2b0c>
   13ff0:	cmp	r9, r4
   13ff4:	movhi	r3, #39	; 0x27
   13ff8:	strbhi	r3, [r8, r4]
   13ffc:	add	r3, r4, #1
   14000:	cmp	r9, r3
   14004:	movhi	r1, #36	; 0x24
   14008:	strbhi	r1, [r8, r3]
   1400c:	add	r3, r4, #2
   14010:	cmp	r9, r3
   14014:	movhi	r1, #39	; 0x27
   14018:	strbhi	r1, [r8, r3]
   1401c:	add	r3, r4, #3
   14020:	str	r2, [sp, #48]	; 0x30
   14024:	cmp	r9, r3
   14028:	movhi	r2, #92	; 0x5c
   1402c:	strbhi	r2, [r8, r3]
   14030:	cmp	fp, #0
   14034:	add	r4, r3, #1
   14038:	beq	145c8 <__assert_fail@plt+0x30b0>
   1403c:	ldr	r2, [sp, #28]
   14040:	ldr	r1, [sp, #36]	; 0x24
   14044:	add	r2, r2, #1
   14048:	cmp	r1, r2
   1404c:	bls	14088 <__assert_fail@plt+0x2b70>
   14050:	ldr	r1, [sp, #44]	; 0x2c
   14054:	mov	r7, #48	; 0x30
   14058:	ldrb	r2, [r1, r2]
   1405c:	sub	r2, r2, #48	; 0x30
   14060:	cmp	r2, #9
   14064:	movhi	r5, r6
   14068:	bhi	14170 <__assert_fail@plt+0x2c58>
   1406c:	cmp	r9, r4
   14070:	add	r2, r3, #2
   14074:	strbhi	r7, [r8, r4]
   14078:	cmp	r9, r2
   1407c:	add	r4, r3, #3
   14080:	movhi	r1, #48	; 0x30
   14084:	strbhi	r1, [r8, r2]
   14088:	mov	r5, r6
   1408c:	b	145d0 <__assert_fail@plt+0x30b8>
   14090:	ldr	r3, [sp, #148]	; 0x94
   14094:	tst	r3, #1
   14098:	ldreq	r5, [sp, #24]
   1409c:	beq	145dc <__assert_fail@plt+0x30c4>
   140a0:	ldr	r3, [sp, #28]
   140a4:	add	r3, r3, #1
   140a8:	b	13a48 <__assert_fail@plt+0x2530>
   140ac:	cmp	r6, #0
   140b0:	bne	13cfc <__assert_fail@plt+0x27e4>
   140b4:	mov	r5, #0
   140b8:	b	13f30 <__assert_fail@plt+0x2a18>
   140bc:	ldr	r3, [sp, #148]	; 0x94
   140c0:	tst	r3, #4
   140c4:	beq	140b4 <__assert_fail@plt+0x2b9c>
   140c8:	ldr	r3, [sp, #28]
   140cc:	add	r2, r3, #2
   140d0:	ldr	r3, [sp, #36]	; 0x24
   140d4:	cmp	r3, r2
   140d8:	bls	140b4 <__assert_fail@plt+0x2b9c>
   140dc:	ldr	r3, [sp, #44]	; 0x2c
   140e0:	ldr	r1, [sp, #28]
   140e4:	add	r3, r3, r1
   140e8:	ldrb	r0, [r3, #1]
   140ec:	cmp	r0, #63	; 0x3f
   140f0:	bne	140b4 <__assert_fail@plt+0x2b9c>
   140f4:	ldr	r3, [sp, #44]	; 0x2c
   140f8:	ldrb	r1, [r3, r2]
   140fc:	sub	r3, r1, #33	; 0x21
   14100:	uxtb	r3, r3
   14104:	cmp	r3, #29
   14108:	bhi	145d8 <__assert_fail@plt+0x30c0>
   1410c:	mov	ip, #1
   14110:	ldr	r5, [pc, #1428]	; 146ac <__assert_fail@plt+0x3194>
   14114:	ands	r5, r5, ip, lsl r3
   14118:	beq	13f30 <__assert_fail@plt+0x2a18>
   1411c:	cmp	r6, #0
   14120:	bne	13cfc <__assert_fail@plt+0x27e4>
   14124:	add	r3, r4, #1
   14128:	cmp	r9, r4
   1412c:	strbhi	r0, [r8, r4]
   14130:	cmp	r9, r3
   14134:	movhi	r0, #34	; 0x22
   14138:	strbhi	r0, [r8, r3]
   1413c:	add	r3, r4, #2
   14140:	cmp	r9, r3
   14144:	movhi	r0, #34	; 0x22
   14148:	strbhi	r0, [r8, r3]
   1414c:	add	r3, r4, #3
   14150:	cmp	r9, r3
   14154:	add	r4, r4, #4
   14158:	mov	r5, r6
   1415c:	mov	fp, r6
   14160:	mov	r7, r1
   14164:	movhi	r0, #63	; 0x3f
   14168:	strbhi	r0, [r8, r3]
   1416c:	str	r2, [sp, #28]
   14170:	ldr	r3, [sp, #24]
   14174:	eor	r3, r3, #1
   14178:	cmp	sl, #2
   1417c:	orreq	r3, r3, #1
   14180:	eor	r3, r3, #1
   14184:	orr	r3, r6, r3
   14188:	tst	r3, #255	; 0xff
   1418c:	beq	141bc <__assert_fail@plt+0x2ca4>
   14190:	ldr	r3, [sp, #152]	; 0x98
   14194:	cmp	r3, #0
   14198:	beq	141bc <__assert_fail@plt+0x2ca4>
   1419c:	lsr	r2, r7, #5
   141a0:	ldr	r1, [sp, #152]	; 0x98
   141a4:	uxtb	r2, r2
   141a8:	and	r3, r7, #31
   141ac:	ldr	r2, [r1, r2, lsl #2]
   141b0:	lsr	r3, r2, r3
   141b4:	tst	r3, #1
   141b8:	bne	141c8 <__assert_fail@plt+0x2cb0>
   141bc:	ldr	r3, [sp, #64]	; 0x40
   141c0:	cmp	r3, #0
   141c4:	beq	14260 <__assert_fail@plt+0x2d48>
   141c8:	cmp	r6, #0
   141cc:	bne	13cfc <__assert_fail@plt+0x27e4>
   141d0:	ldr	r3, [sp, #48]	; 0x30
   141d4:	eor	r3, r3, #1
   141d8:	cmp	sl, #2
   141dc:	movne	r3, #0
   141e0:	andeq	r3, r3, #1
   141e4:	cmp	r3, #0
   141e8:	beq	14220 <__assert_fail@plt+0x2d08>
   141ec:	cmp	r9, r4
   141f0:	movhi	r2, #39	; 0x27
   141f4:	strbhi	r2, [r8, r4]
   141f8:	add	r2, r4, #1
   141fc:	cmp	r9, r2
   14200:	movhi	r1, #36	; 0x24
   14204:	strbhi	r1, [r8, r2]
   14208:	add	r2, r4, #2
   1420c:	cmp	r9, r2
   14210:	add	r4, r4, #3
   14214:	movhi	r1, #39	; 0x27
   14218:	strbhi	r1, [r8, r2]
   1421c:	str	r3, [sp, #48]	; 0x30
   14220:	cmp	r9, r4
   14224:	movhi	r3, #92	; 0x5c
   14228:	strbhi	r3, [r8, r4]
   1422c:	ldr	fp, [sp, #52]	; 0x34
   14230:	add	r4, r4, #1
   14234:	b	14260 <__assert_fail@plt+0x2d48>
   14238:	mov	r3, #116	; 0x74
   1423c:	b	13e14 <__assert_fail@plt+0x28fc>
   14240:	mov	r3, #118	; 0x76
   14244:	b	13fa4 <__assert_fail@plt+0x2a8c>
   14248:	cmp	sl, #2
   1424c:	bne	142bc <__assert_fail@plt+0x2da4>
   14250:	cmp	r6, #0
   14254:	bne	13cfc <__assert_fail@plt+0x27e4>
   14258:	mov	r5, r6
   1425c:	mov	fp, r6
   14260:	ldr	r3, [sp, #48]	; 0x30
   14264:	eor	fp, fp, #1
   14268:	and	fp, fp, r3
   1426c:	tst	fp, #255	; 0xff
   14270:	beq	1429c <__assert_fail@plt+0x2d84>
   14274:	cmp	r9, r4
   14278:	movhi	r3, #39	; 0x27
   1427c:	strbhi	r3, [r8, r4]
   14280:	add	r3, r4, #1
   14284:	cmp	r9, r3
   14288:	movhi	r2, #39	; 0x27
   1428c:	add	r4, r4, #2
   14290:	strbhi	r2, [r8, r3]
   14294:	mov	r3, #0
   14298:	str	r3, [sp, #48]	; 0x30
   1429c:	cmp	r9, r4
   142a0:	strbhi	r7, [r8, r4]
   142a4:	ldr	r3, [sp, #72]	; 0x48
   142a8:	cmp	r5, #0
   142ac:	moveq	r3, #0
   142b0:	add	r4, r4, #1
   142b4:	str	r3, [sp, #72]	; 0x48
   142b8:	b	140a0 <__assert_fail@plt+0x2b88>
   142bc:	ldr	r3, [sp, #24]
   142c0:	and	r3, r3, r6
   142c4:	tst	r5, r3
   142c8:	moveq	r3, r7
   142cc:	beq	13e14 <__assert_fail@plt+0x28fc>
   142d0:	mov	fp, #0
   142d4:	mov	r5, fp
   142d8:	b	14260 <__assert_fail@plt+0x2d48>
   142dc:	mov	r3, #110	; 0x6e
   142e0:	b	13e14 <__assert_fail@plt+0x28fc>
   142e4:	mov	r3, #97	; 0x61
   142e8:	b	13fa4 <__assert_fail@plt+0x2a8c>
   142ec:	mov	r3, #102	; 0x66
   142f0:	b	13fa4 <__assert_fail@plt+0x2a8c>
   142f4:	ldr	r3, [sp, #36]	; 0x24
   142f8:	cmn	r3, #1
   142fc:	bne	1431c <__assert_fail@plt+0x2e04>
   14300:	ldr	r3, [sp, #44]	; 0x2c
   14304:	ldrb	r3, [r3, #1]
   14308:	adds	r3, r3, #0
   1430c:	movne	r3, #1
   14310:	cmp	r3, #0
   14314:	bne	140b4 <__assert_fail@plt+0x2b9c>
   14318:	b	13f78 <__assert_fail@plt+0x2a60>
   1431c:	ldr	r3, [sp, #36]	; 0x24
   14320:	subs	r3, r3, #1
   14324:	b	1430c <__assert_fail@plt+0x2df4>
   14328:	mov	r3, #0
   1432c:	str	r3, [sp, #96]	; 0x60
   14330:	str	r3, [sp, #100]	; 0x64
   14334:	ldr	r3, [sp, #36]	; 0x24
   14338:	cmn	r3, #1
   1433c:	bne	1434c <__assert_fail@plt+0x2e34>
   14340:	ldr	r0, [sp, #44]	; 0x2c
   14344:	bl	113c8 <strlen@plt>
   14348:	str	r0, [sp, #36]	; 0x24
   1434c:	ldr	r5, [sp, #52]	; 0x34
   14350:	mov	r3, #0
   14354:	str	r3, [sp, #56]	; 0x38
   14358:	ldr	r3, [sp, #28]
   1435c:	ldr	r2, [sp, #56]	; 0x38
   14360:	ldr	r1, [sp, #36]	; 0x24
   14364:	add	r2, r3, r2
   14368:	ldr	r3, [sp, #44]	; 0x2c
   1436c:	add	r0, sp, #92	; 0x5c
   14370:	add	fp, r3, r2
   14374:	sub	r2, r1, r2
   14378:	add	r3, sp, #96	; 0x60
   1437c:	mov	r1, fp
   14380:	bl	13358 <__assert_fail@plt+0x1e40>
   14384:	subs	r2, r0, #0
   14388:	beq	143c8 <__assert_fail@plt+0x2eb0>
   1438c:	cmn	r2, #1
   14390:	beq	145a0 <__assert_fail@plt+0x3088>
   14394:	cmn	r2, #2
   14398:	bne	14510 <__assert_fail@plt+0x2ff8>
   1439c:	ldr	r2, [sp, #56]	; 0x38
   143a0:	ldr	r3, [sp, #28]
   143a4:	add	r3, r3, r2
   143a8:	ldr	r2, [sp, #36]	; 0x24
   143ac:	cmp	r2, r3
   143b0:	bls	145a0 <__assert_fail@plt+0x3088>
   143b4:	ldr	r3, [sp, #80]	; 0x50
   143b8:	ldr	r2, [sp, #56]	; 0x38
   143bc:	ldrb	r5, [r3, r2]
   143c0:	cmp	r5, #0
   143c4:	bne	14500 <__assert_fail@plt+0x2fe8>
   143c8:	ldr	r3, [sp, #56]	; 0x38
   143cc:	cmp	r3, #1
   143d0:	bls	13dd8 <__assert_fail@plt+0x28c0>
   143d4:	ldr	r2, [sp, #56]	; 0x38
   143d8:	ldr	r3, [sp, #28]
   143dc:	mov	fp, #0
   143e0:	add	r3, r3, r2
   143e4:	ldr	r2, [sp, #24]
   143e8:	str	r3, [sp, #52]	; 0x34
   143ec:	eor	r3, r5, #1
   143f0:	and	r3, r3, r2
   143f4:	mov	ip, #92	; 0x5c
   143f8:	uxtb	r3, r3
   143fc:	mov	r2, #39	; 0x27
   14400:	cmp	r3, #0
   14404:	beq	145a8 <__assert_fail@plt+0x3090>
   14408:	cmp	r6, #0
   1440c:	bne	13cf8 <__assert_fail@plt+0x27e0>
   14410:	ldr	r1, [sp, #48]	; 0x30
   14414:	eor	r1, r1, #1
   14418:	cmp	sl, #2
   1441c:	movne	r1, #0
   14420:	andeq	r1, r1, #1
   14424:	cmp	r1, #0
   14428:	beq	14458 <__assert_fail@plt+0x2f40>
   1442c:	add	r0, r4, #1
   14430:	cmp	r9, r4
   14434:	strbhi	r2, [r8, r4]
   14438:	cmp	r9, r0
   1443c:	movhi	lr, #36	; 0x24
   14440:	strbhi	lr, [r8, r0]
   14444:	add	r0, r4, #2
   14448:	add	r4, r4, #3
   1444c:	cmp	r9, r0
   14450:	strbhi	r2, [r8, r0]
   14454:	str	r1, [sp, #48]	; 0x30
   14458:	add	r0, r4, #1
   1445c:	cmp	r9, r4
   14460:	strbhi	ip, [r8, r4]
   14464:	cmp	r9, r0
   14468:	lsrhi	r1, r7, #6
   1446c:	addhi	r1, r1, #48	; 0x30
   14470:	strbhi	r1, [r8, r0]
   14474:	add	r0, r4, #2
   14478:	cmp	r9, r0
   1447c:	lsrhi	r1, r7, #3
   14480:	and	r7, r7, #7
   14484:	andhi	r1, r1, #7
   14488:	add	r4, r4, #3
   1448c:	add	r7, r7, #48	; 0x30
   14490:	mov	fp, r3
   14494:	addhi	r1, r1, #48	; 0x30
   14498:	strbhi	r1, [r8, r0]
   1449c:	ldr	r1, [sp, #28]
   144a0:	ldr	r0, [sp, #52]	; 0x34
   144a4:	add	r1, r1, #1
   144a8:	cmp	r0, r1
   144ac:	bls	14260 <__assert_fail@plt+0x2d48>
   144b0:	ldr	lr, [sp, #48]	; 0x30
   144b4:	eor	r0, fp, #1
   144b8:	and	r0, r0, lr
   144bc:	tst	r0, #255	; 0xff
   144c0:	beq	144e4 <__assert_fail@plt+0x2fcc>
   144c4:	add	r0, r4, #1
   144c8:	cmp	r9, r4
   144cc:	strbhi	r2, [r8, r4]
   144d0:	cmp	r9, r0
   144d4:	add	r4, r4, #2
   144d8:	strbhi	r2, [r8, r0]
   144dc:	mov	r0, #0
   144e0:	str	r0, [sp, #48]	; 0x30
   144e4:	ldr	r0, [sp, #44]	; 0x2c
   144e8:	cmp	r9, r4
   144ec:	strbhi	r7, [r8, r4]
   144f0:	str	r1, [sp, #28]
   144f4:	add	r4, r4, #1
   144f8:	ldrb	r7, [r0, r1]
   144fc:	b	14400 <__assert_fail@plt+0x2ee8>
   14500:	ldr	r3, [sp, #56]	; 0x38
   14504:	add	r3, r3, #1
   14508:	str	r3, [sp, #56]	; 0x38
   1450c:	b	1439c <__assert_fail@plt+0x2e84>
   14510:	cmp	sl, #2
   14514:	movne	r3, #0
   14518:	andeq	r3, r6, #1
   1451c:	cmp	r3, #0
   14520:	movne	r1, #1
   14524:	bne	14580 <__assert_fail@plt+0x3068>
   14528:	ldr	r0, [sp, #92]	; 0x5c
   1452c:	str	r2, [sp, #84]	; 0x54
   14530:	bl	112fc <iswprint@plt>
   14534:	ldr	r3, [sp, #56]	; 0x38
   14538:	ldr	r2, [sp, #84]	; 0x54
   1453c:	add	r3, r3, r2
   14540:	str	r3, [sp, #56]	; 0x38
   14544:	cmp	r0, #0
   14548:	add	r0, sp, #96	; 0x60
   1454c:	moveq	r5, #0
   14550:	bl	11284 <mbsinit@plt>
   14554:	cmp	r0, #0
   14558:	beq	14358 <__assert_fail@plt+0x2e40>
   1455c:	b	143c8 <__assert_fail@plt+0x2eb0>
   14560:	ldrb	r3, [fp, r1]
   14564:	cmp	r3, #94	; 0x5e
   14568:	beq	13e28 <__assert_fail@plt+0x2910>
   1456c:	bhi	1458c <__assert_fail@plt+0x3074>
   14570:	sub	r3, r3, #91	; 0x5b
   14574:	cmp	r3, #1
   14578:	bls	13e28 <__assert_fail@plt+0x2910>
   1457c:	add	r1, r1, #1
   14580:	cmp	r1, r2
   14584:	bne	14560 <__assert_fail@plt+0x3048>
   14588:	b	14528 <__assert_fail@plt+0x3010>
   1458c:	cmp	r3, #96	; 0x60
   14590:	beq	13e28 <__assert_fail@plt+0x2910>
   14594:	cmp	r3, #124	; 0x7c
   14598:	bne	1457c <__assert_fail@plt+0x3064>
   1459c:	b	13e28 <__assert_fail@plt+0x2910>
   145a0:	mov	r5, #0
   145a4:	b	143c8 <__assert_fail@plt+0x2eb0>
   145a8:	ldr	r1, [sp, #64]	; 0x40
   145ac:	cmp	r1, #0
   145b0:	beq	1449c <__assert_fail@plt+0x2f84>
   145b4:	cmp	r9, r4
   145b8:	strbhi	ip, [r8, r4]
   145bc:	str	r3, [sp, #64]	; 0x40
   145c0:	add	r4, r4, #1
   145c4:	b	1449c <__assert_fail@plt+0x2f84>
   145c8:	mov	r5, fp
   145cc:	ldr	fp, [sp, #24]
   145d0:	mov	r7, #48	; 0x30
   145d4:	b	14170 <__assert_fail@plt+0x2c58>
   145d8:	mov	r5, #0
   145dc:	mov	fp, r5
   145e0:	b	14170 <__assert_fail@plt+0x2c58>
   145e4:	ldr	r3, [sp, #36]	; 0x24
   145e8:	ldr	r2, [sp, #28]
   145ec:	subs	r3, r3, r2
   145f0:	movne	r3, #1
   145f4:	b	13a6c <__assert_fail@plt+0x2554>
   145f8:	ldr	r3, [sp, #60]	; 0x3c
   145fc:	clz	r7, r9
   14600:	cmp	r3, #0
   14604:	lsr	r7, r7, #5
   14608:	moveq	r7, #0
   1460c:	cmp	r7, #0
   14610:	mov	r5, r3
   14614:	bne	139cc <__assert_fail@plt+0x24b4>
   14618:	ldr	r3, [sp, #68]	; 0x44
   1461c:	ldr	r2, [sp, #40]	; 0x28
   14620:	cmp	r2, #0
   14624:	moveq	r3, #0
   14628:	andne	r3, r3, #1
   1462c:	cmp	r3, #0
   14630:	movne	r3, r2
   14634:	subne	r2, r3, #1
   14638:	bne	14668 <__assert_fail@plt+0x3150>
   1463c:	cmp	r9, r4
   14640:	movhi	r3, #0
   14644:	strbhi	r3, [r8, r4]
   14648:	mov	r0, r4
   1464c:	add	sp, sp, #108	; 0x6c
   14650:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14654:	mov	r3, r2
   14658:	b	1461c <__assert_fail@plt+0x3104>
   1465c:	cmp	r9, r4
   14660:	strbhi	r3, [r8, r4]
   14664:	add	r4, r4, #1
   14668:	ldrb	r3, [r2, #1]!
   1466c:	cmp	r3, #0
   14670:	bne	1465c <__assert_fail@plt+0x3144>
   14674:	b	1463c <__assert_fail@plt+0x3124>
   14678:	ldr	r3, [pc, #32]	; 146a0 <__assert_fail@plt+0x3188>
   1467c:	mov	r6, #1
   14680:	str	r6, [sp, #24]
   14684:	str	r6, [sp, #32]
   14688:	str	r3, [sp, #40]	; 0x28
   1468c:	mov	r4, #0
   14690:	mov	sl, #5
   14694:	b	13a3c <__assert_fail@plt+0x2524>
   14698:	mov	r6, #1
   1469c:	b	13c30 <__assert_fail@plt+0x2718>
   146a0:	andeq	r2, r2, r7, ror #3
   146a4:	andeq	r2, r2, r9, ror #3
   146a8:	andeq	r1, r2, fp, ror pc
   146ac:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   146b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   146b4:	sub	sp, sp, #52	; 0x34
   146b8:	mov	r6, r0
   146bc:	mov	r5, r3
   146c0:	mov	r8, r1
   146c4:	mov	r9, r2
   146c8:	bl	113f8 <__errno_location@plt>
   146cc:	ldr	r7, [pc, #380]	; 14850 <__assert_fail@plt+0x3338>
   146d0:	cmn	r6, #-2147483647	; 0x80000001
   146d4:	ldr	r4, [r7]
   146d8:	ldr	r3, [r0]
   146dc:	str	r0, [sp, #24]
   146e0:	str	r3, [sp, #32]
   146e4:	movne	r3, #0
   146e8:	moveq	r3, #1
   146ec:	orrs	r3, r3, r6, lsr #31
   146f0:	beq	146f8 <__assert_fail@plt+0x31e0>
   146f4:	bl	11500 <abort@plt>
   146f8:	ldr	r2, [r7, #4]
   146fc:	cmp	r6, r2
   14700:	blt	14770 <__assert_fail@plt+0x3258>
   14704:	add	r1, sp, #48	; 0x30
   14708:	add	sl, r7, #8
   1470c:	str	r2, [r1, #-4]!
   14710:	cmp	r4, sl
   14714:	mov	r3, #8
   14718:	sub	r2, r6, r2
   1471c:	movne	r0, r4
   14720:	str	r3, [sp]
   14724:	add	r2, r2, #1
   14728:	mvn	r3, #-2147483648	; 0x80000000
   1472c:	moveq	r0, #0
   14730:	bl	20810 <__assert_fail@plt+0xf2f8>
   14734:	cmp	r4, sl
   14738:	ldr	r2, [sp, #44]	; 0x2c
   1473c:	mov	fp, r0
   14740:	str	r0, [r7]
   14744:	ldmeq	r4, {r0, r1}
   14748:	mov	r4, fp
   1474c:	stmeq	fp, {r0, r1}
   14750:	ldr	r0, [r7, #4]
   14754:	mov	r1, #0
   14758:	sub	r2, r2, r0
   1475c:	add	r0, fp, r0, lsl #3
   14760:	lsl	r2, r2, #3
   14764:	bl	1141c <memset@plt>
   14768:	ldr	r3, [sp, #44]	; 0x2c
   1476c:	str	r3, [r7, #4]
   14770:	ldr	r3, [r5, #4]
   14774:	add	sl, r4, r6, lsl #3
   14778:	orr	r3, r3, #1
   1477c:	str	r3, [sp, #28]
   14780:	add	r3, r5, #8
   14784:	str	r3, [sp, #36]	; 0x24
   14788:	ldr	r3, [r5, #44]	; 0x2c
   1478c:	ldr	fp, [r4, r6, lsl #3]
   14790:	ldr	r7, [sl, #4]
   14794:	str	r3, [sp, #16]
   14798:	ldr	r3, [r5, #40]	; 0x28
   1479c:	mov	r2, r8
   147a0:	str	r3, [sp, #12]
   147a4:	add	r3, r5, #8
   147a8:	str	r3, [sp, #8]
   147ac:	ldr	r3, [sp, #28]
   147b0:	mov	r1, fp
   147b4:	str	r3, [sp, #4]
   147b8:	ldr	r3, [r5]
   147bc:	mov	r0, r7
   147c0:	str	r3, [sp]
   147c4:	mov	r3, r9
   147c8:	bl	1397c <__assert_fail@plt+0x2464>
   147cc:	cmp	fp, r0
   147d0:	bhi	14838 <__assert_fail@plt+0x3320>
   147d4:	ldr	r3, [pc, #120]	; 14854 <__assert_fail@plt+0x333c>
   147d8:	add	fp, r0, #1
   147dc:	cmp	r7, r3
   147e0:	str	fp, [r4, r6, lsl #3]
   147e4:	beq	147f0 <__assert_fail@plt+0x32d8>
   147e8:	mov	r0, r7
   147ec:	bl	130e8 <__assert_fail@plt+0x1bd0>
   147f0:	mov	r0, fp
   147f4:	bl	206c8 <__assert_fail@plt+0xf1b0>
   147f8:	ldr	r3, [r5, #44]	; 0x2c
   147fc:	mov	r2, r8
   14800:	mov	r1, fp
   14804:	str	r0, [sl, #4]
   14808:	str	r3, [sp, #16]
   1480c:	ldr	r3, [r5, #40]	; 0x28
   14810:	mov	r7, r0
   14814:	str	r3, [sp, #12]
   14818:	add	r3, r5, #8
   1481c:	str	r3, [sp, #8]
   14820:	ldr	r3, [sp, #28]
   14824:	str	r3, [sp, #4]
   14828:	ldr	r3, [r5]
   1482c:	str	r3, [sp]
   14830:	mov	r3, r9
   14834:	bl	1397c <__assert_fail@plt+0x2464>
   14838:	ldr	r3, [sp, #24]
   1483c:	ldr	r2, [sp, #32]
   14840:	mov	r0, r7
   14844:	str	r2, [r3]
   14848:	add	sp, sp, #52	; 0x34
   1484c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14850:	andeq	r3, r3, r4, asr r1
   14854:	andeq	r3, r3, r8, asr #3
   14858:	push	{r4, r5, r6, lr}
   1485c:	mov	r5, r0
   14860:	bl	113f8 <__errno_location@plt>
   14864:	cmp	r5, #0
   14868:	mov	r1, #48	; 0x30
   1486c:	ldr	r6, [r0]
   14870:	mov	r4, r0
   14874:	ldr	r0, [pc, #12]	; 14888 <__assert_fail@plt+0x3370>
   14878:	movne	r0, r5
   1487c:	bl	20aa4 <__assert_fail@plt+0xf58c>
   14880:	str	r6, [r4]
   14884:	pop	{r4, r5, r6, pc}
   14888:	andeq	r3, r3, r8, asr #5
   1488c:	ldr	r3, [pc, #12]	; 148a0 <__assert_fail@plt+0x3388>
   14890:	cmp	r0, #0
   14894:	moveq	r0, r3
   14898:	ldr	r0, [r0]
   1489c:	bx	lr
   148a0:	andeq	r3, r3, r8, asr #5
   148a4:	ldr	r3, [pc, #12]	; 148b8 <__assert_fail@plt+0x33a0>
   148a8:	cmp	r0, #0
   148ac:	moveq	r0, r3
   148b0:	str	r1, [r0]
   148b4:	bx	lr
   148b8:	andeq	r3, r3, r8, asr #5
   148bc:	ldr	r3, [pc, #52]	; 148f8 <__assert_fail@plt+0x33e0>
   148c0:	cmp	r0, #0
   148c4:	moveq	r0, r3
   148c8:	add	r3, r0, #8
   148cc:	push	{lr}		; (str lr, [sp, #-4]!)
   148d0:	lsr	lr, r1, #5
   148d4:	and	r1, r1, #31
   148d8:	ldr	ip, [r3, lr, lsl #2]
   148dc:	lsr	r0, ip, r1
   148e0:	eor	r2, r2, r0
   148e4:	and	r2, r2, #1
   148e8:	and	r0, r0, #1
   148ec:	eor	r1, ip, r2, lsl r1
   148f0:	str	r1, [r3, lr, lsl #2]
   148f4:	pop	{pc}		; (ldr pc, [sp], #4)
   148f8:	andeq	r3, r3, r8, asr #5
   148fc:	ldr	r3, [pc, #16]	; 14914 <__assert_fail@plt+0x33fc>
   14900:	cmp	r0, #0
   14904:	movne	r3, r0
   14908:	ldr	r0, [r3, #4]
   1490c:	str	r1, [r3, #4]
   14910:	bx	lr
   14914:	andeq	r3, r3, r8, asr #5
   14918:	ldr	r3, [pc, #44]	; 1494c <__assert_fail@plt+0x3434>
   1491c:	cmp	r0, #0
   14920:	moveq	r0, r3
   14924:	mov	r3, #10
   14928:	cmp	r2, #0
   1492c:	cmpne	r1, #0
   14930:	str	r3, [r0]
   14934:	bne	14940 <__assert_fail@plt+0x3428>
   14938:	push	{r4, lr}
   1493c:	bl	11500 <abort@plt>
   14940:	str	r1, [r0, #40]	; 0x28
   14944:	str	r2, [r0, #44]	; 0x2c
   14948:	bx	lr
   1494c:	andeq	r3, r3, r8, asr #5
   14950:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14954:	sub	sp, sp, #24
   14958:	mov	sl, r3
   1495c:	ldr	r4, [sp, #56]	; 0x38
   14960:	ldr	r3, [pc, #100]	; 149cc <__assert_fail@plt+0x34b4>
   14964:	cmp	r4, #0
   14968:	moveq	r4, r3
   1496c:	mov	r7, r0
   14970:	mov	r8, r1
   14974:	mov	r9, r2
   14978:	bl	113f8 <__errno_location@plt>
   1497c:	ldr	r3, [r4, #44]	; 0x2c
   14980:	mov	r2, r9
   14984:	mov	r1, r8
   14988:	ldr	r6, [r0]
   1498c:	str	r3, [sp, #16]
   14990:	ldr	r3, [r4, #40]	; 0x28
   14994:	mov	r5, r0
   14998:	str	r3, [sp, #12]
   1499c:	add	r3, r4, #8
   149a0:	str	r3, [sp, #8]
   149a4:	ldr	r3, [r4, #4]
   149a8:	mov	r0, r7
   149ac:	str	r3, [sp, #4]
   149b0:	ldr	r3, [r4]
   149b4:	str	r3, [sp]
   149b8:	mov	r3, sl
   149bc:	bl	1397c <__assert_fail@plt+0x2464>
   149c0:	str	r6, [r5]
   149c4:	add	sp, sp, #24
   149c8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   149cc:	andeq	r3, r3, r8, asr #5
   149d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   149d4:	cmp	r3, #0
   149d8:	sub	sp, sp, #44	; 0x2c
   149dc:	ldr	r4, [pc, #188]	; 14aa0 <__assert_fail@plt+0x3588>
   149e0:	mov	r6, r2
   149e4:	movne	r4, r3
   149e8:	mov	sl, r1
   149ec:	mov	r9, r0
   149f0:	bl	113f8 <__errno_location@plt>
   149f4:	ldr	r5, [r4, #4]
   149f8:	add	fp, r4, #8
   149fc:	cmp	r6, #0
   14a00:	orreq	r5, r5, #1
   14a04:	mov	r1, #0
   14a08:	mov	r2, r9
   14a0c:	ldr	r3, [r0]
   14a10:	mov	r8, r0
   14a14:	str	r3, [sp, #28]
   14a18:	ldr	r3, [r4, #44]	; 0x2c
   14a1c:	mov	r0, r1
   14a20:	str	r3, [sp, #16]
   14a24:	ldr	r3, [r4, #40]	; 0x28
   14a28:	stmib	sp, {r5, fp}
   14a2c:	str	r3, [sp, #12]
   14a30:	ldr	r3, [r4]
   14a34:	str	r3, [sp]
   14a38:	mov	r3, sl
   14a3c:	bl	1397c <__assert_fail@plt+0x2464>
   14a40:	add	r1, r0, #1
   14a44:	mov	r7, r0
   14a48:	mov	r0, r1
   14a4c:	str	r1, [sp, #36]	; 0x24
   14a50:	bl	206c8 <__assert_fail@plt+0xf1b0>
   14a54:	ldr	r3, [r4, #44]	; 0x2c
   14a58:	mov	r2, r9
   14a5c:	str	r3, [sp, #16]
   14a60:	ldr	r3, [r4, #40]	; 0x28
   14a64:	stmib	sp, {r5, fp}
   14a68:	str	r3, [sp, #12]
   14a6c:	ldr	r3, [r4]
   14a70:	ldr	r1, [sp, #36]	; 0x24
   14a74:	str	r3, [sp]
   14a78:	mov	r3, sl
   14a7c:	str	r0, [sp, #32]
   14a80:	bl	1397c <__assert_fail@plt+0x2464>
   14a84:	ldr	r3, [sp, #28]
   14a88:	cmp	r6, #0
   14a8c:	str	r3, [r8]
   14a90:	ldr	r0, [sp, #32]
   14a94:	strne	r7, [r6]
   14a98:	add	sp, sp, #44	; 0x2c
   14a9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14aa0:	andeq	r3, r3, r8, asr #5
   14aa4:	mov	r3, r2
   14aa8:	mov	r2, #0
   14aac:	b	149d0 <__assert_fail@plt+0x34b8>
   14ab0:	push	{r4, r5, r6, r7, r8, lr}
   14ab4:	mov	r6, #1
   14ab8:	ldr	r4, [pc, #104]	; 14b28 <__assert_fail@plt+0x3610>
   14abc:	ldr	r5, [r4]
   14ac0:	add	r7, r5, #12
   14ac4:	ldr	r3, [r4, #4]
   14ac8:	add	r7, r7, #8
   14acc:	cmp	r6, r3
   14ad0:	blt	14b18 <__assert_fail@plt+0x3600>
   14ad4:	ldr	r0, [r5, #4]
   14ad8:	ldr	r6, [pc, #76]	; 14b2c <__assert_fail@plt+0x3614>
   14adc:	cmp	r0, r6
   14ae0:	beq	14af4 <__assert_fail@plt+0x35dc>
   14ae4:	bl	130e8 <__assert_fail@plt+0x1bd0>
   14ae8:	mov	r3, #256	; 0x100
   14aec:	str	r3, [r4, #8]
   14af0:	str	r6, [r4, #12]
   14af4:	ldr	r6, [pc, #52]	; 14b30 <__assert_fail@plt+0x3618>
   14af8:	cmp	r5, r6
   14afc:	beq	14b0c <__assert_fail@plt+0x35f4>
   14b00:	mov	r0, r5
   14b04:	bl	130e8 <__assert_fail@plt+0x1bd0>
   14b08:	str	r6, [r4]
   14b0c:	mov	r3, #1
   14b10:	str	r3, [r4, #4]
   14b14:	pop	{r4, r5, r6, r7, r8, pc}
   14b18:	ldr	r0, [r7, #-8]
   14b1c:	bl	130e8 <__assert_fail@plt+0x1bd0>
   14b20:	add	r6, r6, #1
   14b24:	b	14ac4 <__assert_fail@plt+0x35ac>
   14b28:	andeq	r3, r3, r4, asr r1
   14b2c:	andeq	r3, r3, r8, asr #3
   14b30:	andeq	r3, r3, ip, asr r1
   14b34:	ldr	r3, [pc, #4]	; 14b40 <__assert_fail@plt+0x3628>
   14b38:	mvn	r2, #0
   14b3c:	b	146b0 <__assert_fail@plt+0x3198>
   14b40:	andeq	r3, r3, r8, asr #5
   14b44:	ldr	r3, [pc]	; 14b4c <__assert_fail@plt+0x3634>
   14b48:	b	146b0 <__assert_fail@plt+0x3198>
   14b4c:	andeq	r3, r3, r8, asr #5
   14b50:	mov	r1, r0
   14b54:	mov	r0, #0
   14b58:	b	14b34 <__assert_fail@plt+0x361c>
   14b5c:	mov	r2, r1
   14b60:	mov	r1, r0
   14b64:	mov	r0, #0
   14b68:	b	14b44 <__assert_fail@plt+0x362c>
   14b6c:	push	{r4, r5, lr}
   14b70:	sub	sp, sp, #52	; 0x34
   14b74:	mov	r5, r2
   14b78:	mov	r4, r0
   14b7c:	mov	r0, sp
   14b80:	bl	13838 <__assert_fail@plt+0x2320>
   14b84:	mov	r3, sp
   14b88:	mvn	r2, #0
   14b8c:	mov	r1, r5
   14b90:	mov	r0, r4
   14b94:	bl	146b0 <__assert_fail@plt+0x3198>
   14b98:	add	sp, sp, #52	; 0x34
   14b9c:	pop	{r4, r5, pc}
   14ba0:	push	{r4, r5, r6, lr}
   14ba4:	sub	sp, sp, #48	; 0x30
   14ba8:	mov	r5, r2
   14bac:	mov	r6, r3
   14bb0:	mov	r4, r0
   14bb4:	mov	r0, sp
   14bb8:	bl	13838 <__assert_fail@plt+0x2320>
   14bbc:	mov	r3, sp
   14bc0:	mov	r2, r6
   14bc4:	mov	r1, r5
   14bc8:	mov	r0, r4
   14bcc:	bl	146b0 <__assert_fail@plt+0x3198>
   14bd0:	add	sp, sp, #48	; 0x30
   14bd4:	pop	{r4, r5, r6, pc}
   14bd8:	mov	r2, r1
   14bdc:	mov	r1, r0
   14be0:	mov	r0, #0
   14be4:	b	14b6c <__assert_fail@plt+0x3654>
   14be8:	mov	r3, r2
   14bec:	mov	r2, r1
   14bf0:	mov	r1, r0
   14bf4:	mov	r0, #0
   14bf8:	b	14ba0 <__assert_fail@plt+0x3688>
   14bfc:	push	{r4, r5, r6, lr}
   14c00:	mov	r4, r0
   14c04:	ldr	lr, [pc, #80]	; 14c5c <__assert_fail@plt+0x3744>
   14c08:	mov	r5, r1
   14c0c:	mov	r6, r2
   14c10:	ldm	lr!, {r0, r1, r2, r3}
   14c14:	sub	sp, sp, #48	; 0x30
   14c18:	mov	ip, sp
   14c1c:	stmia	ip!, {r0, r1, r2, r3}
   14c20:	ldm	lr!, {r0, r1, r2, r3}
   14c24:	stmia	ip!, {r0, r1, r2, r3}
   14c28:	ldm	lr, {r0, r1, r2, r3}
   14c2c:	stm	ip, {r0, r1, r2, r3}
   14c30:	mov	r1, r6
   14c34:	mov	r2, #1
   14c38:	mov	r0, sp
   14c3c:	bl	148bc <__assert_fail@plt+0x33a4>
   14c40:	mov	r3, sp
   14c44:	mov	r2, r5
   14c48:	mov	r1, r4
   14c4c:	mov	r0, #0
   14c50:	bl	146b0 <__assert_fail@plt+0x3198>
   14c54:	add	sp, sp, #48	; 0x30
   14c58:	pop	{r4, r5, r6, pc}
   14c5c:	andeq	r3, r3, r8, asr #5
   14c60:	mov	r2, r1
   14c64:	mvn	r1, #0
   14c68:	b	14bfc <__assert_fail@plt+0x36e4>
   14c6c:	mov	r1, #58	; 0x3a
   14c70:	b	14c60 <__assert_fail@plt+0x3748>
   14c74:	mov	r2, #58	; 0x3a
   14c78:	b	14bfc <__assert_fail@plt+0x36e4>
   14c7c:	push	{r4, r5, lr}
   14c80:	sub	sp, sp, #100	; 0x64
   14c84:	mov	r4, r0
   14c88:	mov	r0, sp
   14c8c:	mov	r5, r2
   14c90:	bl	13838 <__assert_fail@plt+0x2320>
   14c94:	mov	ip, sp
   14c98:	add	lr, sp, #48	; 0x30
   14c9c:	ldm	ip!, {r0, r1, r2, r3}
   14ca0:	stmia	lr!, {r0, r1, r2, r3}
   14ca4:	ldm	ip!, {r0, r1, r2, r3}
   14ca8:	stmia	lr!, {r0, r1, r2, r3}
   14cac:	ldm	ip, {r0, r1, r2, r3}
   14cb0:	stm	lr, {r0, r1, r2, r3}
   14cb4:	mov	r2, #1
   14cb8:	mov	r1, #58	; 0x3a
   14cbc:	add	r0, sp, #48	; 0x30
   14cc0:	bl	148bc <__assert_fail@plt+0x33a4>
   14cc4:	add	r3, sp, #48	; 0x30
   14cc8:	mvn	r2, #0
   14ccc:	mov	r1, r5
   14cd0:	mov	r0, r4
   14cd4:	bl	146b0 <__assert_fail@plt+0x3198>
   14cd8:	add	sp, sp, #100	; 0x64
   14cdc:	pop	{r4, r5, pc}
   14ce0:	push	{r4, r5, r6, r7, lr}
   14ce4:	mov	r4, r0
   14ce8:	ldr	lr, [pc, #84]	; 14d44 <__assert_fail@plt+0x382c>
   14cec:	mov	r6, r1
   14cf0:	mov	r7, r2
   14cf4:	mov	r5, r3
   14cf8:	ldm	lr!, {r0, r1, r2, r3}
   14cfc:	sub	sp, sp, #52	; 0x34
   14d00:	mov	ip, sp
   14d04:	stmia	ip!, {r0, r1, r2, r3}
   14d08:	ldm	lr!, {r0, r1, r2, r3}
   14d0c:	stmia	ip!, {r0, r1, r2, r3}
   14d10:	ldm	lr, {r0, r1, r2, r3}
   14d14:	stm	ip, {r0, r1, r2, r3}
   14d18:	mov	r2, r7
   14d1c:	mov	r1, r6
   14d20:	mov	r0, sp
   14d24:	bl	14918 <__assert_fail@plt+0x3400>
   14d28:	mov	r3, sp
   14d2c:	ldr	r2, [sp, #72]	; 0x48
   14d30:	mov	r1, r5
   14d34:	mov	r0, r4
   14d38:	bl	146b0 <__assert_fail@plt+0x3198>
   14d3c:	add	sp, sp, #52	; 0x34
   14d40:	pop	{r4, r5, r6, r7, pc}
   14d44:	andeq	r3, r3, r8, asr #5
   14d48:	mvn	ip, #0
   14d4c:	push	{r0, r1, r2, lr}
   14d50:	str	ip, [sp]
   14d54:	bl	14ce0 <__assert_fail@plt+0x37c8>
   14d58:	add	sp, sp, #12
   14d5c:	pop	{pc}		; (ldr pc, [sp], #4)
   14d60:	mov	r3, r2
   14d64:	mov	r2, r1
   14d68:	mov	r1, r0
   14d6c:	mov	r0, #0
   14d70:	b	14d48 <__assert_fail@plt+0x3830>
   14d74:	push	{r0, r1, r2, lr}
   14d78:	str	r3, [sp]
   14d7c:	mov	r3, r2
   14d80:	mov	r2, r1
   14d84:	mov	r1, r0
   14d88:	mov	r0, #0
   14d8c:	bl	14ce0 <__assert_fail@plt+0x37c8>
   14d90:	add	sp, sp, #12
   14d94:	pop	{pc}		; (ldr pc, [sp], #4)
   14d98:	ldr	r3, [pc]	; 14da0 <__assert_fail@plt+0x3888>
   14d9c:	b	146b0 <__assert_fail@plt+0x3198>
   14da0:	andeq	r3, r3, r4, ror #2
   14da4:	mov	r2, r1
   14da8:	mov	r1, r0
   14dac:	mov	r0, #0
   14db0:	b	14d98 <__assert_fail@plt+0x3880>
   14db4:	mvn	r2, #0
   14db8:	b	14d98 <__assert_fail@plt+0x3880>
   14dbc:	mov	r1, r0
   14dc0:	mov	r0, #0
   14dc4:	b	14db4 <__assert_fail@plt+0x389c>
   14dc8:	cmp	r1, #0
   14dcc:	add	r3, r1, #31
   14dd0:	movge	r3, r1
   14dd4:	rsbs	r2, r1, #0
   14dd8:	asr	r3, r3, #5
   14ddc:	and	r2, r2, #31
   14de0:	and	r1, r1, #31
   14de4:	mov	ip, #1
   14de8:	rsbpl	r1, r2, #0
   14dec:	ldr	r2, [r0, r3, lsl #2]
   14df0:	orr	r1, r2, ip, lsl r1
   14df4:	str	r1, [r0, r3, lsl #2]
   14df8:	bx	lr
   14dfc:	cmp	r1, #0
   14e00:	add	r3, r1, #31
   14e04:	movge	r3, r1
   14e08:	rsbs	r2, r1, #0
   14e0c:	asr	r3, r3, #5
   14e10:	and	r2, r2, #31
   14e14:	ldr	r0, [r0, r3, lsl #2]
   14e18:	and	r1, r1, #31
   14e1c:	rsbpl	r1, r2, #0
   14e20:	lsr	r0, r0, r1
   14e24:	and	r0, r0, #1
   14e28:	bx	lr
   14e2c:	sub	r3, r0, #4
   14e30:	add	r0, r0, #28
   14e34:	ldr	r2, [r3, #4]
   14e38:	mvn	r2, r2
   14e3c:	str	r2, [r3, #4]!
   14e40:	cmp	r3, r0
   14e44:	bne	14e34 <__assert_fail@plt+0x391c>
   14e48:	bx	lr
   14e4c:	sub	r3, r0, #4
   14e50:	sub	r1, r1, #4
   14e54:	add	r0, r0, #28
   14e58:	ldr	r2, [r3, #4]
   14e5c:	ldr	ip, [r1, #4]!
   14e60:	orr	r2, r2, ip
   14e64:	str	r2, [r3, #4]!
   14e68:	cmp	r3, r0
   14e6c:	bne	14e58 <__assert_fail@plt+0x3940>
   14e70:	bx	lr
   14e74:	sub	r3, r0, #4
   14e78:	sub	r1, r1, #4
   14e7c:	add	r0, r0, #28
   14e80:	ldr	r2, [r3, #4]
   14e84:	ldr	ip, [r1, #4]!
   14e88:	and	r2, r2, ip
   14e8c:	str	r2, [r3, #4]!
   14e90:	cmp	r3, r0
   14e94:	bne	14e80 <__assert_fail@plt+0x3968>
   14e98:	bx	lr
   14e9c:	ldr	r3, [r0, #80]	; 0x50
   14ea0:	cmp	r3, #1
   14ea4:	movne	r2, r0
   14ea8:	movne	r0, #1
   14eac:	ldrne	ip, [r2, #28]
   14eb0:	bne	14ebc <__assert_fail@plt+0x39a4>
   14eb4:	mov	r0, r3
   14eb8:	bx	lr
   14ebc:	add	r3, r0, r1
   14ec0:	cmp	ip, r3
   14ec4:	bgt	14ecc <__assert_fail@plt+0x39b4>
   14ec8:	bx	lr
   14ecc:	push	{lr}		; (str lr, [sp, #-4]!)
   14ed0:	ldr	lr, [r2, #8]
   14ed4:	ldr	r3, [lr, r3, lsl #2]
   14ed8:	cmn	r3, #1
   14edc:	popne	{pc}		; (ldrne pc, [sp], #4)
   14ee0:	add	r0, r0, #1
   14ee4:	add	r3, r0, r1
   14ee8:	cmp	ip, r3
   14eec:	bgt	14ed0 <__assert_fail@plt+0x39b8>
   14ef0:	pop	{pc}		; (ldr pc, [sp], #4)
   14ef4:	ldr	r3, [r0, #80]	; 0x50
   14ef8:	cmp	r3, #1
   14efc:	ldreq	r3, [r0, #4]
   14f00:	ldrne	r3, [r0, #8]
   14f04:	ldrbeq	r0, [r3, r1]
   14f08:	ldrne	r0, [r3, r1, lsl #2]
   14f0c:	bx	lr
   14f10:	ldr	r3, [r0, #36]	; 0x24
   14f14:	ldr	r2, [r0, #48]	; 0x30
   14f18:	cmp	r3, r2
   14f1c:	movlt	r2, r3
   14f20:	ldr	r3, [r0, #28]
   14f24:	cmp	r3, r2
   14f28:	blt	14f38 <__assert_fail@plt+0x3a20>
   14f2c:	str	r3, [r0, #28]
   14f30:	str	r3, [r0, #32]
   14f34:	bx	lr
   14f38:	ldr	r1, [r0]
   14f3c:	ldr	ip, [r0, #24]
   14f40:	add	r1, r1, r3
   14f44:	ldrb	r1, [r1, ip]
   14f48:	ldr	ip, [r0, #64]	; 0x40
   14f4c:	ldrb	ip, [ip, r1]
   14f50:	ldr	r1, [r0, #4]
   14f54:	strb	ip, [r1, r3]
   14f58:	add	r3, r3, #1
   14f5c:	b	14f24 <__assert_fail@plt+0x3a0c>
   14f60:	ldr	r2, [r0, #4]
   14f64:	cmp	r2, #0
   14f68:	ble	14fb4 <__assert_fail@plt+0x3a9c>
   14f6c:	sub	r2, r2, #1
   14f70:	mov	r3, #0
   14f74:	push	{lr}		; (str lr, [sp, #-4]!)
   14f78:	cmp	r2, r3
   14f7c:	ldr	lr, [r0, #8]
   14f80:	bhi	14f98 <__assert_fail@plt+0x3a80>
   14f84:	ldr	r2, [lr, r3, lsl #2]
   14f88:	cmp	r1, r2
   14f8c:	bne	14fbc <__assert_fail@plt+0x3aa4>
   14f90:	add	r0, r3, #1
   14f94:	pop	{pc}		; (ldr pc, [sp], #4)
   14f98:	add	ip, r2, r3
   14f9c:	lsr	ip, ip, #1
   14fa0:	ldr	lr, [lr, ip, lsl #2]
   14fa4:	cmp	lr, r1
   14fa8:	addlt	r3, ip, #1
   14fac:	movge	r2, ip
   14fb0:	b	14f78 <__assert_fail@plt+0x3a60>
   14fb4:	mov	r0, #0
   14fb8:	bx	lr
   14fbc:	mov	r0, #0
   14fc0:	pop	{pc}		; (ldr pc, [sp], #4)
   14fc4:	ldr	r3, [r1, #40]	; 0x28
   14fc8:	ldr	ip, [r1, #56]	; 0x38
   14fcc:	cmp	ip, r3
   14fd0:	movle	r3, #2
   14fd4:	strble	r3, [r0, #4]
   14fd8:	movle	r3, #0
   14fdc:	ble	15100 <__assert_fail@plt+0x3be8>
   14fe0:	push	{r4, lr}
   14fe4:	ldr	lr, [r1, #4]
   14fe8:	ldrb	ip, [lr, r3]
   14fec:	strb	ip, [r0]
   14ff0:	ldr	r4, [r1, #80]	; 0x50
   14ff4:	cmp	r4, #1
   14ff8:	ble	15024 <__assert_fail@plt+0x3b0c>
   14ffc:	ldr	r4, [r1, #28]
   15000:	cmp	r3, r4
   15004:	beq	15024 <__assert_fail@plt+0x3b0c>
   15008:	ldr	r4, [r1, #8]
   1500c:	ldr	r4, [r4, r3, lsl #2]
   15010:	cmn	r4, #1
   15014:	bne	15024 <__assert_fail@plt+0x3b0c>
   15018:	mov	r3, #1
   1501c:	strb	r3, [r0, #4]
   15020:	b	150b0 <__assert_fail@plt+0x3b98>
   15024:	cmp	ip, #92	; 0x5c
   15028:	bne	15050 <__assert_fail@plt+0x3b38>
   1502c:	tst	r2, #1
   15030:	beq	15018 <__assert_fail@plt+0x3b00>
   15034:	ldr	r2, [r1, #48]	; 0x30
   15038:	add	r3, r3, #1
   1503c:	cmp	r3, r2
   15040:	strlt	r3, [r1, #40]	; 0x28
   15044:	ldrblt	r3, [lr, r3]
   15048:	strblt	r3, [r0]
   1504c:	b	15018 <__assert_fail@plt+0x3b00>
   15050:	cmp	ip, #91	; 0x5b
   15054:	bne	150c8 <__assert_fail@plt+0x3bb0>
   15058:	ldr	r4, [r1, #48]	; 0x30
   1505c:	add	ip, r3, #1
   15060:	cmp	ip, r4
   15064:	addlt	r3, lr, r3
   15068:	movge	r3, #0
   1506c:	ldrblt	r3, [r3, #1]
   15070:	cmp	r3, #58	; 0x3a
   15074:	strb	r3, [r0]
   15078:	beq	150b8 <__assert_fail@plt+0x3ba0>
   1507c:	cmp	r3, #61	; 0x3d
   15080:	beq	150a4 <__assert_fail@plt+0x3b8c>
   15084:	cmp	r3, #46	; 0x2e
   15088:	moveq	r3, #26
   1508c:	beq	150a8 <__assert_fail@plt+0x3b90>
   15090:	mov	r3, #1
   15094:	mov	r2, #91	; 0x5b
   15098:	strb	r3, [r0, #4]
   1509c:	strb	r2, [r0]
   150a0:	b	150b0 <__assert_fail@plt+0x3b98>
   150a4:	mov	r3, #28
   150a8:	strb	r3, [r0, #4]
   150ac:	mov	r3, #2
   150b0:	mov	r0, r3
   150b4:	pop	{r4, pc}
   150b8:	tst	r2, #4
   150bc:	beq	15090 <__assert_fail@plt+0x3b78>
   150c0:	mov	r3, #30
   150c4:	b	150a8 <__assert_fail@plt+0x3b90>
   150c8:	cmp	ip, #93	; 0x5d
   150cc:	beq	150f0 <__assert_fail@plt+0x3bd8>
   150d0:	cmp	ip, #94	; 0x5e
   150d4:	beq	150f8 <__assert_fail@plt+0x3be0>
   150d8:	cmp	ip, #45	; 0x2d
   150dc:	moveq	r3, #22
   150e0:	bne	15018 <__assert_fail@plt+0x3b00>
   150e4:	strb	r3, [r0, #4]
   150e8:	mov	r3, #1
   150ec:	b	150b0 <__assert_fail@plt+0x3b98>
   150f0:	mov	r3, #21
   150f4:	b	150e4 <__assert_fail@plt+0x3bcc>
   150f8:	mov	r3, #25
   150fc:	b	150e4 <__assert_fail@plt+0x3bcc>
   15100:	mov	r0, r3
   15104:	bx	lr
   15108:	ldrb	r3, [r1, #24]
   1510c:	cmp	r3, #17
   15110:	bne	15128 <__assert_fail@plt+0x3c10>
   15114:	ldr	r3, [r1, #20]
   15118:	cmp	r0, r3
   1511c:	ldrbeq	r3, [r1, #26]
   15120:	orreq	r3, r3, #8
   15124:	strbeq	r3, [r1, #26]
   15128:	mov	r0, #0
   1512c:	bx	lr
   15130:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15134:	sub	sp, sp, #44	; 0x2c
   15138:	ldr	sl, [r0, #84]	; 0x54
   1513c:	str	r3, [sp, #16]
   15140:	mov	r6, r2
   15144:	ldr	r2, [sp, #16]
   15148:	ldr	r3, [sl, #24]
   1514c:	mov	r9, #12
   15150:	mov	fp, r0
   15154:	mla	r9, r9, r2, r3
   15158:	ldr	r2, [sp, #80]	; 0x50
   1515c:	mov	r3, #24
   15160:	mov	r4, r1
   15164:	mul	r3, r3, r2
   15168:	mov	r8, #0
   1516c:	str	r3, [sp, #24]
   15170:	mov	r3, #1
   15174:	lsl	r3, r3, r6
   15178:	str	r3, [sp, #12]
   1517c:	mvn	r3, r3
   15180:	str	r3, [sp, #32]
   15184:	and	r3, r1, #1
   15188:	str	r3, [sp, #36]	; 0x24
   1518c:	and	r3, r1, #2
   15190:	str	r3, [sp, #20]
   15194:	ldr	r3, [r9, #4]
   15198:	cmp	r8, r3
   1519c:	lsrge	r4, r4, #1
   151a0:	andge	r0, r4, #1
   151a4:	bge	15248 <__assert_fail@plt+0x3d30>
   151a8:	ldr	r3, [r9, #8]
   151ac:	ldr	r7, [r3, r8, lsl #2]
   151b0:	ldr	r3, [sl]
   151b4:	add	r2, r3, r7, lsl #3
   151b8:	ldrb	r2, [r2, #4]
   151bc:	cmp	r2, #8
   151c0:	beq	152c0 <__assert_fail@plt+0x3da8>
   151c4:	cmp	r2, #9
   151c8:	beq	152dc <__assert_fail@plt+0x3dc4>
   151cc:	cmp	r2, #4
   151d0:	bne	152b8 <__assert_fail@plt+0x3da0>
   151d4:	ldr	r3, [sp, #80]	; 0x50
   151d8:	cmn	r3, #1
   151dc:	beq	152b8 <__assert_fail@plt+0x3da0>
   151e0:	mov	r3, #12
   151e4:	mul	r3, r3, r7
   151e8:	str	r3, [sp, #28]
   151ec:	ldr	r3, [sp, #24]
   151f0:	add	r5, r3, #24
   151f4:	ldr	r3, [fp, #116]	; 0x74
   151f8:	add	r5, r3, r5
   151fc:	ldr	r3, [r5, #-24]	; 0xffffffe8
   15200:	cmp	r7, r3
   15204:	bne	152a8 <__assert_fail@plt+0x3d90>
   15208:	cmp	r6, #31
   1520c:	bgt	15220 <__assert_fail@plt+0x3d08>
   15210:	ldr	r3, [r5, #-8]
   15214:	ldr	r2, [sp, #12]
   15218:	tst	r2, r3
   1521c:	beq	152a8 <__assert_fail@plt+0x3d90>
   15220:	ldr	r2, [sp, #28]
   15224:	ldr	r3, [sl, #20]
   15228:	add	r3, r3, r2
   1522c:	ldr	r2, [sp, #16]
   15230:	ldr	r3, [r3, #8]
   15234:	ldr	r3, [r3]
   15238:	cmp	r2, r3
   1523c:	bne	15250 <__assert_fail@plt+0x3d38>
   15240:	ands	r0, r4, #1
   15244:	mvnne	r0, #0
   15248:	add	sp, sp, #44	; 0x2c
   1524c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15250:	ldr	r2, [sp, #80]	; 0x50
   15254:	mov	r1, r4
   15258:	str	r2, [sp]
   1525c:	mov	r0, fp
   15260:	mov	r2, r6
   15264:	bl	15130 <__assert_fail@plt+0x3c18>
   15268:	cmn	r0, #1
   1526c:	bne	15278 <__assert_fail@plt+0x3d60>
   15270:	mvn	r0, #0
   15274:	b	15248 <__assert_fail@plt+0x3d30>
   15278:	cmp	r0, #0
   1527c:	bne	15294 <__assert_fail@plt+0x3d7c>
   15280:	ldr	r3, [sp, #20]
   15284:	cmp	r3, #0
   15288:	beq	15294 <__assert_fail@plt+0x3d7c>
   1528c:	mov	r0, #0
   15290:	b	15248 <__assert_fail@plt+0x3d30>
   15294:	cmp	r6, #31
   15298:	ldrle	r3, [r5, #-8]
   1529c:	ldrle	r2, [sp, #32]
   152a0:	andle	r3, r3, r2
   152a4:	strle	r3, [r5, #-8]
   152a8:	add	r5, r5, #24
   152ac:	ldrb	r3, [r5, #-28]	; 0xffffffe4
   152b0:	cmp	r3, #0
   152b4:	bne	151fc <__assert_fail@plt+0x3ce4>
   152b8:	add	r8, r8, #1
   152bc:	b	15194 <__assert_fail@plt+0x3c7c>
   152c0:	ldr	r2, [sp, #36]	; 0x24
   152c4:	cmp	r2, #0
   152c8:	beq	152b8 <__assert_fail@plt+0x3da0>
   152cc:	ldr	r3, [r3, r7, lsl #3]
   152d0:	cmp	r3, r6
   152d4:	bne	152b8 <__assert_fail@plt+0x3da0>
   152d8:	b	15270 <__assert_fail@plt+0x3d58>
   152dc:	ldr	r2, [sp, #20]
   152e0:	cmp	r2, #0
   152e4:	beq	152b8 <__assert_fail@plt+0x3da0>
   152e8:	ldr	r3, [r3, r7, lsl #3]
   152ec:	cmp	r6, r3
   152f0:	bne	152b8 <__assert_fail@plt+0x3da0>
   152f4:	b	1528c <__assert_fail@plt+0x3d74>
   152f8:	push	{r4, r5, lr}
   152fc:	mov	lr, #24
   15300:	ldr	r5, [r0, #116]	; 0x74
   15304:	ldr	ip, [sp, #12]
   15308:	mla	r1, lr, r1, r5
   1530c:	ldr	r4, [sp, #16]
   15310:	ldr	lr, [r1, #8]
   15314:	cmp	lr, ip
   15318:	bgt	15350 <__assert_fail@plt+0x3e38>
   1531c:	ldr	r1, [r1, #12]
   15320:	cmp	ip, r1
   15324:	bgt	1535c <__assert_fail@plt+0x3e44>
   15328:	cmp	ip, r1
   1532c:	moveq	r1, #2
   15330:	movne	r1, #0
   15334:	cmp	lr, ip
   15338:	orreq	r1, r1, #1
   1533c:	cmp	r1, #0
   15340:	beq	15354 <__assert_fail@plt+0x3e3c>
   15344:	str	r4, [sp, #12]
   15348:	pop	{r4, r5, lr}
   1534c:	b	15130 <__assert_fail@plt+0x3c18>
   15350:	mvn	r1, #0
   15354:	mov	r0, r1
   15358:	pop	{r4, r5, pc}
   1535c:	mov	r1, #1
   15360:	b	15354 <__assert_fail@plt+0x3e3c>
   15364:	push	{r4, r5, lr}
   15368:	mov	r3, #0
   1536c:	ldr	r4, [r0, #108]	; 0x6c
   15370:	mov	r5, #24
   15374:	mov	ip, r4
   15378:	cmp	ip, r3
   1537c:	bgt	153ac <__assert_fail@plt+0x3e94>
   15380:	cmp	r4, r3
   15384:	mvnle	r3, #0
   15388:	ble	153a4 <__assert_fail@plt+0x3e8c>
   1538c:	ldr	r0, [r0, #116]	; 0x74
   15390:	mov	r2, #24
   15394:	mla	r2, r2, r3, r0
   15398:	ldr	r2, [r2, #4]
   1539c:	cmp	r1, r2
   153a0:	mvnne	r3, #0
   153a4:	mov	r0, r3
   153a8:	pop	{r4, r5, pc}
   153ac:	add	r2, ip, r3
   153b0:	ldr	lr, [r0, #116]	; 0x74
   153b4:	add	r2, r2, r2, lsr #31
   153b8:	asr	r2, r2, #1
   153bc:	mla	lr, r5, r2, lr
   153c0:	ldr	lr, [lr, #4]
   153c4:	cmp	lr, r1
   153c8:	addlt	r3, r2, #1
   153cc:	movge	ip, r2
   153d0:	b	15378 <__assert_fail@plt+0x3e60>
   153d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   153d8:	mov	r6, r1
   153dc:	sub	sp, sp, #20
   153e0:	mov	r1, r3
   153e4:	mov	r5, r0
   153e8:	mov	sl, r2
   153ec:	mov	r7, r3
   153f0:	ldr	r9, [r0, #84]	; 0x54
   153f4:	bl	15364 <__assert_fail@plt+0x3e4c>
   153f8:	ldr	r1, [sp, #60]	; 0x3c
   153fc:	mov	r4, #0
   15400:	str	r0, [sp, #8]
   15404:	mov	r0, r5
   15408:	bl	15364 <__assert_fail@plt+0x3e4c>
   1540c:	str	r0, [sp, #12]
   15410:	ldr	r3, [r6, #4]
   15414:	cmp	r4, r3
   15418:	blt	15428 <__assert_fail@plt+0x3f10>
   1541c:	mov	r0, #0
   15420:	add	sp, sp, #20
   15424:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15428:	ldr	r3, [r6, #8]
   1542c:	ldr	r2, [r5, #116]	; 0x74
   15430:	mov	r0, r5
   15434:	ldr	r1, [r3, r4, lsl #2]
   15438:	mov	r3, #24
   1543c:	mul	r3, r3, r1
   15440:	ldr	r2, [r2, r3]
   15444:	ldr	r3, [r9]
   15448:	ldr	r8, [r3, r2, lsl #3]
   1544c:	ldr	r3, [sp, #8]
   15450:	mov	r2, r8
   15454:	str	r3, [sp, #4]
   15458:	str	r7, [sp]
   1545c:	mov	r3, sl
   15460:	bl	152f8 <__assert_fail@plt+0x3de0>
   15464:	ldr	r3, [sp, #12]
   15468:	ldr	r1, [r6, #8]
   1546c:	str	r3, [sp, #4]
   15470:	ldr	r3, [sp, #60]	; 0x3c
   15474:	mov	r2, r8
   15478:	str	r3, [sp]
   1547c:	ldr	r3, [sp, #56]	; 0x38
   15480:	ldr	r1, [r1, r4, lsl #2]
   15484:	mov	fp, r0
   15488:	mov	r0, r5
   1548c:	bl	152f8 <__assert_fail@plt+0x3de0>
   15490:	cmp	fp, r0
   15494:	addeq	r4, r4, #1
   15498:	beq	15410 <__assert_fail@plt+0x3ef8>
   1549c:	mov	r0, #1
   154a0:	b	15420 <__assert_fail@plt+0x3f08>
   154a4:	push	{r4, r5, r6, lr}
   154a8:	mov	r4, r0
   154ac:	mov	r5, r1
   154b0:	mov	r6, r2
   154b4:	ldr	r3, [r4, #4]
   154b8:	cmp	r3, #0
   154bc:	bne	1550c <__assert_fail@plt+0x3ff4>
   154c0:	ldr	r3, [r4, #8]
   154c4:	cmp	r3, #0
   154c8:	bne	1550c <__assert_fail@plt+0x3ff4>
   154cc:	mov	r1, r4
   154d0:	mov	r0, r6
   154d4:	blx	r5
   154d8:	cmp	r0, #0
   154dc:	popne	{r4, r5, r6, pc}
   154e0:	ldr	r1, [r4]
   154e4:	cmp	r1, #0
   154e8:	popeq	{r4, r5, r6, pc}
   154ec:	ldr	r3, [r1, #8]
   154f0:	cmp	r4, r3
   154f4:	cmpne	r3, #0
   154f8:	moveq	r2, #1
   154fc:	movne	r2, #0
   15500:	cmp	r2, #0
   15504:	mov	r4, r1
   15508:	bne	154cc <__assert_fail@plt+0x3fb4>
   1550c:	mov	r4, r3
   15510:	b	154b4 <__assert_fail@plt+0x3f9c>
   15514:	push	{r4, r5, r6, r7, r8, lr}
   15518:	mov	r4, r0
   1551c:	mov	r5, r1
   15520:	mov	r6, r2
   15524:	mov	r7, #0
   15528:	mov	r1, r4
   1552c:	mov	r0, r6
   15530:	blx	r5
   15534:	cmp	r0, #0
   15538:	popne	{r4, r5, r6, r7, r8, pc}
   1553c:	ldr	r3, [r4, #4]
   15540:	cmp	r3, #0
   15544:	moveq	r1, r7
   15548:	beq	15568 <__assert_fail@plt+0x4050>
   1554c:	mov	r4, r3
   15550:	b	15528 <__assert_fail@plt+0x4010>
   15554:	ldr	r3, [r4]
   15558:	mov	r1, r4
   1555c:	cmp	r3, #0
   15560:	popeq	{r4, r5, r6, r7, r8, pc}
   15564:	mov	r4, r3
   15568:	ldr	r3, [r4, #8]
   1556c:	cmp	r3, #0
   15570:	cmpne	r1, r3
   15574:	beq	15554 <__assert_fail@plt+0x403c>
   15578:	b	1554c <__assert_fail@plt+0x4034>
   1557c:	ldr	r3, [r0, #80]	; 0x50
   15580:	push	{r4, r5, r6, lr}
   15584:	cmp	r3, #1
   15588:	mov	r4, r0
   1558c:	mov	r5, r1
   15590:	ble	155e0 <__assert_fail@plt+0x40c8>
   15594:	cmn	r1, #-1073741823	; 0xc0000001
   15598:	bls	155a4 <__assert_fail@plt+0x408c>
   1559c:	mov	r0, #12
   155a0:	pop	{r4, r5, r6, pc}
   155a4:	lsl	r6, r1, #2
   155a8:	mov	r1, r6
   155ac:	ldr	r0, [r0, #8]
   155b0:	bl	20bfc <__assert_fail@plt+0xf6e4>
   155b4:	cmp	r0, #0
   155b8:	beq	1559c <__assert_fail@plt+0x4084>
   155bc:	str	r0, [r4, #8]
   155c0:	ldr	r0, [r4, #12]
   155c4:	cmp	r0, #0
   155c8:	beq	155e0 <__assert_fail@plt+0x40c8>
   155cc:	mov	r1, r6
   155d0:	bl	20bfc <__assert_fail@plt+0xf6e4>
   155d4:	cmp	r0, #0
   155d8:	beq	1559c <__assert_fail@plt+0x4084>
   155dc:	str	r0, [r4, #12]
   155e0:	ldrb	r3, [r4, #75]	; 0x4b
   155e4:	cmp	r3, #0
   155e8:	beq	15604 <__assert_fail@plt+0x40ec>
   155ec:	mov	r1, r5
   155f0:	ldr	r0, [r4, #4]
   155f4:	bl	20bfc <__assert_fail@plt+0xf6e4>
   155f8:	cmp	r0, #0
   155fc:	beq	1559c <__assert_fail@plt+0x4084>
   15600:	str	r0, [r4, #4]
   15604:	str	r5, [r4, #36]	; 0x24
   15608:	mov	r0, #0
   1560c:	pop	{r4, r5, r6, pc}
   15610:	push	{r4, r5, r6, lr}
   15614:	mov	r5, r1
   15618:	ldm	r0, {r1, r3}
   1561c:	mov	r4, r0
   15620:	cmp	r1, r3
   15624:	bne	1564c <__assert_fail@plt+0x4134>
   15628:	add	r1, r1, #1
   1562c:	lsl	r3, r1, #1
   15630:	str	r3, [r0]
   15634:	lsl	r1, r1, #3
   15638:	ldr	r0, [r0, #8]
   1563c:	bl	20bfc <__assert_fail@plt+0xf6e4>
   15640:	cmp	r0, #0
   15644:	popeq	{r4, r5, r6, pc}
   15648:	str	r0, [r4, #8]
   1564c:	ldr	r3, [r4, #4]
   15650:	ldr	r2, [r4, #8]
   15654:	add	r1, r3, #1
   15658:	str	r1, [r4, #4]
   1565c:	mov	r0, #1
   15660:	str	r5, [r2, r3, lsl #2]
   15664:	pop	{r4, r5, r6, pc}
   15668:	push	{r4, r5, r6, r7, r8, lr}
   1566c:	mov	r7, r3
   15670:	ldr	r3, [r0, #64]	; 0x40
   15674:	mov	r4, r0
   15678:	cmp	r3, #31
   1567c:	mov	r5, r1
   15680:	mov	r6, r2
   15684:	bne	156ac <__assert_fail@plt+0x4194>
   15688:	mov	r0, #996	; 0x3e4
   1568c:	bl	20bbc <__assert_fail@plt+0xf6a4>
   15690:	subs	lr, r0, #0
   15694:	beq	1570c <__assert_fail@plt+0x41f4>
   15698:	ldr	r3, [r4, #56]	; 0x38
   1569c:	str	lr, [r4, #56]	; 0x38
   156a0:	str	r3, [lr]
   156a4:	mov	r3, #0
   156a8:	str	r3, [r4, #64]	; 0x40
   156ac:	ldr	r1, [r4, #64]	; 0x40
   156b0:	ldr	ip, [r4, #56]	; 0x38
   156b4:	add	r3, r1, #1
   156b8:	lsl	r1, r1, #5
   156bc:	add	lr, r1, #4
   156c0:	str	r3, [r4, #64]	; 0x40
   156c4:	add	lr, ip, lr
   156c8:	mov	r3, #0
   156cc:	add	ip, ip, r1
   156d0:	add	r2, ip, #24
   156d4:	stmib	ip, {r3, r5, r6}
   156d8:	cmp	r5, #0
   156dc:	ldm	r7, {r0, r1}
   156e0:	stm	r2, {r0, r1}
   156e4:	ldrb	r2, [ip, #30]
   156e8:	str	r3, [ip, #16]
   156ec:	str	r3, [ip, #20]
   156f0:	and	r2, r2, #243	; 0xf3
   156f4:	mvn	r3, #0
   156f8:	strb	r2, [ip, #30]
   156fc:	str	r3, [ip, #32]
   15700:	strne	lr, [r5]
   15704:	cmp	r6, #0
   15708:	strne	lr, [r6]
   1570c:	mov	r0, lr
   15710:	pop	{r4, r5, r6, r7, r8, pc}
   15714:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   15718:	mov	r4, r0
   1571c:	ldr	r5, [r0]
   15720:	mov	r8, r1
   15724:	add	r6, sp, #4
   15728:	mov	r7, #0
   1572c:	add	r3, r4, #20
   15730:	mov	r2, r7
   15734:	mov	r1, #0
   15738:	mov	r0, r8
   1573c:	bl	15668 <__assert_fail@plt+0x4150>
   15740:	cmp	r0, #0
   15744:	str	r0, [r6]
   15748:	beq	157a8 <__assert_fail@plt+0x4290>
   1574c:	str	r5, [r0]
   15750:	ldr	r5, [r6]
   15754:	ldrb	r3, [r5, #26]
   15758:	orr	r3, r3, #4
   1575c:	strb	r3, [r5, #26]
   15760:	ldr	r3, [r4, #4]
   15764:	cmp	r3, #0
   15768:	addne	r6, r5, #4
   1576c:	bne	15788 <__assert_fail@plt+0x4270>
   15770:	mov	r2, r7
   15774:	ldr	r3, [r4, #8]
   15778:	cmp	r3, #0
   1577c:	cmpne	r2, r3
   15780:	beq	15790 <__assert_fail@plt+0x4278>
   15784:	add	r6, r5, #8
   15788:	mov	r4, r3
   1578c:	b	1572c <__assert_fail@plt+0x4214>
   15790:	ldr	r3, [r4]
   15794:	ldr	r5, [r5]
   15798:	cmp	r3, #0
   1579c:	mov	r2, r4
   157a0:	bne	157b0 <__assert_fail@plt+0x4298>
   157a4:	ldr	r0, [sp, #4]
   157a8:	add	sp, sp, #8
   157ac:	pop	{r4, r5, r6, r7, r8, pc}
   157b0:	mov	r4, r3
   157b4:	b	15774 <__assert_fail@plt+0x425c>
   157b8:	mov	ip, #0
   157bc:	push	{r0, r1, r2, lr}
   157c0:	str	ip, [sp, #4]
   157c4:	strb	r3, [sp, #4]
   157c8:	mov	r3, sp
   157cc:	str	ip, [sp]
   157d0:	bl	15668 <__assert_fail@plt+0x4150>
   157d4:	add	sp, sp, #12
   157d8:	pop	{pc}		; (ldr pc, [sp], #4)
   157dc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   157e0:	ldr	r9, [r1]
   157e4:	ldr	r4, [r2, #4]
   157e8:	ldrb	r1, [r1, #28]
   157ec:	adds	r3, r4, #0
   157f0:	movne	r3, #1
   157f4:	ands	r3, r3, r1, lsr #4
   157f8:	beq	15818 <__assert_fail@plt+0x4300>
   157fc:	ldr	r1, [r2, #20]
   15800:	cmp	r1, #31
   15804:	bgt	158b0 <__assert_fail@plt+0x4398>
   15808:	ldr	r3, [r9, #80]	; 0x50
   1580c:	lsr	r3, r3, r1
   15810:	tst	r3, #1
   15814:	beq	158b0 <__assert_fail@plt+0x4398>
   15818:	mov	sl, r2
   1581c:	mov	r2, #0
   15820:	mov	r1, r2
   15824:	mov	r3, #8
   15828:	mov	r7, r0
   1582c:	mov	r0, r9
   15830:	bl	157b8 <__assert_fail@plt+0x42a0>
   15834:	mov	r2, #0
   15838:	mov	r3, #9
   1583c:	mov	r1, r2
   15840:	mov	r6, r0
   15844:	mov	r0, r9
   15848:	bl	157b8 <__assert_fail@plt+0x42a0>
   1584c:	cmp	r4, #0
   15850:	mov	r5, r0
   15854:	moveq	r8, r0
   15858:	beq	15874 <__assert_fail@plt+0x435c>
   1585c:	mov	r2, r0
   15860:	mov	r3, #16
   15864:	mov	r1, r4
   15868:	mov	r0, r9
   1586c:	bl	157b8 <__assert_fail@plt+0x42a0>
   15870:	mov	r8, r0
   15874:	mov	r3, #16
   15878:	mov	r2, r8
   1587c:	mov	r1, r6
   15880:	mov	r0, r9
   15884:	bl	157b8 <__assert_fail@plt+0x42a0>
   15888:	cmp	r8, #0
   1588c:	cmpne	r0, #0
   15890:	mov	r4, r0
   15894:	beq	158a4 <__assert_fail@plt+0x438c>
   15898:	cmp	r5, #0
   1589c:	cmpne	r6, #0
   158a0:	bne	158b8 <__assert_fail@plt+0x43a0>
   158a4:	mov	r4, #0
   158a8:	mov	r3, #12
   158ac:	str	r3, [r7]
   158b0:	mov	r0, r4
   158b4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   158b8:	ldr	r3, [sl, #20]
   158bc:	str	r3, [r5, #20]
   158c0:	str	r3, [r6, #20]
   158c4:	ldrb	r3, [sl, #26]
   158c8:	ldrb	r2, [r5, #26]
   158cc:	and	r3, r3, #8
   158d0:	bic	r2, r2, #8
   158d4:	orr	r2, r3, r2
   158d8:	strb	r2, [r5, #26]
   158dc:	ldrb	r2, [r6, #26]
   158e0:	bic	r2, r2, #8
   158e4:	orr	r3, r3, r2
   158e8:	strb	r3, [r6, #26]
   158ec:	b	158b0 <__assert_fail@plt+0x4398>
   158f0:	push	{r0, r1, r2, r4, r5, lr}
   158f4:	mov	r3, #0
   158f8:	ldr	r2, [r1, #4]
   158fc:	mov	r5, r0
   15900:	cmp	r2, r3
   15904:	mov	r4, r1
   15908:	str	r3, [sp, #4]
   1590c:	beq	15934 <__assert_fail@plt+0x441c>
   15910:	ldrb	r3, [r2, #24]
   15914:	cmp	r3, #17
   15918:	bne	15934 <__assert_fail@plt+0x441c>
   1591c:	mov	r1, r0
   15920:	add	r0, sp, #4
   15924:	bl	157dc <__assert_fail@plt+0x42c4>
   15928:	cmp	r0, #0
   1592c:	str	r0, [r4, #4]
   15930:	strne	r4, [r0]
   15934:	ldr	r2, [r4, #8]
   15938:	cmp	r2, #0
   1593c:	beq	15964 <__assert_fail@plt+0x444c>
   15940:	ldrb	r3, [r2, #24]
   15944:	cmp	r3, #17
   15948:	bne	15964 <__assert_fail@plt+0x444c>
   1594c:	mov	r1, r5
   15950:	add	r0, sp, #4
   15954:	bl	157dc <__assert_fail@plt+0x42c4>
   15958:	cmp	r0, #0
   1595c:	str	r0, [r4, #8]
   15960:	strne	r4, [r0]
   15964:	ldr	r0, [sp, #4]
   15968:	add	sp, sp, #12
   1596c:	pop	{r4, r5, pc}
   15970:	mov	r3, #1
   15974:	push	{r4, r5, r6, lr}
   15978:	mov	r4, r0
   1597c:	str	r3, [r0]
   15980:	str	r3, [r0, #4]
   15984:	mov	r0, #4
   15988:	mov	r5, r1
   1598c:	bl	20bbc <__assert_fail@plt+0xf6a4>
   15990:	cmp	r0, #0
   15994:	str	r0, [r4, #8]
   15998:	streq	r0, [r4, #4]
   1599c:	streq	r0, [r4]
   159a0:	strne	r5, [r0]
   159a4:	moveq	r0, #12
   159a8:	movne	r0, #0
   159ac:	pop	{r4, r5, r6, pc}
   159b0:	mov	r3, #0
   159b4:	push	{r4, lr}
   159b8:	mov	r4, r0
   159bc:	str	r1, [r0]
   159c0:	str	r3, [r0, #4]
   159c4:	lsl	r0, r1, #2
   159c8:	bl	20bbc <__assert_fail@plt+0xf6a4>
   159cc:	cmp	r0, #0
   159d0:	str	r0, [r4, #8]
   159d4:	moveq	r0, #12
   159d8:	movne	r0, #0
   159dc:	pop	{r4, pc}
   159e0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   159e4:	mov	r7, r1
   159e8:	mov	r9, r0
   159ec:	str	r2, [r7], #16
   159f0:	mov	r5, r1
   159f4:	mov	r0, r7
   159f8:	ldr	r1, [r1, #8]
   159fc:	mov	r4, r2
   15a00:	bl	159b0 <__assert_fail@plt+0x4498>
   15a04:	subs	r8, r0, #0
   15a08:	moveq	r6, r8
   15a0c:	beq	15a3c <__assert_fail@plt+0x4524>
   15a10:	mov	r8, #12
   15a14:	mov	r0, r8
   15a18:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15a1c:	ldr	r3, [r5, #12]
   15a20:	ldr	r1, [r3, r6, lsl #2]
   15a24:	ldr	r3, [r9]
   15a28:	add	r3, r3, r1, lsl #3
   15a2c:	ldrb	r3, [r3, #4]
   15a30:	tst	r3, #8
   15a34:	beq	15aac <__assert_fail@plt+0x4594>
   15a38:	add	r6, r6, #1
   15a3c:	ldr	r3, [r5, #8]
   15a40:	cmp	r6, r3
   15a44:	blt	15a1c <__assert_fail@plt+0x4504>
   15a48:	ldr	r3, [r9, #68]	; 0x44
   15a4c:	ldr	r7, [r9, #32]
   15a50:	and	r4, r4, r3
   15a54:	mov	r3, #12
   15a58:	mul	r4, r3, r4
   15a5c:	add	r6, r7, r4
   15a60:	ldr	r1, [r7, r4]
   15a64:	ldr	r3, [r6, #4]
   15a68:	cmp	r3, r1
   15a6c:	bgt	15a94 <__assert_fail@plt+0x457c>
   15a70:	add	r1, r1, #1
   15a74:	ldr	r0, [r6, #8]
   15a78:	lsl	r9, r1, #1
   15a7c:	lsl	r1, r1, #3
   15a80:	bl	20bfc <__assert_fail@plt+0xf6e4>
   15a84:	cmp	r0, #0
   15a88:	beq	15a10 <__assert_fail@plt+0x44f8>
   15a8c:	str	r0, [r6, #8]
   15a90:	str	r9, [r6, #4]
   15a94:	ldr	r3, [r7, r4]
   15a98:	ldr	r2, [r6, #8]
   15a9c:	add	r1, r3, #1
   15aa0:	str	r1, [r7, r4]
   15aa4:	str	r5, [r2, r3, lsl #2]
   15aa8:	b	15a14 <__assert_fail@plt+0x44fc>
   15aac:	mov	r0, r7
   15ab0:	bl	15610 <__assert_fail@plt+0x40f8>
   15ab4:	cmp	r0, #0
   15ab8:	bne	15a38 <__assert_fail@plt+0x4520>
   15abc:	b	15a10 <__assert_fail@plt+0x44f8>
   15ac0:	mov	r2, #32
   15ac4:	mov	r1, #0
   15ac8:	b	1141c <memset@plt>
   15acc:	push	{r4, r5, r6, r7, r8, r9, lr}
   15ad0:	sub	sp, sp, #84	; 0x54
   15ad4:	ldr	r8, [r0, #36]	; 0x24
   15ad8:	ldr	r3, [r0, #48]	; 0x30
   15adc:	ldr	r5, [r0, #28]
   15ae0:	cmp	r8, r3
   15ae4:	mov	r4, r0
   15ae8:	movge	r8, r3
   15aec:	add	r7, sp, #8
   15af0:	add	r9, sp, #16
   15af4:	cmp	r5, r8
   15af8:	bge	15c10 <__assert_fail@plt+0x46f8>
   15afc:	add	r6, r4, #16
   15b00:	ldr	r3, [r4, #64]	; 0x40
   15b04:	ldm	r6, {r0, r1}
   15b08:	cmp	r3, #0
   15b0c:	sub	r2, r8, r5
   15b10:	stm	r7, {r0, r1}
   15b14:	movne	r3, #0
   15b18:	bne	15b60 <__assert_fail@plt+0x4648>
   15b1c:	ldr	r1, [r4, #24]
   15b20:	add	r3, r5, r1
   15b24:	ldr	r1, [r4]
   15b28:	add	r1, r1, r3
   15b2c:	b	15b78 <__assert_fail@plt+0x4660>
   15b30:	ldr	r1, [r4]
   15b34:	ldr	r0, [r4, #24]
   15b38:	add	r1, r1, r5
   15b3c:	add	r1, r1, r3
   15b40:	ldrb	r1, [r1, r0]
   15b44:	ldr	r0, [r4, #64]	; 0x40
   15b48:	ldrb	r0, [r0, r1]
   15b4c:	ldr	r1, [r4, #4]
   15b50:	add	r1, r1, r5
   15b54:	strb	r0, [r1, r3]
   15b58:	strb	r0, [r9, r3]
   15b5c:	add	r3, r3, #1
   15b60:	ldr	r1, [r4, #80]	; 0x50
   15b64:	cmp	r2, r1
   15b68:	movlt	r1, r2
   15b6c:	cmp	r3, r1
   15b70:	blt	15b30 <__assert_fail@plt+0x4618>
   15b74:	mov	r1, r9
   15b78:	mov	r3, r6
   15b7c:	add	r0, sp, #4
   15b80:	bl	13358 <__assert_fail@plt+0x1e40>
   15b84:	sub	r3, r0, #1
   15b88:	cmn	r3, #3
   15b8c:	bhi	15ba8 <__assert_fail@plt+0x4690>
   15b90:	cmn	r0, #2
   15b94:	bne	15bd8 <__assert_fail@plt+0x46c0>
   15b98:	ldr	r2, [r4, #36]	; 0x24
   15b9c:	ldr	r3, [r4, #48]	; 0x30
   15ba0:	cmp	r2, r3
   15ba4:	blt	15c08 <__assert_fail@plt+0x46f0>
   15ba8:	ldr	r3, [r4]
   15bac:	ldr	r2, [r4, #24]
   15bb0:	add	r3, r3, r5
   15bb4:	ldm	r7, {r0, r1}
   15bb8:	ldrb	r3, [r3, r2]
   15bbc:	ldr	r2, [r4, #64]	; 0x40
   15bc0:	cmp	r2, #0
   15bc4:	str	r3, [sp, #4]
   15bc8:	ldrbne	r3, [r2, r3]
   15bcc:	stm	r6, {r0, r1}
   15bd0:	mov	r0, #1
   15bd4:	strne	r3, [sp, #4]
   15bd8:	ldr	r2, [r4, #8]
   15bdc:	ldr	r3, [sp, #4]
   15be0:	add	r0, r5, r0
   15be4:	str	r3, [r2, r5, lsl #2]
   15be8:	mvn	r1, #0
   15bec:	add	r3, r5, #1
   15bf0:	cmp	r3, r0
   15bf4:	mov	r5, r3
   15bf8:	bge	15af4 <__assert_fail@plt+0x45dc>
   15bfc:	str	r1, [r2, r3, lsl #2]
   15c00:	add	r3, r3, #1
   15c04:	b	15bf0 <__assert_fail@plt+0x46d8>
   15c08:	ldm	r7, {r0, r1}
   15c0c:	stm	r6, {r0, r1}
   15c10:	str	r5, [r4, #28]
   15c14:	str	r5, [r4, #32]
   15c18:	add	sp, sp, #84	; 0x54
   15c1c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   15c20:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15c24:	mov	r4, r0
   15c28:	ldr	r3, [r0, #48]	; 0x30
   15c2c:	ldr	r7, [r0, #36]	; 0x24
   15c30:	sub	sp, sp, #100	; 0x64
   15c34:	cmp	r7, r3
   15c38:	movge	r7, r3
   15c3c:	ldrb	r3, [r0, #74]	; 0x4a
   15c40:	ldr	r6, [r0, #28]
   15c44:	cmp	r3, #0
   15c48:	bne	15c6c <__assert_fail@plt+0x4754>
   15c4c:	ldr	r3, [r0, #64]	; 0x40
   15c50:	cmp	r3, #0
   15c54:	bne	15c6c <__assert_fail@plt+0x4754>
   15c58:	ldrb	r3, [r0, #76]	; 0x4c
   15c5c:	cmp	r3, #0
   15c60:	moveq	r5, r6
   15c64:	addeq	r8, sp, #24
   15c68:	beq	15ccc <__assert_fail@plt+0x47b4>
   15c6c:	ldr	r5, [r4, #32]
   15c70:	cmp	r6, r7
   15c74:	blt	15d80 <__assert_fail@plt+0x4868>
   15c78:	b	15e50 <__assert_fail@plt+0x4938>
   15c7c:	ldr	fp, [r4]
   15c80:	ldr	sl, [r4, #24]
   15c84:	add	r3, fp, r5
   15c88:	add	r6, r4, #16
   15c8c:	ldrb	r9, [r3, sl]
   15c90:	tst	r9, #128	; 0x80
   15c94:	bne	15cd8 <__assert_fail@plt+0x47c0>
   15c98:	mov	r0, r6
   15c9c:	bl	11284 <mbsinit@plt>
   15ca0:	cmp	r0, #0
   15ca4:	beq	15cd8 <__assert_fail@plt+0x47c0>
   15ca8:	mov	r0, r9
   15cac:	bl	114dc <towupper@plt>
   15cb0:	bics	r3, r0, #127	; 0x7f
   15cb4:	bne	15cd8 <__assert_fail@plt+0x47c0>
   15cb8:	ldr	r3, [r4, #4]
   15cbc:	strb	r0, [r3, r5]
   15cc0:	ldr	r3, [r4, #8]
   15cc4:	str	r0, [r3, r5, lsl #2]
   15cc8:	add	r5, r5, #1
   15ccc:	cmp	r5, r7
   15cd0:	blt	15c7c <__assert_fail@plt+0x4764>
   15cd4:	b	15ebc <__assert_fail@plt+0x49a4>
   15cd8:	ldm	r6, {r0, r1}
   15cdc:	mov	r3, r6
   15ce0:	sub	r2, r7, r5
   15ce4:	stm	r8, {r0, r1}
   15ce8:	add	r1, sl, r5
   15cec:	add	r1, fp, r1
   15cf0:	add	r0, sp, #20
   15cf4:	str	r5, [sp, #4]
   15cf8:	bl	13358 <__assert_fail@plt+0x1e40>
   15cfc:	sub	r3, r0, #1
   15d00:	cmn	r3, #4
   15d04:	mov	sl, r0
   15d08:	bhi	15e74 <__assert_fail@plt+0x495c>
   15d0c:	ldr	r9, [sp, #20]
   15d10:	mov	r0, r9
   15d14:	bl	114dc <towupper@plt>
   15d18:	cmp	r9, r0
   15d1c:	mov	r6, r0
   15d20:	beq	15e58 <__assert_fail@plt+0x4940>
   15d24:	mov	r1, r0
   15d28:	mov	r2, r8
   15d2c:	add	r0, sp, #32
   15d30:	bl	111b8 <wcrtomb@plt>
   15d34:	cmp	sl, r0
   15d38:	bne	15d7c <__assert_fail@plt+0x4864>
   15d3c:	ldr	r0, [r4, #4]
   15d40:	mov	r2, sl
   15d44:	add	r1, sp, #32
   15d48:	add	r0, r0, r5
   15d4c:	bl	11248 <memcpy@plt>
   15d50:	ldr	r2, [r4, #8]
   15d54:	add	sl, r5, sl
   15d58:	add	r3, r5, #1
   15d5c:	mvn	r1, #0
   15d60:	str	r6, [r2, r5, lsl #2]
   15d64:	cmp	r3, sl
   15d68:	mov	r5, r3
   15d6c:	bge	15ccc <__assert_fail@plt+0x47b4>
   15d70:	str	r1, [r2, r3, lsl #2]
   15d74:	add	r3, r3, #1
   15d78:	b	15d64 <__assert_fail@plt+0x484c>
   15d7c:	mov	r6, r5
   15d80:	add	r3, r4, #16
   15d84:	ldr	ip, [r4, #64]	; 0x40
   15d88:	ldm	r3, {r0, r1}
   15d8c:	add	sl, sp, #24
   15d90:	cmp	ip, #0
   15d94:	sub	r2, r7, r6
   15d98:	str	r3, [sp, #4]
   15d9c:	stm	sl, {r0, r1}
   15da0:	beq	15ef4 <__assert_fail@plt+0x49dc>
   15da4:	ldr	r0, [r4, #80]	; 0x50
   15da8:	mov	r3, #0
   15dac:	cmp	r2, r0
   15db0:	movlt	r0, r2
   15db4:	add	r9, sp, #32
   15db8:	cmp	r3, r0
   15dbc:	blt	15ed0 <__assert_fail@plt+0x49b8>
   15dc0:	ldr	r3, [sp, #4]
   15dc4:	mov	r1, r9
   15dc8:	add	r0, sp, #20
   15dcc:	bl	13358 <__assert_fail@plt+0x1e40>
   15dd0:	sub	r3, r0, #1
   15dd4:	cmn	r3, #4
   15dd8:	mov	r8, r0
   15ddc:	str	r3, [sp, #8]
   15de0:	bhi	16078 <__assert_fail@plt+0x4b60>
   15de4:	ldr	r3, [sp, #20]
   15de8:	mov	r0, r3
   15dec:	str	r3, [sp, #12]
   15df0:	bl	114dc <towupper@plt>
   15df4:	ldr	r3, [sp, #12]
   15df8:	cmp	r3, r0
   15dfc:	mov	fp, r0
   15e00:	beq	16004 <__assert_fail@plt+0x4aec>
   15e04:	mov	r1, r0
   15e08:	mov	r2, sl
   15e0c:	add	r0, sp, #32
   15e10:	bl	111b8 <wcrtomb@plt>
   15e14:	cmp	r8, r0
   15e18:	mov	r3, r0
   15e1c:	moveq	r2, r8
   15e20:	ldreq	r0, [r4, #4]
   15e24:	addeq	r1, sp, #32
   15e28:	beq	16010 <__assert_fail@plt+0x4af8>
   15e2c:	cmn	r3, #1
   15e30:	beq	16004 <__assert_fail@plt+0x4aec>
   15e34:	ldr	r0, [r4, #36]	; 0x24
   15e38:	add	r9, r6, r3
   15e3c:	cmp	r9, r0
   15e40:	bls	15f08 <__assert_fail@plt+0x49f0>
   15e44:	ldm	sl, {r0, r1}
   15e48:	ldr	r3, [sp, #4]
   15e4c:	stm	r3, {r0, r1}
   15e50:	str	r6, [r4, #28]
   15e54:	b	15ec0 <__assert_fail@plt+0x49a8>
   15e58:	ldr	r3, [r4, #24]
   15e5c:	ldr	r1, [r4]
   15e60:	add	r3, r5, r3
   15e64:	ldr	r0, [r4, #4]
   15e68:	mov	r2, sl
   15e6c:	add	r1, r1, r3
   15e70:	b	15d48 <__assert_fail@plt+0x4830>
   15e74:	cmn	r3, #3
   15e78:	bne	15e8c <__assert_fail@plt+0x4974>
   15e7c:	ldr	r2, [r4, #36]	; 0x24
   15e80:	ldr	r3, [r4, #48]	; 0x30
   15e84:	cmp	r2, r3
   15e88:	blt	15eb4 <__assert_fail@plt+0x499c>
   15e8c:	ldr	r3, [r4, #4]
   15e90:	ldr	r2, [sp, #4]
   15e94:	cmn	sl, #1
   15e98:	strb	r9, [r3, r5]
   15e9c:	ldr	r3, [r4, #8]
   15ea0:	add	r5, r5, #1
   15ea4:	str	r9, [r3, r2, lsl #2]
   15ea8:	ldmeq	r8, {r0, r1}
   15eac:	stmeq	r6, {r0, r1}
   15eb0:	b	15ccc <__assert_fail@plt+0x47b4>
   15eb4:	ldm	r8, {r0, r1}
   15eb8:	stm	r6, {r0, r1}
   15ebc:	str	r5, [r4, #28]
   15ec0:	mov	r0, #0
   15ec4:	str	r5, [r4, #32]
   15ec8:	add	sp, sp, #100	; 0x64
   15ecc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15ed0:	ldr	r1, [r4]
   15ed4:	ldr	lr, [r4, #24]
   15ed8:	add	r1, r1, r5
   15edc:	add	r1, r1, r3
   15ee0:	ldrb	r1, [r1, lr]
   15ee4:	ldrb	r1, [ip, r1]
   15ee8:	strb	r1, [r9, r3]
   15eec:	add	r3, r3, #1
   15ef0:	b	15db8 <__assert_fail@plt+0x48a0>
   15ef4:	ldr	r9, [r4, #24]
   15ef8:	add	r3, r5, r9
   15efc:	ldr	r9, [r4]
   15f00:	add	r9, r9, r3
   15f04:	b	15dc0 <__assert_fail@plt+0x48a8>
   15f08:	ldr	r2, [r4, #12]
   15f0c:	cmp	r2, #0
   15f10:	bne	15f34 <__assert_fail@plt+0x4a1c>
   15f14:	lsl	r0, r0, #2
   15f18:	str	r3, [sp, #4]
   15f1c:	bl	20bbc <__assert_fail@plt+0xf6a4>
   15f20:	ldr	r3, [sp, #4]
   15f24:	cmp	r0, #0
   15f28:	str	r0, [r4, #12]
   15f2c:	moveq	r0, #12
   15f30:	beq	15ec8 <__assert_fail@plt+0x49b0>
   15f34:	ldrb	r2, [r4, #76]	; 0x4c
   15f38:	cmp	r2, #0
   15f3c:	beq	15fd0 <__assert_fail@plt+0x4ab8>
   15f40:	ldr	r0, [r4, #4]
   15f44:	mov	r2, r3
   15f48:	add	r1, sp, #32
   15f4c:	add	r0, r0, r6
   15f50:	str	r3, [sp, #4]
   15f54:	bl	11248 <memcpy@plt>
   15f58:	ldr	r1, [r4, #8]
   15f5c:	ldr	r0, [r4, #12]
   15f60:	lsl	r2, r6, #2
   15f64:	ldr	r3, [sp, #4]
   15f68:	add	ip, r1, r2
   15f6c:	str	fp, [r1, r6, lsl #2]
   15f70:	mvn	lr, #0
   15f74:	add	r1, r0, r2
   15f78:	mov	r2, #1
   15f7c:	str	r5, [r0, r6, lsl #2]
   15f80:	cmp	r2, r3
   15f84:	bcc	15fe4 <__assert_fail@plt+0x4acc>
   15f88:	ldr	r2, [r4, #52]	; 0x34
   15f8c:	ldr	r7, [r4, #48]	; 0x30
   15f90:	cmp	r5, r2
   15f94:	sub	r3, r3, r8
   15f98:	ldrlt	r2, [r4, #56]	; 0x38
   15f9c:	add	r7, r3, r7
   15fa0:	addlt	r3, r2, r3
   15fa4:	strlt	r3, [r4, #56]	; 0x38
   15fa8:	ldr	r3, [r4, #36]	; 0x24
   15fac:	str	r7, [r4, #48]	; 0x30
   15fb0:	cmp	r7, r3
   15fb4:	movge	r7, r3
   15fb8:	mov	r6, r9
   15fbc:	add	r5, r5, r8
   15fc0:	b	15c70 <__assert_fail@plt+0x4758>
   15fc4:	ldr	r1, [r4, #12]
   15fc8:	str	r2, [r1, r2, lsl #2]
   15fcc:	add	r2, r2, #1
   15fd0:	cmp	r2, r6
   15fd4:	bne	15fc4 <__assert_fail@plt+0x4aac>
   15fd8:	mov	r2, #1
   15fdc:	strb	r2, [r4, #76]	; 0x4c
   15fe0:	b	15f40 <__assert_fail@plt+0x4a28>
   15fe4:	ldr	r0, [sp, #8]
   15fe8:	cmp	r2, r8
   15fec:	movcc	r0, r2
   15ff0:	add	r0, r5, r0
   15ff4:	str	r0, [r1, r2, lsl #2]
   15ff8:	str	lr, [ip, r2, lsl #2]
   15ffc:	add	r2, r2, #1
   16000:	b	15f80 <__assert_fail@plt+0x4a68>
   16004:	ldr	r0, [r4, #4]
   16008:	mov	r2, r8
   1600c:	mov	r1, r9
   16010:	add	r0, r0, r6
   16014:	bl	11248 <memcpy@plt>
   16018:	ldrb	r3, [r4, #76]	; 0x4c
   1601c:	cmp	r3, #0
   16020:	bne	16054 <__assert_fail@plt+0x4b3c>
   16024:	ldr	r2, [r4, #8]
   16028:	add	r5, r5, r8
   1602c:	add	r3, r6, #1
   16030:	add	r8, r6, r8
   16034:	mvn	r1, #0
   16038:	str	fp, [r2, r6, lsl #2]
   1603c:	cmp	r3, r8
   16040:	mov	r6, r3
   16044:	bge	15c70 <__assert_fail@plt+0x4758>
   16048:	str	r1, [r2, r3, lsl #2]
   1604c:	add	r3, r3, #1
   16050:	b	1603c <__assert_fail@plt+0x4b24>
   16054:	ldr	r2, [r4, #12]
   16058:	mov	r3, #0
   1605c:	add	r2, r2, r6, lsl #2
   16060:	add	r1, r5, r3
   16064:	str	r1, [r2, r3, lsl #2]
   16068:	add	r3, r3, #1
   1606c:	cmp	r8, r3
   16070:	bne	16060 <__assert_fail@plt+0x4b48>
   16074:	b	16024 <__assert_fail@plt+0x4b0c>
   16078:	sub	r3, r0, #1
   1607c:	cmn	r3, #3
   16080:	bne	16094 <__assert_fail@plt+0x4b7c>
   16084:	ldr	r2, [r4, #36]	; 0x24
   16088:	ldr	r3, [r4, #48]	; 0x30
   1608c:	cmp	r2, r3
   16090:	blt	15e44 <__assert_fail@plt+0x492c>
   16094:	ldr	r3, [r4]
   16098:	ldr	r2, [r4, #24]
   1609c:	add	r3, r3, r5
   160a0:	mov	r1, r6
   160a4:	ldrb	r3, [r3, r2]
   160a8:	ldr	r2, [r4, #64]	; 0x40
   160ac:	cmp	r2, #0
   160b0:	ldrbne	r3, [r2, r3]
   160b4:	ldr	r2, [r4, #4]
   160b8:	strb	r3, [r2, r6]
   160bc:	ldrb	r2, [r4, #76]	; 0x4c
   160c0:	cmp	r2, #0
   160c4:	ldrne	r2, [r4, #12]
   160c8:	strne	r5, [r2, r6, lsl #2]
   160cc:	ldr	r2, [r4, #8]
   160d0:	cmn	r8, #1
   160d4:	add	r5, r5, #1
   160d8:	str	r3, [r2, r1, lsl #2]
   160dc:	ldreq	r3, [sp, #4]
   160e0:	ldmeq	sl, {r0, r1}
   160e4:	add	r6, r6, #1
   160e8:	stmeq	r3, {r0, r1}
   160ec:	b	15c70 <__assert_fail@plt+0x4758>
   160f0:	push	{r4, r5, r6, lr}
   160f4:	mov	r4, r0
   160f8:	ldr	r3, [r0, #36]	; 0x24
   160fc:	ldr	r6, [r0, #48]	; 0x30
   16100:	ldr	r5, [r0, #28]
   16104:	cmp	r3, r6
   16108:	movlt	r6, r3
   1610c:	cmp	r5, r6
   16110:	blt	16120 <__assert_fail@plt+0x4c08>
   16114:	str	r5, [r4, #28]
   16118:	str	r5, [r4, #32]
   1611c:	pop	{r4, r5, r6, pc}
   16120:	ldr	r3, [r4]
   16124:	ldr	r2, [r4, #24]
   16128:	add	r3, r3, r5
   1612c:	ldrb	r0, [r3, r2]
   16130:	ldr	r3, [r4, #64]	; 0x40
   16134:	cmp	r3, #0
   16138:	ldrbne	r0, [r3, r0]
   1613c:	bl	11494 <toupper@plt>
   16140:	ldr	r3, [r4, #4]
   16144:	strb	r0, [r3, r5]
   16148:	add	r5, r5, #1
   1614c:	b	1610c <__assert_fail@plt+0x4bf4>
   16150:	ldr	r3, [r0, #36]	; 0x24
   16154:	push	{r4, r5, r6, lr}
   16158:	cmn	r3, #-536870910	; 0xe0000002
   1615c:	bls	1616c <__assert_fail@plt+0x4c54>
   16160:	mov	r5, #12
   16164:	mov	r0, r5
   16168:	pop	{r4, r5, r6, pc}
   1616c:	ldr	r2, [r0, #48]	; 0x30
   16170:	lsl	r3, r3, #1
   16174:	cmp	r3, r2
   16178:	movge	r3, r2
   1617c:	cmp	r3, r1
   16180:	movge	r1, r3
   16184:	mov	r4, r0
   16188:	bl	1557c <__assert_fail@plt+0x4064>
   1618c:	subs	r5, r0, #0
   16190:	bne	16164 <__assert_fail@plt+0x4c4c>
   16194:	ldr	r0, [r4, #100]	; 0x64
   16198:	cmp	r0, #0
   1619c:	beq	161bc <__assert_fail@plt+0x4ca4>
   161a0:	ldr	r1, [r4, #36]	; 0x24
   161a4:	add	r1, r1, #1
   161a8:	lsl	r1, r1, #2
   161ac:	bl	20bfc <__assert_fail@plt+0xf6e4>
   161b0:	cmp	r0, #0
   161b4:	beq	16160 <__assert_fail@plt+0x4c48>
   161b8:	str	r0, [r4, #100]	; 0x64
   161bc:	ldrb	r3, [r4, #72]	; 0x48
   161c0:	cmp	r3, #0
   161c4:	ldr	r3, [r4, #80]	; 0x50
   161c8:	beq	161e8 <__assert_fail@plt+0x4cd0>
   161cc:	cmp	r3, #1
   161d0:	mov	r0, r4
   161d4:	ble	161e0 <__assert_fail@plt+0x4cc8>
   161d8:	pop	{r4, r5, r6, lr}
   161dc:	b	15c20 <__assert_fail@plt+0x4708>
   161e0:	bl	160f0 <__assert_fail@plt+0x4bd8>
   161e4:	b	16164 <__assert_fail@plt+0x4c4c>
   161e8:	cmp	r3, #1
   161ec:	ble	161fc <__assert_fail@plt+0x4ce4>
   161f0:	mov	r0, r4
   161f4:	bl	15acc <__assert_fail@plt+0x45b4>
   161f8:	b	16164 <__assert_fail@plt+0x4c4c>
   161fc:	ldr	r3, [r4, #64]	; 0x40
   16200:	cmp	r3, #0
   16204:	beq	16164 <__assert_fail@plt+0x4c4c>
   16208:	mov	r0, r4
   1620c:	bl	14f10 <__assert_fail@plt+0x39f8>
   16210:	b	16164 <__assert_fail@plt+0x4c4c>
   16214:	push	{r4, lr}
   16218:	mov	r4, r0
   1621c:	ldr	r0, [r0]
   16220:	bl	130e8 <__assert_fail@plt+0x1bd0>
   16224:	ldr	r0, [r4, #4]
   16228:	bl	130e8 <__assert_fail@plt+0x1bd0>
   1622c:	ldr	r0, [r4, #8]
   16230:	bl	130e8 <__assert_fail@plt+0x1bd0>
   16234:	ldr	r0, [r4, #12]
   16238:	bl	130e8 <__assert_fail@plt+0x1bd0>
   1623c:	mov	r0, r4
   16240:	pop	{r4, lr}
   16244:	b	130e8 <__assert_fail@plt+0x1bd0>
   16248:	ldr	r2, [r0, #4]
   1624c:	ldr	r3, [pc, #32]	; 16274 <__assert_fail@plt+0x4d5c>
   16250:	and	r3, r3, r2
   16254:	cmp	r3, #6
   16258:	bne	16264 <__assert_fail@plt+0x4d4c>
   1625c:	ldr	r0, [r0]
   16260:	b	16214 <__assert_fail@plt+0x4cfc>
   16264:	cmp	r3, #3
   16268:	bxne	lr
   1626c:	ldr	r0, [r0]
   16270:	b	130e8 <__assert_fail@plt+0x1bd0>
   16274:	strdeq	r0, [r4], -pc	; <UNPREDICTABLE>
   16278:	add	r0, r1, #20
   1627c:	push	{r4, lr}
   16280:	bl	16248 <__assert_fail@plt+0x4d30>
   16284:	mov	r0, #0
   16288:	pop	{r4, pc}
   1628c:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16290:	mov	r4, r0
   16294:	ldr	r6, [r0, #4]
   16298:	ldr	r3, [r0, #8]
   1629c:	stm	sp, {r1, r2}
   162a0:	cmp	r3, r6
   162a4:	mov	r7, sp
   162a8:	ldrb	r5, [sp, #4]
   162ac:	bcc	16380 <__assert_fail@plt+0x4e68>
   162b0:	ldr	r3, [pc, #376]	; 16430 <__assert_fail@plt+0x4f18>
   162b4:	lsl	r8, r6, #1
   162b8:	cmp	r8, r3
   162bc:	bls	162cc <__assert_fail@plt+0x4db4>
   162c0:	mvn	r0, #0
   162c4:	add	sp, sp, #12
   162c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   162cc:	lsl	r1, r6, #4
   162d0:	ldr	r0, [r0]
   162d4:	bl	20bfc <__assert_fail@plt+0xf6e4>
   162d8:	cmp	r0, #0
   162dc:	beq	162c0 <__assert_fail@plt+0x4da8>
   162e0:	lsl	r6, r6, #3
   162e4:	mov	r1, r6
   162e8:	str	r0, [r4]
   162ec:	ldr	r0, [r4, #12]
   162f0:	bl	20bfc <__assert_fail@plt+0xf6e4>
   162f4:	mov	r1, r6
   162f8:	mov	r6, #12
   162fc:	mul	r6, r6, r8
   16300:	mov	sl, r0
   16304:	ldr	r0, [r4, #16]
   16308:	bl	20bfc <__assert_fail@plt+0xf6e4>
   1630c:	mov	r1, r6
   16310:	mov	fp, r0
   16314:	ldr	r0, [r4, #20]
   16318:	bl	20bfc <__assert_fail@plt+0xf6e4>
   1631c:	mov	r1, r6
   16320:	mov	r9, r0
   16324:	ldr	r0, [r4, #24]
   16328:	bl	20bfc <__assert_fail@plt+0xf6e4>
   1632c:	cmp	fp, #0
   16330:	cmpne	sl, #0
   16334:	mov	r6, r0
   16338:	beq	16348 <__assert_fail@plt+0x4e30>
   1633c:	cmp	r0, #0
   16340:	cmpne	r9, #0
   16344:	bne	1636c <__assert_fail@plt+0x4e54>
   16348:	mov	r0, sl
   1634c:	bl	130e8 <__assert_fail@plt+0x1bd0>
   16350:	mov	r0, fp
   16354:	bl	130e8 <__assert_fail@plt+0x1bd0>
   16358:	mov	r0, r9
   1635c:	bl	130e8 <__assert_fail@plt+0x1bd0>
   16360:	mov	r0, r6
   16364:	bl	130e8 <__assert_fail@plt+0x1bd0>
   16368:	b	162c0 <__assert_fail@plt+0x4da8>
   1636c:	str	sl, [r4, #12]
   16370:	str	fp, [r4, #16]
   16374:	str	r9, [r4, #20]
   16378:	str	r0, [r4, #24]
   1637c:	str	r8, [r4, #4]
   16380:	ldr	ip, [r4, #8]
   16384:	ldr	r3, [r4]
   16388:	ldm	r7, {r0, r1}
   1638c:	add	r3, r3, ip, lsl #3
   16390:	cmp	r5, #5
   16394:	stm	r3, {r0, r1}
   16398:	subne	r5, r5, #6
   1639c:	bic	r1, r1, #261120	; 0x3fc00
   163a0:	bic	r1, r1, #768	; 0x300
   163a4:	clzne	r5, r5
   163a8:	str	r1, [r3, #4]
   163ac:	lsrne	r5, r5, #5
   163b0:	bne	163c4 <__assert_fail@plt+0x4eac>
   163b4:	ldr	r5, [r4, #92]	; 0x5c
   163b8:	cmp	r5, #1
   163bc:	movle	r5, #0
   163c0:	movgt	r5, #1
   163c4:	ldrb	r2, [r3, #6]
   163c8:	bic	r2, r2, #16
   163cc:	orr	r5, r2, r5, lsl #4
   163d0:	strb	r5, [r3, #6]
   163d4:	ldr	r3, [r4, #12]
   163d8:	mvn	r2, #0
   163dc:	str	r2, [r3, ip, lsl #2]
   163e0:	ldr	r1, [r4, #8]
   163e4:	mov	r2, #12
   163e8:	ldr	ip, [r4, #20]
   163ec:	mul	r1, r2, r1
   163f0:	mov	r3, #0
   163f4:	add	r0, ip, r1
   163f8:	str	r3, [ip, r1]
   163fc:	str	r3, [r0, #4]
   16400:	str	r3, [r0, #8]
   16404:	ldr	r1, [r4, #8]
   16408:	ldr	r0, [r4, #24]
   1640c:	mul	r2, r2, r1
   16410:	add	r1, r0, r2
   16414:	str	r3, [r0, r2]
   16418:	str	r3, [r1, #4]
   1641c:	str	r3, [r1, #8]
   16420:	ldr	r0, [r4, #8]
   16424:	add	r3, r0, #1
   16428:	str	r3, [r4, #8]
   1642c:	b	162c4 <__assert_fail@plt+0x4dac>
   16430:	ldrbne	r5, [r5, #-1365]	; 0xfffffaab
   16434:	ldr	r3, [r0]
   16438:	push	{r4, r5, r6, r7, r8, lr}
   1643c:	lsl	r7, r1, #3
   16440:	add	r3, r3, r7
   16444:	mov	r6, r1
   16448:	mov	r4, r2
   1644c:	ldm	r3, {r1, r2}
   16450:	mov	r5, r0
   16454:	bl	1628c <__assert_fail@plt+0x4d74>
   16458:	cmn	r0, #1
   1645c:	popeq	{r4, r5, r6, r7, r8, pc}
   16460:	ldr	lr, [r5]
   16464:	ldr	ip, [pc, #80]	; 164bc <__assert_fail@plt+0x4fa4>
   16468:	add	r1, lr, r0, lsl #3
   1646c:	and	r2, r4, ip
   16470:	ldr	r3, [r1, #4]
   16474:	ldr	r4, [pc, #68]	; 164c0 <__assert_fail@plt+0x4fa8>
   16478:	add	r7, lr, r7
   1647c:	bic	r3, r3, r4
   16480:	orr	r3, r3, r2, lsl #8
   16484:	str	r3, [r1, #4]
   16488:	ldr	lr, [r7, #4]
   1648c:	bic	r3, r3, r4
   16490:	and	ip, ip, lr, lsr #8
   16494:	orr	r2, r2, ip
   16498:	orr	r3, r3, r2, lsl #8
   1649c:	str	r3, [r1, #4]
   164a0:	lsr	r2, r3, #16
   164a4:	uxtb	r3, r2
   164a8:	orr	r3, r3, #4
   164ac:	strb	r3, [r1, #6]
   164b0:	ldr	r3, [r5, #16]
   164b4:	str	r6, [r3, r0, lsl #2]
   164b8:	pop	{r4, r5, r6, r7, r8, pc}
   164bc:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   164c0:	andeq	pc, r3, r0, lsl #30
   164c4:	push	{r4, lr}
   164c8:	mov	r4, r0
   164cc:	ldr	r0, [r0, #24]
   164d0:	bl	130e8 <__assert_fail@plt+0x1bd0>
   164d4:	ldr	r0, [r4, #36]	; 0x24
   164d8:	bl	130e8 <__assert_fail@plt+0x1bd0>
   164dc:	ldr	r3, [r4, #40]	; 0x28
   164e0:	add	r2, r4, #4
   164e4:	cmp	r3, r2
   164e8:	beq	164fc <__assert_fail@plt+0x4fe4>
   164ec:	ldr	r0, [r3, #8]
   164f0:	bl	130e8 <__assert_fail@plt+0x1bd0>
   164f4:	ldr	r0, [r4, #40]	; 0x28
   164f8:	bl	130e8 <__assert_fail@plt+0x1bd0>
   164fc:	ldr	r0, [r4, #12]
   16500:	bl	130e8 <__assert_fail@plt+0x1bd0>
   16504:	ldr	r0, [r4, #48]	; 0x30
   16508:	bl	130e8 <__assert_fail@plt+0x1bd0>
   1650c:	ldr	r0, [r4, #44]	; 0x2c
   16510:	bl	130e8 <__assert_fail@plt+0x1bd0>
   16514:	mov	r0, r4
   16518:	pop	{r4, lr}
   1651c:	b	130e8 <__assert_fail@plt+0x1bd0>
   16520:	push	{r4, lr}
   16524:	mov	r4, r0
   16528:	ldr	r0, [r0, #8]
   1652c:	bl	130e8 <__assert_fail@plt+0x1bd0>
   16530:	ldr	r0, [r4, #12]
   16534:	bl	130e8 <__assert_fail@plt+0x1bd0>
   16538:	ldrb	r3, [r4, #75]	; 0x4b
   1653c:	cmp	r3, #0
   16540:	popeq	{r4, pc}
   16544:	ldr	r0, [r4, #4]
   16548:	pop	{r4, lr}
   1654c:	b	130e8 <__assert_fail@plt+0x1bd0>
   16550:	ldr	r3, [r0]
   16554:	push	{r4, r5, r6, r7, r8, lr}
   16558:	cmp	r3, #0
   1655c:	mov	r4, r0
   16560:	movne	r5, #0
   16564:	bne	165f4 <__assert_fail@plt+0x50dc>
   16568:	ldr	r0, [r4, #12]
   1656c:	bl	130e8 <__assert_fail@plt+0x1bd0>
   16570:	mov	r5, #0
   16574:	mov	r6, r5
   16578:	ldr	r3, [r4, #8]
   1657c:	cmp	r3, r6
   16580:	bhi	16604 <__assert_fail@plt+0x50ec>
   16584:	ldr	r0, [r4, #20]
   16588:	bl	130e8 <__assert_fail@plt+0x1bd0>
   1658c:	ldr	r0, [r4, #24]
   16590:	bl	130e8 <__assert_fail@plt+0x1bd0>
   16594:	ldr	r0, [r4, #28]
   16598:	bl	130e8 <__assert_fail@plt+0x1bd0>
   1659c:	ldr	r0, [r4]
   165a0:	bl	130e8 <__assert_fail@plt+0x1bd0>
   165a4:	ldr	r3, [r4, #32]
   165a8:	cmp	r3, #0
   165ac:	movne	r6, #0
   165b0:	movne	r8, #12
   165b4:	bne	1667c <__assert_fail@plt+0x5164>
   165b8:	ldr	r0, [r4, #32]
   165bc:	bl	130e8 <__assert_fail@plt+0x1bd0>
   165c0:	ldr	r0, [r4, #60]	; 0x3c
   165c4:	ldr	r3, [pc, #220]	; 166a8 <__assert_fail@plt+0x5190>
   165c8:	cmp	r0, r3
   165cc:	bne	166a0 <__assert_fail@plt+0x5188>
   165d0:	ldr	r0, [r4, #132]	; 0x84
   165d4:	bl	130e8 <__assert_fail@plt+0x1bd0>
   165d8:	mov	r0, r4
   165dc:	pop	{r4, r5, r6, r7, r8, lr}
   165e0:	b	130e8 <__assert_fail@plt+0x1bd0>
   165e4:	ldr	r0, [r4]
   165e8:	add	r0, r0, r5, lsl #3
   165ec:	bl	16248 <__assert_fail@plt+0x4d30>
   165f0:	add	r5, r5, #1
   165f4:	ldr	r3, [r4, #8]
   165f8:	cmp	r3, r5
   165fc:	bhi	165e4 <__assert_fail@plt+0x50cc>
   16600:	b	16568 <__assert_fail@plt+0x5050>
   16604:	ldr	r3, [r4, #24]
   16608:	cmp	r3, #0
   1660c:	beq	1661c <__assert_fail@plt+0x5104>
   16610:	add	r3, r3, r5
   16614:	ldr	r0, [r3, #8]
   16618:	bl	130e8 <__assert_fail@plt+0x1bd0>
   1661c:	ldr	r3, [r4, #28]
   16620:	cmp	r3, #0
   16624:	beq	16634 <__assert_fail@plt+0x511c>
   16628:	add	r3, r3, r5
   1662c:	ldr	r0, [r3, #8]
   16630:	bl	130e8 <__assert_fail@plt+0x1bd0>
   16634:	ldr	r3, [r4, #20]
   16638:	cmp	r3, #0
   1663c:	beq	1664c <__assert_fail@plt+0x5134>
   16640:	add	r3, r3, r5
   16644:	ldr	r0, [r3, #8]
   16648:	bl	130e8 <__assert_fail@plt+0x1bd0>
   1664c:	add	r6, r6, #1
   16650:	add	r5, r5, #12
   16654:	b	16578 <__assert_fail@plt+0x5060>
   16658:	ldr	r5, [r4, #32]
   1665c:	mov	r7, #0
   16660:	mla	r5, r8, r6, r5
   16664:	ldr	r3, [r5]
   16668:	cmp	r7, r3
   1666c:	blt	1668c <__assert_fail@plt+0x5174>
   16670:	ldr	r0, [r5, #8]
   16674:	bl	130e8 <__assert_fail@plt+0x1bd0>
   16678:	add	r6, r6, #1
   1667c:	ldr	r3, [r4, #68]	; 0x44
   16680:	cmp	r3, r6
   16684:	bcs	16658 <__assert_fail@plt+0x5140>
   16688:	b	165b8 <__assert_fail@plt+0x50a0>
   1668c:	ldr	r3, [r5, #8]
   16690:	ldr	r0, [r3, r7, lsl #2]
   16694:	bl	164c4 <__assert_fail@plt+0x4fac>
   16698:	add	r7, r7, #1
   1669c:	b	16664 <__assert_fail@plt+0x514c>
   166a0:	bl	130e8 <__assert_fail@plt+0x1bd0>
   166a4:	b	165d0 <__assert_fail@plt+0x50b8>
   166a8:	andeq	r2, r2, ip, lsr r2
   166ac:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   166b0:	mov	r5, #0
   166b4:	mov	r6, r0
   166b8:	mov	r8, r5
   166bc:	ldr	r3, [r6, #124]	; 0x7c
   166c0:	cmp	r5, r3
   166c4:	blt	166d4 <__assert_fail@plt+0x51bc>
   166c8:	str	r8, [r6, #124]	; 0x7c
   166cc:	str	r8, [r6, #108]	; 0x6c
   166d0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   166d4:	ldr	r3, [r6, #132]	; 0x84
   166d8:	mov	r7, #0
   166dc:	ldr	r4, [r3, r5, lsl #2]
   166e0:	ldr	r3, [r4, #16]
   166e4:	cmp	r7, r3
   166e8:	blt	16720 <__assert_fail@plt+0x5208>
   166ec:	ldr	r0, [r4, #20]
   166f0:	bl	130e8 <__assert_fail@plt+0x1bd0>
   166f4:	ldr	r3, [r4, #8]
   166f8:	cmp	r3, #0
   166fc:	beq	16710 <__assert_fail@plt+0x51f8>
   16700:	ldr	r0, [r3, #8]
   16704:	bl	130e8 <__assert_fail@plt+0x1bd0>
   16708:	ldr	r0, [r4, #8]
   1670c:	bl	130e8 <__assert_fail@plt+0x1bd0>
   16710:	mov	r0, r4
   16714:	bl	130e8 <__assert_fail@plt+0x1bd0>
   16718:	add	r5, r5, #1
   1671c:	b	166bc <__assert_fail@plt+0x51a4>
   16720:	ldr	r3, [r4, #20]
   16724:	ldr	r9, [r3, r7, lsl #2]
   16728:	add	r7, r7, #1
   1672c:	ldr	r0, [r9, #16]
   16730:	bl	130e8 <__assert_fail@plt+0x1bd0>
   16734:	mov	r0, r9
   16738:	bl	130e8 <__assert_fail@plt+0x1bd0>
   1673c:	b	166e0 <__assert_fail@plt+0x51c8>
   16740:	push	{r4, r5, r6, lr}
   16744:	mov	r4, r0
   16748:	ldr	r0, [r0, #8]
   1674c:	add	r5, r4, #12
   16750:	cmp	r0, r5
   16754:	beq	1675c <__assert_fail@plt+0x5244>
   16758:	bl	130e8 <__assert_fail@plt+0x1bd0>
   1675c:	mov	r2, #0
   16760:	mov	r3, #16
   16764:	str	r5, [r4, #8]
   16768:	stm	r4, {r2, r3}
   1676c:	pop	{r4, r5, r6, pc}
   16770:	push	{r4, r5, r6, r7, r8, lr}
   16774:	subs	r4, r0, #0
   16778:	movne	r5, #0
   1677c:	movne	r7, #24
   16780:	bne	167b4 <__assert_fail@plt+0x529c>
   16784:	mov	r0, #0
   16788:	pop	{r4, r5, r6, r7, r8, pc}
   1678c:	mul	r6, r7, r5
   16790:	ldr	r2, [r4, #8]
   16794:	add	r5, r5, #1
   16798:	add	r2, r2, r6
   1679c:	ldr	r0, [r2, #20]
   167a0:	bl	130e8 <__assert_fail@plt+0x1bd0>
   167a4:	ldr	r3, [r4, #8]
   167a8:	add	r3, r3, r6
   167ac:	ldr	r0, [r3, #8]
   167b0:	bl	130e8 <__assert_fail@plt+0x1bd0>
   167b4:	ldr	r3, [r4]
   167b8:	cmp	r5, r3
   167bc:	blt	1678c <__assert_fail@plt+0x5274>
   167c0:	ldr	r0, [r4, #8]
   167c4:	bl	130e8 <__assert_fail@plt+0x1bd0>
   167c8:	b	16784 <__assert_fail@plt+0x526c>
   167cc:	mov	r3, r1
   167d0:	ldr	r2, [r1, #28]
   167d4:	ldrb	r1, [r1, #24]
   167d8:	sub	r1, r1, #2
   167dc:	cmp	r1, #14
   167e0:	ldrls	pc, [pc, r1, lsl #2]
   167e4:	b	168f0 <__assert_fail@plt+0x53d8>
   167e8:	andeq	r6, r1, r0, lsl #18
   167ec:	strdeq	r6, [r1], -r0
   167f0:	andeq	r6, r1, ip, asr #17
   167f4:	strdeq	r6, [r1], -r0
   167f8:	strdeq	r6, [r1], -r0
   167fc:	strdeq	r6, [r1], -r0
   16800:			; <UNDEFINED> instruction: 0x000168b4
   16804:			; <UNDEFINED> instruction: 0x000168b4
   16808:	andeq	r6, r1, r4, lsr #16
   1680c:	andeq	r6, r1, r4, lsr #16
   16810:			; <UNDEFINED> instruction: 0x000168b4
   16814:	strdeq	r6, [r1], -r0
   16818:	strdeq	r6, [r1], -r0
   1681c:	strdeq	r6, [r1], -r0
   16820:	andeq	r6, r1, r0, lsl #18
   16824:	ldrb	r1, [r0, #88]	; 0x58
   16828:	push	{r4, r5, r6, r7, r8, lr}
   1682c:	mov	r4, #12
   16830:	orr	r1, r1, #1
   16834:	strb	r1, [r0, #88]	; 0x58
   16838:	ldr	r1, [r3, #4]
   1683c:	mul	r2, r4, r2
   16840:	cmp	r1, #0
   16844:	mov	r7, #2
   16848:	ldreq	r1, [r3, #16]
   1684c:	ldrne	r1, [r1, #12]
   16850:	ldr	r8, [r1, #28]
   16854:	ldr	r1, [r3, #8]
   16858:	cmp	r1, #0
   1685c:	ldrne	r3, [r1, #12]
   16860:	ldreq	r3, [r3, #16]
   16864:	ldr	r5, [r3, #28]
   16868:	ldr	r3, [r0, #20]
   1686c:	mov	r0, #8
   16870:	add	r6, r3, r2
   16874:	str	r7, [r3, r2]
   16878:	bl	20bbc <__assert_fail@plt+0xf6a4>
   1687c:	cmp	r0, #0
   16880:	str	r0, [r6, #8]
   16884:	beq	16908 <__assert_fail@plt+0x53f0>
   16888:	cmp	r8, r5
   1688c:	moveq	r3, #1
   16890:	streq	r3, [r6, #4]
   16894:	streq	r8, [r0]
   16898:	beq	168ac <__assert_fail@plt+0x5394>
   1689c:	str	r7, [r6, #4]
   168a0:	strlt	r8, [r0]
   168a4:	strlt	r5, [r0, #4]
   168a8:	stmge	r0, {r5, r8}
   168ac:	mov	r0, #0
   168b0:	pop	{r4, r5, r6, r7, r8, pc}
   168b4:	ldr	r1, [r3, #16]
   168b8:	ldr	r3, [r0, #20]
   168bc:	ldr	r1, [r1, #28]
   168c0:	mov	r0, #12
   168c4:	mla	r0, r0, r2, r3
   168c8:	b	15970 <__assert_fail@plt+0x4458>
   168cc:	ldr	r1, [r3, #16]
   168d0:	ldr	ip, [r0, #12]
   168d4:	ldr	r1, [r1, #28]
   168d8:	str	r1, [ip, r2, lsl #2]
   168dc:	ldrb	r3, [r3, #24]
   168e0:	cmp	r3, #4
   168e4:	bne	16900 <__assert_fail@plt+0x53e8>
   168e8:	ldr	r3, [r0, #20]
   168ec:	b	168c0 <__assert_fail@plt+0x53a8>
   168f0:	ldr	r3, [r3, #16]
   168f4:	ldr	r1, [r3, #28]
   168f8:	ldr	r3, [r0, #12]
   168fc:	str	r1, [r3, r2, lsl #2]
   16900:	mov	r0, #0
   16904:	bx	lr
   16908:	mov	r0, r4
   1690c:	pop	{r4, r5, r6, r7, r8, pc}
   16910:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16914:	mov	r4, r0
   16918:	ldr	sl, [r0, #84]	; 0x54
   1691c:	mov	r9, r1
   16920:	mov	r6, r2
   16924:	mov	r5, #0
   16928:	mov	r7, #24
   1692c:	mov	r8, #1
   16930:	ldr	r3, [r9, #4]
   16934:	cmp	r5, r3
   16938:	blt	16948 <__assert_fail@plt+0x5430>
   1693c:	mov	r0, #0
   16940:	add	sp, sp, #12
   16944:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16948:	ldr	r3, [r9, #8]
   1694c:	ldr	fp, [r3, r5, lsl #2]
   16950:	ldr	r3, [sl]
   16954:	add	r2, r3, fp, lsl #3
   16958:	ldrb	r2, [r2, #4]
   1695c:	cmp	r2, #8
   16960:	bne	16a04 <__assert_fail@plt+0x54ec>
   16964:	ldr	r2, [r3, fp, lsl #3]
   16968:	cmp	r2, #31
   1696c:	bgt	16a04 <__assert_fail@plt+0x54ec>
   16970:	ldr	r3, [sl, #80]	; 0x50
   16974:	lsr	r3, r3, r2
   16978:	tst	r3, #1
   1697c:	beq	16a04 <__assert_fail@plt+0x54ec>
   16980:	ldr	r1, [r4, #128]	; 0x80
   16984:	ldr	r3, [r4, #124]	; 0x7c
   16988:	ldr	r0, [r4, #132]	; 0x84
   1698c:	cmp	r1, r3
   16990:	bne	169b8 <__assert_fail@plt+0x54a0>
   16994:	lsl	r3, r1, #1
   16998:	lsl	r1, r1, #3
   1699c:	str	r3, [sp]
   169a0:	bl	20bfc <__assert_fail@plt+0xf6e4>
   169a4:	cmp	r0, #0
   169a8:	beq	16a0c <__assert_fail@plt+0x54f4>
   169ac:	ldr	r3, [sp]
   169b0:	str	r0, [r4, #132]	; 0x84
   169b4:	str	r3, [r4, #128]	; 0x80
   169b8:	ldr	r2, [r4, #124]	; 0x7c
   169bc:	ldr	r3, [r4, #132]	; 0x84
   169c0:	mov	r1, r7
   169c4:	mov	r0, r8
   169c8:	str	r2, [sp, #4]
   169cc:	str	r3, [sp]
   169d0:	bl	20b74 <__assert_fail@plt+0xf65c>
   169d4:	ldr	r3, [sp]
   169d8:	ldr	r2, [sp, #4]
   169dc:	str	r0, [r3, r2, lsl #2]
   169e0:	ldr	r3, [r4, #124]	; 0x7c
   169e4:	ldr	r2, [r4, #132]	; 0x84
   169e8:	ldr	r2, [r2, r3, lsl #2]
   169ec:	cmp	r2, #0
   169f0:	beq	16a0c <__assert_fail@plt+0x54f4>
   169f4:	add	r3, r3, #1
   169f8:	str	fp, [r2, #4]
   169fc:	str	r3, [r4, #124]	; 0x7c
   16a00:	str	r6, [r2]
   16a04:	add	r5, r5, #1
   16a08:	b	16930 <__assert_fail@plt+0x5418>
   16a0c:	mov	r0, #12
   16a10:	b	16940 <__assert_fail@plt+0x5428>
   16a14:	ldr	r3, [r0, #36]	; 0x24
   16a18:	push	{r4, r5, r6, lr}
   16a1c:	cmp	r3, r1
   16a20:	mov	r4, r0
   16a24:	mov	r5, r1
   16a28:	ldr	r6, [r0, #104]	; 0x68
   16a2c:	bgt	16a3c <__assert_fail@plt+0x5524>
   16a30:	ldr	r2, [r0, #48]	; 0x30
   16a34:	cmp	r3, r2
   16a38:	blt	16a64 <__assert_fail@plt+0x554c>
   16a3c:	ldr	r3, [r4, #28]
   16a40:	cmp	r5, r3
   16a44:	bge	16a58 <__assert_fail@plt+0x5540>
   16a48:	cmp	r6, r5
   16a4c:	blt	16a7c <__assert_fail@plt+0x5564>
   16a50:	mov	r0, #0
   16a54:	pop	{r4, r5, r6, pc}
   16a58:	ldr	r2, [r4, #48]	; 0x30
   16a5c:	cmp	r3, r2
   16a60:	bge	16a48 <__assert_fail@plt+0x5530>
   16a64:	add	r1, r5, #1
   16a68:	mov	r0, r4
   16a6c:	bl	16150 <__assert_fail@plt+0x4c38>
   16a70:	cmp	r0, #0
   16a74:	beq	16a48 <__assert_fail@plt+0x5530>
   16a78:	pop	{r4, r5, r6, pc}
   16a7c:	sub	r2, r5, r6
   16a80:	ldr	r0, [r4, #100]	; 0x64
   16a84:	add	r6, r6, #1
   16a88:	lsl	r2, r2, #2
   16a8c:	mov	r1, #0
   16a90:	add	r0, r0, r6, lsl #2
   16a94:	bl	1141c <memset@plt>
   16a98:	str	r5, [r4, #104]	; 0x68
   16a9c:	b	16a50 <__assert_fail@plt+0x5538>
   16aa0:	push	{r4, r5, r6, r7, r8, lr}
   16aa4:	subs	r4, r0, #0
   16aa8:	ldr	r7, [sp, #28]
   16aac:	beq	16b40 <__assert_fail@plt+0x5628>
   16ab0:	ldr	r5, [r4]
   16ab4:	cmp	r5, #0
   16ab8:	beq	16b40 <__assert_fail@plt+0x5628>
   16abc:	sub	ip, r5, #1
   16ac0:	mov	r5, #24
   16ac4:	mov	r0, r3
   16ac8:	mul	r5, r5, ip
   16acc:	ldr	r3, [r4, #8]
   16ad0:	str	ip, [r4]
   16ad4:	add	ip, r3, r5
   16ad8:	ldr	r3, [r3, r5]
   16adc:	lsl	r6, r2, #3
   16ae0:	str	r3, [r1]
   16ae4:	mov	r2, r6
   16ae8:	ldr	r1, [ip, #8]
   16aec:	bl	11248 <memcpy@plt>
   16af0:	ldr	r3, [r4, #8]
   16af4:	mov	r2, r6
   16af8:	add	r3, r3, r5
   16afc:	ldr	r0, [sp, #24]
   16b00:	ldr	r1, [r3, #8]
   16b04:	add	r1, r1, r6
   16b08:	bl	11248 <memcpy@plt>
   16b0c:	ldr	r0, [r7, #8]
   16b10:	bl	130e8 <__assert_fail@plt+0x1bd0>
   16b14:	ldr	r3, [r4, #8]
   16b18:	add	r3, r3, r5
   16b1c:	ldr	r0, [r3, #8]
   16b20:	bl	130e8 <__assert_fail@plt+0x1bd0>
   16b24:	ldr	r3, [r4, #8]
   16b28:	add	r5, r3, r5
   16b2c:	add	r3, r5, #12
   16b30:	ldm	r3, {r0, r1, r2}
   16b34:	stm	r7, {r0, r1, r2}
   16b38:	ldr	r0, [r5, #4]
   16b3c:	pop	{r4, r5, r6, r7, r8, pc}
   16b40:	mvn	r0, #0
   16b44:	pop	{r4, r5, r6, r7, r8, pc}
   16b48:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16b4c:	mov	r9, r3
   16b50:	ldr	r3, [sp, #36]	; 0x24
   16b54:	mov	r5, r0
   16b58:	tst	r3, #4194304	; 0x400000
   16b5c:	mov	r4, r1
   16b60:	mov	r8, r2
   16b64:	ldr	r6, [sp, #32]
   16b68:	beq	16b9c <__assert_fail@plt+0x5684>
   16b6c:	mov	r0, r6
   16b70:	ldr	r1, [pc, #1816]	; 17290 <__assert_fail@plt+0x5d78>
   16b74:	bl	111d0 <strcmp@plt>
   16b78:	cmp	r0, #0
   16b7c:	ldreq	r6, [pc, #1808]	; 17294 <__assert_fail@plt+0x5d7c>
   16b80:	beq	16b9c <__assert_fail@plt+0x5684>
   16b84:	mov	r0, r6
   16b88:	ldr	r1, [pc, #1800]	; 17298 <__assert_fail@plt+0x5d80>
   16b8c:	bl	111d0 <strcmp@plt>
   16b90:	ldr	r3, [pc, #1788]	; 17294 <__assert_fail@plt+0x5d7c>
   16b94:	cmp	r0, #0
   16b98:	moveq	r6, r3
   16b9c:	ldr	r7, [r9]
   16ba0:	ldr	r3, [r8, #36]	; 0x24
   16ba4:	cmp	r7, r3
   16ba8:	bne	16bd0 <__assert_fail@plt+0x56b8>
   16bac:	lsl	r7, r7, #1
   16bb0:	add	r7, r7, #1
   16bb4:	ldr	r0, [r8, #12]
   16bb8:	lsl	r1, r7, #2
   16bbc:	bl	20bfc <__assert_fail@plt+0xf6e4>
   16bc0:	cmp	r0, #0
   16bc4:	beq	17280 <__assert_fail@plt+0x5d68>
   16bc8:	str	r0, [r8, #12]
   16bcc:	str	r7, [r9]
   16bd0:	ldr	r7, [r8, #36]	; 0x24
   16bd4:	mov	r0, r6
   16bd8:	add	r3, r7, #1
   16bdc:	str	r3, [r8, #36]	; 0x24
   16be0:	ldr	r9, [r8, #12]
   16be4:	bl	111a0 <wctype@plt>
   16be8:	ldr	r1, [pc, #1708]	; 1729c <__assert_fail@plt+0x5d84>
   16bec:	str	r0, [r9, r7, lsl #2]
   16bf0:	mov	r0, r6
   16bf4:	bl	111d0 <strcmp@plt>
   16bf8:	subs	r7, r0, #0
   16bfc:	bne	16c7c <__assert_fail@plt+0x5764>
   16c00:	cmp	r5, #0
   16c04:	beq	16c44 <__assert_fail@plt+0x572c>
   16c08:	bl	113b0 <__ctype_b_loc@plt>
   16c0c:	mov	r6, r0
   16c10:	ldr	r2, [r6]
   16c14:	lsl	r3, r7, #1
   16c18:	ldrh	r3, [r2, r3]
   16c1c:	tst	r3, #8
   16c20:	beq	16c30 <__assert_fail@plt+0x5718>
   16c24:	ldrb	r1, [r5, r7]
   16c28:	mov	r0, r4
   16c2c:	bl	14dc8 <__assert_fail@plt+0x38b0>
   16c30:	add	r7, r7, #1
   16c34:	cmp	r7, #256	; 0x100
   16c38:	bne	16c10 <__assert_fail@plt+0x56f8>
   16c3c:	mov	r0, #0
   16c40:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16c44:	bl	113b0 <__ctype_b_loc@plt>
   16c48:	mov	r5, r0
   16c4c:	ldr	r2, [r5]
   16c50:	lsl	r3, r7, #1
   16c54:	ldrh	r3, [r2, r3]
   16c58:	tst	r3, #8
   16c5c:	beq	16c6c <__assert_fail@plt+0x5754>
   16c60:	mov	r1, r7
   16c64:	mov	r0, r4
   16c68:	bl	14dc8 <__assert_fail@plt+0x38b0>
   16c6c:	add	r7, r7, #1
   16c70:	cmp	r7, #256	; 0x100
   16c74:	bne	16c4c <__assert_fail@plt+0x5734>
   16c78:	b	16c3c <__assert_fail@plt+0x5724>
   16c7c:	ldr	r1, [pc, #1564]	; 172a0 <__assert_fail@plt+0x5d88>
   16c80:	mov	r0, r6
   16c84:	bl	111d0 <strcmp@plt>
   16c88:	subs	r7, r0, #0
   16c8c:	bne	16d08 <__assert_fail@plt+0x57f0>
   16c90:	cmp	r5, #0
   16c94:	beq	16cd0 <__assert_fail@plt+0x57b8>
   16c98:	bl	113b0 <__ctype_b_loc@plt>
   16c9c:	mov	r6, r0
   16ca0:	ldr	r2, [r6]
   16ca4:	lsl	r3, r7, #1
   16ca8:	ldrh	r3, [r2, r3]
   16cac:	tst	r3, #2
   16cb0:	beq	16cc0 <__assert_fail@plt+0x57a8>
   16cb4:	ldrb	r1, [r5, r7]
   16cb8:	mov	r0, r4
   16cbc:	bl	14dc8 <__assert_fail@plt+0x38b0>
   16cc0:	add	r7, r7, #1
   16cc4:	cmp	r7, #256	; 0x100
   16cc8:	bne	16ca0 <__assert_fail@plt+0x5788>
   16ccc:	b	16c3c <__assert_fail@plt+0x5724>
   16cd0:	bl	113b0 <__ctype_b_loc@plt>
   16cd4:	mov	r5, r0
   16cd8:	ldr	r2, [r5]
   16cdc:	lsl	r3, r7, #1
   16ce0:	ldrh	r3, [r2, r3]
   16ce4:	tst	r3, #2
   16ce8:	beq	16cf8 <__assert_fail@plt+0x57e0>
   16cec:	mov	r1, r7
   16cf0:	mov	r0, r4
   16cf4:	bl	14dc8 <__assert_fail@plt+0x38b0>
   16cf8:	add	r7, r7, #1
   16cfc:	cmp	r7, #256	; 0x100
   16d00:	bne	16cd8 <__assert_fail@plt+0x57c0>
   16d04:	b	16c3c <__assert_fail@plt+0x5724>
   16d08:	ldr	r1, [pc, #1416]	; 17298 <__assert_fail@plt+0x5d80>
   16d0c:	mov	r0, r6
   16d10:	bl	111d0 <strcmp@plt>
   16d14:	subs	r7, r0, #0
   16d18:	bne	16d94 <__assert_fail@plt+0x587c>
   16d1c:	cmp	r5, #0
   16d20:	beq	16d5c <__assert_fail@plt+0x5844>
   16d24:	bl	113b0 <__ctype_b_loc@plt>
   16d28:	mov	r6, r0
   16d2c:	ldr	r2, [r6]
   16d30:	lsl	r3, r7, #1
   16d34:	ldrh	r3, [r2, r3]
   16d38:	tst	r3, #512	; 0x200
   16d3c:	beq	16d4c <__assert_fail@plt+0x5834>
   16d40:	ldrb	r1, [r5, r7]
   16d44:	mov	r0, r4
   16d48:	bl	14dc8 <__assert_fail@plt+0x38b0>
   16d4c:	add	r7, r7, #1
   16d50:	cmp	r7, #256	; 0x100
   16d54:	bne	16d2c <__assert_fail@plt+0x5814>
   16d58:	b	16c3c <__assert_fail@plt+0x5724>
   16d5c:	bl	113b0 <__ctype_b_loc@plt>
   16d60:	mov	r5, r0
   16d64:	ldr	r2, [r5]
   16d68:	lsl	r3, r7, #1
   16d6c:	ldrh	r3, [r2, r3]
   16d70:	tst	r3, #512	; 0x200
   16d74:	beq	16d84 <__assert_fail@plt+0x586c>
   16d78:	mov	r1, r7
   16d7c:	mov	r0, r4
   16d80:	bl	14dc8 <__assert_fail@plt+0x38b0>
   16d84:	add	r7, r7, #1
   16d88:	cmp	r7, #256	; 0x100
   16d8c:	bne	16d64 <__assert_fail@plt+0x584c>
   16d90:	b	16c3c <__assert_fail@plt+0x5724>
   16d94:	ldr	r1, [pc, #1288]	; 172a4 <__assert_fail@plt+0x5d8c>
   16d98:	mov	r0, r6
   16d9c:	bl	111d0 <strcmp@plt>
   16da0:	subs	r7, r0, #0
   16da4:	bne	16e20 <__assert_fail@plt+0x5908>
   16da8:	cmp	r5, #0
   16dac:	beq	16de8 <__assert_fail@plt+0x58d0>
   16db0:	bl	113b0 <__ctype_b_loc@plt>
   16db4:	mov	r6, r0
   16db8:	ldr	r2, [r6]
   16dbc:	lsl	r3, r7, #1
   16dc0:	ldrh	r3, [r2, r3]
   16dc4:	tst	r3, #8192	; 0x2000
   16dc8:	beq	16dd8 <__assert_fail@plt+0x58c0>
   16dcc:	ldrb	r1, [r5, r7]
   16dd0:	mov	r0, r4
   16dd4:	bl	14dc8 <__assert_fail@plt+0x38b0>
   16dd8:	add	r7, r7, #1
   16ddc:	cmp	r7, #256	; 0x100
   16de0:	bne	16db8 <__assert_fail@plt+0x58a0>
   16de4:	b	16c3c <__assert_fail@plt+0x5724>
   16de8:	bl	113b0 <__ctype_b_loc@plt>
   16dec:	mov	r5, r0
   16df0:	ldr	r2, [r5]
   16df4:	lsl	r3, r7, #1
   16df8:	ldrh	r3, [r2, r3]
   16dfc:	tst	r3, #8192	; 0x2000
   16e00:	beq	16e10 <__assert_fail@plt+0x58f8>
   16e04:	mov	r1, r7
   16e08:	mov	r0, r4
   16e0c:	bl	14dc8 <__assert_fail@plt+0x38b0>
   16e10:	add	r7, r7, #1
   16e14:	cmp	r7, #256	; 0x100
   16e18:	bne	16df0 <__assert_fail@plt+0x58d8>
   16e1c:	b	16c3c <__assert_fail@plt+0x5724>
   16e20:	ldr	r1, [pc, #1132]	; 17294 <__assert_fail@plt+0x5d7c>
   16e24:	mov	r0, r6
   16e28:	bl	111d0 <strcmp@plt>
   16e2c:	subs	r7, r0, #0
   16e30:	bne	16eac <__assert_fail@plt+0x5994>
   16e34:	cmp	r5, #0
   16e38:	beq	16e74 <__assert_fail@plt+0x595c>
   16e3c:	bl	113b0 <__ctype_b_loc@plt>
   16e40:	mov	r6, r0
   16e44:	ldr	r2, [r6]
   16e48:	lsl	r3, r7, #1
   16e4c:	ldrh	r3, [r2, r3]
   16e50:	tst	r3, #1024	; 0x400
   16e54:	beq	16e64 <__assert_fail@plt+0x594c>
   16e58:	ldrb	r1, [r5, r7]
   16e5c:	mov	r0, r4
   16e60:	bl	14dc8 <__assert_fail@plt+0x38b0>
   16e64:	add	r7, r7, #1
   16e68:	cmp	r7, #256	; 0x100
   16e6c:	bne	16e44 <__assert_fail@plt+0x592c>
   16e70:	b	16c3c <__assert_fail@plt+0x5724>
   16e74:	bl	113b0 <__ctype_b_loc@plt>
   16e78:	mov	r5, r0
   16e7c:	ldr	r2, [r5]
   16e80:	lsl	r3, r7, #1
   16e84:	ldrh	r3, [r2, r3]
   16e88:	tst	r3, #1024	; 0x400
   16e8c:	beq	16e9c <__assert_fail@plt+0x5984>
   16e90:	mov	r1, r7
   16e94:	mov	r0, r4
   16e98:	bl	14dc8 <__assert_fail@plt+0x38b0>
   16e9c:	add	r7, r7, #1
   16ea0:	cmp	r7, #256	; 0x100
   16ea4:	bne	16e7c <__assert_fail@plt+0x5964>
   16ea8:	b	16c3c <__assert_fail@plt+0x5724>
   16eac:	ldr	r1, [pc, #1012]	; 172a8 <__assert_fail@plt+0x5d90>
   16eb0:	mov	r0, r6
   16eb4:	bl	111d0 <strcmp@plt>
   16eb8:	subs	r7, r0, #0
   16ebc:	bne	16f38 <__assert_fail@plt+0x5a20>
   16ec0:	cmp	r5, #0
   16ec4:	beq	16f00 <__assert_fail@plt+0x59e8>
   16ec8:	bl	113b0 <__ctype_b_loc@plt>
   16ecc:	mov	r6, r0
   16ed0:	ldr	r2, [r6]
   16ed4:	lsl	r3, r7, #1
   16ed8:	ldrh	r3, [r2, r3]
   16edc:	tst	r3, #2048	; 0x800
   16ee0:	beq	16ef0 <__assert_fail@plt+0x59d8>
   16ee4:	ldrb	r1, [r5, r7]
   16ee8:	mov	r0, r4
   16eec:	bl	14dc8 <__assert_fail@plt+0x38b0>
   16ef0:	add	r7, r7, #1
   16ef4:	cmp	r7, #256	; 0x100
   16ef8:	bne	16ed0 <__assert_fail@plt+0x59b8>
   16efc:	b	16c3c <__assert_fail@plt+0x5724>
   16f00:	bl	113b0 <__ctype_b_loc@plt>
   16f04:	mov	r5, r0
   16f08:	ldr	r2, [r5]
   16f0c:	lsl	r3, r7, #1
   16f10:	ldrh	r3, [r2, r3]
   16f14:	tst	r3, #2048	; 0x800
   16f18:	beq	16f28 <__assert_fail@plt+0x5a10>
   16f1c:	mov	r1, r7
   16f20:	mov	r0, r4
   16f24:	bl	14dc8 <__assert_fail@plt+0x38b0>
   16f28:	add	r7, r7, #1
   16f2c:	cmp	r7, #256	; 0x100
   16f30:	bne	16f08 <__assert_fail@plt+0x59f0>
   16f34:	b	16c3c <__assert_fail@plt+0x5724>
   16f38:	ldr	r1, [pc, #876]	; 172ac <__assert_fail@plt+0x5d94>
   16f3c:	mov	r0, r6
   16f40:	bl	111d0 <strcmp@plt>
   16f44:	subs	r7, r0, #0
   16f48:	bne	16fc4 <__assert_fail@plt+0x5aac>
   16f4c:	cmp	r5, #0
   16f50:	beq	16f8c <__assert_fail@plt+0x5a74>
   16f54:	bl	113b0 <__ctype_b_loc@plt>
   16f58:	mov	r6, r0
   16f5c:	ldr	r2, [r6]
   16f60:	lsl	r3, r7, #1
   16f64:	ldrh	r3, [r2, r3]
   16f68:	tst	r3, #16384	; 0x4000
   16f6c:	beq	16f7c <__assert_fail@plt+0x5a64>
   16f70:	ldrb	r1, [r5, r7]
   16f74:	mov	r0, r4
   16f78:	bl	14dc8 <__assert_fail@plt+0x38b0>
   16f7c:	add	r7, r7, #1
   16f80:	cmp	r7, #256	; 0x100
   16f84:	bne	16f5c <__assert_fail@plt+0x5a44>
   16f88:	b	16c3c <__assert_fail@plt+0x5724>
   16f8c:	bl	113b0 <__ctype_b_loc@plt>
   16f90:	mov	r5, r0
   16f94:	ldr	r2, [r5]
   16f98:	lsl	r3, r7, #1
   16f9c:	ldrh	r3, [r2, r3]
   16fa0:	tst	r3, #16384	; 0x4000
   16fa4:	beq	16fb4 <__assert_fail@plt+0x5a9c>
   16fa8:	mov	r1, r7
   16fac:	mov	r0, r4
   16fb0:	bl	14dc8 <__assert_fail@plt+0x38b0>
   16fb4:	add	r7, r7, #1
   16fb8:	cmp	r7, #256	; 0x100
   16fbc:	bne	16f94 <__assert_fail@plt+0x5a7c>
   16fc0:	b	16c3c <__assert_fail@plt+0x5724>
   16fc4:	ldr	r1, [pc, #708]	; 17290 <__assert_fail@plt+0x5d78>
   16fc8:	mov	r0, r6
   16fcc:	bl	111d0 <strcmp@plt>
   16fd0:	subs	r7, r0, #0
   16fd4:	bne	17050 <__assert_fail@plt+0x5b38>
   16fd8:	cmp	r5, #0
   16fdc:	beq	17018 <__assert_fail@plt+0x5b00>
   16fe0:	bl	113b0 <__ctype_b_loc@plt>
   16fe4:	mov	r6, r0
   16fe8:	ldr	r2, [r6]
   16fec:	lsl	r3, r7, #1
   16ff0:	ldrh	r3, [r2, r3]
   16ff4:	tst	r3, #256	; 0x100
   16ff8:	beq	17008 <__assert_fail@plt+0x5af0>
   16ffc:	ldrb	r1, [r5, r7]
   17000:	mov	r0, r4
   17004:	bl	14dc8 <__assert_fail@plt+0x38b0>
   17008:	add	r7, r7, #1
   1700c:	cmp	r7, #256	; 0x100
   17010:	bne	16fe8 <__assert_fail@plt+0x5ad0>
   17014:	b	16c3c <__assert_fail@plt+0x5724>
   17018:	bl	113b0 <__ctype_b_loc@plt>
   1701c:	mov	r5, r0
   17020:	ldr	r2, [r5]
   17024:	lsl	r3, r7, #1
   17028:	ldrh	r3, [r2, r3]
   1702c:	tst	r3, #256	; 0x100
   17030:	beq	17040 <__assert_fail@plt+0x5b28>
   17034:	mov	r1, r7
   17038:	mov	r0, r4
   1703c:	bl	14dc8 <__assert_fail@plt+0x38b0>
   17040:	add	r7, r7, #1
   17044:	cmp	r7, #256	; 0x100
   17048:	bne	17020 <__assert_fail@plt+0x5b08>
   1704c:	b	16c3c <__assert_fail@plt+0x5724>
   17050:	ldr	r1, [pc, #600]	; 172b0 <__assert_fail@plt+0x5d98>
   17054:	mov	r0, r6
   17058:	bl	111d0 <strcmp@plt>
   1705c:	subs	r7, r0, #0
   17060:	bne	170dc <__assert_fail@plt+0x5bc4>
   17064:	cmp	r5, #0
   17068:	beq	170a4 <__assert_fail@plt+0x5b8c>
   1706c:	bl	113b0 <__ctype_b_loc@plt>
   17070:	mov	r6, r0
   17074:	ldr	r2, [r6]
   17078:	lsl	r3, r7, #1
   1707c:	ldrh	r3, [r2, r3]
   17080:	tst	r3, #1
   17084:	beq	17094 <__assert_fail@plt+0x5b7c>
   17088:	ldrb	r1, [r5, r7]
   1708c:	mov	r0, r4
   17090:	bl	14dc8 <__assert_fail@plt+0x38b0>
   17094:	add	r7, r7, #1
   17098:	cmp	r7, #256	; 0x100
   1709c:	bne	17074 <__assert_fail@plt+0x5b5c>
   170a0:	b	16c3c <__assert_fail@plt+0x5724>
   170a4:	bl	113b0 <__ctype_b_loc@plt>
   170a8:	mov	r5, r0
   170ac:	ldr	r2, [r5]
   170b0:	lsl	r3, r7, #1
   170b4:	ldrh	r3, [r2, r3]
   170b8:	tst	r3, #1
   170bc:	beq	170cc <__assert_fail@plt+0x5bb4>
   170c0:	mov	r1, r7
   170c4:	mov	r0, r4
   170c8:	bl	14dc8 <__assert_fail@plt+0x38b0>
   170cc:	add	r7, r7, #1
   170d0:	cmp	r7, #256	; 0x100
   170d4:	bne	170ac <__assert_fail@plt+0x5b94>
   170d8:	b	16c3c <__assert_fail@plt+0x5724>
   170dc:	ldr	r1, [pc, #464]	; 172b4 <__assert_fail@plt+0x5d9c>
   170e0:	mov	r0, r6
   170e4:	bl	111d0 <strcmp@plt>
   170e8:	subs	r7, r0, #0
   170ec:	bne	17168 <__assert_fail@plt+0x5c50>
   170f0:	cmp	r5, #0
   170f4:	beq	17130 <__assert_fail@plt+0x5c18>
   170f8:	bl	113b0 <__ctype_b_loc@plt>
   170fc:	mov	r6, r0
   17100:	ldr	r2, [r6]
   17104:	lsl	r3, r7, #1
   17108:	ldrsh	r3, [r2, r3]
   1710c:	cmp	r3, #0
   17110:	bge	17120 <__assert_fail@plt+0x5c08>
   17114:	ldrb	r1, [r5, r7]
   17118:	mov	r0, r4
   1711c:	bl	14dc8 <__assert_fail@plt+0x38b0>
   17120:	add	r7, r7, #1
   17124:	cmp	r7, #256	; 0x100
   17128:	bne	17100 <__assert_fail@plt+0x5be8>
   1712c:	b	16c3c <__assert_fail@plt+0x5724>
   17130:	bl	113b0 <__ctype_b_loc@plt>
   17134:	mov	r5, r0
   17138:	ldr	r2, [r5]
   1713c:	lsl	r3, r7, #1
   17140:	ldrsh	r3, [r2, r3]
   17144:	cmp	r3, #0
   17148:	bge	17158 <__assert_fail@plt+0x5c40>
   1714c:	mov	r1, r7
   17150:	mov	r0, r4
   17154:	bl	14dc8 <__assert_fail@plt+0x38b0>
   17158:	add	r7, r7, #1
   1715c:	cmp	r7, #256	; 0x100
   17160:	bne	17138 <__assert_fail@plt+0x5c20>
   17164:	b	16c3c <__assert_fail@plt+0x5724>
   17168:	ldr	r1, [pc, #328]	; 172b8 <__assert_fail@plt+0x5da0>
   1716c:	mov	r0, r6
   17170:	bl	111d0 <strcmp@plt>
   17174:	subs	r7, r0, #0
   17178:	bne	171f4 <__assert_fail@plt+0x5cdc>
   1717c:	cmp	r5, #0
   17180:	beq	171bc <__assert_fail@plt+0x5ca4>
   17184:	bl	113b0 <__ctype_b_loc@plt>
   17188:	mov	r6, r0
   1718c:	ldr	r2, [r6]
   17190:	lsl	r3, r7, #1
   17194:	ldrh	r3, [r2, r3]
   17198:	tst	r3, #4
   1719c:	beq	171ac <__assert_fail@plt+0x5c94>
   171a0:	ldrb	r1, [r5, r7]
   171a4:	mov	r0, r4
   171a8:	bl	14dc8 <__assert_fail@plt+0x38b0>
   171ac:	add	r7, r7, #1
   171b0:	cmp	r7, #256	; 0x100
   171b4:	bne	1718c <__assert_fail@plt+0x5c74>
   171b8:	b	16c3c <__assert_fail@plt+0x5724>
   171bc:	bl	113b0 <__ctype_b_loc@plt>
   171c0:	mov	r5, r0
   171c4:	ldr	r2, [r5]
   171c8:	lsl	r3, r7, #1
   171cc:	ldrh	r3, [r2, r3]
   171d0:	tst	r3, #4
   171d4:	beq	171e4 <__assert_fail@plt+0x5ccc>
   171d8:	mov	r1, r7
   171dc:	mov	r0, r4
   171e0:	bl	14dc8 <__assert_fail@plt+0x38b0>
   171e4:	add	r7, r7, #1
   171e8:	cmp	r7, #256	; 0x100
   171ec:	bne	171c4 <__assert_fail@plt+0x5cac>
   171f0:	b	16c3c <__assert_fail@plt+0x5724>
   171f4:	mov	r0, r6
   171f8:	ldr	r1, [pc, #188]	; 172bc <__assert_fail@plt+0x5da4>
   171fc:	bl	111d0 <strcmp@plt>
   17200:	subs	r6, r0, #0
   17204:	bne	17288 <__assert_fail@plt+0x5d70>
   17208:	cmp	r5, #0
   1720c:	beq	17248 <__assert_fail@plt+0x5d30>
   17210:	bl	113b0 <__ctype_b_loc@plt>
   17214:	mov	r7, r0
   17218:	ldr	r2, [r7]
   1721c:	lsl	r3, r6, #1
   17220:	ldrh	r3, [r2, r3]
   17224:	tst	r3, #4096	; 0x1000
   17228:	beq	17238 <__assert_fail@plt+0x5d20>
   1722c:	ldrb	r1, [r5, r6]
   17230:	mov	r0, r4
   17234:	bl	14dc8 <__assert_fail@plt+0x38b0>
   17238:	add	r6, r6, #1
   1723c:	cmp	r6, #256	; 0x100
   17240:	bne	17218 <__assert_fail@plt+0x5d00>
   17244:	b	16c3c <__assert_fail@plt+0x5724>
   17248:	bl	113b0 <__ctype_b_loc@plt>
   1724c:	mov	r5, r0
   17250:	ldr	r2, [r5]
   17254:	lsl	r3, r6, #1
   17258:	ldrh	r3, [r2, r3]
   1725c:	tst	r3, #4096	; 0x1000
   17260:	beq	17270 <__assert_fail@plt+0x5d58>
   17264:	mov	r1, r6
   17268:	mov	r0, r4
   1726c:	bl	14dc8 <__assert_fail@plt+0x38b0>
   17270:	add	r6, r6, #1
   17274:	cmp	r6, #256	; 0x100
   17278:	bne	17250 <__assert_fail@plt+0x5d38>
   1727c:	b	16c3c <__assert_fail@plt+0x5724>
   17280:	mov	r0, #12
   17284:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17288:	mov	r0, #4
   1728c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17290:	andeq	r2, r2, r6, lsr #8
   17294:	andeq	r2, r2, r0, lsr #8
   17298:	andeq	r2, r2, ip, lsr #8
   1729c:	andeq	r2, r2, r2, lsr r4
   172a0:	andeq	r2, r2, r8, lsr r4
   172a4:	andeq	r2, r2, lr, lsr r4
   172a8:	andeq	r2, r2, sp, asr r4
   172ac:	andeq	r2, r2, r4, asr #8
   172b0:	andeq	r2, r2, sl, asr #8
   172b4:	andeq	r2, r2, r0, asr r4
   172b8:	andeq	r2, r2, r6, asr r4
   172bc:	andeq	r2, r2, ip, asr r4
   172c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   172c4:	sub	sp, sp, #36	; 0x24
   172c8:	mov	r7, r0
   172cc:	mov	fp, r1
   172d0:	mov	r4, #0
   172d4:	mov	r1, #1
   172d8:	mov	r0, #32
   172dc:	str	r2, [sp, #12]
   172e0:	mov	r9, r3
   172e4:	ldrb	sl, [sp, #72]	; 0x48
   172e8:	ldr	r8, [sp, #76]	; 0x4c
   172ec:	str	r4, [sp, #20]
   172f0:	bl	20b74 <__assert_fail@plt+0xf65c>
   172f4:	subs	r5, r0, #0
   172f8:	bne	1730c <__assert_fail@plt+0x5df4>
   172fc:	mov	r3, #12
   17300:	str	r3, [r8]
   17304:	mov	r4, #0
   17308:	b	17380 <__assert_fail@plt+0x5e68>
   1730c:	mov	r1, #1
   17310:	mov	r0, #40	; 0x28
   17314:	bl	20b74 <__assert_fail@plt+0xf65c>
   17318:	subs	r6, r0, #0
   1731c:	bne	1732c <__assert_fail@plt+0x5e14>
   17320:	mov	r0, r5
   17324:	bl	130e8 <__assert_fail@plt+0x1bd0>
   17328:	b	172fc <__assert_fail@plt+0x5de4>
   1732c:	ldrb	r2, [r6, #16]
   17330:	and	r3, sl, #1
   17334:	mov	r0, fp
   17338:	bic	r2, r2, #1
   1733c:	orr	r3, r3, r2
   17340:	strb	r3, [r6, #16]
   17344:	ldr	r3, [sp, #12]
   17348:	str	r4, [sp, #4]
   1734c:	str	r3, [sp]
   17350:	mov	r2, r6
   17354:	add	r3, sp, #20
   17358:	mov	r1, r5
   1735c:	bl	16b48 <__assert_fail@plt+0x5630>
   17360:	subs	fp, r0, #0
   17364:	subeq	r9, r9, #1
   17368:	beq	17394 <__assert_fail@plt+0x5e7c>
   1736c:	mov	r0, r5
   17370:	bl	130e8 <__assert_fail@plt+0x1bd0>
   17374:	mov	r0, r6
   17378:	bl	16214 <__assert_fail@plt+0x4cfc>
   1737c:	str	fp, [r8]
   17380:	mov	r0, r4
   17384:	add	sp, sp, #36	; 0x24
   17388:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1738c:	mov	r0, r5
   17390:	bl	14dc8 <__assert_fail@plt+0x38b0>
   17394:	ldrb	r1, [r9, #1]!
   17398:	cmp	r1, #0
   1739c:	bne	1738c <__assert_fail@plt+0x5e74>
   173a0:	cmp	sl, #0
   173a4:	beq	173b0 <__assert_fail@plt+0x5e98>
   173a8:	mov	r0, r5
   173ac:	bl	14e2c <__assert_fail@plt+0x3914>
   173b0:	ldr	r3, [r7, #92]	; 0x5c
   173b4:	cmp	r3, #1
   173b8:	ble	173c8 <__assert_fail@plt+0x5eb0>
   173bc:	ldr	r1, [r7, #60]	; 0x3c
   173c0:	mov	r0, r5
   173c4:	bl	14e74 <__assert_fail@plt+0x395c>
   173c8:	mov	r9, #0
   173cc:	mov	r3, #3
   173d0:	str	r9, [sp, #28]
   173d4:	mov	r2, r9
   173d8:	strb	r3, [sp, #28]
   173dc:	mov	r1, r9
   173e0:	add	r3, sp, #24
   173e4:	mov	r0, r7
   173e8:	str	r5, [sp, #24]
   173ec:	bl	15668 <__assert_fail@plt+0x4150>
   173f0:	subs	r4, r0, #0
   173f4:	beq	1745c <__assert_fail@plt+0x5f44>
   173f8:	ldr	r3, [r7, #92]	; 0x5c
   173fc:	cmp	r3, #1
   17400:	ble	17450 <__assert_fail@plt+0x5f38>
   17404:	mov	r3, #6
   17408:	strb	r3, [sp, #28]
   1740c:	ldrb	r3, [r7, #88]	; 0x58
   17410:	mov	r2, r9
   17414:	mov	r1, r9
   17418:	orr	r3, r3, #2
   1741c:	strb	r3, [r7, #88]	; 0x58
   17420:	mov	r0, r7
   17424:	add	r3, sp, #24
   17428:	str	r6, [sp, #24]
   1742c:	bl	15668 <__assert_fail@plt+0x4150>
   17430:	subs	r2, r0, #0
   17434:	beq	1745c <__assert_fail@plt+0x5f44>
   17438:	mov	r1, r4
   1743c:	mov	r3, #10
   17440:	mov	r0, r7
   17444:	bl	157b8 <__assert_fail@plt+0x42a0>
   17448:	mov	r4, r0
   1744c:	b	17380 <__assert_fail@plt+0x5e68>
   17450:	mov	r0, r6
   17454:	bl	16214 <__assert_fail@plt+0x4cfc>
   17458:	b	17380 <__assert_fail@plt+0x5e68>
   1745c:	mov	r0, r5
   17460:	bl	130e8 <__assert_fail@plt+0x1bd0>
   17464:	mov	r0, r6
   17468:	bl	16214 <__assert_fail@plt+0x4cfc>
   1746c:	b	172fc <__assert_fail@plt+0x5de4>
   17470:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17474:	ldr	sl, [r0]
   17478:	add	ip, sl, r1, lsl #3
   1747c:	ldrb	r9, [ip, #4]
   17480:	cmp	r9, #7
   17484:	bne	17574 <__assert_fail@plt+0x605c>
   17488:	ldr	r0, [r2, #4]
   1748c:	add	r1, r0, r3
   17490:	ldrb	ip, [r0, r3]
   17494:	cmp	ip, #193	; 0xc1
   17498:	bhi	174a8 <__assert_fail@plt+0x5f90>
   1749c:	mov	r4, #0
   174a0:	mov	r0, r4
   174a4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   174a8:	ldr	r0, [r2, #48]	; 0x30
   174ac:	add	r2, r3, #1
   174b0:	cmp	r2, r0
   174b4:	bge	1749c <__assert_fail@plt+0x5f84>
   174b8:	cmp	ip, #223	; 0xdf
   174bc:	ldrb	r2, [r1, #1]
   174c0:	bhi	174d8 <__assert_fail@plt+0x5fc0>
   174c4:	eor	r2, r2, #128	; 0x80
   174c8:	cmp	r2, #63	; 0x3f
   174cc:	movls	r4, #2
   174d0:	bls	174a0 <__assert_fail@plt+0x5f88>
   174d4:	b	1749c <__assert_fail@plt+0x5f84>
   174d8:	cmp	ip, #239	; 0xef
   174dc:	bhi	17520 <__assert_fail@plt+0x6008>
   174e0:	cmp	r2, #159	; 0x9f
   174e4:	cmpls	ip, #224	; 0xe0
   174e8:	movne	r4, #3
   174ec:	beq	1749c <__assert_fail@plt+0x5f84>
   174f0:	add	r3, r4, r3
   174f4:	cmp	r0, r3
   174f8:	blt	1749c <__assert_fail@plt+0x5f84>
   174fc:	mov	r3, #1
   17500:	ldrb	r2, [r1, r3]
   17504:	eor	r2, r2, #128	; 0x80
   17508:	cmp	r2, #63	; 0x3f
   1750c:	bhi	1749c <__assert_fail@plt+0x5f84>
   17510:	add	r3, r3, #1
   17514:	cmp	r4, r3
   17518:	bne	17500 <__assert_fail@plt+0x5fe8>
   1751c:	b	174a0 <__assert_fail@plt+0x5f88>
   17520:	cmp	ip, #247	; 0xf7
   17524:	bhi	1753c <__assert_fail@plt+0x6024>
   17528:	cmp	r2, #143	; 0x8f
   1752c:	cmpls	ip, #240	; 0xf0
   17530:	movne	r4, #4
   17534:	bne	174f0 <__assert_fail@plt+0x5fd8>
   17538:	b	1749c <__assert_fail@plt+0x5f84>
   1753c:	cmp	ip, #251	; 0xfb
   17540:	bhi	17558 <__assert_fail@plt+0x6040>
   17544:	cmp	r2, #135	; 0x87
   17548:	cmpls	ip, #248	; 0xf8
   1754c:	movne	r4, #5
   17550:	bne	174f0 <__assert_fail@plt+0x5fd8>
   17554:	b	1749c <__assert_fail@plt+0x5f84>
   17558:	cmp	ip, #253	; 0xfd
   1755c:	bhi	1749c <__assert_fail@plt+0x5f84>
   17560:	cmp	r2, #131	; 0x83
   17564:	cmpls	ip, #252	; 0xfc
   17568:	beq	1749c <__assert_fail@plt+0x5f84>
   1756c:	mov	r4, #6
   17570:	b	174f0 <__assert_fail@plt+0x5fd8>
   17574:	mov	r5, r1
   17578:	mov	r8, r0
   1757c:	mov	r1, r3
   17580:	mov	r0, r2
   17584:	mov	r7, r3
   17588:	mov	r6, r2
   1758c:	bl	14e9c <__assert_fail@plt+0x3984>
   17590:	cmp	r9, #5
   17594:	mov	r4, r0
   17598:	bne	175dc <__assert_fail@plt+0x60c4>
   1759c:	cmp	r0, #1
   175a0:	ble	1749c <__assert_fail@plt+0x5f84>
   175a4:	ldr	r3, [r8, #128]	; 0x80
   175a8:	tst	r3, #64	; 0x40
   175ac:	bne	175c0 <__assert_fail@plt+0x60a8>
   175b0:	ldr	r2, [r6, #4]
   175b4:	ldrb	r2, [r2, r7]
   175b8:	cmp	r2, #10
   175bc:	beq	1749c <__assert_fail@plt+0x5f84>
   175c0:	tst	r3, #128	; 0x80
   175c4:	beq	174a0 <__assert_fail@plt+0x5f88>
   175c8:	ldr	r3, [r6, #4]
   175cc:	ldrb	r3, [r3, r7]
   175d0:	cmp	r3, #0
   175d4:	beq	1749c <__assert_fail@plt+0x5f84>
   175d8:	b	174a0 <__assert_fail@plt+0x5f88>
   175dc:	cmp	r0, #1
   175e0:	movle	r3, #0
   175e4:	movgt	r3, #1
   175e8:	cmp	r9, #6
   175ec:	movne	r3, #0
   175f0:	cmp	r3, #0
   175f4:	beq	1749c <__assert_fail@plt+0x5f84>
   175f8:	ldr	r5, [sl, r5, lsl #3]
   175fc:	ldr	r3, [r5, #32]
   17600:	ldr	r2, [r5, #20]
   17604:	cmp	r3, #0
   17608:	bne	17620 <__assert_fail@plt+0x6108>
   1760c:	ldr	r3, [r5, #36]	; 0x24
   17610:	cmp	r3, #0
   17614:	bne	17620 <__assert_fail@plt+0x6108>
   17618:	cmp	r2, #0
   1761c:	beq	176b4 <__assert_fail@plt+0x619c>
   17620:	mov	r0, r6
   17624:	mov	r1, r7
   17628:	bl	14ef4 <__assert_fail@plt+0x39dc>
   1762c:	mov	r3, #0
   17630:	mov	r6, r0
   17634:	cmp	r3, r2
   17638:	blt	1767c <__assert_fail@plt+0x6164>
   1763c:	mov	r7, #0
   17640:	ldr	r3, [r5, #36]	; 0x24
   17644:	cmp	r7, r3
   17648:	blt	17694 <__assert_fail@plt+0x617c>
   1764c:	ldr	r2, [r5, #32]
   17650:	mov	r3, #0
   17654:	cmp	r3, r2
   17658:	blt	176bc <__assert_fail@plt+0x61a4>
   1765c:	mov	r3, #0
   17660:	ldrb	r2, [r5, #16]
   17664:	tst	r2, #1
   17668:	moveq	r4, r3
   1766c:	beq	174a0 <__assert_fail@plt+0x5f88>
   17670:	cmp	r3, #0
   17674:	bne	1749c <__assert_fail@plt+0x5f84>
   17678:	b	174a0 <__assert_fail@plt+0x5f88>
   1767c:	ldr	r1, [r5]
   17680:	ldr	r1, [r1, r3, lsl #2]
   17684:	cmp	r6, r1
   17688:	beq	176e4 <__assert_fail@plt+0x61cc>
   1768c:	add	r3, r3, #1
   17690:	b	17634 <__assert_fail@plt+0x611c>
   17694:	ldr	r3, [r5, #12]
   17698:	mov	r0, r6
   1769c:	ldr	r1, [r3, r7, lsl #2]
   176a0:	bl	111c4 <iswctype@plt>
   176a4:	cmp	r0, #0
   176a8:	bne	176e4 <__assert_fail@plt+0x61cc>
   176ac:	add	r7, r7, #1
   176b0:	b	17640 <__assert_fail@plt+0x6128>
   176b4:	mov	r6, r2
   176b8:	b	1764c <__assert_fail@plt+0x6134>
   176bc:	ldr	r1, [r5, #4]
   176c0:	ldr	r1, [r1, r3, lsl #2]
   176c4:	cmp	r6, r1
   176c8:	bcc	176dc <__assert_fail@plt+0x61c4>
   176cc:	ldr	r1, [r5, #8]
   176d0:	ldr	r1, [r1, r3, lsl #2]
   176d4:	cmp	r6, r1
   176d8:	bls	176e4 <__assert_fail@plt+0x61cc>
   176dc:	add	r3, r3, #1
   176e0:	b	17654 <__assert_fail@plt+0x613c>
   176e4:	mov	r3, r4
   176e8:	b	17660 <__assert_fail@plt+0x6148>
   176ec:	ldr	r3, [r0, #4]
   176f0:	ldr	r2, [r1, #4]
   176f4:	cmp	r3, r2
   176f8:	bne	17724 <__assert_fail@plt+0x620c>
   176fc:	subs	r3, r3, #1
   17700:	bpl	1770c <__assert_fail@plt+0x61f4>
   17704:	mov	r0, #1
   17708:	bx	lr
   1770c:	ldr	ip, [r0, #8]
   17710:	ldr	r2, [r1, #8]
   17714:	ldr	ip, [ip, r3, lsl #2]
   17718:	ldr	r2, [r2, r3, lsl #2]
   1771c:	cmp	ip, r2
   17720:	b	176f8 <__assert_fail@plt+0x61e0>
   17724:	mov	r0, #0
   17728:	bx	lr
   1772c:	cmp	r1, #0
   17730:	bxlt	lr
   17734:	ldr	r3, [r0, #4]
   17738:	cmp	r1, r3
   1773c:	bxge	lr
   17740:	sub	r3, r3, #1
   17744:	str	r3, [r0, #4]
   17748:	ldr	ip, [r0, #4]
   1774c:	lsl	r3, r1, #2
   17750:	cmp	r1, ip
   17754:	add	r2, r3, #4
   17758:	blt	17760 <__assert_fail@plt+0x6248>
   1775c:	bx	lr
   17760:	push	{lr}		; (str lr, [sp, #-4]!)
   17764:	add	r1, r1, #1
   17768:	ldr	ip, [r0, #8]
   1776c:	ldr	lr, [ip, r2]
   17770:	str	lr, [ip, r3]
   17774:	ldr	ip, [r0, #4]
   17778:	mov	r3, r2
   1777c:	cmp	r1, ip
   17780:	add	r2, r2, #4
   17784:	blt	17764 <__assert_fail@plt+0x624c>
   17788:	pop	{pc}		; (ldr pc, [sp], #4)
   1778c:	ldrb	r3, [r1, #24]
   17790:	cmp	r3, #4
   17794:	bne	177c8 <__assert_fail@plt+0x62b0>
   17798:	ldr	r3, [r0, #132]	; 0x84
   1779c:	cmp	r3, #0
   177a0:	beq	177c0 <__assert_fail@plt+0x62a8>
   177a4:	ldr	r2, [r1, #20]
   177a8:	ldr	r2, [r3, r2, lsl #2]
   177ac:	str	r2, [r1, #20]
   177b0:	mov	r1, #1
   177b4:	ldr	r3, [r0, #80]	; 0x50
   177b8:	orr	r3, r3, r1, lsl r2
   177bc:	str	r3, [r0, #80]	; 0x50
   177c0:	mov	r0, #0
   177c4:	bx	lr
   177c8:	cmp	r3, #17
   177cc:	bne	177c0 <__assert_fail@plt+0x62a8>
   177d0:	ldr	r3, [r1, #4]
   177d4:	cmp	r3, #0
   177d8:	beq	177c0 <__assert_fail@plt+0x62a8>
   177dc:	ldrb	r2, [r3, #24]
   177e0:	cmp	r2, #17
   177e4:	bne	177c0 <__assert_fail@plt+0x62a8>
   177e8:	ldr	r2, [r3, #20]
   177ec:	ldr	r3, [r3, #4]
   177f0:	cmp	r3, #0
   177f4:	str	r3, [r1, #4]
   177f8:	strne	r1, [r3]
   177fc:	ldr	r3, [r0, #132]	; 0x84
   17800:	ldr	r1, [r1, #20]
   17804:	cmp	r2, #31
   17808:	ldr	r1, [r3, r1, lsl #2]
   1780c:	str	r1, [r3, r2, lsl #2]
   17810:	bgt	177c0 <__assert_fail@plt+0x62a8>
   17814:	ldr	r3, [r0, #80]	; 0x50
   17818:	mov	r1, #1
   1781c:	bic	r3, r3, r1, lsl r2
   17820:	b	177bc <__assert_fail@plt+0x62a4>
   17824:	ldrb	r3, [r1, #24]
   17828:	ldr	r2, [r1, #4]
   1782c:	cmp	r3, #11
   17830:	streq	r1, [r2, #16]
   17834:	beq	17858 <__assert_fail@plt+0x6340>
   17838:	cmp	r3, #16
   1783c:	ldr	r3, [r1, #8]
   17840:	beq	17860 <__assert_fail@plt+0x6348>
   17844:	cmp	r2, #0
   17848:	ldrne	r0, [r1, #16]
   1784c:	strne	r0, [r2, #16]
   17850:	cmp	r3, #0
   17854:	bne	17868 <__assert_fail@plt+0x6350>
   17858:	mov	r0, #0
   1785c:	bx	lr
   17860:	ldr	r0, [r3, #12]
   17864:	str	r0, [r2, #16]
   17868:	ldr	r2, [r1, #16]
   1786c:	str	r2, [r3, #16]
   17870:	b	17858 <__assert_fail@plt+0x6340>
   17874:	ldr	r3, [r1, #4]
   17878:	cmp	r3, #0
   1787c:	beq	179dc <__assert_fail@plt+0x64c4>
   17880:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17884:	ldr	r5, [r2, #4]
   17888:	cmp	r5, #0
   1788c:	beq	179c0 <__assert_fail@plt+0x64a8>
   17890:	mov	r6, r2
   17894:	ldr	r2, [r0, #4]
   17898:	add	r3, r3, r5
   1789c:	ldr	r5, [r0]
   178a0:	add	r2, r3, r2
   178a4:	cmp	r2, r5
   178a8:	mov	r7, r1
   178ac:	mov	r4, r0
   178b0:	ble	178d4 <__assert_fail@plt+0x63bc>
   178b4:	add	r5, r3, r5
   178b8:	ldr	r0, [r0, #8]
   178bc:	lsl	r1, r5, #2
   178c0:	bl	20bfc <__assert_fail@plt+0xf6e4>
   178c4:	cmp	r0, #0
   178c8:	beq	179e4 <__assert_fail@plt+0x64cc>
   178cc:	str	r0, [r4, #8]
   178d0:	str	r5, [r4]
   178d4:	ldr	r2, [r4, #4]
   178d8:	ldr	r3, [r7, #4]
   178dc:	ldr	r0, [r6, #4]
   178e0:	add	ip, r2, r3
   178e4:	ldr	r8, [r7, #8]
   178e8:	ldr	r9, [r6, #8]
   178ec:	add	ip, ip, r0
   178f0:	sub	r3, r3, #1
   178f4:	sub	r0, r0, #1
   178f8:	sub	r2, r2, #1
   178fc:	ldr	lr, [r9, r0, lsl #2]
   17900:	ldr	r1, [r8, r3, lsl #2]
   17904:	cmp	r1, lr
   17908:	lsleq	lr, r2, #2
   1790c:	beq	17920 <__assert_fail@plt+0x6408>
   17910:	blt	17950 <__assert_fail@plt+0x6438>
   17914:	subs	r3, r3, #1
   17918:	b	17954 <__assert_fail@plt+0x643c>
   1791c:	sub	r2, r2, #1
   17920:	cmp	r2, #0
   17924:	ldr	r5, [r4, #8]
   17928:	blt	17940 <__assert_fail@plt+0x6428>
   1792c:	ldr	sl, [r5, lr]
   17930:	sub	lr, lr, #4
   17934:	cmp	r1, sl
   17938:	blt	1791c <__assert_fail@plt+0x6404>
   1793c:	beq	17948 <__assert_fail@plt+0x6430>
   17940:	sub	ip, ip, #1
   17944:	str	r1, [r5, ip, lsl #2]
   17948:	subs	r3, r3, #1
   1794c:	bmi	17958 <__assert_fail@plt+0x6440>
   17950:	subs	r0, r0, #1
   17954:	bpl	178fc <__assert_fail@plt+0x63e4>
   17958:	ldr	r1, [r4, #4]
   1795c:	ldr	r2, [r7, #4]
   17960:	ldr	r0, [r6, #4]
   17964:	add	r2, r1, r2
   17968:	add	r2, r2, r0
   1796c:	sub	r3, r1, #1
   17970:	sub	lr, r2, #1
   17974:	sub	r2, r2, ip
   17978:	add	r1, r1, r2
   1797c:	cmp	r3, #0
   17980:	cmpge	r2, #0
   17984:	str	r1, [r4, #4]
   17988:	ldr	r0, [r4, #8]
   1798c:	ble	179b4 <__assert_fail@plt+0x649c>
   17990:	ldr	r5, [r0, lr, lsl #2]
   17994:	ldr	r4, [r0, r3, lsl #2]
   17998:	cmp	r5, r4
   1799c:	ble	179c8 <__assert_fail@plt+0x64b0>
   179a0:	add	r1, r3, r2
   179a4:	subs	r2, r2, #1
   179a8:	sub	lr, lr, #1
   179ac:	str	r5, [r0, r1, lsl #2]
   179b0:	bne	17990 <__assert_fail@plt+0x6478>
   179b4:	lsl	r2, r2, #2
   179b8:	add	r1, r0, ip, lsl #2
   179bc:	bl	11248 <memcpy@plt>
   179c0:	mov	r0, #0
   179c4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   179c8:	add	r1, r3, r2
   179cc:	subs	r3, r3, #1
   179d0:	str	r4, [r0, r1, lsl #2]
   179d4:	bcs	17990 <__assert_fail@plt+0x6478>
   179d8:	b	179b4 <__assert_fail@plt+0x649c>
   179dc:	mov	r0, r3
   179e0:	bx	lr
   179e4:	mov	r0, #12
   179e8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   179ec:	ldr	r3, [r1, #4]
   179f0:	str	r3, [r0, #4]
   179f4:	ldr	r2, [r1, #4]
   179f8:	cmp	r2, #0
   179fc:	ble	17a4c <__assert_fail@plt+0x6534>
   17a00:	push	{r4, r5, r6, lr}
   17a04:	mov	r4, r0
   17a08:	str	r3, [r0]
   17a0c:	lsl	r0, r3, #2
   17a10:	mov	r5, r1
   17a14:	bl	20bbc <__assert_fail@plt+0xf6a4>
   17a18:	cmp	r0, #0
   17a1c:	str	r0, [r4, #8]
   17a20:	bne	17a34 <__assert_fail@plt+0x651c>
   17a24:	str	r0, [r4, #4]
   17a28:	str	r0, [r4]
   17a2c:	mov	r0, #12
   17a30:	pop	{r4, r5, r6, pc}
   17a34:	ldr	r2, [r5, #4]
   17a38:	ldr	r1, [r5, #8]
   17a3c:	lsl	r2, r2, #2
   17a40:	bl	11248 <memcpy@plt>
   17a44:	mov	r0, #0
   17a48:	pop	{r4, r5, r6, pc}
   17a4c:	mov	r3, #0
   17a50:	str	r3, [r0]
   17a54:	str	r3, [r0, #4]
   17a58:	str	r3, [r0, #8]
   17a5c:	mov	r0, r3
   17a60:	bx	lr
   17a64:	cmp	r1, #0
   17a68:	beq	17b00 <__assert_fail@plt+0x65e8>
   17a6c:	ldr	r3, [r1, #4]
   17a70:	cmp	r2, #0
   17a74:	cmpne	r3, #0
   17a78:	ble	17af4 <__assert_fail@plt+0x65dc>
   17a7c:	ldr	ip, [r2, #4]
   17a80:	cmp	ip, #0
   17a84:	ble	17afc <__assert_fail@plt+0x65e4>
   17a88:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17a8c:	mov	r6, r0
   17a90:	add	r0, r3, ip
   17a94:	str	r0, [r6]
   17a98:	lsl	r0, r0, #2
   17a9c:	mov	r5, r1
   17aa0:	mov	r7, r2
   17aa4:	bl	20bbc <__assert_fail@plt+0xf6a4>
   17aa8:	cmp	r0, #0
   17aac:	str	r0, [r6, #8]
   17ab0:	beq	17b64 <__assert_fail@plt+0x664c>
   17ab4:	mov	r3, #0
   17ab8:	ldr	r2, [r5, #4]
   17abc:	mov	r8, r0
   17ac0:	mov	r9, #1
   17ac4:	mov	lr, r3
   17ac8:	cmp	lr, r2
   17acc:	sub	r4, r9, #1
   17ad0:	ldr	ip, [r7, #4]
   17ad4:	bge	17b6c <__assert_fail@plt+0x6654>
   17ad8:	cmp	r3, ip
   17adc:	ldr	r1, [r5, #8]
   17ae0:	blt	17b30 <__assert_fail@plt+0x6618>
   17ae4:	sub	r5, r2, lr
   17ae8:	add	r1, r1, lr, lsl #2
   17aec:	lsl	r2, r5, #2
   17af0:	b	17b84 <__assert_fail@plt+0x666c>
   17af4:	cmp	r3, #0
   17af8:	ble	17b00 <__assert_fail@plt+0x65e8>
   17afc:	b	179ec <__assert_fail@plt+0x64d4>
   17b00:	cmp	r2, #0
   17b04:	beq	17b18 <__assert_fail@plt+0x6600>
   17b08:	ldr	r3, [r2, #4]
   17b0c:	cmp	r3, #0
   17b10:	movgt	r1, r2
   17b14:	bgt	17afc <__assert_fail@plt+0x65e4>
   17b18:	mov	r3, #0
   17b1c:	str	r3, [r0]
   17b20:	str	r3, [r0, #4]
   17b24:	str	r3, [r0, #8]
   17b28:	mov	r0, r3
   17b2c:	bx	lr
   17b30:	ldr	ip, [r7, #8]
   17b34:	ldr	r1, [r1, lr, lsl #2]
   17b38:	ldr	ip, [ip, r3, lsl #2]
   17b3c:	cmp	r1, ip
   17b40:	addgt	r3, r3, #1
   17b44:	strgt	ip, [r8]
   17b48:	bgt	17b58 <__assert_fail@plt+0x6640>
   17b4c:	addeq	r3, r3, #1
   17b50:	add	lr, lr, #1
   17b54:	str	r1, [r8]
   17b58:	add	r9, r9, #1
   17b5c:	add	r8, r8, #4
   17b60:	b	17ac8 <__assert_fail@plt+0x65b0>
   17b64:	mov	r0, #12
   17b68:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17b6c:	cmp	r3, ip
   17b70:	bge	17b90 <__assert_fail@plt+0x6678>
   17b74:	sub	r5, ip, r3
   17b78:	ldr	r1, [r7, #8]
   17b7c:	lsl	r2, r5, #2
   17b80:	add	r1, r1, r3, lsl #2
   17b84:	add	r0, r0, r4, lsl #2
   17b88:	bl	11248 <memcpy@plt>
   17b8c:	add	r4, r4, r5
   17b90:	str	r4, [r6, #4]
   17b94:	mov	r0, #0
   17b98:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17b9c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17ba0:	mov	ip, #0
   17ba4:	ldr	r4, [r2, #4]
   17ba8:	sub	sp, sp, #20
   17bac:	cmp	r4, ip
   17bb0:	str	ip, [r0]
   17bb4:	addne	r9, r4, r3
   17bb8:	bne	17bd8 <__assert_fail@plt+0x66c0>
   17bbc:	mov	r0, r4
   17bc0:	add	sp, sp, #20
   17bc4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17bc8:	ldr	lr, [r2, #8]
   17bcc:	ldr	lr, [lr, ip, lsl #2]
   17bd0:	add	ip, ip, #1
   17bd4:	add	r9, r9, lr
   17bd8:	cmp	r4, ip
   17bdc:	bgt	17bc8 <__assert_fail@plt+0x66b0>
   17be0:	mov	r7, r3
   17be4:	ldr	r3, [r1, #68]	; 0x44
   17be8:	mov	r5, r2
   17bec:	and	r2, r9, r3
   17bf0:	mov	r3, #12
   17bf4:	mov	r8, r1
   17bf8:	mul	r3, r3, r2
   17bfc:	ldr	r2, [r1, #32]
   17c00:	mov	r6, #0
   17c04:	add	sl, r2, r3
   17c08:	ldr	fp, [r2, r3]
   17c0c:	str	r0, [sp, #8]
   17c10:	cmp	r6, fp
   17c14:	blt	17c60 <__assert_fail@plt+0x6748>
   17c18:	mov	r1, #1
   17c1c:	mov	r0, #56	; 0x38
   17c20:	bl	20b74 <__assert_fail@plt+0xf65c>
   17c24:	subs	r4, r0, #0
   17c28:	beq	17c4c <__assert_fail@plt+0x6734>
   17c2c:	add	sl, r4, #4
   17c30:	mov	r1, r5
   17c34:	mov	r0, sl
   17c38:	bl	179ec <__assert_fail@plt+0x64d4>
   17c3c:	subs	r6, r0, #0
   17c40:	beq	17ca8 <__assert_fail@plt+0x6790>
   17c44:	mov	r0, r4
   17c48:	bl	130e8 <__assert_fail@plt+0x1bd0>
   17c4c:	ldr	r2, [sp, #8]
   17c50:	mov	r3, #12
   17c54:	mov	r4, #0
   17c58:	str	r3, [r2]
   17c5c:	b	17bbc <__assert_fail@plt+0x66a4>
   17c60:	ldr	r3, [sl, #8]
   17c64:	ldr	r4, [r3, r6, lsl #2]
   17c68:	ldr	r3, [r4]
   17c6c:	cmp	r3, r9
   17c70:	bne	17ca0 <__assert_fail@plt+0x6788>
   17c74:	ldrb	r3, [r4, #52]	; 0x34
   17c78:	and	r3, r3, #15
   17c7c:	cmp	r7, r3
   17c80:	bne	17ca0 <__assert_fail@plt+0x6788>
   17c84:	ldr	r0, [r4, #40]	; 0x28
   17c88:	cmp	r0, #0
   17c8c:	beq	17ca0 <__assert_fail@plt+0x6788>
   17c90:	mov	r1, r5
   17c94:	bl	176ec <__assert_fail@plt+0x61d4>
   17c98:	cmp	r0, #0
   17c9c:	bne	17bbc <__assert_fail@plt+0x66a4>
   17ca0:	add	r6, r6, #1
   17ca4:	b	17c10 <__assert_fail@plt+0x66f8>
   17ca8:	ldrb	r2, [r4, #52]	; 0x34
   17cac:	and	r3, r7, #15
   17cb0:	mov	fp, r6
   17cb4:	bic	r2, r2, #15
   17cb8:	orr	r3, r3, r2
   17cbc:	strb	r3, [r4, #52]	; 0x34
   17cc0:	and	r3, r7, #4
   17cc4:	str	r3, [sp]
   17cc8:	and	r3, r7, #2
   17ccc:	str	sl, [r4, #40]	; 0x28
   17cd0:	str	r3, [sp, #4]
   17cd4:	ldr	r3, [r5, #4]
   17cd8:	cmp	fp, r3
   17cdc:	blt	17cfc <__assert_fail@plt+0x67e4>
   17ce0:	mov	r2, r9
   17ce4:	mov	r1, r4
   17ce8:	mov	r0, r8
   17cec:	bl	159e0 <__assert_fail@plt+0x44c8>
   17cf0:	cmp	r0, #0
   17cf4:	beq	17bbc <__assert_fail@plt+0x66a4>
   17cf8:	b	17da8 <__assert_fail@plt+0x6890>
   17cfc:	ldr	r3, [r5, #8]
   17d00:	ldr	r1, [r8]
   17d04:	ldr	r2, [pc, #304]	; 17e3c <__assert_fail@plt+0x6924>
   17d08:	ldr	r3, [r3, fp, lsl #2]
   17d0c:	add	r1, r1, r3, lsl #3
   17d10:	ldr	r3, [r1, #4]
   17d14:	ldrb	ip, [r1, #4]
   17d18:	ands	r3, r2, r3, lsr #8
   17d1c:	moveq	r0, #1
   17d20:	movne	r0, #0
   17d24:	cmp	ip, #1
   17d28:	movne	r0, #0
   17d2c:	andeq	r0, r0, #1
   17d30:	cmp	r0, #0
   17d34:	bne	17e34 <__assert_fail@plt+0x691c>
   17d38:	ldrb	r1, [r1, #6]
   17d3c:	ldrb	r0, [r4, #52]	; 0x34
   17d40:	cmp	ip, #2
   17d44:	lsr	r1, r1, #4
   17d48:	orr	r1, r1, r0, lsr #5
   17d4c:	and	r1, r1, #1
   17d50:	bic	r0, r0, #32
   17d54:	orr	r1, r0, r1, lsl #5
   17d58:	strb	r1, [r4, #52]	; 0x34
   17d5c:	uxtbeq	r1, r1
   17d60:	orreq	r1, r1, #16
   17d64:	beq	17d78 <__assert_fail@plt+0x6860>
   17d68:	cmp	ip, #4
   17d6c:	bne	17d7c <__assert_fail@plt+0x6864>
   17d70:	ldrb	r1, [r4, #52]	; 0x34
   17d74:	orr	r1, r1, #64	; 0x40
   17d78:	strb	r1, [r4, #52]	; 0x34
   17d7c:	cmp	r3, #0
   17d80:	beq	17e34 <__assert_fail@plt+0x691c>
   17d84:	ldr	r1, [r4, #40]	; 0x28
   17d88:	cmp	sl, r1
   17d8c:	bne	17ddc <__assert_fail@plt+0x68c4>
   17d90:	mov	r0, #12
   17d94:	str	r3, [sp, #12]
   17d98:	bl	20bbc <__assert_fail@plt+0xf6a4>
   17d9c:	ldr	r3, [sp, #12]
   17da0:	subs	r1, r0, #0
   17da4:	bne	17db4 <__assert_fail@plt+0x689c>
   17da8:	mov	r0, r4
   17dac:	bl	164c4 <__assert_fail@plt+0x4fac>
   17db0:	b	17c4c <__assert_fail@plt+0x6734>
   17db4:	str	r1, [r4, #40]	; 0x28
   17db8:	mov	r1, r5
   17dbc:	str	r3, [sp, #12]
   17dc0:	bl	179ec <__assert_fail@plt+0x64d4>
   17dc4:	ldr	r3, [sp, #12]
   17dc8:	subs	r6, r0, #0
   17dcc:	bne	17da8 <__assert_fail@plt+0x6890>
   17dd0:	ldrb	r1, [r4, #52]	; 0x34
   17dd4:	orr	r1, r1, #128	; 0x80
   17dd8:	strb	r1, [r4, #52]	; 0x34
   17ddc:	tst	r3, #1
   17de0:	beq	17dec <__assert_fail@plt+0x68d4>
   17de4:	tst	r7, #1
   17de8:	beq	17e24 <__assert_fail@plt+0x690c>
   17dec:	tst	r3, #2
   17df0:	beq	17dfc <__assert_fail@plt+0x68e4>
   17df4:	tst	r7, #1
   17df8:	bne	17e24 <__assert_fail@plt+0x690c>
   17dfc:	tst	r3, #16
   17e00:	beq	17e10 <__assert_fail@plt+0x68f8>
   17e04:	ldr	r2, [sp, #4]
   17e08:	cmp	r2, #0
   17e0c:	beq	17e24 <__assert_fail@plt+0x690c>
   17e10:	tst	r3, #64	; 0x40
   17e14:	beq	17e34 <__assert_fail@plt+0x691c>
   17e18:	ldr	r3, [sp]
   17e1c:	cmp	r3, #0
   17e20:	bne	17e34 <__assert_fail@plt+0x691c>
   17e24:	sub	r1, fp, r6
   17e28:	mov	r0, sl
   17e2c:	bl	1772c <__assert_fail@plt+0x6214>
   17e30:	add	r6, r6, #1
   17e34:	add	fp, fp, #1
   17e38:	b	17cd4 <__assert_fail@plt+0x67bc>
   17e3c:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   17e40:	ldrb	r3, [r1, #24]
   17e44:	cmp	r3, #16
   17e48:	bne	17e68 <__assert_fail@plt+0x6950>
   17e4c:	ldr	r3, [r1, #4]
   17e50:	mov	r0, #0
   17e54:	ldr	r2, [r3, #12]
   17e58:	ldr	r3, [r3, #28]
   17e5c:	str	r2, [r1, #12]
   17e60:	str	r3, [r1, #28]
   17e64:	bx	lr
   17e68:	push	{r4, r5, r6, lr}
   17e6c:	add	r3, r1, #20
   17e70:	mov	r4, r1
   17e74:	mov	r5, r0
   17e78:	str	r1, [r4, #12]
   17e7c:	ldm	r3, {r1, r2}
   17e80:	bl	1628c <__assert_fail@plt+0x4d74>
   17e84:	cmn	r0, #1
   17e88:	str	r0, [r4, #28]
   17e8c:	beq	17ecc <__assert_fail@plt+0x69b4>
   17e90:	ldrb	r3, [r4, #24]
   17e94:	cmp	r3, #12
   17e98:	bne	17ec4 <__assert_fail@plt+0x69ac>
   17e9c:	ldr	r3, [r5]
   17ea0:	ldr	r2, [r4, #20]
   17ea4:	add	r0, r3, r0, lsl #3
   17ea8:	lsl	r2, r2, #22
   17eac:	ldr	r3, [r0, #4]
   17eb0:	lsr	r2, r2, #22
   17eb4:	bic	r3, r3, #261120	; 0x3fc00
   17eb8:	bic	r3, r3, #768	; 0x300
   17ebc:	orr	r3, r3, r2, lsl #8
   17ec0:	str	r3, [r0, #4]
   17ec4:	mov	r0, #0
   17ec8:	pop	{r4, r5, r6, pc}
   17ecc:	mov	r0, #12
   17ed0:	pop	{r4, r5, r6, pc}
   17ed4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17ed8:	sub	sp, sp, #36	; 0x24
   17edc:	ldr	r5, [r0, #28]
   17ee0:	str	r3, [sp, #4]
   17ee4:	mov	r3, #12
   17ee8:	mov	r8, r0
   17eec:	mla	r5, r3, r1, r5
   17ef0:	mov	sl, r1
   17ef4:	mov	r7, r2
   17ef8:	mvn	fp, #0
   17efc:	mov	r4, #0
   17f00:	str	r4, [sp, #20]
   17f04:	str	r4, [sp, #24]
   17f08:	str	r4, [sp, #28]
   17f0c:	str	r3, [sp, #8]
   17f10:	ldr	r3, [r5, #4]
   17f14:	cmp	r4, r3
   17f18:	blt	17f3c <__assert_fail@plt+0x6a24>
   17f1c:	mov	r4, #0
   17f20:	ldr	r3, [r5, #4]
   17f24:	cmp	r4, r3
   17f28:	blt	18020 <__assert_fail@plt+0x6b08>
   17f2c:	ldr	r0, [sp, #28]
   17f30:	bl	130e8 <__assert_fail@plt+0x1bd0>
   17f34:	mov	r6, #0
   17f38:	b	1800c <__assert_fail@plt+0x6af4>
   17f3c:	ldr	r3, [r5, #8]
   17f40:	ldr	r6, [r3, r4, lsl #2]
   17f44:	cmp	sl, r6
   17f48:	beq	18018 <__assert_fail@plt+0x6b00>
   17f4c:	ldr	r3, [r8]
   17f50:	add	r3, r3, r6, lsl #3
   17f54:	ldrb	r3, [r3, #4]
   17f58:	tst	r3, #8
   17f5c:	beq	18018 <__assert_fail@plt+0x6b00>
   17f60:	ldr	r3, [sp, #8]
   17f64:	mov	r0, r5
   17f68:	mul	r6, r3, r6
   17f6c:	ldr	r3, [r8, #20]
   17f70:	add	r3, r3, r6
   17f74:	ldr	r1, [r3, #8]
   17f78:	ldr	r3, [r3, #4]
   17f7c:	ldr	r2, [r1]
   17f80:	cmp	r3, #1
   17f84:	movle	r9, fp
   17f88:	ldrgt	r9, [r1, #4]
   17f8c:	mov	r1, r2
   17f90:	str	r2, [sp, #12]
   17f94:	bl	14f60 <__assert_fail@plt+0x3a48>
   17f98:	cmp	r0, #0
   17f9c:	bne	17fb8 <__assert_fail@plt+0x6aa0>
   17fa0:	ldr	r2, [sp, #12]
   17fa4:	mov	r0, r7
   17fa8:	mov	r1, r2
   17fac:	bl	14f60 <__assert_fail@plt+0x3a48>
   17fb0:	cmp	r0, #0
   17fb4:	bne	17fe8 <__assert_fail@plt+0x6ad0>
   17fb8:	cmp	r9, #0
   17fbc:	ble	18018 <__assert_fail@plt+0x6b00>
   17fc0:	mov	r1, r9
   17fc4:	mov	r0, r5
   17fc8:	bl	14f60 <__assert_fail@plt+0x3a48>
   17fcc:	cmp	r0, #0
   17fd0:	bne	18018 <__assert_fail@plt+0x6b00>
   17fd4:	mov	r1, r9
   17fd8:	mov	r0, r7
   17fdc:	bl	14f60 <__assert_fail@plt+0x3a48>
   17fe0:	cmp	r0, #0
   17fe4:	beq	18018 <__assert_fail@plt+0x6b00>
   17fe8:	ldr	r2, [r8, #28]
   17fec:	ldr	r1, [sp, #4]
   17ff0:	add	r2, r2, r6
   17ff4:	add	r0, sp, #20
   17ff8:	bl	17874 <__assert_fail@plt+0x635c>
   17ffc:	subs	r6, r0, #0
   18000:	beq	18018 <__assert_fail@plt+0x6b00>
   18004:	ldr	r0, [sp, #28]
   18008:	bl	130e8 <__assert_fail@plt+0x1bd0>
   1800c:	mov	r0, r6
   18010:	add	sp, sp, #36	; 0x24
   18014:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18018:	add	r4, r4, #1
   1801c:	b	17f10 <__assert_fail@plt+0x69f8>
   18020:	ldr	r3, [r5, #8]
   18024:	add	r0, sp, #20
   18028:	ldr	r6, [r3, r4, lsl #2]
   1802c:	mov	r1, r6
   18030:	bl	14f60 <__assert_fail@plt+0x3a48>
   18034:	cmp	r0, #0
   18038:	bne	18054 <__assert_fail@plt+0x6b3c>
   1803c:	mov	r1, r6
   18040:	mov	r0, r7
   18044:	bl	14f60 <__assert_fail@plt+0x3a48>
   18048:	sub	r1, r0, #1
   1804c:	mov	r0, r7
   18050:	bl	1772c <__assert_fail@plt+0x6214>
   18054:	add	r4, r4, #1
   18058:	b	17f20 <__assert_fail@plt+0x6a08>
   1805c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18060:	sub	sp, sp, #300	; 0x12c
   18064:	ldr	r6, [r0]
   18068:	mov	r8, r0
   1806c:	mov	r9, r1
   18070:	ldr	r3, [r6, #92]	; 0x5c
   18074:	mov	r4, r2
   18078:	cmp	r3, #1
   1807c:	movne	r3, #0
   18080:	ldreq	r3, [r0, #12]
   18084:	add	r7, sp, #40	; 0x28
   18088:	lsreq	r3, r3, #22
   1808c:	andeq	r3, r3, #1
   18090:	str	r3, [sp, #4]
   18094:	mov	r3, #0
   18098:	str	r3, [sp]
   1809c:	ldr	r3, [r9, #8]
   180a0:	ldr	r2, [sp]
   180a4:	cmp	r2, r3
   180a8:	bge	183bc <__assert_fail@plt+0x6ea4>
   180ac:	ldr	r3, [r9, #12]
   180b0:	ldr	r2, [sp]
   180b4:	ldr	sl, [r3, r2, lsl #2]
   180b8:	lsl	r3, sl, #3
   180bc:	str	r3, [sp, #8]
   180c0:	ldr	r3, [r6]
   180c4:	lsl	r2, sl, #3
   180c8:	add	r2, r3, r2
   180cc:	ldrb	r5, [r2, #4]
   180d0:	cmp	r5, #1
   180d4:	bne	181bc <__assert_fail@plt+0x6ca4>
   180d8:	ldrb	r0, [r3, sl, lsl #3]
   180dc:	ldr	r3, [sp, #4]
   180e0:	cmp	r3, #0
   180e4:	strb	r5, [r4, r0]
   180e8:	beq	180f4 <__assert_fail@plt+0x6bdc>
   180ec:	bl	11260 <tolower@plt>
   180f0:	strb	r5, [r4, r0]
   180f4:	ldr	r3, [r8, #12]
   180f8:	tst	r3, #4194304	; 0x400000
   180fc:	beq	1819c <__assert_fail@plt+0x6c84>
   18100:	ldr	r3, [r6, #92]	; 0x5c
   18104:	cmp	r3, #1
   18108:	ble	1819c <__assert_fail@plt+0x6c84>
   1810c:	ldr	r2, [r6]
   18110:	ldr	r0, [pc, #684]	; 183c4 <__assert_fail@plt+0x6eac>
   18114:	mov	r5, #1
   18118:	ldrb	r3, [r2, sl, lsl #3]
   1811c:	strb	r3, [sp, #40]	; 0x28
   18120:	ldr	ip, [r6, #8]
   18124:	add	r1, sl, r5
   18128:	cmp	ip, r1
   1812c:	bls	1814c <__assert_fail@plt+0x6c34>
   18130:	add	r3, r2, r1, lsl #3
   18134:	ldr	r3, [r3, #4]
   18138:	bic	r3, r3, #-16777216	; 0xff000000
   1813c:	bic	r3, r3, #14614528	; 0xdf0000
   18140:	bic	r3, r3, #65280	; 0xff00
   18144:	cmp	r3, r0
   18148:	beq	181ac <__assert_fail@plt+0x6c94>
   1814c:	mov	r3, #0
   18150:	str	r3, [sp, #32]
   18154:	str	r3, [sp, #36]	; 0x24
   18158:	mov	r2, r5
   1815c:	add	r3, sp, #32
   18160:	mov	r1, r7
   18164:	add	r0, sp, #28
   18168:	bl	13358 <__assert_fail@plt+0x1e40>
   1816c:	cmp	r0, r5
   18170:	bne	1819c <__assert_fail@plt+0x6c84>
   18174:	ldr	r0, [sp, #28]
   18178:	bl	11278 <towlower@plt>
   1817c:	add	r2, sp, #32
   18180:	mov	r1, r0
   18184:	mov	r0, r7
   18188:	bl	111b8 <wcrtomb@plt>
   1818c:	cmn	r0, #1
   18190:	movne	r2, #1
   18194:	ldrbne	r3, [sp, #40]	; 0x28
   18198:	strbne	r2, [r4, r3]
   1819c:	ldr	r3, [sp]
   181a0:	add	r3, r3, #1
   181a4:	str	r3, [sp]
   181a8:	b	1809c <__assert_fail@plt+0x6b84>
   181ac:	ldrb	r3, [r2, r1, lsl #3]
   181b0:	strb	r3, [r7, r5]
   181b4:	add	r5, r5, #1
   181b8:	b	18124 <__assert_fail@plt+0x6c0c>
   181bc:	cmp	r5, #3
   181c0:	bne	18244 <__assert_fail@plt+0x6d2c>
   181c4:	mov	sl, #0
   181c8:	mov	r1, #1
   181cc:	ldr	r2, [sp, #8]
   181d0:	ldr	r3, [r6]
   181d4:	lsl	fp, sl, #3
   181d8:	mov	r5, #0
   181dc:	ldr	r3, [r3, r2]
   181e0:	add	r2, r4, fp
   181e4:	ldr	r3, [r3, sl]
   181e8:	lsr	ip, r3, r5
   181ec:	tst	ip, #1
   181f0:	add	r0, r5, fp
   181f4:	beq	18228 <__assert_fail@plt+0x6d10>
   181f8:	ldr	ip, [sp, #4]
   181fc:	strb	r1, [r2, r5]
   18200:	cmp	ip, #0
   18204:	beq	18228 <__assert_fail@plt+0x6d10>
   18208:	str	r1, [sp, #20]
   1820c:	str	r2, [sp, #16]
   18210:	str	r3, [sp, #12]
   18214:	bl	11260 <tolower@plt>
   18218:	ldr	r2, [sp, #16]
   1821c:	ldr	r3, [sp, #12]
   18220:	ldr	r1, [sp, #20]
   18224:	strb	r1, [r4, r0]
   18228:	add	r5, r5, #1
   1822c:	cmp	r5, #32
   18230:	bne	181e8 <__assert_fail@plt+0x6cd0>
   18234:	add	sl, sl, #4
   18238:	cmp	sl, #32
   1823c:	bne	181cc <__assert_fail@plt+0x6cb4>
   18240:	b	1819c <__assert_fail@plt+0x6c84>
   18244:	cmp	r5, #6
   18248:	bne	18388 <__assert_fail@plt+0x6e70>
   1824c:	ldr	r2, [r6, #92]	; 0x5c
   18250:	ldr	fp, [r3, sl, lsl #3]
   18254:	cmp	r2, #1
   18258:	ble	18334 <__assert_fail@plt+0x6e1c>
   1825c:	ldr	r2, [fp, #36]	; 0x24
   18260:	cmp	r2, #0
   18264:	bne	1833c <__assert_fail@plt+0x6e24>
   18268:	ldrb	r2, [fp, #16]
   1826c:	tst	r2, #1
   18270:	bne	1833c <__assert_fail@plt+0x6e24>
   18274:	ldr	r5, [fp, #32]
   18278:	cmp	r5, #0
   1827c:	bne	1833c <__assert_fail@plt+0x6e24>
   18280:	mov	sl, #0
   18284:	ldr	r2, [fp, #20]
   18288:	cmp	r5, r2
   1828c:	bge	1819c <__assert_fail@plt+0x6c84>
   18290:	str	sl, [sp, #32]
   18294:	str	sl, [sp, #36]	; 0x24
   18298:	ldr	r1, [fp]
   1829c:	lsl	r3, r5, #2
   182a0:	add	r2, sp, #32
   182a4:	ldr	r1, [r1, r5, lsl #2]
   182a8:	mov	r0, r7
   182ac:	str	r3, [sp, #8]
   182b0:	bl	111b8 <wcrtomb@plt>
   182b4:	cmn	r0, #1
   182b8:	beq	182e4 <__assert_fail@plt+0x6dcc>
   182bc:	ldrb	r0, [sp, #40]	; 0x28
   182c0:	ldr	r3, [sp, #4]
   182c4:	mov	r2, #1
   182c8:	cmp	r3, #0
   182cc:	strb	r2, [r4, r0]
   182d0:	str	r2, [sp, #8]
   182d4:	beq	182e4 <__assert_fail@plt+0x6dcc>
   182d8:	bl	11260 <tolower@plt>
   182dc:	ldr	r2, [sp, #8]
   182e0:	strb	r2, [r4, r0]
   182e4:	ldr	r2, [r8, #12]
   182e8:	tst	r2, #4194304	; 0x400000
   182ec:	beq	1832c <__assert_fail@plt+0x6e14>
   182f0:	ldr	r2, [r6, #92]	; 0x5c
   182f4:	cmp	r2, #1
   182f8:	ble	1832c <__assert_fail@plt+0x6e14>
   182fc:	ldr	r2, [fp]
   18300:	lsl	r3, r5, #2
   18304:	ldr	r0, [r2, r3]
   18308:	bl	11278 <towlower@plt>
   1830c:	add	r2, sp, #32
   18310:	mov	r1, r0
   18314:	mov	r0, r7
   18318:	bl	111b8 <wcrtomb@plt>
   1831c:	cmn	r0, #1
   18320:	movne	r1, #1
   18324:	ldrbne	r2, [sp, #40]	; 0x28
   18328:	strbne	r1, [r4, r2]
   1832c:	add	r5, r5, #1
   18330:	b	18284 <__assert_fail@plt+0x6d6c>
   18334:	mov	r5, #0
   18338:	b	18280 <__assert_fail@plt+0x6d68>
   1833c:	mov	r5, #0
   18340:	strb	r5, [sp, #32]
   18344:	mov	r2, #1
   18348:	mov	r3, r7
   1834c:	add	r1, sp, #32
   18350:	mov	r0, r5
   18354:	str	r5, [r7]
   18358:	str	r5, [r7, #4]
   1835c:	bl	13358 <__assert_fail@plt+0x1e40>
   18360:	ldrb	r3, [sp, #32]
   18364:	cmn	r0, #2
   18368:	moveq	r2, #1
   1836c:	strbeq	r2, [r4, r3]
   18370:	add	r3, r3, #1
   18374:	uxtb	r3, r3
   18378:	cmp	r3, #0
   1837c:	strb	r3, [sp, #32]
   18380:	bne	18344 <__assert_fail@plt+0x6e2c>
   18384:	b	1819c <__assert_fail@plt+0x6c84>
   18388:	and	r3, r5, #253	; 0xfd
   1838c:	cmp	r3, #5
   18390:	beq	1839c <__assert_fail@plt+0x6e84>
   18394:	cmp	r5, #2
   18398:	bne	1819c <__assert_fail@plt+0x6c84>
   1839c:	mov	r2, #256	; 0x100
   183a0:	mov	r1, #1
   183a4:	mov	r0, r4
   183a8:	bl	1141c <memset@plt>
   183ac:	cmp	r5, #2
   183b0:	ldrbeq	r3, [r8, #28]
   183b4:	orreq	r3, r3, #1
   183b8:	strbeq	r3, [r8, #28]
   183bc:	add	sp, sp, #300	; 0x12c
   183c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   183c4:	eoreq	r0, r0, r1
   183c8:	ldr	r3, [r0]
   183cc:	push	{r4, r5, r6, lr}
   183d0:	cmp	r3, #0
   183d4:	bne	183e8 <__assert_fail@plt+0x6ed0>
   183d8:	bl	15970 <__assert_fail@plt+0x4458>
   183dc:	clz	r0, r0
   183e0:	lsr	r0, r0, #5
   183e4:	pop	{r4, r5, r6, pc}
   183e8:	ldr	r2, [r0, #4]
   183ec:	mov	r4, r0
   183f0:	cmp	r2, #0
   183f4:	mov	r5, r1
   183f8:	ldreq	r3, [r0, #8]
   183fc:	streq	r1, [r3]
   18400:	beq	18484 <__assert_fail@plt+0x6f6c>
   18404:	cmp	r3, r2
   18408:	bne	1842c <__assert_fail@plt+0x6f14>
   1840c:	lsl	r2, r3, #1
   18410:	str	r2, [r0]
   18414:	lsl	r1, r3, #3
   18418:	ldr	r0, [r0, #8]
   1841c:	bl	20bfc <__assert_fail@plt+0xf6e4>
   18420:	cmp	r0, #0
   18424:	popeq	{r4, r5, r6, pc}
   18428:	str	r0, [r4, #8]
   1842c:	ldr	r2, [r4, #8]
   18430:	ldr	r3, [r2]
   18434:	cmp	r5, r3
   18438:	ldr	r3, [r4, #4]
   1843c:	movlt	r1, r3
   18440:	addlt	r0, r2, r3, lsl #2
   18444:	blt	18470 <__assert_fail@plt+0x6f58>
   18448:	add	r1, r2, r3, lsl #2
   1844c:	ldr	r0, [r1, #-4]
   18450:	cmp	r5, r0
   18454:	bge	18480 <__assert_fail@plt+0x6f68>
   18458:	str	r0, [r1], #-4
   1845c:	sub	r3, r3, #1
   18460:	b	1844c <__assert_fail@plt+0x6f34>
   18464:	ldr	ip, [r0, #-4]
   18468:	sub	r1, r1, #1
   1846c:	str	ip, [r0], #-4
   18470:	cmp	r1, #0
   18474:	bgt	18464 <__assert_fail@plt+0x6f4c>
   18478:	cmp	r3, #0
   1847c:	subge	r3, r3, r3
   18480:	str	r5, [r2, r3, lsl #2]
   18484:	ldr	r3, [r4, #4]
   18488:	mov	r0, #1
   1848c:	add	r3, r3, #1
   18490:	str	r3, [r4, #4]
   18494:	pop	{r4, r5, r6, pc}
   18498:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1849c:	sub	sp, sp, #20
   184a0:	mov	r4, r0
   184a4:	ldr	r6, [sp, #56]	; 0x38
   184a8:	mov	r7, r1
   184ac:	mov	r5, r2
   184b0:	mov	fp, r3
   184b4:	mov	sl, #12
   184b8:	ldr	ip, [r4]
   184bc:	ldr	r2, [r4, #20]
   184c0:	add	r1, ip, r7, lsl #3
   184c4:	ldrb	r3, [r1, #4]
   184c8:	cmp	r3, #4
   184cc:	bne	18544 <__assert_fail@plt+0x702c>
   184d0:	ldr	r3, [r4, #12]
   184d4:	mul	r9, sl, r5
   184d8:	ldr	r8, [r3, r7, lsl #2]
   184dc:	add	r2, r2, r9
   184e0:	mov	r1, #0
   184e4:	str	r1, [r2, #4]
   184e8:	mov	r0, r4
   184ec:	mov	r2, r6
   184f0:	mov	r1, r8
   184f4:	str	r5, [sp, #12]
   184f8:	bl	16434 <__assert_fail@plt+0x4f1c>
   184fc:	ldr	r3, [sp, #12]
   18500:	cmn	r0, #1
   18504:	mov	r5, r0
   18508:	bne	18518 <__assert_fail@plt+0x7000>
   1850c:	mov	r0, #12
   18510:	add	sp, sp, #20
   18514:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18518:	ldr	r2, [r4, #12]
   1851c:	ldr	r1, [r2, r7, lsl #2]
   18520:	str	r1, [r2, r3, lsl #2]
   18524:	ldr	r0, [r4, #20]
   18528:	mov	r1, r5
   1852c:	add	r0, r0, r9
   18530:	bl	183c8 <__assert_fail@plt+0x6eb0>
   18534:	cmp	r0, #0
   18538:	beq	1850c <__assert_fail@plt+0x6ff4>
   1853c:	mov	r7, r8
   18540:	b	184b8 <__assert_fail@plt+0x6fa0>
   18544:	mul	r8, sl, r7
   18548:	add	r3, r2, r8
   1854c:	ldr	r0, [r3, #4]
   18550:	cmp	r0, #0
   18554:	ldreq	r3, [r4, #12]
   18558:	ldreq	r2, [r3, r7, lsl #2]
   1855c:	streq	r2, [r3, r5, lsl #2]
   18560:	beq	18510 <__assert_fail@plt+0x6ff8>
   18564:	cmp	r0, #1
   18568:	ldr	r3, [r3, #8]
   1856c:	mul	r9, sl, r5
   18570:	bne	185f0 <__assert_fail@plt+0x70d8>
   18574:	cmp	r7, r5
   18578:	ldr	r8, [r3]
   1857c:	add	r0, r2, r9
   18580:	mov	r3, #0
   18584:	sub	r2, r7, fp
   18588:	clz	r2, r2
   1858c:	lsr	r2, r2, #5
   18590:	moveq	r2, #0
   18594:	cmp	r2, r3
   18598:	str	r3, [r0, #4]
   1859c:	beq	185c0 <__assert_fail@plt+0x70a8>
   185a0:	mov	r1, r8
   185a4:	str	r3, [sp, #12]
   185a8:	bl	183c8 <__assert_fail@plt+0x6eb0>
   185ac:	ldr	r3, [sp, #12]
   185b0:	cmp	r0, #0
   185b4:	movne	r0, r3
   185b8:	bne	18510 <__assert_fail@plt+0x6ff8>
   185bc:	b	1850c <__assert_fail@plt+0x6ff4>
   185c0:	ldr	r3, [r1, #4]
   185c4:	ldr	r2, [pc, #272]	; 186dc <__assert_fail@plt+0x71c4>
   185c8:	and	r3, r2, r3, lsr #8
   185cc:	orr	r6, r6, r3
   185d0:	mov	r2, r6
   185d4:	mov	r1, r8
   185d8:	mov	r0, r4
   185dc:	bl	16434 <__assert_fail@plt+0x4f1c>
   185e0:	cmn	r0, #1
   185e4:	mov	r5, r0
   185e8:	bne	18524 <__assert_fail@plt+0x700c>
   185ec:	b	1850c <__assert_fail@plt+0x6ff4>
   185f0:	add	r0, r2, r9
   185f4:	ldr	r5, [r3]
   185f8:	mov	r3, #0
   185fc:	str	r3, [r0, #4]
   18600:	ldr	r3, [r4, #8]
   18604:	sub	r2, r3, #-536870911	; 0xe0000001
   18608:	sub	r1, r3, #1
   1860c:	sub	r3, r3, #-1073741823	; 0xc0000001
   18610:	add	ip, ip, r2, lsl #3
   18614:	lsl	r3, r3, #2
   18618:	ldrb	lr, [ip, #6]
   1861c:	cmp	r1, #0
   18620:	movle	r2, #0
   18624:	movgt	r2, #1
   18628:	ands	r2, r2, lr, lsr #2
   1862c:	bne	18698 <__assert_fail@plt+0x7180>
   18630:	mov	r2, r6
   18634:	mov	r1, r5
   18638:	mov	r0, r4
   1863c:	bl	16434 <__assert_fail@plt+0x4f1c>
   18640:	cmn	r0, #1
   18644:	mov	r7, r0
   18648:	beq	1850c <__assert_fail@plt+0x6ff4>
   1864c:	ldr	r0, [r4, #20]
   18650:	mov	r1, r7
   18654:	add	r0, r0, r9
   18658:	bl	183c8 <__assert_fail@plt+0x6eb0>
   1865c:	cmp	r0, #0
   18660:	beq	1850c <__assert_fail@plt+0x6ff4>
   18664:	str	r6, [sp]
   18668:	mov	r3, fp
   1866c:	mov	r2, r7
   18670:	mov	r1, r5
   18674:	mov	r0, r4
   18678:	bl	18498 <__assert_fail@plt+0x6f80>
   1867c:	cmp	r0, #0
   18680:	bne	18510 <__assert_fail@plt+0x6ff8>
   18684:	ldr	r3, [r4, #20]
   18688:	add	r8, r3, r8
   1868c:	ldr	r3, [r8, #8]
   18690:	ldr	r8, [r3, #4]
   18694:	b	185d0 <__assert_fail@plt+0x70b8>
   18698:	ldr	r2, [r4, #16]
   1869c:	ldr	r2, [r2, r3]
   186a0:	cmp	r5, r2
   186a4:	bne	186bc <__assert_fail@plt+0x71a4>
   186a8:	ldr	r2, [ip, #4]
   186ac:	ldr	lr, [pc, #40]	; 186dc <__assert_fail@plt+0x71c4>
   186b0:	and	r2, lr, r2, lsr #8
   186b4:	cmp	r6, r2
   186b8:	beq	186cc <__assert_fail@plt+0x71b4>
   186bc:	sub	r1, r1, #1
   186c0:	sub	ip, ip, #8
   186c4:	sub	r3, r3, #4
   186c8:	b	18618 <__assert_fail@plt+0x7100>
   186cc:	bl	183c8 <__assert_fail@plt+0x6eb0>
   186d0:	cmp	r0, #0
   186d4:	bne	18684 <__assert_fail@plt+0x716c>
   186d8:	b	1850c <__assert_fail@plt+0x6ff4>
   186dc:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   186e0:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   186e4:	mov	r6, r0
   186e8:	ldr	r7, [sp, #40]	; 0x28
   186ec:	mov	r5, r1
   186f0:	mov	r4, r2
   186f4:	mov	r8, r3
   186f8:	mov	r9, #12
   186fc:	mov	r1, r4
   18700:	mov	r0, r5
   18704:	bl	14f60 <__assert_fail@plt+0x3a48>
   18708:	cmp	r0, #0
   1870c:	beq	18718 <__assert_fail@plt+0x7200>
   18710:	mov	r0, #0
   18714:	b	18758 <__assert_fail@plt+0x7240>
   18718:	ldr	r3, [r6]
   1871c:	add	r2, r3, r4, lsl #3
   18720:	ldrb	r2, [r2, #4]
   18724:	cmp	r2, r7
   18728:	bne	18760 <__assert_fail@plt+0x7248>
   1872c:	ldr	r3, [r3, r4, lsl #3]
   18730:	cmp	r8, r3
   18734:	bne	18760 <__assert_fail@plt+0x7248>
   18738:	cmp	r7, #9
   1873c:	bne	18710 <__assert_fail@plt+0x71f8>
   18740:	mov	r1, r4
   18744:	mov	r0, r5
   18748:	bl	183c8 <__assert_fail@plt+0x6eb0>
   1874c:	cmp	r0, #0
   18750:	bne	18710 <__assert_fail@plt+0x71f8>
   18754:	mov	r0, #12
   18758:	add	sp, sp, #12
   1875c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   18760:	mov	r1, r4
   18764:	mov	r0, r5
   18768:	bl	183c8 <__assert_fail@plt+0x6eb0>
   1876c:	cmp	r0, #0
   18770:	beq	18754 <__assert_fail@plt+0x723c>
   18774:	mul	r4, r9, r4
   18778:	ldr	r3, [r6, #20]
   1877c:	add	r3, r3, r4
   18780:	ldr	r2, [r3, #4]
   18784:	cmp	r2, #0
   18788:	beq	18710 <__assert_fail@plt+0x71f8>
   1878c:	cmp	r2, #2
   18790:	beq	187a8 <__assert_fail@plt+0x7290>
   18794:	ldr	r2, [r6, #20]
   18798:	add	r4, r2, r4
   1879c:	ldr	r3, [r4, #8]
   187a0:	ldr	r4, [r3]
   187a4:	b	186fc <__assert_fail@plt+0x71e4>
   187a8:	ldr	r2, [r3, #8]
   187ac:	mov	r1, r5
   187b0:	str	r7, [sp]
   187b4:	mov	r3, r8
   187b8:	ldr	r2, [r2, #4]
   187bc:	mov	r0, r6
   187c0:	bl	186e0 <__assert_fail@plt+0x71c8>
   187c4:	cmp	r0, #0
   187c8:	beq	18794 <__assert_fail@plt+0x727c>
   187cc:	b	18758 <__assert_fail@plt+0x7240>
   187d0:	push	{r4, r5, r6, r7, r8, lr}
   187d4:	subs	r7, r1, #0
   187d8:	bne	187e4 <__assert_fail@plt+0x72cc>
   187dc:	mov	r0, #0
   187e0:	pop	{r4, r5, r6, r7, r8, pc}
   187e4:	ldr	r3, [r7, #4]
   187e8:	cmp	r3, #0
   187ec:	beq	187dc <__assert_fail@plt+0x72c4>
   187f0:	ldm	r0, {r1, r2}
   187f4:	mov	r5, r0
   187f8:	add	r2, r2, r3, lsl #1
   187fc:	cmp	r1, r2
   18800:	bge	18828 <__assert_fail@plt+0x7310>
   18804:	add	r1, r3, r1
   18808:	ldr	r0, [r0, #8]
   1880c:	lsl	r4, r1, #1
   18810:	lsl	r1, r1, #3
   18814:	bl	20bfc <__assert_fail@plt+0xf6e4>
   18818:	cmp	r0, #0
   1881c:	beq	1892c <__assert_fail@plt+0x7414>
   18820:	str	r0, [r5, #8]
   18824:	str	r4, [r5]
   18828:	ldr	r4, [r5, #4]
   1882c:	ldr	r2, [r7, #4]
   18830:	cmp	r4, #0
   18834:	bne	18854 <__assert_fail@plt+0x733c>
   18838:	str	r2, [r5, #4]
   1883c:	ldr	r2, [r7, #4]
   18840:	ldr	r0, [r5, #8]
   18844:	ldr	r1, [r7, #8]
   18848:	lsl	r2, r2, #2
   1884c:	bl	11248 <memcpy@plt>
   18850:	b	187dc <__assert_fail@plt+0x72c4>
   18854:	add	r6, r4, r2, lsl #1
   18858:	sub	r3, r4, #1
   1885c:	sub	r2, r2, #1
   18860:	cmp	r2, #0
   18864:	cmpge	r3, #0
   18868:	bge	188e0 <__assert_fail@plt+0x73c8>
   1886c:	cmp	r2, #0
   18870:	blt	18890 <__assert_fail@plt+0x7378>
   18874:	add	r2, r2, #1
   18878:	sub	r6, r6, r2
   1887c:	ldr	r0, [r5, #8]
   18880:	lsl	r2, r2, #2
   18884:	ldr	r1, [r7, #8]
   18888:	add	r0, r0, r6, lsl #2
   1888c:	bl	11248 <memcpy@plt>
   18890:	ldr	r2, [r7, #4]
   18894:	ldr	r1, [r5, #4]
   18898:	add	r2, r1, r2, lsl #1
   1889c:	sub	ip, r2, #1
   188a0:	subs	r2, r2, r6
   188a4:	beq	187dc <__assert_fail@plt+0x72c4>
   188a8:	ldr	r0, [r5, #8]
   188ac:	sub	r3, r1, #1
   188b0:	add	r1, r1, r2
   188b4:	str	r1, [r5, #4]
   188b8:	ldr	r4, [r0, ip, lsl #2]
   188bc:	ldr	lr, [r0, r3, lsl #2]
   188c0:	add	r1, r3, r2
   188c4:	cmp	r4, lr
   188c8:	ble	18914 <__assert_fail@plt+0x73fc>
   188cc:	subs	r2, r2, #1
   188d0:	sub	ip, ip, #1
   188d4:	str	r4, [r0, r1, lsl #2]
   188d8:	bne	188b8 <__assert_fail@plt+0x73a0>
   188dc:	b	187dc <__assert_fail@plt+0x72c4>
   188e0:	ldr	r1, [r5, #8]
   188e4:	ldr	r0, [r7, #8]
   188e8:	ldr	ip, [r1, r3, lsl #2]
   188ec:	ldr	r0, [r0, r2, lsl #2]
   188f0:	cmp	ip, r0
   188f4:	subeq	r2, r2, #1
   188f8:	beq	1890c <__assert_fail@plt+0x73f4>
   188fc:	sublt	r6, r6, #1
   18900:	sublt	r2, r2, #1
   18904:	strlt	r0, [r1, r6, lsl #2]
   18908:	blt	18860 <__assert_fail@plt+0x7348>
   1890c:	sub	r3, r3, #1
   18910:	b	18860 <__assert_fail@plt+0x7348>
   18914:	subs	r3, r3, #1
   18918:	str	lr, [r0, r1, lsl #2]
   1891c:	bpl	188b8 <__assert_fail@plt+0x73a0>
   18920:	lsl	r2, r2, #2
   18924:	add	r1, r0, r6, lsl #2
   18928:	b	1884c <__assert_fail@plt+0x7334>
   1892c:	mov	r0, #12
   18930:	pop	{r4, r5, r6, r7, r8, pc}
   18934:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18938:	mov	r7, #12
   1893c:	sub	sp, sp, #44	; 0x2c
   18940:	mul	r7, r7, r2
   18944:	str	r3, [sp, #12]
   18948:	ldr	r3, [r1, #20]
   1894c:	mov	r4, r1
   18950:	add	r3, r3, r7
   18954:	add	r6, sp, #16
   18958:	ldr	r1, [r3, #4]
   1895c:	str	r0, [sp, #8]
   18960:	add	r1, r1, #1
   18964:	mov	r0, r6
   18968:	mov	r5, r2
   1896c:	bl	159b0 <__assert_fail@plt+0x4498>
   18970:	subs	sl, r0, #0
   18974:	bne	18a0c <__assert_fail@plt+0x74f4>
   18978:	ldr	r3, [sp, #20]
   1897c:	lsl	r8, r5, #3
   18980:	add	r2, r3, #1
   18984:	str	r2, [sp, #20]
   18988:	ldr	r2, [sp, #24]
   1898c:	str	r5, [r2, r3, lsl #2]
   18990:	ldr	r3, [r4, #24]
   18994:	mvn	r2, #0
   18998:	add	r3, r3, r7
   1899c:	str	r2, [r3, #4]
   189a0:	ldr	r3, [r4]
   189a4:	add	r2, r3, r8
   189a8:	ldr	r1, [r2, #4]
   189ac:	ldr	r2, [pc, #352]	; 18b14 <__assert_fail@plt+0x75fc>
   189b0:	and	r2, r2, r1
   189b4:	cmp	r2, #0
   189b8:	bne	18a18 <__assert_fail@plt+0x7500>
   189bc:	ldr	r3, [r4]
   189c0:	add	r8, r3, r8
   189c4:	ldrb	r5, [r8, #4]
   189c8:	ands	r5, r5, #8
   189cc:	movne	r5, #0
   189d0:	movne	r9, r5
   189d4:	addne	r8, sp, #28
   189d8:	bne	18aa0 <__assert_fail@plt+0x7588>
   189dc:	ldr	r3, [sp, #12]
   189e0:	eor	r3, r3, #1
   189e4:	tst	r5, r3
   189e8:	ldr	r3, [r4, #24]
   189ec:	ldmeq	r6, {r0, r1, r2}
   189f0:	add	r7, r3, r7
   189f4:	movne	r3, #0
   189f8:	strne	r3, [r7, #4]
   189fc:	stmeq	r7, {r0, r1, r2}
   18a00:	ldm	r6, {r0, r1, r2}
   18a04:	ldr	r3, [sp, #8]
   18a08:	stm	r3, {r0, r1, r2}
   18a0c:	mov	r0, sl
   18a10:	add	sp, sp, #44	; 0x2c
   18a14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18a18:	ldr	r2, [r4, #20]
   18a1c:	add	r2, r2, r7
   18a20:	ldr	r0, [r2, #4]
   18a24:	cmp	r0, #0
   18a28:	beq	189bc <__assert_fail@plt+0x74a4>
   18a2c:	ldr	r2, [r2, #8]
   18a30:	ldr	r2, [r2]
   18a34:	add	r3, r3, r2, lsl #3
   18a38:	ldrb	r3, [r3, #6]
   18a3c:	tst	r3, #4
   18a40:	bne	189bc <__assert_fail@plt+0x74a4>
   18a44:	ldr	r3, [pc, #204]	; 18b18 <__assert_fail@plt+0x7600>
   18a48:	mov	r2, r5
   18a4c:	and	r3, r3, r1, lsr #8
   18a50:	str	r3, [sp]
   18a54:	mov	r1, r5
   18a58:	mov	r3, r5
   18a5c:	mov	r0, r4
   18a60:	bl	18498 <__assert_fail@plt+0x6f80>
   18a64:	cmp	r0, #0
   18a68:	beq	189bc <__assert_fail@plt+0x74a4>
   18a6c:	mov	sl, r0
   18a70:	b	18a0c <__assert_fail@plt+0x74f4>
   18a74:	ldr	r3, [r3, #8]
   18a78:	ldr	r1, [r4, #24]
   18a7c:	ldr	r2, [r3, r9, lsl #2]
   18a80:	mov	r3, #12
   18a84:	mul	fp, r3, r2
   18a88:	add	r1, r1, fp
   18a8c:	ldr	r3, [r1, #4]
   18a90:	cmn	r3, #1
   18a94:	bne	18ab8 <__assert_fail@plt+0x75a0>
   18a98:	mov	r5, #1
   18a9c:	add	r9, r9, #1
   18aa0:	ldr	r3, [r4, #20]
   18aa4:	add	r3, r3, r7
   18aa8:	ldr	r2, [r3, #4]
   18aac:	cmp	r9, r2
   18ab0:	blt	18a74 <__assert_fail@plt+0x755c>
   18ab4:	b	189dc <__assert_fail@plt+0x74c4>
   18ab8:	cmp	r3, #0
   18abc:	bne	18b08 <__assert_fail@plt+0x75f0>
   18ac0:	mov	r1, r4
   18ac4:	mov	r0, r8
   18ac8:	bl	18934 <__assert_fail@plt+0x741c>
   18acc:	cmp	r0, #0
   18ad0:	bne	18a6c <__assert_fail@plt+0x7554>
   18ad4:	mov	r1, r8
   18ad8:	mov	r0, r6
   18adc:	bl	187d0 <__assert_fail@plt+0x72b8>
   18ae0:	cmp	r0, #0
   18ae4:	bne	18a6c <__assert_fail@plt+0x7554>
   18ae8:	ldr	r3, [r4, #24]
   18aec:	add	fp, r3, fp
   18af0:	ldr	r3, [fp, #4]
   18af4:	cmp	r3, #0
   18af8:	bne	18a9c <__assert_fail@plt+0x7584>
   18afc:	ldr	r0, [sp, #36]	; 0x24
   18b00:	bl	130e8 <__assert_fail@plt+0x1bd0>
   18b04:	b	18a98 <__assert_fail@plt+0x7580>
   18b08:	ldm	r1, {r0, r1, r2}
   18b0c:	stm	r8, {r0, r1, r2}
   18b10:	b	18ad4 <__assert_fail@plt+0x75bc>
   18b14:	andeq	pc, r3, r0, lsl #30
   18b18:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   18b1c:	cmp	r1, #0
   18b20:	push	{r4, r5, r6, lr}
   18b24:	mov	r4, r0
   18b28:	bge	18b34 <__assert_fail@plt+0x761c>
   18b2c:	ldr	r0, [r4, #60]	; 0x3c
   18b30:	pop	{r4, r5, r6, pc}
   18b34:	ldr	r3, [r0, #48]	; 0x30
   18b38:	cmp	r1, r3
   18b3c:	bne	18b50 <__assert_fail@plt+0x7638>
   18b40:	tst	r2, #2
   18b44:	movne	r0, #8
   18b48:	moveq	r0, #10
   18b4c:	pop	{r4, r5, r6, pc}
   18b50:	ldr	r3, [r0, #80]	; 0x50
   18b54:	cmp	r3, #1
   18b58:	ldrgt	r3, [r0, #8]
   18b5c:	bgt	18b90 <__assert_fail@plt+0x7678>
   18b60:	ldr	r3, [r0, #4]
   18b64:	ldr	r0, [r0, #68]	; 0x44
   18b68:	ldrb	r5, [r3, r1]
   18b6c:	mov	r1, r5
   18b70:	bl	14dfc <__assert_fail@plt+0x38e4>
   18b74:	cmp	r0, #0
   18b78:	bne	18bf4 <__assert_fail@plt+0x76dc>
   18b7c:	cmp	r5, #10
   18b80:	popne	{r4, r5, r6, pc}
   18b84:	b	18bd8 <__assert_fail@plt+0x76c0>
   18b88:	subs	r1, r1, #1
   18b8c:	bcc	18b2c <__assert_fail@plt+0x7614>
   18b90:	ldr	r5, [r3, r1, lsl #2]
   18b94:	cmn	r5, #1
   18b98:	beq	18b88 <__assert_fail@plt+0x7670>
   18b9c:	ldrb	r3, [r4, #78]	; 0x4e
   18ba0:	cmp	r3, #0
   18ba4:	beq	18bd0 <__assert_fail@plt+0x76b8>
   18ba8:	mov	r0, r5
   18bac:	bl	11404 <iswalnum@plt>
   18bb0:	sub	r3, r5, #95	; 0x5f
   18bb4:	clz	r3, r3
   18bb8:	lsr	r3, r3, #5
   18bbc:	cmp	r0, #0
   18bc0:	moveq	r0, r3
   18bc4:	orrne	r0, r3, #1
   18bc8:	cmp	r0, #0
   18bcc:	bne	18bf4 <__assert_fail@plt+0x76dc>
   18bd0:	cmp	r5, #10
   18bd4:	bne	18bec <__assert_fail@plt+0x76d4>
   18bd8:	ldrb	r0, [r4, #77]	; 0x4d
   18bdc:	cmp	r0, #0
   18be0:	movne	r0, #2
   18be4:	moveq	r0, #0
   18be8:	pop	{r4, r5, r6, pc}
   18bec:	mov	r0, #0
   18bf0:	pop	{r4, r5, r6, pc}
   18bf4:	mov	r0, #1
   18bf8:	pop	{r4, r5, r6, pc}
   18bfc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18c00:	mov	r4, r0
   18c04:	ldr	r5, [r0, #24]
   18c08:	sub	sp, sp, #28
   18c0c:	cmp	r5, r1
   18c10:	mov	r6, r1
   18c14:	mov	sl, r2
   18c18:	suble	r5, r1, r5
   18c1c:	ble	18c7c <__assert_fail@plt+0x7764>
   18c20:	ldr	r3, [r0, #80]	; 0x50
   18c24:	mov	r5, r1
   18c28:	cmp	r3, #1
   18c2c:	ldr	r3, [r0, #44]	; 0x2c
   18c30:	movgt	r2, #0
   18c34:	str	r3, [r0, #48]	; 0x30
   18c38:	ldr	r3, [r0, #52]	; 0x34
   18c3c:	strgt	r2, [r0, #16]
   18c40:	strgt	r2, [r0, #20]
   18c44:	str	r3, [r0, #56]	; 0x38
   18c48:	tst	sl, #1
   18c4c:	mov	r3, #0
   18c50:	str	r3, [r0, #28]
   18c54:	str	r3, [r0, #24]
   18c58:	str	r3, [r0, #32]
   18c5c:	strb	r3, [r0, #76]	; 0x4c
   18c60:	moveq	r3, #6
   18c64:	movne	r3, #4
   18c68:	str	r3, [r0, #60]	; 0x3c
   18c6c:	ldrb	r3, [r0, #75]	; 0x4b
   18c70:	cmp	r3, #0
   18c74:	ldreq	r3, [r0]
   18c78:	streq	r3, [r0, #4]
   18c7c:	cmp	r5, #0
   18c80:	beq	18d7c <__assert_fail@plt+0x7864>
   18c84:	ldr	r3, [r4, #32]
   18c88:	ldr	r8, [r4, #28]
   18c8c:	cmp	r5, r3
   18c90:	ldrb	r3, [r4, #76]	; 0x4c
   18c94:	bge	18f24 <__assert_fail@plt+0x7a0c>
   18c98:	cmp	r3, #0
   18c9c:	beq	18eb4 <__assert_fail@plt+0x799c>
   18ca0:	ldr	r9, [r4, #12]
   18ca4:	mov	r3, r8
   18ca8:	mov	r2, #0
   18cac:	add	r7, r2, r3
   18cb0:	add	r7, r7, r7, lsr #31
   18cb4:	asr	r7, r7, #1
   18cb8:	ldr	r1, [r9, r7, lsl #2]
   18cbc:	cmp	r5, r1
   18cc0:	blt	18dc8 <__assert_fail@plt+0x78b0>
   18cc4:	ble	18cdc <__assert_fail@plt+0x77c4>
   18cc8:	add	r2, r7, #1
   18ccc:	cmp	r2, r3
   18cd0:	blt	18cac <__assert_fail@plt+0x7794>
   18cd4:	cmp	r5, r1
   18cd8:	addgt	r7, r7, #1
   18cdc:	mov	r2, sl
   18ce0:	sub	r1, r7, #1
   18ce4:	mov	r0, r4
   18ce8:	bl	18b1c <__assert_fail@plt+0x7604>
   18cec:	cmp	r5, r8
   18cf0:	movge	r3, #0
   18cf4:	movlt	r3, #1
   18cf8:	cmp	r5, r7
   18cfc:	movne	r3, #0
   18d00:	cmp	r3, #0
   18d04:	str	r0, [r4, #60]	; 0x3c
   18d08:	beq	18dec <__assert_fail@plt+0x78d4>
   18d0c:	ldr	r3, [r9, r7, lsl #2]
   18d10:	cmp	r5, r3
   18d14:	bne	18dec <__assert_fail@plt+0x78d4>
   18d18:	ldr	r0, [r4, #8]
   18d1c:	sub	r2, r8, r5
   18d20:	add	r1, r0, r5, lsl #2
   18d24:	lsl	r2, r2, #2
   18d28:	bl	11218 <memmove@plt>
   18d2c:	ldr	r0, [r4, #4]
   18d30:	ldr	r2, [r4, #28]
   18d34:	add	r1, r0, r5
   18d38:	sub	r2, r2, r5
   18d3c:	bl	11218 <memmove@plt>
   18d40:	ldr	r3, [r4, #28]
   18d44:	sub	r3, r3, r5
   18d48:	str	r3, [r4, #28]
   18d4c:	ldr	r3, [r4, #32]
   18d50:	sub	r3, r3, r5
   18d54:	str	r3, [r4, #32]
   18d58:	mov	r3, #0
   18d5c:	ldr	r2, [r4, #28]
   18d60:	cmp	r3, r2
   18d64:	blt	18dd0 <__assert_fail@plt+0x78b8>
   18d68:	ldrb	r3, [r4, #75]	; 0x4b
   18d6c:	cmp	r3, #0
   18d70:	ldreq	r3, [r4, #4]
   18d74:	addeq	r3, r3, r5
   18d78:	streq	r3, [r4, #4]
   18d7c:	ldr	r2, [r4, #56]	; 0x38
   18d80:	ldr	r3, [r4, #48]	; 0x30
   18d84:	str	r6, [r4, #24]
   18d88:	sub	r3, r3, r5
   18d8c:	sub	r5, r2, r5
   18d90:	ldr	r2, [r4, #80]	; 0x50
   18d94:	str	r3, [r4, #48]	; 0x30
   18d98:	cmp	r2, #1
   18d9c:	str	r5, [r4, #56]	; 0x38
   18da0:	ble	191fc <__assert_fail@plt+0x7ce4>
   18da4:	ldrb	r3, [r4, #72]	; 0x48
   18da8:	mov	r0, r4
   18dac:	cmp	r3, #0
   18db0:	beq	191ec <__assert_fail@plt+0x7cd4>
   18db4:	bl	15c20 <__assert_fail@plt+0x4708>
   18db8:	cmp	r0, #0
   18dbc:	beq	191f0 <__assert_fail@plt+0x7cd8>
   18dc0:	add	sp, sp, #28
   18dc4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18dc8:	mov	r3, r7
   18dcc:	b	18ccc <__assert_fail@plt+0x77b4>
   18dd0:	ldr	r1, [r4, #12]
   18dd4:	add	r2, r5, r3
   18dd8:	ldr	r2, [r1, r2, lsl #2]
   18ddc:	sub	r2, r2, r5
   18de0:	str	r2, [r1, r3, lsl #2]
   18de4:	add	r3, r3, #1
   18de8:	b	18d5c <__assert_fail@plt+0x7844>
   18dec:	ldr	r3, [r4, #44]	; 0x2c
   18df0:	sub	r3, r3, r6
   18df4:	add	r3, r3, r5
   18df8:	str	r3, [r4, #48]	; 0x30
   18dfc:	ldr	r3, [r4, #52]	; 0x34
   18e00:	sub	r3, r3, r6
   18e04:	add	r3, r3, r5
   18e08:	str	r3, [r4, #56]	; 0x38
   18e0c:	mov	r3, #0
   18e10:	strb	r3, [r4, #76]	; 0x4c
   18e14:	add	r3, r9, r7, lsl #2
   18e18:	cmp	r7, #0
   18e1c:	ble	18e2c <__assert_fail@plt+0x7914>
   18e20:	ldr	r2, [r3, #-4]!
   18e24:	cmp	r5, r2
   18e28:	beq	18e68 <__assert_fail@plt+0x7950>
   18e2c:	lsl	r3, r7, #2
   18e30:	cmp	r7, r8
   18e34:	blt	18e70 <__assert_fail@plt+0x7958>
   18e38:	moveq	r3, #0
   18e3c:	streq	r3, [r4, #28]
   18e40:	beq	18e60 <__assert_fail@plt+0x7948>
   18e44:	ldr	r3, [r9, r7, lsl #2]
   18e48:	sub	r3, r3, r5
   18e4c:	cmp	r3, #0
   18e50:	str	r3, [r4, #28]
   18e54:	mvnne	r1, #0
   18e58:	movne	r3, #0
   18e5c:	bne	18e98 <__assert_fail@plt+0x7980>
   18e60:	ldr	r3, [r4, #28]
   18e64:	b	18f1c <__assert_fail@plt+0x7a04>
   18e68:	sub	r7, r7, #1
   18e6c:	b	18e18 <__assert_fail@plt+0x7900>
   18e70:	ldr	r2, [r4, #8]
   18e74:	ldr	r2, [r2, r3]
   18e78:	add	r3, r3, #4
   18e7c:	cmn	r2, #1
   18e80:	bne	18e44 <__assert_fail@plt+0x792c>
   18e84:	add	r7, r7, #1
   18e88:	b	18e30 <__assert_fail@plt+0x7918>
   18e8c:	ldr	r2, [r4, #8]
   18e90:	str	r1, [r2, r3, lsl #2]
   18e94:	add	r3, r3, #1
   18e98:	ldr	r2, [r4, #28]
   18e9c:	cmp	r3, r2
   18ea0:	blt	18e8c <__assert_fail@plt+0x7974>
   18ea4:	mov	r1, #255	; 0xff
   18ea8:	ldr	r0, [r4, #4]
   18eac:	bl	1141c <memset@plt>
   18eb0:	b	18e60 <__assert_fail@plt+0x7948>
   18eb4:	mov	r2, sl
   18eb8:	sub	r1, r5, #1
   18ebc:	mov	r0, r4
   18ec0:	bl	18b1c <__assert_fail@plt+0x7604>
   18ec4:	ldr	r3, [r4, #80]	; 0x50
   18ec8:	cmp	r3, #1
   18ecc:	str	r0, [r4, #60]	; 0x3c
   18ed0:	ble	18ee8 <__assert_fail@plt+0x79d0>
   18ed4:	ldr	r0, [r4, #8]
   18ed8:	sub	r2, r8, r5
   18edc:	add	r1, r0, r5, lsl #2
   18ee0:	lsl	r2, r2, #2
   18ee4:	bl	11218 <memmove@plt>
   18ee8:	ldrb	r3, [r4, #75]	; 0x4b
   18eec:	cmp	r3, #0
   18ef0:	beq	18f08 <__assert_fail@plt+0x79f0>
   18ef4:	ldr	r0, [r4, #4]
   18ef8:	ldr	r2, [r4, #28]
   18efc:	add	r1, r0, r5
   18f00:	sub	r2, r2, r5
   18f04:	bl	11218 <memmove@plt>
   18f08:	ldr	r3, [r4, #28]
   18f0c:	sub	r3, r3, r5
   18f10:	str	r3, [r4, #28]
   18f14:	ldr	r3, [r4, #32]
   18f18:	sub	r3, r3, r5
   18f1c:	str	r3, [r4, #32]
   18f20:	b	18d68 <__assert_fail@plt+0x7850>
   18f24:	cmp	r3, #0
   18f28:	beq	18f54 <__assert_fail@plt+0x7a3c>
   18f2c:	ldr	r3, [r4, #44]	; 0x2c
   18f30:	sub	r3, r3, r6
   18f34:	add	r3, r3, r5
   18f38:	str	r3, [r4, #48]	; 0x30
   18f3c:	ldr	r3, [r4, #52]	; 0x34
   18f40:	sub	r3, r3, r6
   18f44:	add	r3, r3, r5
   18f48:	str	r3, [r4, #56]	; 0x38
   18f4c:	mov	r3, #0
   18f50:	strb	r3, [r4, #76]	; 0x4c
   18f54:	ldr	r3, [r4, #80]	; 0x50
   18f58:	mov	r2, #0
   18f5c:	cmp	r3, #1
   18f60:	str	r2, [r4, #28]
   18f64:	ldr	r7, [r4, #24]
   18f68:	ble	19194 <__assert_fail@plt+0x7c7c>
   18f6c:	ldrb	r2, [r4, #73]	; 0x49
   18f70:	cmp	r2, #0
   18f74:	beq	19040 <__assert_fail@plt+0x7b28>
   18f78:	ldr	r2, [r4]
   18f7c:	sub	r3, r5, r3
   18f80:	add	r7, r2, r7
   18f84:	add	r3, r7, r3
   18f88:	cmp	r2, r3
   18f8c:	sub	r9, r5, #1
   18f90:	movcs	r3, r2
   18f94:	add	r9, r7, r9
   18f98:	cmp	r9, r3
   18f9c:	mov	r1, r9
   18fa0:	bcc	19040 <__assert_fail@plt+0x7b28>
   18fa4:	ldrb	r2, [r9]
   18fa8:	sub	r0, r9, #1
   18fac:	and	r2, r2, #192	; 0xc0
   18fb0:	cmp	r2, #128	; 0x80
   18fb4:	beq	190bc <__assert_fail@plt+0x7ba4>
   18fb8:	ldr	r2, [r4, #48]	; 0x30
   18fbc:	ldr	r0, [r4, #64]	; 0x40
   18fc0:	add	r2, r7, r2
   18fc4:	cmp	r0, #0
   18fc8:	sub	r2, r2, r9
   18fcc:	beq	18fe8 <__assert_fail@plt+0x7ad0>
   18fd0:	cmp	r2, #6
   18fd4:	movlt	r3, r2
   18fd8:	movge	r3, #6
   18fdc:	add	r1, sp, #8
   18fe0:	subs	r3, r3, #1
   18fe4:	bpl	190ac <__assert_fail@plt+0x7b94>
   18fe8:	add	r3, sp, #16
   18fec:	mov	fp, #0
   18ff0:	add	r0, sp, #4
   18ff4:	str	fp, [sp, #16]
   18ff8:	str	fp, [sp, #20]
   18ffc:	bl	13358 <__assert_fail@plt+0x1e40>
   19000:	add	r7, r7, r5
   19004:	sub	r9, r7, r9
   19008:	cmp	r0, r9
   1900c:	movcc	r3, #0
   19010:	movcs	r3, #1
   19014:	cmn	r0, #3
   19018:	movhi	r3, #0
   1901c:	cmp	r3, fp
   19020:	beq	19040 <__assert_fail@plt+0x7b28>
   19024:	str	fp, [r4, #16]
   19028:	str	fp, [r4, #20]
   1902c:	ldr	fp, [sp, #4]
   19030:	sub	r0, r0, r9
   19034:	cmn	fp, #1
   19038:	str	r0, [r4, #28]
   1903c:	bne	19130 <__assert_fail@plt+0x7c18>
   19040:	ldr	r7, [r4, #24]
   19044:	ldr	r3, [r4, #32]
   19048:	mvn	fp, #0
   1904c:	add	r7, r7, r3
   19050:	cmp	r6, r7
   19054:	bgt	190c4 <__assert_fail@plt+0x7bac>
   19058:	sub	r7, r7, r6
   1905c:	cmn	fp, #1
   19060:	str	r7, [r4, #28]
   19064:	bne	19130 <__assert_fail@plt+0x7c18>
   19068:	mov	r2, sl
   1906c:	sub	r1, r8, #1
   19070:	mov	r0, r4
   19074:	bl	18b1c <__assert_fail@plt+0x7604>
   19078:	str	r0, [r4, #60]	; 0x3c
   1907c:	ldr	r3, [r4, #28]
   19080:	cmp	r3, #0
   19084:	movne	r3, #0
   19088:	mvnne	r1, #0
   1908c:	beq	18e60 <__assert_fail@plt+0x7948>
   19090:	ldr	r2, [r4, #28]
   19094:	cmp	r3, r2
   19098:	blt	19184 <__assert_fail@plt+0x7c6c>
   1909c:	ldrb	r3, [r4, #75]	; 0x4b
   190a0:	cmp	r3, #0
   190a4:	beq	18e60 <__assert_fail@plt+0x7948>
   190a8:	b	18ea4 <__assert_fail@plt+0x798c>
   190ac:	ldrb	ip, [r9, r3]
   190b0:	ldrb	ip, [r0, ip]
   190b4:	strb	ip, [r1, r3]
   190b8:	b	18fe0 <__assert_fail@plt+0x7ac8>
   190bc:	mov	r9, r0
   190c0:	b	18f98 <__assert_fail@plt+0x7a80>
   190c4:	add	r9, r4, #16
   190c8:	add	r3, sp, #16
   190cc:	ldm	r9, {r0, r1}
   190d0:	ldr	fp, [r4, #44]	; 0x2c
   190d4:	stm	r3, {r0, r1}
   190d8:	ldr	r1, [r4]
   190dc:	sub	fp, fp, r7
   190e0:	mov	r3, r9
   190e4:	mov	r2, fp
   190e8:	add	r1, r1, r7
   190ec:	add	r0, sp, #8
   190f0:	bl	13358 <__assert_fail@plt+0x1e40>
   190f4:	sub	r3, r0, #1
   190f8:	cmn	r3, #4
   190fc:	ldrls	fp, [sp, #8]
   19100:	bls	19128 <__assert_fail@plt+0x7c10>
   19104:	cmp	fp, #0
   19108:	cmpne	r0, #0
   1910c:	moveq	fp, #0
   19110:	ldrne	r3, [r4]
   19114:	ldrbne	fp, [r3, r7]
   19118:	add	r3, sp, #16
   1911c:	ldm	r3, {r0, r1}
   19120:	stm	r9, {r0, r1}
   19124:	mov	r0, #1
   19128:	add	r7, r7, r0
   1912c:	b	19050 <__assert_fail@plt+0x7b38>
   19130:	ldrb	r3, [r4, #78]	; 0x4e
   19134:	cmp	r3, #0
   19138:	beq	19160 <__assert_fail@plt+0x7c48>
   1913c:	mov	r0, fp
   19140:	bl	11404 <iswalnum@plt>
   19144:	cmp	fp, #95	; 0x5f
   19148:	clz	r0, r0
   1914c:	lsr	r0, r0, #5
   19150:	moveq	r0, #0
   19154:	cmp	r0, #0
   19158:	moveq	r3, #1
   1915c:	beq	1917c <__assert_fail@plt+0x7c64>
   19160:	cmp	fp, #10
   19164:	movne	r3, #0
   19168:	bne	1917c <__assert_fail@plt+0x7c64>
   1916c:	ldrb	r3, [r4, #77]	; 0x4d
   19170:	cmp	r3, #0
   19174:	movne	r3, #2
   19178:	moveq	r3, #0
   1917c:	str	r3, [r4, #60]	; 0x3c
   19180:	b	1907c <__assert_fail@plt+0x7b64>
   19184:	ldr	r2, [r4, #8]
   19188:	str	r1, [r2, r3, lsl #2]
   1918c:	add	r3, r3, #1
   19190:	b	19090 <__assert_fail@plt+0x7b78>
   19194:	ldr	r3, [r4]
   19198:	ldr	r0, [r4, #68]	; 0x44
   1919c:	add	r3, r3, r5
   191a0:	add	r7, r3, r7
   191a4:	ldr	r3, [r4, #64]	; 0x40
   191a8:	ldrb	r7, [r7, #-1]
   191ac:	cmp	r3, #0
   191b0:	str	r2, [r4, #32]
   191b4:	ldrbne	r7, [r3, r7]
   191b8:	mov	r1, r7
   191bc:	bl	14dfc <__assert_fail@plt+0x38e4>
   191c0:	cmp	r0, #0
   191c4:	movne	r0, #1
   191c8:	bne	191e4 <__assert_fail@plt+0x7ccc>
   191cc:	cmp	r7, #10
   191d0:	bne	191e4 <__assert_fail@plt+0x7ccc>
   191d4:	ldrb	r0, [r4, #77]	; 0x4d
   191d8:	cmp	r0, #0
   191dc:	movne	r0, #2
   191e0:	moveq	r0, #0
   191e4:	str	r0, [r4, #60]	; 0x3c
   191e8:	b	18d68 <__assert_fail@plt+0x7850>
   191ec:	bl	15acc <__assert_fail@plt+0x45b4>
   191f0:	mov	r0, #0
   191f4:	str	r0, [r4, #40]	; 0x28
   191f8:	b	18dc0 <__assert_fail@plt+0x78a8>
   191fc:	ldrb	r2, [r4, #75]	; 0x4b
   19200:	cmp	r2, #0
   19204:	streq	r3, [r4, #28]
   19208:	beq	191f0 <__assert_fail@plt+0x7cd8>
   1920c:	ldrb	r3, [r4, #72]	; 0x48
   19210:	cmp	r3, #0
   19214:	beq	19224 <__assert_fail@plt+0x7d0c>
   19218:	mov	r0, r4
   1921c:	bl	160f0 <__assert_fail@plt+0x4bd8>
   19220:	b	191f0 <__assert_fail@plt+0x7cd8>
   19224:	ldr	r3, [r4, #64]	; 0x40
   19228:	cmp	r3, #0
   1922c:	beq	191f0 <__assert_fail@plt+0x7cd8>
   19230:	mov	r0, r4
   19234:	bl	14f10 <__assert_fail@plt+0x39f8>
   19238:	b	191f0 <__assert_fail@plt+0x7cd8>
   1923c:	ldr	r3, [r0, #4]
   19240:	push	{r4, r5, r6, lr}
   19244:	mov	r5, r1
   19248:	ldrb	r1, [r3, r2]
   1924c:	ldrb	r3, [r5, #4]
   19250:	mov	r4, r0
   19254:	mov	r6, r2
   19258:	sub	r3, r3, #1
   1925c:	cmp	r3, #6
   19260:	ldrls	pc, [pc, r3, lsl #2]
   19264:	b	19350 <__assert_fail@plt+0x7e38>
   19268:	andeq	r9, r1, r4, lsl #5
   1926c:	andeq	r9, r1, r0, asr r3
   19270:	andeq	r9, r1, r0, lsl #6
   19274:	andeq	r9, r1, r0, asr r3
   19278:	andeq	r9, r1, ip, lsl r3
   1927c:	andeq	r9, r1, r0, asr r3
   19280:	andeq	r9, r1, r4, lsl r3
   19284:	ldrb	r3, [r5]
   19288:	cmp	r3, r1
   1928c:	bne	19350 <__assert_fail@plt+0x7e38>
   19290:	ldr	r5, [r5, #4]
   19294:	ldr	r2, [pc, #196]	; 19360 <__assert_fail@plt+0x7e48>
   19298:	and	r2, r2, r5
   1929c:	cmp	r2, #0
   192a0:	beq	19358 <__assert_fail@plt+0x7e40>
   192a4:	ldr	r2, [r4, #88]	; 0x58
   192a8:	mov	r1, r6
   192ac:	mov	r0, r4
   192b0:	bl	18b1c <__assert_fail@plt+0x7604>
   192b4:	ldr	r3, [pc, #168]	; 19364 <__assert_fail@plt+0x7e4c>
   192b8:	and	r3, r3, r5, lsr #8
   192bc:	tst	r3, #4
   192c0:	beq	192cc <__assert_fail@plt+0x7db4>
   192c4:	ands	r1, r0, #1
   192c8:	beq	19350 <__assert_fail@plt+0x7e38>
   192cc:	tst	r3, #8
   192d0:	beq	192dc <__assert_fail@plt+0x7dc4>
   192d4:	tst	r0, #1
   192d8:	bne	19350 <__assert_fail@plt+0x7e38>
   192dc:	tst	r3, #32
   192e0:	beq	192ec <__assert_fail@plt+0x7dd4>
   192e4:	ands	r1, r0, #2
   192e8:	beq	19350 <__assert_fail@plt+0x7e38>
   192ec:	tst	r3, #128	; 0x80
   192f0:	beq	19358 <__assert_fail@plt+0x7e40>
   192f4:	lsr	r0, r0, #3
   192f8:	and	r0, r0, #1
   192fc:	pop	{r4, r5, r6, pc}
   19300:	ldr	r0, [r5]
   19304:	bl	14dfc <__assert_fail@plt+0x38e4>
   19308:	cmp	r0, #0
   1930c:	bne	19290 <__assert_fail@plt+0x7d78>
   19310:	pop	{r4, r5, r6, pc}
   19314:	tst	r1, #128	; 0x80
   19318:	bne	19350 <__assert_fail@plt+0x7e38>
   1931c:	cmp	r1, #10
   19320:	bne	19338 <__assert_fail@plt+0x7e20>
   19324:	ldr	r3, [r4, #84]	; 0x54
   19328:	ldr	r0, [r3, #128]	; 0x80
   1932c:	ands	r0, r0, #64	; 0x40
   19330:	bne	19290 <__assert_fail@plt+0x7d78>
   19334:	pop	{r4, r5, r6, pc}
   19338:	cmp	r1, #0
   1933c:	bne	19290 <__assert_fail@plt+0x7d78>
   19340:	ldr	r3, [r4, #84]	; 0x54
   19344:	ldr	r3, [r3, #128]	; 0x80
   19348:	tst	r3, #128	; 0x80
   1934c:	beq	19290 <__assert_fail@plt+0x7d78>
   19350:	mov	r0, #0
   19354:	pop	{r4, r5, r6, pc}
   19358:	mov	r0, #1
   1935c:	pop	{r4, r5, r6, pc}
   19360:	andeq	pc, r3, r0, lsl #30
   19364:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   19368:	push	{r4, r5, r6, r7, r8, lr}
   1936c:	mov	r5, r1
   19370:	mov	r1, r2
   19374:	ldr	r2, [r0, #88]	; 0x58
   19378:	mov	r4, r0
   1937c:	bl	18b1c <__assert_fail@plt+0x7604>
   19380:	ldr	r6, [pc, #152]	; 19420 <__assert_fail@plt+0x7f08>
   19384:	ldr	lr, [r5, #8]
   19388:	mov	ip, #0
   1938c:	and	r7, r0, #8
   19390:	and	r8, r0, #2
   19394:	and	r1, r0, #1
   19398:	cmp	ip, lr
   1939c:	blt	193a8 <__assert_fail@plt+0x7e90>
   193a0:	mov	r0, #0
   193a4:	pop	{r4, r5, r6, r7, r8, pc}
   193a8:	ldr	r3, [r5, #12]
   193ac:	ldr	r0, [r3, ip, lsl #2]
   193b0:	ldr	r3, [r4, #84]	; 0x54
   193b4:	ldr	r2, [r3]
   193b8:	add	r2, r2, r0, lsl #3
   193bc:	ldr	r3, [r2, #4]
   193c0:	ldrb	r2, [r2, #4]
   193c4:	and	r3, r6, r3, lsr #8
   193c8:	cmp	r2, #2
   193cc:	bne	19418 <__assert_fail@plt+0x7f00>
   193d0:	cmp	r3, #0
   193d4:	popeq	{r4, r5, r6, r7, r8, pc}
   193d8:	tst	r3, #4
   193dc:	beq	193e8 <__assert_fail@plt+0x7ed0>
   193e0:	cmp	r1, #0
   193e4:	beq	19418 <__assert_fail@plt+0x7f00>
   193e8:	tst	r3, #8
   193ec:	beq	193f8 <__assert_fail@plt+0x7ee0>
   193f0:	cmp	r1, #0
   193f4:	bne	19418 <__assert_fail@plt+0x7f00>
   193f8:	tst	r3, #32
   193fc:	beq	19408 <__assert_fail@plt+0x7ef0>
   19400:	cmp	r8, #0
   19404:	beq	19418 <__assert_fail@plt+0x7f00>
   19408:	tst	r3, #128	; 0x80
   1940c:	popeq	{r4, r5, r6, r7, r8, pc}
   19410:	cmp	r7, #0
   19414:	popne	{r4, r5, r6, r7, r8, pc}
   19418:	add	ip, ip, #1
   1941c:	b	19398 <__assert_fail@plt+0x7e80>
   19420:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   19424:	push	{r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   19428:	ldr	r3, [r1, #56]	; 0x38
   1942c:	ldr	r6, [r1, #40]	; 0x28
   19430:	cmp	r3, r6
   19434:	movle	r3, #2
   19438:	strble	r3, [r0, #4]
   1943c:	movle	r0, #0
   19440:	ble	194a4 <__assert_fail@plt+0x7f8c>
   19444:	ldr	r9, [r1, #4]
   19448:	ldrb	r3, [r0, #6]
   1944c:	mov	r5, r2
   19450:	ldrb	r8, [r9, r6]
   19454:	and	r3, r3, #159	; 0x9f
   19458:	strb	r3, [r0, #6]
   1945c:	strb	r8, [r0]
   19460:	ldr	r2, [r1, #80]	; 0x50
   19464:	mov	r7, r1
   19468:	cmp	r2, #1
   1946c:	mov	r4, r0
   19470:	ble	19a04 <__assert_fail@plt+0x84ec>
   19474:	ldr	r3, [r1, #28]
   19478:	cmp	r6, r3
   1947c:	beq	199d4 <__assert_fail@plt+0x84bc>
   19480:	ldr	r3, [r1, #8]
   19484:	ldr	r3, [r3, r6, lsl #2]
   19488:	cmn	r3, #1
   1948c:	bne	199d4 <__assert_fail@plt+0x84bc>
   19490:	ldrb	r3, [r4, #6]
   19494:	mov	r0, #1
   19498:	strb	r0, [r4, #4]
   1949c:	orr	r3, r3, #32
   194a0:	strb	r3, [r4, #6]
   194a4:	add	sp, sp, #8
   194a8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   194ac:	cmp	r2, #1
   194b0:	ble	194e8 <__assert_fail@plt+0x7fd0>
   194b4:	ldr	r3, [r7, #8]
   194b8:	lsl	r0, r1, #2
   194bc:	ldr	ip, [r3, r1, lsl #2]
   194c0:	cmn	ip, #1
   194c4:	beq	199fc <__assert_fail@plt+0x84e4>
   194c8:	ldr	ip, [r7, #28]
   194cc:	add	r6, r6, #2
   194d0:	cmp	ip, r6
   194d4:	beq	194e8 <__assert_fail@plt+0x7fd0>
   194d8:	add	r3, r3, r0
   194dc:	ldr	r3, [r3, #4]
   194e0:	cmn	r3, #1
   194e4:	beq	199fc <__assert_fail@plt+0x84e4>
   194e8:	ldrb	r0, [r7, #76]	; 0x4c
   194ec:	ldr	lr, [r7, #24]
   194f0:	cmp	r0, #0
   194f4:	moveq	ip, r1
   194f8:	ldrne	r3, [r7, #12]
   194fc:	ldrne	ip, [r3, r1, lsl #2]
   19500:	ldr	r3, [r7]
   19504:	cmp	r0, #0
   19508:	add	r3, r3, ip
   1950c:	ldrb	r6, [r3, lr]
   19510:	beq	1951c <__assert_fail@plt+0x8004>
   19514:	tst	r6, #128	; 0x80
   19518:	bne	199fc <__assert_fail@plt+0x84e4>
   1951c:	mov	r3, #1
   19520:	cmp	r2, r3
   19524:	strb	r6, [r4]
   19528:	strb	r3, [r4, #4]
   1952c:	ldrb	r8, [r4, #6]
   19530:	ble	19598 <__assert_fail@plt+0x8080>
   19534:	mov	r0, r7
   19538:	bl	14ef4 <__assert_fail@plt+0x39dc>
   1953c:	bic	r8, r8, #64	; 0x40
   19540:	mov	r7, r0
   19544:	bl	11404 <iswalnum@plt>
   19548:	adds	r0, r0, #0
   1954c:	movne	r0, #1
   19550:	cmp	r7, #95	; 0x5f
   19554:	orreq	r0, r0, #1
   19558:	orr	r8, r8, r0, lsl #6
   1955c:	strb	r8, [r4, #6]
   19560:	cmp	r6, #66	; 0x42
   19564:	beq	1970c <__assert_fail@plt+0x81f4>
   19568:	bhi	19628 <__assert_fail@plt+0x8110>
   1956c:	cmp	r6, #57	; 0x39
   19570:	bhi	195f4 <__assert_fail@plt+0x80dc>
   19574:	cmp	r6, #49	; 0x31
   19578:	bcs	196dc <__assert_fail@plt+0x81c4>
   1957c:	cmp	r6, #40	; 0x28
   19580:	beq	19774 <__assert_fail@plt+0x825c>
   19584:	bhi	195c8 <__assert_fail@plt+0x80b0>
   19588:	cmp	r6, #39	; 0x27
   1958c:	beq	1975c <__assert_fail@plt+0x8244>
   19590:	mov	r0, #2
   19594:	b	194a4 <__assert_fail@plt+0x7f8c>
   19598:	bl	113b0 <__ctype_b_loc@plt>
   1959c:	lsl	r3, r6, #1
   195a0:	bic	r8, r8, #64	; 0x40
   195a4:	ldr	r2, [r0]
   195a8:	ldrh	r3, [r2, r3]
   195ac:	lsr	r3, r3, #3
   195b0:	and	r3, r3, #1
   195b4:	cmp	r6, #95	; 0x5f
   195b8:	orreq	r3, r3, #1
   195bc:	orr	r3, r8, r3, lsl #6
   195c0:	strb	r3, [r4, #6]
   195c4:	b	19560 <__assert_fail@plt+0x8048>
   195c8:	cmp	r6, #41	; 0x29
   195cc:	beq	19784 <__assert_fail@plt+0x826c>
   195d0:	cmp	r6, #43	; 0x2b
   195d4:	bne	19590 <__assert_fail@plt+0x8078>
   195d8:	ldr	r0, [pc, #1128]	; 19a48 <__assert_fail@plt+0x8530>
   195dc:	and	r0, r0, r5
   195e0:	cmp	r0, #2
   195e4:	moveq	r3, #18
   195e8:	bne	19590 <__assert_fail@plt+0x8078>
   195ec:	strb	r3, [r4, #4]
   195f0:	b	194a4 <__assert_fail@plt+0x7f8c>
   195f4:	cmp	r6, #62	; 0x3e
   195f8:	beq	196f4 <__assert_fail@plt+0x81dc>
   195fc:	cmp	r6, #63	; 0x3f
   19600:	beq	19794 <__assert_fail@plt+0x827c>
   19604:	cmp	r6, #60	; 0x3c
   19608:	bne	19590 <__assert_fail@plt+0x8078>
   1960c:	tst	r5, #524288	; 0x80000
   19610:	moveq	r3, #12
   19614:	strbeq	r3, [r4, #4]
   19618:	moveq	r3, #6
   1961c:	bne	19590 <__assert_fail@plt+0x8078>
   19620:	str	r3, [r4]
   19624:	b	19590 <__assert_fail@plt+0x8078>
   19628:	cmp	r6, #115	; 0x73
   1962c:	beq	19734 <__assert_fail@plt+0x821c>
   19630:	bhi	19680 <__assert_fail@plt+0x8168>
   19634:	cmp	r6, #87	; 0x57
   19638:	beq	19724 <__assert_fail@plt+0x820c>
   1963c:	bhi	19658 <__assert_fail@plt+0x8140>
   19640:	cmp	r6, #83	; 0x53
   19644:	bne	19590 <__assert_fail@plt+0x8078>
   19648:	tst	r5, #524288	; 0x80000
   1964c:	moveq	r3, #35	; 0x23
   19650:	beq	196d4 <__assert_fail@plt+0x81bc>
   19654:	b	19590 <__assert_fail@plt+0x8078>
   19658:	cmp	r6, #96	; 0x60
   1965c:	beq	19744 <__assert_fail@plt+0x822c>
   19660:	cmp	r6, #98	; 0x62
   19664:	bne	19590 <__assert_fail@plt+0x8078>
   19668:	tst	r5, #524288	; 0x80000
   1966c:	moveq	r3, #12
   19670:	strbeq	r3, [r4, #4]
   19674:	moveq	r3, #256	; 0x100
   19678:	beq	19620 <__assert_fail@plt+0x8108>
   1967c:	b	19590 <__assert_fail@plt+0x8078>
   19680:	cmp	r6, #123	; 0x7b
   19684:	beq	197ac <__assert_fail@plt+0x8294>
   19688:	bhi	196a4 <__assert_fail@plt+0x818c>
   1968c:	cmp	r6, #119	; 0x77
   19690:	bne	19590 <__assert_fail@plt+0x8078>
   19694:	tst	r5, #524288	; 0x80000
   19698:	moveq	r3, #32
   1969c:	beq	196d4 <__assert_fail@plt+0x81bc>
   196a0:	b	19590 <__assert_fail@plt+0x8078>
   196a4:	cmp	r6, #124	; 0x7c
   196a8:	beq	196c8 <__assert_fail@plt+0x81b0>
   196ac:	cmp	r6, #125	; 0x7d
   196b0:	bne	19590 <__assert_fail@plt+0x8078>
   196b4:	and	r5, r5, #4608	; 0x1200
   196b8:	cmp	r5, #512	; 0x200
   196bc:	bne	19590 <__assert_fail@plt+0x8078>
   196c0:	mov	r3, #24
   196c4:	b	196d4 <__assert_fail@plt+0x81bc>
   196c8:	tst	r5, #33792	; 0x8400
   196cc:	moveq	r3, #10
   196d0:	bne	19590 <__assert_fail@plt+0x8078>
   196d4:	strb	r3, [r4, #4]
   196d8:	b	19590 <__assert_fail@plt+0x8078>
   196dc:	tst	r5, #16384	; 0x4000
   196e0:	moveq	r3, #4
   196e4:	subeq	r6, r6, #49	; 0x31
   196e8:	strbeq	r3, [r4, #4]
   196ec:	streq	r6, [r4]
   196f0:	b	19590 <__assert_fail@plt+0x8078>
   196f4:	tst	r5, #524288	; 0x80000
   196f8:	moveq	r3, #12
   196fc:	strbeq	r3, [r4, #4]
   19700:	moveq	r3, #9
   19704:	beq	19620 <__assert_fail@plt+0x8108>
   19708:	b	19590 <__assert_fail@plt+0x8078>
   1970c:	tst	r5, #524288	; 0x80000
   19710:	moveq	r3, #12
   19714:	strbeq	r3, [r4, #4]
   19718:	moveq	r3, #512	; 0x200
   1971c:	beq	19620 <__assert_fail@plt+0x8108>
   19720:	b	19590 <__assert_fail@plt+0x8078>
   19724:	tst	r5, #524288	; 0x80000
   19728:	moveq	r3, #33	; 0x21
   1972c:	beq	196d4 <__assert_fail@plt+0x81bc>
   19730:	b	19590 <__assert_fail@plt+0x8078>
   19734:	tst	r5, #524288	; 0x80000
   19738:	moveq	r3, #34	; 0x22
   1973c:	beq	196d4 <__assert_fail@plt+0x81bc>
   19740:	b	19590 <__assert_fail@plt+0x8078>
   19744:	tst	r5, #524288	; 0x80000
   19748:	moveq	r3, #12
   1974c:	strbeq	r3, [r4, #4]
   19750:	moveq	r3, #64	; 0x40
   19754:	beq	19620 <__assert_fail@plt+0x8108>
   19758:	b	19590 <__assert_fail@plt+0x8078>
   1975c:	tst	r5, #524288	; 0x80000
   19760:	bne	19590 <__assert_fail@plt+0x8078>
   19764:	mov	r3, #12
   19768:	strb	r3, [r4, #4]
   1976c:	mov	r3, #128	; 0x80
   19770:	b	19620 <__assert_fail@plt+0x8108>
   19774:	tst	r5, #8192	; 0x2000
   19778:	moveq	r3, #8
   1977c:	beq	196d4 <__assert_fail@plt+0x81bc>
   19780:	b	19590 <__assert_fail@plt+0x8078>
   19784:	tst	r5, #8192	; 0x2000
   19788:	moveq	r3, #9
   1978c:	beq	196d4 <__assert_fail@plt+0x81bc>
   19790:	b	19590 <__assert_fail@plt+0x8078>
   19794:	ldr	r0, [pc, #684]	; 19a48 <__assert_fail@plt+0x8530>
   19798:	and	r0, r0, r5
   1979c:	cmp	r0, #2
   197a0:	bne	19590 <__assert_fail@plt+0x8078>
   197a4:	mov	r3, #19
   197a8:	b	195ec <__assert_fail@plt+0x80d4>
   197ac:	and	r5, r5, #4608	; 0x1200
   197b0:	cmp	r5, #512	; 0x200
   197b4:	moveq	r3, #23
   197b8:	bne	19590 <__assert_fail@plt+0x8078>
   197bc:	b	196d4 <__assert_fail@plt+0x81bc>
   197c0:	cmp	r8, #42	; 0x2a
   197c4:	beq	19860 <__assert_fail@plt+0x8348>
   197c8:	bcc	198a4 <__assert_fail@plt+0x838c>
   197cc:	cmp	r8, #43	; 0x2b
   197d0:	bne	199cc <__assert_fail@plt+0x84b4>
   197d4:	ldr	r3, [pc, #620]	; 19a48 <__assert_fail@plt+0x8530>
   197d8:	and	r3, r3, r5
   197dc:	cmp	r3, #0
   197e0:	moveq	r3, #18
   197e4:	beq	1980c <__assert_fail@plt+0x82f4>
   197e8:	b	199cc <__assert_fail@plt+0x84b4>
   197ec:	cmp	r8, #94	; 0x5e
   197f0:	beq	198bc <__assert_fail@plt+0x83a4>
   197f4:	bhi	19814 <__assert_fail@plt+0x82fc>
   197f8:	cmp	r8, #63	; 0x3f
   197fc:	beq	19868 <__assert_fail@plt+0x8350>
   19800:	cmp	r8, #91	; 0x5b
   19804:	moveq	r3, #20
   19808:	bne	199cc <__assert_fail@plt+0x84b4>
   1980c:	strb	r3, [r4, #4]
   19810:	b	199cc <__assert_fail@plt+0x84b4>
   19814:	cmp	r8, #124	; 0x7c
   19818:	beq	19850 <__assert_fail@plt+0x8338>
   1981c:	cmp	r8, #125	; 0x7d
   19820:	beq	19880 <__assert_fail@plt+0x8368>
   19824:	cmp	r8, #123	; 0x7b
   19828:	bne	199cc <__assert_fail@plt+0x84b4>
   1982c:	and	r5, r5, #4608	; 0x1200
   19830:	cmp	r5, #4608	; 0x1200
   19834:	moveq	r3, #23
   19838:	bne	199cc <__assert_fail@plt+0x84b4>
   1983c:	b	1980c <__assert_fail@plt+0x82f4>
   19840:	tst	r5, #2048	; 0x800
   19844:	beq	199cc <__assert_fail@plt+0x84b4>
   19848:	mov	r3, #10
   1984c:	b	1980c <__assert_fail@plt+0x82f4>
   19850:	and	r5, r5, #33792	; 0x8400
   19854:	cmp	r5, #32768	; 0x8000
   19858:	bne	199cc <__assert_fail@plt+0x84b4>
   1985c:	b	19848 <__assert_fail@plt+0x8330>
   19860:	mov	r3, #11
   19864:	b	1980c <__assert_fail@plt+0x82f4>
   19868:	ldr	r3, [pc, #472]	; 19a48 <__assert_fail@plt+0x8530>
   1986c:	and	r3, r3, r5
   19870:	cmp	r3, #0
   19874:	moveq	r3, #19
   19878:	beq	1980c <__assert_fail@plt+0x82f4>
   1987c:	b	199cc <__assert_fail@plt+0x84b4>
   19880:	and	r5, r5, #4608	; 0x1200
   19884:	cmp	r5, #4608	; 0x1200
   19888:	moveq	r3, #24
   1988c:	bne	199cc <__assert_fail@plt+0x84b4>
   19890:	b	1980c <__assert_fail@plt+0x82f4>
   19894:	tst	r5, #8192	; 0x2000
   19898:	movne	r3, #8
   1989c:	bne	1980c <__assert_fail@plt+0x82f4>
   198a0:	b	199cc <__assert_fail@plt+0x84b4>
   198a4:	tst	r5, #8192	; 0x2000
   198a8:	movne	r3, #9
   198ac:	bne	1980c <__assert_fail@plt+0x82f4>
   198b0:	b	199cc <__assert_fail@plt+0x84b4>
   198b4:	mov	r3, #5
   198b8:	b	1980c <__assert_fail@plt+0x82f4>
   198bc:	ldr	r3, [pc, #392]	; 19a4c <__assert_fail@plt+0x8534>
   198c0:	cmp	r6, #0
   198c4:	and	r3, r3, r5
   198c8:	clz	r3, r3
   198cc:	lsr	r3, r3, #5
   198d0:	moveq	r3, #0
   198d4:	cmp	r3, #0
   198d8:	beq	198fc <__assert_fail@plt+0x83e4>
   198dc:	add	r6, r9, r6
   198e0:	lsr	r5, r5, #11
   198e4:	ldrb	r2, [r6, #-1]
   198e8:	eor	r5, r5, #1
   198ec:	cmp	r2, #10
   198f0:	orrne	r5, r5, #1
   198f4:	tst	r5, #1
   198f8:	bne	199cc <__assert_fail@plt+0x84b4>
   198fc:	mov	r3, #12
   19900:	strb	r3, [r4, #4]
   19904:	mov	r3, #16
   19908:	str	r3, [r4]
   1990c:	b	199cc <__assert_fail@plt+0x84b4>
   19910:	tst	r5, #8
   19914:	bne	19958 <__assert_fail@plt+0x8440>
   19918:	ldr	r3, [r7, #48]	; 0x30
   1991c:	add	r6, r6, #1
   19920:	cmp	r6, r3
   19924:	beq	19958 <__assert_fail@plt+0x8440>
   19928:	str	r6, [r7, #40]	; 0x28
   1992c:	mov	r2, r5
   19930:	mov	r1, r7
   19934:	mov	r0, sp
   19938:	bl	19424 <__assert_fail@plt+0x7f0c>
   1993c:	ldr	r3, [r7, #40]	; 0x28
   19940:	sub	r3, r3, #1
   19944:	str	r3, [r7, #40]	; 0x28
   19948:	ldrb	r3, [sp, #4]
   1994c:	sub	r3, r3, #9
   19950:	cmp	r3, #1
   19954:	bhi	199cc <__assert_fail@plt+0x84b4>
   19958:	mov	r3, #12
   1995c:	strb	r3, [r4, #4]
   19960:	mov	r3, #32
   19964:	b	19908 <__assert_fail@plt+0x83f0>
   19968:	mov	r3, #1
   1996c:	strb	r3, [r4, #4]
   19970:	mov	r1, r6
   19974:	mov	r0, r7
   19978:	bl	14ef4 <__assert_fail@plt+0x39dc>
   1997c:	mov	sl, r0
   19980:	bl	11404 <iswalnum@plt>
   19984:	adds	r3, r0, #0
   19988:	ldrb	r0, [r4, #6]
   1998c:	movne	r3, #1
   19990:	cmp	sl, #95	; 0x5f
   19994:	orreq	r3, r3, #1
   19998:	bic	r0, r0, #64	; 0x40
   1999c:	orr	r0, r0, r3, lsl #6
   199a0:	strb	r0, [r4, #6]
   199a4:	cmp	r8, #46	; 0x2e
   199a8:	beq	198b4 <__assert_fail@plt+0x839c>
   199ac:	bhi	197ec <__assert_fail@plt+0x82d4>
   199b0:	cmp	r8, #40	; 0x28
   199b4:	beq	19894 <__assert_fail@plt+0x837c>
   199b8:	bhi	197c0 <__assert_fail@plt+0x82a8>
   199bc:	cmp	r8, #10
   199c0:	beq	19840 <__assert_fail@plt+0x8328>
   199c4:	cmp	r8, #36	; 0x24
   199c8:	beq	19910 <__assert_fail@plt+0x83f8>
   199cc:	mov	r0, #1
   199d0:	b	194a4 <__assert_fail@plt+0x7f8c>
   199d4:	cmp	r8, #92	; 0x5c
   199d8:	bne	19968 <__assert_fail@plt+0x8450>
   199dc:	ldr	r3, [r7, #48]	; 0x30
   199e0:	add	r1, r6, #1
   199e4:	cmp	r1, r3
   199e8:	movge	r3, #36	; 0x24
   199ec:	bge	1980c <__assert_fail@plt+0x82f4>
   199f0:	ldrb	r3, [r7, #75]	; 0x4b
   199f4:	cmp	r3, #0
   199f8:	bne	194ac <__assert_fail@plt+0x7f94>
   199fc:	ldrb	r6, [r9, r1]
   19a00:	b	1951c <__assert_fail@plt+0x8004>
   19a04:	cmp	r8, #92	; 0x5c
   19a08:	beq	199dc <__assert_fail@plt+0x84c4>
   19a0c:	mov	r3, #1
   19a10:	strb	r3, [r4, #4]
   19a14:	bl	113b0 <__ctype_b_loc@plt>
   19a18:	lsl	r3, r8, #1
   19a1c:	ldr	r2, [r0]
   19a20:	ldrh	r3, [r2, r3]
   19a24:	ldrb	r2, [r4, #6]
   19a28:	lsr	r3, r3, #3
   19a2c:	and	r3, r3, #1
   19a30:	cmp	r8, #95	; 0x5f
   19a34:	orreq	r3, r3, #1
   19a38:	bic	r2, r2, #64	; 0x40
   19a3c:	orr	r3, r2, r3, lsl #6
   19a40:	strb	r3, [r4, #6]
   19a44:	b	199a4 <__assert_fail@plt+0x848c>
   19a48:	andeq	r0, r0, r2, lsl #8
   19a4c:	addeq	r0, r0, r8
   19a50:	push	{r4, lr}
   19a54:	mov	r4, r1
   19a58:	bl	19424 <__assert_fail@plt+0x7f0c>
   19a5c:	ldr	r3, [r4, #40]	; 0x28
   19a60:	add	r0, r3, r0
   19a64:	str	r0, [r4, #40]	; 0x28
   19a68:	pop	{r4, pc}
   19a6c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19a70:	mov	r6, r0
   19a74:	ldr	r9, [pc, #156]	; 19b18 <__assert_fail@plt+0x8600>
   19a78:	mov	r5, r1
   19a7c:	mov	r7, r2
   19a80:	mvn	r4, #0
   19a84:	mov	r8, #10
   19a88:	mov	sl, #32768	; 0x8000
   19a8c:	mov	r2, r7
   19a90:	mov	r1, r6
   19a94:	mov	r0, r5
   19a98:	bl	19a50 <__assert_fail@plt+0x8538>
   19a9c:	ldrb	r2, [r5, #4]
   19aa0:	ldrb	r3, [r5]
   19aa4:	cmp	r2, #2
   19aa8:	beq	19b0c <__assert_fail@plt+0x85f4>
   19aac:	cmp	r3, #44	; 0x2c
   19ab0:	cmpne	r2, #24
   19ab4:	beq	19b10 <__assert_fail@plt+0x85f8>
   19ab8:	cmp	r2, #1
   19abc:	bne	19b04 <__assert_fail@plt+0x85ec>
   19ac0:	sub	r1, r3, #48	; 0x30
   19ac4:	uxtb	r2, r1
   19ac8:	cmp	r2, #9
   19acc:	movhi	r2, #0
   19ad0:	movls	r2, #1
   19ad4:	cmn	r4, #2
   19ad8:	moveq	r2, #0
   19adc:	cmp	r2, #0
   19ae0:	beq	19b04 <__assert_fail@plt+0x85ec>
   19ae4:	cmn	r4, #1
   19ae8:	moveq	r4, r1
   19aec:	beq	19a8c <__assert_fail@plt+0x8574>
   19af0:	mla	r4, r8, r4, r3
   19af4:	cmp	r4, r9
   19af8:	suble	r4, r4, #48	; 0x30
   19afc:	movgt	r4, sl
   19b00:	b	19a8c <__assert_fail@plt+0x8574>
   19b04:	mvn	r4, #1
   19b08:	b	19a8c <__assert_fail@plt+0x8574>
   19b0c:	mvn	r4, #1
   19b10:	mov	r0, r4
   19b14:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19b18:	andeq	r8, r0, r0, lsr r0
   19b1c:	push	{r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   19b20:	mov	r4, r1
   19b24:	ldr	r5, [r1, #40]	; 0x28
   19b28:	mov	r6, r0
   19b2c:	mov	r1, r5
   19b30:	mov	r0, r4
   19b34:	mov	r7, r2
   19b38:	mov	r8, r3
   19b3c:	bl	14e9c <__assert_fail@plt+0x3984>
   19b40:	cmp	r0, #1
   19b44:	ble	19b78 <__assert_fail@plt+0x8660>
   19b48:	mov	r3, #1
   19b4c:	mov	r2, r0
   19b50:	mov	r1, r5
   19b54:	str	r3, [r6]
   19b58:	mov	r0, r4
   19b5c:	bl	14ef4 <__assert_fail@plt+0x39dc>
   19b60:	str	r0, [r6, #4]
   19b64:	mov	r0, #0
   19b68:	add	r5, r5, r2
   19b6c:	str	r5, [r4, #40]	; 0x28
   19b70:	add	sp, sp, #8
   19b74:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19b78:	ldrb	r2, [r7, #4]
   19b7c:	add	r5, r5, r8
   19b80:	str	r5, [r4, #40]	; 0x28
   19b84:	and	r3, r2, #251	; 0xfb
   19b88:	cmp	r2, #28
   19b8c:	cmpne	r3, #26
   19b90:	bne	19ce0 <__assert_fail@plt+0x87c8>
   19b94:	ldr	r3, [r4, #56]	; 0x38
   19b98:	cmp	r5, r3
   19b9c:	blt	19ba8 <__assert_fail@plt+0x8690>
   19ba0:	mov	r0, #7
   19ba4:	b	19b70 <__assert_fail@plt+0x8658>
   19ba8:	ldrb	sl, [r7]
   19bac:	mov	r9, #0
   19bb0:	ldrb	r3, [r7, #4]
   19bb4:	ldr	r5, [r4, #40]	; 0x28
   19bb8:	cmp	r3, #30
   19bbc:	bne	19bcc <__assert_fail@plt+0x86b4>
   19bc0:	ldrb	r3, [r4, #75]	; 0x4b
   19bc4:	cmp	r3, #0
   19bc8:	bne	19bdc <__assert_fail@plt+0x86c4>
   19bcc:	add	r2, r5, #1
   19bd0:	ldr	r3, [r4, #4]
   19bd4:	str	r2, [r4, #40]	; 0x28
   19bd8:	b	19c8c <__assert_fail@plt+0x8774>
   19bdc:	ldrb	r3, [r4, #76]	; 0x4c
   19be0:	cmp	r3, #0
   19be4:	beq	19c78 <__assert_fail@plt+0x8760>
   19be8:	ldr	r3, [r4, #28]
   19bec:	cmp	r5, r3
   19bf0:	beq	19c04 <__assert_fail@plt+0x86ec>
   19bf4:	ldr	r3, [r4, #8]
   19bf8:	ldr	r3, [r3, r5, lsl #2]
   19bfc:	cmn	r3, #1
   19c00:	beq	19bcc <__assert_fail@plt+0x86b4>
   19c04:	ldr	r2, [r4, #12]
   19c08:	ldr	r3, [r4]
   19c0c:	ldr	r1, [r2, r5, lsl #2]
   19c10:	ldr	r2, [r4, #24]
   19c14:	add	r3, r3, r1
   19c18:	ldrb	r8, [r3, r2]
   19c1c:	tst	r8, #128	; 0x80
   19c20:	bne	19bcc <__assert_fail@plt+0x86b4>
   19c24:	mov	r1, r5
   19c28:	mov	r0, r4
   19c2c:	bl	14e9c <__assert_fail@plt+0x3984>
   19c30:	add	r0, r5, r0
   19c34:	str	r0, [r4, #40]	; 0x28
   19c38:	ldr	r3, [r4, #40]	; 0x28
   19c3c:	ldr	r2, [r4, #56]	; 0x38
   19c40:	cmp	r2, r3
   19c44:	ble	19ba0 <__assert_fail@plt+0x8688>
   19c48:	cmp	sl, r8
   19c4c:	bne	19c60 <__assert_fail@plt+0x8748>
   19c50:	ldr	r2, [r4, #4]
   19c54:	ldrb	r2, [r2, r3]
   19c58:	cmp	r2, #93	; 0x5d
   19c5c:	beq	19c94 <__assert_fail@plt+0x877c>
   19c60:	ldr	r3, [r6, #4]
   19c64:	strb	r8, [r3, r9]
   19c68:	add	r9, r9, #1
   19c6c:	cmp	r9, #32
   19c70:	bne	19bb0 <__assert_fail@plt+0x8698>
   19c74:	b	19ba0 <__assert_fail@plt+0x8688>
   19c78:	ldr	r3, [r4]
   19c7c:	ldr	r2, [r4, #24]
   19c80:	add	r1, r5, #1
   19c84:	add	r3, r3, r2
   19c88:	str	r1, [r4, #40]	; 0x28
   19c8c:	ldrb	r8, [r3, r5]
   19c90:	b	19c38 <__assert_fail@plt+0x8720>
   19c94:	add	r3, r3, #1
   19c98:	str	r3, [r4, #40]	; 0x28
   19c9c:	ldr	r3, [r6, #4]
   19ca0:	mov	r0, #0
   19ca4:	strb	r0, [r3, r9]
   19ca8:	ldrb	r3, [r7, #4]
   19cac:	cmp	r3, #28
   19cb0:	beq	19cd0 <__assert_fail@plt+0x87b8>
   19cb4:	cmp	r3, #30
   19cb8:	beq	19cd8 <__assert_fail@plt+0x87c0>
   19cbc:	cmp	r3, #26
   19cc0:	moveq	r3, #3
   19cc4:	bne	19b70 <__assert_fail@plt+0x8658>
   19cc8:	str	r3, [r6]
   19ccc:	b	19b70 <__assert_fail@plt+0x8658>
   19cd0:	mov	r3, #2
   19cd4:	b	19cc8 <__assert_fail@plt+0x87b0>
   19cd8:	mov	r3, #4
   19cdc:	b	19cc8 <__assert_fail@plt+0x87b0>
   19ce0:	ldrb	r3, [sp, #44]	; 0x2c
   19ce4:	cmp	r2, #22
   19ce8:	orrne	r3, r3, #1
   19cec:	cmp	r3, #0
   19cf0:	bne	19d14 <__assert_fail@plt+0x87fc>
   19cf4:	ldr	r2, [sp, #40]	; 0x28
   19cf8:	mov	r1, r4
   19cfc:	mov	r0, sp
   19d00:	bl	14fc4 <__assert_fail@plt+0x3aac>
   19d04:	ldrb	r3, [sp, #4]
   19d08:	cmp	r3, #21
   19d0c:	movne	r0, #11
   19d10:	bne	19b70 <__assert_fail@plt+0x8658>
   19d14:	mov	r0, #0
   19d18:	str	r0, [r6]
   19d1c:	ldrb	r3, [r7]
   19d20:	strb	r3, [r6, #4]
   19d24:	b	19b70 <__assert_fail@plt+0x8658>
   19d28:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19d2c:	sub	sp, sp, #14400	; 0x3840
   19d30:	mov	sl, #0
   19d34:	sub	sp, sp, #4
   19d38:	mov	r9, r0
   19d3c:	str	sl, [r1, #44]	; 0x2c
   19d40:	str	sl, [r1, #48]	; 0x30
   19d44:	add	r0, sp, #64	; 0x40
   19d48:	mov	r8, r1
   19d4c:	bl	15ac0 <__assert_fail@plt+0x45a8>
   19d50:	mov	fp, sl
   19d54:	ldr	r3, [r8, #8]
   19d58:	cmp	fp, r3
   19d5c:	blt	19d90 <__assert_fail@plt+0x8878>
   19d60:	cmp	sl, #0
   19d64:	bgt	1a1c0 <__assert_fail@plt+0x8ca8>
   19d68:	bne	1a1a0 <__assert_fail@plt+0x8c88>
   19d6c:	mov	r1, #256	; 0x100
   19d70:	mov	r0, #4
   19d74:	bl	20b74 <__assert_fail@plt+0xf65c>
   19d78:	str	r0, [r8, #44]	; 0x2c
   19d7c:	adds	r0, r0, #0
   19d80:	movne	r0, #1
   19d84:	add	sp, sp, #14400	; 0x3840
   19d88:	add	sp, sp, #4
   19d8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19d90:	lsl	r3, fp, #2
   19d94:	str	r3, [sp, #12]
   19d98:	ldr	r3, [r8, #12]
   19d9c:	ldr	r1, [pc, #1908]	; 1a518 <__assert_fail@plt+0x9000>
   19da0:	ldr	r2, [r3, fp, lsl #2]
   19da4:	ldr	r3, [r9]
   19da8:	add	r7, r3, r2, lsl #3
   19dac:	ldrb	r4, [r7, #4]
   19db0:	ldr	r5, [r7, #4]
   19db4:	cmp	r4, #1
   19db8:	and	r5, r1, r5, lsr #8
   19dbc:	bne	19e40 <__assert_fail@plt+0x8928>
   19dc0:	ldrb	r1, [r3, r2, lsl #3]
   19dc4:	add	r0, sp, #64	; 0x40
   19dc8:	bl	14dc8 <__assert_fail@plt+0x38b0>
   19dcc:	cmp	r5, #0
   19dd0:	bne	19ec4 <__assert_fail@plt+0x89ac>
   19dd4:	add	r6, sp, #6208	; 0x1840
   19dd8:	mov	r5, #0
   19ddc:	add	r3, sp, #3136	; 0xc40
   19de0:	str	r3, [sp, #4]
   19de4:	cmp	r5, sl
   19de8:	blt	1a050 <__assert_fail@plt+0x8b38>
   19dec:	cmp	r5, sl
   19df0:	bne	19f98 <__assert_fail@plt+0x8a80>
   19df4:	add	lr, sp, #64	; 0x40
   19df8:	add	r3, sp, #14400	; 0x3840
   19dfc:	add	ip, r3, sl, lsl #5
   19e00:	ldm	lr!, {r0, r1, r2, r3}
   19e04:	sub	ip, ip, #8192	; 0x2000
   19e08:	stmia	ip!, {r0, r1, r2, r3}
   19e0c:	ldm	lr, {r0, r1, r2, r3}
   19e10:	stm	ip, {r0, r1, r2, r3}
   19e14:	mov	r0, #12
   19e18:	ldr	r3, [r8, #12]
   19e1c:	ldr	r2, [sp, #12]
   19e20:	ldr	r1, [r3, r2]
   19e24:	add	r3, sp, #3136	; 0xc40
   19e28:	mla	r0, r0, sl, r3
   19e2c:	bl	15970 <__assert_fail@plt+0x4458>
   19e30:	cmp	r0, #0
   19e34:	bne	1a190 <__assert_fail@plt+0x8c78>
   19e38:	add	sl, sl, #1
   19e3c:	b	19ef8 <__assert_fail@plt+0x89e0>
   19e40:	cmp	r4, #3
   19e44:	bne	19e58 <__assert_fail@plt+0x8940>
   19e48:	ldr	r1, [r3, r2, lsl #3]
   19e4c:	add	r0, sp, #64	; 0x40
   19e50:	bl	14e4c <__assert_fail@plt+0x3934>
   19e54:	b	19dcc <__assert_fail@plt+0x88b4>
   19e58:	cmp	r4, #5
   19e5c:	bne	19eb4 <__assert_fail@plt+0x899c>
   19e60:	ldr	r3, [r9, #92]	; 0x5c
   19e64:	cmp	r3, #1
   19e68:	ble	19ea0 <__assert_fail@plt+0x8988>
   19e6c:	ldr	r1, [r9, #60]	; 0x3c
   19e70:	add	r0, sp, #64	; 0x40
   19e74:	bl	14e4c <__assert_fail@plt+0x3934>
   19e78:	ldr	r2, [r9, #128]	; 0x80
   19e7c:	tst	r2, #64	; 0x40
   19e80:	ldreq	r3, [sp, #64]	; 0x40
   19e84:	biceq	r3, r3, #1024	; 0x400
   19e88:	streq	r3, [sp, #64]	; 0x40
   19e8c:	tst	r2, #128	; 0x80
   19e90:	ldrne	r3, [sp, #64]	; 0x40
   19e94:	bicne	r3, r3, #1
   19e98:	strne	r3, [sp, #64]	; 0x40
   19e9c:	b	19dcc <__assert_fail@plt+0x88b4>
   19ea0:	mov	r2, #32
   19ea4:	mvn	r1, #0
   19ea8:	add	r0, sp, #64	; 0x40
   19eac:	bl	1141c <memset@plt>
   19eb0:	b	19e78 <__assert_fail@plt+0x8960>
   19eb4:	cmp	r4, #7
   19eb8:	bne	19f98 <__assert_fail@plt+0x8a80>
   19ebc:	mov	r2, #16
   19ec0:	b	19ea4 <__assert_fail@plt+0x898c>
   19ec4:	tst	r5, #32
   19ec8:	beq	19ef0 <__assert_fail@plt+0x89d8>
   19ecc:	ldr	r6, [sp, #64]	; 0x40
   19ed0:	add	r0, sp, #64	; 0x40
   19ed4:	and	r6, r6, #1024	; 0x400
   19ed8:	bl	15ac0 <__assert_fail@plt+0x45a8>
   19edc:	cmp	r6, #0
   19ee0:	beq	19f98 <__assert_fail@plt+0x8a80>
   19ee4:	ldr	r3, [sp, #64]	; 0x40
   19ee8:	orr	r3, r3, #1024	; 0x400
   19eec:	str	r3, [sp, #64]	; 0x40
   19ef0:	tst	r5, #128	; 0x80
   19ef4:	beq	19f00 <__assert_fail@plt+0x89e8>
   19ef8:	add	r0, sp, #64	; 0x40
   19efc:	b	19f28 <__assert_fail@plt+0x8a10>
   19f00:	tst	r5, #4
   19f04:	bne	19f30 <__assert_fail@plt+0x8a18>
   19f08:	tst	r5, #8
   19f0c:	beq	19dd4 <__assert_fail@plt+0x88bc>
   19f10:	cmp	r4, #1
   19f14:	add	r0, sp, #64	; 0x40
   19f18:	bne	19fd0 <__assert_fail@plt+0x8ab8>
   19f1c:	ldrb	r3, [r7, #6]
   19f20:	tst	r3, #64	; 0x40
   19f24:	beq	19fd0 <__assert_fail@plt+0x8ab8>
   19f28:	bl	15ac0 <__assert_fail@plt+0x45a8>
   19f2c:	b	19f98 <__assert_fail@plt+0x8a80>
   19f30:	cmp	r4, #1
   19f34:	bne	19f44 <__assert_fail@plt+0x8a2c>
   19f38:	ldrb	r3, [r7, #6]
   19f3c:	tst	r3, #64	; 0x40
   19f40:	beq	19ef8 <__assert_fail@plt+0x89e0>
   19f44:	ldr	r3, [r9, #92]	; 0x5c
   19f48:	add	r2, r9, #96	; 0x60
   19f4c:	cmp	r3, #1
   19f50:	ble	19fa0 <__assert_fail@plt+0x8a88>
   19f54:	mov	r3, #0
   19f58:	ldr	lr, [r9, #60]	; 0x3c
   19f5c:	mov	r0, r3
   19f60:	add	ip, sp, #64	; 0x40
   19f64:	ldr	r1, [lr, r0, lsl #2]
   19f68:	ldr	r6, [r2], #4
   19f6c:	mvn	r1, r1
   19f70:	orr	r1, r1, r6
   19f74:	ldr	r6, [ip, r0, lsl #2]
   19f78:	and	r1, r1, r6
   19f7c:	str	r1, [ip, r0, lsl #2]
   19f80:	add	r0, r0, #1
   19f84:	cmp	r0, #8
   19f88:	orr	r3, r3, r1
   19f8c:	bne	19f64 <__assert_fail@plt+0x8a4c>
   19f90:	cmp	r3, #0
   19f94:	bne	19f08 <__assert_fail@plt+0x89f0>
   19f98:	add	fp, fp, #1
   19f9c:	b	19d54 <__assert_fail@plt+0x883c>
   19fa0:	mov	r3, #0
   19fa4:	mov	r1, r3
   19fa8:	add	ip, sp, #64	; 0x40
   19fac:	ldr	lr, [ip, r1, lsl #2]
   19fb0:	ldr	r0, [r2], #4
   19fb4:	and	r0, r0, lr
   19fb8:	str	r0, [ip, r1, lsl #2]
   19fbc:	add	r1, r1, #1
   19fc0:	cmp	r1, #8
   19fc4:	orr	r3, r3, r0
   19fc8:	bne	19fac <__assert_fail@plt+0x8a94>
   19fcc:	b	19f90 <__assert_fail@plt+0x8a78>
   19fd0:	ldr	r3, [r9, #92]	; 0x5c
   19fd4:	add	r2, r9, #96	; 0x60
   19fd8:	cmp	r3, #1
   19fdc:	ble	1a024 <__assert_fail@plt+0x8b0c>
   19fe0:	mov	r3, #0
   19fe4:	ldr	r5, [r9, #60]	; 0x3c
   19fe8:	mov	r1, r3
   19fec:	add	lr, sp, #64	; 0x40
   19ff0:	ldr	ip, [r5, r1, lsl #2]
   19ff4:	ldr	r0, [r2], #4
   19ff8:	and	ip, ip, r0
   19ffc:	ldr	r0, [lr, r1, lsl #2]
   1a000:	bic	r0, r0, ip
   1a004:	str	r0, [lr, r1, lsl #2]
   1a008:	add	r1, r1, #1
   1a00c:	cmp	r1, #8
   1a010:	orr	r3, r3, r0
   1a014:	bne	19ff0 <__assert_fail@plt+0x8ad8>
   1a018:	cmp	r3, #0
   1a01c:	beq	19f98 <__assert_fail@plt+0x8a80>
   1a020:	b	19dd4 <__assert_fail@plt+0x88bc>
   1a024:	mov	r3, #0
   1a028:	mov	r1, r3
   1a02c:	ldr	ip, [r0, r1, lsl #2]
   1a030:	ldr	lr, [r2], #4
   1a034:	bic	ip, ip, lr
   1a038:	str	ip, [r0, r1, lsl #2]
   1a03c:	add	r1, r1, #1
   1a040:	cmp	r1, #8
   1a044:	orr	r3, r3, ip
   1a048:	bne	1a02c <__assert_fail@plt+0x8b14>
   1a04c:	b	1a018 <__assert_fail@plt+0x8b00>
   1a050:	cmp	r4, #1
   1a054:	bne	1a06c <__assert_fail@plt+0x8b54>
   1a058:	ldrb	r1, [r7]
   1a05c:	mov	r0, r6
   1a060:	bl	14dfc <__assert_fail@plt+0x38e4>
   1a064:	cmp	r0, #0
   1a068:	beq	1a178 <__assert_fail@plt+0x8c60>
   1a06c:	mov	r2, #0
   1a070:	mov	r3, r2
   1a074:	add	r1, sp, #64	; 0x40
   1a078:	ldr	r0, [r6, r3, lsl #2]
   1a07c:	ldr	r1, [r1, r3, lsl #2]
   1a080:	and	r1, r1, r0
   1a084:	add	r0, sp, #1088	; 0x440
   1a088:	orr	r2, r2, r1
   1a08c:	str	r1, [r0, r3, lsl #2]
   1a090:	add	r3, r3, #1
   1a094:	cmp	r3, #8
   1a098:	bne	1a074 <__assert_fail@plt+0x8b5c>
   1a09c:	cmp	r2, #0
   1a0a0:	beq	1a178 <__assert_fail@plt+0x8c60>
   1a0a4:	mov	r3, #0
   1a0a8:	mov	r1, r3
   1a0ac:	str	r3, [sp, #8]
   1a0b0:	add	r2, sp, #64	; 0x40
   1a0b4:	ldr	r0, [r6, r3, lsl #2]
   1a0b8:	ldr	r2, [r2, r3, lsl #2]
   1a0bc:	add	lr, sp, #2112	; 0x840
   1a0c0:	bic	ip, r0, r2
   1a0c4:	bic	r2, r2, r0
   1a0c8:	add	r0, sp, #64	; 0x40
   1a0cc:	str	ip, [lr, r3, lsl #2]
   1a0d0:	str	r2, [r0, r3, lsl #2]
   1a0d4:	ldr	r0, [sp, #8]
   1a0d8:	add	r3, r3, #1
   1a0dc:	orr	r2, r0, r2
   1a0e0:	cmp	r3, #8
   1a0e4:	orr	r1, r1, ip
   1a0e8:	str	r2, [sp, #8]
   1a0ec:	bne	1a0b0 <__assert_fail@plt+0x8b98>
   1a0f0:	cmp	r1, #0
   1a0f4:	beq	1a150 <__assert_fail@plt+0x8c38>
   1a0f8:	add	r3, sp, #14400	; 0x3840
   1a0fc:	add	ip, r3, sl, lsl #5
   1a100:	ldm	lr!, {r0, r1, r2, r3}
   1a104:	sub	ip, ip, #8192	; 0x2000
   1a108:	stmia	ip!, {r0, r1, r2, r3}
   1a10c:	ldm	lr, {r0, r1, r2, r3}
   1a110:	add	lr, sp, #1088	; 0x440
   1a114:	stm	ip, {r0, r1, r2, r3}
   1a118:	add	r3, sp, #6208	; 0x1840
   1a11c:	add	ip, r3, r5, lsl #5
   1a120:	ldm	lr!, {r0, r1, r2, r3}
   1a124:	stmia	ip!, {r0, r1, r2, r3}
   1a128:	ldm	lr, {r0, r1, r2, r3}
   1a12c:	stm	ip, {r0, r1, r2, r3}
   1a130:	mov	r0, #12
   1a134:	add	r3, sp, #3136	; 0xc40
   1a138:	ldr	r1, [sp, #4]
   1a13c:	mla	r0, r0, sl, r3
   1a140:	bl	179ec <__assert_fail@plt+0x64d4>
   1a144:	cmp	r0, #0
   1a148:	bne	1a190 <__assert_fail@plt+0x8c78>
   1a14c:	add	sl, sl, #1
   1a150:	ldr	r3, [r8, #12]
   1a154:	ldr	r2, [sp, #12]
   1a158:	ldr	r0, [sp, #4]
   1a15c:	ldr	r1, [r3, r2]
   1a160:	bl	183c8 <__assert_fail@plt+0x6eb0>
   1a164:	cmp	r0, #0
   1a168:	beq	1a190 <__assert_fail@plt+0x8c78>
   1a16c:	ldr	r3, [sp, #8]
   1a170:	cmp	r3, #0
   1a174:	beq	19dec <__assert_fail@plt+0x88d4>
   1a178:	ldr	r3, [sp, #4]
   1a17c:	add	r5, r5, #1
   1a180:	add	r3, r3, #12
   1a184:	add	r6, r6, #32
   1a188:	str	r3, [sp, #4]
   1a18c:	b	19de4 <__assert_fail@plt+0x88cc>
   1a190:	mov	r4, #0
   1a194:	mov	r5, #12
   1a198:	cmp	r4, sl
   1a19c:	blt	1a1a8 <__assert_fail@plt+0x8c90>
   1a1a0:	mov	r0, #0
   1a1a4:	b	19d84 <__assert_fail@plt+0x886c>
   1a1a8:	add	r3, sp, #3136	; 0xc40
   1a1ac:	mla	r3, r5, r4, r3
   1a1b0:	add	r4, r4, #1
   1a1b4:	ldr	r0, [r3, #8]
   1a1b8:	bl	130e8 <__assert_fail@plt+0x1bd0>
   1a1bc:	b	1a198 <__assert_fail@plt+0x8c80>
   1a1c0:	add	r1, sl, #1
   1a1c4:	add	r0, sp, #20
   1a1c8:	bl	159b0 <__assert_fail@plt+0x4498>
   1a1cc:	add	r4, sp, #2112	; 0x840
   1a1d0:	cmp	r0, #0
   1a1d4:	mov	r5, r0
   1a1d8:	str	r0, [r4, #-2096]	; 0xfffff7d0
   1a1dc:	beq	1a210 <__assert_fail@plt+0x8cf8>
   1a1e0:	ldr	r0, [r4, #-2084]	; 0xfffff7dc
   1a1e4:	bl	130e8 <__assert_fail@plt+0x1bd0>
   1a1e8:	mov	r4, #0
   1a1ec:	mov	r5, #12
   1a1f0:	add	r3, sp, #3136	; 0xc40
   1a1f4:	mla	r3, r5, r4, r3
   1a1f8:	add	r4, r4, #1
   1a1fc:	ldr	r0, [r3, #8]
   1a200:	bl	130e8 <__assert_fail@plt+0x1bd0>
   1a204:	cmp	r4, sl
   1a208:	bne	1a1f0 <__assert_fail@plt+0x8cd8>
   1a20c:	b	1a1a0 <__assert_fail@plt+0x8c88>
   1a210:	add	r0, sp, #32
   1a214:	mov	r6, r5
   1a218:	bl	15ac0 <__assert_fail@plt+0x45a8>
   1a21c:	add	r3, sp, #16
   1a220:	str	r3, [sp, #4]
   1a224:	mov	r3, #12
   1a228:	add	r2, sp, #3136	; 0xc40
   1a22c:	mla	fp, r3, r6, r2
   1a230:	mov	r7, #0
   1a234:	str	r7, [r4, #-2088]	; 0xfffff7d8
   1a238:	ldr	r3, [fp, #4]
   1a23c:	cmp	r7, r3
   1a240:	blt	1a2cc <__assert_fail@plt+0x8db4>
   1a244:	mov	r3, #0
   1a248:	add	r2, sp, #20
   1a24c:	mov	r1, r9
   1a250:	ldr	r0, [sp, #4]
   1a254:	bl	17b9c <__assert_fail@plt+0x6684>
   1a258:	add	r3, sp, #64	; 0x40
   1a25c:	cmp	r0, #0
   1a260:	mov	r7, r0
   1a264:	str	r0, [r3, r6, lsl #2]
   1a268:	bne	1a278 <__assert_fail@plt+0x8d60>
   1a26c:	ldr	r3, [r4, #-2096]	; 0xfffff7d0
   1a270:	cmp	r3, #0
   1a274:	bne	1a1e0 <__assert_fail@plt+0x8cc8>
   1a278:	ldrsb	r3, [r7, #52]	; 0x34
   1a27c:	add	fp, sp, #1088	; 0x440
   1a280:	cmp	r3, #0
   1a284:	strge	r7, [fp, r6, lsl #2]
   1a288:	strge	r7, [r4, r6, lsl #2]
   1a28c:	bge	1a344 <__assert_fail@plt+0x8e2c>
   1a290:	mov	r3, #1
   1a294:	add	r2, sp, #20
   1a298:	mov	r1, r9
   1a29c:	ldr	r0, [sp, #4]
   1a2a0:	bl	17b9c <__assert_fail@plt+0x6684>
   1a2a4:	cmp	r0, #0
   1a2a8:	str	r0, [fp, r6, lsl #2]
   1a2ac:	bne	1a310 <__assert_fail@plt+0x8df8>
   1a2b0:	ldr	r3, [r4, #-2096]	; 0xfffff7d0
   1a2b4:	cmp	r3, #0
   1a2b8:	bne	1a1e0 <__assert_fail@plt+0x8cc8>
   1a2bc:	ldr	r3, [r9, #92]	; 0x5c
   1a2c0:	cmp	r3, #1
   1a2c4:	movgt	r5, #1
   1a2c8:	b	1a318 <__assert_fail@plt+0x8e00>
   1a2cc:	ldr	r3, [fp, #8]
   1a2d0:	ldr	r2, [r3, r7, lsl #2]
   1a2d4:	ldr	r3, [r9, #12]
   1a2d8:	ldr	r3, [r3, r2, lsl #2]
   1a2dc:	cmn	r3, #1
   1a2e0:	bne	1a2ec <__assert_fail@plt+0x8dd4>
   1a2e4:	add	r7, r7, #1
   1a2e8:	b	1a238 <__assert_fail@plt+0x8d20>
   1a2ec:	ldr	r1, [r9, #24]
   1a2f0:	mov	r2, #12
   1a2f4:	add	r0, sp, #20
   1a2f8:	mla	r1, r2, r3, r1
   1a2fc:	bl	187d0 <__assert_fail@plt+0x72b8>
   1a300:	cmp	r0, #0
   1a304:	str	r0, [r4, #-2096]	; 0xfffff7d0
   1a308:	beq	1a2e4 <__assert_fail@plt+0x8dcc>
   1a30c:	b	1a1e0 <__assert_fail@plt+0x8cc8>
   1a310:	cmp	r7, r0
   1a314:	bne	1a2bc <__assert_fail@plt+0x8da4>
   1a318:	mov	r3, #2
   1a31c:	add	r2, sp, #20
   1a320:	mov	r1, r9
   1a324:	ldr	r0, [sp, #4]
   1a328:	bl	17b9c <__assert_fail@plt+0x6684>
   1a32c:	cmp	r0, #0
   1a330:	str	r0, [r4, r6, lsl #2]
   1a334:	bne	1a344 <__assert_fail@plt+0x8e2c>
   1a338:	ldr	r3, [r4, #-2096]	; 0xfffff7d0
   1a33c:	cmp	r3, #0
   1a340:	bne	1a1e0 <__assert_fail@plt+0x8cc8>
   1a344:	add	r3, sp, #6208	; 0x1840
   1a348:	add	r1, r3, r6, lsl #5
   1a34c:	add	r0, sp, #32
   1a350:	add	r6, r6, #1
   1a354:	bl	14e4c <__assert_fail@plt+0x3934>
   1a358:	cmp	r6, sl
   1a35c:	bne	1a224 <__assert_fail@plt+0x8d0c>
   1a360:	cmp	r5, #0
   1a364:	bne	1a478 <__assert_fail@plt+0x8f60>
   1a368:	mov	r1, #256	; 0x100
   1a36c:	mov	r0, #4
   1a370:	bl	20b74 <__assert_fail@plt+0xf65c>
   1a374:	cmp	r0, #0
   1a378:	str	r0, [r8, #44]	; 0x2c
   1a37c:	beq	1a1e0 <__assert_fail@plt+0x8cc8>
   1a380:	add	r6, r9, #96	; 0x60
   1a384:	mov	r2, r5
   1a388:	add	r3, sp, #32
   1a38c:	add	lr, r0, r2, lsl #5
   1a390:	ldr	r1, [r3, r2]
   1a394:	add	r3, sp, #6208	; 0x1840
   1a398:	mov	ip, #1
   1a39c:	add	r7, r3, r2
   1a3a0:	cmp	r1, #0
   1a3a4:	bne	1a42c <__assert_fail@plt+0x8f14>
   1a3a8:	add	r2, r2, #4
   1a3ac:	cmp	r2, #32
   1a3b0:	add	r6, r6, #4
   1a3b4:	bne	1a388 <__assert_fail@plt+0x8e70>
   1a3b8:	ldr	r3, [r4, #-2080]	; 0xfffff7e0
   1a3bc:	mov	r6, r0
   1a3c0:	tst	r3, #1024	; 0x400
   1a3c4:	beq	1a3f8 <__assert_fail@plt+0x8ee0>
   1a3c8:	mov	r7, #0
   1a3cc:	mov	r8, #10
   1a3d0:	add	r3, sp, #6208	; 0x1840
   1a3d4:	mov	r1, r8
   1a3d8:	add	r0, r3, r7, lsl #5
   1a3dc:	bl	14dfc <__assert_fail@plt+0x38e4>
   1a3e0:	cmp	r0, #0
   1a3e4:	beq	1a508 <__assert_fail@plt+0x8ff0>
   1a3e8:	ldr	r3, [r4, r7, lsl #2]
   1a3ec:	cmp	r5, #0
   1a3f0:	str	r3, [r6, #40]	; 0x28
   1a3f4:	strne	r3, [r6, #1064]	; 0x428
   1a3f8:	ldr	r0, [r4, #-2084]	; 0xfffff7dc
   1a3fc:	bl	130e8 <__assert_fail@plt+0x1bd0>
   1a400:	mov	r4, #0
   1a404:	mov	r5, #12
   1a408:	add	r3, sp, #3136	; 0xc40
   1a40c:	mla	r3, r5, r4, r3
   1a410:	add	r4, r4, #1
   1a414:	ldr	r0, [r3, #8]
   1a418:	bl	130e8 <__assert_fail@plt+0x1bd0>
   1a41c:	cmp	r4, sl
   1a420:	bne	1a408 <__assert_fail@plt+0x8ef0>
   1a424:	mov	r0, #1
   1a428:	b	19d84 <__assert_fail@plt+0x886c>
   1a42c:	tst	r1, #1
   1a430:	movne	r3, #0
   1a434:	bne	1a44c <__assert_fail@plt+0x8f34>
   1a438:	lsl	ip, ip, #1
   1a43c:	lsr	r1, r1, #1
   1a440:	add	lr, lr, #4
   1a444:	b	1a3a0 <__assert_fail@plt+0x8e88>
   1a448:	add	r3, r3, #1
   1a44c:	ldr	r9, [r7, r3, lsl #5]
   1a450:	tst	ip, r9
   1a454:	beq	1a448 <__assert_fail@plt+0x8f30>
   1a458:	ldr	r9, [r6]
   1a45c:	lsl	r3, r3, #2
   1a460:	add	r3, r4, r3
   1a464:	tst	ip, r9
   1a468:	ldrne	r3, [r3, #-1024]	; 0xfffffc00
   1a46c:	ldreq	r3, [r3, #-2048]	; 0xfffff800
   1a470:	str	r3, [lr]
   1a474:	b	1a438 <__assert_fail@plt+0x8f20>
   1a478:	mov	r1, #512	; 0x200
   1a47c:	mov	r0, #4
   1a480:	bl	20b74 <__assert_fail@plt+0xf65c>
   1a484:	cmp	r0, #0
   1a488:	str	r0, [r8, #48]	; 0x30
   1a48c:	beq	1a1e0 <__assert_fail@plt+0x8cc8>
   1a490:	mov	r2, #0
   1a494:	add	r3, sp, #32
   1a498:	add	ip, r0, r2, lsl #5
   1a49c:	ldr	r1, [r3, r2]
   1a4a0:	add	r3, sp, #6208	; 0x1840
   1a4a4:	mov	lr, #1
   1a4a8:	add	r6, r3, r2
   1a4ac:	cmp	r1, #0
   1a4b0:	bne	1a4c4 <__assert_fail@plt+0x8fac>
   1a4b4:	add	r2, r2, #4
   1a4b8:	cmp	r2, #32
   1a4bc:	bne	1a494 <__assert_fail@plt+0x8f7c>
   1a4c0:	b	1a3b8 <__assert_fail@plt+0x8ea0>
   1a4c4:	tst	r1, #1
   1a4c8:	movne	r3, #0
   1a4cc:	bne	1a4e4 <__assert_fail@plt+0x8fcc>
   1a4d0:	lsl	lr, lr, #1
   1a4d4:	lsr	r1, r1, #1
   1a4d8:	add	ip, ip, #4
   1a4dc:	b	1a4ac <__assert_fail@plt+0x8f94>
   1a4e0:	add	r3, r3, #1
   1a4e4:	ldr	r7, [r6, r3, lsl #5]
   1a4e8:	tst	lr, r7
   1a4ec:	beq	1a4e0 <__assert_fail@plt+0x8fc8>
   1a4f0:	add	r3, r4, r3, lsl #2
   1a4f4:	ldr	r7, [r3, #-2048]	; 0xfffff800
   1a4f8:	str	r7, [ip]
   1a4fc:	ldr	r3, [r3, #-1024]	; 0xfffffc00
   1a500:	str	r3, [ip, #1024]	; 0x400
   1a504:	b	1a4d0 <__assert_fail@plt+0x8fb8>
   1a508:	add	r7, r7, #1
   1a50c:	cmp	r7, sl
   1a510:	bne	1a3d0 <__assert_fail@plt+0x8eb8>
   1a514:	b	1a3f8 <__assert_fail@plt+0x8ee0>
   1a518:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   1a51c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a520:	sub	sp, sp, #28
   1a524:	add	r5, sp, #12
   1a528:	mov	r8, r0
   1a52c:	mov	r4, r1
   1a530:	mov	r0, r5
   1a534:	ldr	r1, [r1, #4]
   1a538:	mov	r9, r2
   1a53c:	mov	sl, r3
   1a540:	bl	159b0 <__assert_fail@plt+0x4498>
   1a544:	subs	r6, r0, #0
   1a548:	moveq	r7, r6
   1a54c:	beq	1a5f4 <__assert_fail@plt+0x90dc>
   1a550:	mov	r0, r6
   1a554:	add	sp, sp, #28
   1a558:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a55c:	ldr	r3, [r4, #8]
   1a560:	ldr	r1, [r8, #24]
   1a564:	ldr	r2, [r3, r7, lsl #2]
   1a568:	mov	r3, #12
   1a56c:	mla	r1, r3, r2, r1
   1a570:	mov	r3, #0
   1a574:	ldr	lr, [r1, #4]
   1a578:	cmp	r3, lr
   1a57c:	blt	1a5a0 <__assert_fail@plt+0x9088>
   1a580:	mov	r0, r5
   1a584:	bl	187d0 <__assert_fail@plt+0x72b8>
   1a588:	subs	fp, r0, #0
   1a58c:	beq	1a5f0 <__assert_fail@plt+0x90d8>
   1a590:	ldr	r0, [sp, #20]
   1a594:	bl	130e8 <__assert_fail@plt+0x1bd0>
   1a598:	mov	r6, fp
   1a59c:	b	1a550 <__assert_fail@plt+0x9038>
   1a5a0:	ldr	r0, [r1, #8]
   1a5a4:	ldr	ip, [r8]
   1a5a8:	ldr	r0, [r0, r3, lsl #2]
   1a5ac:	add	fp, ip, r0, lsl #3
   1a5b0:	ldrb	fp, [fp, #4]
   1a5b4:	cmp	sl, fp
   1a5b8:	bne	1a5c8 <__assert_fail@plt+0x90b0>
   1a5bc:	ldr	ip, [ip, r0, lsl #3]
   1a5c0:	cmp	r9, ip
   1a5c4:	beq	1a5d0 <__assert_fail@plt+0x90b8>
   1a5c8:	add	r3, r3, #1
   1a5cc:	b	1a578 <__assert_fail@plt+0x9060>
   1a5d0:	cmn	r0, #1
   1a5d4:	beq	1a580 <__assert_fail@plt+0x9068>
   1a5d8:	str	sl, [sp]
   1a5dc:	mov	r3, r9
   1a5e0:	mov	r1, r5
   1a5e4:	mov	r0, r8
   1a5e8:	bl	186e0 <__assert_fail@plt+0x71c8>
   1a5ec:	b	1a588 <__assert_fail@plt+0x9070>
   1a5f0:	add	r7, r7, #1
   1a5f4:	ldr	r3, [r4, #4]
   1a5f8:	cmp	r7, r3
   1a5fc:	blt	1a55c <__assert_fail@plt+0x9044>
   1a600:	ldr	r0, [r4, #8]
   1a604:	bl	130e8 <__assert_fail@plt+0x1bd0>
   1a608:	ldm	r5, {r0, r1, r2}
   1a60c:	stm	r4, {r0, r1, r2}
   1a610:	b	1a550 <__assert_fail@plt+0x9038>
   1a614:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a618:	mov	r3, #0
   1a61c:	ldr	r4, [r2, #4]
   1a620:	str	r3, [r0]
   1a624:	cmp	r4, r3
   1a628:	movne	r8, r4
   1a62c:	bne	1a648 <__assert_fail@plt+0x9130>
   1a630:	mov	r0, r4
   1a634:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a638:	ldr	ip, [r2, #8]
   1a63c:	ldr	ip, [ip, r3, lsl #2]
   1a640:	add	r3, r3, #1
   1a644:	add	r8, r8, ip
   1a648:	cmp	r4, r3
   1a64c:	bgt	1a638 <__assert_fail@plt+0x9120>
   1a650:	ldr	r3, [r1, #68]	; 0x44
   1a654:	mov	r5, r2
   1a658:	and	r2, r8, r3
   1a65c:	mov	r3, #12
   1a660:	mov	r6, r1
   1a664:	mul	r3, r3, r2
   1a668:	ldr	r2, [r1, #32]
   1a66c:	mov	r7, r0
   1a670:	add	fp, r2, r3
   1a674:	ldr	sl, [r2, r3]
   1a678:	mov	r9, #0
   1a67c:	cmp	r9, sl
   1a680:	blt	1a6c8 <__assert_fail@plt+0x91b0>
   1a684:	mov	r1, #1
   1a688:	mov	r0, #56	; 0x38
   1a68c:	bl	20b74 <__assert_fail@plt+0xf65c>
   1a690:	subs	r4, r0, #0
   1a694:	beq	1a6b8 <__assert_fail@plt+0x91a0>
   1a698:	add	r9, r4, #4
   1a69c:	mov	r1, r5
   1a6a0:	mov	r0, r9
   1a6a4:	bl	179ec <__assert_fail@plt+0x64d4>
   1a6a8:	cmp	r0, #0
   1a6ac:	beq	1a6f8 <__assert_fail@plt+0x91e0>
   1a6b0:	mov	r0, r4
   1a6b4:	bl	130e8 <__assert_fail@plt+0x1bd0>
   1a6b8:	mov	r3, #12
   1a6bc:	str	r3, [r7]
   1a6c0:	mov	r4, #0
   1a6c4:	b	1a630 <__assert_fail@plt+0x9118>
   1a6c8:	ldr	r3, [fp, #8]
   1a6cc:	ldr	r4, [r3, r9, lsl #2]
   1a6d0:	ldr	r3, [r4]
   1a6d4:	cmp	r3, r8
   1a6d8:	bne	1a6f0 <__assert_fail@plt+0x91d8>
   1a6dc:	mov	r1, r5
   1a6e0:	add	r0, r4, #4
   1a6e4:	bl	176ec <__assert_fail@plt+0x61d4>
   1a6e8:	cmp	r0, #0
   1a6ec:	bne	1a630 <__assert_fail@plt+0x9118>
   1a6f0:	add	r9, r9, #1
   1a6f4:	b	1a67c <__assert_fail@plt+0x9164>
   1a6f8:	str	r9, [r4, #40]	; 0x28
   1a6fc:	ldr	lr, [pc, #188]	; 1a7c0 <__assert_fail@plt+0x92a8>
   1a700:	ldr	r9, [r5, #4]
   1a704:	cmp	r0, r9
   1a708:	blt	1a730 <__assert_fail@plt+0x9218>
   1a70c:	mov	r2, r8
   1a710:	mov	r1, r4
   1a714:	mov	r0, r6
   1a718:	bl	159e0 <__assert_fail@plt+0x44c8>
   1a71c:	cmp	r0, #0
   1a720:	beq	1a630 <__assert_fail@plt+0x9118>
   1a724:	mov	r0, r4
   1a728:	bl	164c4 <__assert_fail@plt+0x4fac>
   1a72c:	b	1a6b8 <__assert_fail@plt+0x91a0>
   1a730:	ldr	r3, [r5, #8]
   1a734:	ldr	r1, [r6]
   1a738:	ldr	r3, [r3, r0, lsl #2]
   1a73c:	add	r1, r1, r3, lsl #3
   1a740:	ldrb	ip, [r1, #4]
   1a744:	cmp	ip, #1
   1a748:	bne	1a758 <__assert_fail@plt+0x9240>
   1a74c:	ldr	r3, [r1, #4]
   1a750:	tst	r3, lr
   1a754:	beq	1a7b8 <__assert_fail@plt+0x92a0>
   1a758:	ldrb	r3, [r1, #6]
   1a75c:	ldrb	r2, [r4, #52]	; 0x34
   1a760:	cmp	ip, #2
   1a764:	lsr	r3, r3, #4
   1a768:	orr	r3, r3, r2, lsr #5
   1a76c:	and	r3, r3, #1
   1a770:	bic	r2, r2, #32
   1a774:	orr	r3, r2, r3, lsl #5
   1a778:	strb	r3, [r4, #52]	; 0x34
   1a77c:	uxtbeq	r3, r3
   1a780:	orreq	r3, r3, #16
   1a784:	beq	1a7b4 <__assert_fail@plt+0x929c>
   1a788:	cmp	ip, #4
   1a78c:	ldrbeq	r3, [r4, #52]	; 0x34
   1a790:	orreq	r3, r3, #64	; 0x40
   1a794:	beq	1a7b4 <__assert_fail@plt+0x929c>
   1a798:	cmp	ip, #12
   1a79c:	beq	1a7ac <__assert_fail@plt+0x9294>
   1a7a0:	ldr	r3, [r1, #4]
   1a7a4:	tst	r3, lr
   1a7a8:	beq	1a7b8 <__assert_fail@plt+0x92a0>
   1a7ac:	ldrb	r3, [r4, #52]	; 0x34
   1a7b0:	orr	r3, r3, #128	; 0x80
   1a7b4:	strb	r3, [r4, #52]	; 0x34
   1a7b8:	add	r0, r0, #1
   1a7bc:	b	1a704 <__assert_fail@plt+0x91ec>
   1a7c0:	andeq	pc, r3, r0, lsl #30
   1a7c4:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1a7c8:	mov	r8, r0
   1a7cc:	mov	r6, r2
   1a7d0:	mov	r7, r3
   1a7d4:	sub	r5, r1, #4
   1a7d8:	mov	r4, #0
   1a7dc:	cmp	r4, r7
   1a7e0:	blt	1a7f0 <__assert_fail@plt+0x92d8>
   1a7e4:	mov	r0, #0
   1a7e8:	add	sp, sp, #16
   1a7ec:	pop	{r4, r5, r6, r7, r8, pc}
   1a7f0:	ldr	r1, [r5, #4]!
   1a7f4:	cmp	r1, #0
   1a7f8:	ldreq	r3, [r6, r4, lsl #2]
   1a7fc:	streq	r3, [r5]
   1a800:	beq	1a854 <__assert_fail@plt+0x933c>
   1a804:	ldr	r2, [r6, r4, lsl #2]
   1a808:	cmp	r2, #0
   1a80c:	beq	1a854 <__assert_fail@plt+0x933c>
   1a810:	add	r2, r2, #4
   1a814:	add	r1, r1, #4
   1a818:	add	r0, sp, #4
   1a81c:	bl	17a64 <__assert_fail@plt+0x654c>
   1a820:	cmp	r0, #0
   1a824:	str	r0, [sp]
   1a828:	bne	1a7e8 <__assert_fail@plt+0x92d0>
   1a82c:	add	r2, sp, #4
   1a830:	mov	r1, r8
   1a834:	mov	r0, sp
   1a838:	bl	1a614 <__assert_fail@plt+0x90fc>
   1a83c:	str	r0, [r5]
   1a840:	ldr	r0, [sp, #12]
   1a844:	bl	130e8 <__assert_fail@plt+0x1bd0>
   1a848:	ldr	r0, [sp]
   1a84c:	cmp	r0, #0
   1a850:	bne	1a7e8 <__assert_fail@plt+0x92d0>
   1a854:	add	r4, r4, #1
   1a858:	b	1a7dc <__assert_fail@plt+0x92c4>
   1a85c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a860:	sub	sp, sp, #36	; 0x24
   1a864:	mov	r8, r1
   1a868:	mov	r1, r2
   1a86c:	mov	r6, r0
   1a870:	mov	r9, r2
   1a874:	str	r3, [sp, #8]
   1a878:	bl	15364 <__assert_fail@plt+0x3e4c>
   1a87c:	cmn	r0, #1
   1a880:	bne	1a890 <__assert_fail@plt+0x9378>
   1a884:	mov	r0, #0
   1a888:	add	sp, sp, #36	; 0x24
   1a88c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a890:	mov	r3, #24
   1a894:	ldr	r7, [r6, #84]	; 0x54
   1a898:	mul	r3, r3, r0
   1a89c:	str	r3, [sp, #4]
   1a8a0:	ldr	r3, [sp, #4]
   1a8a4:	mov	fp, #12
   1a8a8:	add	r4, r3, #24
   1a8ac:	ldr	r3, [r6, #116]	; 0x74
   1a8b0:	add	r4, r3, r4
   1a8b4:	ldr	sl, [r4, #-24]	; 0xffffffe8
   1a8b8:	mov	r0, r8
   1a8bc:	mov	r1, sl
   1a8c0:	bl	14f60 <__assert_fail@plt+0x3a48>
   1a8c4:	cmp	r0, #0
   1a8c8:	beq	1aa18 <__assert_fail@plt+0x9500>
   1a8cc:	ldr	r5, [r4, #-12]
   1a8d0:	ldr	r2, [r4, #-16]
   1a8d4:	add	r5, r9, r5
   1a8d8:	sub	r5, r5, r2
   1a8dc:	cmp	r9, r5
   1a8e0:	bne	1a970 <__assert_fail@plt+0x9458>
   1a8e4:	ldr	r2, [r7, #20]
   1a8e8:	mov	r0, r8
   1a8ec:	mla	r3, fp, sl, r2
   1a8f0:	ldr	r3, [r3, #8]
   1a8f4:	ldr	r5, [r3]
   1a8f8:	mov	r1, r5
   1a8fc:	bl	14f60 <__assert_fail@plt+0x3a48>
   1a900:	cmp	r0, #0
   1a904:	bne	1aa18 <__assert_fail@plt+0x9500>
   1a908:	mov	r1, r5
   1a90c:	add	r0, sp, #20
   1a910:	bl	15970 <__assert_fail@plt+0x4458>
   1a914:	ldr	r3, [sp, #72]	; 0x48
   1a918:	ldr	r2, [sp, #8]
   1a91c:	add	r1, sp, #20
   1a920:	str	r0, [sp, #16]
   1a924:	mov	r0, r7
   1a928:	bl	1a51c <__assert_fail@plt+0x9004>
   1a92c:	add	r1, sp, #20
   1a930:	mov	r4, r0
   1a934:	mov	r0, r8
   1a938:	bl	187d0 <__assert_fail@plt+0x72b8>
   1a93c:	mov	r5, r0
   1a940:	ldr	r0, [sp, #28]
   1a944:	bl	130e8 <__assert_fail@plt+0x1bd0>
   1a948:	ldr	r0, [sp, #16]
   1a94c:	orr	r3, r4, r5
   1a950:	orrs	r3, r3, r0
   1a954:	beq	1a8a0 <__assert_fail@plt+0x9388>
   1a958:	cmp	r0, #0
   1a95c:	bne	1a888 <__assert_fail@plt+0x9370>
   1a960:	cmp	r4, #0
   1a964:	movne	r0, r4
   1a968:	moveq	r0, r5
   1a96c:	b	1a888 <__assert_fail@plt+0x9370>
   1a970:	ldr	r3, [r6, #100]	; 0x64
   1a974:	ldr	r2, [r7, #12]
   1a978:	ldr	r3, [r3, r5, lsl #2]
   1a97c:	ldr	sl, [r2, sl, lsl #2]
   1a980:	cmp	r3, #0
   1a984:	beq	1aa44 <__assert_fail@plt+0x952c>
   1a988:	add	r3, r3, #4
   1a98c:	mov	r0, r3
   1a990:	mov	r1, sl
   1a994:	str	r3, [sp, #12]
   1a998:	bl	14f60 <__assert_fail@plt+0x3a48>
   1a99c:	ldr	r3, [sp, #12]
   1a9a0:	cmp	r0, #0
   1a9a4:	bne	1aa18 <__assert_fail@plt+0x9500>
   1a9a8:	mov	r1, r3
   1a9ac:	add	r0, sp, #20
   1a9b0:	bl	179ec <__assert_fail@plt+0x64d4>
   1a9b4:	mov	r1, sl
   1a9b8:	str	r0, [sp, #16]
   1a9bc:	add	r0, sp, #20
   1a9c0:	bl	183c8 <__assert_fail@plt+0x6eb0>
   1a9c4:	ldr	r3, [sp, #16]
   1a9c8:	eor	r0, r0, #1
   1a9cc:	cmp	r3, #0
   1a9d0:	orrne	r0, r0, #1
   1a9d4:	tst	r0, #255	; 0xff
   1a9d8:	bne	1aa2c <__assert_fail@plt+0x9514>
   1a9dc:	add	r2, sp, #20
   1a9e0:	mov	r1, r7
   1a9e4:	add	r0, sp, #16
   1a9e8:	ldr	sl, [r6, #100]	; 0x64
   1a9ec:	bl	1a614 <__assert_fail@plt+0x90fc>
   1a9f0:	str	r0, [sl, r5, lsl #2]
   1a9f4:	ldr	r0, [sp, #28]
   1a9f8:	bl	130e8 <__assert_fail@plt+0x1bd0>
   1a9fc:	ldr	r3, [r6, #100]	; 0x64
   1aa00:	ldr	r3, [r3, r5, lsl #2]
   1aa04:	cmp	r3, #0
   1aa08:	bne	1aa18 <__assert_fail@plt+0x9500>
   1aa0c:	ldr	r0, [sp, #16]
   1aa10:	cmp	r0, #0
   1aa14:	bne	1a888 <__assert_fail@plt+0x9370>
   1aa18:	add	r4, r4, #24
   1aa1c:	ldrb	r3, [r4, #-28]	; 0xffffffe4
   1aa20:	cmp	r3, #0
   1aa24:	bne	1a8b4 <__assert_fail@plt+0x939c>
   1aa28:	b	1a884 <__assert_fail@plt+0x936c>
   1aa2c:	ldr	r0, [sp, #28]
   1aa30:	bl	130e8 <__assert_fail@plt+0x1bd0>
   1aa34:	ldr	r0, [sp, #16]
   1aa38:	cmp	r0, #0
   1aa3c:	moveq	r0, #12
   1aa40:	b	1a888 <__assert_fail@plt+0x9370>
   1aa44:	mov	r1, sl
   1aa48:	add	r0, sp, #20
   1aa4c:	bl	15970 <__assert_fail@plt+0x4458>
   1aa50:	cmp	r0, #0
   1aa54:	str	r0, [sp, #16]
   1aa58:	beq	1a9dc <__assert_fail@plt+0x94c4>
   1aa5c:	b	1a888 <__assert_fail@plt+0x9370>
   1aa60:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1aa64:	mov	r9, r3
   1aa68:	ldr	sl, [r0, #84]	; 0x54
   1aa6c:	sub	sp, sp, #76	; 0x4c
   1aa70:	mov	fp, #0
   1aa74:	ldr	r3, [sl]
   1aa78:	str	fp, [sp, #40]	; 0x28
   1aa7c:	ldr	r5, [r0, #120]	; 0x78
   1aa80:	ldr	r3, [r3, r2, lsl #3]
   1aa84:	ldr	r8, [r1, #4]
   1aa88:	str	r3, [sp, #16]
   1aa8c:	ldr	r3, [sp, #116]	; 0x74
   1aa90:	mov	r4, r0
   1aa94:	add	r5, r3, r5
   1aa98:	cmp	r5, r8
   1aa9c:	mov	r7, r1
   1aaa0:	mov	r6, r2
   1aaa4:	blt	1ab08 <__assert_fail@plt+0x95f0>
   1aaa8:	mvn	r3, #-2147483648	; 0x80000000
   1aaac:	add	r5, r5, #1
   1aab0:	sub	r3, r3, r8
   1aab4:	cmp	r5, r3
   1aab8:	ble	1aac8 <__assert_fail@plt+0x95b0>
   1aabc:	mov	r0, #12
   1aac0:	add	sp, sp, #76	; 0x4c
   1aac4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1aac8:	add	r3, r8, r5
   1aacc:	cmn	r3, #-1073741823	; 0xc0000001
   1aad0:	bhi	1aabc <__assert_fail@plt+0x95a4>
   1aad4:	lsl	r1, r3, #2
   1aad8:	ldr	r0, [r7, #8]
   1aadc:	str	r3, [sp, #12]
   1aae0:	bl	20bfc <__assert_fail@plt+0xf6e4>
   1aae4:	cmp	r0, #0
   1aae8:	beq	1aabc <__assert_fail@plt+0x95a4>
   1aaec:	ldr	r3, [sp, #12]
   1aaf0:	str	r0, [r7, #8]
   1aaf4:	str	r3, [r7, #4]
   1aaf8:	lsl	r2, r5, #2
   1aafc:	mov	r1, fp
   1ab00:	add	r0, r0, r8, lsl #2
   1ab04:	bl	1141c <memset@plt>
   1ab08:	ldr	r5, [r7]
   1ab0c:	ldr	r3, [r4, #100]	; 0x64
   1ab10:	cmp	r5, #0
   1ab14:	ldr	fp, [r7, #8]
   1ab18:	moveq	r5, r9
   1ab1c:	str	r3, [sp, #28]
   1ab20:	ldr	r3, [r4, #40]	; 0x28
   1ab24:	str	fp, [r4, #100]	; 0x64
   1ab28:	str	r5, [r4, #40]	; 0x28
   1ab2c:	ldr	r2, [r4, #88]	; 0x58
   1ab30:	sub	r1, r5, #1
   1ab34:	mov	r0, r4
   1ab38:	str	r3, [sp, #32]
   1ab3c:	bl	18b1c <__assert_fail@plt+0x7604>
   1ab40:	cmp	r5, r9
   1ab44:	mov	r8, r0
   1ab48:	bne	1abc4 <__assert_fail@plt+0x96ac>
   1ab4c:	mov	r1, r6
   1ab50:	add	r0, sp, #48	; 0x30
   1ab54:	bl	15970 <__assert_fail@plt+0x4458>
   1ab58:	cmp	r0, #0
   1ab5c:	str	r0, [sp, #40]	; 0x28
   1ab60:	bne	1aac0 <__assert_fail@plt+0x95a8>
   1ab64:	ldr	r3, [sp, #120]	; 0x78
   1ab68:	ldr	r2, [sp, #16]
   1ab6c:	add	r1, sp, #48	; 0x30
   1ab70:	mov	r0, sl
   1ab74:	bl	1a51c <__assert_fail@plt+0x9004>
   1ab78:	cmp	r0, #0
   1ab7c:	str	r0, [sp, #40]	; 0x28
   1ab80:	bne	1acb4 <__assert_fail@plt+0x979c>
   1ab84:	ldr	r3, [sp, #52]	; 0x34
   1ab88:	cmp	r3, #0
   1ab8c:	bne	1ac8c <__assert_fail@plt+0x9774>
   1ab90:	mov	r3, r8
   1ab94:	add	r2, sp, #48	; 0x30
   1ab98:	mov	r1, sl
   1ab9c:	add	r0, sp, #40	; 0x28
   1aba0:	bl	17b9c <__assert_fail@plt+0x6684>
   1aba4:	subs	r6, r0, #0
   1aba8:	bne	1abb8 <__assert_fail@plt+0x96a0>
   1abac:	ldr	r3, [sp, #40]	; 0x28
   1abb0:	cmp	r3, #0
   1abb4:	bne	1acb4 <__assert_fail@plt+0x979c>
   1abb8:	ldr	r3, [r4, #100]	; 0x64
   1abbc:	str	r6, [r3, r5, lsl #2]
   1abc0:	b	1ac00 <__assert_fail@plt+0x96e8>
   1abc4:	ldr	r6, [fp, r5, lsl #2]
   1abc8:	cmp	r6, #0
   1abcc:	beq	1ac70 <__assert_fail@plt+0x9758>
   1abd0:	ldrb	r3, [r6, #52]	; 0x34
   1abd4:	tst	r3, #64	; 0x40
   1abd8:	beq	1ac70 <__assert_fail@plt+0x9758>
   1abdc:	add	r1, r6, #4
   1abe0:	add	r0, sp, #48	; 0x30
   1abe4:	bl	179ec <__assert_fail@plt+0x64d4>
   1abe8:	cmp	r0, #0
   1abec:	str	r0, [sp, #40]	; 0x28
   1abf0:	bne	1aac0 <__assert_fail@plt+0x95a8>
   1abf4:	ldrb	r3, [r6, #52]	; 0x34
   1abf8:	tst	r3, #64	; 0x40
   1abfc:	bne	1ab84 <__assert_fail@plt+0x966c>
   1ac00:	add	r3, r5, #1
   1ac04:	lsl	r3, r3, #2
   1ac08:	str	r3, [sp, #24]
   1ac0c:	mov	r3, #0
   1ac10:	str	r3, [sp, #12]
   1ac14:	ldr	r3, [sp, #116]	; 0x74
   1ac18:	cmp	r5, r3
   1ac1c:	blt	1aed8 <__assert_fail@plt+0x99c0>
   1ac20:	ldr	r0, [sp, #56]	; 0x38
   1ac24:	bl	130e8 <__assert_fail@plt+0x1bd0>
   1ac28:	ldr	r3, [r4, #100]	; 0x64
   1ac2c:	ldr	r2, [sp, #116]	; 0x74
   1ac30:	ldr	r0, [r3, r2, lsl #2]
   1ac34:	ldr	r3, [sp, #28]
   1ac38:	cmp	r0, #0
   1ac3c:	str	r5, [r7]
   1ac40:	addne	r0, r0, #4
   1ac44:	str	r3, [r4, #100]	; 0x64
   1ac48:	ldr	r3, [sp, #32]
   1ac4c:	cmp	r0, #0
   1ac50:	str	r3, [r4, #40]	; 0x28
   1ac54:	moveq	r0, #1
   1ac58:	beq	1aac0 <__assert_fail@plt+0x95a8>
   1ac5c:	ldr	r1, [sp, #112]	; 0x70
   1ac60:	bl	14f60 <__assert_fail@plt+0x3a48>
   1ac64:	clz	r0, r0
   1ac68:	lsr	r0, r0, #5
   1ac6c:	b	1aac0 <__assert_fail@plt+0x95a8>
   1ac70:	mov	r3, #0
   1ac74:	cmp	r6, r3
   1ac78:	str	r3, [sp, #48]	; 0x30
   1ac7c:	str	r3, [sp, #52]	; 0x34
   1ac80:	str	r3, [sp, #56]	; 0x38
   1ac84:	bne	1abf4 <__assert_fail@plt+0x96dc>
   1ac88:	b	1ac00 <__assert_fail@plt+0x96e8>
   1ac8c:	ldr	r3, [sp, #120]	; 0x78
   1ac90:	mov	r2, r5
   1ac94:	str	r3, [sp]
   1ac98:	add	r1, sp, #48	; 0x30
   1ac9c:	ldr	r3, [sp, #16]
   1aca0:	mov	r0, r4
   1aca4:	bl	1a85c <__assert_fail@plt+0x9344>
   1aca8:	cmp	r0, #0
   1acac:	str	r0, [sp, #40]	; 0x28
   1acb0:	beq	1ab90 <__assert_fail@plt+0x9678>
   1acb4:	ldr	r0, [sp, #56]	; 0x38
   1acb8:	bl	130e8 <__assert_fail@plt+0x1bd0>
   1acbc:	ldr	r0, [sp, #40]	; 0x28
   1acc0:	b	1aac0 <__assert_fail@plt+0x95a8>
   1acc4:	ldr	r3, [r6, #24]
   1acc8:	ldr	r2, [sp, #20]
   1accc:	ldr	fp, [r3, r2, lsl #2]
   1acd0:	ldr	r3, [r9]
   1acd4:	lsl	r8, fp, #3
   1acd8:	add	r3, r3, r8
   1acdc:	ldrb	r3, [r3, #6]
   1ace0:	tst	r3, #16
   1ace4:	bne	1ad10 <__assert_fail@plt+0x97f8>
   1ace8:	ldr	r1, [r9]
   1acec:	mov	r2, r5
   1acf0:	add	r1, r1, r8
   1acf4:	mov	r0, r4
   1acf8:	bl	1923c <__assert_fail@plt+0x7d24>
   1acfc:	cmp	r0, #0
   1ad00:	bne	1aea0 <__assert_fail@plt+0x9988>
   1ad04:	ldr	r3, [sp, #20]
   1ad08:	add	r3, r3, #1
   1ad0c:	b	1af3c <__assert_fail@plt+0x9a24>
   1ad10:	mov	r3, r5
   1ad14:	mov	r2, r4
   1ad18:	mov	r1, fp
   1ad1c:	mov	r0, r9
   1ad20:	bl	17470 <__assert_fail@plt+0x5f58>
   1ad24:	cmp	r0, #1
   1ad28:	ble	1aecc <__assert_fail@plt+0x99b4>
   1ad2c:	ldr	r2, [r4, #100]	; 0x64
   1ad30:	add	r8, r5, r0
   1ad34:	ldr	r3, [r9, #12]
   1ad38:	ldr	r1, [r2, r8, lsl #2]
   1ad3c:	mov	r2, #0
   1ad40:	cmp	r1, r2
   1ad44:	ldr	r3, [r3, fp, lsl #2]
   1ad48:	str	r2, [sp, #64]	; 0x40
   1ad4c:	beq	1ae4c <__assert_fail@plt+0x9934>
   1ad50:	add	r1, r1, #4
   1ad54:	add	r0, sp, #60	; 0x3c
   1ad58:	str	r3, [sp, #36]	; 0x24
   1ad5c:	bl	187d0 <__assert_fail@plt+0x72b8>
   1ad60:	ldr	r3, [sp, #36]	; 0x24
   1ad64:	cmp	r0, #0
   1ad68:	str	r0, [sp, #44]	; 0x2c
   1ad6c:	beq	1ae4c <__assert_fail@plt+0x9934>
   1ad70:	ldr	r0, [sp, #68]	; 0x44
   1ad74:	bl	130e8 <__assert_fail@plt+0x1bd0>
   1ad78:	ldr	r3, [sp, #44]	; 0x2c
   1ad7c:	cmp	r3, #0
   1ad80:	str	r3, [sp, #40]	; 0x28
   1ad84:	bne	1acb4 <__assert_fail@plt+0x979c>
   1ad88:	ldr	r3, [sp, #52]	; 0x34
   1ad8c:	add	r6, r5, #1
   1ad90:	cmp	r3, #0
   1ad94:	beq	1ade0 <__assert_fail@plt+0x98c8>
   1ad98:	ldr	r3, [sp, #120]	; 0x78
   1ad9c:	ldr	r2, [sp, #16]
   1ada0:	add	r1, sp, #48	; 0x30
   1ada4:	mov	r0, sl
   1ada8:	bl	1a51c <__assert_fail@plt+0x9004>
   1adac:	cmp	r0, #0
   1adb0:	str	r0, [sp, #40]	; 0x28
   1adb4:	bne	1acb4 <__assert_fail@plt+0x979c>
   1adb8:	ldr	r3, [sp, #120]	; 0x78
   1adbc:	mov	r2, r6
   1adc0:	str	r3, [sp]
   1adc4:	add	r1, sp, #48	; 0x30
   1adc8:	ldr	r3, [sp, #16]
   1adcc:	mov	r0, r4
   1add0:	bl	1a85c <__assert_fail@plt+0x9344>
   1add4:	cmp	r0, #0
   1add8:	str	r0, [sp, #40]	; 0x28
   1addc:	bne	1acb4 <__assert_fail@plt+0x979c>
   1ade0:	ldr	r2, [r4, #88]	; 0x58
   1ade4:	mov	r1, r5
   1ade8:	mov	r0, r4
   1adec:	bl	18b1c <__assert_fail@plt+0x7604>
   1adf0:	add	r2, sp, #48	; 0x30
   1adf4:	mov	r1, sl
   1adf8:	mov	r3, r0
   1adfc:	add	r0, sp, #40	; 0x28
   1ae00:	bl	17b9c <__assert_fail@plt+0x6684>
   1ae04:	subs	r6, r0, #0
   1ae08:	bne	1ae18 <__assert_fail@plt+0x9900>
   1ae0c:	ldr	r3, [sp, #40]	; 0x28
   1ae10:	cmp	r3, #0
   1ae14:	bne	1acb4 <__assert_fail@plt+0x979c>
   1ae18:	ldr	r3, [r4, #100]	; 0x64
   1ae1c:	ldr	r2, [sp, #24]
   1ae20:	cmp	r6, #0
   1ae24:	add	r5, r5, #1
   1ae28:	str	r6, [r3, r2]
   1ae2c:	ldreq	r3, [sp, #12]
   1ae30:	movne	r3, #0
   1ae34:	addeq	r3, r3, #1
   1ae38:	str	r3, [sp, #12]
   1ae3c:	ldr	r3, [sp, #24]
   1ae40:	add	r3, r3, #4
   1ae44:	str	r3, [sp, #24]
   1ae48:	b	1ac14 <__assert_fail@plt+0x96fc>
   1ae4c:	mov	r1, r3
   1ae50:	add	r0, sp, #60	; 0x3c
   1ae54:	bl	183c8 <__assert_fail@plt+0x6eb0>
   1ae58:	cmp	r0, #0
   1ae5c:	bne	1ae70 <__assert_fail@plt+0x9958>
   1ae60:	ldr	r0, [sp, #68]	; 0x44
   1ae64:	bl	130e8 <__assert_fail@plt+0x1bd0>
   1ae68:	mov	r3, #12
   1ae6c:	b	1ad7c <__assert_fail@plt+0x9864>
   1ae70:	ldr	r3, [r4, #100]	; 0x64
   1ae74:	add	r2, sp, #60	; 0x3c
   1ae78:	mov	r1, r9
   1ae7c:	add	r0, sp, #44	; 0x2c
   1ae80:	str	r3, [sp, #36]	; 0x24
   1ae84:	bl	1a614 <__assert_fail@plt+0x90fc>
   1ae88:	ldr	r3, [sp, #36]	; 0x24
   1ae8c:	str	r0, [r3, r8, lsl #2]
   1ae90:	ldr	r3, [r4, #100]	; 0x64
   1ae94:	ldr	r3, [r3, r8, lsl #2]
   1ae98:	cmp	r3, #0
   1ae9c:	beq	1aebc <__assert_fail@plt+0x99a4>
   1aea0:	ldr	r3, [r9, #12]
   1aea4:	add	r0, sp, #48	; 0x30
   1aea8:	ldr	r1, [r3, fp, lsl #2]
   1aeac:	bl	183c8 <__assert_fail@plt+0x6eb0>
   1aeb0:	cmp	r0, #0
   1aeb4:	bne	1ad04 <__assert_fail@plt+0x97ec>
   1aeb8:	b	1ae60 <__assert_fail@plt+0x9948>
   1aebc:	ldr	r3, [sp, #44]	; 0x2c
   1aec0:	cmp	r3, #0
   1aec4:	beq	1aea0 <__assert_fail@plt+0x9988>
   1aec8:	b	1ad70 <__assert_fail@plt+0x9858>
   1aecc:	cmp	r0, #0
   1aed0:	bne	1aea0 <__assert_fail@plt+0x9988>
   1aed4:	b	1ace8 <__assert_fail@plt+0x97d0>
   1aed8:	ldr	r3, [r4, #120]	; 0x78
   1aedc:	ldr	r2, [sp, #12]
   1aee0:	cmp	r2, r3
   1aee4:	bgt	1ac20 <__assert_fail@plt+0x9708>
   1aee8:	mov	r3, #0
   1aeec:	str	r3, [sp, #52]	; 0x34
   1aef0:	ldr	r2, [sp, #24]
   1aef4:	ldr	r3, [r4, #100]	; 0x64
   1aef8:	ldr	r1, [r3, r2]
   1aefc:	cmp	r1, #0
   1af00:	beq	1af60 <__assert_fail@plt+0x9a48>
   1af04:	add	r1, r1, #4
   1af08:	add	r0, sp, #48	; 0x30
   1af0c:	bl	187d0 <__assert_fail@plt+0x72b8>
   1af10:	cmp	r0, #0
   1af14:	str	r0, [sp, #40]	; 0x28
   1af18:	bne	1acb4 <__assert_fail@plt+0x979c>
   1af1c:	cmp	r6, #0
   1af20:	beq	1ad88 <__assert_fail@plt+0x9870>
   1af24:	ldr	r9, [r4, #84]	; 0x54
   1af28:	mov	r3, #0
   1af2c:	str	r3, [sp, #44]	; 0x2c
   1af30:	str	r3, [sp, #60]	; 0x3c
   1af34:	str	r3, [sp, #64]	; 0x40
   1af38:	str	r3, [sp, #68]	; 0x44
   1af3c:	str	r3, [sp, #20]
   1af40:	ldr	r2, [sp, #20]
   1af44:	ldr	r3, [r6, #20]
   1af48:	cmp	r2, r3
   1af4c:	blt	1acc4 <__assert_fail@plt+0x97ac>
   1af50:	ldr	r0, [sp, #68]	; 0x44
   1af54:	bl	130e8 <__assert_fail@plt+0x1bd0>
   1af58:	mov	r3, #0
   1af5c:	b	1ad7c <__assert_fail@plt+0x9864>
   1af60:	cmp	r6, #0
   1af64:	bne	1af24 <__assert_fail@plt+0x9a0c>
   1af68:	b	1ade0 <__assert_fail@plt+0x98c8>
   1af6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1af70:	sub	sp, sp, #20
   1af74:	mov	r8, r2
   1af78:	ldr	r5, [sp, #56]	; 0x38
   1af7c:	mov	sl, r3
   1af80:	mov	r3, #8
   1af84:	str	r3, [sp, #8]
   1af88:	str	r5, [sp, #4]
   1af8c:	str	sl, [sp]
   1af90:	mov	r7, r1
   1af94:	ldm	r2, {r2, r3}
   1af98:	add	r1, r8, #8
   1af9c:	mov	r4, r0
   1afa0:	bl	1aa60 <__assert_fail@plt+0x9548>
   1afa4:	subs	fp, r0, #0
   1afa8:	bne	1afe8 <__assert_fail@plt+0x9ad0>
   1afac:	ldr	r3, [r4, #112]	; 0x70
   1afb0:	ldr	r2, [r4, #108]	; 0x6c
   1afb4:	ldr	r9, [r7]
   1afb8:	cmp	r2, r3
   1afbc:	ldr	r6, [r8, #4]
   1afc0:	blt	1b020 <__assert_fail@plt+0x9b08>
   1afc4:	mov	r1, #48	; 0x30
   1afc8:	ldr	r0, [r4, #116]	; 0x74
   1afcc:	mul	r1, r1, r3
   1afd0:	bl	20bfc <__assert_fail@plt+0xf6e4>
   1afd4:	subs	r3, r0, #0
   1afd8:	bne	1aff4 <__assert_fail@plt+0x9adc>
   1afdc:	ldr	r0, [r4, #116]	; 0x74
   1afe0:	bl	130e8 <__assert_fail@plt+0x1bd0>
   1afe4:	mov	fp, #12
   1afe8:	mov	r0, fp
   1afec:	add	sp, sp, #20
   1aff0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1aff4:	ldr	r2, [r4, #112]	; 0x70
   1aff8:	ldr	ip, [r4, #108]	; 0x6c
   1affc:	mov	r0, #24
   1b000:	str	r3, [r4, #116]	; 0x74
   1b004:	mul	r2, r0, r2
   1b008:	mov	r1, fp
   1b00c:	mla	r0, r0, ip, r3
   1b010:	bl	1141c <memset@plt>
   1b014:	ldr	r3, [r4, #112]	; 0x70
   1b018:	lsl	r3, r3, #1
   1b01c:	str	r3, [r4, #112]	; 0x70
   1b020:	ldr	r3, [r4, #108]	; 0x6c
   1b024:	cmp	r3, #0
   1b028:	ble	1b050 <__assert_fail@plt+0x9b38>
   1b02c:	mov	r2, #24
   1b030:	ldr	r1, [r4, #116]	; 0x74
   1b034:	mul	r2, r2, r3
   1b038:	sub	r2, r2, #24
   1b03c:	add	r2, r1, r2
   1b040:	ldr	r1, [r2, #4]
   1b044:	cmp	r5, r1
   1b048:	moveq	r1, #1
   1b04c:	strbeq	r1, [r2, #20]
   1b050:	mov	r1, #24
   1b054:	ldr	r0, [r4, #116]	; 0x74
   1b058:	mul	r1, r1, r3
   1b05c:	cmp	r9, r6
   1b060:	add	r2, r0, r1
   1b064:	str	sl, [r0, r1]
   1b068:	add	r3, r3, #1
   1b06c:	movne	r1, #0
   1b070:	mvneq	r1, #0
   1b074:	stmib	r2, {r5, r9}
   1b078:	str	r6, [r2, #12]
   1b07c:	str	r1, [r2, #16]
   1b080:	str	r3, [r4, #108]	; 0x6c
   1b084:	mov	r3, #0
   1b088:	strb	r3, [r2, #20]
   1b08c:	ldr	r3, [r4, #120]	; 0x78
   1b090:	sub	r6, r6, r9
   1b094:	ldr	r1, [r8, #4]
   1b098:	cmp	r3, r6
   1b09c:	add	r5, r5, r1
   1b0a0:	strlt	r6, [r4, #120]	; 0x78
   1b0a4:	ldr	r1, [r7]
   1b0a8:	mov	r0, r4
   1b0ac:	sub	r1, r5, r1
   1b0b0:	add	sp, sp, #20
   1b0b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b0b8:	b	16a14 <__assert_fail@plt+0x54fc>
   1b0bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b0c0:	sub	sp, sp, #84	; 0x54
   1b0c4:	ldr	sl, [r0, #40]	; 0x28
   1b0c8:	ldr	fp, [r0, #84]	; 0x54
   1b0cc:	mov	r4, r0
   1b0d0:	lsl	r3, sl, #2
   1b0d4:	str	r3, [sp, #44]	; 0x2c
   1b0d8:	mov	r3, #0
   1b0dc:	str	r1, [sp, #56]	; 0x38
   1b0e0:	str	r3, [sp, #24]
   1b0e4:	ldr	r3, [sp, #56]	; 0x38
   1b0e8:	ldr	r2, [sp, #24]
   1b0ec:	ldr	r3, [r3, #4]
   1b0f0:	cmp	r2, r3
   1b0f4:	movge	r3, #0
   1b0f8:	strge	r3, [sp, #64]	; 0x40
   1b0fc:	bge	1b6b8 <__assert_fail@plt+0xa1a0>
   1b100:	ldr	r3, [sp, #56]	; 0x38
   1b104:	ldr	r2, [sp, #24]
   1b108:	ldr	r3, [r3, #8]
   1b10c:	ldr	r3, [r3, r2, lsl #2]
   1b110:	str	r3, [sp, #20]
   1b114:	ldr	r2, [sp, #20]
   1b118:	ldr	r3, [fp]
   1b11c:	add	r3, r3, r2, lsl #3
   1b120:	ldrb	r2, [r3, #4]
   1b124:	cmp	r2, #4
   1b128:	beq	1b138 <__assert_fail@plt+0x9c20>
   1b12c:	ldr	r3, [sp, #24]
   1b130:	add	r3, r3, #1
   1b134:	b	1b0e0 <__assert_fail@plt+0x9bc8>
   1b138:	ldr	r5, [r3, #4]
   1b13c:	ldr	r3, [pc, #1444]	; 1b6e8 <__assert_fail@plt+0xa1d0>
   1b140:	tst	r5, r3
   1b144:	beq	1b1a0 <__assert_fail@plt+0x9c88>
   1b148:	ldr	r2, [r4, #88]	; 0x58
   1b14c:	mov	r1, sl
   1b150:	mov	r0, r4
   1b154:	bl	18b1c <__assert_fail@plt+0x7604>
   1b158:	ldr	r3, [pc, #1420]	; 1b6ec <__assert_fail@plt+0xa1d4>
   1b15c:	and	r3, r3, r5, lsr #8
   1b160:	tst	r3, #4
   1b164:	beq	1b170 <__assert_fail@plt+0x9c58>
   1b168:	tst	r0, #1
   1b16c:	beq	1b12c <__assert_fail@plt+0x9c14>
   1b170:	tst	r3, #8
   1b174:	beq	1b180 <__assert_fail@plt+0x9c68>
   1b178:	tst	r0, #1
   1b17c:	bne	1b12c <__assert_fail@plt+0x9c14>
   1b180:	tst	r3, #32
   1b184:	beq	1b190 <__assert_fail@plt+0x9c78>
   1b188:	tst	r0, #2
   1b18c:	beq	1b12c <__assert_fail@plt+0x9c14>
   1b190:	tst	r3, #128	; 0x80
   1b194:	beq	1b1a0 <__assert_fail@plt+0x9c88>
   1b198:	tst	r0, #8
   1b19c:	beq	1b12c <__assert_fail@plt+0x9c14>
   1b1a0:	ldr	r3, [r4, #108]	; 0x6c
   1b1a4:	mov	r1, sl
   1b1a8:	mov	r0, r4
   1b1ac:	str	r3, [sp, #28]
   1b1b0:	bl	15364 <__assert_fail@plt+0x3e4c>
   1b1b4:	cmn	r0, #1
   1b1b8:	beq	1b268 <__assert_fail@plt+0x9d50>
   1b1bc:	mov	r3, #24
   1b1c0:	mul	r0, r3, r0
   1b1c4:	add	r3, r0, r3
   1b1c8:	ldr	r0, [r4, #116]	; 0x74
   1b1cc:	add	r0, r0, r3
   1b1d0:	ldr	r3, [r0, #-24]	; 0xffffffe8
   1b1d4:	ldr	r2, [sp, #20]
   1b1d8:	cmp	r2, r3
   1b1dc:	bne	1b258 <__assert_fail@plt+0x9d40>
   1b1e0:	mov	r0, #0
   1b1e4:	cmp	r0, #0
   1b1e8:	str	r0, [sp, #64]	; 0x40
   1b1ec:	bne	1b6b8 <__assert_fail@plt+0xa1a0>
   1b1f0:	ldr	r3, [sp, #20]
   1b1f4:	ldr	r2, [sp, #20]
   1b1f8:	mov	r7, #24
   1b1fc:	lsl	r3, r3, #2
   1b200:	str	r3, [sp, #32]
   1b204:	mov	r3, #12
   1b208:	str	r0, [sp, #48]	; 0x30
   1b20c:	mul	r3, r3, r2
   1b210:	str	r3, [sp, #40]	; 0x28
   1b214:	ldr	r3, [sp, #28]
   1b218:	mul	r7, r7, r3
   1b21c:	ldr	r3, [r4, #108]	; 0x6c
   1b220:	ldr	r2, [sp, #28]
   1b224:	cmp	r2, r3
   1b228:	bge	1b12c <__assert_fail@plt+0x9c14>
   1b22c:	ldr	r2, [r4, #116]	; 0x74
   1b230:	ldr	r1, [sp, #20]
   1b234:	add	r3, r2, r7
   1b238:	ldr	r2, [r2, r7]
   1b23c:	cmp	r1, r2
   1b240:	beq	1b578 <__assert_fail@plt+0xa060>
   1b244:	ldr	r3, [sp, #28]
   1b248:	add	r7, r7, #24
   1b24c:	add	r3, r3, #1
   1b250:	str	r3, [sp, #28]
   1b254:	b	1b21c <__assert_fail@plt+0x9d04>
   1b258:	add	r0, r0, #24
   1b25c:	ldrb	r3, [r0, #-28]	; 0xffffffe4
   1b260:	cmp	r3, #0
   1b264:	bne	1b1d0 <__assert_fail@plt+0x9cb8>
   1b268:	ldr	r3, [r4, #84]	; 0x54
   1b26c:	ldr	r2, [sp, #20]
   1b270:	str	r3, [sp, #40]	; 0x28
   1b274:	ldr	r3, [r3]
   1b278:	ldr	r8, [r4, #4]
   1b27c:	ldr	r3, [r3, r2, lsl #3]
   1b280:	str	r3, [sp, #48]	; 0x30
   1b284:	mov	r3, #0
   1b288:	str	r3, [sp, #32]
   1b28c:	ldr	r2, [sp, #32]
   1b290:	ldr	r3, [r4, #124]	; 0x7c
   1b294:	cmp	r2, r3
   1b298:	bge	1b1e0 <__assert_fail@plt+0x9cc8>
   1b29c:	ldr	r3, [r4, #132]	; 0x84
   1b2a0:	ldr	r2, [sp, #32]
   1b2a4:	ldr	r5, [r3, r2, lsl #2]
   1b2a8:	ldr	r3, [sp, #40]	; 0x28
   1b2ac:	ldr	r2, [r5, #4]
   1b2b0:	ldr	r3, [r3]
   1b2b4:	ldr	r3, [r3, r2, lsl #3]
   1b2b8:	ldr	r2, [sp, #48]	; 0x30
   1b2bc:	cmp	r2, r3
   1b2c0:	moveq	r7, sl
   1b2c4:	ldreq	r6, [r5]
   1b2c8:	moveq	r9, #0
   1b2cc:	beq	1b32c <__assert_fail@plt+0x9e14>
   1b2d0:	ldr	r3, [sp, #32]
   1b2d4:	add	r3, r3, #1
   1b2d8:	b	1b288 <__assert_fail@plt+0x9d70>
   1b2dc:	ldr	r3, [r5, #20]
   1b2e0:	ldr	r3, [r3, r9, lsl #2]
   1b2e4:	str	r3, [sp, #52]	; 0x34
   1b2e8:	ldr	r3, [r3, #4]
   1b2ec:	str	r3, [sp, #36]	; 0x24
   1b2f0:	sub	r3, r3, r6
   1b2f4:	cmp	r3, #0
   1b2f8:	bgt	1b33c <__assert_fail@plt+0x9e24>
   1b2fc:	add	r7, r7, r3
   1b300:	str	sl, [sp]
   1b304:	ldr	r3, [sp, #20]
   1b308:	ldr	r2, [sp, #52]	; 0x34
   1b30c:	mov	r1, r5
   1b310:	mov	r0, r4
   1b314:	bl	1af6c <__assert_fail@plt+0x9a54>
   1b318:	ldr	r8, [r4, #4]
   1b31c:	cmp	r0, #1
   1b320:	bhi	1b1e4 <__assert_fail@plt+0x9ccc>
   1b324:	ldr	r6, [sp, #36]	; 0x24
   1b328:	add	r9, r9, #1
   1b32c:	ldr	r3, [r5, #16]
   1b330:	cmp	r9, r3
   1b334:	blt	1b2dc <__assert_fail@plt+0x9dc4>
   1b338:	b	1b394 <__assert_fail@plt+0x9e7c>
   1b33c:	ldr	r2, [r4, #28]
   1b340:	add	r1, r3, r7
   1b344:	cmp	r1, r2
   1b348:	ble	1b374 <__assert_fail@plt+0x9e5c>
   1b34c:	ldr	r2, [r4, #48]	; 0x30
   1b350:	str	r3, [sp, #60]	; 0x3c
   1b354:	cmp	r1, r2
   1b358:	bgt	1b394 <__assert_fail@plt+0x9e7c>
   1b35c:	mov	r0, r4
   1b360:	bl	16a14 <__assert_fail@plt+0x54fc>
   1b364:	cmp	r0, #0
   1b368:	bne	1b1e4 <__assert_fail@plt+0x9ccc>
   1b36c:	ldr	r8, [r4, #4]
   1b370:	ldr	r3, [sp, #60]	; 0x3c
   1b374:	mov	r2, r3
   1b378:	add	r1, r8, r6
   1b37c:	add	r0, r8, r7
   1b380:	str	r3, [sp, #60]	; 0x3c
   1b384:	bl	11290 <memcmp@plt>
   1b388:	ldr	r3, [sp, #60]	; 0x3c
   1b38c:	cmp	r0, #0
   1b390:	beq	1b2fc <__assert_fail@plt+0x9de4>
   1b394:	ldr	r3, [r5, #16]
   1b398:	cmp	r9, r3
   1b39c:	blt	1b2d0 <__assert_fail@plt+0x9db8>
   1b3a0:	cmp	r9, #0
   1b3a4:	addgt	r6, r6, #1
   1b3a8:	lsl	r3, r6, #2
   1b3ac:	cmp	sl, r6
   1b3b0:	str	r3, [sp, #36]	; 0x24
   1b3b4:	blt	1b2d0 <__assert_fail@plt+0x9db8>
   1b3b8:	ldr	r3, [r5]
   1b3bc:	sub	r3, r6, r3
   1b3c0:	cmp	r3, #0
   1b3c4:	ble	1b414 <__assert_fail@plt+0x9efc>
   1b3c8:	ldr	r3, [r4, #28]
   1b3cc:	cmp	r3, r7
   1b3d0:	bgt	1b3f8 <__assert_fail@plt+0x9ee0>
   1b3d4:	ldr	r3, [r4, #48]	; 0x30
   1b3d8:	cmp	r7, r3
   1b3dc:	bge	1b2d0 <__assert_fail@plt+0x9db8>
   1b3e0:	add	r1, r7, #1
   1b3e4:	mov	r0, r4
   1b3e8:	bl	16150 <__assert_fail@plt+0x4c38>
   1b3ec:	cmp	r0, #0
   1b3f0:	bne	1b1e4 <__assert_fail@plt+0x9ccc>
   1b3f4:	ldr	r8, [r4, #4]
   1b3f8:	add	r3, r8, r6
   1b3fc:	ldrb	r1, [r8, r7]
   1b400:	ldrb	r3, [r3, #-1]
   1b404:	add	r2, r7, #1
   1b408:	cmp	r1, r3
   1b40c:	bne	1b2d0 <__assert_fail@plt+0x9db8>
   1b410:	mov	r7, r2
   1b414:	ldr	r3, [r4, #100]	; 0x64
   1b418:	ldr	r2, [sp, #36]	; 0x24
   1b41c:	ldr	r2, [r3, r2]
   1b420:	cmp	r2, #0
   1b424:	movne	r3, #0
   1b428:	ldrne	r0, [r2, #8]
   1b42c:	bne	1b474 <__assert_fail@plt+0x9f5c>
   1b430:	ldr	r3, [sp, #36]	; 0x24
   1b434:	add	r6, r6, #1
   1b438:	add	r3, r3, #4
   1b43c:	b	1b3ac <__assert_fail@plt+0x9e94>
   1b440:	ldr	r1, [r2, #12]
   1b444:	ldr	r9, [r1, r3, lsl #2]
   1b448:	ldr	r1, [sp, #40]	; 0x28
   1b44c:	ldr	r1, [r1]
   1b450:	add	ip, r1, r9, lsl #3
   1b454:	ldrb	ip, [ip, #4]
   1b458:	cmp	ip, #9
   1b45c:	bne	1b470 <__assert_fail@plt+0x9f58>
   1b460:	ldr	r1, [r1, r9, lsl #3]
   1b464:	ldr	ip, [sp, #48]	; 0x30
   1b468:	cmp	ip, r1
   1b46c:	beq	1b480 <__assert_fail@plt+0x9f68>
   1b470:	add	r3, r3, #1
   1b474:	cmp	r3, r0
   1b478:	blt	1b440 <__assert_fail@plt+0x9f28>
   1b47c:	b	1b430 <__assert_fail@plt+0x9f18>
   1b480:	cmn	r9, #1
   1b484:	beq	1b430 <__assert_fail@plt+0x9f18>
   1b488:	ldr	r3, [r5, #8]
   1b48c:	cmp	r3, #0
   1b490:	beq	1b550 <__assert_fail@plt+0xa038>
   1b494:	mov	r3, #9
   1b498:	str	r3, [sp, #8]
   1b49c:	str	r6, [sp, #4]
   1b4a0:	str	r9, [sp]
   1b4a4:	mov	r0, r4
   1b4a8:	ldr	r3, [r5]
   1b4ac:	ldr	r2, [r5, #4]
   1b4b0:	ldr	r1, [r5, #8]
   1b4b4:	bl	1aa60 <__assert_fail@plt+0x9548>
   1b4b8:	cmp	r0, #1
   1b4bc:	beq	1b430 <__assert_fail@plt+0x9f18>
   1b4c0:	cmp	r0, #0
   1b4c4:	bne	1b1e4 <__assert_fail@plt+0x9ccc>
   1b4c8:	ldr	r8, [r5, #16]
   1b4cc:	ldr	r3, [r5, #12]
   1b4d0:	cmp	r8, r3
   1b4d4:	bne	1b4fc <__assert_fail@plt+0x9fe4>
   1b4d8:	lsl	r8, r8, #1
   1b4dc:	add	r8, r8, #1
   1b4e0:	ldr	r0, [r5, #20]
   1b4e4:	lsl	r1, r8, #2
   1b4e8:	bl	20bfc <__assert_fail@plt+0xf6e4>
   1b4ec:	cmp	r0, #0
   1b4f0:	beq	1b570 <__assert_fail@plt+0xa058>
   1b4f4:	str	r0, [r5, #20]
   1b4f8:	str	r8, [r5, #12]
   1b4fc:	mov	r1, #20
   1b500:	mov	r0, #1
   1b504:	bl	20b74 <__assert_fail@plt+0xf65c>
   1b508:	subs	r2, r0, #0
   1b50c:	beq	1b570 <__assert_fail@plt+0xa058>
   1b510:	ldr	r3, [r5, #16]
   1b514:	ldr	r1, [r5, #20]
   1b518:	mov	r0, r4
   1b51c:	str	r2, [r1, r3, lsl #2]
   1b520:	add	r3, r3, #1
   1b524:	str	r9, [r2]
   1b528:	str	r6, [r2, #4]
   1b52c:	mov	r1, r5
   1b530:	str	r3, [r5, #16]
   1b534:	str	sl, [sp]
   1b538:	ldr	r3, [sp, #20]
   1b53c:	bl	1af6c <__assert_fail@plt+0x9a54>
   1b540:	ldr	r8, [r4, #4]
   1b544:	cmp	r0, #1
   1b548:	bls	1b430 <__assert_fail@plt+0x9f18>
   1b54c:	b	1b1e4 <__assert_fail@plt+0x9ccc>
   1b550:	ldr	r1, [r5]
   1b554:	mov	r0, #12
   1b558:	sub	r1, r6, r1
   1b55c:	add	r1, r1, #1
   1b560:	bl	20b74 <__assert_fail@plt+0xf65c>
   1b564:	cmp	r0, #0
   1b568:	str	r0, [r5, #8]
   1b56c:	bne	1b494 <__assert_fail@plt+0x9f7c>
   1b570:	mov	r0, #12
   1b574:	b	1b1e4 <__assert_fail@plt+0x9ccc>
   1b578:	ldr	r2, [r3, #4]
   1b57c:	cmp	sl, r2
   1b580:	bne	1b244 <__assert_fail@plt+0x9d2c>
   1b584:	ldr	r5, [r3, #12]
   1b588:	ldr	r3, [r3, #8]
   1b58c:	mov	r0, r4
   1b590:	subs	r2, r5, r3
   1b594:	str	r2, [sp, #36]	; 0x24
   1b598:	ldreq	r1, [sp, #40]	; 0x28
   1b59c:	ldreq	r2, [fp, #20]
   1b5a0:	ldrne	r2, [fp, #12]
   1b5a4:	addeq	r2, r2, r1
   1b5a8:	ldrne	r1, [sp, #32]
   1b5ac:	ldreq	r2, [r2, #8]
   1b5b0:	add	r5, sl, r5
   1b5b4:	ldrne	r6, [r2, r1]
   1b5b8:	ldreq	r6, [r2]
   1b5bc:	mov	r1, #12
   1b5c0:	ldr	r2, [fp, #24]
   1b5c4:	sub	r5, r5, r3
   1b5c8:	mla	r6, r1, r6, r2
   1b5cc:	ldr	r2, [r4, #88]	; 0x58
   1b5d0:	sub	r1, r5, #1
   1b5d4:	bl	18b1c <__assert_fail@plt+0x7604>
   1b5d8:	ldr	r8, [r4, #100]	; 0x64
   1b5dc:	ldr	r2, [sp, #44]	; 0x2c
   1b5e0:	ldr	r1, [r8, r5, lsl #2]
   1b5e4:	ldr	r2, [r8, r2]
   1b5e8:	cmp	r2, #0
   1b5ec:	ldrne	r9, [r2, #8]
   1b5f0:	ldreq	r9, [sp, #48]	; 0x30
   1b5f4:	cmp	r1, #0
   1b5f8:	mov	r3, r0
   1b5fc:	bne	1b68c <__assert_fail@plt+0xa174>
   1b600:	mov	r2, r6
   1b604:	mov	r1, fp
   1b608:	add	r0, sp, #64	; 0x40
   1b60c:	bl	17b9c <__assert_fail@plt+0x6684>
   1b610:	str	r0, [r8, r5, lsl #2]
   1b614:	ldr	r3, [r4, #100]	; 0x64
   1b618:	ldr	r3, [r3, r5, lsl #2]
   1b61c:	cmp	r3, #0
   1b620:	bne	1b630 <__assert_fail@plt+0xa118>
   1b624:	ldr	r3, [sp, #64]	; 0x40
   1b628:	cmp	r3, #0
   1b62c:	bne	1b6b8 <__assert_fail@plt+0xa1a0>
   1b630:	ldr	r3, [sp, #36]	; 0x24
   1b634:	cmp	r3, #0
   1b638:	bne	1b244 <__assert_fail@plt+0x9d2c>
   1b63c:	ldr	r3, [r4, #100]	; 0x64
   1b640:	ldr	r2, [sp, #44]	; 0x2c
   1b644:	ldr	r3, [r3, r2]
   1b648:	ldr	r3, [r3, #8]
   1b64c:	cmp	r9, r3
   1b650:	bge	1b244 <__assert_fail@plt+0x9d2c>
   1b654:	mov	r2, sl
   1b658:	mov	r1, r6
   1b65c:	mov	r0, r4
   1b660:	bl	16910 <__assert_fail@plt+0x53f8>
   1b664:	cmp	r0, #0
   1b668:	str	r0, [sp, #64]	; 0x40
   1b66c:	bne	1b6b8 <__assert_fail@plt+0xa1a0>
   1b670:	mov	r1, r6
   1b674:	mov	r0, r4
   1b678:	bl	1b0bc <__assert_fail@plt+0x9ba4>
   1b67c:	cmp	r0, #0
   1b680:	str	r0, [sp, #64]	; 0x40
   1b684:	beq	1b244 <__assert_fail@plt+0x9d2c>
   1b688:	b	1b6b8 <__assert_fail@plt+0xa1a0>
   1b68c:	str	r0, [sp, #52]	; 0x34
   1b690:	mov	r2, r6
   1b694:	ldr	r1, [r1, #40]	; 0x28
   1b698:	add	r0, sp, #68	; 0x44
   1b69c:	bl	17a64 <__assert_fail@plt+0x654c>
   1b6a0:	ldr	r3, [sp, #52]	; 0x34
   1b6a4:	cmp	r0, #0
   1b6a8:	str	r0, [sp, #64]	; 0x40
   1b6ac:	beq	1b6c4 <__assert_fail@plt+0xa1ac>
   1b6b0:	ldr	r0, [sp, #76]	; 0x4c
   1b6b4:	bl	130e8 <__assert_fail@plt+0x1bd0>
   1b6b8:	ldr	r0, [sp, #64]	; 0x40
   1b6bc:	add	sp, sp, #84	; 0x54
   1b6c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b6c4:	add	r2, sp, #68	; 0x44
   1b6c8:	mov	r1, fp
   1b6cc:	add	r0, sp, #64	; 0x40
   1b6d0:	ldr	r8, [r4, #100]	; 0x64
   1b6d4:	bl	17b9c <__assert_fail@plt+0x6684>
   1b6d8:	str	r0, [r8, r5, lsl #2]
   1b6dc:	ldr	r0, [sp, #76]	; 0x4c
   1b6e0:	bl	130e8 <__assert_fail@plt+0x1bd0>
   1b6e4:	b	1b614 <__assert_fail@plt+0xa0fc>
   1b6e8:	andeq	pc, r3, r0, lsl #30
   1b6ec:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   1b6f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b6f4:	mov	r8, r0
   1b6f8:	ldr	r3, [r1, #104]	; 0x68
   1b6fc:	ldr	r6, [r1, #40]	; 0x28
   1b700:	ldr	sl, [r1, #84]	; 0x54
   1b704:	cmp	r6, r3
   1b708:	ldr	r3, [r1, #100]	; 0x64
   1b70c:	sub	sp, sp, #20
   1b710:	mov	r5, r1
   1b714:	strgt	r2, [r3, r6, lsl #2]
   1b718:	mov	r4, r2
   1b71c:	strgt	r6, [r1, #104]	; 0x68
   1b720:	bgt	1b7c0 <__assert_fail@plt+0xa2a8>
   1b724:	ldr	r2, [r3, r6, lsl #2]
   1b728:	cmp	r2, #0
   1b72c:	streq	r4, [r3, r6, lsl #2]
   1b730:	beq	1b7c0 <__assert_fail@plt+0xa2a8>
   1b734:	cmp	r4, #0
   1b738:	ldr	r2, [r2, #40]	; 0x28
   1b73c:	add	r7, sp, #4
   1b740:	beq	1b770 <__assert_fail@plt+0xa258>
   1b744:	ldr	r9, [r4, #40]	; 0x28
   1b748:	mov	r0, r7
   1b74c:	mov	r1, r9
   1b750:	bl	17a64 <__assert_fail@plt+0x654c>
   1b754:	cmp	r0, #0
   1b758:	str	r0, [r8]
   1b75c:	beq	1b77c <__assert_fail@plt+0xa264>
   1b760:	mov	r4, #0
   1b764:	mov	r0, r4
   1b768:	add	sp, sp, #20
   1b76c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b770:	ldm	r2, {r0, r1, r2}
   1b774:	mov	r9, r4
   1b778:	stm	r7, {r0, r1, r2}
   1b77c:	mov	r0, r5
   1b780:	ldr	r1, [r5, #40]	; 0x28
   1b784:	ldr	r2, [r5, #88]	; 0x58
   1b788:	sub	r1, r1, #1
   1b78c:	bl	18b1c <__assert_fail@plt+0x7604>
   1b790:	mov	r2, r7
   1b794:	mov	r1, sl
   1b798:	ldr	fp, [r5, #100]	; 0x64
   1b79c:	mov	r3, r0
   1b7a0:	mov	r0, r8
   1b7a4:	bl	17b9c <__assert_fail@plt+0x6684>
   1b7a8:	cmp	r9, #0
   1b7ac:	mov	r4, r0
   1b7b0:	str	r0, [fp, r6, lsl #2]
   1b7b4:	beq	1b7c0 <__assert_fail@plt+0xa2a8>
   1b7b8:	ldr	r0, [sp, #12]
   1b7bc:	bl	130e8 <__assert_fail@plt+0x1bd0>
   1b7c0:	ldr	r3, [sl, #76]	; 0x4c
   1b7c4:	cmp	r3, #0
   1b7c8:	beq	1b764 <__assert_fail@plt+0xa24c>
   1b7cc:	cmp	r4, #0
   1b7d0:	beq	1b760 <__assert_fail@plt+0xa248>
   1b7d4:	add	r7, r4, #4
   1b7d8:	mov	r2, r6
   1b7dc:	mov	r1, r7
   1b7e0:	mov	r0, r5
   1b7e4:	bl	16910 <__assert_fail@plt+0x53f8>
   1b7e8:	cmp	r0, #0
   1b7ec:	str	r0, [r8]
   1b7f0:	bne	1b760 <__assert_fail@plt+0xa248>
   1b7f4:	ldrb	r3, [r4, #52]	; 0x34
   1b7f8:	tst	r3, #64	; 0x40
   1b7fc:	beq	1b764 <__assert_fail@plt+0xa24c>
   1b800:	mov	r1, r7
   1b804:	mov	r0, r5
   1b808:	bl	1b0bc <__assert_fail@plt+0x9ba4>
   1b80c:	cmp	r0, #0
   1b810:	str	r0, [r8]
   1b814:	bne	1b760 <__assert_fail@plt+0xa248>
   1b818:	ldr	r3, [r5, #100]	; 0x64
   1b81c:	ldr	r4, [r3, r6, lsl #2]
   1b820:	b	1b764 <__assert_fail@plt+0xa24c>
   1b824:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b828:	sub	sp, sp, #92	; 0x5c
   1b82c:	mov	r4, r3
   1b830:	mov	r3, #0
   1b834:	str	r3, [sp, #56]	; 0x38
   1b838:	lsl	r3, r2, #2
   1b83c:	str	r3, [sp, #32]
   1b840:	ldr	r3, [r0, #100]	; 0x64
   1b844:	mov	fp, r2
   1b848:	ldr	r7, [r0, #84]	; 0x54
   1b84c:	ldr	r3, [r3, r2, lsl #2]
   1b850:	mov	r6, r0
   1b854:	cmp	r3, #0
   1b858:	addne	r3, r3, #4
   1b85c:	str	r3, [sp, #8]
   1b860:	ldr	r3, [r4, #4]
   1b864:	mov	r5, r1
   1b868:	cmp	r3, #0
   1b86c:	ldreq	r2, [r1]
   1b870:	streq	r3, [r2, fp, lsl #2]
   1b874:	beq	1bb78 <__assert_fail@plt+0xa660>
   1b878:	ldr	r3, [sp, #8]
   1b87c:	cmp	r3, #0
   1b880:	bne	1b8b4 <__assert_fail@plt+0xa39c>
   1b884:	mov	r2, r4
   1b888:	mov	r1, r7
   1b88c:	add	r0, sp, #56	; 0x38
   1b890:	ldr	r8, [r5]
   1b894:	bl	1a614 <__assert_fail@plt+0x90fc>
   1b898:	ldr	r3, [sp, #56]	; 0x38
   1b89c:	cmp	r3, #0
   1b8a0:	str	r0, [r8, fp, lsl #2]
   1b8a4:	beq	1bb78 <__assert_fail@plt+0xa660>
   1b8a8:	mov	r0, r3
   1b8ac:	add	sp, sp, #92	; 0x5c
   1b8b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b8b4:	add	r0, sp, #88	; 0x58
   1b8b8:	mov	r3, #0
   1b8bc:	str	r3, [r0, #-28]!	; 0xffffffe4
   1b8c0:	mov	r2, r4
   1b8c4:	mov	r1, r7
   1b8c8:	bl	1a614 <__assert_fail@plt+0x90fc>
   1b8cc:	ldr	r8, [sp, #60]	; 0x3c
   1b8d0:	cmp	r8, #0
   1b8d4:	bne	1b8fc <__assert_fail@plt+0xa3e4>
   1b8d8:	mov	r9, r0
   1b8dc:	ldr	r3, [r9, #28]!
   1b8e0:	cmp	r3, #0
   1b8e4:	beq	1b93c <__assert_fail@plt+0xa424>
   1b8e8:	mov	r2, r9
   1b8ec:	ldr	r1, [sp, #8]
   1b8f0:	mov	r0, r4
   1b8f4:	bl	17874 <__assert_fail@plt+0x635c>
   1b8f8:	mov	r8, r0
   1b8fc:	cmp	r8, #0
   1b900:	str	r8, [sp, #56]	; 0x38
   1b904:	movne	r3, r8
   1b908:	bne	1b8a8 <__assert_fail@plt+0xa390>
   1b90c:	ldr	r3, [r5, #20]
   1b910:	cmp	r3, #0
   1b914:	strne	r8, [sp, #12]
   1b918:	ldrne	r3, [r6, #116]	; 0x74
   1b91c:	strne	r3, [sp, #16]
   1b920:	beq	1b884 <__assert_fail@plt+0xa36c>
   1b924:	ldr	r3, [r5, #20]
   1b928:	ldr	r2, [sp, #12]
   1b92c:	cmp	r2, r3
   1b930:	blt	1b99c <__assert_fail@plt+0xa484>
   1b934:	mov	r3, r8
   1b938:	b	1bb0c <__assert_fail@plt+0xa5f4>
   1b93c:	ldr	r1, [r4, #4]
   1b940:	mov	r0, r9
   1b944:	bl	159b0 <__assert_fail@plt+0x4498>
   1b948:	cmp	r0, #0
   1b94c:	str	r0, [sp, #60]	; 0x3c
   1b950:	moveq	r8, r0
   1b954:	moveq	sl, #12
   1b958:	beq	1b98c <__assert_fail@plt+0xa474>
   1b95c:	mov	r8, #12
   1b960:	b	1b8fc <__assert_fail@plt+0xa3e4>
   1b964:	ldr	r3, [r4, #8]
   1b968:	mov	r0, r9
   1b96c:	ldr	r1, [r3, r8, lsl #2]
   1b970:	ldr	r3, [r7, #28]
   1b974:	mla	r1, sl, r1, r3
   1b978:	bl	187d0 <__assert_fail@plt+0x72b8>
   1b97c:	cmp	r0, #0
   1b980:	str	r0, [sp, #60]	; 0x3c
   1b984:	bne	1b95c <__assert_fail@plt+0xa444>
   1b988:	add	r8, r8, #1
   1b98c:	ldr	r3, [r4, #4]
   1b990:	cmp	r8, r3
   1b994:	blt	1b964 <__assert_fail@plt+0xa44c>
   1b998:	b	1b8e8 <__assert_fail@plt+0xa3d0>
   1b99c:	ldr	r2, [sp, #12]
   1b9a0:	ldr	r3, [r5, #24]
   1b9a4:	ldr	r3, [r3, r2, lsl #2]
   1b9a8:	mov	r2, #24
   1b9ac:	mul	r3, r2, r3
   1b9b0:	ldr	r2, [sp, #16]
   1b9b4:	add	r2, r2, r3
   1b9b8:	ldr	r1, [r2, #8]
   1b9bc:	cmp	fp, r1
   1b9c0:	bgt	1b9d4 <__assert_fail@plt+0xa4bc>
   1b9c4:	ldr	r3, [sp, #12]
   1b9c8:	add	r3, r3, #1
   1b9cc:	str	r3, [sp, #12]
   1b9d0:	b	1b924 <__assert_fail@plt+0xa40c>
   1b9d4:	ldr	r1, [r2, #4]
   1b9d8:	cmp	fp, r1
   1b9dc:	bgt	1b9c4 <__assert_fail@plt+0xa4ac>
   1b9e0:	ldr	r1, [sp, #16]
   1b9e4:	ldr	r0, [r7]
   1b9e8:	ldr	r3, [r1, r3]
   1b9ec:	ldr	r9, [r0, r3, lsl #3]
   1b9f0:	ldr	r3, [r2, #12]
   1b9f4:	cmp	fp, r3
   1b9f8:	movne	sl, #0
   1b9fc:	bne	1bb40 <__assert_fail@plt+0xa628>
   1ba00:	mvn	sl, #0
   1ba04:	ldr	lr, [r4, #4]
   1ba08:	mov	r1, sl
   1ba0c:	mov	r2, #0
   1ba10:	cmp	r2, lr
   1ba14:	blt	1bab0 <__assert_fail@plt+0xa598>
   1ba18:	cmp	r1, #0
   1ba1c:	bge	1baf4 <__assert_fail@plt+0xa5dc>
   1ba20:	cmp	sl, #0
   1ba24:	movge	r9, #0
   1ba28:	blt	1b9c4 <__assert_fail@plt+0xa4ac>
   1ba2c:	ldr	r3, [r4, #4]
   1ba30:	cmp	r9, r3
   1ba34:	bge	1b9c4 <__assert_fail@plt+0xa4ac>
   1ba38:	ldr	r3, [r4, #8]
   1ba3c:	ldr	r0, [r7, #28]
   1ba40:	mov	r1, sl
   1ba44:	ldr	r3, [r3, r9, lsl #2]
   1ba48:	str	r3, [sp, #20]
   1ba4c:	ldr	r2, [sp, #20]
   1ba50:	mov	r3, #12
   1ba54:	mul	r3, r3, r2
   1ba58:	add	r0, r0, r3
   1ba5c:	str	r3, [sp, #24]
   1ba60:	bl	14f60 <__assert_fail@plt+0x3a48>
   1ba64:	cmp	r0, #0
   1ba68:	bne	1baa8 <__assert_fail@plt+0xa590>
   1ba6c:	ldr	r3, [sp, #24]
   1ba70:	ldr	r0, [r7, #24]
   1ba74:	mov	r1, sl
   1ba78:	add	r0, r0, r3
   1ba7c:	bl	14f60 <__assert_fail@plt+0x3a48>
   1ba80:	cmp	r0, #0
   1ba84:	bne	1baa8 <__assert_fail@plt+0xa590>
   1ba88:	ldr	r3, [sp, #8]
   1ba8c:	mov	r2, r4
   1ba90:	ldr	r1, [sp, #20]
   1ba94:	mov	r0, r7
   1ba98:	bl	17ed4 <__assert_fail@plt+0x69bc>
   1ba9c:	subs	r3, r0, #0
   1baa0:	bne	1bb0c <__assert_fail@plt+0xa5f4>
   1baa4:	sub	r9, r9, #1
   1baa8:	add	r9, r9, #1
   1baac:	b	1ba2c <__assert_fail@plt+0xa514>
   1bab0:	ldr	r3, [r4, #8]
   1bab4:	ldr	r3, [r3, r2, lsl #2]
   1bab8:	add	ip, r0, r3, lsl #3
   1babc:	ldrb	ip, [ip, #4]
   1bac0:	cmp	ip, #8
   1bac4:	bne	1badc <__assert_fail@plt+0xa5c4>
   1bac8:	ldr	ip, [r0, r3, lsl #3]
   1bacc:	cmp	r9, ip
   1bad0:	moveq	r1, r3
   1bad4:	add	r2, r2, #1
   1bad8:	b	1ba10 <__assert_fail@plt+0xa4f8>
   1badc:	cmp	ip, #9
   1bae0:	bne	1bad4 <__assert_fail@plt+0xa5bc>
   1bae4:	ldr	ip, [r0, r3, lsl #3]
   1bae8:	cmp	r9, ip
   1baec:	moveq	sl, r3
   1baf0:	b	1bad4 <__assert_fail@plt+0xa5bc>
   1baf4:	ldr	r3, [sp, #8]
   1baf8:	mov	r2, r4
   1bafc:	mov	r0, r7
   1bb00:	bl	17ed4 <__assert_fail@plt+0x69bc>
   1bb04:	subs	r3, r0, #0
   1bb08:	beq	1ba20 <__assert_fail@plt+0xa508>
   1bb0c:	cmp	r3, #0
   1bb10:	str	r3, [sp, #56]	; 0x38
   1bb14:	beq	1b884 <__assert_fail@plt+0xa36c>
   1bb18:	b	1b8a8 <__assert_fail@plt+0xa390>
   1bb1c:	ldr	r3, [r4, #8]
   1bb20:	ldr	r2, [r7]
   1bb24:	ldr	r1, [r3, sl, lsl #2]
   1bb28:	add	r3, r2, r1, lsl #3
   1bb2c:	ldrb	r3, [r3, #4]
   1bb30:	sub	r3, r3, #8
   1bb34:	cmp	r3, #1
   1bb38:	bls	1bb50 <__assert_fail@plt+0xa638>
   1bb3c:	add	sl, sl, #1
   1bb40:	ldr	r3, [r4, #4]
   1bb44:	cmp	sl, r3
   1bb48:	blt	1bb1c <__assert_fail@plt+0xa604>
   1bb4c:	b	1b9c4 <__assert_fail@plt+0xa4ac>
   1bb50:	ldr	r3, [r2, r1, lsl #3]
   1bb54:	cmp	r9, r3
   1bb58:	bne	1bb3c <__assert_fail@plt+0xa624>
   1bb5c:	ldr	r3, [sp, #8]
   1bb60:	mov	r2, r4
   1bb64:	mov	r0, r7
   1bb68:	bl	17ed4 <__assert_fail@plt+0x69bc>
   1bb6c:	subs	r3, r0, #0
   1bb70:	beq	1bb3c <__assert_fail@plt+0xa624>
   1bb74:	b	1bb0c <__assert_fail@plt+0xa5f4>
   1bb78:	ldr	r3, [sp, #8]
   1bb7c:	cmp	r3, #0
   1bb80:	beq	1bd50 <__assert_fail@plt+0xa838>
   1bb84:	ldr	r3, [r6, #100]	; 0x64
   1bb88:	ldr	r3, [r3, fp, lsl #2]
   1bb8c:	ldrb	r3, [r3, #52]	; 0x34
   1bb90:	ands	r3, r3, #64	; 0x40
   1bb94:	beq	1b8a8 <__assert_fail@plt+0xa390>
   1bb98:	mov	r1, fp
   1bb9c:	mov	r0, r6
   1bba0:	bl	15364 <__assert_fail@plt+0x3e4c>
   1bba4:	mov	sl, #0
   1bba8:	cmn	r0, #1
   1bbac:	mov	r3, r0
   1bbb0:	str	r0, [sp, #16]
   1bbb4:	moveq	r3, sl
   1bbb8:	beq	1b8a8 <__assert_fail@plt+0xa390>
   1bbbc:	mov	r3, #24
   1bbc0:	add	r9, sp, #88	; 0x58
   1bbc4:	mul	r3, r3, r0
   1bbc8:	ldr	r8, [r6, #84]	; 0x54
   1bbcc:	str	sl, [r9, #-28]!	; 0xffffffe4
   1bbd0:	str	r3, [sp, #36]	; 0x24
   1bbd4:	add	r3, r9, #16
   1bbd8:	str	r3, [sp, #28]
   1bbdc:	ldr	r3, [sp, #8]
   1bbe0:	ldr	r3, [r3, #4]
   1bbe4:	cmp	sl, r3
   1bbe8:	movge	r3, #0
   1bbec:	bge	1bd38 <__assert_fail@plt+0xa820>
   1bbf0:	ldr	r3, [sp, #8]
   1bbf4:	ldr	r2, [r5, #8]
   1bbf8:	ldr	r3, [r3, #8]
   1bbfc:	ldr	r7, [r3, sl, lsl #2]
   1bc00:	ldr	r3, [r8]
   1bc04:	cmp	r7, r2
   1bc08:	add	r3, r3, r7, lsl #3
   1bc0c:	ldrb	r3, [r3, #4]
   1bc10:	bne	1bc28 <__assert_fail@plt+0xa710>
   1bc14:	ldr	r2, [r5, #12]
   1bc18:	cmp	fp, r2
   1bc1c:	bne	1bc28 <__assert_fail@plt+0xa710>
   1bc20:	add	sl, sl, #1
   1bc24:	b	1bbdc <__assert_fail@plt+0xa6c4>
   1bc28:	cmp	r3, #4
   1bc2c:	bne	1bc20 <__assert_fail@plt+0xa708>
   1bc30:	ldr	r3, [sp, #36]	; 0x24
   1bc34:	ldr	r4, [r6, #116]	; 0x74
   1bc38:	add	r4, r4, r3
   1bc3c:	mov	r3, #12
   1bc40:	mul	r3, r3, r7
   1bc44:	str	r3, [sp, #44]	; 0x2c
   1bc48:	lsl	r3, r7, #2
   1bc4c:	str	r3, [sp, #40]	; 0x28
   1bc50:	ldr	r3, [sp, #36]	; 0x24
   1bc54:	str	r3, [sp, #20]
   1bc58:	ldr	r3, [sp, #16]
   1bc5c:	str	r3, [sp, #12]
   1bc60:	add	r3, r5, #16
   1bc64:	str	r3, [sp, #24]
   1bc68:	ldr	r3, [r4]
   1bc6c:	cmp	r7, r3
   1bc70:	bne	1bde8 <__assert_fail@plt+0xa8d0>
   1bc74:	ldr	r2, [r4, #8]
   1bc78:	ldr	r3, [r4, #12]
   1bc7c:	sub	r3, r3, r2
   1bc80:	cmp	r3, #0
   1bc84:	add	r2, fp, r3
   1bc88:	ldreq	r1, [sp, #44]	; 0x2c
   1bc8c:	ldreq	r3, [r8, #20]
   1bc90:	ldrne	r1, [sp, #40]	; 0x28
   1bc94:	addeq	r3, r3, r1
   1bc98:	ldrne	r3, [r8, #12]
   1bc9c:	ldreq	r3, [r3, #8]
   1bca0:	ldrne	r3, [r3, r1]
   1bca4:	ldr	r1, [r5, #12]
   1bca8:	ldreq	r3, [r3]
   1bcac:	cmp	r2, r1
   1bcb0:	bgt	1bde8 <__assert_fail@plt+0xa8d0>
   1bcb4:	ldr	r1, [r5]
   1bcb8:	str	r2, [sp, #52]	; 0x34
   1bcbc:	ldr	r0, [r1, r2, lsl #2]
   1bcc0:	cmp	r0, #0
   1bcc4:	beq	1bde8 <__assert_fail@plt+0xa8d0>
   1bcc8:	mov	r1, r3
   1bccc:	add	r0, r0, #4
   1bcd0:	str	r3, [sp, #48]	; 0x30
   1bcd4:	bl	14f60 <__assert_fail@plt+0x3a48>
   1bcd8:	ldr	r3, [sp, #48]	; 0x30
   1bcdc:	ldr	r2, [sp, #52]	; 0x34
   1bce0:	cmp	r0, #0
   1bce4:	beq	1bde8 <__assert_fail@plt+0xa8d0>
   1bce8:	str	r2, [sp, #4]
   1bcec:	str	r3, [sp]
   1bcf0:	mov	r2, r7
   1bcf4:	mov	r3, fp
   1bcf8:	ldr	r1, [sp, #24]
   1bcfc:	mov	r0, r6
   1bd00:	bl	153d4 <__assert_fail@plt+0x3ebc>
   1bd04:	cmp	r0, #0
   1bd08:	bne	1bde8 <__assert_fail@plt+0xa8d0>
   1bd0c:	ldr	r3, [sp, #60]	; 0x3c
   1bd10:	cmp	r3, #0
   1bd14:	beq	1bd58 <__assert_fail@plt+0xa840>
   1bd18:	ldr	r1, [sp, #12]
   1bd1c:	ldr	r0, [sp, #28]
   1bd20:	str	r7, [sp, #68]	; 0x44
   1bd24:	str	fp, [sp, #72]	; 0x48
   1bd28:	bl	183c8 <__assert_fail@plt+0x6eb0>
   1bd2c:	cmp	r0, #0
   1bd30:	bne	1bd8c <__assert_fail@plt+0xa874>
   1bd34:	mov	r3, #12
   1bd38:	ldr	r2, [sp, #60]	; 0x3c
   1bd3c:	cmp	r2, #0
   1bd40:	beq	1b8a8 <__assert_fail@plt+0xa390>
   1bd44:	ldr	r0, [sp, #84]	; 0x54
   1bd48:	str	r3, [sp, #8]
   1bd4c:	bl	130e8 <__assert_fail@plt+0x1bd0>
   1bd50:	ldr	r3, [sp, #8]
   1bd54:	b	1b8a8 <__assert_fail@plt+0xa390>
   1bd58:	mov	lr, r5
   1bd5c:	add	ip, sp, #60	; 0x3c
   1bd60:	ldm	lr!, {r0, r1, r2, r3}
   1bd64:	stmia	ip!, {r0, r1, r2, r3}
   1bd68:	ldr	r3, [sp, #24]
   1bd6c:	ldm	r3, {r0, r1, r2}
   1bd70:	stm	ip, {r0, r1, r2}
   1bd74:	mov	r1, r3
   1bd78:	mov	r0, ip
   1bd7c:	bl	179ec <__assert_fail@plt+0x64d4>
   1bd80:	subs	r3, r0, #0
   1bd84:	beq	1bd18 <__assert_fail@plt+0xa800>
   1bd88:	b	1bd38 <__assert_fail@plt+0xa820>
   1bd8c:	ldr	r3, [sp, #60]	; 0x3c
   1bd90:	ldr	r2, [sp, #32]
   1bd94:	mov	r1, r9
   1bd98:	mov	r0, r6
   1bd9c:	ldr	r4, [r3, r2]
   1bda0:	bl	1be34 <__assert_fail@plt+0xa91c>
   1bda4:	subs	r3, r0, #0
   1bda8:	bne	1bd38 <__assert_fail@plt+0xa820>
   1bdac:	ldr	r1, [r5, #4]
   1bdb0:	cmp	r1, #0
   1bdb4:	bne	1be18 <__assert_fail@plt+0xa900>
   1bdb8:	ldr	r3, [sp, #60]	; 0x3c
   1bdbc:	ldr	r2, [sp, #32]
   1bdc0:	ldr	r1, [sp, #12]
   1bdc4:	ldr	r0, [sp, #28]
   1bdc8:	str	r4, [r3, r2]
   1bdcc:	bl	14f60 <__assert_fail@plt+0x3a48>
   1bdd0:	sub	r1, r0, #1
   1bdd4:	ldr	r0, [sp, #28]
   1bdd8:	bl	1772c <__assert_fail@plt+0x6214>
   1bddc:	ldr	r4, [r6, #116]	; 0x74
   1bde0:	ldr	r3, [sp, #20]
   1bde4:	add	r4, r4, r3
   1bde8:	ldr	r3, [sp, #12]
   1bdec:	add	r2, r4, #24
   1bdf0:	add	r3, r3, #1
   1bdf4:	str	r3, [sp, #12]
   1bdf8:	ldr	r3, [sp, #20]
   1bdfc:	add	r3, r3, #24
   1be00:	str	r3, [sp, #20]
   1be04:	ldrb	r3, [r4, #20]
   1be08:	cmp	r3, #0
   1be0c:	beq	1bc20 <__assert_fail@plt+0xa708>
   1be10:	mov	r4, r2
   1be14:	b	1bc68 <__assert_fail@plt+0xa750>
   1be18:	add	r3, fp, #1
   1be1c:	ldr	r2, [sp, #60]	; 0x3c
   1be20:	mov	r0, r8
   1be24:	bl	1a7c4 <__assert_fail@plt+0x92ac>
   1be28:	subs	r3, r0, #0
   1be2c:	beq	1bdb8 <__assert_fail@plt+0xa8a0>
   1be30:	b	1bd38 <__assert_fail@plt+0xa820>
   1be34:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1be38:	sub	sp, sp, #52	; 0x34
   1be3c:	add	r7, sp, #36	; 0x24
   1be40:	ldr	r4, [r1, #12]
   1be44:	mov	r6, r0
   1be48:	mov	r5, r1
   1be4c:	mov	r0, r7
   1be50:	ldr	r1, [r1, #8]
   1be54:	bl	15970 <__assert_fail@plt+0x4458>
   1be58:	subs	fp, r0, #0
   1be5c:	bne	1be90 <__assert_fail@plt+0xa978>
   1be60:	mov	r3, r7
   1be64:	mov	r2, r4
   1be68:	mov	r1, r5
   1be6c:	mov	r0, r6
   1be70:	bl	1b824 <__assert_fail@plt+0xa30c>
   1be74:	subs	fp, r0, #0
   1be78:	lsleq	r8, r4, #2
   1be7c:	streq	fp, [sp, #8]
   1be80:	streq	r7, [sp, #20]
   1be84:	beq	1c054 <__assert_fail@plt+0xab3c>
   1be88:	ldr	r0, [sp, #44]	; 0x2c
   1be8c:	bl	130e8 <__assert_fail@plt+0x1bd0>
   1be90:	mov	r0, fp
   1be94:	add	sp, sp, #52	; 0x34
   1be98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1be9c:	mov	r3, #0
   1bea0:	str	r3, [sp, #40]	; 0x28
   1bea4:	ldr	r3, [r6, #100]	; 0x64
   1bea8:	sub	r4, r4, #1
   1beac:	add	r3, r3, r8
   1beb0:	ldr	sl, [r3, #-4]
   1beb4:	cmp	sl, #0
   1beb8:	bne	1bee4 <__assert_fail@plt+0xa9cc>
   1bebc:	ldr	r3, [sp, #20]
   1bec0:	mov	r2, r4
   1bec4:	mov	r1, r5
   1bec8:	mov	r0, r6
   1becc:	bl	1b824 <__assert_fail@plt+0xa30c>
   1bed0:	sub	r8, r8, #4
   1bed4:	cmp	r0, #0
   1bed8:	beq	1c054 <__assert_fail@plt+0xab3c>
   1bedc:	mov	fp, r0
   1bee0:	b	1be88 <__assert_fail@plt+0xa970>
   1bee4:	ldr	r9, [r6, #84]	; 0x54
   1bee8:	mov	r3, #0
   1beec:	str	r3, [sp, #12]
   1bef0:	add	r3, r5, #16
   1bef4:	str	r3, [sp, #28]
   1bef8:	ldr	r3, [sl, #20]
   1befc:	ldr	r2, [sp, #12]
   1bf00:	cmp	r2, r3
   1bf04:	bge	1bebc <__assert_fail@plt+0xa9a4>
   1bf08:	ldr	r3, [sl, #24]
   1bf0c:	ldr	r2, [sp, #12]
   1bf10:	ldr	r7, [r3, r2, lsl #2]
   1bf14:	lsl	r3, r7, #3
   1bf18:	str	r3, [sp, #16]
   1bf1c:	ldr	r3, [r9]
   1bf20:	lsl	r2, r7, #3
   1bf24:	add	r3, r3, r2
   1bf28:	ldrb	r3, [r3, #6]
   1bf2c:	tst	r3, #16
   1bf30:	bne	1bf64 <__assert_fail@plt+0xaa4c>
   1bf34:	ldr	r1, [r9]
   1bf38:	lsl	r3, r7, #3
   1bf3c:	mov	r2, r4
   1bf40:	add	r1, r1, r3
   1bf44:	mov	r0, r6
   1bf48:	bl	1923c <__assert_fail@plt+0x7d24>
   1bf4c:	cmp	r0, #0
   1bf50:	bne	1c024 <__assert_fail@plt+0xab0c>
   1bf54:	ldr	r3, [sp, #12]
   1bf58:	add	r3, r3, #1
   1bf5c:	str	r3, [sp, #12]
   1bf60:	b	1bef8 <__assert_fail@plt+0xa9e0>
   1bf64:	ldr	r3, [r5, #12]
   1bf68:	mov	r2, r6
   1bf6c:	str	r3, [sp, #24]
   1bf70:	ldr	r3, [r6, #84]	; 0x54
   1bf74:	mov	r1, r7
   1bf78:	str	r3, [sp, #16]
   1bf7c:	ldr	r0, [sp, #16]
   1bf80:	mov	r3, r4
   1bf84:	bl	17470 <__assert_fail@plt+0x5f58>
   1bf88:	subs	r3, r0, #0
   1bf8c:	ble	1bfd0 <__assert_fail@plt+0xaab8>
   1bf90:	ldr	r1, [sp, #24]
   1bf94:	add	r2, r4, r3
   1bf98:	cmp	r1, r2
   1bf9c:	blt	1bfd4 <__assert_fail@plt+0xaabc>
   1bfa0:	ldr	r1, [r5]
   1bfa4:	str	r3, [sp, #24]
   1bfa8:	ldr	r0, [r1, r2, lsl #2]
   1bfac:	cmp	r0, #0
   1bfb0:	beq	1bf34 <__assert_fail@plt+0xaa1c>
   1bfb4:	ldr	r3, [sp, #16]
   1bfb8:	add	r0, r0, #4
   1bfbc:	ldr	r2, [r3, #12]
   1bfc0:	ldr	r1, [r2, r7, lsl #2]
   1bfc4:	bl	14f60 <__assert_fail@plt+0x3a48>
   1bfc8:	ldr	r3, [sp, #24]
   1bfcc:	cmp	r0, #0
   1bfd0:	beq	1bf34 <__assert_fail@plt+0xaa1c>
   1bfd4:	ldr	r2, [r5, #20]
   1bfd8:	cmp	r2, #0
   1bfdc:	beq	1c008 <__assert_fail@plt+0xaaf0>
   1bfe0:	ldr	r2, [r9, #12]
   1bfe4:	add	r3, r4, r3
   1bfe8:	str	r4, [sp, #4]
   1bfec:	str	r7, [sp]
   1bff0:	ldr	r1, [sp, #28]
   1bff4:	ldr	r2, [r2, r7, lsl #2]
   1bff8:	mov	r0, r6
   1bffc:	bl	153d4 <__assert_fail@plt+0x3ebc>
   1c000:	cmp	r0, #0
   1c004:	bne	1bf54 <__assert_fail@plt+0xaa3c>
   1c008:	mov	r1, r7
   1c00c:	ldr	r0, [sp, #20]
   1c010:	bl	183c8 <__assert_fail@plt+0x6eb0>
   1c014:	cmp	r0, #0
   1c018:	bne	1bf54 <__assert_fail@plt+0xaa3c>
   1c01c:	mov	fp, #12
   1c020:	b	1be88 <__assert_fail@plt+0xa970>
   1c024:	ldr	r3, [r5]
   1c028:	ldr	r0, [r3, r8]
   1c02c:	cmp	r0, #0
   1c030:	beq	1bf54 <__assert_fail@plt+0xaa3c>
   1c034:	ldr	r3, [r9, #12]
   1c038:	add	r0, r0, #4
   1c03c:	ldr	r1, [r3, r7, lsl #2]
   1c040:	bl	14f60 <__assert_fail@plt+0x3a48>
   1c044:	cmp	r0, #0
   1c048:	beq	1bf54 <__assert_fail@plt+0xaa3c>
   1c04c:	mov	r3, #1
   1c050:	b	1bfd4 <__assert_fail@plt+0xaabc>
   1c054:	cmp	r4, #0
   1c058:	ble	1be88 <__assert_fail@plt+0xa970>
   1c05c:	ldr	r0, [r5]
   1c060:	ldr	r3, [r0, r8]
   1c064:	cmp	r3, #0
   1c068:	movne	r3, #0
   1c06c:	ldreq	r3, [sp, #8]
   1c070:	addeq	r3, r3, #1
   1c074:	str	r3, [sp, #8]
   1c078:	ldr	r2, [sp, #8]
   1c07c:	ldr	r3, [r6, #120]	; 0x78
   1c080:	cmp	r2, r3
   1c084:	ble	1be9c <__assert_fail@plt+0xa984>
   1c088:	mov	r2, r8
   1c08c:	mov	r1, #0
   1c090:	bl	1141c <memset@plt>
   1c094:	b	1be88 <__assert_fail@plt+0xa970>
   1c098:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c09c:	sub	sp, sp, #420	; 0x1a4
   1c0a0:	mov	sl, r0
   1c0a4:	ldr	fp, [r0]
   1c0a8:	str	r1, [sp, #32]
   1c0ac:	str	r2, [sp, #36]	; 0x24
   1c0b0:	mov	r1, #0
   1c0b4:	mov	r2, #136	; 0x88
   1c0b8:	add	r0, sp, #140	; 0x8c
   1c0bc:	mov	r5, r3
   1c0c0:	ldr	r8, [sp, #456]	; 0x1c8
   1c0c4:	ldr	r7, [sp, #460]	; 0x1cc
   1c0c8:	ldr	r6, [sp, #464]	; 0x1d0
   1c0cc:	ldr	r4, [sp, #468]	; 0x1d4
   1c0d0:	bl	1141c <memset@plt>
   1c0d4:	ldr	r2, [sl, #16]
   1c0d8:	str	fp, [sp, #224]	; 0xe0
   1c0dc:	cmp	r2, #0
   1c0e0:	streq	r2, [sp, #20]
   1c0e4:	beq	1c10c <__assert_fail@plt+0xabf4>
   1c0e8:	ldrb	r1, [sl, #28]
   1c0ec:	subs	r3, r5, r8
   1c0f0:	movne	r3, #1
   1c0f4:	ands	r3, r3, r1, lsr #3
   1c0f8:	beq	1c108 <__assert_fail@plt+0xabf0>
   1c0fc:	tst	r1, #1
   1c100:	moveq	r3, r2
   1c104:	movne	r3, #0
   1c108:	str	r3, [sp, #20]
   1c10c:	ldr	r3, [sl, #24]
   1c110:	cmp	r3, r6
   1c114:	subcc	r2, r6, #1
   1c118:	subcc	r3, r2, r3
   1c11c:	movcs	r3, #0
   1c120:	str	r3, [sp, #68]	; 0x44
   1c124:	ldr	r3, [sl, #8]
   1c128:	cmp	r3, #0
   1c12c:	beq	1c13c <__assert_fail@plt+0xac24>
   1c130:	ldr	r2, [fp, #36]	; 0x24
   1c134:	cmp	r2, #0
   1c138:	bne	1d270 <__assert_fail@plt+0xbd58>
   1c13c:	mov	r3, #1
   1c140:	str	r3, [sp, #12]
   1c144:	b	1ccfc <__assert_fail@plt+0xb7e4>
   1c148:	ldr	r3, [pc, #4028]	; 1d10c <__assert_fail@plt+0xbbf4>
   1c14c:	cmp	r7, r3
   1c150:	bgt	1c180 <__assert_fail@plt+0xac68>
   1c154:	mov	r0, #24
   1c158:	mul	r0, r0, r7
   1c15c:	bl	20bbc <__assert_fail@plt+0xf6a4>
   1c160:	str	r0, [sp, #256]	; 0x100
   1c164:	lsl	r0, r9, #3
   1c168:	bl	20bbc <__assert_fail@plt+0xf6a4>
   1c16c:	ldr	r3, [sp, #256]	; 0x100
   1c170:	cmp	r0, #0
   1c174:	cmpne	r3, #0
   1c178:	str	r0, [sp, #272]	; 0x110
   1c17c:	bne	1d430 <__assert_fail@plt+0xbf18>
   1c180:	mov	r3, #12
   1c184:	b	1c248 <__assert_fail@plt+0xad30>
   1c188:	ldr	r0, [sp, #176]	; 0xb0
   1c18c:	cmn	r0, #-1073741822	; 0xc0000002
   1c190:	bhi	1c180 <__assert_fail@plt+0xac68>
   1c194:	add	r0, r0, #1
   1c198:	lsl	r0, r0, #2
   1c19c:	bl	20bbc <__assert_fail@plt+0xf6a4>
   1c1a0:	cmp	r0, #0
   1c1a4:	str	r0, [sp, #240]	; 0xf0
   1c1a8:	bne	1d458 <__assert_fail@plt+0xbf40>
   1c1ac:	b	1c180 <__assert_fail@plt+0xac68>
   1c1b0:	ldr	r3, [sp, #92]	; 0x5c
   1c1b4:	cmp	r3, #1
   1c1b8:	moveq	r3, #4
   1c1bc:	beq	1c1e0 <__assert_fail@plt+0xacc8>
   1c1c0:	ldr	r3, [sl, #12]
   1c1c4:	ldr	r2, [sp, #24]
   1c1c8:	lsr	r3, r3, #22
   1c1cc:	eor	r3, r3, #1
   1c1d0:	cmp	r2, #0
   1c1d4:	movne	r3, #0
   1c1d8:	andeq	r3, r3, #1
   1c1dc:	lsl	r3, r3, #2
   1c1e0:	cmp	r5, r8
   1c1e4:	movle	r2, #2
   1c1e8:	movgt	r2, #0
   1c1ec:	orr	r6, r6, r3
   1c1f0:	orr	r3, r6, r2
   1c1f4:	cmp	r5, r8
   1c1f8:	str	r3, [sp, #84]	; 0x54
   1c1fc:	add	r3, sp, #416	; 0x1a0
   1c200:	suble	r3, r3, #308	; 0x134
   1c204:	movgt	r3, #0
   1c208:	str	r3, [sp, #88]	; 0x58
   1c20c:	adds	r3, r3, #0
   1c210:	movne	r3, #1
   1c214:	str	r3, [sp, #96]	; 0x60
   1c218:	ldr	r3, [sp, #108]	; 0x6c
   1c21c:	ldr	r2, [sp, #40]	; 0x28
   1c220:	cmp	r2, r3
   1c224:	ldr	r2, [sp, #60]	; 0x3c
   1c228:	movge	r5, #0
   1c22c:	movlt	r5, #1
   1c230:	cmp	r2, r3
   1c234:	orrgt	r5, r5, #1
   1c238:	cmp	r5, #0
   1c23c:	str	r5, [sp, #28]
   1c240:	beq	1c250 <__assert_fail@plt+0xad38>
   1c244:	mov	r3, #1
   1c248:	str	r3, [sp, #12]
   1c24c:	b	1ccc8 <__assert_fail@plt+0xb7b0>
   1c250:	ldr	r2, [sp, #84]	; 0x54
   1c254:	sub	r2, r2, #4
   1c258:	cmp	r2, #4
   1c25c:	ldrls	pc, [pc, r2, lsl #2]
   1c260:	b	1c618 <__assert_fail@plt+0xb100>
   1c264:	andeq	ip, r1, ip, lsr #6
   1c268:	andeq	ip, r1, ip, lsr #6
   1c26c:	andeq	ip, r1, ip, ror #5
   1c270:	andeq	ip, r1, r8, ror r2
   1c274:	andeq	ip, r1, r4, lsl #7
   1c278:	ldr	r2, [sp, #32]
   1c27c:	ldr	r1, [sp, #28]
   1c280:	add	r3, r2, r3
   1c284:	mov	ip, #1
   1c288:	ldr	r2, [sp, #32]
   1c28c:	ldr	r0, [sp, #40]	; 0x28
   1c290:	sub	r2, r3, r2
   1c294:	cmp	r0, r2
   1c298:	bgt	1c35c <__assert_fail@plt+0xae44>
   1c29c:	cmp	r1, #0
   1c2a0:	strne	r2, [sp, #108]	; 0x6c
   1c2a4:	ldr	r3, [sp, #108]	; 0x6c
   1c2a8:	ldr	r2, [sp, #40]	; 0x28
   1c2ac:	cmp	r2, r3
   1c2b0:	bne	1c384 <__assert_fail@plt+0xae6c>
   1c2b4:	ldr	r3, [sp, #36]	; 0x24
   1c2b8:	ldr	r2, [sp, #40]	; 0x28
   1c2bc:	cmp	r3, r2
   1c2c0:	movle	r3, #0
   1c2c4:	ldrgt	r3, [sp, #32]
   1c2c8:	ldrbgt	r3, [r3, r2]
   1c2cc:	ldr	r2, [sp, #24]
   1c2d0:	cmp	r2, #0
   1c2d4:	ldrbne	r3, [r2, r3]
   1c2d8:	ldr	r2, [sp, #20]
   1c2dc:	ldrb	r3, [r2, r3]
   1c2e0:	cmp	r3, #0
   1c2e4:	bne	1c384 <__assert_fail@plt+0xae6c>
   1c2e8:	b	1c244 <__assert_fail@plt+0xad2c>
   1c2ec:	ldr	r2, [sp, #32]
   1c2f0:	ldr	r1, [sp, #28]
   1c2f4:	add	r3, r2, r3
   1c2f8:	mov	ip, #1
   1c2fc:	ldr	r2, [sp, #32]
   1c300:	ldr	r0, [sp, #40]	; 0x28
   1c304:	sub	r2, r3, r2
   1c308:	cmp	r0, r2
   1c30c:	ble	1c29c <__assert_fail@plt+0xad84>
   1c310:	ldrb	r0, [r3], #1
   1c314:	ldr	lr, [sp, #20]
   1c318:	ldrb	r0, [lr, r0]
   1c31c:	cmp	r0, #0
   1c320:	bne	1c378 <__assert_fail@plt+0xae60>
   1c324:	mov	r1, ip
   1c328:	b	1c2fc <__assert_fail@plt+0xade4>
   1c32c:	ldr	r1, [sp, #28]
   1c330:	mov	ip, #0
   1c334:	mov	lr, #1
   1c338:	ldr	r2, [sp, #60]	; 0x3c
   1c33c:	mov	r0, r3
   1c340:	cmp	r3, r2
   1c344:	bge	1c5d0 <__assert_fail@plt+0xb0b8>
   1c348:	cmp	r1, #0
   1c34c:	strne	r3, [sp, #108]	; 0x6c
   1c350:	b	1c244 <__assert_fail@plt+0xad2c>
   1c354:	mov	r1, ip
   1c358:	b	1c288 <__assert_fail@plt+0xad70>
   1c35c:	ldrb	r0, [r3], #1
   1c360:	ldr	lr, [sp, #24]
   1c364:	ldrb	r0, [lr, r0]
   1c368:	ldr	lr, [sp, #20]
   1c36c:	ldrb	r0, [lr, r0]
   1c370:	cmp	r0, #0
   1c374:	beq	1c354 <__assert_fail@plt+0xae3c>
   1c378:	cmp	r1, #0
   1c37c:	strne	r2, [sp, #108]	; 0x6c
   1c380:	beq	1c2a4 <__assert_fail@plt+0xad8c>
   1c384:	ldr	r2, [sp, #472]	; 0x1d8
   1c388:	ldr	r1, [sp, #108]	; 0x6c
   1c38c:	add	r0, sp, #140	; 0x8c
   1c390:	bl	18bfc <__assert_fail@plt+0x76e4>
   1c394:	subs	r3, r0, #0
   1c398:	str	r3, [sp, #12]
   1c39c:	bne	1ccc8 <__assert_fail@plt+0xb7b0>
   1c3a0:	ldr	r3, [sp, #92]	; 0x5c
   1c3a4:	cmp	r3, #1
   1c3a8:	beq	1c3c8 <__assert_fail@plt+0xaeb0>
   1c3ac:	ldr	r3, [sp, #168]	; 0xa8
   1c3b0:	cmp	r3, #0
   1c3b4:	beq	1c3c8 <__assert_fail@plt+0xaeb0>
   1c3b8:	ldr	r3, [sp, #148]	; 0x94
   1c3bc:	ldr	r3, [r3]
   1c3c0:	cmn	r3, #1
   1c3c4:	beq	1c728 <__assert_fail@plt+0xb210>
   1c3c8:	ldr	r7, [sp, #224]	; 0xe0
   1c3cc:	mov	r3, #0
   1c3d0:	str	r3, [sp, #260]	; 0x104
   1c3d4:	ldr	r6, [r7, #36]	; 0x24
   1c3d8:	str	r3, [sp, #248]	; 0xf8
   1c3dc:	str	r3, [sp, #244]	; 0xf4
   1c3e0:	str	r3, [sp, #116]	; 0x74
   1c3e4:	ldrsb	r3, [r6, #52]	; 0x34
   1c3e8:	ldr	r5, [sp, #180]	; 0xb4
   1c3ec:	cmp	r3, #0
   1c3f0:	bge	1c458 <__assert_fail@plt+0xaf40>
   1c3f4:	ldr	r2, [sp, #228]	; 0xe4
   1c3f8:	sub	r1, r5, #1
   1c3fc:	add	r0, sp, #140	; 0x8c
   1c400:	bl	18b1c <__assert_fail@plt+0x7604>
   1c404:	tst	r0, #1
   1c408:	mov	r3, r0
   1c40c:	ldrne	r6, [r7, #40]	; 0x28
   1c410:	bne	1c458 <__assert_fail@plt+0xaf40>
   1c414:	cmp	r0, #0
   1c418:	beq	1c458 <__assert_fail@plt+0xaf40>
   1c41c:	and	r2, r0, #6
   1c420:	cmp	r2, #6
   1c424:	ldreq	r6, [r7, #48]	; 0x30
   1c428:	beq	1c458 <__assert_fail@plt+0xaf40>
   1c42c:	tst	r0, #2
   1c430:	ldrne	r6, [r7, #44]	; 0x2c
   1c434:	bne	1c458 <__assert_fail@plt+0xaf40>
   1c438:	tst	r0, #4
   1c43c:	beq	1c458 <__assert_fail@plt+0xaf40>
   1c440:	ldr	r2, [r6, #40]	; 0x28
   1c444:	mov	r1, r7
   1c448:	add	r0, sp, #116	; 0x74
   1c44c:	bl	17b9c <__assert_fail@plt+0x6684>
   1c450:	subs	r6, r0, #0
   1c454:	beq	1c180 <__assert_fail@plt+0xac68>
   1c458:	ldr	r3, [sp, #240]	; 0xf0
   1c45c:	cmp	r3, #0
   1c460:	beq	1c6d4 <__assert_fail@plt+0xb1bc>
   1c464:	str	r6, [r3, r5, lsl #2]
   1c468:	ldr	r3, [r7, #76]	; 0x4c
   1c46c:	cmp	r3, #0
   1c470:	beq	1c6d4 <__assert_fail@plt+0xb1bc>
   1c474:	add	r7, r6, #4
   1c478:	mov	r2, #0
   1c47c:	mov	r1, r7
   1c480:	add	r0, sp, #140	; 0x8c
   1c484:	bl	16910 <__assert_fail@plt+0x53f8>
   1c488:	cmp	r0, #0
   1c48c:	str	r0, [sp, #116]	; 0x74
   1c490:	bne	1c6cc <__assert_fail@plt+0xb1b4>
   1c494:	ldrb	r3, [r6, #52]	; 0x34
   1c498:	tst	r3, #64	; 0x40
   1c49c:	bne	1c6b4 <__assert_fail@plt+0xb19c>
   1c4a0:	ldr	r3, [sp, #28]
   1c4a4:	ldrb	r0, [r6, #52]	; 0x34
   1c4a8:	str	r3, [sp, #44]	; 0x2c
   1c4ac:	lsr	r0, r0, #4
   1c4b0:	ands	r0, r0, #1
   1c4b4:	bne	1c6dc <__assert_fail@plt+0xb1c4>
   1c4b8:	mvn	r3, #0
   1c4bc:	str	r0, [sp, #52]	; 0x34
   1c4c0:	str	r5, [sp, #72]	; 0x48
   1c4c4:	mov	r5, r3
   1c4c8:	ldr	r3, [sp, #88]	; 0x58
   1c4cc:	str	r3, [sp, #48]	; 0x30
   1c4d0:	ldr	r1, [sp, #180]	; 0xb4
   1c4d4:	ldr	r3, [sp, #196]	; 0xc4
   1c4d8:	cmp	r1, r3
   1c4dc:	bge	1c5a8 <__assert_fail@plt+0xb090>
   1c4e0:	add	r3, r1, #1
   1c4e4:	str	r3, [sp, #64]	; 0x40
   1c4e8:	ldr	r3, [sp, #176]	; 0xb0
   1c4ec:	add	r2, r1, #1
   1c4f0:	cmp	r2, r3
   1c4f4:	blt	1c504 <__assert_fail@plt+0xafec>
   1c4f8:	ldr	r2, [sp, #188]	; 0xbc
   1c4fc:	cmp	r3, r2
   1c500:	blt	1c520 <__assert_fail@plt+0xb008>
   1c504:	ldr	r3, [sp, #168]	; 0xa8
   1c508:	add	r2, r1, #1
   1c50c:	cmp	r2, r3
   1c510:	blt	1c538 <__assert_fail@plt+0xb020>
   1c514:	ldr	r2, [sp, #188]	; 0xbc
   1c518:	cmp	r3, r2
   1c51c:	bge	1c538 <__assert_fail@plt+0xb020>
   1c520:	add	r1, r1, #2
   1c524:	add	r0, sp, #140	; 0x8c
   1c528:	bl	16150 <__assert_fail@plt+0x4c38>
   1c52c:	cmp	r0, #0
   1c530:	str	r0, [sp, #116]	; 0x74
   1c534:	bne	1c180 <__assert_fail@plt+0xac68>
   1c538:	ldrb	r3, [r6, #52]	; 0x34
   1c53c:	tst	r3, #32
   1c540:	bne	1c73c <__assert_fail@plt+0xb224>
   1c544:	ldr	r3, [sp, #180]	; 0xb4
   1c548:	add	r2, r3, #1
   1c54c:	str	r2, [sp, #180]	; 0xb4
   1c550:	ldr	r2, [sp, #144]	; 0x90
   1c554:	ldrb	r8, [r2, r3]
   1c558:	ldr	r3, [r6, #44]	; 0x2c
   1c55c:	cmp	r3, #0
   1c560:	beq	1c900 <__assert_fail@plt+0xb3e8>
   1c564:	ldr	r7, [r3, r8, lsl #2]
   1c568:	ldr	r3, [sp, #240]	; 0xf0
   1c56c:	cmp	r3, #0
   1c570:	beq	1c588 <__assert_fail@plt+0xb070>
   1c574:	mov	r2, r7
   1c578:	add	r1, sp, #140	; 0x8c
   1c57c:	add	r0, sp, #116	; 0x74
   1c580:	bl	1b6f0 <__assert_fail@plt+0xa1d8>
   1c584:	mov	r7, r0
   1c588:	cmp	r7, #0
   1c58c:	bne	1c9d0 <__assert_fail@plt+0xb4b8>
   1c590:	ldr	r3, [sp, #116]	; 0x74
   1c594:	cmp	r3, #0
   1c598:	bne	1c180 <__assert_fail@plt+0xac68>
   1c59c:	ldr	r3, [sp, #240]	; 0xf0
   1c5a0:	cmp	r3, #0
   1c5a4:	bne	1c950 <__assert_fail@plt+0xb438>
   1c5a8:	ldr	r3, [sp, #48]	; 0x30
   1c5ac:	cmp	r3, #0
   1c5b0:	beq	1c718 <__assert_fail@plt+0xb200>
   1c5b4:	ldr	r3, [sp, #48]	; 0x30
   1c5b8:	ldr	r2, [sp, #72]	; 0x48
   1c5bc:	ldr	r3, [r3]
   1c5c0:	add	r3, r3, r2
   1c5c4:	ldr	r2, [sp, #48]	; 0x30
   1c5c8:	str	r3, [r2]
   1c5cc:	b	1c718 <__assert_fail@plt+0xb200>
   1c5d0:	ldr	r2, [sp, #36]	; 0x24
   1c5d4:	ldr	r5, [sp, #24]
   1c5d8:	cmp	r2, r3
   1c5dc:	movle	r2, ip
   1c5e0:	ldrgt	r2, [sp, #32]
   1c5e4:	ldrbgt	r2, [r2, r3]
   1c5e8:	cmp	r5, #0
   1c5ec:	sub	r3, r3, #1
   1c5f0:	ldrbne	r2, [r5, r2]
   1c5f4:	ldr	r5, [sp, #20]
   1c5f8:	ldrb	r2, [r5, r2]
   1c5fc:	cmp	r2, #0
   1c600:	beq	1c610 <__assert_fail@plt+0xb0f8>
   1c604:	cmp	r1, #0
   1c608:	strne	r0, [sp, #108]	; 0x6c
   1c60c:	b	1c384 <__assert_fail@plt+0xae6c>
   1c610:	mov	r1, lr
   1c614:	b	1c338 <__assert_fail@plt+0xae20>
   1c618:	mov	r6, #0
   1c61c:	ldr	r5, [sp, #108]	; 0x6c
   1c620:	ldr	r3, [sp, #164]	; 0xa4
   1c624:	ldr	r2, [sp, #172]	; 0xac
   1c628:	sub	r3, r5, r3
   1c62c:	cmp	r3, r2
   1c630:	bcc	1c658 <__assert_fail@plt+0xb140>
   1c634:	ldr	r2, [sp, #472]	; 0x1d8
   1c638:	mov	r1, r5
   1c63c:	add	r0, sp, #140	; 0x8c
   1c640:	bl	18bfc <__assert_fail@plt+0x76e4>
   1c644:	subs	r3, r0, #0
   1c648:	str	r3, [sp, #12]
   1c64c:	bne	1ccc8 <__assert_fail@plt+0xb7b0>
   1c650:	ldr	r3, [sp, #164]	; 0xa4
   1c654:	sub	r3, r5, r3
   1c658:	ldr	r2, [sp, #168]	; 0xa8
   1c65c:	cmp	r3, r2
   1c660:	movcs	r3, r6
   1c664:	ldrcc	r2, [sp, #144]	; 0x90
   1c668:	ldrbcc	r3, [r2, r3]
   1c66c:	ldr	r2, [sp, #20]
   1c670:	ldrb	r3, [r2, r3]
   1c674:	cmp	r3, #0
   1c678:	bne	1c384 <__assert_fail@plt+0xae6c>
   1c67c:	ldr	r3, [sp, #80]	; 0x50
   1c680:	ldr	r2, [sp, #60]	; 0x3c
   1c684:	add	r5, r3, r5
   1c688:	ldr	r3, [sp, #40]	; 0x28
   1c68c:	str	r5, [sp, #108]	; 0x6c
   1c690:	cmp	r3, r5
   1c694:	movge	r3, #0
   1c698:	movlt	r3, #1
   1c69c:	cmp	r2, r5
   1c6a0:	movle	r5, r3
   1c6a4:	orrgt	r5, r3, #1
   1c6a8:	cmp	r5, #0
   1c6ac:	beq	1c61c <__assert_fail@plt+0xb104>
   1c6b0:	b	1c244 <__assert_fail@plt+0xad2c>
   1c6b4:	mov	r1, r7
   1c6b8:	add	r0, sp, #140	; 0x8c
   1c6bc:	bl	1b0bc <__assert_fail@plt+0x9ba4>
   1c6c0:	cmp	r0, #0
   1c6c4:	str	r0, [sp, #116]	; 0x74
   1c6c8:	beq	1c4a0 <__assert_fail@plt+0xaf88>
   1c6cc:	mov	r5, r0
   1c6d0:	b	1c718 <__assert_fail@plt+0xb200>
   1c6d4:	ldr	r3, [sp, #96]	; 0x60
   1c6d8:	b	1c4a4 <__assert_fail@plt+0xaf8c>
   1c6dc:	ldrsb	r3, [r6, #52]	; 0x34
   1c6e0:	cmp	r3, #0
   1c6e4:	bge	1c700 <__assert_fail@plt+0xb1e8>
   1c6e8:	mov	r2, r5
   1c6ec:	mov	r1, r6
   1c6f0:	add	r0, sp, #140	; 0x8c
   1c6f4:	bl	19368 <__assert_fail@plt+0x7e50>
   1c6f8:	cmp	r0, #0
   1c6fc:	beq	1c4b8 <__assert_fail@plt+0xafa0>
   1c700:	ldr	r3, [sp, #56]	; 0x38
   1c704:	cmp	r3, #0
   1c708:	movne	r2, #1
   1c70c:	movne	r3, r5
   1c710:	strne	r2, [sp, #52]	; 0x34
   1c714:	bne	1c4c0 <__assert_fail@plt+0xafa8>
   1c718:	cmn	r5, #1
   1c71c:	bne	1ca64 <__assert_fail@plt+0xb54c>
   1c720:	add	r0, sp, #140	; 0x8c
   1c724:	bl	166ac <__assert_fail@plt+0x5194>
   1c728:	ldr	r3, [sp, #108]	; 0x6c
   1c72c:	ldr	r2, [sp, #80]	; 0x50
   1c730:	add	r3, r3, r2
   1c734:	str	r3, [sp, #108]	; 0x6c
   1c738:	b	1c218 <__assert_fail@plt+0xad00>
   1c73c:	ldr	r8, [sp, #224]	; 0xe0
   1c740:	mov	r9, #0
   1c744:	ldr	r3, [r6, #8]
   1c748:	cmp	r9, r3
   1c74c:	ldrge	r0, [sp, #12]
   1c750:	bge	1c8ec <__assert_fail@plt+0xb3d4>
   1c754:	ldr	r3, [r6, #12]
   1c758:	ldr	r3, [r3, r9, lsl #2]
   1c75c:	str	r3, [sp, #76]	; 0x4c
   1c760:	ldr	r2, [sp, #76]	; 0x4c
   1c764:	ldr	r3, [r8]
   1c768:	add	r3, r3, r2, lsl #3
   1c76c:	ldrb	r2, [r3, #6]
   1c770:	tst	r2, #16
   1c774:	beq	1c8c8 <__assert_fail@plt+0xb3b0>
   1c778:	ldr	r7, [r3, #4]
   1c77c:	ldr	r3, [pc, #2444]	; 1d110 <__assert_fail@plt+0xbbf8>
   1c780:	tst	r7, r3
   1c784:	beq	1c7e0 <__assert_fail@plt+0xb2c8>
   1c788:	ldr	r2, [sp, #228]	; 0xe4
   1c78c:	ldr	r1, [sp, #180]	; 0xb4
   1c790:	add	r0, sp, #140	; 0x8c
   1c794:	bl	18b1c <__assert_fail@plt+0x7604>
   1c798:	ldr	r3, [pc, #2420]	; 1d114 <__assert_fail@plt+0xbbfc>
   1c79c:	and	r3, r3, r7, lsr #8
   1c7a0:	tst	r3, #4
   1c7a4:	beq	1c7b0 <__assert_fail@plt+0xb298>
   1c7a8:	tst	r0, #1
   1c7ac:	beq	1c8c8 <__assert_fail@plt+0xb3b0>
   1c7b0:	tst	r3, #8
   1c7b4:	beq	1c7c0 <__assert_fail@plt+0xb2a8>
   1c7b8:	tst	r0, #1
   1c7bc:	bne	1c8c8 <__assert_fail@plt+0xb3b0>
   1c7c0:	tst	r3, #32
   1c7c4:	beq	1c7d0 <__assert_fail@plt+0xb2b8>
   1c7c8:	tst	r0, #2
   1c7cc:	beq	1c8c8 <__assert_fail@plt+0xb3b0>
   1c7d0:	tst	r3, #128	; 0x80
   1c7d4:	beq	1c7e0 <__assert_fail@plt+0xb2c8>
   1c7d8:	tst	r0, #8
   1c7dc:	beq	1c8c8 <__assert_fail@plt+0xb3b0>
   1c7e0:	ldr	r3, [sp, #180]	; 0xb4
   1c7e4:	add	r2, sp, #140	; 0x8c
   1c7e8:	ldr	r1, [sp, #76]	; 0x4c
   1c7ec:	mov	r0, r8
   1c7f0:	bl	17470 <__assert_fail@plt+0x5f58>
   1c7f4:	cmp	r0, #0
   1c7f8:	beq	1c8c8 <__assert_fail@plt+0xb3b0>
   1c7fc:	ldr	r7, [sp, #180]	; 0xb4
   1c800:	ldr	r3, [sp, #260]	; 0x104
   1c804:	add	r7, r0, r7
   1c808:	cmp	r3, r0
   1c80c:	strge	r3, [sp, #260]	; 0x104
   1c810:	strlt	r0, [sp, #260]	; 0x104
   1c814:	mov	r1, r7
   1c818:	add	r0, sp, #140	; 0x8c
   1c81c:	bl	16a14 <__assert_fail@plt+0x54fc>
   1c820:	cmp	r0, #0
   1c824:	str	r0, [sp, #128]	; 0x80
   1c828:	bne	1c8ec <__assert_fail@plt+0xb3d4>
   1c82c:	ldr	r3, [r8, #12]
   1c830:	ldr	r2, [sp, #76]	; 0x4c
   1c834:	mov	r1, #12
   1c838:	ldr	r2, [r3, r2, lsl #2]
   1c83c:	ldr	r3, [r8, #24]
   1c840:	mla	r2, r1, r2, r3
   1c844:	ldr	r3, [sp, #240]	; 0xf0
   1c848:	ldr	r3, [r3, r7, lsl #2]
   1c84c:	cmp	r3, #0
   1c850:	str	r3, [sp, #76]	; 0x4c
   1c854:	bne	1c8d0 <__assert_fail@plt+0xb3b8>
   1c858:	ldm	r2, {r0, r1, r2}
   1c85c:	add	r3, sp, #276	; 0x114
   1c860:	stm	r3, {r0, r1, r2}
   1c864:	sub	r1, r7, #1
   1c868:	ldr	r2, [sp, #228]	; 0xe4
   1c86c:	add	r0, sp, #140	; 0x8c
   1c870:	bl	18b1c <__assert_fail@plt+0x7604>
   1c874:	ldr	r3, [sp, #240]	; 0xf0
   1c878:	add	r2, sp, #276	; 0x114
   1c87c:	str	r3, [sp, #100]	; 0x64
   1c880:	mov	r1, r8
   1c884:	mov	r3, r0
   1c888:	add	r0, sp, #128	; 0x80
   1c88c:	bl	17b9c <__assert_fail@plt+0x6684>
   1c890:	ldr	r3, [sp, #100]	; 0x64
   1c894:	str	r0, [r3, r7, lsl #2]
   1c898:	ldr	r3, [sp, #76]	; 0x4c
   1c89c:	cmp	r3, #0
   1c8a0:	beq	1c8ac <__assert_fail@plt+0xb394>
   1c8a4:	ldr	r0, [sp, #284]	; 0x11c
   1c8a8:	bl	130e8 <__assert_fail@plt+0x1bd0>
   1c8ac:	ldr	r3, [sp, #240]	; 0xf0
   1c8b0:	ldr	r3, [r3, r7, lsl #2]
   1c8b4:	cmp	r3, #0
   1c8b8:	bne	1c8c8 <__assert_fail@plt+0xb3b0>
   1c8bc:	ldr	r0, [sp, #128]	; 0x80
   1c8c0:	cmp	r0, #0
   1c8c4:	bne	1c8ec <__assert_fail@plt+0xb3d4>
   1c8c8:	add	r9, r9, #1
   1c8cc:	b	1c744 <__assert_fail@plt+0xb22c>
   1c8d0:	ldr	r3, [sp, #76]	; 0x4c
   1c8d4:	add	r0, sp, #276	; 0x114
   1c8d8:	ldr	r1, [r3, #40]	; 0x28
   1c8dc:	bl	17a64 <__assert_fail@plt+0x654c>
   1c8e0:	cmp	r0, #0
   1c8e4:	str	r0, [sp, #128]	; 0x80
   1c8e8:	beq	1c864 <__assert_fail@plt+0xb34c>
   1c8ec:	cmp	r0, #0
   1c8f0:	str	r0, [sp, #116]	; 0x74
   1c8f4:	beq	1c544 <__assert_fail@plt+0xb02c>
   1c8f8:	mov	r7, #0
   1c8fc:	b	1c568 <__assert_fail@plt+0xb050>
   1c900:	ldr	r7, [r6, #48]	; 0x30
   1c904:	cmp	r7, #0
   1c908:	beq	1c930 <__assert_fail@plt+0xb418>
   1c90c:	ldr	r1, [sp, #180]	; 0xb4
   1c910:	ldr	r2, [sp, #228]	; 0xe4
   1c914:	sub	r1, r1, #1
   1c918:	add	r0, sp, #140	; 0x8c
   1c91c:	bl	18b1c <__assert_fail@plt+0x7604>
   1c920:	tst	r0, #1
   1c924:	addne	r8, r8, #256	; 0x100
   1c928:	ldr	r7, [r7, r8, lsl #2]
   1c92c:	b	1c568 <__assert_fail@plt+0xb050>
   1c930:	mov	r1, r6
   1c934:	ldr	r0, [sp, #224]	; 0xe0
   1c938:	bl	19d28 <__assert_fail@plt+0x8810>
   1c93c:	subs	r7, r0, #0
   1c940:	bne	1c558 <__assert_fail@plt+0xb040>
   1c944:	mov	r3, #12
   1c948:	str	r3, [sp, #116]	; 0x74
   1c94c:	b	1c568 <__assert_fail@plt+0xb050>
   1c950:	ldr	r3, [sp, #56]	; 0x38
   1c954:	eor	r8, r3, #1
   1c958:	ldr	r3, [sp, #52]	; 0x34
   1c95c:	ands	r8, r8, r3
   1c960:	bne	1c5a8 <__assert_fail@plt+0xb090>
   1c964:	mov	r9, #1
   1c968:	ldr	ip, [sp, #244]	; 0xf4
   1c96c:	ldr	r3, [sp, #180]	; 0xb4
   1c970:	ldr	r0, [sp, #240]	; 0xf0
   1c974:	mov	r2, r8
   1c978:	add	r1, r3, #1
   1c97c:	cmp	ip, r1
   1c980:	bge	1c990 <__assert_fail@plt+0xb478>
   1c984:	cmp	r2, #0
   1c988:	strne	r3, [sp, #180]	; 0xb4
   1c98c:	b	1c5a8 <__assert_fail@plt+0xb090>
   1c990:	mov	r3, r1
   1c994:	ldr	r1, [r0, r1, lsl #2]
   1c998:	mov	r2, r9
   1c99c:	cmp	r1, #0
   1c9a0:	beq	1c978 <__assert_fail@plt+0xb460>
   1c9a4:	mov	r2, #0
   1c9a8:	add	r1, sp, #140	; 0x8c
   1c9ac:	add	r0, sp, #116	; 0x74
   1c9b0:	str	r3, [sp, #180]	; 0xb4
   1c9b4:	bl	1b6f0 <__assert_fail@plt+0xa1d8>
   1c9b8:	ldr	r3, [sp, #116]	; 0x74
   1c9bc:	cmp	r3, #0
   1c9c0:	mov	r7, r0
   1c9c4:	bne	1ca58 <__assert_fail@plt+0xb540>
   1c9c8:	cmp	r0, #0
   1c9cc:	beq	1c968 <__assert_fail@plt+0xb450>
   1c9d0:	ldr	r3, [sp, #44]	; 0x2c
   1c9d4:	ldr	r2, [sp, #72]	; 0x48
   1c9d8:	cmp	r6, r7
   1c9dc:	movne	r3, #0
   1c9e0:	andeq	r3, r3, #1
   1c9e4:	str	r3, [sp, #44]	; 0x2c
   1c9e8:	ldr	r1, [sp, #44]	; 0x2c
   1c9ec:	ldr	r3, [sp, #64]	; 0x40
   1c9f0:	cmp	r1, #0
   1c9f4:	moveq	r3, r2
   1c9f8:	str	r3, [sp, #64]	; 0x40
   1c9fc:	ldrb	r3, [r7, #52]	; 0x34
   1ca00:	tst	r3, #16
   1ca04:	beq	1ca48 <__assert_fail@plt+0xb530>
   1ca08:	tst	r3, #128	; 0x80
   1ca0c:	beq	1ca28 <__assert_fail@plt+0xb510>
   1ca10:	ldr	r2, [sp, #180]	; 0xb4
   1ca14:	mov	r1, r7
   1ca18:	add	r0, sp, #140	; 0x8c
   1ca1c:	bl	19368 <__assert_fail@plt+0x7e50>
   1ca20:	cmp	r0, #0
   1ca24:	beq	1ca48 <__assert_fail@plt+0xb530>
   1ca28:	ldr	r3, [sp, #56]	; 0x38
   1ca2c:	ldr	r5, [sp, #180]	; 0xb4
   1ca30:	cmp	r3, #0
   1ca34:	beq	1c718 <__assert_fail@plt+0xb200>
   1ca38:	mov	r3, #1
   1ca3c:	str	r3, [sp, #52]	; 0x34
   1ca40:	mov	r3, #0
   1ca44:	str	r3, [sp, #48]	; 0x30
   1ca48:	ldr	r3, [sp, #64]	; 0x40
   1ca4c:	mov	r6, r7
   1ca50:	str	r3, [sp, #72]	; 0x48
   1ca54:	b	1c4d0 <__assert_fail@plt+0xafb8>
   1ca58:	cmp	r0, #0
   1ca5c:	bne	1c9d0 <__assert_fail@plt+0xb4b8>
   1ca60:	b	1c5a8 <__assert_fail@plt+0xb090>
   1ca64:	cmn	r5, #2
   1ca68:	beq	1c180 <__assert_fail@plt+0xac68>
   1ca6c:	ldrb	r6, [sl, #28]
   1ca70:	ldr	r3, [sp, #16]
   1ca74:	str	r5, [sp, #232]	; 0xe8
   1ca78:	lsr	r6, r6, #4
   1ca7c:	eor	r6, r6, #1
   1ca80:	cmp	r3, #1
   1ca84:	movls	r6, #0
   1ca88:	andhi	r6, r6, #1
   1ca8c:	cmp	r6, #0
   1ca90:	bne	1caa0 <__assert_fail@plt+0xb588>
   1ca94:	ldr	r3, [fp, #76]	; 0x4c
   1ca98:	cmp	r3, #0
   1ca9c:	beq	1cacc <__assert_fail@plt+0xb5b4>
   1caa0:	ldr	r3, [sp, #240]	; 0xf0
   1caa4:	mov	r2, r5
   1caa8:	add	r0, sp, #140	; 0x8c
   1caac:	ldr	r1, [r3, r5, lsl #2]
   1cab0:	bl	19368 <__assert_fail@plt+0x7e50>
   1cab4:	cmp	r6, #0
   1cab8:	str	r0, [sp, #236]	; 0xec
   1cabc:	beq	1cacc <__assert_fail@plt+0xb5b4>
   1cac0:	ldrb	r3, [fp, #88]	; 0x58
   1cac4:	tst	r3, #1
   1cac8:	bne	1cad8 <__assert_fail@plt+0xb5c0>
   1cacc:	ldr	r3, [fp, #76]	; 0x4c
   1cad0:	cmp	r3, #0
   1cad4:	beq	1ccb0 <__assert_fail@plt+0xb798>
   1cad8:	ldr	r3, [sp, #224]	; 0xe0
   1cadc:	cmn	r5, #-1073741822	; 0xc0000002
   1cae0:	str	r3, [sp, #48]	; 0x30
   1cae4:	ldr	r3, [sp, #236]	; 0xec
   1cae8:	str	r3, [sp, #44]	; 0x2c
   1caec:	bhi	1c180 <__assert_fail@plt+0xac68>
   1caf0:	add	r9, r5, #1
   1caf4:	lsl	r9, r9, #2
   1caf8:	mov	r0, r9
   1cafc:	bl	20bbc <__assert_fail@plt+0xf6a4>
   1cb00:	subs	r7, r0, #0
   1cb04:	beq	1cc74 <__assert_fail@plt+0xb75c>
   1cb08:	ldr	r3, [sp, #48]	; 0x30
   1cb0c:	ldr	r6, [r3, #76]	; 0x4c
   1cb10:	cmp	r6, #0
   1cb14:	beq	1cc04 <__assert_fail@plt+0xb6ec>
   1cb18:	mov	r0, r9
   1cb1c:	bl	20bbc <__assert_fail@plt+0xf6a4>
   1cb20:	subs	r6, r0, #0
   1cb24:	beq	1cc78 <__assert_fail@plt+0xb760>
   1cb28:	mov	r9, #0
   1cb2c:	add	r3, r5, #1
   1cb30:	mov	r1, r9
   1cb34:	lsl	r2, r3, #2
   1cb38:	mov	r0, r6
   1cb3c:	str	r3, [sp, #52]	; 0x34
   1cb40:	bl	1141c <memset@plt>
   1cb44:	ldr	r3, [sp, #44]	; 0x2c
   1cb48:	add	r1, sp, #276	; 0x114
   1cb4c:	add	r0, sp, #140	; 0x8c
   1cb50:	str	r3, [sp, #284]	; 0x11c
   1cb54:	str	r7, [sp, #276]	; 0x114
   1cb58:	str	r6, [sp, #280]	; 0x118
   1cb5c:	str	r5, [sp, #288]	; 0x120
   1cb60:	str	r9, [sp, #292]	; 0x124
   1cb64:	str	r9, [sp, #296]	; 0x128
   1cb68:	str	r9, [sp, #300]	; 0x12c
   1cb6c:	bl	1be34 <__assert_fail@plt+0xa91c>
   1cb70:	mov	r8, r0
   1cb74:	ldr	r0, [sp, #300]	; 0x12c
   1cb78:	bl	130e8 <__assert_fail@plt+0x1bd0>
   1cb7c:	cmp	r8, #0
   1cb80:	bne	1cc7c <__assert_fail@plt+0xb764>
   1cb84:	ldr	r3, [r7]
   1cb88:	cmp	r3, #0
   1cb8c:	bne	1cbd4 <__assert_fail@plt+0xb6bc>
   1cb90:	ldr	r3, [r6]
   1cb94:	cmp	r3, #0
   1cb98:	bne	1cbd4 <__assert_fail@plt+0xb6bc>
   1cb9c:	ldr	r2, [sp, #240]	; 0xf0
   1cba0:	subs	r5, r5, #1
   1cba4:	bcc	1cca8 <__assert_fail@plt+0xb790>
   1cba8:	ldr	r1, [r2, r5, lsl #2]
   1cbac:	cmp	r1, #0
   1cbb0:	beq	1cba0 <__assert_fail@plt+0xb688>
   1cbb4:	ldrb	r3, [r1, #52]	; 0x34
   1cbb8:	tst	r3, #16
   1cbbc:	beq	1cba0 <__assert_fail@plt+0xb688>
   1cbc0:	mov	r2, r5
   1cbc4:	add	r0, sp, #140	; 0x8c
   1cbc8:	bl	19368 <__assert_fail@plt+0x7e50>
   1cbcc:	str	r0, [sp, #44]	; 0x2c
   1cbd0:	b	1cb2c <__assert_fail@plt+0xb614>
   1cbd4:	add	r3, r5, #1
   1cbd8:	mov	r2, r6
   1cbdc:	mov	r1, r7
   1cbe0:	ldr	r0, [sp, #48]	; 0x30
   1cbe4:	bl	1a7c4 <__assert_fail@plt+0x92ac>
   1cbe8:	mov	r8, r0
   1cbec:	mov	r0, r6
   1cbf0:	bl	130e8 <__assert_fail@plt+0x1bd0>
   1cbf4:	cmp	r8, #0
   1cbf8:	beq	1cc50 <__assert_fail@plt+0xb738>
   1cbfc:	mov	r6, #0
   1cc00:	b	1cc7c <__assert_fail@plt+0xb764>
   1cc04:	ldr	r3, [sp, #44]	; 0x2c
   1cc08:	add	r1, sp, #276	; 0x114
   1cc0c:	add	r0, sp, #140	; 0x8c
   1cc10:	str	r3, [sp, #284]	; 0x11c
   1cc14:	str	r7, [sp, #276]	; 0x114
   1cc18:	str	r6, [sp, #280]	; 0x118
   1cc1c:	str	r5, [sp, #288]	; 0x120
   1cc20:	str	r6, [sp, #292]	; 0x124
   1cc24:	str	r6, [sp, #296]	; 0x128
   1cc28:	str	r6, [sp, #300]	; 0x12c
   1cc2c:	bl	1be34 <__assert_fail@plt+0xa91c>
   1cc30:	mov	r8, r0
   1cc34:	ldr	r0, [sp, #300]	; 0x12c
   1cc38:	bl	130e8 <__assert_fail@plt+0x1bd0>
   1cc3c:	cmp	r8, #0
   1cc40:	bne	1cc7c <__assert_fail@plt+0xb764>
   1cc44:	ldr	r2, [r7]
   1cc48:	cmp	r2, #0
   1cc4c:	beq	1cca4 <__assert_fail@plt+0xb78c>
   1cc50:	ldr	r0, [sp, #240]	; 0xf0
   1cc54:	bl	130e8 <__assert_fail@plt+0x1bd0>
   1cc58:	ldr	r3, [sp, #44]	; 0x2c
   1cc5c:	str	r7, [sp, #240]	; 0xf0
   1cc60:	str	r3, [sp, #236]	; 0xec
   1cc64:	str	r5, [sp, #232]	; 0xe8
   1cc68:	ldr	r8, [sp, #12]
   1cc6c:	mov	r7, #0
   1cc70:	b	1cbfc <__assert_fail@plt+0xb6e4>
   1cc74:	mov	r6, r7
   1cc78:	mov	r8, #12
   1cc7c:	mov	r0, r7
   1cc80:	bl	130e8 <__assert_fail@plt+0x1bd0>
   1cc84:	mov	r0, r6
   1cc88:	bl	130e8 <__assert_fail@plt+0x1bd0>
   1cc8c:	cmp	r8, #0
   1cc90:	beq	1ccb0 <__assert_fail@plt+0xb798>
   1cc94:	cmp	r8, #1
   1cc98:	beq	1c720 <__assert_fail@plt+0xb208>
   1cc9c:	str	r8, [sp, #12]
   1cca0:	b	1ccc8 <__assert_fail@plt+0xb7b0>
   1cca4:	mov	r6, r8
   1cca8:	mov	r8, #1
   1ccac:	b	1cc7c <__assert_fail@plt+0xb764>
   1ccb0:	ldr	r3, [sp, #16]
   1ccb4:	cmp	r3, #0
   1ccb8:	addne	r3, r4, #8
   1ccbc:	movne	r7, #1
   1ccc0:	mvnne	r2, #0
   1ccc4:	bne	1cd14 <__assert_fail@plt+0xb7fc>
   1ccc8:	ldr	r0, [sp, #240]	; 0xf0
   1cccc:	bl	130e8 <__assert_fail@plt+0x1bd0>
   1ccd0:	ldr	r3, [fp, #76]	; 0x4c
   1ccd4:	cmp	r3, #0
   1ccd8:	beq	1ccf4 <__assert_fail@plt+0xb7dc>
   1ccdc:	add	r0, sp, #140	; 0x8c
   1cce0:	bl	166ac <__assert_fail@plt+0x5194>
   1cce4:	ldr	r0, [sp, #272]	; 0x110
   1cce8:	bl	130e8 <__assert_fail@plt+0x1bd0>
   1ccec:	ldr	r0, [sp, #256]	; 0x100
   1ccf0:	bl	130e8 <__assert_fail@plt+0x1bd0>
   1ccf4:	add	r0, sp, #140	; 0x8c
   1ccf8:	bl	16520 <__assert_fail@plt+0x5008>
   1ccfc:	ldr	r0, [sp, #12]
   1cd00:	add	sp, sp, #420	; 0x1a4
   1cd04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cd08:	add	r7, r7, #1
   1cd0c:	str	r2, [r3, #-4]
   1cd10:	str	r2, [r3, #-8]
   1cd14:	ldr	r1, [sp, #16]
   1cd18:	add	r3, r3, #8
   1cd1c:	cmp	r7, r1
   1cd20:	bne	1cd08 <__assert_fail@plt+0xb7f0>
   1cd24:	mov	r3, #0
   1cd28:	str	r3, [r4]
   1cd2c:	ldr	r3, [sp, #232]	; 0xe8
   1cd30:	str	r3, [r4, #4]
   1cd34:	ldrb	r3, [sl, #28]
   1cd38:	lsr	r3, r3, #4
   1cd3c:	eor	r3, r3, #1
   1cd40:	cmp	r7, #1
   1cd44:	moveq	r3, #0
   1cd48:	andne	r3, r3, #1
   1cd4c:	cmp	r3, #0
   1cd50:	bne	1ce48 <__assert_fail@plt+0xb930>
   1cd54:	ldrb	r8, [sp, #216]	; 0xd8
   1cd58:	ldr	ip, [sp, #168]	; 0xa8
   1cd5c:	ldr	r5, [sp, #152]	; 0x98
   1cd60:	ldr	lr, [sp, #172]	; 0xac
   1cd64:	ldr	r6, [sp, #108]	; 0x6c
   1cd68:	mov	r1, r4
   1cd6c:	mov	r2, r4
   1cd70:	mov	r3, #0
   1cd74:	ldr	r0, [r4, r3, lsl #3]
   1cd78:	cmn	r0, #1
   1cd7c:	beq	1cdc4 <__assert_fail@plt+0xb8ac>
   1cd80:	cmp	r8, #0
   1cd84:	beq	1cdac <__assert_fail@plt+0xb894>
   1cd88:	cmp	r0, ip
   1cd8c:	moveq	r0, lr
   1cd90:	ldrne	r0, [r5, r0, lsl #2]
   1cd94:	str	r0, [r4, r3, lsl #3]
   1cd98:	ldr	r0, [r2, #4]
   1cd9c:	cmp	ip, r0
   1cda0:	moveq	r0, lr
   1cda4:	ldrne	r0, [r5, r0, lsl #2]
   1cda8:	str	r0, [r2, #4]
   1cdac:	ldr	r0, [r4, r3, lsl #3]
   1cdb0:	add	r0, r0, r6
   1cdb4:	str	r0, [r4, r3, lsl #3]
   1cdb8:	ldr	r0, [r2, #4]
   1cdbc:	add	r0, r0, r6
   1cdc0:	str	r0, [r2, #4]
   1cdc4:	add	r3, r3, #1
   1cdc8:	cmp	r7, r3
   1cdcc:	add	r2, r2, #8
   1cdd0:	bne	1cd74 <__assert_fail@plt+0xb85c>
   1cdd4:	ldr	r2, [sp, #16]
   1cdd8:	mvn	r0, #0
   1cddc:	add	r6, r4, r2, lsl #3
   1cde0:	mov	r2, #0
   1cde4:	ldr	ip, [sp, #68]	; 0x44
   1cde8:	add	r6, r6, #8
   1cdec:	cmp	r2, ip
   1cdf0:	blt	1d260 <__assert_fail@plt+0xbd48>
   1cdf4:	ldr	r2, [fp, #132]	; 0x84
   1cdf8:	cmp	r2, #0
   1cdfc:	movne	ip, #0
   1ce00:	beq	1ccc8 <__assert_fail@plt+0xb7b0>
   1ce04:	add	lr, ip, #1
   1ce08:	cmp	r3, lr
   1ce0c:	beq	1ccc8 <__assert_fail@plt+0xb7b0>
   1ce10:	ldr	r0, [r2]
   1ce14:	cmp	ip, r0
   1ce18:	beq	1ce38 <__assert_fail@plt+0xb920>
   1ce1c:	add	r0, r0, #1
   1ce20:	ldr	r0, [r4, r0, lsl #3]
   1ce24:	str	r0, [r1, #8]
   1ce28:	ldr	r0, [r2]
   1ce2c:	add	r0, r4, r0, lsl #3
   1ce30:	ldr	r0, [r0, #12]
   1ce34:	str	r0, [r1, #12]
   1ce38:	add	r2, r2, #4
   1ce3c:	add	r1, r1, #8
   1ce40:	mov	ip, lr
   1ce44:	b	1ce04 <__assert_fail@plt+0xb8ec>
   1ce48:	ldrb	r3, [fp, #88]	; 0x58
   1ce4c:	tst	r3, #1
   1ce50:	beq	1ce68 <__assert_fail@plt+0xb950>
   1ce54:	ldr	r5, [fp, #76]	; 0x4c
   1ce58:	cmp	r5, #0
   1ce5c:	movle	r3, #0
   1ce60:	movgt	r3, #1
   1ce64:	str	r3, [sp, #28]
   1ce68:	ldr	r3, [sl]
   1ce6c:	mov	r2, #2
   1ce70:	str	r3, [sp, #32]
   1ce74:	mov	r3, #0
   1ce78:	str	r3, [sp, #128]	; 0x80
   1ce7c:	str	r3, [sp, #136]	; 0x88
   1ce80:	str	r3, [sp, #276]	; 0x114
   1ce84:	mov	r3, #16
   1ce88:	str	r3, [sp, #280]	; 0x118
   1ce8c:	add	r3, sp, #288	; 0x120
   1ce90:	str	r3, [sp, #284]	; 0x11c
   1ce94:	ldr	r3, [sp, #28]
   1ce98:	str	r2, [sp, #132]	; 0x84
   1ce9c:	cmp	r3, #0
   1cea0:	beq	1cf48 <__assert_fail@plt+0xba30>
   1cea4:	mov	r0, #48	; 0x30
   1cea8:	bl	20bbc <__assert_fail@plt+0xf6a4>
   1ceac:	cmp	r0, #0
   1ceb0:	str	r0, [sp, #136]	; 0x88
   1ceb4:	addne	r5, sp, #128	; 0x80
   1ceb8:	beq	1c180 <__assert_fail@plt+0xac68>
   1cebc:	ldr	r3, [sp, #32]
   1cec0:	ldr	r2, [sp, #16]
   1cec4:	ldr	r6, [r3, #72]	; 0x48
   1cec8:	mov	r3, #0
   1cecc:	str	r3, [sp, #116]	; 0x74
   1ced0:	str	r3, [sp, #120]	; 0x78
   1ced4:	str	r3, [sp, #124]	; 0x7c
   1ced8:	ldr	r3, [sp, #276]	; 0x114
   1cedc:	cmp	r2, r3
   1cee0:	ldrls	r3, [sp, #16]
   1cee4:	strls	r3, [sp, #276]	; 0x114
   1cee8:	bls	1d4b4 <__assert_fail@plt+0xbf9c>
   1ceec:	add	r8, sp, #288	; 0x120
   1cef0:	mov	r3, #8
   1cef4:	mov	r2, r8
   1cef8:	ldr	r1, [sp, #16]
   1cefc:	add	r0, sp, #276	; 0x114
   1cf00:	bl	20cc8 <__assert_fail@plt+0xf7b0>
   1cf04:	cmp	r0, #0
   1cf08:	bne	1d4b4 <__assert_fail@plt+0xbf9c>
   1cf0c:	ldr	r0, [sp, #284]	; 0x11c
   1cf10:	cmp	r0, r8
   1cf14:	beq	1cf1c <__assert_fail@plt+0xba04>
   1cf18:	bl	130e8 <__assert_fail@plt+0x1bd0>
   1cf1c:	add	r3, sp, #288	; 0x120
   1cf20:	str	r3, [sp, #284]	; 0x11c
   1cf24:	mov	r3, #0
   1cf28:	str	r3, [sp, #276]	; 0x114
   1cf2c:	mvn	r3, #0
   1cf30:	str	r3, [sp, #280]	; 0x118
   1cf34:	add	r0, sp, #276	; 0x114
   1cf38:	bl	16740 <__assert_fail@plt+0x5228>
   1cf3c:	mov	r0, r5
   1cf40:	bl	16770 <__assert_fail@plt+0x5258>
   1cf44:	b	1c180 <__assert_fail@plt+0xac68>
   1cf48:	ldr	r5, [sp, #28]
   1cf4c:	b	1cebc <__assert_fail@plt+0xb9a4>
   1cf50:	cmp	ip, #9
   1cf54:	bne	1d53c <__assert_fail@plt+0xc024>
   1cf58:	ldr	r3, [r3, r1]
   1cf5c:	add	r3, r3, #1
   1cf60:	cmp	r7, r3
   1cf64:	ble	1d53c <__assert_fail@plt+0xc024>
   1cf68:	ldr	ip, [r4, r3, lsl #3]
   1cf6c:	add	r1, r4, r3, lsl #3
   1cf70:	cmp	r2, ip
   1cf74:	ble	1cf90 <__assert_fail@plt+0xba78>
   1cf78:	str	r2, [r1, #4]
   1cf7c:	ldr	r0, [sp, #20]
   1cf80:	ldr	r2, [sp, #24]
   1cf84:	mov	r1, r4
   1cf88:	bl	11248 <memcpy@plt>
   1cf8c:	b	1d53c <__assert_fail@plt+0xc024>
   1cf90:	ldrb	r0, [r0, #6]
   1cf94:	tst	r0, #8
   1cf98:	beq	1cfb8 <__assert_fail@plt+0xbaa0>
   1cf9c:	ldr	r0, [sp, #20]
   1cfa0:	ldr	r3, [r0, r3, lsl #3]
   1cfa4:	cmn	r3, #1
   1cfa8:	movne	r1, r0
   1cfac:	ldrne	r2, [sp, #24]
   1cfb0:	movne	r0, r4
   1cfb4:	bne	1cf88 <__assert_fail@plt+0xba70>
   1cfb8:	str	r2, [r1, #4]
   1cfbc:	b	1d53c <__assert_fail@plt+0xc024>
   1cfc0:	cmp	r5, #0
   1cfc4:	beq	1d014 <__assert_fail@plt+0xbafc>
   1cfc8:	mov	r2, r4
   1cfcc:	mov	r3, #0
   1cfd0:	ldr	r1, [r4, r3, lsl #3]
   1cfd4:	cmp	r1, #0
   1cfd8:	blt	1d03c <__assert_fail@plt+0xbb24>
   1cfdc:	ldr	r1, [r2, #4]
   1cfe0:	cmn	r1, #1
   1cfe4:	bne	1d03c <__assert_fail@plt+0xbb24>
   1cfe8:	add	r3, sp, #116	; 0x74
   1cfec:	str	r3, [sp, #4]
   1cff0:	ldr	r3, [sp, #20]
   1cff4:	mov	r2, r7
   1cff8:	str	r3, [sp]
   1cffc:	ldr	r1, [sp, #28]
   1d000:	mov	r3, r4
   1d004:	mov	r0, r5
   1d008:	bl	16aa0 <__assert_fail@plt+0x5588>
   1d00c:	subs	r6, r0, #0
   1d010:	bge	1d574 <__assert_fail@plt+0xc05c>
   1d014:	ldr	r0, [sp, #124]	; 0x7c
   1d018:	bl	130e8 <__assert_fail@plt+0x1bd0>
   1d01c:	add	r0, sp, #276	; 0x114
   1d020:	bl	16740 <__assert_fail@plt+0x5228>
   1d024:	mov	r0, r5
   1d028:	bl	16770 <__assert_fail@plt+0x5258>
   1d02c:	cmp	r0, #0
   1d030:	beq	1cd54 <__assert_fail@plt+0xb83c>
   1d034:	str	r0, [sp, #12]
   1d038:	b	1ccc8 <__assert_fail@plt+0xb7b0>
   1d03c:	add	r3, r3, #1
   1d040:	cmp	r7, r3
   1d044:	add	r2, r2, #8
   1d048:	bne	1cfd0 <__assert_fail@plt+0xbab8>
   1d04c:	b	1d014 <__assert_fail@plt+0xbafc>
   1d050:	mov	r1, r6
   1d054:	add	r0, sp, #116	; 0x74
   1d058:	bl	183c8 <__assert_fail@plt+0x6eb0>
   1d05c:	cmp	r0, #0
   1d060:	bne	1d5c4 <__assert_fail@plt+0xc0ac>
   1d064:	ldr	r0, [sp, #124]	; 0x7c
   1d068:	bl	130e8 <__assert_fail@plt+0x1bd0>
   1d06c:	b	1cf34 <__assert_fail@plt+0xba1c>
   1d070:	mov	r6, r8
   1d074:	add	r3, r3, #1
   1d078:	b	1d5d0 <__assert_fail@plt+0xc0b8>
   1d07c:	ldrb	r1, [r1, #6]
   1d080:	tst	r1, #16
   1d084:	beq	1d118 <__assert_fail@plt+0xbc00>
   1d088:	ldr	r3, [sp, #112]	; 0x70
   1d08c:	add	r2, sp, #140	; 0x8c
   1d090:	mov	r1, r6
   1d094:	mov	r0, r8
   1d098:	bl	17470 <__assert_fail@plt+0x5f58>
   1d09c:	subs	r3, r0, #0
   1d0a0:	bne	1d1f8 <__assert_fail@plt+0xbce0>
   1d0a4:	ldr	r1, [r8]
   1d0a8:	ldr	r2, [sp, #112]	; 0x70
   1d0ac:	add	r1, r1, r9
   1d0b0:	add	r0, sp, #140	; 0x8c
   1d0b4:	bl	1923c <__assert_fail@plt+0x7d24>
   1d0b8:	cmp	r0, #0
   1d0bc:	movne	r3, #0
   1d0c0:	bne	1d1f8 <__assert_fail@plt+0xbce0>
   1d0c4:	add	r3, sp, #116	; 0x74
   1d0c8:	str	r3, [sp, #4]
   1d0cc:	ldr	r3, [sp, #20]
   1d0d0:	mov	r2, r7
   1d0d4:	str	r3, [sp]
   1d0d8:	ldr	r1, [sp, #28]
   1d0dc:	mov	r3, r4
   1d0e0:	mov	r0, r5
   1d0e4:	bl	16aa0 <__assert_fail@plt+0x5588>
   1d0e8:	subs	r6, r0, #0
   1d0ec:	bge	1d4f4 <__assert_fail@plt+0xbfdc>
   1d0f0:	ldr	r0, [sp, #124]	; 0x7c
   1d0f4:	bl	130e8 <__assert_fail@plt+0x1bd0>
   1d0f8:	add	r0, sp, #276	; 0x114
   1d0fc:	bl	16740 <__assert_fail@plt+0x5228>
   1d100:	mov	r0, r5
   1d104:	bl	16770 <__assert_fail@plt+0x5258>
   1d108:	b	1c244 <__assert_fail@plt+0xad2c>
   1d10c:	beq	feac7bbc <opterr@@GLIBC_2.4+0xfea94a0c>
   1d110:	andeq	pc, r3, r0, lsl #30
   1d114:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   1d118:	cmp	r2, #4
   1d11c:	bne	1d0a4 <__assert_fail@plt+0xbb8c>
   1d120:	ldr	r3, [r3, r9]
   1d124:	add	r3, r3, #1
   1d128:	cmp	r7, r3
   1d12c:	ble	1d154 <__assert_fail@plt+0xbc3c>
   1d130:	add	r2, r4, r3, lsl #3
   1d134:	ldr	r0, [r4, r3, lsl #3]
   1d138:	ldr	r2, [r2, #4]
   1d13c:	cmp	r5, #0
   1d140:	sub	r3, r2, r0
   1d144:	bne	1d1a8 <__assert_fail@plt+0xbc90>
   1d148:	cmp	r3, #0
   1d14c:	bne	1d1f8 <__assert_fail@plt+0xbce0>
   1d150:	b	1d15c <__assert_fail@plt+0xbc44>
   1d154:	cmp	r5, #0
   1d158:	bne	1d0c4 <__assert_fail@plt+0xbbac>
   1d15c:	mov	r1, r6
   1d160:	add	r0, sp, #116	; 0x74
   1d164:	bl	183c8 <__assert_fail@plt+0x6eb0>
   1d168:	cmp	r0, #0
   1d16c:	beq	1d064 <__assert_fail@plt+0xbb4c>
   1d170:	ldr	r2, [r8, #20]
   1d174:	mov	r3, #12
   1d178:	mla	r6, r3, r6, r2
   1d17c:	ldr	r2, [sp, #112]	; 0x70
   1d180:	ldr	r3, [r6, #8]
   1d184:	ldr	r6, [r3]
   1d188:	ldr	r3, [sp, #240]	; 0xf0
   1d18c:	mov	r1, r6
   1d190:	ldr	r0, [r3, r2, lsl #2]
   1d194:	add	r0, r0, #4
   1d198:	bl	14f60 <__assert_fail@plt+0x3a48>
   1d19c:	cmp	r0, #0
   1d1a0:	beq	1d0a4 <__assert_fail@plt+0xbb8c>
   1d1a4:	b	1d6f0 <__assert_fail@plt+0xc1d8>
   1d1a8:	cmn	r0, #1
   1d1ac:	beq	1d0c4 <__assert_fail@plt+0xbbac>
   1d1b0:	cmn	r2, #1
   1d1b4:	beq	1d0c4 <__assert_fail@plt+0xbbac>
   1d1b8:	cmp	r3, #0
   1d1bc:	beq	1d15c <__assert_fail@plt+0xbc44>
   1d1c0:	ldr	r1, [sp, #112]	; 0x70
   1d1c4:	ldr	r2, [sp, #168]	; 0xa8
   1d1c8:	ldr	ip, [sp, #144]	; 0x90
   1d1cc:	sub	r2, r2, r1
   1d1d0:	cmp	r3, r2
   1d1d4:	bgt	1d0c4 <__assert_fail@plt+0xbbac>
   1d1d8:	mov	r2, r3
   1d1dc:	add	r1, ip, r1
   1d1e0:	add	r0, ip, r0
   1d1e4:	str	r3, [sp, #40]	; 0x28
   1d1e8:	bl	11290 <memcmp@plt>
   1d1ec:	ldr	r3, [sp, #40]	; 0x28
   1d1f0:	cmp	r0, #0
   1d1f4:	bne	1d0c4 <__assert_fail@plt+0xbbac>
   1d1f8:	ldr	r2, [r8, #12]
   1d1fc:	cmp	r3, #0
   1d200:	ldr	r6, [r2, sl, lsl #2]
   1d204:	ldr	r2, [sp, #112]	; 0x70
   1d208:	addeq	r3, r2, #1
   1d20c:	addne	r3, r3, r2
   1d210:	cmp	r5, #0
   1d214:	str	r3, [sp, #112]	; 0x70
   1d218:	beq	1d24c <__assert_fail@plt+0xbd34>
   1d21c:	ldr	r2, [sp, #232]	; 0xe8
   1d220:	cmp	r3, r2
   1d224:	bgt	1d0c4 <__assert_fail@plt+0xbbac>
   1d228:	ldr	r2, [sp, #240]	; 0xf0
   1d22c:	ldr	r0, [r2, r3, lsl #2]
   1d230:	cmp	r0, #0
   1d234:	beq	1d0c4 <__assert_fail@plt+0xbbac>
   1d238:	mov	r1, r6
   1d23c:	add	r0, r0, #4
   1d240:	bl	14f60 <__assert_fail@plt+0x3a48>
   1d244:	cmp	r0, #0
   1d248:	beq	1d0c4 <__assert_fail@plt+0xbbac>
   1d24c:	mov	r3, #0
   1d250:	str	r3, [sp, #120]	; 0x78
   1d254:	b	1d6f0 <__assert_fail@plt+0xc1d8>
   1d258:	mov	r6, r8
   1d25c:	b	1d6f0 <__assert_fail@plt+0xc1d8>
   1d260:	str	r0, [r6, #-8]
   1d264:	str	r0, [r6, #-4]
   1d268:	add	r2, r2, #1
   1d26c:	b	1cde4 <__assert_fail@plt+0xb8cc>
   1d270:	ldr	r3, [fp, #40]	; 0x28
   1d274:	cmp	r3, #0
   1d278:	beq	1c13c <__assert_fail@plt+0xac24>
   1d27c:	ldr	r1, [fp, #44]	; 0x2c
   1d280:	cmp	r1, #0
   1d284:	beq	1c13c <__assert_fail@plt+0xac24>
   1d288:	ldr	r0, [fp, #48]	; 0x30
   1d28c:	cmp	r0, #0
   1d290:	beq	1c13c <__assert_fail@plt+0xac24>
   1d294:	ldr	r2, [r2, #8]
   1d298:	cmp	r2, #0
   1d29c:	bne	1d2dc <__assert_fail@plt+0xbdc4>
   1d2a0:	ldr	r3, [r3, #8]
   1d2a4:	cmp	r3, #0
   1d2a8:	bne	1d2dc <__assert_fail@plt+0xbdc4>
   1d2ac:	ldr	r3, [r1, #8]
   1d2b0:	cmp	r3, #0
   1d2b4:	beq	1d2c4 <__assert_fail@plt+0xbdac>
   1d2b8:	ldrsb	r3, [sl, #28]
   1d2bc:	cmp	r3, #0
   1d2c0:	blt	1d2dc <__assert_fail@plt+0xbdc4>
   1d2c4:	cmp	r5, #0
   1d2c8:	cmpne	r8, #0
   1d2cc:	movne	r8, #1
   1d2d0:	moveq	r8, #0
   1d2d4:	bne	1c13c <__assert_fail@plt+0xac24>
   1d2d8:	mov	r5, r8
   1d2dc:	ldr	r3, [sp, #68]	; 0x44
   1d2e0:	subs	r3, r6, r3
   1d2e4:	str	r3, [sp, #16]
   1d2e8:	movne	r3, #1
   1d2ec:	bne	1d2fc <__assert_fail@plt+0xbde4>
   1d2f0:	ldr	r3, [fp, #76]	; 0x4c
   1d2f4:	adds	r3, r3, #0
   1d2f8:	movne	r3, #1
   1d2fc:	ldr	ip, [sp, #32]
   1d300:	str	r3, [sp, #56]	; 0x38
   1d304:	ldr	r3, [sl, #20]
   1d308:	ldr	r2, [fp, #8]
   1d30c:	str	ip, [sp, #140]	; 0x8c
   1d310:	ldr	ip, [sp, #36]	; 0x24
   1d314:	ldr	r0, [fp, #92]	; 0x5c
   1d318:	str	r3, [sp, #24]
   1d31c:	ldr	r3, [sl, #12]
   1d320:	add	r2, r2, #1
   1d324:	str	ip, [sp, #188]	; 0xbc
   1d328:	str	ip, [sp, #184]	; 0xb8
   1d32c:	ldr	ip, [sp, #24]
   1d330:	cmp	r2, r0
   1d334:	movlt	r2, r0
   1d338:	lsr	r3, r3, #22
   1d33c:	adds	r6, ip, #0
   1d340:	and	r3, r3, #1
   1d344:	movne	r6, #1
   1d348:	strb	r3, [sp, #212]	; 0xd4
   1d34c:	orr	r3, r3, r6
   1d350:	strb	r3, [sp, #215]	; 0xd7
   1d354:	ldrb	r3, [fp, #88]	; 0x58
   1d358:	ldr	r1, [sp, #36]	; 0x24
   1d35c:	str	r0, [sp, #220]	; 0xdc
   1d360:	add	r1, r1, #1
   1d364:	lsr	r0, r3, #2
   1d368:	lsr	r3, r3, #3
   1d36c:	and	r3, r3, #1
   1d370:	cmp	r2, r1
   1d374:	and	r0, r0, #1
   1d378:	strb	r3, [sp, #214]	; 0xd6
   1d37c:	ldr	r3, [sp, #36]	; 0x24
   1d380:	strb	r0, [sp, #213]	; 0xd5
   1d384:	movlt	r1, r2
   1d388:	add	r0, sp, #140	; 0x8c
   1d38c:	str	r3, [sp, #196]	; 0xc4
   1d390:	str	r3, [sp, #192]	; 0xc0
   1d394:	str	ip, [sp, #204]	; 0xcc
   1d398:	bl	1557c <__assert_fail@plt+0x4064>
   1d39c:	subs	r3, r0, #0
   1d3a0:	str	r3, [sp, #12]
   1d3a4:	bne	1ccc8 <__assert_fail@plt+0xb7b0>
   1d3a8:	add	r3, fp, #96	; 0x60
   1d3ac:	str	r3, [sp, #208]	; 0xd0
   1d3b0:	ldrb	r3, [fp, #88]	; 0x58
   1d3b4:	lsr	r3, r3, #4
   1d3b8:	and	r3, r3, #1
   1d3bc:	strb	r3, [sp, #218]	; 0xda
   1d3c0:	ldrb	r3, [sp, #215]	; 0xd7
   1d3c4:	cmp	r3, #0
   1d3c8:	ldrne	r2, [sp, #144]	; 0x90
   1d3cc:	ldreq	r2, [sp, #32]
   1d3d0:	cmp	r3, #0
   1d3d4:	str	r2, [sp, #144]	; 0x90
   1d3d8:	movne	r3, #0
   1d3dc:	bne	1d3f4 <__assert_fail@plt+0xbedc>
   1d3e0:	ldr	r3, [fp, #92]	; 0x5c
   1d3e4:	ldr	r2, [sp, #36]	; 0x24
   1d3e8:	cmp	r3, #1
   1d3ec:	movgt	r2, #0
   1d3f0:	mov	r3, r2
   1d3f4:	str	r3, [sp, #168]	; 0xa8
   1d3f8:	str	r3, [sp, #172]	; 0xac
   1d3fc:	ldrb	r3, [sl, #28]
   1d400:	str	r7, [sp, #196]	; 0xc4
   1d404:	str	r7, [sp, #192]	; 0xc0
   1d408:	lsr	r3, r3, #7
   1d40c:	strb	r3, [sp, #217]	; 0xd9
   1d410:	ldr	r9, [fp, #76]	; 0x4c
   1d414:	ldr	r3, [sp, #472]	; 0x1d8
   1d418:	lsl	r7, r9, #1
   1d41c:	str	r3, [sp, #228]	; 0xe4
   1d420:	cmp	r7, #0
   1d424:	mvn	r3, #0
   1d428:	str	r3, [sp, #232]	; 0xe8
   1d42c:	bgt	1c148 <__assert_fail@plt+0xac30>
   1d430:	mov	r3, #1
   1d434:	str	r3, [sp, #260]	; 0x104
   1d438:	ldr	r3, [sp, #16]
   1d43c:	str	r7, [sp, #252]	; 0xfc
   1d440:	cmp	r3, #1
   1d444:	str	r7, [sp, #268]	; 0x10c
   1d448:	bhi	1c188 <__assert_fail@plt+0xac70>
   1d44c:	ldrb	r3, [fp, #88]	; 0x58
   1d450:	tst	r3, #2
   1d454:	bne	1c188 <__assert_fail@plt+0xac70>
   1d458:	ldr	r3, [sp, #472]	; 0x1d8
   1d45c:	str	r5, [sp, #108]	; 0x6c
   1d460:	tst	r3, #1
   1d464:	moveq	r3, #6
   1d468:	movne	r3, #4
   1d46c:	cmp	r5, r8
   1d470:	str	r3, [sp, #200]	; 0xc8
   1d474:	movle	r3, #1
   1d478:	mvngt	r3, #0
   1d47c:	str	r3, [sp, #80]	; 0x50
   1d480:	movlt	r3, r5
   1d484:	movge	r3, r8
   1d488:	str	r3, [sp, #60]	; 0x3c
   1d48c:	movge	r3, r5
   1d490:	movlt	r3, r8
   1d494:	str	r3, [sp, #40]	; 0x28
   1d498:	ldr	r3, [fp, #92]	; 0x5c
   1d49c:	str	r3, [sp, #92]	; 0x5c
   1d4a0:	ldr	r3, [sp, #20]
   1d4a4:	cmp	r3, #0
   1d4a8:	bne	1c1b0 <__assert_fail@plt+0xac98>
   1d4ac:	mov	r3, #8
   1d4b0:	b	1c1f4 <__assert_fail@plt+0xacdc>
   1d4b4:	ldr	r3, [sp, #284]	; 0x11c
   1d4b8:	mov	r1, r4
   1d4bc:	str	r3, [sp, #20]
   1d4c0:	ldr	r3, [sp, #16]
   1d4c4:	ldr	r0, [sp, #20]
   1d4c8:	lsl	r3, r3, #3
   1d4cc:	mov	r2, r3
   1d4d0:	str	r3, [sp, #24]
   1d4d4:	bl	11248 <memcpy@plt>
   1d4d8:	ldr	r3, [r4]
   1d4dc:	add	r2, sp, #416	; 0x1a0
   1d4e0:	str	r3, [r2, #-304]!	; 0xfffffed0
   1d4e4:	ldr	r3, [sp, #16]
   1d4e8:	str	r2, [sp, #28]
   1d4ec:	lsl	r3, r3, #4
   1d4f0:	str	r3, [sp, #36]	; 0x24
   1d4f4:	ldr	r2, [sp, #112]	; 0x70
   1d4f8:	ldr	r3, [r4, #4]
   1d4fc:	cmp	r2, r3
   1d500:	bgt	1d014 <__assert_fail@plt+0xbafc>
   1d504:	ldr	r3, [sp, #32]
   1d508:	lsl	r1, r6, #3
   1d50c:	ldr	r3, [r3]
   1d510:	add	r0, r3, r1
   1d514:	ldrb	ip, [r0, #4]
   1d518:	cmp	ip, #8
   1d51c:	bne	1cf50 <__assert_fail@plt+0xba38>
   1d520:	ldr	r3, [r3, r6, lsl #3]
   1d524:	add	r3, r3, #1
   1d528:	cmp	r7, r3
   1d52c:	addgt	r1, r4, r3, lsl #3
   1d530:	strgt	r2, [r4, r3, lsl #3]
   1d534:	mvngt	r3, #0
   1d538:	strgt	r3, [r1, #4]
   1d53c:	ldr	r2, [r4, #4]
   1d540:	ldr	r3, [sp, #112]	; 0x70
   1d544:	cmp	r2, r3
   1d548:	bne	1d558 <__assert_fail@plt+0xc040>
   1d54c:	ldr	r3, [sp, #236]	; 0xec
   1d550:	cmp	r6, r3
   1d554:	beq	1cfc0 <__assert_fail@plt+0xbaa8>
   1d558:	cmp	r5, #0
   1d55c:	beq	1d574 <__assert_fail@plt+0xc05c>
   1d560:	mov	r1, r6
   1d564:	add	r0, sp, #116	; 0x74
   1d568:	bl	14f60 <__assert_fail@plt+0x3a48>
   1d56c:	cmp	r0, #0
   1d570:	bne	1cfc8 <__assert_fail@plt+0xbab0>
   1d574:	ldr	r8, [sp, #224]	; 0xe0
   1d578:	lsl	r9, r6, #3
   1d57c:	mov	sl, r6
   1d580:	ldr	r3, [r8]
   1d584:	add	r1, r3, r9
   1d588:	ldrb	r2, [r1, #4]
   1d58c:	tst	r2, #8
   1d590:	beq	1d07c <__assert_fail@plt+0xbb64>
   1d594:	ldr	r3, [sp, #240]	; 0xf0
   1d598:	ldr	r2, [sp, #112]	; 0x70
   1d59c:	mov	sl, #12
   1d5a0:	mov	r1, r6
   1d5a4:	ldr	r9, [r3, r2, lsl #2]
   1d5a8:	ldr	r3, [r8, #20]
   1d5ac:	add	r0, sp, #116	; 0x74
   1d5b0:	mla	sl, sl, r6, r3
   1d5b4:	bl	14f60 <__assert_fail@plt+0x3a48>
   1d5b8:	add	r9, r9, #4
   1d5bc:	cmp	r0, #0
   1d5c0:	beq	1d050 <__assert_fail@plt+0xbb38>
   1d5c4:	ldr	r2, [sl, #4]
   1d5c8:	mov	r3, #0
   1d5cc:	mvn	r6, #0
   1d5d0:	cmp	r3, r2
   1d5d4:	bge	1d6f0 <__assert_fail@plt+0xc1d8>
   1d5d8:	ldr	r1, [sl, #8]
   1d5dc:	mov	r0, r9
   1d5e0:	str	r2, [sp, #44]	; 0x2c
   1d5e4:	ldr	r8, [r1, r3, lsl #2]
   1d5e8:	str	r3, [sp, #40]	; 0x28
   1d5ec:	mov	r1, r8
   1d5f0:	bl	14f60 <__assert_fail@plt+0x3a48>
   1d5f4:	ldr	r3, [sp, #40]	; 0x28
   1d5f8:	ldr	r2, [sp, #44]	; 0x2c
   1d5fc:	cmp	r0, #0
   1d600:	beq	1d074 <__assert_fail@plt+0xbb5c>
   1d604:	cmn	r6, #1
   1d608:	beq	1d070 <__assert_fail@plt+0xbb58>
   1d60c:	mov	r1, r6
   1d610:	add	r0, sp, #116	; 0x74
   1d614:	bl	14f60 <__assert_fail@plt+0x3a48>
   1d618:	cmp	r0, #0
   1d61c:	bne	1d258 <__assert_fail@plt+0xbd40>
   1d620:	cmp	r5, #0
   1d624:	beq	1d6f0 <__assert_fail@plt+0xc1d8>
   1d628:	ldr	r9, [r5]
   1d62c:	ldr	r2, [r5, #4]
   1d630:	add	r3, r9, #1
   1d634:	cmp	r3, r2
   1d638:	ldr	sl, [sp, #112]	; 0x70
   1d63c:	str	r3, [r5]
   1d640:	bne	1d66c <__assert_fail@plt+0xc154>
   1d644:	mov	r1, #48	; 0x30
   1d648:	ldr	r0, [r5, #8]
   1d64c:	mul	r1, r1, r3
   1d650:	bl	20bfc <__assert_fail@plt+0xf6e4>
   1d654:	cmp	r0, #0
   1d658:	beq	1d064 <__assert_fail@plt+0xbb4c>
   1d65c:	ldr	r3, [r5, #4]
   1d660:	str	r0, [r5, #8]
   1d664:	lsl	r3, r3, #1
   1d668:	str	r3, [r5, #4]
   1d66c:	mov	r0, #24
   1d670:	ldr	r2, [r5, #8]
   1d674:	mul	r9, r0, r9
   1d678:	ldr	r0, [sp, #36]	; 0x24
   1d67c:	add	r3, r2, r9
   1d680:	str	sl, [r2, r9]
   1d684:	str	r8, [r3, #4]
   1d688:	str	r3, [sp, #40]	; 0x28
   1d68c:	bl	20bbc <__assert_fail@plt+0xf6a4>
   1d690:	ldr	r3, [sp, #40]	; 0x28
   1d694:	str	r0, [r3, #8]
   1d698:	ldr	r3, [r5, #8]
   1d69c:	add	r3, r3, r9
   1d6a0:	ldr	r0, [r3, #8]
   1d6a4:	cmp	r0, #0
   1d6a8:	beq	1d064 <__assert_fail@plt+0xbb4c>
   1d6ac:	ldr	r2, [sp, #24]
   1d6b0:	mov	r1, r4
   1d6b4:	bl	11248 <memcpy@plt>
   1d6b8:	ldr	r3, [r5, #8]
   1d6bc:	ldr	r2, [sp, #24]
   1d6c0:	add	r3, r3, r9
   1d6c4:	ldr	r1, [sp, #20]
   1d6c8:	ldr	r0, [r3, #8]
   1d6cc:	add	r0, r0, r2
   1d6d0:	bl	11248 <memcpy@plt>
   1d6d4:	ldr	r0, [r5, #8]
   1d6d8:	add	r1, sp, #116	; 0x74
   1d6dc:	add	r0, r0, r9
   1d6e0:	add	r0, r0, #12
   1d6e4:	bl	179ec <__assert_fail@plt+0x64d4>
   1d6e8:	cmp	r0, #0
   1d6ec:	bne	1d064 <__assert_fail@plt+0xbb4c>
   1d6f0:	cmp	r6, #0
   1d6f4:	bge	1d4f4 <__assert_fail@plt+0xbfdc>
   1d6f8:	cmn	r6, #2
   1d6fc:	bne	1d0c4 <__assert_fail@plt+0xbbac>
   1d700:	b	1d064 <__assert_fail@plt+0xbb4c>
   1d704:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d708:	sub	sp, sp, #156	; 0x9c
   1d70c:	mov	fp, r0
   1d710:	ldr	r9, [sp, #196]	; 0xc4
   1d714:	mov	r5, r1
   1d718:	mov	sl, r2
   1d71c:	and	r6, r3, #16777216	; 0x1000000
   1d720:	and	r7, r3, #32
   1d724:	and	r8, r3, #16
   1d728:	str	r3, [sp, #12]
   1d72c:	ldrb	r3, [sl, #4]
   1d730:	ldr	r4, [r5]
   1d734:	sub	r2, r3, #1
   1d738:	cmp	r2, #35	; 0x23
   1d73c:	ldrls	pc, [pc, r2, lsl #2]
   1d740:	b	1e240 <__assert_fail@plt+0xcd28>
   1d744:	ldrdeq	sp, [r1], -r4
   1d748:	ldrdeq	sp, [r1], -r8
   1d74c:	andeq	lr, r1, r0, asr #4
   1d750:	andeq	sp, r1, ip, lsl #30
   1d754:			; <UNDEFINED> instruction: 0x0001e1b8
   1d758:	andeq	lr, r1, r0, asr #4
   1d75c:	andeq	lr, r1, r0, asr #4
   1d760:	andeq	sp, r1, r8, lsr #18
   1d764:	andeq	sp, r1, r8, lsr #31
   1d768:	ldrdeq	sp, [r1], -r8
   1d76c:	andeq	sp, r1, ip, ror pc
   1d770:	strdeq	sp, [r1], -r0
   1d774:	andeq	lr, r1, r0, asr #4
   1d778:	andeq	lr, r1, r0, asr #4
   1d77c:	andeq	lr, r1, r0, asr #4
   1d780:	andeq	lr, r1, r0, asr #4
   1d784:	andeq	lr, r1, r0, asr #4
   1d788:	andeq	sp, r1, ip, ror pc
   1d78c:	andeq	sp, r1, ip, ror pc
   1d790:	andeq	sp, r1, r4, lsr #20
   1d794:	andeq	lr, r1, r0, asr #4
   1d798:	andeq	lr, r1, r0, asr #4
   1d79c:	andeq	sp, r1, ip, ror #30
   1d7a0:	andeq	sp, r1, r8, asr #31
   1d7a4:	andeq	lr, r1, r0, asr #4
   1d7a8:	andeq	lr, r1, r0, asr #4
   1d7ac:	andeq	lr, r1, r0, asr #4
   1d7b0:	andeq	lr, r1, r0, asr #4
   1d7b4:	andeq	lr, r1, r0, asr #4
   1d7b8:	andeq	lr, r1, r0, asr #4
   1d7bc:	andeq	lr, r1, r0, asr #4
   1d7c0:	andeq	lr, r1, r4, ror #3
   1d7c4:	andeq	lr, r1, r4, ror #3
   1d7c8:	andeq	lr, r1, r8, lsl r2
   1d7cc:	andeq	lr, r1, r8, lsl r2
   1d7d0:	andeq	lr, r1, r8, lsr r2
   1d7d4:	mov	r2, #0
   1d7d8:	mov	r3, sl
   1d7dc:	mov	r1, r2
   1d7e0:	mov	r0, r4
   1d7e4:	bl	15668 <__assert_fail@plt+0x4150>
   1d7e8:	subs	r5, r0, #0
   1d7ec:	bne	1d7fc <__assert_fail@plt+0xc2e4>
   1d7f0:	mov	r3, #12
   1d7f4:	str	r3, [r9]
   1d7f8:	b	1d9d8 <__assert_fail@plt+0xc4c0>
   1d7fc:	ldr	r3, [r4, #92]	; 0x5c
   1d800:	cmp	r3, #1
   1d804:	movgt	r7, #0
   1d808:	movgt	r8, #16
   1d80c:	bgt	1d8f8 <__assert_fail@plt+0xc3e0>
   1d810:	ldr	r2, [sp, #12]
   1d814:	mov	r1, fp
   1d818:	mov	r0, sl
   1d81c:	bl	19a50 <__assert_fail@plt+0x8538>
   1d820:	ldrb	r3, [sl, #4]
   1d824:	cmp	r3, #23
   1d828:	movhi	r7, #1
   1d82c:	ldrls	r2, [pc, #3844]	; 1e738 <__assert_fail@plt+0xd220>
   1d830:	sub	r8, r3, #18
   1d834:	clz	r8, r8
   1d838:	mvnls	r7, r2, lsr r3
   1d83c:	ands	r7, r7, #1
   1d840:	lsr	r8, r8, #5
   1d844:	bne	1dfbc <__assert_fail@plt+0xcaa4>
   1d848:	ldr	r2, [fp, #40]	; 0x28
   1d84c:	ldm	sl, {r0, r1}
   1d850:	str	r2, [sp, #16]
   1d854:	add	r2, sp, #120	; 0x78
   1d858:	cmp	r3, #23
   1d85c:	stm	r2, {r0, r1}
   1d860:	bne	1e35c <__assert_fail@plt+0xce44>
   1d864:	ldr	r2, [sp, #12]
   1d868:	mov	r1, sl
   1d86c:	mov	r0, fp
   1d870:	bl	19a6c <__assert_fail@plt+0x8554>
   1d874:	cmn	r0, #1
   1d878:	mov	r8, r0
   1d87c:	bne	1e240 <__assert_fail@plt+0xcd28>
   1d880:	ldrb	r3, [sl, #4]
   1d884:	cmp	r3, #1
   1d888:	bne	1d89c <__assert_fail@plt+0xc384>
   1d88c:	ldrb	r3, [sl]
   1d890:	cmp	r3, #44	; 0x2c
   1d894:	moveq	r8, r7
   1d898:	beq	1e2ac <__assert_fail@plt+0xcd94>
   1d89c:	mov	r3, #10
   1d8a0:	str	r3, [r9]
   1d8a4:	mov	r6, #0
   1d8a8:	b	1e274 <__assert_fail@plt+0xcd5c>
   1d8ac:	ldr	r2, [sp, #12]
   1d8b0:	mov	r1, fp
   1d8b4:	mov	r0, sl
   1d8b8:	bl	19a50 <__assert_fail@plt+0x8538>
   1d8bc:	mov	r3, sl
   1d8c0:	mov	r2, r7
   1d8c4:	mov	r1, #0
   1d8c8:	mov	r0, r4
   1d8cc:	bl	15668 <__assert_fail@plt+0x4150>
   1d8d0:	mov	r1, r5
   1d8d4:	mov	r3, r8
   1d8d8:	mov	r6, r0
   1d8dc:	mov	r2, r0
   1d8e0:	mov	r0, r4
   1d8e4:	bl	157b8 <__assert_fail@plt+0x42a0>
   1d8e8:	cmp	r0, #0
   1d8ec:	cmpne	r6, #0
   1d8f0:	mov	r5, r0
   1d8f4:	beq	1d7f0 <__assert_fail@plt+0xc2d8>
   1d8f8:	ldr	r3, [fp, #40]	; 0x28
   1d8fc:	ldr	r2, [fp, #56]	; 0x38
   1d900:	cmp	r2, r3
   1d904:	ble	1d810 <__assert_fail@plt+0xc2f8>
   1d908:	ldr	r2, [fp, #28]
   1d90c:	cmp	r3, r2
   1d910:	beq	1d810 <__assert_fail@plt+0xc2f8>
   1d914:	ldr	r2, [fp, #8]
   1d918:	ldr	r3, [r2, r3, lsl #2]
   1d91c:	cmn	r3, #1
   1d920:	beq	1d8ac <__assert_fail@plt+0xc394>
   1d924:	b	1d810 <__assert_fail@plt+0xc2f8>
   1d928:	ldr	r6, [r5, #24]
   1d92c:	mov	r1, fp
   1d930:	add	r3, r6, #1
   1d934:	str	r3, [r5, #24]
   1d938:	ldr	r3, [sp, #12]
   1d93c:	mov	r0, sl
   1d940:	orr	r2, r3, #8388608	; 0x800000
   1d944:	bl	19a50 <__assert_fail@plt+0x8538>
   1d948:	ldrb	r3, [sl, #4]
   1d94c:	cmp	r3, #9
   1d950:	beq	1d9e0 <__assert_fail@plt+0xc4c8>
   1d954:	ldr	r3, [sp, #192]	; 0xc0
   1d958:	mov	r2, sl
   1d95c:	add	r3, r3, #1
   1d960:	str	r3, [sp]
   1d964:	mov	r1, r5
   1d968:	str	r9, [sp, #4]
   1d96c:	ldr	r3, [sp, #12]
   1d970:	mov	r0, fp
   1d974:	bl	1e8b4 <__assert_fail@plt+0xd39c>
   1d978:	ldr	r2, [r9]
   1d97c:	cmp	r2, #0
   1d980:	mov	r5, r0
   1d984:	bne	1d9ac <__assert_fail@plt+0xc494>
   1d988:	ldrb	r3, [sl, #4]
   1d98c:	cmp	r3, #9
   1d990:	beq	1d9ac <__assert_fail@plt+0xc494>
   1d994:	cmp	r0, #0
   1d998:	beq	1d9a4 <__assert_fail@plt+0xc48c>
   1d99c:	ldr	r1, [pc, #3480]	; 1e73c <__assert_fail@plt+0xd224>
   1d9a0:	bl	154a4 <__assert_fail@plt+0x3f8c>
   1d9a4:	mov	r3, #8
   1d9a8:	str	r3, [r9]
   1d9ac:	ldr	r3, [r9]
   1d9b0:	cmp	r3, #0
   1d9b4:	beq	1d9e4 <__assert_fail@plt+0xc4cc>
   1d9b8:	mov	r5, #0
   1d9bc:	ldr	r3, [r9]
   1d9c0:	adds	r3, r3, #0
   1d9c4:	movne	r3, #1
   1d9c8:	cmp	r5, #0
   1d9cc:	movne	r3, #0
   1d9d0:	cmp	r3, #0
   1d9d4:	beq	1d810 <__assert_fail@plt+0xc2f8>
   1d9d8:	mov	r5, #0
   1d9dc:	b	1dfbc <__assert_fail@plt+0xcaa4>
   1d9e0:	mov	r5, #0
   1d9e4:	cmp	r6, #8
   1d9e8:	movls	r2, #1
   1d9ec:	ldrls	r3, [r4, #84]	; 0x54
   1d9f0:	mov	r1, r5
   1d9f4:	orrls	r3, r3, r2, lsl r6
   1d9f8:	mov	r0, r4
   1d9fc:	strls	r3, [r4, #84]	; 0x54
   1da00:	mov	r2, #0
   1da04:	mov	r3, #17
   1da08:	bl	157b8 <__assert_fail@plt+0x42a0>
   1da0c:	subs	r5, r0, #0
   1da10:	strne	r6, [r5, #20]
   1da14:	bne	1d9bc <__assert_fail@plt+0xc4a4>
   1da18:	mov	r3, #12
   1da1c:	str	r3, [r9]
   1da20:	b	1d9bc <__assert_fail@plt+0xc4a4>
   1da24:	mov	r5, #0
   1da28:	mov	r1, #1
   1da2c:	mov	r0, #32
   1da30:	str	r5, [sp, #60]	; 0x3c
   1da34:	bl	20b74 <__assert_fail@plt+0xf65c>
   1da38:	mov	r1, #1
   1da3c:	str	r0, [sp, #16]
   1da40:	mov	r0, #40	; 0x28
   1da44:	bl	20b74 <__assert_fail@plt+0xf65c>
   1da48:	ldr	r3, [sp, #16]
   1da4c:	cmp	r0, r5
   1da50:	cmpne	r3, r5
   1da54:	moveq	r3, #1
   1da58:	movne	r3, #0
   1da5c:	mov	r6, r0
   1da60:	str	r3, [sp, #36]	; 0x24
   1da64:	bne	1da7c <__assert_fail@plt+0xc564>
   1da68:	ldr	r0, [sp, #16]
   1da6c:	bl	130e8 <__assert_fail@plt+0x1bd0>
   1da70:	mov	r0, r6
   1da74:	bl	130e8 <__assert_fail@plt+0x1bd0>
   1da78:	b	1da18 <__assert_fail@plt+0xc500>
   1da7c:	ldr	r2, [sp, #12]
   1da80:	mov	r1, fp
   1da84:	mov	r0, sl
   1da88:	bl	14fc4 <__assert_fail@plt+0x3aac>
   1da8c:	ldrb	r3, [sl, #4]
   1da90:	cmp	r3, #2
   1da94:	str	r0, [sp, #24]
   1da98:	bne	1daa8 <__assert_fail@plt+0xc590>
   1da9c:	mov	r3, #2
   1daa0:	str	r3, [r9]
   1daa4:	b	1db80 <__assert_fail@plt+0xc668>
   1daa8:	cmp	r3, #25
   1daac:	ldrne	r3, [sp, #36]	; 0x24
   1dab0:	bne	1db0c <__assert_fail@plt+0xc5f4>
   1dab4:	ldrb	r3, [r6, #16]
   1dab8:	orr	r3, r3, #1
   1dabc:	strb	r3, [r6, #16]
   1dac0:	ldr	r3, [sp, #12]
   1dac4:	tst	r3, #256	; 0x100
   1dac8:	beq	1dad8 <__assert_fail@plt+0xc5c0>
   1dacc:	mov	r1, #10
   1dad0:	ldr	r0, [sp, #16]
   1dad4:	bl	14dc8 <__assert_fail@plt+0x38b0>
   1dad8:	ldr	r3, [fp, #40]	; 0x28
   1dadc:	ldr	r2, [sp, #24]
   1dae0:	mov	r1, fp
   1dae4:	add	r3, r3, r2
   1dae8:	str	r3, [fp, #40]	; 0x28
   1daec:	ldr	r2, [sp, #12]
   1daf0:	mov	r0, sl
   1daf4:	bl	14fc4 <__assert_fail@plt+0x3aac>
   1daf8:	ldrb	r3, [sl, #4]
   1dafc:	cmp	r3, #2
   1db00:	movne	r3, #1
   1db04:	str	r0, [sp, #24]
   1db08:	beq	1da9c <__assert_fail@plt+0xc584>
   1db0c:	str	r3, [sp, #40]	; 0x28
   1db10:	ldrb	r3, [sl, #4]
   1db14:	mov	r2, #0
   1db18:	str	r2, [sp, #28]
   1db1c:	cmp	r3, #21
   1db20:	ldr	r2, [sp, #12]
   1db24:	moveq	r3, #1
   1db28:	strbeq	r3, [sl, #4]
   1db2c:	mov	r3, #0
   1db30:	str	r3, [sp, #32]
   1db34:	lsr	r2, r2, #16
   1db38:	mov	r3, #1
   1db3c:	and	r2, r2, r3
   1db40:	str	r2, [sp, #44]	; 0x2c
   1db44:	add	r0, sp, #152	; 0x98
   1db48:	mov	r7, #3
   1db4c:	str	r7, [r0, #-88]!	; 0xffffffa8
   1db50:	str	r3, [sp, #4]
   1db54:	ldr	r3, [sp, #12]
   1db58:	add	r2, sp, #88	; 0x58
   1db5c:	str	r2, [sp, #68]	; 0x44
   1db60:	str	r3, [sp]
   1db64:	mov	r2, sl
   1db68:	ldr	r3, [sp, #24]
   1db6c:	mov	r1, fp
   1db70:	bl	19b1c <__assert_fail@plt+0x8604>
   1db74:	subs	r5, r0, #0
   1db78:	beq	1db94 <__assert_fail@plt+0xc67c>
   1db7c:	str	r5, [r9]
   1db80:	ldr	r0, [sp, #16]
   1db84:	bl	130e8 <__assert_fail@plt+0x1bd0>
   1db88:	mov	r0, r6
   1db8c:	bl	16214 <__assert_fail@plt+0x4cfc>
   1db90:	b	1d9b8 <__assert_fail@plt+0xc4a0>
   1db94:	ldr	r2, [sp, #12]
   1db98:	mov	r1, fp
   1db9c:	mov	r0, sl
   1dba0:	bl	14fc4 <__assert_fail@plt+0x3aac>
   1dba4:	ldr	r3, [sp, #64]	; 0x40
   1dba8:	sub	r3, r3, #2
   1dbac:	bics	r3, r3, #2
   1dbb0:	str	r0, [sp, #24]
   1dbb4:	beq	1dc24 <__assert_fail@plt+0xc70c>
   1dbb8:	ldrb	r3, [sl, #4]
   1dbbc:	cmp	r3, #2
   1dbc0:	bne	1dbcc <__assert_fail@plt+0xc6b4>
   1dbc4:	mov	r3, #7
   1dbc8:	b	1daa0 <__assert_fail@plt+0xc588>
   1dbcc:	cmp	r3, #22
   1dbd0:	bne	1dc24 <__assert_fail@plt+0xc70c>
   1dbd4:	ldr	r3, [fp, #40]	; 0x28
   1dbd8:	ldr	r2, [sp, #24]
   1dbdc:	mov	r1, fp
   1dbe0:	add	r3, r3, r2
   1dbe4:	str	r3, [fp, #40]	; 0x28
   1dbe8:	ldr	r2, [sp, #12]
   1dbec:	add	r0, sp, #80	; 0x50
   1dbf0:	bl	14fc4 <__assert_fail@plt+0x3aac>
   1dbf4:	ldrb	r2, [sp, #84]	; 0x54
   1dbf8:	cmp	r2, #2
   1dbfc:	mov	r3, r0
   1dc00:	beq	1dbc4 <__assert_fail@plt+0xc6ac>
   1dc04:	cmp	r2, #21
   1dc08:	bne	1e548 <__assert_fail@plt+0xd030>
   1dc0c:	ldr	r3, [fp, #40]	; 0x28
   1dc10:	ldr	r2, [sp, #24]
   1dc14:	sub	r3, r3, r2
   1dc18:	str	r3, [fp, #40]	; 0x28
   1dc1c:	mov	r3, #1
   1dc20:	strb	r3, [sl, #4]
   1dc24:	ldr	r3, [sp, #64]	; 0x40
   1dc28:	cmp	r3, #4
   1dc2c:	ldrls	pc, [pc, r3, lsl #2]
   1dc30:	b	1dde8 <__assert_fail@plt+0xc8d0>
   1dc34:	andeq	sp, r1, r0, lsl sp
   1dc38:	andeq	sp, r1, r8, lsr sp
   1dc3c:	andeq	sp, r1, r8, lsl #27
   1dc40:	andeq	sp, r1, r8, lsl #27
   1dc44:			; <UNDEFINED> instruction: 0x0001ddb8
   1dc48:	ldr	r2, [sp, #12]
   1dc4c:	mov	r1, fp
   1dc50:	mov	r0, sl
   1dc54:	bl	14fc4 <__assert_fail@plt+0x3aac>
   1dc58:	ldr	r8, [sp, #64]	; 0x40
   1dc5c:	sub	r3, r8, #2
   1dc60:	bics	r3, r3, #2
   1dc64:	str	r0, [sp, #24]
   1dc68:	beq	1dc7c <__assert_fail@plt+0xc764>
   1dc6c:	ldr	r7, [sp, #72]	; 0x48
   1dc70:	sub	r3, r7, #2
   1dc74:	bics	r3, r3, #2
   1dc78:	bne	1e588 <__assert_fail@plt+0xd070>
   1dc7c:	mov	r3, #11
   1dc80:	b	1e6d8 <__assert_fail@plt+0xd1c0>
   1dc84:	ldr	r0, [sp, #68]	; 0x44
   1dc88:	bl	113c8 <strlen@plt>
   1dc8c:	cmp	r0, #1
   1dc90:	bls	1e72c <__assert_fail@plt+0xd214>
   1dc94:	mov	r3, #3
   1dc98:	b	1e6d8 <__assert_fail@plt+0xd1c0>
   1dc9c:	stmib	r6, {r2, r3}
   1dca0:	str	r8, [sp, #32]
   1dca4:	ldr	r2, [r6, #32]
   1dca8:	ldr	r3, [r6, #4]
   1dcac:	str	r5, [r3, r2, lsl #2]
   1dcb0:	ldr	r2, [r6, #8]
   1dcb4:	ldr	r3, [r6, #32]
   1dcb8:	add	r1, r3, #1
   1dcbc:	str	r1, [r6, #32]
   1dcc0:	str	r7, [r2, r3, lsl #2]
   1dcc4:	mov	r8, #0
   1dcc8:	cmp	r5, r8
   1dccc:	movhi	r3, #0
   1dcd0:	movls	r3, #1
   1dcd4:	cmp	r7, r8
   1dcd8:	movcc	r3, #0
   1dcdc:	cmp	r3, #0
   1dce0:	beq	1dcf0 <__assert_fail@plt+0xc7d8>
   1dce4:	mov	r1, r8
   1dce8:	ldr	r0, [sp, #16]
   1dcec:	bl	14dc8 <__assert_fail@plt+0x38b0>
   1dcf0:	add	r8, r8, #1
   1dcf4:	cmp	r8, #256	; 0x100
   1dcf8:	bne	1dcc8 <__assert_fail@plt+0xc7b0>
   1dcfc:	ldr	r3, [sp, #20]
   1dd00:	cmp	r3, #0
   1dd04:	str	r3, [r9]
   1dd08:	beq	1dd1c <__assert_fail@plt+0xc804>
   1dd0c:	b	1db80 <__assert_fail@plt+0xc668>
   1dd10:	ldrb	r1, [sp, #68]	; 0x44
   1dd14:	ldr	r0, [sp, #16]
   1dd18:	bl	14dc8 <__assert_fail@plt+0x38b0>
   1dd1c:	ldrb	r3, [sl, #4]
   1dd20:	cmp	r3, #2
   1dd24:	beq	1dbc4 <__assert_fail@plt+0xc6ac>
   1dd28:	cmp	r3, #21
   1dd2c:	beq	1dde8 <__assert_fail@plt+0xc8d0>
   1dd30:	ldr	r3, [sp, #36]	; 0x24
   1dd34:	b	1db44 <__assert_fail@plt+0xc62c>
   1dd38:	ldr	r3, [r6, #20]
   1dd3c:	ldr	r2, [sp, #28]
   1dd40:	cmp	r3, r2
   1dd44:	bne	1dd6c <__assert_fail@plt+0xc854>
   1dd48:	lsl	r3, r2, #1
   1dd4c:	add	r3, r3, #1
   1dd50:	ldr	r0, [r6]
   1dd54:	lsl	r1, r3, #2
   1dd58:	str	r3, [sp, #28]
   1dd5c:	bl	20bfc <__assert_fail@plt+0xf6e4>
   1dd60:	cmp	r0, #0
   1dd64:	beq	1e724 <__assert_fail@plt+0xd20c>
   1dd68:	str	r0, [r6]
   1dd6c:	ldr	r3, [r6, #20]
   1dd70:	ldr	r2, [r6]
   1dd74:	add	r1, r3, #1
   1dd78:	str	r1, [r6, #20]
   1dd7c:	ldr	r1, [sp, #68]	; 0x44
   1dd80:	str	r1, [r2, r3, lsl #2]
   1dd84:	b	1dd1c <__assert_fail@plt+0xc804>
   1dd88:	ldr	r7, [sp, #68]	; 0x44
   1dd8c:	mov	r0, r7
   1dd90:	bl	113c8 <strlen@plt>
   1dd94:	cmp	r0, #1
   1dd98:	movne	r5, #3
   1dd9c:	bne	1ddac <__assert_fail@plt+0xc894>
   1dda0:	ldrb	r1, [r7]
   1dda4:	ldr	r0, [sp, #16]
   1dda8:	bl	14dc8 <__assert_fail@plt+0x38b0>
   1ddac:	str	r5, [r9]
   1ddb0:	cmp	r5, #0
   1ddb4:	b	1dd08 <__assert_fail@plt+0xc7f0>
   1ddb8:	ldr	r3, [sp, #12]
   1ddbc:	mov	r2, r6
   1ddc0:	str	r3, [sp, #4]
   1ddc4:	ldr	r3, [sp, #68]	; 0x44
   1ddc8:	ldr	r1, [sp, #16]
   1ddcc:	str	r3, [sp]
   1ddd0:	ldr	r0, [fp, #64]	; 0x40
   1ddd4:	add	r3, sp, #60	; 0x3c
   1ddd8:	bl	16b48 <__assert_fail@plt+0x5630>
   1dddc:	str	r0, [r9]
   1dde0:	cmp	r0, #0
   1dde4:	b	1dd08 <__assert_fail@plt+0xc7f0>
   1dde8:	ldr	r3, [fp, #40]	; 0x28
   1ddec:	ldr	r2, [sp, #24]
   1ddf0:	add	r3, r3, r2
   1ddf4:	str	r3, [fp, #40]	; 0x28
   1ddf8:	ldr	r3, [sp, #40]	; 0x28
   1ddfc:	cmp	r3, #0
   1de00:	beq	1de0c <__assert_fail@plt+0xc8f4>
   1de04:	ldr	r0, [sp, #16]
   1de08:	bl	14e2c <__assert_fail@plt+0x3914>
   1de0c:	ldr	r3, [r4, #92]	; 0x5c
   1de10:	cmp	r3, #1
   1de14:	ble	1de24 <__assert_fail@plt+0xc90c>
   1de18:	ldr	r1, [r4, #60]	; 0x3c
   1de1c:	ldr	r0, [sp, #16]
   1de20:	bl	14e74 <__assert_fail@plt+0x395c>
   1de24:	ldr	r3, [r6, #20]
   1de28:	cmp	r3, #0
   1de2c:	bne	1de78 <__assert_fail@plt+0xc960>
   1de30:	ldr	r3, [r6, #24]
   1de34:	cmp	r3, #0
   1de38:	bne	1de78 <__assert_fail@plt+0xc960>
   1de3c:	ldr	r3, [r6, #28]
   1de40:	cmp	r3, #0
   1de44:	bne	1de78 <__assert_fail@plt+0xc960>
   1de48:	ldr	r3, [r6, #32]
   1de4c:	cmp	r3, #0
   1de50:	bne	1de78 <__assert_fail@plt+0xc960>
   1de54:	ldr	r3, [r4, #92]	; 0x5c
   1de58:	cmp	r3, #1
   1de5c:	ble	1dedc <__assert_fail@plt+0xc9c4>
   1de60:	ldr	r3, [r6, #36]	; 0x24
   1de64:	cmp	r3, #0
   1de68:	bne	1de78 <__assert_fail@plt+0xc960>
   1de6c:	ldrb	r3, [r6, #16]
   1de70:	tst	r3, #1
   1de74:	beq	1dedc <__assert_fail@plt+0xc9c4>
   1de78:	ldrb	r3, [r4, #88]	; 0x58
   1de7c:	mov	r2, #0
   1de80:	mov	r1, r2
   1de84:	orr	r3, r3, #2
   1de88:	strb	r3, [r4, #88]	; 0x58
   1de8c:	mov	r3, #6
   1de90:	strb	r3, [sp, #124]	; 0x7c
   1de94:	mov	r0, r4
   1de98:	add	r3, sp, #120	; 0x78
   1de9c:	str	r6, [sp, #120]	; 0x78
   1dea0:	bl	15668 <__assert_fail@plt+0x4150>
   1dea4:	subs	r5, r0, #0
   1dea8:	beq	1e724 <__assert_fail@plt+0xd20c>
   1deac:	ldr	r3, [sp, #16]
   1deb0:	ldr	r2, [sp, #16]
   1deb4:	sub	r3, r3, #4
   1deb8:	add	r2, r2, #28
   1debc:	ldr	r1, [r3, #4]!
   1dec0:	cmp	r1, #0
   1dec4:	bne	1e6e0 <__assert_fail@plt+0xd1c8>
   1dec8:	cmp	r2, r3
   1decc:	bne	1debc <__assert_fail@plt+0xc9a4>
   1ded0:	ldr	r0, [sp, #16]
   1ded4:	bl	130e8 <__assert_fail@plt+0x1bd0>
   1ded8:	b	1d9bc <__assert_fail@plt+0xc4a4>
   1dedc:	mov	r0, r6
   1dee0:	bl	16214 <__assert_fail@plt+0x4cfc>
   1dee4:	mov	r3, #3
   1dee8:	strb	r3, [sp, #124]	; 0x7c
   1deec:	ldr	r3, [sp, #16]
   1def0:	mov	r2, #0
   1def4:	str	r3, [sp, #120]	; 0x78
   1def8:	mov	r1, r2
   1defc:	add	r3, sp, #120	; 0x78
   1df00:	mov	r0, r4
   1df04:	bl	15668 <__assert_fail@plt+0x4150>
   1df08:	b	1e71c <__assert_fail@plt+0xd204>
   1df0c:	ldr	r2, [sl]
   1df10:	mov	r3, #1
   1df14:	ldr	r5, [r4, #84]	; 0x54
   1df18:	lsl	r3, r3, r2
   1df1c:	ands	r5, r3, r5
   1df20:	moveq	r3, #6
   1df24:	beq	1dfb8 <__assert_fail@plt+0xcaa0>
   1df28:	ldr	r2, [r4, #80]	; 0x50
   1df2c:	mov	r0, r4
   1df30:	orr	r3, r2, r3
   1df34:	mov	r2, #0
   1df38:	str	r3, [r4, #80]	; 0x50
   1df3c:	mov	r1, r2
   1df40:	mov	r3, sl
   1df44:	bl	15668 <__assert_fail@plt+0x4150>
   1df48:	subs	r5, r0, #0
   1df4c:	ldrne	r3, [r4, #76]	; 0x4c
   1df50:	addne	r3, r3, #1
   1df54:	strne	r3, [r4, #76]	; 0x4c
   1df58:	beq	1d7f0 <__assert_fail@plt+0xc2d8>
   1df5c:	ldrb	r3, [r4, #88]	; 0x58
   1df60:	orr	r3, r3, #2
   1df64:	strb	r3, [r4, #88]	; 0x58
   1df68:	b	1d810 <__assert_fail@plt+0xc2f8>
   1df6c:	cmp	r6, #0
   1df70:	beq	1df7c <__assert_fail@plt+0xca64>
   1df74:	mov	r3, #13
   1df78:	b	1d7f4 <__assert_fail@plt+0xc2dc>
   1df7c:	cmp	r7, #0
   1df80:	bne	1df74 <__assert_fail@plt+0xca5c>
   1df84:	cmp	r8, #0
   1df88:	beq	1dfa0 <__assert_fail@plt+0xca88>
   1df8c:	ldr	r2, [sp, #12]
   1df90:	mov	r1, fp
   1df94:	mov	r0, sl
   1df98:	bl	19a50 <__assert_fail@plt+0x8538>
   1df9c:	b	1d72c <__assert_fail@plt+0xc214>
   1dfa0:	cmp	r3, #9
   1dfa4:	bne	1dfc8 <__assert_fail@plt+0xcab0>
   1dfa8:	ldr	r3, [sp, #12]
   1dfac:	ands	r5, r3, #131072	; 0x20000
   1dfb0:	bne	1dfc8 <__assert_fail@plt+0xcab0>
   1dfb4:	mov	r3, #16
   1dfb8:	str	r3, [r9]
   1dfbc:	mov	r0, r5
   1dfc0:	add	sp, sp, #156	; 0x9c
   1dfc4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dfc8:	mov	r3, #1
   1dfcc:	mov	r2, #0
   1dfd0:	strb	r3, [sl, #4]
   1dfd4:	mov	r1, r2
   1dfd8:	mov	r3, sl
   1dfdc:	mov	r0, r4
   1dfe0:	bl	15668 <__assert_fail@plt+0x4150>
   1dfe4:	subs	r5, r0, #0
   1dfe8:	bne	1d810 <__assert_fail@plt+0xc2f8>
   1dfec:	b	1d7f0 <__assert_fail@plt+0xc2d8>
   1dff0:	ldr	r2, [sl]
   1dff4:	ldr	r3, [pc, #1860]	; 1e740 <__assert_fail@plt+0xd228>
   1dff8:	and	r3, r3, r2
   1dffc:	cmp	r3, #0
   1e000:	beq	1e050 <__assert_fail@plt+0xcb38>
   1e004:	ldrb	r3, [r4, #88]	; 0x58
   1e008:	ands	r5, r3, #16
   1e00c:	bne	1e050 <__assert_fail@plt+0xcb38>
   1e010:	orr	r3, r3, #16
   1e014:	ands	r1, r3, #8
   1e018:	strb	r3, [r4, #88]	; 0x58
   1e01c:	bne	1e148 <__assert_fail@plt+0xcc30>
   1e020:	ldr	r2, [pc, #1820]	; 1e744 <__assert_fail@plt+0xd22c>
   1e024:	tst	r3, #4
   1e028:	str	r2, [r4, #100]	; 0x64
   1e02c:	mvn	r2, #2013265921	; 0x78000001
   1e030:	str	r2, [r4, #104]	; 0x68
   1e034:	mvn	r2, #-134217727	; 0xf8000001
   1e038:	str	r1, [r4, #96]	; 0x60
   1e03c:	str	r2, [r4, #108]	; 0x6c
   1e040:	beq	1e168 <__assert_fail@plt+0xcc50>
   1e044:	mov	r2, #16
   1e048:	add	r0, r4, #112	; 0x70
   1e04c:	bl	1141c <memset@plt>
   1e050:	ldr	r3, [sl]
   1e054:	sub	r2, r3, #256	; 0x100
   1e058:	bics	r2, r2, #256	; 0x100
   1e05c:	bne	1e198 <__assert_fail@plt+0xcc80>
   1e060:	cmp	r3, #256	; 0x100
   1e064:	bne	1e174 <__assert_fail@plt+0xcc5c>
   1e068:	mov	r3, #6
   1e06c:	str	r3, [sl]
   1e070:	mov	r1, r2
   1e074:	mov	r3, sl
   1e078:	mov	r0, r4
   1e07c:	bl	15668 <__assert_fail@plt+0x4150>
   1e080:	mov	r3, #9
   1e084:	mov	r5, r0
   1e088:	mov	r2, #0
   1e08c:	mov	r1, r2
   1e090:	str	r3, [sl]
   1e094:	mov	r0, r4
   1e098:	mov	r3, sl
   1e09c:	bl	15668 <__assert_fail@plt+0x4150>
   1e0a0:	mov	r1, r5
   1e0a4:	mov	r3, #10
   1e0a8:	mov	r2, r0
   1e0ac:	mov	r6, r0
   1e0b0:	mov	r0, r4
   1e0b4:	bl	157b8 <__assert_fail@plt+0x42a0>
   1e0b8:	cmp	r6, #0
   1e0bc:	cmpne	r5, #0
   1e0c0:	moveq	r2, #1
   1e0c4:	movne	r2, #0
   1e0c8:	cmp	r0, #0
   1e0cc:	orreq	r2, r2, #1
   1e0d0:	cmp	r2, #0
   1e0d4:	mov	r5, r0
   1e0d8:	bne	1d7f0 <__assert_fail@plt+0xc2d8>
   1e0dc:	ldr	r2, [sp, #12]
   1e0e0:	mov	r1, fp
   1e0e4:	mov	r0, sl
   1e0e8:	bl	19a50 <__assert_fail@plt+0x8538>
   1e0ec:	b	1dfbc <__assert_fail@plt+0xcaa4>
   1e0f0:	ldrh	r7, [ip], #2
   1e0f4:	add	r0, r5, r2
   1e0f8:	lsr	r7, r7, #3
   1e0fc:	cmp	r0, #95	; 0x5f
   1e100:	movne	r0, r7
   1e104:	orreq	r0, r7, #1
   1e108:	tst	r0, #1
   1e10c:	ldrne	r0, [r3]
   1e110:	orrne	r0, r0, lr, lsl r2
   1e114:	add	r2, r2, #1
   1e118:	strne	r0, [r3]
   1e11c:	cmp	r2, #32
   1e120:	bne	1e0f0 <__assert_fail@plt+0xcbd8>
   1e124:	add	r6, r6, #1
   1e128:	cmp	r6, #8
   1e12c:	add	r5, r5, #32
   1e130:	add	r1, r1, #64	; 0x40
   1e134:	add	r3, r3, #4
   1e138:	beq	1e050 <__assert_fail@plt+0xcb38>
   1e13c:	mov	ip, r1
   1e140:	mov	r2, #0
   1e144:	b	1e0f0 <__assert_fail@plt+0xcbd8>
   1e148:	mov	r6, r5
   1e14c:	bl	113b0 <__ctype_b_loc@plt>
   1e150:	add	r3, r6, #24
   1e154:	mov	lr, #1
   1e158:	add	r3, r4, r3, lsl #2
   1e15c:	ldr	r1, [r0]
   1e160:	add	r1, r1, r5, lsl #1
   1e164:	b	1e13c <__assert_fail@plt+0xcc24>
   1e168:	mov	r5, #128	; 0x80
   1e16c:	mov	r6, #4
   1e170:	b	1e14c <__assert_fail@plt+0xcc34>
   1e174:	mov	r3, #5
   1e178:	str	r3, [sl]
   1e17c:	mov	r1, r2
   1e180:	mov	r3, sl
   1e184:	mov	r0, r4
   1e188:	bl	15668 <__assert_fail@plt+0x4150>
   1e18c:	mov	r3, #10
   1e190:	mov	r5, r0
   1e194:	b	1e088 <__assert_fail@plt+0xcb70>
   1e198:	mov	r2, #0
   1e19c:	mov	r3, sl
   1e1a0:	mov	r1, r2
   1e1a4:	mov	r0, r4
   1e1a8:	bl	15668 <__assert_fail@plt+0x4150>
   1e1ac:	subs	r5, r0, #0
   1e1b0:	bne	1e0dc <__assert_fail@plt+0xcbc4>
   1e1b4:	b	1d7f0 <__assert_fail@plt+0xc2d8>
   1e1b8:	mov	r2, #0
   1e1bc:	mov	r3, sl
   1e1c0:	mov	r1, r2
   1e1c4:	mov	r0, r4
   1e1c8:	bl	15668 <__assert_fail@plt+0x4150>
   1e1cc:	subs	r5, r0, #0
   1e1d0:	beq	1d7f0 <__assert_fail@plt+0xc2d8>
   1e1d4:	ldr	r3, [r4, #92]	; 0x5c
   1e1d8:	cmp	r3, #1
   1e1dc:	bgt	1df5c <__assert_fail@plt+0xca44>
   1e1e0:	b	1d810 <__assert_fail@plt+0xc2f8>
   1e1e4:	sub	r3, r3, #33	; 0x21
   1e1e8:	clz	r3, r3
   1e1ec:	lsr	r3, r3, #5
   1e1f0:	str	r3, [sp]
   1e1f4:	ldr	r2, [pc, #1356]	; 1e748 <__assert_fail@plt+0xd230>
   1e1f8:	ldr	r3, [pc, #1356]	; 1e74c <__assert_fail@plt+0xd234>
   1e1fc:	str	r9, [sp, #4]
   1e200:	ldr	r1, [fp, #64]	; 0x40
   1e204:	mov	r0, r4
   1e208:	bl	172c0 <__assert_fail@plt+0x5da8>
   1e20c:	ldr	r3, [r9]
   1e210:	mov	r5, r0
   1e214:	b	1d9c0 <__assert_fail@plt+0xc4a8>
   1e218:	sub	r3, r3, #35	; 0x23
   1e21c:	clz	r3, r3
   1e220:	lsr	r3, r3, #5
   1e224:	str	r3, [sp]
   1e228:	str	r9, [sp, #4]
   1e22c:	ldr	r3, [pc, #1308]	; 1e750 <__assert_fail@plt+0xd238>
   1e230:	ldr	r2, [pc, #1308]	; 1e754 <__assert_fail@plt+0xd23c>
   1e234:	b	1e200 <__assert_fail@plt+0xcce8>
   1e238:	mov	r3, #5
   1e23c:	b	1d7f4 <__assert_fail@plt+0xc2dc>
   1e240:	cmn	r0, #2
   1e244:	bne	1e2ac <__assert_fail@plt+0xcd94>
   1e248:	cmn	r8, #2
   1e24c:	cmnne	r7, #2
   1e250:	bne	1e314 <__assert_fail@plt+0xcdfc>
   1e254:	ldr	r3, [sp, #12]
   1e258:	ands	r6, r3, #2097152	; 0x200000
   1e25c:	bne	1e2f0 <__assert_fail@plt+0xcdd8>
   1e260:	ldrb	r3, [sl, #4]
   1e264:	cmp	r3, #2
   1e268:	moveq	r3, #9
   1e26c:	streq	r3, [r9]
   1e270:	bne	1d89c <__assert_fail@plt+0xc384>
   1e274:	ldr	r2, [r9]
   1e278:	adds	r2, r2, #0
   1e27c:	movne	r2, #1
   1e280:	cmp	r6, #0
   1e284:	movne	r2, #0
   1e288:	cmp	r2, #0
   1e28c:	beq	1e50c <__assert_fail@plt+0xcff4>
   1e290:	cmp	r5, #0
   1e294:	beq	1d9d8 <__assert_fail@plt+0xc4c0>
   1e298:	mov	r2, #0
   1e29c:	ldr	r1, [pc, #1176]	; 1e73c <__assert_fail@plt+0xd224>
   1e2a0:	mov	r0, r5
   1e2a4:	bl	154a4 <__assert_fail@plt+0x3f8c>
   1e2a8:	b	1d9d8 <__assert_fail@plt+0xc4c0>
   1e2ac:	ldrb	r3, [sl, #4]
   1e2b0:	cmp	r3, #24
   1e2b4:	moveq	r7, r8
   1e2b8:	beq	1e248 <__assert_fail@plt+0xcd30>
   1e2bc:	cmp	r3, #1
   1e2c0:	bne	1e2e8 <__assert_fail@plt+0xcdd0>
   1e2c4:	ldrb	r3, [sl]
   1e2c8:	cmp	r3, #44	; 0x2c
   1e2cc:	bne	1e2e8 <__assert_fail@plt+0xcdd0>
   1e2d0:	ldr	r2, [sp, #12]
   1e2d4:	mov	r1, sl
   1e2d8:	mov	r0, fp
   1e2dc:	bl	19a6c <__assert_fail@plt+0x8554>
   1e2e0:	mov	r7, r0
   1e2e4:	b	1e248 <__assert_fail@plt+0xcd30>
   1e2e8:	mvn	r7, #1
   1e2ec:	b	1e248 <__assert_fail@plt+0xcd30>
   1e2f0:	ldr	r3, [sp, #16]
   1e2f4:	str	r3, [fp, #40]	; 0x28
   1e2f8:	add	r3, sp, #120	; 0x78
   1e2fc:	ldm	r3, {r0, r1}
   1e300:	mov	r3, #1
   1e304:	stm	sl, {r0, r1}
   1e308:	strb	r3, [sl, #4]
   1e30c:	mov	r6, r5
   1e310:	b	1e274 <__assert_fail@plt+0xcd5c>
   1e314:	cmn	r7, #1
   1e318:	cmpne	r7, r8
   1e31c:	blt	1d89c <__assert_fail@plt+0xc384>
   1e320:	ldrb	r3, [sl, #4]
   1e324:	cmp	r3, #24
   1e328:	bne	1d89c <__assert_fail@plt+0xc384>
   1e32c:	cmn	r7, #1
   1e330:	ldr	r3, [pc, #1056]	; 1e758 <__assert_fail@plt+0xd240>
   1e334:	bne	1e354 <__assert_fail@plt+0xce3c>
   1e338:	cmp	r8, r3
   1e33c:	movle	r3, #0
   1e340:	movgt	r3, #1
   1e344:	cmp	r3, #0
   1e348:	beq	1e368 <__assert_fail@plt+0xce50>
   1e34c:	mov	r3, #15
   1e350:	b	1d8a0 <__assert_fail@plt+0xc388>
   1e354:	cmp	r7, r3
   1e358:	b	1e33c <__assert_fail@plt+0xce24>
   1e35c:	cmp	r3, #19
   1e360:	mvnne	r7, #0
   1e364:	moveq	r7, #1
   1e368:	ldr	r2, [sp, #12]
   1e36c:	mov	r1, fp
   1e370:	mov	r0, sl
   1e374:	bl	19a50 <__assert_fail@plt+0x8538>
   1e378:	cmp	r5, #0
   1e37c:	beq	1e30c <__assert_fail@plt+0xcdf4>
   1e380:	orrs	r6, r8, r7
   1e384:	bne	1e39c <__assert_fail@plt+0xce84>
   1e388:	mov	r2, r6
   1e38c:	ldr	r1, [pc, #936]	; 1e73c <__assert_fail@plt+0xd224>
   1e390:	mov	r0, r5
   1e394:	bl	154a4 <__assert_fail@plt+0x3f8c>
   1e398:	b	1e274 <__assert_fail@plt+0xcd5c>
   1e39c:	cmp	r8, #0
   1e3a0:	movgt	r6, r5
   1e3a4:	strgt	r5, [sp, #16]
   1e3a8:	movgt	r3, #2
   1e3ac:	bgt	1e478 <__assert_fail@plt+0xcf60>
   1e3b0:	mov	r3, #0
   1e3b4:	str	r5, [sp, #16]
   1e3b8:	str	r3, [sp, #20]
   1e3bc:	ldr	r3, [sp, #16]
   1e3c0:	ldrb	r3, [r3, #24]
   1e3c4:	cmp	r3, #17
   1e3c8:	bne	1e3e0 <__assert_fail@plt+0xcec8>
   1e3cc:	ldr	r3, [sp, #16]
   1e3d0:	ldr	r1, [pc, #900]	; 1e75c <__assert_fail@plt+0xd244>
   1e3d4:	mov	r0, r3
   1e3d8:	ldr	r2, [r3, #20]
   1e3dc:	bl	154a4 <__assert_fail@plt+0x3f8c>
   1e3e0:	cmn	r7, #1
   1e3e4:	movne	r3, #10
   1e3e8:	moveq	r3, #11
   1e3ec:	mov	r2, #0
   1e3f0:	ldr	r1, [sp, #16]
   1e3f4:	mov	r0, r4
   1e3f8:	bl	157b8 <__assert_fail@plt+0x42a0>
   1e3fc:	subs	r6, r0, #0
   1e400:	addne	r8, r8, #2
   1e404:	beq	1e4ac <__assert_fail@plt+0xcf94>
   1e408:	cmp	r7, r8
   1e40c:	bge	1e4b4 <__assert_fail@plt+0xcf9c>
   1e410:	ldr	r3, [sp, #20]
   1e414:	cmp	r3, #0
   1e418:	beq	1e274 <__assert_fail@plt+0xcd5c>
   1e41c:	mov	r2, r6
   1e420:	mov	r3, #16
   1e424:	ldr	r1, [sp, #20]
   1e428:	mov	r0, r4
   1e42c:	bl	157b8 <__assert_fail@plt+0x42a0>
   1e430:	mov	r6, r0
   1e434:	b	1e274 <__assert_fail@plt+0xcd5c>
   1e438:	mov	r1, r4
   1e43c:	ldr	r0, [sp, #16]
   1e440:	bl	15714 <__assert_fail@plt+0x41fc>
   1e444:	mov	r3, #16
   1e448:	mov	r1, r6
   1e44c:	str	r0, [sp, #16]
   1e450:	mov	r2, r0
   1e454:	mov	r0, r4
   1e458:	bl	157b8 <__assert_fail@plt+0x42a0>
   1e45c:	ldr	r3, [sp, #16]
   1e460:	cmp	r0, #0
   1e464:	cmpne	r3, #0
   1e468:	mov	r6, r0
   1e46c:	beq	1e4ac <__assert_fail@plt+0xcf94>
   1e470:	ldr	r3, [sp, #20]
   1e474:	add	r3, r3, #1
   1e478:	str	r3, [sp, #20]
   1e47c:	ldr	r3, [sp, #20]
   1e480:	cmp	r8, r3
   1e484:	bge	1e438 <__assert_fail@plt+0xcf20>
   1e488:	cmp	r8, r7
   1e48c:	beq	1e274 <__assert_fail@plt+0xcd5c>
   1e490:	mov	r1, r4
   1e494:	ldr	r0, [sp, #16]
   1e498:	bl	15714 <__assert_fail@plt+0x41fc>
   1e49c:	subs	r3, r0, #0
   1e4a0:	str	r3, [sp, #16]
   1e4a4:	strne	r6, [sp, #20]
   1e4a8:	bne	1e3bc <__assert_fail@plt+0xcea4>
   1e4ac:	mov	r3, #12
   1e4b0:	b	1d8a0 <__assert_fail@plt+0xc388>
   1e4b4:	mov	r1, r4
   1e4b8:	ldr	r0, [sp, #16]
   1e4bc:	bl	15714 <__assert_fail@plt+0x41fc>
   1e4c0:	mov	r3, #16
   1e4c4:	mov	r1, r6
   1e4c8:	str	r0, [sp, #16]
   1e4cc:	mov	r2, r0
   1e4d0:	mov	r0, r4
   1e4d4:	bl	157b8 <__assert_fail@plt+0x42a0>
   1e4d8:	ldr	r3, [sp, #16]
   1e4dc:	cmp	r0, #0
   1e4e0:	cmpne	r3, #0
   1e4e4:	mov	r1, r0
   1e4e8:	beq	1e4ac <__assert_fail@plt+0xcf94>
   1e4ec:	mov	r3, #10
   1e4f0:	mov	r2, #0
   1e4f4:	mov	r0, r4
   1e4f8:	bl	157b8 <__assert_fail@plt+0x42a0>
   1e4fc:	subs	r6, r0, #0
   1e500:	beq	1e4ac <__assert_fail@plt+0xcf94>
   1e504:	add	r8, r8, #1
   1e508:	b	1e408 <__assert_fail@plt+0xcef0>
   1e50c:	ldr	r3, [sp, #12]
   1e510:	tst	r3, #16777216	; 0x1000000
   1e514:	beq	1e540 <__assert_fail@plt+0xd028>
   1e518:	ldrb	r3, [sl, #4]
   1e51c:	cmp	r3, #23
   1e520:	cmpne	r3, #11
   1e524:	bne	1e540 <__assert_fail@plt+0xd028>
   1e528:	cmp	r6, #0
   1e52c:	beq	1df74 <__assert_fail@plt+0xca5c>
   1e530:	ldr	r1, [pc, #516]	; 1e73c <__assert_fail@plt+0xd224>
   1e534:	mov	r0, r6
   1e538:	bl	154a4 <__assert_fail@plt+0x3f8c>
   1e53c:	b	1df74 <__assert_fail@plt+0xca5c>
   1e540:	mov	r5, r6
   1e544:	b	1d820 <__assert_fail@plt+0xc308>
   1e548:	add	r2, sp, #120	; 0x78
   1e54c:	add	r0, sp, #152	; 0x98
   1e550:	str	r2, [sp, #76]	; 0x4c
   1e554:	mov	r2, #1
   1e558:	str	r7, [r0, #-80]!	; 0xffffffb0
   1e55c:	str	r2, [sp, #4]
   1e560:	ldr	r2, [sp, #12]
   1e564:	mov	r1, fp
   1e568:	str	r2, [sp]
   1e56c:	add	r2, sp, #80	; 0x50
   1e570:	bl	19b1c <__assert_fail@plt+0x8604>
   1e574:	subs	r3, r0, #0
   1e578:	str	r3, [sp, #20]
   1e57c:	beq	1dc48 <__assert_fail@plt+0xc730>
   1e580:	ldr	r3, [sp, #20]
   1e584:	b	1daa0 <__assert_fail@plt+0xc588>
   1e588:	cmp	r8, #3
   1e58c:	beq	1dc84 <__assert_fail@plt+0xc76c>
   1e590:	cmp	r7, #3
   1e594:	bne	1e5a8 <__assert_fail@plt+0xd090>
   1e598:	ldr	r0, [sp, #76]	; 0x4c
   1e59c:	bl	113c8 <strlen@plt>
   1e5a0:	cmp	r0, #1
   1e5a4:	bhi	1dc94 <__assert_fail@plt+0xc77c>
   1e5a8:	cmp	r8, #0
   1e5ac:	ldrbeq	r5, [sp, #68]	; 0x44
   1e5b0:	beq	1e5c8 <__assert_fail@plt+0xd0b0>
   1e5b4:	cmp	r8, #3
   1e5b8:	movne	r5, #0
   1e5bc:	bne	1e5c8 <__assert_fail@plt+0xd0b0>
   1e5c0:	ldr	r3, [sp, #68]	; 0x44
   1e5c4:	ldrb	r5, [r3]
   1e5c8:	cmp	r7, #0
   1e5cc:	ldrbeq	r7, [sp, #76]	; 0x4c
   1e5d0:	beq	1e5e4 <__assert_fail@plt+0xd0cc>
   1e5d4:	cmp	r7, #3
   1e5d8:	movne	r7, #0
   1e5dc:	ldreq	r3, [sp, #76]	; 0x4c
   1e5e0:	ldrbeq	r7, [r3]
   1e5e4:	cmp	r8, #0
   1e5e8:	cmpne	r8, #3
   1e5ec:	ldrne	r5, [sp, #68]	; 0x44
   1e5f0:	bne	1e60c <__assert_fail@plt+0xd0f4>
   1e5f4:	ldr	r3, [r4, #92]	; 0x5c
   1e5f8:	cmp	r3, #1
   1e5fc:	ble	1e60c <__assert_fail@plt+0xd0f4>
   1e600:	mov	r0, r5
   1e604:	bl	11428 <btowc@plt>
   1e608:	mov	r5, r0
   1e60c:	ldr	r3, [sp, #72]	; 0x48
   1e610:	cmp	r3, #3
   1e614:	cmpne	r3, #0
   1e618:	ldrne	r7, [sp, #76]	; 0x4c
   1e61c:	bne	1e638 <__assert_fail@plt+0xd120>
   1e620:	ldr	r3, [r4, #92]	; 0x5c
   1e624:	cmp	r3, #1
   1e628:	ble	1e638 <__assert_fail@plt+0xd120>
   1e62c:	mov	r0, r7
   1e630:	bl	11428 <btowc@plt>
   1e634:	mov	r7, r0
   1e638:	cmn	r5, #1
   1e63c:	cmnne	r7, #1
   1e640:	beq	1dc94 <__assert_fail@plt+0xc77c>
   1e644:	ldr	r3, [sp, #44]	; 0x2c
   1e648:	cmp	r5, r7
   1e64c:	movls	r3, #0
   1e650:	andhi	r3, r3, #1
   1e654:	cmp	r3, #0
   1e658:	bne	1dc7c <__assert_fail@plt+0xc764>
   1e65c:	ldr	r3, [r4, #92]	; 0x5c
   1e660:	cmp	r3, #1
   1e664:	ble	1dcc4 <__assert_fail@plt+0xc7ac>
   1e668:	ldr	r3, [r6, #32]
   1e66c:	ldr	r2, [sp, #32]
   1e670:	cmp	r3, r2
   1e674:	bne	1dca4 <__assert_fail@plt+0xc78c>
   1e678:	lsl	r8, r2, #1
   1e67c:	add	r8, r8, #1
   1e680:	ldr	r0, [r6, #4]
   1e684:	lsl	r3, r8, #2
   1e688:	mov	r1, r3
   1e68c:	str	r3, [sp, #52]	; 0x34
   1e690:	bl	20bfc <__assert_fail@plt+0xf6e4>
   1e694:	ldr	r3, [sp, #52]	; 0x34
   1e698:	mov	r1, r3
   1e69c:	str	r0, [sp, #48]	; 0x30
   1e6a0:	ldr	r0, [r6, #8]
   1e6a4:	bl	20bfc <__assert_fail@plt+0xf6e4>
   1e6a8:	ldr	r2, [sp, #48]	; 0x30
   1e6ac:	cmp	r0, #0
   1e6b0:	cmpne	r2, #0
   1e6b4:	mov	r3, r0
   1e6b8:	bne	1dc9c <__assert_fail@plt+0xc784>
   1e6bc:	str	r0, [sp, #20]
   1e6c0:	mov	r0, r2
   1e6c4:	bl	130e8 <__assert_fail@plt+0x1bd0>
   1e6c8:	ldr	r3, [sp, #20]
   1e6cc:	mov	r0, r3
   1e6d0:	bl	130e8 <__assert_fail@plt+0x1bd0>
   1e6d4:	mov	r3, #12
   1e6d8:	str	r3, [sp, #20]
   1e6dc:	b	1dcfc <__assert_fail@plt+0xc7e4>
   1e6e0:	mov	r3, #3
   1e6e4:	strb	r3, [sp, #124]	; 0x7c
   1e6e8:	ldr	r3, [sp, #16]
   1e6ec:	mov	r2, #0
   1e6f0:	str	r3, [sp, #120]	; 0x78
   1e6f4:	mov	r1, r2
   1e6f8:	add	r3, sp, #120	; 0x78
   1e6fc:	mov	r0, r4
   1e700:	bl	15668 <__assert_fail@plt+0x4150>
   1e704:	subs	r1, r0, #0
   1e708:	beq	1e724 <__assert_fail@plt+0xd20c>
   1e70c:	mov	r3, #10
   1e710:	mov	r2, r5
   1e714:	mov	r0, r4
   1e718:	bl	157b8 <__assert_fail@plt+0x42a0>
   1e71c:	subs	r5, r0, #0
   1e720:	bne	1d9bc <__assert_fail@plt+0xc4a4>
   1e724:	mov	r3, #12
   1e728:	b	1daa0 <__assert_fail@plt+0xc588>
   1e72c:	cmp	r7, #3
   1e730:	bne	1e5c0 <__assert_fail@plt+0xd0a8>
   1e734:	b	1e598 <__assert_fail@plt+0xd080>
   1e738:	addeq	r0, ip, r0, lsl #16
   1e73c:	andeq	r6, r1, r8, ror r2
   1e740:	andeq	r0, r0, pc, lsl #6
   1e744:	mvnseq	r0, #0
   1e748:	andeq	r2, r2, r2, lsr r4
   1e74c:	andeq	r1, r2, r4, lsr lr
   1e750:	andeq	r1, r2, sl, asr #29
   1e754:	andeq	r2, r2, lr, lsr r4
   1e758:	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
   1e75c:	andeq	r5, r1, r8, lsl #2
   1e760:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e764:	sub	sp, sp, #20
   1e768:	ldr	ip, [r1]
   1e76c:	ldr	r5, [sp, #60]	; 0x3c
   1e770:	mov	sl, r3
   1e774:	str	r0, [sp, #12]
   1e778:	stmib	sp, {r5, ip}
   1e77c:	ldr	ip, [sp, #56]	; 0x38
   1e780:	mov	r7, r1
   1e784:	str	ip, [sp]
   1e788:	mov	r8, r2
   1e78c:	bl	1d704 <__assert_fail@plt+0xc1ec>
   1e790:	ldr	r3, [r5]
   1e794:	adds	r3, r3, #0
   1e798:	movne	r3, #1
   1e79c:	cmp	r0, #0
   1e7a0:	movne	r3, #0
   1e7a4:	cmp	r3, #0
   1e7a8:	moveq	r4, r0
   1e7ac:	moveq	fp, #16
   1e7b0:	beq	1e828 <__assert_fail@plt+0xd310>
   1e7b4:	mov	r4, #0
   1e7b8:	mov	r0, r4
   1e7bc:	add	sp, sp, #20
   1e7c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e7c4:	cmp	r4, #0
   1e7c8:	cmpne	r0, #0
   1e7cc:	beq	1e818 <__assert_fail@plt+0xd300>
   1e7d0:	mov	r2, r0
   1e7d4:	mov	r3, fp
   1e7d8:	mov	r1, r4
   1e7dc:	ldr	r0, [sp, #8]
   1e7e0:	bl	157b8 <__assert_fail@plt+0x42a0>
   1e7e4:	subs	r9, r0, #0
   1e7e8:	bne	1e824 <__assert_fail@plt+0xd30c>
   1e7ec:	mov	r2, r9
   1e7f0:	ldr	r1, [pc, #184]	; 1e8b0 <__assert_fail@plt+0xd398>
   1e7f4:	mov	r0, r6
   1e7f8:	bl	154a4 <__assert_fail@plt+0x3f8c>
   1e7fc:	mov	r2, r9
   1e800:	ldr	r1, [pc, #168]	; 1e8b0 <__assert_fail@plt+0xd398>
   1e804:	mov	r0, r4
   1e808:	bl	154a4 <__assert_fail@plt+0x3f8c>
   1e80c:	mov	r2, #12
   1e810:	str	r2, [r5]
   1e814:	b	1e7b4 <__assert_fail@plt+0xd29c>
   1e818:	cmp	r4, #0
   1e81c:	movne	r9, r4
   1e820:	moveq	r9, r0
   1e824:	mov	r4, r9
   1e828:	ldrb	r2, [r8, #4]
   1e82c:	and	r3, r2, #247	; 0xf7
   1e830:	cmp	r3, #2
   1e834:	beq	1e7b8 <__assert_fail@plt+0xd2a0>
   1e838:	ldr	r3, [sp, #56]	; 0x38
   1e83c:	clz	r3, r3
   1e840:	lsr	r3, r3, #5
   1e844:	cmp	r2, #9
   1e848:	orrne	r3, r3, #1
   1e84c:	cmp	r3, #0
   1e850:	beq	1e7b8 <__assert_fail@plt+0xd2a0>
   1e854:	ldr	r3, [sp, #56]	; 0x38
   1e858:	str	r5, [sp, #4]
   1e85c:	str	r3, [sp]
   1e860:	mov	r2, r8
   1e864:	mov	r3, sl
   1e868:	mov	r1, r7
   1e86c:	ldr	r0, [sp, #12]
   1e870:	bl	1d704 <__assert_fail@plt+0xc1ec>
   1e874:	ldr	r3, [r5]
   1e878:	adds	r3, r3, #0
   1e87c:	movne	r3, #1
   1e880:	cmp	r0, #0
   1e884:	movne	r3, #0
   1e888:	cmp	r3, #0
   1e88c:	mov	r6, r0
   1e890:	beq	1e7c4 <__assert_fail@plt+0xd2ac>
   1e894:	cmp	r4, #0
   1e898:	beq	1e7b4 <__assert_fail@plt+0xd29c>
   1e89c:	mov	r2, #0
   1e8a0:	ldr	r1, [pc, #8]	; 1e8b0 <__assert_fail@plt+0xd398>
   1e8a4:	mov	r0, r4
   1e8a8:	bl	154a4 <__assert_fail@plt+0x3f8c>
   1e8ac:	b	1e7b4 <__assert_fail@plt+0xd29c>
   1e8b0:	andeq	r6, r1, r8, ror r2
   1e8b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e8b8:	sub	sp, sp, #28
   1e8bc:	ldr	r6, [r1]
   1e8c0:	ldr	r7, [sp, #68]	; 0x44
   1e8c4:	mov	fp, r3
   1e8c8:	ldr	ip, [r6, #84]	; 0x54
   1e8cc:	str	r7, [sp, #4]
   1e8d0:	str	ip, [sp, #12]
   1e8d4:	ldr	ip, [sp, #64]	; 0x40
   1e8d8:	mov	r9, r0
   1e8dc:	str	ip, [sp]
   1e8e0:	mov	sl, r1
   1e8e4:	mov	r8, r2
   1e8e8:	bl	1e760 <__assert_fail@plt+0xd248>
   1e8ec:	ldr	r5, [r7]
   1e8f0:	adds	r5, r5, #0
   1e8f4:	movne	r5, #1
   1e8f8:	cmp	r0, #0
   1e8fc:	movne	r5, #0
   1e900:	cmp	r5, #0
   1e904:	orreq	r3, fp, #8388608	; 0x800000
   1e908:	moveq	r4, r0
   1e90c:	streq	r3, [sp, #20]
   1e910:	beq	1e960 <__assert_fail@plt+0xd448>
   1e914:	mov	r4, #0
   1e918:	mov	r0, r4
   1e91c:	add	sp, sp, #28
   1e920:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e924:	ldr	r3, [r6, #84]	; 0x54
   1e928:	ldr	r1, [sp, #16]
   1e92c:	orr	r3, r3, r1
   1e930:	str	r3, [r6, #84]	; 0x54
   1e934:	mov	r1, r4
   1e938:	mov	r3, #10
   1e93c:	mov	r0, r6
   1e940:	bl	157b8 <__assert_fail@plt+0x42a0>
   1e944:	subs	r4, r0, #0
   1e948:	bne	1e960 <__assert_fail@plt+0xd448>
   1e94c:	mov	r3, #12
   1e950:	str	r3, [r7]
   1e954:	b	1e918 <__assert_fail@plt+0xd400>
   1e958:	mov	r2, r5
   1e95c:	b	1e934 <__assert_fail@plt+0xd41c>
   1e960:	ldrb	r3, [r8, #4]
   1e964:	cmp	r3, #10
   1e968:	bne	1e918 <__assert_fail@plt+0xd400>
   1e96c:	ldr	r2, [sp, #20]
   1e970:	mov	r1, r9
   1e974:	mov	r0, r8
   1e978:	bl	19a50 <__assert_fail@plt+0x8538>
   1e97c:	ldrb	r2, [r8, #4]
   1e980:	and	r3, r2, #247	; 0xf7
   1e984:	cmp	r3, #2
   1e988:	beq	1e958 <__assert_fail@plt+0xd440>
   1e98c:	ldr	r3, [sp, #64]	; 0x40
   1e990:	clz	r3, r3
   1e994:	lsr	r3, r3, #5
   1e998:	cmp	r2, #9
   1e99c:	orrne	r3, r3, #1
   1e9a0:	cmp	r3, #0
   1e9a4:	beq	1e958 <__assert_fail@plt+0xd440>
   1e9a8:	ldr	r3, [r6, #84]	; 0x54
   1e9ac:	mov	r2, r8
   1e9b0:	str	r3, [sp, #16]
   1e9b4:	ldr	r3, [sp, #12]
   1e9b8:	mov	r1, sl
   1e9bc:	str	r3, [r6, #84]	; 0x54
   1e9c0:	ldr	r3, [sp, #64]	; 0x40
   1e9c4:	str	r7, [sp, #4]
   1e9c8:	str	r3, [sp]
   1e9cc:	mov	r0, r9
   1e9d0:	mov	r3, fp
   1e9d4:	bl	1e760 <__assert_fail@plt+0xd248>
   1e9d8:	ldr	r3, [r7]
   1e9dc:	adds	r3, r3, #0
   1e9e0:	movne	r3, #1
   1e9e4:	cmp	r0, #0
   1e9e8:	movne	r3, #0
   1e9ec:	cmp	r3, #0
   1e9f0:	mov	r2, r0
   1e9f4:	beq	1e924 <__assert_fail@plt+0xd40c>
   1e9f8:	cmp	r4, #0
   1e9fc:	beq	1e914 <__assert_fail@plt+0xd3fc>
   1ea00:	mov	r2, #0
   1ea04:	ldr	r1, [pc, #8]	; 1ea14 <__assert_fail@plt+0xd4fc>
   1ea08:	mov	r0, r4
   1ea0c:	bl	154a4 <__assert_fail@plt+0x3f8c>
   1ea10:	b	1e914 <__assert_fail@plt+0xd3fc>
   1ea14:	andeq	r6, r1, r8, ror r2
   1ea18:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ea1c:	mov	r9, r3
   1ea20:	ldrb	r3, [r0, #28]
   1ea24:	sub	sp, sp, #132	; 0x84
   1ea28:	mov	r7, r2
   1ea2c:	and	r3, r3, #144	; 0x90
   1ea30:	strb	r3, [r0, #28]
   1ea34:	ldr	r3, [r0, #4]
   1ea38:	mov	r2, #0
   1ea3c:	cmp	r3, #159	; 0x9f
   1ea40:	mov	r6, r0
   1ea44:	mov	sl, r1
   1ea48:	str	r2, [sp, #24]
   1ea4c:	str	r9, [r0, #12]
   1ea50:	str	r2, [r0, #8]
   1ea54:	str	r2, [r0, #24]
   1ea58:	ldr	r4, [r0]
   1ea5c:	bhi	1ea80 <__assert_fail@plt+0xd568>
   1ea60:	mov	r0, r4
   1ea64:	mov	r1, #160	; 0xa0
   1ea68:	bl	20bfc <__assert_fail@plt+0xf6e4>
   1ea6c:	subs	r4, r0, #0
   1ea70:	beq	1f54c <__assert_fail@plt+0xe034>
   1ea74:	mov	r3, #160	; 0xa0
   1ea78:	str	r3, [r6, #4]
   1ea7c:	str	r4, [r6]
   1ea80:	mov	r2, #160	; 0xa0
   1ea84:	str	r2, [r6, #8]
   1ea88:	mov	r1, #0
   1ea8c:	mov	r0, r4
   1ea90:	bl	1141c <memset@plt>
   1ea94:	mov	r3, #31
   1ea98:	str	r3, [r4, #64]	; 0x40
   1ea9c:	ldr	r3, [pc, #2796]	; 1f590 <__assert_fail@plt+0xe078>
   1eaa0:	cmp	r7, r3
   1eaa4:	bls	1ec48 <__assert_fail@plt+0xd730>
   1eaa8:	mov	r5, #12
   1eaac:	cmp	r5, #0
   1eab0:	str	r5, [sp, #24]
   1eab4:	bne	1f578 <__assert_fail@plt+0xe060>
   1eab8:	ldr	r8, [pc, #2772]	; 1f594 <__assert_fail@plt+0xe07c>
   1eabc:	ldr	r1, [pc, #2772]	; 1f598 <__assert_fail@plt+0xe080>
   1eac0:	cmp	r8, #0
   1eac4:	mov	r3, #1
   1eac8:	moveq	r3, r5
   1eacc:	cmp	r1, #0
   1ead0:	mov	r2, #1
   1ead4:	moveq	r2, r1
   1ead8:	orr	r3, r3, r2
   1eadc:	tst	r3, #1
   1eae0:	bne	1f554 <__assert_fail@plt+0xe03c>
   1eae4:	ldr	r3, [r6, #20]
   1eae8:	mov	r2, #84	; 0x54
   1eaec:	str	r3, [sp, #12]
   1eaf0:	mov	r1, #0
   1eaf4:	ands	r3, r9, #4194304	; 0x400000
   1eaf8:	add	r0, sp, #44	; 0x2c
   1eafc:	movne	fp, #1
   1eb00:	moveq	fp, #0
   1eb04:	str	r3, [sp, #16]
   1eb08:	bl	1141c <memset@plt>
   1eb0c:	ldr	r3, [sp, #12]
   1eb10:	ldrb	r2, [r4, #88]	; 0x58
   1eb14:	str	r3, [sp, #108]	; 0x6c
   1eb18:	strb	fp, [sp, #116]	; 0x74
   1eb1c:	cmp	r3, #0
   1eb20:	orrne	fp, fp, #1
   1eb24:	ldr	r3, [r4, #92]	; 0x5c
   1eb28:	cmp	r7, #0
   1eb2c:	str	r3, [sp, #124]	; 0x7c
   1eb30:	lsr	r3, r2, #2
   1eb34:	lsr	r2, r2, #3
   1eb38:	and	r3, r3, #1
   1eb3c:	and	r2, r2, #1
   1eb40:	str	sl, [sp, #44]	; 0x2c
   1eb44:	str	r7, [sp, #92]	; 0x5c
   1eb48:	str	r7, [sp, #88]	; 0x58
   1eb4c:	strb	fp, [sp, #119]	; 0x77
   1eb50:	strb	r3, [sp, #117]	; 0x75
   1eb54:	strb	r2, [sp, #118]	; 0x76
   1eb58:	str	r7, [sp, #100]	; 0x64
   1eb5c:	str	r7, [sp, #96]	; 0x60
   1eb60:	bgt	1edc0 <__assert_fail@plt+0xd8a8>
   1eb64:	ldrb	r3, [sp, #119]	; 0x77
   1eb68:	cmp	r3, #0
   1eb6c:	ldrne	sl, [sp, #48]	; 0x30
   1eb70:	ands	r3, r9, #4194304	; 0x400000
   1eb74:	cmp	r3, #0
   1eb78:	str	sl, [sp, #48]	; 0x30
   1eb7c:	ldr	r3, [r4, #92]	; 0x5c
   1eb80:	beq	1ede8 <__assert_fail@plt+0xd8d0>
   1eb84:	cmp	r3, #1
   1eb88:	ble	1eddc <__assert_fail@plt+0xd8c4>
   1eb8c:	add	r0, sp, #44	; 0x2c
   1eb90:	bl	15c20 <__assert_fail@plt+0x4708>
   1eb94:	subs	r5, r0, #0
   1eb98:	bne	1ebd4 <__assert_fail@plt+0xd6bc>
   1eb9c:	ldr	r3, [sp, #76]	; 0x4c
   1eba0:	cmp	r7, r3
   1eba4:	ble	1ebd4 <__assert_fail@plt+0xd6bc>
   1eba8:	ldr	r2, [r4, #92]	; 0x5c
   1ebac:	ldr	r3, [sp, #72]	; 0x48
   1ebb0:	ldr	r1, [sp, #80]	; 0x50
   1ebb4:	add	r3, r3, r2
   1ebb8:	cmp	r1, r3
   1ebbc:	bgt	1ebd4 <__assert_fail@plt+0xd6bc>
   1ebc0:	lsl	r1, r1, #1
   1ebc4:	add	r0, sp, #44	; 0x2c
   1ebc8:	bl	1557c <__assert_fail@plt+0x4064>
   1ebcc:	subs	r5, r0, #0
   1ebd0:	beq	1eb8c <__assert_fail@plt+0xd674>
   1ebd4:	cmp	r5, #0
   1ebd8:	str	r5, [sp, #24]
   1ebdc:	beq	1ee30 <__assert_fail@plt+0xd918>
   1ebe0:	ldr	r7, [r6]
   1ebe4:	ldr	r5, [r7, #56]	; 0x38
   1ebe8:	cmp	r5, #0
   1ebec:	bne	1ee1c <__assert_fail@plt+0xd904>
   1ebf0:	mov	r3, #31
   1ebf4:	ldr	r0, [r7, #16]
   1ebf8:	str	r5, [r7, #56]	; 0x38
   1ebfc:	str	r3, [r7, #64]	; 0x40
   1ec00:	str	r5, [r7, #52]	; 0x34
   1ec04:	bl	130e8 <__assert_fail@plt+0x1bd0>
   1ec08:	str	r5, [r7, #16]
   1ec0c:	add	r0, sp, #44	; 0x2c
   1ec10:	bl	16520 <__assert_fail@plt+0x5008>
   1ec14:	ldr	r2, [pc, #2428]	; 1f598 <__assert_fail@plt+0xe080>
   1ec18:	mov	r3, #1
   1ec1c:	cmp	r2, #0
   1ec20:	moveq	r3, r5
   1ec24:	cmp	r8, #0
   1ec28:	mov	r2, #1
   1ec2c:	moveq	r2, r8
   1ec30:	orr	r3, r3, r2
   1ec34:	tst	r3, #1
   1ec38:	beq	1f578 <__assert_fail@plt+0xe060>
   1ec3c:	add	r0, r4, #136	; 0x88
   1ec40:	bl	111f4 <pthread_mutex_destroy@plt>
   1ec44:	b	1f578 <__assert_fail@plt+0xe060>
   1ec48:	add	r0, r7, #1
   1ec4c:	str	r0, [r4, #4]
   1ec50:	lsl	r0, r0, #3
   1ec54:	bl	20bbc <__assert_fail@plt+0xf6a4>
   1ec58:	mov	r5, #1
   1ec5c:	str	r0, [r4]
   1ec60:	cmp	r7, r5
   1ec64:	lslcs	r5, r5, #1
   1ec68:	bcs	1ec60 <__assert_fail@plt+0xd748>
   1ec6c:	mov	r1, r5
   1ec70:	mov	r0, #12
   1ec74:	bl	20b74 <__assert_fail@plt+0xf65c>
   1ec78:	sub	r5, r5, #1
   1ec7c:	str	r5, [r4, #68]	; 0x44
   1ec80:	str	r0, [r4, #32]
   1ec84:	bl	11314 <__ctype_get_mb_cur_max@plt>
   1ec88:	str	r0, [r4, #92]	; 0x5c
   1ec8c:	mov	r0, #14
   1ec90:	bl	114ac <nl_langinfo@plt>
   1ec94:	ldrb	r3, [r0]
   1ec98:	and	r3, r3, #223	; 0xdf
   1ec9c:	cmp	r3, #85	; 0x55
   1eca0:	bne	1ecf0 <__assert_fail@plt+0xd7d8>
   1eca4:	ldrb	r3, [r0, #1]
   1eca8:	and	r3, r3, #223	; 0xdf
   1ecac:	cmp	r3, #84	; 0x54
   1ecb0:	bne	1ecf0 <__assert_fail@plt+0xd7d8>
   1ecb4:	ldrb	r3, [r0, #2]
   1ecb8:	and	r3, r3, #223	; 0xdf
   1ecbc:	cmp	r3, #70	; 0x46
   1ecc0:	bne	1ecf0 <__assert_fail@plt+0xd7d8>
   1ecc4:	ldrb	r3, [r0, #3]
   1ecc8:	ldr	r1, [pc, #2252]	; 1f59c <__assert_fail@plt+0xe084>
   1eccc:	cmp	r3, #45	; 0x2d
   1ecd0:	moveq	r3, #4
   1ecd4:	movne	r3, #3
   1ecd8:	add	r0, r0, r3
   1ecdc:	bl	111d0 <strcmp@plt>
   1ece0:	cmp	r0, #0
   1ece4:	ldrbeq	r3, [r4, #88]	; 0x58
   1ece8:	orreq	r3, r3, #4
   1ecec:	strbeq	r3, [r4, #88]	; 0x58
   1ecf0:	ldrb	r3, [r4, #88]	; 0x58
   1ecf4:	bic	r3, r3, #8
   1ecf8:	strb	r3, [r4, #88]	; 0x58
   1ecfc:	ldr	r3, [r4, #92]	; 0x5c
   1ed00:	cmp	r3, #1
   1ed04:	ble	1eda0 <__assert_fail@plt+0xd888>
   1ed08:	ldrb	r5, [r4, #88]	; 0x58
   1ed0c:	ands	r5, r5, #4
   1ed10:	ldrne	r3, [pc, #2184]	; 1f5a0 <__assert_fail@plt+0xe088>
   1ed14:	strne	r3, [r4, #60]	; 0x3c
   1ed18:	bne	1eda0 <__assert_fail@plt+0xd888>
   1ed1c:	mov	r1, #1
   1ed20:	mov	r0, #32
   1ed24:	bl	20b74 <__assert_fail@plt+0xf65c>
   1ed28:	cmp	r0, #0
   1ed2c:	str	r0, [r4, #60]	; 0x3c
   1ed30:	movne	r2, #1
   1ed34:	beq	1eaa8 <__assert_fail@plt+0xd590>
   1ed38:	lsl	fp, r5, #3
   1ed3c:	mov	r8, #0
   1ed40:	add	r3, r8, fp
   1ed44:	mov	r0, r3
   1ed48:	str	r2, [sp, #16]
   1ed4c:	str	r3, [sp, #12]
   1ed50:	bl	11428 <btowc@plt>
   1ed54:	ldr	r2, [sp, #16]
   1ed58:	ldr	r3, [sp, #12]
   1ed5c:	cmn	r0, #1
   1ed60:	ldrne	ip, [r4, #60]	; 0x3c
   1ed64:	ldrne	r1, [ip, r5]
   1ed68:	orrne	r1, r1, r2, lsl r8
   1ed6c:	strne	r1, [ip, r5]
   1ed70:	bics	r1, r3, #127	; 0x7f
   1ed74:	bne	1ed88 <__assert_fail@plt+0xd870>
   1ed78:	cmp	r3, r0
   1ed7c:	ldrbne	r3, [r4, #88]	; 0x58
   1ed80:	orrne	r3, r3, #8
   1ed84:	strbne	r3, [r4, #88]	; 0x58
   1ed88:	add	r8, r8, #1
   1ed8c:	cmp	r8, #32
   1ed90:	bne	1ed40 <__assert_fail@plt+0xd828>
   1ed94:	add	r5, r5, #4
   1ed98:	cmp	r5, #32
   1ed9c:	bne	1ed38 <__assert_fail@plt+0xd820>
   1eda0:	ldr	r3, [r4]
   1eda4:	cmp	r3, #0
   1eda8:	beq	1eaa8 <__assert_fail@plt+0xd590>
   1edac:	ldr	r3, [r4, #32]
   1edb0:	cmp	r3, #0
   1edb4:	beq	1eaa8 <__assert_fail@plt+0xd590>
   1edb8:	mov	r5, #0
   1edbc:	b	1eaac <__assert_fail@plt+0xd594>
   1edc0:	add	r1, r7, #1
   1edc4:	add	r0, sp, #44	; 0x2c
   1edc8:	bl	1557c <__assert_fail@plt+0x4064>
   1edcc:	cmp	r0, #0
   1edd0:	beq	1eb64 <__assert_fail@plt+0xd64c>
   1edd4:	mov	r5, r0
   1edd8:	b	1ebd4 <__assert_fail@plt+0xd6bc>
   1eddc:	add	r0, sp, #44	; 0x2c
   1ede0:	bl	160f0 <__assert_fail@plt+0x4bd8>
   1ede4:	b	1ebd4 <__assert_fail@plt+0xd6bc>
   1ede8:	cmp	r3, #1
   1edec:	ble	1edfc <__assert_fail@plt+0xd8e4>
   1edf0:	add	r0, sp, #44	; 0x2c
   1edf4:	bl	15acc <__assert_fail@plt+0x45b4>
   1edf8:	b	1ebd4 <__assert_fail@plt+0xd6bc>
   1edfc:	cmp	fp, #0
   1ee00:	ldreq	r3, [sp, #80]	; 0x50
   1ee04:	streq	r3, [sp, #72]	; 0x48
   1ee08:	streq	r3, [sp, #76]	; 0x4c
   1ee0c:	beq	1ebd4 <__assert_fail@plt+0xd6bc>
   1ee10:	add	r0, sp, #44	; 0x2c
   1ee14:	bl	14f10 <__assert_fail@plt+0x39f8>
   1ee18:	b	1ebd4 <__assert_fail@plt+0xd6bc>
   1ee1c:	ldr	r9, [r5]
   1ee20:	mov	r0, r5
   1ee24:	bl	130e8 <__assert_fail@plt+0x1bd0>
   1ee28:	mov	r5, r9
   1ee2c:	b	1ebe8 <__assert_fail@plt+0xd6d0>
   1ee30:	ldr	r7, [r6]
   1ee34:	orr	r2, r9, #8388608	; 0x800000
   1ee38:	str	r5, [r6, #24]
   1ee3c:	add	r1, sp, #44	; 0x2c
   1ee40:	str	r9, [r7, #128]	; 0x80
   1ee44:	add	r0, sp, #32
   1ee48:	bl	19a50 <__assert_fail@plt+0x8538>
   1ee4c:	add	r3, sp, #24
   1ee50:	str	r3, [sp, #4]
   1ee54:	str	r5, [sp]
   1ee58:	mov	r3, r9
   1ee5c:	add	r2, sp, #32
   1ee60:	mov	r1, r6
   1ee64:	add	r0, sp, #44	; 0x2c
   1ee68:	bl	1e8b4 <__assert_fail@plt+0xd39c>
   1ee6c:	ldr	r3, [sp, #24]
   1ee70:	adds	r3, r3, #0
   1ee74:	movne	r3, #1
   1ee78:	cmp	r0, #0
   1ee7c:	movne	r3, #0
   1ee80:	cmp	r3, #0
   1ee84:	mov	r9, r0
   1ee88:	movne	r0, r5
   1ee8c:	bne	1eed8 <__assert_fail@plt+0xd9c0>
   1ee90:	mov	r2, r5
   1ee94:	mov	r1, r5
   1ee98:	mov	r3, #2
   1ee9c:	mov	r0, r7
   1eea0:	bl	157b8 <__assert_fail@plt+0x42a0>
   1eea4:	cmp	r9, #0
   1eea8:	mov	r5, r0
   1eeac:	beq	1eec4 <__assert_fail@plt+0xd9ac>
   1eeb0:	mov	r3, #16
   1eeb4:	mov	r2, r5
   1eeb8:	mov	r1, r9
   1eebc:	mov	r0, r7
   1eec0:	bl	157b8 <__assert_fail@plt+0x42a0>
   1eec4:	cmp	r0, #0
   1eec8:	cmpne	r5, #0
   1eecc:	moveq	r0, #0
   1eed0:	moveq	r3, #12
   1eed4:	streq	r3, [sp, #24]
   1eed8:	cmp	r0, #0
   1eedc:	str	r0, [r4, #52]	; 0x34
   1eee0:	beq	1ebe0 <__assert_fail@plt+0xd6c8>
   1eee4:	ldr	r5, [r6]
   1eee8:	mov	r7, #12
   1eeec:	ldr	r0, [r5, #4]
   1eef0:	lsl	r0, r0, #2
   1eef4:	bl	20bbc <__assert_fail@plt+0xf6a4>
   1eef8:	str	r0, [r5, #12]
   1eefc:	ldr	r0, [r5, #4]
   1ef00:	lsl	r0, r0, #2
   1ef04:	bl	20bbc <__assert_fail@plt+0xf6a4>
   1ef08:	str	r0, [r5, #16]
   1ef0c:	ldr	r0, [r5, #4]
   1ef10:	mul	r0, r7, r0
   1ef14:	bl	20bbc <__assert_fail@plt+0xf6a4>
   1ef18:	str	r0, [r5, #20]
   1ef1c:	ldr	r0, [r5, #4]
   1ef20:	mul	r0, r7, r0
   1ef24:	bl	20bbc <__assert_fail@plt+0xf6a4>
   1ef28:	ldr	r3, [r5, #12]
   1ef2c:	cmp	r3, #0
   1ef30:	str	r0, [r5, #24]
   1ef34:	bne	1f030 <__assert_fail@plt+0xdb18>
   1ef38:	mov	r7, #12
   1ef3c:	cmp	r7, #0
   1ef40:	str	r7, [sp, #24]
   1ef44:	bne	1ebe0 <__assert_fail@plt+0xd6c8>
   1ef48:	ldrb	r2, [r4, #88]	; 0x58
   1ef4c:	ldr	r3, [sp, #16]
   1ef50:	clz	r3, r3
   1ef54:	lsr	r3, r3, #5
   1ef58:	ands	r3, r3, r2, lsr #2
   1ef5c:	beq	1ef78 <__assert_fail@plt+0xda60>
   1ef60:	ldr	r2, [r6, #20]
   1ef64:	cmp	r2, #0
   1ef68:	moveq	lr, r7
   1ef6c:	ldreq	ip, [r4, #8]
   1ef70:	moveq	r0, r7
   1ef74:	beq	1f318 <__assert_fail@plt+0xde00>
   1ef78:	ldr	r3, [r4, #52]	; 0x34
   1ef7c:	ldr	r1, [r4, #24]
   1ef80:	mov	r9, #12
   1ef84:	ldr	r3, [r3, #12]
   1ef88:	add	r0, sp, #32
   1ef8c:	ldr	r3, [r3, #28]
   1ef90:	str	r3, [r4, #72]	; 0x48
   1ef94:	mla	r1, r9, r3, r1
   1ef98:	bl	179ec <__assert_fail@plt+0x64d4>
   1ef9c:	cmp	r0, #0
   1efa0:	mov	r7, r0
   1efa4:	str	r0, [sp, #28]
   1efa8:	bne	1efe0 <__assert_fail@plt+0xdac8>
   1efac:	ldr	r3, [r4, #76]	; 0x4c
   1efb0:	cmp	r3, #0
   1efb4:	movgt	r5, r0
   1efb8:	bgt	1f428 <__assert_fail@plt+0xdf10>
   1efbc:	mov	r3, #0
   1efc0:	add	r2, sp, #32
   1efc4:	mov	r1, r4
   1efc8:	add	r0, sp, #28
   1efcc:	bl	17b9c <__assert_fail@plt+0x6684>
   1efd0:	cmp	r0, #0
   1efd4:	str	r0, [r4, #36]	; 0x24
   1efd8:	bne	1f4b0 <__assert_fail@plt+0xdf98>
   1efdc:	ldr	r7, [sp, #28]
   1efe0:	str	r7, [sp, #24]
   1efe4:	ldr	r7, [r6]
   1efe8:	ldr	r5, [r7, #56]	; 0x38
   1efec:	cmp	r5, #0
   1eff0:	bne	1f538 <__assert_fail@plt+0xe020>
   1eff4:	mov	r3, #31
   1eff8:	str	r3, [r7, #64]	; 0x40
   1effc:	ldr	r0, [r7, #16]
   1f000:	str	r5, [r7, #56]	; 0x38
   1f004:	str	r5, [r7, #52]	; 0x34
   1f008:	bl	130e8 <__assert_fail@plt+0x1bd0>
   1f00c:	str	r5, [r7, #16]
   1f010:	add	r0, sp, #44	; 0x2c
   1f014:	bl	16520 <__assert_fail@plt+0x5008>
   1f018:	ldr	r3, [sp, #24]
   1f01c:	cmp	r3, #0
   1f020:	bne	1ec14 <__assert_fail@plt+0xd6fc>
   1f024:	ldr	r0, [sp, #24]
   1f028:	add	sp, sp, #132	; 0x84
   1f02c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f030:	ldr	r3, [r5, #16]
   1f034:	cmp	r3, #0
   1f038:	beq	1ef38 <__assert_fail@plt+0xda20>
   1f03c:	ldr	r9, [r5, #20]
   1f040:	cmp	r0, #0
   1f044:	cmpne	r9, #0
   1f048:	moveq	r9, #1
   1f04c:	movne	r9, #0
   1f050:	beq	1ef38 <__assert_fail@plt+0xda20>
   1f054:	ldr	r0, [r6, #24]
   1f058:	lsl	r0, r0, #2
   1f05c:	bl	20bbc <__assert_fail@plt+0xf6a4>
   1f060:	cmp	r0, #0
   1f064:	str	r0, [r5, #132]	; 0x84
   1f068:	ldrne	r2, [r6, #24]
   1f06c:	movne	r3, r9
   1f070:	bne	1f140 <__assert_fail@plt+0xdc28>
   1f074:	mov	r2, r6
   1f078:	ldr	r1, [pc, #1316]	; 1f5a4 <__assert_fail@plt+0xe08c>
   1f07c:	ldr	r0, [r5, #52]	; 0x34
   1f080:	bl	154a4 <__assert_fail@plt+0x3f8c>
   1f084:	subs	r7, r0, #0
   1f088:	bne	1ef3c <__assert_fail@plt+0xda24>
   1f08c:	mov	r2, r5
   1f090:	ldr	r1, [pc, #1296]	; 1f5a8 <__assert_fail@plt+0xe090>
   1f094:	ldr	r0, [r5, #52]	; 0x34
   1f098:	bl	154a4 <__assert_fail@plt+0x3f8c>
   1f09c:	subs	r7, r0, #0
   1f0a0:	bne	1ef3c <__assert_fail@plt+0xda24>
   1f0a4:	mov	r2, r5
   1f0a8:	ldr	r1, [pc, #1276]	; 1f5ac <__assert_fail@plt+0xe094>
   1f0ac:	ldr	r0, [r5, #52]	; 0x34
   1f0b0:	bl	15514 <__assert_fail@plt+0x3ffc>
   1f0b4:	mov	r2, r5
   1f0b8:	ldr	r1, [pc, #1264]	; 1f5b0 <__assert_fail@plt+0xe098>
   1f0bc:	ldr	r0, [r5, #52]	; 0x34
   1f0c0:	bl	15514 <__assert_fail@plt+0x3ffc>
   1f0c4:	subs	r7, r0, #0
   1f0c8:	bne	1ef3c <__assert_fail@plt+0xda24>
   1f0cc:	mov	fp, r9
   1f0d0:	mov	sl, r7
   1f0d4:	ldr	r0, [r5, #8]
   1f0d8:	cmp	r0, sl
   1f0dc:	bne	1f0f0 <__assert_fail@plt+0xdbd8>
   1f0e0:	cmp	fp, #0
   1f0e4:	beq	1f1c0 <__assert_fail@plt+0xdca8>
   1f0e8:	mov	fp, r9
   1f0ec:	mov	sl, #0
   1f0f0:	mov	r3, #12
   1f0f4:	mul	r3, r3, sl
   1f0f8:	str	r3, [sp, #12]
   1f0fc:	ldr	r2, [sp, #12]
   1f100:	ldr	r3, [r5, #24]
   1f104:	add	r3, r3, r2
   1f108:	ldr	r3, [r3, #4]
   1f10c:	cmp	r3, #0
   1f110:	bne	1f1b8 <__assert_fail@plt+0xdca0>
   1f114:	mov	r3, #1
   1f118:	mov	r2, sl
   1f11c:	mov	r1, r5
   1f120:	add	r0, sp, #32
   1f124:	bl	18934 <__assert_fail@plt+0x741c>
   1f128:	cmp	r0, #0
   1f12c:	beq	1f194 <__assert_fail@plt+0xdc7c>
   1f130:	mov	r7, r0
   1f134:	b	1ef3c <__assert_fail@plt+0xda24>
   1f138:	str	r3, [r0, r3, lsl #2]
   1f13c:	add	r3, r3, #1
   1f140:	cmp	r2, r3
   1f144:	bne	1f138 <__assert_fail@plt+0xdc20>
   1f148:	mov	r2, r5
   1f14c:	ldr	r1, [pc, #1120]	; 1f5b4 <__assert_fail@plt+0xe09c>
   1f150:	ldr	r0, [r5, #52]	; 0x34
   1f154:	bl	15514 <__assert_fail@plt+0x3ffc>
   1f158:	ldr	r2, [r6, #24]
   1f15c:	mov	r3, #0
   1f160:	cmp	r2, r3
   1f164:	bne	1f17c <__assert_fail@plt+0xdc64>
   1f168:	ldr	r0, [r5, #132]	; 0x84
   1f16c:	bl	130e8 <__assert_fail@plt+0x1bd0>
   1f170:	mov	r3, #0
   1f174:	str	r3, [r5, #132]	; 0x84
   1f178:	b	1f074 <__assert_fail@plt+0xdb5c>
   1f17c:	ldr	r1, [r5, #132]	; 0x84
   1f180:	ldr	r1, [r1, r3, lsl #2]
   1f184:	cmp	r1, r3
   1f188:	bne	1f074 <__assert_fail@plt+0xdb5c>
   1f18c:	add	r3, r3, #1
   1f190:	b	1f160 <__assert_fail@plt+0xdc48>
   1f194:	ldr	r3, [r5, #24]
   1f198:	ldr	r2, [sp, #12]
   1f19c:	add	r3, r3, r2
   1f1a0:	ldr	r3, [r3, #4]
   1f1a4:	cmp	r3, #0
   1f1a8:	bne	1f1b8 <__assert_fail@plt+0xdca0>
   1f1ac:	ldr	r0, [sp, #40]	; 0x28
   1f1b0:	bl	130e8 <__assert_fail@plt+0x1bd0>
   1f1b4:	mov	fp, #1
   1f1b8:	add	sl, sl, #1
   1f1bc:	b	1f0d4 <__assert_fail@plt+0xdbbc>
   1f1c0:	ldrb	r3, [r6, #28]
   1f1c4:	tst	r3, #16
   1f1c8:	beq	1f1dc <__assert_fail@plt+0xdcc4>
   1f1cc:	ldr	r3, [r5, #76]	; 0x4c
   1f1d0:	cmp	r3, #0
   1f1d4:	bne	1f1f4 <__assert_fail@plt+0xdcdc>
   1f1d8:	b	1ef3c <__assert_fail@plt+0xda24>
   1f1dc:	ldr	r3, [r6, #24]
   1f1e0:	cmp	r3, #0
   1f1e4:	beq	1f1cc <__assert_fail@plt+0xdcb4>
   1f1e8:	ldrb	r3, [r5, #88]	; 0x58
   1f1ec:	tst	r3, #1
   1f1f0:	beq	1f1cc <__assert_fail@plt+0xdcb4>
   1f1f4:	mov	r9, #12
   1f1f8:	mul	r0, r9, r0
   1f1fc:	bl	20bbc <__assert_fail@plt+0xf6a4>
   1f200:	cmp	r0, #0
   1f204:	movne	r3, #0
   1f208:	str	r0, [r5, #28]
   1f20c:	movne	r2, r3
   1f210:	beq	1ef38 <__assert_fail@plt+0xda20>
   1f214:	ldr	r1, [r5, #8]
   1f218:	cmp	r3, r1
   1f21c:	bcc	1f264 <__assert_fail@plt+0xdd4c>
   1f220:	mov	r9, #0
   1f224:	mov	fp, #12
   1f228:	ldr	r3, [r5, #8]
   1f22c:	cmp	r9, r3
   1f230:	bcs	1ef3c <__assert_fail@plt+0xda24>
   1f234:	mul	r3, fp, r9
   1f238:	ldr	r2, [r5, #24]
   1f23c:	mov	sl, #0
   1f240:	add	r2, r2, r3
   1f244:	ldr	r2, [r2, #8]
   1f248:	ldr	r1, [r5, #24]
   1f24c:	add	r1, r1, r3
   1f250:	ldr	r1, [r1, #4]
   1f254:	cmp	sl, r1
   1f258:	blt	1f284 <__assert_fail@plt+0xdd6c>
   1f25c:	add	r9, r9, #1
   1f260:	b	1f228 <__assert_fail@plt+0xdd10>
   1f264:	mul	r0, r9, r3
   1f268:	ldr	ip, [r5, #28]
   1f26c:	add	r3, r3, #1
   1f270:	add	r1, ip, r0
   1f274:	str	r2, [ip, r0]
   1f278:	str	r2, [r1, #4]
   1f27c:	str	r2, [r1, #8]
   1f280:	b	1f214 <__assert_fail@plt+0xdcfc>
   1f284:	ldr	ip, [r2, sl, lsl #2]
   1f288:	ldr	r0, [r5, #28]
   1f28c:	mov	r1, r9
   1f290:	mla	r0, fp, ip, r0
   1f294:	str	r3, [sp, #20]
   1f298:	str	r2, [sp, #12]
   1f29c:	bl	15610 <__assert_fail@plt+0x40f8>
   1f2a0:	cmp	r0, #0
   1f2a4:	beq	1ef38 <__assert_fail@plt+0xda20>
   1f2a8:	add	sl, sl, #1
   1f2ac:	ldr	r3, [sp, #20]
   1f2b0:	ldr	r2, [sp, #12]
   1f2b4:	b	1f248 <__assert_fail@plt+0xdd30>
   1f2b8:	ldr	r2, [r4]
   1f2bc:	lsl	r5, r0, #3
   1f2c0:	add	r1, r2, r5
   1f2c4:	ldrb	r1, [r1, #4]
   1f2c8:	sub	r1, r1, #1
   1f2cc:	cmp	r1, #11
   1f2d0:	ldrls	pc, [pc, r1, lsl #2]
   1f2d4:	b	1f3b0 <__assert_fail@plt+0xde98>
   1f2d8:	andeq	pc, r1, r8, lsl #6
   1f2dc:	andeq	pc, r1, r4, lsl r3	; <UNPREDICTABLE>
   1f2e0:	andeq	pc, r1, ip, lsl #7
   1f2e4:	andeq	pc, r1, r4, lsl r3	; <UNPREDICTABLE>
   1f2e8:			; <UNDEFINED> instruction: 0x0001f3b4
   1f2ec:	andeq	lr, r1, r8, ror pc
   1f2f0:			; <UNDEFINED> instruction: 0x0001f3b0
   1f2f4:	andeq	pc, r1, r4, lsl r3	; <UNPREDICTABLE>
   1f2f8:	andeq	pc, r1, r4, lsl r3	; <UNPREDICTABLE>
   1f2fc:	andeq	pc, r1, r4, lsl r3	; <UNPREDICTABLE>
   1f300:	andeq	pc, r1, r4, lsl r3	; <UNPREDICTABLE>
   1f304:	andeq	pc, r1, r0, ror #6
   1f308:	ldrsb	r2, [r2, r5]
   1f30c:	cmp	r2, #0
   1f310:	movlt	lr, r3
   1f314:	add	r0, r0, #1
   1f318:	cmp	r0, ip
   1f31c:	bne	1f2b8 <__assert_fail@plt+0xdda0>
   1f320:	orr	r3, lr, r7
   1f324:	tst	r3, #255	; 0xff
   1f328:	movne	r3, #0
   1f32c:	movne	r5, #7
   1f330:	bne	1f3ec <__assert_fail@plt+0xded4>
   1f334:	mov	r3, #1
   1f338:	str	r3, [r4, #92]	; 0x5c
   1f33c:	ldr	r2, [r4, #76]	; 0x4c
   1f340:	ldrb	r3, [r4, #88]	; 0x58
   1f344:	cmp	r2, #0
   1f348:	movle	r2, r7
   1f34c:	orrgt	r2, r7, #1
   1f350:	and	r7, r3, #249	; 0xf9
   1f354:	orr	r7, r7, r2, lsl #1
   1f358:	strb	r7, [r4, #88]	; 0x58
   1f35c:	b	1ef78 <__assert_fail@plt+0xda60>
   1f360:	ldr	r2, [r2, r0, lsl #3]
   1f364:	cmp	r2, #32
   1f368:	beq	1f314 <__assert_fail@plt+0xddfc>
   1f36c:	bhi	1f37c <__assert_fail@plt+0xde64>
   1f370:	cmp	r2, #16
   1f374:	beq	1f314 <__assert_fail@plt+0xddfc>
   1f378:	b	1ef78 <__assert_fail@plt+0xda60>
   1f37c:	cmp	r2, #64	; 0x40
   1f380:	beq	1f314 <__assert_fail@plt+0xddfc>
   1f384:	cmp	r2, #128	; 0x80
   1f388:	b	1f374 <__assert_fail@plt+0xde5c>
   1f38c:	ldr	r2, [r2, r0, lsl #3]
   1f390:	add	r1, r2, #12
   1f394:	add	r2, r2, #28
   1f398:	ldr	r5, [r1, #4]!
   1f39c:	cmp	r5, #0
   1f3a0:	bne	1ef78 <__assert_fail@plt+0xda60>
   1f3a4:	cmp	r1, r2
   1f3a8:	bne	1f398 <__assert_fail@plt+0xde80>
   1f3ac:	b	1f314 <__assert_fail@plt+0xddfc>
   1f3b0:	bl	11500 <abort@plt>
   1f3b4:	mov	r7, r3
   1f3b8:	b	1f314 <__assert_fail@plt+0xddfc>
   1f3bc:	ldr	lr, [r4]
   1f3c0:	lsl	ip, r3, #3
   1f3c4:	add	r2, lr, ip
   1f3c8:	ldrb	r1, [r2, #4]
   1f3cc:	cmp	r1, #1
   1f3d0:	bne	1f3f8 <__assert_fail@plt+0xdee0>
   1f3d4:	ldrsb	r1, [lr, ip]
   1f3d8:	cmp	r1, #0
   1f3dc:	ldrblt	r1, [r2, #6]
   1f3e0:	biclt	r1, r1, #32
   1f3e4:	strblt	r1, [r2, #6]
   1f3e8:	add	r3, r3, #1
   1f3ec:	cmp	r0, r3
   1f3f0:	bne	1f3bc <__assert_fail@plt+0xdea4>
   1f3f4:	b	1f334 <__assert_fail@plt+0xde1c>
   1f3f8:	cmp	r1, #5
   1f3fc:	strbeq	r5, [r2, #4]
   1f400:	b	1f3e8 <__assert_fail@plt+0xded0>
   1f404:	ldr	ip, [sp, #40]	; 0x28
   1f408:	ldr	r1, [r4]
   1f40c:	ldr	r3, [ip, r5, lsl #2]
   1f410:	add	lr, r1, r3, lsl #3
   1f414:	ldrb	r2, [lr, #4]
   1f418:	cmp	r2, #4
   1f41c:	moveq	r2, #0
   1f420:	beq	1f460 <__assert_fail@plt+0xdf48>
   1f424:	add	r5, r5, #1
   1f428:	ldr	r0, [sp, #36]	; 0x24
   1f42c:	cmp	r5, r0
   1f430:	blt	1f404 <__assert_fail@plt+0xdeec>
   1f434:	b	1efbc <__assert_fail@plt+0xdaa4>
   1f438:	ldr	sl, [ip, r2, lsl #2]
   1f43c:	add	fp, r1, sl, lsl #3
   1f440:	ldrb	fp, [fp, #4]
   1f444:	cmp	fp, #9
   1f448:	bne	1f45c <__assert_fail@plt+0xdf44>
   1f44c:	ldr	fp, [r1, sl, lsl #3]
   1f450:	ldr	sl, [lr]
   1f454:	cmp	fp, sl
   1f458:	beq	1f46c <__assert_fail@plt+0xdf54>
   1f45c:	add	r2, r2, #1
   1f460:	cmp	r2, r0
   1f464:	blt	1f438 <__assert_fail@plt+0xdf20>
   1f468:	beq	1f424 <__assert_fail@plt+0xdf0c>
   1f46c:	ldr	r2, [r4, #20]
   1f470:	add	r0, sp, #32
   1f474:	mla	r3, r9, r3, r2
   1f478:	ldr	r3, [r3, #8]
   1f47c:	ldr	sl, [r3]
   1f480:	mov	r1, sl
   1f484:	bl	14f60 <__assert_fail@plt+0x3a48>
   1f488:	cmp	r0, #0
   1f48c:	bne	1f424 <__assert_fail@plt+0xdf0c>
   1f490:	ldr	r1, [r4, #24]
   1f494:	add	r0, sp, #32
   1f498:	mla	r1, r9, sl, r1
   1f49c:	bl	187d0 <__assert_fail@plt+0x72b8>
   1f4a0:	subs	r5, r0, #0
   1f4a4:	beq	1f424 <__assert_fail@plt+0xdf0c>
   1f4a8:	mov	r7, r5
   1f4ac:	b	1efe0 <__assert_fail@plt+0xdac8>
   1f4b0:	ldrsb	r3, [r0, #52]	; 0x34
   1f4b4:	cmp	r3, #0
   1f4b8:	strge	r0, [r4, #48]	; 0x30
   1f4bc:	strge	r0, [r4, #44]	; 0x2c
   1f4c0:	strge	r0, [r4, #40]	; 0x28
   1f4c4:	bge	1f52c <__assert_fail@plt+0xe014>
   1f4c8:	mov	r3, #1
   1f4cc:	add	r2, sp, #32
   1f4d0:	mov	r1, r4
   1f4d4:	add	r0, sp, #28
   1f4d8:	bl	17b9c <__assert_fail@plt+0x6684>
   1f4dc:	mov	r3, #2
   1f4e0:	add	r2, sp, #32
   1f4e4:	mov	r1, r4
   1f4e8:	str	r0, [r4, #40]	; 0x28
   1f4ec:	add	r0, sp, #28
   1f4f0:	bl	17b9c <__assert_fail@plt+0x6684>
   1f4f4:	mov	r3, #6
   1f4f8:	add	r2, sp, #32
   1f4fc:	mov	r1, r4
   1f500:	str	r0, [r4, #44]	; 0x2c
   1f504:	add	r0, sp, #28
   1f508:	bl	17b9c <__assert_fail@plt+0x6684>
   1f50c:	ldr	r3, [r4, #40]	; 0x28
   1f510:	cmp	r3, #0
   1f514:	str	r0, [r4, #48]	; 0x30
   1f518:	beq	1efdc <__assert_fail@plt+0xdac4>
   1f51c:	ldr	r3, [r4, #44]	; 0x2c
   1f520:	cmp	r0, #0
   1f524:	cmpne	r3, #0
   1f528:	beq	1efdc <__assert_fail@plt+0xdac4>
   1f52c:	ldr	r0, [sp, #40]	; 0x28
   1f530:	bl	130e8 <__assert_fail@plt+0x1bd0>
   1f534:	b	1efe0 <__assert_fail@plt+0xdac8>
   1f538:	ldr	r9, [r5]
   1f53c:	mov	r0, r5
   1f540:	bl	130e8 <__assert_fail@plt+0x1bd0>
   1f544:	mov	r5, r9
   1f548:	b	1efec <__assert_fail@plt+0xdad4>
   1f54c:	mov	r0, #12
   1f550:	b	1f028 <__assert_fail@plt+0xdb10>
   1f554:	mov	r1, #0
   1f558:	add	r0, r4, #136	; 0x88
   1f55c:	bl	1126c <pthread_mutex_init@plt>
   1f560:	cmp	r0, #0
   1f564:	movne	r3, #12
   1f568:	strne	r3, [sp, #24]
   1f56c:	ldr	r3, [sp, #24]
   1f570:	cmp	r3, #0
   1f574:	beq	1eae4 <__assert_fail@plt+0xd5cc>
   1f578:	mov	r0, r4
   1f57c:	bl	16550 <__assert_fail@plt+0x5038>
   1f580:	mov	r3, #0
   1f584:	str	r3, [r6]
   1f588:	str	r3, [r6, #4]
   1f58c:	b	1f024 <__assert_fail@plt+0xdb0c>
   1f590:	beq	feaca03c <opterr@@GLIBC_2.4+0xfea96e8c>
	...
   1f59c:	andeq	r2, r2, r3, ror #8
   1f5a0:	andeq	r2, r2, ip, lsr r2
   1f5a4:	strdeq	r5, [r1], -r0
   1f5a8:	andeq	r7, r1, r0, asr #28
   1f5ac:	andeq	r7, r1, r4, lsr #16
   1f5b0:	andeq	r6, r1, ip, asr #15
   1f5b4:	andeq	r7, r1, ip, lsl #15
   1f5b8:	ldr	r3, [pc, #96]	; 1f620 <__assert_fail@plt+0xe108>
   1f5bc:	mov	ip, r2
   1f5c0:	ldrb	r2, [r2, #28]
   1f5c4:	ldr	r3, [r3]
   1f5c8:	push	{r4, lr}
   1f5cc:	and	r2, r2, #239	; 0xef
   1f5d0:	lsr	lr, r3, #21
   1f5d4:	and	lr, lr, #16
   1f5d8:	orr	r2, r2, lr
   1f5dc:	orr	r2, r2, #128	; 0x80
   1f5e0:	strb	r2, [ip, #28]
   1f5e4:	mov	r2, r1
   1f5e8:	mov	r1, r0
   1f5ec:	mov	r0, ip
   1f5f0:	bl	1ea18 <__assert_fail@plt+0xd500>
   1f5f4:	subs	r2, r0, #0
   1f5f8:	popeq	{r4, pc}
   1f5fc:	ldr	r3, [pc, #32]	; 1f624 <__assert_fail@plt+0xe10c>
   1f600:	mov	r0, #0
   1f604:	add	r1, r3, #32
   1f608:	add	r3, r3, r2, lsl #2
   1f60c:	pop	{r4, lr}
   1f610:	mov	r2, #5
   1f614:	ldr	r3, [r3, #416]	; 0x1a0
   1f618:	add	r1, r1, r3
   1f61c:	b	112a8 <dcgettext@plt>
   1f620:	strdeq	r3, [r3], -r8
   1f624:	andeq	r2, r2, ip, lsr r2
   1f628:	ldr	r3, [pc, #12]	; 1f63c <__assert_fail@plt+0xe124>
   1f62c:	ldr	r2, [r3]
   1f630:	str	r0, [r3]
   1f634:	mov	r0, r2
   1f638:	bx	lr
   1f63c:	strdeq	r3, [r3], -r8
   1f640:	push	{r4, r5, r6, lr}
   1f644:	mov	r2, #256	; 0x100
   1f648:	ldr	r5, [r0]
   1f64c:	ldr	r6, [r0, #16]
   1f650:	mov	r4, r0
   1f654:	mov	r1, #0
   1f658:	mov	r0, r6
   1f65c:	bl	1141c <memset@plt>
   1f660:	ldr	r1, [r5, #36]	; 0x24
   1f664:	mov	r2, r6
   1f668:	mov	r0, r4
   1f66c:	bl	1805c <__assert_fail@plt+0x6b44>
   1f670:	ldr	r1, [r5, #40]	; 0x28
   1f674:	ldr	r3, [r5, #36]	; 0x24
   1f678:	cmp	r3, r1
   1f67c:	beq	1f68c <__assert_fail@plt+0xe174>
   1f680:	mov	r2, r6
   1f684:	mov	r0, r4
   1f688:	bl	1805c <__assert_fail@plt+0x6b44>
   1f68c:	ldr	r1, [r5, #44]	; 0x2c
   1f690:	ldr	r3, [r5, #36]	; 0x24
   1f694:	cmp	r3, r1
   1f698:	beq	1f6a8 <__assert_fail@plt+0xe190>
   1f69c:	mov	r2, r6
   1f6a0:	mov	r0, r4
   1f6a4:	bl	1805c <__assert_fail@plt+0x6b44>
   1f6a8:	ldr	r1, [r5, #48]	; 0x30
   1f6ac:	ldr	r3, [r5, #36]	; 0x24
   1f6b0:	cmp	r3, r1
   1f6b4:	beq	1f6c4 <__assert_fail@plt+0xe1ac>
   1f6b8:	mov	r2, r6
   1f6bc:	mov	r0, r4
   1f6c0:	bl	1805c <__assert_fail@plt+0x6b44>
   1f6c4:	ldrb	r3, [r4, #28]
   1f6c8:	mov	r0, #0
   1f6cc:	orr	r3, r3, #8
   1f6d0:	strb	r3, [r4, #28]
   1f6d4:	pop	{r4, r5, r6, pc}
   1f6d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f6dc:	sub	sp, sp, #44	; 0x2c
   1f6e0:	cmp	r3, r2
   1f6e4:	ldr	ip, [sp, #80]	; 0x50
   1f6e8:	movle	lr, #0
   1f6ec:	movgt	lr, #1
   1f6f0:	orrs	lr, lr, r3, lsr #31
   1f6f4:	ldr	r4, [sp, #88]	; 0x58
   1f6f8:	ldr	fp, [r0]
   1f6fc:	add	r8, r3, ip
   1f700:	mvnne	r7, #0
   1f704:	bne	1f87c <__assert_fail@plt+0xe364>
   1f708:	cmp	r8, r2
   1f70c:	bgt	1f888 <__assert_fail@plt+0xe370>
   1f710:	cmp	ip, #0
   1f714:	cmpge	r3, r8
   1f718:	movgt	lr, #1
   1f71c:	movle	lr, #0
   1f720:	bgt	1f888 <__assert_fail@plt+0xe370>
   1f724:	cmp	r8, #0
   1f728:	movlt	r8, lr
   1f72c:	blt	1f744 <__assert_fail@plt+0xe22c>
   1f730:	cmp	r3, r8
   1f734:	movgt	lr, #0
   1f738:	movle	lr, #1
   1f73c:	ands	ip, lr, ip, lsr #31
   1f740:	movne	r8, #0
   1f744:	ldr	lr, [pc, #700]	; 1fa08 <__assert_fail@plt+0xe4f0>
   1f748:	ldr	r6, [pc, #700]	; 1fa0c <__assert_fail@plt+0xe4f4>
   1f74c:	cmp	lr, #0
   1f750:	mov	ip, #1
   1f754:	moveq	ip, lr
   1f758:	cmp	r6, #0
   1f75c:	mov	lr, #1
   1f760:	moveq	lr, r6
   1f764:	mov	r7, r3
   1f768:	orr	r3, ip, lr
   1f76c:	ands	r3, r3, #255	; 0xff
   1f770:	str	r2, [sp, #36]	; 0x24
   1f774:	str	r1, [sp, #32]
   1f778:	mov	r6, r0
   1f77c:	str	r3, [sp, #28]
   1f780:	beq	1f78c <__assert_fail@plt+0xe274>
   1f784:	add	r0, fp, #136	; 0x88
   1f788:	bl	11230 <pthread_mutex_lock@plt>
   1f78c:	ldrb	r3, [r6, #28]
   1f790:	cmp	r8, r7
   1f794:	lsr	sl, r3, #5
   1f798:	and	sl, sl, #3
   1f79c:	ble	1f7bc <__assert_fail@plt+0xe2a4>
   1f7a0:	ldr	r2, [r6, #16]
   1f7a4:	cmp	r2, #0
   1f7a8:	beq	1f7bc <__assert_fail@plt+0xe2a4>
   1f7ac:	tst	r3, #8
   1f7b0:	bne	1f7bc <__assert_fail@plt+0xe2a4>
   1f7b4:	mov	r0, r6
   1f7b8:	bl	1f640 <__assert_fail@plt+0xe128>
   1f7bc:	ldrb	r2, [r6, #28]
   1f7c0:	lsr	r3, r2, #4
   1f7c4:	and	r3, r3, #1
   1f7c8:	cmp	r4, #0
   1f7cc:	orreq	r3, r3, #1
   1f7d0:	cmp	r3, #0
   1f7d4:	movne	r5, #1
   1f7d8:	movne	r4, #0
   1f7dc:	bne	1f808 <__assert_fail@plt+0xe2f0>
   1f7e0:	and	r2, r2, #6
   1f7e4:	cmp	r2, #4
   1f7e8:	ldr	r5, [r6, #24]
   1f7ec:	bne	1f890 <__assert_fail@plt+0xe378>
   1f7f0:	ldr	r2, [r4]
   1f7f4:	cmp	r2, r5
   1f7f8:	bhi	1f890 <__assert_fail@plt+0xe378>
   1f7fc:	subs	r5, r2, #0
   1f800:	movle	r5, #1
   1f804:	movle	r4, r3
   1f808:	lsl	r0, r5, #3
   1f80c:	bl	20bbc <__assert_fail@plt+0xf6a4>
   1f810:	subs	r9, r0, #0
   1f814:	mvneq	r7, #1
   1f818:	beq	1f868 <__assert_fail@plt+0xe350>
   1f81c:	ldr	r3, [sp, #84]	; 0x54
   1f820:	str	sl, [sp, #16]
   1f824:	str	r3, [sp, #4]
   1f828:	str	r9, [sp, #12]
   1f82c:	str	r5, [sp, #8]
   1f830:	str	r8, [sp]
   1f834:	mov	r3, r7
   1f838:	ldr	r2, [sp, #36]	; 0x24
   1f83c:	ldr	r1, [sp, #32]
   1f840:	mov	r0, r6
   1f844:	bl	1c098 <__assert_fail@plt+0xab80>
   1f848:	cmp	r0, #0
   1f84c:	beq	1f898 <__assert_fail@plt+0xe380>
   1f850:	cmp	r0, #1
   1f854:	mvneq	r7, #0
   1f858:	beq	1f860 <__assert_fail@plt+0xe348>
   1f85c:	mvn	r7, #1
   1f860:	mov	r0, r9
   1f864:	bl	130e8 <__assert_fail@plt+0x1bd0>
   1f868:	ldr	r3, [sp, #28]
   1f86c:	cmp	r3, #0
   1f870:	beq	1f87c <__assert_fail@plt+0xe364>
   1f874:	add	r0, fp, #136	; 0x88
   1f878:	bl	1117c <pthread_mutex_unlock@plt>
   1f87c:	mov	r0, r7
   1f880:	add	sp, sp, #44	; 0x2c
   1f884:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f888:	mov	r8, r2
   1f88c:	b	1f744 <__assert_fail@plt+0xe22c>
   1f890:	add	r5, r5, #1
   1f894:	b	1f808 <__assert_fail@plt+0xe2f0>
   1f898:	cmp	r4, #0
   1f89c:	beq	1f8ec <__assert_fail@plt+0xe3d4>
   1f8a0:	ldrb	r8, [r6, #28]
   1f8a4:	add	sl, r5, #1
   1f8a8:	lsr	r8, r8, #1
   1f8ac:	ands	r8, r8, #3
   1f8b0:	bne	1f930 <__assert_fail@plt+0xe418>
   1f8b4:	lsl	r8, sl, #2
   1f8b8:	mov	r0, r8
   1f8bc:	bl	20bbc <__assert_fail@plt+0xf6a4>
   1f8c0:	cmp	r0, #0
   1f8c4:	str	r0, [r4, #4]
   1f8c8:	bne	1f904 <__assert_fail@plt+0xe3ec>
   1f8cc:	mov	r8, #0
   1f8d0:	ldrb	r3, [r6, #28]
   1f8d4:	and	r8, r8, #3
   1f8d8:	bic	r3, r3, #6
   1f8dc:	orr	r8, r3, r8, lsl #1
   1f8e0:	tst	r8, #6
   1f8e4:	strb	r8, [r6, #28]
   1f8e8:	beq	1f85c <__assert_fail@plt+0xe344>
   1f8ec:	ldrb	r3, [sp, #92]	; 0x5c
   1f8f0:	cmp	r3, #0
   1f8f4:	ldrne	r3, [r9, #4]
   1f8f8:	subne	r7, r3, r7
   1f8fc:	ldreq	r7, [r9]
   1f900:	b	1f860 <__assert_fail@plt+0xe348>
   1f904:	mov	r0, r8
   1f908:	bl	20bbc <__assert_fail@plt+0xf6a4>
   1f90c:	cmp	r0, #0
   1f910:	mov	r8, r0
   1f914:	str	r0, [r4, #8]
   1f918:	strne	sl, [r4]
   1f91c:	movne	r8, #1
   1f920:	bne	1f9a0 <__assert_fail@plt+0xe488>
   1f924:	ldr	r0, [r4, #4]
   1f928:	bl	130e8 <__assert_fail@plt+0x1bd0>
   1f92c:	b	1f8d0 <__assert_fail@plt+0xe3b8>
   1f930:	cmp	r8, #1
   1f934:	movne	r8, #2
   1f938:	bne	1f9a0 <__assert_fail@plt+0xe488>
   1f93c:	ldr	r3, [r4]
   1f940:	cmp	r3, sl
   1f944:	bcs	1f9a0 <__assert_fail@plt+0xe488>
   1f948:	lsl	r2, sl, #2
   1f94c:	mov	r1, r2
   1f950:	ldr	r0, [r4, #4]
   1f954:	str	r2, [sp, #36]	; 0x24
   1f958:	bl	20bfc <__assert_fail@plt+0xf6e4>
   1f95c:	subs	r3, r0, #0
   1f960:	str	r3, [sp, #32]
   1f964:	beq	1f8cc <__assert_fail@plt+0xe3b4>
   1f968:	ldr	r2, [sp, #36]	; 0x24
   1f96c:	ldr	r0, [r4, #8]
   1f970:	mov	r1, r2
   1f974:	bl	20bfc <__assert_fail@plt+0xf6e4>
   1f978:	ldr	r3, [sp, #32]
   1f97c:	subs	r2, r0, #0
   1f980:	strne	r3, [r4, #4]
   1f984:	strne	r2, [r4, #8]
   1f988:	strne	sl, [r4]
   1f98c:	bne	1f9a0 <__assert_fail@plt+0xe488>
   1f990:	mov	r0, r3
   1f994:	str	r2, [sp, #32]
   1f998:	bl	130e8 <__assert_fail@plt+0x1bd0>
   1f99c:	b	1f8cc <__assert_fail@plt+0xe3b4>
   1f9a0:	mov	r2, r9
   1f9a4:	mov	r3, #0
   1f9a8:	cmp	r5, r3
   1f9ac:	add	r2, r2, #8
   1f9b0:	bgt	1f9e8 <__assert_fail@plt+0xe4d0>
   1f9b4:	bic	r5, r5, r5, asr #31
   1f9b8:	mvn	r2, #0
   1f9bc:	lsl	r3, r5, #2
   1f9c0:	ldr	r1, [r4]
   1f9c4:	cmp	r5, r1
   1f9c8:	bcs	1f8d0 <__assert_fail@plt+0xe3b8>
   1f9cc:	ldr	r1, [r4, #4]
   1f9d0:	ldr	r0, [r4, #8]
   1f9d4:	add	r5, r5, #1
   1f9d8:	str	r2, [r0, r3]
   1f9dc:	str	r2, [r1, r3]
   1f9e0:	add	r3, r3, #4
   1f9e4:	b	1f9c0 <__assert_fail@plt+0xe4a8>
   1f9e8:	ldr	r1, [r4, #4]
   1f9ec:	ldr	r0, [r2, #-8]
   1f9f0:	str	r0, [r1, r3, lsl #2]
   1f9f4:	ldr	r1, [r4, #8]
   1f9f8:	ldr	r0, [r2, #-4]
   1f9fc:	str	r0, [r1, r3, lsl #2]
   1fa00:	add	r3, r3, #1
   1fa04:	b	1f9a8 <__assert_fail@plt+0xe490>
	...
   1fa10:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fa14:	sub	sp, sp, #20
   1fa18:	mov	r7, r3
   1fa1c:	ldr	r9, [sp, #72]	; 0x48
   1fa20:	ldr	r5, [sp, #56]	; 0x38
   1fa24:	orr	r3, r2, r9
   1fa28:	orrs	r3, r3, r5
   1fa2c:	bpl	1fa54 <__assert_fail@plt+0xe53c>
   1fa30:	mvn	r4, #1
   1fa34:	mov	r0, r4
   1fa38:	add	sp, sp, #20
   1fa3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fa40:	mov	r7, r8
   1fa44:	mov	r6, #0
   1fa48:	b	1fabc <__assert_fail@plt+0xe5a4>
   1fa4c:	mov	r6, r4
   1fa50:	b	1fabc <__assert_fail@plt+0xe5a4>
   1fa54:	cmp	r5, #0
   1fa58:	mov	sl, r0
   1fa5c:	mov	r8, r1
   1fa60:	mov	r4, r2
   1fa64:	blt	1fa78 <__assert_fail@plt+0xe560>
   1fa68:	mvn	r3, #-2147483648	; 0x80000000
   1fa6c:	sub	r3, r3, r5
   1fa70:	cmp	r4, r3
   1fa74:	bgt	1fa30 <__assert_fail@plt+0xe518>
   1fa78:	cmp	r5, #0
   1fa7c:	add	fp, r4, r5
   1fa80:	ble	1fa40 <__assert_fail@plt+0xe528>
   1fa84:	cmp	r4, #0
   1fa88:	beq	1fa4c <__assert_fail@plt+0xe534>
   1fa8c:	mov	r0, fp
   1fa90:	bl	20bbc <__assert_fail@plt+0xf6a4>
   1fa94:	subs	r6, r0, #0
   1fa98:	beq	1fa30 <__assert_fail@plt+0xe518>
   1fa9c:	mov	r2, r4
   1faa0:	mov	r1, r8
   1faa4:	bl	11248 <memcpy@plt>
   1faa8:	mov	r1, r7
   1faac:	mov	r2, r5
   1fab0:	add	r0, r6, r4
   1fab4:	bl	11248 <memcpy@plt>
   1fab8:	mov	r7, r6
   1fabc:	ldrb	r3, [sp, #76]	; 0x4c
   1fac0:	str	r9, [sp, #4]
   1fac4:	mov	r2, fp
   1fac8:	str	r3, [sp, #12]
   1facc:	ldr	r3, [sp, #68]	; 0x44
   1fad0:	mov	r1, r7
   1fad4:	str	r3, [sp, #8]
   1fad8:	ldr	r3, [sp, #64]	; 0x40
   1fadc:	mov	r0, sl
   1fae0:	str	r3, [sp]
   1fae4:	ldr	r3, [sp, #60]	; 0x3c
   1fae8:	bl	1f6d8 <__assert_fail@plt+0xe1c0>
   1faec:	mov	r4, r0
   1faf0:	mov	r0, r6
   1faf4:	bl	130e8 <__assert_fail@plt+0x1bd0>
   1faf8:	b	1fa34 <__assert_fail@plt+0xe51c>
   1fafc:	ldr	r3, [pc, #232]	; 1fbec <__assert_fail@plt+0xe6d4>
   1fb00:	tst	r2, #1
   1fb04:	push	{r4, r5, r6, r7, r8, lr}
   1fb08:	mov	r4, r0
   1fb0c:	ldr	r6, [pc, #220]	; 1fbf0 <__assert_fail@plt+0xe6d8>
   1fb10:	moveq	r6, r3
   1fb14:	mov	r3, #0
   1fb18:	str	r3, [r0]
   1fb1c:	str	r3, [r0, #4]
   1fb20:	str	r3, [r0, #8]
   1fb24:	mov	r0, #256	; 0x100
   1fb28:	mov	r7, r1
   1fb2c:	mov	r5, r2
   1fb30:	bl	20bbc <__assert_fail@plt+0xf6a4>
   1fb34:	cmp	r0, #0
   1fb38:	str	r0, [r4, #16]
   1fb3c:	beq	1fbe4 <__assert_fail@plt+0xe6cc>
   1fb40:	ldrb	r2, [r4, #28]
   1fb44:	tst	r5, #2
   1fb48:	movne	r3, #4194304	; 0x400000
   1fb4c:	moveq	r3, #0
   1fb50:	tst	r5, #4
   1fb54:	orrne	r2, r2, #128	; 0x80
   1fb58:	biceq	r2, r2, #128	; 0x80
   1fb5c:	strb	r2, [r4, #28]
   1fb60:	ldrb	r2, [r4, #28]
   1fb64:	lsl	r5, r5, #1
   1fb68:	and	r5, r5, #16
   1fb6c:	bic	r2, r2, #16
   1fb70:	orr	r6, r6, r3
   1fb74:	orr	r5, r5, r2
   1fb78:	mov	r3, #0
   1fb7c:	bicne	r6, r6, #64	; 0x40
   1fb80:	strb	r5, [r4, #28]
   1fb84:	str	r3, [r4, #20]
   1fb88:	mov	r0, r7
   1fb8c:	orrne	r6, r6, #256	; 0x100
   1fb90:	bl	113c8 <strlen@plt>
   1fb94:	mov	r3, r6
   1fb98:	mov	r1, r7
   1fb9c:	mov	r2, r0
   1fba0:	mov	r0, r4
   1fba4:	bl	1ea18 <__assert_fail@plt+0xd500>
   1fba8:	cmp	r0, #16
   1fbac:	mov	r5, r0
   1fbb0:	beq	1fbcc <__assert_fail@plt+0xe6b4>
   1fbb4:	cmp	r0, #0
   1fbb8:	bne	1fbd0 <__assert_fail@plt+0xe6b8>
   1fbbc:	mov	r0, r4
   1fbc0:	bl	1f640 <__assert_fail@plt+0xe128>
   1fbc4:	mov	r0, r5
   1fbc8:	pop	{r4, r5, r6, r7, r8, pc}
   1fbcc:	mov	r5, #8
   1fbd0:	ldr	r0, [r4, #16]
   1fbd4:	bl	130e8 <__assert_fail@plt+0x1bd0>
   1fbd8:	mov	r3, #0
   1fbdc:	str	r3, [r4, #16]
   1fbe0:	b	1fbc4 <__assert_fail@plt+0xe6ac>
   1fbe4:	mov	r0, #12
   1fbe8:	pop	{r4, r5, r6, r7, r8, pc}
   1fbec:	smlabteq	r1, r6, r2, r0
   1fbf0:	strdeq	fp, [r3], -ip
   1fbf4:	cmp	r0, #16
   1fbf8:	push	{r4, r5, r6, r7, r8, lr}
   1fbfc:	bls	1fc04 <__assert_fail@plt+0xe6ec>
   1fc00:	bl	11500 <abort@plt>
   1fc04:	mov	r4, r3
   1fc08:	ldr	r3, [pc, #88]	; 1fc68 <__assert_fail@plt+0xe750>
   1fc0c:	mov	r6, r2
   1fc10:	add	r1, r3, #32
   1fc14:	add	r3, r3, r0, lsl #2
   1fc18:	mov	r2, #5
   1fc1c:	ldr	r3, [r3, #416]	; 0x1a0
   1fc20:	mov	r0, #0
   1fc24:	add	r1, r1, r3
   1fc28:	bl	112a8 <dcgettext@plt>
   1fc2c:	mov	r7, r0
   1fc30:	bl	113c8 <strlen@plt>
   1fc34:	cmp	r4, #0
   1fc38:	add	r5, r0, #1
   1fc3c:	beq	1fc60 <__assert_fail@plt+0xe748>
   1fc40:	cmp	r5, r4
   1fc44:	subhi	r2, r4, #1
   1fc48:	movhi	r3, #0
   1fc4c:	strbhi	r3, [r6, r2]
   1fc50:	movls	r2, r5
   1fc54:	mov	r1, r7
   1fc58:	mov	r0, r6
   1fc5c:	bl	11248 <memcpy@plt>
   1fc60:	mov	r0, r5
   1fc64:	pop	{r4, r5, r6, r7, r8, pc}
   1fc68:	andeq	r2, r2, ip, lsr r2
   1fc6c:	push	{r4, r5, r6, lr}
   1fc70:	mov	r4, r0
   1fc74:	ldr	r5, [r0]
   1fc78:	cmp	r5, #0
   1fc7c:	beq	1fcbc <__assert_fail@plt+0xe7a4>
   1fc80:	ldr	r2, [pc, #92]	; 1fce4 <__assert_fail@plt+0xe7cc>
   1fc84:	ldr	r1, [pc, #92]	; 1fce8 <__assert_fail@plt+0xe7d0>
   1fc88:	cmp	r2, #0
   1fc8c:	mov	r3, #1
   1fc90:	moveq	r3, r2
   1fc94:	cmp	r1, #0
   1fc98:	mov	r2, #1
   1fc9c:	moveq	r2, r1
   1fca0:	orr	r3, r3, r2
   1fca4:	tst	r3, #1
   1fca8:	beq	1fcb4 <__assert_fail@plt+0xe79c>
   1fcac:	add	r0, r5, #136	; 0x88
   1fcb0:	bl	111f4 <pthread_mutex_destroy@plt>
   1fcb4:	mov	r0, r5
   1fcb8:	bl	16550 <__assert_fail@plt+0x5038>
   1fcbc:	mov	r5, #0
   1fcc0:	ldr	r0, [r4, #16]
   1fcc4:	str	r5, [r4]
   1fcc8:	str	r5, [r4, #4]
   1fccc:	bl	130e8 <__assert_fail@plt+0x1bd0>
   1fcd0:	str	r5, [r4, #16]
   1fcd4:	ldr	r0, [r4, #20]
   1fcd8:	bl	130e8 <__assert_fail@plt+0x1bd0>
   1fcdc:	str	r5, [r4, #20]
   1fce0:	pop	{r4, r5, r6, pc}
	...
   1fcec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fcf0:	sub	sp, sp, #36	; 0x24
   1fcf4:	ldr	r9, [sp, #72]	; 0x48
   1fcf8:	bics	ip, r9, #7
   1fcfc:	movne	r0, #2
   1fd00:	bne	1fdc4 <__assert_fail@plt+0xe8ac>
   1fd04:	ands	fp, r9, #4
   1fd08:	mov	r8, r3
   1fd0c:	str	r2, [sp, #28]
   1fd10:	mov	r7, r1
   1fd14:	mov	r6, r0
   1fd18:	ldrne	fp, [r3]
   1fd1c:	ldrne	r5, [r3, #4]
   1fd20:	bne	1fd30 <__assert_fail@plt+0xe818>
   1fd24:	mov	r0, r1
   1fd28:	bl	113c8 <strlen@plt>
   1fd2c:	mov	r5, r0
   1fd30:	ldr	r2, [pc, #148]	; 1fdcc <__assert_fail@plt+0xe8b4>
   1fd34:	ldr	r1, [pc, #148]	; 1fdd0 <__assert_fail@plt+0xe8b8>
   1fd38:	cmp	r2, #0
   1fd3c:	mov	r4, #1
   1fd40:	moveq	r4, r2
   1fd44:	cmp	r1, #0
   1fd48:	mov	r2, #1
   1fd4c:	moveq	r2, r1
   1fd50:	orr	r4, r4, r2
   1fd54:	ands	r4, r4, #255	; 0xff
   1fd58:	ldr	sl, [r6]
   1fd5c:	beq	1fd68 <__assert_fail@plt+0xe850>
   1fd60:	add	r0, sl, #136	; 0x88
   1fd64:	bl	11230 <pthread_mutex_lock@plt>
   1fd68:	ldrb	r2, [r6, #28]
   1fd6c:	mov	r1, r7
   1fd70:	str	r5, [sp, #4]
   1fd74:	tst	r2, #16
   1fd78:	movne	r2, #0
   1fd7c:	ldreq	r3, [sp, #28]
   1fd80:	strne	r2, [sp, #12]
   1fd84:	strne	r2, [sp, #8]
   1fd88:	streq	r3, [sp, #8]
   1fd8c:	streq	r8, [sp, #12]
   1fd90:	str	r5, [sp]
   1fd94:	mov	r2, r5
   1fd98:	str	r9, [sp, #16]
   1fd9c:	mov	r3, fp
   1fda0:	mov	r0, r6
   1fda4:	bl	1c098 <__assert_fail@plt+0xab80>
   1fda8:	cmp	r4, #0
   1fdac:	mov	r5, r0
   1fdb0:	beq	1fdbc <__assert_fail@plt+0xe8a4>
   1fdb4:	add	r0, sl, #136	; 0x88
   1fdb8:	bl	1117c <pthread_mutex_unlock@plt>
   1fdbc:	adds	r0, r5, #0
   1fdc0:	movne	r0, #1
   1fdc4:	add	sp, sp, #36	; 0x24
   1fdc8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...
   1fdd4:	push	{r0, r1, r2, r3, r4, lr}
   1fdd8:	mov	ip, #1
   1fddc:	str	ip, [sp, #12]
   1fde0:	ldr	ip, [sp, #24]
   1fde4:	stmib	sp, {r2, ip}
   1fde8:	mov	ip, #0
   1fdec:	str	ip, [sp]
   1fdf0:	bl	1f6d8 <__assert_fail@plt+0xe1c0>
   1fdf4:	add	sp, sp, #20
   1fdf8:	pop	{pc}		; (ldr pc, [sp], #4)
   1fdfc:	push	{r0, r1, r2, r3, r4, lr}
   1fe00:	mov	ip, #0
   1fe04:	str	ip, [sp, #12]
   1fe08:	ldr	ip, [sp, #28]
   1fe0c:	stmib	sp, {r2, ip}
   1fe10:	ldr	ip, [sp, #24]
   1fe14:	str	ip, [sp]
   1fe18:	bl	1f6d8 <__assert_fail@plt+0xe1c0>
   1fe1c:	add	sp, sp, #20
   1fe20:	pop	{pc}		; (ldr pc, [sp], #4)
   1fe24:	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1fe28:	mov	ip, #1
   1fe2c:	str	ip, [sp, #20]
   1fe30:	ldr	ip, [sp, #44]	; 0x2c
   1fe34:	str	ip, [sp, #16]
   1fe38:	ldr	ip, [sp, #40]	; 0x28
   1fe3c:	str	ip, [sp, #12]
   1fe40:	mov	ip, #0
   1fe44:	str	ip, [sp, #8]
   1fe48:	ldr	ip, [sp, #36]	; 0x24
   1fe4c:	str	ip, [sp, #4]
   1fe50:	ldr	ip, [sp, #32]
   1fe54:	str	ip, [sp]
   1fe58:	bl	1fa10 <__assert_fail@plt+0xe4f8>
   1fe5c:	add	sp, sp, #28
   1fe60:	pop	{pc}		; (ldr pc, [sp], #4)
   1fe64:	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1fe68:	mov	ip, #0
   1fe6c:	str	ip, [sp, #20]
   1fe70:	ldr	ip, [sp, #48]	; 0x30
   1fe74:	str	ip, [sp, #16]
   1fe78:	ldr	ip, [sp, #44]	; 0x2c
   1fe7c:	str	ip, [sp, #12]
   1fe80:	ldr	ip, [sp, #40]	; 0x28
   1fe84:	str	ip, [sp, #8]
   1fe88:	ldr	ip, [sp, #36]	; 0x24
   1fe8c:	str	ip, [sp, #4]
   1fe90:	ldr	ip, [sp, #32]
   1fe94:	str	ip, [sp]
   1fe98:	bl	1fa10 <__assert_fail@plt+0xe4f8>
   1fe9c:	add	sp, sp, #28
   1fea0:	pop	{pc}		; (ldr pc, [sp], #4)
   1fea4:	ldrb	ip, [r0, #28]
   1fea8:	cmp	r2, #0
   1feac:	bicne	ip, ip, #4
   1feb0:	orrne	ip, ip, #2
   1feb4:	strbne	ip, [r0, #28]
   1feb8:	stmne	r1, {r2, r3}
   1febc:	ldrne	r3, [sp]
   1fec0:	biceq	ip, ip, #6
   1fec4:	strbeq	ip, [r0, #28]
   1fec8:	strne	r3, [r1, #8]
   1fecc:	streq	r2, [r1]
   1fed0:	streq	r2, [r1, #8]
   1fed4:	streq	r2, [r1, #4]
   1fed8:	bx	lr
   1fedc:	push	{r4, r5, r6, lr}
   1fee0:	mov	r2, r1
   1fee4:	mov	r4, r1
   1fee8:	mov	r1, #0
   1feec:	mov	r5, r0
   1fef0:	bl	11458 <memchr@plt>
   1fef4:	cmp	r0, #0
   1fef8:	subne	r4, r0, r5
   1fefc:	addne	r4, r4, #1
   1ff00:	mov	r0, r4
   1ff04:	pop	{r4, r5, r6, pc}
   1ff08:	ldrb	ip, [r0]
   1ff0c:	ldrb	r3, [r1]
   1ff10:	cmp	ip, r2
   1ff14:	bne	1ffb4 <__assert_fail@plt+0xea9c>
   1ff18:	cmp	r3, ip
   1ff1c:	addne	r0, r0, #1
   1ff20:	bne	1ff90 <__assert_fail@plt+0xea78>
   1ff24:	ldrb	r3, [r0, #1]!
   1ff28:	ldrb	r2, [r1, #1]!
   1ff2c:	sub	ip, r3, #48	; 0x30
   1ff30:	cmp	r3, r2
   1ff34:	beq	1ff54 <__assert_fail@plt+0xea3c>
   1ff38:	cmp	ip, #9
   1ff3c:	sub	ip, r2, #48	; 0x30
   1ff40:	bhi	1ff64 <__assert_fail@plt+0xea4c>
   1ff44:	cmp	ip, #9
   1ff48:	bhi	1ff90 <__assert_fail@plt+0xea78>
   1ff4c:	sub	r0, r3, r2
   1ff50:	bx	lr
   1ff54:	cmp	ip, #9
   1ff58:	bls	1ff24 <__assert_fail@plt+0xea0c>
   1ff5c:	mov	r0, #0
   1ff60:	bx	lr
   1ff64:	cmp	ip, #9
   1ff68:	bhi	1ff5c <__assert_fail@plt+0xea44>
   1ff6c:	sub	r1, r1, #1
   1ff70:	ldrb	r0, [r1, #1]!
   1ff74:	cmp	r0, #48	; 0x30
   1ff78:	beq	1ff70 <__assert_fail@plt+0xea58>
   1ff7c:	sub	r0, r0, #48	; 0x30
   1ff80:	cmp	r0, #9
   1ff84:	movhi	r0, #0
   1ff88:	mvnls	r0, #0
   1ff8c:	bx	lr
   1ff90:	sub	r3, r0, #1
   1ff94:	ldrb	r0, [r3, #1]!
   1ff98:	cmp	r0, #48	; 0x30
   1ff9c:	beq	1ff94 <__assert_fail@plt+0xea7c>
   1ffa0:	sub	r0, r0, #48	; 0x30
   1ffa4:	cmp	r0, #9
   1ffa8:	movhi	r0, #0
   1ffac:	movls	r0, #1
   1ffb0:	bx	lr
   1ffb4:	cmp	r3, r2
   1ffb8:	bne	1ff5c <__assert_fail@plt+0xea44>
   1ffbc:	add	r1, r1, #1
   1ffc0:	b	1ff6c <__assert_fail@plt+0xea54>
   1ffc4:	push	{r4, lr}
   1ffc8:	ldrb	r2, [r0]
   1ffcc:	ldrb	ip, [r1]
   1ffd0:	cmp	r2, #45	; 0x2d
   1ffd4:	bne	200b0 <__assert_fail@plt+0xeb98>
   1ffd8:	ldrb	r2, [r0, #1]!
   1ffdc:	cmp	r2, #48	; 0x30
   1ffe0:	beq	1ffd8 <__assert_fail@plt+0xeac0>
   1ffe4:	cmp	ip, #45	; 0x2d
   1ffe8:	beq	20020 <__assert_fail@plt+0xeb08>
   1ffec:	sub	r0, r2, #48	; 0x30
   1fff0:	cmp	r0, #9
   1fff4:	bhi	20004 <__assert_fail@plt+0xeaec>
   1fff8:	mvn	r0, #0
   1fffc:	pop	{r4, pc}
   20000:	ldrb	ip, [r1, #1]!
   20004:	cmp	ip, #48	; 0x30
   20008:	beq	20000 <__assert_fail@plt+0xeae8>
   2000c:	sub	r0, ip, #48	; 0x30
   20010:	cmp	r0, #9
   20014:	movhi	r0, #0
   20018:	mvnls	r0, #0
   2001c:	pop	{r4, pc}
   20020:	ldrb	ip, [r1, #1]!
   20024:	cmp	ip, #48	; 0x30
   20028:	beq	20020 <__assert_fail@plt+0xeb08>
   2002c:	cmp	r2, ip
   20030:	bne	20040 <__assert_fail@plt+0xeb28>
   20034:	sub	r3, r2, #48	; 0x30
   20038:	cmp	r3, #9
   2003c:	bls	20084 <__assert_fail@plt+0xeb6c>
   20040:	mov	lr, r2
   20044:	mov	r4, r0
   20048:	sub	lr, lr, #48	; 0x30
   2004c:	cmp	lr, #9
   20050:	sub	r3, r4, r0
   20054:	bls	20090 <__assert_fail@plt+0xeb78>
   20058:	mov	r0, ip
   2005c:	mov	lr, r1
   20060:	sub	r0, r0, #48	; 0x30
   20064:	cmp	r0, #9
   20068:	sub	r4, lr, r1
   2006c:	bls	20098 <__assert_fail@plt+0xeb80>
   20070:	cmp	r3, r4
   20074:	beq	200a0 <__assert_fail@plt+0xeb88>
   20078:	bcs	1fff8 <__assert_fail@plt+0xeae0>
   2007c:	mov	r0, #1
   20080:	pop	{r4, pc}
   20084:	ldrb	r2, [r0, #1]!
   20088:	ldrb	ip, [r1, #1]!
   2008c:	b	2002c <__assert_fail@plt+0xeb14>
   20090:	ldrb	lr, [r4, #1]!
   20094:	b	20048 <__assert_fail@plt+0xeb30>
   20098:	ldrb	r0, [lr, #1]!
   2009c:	b	20060 <__assert_fail@plt+0xeb48>
   200a0:	cmp	r3, #0
   200a4:	beq	2018c <__assert_fail@plt+0xec74>
   200a8:	sub	r0, ip, r2
   200ac:	pop	{r4, pc}
   200b0:	cmp	ip, #45	; 0x2d
   200b4:	bne	200f8 <__assert_fail@plt+0xebe0>
   200b8:	ldrb	r3, [r1, #1]!
   200bc:	cmp	r3, #48	; 0x30
   200c0:	beq	200b8 <__assert_fail@plt+0xeba0>
   200c4:	sub	r3, r3, #48	; 0x30
   200c8:	cmp	r3, #9
   200cc:	bls	2007c <__assert_fail@plt+0xeb64>
   200d0:	cmp	r2, #48	; 0x30
   200d4:	beq	200ec <__assert_fail@plt+0xebd4>
   200d8:	sub	r0, r2, #48	; 0x30
   200dc:	cmp	r0, #9
   200e0:	movhi	r0, #0
   200e4:	movls	r0, #1
   200e8:	pop	{r4, pc}
   200ec:	ldrb	r2, [r0, #1]!
   200f0:	b	200d0 <__assert_fail@plt+0xebb8>
   200f4:	ldrb	r2, [r0, #1]!
   200f8:	cmp	r2, #48	; 0x30
   200fc:	beq	200f4 <__assert_fail@plt+0xebdc>
   20100:	cmp	ip, #48	; 0x30
   20104:	bne	20118 <__assert_fail@plt+0xec00>
   20108:	ldrb	ip, [r1, #1]!
   2010c:	b	20100 <__assert_fail@plt+0xebe8>
   20110:	ldrb	r2, [r0, #1]!
   20114:	ldrb	ip, [r1, #1]!
   20118:	cmp	r2, ip
   2011c:	bne	2012c <__assert_fail@plt+0xec14>
   20120:	sub	r3, r2, #48	; 0x30
   20124:	cmp	r3, #9
   20128:	bls	20110 <__assert_fail@plt+0xebf8>
   2012c:	mov	lr, r2
   20130:	mov	r4, r0
   20134:	sub	lr, lr, #48	; 0x30
   20138:	cmp	lr, #9
   2013c:	sub	r3, r4, r0
   20140:	bls	2016c <__assert_fail@plt+0xec54>
   20144:	mov	r0, ip
   20148:	mov	lr, r1
   2014c:	sub	r0, r0, #48	; 0x30
   20150:	cmp	r0, #9
   20154:	sub	r4, lr, r1
   20158:	bls	20174 <__assert_fail@plt+0xec5c>
   2015c:	cmp	r4, r3
   20160:	beq	2017c <__assert_fail@plt+0xec64>
   20164:	bls	2007c <__assert_fail@plt+0xeb64>
   20168:	b	1fff8 <__assert_fail@plt+0xeae0>
   2016c:	ldrb	lr, [r4, #1]!
   20170:	b	20134 <__assert_fail@plt+0xec1c>
   20174:	ldrb	r0, [lr, #1]!
   20178:	b	2014c <__assert_fail@plt+0xec34>
   2017c:	cmp	r3, #0
   20180:	beq	2018c <__assert_fail@plt+0xec74>
   20184:	sub	r0, r2, ip
   20188:	pop	{r4, pc}
   2018c:	mov	r0, r3
   20190:	pop	{r4, pc}
   20194:	push	{r4, r5, r6, lr}
   20198:	sub	sp, sp, #32
   2019c:	cmp	r1, #0
   201a0:	mov	r5, r0
   201a4:	ldr	r4, [sp, #48]	; 0x30
   201a8:	ldr	r6, [sp, #52]	; 0x34
   201ac:	beq	20260 <__assert_fail@plt+0xed48>
   201b0:	stm	sp, {r2, r3}
   201b4:	mov	r3, r1
   201b8:	ldr	r2, [pc, #860]	; 2051c <__assert_fail@plt+0xf004>
   201bc:	mov	r1, #1
   201c0:	bl	1144c <__fprintf_chk@plt>
   201c4:	mov	r2, #5
   201c8:	ldr	r1, [pc, #848]	; 20520 <__assert_fail@plt+0xf008>
   201cc:	mov	r0, #0
   201d0:	bl	112a8 <dcgettext@plt>
   201d4:	ldr	r3, [pc, #840]	; 20524 <__assert_fail@plt+0xf00c>
   201d8:	ldr	r2, [pc, #840]	; 20528 <__assert_fail@plt+0xf010>
   201dc:	str	r3, [sp]
   201e0:	mov	r1, #1
   201e4:	mov	r3, r0
   201e8:	mov	r0, r5
   201ec:	bl	1144c <__fprintf_chk@plt>
   201f0:	mov	r1, r5
   201f4:	mov	r0, #10
   201f8:	bl	1129c <fputc_unlocked@plt>
   201fc:	mov	r2, #5
   20200:	ldr	r1, [pc, #804]	; 2052c <__assert_fail@plt+0xf014>
   20204:	mov	r0, #0
   20208:	bl	112a8 <dcgettext@plt>
   2020c:	mov	r1, #1
   20210:	ldr	r3, [pc, #792]	; 20530 <__assert_fail@plt+0xf018>
   20214:	mov	r2, r0
   20218:	mov	r0, r5
   2021c:	bl	1144c <__fprintf_chk@plt>
   20220:	mov	r1, r5
   20224:	mov	r0, #10
   20228:	bl	1129c <fputc_unlocked@plt>
   2022c:	cmp	r6, #9
   20230:	ldrls	pc, [pc, r6, lsl #2]
   20234:	b	20510 <__assert_fail@plt+0xeff8>
   20238:	andeq	r0, r2, r0, asr r3
   2023c:	andeq	r0, r2, r8, ror r2
   20240:	andeq	r0, r2, r4, lsr #5
   20244:	ldrdeq	r0, [r2], -r8
   20248:	andeq	r0, r2, r4, lsl r3
   2024c:	andeq	r0, r2, r8, asr r3
   20250:	andeq	r0, r2, r0, lsr #7
   20254:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   20258:	andeq	r0, r2, r8, asr #8
   2025c:	andeq	r0, r2, r8, lsr #9
   20260:	str	r3, [sp]
   20264:	mov	r1, #1
   20268:	mov	r3, r2
   2026c:	ldr	r2, [pc, #704]	; 20534 <__assert_fail@plt+0xf01c>
   20270:	bl	1144c <__fprintf_chk@plt>
   20274:	b	201c4 <__assert_fail@plt+0xecac>
   20278:	mov	r2, #5
   2027c:	ldr	r1, [pc, #692]	; 20538 <__assert_fail@plt+0xf020>
   20280:	mov	r0, #0
   20284:	bl	112a8 <dcgettext@plt>
   20288:	ldr	r3, [r4]
   2028c:	mov	r1, #1
   20290:	mov	r2, r0
   20294:	mov	r0, r5
   20298:	add	sp, sp, #32
   2029c:	pop	{r4, r5, r6, lr}
   202a0:	b	1144c <__fprintf_chk@plt>
   202a4:	mov	r2, #5
   202a8:	ldr	r1, [pc, #652]	; 2053c <__assert_fail@plt+0xf024>
   202ac:	mov	r0, #0
   202b0:	bl	112a8 <dcgettext@plt>
   202b4:	ldr	r3, [r4, #4]
   202b8:	mov	r1, #1
   202bc:	str	r3, [sp, #48]	; 0x30
   202c0:	ldr	r3, [r4]
   202c4:	mov	r2, r0
   202c8:	mov	r0, r5
   202cc:	add	sp, sp, #32
   202d0:	pop	{r4, r5, r6, lr}
   202d4:	b	1144c <__fprintf_chk@plt>
   202d8:	mov	r2, #5
   202dc:	ldr	r1, [pc, #604]	; 20540 <__assert_fail@plt+0xf028>
   202e0:	mov	r0, #0
   202e4:	bl	112a8 <dcgettext@plt>
   202e8:	ldr	r3, [r4, #8]
   202ec:	mov	r1, #1
   202f0:	str	r3, [sp, #52]	; 0x34
   202f4:	ldr	r3, [r4, #4]
   202f8:	str	r3, [sp, #48]	; 0x30
   202fc:	ldr	r3, [r4]
   20300:	mov	r2, r0
   20304:	mov	r0, r5
   20308:	add	sp, sp, #32
   2030c:	pop	{r4, r5, r6, lr}
   20310:	b	1144c <__fprintf_chk@plt>
   20314:	mov	r2, #5
   20318:	ldr	r1, [pc, #548]	; 20544 <__assert_fail@plt+0xf02c>
   2031c:	mov	r0, #0
   20320:	bl	112a8 <dcgettext@plt>
   20324:	ldr	r3, [r4, #12]
   20328:	mov	r1, #1
   2032c:	str	r3, [sp, #8]
   20330:	ldr	r3, [r4, #8]
   20334:	str	r3, [sp, #4]
   20338:	ldr	r3, [r4, #4]
   2033c:	str	r3, [sp]
   20340:	ldr	r3, [r4]
   20344:	mov	r2, r0
   20348:	mov	r0, r5
   2034c:	bl	1144c <__fprintf_chk@plt>
   20350:	add	sp, sp, #32
   20354:	pop	{r4, r5, r6, pc}
   20358:	mov	r2, #5
   2035c:	ldr	r1, [pc, #484]	; 20548 <__assert_fail@plt+0xf030>
   20360:	mov	r0, #0
   20364:	bl	112a8 <dcgettext@plt>
   20368:	ldr	r3, [r4, #16]
   2036c:	mov	r1, #1
   20370:	str	r3, [sp, #12]
   20374:	ldr	r3, [r4, #12]
   20378:	str	r3, [sp, #8]
   2037c:	ldr	r3, [r4, #8]
   20380:	str	r3, [sp, #4]
   20384:	ldr	r3, [r4, #4]
   20388:	str	r3, [sp]
   2038c:	ldr	r3, [r4]
   20390:	mov	r2, r0
   20394:	mov	r0, r5
   20398:	bl	1144c <__fprintf_chk@plt>
   2039c:	b	20350 <__assert_fail@plt+0xee38>
   203a0:	mov	r2, #5
   203a4:	ldr	r1, [pc, #416]	; 2054c <__assert_fail@plt+0xf034>
   203a8:	mov	r0, #0
   203ac:	bl	112a8 <dcgettext@plt>
   203b0:	ldr	r3, [r4, #20]
   203b4:	mov	r1, #1
   203b8:	str	r3, [sp, #16]
   203bc:	ldr	r3, [r4, #16]
   203c0:	str	r3, [sp, #12]
   203c4:	ldr	r3, [r4, #12]
   203c8:	str	r3, [sp, #8]
   203cc:	ldr	r3, [r4, #8]
   203d0:	str	r3, [sp, #4]
   203d4:	ldr	r3, [r4, #4]
   203d8:	str	r3, [sp]
   203dc:	ldr	r3, [r4]
   203e0:	mov	r2, r0
   203e4:	mov	r0, r5
   203e8:	bl	1144c <__fprintf_chk@plt>
   203ec:	b	20350 <__assert_fail@plt+0xee38>
   203f0:	mov	r2, #5
   203f4:	ldr	r1, [pc, #340]	; 20550 <__assert_fail@plt+0xf038>
   203f8:	mov	r0, #0
   203fc:	bl	112a8 <dcgettext@plt>
   20400:	ldr	r3, [r4, #24]
   20404:	mov	r1, #1
   20408:	str	r3, [sp, #20]
   2040c:	ldr	r3, [r4, #20]
   20410:	str	r3, [sp, #16]
   20414:	ldr	r3, [r4, #16]
   20418:	str	r3, [sp, #12]
   2041c:	ldr	r3, [r4, #12]
   20420:	str	r3, [sp, #8]
   20424:	ldr	r3, [r4, #8]
   20428:	str	r3, [sp, #4]
   2042c:	ldr	r3, [r4, #4]
   20430:	str	r3, [sp]
   20434:	ldr	r3, [r4]
   20438:	mov	r2, r0
   2043c:	mov	r0, r5
   20440:	bl	1144c <__fprintf_chk@plt>
   20444:	b	20350 <__assert_fail@plt+0xee38>
   20448:	mov	r2, #5
   2044c:	ldr	r1, [pc, #256]	; 20554 <__assert_fail@plt+0xf03c>
   20450:	mov	r0, #0
   20454:	bl	112a8 <dcgettext@plt>
   20458:	ldr	r3, [r4, #28]
   2045c:	mov	r1, #1
   20460:	str	r3, [sp, #24]
   20464:	ldr	r3, [r4, #24]
   20468:	str	r3, [sp, #20]
   2046c:	ldr	r3, [r4, #20]
   20470:	str	r3, [sp, #16]
   20474:	ldr	r3, [r4, #16]
   20478:	str	r3, [sp, #12]
   2047c:	ldr	r3, [r4, #12]
   20480:	str	r3, [sp, #8]
   20484:	ldr	r3, [r4, #8]
   20488:	str	r3, [sp, #4]
   2048c:	ldr	r3, [r4, #4]
   20490:	str	r3, [sp]
   20494:	ldr	r3, [r4]
   20498:	mov	r2, r0
   2049c:	mov	r0, r5
   204a0:	bl	1144c <__fprintf_chk@plt>
   204a4:	b	20350 <__assert_fail@plt+0xee38>
   204a8:	ldr	r1, [pc, #168]	; 20558 <__assert_fail@plt+0xf040>
   204ac:	mov	r2, #5
   204b0:	mov	r0, #0
   204b4:	bl	112a8 <dcgettext@plt>
   204b8:	ldr	r3, [r4, #32]
   204bc:	mov	r1, #1
   204c0:	str	r3, [sp, #28]
   204c4:	ldr	r3, [r4, #28]
   204c8:	str	r3, [sp, #24]
   204cc:	ldr	r3, [r4, #24]
   204d0:	str	r3, [sp, #20]
   204d4:	ldr	r3, [r4, #20]
   204d8:	str	r3, [sp, #16]
   204dc:	ldr	r3, [r4, #16]
   204e0:	str	r3, [sp, #12]
   204e4:	ldr	r3, [r4, #12]
   204e8:	str	r3, [sp, #8]
   204ec:	ldr	r3, [r4, #8]
   204f0:	str	r3, [sp, #4]
   204f4:	ldr	r3, [r4, #4]
   204f8:	str	r3, [sp]
   204fc:	ldr	r3, [r4]
   20500:	mov	r2, r0
   20504:	mov	r0, r5
   20508:	bl	1144c <__fprintf_chk@plt>
   2050c:	b	20350 <__assert_fail@plt+0xee38>
   20510:	mov	r2, #5
   20514:	ldr	r1, [pc, #64]	; 2055c <__assert_fail@plt+0xf044>
   20518:	b	204b0 <__assert_fail@plt+0xef98>
   2051c:	andeq	r2, r2, r5, ror #8
   20520:	andeq	r2, r2, r8, ror r4
   20524:	andeq	r0, r0, r6, ror #15
   20528:	andeq	r2, r2, r6, asr #14
   2052c:	andeq	r2, r2, ip, ror r4
   20530:	andeq	r2, r2, r7, lsr #10
   20534:	andeq	r2, r2, r1, ror r4
   20538:	andeq	r2, r2, r9, asr #10
   2053c:	andeq	r2, r2, r9, asr r5
   20540:	andeq	r2, r2, r0, ror r5
   20544:	andeq	r2, r2, ip, lsl #11
   20548:	andeq	r2, r2, ip, lsr #11
   2054c:	ldrdeq	r2, [r2], -r0
   20550:	strdeq	r2, [r2], -r8
   20554:	andeq	r2, r2, r4, lsr #12
   20558:	andeq	r2, r2, r4, asr r6
   2055c:	andeq	r2, r2, r8, lsl #13
   20560:	push	{r0, r1, r4, lr}
   20564:	mov	ip, #0
   20568:	ldr	lr, [sp, #16]
   2056c:	ldr	r4, [lr, ip, lsl #2]
   20570:	cmp	r4, #0
   20574:	bne	2058c <__assert_fail@plt+0xf074>
   20578:	str	ip, [sp, #4]
   2057c:	str	lr, [sp]
   20580:	bl	20194 <__assert_fail@plt+0xec7c>
   20584:	add	sp, sp, #8
   20588:	pop	{r4, pc}
   2058c:	add	ip, ip, #1
   20590:	b	2056c <__assert_fail@plt+0xf054>
   20594:	push	{r4, r5, lr}
   20598:	sub	sp, sp, #52	; 0x34
   2059c:	mov	ip, #0
   205a0:	ldr	r5, [sp, #64]	; 0x40
   205a4:	add	lr, sp, #8
   205a8:	ldr	r4, [r5, ip, lsl #2]
   205ac:	cmp	r4, #0
   205b0:	str	r4, [lr, ip, lsl #2]
   205b4:	beq	205c4 <__assert_fail@plt+0xf0ac>
   205b8:	add	ip, ip, #1
   205bc:	cmp	ip, #10
   205c0:	bne	205a8 <__assert_fail@plt+0xf090>
   205c4:	str	ip, [sp, #4]
   205c8:	str	lr, [sp]
   205cc:	bl	20194 <__assert_fail@plt+0xec7c>
   205d0:	add	sp, sp, #52	; 0x34
   205d4:	pop	{r4, r5, pc}
   205d8:	push	{r3}		; (str r3, [sp, #-4]!)
   205dc:	push	{r0, r1, r2, r3, lr}
   205e0:	add	r3, sp, #24
   205e4:	str	r3, [sp, #12]
   205e8:	str	r3, [sp]
   205ec:	ldr	r3, [sp, #20]
   205f0:	bl	20594 <__assert_fail@plt+0xf07c>
   205f4:	add	sp, sp, #16
   205f8:	pop	{lr}		; (ldr lr, [sp], #4)
   205fc:	add	sp, sp, #4
   20600:	bx	lr
   20604:	ldr	r3, [pc, #116]	; 20680 <__assert_fail@plt+0xf168>
   20608:	push	{r4, lr}
   2060c:	mov	r0, #10
   20610:	ldr	r1, [r3]
   20614:	bl	1129c <fputc_unlocked@plt>
   20618:	mov	r2, #5
   2061c:	ldr	r1, [pc, #96]	; 20684 <__assert_fail@plt+0xf16c>
   20620:	mov	r0, #0
   20624:	bl	112a8 <dcgettext@plt>
   20628:	ldr	r2, [pc, #88]	; 20688 <__assert_fail@plt+0xf170>
   2062c:	mov	r1, r0
   20630:	mov	r0, #1
   20634:	bl	11434 <__printf_chk@plt>
   20638:	mov	r2, #5
   2063c:	ldr	r1, [pc, #72]	; 2068c <__assert_fail@plt+0xf174>
   20640:	mov	r0, #0
   20644:	bl	112a8 <dcgettext@plt>
   20648:	ldr	r3, [pc, #64]	; 20690 <__assert_fail@plt+0xf178>
   2064c:	ldr	r2, [pc, #64]	; 20694 <__assert_fail@plt+0xf17c>
   20650:	mov	r1, r0
   20654:	mov	r0, #1
   20658:	bl	11434 <__printf_chk@plt>
   2065c:	mov	r2, #5
   20660:	ldr	r1, [pc, #48]	; 20698 <__assert_fail@plt+0xf180>
   20664:	mov	r0, #0
   20668:	bl	112a8 <dcgettext@plt>
   2066c:	ldr	r2, [pc, #40]	; 2069c <__assert_fail@plt+0xf184>
   20670:	pop	{r4, lr}
   20674:	mov	r1, r0
   20678:	mov	r0, #1
   2067c:	b	11434 <__printf_chk@plt>
   20680:	andeq	r3, r3, ip, lsr #3
   20684:	andeq	r2, r2, r4, asr #13
   20688:	ldrdeq	r2, [r2], -r8
   2068c:	andeq	r2, r2, lr, ror #13
   20690:	strdeq	r1, [r2], -ip
   20694:	andeq	r1, r2, r4, lsr #28
   20698:	andeq	r2, r2, r2, lsl #14
   2069c:	andeq	r2, r2, r9, lsr #14
   206a0:	push	{r4, lr}
   206a4:	bl	20bbc <__assert_fail@plt+0xf6a4>
   206a8:	cmp	r0, #0
   206ac:	popne	{r4, pc}
   206b0:	bl	20b34 <__assert_fail@plt+0xf61c>
   206b4:	push	{r4, lr}
   206b8:	bl	20bbc <__assert_fail@plt+0xf6a4>
   206bc:	cmp	r0, #0
   206c0:	popne	{r4, pc}
   206c4:	bl	20b34 <__assert_fail@plt+0xf61c>
   206c8:	b	206a0 <__assert_fail@plt+0xf188>
   206cc:	push	{r4, r5, r6, lr}
   206d0:	mov	r5, r0
   206d4:	mov	r4, r1
   206d8:	bl	20bfc <__assert_fail@plt+0xf6e4>
   206dc:	cmp	r0, #0
   206e0:	popne	{r4, r5, r6, pc}
   206e4:	adds	r4, r4, #0
   206e8:	movne	r4, #1
   206ec:	cmp	r5, #0
   206f0:	orreq	r4, r4, #1
   206f4:	cmp	r4, #0
   206f8:	popeq	{r4, r5, r6, pc}
   206fc:	bl	20b34 <__assert_fail@plt+0xf61c>
   20700:	push	{r4, lr}
   20704:	cmp	r1, #0
   20708:	orreq	r1, r1, #1
   2070c:	bl	20bfc <__assert_fail@plt+0xf6e4>
   20710:	cmp	r0, #0
   20714:	popne	{r4, pc}
   20718:	bl	20b34 <__assert_fail@plt+0xf61c>
   2071c:	push	{r4, r5, r6, lr}
   20720:	mov	r6, r0
   20724:	mov	r5, r1
   20728:	mov	r4, r2
   2072c:	bl	20f9c <__assert_fail@plt+0xfa84>
   20730:	cmp	r0, #0
   20734:	popne	{r4, r5, r6, pc}
   20738:	cmp	r6, #0
   2073c:	beq	2074c <__assert_fail@plt+0xf234>
   20740:	cmp	r5, #0
   20744:	cmpne	r4, #0
   20748:	popeq	{r4, r5, r6, pc}
   2074c:	bl	20b34 <__assert_fail@plt+0xf61c>
   20750:	b	2071c <__assert_fail@plt+0xf204>
   20754:	cmp	r2, #0
   20758:	cmpne	r1, #0
   2075c:	moveq	r2, #1
   20760:	moveq	r1, r2
   20764:	push	{r4, lr}
   20768:	bl	20f9c <__assert_fail@plt+0xfa84>
   2076c:	cmp	r0, #0
   20770:	popne	{r4, pc}
   20774:	bl	20b34 <__assert_fail@plt+0xf61c>
   20778:	mov	r2, r1
   2077c:	mov	r1, r0
   20780:	mov	r0, #0
   20784:	b	2071c <__assert_fail@plt+0xf204>
   20788:	mov	r2, r1
   2078c:	mov	r1, r0
   20790:	mov	r0, #0
   20794:	b	20754 <__assert_fail@plt+0xf23c>
   20798:	push	{r4, r5, r6, r7, r8, lr}
   2079c:	subs	r7, r0, #0
   207a0:	mov	r5, r1
   207a4:	mov	r6, r2
   207a8:	ldr	r4, [r1]
   207ac:	bne	207e8 <__assert_fail@plt+0xf2d0>
   207b0:	cmp	r4, #0
   207b4:	bne	207d0 <__assert_fail@plt+0xf2b8>
   207b8:	mov	r1, r2
   207bc:	mov	r0, #64	; 0x40
   207c0:	bl	2106c <__assert_fail@plt+0xfb54>
   207c4:	cmp	r0, #0
   207c8:	movne	r4, r0
   207cc:	addeq	r4, r0, #1
   207d0:	mov	r2, r6
   207d4:	mov	r1, r4
   207d8:	mov	r0, r7
   207dc:	bl	2071c <__assert_fail@plt+0xf204>
   207e0:	str	r4, [r5]
   207e4:	pop	{r4, r5, r6, r7, r8, pc}
   207e8:	lsr	r2, r4, #1
   207ec:	add	r3, r2, #1
   207f0:	mvn	r3, r3
   207f4:	cmp	r4, r3
   207f8:	addls	r4, r4, #1
   207fc:	addls	r4, r4, r2
   20800:	bls	207d0 <__assert_fail@plt+0xf2b8>
   20804:	bl	20b34 <__assert_fail@plt+0xf61c>
   20808:	mov	r2, #1
   2080c:	b	20798 <__assert_fail@plt+0xf280>
   20810:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20814:	mov	sl, r0
   20818:	ldr	r8, [r1]
   2081c:	mov	fp, r1
   20820:	mov	r5, r2
   20824:	asrs	r4, r8, #1
   20828:	mov	r9, r3
   2082c:	ldr	r7, [sp, #48]	; 0x30
   20830:	bpl	208cc <__assert_fail@plt+0xf3b4>
   20834:	rsb	r2, r4, #-2147483648	; 0x80000000
   20838:	cmp	r8, r2
   2083c:	movge	r2, #0
   20840:	movlt	r2, #1
   20844:	mvn	r3, r9
   20848:	cmp	r2, #0
   2084c:	lsr	r3, r3, #31
   20850:	addeq	r4, r4, r8
   20854:	mvnne	r4, #-2147483648	; 0x80000000
   20858:	mov	r0, r3
   2085c:	cmp	r9, r4
   20860:	movge	r0, #0
   20864:	andlt	r0, r0, #1
   20868:	cmp	r0, #0
   2086c:	str	r3, [sp, #4]
   20870:	bne	20a40 <__assert_fail@plt+0xf528>
   20874:	cmp	r7, #0
   20878:	bge	2098c <__assert_fail@plt+0xf474>
   2087c:	cmp	r4, #0
   20880:	bge	208e4 <__assert_fail@plt+0xf3cc>
   20884:	mov	r1, r7
   20888:	mvn	r0, #-2147483648	; 0x80000000
   2088c:	bl	21278 <__assert_fail@plt+0xfd60>
   20890:	cmp	r0, r4
   20894:	movle	r0, #0
   20898:	movgt	r0, #1
   2089c:	cmp	r0, #0
   208a0:	mvnne	r6, #-2147483648	; 0x80000000
   208a4:	beq	208f4 <__assert_fail@plt+0xf3dc>
   208a8:	mov	r1, r7
   208ac:	mov	r0, r6
   208b0:	bl	21278 <__assert_fail@plt+0xfd60>
   208b4:	mov	r1, r7
   208b8:	mov	r4, r0
   208bc:	mov	r0, r6
   208c0:	bl	21498 <__assert_fail@plt+0xff80>
   208c4:	sub	r1, r6, r1
   208c8:	b	20904 <__assert_fail@plt+0xf3ec>
   208cc:	mvn	r2, #-2147483648	; 0x80000000
   208d0:	sub	r2, r2, r4
   208d4:	cmp	r8, r2
   208d8:	movle	r2, #0
   208dc:	movgt	r2, #1
   208e0:	b	20844 <__assert_fail@plt+0xf32c>
   208e4:	cmn	r7, #1
   208e8:	movne	r1, r7
   208ec:	movne	r0, #-2147483648	; 0x80000000
   208f0:	bne	20a58 <__assert_fail@plt+0xf540>
   208f4:	mul	r1, r7, r4
   208f8:	cmp	r1, #63	; 0x3f
   208fc:	movle	r6, #64	; 0x40
   20900:	ble	208a8 <__assert_fail@plt+0xf390>
   20904:	cmp	sl, #0
   20908:	sub	r2, r4, r8
   2090c:	streq	sl, [fp]
   20910:	cmp	r2, r5
   20914:	bge	209e8 <__assert_fail@plt+0xf4d0>
   20918:	cmp	r5, #0
   2091c:	bge	209b4 <__assert_fail@plt+0xf49c>
   20920:	rsb	r2, r5, #-2147483648	; 0x80000000
   20924:	cmp	r8, r2
   20928:	movge	r2, #0
   2092c:	movlt	r2, #1
   20930:	cmp	r2, #0
   20934:	bne	20988 <__assert_fail@plt+0xf470>
   20938:	ldr	r0, [sp, #4]
   2093c:	add	r5, r8, r5
   20940:	cmp	r9, r5
   20944:	movge	r0, #0
   20948:	andlt	r0, r0, #1
   2094c:	cmp	r0, #0
   20950:	mov	r4, r5
   20954:	bne	20988 <__assert_fail@plt+0xf470>
   20958:	cmp	r7, #0
   2095c:	bge	209fc <__assert_fail@plt+0xf4e4>
   20960:	cmp	r5, #0
   20964:	bge	209d4 <__assert_fail@plt+0xf4bc>
   20968:	mov	r1, r7
   2096c:	mvn	r0, #-2147483648	; 0x80000000
   20970:	bl	21278 <__assert_fail@plt+0xfd60>
   20974:	cmp	r5, r0
   20978:	movge	r0, #0
   2097c:	movlt	r0, #1
   20980:	cmp	r0, #0
   20984:	beq	209e4 <__assert_fail@plt+0xf4cc>
   20988:	bl	20b34 <__assert_fail@plt+0xf61c>
   2098c:	beq	208f4 <__assert_fail@plt+0xf3dc>
   20990:	cmp	r4, #0
   20994:	bge	20a50 <__assert_fail@plt+0xf538>
   20998:	cmn	r4, #1
   2099c:	beq	208f4 <__assert_fail@plt+0xf3dc>
   209a0:	mov	r1, r4
   209a4:	mov	r0, #-2147483648	; 0x80000000
   209a8:	bl	21278 <__assert_fail@plt+0xfd60>
   209ac:	cmp	r7, r0
   209b0:	b	20894 <__assert_fail@plt+0xf37c>
   209b4:	cmp	r8, #0
   209b8:	blt	20938 <__assert_fail@plt+0xf420>
   209bc:	mvn	r2, #-2147483648	; 0x80000000
   209c0:	sub	r2, r2, r5
   209c4:	cmp	r8, r2
   209c8:	movle	r2, #0
   209cc:	movgt	r2, #1
   209d0:	b	20930 <__assert_fail@plt+0xf418>
   209d4:	cmn	r7, #1
   209d8:	movne	r1, r7
   209dc:	movne	r0, #-2147483648	; 0x80000000
   209e0:	bne	20a34 <__assert_fail@plt+0xf51c>
   209e4:	mul	r1, r5, r7
   209e8:	mov	r0, sl
   209ec:	bl	206cc <__assert_fail@plt+0xf1b4>
   209f0:	str	r4, [fp]
   209f4:	add	sp, sp, #12
   209f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   209fc:	beq	209e4 <__assert_fail@plt+0xf4cc>
   20a00:	cmp	r5, #0
   20a04:	movge	r1, r7
   20a08:	mvnge	r0, #-2147483648	; 0x80000000
   20a0c:	bge	20a34 <__assert_fail@plt+0xf51c>
   20a10:	cmn	r5, #1
   20a14:	beq	209e4 <__assert_fail@plt+0xf4cc>
   20a18:	mov	r1, r5
   20a1c:	mov	r0, #-2147483648	; 0x80000000
   20a20:	bl	21278 <__assert_fail@plt+0xfd60>
   20a24:	cmp	r7, r0
   20a28:	movle	r0, #0
   20a2c:	movgt	r0, #1
   20a30:	b	20980 <__assert_fail@plt+0xf468>
   20a34:	bl	21278 <__assert_fail@plt+0xfd60>
   20a38:	cmp	r5, r0
   20a3c:	b	20a28 <__assert_fail@plt+0xf510>
   20a40:	cmp	r7, #0
   20a44:	mov	r4, r9
   20a48:	blt	208e4 <__assert_fail@plt+0xf3cc>
   20a4c:	beq	208f4 <__assert_fail@plt+0xf3dc>
   20a50:	mov	r1, r7
   20a54:	mvn	r0, #-2147483648	; 0x80000000
   20a58:	bl	21278 <__assert_fail@plt+0xfd60>
   20a5c:	cmp	r0, r4
   20a60:	movge	r0, #0
   20a64:	movlt	r0, #1
   20a68:	b	2089c <__assert_fail@plt+0xf384>
   20a6c:	push	{r4, lr}
   20a70:	bl	20b74 <__assert_fail@plt+0xf65c>
   20a74:	cmp	r0, #0
   20a78:	popne	{r4, pc}
   20a7c:	bl	20b34 <__assert_fail@plt+0xf61c>
   20a80:	mov	r1, #1
   20a84:	b	20a6c <__assert_fail@plt+0xf554>
   20a88:	push	{r4, lr}
   20a8c:	bl	20b74 <__assert_fail@plt+0xf65c>
   20a90:	cmp	r0, #0
   20a94:	popne	{r4, pc}
   20a98:	bl	20b34 <__assert_fail@plt+0xf61c>
   20a9c:	mov	r1, #1
   20aa0:	b	20a88 <__assert_fail@plt+0xf570>
   20aa4:	push	{r4, r5, r6, lr}
   20aa8:	mov	r4, r1
   20aac:	mov	r5, r0
   20ab0:	mov	r0, r1
   20ab4:	bl	206a0 <__assert_fail@plt+0xf188>
   20ab8:	mov	r2, r4
   20abc:	mov	r1, r5
   20ac0:	pop	{r4, r5, r6, lr}
   20ac4:	b	11248 <memcpy@plt>
   20ac8:	push	{r4, r5, r6, lr}
   20acc:	mov	r4, r1
   20ad0:	mov	r5, r0
   20ad4:	mov	r0, r1
   20ad8:	bl	206b4 <__assert_fail@plt+0xf19c>
   20adc:	mov	r2, r4
   20ae0:	mov	r1, r5
   20ae4:	pop	{r4, r5, r6, lr}
   20ae8:	b	11248 <memcpy@plt>
   20aec:	push	{r4, r5, r6, lr}
   20af0:	mov	r5, r0
   20af4:	add	r0, r1, #1
   20af8:	mov	r4, r1
   20afc:	bl	206b4 <__assert_fail@plt+0xf19c>
   20b00:	mov	r2, #0
   20b04:	mov	r1, r5
   20b08:	strb	r2, [r0, r4]
   20b0c:	mov	r2, r4
   20b10:	pop	{r4, r5, r6, lr}
   20b14:	b	11248 <memcpy@plt>
   20b18:	push	{r4, lr}
   20b1c:	mov	r4, r0
   20b20:	bl	113c8 <strlen@plt>
   20b24:	add	r1, r0, #1
   20b28:	mov	r0, r4
   20b2c:	pop	{r4, lr}
   20b30:	b	20aa4 <__assert_fail@plt+0xf58c>
   20b34:	ldr	r3, [pc, #44]	; 20b68 <__assert_fail@plt+0xf650>
   20b38:	push	{r4, lr}
   20b3c:	mov	r2, #5
   20b40:	ldr	r1, [pc, #36]	; 20b6c <__assert_fail@plt+0xf654>
   20b44:	mov	r0, #0
   20b48:	ldr	r4, [r3]
   20b4c:	bl	112a8 <dcgettext@plt>
   20b50:	ldr	r2, [pc, #24]	; 20b70 <__assert_fail@plt+0xf658>
   20b54:	mov	r1, #0
   20b58:	mov	r3, r0
   20b5c:	mov	r0, r4
   20b60:	bl	11344 <error@plt>
   20b64:	bl	11500 <abort@plt>
   20b68:	andeq	r3, r3, r0, asr r1
   20b6c:	andeq	r2, r2, r5, ror r7
   20b70:	strheq	r2, [r2], -r2	; <UNPREDICTABLE>
   20b74:	cmp	r1, #0
   20b78:	cmpne	r0, #0
   20b7c:	moveq	r1, #1
   20b80:	moveq	r0, r1
   20b84:	umull	r2, r3, r0, r1
   20b88:	adds	r3, r3, #0
   20b8c:	movne	r3, #1
   20b90:	cmp	r2, #0
   20b94:	blt	20ba4 <__assert_fail@plt+0xf68c>
   20b98:	cmp	r3, #0
   20b9c:	bne	20ba4 <__assert_fail@plt+0xf68c>
   20ba0:	b	11188 <calloc@plt>
   20ba4:	push	{r4, lr}
   20ba8:	bl	113f8 <__errno_location@plt>
   20bac:	mov	r3, #12
   20bb0:	str	r3, [r0]
   20bb4:	mov	r0, #0
   20bb8:	pop	{r4, pc}
   20bbc:	cmp	r0, #0
   20bc0:	mov	r3, #0
   20bc4:	moveq	r0, #1
   20bc8:	adds	r3, r3, #0
   20bcc:	movne	r3, #1
   20bd0:	cmp	r0, #0
   20bd4:	blt	20be4 <__assert_fail@plt+0xf6cc>
   20bd8:	cmp	r3, #0
   20bdc:	bne	20be4 <__assert_fail@plt+0xf6cc>
   20be0:	b	11368 <malloc@plt>
   20be4:	push	{r4, lr}
   20be8:	bl	113f8 <__errno_location@plt>
   20bec:	mov	r3, #12
   20bf0:	str	r3, [r0]
   20bf4:	mov	r0, #0
   20bf8:	pop	{r4, pc}
   20bfc:	cmp	r0, #0
   20c00:	push	{r4, lr}
   20c04:	mov	r4, r1
   20c08:	bne	20c18 <__assert_fail@plt+0xf700>
   20c0c:	mov	r0, r1
   20c10:	pop	{r4, lr}
   20c14:	b	20bbc <__assert_fail@plt+0xf6a4>
   20c18:	cmp	r1, #0
   20c1c:	bne	20c2c <__assert_fail@plt+0xf714>
   20c20:	bl	130e8 <__assert_fail@plt+0x1bd0>
   20c24:	mov	r0, #0
   20c28:	pop	{r4, pc}
   20c2c:	cmp	r1, #0
   20c30:	blt	20c40 <__assert_fail@plt+0xf728>
   20c34:	mov	r3, #0
   20c38:	cmp	r3, r3
   20c3c:	beq	20c50 <__assert_fail@plt+0xf738>
   20c40:	bl	113f8 <__errno_location@plt>
   20c44:	mov	r3, #12
   20c48:	str	r3, [r0]
   20c4c:	b	20c24 <__assert_fail@plt+0xf70c>
   20c50:	pop	{r4, lr}
   20c54:	b	112c0 <realloc@plt>
   20c58:	push	{r4, r5, r6, lr}
   20c5c:	mov	r4, r0
   20c60:	bl	11320 <__fpending@plt>
   20c64:	mov	r5, r0
   20c68:	mov	r0, r4
   20c6c:	bl	1132c <ferror_unlocked@plt>
   20c70:	mov	r6, r0
   20c74:	mov	r0, r4
   20c78:	bl	20d80 <__assert_fail@plt+0xf868>
   20c7c:	cmp	r6, #0
   20c80:	mov	r4, r0
   20c84:	bne	20cb0 <__assert_fail@plt+0xf798>
   20c88:	cmp	r0, #0
   20c8c:	beq	20ca8 <__assert_fail@plt+0xf790>
   20c90:	cmp	r5, #0
   20c94:	bne	20cc0 <__assert_fail@plt+0xf7a8>
   20c98:	bl	113f8 <__errno_location@plt>
   20c9c:	ldr	r4, [r0]
   20ca0:	subs	r4, r4, #9
   20ca4:	mvnne	r4, #0
   20ca8:	mov	r0, r4
   20cac:	pop	{r4, r5, r6, pc}
   20cb0:	cmp	r0, #0
   20cb4:	bne	20cc0 <__assert_fail@plt+0xf7a8>
   20cb8:	bl	113f8 <__errno_location@plt>
   20cbc:	str	r4, [r0]
   20cc0:	mvn	r4, #0
   20cc4:	b	20ca8 <__assert_fail@plt+0xf790>
   20cc8:	ldr	ip, [r0, #4]
   20ccc:	cmp	ip, r1
   20cd0:	bcc	20ce0 <__assert_fail@plt+0xf7c8>
   20cd4:	str	r1, [r0]
   20cd8:	mov	r0, #1
   20cdc:	bx	lr
   20ce0:	cmp	r3, #0
   20ce4:	push	{r4, r5, r6, r7, r8, lr}
   20ce8:	mov	r7, r3
   20cec:	mov	r6, r2
   20cf0:	mov	r5, r1
   20cf4:	mov	r4, r0
   20cf8:	beq	20d10 <__assert_fail@plt+0xf7f8>
   20cfc:	mov	r1, r3
   20d00:	mvn	r0, #0
   20d04:	bl	2106c <__assert_fail@plt+0xfb54>
   20d08:	cmp	r5, r0
   20d0c:	bhi	20d70 <__assert_fail@plt+0xf858>
   20d10:	ldr	r0, [r4, #8]
   20d14:	mul	r1, r7, r5
   20d18:	cmp	r0, r6
   20d1c:	bne	20d60 <__assert_fail@plt+0xf848>
   20d20:	mov	r0, r1
   20d24:	bl	20bbc <__assert_fail@plt+0xf6a4>
   20d28:	subs	r6, r0, #0
   20d2c:	bne	20d38 <__assert_fail@plt+0xf820>
   20d30:	mov	r0, #0
   20d34:	pop	{r4, r5, r6, r7, r8, pc}
   20d38:	ldr	r1, [r4, #8]
   20d3c:	cmp	r1, #0
   20d40:	beq	20d50 <__assert_fail@plt+0xf838>
   20d44:	ldr	r2, [r4]
   20d48:	mul	r2, r2, r7
   20d4c:	bl	11248 <memcpy@plt>
   20d50:	stmib	r4, {r5, r6}
   20d54:	str	r5, [r4]
   20d58:	mov	r0, #1
   20d5c:	pop	{r4, r5, r6, r7, r8, pc}
   20d60:	bl	20bfc <__assert_fail@plt+0xf6e4>
   20d64:	subs	r6, r0, #0
   20d68:	bne	20d50 <__assert_fail@plt+0xf838>
   20d6c:	b	20d30 <__assert_fail@plt+0xf818>
   20d70:	bl	113f8 <__errno_location@plt>
   20d74:	mov	r3, #12
   20d78:	str	r3, [r0]
   20d7c:	b	20d30 <__assert_fail@plt+0xf818>
   20d80:	push	{r0, r1, r2, r4, r5, lr}
   20d84:	mov	r4, r0
   20d88:	bl	11440 <fileno@plt>
   20d8c:	cmp	r0, #0
   20d90:	mov	r0, r4
   20d94:	bge	20da4 <__assert_fail@plt+0xf88c>
   20d98:	add	sp, sp, #12
   20d9c:	pop	{r4, r5, lr}
   20da0:	b	11464 <fclose@plt>
   20da4:	bl	11380 <__freading@plt>
   20da8:	cmp	r0, #0
   20dac:	bne	20de8 <__assert_fail@plt+0xf8d0>
   20db0:	mov	r0, r4
   20db4:	bl	20e28 <__assert_fail@plt+0xf910>
   20db8:	cmp	r0, #0
   20dbc:	bne	20e1c <__assert_fail@plt+0xf904>
   20dc0:	mov	r5, #0
   20dc4:	mov	r0, r4
   20dc8:	bl	11464 <fclose@plt>
   20dcc:	cmp	r5, #0
   20dd0:	beq	20de0 <__assert_fail@plt+0xf8c8>
   20dd4:	bl	113f8 <__errno_location@plt>
   20dd8:	str	r5, [r0]
   20ddc:	mvn	r0, #0
   20de0:	add	sp, sp, #12
   20de4:	pop	{r4, r5, pc}
   20de8:	mov	r0, r4
   20dec:	bl	11440 <fileno@plt>
   20df0:	mov	r3, #1
   20df4:	str	r3, [sp]
   20df8:	mov	r2, #0
   20dfc:	mov	r3, #0
   20e00:	bl	11308 <lseek64@plt>
   20e04:	mvn	r3, #0
   20e08:	mvn	r2, #0
   20e0c:	cmp	r1, r3
   20e10:	cmpeq	r0, r2
   20e14:	bne	20db0 <__assert_fail@plt+0xf898>
   20e18:	b	20dc0 <__assert_fail@plt+0xf8a8>
   20e1c:	bl	113f8 <__errno_location@plt>
   20e20:	ldr	r5, [r0]
   20e24:	b	20dc4 <__assert_fail@plt+0xf8ac>
   20e28:	push	{r0, r1, r4, lr}
   20e2c:	subs	r4, r0, #0
   20e30:	bne	20e44 <__assert_fail@plt+0xf92c>
   20e34:	mov	r0, r4
   20e38:	add	sp, sp, #8
   20e3c:	pop	{r4, lr}
   20e40:	b	11200 <fflush@plt>
   20e44:	bl	11380 <__freading@plt>
   20e48:	cmp	r0, #0
   20e4c:	beq	20e34 <__assert_fail@plt+0xf91c>
   20e50:	ldr	r3, [r4]
   20e54:	tst	r3, #256	; 0x100
   20e58:	beq	20e34 <__assert_fail@plt+0xf91c>
   20e5c:	mov	r3, #1
   20e60:	str	r3, [sp]
   20e64:	mov	r2, #0
   20e68:	mov	r3, #0
   20e6c:	mov	r0, r4
   20e70:	bl	20e78 <__assert_fail@plt+0xf960>
   20e74:	b	20e34 <__assert_fail@plt+0xf91c>
   20e78:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   20e7c:	mov	r4, r0
   20e80:	ldmib	r0, {ip, lr}
   20e84:	ldr	r8, [sp, #32]
   20e88:	cmp	lr, ip
   20e8c:	bne	20ef8 <__assert_fail@plt+0xf9e0>
   20e90:	ldr	lr, [r0, #20]
   20e94:	ldr	ip, [r0, #16]
   20e98:	cmp	lr, ip
   20e9c:	bne	20ef8 <__assert_fail@plt+0xf9e0>
   20ea0:	ldr	r5, [r0, #36]	; 0x24
   20ea4:	cmp	r5, #0
   20ea8:	bne	20ef8 <__assert_fail@plt+0xf9e0>
   20eac:	mov	r6, r2
   20eb0:	mov	r7, r3
   20eb4:	bl	11440 <fileno@plt>
   20eb8:	mov	r2, r6
   20ebc:	mov	r3, r7
   20ec0:	str	r8, [sp]
   20ec4:	bl	11308 <lseek64@plt>
   20ec8:	mvn	r3, #0
   20ecc:	mvn	r2, #0
   20ed0:	cmp	r1, r3
   20ed4:	cmpeq	r0, r2
   20ed8:	mvneq	r0, #0
   20edc:	ldrne	r3, [r4]
   20ee0:	strdne	r0, [r4, #80]	; 0x50
   20ee4:	movne	r0, r5
   20ee8:	bicne	r3, r3, #16
   20eec:	strne	r3, [r4]
   20ef0:	add	sp, sp, #8
   20ef4:	pop	{r4, r5, r6, r7, r8, pc}
   20ef8:	str	r8, [sp, #32]
   20efc:	mov	r0, r4
   20f00:	add	sp, sp, #8
   20f04:	pop	{r4, r5, r6, r7, r8, lr}
   20f08:	b	11470 <fseeko64@plt>
   20f0c:	push	{lr}		; (str lr, [sp, #-4]!)
   20f10:	sub	sp, sp, #268	; 0x10c
   20f14:	ldr	r2, [pc, #64]	; 20f5c <__assert_fail@plt+0xfa44>
   20f18:	add	r1, sp, #4
   20f1c:	bl	20fe8 <__assert_fail@plt+0xfad0>
   20f20:	cmp	r0, #0
   20f24:	movne	r0, #0
   20f28:	bne	20f54 <__assert_fail@plt+0xfa3c>
   20f2c:	ldr	r1, [pc, #44]	; 20f60 <__assert_fail@plt+0xfa48>
   20f30:	add	r0, sp, #4
   20f34:	bl	111d0 <strcmp@plt>
   20f38:	cmp	r0, #0
   20f3c:	beq	20f54 <__assert_fail@plt+0xfa3c>
   20f40:	ldr	r1, [pc, #28]	; 20f64 <__assert_fail@plt+0xfa4c>
   20f44:	add	r0, sp, #4
   20f48:	bl	111d0 <strcmp@plt>
   20f4c:	adds	r0, r0, #0
   20f50:	movne	r0, #1
   20f54:	add	sp, sp, #268	; 0x10c
   20f58:	pop	{pc}		; (ldr pc, [sp], #4)
   20f5c:	andeq	r0, r0, r1, lsl #2
   20f60:	andeq	r2, r2, r6, lsl #15
   20f64:	andeq	r2, r2, r8, lsl #15
   20f68:	push	{r4, lr}
   20f6c:	mov	r0, #14
   20f70:	bl	114ac <nl_langinfo@plt>
   20f74:	ldr	r3, [pc, #24]	; 20f94 <__assert_fail@plt+0xfa7c>
   20f78:	cmp	r0, #0
   20f7c:	moveq	r0, r3
   20f80:	ldr	r3, [pc, #16]	; 20f98 <__assert_fail@plt+0xfa80>
   20f84:	ldrb	r2, [r0]
   20f88:	cmp	r2, #0
   20f8c:	moveq	r0, r3
   20f90:	pop	{r4, pc}
   20f94:	andeq	r1, r2, sl, asr #29
   20f98:	andeq	r2, r2, lr, lsl #15
   20f9c:	push	{r4, r5, r6, lr}
   20fa0:	subs	r4, r2, #0
   20fa4:	mov	r6, r0
   20fa8:	mov	r5, r1
   20fac:	beq	20fc4 <__assert_fail@plt+0xfaac>
   20fb0:	mov	r1, r4
   20fb4:	mvn	r0, #0
   20fb8:	bl	2106c <__assert_fail@plt+0xfb54>
   20fbc:	cmp	r0, r5
   20fc0:	bcc	20fd4 <__assert_fail@plt+0xfabc>
   20fc4:	mul	r1, r5, r4
   20fc8:	mov	r0, r6
   20fcc:	pop	{r4, r5, r6, lr}
   20fd0:	b	20bfc <__assert_fail@plt+0xf6e4>
   20fd4:	bl	113f8 <__errno_location@plt>
   20fd8:	mov	r3, #12
   20fdc:	str	r3, [r0]
   20fe0:	mov	r0, #0
   20fe4:	pop	{r4, r5, r6, pc}
   20fe8:	push	{r4, r5, r6, lr}
   20fec:	mov	r5, r1
   20ff0:	mov	r1, #0
   20ff4:	mov	r4, r2
   20ff8:	bl	11488 <setlocale@plt>
   20ffc:	subs	r6, r0, #0
   21000:	bne	21014 <__assert_fail@plt+0xfafc>
   21004:	cmp	r4, #0
   21008:	strbne	r6, [r5]
   2100c:	mov	r0, #22
   21010:	pop	{r4, r5, r6, pc}
   21014:	bl	113c8 <strlen@plt>
   21018:	cmp	r4, r0
   2101c:	bls	21038 <__assert_fail@plt+0xfb20>
   21020:	add	r2, r0, #1
   21024:	mov	r1, r6
   21028:	mov	r0, r5
   2102c:	bl	11248 <memcpy@plt>
   21030:	mov	r0, #0
   21034:	pop	{r4, r5, r6, pc}
   21038:	cmp	r4, #0
   2103c:	beq	2105c <__assert_fail@plt+0xfb44>
   21040:	sub	r4, r4, #1
   21044:	mov	r2, r4
   21048:	mov	r1, r6
   2104c:	mov	r0, r5
   21050:	bl	11248 <memcpy@plt>
   21054:	mov	r3, #0
   21058:	strb	r3, [r5, r4]
   2105c:	mov	r0, #34	; 0x22
   21060:	pop	{r4, r5, r6, pc}
   21064:	mov	r1, #0
   21068:	b	11488 <setlocale@plt>
   2106c:	subs	r2, r1, #1
   21070:	bxeq	lr
   21074:	bcc	2124c <__assert_fail@plt+0xfd34>
   21078:	cmp	r0, r1
   2107c:	bls	21230 <__assert_fail@plt+0xfd18>
   21080:	tst	r1, r2
   21084:	beq	2123c <__assert_fail@plt+0xfd24>
   21088:	clz	r3, r0
   2108c:	clz	r2, r1
   21090:	sub	r3, r2, r3
   21094:	rsbs	r3, r3, #31
   21098:	addne	r3, r3, r3, lsl #1
   2109c:	mov	r2, #0
   210a0:	addne	pc, pc, r3, lsl #2
   210a4:	nop			; (mov r0, r0)
   210a8:	cmp	r0, r1, lsl #31
   210ac:	adc	r2, r2, r2
   210b0:	subcs	r0, r0, r1, lsl #31
   210b4:	cmp	r0, r1, lsl #30
   210b8:	adc	r2, r2, r2
   210bc:	subcs	r0, r0, r1, lsl #30
   210c0:	cmp	r0, r1, lsl #29
   210c4:	adc	r2, r2, r2
   210c8:	subcs	r0, r0, r1, lsl #29
   210cc:	cmp	r0, r1, lsl #28
   210d0:	adc	r2, r2, r2
   210d4:	subcs	r0, r0, r1, lsl #28
   210d8:	cmp	r0, r1, lsl #27
   210dc:	adc	r2, r2, r2
   210e0:	subcs	r0, r0, r1, lsl #27
   210e4:	cmp	r0, r1, lsl #26
   210e8:	adc	r2, r2, r2
   210ec:	subcs	r0, r0, r1, lsl #26
   210f0:	cmp	r0, r1, lsl #25
   210f4:	adc	r2, r2, r2
   210f8:	subcs	r0, r0, r1, lsl #25
   210fc:	cmp	r0, r1, lsl #24
   21100:	adc	r2, r2, r2
   21104:	subcs	r0, r0, r1, lsl #24
   21108:	cmp	r0, r1, lsl #23
   2110c:	adc	r2, r2, r2
   21110:	subcs	r0, r0, r1, lsl #23
   21114:	cmp	r0, r1, lsl #22
   21118:	adc	r2, r2, r2
   2111c:	subcs	r0, r0, r1, lsl #22
   21120:	cmp	r0, r1, lsl #21
   21124:	adc	r2, r2, r2
   21128:	subcs	r0, r0, r1, lsl #21
   2112c:	cmp	r0, r1, lsl #20
   21130:	adc	r2, r2, r2
   21134:	subcs	r0, r0, r1, lsl #20
   21138:	cmp	r0, r1, lsl #19
   2113c:	adc	r2, r2, r2
   21140:	subcs	r0, r0, r1, lsl #19
   21144:	cmp	r0, r1, lsl #18
   21148:	adc	r2, r2, r2
   2114c:	subcs	r0, r0, r1, lsl #18
   21150:	cmp	r0, r1, lsl #17
   21154:	adc	r2, r2, r2
   21158:	subcs	r0, r0, r1, lsl #17
   2115c:	cmp	r0, r1, lsl #16
   21160:	adc	r2, r2, r2
   21164:	subcs	r0, r0, r1, lsl #16
   21168:	cmp	r0, r1, lsl #15
   2116c:	adc	r2, r2, r2
   21170:	subcs	r0, r0, r1, lsl #15
   21174:	cmp	r0, r1, lsl #14
   21178:	adc	r2, r2, r2
   2117c:	subcs	r0, r0, r1, lsl #14
   21180:	cmp	r0, r1, lsl #13
   21184:	adc	r2, r2, r2
   21188:	subcs	r0, r0, r1, lsl #13
   2118c:	cmp	r0, r1, lsl #12
   21190:	adc	r2, r2, r2
   21194:	subcs	r0, r0, r1, lsl #12
   21198:	cmp	r0, r1, lsl #11
   2119c:	adc	r2, r2, r2
   211a0:	subcs	r0, r0, r1, lsl #11
   211a4:	cmp	r0, r1, lsl #10
   211a8:	adc	r2, r2, r2
   211ac:	subcs	r0, r0, r1, lsl #10
   211b0:	cmp	r0, r1, lsl #9
   211b4:	adc	r2, r2, r2
   211b8:	subcs	r0, r0, r1, lsl #9
   211bc:	cmp	r0, r1, lsl #8
   211c0:	adc	r2, r2, r2
   211c4:	subcs	r0, r0, r1, lsl #8
   211c8:	cmp	r0, r1, lsl #7
   211cc:	adc	r2, r2, r2
   211d0:	subcs	r0, r0, r1, lsl #7
   211d4:	cmp	r0, r1, lsl #6
   211d8:	adc	r2, r2, r2
   211dc:	subcs	r0, r0, r1, lsl #6
   211e0:	cmp	r0, r1, lsl #5
   211e4:	adc	r2, r2, r2
   211e8:	subcs	r0, r0, r1, lsl #5
   211ec:	cmp	r0, r1, lsl #4
   211f0:	adc	r2, r2, r2
   211f4:	subcs	r0, r0, r1, lsl #4
   211f8:	cmp	r0, r1, lsl #3
   211fc:	adc	r2, r2, r2
   21200:	subcs	r0, r0, r1, lsl #3
   21204:	cmp	r0, r1, lsl #2
   21208:	adc	r2, r2, r2
   2120c:	subcs	r0, r0, r1, lsl #2
   21210:	cmp	r0, r1, lsl #1
   21214:	adc	r2, r2, r2
   21218:	subcs	r0, r0, r1, lsl #1
   2121c:	cmp	r0, r1
   21220:	adc	r2, r2, r2
   21224:	subcs	r0, r0, r1
   21228:	mov	r0, r2
   2122c:	bx	lr
   21230:	moveq	r0, #1
   21234:	movne	r0, #0
   21238:	bx	lr
   2123c:	clz	r2, r1
   21240:	rsb	r2, r2, #31
   21244:	lsr	r0, r0, r2
   21248:	bx	lr
   2124c:	cmp	r0, #0
   21250:	mvnne	r0, #0
   21254:	b	214b8 <__assert_fail@plt+0xffa0>
   21258:	cmp	r1, #0
   2125c:	beq	2124c <__assert_fail@plt+0xfd34>
   21260:	push	{r0, r1, lr}
   21264:	bl	2106c <__assert_fail@plt+0xfb54>
   21268:	pop	{r1, r2, lr}
   2126c:	mul	r3, r2, r0
   21270:	sub	r1, r1, r3
   21274:	bx	lr
   21278:	cmp	r1, #0
   2127c:	beq	21488 <__assert_fail@plt+0xff70>
   21280:	eor	ip, r0, r1
   21284:	rsbmi	r1, r1, #0
   21288:	subs	r2, r1, #1
   2128c:	beq	21454 <__assert_fail@plt+0xff3c>
   21290:	movs	r3, r0
   21294:	rsbmi	r3, r0, #0
   21298:	cmp	r3, r1
   2129c:	bls	21460 <__assert_fail@plt+0xff48>
   212a0:	tst	r1, r2
   212a4:	beq	21470 <__assert_fail@plt+0xff58>
   212a8:	clz	r2, r3
   212ac:	clz	r0, r1
   212b0:	sub	r2, r0, r2
   212b4:	rsbs	r2, r2, #31
   212b8:	addne	r2, r2, r2, lsl #1
   212bc:	mov	r0, #0
   212c0:	addne	pc, pc, r2, lsl #2
   212c4:	nop			; (mov r0, r0)
   212c8:	cmp	r3, r1, lsl #31
   212cc:	adc	r0, r0, r0
   212d0:	subcs	r3, r3, r1, lsl #31
   212d4:	cmp	r3, r1, lsl #30
   212d8:	adc	r0, r0, r0
   212dc:	subcs	r3, r3, r1, lsl #30
   212e0:	cmp	r3, r1, lsl #29
   212e4:	adc	r0, r0, r0
   212e8:	subcs	r3, r3, r1, lsl #29
   212ec:	cmp	r3, r1, lsl #28
   212f0:	adc	r0, r0, r0
   212f4:	subcs	r3, r3, r1, lsl #28
   212f8:	cmp	r3, r1, lsl #27
   212fc:	adc	r0, r0, r0
   21300:	subcs	r3, r3, r1, lsl #27
   21304:	cmp	r3, r1, lsl #26
   21308:	adc	r0, r0, r0
   2130c:	subcs	r3, r3, r1, lsl #26
   21310:	cmp	r3, r1, lsl #25
   21314:	adc	r0, r0, r0
   21318:	subcs	r3, r3, r1, lsl #25
   2131c:	cmp	r3, r1, lsl #24
   21320:	adc	r0, r0, r0
   21324:	subcs	r3, r3, r1, lsl #24
   21328:	cmp	r3, r1, lsl #23
   2132c:	adc	r0, r0, r0
   21330:	subcs	r3, r3, r1, lsl #23
   21334:	cmp	r3, r1, lsl #22
   21338:	adc	r0, r0, r0
   2133c:	subcs	r3, r3, r1, lsl #22
   21340:	cmp	r3, r1, lsl #21
   21344:	adc	r0, r0, r0
   21348:	subcs	r3, r3, r1, lsl #21
   2134c:	cmp	r3, r1, lsl #20
   21350:	adc	r0, r0, r0
   21354:	subcs	r3, r3, r1, lsl #20
   21358:	cmp	r3, r1, lsl #19
   2135c:	adc	r0, r0, r0
   21360:	subcs	r3, r3, r1, lsl #19
   21364:	cmp	r3, r1, lsl #18
   21368:	adc	r0, r0, r0
   2136c:	subcs	r3, r3, r1, lsl #18
   21370:	cmp	r3, r1, lsl #17
   21374:	adc	r0, r0, r0
   21378:	subcs	r3, r3, r1, lsl #17
   2137c:	cmp	r3, r1, lsl #16
   21380:	adc	r0, r0, r0
   21384:	subcs	r3, r3, r1, lsl #16
   21388:	cmp	r3, r1, lsl #15
   2138c:	adc	r0, r0, r0
   21390:	subcs	r3, r3, r1, lsl #15
   21394:	cmp	r3, r1, lsl #14
   21398:	adc	r0, r0, r0
   2139c:	subcs	r3, r3, r1, lsl #14
   213a0:	cmp	r3, r1, lsl #13
   213a4:	adc	r0, r0, r0
   213a8:	subcs	r3, r3, r1, lsl #13
   213ac:	cmp	r3, r1, lsl #12
   213b0:	adc	r0, r0, r0
   213b4:	subcs	r3, r3, r1, lsl #12
   213b8:	cmp	r3, r1, lsl #11
   213bc:	adc	r0, r0, r0
   213c0:	subcs	r3, r3, r1, lsl #11
   213c4:	cmp	r3, r1, lsl #10
   213c8:	adc	r0, r0, r0
   213cc:	subcs	r3, r3, r1, lsl #10
   213d0:	cmp	r3, r1, lsl #9
   213d4:	adc	r0, r0, r0
   213d8:	subcs	r3, r3, r1, lsl #9
   213dc:	cmp	r3, r1, lsl #8
   213e0:	adc	r0, r0, r0
   213e4:	subcs	r3, r3, r1, lsl #8
   213e8:	cmp	r3, r1, lsl #7
   213ec:	adc	r0, r0, r0
   213f0:	subcs	r3, r3, r1, lsl #7
   213f4:	cmp	r3, r1, lsl #6
   213f8:	adc	r0, r0, r0
   213fc:	subcs	r3, r3, r1, lsl #6
   21400:	cmp	r3, r1, lsl #5
   21404:	adc	r0, r0, r0
   21408:	subcs	r3, r3, r1, lsl #5
   2140c:	cmp	r3, r1, lsl #4
   21410:	adc	r0, r0, r0
   21414:	subcs	r3, r3, r1, lsl #4
   21418:	cmp	r3, r1, lsl #3
   2141c:	adc	r0, r0, r0
   21420:	subcs	r3, r3, r1, lsl #3
   21424:	cmp	r3, r1, lsl #2
   21428:	adc	r0, r0, r0
   2142c:	subcs	r3, r3, r1, lsl #2
   21430:	cmp	r3, r1, lsl #1
   21434:	adc	r0, r0, r0
   21438:	subcs	r3, r3, r1, lsl #1
   2143c:	cmp	r3, r1
   21440:	adc	r0, r0, r0
   21444:	subcs	r3, r3, r1
   21448:	cmp	ip, #0
   2144c:	rsbmi	r0, r0, #0
   21450:	bx	lr
   21454:	teq	ip, r0
   21458:	rsbmi	r0, r0, #0
   2145c:	bx	lr
   21460:	movcc	r0, #0
   21464:	asreq	r0, ip, #31
   21468:	orreq	r0, r0, #1
   2146c:	bx	lr
   21470:	clz	r2, r1
   21474:	rsb	r2, r2, #31
   21478:	cmp	ip, #0
   2147c:	lsr	r0, r3, r2
   21480:	rsbmi	r0, r0, #0
   21484:	bx	lr
   21488:	cmp	r0, #0
   2148c:	mvngt	r0, #-2147483648	; 0x80000000
   21490:	movlt	r0, #-2147483648	; 0x80000000
   21494:	b	214b8 <__assert_fail@plt+0xffa0>
   21498:	cmp	r1, #0
   2149c:	beq	21488 <__assert_fail@plt+0xff70>
   214a0:	push	{r0, r1, lr}
   214a4:	bl	21280 <__assert_fail@plt+0xfd68>
   214a8:	pop	{r1, r2, lr}
   214ac:	mul	r3, r2, r0
   214b0:	sub	r1, r1, r3
   214b4:	bx	lr
   214b8:	push	{r1, lr}
   214bc:	mov	r0, #8
   214c0:	bl	111ac <raise@plt>
   214c4:	pop	{r1, pc}
   214c8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   214cc:	mov	r7, r0
   214d0:	ldr	r6, [pc, #72]	; 21520 <__assert_fail@plt+0x10008>
   214d4:	ldr	r5, [pc, #72]	; 21524 <__assert_fail@plt+0x1000c>
   214d8:	add	r6, pc, r6
   214dc:	add	r5, pc, r5
   214e0:	sub	r6, r6, r5
   214e4:	mov	r8, r1
   214e8:	mov	r9, r2
   214ec:	bl	1115c <pthread_mutex_unlock@plt-0x20>
   214f0:	asrs	r6, r6, #2
   214f4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   214f8:	mov	r4, #0
   214fc:	add	r4, r4, #1
   21500:	ldr	r3, [r5], #4
   21504:	mov	r2, r9
   21508:	mov	r1, r8
   2150c:	mov	r0, r7
   21510:	blx	r3
   21514:	cmp	r6, r4
   21518:	bne	214fc <__assert_fail@plt+0xffe4>
   2151c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   21520:	andeq	r1, r1, r8, lsr #20
   21524:	andeq	r1, r1, r0, lsr #20
   21528:	bx	lr
   2152c:	ldr	r3, [pc, #12]	; 21540 <__assert_fail@plt+0x10028>
   21530:	mov	r1, #0
   21534:	add	r3, pc, r3
   21538:	ldr	r2, [r3]
   2153c:	b	11410 <__cxa_atexit@plt>
   21540:	andeq	r1, r1, r0, lsl ip

Disassembly of section .fini:

00021544 <.fini>:
   21544:	push	{r3, lr}
   21548:	pop	{r3, pc}
