
../repos/maitesin-acc-4891b9a/bin/acc:     file format elf32-littlearm


Disassembly of section .init:

00011eb0 <.init>:
   11eb0:	push	{r3, lr}
   11eb4:	bl	1210c <_start@@Base+0x3c>
   11eb8:	pop	{r3, pc}

Disassembly of section .plt:

00011ebc <fdopen@plt-0x14>:
   11ebc:	push	{lr}		; (str lr, [sp, #-4]!)
   11ec0:	ldr	lr, [pc, #4]	; 11ecc <fdopen@plt-0x4>
   11ec4:	add	lr, pc, lr
   11ec8:	ldr	pc, [lr, #8]!
   11ecc:	andeq	sl, r1, r4, lsr r1

00011ed0 <fdopen@plt>:
   11ed0:	add	ip, pc, #0, 12
   11ed4:	add	ip, ip, #106496	; 0x1a000
   11ed8:	ldr	pc, [ip, #308]!	; 0x134

00011edc <strtol@plt>:
   11edc:	add	ip, pc, #0, 12
   11ee0:	add	ip, ip, #106496	; 0x1a000
   11ee4:	ldr	pc, [ip, #300]!	; 0x12c

00011ee8 <fopen@plt>:
   11ee8:	add	ip, pc, #0, 12
   11eec:	add	ip, ip, #106496	; 0x1a000
   11ef0:	ldr	pc, [ip, #292]!	; 0x124

00011ef4 <fflush@plt>:
   11ef4:	add	ip, pc, #0, 12
   11ef8:	add	ip, ip, #106496	; 0x1a000
   11efc:	ldr	pc, [ip, #284]!	; 0x11c

00011f00 <free@plt>:
   11f00:	add	ip, pc, #0, 12
   11f04:	add	ip, ip, #106496	; 0x1a000
   11f08:	ldr	pc, [ip, #276]!	; 0x114

00011f0c <memcpy@plt>:
   11f0c:	add	ip, pc, #0, 12
   11f10:	add	ip, ip, #106496	; 0x1a000
   11f14:	ldr	pc, [ip, #268]!	; 0x10c

00011f18 <mmap64@plt>:
   11f18:	add	ip, pc, #0, 12
   11f1c:	add	ip, ip, #106496	; 0x1a000
   11f20:	ldr	pc, [ip, #260]!	; 0x104

00011f24 <ftell@plt>:
   11f24:	add	ip, pc, #0, 12
   11f28:	add	ip, ip, #106496	; 0x1a000
   11f2c:	ldr	pc, [ip, #252]!	; 0xfc

00011f30 <uname@plt>:
   11f30:	add	ip, pc, #0, 12
   11f34:	add	ip, ip, #106496	; 0x1a000
   11f38:	ldr	pc, [ip, #244]!	; 0xf4

00011f3c <strdup@plt>:
   11f3c:	add	ip, pc, #0, 12
   11f40:	add	ip, ip, #106496	; 0x1a000
   11f44:	ldr	pc, [ip, #236]!	; 0xec

00011f48 <realloc@plt>:
   11f48:	add	ip, pc, #0, 12
   11f4c:	add	ip, ip, #106496	; 0x1a000
   11f50:	ldr	pc, [ip, #228]!	; 0xe4

00011f54 <fwrite@plt>:
   11f54:	add	ip, pc, #0, 12
   11f58:	add	ip, ip, #106496	; 0x1a000
   11f5c:	ldr	pc, [ip, #220]!	; 0xdc

00011f60 <open64@plt>:
   11f60:	add	ip, pc, #0, 12
   11f64:	add	ip, ip, #106496	; 0x1a000
   11f68:	ldr	pc, [ip, #212]!	; 0xd4

00011f6c <getenv@plt>:
   11f6c:	add	ip, pc, #0, 12
   11f70:	add	ip, ip, #106496	; 0x1a000
   11f74:	ldr	pc, [ip, #204]!	; 0xcc

00011f78 <malloc@plt>:
   11f78:	add	ip, pc, #0, 12
   11f7c:	add	ip, ip, #106496	; 0x1a000
   11f80:	ldr	pc, [ip, #196]!	; 0xc4

00011f84 <__libc_start_main@plt>:
   11f84:	add	ip, pc, #0, 12
   11f88:	add	ip, ip, #106496	; 0x1a000
   11f8c:	ldr	pc, [ip, #188]!	; 0xbc

00011f90 <strerror@plt>:
   11f90:	add	ip, pc, #0, 12
   11f94:	add	ip, ip, #106496	; 0x1a000
   11f98:	ldr	pc, [ip, #180]!	; 0xb4

00011f9c <__gmon_start__@plt>:
   11f9c:	add	ip, pc, #0, 12
   11fa0:	add	ip, ip, #106496	; 0x1a000
   11fa4:	ldr	pc, [ip, #172]!	; 0xac

00011fa8 <getpid@plt>:
   11fa8:	add	ip, pc, #0, 12
   11fac:	add	ip, ip, #106496	; 0x1a000
   11fb0:	ldr	pc, [ip, #164]!	; 0xa4

00011fb4 <exit@plt>:
   11fb4:	add	ip, pc, #0, 12
   11fb8:	add	ip, ip, #106496	; 0x1a000
   11fbc:	ldr	pc, [ip, #156]!	; 0x9c

00011fc0 <strlen@plt>:
   11fc0:	add	ip, pc, #0, 12
   11fc4:	add	ip, ip, #106496	; 0x1a000
   11fc8:	ldr	pc, [ip, #148]!	; 0x94

00011fcc <strchr@plt>:
   11fcc:	add	ip, pc, #0, 12
   11fd0:	add	ip, ip, #106496	; 0x1a000
   11fd4:	ldr	pc, [ip, #140]!	; 0x8c

00011fd8 <getopt@plt>:
   11fd8:	add	ip, pc, #0, 12
   11fdc:	add	ip, ip, #106496	; 0x1a000
   11fe0:	ldr	pc, [ip, #132]!	; 0x84

00011fe4 <fprintf@plt>:
   11fe4:	add	ip, pc, #0, 12
   11fe8:	add	ip, ip, #106496	; 0x1a000
   11fec:	ldr	pc, [ip, #124]!	; 0x7c

00011ff0 <__errno_location@plt>:
   11ff0:	add	ip, pc, #0, 12
   11ff4:	add	ip, ip, #106496	; 0x1a000
   11ff8:	ldr	pc, [ip, #116]!	; 0x74

00011ffc <__cxa_atexit@plt>:
   11ffc:	add	ip, pc, #0, 12
   12000:	add	ip, ip, #106496	; 0x1a000
   12004:	ldr	pc, [ip, #108]!	; 0x6c

00012008 <mkdir@plt>:
   12008:	add	ip, pc, #0, 12
   1200c:	add	ip, ip, #106496	; 0x1a000
   12010:	ldr	pc, [ip, #100]!	; 0x64

00012014 <memset@plt>:
   12014:	add	ip, pc, #0, 12
   12018:	add	ip, ip, #106496	; 0x1a000
   1201c:	ldr	pc, [ip, #92]!	; 0x5c

00012020 <strncpy@plt>:
   12020:	add	ip, pc, #0, 12
   12024:	add	ip, ip, #106496	; 0x1a000
   12028:	ldr	pc, [ip, #84]!	; 0x54

0001202c <prctl@plt>:
   1202c:	add	ip, pc, #0, 12
   12030:	add	ip, ip, #106496	; 0x1a000
   12034:	ldr	pc, [ip, #76]!	; 0x4c

00012038 <fileno@plt>:
   12038:	add	ip, pc, #0, 12
   1203c:	add	ip, ip, #106496	; 0x1a000
   12040:	ldr	pc, [ip, #68]!	; 0x44

00012044 <fclose@plt>:
   12044:	add	ip, pc, #0, 12
   12048:	add	ip, ip, #106496	; 0x1a000
   1204c:	ldr	pc, [ip, #60]!	; 0x3c

00012050 <strnlen@plt>:
   12050:	add	ip, pc, #0, 12
   12054:	add	ip, ip, #106496	; 0x1a000
   12058:	ldr	pc, [ip, #52]!	; 0x34

0001205c <munmap@plt>:
   1205c:	add	ip, pc, #0, 12
   12060:	add	ip, ip, #106496	; 0x1a000
   12064:	ldr	pc, [ip, #44]!	; 0x2c

00012068 <fcntl64@plt>:
   12068:	add	ip, pc, #0, 12
   1206c:	add	ip, ip, #106496	; 0x1a000
   12070:	ldr	pc, [ip, #36]!	; 0x24

00012074 <strrchr@plt>:
   12074:	add	ip, pc, #0, 12
   12078:	add	ip, ip, #106496	; 0x1a000
   1207c:	ldr	pc, [ip, #28]!

00012080 <fputc@plt>:
   12080:	add	ip, pc, #0, 12
   12084:	add	ip, ip, #106496	; 0x1a000
   12088:	ldr	pc, [ip, #20]!

0001208c <msync@plt>:
   1208c:	add	ip, pc, #0, 12
   12090:	add	ip, ip, #106496	; 0x1a000
   12094:	ldr	pc, [ip, #12]!

00012098 <fread_unlocked@plt>:
   12098:	add	ip, pc, #0, 12
   1209c:	add	ip, ip, #106496	; 0x1a000
   120a0:	ldr	pc, [ip, #4]!

000120a4 <fseek@plt>:
   120a4:	add	ip, pc, #0, 12
   120a8:	add	ip, ip, #102400	; 0x19000
   120ac:	ldr	pc, [ip, #4092]!	; 0xffc

000120b0 <strncmp@plt>:
   120b0:	add	ip, pc, #0, 12
   120b4:	add	ip, ip, #102400	; 0x19000
   120b8:	ldr	pc, [ip, #4084]!	; 0xff4

000120bc <abort@plt>:
   120bc:	add	ip, pc, #0, 12
   120c0:	add	ip, ip, #102400	; 0x19000
   120c4:	ldr	pc, [ip, #4076]!	; 0xfec

Disassembly of section .text:

000120d0 <_start@@Base>:
   120d0:	mov	fp, #0
   120d4:	mov	lr, #0
   120d8:	pop	{r1}		; (ldr r1, [sp], #4)
   120dc:	mov	r2, sp
   120e0:	push	{r2}		; (str r2, [sp, #-4]!)
   120e4:	push	{r0}		; (str r0, [sp, #-4]!)
   120e8:	ldr	ip, [pc, #16]	; 12100 <_start@@Base+0x30>
   120ec:	push	{ip}		; (str ip, [sp, #-4]!)
   120f0:	ldr	r0, [pc, #12]	; 12104 <_start@@Base+0x34>
   120f4:	ldr	r3, [pc, #12]	; 12108 <_start@@Base+0x38>
   120f8:	bl	11f84 <__libc_start_main@plt>
   120fc:	bl	120bc <abort@plt>
   12100:	andeq	sl, r1, r0, asr sl
   12104:	andeq	r2, r1, r0, lsl #9
   12108:	strdeq	sl, [r1], -r0
   1210c:	ldr	r3, [pc, #20]	; 12128 <_start@@Base+0x58>
   12110:	ldr	r2, [pc, #20]	; 1212c <_start@@Base+0x5c>
   12114:	add	r3, pc, r3
   12118:	ldr	r2, [r3, r2]
   1211c:	cmp	r2, #0
   12120:	bxeq	lr
   12124:	b	11f9c <__gmon_start__@plt>
   12128:	andeq	r9, r1, r4, ror #29
   1212c:	andeq	r0, r0, r4, asr #1
   12130:	ldr	r0, [pc, #24]	; 12150 <_start@@Base+0x80>
   12134:	ldr	r3, [pc, #24]	; 12154 <_start@@Base+0x84>
   12138:	cmp	r3, r0
   1213c:	bxeq	lr
   12140:	ldr	r3, [pc, #16]	; 12158 <_start@@Base+0x88>
   12144:	cmp	r3, #0
   12148:	bxeq	lr
   1214c:	bx	r3
   12150:	ldrdeq	ip, [r2], -r8
   12154:	ldrdeq	ip, [r2], -r8
   12158:	andeq	r0, r0, r0
   1215c:	ldr	r0, [pc, #36]	; 12188 <_start@@Base+0xb8>
   12160:	ldr	r1, [pc, #36]	; 1218c <_start@@Base+0xbc>
   12164:	sub	r1, r1, r0
   12168:	asr	r1, r1, #2
   1216c:	add	r1, r1, r1, lsr #31
   12170:	asrs	r1, r1, #1
   12174:	bxeq	lr
   12178:	ldr	r3, [pc, #16]	; 12190 <_start@@Base+0xc0>
   1217c:	cmp	r3, #0
   12180:	bxeq	lr
   12184:	bx	r3
   12188:	ldrdeq	ip, [r2], -r8
   1218c:	ldrdeq	ip, [r2], -r8
   12190:	andeq	r0, r0, r0
   12194:	push	{r4, lr}
   12198:	ldr	r4, [pc, #24]	; 121b8 <_start@@Base+0xe8>
   1219c:	ldrb	r3, [r4]
   121a0:	cmp	r3, #0
   121a4:	popne	{r4, pc}
   121a8:	bl	12130 <_start@@Base+0x60>
   121ac:	mov	r3, #1
   121b0:	strb	r3, [r4]
   121b4:	pop	{r4, pc}
   121b8:	strdeq	ip, [r2], -r4
   121bc:	b	1215c <_start@@Base+0x8c>

000121c0 <load_file@@Base>:
   121c0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   121c4:	add	fp, sp, #24
   121c8:	movw	r7, #49408	; 0xc100
   121cc:	mov	r5, r0
   121d0:	movt	r7, #2
   121d4:	ldrd	r0, [r7]
   121d8:	adds	r0, r0, #1
   121dc:	adc	r1, r1, #0
   121e0:	strd	r0, [r7]
   121e4:	movw	r1, #45462	; 0xb196
   121e8:	mov	r0, r5
   121ec:	movt	r1, #1
   121f0:	bl	11ee8 <fopen@plt>
   121f4:	cmp	r0, #0
   121f8:	beq	12234 <load_file@@Base+0x74>
   121fc:	mov	r4, r0
   12200:	ldrd	r0, [r7, #8]
   12204:	mov	r2, #2
   12208:	mov	r6, #0
   1220c:	adds	r0, r0, #1
   12210:	adc	r1, r1, #0
   12214:	strd	r0, [r7, #8]
   12218:	mov	r0, r4
   1221c:	mov	r1, #0
   12220:	bl	120a4 <fseek@plt>
   12224:	cmp	r0, #0
   12228:	beq	12240 <load_file@@Base+0x80>
   1222c:	add	r0, r7, #32
   12230:	b	122e0 <load_file@@Base+0x120>
   12234:	add	r0, r7, #16
   12238:	mov	r6, #0
   1223c:	b	122fc <load_file@@Base+0x13c>
   12240:	ldrd	r0, [r7, #24]
   12244:	adds	r0, r0, #1
   12248:	adc	r1, r1, #0
   1224c:	strd	r0, [r7, #24]
   12250:	mov	r0, r4
   12254:	bl	11f24 <ftell@plt>
   12258:	cmn	r0, #1
   1225c:	beq	12324 <load_file@@Base+0x164>
   12260:	mov	r8, r0
   12264:	ldrd	r0, [r7, #48]	; 0x30
   12268:	adds	r0, r0, #1
   1226c:	adc	r1, r1, #0
   12270:	strd	r0, [r7, #48]	; 0x30
   12274:	add	r0, r8, #1
   12278:	bl	11f78 <malloc@plt>
   1227c:	mov	r6, r0
   12280:	mov	r0, r4
   12284:	mov	r1, #0
   12288:	mov	r2, #0
   1228c:	bl	120a4 <fseek@plt>
   12290:	cmp	r0, #0
   12294:	bne	1235c <load_file@@Base+0x19c>
   12298:	ldrd	r0, [r7, #64]	; 0x40
   1229c:	mov	r2, r8
   122a0:	mov	r3, r4
   122a4:	adds	r0, r0, #1
   122a8:	adc	r1, r1, #0
   122ac:	strd	r0, [r7, #64]	; 0x40
   122b0:	mov	r0, r6
   122b4:	mov	r1, #1
   122b8:	bl	12098 <fread_unlocked@plt>
   122bc:	cmp	r0, #0
   122c0:	beq	12394 <load_file@@Base+0x1d4>
   122c4:	ldrd	r2, [r7, #80]	; 0x50
   122c8:	mov	r1, #0
   122cc:	strb	r1, [r6, r0]
   122d0:	add	r0, r7, #88	; 0x58
   122d4:	adds	r2, r2, #1
   122d8:	adc	r3, r3, #0
   122dc:	strd	r2, [r7, #80]	; 0x50
   122e0:	ldrd	r2, [r0]
   122e4:	adds	r2, r2, #1
   122e8:	adc	r3, r3, #0
   122ec:	strd	r2, [r0]
   122f0:	mov	r0, r4
   122f4:	bl	12044 <fclose@plt>
   122f8:	add	r0, r7, #96	; 0x60
   122fc:	ldrd	r2, [r0]
   12300:	adds	r2, r2, #1
   12304:	adc	r3, r3, #0
   12308:	strd	r2, [r0]
   1230c:	ldrd	r0, [r7, #104]	; 0x68
   12310:	adds	r0, r0, #1
   12314:	adc	r1, r1, #0
   12318:	strd	r0, [r7, #104]	; 0x68
   1231c:	mov	r0, r6
   12320:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12324:	ldrd	r0, [r7, #40]	; 0x28
   12328:	adds	r0, r0, #1
   1232c:	adc	r1, r1, #0
   12330:	strd	r0, [r7, #40]	; 0x28
   12334:	movw	r0, #49384	; 0xc0e8
   12338:	mov	r1, #51	; 0x33
   1233c:	movt	r0, #2
   12340:	ldr	r3, [r0]
   12344:	movw	r0, #43652	; 0xaa84
   12348:	movt	r0, #1
   1234c:	mov	r2, #1
   12350:	bl	11f54 <fwrite@plt>
   12354:	mov	r0, #1
   12358:	bl	11fb4 <exit@plt>
   1235c:	ldrd	r0, [r7, #56]	; 0x38
   12360:	adds	r0, r0, #1
   12364:	adc	r1, r1, #0
   12368:	strd	r0, [r7, #56]	; 0x38
   1236c:	movw	r0, #49384	; 0xc0e8
   12370:	mov	r1, #49	; 0x31
   12374:	movt	r0, #2
   12378:	ldr	r3, [r0]
   1237c:	movw	r0, #43704	; 0xaab8
   12380:	movt	r0, #1
   12384:	mov	r2, #1
   12388:	bl	11f54 <fwrite@plt>
   1238c:	mov	r0, #1
   12390:	bl	11fb4 <exit@plt>
   12394:	ldrd	r0, [r7, #72]	; 0x48
   12398:	mov	r2, r5
   1239c:	adds	r0, r0, #1
   123a0:	adc	r1, r1, #0
   123a4:	strd	r0, [r7, #72]	; 0x48
   123a8:	movw	r0, #49384	; 0xc0e8
   123ac:	movw	r1, #43754	; 0xaaea
   123b0:	movt	r0, #2
   123b4:	movt	r1, #1
   123b8:	ldr	r0, [r0]
   123bc:	bl	11fe4 <fprintf@plt>
   123c0:	mov	r0, #1
   123c4:	bl	11fb4 <exit@plt>
   123c8:	nop	{0}
   123cc:	nop	{0}

000123d0 <my_main@@Base>:
   123d0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   123d4:	add	fp, sp, #24
   123d8:	sub	sp, sp, #32
   123dc:	mov	r5, r1
   123e0:	movw	r1, #49520	; 0xc170
   123e4:	add	r2, pc, #132	; 0x84
   123e8:	movt	r1, #2
   123ec:	vld1.64	{d16-d17}, [r2 :128]
   123f0:	vld1.64	{d18-d19}, [r1 :128]
   123f4:	vadd.i64	q8, q9, q8
   123f8:	vst1.64	{d16-d17}, [r1 :128]
   123fc:	bl	121c0 <load_file@@Base>
   12400:	mov	r4, r0
   12404:	add	r8, sp, #20
   12408:	mov	r0, r8
   1240c:	mov	r1, r4
   12410:	bl	13030 <init_lexer@@Base>
   12414:	add	r7, sp, #16
   12418:	mov	r1, r8
   1241c:	mov	r0, r7
   12420:	bl	15bf0 <init_grammar@@Base>
   12424:	mov	r6, sp
   12428:	mov	r1, r7
   1242c:	mov	r2, r5
   12430:	mov	r0, r6
   12434:	bl	16d00 <init_generator@@Base>
   12438:	mov	r0, r6
   1243c:	bl	16da0 <generate_code@@Base>
   12440:	mov	r0, r6
   12444:	bl	16d60 <destroy_generator@@Base>
   12448:	mov	r0, r7
   1244c:	bl	15c30 <destroy_grammar@@Base>
   12450:	mov	r0, r8
   12454:	bl	13070 <destroy_lexer@@Base>
   12458:	mov	r0, r4
   1245c:	bl	11f00 <free@plt>
   12460:	mov	r0, #0
   12464:	sub	sp, fp, #24
   12468:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1246c:	nop	{0}
   12470:	andeq	r0, r0, r1
   12474:	andeq	r0, r0, r0
   12478:	andeq	r0, r0, r1
   1247c:	andeq	r0, r0, r0

00012480 <main@@Base>:
   12480:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12484:	add	fp, sp, #28
   12488:	sub	sp, sp, #36	; 0x24
   1248c:	movw	r7, #49520	; 0xc170
   12490:	mov	r4, r1
   12494:	add	r1, pc, #484	; 0x1e4
   12498:	mov	r5, r0
   1249c:	movw	r2, #43778	; 0xab02
   124a0:	movt	r7, #2
   124a4:	vld1.64	{d16-d17}, [r1 :128]
   124a8:	movt	r2, #1
   124ac:	mov	r1, r4
   124b0:	add	r0, r7, #16
   124b4:	vld1.64	{d18-d19}, [r0 :128]
   124b8:	vadd.i64	q8, q9, q8
   124bc:	vst1.64	{d16-d17}, [r0 :128]
   124c0:	mov	r0, r5
   124c4:	bl	11fd8 <getopt@plt>
   124c8:	mov	r8, #0
   124cc:	cmn	r0, #1
   124d0:	beq	12560 <main@@Base+0xe0>
   124d4:	movw	r9, #43778	; 0xab02
   124d8:	add	r6, r7, #56	; 0x38
   124dc:	add	sl, r7, #64	; 0x40
   124e0:	movt	r9, #1
   124e4:	b	12520 <main@@Base+0xa0>
   124e8:	ldrd	r2, [r0]
   124ec:	adds	r2, r2, #1
   124f0:	adc	r3, r3, #0
   124f4:	strd	r2, [r0]
   124f8:	mov	r2, r9
   124fc:	ldrd	r0, [r7, #72]	; 0x48
   12500:	adds	r0, r0, #1
   12504:	adc	r1, r1, #0
   12508:	strd	r0, [r7, #72]	; 0x48
   1250c:	mov	r0, r5
   12510:	mov	r1, r4
   12514:	bl	11fd8 <getopt@plt>
   12518:	cmn	r0, #1
   1251c:	beq	12560 <main@@Base+0xe0>
   12520:	ldrd	r2, [r7, #32]
   12524:	adds	r2, r2, #1
   12528:	adc	r3, r3, #0
   1252c:	cmp	r0, #111	; 0x6f
   12530:	mov	r0, r6
   12534:	strd	r2, [r7, #32]
   12538:	bne	124e8 <main@@Base+0x68>
   1253c:	ldrd	r0, [r7, #48]	; 0x30
   12540:	adds	r0, r0, #1
   12544:	adc	r1, r1, #0
   12548:	strd	r0, [r7, #48]	; 0x30
   1254c:	movw	r0, #49392	; 0xc0f0
   12550:	movt	r0, #2
   12554:	ldr	r8, [r0]
   12558:	mov	r0, sl
   1255c:	b	124e8 <main@@Base+0x68>
   12560:	ldrd	r0, [r7, #40]	; 0x28
   12564:	adds	r0, r0, #1
   12568:	adc	r1, r1, #0
   1256c:	strd	r0, [r7, #40]	; 0x28
   12570:	movw	r0, #49376	; 0xc0e0
   12574:	movt	r0, #2
   12578:	ldr	r0, [r0]
   1257c:	cmp	r0, r5
   12580:	bge	12644 <main@@Base+0x1c4>
   12584:	mov	r1, r7
   12588:	vld1.64	{d16-d17}, [r1 :128]!
   1258c:	ldrd	r2, [r1, #64]	; 0x40
   12590:	ldr	r6, [r1, #80]	; 0x50
   12594:	ldr	r9, [r1, #84]	; 0x54
   12598:	add	r5, pc, #224	; 0xe0
   1259c:	vld1.64	{d18-d19}, [r5 :128]
   125a0:	adds	r2, r2, #1
   125a4:	adc	r3, r3, #0
   125a8:	adds	r6, r6, #1
   125ac:	str	r6, [r1, #80]	; 0x50
   125b0:	strd	r2, [r1, #64]	; 0x40
   125b4:	adc	r2, r9, #0
   125b8:	vadd.i64	q8, q8, q9
   125bc:	str	r2, [r1, #84]	; 0x54
   125c0:	ldr	r0, [r4, r0, lsl #2]
   125c4:	vst1.64	{d16-d17}, [r7 :128]
   125c8:	bl	121c0 <load_file@@Base>
   125cc:	mov	r4, r0
   125d0:	add	r5, sp, #24
   125d4:	mov	r0, r5
   125d8:	mov	r1, r4
   125dc:	bl	13030 <init_lexer@@Base>
   125e0:	add	r6, sp, #20
   125e4:	mov	r1, r5
   125e8:	mov	r0, r6
   125ec:	bl	15bf0 <init_grammar@@Base>
   125f0:	movw	r2, #43781	; 0xab05
   125f4:	mov	r7, sp
   125f8:	cmp	r8, #0
   125fc:	mov	r1, r6
   12600:	movt	r2, #1
   12604:	movne	r2, r8
   12608:	mov	r0, r7
   1260c:	bl	16d00 <init_generator@@Base>
   12610:	mov	r0, r7
   12614:	bl	16da0 <generate_code@@Base>
   12618:	mov	r0, r7
   1261c:	bl	16d60 <destroy_generator@@Base>
   12620:	mov	r0, r6
   12624:	bl	15c30 <destroy_grammar@@Base>
   12628:	mov	r0, r5
   1262c:	bl	13070 <destroy_lexer@@Base>
   12630:	mov	r0, r4
   12634:	bl	11f00 <free@plt>
   12638:	mov	r0, #0
   1263c:	sub	sp, fp, #28
   12640:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12644:	ldrd	r0, [r7, #88]	; 0x58
   12648:	mov	r2, #1
   1264c:	adds	r0, r0, #1
   12650:	adc	r1, r1, #0
   12654:	strd	r0, [r7, #88]	; 0x58
   12658:	movw	r0, #49384	; 0xc0e8
   1265c:	mov	r1, #45	; 0x2d
   12660:	movt	r0, #2
   12664:	ldr	r3, [r0]
   12668:	movw	r0, #43785	; 0xab09
   1266c:	movt	r0, #1
   12670:	bl	11f54 <fwrite@plt>
   12674:	mov	r0, #1
   12678:	bl	11fb4 <exit@plt>
   1267c:	nop	{0}
   12680:	andeq	r0, r0, r1
   12684:	andeq	r0, r0, r0
   12688:	andeq	r0, r0, r1
   1268c:	andeq	r0, r0, r0
   12690:	push	{r4, r5, fp, lr}
   12694:	sub	sp, sp, #8
   12698:	movw	r4, #61536	; 0xf060
   1269c:	movw	r0, #43831	; 0xab37
   126a0:	movw	r1, #43909	; 0xab85
   126a4:	movt	r4, #32426	; 0x7eaa
   126a8:	movt	r0, #1
   126ac:	movt	r1, #1
   126b0:	mov	r2, r4
   126b4:	bl	17a38 <__generate_code_for_binary_boolean_expression@@Base+0x468>
   126b8:	movw	r1, #43914	; 0xab8a
   126bc:	movw	r2, #54228	; 0xd3d4
   126c0:	mov	r0, #0
   126c4:	mov	r3, #0
   126c8:	str	r4, [sp]
   126cc:	movt	r1, #1
   126d0:	movt	r2, #56367	; 0xdc2f
   126d4:	bl	18158 <__generate_code_for_binary_boolean_expression@@Base+0xb88>
   126d8:	movw	r1, #49408	; 0xc100
   126dc:	mov	r0, #14
   126e0:	movt	r1, #2
   126e4:	bl	18a0c <__generate_code_for_binary_boolean_expression@@Base+0x143c>
   126e8:	movw	r1, #43924	; 0xab94
   126ec:	movw	r2, #56469	; 0xdc95
   126f0:	mov	r0, #1
   126f4:	mov	r3, #0
   126f8:	str	r4, [sp]
   126fc:	movt	r1, #1
   12700:	movt	r2, #34894	; 0x884e
   12704:	bl	18158 <__generate_code_for_binary_boolean_expression@@Base+0xb88>
   12708:	movw	r5, #49520	; 0xc170
   1270c:	mov	r0, #2
   12710:	movt	r5, #2
   12714:	mov	r1, r5
   12718:	bl	18a0c <__generate_code_for_binary_boolean_expression@@Base+0x143c>
   1271c:	movw	r1, #47324	; 0xb8dc
   12720:	movw	r2, #34236	; 0x85bc
   12724:	mov	r0, #2
   12728:	mov	r3, #0
   1272c:	str	r4, [sp]
   12730:	movt	r1, #1
   12734:	movt	r2, #57659	; 0xe13b
   12738:	bl	18158 <__generate_code_for_binary_boolean_expression@@Base+0xb88>
   1273c:	add	r1, r5, #16
   12740:	mov	r0, #11
   12744:	bl	18a0c <__generate_code_for_binary_boolean_expression@@Base+0x143c>
   12748:	bl	19194 <__generate_code_for_binary_boolean_expression@@Base+0x1bc4>
   1274c:	add	sp, sp, #8
   12750:	pop	{r4, r5, fp, lr}
   12754:	b	19f00 <__generate_code_for_binary_boolean_expression@@Base+0x2930>
   12758:	push	{fp, lr}
   1275c:	bl	12690 <main@@Base+0x210>
   12760:	movw	r0, #49408	; 0xc100
   12764:	vmov.i32	q8, #0	; 0x00000000
   12768:	movt	r0, #2
   1276c:	add	r1, r0, #80	; 0x50
   12770:	vst1.64	{d16-d17}, [r1 :128]
   12774:	add	r1, r0, #64	; 0x40
   12778:	vst1.64	{d16-d17}, [r1 :128]
   1277c:	add	r1, r0, #48	; 0x30
   12780:	vst1.64	{d16-d17}, [r1 :128]
   12784:	add	r1, r0, #32
   12788:	vst1.64	{d16-d17}, [r1 :128]
   1278c:	add	r1, r0, #16
   12790:	vst1.64	{d16-d17}, [r1 :128]
   12794:	movw	r1, #49520	; 0xc170
   12798:	movt	r1, #2
   1279c:	add	r2, r1, #16
   127a0:	vst1.64	{d16-d17}, [r2 :128]
   127a4:	add	r2, r1, #48	; 0x30
   127a8:	vst1.64	{d16-d17}, [r2 :128]
   127ac:	add	r2, r1, #64	; 0x40
   127b0:	vst1.64	{d16-d17}, [r2 :128]
   127b4:	add	r2, r1, #80	; 0x50
   127b8:	vst1.64	{d16-d17}, [r2 :128]
   127bc:	mov	r2, #0
   127c0:	str	r2, [r1, #96]	; 0x60
   127c4:	str	r2, [r1, #100]	; 0x64
   127c8:	mov	r2, #96	; 0x60
   127cc:	vst1.64	{d16-d17}, [r0 :128], r2
   127d0:	vst1.64	{d16-d17}, [r0 :128]
   127d4:	mov	r0, #32
   127d8:	vst1.64	{d16-d17}, [r1 :128], r0
   127dc:	vst1.64	{d16-d17}, [r1 :128]
   127e0:	pop	{fp, pc}
   127e4:	movw	r0, #9872	; 0x2690
   127e8:	movw	r1, #10072	; 0x2758
   127ec:	movt	r0, #1
   127f0:	movt	r1, #1
   127f4:	b	1a3b4 <__gcov_flush@@Base+0xb8>
	...

00012800 <init_token_int_type@@Base>:
   12800:	movw	r1, #49632	; 0xc1e0
   12804:	add	r2, pc, #36	; 0x24
   12808:	movt	r1, #2
   1280c:	vld1.64	{d16-d17}, [r2 :128]
   12810:	vld1.64	{d18-d19}, [r1 :128]
   12814:	vadd.i64	q8, q9, q8
   12818:	vst1.64	{d16-d17}, [r1 :128]
   1281c:	mov	r1, #0
   12820:	str	r1, [r0]
   12824:	bx	lr
   12828:	nop	{0}
   1282c:	nop	{0}
   12830:	andeq	r0, r0, r1
   12834:	andeq	r0, r0, r0
   12838:	andeq	r0, r0, r1
   1283c:	andeq	r0, r0, r0

00012840 <init_token_int_value@@Base>:
   12840:	movw	r2, #49632	; 0xc1e0
   12844:	add	r3, pc, #36	; 0x24
   12848:	movt	r2, #2
   1284c:	vld1.64	{d16-d17}, [r3 :128]
   12850:	add	r2, r2, #16
   12854:	vld1.64	{d18-d19}, [r2 :128]
   12858:	vadd.i64	q8, q9, q8
   1285c:	vst1.64	{d16-d17}, [r2 :128]
   12860:	mov	r2, #1
   12864:	str	r2, [r0]
   12868:	str	r1, [r0, #4]
   1286c:	bx	lr
   12870:	andeq	r0, r0, r1
   12874:	andeq	r0, r0, r0
   12878:	andeq	r0, r0, r1
   1287c:	andeq	r0, r0, r0

00012880 <init_token_function@@Base>:
   12880:	movw	r2, #49632	; 0xc1e0
   12884:	add	r3, pc, #36	; 0x24
   12888:	movt	r2, #2
   1288c:	vld1.64	{d16-d17}, [r3 :128]
   12890:	add	r2, r2, #32
   12894:	vld1.64	{d18-d19}, [r2 :128]
   12898:	vadd.i64	q8, q9, q8
   1289c:	vst1.64	{d16-d17}, [r2 :128]
   128a0:	mov	r2, #2
   128a4:	str	r2, [r0]
   128a8:	str	r1, [r0, #4]
   128ac:	bx	lr
   128b0:	andeq	r0, r0, r1
   128b4:	andeq	r0, r0, r0
   128b8:	andeq	r0, r0, r1
   128bc:	andeq	r0, r0, r0

000128c0 <init_token_opar@@Base>:
   128c0:	movw	r1, #49632	; 0xc1e0
   128c4:	add	r2, pc, #36	; 0x24
   128c8:	movt	r1, #2
   128cc:	vld1.64	{d16-d17}, [r2 :128]
   128d0:	add	r1, r1, #48	; 0x30
   128d4:	vld1.64	{d18-d19}, [r1 :128]
   128d8:	vadd.i64	q8, q9, q8
   128dc:	vst1.64	{d16-d17}, [r1 :128]
   128e0:	mov	r1, #3
   128e4:	str	r1, [r0]
   128e8:	bx	lr
   128ec:	nop	{0}
   128f0:	andeq	r0, r0, r1
   128f4:	andeq	r0, r0, r0
   128f8:	andeq	r0, r0, r1
   128fc:	andeq	r0, r0, r0

00012900 <init_token_cpar@@Base>:
   12900:	movw	r1, #49632	; 0xc1e0
   12904:	add	r2, pc, #36	; 0x24
   12908:	movt	r1, #2
   1290c:	vld1.64	{d16-d17}, [r2 :128]
   12910:	add	r1, r1, #64	; 0x40
   12914:	vld1.64	{d18-d19}, [r1 :128]
   12918:	vadd.i64	q8, q9, q8
   1291c:	vst1.64	{d16-d17}, [r1 :128]
   12920:	mov	r1, #4
   12924:	str	r1, [r0]
   12928:	bx	lr
   1292c:	nop	{0}
   12930:	andeq	r0, r0, r1
   12934:	andeq	r0, r0, r0
   12938:	andeq	r0, r0, r1
   1293c:	andeq	r0, r0, r0

00012940 <init_token_obra@@Base>:
   12940:	movw	r1, #49632	; 0xc1e0
   12944:	add	r2, pc, #36	; 0x24
   12948:	movt	r1, #2
   1294c:	vld1.64	{d16-d17}, [r2 :128]
   12950:	add	r1, r1, #80	; 0x50
   12954:	vld1.64	{d18-d19}, [r1 :128]
   12958:	vadd.i64	q8, q9, q8
   1295c:	vst1.64	{d16-d17}, [r1 :128]
   12960:	mov	r1, #5
   12964:	str	r1, [r0]
   12968:	bx	lr
   1296c:	nop	{0}
   12970:	andeq	r0, r0, r1
   12974:	andeq	r0, r0, r0
   12978:	andeq	r0, r0, r1
   1297c:	andeq	r0, r0, r0

00012980 <init_token_cbra@@Base>:
   12980:	movw	r1, #49632	; 0xc1e0
   12984:	add	r2, pc, #36	; 0x24
   12988:	movt	r1, #2
   1298c:	vld1.64	{d16-d17}, [r2 :128]
   12990:	add	r1, r1, #96	; 0x60
   12994:	vld1.64	{d18-d19}, [r1 :128]
   12998:	vadd.i64	q8, q9, q8
   1299c:	vst1.64	{d16-d17}, [r1 :128]
   129a0:	mov	r1, #6
   129a4:	str	r1, [r0]
   129a8:	bx	lr
   129ac:	nop	{0}
   129b0:	andeq	r0, r0, r1
   129b4:	andeq	r0, r0, r0
   129b8:	andeq	r0, r0, r1
   129bc:	andeq	r0, r0, r0

000129c0 <init_token_return@@Base>:
   129c0:	movw	r1, #49744	; 0xc250
   129c4:	add	r2, pc, #36	; 0x24
   129c8:	movt	r1, #2
   129cc:	vld1.64	{d16-d17}, [r2 :128]
   129d0:	vld1.64	{d18-d19}, [r1 :128]
   129d4:	vadd.i64	q8, q9, q8
   129d8:	vst1.64	{d16-d17}, [r1 :128]
   129dc:	mov	r1, #7
   129e0:	str	r1, [r0]
   129e4:	bx	lr
   129e8:	nop	{0}
   129ec:	nop	{0}
   129f0:	andeq	r0, r0, r1
   129f4:	andeq	r0, r0, r0
   129f8:	andeq	r0, r0, r1
   129fc:	andeq	r0, r0, r0

00012a00 <init_token_semicolon@@Base>:
   12a00:	movw	r1, #49744	; 0xc250
   12a04:	add	r2, pc, #36	; 0x24
   12a08:	movt	r1, #2
   12a0c:	vld1.64	{d16-d17}, [r2 :128]
   12a10:	add	r1, r1, #16
   12a14:	vld1.64	{d18-d19}, [r1 :128]
   12a18:	vadd.i64	q8, q9, q8
   12a1c:	vst1.64	{d16-d17}, [r1 :128]
   12a20:	mov	r1, #8
   12a24:	str	r1, [r0]
   12a28:	bx	lr
   12a2c:	nop	{0}
   12a30:	andeq	r0, r0, r1
   12a34:	andeq	r0, r0, r0
   12a38:	andeq	r0, r0, r1
   12a3c:	andeq	r0, r0, r0

00012a40 <init_token_eof@@Base>:
   12a40:	movw	r1, #49744	; 0xc250
   12a44:	add	r2, pc, #36	; 0x24
   12a48:	movt	r1, #2
   12a4c:	vld1.64	{d16-d17}, [r2 :128]
   12a50:	add	r1, r1, #32
   12a54:	vld1.64	{d18-d19}, [r1 :128]
   12a58:	vadd.i64	q8, q9, q8
   12a5c:	vst1.64	{d16-d17}, [r1 :128]
   12a60:	mov	r1, #9
   12a64:	str	r1, [r0]
   12a68:	bx	lr
   12a6c:	nop	{0}
   12a70:	andeq	r0, r0, r1
   12a74:	andeq	r0, r0, r0
   12a78:	andeq	r0, r0, r1
   12a7c:	andeq	r0, r0, r0

00012a80 <init_token_if@@Base>:
   12a80:	movw	r1, #49744	; 0xc250
   12a84:	add	r2, pc, #36	; 0x24
   12a88:	movt	r1, #2
   12a8c:	vld1.64	{d16-d17}, [r2 :128]
   12a90:	add	r1, r1, #48	; 0x30
   12a94:	vld1.64	{d18-d19}, [r1 :128]
   12a98:	vadd.i64	q8, q9, q8
   12a9c:	vst1.64	{d16-d17}, [r1 :128]
   12aa0:	mov	r1, #10
   12aa4:	str	r1, [r0]
   12aa8:	bx	lr
   12aac:	nop	{0}
   12ab0:	andeq	r0, r0, r1
   12ab4:	andeq	r0, r0, r0
   12ab8:	andeq	r0, r0, r1
   12abc:	andeq	r0, r0, r0

00012ac0 <init_token_else@@Base>:
   12ac0:	movw	r1, #49744	; 0xc250
   12ac4:	add	r2, pc, #36	; 0x24
   12ac8:	movt	r1, #2
   12acc:	vld1.64	{d16-d17}, [r2 :128]
   12ad0:	add	r1, r1, #64	; 0x40
   12ad4:	vld1.64	{d18-d19}, [r1 :128]
   12ad8:	vadd.i64	q8, q9, q8
   12adc:	vst1.64	{d16-d17}, [r1 :128]
   12ae0:	mov	r1, #11
   12ae4:	str	r1, [r0]
   12ae8:	bx	lr
   12aec:	nop	{0}
   12af0:	andeq	r0, r0, r1
   12af4:	andeq	r0, r0, r0
   12af8:	andeq	r0, r0, r1
   12afc:	andeq	r0, r0, r0

00012b00 <init_token_boolean_op@@Base>:
   12b00:	movw	r2, #49744	; 0xc250
   12b04:	add	r3, pc, #36	; 0x24
   12b08:	movt	r2, #2
   12b0c:	vld1.64	{d16-d17}, [r3 :128]
   12b10:	add	r2, r2, #80	; 0x50
   12b14:	vld1.64	{d18-d19}, [r2 :128]
   12b18:	vadd.i64	q8, q9, q8
   12b1c:	vst1.64	{d16-d17}, [r2 :128]
   12b20:	mov	r2, #12
   12b24:	str	r2, [r0]
   12b28:	str	r1, [r0, #4]
   12b2c:	bx	lr
   12b30:	andeq	r0, r0, r1
   12b34:	andeq	r0, r0, r0
   12b38:	andeq	r0, r0, r1
   12b3c:	andeq	r0, r0, r0

00012b40 <free_token_int_type@@Base>:
   12b40:	movw	r1, #49744	; 0xc250
   12b44:	add	r2, pc, #36	; 0x24
   12b48:	movt	r1, #2
   12b4c:	vld1.64	{d16-d17}, [r2 :128]
   12b50:	add	r1, r1, #96	; 0x60
   12b54:	vld1.64	{d18-d19}, [r1 :128]
   12b58:	vadd.i64	q8, q9, q8
   12b5c:	vst1.64	{d16-d17}, [r1 :128]
   12b60:	b	11f00 <free@plt>
   12b64:	nop	{0}
   12b68:	nop	{0}
   12b6c:	nop	{0}
   12b70:	andeq	r0, r0, r1
   12b74:	andeq	r0, r0, r0
   12b78:	andeq	r0, r0, r1
   12b7c:	andeq	r0, r0, r0

00012b80 <free_token_int_value@@Base>:
   12b80:	movw	r1, #49856	; 0xc2c0
   12b84:	add	r2, pc, #20
   12b88:	movt	r1, #2
   12b8c:	vld1.64	{d16-d17}, [r2 :128]
   12b90:	vld1.64	{d18-d19}, [r1 :128]
   12b94:	vadd.i64	q8, q9, q8
   12b98:	vst1.64	{d16-d17}, [r1 :128]
   12b9c:	b	11f00 <free@plt>
   12ba0:	andeq	r0, r0, r1
   12ba4:	andeq	r0, r0, r0
   12ba8:	andeq	r0, r0, r1
   12bac:	andeq	r0, r0, r0

00012bb0 <free_token_function@@Base>:
   12bb0:	movw	r1, #49856	; 0xc2c0
   12bb4:	add	r2, pc, #36	; 0x24
   12bb8:	movt	r1, #2
   12bbc:	vld1.64	{d16-d17}, [r2 :128]
   12bc0:	add	r1, r1, #16
   12bc4:	vld1.64	{d18-d19}, [r1 :128]
   12bc8:	vadd.i64	q8, q9, q8
   12bcc:	vst1.64	{d16-d17}, [r1 :128]
   12bd0:	b	11f00 <free@plt>
   12bd4:	nop	{0}
   12bd8:	nop	{0}
   12bdc:	nop	{0}
   12be0:	andeq	r0, r0, r1
   12be4:	andeq	r0, r0, r0
   12be8:	andeq	r0, r0, r1
   12bec:	andeq	r0, r0, r0

00012bf0 <free_token_opar@@Base>:
   12bf0:	movw	r1, #49856	; 0xc2c0
   12bf4:	add	r2, pc, #36	; 0x24
   12bf8:	movt	r1, #2
   12bfc:	vld1.64	{d16-d17}, [r2 :128]
   12c00:	add	r1, r1, #32
   12c04:	vld1.64	{d18-d19}, [r1 :128]
   12c08:	vadd.i64	q8, q9, q8
   12c0c:	vst1.64	{d16-d17}, [r1 :128]
   12c10:	b	11f00 <free@plt>
   12c14:	nop	{0}
   12c18:	nop	{0}
   12c1c:	nop	{0}
   12c20:	andeq	r0, r0, r1
   12c24:	andeq	r0, r0, r0
   12c28:	andeq	r0, r0, r1
   12c2c:	andeq	r0, r0, r0

00012c30 <free_token_cpar@@Base>:
   12c30:	movw	r1, #49856	; 0xc2c0
   12c34:	add	r2, pc, #36	; 0x24
   12c38:	movt	r1, #2
   12c3c:	vld1.64	{d16-d17}, [r2 :128]
   12c40:	add	r1, r1, #48	; 0x30
   12c44:	vld1.64	{d18-d19}, [r1 :128]
   12c48:	vadd.i64	q8, q9, q8
   12c4c:	vst1.64	{d16-d17}, [r1 :128]
   12c50:	b	11f00 <free@plt>
   12c54:	nop	{0}
   12c58:	nop	{0}
   12c5c:	nop	{0}
   12c60:	andeq	r0, r0, r1
   12c64:	andeq	r0, r0, r0
   12c68:	andeq	r0, r0, r1
   12c6c:	andeq	r0, r0, r0

00012c70 <free_token_obra@@Base>:
   12c70:	movw	r1, #49856	; 0xc2c0
   12c74:	add	r2, pc, #36	; 0x24
   12c78:	movt	r1, #2
   12c7c:	vld1.64	{d16-d17}, [r2 :128]
   12c80:	add	r1, r1, #64	; 0x40
   12c84:	vld1.64	{d18-d19}, [r1 :128]
   12c88:	vadd.i64	q8, q9, q8
   12c8c:	vst1.64	{d16-d17}, [r1 :128]
   12c90:	b	11f00 <free@plt>
   12c94:	nop	{0}
   12c98:	nop	{0}
   12c9c:	nop	{0}
   12ca0:	andeq	r0, r0, r1
   12ca4:	andeq	r0, r0, r0
   12ca8:	andeq	r0, r0, r1
   12cac:	andeq	r0, r0, r0

00012cb0 <free_token_cbra@@Base>:
   12cb0:	movw	r1, #49856	; 0xc2c0
   12cb4:	add	r2, pc, #36	; 0x24
   12cb8:	movt	r1, #2
   12cbc:	vld1.64	{d16-d17}, [r2 :128]
   12cc0:	add	r1, r1, #80	; 0x50
   12cc4:	vld1.64	{d18-d19}, [r1 :128]
   12cc8:	vadd.i64	q8, q9, q8
   12ccc:	vst1.64	{d16-d17}, [r1 :128]
   12cd0:	b	11f00 <free@plt>
   12cd4:	nop	{0}
   12cd8:	nop	{0}
   12cdc:	nop	{0}
   12ce0:	andeq	r0, r0, r1
   12ce4:	andeq	r0, r0, r0
   12ce8:	andeq	r0, r0, r1
   12cec:	andeq	r0, r0, r0

00012cf0 <free_token_return@@Base>:
   12cf0:	movw	r1, #49856	; 0xc2c0
   12cf4:	add	r2, pc, #36	; 0x24
   12cf8:	movt	r1, #2
   12cfc:	vld1.64	{d16-d17}, [r2 :128]
   12d00:	add	r1, r1, #96	; 0x60
   12d04:	vld1.64	{d18-d19}, [r1 :128]
   12d08:	vadd.i64	q8, q9, q8
   12d0c:	vst1.64	{d16-d17}, [r1 :128]
   12d10:	b	11f00 <free@plt>
   12d14:	nop	{0}
   12d18:	nop	{0}
   12d1c:	nop	{0}
   12d20:	andeq	r0, r0, r1
   12d24:	andeq	r0, r0, r0
   12d28:	andeq	r0, r0, r1
   12d2c:	andeq	r0, r0, r0

00012d30 <free_token_semicolon@@Base>:
   12d30:	movw	r1, #49968	; 0xc330
   12d34:	add	r2, pc, #20
   12d38:	movt	r1, #2
   12d3c:	vld1.64	{d16-d17}, [r2 :128]
   12d40:	vld1.64	{d18-d19}, [r1 :128]
   12d44:	vadd.i64	q8, q9, q8
   12d48:	vst1.64	{d16-d17}, [r1 :128]
   12d4c:	b	11f00 <free@plt>
   12d50:	andeq	r0, r0, r1
   12d54:	andeq	r0, r0, r0
   12d58:	andeq	r0, r0, r1
   12d5c:	andeq	r0, r0, r0

00012d60 <free_token_eof@@Base>:
   12d60:	movw	r1, #49968	; 0xc330
   12d64:	add	r2, pc, #36	; 0x24
   12d68:	movt	r1, #2
   12d6c:	vld1.64	{d16-d17}, [r2 :128]
   12d70:	add	r1, r1, #16
   12d74:	vld1.64	{d18-d19}, [r1 :128]
   12d78:	vadd.i64	q8, q9, q8
   12d7c:	vst1.64	{d16-d17}, [r1 :128]
   12d80:	b	11f00 <free@plt>
   12d84:	nop	{0}
   12d88:	nop	{0}
   12d8c:	nop	{0}
   12d90:	andeq	r0, r0, r1
   12d94:	andeq	r0, r0, r0
   12d98:	andeq	r0, r0, r1
   12d9c:	andeq	r0, r0, r0

00012da0 <free_token_if@@Base>:
   12da0:	movw	r1, #49968	; 0xc330
   12da4:	add	r2, pc, #36	; 0x24
   12da8:	movt	r1, #2
   12dac:	vld1.64	{d16-d17}, [r2 :128]
   12db0:	add	r1, r1, #32
   12db4:	vld1.64	{d18-d19}, [r1 :128]
   12db8:	vadd.i64	q8, q9, q8
   12dbc:	vst1.64	{d16-d17}, [r1 :128]
   12dc0:	b	11f00 <free@plt>
   12dc4:	nop	{0}
   12dc8:	nop	{0}
   12dcc:	nop	{0}
   12dd0:	andeq	r0, r0, r1
   12dd4:	andeq	r0, r0, r0
   12dd8:	andeq	r0, r0, r1
   12ddc:	andeq	r0, r0, r0

00012de0 <free_token_else@@Base>:
   12de0:	movw	r1, #49968	; 0xc330
   12de4:	add	r2, pc, #36	; 0x24
   12de8:	movt	r1, #2
   12dec:	vld1.64	{d16-d17}, [r2 :128]
   12df0:	add	r1, r1, #48	; 0x30
   12df4:	vld1.64	{d18-d19}, [r1 :128]
   12df8:	vadd.i64	q8, q9, q8
   12dfc:	vst1.64	{d16-d17}, [r1 :128]
   12e00:	b	11f00 <free@plt>
   12e04:	nop	{0}
   12e08:	nop	{0}
   12e0c:	nop	{0}
   12e10:	andeq	r0, r0, r1
   12e14:	andeq	r0, r0, r0
   12e18:	andeq	r0, r0, r1
   12e1c:	andeq	r0, r0, r0

00012e20 <free_token_boolean_op@@Base>:
   12e20:	push	{r4, r5, fp, lr}
   12e24:	add	fp, sp, #8
   12e28:	movw	r5, #49968	; 0xc330
   12e2c:	mov	r4, r0
   12e30:	movt	r5, #2
   12e34:	ldrd	r0, [r5, #64]	; 0x40
   12e38:	adds	r0, r0, #1
   12e3c:	adc	r1, r1, #0
   12e40:	strd	r0, [r5, #64]	; 0x40
   12e44:	ldr	r0, [r4, #4]
   12e48:	cmp	r0, #0
   12e4c:	beq	12e6c <free_token_boolean_op@@Base+0x4c>
   12e50:	ldrd	r2, [r5, #72]	; 0x48
   12e54:	adds	r2, r2, #1
   12e58:	adc	r3, r3, #0
   12e5c:	strd	r2, [r5, #72]	; 0x48
   12e60:	bl	11f00 <free@plt>
   12e64:	add	r0, r5, #88	; 0x58
   12e68:	b	12e70 <free_token_boolean_op@@Base+0x50>
   12e6c:	add	r0, r5, #80	; 0x50
   12e70:	ldrd	r2, [r0]
   12e74:	adds	r2, r2, #1
   12e78:	adc	r3, r3, #0
   12e7c:	strd	r2, [r0]
   12e80:	ldrd	r0, [r5, #96]	; 0x60
   12e84:	adds	r0, r0, #1
   12e88:	adc	r1, r1, #0
   12e8c:	strd	r0, [r5, #96]	; 0x60
   12e90:	mov	r0, r4
   12e94:	pop	{r4, r5, fp, lr}
   12e98:	b	11f00 <free@plt>
   12e9c:	push	{r4, r5, r6, lr}
   12ea0:	sub	sp, sp, #8
   12ea4:	movw	r0, #43932	; 0xab9c
   12ea8:	movw	r1, #43909	; 0xab85
   12eac:	movw	r2, #23366	; 0x5b46
   12eb0:	movt	r0, #1
   12eb4:	movt	r1, #1
   12eb8:	movt	r2, #47030	; 0xb7b6
   12ebc:	bl	17a38 <__generate_code_for_binary_boolean_expression@@Base+0x468>
   12ec0:	movw	r0, #45008	; 0xafd0
   12ec4:	movw	r6, #44480	; 0xadc0
   12ec8:	mov	r5, #0
   12ecc:	movt	r0, #1
   12ed0:	movt	r6, #1
   12ed4:	add	r4, r0, #4
   12ed8:	mov	r3, r6
   12edc:	ldr	r0, [r3, r5]!
   12ee0:	ldr	r1, [r3, #16]
   12ee4:	str	r1, [sp]
   12ee8:	ldmib	r3, {r1, r2}
   12eec:	ldrb	r3, [r3, #12]
   12ef0:	bl	18158 <__generate_code_for_binary_boolean_expression@@Base+0xb88>
   12ef4:	ldrd	r0, [r4, #-4]
   12ef8:	bl	18a0c <__generate_code_for_binary_boolean_expression@@Base+0x143c>
   12efc:	add	r5, r5, #20
   12f00:	add	r4, r4, #8
   12f04:	cmp	r5, #520	; 0x208
   12f08:	bne	12ed8 <free_token_boolean_op@@Base+0xb8>
   12f0c:	bl	19194 <__generate_code_for_binary_boolean_expression@@Base+0x1bc4>
   12f10:	add	sp, sp, #8
   12f14:	pop	{r4, r5, r6, lr}
   12f18:	b	19f00 <__generate_code_for_binary_boolean_expression@@Base+0x2930>
   12f1c:	push	{fp, lr}
   12f20:	bl	12e9c <free_token_boolean_op@@Base+0x7c>
   12f24:	movw	r0, #49632	; 0xc1e0
   12f28:	vmov.i32	q8, #0	; 0x00000000
   12f2c:	movt	r0, #2
   12f30:	add	r1, r0, #80	; 0x50
   12f34:	vst1.64	{d16-d17}, [r1 :128]
   12f38:	add	r1, r0, #64	; 0x40
   12f3c:	vst1.64	{d16-d17}, [r1 :128]
   12f40:	add	r1, r0, #48	; 0x30
   12f44:	vst1.64	{d16-d17}, [r1 :128]
   12f48:	add	r1, r0, #32
   12f4c:	vst1.64	{d16-d17}, [r1 :128]
   12f50:	add	r1, r0, #16
   12f54:	vst1.64	{d16-d17}, [r1 :128]
   12f58:	movw	r1, #49744	; 0xc250
   12f5c:	movt	r1, #2
   12f60:	add	r2, r1, #80	; 0x50
   12f64:	vst1.64	{d16-d17}, [r2 :128]
   12f68:	add	r2, r1, #64	; 0x40
   12f6c:	vst1.64	{d16-d17}, [r2 :128]
   12f70:	add	r2, r1, #48	; 0x30
   12f74:	vst1.64	{d16-d17}, [r2 :128]
   12f78:	add	r2, r1, #32
   12f7c:	vst1.64	{d16-d17}, [r2 :128]
   12f80:	add	r2, r1, #16
   12f84:	vst1.64	{d16-d17}, [r2 :128]
   12f88:	movw	r2, #49856	; 0xc2c0
   12f8c:	movt	r2, #2
   12f90:	add	r3, r2, #80	; 0x50
   12f94:	vst1.64	{d16-d17}, [r3 :128]
   12f98:	add	r3, r2, #64	; 0x40
   12f9c:	vst1.64	{d16-d17}, [r3 :128]
   12fa0:	add	r3, r2, #48	; 0x30
   12fa4:	vst1.64	{d16-d17}, [r3 :128]
   12fa8:	add	r3, r2, #32
   12fac:	vst1.64	{d16-d17}, [r3 :128]
   12fb0:	add	r3, r2, #16
   12fb4:	vst1.64	{d16-d17}, [r3 :128]
   12fb8:	mov	r3, #96	; 0x60
   12fbc:	vst1.64	{d16-d17}, [r0 :128], r3
   12fc0:	vst1.64	{d16-d17}, [r1 :128], r3
   12fc4:	vst1.64	{d16-d17}, [r2 :128], r3
   12fc8:	vst1.64	{d16-d17}, [r0 :128]
   12fcc:	movw	r0, #49968	; 0xc330
   12fd0:	vst1.64	{d16-d17}, [r1 :128]
   12fd4:	vst1.64	{d16-d17}, [r2 :128]
   12fd8:	movt	r0, #2
   12fdc:	add	r1, r0, #48	; 0x30
   12fe0:	mov	r2, r0
   12fe4:	vst1.64	{d16-d17}, [r1 :128]
   12fe8:	add	r1, r0, #32
   12fec:	vst1.64	{d16-d17}, [r1 :128]
   12ff0:	add	r1, r0, #16
   12ff4:	vst1.64	{d16-d17}, [r1 :128]
   12ff8:	mov	r1, #80	; 0x50
   12ffc:	vst1.64	{d16-d17}, [r2 :128], r1
   13000:	add	r1, r0, #64	; 0x40
   13004:	vst1.64	{d16-d17}, [r1 :128]
   13008:	mov	r1, #0
   1300c:	vst1.64	{d16-d17}, [r2 :128]
   13010:	str	r1, [r0, #96]	; 0x60
   13014:	str	r1, [r0, #100]	; 0x64
   13018:	pop	{fp, pc}
   1301c:	movw	r0, #11932	; 0x2e9c
   13020:	movw	r1, #12060	; 0x2f1c
   13024:	movt	r0, #1
   13028:	movt	r1, #1
   1302c:	b	1a3b4 <__gcov_flush@@Base+0xb8>

00013030 <init_lexer@@Base>:
   13030:	movw	r2, #51088	; 0xc790
   13034:	add	r3, pc, #36	; 0x24
   13038:	movt	r2, #2
   1303c:	vld1.64	{d16-d17}, [r3 :128]
   13040:	vld1.64	{d18-d19}, [r2 :128]
   13044:	vadd.i64	q8, q9, q8
   13048:	vst1.64	{d16-d17}, [r2 :128]
   1304c:	mov	r2, #0
   13050:	stm	r0, {r1, r2}
   13054:	str	r2, [r0, #8]
   13058:	bx	lr
   1305c:	nop	{0}
   13060:	andeq	r0, r0, r1
   13064:	andeq	r0, r0, r0
   13068:	andeq	r0, r0, r1
   1306c:	andeq	r0, r0, r0

00013070 <destroy_lexer@@Base>:
   13070:	push	{r4, sl, fp, lr}
   13074:	add	fp, sp, #8
   13078:	movw	r4, #51184	; 0xc7f0
   1307c:	movt	r4, #2
   13080:	ldrd	r2, [r4, #32]
   13084:	adds	r2, r2, #1
   13088:	adc	r3, r3, #0
   1308c:	strd	r2, [r4, #32]
   13090:	ldr	r0, [r0, #4]
   13094:	cmp	r0, #0
   13098:	beq	130d8 <destroy_lexer@@Base+0x68>
   1309c:	movw	r1, #51088	; 0xc790
   130a0:	add	r2, pc, #88	; 0x58
   130a4:	movt	r1, #2
   130a8:	vld1.64	{d16-d17}, [r2 :128]
   130ac:	ldrd	r2, [r4, #40]	; 0x28
   130b0:	add	r1, r1, #16
   130b4:	vld1.64	{d18-d19}, [r1 :128]
   130b8:	adds	r2, r2, #1
   130bc:	adc	r3, r3, #0
   130c0:	strd	r2, [r4, #40]	; 0x28
   130c4:	vadd.i64	q8, q9, q8
   130c8:	vst1.64	{d16-d17}, [r1 :128]
   130cc:	bl	11f00 <free@plt>
   130d0:	add	r0, r4, #56	; 0x38
   130d4:	b	130dc <destroy_lexer@@Base+0x6c>
   130d8:	add	r0, r4, #48	; 0x30
   130dc:	ldrd	r2, [r0]
   130e0:	adds	r2, r2, #1
   130e4:	adc	r3, r3, #0
   130e8:	strd	r2, [r0]
   130ec:	ldrd	r0, [r4, #64]	; 0x40
   130f0:	adds	r0, r0, #1
   130f4:	adc	r1, r1, #0
   130f8:	strd	r0, [r4, #64]	; 0x40
   130fc:	pop	{r4, sl, fp, pc}
   13100:	andeq	r0, r0, r1
   13104:	andeq	r0, r0, r0
   13108:	andeq	r0, r0, r1
   1310c:	andeq	r0, r0, r0

00013110 <free_stack_base@@Base>:
   13110:	movw	r1, #51088	; 0xc790
   13114:	add	r2, pc, #36	; 0x24
   13118:	movt	r1, #2
   1311c:	vld1.64	{d16-d17}, [r2 :128]
   13120:	add	r1, r1, #16
   13124:	vld1.64	{d18-d19}, [r1 :128]
   13128:	vadd.i64	q8, q9, q8
   1312c:	vst1.64	{d16-d17}, [r1 :128]
   13130:	b	11f00 <free@plt>
   13134:	nop	{0}
   13138:	nop	{0}
   1313c:	nop	{0}
   13140:	andeq	r0, r0, r1
   13144:	andeq	r0, r0, r0
   13148:	andeq	r0, r0, r1
   1314c:	andeq	r0, r0, r0

00013150 <push_back@@Base>:
   13150:	push	{r4, r5, fp, lr}
   13154:	add	fp, sp, #8
   13158:	mov	r5, r0
   1315c:	movw	r0, #51088	; 0xc790
   13160:	mov	r4, r1
   13164:	add	r1, pc, #52	; 0x34
   13168:	movt	r0, #2
   1316c:	vld1.64	{d16-d17}, [r1 :128]
   13170:	add	r0, r0, #32
   13174:	vld1.64	{d18-d19}, [r0 :128]
   13178:	vadd.i64	q8, q9, q8
   1317c:	vst1.64	{d16-d17}, [r0 :128]
   13180:	mov	r0, #8
   13184:	bl	11f78 <malloc@plt>
   13188:	ldr	r1, [r5, #4]
   1318c:	stm	r0, {r1, r4}
   13190:	str	r0, [r5, #4]
   13194:	pop	{r4, r5, fp, pc}
   13198:	nop	{0}
   1319c:	nop	{0}
   131a0:	andeq	r0, r0, r1
   131a4:	andeq	r0, r0, r0
   131a8:	andeq	r0, r0, r1
   131ac:	andeq	r0, r0, r0

000131b0 <get_char@@Base>:
   131b0:	movw	r1, #51088	; 0xc790
   131b4:	add	r2, pc, #52	; 0x34
   131b8:	movt	r1, #2
   131bc:	vld1.64	{d16-d17}, [r2 :128]
   131c0:	add	r1, r1, #48	; 0x30
   131c4:	vld1.64	{d18-d19}, [r1 :128]
   131c8:	vadd.i64	q8, q9, q8
   131cc:	vst1.64	{d16-d17}, [r1 :128]
   131d0:	ldr	r2, [r0, #8]
   131d4:	ldr	r1, [r0]
   131d8:	add	r3, r2, #1
   131dc:	str	r3, [r0, #8]
   131e0:	ldrb	r0, [r1, r2]
   131e4:	bx	lr
   131e8:	nop	{0}
   131ec:	nop	{0}
   131f0:	andeq	r0, r0, r1
   131f4:	andeq	r0, r0, r0
   131f8:	andeq	r0, r0, r1
   131fc:	andeq	r0, r0, r0

00013200 <push_back_chars@@Base>:
   13200:	push	{r4, r5, r6, r7, fp, lr}
   13204:	add	fp, sp, #16
   13208:	movw	r2, #51184	; 0xc7f0
   1320c:	movt	r2, #2
   13210:	ldrd	r4, [r2]
   13214:	adds	r4, r4, #1
   13218:	adc	r5, r5, #0
   1321c:	strd	r4, [r2]
   13220:	ldr	r3, [r0, #8]
   13224:	cmp	r3, r1
   13228:	bcc	1325c <push_back_chars@@Base+0x5c>
   1322c:	ldrd	r4, [r2, #8]
   13230:	ldrd	r6, [r2, #24]
   13234:	sub	r1, r3, r1
   13238:	adds	r4, r4, #1
   1323c:	adc	r5, r5, #0
   13240:	adds	r6, r6, #1
   13244:	adc	r7, r7, #0
   13248:	str	r6, [r2, #24]
   1324c:	strd	r4, [r2, #8]
   13250:	str	r7, [r2, #28]
   13254:	str	r1, [r0, #8]
   13258:	pop	{r4, r5, r6, r7, fp, pc}
   1325c:	ldrd	r0, [r2, #16]
   13260:	adds	r0, r0, #1
   13264:	adc	r1, r1, #0
   13268:	strd	r0, [r2, #16]
   1326c:	movw	r0, #49384	; 0xc0e8
   13270:	mov	r1, #32
   13274:	mov	r2, #1
   13278:	movt	r0, #2
   1327c:	ldr	r3, [r0]
   13280:	movw	r0, #45216	; 0xb0a0
   13284:	movt	r0, #1
   13288:	bl	11f54 <fwrite@plt>
   1328c:	mov	r0, #1
   13290:	bl	11fb4 <exit@plt>
   13294:	nop	{0}
   13298:	nop	{0}
   1329c:	nop	{0}

000132a0 <push_back_one_char@@Base>:
   132a0:	push	{r4, r5, r6, r7, fp, lr}
   132a4:	add	fp, sp, #16
   132a8:	movw	r1, #51088	; 0xc790
   132ac:	add	r3, pc, #172	; 0xac
   132b0:	movt	r1, #2
   132b4:	vld1.64	{d16-d17}, [r3 :128]
   132b8:	add	r2, r1, #64	; 0x40
   132bc:	movw	r1, #51184	; 0xc7f0
   132c0:	movt	r1, #2
   132c4:	vld1.64	{d18-d19}, [r2 :128]
   132c8:	ldrd	r4, [r1]
   132cc:	vadd.i64	q8, q9, q8
   132d0:	adds	r4, r4, #1
   132d4:	adc	r5, r5, #0
   132d8:	strd	r4, [r1]
   132dc:	vst1.64	{d16-d17}, [r2 :128]
   132e0:	ldr	r2, [r0, #8]
   132e4:	cmp	r2, #0
   132e8:	beq	1331c <push_back_one_char@@Base+0x7c>
   132ec:	ldrd	r4, [r1, #8]
   132f0:	ldrd	r6, [r1, #24]
   132f4:	adds	r4, r4, #1
   132f8:	adc	r5, r5, #0
   132fc:	adds	r3, r6, #1
   13300:	str	r3, [r1, #24]
   13304:	adc	r3, r7, #0
   13308:	strd	r4, [r1, #8]
   1330c:	str	r3, [r1, #28]
   13310:	sub	r1, r2, #1
   13314:	str	r1, [r0, #8]
   13318:	pop	{r4, r5, r6, r7, fp, pc}
   1331c:	ldr	r0, [r1, #16]
   13320:	ldr	r3, [r1, #20]
   13324:	mov	r2, #1
   13328:	adds	r0, r0, #1
   1332c:	str	r0, [r1, #16]
   13330:	movw	r0, #49384	; 0xc0e8
   13334:	adc	r3, r3, #0
   13338:	movt	r0, #2
   1333c:	str	r3, [r1, #20]
   13340:	mov	r1, #32
   13344:	ldr	r3, [r0]
   13348:	movw	r0, #45216	; 0xb0a0
   1334c:	movt	r0, #1
   13350:	bl	11f54 <fwrite@plt>
   13354:	mov	r0, #1
   13358:	bl	11fb4 <exit@plt>
   1335c:	nop	{0}
   13360:	andeq	r0, r0, r1
   13364:	andeq	r0, r0, r0
   13368:	andeq	r0, r0, r1
   1336c:	andeq	r0, r0, r0

00013370 <next@@Base>:
   13370:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13374:	add	fp, sp, #28
   13378:	sub	sp, sp, #524	; 0x20c
   1337c:	movw	r7, #50080	; 0xc3a0
   13380:	mov	r4, r0
   13384:	movw	r5, #51088	; 0xc790
   13388:	movt	r7, #2
   1338c:	movt	r5, #2
   13390:	ldrd	r0, [r7]
   13394:	adds	r0, r0, #1
   13398:	adc	r1, r1, #0
   1339c:	strd	r0, [r7]
   133a0:	ldr	r0, [r4, #4]
   133a4:	cmp	r0, #0
   133a8:	beq	133f4 <next@@Base+0x84>
   133ac:	ldrd	r2, [r7, #8]
   133b0:	adds	r2, r2, #1
   133b4:	adc	r3, r3, #0
   133b8:	strd	r2, [r7, #8]
   133bc:	ldr	r1, [r0]
   133c0:	str	r1, [r4, #4]
   133c4:	mov	r1, #0
   133c8:	ldr	r6, [r0, #4]
   133cc:	str	r1, [r0, #4]
   133d0:	add	r2, pc, #888	; 0x378
   133d4:	add	r1, r5, #16
   133d8:	vld1.64	{d16-d17}, [r2 :128]
   133dc:	vld1.64	{d18-d19}, [r1 :128]
   133e0:	vadd.i64	q8, q9, q8
   133e4:	vst1.64	{d16-d17}, [r1 :128]
   133e8:	bl	11f00 <free@plt>
   133ec:	add	r0, r7, #24
   133f0:	b	138ec <next@@Base+0x57c>
   133f4:	add	r1, pc, #852	; 0x354
   133f8:	add	lr, r5, #48	; 0x30
   133fc:	ldrd	r2, [r7, #16]
   13400:	vld1.64	{d16-d17}, [r1 :128]
   13404:	vld1.64	{d18-d19}, [lr :128]
   13408:	adds	r2, r2, #1
   1340c:	adc	r3, r3, #0
   13410:	vadd.i64	q8, q9, q8
   13414:	strd	r2, [r7, #16]
   13418:	vst1.64	{d16-d17}, [lr :128]
   1341c:	ldr	r2, [r4, #8]
   13420:	ldr	r1, [r4]
   13424:	add	r3, r2, #1
   13428:	str	r3, [r4, #8]
   1342c:	ldrb	r9, [r1, r2]
   13430:	ldrd	r2, [r7, #32]
   13434:	adds	r2, r2, #1
   13438:	adc	r3, r3, #0
   1343c:	cmp	r9, #0
   13440:	strd	r2, [r7, #32]
   13444:	beq	138c8 <next@@Base+0x558>
   13448:	mov	r2, #0
   1344c:	add	sl, r7, #56	; 0x38
   13450:	add	r3, r7, #112	; 0x70
   13454:	add	ip, sp, #8
   13458:	mov	r8, #0
   1345c:	b	13494 <next@@Base+0x124>
   13460:	mov	r1, sl
   13464:	ldm	r1, {r0, r5}
   13468:	adds	r0, r0, #1
   1346c:	adc	r5, r5, #0
   13470:	stm	r1, {r0, r5}
   13474:	ldr	r0, [r7, #984]	; 0x3d8
   13478:	ldr	r1, [r7, #988]	; 0x3dc
   1347c:	adds	r0, r0, #1
   13480:	adc	r1, r1, #0
   13484:	tst	r9, #255	; 0xff
   13488:	str	r0, [r7, #984]	; 0x3d8
   1348c:	str	r1, [r7, #988]	; 0x3dc
   13490:	beq	138c8 <next@@Base+0x558>
   13494:	ldr	r1, [r7, #40]	; 0x28
   13498:	ldr	r5, [r7, #44]	; 0x2c
   1349c:	adds	r1, r1, #1
   134a0:	adc	r5, r5, #0
   134a4:	cmp	r2, #5
   134a8:	str	r1, [r7, #40]	; 0x28
   134ac:	str	r5, [r7, #44]	; 0x2c
   134b0:	bhi	13460 <next@@Base+0xf0>
   134b4:	add	r1, pc, #0
   134b8:	ldr	pc, [r1, r2, lsl #2]
   134bc:	ldrdeq	r3, [r1], -r4
   134c0:	andeq	r3, r1, r0, lsr #18
   134c4:	strdeq	r3, [r1], -r8
   134c8:	ldrdeq	r3, [r1], -r8
   134cc:	andeq	r3, r1, ip, lsl fp
   134d0:	muleq	r1, ip, sp
   134d4:	ldr	r2, [r7, #64]	; 0x40
   134d8:	ldr	r1, [r7, #68]	; 0x44
   134dc:	adds	r2, r2, #1
   134e0:	str	r2, [r7, #64]	; 0x40
   134e4:	uxtb	r2, r9
   134e8:	adc	r1, r1, #0
   134ec:	str	r1, [r7, #68]	; 0x44
   134f0:	mov	r1, r3
   134f4:	cmp	r2, #9
   134f8:	beq	13548 <next@@Base+0x1d8>
   134fc:	ldr	r1, [r7, #120]	; 0x78
   13500:	ldr	r5, [r7, #124]	; 0x7c
   13504:	adds	r1, r1, #1
   13508:	adc	r5, r5, #0
   1350c:	cmp	r2, #32
   13510:	str	r1, [r7, #120]	; 0x78
   13514:	str	r5, [r7, #124]	; 0x7c
   13518:	bne	13524 <next@@Base+0x1b4>
   1351c:	add	r1, r7, #128	; 0x80
   13520:	b	13548 <next@@Base+0x1d8>
   13524:	ldr	r1, [r7, #136]	; 0x88
   13528:	ldr	r5, [r7, #140]	; 0x8c
   1352c:	adds	r1, r1, #1
   13530:	adc	r5, r5, #0
   13534:	cmp	r2, #10
   13538:	str	r1, [r7, #136]	; 0x88
   1353c:	str	r5, [r7, #140]	; 0x8c
   13540:	bne	13590 <next@@Base+0x220>
   13544:	add	r1, r7, #144	; 0x90
   13548:	ldm	r1, {r2, r5}
   1354c:	adds	r2, r2, #1
   13550:	adc	r5, r5, #0
   13554:	stm	r1, {r2, r5}
   13558:	add	r1, pc, #496	; 0x1f0
   1355c:	vld1.64	{d18-d19}, [lr :128]
   13560:	vld1.64	{d16-d17}, [r1 :128]
   13564:	vadd.i64	q8, q9, q8
   13568:	vst1.64	{d16-d17}, [lr :128]
   1356c:	ldr	r5, [r4, #8]
   13570:	ldr	r2, [r4]
   13574:	add	r1, r5, #1
   13578:	add	r5, r2, r5
   1357c:	mov	r2, #0
   13580:	str	r1, [r4, #8]
   13584:	add	r1, r7, #160	; 0xa0
   13588:	ldrb	r9, [r5]
   1358c:	b	13464 <next@@Base+0xf4>
   13590:	ldr	r1, [r7, #152]	; 0x98
   13594:	ldr	r5, [r7, #156]	; 0x9c
   13598:	adds	r1, r1, #1
   1359c:	adc	r5, r5, #0
   135a0:	cmp	r2, #48	; 0x30
   135a4:	str	r1, [r7, #152]	; 0x98
   135a8:	str	r5, [r7, #156]	; 0x9c
   135ac:	beq	13fc8 <next@@Base+0xc58>
   135b0:	ldr	r1, [r7, #176]	; 0xb0
   135b4:	ldr	r5, [r7, #180]	; 0xb4
   135b8:	adds	r1, r1, #1
   135bc:	adc	r5, r5, #0
   135c0:	cmp	r2, #49	; 0x31
   135c4:	str	r1, [r7, #176]	; 0xb0
   135c8:	str	r5, [r7, #180]	; 0xb4
   135cc:	bcc	13ff4 <next@@Base+0xc84>
   135d0:	ldr	r1, [r7, #192]	; 0xc0
   135d4:	ldr	r5, [r7, #196]	; 0xc4
   135d8:	adds	r1, r1, #1
   135dc:	adc	r5, r5, #0
   135e0:	cmp	r2, #57	; 0x39
   135e4:	str	r1, [r7, #192]	; 0xc0
   135e8:	str	r5, [r7, #196]	; 0xc4
   135ec:	bhi	13644 <next@@Base+0x2d4>
   135f0:	add	r1, pc, #344	; 0x158
   135f4:	vld1.64	{d18-d19}, [lr :128]
   135f8:	ldr	r2, [r7, #208]	; 0xd0
   135fc:	strb	r9, [ip, r8]
   13600:	add	r8, r8, #1
   13604:	vld1.64	{d16-d17}, [r1 :128]
   13608:	ldr	r1, [r7, #212]	; 0xd4
   1360c:	adds	r2, r2, #1
   13610:	adc	r1, r1, #0
   13614:	str	r2, [r7, #208]	; 0xd0
   13618:	vadd.i64	q8, q9, q8
   1361c:	str	r1, [r7, #212]	; 0xd4
   13620:	vst1.64	{d16-d17}, [lr :128]
   13624:	ldr	r5, [r4, #8]
   13628:	ldr	r2, [r4]
   1362c:	add	r1, r5, #1
   13630:	add	r5, r2, r5
   13634:	mov	r2, #1
   13638:	str	r1, [r4, #8]
   1363c:	add	r1, r7, #224	; 0xe0
   13640:	b	13588 <next@@Base+0x218>
   13644:	ldrd	r0, [r7, #240]	; 0xf0
   13648:	ldr	r6, [r7, #216]	; 0xd8
   1364c:	ldr	r5, [r7, #220]	; 0xdc
   13650:	adds	r0, r0, #1
   13654:	str	r0, [r7, #240]	; 0xf0
   13658:	adc	r1, r1, #0
   1365c:	adds	r6, r6, #1
   13660:	ldr	r0, [r7, #264]	; 0x108
   13664:	adc	r5, r5, #0
   13668:	adds	r0, r0, #1
   1366c:	str	r0, [r7, #264]	; 0x108
   13670:	str	r6, [r7, #216]	; 0xd8
   13674:	str	r5, [r7, #220]	; 0xdc
   13678:	str	r1, [r7, #244]	; 0xf4
   1367c:	ldr	r0, [r7, #268]	; 0x10c
   13680:	adc	r0, r0, #0
   13684:	cmp	r2, #123	; 0x7b
   13688:	str	r0, [r7, #268]	; 0x10c
   1368c:	beq	1408c <next@@Base+0xd1c>
   13690:	ldr	r0, [r7, #288]	; 0x120
   13694:	ldr	r1, [r7, #292]	; 0x124
   13698:	adds	r0, r0, #1
   1369c:	adc	r1, r1, #0
   136a0:	cmp	r2, #125	; 0x7d
   136a4:	str	r0, [r7, #288]	; 0x120
   136a8:	str	r1, [r7, #292]	; 0x124
   136ac:	beq	140bc <next@@Base+0xd4c>
   136b0:	ldr	r0, [r7, #312]	; 0x138
   136b4:	ldr	r1, [r7, #316]	; 0x13c
   136b8:	adds	r0, r0, #1
   136bc:	adc	r1, r1, #0
   136c0:	cmp	r2, #59	; 0x3b
   136c4:	str	r0, [r7, #312]	; 0x138
   136c8:	str	r1, [r7, #316]	; 0x13c
   136cc:	beq	14100 <next@@Base+0xd90>
   136d0:	ldr	r0, [r7, #336]	; 0x150
   136d4:	ldr	r1, [r7, #340]	; 0x154
   136d8:	adds	r0, r0, #1
   136dc:	adc	r1, r1, #0
   136e0:	cmp	r2, #101	; 0x65
   136e4:	str	r0, [r7, #336]	; 0x150
   136e8:	str	r1, [r7, #340]	; 0x154
   136ec:	bne	13760 <next@@Base+0x3f0>
   136f0:	add	r0, pc, #88	; 0x58
   136f4:	vld1.64	{d18-d19}, [lr :128]
   136f8:	ldr	r1, [r7, #356]	; 0x164
   136fc:	vld1.64	{d16-d17}, [r0 :128]
   13700:	mov	r0, #101	; 0x65
   13704:	strb	r0, [ip, r8]
   13708:	ldr	r0, [r7, #352]	; 0x160
   1370c:	add	r8, r8, #1
   13710:	vadd.i64	q8, q9, q8
   13714:	adds	r0, r0, #1
   13718:	adc	r1, r1, #0
   1371c:	str	r0, [r7, #352]	; 0x160
   13720:	str	r1, [r7, #356]	; 0x164
   13724:	vst1.64	{d16-d17}, [lr :128]
   13728:	ldr	r2, [r4, #8]
   1372c:	ldr	r0, [r4]
   13730:	add	r1, r2, #1
   13734:	add	r5, r0, r2
   13738:	mov	r2, #5
   1373c:	str	r1, [r4, #8]
   13740:	add	r1, r7, #368	; 0x170
   13744:	b	13588 <next@@Base+0x218>
   13748:	nop	{0}
   1374c:	nop	{0}
   13750:	andeq	r0, r0, r1
   13754:	andeq	r0, r0, r0
   13758:	andeq	r0, r0, r1
   1375c:	andeq	r0, r0, r0
   13760:	ldr	r0, [r7, #360]	; 0x168
   13764:	ldr	r1, [r7, #364]	; 0x16c
   13768:	mov	r5, #109	; 0x6d
   1376c:	mov	r6, #114	; 0x72
   13770:	adds	r0, r0, #1
   13774:	adc	r1, r1, #0
   13778:	cmp	r2, #105	; 0x69
   1377c:	str	r0, [r7, #360]	; 0x168
   13780:	str	r1, [r7, #364]	; 0x16c
   13784:	mov	r1, #105	; 0x69
   13788:	bne	137e0 <next@@Base+0x470>
   1378c:	sub	r0, pc, #68	; 0x44
   13790:	vld1.64	{d18-d19}, [lr :128]
   13794:	strb	r1, [ip, r8]
   13798:	ldr	r1, [r7, #380]	; 0x17c
   1379c:	add	r8, r8, #1
   137a0:	vld1.64	{d16-d17}, [r0 :128]
   137a4:	ldr	r0, [r7, #376]	; 0x178
   137a8:	adds	r0, r0, #1
   137ac:	vadd.i64	q8, q9, q8
   137b0:	adc	r1, r1, #0
   137b4:	str	r0, [r7, #376]	; 0x178
   137b8:	str	r1, [r7, #380]	; 0x17c
   137bc:	vst1.64	{d16-d17}, [lr :128]
   137c0:	ldr	r2, [r4, #8]
   137c4:	ldr	r0, [r4]
   137c8:	add	r1, r2, #1
   137cc:	add	r5, r0, r2
   137d0:	mov	r2, #2
   137d4:	str	r1, [r4, #8]
   137d8:	add	r1, r7, #392	; 0x188
   137dc:	b	13588 <next@@Base+0x218>
   137e0:	ldr	r0, [r7, #384]	; 0x180
   137e4:	ldr	r1, [r7, #388]	; 0x184
   137e8:	adds	r0, r0, #1
   137ec:	adc	r1, r1, #0
   137f0:	cmp	r2, #109	; 0x6d
   137f4:	str	r0, [r7, #384]	; 0x180
   137f8:	str	r1, [r7, #388]	; 0x184
   137fc:	bne	13854 <next@@Base+0x4e4>
   13800:	sub	r0, pc, #184	; 0xb8
   13804:	vld1.64	{d18-d19}, [lr :128]
   13808:	ldr	r1, [r7, #404]	; 0x194
   1380c:	strb	r5, [ip, r8]
   13810:	add	r8, r8, #1
   13814:	vld1.64	{d16-d17}, [r0 :128]
   13818:	ldr	r0, [r7, #400]	; 0x190
   1381c:	adds	r0, r0, #1
   13820:	vadd.i64	q8, q9, q8
   13824:	adc	r1, r1, #0
   13828:	str	r0, [r7, #400]	; 0x190
   1382c:	str	r1, [r7, #404]	; 0x194
   13830:	vst1.64	{d16-d17}, [lr :128]
   13834:	ldr	r2, [r4, #8]
   13838:	ldr	r0, [r4]
   1383c:	add	r1, r2, #1
   13840:	add	r5, r0, r2
   13844:	mov	r2, #3
   13848:	str	r1, [r4, #8]
   1384c:	add	r1, r7, #416	; 0x1a0
   13850:	b	13588 <next@@Base+0x218>
   13854:	ldr	r0, [r7, #408]	; 0x198
   13858:	ldr	r1, [r7, #412]	; 0x19c
   1385c:	adds	r0, r0, #1
   13860:	adc	r1, r1, #0
   13864:	cmp	r2, #114	; 0x72
   13868:	str	r0, [r7, #408]	; 0x198
   1386c:	str	r1, [r7, #412]	; 0x19c
   13870:	bne	1449c <next@@Base+0x112c>
   13874:	sub	r0, pc, #300	; 0x12c
   13878:	vld1.64	{d18-d19}, [lr :128]
   1387c:	ldr	r1, [r7, #428]	; 0x1ac
   13880:	strb	r6, [ip, r8]
   13884:	add	r8, r8, #1
   13888:	vld1.64	{d16-d17}, [r0 :128]
   1388c:	ldr	r0, [r7, #424]	; 0x1a8
   13890:	adds	r0, r0, #1
   13894:	vadd.i64	q8, q9, q8
   13898:	adc	r1, r1, #0
   1389c:	str	r0, [r7, #424]	; 0x1a8
   138a0:	str	r1, [r7, #428]	; 0x1ac
   138a4:	vst1.64	{d16-d17}, [lr :128]
   138a8:	ldr	r2, [r4, #8]
   138ac:	ldr	r0, [r4]
   138b0:	add	r1, r2, #1
   138b4:	add	r5, r0, r2
   138b8:	mov	r2, #4
   138bc:	str	r1, [r4, #8]
   138c0:	add	r1, r7, #440	; 0x1b8
   138c4:	b	13588 <next@@Base+0x218>
   138c8:	ldrd	r0, [r7, #48]	; 0x30
   138cc:	adds	r0, r0, #1
   138d0:	adc	r1, r1, #0
   138d4:	strd	r0, [r7, #48]	; 0x30
   138d8:	mov	r0, #4
   138dc:	bl	11f78 <malloc@plt>
   138e0:	mov	r6, r0
   138e4:	bl	12a40 <init_token_eof@@Base>
   138e8:	add	r0, r7, #992	; 0x3e0
   138ec:	ldrd	r2, [r0]
   138f0:	adds	r2, r2, #1
   138f4:	adc	r3, r3, #0
   138f8:	strd	r2, [r0]
   138fc:	ldr	r0, [r7, #1000]	; 0x3e8
   13900:	ldr	r1, [r7, #1004]	; 0x3ec
   13904:	adds	r0, r0, #1
   13908:	adc	r1, r1, #0
   1390c:	str	r0, [r7, #1000]	; 0x3e8
   13910:	mov	r0, r6
   13914:	str	r1, [r7, #1004]	; 0x3ec
   13918:	sub	sp, fp, #28
   1391c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13920:	ldrd	r0, [r7, #72]	; 0x48
   13924:	movw	r5, #51088	; 0xc790
   13928:	movt	r5, #2
   1392c:	adds	r0, r0, #1
   13930:	adc	r1, r1, #0
   13934:	strd	r0, [r7, #72]	; 0x48
   13938:	sub	r0, r9, #48	; 0x30
   1393c:	uxtb	r0, r0
   13940:	cmp	r0, #9
   13944:	bhi	13eac <next@@Base+0xb3c>
   13948:	ldrd	r0, [r5, #48]	; 0x30
   1394c:	mov	sl, ip
   13950:	ldr	r2, [r7, #696]	; 0x2b8
   13954:	adds	r0, r0, #1
   13958:	ldr	r3, [r7, #700]	; 0x2bc
   1395c:	strb	r9, [sl, r8]
   13960:	add	r8, r8, #1
   13964:	adc	r1, r1, #0
   13968:	str	r0, [r5, #48]	; 0x30
   1396c:	str	r1, [r5, #52]	; 0x34
   13970:	ldr	r6, [r5, #56]	; 0x38
   13974:	adds	r2, r2, #1
   13978:	str	r2, [r7, #696]	; 0x2b8
   1397c:	adc	r2, r3, #0
   13980:	ldr	r3, [r5, #60]	; 0x3c
   13984:	str	r2, [r7, #700]	; 0x2bc
   13988:	adds	r6, r6, #1
   1398c:	str	r6, [r5, #56]	; 0x38
   13990:	adc	r2, r3, #0
   13994:	str	r2, [r5, #60]	; 0x3c
   13998:	ldr	r3, [r4, #8]
   1399c:	ldr	r2, [r4]
   139a0:	add	r6, r3, #1
   139a4:	str	r6, [r4, #8]
   139a8:	ldrb	r9, [r2, r3]
   139ac:	ldr	r2, [r7, #712]	; 0x2c8
   139b0:	ldr	r3, [r7, #716]	; 0x2cc
   139b4:	adds	r2, r2, #1
   139b8:	str	r2, [r7, #712]	; 0x2c8
   139bc:	sub	r2, r9, #48	; 0x30
   139c0:	adc	r3, r3, #0
   139c4:	uxtb	r2, r2
   139c8:	str	r3, [r7, #716]	; 0x2cc
   139cc:	cmp	r2, #10
   139d0:	bcc	13950 <next@@Base+0x5e0>
   139d4:	b	13eb0 <next@@Base+0xb40>
   139d8:	ldrd	r0, [r7, #88]	; 0x58
   139dc:	adds	r0, r0, #1
   139e0:	adc	r1, r1, #0
   139e4:	strd	r0, [r7, #88]	; 0x58
   139e8:	uxtb	r0, r9
   139ec:	cmp	r0, #97	; 0x61
   139f0:	bne	1480c <next@@Base+0x149c>
   139f4:	sub	r0, pc, #684	; 0x2ac
   139f8:	vld1.64	{d16-d17}, [lr :128]
   139fc:	ldr	r1, [r7, #796]	; 0x31c
   13a00:	movw	r6, #51088	; 0xc790
   13a04:	vld1.64	{d18-d19}, [r0 :128]
   13a08:	mov	r0, #97	; 0x61
   13a0c:	movt	r6, #2
   13a10:	strb	r0, [ip, r8]
   13a14:	ldr	r0, [r7, #792]	; 0x318
   13a18:	vadd.i64	q9, q8, q9
   13a1c:	adds	r0, r0, #1
   13a20:	adc	r1, r1, #0
   13a24:	str	r0, [r7, #792]	; 0x318
   13a28:	str	r1, [r7, #796]	; 0x31c
   13a2c:	vst1.64	{d18-d19}, [lr :128]
   13a30:	ldr	r1, [r4, #8]
   13a34:	ldr	r0, [r4]
   13a38:	add	r2, r1, #1
   13a3c:	str	r2, [r4, #8]
   13a40:	ldrb	r0, [r0, r1]
   13a44:	cmp	r0, #105	; 0x69
   13a48:	bne	1482c <next@@Base+0x14bc>
   13a4c:	add	r0, r8, ip
   13a50:	mov	r1, #105	; 0x69
   13a54:	ldr	r2, [r7, #812]	; 0x32c
   13a58:	mov	r5, ip
   13a5c:	strb	r1, [r0, #1]
   13a60:	vmov.32	r1, d16[0]
   13a64:	adds	r1, r1, #2
   13a68:	str	r1, [r6, #48]	; 0x30
   13a6c:	vmov.32	r1, d16[1]
   13a70:	adc	r1, r1, #0
   13a74:	str	r1, [r6, #52]	; 0x34
   13a78:	ldr	r1, [r7, #808]	; 0x328
   13a7c:	adds	r1, r1, #1
   13a80:	str	r1, [r7, #808]	; 0x328
   13a84:	adc	r1, r2, #0
   13a88:	ldrd	r2, [r6, #56]	; 0x38
   13a8c:	str	r1, [r7, #812]	; 0x32c
   13a90:	adds	r2, r2, #1
   13a94:	adc	r1, r3, #0
   13a98:	str	r2, [r6, #56]	; 0x38
   13a9c:	str	r1, [r6, #60]	; 0x3c
   13aa0:	ldr	r2, [r4, #8]
   13aa4:	ldr	r1, [r4]
   13aa8:	add	r3, r2, #1
   13aac:	str	r3, [r4, #8]
   13ab0:	ldrb	r1, [r1, r2]
   13ab4:	cmp	r1, #110	; 0x6e
   13ab8:	bne	1484c <next@@Base+0x14dc>
   13abc:	mov	r1, #110	; 0x6e
   13ac0:	strh	r1, [r0, #2]
   13ac4:	ldr	r0, [r7, #824]	; 0x338
   13ac8:	ldr	r1, [r7, #828]	; 0x33c
   13acc:	adds	r0, r0, #1
   13ad0:	adc	r1, r1, #0
   13ad4:	str	r0, [r7, #824]	; 0x338
   13ad8:	add	r0, r8, #4
   13adc:	str	r1, [r7, #828]	; 0x33c
   13ae0:	bl	11f78 <malloc@plt>
   13ae4:	add	r6, r8, #3
   13ae8:	mov	r1, r5
   13aec:	mov	r4, r0
   13af0:	mov	r2, r6
   13af4:	bl	12020 <strncpy@plt>
   13af8:	mov	r0, #0
   13afc:	strb	r0, [r4, r6]
   13b00:	mov	r0, #8
   13b04:	bl	11f78 <malloc@plt>
   13b08:	mov	r1, r4
   13b0c:	mov	r6, r0
   13b10:	bl	12880 <init_token_function@@Base>
   13b14:	add	r0, r7, #832	; 0x340
   13b18:	b	138ec <next@@Base+0x57c>
   13b1c:	ldrd	r0, [r7, #96]	; 0x60
   13b20:	adds	r0, r0, #1
   13b24:	adc	r1, r1, #0
   13b28:	strd	r0, [r7, #96]	; 0x60
   13b2c:	uxtb	r0, r9
   13b30:	cmp	r0, #101	; 0x65
   13b34:	bne	1486c <next@@Base+0x14fc>
   13b38:	sub	r0, pc, #1008	; 0x3f0
   13b3c:	vld1.64	{d16-d17}, [lr :128]
   13b40:	ldr	r1, [r7, #852]	; 0x354
   13b44:	mov	r3, ip
   13b48:	vld1.64	{d18-d19}, [r0 :128]
   13b4c:	mov	r0, #101	; 0x65
   13b50:	strb	r0, [ip, r8]
   13b54:	ldr	r0, [r7, #848]	; 0x350
   13b58:	movw	ip, #51088	; 0xc790
   13b5c:	movt	ip, #2
   13b60:	vadd.i64	q9, q8, q9
   13b64:	adds	r0, r0, #1
   13b68:	adc	r1, r1, #0
   13b6c:	str	r0, [r7, #848]	; 0x350
   13b70:	str	r1, [r7, #852]	; 0x354
   13b74:	vst1.64	{d18-d19}, [lr :128]
   13b78:	ldr	r1, [r4, #8]
   13b7c:	ldr	r0, [r4]
   13b80:	add	r2, r1, #1
   13b84:	str	r2, [r4, #8]
   13b88:	ldrb	r0, [r0, r1]
   13b8c:	cmp	r0, #116	; 0x74
   13b90:	bne	1488c <next@@Base+0x151c>
   13b94:	vmov.32	r2, d16[0]
   13b98:	add	r0, r8, r3
   13b9c:	mov	r1, #116	; 0x74
   13ba0:	ldr	r6, [r7, #868]	; 0x364
   13ba4:	strb	r1, [r0, #1]
   13ba8:	adds	r1, r2, #2
   13bac:	str	r1, [ip, #48]	; 0x30
   13bb0:	vmov.32	r1, d16[1]
   13bb4:	adc	r3, r1, #0
   13bb8:	str	r3, [ip, #52]	; 0x34
   13bbc:	ldr	r3, [r7, #864]	; 0x360
   13bc0:	ldr	r5, [ip, #60]	; 0x3c
   13bc4:	adds	r3, r3, #1
   13bc8:	str	r3, [r7, #864]	; 0x360
   13bcc:	adc	r3, r6, #0
   13bd0:	ldr	r6, [ip, #56]	; 0x38
   13bd4:	str	r3, [r7, #868]	; 0x364
   13bd8:	adds	r6, r6, #1
   13bdc:	adc	r3, r5, #0
   13be0:	str	r6, [ip, #56]	; 0x38
   13be4:	str	r3, [ip, #60]	; 0x3c
   13be8:	ldr	r6, [r4, #8]
   13bec:	ldr	r3, [r4]
   13bf0:	add	r5, r6, #1
   13bf4:	str	r5, [r4, #8]
   13bf8:	ldrb	r3, [r3, r6]
   13bfc:	cmp	r3, #117	; 0x75
   13c00:	bne	148ac <next@@Base+0x153c>
   13c04:	adds	r3, r2, #3
   13c08:	ldr	r6, [r7, #884]	; 0x374
   13c0c:	str	r3, [ip, #48]	; 0x30
   13c10:	mov	r3, #117	; 0x75
   13c14:	strb	r3, [r0, #2]
   13c18:	adc	r3, r1, #0
   13c1c:	str	r3, [ip, #52]	; 0x34
   13c20:	ldr	r3, [r7, #880]	; 0x370
   13c24:	ldr	r5, [ip, #60]	; 0x3c
   13c28:	adds	r3, r3, #1
   13c2c:	str	r3, [r7, #880]	; 0x370
   13c30:	adc	r3, r6, #0
   13c34:	ldr	r6, [ip, #56]	; 0x38
   13c38:	str	r3, [r7, #884]	; 0x374
   13c3c:	adds	r6, r6, #1
   13c40:	adc	r3, r5, #0
   13c44:	str	r6, [ip, #56]	; 0x38
   13c48:	str	r3, [ip, #60]	; 0x3c
   13c4c:	ldr	r6, [r4, #8]
   13c50:	ldr	r3, [r4]
   13c54:	add	r5, r6, #1
   13c58:	str	r5, [r4, #8]
   13c5c:	ldrb	r3, [r3, r6]
   13c60:	cmp	r3, #114	; 0x72
   13c64:	bne	148cc <next@@Base+0x155c>
   13c68:	adds	r2, r2, #4
   13c6c:	str	r2, [ip, #48]	; 0x30
   13c70:	mov	r2, #114	; 0x72
   13c74:	strb	r2, [r0, #3]
   13c78:	adc	r0, r1, #0
   13c7c:	ldr	r1, [r7, #900]	; 0x384
   13c80:	str	r0, [ip, #52]	; 0x34
   13c84:	ldr	r0, [r7, #896]	; 0x380
   13c88:	ldrd	r2, [ip, #56]	; 0x38
   13c8c:	adds	r0, r0, #1
   13c90:	str	r0, [r7, #896]	; 0x380
   13c94:	adc	r0, r1, #0
   13c98:	adds	r1, r2, #1
   13c9c:	str	r0, [r7, #900]	; 0x384
   13ca0:	adc	r0, r3, #0
   13ca4:	str	r1, [ip, #56]	; 0x38
   13ca8:	str	r0, [ip, #60]	; 0x3c
   13cac:	ldr	r1, [r4, #8]
   13cb0:	ldr	r0, [r4]
   13cb4:	add	r2, r1, #1
   13cb8:	str	r2, [r4, #8]
   13cbc:	ldrb	r0, [r0, r1]
   13cc0:	cmp	r0, #110	; 0x6e
   13cc4:	bne	148ec <next@@Base+0x157c>
   13cc8:	ldr	r0, [r7, #912]	; 0x390
   13ccc:	ldr	r1, [r7, #916]	; 0x394
   13cd0:	adds	r0, r0, #1
   13cd4:	adc	r1, r1, #0
   13cd8:	str	r0, [r7, #912]	; 0x390
   13cdc:	mov	r0, #4
   13ce0:	str	r1, [r7, #916]	; 0x394
   13ce4:	bl	11f78 <malloc@plt>
   13ce8:	mov	r6, r0
   13cec:	bl	129c0 <init_token_return@@Base>
   13cf0:	add	r0, r7, #920	; 0x398
   13cf4:	b	138ec <next@@Base+0x57c>
   13cf8:	ldrd	r0, [r7, #80]	; 0x50
   13cfc:	adds	r0, r0, #1
   13d00:	adc	r1, r1, #0
   13d04:	strd	r0, [r7, #80]	; 0x50
   13d08:	uxtb	r1, r9
   13d0c:	cmp	r1, #102	; 0x66
   13d10:	beq	13f8c <next@@Base+0xc1c>
   13d14:	cmp	r1, #110	; 0x6e
   13d18:	bne	1490c <next@@Base+0x159c>
   13d1c:	add	r0, pc, #972	; 0x3cc
   13d20:	vld1.64	{d18-d19}, [lr :128]
   13d24:	ldr	r1, [r7, #740]	; 0x2e4
   13d28:	vld1.64	{d16-d17}, [r0 :128]
   13d2c:	mov	r0, #110	; 0x6e
   13d30:	strb	r0, [ip, r8]
   13d34:	ldr	r0, [r7, #736]	; 0x2e0
   13d38:	vadd.i64	q8, q9, q8
   13d3c:	adds	r0, r0, #1
   13d40:	adc	r1, r1, #0
   13d44:	str	r0, [r7, #736]	; 0x2e0
   13d48:	str	r1, [r7, #740]	; 0x2e4
   13d4c:	vst1.64	{d16-d17}, [lr :128]
   13d50:	ldr	r1, [r4, #8]
   13d54:	ldr	r0, [r4]
   13d58:	add	r2, r1, #1
   13d5c:	str	r2, [r4, #8]
   13d60:	ldrb	r0, [r0, r1]
   13d64:	cmp	r0, #116	; 0x74
   13d68:	bne	149a0 <next@@Base+0x1630>
   13d6c:	ldr	r0, [r7, #760]	; 0x2f8
   13d70:	ldr	r1, [r7, #764]	; 0x2fc
   13d74:	adds	r0, r0, #1
   13d78:	adc	r1, r1, #0
   13d7c:	str	r0, [r7, #760]	; 0x2f8
   13d80:	mov	r0, #4
   13d84:	str	r1, [r7, #764]	; 0x2fc
   13d88:	bl	11f78 <malloc@plt>
   13d8c:	mov	r6, r0
   13d90:	bl	12800 <init_token_int_type@@Base>
   13d94:	add	r0, r7, #768	; 0x300
   13d98:	b	138ec <next@@Base+0x57c>
   13d9c:	ldrd	r0, [r7, #104]	; 0x68
   13da0:	adds	r0, r0, #1
   13da4:	adc	r1, r1, #0
   13da8:	strd	r0, [r7, #104]	; 0x68
   13dac:	uxtb	r0, r9
   13db0:	cmp	r0, #108	; 0x6c
   13db4:	bne	1492c <next@@Base+0x15bc>
   13db8:	add	r0, pc, #816	; 0x330
   13dbc:	vld1.64	{d16-d17}, [lr :128]
   13dc0:	ldr	r1, [r7, #940]	; 0x3ac
   13dc4:	movw	r6, #51088	; 0xc790
   13dc8:	vld1.64	{d18-d19}, [r0 :128]
   13dcc:	mov	r0, #108	; 0x6c
   13dd0:	movt	r6, #2
   13dd4:	strb	r0, [ip, r8]
   13dd8:	ldr	r0, [r7, #936]	; 0x3a8
   13ddc:	vadd.i64	q9, q8, q9
   13de0:	adds	r0, r0, #1
   13de4:	adc	r1, r1, #0
   13de8:	str	r0, [r7, #936]	; 0x3a8
   13dec:	str	r1, [r7, #940]	; 0x3ac
   13df0:	vst1.64	{d18-d19}, [lr :128]
   13df4:	ldr	r1, [r4, #8]
   13df8:	ldr	r0, [r4]
   13dfc:	add	r2, r1, #1
   13e00:	str	r2, [r4, #8]
   13e04:	ldrb	r0, [r0, r1]
   13e08:	cmp	r0, #115	; 0x73
   13e0c:	bne	1494c <next@@Base+0x15dc>
   13e10:	add	r0, r8, ip
   13e14:	mov	r1, #115	; 0x73
   13e18:	strb	r1, [r0, #1]
   13e1c:	vmov.32	r0, d16[0]
   13e20:	ldr	r1, [r7, #956]	; 0x3bc
   13e24:	adds	r0, r0, #2
   13e28:	str	r0, [r6, #48]	; 0x30
   13e2c:	vmov.32	r0, d16[1]
   13e30:	adc	r0, r0, #0
   13e34:	str	r0, [r6, #52]	; 0x34
   13e38:	ldr	r0, [r7, #952]	; 0x3b8
   13e3c:	ldrd	r2, [r6, #56]	; 0x38
   13e40:	adds	r0, r0, #1
   13e44:	str	r0, [r7, #952]	; 0x3b8
   13e48:	adc	r0, r1, #0
   13e4c:	adds	r1, r2, #1
   13e50:	str	r0, [r7, #956]	; 0x3bc
   13e54:	adc	r0, r3, #0
   13e58:	str	r1, [r6, #56]	; 0x38
   13e5c:	str	r0, [r6, #60]	; 0x3c
   13e60:	ldr	r1, [r4, #8]
   13e64:	ldr	r0, [r4]
   13e68:	add	r2, r1, #1
   13e6c:	str	r2, [r4, #8]
   13e70:	ldrb	r0, [r0, r1]
   13e74:	cmp	r0, #101	; 0x65
   13e78:	bne	1496c <next@@Base+0x15fc>
   13e7c:	ldr	r0, [r7, #968]	; 0x3c8
   13e80:	ldr	r1, [r7, #972]	; 0x3cc
   13e84:	adds	r0, r0, #1
   13e88:	adc	r1, r1, #0
   13e8c:	str	r0, [r7, #968]	; 0x3c8
   13e90:	mov	r0, #4
   13e94:	str	r1, [r7, #972]	; 0x3cc
   13e98:	bl	11f78 <malloc@plt>
   13e9c:	mov	r6, r0
   13ea0:	bl	12ac0 <init_token_else@@Base>
   13ea4:	add	r0, r7, #976	; 0x3d0
   13ea8:	b	138ec <next@@Base+0x57c>
   13eac:	mov	sl, ip
   13eb0:	add	r0, pc, #568	; 0x238
   13eb4:	add	r1, r5, #64	; 0x40
   13eb8:	ldr	r2, [r7, #708]	; 0x2c4
   13ebc:	vld1.64	{d16-d17}, [r0 :128]
   13ec0:	ldr	r0, [r7, #704]	; 0x2c0
   13ec4:	vld1.64	{d18-d19}, [r1 :128]
   13ec8:	adds	r0, r0, #1
   13ecc:	str	r0, [r7, #704]	; 0x2c0
   13ed0:	movw	r0, #51184	; 0xc7f0
   13ed4:	vadd.i64	q8, q9, q8
   13ed8:	adc	r2, r2, #0
   13edc:	movt	r0, #2
   13ee0:	str	r2, [r7, #708]	; 0x2c4
   13ee4:	ldr	r6, [r0]
   13ee8:	ldr	r3, [r0, #4]
   13eec:	vst1.64	{d16-d17}, [r1 :128]
   13ef0:	adds	r6, r6, #1
   13ef4:	adc	r3, r3, #0
   13ef8:	str	r6, [r0]
   13efc:	str	r3, [r0, #4]
   13f00:	ldr	r1, [r4, #8]
   13f04:	cmp	r1, #0
   13f08:	beq	147d4 <next@@Base+0x1464>
   13f0c:	ldrd	r2, [r0, #8]
   13f10:	ldr	r6, [r0, #24]
   13f14:	ldr	r9, [r0, #28]
   13f18:	adds	r2, r2, #1
   13f1c:	adc	r3, r3, #0
   13f20:	adds	r6, r6, #1
   13f24:	str	r6, [r0, #24]
   13f28:	strd	r2, [r0, #8]
   13f2c:	adc	r2, r9, #0
   13f30:	str	r2, [r0, #28]
   13f34:	sub	r0, r1, #1
   13f38:	str	r0, [r4, #8]
   13f3c:	mov	r0, #0
   13f40:	strb	r0, [sl, r8]
   13f44:	mov	r0, #8
   13f48:	bl	11f78 <malloc@plt>
   13f4c:	mov	r6, r0
   13f50:	add	r1, pc, #408	; 0x198
   13f54:	add	r0, r5, #80	; 0x50
   13f58:	mov	r2, #10
   13f5c:	vld1.64	{d16-d17}, [r1 :128]
   13f60:	vld1.64	{d18-d19}, [r0 :128]
   13f64:	mov	r1, #0
   13f68:	vadd.i64	q8, q9, q8
   13f6c:	vst1.64	{d16-d17}, [r0 :128]
   13f70:	mov	r0, sl
   13f74:	bl	11edc <strtol@plt>
   13f78:	mov	r1, r0
   13f7c:	mov	r0, r6
   13f80:	bl	12840 <init_token_int_value@@Base>
   13f84:	add	r0, r7, #720	; 0x2d0
   13f88:	b	138ec <next@@Base+0x57c>
   13f8c:	add	r0, ip, r8
   13f90:	mov	r1, #102	; 0x66
   13f94:	strh	r1, [r0]
   13f98:	ldr	r0, [r7, #744]	; 0x2e8
   13f9c:	ldr	r1, [r7, #748]	; 0x2ec
   13fa0:	adds	r0, r0, #1
   13fa4:	adc	r1, r1, #0
   13fa8:	str	r0, [r7, #744]	; 0x2e8
   13fac:	mov	r0, #4
   13fb0:	str	r1, [r7, #748]	; 0x2ec
   13fb4:	bl	11f78 <malloc@plt>
   13fb8:	mov	r6, r0
   13fbc:	bl	12a80 <init_token_if@@Base>
   13fc0:	add	r0, r7, #776	; 0x308
   13fc4:	b	138ec <next@@Base+0x57c>
   13fc8:	ldrd	r0, [r7, #168]	; 0xa8
   13fcc:	adds	r0, r0, #1
   13fd0:	adc	r1, r1, #0
   13fd4:	strd	r0, [r7, #168]	; 0xa8
   13fd8:	mov	r0, #8
   13fdc:	bl	11f78 <malloc@plt>
   13fe0:	mov	r1, #0
   13fe4:	mov	r6, r0
   13fe8:	bl	12840 <init_token_int_value@@Base>
   13fec:	add	r0, r7, #184	; 0xb8
   13ff0:	b	138ec <next@@Base+0x57c>
   13ff4:	ldr	r1, [r7, #200]	; 0xc8
   13ff8:	ldr	r3, [r7, #204]	; 0xcc
   13ffc:	adds	r1, r1, #1
   14000:	adc	r3, r3, #0
   14004:	cmp	r2, #40	; 0x28
   14008:	str	r1, [r7, #200]	; 0xc8
   1400c:	str	r3, [r7, #204]	; 0xcc
   14010:	bne	1403c <next@@Base+0xccc>
   14014:	ldrd	r0, [r7, #232]	; 0xe8
   14018:	adds	r0, r0, #1
   1401c:	adc	r1, r1, #0
   14020:	strd	r0, [r7, #232]	; 0xe8
   14024:	mov	r0, #4
   14028:	bl	11f78 <malloc@plt>
   1402c:	mov	r6, r0
   14030:	bl	128c0 <init_token_opar@@Base>
   14034:	add	r0, r7, #248	; 0xf8
   14038:	b	138ec <next@@Base+0x57c>
   1403c:	ldr	r1, [r7, #240]	; 0xf0
   14040:	ldr	r3, [r7, #244]	; 0xf4
   14044:	adds	r1, r1, #1
   14048:	adc	r3, r3, #0
   1404c:	cmp	r2, #41	; 0x29
   14050:	str	r1, [r7, #240]	; 0xf0
   14054:	str	r3, [r7, #244]	; 0xf4
   14058:	bne	14140 <next@@Base+0xdd0>
   1405c:	ldr	r0, [r7, #256]	; 0x100
   14060:	ldr	r1, [r7, #260]	; 0x104
   14064:	adds	r0, r0, #1
   14068:	adc	r1, r1, #0
   1406c:	str	r0, [r7, #256]	; 0x100
   14070:	mov	r0, #4
   14074:	str	r1, [r7, #260]	; 0x104
   14078:	bl	11f78 <malloc@plt>
   1407c:	mov	r6, r0
   14080:	bl	12900 <init_token_cpar@@Base>
   14084:	add	r0, r7, #272	; 0x110
   14088:	b	138ec <next@@Base+0x57c>
   1408c:	ldr	r0, [r7, #280]	; 0x118
   14090:	ldr	r1, [r7, #284]	; 0x11c
   14094:	adds	r0, r0, #1
   14098:	adc	r1, r1, #0
   1409c:	str	r0, [r7, #280]	; 0x118
   140a0:	mov	r0, #4
   140a4:	str	r1, [r7, #284]	; 0x11c
   140a8:	bl	11f78 <malloc@plt>
   140ac:	mov	r6, r0
   140b0:	bl	12940 <init_token_obra@@Base>
   140b4:	add	r0, r7, #296	; 0x128
   140b8:	b	138ec <next@@Base+0x57c>
   140bc:	ldr	r0, [r7, #304]	; 0x130
   140c0:	ldr	r1, [r7, #308]	; 0x134
   140c4:	adds	r0, r0, #1
   140c8:	adc	r1, r1, #0
   140cc:	str	r0, [r7, #304]	; 0x130
   140d0:	mov	r0, #4
   140d4:	str	r1, [r7, #308]	; 0x134
   140d8:	bl	11f78 <malloc@plt>
   140dc:	mov	r6, r0
   140e0:	bl	12980 <init_token_cbra@@Base>
   140e4:	add	r0, r7, #320	; 0x140
   140e8:	b	138ec <next@@Base+0x57c>
   140ec:	nop	{0}
   140f0:	andeq	r0, r0, r1
   140f4:	andeq	r0, r0, r0
   140f8:	andeq	r0, r0, r1
   140fc:	andeq	r0, r0, r0
   14100:	ldr	r0, [r7, #328]	; 0x148
   14104:	ldr	r1, [r7, #332]	; 0x14c
   14108:	adds	r0, r0, #1
   1410c:	adc	r1, r1, #0
   14110:	str	r0, [r7, #328]	; 0x148
   14114:	mov	r0, #4
   14118:	str	r1, [r7, #332]	; 0x14c
   1411c:	bl	11f78 <malloc@plt>
   14120:	mov	r6, r0
   14124:	bl	12a00 <init_token_semicolon@@Base>
   14128:	add	r0, r7, #344	; 0x158
   1412c:	b	138ec <next@@Base+0x57c>
   14130:	andeq	r0, r0, r1
   14134:	andeq	r0, r0, r0
   14138:	andeq	r0, r0, r1
   1413c:	andeq	r0, r0, r0
   14140:	ldr	r0, [r7, #408]	; 0x198
   14144:	ldr	r1, [r7, #412]	; 0x19c
   14148:	ldr	r3, [r7, #384]	; 0x180
   1414c:	ldr	r6, [r7, #388]	; 0x184
   14150:	adds	r0, r0, #1
   14154:	adc	r1, r1, #0
   14158:	adds	r5, r3, #1
   1415c:	adc	r9, r6, #0
   14160:	ldr	r6, [r7, #360]	; 0x168
   14164:	str	r1, [sp, #4]
   14168:	adds	r6, r6, #1
   1416c:	str	r6, [r7, #360]	; 0x168
   14170:	str	r5, [r7, #384]	; 0x180
   14174:	str	r0, [r7, #408]	; 0x198
   14178:	ldr	r0, [r7, #364]	; 0x16c
   1417c:	ldr	r6, [r7, #264]	; 0x108
   14180:	ldr	r5, [r7, #268]	; 0x10c
   14184:	ldr	r1, [r7, #288]	; 0x120
   14188:	ldr	r3, [r7, #292]	; 0x124
   1418c:	adc	sl, r0, #0
   14190:	ldr	r0, [r7, #336]	; 0x150
   14194:	adds	r6, r6, #1
   14198:	adc	r5, r5, #0
   1419c:	adds	r0, r0, #1
   141a0:	str	r0, [r7, #336]	; 0x150
   141a4:	str	r6, [r7, #264]	; 0x108
   141a8:	str	r5, [r7, #268]	; 0x10c
   141ac:	ldr	r0, [r7, #340]	; 0x154
   141b0:	ldr	r5, [r7, #312]	; 0x138
   141b4:	adc	r0, r0, #0
   141b8:	adds	r5, r5, #1
   141bc:	str	r5, [r7, #312]	; 0x138
   141c0:	ldr	r5, [r7, #316]	; 0x13c
   141c4:	ldr	r6, [r7, #432]	; 0x1b0
   141c8:	adc	r5, r5, #0
   141cc:	adds	r1, r1, #1
   141d0:	adc	r3, r3, #0
   141d4:	adds	r6, r6, #1
   141d8:	str	r6, [r7, #432]	; 0x1b0
   141dc:	str	r1, [r7, #288]	; 0x120
   141e0:	str	r3, [r7, #292]	; 0x124
   141e4:	str	r5, [r7, #316]	; 0x13c
   141e8:	str	r0, [r7, #340]	; 0x154
   141ec:	ldr	r0, [sp, #4]
   141f0:	str	sl, [r7, #364]	; 0x16c
   141f4:	str	r9, [r7, #388]	; 0x184
   141f8:	str	r0, [r7, #412]	; 0x19c
   141fc:	ldr	r0, [r7, #436]	; 0x1b4
   14200:	adc	r0, r0, #0
   14204:	cmp	r2, #33	; 0x21
   14208:	str	r0, [r7, #436]	; 0x1b4
   1420c:	bne	142ac <next@@Base+0xf3c>
   14210:	sub	r0, pc, #296	; 0x128
   14214:	vld1.64	{d18-d19}, [lr :128]
   14218:	ldr	r1, [r7, #452]	; 0x1c4
   1421c:	vld1.64	{d16-d17}, [r0 :128]
   14220:	mov	r0, #33	; 0x21
   14224:	strb	r0, [ip, r8]
   14228:	ldr	r0, [r7, #448]	; 0x1c0
   1422c:	vadd.i64	q8, q9, q8
   14230:	adds	r0, r0, #1
   14234:	adc	r1, r1, #0
   14238:	str	r0, [r7, #448]	; 0x1c0
   1423c:	str	r1, [r7, #452]	; 0x1c4
   14240:	vst1.64	{d16-d17}, [lr :128]
   14244:	ldr	r1, [r4, #8]
   14248:	ldr	r0, [r4]
   1424c:	add	r2, r1, #1
   14250:	str	r2, [r4, #8]
   14254:	ldrb	r5, [r0, r1]
   14258:	mov	r0, #8
   1425c:	bl	11f78 <malloc@plt>
   14260:	mov	r6, r0
   14264:	cmp	r5, #61	; 0x3d
   14268:	bne	143d0 <next@@Base+0x1060>
   1426c:	ldr	r0, [r7, #472]	; 0x1d8
   14270:	ldr	r1, [r7, #476]	; 0x1dc
   14274:	adds	r0, r0, #1
   14278:	adc	r1, r1, #0
   1427c:	str	r0, [r7, #472]	; 0x1d8
   14280:	mov	r0, #3
   14284:	str	r1, [r7, #476]	; 0x1dc
   14288:	bl	11f78 <malloc@plt>
   1428c:	mov	r1, r0
   14290:	ldrb	r0, [sp, #8]
   14294:	mov	r2, #61	; 0x3d
   14298:	strb	r2, [r1, #1]
   1429c:	add	r2, r1, #2
   142a0:	strb	r0, [r1]
   142a4:	add	r0, r7, #488	; 0x1e8
   142a8:	b	14474 <next@@Base+0x1104>
   142ac:	ldr	r0, [r7, #584]	; 0x248
   142b0:	ldr	r1, [r7, #588]	; 0x24c
   142b4:	ldr	r3, [r7, #528]	; 0x210
   142b8:	ldr	r6, [r7, #532]	; 0x214
   142bc:	ldr	r5, [r7, #456]	; 0x1c8
   142c0:	adds	r0, r0, #1
   142c4:	adc	r9, r1, #0
   142c8:	ldr	r1, [r7, #512]	; 0x200
   142cc:	adds	sl, r3, #1
   142d0:	ldr	r3, [r7, #516]	; 0x204
   142d4:	str	r0, [sp, #4]
   142d8:	ldr	r0, [r7, #460]	; 0x1cc
   142dc:	adc	r6, r6, #0
   142e0:	adds	r1, r1, #1
   142e4:	str	r1, [r7, #512]	; 0x200
   142e8:	adc	r1, r3, #0
   142ec:	adds	r3, r5, #1
   142f0:	ldr	r5, [r7, #624]	; 0x270
   142f4:	adc	r0, r0, #0
   142f8:	adds	r5, r5, #1
   142fc:	str	r5, [r7, #624]	; 0x270
   14300:	str	r0, [r7, #460]	; 0x1cc
   14304:	ldr	r0, [sp, #4]
   14308:	str	r3, [r7, #456]	; 0x1c8
   1430c:	str	r1, [r7, #516]	; 0x204
   14310:	str	sl, [r7, #528]	; 0x210
   14314:	str	r6, [r7, #532]	; 0x214
   14318:	str	r9, [r7, #588]	; 0x24c
   1431c:	str	r0, [r7, #584]	; 0x248
   14320:	ldr	r0, [r7, #628]	; 0x274
   14324:	adc	r0, r0, #0
   14328:	cmp	r2, #38	; 0x26
   1432c:	str	r0, [r7, #628]	; 0x274
   14330:	bne	14a18 <next@@Base+0x16a8>
   14334:	sub	r0, pc, #588	; 0x24c
   14338:	vld1.64	{d18-d19}, [lr :128]
   1433c:	ldr	r1, [r7, #660]	; 0x294
   14340:	mov	r5, #38	; 0x26
   14344:	vld1.64	{d16-d17}, [r0 :128]
   14348:	ldr	r0, [r7, #656]	; 0x290
   1434c:	strb	r5, [ip, r8]
   14350:	adds	r0, r0, #1
   14354:	vadd.i64	q8, q9, q8
   14358:	adc	r1, r1, #0
   1435c:	str	r0, [r7, #656]	; 0x290
   14360:	str	r1, [r7, #660]	; 0x294
   14364:	vst1.64	{d16-d17}, [lr :128]
   14368:	ldr	r1, [r4, #8]
   1436c:	ldr	r0, [r4]
   14370:	add	r2, r1, #1
   14374:	str	r2, [r4, #8]
   14378:	ldrb	r4, [r0, r1]
   1437c:	mov	r0, #8
   14380:	bl	11f78 <malloc@plt>
   14384:	cmp	r4, #38	; 0x26
   14388:	bne	149c0 <next@@Base+0x1650>
   1438c:	mov	r6, r0
   14390:	ldr	r0, [r7, #680]	; 0x2a8
   14394:	ldr	r1, [r7, #684]	; 0x2ac
   14398:	adds	r0, r0, #1
   1439c:	adc	r1, r1, #0
   143a0:	str	r0, [r7, #680]	; 0x2a8
   143a4:	mov	r0, #3
   143a8:	str	r1, [r7, #684]	; 0x2ac
   143ac:	bl	11f78 <malloc@plt>
   143b0:	mov	r1, r0
   143b4:	ldrb	r0, [sp, #8]
   143b8:	strh	r5, [r1, #1]
   143bc:	strb	r0, [r1]
   143c0:	mov	r0, r6
   143c4:	bl	12b00 <init_token_boolean_op@@Base>
   143c8:	add	r0, r7, #688	; 0x2b0
   143cc:	b	138ec <next@@Base+0x57c>
   143d0:	movw	r0, #51088	; 0xc790
   143d4:	movt	r0, #2
   143d8:	add	r1, r0, #64	; 0x40
   143dc:	sub	r0, pc, #756	; 0x2f4
   143e0:	ldr	r2, [r7, #468]	; 0x1d4
   143e4:	vld1.64	{d16-d17}, [r0 :128]
   143e8:	ldr	r0, [r7, #464]	; 0x1d0
   143ec:	vld1.64	{d18-d19}, [r1 :128]
   143f0:	adds	r0, r0, #1
   143f4:	str	r0, [r7, #464]	; 0x1d0
   143f8:	movw	r0, #51184	; 0xc7f0
   143fc:	vadd.i64	q8, q9, q8
   14400:	adc	r2, r2, #0
   14404:	movt	r0, #2
   14408:	str	r2, [r7, #468]	; 0x1d4
   1440c:	ldrd	r8, [r0]
   14410:	vst1.64	{d16-d17}, [r1 :128]
   14414:	adds	r8, r8, #1
   14418:	adc	r9, r9, #0
   1441c:	strd	r8, [r0]
   14420:	ldr	r1, [r4, #8]
   14424:	cmp	r1, #0
   14428:	beq	147d4 <next@@Base+0x1464>
   1442c:	ldrd	r2, [r0, #8]
   14430:	ldrd	r8, [r0, #24]
   14434:	adds	r2, r2, #1
   14438:	adc	r3, r3, #0
   1443c:	adds	r5, r8, #1
   14440:	str	r5, [r0, #24]
   14444:	strd	r2, [r0, #8]
   14448:	adc	r2, r9, #0
   1444c:	str	r2, [r0, #28]
   14450:	sub	r0, r1, #1
   14454:	str	r0, [r4, #8]
   14458:	mov	r0, #2
   1445c:	bl	11f78 <malloc@plt>
   14460:	mov	r1, r0
   14464:	ldrb	r0, [sp, #8]
   14468:	mov	r2, r1
   1446c:	strb	r0, [r2], #1
   14470:	add	r0, r7, #480	; 0x1e0
   14474:	mov	r3, #0
   14478:	strb	r3, [r2]
   1447c:	ldrd	r2, [r0]
   14480:	adds	r2, r2, #1
   14484:	adc	r3, r3, #0
   14488:	strd	r2, [r0]
   1448c:	mov	r0, r6
   14490:	bl	12b00 <init_token_boolean_op@@Base>
   14494:	add	r0, r7, #496	; 0x1f0
   14498:	b	138ec <next@@Base+0x57c>
   1449c:	ldr	r0, [r7, #432]	; 0x1b0
   144a0:	ldr	r1, [r7, #436]	; 0x1b4
   144a4:	ldr	r3, [r7, #456]	; 0x1c8
   144a8:	ldr	r6, [r7, #460]	; 0x1cc
   144ac:	adds	r0, r0, #1
   144b0:	adc	r1, r1, #0
   144b4:	adds	r3, r3, #1
   144b8:	str	r0, [r7, #432]	; 0x1b0
   144bc:	adc	r0, r6, #0
   144c0:	cmp	r2, #60	; 0x3c
   144c4:	str	r1, [r7, #436]	; 0x1b4
   144c8:	str	r3, [r7, #456]	; 0x1c8
   144cc:	str	r0, [r7, #460]	; 0x1cc
   144d0:	bne	144dc <next@@Base+0x116c>
   144d4:	add	r1, r7, #504	; 0x1f8
   144d8:	b	14500 <next@@Base+0x1190>
   144dc:	ldr	r0, [r7, #512]	; 0x200
   144e0:	ldr	r1, [r7, #516]	; 0x204
   144e4:	adds	r0, r0, #1
   144e8:	adc	r1, r1, #0
   144ec:	cmp	r2, #62	; 0x3e
   144f0:	str	r0, [r7, #512]	; 0x200
   144f4:	str	r1, [r7, #516]	; 0x204
   144f8:	bne	1465c <next@@Base+0x12ec>
   144fc:	add	r1, r7, #520	; 0x208
   14500:	ldm	r1, {r0, r3}
   14504:	movw	sl, #51088	; 0xc790
   14508:	movt	sl, #2
   1450c:	adds	r0, r0, #1
   14510:	adc	r3, r3, #0
   14514:	stm	r1, {r0, r3}
   14518:	sub	r0, pc, #1008	; 0x3f0
   1451c:	vld1.64	{d18-d19}, [lr :128]
   14520:	strb	r9, [ip, r8]
   14524:	vld1.64	{d16-d17}, [r0 :128]
   14528:	vadd.i64	q8, q9, q8
   1452c:	vst1.64	{d16-d17}, [lr :128]
   14530:	ldr	r1, [r4, #8]
   14534:	ldr	r0, [r4]
   14538:	add	r2, r1, #1
   1453c:	str	r2, [r4, #8]
   14540:	ldrb	r5, [r0, r1]
   14544:	mov	r0, #8
   14548:	bl	11f78 <malloc@plt>
   1454c:	mov	r6, r0
   14550:	cmp	r5, #61	; 0x3d
   14554:	bne	14598 <next@@Base+0x1228>
   14558:	ldr	r0, [r7, #544]	; 0x220
   1455c:	ldr	r1, [r7, #548]	; 0x224
   14560:	adds	r0, r0, #1
   14564:	adc	r1, r1, #0
   14568:	str	r0, [r7, #544]	; 0x220
   1456c:	mov	r0, #3
   14570:	str	r1, [r7, #548]	; 0x224
   14574:	bl	11f78 <malloc@plt>
   14578:	mov	r1, r0
   1457c:	ldrb	r0, [sp, #8]
   14580:	mov	r2, #61	; 0x3d
   14584:	strb	r2, [r1, #1]
   14588:	add	r2, r1, #2
   1458c:	strb	r0, [r1]
   14590:	add	r0, r7, #560	; 0x230
   14594:	b	14634 <next@@Base+0x12c4>
   14598:	add	r0, pc, #1008	; 0x3f0
   1459c:	add	r1, sl, #64	; 0x40
   145a0:	ldr	r2, [r7, #540]	; 0x21c
   145a4:	vld1.64	{d16-d17}, [r0 :128]
   145a8:	ldr	r0, [r7, #536]	; 0x218
   145ac:	vld1.64	{d18-d19}, [r1 :128]
   145b0:	adds	r0, r0, #1
   145b4:	str	r0, [r7, #536]	; 0x218
   145b8:	movw	r0, #51184	; 0xc7f0
   145bc:	vadd.i64	q8, q9, q8
   145c0:	adc	r2, r2, #0
   145c4:	movt	r0, #2
   145c8:	str	r2, [r7, #540]	; 0x21c
   145cc:	ldrd	r8, [r0]
   145d0:	vst1.64	{d16-d17}, [r1 :128]
   145d4:	adds	r8, r8, #1
   145d8:	adc	r9, r9, #0
   145dc:	strd	r8, [r0]
   145e0:	ldr	r1, [r4, #8]
   145e4:	cmp	r1, #0
   145e8:	beq	147d4 <next@@Base+0x1464>
   145ec:	ldrd	r2, [r0, #8]
   145f0:	ldrd	r8, [r0, #24]
   145f4:	adds	r2, r2, #1
   145f8:	adc	r3, r3, #0
   145fc:	adds	r5, r8, #1
   14600:	str	r5, [r0, #24]
   14604:	strd	r2, [r0, #8]
   14608:	adc	r2, r9, #0
   1460c:	str	r2, [r0, #28]
   14610:	sub	r0, r1, #1
   14614:	str	r0, [r4, #8]
   14618:	mov	r0, #2
   1461c:	bl	11f78 <malloc@plt>
   14620:	mov	r1, r0
   14624:	ldrb	r0, [sp, #8]
   14628:	mov	r2, r1
   1462c:	strb	r0, [r2], #1
   14630:	add	r0, r7, #552	; 0x228
   14634:	mov	r3, #0
   14638:	strb	r3, [r2]
   1463c:	ldrd	r2, [r0]
   14640:	adds	r2, r2, #1
   14644:	adc	r3, r3, #0
   14648:	strd	r2, [r0]
   1464c:	mov	r0, r6
   14650:	bl	12b00 <init_token_boolean_op@@Base>
   14654:	add	r0, r7, #568	; 0x238
   14658:	b	138ec <next@@Base+0x57c>
   1465c:	ldr	r0, [r7, #528]	; 0x210
   14660:	ldr	r1, [r7, #532]	; 0x214
   14664:	adds	r0, r0, #1
   14668:	adc	r1, r1, #0
   1466c:	cmp	r2, #61	; 0x3d
   14670:	str	r0, [r7, #528]	; 0x210
   14674:	str	r1, [r7, #532]	; 0x214
   14678:	bne	14718 <next@@Base+0x13a8>
   1467c:	add	r0, pc, #780	; 0x30c
   14680:	vld1.64	{d18-d19}, [lr :128]
   14684:	ldr	r1, [r7, #580]	; 0x244
   14688:	mov	r5, #61	; 0x3d
   1468c:	vld1.64	{d16-d17}, [r0 :128]
   14690:	ldr	r0, [r7, #576]	; 0x240
   14694:	strb	r5, [ip, r8]
   14698:	adds	r0, r0, #1
   1469c:	vadd.i64	q8, q9, q8
   146a0:	adc	r1, r1, #0
   146a4:	str	r0, [r7, #576]	; 0x240
   146a8:	str	r1, [r7, #580]	; 0x244
   146ac:	vst1.64	{d16-d17}, [lr :128]
   146b0:	ldr	r1, [r4, #8]
   146b4:	ldr	r0, [r4]
   146b8:	add	r2, r1, #1
   146bc:	str	r2, [r4, #8]
   146c0:	ldrb	r4, [r0, r1]
   146c4:	mov	r0, #8
   146c8:	bl	11f78 <malloc@plt>
   146cc:	cmp	r4, #61	; 0x3d
   146d0:	bne	149e0 <next@@Base+0x1670>
   146d4:	mov	r6, r0
   146d8:	ldr	r0, [r7, #600]	; 0x258
   146dc:	ldr	r1, [r7, #604]	; 0x25c
   146e0:	adds	r0, r0, #1
   146e4:	adc	r1, r1, #0
   146e8:	str	r0, [r7, #600]	; 0x258
   146ec:	mov	r0, #3
   146f0:	str	r1, [r7, #604]	; 0x25c
   146f4:	bl	11f78 <malloc@plt>
   146f8:	mov	r1, r0
   146fc:	ldrb	r0, [sp, #8]
   14700:	strh	r5, [r1, #1]
   14704:	strb	r0, [r1]
   14708:	mov	r0, r6
   1470c:	bl	12b00 <init_token_boolean_op@@Base>
   14710:	add	r0, r7, #608	; 0x260
   14714:	b	138ec <next@@Base+0x57c>
   14718:	ldr	r0, [r7, #584]	; 0x248
   1471c:	ldr	r1, [r7, #588]	; 0x24c
   14720:	adds	r0, r0, #1
   14724:	adc	r1, r1, #0
   14728:	cmp	r2, #124	; 0x7c
   1472c:	str	r0, [r7, #584]	; 0x248
   14730:	str	r1, [r7, #588]	; 0x24c
   14734:	bne	14a00 <next@@Base+0x1690>
   14738:	add	r0, pc, #816	; 0x330
   1473c:	vld1.64	{d18-d19}, [lr :128]
   14740:	ldr	r1, [r7, #620]	; 0x26c
   14744:	mov	r5, #124	; 0x7c
   14748:	vld1.64	{d16-d17}, [r0 :128]
   1474c:	ldr	r0, [r7, #616]	; 0x268
   14750:	strb	r5, [ip, r8]
   14754:	adds	r0, r0, #1
   14758:	vadd.i64	q8, q9, q8
   1475c:	adc	r1, r1, #0
   14760:	str	r0, [r7, #616]	; 0x268
   14764:	str	r1, [r7, #620]	; 0x26c
   14768:	vst1.64	{d16-d17}, [lr :128]
   1476c:	ldr	r1, [r4, #8]
   14770:	ldr	r0, [r4]
   14774:	add	r2, r1, #1
   14778:	str	r2, [r4, #8]
   1477c:	ldrb	r4, [r0, r1]
   14780:	mov	r0, #8
   14784:	bl	11f78 <malloc@plt>
   14788:	cmp	r4, #124	; 0x7c
   1478c:	bne	14a50 <next@@Base+0x16e0>
   14790:	mov	r6, r0
   14794:	ldr	r0, [r7, #640]	; 0x280
   14798:	ldr	r1, [r7, #644]	; 0x284
   1479c:	adds	r0, r0, #1
   147a0:	adc	r1, r1, #0
   147a4:	str	r0, [r7, #640]	; 0x280
   147a8:	mov	r0, #3
   147ac:	str	r1, [r7, #644]	; 0x284
   147b0:	bl	11f78 <malloc@plt>
   147b4:	mov	r1, r0
   147b8:	ldrb	r0, [sp, #8]
   147bc:	strh	r5, [r1, #1]
   147c0:	strb	r0, [r1]
   147c4:	mov	r0, r6
   147c8:	bl	12b00 <init_token_boolean_op@@Base>
   147cc:	add	r0, r7, #648	; 0x288
   147d0:	b	138ec <next@@Base+0x57c>
   147d4:	ldrd	r2, [r0, #16]
   147d8:	mov	r1, #32
   147dc:	adds	r2, r2, #1
   147e0:	adc	r3, r3, #0
   147e4:	strd	r2, [r0, #16]
   147e8:	movw	r0, #49384	; 0xc0e8
   147ec:	mov	r2, #1
   147f0:	movt	r0, #2
   147f4:	ldr	r3, [r0]
   147f8:	movw	r0, #45216	; 0xb0a0
   147fc:	movt	r0, #1
   14800:	bl	11f54 <fwrite@plt>
   14804:	mov	r0, #1
   14808:	bl	11fb4 <exit@plt>
   1480c:	ldr	r0, [r7, #784]	; 0x310
   14810:	ldr	r1, [r7, #788]	; 0x314
   14814:	adds	r0, r0, #1
   14818:	adc	r1, r1, #0
   1481c:	str	r0, [r7, #784]	; 0x310
   14820:	mov	r0, #1
   14824:	str	r1, [r7, #788]	; 0x314
   14828:	bl	11fb4 <exit@plt>
   1482c:	ldr	r0, [r7, #800]	; 0x320
   14830:	ldr	r1, [r7, #804]	; 0x324
   14834:	adds	r0, r0, #1
   14838:	adc	r1, r1, #0
   1483c:	str	r0, [r7, #800]	; 0x320
   14840:	mov	r0, #1
   14844:	str	r1, [r7, #804]	; 0x324
   14848:	bl	11fb4 <exit@plt>
   1484c:	ldr	r0, [r7, #816]	; 0x330
   14850:	ldr	r1, [r7, #820]	; 0x334
   14854:	adds	r0, r0, #1
   14858:	adc	r1, r1, #0
   1485c:	str	r0, [r7, #816]	; 0x330
   14860:	mov	r0, #1
   14864:	str	r1, [r7, #820]	; 0x334
   14868:	bl	11fb4 <exit@plt>
   1486c:	ldr	r0, [r7, #840]	; 0x348
   14870:	ldr	r1, [r7, #844]	; 0x34c
   14874:	adds	r0, r0, #1
   14878:	adc	r1, r1, #0
   1487c:	str	r0, [r7, #840]	; 0x348
   14880:	mov	r0, #1
   14884:	str	r1, [r7, #844]	; 0x34c
   14888:	bl	11fb4 <exit@plt>
   1488c:	ldr	r0, [r7, #856]	; 0x358
   14890:	ldr	r1, [r7, #860]	; 0x35c
   14894:	adds	r0, r0, #1
   14898:	adc	r1, r1, #0
   1489c:	str	r0, [r7, #856]	; 0x358
   148a0:	mov	r0, #1
   148a4:	str	r1, [r7, #860]	; 0x35c
   148a8:	bl	11fb4 <exit@plt>
   148ac:	ldr	r0, [r7, #872]	; 0x368
   148b0:	ldr	r1, [r7, #876]	; 0x36c
   148b4:	adds	r0, r0, #1
   148b8:	adc	r1, r1, #0
   148bc:	str	r0, [r7, #872]	; 0x368
   148c0:	mov	r0, #1
   148c4:	str	r1, [r7, #876]	; 0x36c
   148c8:	bl	11fb4 <exit@plt>
   148cc:	ldr	r0, [r7, #888]	; 0x378
   148d0:	ldr	r1, [r7, #892]	; 0x37c
   148d4:	adds	r0, r0, #1
   148d8:	adc	r1, r1, #0
   148dc:	str	r0, [r7, #888]	; 0x378
   148e0:	mov	r0, #1
   148e4:	str	r1, [r7, #892]	; 0x37c
   148e8:	bl	11fb4 <exit@plt>
   148ec:	ldr	r0, [r7, #904]	; 0x388
   148f0:	ldr	r1, [r7, #908]	; 0x38c
   148f4:	adds	r0, r0, #1
   148f8:	adc	r1, r1, #0
   148fc:	str	r0, [r7, #904]	; 0x388
   14900:	mov	r0, #1
   14904:	str	r1, [r7, #908]	; 0x38c
   14908:	bl	11fb4 <exit@plt>
   1490c:	ldr	r0, [r7, #728]	; 0x2d8
   14910:	ldr	r1, [r7, #732]	; 0x2dc
   14914:	adds	r0, r0, #1
   14918:	adc	r1, r1, #0
   1491c:	str	r0, [r7, #728]	; 0x2d8
   14920:	mov	r0, #1
   14924:	str	r1, [r7, #732]	; 0x2dc
   14928:	bl	11fb4 <exit@plt>
   1492c:	ldr	r0, [r7, #928]	; 0x3a0
   14930:	ldr	r1, [r7, #932]	; 0x3a4
   14934:	adds	r0, r0, #1
   14938:	adc	r1, r1, #0
   1493c:	str	r0, [r7, #928]	; 0x3a0
   14940:	mov	r0, #1
   14944:	str	r1, [r7, #932]	; 0x3a4
   14948:	bl	11fb4 <exit@plt>
   1494c:	ldr	r0, [r7, #944]	; 0x3b0
   14950:	ldr	r1, [r7, #948]	; 0x3b4
   14954:	adds	r0, r0, #1
   14958:	adc	r1, r1, #0
   1495c:	str	r0, [r7, #944]	; 0x3b0
   14960:	mov	r0, #1
   14964:	str	r1, [r7, #948]	; 0x3b4
   14968:	bl	11fb4 <exit@plt>
   1496c:	ldr	r0, [r7, #960]	; 0x3c0
   14970:	ldr	r1, [r7, #964]	; 0x3c4
   14974:	adds	r0, r0, #1
   14978:	adc	r1, r1, #0
   1497c:	str	r0, [r7, #960]	; 0x3c0
   14980:	mov	r0, #1
   14984:	str	r1, [r7, #964]	; 0x3c4
   14988:	bl	11fb4 <exit@plt>
   1498c:	nop	{0}
   14990:	andeq	r0, r0, r1
   14994:	andeq	r0, r0, r0
   14998:	andeq	r0, r0, r1
   1499c:	andeq	r0, r0, r0
   149a0:	ldr	r0, [r7, #752]	; 0x2f0
   149a4:	ldr	r1, [r7, #756]	; 0x2f4
   149a8:	adds	r0, r0, #1
   149ac:	adc	r1, r1, #0
   149b0:	str	r0, [r7, #752]	; 0x2f0
   149b4:	mov	r0, #1
   149b8:	str	r1, [r7, #756]	; 0x2f4
   149bc:	bl	11fb4 <exit@plt>
   149c0:	ldr	r0, [r7, #672]	; 0x2a0
   149c4:	ldr	r1, [r7, #676]	; 0x2a4
   149c8:	adds	r0, r0, #1
   149cc:	adc	r1, r1, #0
   149d0:	str	r0, [r7, #672]	; 0x2a0
   149d4:	mov	r0, #1
   149d8:	str	r1, [r7, #676]	; 0x2a4
   149dc:	bl	11fb4 <exit@plt>
   149e0:	ldr	r0, [r7, #592]	; 0x250
   149e4:	ldr	r1, [r7, #596]	; 0x254
   149e8:	adds	r0, r0, #1
   149ec:	adc	r1, r1, #0
   149f0:	str	r0, [r7, #592]	; 0x250
   149f4:	mov	r0, #1
   149f8:	str	r1, [r7, #596]	; 0x254
   149fc:	bl	11fb4 <exit@plt>
   14a00:	ldr	r0, [r7, #624]	; 0x270
   14a04:	ldr	r1, [r7, #628]	; 0x274
   14a08:	adds	r0, r0, #1
   14a0c:	adc	r1, r1, #0
   14a10:	str	r0, [r7, #624]	; 0x270
   14a14:	str	r1, [r7, #628]	; 0x274
   14a18:	ldr	r0, [r7, #664]	; 0x298
   14a1c:	ldr	r1, [r7, #668]	; 0x29c
   14a20:	adds	r0, r0, #1
   14a24:	str	r0, [r7, #664]	; 0x298
   14a28:	movw	r0, #49384	; 0xc0e8
   14a2c:	adc	r1, r1, #0
   14a30:	movt	r0, #2
   14a34:	str	r1, [r7, #668]	; 0x29c
   14a38:	movw	r1, #45249	; 0xb0c1
   14a3c:	movt	r1, #1
   14a40:	ldr	r0, [r0]
   14a44:	bl	11fe4 <fprintf@plt>
   14a48:	mov	r0, #1
   14a4c:	bl	11fb4 <exit@plt>
   14a50:	ldr	r0, [r7, #632]	; 0x278
   14a54:	ldr	r1, [r7, #636]	; 0x27c
   14a58:	adds	r0, r0, #1
   14a5c:	adc	r1, r1, #0
   14a60:	str	r0, [r7, #632]	; 0x278
   14a64:	mov	r0, #1
   14a68:	str	r1, [r7, #636]	; 0x27c
   14a6c:	bl	11fb4 <exit@plt>
   14a70:	andeq	r0, r0, r1
   14a74:	andeq	r0, r0, r0
   14a78:	andeq	r0, r0, r1
   14a7c:	andeq	r0, r0, r0
   14a80:	push	{r4, r5, r6, lr}
   14a84:	sub	sp, sp, #8
   14a88:	movw	r4, #8093	; 0x1f9d
   14a8c:	movw	r0, #45289	; 0xb0e9
   14a90:	movw	r1, #43909	; 0xab85
   14a94:	movt	r4, #48445	; 0xbd3d
   14a98:	movt	r0, #1
   14a9c:	movt	r1, #1
   14aa0:	mov	r2, r4
   14aa4:	bl	17a38 <__generate_code_for_binary_boolean_expression@@Base+0x468>
   14aa8:	movw	r1, #45369	; 0xb139
   14aac:	movw	r2, #7454	; 0x1d1e
   14ab0:	mov	r0, #0
   14ab4:	mov	r3, #0
   14ab8:	str	r4, [sp]
   14abc:	movt	r1, #1
   14ac0:	movt	r2, #14536	; 0x38c8
   14ac4:	bl	18158 <__generate_code_for_binary_boolean_expression@@Base+0xb88>
   14ac8:	movw	r5, #51088	; 0xc790
   14acc:	mov	r0, #2
   14ad0:	movt	r5, #2
   14ad4:	mov	r1, r5
   14ad8:	bl	18a0c <__generate_code_for_binary_boolean_expression@@Base+0x143c>
   14adc:	movw	r1, #45380	; 0xb144
   14ae0:	movw	r2, #57188	; 0xdf64
   14ae4:	mov	r0, #1
   14ae8:	mov	r3, #0
   14aec:	str	r4, [sp]
   14af0:	movt	r1, #1
   14af4:	movt	r2, #33405	; 0x827d
   14af8:	bl	18158 <__generate_code_for_binary_boolean_expression@@Base+0xb88>
   14afc:	movw	r6, #51184	; 0xc7f0
   14b00:	mov	r0, #5
   14b04:	movt	r6, #2
   14b08:	add	r1, r6, #32
   14b0c:	bl	18a0c <__generate_code_for_binary_boolean_expression@@Base+0x143c>
   14b10:	movw	r1, #45394	; 0xb152
   14b14:	movw	r2, #45984	; 0xb3a0
   14b18:	mov	r0, #2
   14b1c:	mov	r3, #0
   14b20:	str	r4, [sp]
   14b24:	movt	r1, #1
   14b28:	movt	r2, #27745	; 0x6c61
   14b2c:	bl	18158 <__generate_code_for_binary_boolean_expression@@Base+0xb88>
   14b30:	add	r1, r5, #16
   14b34:	mov	r0, #2
   14b38:	bl	18a0c <__generate_code_for_binary_boolean_expression@@Base+0x143c>
   14b3c:	movw	r1, #45410	; 0xb162
   14b40:	movw	r2, #30688	; 0x77e0
   14b44:	mov	r0, #3
   14b48:	mov	r3, #0
   14b4c:	str	r4, [sp]
   14b50:	movt	r1, #1
   14b54:	movt	r2, #34799	; 0x87ef
   14b58:	bl	18158 <__generate_code_for_binary_boolean_expression@@Base+0xb88>
   14b5c:	add	r1, r5, #32
   14b60:	mov	r0, #2
   14b64:	bl	18a0c <__generate_code_for_binary_boolean_expression@@Base+0x143c>
   14b68:	movw	r1, #45420	; 0xb16c
   14b6c:	movw	r2, #20620	; 0x508c
   14b70:	mov	r0, #4
   14b74:	mov	r3, #0
   14b78:	str	r4, [sp]
   14b7c:	movt	r1, #1
   14b80:	movt	r2, #46520	; 0xb5b8
   14b84:	bl	18158 <__generate_code_for_binary_boolean_expression@@Base+0xb88>
   14b88:	add	r1, r5, #48	; 0x30
   14b8c:	mov	r0, #2
   14b90:	bl	18a0c <__generate_code_for_binary_boolean_expression@@Base+0x143c>
   14b94:	movw	r1, #45429	; 0xb175
   14b98:	movw	r2, #36533	; 0x8eb5
   14b9c:	mov	r0, #5
   14ba0:	mov	r3, #0
   14ba4:	str	r4, [sp]
   14ba8:	movt	r1, #1
   14bac:	movt	r2, #31104	; 0x7980
   14bb0:	bl	18158 <__generate_code_for_binary_boolean_expression@@Base+0xb88>
   14bb4:	mov	r0, #4
   14bb8:	mov	r1, r6
   14bbc:	bl	18a0c <__generate_code_for_binary_boolean_expression@@Base+0x143c>
   14bc0:	movw	r1, #45445	; 0xb185
   14bc4:	movw	r2, #31251	; 0x7a13
   14bc8:	mov	r0, #6
   14bcc:	mov	r3, #0
   14bd0:	str	r4, [sp]
   14bd4:	movt	r1, #1
   14bd8:	movt	r2, #11805	; 0x2e1d
   14bdc:	bl	18158 <__generate_code_for_binary_boolean_expression@@Base+0xb88>
   14be0:	add	r1, r5, #64	; 0x40
   14be4:	mov	r0, #2
   14be8:	bl	18a0c <__generate_code_for_binary_boolean_expression@@Base+0x143c>
   14bec:	movw	r1, #45464	; 0xb198
   14bf0:	movw	r2, #27639	; 0x6bf7
   14bf4:	mov	r0, #7
   14bf8:	mov	r3, #0
   14bfc:	str	r4, [sp]
   14c00:	movt	r1, #1
   14c04:	movt	r2, #25257	; 0x62a9
   14c08:	bl	18158 <__generate_code_for_binary_boolean_expression@@Base+0xb88>
   14c0c:	movw	r1, #50080	; 0xc3a0
   14c10:	mov	r0, #126	; 0x7e
   14c14:	movt	r1, #2
   14c18:	bl	18a0c <__generate_code_for_binary_boolean_expression@@Base+0x143c>
   14c1c:	movw	r1, #45469	; 0xb19d
   14c20:	movw	r2, #8207	; 0x200f
   14c24:	mov	r0, #8
   14c28:	mov	r3, #0
   14c2c:	str	r4, [sp]
   14c30:	movt	r1, #1
   14c34:	movt	r2, #16044	; 0x3eac
   14c38:	bl	18158 <__generate_code_for_binary_boolean_expression@@Base+0xb88>
   14c3c:	add	r1, r5, #80	; 0x50
   14c40:	mov	r0, #2
   14c44:	bl	18a0c <__generate_code_for_binary_boolean_expression@@Base+0x143c>
   14c48:	bl	19194 <__generate_code_for_binary_boolean_expression@@Base+0x1bc4>
   14c4c:	add	sp, sp, #8
   14c50:	pop	{r4, r5, r6, lr}
   14c54:	b	19f00 <__generate_code_for_binary_boolean_expression@@Base+0x2930>
   14c58:	push	{r4, lr}
   14c5c:	vpush	{d8-d9}
   14c60:	bl	14a80 <next@@Base+0x1710>
   14c64:	movw	r0, #51184	; 0xc7f0
   14c68:	vmov.i32	q4, #0	; 0x00000000
   14c6c:	movw	r4, #51088	; 0xc790
   14c70:	mov	r2, #1008	; 0x3f0
   14c74:	movt	r0, #2
   14c78:	movt	r4, #2
   14c7c:	add	r1, r0, #32
   14c80:	vst1.64	{d8-d9}, [r1 :128]
   14c84:	add	r1, r0, #48	; 0x30
   14c88:	vst1.64	{d8-d9}, [r1 :128]
   14c8c:	mov	r1, #0
   14c90:	str	r1, [r0, #64]	; 0x40
   14c94:	str	r1, [r0, #68]	; 0x44
   14c98:	add	r1, r4, #48	; 0x30
   14c9c:	vst1.64	{d8-d9}, [r0 :128]!
   14ca0:	vst1.64	{d8-d9}, [r1 :128]
   14ca4:	add	r1, r4, #32
   14ca8:	vst1.64	{d8-d9}, [r0 :128]
   14cac:	mov	r0, #80	; 0x50
   14cb0:	vst1.64	{d8-d9}, [r1 :128]
   14cb4:	add	r1, r4, #16
   14cb8:	vst1.64	{d8-d9}, [r1 :128]
   14cbc:	add	r1, r4, #64	; 0x40
   14cc0:	vst1.64	{d8-d9}, [r1 :128]
   14cc4:	vst1.64	{d8-d9}, [r4 :128], r0
   14cc8:	movw	r0, #50080	; 0xc3a0
   14ccc:	mov	r1, #0
   14cd0:	movt	r0, #2
   14cd4:	bl	12014 <memset@plt>
   14cd8:	vst1.64	{d8-d9}, [r4 :128]
   14cdc:	vpop	{d8-d9}
   14ce0:	pop	{r4, pc}
   14ce4:	movw	r0, #19072	; 0x4a80
   14ce8:	movw	r1, #19544	; 0x4c58
   14cec:	movt	r0, #1
   14cf0:	movt	r1, #1
   14cf4:	b	1a3b4 <__gcov_flush@@Base+0xb8>
	...

00014d00 <init_ast_base@@Base>:
   14d00:	movw	ip, #51632	; 0xc9b0
   14d04:	add	r3, pc, #36	; 0x24
   14d08:	movt	ip, #2
   14d0c:	vld1.64	{d16-d17}, [r3 :128]
   14d10:	vld1.64	{d18-d19}, [ip :128]
   14d14:	vadd.i64	q8, q9, q8
   14d18:	vst1.64	{d16-d17}, [ip :128]
   14d1c:	stm	r0, {r1, r2}
   14d20:	bx	lr
   14d24:	nop	{0}
   14d28:	nop	{0}
   14d2c:	nop	{0}
   14d30:	andeq	r0, r0, r1
   14d34:	andeq	r0, r0, r0
   14d38:	andeq	r0, r0, r1
   14d3c:	andeq	r0, r0, r0

00014d40 <init_ast_base_single@@Base>:
   14d40:	movw	r2, #51632	; 0xc9b0
   14d44:	add	r3, pc, #52	; 0x34
   14d48:	movt	r2, #2
   14d4c:	vld1.64	{d16-d17}, [r3 :128]
   14d50:	vld1.64	{d18-d19}, [r2 :128]
   14d54:	vadd.i64	q9, q9, q8
   14d58:	vst1.64	{d18-d19}, [r2 :128]!
   14d5c:	vld1.64	{d18-d19}, [r2 :128]
   14d60:	vadd.i64	q8, q9, q8
   14d64:	vst1.64	{d16-d17}, [r2 :128]
   14d68:	mov	r2, #0
   14d6c:	stm	r0, {r1, r2}
   14d70:	bx	lr
   14d74:	nop	{0}
   14d78:	nop	{0}
   14d7c:	nop	{0}
   14d80:	andeq	r0, r0, r1
   14d84:	andeq	r0, r0, r0
   14d88:	andeq	r0, r0, r1
   14d8c:	andeq	r0, r0, r0

00014d90 <init_node_id@@Base>:
   14d90:	push	{fp, lr}
   14d94:	mov	fp, sp
   14d98:	movw	r3, #51632	; 0xc9b0
   14d9c:	mov	ip, #32
   14da0:	movt	r3, #2
   14da4:	mov	lr, r3
   14da8:	vld1.64	{d16-d17}, [lr :128], ip
   14dac:	add	r2, pc, #60	; 0x3c
   14db0:	vld1.64	{d18-d19}, [r2 :128]
   14db4:	vld1.64	{d20-d21}, [lr :128]
   14db8:	mov	r2, #0
   14dbc:	vadd.i64	q10, q10, q9
   14dc0:	vadd.i64	q8, q8, q9
   14dc4:	vst1.64	{d20-d21}, [lr :128]
   14dc8:	vst1.64	{d16-d17}, [r3 :128]!
   14dcc:	vld1.64	{d16-d17}, [r3 :128]
   14dd0:	vadd.i64	q8, q8, q9
   14dd4:	vst1.64	{d16-d17}, [r3 :128]
   14dd8:	str	r2, [r0]
   14ddc:	str	r2, [r0, #4]
   14de0:	str	r1, [r0, #8]
   14de4:	pop	{fp, pc}
   14de8:	nop	{0}
   14dec:	nop	{0}
   14df0:	andeq	r0, r0, r1
   14df4:	andeq	r0, r0, r0
   14df8:	andeq	r0, r0, r1
   14dfc:	andeq	r0, r0, r0

00014e00 <init_node_int@@Base>:
   14e00:	push	{fp, lr}
   14e04:	mov	fp, sp
   14e08:	movw	r3, #51632	; 0xc9b0
   14e0c:	mov	ip, #48	; 0x30
   14e10:	movt	r3, #2
   14e14:	mov	lr, r3
   14e18:	vld1.64	{d16-d17}, [lr :128], ip
   14e1c:	add	r2, pc, #60	; 0x3c
   14e20:	vld1.64	{d18-d19}, [r2 :128]
   14e24:	vld1.64	{d20-d21}, [lr :128]
   14e28:	mov	r2, #0
   14e2c:	vadd.i64	q10, q10, q9
   14e30:	vadd.i64	q8, q8, q9
   14e34:	vst1.64	{d20-d21}, [lr :128]
   14e38:	vst1.64	{d16-d17}, [r3 :128]!
   14e3c:	vld1.64	{d16-d17}, [r3 :128]
   14e40:	vadd.i64	q8, q8, q9
   14e44:	vst1.64	{d16-d17}, [r3 :128]
   14e48:	mov	r3, #1
   14e4c:	str	r3, [r0]
   14e50:	str	r2, [r0, #4]
   14e54:	str	r1, [r0, #8]
   14e58:	pop	{fp, pc}
   14e5c:	nop	{0}
   14e60:	andeq	r0, r0, r1
   14e64:	andeq	r0, r0, r0
   14e68:	andeq	r0, r0, r1
   14e6c:	andeq	r0, r0, r0

00014e70 <init_node_function@@Base>:
   14e70:	push	{r4, sl, fp, lr}
   14e74:	add	fp, sp, #8
   14e78:	movw	r4, #51632	; 0xc9b0
   14e7c:	mov	ip, #64	; 0x40
   14e80:	movt	r4, #2
   14e84:	mov	lr, r4
   14e88:	vld1.64	{d16-d17}, [lr :128], ip
   14e8c:	add	r3, pc, #60	; 0x3c
   14e90:	vld1.64	{d18-d19}, [r3 :128]
   14e94:	vld1.64	{d20-d21}, [lr :128]
   14e98:	mov	r3, #0
   14e9c:	vadd.i64	q10, q10, q9
   14ea0:	vadd.i64	q8, q8, q9
   14ea4:	vst1.64	{d20-d21}, [lr :128]
   14ea8:	vst1.64	{d16-d17}, [r4 :128]!
   14eac:	vld1.64	{d16-d17}, [r4 :128]
   14eb0:	vadd.i64	q8, q8, q9
   14eb4:	vst1.64	{d16-d17}, [r4 :128]
   14eb8:	mov	r4, #2
   14ebc:	str	r4, [r0]
   14ec0:	str	r3, [r0, #4]
   14ec4:	str	r1, [r0, #8]
   14ec8:	str	r2, [r0, #12]
   14ecc:	pop	{r4, sl, fp, pc}
   14ed0:	andeq	r0, r0, r1
   14ed4:	andeq	r0, r0, r0
   14ed8:	andeq	r0, r0, r1
   14edc:	andeq	r0, r0, r0

00014ee0 <init_node_return@@Base>:
   14ee0:	push	{fp, lr}
   14ee4:	mov	fp, sp
   14ee8:	movw	r3, #51632	; 0xc9b0
   14eec:	mov	ip, #80	; 0x50
   14ef0:	movt	r3, #2
   14ef4:	mov	lr, r3
   14ef8:	vld1.64	{d16-d17}, [lr :128], ip
   14efc:	add	r2, pc, #60	; 0x3c
   14f00:	vld1.64	{d18-d19}, [r2 :128]
   14f04:	vld1.64	{d20-d21}, [lr :128]
   14f08:	mov	r2, #0
   14f0c:	vadd.i64	q10, q10, q9
   14f10:	vadd.i64	q8, q8, q9
   14f14:	vst1.64	{d20-d21}, [lr :128]
   14f18:	vst1.64	{d16-d17}, [r3 :128]!
   14f1c:	vld1.64	{d16-d17}, [r3 :128]
   14f20:	vadd.i64	q8, q8, q9
   14f24:	vst1.64	{d16-d17}, [r3 :128]
   14f28:	mov	r3, #3
   14f2c:	str	r3, [r0]
   14f30:	str	r2, [r0, #4]
   14f34:	str	r1, [r0, #8]
   14f38:	pop	{fp, pc}
   14f3c:	nop	{0}
   14f40:	andeq	r0, r0, r1
   14f44:	andeq	r0, r0, r0
   14f48:	andeq	r0, r0, r1
   14f4c:	andeq	r0, r0, r0

00014f50 <init_node_if@@Base>:
   14f50:	push	{r4, r5, fp, lr}
   14f54:	add	fp, sp, #8
   14f58:	movw	lr, #51632	; 0xc9b0
   14f5c:	mov	ip, #96	; 0x60
   14f60:	movt	lr, #2
   14f64:	mov	r5, lr
   14f68:	vld1.64	{d16-d17}, [r5 :128], ip
   14f6c:	add	r4, pc, #60	; 0x3c
   14f70:	vld1.64	{d18-d19}, [r4 :128]
   14f74:	vld1.64	{d20-d21}, [r5 :128]
   14f78:	mov	r4, #4
   14f7c:	vadd.i64	q10, q10, q9
   14f80:	vadd.i64	q8, q8, q9
   14f84:	vst1.64	{d20-d21}, [r5 :128]
   14f88:	vst1.64	{d16-d17}, [lr :128]!
   14f8c:	mov	r5, #0
   14f90:	vld1.64	{d16-d17}, [lr :128]
   14f94:	vadd.i64	q8, q8, q9
   14f98:	vst1.64	{d16-d17}, [lr :128]
   14f9c:	stmia	r0!, {r4, r5}
   14fa0:	stm	r0, {r1, r2, r3}
   14fa4:	pop	{r4, r5, fp, pc}
   14fa8:	nop	{0}
   14fac:	nop	{0}
   14fb0:	andeq	r0, r0, r1
   14fb4:	andeq	r0, r0, r0
   14fb8:	andeq	r0, r0, r1
   14fbc:	andeq	r0, r0, r0

00014fc0 <init_node_boolean_operator@@Base>:
   14fc0:	push	{r4, sl, fp, lr}
   14fc4:	add	fp, sp, #8
   14fc8:	movw	ip, #51632	; 0xc9b0
   14fcc:	movw	lr, #51744	; 0xca20
   14fd0:	add	r4, pc, #72	; 0x48
   14fd4:	movt	ip, #2
   14fd8:	movt	lr, #2
   14fdc:	vld1.64	{d16-d17}, [r4 :128]
   14fe0:	mov	r4, #5
   14fe4:	vld1.64	{d20-d21}, [ip :128]
   14fe8:	vld1.64	{d18-d19}, [lr :128]
   14fec:	vadd.i64	q10, q10, q8
   14ff0:	vadd.i64	q9, q9, q8
   14ff4:	vst1.64	{d20-d21}, [ip :128]!
   14ff8:	vst1.64	{d18-d19}, [lr :128]
   14ffc:	vld1.64	{d18-d19}, [ip :128]
   15000:	vadd.i64	q8, q9, q8
   15004:	vst1.64	{d16-d17}, [ip :128]
   15008:	mov	ip, #0
   1500c:	stm	r0, {r4, ip}
   15010:	str	r2, [r0, #8]
   15014:	str	r3, [r0, #12]
   15018:	str	r1, [r0, #16]
   1501c:	pop	{r4, sl, fp, pc}
   15020:	andeq	r0, r0, r1
   15024:	andeq	r0, r0, r0
   15028:	andeq	r0, r0, r1
   1502c:	andeq	r0, r0, r0

00015030 <free_node@@Base>:
   15030:	push	{r4, r5, r6, sl, fp, lr}
   15034:	add	fp, sp, #16
   15038:	movw	r5, #51264	; 0xc840
   1503c:	mov	r4, r0
   15040:	movt	r5, #2
   15044:	ldrd	r0, [r5]
   15048:	adds	r0, r0, #1
   1504c:	adc	r1, r1, #0
   15050:	strd	r0, [r5]
   15054:	ldr	r0, [r4]
   15058:	cmp	r0, #5
   1505c:	bhi	153d8 <free_node@@Base+0x3a8>
   15060:	add	r1, pc, #0
   15064:	ldr	pc, [r1, r0, lsl #2]
   15068:	andeq	r5, r1, r0, lsl #1
   1506c:	andeq	r5, r1, ip, ror r1
   15070:	andeq	r5, r1, r8, lsr #2
   15074:	ldrdeq	r5, [r1], -r0
   15078:	ldrdeq	r5, [r1], -r4
   1507c:	andeq	r5, r1, r4, lsr #4
   15080:	movw	r6, #51744	; 0xca20
   15084:	ldrd	r0, [r5, #16]
   15088:	movt	r6, #2
   1508c:	ldrd	r2, [r6, #16]
   15090:	adds	r0, r0, #1
   15094:	str	r0, [r5, #16]
   15098:	adc	r0, r1, #0
   1509c:	str	r0, [r5, #20]
   150a0:	adds	r2, r2, #1
   150a4:	adc	r3, r3, #0
   150a8:	strd	r2, [r6, #16]
   150ac:	ldr	r0, [r4, #4]
   150b0:	cmp	r0, #0
   150b4:	beq	152bc <free_node@@Base+0x28c>
   150b8:	ldrd	r2, [r6, #24]
   150bc:	adds	r2, r2, #1
   150c0:	adc	r3, r3, #0
   150c4:	strd	r2, [r6, #24]
   150c8:	bl	15030 <free_node@@Base>
   150cc:	add	r0, r6, #40	; 0x28
   150d0:	b	152c0 <free_node@@Base+0x290>
   150d4:	movw	r6, #51952	; 0xcaf0
   150d8:	ldrd	r0, [r5, #48]	; 0x30
   150dc:	movt	r6, #2
   150e0:	ldrd	r2, [r6]
   150e4:	adds	r0, r0, #1
   150e8:	str	r0, [r5, #48]	; 0x30
   150ec:	adc	r0, r1, #0
   150f0:	str	r0, [r5, #52]	; 0x34
   150f4:	adds	r2, r2, #1
   150f8:	adc	r3, r3, #0
   150fc:	strd	r2, [r6]
   15100:	ldr	r0, [r4, #4]
   15104:	cmp	r0, #0
   15108:	beq	15278 <free_node@@Base+0x248>
   1510c:	ldrd	r2, [r6, #8]
   15110:	adds	r2, r2, #1
   15114:	adc	r3, r3, #0
   15118:	strd	r2, [r6, #8]
   1511c:	bl	15030 <free_node@@Base>
   15120:	add	r0, r6, #24
   15124:	b	1527c <free_node@@Base+0x24c>
   15128:	movw	r6, #51856	; 0xca90
   1512c:	ldrd	r0, [r5, #32]
   15130:	movt	r6, #2
   15134:	ldrd	r2, [r6]
   15138:	adds	r0, r0, #1
   1513c:	str	r0, [r5, #32]
   15140:	adc	r0, r1, #0
   15144:	str	r0, [r5, #36]	; 0x24
   15148:	adds	r2, r2, #1
   1514c:	adc	r3, r3, #0
   15150:	strd	r2, [r6]
   15154:	ldr	r0, [r4, #4]
   15158:	cmp	r0, #0
   1515c:	beq	152e8 <free_node@@Base+0x2b8>
   15160:	ldrd	r2, [r6, #8]
   15164:	adds	r2, r2, #1
   15168:	adc	r3, r3, #0
   1516c:	strd	r2, [r6, #8]
   15170:	bl	15030 <free_node@@Base>
   15174:	add	r0, r6, #24
   15178:	b	152ec <free_node@@Base+0x2bc>
   1517c:	movw	r6, #51744	; 0xca20
   15180:	ldrd	r0, [r5, #24]
   15184:	movt	r6, #2
   15188:	ldrd	r2, [r6, #64]	; 0x40
   1518c:	adds	r0, r0, #1
   15190:	str	r0, [r5, #24]
   15194:	adc	r0, r1, #0
   15198:	str	r0, [r5, #28]
   1519c:	adds	r2, r2, #1
   151a0:	adc	r3, r3, #0
   151a4:	strd	r2, [r6, #64]	; 0x40
   151a8:	ldr	r0, [r4, #4]
   151ac:	cmp	r0, #0
   151b0:	beq	1531c <free_node@@Base+0x2ec>
   151b4:	ldrd	r2, [r6, #72]	; 0x48
   151b8:	adds	r2, r2, #1
   151bc:	adc	r3, r3, #0
   151c0:	strd	r2, [r6, #72]	; 0x48
   151c4:	bl	15030 <free_node@@Base>
   151c8:	add	r0, r6, #88	; 0x58
   151cc:	b	15320 <free_node@@Base+0x2f0>
   151d0:	movw	r6, #51856	; 0xca90
   151d4:	ldrd	r0, [r5, #40]	; 0x28
   151d8:	movt	r6, #2
   151dc:	ldrd	r2, [r6, #48]	; 0x30
   151e0:	adds	r0, r0, #1
   151e4:	str	r0, [r5, #40]	; 0x28
   151e8:	adc	r0, r1, #0
   151ec:	str	r0, [r5, #44]	; 0x2c
   151f0:	adds	r2, r2, #1
   151f4:	adc	r3, r3, #0
   151f8:	strd	r2, [r6, #48]	; 0x30
   151fc:	ldr	r0, [r4, #4]
   15200:	cmp	r0, #0
   15204:	beq	15348 <free_node@@Base+0x318>
   15208:	ldrd	r2, [r6, #56]	; 0x38
   1520c:	adds	r2, r2, #1
   15210:	adc	r3, r3, #0
   15214:	strd	r2, [r6, #56]	; 0x38
   15218:	bl	15030 <free_node@@Base>
   1521c:	add	r0, r6, #72	; 0x48
   15220:	b	1534c <free_node@@Base+0x31c>
   15224:	movw	r6, #51952	; 0xcaf0
   15228:	ldrd	r0, [r5, #56]	; 0x38
   1522c:	movt	r6, #2
   15230:	ldrd	r2, [r6, #48]	; 0x30
   15234:	adds	r0, r0, #1
   15238:	str	r0, [r5, #56]	; 0x38
   1523c:	adc	r0, r1, #0
   15240:	str	r0, [r5, #60]	; 0x3c
   15244:	adds	r2, r2, #1
   15248:	adc	r3, r3, #0
   1524c:	strd	r2, [r6, #48]	; 0x30
   15250:	ldr	r0, [r4, #4]
   15254:	cmp	r0, #0
   15258:	beq	15374 <free_node@@Base+0x344>
   1525c:	ldrd	r2, [r6, #56]	; 0x38
   15260:	adds	r2, r2, #1
   15264:	adc	r3, r3, #0
   15268:	strd	r2, [r6, #56]	; 0x38
   1526c:	bl	15030 <free_node@@Base>
   15270:	add	r0, r6, #72	; 0x48
   15274:	b	15378 <free_node@@Base+0x348>
   15278:	add	r0, r6, #16
   1527c:	ldrd	r2, [r0]
   15280:	adds	r2, r2, #1
   15284:	adc	r3, r3, #0
   15288:	strd	r2, [r0]
   1528c:	ldrd	r0, [r6, #32]
   15290:	adds	r0, r0, #1
   15294:	adc	r1, r1, #0
   15298:	strd	r0, [r6, #32]
   1529c:	ldr	r0, [r4, #8]
   152a0:	bl	15030 <free_node@@Base>
   152a4:	ldr	r0, [r4, #12]
   152a8:	bl	15030 <free_node@@Base>
   152ac:	ldr	r0, [r4, #16]
   152b0:	bl	15030 <free_node@@Base>
   152b4:	add	r6, r5, #96	; 0x60
   152b8:	b	153ac <free_node@@Base+0x37c>
   152bc:	add	r0, r6, #32
   152c0:	ldrd	r2, [r0]
   152c4:	adds	r2, r2, #1
   152c8:	adc	r3, r3, #0
   152cc:	strd	r2, [r0]
   152d0:	ldrd	r0, [r6, #48]	; 0x30
   152d4:	adds	r0, r0, #1
   152d8:	adc	r1, r1, #0
   152dc:	strd	r0, [r6, #48]	; 0x30
   152e0:	add	r6, r5, #64	; 0x40
   152e4:	b	153ac <free_node@@Base+0x37c>
   152e8:	add	r0, r6, #16
   152ec:	ldrd	r2, [r0]
   152f0:	adds	r2, r2, #1
   152f4:	adc	r3, r3, #0
   152f8:	strd	r2, [r0]
   152fc:	ldrd	r0, [r6, #32]
   15300:	adds	r0, r0, #1
   15304:	adc	r1, r1, #0
   15308:	strd	r0, [r6, #32]
   1530c:	ldr	r0, [r4, #8]
   15310:	bl	11f00 <free@plt>
   15314:	add	r6, r5, #80	; 0x50
   15318:	b	153ac <free_node@@Base+0x37c>
   1531c:	add	r0, r6, #80	; 0x50
   15320:	ldrd	r2, [r0]
   15324:	adds	r2, r2, #1
   15328:	adc	r3, r3, #0
   1532c:	strd	r2, [r0]
   15330:	ldrd	r0, [r6, #96]	; 0x60
   15334:	adds	r0, r0, #1
   15338:	adc	r1, r1, #0
   1533c:	strd	r0, [r6, #96]	; 0x60
   15340:	add	r6, r5, #72	; 0x48
   15344:	b	153ac <free_node@@Base+0x37c>
   15348:	add	r0, r6, #64	; 0x40
   1534c:	ldrd	r2, [r0]
   15350:	adds	r2, r2, #1
   15354:	adc	r3, r3, #0
   15358:	strd	r2, [r0]
   1535c:	ldrd	r0, [r6, #80]	; 0x50
   15360:	adds	r0, r0, #1
   15364:	adc	r1, r1, #0
   15368:	strd	r0, [r6, #80]	; 0x50
   1536c:	add	r6, r5, #88	; 0x58
   15370:	b	153ac <free_node@@Base+0x37c>
   15374:	add	r0, r6, #64	; 0x40
   15378:	ldrd	r2, [r0]
   1537c:	adds	r2, r2, #1
   15380:	adc	r3, r3, #0
   15384:	strd	r2, [r0]
   15388:	ldrd	r0, [r6, #80]	; 0x50
   1538c:	adds	r0, r0, #1
   15390:	adc	r1, r1, #0
   15394:	strd	r0, [r6, #80]	; 0x50
   15398:	ldr	r0, [r4, #8]
   1539c:	bl	15030 <free_node@@Base>
   153a0:	ldr	r0, [r4, #12]
   153a4:	bl	15030 <free_node@@Base>
   153a8:	add	r6, r5, #104	; 0x68
   153ac:	mov	r0, r4
   153b0:	bl	11f00 <free@plt>
   153b4:	ldrd	r0, [r6]
   153b8:	adds	r0, r0, #1
   153bc:	adc	r1, r1, #0
   153c0:	strd	r0, [r6]
   153c4:	ldrd	r0, [r5, #112]	; 0x70
   153c8:	adds	r0, r0, #1
   153cc:	adc	r1, r1, #0
   153d0:	strd	r0, [r5, #112]	; 0x70
   153d4:	pop	{r4, r5, r6, sl, fp, pc}
   153d8:	ldrd	r0, [r5, #8]
   153dc:	mov	r2, #1
   153e0:	adds	r0, r0, #1
   153e4:	adc	r1, r1, #0
   153e8:	strd	r0, [r5, #8]
   153ec:	movw	r0, #49384	; 0xc0e8
   153f0:	mov	r1, #31
   153f4:	movt	r0, #2
   153f8:	ldr	r3, [r0]
   153fc:	movw	r0, #45474	; 0xb1a2
   15400:	movt	r0, #1
   15404:	bl	11f54 <fwrite@plt>
   15408:	mov	r0, #1
   1540c:	bl	11fb4 <exit@plt>

00015410 <free_node_id@@Base>:
   15410:	push	{r4, r5, fp, lr}
   15414:	add	fp, sp, #8
   15418:	movw	r5, #51744	; 0xca20
   1541c:	mov	r4, r0
   15420:	movt	r5, #2
   15424:	ldrd	r0, [r5, #16]
   15428:	adds	r0, r0, #1
   1542c:	adc	r1, r1, #0
   15430:	strd	r0, [r5, #16]
   15434:	ldr	r0, [r4, #4]
   15438:	cmp	r0, #0
   1543c:	beq	1545c <free_node_id@@Base+0x4c>
   15440:	ldrd	r2, [r5, #24]
   15444:	adds	r2, r2, #1
   15448:	adc	r3, r3, #0
   1544c:	strd	r2, [r5, #24]
   15450:	bl	15030 <free_node@@Base>
   15454:	add	r0, r5, #40	; 0x28
   15458:	b	15460 <free_node_id@@Base+0x50>
   1545c:	add	r0, r5, #32
   15460:	ldrd	r2, [r0]
   15464:	adds	r2, r2, #1
   15468:	adc	r3, r3, #0
   1546c:	strd	r2, [r0]
   15470:	ldrd	r0, [r5, #48]	; 0x30
   15474:	adds	r0, r0, #1
   15478:	adc	r1, r1, #0
   1547c:	strd	r0, [r5, #48]	; 0x30
   15480:	mov	r0, r4
   15484:	pop	{r4, r5, fp, lr}
   15488:	b	11f00 <free@plt>

0001548c <free_node_int@@Base>:
   1548c:	push	{r4, r5, fp, lr}
   15490:	add	fp, sp, #8
   15494:	movw	r5, #51744	; 0xca20
   15498:	mov	r4, r0
   1549c:	movt	r5, #2
   154a0:	ldrd	r0, [r5, #64]	; 0x40
   154a4:	adds	r0, r0, #1
   154a8:	adc	r1, r1, #0
   154ac:	strd	r0, [r5, #64]	; 0x40
   154b0:	ldr	r0, [r4, #4]
   154b4:	cmp	r0, #0
   154b8:	beq	154d8 <free_node_int@@Base+0x4c>
   154bc:	ldrd	r2, [r5, #72]	; 0x48
   154c0:	adds	r2, r2, #1
   154c4:	adc	r3, r3, #0
   154c8:	strd	r2, [r5, #72]	; 0x48
   154cc:	bl	15030 <free_node@@Base>
   154d0:	add	r0, r5, #88	; 0x58
   154d4:	b	154dc <free_node_int@@Base+0x50>
   154d8:	add	r0, r5, #80	; 0x50
   154dc:	ldrd	r2, [r0]
   154e0:	adds	r2, r2, #1
   154e4:	adc	r3, r3, #0
   154e8:	strd	r2, [r0]
   154ec:	ldrd	r0, [r5, #96]	; 0x60
   154f0:	adds	r0, r0, #1
   154f4:	adc	r1, r1, #0
   154f8:	strd	r0, [r5, #96]	; 0x60
   154fc:	mov	r0, r4
   15500:	pop	{r4, r5, fp, lr}
   15504:	b	11f00 <free@plt>

00015508 <free_node_function@@Base>:
   15508:	push	{r4, r5, fp, lr}
   1550c:	add	fp, sp, #8
   15510:	movw	r5, #51856	; 0xca90
   15514:	mov	r4, r0
   15518:	movt	r5, #2
   1551c:	ldrd	r0, [r5]
   15520:	adds	r0, r0, #1
   15524:	adc	r1, r1, #0
   15528:	strd	r0, [r5]
   1552c:	ldr	r0, [r4, #4]
   15530:	cmp	r0, #0
   15534:	beq	15554 <free_node_function@@Base+0x4c>
   15538:	ldrd	r2, [r5, #8]
   1553c:	adds	r2, r2, #1
   15540:	adc	r3, r3, #0
   15544:	strd	r2, [r5, #8]
   15548:	bl	15030 <free_node@@Base>
   1554c:	add	r0, r5, #24
   15550:	b	15558 <free_node_function@@Base+0x50>
   15554:	add	r0, r5, #16
   15558:	ldrd	r2, [r0]
   1555c:	adds	r2, r2, #1
   15560:	adc	r3, r3, #0
   15564:	strd	r2, [r0]
   15568:	ldrd	r0, [r5, #32]
   1556c:	adds	r0, r0, #1
   15570:	adc	r1, r1, #0
   15574:	strd	r0, [r5, #32]
   15578:	ldr	r0, [r4, #8]
   1557c:	bl	11f00 <free@plt>
   15580:	mov	r0, r4
   15584:	pop	{r4, r5, fp, lr}
   15588:	b	11f00 <free@plt>

0001558c <free_node_return@@Base>:
   1558c:	push	{r4, r5, fp, lr}
   15590:	add	fp, sp, #8
   15594:	movw	r5, #51856	; 0xca90
   15598:	mov	r4, r0
   1559c:	movt	r5, #2
   155a0:	ldrd	r0, [r5, #48]	; 0x30
   155a4:	adds	r0, r0, #1
   155a8:	adc	r1, r1, #0
   155ac:	strd	r0, [r5, #48]	; 0x30
   155b0:	ldr	r0, [r4, #4]
   155b4:	cmp	r0, #0
   155b8:	beq	155d8 <free_node_return@@Base+0x4c>
   155bc:	ldrd	r2, [r5, #56]	; 0x38
   155c0:	adds	r2, r2, #1
   155c4:	adc	r3, r3, #0
   155c8:	strd	r2, [r5, #56]	; 0x38
   155cc:	bl	15030 <free_node@@Base>
   155d0:	add	r0, r5, #72	; 0x48
   155d4:	b	155dc <free_node_return@@Base+0x50>
   155d8:	add	r0, r5, #64	; 0x40
   155dc:	ldrd	r2, [r0]
   155e0:	adds	r2, r2, #1
   155e4:	adc	r3, r3, #0
   155e8:	strd	r2, [r0]
   155ec:	ldrd	r0, [r5, #80]	; 0x50
   155f0:	adds	r0, r0, #1
   155f4:	adc	r1, r1, #0
   155f8:	strd	r0, [r5, #80]	; 0x50
   155fc:	mov	r0, r4
   15600:	pop	{r4, r5, fp, lr}
   15604:	b	11f00 <free@plt>

00015608 <free_node_if@@Base>:
   15608:	push	{r4, r5, fp, lr}
   1560c:	add	fp, sp, #8
   15610:	movw	r5, #51952	; 0xcaf0
   15614:	mov	r4, r0
   15618:	movt	r5, #2
   1561c:	ldrd	r0, [r5]
   15620:	adds	r0, r0, #1
   15624:	adc	r1, r1, #0
   15628:	strd	r0, [r5]
   1562c:	ldr	r0, [r4, #4]
   15630:	cmp	r0, #0
   15634:	beq	15654 <free_node_if@@Base+0x4c>
   15638:	ldrd	r2, [r5, #8]
   1563c:	adds	r2, r2, #1
   15640:	adc	r3, r3, #0
   15644:	strd	r2, [r5, #8]
   15648:	bl	15030 <free_node@@Base>
   1564c:	add	r0, r5, #24
   15650:	b	15658 <free_node_if@@Base+0x50>
   15654:	add	r0, r5, #16
   15658:	ldrd	r2, [r0]
   1565c:	adds	r2, r2, #1
   15660:	adc	r3, r3, #0
   15664:	strd	r2, [r0]
   15668:	ldrd	r0, [r5, #32]
   1566c:	adds	r0, r0, #1
   15670:	adc	r1, r1, #0
   15674:	strd	r0, [r5, #32]
   15678:	ldr	r0, [r4, #8]
   1567c:	bl	15030 <free_node@@Base>
   15680:	ldr	r0, [r4, #12]
   15684:	bl	15030 <free_node@@Base>
   15688:	ldr	r0, [r4, #16]
   1568c:	bl	15030 <free_node@@Base>
   15690:	mov	r0, r4
   15694:	pop	{r4, r5, fp, lr}
   15698:	b	11f00 <free@plt>

0001569c <free_node_boolean_operator@@Base>:
   1569c:	push	{r4, r5, fp, lr}
   156a0:	add	fp, sp, #8
   156a4:	movw	r5, #51952	; 0xcaf0
   156a8:	mov	r4, r0
   156ac:	movt	r5, #2
   156b0:	ldrd	r0, [r5, #48]	; 0x30
   156b4:	adds	r0, r0, #1
   156b8:	adc	r1, r1, #0
   156bc:	strd	r0, [r5, #48]	; 0x30
   156c0:	ldr	r0, [r4, #4]
   156c4:	cmp	r0, #0
   156c8:	beq	156e8 <free_node_boolean_operator@@Base+0x4c>
   156cc:	ldrd	r2, [r5, #56]	; 0x38
   156d0:	adds	r2, r2, #1
   156d4:	adc	r3, r3, #0
   156d8:	strd	r2, [r5, #56]	; 0x38
   156dc:	bl	15030 <free_node@@Base>
   156e0:	add	r0, r5, #72	; 0x48
   156e4:	b	156ec <free_node_boolean_operator@@Base+0x50>
   156e8:	add	r0, r5, #64	; 0x40
   156ec:	ldrd	r2, [r0]
   156f0:	adds	r2, r2, #1
   156f4:	adc	r3, r3, #0
   156f8:	strd	r2, [r0]
   156fc:	ldrd	r0, [r5, #80]	; 0x50
   15700:	adds	r0, r0, #1
   15704:	adc	r1, r1, #0
   15708:	strd	r0, [r5, #80]	; 0x50
   1570c:	ldr	r0, [r4, #8]
   15710:	bl	15030 <free_node@@Base>
   15714:	ldr	r0, [r4, #12]
   15718:	bl	15030 <free_node@@Base>
   1571c:	mov	r0, r4
   15720:	pop	{r4, r5, fp, lr}
   15724:	b	11f00 <free@plt>

00015728 <get_boolean_op_value@@Base>:
   15728:	push	{r4, r5, r6, sl, fp, lr}
   1572c:	add	fp, sp, #16
   15730:	movw	r6, #51392	; 0xc8c0
   15734:	mov	r1, #2
   15738:	movt	r6, #2
   1573c:	ldrd	r2, [r6]
   15740:	adds	r2, r2, #1
   15744:	adc	r3, r3, #0
   15748:	strd	r2, [r6]
   1574c:	ldr	r4, [r0, #4]
   15750:	mov	r0, r4
   15754:	bl	12050 <strnlen@plt>
   15758:	cmp	r0, #2
   1575c:	bne	15888 <get_boolean_op_value@@Base+0x160>
   15760:	ldrd	r0, [r6, #8]
   15764:	mov	r2, #2
   15768:	adds	r0, r0, #1
   1576c:	adc	r1, r1, #0
   15770:	strd	r0, [r6, #8]
   15774:	movw	r1, #45506	; 0xb1c2
   15778:	mov	r0, r4
   1577c:	movt	r1, #1
   15780:	bl	120b0 <strncmp@plt>
   15784:	cmp	r0, #0
   15788:	beq	158d0 <get_boolean_op_value@@Base+0x1a8>
   1578c:	ldrd	r0, [r6, #32]
   15790:	mov	r2, #2
   15794:	adds	r0, r0, #1
   15798:	adc	r1, r1, #0
   1579c:	strd	r0, [r6, #32]
   157a0:	movw	r1, #45509	; 0xb1c5
   157a4:	mov	r0, r4
   157a8:	movt	r1, #1
   157ac:	bl	120b0 <strncmp@plt>
   157b0:	cmp	r0, #0
   157b4:	beq	15924 <get_boolean_op_value@@Base+0x1fc>
   157b8:	ldrd	r0, [r6, #56]	; 0x38
   157bc:	mov	r2, #2
   157c0:	mov	r5, #2
   157c4:	adds	r0, r0, #1
   157c8:	adc	r1, r1, #0
   157cc:	strd	r0, [r6, #56]	; 0x38
   157d0:	movw	r1, #45512	; 0xb1c8
   157d4:	mov	r0, r4
   157d8:	movt	r1, #1
   157dc:	bl	120b0 <strncmp@plt>
   157e0:	cmp	r0, #0
   157e4:	beq	15940 <get_boolean_op_value@@Base+0x218>
   157e8:	ldrd	r0, [r6, #80]	; 0x50
   157ec:	mov	r2, #2
   157f0:	adds	r0, r0, #1
   157f4:	adc	r1, r1, #0
   157f8:	strd	r0, [r6, #80]	; 0x50
   157fc:	movw	r1, #45515	; 0xb1cb
   15800:	mov	r0, r4
   15804:	movt	r1, #1
   15808:	bl	120b0 <strncmp@plt>
   1580c:	cmp	r0, #0
   15810:	beq	15958 <get_boolean_op_value@@Base+0x230>
   15814:	ldrd	r0, [r6, #104]	; 0x68
   15818:	mov	r2, #2
   1581c:	adds	r0, r0, #1
   15820:	adc	r1, r1, #0
   15824:	strd	r0, [r6, #104]	; 0x68
   15828:	movw	r1, #45518	; 0xb1ce
   1582c:	mov	r0, r4
   15830:	movt	r1, #1
   15834:	bl	120b0 <strncmp@plt>
   15838:	cmp	r0, #0
   1583c:	beq	15974 <get_boolean_op_value@@Base+0x24c>
   15840:	ldrd	r0, [r6, #128]	; 0x80
   15844:	mov	r2, #2
   15848:	adds	r0, r0, #1
   1584c:	adc	r1, r1, #0
   15850:	strd	r0, [r6, #128]	; 0x80
   15854:	movw	r1, #45521	; 0xb1d1
   15858:	mov	r0, r4
   1585c:	movt	r1, #1
   15860:	bl	120b0 <strncmp@plt>
   15864:	cmp	r0, #0
   15868:	bne	159e8 <get_boolean_op_value@@Base+0x2c0>
   1586c:	ldrd	r0, [r6, #144]	; 0x90
   15870:	mov	r5, #5
   15874:	adds	r0, r0, #1
   15878:	adc	r1, r1, #0
   1587c:	strd	r0, [r6, #144]	; 0x90
   15880:	add	r0, r6, #160	; 0xa0
   15884:	b	1598c <get_boolean_op_value@@Base+0x264>
   15888:	ldrd	r0, [r6, #16]
   1588c:	adds	r0, r0, #1
   15890:	adc	r1, r1, #0
   15894:	strd	r0, [r6, #16]
   15898:	ldrb	r0, [r4]
   1589c:	cmp	r0, #62	; 0x3e
   158a0:	beq	15908 <get_boolean_op_value@@Base+0x1e0>
   158a4:	cmp	r0, #60	; 0x3c
   158a8:	beq	158ec <get_boolean_op_value@@Base+0x1c4>
   158ac:	cmp	r0, #33	; 0x21
   158b0:	bne	159b4 <get_boolean_op_value@@Base+0x28c>
   158b4:	ldrd	r0, [r6, #176]	; 0xb0
   158b8:	mov	r5, #8
   158bc:	adds	r0, r0, #1
   158c0:	adc	r1, r1, #0
   158c4:	strd	r0, [r6, #176]	; 0xb0
   158c8:	add	r0, r6, #200	; 0xc8
   158cc:	b	1598c <get_boolean_op_value@@Base+0x264>
   158d0:	ldrd	r0, [r6, #24]
   158d4:	mov	r5, #0
   158d8:	adds	r0, r0, #1
   158dc:	adc	r1, r1, #0
   158e0:	strd	r0, [r6, #24]
   158e4:	add	r0, r6, #40	; 0x28
   158e8:	b	1598c <get_boolean_op_value@@Base+0x264>
   158ec:	ldrd	r0, [r6, #184]	; 0xb8
   158f0:	mov	r5, #6
   158f4:	adds	r0, r0, #1
   158f8:	adc	r1, r1, #0
   158fc:	strd	r0, [r6, #184]	; 0xb8
   15900:	add	r0, r6, #208	; 0xd0
   15904:	b	1598c <get_boolean_op_value@@Base+0x264>
   15908:	ldrd	r0, [r6, #192]	; 0xc0
   1590c:	mov	r5, #7
   15910:	adds	r0, r0, #1
   15914:	adc	r1, r1, #0
   15918:	strd	r0, [r6, #192]	; 0xc0
   1591c:	add	r0, r6, #216	; 0xd8
   15920:	b	1598c <get_boolean_op_value@@Base+0x264>
   15924:	ldrd	r0, [r6, #48]	; 0x30
   15928:	mov	r5, #1
   1592c:	adds	r0, r0, #1
   15930:	adc	r1, r1, #0
   15934:	strd	r0, [r6, #48]	; 0x30
   15938:	add	r0, r6, #64	; 0x40
   1593c:	b	1598c <get_boolean_op_value@@Base+0x264>
   15940:	ldrd	r0, [r6, #72]	; 0x48
   15944:	adds	r0, r0, #1
   15948:	adc	r1, r1, #0
   1594c:	strd	r0, [r6, #72]	; 0x48
   15950:	add	r0, r6, #88	; 0x58
   15954:	b	1598c <get_boolean_op_value@@Base+0x264>
   15958:	ldrd	r0, [r6, #96]	; 0x60
   1595c:	mov	r5, #3
   15960:	adds	r0, r0, #1
   15964:	adc	r1, r1, #0
   15968:	strd	r0, [r6, #96]	; 0x60
   1596c:	add	r0, r6, #112	; 0x70
   15970:	b	1598c <get_boolean_op_value@@Base+0x264>
   15974:	ldrd	r0, [r6, #120]	; 0x78
   15978:	mov	r5, #4
   1597c:	adds	r0, r0, #1
   15980:	adc	r1, r1, #0
   15984:	strd	r0, [r6, #120]	; 0x78
   15988:	add	r0, r6, #136	; 0x88
   1598c:	ldrd	r2, [r0]
   15990:	adds	r2, r2, #1
   15994:	adc	r3, r3, #0
   15998:	strd	r2, [r0]
   1599c:	ldrd	r0, [r6, #224]	; 0xe0
   159a0:	adds	r0, r0, #1
   159a4:	adc	r1, r1, #0
   159a8:	strd	r0, [r6, #224]	; 0xe0
   159ac:	mov	r0, r5
   159b0:	pop	{r4, r5, r6, sl, fp, pc}
   159b4:	ldrd	r0, [r6, #168]	; 0xa8
   159b8:	adds	r0, r0, #1
   159bc:	adc	r1, r1, #0
   159c0:	strd	r0, [r6, #168]	; 0xa8
   159c4:	movw	r0, #49384	; 0xc0e8
   159c8:	movw	r1, #45524	; 0xb1d4
   159cc:	mov	r2, r4
   159d0:	movt	r0, #2
   159d4:	movt	r1, #1
   159d8:	ldr	r0, [r0]
   159dc:	bl	11fe4 <fprintf@plt>
   159e0:	mov	r0, #1
   159e4:	bl	11fb4 <exit@plt>
   159e8:	ldrd	r0, [r6, #152]	; 0x98
   159ec:	adds	r0, r0, #1
   159f0:	adc	r1, r1, #0
   159f4:	strd	r0, [r6, #152]	; 0x98
   159f8:	b	159c4 <get_boolean_op_value@@Base+0x29c>
   159fc:	push	{r4, r5, r6, lr}
   15a00:	sub	sp, sp, #8
   15a04:	movw	r0, #45578	; 0xb20a
   15a08:	movw	r1, #43909	; 0xab85
   15a0c:	movw	r2, #31856	; 0x7c70
   15a10:	movt	r0, #1
   15a14:	movt	r1, #1
   15a18:	movt	r2, #15338	; 0x3bea
   15a1c:	bl	17a38 <__generate_code_for_binary_boolean_expression@@Base+0x468>
   15a20:	movw	r0, #46256	; 0xb4b0
   15a24:	movw	r6, #45936	; 0xb370
   15a28:	mov	r5, #0
   15a2c:	movt	r0, #1
   15a30:	movt	r6, #1
   15a34:	add	r4, r0, #4
   15a38:	mov	r3, r6
   15a3c:	ldr	r0, [r3, r5]!
   15a40:	ldr	r1, [r3, #16]
   15a44:	str	r1, [sp]
   15a48:	ldmib	r3, {r1, r2}
   15a4c:	ldrb	r3, [r3, #12]
   15a50:	bl	18158 <__generate_code_for_binary_boolean_expression@@Base+0xb88>
   15a54:	ldrd	r0, [r4, #-4]
   15a58:	bl	18a0c <__generate_code_for_binary_boolean_expression@@Base+0x143c>
   15a5c:	add	r5, r5, #20
   15a60:	add	r4, r4, #8
   15a64:	cmp	r5, #320	; 0x140
   15a68:	bne	15a38 <get_boolean_op_value@@Base+0x310>
   15a6c:	bl	19194 <__generate_code_for_binary_boolean_expression@@Base+0x1bc4>
   15a70:	add	sp, sp, #8
   15a74:	pop	{r4, r5, r6, lr}
   15a78:	b	19f00 <__generate_code_for_binary_boolean_expression@@Base+0x2930>
   15a7c:	push	{fp, lr}
   15a80:	bl	159fc <get_boolean_op_value@@Base+0x2d4>
   15a84:	movw	r1, #51632	; 0xc9b0
   15a88:	vmov.i32	q8, #0	; 0x00000000
   15a8c:	movw	r2, #51264	; 0xc840
   15a90:	movw	r3, #51744	; 0xca20
   15a94:	mov	ip, #0
   15a98:	movt	r1, #2
   15a9c:	movt	r2, #2
   15aa0:	movt	r3, #2
   15aa4:	add	r0, r1, #80	; 0x50
   15aa8:	str	ip, [r2, #112]	; 0x70
   15aac:	str	ip, [r3, #48]	; 0x30
   15ab0:	str	ip, [r3, #52]	; 0x34
   15ab4:	vst1.64	{d16-d17}, [r0 :128]
   15ab8:	add	r0, r1, #64	; 0x40
   15abc:	vst1.64	{d16-d17}, [r0 :128]
   15ac0:	add	r0, r1, #48	; 0x30
   15ac4:	vst1.64	{d16-d17}, [r0 :128]
   15ac8:	add	r0, r1, #32
   15acc:	vst1.64	{d16-d17}, [r0 :128]
   15ad0:	add	r0, r1, #16
   15ad4:	vst1.64	{d16-d17}, [r0 :128]
   15ad8:	add	r0, r2, #16
   15adc:	vst1.64	{d16-d17}, [r0 :128]
   15ae0:	add	r0, r2, #32
   15ae4:	vst1.64	{d16-d17}, [r0 :128]
   15ae8:	add	r0, r2, #48	; 0x30
   15aec:	vst1.64	{d16-d17}, [r0 :128]
   15af0:	add	r0, r2, #64	; 0x40
   15af4:	vst1.64	{d16-d17}, [r0 :128]
   15af8:	add	r0, r2, #80	; 0x50
   15afc:	vst1.64	{d16-d17}, [r0 :128]
   15b00:	add	r0, r2, #96	; 0x60
   15b04:	vst1.64	{d16-d17}, [r0 :128]
   15b08:	add	r0, r3, #16
   15b0c:	vst1.64	{d16-d17}, [r0 :128]
   15b10:	mov	r0, #96	; 0x60
   15b14:	vst1.64	{d16-d17}, [r1 :128], r0
   15b18:	mov	r0, #116	; 0x74
   15b1c:	vst1.64	{d16-d17}, [r2 :128], r0
   15b20:	vst1.64	{d16-d17}, [r1 :128]
   15b24:	mov	r0, #32
   15b28:	mov	r1, r3
   15b2c:	vst1.64	{d16-d17}, [r1 :128], r0
   15b30:	add	r0, r3, #80	; 0x50
   15b34:	str	ip, [r2]
   15b38:	vst1.64	{d16-d17}, [r1 :128]
   15b3c:	movw	r1, #51856	; 0xca90
   15b40:	vst1.64	{d16-d17}, [r0 :128]
   15b44:	add	r0, r3, #64	; 0x40
   15b48:	str	ip, [r3, #96]	; 0x60
   15b4c:	str	ip, [r3, #100]	; 0x64
   15b50:	movt	r1, #2
   15b54:	vst1.64	{d16-d17}, [r0 :128]
   15b58:	mov	r0, #36	; 0x24
   15b5c:	mov	r2, r1
   15b60:	str	ip, [r1, #32]
   15b64:	vst1.64	{d16-d17}, [r2 :128], r0
   15b68:	str	ip, [r2]
   15b6c:	add	r2, r1, #16
   15b70:	vst1.64	{d16-d17}, [r2 :128]
   15b74:	add	r2, r1, #48	; 0x30
   15b78:	str	ip, [r1, #80]	; 0x50
   15b7c:	str	ip, [r1, #84]	; 0x54
   15b80:	vst1.64	{d16-d17}, [r2 :128]
   15b84:	add	r2, r1, #64	; 0x40
   15b88:	movw	r1, #51952	; 0xcaf0
   15b8c:	movt	r1, #2
   15b90:	vst1.64	{d16-d17}, [r2 :128]
   15b94:	mov	r2, r1
   15b98:	str	ip, [r1, #32]
   15b9c:	vst1.64	{d16-d17}, [r2 :128], r0
   15ba0:	add	r0, r1, #16
   15ba4:	vst1.64	{d16-d17}, [r0 :128]
   15ba8:	add	r0, r1, #48	; 0x30
   15bac:	str	ip, [r2]
   15bb0:	str	ip, [r1, #80]	; 0x50
   15bb4:	str	ip, [r1, #84]	; 0x54
   15bb8:	mov	r2, #232	; 0xe8
   15bbc:	vst1.64	{d16-d17}, [r0 :128]
   15bc0:	add	r0, r1, #64	; 0x40
   15bc4:	mov	r1, #0
   15bc8:	vst1.64	{d16-d17}, [r0 :128]
   15bcc:	movw	r0, #51392	; 0xc8c0
   15bd0:	movt	r0, #2
   15bd4:	bl	12014 <memset@plt>
   15bd8:	pop	{fp, pc}
   15bdc:	movw	r0, #23036	; 0x59fc
   15be0:	movw	r1, #23164	; 0x5a7c
   15be4:	movt	r0, #1
   15be8:	movt	r1, #1
   15bec:	b	1a3b4 <__gcov_flush@@Base+0xb8>

00015bf0 <init_grammar@@Base>:
   15bf0:	movw	r2, #52816	; 0xce50
   15bf4:	add	r3, pc, #36	; 0x24
   15bf8:	movt	r2, #2
   15bfc:	vld1.64	{d16-d17}, [r3 :128]
   15c00:	vld1.64	{d18-d19}, [r2 :128]
   15c04:	vadd.i64	q8, q9, q8
   15c08:	vst1.64	{d16-d17}, [r2 :128]
   15c0c:	str	r1, [r0]
   15c10:	bx	lr
   15c14:	nop	{0}
   15c18:	nop	{0}
   15c1c:	nop	{0}
   15c20:	andeq	r0, r0, r1
   15c24:	andeq	r0, r0, r0
   15c28:	andeq	r0, r0, r1
   15c2c:	andeq	r0, r0, r0

00015c30 <destroy_grammar@@Base>:
   15c30:	movw	r0, #52816	; 0xce50
   15c34:	add	r1, pc, #36	; 0x24
   15c38:	movt	r0, #2
   15c3c:	vld1.64	{d16-d17}, [r1 :128]
   15c40:	add	r0, r0, #16
   15c44:	vld1.64	{d18-d19}, [r0 :128]
   15c48:	vadd.i64	q8, q9, q8
   15c4c:	vst1.64	{d16-d17}, [r0 :128]
   15c50:	bx	lr
   15c54:	nop	{0}
   15c58:	nop	{0}
   15c5c:	nop	{0}
   15c60:	andeq	r0, r0, r1
   15c64:	andeq	r0, r0, r0
   15c68:	andeq	r0, r0, r1
   15c6c:	andeq	r0, r0, r0

00015c70 <build_ast@@Base>:
   15c70:	movw	r1, #52816	; 0xce50
   15c74:	add	r2, pc, #36	; 0x24
   15c78:	movt	r1, #2
   15c7c:	vld1.64	{d16-d17}, [r2 :128]
   15c80:	add	r1, r1, #32
   15c84:	vld1.64	{d18-d19}, [r1 :128]
   15c88:	vadd.i64	q8, q9, q8
   15c8c:	vst1.64	{d16-d17}, [r1 :128]
   15c90:	b	15cb0 <read_function_ast_node@@Base>
   15c94:	nop	{0}
   15c98:	nop	{0}
   15c9c:	nop	{0}
   15ca0:	andeq	r0, r0, r1
   15ca4:	andeq	r0, r0, r0
   15ca8:	andeq	r0, r0, r1
   15cac:	andeq	r0, r0, r0

00015cb0 <read_function_ast_node@@Base>:
   15cb0:	push	{r4, r5, r6, r7, fp, lr}
   15cb4:	add	fp, sp, #16
   15cb8:	movw	r7, #52048	; 0xcb50
   15cbc:	mov	r4, r0
   15cc0:	movt	r7, #2
   15cc4:	ldrd	r0, [r7]
   15cc8:	adds	r0, r0, #1
   15ccc:	adc	r1, r1, #0
   15cd0:	strd	r0, [r7]
   15cd4:	ldr	r0, [r4]
   15cd8:	bl	13370 <next@@Base>
   15cdc:	ldr	r1, [r0]
   15ce0:	cmp	r1, #0
   15ce4:	beq	15d04 <read_function_ast_node@@Base+0x54>
   15ce8:	ldrd	r0, [r7, #8]
   15cec:	mov	r4, #0
   15cf0:	adds	r0, r0, #1
   15cf4:	adc	r1, r1, #0
   15cf8:	strd	r0, [r7, #8]
   15cfc:	add	r0, r7, #24
   15d00:	b	15e14 <read_function_ast_node@@Base+0x164>
   15d04:	ldrd	r2, [r7, #16]
   15d08:	adds	r2, r2, #1
   15d0c:	adc	r3, r3, #0
   15d10:	strd	r2, [r7, #16]
   15d14:	bl	12b40 <free_token_int_type@@Base>
   15d18:	ldr	r0, [r4]
   15d1c:	bl	13370 <next@@Base>
   15d20:	mov	r5, r0
   15d24:	ldr	r0, [r0]
   15d28:	cmp	r0, #2
   15d2c:	bne	15dc4 <read_function_ast_node@@Base+0x114>
   15d30:	ldrd	r0, [r7, #40]	; 0x28
   15d34:	adds	r0, r0, #1
   15d38:	adc	r1, r1, #0
   15d3c:	strd	r0, [r7, #40]	; 0x28
   15d40:	ldr	r0, [r4]
   15d44:	bl	13370 <next@@Base>
   15d48:	ldr	r1, [r0]
   15d4c:	cmp	r1, #3
   15d50:	bne	15de0 <read_function_ast_node@@Base+0x130>
   15d54:	ldrd	r2, [r7, #64]	; 0x40
   15d58:	adds	r2, r2, #1
   15d5c:	adc	r3, r3, #0
   15d60:	strd	r2, [r7, #64]	; 0x40
   15d64:	bl	12bf0 <free_token_opar@@Base>
   15d68:	ldr	r0, [r4]
   15d6c:	bl	13370 <next@@Base>
   15d70:	ldr	r1, [r0]
   15d74:	cmp	r1, #4
   15d78:	bne	15dfc <read_function_ast_node@@Base+0x14c>
   15d7c:	ldrd	r2, [r7, #88]	; 0x58
   15d80:	adds	r2, r2, #1
   15d84:	adc	r3, r3, #0
   15d88:	strd	r2, [r7, #88]	; 0x58
   15d8c:	bl	12c30 <free_token_cpar@@Base>
   15d90:	mov	r0, r4
   15d94:	bl	15e3c <read_body@@Base>
   15d98:	mov	r6, r0
   15d9c:	mov	r0, #16
   15da0:	bl	11f78 <malloc@plt>
   15da4:	ldr	r1, [r5, #4]
   15da8:	mov	r2, r6
   15dac:	mov	r4, r0
   15db0:	bl	14e70 <init_node_function@@Base>
   15db4:	mov	r0, r5
   15db8:	bl	12bb0 <free_token_function@@Base>
   15dbc:	add	r0, r7, #104	; 0x68
   15dc0:	b	15e14 <read_function_ast_node@@Base+0x164>
   15dc4:	ldrd	r0, [r7, #32]
   15dc8:	mov	r4, #0
   15dcc:	adds	r0, r0, #1
   15dd0:	adc	r1, r1, #0
   15dd4:	strd	r0, [r7, #32]
   15dd8:	add	r0, r7, #48	; 0x30
   15ddc:	b	15e14 <read_function_ast_node@@Base+0x164>
   15de0:	ldrd	r0, [r7, #56]	; 0x38
   15de4:	mov	r4, #0
   15de8:	adds	r0, r0, #1
   15dec:	adc	r1, r1, #0
   15df0:	strd	r0, [r7, #56]	; 0x38
   15df4:	add	r0, r7, #72	; 0x48
   15df8:	b	15e14 <read_function_ast_node@@Base+0x164>
   15dfc:	ldrd	r0, [r7, #80]	; 0x50
   15e00:	mov	r4, #0
   15e04:	adds	r0, r0, #1
   15e08:	adc	r1, r1, #0
   15e0c:	strd	r0, [r7, #80]	; 0x50
   15e10:	add	r0, r7, #96	; 0x60
   15e14:	ldrd	r2, [r0]
   15e18:	adds	r2, r2, #1
   15e1c:	adc	r3, r3, #0
   15e20:	strd	r2, [r0]
   15e24:	ldrd	r0, [r7, #112]	; 0x70
   15e28:	adds	r0, r0, #1
   15e2c:	adc	r1, r1, #0
   15e30:	strd	r0, [r7, #112]	; 0x70
   15e34:	mov	r0, r4
   15e38:	pop	{r4, r5, r6, r7, fp, pc}

00015e3c <read_body@@Base>:
   15e3c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15e40:	add	fp, sp, #28
   15e44:	sub	sp, sp, #4
   15e48:	movw	r7, #52176	; 0xcbd0
   15e4c:	mov	r4, r0
   15e50:	movt	r7, #2
   15e54:	ldrd	r0, [r7]
   15e58:	adds	r0, r0, #1
   15e5c:	adc	r1, r1, #0
   15e60:	strd	r0, [r7]
   15e64:	ldr	r0, [r4]
   15e68:	bl	13370 <next@@Base>
   15e6c:	ldr	r1, [r0]
   15e70:	cmp	r1, #5
   15e74:	bne	15fec <read_body@@Base+0x1b0>
   15e78:	ldrd	r2, [r7, #16]
   15e7c:	adds	r2, r2, #1
   15e80:	adc	r3, r3, #0
   15e84:	strd	r2, [r7, #16]
   15e88:	bl	12c70 <free_token_obra@@Base>
   15e8c:	ldr	r0, [r4]
   15e90:	bl	13370 <next@@Base>
   15e94:	mov	r1, r0
   15e98:	ldr	r0, [r7, #32]
   15e9c:	ldr	r3, [r7, #36]	; 0x24
   15ea0:	mov	sl, #0
   15ea4:	adds	r0, r0, #1
   15ea8:	adc	r3, r3, #0
   15eac:	str	r0, [r7, #32]
   15eb0:	str	r3, [r7, #36]	; 0x24
   15eb4:	ldr	r0, [r1]
   15eb8:	cmp	r0, #6
   15ebc:	beq	16008 <read_body@@Base+0x1cc>
   15ec0:	add	r2, r7, #128	; 0x80
   15ec4:	mov	r5, #0
   15ec8:	add	r9, r7, #88	; 0x58
   15ecc:	mov	sl, #0
   15ed0:	str	r2, [sp]
   15ed4:	b	15f34 <read_body@@Base+0xf8>
   15ed8:	ldrd	r0, [r7, #112]	; 0x70
   15edc:	mov	sl, r6
   15ee0:	adds	r0, r0, #1
   15ee4:	adc	r1, r1, #0
   15ee8:	strd	r0, [r7, #112]	; 0x70
   15eec:	ldr	r0, [sp]
   15ef0:	ldrd	r2, [r0]
   15ef4:	adds	r2, r2, #1
   15ef8:	adc	r3, r3, #0
   15efc:	strd	r2, [r0]
   15f00:	ldr	r0, [r4]
   15f04:	bl	13370 <next@@Base>
   15f08:	mov	r1, r0
   15f0c:	ldr	r0, [r7, #136]	; 0x88
   15f10:	ldr	r3, [r7, #140]	; 0x8c
   15f14:	mov	r5, r6
   15f18:	adds	r0, r0, #1
   15f1c:	adc	r3, r3, #0
   15f20:	str	r0, [r7, #136]	; 0x88
   15f24:	str	r3, [r7, #140]	; 0x8c
   15f28:	ldr	r0, [r1]
   15f2c:	cmp	r0, #6
   15f30:	beq	16008 <read_body@@Base+0x1cc>
   15f34:	ldrd	r2, [r7, #40]	; 0x28
   15f38:	adds	r2, r2, #1
   15f3c:	adc	r3, r3, #0
   15f40:	cmp	r0, #10
   15f44:	strd	r2, [r7, #40]	; 0x28
   15f48:	beq	15f88 <read_body@@Base+0x14c>
   15f4c:	cmp	r0, #7
   15f50:	bne	16030 <read_body@@Base+0x1f4>
   15f54:	ldr	r0, [r7, #64]	; 0x40
   15f58:	ldr	r3, [r7, #68]	; 0x44
   15f5c:	adds	r0, r0, #1
   15f60:	str	r0, [r7, #64]	; 0x40
   15f64:	adc	r3, r3, #0
   15f68:	mov	r0, r1
   15f6c:	str	r3, [r7, #68]	; 0x44
   15f70:	bl	12cf0 <free_token_return@@Base>
   15f74:	mov	r0, r4
   15f78:	add	r8, r7, #80	; 0x50
   15f7c:	bl	16080 <read_return_expression@@Base>
   15f80:	mov	r6, r0
   15f84:	b	15fb8 <read_body@@Base+0x17c>
   15f88:	ldr	r0, [r7, #72]	; 0x48
   15f8c:	ldr	r3, [r7, #76]	; 0x4c
   15f90:	adds	r0, r0, #1
   15f94:	str	r0, [r7, #72]	; 0x48
   15f98:	adc	r3, r3, #0
   15f9c:	mov	r0, r1
   15fa0:	str	r3, [r7, #76]	; 0x4c
   15fa4:	bl	12da0 <free_token_if@@Base>
   15fa8:	mov	r0, r4
   15fac:	bl	16188 <read_if_statement@@Base>
   15fb0:	mov	r6, r0
   15fb4:	mov	r8, r9
   15fb8:	ldrd	r0, [r8]
   15fbc:	adds	r0, r0, #1
   15fc0:	adc	r1, r1, #0
   15fc4:	cmp	sl, #0
   15fc8:	strd	r0, [r8]
   15fcc:	beq	15ed8 <read_body@@Base+0x9c>
   15fd0:	ldrd	r0, [r7, #104]	; 0x68
   15fd4:	adds	r0, r0, #1
   15fd8:	adc	r1, r1, #0
   15fdc:	strd	r0, [r7, #104]	; 0x68
   15fe0:	str	r6, [r5, #4]
   15fe4:	add	r0, r7, #120	; 0x78
   15fe8:	b	15ef0 <read_body@@Base+0xb4>
   15fec:	ldrd	r0, [r7, #8]
   15ff0:	mov	sl, #0
   15ff4:	adds	r0, r0, #1
   15ff8:	adc	r1, r1, #0
   15ffc:	strd	r0, [r7, #8]
   16000:	add	r0, r7, #24
   16004:	b	16054 <read_body@@Base+0x218>
   16008:	ldr	r0, [r7, #48]	; 0x30
   1600c:	ldr	r3, [r7, #52]	; 0x34
   16010:	adds	r0, r0, #1
   16014:	str	r0, [r7, #48]	; 0x30
   16018:	adc	r3, r3, #0
   1601c:	mov	r0, r1
   16020:	str	r3, [r7, #52]	; 0x34
   16024:	bl	12cb0 <free_token_cbra@@Base>
   16028:	add	r0, r7, #144	; 0x90
   1602c:	b	16054 <read_body@@Base+0x218>
   16030:	ldr	r0, [r7, #56]	; 0x38
   16034:	ldr	r3, [r7, #60]	; 0x3c
   16038:	adds	r0, r0, #1
   1603c:	adc	r3, r3, #0
   16040:	str	r0, [r7, #56]	; 0x38
   16044:	str	r3, [r7, #60]	; 0x3c
   16048:	ldr	r0, [r4]
   1604c:	bl	13150 <push_back@@Base>
   16050:	add	r0, r7, #96	; 0x60
   16054:	ldrd	r2, [r0]
   16058:	adds	r2, r2, #1
   1605c:	adc	r3, r3, #0
   16060:	strd	r2, [r0]
   16064:	ldrd	r0, [r7, #152]	; 0x98
   16068:	adds	r0, r0, #1
   1606c:	adc	r1, r1, #0
   16070:	strd	r0, [r7, #152]	; 0x98
   16074:	mov	r0, sl
   16078:	sub	sp, fp, #28
   1607c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00016080 <read_return_expression@@Base>:
   16080:	push	{r4, r5, r6, r7, fp, lr}
   16084:	add	fp, sp, #16
   16088:	movw	r7, #52336	; 0xcc70
   1608c:	mov	r5, r0
   16090:	movt	r7, #2
   16094:	ldrd	r0, [r7]
   16098:	adds	r0, r0, #1
   1609c:	adc	r1, r1, #0
   160a0:	strd	r0, [r7]
   160a4:	ldr	r0, [r5]
   160a8:	bl	13370 <next@@Base>
   160ac:	mov	r4, r0
   160b0:	ldr	r0, [r0]
   160b4:	cmp	r0, #1
   160b8:	bne	1612c <read_return_expression@@Base+0xac>
   160bc:	ldrd	r0, [r7, #16]
   160c0:	adds	r0, r0, #1
   160c4:	adc	r1, r1, #0
   160c8:	strd	r0, [r7, #16]
   160cc:	mov	r0, #12
   160d0:	bl	11f78 <malloc@plt>
   160d4:	ldr	r1, [r4, #4]
   160d8:	mov	r6, r0
   160dc:	bl	14e00 <init_node_int@@Base>
   160e0:	mov	r0, r4
   160e4:	bl	12b80 <free_token_int_value@@Base>
   160e8:	mov	r0, #12
   160ec:	bl	11f78 <malloc@plt>
   160f0:	mov	r1, r6
   160f4:	mov	r4, r0
   160f8:	bl	14ee0 <init_node_return@@Base>
   160fc:	ldr	r0, [r5]
   16100:	bl	13370 <next@@Base>
   16104:	ldr	r1, [r0]
   16108:	cmp	r1, #8
   1610c:	bne	16148 <read_return_expression@@Base+0xc8>
   16110:	ldrd	r2, [r7, #40]	; 0x28
   16114:	adds	r2, r2, #1
   16118:	adc	r3, r3, #0
   1611c:	strd	r2, [r7, #40]	; 0x28
   16120:	bl	12d30 <free_token_semicolon@@Base>
   16124:	add	r0, r7, #56	; 0x38
   16128:	b	16160 <read_return_expression@@Base+0xe0>
   1612c:	ldrd	r0, [r7, #8]
   16130:	mov	r4, #0
   16134:	adds	r0, r0, #1
   16138:	adc	r1, r1, #0
   1613c:	strd	r0, [r7, #8]
   16140:	add	r0, r7, #24
   16144:	b	16160 <read_return_expression@@Base+0xe0>
   16148:	ldrd	r0, [r7, #32]
   1614c:	mov	r4, #0
   16150:	adds	r0, r0, #1
   16154:	adc	r1, r1, #0
   16158:	strd	r0, [r7, #32]
   1615c:	add	r0, r7, #48	; 0x30
   16160:	ldrd	r2, [r0]
   16164:	adds	r2, r2, #1
   16168:	adc	r3, r3, #0
   1616c:	strd	r2, [r0]
   16170:	ldrd	r0, [r7, #64]	; 0x40
   16174:	adds	r0, r0, #1
   16178:	adc	r1, r1, #0
   1617c:	strd	r0, [r7, #64]	; 0x40
   16180:	mov	r0, r4
   16184:	pop	{r4, r5, r6, r7, fp, pc}

00016188 <read_if_statement@@Base>:
   16188:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1618c:	add	fp, sp, #24
   16190:	movw	r4, #52416	; 0xccc0
   16194:	mov	r5, r0
   16198:	movt	r4, #2
   1619c:	ldrd	r0, [r4]
   161a0:	adds	r0, r0, #1
   161a4:	adc	r1, r1, #0
   161a8:	strd	r0, [r4]
   161ac:	ldr	r0, [r5]
   161b0:	bl	13370 <next@@Base>
   161b4:	ldr	r1, [r0]
   161b8:	cmp	r1, #3
   161bc:	bne	16238 <read_if_statement@@Base+0xb0>
   161c0:	ldrd	r2, [r4, #16]
   161c4:	adds	r2, r2, #1
   161c8:	adc	r3, r3, #0
   161cc:	strd	r2, [r4, #16]
   161d0:	bl	12bf0 <free_token_opar@@Base>
   161d4:	mov	r0, r5
   161d8:	bl	162d4 <read_boolean_expression@@Base>
   161dc:	mov	r8, r0
   161e0:	mov	r0, r5
   161e4:	bl	15e3c <read_body@@Base>
   161e8:	mov	r9, r0
   161ec:	ldr	r0, [r5]
   161f0:	bl	13370 <next@@Base>
   161f4:	mov	r1, r0
   161f8:	ldr	r0, [r0]
   161fc:	cmp	r0, #11
   16200:	bne	16254 <read_if_statement@@Base+0xcc>
   16204:	ldr	r0, [r4, #32]
   16208:	ldr	r3, [r4, #36]	; 0x24
   1620c:	adds	r0, r0, #1
   16210:	str	r0, [r4, #32]
   16214:	adc	r3, r3, #0
   16218:	mov	r0, r1
   1621c:	str	r3, [r4, #36]	; 0x24
   16220:	bl	12de0 <free_token_else@@Base>
   16224:	mov	r0, r5
   16228:	add	r6, r4, #48	; 0x30
   1622c:	bl	15e3c <read_body@@Base>
   16230:	mov	r7, r0
   16234:	b	1627c <read_if_statement@@Base+0xf4>
   16238:	ldrd	r0, [r4, #8]
   1623c:	mov	r5, #0
   16240:	adds	r0, r0, #1
   16244:	adc	r1, r1, #0
   16248:	strd	r0, [r4, #8]
   1624c:	add	r0, r4, #24
   16250:	b	162ac <read_if_statement@@Base+0x124>
   16254:	ldr	r0, [r4, #40]	; 0x28
   16258:	ldr	r3, [r4, #44]	; 0x2c
   1625c:	adds	r0, r0, #1
   16260:	adc	r3, r3, #0
   16264:	str	r0, [r4, #40]	; 0x28
   16268:	str	r3, [r4, #44]	; 0x2c
   1626c:	ldr	r0, [r5]
   16270:	bl	13150 <push_back@@Base>
   16274:	add	r6, r4, #56	; 0x38
   16278:	mov	r7, #0
   1627c:	ldrd	r0, [r6]
   16280:	adds	r0, r0, #1
   16284:	adc	r1, r1, #0
   16288:	strd	r0, [r6]
   1628c:	mov	r0, #20
   16290:	bl	11f78 <malloc@plt>
   16294:	mov	r1, r8
   16298:	mov	r2, r9
   1629c:	mov	r3, r7
   162a0:	mov	r5, r0
   162a4:	bl	14f50 <init_node_if@@Base>
   162a8:	add	r0, r4, #64	; 0x40
   162ac:	ldrd	r2, [r0]
   162b0:	adds	r2, r2, #1
   162b4:	adc	r3, r3, #0
   162b8:	strd	r2, [r0]
   162bc:	ldrd	r0, [r4, #72]	; 0x48
   162c0:	adds	r0, r0, #1
   162c4:	adc	r1, r1, #0
   162c8:	strd	r0, [r4, #72]	; 0x48
   162cc:	mov	r0, r5
   162d0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

000162d4 <read_boolean_expression@@Base>:
   162d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   162d8:	add	fp, sp, #28
   162dc:	sub	sp, sp, #4
   162e0:	movw	r6, #52496	; 0xcd10
   162e4:	mov	r5, r0
   162e8:	mov	r4, #0
   162ec:	movt	r6, #2
   162f0:	str	r4, [sp]
   162f4:	ldrd	r0, [r6]
   162f8:	adds	r0, r0, #1
   162fc:	adc	r1, r1, #0
   16300:	strd	r0, [r6]
   16304:	ldr	r0, [r5]
   16308:	bl	13370 <next@@Base>
   1630c:	mov	r1, r0
   16310:	ldr	r0, [r6, #8]
   16314:	ldr	r3, [r6, #12]
   16318:	adds	r0, r0, #1
   1631c:	adc	r3, r3, #0
   16320:	str	r0, [r6, #8]
   16324:	str	r3, [r6, #12]
   16328:	ldr	r0, [r1]
   1632c:	cmp	r0, #4
   16330:	beq	1644c <read_boolean_expression@@Base+0x178>
   16334:	mov	r4, #0
   16338:	mov	r9, #1
   1633c:	add	sl, r6, #72	; 0x48
   16340:	mov	r8, sp
   16344:	b	163b4 <read_boolean_expression@@Base+0xe0>
   16348:	ldrd	r0, [r6, #56]	; 0x38
   1634c:	mov	r2, r8
   16350:	mov	r3, r7
   16354:	adds	r0, r0, #1
   16358:	adc	r1, r1, #0
   1635c:	strd	r0, [r6, #56]	; 0x38
   16360:	mov	r0, r5
   16364:	mov	r1, r4
   16368:	bl	164c8 <read_single_boolean_expression@@Base>
   1636c:	mov	r4, r0
   16370:	add	r0, r6, #80	; 0x50
   16374:	ldrd	r2, [r0]
   16378:	adds	r2, r2, #1
   1637c:	adc	r3, r3, #0
   16380:	strd	r2, [r0]
   16384:	ldr	r0, [r5]
   16388:	bl	13370 <next@@Base>
   1638c:	mov	r1, r0
   16390:	ldr	r0, [r6, #88]	; 0x58
   16394:	ldr	r3, [r6, #92]	; 0x5c
   16398:	adds	r0, r0, #1
   1639c:	adc	r3, r3, #0
   163a0:	str	r0, [r6, #88]	; 0x58
   163a4:	str	r3, [r6, #92]	; 0x5c
   163a8:	ldr	r0, [r1]
   163ac:	cmp	r0, #4
   163b0:	beq	1644c <read_boolean_expression@@Base+0x178>
   163b4:	ldrd	r2, [r6, #16]
   163b8:	adds	r2, r2, #1
   163bc:	adc	r3, r3, #0
   163c0:	cmp	r0, #12
   163c4:	strd	r2, [r6, #16]
   163c8:	beq	1641c <read_boolean_expression@@Base+0x148>
   163cc:	cmp	r0, #3
   163d0:	beq	16348 <read_boolean_expression@@Base+0x74>
   163d4:	cmp	r0, #1
   163d8:	bne	16490 <read_boolean_expression@@Base+0x1bc>
   163dc:	ldr	r0, [r6, #40]	; 0x28
   163e0:	ldr	r3, [r6, #44]	; 0x2c
   163e4:	adds	r0, r0, #1
   163e8:	adc	r3, r3, #0
   163ec:	str	r0, [r6, #40]	; 0x28
   163f0:	str	r3, [r6, #44]	; 0x2c
   163f4:	ldr	r0, [r5]
   163f8:	bl	13150 <push_back@@Base>
   163fc:	mov	r0, r5
   16400:	mov	r1, r4
   16404:	mov	r2, r8
   16408:	mov	r3, r7
   1640c:	bl	164c8 <read_single_boolean_expression@@Base>
   16410:	mov	r4, r0
   16414:	add	r0, r6, #64	; 0x40
   16418:	b	16374 <read_boolean_expression@@Base+0xa0>
   1641c:	ldr	r0, [r6, #48]	; 0x30
   16420:	ldr	r3, [r6, #52]	; 0x34
   16424:	adds	r0, r0, #1
   16428:	str	r0, [r6, #48]	; 0x30
   1642c:	adc	r3, r3, #0
   16430:	mov	r0, r1
   16434:	str	r3, [r6, #52]	; 0x34
   16438:	bl	15728 <get_boolean_op_value@@Base>
   1643c:	mov	r7, r0
   16440:	mov	r0, sl
   16444:	str	r9, [sp]
   16448:	b	16374 <read_boolean_expression@@Base+0xa0>
   1644c:	ldr	r0, [r6, #24]
   16450:	ldr	r3, [r6, #28]
   16454:	ldr	r2, [r6, #96]	; 0x60
   16458:	ldr	r5, [r6, #100]	; 0x64
   1645c:	adds	r0, r0, #1
   16460:	adc	r3, r3, #0
   16464:	adds	r2, r2, #1
   16468:	str	r2, [r6, #96]	; 0x60
   1646c:	str	r0, [r6, #24]
   16470:	adc	r0, r5, #0
   16474:	str	r3, [r6, #28]
   16478:	str	r0, [r6, #100]	; 0x64
   1647c:	mov	r0, r1
   16480:	bl	12c30 <free_token_cpar@@Base>
   16484:	mov	r0, r4
   16488:	sub	sp, fp, #28
   1648c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16490:	ldrd	r0, [r6, #32]
   16494:	mov	r2, #1
   16498:	adds	r0, r0, #1
   1649c:	adc	r1, r1, #0
   164a0:	strd	r0, [r6, #32]
   164a4:	movw	r0, #49384	; 0xc0e8
   164a8:	mov	r1, #33	; 0x21
   164ac:	movt	r0, #2
   164b0:	ldr	r3, [r0]
   164b4:	movw	r0, #46384	; 0xb530
   164b8:	movt	r0, #1
   164bc:	bl	11f54 <fwrite@plt>
   164c0:	mov	r0, #1
   164c4:	bl	11fb4 <exit@plt>

000164c8 <read_single_boolean_expression@@Base>:
   164c8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   164cc:	add	fp, sp, #24
   164d0:	movw	r5, #52816	; 0xce50
   164d4:	mov	r8, r3
   164d8:	mov	r4, r2
   164dc:	movt	r5, #2
   164e0:	ldrd	r2, [r5, #48]	; 0x30
   164e4:	adds	r2, r2, #1
   164e8:	adc	r3, r3, #0
   164ec:	cmp	r1, #0
   164f0:	strd	r2, [r5, #48]	; 0x30
   164f4:	beq	16558 <read_single_boolean_expression@@Base+0x90>
   164f8:	ldrd	r2, [r5, #64]	; 0x40
   164fc:	adds	r2, r2, #1
   16500:	adc	r3, r3, #0
   16504:	strd	r2, [r5, #64]	; 0x40
   16508:	ldr	r1, [r4]
   1650c:	cmp	r1, #0
   16510:	beq	1659c <read_single_boolean_expression@@Base+0xd4>
   16514:	ldrd	r2, [r5, #80]	; 0x50
   16518:	adds	r2, r2, #1
   1651c:	adc	r3, r3, #0
   16520:	strd	r2, [r5, #80]	; 0x50
   16524:	bl	165d4 <read_boolean_binary_expression@@Base>
   16528:	mov	r7, r0
   1652c:	mov	r0, #20
   16530:	bl	11f78 <malloc@plt>
   16534:	mov	r1, r8
   16538:	mov	r2, #0
   1653c:	mov	r3, r7
   16540:	mov	r6, r0
   16544:	mov	r9, #0
   16548:	bl	14fc0 <init_node_boolean_operator@@Base>
   1654c:	str	r9, [r4]
   16550:	add	r4, r5, #96	; 0x60
   16554:	b	16574 <read_single_boolean_expression@@Base+0xac>
   16558:	ldrd	r2, [r5, #56]	; 0x38
   1655c:	add	r4, r5, #72	; 0x48
   16560:	adds	r2, r2, #1
   16564:	adc	r3, r3, #0
   16568:	strd	r2, [r5, #56]	; 0x38
   1656c:	bl	165d4 <read_boolean_binary_expression@@Base>
   16570:	mov	r6, r0
   16574:	ldrd	r0, [r4]
   16578:	adds	r0, r0, #1
   1657c:	adc	r1, r1, #0
   16580:	strd	r0, [r4]
   16584:	ldrd	r0, [r5, #104]	; 0x68
   16588:	adds	r0, r0, #1
   1658c:	adc	r1, r1, #0
   16590:	strd	r0, [r5, #104]	; 0x68
   16594:	mov	r0, r6
   16598:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1659c:	ldrd	r0, [r5, #88]	; 0x58
   165a0:	adds	r0, r0, #1
   165a4:	adc	r1, r1, #0
   165a8:	strd	r0, [r5, #88]	; 0x58
   165ac:	movw	r0, #49384	; 0xc0e8
   165b0:	mov	r1, #4
   165b4:	movt	r0, #2
   165b8:	ldr	r2, [r1]
   165bc:	movw	r1, #46418	; 0xb552
   165c0:	movt	r1, #1
   165c4:	ldr	r0, [r0]
   165c8:	bl	11fe4 <fprintf@plt>
   165cc:	mov	r0, #1
   165d0:	bl	11fb4 <exit@plt>

000165d4 <read_boolean_binary_expression@@Base>:
   165d4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   165d8:	add	fp, sp, #24
   165dc:	movw	r4, #52608	; 0xcd80
   165e0:	mov	r5, r0
   165e4:	movt	r4, #2
   165e8:	ldrd	r0, [r4]
   165ec:	adds	r0, r0, #1
   165f0:	adc	r1, r1, #0
   165f4:	strd	r0, [r4]
   165f8:	ldr	r0, [r5]
   165fc:	bl	13370 <next@@Base>
   16600:	mov	r6, r0
   16604:	ldr	r0, [r0]
   16608:	cmp	r0, #1
   1660c:	bne	166e0 <read_boolean_binary_expression@@Base+0x10c>
   16610:	ldrd	r0, [r4, #16]
   16614:	adds	r0, r0, #1
   16618:	adc	r1, r1, #0
   1661c:	strd	r0, [r4, #16]
   16620:	mov	r0, #12
   16624:	bl	11f78 <malloc@plt>
   16628:	ldr	r1, [r6, #4]
   1662c:	mov	r8, r0
   16630:	bl	14e00 <init_node_int@@Base>
   16634:	mov	r0, r6
   16638:	bl	12b80 <free_token_int_value@@Base>
   1663c:	ldr	r0, [r5]
   16640:	bl	13370 <next@@Base>
   16644:	mov	r7, r0
   16648:	ldr	r0, [r0]
   1664c:	cmp	r0, #12
   16650:	bne	16728 <read_boolean_binary_expression@@Base+0x154>
   16654:	ldrd	r0, [r4, #64]	; 0x40
   16658:	adds	r0, r0, #1
   1665c:	adc	r1, r1, #0
   16660:	strd	r0, [r4, #64]	; 0x40
   16664:	mov	r0, r7
   16668:	bl	15728 <get_boolean_op_value@@Base>
   1666c:	mov	r6, r0
   16670:	mov	r0, r7
   16674:	bl	12e20 <free_token_boolean_op@@Base>
   16678:	ldr	r0, [r5]
   1667c:	bl	13370 <next@@Base>
   16680:	mov	r5, r0
   16684:	ldr	r0, [r0]
   16688:	cmp	r0, #1
   1668c:	bne	16764 <read_boolean_binary_expression@@Base+0x190>
   16690:	ldrd	r0, [r4, #88]	; 0x58
   16694:	adds	r0, r0, #1
   16698:	adc	r1, r1, #0
   1669c:	strd	r0, [r4, #88]	; 0x58
   166a0:	mov	r0, #12
   166a4:	bl	11f78 <malloc@plt>
   166a8:	ldr	r1, [r5, #4]
   166ac:	mov	r7, r0
   166b0:	bl	14e00 <init_node_int@@Base>
   166b4:	mov	r0, r5
   166b8:	bl	12b80 <free_token_int_value@@Base>
   166bc:	mov	r0, #20
   166c0:	bl	11f78 <malloc@plt>
   166c4:	mov	r1, r6
   166c8:	mov	r2, r8
   166cc:	mov	r3, r7
   166d0:	mov	r5, r0
   166d4:	bl	14fc0 <init_node_boolean_operator@@Base>
   166d8:	add	r6, r4, #104	; 0x68
   166dc:	b	16784 <read_boolean_binary_expression@@Base+0x1b0>
   166e0:	ldrd	r2, [r4, #8]
   166e4:	adds	r2, r2, #1
   166e8:	adc	r3, r3, #0
   166ec:	cmp	r0, #12
   166f0:	strd	r2, [r4, #8]
   166f4:	bne	16748 <read_boolean_binary_expression@@Base+0x174>
   166f8:	ldrd	r0, [r4, #24]
   166fc:	adds	r0, r0, #1
   16700:	adc	r1, r1, #0
   16704:	strd	r0, [r4, #24]
   16708:	mov	r1, r6
   1670c:	ldr	r0, [r5]
   16710:	bl	13150 <push_back@@Base>
   16714:	mov	r0, r5
   16718:	add	r6, r4, #40	; 0x28
   1671c:	bl	167ac <read_boolean_unary_expression@@Base>
   16720:	mov	r5, r0
   16724:	b	16784 <read_boolean_binary_expression@@Base+0x1b0>
   16728:	ldrd	r0, [r4, #56]	; 0x38
   1672c:	adds	r0, r0, #1
   16730:	adc	r1, r1, #0
   16734:	strd	r0, [r4, #56]	; 0x38
   16738:	mov	r0, r8
   1673c:	bl	15030 <free_node@@Base>
   16740:	add	r6, r4, #72	; 0x48
   16744:	b	16780 <read_boolean_binary_expression@@Base+0x1ac>
   16748:	ldrd	r0, [r4, #32]
   1674c:	add	r6, r4, #48	; 0x30
   16750:	mov	r5, #0
   16754:	adds	r0, r0, #1
   16758:	adc	r1, r1, #0
   1675c:	strd	r0, [r4, #32]
   16760:	b	16784 <read_boolean_binary_expression@@Base+0x1b0>
   16764:	ldrd	r0, [r4, #80]	; 0x50
   16768:	adds	r0, r0, #1
   1676c:	adc	r1, r1, #0
   16770:	strd	r0, [r4, #80]	; 0x50
   16774:	mov	r0, r8
   16778:	bl	15030 <free_node@@Base>
   1677c:	add	r6, r4, #96	; 0x60
   16780:	mov	r5, #0
   16784:	ldrd	r0, [r6]
   16788:	adds	r0, r0, #1
   1678c:	adc	r1, r1, #0
   16790:	strd	r0, [r6]
   16794:	ldrd	r0, [r4, #112]	; 0x70
   16798:	adds	r0, r0, #1
   1679c:	adc	r1, r1, #0
   167a0:	strd	r0, [r4, #112]	; 0x70
   167a4:	mov	r0, r5
   167a8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

000167ac <read_boolean_unary_expression@@Base>:
   167ac:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   167b0:	add	fp, sp, #24
   167b4:	movw	r5, #52736	; 0xce00
   167b8:	mov	r6, r0
   167bc:	movt	r5, #2
   167c0:	ldrd	r0, [r5]
   167c4:	adds	r0, r0, #1
   167c8:	adc	r1, r1, #0
   167cc:	strd	r0, [r5]
   167d0:	mov	r0, #20
   167d4:	bl	11f78 <malloc@plt>
   167d8:	mov	r4, r0
   167dc:	ldr	r0, [r6]
   167e0:	bl	13370 <next@@Base>
   167e4:	mov	r7, r0
   167e8:	ldr	r0, [r0]
   167ec:	cmp	r0, #12
   167f0:	bne	16878 <read_boolean_unary_expression@@Base+0xcc>
   167f4:	ldrd	r0, [r5, #16]
   167f8:	adds	r0, r0, #1
   167fc:	adc	r1, r1, #0
   16800:	strd	r0, [r5, #16]
   16804:	mov	r0, r7
   16808:	bl	15728 <get_boolean_op_value@@Base>
   1680c:	mov	r8, r0
   16810:	mov	r0, r7
   16814:	bl	12e20 <free_token_boolean_op@@Base>
   16818:	ldr	r0, [r6]
   1681c:	bl	13370 <next@@Base>
   16820:	mov	r6, r0
   16824:	ldr	r0, [r0]
   16828:	cmp	r0, #1
   1682c:	bne	16898 <read_boolean_unary_expression@@Base+0xec>
   16830:	ldrd	r0, [r5, #40]	; 0x28
   16834:	adds	r0, r0, #1
   16838:	adc	r1, r1, #0
   1683c:	strd	r0, [r5, #40]	; 0x28
   16840:	mov	r0, #12
   16844:	bl	11f78 <malloc@plt>
   16848:	ldr	r1, [r6, #4]
   1684c:	mov	r7, r0
   16850:	bl	14e00 <init_node_int@@Base>
   16854:	mov	r0, r6
   16858:	bl	12b80 <free_token_int_value@@Base>
   1685c:	mov	r0, r4
   16860:	mov	r1, r8
   16864:	mov	r2, r7
   16868:	mov	r3, #0
   1686c:	bl	14fc0 <init_node_boolean_operator@@Base>
   16870:	add	r0, r5, #56	; 0x38
   16874:	b	168b8 <read_boolean_unary_expression@@Base+0x10c>
   16878:	ldrd	r0, [r5, #8]
   1687c:	adds	r0, r0, #1
   16880:	adc	r1, r1, #0
   16884:	strd	r0, [r5, #8]
   16888:	mov	r0, r4
   1688c:	bl	1569c <free_node_boolean_operator@@Base>
   16890:	add	r0, r5, #24
   16894:	b	168b4 <read_boolean_unary_expression@@Base+0x108>
   16898:	ldrd	r0, [r5, #32]
   1689c:	adds	r0, r0, #1
   168a0:	adc	r1, r1, #0
   168a4:	strd	r0, [r5, #32]
   168a8:	mov	r0, r4
   168ac:	bl	1569c <free_node_boolean_operator@@Base>
   168b0:	add	r0, r5, #48	; 0x30
   168b4:	mov	r4, #0
   168b8:	ldrd	r2, [r0]
   168bc:	adds	r2, r2, #1
   168c0:	adc	r3, r3, #0
   168c4:	strd	r2, [r0]
   168c8:	ldrd	r0, [r5, #64]	; 0x40
   168cc:	adds	r0, r0, #1
   168d0:	adc	r1, r1, #0
   168d4:	strd	r0, [r5, #64]	; 0x40
   168d8:	mov	r0, r4
   168dc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   168e0:	push	{r4, r5, fp, lr}
   168e4:	sub	sp, sp, #8
   168e8:	movw	r4, #51015	; 0xc747
   168ec:	movw	r0, #46474	; 0xb58a
   168f0:	movw	r1, #43909	; 0xab85
   168f4:	movt	r4, #42604	; 0xa66c
   168f8:	movt	r0, #1
   168fc:	movt	r1, #1
   16900:	mov	r2, r4
   16904:	bl	17a38 <__generate_code_for_binary_boolean_expression@@Base+0x468>
   16908:	movw	r1, #46556	; 0xb5dc
   1690c:	movw	r2, #61241	; 0xef39
   16910:	mov	r0, #0
   16914:	mov	r3, #0
   16918:	str	r4, [sp]
   1691c:	movt	r1, #1
   16920:	movt	r2, #54721	; 0xd5c1
   16924:	bl	18158 <__generate_code_for_binary_boolean_expression@@Base+0xb88>
   16928:	movw	r5, #52816	; 0xce50
   1692c:	mov	r0, #2
   16930:	movt	r5, #2
   16934:	mov	r1, r5
   16938:	bl	18a0c <__generate_code_for_binary_boolean_expression@@Base+0x143c>
   1693c:	movw	r1, #46569	; 0xb5e9
   16940:	movw	r2, #31149	; 0x79ad
   16944:	mov	r0, #1
   16948:	mov	r3, #0
   1694c:	str	r4, [sp]
   16950:	movt	r1, #1
   16954:	movt	r2, #32504	; 0x7ef8
   16958:	bl	18158 <__generate_code_for_binary_boolean_expression@@Base+0xb88>
   1695c:	add	r1, r5, #16
   16960:	mov	r0, #2
   16964:	bl	18a0c <__generate_code_for_binary_boolean_expression@@Base+0x143c>
   16968:	movw	r1, #46585	; 0xb5f9
   1696c:	movw	r2, #62674	; 0xf4d2
   16970:	mov	r0, #2
   16974:	mov	r3, #0
   16978:	str	r4, [sp]
   1697c:	movt	r1, #1
   16980:	movt	r2, #51839	; 0xca7f
   16984:	bl	18158 <__generate_code_for_binary_boolean_expression@@Base+0xb88>
   16988:	add	r1, r5, #32
   1698c:	mov	r0, #2
   16990:	bl	18a0c <__generate_code_for_binary_boolean_expression@@Base+0x143c>
   16994:	movw	r1, #46595	; 0xb603
   16998:	movw	r2, #50258	; 0xc452
   1699c:	mov	r0, #3
   169a0:	mov	r3, #0
   169a4:	str	r4, [sp]
   169a8:	movt	r1, #1
   169ac:	movt	r2, #14583	; 0x38f7
   169b0:	bl	18158 <__generate_code_for_binary_boolean_expression@@Base+0xb88>
   169b4:	movw	r1, #52048	; 0xcb50
   169b8:	mov	r0, #15
   169bc:	movt	r1, #2
   169c0:	bl	18a0c <__generate_code_for_binary_boolean_expression@@Base+0x143c>
   169c4:	movw	r1, #46618	; 0xb61a
   169c8:	movw	r2, #65081	; 0xfe39
   169cc:	mov	r0, #4
   169d0:	mov	r3, #0
   169d4:	str	r4, [sp]
   169d8:	movt	r1, #1
   169dc:	movt	r2, #65511	; 0xffe7
   169e0:	bl	18158 <__generate_code_for_binary_boolean_expression@@Base+0xb88>
   169e4:	movw	r1, #52176	; 0xcbd0
   169e8:	mov	r0, #20
   169ec:	movt	r1, #2
   169f0:	bl	18a0c <__generate_code_for_binary_boolean_expression@@Base+0x143c>
   169f4:	movw	r1, #46628	; 0xb624
   169f8:	movw	r2, #34025	; 0x84e9
   169fc:	mov	r0, #5
   16a00:	mov	r3, #0
   16a04:	str	r4, [sp]
   16a08:	movt	r1, #1
   16a0c:	movt	r2, #15032	; 0x3ab8
   16a10:	bl	18158 <__generate_code_for_binary_boolean_expression@@Base+0xb88>
   16a14:	movw	r1, #52336	; 0xcc70
   16a18:	mov	r0, #9
   16a1c:	movt	r1, #2
   16a20:	bl	18a0c <__generate_code_for_binary_boolean_expression@@Base+0x143c>
   16a24:	movw	r1, #46651	; 0xb63b
   16a28:	movw	r2, #37900	; 0x940c
   16a2c:	mov	r0, #6
   16a30:	mov	r3, #0
   16a34:	str	r4, [sp]
   16a38:	movt	r1, #1
   16a3c:	movt	r2, #58778	; 0xe59a
   16a40:	bl	18158 <__generate_code_for_binary_boolean_expression@@Base+0xb88>
   16a44:	movw	r1, #52416	; 0xccc0
   16a48:	mov	r0, #10
   16a4c:	movt	r1, #2
   16a50:	bl	18a0c <__generate_code_for_binary_boolean_expression@@Base+0x143c>
   16a54:	movw	r1, #46669	; 0xb64d
   16a58:	movw	r2, #17500	; 0x445c
   16a5c:	mov	r0, #7
   16a60:	mov	r3, #0
   16a64:	str	r4, [sp]
   16a68:	movt	r1, #1
   16a6c:	movt	r2, #19607	; 0x4c97
   16a70:	bl	18158 <__generate_code_for_binary_boolean_expression@@Base+0xb88>
   16a74:	movw	r1, #52496	; 0xcd10
   16a78:	mov	r0, #13
   16a7c:	movt	r1, #2
   16a80:	bl	18a0c <__generate_code_for_binary_boolean_expression@@Base+0x143c>
   16a84:	movw	r1, #46693	; 0xb665
   16a88:	movw	r2, #46658	; 0xb642
   16a8c:	mov	r0, #8
   16a90:	mov	r3, #0
   16a94:	str	r4, [sp]
   16a98:	movt	r1, #1
   16a9c:	movt	r2, #19123	; 0x4ab3
   16aa0:	bl	18158 <__generate_code_for_binary_boolean_expression@@Base+0xb88>
   16aa4:	add	r1, r5, #48	; 0x30
   16aa8:	mov	r0, #8
   16aac:	bl	18a0c <__generate_code_for_binary_boolean_expression@@Base+0x143c>
   16ab0:	movw	r1, #46724	; 0xb684
   16ab4:	movw	r2, #46373	; 0xb525
   16ab8:	mov	r0, #9
   16abc:	mov	r3, #0
   16ac0:	str	r4, [sp]
   16ac4:	movt	r1, #1
   16ac8:	movt	r2, #5760	; 0x1680
   16acc:	bl	18158 <__generate_code_for_binary_boolean_expression@@Base+0xb88>
   16ad0:	movw	r1, #52608	; 0xcd80
   16ad4:	mov	r0, #15
   16ad8:	movt	r1, #2
   16adc:	bl	18a0c <__generate_code_for_binary_boolean_expression@@Base+0x143c>
   16ae0:	movw	r1, #46755	; 0xb6a3
   16ae4:	movw	r2, #43263	; 0xa8ff
   16ae8:	mov	r0, #10
   16aec:	mov	r3, #0
   16af0:	str	r4, [sp]
   16af4:	movt	r1, #1
   16af8:	movt	r2, #55516	; 0xd8dc
   16afc:	bl	18158 <__generate_code_for_binary_boolean_expression@@Base+0xb88>
   16b00:	movw	r1, #52736	; 0xce00
   16b04:	mov	r0, #9
   16b08:	movt	r1, #2
   16b0c:	bl	18a0c <__generate_code_for_binary_boolean_expression@@Base+0x143c>
   16b10:	bl	19194 <__generate_code_for_binary_boolean_expression@@Base+0x1bc4>
   16b14:	add	sp, sp, #8
   16b18:	pop	{r4, r5, fp, lr}
   16b1c:	b	19f00 <__generate_code_for_binary_boolean_expression@@Base+0x2930>
   16b20:	push	{r4, r5, r6, r7, r8, lr}
   16b24:	vpush	{d8-d9}
   16b28:	bl	168e0 <read_boolean_unary_expression@@Base+0x134>
   16b2c:	movw	r5, #52816	; 0xce50
   16b30:	vmov.i32	q4, #0	; 0x00000000
   16b34:	mov	r4, #0
   16b38:	mov	r8, #116	; 0x74
   16b3c:	mov	r6, #64	; 0x40
   16b40:	mov	r2, #160	; 0xa0
   16b44:	movt	r5, #2
   16b48:	add	r0, r5, #32
   16b4c:	mov	r7, r5
   16b50:	vst1.64	{d8-d9}, [r0 :128]
   16b54:	add	r0, r5, #16
   16b58:	vst1.64	{d8-d9}, [r0 :128]
   16b5c:	movw	r0, #52048	; 0xcb50
   16b60:	vst1.64	{d8-d9}, [r7 :128], r6
   16b64:	movt	r0, #2
   16b68:	add	r1, r0, #16
   16b6c:	str	r4, [r0, #112]	; 0x70
   16b70:	vst1.64	{d8-d9}, [r1 :128]
   16b74:	add	r1, r0, #32
   16b78:	vst1.64	{d8-d9}, [r1 :128]
   16b7c:	add	r1, r0, #48	; 0x30
   16b80:	vst1.64	{d8-d9}, [r1 :128]
   16b84:	add	r1, r0, #64	; 0x40
   16b88:	vst1.64	{d8-d9}, [r1 :128]
   16b8c:	add	r1, r0, #80	; 0x50
   16b90:	vst1.64	{d8-d9}, [r1 :128]
   16b94:	add	r1, r0, #96	; 0x60
   16b98:	vst1.64	{d8-d9}, [r0 :128], r8
   16b9c:	str	r4, [r0]
   16ba0:	movw	r0, #52176	; 0xcbd0
   16ba4:	vst1.64	{d8-d9}, [r1 :128]
   16ba8:	mov	r1, #0
   16bac:	movt	r0, #2
   16bb0:	bl	12014 <memset@plt>
   16bb4:	movw	r1, #52496	; 0xcd10
   16bb8:	mov	r0, #100	; 0x64
   16bbc:	movw	r3, #52416	; 0xccc0
   16bc0:	vst1.64	{d8-d9}, [r7 :128]
   16bc4:	movt	r1, #2
   16bc8:	movt	r3, #2
   16bcc:	mov	r2, r1
   16bd0:	str	r4, [r1, #96]	; 0x60
   16bd4:	vst1.64	{d8-d9}, [r2 :128], r0
   16bd8:	str	r4, [r2]
   16bdc:	movw	r2, #52336	; 0xcc70
   16be0:	movt	r2, #2
   16be4:	add	r0, r2, #16
   16be8:	str	r4, [r2, #64]	; 0x40
   16bec:	vst1.64	{d8-d9}, [r0 :128]
   16bf0:	add	r0, r2, #32
   16bf4:	vst1.64	{d8-d9}, [r0 :128]
   16bf8:	add	r0, r2, #48	; 0x30
   16bfc:	vst1.64	{d8-d9}, [r0 :128]
   16c00:	add	r0, r3, #16
   16c04:	vst1.64	{d8-d9}, [r0 :128]
   16c08:	add	r0, r3, #32
   16c0c:	vst1.64	{d8-d9}, [r0 :128]
   16c10:	add	r0, r3, #48	; 0x30
   16c14:	vst1.64	{d8-d9}, [r3 :128], r6
   16c18:	vst1.64	{d8-d9}, [r0 :128]
   16c1c:	add	r0, r1, #16
   16c20:	vst1.64	{d8-d9}, [r3 :128]
   16c24:	vst1.64	{d8-d9}, [r0 :128]
   16c28:	add	r0, r1, #32
   16c2c:	vst1.64	{d8-d9}, [r0 :128]
   16c30:	add	r0, r1, #48	; 0x30
   16c34:	vst1.64	{d8-d9}, [r0 :128]
   16c38:	add	r0, r1, #64	; 0x40
   16c3c:	vst1.64	{d8-d9}, [r0 :128]
   16c40:	add	r0, r1, #80	; 0x50
   16c44:	add	r1, r5, #48	; 0x30
   16c48:	vst1.64	{d8-d9}, [r1 :128]
   16c4c:	add	r1, r5, #80	; 0x50
   16c50:	vst1.64	{d8-d9}, [r0 :128]
   16c54:	mov	r0, #68	; 0x44
   16c58:	vst1.64	{d8-d9}, [r1 :128]
   16c5c:	add	r1, r5, #96	; 0x60
   16c60:	vst1.64	{d8-d9}, [r2 :128], r0
   16c64:	vst1.64	{d8-d9}, [r1 :128]
   16c68:	movw	r1, #52608	; 0xcd80
   16c6c:	str	r4, [r2]
   16c70:	movt	r1, #2
   16c74:	add	r2, r1, #96	; 0x60
   16c78:	str	r4, [r1, #112]	; 0x70
   16c7c:	vst1.64	{d8-d9}, [r2 :128]
   16c80:	add	r2, r1, #80	; 0x50
   16c84:	vst1.64	{d8-d9}, [r2 :128]
   16c88:	add	r2, r1, #64	; 0x40
   16c8c:	vst1.64	{d8-d9}, [r2 :128]
   16c90:	add	r2, r1, #48	; 0x30
   16c94:	vst1.64	{d8-d9}, [r2 :128]
   16c98:	add	r2, r1, #32
   16c9c:	vst1.64	{d8-d9}, [r2 :128]
   16ca0:	add	r2, r1, #16
   16ca4:	vst1.64	{d8-d9}, [r1 :128], r8
   16ca8:	str	r4, [r1]
   16cac:	movw	r1, #52736	; 0xce00
   16cb0:	vst1.64	{d8-d9}, [r2 :128]
   16cb4:	movt	r1, #2
   16cb8:	add	r2, r1, #48	; 0x30
   16cbc:	str	r4, [r1, #64]	; 0x40
   16cc0:	vst1.64	{d8-d9}, [r2 :128]
   16cc4:	add	r2, r1, #32
   16cc8:	vst1.64	{d8-d9}, [r2 :128]
   16ccc:	add	r2, r1, #16
   16cd0:	vst1.64	{d8-d9}, [r1 :128], r0
   16cd4:	vst1.64	{d8-d9}, [r2 :128]
   16cd8:	str	r4, [r1]
   16cdc:	vpop	{d8-d9}
   16ce0:	pop	{r4, r5, r6, r7, r8, pc}
   16ce4:	movw	r0, #26848	; 0x68e0
   16ce8:	movw	r1, #27424	; 0x6b20
   16cec:	movt	r0, #1
   16cf0:	movt	r1, #1
   16cf4:	b	1a3b4 <__gcov_flush@@Base+0xb8>
	...

00016d00 <init_generator@@Base>:
   16d00:	push	{r4, sl, fp, lr}
   16d04:	add	fp, sp, #8
   16d08:	mov	r4, r0
   16d0c:	movw	r0, #53168	; 0xcfb0
   16d10:	add	r3, pc, #56	; 0x38
   16d14:	movt	r0, #2
   16d18:	vld1.64	{d16-d17}, [r3 :128]
   16d1c:	vld1.64	{d18-d19}, [r0 :128]
   16d20:	vadd.i64	q8, q9, q8
   16d24:	vst1.64	{d16-d17}, [r0 :128]
   16d28:	str	r1, [r4]
   16d2c:	movw	r1, #46785	; 0xb6c1
   16d30:	mov	r0, r2
   16d34:	movt	r1, #1
   16d38:	bl	11ee8 <fopen@plt>
   16d3c:	mov	r1, #0
   16d40:	stmib	r4, {r0, r1}
   16d44:	str	r1, [r4, #12]
   16d48:	pop	{r4, sl, fp, pc}
   16d4c:	nop	{0}
   16d50:	andeq	r0, r0, r1
   16d54:	andeq	r0, r0, r0
   16d58:	andeq	r0, r0, r1
   16d5c:	andeq	r0, r0, r0

00016d60 <destroy_generator@@Base>:
   16d60:	movw	r1, #53168	; 0xcfb0
   16d64:	add	r2, pc, #36	; 0x24
   16d68:	movt	r1, #2
   16d6c:	vld1.64	{d16-d17}, [r2 :128]
   16d70:	add	r1, r1, #16
   16d74:	vld1.64	{d18-d19}, [r1 :128]
   16d78:	vadd.i64	q8, q9, q8
   16d7c:	vst1.64	{d16-d17}, [r1 :128]
   16d80:	ldr	r0, [r0, #4]
   16d84:	b	12044 <fclose@plt>
   16d88:	nop	{0}
   16d8c:	nop	{0}
   16d90:	andeq	r0, r0, r1
   16d94:	andeq	r0, r0, r0
   16d98:	andeq	r0, r0, r1
   16d9c:	andeq	r0, r0, r0

00016da0 <generate_code@@Base>:
   16da0:	push	{r4, r5, r6, sl, fp, lr}
   16da4:	add	fp, sp, #16
   16da8:	vpush	{d8-d9}
   16dac:	movw	r6, #53168	; 0xcfb0
   16db0:	add	r1, pc, #104	; 0x68
   16db4:	mov	r4, r0
   16db8:	movt	r6, #2
   16dbc:	vld1.64	{d8-d9}, [r1 :128]
   16dc0:	add	r0, r6, #32
   16dc4:	vld1.64	{d16-d17}, [r0 :128]
   16dc8:	vadd.i64	q8, q8, q4
   16dcc:	vst1.64	{d16-d17}, [r0 :128]
   16dd0:	ldr	r0, [r4]
   16dd4:	bl	15c70 <build_ast@@Base>
   16dd8:	mov	r5, r0
   16ddc:	add	r0, r6, #48	; 0x30
   16de0:	mov	r1, #21
   16de4:	mov	r2, #1
   16de8:	vld1.64	{d16-d17}, [r0 :128]
   16dec:	vadd.i64	q8, q8, q4
   16df0:	vst1.64	{d16-d17}, [r0 :128]
   16df4:	movw	r0, #46787	; 0xb6c3
   16df8:	ldr	r3, [r4, #4]
   16dfc:	movt	r0, #1
   16e00:	bl	11f54 <fwrite@plt>
   16e04:	mov	r0, r4
   16e08:	mov	r1, r5
   16e0c:	bl	16ea0 <__generate_code_for_main@@Base>
   16e10:	mov	r0, r5
   16e14:	vpop	{d8-d9}
   16e18:	pop	{r4, r5, r6, sl, fp, lr}
   16e1c:	b	15030 <free_node@@Base>
   16e20:	andeq	r0, r0, r1
   16e24:	andeq	r0, r0, r0
   16e28:	andeq	r0, r0, r1
   16e2c:	andeq	r0, r0, r0

00016e30 <__generate_code@@Base>:
   16e30:	push	{r4, r5, fp, lr}
   16e34:	add	fp, sp, #8
   16e38:	mov	r5, r0
   16e3c:	movw	r0, #53168	; 0xcfb0
   16e40:	mov	r4, r1
   16e44:	add	r1, pc, #68	; 0x44
   16e48:	mov	r2, #1
   16e4c:	movt	r0, #2
   16e50:	vld1.64	{d16-d17}, [r1 :128]
   16e54:	mov	r1, #21
   16e58:	add	r0, r0, #48	; 0x30
   16e5c:	vld1.64	{d18-d19}, [r0 :128]
   16e60:	vadd.i64	q8, q9, q8
   16e64:	vst1.64	{d16-d17}, [r0 :128]
   16e68:	movw	r0, #46787	; 0xb6c3
   16e6c:	ldr	r3, [r5, #4]
   16e70:	movt	r0, #1
   16e74:	bl	11f54 <fwrite@plt>
   16e78:	mov	r0, r5
   16e7c:	mov	r1, r4
   16e80:	pop	{r4, r5, fp, lr}
   16e84:	b	16ea0 <__generate_code_for_main@@Base>
   16e88:	nop	{0}
   16e8c:	nop	{0}
   16e90:	andeq	r0, r0, r1
   16e94:	andeq	r0, r0, r0
   16e98:	andeq	r0, r0, r1
   16e9c:	andeq	r0, r0, r0

00016ea0 <__generate_code_for_main@@Base>:
   16ea0:	push	{r4, r5, r6, r7, fp, lr}
   16ea4:	add	fp, sp, #16
   16ea8:	mov	r4, r0
   16eac:	movw	r0, #53264	; 0xd010
   16eb0:	mov	r5, r1
   16eb4:	movt	r0, #2
   16eb8:	ldrd	r2, [r0]
   16ebc:	adds	r2, r2, #1
   16ec0:	adc	r3, r3, #0
   16ec4:	strd	r2, [r0]
   16ec8:	ldr	r1, [r1]
   16ecc:	cmp	r1, #2
   16ed0:	bne	16f3c <__generate_code_for_main@@Base+0x9c>
   16ed4:	movw	r1, #53168	; 0xcfb0
   16ed8:	add	r2, pc, #160	; 0xa0
   16edc:	ldrd	r6, [r0, #24]
   16ee0:	movt	r1, #2
   16ee4:	vld1.64	{d16-d17}, [r2 :128]
   16ee8:	ldrd	r2, [r0, #8]
   16eec:	add	r1, r1, #64	; 0x40
   16ef0:	vld1.64	{d18-d19}, [r1 :128]
   16ef4:	adds	r2, r2, #1
   16ef8:	adc	r3, r3, #0
   16efc:	adds	r6, r6, #1
   16f00:	str	r6, [r0, #24]
   16f04:	strd	r2, [r0, #8]
   16f08:	adc	r2, r7, #0
   16f0c:	str	r2, [r0, #28]
   16f10:	vadd.i64	q8, q9, q8
   16f14:	vst1.64	{d16-d17}, [r1 :128]
   16f18:	movw	r1, #46856	; 0xb708
   16f1c:	ldr	r2, [r5, #8]
   16f20:	ldr	r0, [r4, #4]
   16f24:	movt	r1, #1
   16f28:	bl	11fe4 <fprintf@plt>
   16f2c:	ldr	r1, [r5, #12]
   16f30:	mov	r0, r4
   16f34:	pop	{r4, r5, r6, r7, fp, lr}
   16f38:	b	17000 <__generate_code_for_body@@Base>
   16f3c:	ldrd	r2, [r0, #16]
   16f40:	mov	r1, #46	; 0x2e
   16f44:	adds	r2, r2, #1
   16f48:	adc	r3, r3, #0
   16f4c:	strd	r2, [r0, #16]
   16f50:	movw	r0, #49384	; 0xc0e8
   16f54:	mov	r2, #1
   16f58:	movt	r0, #2
   16f5c:	ldr	r3, [r0]
   16f60:	movw	r0, #46809	; 0xb6d9
   16f64:	movt	r0, #1
   16f68:	bl	11f54 <fwrite@plt>
   16f6c:	mov	r0, #1
   16f70:	bl	11fb4 <exit@plt>
   16f74:	nop	{0}
   16f78:	nop	{0}
   16f7c:	nop	{0}
   16f80:	andeq	r0, r0, r1
   16f84:	andeq	r0, r0, r0
   16f88:	andeq	r0, r0, r1
   16f8c:	andeq	r0, r0, r0

00016f90 <__generate_code_for_function@@Base>:
   16f90:	push	{r4, r5, fp, lr}
   16f94:	add	fp, sp, #8
   16f98:	mov	r5, r0
   16f9c:	movw	r0, #53168	; 0xcfb0
   16fa0:	mov	r4, r1
   16fa4:	add	r1, pc, #68	; 0x44
   16fa8:	movt	r0, #2
   16fac:	vld1.64	{d16-d17}, [r1 :128]
   16fb0:	movw	r1, #46856	; 0xb708
   16fb4:	movt	r1, #1
   16fb8:	add	r0, r0, #64	; 0x40
   16fbc:	vld1.64	{d18-d19}, [r0 :128]
   16fc0:	vadd.i64	q8, q9, q8
   16fc4:	vst1.64	{d16-d17}, [r0 :128]
   16fc8:	ldr	r2, [r4, #8]
   16fcc:	ldr	r0, [r5, #4]
   16fd0:	bl	11fe4 <fprintf@plt>
   16fd4:	ldr	r1, [r4, #12]
   16fd8:	mov	r0, r5
   16fdc:	pop	{r4, r5, fp, lr}
   16fe0:	b	17000 <__generate_code_for_body@@Base>
   16fe4:	nop	{0}
   16fe8:	nop	{0}
   16fec:	nop	{0}
   16ff0:	andeq	r0, r0, r1
   16ff4:	andeq	r0, r0, r0
   16ff8:	andeq	r0, r0, r1
   16ffc:	andeq	r0, r0, r0

00017000 <__generate_code_for_body@@Base>:
   17000:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   17004:	add	fp, sp, #24
   17008:	movw	r5, #52928	; 0xcec0
   1700c:	mov	r4, r0
   17010:	add	r0, pc, #296	; 0x128
   17014:	cmp	r1, #0
   17018:	movt	r5, #2
   1701c:	vld1.64	{d16-d17}, [r0 :128]
   17020:	vld1.64	{d18-d19}, [r5 :128]
   17024:	vadd.i64	q8, q9, q8
   17028:	vst1.64	{d16-d17}, [r5 :128]
   1702c:	beq	170e0 <__generate_code_for_body@@Base+0xe0>
   17030:	add	r8, r5, #64	; 0x40
   17034:	add	r7, r5, #56	; 0x38
   17038:	b	1708c <__generate_code_for_body@@Base+0x8c>
   1703c:	ldr	r0, [r5, #48]	; 0x30
   17040:	ldr	r3, [r5, #52]	; 0x34
   17044:	adds	r0, r0, #1
   17048:	str	r0, [r5, #48]	; 0x30
   1704c:	adc	r3, r3, #0
   17050:	mov	r0, r4
   17054:	str	r3, [r5, #52]	; 0x34
   17058:	bl	17150 <__generate_code_for_if@@Base>
   1705c:	mov	r0, r8
   17060:	ldrd	r2, [r0]
   17064:	adds	r2, r2, #1
   17068:	adc	r3, r3, #0
   1706c:	strd	r2, [r0]
   17070:	ldrd	r0, [r5, #72]	; 0x48
   17074:	adds	r0, r0, #1
   17078:	adc	r1, r1, #0
   1707c:	cmp	r6, #0
   17080:	strd	r0, [r5, #72]	; 0x48
   17084:	mov	r1, r6
   17088:	beq	170e0 <__generate_code_for_body@@Base+0xe0>
   1708c:	ldr	r0, [r5, #16]
   17090:	ldr	r3, [r5, #20]
   17094:	adds	r0, r0, #1
   17098:	adc	r3, r3, #0
   1709c:	str	r0, [r5, #16]
   170a0:	str	r3, [r5, #20]
   170a4:	ldm	r1, {r0, r6}
   170a8:	cmp	r0, #4
   170ac:	beq	1703c <__generate_code_for_body@@Base+0x3c>
   170b0:	cmp	r0, #3
   170b4:	bne	17108 <__generate_code_for_body@@Base+0x108>
   170b8:	ldr	r0, [r5, #40]	; 0x28
   170bc:	ldr	r3, [r5, #44]	; 0x2c
   170c0:	adds	r0, r0, #1
   170c4:	str	r0, [r5, #40]	; 0x28
   170c8:	adc	r3, r3, #0
   170cc:	mov	r0, r4
   170d0:	str	r3, [r5, #44]	; 0x2c
   170d4:	bl	17340 <__generate_code_for_return@@Base>
   170d8:	mov	r0, r7
   170dc:	b	17060 <__generate_code_for_body@@Base+0x60>
   170e0:	ldrd	r0, [r5, #24]
   170e4:	ldrd	r2, [r5, #80]	; 0x50
   170e8:	adds	r0, r0, #1
   170ec:	adc	r1, r1, #0
   170f0:	adds	r2, r2, #1
   170f4:	str	r2, [r5, #80]	; 0x50
   170f8:	strd	r0, [r5, #24]
   170fc:	adc	r0, r3, #0
   17100:	str	r0, [r5, #84]	; 0x54
   17104:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17108:	ldrd	r0, [r5, #32]
   1710c:	mov	r2, #1
   17110:	adds	r0, r0, #1
   17114:	adc	r1, r1, #0
   17118:	strd	r0, [r5, #32]
   1711c:	movw	r0, #49384	; 0xc0e8
   17120:	mov	r1, #52	; 0x34
   17124:	movt	r0, #2
   17128:	ldr	r3, [r0]
   1712c:	movw	r0, #47118	; 0xb80e
   17130:	movt	r0, #1
   17134:	bl	11f54 <fwrite@plt>
   17138:	mov	r0, #1
   1713c:	bl	11fb4 <exit@plt>
   17140:	andeq	r0, r0, r1
   17144:	andeq	r0, r0, r0
   17148:	andeq	r0, r0, r1
   1714c:	andeq	r0, r0, r0

00017150 <__generate_code_for_if@@Base>:
   17150:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   17154:	add	fp, sp, #24
   17158:	movw	r6, #53360	; 0xd070
   1715c:	mov	r5, r1
   17160:	mov	r4, r0
   17164:	movt	r6, #2
   17168:	ldrd	r0, [r6]
   1716c:	adds	r0, r0, #1
   17170:	adc	r1, r1, #0
   17174:	strd	r0, [r6]
   17178:	ldr	r8, [r4, #8]
   1717c:	ldr	r7, [r4, #12]
   17180:	adds	r0, r8, #1
   17184:	adc	r1, r7, #0
   17188:	strd	r0, [r4, #8]
   1718c:	ldr	r0, [r6, #48]	; 0x30
   17190:	ldr	r3, [r6, #52]	; 0x34
   17194:	ldr	r1, [r5, #8]
   17198:	adds	r0, r0, #1
   1719c:	adc	r3, r3, #0
   171a0:	str	r0, [r6, #48]	; 0x30
   171a4:	str	r3, [r6, #52]	; 0x34
   171a8:	ldr	r0, [r1, #16]
   171ac:	cmp	r0, #8
   171b0:	bne	171e4 <__generate_code_for_if@@Base+0x94>
   171b4:	ldr	r0, [r6, #56]	; 0x38
   171b8:	ldr	r3, [r6, #60]	; 0x3c
   171bc:	mov	r2, r8
   171c0:	adds	r0, r0, #1
   171c4:	adc	r3, r3, #0
   171c8:	str	r0, [r6, #56]	; 0x38
   171cc:	mov	r0, r4
   171d0:	str	r3, [r6, #60]	; 0x3c
   171d4:	mov	r3, r7
   171d8:	bl	174a0 <__generate_code_for_unary_boolean_expression@@Base>
   171dc:	add	r0, r6, #72	; 0x48
   171e0:	b	17210 <__generate_code_for_if@@Base+0xc0>
   171e4:	ldr	r0, [r6, #64]	; 0x40
   171e8:	ldr	r3, [r6, #68]	; 0x44
   171ec:	mov	r2, r8
   171f0:	adds	r0, r0, #1
   171f4:	adc	r3, r3, #0
   171f8:	str	r0, [r6, #64]	; 0x40
   171fc:	mov	r0, r4
   17200:	str	r3, [r6, #68]	; 0x44
   17204:	mov	r3, r7
   17208:	bl	175d0 <__generate_code_for_binary_boolean_expression@@Base>
   1720c:	add	r0, r6, #80	; 0x50
   17210:	ldrd	r2, [r0]
   17214:	adds	r2, r2, #1
   17218:	adc	r3, r3, #0
   1721c:	strd	r2, [r0]
   17220:	ldrd	r0, [r6, #88]	; 0x58
   17224:	adds	r0, r0, #1
   17228:	adc	r1, r1, #0
   1722c:	strd	r0, [r6, #88]	; 0x58
   17230:	mov	r0, r4
   17234:	ldr	r1, [r5, #12]
   17238:	bl	17000 <__generate_code_for_body@@Base>
   1723c:	ldr	r0, [r4, #4]
   17240:	movw	r1, #46861	; 0xb70d
   17244:	mov	r2, r8
   17248:	mov	r3, r7
   1724c:	movt	r1, #1
   17250:	bl	11fe4 <fprintf@plt>
   17254:	ldr	r1, [r5, #16]
   17258:	cmp	r1, #0
   1725c:	beq	17288 <__generate_code_for_if@@Base+0x138>
   17260:	ldr	r0, [r6, #8]
   17264:	ldr	r3, [r6, #12]
   17268:	adds	r0, r0, #1
   1726c:	str	r0, [r6, #8]
   17270:	adc	r3, r3, #0
   17274:	mov	r0, r4
   17278:	str	r3, [r6, #12]
   1727c:	bl	17000 <__generate_code_for_body@@Base>
   17280:	add	r0, r6, #24
   17284:	b	1728c <__generate_code_for_if@@Base+0x13c>
   17288:	add	r0, r6, #16
   1728c:	ldrd	r2, [r0]
   17290:	adds	r2, r2, #1
   17294:	adc	r3, r3, #0
   17298:	strd	r2, [r0]
   1729c:	ldrd	r0, [r6, #32]
   172a0:	adds	r0, r0, #1
   172a4:	adc	r1, r1, #0
   172a8:	strd	r0, [r6, #32]
   172ac:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

000172b0 <__generate_code_for_if_expression@@Base>:
   172b0:	push	{r4, r6, r7, sl, fp, lr}
   172b4:	add	fp, sp, #16
   172b8:	movw	r4, #53360	; 0xd070
   172bc:	movt	r4, #2
   172c0:	ldrd	r6, [r4, #48]	; 0x30
   172c4:	adds	r6, r6, #1
   172c8:	adc	r7, r7, #0
   172cc:	strd	r6, [r4, #48]	; 0x30
   172d0:	ldr	r7, [r1, #16]
   172d4:	cmp	r7, #8
   172d8:	bne	172f8 <__generate_code_for_if_expression@@Base+0x48>
   172dc:	ldrd	r6, [r4, #56]	; 0x38
   172e0:	adds	r6, r6, #1
   172e4:	adc	r7, r7, #0
   172e8:	strd	r6, [r4, #56]	; 0x38
   172ec:	bl	174a0 <__generate_code_for_unary_boolean_expression@@Base>
   172f0:	add	r0, r4, #72	; 0x48
   172f4:	b	17310 <__generate_code_for_if_expression@@Base+0x60>
   172f8:	ldrd	r6, [r4, #64]	; 0x40
   172fc:	adds	r6, r6, #1
   17300:	adc	r7, r7, #0
   17304:	strd	r6, [r4, #64]	; 0x40
   17308:	bl	175d0 <__generate_code_for_binary_boolean_expression@@Base>
   1730c:	add	r0, r4, #80	; 0x50
   17310:	ldrd	r2, [r0]
   17314:	adds	r2, r2, #1
   17318:	adc	r3, r3, #0
   1731c:	strd	r2, [r0]
   17320:	ldrd	r0, [r4, #88]	; 0x58
   17324:	adds	r0, r0, #1
   17328:	adc	r1, r1, #0
   1732c:	strd	r0, [r4, #88]	; 0x58
   17330:	pop	{r4, r6, r7, sl, fp, pc}
   17334:	nop	{0}
   17338:	nop	{0}
   1733c:	nop	{0}

00017340 <__generate_code_for_return@@Base>:
   17340:	push	{r4, r5, r6, r8, r9, sl, fp, lr}
   17344:	add	fp, sp, #24
   17348:	movw	r5, #53264	; 0xd010
   1734c:	mov	r4, r0
   17350:	mov	r2, #1
   17354:	movt	r5, #2
   17358:	ldr	r0, [r5, #32]
   1735c:	ldr	r3, [r5, #36]	; 0x24
   17360:	adds	r0, r0, #1
   17364:	adc	r3, r3, #0
   17368:	str	r0, [r5, #32]
   1736c:	movw	r0, #46876	; 0xb71c
   17370:	str	r3, [r5, #36]	; 0x24
   17374:	movt	r0, #1
   17378:	ldr	r3, [r4, #4]
   1737c:	ldr	r6, [r1, #8]
   17380:	mov	r1, #9
   17384:	bl	11f54 <fwrite@plt>
   17388:	ldr	r0, [r6]
   1738c:	cmp	r0, #1
   17390:	bne	17408 <__generate_code_for_return@@Base+0xc8>
   17394:	movw	r0, #53168	; 0xcfb0
   17398:	add	r1, pc, #160	; 0xa0
   1739c:	ldrd	r2, [r5, #40]	; 0x28
   173a0:	ldrd	r8, [r5, #56]	; 0x38
   173a4:	movt	r0, #2
   173a8:	vld1.64	{d16-d17}, [r1 :128]
   173ac:	add	r0, r0, #80	; 0x50
   173b0:	vld1.64	{d18-d19}, [r0 :128]
   173b4:	adds	r2, r2, #1
   173b8:	adc	r3, r3, #0
   173bc:	adds	r1, r8, #1
   173c0:	str	r1, [r5, #56]	; 0x38
   173c4:	adc	r1, r9, #0
   173c8:	strd	r2, [r5, #40]	; 0x28
   173cc:	str	r1, [r5, #60]	; 0x3c
   173d0:	movw	r1, #46933	; 0xb755
   173d4:	movt	r1, #1
   173d8:	vadd.i64	q8, q9, q8
   173dc:	vst1.64	{d16-d17}, [r0 :128]
   173e0:	ldr	r2, [r6, #8]
   173e4:	ldr	r0, [r4, #4]
   173e8:	bl	11fe4 <fprintf@plt>
   173ec:	ldr	r3, [r4, #4]
   173f0:	movw	r0, #46924	; 0xb74c
   173f4:	mov	r1, #8
   173f8:	mov	r2, #1
   173fc:	movt	r0, #1
   17400:	pop	{r4, r5, r6, r8, r9, sl, fp, lr}
   17404:	b	11f54 <fwrite@plt>
   17408:	ldrd	r0, [r5, #48]	; 0x30
   1740c:	mov	r2, #1
   17410:	adds	r0, r0, #1
   17414:	adc	r1, r1, #0
   17418:	strd	r0, [r5, #48]	; 0x30
   1741c:	movw	r0, #49384	; 0xc0e8
   17420:	mov	r1, #37	; 0x25
   17424:	movt	r0, #2
   17428:	ldr	r3, [r0]
   1742c:	movw	r0, #46886	; 0xb726
   17430:	movt	r0, #1
   17434:	bl	11f54 <fwrite@plt>
   17438:	mov	r0, #1
   1743c:	bl	11fb4 <exit@plt>
   17440:	andeq	r0, r0, r1
   17444:	andeq	r0, r0, r0
   17448:	andeq	r0, r0, r1
   1744c:	andeq	r0, r0, r0

00017450 <__generate_code_for_int@@Base>:
   17450:	movw	r2, #53168	; 0xcfb0
   17454:	add	r3, pc, #52	; 0x34
   17458:	movt	r2, #2
   1745c:	vld1.64	{d16-d17}, [r3 :128]
   17460:	add	r2, r2, #80	; 0x50
   17464:	vld1.64	{d18-d19}, [r2 :128]
   17468:	vadd.i64	q8, q9, q8
   1746c:	vst1.64	{d16-d17}, [r2 :128]
   17470:	ldr	r2, [r1, #8]
   17474:	ldr	r0, [r0, #4]
   17478:	movw	r1, #46933	; 0xb755
   1747c:	movt	r1, #1
   17480:	b	11fe4 <fprintf@plt>
   17484:	nop	{0}
   17488:	nop	{0}
   1748c:	nop	{0}
   17490:	andeq	r0, r0, r1
   17494:	andeq	r0, r0, r0
   17498:	andeq	r0, r0, r1
   1749c:	andeq	r0, r0, r0

000174a0 <__generate_code_for_unary_boolean_expression@@Base>:
   174a0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   174a4:	add	fp, sp, #24
   174a8:	movw	r4, #53264	; 0xd010
   174ac:	mov	r7, r1
   174b0:	mov	r6, r0
   174b4:	mov	r8, r3
   174b8:	mov	r9, r2
   174bc:	mov	r2, #1
   174c0:	movt	r4, #2
   174c4:	ldrd	r0, [r4, #64]	; 0x40
   174c8:	adds	r0, r0, #1
   174cc:	adc	r1, r1, #0
   174d0:	strd	r0, [r4, #64]	; 0x40
   174d4:	movw	r0, #47106	; 0xb802
   174d8:	mov	r1, #11
   174dc:	ldr	r3, [r6, #4]
   174e0:	ldr	r5, [r7, #8]
   174e4:	movt	r0, #1
   174e8:	bl	11f54 <fwrite@plt>
   174ec:	ldr	r3, [r6, #4]
   174f0:	movw	r0, #46937	; 0xb759
   174f4:	mov	r1, #9
   174f8:	mov	r2, #1
   174fc:	movt	r0, #1
   17500:	bl	11f54 <fwrite@plt>
   17504:	movw	r0, #53168	; 0xcfb0
   17508:	add	r1, pc, #176	; 0xb0
   1750c:	movt	r0, #2
   17510:	vld1.64	{d16-d17}, [r1 :128]
   17514:	movw	r1, #46933	; 0xb755
   17518:	movt	r1, #1
   1751c:	add	r0, r0, #80	; 0x50
   17520:	vld1.64	{d18-d19}, [r0 :128]
   17524:	vadd.i64	q8, q9, q8
   17528:	vst1.64	{d16-d17}, [r0 :128]
   1752c:	ldr	r2, [r5, #8]
   17530:	ldr	r0, [r6, #4]
   17534:	bl	11fe4 <fprintf@plt>
   17538:	ldr	r0, [r7, #16]
   1753c:	cmp	r0, #8
   17540:	bne	17584 <__generate_code_for_unary_boolean_expression@@Base+0xe4>
   17544:	ldrd	r0, [r4, #72]	; 0x48
   17548:	ldrd	r2, [r4, #88]	; 0x58
   1754c:	adds	r0, r0, #1
   17550:	adc	r1, r1, #0
   17554:	adds	r2, r2, #1
   17558:	str	r2, [r4, #88]	; 0x58
   1755c:	strd	r0, [r4, #72]	; 0x48
   17560:	adc	r0, r3, #0
   17564:	movw	r1, #46979	; 0xb783
   17568:	mov	r2, r9
   1756c:	mov	r3, r8
   17570:	str	r0, [r4, #92]	; 0x5c
   17574:	movt	r1, #1
   17578:	ldr	r0, [r6, #4]
   1757c:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   17580:	b	11fe4 <fprintf@plt>
   17584:	ldrd	r0, [r4, #80]	; 0x50
   17588:	mov	r2, #1
   1758c:	adds	r0, r0, #1
   17590:	adc	r1, r1, #0
   17594:	strd	r0, [r4, #80]	; 0x50
   17598:	movw	r0, #49384	; 0xc0e8
   1759c:	mov	r1, #31
   175a0:	movt	r0, #2
   175a4:	ldr	r3, [r0]
   175a8:	movw	r0, #47074	; 0xb7e2
   175ac:	movt	r0, #1
   175b0:	bl	11f54 <fwrite@plt>
   175b4:	mov	r0, #1
   175b8:	bl	11fb4 <exit@plt>
   175bc:	nop	{0}
   175c0:	andeq	r0, r0, r1
   175c4:	andeq	r0, r0, r0
   175c8:	andeq	r0, r0, r1
   175cc:	andeq	r0, r0, r0

000175d0 <__generate_code_for_binary_boolean_expression@@Base>:
   175d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   175d4:	add	fp, sp, #28
   175d8:	sub	sp, sp, #4
   175dc:	vpush	{d8-d9}
   175e0:	sub	sp, sp, #8
   175e4:	movw	sl, #53024	; 0xcf20
   175e8:	mov	r7, r1
   175ec:	mov	r6, r0
   175f0:	str	r3, [sp, #4]
   175f4:	mov	r9, r2
   175f8:	mov	r2, #1
   175fc:	movt	sl, #2
   17600:	ldrd	r0, [sl]
   17604:	adds	r0, r0, #1
   17608:	adc	r1, r1, #0
   1760c:	strd	r0, [sl]
   17610:	movw	r0, #46876	; 0xb71c
   17614:	mov	r1, #9
   17618:	ldr	r3, [r6, #4]
   1761c:	ldr	r4, [r7, #8]
   17620:	ldr	r5, [r7, #12]
   17624:	movt	r0, #1
   17628:	bl	11f54 <fwrite@plt>
   1762c:	add	r0, pc, #604	; 0x25c
   17630:	vld1.64	{d8-d9}, [r0 :128]
   17634:	movw	r0, #53168	; 0xcfb0
   17638:	movt	r0, #2
   1763c:	add	r8, r0, #80	; 0x50
   17640:	vld1.64	{d16-d17}, [r8 :128]
   17644:	vadd.i64	q8, q8, q4
   17648:	vst1.64	{d16-d17}, [r8 :128]
   1764c:	ldr	r2, [r4, #8]
   17650:	movw	r4, #46933	; 0xb755
   17654:	ldr	r0, [r6, #4]
   17658:	movt	r4, #1
   1765c:	mov	r1, r4
   17660:	bl	11fe4 <fprintf@plt>
   17664:	ldr	r1, [r6, #4]
   17668:	mov	r0, #10
   1766c:	bl	12080 <fputc@plt>
   17670:	ldr	r3, [r6, #4]
   17674:	movw	r0, #46937	; 0xb759
   17678:	mov	r1, #9
   1767c:	mov	r2, #1
   17680:	movt	r0, #1
   17684:	bl	11f54 <fwrite@plt>
   17688:	vld1.64	{d16-d17}, [r8 :128]
   1768c:	mov	r1, r4
   17690:	vadd.i64	q8, q8, q4
   17694:	vst1.64	{d16-d17}, [r8 :128]
   17698:	ldr	r2, [r5, #8]
   1769c:	ldr	r0, [r6, #4]
   176a0:	bl	11fe4 <fprintf@plt>
   176a4:	ldr	r1, [r6, #4]
   176a8:	mov	r0, #10
   176ac:	bl	12080 <fputc@plt>
   176b0:	ldr	r3, [r6, #4]
   176b4:	movw	r0, #46947	; 0xb763
   176b8:	mov	r1, #12
   176bc:	mov	r2, #1
   176c0:	movt	r0, #1
   176c4:	bl	11f54 <fwrite@plt>
   176c8:	ldr	r1, [r7, #16]
   176cc:	cmp	r1, #7
   176d0:	bhi	1784c <__generate_code_for_binary_boolean_expression@@Base+0x27c>
   176d4:	add	r2, pc, #4
   176d8:	add	r0, sl, #56	; 0x38
   176dc:	ldr	pc, [r2, r1, lsl #2]
   176e0:	andeq	r7, r1, r0, lsl #14
   176e4:	andeq	r7, r1, r0, ror #14
   176e8:	andeq	r7, r1, r0, lsr r7
   176ec:	andeq	r7, r1, r0, asr #15
   176f0:	andeq	r7, r1, ip, lsl r8
   176f4:	andeq	r7, r1, ip, lsl r8
   176f8:	strdeq	r7, [r1], -r0
   176fc:	muleq	r1, r0, r7
   17700:	ldrd	r0, [sl, #16]
   17704:	ldr	r3, [sp, #4]
   17708:	mov	r2, r9
   1770c:	adds	r0, r0, #1
   17710:	adc	r1, r1, #0
   17714:	strd	r0, [sl, #16]
   17718:	movw	r1, #46960	; 0xb770
   1771c:	ldr	r0, [r6, #4]
   17720:	movt	r1, #1
   17724:	bl	11fe4 <fprintf@plt>
   17728:	add	r0, sl, #80	; 0x50
   1772c:	b	1781c <__generate_code_for_binary_boolean_expression@@Base+0x24c>
   17730:	ldrd	r0, [sl, #32]
   17734:	ldr	r3, [sp, #4]
   17738:	mov	r2, r9
   1773c:	adds	r0, r0, #1
   17740:	adc	r1, r1, #0
   17744:	strd	r0, [sl, #32]
   17748:	movw	r1, #46998	; 0xb796
   1774c:	ldr	r0, [r6, #4]
   17750:	movt	r1, #1
   17754:	bl	11fe4 <fprintf@plt>
   17758:	add	r0, sl, #96	; 0x60
   1775c:	b	1781c <__generate_code_for_binary_boolean_expression@@Base+0x24c>
   17760:	ldrd	r0, [sl, #24]
   17764:	ldr	r3, [sp, #4]
   17768:	mov	r2, r9
   1776c:	adds	r0, r0, #1
   17770:	adc	r1, r1, #0
   17774:	strd	r0, [sl, #24]
   17778:	movw	r1, #46979	; 0xb783
   1777c:	ldr	r0, [r6, #4]
   17780:	movt	r1, #1
   17784:	bl	11fe4 <fprintf@plt>
   17788:	add	r0, sl, #88	; 0x58
   1778c:	b	1781c <__generate_code_for_binary_boolean_expression@@Base+0x24c>
   17790:	ldrd	r0, [sl, #72]	; 0x48
   17794:	ldr	r3, [sp, #4]
   17798:	mov	r2, r9
   1779c:	adds	r0, r0, #1
   177a0:	adc	r1, r1, #0
   177a4:	strd	r0, [sl, #72]	; 0x48
   177a8:	movw	r1, #47055	; 0xb7cf
   177ac:	ldr	r0, [r6, #4]
   177b0:	movt	r1, #1
   177b4:	bl	11fe4 <fprintf@plt>
   177b8:	add	r0, sl, #120	; 0x78
   177bc:	b	1781c <__generate_code_for_binary_boolean_expression@@Base+0x24c>
   177c0:	ldrd	r0, [sl, #40]	; 0x28
   177c4:	ldr	r3, [sp, #4]
   177c8:	mov	r2, r9
   177cc:	adds	r0, r0, #1
   177d0:	adc	r1, r1, #0
   177d4:	strd	r0, [sl, #40]	; 0x28
   177d8:	movw	r1, #47017	; 0xb7a9
   177dc:	ldr	r0, [r6, #4]
   177e0:	movt	r1, #1
   177e4:	bl	11fe4 <fprintf@plt>
   177e8:	add	r0, sl, #104	; 0x68
   177ec:	b	1781c <__generate_code_for_binary_boolean_expression@@Base+0x24c>
   177f0:	ldrd	r0, [sl, #64]	; 0x40
   177f4:	ldr	r3, [sp, #4]
   177f8:	mov	r2, r9
   177fc:	adds	r0, r0, #1
   17800:	adc	r1, r1, #0
   17804:	strd	r0, [sl, #64]	; 0x40
   17808:	movw	r1, #47036	; 0xb7bc
   1780c:	ldr	r0, [r6, #4]
   17810:	movt	r1, #1
   17814:	bl	11fe4 <fprintf@plt>
   17818:	add	r0, sl, #112	; 0x70
   1781c:	ldrd	r2, [r0]
   17820:	adds	r2, r2, #1
   17824:	adc	r3, r3, #0
   17828:	strd	r2, [r0]
   1782c:	ldrd	r0, [sl, #128]	; 0x80
   17830:	adds	r0, r0, #1
   17834:	adc	r1, r1, #0
   17838:	strd	r0, [sl, #128]	; 0x80
   1783c:	sub	sp, fp, #48	; 0x30
   17840:	vpop	{d8-d9}
   17844:	add	sp, sp, #4
   17848:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1784c:	ldrd	r0, [sl, #8]
   17850:	mov	r2, #1
   17854:	adds	r0, r0, #1
   17858:	adc	r1, r1, #0
   1785c:	strd	r0, [sl, #8]
   17860:	movw	r0, #49384	; 0xc0e8
   17864:	mov	r1, #31
   17868:	movt	r0, #2
   1786c:	ldr	r3, [r0]
   17870:	movw	r0, #47074	; 0xb7e2
   17874:	movt	r0, #1
   17878:	bl	11f54 <fwrite@plt>
   1787c:	mov	r0, #1
   17880:	bl	11fb4 <exit@plt>
   17884:	nop	{0}
   17888:	nop	{0}
   1788c:	nop	{0}
   17890:	andeq	r0, r0, r1
   17894:	andeq	r0, r0, r0
   17898:	andeq	r0, r0, r1
   1789c:	andeq	r0, r0, r0
   178a0:	push	{r4, r5, r6, lr}
   178a4:	sub	sp, sp, #8
   178a8:	movw	r0, #47171	; 0xb843
   178ac:	movw	r1, #43909	; 0xab85
   178b0:	movw	r2, #35541	; 0x8ad5
   178b4:	movt	r0, #1
   178b8:	movt	r1, #1
   178bc:	movt	r2, #2116	; 0x844
   178c0:	bl	17a38 <__generate_code_for_binary_boolean_expression@@Base+0x468>
   178c4:	movw	r0, #47856	; 0xbaf0
   178c8:	movw	r6, #47584	; 0xb9e0
   178cc:	mov	r5, #0
   178d0:	movt	r0, #1
   178d4:	movt	r6, #1
   178d8:	add	r4, r0, #4
   178dc:	mov	r3, r6
   178e0:	ldr	r0, [r3, r5]!
   178e4:	ldr	r1, [r3, #16]
   178e8:	str	r1, [sp]
   178ec:	ldmib	r3, {r1, r2}
   178f0:	ldrb	r3, [r3, #12]
   178f4:	bl	18158 <__generate_code_for_binary_boolean_expression@@Base+0xb88>
   178f8:	ldrd	r0, [r4, #-4]
   178fc:	bl	18a0c <__generate_code_for_binary_boolean_expression@@Base+0x143c>
   17900:	add	r5, r5, #20
   17904:	add	r4, r4, #8
   17908:	cmp	r5, #260	; 0x104
   1790c:	bne	178dc <__generate_code_for_binary_boolean_expression@@Base+0x30c>
   17910:	bl	19194 <__generate_code_for_binary_boolean_expression@@Base+0x1bc4>
   17914:	add	sp, sp, #8
   17918:	pop	{r4, r5, r6, lr}
   1791c:	b	19f00 <__generate_code_for_binary_boolean_expression@@Base+0x2930>
   17920:	push	{fp, lr}
   17924:	bl	178a0 <__generate_code_for_binary_boolean_expression@@Base+0x2d0>
   17928:	movw	r0, #53168	; 0xcfb0
   1792c:	movw	ip, #53264	; 0xd010
   17930:	vmov.i32	q8, #0	; 0x00000000
   17934:	mov	lr, #0
   17938:	movt	r0, #2
   1793c:	movt	ip, #2
   17940:	add	r1, r0, #48	; 0x30
   17944:	add	r2, ip, #16
   17948:	vst1.64	{d16-d17}, [r1 :128]
   1794c:	add	r1, r0, #32
   17950:	vst1.64	{d16-d17}, [r2 :128]
   17954:	add	r2, r0, #64	; 0x40
   17958:	vst1.64	{d16-d17}, [r1 :128]
   1795c:	add	r1, r0, #16
   17960:	vst1.64	{d16-d17}, [r1 :128]
   17964:	vst1.64	{d16-d17}, [r2 :128]
   17968:	movw	r2, #52928	; 0xcec0
   1796c:	movw	r1, #53360	; 0xd070
   17970:	movt	r2, #2
   17974:	movt	r1, #2
   17978:	add	r3, r2, #16
   1797c:	str	lr, [r1, #32]
   17980:	str	lr, [r2, #80]	; 0x50
   17984:	vst1.64	{d16-d17}, [r3 :128]
   17988:	add	r3, r2, #32
   1798c:	vst1.64	{d16-d17}, [r3 :128]
   17990:	add	r3, r2, #48	; 0x30
   17994:	vst1.64	{d16-d17}, [r3 :128]
   17998:	add	r3, r2, #64	; 0x40
   1799c:	vst1.64	{d16-d17}, [r3 :128]
   179a0:	add	r3, r1, #16
   179a4:	vst1.64	{d16-d17}, [r3 :128]
   179a8:	add	r3, r1, #48	; 0x30
   179ac:	vst1.64	{d16-d17}, [r3 :128]
   179b0:	add	r3, r1, #64	; 0x40
   179b4:	vst1.64	{d16-d17}, [r3 :128]
   179b8:	add	r3, r1, #80	; 0x50
   179bc:	vst1.64	{d16-d17}, [r3 :128]
   179c0:	mov	r3, #84	; 0x54
   179c4:	vst1.64	{d16-d17}, [r2 :128], r3
   179c8:	str	lr, [r2]
   179cc:	mov	r2, #36	; 0x24
   179d0:	vst1.64	{d16-d17}, [r1 :128], r2
   179d4:	mov	r2, ip
   179d8:	str	lr, [r1]
   179dc:	mov	r1, #80	; 0x50
   179e0:	vst1.64	{d16-d17}, [r0 :128], r1
   179e4:	mov	r1, #48	; 0x30
   179e8:	vst1.64	{d16-d17}, [r2 :128], r1
   179ec:	add	r1, ip, #32
   179f0:	vst1.64	{d16-d17}, [r0 :128]
   179f4:	add	r0, ip, #80	; 0x50
   179f8:	vst1.64	{d16-d17}, [r2 :128]
   179fc:	vst1.64	{d16-d17}, [r1 :128]
   17a00:	vst1.64	{d16-d17}, [r0 :128]
   17a04:	add	r0, ip, #64	; 0x40
   17a08:	mov	r1, #0
   17a0c:	mov	r2, #136	; 0x88
   17a10:	vst1.64	{d16-d17}, [r0 :128]
   17a14:	movw	r0, #53024	; 0xcf20
   17a18:	movt	r0, #2
   17a1c:	bl	12014 <memset@plt>
   17a20:	pop	{fp, pc}
   17a24:	movw	r0, #30880	; 0x78a0
   17a28:	movw	r1, #31008	; 0x7920
   17a2c:	movt	r0, #1
   17a30:	movt	r1, #1
   17a34:	b	1a3b4 <__gcov_flush@@Base+0xb8>
   17a38:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17a3c:	add	fp, sp, #28
   17a40:	sub	sp, sp, #36	; 0x24
   17a44:	mov	r9, r1
   17a48:	mov	r6, r0
   17a4c:	add	r0, sp, #28
   17a50:	add	r1, sp, #32
   17a54:	mov	r8, r2
   17a58:	bl	1a84c <__gcov_flush@@Base+0x550>
   17a5c:	cmp	r0, #0
   17a60:	beq	17aa4 <__generate_code_for_binary_boolean_expression@@Base+0x4d4>
   17a64:	mov	r4, r0
   17a68:	mov	r0, r6
   17a6c:	ldr	r5, [sp, #32]
   17a70:	bl	11fc0 <strlen@plt>
   17a74:	add	r0, r5, r0
   17a78:	add	r0, r0, #2
   17a7c:	bl	11f78 <malloc@plt>
   17a80:	mov	r7, r0
   17a84:	ldr	r0, [sp, #28]
   17a88:	mov	r1, r6
   17a8c:	mov	r2, r4
   17a90:	str	r0, [sp]
   17a94:	mov	r0, r7
   17a98:	mov	r3, r5
   17a9c:	bl	1a8e0 <__gcov_flush@@Base+0x5e4>
   17aa0:	b	17ab0 <__generate_code_for_binary_boolean_expression@@Base+0x4e0>
   17aa4:	mov	r0, r6
   17aa8:	bl	11f3c <strdup@plt>
   17aac:	mov	r7, r0
   17ab0:	ldr	r0, [pc, #1492]	; 1808c <__generate_code_for_binary_boolean_expression@@Base+0xabc>
   17ab4:	ldr	r6, [pc, #1492]	; 18090 <__generate_code_for_binary_boolean_expression@@Base+0xac0>
   17ab8:	mov	r1, #2
   17abc:	add	r0, pc, r0
   17ac0:	add	r6, pc, r6
   17ac4:	str	r7, [r0]
   17ac8:	mov	r0, r7
   17acc:	mov	r5, #0
   17ad0:	strb	r5, [r6]
   17ad4:	bl	11f60 <open64@plt>
   17ad8:	ldr	r4, [pc, #1460]	; 18094 <__generate_code_for_binary_boolean_expression@@Base+0xac4>
   17adc:	cmn	r0, #1
   17ae0:	add	r4, pc, r4
   17ae4:	str	r0, [r4]
   17ae8:	beq	17af8 <__generate_code_for_binary_boolean_expression@@Base+0x528>
   17aec:	ldr	r6, [pc, #1444]	; 18098 <__generate_code_for_binary_boolean_expression@@Base+0xac8>
   17af0:	add	r6, pc, r6
   17af4:	b	17b54 <__generate_code_for_binary_boolean_expression@@Base+0x584>
   17af8:	mov	r0, #1
   17afc:	strb	r0, [r6]
   17b00:	ldr	r0, [pc, #1488]	; 180d8 <__generate_code_for_binary_boolean_expression@@Base+0xb08>
   17b04:	mov	r1, #66	; 0x42
   17b08:	mov	r2, #420	; 0x1a4
   17b0c:	ldr	r0, [pc, r0]
   17b10:	bl	11f60 <open64@plt>
   17b14:	ldr	r6, [pc, #1472]	; 180dc <__generate_code_for_binary_boolean_expression@@Base+0xb0c>
   17b18:	cmn	r0, #1
   17b1c:	str	r0, [r4]
   17b20:	add	r6, pc, r6
   17b24:	bne	17b54 <__generate_code_for_binary_boolean_expression@@Base+0x584>
   17b28:	ldr	r0, [pc, #1456]	; 180e0 <__generate_code_for_binary_boolean_expression@@Base+0xb10>
   17b2c:	ldr	r0, [pc, r0]
   17b30:	bl	1a4c4 <__gcov_flush@@Base+0x1c8>
   17b34:	ldr	r0, [pc, #1448]	; 180e4 <__generate_code_for_binary_boolean_expression@@Base+0xb14>
   17b38:	mov	r1, #66	; 0x42
   17b3c:	mov	r2, #420	; 0x1a4
   17b40:	ldr	r0, [pc, r0]
   17b44:	bl	11f60 <open64@plt>
   17b48:	cmn	r0, #1
   17b4c:	str	r0, [r4]
   17b50:	beq	18044 <__generate_code_for_binary_boolean_expression@@Base+0xa74>
   17b54:	str	r9, [sp, #20]
   17b58:	str	r8, [sp, #24]
   17b5c:	bl	1a588 <__gcov_flush@@Base+0x28c>
   17b60:	ldr	r0, [pc, #1332]	; 1809c <__generate_code_for_binary_boolean_expression@@Base+0xacc>
   17b64:	mov	r1, r6
   17b68:	ldr	r0, [pc, r0]
   17b6c:	bl	11ed0 <fdopen@plt>
   17b70:	ldr	r7, [pc, #1320]	; 180a0 <__generate_code_for_binary_boolean_expression@@Base+0xad0>
   17b74:	ldr	r9, [pc, #1320]	; 180a4 <__generate_code_for_binary_boolean_expression@@Base+0xad4>
   17b78:	ldr	r1, [pc, #1320]	; 180a8 <__generate_code_for_binary_boolean_expression@@Base+0xad8>
   17b7c:	ldr	sl, [pc, #1320]	; 180ac <__generate_code_for_binary_boolean_expression@@Base+0xadc>
   17b80:	add	r7, pc, r7
   17b84:	add	r9, pc, r9
   17b88:	add	r1, pc, r1
   17b8c:	add	sl, pc, sl
   17b90:	str	r5, [r7]
   17b94:	str	r5, [r7, #4]
   17b98:	str	r5, [r9]
   17b9c:	str	r5, [r9, #4]
   17ba0:	str	r0, [r1]
   17ba4:	str	r5, [sl]
   17ba8:	ldr	r6, [pc, #1280]	; 180b0 <__generate_code_for_binary_boolean_expression@@Base+0xae0>
   17bac:	mov	r4, #131072	; 0x20000
   17bb0:	add	r6, pc, r6
   17bb4:	ldrb	r1, [r6]
   17bb8:	cmp	r1, #0
   17bbc:	beq	17cb0 <__generate_code_for_binary_boolean_expression@@Base+0x6e0>
   17bc0:	mov	r0, r4
   17bc4:	bl	11f78 <malloc@plt>
   17bc8:	mov	r8, r0
   17bcc:	strd	r4, [r7]
   17bd0:	str	r0, [sl]
   17bd4:	mov	r0, r8
   17bd8:	mov	r1, #0
   17bdc:	mov	r2, #131072	; 0x20000
   17be0:	bl	12014 <memset@plt>
   17be4:	ldr	r0, [r9, #4]
   17be8:	ldr	r1, [pc, #1284]	; 180f4 <__generate_code_for_binary_boolean_expression@@Base+0xb24>
   17bec:	mov	r7, #7
   17bf0:	orr	r7, r7, #131072	; 0x20000
   17bf4:	ldr	r1, [pc, r1]
   17bf8:	ldr	sl, [pc, #1272]	; 180f8 <__generate_code_for_binary_boolean_expression@@Base+0xb28>
   17bfc:	adds	r2, r1, #4
   17c00:	add	sl, pc, sl
   17c04:	adc	r3, r0, #0
   17c08:	ldr	r5, [sl, #4]
   17c0c:	ldr	r4, [pc, #1256]	; 180fc <__generate_code_for_binary_boolean_expression@@Base+0xb2c>
   17c10:	ldr	r4, [pc, r4]
   17c14:	subs	r2, r4, r2
   17c18:	sbcs	r2, r5, r3
   17c1c:	bcs	17d30 <__generate_code_for_binary_boolean_expression@@Base+0x760>
   17c20:	adds	r1, r7, r1
   17c24:	adc	r0, r0, #0
   17c28:	subs	r1, r1, #4
   17c2c:	sbc	r0, r0, #0
   17c30:	mvn	r2, #0
   17c34:	and	r5, r0, r2
   17c38:	mov	r0, #16646144	; 0xfe0000
   17c3c:	orr	r0, r0, #-16777216	; 0xff000000
   17c40:	and	r4, r1, r0
   17c44:	mov	r0, r8
   17c48:	mov	r1, r4
   17c4c:	bl	11f48 <realloc@plt>
   17c50:	ldr	r1, [pc, #1068]	; 18084 <__generate_code_for_binary_boolean_expression@@Base+0xab4>
   17c54:	strd	r4, [sl]
   17c58:	mov	r3, r0
   17c5c:	mov	r7, r1
   17c60:	lsr	r2, r1, #24
   17c64:	ldr	r1, [pc, #1176]	; 18104 <__generate_code_for_binary_boolean_expression@@Base+0xb34>
   17c68:	ldrb	r6, [r6]
   17c6c:	lsr	r4, r7, #16
   17c70:	add	r1, pc, r1
   17c74:	str	r0, [r1]
   17c78:	ldr	r1, [r9, #4]
   17c7c:	ldr	r5, [pc, #1156]	; 18108 <__generate_code_for_binary_boolean_expression@@Base+0xb38>
   17c80:	ldr	r5, [pc, r5]
   17c84:	strb	r7, [r3, r5]!
   17c88:	strb	r2, [r3, #3]
   17c8c:	lsr	r2, r7, #8
   17c90:	strb	r2, [r3, #1]
   17c94:	adds	r2, r5, #4
   17c98:	adc	ip, r1, #0
   17c9c:	cmp	r6, #1
   17ca0:	strb	r4, [r3, #2]
   17ca4:	stm	r9, {r2, ip}
   17ca8:	beq	17d74 <__generate_code_for_binary_boolean_expression@@Base+0x7a4>
   17cac:	b	17f2c <__generate_code_for_binary_boolean_expression@@Base+0x95c>
   17cb0:	mov	r1, #0
   17cb4:	mov	r2, #2
   17cb8:	mov	r8, #0
   17cbc:	bl	120a4 <fseek@plt>
   17cc0:	ldr	r0, [pc, #1004]	; 180b4 <__generate_code_for_binary_boolean_expression@@Base+0xae4>
   17cc4:	ldr	r0, [pc, r0]
   17cc8:	bl	11f24 <ftell@plt>
   17ccc:	mov	r2, r0
   17cd0:	ldr	r0, [pc, #992]	; 180b8 <__generate_code_for_binary_boolean_expression@@Base+0xae8>
   17cd4:	asr	r3, r2, #31
   17cd8:	add	r0, pc, r0
   17cdc:	cmp	r2, #0
   17ce0:	strd	r2, [r0]
   17ce4:	beq	17fd4 <__generate_code_for_binary_boolean_expression@@Base+0xa04>
   17ce8:	ldr	r0, [pc, #972]	; 180bc <__generate_code_for_binary_boolean_expression@@Base+0xaec>
   17cec:	mov	r1, r2
   17cf0:	mov	r2, #3
   17cf4:	mov	r3, #1
   17cf8:	ldr	r0, [pc, r0]
   17cfc:	str	r8, [sp, #8]
   17d00:	str	r8, [sp, #12]
   17d04:	str	r0, [sp]
   17d08:	mov	r0, #0
   17d0c:	bl	11f18 <mmap64@plt>
   17d10:	cmn	r0, #1
   17d14:	str	r0, [sl]
   17d18:	beq	17f9c <__generate_code_for_binary_boolean_expression@@Base+0x9cc>
   17d1c:	ldrb	r1, [r6]
   17d20:	cmp	r1, #0
   17d24:	beq	17eec <__generate_code_for_binary_boolean_expression@@Base+0x91c>
   17d28:	mov	r8, r0
   17d2c:	b	17be4 <__generate_code_for_binary_boolean_expression@@Base+0x614>
   17d30:	ldr	r1, [r9, #4]
   17d34:	ldr	r5, [pc, #964]	; 18100 <__generate_code_for_binary_boolean_expression@@Base+0xb30>
   17d38:	ldr	r0, [pc, #836]	; 18084 <__generate_code_for_binary_boolean_expression@@Base+0xab4>
   17d3c:	mov	r6, r8
   17d40:	ldr	r5, [pc, r5]
   17d44:	mov	r7, r0
   17d48:	lsr	r2, r7, #16
   17d4c:	strb	r7, [r6, r5]!
   17d50:	lsr	r0, r0, #24
   17d54:	lsr	r3, r7, #8
   17d58:	strb	r2, [r6, #2]
   17d5c:	adds	r2, r5, #4
   17d60:	strb	r0, [r6, #3]
   17d64:	strb	r3, [r6, #1]
   17d68:	adc	ip, r1, #0
   17d6c:	stm	r9, {r2, ip}
   17d70:	mov	r0, r8
   17d74:	ldr	r7, [sl, #4]
   17d78:	ldr	r3, [pc, #908]	; 1810c <__generate_code_for_binary_boolean_expression@@Base+0xb3c>
   17d7c:	adds	r6, r5, #8
   17d80:	adc	r4, r1, #0
   17d84:	ldr	r3, [pc, r3]
   17d88:	subs	r3, r3, r6
   17d8c:	sbcs	r3, r7, r4
   17d90:	bcs	17e34 <__generate_code_for_binary_boolean_expression@@Base+0x864>
   17d94:	mov	r2, #7
   17d98:	orr	r2, r2, #131072	; 0x20000
   17d9c:	adds	r2, r5, r2
   17da0:	adc	r1, r1, #0
   17da4:	mvn	r3, #0
   17da8:	and	r5, r1, r3
   17dac:	mov	r1, #16646144	; 0xfe0000
   17db0:	orr	r1, r1, #-16777216	; 0xff000000
   17db4:	and	r4, r2, r1
   17db8:	mov	r1, r4
   17dbc:	bl	11f48 <realloc@plt>
   17dc0:	strd	r4, [sl]
   17dc4:	ldr	r1, [pc, #840]	; 18114 <__generate_code_for_binary_boolean_expression@@Base+0xb44>
   17dc8:	mov	r4, r0
   17dcc:	mov	lr, r9
   17dd0:	add	r1, pc, r1
   17dd4:	str	r0, [r1]
   17dd8:	ldr	r1, [pc, #824]	; 18118 <__generate_code_for_binary_boolean_expression@@Base+0xb48>
   17ddc:	ldr	r2, [sp, #20]
   17de0:	ldr	ip, [r9, #4]
   17de4:	add	r1, pc, r1
   17de8:	ldrb	r3, [r1]
   17dec:	ldrb	r1, [r2]
   17df0:	ldrb	r7, [r2, #1]
   17df4:	ldrb	r6, [r2, #2]
   17df8:	ldrb	r5, [r2, #3]
   17dfc:	ldr	r2, [pc, #792]	; 1811c <__generate_code_for_binary_boolean_expression@@Base+0xb4c>
   17e00:	ldr	r2, [pc, r2]
   17e04:	strb	r1, [r4, r2]!
   17e08:	strb	r5, [r4, #3]
   17e0c:	ldr	r5, [sp, #24]
   17e10:	strb	r6, [r4, #2]
   17e14:	adds	r6, r2, #4
   17e18:	adc	r1, ip, #0
   17e1c:	cmp	r3, #1
   17e20:	str	r6, [lr]
   17e24:	strb	r7, [r4, #1]
   17e28:	str	r1, [lr, #4]
   17e2c:	beq	17e74 <__generate_code_for_binary_boolean_expression@@Base+0x8a4>
   17e30:	b	17f6c <__generate_code_for_binary_boolean_expression@@Base+0x99c>
   17e34:	ldr	r6, [sp, #20]
   17e38:	mov	r5, r0
   17e3c:	ldrb	r1, [r6]
   17e40:	ldrb	r3, [r6, #1]
   17e44:	ldrb	r7, [r6, #2]
   17e48:	ldrb	r6, [r6, #3]
   17e4c:	strb	r1, [r5, r2]!
   17e50:	strb	r6, [r5, #3]
   17e54:	strb	r3, [r5, #1]
   17e58:	adds	r6, r2, #4
   17e5c:	mov	r3, r9
   17e60:	adc	r1, ip, #0
   17e64:	strb	r7, [r5, #2]
   17e68:	str	r6, [r3]
   17e6c:	str	r1, [r3, #4]
   17e70:	ldr	r5, [sp, #24]
   17e74:	ldr	r7, [sl, #4]
   17e78:	ldr	r4, [pc, #672]	; 18120 <__generate_code_for_binary_boolean_expression@@Base+0xb50>
   17e7c:	adds	r3, r2, #8
   17e80:	adc	lr, ip, #0
   17e84:	ldr	r4, [pc, r4]
   17e88:	subs	r3, r4, r3
   17e8c:	sbcs	r3, r7, lr
   17e90:	bcs	17ee4 <__generate_code_for_binary_boolean_expression@@Base+0x914>
   17e94:	mov	r1, #7
   17e98:	orr	r1, r1, #131072	; 0x20000
   17e9c:	adds	r1, r2, r1
   17ea0:	adc	r2, ip, #0
   17ea4:	mvn	r3, #0
   17ea8:	and	r7, r2, r3
   17eac:	mov	r2, #16646144	; 0xfe0000
   17eb0:	orr	r2, r2, #-16777216	; 0xff000000
   17eb4:	and	r4, r1, r2
   17eb8:	mov	r1, r4
   17ebc:	bl	11f48 <realloc@plt>
   17ec0:	stm	sl, {r4, r7}
   17ec4:	ldr	r1, [r9, #4]
   17ec8:	ldr	r2, [pc, #596]	; 18124 <__generate_code_for_binary_boolean_expression@@Base+0xb54>
   17ecc:	mov	lr, r9
   17ed0:	add	r2, pc, r2
   17ed4:	str	r0, [r2]
   17ed8:	ldr	r6, [pc, #584]	; 18128 <__generate_code_for_binary_boolean_expression@@Base+0xb58>
   17edc:	ldr	r6, [pc, r6]
   17ee0:	b	17f6c <__generate_code_for_binary_boolean_expression@@Base+0x99c>
   17ee4:	mov	lr, r9
   17ee8:	b	17f6c <__generate_code_for_binary_boolean_expression@@Base+0x99c>
   17eec:	ldr	r6, [r9, #4]
   17ef0:	ldr	r5, [pc, #536]	; 18110 <__generate_code_for_binary_boolean_expression@@Base+0xb40>
   17ef4:	ldr	r1, [pc, #392]	; 18084 <__generate_code_for_binary_boolean_expression@@Base+0xab4>
   17ef8:	mov	r4, r0
   17efc:	ldr	r5, [pc, r5]
   17f00:	mov	r7, r1
   17f04:	lsr	r2, r7, #16
   17f08:	strb	r7, [r4, r5]!
   17f0c:	lsr	r1, r1, #24
   17f10:	strb	r2, [r4, #2]
   17f14:	adds	r2, r5, #4
   17f18:	lsr	r3, r7, #8
   17f1c:	adc	ip, r6, #0
   17f20:	strb	r1, [r4, #3]
   17f24:	strb	r3, [r4, #1]
   17f28:	stm	r9, {r2, ip}
   17f2c:	ldr	r4, [sp, #20]
   17f30:	mov	r5, r0
   17f34:	mov	lr, r9
   17f38:	ldrb	r1, [r4]
   17f3c:	ldrb	r6, [r4, #3]
   17f40:	ldrb	r3, [r4, #1]
   17f44:	ldrb	r7, [r4, #2]
   17f48:	strb	r1, [r5, r2]!
   17f4c:	strb	r6, [r5, #3]
   17f50:	adds	r6, r2, #4
   17f54:	adc	r1, ip, #0
   17f58:	strb	r7, [r5, #2]
   17f5c:	strb	r3, [r5, #1]
   17f60:	str	r6, [lr]
   17f64:	str	r1, [lr, #4]
   17f68:	ldr	r5, [sp, #24]
   17f6c:	lsr	r2, r5, #24
   17f70:	strb	r5, [r0, r6]!
   17f74:	lsr	r3, r5, #16
   17f78:	lsr	r7, r5, #8
   17f7c:	strb	r2, [r0, #3]
   17f80:	strb	r3, [r0, #2]
   17f84:	strb	r7, [r0, #1]
   17f88:	adds	r0, r6, #4
   17f8c:	adc	r1, r1, #0
   17f90:	strd	r0, [lr]
   17f94:	sub	sp, fp, #28
   17f98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17f9c:	bl	11ff0 <__errno_location@plt>
   17fa0:	ldr	r1, [pc, #280]	; 180c0 <__generate_code_for_binary_boolean_expression@@Base+0xaf0>
   17fa4:	ldr	r1, [pc, r1]
   17fa8:	ldr	r0, [r0]
   17fac:	ldr	r4, [r1]
   17fb0:	ldr	r5, [pc, #268]	; 180c4 <__generate_code_for_binary_boolean_expression@@Base+0xaf4>
   17fb4:	ldr	r5, [pc, r5]
   17fb8:	bl	11f90 <strerror@plt>
   17fbc:	ldr	r1, [pc, #260]	; 180c8 <__generate_code_for_binary_boolean_expression@@Base+0xaf8>
   17fc0:	mov	r3, r0
   17fc4:	mov	r0, r4
   17fc8:	add	r1, pc, r1
   17fcc:	mov	r2, r5
   17fd0:	bl	11fe4 <fprintf@plt>
   17fd4:	ldr	r0, [pc, #240]	; 180cc <__generate_code_for_binary_boolean_expression@@Base+0xafc>
   17fd8:	str	r8, [sl]
   17fdc:	mov	r2, #16646144	; 0xfe0000
   17fe0:	add	r0, pc, r0
   17fe4:	orr	r2, r2, #-16777216	; 0xff000000
   17fe8:	str	r8, [r0]
   17fec:	str	r8, [r0, #4]
   17ff0:	mov	r0, #1
   17ff4:	strb	r0, [r6]
   17ff8:	ldr	r0, [r9, #4]
   17ffc:	ldr	r1, [pc, #204]	; 180d0 <__generate_code_for_binary_boolean_expression@@Base+0xb00>
   18000:	mvn	r3, #0
   18004:	eor	r3, r0, r3
   18008:	ldr	r1, [pc, r1]
   1800c:	eor	r2, r1, r2
   18010:	orrs	r2, r2, r3
   18014:	beq	17bd4 <__generate_code_for_binary_boolean_expression@@Base+0x604>
   18018:	ldr	r2, [pc, #104]	; 18088 <__generate_code_for_binary_boolean_expression@@Base+0xab8>
   1801c:	ldr	r7, [pc, #176]	; 180d4 <__generate_code_for_binary_boolean_expression@@Base+0xb04>
   18020:	adds	r1, r1, r2
   18024:	mov	r2, #16646144	; 0xfe0000
   18028:	orr	r2, r2, #-16777216	; 0xff000000
   1802c:	and	r4, r1, r2
   18030:	adc	r0, r0, #0
   18034:	mvn	r1, #0
   18038:	and	r5, r0, r1
   1803c:	add	r7, pc, r7
   18040:	b	17bc0 <__generate_code_for_binary_boolean_expression@@Base+0x5f0>
   18044:	bl	11ff0 <__errno_location@plt>
   18048:	ldr	r1, [pc, #152]	; 180e8 <__generate_code_for_binary_boolean_expression@@Base+0xb18>
   1804c:	ldr	r1, [pc, r1]
   18050:	ldr	r0, [r0]
   18054:	ldr	r4, [r1]
   18058:	ldr	r5, [pc, #140]	; 180ec <__generate_code_for_binary_boolean_expression@@Base+0xb1c>
   1805c:	ldr	r5, [pc, r5]
   18060:	bl	11f90 <strerror@plt>
   18064:	ldr	r1, [pc, #132]	; 180f0 <__generate_code_for_binary_boolean_expression@@Base+0xb20>
   18068:	mov	r3, r0
   1806c:	mov	r0, r4
   18070:	add	r1, pc, r1
   18074:	mov	r2, r5
   18078:	bl	11fe4 <fprintf@plt>
   1807c:	sub	sp, fp, #28
   18080:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18084:	strbvs	r6, [r3, -r1, ror #8]!
   18088:	strdeq	pc, [r3], -pc	; <UNPREDICTABLE>
   1808c:	andeq	r5, r1, ip, lsl #12
   18090:	andeq	r5, r1, ip, lsl #12
   18094:	andeq	r4, r1, r8, ror #11
   18098:	andeq	r4, r0, r0, rrx
   1809c:	andeq	r4, r1, r0, ror #10
   180a0:	andeq	r5, r1, r8, asr r5
   180a4:	andeq	r5, r1, ip, asr r5
   180a8:	andeq	r5, r1, r8, asr #10
   180ac:	andeq	r5, r1, r8, asr #10
   180b0:	andeq	r5, r1, ip, lsl r5
   180b4:	andeq	r5, r1, ip, lsl #8
   180b8:	andeq	r5, r1, r0, lsr #8
   180bc:	ldrdeq	r4, [r1], -r0
   180c0:	andeq	r4, r1, r4, lsl r1
   180c4:	andeq	r5, r1, r4, lsl r1
   180c8:	andeq	r3, r0, sl, ror #25
   180cc:	strdeq	r5, [r1], -r8
   180d0:	ldrdeq	r5, [r1], -r8
   180d4:	muleq	r1, ip, r0
   180d8:			; <UNDEFINED> instruction: 0x000155bc
   180dc:	andeq	r4, r0, r4, lsr r0
   180e0:	muleq	r1, ip, r5
   180e4:	andeq	r5, r1, r8, lsl #11
   180e8:	andeq	r4, r1, ip, rrx
   180ec:	andeq	r5, r1, ip, rrx
   180f0:	andeq	r3, r0, r8, ror #21
   180f4:	andeq	r5, r1, ip, ror #9
   180f8:	ldrdeq	r5, [r1], -r8
   180fc:	andeq	r5, r1, r8, asr #9
   18100:	andeq	r5, r1, r0, lsr #7
   18104:	andeq	r5, r1, r4, ror #8
   18108:	andeq	r5, r1, r0, ror #8
   1810c:	andeq	r5, r1, r4, asr r3
   18110:	andeq	r5, r1, r4, ror #3
   18114:	andeq	r5, r1, r4, lsl #6
   18118:	andeq	r5, r1, r8, ror #5
   1811c:	andeq	r5, r1, r0, ror #5
   18120:	andeq	r5, r1, r4, asr r2
   18124:	andeq	r5, r1, r4, lsl #4
   18128:	andeq	r5, r1, r4, lsl #4
   1812c:	ldr	r0, [r0]
   18130:	cmn	r0, #1
   18134:	beq	18154 <__generate_code_for_binary_boolean_expression@@Base+0xb84>
   18138:	ldr	r0, [r1, r0, lsl #2]
   1813c:	cmp	r0, #0
   18140:	bxeq	lr
   18144:	ldrd	r2, [r0]
   18148:	adds	r2, r2, #1
   1814c:	adc	r3, r3, #0
   18150:	strd	r2, [r0]
   18154:	bx	lr
   18158:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1815c:	add	fp, sp, #28
   18160:	sub	sp, sp, #12
   18164:	ldr	r7, [pc, #2008]	; 18944 <__generate_code_for_binary_boolean_expression@@Base+0x1374>
   18168:	mov	sl, #2
   1816c:	cmp	r3, #0
   18170:	movne	sl, #3
   18174:	ldr	r7, [pc, r7]
   18178:	cmp	r7, #0
   1817c:	beq	1893c <__generate_code_for_binary_boolean_expression@@Base+0x136c>
   18180:	stm	sp, {r0, r2, r3}
   18184:	ldr	r0, [pc, #1980]	; 18948 <__generate_code_for_binary_boolean_expression@@Base+0x1378>
   18188:	mov	r5, r1
   1818c:	add	r0, pc, r0
   18190:	ldrb	r0, [r0]
   18194:	ldr	r8, [pc, #1968]	; 1894c <__generate_code_for_binary_boolean_expression@@Base+0x137c>
   18198:	cmp	r0, #1
   1819c:	add	r8, pc, r8
   181a0:	bne	18224 <__generate_code_for_binary_boolean_expression@@Base+0xc54>
   181a4:	ldr	r4, [pc, #1956]	; 18950 <__generate_code_for_binary_boolean_expression@@Base+0x1380>
   181a8:	ldr	r0, [r8, #4]
   181ac:	ldr	r1, [pc, #1952]	; 18954 <__generate_code_for_binary_boolean_expression@@Base+0x1384>
   181b0:	add	r4, pc, r4
   181b4:	ldr	r1, [pc, r1]
   181b8:	ldr	r7, [r4, #4]
   181bc:	ldr	r6, [pc, #1940]	; 18958 <__generate_code_for_binary_boolean_expression@@Base+0x1388>
   181c0:	adds	r2, r1, #4
   181c4:	adc	r3, r0, #0
   181c8:	ldr	r6, [pc, r6]
   181cc:	subs	r2, r6, r2
   181d0:	sbcs	r2, r7, r3
   181d4:	bcs	18224 <__generate_code_for_binary_boolean_expression@@Base+0xc54>
   181d8:	mov	r2, #7
   181dc:	orr	r2, r2, #131072	; 0x20000
   181e0:	adds	r1, r2, r1
   181e4:	adc	r0, r0, #0
   181e8:	subs	r1, r1, #4
   181ec:	sbc	r0, r0, #0
   181f0:	mvn	r2, #0
   181f4:	and	r7, r0, r2
   181f8:	mov	r0, #16646144	; 0xfe0000
   181fc:	orr	r0, r0, #-16777216	; 0xff000000
   18200:	ldr	r9, [pc, #1876]	; 1895c <__generate_code_for_binary_boolean_expression@@Base+0x138c>
   18204:	and	r6, r1, r0
   18208:	ldr	r0, [pc, #1872]	; 18960 <__generate_code_for_binary_boolean_expression@@Base+0x1390>
   1820c:	mov	r1, r6
   18210:	add	r9, pc, r9
   18214:	ldr	r0, [pc, r0]
   18218:	bl	11f48 <realloc@plt>
   1821c:	strd	r6, [r4]
   18220:	str	r0, [r9]
   18224:	ldr	r7, [pc, #1848]	; 18964 <__generate_code_for_binary_boolean_expression@@Base+0x1394>
   18228:	mov	r0, #0
   1822c:	mov	r2, #1
   18230:	ldr	r7, [pc, r7]
   18234:	ldr	ip, [pc, #1836]	; 18968 <__generate_code_for_binary_boolean_expression@@Base+0x1398>
   18238:	adds	r4, r7, #4
   1823c:	ldr	ip, [pc, ip]
   18240:	ldr	r6, [r8, #4]
   18244:	mov	r1, ip
   18248:	adc	r9, r6, #0
   1824c:	strb	r0, [r1, r7]!
   18250:	cmp	r5, #0
   18254:	strb	r2, [r1, #3]
   18258:	strb	r0, [r1, #2]
   1825c:	strb	r0, [r1, #1]
   18260:	stm	r8, {r4, r9}
   18264:	mov	r8, r5
   18268:	beq	18284 <__generate_code_for_binary_boolean_expression@@Base+0xcb4>
   1826c:	mov	r0, r8
   18270:	mov	r5, ip
   18274:	bl	11fc0 <strlen@plt>
   18278:	add	r0, sl, r0, lsr #2
   1827c:	mov	ip, r5
   18280:	add	sl, r0, #2
   18284:	ldr	r0, [pc, #1760]	; 1896c <__generate_code_for_binary_boolean_expression@@Base+0x139c>
   18288:	add	r0, pc, r0
   1828c:	ldrb	r0, [r0]
   18290:	cmp	r0, #0
   18294:	beq	18370 <__generate_code_for_binary_boolean_expression@@Base+0xda0>
   18298:	ldr	lr, [pc, #1748]	; 18974 <__generate_code_for_binary_boolean_expression@@Base+0x13a4>
   1829c:	adds	r0, r7, #8
   182a0:	adc	r1, r6, #0
   182a4:	add	lr, pc, lr
   182a8:	ldr	r2, [lr, #4]
   182ac:	ldr	r3, [pc, #1732]	; 18978 <__generate_code_for_binary_boolean_expression@@Base+0x13a8>
   182b0:	ldr	r3, [pc, r3]
   182b4:	subs	r0, r3, r0
   182b8:	sbcs	r0, r2, r1
   182bc:	bcs	183dc <__generate_code_for_binary_boolean_expression@@Base+0xe0c>
   182c0:	mov	r0, #7
   182c4:	orr	r0, r0, #131072	; 0x20000
   182c8:	adds	r0, r7, r0
   182cc:	adc	r1, r6, #0
   182d0:	mvn	r2, #0
   182d4:	and	r5, r1, r2
   182d8:	mov	r1, #16646144	; 0xfe0000
   182dc:	orr	r1, r1, #-16777216	; 0xff000000
   182e0:	and	r6, r0, r1
   182e4:	ldr	r4, [pc, #1684]	; 18980 <__generate_code_for_binary_boolean_expression@@Base+0x13b0>
   182e8:	mov	r0, ip
   182ec:	mov	r1, r6
   182f0:	add	r4, pc, r4
   182f4:	mov	r7, lr
   182f8:	bl	11f48 <realloc@plt>
   182fc:	mov	lr, r7
   18300:	mov	ip, r0
   18304:	str	r6, [lr]
   18308:	str	r5, [lr, #4]
   1830c:	str	ip, [r4]
   18310:	ldr	r1, [pc, #1644]	; 18984 <__generate_code_for_binary_boolean_expression@@Base+0x13b4>
   18314:	lsr	r0, sl, #24
   18318:	add	r1, pc, r1
   1831c:	lsr	r3, sl, #16
   18320:	ldrb	r2, [r1]
   18324:	ldr	r1, [pc, #1628]	; 18988 <__generate_code_for_binary_boolean_expression@@Base+0x13b8>
   18328:	add	r1, pc, r1
   1832c:	mov	r7, r1
   18330:	ldr	r9, [r1, #4]
   18334:	ldr	r4, [pc, #1616]	; 1898c <__generate_code_for_binary_boolean_expression@@Base+0x13bc>
   18338:	mov	r1, ip
   1833c:	ldr	r4, [pc, r4]
   18340:	strb	sl, [r1, r4]!
   18344:	strb	r0, [r1, #3]
   18348:	lsr	r0, sl, #8
   1834c:	strb	r0, [r1, #1]
   18350:	adds	r0, r4, #4
   18354:	strb	r3, [r1, #2]
   18358:	adc	r1, r9, #0
   1835c:	mov	sl, r7
   18360:	cmp	r2, #1
   18364:	strd	r0, [sl]
   18368:	bne	183a4 <__generate_code_for_binary_boolean_expression@@Base+0xdd4>
   1836c:	b	18410 <__generate_code_for_binary_boolean_expression@@Base+0xe40>
   18370:	mov	r3, ip
   18374:	lsr	r0, sl, #24
   18378:	strb	sl, [r3, r4]!
   1837c:	lsr	r1, sl, #16
   18380:	lsr	r2, sl, #8
   18384:	strb	r0, [r3, #3]
   18388:	strb	r1, [r3, #2]
   1838c:	strb	r2, [r3, #1]
   18390:	ldr	sl, [pc, #1496]	; 18970 <__generate_code_for_binary_boolean_expression@@Base+0x13a0>
   18394:	adds	r0, r7, #8
   18398:	adc	r1, r6, #0
   1839c:	add	sl, pc, sl
   183a0:	strd	r0, [sl]
   183a4:	ldr	r5, [sp]
   183a8:	mov	r6, ip
   183ac:	lsr	r2, r5, #24
   183b0:	strb	r5, [r6, r0]!
   183b4:	lsr	r3, r5, #16
   183b8:	lsr	r7, r5, #8
   183bc:	strb	r2, [r6, #3]
   183c0:	strb	r3, [r6, #2]
   183c4:	strb	r7, [r6, #1]
   183c8:	adds	r2, r0, #4
   183cc:	adc	r3, r1, #0
   183d0:	ldmib	sp, {r5, r9}
   183d4:	strd	r2, [sl]
   183d8:	b	18584 <__generate_code_for_binary_boolean_expression@@Base+0xfb4>
   183dc:	mov	r3, ip
   183e0:	lsr	r0, sl, #24
   183e4:	strb	sl, [r3, r4]!
   183e8:	lsr	r1, sl, #16
   183ec:	lsr	r2, sl, #8
   183f0:	strb	r0, [r3, #3]
   183f4:	strb	r1, [r3, #2]
   183f8:	strb	r2, [r3, #1]
   183fc:	ldr	sl, [pc, #1400]	; 1897c <__generate_code_for_binary_boolean_expression@@Base+0x13ac>
   18400:	adds	r0, r7, #8
   18404:	adc	r1, r6, #0
   18408:	add	sl, pc, sl
   1840c:	strd	r0, [sl]
   18410:	ldr	r7, [lr, #4]
   18414:	ldr	r6, [pc, #1396]	; 18990 <__generate_code_for_binary_boolean_expression@@Base+0x13c0>
   18418:	adds	r2, r4, #8
   1841c:	adc	r3, r9, #0
   18420:	ldr	r6, [pc, r6]
   18424:	subs	r2, r6, r2
   18428:	sbcs	r2, r7, r3
   1842c:	bcs	184d4 <__generate_code_for_binary_boolean_expression@@Base+0xf04>
   18430:	mov	r0, #7
   18434:	orr	r0, r0, #131072	; 0x20000
   18438:	adds	r0, r4, r0
   1843c:	adc	r1, r9, #0
   18440:	mvn	r2, #0
   18444:	and	r5, r1, r2
   18448:	mov	r1, #16646144	; 0xfe0000
   1844c:	orr	r1, r1, #-16777216	; 0xff000000
   18450:	and	r4, r0, r1
   18454:	ldr	r7, [pc, #1336]	; 18994 <__generate_code_for_binary_boolean_expression@@Base+0x13c4>
   18458:	mov	r0, ip
   1845c:	mov	r1, r4
   18460:	add	r7, pc, r7
   18464:	mov	r6, lr
   18468:	bl	11f48 <realloc@plt>
   1846c:	mov	lr, r6
   18470:	str	r0, [r7]
   18474:	strd	r4, [lr]
   18478:	mov	ip, r0
   1847c:	ldr	r6, [sp]
   18480:	ldr	r0, [pc, #1296]	; 18998 <__generate_code_for_binary_boolean_expression@@Base+0x13c8>
   18484:	ldr	r1, [sl, #4]
   18488:	mov	r3, ip
   1848c:	add	r0, pc, r0
   18490:	lsr	r2, r6, #24
   18494:	ldrb	r7, [r0]
   18498:	ldr	r0, [pc, #1276]	; 1899c <__generate_code_for_binary_boolean_expression@@Base+0x13cc>
   1849c:	ldr	r0, [pc, r0]
   184a0:	strb	r6, [r3, r0]!
   184a4:	ldmib	sp, {r5, r9}
   184a8:	strb	r2, [r3, #3]
   184ac:	lsr	r2, r6, #8
   184b0:	lsr	r6, r6, #16
   184b4:	strb	r2, [r3, #1]
   184b8:	adds	r2, r0, #4
   184bc:	strb	r6, [r3, #2]
   184c0:	adc	r3, r1, #0
   184c4:	cmp	r7, #1
   184c8:	strd	r2, [sl]
   184cc:	beq	18508 <__generate_code_for_binary_boolean_expression@@Base+0xf38>
   184d0:	b	18584 <__generate_code_for_binary_boolean_expression@@Base+0xfb4>
   184d4:	ldr	r5, [sp]
   184d8:	mov	r6, ip
   184dc:	lsr	r2, r5, #24
   184e0:	strb	r5, [r6, r0]!
   184e4:	lsr	r3, r5, #16
   184e8:	lsr	r7, r5, #8
   184ec:	strb	r2, [r6, #3]
   184f0:	strb	r3, [r6, #2]
   184f4:	strb	r7, [r6, #1]
   184f8:	adds	r2, r0, #4
   184fc:	adc	r3, r1, #0
   18500:	ldmib	sp, {r5, r9}
   18504:	strd	r2, [sl]
   18508:	str	r8, [sp, #8]
   1850c:	mov	r8, lr
   18510:	adds	r7, r0, #8
   18514:	ldr	r6, [r8, #4]
   18518:	ldr	r4, [pc, #1152]	; 189a0 <__generate_code_for_binary_boolean_expression@@Base+0x13d0>
   1851c:	adc	lr, r1, #0
   18520:	ldr	r4, [pc, r4]
   18524:	subs	r7, r4, r7
   18528:	sbcs	r7, r6, lr
   1852c:	bcs	18580 <__generate_code_for_binary_boolean_expression@@Base+0xfb0>
   18530:	mov	r2, #7
   18534:	orr	r2, r2, #131072	; 0x20000
   18538:	adds	r0, r0, r2
   1853c:	adc	r1, r1, #0
   18540:	mvn	r2, #0
   18544:	and	r7, r1, r2
   18548:	mov	r1, #16646144	; 0xfe0000
   1854c:	orr	r1, r1, #-16777216	; 0xff000000
   18550:	and	r6, r0, r1
   18554:	ldr	r4, [pc, #1096]	; 189a4 <__generate_code_for_binary_boolean_expression@@Base+0x13d4>
   18558:	mov	r0, ip
   1855c:	mov	r1, r6
   18560:	add	r4, pc, r4
   18564:	bl	11f48 <realloc@plt>
   18568:	strd	r6, [r8]
   1856c:	str	r0, [r4]
   18570:	ldr	r3, [sl, #4]
   18574:	ldr	r2, [pc, #1068]	; 189a8 <__generate_code_for_binary_boolean_expression@@Base+0x13d8>
   18578:	mov	ip, r0
   1857c:	ldr	r2, [pc, r2]
   18580:	ldr	r8, [sp, #8]
   18584:	mov	r6, ip
   18588:	lsr	r7, r5, #8
   1858c:	strb	r5, [r6, r2]!
   18590:	adds	r4, r2, #4
   18594:	lsr	r0, r5, #24
   18598:	lsr	r1, r5, #16
   1859c:	strb	r7, [r6, #1]
   185a0:	adc	r7, r3, #0
   185a4:	cmp	r9, #0
   185a8:	strb	r0, [r6, #3]
   185ac:	strb	r1, [r6, #2]
   185b0:	stm	sl, {r4, r7}
   185b4:	beq	18688 <__generate_code_for_binary_boolean_expression@@Base+0x10b8>
   185b8:	ldr	r0, [pc, #1004]	; 189ac <__generate_code_for_binary_boolean_expression@@Base+0x13dc>
   185bc:	ldr	sl, [fp, #8]
   185c0:	add	r0, pc, r0
   185c4:	ldrb	r0, [r0]
   185c8:	cmp	r0, #1
   185cc:	bne	18654 <__generate_code_for_binary_boolean_expression@@Base+0x1084>
   185d0:	ldr	r9, [pc, #984]	; 189b0 <__generate_code_for_binary_boolean_expression@@Base+0x13e0>
   185d4:	adds	r0, r2, #8
   185d8:	adc	r1, r3, #0
   185dc:	add	r9, pc, r9
   185e0:	ldr	r6, [r9, #4]
   185e4:	ldr	r5, [pc, #968]	; 189b4 <__generate_code_for_binary_boolean_expression@@Base+0x13e4>
   185e8:	ldr	r5, [pc, r5]
   185ec:	subs	r0, r5, r0
   185f0:	sbcs	r0, r6, r1
   185f4:	bcs	18654 <__generate_code_for_binary_boolean_expression@@Base+0x1084>
   185f8:	mov	r0, #7
   185fc:	orr	r0, r0, #131072	; 0x20000
   18600:	adds	r0, r2, r0
   18604:	adc	r1, r3, #0
   18608:	mvn	r2, #0
   1860c:	and	r5, r1, r2
   18610:	mov	r1, #16646144	; 0xfe0000
   18614:	orr	r1, r1, #-16777216	; 0xff000000
   18618:	and	r6, r0, r1
   1861c:	ldr	r4, [pc, #916]	; 189b8 <__generate_code_for_binary_boolean_expression@@Base+0x13e8>
   18620:	mov	r0, ip
   18624:	mov	r1, r6
   18628:	add	r4, pc, r4
   1862c:	bl	11f48 <realloc@plt>
   18630:	str	r6, [r9]
   18634:	str	r5, [r9, #4]
   18638:	mov	ip, r0
   1863c:	ldr	r0, [pc, #888]	; 189bc <__generate_code_for_binary_boolean_expression@@Base+0x13ec>
   18640:	str	ip, [r4]
   18644:	add	r0, pc, r0
   18648:	ldr	r7, [r0, #4]
   1864c:	ldr	r4, [pc, #876]	; 189c0 <__generate_code_for_binary_boolean_expression@@Base+0x13f0>
   18650:	ldr	r4, [pc, r4]
   18654:	mov	r3, ip
   18658:	lsr	r0, sl, #24
   1865c:	strb	sl, [r3, r4]!
   18660:	lsr	r1, sl, #16
   18664:	lsr	r2, sl, #8
   18668:	strb	r0, [r3, #3]
   1866c:	strb	r1, [r3, #2]
   18670:	strb	r2, [r3, #1]
   18674:	ldr	sl, [pc, #840]	; 189c4 <__generate_code_for_binary_boolean_expression@@Base+0x13f4>
   18678:	adds	r4, r4, #4
   1867c:	adc	r7, r7, #0
   18680:	add	sl, pc, sl
   18684:	stm	sl, {r4, r7}
   18688:	cmp	r8, #0
   1868c:	beq	1893c <__generate_code_for_binary_boolean_expression@@Base+0x136c>
   18690:	mov	r0, r8
   18694:	mov	r9, ip
   18698:	bl	11fc0 <strlen@plt>
   1869c:	mov	r6, #1
   186a0:	add	r5, r6, r0, lsr #2
   186a4:	ldr	r0, [pc, #796]	; 189c8 <__generate_code_for_binary_boolean_expression@@Base+0x13f8>
   186a8:	add	r0, pc, r0
   186ac:	ldrb	r0, [r0]
   186b0:	cmp	r0, #1
   186b4:	bne	18758 <__generate_code_for_binary_boolean_expression@@Base+0x1188>
   186b8:	ldr	sl, [pc, #780]	; 189cc <__generate_code_for_binary_boolean_expression@@Base+0x13fc>
   186bc:	adds	r0, r4, #4
   186c0:	adc	r1, r7, #0
   186c4:	add	sl, pc, sl
   186c8:	ldr	r2, [sl, #4]
   186cc:	ldr	r3, [pc, #764]	; 189d0 <__generate_code_for_binary_boolean_expression@@Base+0x1400>
   186d0:	ldr	r3, [pc, r3]
   186d4:	subs	r0, r3, r0
   186d8:	sbcs	r0, r2, r1
   186dc:	bcs	1876c <__generate_code_for_binary_boolean_expression@@Base+0x119c>
   186e0:	mov	r0, #0
   186e4:	str	r0, [sp, #8]
   186e8:	mov	r0, #7
   186ec:	orr	r0, r0, #131072	; 0x20000
   186f0:	adds	r0, r0, r4
   186f4:	adc	r1, r7, #0
   186f8:	subs	r0, r0, #4
   186fc:	sbc	r1, r1, #0
   18700:	mvn	r2, #0
   18704:	and	r7, r1, r2
   18708:	mov	r1, #16646144	; 0xfe0000
   1870c:	orr	r1, r1, #-16777216	; 0xff000000
   18710:	and	r4, r0, r1
   18714:	ldr	r6, [pc, #700]	; 189d8 <__generate_code_for_binary_boolean_expression@@Base+0x1408>
   18718:	mov	r0, r9
   1871c:	mov	r1, r4
   18720:	add	r6, pc, r6
   18724:	bl	11f48 <realloc@plt>
   18728:	stm	sl, {r4, r7}
   1872c:	str	r0, [r6]
   18730:	ldr	sl, [pc, #676]	; 189dc <__generate_code_for_binary_boolean_expression@@Base+0x140c>
   18734:	mov	r3, r0
   18738:	add	sl, pc, sl
   1873c:	ldr	r7, [sl, #4]
   18740:	ldr	r0, [pc, #664]	; 189e0 <__generate_code_for_binary_boolean_expression@@Base+0x1410>
   18744:	add	r0, pc, r0
   18748:	ldrb	r6, [r0]
   1874c:	ldr	r4, [pc, #656]	; 189e4 <__generate_code_for_binary_boolean_expression@@Base+0x1414>
   18750:	ldr	r4, [pc, r4]
   18754:	b	18780 <__generate_code_for_binary_boolean_expression@@Base+0x11b0>
   18758:	mov	r0, #0
   1875c:	str	r0, [sp, #8]
   18760:	mov	r6, #0
   18764:	mov	r3, r9
   18768:	b	18780 <__generate_code_for_binary_boolean_expression@@Base+0x11b0>
   1876c:	mov	r0, #0
   18770:	str	r0, [sp, #8]
   18774:	ldr	sl, [pc, #600]	; 189d4 <__generate_code_for_binary_boolean_expression@@Base+0x1404>
   18778:	mov	r3, r9
   1877c:	add	sl, pc, sl
   18780:	mov	r9, r3
   18784:	strb	r5, [r3, r4]!
   18788:	lsr	r0, r5, #24
   1878c:	adds	r4, r4, #4
   18790:	lsr	r1, r5, #16
   18794:	lsr	r2, r5, #8
   18798:	strb	r0, [r3, #3]
   1879c:	mov	r0, r8
   187a0:	adc	r5, r7, #0
   187a4:	strb	r1, [r3, #2]
   187a8:	strb	r2, [r3, #1]
   187ac:	strd	r4, [sl]
   187b0:	bl	11fc0 <strlen@plt>
   187b4:	mov	r7, r0
   187b8:	cmp	r6, #0
   187bc:	beq	18858 <__generate_code_for_binary_boolean_expression@@Base+0x1288>
   187c0:	ldr	r6, [pc, #544]	; 189e8 <__generate_code_for_binary_boolean_expression@@Base+0x1418>
   187c4:	adds	r0, r4, r7
   187c8:	adc	r1, r5, #0
   187cc:	add	r6, pc, r6
   187d0:	ldr	r2, [r6, #4]
   187d4:	ldr	r3, [pc, #528]	; 189ec <__generate_code_for_binary_boolean_expression@@Base+0x141c>
   187d8:	ldr	r3, [pc, r3]
   187dc:	subs	r3, r3, r0
   187e0:	sbcs	r2, r2, r1
   187e4:	bcs	18850 <__generate_code_for_binary_boolean_expression@@Base+0x1280>
   187e8:	mov	r2, #7
   187ec:	orr	r2, r2, #131072	; 0x20000
   187f0:	adds	r0, r2, r0
   187f4:	adc	r1, r1, #0
   187f8:	subs	r0, r0, #8
   187fc:	sbc	r1, r1, #0
   18800:	mvn	r2, #0
   18804:	and	r5, r1, r2
   18808:	mov	r1, #16646144	; 0xfe0000
   1880c:	orr	r1, r1, #-16777216	; 0xff000000
   18810:	and	r4, r0, r1
   18814:	mov	r0, r9
   18818:	mov	r1, r4
   1881c:	bl	11f48 <realloc@plt>
   18820:	strd	r4, [r6]
   18824:	ldr	r1, [pc, #452]	; 189f0 <__generate_code_for_binary_boolean_expression@@Base+0x1420>
   18828:	ldr	r5, [sl, #4]
   1882c:	add	r1, pc, r1
   18830:	str	r0, [r1]
   18834:	ldr	r1, [pc, #440]	; 189f4 <__generate_code_for_binary_boolean_expression@@Base+0x1424>
   18838:	add	r1, pc, r1
   1883c:	ldrb	r1, [r1]
   18840:	str	r1, [sp, #8]
   18844:	ldr	r4, [pc, #428]	; 189f8 <__generate_code_for_binary_boolean_expression@@Base+0x1428>
   18848:	ldr	r4, [pc, r4]
   1884c:	b	1885c <__generate_code_for_binary_boolean_expression@@Base+0x128c>
   18850:	mov	r0, #1
   18854:	str	r0, [sp, #8]
   18858:	mov	r0, r9
   1885c:	mov	r9, r0
   18860:	add	r0, r0, r4
   18864:	mov	r1, r8
   18868:	mov	r2, r7
   1886c:	bl	11f0c <memcpy@plt>
   18870:	adds	r6, r4, r7
   18874:	mov	r0, r8
   18878:	adc	r5, r5, #0
   1887c:	str	r6, [sl]
   18880:	str	r5, [sl, #4]
   18884:	bl	11fc0 <strlen@plt>
   18888:	and	r0, r0, #3
   1888c:	rsb	r4, r0, #4
   18890:	ldr	r0, [sp, #8]
   18894:	cmp	r0, #0
   18898:	beq	18920 <__generate_code_for_binary_boolean_expression@@Base+0x1350>
   1889c:	ldr	r7, [pc, #344]	; 189fc <__generate_code_for_binary_boolean_expression@@Base+0x142c>
   188a0:	adds	r0, r6, r4
   188a4:	adc	r1, r5, #0
   188a8:	add	r7, pc, r7
   188ac:	ldr	r2, [r7, #4]
   188b0:	ldr	r3, [pc, #328]	; 18a00 <__generate_code_for_binary_boolean_expression@@Base+0x1430>
   188b4:	ldr	r3, [pc, r3]
   188b8:	subs	r3, r3, r0
   188bc:	sbcs	r2, r2, r1
   188c0:	bcs	18920 <__generate_code_for_binary_boolean_expression@@Base+0x1350>
   188c4:	mov	r2, #7
   188c8:	orr	r2, r2, #131072	; 0x20000
   188cc:	adds	r0, r2, r0
   188d0:	adc	r1, r1, #0
   188d4:	subs	r0, r0, #8
   188d8:	sbc	r1, r1, #0
   188dc:	mvn	r2, #0
   188e0:	and	r5, r1, r2
   188e4:	mov	r1, #16646144	; 0xfe0000
   188e8:	orr	r1, r1, #-16777216	; 0xff000000
   188ec:	and	r6, r0, r1
   188f0:	ldr	r8, [pc, #268]	; 18a04 <__generate_code_for_binary_boolean_expression@@Base+0x1434>
   188f4:	mov	r0, r9
   188f8:	mov	r1, r6
   188fc:	add	r8, pc, r8
   18900:	bl	11f48 <realloc@plt>
   18904:	str	r6, [r7]
   18908:	str	r5, [r7, #4]
   1890c:	str	r0, [r8]
   18910:	ldr	r5, [sl, #4]
   18914:	ldr	r6, [pc, #236]	; 18a08 <__generate_code_for_binary_boolean_expression@@Base+0x1438>
   18918:	mov	r9, r0
   1891c:	ldr	r6, [pc, r6]
   18920:	add	r0, r9, r6
   18924:	mov	r1, #0
   18928:	mov	r2, r4
   1892c:	bl	12014 <memset@plt>
   18930:	adds	r0, r6, r4
   18934:	adc	r1, r5, #0
   18938:	strd	r0, [sl]
   1893c:	sub	sp, fp, #28
   18940:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18944:	andeq	r4, r1, ip, asr pc
   18948:	andeq	r4, r1, r0, asr #30
   1894c:	andeq	r4, r1, r4, asr #30
   18950:	andeq	r4, r1, r8, lsr #30
   18954:	andeq	r4, r1, ip, lsr #30
   18958:	andeq	r4, r1, r0, lsl pc
   1895c:	andeq	r4, r1, r4, asr #29
   18960:	andeq	r4, r1, r0, asr #29
   18964:			; <UNDEFINED> instruction: 0x00014eb0
   18968:	muleq	r1, r8, lr
   1896c:	andeq	r4, r1, r4, asr #28
   18970:	andeq	r4, r1, r4, asr #26
   18974:	andeq	r4, r1, r4, lsr lr
   18978:	andeq	r4, r1, r8, lsr #28
   1897c:	ldrdeq	r4, [r1], -r8
   18980:	andeq	r4, r1, r4, ror #27
   18984:			; <UNDEFINED> instruction: 0x00014db4
   18988:			; <UNDEFINED> instruction: 0x00014db8
   1898c:	andeq	r4, r1, r4, lsr #27
   18990:			; <UNDEFINED> instruction: 0x00014cb8
   18994:	andeq	r4, r1, r4, ror ip
   18998:	andeq	r4, r1, r0, asr #24
   1899c:	andeq	r4, r1, r4, asr #24
   189a0:			; <UNDEFINED> instruction: 0x00014bb8
   189a4:	andeq	r4, r1, r4, ror fp
   189a8:	andeq	r4, r1, r4, ror #22
   189ac:	andeq	r4, r1, ip, lsl #22
   189b0:	strdeq	r4, [r1], -ip
   189b4:	strdeq	r4, [r1], -r0
   189b8:	andeq	r4, r1, ip, lsr #21
   189bc:	muleq	r1, ip, sl
   189c0:	muleq	r1, r0, sl
   189c4:	andeq	r4, r1, r0, ror #20
   189c8:	andeq	r4, r1, r4, lsr #20
   189cc:	andeq	r4, r1, r4, lsl sl
   189d0:	andeq	r4, r1, r8, lsl #20
   189d4:	andeq	r4, r1, r4, ror #18
   189d8:			; <UNDEFINED> instruction: 0x000149b4
   189dc:	andeq	r4, r1, r8, lsr #19
   189e0:	andeq	r4, r1, r8, lsl #19
   189e4:	muleq	r1, r0, r9
   189e8:	andeq	r4, r1, ip, lsl #18
   189ec:	andeq	r4, r1, r0, lsl #18
   189f0:	andeq	r4, r1, r8, lsr #17
   189f4:	muleq	r1, r4, r8
   189f8:	muleq	r1, r8, r8
   189fc:	andeq	r4, r1, r0, lsr r8
   18a00:	andeq	r4, r1, r4, lsr #16
   18a04:	ldrdeq	r4, [r1], -r8
   18a08:	andeq	r4, r1, r4, asr #15
   18a0c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18a10:	add	fp, sp, #28
   18a14:	sub	sp, sp, #28
   18a18:	mov	ip, r0
   18a1c:	ldr	r0, [pc, #1740]	; 190f0 <__generate_code_for_binary_boolean_expression@@Base+0x1b20>
   18a20:	ldr	r0, [pc, r0]
   18a24:	cmp	r0, #0
   18a28:	beq	18b44 <__generate_code_for_binary_boolean_expression@@Base+0x1574>
   18a2c:	ldr	r5, [pc, #1728]	; 190f4 <__generate_code_for_binary_boolean_expression@@Base+0x1b24>
   18a30:	mov	sl, r1
   18a34:	add	r5, pc, r5
   18a38:	ldr	r3, [r5, #4]
   18a3c:	ldr	r4, [pc, #1716]	; 190f8 <__generate_code_for_binary_boolean_expression@@Base+0x1b28>
   18a40:	ldr	r4, [pc, r4]
   18a44:	ldr	r6, [pc, #1712]	; 190fc <__generate_code_for_binary_boolean_expression@@Base+0x1b2c>
   18a48:	add	r6, pc, r6
   18a4c:	ldrb	r0, [r6]
   18a50:	cmp	r0, #0
   18a54:	beq	18b4c <__generate_code_for_binary_boolean_expression@@Base+0x157c>
   18a58:	ldr	r8, [pc, #1732]	; 19124 <__generate_code_for_binary_boolean_expression@@Base+0x1b54>
   18a5c:	mov	r5, #10551296	; 0xa10000
   18a60:	adds	r9, r4, #4
   18a64:	add	r8, pc, r8
   18a68:	adc	r2, r3, #0
   18a6c:	ldr	r0, [r8, #4]
   18a70:	ldr	r1, [pc, #1712]	; 19128 <__generate_code_for_binary_boolean_expression@@Base+0x1b58>
   18a74:	orr	r5, r5, #16777216	; 0x1000000
   18a78:	ldr	r1, [pc, r1]
   18a7c:	subs	r1, r1, r9
   18a80:	sbcs	r0, r0, r2
   18a84:	bcs	18c50 <__generate_code_for_binary_boolean_expression@@Base+0x1680>
   18a88:	mov	r0, #3
   18a8c:	orr	r0, r0, #131072	; 0x20000
   18a90:	adds	r0, r4, r0
   18a94:	adc	r1, r3, #0
   18a98:	mvn	r2, #0
   18a9c:	and	r9, r1, r2
   18aa0:	mov	r1, #16646144	; 0xfe0000
   18aa4:	orr	r1, r1, #-16777216	; 0xff000000
   18aa8:	and	r4, r0, r1
   18aac:	ldr	r0, [pc, #1664]	; 19134 <__generate_code_for_binary_boolean_expression@@Base+0x1b64>
   18ab0:	mov	r1, r4
   18ab4:	mov	r7, ip
   18ab8:	ldr	r0, [pc, r0]
   18abc:	bl	11f48 <realloc@plt>
   18ac0:	ldr	ip, [pc, #1648]	; 19138 <__generate_code_for_binary_boolean_expression@@Base+0x1b68>
   18ac4:	ldr	lr, [pc, #1648]	; 1913c <__generate_code_for_binary_boolean_expression@@Base+0x1b6c>
   18ac8:	stm	r8, {r4, r9}
   18acc:	ldr	r1, [pc, #1644]	; 19140 <__generate_code_for_binary_boolean_expression@@Base+0x1b70>
   18ad0:	add	ip, pc, ip
   18ad4:	add	lr, pc, lr
   18ad8:	add	r1, pc, r1
   18adc:	mov	r2, r0
   18ae0:	str	r2, [r1]
   18ae4:	mov	r6, ip
   18ae8:	ldrb	ip, [ip]
   18aec:	ldr	r3, [lr, #4]
   18af0:	ldr	r4, [pc, #1612]	; 19144 <__generate_code_for_binary_boolean_expression@@Base+0x1b74>
   18af4:	lsr	r0, r5, #24
   18af8:	mov	r1, r8
   18afc:	ldr	r4, [pc, r4]
   18b00:	str	r2, [sp, #20]
   18b04:	lsl	r8, r7, #1
   18b08:	strb	r5, [r2, r4]!
   18b0c:	adds	r9, r4, #4
   18b10:	strb	r0, [r2, #3]
   18b14:	lsr	r0, r5, #16
   18b18:	strb	r0, [r2, #2]
   18b1c:	lsr	r0, r5, #8
   18b20:	strb	r0, [r2, #1]
   18b24:	adc	r5, r3, #0
   18b28:	mov	r0, #0
   18b2c:	cmp	ip, #1
   18b30:	str	r3, [sp, #16]
   18b34:	str	r9, [lr]
   18b38:	str	r5, [lr, #4]
   18b3c:	beq	18ca4 <__generate_code_for_binary_boolean_expression@@Base+0x16d4>
   18b40:	b	18e08 <__generate_code_for_binary_boolean_expression@@Base+0x1838>
   18b44:	sub	sp, fp, #28
   18b48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18b4c:	ldr	r0, [pc, #1452]	; 19100 <__generate_code_for_binary_boolean_expression@@Base+0x1b30>
   18b50:	mov	r7, r3
   18b54:	mov	r9, #0
   18b58:	ldr	r0, [pc, r0]
   18b5c:	str	r0, [sp, #20]
   18b60:	ldrb	r1, [r0, r4]!
   18b64:	str	r7, [sp, #16]
   18b68:	ldrb	r2, [r0, #1]
   18b6c:	ldrb	r3, [r0, #2]
   18b70:	ldrb	r0, [r0, #3]
   18b74:	orr	r1, r1, r2, lsl #8
   18b78:	orr	r1, r1, r3, lsl #16
   18b7c:	adds	r2, r4, #4
   18b80:	orr	r3, r1, r0, lsl #24
   18b84:	adc	r7, r7, #0
   18b88:	mov	r1, r5
   18b8c:	stm	r5, {r2, r7}
   18b90:	mov	r5, #10551296	; 0xa10000
   18b94:	orr	r5, r5, #16777216	; 0x1000000
   18b98:	cmn	r3, #1
   18b9c:	beq	18d50 <__generate_code_for_binary_boolean_expression@@Base+0x1780>
   18ba0:	cmp	r3, r5
   18ba4:	bne	18d60 <__generate_code_for_binary_boolean_expression@@Base+0x1790>
   18ba8:	str	r7, [sp, #8]
   18bac:	ldr	r0, [sp, #20]
   18bb0:	str	r4, [sp, #4]
   18bb4:	mov	r8, r5
   18bb8:	ldr	r3, [r0, r2]
   18bbc:	ldr	r0, [sp, #16]
   18bc0:	adds	r5, r4, #8
   18bc4:	adc	r9, r0, #0
   18bc8:	cmn	r3, #1
   18bcc:	stm	r1, {r5, r9}
   18bd0:	beq	18d6c <__generate_code_for_binary_boolean_expression@@Base+0x179c>
   18bd4:	lsr	r0, r3, #1
   18bd8:	mov	r7, ip
   18bdc:	cmp	r0, ip
   18be0:	bne	18d6c <__generate_code_for_binary_boolean_expression@@Base+0x179c>
   18be4:	lsl	r0, r7, #3
   18be8:	mov	r4, r2
   18bec:	bl	11f78 <malloc@plt>
   18bf0:	cmp	r7, #0
   18bf4:	beq	18d94 <__generate_code_for_binary_boolean_expression@@Base+0x17c4>
   18bf8:	str	r0, [sp, #12]
   18bfc:	str	r7, [sp, #24]
   18c00:	ldr	r2, [sp, #20]
   18c04:	ldr	r3, [r2, r5]!
   18c08:	adds	r5, r5, #8
   18c0c:	ldr	r2, [r2, #4]
   18c10:	str	r3, [r0]
   18c14:	adc	r9, r9, #0
   18c18:	str	r2, [r0, #4]
   18c1c:	add	r0, r0, #8
   18c20:	subs	r7, r7, #1
   18c24:	bne	18c00 <__generate_code_for_binary_boolean_expression@@Base+0x1630>
   18c28:	ldr	lr, [pc, #1260]	; 1911c <__generate_code_for_binary_boolean_expression@@Base+0x1b4c>
   18c2c:	add	lr, pc, lr
   18c30:	stm	lr, {r5, r9}
   18c34:	ldr	ip, [pc, #1252]	; 19120 <__generate_code_for_binary_boolean_expression@@Base+0x1b50>
   18c38:	mov	r1, lr
   18c3c:	ldr	r0, [sp, #12]
   18c40:	add	ip, pc, ip
   18c44:	mov	r6, ip
   18c48:	ldr	ip, [sp, #24]
   18c4c:	b	18db0 <__generate_code_for_binary_boolean_expression@@Base+0x17e0>
   18c50:	str	r3, [sp, #16]
   18c54:	ldr	r3, [pc, #1232]	; 1912c <__generate_code_for_binary_boolean_expression@@Base+0x1b5c>
   18c58:	mov	lr, r5
   18c5c:	mov	r7, ip
   18c60:	lsr	ip, r5, #16
   18c64:	ldr	r3, [pc, r3]
   18c68:	lsr	r1, r5, #8
   18c6c:	str	r3, [sp, #20]
   18c70:	strb	lr, [r3, r4]!
   18c74:	lsr	r0, lr, #24
   18c78:	strb	r1, [r3, #1]
   18c7c:	strb	r0, [r3, #3]
   18c80:	strb	ip, [r3, #2]
   18c84:	ldr	lr, [pc, #1188]	; 19130 <__generate_code_for_binary_boolean_expression@@Base+0x1b60>
   18c88:	lsl	r5, r7, #1
   18c8c:	add	lr, pc, lr
   18c90:	mov	r1, r8
   18c94:	mov	r8, r5
   18c98:	str	r9, [lr]
   18c9c:	str	r2, [lr, #4]
   18ca0:	mov	r5, r2
   18ca4:	str	r8, [sp, #24]
   18ca8:	mov	r8, r1
   18cac:	ldr	r0, [sp, #16]
   18cb0:	ldr	r2, [r8, #4]
   18cb4:	ldr	r3, [pc, #1164]	; 19148 <__generate_code_for_binary_boolean_expression@@Base+0x1b78>
   18cb8:	adds	ip, r4, #8
   18cbc:	adc	r1, r0, #0
   18cc0:	mov	r0, #0
   18cc4:	ldr	r3, [pc, r3]
   18cc8:	subs	r3, r3, ip
   18ccc:	sbcs	r1, r2, r1
   18cd0:	bcs	18d48 <__generate_code_for_binary_boolean_expression@@Base+0x1778>
   18cd4:	ldr	r5, [pc, #1136]	; 1914c <__generate_code_for_binary_boolean_expression@@Base+0x1b7c>
   18cd8:	mov	r0, #3
   18cdc:	ldr	r1, [sp, #16]
   18ce0:	orr	r0, r0, #131072	; 0x20000
   18ce4:	adds	r0, r0, r4
   18ce8:	adc	r1, r1, #0
   18cec:	adds	r0, r0, #4
   18cf0:	adc	r1, r1, #0
   18cf4:	mvn	r2, #0
   18cf8:	and	r9, r1, r2
   18cfc:	mov	r1, #16646144	; 0xfe0000
   18d00:	orr	r1, r1, #-16777216	; 0xff000000
   18d04:	and	r4, r0, r1
   18d08:	ldr	r0, [sp, #20]
   18d0c:	mov	r1, r4
   18d10:	add	r5, pc, r5
   18d14:	bl	11f48 <realloc@plt>
   18d18:	ldr	ip, [pc, #1072]	; 19150 <__generate_code_for_binary_boolean_expression@@Base+0x1b80>
   18d1c:	ldr	lr, [pc, #1072]	; 19154 <__generate_code_for_binary_boolean_expression@@Base+0x1b84>
   18d20:	stm	r8, {r4, r9}
   18d24:	add	lr, pc, lr
   18d28:	str	r0, [r5]
   18d2c:	str	r0, [sp, #20]
   18d30:	ldr	r5, [lr, #4]
   18d34:	ldr	r9, [pc, #1052]	; 19158 <__generate_code_for_binary_boolean_expression@@Base+0x1b88>
   18d38:	add	ip, pc, ip
   18d3c:	mov	r6, ip
   18d40:	mov	r0, #0
   18d44:	ldr	r9, [pc, r9]
   18d48:	ldr	r8, [sp, #24]
   18d4c:	b	18e08 <__generate_code_for_binary_boolean_expression@@Base+0x1838>
   18d50:	mov	r3, r2
   18d54:	ldr	r2, [sp, #16]
   18d58:	mov	r0, #0
   18d5c:	b	18dc8 <__generate_code_for_binary_boolean_expression@@Base+0x17f8>
   18d60:	ldr	r1, [pc, #924]	; 19104 <__generate_code_for_binary_boolean_expression@@Base+0x1b34>
   18d64:	add	r1, pc, r1
   18d68:	b	18d74 <__generate_code_for_binary_boolean_expression@@Base+0x17a4>
   18d6c:	ldr	r1, [pc, #924]	; 19110 <__generate_code_for_binary_boolean_expression@@Base+0x1b40>
   18d70:	add	r1, pc, r1
   18d74:	ldr	r0, [pc, #908]	; 19108 <__generate_code_for_binary_boolean_expression@@Base+0x1b38>
   18d78:	ldr	r0, [pc, r0]
   18d7c:	ldr	r0, [r0]
   18d80:	ldr	r2, [pc, #900]	; 1910c <__generate_code_for_binary_boolean_expression@@Base+0x1b3c>
   18d84:	ldr	r2, [pc, r2]
   18d88:	sub	sp, fp, #28
   18d8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18d90:	b	11fe4 <fprintf@plt>
   18d94:	ldr	lr, [pc, #888]	; 19114 <__generate_code_for_binary_boolean_expression@@Base+0x1b44>
   18d98:	ldr	ip, [pc, #888]	; 19118 <__generate_code_for_binary_boolean_expression@@Base+0x1b48>
   18d9c:	add	lr, pc, lr
   18da0:	add	ip, pc, ip
   18da4:	mov	r6, ip
   18da8:	mov	r1, lr
   18dac:	mov	ip, r7
   18db0:	mov	r3, r4
   18db4:	ldr	r7, [sp, #8]
   18db8:	ldr	r4, [sp, #4]
   18dbc:	ldr	r2, [sp, #16]
   18dc0:	mov	r9, #0
   18dc4:	mov	r5, r8
   18dc8:	mov	lr, r1
   18dcc:	mov	r1, #1
   18dd0:	str	r4, [lr]
   18dd4:	str	r2, [lr, #4]
   18dd8:	ldr	r2, [sp, #20]
   18ddc:	lsl	r8, ip, #1
   18de0:	strb	r5, [r2, r4]!
   18de4:	mov	r5, r7
   18de8:	strb	r1, [r2, #3]
   18dec:	mov	r1, #161	; 0xa1
   18df0:	strb	r9, [r2, #1]
   18df4:	mov	r9, r3
   18df8:	strb	r1, [r2, #2]
   18dfc:	str	r9, [lr]
   18e00:	str	r7, [lr, #4]
   18e04:	mov	r7, ip
   18e08:	ldr	r3, [sp, #20]
   18e0c:	lsr	r1, r8, #16
   18e10:	mov	ip, r3
   18e14:	strb	r8, [r3, r9]!
   18e18:	lsr	r4, r8, #24
   18e1c:	lsr	r2, r8, #8
   18e20:	adds	r8, r9, #4
   18e24:	strb	r1, [r3, #2]
   18e28:	adc	r1, r5, #0
   18e2c:	cmp	r7, #0
   18e30:	strb	r4, [r3, #3]
   18e34:	strb	r2, [r3, #1]
   18e38:	str	r8, [lr]
   18e3c:	str	r1, [lr, #4]
   18e40:	str	r7, [sp, #24]
   18e44:	beq	190e4 <__generate_code_for_binary_boolean_expression@@Base+0x1b14>
   18e48:	ldr	r7, [pc, #780]	; 1915c <__generate_code_for_binary_boolean_expression@@Base+0x1b8c>
   18e4c:	mov	r4, lr
   18e50:	mov	r2, r0
   18e54:	add	r7, pc, r7
   18e58:	str	r0, [sp, #12]
   18e5c:	b	18ef8 <__generate_code_for_binary_boolean_expression@@Base+0x1928>
   18e60:	mov	r7, ip
   18e64:	lsr	r2, r4, #24
   18e68:	strb	r4, [r7, r8]!
   18e6c:	mov	lr, r6
   18e70:	lsr	r9, r4, #16
   18e74:	lsr	r6, r4, #8
   18e78:	strb	r2, [r7, #3]
   18e7c:	adds	r2, r8, #4
   18e80:	mov	r4, r0
   18e84:	strb	r9, [r7, #2]
   18e88:	mov	r3, ip
   18e8c:	strb	r6, [r7, #1]
   18e90:	adc	r9, r1, #0
   18e94:	stm	r4, {r2, r9}
   18e98:	mov	ip, r3
   18e9c:	lsr	r1, r5, #16
   18ea0:	strb	r5, [r3, r2]!
   18ea4:	lsr	r0, r5, #24
   18ea8:	lsr	r7, r5, #8
   18eac:	adds	r8, r2, #4
   18eb0:	strb	r1, [r3, #2]
   18eb4:	adc	r1, r9, #0
   18eb8:	strb	r0, [r3, #3]
   18ebc:	strb	r7, [r3, #1]
   18ec0:	str	r8, [r4]
   18ec4:	str	r1, [r4, #4]
   18ec8:	ldr	r0, [sp, #24]
   18ecc:	ldr	r2, [sp, #16]
   18ed0:	mov	r6, lr
   18ed4:	subs	r0, r0, #1
   18ed8:	str	r0, [sp, #24]
   18edc:	ldr	sl, [sp, #20]
   18ee0:	ldr	r0, [sp, #12]
   18ee4:	ldr	r7, [pc, #676]	; 19190 <__generate_code_for_binary_boolean_expression@@Base+0x1bc0>
   18ee8:	add	r2, r2, #8
   18eec:	add	sl, sl, #8
   18ef0:	add	r7, pc, r7
   18ef4:	beq	190e4 <__generate_code_for_binary_boolean_expression@@Base+0x1b14>
   18ef8:	cmp	r0, #0
   18efc:	mov	r0, r4
   18f00:	str	r2, [sp, #16]
   18f04:	beq	18f10 <__generate_code_for_binary_boolean_expression@@Base+0x1940>
   18f08:	ldrd	r2, [r2]
   18f0c:	b	18f18 <__generate_code_for_binary_boolean_expression@@Base+0x1948>
   18f10:	mov	r2, #0
   18f14:	mov	r3, #0
   18f18:	ldrd	r4, [sl]
   18f1c:	adds	r4, r4, r2
   18f20:	adc	r5, r5, r3
   18f24:	strd	r4, [sl]
   18f28:	ldrb	r2, [r6]
   18f2c:	str	sl, [sp, #20]
   18f30:	cmp	r2, #0
   18f34:	beq	18e60 <__generate_code_for_binary_boolean_expression@@Base+0x1890>
   18f38:	ldr	r3, [r7, #4]
   18f3c:	ldr	r6, [pc, #540]	; 19160 <__generate_code_for_binary_boolean_expression@@Base+0x1b90>
   18f40:	adds	r2, r8, #4
   18f44:	adc	r9, r1, #0
   18f48:	ldr	r6, [pc, r6]
   18f4c:	subs	r2, r6, r2
   18f50:	sbcs	r2, r3, r9
   18f54:	bcs	19000 <__generate_code_for_binary_boolean_expression@@Base+0x1a30>
   18f58:	mov	r2, #3
   18f5c:	orr	r2, r2, #131072	; 0x20000
   18f60:	adds	r0, r8, r2
   18f64:	adc	r1, r1, #0
   18f68:	mvn	r2, #0
   18f6c:	and	r8, r1, r2
   18f70:	mov	r1, #16646144	; 0xfe0000
   18f74:	orr	r1, r1, #-16777216	; 0xff000000
   18f78:	and	r6, r0, r1
   18f7c:	mov	r0, ip
   18f80:	mov	r1, r6
   18f84:	bl	11f48 <realloc@plt>
   18f88:	ldr	ip, [pc, #468]	; 19164 <__generate_code_for_binary_boolean_expression@@Base+0x1b94>
   18f8c:	ldr	lr, [pc, #468]	; 19168 <__generate_code_for_binary_boolean_expression@@Base+0x1b98>
   18f90:	stm	r7, {r6, r8}
   18f94:	mov	r3, r0
   18f98:	ldr	r0, [pc, #460]	; 1916c <__generate_code_for_binary_boolean_expression@@Base+0x1b9c>
   18f9c:	add	lr, pc, lr
   18fa0:	mov	r9, lr
   18fa4:	add	r0, pc, r0
   18fa8:	add	ip, pc, ip
   18fac:	str	r3, [r0]
   18fb0:	mov	lr, ip
   18fb4:	ldrb	ip, [ip]
   18fb8:	ldr	r1, [r9, #4]
   18fbc:	ldr	r8, [pc, #428]	; 19170 <__generate_code_for_binary_boolean_expression@@Base+0x1ba0>
   18fc0:	mov	r7, r3
   18fc4:	lsr	r2, r4, #24
   18fc8:	ldr	r8, [pc, r8]
   18fcc:	lsr	r6, r4, #16
   18fd0:	strb	r4, [r7, r8]!
   18fd4:	strb	r2, [r7, #3]
   18fd8:	lsr	r2, r4, #8
   18fdc:	strb	r2, [r7, #1]
   18fe0:	adds	r2, r8, #4
   18fe4:	mov	r4, r9
   18fe8:	adc	r9, r1, #0
   18fec:	cmp	ip, #1
   18ff0:	strb	r6, [r7, #2]
   18ff4:	stm	r4, {r2, r9}
   18ff8:	bne	18e98 <__generate_code_for_binary_boolean_expression@@Base+0x18c8>
   18ffc:	b	19034 <__generate_code_for_binary_boolean_expression@@Base+0x1a64>
   19000:	mov	r6, ip
   19004:	lsr	r2, r4, #24
   19008:	strb	r4, [r6, r8]!
   1900c:	lsr	r9, r4, #16
   19010:	lsr	r7, r4, #8
   19014:	strb	r2, [r6, #3]
   19018:	adds	r2, r8, #4
   1901c:	mov	r4, r0
   19020:	strb	r9, [r6, #2]
   19024:	mov	r3, ip
   19028:	strb	r7, [r6, #1]
   1902c:	adc	r9, r1, #0
   19030:	stm	r4, {r2, r9}
   19034:	ldr	lr, [pc, #312]	; 19174 <__generate_code_for_binary_boolean_expression@@Base+0x1ba4>
   19038:	mov	r0, r4
   1903c:	adds	r7, r8, #8
   19040:	add	lr, pc, lr
   19044:	adc	ip, r1, #0
   19048:	ldr	r4, [lr, #4]
   1904c:	ldr	r6, [pc, #292]	; 19178 <__generate_code_for_binary_boolean_expression@@Base+0x1ba8>
   19050:	ldr	r6, [pc, r6]
   19054:	subs	r7, r6, r7
   19058:	sbcs	r7, r4, ip
   1905c:	bcs	190d4 <__generate_code_for_binary_boolean_expression@@Base+0x1b04>
   19060:	mov	r2, #3
   19064:	orr	r2, r2, #131072	; 0x20000
   19068:	adds	r0, r2, r8
   1906c:	adc	r1, r1, #0
   19070:	adds	r0, r0, #4
   19074:	adc	r1, r1, #0
   19078:	mvn	r2, #0
   1907c:	and	r7, r1, r2
   19080:	mov	r1, #16646144	; 0xfe0000
   19084:	orr	r1, r1, #-16777216	; 0xff000000
   19088:	and	r6, r0, r1
   1908c:	mov	r0, r3
   19090:	mov	r1, r6
   19094:	mov	r8, lr
   19098:	bl	11f48 <realloc@plt>
   1909c:	ldr	lr, [pc, #220]	; 19180 <__generate_code_for_binary_boolean_expression@@Base+0x1bb0>
   190a0:	strd	r6, [r8]
   190a4:	mov	r3, r0
   190a8:	add	lr, pc, lr
   190ac:	mov	r4, lr
   190b0:	ldr	r9, [lr, #4]
   190b4:	ldr	r0, [pc, #200]	; 19184 <__generate_code_for_binary_boolean_expression@@Base+0x1bb4>
   190b8:	add	r0, pc, r0
   190bc:	str	r3, [r0]
   190c0:	ldr	r2, [pc, #192]	; 19188 <__generate_code_for_binary_boolean_expression@@Base+0x1bb8>
   190c4:	ldr	r2, [pc, r2]
   190c8:	ldr	lr, [pc, #188]	; 1918c <__generate_code_for_binary_boolean_expression@@Base+0x1bbc>
   190cc:	add	lr, pc, lr
   190d0:	b	18e98 <__generate_code_for_binary_boolean_expression@@Base+0x18c8>
   190d4:	ldr	lr, [pc, #160]	; 1917c <__generate_code_for_binary_boolean_expression@@Base+0x1bac>
   190d8:	mov	r4, r0
   190dc:	add	lr, pc, lr
   190e0:	b	18e98 <__generate_code_for_binary_boolean_expression@@Base+0x18c8>
   190e4:	sub	sp, fp, #28
   190e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   190ec:	b	11f00 <free@plt>
   190f0:			; <UNDEFINED> instruction: 0x000146b0
   190f4:	andeq	r4, r1, ip, lsr #13
   190f8:	andeq	r4, r1, r0, lsr #13
   190fc:	andeq	r4, r1, r4, lsl #13
   19100:	andeq	r4, r1, ip, ror r5
   19104:	andeq	r2, r0, r4, lsl lr
   19108:	andeq	r3, r1, r0, asr #6
   1910c:	andeq	r4, r1, r4, asr #6
   19110:	andeq	r2, r0, r2, asr lr
   19114:	andeq	r4, r1, r4, asr #6
   19118:	andeq	r4, r1, ip, lsr #6
   1911c:			; <UNDEFINED> instruction: 0x000144b4
   19120:	andeq	r4, r1, ip, lsl #9
   19124:	andeq	r4, r1, r4, ror r6
   19128:	andeq	r4, r1, r0, ror #12
   1912c:	andeq	r4, r1, r0, ror r4
   19130:	andeq	r4, r1, r4, asr r4
   19134:	andeq	r4, r1, ip, lsl r6
   19138:	strdeq	r4, [r1], -ip
   1913c:	andeq	r4, r1, ip, lsl #12
   19140:	strdeq	r4, [r1], -ip
   19144:	andeq	r4, r1, r4, ror #11
   19148:	andeq	r4, r1, r4, lsl r4
   1914c:	andeq	r4, r1, r4, asr #7
   19150:	muleq	r1, r4, r3
   19154:			; <UNDEFINED> instruction: 0x000143bc
   19158:	muleq	r1, ip, r3
   1915c:	andeq	r4, r1, r4, lsl #5
   19160:	muleq	r1, r0, r1
   19164:	andeq	r4, r1, r4, lsr #2
   19168:	andeq	r4, r1, r4, asr #2
   1916c:	andeq	r4, r1, r0, lsr r1
   19170:	andeq	r4, r1, r8, lsl r1
   19174:	muleq	r1, r8, r0
   19178:	andeq	r4, r1, r8, lsl #1
   1917c:	strdeq	r3, [r1], -r0
   19180:	andeq	r4, r1, r8, lsr r0
   19184:	andeq	r4, r1, ip, lsl r0
   19188:	andeq	r4, r1, ip, lsl r0
   1918c:	andeq	r4, r1, r0
   19190:	andeq	r4, r1, r8, ror #3
   19194:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19198:	add	fp, sp, #28
   1919c:	sub	sp, sp, #4
   191a0:	ldr	r0, [pc, #3180]	; 19e14 <__generate_code_for_binary_boolean_expression@@Base+0x2844>
   191a4:	ldr	r0, [pc, r0]
   191a8:	cmp	r0, #0
   191ac:	beq	19808 <__generate_code_for_binary_boolean_expression@@Base+0x2238>
   191b0:	ldr	sl, [pc, #3168]	; 19e18 <__generate_code_for_binary_boolean_expression@@Base+0x2848>
   191b4:	add	sl, pc, sl
   191b8:	ldr	r6, [sl, #4]
   191bc:	ldr	r5, [pc, #3160]	; 19e1c <__generate_code_for_binary_boolean_expression@@Base+0x284c>
   191c0:	ldr	r5, [pc, r5]
   191c4:	ldr	r8, [pc, #3156]	; 19e20 <__generate_code_for_binary_boolean_expression@@Base+0x2850>
   191c8:	add	r8, pc, r8
   191cc:	ldrb	r0, [r8]
   191d0:	cmp	r0, #0
   191d4:	beq	19298 <__generate_code_for_binary_boolean_expression@@Base+0x1cc8>
   191d8:	ldr	r9, [pc, #3164]	; 19e3c <__generate_code_for_binary_boolean_expression@@Base+0x286c>
   191dc:	adds	r2, r5, #4
   191e0:	adc	ip, r6, #0
   191e4:	add	r9, pc, r9
   191e8:	ldr	r0, [r9, #4]
   191ec:	ldr	r3, [pc, #3148]	; 19e40 <__generate_code_for_binary_boolean_expression@@Base+0x2870>
   191f0:	ldr	r3, [pc, r3]
   191f4:	subs	r3, r3, r2
   191f8:	sbcs	r0, r0, ip
   191fc:	bcs	192ec <__generate_code_for_binary_boolean_expression@@Base+0x1d1c>
   19200:	mov	r0, #7
   19204:	orr	r0, r0, #131072	; 0x20000
   19208:	adds	r0, r0, r5
   1920c:	adc	r1, r6, #0
   19210:	subs	r0, r0, #4
   19214:	sbc	r1, r1, #0
   19218:	mvn	r2, #0
   1921c:	and	r5, r1, r2
   19220:	mov	r1, #16646144	; 0xfe0000
   19224:	orr	r1, r1, #-16777216	; 0xff000000
   19228:	ldr	r4, [pc, #3096]	; 19e48 <__generate_code_for_binary_boolean_expression@@Base+0x2878>
   1922c:	and	r6, r0, r1
   19230:	ldr	r0, [pc, #3092]	; 19e4c <__generate_code_for_binary_boolean_expression@@Base+0x287c>
   19234:	mov	r1, r6
   19238:	add	r4, pc, r4
   1923c:	ldr	r0, [pc, r0]
   19240:	bl	11f48 <realloc@plt>
   19244:	str	r6, [r9]
   19248:	str	r5, [r9, #4]
   1924c:	str	r0, [r4]
   19250:	ldrb	r3, [r8]
   19254:	ldr	r6, [sl, #4]
   19258:	ldr	r5, [pc, #3056]	; 19e50 <__generate_code_for_binary_boolean_expression@@Base+0x2880>
   1925c:	mov	r2, r0
   19260:	mov	r1, #0
   19264:	mov	r7, #161	; 0xa1
   19268:	ldr	r5, [pc, r5]
   1926c:	strb	r1, [r2, r5]!
   19270:	strb	r7, [r2, #3]
   19274:	strb	r1, [r2, #2]
   19278:	strb	r1, [r2, #1]
   1927c:	adds	r2, r5, #4
   19280:	adc	ip, r6, #0
   19284:	mov	r7, #1
   19288:	cmp	r3, #1
   1928c:	stm	sl, {r2, ip}
   19290:	beq	19314 <__generate_code_for_binary_boolean_expression@@Base+0x1d44>
   19294:	b	194ec <__generate_code_for_binary_boolean_expression@@Base+0x1f1c>
   19298:	ldr	r0, [pc, #2948]	; 19e24 <__generate_code_for_binary_boolean_expression@@Base+0x2854>
   1929c:	ldr	r0, [pc, r0]
   192a0:	mov	r1, r0
   192a4:	ldrb	r2, [r1, r5]!
   192a8:	ldrb	r3, [r1, #1]
   192ac:	ldrb	r7, [r1, #2]
   192b0:	ldrb	r1, [r1, #3]
   192b4:	orr	r2, r2, r3, lsl #8
   192b8:	orr	r2, r2, r7, lsl #16
   192bc:	orr	r3, r2, r1, lsl #24
   192c0:	adds	r2, r5, #4
   192c4:	adc	ip, r6, #0
   192c8:	cmp	r3, #-1593835520	; 0xa1000000
   192cc:	stm	sl, {r2, ip}
   192d0:	beq	1948c <__generate_code_for_binary_boolean_expression@@Base+0x1ebc>
   192d4:	mov	r7, #1
   192d8:	cmn	r3, #1
   192dc:	beq	194cc <__generate_code_for_binary_boolean_expression@@Base+0x1efc>
   192e0:	ldr	r1, [pc, #2880]	; 19e28 <__generate_code_for_binary_boolean_expression@@Base+0x2858>
   192e4:	add	r1, pc, r1
   192e8:	b	19bcc <__generate_code_for_binary_boolean_expression@@Base+0x25fc>
   192ec:	ldr	r0, [pc, #2896]	; 19e44 <__generate_code_for_binary_boolean_expression@@Base+0x2874>
   192f0:	mov	r3, #0
   192f4:	mov	r4, #161	; 0xa1
   192f8:	ldr	r0, [pc, r0]
   192fc:	mov	r7, r0
   19300:	strb	r3, [r7, r5]!
   19304:	strb	r4, [r7, #3]
   19308:	strb	r3, [r7, #2]
   1930c:	strb	r3, [r7, #1]
   19310:	stm	sl, {r2, ip}
   19314:	ldr	r4, [r9, #4]
   19318:	ldr	r1, [pc, #2868]	; 19e54 <__generate_code_for_binary_boolean_expression@@Base+0x2884>
   1931c:	adds	r3, r5, #8
   19320:	adc	r7, r6, #0
   19324:	ldr	r1, [pc, r1]
   19328:	subs	r1, r1, r3
   1932c:	sbcs	r1, r4, r7
   19330:	bcs	193bc <__generate_code_for_binary_boolean_expression@@Base+0x1dec>
   19334:	mov	r1, #7
   19338:	orr	r1, r1, #131072	; 0x20000
   1933c:	adds	r1, r5, r1
   19340:	adc	r2, r6, #0
   19344:	mvn	r3, #0
   19348:	and	r5, r2, r3
   1934c:	mov	r2, #16646144	; 0xfe0000
   19350:	orr	r2, r2, #-16777216	; 0xff000000
   19354:	ldr	r4, [pc, #2812]	; 19e58 <__generate_code_for_binary_boolean_expression@@Base+0x2888>
   19358:	and	r6, r1, r2
   1935c:	mov	r1, r6
   19360:	add	r4, pc, r4
   19364:	bl	11f48 <realloc@plt>
   19368:	str	r6, [r9]
   1936c:	str	r5, [r9, #4]
   19370:	str	r0, [r4]
   19374:	ldrb	r1, [r8]
   19378:	ldr	ip, [sl, #4]
   1937c:	ldr	r2, [pc, #2776]	; 19e5c <__generate_code_for_binary_boolean_expression@@Base+0x288c>
   19380:	mov	r7, r0
   19384:	mov	r3, #9
   19388:	ldr	r2, [pc, r2]
   1938c:	strb	r3, [r7, r2]!
   19390:	mov	r3, #0
   19394:	strb	r3, [r7, #3]
   19398:	strb	r3, [r7, #2]
   1939c:	strb	r3, [r7, #1]
   193a0:	adds	r3, r2, #4
   193a4:	adc	r5, ip, #0
   193a8:	mov	r7, #1
   193ac:	cmp	r1, #1
   193b0:	stm	sl, {r3, r5}
   193b4:	beq	193e4 <__generate_code_for_binary_boolean_expression@@Base+0x1e14>
   193b8:	b	19514 <__generate_code_for_binary_boolean_expression@@Base+0x1f44>
   193bc:	mov	r3, r0
   193c0:	mov	r1, #9
   193c4:	strb	r1, [r3, r2]!
   193c8:	mov	r1, #0
   193cc:	strb	r1, [r3, #3]
   193d0:	strb	r1, [r3, #2]
   193d4:	strb	r1, [r3, #1]
   193d8:	adds	r3, r2, #4
   193dc:	adc	r5, ip, #0
   193e0:	stm	sl, {r3, r5}
   193e4:	ldr	r6, [r9, #4]
   193e8:	ldr	r4, [pc, #2672]	; 19e60 <__generate_code_for_binary_boolean_expression@@Base+0x2890>
   193ec:	adds	r1, r2, #8
   193f0:	adc	r7, ip, #0
   193f4:	ldr	r4, [pc, r4]
   193f8:	subs	r1, r4, r1
   193fc:	sbcs	r1, r6, r7
   19400:	bcs	198d8 <__generate_code_for_binary_boolean_expression@@Base+0x2308>
   19404:	mov	r1, #7
   19408:	orr	r1, r1, #131072	; 0x20000
   1940c:	adds	r1, r2, r1
   19410:	adc	r2, ip, #0
   19414:	mvn	r3, #0
   19418:	and	r5, r2, r3
   1941c:	mov	r2, #16646144	; 0xfe0000
   19420:	orr	r2, r2, #-16777216	; 0xff000000
   19424:	ldr	r4, [pc, #2616]	; 19e64 <__generate_code_for_binary_boolean_expression@@Base+0x2894>
   19428:	and	r6, r1, r2
   1942c:	mov	r1, r6
   19430:	add	r4, pc, r4
   19434:	bl	11f48 <realloc@plt>
   19438:	str	r6, [r9]
   1943c:	str	r5, [r9, #4]
   19440:	str	r0, [r4]
   19444:	ldrb	r2, [r8]
   19448:	ldr	r5, [sl, #4]
   1944c:	ldr	r3, [pc, #2580]	; 19e68 <__generate_code_for_binary_boolean_expression@@Base+0x2898>
   19450:	mov	r7, r0
   19454:	mov	r1, #0
   19458:	ldr	r3, [pc, r3]
   1945c:	adds	r6, r3, #4
   19460:	strb	r1, [r7, r3]!
   19464:	str	r6, [sl]
   19468:	strb	r1, [r7, #3]
   1946c:	strb	r1, [r7, #2]
   19470:	strb	r1, [r7, #1]
   19474:	adc	r1, r5, #0
   19478:	mov	r7, #1
   1947c:	cmp	r2, #1
   19480:	str	r1, [sl, #4]
   19484:	bne	1953c <__generate_code_for_binary_boolean_expression@@Base+0x1f6c>
   19488:	b	19900 <__generate_code_for_binary_boolean_expression@@Base+0x2330>
   1948c:	ldr	r3, [r0, r2]
   19490:	adds	r4, r5, #8
   19494:	adc	r7, r6, #0
   19498:	cmp	r3, #9
   1949c:	stm	sl, {r4, r7}
   194a0:	bne	19bc4 <__generate_code_for_binary_boolean_expression@@Base+0x25f4>
   194a4:	ldr	r3, [pc, #2444]	; 19e38 <__generate_code_for_binary_boolean_expression@@Base+0x2868>
   194a8:	adds	r4, r5, #20
   194ac:	adc	r7, r6, #0
   194b0:	add	r3, pc, r3
   194b4:	add	r6, r5, r0
   194b8:	ldrb	r3, [r3]
   194bc:	ldr	r6, [r6, #16]
   194c0:	stm	sl, {r4, r7}
   194c4:	eor	r3, r3, #1
   194c8:	add	r7, r6, r3
   194cc:	mov	r6, r0
   194d0:	mov	r3, #0
   194d4:	strb	r3, [r6, r5]!
   194d8:	mov	r5, #161	; 0xa1
   194dc:	strb	r5, [r6, #3]
   194e0:	strb	r3, [r6, #2]
   194e4:	strb	r3, [r6, #1]
   194e8:	stm	sl, {r2, ip}
   194ec:	mov	r3, r0
   194f0:	mov	r1, #9
   194f4:	strb	r1, [r3, r2]!
   194f8:	mov	r1, #0
   194fc:	strb	r1, [r3, #3]
   19500:	strb	r1, [r3, #2]
   19504:	strb	r1, [r3, #1]
   19508:	adds	r3, r2, #4
   1950c:	adc	r5, ip, #0
   19510:	stm	sl, {r3, r5}
   19514:	mov	r2, r0
   19518:	mov	r1, #0
   1951c:	strb	r1, [r2, r3]!
   19520:	adds	r6, r3, #4
   19524:	strb	r1, [r2, #3]
   19528:	strb	r1, [r2, #2]
   1952c:	strb	r1, [r2, #1]
   19530:	adc	r1, r5, #0
   19534:	str	r6, [sl]
   19538:	str	r1, [sl, #4]
   1953c:	mov	r3, r0
   19540:	mov	r2, #0
   19544:	strb	r2, [r3, r6]!
   19548:	strb	r2, [r3, #3]
   1954c:	strb	r2, [r3, #2]
   19550:	strb	r2, [r3, #1]
   19554:	adds	r2, r6, #4
   19558:	adc	r3, r1, #0
   1955c:	strd	r2, [sl]
   19560:	lsr	r1, r7, #24
   19564:	strb	r7, [r0, r2]!
   19568:	lsr	r6, r7, #16
   1956c:	lsr	r5, r7, #8
   19570:	strb	r1, [r0, #3]
   19574:	strb	r6, [r0, #2]
   19578:	strb	r5, [r0, #1]
   1957c:	ldrb	r0, [r8]
   19580:	adds	r4, r2, #4
   19584:	adc	r5, r3, #0
   19588:	cmp	r0, #0
   1958c:	strd	r4, [sl]
   19590:	beq	19644 <__generate_code_for_binary_boolean_expression@@Base+0x2074>
   19594:	ldr	r9, [pc, #2284]	; 19e88 <__generate_code_for_binary_boolean_expression@@Base+0x28b8>
   19598:	adds	r0, r2, #8
   1959c:	adc	r1, r3, #0
   195a0:	add	r9, pc, r9
   195a4:	ldr	r7, [r9, #4]
   195a8:	ldr	r6, [pc, #2268]	; 19e8c <__generate_code_for_binary_boolean_expression@@Base+0x28bc>
   195ac:	ldr	r6, [pc, r6]
   195b0:	subs	r0, r6, r0
   195b4:	sbcs	r0, r7, r1
   195b8:	bcs	19810 <__generate_code_for_binary_boolean_expression@@Base+0x2240>
   195bc:	mov	r0, #7
   195c0:	orr	r0, r0, #131072	; 0x20000
   195c4:	adds	r0, r2, r0
   195c8:	adc	r1, r3, #0
   195cc:	mvn	r2, #0
   195d0:	and	r5, r1, r2
   195d4:	mov	r1, #16646144	; 0xfe0000
   195d8:	orr	r1, r1, #-16777216	; 0xff000000
   195dc:	ldr	r4, [pc, #2268]	; 19ec0 <__generate_code_for_binary_boolean_expression@@Base+0x28f0>
   195e0:	and	r6, r0, r1
   195e4:	ldr	r0, [pc, #2264]	; 19ec4 <__generate_code_for_binary_boolean_expression@@Base+0x28f4>
   195e8:	mov	r1, r6
   195ec:	add	r4, pc, r4
   195f0:	ldr	r0, [pc, r0]
   195f4:	bl	11f48 <realloc@plt>
   195f8:	str	r6, [r9]
   195fc:	str	r5, [r9, #4]
   19600:	str	r0, [r4]
   19604:	ldrb	r1, [r8]
   19608:	ldr	r5, [sl, #4]
   1960c:	ldr	r4, [pc, #2228]	; 19ec8 <__generate_code_for_binary_boolean_expression@@Base+0x28f8>
   19610:	mov	r3, r0
   19614:	mov	r2, #0
   19618:	ldr	r4, [pc, r4]
   1961c:	strb	r2, [r3, r4]!
   19620:	strb	r2, [r3, #3]
   19624:	strb	r2, [r3, #2]
   19628:	strb	r2, [r3, #1]
   1962c:	adds	r2, r4, #4
   19630:	adc	r3, r5, #0
   19634:	cmp	r1, #0
   19638:	strd	r2, [sl]
   1963c:	beq	19670 <__generate_code_for_binary_boolean_expression@@Base+0x20a0>
   19640:	b	1983c <__generate_code_for_binary_boolean_expression@@Base+0x226c>
   19644:	ldr	r0, [pc, #2104]	; 19e84 <__generate_code_for_binary_boolean_expression@@Base+0x28b4>
   19648:	adds	r2, r2, #8
   1964c:	mov	r1, #0
   19650:	adc	r3, r3, #0
   19654:	ldr	r0, [pc, r0]
   19658:	mov	r7, r0
   1965c:	strb	r1, [r7, r4]!
   19660:	strb	r1, [r7, #3]
   19664:	strb	r1, [r7, #2]
   19668:	strb	r1, [r7, #1]
   1966c:	strd	r2, [sl]
   19670:	mov	r7, r0
   19674:	mov	r1, #0
   19678:	strb	r1, [r7, r2]!
   1967c:	strb	r1, [r7, #3]
   19680:	strb	r1, [r7, #2]
   19684:	strb	r1, [r7, #1]
   19688:	adds	r1, r2, #4
   1968c:	adc	r5, r3, #0
   19690:	stm	sl, {r1, r5}
   19694:	mov	r3, r0
   19698:	mov	r2, #0
   1969c:	strb	r2, [r3, r1]!
   196a0:	strb	r2, [r3, #3]
   196a4:	strb	r2, [r3, #2]
   196a8:	strb	r2, [r3, #1]
   196ac:	adds	r2, r1, #4
   196b0:	adc	r3, r5, #0
   196b4:	strd	r2, [sl]
   196b8:	mov	r7, r0
   196bc:	mov	r1, #0
   196c0:	strb	r1, [r7, r2]!
   196c4:	strb	r1, [r7, #3]
   196c8:	strb	r1, [r7, #2]
   196cc:	strb	r1, [r7, #1]
   196d0:	adds	r1, r2, #4
   196d4:	adc	r5, r3, #0
   196d8:	stm	sl, {r1, r5}
   196dc:	mov	r3, r0
   196e0:	mov	r2, #0
   196e4:	strb	r2, [r3, r1]!
   196e8:	adds	r4, r1, #4
   196ec:	strb	r2, [r3, #3]
   196f0:	strb	r2, [r3, #2]
   196f4:	strb	r2, [r3, #1]
   196f8:	adc	r3, r5, #0
   196fc:	str	r4, [sl]
   19700:	str	r3, [sl, #4]
   19704:	mov	r2, r0
   19708:	mov	r1, #0
   1970c:	strb	r1, [r2, r4]!
   19710:	strb	r1, [r2, #3]
   19714:	strb	r1, [r2, #2]
   19718:	strb	r1, [r2, #1]
   1971c:	adds	r2, r4, #4
   19720:	adc	r1, r3, #0
   19724:	str	r2, [sl]
   19728:	str	r1, [sl, #4]
   1972c:	mov	r3, r0
   19730:	mov	r4, #0
   19734:	strb	r4, [r3, r2]!
   19738:	mov	r7, #163	; 0xa3
   1973c:	strb	r7, [r3, #3]
   19740:	strb	r4, [r3, #2]
   19744:	strb	r4, [r3, #1]
   19748:	ldrb	r7, [r8]
   1974c:	adds	r6, r2, #4
   19750:	adc	r3, r1, #0
   19754:	cmp	r7, #1
   19758:	str	r6, [sl]
   1975c:	str	r3, [sl, #4]
   19760:	bne	197d4 <__generate_code_for_binary_boolean_expression@@Base+0x2204>
   19764:	ldr	r8, [pc, #1852]	; 19ea8 <__generate_code_for_binary_boolean_expression@@Base+0x28d8>
   19768:	adds	lr, r2, #8
   1976c:	adc	ip, r1, #0
   19770:	add	r8, pc, r8
   19774:	ldr	r5, [r8, #4]
   19778:	ldr	r7, [pc, #1836]	; 19eac <__generate_code_for_binary_boolean_expression@@Base+0x28dc>
   1977c:	ldr	r7, [pc, r7]
   19780:	subs	r7, r7, lr
   19784:	sbcs	r7, r5, ip
   19788:	bcs	197d4 <__generate_code_for_binary_boolean_expression@@Base+0x2204>
   1978c:	mov	r3, #7
   19790:	orr	r3, r3, #131072	; 0x20000
   19794:	adds	r2, r2, r3
   19798:	adc	r1, r1, #0
   1979c:	mvn	r3, #0
   197a0:	and	r7, r1, r3
   197a4:	mov	r1, #16646144	; 0xfe0000
   197a8:	orr	r1, r1, #-16777216	; 0xff000000
   197ac:	ldr	r5, [pc, #1788]	; 19eb0 <__generate_code_for_binary_boolean_expression@@Base+0x28e0>
   197b0:	and	r6, r2, r1
   197b4:	mov	r1, r6
   197b8:	add	r5, pc, r5
   197bc:	bl	11f48 <realloc@plt>
   197c0:	strd	r6, [r8]
   197c4:	str	r0, [r5]
   197c8:	ldr	r3, [sl, #4]
   197cc:	ldr	r6, [pc, #1760]	; 19eb4 <__generate_code_for_binary_boolean_expression@@Base+0x28e4>
   197d0:	ldr	r6, [pc, r6]
   197d4:	ldr	r0, [pc, #1756]	; 19eb8 <__generate_code_for_binary_boolean_expression@@Base+0x28e8>
   197d8:	ldr	r1, [pc, #1756]	; 19ebc <__generate_code_for_binary_boolean_expression@@Base+0x28ec>
   197dc:	adds	r2, r6, #4
   197e0:	add	r0, pc, r0
   197e4:	adc	r3, r3, #0
   197e8:	ldr	r1, [pc, r1]
   197ec:	strb	r4, [r1, r6]!
   197f0:	strb	r4, [r1, #3]
   197f4:	strb	r4, [r1, #2]
   197f8:	strb	r4, [r1, #1]
   197fc:	mov	r1, #1
   19800:	strd	r2, [sl]
   19804:	strb	r1, [r0]
   19808:	sub	sp, fp, #28
   1980c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19810:	ldr	r0, [pc, #1656]	; 19e90 <__generate_code_for_binary_boolean_expression@@Base+0x28c0>
   19814:	adds	r2, r2, #8
   19818:	mov	r1, #0
   1981c:	adc	r3, r3, #0
   19820:	ldr	r0, [pc, r0]
   19824:	mov	r7, r0
   19828:	strb	r1, [r7, r4]!
   1982c:	strb	r1, [r7, #3]
   19830:	strb	r1, [r7, #2]
   19834:	strb	r1, [r7, #1]
   19838:	strd	r2, [sl]
   1983c:	ldr	r6, [r9, #4]
   19840:	ldr	r1, [pc, #1668]	; 19ecc <__generate_code_for_binary_boolean_expression@@Base+0x28fc>
   19844:	adds	ip, r4, #8
   19848:	adc	r7, r5, #0
   1984c:	ldr	r1, [pc, r1]
   19850:	subs	r1, r1, ip
   19854:	sbcs	r1, r6, r7
   19858:	bcs	199a4 <__generate_code_for_binary_boolean_expression@@Base+0x23d4>
   1985c:	mov	r1, #7
   19860:	orr	r1, r1, #131072	; 0x20000
   19864:	adds	r1, r4, r1
   19868:	adc	r2, r5, #0
   1986c:	mvn	r3, #0
   19870:	and	r5, r2, r3
   19874:	mov	r2, #16646144	; 0xfe0000
   19878:	orr	r2, r2, #-16777216	; 0xff000000
   1987c:	ldr	r6, [pc, #1612]	; 19ed0 <__generate_code_for_binary_boolean_expression@@Base+0x2900>
   19880:	and	r4, r1, r2
   19884:	mov	r1, r4
   19888:	add	r6, pc, r6
   1988c:	bl	11f48 <realloc@plt>
   19890:	str	r0, [r6]
   19894:	strd	r4, [r9]
   19898:	ldrb	r7, [r8]
   1989c:	ldr	r3, [sl, #4]
   198a0:	ldr	r2, [pc, #1580]	; 19ed4 <__generate_code_for_binary_boolean_expression@@Base+0x2904>
   198a4:	mov	r6, r0
   198a8:	mov	r1, #0
   198ac:	ldr	r2, [pc, r2]
   198b0:	strb	r1, [r6, r2]!
   198b4:	strb	r1, [r6, #3]
   198b8:	strb	r1, [r6, #2]
   198bc:	strb	r1, [r6, #1]
   198c0:	adds	r1, r2, #4
   198c4:	adc	r5, r3, #0
   198c8:	cmp	r7, #1
   198cc:	stm	sl, {r1, r5}
   198d0:	bne	19694 <__generate_code_for_binary_boolean_expression@@Base+0x20c4>
   198d4:	b	199c8 <__generate_code_for_binary_boolean_expression@@Base+0x23f8>
   198d8:	mov	r2, r0
   198dc:	mov	r1, #0
   198e0:	strb	r1, [r2, r3]!
   198e4:	adds	r6, r3, #4
   198e8:	strb	r1, [r2, #3]
   198ec:	strb	r1, [r2, #2]
   198f0:	strb	r1, [r2, #1]
   198f4:	adc	r1, r5, #0
   198f8:	str	r6, [sl]
   198fc:	str	r1, [sl, #4]
   19900:	ldr	r4, [r9, #4]
   19904:	ldr	r2, [pc, #1376]	; 19e6c <__generate_code_for_binary_boolean_expression@@Base+0x289c>
   19908:	adds	ip, r3, #8
   1990c:	adc	r7, r5, #0
   19910:	ldr	r2, [pc, r2]
   19914:	subs	r2, r2, ip
   19918:	sbcs	r2, r4, r7
   1991c:	bcs	19a68 <__generate_code_for_binary_boolean_expression@@Base+0x2498>
   19920:	mov	r1, #7
   19924:	orr	r1, r1, #131072	; 0x20000
   19928:	adds	r1, r3, r1
   1992c:	adc	r2, r5, #0
   19930:	mvn	r3, #0
   19934:	and	r5, r2, r3
   19938:	mov	r2, #16646144	; 0xfe0000
   1993c:	orr	r2, r2, #-16777216	; 0xff000000
   19940:	ldr	r4, [pc, #1320]	; 19e70 <__generate_code_for_binary_boolean_expression@@Base+0x28a0>
   19944:	and	r6, r1, r2
   19948:	mov	r1, r6
   1994c:	add	r4, pc, r4
   19950:	bl	11f48 <realloc@plt>
   19954:	str	r6, [r9]
   19958:	str	r5, [r9, #4]
   1995c:	str	r0, [r4]
   19960:	ldrb	r5, [r8]
   19964:	ldr	r1, [sl, #4]
   19968:	ldr	r6, [pc, #1284]	; 19e74 <__generate_code_for_binary_boolean_expression@@Base+0x28a4>
   1996c:	mov	r3, r0
   19970:	mov	r2, #0
   19974:	mov	r7, #1
   19978:	ldr	r6, [pc, r6]
   1997c:	strb	r2, [r3, r6]!
   19980:	strb	r2, [r3, #3]
   19984:	strb	r2, [r3, #2]
   19988:	strb	r2, [r3, #1]
   1998c:	adds	r2, r6, #4
   19990:	adc	r3, r1, #0
   19994:	cmp	r5, #1
   19998:	strd	r2, [sl]
   1999c:	bne	19560 <__generate_code_for_binary_boolean_expression@@Base+0x1f90>
   199a0:	b	19a8c <__generate_code_for_binary_boolean_expression@@Base+0x24bc>
   199a4:	mov	r7, r0
   199a8:	mov	r1, #0
   199ac:	strb	r1, [r7, r2]!
   199b0:	strb	r1, [r7, #3]
   199b4:	strb	r1, [r7, #2]
   199b8:	strb	r1, [r7, #1]
   199bc:	adds	r1, r2, #4
   199c0:	adc	r5, r3, #0
   199c4:	stm	sl, {r1, r5}
   199c8:	ldr	r4, [r9, #4]
   199cc:	ldr	r6, [pc, #1284]	; 19ed8 <__generate_code_for_binary_boolean_expression@@Base+0x2908>
   199d0:	adds	r7, r2, #8
   199d4:	adc	ip, r3, #0
   199d8:	ldr	r6, [pc, r6]
   199dc:	subs	r7, r6, r7
   199e0:	sbcs	r7, r4, ip
   199e4:	bcs	19b00 <__generate_code_for_binary_boolean_expression@@Base+0x2530>
   199e8:	mov	r1, #7
   199ec:	orr	r1, r1, #131072	; 0x20000
   199f0:	adds	r1, r2, r1
   199f4:	adc	r2, r3, #0
   199f8:	mvn	r3, #0
   199fc:	and	r5, r2, r3
   19a00:	mov	r2, #16646144	; 0xfe0000
   19a04:	orr	r2, r2, #-16777216	; 0xff000000
   19a08:	ldr	r4, [pc, #1228]	; 19edc <__generate_code_for_binary_boolean_expression@@Base+0x290c>
   19a0c:	and	r6, r1, r2
   19a10:	mov	r1, r6
   19a14:	add	r4, pc, r4
   19a18:	bl	11f48 <realloc@plt>
   19a1c:	str	r6, [r9]
   19a20:	str	r5, [r9, #4]
   19a24:	str	r0, [r4]
   19a28:	ldrb	r7, [r8]
   19a2c:	ldr	r5, [sl, #4]
   19a30:	ldr	r1, [pc, #1192]	; 19ee0 <__generate_code_for_binary_boolean_expression@@Base+0x2910>
   19a34:	mov	r3, r0
   19a38:	mov	r2, #0
   19a3c:	ldr	r1, [pc, r1]
   19a40:	strb	r2, [r3, r1]!
   19a44:	strb	r2, [r3, #3]
   19a48:	strb	r2, [r3, #2]
   19a4c:	strb	r2, [r3, #1]
   19a50:	adds	r2, r1, #4
   19a54:	adc	r3, r5, #0
   19a58:	cmp	r7, #1
   19a5c:	strd	r2, [sl]
   19a60:	bne	196b8 <__generate_code_for_binary_boolean_expression@@Base+0x20e8>
   19a64:	b	19b24 <__generate_code_for_binary_boolean_expression@@Base+0x2554>
   19a68:	mov	r3, r0
   19a6c:	mov	r2, #0
   19a70:	strb	r2, [r3, r6]!
   19a74:	strb	r2, [r3, #3]
   19a78:	strb	r2, [r3, #2]
   19a7c:	strb	r2, [r3, #1]
   19a80:	adds	r2, r6, #4
   19a84:	adc	r3, r1, #0
   19a88:	strd	r2, [sl]
   19a8c:	ldr	r4, [r9, #4]
   19a90:	ldr	r5, [pc, #992]	; 19e78 <__generate_code_for_binary_boolean_expression@@Base+0x28a8>
   19a94:	adds	lr, r6, #8
   19a98:	adc	ip, r1, #0
   19a9c:	mov	r7, #1
   19aa0:	ldr	r5, [pc, r5]
   19aa4:	subs	r5, r5, lr
   19aa8:	sbcs	r5, r4, ip
   19aac:	bcs	19560 <__generate_code_for_binary_boolean_expression@@Base+0x1f90>
   19ab0:	mov	r2, #7
   19ab4:	orr	r2, r2, #131072	; 0x20000
   19ab8:	adds	r2, r6, r2
   19abc:	adc	r1, r1, #0
   19ac0:	mvn	r3, #0
   19ac4:	and	r5, r1, r3
   19ac8:	mov	r1, #16646144	; 0xfe0000
   19acc:	orr	r1, r1, #-16777216	; 0xff000000
   19ad0:	ldr	r4, [pc, #932]	; 19e7c <__generate_code_for_binary_boolean_expression@@Base+0x28ac>
   19ad4:	and	r6, r2, r1
   19ad8:	mov	r1, r6
   19adc:	add	r4, pc, r4
   19ae0:	bl	11f48 <realloc@plt>
   19ae4:	str	r6, [r9]
   19ae8:	str	r5, [r9, #4]
   19aec:	str	r0, [r4]
   19af0:	ldr	r3, [sl, #4]
   19af4:	ldr	r2, [pc, #900]	; 19e80 <__generate_code_for_binary_boolean_expression@@Base+0x28b0>
   19af8:	ldr	r2, [pc, r2]
   19afc:	b	19560 <__generate_code_for_binary_boolean_expression@@Base+0x1f90>
   19b00:	mov	r3, r0
   19b04:	mov	r2, #0
   19b08:	strb	r2, [r3, r1]!
   19b0c:	strb	r2, [r3, #3]
   19b10:	strb	r2, [r3, #2]
   19b14:	strb	r2, [r3, #1]
   19b18:	adds	r2, r1, #4
   19b1c:	adc	r3, r5, #0
   19b20:	strd	r2, [sl]
   19b24:	ldr	r4, [r9, #4]
   19b28:	ldr	r6, [pc, #948]	; 19ee4 <__generate_code_for_binary_boolean_expression@@Base+0x2914>
   19b2c:	adds	r7, r1, #8
   19b30:	adc	ip, r5, #0
   19b34:	ldr	r6, [pc, r6]
   19b38:	subs	r7, r6, r7
   19b3c:	sbcs	r7, r4, ip
   19b40:	bcs	19bec <__generate_code_for_binary_boolean_expression@@Base+0x261c>
   19b44:	mov	r2, #7
   19b48:	orr	r2, r2, #131072	; 0x20000
   19b4c:	adds	r1, r1, r2
   19b50:	adc	r2, r5, #0
   19b54:	mvn	r3, #0
   19b58:	and	r5, r2, r3
   19b5c:	mov	r2, #16646144	; 0xfe0000
   19b60:	orr	r2, r2, #-16777216	; 0xff000000
   19b64:	ldr	r4, [pc, #892]	; 19ee8 <__generate_code_for_binary_boolean_expression@@Base+0x2918>
   19b68:	and	r6, r1, r2
   19b6c:	mov	r1, r6
   19b70:	add	r4, pc, r4
   19b74:	bl	11f48 <realloc@plt>
   19b78:	str	r6, [r9]
   19b7c:	str	r5, [r9, #4]
   19b80:	str	r0, [r4]
   19b84:	ldrb	r7, [r8]
   19b88:	ldr	r3, [sl, #4]
   19b8c:	ldr	r2, [pc, #856]	; 19eec <__generate_code_for_binary_boolean_expression@@Base+0x291c>
   19b90:	mov	r6, r0
   19b94:	mov	r1, #0
   19b98:	ldr	r2, [pc, r2]
   19b9c:	strb	r1, [r6, r2]!
   19ba0:	strb	r1, [r6, #3]
   19ba4:	strb	r1, [r6, #2]
   19ba8:	strb	r1, [r6, #1]
   19bac:	adds	r1, r2, #4
   19bb0:	adc	r5, r3, #0
   19bb4:	cmp	r7, #1
   19bb8:	stm	sl, {r1, r5}
   19bbc:	bne	196dc <__generate_code_for_binary_boolean_expression@@Base+0x210c>
   19bc0:	b	19c10 <__generate_code_for_binary_boolean_expression@@Base+0x2640>
   19bc4:	ldr	r1, [pc, #616]	; 19e34 <__generate_code_for_binary_boolean_expression@@Base+0x2864>
   19bc8:	add	r1, pc, r1
   19bcc:	ldr	r0, [pc, #600]	; 19e2c <__generate_code_for_binary_boolean_expression@@Base+0x285c>
   19bd0:	ldr	r0, [pc, r0]
   19bd4:	ldr	r0, [r0]
   19bd8:	ldr	r2, [pc, #592]	; 19e30 <__generate_code_for_binary_boolean_expression@@Base+0x2860>
   19bdc:	ldr	r2, [pc, r2]
   19be0:	sub	sp, fp, #28
   19be4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19be8:	b	11fe4 <fprintf@plt>
   19bec:	mov	r7, r0
   19bf0:	mov	r1, #0
   19bf4:	strb	r1, [r7, r2]!
   19bf8:	strb	r1, [r7, #3]
   19bfc:	strb	r1, [r7, #2]
   19c00:	strb	r1, [r7, #1]
   19c04:	adds	r1, r2, #4
   19c08:	adc	r5, r3, #0
   19c0c:	stm	sl, {r1, r5}
   19c10:	ldr	r4, [r9, #4]
   19c14:	ldr	r6, [pc, #724]	; 19ef0 <__generate_code_for_binary_boolean_expression@@Base+0x2920>
   19c18:	adds	r7, r2, #8
   19c1c:	adc	ip, r3, #0
   19c20:	ldr	r6, [pc, r6]
   19c24:	subs	r7, r6, r7
   19c28:	sbcs	r7, r4, ip
   19c2c:	bcs	19cb4 <__generate_code_for_binary_boolean_expression@@Base+0x26e4>
   19c30:	mov	r1, #7
   19c34:	orr	r1, r1, #131072	; 0x20000
   19c38:	adds	r1, r2, r1
   19c3c:	adc	r2, r3, #0
   19c40:	mvn	r3, #0
   19c44:	and	r5, r2, r3
   19c48:	mov	r2, #16646144	; 0xfe0000
   19c4c:	orr	r2, r2, #-16777216	; 0xff000000
   19c50:	ldr	r4, [pc, #668]	; 19ef4 <__generate_code_for_binary_boolean_expression@@Base+0x2924>
   19c54:	and	r6, r1, r2
   19c58:	mov	r1, r6
   19c5c:	add	r4, pc, r4
   19c60:	bl	11f48 <realloc@plt>
   19c64:	str	r6, [r9]
   19c68:	str	r5, [r9, #4]
   19c6c:	str	r0, [r4]
   19c70:	ldrb	r2, [r8]
   19c74:	ldr	r5, [sl, #4]
   19c78:	ldr	r1, [pc, #632]	; 19ef8 <__generate_code_for_binary_boolean_expression@@Base+0x2928>
   19c7c:	mov	r7, r0
   19c80:	mov	r3, #0
   19c84:	ldr	r1, [pc, r1]
   19c88:	adds	r4, r1, #4
   19c8c:	strb	r3, [r7, r1]!
   19c90:	str	r4, [sl]
   19c94:	strb	r3, [r7, #3]
   19c98:	strb	r3, [r7, #2]
   19c9c:	strb	r3, [r7, #1]
   19ca0:	adc	r3, r5, #0
   19ca4:	cmp	r2, #1
   19ca8:	str	r3, [sl, #4]
   19cac:	bne	19704 <__generate_code_for_binary_boolean_expression@@Base+0x2134>
   19cb0:	b	19cdc <__generate_code_for_binary_boolean_expression@@Base+0x270c>
   19cb4:	mov	r3, r0
   19cb8:	mov	r2, #0
   19cbc:	strb	r2, [r3, r1]!
   19cc0:	adds	r4, r1, #4
   19cc4:	strb	r2, [r3, #3]
   19cc8:	strb	r2, [r3, #2]
   19ccc:	strb	r2, [r3, #1]
   19cd0:	adc	r3, r5, #0
   19cd4:	str	r4, [sl]
   19cd8:	str	r3, [sl, #4]
   19cdc:	ldr	r6, [r9, #4]
   19ce0:	ldr	r2, [pc, #532]	; 19efc <__generate_code_for_binary_boolean_expression@@Base+0x292c>
   19ce4:	adds	ip, r1, #8
   19ce8:	adc	r7, r5, #0
   19cec:	ldr	r2, [pc, r2]
   19cf0:	subs	r2, r2, ip
   19cf4:	sbcs	r2, r6, r7
   19cf8:	bcs	19d80 <__generate_code_for_binary_boolean_expression@@Base+0x27b0>
   19cfc:	mov	r2, #7
   19d00:	orr	r2, r2, #131072	; 0x20000
   19d04:	adds	r1, r1, r2
   19d08:	adc	r2, r5, #0
   19d0c:	mvn	r3, #0
   19d10:	and	r5, r2, r3
   19d14:	mov	r2, #16646144	; 0xfe0000
   19d18:	orr	r2, r2, #-16777216	; 0xff000000
   19d1c:	ldr	r4, [pc, #368]	; 19e94 <__generate_code_for_binary_boolean_expression@@Base+0x28c4>
   19d20:	and	r6, r1, r2
   19d24:	mov	r1, r6
   19d28:	add	r4, pc, r4
   19d2c:	bl	11f48 <realloc@plt>
   19d30:	str	r6, [r9]
   19d34:	str	r5, [r9, #4]
   19d38:	str	r0, [r4]
   19d3c:	ldrb	r7, [r8]
   19d40:	ldr	r3, [sl, #4]
   19d44:	ldr	r4, [pc, #332]	; 19e98 <__generate_code_for_binary_boolean_expression@@Base+0x28c8>
   19d48:	mov	r2, r0
   19d4c:	mov	r1, #0
   19d50:	ldr	r4, [pc, r4]
   19d54:	strb	r1, [r2, r4]!
   19d58:	strb	r1, [r2, #3]
   19d5c:	strb	r1, [r2, #2]
   19d60:	strb	r1, [r2, #1]
   19d64:	adds	r2, r4, #4
   19d68:	adc	r1, r3, #0
   19d6c:	cmp	r7, #0
   19d70:	str	r2, [sl]
   19d74:	str	r1, [sl, #4]
   19d78:	beq	1972c <__generate_code_for_binary_boolean_expression@@Base+0x215c>
   19d7c:	b	19da8 <__generate_code_for_binary_boolean_expression@@Base+0x27d8>
   19d80:	mov	r2, r0
   19d84:	mov	r1, #0
   19d88:	strb	r1, [r2, r4]!
   19d8c:	strb	r1, [r2, #3]
   19d90:	strb	r1, [r2, #2]
   19d94:	strb	r1, [r2, #1]
   19d98:	adds	r2, r4, #4
   19d9c:	adc	r1, r3, #0
   19da0:	str	r2, [sl]
   19da4:	str	r1, [sl, #4]
   19da8:	ldr	r5, [r9, #4]
   19dac:	ldr	r6, [pc, #232]	; 19e9c <__generate_code_for_binary_boolean_expression@@Base+0x28cc>
   19db0:	adds	r7, r4, #8
   19db4:	adc	ip, r3, #0
   19db8:	ldr	r6, [pc, r6]
   19dbc:	subs	r7, r6, r7
   19dc0:	sbcs	r7, r5, ip
   19dc4:	bcs	1972c <__generate_code_for_binary_boolean_expression@@Base+0x215c>
   19dc8:	mov	r1, #7
   19dcc:	orr	r1, r1, #131072	; 0x20000
   19dd0:	adds	r1, r4, r1
   19dd4:	adc	r2, r3, #0
   19dd8:	mvn	r3, #0
   19ddc:	and	r7, r2, r3
   19de0:	mov	r2, #16646144	; 0xfe0000
   19de4:	orr	r2, r2, #-16777216	; 0xff000000
   19de8:	ldr	r5, [pc, #176]	; 19ea0 <__generate_code_for_binary_boolean_expression@@Base+0x28d0>
   19dec:	and	r6, r1, r2
   19df0:	mov	r1, r6
   19df4:	add	r5, pc, r5
   19df8:	bl	11f48 <realloc@plt>
   19dfc:	strd	r6, [r9]
   19e00:	str	r0, [r5]
   19e04:	ldr	r1, [sl, #4]
   19e08:	ldr	r2, [pc, #148]	; 19ea4 <__generate_code_for_binary_boolean_expression@@Base+0x28d4>
   19e0c:	ldr	r2, [pc, r2]
   19e10:	b	1972c <__generate_code_for_binary_boolean_expression@@Base+0x215c>
   19e14:	andeq	r3, r1, ip, lsr #30
   19e18:	andeq	r3, r1, ip, lsr #30
   19e1c:	andeq	r3, r1, r0, lsr #30
   19e20:	andeq	r3, r1, r4, lsl #30
   19e24:	andeq	r3, r1, r8, lsr lr
   19e28:	andeq	r2, r0, r2, lsr r9
   19e2c:	andeq	r2, r1, r8, ror #9
   19e30:	andeq	r3, r1, ip, ror #9
   19e34:	muleq	r0, fp, r0
   19e38:	andeq	r3, r1, r8, lsr ip
   19e3c:	strdeq	r3, [r1], -r4
   19e40:	andeq	r3, r1, r8, ror #29
   19e44:	ldrdeq	r3, [r1], -ip
   19e48:	muleq	r1, ip, lr
   19e4c:	muleq	r1, r8, lr
   19e50:	andeq	r3, r1, r8, ror lr
   19e54:			; <UNDEFINED> instruction: 0x00013db4
   19e58:	andeq	r3, r1, r4, ror sp
   19e5c:	andeq	r3, r1, r8, asr sp
   19e60:	andeq	r3, r1, r4, ror #25
   19e64:	andeq	r3, r1, r4, lsr #25
   19e68:	andeq	r3, r1, r8, lsl #25
   19e6c:	andeq	r3, r1, r8, asr #15
   19e70:	andeq	r3, r1, r8, lsl #15
   19e74:	andeq	r3, r1, r8, ror #14
   19e78:	andeq	r3, r1, r8, lsr r6
   19e7c:	strdeq	r3, [r1], -r8
   19e80:	andeq	r3, r1, r8, ror #11
   19e84:	andeq	r3, r1, r0, lsl #21
   19e88:	andeq	r3, r1, r8, lsr fp
   19e8c:	andeq	r3, r1, ip, lsr #22
   19e90:			; <UNDEFINED> instruction: 0x000138b4
   19e94:	andeq	r3, r1, ip, lsr #7
   19e98:	muleq	r1, r0, r3
   19e9c:	andeq	r3, r1, r0, lsr #6
   19ea0:	andeq	r3, r1, r0, ror #5
   19ea4:	ldrdeq	r3, [r1], -r4
   19ea8:	andeq	r3, r1, r8, ror #18
   19eac:	andeq	r3, r1, ip, asr r9
   19eb0:	andeq	r3, r1, ip, lsl r9
   19eb4:	andeq	r3, r1, r0, lsl r9
   19eb8:	andeq	r3, r1, r8, lsl #18
   19ebc:	andeq	r3, r1, ip, ror #17
   19ec0:	andeq	r3, r1, r8, ror #21
   19ec4:	andeq	r3, r1, r4, ror #21
   19ec8:	andeq	r3, r1, r8, asr #21
   19ecc:	andeq	r3, r1, ip, lsl #17
   19ed0:	andeq	r3, r1, ip, asr #16
   19ed4:	andeq	r3, r1, r4, lsr r8
   19ed8:	andeq	r3, r1, r0, lsl #14
   19edc:	andeq	r3, r1, r0, asr #13
   19ee0:	andeq	r3, r1, r4, lsr #13
   19ee4:	andeq	r3, r1, r4, lsr #11
   19ee8:	andeq	r3, r1, r4, ror #10
   19eec:	andeq	r3, r1, r8, asr #10
   19ef0:			; <UNDEFINED> instruction: 0x000134b8
   19ef4:	andeq	r3, r1, r8, ror r4
   19ef8:	andeq	r3, r1, ip, asr r4
   19efc:	andeq	r3, r1, ip, ror #7
   19f00:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19f04:	add	fp, sp, #28
   19f08:	sub	sp, sp, #4
   19f0c:	ldr	r0, [pc, #496]	; 1a104 <__generate_code_for_binary_boolean_expression@@Base+0x2b34>
   19f10:	ldr	r0, [pc, r0]
   19f14:	cmp	r0, #0
   19f18:	beq	1a0ac <__generate_code_for_binary_boolean_expression@@Base+0x2adc>
   19f1c:	ldr	sl, [pc, #484]	; 1a108 <__generate_code_for_binary_boolean_expression@@Base+0x2b38>
   19f20:	mov	r5, #0
   19f24:	mov	r1, #0
   19f28:	add	sl, pc, sl
   19f2c:	ldrb	r0, [sl]
   19f30:	ldr	r8, [pc, #468]	; 1a10c <__generate_code_for_binary_boolean_expression@@Base+0x2b3c>
   19f34:	ldr	r4, [pc, #468]	; 1a110 <__generate_code_for_binary_boolean_expression@@Base+0x2b40>
   19f38:	cmp	r0, #1
   19f3c:	add	r8, pc, r8
   19f40:	add	r4, pc, r4
   19f44:	bne	19fc0 <__generate_code_for_binary_boolean_expression@@Base+0x29f0>
   19f48:	ldr	r9, [pc, #452]	; 1a114 <__generate_code_for_binary_boolean_expression@@Base+0x2b44>
   19f4c:	ldr	r0, [r8, #4]
   19f50:	ldr	r2, [pc, #448]	; 1a118 <__generate_code_for_binary_boolean_expression@@Base+0x2b48>
   19f54:	add	r9, pc, r9
   19f58:	mov	ip, r4
   19f5c:	mov	r1, #1
   19f60:	ldr	r2, [pc, r2]
   19f64:	ldr	r7, [r9, #4]
   19f68:	ldr	r4, [pc, #428]	; 1a11c <__generate_code_for_binary_boolean_expression@@Base+0x2b4c>
   19f6c:	adds	r3, r2, #8
   19f70:	adc	r6, r0, #0
   19f74:	ldr	r4, [pc, r4]
   19f78:	subs	r3, r4, r3
   19f7c:	mov	r4, ip
   19f80:	sbcs	r3, r7, r6
   19f84:	bcs	19fc0 <__generate_code_for_binary_boolean_expression@@Base+0x29f0>
   19f88:	mov	r1, #7
   19f8c:	orr	r1, r1, #131072	; 0x20000
   19f90:	adds	r1, r2, r1
   19f94:	adc	r7, r0, #0
   19f98:	mov	r0, #16646144	; 0xfe0000
   19f9c:	orr	r0, r0, #-16777216	; 0xff000000
   19fa0:	and	r6, r1, r0
   19fa4:	ldr	r0, [pc, #372]	; 1a120 <__generate_code_for_binary_boolean_expression@@Base+0x2b50>
   19fa8:	mov	r1, r6
   19fac:	ldr	r0, [pc, r0]
   19fb0:	bl	11f48 <realloc@plt>
   19fb4:	ldrb	r1, [sl]
   19fb8:	strd	r6, [r9]
   19fbc:	str	r0, [r4]
   19fc0:	ldr	r2, [pc, #348]	; 1a124 <__generate_code_for_binary_boolean_expression@@Base+0x2b54>
   19fc4:	ldr	r2, [pc, r2]
   19fc8:	ldr	r0, [pc, #344]	; 1a128 <__generate_code_for_binary_boolean_expression@@Base+0x2b58>
   19fcc:	ldr	r0, [pc, r0]
   19fd0:	ldr	r3, [r8, #4]
   19fd4:	mov	r7, r0
   19fd8:	strb	r5, [r7, r2]!
   19fdc:	adds	r2, r2, #8
   19fe0:	adc	r3, r3, #0
   19fe4:	strb	r5, [r7, #5]
   19fe8:	strb	r5, [r7, #3]
   19fec:	strb	r5, [r7, #2]
   19ff0:	strb	r5, [r7, #1]
   19ff4:	strb	r5, [r7, #4]!
   19ff8:	cmp	r1, #0
   19ffc:	strb	r5, [r7, #3]
   1a000:	strb	r5, [r7, #2]
   1a004:	strd	r2, [r8]
   1a008:	beq	1a030 <__generate_code_for_binary_boolean_expression@@Base+0x2a60>
   1a00c:	ldr	r3, [pc, #280]	; 1a12c <__generate_code_for_binary_boolean_expression@@Base+0x2b5c>
   1a010:	mov	r1, r2
   1a014:	mov	r2, #1
   1a018:	ldr	r3, [pc, r3]
   1a01c:	bl	11f54 <fwrite@plt>
   1a020:	ldr	r0, [pc, #264]	; 1a130 <__generate_code_for_binary_boolean_expression@@Base+0x2b60>
   1a024:	ldr	r0, [pc, r0]
   1a028:	bl	11f00 <free@plt>
   1a02c:	b	1a074 <__generate_code_for_binary_boolean_expression@@Base+0x2aa4>
   1a030:	ldr	r1, [pc, #252]	; 1a134 <__generate_code_for_binary_boolean_expression@@Base+0x2b64>
   1a034:	mov	r2, #4
   1a038:	ldr	r1, [pc, r1]
   1a03c:	bl	1208c <msync@plt>
   1a040:	cmn	r0, #1
   1a044:	beq	1a0c0 <__generate_code_for_binary_boolean_expression@@Base+0x2af0>
   1a048:	ldr	r1, [pc, #244]	; 1a144 <__generate_code_for_binary_boolean_expression@@Base+0x2b74>
   1a04c:	ldr	r1, [pc, r1]
   1a050:	ldr	r0, [pc, #240]	; 1a148 <__generate_code_for_binary_boolean_expression@@Base+0x2b78>
   1a054:	ldr	r0, [pc, r0]
   1a058:	bl	1205c <munmap@plt>
   1a05c:	ldr	r0, [pc, #232]	; 1a14c <__generate_code_for_binary_boolean_expression@@Base+0x2b7c>
   1a060:	mov	r1, #0
   1a064:	str	r1, [r4]
   1a068:	add	r0, pc, r0
   1a06c:	str	r1, [r0]
   1a070:	str	r1, [r0, #4]
   1a074:	ldr	r0, [pc, #212]	; 1a150 <__generate_code_for_binary_boolean_expression@@Base+0x2b80>
   1a078:	ldr	r0, [pc, r0]
   1a07c:	bl	11ef4 <fflush@plt>
   1a080:	ldr	r0, [pc, #204]	; 1a154 <__generate_code_for_binary_boolean_expression@@Base+0x2b84>
   1a084:	ldr	r0, [pc, r0]
   1a088:	bl	1a600 <__gcov_flush@@Base+0x304>
   1a08c:	ldr	r0, [pc, #196]	; 1a158 <__generate_code_for_binary_boolean_expression@@Base+0x2b88>
   1a090:	ldr	r0, [pc, r0]
   1a094:	bl	12044 <fclose@plt>
   1a098:	ldr	r0, [pc, #188]	; 1a15c <__generate_code_for_binary_boolean_expression@@Base+0x2b8c>
   1a09c:	mov	r1, #0
   1a0a0:	str	r1, [r4]
   1a0a4:	add	r0, pc, r0
   1a0a8:	str	r1, [r0]
   1a0ac:	ldr	r0, [pc, #172]	; 1a160 <__generate_code_for_binary_boolean_expression@@Base+0x2b90>
   1a0b0:	ldr	r0, [pc, r0]
   1a0b4:	sub	sp, fp, #28
   1a0b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a0bc:	b	11f00 <free@plt>
   1a0c0:	bl	11ff0 <__errno_location@plt>
   1a0c4:	ldr	r1, [pc, #108]	; 1a138 <__generate_code_for_binary_boolean_expression@@Base+0x2b68>
   1a0c8:	mov	r6, r4
   1a0cc:	ldr	r1, [pc, r1]
   1a0d0:	ldr	r0, [r0]
   1a0d4:	ldr	r4, [r1]
   1a0d8:	ldr	r5, [pc, #92]	; 1a13c <__generate_code_for_binary_boolean_expression@@Base+0x2b6c>
   1a0dc:	ldr	r5, [pc, r5]
   1a0e0:	bl	11f90 <strerror@plt>
   1a0e4:	ldr	r1, [pc, #84]	; 1a140 <__generate_code_for_binary_boolean_expression@@Base+0x2b70>
   1a0e8:	mov	r3, r0
   1a0ec:	mov	r0, r4
   1a0f0:	add	r1, pc, r1
   1a0f4:	mov	r2, r5
   1a0f8:	mov	r4, r6
   1a0fc:	bl	11fe4 <fprintf@plt>
   1a100:	b	1a048 <__generate_code_for_binary_boolean_expression@@Base+0x2a78>
   1a104:	andeq	r3, r1, r0, asr #3
   1a108:	andeq	r3, r1, r4, lsr #3
   1a10c:	andeq	r3, r1, r4, lsr #3
   1a110:	muleq	r1, r4, r1
   1a114:	andeq	r3, r1, r4, lsl #3
   1a118:	andeq	r3, r1, r0, lsl #3
   1a11c:	andeq	r3, r1, r4, ror #2
   1a120:	andeq	r3, r1, r8, lsr #2
   1a124:	andeq	r3, r1, ip, lsl r1
   1a128:	andeq	r3, r1, r8, lsl #2
   1a12c:	strheq	r3, [r1], -r8
   1a130:	strheq	r3, [r1], -r0
   1a134:	andeq	r3, r1, r0, asr #1
   1a138:	andeq	r1, r1, ip, ror #31
   1a13c:	andeq	r2, r1, ip, ror #31
   1a140:	andeq	r1, r0, r1, ror #23
   1a144:	andeq	r3, r1, ip, lsr #1
   1a148:	andeq	r3, r1, r0, lsl #1
   1a14c:	muleq	r1, r0, r0
   1a150:	andeq	r3, r1, r8, asr r0
   1a154:	andeq	r2, r1, r4, asr #32
   1a158:	andeq	r3, r1, r0, asr #32
   1a15c:	andeq	r3, r1, ip, lsr #32
   1a160:	andeq	r3, r1, r8, lsl r0
   1a164:	push	{r4, sl, fp, lr}
   1a168:	add	fp, sp, #8
   1a16c:	mov	r4, r0
   1a170:	mov	r0, #12
   1a174:	bl	11f78 <malloc@plt>
   1a178:	ldr	r1, [pc, #60]	; 1a1bc <__generate_code_for_binary_boolean_expression@@Base+0x2bec>
   1a17c:	mov	r2, #0
   1a180:	add	r1, pc, r1
   1a184:	stm	r0, {r1, r4}
   1a188:	str	r2, [r0, #8]
   1a18c:	ldr	r1, [pc, #44]	; 1a1c0 <__generate_code_for_binary_boolean_expression@@Base+0x2bf0>
   1a190:	ldr	r1, [pc, r1]
   1a194:	mov	r2, r1
   1a198:	ldr	r3, [r2], #4
   1a19c:	ldr	r4, [r2]
   1a1a0:	cmp	r3, #0
   1a1a4:	mov	r3, r2
   1a1a8:	addne	r3, r4, #8
   1a1ac:	moveq	r2, r1
   1a1b0:	str	r0, [r3]
   1a1b4:	str	r0, [r2]
   1a1b8:	pop	{r4, sl, fp, pc}
   1a1bc:	andeq	r2, r1, ip, ror #30
   1a1c0:	andeq	r1, r1, r4, lsr #30
   1a1c4:	push	{r4, r5, fp, lr}
   1a1c8:	add	fp, sp, #8
   1a1cc:	ldr	r0, [pc, #64]	; 1a214 <__generate_code_for_binary_boolean_expression@@Base+0x2c44>
   1a1d0:	ldr	r0, [pc, r0]
   1a1d4:	ldr	r4, [r0]
   1a1d8:	cmp	r4, #0
   1a1dc:	beq	1a210 <__generate_code_for_binary_boolean_expression@@Base+0x2c40>
   1a1e0:	ldr	r5, [pc, #48]	; 1a218 <__generate_code_for_binary_boolean_expression@@Base+0x2c48>
   1a1e4:	add	r5, pc, r5
   1a1e8:	b	1a1f8 <__generate_code_for_binary_boolean_expression@@Base+0x2c28>
   1a1ec:	ldr	r4, [r4, #8]
   1a1f0:	cmp	r4, #0
   1a1f4:	beq	1a210 <__generate_code_for_binary_boolean_expression@@Base+0x2c40>
   1a1f8:	ldr	r0, [r4]
   1a1fc:	cmp	r0, r5
   1a200:	bne	1a1ec <__generate_code_for_binary_boolean_expression@@Base+0x2c1c>
   1a204:	ldr	r0, [r4, #4]
   1a208:	blx	r0
   1a20c:	b	1a1ec <__generate_code_for_binary_boolean_expression@@Base+0x2c1c>
   1a210:	pop	{r4, r5, fp, pc}
   1a214:	andeq	r1, r1, r4, ror #29
   1a218:	andeq	r2, r1, r8, lsl #30
   1a21c:	push	{r4, r5, r6, r7, fp, lr}
   1a220:	add	fp, sp, #16
   1a224:	ldr	r4, [pc, #104]	; 1a294 <__generate_code_for_binary_boolean_expression@@Base+0x2cc4>
   1a228:	ldr	r4, [pc, r4]
   1a22c:	ldr	r0, [r4]
   1a230:	cmp	r0, #0
   1a234:	beq	1a290 <__generate_code_for_binary_boolean_expression@@Base+0x2cc0>
   1a238:	ldr	r5, [pc, #88]	; 1a298 <__generate_code_for_binary_boolean_expression@@Base+0x2cc8>
   1a23c:	mov	r6, #0
   1a240:	add	r5, pc, r5
   1a244:	b	1a278 <__generate_code_for_binary_boolean_expression@@Base+0x2ca8>
   1a248:	ldr	r1, [r4]
   1a24c:	cmp	r0, r1
   1a250:	streq	r7, [r4]
   1a254:	ldr	r1, [r4, #4]
   1a258:	cmp	r0, r1
   1a25c:	streq	r6, [r4, #4]
   1a260:	cmp	r6, #0
   1a264:	strne	r7, [r6, #8]
   1a268:	bl	11f00 <free@plt>
   1a26c:	mov	r0, r7
   1a270:	cmp	r7, #0
   1a274:	beq	1a290 <__generate_code_for_binary_boolean_expression@@Base+0x2cc0>
   1a278:	ldr	r1, [r0]
   1a27c:	ldr	r7, [r0, #8]
   1a280:	cmp	r1, r5
   1a284:	beq	1a248 <__generate_code_for_binary_boolean_expression@@Base+0x2c78>
   1a288:	mov	r6, r0
   1a28c:	b	1a26c <__generate_code_for_binary_boolean_expression@@Base+0x2c9c>
   1a290:	pop	{r4, r5, r6, r7, fp, pc}
   1a294:	andeq	r1, r1, ip, lsl #29
   1a298:	andeq	r2, r1, ip, lsr #29
   1a29c:	push	{r4, sl, fp, lr}
   1a2a0:	add	fp, sp, #8
   1a2a4:	mov	r4, r0
   1a2a8:	mov	r0, #12
   1a2ac:	bl	11f78 <malloc@plt>
   1a2b0:	ldr	r1, [pc, #60]	; 1a2f4 <__generate_code_for_binary_boolean_expression@@Base+0x2d24>
   1a2b4:	mov	r2, #0
   1a2b8:	add	r1, pc, r1
   1a2bc:	stm	r0, {r1, r4}
   1a2c0:	str	r2, [r0, #8]
   1a2c4:	ldr	r1, [pc, #44]	; 1a2f8 <__generate_code_for_binary_boolean_expression@@Base+0x2d28>
   1a2c8:	ldr	r1, [pc, r1]
   1a2cc:	mov	r2, r1
   1a2d0:	ldr	r3, [r2], #4
   1a2d4:	ldr	r4, [r2]
   1a2d8:	cmp	r3, #0
   1a2dc:	mov	r3, r2
   1a2e0:	addne	r3, r4, #8
   1a2e4:	moveq	r2, r1
   1a2e8:	str	r0, [r3]
   1a2ec:	str	r0, [r2]
   1a2f0:	pop	{r4, sl, fp, pc}
   1a2f4:	andeq	r2, r1, r4, lsr lr
   1a2f8:	andeq	r1, r1, r8, ror #27

0001a2fc <__gcov_flush@@Base>:
   1a2fc:	push	{r4, sl, fp, lr}
   1a300:	add	fp, sp, #8
   1a304:	ldr	r0, [pc, #36]	; 1a330 <__gcov_flush@@Base+0x34>
   1a308:	ldr	r0, [pc, r0]
   1a30c:	ldr	r4, [r0]
   1a310:	cmp	r4, #0
   1a314:	beq	1a32c <__gcov_flush@@Base+0x30>
   1a318:	ldr	r0, [r4, #4]
   1a31c:	blx	r0
   1a320:	ldr	r4, [r4, #8]
   1a324:	cmp	r4, #0
   1a328:	bne	1a318 <__gcov_flush@@Base+0x1c>
   1a32c:	pop	{r4, sl, fp, pc}
   1a330:	andeq	r1, r1, r8, lsr #27
   1a334:	push	{r4, r5, r6, r7, fp, lr}
   1a338:	add	fp, sp, #16
   1a33c:	ldr	r4, [pc, #104]	; 1a3ac <__gcov_flush@@Base+0xb0>
   1a340:	ldr	r4, [pc, r4]
   1a344:	ldr	r0, [r4]
   1a348:	cmp	r0, #0
   1a34c:	beq	1a3a8 <__gcov_flush@@Base+0xac>
   1a350:	ldr	r5, [pc, #88]	; 1a3b0 <__gcov_flush@@Base+0xb4>
   1a354:	mov	r6, #0
   1a358:	add	r5, pc, r5
   1a35c:	b	1a390 <__gcov_flush@@Base+0x94>
   1a360:	ldr	r1, [r4]
   1a364:	cmp	r0, r1
   1a368:	streq	r7, [r4]
   1a36c:	ldr	r1, [r4, #4]
   1a370:	cmp	r0, r1
   1a374:	streq	r6, [r4, #4]
   1a378:	cmp	r6, #0
   1a37c:	strne	r7, [r6, #8]
   1a380:	bl	11f00 <free@plt>
   1a384:	mov	r0, r7
   1a388:	cmp	r7, #0
   1a38c:	beq	1a3a8 <__gcov_flush@@Base+0xac>
   1a390:	ldr	r1, [r0]
   1a394:	ldr	r7, [r0, #8]
   1a398:	cmp	r1, r5
   1a39c:	beq	1a360 <__gcov_flush@@Base+0x64>
   1a3a0:	mov	r6, r0
   1a3a4:	b	1a384 <__gcov_flush@@Base+0x88>
   1a3a8:	pop	{r4, r5, r6, r7, fp, pc}
   1a3ac:	andeq	r1, r1, r0, ror sp
   1a3b0:	muleq	r1, r4, sp
   1a3b4:	push	{r4, r5, r6, sl, fp, lr}
   1a3b8:	add	fp, sp, #16
   1a3bc:	ldr	r6, [pc, #228]	; 1a4a8 <__gcov_flush@@Base+0x1ac>
   1a3c0:	mov	r4, r1
   1a3c4:	cmp	r0, #0
   1a3c8:	add	r6, pc, r6
   1a3cc:	beq	1a418 <__gcov_flush@@Base+0x11c>
   1a3d0:	mov	r5, r0
   1a3d4:	mov	r0, #12
   1a3d8:	bl	11f78 <malloc@plt>
   1a3dc:	mov	r1, #0
   1a3e0:	str	r6, [r0]
   1a3e4:	str	r5, [r0, #4]
   1a3e8:	str	r1, [r0, #8]
   1a3ec:	ldr	r1, [pc, #184]	; 1a4ac <__gcov_flush@@Base+0x1b0>
   1a3f0:	ldr	r1, [pc, r1]
   1a3f4:	mov	r2, r1
   1a3f8:	ldr	r3, [r2], #4
   1a3fc:	ldr	r5, [r2]
   1a400:	cmp	r3, #0
   1a404:	mov	r3, r2
   1a408:	addne	r3, r5, #8
   1a40c:	moveq	r2, r1
   1a410:	str	r0, [r3]
   1a414:	str	r0, [r2]
   1a418:	cmp	r4, #0
   1a41c:	beq	1a464 <__gcov_flush@@Base+0x168>
   1a420:	mov	r0, #12
   1a424:	bl	11f78 <malloc@plt>
   1a428:	mov	r1, #0
   1a42c:	str	r6, [r0]
   1a430:	str	r4, [r0, #4]
   1a434:	str	r1, [r0, #8]
   1a438:	ldr	r1, [pc, #112]	; 1a4b0 <__gcov_flush@@Base+0x1b4>
   1a43c:	ldr	r1, [pc, r1]
   1a440:	mov	r2, r1
   1a444:	ldr	r3, [r2], #4
   1a448:	ldr	r6, [r2]
   1a44c:	cmp	r3, #0
   1a450:	mov	r3, r2
   1a454:	addne	r3, r6, #8
   1a458:	moveq	r2, r1
   1a45c:	str	r0, [r3]
   1a460:	str	r0, [r2]
   1a464:	ldr	r1, [pc, #72]	; 1a4b4 <__gcov_flush@@Base+0x1b8>
   1a468:	add	r1, pc, r1
   1a46c:	ldrb	r0, [r1]
   1a470:	cmp	r0, #0
   1a474:	popne	{r4, r5, r6, sl, fp, pc}
   1a478:	ldr	r0, [pc, #56]	; 1a4b8 <__gcov_flush@@Base+0x1bc>
   1a47c:	mov	r2, #1
   1a480:	strb	r2, [r1]
   1a484:	add	r0, pc, r0
   1a488:	bl	1aa54 <__libc_csu_fini@@Base+0x4>
   1a48c:	ldr	r0, [pc, #40]	; 1a4bc <__gcov_flush@@Base+0x1c0>
   1a490:	add	r0, pc, r0
   1a494:	bl	1aa54 <__libc_csu_fini@@Base+0x4>
   1a498:	ldr	r0, [pc, #32]	; 1a4c0 <__gcov_flush@@Base+0x1c4>
   1a49c:	add	r0, pc, r0
   1a4a0:	pop	{r4, r5, r6, sl, fp, lr}
   1a4a4:	b	1aa54 <__libc_csu_fini@@Base+0x4>
   1a4a8:	andeq	r2, r1, r4, lsr #26
   1a4ac:	andeq	r1, r1, r4, asr #25
   1a4b0:	andeq	r1, r1, r4, ror ip
   1a4b4:	andeq	r2, r1, r8, lsl #25
   1a4b8:			; <UNDEFINED> instruction: 0xfffffea8
   1a4bc:			; <UNDEFINED> instruction: 0xfffffd84
   1a4c0:			; <UNDEFINED> instruction: 0xfffffd20
   1a4c4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1a4c8:	add	fp, sp, #24
   1a4cc:	ldr	r7, [pc, #68]	; 1a518 <__gcov_flush@@Base+0x21c>
   1a4d0:	mov	r4, r0
   1a4d4:	mov	r5, #1
   1a4d8:	mov	r8, #0
   1a4dc:	ldr	r7, [pc, r7]
   1a4e0:	mov	r6, #47	; 0x2f
   1a4e4:	b	1a500 <__gcov_flush@@Base+0x204>
   1a4e8:	strb	r8, [r4, r5]
   1a4ec:	ldr	r1, [r7]
   1a4f0:	mov	r0, r4
   1a4f4:	bl	12008 <mkdir@plt>
   1a4f8:	strb	r6, [r4, r5]
   1a4fc:	add	r5, r5, #1
   1a500:	ldrb	r0, [r4, r5]
   1a504:	cmp	r0, #47	; 0x2f
   1a508:	beq	1a4e8 <__gcov_flush@@Base+0x1ec>
   1a50c:	cmp	r0, #0
   1a510:	bne	1a4fc <__gcov_flush@@Base+0x200>
   1a514:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1a518:	ldrdeq	r1, [r1], -r0
   1a51c:	ldr	r0, [pc, #8]	; 1a52c <__gcov_flush@@Base+0x230>
   1a520:	ldr	r0, [pc, r0]
   1a524:	ldr	r0, [r0]
   1a528:	bx	lr
   1a52c:	andeq	r1, r1, ip, lsl #23
   1a530:	ldr	r1, [pc, #8]	; 1a540 <__gcov_flush@@Base+0x244>
   1a534:	ldr	r1, [pc, r1]
   1a538:	str	r0, [r1]
   1a53c:	bx	lr
   1a540:	andeq	r1, r1, r8, ror fp
   1a544:	push	{r4, r5, r6, sl, fp, lr}
   1a548:	add	fp, sp, #16
   1a54c:	sub	sp, sp, #392	; 0x188
   1a550:	mov	r6, sp
   1a554:	mov	r5, r0
   1a558:	mov	r0, r6
   1a55c:	mov	r4, r1
   1a560:	bl	11f30 <uname@plt>
   1a564:	cmp	r0, #0
   1a568:	bmi	1a580 <__gcov_flush@@Base+0x284>
   1a56c:	add	r1, r6, #65	; 0x41
   1a570:	mov	r0, r5
   1a574:	mov	r2, r4
   1a578:	bl	12020 <strncpy@plt>
   1a57c:	mov	r0, #0
   1a580:	sub	sp, fp, #16
   1a584:	pop	{r4, r5, r6, sl, fp, pc}
   1a588:	push	{r4, r5, r6, sl, fp, lr}
   1a58c:	add	fp, sp, #16
   1a590:	sub	sp, sp, #32
   1a594:	mov	r4, #0
   1a598:	str	r4, [sp, #8]
   1a59c:	strh	r4, [sp, #2]
   1a5a0:	mov	r5, r0
   1a5a4:	str	r4, [sp, #12]
   1a5a8:	str	r4, [sp, #16]
   1a5ac:	str	r4, [sp, #20]
   1a5b0:	bl	11fa8 <getpid@plt>
   1a5b4:	mov	r6, sp
   1a5b8:	str	r0, [sp, #24]
   1a5bc:	mov	r0, #1
   1a5c0:	strh	r0, [sp]
   1a5c4:	mov	r0, r5
   1a5c8:	mov	r1, #14
   1a5cc:	mov	r2, r6
   1a5d0:	bl	12068 <fcntl64@plt>
   1a5d4:	cmn	r0, #1
   1a5d8:	bne	1a5f4 <__gcov_flush@@Base+0x2f8>
   1a5dc:	bl	11ff0 <__errno_location@plt>
   1a5e0:	ldr	r0, [r0]
   1a5e4:	cmp	r0, #4
   1a5e8:	beq	1a5c4 <__gcov_flush@@Base+0x2c8>
   1a5ec:	cmp	r0, #37	; 0x25
   1a5f0:	mvneq	r4, #0
   1a5f4:	mov	r0, r4
   1a5f8:	sub	sp, fp, #16
   1a5fc:	pop	{r4, r5, r6, sl, fp, pc}
   1a600:	push	{r4, r5, r6, sl, fp, lr}
   1a604:	add	fp, sp, #16
   1a608:	sub	sp, sp, #32
   1a60c:	mov	r4, #0
   1a610:	str	r4, [sp, #8]
   1a614:	strh	r4, [sp, #2]
   1a618:	mov	r5, r0
   1a61c:	str	r4, [sp, #12]
   1a620:	str	r4, [sp, #16]
   1a624:	str	r4, [sp, #20]
   1a628:	bl	11fa8 <getpid@plt>
   1a62c:	mov	r6, sp
   1a630:	str	r0, [sp, #24]
   1a634:	mov	r0, #2
   1a638:	strh	r0, [sp]
   1a63c:	mov	r0, r5
   1a640:	mov	r1, #14
   1a644:	mov	r2, r6
   1a648:	bl	12068 <fcntl64@plt>
   1a64c:	cmn	r0, #1
   1a650:	bne	1a66c <__gcov_flush@@Base+0x370>
   1a654:	bl	11ff0 <__errno_location@plt>
   1a658:	ldr	r0, [r0]
   1a65c:	cmp	r0, #4
   1a660:	beq	1a63c <__gcov_flush@@Base+0x340>
   1a664:	cmp	r0, #37	; 0x25
   1a668:	mvneq	r4, #0
   1a66c:	mov	r0, r4
   1a670:	sub	sp, fp, #16
   1a674:	pop	{r4, r5, r6, sl, fp, pc}
   1a678:	push	{r4, r5, r6, sl, fp, lr}
   1a67c:	add	fp, sp, #16
   1a680:	sub	sp, sp, #32
   1a684:	bl	12038 <fileno@plt>
   1a688:	mov	r4, #0
   1a68c:	str	r4, [sp, #8]
   1a690:	strh	r4, [sp, #2]
   1a694:	mov	r5, r0
   1a698:	str	r4, [sp, #12]
   1a69c:	str	r4, [sp, #16]
   1a6a0:	str	r4, [sp, #20]
   1a6a4:	bl	11fa8 <getpid@plt>
   1a6a8:	mov	r6, sp
   1a6ac:	str	r0, [sp, #24]
   1a6b0:	mov	r0, #1
   1a6b4:	strh	r0, [sp]
   1a6b8:	mov	r0, r5
   1a6bc:	mov	r1, #14
   1a6c0:	mov	r2, r6
   1a6c4:	bl	12068 <fcntl64@plt>
   1a6c8:	cmn	r0, #1
   1a6cc:	bne	1a6e8 <__gcov_flush@@Base+0x3ec>
   1a6d0:	bl	11ff0 <__errno_location@plt>
   1a6d4:	ldr	r0, [r0]
   1a6d8:	cmp	r0, #4
   1a6dc:	beq	1a6b8 <__gcov_flush@@Base+0x3bc>
   1a6e0:	cmp	r0, #37	; 0x25
   1a6e4:	mvneq	r4, #0
   1a6e8:	mov	r0, r4
   1a6ec:	sub	sp, fp, #16
   1a6f0:	pop	{r4, r5, r6, sl, fp, pc}
   1a6f4:	push	{r4, r5, r6, sl, fp, lr}
   1a6f8:	add	fp, sp, #16
   1a6fc:	sub	sp, sp, #32
   1a700:	bl	12038 <fileno@plt>
   1a704:	mov	r4, #0
   1a708:	str	r4, [sp, #8]
   1a70c:	strh	r4, [sp, #2]
   1a710:	mov	r5, r0
   1a714:	str	r4, [sp, #12]
   1a718:	str	r4, [sp, #16]
   1a71c:	str	r4, [sp, #20]
   1a720:	bl	11fa8 <getpid@plt>
   1a724:	mov	r6, sp
   1a728:	str	r0, [sp, #24]
   1a72c:	mov	r0, #2
   1a730:	strh	r0, [sp]
   1a734:	mov	r0, r5
   1a738:	mov	r1, #14
   1a73c:	mov	r2, r6
   1a740:	bl	12068 <fcntl64@plt>
   1a744:	cmn	r0, #1
   1a748:	bne	1a764 <__gcov_flush@@Base+0x468>
   1a74c:	bl	11ff0 <__errno_location@plt>
   1a750:	ldr	r0, [r0]
   1a754:	cmp	r0, #4
   1a758:	beq	1a734 <__gcov_flush@@Base+0x438>
   1a75c:	cmp	r0, #37	; 0x25
   1a760:	mvneq	r4, #0
   1a764:	mov	r0, r4
   1a768:	sub	sp, fp, #16
   1a76c:	pop	{r4, r5, r6, sl, fp, pc}
   1a770:	push	{r4, r5, fp, lr}
   1a774:	add	fp, sp, #8
   1a778:	sub	sp, sp, #32
   1a77c:	mov	r2, #182	; 0xb6
   1a780:	orr	r2, r2, #256	; 0x100
   1a784:	mov	r1, #66	; 0x42
   1a788:	bl	11f60 <open64@plt>
   1a78c:	cmp	r0, #0
   1a790:	bmi	1a80c <__gcov_flush@@Base+0x510>
   1a794:	mov	r4, r0
   1a798:	mov	r0, #0
   1a79c:	str	r0, [sp, #8]
   1a7a0:	strh	r0, [sp, #2]
   1a7a4:	str	r0, [sp, #12]
   1a7a8:	str	r0, [sp, #16]
   1a7ac:	str	r0, [sp, #20]
   1a7b0:	bl	11fa8 <getpid@plt>
   1a7b4:	mov	r5, sp
   1a7b8:	str	r0, [sp, #24]
   1a7bc:	mov	r0, #1
   1a7c0:	strh	r0, [sp]
   1a7c4:	mov	r0, r4
   1a7c8:	mov	r1, #14
   1a7cc:	mov	r2, r5
   1a7d0:	bl	12068 <fcntl64@plt>
   1a7d4:	cmn	r0, #1
   1a7d8:	bne	1a7f4 <__gcov_flush@@Base+0x4f8>
   1a7dc:	bl	11ff0 <__errno_location@plt>
   1a7e0:	ldr	r0, [r0]
   1a7e4:	cmp	r0, #4
   1a7e8:	beq	1a7c4 <__gcov_flush@@Base+0x4c8>
   1a7ec:	cmp	r0, #37	; 0x25
   1a7f0:	beq	1a818 <__gcov_flush@@Base+0x51c>
   1a7f4:	ldr	r1, [pc, #76]	; 1a848 <__gcov_flush@@Base+0x54c>
   1a7f8:	mov	r0, r4
   1a7fc:	add	r1, pc, r1
   1a800:	bl	11ed0 <fdopen@plt>
   1a804:	sub	sp, fp, #8
   1a808:	pop	{r4, r5, fp, pc}
   1a80c:	mov	r0, #0
   1a810:	sub	sp, fp, #8
   1a814:	pop	{r4, r5, fp, pc}
   1a818:	ldr	r1, [pc, #28]	; 1a83c <__gcov_flush@@Base+0x540>
   1a81c:	ldr	r2, [pc, #28]	; 1a840 <__gcov_flush@@Base+0x544>
   1a820:	ldr	r0, [pc, #28]	; 1a844 <__gcov_flush@@Base+0x548>
   1a824:	add	r1, pc, r1
   1a828:	add	r2, pc, r2
   1a82c:	ldr	r0, [pc, r0]
   1a830:	ldr	r0, [r0]
   1a834:	bl	11fe4 <fprintf@plt>
   1a838:	b	1a7f4 <__gcov_flush@@Base+0x4f8>
   1a83c:	andeq	r1, r0, lr, asr #9
   1a840:	andeq	r1, r0, r3, lsl r5
   1a844:	andeq	r1, r1, ip, lsl #17
   1a848:	andeq	r1, r0, r4, asr r3
   1a84c:	push	{r4, r5, r6, sl, fp, lr}
   1a850:	add	fp, sp, #16
   1a854:	mov	r6, r0
   1a858:	ldr	r0, [pc, #120]	; 1a8d8 <__gcov_flush@@Base+0x5dc>
   1a85c:	mov	r4, r1
   1a860:	add	r0, pc, r0
   1a864:	bl	11f6c <getenv@plt>
   1a868:	mov	r5, r0
   1a86c:	ldr	r0, [pc, #104]	; 1a8dc <__gcov_flush@@Base+0x5e0>
   1a870:	add	r0, pc, r0
   1a874:	bl	11f6c <getenv@plt>
   1a878:	mov	r1, #0
   1a87c:	str	r1, [r4]
   1a880:	str	r1, [r6]
   1a884:	cmp	r5, #0
   1a888:	ldrbne	r2, [r5]
   1a88c:	cmpne	r2, #0
   1a890:	bne	1a89c <__gcov_flush@@Base+0x5a0>
   1a894:	mov	r0, r1
   1a898:	pop	{r4, r5, r6, sl, fp, pc}
   1a89c:	cmp	r0, #0
   1a8a0:	beq	1a8b8 <__gcov_flush@@Base+0x5bc>
   1a8a4:	mov	r1, #0
   1a8a8:	mov	r2, #10
   1a8ac:	bl	11edc <strtol@plt>
   1a8b0:	bic	r0, r0, r0, asr #31
   1a8b4:	b	1a8bc <__gcov_flush@@Base+0x5c0>
   1a8b8:	mov	r0, #0
   1a8bc:	str	r0, [r6]
   1a8c0:	mov	r0, r5
   1a8c4:	bl	11fc0 <strlen@plt>
   1a8c8:	mov	r1, r5
   1a8cc:	str	r0, [r4]
   1a8d0:	mov	r0, r1
   1a8d4:	pop	{r4, r5, r6, sl, fp, pc}
   1a8d8:	andeq	r1, r0, r9, lsl #10
   1a8dc:	andeq	r1, r0, r5, lsl #10
   1a8e0:	push	{r4, r5, r6, r7, fp, lr}
   1a8e4:	add	fp, sp, #16
   1a8e8:	mov	r6, r0
   1a8ec:	ldr	r0, [fp, #8]
   1a8f0:	mov	r5, r3
   1a8f4:	mov	r7, r2
   1a8f8:	mov	r4, r1
   1a8fc:	cmp	r0, #1
   1a900:	blt	1a938 <__gcov_flush@@Base+0x63c>
   1a904:	add	r1, r4, #1
   1a908:	mov	r2, #0
   1a90c:	b	1a924 <__gcov_flush@@Base+0x628>
   1a910:	add	r2, r2, #1
   1a914:	mov	r4, r1
   1a918:	add	r1, r1, #1
   1a91c:	cmp	r2, r0
   1a920:	bge	1a938 <__gcov_flush@@Base+0x63c>
   1a924:	ldrb	r3, [r1]
   1a928:	cmp	r3, #47	; 0x2f
   1a92c:	beq	1a910 <__gcov_flush@@Base+0x614>
   1a930:	cmp	r3, #0
   1a934:	bne	1a918 <__gcov_flush@@Base+0x61c>
   1a938:	mov	r0, r6
   1a93c:	mov	r1, r7
   1a940:	mov	r2, r5
   1a944:	bl	11f0c <memcpy@plt>
   1a948:	add	r0, r5, r7
   1a94c:	ldrb	r0, [r0, #-1]
   1a950:	cmp	r0, #47	; 0x2f
   1a954:	movne	r0, #47	; 0x2f
   1a958:	strbne	r0, [r6, r5]
   1a95c:	mov	r0, r4
   1a960:	addne	r5, r5, #1
   1a964:	add	r5, r6, r5
   1a968:	bl	11fc0 <strlen@plt>
   1a96c:	add	r2, r0, #1
   1a970:	mov	r0, r5
   1a974:	mov	r1, r4
   1a978:	pop	{r4, r5, r6, r7, fp, lr}
   1a97c:	b	11f0c <memcpy@plt>
   1a980:	mov	r1, #47	; 0x2f
   1a984:	b	11fcc <strchr@plt>
   1a988:	mov	r1, #47	; 0x2f
   1a98c:	b	12074 <strrchr@plt>
   1a990:	push	{fp, lr}
   1a994:	mov	fp, sp
   1a998:	sub	sp, sp, #8
   1a99c:	mov	r0, #0
   1a9a0:	str	r0, [sp, #4]
   1a9a4:	add	r1, sp, #4
   1a9a8:	mov	r0, #2
   1a9ac:	bl	1202c <prctl@plt>
   1a9b0:	ldr	r1, [sp, #4]
   1a9b4:	cmp	r0, #0
   1a9b8:	cmpeq	r1, #9
   1a9bc:	bne	1a9d0 <__gcov_flush@@Base+0x6d4>
   1a9c0:	mov	r0, #1
   1a9c4:	mov	r1, #0
   1a9c8:	bl	1202c <prctl@plt>
   1a9cc:	ldr	r1, [sp, #4]
   1a9d0:	sub	r0, r1, #9
   1a9d4:	clz	r0, r0
   1a9d8:	lsr	r0, r0, #5
   1a9dc:	mov	sp, fp
   1a9e0:	pop	{fp, pc}
   1a9e4:	mov	r0, #1
   1a9e8:	mov	r1, #9
   1a9ec:	b	1202c <prctl@plt>

0001a9f0 <__libc_csu_init@@Base>:
   1a9f0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a9f4:	mov	r7, r0
   1a9f8:	ldr	r6, [pc, #72]	; 1aa48 <__libc_csu_init@@Base+0x58>
   1a9fc:	ldr	r5, [pc, #72]	; 1aa4c <__libc_csu_init@@Base+0x5c>
   1aa00:	add	r6, pc, r6
   1aa04:	add	r5, pc, r5
   1aa08:	sub	r6, r6, r5
   1aa0c:	mov	r8, r1
   1aa10:	mov	r9, r2
   1aa14:	bl	11eb0 <fdopen@plt-0x20>
   1aa18:	asrs	r6, r6, #2
   1aa1c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1aa20:	mov	r4, #0
   1aa24:	add	r4, r4, #1
   1aa28:	ldr	r3, [r5], #4
   1aa2c:	mov	r2, r9
   1aa30:	mov	r1, r8
   1aa34:	mov	r0, r7
   1aa38:	blx	r3
   1aa3c:	cmp	r6, r4
   1aa40:	bne	1aa24 <__libc_csu_init@@Base+0x34>
   1aa44:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1aa48:	strdeq	r1, [r1], -ip
   1aa4c:	ldrdeq	r1, [r1], -ip

0001aa50 <__libc_csu_fini@@Base>:
   1aa50:	bx	lr
   1aa54:	ldr	r3, [pc, #12]	; 1aa68 <__libc_csu_fini@@Base+0x18>
   1aa58:	mov	r1, #0
   1aa5c:	add	r3, pc, r3
   1aa60:	ldr	r2, [r3]
   1aa64:	b	11ffc <__cxa_atexit@plt>
   1aa68:	andeq	r1, r1, r8, ror #12

Disassembly of section .fini:

0001aa6c <.fini>:
   1aa6c:	push	{r3, lr}
   1aa70:	pop	{r3, pc}
