
../repos/coreutils/src/unexpand:     file format elf32-littlearm


Disassembly of section .init:

00010c4c <.init>:
   10c4c:	push	{r3, lr}
   10c50:	bl	11454 <__assert_fail@plt+0x590>
   10c54:	pop	{r3, pc}

Disassembly of section .plt:

00010c58 <calloc@plt-0x14>:
   10c58:	push	{lr}		; (str lr, [sp, #-4]!)
   10c5c:	ldr	lr, [pc, #4]	; 10c68 <calloc@plt-0x4>
   10c60:	add	lr, pc, lr
   10c64:	ldr	pc, [lr, #8]!
   10c68:	muleq	r1, r8, r3

00010c6c <calloc@plt>:
   10c6c:	add	ip, pc, #0, 12
   10c70:	add	ip, ip, #24, 20	; 0x18000
   10c74:	ldr	pc, [ip, #920]!	; 0x398

00010c78 <fputs_unlocked@plt>:
   10c78:	add	ip, pc, #0, 12
   10c7c:	add	ip, ip, #24, 20	; 0x18000
   10c80:	ldr	pc, [ip, #912]!	; 0x390

00010c84 <raise@plt>:
   10c84:	add	ip, pc, #0, 12
   10c88:	add	ip, ip, #24, 20	; 0x18000
   10c8c:	ldr	pc, [ip, #904]!	; 0x388

00010c90 <strcmp@plt>:
   10c90:	add	ip, pc, #0, 12
   10c94:	add	ip, ip, #24, 20	; 0x18000
   10c98:	ldr	pc, [ip, #896]!	; 0x380

00010c9c <posix_fadvise64@plt>:
   10c9c:	add	ip, pc, #0, 12
   10ca0:	add	ip, ip, #24, 20	; 0x18000
   10ca4:	ldr	pc, [ip, #888]!	; 0x378

00010ca8 <fflush@plt>:
   10ca8:	add	ip, pc, #0, 12
   10cac:	add	ip, ip, #24, 20	; 0x18000
   10cb0:	ldr	pc, [ip, #880]!	; 0x370

00010cb4 <free@plt>:
   10cb4:	add	ip, pc, #0, 12
   10cb8:	add	ip, ip, #24, 20	; 0x18000
   10cbc:	ldr	pc, [ip, #872]!	; 0x368

00010cc0 <_exit@plt>:
   10cc0:	add	ip, pc, #0, 12
   10cc4:	add	ip, ip, #24, 20	; 0x18000
   10cc8:	ldr	pc, [ip, #864]!	; 0x360

00010ccc <memcpy@plt>:
   10ccc:	add	ip, pc, #0, 12
   10cd0:	add	ip, ip, #24, 20	; 0x18000
   10cd4:	ldr	pc, [ip, #856]!	; 0x358

00010cd8 <mbsinit@plt>:
   10cd8:	add	ip, pc, #0, 12
   10cdc:	add	ip, ip, #24, 20	; 0x18000
   10ce0:	ldr	pc, [ip, #848]!	; 0x350

00010ce4 <fwrite_unlocked@plt>:
   10ce4:	add	ip, pc, #0, 12
   10ce8:	add	ip, ip, #24, 20	; 0x18000
   10cec:	ldr	pc, [ip, #840]!	; 0x348

00010cf0 <memcmp@plt>:
   10cf0:	add	ip, pc, #0, 12
   10cf4:	add	ip, ip, #24, 20	; 0x18000
   10cf8:	ldr	pc, [ip, #832]!	; 0x340

00010cfc <fputc_unlocked@plt>:
   10cfc:	add	ip, pc, #0, 12
   10d00:	add	ip, ip, #24, 20	; 0x18000
   10d04:	ldr	pc, [ip, #824]!	; 0x338

00010d08 <dcgettext@plt>:
   10d08:	add	ip, pc, #0, 12
   10d0c:	add	ip, ip, #24, 20	; 0x18000
   10d10:	ldr	pc, [ip, #816]!	; 0x330

00010d14 <realloc@plt>:
   10d14:	add	ip, pc, #0, 12
   10d18:	add	ip, ip, #24, 20	; 0x18000
   10d1c:	ldr	pc, [ip, #808]!	; 0x328

00010d20 <textdomain@plt>:
   10d20:	add	ip, pc, #0, 12
   10d24:	add	ip, ip, #24, 20	; 0x18000
   10d28:	ldr	pc, [ip, #800]!	; 0x320

00010d2c <iswprint@plt>:
   10d2c:	add	ip, pc, #0, 12
   10d30:	add	ip, ip, #24, 20	; 0x18000
   10d34:	ldr	pc, [ip, #792]!	; 0x318

00010d38 <fwrite@plt>:
   10d38:	add	ip, pc, #0, 12
   10d3c:	add	ip, ip, #24, 20	; 0x18000
   10d40:	ldr	pc, [ip, #784]!	; 0x310

00010d44 <lseek64@plt>:
   10d44:	add	ip, pc, #0, 12
   10d48:	add	ip, ip, #24, 20	; 0x18000
   10d4c:	ldr	pc, [ip, #776]!	; 0x308

00010d50 <__ctype_get_mb_cur_max@plt>:
   10d50:	add	ip, pc, #0, 12
   10d54:	add	ip, ip, #24, 20	; 0x18000
   10d58:	ldr	pc, [ip, #768]!	; 0x300

00010d5c <__fpending@plt>:
   10d5c:	add	ip, pc, #0, 12
   10d60:	add	ip, ip, #24, 20	; 0x18000
   10d64:	ldr	pc, [ip, #760]!	; 0x2f8

00010d68 <mbrtowc@plt>:
   10d68:	add	ip, pc, #0, 12
   10d6c:	add	ip, ip, #24, 20	; 0x18000
   10d70:	ldr	pc, [ip, #752]!	; 0x2f0

00010d74 <error@plt>:
   10d74:	add	ip, pc, #0, 12
   10d78:	add	ip, ip, #24, 20	; 0x18000
   10d7c:	ldr	pc, [ip, #744]!	; 0x2e8

00010d80 <malloc@plt>:
   10d80:	add	ip, pc, #0, 12
   10d84:	add	ip, ip, #24, 20	; 0x18000
   10d88:	ldr	pc, [ip, #736]!	; 0x2e0

00010d8c <__libc_start_main@plt>:
   10d8c:	add	ip, pc, #0, 12
   10d90:	add	ip, ip, #24, 20	; 0x18000
   10d94:	ldr	pc, [ip, #728]!	; 0x2d8

00010d98 <__freading@plt>:
   10d98:	add	ip, pc, #0, 12
   10d9c:	add	ip, ip, #24, 20	; 0x18000
   10da0:	ldr	pc, [ip, #720]!	; 0x2d0

00010da4 <__gmon_start__@plt>:
   10da4:	add	ip, pc, #0, 12
   10da8:	add	ip, ip, #24, 20	; 0x18000
   10dac:	ldr	pc, [ip, #712]!	; 0x2c8

00010db0 <getopt_long@plt>:
   10db0:	add	ip, pc, #0, 12
   10db4:	add	ip, ip, #24, 20	; 0x18000
   10db8:	ldr	pc, [ip, #704]!	; 0x2c0

00010dbc <__ctype_b_loc@plt>:
   10dbc:	add	ip, pc, #0, 12
   10dc0:	add	ip, ip, #24, 20	; 0x18000
   10dc4:	ldr	pc, [ip, #696]!	; 0x2b8

00010dc8 <exit@plt>:
   10dc8:	add	ip, pc, #0, 12
   10dcc:	add	ip, ip, #24, 20	; 0x18000
   10dd0:	ldr	pc, [ip, #688]!	; 0x2b0

00010dd4 <strlen@plt>:
   10dd4:	add	ip, pc, #0, 12
   10dd8:	add	ip, ip, #24, 20	; 0x18000
   10ddc:	ldr	pc, [ip, #680]!	; 0x2a8

00010de0 <__errno_location@plt>:
   10de0:	add	ip, pc, #0, 12
   10de4:	add	ip, ip, #24, 20	; 0x18000
   10de8:	ldr	pc, [ip, #672]!	; 0x2a0

00010dec <__cxa_atexit@plt>:
   10dec:	add	ip, pc, #0, 12
   10df0:	add	ip, ip, #24, 20	; 0x18000
   10df4:	ldr	pc, [ip, #664]!	; 0x298

00010df8 <memset@plt>:
   10df8:	add	ip, pc, #0, 12
   10dfc:	add	ip, ip, #24, 20	; 0x18000
   10e00:	ldr	pc, [ip, #656]!	; 0x290

00010e04 <__printf_chk@plt>:
   10e04:	add	ip, pc, #0, 12
   10e08:	add	ip, ip, #24, 20	; 0x18000
   10e0c:	ldr	pc, [ip, #648]!	; 0x288

00010e10 <fileno@plt>:
   10e10:	add	ip, pc, #0, 12
   10e14:	add	ip, ip, #24, 20	; 0x18000
   10e18:	ldr	pc, [ip, #640]!	; 0x280

00010e1c <__fprintf_chk@plt>:
   10e1c:	add	ip, pc, #0, 12
   10e20:	add	ip, ip, #24, 20	; 0x18000
   10e24:	ldr	pc, [ip, #632]!	; 0x278

00010e28 <fclose@plt>:
   10e28:	add	ip, pc, #0, 12
   10e2c:	add	ip, ip, #24, 20	; 0x18000
   10e30:	ldr	pc, [ip, #624]!	; 0x270

00010e34 <fseeko64@plt>:
   10e34:	add	ip, pc, #0, 12
   10e38:	add	ip, ip, #24, 20	; 0x18000
   10e3c:	ldr	pc, [ip, #616]!	; 0x268

00010e40 <__uflow@plt>:
   10e40:	add	ip, pc, #0, 12
   10e44:	add	ip, ip, #24, 20	; 0x18000
   10e48:	ldr	pc, [ip, #608]!	; 0x260

00010e4c <__overflow@plt>:
   10e4c:	add	ip, pc, #0, 12
   10e50:	add	ip, ip, #24, 20	; 0x18000
   10e54:	ldr	pc, [ip, #600]!	; 0x258

00010e58 <setlocale@plt>:
   10e58:	add	ip, pc, #0, 12
   10e5c:	add	ip, ip, #24, 20	; 0x18000
   10e60:	ldr	pc, [ip, #592]!	; 0x250

00010e64 <strrchr@plt>:
   10e64:	add	ip, pc, #0, 12
   10e68:	add	ip, ip, #24, 20	; 0x18000
   10e6c:	ldr	pc, [ip, #584]!	; 0x248

00010e70 <nl_langinfo@plt>:
   10e70:	add	ip, pc, #0, 12
   10e74:	add	ip, ip, #24, 20	; 0x18000
   10e78:	ldr	pc, [ip, #576]!	; 0x240

00010e7c <clearerr_unlocked@plt>:
   10e7c:	add	ip, pc, #0, 12
   10e80:	add	ip, ip, #24, 20	; 0x18000
   10e84:	ldr	pc, [ip, #568]!	; 0x238

00010e88 <fopen64@plt>:
   10e88:	add	ip, pc, #0, 12
   10e8c:	add	ip, ip, #24, 20	; 0x18000
   10e90:	ldr	pc, [ip, #560]!	; 0x230

00010e94 <bindtextdomain@plt>:
   10e94:	add	ip, pc, #0, 12
   10e98:	add	ip, ip, #24, 20	; 0x18000
   10e9c:	ldr	pc, [ip, #552]!	; 0x228

00010ea0 <strncmp@plt>:
   10ea0:	add	ip, pc, #0, 12
   10ea4:	add	ip, ip, #24, 20	; 0x18000
   10ea8:	ldr	pc, [ip, #544]!	; 0x220

00010eac <abort@plt>:
   10eac:	add	ip, pc, #0, 12
   10eb0:	add	ip, ip, #24, 20	; 0x18000
   10eb4:	ldr	pc, [ip, #536]!	; 0x218

00010eb8 <strspn@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #24, 20	; 0x18000
   10ec0:	ldr	pc, [ip, #528]!	; 0x210

00010ec4 <__assert_fail@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #24, 20	; 0x18000
   10ecc:	ldr	pc, [ip, #520]!	; 0x208

Disassembly of section .text:

00010ed0 <.text>:
   10ed0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10ed4:	mov	r6, r0
   10ed8:	sub	sp, sp, #36	; 0x24
   10edc:	ldr	r0, [r1]
   10ee0:	mov	r5, r1
   10ee4:	bl	1253c <__assert_fail@plt+0x1678>
   10ee8:	ldr	r1, [pc, #1152]	; 11370 <__assert_fail@plt+0x4ac>
   10eec:	mov	r0, #6
   10ef0:	bl	10e58 <setlocale@plt>
   10ef4:	ldr	r1, [pc, #1144]	; 11374 <__assert_fail@plt+0x4b0>
   10ef8:	ldr	r0, [pc, #1144]	; 11378 <__assert_fail@plt+0x4b4>
   10efc:	bl	10e94 <bindtextdomain@plt>
   10f00:	ldr	r0, [pc, #1136]	; 11378 <__assert_fail@plt+0x4b4>
   10f04:	bl	10d20 <textdomain@plt>
   10f08:	ldr	r8, [pc, #1132]	; 1137c <__assert_fail@plt+0x4b8>
   10f0c:	ldr	r0, [pc, #1132]	; 11380 <__assert_fail@plt+0x4bc>
   10f10:	ldr	r7, [pc, #1132]	; 11384 <__assert_fail@plt+0x4c0>
   10f14:	bl	17f84 <__assert_fail@plt+0x70c0>
   10f18:	mov	r2, #0
   10f1c:	mov	r3, #0
   10f20:	mov	r9, #0
   10f24:	strd	r2, [sp, #16]
   10f28:	str	r9, [sp, #8]
   10f2c:	mov	r4, #0
   10f30:	str	r4, [sp]
   10f34:	mov	r3, r8
   10f38:	mov	r2, r7
   10f3c:	mov	r1, r5
   10f40:	mov	r0, r6
   10f44:	bl	10db0 <getopt_long@plt>
   10f48:	cmn	r0, #1
   10f4c:	beq	110b0 <__assert_fail@plt+0x1ec>
   10f50:	cmp	r0, #63	; 0x3f
   10f54:	beq	1106c <__assert_fail@plt+0x1a8>
   10f58:	bgt	10fa4 <__assert_fail@plt+0xe0>
   10f5c:	cmn	r0, #2
   10f60:	beq	11038 <__assert_fail@plt+0x174>
   10f64:	cmp	r0, #44	; 0x2c
   10f68:	beq	1101c <__assert_fail@plt+0x158>
   10f6c:	cmn	r0, #3
   10f70:	bne	10fbc <__assert_fail@plt+0xf8>
   10f74:	ldr	r1, [pc, #1036]	; 11388 <__assert_fail@plt+0x4c4>
   10f78:	ldr	r3, [pc, #1036]	; 1138c <__assert_fail@plt+0x4c8>
   10f7c:	ldr	r2, [pc, #1036]	; 11390 <__assert_fail@plt+0x4cc>
   10f80:	str	r4, [sp, #4]
   10f84:	ldr	r0, [r1]
   10f88:	ldr	r3, [r3]
   10f8c:	ldr	r1, [pc, #1024]	; 11394 <__assert_fail@plt+0x4d0>
   10f90:	str	r2, [sp]
   10f94:	ldr	r2, [pc, #1020]	; 11398 <__assert_fail@plt+0x4d4>
   10f98:	bl	16ddc <__assert_fail@plt+0x5f18>
   10f9c:	mov	r0, r4
   10fa0:	bl	10dc8 <exit@plt>
   10fa4:	cmp	r0, #116	; 0x74
   10fa8:	beq	11040 <__assert_fail@plt+0x17c>
   10fac:	cmp	r0, #256	; 0x100
   10fb0:	beq	11014 <__assert_fail@plt+0x150>
   10fb4:	cmp	r0, #97	; 0x61
   10fb8:	beq	1105c <__assert_fail@plt+0x198>
   10fbc:	ldr	r3, [sp, #8]
   10fc0:	cmp	r3, #0
   10fc4:	beq	11074 <__assert_fail@plt+0x1b0>
   10fc8:	ldrd	r2, [sp, #16]
   10fcc:	add	fp, pc, #916	; 0x394
   10fd0:	ldrd	sl, [fp]
   10fd4:	cmp	r3, fp
   10fd8:	cmpeq	r2, sl
   10fdc:	bhi	11090 <__assert_fail@plt+0x1cc>
   10fe0:	mov	r1, #10
   10fe4:	mov	fp, r3
   10fe8:	mov	sl, r2
   10fec:	umull	r2, r3, r2, r1
   10ff0:	mla	r3, r1, fp, r3
   10ff4:	sub	r0, r0, #48	; 0x30
   10ff8:	adds	r2, r2, r0
   10ffc:	adc	r3, r3, r0, asr #31
   11000:	cmp	r3, fp
   11004:	cmpeq	r2, sl
   11008:	bcc	11090 <__assert_fail@plt+0x1cc>
   1100c:	strd	r2, [sp, #16]
   11010:	b	10f2c <__assert_fail@plt+0x68>
   11014:	mov	r9, #1
   11018:	b	10f2c <__assert_fail@plt+0x68>
   1101c:	ldr	r3, [sp, #8]
   11020:	cmp	r3, #0
   11024:	beq	10f2c <__assert_fail@plt+0x68>
   11028:	ldrd	r0, [sp, #16]
   1102c:	str	r4, [sp, #8]
   11030:	bl	11860 <__assert_fail@plt+0x99c>
   11034:	b	10f2c <__assert_fail@plt+0x68>
   11038:	mov	r0, r4
   1103c:	bl	11540 <__assert_fail@plt+0x67c>
   11040:	ldr	r3, [pc, #852]	; 1139c <__assert_fail@plt+0x4d8>
   11044:	mov	r2, #1
   11048:	ldr	r0, [r3]
   1104c:	ldr	r3, [pc, #844]	; 113a0 <__assert_fail@plt+0x4dc>
   11050:	strb	r2, [r3]
   11054:	bl	11954 <__assert_fail@plt+0xa90>
   11058:	b	10f2c <__assert_fail@plt+0x68>
   1105c:	ldr	r3, [pc, #828]	; 113a0 <__assert_fail@plt+0x4dc>
   11060:	mov	r2, #1
   11064:	strb	r2, [r3]
   11068:	b	10f2c <__assert_fail@plt+0x68>
   1106c:	mov	r0, #1
   11070:	bl	11540 <__assert_fail@plt+0x67c>
   11074:	sub	r0, r0, #48	; 0x30
   11078:	mov	r2, r0
   1107c:	asr	r3, r0, #31
   11080:	strd	r2, [sp, #16]
   11084:	mov	r3, #1
   11088:	str	r3, [sp, #8]
   1108c:	b	10f2c <__assert_fail@plt+0x68>
   11090:	mov	r2, #5
   11094:	ldr	r1, [pc, #776]	; 113a4 <__assert_fail@plt+0x4e0>
   11098:	mov	r0, #0
   1109c:	bl	10d08 <dcgettext@plt>
   110a0:	mov	r1, #0
   110a4:	mov	r2, r0
   110a8:	mov	r0, #1
   110ac:	bl	10d74 <error@plt>
   110b0:	cmp	r9, r4
   110b4:	ldr	fp, [sp, #8]
   110b8:	ldrne	r3, [pc, #736]	; 113a0 <__assert_fail@plt+0x4dc>
   110bc:	strbne	r4, [r3]
   110c0:	cmp	fp, #0
   110c4:	bne	11260 <__assert_fail@plt+0x39c>
   110c8:	bl	11d58 <__assert_fail@plt+0xe94>
   110cc:	ldr	r3, [pc, #724]	; 113a8 <__assert_fail@plt+0x4e4>
   110d0:	ldr	r0, [r3]
   110d4:	cmp	r6, r0
   110d8:	addgt	r0, r5, r0, lsl #2
   110dc:	movle	r0, #0
   110e0:	bl	11fa8 <__assert_fail@plt+0x10e4>
   110e4:	mov	r0, #0
   110e8:	bl	11fd0 <__assert_fail@plt+0x110c>
   110ec:	subs	fp, r0, #0
   110f0:	beq	1124c <__assert_fail@plt+0x388>
   110f4:	ldr	r3, [pc, #688]	; 113ac <__assert_fail@plt+0x4e8>
   110f8:	ldr	r0, [r3]
   110fc:	bl	16fc4 <__assert_fail@plt+0x6100>
   11100:	str	r0, [sp, #16]
   11104:	mov	r2, #0
   11108:	mov	r3, #0
   1110c:	mov	r7, #0
   11110:	mov	sl, #1
   11114:	ldr	r8, [pc, #620]	; 11388 <__assert_fail@plt+0x4c4>
   11118:	mov	r9, r7
   1111c:	strd	r2, [sp, #8]
   11120:	mov	r6, sl
   11124:	str	r7, [sp, #28]
   11128:	b	111d8 <__assert_fail@plt+0x314>
   1112c:	cmp	r4, #8
   11130:	beq	11290 <__assert_fail@plt+0x3cc>
   11134:	ldrd	r0, [sp, #8]
   11138:	adds	r0, r0, #1
   1113c:	adc	r1, r1, #0
   11140:	orrs	r2, r0, r1
   11144:	strd	r0, [sp, #8]
   11148:	beq	113f0 <__assert_fail@plt+0x52c>
   1114c:	cmp	r7, #0
   11150:	beq	11190 <__assert_fail@plt+0x2cc>
   11154:	cmp	r7, #1
   11158:	movls	r9, #0
   1115c:	andhi	r9, r9, #1
   11160:	cmp	r9, #0
   11164:	movne	r2, #9
   11168:	ldrne	r3, [sp, #16]
   1116c:	mov	r1, #1
   11170:	ldr	r0, [sp, #16]
   11174:	strbne	r2, [r3]
   11178:	ldr	r3, [r8]
   1117c:	mov	r2, r7
   11180:	bl	10ce4 <fwrite_unlocked@plt>
   11184:	cmp	r7, r0
   11188:	bne	112e0 <__assert_fail@plt+0x41c>
   1118c:	mov	r9, #0
   11190:	ldr	r3, [pc, #520]	; 113a0 <__assert_fail@plt+0x4dc>
   11194:	mov	sl, r5
   11198:	mov	r7, #0
   1119c:	ldrb	r3, [r3]
   111a0:	orr	r5, r5, r3
   111a4:	and	r6, r6, r5
   111a8:	cmp	r4, #0
   111ac:	blt	11244 <__assert_fail@plt+0x380>
   111b0:	ldr	r0, [r8]
   111b4:	ldr	r3, [r0, #20]
   111b8:	ldr	r2, [r0, #24]
   111bc:	cmp	r3, r2
   111c0:	addcc	r2, r3, #1
   111c4:	strcc	r2, [r0, #20]
   111c8:	strbcc	r4, [r3]
   111cc:	bcs	112d0 <__assert_fail@plt+0x40c>
   111d0:	cmp	r4, #10
   111d4:	beq	11104 <__assert_fail@plt+0x240>
   111d8:	ldr	r3, [fp, #4]
   111dc:	ldr	r2, [fp, #8]
   111e0:	cmp	r3, r2
   111e4:	bcs	1126c <__assert_fail@plt+0x3a8>
   111e8:	add	r2, r3, #1
   111ec:	str	r2, [fp, #4]
   111f0:	ldrb	r4, [r3]
   111f4:	cmp	r6, #0
   111f8:	beq	111a8 <__assert_fail@plt+0x2e4>
   111fc:	bl	10dbc <__ctype_b_loc@plt>
   11200:	lsl	r3, r4, #1
   11204:	ldr	r2, [r0]
   11208:	ldrh	r5, [r2, r3]
   1120c:	and	r5, r5, #1
   11210:	uxth	r3, r5
   11214:	cmp	r3, #0
   11218:	uxtb	r5, r5
   1121c:	beq	1112c <__assert_fail@plt+0x268>
   11220:	add	r3, sp, #27
   11224:	add	r2, sp, #28
   11228:	ldrd	r0, [sp, #8]
   1122c:	bl	11e94 <__assert_fail@plt+0xfd0>
   11230:	ldrb	ip, [sp, #27]
   11234:	cmp	ip, #0
   11238:	beq	11308 <__assert_fail@plt+0x444>
   1123c:	mov	r6, #0
   11240:	b	1114c <__assert_fail@plt+0x288>
   11244:	ldr	r0, [sp, #16]
   11248:	bl	12444 <__assert_fail@plt+0x1580>
   1124c:	bl	12170 <__assert_fail@plt+0x12ac>
   11250:	ldr	r3, [pc, #344]	; 113b0 <__assert_fail@plt+0x4ec>
   11254:	ldr	r0, [r3]
   11258:	add	sp, sp, #36	; 0x24
   1125c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11260:	ldrd	r0, [sp, #16]
   11264:	bl	11860 <__assert_fail@plt+0x99c>
   11268:	b	110c8 <__assert_fail@plt+0x204>
   1126c:	mov	r0, fp
   11270:	bl	10e40 <__uflow@plt>
   11274:	subs	r4, r0, #0
   11278:	bge	111f4 <__assert_fail@plt+0x330>
   1127c:	mov	r0, fp
   11280:	bl	11fd0 <__assert_fail@plt+0x110c>
   11284:	subs	fp, r0, #0
   11288:	bne	111d8 <__assert_fail@plt+0x314>
   1128c:	b	111f4 <__assert_fail@plt+0x330>
   11290:	ldrd	r0, [sp, #8]
   11294:	ldr	r2, [sp, #28]
   11298:	mov	ip, r0
   1129c:	orrs	r1, ip, r1
   112a0:	movne	r0, #1
   112a4:	moveq	r0, #0
   112a8:	mov	r1, r3
   112ac:	cmp	r2, #0
   112b0:	moveq	ip, r2
   112b4:	subne	ip, r2, #1
   112b8:	ldrd	r2, [sp, #8]
   112bc:	str	ip, [sp, #28]
   112c0:	subs	r2, r2, r0
   112c4:	sbc	r3, r3, r1
   112c8:	strd	r2, [sp, #8]
   112cc:	b	1114c <__assert_fail@plt+0x288>
   112d0:	uxtb	r1, r4
   112d4:	bl	10e4c <__overflow@plt>
   112d8:	cmp	r0, #0
   112dc:	bge	111d0 <__assert_fail@plt+0x30c>
   112e0:	bl	10de0 <__errno_location@plt>
   112e4:	mov	r2, #5
   112e8:	ldr	r1, [pc, #196]	; 113b4 <__assert_fail@plt+0x4f0>
   112ec:	ldr	r4, [r0]
   112f0:	mov	r0, #0
   112f4:	bl	10d08 <dcgettext@plt>
   112f8:	mov	r1, r4
   112fc:	mov	r2, r0
   11300:	mov	r0, #1
   11304:	bl	10d74 <error@plt>
   11308:	ldrd	r2, [sp, #8]
   1130c:	cmp	r3, r1
   11310:	cmpeq	r2, r0
   11314:	bhi	113ec <__assert_fail@plt+0x528>
   11318:	cmp	r4, #9
   1131c:	beq	113dc <__assert_fail@plt+0x518>
   11320:	ldrd	r2, [sp, #8]
   11324:	eor	sl, sl, #1
   11328:	adds	r2, r2, #1
   1132c:	adc	r3, r3, #0
   11330:	cmp	r1, r3
   11334:	cmpeq	r0, r2
   11338:	orrne	sl, sl, #1
   1133c:	cmp	sl, #0
   11340:	strd	r2, [sp, #8]
   11344:	beq	113bc <__assert_fail@plt+0x4f8>
   11348:	cmp	r1, r3
   1134c:	ldr	r3, [sp, #16]
   11350:	cmpeq	r0, r2
   11354:	moveq	r9, sl
   11358:	strb	r4, [r3, r7]
   1135c:	mov	r6, sl
   11360:	add	r7, r7, #1
   11364:	b	111d0 <__assert_fail@plt+0x30c>
   11368:	ldmibls	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   1136c:	ldmibne	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   11370:	andeq	r8, r1, ip, lsr r2
   11374:	muleq	r1, r4, r3
   11378:	andeq	r8, r1, ip, ror #5
   1137c:	andeq	r7, r1, r0, ror #31
   11380:	andeq	r2, r1, r0, lsr #4
   11384:			; <UNDEFINED> instruction: 0x000183bc
   11388:	andeq	r9, r2, r4, asr r1
   1138c:	andeq	r9, r2, ip, ror #1
   11390:	andeq	r8, r1, ip, lsr #7
   11394:	andeq	r8, r1, r0, asr #32
   11398:	andeq	r8, r1, r8, ror #5
   1139c:	andeq	r9, r2, r8, asr r1
   113a0:	muleq	r2, r8, r1
   113a4:	strdeq	r8, [r1], -r0
   113a8:	andeq	r9, r2, r0, asr #2
   113ac:	andeq	r9, r2, ip, ror #2
   113b0:	muleq	r2, r4, r1
   113b4:	andeq	r8, r1, r4, ror #7
   113b8:	andeq	r8, r1, ip, asr #7
   113bc:	ldr	r3, [sp, #16]
   113c0:	ldrd	r0, [sp, #8]
   113c4:	mov	r2, #9
   113c8:	strb	r2, [r3]
   113cc:	strd	r0, [sp, #8]
   113d0:	mov	r7, r9
   113d4:	mov	r4, #9
   113d8:	b	1114c <__assert_fail@plt+0x288>
   113dc:	cmp	r7, #0
   113e0:	ldrne	r3, [sp, #16]
   113e4:	strbne	r4, [r3]
   113e8:	b	113cc <__assert_fail@plt+0x508>
   113ec:	mov	r3, ip
   113f0:	mov	r2, #5
   113f4:	ldr	r1, [pc, #-68]	; 113b8 <__assert_fail@plt+0x4f4>
   113f8:	mov	r0, r3
   113fc:	str	r3, [sp, #8]
   11400:	bl	10d08 <dcgettext@plt>
   11404:	ldr	r3, [sp, #8]
   11408:	mov	r1, r3
   1140c:	mov	r2, r0
   11410:	mov	r0, #1
   11414:	bl	10d74 <error@plt>
   11418:	mov	fp, #0
   1141c:	mov	lr, #0
   11420:	pop	{r1}		; (ldr r1, [sp], #4)
   11424:	mov	r2, sp
   11428:	push	{r2}		; (str r2, [sp, #-4]!)
   1142c:	push	{r0}		; (str r0, [sp, #-4]!)
   11430:	ldr	ip, [pc, #16]	; 11448 <__assert_fail@plt+0x584>
   11434:	push	{ip}		; (str ip, [sp, #-4]!)
   11438:	ldr	r0, [pc, #12]	; 1144c <__assert_fail@plt+0x588>
   1143c:	ldr	r3, [pc, #12]	; 11450 <__assert_fail@plt+0x58c>
   11440:	bl	10d8c <__libc_start_main@plt>
   11444:	bl	10eac <abort@plt>
   11448:	andeq	r7, r1, r0, lsl #31
   1144c:	ldrdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   11450:	andeq	r7, r1, r0, lsr #30
   11454:	ldr	r3, [pc, #20]	; 11470 <__assert_fail@plt+0x5ac>
   11458:	ldr	r2, [pc, #20]	; 11474 <__assert_fail@plt+0x5b0>
   1145c:	add	r3, pc, r3
   11460:	ldr	r2, [r3, r2]
   11464:	cmp	r2, #0
   11468:	bxeq	lr
   1146c:	b	10da4 <__gmon_start__@plt>
   11470:	muleq	r1, ip, fp
   11474:	ldrdeq	r0, [r0], -r8
   11478:	ldr	r3, [pc, #28]	; 1149c <__assert_fail@plt+0x5d8>
   1147c:	ldr	r0, [pc, #28]	; 114a0 <__assert_fail@plt+0x5dc>
   11480:	sub	r3, r3, r0
   11484:	cmp	r3, #6
   11488:	bxls	lr
   1148c:	ldr	r3, [pc, #16]	; 114a4 <__assert_fail@plt+0x5e0>
   11490:	cmp	r3, #0
   11494:	bxeq	lr
   11498:	bx	r3
   1149c:	andeq	r9, r2, r7, lsr r1
   114a0:	andeq	r9, r2, r4, lsr r1
   114a4:	andeq	r0, r0, r0
   114a8:	ldr	r1, [pc, #36]	; 114d4 <__assert_fail@plt+0x610>
   114ac:	ldr	r0, [pc, #36]	; 114d8 <__assert_fail@plt+0x614>
   114b0:	sub	r1, r1, r0
   114b4:	asr	r1, r1, #2
   114b8:	add	r1, r1, r1, lsr #31
   114bc:	asrs	r1, r1, #1
   114c0:	bxeq	lr
   114c4:	ldr	r3, [pc, #16]	; 114dc <__assert_fail@plt+0x618>
   114c8:	cmp	r3, #0
   114cc:	bxeq	lr
   114d0:	bx	r3
   114d4:	andeq	r9, r2, r4, lsr r1
   114d8:	andeq	r9, r2, r4, lsr r1
   114dc:	andeq	r0, r0, r0
   114e0:	push	{r4, lr}
   114e4:	ldr	r4, [pc, #24]	; 11504 <__assert_fail@plt+0x640>
   114e8:	ldrb	r3, [r4]
   114ec:	cmp	r3, #0
   114f0:	popne	{r4, pc}
   114f4:	bl	11478 <__assert_fail@plt+0x5b4>
   114f8:	mov	r3, #1
   114fc:	strb	r3, [r4]
   11500:	pop	{r4, pc}
   11504:	andeq	r9, r2, ip, asr r1
   11508:	ldr	r0, [pc, #40]	; 11538 <__assert_fail@plt+0x674>
   1150c:	ldr	r3, [r0]
   11510:	cmp	r3, #0
   11514:	bne	1151c <__assert_fail@plt+0x658>
   11518:	b	114a8 <__assert_fail@plt+0x5e4>
   1151c:	ldr	r3, [pc, #24]	; 1153c <__assert_fail@plt+0x678>
   11520:	cmp	r3, #0
   11524:	beq	11518 <__assert_fail@plt+0x654>
   11528:	push	{r4, lr}
   1152c:	blx	r3
   11530:	pop	{r4, lr}
   11534:	b	114a8 <__assert_fail@plt+0x5e4>
   11538:	andeq	r8, r2, r4, lsl pc
   1153c:	andeq	r0, r0, r0
   11540:	subs	r6, r0, #0
   11544:	push	{r7, lr}
   11548:	sub	sp, sp, #56	; 0x38
   1154c:	beq	11588 <__assert_fail@plt+0x6c4>
   11550:	ldr	r3, [pc, #688]	; 11808 <__assert_fail@plt+0x944>
   11554:	mov	r2, #5
   11558:	ldr	r1, [pc, #684]	; 1180c <__assert_fail@plt+0x948>
   1155c:	mov	r0, #0
   11560:	ldr	r4, [r3]
   11564:	bl	10d08 <dcgettext@plt>
   11568:	ldr	r3, [pc, #672]	; 11810 <__assert_fail@plt+0x94c>
   1156c:	mov	r1, #1
   11570:	ldr	r3, [r3]
   11574:	mov	r2, r0
   11578:	mov	r0, r4
   1157c:	bl	10e1c <__fprintf_chk@plt>
   11580:	mov	r0, r6
   11584:	bl	10dc8 <exit@plt>
   11588:	mov	r2, #5
   1158c:	ldr	r1, [pc, #640]	; 11814 <__assert_fail@plt+0x950>
   11590:	bl	10d08 <dcgettext@plt>
   11594:	ldr	r3, [pc, #628]	; 11810 <__assert_fail@plt+0x94c>
   11598:	ldr	r7, [pc, #632]	; 11818 <__assert_fail@plt+0x954>
   1159c:	ldr	r4, [pc, #632]	; 1181c <__assert_fail@plt+0x958>
   115a0:	ldr	r2, [r3]
   115a4:	mov	r1, r0
   115a8:	mov	r0, #1
   115ac:	bl	10e04 <__printf_chk@plt>
   115b0:	mov	r2, #5
   115b4:	ldr	r1, [pc, #612]	; 11820 <__assert_fail@plt+0x95c>
   115b8:	mov	r0, r6
   115bc:	bl	10d08 <dcgettext@plt>
   115c0:	ldr	r1, [r7]
   115c4:	bl	10c78 <fputs_unlocked@plt>
   115c8:	mov	r2, #5
   115cc:	ldr	r1, [pc, #592]	; 11824 <__assert_fail@plt+0x960>
   115d0:	mov	r0, r6
   115d4:	bl	10d08 <dcgettext@plt>
   115d8:	ldr	r1, [r7]
   115dc:	bl	10c78 <fputs_unlocked@plt>
   115e0:	mov	r2, #5
   115e4:	ldr	r1, [pc, #572]	; 11828 <__assert_fail@plt+0x964>
   115e8:	mov	r0, r6
   115ec:	bl	10d08 <dcgettext@plt>
   115f0:	ldr	r1, [r7]
   115f4:	bl	10c78 <fputs_unlocked@plt>
   115f8:	mov	r2, #5
   115fc:	ldr	r1, [pc, #552]	; 1182c <__assert_fail@plt+0x968>
   11600:	mov	r0, r6
   11604:	bl	10d08 <dcgettext@plt>
   11608:	ldr	r1, [r7]
   1160c:	bl	10c78 <fputs_unlocked@plt>
   11610:	bl	121b8 <__assert_fail@plt+0x12f4>
   11614:	mov	r2, #5
   11618:	ldr	r1, [pc, #528]	; 11830 <__assert_fail@plt+0x96c>
   1161c:	mov	r0, r6
   11620:	bl	10d08 <dcgettext@plt>
   11624:	ldr	r1, [r7]
   11628:	bl	10c78 <fputs_unlocked@plt>
   1162c:	mov	r2, #5
   11630:	ldr	r1, [pc, #508]	; 11834 <__assert_fail@plt+0x970>
   11634:	mov	r0, r6
   11638:	bl	10d08 <dcgettext@plt>
   1163c:	ldr	r1, [r7]
   11640:	bl	10c78 <fputs_unlocked@plt>
   11644:	ldm	r4!, {r0, r1, r2, r3}
   11648:	mov	lr, sp
   1164c:	stmia	lr!, {r0, r1, r2, r3}
   11650:	ldm	r4!, {r0, r1, r2, r3}
   11654:	ldr	ip, [sp]
   11658:	stmia	lr!, {r0, r1, r2, r3}
   1165c:	cmp	ip, #0
   11660:	ldm	r4!, {r0, r1, r2, r3}
   11664:	stmia	lr!, {r0, r1, r2, r3}
   11668:	ldm	r4, {r0, r1}
   1166c:	moveq	r4, sp
   11670:	stm	lr, {r0, r1}
   11674:	beq	116a4 <__assert_fail@plt+0x7e0>
   11678:	ldr	r5, [pc, #440]	; 11838 <__assert_fail@plt+0x974>
   1167c:	mov	r4, sp
   11680:	b	11690 <__assert_fail@plt+0x7cc>
   11684:	ldr	ip, [r4, #8]!
   11688:	cmp	ip, #0
   1168c:	beq	116a4 <__assert_fail@plt+0x7e0>
   11690:	mov	r1, ip
   11694:	mov	r0, r5
   11698:	bl	10c90 <strcmp@plt>
   1169c:	cmp	r0, #0
   116a0:	bne	11684 <__assert_fail@plt+0x7c0>
   116a4:	ldr	r4, [r4, #4]
   116a8:	mov	r2, #5
   116ac:	cmp	r4, #0
   116b0:	ldr	r1, [pc, #388]	; 1183c <__assert_fail@plt+0x978>
   116b4:	beq	1175c <__assert_fail@plt+0x898>
   116b8:	mov	r0, #0
   116bc:	bl	10d08 <dcgettext@plt>
   116c0:	ldr	r3, [pc, #376]	; 11840 <__assert_fail@plt+0x97c>
   116c4:	ldr	r2, [pc, #376]	; 11844 <__assert_fail@plt+0x980>
   116c8:	mov	r1, r0
   116cc:	mov	r0, #1
   116d0:	bl	10e04 <__printf_chk@plt>
   116d4:	mov	r1, #0
   116d8:	mov	r0, #5
   116dc:	bl	10e58 <setlocale@plt>
   116e0:	cmp	r0, #0
   116e4:	ldreq	r5, [pc, #332]	; 11838 <__assert_fail@plt+0x974>
   116e8:	beq	11704 <__assert_fail@plt+0x840>
   116ec:	mov	r2, #3
   116f0:	ldr	r1, [pc, #336]	; 11848 <__assert_fail@plt+0x984>
   116f4:	bl	10ea0 <strncmp@plt>
   116f8:	ldr	r5, [pc, #312]	; 11838 <__assert_fail@plt+0x974>
   116fc:	cmp	r0, #0
   11700:	bne	117ec <__assert_fail@plt+0x928>
   11704:	mov	r2, #5
   11708:	ldr	r1, [pc, #316]	; 1184c <__assert_fail@plt+0x988>
   1170c:	mov	r0, #0
   11710:	bl	10d08 <dcgettext@plt>
   11714:	ldr	r3, [pc, #284]	; 11838 <__assert_fail@plt+0x974>
   11718:	ldr	r2, [pc, #288]	; 11840 <__assert_fail@plt+0x97c>
   1171c:	mov	r1, r0
   11720:	mov	r0, #1
   11724:	bl	10e04 <__printf_chk@plt>
   11728:	mov	r2, #5
   1172c:	ldr	r1, [pc, #284]	; 11850 <__assert_fail@plt+0x98c>
   11730:	mov	r0, #0
   11734:	bl	10d08 <dcgettext@plt>
   11738:	ldr	r2, [pc, #276]	; 11854 <__assert_fail@plt+0x990>
   1173c:	cmp	r4, r5
   11740:	ldr	r3, [pc, #272]	; 11858 <__assert_fail@plt+0x994>
   11744:	movne	r3, r2
   11748:	mov	r1, r0
   1174c:	mov	r2, r4
   11750:	mov	r0, #1
   11754:	bl	10e04 <__printf_chk@plt>
   11758:	b	11580 <__assert_fail@plt+0x6bc>
   1175c:	mov	r0, r4
   11760:	bl	10d08 <dcgettext@plt>
   11764:	ldr	r3, [pc, #212]	; 11840 <__assert_fail@plt+0x97c>
   11768:	ldr	r2, [pc, #212]	; 11844 <__assert_fail@plt+0x980>
   1176c:	mov	r1, r0
   11770:	mov	r0, #1
   11774:	bl	10e04 <__printf_chk@plt>
   11778:	mov	r1, r4
   1177c:	mov	r0, #5
   11780:	bl	10e58 <setlocale@plt>
   11784:	cmp	r0, #0
   11788:	beq	117a0 <__assert_fail@plt+0x8dc>
   1178c:	mov	r2, #3
   11790:	ldr	r1, [pc, #176]	; 11848 <__assert_fail@plt+0x984>
   11794:	bl	10ea0 <strncmp@plt>
   11798:	cmp	r0, #0
   1179c:	bne	117e4 <__assert_fail@plt+0x920>
   117a0:	mov	r2, #5
   117a4:	ldr	r1, [pc, #160]	; 1184c <__assert_fail@plt+0x988>
   117a8:	mov	r0, #0
   117ac:	bl	10d08 <dcgettext@plt>
   117b0:	ldr	r3, [pc, #128]	; 11838 <__assert_fail@plt+0x974>
   117b4:	ldr	r2, [pc, #132]	; 11840 <__assert_fail@plt+0x97c>
   117b8:	mov	r4, r3
   117bc:	mov	r1, r0
   117c0:	mov	r0, #1
   117c4:	bl	10e04 <__printf_chk@plt>
   117c8:	ldr	r1, [pc, #128]	; 11850 <__assert_fail@plt+0x98c>
   117cc:	mov	r2, #5
   117d0:	mov	r0, #0
   117d4:	bl	10d08 <dcgettext@plt>
   117d8:	ldr	r3, [pc, #120]	; 11858 <__assert_fail@plt+0x994>
   117dc:	mov	r1, r0
   117e0:	b	1174c <__assert_fail@plt+0x888>
   117e4:	ldr	r5, [pc, #76]	; 11838 <__assert_fail@plt+0x974>
   117e8:	mov	r4, r5
   117ec:	mov	r2, #5
   117f0:	ldr	r1, [pc, #100]	; 1185c <__assert_fail@plt+0x998>
   117f4:	mov	r0, #0
   117f8:	bl	10d08 <dcgettext@plt>
   117fc:	ldr	r1, [r7]
   11800:	bl	10c78 <fputs_unlocked@plt>
   11804:	b	11704 <__assert_fail@plt+0x840>
   11808:	andeq	r9, r2, r8, asr #2
   1180c:	andeq	r8, r1, ip, asr #32
   11810:	andeq	r9, r2, r4, lsr #3
   11814:	andeq	r8, r1, r4, ror r0
   11818:	andeq	r9, r2, r4, asr r1
   1181c:	andeq	r7, r1, r8, lsr #31
   11820:	muleq	r1, r8, r0
   11824:	ldrdeq	r8, [r1], -ip
   11828:	andeq	r8, r1, r4, lsl r1
   1182c:	andeq	r8, r1, r0, ror #2
   11830:	andeq	r8, r1, r0, asr #4
   11834:	andeq	r8, r1, r0, ror r2
   11838:	andeq	r8, r1, r0, asr #32
   1183c:	andeq	r8, r1, r8, lsr #5
   11840:	andeq	r8, r1, r0, asr #5
   11844:	andeq	r8, r1, r8, ror #5
   11848:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1184c:	andeq	r8, r1, r4, asr #6
   11850:	andeq	r8, r1, r0, ror #6
   11854:	andeq	r8, r1, ip, lsr r2
   11858:	andeq	r8, r1, r4, lsl r4
   1185c:	strdeq	r8, [r1], -ip
   11860:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   11864:	mov	r6, r0
   11868:	ldr	r8, [pc, #216]	; 11948 <__assert_fail@plt+0xa84>
   1186c:	mov	r7, r1
   11870:	ldr	r3, [r8]
   11874:	cmp	r3, #0
   11878:	beq	118e8 <__assert_fail@plt+0xa24>
   1187c:	ldr	r2, [r8, #4]
   11880:	add	r1, r2, r3, lsl #3
   11884:	ldrd	r4, [r1, #-8]
   11888:	cmp	r5, r7
   1188c:	cmpeq	r4, r0
   11890:	movhi	r4, #0
   11894:	movhi	r5, #0
   11898:	bls	118f4 <__assert_fail@plt+0xa30>
   1189c:	ldr	r1, [r8, #8]
   118a0:	cmp	r3, r1
   118a4:	beq	11908 <__assert_fail@plt+0xa44>
   118a8:	ldr	sl, [r8, #12]
   118ac:	mov	fp, #0
   118b0:	cmp	r5, fp
   118b4:	lsl	r1, r3, #3
   118b8:	cmpeq	r4, sl
   118bc:	add	r3, r3, #1
   118c0:	strd	r6, [r2, r1]
   118c4:	str	r3, [r8]
   118c8:	popls	{r4, r5, r6, r7, r8, sl, fp, pc}
   118cc:	mov	r3, #0
   118d0:	mvn	r2, #0
   118d4:	cmp	r5, r3
   118d8:	cmpeq	r4, r2
   118dc:	bhi	11928 <__assert_fail@plt+0xa64>
   118e0:	str	r4, [r8, #12]
   118e4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   118e8:	ldr	r2, [r8, #4]
   118ec:	mov	r4, #0
   118f0:	mov	r5, #0
   118f4:	ldr	r1, [r8, #8]
   118f8:	subs	r4, r6, r4
   118fc:	sbc	r5, r7, r5
   11900:	cmp	r3, r1
   11904:	bne	118a8 <__assert_fail@plt+0x9e4>
   11908:	mov	r0, r2
   1190c:	ldr	r1, [pc, #56]	; 1194c <__assert_fail@plt+0xa88>
   11910:	mov	r2, #8
   11914:	bl	17174 <__assert_fail@plt+0x62b0>
   11918:	ldr	r3, [r8]
   1191c:	mov	r2, r0
   11920:	str	r0, [r8, #4]
   11924:	b	118a8 <__assert_fail@plt+0x9e4>
   11928:	mov	r2, #5
   1192c:	ldr	r1, [pc, #28]	; 11950 <__assert_fail@plt+0xa8c>
   11930:	mov	r0, #0
   11934:	bl	10d08 <dcgettext@plt>
   11938:	mov	r1, #0
   1193c:	mov	r2, r0
   11940:	mov	r0, #1
   11944:	bl	10d74 <error@plt>
   11948:	andeq	r9, r2, r0, ror #2
   1194c:	andeq	r9, r2, r8, ror #2
   11950:	andeq	r8, r1, ip, lsr #9
   11954:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11958:	sub	sp, sp, #20
   1195c:	ldrb	fp, [r0]
   11960:	cmp	fp, #0
   11964:	beq	11aec <__assert_fail@plt+0xc28>
   11968:	mov	r8, #0
   1196c:	mov	r3, #0
   11970:	mov	r2, #0
   11974:	mov	r4, r0
   11978:	mov	r9, r8
   1197c:	mov	r7, r8
   11980:	mov	r6, r8
   11984:	strd	r2, [sp]
   11988:	mov	r3, #1
   1198c:	str	r3, [sp, #12]
   11990:	cmp	fp, #44	; 0x2c
   11994:	beq	11af4 <__assert_fail@plt+0xc30>
   11998:	bl	10dbc <__ctype_b_loc@plt>
   1199c:	lsl	r2, fp, #1
   119a0:	ldr	r1, [r0]
   119a4:	ldrh	r5, [r1, r2]
   119a8:	ands	r5, r5, #1
   119ac:	bne	11af4 <__assert_fail@plt+0xc30>
   119b0:	cmp	fp, #47	; 0x2f
   119b4:	beq	11b54 <__assert_fail@plt+0xc90>
   119b8:	cmp	fp, #43	; 0x2b
   119bc:	beq	11be0 <__assert_fail@plt+0xd1c>
   119c0:	sub	r3, fp, #48	; 0x30
   119c4:	cmp	r3, #9
   119c8:	bhi	11c94 <__assert_fail@plt+0xdd0>
   119cc:	cmp	r6, #0
   119d0:	beq	11bc8 <__assert_fail@plt+0xd04>
   119d4:	ldrd	r0, [sp]
   119d8:	add	fp, pc, #848	; 0x350
   119dc:	ldrd	sl, [fp]
   119e0:	cmp	r1, fp
   119e4:	cmpeq	r0, sl
   119e8:	bhi	11a14 <__assert_fail@plt+0xb50>
   119ec:	mov	r2, #10
   119f0:	mov	fp, r1
   119f4:	mov	sl, r0
   119f8:	umull	r0, r1, r0, r2
   119fc:	mla	r1, r2, fp, r1
   11a00:	adds	r0, r0, r3
   11a04:	adc	r1, r1, r3, asr #31
   11a08:	cmp	r1, fp
   11a0c:	cmpeq	r0, sl
   11a10:	bcs	11d24 <__assert_fail@plt+0xe60>
   11a14:	ldr	r1, [pc, #796]	; 11d38 <__assert_fail@plt+0xe74>
   11a18:	mov	r0, r8
   11a1c:	bl	10eb8 <strspn@plt>
   11a20:	mov	r1, r0
   11a24:	mov	r4, r0
   11a28:	mov	r0, r8
   11a2c:	bl	17598 <__assert_fail@plt+0x66d4>
   11a30:	mov	r2, #5
   11a34:	ldr	r1, [pc, #768]	; 11d3c <__assert_fail@plt+0xe78>
   11a38:	sub	r4, r4, #1
   11a3c:	add	r4, r8, r4
   11a40:	add	r4, r4, #1
   11a44:	mov	r5, r0
   11a48:	mov	r0, #0
   11a4c:	bl	10d08 <dcgettext@plt>
   11a50:	mov	fp, r0
   11a54:	mov	r0, r5
   11a58:	bl	16408 <__assert_fail@plt+0x5544>
   11a5c:	mov	r1, #0
   11a60:	mov	r2, fp
   11a64:	mov	r3, r0
   11a68:	mov	r0, r1
   11a6c:	bl	10d74 <error@plt>
   11a70:	mov	r0, r5
   11a74:	bl	12444 <__assert_fail@plt+0x1580>
   11a78:	ldrb	fp, [r4]
   11a7c:	mov	r3, #0
   11a80:	str	r3, [sp, #12]
   11a84:	cmp	fp, #0
   11a88:	bne	11990 <__assert_fail@plt+0xacc>
   11a8c:	ldr	r3, [sp, #12]
   11a90:	tst	r6, r3
   11a94:	beq	11d1c <__assert_fail@plt+0xe58>
   11a98:	cmp	r7, #0
   11a9c:	bne	11cd8 <__assert_fail@plt+0xe14>
   11aa0:	cmp	r9, #0
   11aa4:	beq	11cc8 <__assert_fail@plt+0xe04>
   11aa8:	ldr	r4, [pc, #656]	; 11d40 <__assert_fail@plt+0xe7c>
   11aac:	ldrd	r2, [r4, #24]
   11ab0:	orrs	r3, r2, r3
   11ab4:	beq	11adc <__assert_fail@plt+0xc18>
   11ab8:	mov	r2, #5
   11abc:	ldr	r1, [pc, #640]	; 11d44 <__assert_fail@plt+0xe80>
   11ac0:	mov	r0, r7
   11ac4:	bl	10d08 <dcgettext@plt>
   11ac8:	mov	r1, r7
   11acc:	mov	r9, r7
   11ad0:	mov	r2, r0
   11ad4:	mov	r0, r7
   11ad8:	bl	10d74 <error@plt>
   11adc:	ldrd	r2, [sp]
   11ae0:	strd	r2, [r4, #24]
   11ae4:	cmp	r9, #0
   11ae8:	beq	11c5c <__assert_fail@plt+0xd98>
   11aec:	add	sp, sp, #20
   11af0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11af4:	cmp	r6, #0
   11af8:	beq	11b2c <__assert_fail@plt+0xc68>
   11afc:	cmp	r7, #0
   11b00:	bne	11ba4 <__assert_fail@plt+0xce0>
   11b04:	cmp	r9, #0
   11b08:	beq	11b40 <__assert_fail@plt+0xc7c>
   11b0c:	ldr	r3, [pc, #556]	; 11d40 <__assert_fail@plt+0xe7c>
   11b10:	ldrd	r2, [r3, #24]
   11b14:	orrs	r3, r2, r3
   11b18:	bne	11c30 <__assert_fail@plt+0xd6c>
   11b1c:	ldrd	r2, [sp]
   11b20:	ldr	r1, [pc, #536]	; 11d40 <__assert_fail@plt+0xe7c>
   11b24:	mov	r6, r7
   11b28:	strd	r2, [r1, #24]
   11b2c:	ldrb	fp, [r4, #1]
   11b30:	add	r4, r4, #1
   11b34:	cmp	fp, #0
   11b38:	bne	11990 <__assert_fail@plt+0xacc>
   11b3c:	b	11a8c <__assert_fail@plt+0xbc8>
   11b40:	ldrd	r0, [sp]
   11b44:	bl	11860 <__assert_fail@plt+0x99c>
   11b48:	mov	r7, r9
   11b4c:	mov	r6, r9
   11b50:	b	11b2c <__assert_fail@plt+0xc68>
   11b54:	cmp	r6, #0
   11b58:	moveq	r9, r6
   11b5c:	moveq	r7, #1
   11b60:	beq	11b2c <__assert_fail@plt+0xc68>
   11b64:	mov	r2, #5
   11b68:	ldr	r1, [pc, #472]	; 11d48 <__assert_fail@plt+0xe84>
   11b6c:	mov	r0, r5
   11b70:	bl	10d08 <dcgettext@plt>
   11b74:	mov	r9, r5
   11b78:	mov	r7, r0
   11b7c:	mov	r0, r4
   11b80:	bl	16408 <__assert_fail@plt+0x5544>
   11b84:	mov	r2, r7
   11b88:	mov	r1, r5
   11b8c:	str	r5, [sp, #12]
   11b90:	mov	r7, r6
   11b94:	mov	r3, r0
   11b98:	mov	r0, r5
   11b9c:	bl	10d74 <error@plt>
   11ba0:	b	11b2c <__assert_fail@plt+0xc68>
   11ba4:	ldr	r3, [pc, #404]	; 11d40 <__assert_fail@plt+0xe7c>
   11ba8:	ldrd	r2, [r3, #16]
   11bac:	orrs	r3, r2, r3
   11bb0:	bne	11c64 <__assert_fail@plt+0xda0>
   11bb4:	ldrd	r2, [sp]
   11bb8:	ldr	r1, [pc, #384]	; 11d40 <__assert_fail@plt+0xe7c>
   11bbc:	mov	r6, #0
   11bc0:	strd	r2, [r1, #16]
   11bc4:	b	11b2c <__assert_fail@plt+0xc68>
   11bc8:	mov	r0, r3
   11bcc:	asr	r1, r3, #31
   11bd0:	mov	r8, r4
   11bd4:	strd	r0, [sp]
   11bd8:	mov	r6, #1
   11bdc:	b	11b2c <__assert_fail@plt+0xc68>
   11be0:	cmp	r6, #0
   11be4:	moveq	r7, r6
   11be8:	moveq	r9, #1
   11bec:	beq	11b2c <__assert_fail@plt+0xc68>
   11bf0:	mov	r2, #5
   11bf4:	ldr	r1, [pc, #336]	; 11d4c <__assert_fail@plt+0xe88>
   11bf8:	mov	r0, r5
   11bfc:	bl	10d08 <dcgettext@plt>
   11c00:	mov	r9, r6
   11c04:	mov	r7, r0
   11c08:	mov	r0, r4
   11c0c:	bl	16408 <__assert_fail@plt+0x5544>
   11c10:	mov	r2, r7
   11c14:	mov	r1, r5
   11c18:	str	r5, [sp, #12]
   11c1c:	mov	r7, r5
   11c20:	mov	r3, r0
   11c24:	mov	r0, r5
   11c28:	bl	10d74 <error@plt>
   11c2c:	b	11b2c <__assert_fail@plt+0xc68>
   11c30:	mov	r2, #5
   11c34:	ldr	r1, [pc, #264]	; 11d44 <__assert_fail@plt+0xe80>
   11c38:	mov	r0, r7
   11c3c:	bl	10d08 <dcgettext@plt>
   11c40:	mov	r1, r7
   11c44:	mov	r2, r0
   11c48:	mov	r0, r7
   11c4c:	bl	10d74 <error@plt>
   11c50:	ldrd	r2, [sp]
   11c54:	ldr	r1, [pc, #228]	; 11d40 <__assert_fail@plt+0xe7c>
   11c58:	strd	r2, [r1, #24]
   11c5c:	mov	r0, #1
   11c60:	bl	10dc8 <exit@plt>
   11c64:	mov	r2, #5
   11c68:	ldr	r1, [pc, #224]	; 11d50 <__assert_fail@plt+0xe8c>
   11c6c:	mov	r0, #0
   11c70:	bl	10d08 <dcgettext@plt>
   11c74:	mov	r1, #0
   11c78:	mov	r2, r0
   11c7c:	mov	r0, r1
   11c80:	bl	10d74 <error@plt>
   11c84:	ldrd	r2, [sp]
   11c88:	ldr	r1, [pc, #176]	; 11d40 <__assert_fail@plt+0xe7c>
   11c8c:	strd	r2, [r1, #16]
   11c90:	b	11c5c <__assert_fail@plt+0xd98>
   11c94:	mov	r2, #5
   11c98:	ldr	r1, [pc, #180]	; 11d54 <__assert_fail@plt+0xe90>
   11c9c:	mov	r0, r5
   11ca0:	bl	10d08 <dcgettext@plt>
   11ca4:	mov	r6, r0
   11ca8:	mov	r0, r4
   11cac:	bl	16408 <__assert_fail@plt+0x5544>
   11cb0:	mov	r2, r6
   11cb4:	mov	r1, r5
   11cb8:	mov	r3, r0
   11cbc:	mov	r0, r5
   11cc0:	bl	10d74 <error@plt>
   11cc4:	b	11c5c <__assert_fail@plt+0xd98>
   11cc8:	ldrd	r0, [sp]
   11ccc:	add	sp, sp, #20
   11cd0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11cd4:	b	11860 <__assert_fail@plt+0x99c>
   11cd8:	ldr	r4, [pc, #96]	; 11d40 <__assert_fail@plt+0xe7c>
   11cdc:	ldrd	r0, [r4, #16]
   11ce0:	orrs	r3, r0, r1
   11ce4:	beq	11d0c <__assert_fail@plt+0xe48>
   11ce8:	mov	r2, #5
   11cec:	ldr	r1, [pc, #92]	; 11d50 <__assert_fail@plt+0xe8c>
   11cf0:	mov	r0, fp
   11cf4:	bl	10d08 <dcgettext@plt>
   11cf8:	mov	r1, fp
   11cfc:	mov	r7, fp
   11d00:	mov	r2, r0
   11d04:	mov	r0, fp
   11d08:	bl	10d74 <error@plt>
   11d0c:	ldrd	r2, [sp]
   11d10:	mov	r9, r7
   11d14:	strd	r2, [r4, #16]
   11d18:	b	11ae4 <__assert_fail@plt+0xc20>
   11d1c:	mov	r9, r3
   11d20:	b	11ae4 <__assert_fail@plt+0xc20>
   11d24:	strd	r0, [sp]
   11d28:	b	11b2c <__assert_fail@plt+0xc68>
   11d2c:	nop			; (mov r0, r0)
   11d30:	ldmibls	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   11d34:	ldmibne	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   11d38:	andeq	r8, r1, r8, lsr #11
   11d3c:			; <UNDEFINED> instruction: 0x000185b4
   11d40:	andeq	r9, r2, r0, ror #2
   11d44:	strdeq	r8, [r1], -r4
   11d48:	andeq	r8, r1, r4, lsr #10
   11d4c:	andeq	r8, r1, r0, asr r5
   11d50:	andeq	r8, r1, r4, asr #9
   11d54:	andeq	r8, r1, ip, ror r5
   11d58:	ldr	ip, [pc, #292]	; 11e84 <__assert_fail@plt+0xfc0>
   11d5c:	push	{r4, r5, r6, r7, r8, lr}
   11d60:	ldr	lr, [ip]
   11d64:	ldr	r0, [ip, #4]
   11d68:	cmp	lr, #0
   11d6c:	beq	11e04 <__assert_fail@plt+0xf40>
   11d70:	ldrd	r6, [r0]
   11d74:	orrs	r3, r6, r7
   11d78:	mov	r4, r6
   11d7c:	mov	r5, r7
   11d80:	movne	r1, #0
   11d84:	bne	11dac <__assert_fail@plt+0xee8>
   11d88:	b	11e4c <__assert_fail@plt+0xf88>
   11d8c:	ldrd	r2, [r0, #8]!
   11d90:	orrs	r8, r2, r3
   11d94:	beq	11e4c <__assert_fail@plt+0xf88>
   11d98:	cmp	r3, r5
   11d9c:	cmpeq	r2, r4
   11da0:	bls	11e6c <__assert_fail@plt+0xfa8>
   11da4:	mov	r4, r2
   11da8:	mov	r5, r3
   11dac:	add	r1, r1, #1
   11db0:	cmp	lr, r1
   11db4:	bne	11d8c <__assert_fail@plt+0xec8>
   11db8:	ldrd	r0, [ip, #24]
   11dbc:	orrs	r3, r0, r1
   11dc0:	beq	11dd0 <__assert_fail@plt+0xf0c>
   11dc4:	ldrd	r2, [ip, #16]
   11dc8:	orrs	r3, r2, r3
   11dcc:	bne	11e78 <__assert_fail@plt+0xfb4>
   11dd0:	cmp	lr, #1
   11dd4:	beq	11de8 <__assert_fail@plt+0xf24>
   11dd8:	mov	r2, #0
   11ddc:	mov	r3, #0
   11de0:	strd	r2, [ip, #32]
   11de4:	pop	{r4, r5, r6, r7, r8, pc}
   11de8:	ldrd	r2, [ip, #16]
   11dec:	orr	r2, r2, r0
   11df0:	orr	r3, r3, r1
   11df4:	orrs	r3, r2, r3
   11df8:	bne	11dd8 <__assert_fail@plt+0xf14>
   11dfc:	strd	r6, [ip, #32]
   11e00:	pop	{r4, r5, r6, r7, r8, pc}
   11e04:	ldrd	r2, [ip, #24]
   11e08:	orrs	r1, r2, r3
   11e0c:	beq	11e30 <__assert_fail@plt+0xf6c>
   11e10:	ldrd	r0, [ip, #16]
   11e14:	orrs	r1, r0, r1
   11e18:	bne	11e78 <__assert_fail@plt+0xfb4>
   11e1c:	mov	r1, r2
   11e20:	mov	r3, #0
   11e24:	str	r1, [ip, #12]
   11e28:	strd	r2, [ip, #32]
   11e2c:	pop	{r4, r5, r6, r7, r8, pc}
   11e30:	ldrd	r2, [ip, #16]
   11e34:	orrs	r1, r2, r3
   11e38:	bne	11e1c <__assert_fail@plt+0xf58>
   11e3c:	mov	r2, #8
   11e40:	mov	r3, #0
   11e44:	mov	r1, #8
   11e48:	b	11e24 <__assert_fail@plt+0xf60>
   11e4c:	ldr	r1, [pc, #52]	; 11e88 <__assert_fail@plt+0xfc4>
   11e50:	mov	r2, #5
   11e54:	mov	r0, #0
   11e58:	bl	10d08 <dcgettext@plt>
   11e5c:	mov	r1, #0
   11e60:	mov	r2, r0
   11e64:	mov	r0, #1
   11e68:	bl	10d74 <error@plt>
   11e6c:	mov	r2, #5
   11e70:	ldr	r1, [pc, #20]	; 11e8c <__assert_fail@plt+0xfc8>
   11e74:	b	11e54 <__assert_fail@plt+0xf90>
   11e78:	mov	r2, #5
   11e7c:	ldr	r1, [pc, #12]	; 11e90 <__assert_fail@plt+0xfcc>
   11e80:	b	11e54 <__assert_fail@plt+0xf90>
   11e84:	andeq	r9, r2, r0, ror #2
   11e88:	ldrdeq	r8, [r1], -r0
   11e8c:	andeq	r8, r1, r8, ror #11
   11e90:	andeq	r8, r1, r4, lsl #12
   11e94:	push	{r4, r5, r6, r7, r8, lr}
   11e98:	mov	ip, #0
   11e9c:	ldr	lr, [pc, #256]	; 11fa4 <__assert_fail@plt+0x10e0>
   11ea0:	strb	ip, [r3]
   11ea4:	mov	r6, r0
   11ea8:	ldrd	r4, [lr, #32]
   11eac:	mov	r7, r1
   11eb0:	orrs	ip, r4, r5
   11eb4:	bne	11f68 <__assert_fail@plt+0x10a4>
   11eb8:	ldr	r1, [r2]
   11ebc:	ldr	ip, [lr]
   11ec0:	cmp	ip, r1
   11ec4:	bls	11f0c <__assert_fail@plt+0x1048>
   11ec8:	ldr	r5, [lr, #4]
   11ecc:	lsl	r4, r1, #3
   11ed0:	add	r0, r5, r4
   11ed4:	add	r4, r5, r4
   11ed8:	ldrd	r4, [r4]
   11edc:	cmp	r7, r5
   11ee0:	cmpeq	r6, r4
   11ee4:	bcs	11efc <__assert_fail@plt+0x1038>
   11ee8:	b	11f5c <__assert_fail@plt+0x1098>
   11eec:	ldrd	r4, [r0, #8]!
   11ef0:	cmp	r7, r5
   11ef4:	cmpeq	r6, r4
   11ef8:	bcc	11f88 <__assert_fail@plt+0x10c4>
   11efc:	add	r1, r1, #1
   11f00:	cmp	r1, ip
   11f04:	bne	11eec <__assert_fail@plt+0x1028>
   11f08:	str	ip, [r2]
   11f0c:	ldrd	r4, [lr, #16]
   11f10:	orrs	r2, r4, r5
   11f14:	bne	11f90 <__assert_fail@plt+0x10cc>
   11f18:	ldrd	r4, [lr, #24]
   11f1c:	orrs	r2, r4, r5
   11f20:	moveq	r2, #1
   11f24:	strbeq	r2, [r3]
   11f28:	beq	11f5c <__assert_fail@plt+0x1098>
   11f2c:	ldr	r1, [lr, #4]
   11f30:	mov	r2, r4
   11f34:	add	ip, r1, ip, lsl #3
   11f38:	adds	r4, r4, r6
   11f3c:	ldrd	r0, [ip, #-8]
   11f40:	mov	r3, r5
   11f44:	adc	r5, r5, r7
   11f48:	subs	r0, r6, r0
   11f4c:	sbc	r1, r7, r1
   11f50:	bl	17dac <__assert_fail@plt+0x6ee8>
   11f54:	subs	r4, r4, r2
   11f58:	sbc	r5, r5, r3
   11f5c:	mov	r0, r4
   11f60:	mov	r1, r5
   11f64:	pop	{r4, r5, r6, r7, r8, pc}
   11f68:	mov	r2, r4
   11f6c:	mov	r3, r5
   11f70:	adds	r4, r4, r6
   11f74:	adc	r5, r5, r7
   11f78:	bl	17dac <__assert_fail@plt+0x6ee8>
   11f7c:	subs	r4, r4, r2
   11f80:	sbc	r5, r5, r3
   11f84:	b	11f5c <__assert_fail@plt+0x1098>
   11f88:	str	r1, [r2]
   11f8c:	b	11f5c <__assert_fail@plt+0x1098>
   11f90:	mov	r2, r4
   11f94:	mov	r3, r5
   11f98:	mov	r0, r6
   11f9c:	mov	r1, r7
   11fa0:	b	11f70 <__assert_fail@plt+0x10ac>
   11fa4:	andeq	r9, r2, r0, ror #2
   11fa8:	ldr	r3, [pc, #24]	; 11fc8 <__assert_fail@plt+0x1104>
   11fac:	ldr	r2, [pc, #24]	; 11fcc <__assert_fail@plt+0x1108>
   11fb0:	cmp	r0, #0
   11fb4:	moveq	r0, r3
   11fb8:	mov	r3, #0
   11fbc:	str	r0, [r2, #44]	; 0x2c
   11fc0:	strb	r3, [r2, #40]	; 0x28
   11fc4:	bx	lr
   11fc8:	andeq	r9, r2, r4, ror #1
   11fcc:	andeq	r9, r2, r0, ror #2
   11fd0:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11fd4:	subs	r6, r0, #0
   11fd8:	ldr	r5, [pc, #368]	; 12150 <__assert_fail@plt+0x128c>
   11fdc:	beq	1205c <__assert_fail@plt+0x1198>
   11fe0:	ldr	r7, [r5, #48]	; 0x30
   11fe4:	cmp	r7, #0
   11fe8:	beq	1213c <__assert_fail@plt+0x1278>
   11fec:	bl	10de0 <__errno_location@plt>
   11ff0:	ldr	r3, [r6]
   11ff4:	ldr	r1, [pc, #344]	; 12154 <__assert_fail@plt+0x1290>
   11ff8:	tst	r3, #32
   11ffc:	ldr	r4, [r0]
   12000:	mov	r8, r0
   12004:	mov	r0, r7
   12008:	moveq	r4, #0
   1200c:	bl	10c90 <strcmp@plt>
   12010:	cmp	r0, #0
   12014:	mov	r0, r6
   12018:	beq	12134 <__assert_fail@plt+0x1270>
   1201c:	bl	12344 <__assert_fail@plt+0x1480>
   12020:	cmp	r0, #0
   12024:	ldrne	r4, [r8]
   12028:	cmp	r4, #0
   1202c:	beq	1205c <__assert_fail@plt+0x1198>
   12030:	ldr	r2, [r5, #48]	; 0x30
   12034:	mov	r1, #3
   12038:	mov	r0, #0
   1203c:	bl	15514 <__assert_fail@plt+0x4650>
   12040:	mov	r1, r4
   12044:	ldr	r2, [pc, #268]	; 12158 <__assert_fail@plt+0x1294>
   12048:	mov	r3, r0
   1204c:	mov	r0, #0
   12050:	bl	10d74 <error@plt>
   12054:	mov	r3, #1
   12058:	str	r3, [r5, #52]	; 0x34
   1205c:	ldr	r3, [r5, #44]	; 0x2c
   12060:	add	r2, r3, #4
   12064:	ldr	r6, [r3]
   12068:	str	r2, [r5, #44]	; 0x2c
   1206c:	cmp	r6, #0
   12070:	beq	12128 <__assert_fail@plt+0x1264>
   12074:	ldr	r8, [pc, #216]	; 12154 <__assert_fail@plt+0x1290>
   12078:	ldr	fp, [pc, #220]	; 1215c <__assert_fail@plt+0x1298>
   1207c:	ldr	sl, [pc, #212]	; 12158 <__assert_fail@plt+0x1294>
   12080:	mov	r7, #1
   12084:	mov	r9, #3
   12088:	b	120e4 <__assert_fail@plt+0x1220>
   1208c:	ldr	r4, [fp]
   12090:	strb	r7, [r5, #40]	; 0x28
   12094:	cmp	r4, #0
   12098:	bne	12110 <__assert_fail@plt+0x124c>
   1209c:	bl	10de0 <__errno_location@plt>
   120a0:	mov	r2, r6
   120a4:	mov	r1, r9
   120a8:	ldr	r6, [r0]
   120ac:	mov	r0, r4
   120b0:	bl	15514 <__assert_fail@plt+0x4650>
   120b4:	mov	r2, sl
   120b8:	mov	r1, r6
   120bc:	mov	r3, r0
   120c0:	mov	r0, r4
   120c4:	bl	10d74 <error@plt>
   120c8:	ldr	r3, [r5, #44]	; 0x2c
   120cc:	str	r7, [r5, #52]	; 0x34
   120d0:	add	r2, r3, #4
   120d4:	ldr	r6, [r3]
   120d8:	str	r2, [r5, #44]	; 0x2c
   120dc:	cmp	r6, #0
   120e0:	beq	12128 <__assert_fail@plt+0x1264>
   120e4:	mov	r1, r8
   120e8:	mov	r0, r6
   120ec:	bl	10c90 <strcmp@plt>
   120f0:	cmp	r0, #0
   120f4:	beq	1208c <__assert_fail@plt+0x11c8>
   120f8:	ldr	r1, [pc, #96]	; 12160 <__assert_fail@plt+0x129c>
   120fc:	mov	r0, r6
   12100:	bl	10e88 <fopen64@plt>
   12104:	mov	r4, r0
   12108:	cmp	r4, #0
   1210c:	beq	1209c <__assert_fail@plt+0x11d8>
   12110:	mov	r0, r4
   12114:	mov	r1, #2
   12118:	str	r6, [r5, #48]	; 0x30
   1211c:	bl	12310 <__assert_fail@plt+0x144c>
   12120:	mov	r0, r4
   12124:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12128:	mov	r4, #0
   1212c:	mov	r0, r4
   12130:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12134:	bl	10e7c <clearerr_unlocked@plt>
   12138:	b	12028 <__assert_fail@plt+0x1164>
   1213c:	ldr	r3, [pc, #32]	; 12164 <__assert_fail@plt+0x12a0>
   12140:	mov	r2, #340	; 0x154
   12144:	ldr	r1, [pc, #28]	; 12168 <__assert_fail@plt+0x12a4>
   12148:	ldr	r0, [pc, #28]	; 1216c <__assert_fail@plt+0x12a8>
   1214c:	bl	10ec4 <__assert_fail@plt>
   12150:	andeq	r9, r2, r0, ror #2
   12154:	andeq	r8, r1, r4, asr r6
   12158:	andeq	r8, r1, r4, lsr #11
   1215c:	andeq	r9, r2, r0, asr r1
   12160:	andeq	r8, r1, r8, asr r6
   12164:	andeq	r8, r1, r0, lsr #9
   12168:	andeq	r8, r1, r4, lsr r6
   1216c:	andeq	r8, r1, r8, asr #12
   12170:	ldr	r3, [pc, #52]	; 121ac <__assert_fail@plt+0x12e8>
   12174:	ldrb	r3, [r3, #40]	; 0x28
   12178:	cmp	r3, #0
   1217c:	bxeq	lr
   12180:	ldr	r3, [pc, #40]	; 121b0 <__assert_fail@plt+0x12ec>
   12184:	push	{r4, lr}
   12188:	ldr	r0, [r3]
   1218c:	bl	12344 <__assert_fail@plt+0x1480>
   12190:	cmp	r0, #0
   12194:	popeq	{r4, pc}
   12198:	bl	10de0 <__errno_location@plt>
   1219c:	ldr	r2, [pc, #16]	; 121b4 <__assert_fail@plt+0x12f0>
   121a0:	ldr	r1, [r0]
   121a4:	mov	r0, #1
   121a8:	bl	10d74 <error@plt>
   121ac:	andeq	r9, r2, r0, ror #2
   121b0:	andeq	r9, r2, r0, asr r1
   121b4:	andeq	r8, r1, r4, asr r6
   121b8:	push	{r4, lr}
   121bc:	mov	r2, #5
   121c0:	ldr	r4, [pc, #44]	; 121f4 <__assert_fail@plt+0x1330>
   121c4:	ldr	r1, [pc, #44]	; 121f8 <__assert_fail@plt+0x1334>
   121c8:	mov	r0, #0
   121cc:	bl	10d08 <dcgettext@plt>
   121d0:	ldr	r1, [r4]
   121d4:	bl	10c78 <fputs_unlocked@plt>
   121d8:	ldr	r1, [pc, #28]	; 121fc <__assert_fail@plt+0x1338>
   121dc:	mov	r2, #5
   121e0:	mov	r0, #0
   121e4:	bl	10d08 <dcgettext@plt>
   121e8:	ldr	r1, [r4]
   121ec:	pop	{r4, lr}
   121f0:	b	10c78 <fputs_unlocked@plt>
   121f4:	andeq	r9, r2, r4, asr r1
   121f8:	andeq	r8, r1, ip, asr r6
   121fc:	muleq	r1, ip, r6
   12200:	ldr	r3, [pc, #4]	; 1220c <__assert_fail@plt+0x1348>
   12204:	str	r0, [r3]
   12208:	bx	lr
   1220c:	muleq	r2, ip, r1
   12210:	ldr	r3, [pc, #4]	; 1221c <__assert_fail@plt+0x1358>
   12214:	strb	r0, [r3, #4]
   12218:	bx	lr
   1221c:	muleq	r2, ip, r1
   12220:	ldr	r3, [pc, #192]	; 122e8 <__assert_fail@plt+0x1424>
   12224:	push	{r4, r5, r6, lr}
   12228:	sub	sp, sp, #8
   1222c:	ldr	r0, [r3]
   12230:	bl	1771c <__assert_fail@plt+0x6858>
   12234:	cmp	r0, #0
   12238:	beq	1225c <__assert_fail@plt+0x1398>
   1223c:	ldr	r4, [pc, #168]	; 122ec <__assert_fail@plt+0x1428>
   12240:	ldrb	r3, [r4, #4]
   12244:	cmp	r3, #0
   12248:	beq	12278 <__assert_fail@plt+0x13b4>
   1224c:	bl	10de0 <__errno_location@plt>
   12250:	ldr	r3, [r0]
   12254:	cmp	r3, #32
   12258:	bne	12278 <__assert_fail@plt+0x13b4>
   1225c:	ldr	r3, [pc, #140]	; 122f0 <__assert_fail@plt+0x142c>
   12260:	ldr	r0, [r3]
   12264:	bl	1771c <__assert_fail@plt+0x6858>
   12268:	cmp	r0, #0
   1226c:	bne	122c0 <__assert_fail@plt+0x13fc>
   12270:	add	sp, sp, #8
   12274:	pop	{r4, r5, r6, pc}
   12278:	mov	r2, #5
   1227c:	ldr	r1, [pc, #112]	; 122f4 <__assert_fail@plt+0x1430>
   12280:	mov	r0, #0
   12284:	bl	10d08 <dcgettext@plt>
   12288:	ldr	r4, [r4]
   1228c:	cmp	r4, #0
   12290:	mov	r5, r0
   12294:	beq	122cc <__assert_fail@plt+0x1408>
   12298:	bl	10de0 <__errno_location@plt>
   1229c:	ldr	r6, [r0]
   122a0:	mov	r0, r4
   122a4:	bl	151a8 <__assert_fail@plt+0x42e4>
   122a8:	mov	r1, r6
   122ac:	str	r5, [sp]
   122b0:	ldr	r2, [pc, #64]	; 122f8 <__assert_fail@plt+0x1434>
   122b4:	mov	r3, r0
   122b8:	mov	r0, #0
   122bc:	bl	10d74 <error@plt>
   122c0:	ldr	r3, [pc, #52]	; 122fc <__assert_fail@plt+0x1438>
   122c4:	ldr	r0, [r3]
   122c8:	bl	10cc0 <_exit@plt>
   122cc:	bl	10de0 <__errno_location@plt>
   122d0:	mov	r3, r5
   122d4:	ldr	r2, [pc, #36]	; 12300 <__assert_fail@plt+0x143c>
   122d8:	ldr	r1, [r0]
   122dc:	mov	r0, r4
   122e0:	bl	10d74 <error@plt>
   122e4:	b	122c0 <__assert_fail@plt+0x13fc>
   122e8:	andeq	r9, r2, r4, asr r1
   122ec:	muleq	r2, ip, r1
   122f0:	andeq	r9, r2, r8, asr #2
   122f4:	andeq	r8, r1, r4, ror #7
   122f8:	andeq	r8, r1, ip, lsl r8
   122fc:	strdeq	r9, [r2], -r0
   12300:	andeq	r8, r1, r4, lsr #11
   12304:	push	{r4, r5}
   12308:	pop	{r4, r5}
   1230c:	b	10c9c <posix_fadvise64@plt>
   12310:	cmp	r0, #0
   12314:	bxeq	lr
   12318:	push	{r4, lr}
   1231c:	sub	sp, sp, #16
   12320:	mov	r4, r1
   12324:	bl	10e10 <fileno@plt>
   12328:	mov	r2, #0
   1232c:	mov	r3, #0
   12330:	str	r4, [sp, #8]
   12334:	strd	r2, [sp]
   12338:	bl	10c9c <posix_fadvise64@plt>
   1233c:	add	sp, sp, #16
   12340:	pop	{r4, pc}
   12344:	push	{r4, r5, lr}
   12348:	sub	sp, sp, #12
   1234c:	mov	r4, r0
   12350:	bl	10e10 <fileno@plt>
   12354:	cmp	r0, #0
   12358:	mov	r0, r4
   1235c:	blt	123d8 <__assert_fail@plt+0x1514>
   12360:	bl	10d98 <__freading@plt>
   12364:	cmp	r0, #0
   12368:	bne	123a4 <__assert_fail@plt+0x14e0>
   1236c:	mov	r0, r4
   12370:	bl	123e4 <__assert_fail@plt+0x1520>
   12374:	cmp	r0, #0
   12378:	beq	123d4 <__assert_fail@plt+0x1510>
   1237c:	bl	10de0 <__errno_location@plt>
   12380:	mov	r5, r0
   12384:	mov	r0, r4
   12388:	ldr	r4, [r5]
   1238c:	bl	10e28 <fclose@plt>
   12390:	cmp	r4, #0
   12394:	mvnne	r0, #0
   12398:	strne	r4, [r5]
   1239c:	add	sp, sp, #12
   123a0:	pop	{r4, r5, pc}
   123a4:	mov	r0, r4
   123a8:	bl	10e10 <fileno@plt>
   123ac:	mov	r3, #1
   123b0:	str	r3, [sp]
   123b4:	mov	r2, #0
   123b8:	mov	r3, #0
   123bc:	bl	10d44 <lseek64@plt>
   123c0:	mvn	r3, #0
   123c4:	mvn	r2, #0
   123c8:	cmp	r1, r3
   123cc:	cmpeq	r0, r2
   123d0:	bne	1236c <__assert_fail@plt+0x14a8>
   123d4:	mov	r0, r4
   123d8:	add	sp, sp, #12
   123dc:	pop	{r4, r5, lr}
   123e0:	b	10e28 <fclose@plt>
   123e4:	push	{r4, lr}
   123e8:	subs	r4, r0, #0
   123ec:	sub	sp, sp, #8
   123f0:	beq	1240c <__assert_fail@plt+0x1548>
   123f4:	bl	10d98 <__freading@plt>
   123f8:	cmp	r0, #0
   123fc:	beq	1240c <__assert_fail@plt+0x1548>
   12400:	ldr	r3, [r4]
   12404:	tst	r3, #256	; 0x100
   12408:	bne	1241c <__assert_fail@plt+0x1558>
   1240c:	mov	r0, r4
   12410:	add	sp, sp, #8
   12414:	pop	{r4, lr}
   12418:	b	10ca8 <fflush@plt>
   1241c:	mov	r3, #1
   12420:	str	r3, [sp]
   12424:	mov	r2, #0
   12428:	mov	r3, #0
   1242c:	mov	r0, r4
   12430:	bl	1249c <__assert_fail@plt+0x15d8>
   12434:	mov	r0, r4
   12438:	add	sp, sp, #8
   1243c:	pop	{r4, lr}
   12440:	b	10ca8 <fflush@plt>
   12444:	push	{r4, r5, lr}
   12448:	sub	sp, sp, #12
   1244c:	mov	r5, r0
   12450:	bl	10de0 <__errno_location@plt>
   12454:	mov	r2, #0
   12458:	mov	r4, r0
   1245c:	ldr	r3, [r0]
   12460:	str	r2, [r4]
   12464:	mov	r0, r5
   12468:	str	r3, [sp]
   1246c:	str	r3, [sp, #4]
   12470:	bl	10cb4 <free@plt>
   12474:	ldr	r3, [r4]
   12478:	add	r2, sp, #8
   1247c:	cmp	r3, #0
   12480:	moveq	r3, #4
   12484:	movne	r3, #0
   12488:	add	r3, r2, r3
   1248c:	ldr	r3, [r3, #-8]
   12490:	str	r3, [r4]
   12494:	add	sp, sp, #12
   12498:	pop	{r4, r5, pc}
   1249c:	push	{r4, r5, r6, r7, r8, lr}
   124a0:	sub	sp, sp, #8
   124a4:	ldmib	r0, {ip, lr}
   124a8:	mov	r4, r0
   124ac:	ldr	r5, [sp, #32]
   124b0:	cmp	lr, ip
   124b4:	beq	124cc <__assert_fail@plt+0x1608>
   124b8:	str	r5, [sp, #32]
   124bc:	mov	r0, r4
   124c0:	add	sp, sp, #8
   124c4:	pop	{r4, r5, r6, r7, r8, lr}
   124c8:	b	10e34 <fseeko64@plt>
   124cc:	ldr	lr, [r0, #20]
   124d0:	ldr	ip, [r0, #16]
   124d4:	cmp	lr, ip
   124d8:	bne	124b8 <__assert_fail@plt+0x15f4>
   124dc:	ldr	r8, [r0, #36]	; 0x24
   124e0:	cmp	r8, #0
   124e4:	bne	124b8 <__assert_fail@plt+0x15f4>
   124e8:	mov	r6, r2
   124ec:	mov	r7, r3
   124f0:	bl	10e10 <fileno@plt>
   124f4:	mov	r2, r6
   124f8:	mov	r3, r7
   124fc:	str	r5, [sp]
   12500:	bl	10d44 <lseek64@plt>
   12504:	mvn	r3, #0
   12508:	mvn	r2, #0
   1250c:	cmp	r1, r3
   12510:	cmpeq	r0, r2
   12514:	beq	12534 <__assert_fail@plt+0x1670>
   12518:	ldr	r3, [r4]
   1251c:	strd	r0, [r4, #80]	; 0x50
   12520:	mov	r0, r8
   12524:	bic	r3, r3, #16
   12528:	str	r3, [r4]
   1252c:	add	sp, sp, #8
   12530:	pop	{r4, r5, r6, r7, r8, pc}
   12534:	mvn	r0, #0
   12538:	b	1252c <__assert_fail@plt+0x1668>
   1253c:	push	{r4, r5, r6, lr}
   12540:	subs	r4, r0, #0
   12544:	beq	125b8 <__assert_fail@plt+0x16f4>
   12548:	mov	r1, #47	; 0x2f
   1254c:	bl	10e64 <strrchr@plt>
   12550:	subs	r5, r0, #0
   12554:	beq	125a4 <__assert_fail@plt+0x16e0>
   12558:	add	r6, r5, #1
   1255c:	sub	r3, r6, r4
   12560:	cmp	r3, #6
   12564:	ble	125a4 <__assert_fail@plt+0x16e0>
   12568:	mov	r2, #7
   1256c:	ldr	r1, [pc, #96]	; 125d4 <__assert_fail@plt+0x1710>
   12570:	sub	r0, r5, #6
   12574:	bl	10ea0 <strncmp@plt>
   12578:	cmp	r0, #0
   1257c:	bne	125a4 <__assert_fail@plt+0x16e0>
   12580:	mov	r2, #3
   12584:	ldr	r1, [pc, #76]	; 125d8 <__assert_fail@plt+0x1714>
   12588:	mov	r0, r6
   1258c:	bl	10ea0 <strncmp@plt>
   12590:	cmp	r0, #0
   12594:	movne	r4, r6
   12598:	ldreq	r3, [pc, #60]	; 125dc <__assert_fail@plt+0x1718>
   1259c:	addeq	r4, r5, #4
   125a0:	streq	r4, [r3]
   125a4:	ldr	r2, [pc, #52]	; 125e0 <__assert_fail@plt+0x171c>
   125a8:	ldr	r3, [pc, #52]	; 125e4 <__assert_fail@plt+0x1720>
   125ac:	str	r4, [r2]
   125b0:	str	r4, [r3]
   125b4:	pop	{r4, r5, r6, pc}
   125b8:	ldr	r3, [pc, #40]	; 125e8 <__assert_fail@plt+0x1724>
   125bc:	mov	r2, #55	; 0x37
   125c0:	mov	r1, #1
   125c4:	ldr	r3, [r3]
   125c8:	ldr	r0, [pc, #28]	; 125ec <__assert_fail@plt+0x1728>
   125cc:	bl	10d38 <fwrite@plt>
   125d0:	bl	10eac <abort@plt>
   125d4:	andeq	r8, r1, ip, asr r8
   125d8:	andeq	r8, r1, r4, ror #16
   125dc:	andeq	r9, r2, r8, lsr r1
   125e0:	andeq	r9, r2, r4, lsr #3
   125e4:	andeq	r9, r2, ip, lsr r1
   125e8:	andeq	r9, r2, r8, asr #2
   125ec:	andeq	r8, r1, r4, lsr #16
   125f0:	push	{r4, r5, r6, lr}
   125f4:	mov	r4, r0
   125f8:	mov	r5, r1
   125fc:	bl	17798 <__assert_fail@plt+0x68d4>
   12600:	ldrb	r3, [r0]
   12604:	bic	r3, r3, #32
   12608:	cmp	r3, #85	; 0x55
   1260c:	bne	1266c <__assert_fail@plt+0x17a8>
   12610:	ldrb	r3, [r0, #1]
   12614:	bic	r3, r3, #32
   12618:	cmp	r3, #84	; 0x54
   1261c:	bne	126a8 <__assert_fail@plt+0x17e4>
   12620:	ldrb	r3, [r0, #2]
   12624:	bic	r3, r3, #32
   12628:	cmp	r3, #70	; 0x46
   1262c:	bne	126a8 <__assert_fail@plt+0x17e4>
   12630:	ldrb	r3, [r0, #3]
   12634:	cmp	r3, #45	; 0x2d
   12638:	bne	126a8 <__assert_fail@plt+0x17e4>
   1263c:	ldrb	r3, [r0, #4]
   12640:	cmp	r3, #56	; 0x38
   12644:	bne	126a8 <__assert_fail@plt+0x17e4>
   12648:	ldrb	r3, [r0, #5]
   1264c:	cmp	r3, #0
   12650:	bne	126a8 <__assert_fail@plt+0x17e4>
   12654:	ldrb	r2, [r4]
   12658:	ldr	r3, [pc, #152]	; 126f8 <__assert_fail@plt+0x1834>
   1265c:	ldr	r0, [pc, #152]	; 126fc <__assert_fail@plt+0x1838>
   12660:	cmp	r2, #96	; 0x60
   12664:	movne	r0, r3
   12668:	pop	{r4, r5, r6, pc}
   1266c:	cmp	r3, #71	; 0x47
   12670:	bne	126a8 <__assert_fail@plt+0x17e4>
   12674:	ldrb	r3, [r0, #1]
   12678:	bic	r3, r3, #32
   1267c:	cmp	r3, #66	; 0x42
   12680:	bne	126a8 <__assert_fail@plt+0x17e4>
   12684:	ldrb	r3, [r0, #2]
   12688:	cmp	r3, #49	; 0x31
   1268c:	bne	126a8 <__assert_fail@plt+0x17e4>
   12690:	ldrb	r3, [r0, #3]
   12694:	cmp	r3, #56	; 0x38
   12698:	bne	126a8 <__assert_fail@plt+0x17e4>
   1269c:	ldrb	r3, [r0, #4]
   126a0:	cmp	r3, #48	; 0x30
   126a4:	beq	126bc <__assert_fail@plt+0x17f8>
   126a8:	ldr	r3, [pc, #80]	; 12700 <__assert_fail@plt+0x183c>
   126ac:	cmp	r5, #9
   126b0:	ldr	r0, [pc, #76]	; 12704 <__assert_fail@plt+0x1840>
   126b4:	movne	r0, r3
   126b8:	pop	{r4, r5, r6, pc}
   126bc:	ldrb	r3, [r0, #5]
   126c0:	cmp	r3, #51	; 0x33
   126c4:	bne	126a8 <__assert_fail@plt+0x17e4>
   126c8:	ldrb	r3, [r0, #6]
   126cc:	cmp	r3, #48	; 0x30
   126d0:	bne	126a8 <__assert_fail@plt+0x17e4>
   126d4:	ldrb	r3, [r0, #7]
   126d8:	cmp	r3, #0
   126dc:	bne	126a8 <__assert_fail@plt+0x17e4>
   126e0:	ldrb	r2, [r4]
   126e4:	ldr	r3, [pc, #28]	; 12708 <__assert_fail@plt+0x1844>
   126e8:	ldr	r0, [pc, #28]	; 1270c <__assert_fail@plt+0x1848>
   126ec:	cmp	r2, #96	; 0x60
   126f0:	movne	r0, r3
   126f4:	pop	{r4, r5, r6, pc}
   126f8:	andeq	r8, r1, r0, asr #17
   126fc:			; <UNDEFINED> instruction: 0x000188bc
   12700:	ldrdeq	r8, [r1], -r0
   12704:	andeq	r8, r1, ip, asr #17
   12708:	andeq	r8, r1, r8, asr #17
   1270c:	andeq	r8, r1, r4, asr #17
   12710:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12714:	sub	sp, sp, #140	; 0x8c
   12718:	mov	r9, r1
   1271c:	str	r3, [sp, #24]
   12720:	mov	r3, #1
   12724:	mov	sl, r0
   12728:	str	r2, [sp, #44]	; 0x2c
   1272c:	str	r3, [sp, #28]
   12730:	bl	10d50 <__ctype_get_mb_cur_max@plt>
   12734:	ldr	r3, [sp, #180]	; 0xb4
   12738:	mov	fp, r9
   1273c:	mov	r9, sl
   12740:	lsr	r3, r3, #1
   12744:	and	r3, r3, #1
   12748:	str	r3, [sp, #40]	; 0x28
   1274c:	ldr	r3, [sp, #180]	; 0xb4
   12750:	mov	r2, #0
   12754:	and	r3, r3, #4
   12758:	str	r3, [sp, #100]	; 0x64
   1275c:	ldr	r3, [sp, #180]	; 0xb4
   12760:	str	r2, [sp, #76]	; 0x4c
   12764:	and	r3, r3, #1
   12768:	str	r3, [sp, #96]	; 0x60
   1276c:	str	r2, [sp, #36]	; 0x24
   12770:	str	r2, [sp, #56]	; 0x38
   12774:	str	r2, [sp, #68]	; 0x44
   12778:	str	r2, [sp, #72]	; 0x48
   1277c:	str	r2, [sp, #84]	; 0x54
   12780:	str	r0, [sp, #80]	; 0x50
   12784:	ldr	r3, [sp, #176]	; 0xb0
   12788:	cmp	r3, #10
   1278c:	ldrls	pc, [pc, r3, lsl #2]
   12790:	b	13968 <__assert_fail@plt+0x2aa4>
   12794:	andeq	r2, r1, r0, asr #15
   12798:	andeq	r2, r1, r0, ror #21
   1279c:	andeq	r2, r1, r8, lsr ip
   127a0:	andeq	r2, r1, r4, lsl fp
   127a4:	andeq	r2, r1, ip, lsl #25
   127a8:	andeq	r2, r1, ip, ror #24
   127ac:	andeq	r2, r1, r4, lsr fp
   127b0:	andeq	r2, r1, r8, asr fp
   127b4:	andeq	r2, r1, r0, lsl #23
   127b8:	andeq	r2, r1, r0, lsl #23
   127bc:	andeq	r2, r1, r0, lsl #23
   127c0:	mov	r3, #0
   127c4:	ldr	r1, [sp, #56]	; 0x38
   127c8:	ldr	r2, [sp, #176]	; 0xb0
   127cc:	ldr	lr, [sp, #176]	; 0xb0
   127d0:	mov	r8, r3
   127d4:	mov	ip, r3
   127d8:	str	r3, [sp, #40]	; 0x28
   127dc:	mov	r3, r1
   127e0:	cmp	r2, #2
   127e4:	moveq	r3, #0
   127e8:	andne	r3, r3, #1
   127ec:	mov	r0, r3
   127f0:	str	r3, [sp, #92]	; 0x5c
   127f4:	ldr	r3, [sp, #68]	; 0x44
   127f8:	sub	lr, lr, #2
   127fc:	adds	r2, r3, #0
   12800:	movne	r2, #1
   12804:	and	r3, r1, ip
   12808:	and	r3, r2, r3
   1280c:	clz	lr, lr
   12810:	str	r3, [sp, #88]	; 0x58
   12814:	lsr	lr, lr, #5
   12818:	mov	r3, ip
   1281c:	and	r3, r3, lr
   12820:	mov	sl, #0
   12824:	and	r0, r2, r0
   12828:	str	r3, [sp, #64]	; 0x40
   1282c:	eor	r3, r1, #1
   12830:	str	lr, [sp, #52]	; 0x34
   12834:	str	r0, [sp, #48]	; 0x30
   12838:	str	r3, [sp, #60]	; 0x3c
   1283c:	ldr	r3, [sp, #24]
   12840:	cmn	r3, #1
   12844:	beq	12d74 <__assert_fail@plt+0x1eb0>
   12848:	subs	r7, r3, sl
   1284c:	movne	r7, #1
   12850:	cmp	r7, #0
   12854:	beq	12d8c <__assert_fail@plt+0x1ec8>
   12858:	ldr	r3, [sp, #48]	; 0x30
   1285c:	cmp	r3, #0
   12860:	beq	130f8 <__assert_fail@plt+0x2234>
   12864:	ldr	r2, [sp, #68]	; 0x44
   12868:	ldr	r1, [sp, #24]
   1286c:	cmp	r2, #1
   12870:	mov	r3, r2
   12874:	movls	r3, #0
   12878:	movhi	r3, #1
   1287c:	cmn	r1, #1
   12880:	movne	r3, #0
   12884:	cmp	r3, #0
   12888:	add	r4, sl, r2
   1288c:	beq	1289c <__assert_fail@plt+0x19d8>
   12890:	ldr	r0, [sp, #44]	; 0x2c
   12894:	bl	10dd4 <strlen@plt>
   12898:	str	r0, [sp, #24]
   1289c:	ldr	r3, [sp, #24]
   128a0:	cmp	r3, r4
   128a4:	ldr	r3, [sp, #44]	; 0x2c
   128a8:	add	r5, r3, sl
   128ac:	bcc	13100 <__assert_fail@plt+0x223c>
   128b0:	mov	r0, r5
   128b4:	ldr	r2, [sp, #68]	; 0x44
   128b8:	ldr	r1, [sp, #72]	; 0x48
   128bc:	bl	10cf0 <memcmp@plt>
   128c0:	cmp	r0, #0
   128c4:	bne	13100 <__assert_fail@plt+0x223c>
   128c8:	ldr	r3, [sp, #40]	; 0x28
   128cc:	cmp	r3, #0
   128d0:	bne	13abc <__assert_fail@plt+0x2bf8>
   128d4:	ldrb	r4, [r5]
   128d8:	cmp	r4, #126	; 0x7e
   128dc:	ldrls	pc, [pc, r4, lsl #2]
   128e0:	b	139f8 <__assert_fail@plt+0x2b34>
   128e4:			; <UNDEFINED> instruction: 0x00012fb8
   128e8:	strdeq	r3, [r1], -r8
   128ec:	strdeq	r3, [r1], -r8
   128f0:	strdeq	r3, [r1], -r8
   128f4:	strdeq	r3, [r1], -r8
   128f8:	strdeq	r3, [r1], -r8
   128fc:	strdeq	r3, [r1], -r8
   12900:	andeq	r2, r1, r4, lsr #31
   12904:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   12908:	andeq	r2, r1, ip, ror #30
   1290c:	andeq	r2, r1, ip, asr #30
   12910:	andeq	r2, r1, ip, ror pc
   12914:			; <UNDEFINED> instruction: 0x00012eb4
   12918:	andeq	r3, r1, r8, ror #1
   1291c:	strdeq	r3, [r1], -r8
   12920:	strdeq	r3, [r1], -r8
   12924:	strdeq	r3, [r1], -r8
   12928:	strdeq	r3, [r1], -r8
   1292c:	strdeq	r3, [r1], -r8
   12930:	strdeq	r3, [r1], -r8
   12934:	strdeq	r3, [r1], -r8
   12938:	strdeq	r3, [r1], -r8
   1293c:	strdeq	r3, [r1], -r8
   12940:	strdeq	r3, [r1], -r8
   12944:	strdeq	r3, [r1], -r8
   12948:	strdeq	r3, [r1], -r8
   1294c:	strdeq	r3, [r1], -r8
   12950:	strdeq	r3, [r1], -r8
   12954:	strdeq	r3, [r1], -r8
   12958:	strdeq	r3, [r1], -r8
   1295c:	strdeq	r3, [r1], -r8
   12960:	strdeq	r3, [r1], -r8
   12964:	ldrdeq	r3, [r1], -r8
   12968:	strheq	r3, [r1], -r8
   1296c:	strheq	r3, [r1], -r8
   12970:	muleq	r1, r8, r0
   12974:	strheq	r3, [r1], -r8
   12978:	andeq	r2, r1, r4, lsr #29
   1297c:	strheq	r3, [r1], -r8
   12980:	andeq	r2, r1, r0, lsl #29
   12984:	strheq	r3, [r1], -r8
   12988:	strheq	r3, [r1], -r8
   1298c:	strheq	r3, [r1], -r8
   12990:	andeq	r2, r1, r4, lsr #29
   12994:	andeq	r2, r1, r4, lsr #29
   12998:	andeq	r2, r1, r4, lsr #29
   1299c:	andeq	r2, r1, r4, lsr #29
   129a0:	andeq	r2, r1, r4, lsr #29
   129a4:	andeq	r2, r1, r4, lsr #29
   129a8:	andeq	r2, r1, r4, lsr #29
   129ac:	andeq	r2, r1, r4, lsr #29
   129b0:	andeq	r2, r1, r4, lsr #29
   129b4:	andeq	r2, r1, r4, lsr #29
   129b8:	andeq	r2, r1, r4, lsr #29
   129bc:	andeq	r2, r1, r4, lsr #29
   129c0:	andeq	r2, r1, r4, lsr #29
   129c4:	andeq	r2, r1, r4, lsr #29
   129c8:	andeq	r2, r1, r4, lsr #29
   129cc:	andeq	r2, r1, r4, lsr #29
   129d0:	strheq	r3, [r1], -r8
   129d4:	strheq	r3, [r1], -r8
   129d8:	strheq	r3, [r1], -r8
   129dc:	strheq	r3, [r1], -r8
   129e0:	andeq	r2, r1, r0, lsr lr
   129e4:	strdeq	r3, [r1], -r8
   129e8:	andeq	r2, r1, r4, lsr #29
   129ec:	andeq	r2, r1, r4, lsr #29
   129f0:	andeq	r2, r1, r4, lsr #29
   129f4:	andeq	r2, r1, r4, lsr #29
   129f8:	andeq	r2, r1, r4, lsr #29
   129fc:	andeq	r2, r1, r4, lsr #29
   12a00:	andeq	r2, r1, r4, lsr #29
   12a04:	andeq	r2, r1, r4, lsr #29
   12a08:	andeq	r2, r1, r4, lsr #29
   12a0c:	andeq	r2, r1, r4, lsr #29
   12a10:	andeq	r2, r1, r4, lsr #29
   12a14:	andeq	r2, r1, r4, lsr #29
   12a18:	andeq	r2, r1, r4, lsr #29
   12a1c:	andeq	r2, r1, r4, lsr #29
   12a20:	andeq	r2, r1, r4, lsr #29
   12a24:	andeq	r2, r1, r4, lsr #29
   12a28:	andeq	r2, r1, r4, lsr #29
   12a2c:	andeq	r2, r1, r4, lsr #29
   12a30:	andeq	r2, r1, r4, lsr #29
   12a34:	andeq	r2, r1, r4, lsr #29
   12a38:	andeq	r2, r1, r4, lsr #29
   12a3c:	andeq	r2, r1, r4, lsr #29
   12a40:	andeq	r2, r1, r4, lsr #29
   12a44:	andeq	r2, r1, r4, lsr #29
   12a48:	andeq	r2, r1, r4, lsr #29
   12a4c:	andeq	r2, r1, r4, lsr #29
   12a50:	strheq	r3, [r1], -r8
   12a54:	strdeq	r2, [r1], -ip
   12a58:	andeq	r2, r1, r4, lsr #29
   12a5c:	strheq	r3, [r1], -r8
   12a60:	andeq	r2, r1, r4, lsr #29
   12a64:	strheq	r3, [r1], -r8
   12a68:	andeq	r2, r1, r4, lsr #29
   12a6c:	andeq	r2, r1, r4, lsr #29
   12a70:	andeq	r2, r1, r4, lsr #29
   12a74:	andeq	r2, r1, r4, lsr #29
   12a78:	andeq	r2, r1, r4, lsr #29
   12a7c:	andeq	r2, r1, r4, lsr #29
   12a80:	andeq	r2, r1, r4, lsr #29
   12a84:	andeq	r2, r1, r4, lsr #29
   12a88:	andeq	r2, r1, r4, lsr #29
   12a8c:	andeq	r2, r1, r4, lsr #29
   12a90:	andeq	r2, r1, r4, lsr #29
   12a94:	andeq	r2, r1, r4, lsr #29
   12a98:	andeq	r2, r1, r4, lsr #29
   12a9c:	andeq	r2, r1, r4, lsr #29
   12aa0:	andeq	r2, r1, r4, lsr #29
   12aa4:	andeq	r2, r1, r4, lsr #29
   12aa8:	andeq	r2, r1, r4, lsr #29
   12aac:	andeq	r2, r1, r4, lsr #29
   12ab0:	andeq	r2, r1, r4, lsr #29
   12ab4:	andeq	r2, r1, r4, lsr #29
   12ab8:	andeq	r2, r1, r4, lsr #29
   12abc:	andeq	r2, r1, r4, lsr #29
   12ac0:	andeq	r2, r1, r4, lsr #29
   12ac4:	andeq	r2, r1, r4, lsr #29
   12ac8:	andeq	r2, r1, r4, lsr #29
   12acc:	andeq	r2, r1, r4, lsr #29
   12ad0:			; <UNDEFINED> instruction: 0x00012cb4
   12ad4:	strheq	r3, [r1], -r8
   12ad8:			; <UNDEFINED> instruction: 0x00012cb4
   12adc:	muleq	r1, r8, r0
   12ae0:	mov	r3, #1
   12ae4:	str	r3, [sp, #40]	; 0x28
   12ae8:	str	r3, [sp, #68]	; 0x44
   12aec:	mov	r8, #0
   12af0:	ldr	r3, [pc, #4056]	; 13ad0 <__assert_fail@plt+0x2c0c>
   12af4:	str	r3, [sp, #72]	; 0x48
   12af8:	mov	r3, #2
   12afc:	str	r3, [sp, #176]	; 0xb0
   12b00:	ldr	r1, [sp, #56]	; 0x38
   12b04:	mov	r2, r3
   12b08:	ldr	ip, [sp, #40]	; 0x28
   12b0c:	mov	lr, r3
   12b10:	b	127dc <__assert_fail@plt+0x1918>
   12b14:	mov	r3, #1
   12b18:	str	r3, [sp, #56]	; 0x38
   12b1c:	str	r3, [sp, #68]	; 0x44
   12b20:	str	r3, [sp, #40]	; 0x28
   12b24:	ldr	r3, [pc, #4004]	; 13ad0 <__assert_fail@plt+0x2c0c>
   12b28:	mov	r8, #0
   12b2c:	str	r3, [sp, #72]	; 0x48
   12b30:	b	12af8 <__assert_fail@plt+0x1c34>
   12b34:	mov	r3, #1
   12b38:	str	r3, [sp, #56]	; 0x38
   12b3c:	str	r3, [sp, #68]	; 0x44
   12b40:	str	r3, [sp, #40]	; 0x28
   12b44:	ldr	r3, [pc, #3976]	; 13ad4 <__assert_fail@plt+0x2c10>
   12b48:	mov	r8, #0
   12b4c:	str	r3, [sp, #72]	; 0x48
   12b50:	mov	r3, #5
   12b54:	b	12afc <__assert_fail@plt+0x1c38>
   12b58:	mov	r3, #0
   12b5c:	str	r3, [sp, #40]	; 0x28
   12b60:	mov	r3, #1
   12b64:	str	r3, [sp, #56]	; 0x38
   12b68:	mov	r8, #0
   12b6c:	mov	r1, r3
   12b70:	ldr	r2, [sp, #176]	; 0xb0
   12b74:	ldr	ip, [sp, #40]	; 0x28
   12b78:	ldr	lr, [sp, #176]	; 0xb0
   12b7c:	b	127dc <__assert_fail@plt+0x1918>
   12b80:	ldr	r3, [sp, #176]	; 0xb0
   12b84:	cmp	r3, #10
   12b88:	beq	12bcc <__assert_fail@plt+0x1d08>
   12b8c:	mov	r2, #5
   12b90:	ldr	r1, [pc, #3904]	; 13ad8 <__assert_fail@plt+0x2c14>
   12b94:	mov	r0, #0
   12b98:	bl	10d08 <dcgettext@plt>
   12b9c:	ldr	r2, [pc, #3892]	; 13ad8 <__assert_fail@plt+0x2c14>
   12ba0:	cmp	r0, r2
   12ba4:	str	r0, [sp, #188]	; 0xbc
   12ba8:	beq	13c64 <__assert_fail@plt+0x2da0>
   12bac:	mov	r2, #5
   12bb0:	ldr	r1, [pc, #3864]	; 13ad0 <__assert_fail@plt+0x2c0c>
   12bb4:	mov	r0, #0
   12bb8:	bl	10d08 <dcgettext@plt>
   12bbc:	ldr	r2, [pc, #3852]	; 13ad0 <__assert_fail@plt+0x2c0c>
   12bc0:	cmp	r0, r2
   12bc4:	str	r0, [sp, #192]	; 0xc0
   12bc8:	beq	13c54 <__assert_fail@plt+0x2d90>
   12bcc:	ldr	r8, [sp, #40]	; 0x28
   12bd0:	cmp	r8, #0
   12bd4:	movne	r8, #0
   12bd8:	bne	12c08 <__assert_fail@plt+0x1d44>
   12bdc:	ldr	r3, [sp, #188]	; 0xbc
   12be0:	ldrb	r3, [r3]
   12be4:	cmp	r3, #0
   12be8:	beq	12c08 <__assert_fail@plt+0x1d44>
   12bec:	ldr	r2, [sp, #188]	; 0xbc
   12bf0:	cmp	fp, r8
   12bf4:	strbhi	r3, [r9, r8]
   12bf8:	ldrb	r3, [r2, #1]!
   12bfc:	add	r8, r8, #1
   12c00:	cmp	r3, #0
   12c04:	bne	12bf0 <__assert_fail@plt+0x1d2c>
   12c08:	ldr	r0, [sp, #192]	; 0xc0
   12c0c:	bl	10dd4 <strlen@plt>
   12c10:	ldr	r3, [sp, #192]	; 0xc0
   12c14:	ldr	r2, [sp, #176]	; 0xb0
   12c18:	str	r3, [sp, #72]	; 0x48
   12c1c:	mov	r3, #1
   12c20:	str	r3, [sp, #56]	; 0x38
   12c24:	mov	r1, r3
   12c28:	ldr	ip, [sp, #40]	; 0x28
   12c2c:	ldr	lr, [sp, #176]	; 0xb0
   12c30:	str	r0, [sp, #68]	; 0x44
   12c34:	b	127dc <__assert_fail@plt+0x1918>
   12c38:	ldr	r3, [sp, #40]	; 0x28
   12c3c:	cmp	r3, #0
   12c40:	beq	138e8 <__assert_fail@plt+0x2a24>
   12c44:	mov	r3, #1
   12c48:	str	r3, [sp, #68]	; 0x44
   12c4c:	ldr	r3, [pc, #3708]	; 13ad0 <__assert_fail@plt+0x2c0c>
   12c50:	str	r3, [sp, #72]	; 0x48
   12c54:	mov	r8, #0
   12c58:	ldr	r1, [sp, #56]	; 0x38
   12c5c:	ldr	r2, [sp, #176]	; 0xb0
   12c60:	ldr	ip, [sp, #40]	; 0x28
   12c64:	ldr	lr, [sp, #176]	; 0xb0
   12c68:	b	127dc <__assert_fail@plt+0x1918>
   12c6c:	ldr	r3, [sp, #40]	; 0x28
   12c70:	cmp	r3, #0
   12c74:	beq	1396c <__assert_fail@plt+0x2aa8>
   12c78:	str	r3, [sp, #56]	; 0x38
   12c7c:	mov	r3, #1
   12c80:	str	r3, [sp, #68]	; 0x44
   12c84:	ldr	r3, [pc, #3656]	; 13ad4 <__assert_fail@plt+0x2c10>
   12c88:	b	12c50 <__assert_fail@plt+0x1d8c>
   12c8c:	ldr	r3, [sp, #40]	; 0x28
   12c90:	cmp	r3, #0
   12c94:	mov	r3, #1
   12c98:	streq	r3, [sp, #56]	; 0x38
   12c9c:	beq	138e8 <__assert_fail@plt+0x2a24>
   12ca0:	str	r3, [sp, #68]	; 0x44
   12ca4:	ldr	r3, [pc, #3620]	; 13ad0 <__assert_fail@plt+0x2c0c>
   12ca8:	mov	r8, #0
   12cac:	str	r3, [sp, #72]	; 0x48
   12cb0:	b	12af8 <__assert_fail@plt+0x1c34>
   12cb4:	ldr	r3, [sp, #24]
   12cb8:	ldr	r6, [sp, #48]	; 0x30
   12cbc:	cmn	r3, #1
   12cc0:	beq	1331c <__assert_fail@plt+0x2458>
   12cc4:	subs	r3, r3, #1
   12cc8:	movne	r3, #1
   12ccc:	cmp	r3, #0
   12cd0:	beq	1309c <__assert_fail@plt+0x21d8>
   12cd4:	ldr	r1, [sp, #52]	; 0x34
   12cd8:	mov	r7, r3
   12cdc:	mov	r3, #0
   12ce0:	str	r3, [sp, #32]
   12ce4:	ldr	r3, [sp, #60]	; 0x3c
   12ce8:	orr	r2, r1, r3
   12cec:	ldr	r3, [sp, #40]	; 0x28
   12cf0:	eor	r2, r2, #1
   12cf4:	orr	r2, r3, r2
   12cf8:	tst	r2, #255	; 0xff
   12cfc:	bne	13620 <__assert_fail@plt+0x275c>
   12d00:	cmp	r6, #0
   12d04:	bne	12ee0 <__assert_fail@plt+0x201c>
   12d08:	ldr	r3, [sp, #36]	; 0x24
   12d0c:	add	sl, sl, #1
   12d10:	and	r3, r3, r7
   12d14:	uxtb	r6, r3
   12d18:	cmp	r6, #0
   12d1c:	beq	12d48 <__assert_fail@plt+0x1e84>
   12d20:	cmp	fp, r8
   12d24:	movhi	r3, #39	; 0x27
   12d28:	strbhi	r3, [r9, r8]
   12d2c:	add	r3, r8, #1
   12d30:	cmp	fp, r3
   12d34:	movhi	r2, #39	; 0x27
   12d38:	add	r8, r8, #2
   12d3c:	strbhi	r2, [r9, r3]
   12d40:	mov	r3, #0
   12d44:	str	r3, [sp, #36]	; 0x24
   12d48:	ldr	r2, [sp, #32]
   12d4c:	cmp	r8, fp
   12d50:	ldr	r3, [sp, #28]
   12d54:	strbcc	r4, [r9, r8]
   12d58:	cmp	r2, #0
   12d5c:	moveq	r3, #0
   12d60:	str	r3, [sp, #28]
   12d64:	ldr	r3, [sp, #24]
   12d68:	add	r8, r8, #1
   12d6c:	cmn	r3, #1
   12d70:	bne	12848 <__assert_fail@plt+0x1984>
   12d74:	ldr	r3, [sp, #44]	; 0x2c
   12d78:	ldrb	r3, [r3, sl]
   12d7c:	adds	r7, r3, #0
   12d80:	movne	r7, #1
   12d84:	cmp	r7, #0
   12d88:	bne	12858 <__assert_fail@plt+0x1994>
   12d8c:	ldr	r3, [sp, #64]	; 0x40
   12d90:	cmp	r8, #0
   12d94:	movne	r3, #0
   12d98:	andeq	r3, r3, #1
   12d9c:	cmp	r3, #0
   12da0:	str	r3, [sp, #64]	; 0x40
   12da4:	bne	13848 <__assert_fail@plt+0x2984>
   12da8:	ldr	r3, [sp, #40]	; 0x28
   12dac:	ldr	r2, [sp, #52]	; 0x34
   12db0:	eor	r3, r3, #1
   12db4:	ands	r2, r2, r3
   12db8:	beq	13c74 <__assert_fail@plt+0x2db0>
   12dbc:	ldr	r3, [sp, #76]	; 0x4c
   12dc0:	cmp	r3, #0
   12dc4:	beq	13c44 <__assert_fail@plt+0x2d80>
   12dc8:	ldr	r3, [sp, #28]
   12dcc:	cmp	r3, #0
   12dd0:	bne	13c00 <__assert_fail@plt+0x2d3c>
   12dd4:	ldr	r2, [sp, #84]	; 0x54
   12dd8:	clz	r3, fp
   12ddc:	cmp	r2, #0
   12de0:	lsr	r3, r3, #5
   12de4:	moveq	r3, #0
   12de8:	cmp	r3, #0
   12dec:	beq	13ba0 <__assert_fail@plt+0x2cdc>
   12df0:	mov	fp, r2
   12df4:	str	r3, [sp, #76]	; 0x4c
   12df8:	b	12784 <__assert_fail@plt+0x18c0>
   12dfc:	ldr	r3, [sp, #176]	; 0xb0
   12e00:	ldr	r6, [sp, #48]	; 0x30
   12e04:	cmp	r3, #2
   12e08:	beq	13340 <__assert_fail@plt+0x247c>
   12e0c:	ldr	r3, [sp, #88]	; 0x58
   12e10:	cmp	r3, #0
   12e14:	beq	138c4 <__assert_fail@plt+0x2a00>
   12e18:	mov	r3, #0
   12e1c:	add	sl, sl, #1
   12e20:	ldr	r6, [sp, #36]	; 0x24
   12e24:	str	r3, [sp, #32]
   12e28:	mov	r4, #92	; 0x5c
   12e2c:	b	12d18 <__assert_fail@plt+0x1e54>
   12e30:	ldr	r3, [sp, #176]	; 0xb0
   12e34:	ldr	r6, [sp, #48]	; 0x30
   12e38:	cmp	r3, #2
   12e3c:	beq	13370 <__assert_fail@plt+0x24ac>
   12e40:	cmp	r3, #5
   12e44:	bne	138d4 <__assert_fail@plt+0x2a10>
   12e48:	ldr	r3, [sp, #100]	; 0x64
   12e4c:	cmp	r3, #0
   12e50:	beq	13938 <__assert_fail@plt+0x2a74>
   12e54:	ldr	r2, [sp, #24]
   12e58:	add	r3, sl, #2
   12e5c:	cmp	r2, r3
   12e60:	bls	12e70 <__assert_fail@plt+0x1fac>
   12e64:	ldrb	r4, [r5, #1]
   12e68:	cmp	r4, #63	; 0x3f
   12e6c:	beq	13ae0 <__assert_fail@plt+0x2c1c>
   12e70:	mov	r1, #0
   12e74:	str	r1, [sp, #32]
   12e78:	mov	r4, #63	; 0x3f
   12e7c:	b	12ce4 <__assert_fail@plt+0x1e20>
   12e80:	ldr	r3, [sp, #176]	; 0xb0
   12e84:	ldr	r6, [sp, #48]	; 0x30
   12e88:	cmp	r3, #2
   12e8c:	beq	1339c <__assert_fail@plt+0x24d8>
   12e90:	str	r7, [sp, #32]
   12e94:	str	r7, [sp, #76]	; 0x4c
   12e98:	mov	r1, #0
   12e9c:	mov	r4, #39	; 0x27
   12ea0:	b	12ce4 <__assert_fail@plt+0x1e20>
   12ea4:	ldr	r6, [sp, #48]	; 0x30
   12ea8:	ldr	r1, [sp, #52]	; 0x34
   12eac:	str	r7, [sp, #32]
   12eb0:	b	12ce4 <__assert_fail@plt+0x1e20>
   12eb4:	ldr	r6, [sp, #48]	; 0x30
   12eb8:	ldr	r1, [sp, #52]	; 0x34
   12ebc:	mov	r4, #12
   12ec0:	mov	r3, #102	; 0x66
   12ec4:	ldr	r2, [sp, #56]	; 0x38
   12ec8:	cmp	r2, #0
   12ecc:	streq	r2, [sp, #32]
   12ed0:	beq	12ce4 <__assert_fail@plt+0x1e20>
   12ed4:	mov	r4, r3
   12ed8:	mov	r3, #0
   12edc:	str	r3, [sp, #32]
   12ee0:	ldr	r3, [sp, #40]	; 0x28
   12ee4:	cmp	r3, #0
   12ee8:	bne	13658 <__assert_fail@plt+0x2794>
   12eec:	ldr	r3, [sp, #36]	; 0x24
   12ef0:	eor	r3, r3, #1
   12ef4:	and	r3, r3, r1
   12ef8:	ands	r3, r3, #255	; 0xff
   12efc:	beq	12f34 <__assert_fail@plt+0x2070>
   12f00:	cmp	fp, r8
   12f04:	movhi	r2, #39	; 0x27
   12f08:	strbhi	r2, [r9, r8]
   12f0c:	add	r2, r8, #1
   12f10:	cmp	fp, r2
   12f14:	movhi	r1, #36	; 0x24
   12f18:	strbhi	r1, [r9, r2]
   12f1c:	add	r2, r8, #2
   12f20:	cmp	fp, r2
   12f24:	add	r8, r8, #3
   12f28:	movhi	r1, #39	; 0x27
   12f2c:	strbhi	r1, [r9, r2]
   12f30:	str	r3, [sp, #36]	; 0x24
   12f34:	cmp	fp, r8
   12f38:	movhi	r3, #92	; 0x5c
   12f3c:	strbhi	r3, [r9, r8]
   12f40:	add	sl, sl, #1
   12f44:	add	r8, r8, #1
   12f48:	b	12d48 <__assert_fail@plt+0x1e84>
   12f4c:	ldr	r6, [sp, #48]	; 0x30
   12f50:	mov	r4, #10
   12f54:	mov	r3, #110	; 0x6e
   12f58:	ldr	r2, [sp, #64]	; 0x40
   12f5c:	cmp	r2, #0
   12f60:	bne	139e0 <__assert_fail@plt+0x2b1c>
   12f64:	ldr	r1, [sp, #52]	; 0x34
   12f68:	b	12ec4 <__assert_fail@plt+0x2000>
   12f6c:	ldr	r6, [sp, #48]	; 0x30
   12f70:	ldr	r1, [sp, #52]	; 0x34
   12f74:	mov	r3, #116	; 0x74
   12f78:	b	12ec4 <__assert_fail@plt+0x2000>
   12f7c:	ldr	r6, [sp, #48]	; 0x30
   12f80:	ldr	r1, [sp, #52]	; 0x34
   12f84:	mov	r4, #11
   12f88:	mov	r3, #118	; 0x76
   12f8c:	b	12ec4 <__assert_fail@plt+0x2000>
   12f90:	ldr	r6, [sp, #48]	; 0x30
   12f94:	ldr	r1, [sp, #52]	; 0x34
   12f98:	mov	r4, #8
   12f9c:	mov	r3, #98	; 0x62
   12fa0:	b	12ec4 <__assert_fail@plt+0x2000>
   12fa4:	ldr	r6, [sp, #48]	; 0x30
   12fa8:	ldr	r1, [sp, #52]	; 0x34
   12fac:	mov	r4, #7
   12fb0:	mov	r3, #97	; 0x61
   12fb4:	b	12ec4 <__assert_fail@plt+0x2000>
   12fb8:	ldr	r3, [sp, #56]	; 0x38
   12fbc:	ldr	r6, [sp, #48]	; 0x30
   12fc0:	cmp	r3, #0
   12fc4:	beq	13488 <__assert_fail@plt+0x25c4>
   12fc8:	ldr	r3, [sp, #40]	; 0x28
   12fcc:	cmp	r3, #0
   12fd0:	bne	13abc <__assert_fail@plt+0x2bf8>
   12fd4:	ldr	r3, [sp, #36]	; 0x24
   12fd8:	ldr	r2, [sp, #52]	; 0x34
   12fdc:	eor	r3, r3, #1
   12fe0:	ands	r3, r2, r3
   12fe4:	moveq	r2, r8
   12fe8:	beq	13020 <__assert_fail@plt+0x215c>
   12fec:	cmp	fp, r8
   12ff0:	movhi	r2, #39	; 0x27
   12ff4:	strbhi	r2, [r9, r8]
   12ff8:	add	r2, r8, #1
   12ffc:	cmp	fp, r2
   13000:	movhi	r1, #36	; 0x24
   13004:	strbhi	r1, [r9, r2]
   13008:	add	r2, r8, #2
   1300c:	cmp	fp, r2
   13010:	movhi	r1, #39	; 0x27
   13014:	strbhi	r1, [r9, r2]
   13018:	add	r2, r8, #3
   1301c:	str	r3, [sp, #36]	; 0x24
   13020:	cmp	fp, r2
   13024:	movhi	r3, #92	; 0x5c
   13028:	strbhi	r3, [r9, r2]
   1302c:	ldr	r3, [sp, #92]	; 0x5c
   13030:	add	r8, r2, #1
   13034:	cmp	r3, #0
   13038:	beq	139bc <__assert_fail@plt+0x2af8>
   1303c:	ldr	r1, [sp, #24]
   13040:	add	r3, sl, #1
   13044:	cmp	r1, r3
   13048:	bls	13080 <__assert_fail@plt+0x21bc>
   1304c:	ldr	r1, [sp, #44]	; 0x2c
   13050:	ldrb	r3, [r1, r3]
   13054:	sub	r3, r3, #48	; 0x30
   13058:	cmp	r3, #9
   1305c:	bhi	13080 <__assert_fail@plt+0x21bc>
   13060:	cmp	fp, r8
   13064:	movhi	r3, #48	; 0x30
   13068:	strbhi	r3, [r9, r8]
   1306c:	add	r3, r2, #2
   13070:	cmp	fp, r3
   13074:	add	r8, r2, #3
   13078:	movhi	r1, #48	; 0x30
   1307c:	strbhi	r1, [r9, r3]
   13080:	ldr	r3, [sp, #40]	; 0x28
   13084:	ldr	r1, [sp, #52]	; 0x34
   13088:	mov	r7, r3
   1308c:	str	r3, [sp, #32]
   13090:	mov	r4, #48	; 0x30
   13094:	b	12ce4 <__assert_fail@plt+0x1e20>
   13098:	ldr	r6, [sp, #48]	; 0x30
   1309c:	cmp	sl, #0
   130a0:	streq	r7, [sp, #32]
   130a4:	beq	130c4 <__assert_fail@plt+0x2200>
   130a8:	mov	r3, #0
   130ac:	ldr	r1, [sp, #52]	; 0x34
   130b0:	str	r3, [sp, #32]
   130b4:	b	12ce4 <__assert_fail@plt+0x1e20>
   130b8:	ldr	r6, [sp, #48]	; 0x30
   130bc:	mov	r3, #0
   130c0:	str	r3, [sp, #32]
   130c4:	ldr	r3, [sp, #64]	; 0x40
   130c8:	cmp	r3, #0
   130cc:	bne	13848 <__assert_fail@plt+0x2984>
   130d0:	ldr	r1, [sp, #52]	; 0x34
   130d4:	b	12ce4 <__assert_fail@plt+0x1e20>
   130d8:	ldr	r3, [sp, #48]	; 0x30
   130dc:	mov	r6, r3
   130e0:	str	r3, [sp, #32]
   130e4:	b	130c4 <__assert_fail@plt+0x2200>
   130e8:	ldr	r6, [sp, #48]	; 0x30
   130ec:	mov	r4, #13
   130f0:	mov	r3, #114	; 0x72
   130f4:	b	12f58 <__assert_fail@plt+0x2094>
   130f8:	ldr	r3, [sp, #44]	; 0x2c
   130fc:	add	r5, r3, sl
   13100:	ldrb	r4, [r5]
   13104:	cmp	r4, #126	; 0x7e
   13108:	ldrls	pc, [pc, r4, lsl #2]
   1310c:	b	134a8 <__assert_fail@plt+0x25e4>
   13110:	andeq	r3, r1, r8, ror r4
   13114:	andeq	r3, r1, r8, lsr #9
   13118:	andeq	r3, r1, r8, lsr #9
   1311c:	andeq	r3, r1, r8, lsr #9
   13120:	andeq	r3, r1, r8, lsr #9
   13124:	andeq	r3, r1, r8, lsr #9
   13128:	andeq	r3, r1, r8, lsr #9
   1312c:	andeq	r3, r1, r0, ror r4
   13130:	andeq	r3, r1, r8, ror #8
   13134:	andeq	r3, r1, ip, asr r4
   13138:	andeq	r3, r1, r4, asr r4
   1313c:	andeq	r3, r1, ip, asr #8
   13140:	andeq	r3, r1, r4, asr #8
   13144:	andeq	r3, r1, ip, lsr r4
   13148:	andeq	r3, r1, r8, lsr #9
   1314c:	andeq	r3, r1, r8, lsr #9
   13150:	andeq	r3, r1, r8, lsr #9
   13154:	andeq	r3, r1, r8, lsr #9
   13158:	andeq	r3, r1, r8, lsr #9
   1315c:	andeq	r3, r1, r8, lsr #9
   13160:	andeq	r3, r1, r8, lsr #9
   13164:	andeq	r3, r1, r8, lsr #9
   13168:	andeq	r3, r1, r8, lsr #9
   1316c:	andeq	r3, r1, r8, lsr #9
   13170:	andeq	r3, r1, r8, lsr #9
   13174:	andeq	r3, r1, r8, lsr #9
   13178:	andeq	r3, r1, r8, lsr #9
   1317c:	andeq	r3, r1, r8, lsr #9
   13180:	andeq	r3, r1, r8, lsr #9
   13184:	andeq	r3, r1, r8, lsr #9
   13188:	andeq	r3, r1, r8, lsr #9
   1318c:	andeq	r3, r1, r8, lsr #9
   13190:	andeq	r3, r1, r0, lsr r4
   13194:	andeq	r3, r1, r8, lsr #8
   13198:	andeq	r3, r1, r8, lsr #8
   1319c:	andeq	r3, r1, r0, lsr #8
   131a0:	andeq	r3, r1, r8, lsr #8
   131a4:	andeq	r3, r1, r8, lsl r4
   131a8:	andeq	r3, r1, r8, lsr #8
   131ac:	andeq	r3, r1, ip, lsl #7
   131b0:	andeq	r3, r1, r8, lsr #8
   131b4:	andeq	r3, r1, r8, lsr #8
   131b8:	andeq	r3, r1, r8, lsr #8
   131bc:	andeq	r3, r1, r8, lsl r4
   131c0:	andeq	r3, r1, r8, lsl r4
   131c4:	andeq	r3, r1, r8, lsl r4
   131c8:	andeq	r3, r1, r8, lsl r4
   131cc:	andeq	r3, r1, r8, lsl r4
   131d0:	andeq	r3, r1, r8, lsl r4
   131d4:	andeq	r3, r1, r8, lsl r4
   131d8:	andeq	r3, r1, r8, lsl r4
   131dc:	andeq	r3, r1, r8, lsl r4
   131e0:	andeq	r3, r1, r8, lsl r4
   131e4:	andeq	r3, r1, r8, lsl r4
   131e8:	andeq	r3, r1, r8, lsl r4
   131ec:	andeq	r3, r1, r8, lsl r4
   131f0:	andeq	r3, r1, r8, lsl r4
   131f4:	andeq	r3, r1, r8, lsl r4
   131f8:	andeq	r3, r1, r8, lsl r4
   131fc:	andeq	r3, r1, r8, lsr #8
   13200:	andeq	r3, r1, r8, lsr #8
   13204:	andeq	r3, r1, r8, lsr #8
   13208:	andeq	r3, r1, r8, lsr #8
   1320c:	andeq	r3, r1, r0, ror #6
   13210:	andeq	r3, r1, r8, lsr #9
   13214:	andeq	r3, r1, r8, lsl r4
   13218:	andeq	r3, r1, r8, lsl r4
   1321c:	andeq	r3, r1, r8, lsl r4
   13220:	andeq	r3, r1, r8, lsl r4
   13224:	andeq	r3, r1, r8, lsl r4
   13228:	andeq	r3, r1, r8, lsl r4
   1322c:	andeq	r3, r1, r8, lsl r4
   13230:	andeq	r3, r1, r8, lsl r4
   13234:	andeq	r3, r1, r8, lsl r4
   13238:	andeq	r3, r1, r8, lsl r4
   1323c:	andeq	r3, r1, r8, lsl r4
   13240:	andeq	r3, r1, r8, lsl r4
   13244:	andeq	r3, r1, r8, lsl r4
   13248:	andeq	r3, r1, r8, lsl r4
   1324c:	andeq	r3, r1, r8, lsl r4
   13250:	andeq	r3, r1, r8, lsl r4
   13254:	andeq	r3, r1, r8, lsl r4
   13258:	andeq	r3, r1, r8, lsl r4
   1325c:	andeq	r3, r1, r8, lsl r4
   13260:	andeq	r3, r1, r8, lsl r4
   13264:	andeq	r3, r1, r8, lsl r4
   13268:	andeq	r3, r1, r8, lsl r4
   1326c:	andeq	r3, r1, r8, lsl r4
   13270:	andeq	r3, r1, r8, lsl r4
   13274:	andeq	r3, r1, r8, lsl r4
   13278:	andeq	r3, r1, r8, lsl r4
   1327c:	andeq	r3, r1, r8, lsr #8
   13280:	andeq	r3, r1, r0, lsr r3
   13284:	andeq	r3, r1, r8, lsl r4
   13288:	andeq	r3, r1, r8, lsr #8
   1328c:	andeq	r3, r1, r8, lsl r4
   13290:	andeq	r3, r1, r8, lsr #8
   13294:	andeq	r3, r1, r8, lsl r4
   13298:	andeq	r3, r1, r8, lsl r4
   1329c:	andeq	r3, r1, r8, lsl r4
   132a0:	andeq	r3, r1, r8, lsl r4
   132a4:	andeq	r3, r1, r8, lsl r4
   132a8:	andeq	r3, r1, r8, lsl r4
   132ac:	andeq	r3, r1, r8, lsl r4
   132b0:	andeq	r3, r1, r8, lsl r4
   132b4:	andeq	r3, r1, r8, lsl r4
   132b8:	andeq	r3, r1, r8, lsl r4
   132bc:	andeq	r3, r1, r8, lsl r4
   132c0:	andeq	r3, r1, r8, lsl r4
   132c4:	andeq	r3, r1, r8, lsl r4
   132c8:	andeq	r3, r1, r8, lsl r4
   132cc:	andeq	r3, r1, r8, lsl r4
   132d0:	andeq	r3, r1, r8, lsl r4
   132d4:	andeq	r3, r1, r8, lsl r4
   132d8:	andeq	r3, r1, r8, lsl r4
   132dc:	andeq	r3, r1, r8, lsl r4
   132e0:	andeq	r3, r1, r8, lsl r4
   132e4:	andeq	r3, r1, r8, lsl r4
   132e8:	andeq	r3, r1, r8, lsl r4
   132ec:	andeq	r3, r1, r8, lsl r4
   132f0:	andeq	r3, r1, r8, lsl r4
   132f4:	andeq	r3, r1, r8, lsl r4
   132f8:	andeq	r3, r1, r8, lsl r4
   132fc:	andeq	r3, r1, ip, lsl #6
   13300:	andeq	r3, r1, r8, lsr #8
   13304:	andeq	r3, r1, ip, lsl #6
   13308:	andeq	r3, r1, r0, lsr #8
   1330c:	ldr	r3, [sp, #24]
   13310:	mov	r6, #0
   13314:	cmn	r3, #1
   13318:	bne	12cc4 <__assert_fail@plt+0x1e00>
   1331c:	ldr	r3, [sp, #44]	; 0x2c
   13320:	ldrb	r3, [r3, #1]
   13324:	adds	r3, r3, #0
   13328:	movne	r3, #1
   1332c:	b	12ccc <__assert_fail@plt+0x1e08>
   13330:	ldr	r3, [sp, #176]	; 0xb0
   13334:	mov	r6, #0
   13338:	cmp	r3, #2
   1333c:	bne	12e0c <__assert_fail@plt+0x1f48>
   13340:	ldr	r3, [sp, #64]	; 0x40
   13344:	cmp	r3, #0
   13348:	bne	13b80 <__assert_fail@plt+0x2cbc>
   1334c:	add	sl, sl, #1
   13350:	ldr	r6, [sp, #36]	; 0x24
   13354:	str	r3, [sp, #32]
   13358:	mov	r4, #92	; 0x5c
   1335c:	b	12d18 <__assert_fail@plt+0x1e54>
   13360:	ldr	r3, [sp, #176]	; 0xb0
   13364:	mov	r6, #0
   13368:	cmp	r3, #2
   1336c:	bne	12e40 <__assert_fail@plt+0x1f7c>
   13370:	ldr	r3, [sp, #40]	; 0x28
   13374:	cmp	r3, #0
   13378:	bne	1365c <__assert_fail@plt+0x2798>
   1337c:	mov	r1, r7
   13380:	str	r3, [sp, #32]
   13384:	mov	r4, #63	; 0x3f
   13388:	b	12ce4 <__assert_fail@plt+0x1e20>
   1338c:	ldr	r3, [sp, #176]	; 0xb0
   13390:	mov	r6, #0
   13394:	cmp	r3, #2
   13398:	bne	12e90 <__assert_fail@plt+0x1fcc>
   1339c:	ldr	r3, [sp, #64]	; 0x40
   133a0:	cmp	r3, #0
   133a4:	bne	13b80 <__assert_fail@plt+0x2cbc>
   133a8:	ldr	r2, [sp, #84]	; 0x54
   133ac:	adds	r3, fp, #0
   133b0:	movne	r3, #1
   133b4:	cmp	r2, #0
   133b8:	movne	r3, #0
   133bc:	cmp	r3, #0
   133c0:	strne	fp, [sp, #84]	; 0x54
   133c4:	movne	fp, #0
   133c8:	bne	133f8 <__assert_fail@plt+0x2534>
   133cc:	cmp	fp, r8
   133d0:	movhi	r3, #39	; 0x27
   133d4:	strbhi	r3, [r9, r8]
   133d8:	add	r3, r8, #1
   133dc:	cmp	fp, r3
   133e0:	movhi	r2, #92	; 0x5c
   133e4:	strbhi	r2, [r9, r3]
   133e8:	add	r3, r8, #2
   133ec:	cmp	fp, r3
   133f0:	movhi	r2, #39	; 0x27
   133f4:	strbhi	r2, [r9, r3]
   133f8:	ldr	r3, [sp, #64]	; 0x40
   133fc:	add	r8, r8, #3
   13400:	mov	r1, r7
   13404:	str	r7, [sp, #32]
   13408:	str	r7, [sp, #76]	; 0x4c
   1340c:	str	r3, [sp, #36]	; 0x24
   13410:	mov	r4, #39	; 0x27
   13414:	b	12ce4 <__assert_fail@plt+0x1e20>
   13418:	mov	r6, #0
   1341c:	b	12ea8 <__assert_fail@plt+0x1fe4>
   13420:	mov	r6, #0
   13424:	b	1309c <__assert_fail@plt+0x21d8>
   13428:	mov	r6, #0
   1342c:	b	130bc <__assert_fail@plt+0x21f8>
   13430:	str	r7, [sp, #32]
   13434:	mov	r6, #0
   13438:	b	130c4 <__assert_fail@plt+0x2200>
   1343c:	mov	r6, #0
   13440:	b	130ec <__assert_fail@plt+0x2228>
   13444:	mov	r6, #0
   13448:	b	12eb8 <__assert_fail@plt+0x1ff4>
   1344c:	mov	r6, #0
   13450:	b	12f80 <__assert_fail@plt+0x20bc>
   13454:	mov	r6, #0
   13458:	b	12f50 <__assert_fail@plt+0x208c>
   1345c:	mov	r6, #0
   13460:	mov	r3, #116	; 0x74
   13464:	b	12f58 <__assert_fail@plt+0x2094>
   13468:	mov	r6, #0
   1346c:	b	12f94 <__assert_fail@plt+0x20d0>
   13470:	mov	r6, #0
   13474:	b	12fa8 <__assert_fail@plt+0x20e4>
   13478:	ldr	r3, [sp, #56]	; 0x38
   1347c:	mov	r6, #0
   13480:	cmp	r3, #0
   13484:	bne	12fc8 <__assert_fail@plt+0x2104>
   13488:	ldr	r3, [sp, #96]	; 0x60
   1348c:	cmp	r3, #0
   13490:	addne	sl, sl, #1
   13494:	bne	1283c <__assert_fail@plt+0x1978>
   13498:	ldr	r1, [sp, #52]	; 0x34
   1349c:	str	r3, [sp, #32]
   134a0:	mov	r4, r3
   134a4:	b	12ce4 <__assert_fail@plt+0x1e20>
   134a8:	mov	r6, #0
   134ac:	ldr	r3, [sp, #80]	; 0x50
   134b0:	cmp	r3, #1
   134b4:	bne	136a4 <__assert_fail@plt+0x27e0>
   134b8:	bl	10dbc <__ctype_b_loc@plt>
   134bc:	ldr	r2, [sp, #80]	; 0x50
   134c0:	sxth	r3, r4
   134c4:	mov	r1, r2
   134c8:	lsl	r3, r3, #1
   134cc:	ldr	r2, [r0]
   134d0:	ldrh	r3, [r2, r3]
   134d4:	and	r3, r3, #16384	; 0x4000
   134d8:	cmp	r3, #0
   134dc:	movne	r3, #1
   134e0:	moveq	r3, #0
   134e4:	str	r3, [sp, #32]
   134e8:	moveq	r3, #1
   134ec:	movne	r3, #0
   134f0:	ldr	r2, [sp, #56]	; 0x38
   134f4:	and	r3, r3, r2
   134f8:	ands	r3, r3, #255	; 0xff
   134fc:	beq	130d0 <__assert_fail@plt+0x220c>
   13500:	add	r1, sl, r1
   13504:	mov	r0, #0
   13508:	ldr	r7, [sp, #40]	; 0x28
   1350c:	ldr	r2, [sp, #36]	; 0x24
   13510:	ldr	lr, [sp, #52]	; 0x34
   13514:	b	135c4 <__assert_fail@plt+0x2700>
   13518:	cmp	r7, #0
   1351c:	bne	13918 <__assert_fail@plt+0x2a54>
   13520:	eor	r0, r2, #1
   13524:	ands	r0, lr, r0
   13528:	beq	13560 <__assert_fail@plt+0x269c>
   1352c:	cmp	fp, r8
   13530:	movhi	r2, #39	; 0x27
   13534:	strbhi	r2, [r9, r8]
   13538:	add	r2, r8, #1
   1353c:	cmp	fp, r2
   13540:	movhi	ip, #36	; 0x24
   13544:	strbhi	ip, [r9, r2]
   13548:	add	r2, r8, #2
   1354c:	cmp	fp, r2
   13550:	movhi	ip, #39	; 0x27
   13554:	strbhi	ip, [r9, r2]
   13558:	add	r8, r8, #3
   1355c:	mov	r2, r0
   13560:	cmp	fp, r8
   13564:	movhi	r0, #92	; 0x5c
   13568:	strbhi	r0, [r9, r8]
   1356c:	add	r0, r8, #1
   13570:	cmp	fp, r0
   13574:	lsrhi	ip, r4, #6
   13578:	addhi	ip, ip, #48	; 0x30
   1357c:	strbhi	ip, [r9, r0]
   13580:	add	ip, r8, #2
   13584:	cmp	fp, ip
   13588:	lsrhi	r0, r4, #3
   1358c:	andhi	r0, r0, #7
   13590:	addhi	r0, r0, #48	; 0x30
   13594:	add	sl, sl, #1
   13598:	strbhi	r0, [r9, ip]
   1359c:	and	r4, r4, #7
   135a0:	cmp	sl, r1
   135a4:	add	r4, r4, #48	; 0x30
   135a8:	add	r8, r8, #3
   135ac:	bcs	13930 <__assert_fail@plt+0x2a6c>
   135b0:	mov	r0, r3
   135b4:	cmp	fp, r8
   135b8:	strbhi	r4, [r9, r8]
   135bc:	ldrb	r4, [r5, #1]!
   135c0:	add	r8, r8, #1
   135c4:	cmp	r3, #0
   135c8:	bne	13518 <__assert_fail@plt+0x2654>
   135cc:	cmp	r6, #0
   135d0:	bne	13674 <__assert_fail@plt+0x27b0>
   135d4:	eor	r6, r0, #1
   135d8:	and	r6, r6, r2
   135dc:	add	sl, sl, #1
   135e0:	cmp	r1, sl
   135e4:	uxtb	r6, r6
   135e8:	bls	1369c <__assert_fail@plt+0x27d8>
   135ec:	cmp	r6, #0
   135f0:	beq	135b4 <__assert_fail@plt+0x26f0>
   135f4:	cmp	fp, r8
   135f8:	movhi	r2, #39	; 0x27
   135fc:	strbhi	r2, [r9, r8]
   13600:	add	r2, r8, #1
   13604:	cmp	fp, r2
   13608:	movhi	ip, #39	; 0x27
   1360c:	strbhi	ip, [r9, r2]
   13610:	add	r8, r8, #2
   13614:	mov	r6, r3
   13618:	mov	r2, r3
   1361c:	b	135b4 <__assert_fail@plt+0x26f0>
   13620:	ldr	r3, [sp, #184]	; 0xb8
   13624:	cmp	r3, #0
   13628:	beq	12d00 <__assert_fail@plt+0x1e3c>
   1362c:	lsr	r2, r4, #5
   13630:	mov	r0, r3
   13634:	uxtb	r2, r2
   13638:	and	r3, r4, #31
   1363c:	ldr	r2, [r0, r2, lsl #2]
   13640:	lsr	r3, r2, r3
   13644:	tst	r3, #1
   13648:	beq	12d00 <__assert_fail@plt+0x1e3c>
   1364c:	ldr	r3, [sp, #40]	; 0x28
   13650:	cmp	r3, #0
   13654:	beq	12eec <__assert_fail@plt+0x2028>
   13658:	mov	r3, r1
   1365c:	str	r3, [sp, #64]	; 0x40
   13660:	mov	sl, r9
   13664:	ldr	r3, [sp, #56]	; 0x38
   13668:	mov	r9, fp
   1366c:	ldr	r2, [sp, #64]	; 0x40
   13670:	b	13860 <__assert_fail@plt+0x299c>
   13674:	cmp	fp, r8
   13678:	eor	r6, r0, #1
   1367c:	movhi	ip, #92	; 0x5c
   13680:	and	r6, r6, r2
   13684:	add	sl, sl, #1
   13688:	strbhi	ip, [r9, r8]
   1368c:	cmp	r1, sl
   13690:	add	r8, r8, #1
   13694:	uxtb	r6, r6
   13698:	bhi	135ec <__assert_fail@plt+0x2728>
   1369c:	str	r2, [sp, #36]	; 0x24
   136a0:	b	12d18 <__assert_fail@plt+0x1e54>
   136a4:	ldr	r3, [sp, #24]
   136a8:	cmn	r3, #1
   136ac:	mov	r3, #0
   136b0:	str	r3, [sp, #128]	; 0x80
   136b4:	str	r3, [sp, #132]	; 0x84
   136b8:	beq	139ac <__assert_fail@plt+0x2ae8>
   136bc:	mov	r2, r7
   136c0:	mov	r3, #0
   136c4:	str	r7, [sp, #104]	; 0x68
   136c8:	str	r5, [sp, #116]	; 0x74
   136cc:	mov	r7, r3
   136d0:	mov	r5, r2
   136d4:	str	r4, [sp, #32]
   136d8:	str	r6, [sp, #108]	; 0x6c
   136dc:	str	r8, [sp, #112]	; 0x70
   136e0:	ldr	r3, [sp, #44]	; 0x2c
   136e4:	add	r6, sl, r7
   136e8:	add	r4, r3, r6
   136ec:	ldr	r3, [sp, #24]
   136f0:	mov	r1, r4
   136f4:	sub	r2, r3, r6
   136f8:	add	r0, sp, #124	; 0x7c
   136fc:	add	r3, sp, #128	; 0x80
   13700:	bl	177cc <__assert_fail@plt+0x6908>
   13704:	subs	r8, r0, #0
   13708:	beq	13a90 <__assert_fail@plt+0x2bcc>
   1370c:	cmn	r8, #1
   13710:	beq	13a68 <__assert_fail@plt+0x2ba4>
   13714:	cmn	r8, #2
   13718:	beq	13a00 <__assert_fail@plt+0x2b3c>
   1371c:	ldr	r3, [sp, #64]	; 0x40
   13720:	cmp	r3, #0
   13724:	beq	137e4 <__assert_fail@plt+0x2920>
   13728:	cmp	r8, #1
   1372c:	beq	137e4 <__assert_fail@plt+0x2920>
   13730:	sub	r3, r8, #1
   13734:	add	r6, r3, r6
   13738:	ldr	r3, [sp, #44]	; 0x2c
   1373c:	add	r6, r3, r6
   13740:	ldrb	r3, [r4, #1]!
   13744:	sub	r3, r3, #91	; 0x5b
   13748:	cmp	r3, #33	; 0x21
   1374c:	ldrls	pc, [pc, r3, lsl #2]
   13750:	b	137dc <__assert_fail@plt+0x2918>
   13754:	andeq	r3, r1, r8, asr #16
   13758:	andeq	r3, r1, r8, asr #16
   1375c:	ldrdeq	r3, [r1], -ip
   13760:	andeq	r3, r1, r8, asr #16
   13764:	ldrdeq	r3, [r1], -ip
   13768:	andeq	r3, r1, r8, asr #16
   1376c:	ldrdeq	r3, [r1], -ip
   13770:	ldrdeq	r3, [r1], -ip
   13774:	ldrdeq	r3, [r1], -ip
   13778:	ldrdeq	r3, [r1], -ip
   1377c:	ldrdeq	r3, [r1], -ip
   13780:	ldrdeq	r3, [r1], -ip
   13784:	ldrdeq	r3, [r1], -ip
   13788:	ldrdeq	r3, [r1], -ip
   1378c:	ldrdeq	r3, [r1], -ip
   13790:	ldrdeq	r3, [r1], -ip
   13794:	ldrdeq	r3, [r1], -ip
   13798:	ldrdeq	r3, [r1], -ip
   1379c:	ldrdeq	r3, [r1], -ip
   137a0:	ldrdeq	r3, [r1], -ip
   137a4:	ldrdeq	r3, [r1], -ip
   137a8:	ldrdeq	r3, [r1], -ip
   137ac:	ldrdeq	r3, [r1], -ip
   137b0:	ldrdeq	r3, [r1], -ip
   137b4:	ldrdeq	r3, [r1], -ip
   137b8:	ldrdeq	r3, [r1], -ip
   137bc:	ldrdeq	r3, [r1], -ip
   137c0:	ldrdeq	r3, [r1], -ip
   137c4:	ldrdeq	r3, [r1], -ip
   137c8:	ldrdeq	r3, [r1], -ip
   137cc:	ldrdeq	r3, [r1], -ip
   137d0:	ldrdeq	r3, [r1], -ip
   137d4:	ldrdeq	r3, [r1], -ip
   137d8:	andeq	r3, r1, r8, asr #16
   137dc:	cmp	r6, r4
   137e0:	bne	13740 <__assert_fail@plt+0x287c>
   137e4:	ldr	r0, [sp, #124]	; 0x7c
   137e8:	bl	10d2c <iswprint@plt>
   137ec:	add	r7, r7, r8
   137f0:	cmp	r0, #0
   137f4:	add	r0, sp, #128	; 0x80
   137f8:	moveq	r5, #0
   137fc:	bl	10cd8 <mbsinit@plt>
   13800:	cmp	r0, #0
   13804:	beq	136e0 <__assert_fail@plt+0x281c>
   13808:	ldr	r4, [sp, #32]
   1380c:	str	r5, [sp, #32]
   13810:	ldr	r3, [sp, #32]
   13814:	mov	r1, r7
   13818:	eor	r3, r3, #1
   1381c:	ldr	r7, [sp, #104]	; 0x68
   13820:	ldr	r6, [sp, #108]	; 0x6c
   13824:	ldr	r8, [sp, #112]	; 0x70
   13828:	ldr	r5, [sp, #116]	; 0x74
   1382c:	uxtb	r3, r3
   13830:	cmp	r1, #1
   13834:	bls	134f0 <__assert_fail@plt+0x262c>
   13838:	ldr	r2, [sp, #56]	; 0x38
   1383c:	and	r3, r3, r2
   13840:	uxtb	r3, r3
   13844:	b	13500 <__assert_fail@plt+0x263c>
   13848:	mov	r3, #2
   1384c:	str	r3, [sp, #176]	; 0xb0
   13850:	ldr	r2, [sp, #64]	; 0x40
   13854:	ldr	r3, [sp, #56]	; 0x38
   13858:	mov	sl, r9
   1385c:	mov	r9, fp
   13860:	and	r3, r3, r2
   13864:	tst	r3, #255	; 0xff
   13868:	ldr	r3, [sp, #176]	; 0xb0
   1386c:	movne	r3, #4
   13870:	str	r3, [sp, #176]	; 0xb0
   13874:	ldr	r3, [sp, #180]	; 0xb4
   13878:	mov	ip, #0
   1387c:	bic	r3, r3, #2
   13880:	str	r3, [sp, #4]
   13884:	ldr	r3, [sp, #192]	; 0xc0
   13888:	ldr	r2, [sp, #44]	; 0x2c
   1388c:	str	r3, [sp, #16]
   13890:	ldr	r3, [sp, #188]	; 0xbc
   13894:	mov	r1, r9
   13898:	str	r3, [sp, #12]
   1389c:	ldr	r3, [sp, #176]	; 0xb0
   138a0:	mov	r0, sl
   138a4:	str	r3, [sp]
   138a8:	str	ip, [sp, #8]
   138ac:	ldr	r3, [sp, #24]
   138b0:	bl	12710 <__assert_fail@plt+0x184c>
   138b4:	mov	fp, r0
   138b8:	mov	r0, fp
   138bc:	add	sp, sp, #140	; 0x8c
   138c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   138c4:	mov	r4, #92	; 0x5c
   138c8:	mov	r1, #0
   138cc:	mov	r3, r4
   138d0:	b	12ec4 <__assert_fail@plt+0x2000>
   138d4:	mov	r3, #0
   138d8:	ldr	r1, [sp, #52]	; 0x34
   138dc:	str	r3, [sp, #32]
   138e0:	mov	r4, #63	; 0x3f
   138e4:	b	12ce4 <__assert_fail@plt+0x1e20>
   138e8:	cmp	fp, #0
   138ec:	beq	13948 <__assert_fail@plt+0x2a84>
   138f0:	mov	r3, #39	; 0x27
   138f4:	strb	r3, [r9]
   138f8:	mov	r3, #0
   138fc:	str	r3, [sp, #40]	; 0x28
   13900:	mov	r3, #1
   13904:	str	r3, [sp, #68]	; 0x44
   13908:	ldr	r3, [pc, #448]	; 13ad0 <__assert_fail@plt+0x2c0c>
   1390c:	mov	r8, #1
   13910:	str	r3, [sp, #72]	; 0x48
   13914:	b	12af8 <__assert_fail@plt+0x1c34>
   13918:	ldr	r3, [sp, #40]	; 0x28
   1391c:	mov	sl, r9
   13920:	str	r3, [sp, #56]	; 0x38
   13924:	mov	r9, fp
   13928:	ldr	r2, [sp, #64]	; 0x40
   1392c:	b	13860 <__assert_fail@plt+0x299c>
   13930:	str	r2, [sp, #36]	; 0x24
   13934:	b	12d48 <__assert_fail@plt+0x1e84>
   13938:	mov	r1, #0
   1393c:	str	r3, [sp, #32]
   13940:	mov	r4, #63	; 0x3f
   13944:	b	12ce4 <__assert_fail@plt+0x1e20>
   13948:	ldr	r3, [pc, #384]	; 13ad0 <__assert_fail@plt+0x2c0c>
   1394c:	str	r3, [sp, #72]	; 0x48
   13950:	mov	r3, #0
   13954:	str	r3, [sp, #40]	; 0x28
   13958:	mov	r3, #1
   1395c:	str	r3, [sp, #68]	; 0x44
   13960:	mov	r8, r3
   13964:	b	12af8 <__assert_fail@plt+0x1c34>
   13968:	bl	10eac <abort@plt>
   1396c:	cmp	fp, #0
   13970:	beq	139d0 <__assert_fail@plt+0x2b0c>
   13974:	mov	r2, #1
   13978:	mov	r3, #34	; 0x22
   1397c:	strb	r3, [r9]
   13980:	mov	r8, r2
   13984:	mov	r3, r2
   13988:	str	r2, [sp, #68]	; 0x44
   1398c:	str	r3, [sp, #56]	; 0x38
   13990:	ldr	r3, [pc, #316]	; 13ad4 <__assert_fail@plt+0x2c10>
   13994:	ldr	r1, [sp, #56]	; 0x38
   13998:	str	r3, [sp, #72]	; 0x48
   1399c:	ldr	r2, [sp, #176]	; 0xb0
   139a0:	ldr	ip, [sp, #40]	; 0x28
   139a4:	ldr	lr, [sp, #176]	; 0xb0
   139a8:	b	127dc <__assert_fail@plt+0x1918>
   139ac:	ldr	r0, [sp, #44]	; 0x2c
   139b0:	bl	10dd4 <strlen@plt>
   139b4:	str	r0, [sp, #24]
   139b8:	b	136bc <__assert_fail@plt+0x27f8>
   139bc:	mov	r7, #0
   139c0:	ldr	r1, [sp, #52]	; 0x34
   139c4:	str	r3, [sp, #32]
   139c8:	mov	r4, #48	; 0x30
   139cc:	b	12ce4 <__assert_fail@plt+0x1e20>
   139d0:	mov	r3, #1
   139d4:	str	r3, [sp, #68]	; 0x44
   139d8:	mov	r8, r3
   139dc:	b	1398c <__assert_fail@plt+0x2ac8>
   139e0:	mov	r3, #2
   139e4:	mov	sl, r9
   139e8:	str	r3, [sp, #176]	; 0xb0
   139ec:	mov	r9, fp
   139f0:	ldr	r3, [sp, #56]	; 0x38
   139f4:	b	13860 <__assert_fail@plt+0x299c>
   139f8:	ldr	r6, [sp, #48]	; 0x30
   139fc:	b	134ac <__assert_fail@plt+0x25e8>
   13a00:	ldr	r0, [sp, #24]
   13a04:	mov	ip, r6
   13a08:	cmp	r0, ip
   13a0c:	mov	r1, r7
   13a10:	mov	r2, r4
   13a14:	ldr	r7, [sp, #104]	; 0x68
   13a18:	ldr	r4, [sp, #32]
   13a1c:	ldr	r6, [sp, #108]	; 0x6c
   13a20:	ldr	r8, [sp, #112]	; 0x70
   13a24:	ldr	r5, [sp, #116]	; 0x74
   13a28:	bls	13a58 <__assert_fail@plt+0x2b94>
   13a2c:	ldrb	r3, [r2]
   13a30:	cmp	r3, #0
   13a34:	bne	13a48 <__assert_fail@plt+0x2b84>
   13a38:	b	13b68 <__assert_fail@plt+0x2ca4>
   13a3c:	ldrb	r3, [r2, #1]!
   13a40:	cmp	r3, #0
   13a44:	beq	13b68 <__assert_fail@plt+0x2ca4>
   13a48:	add	r1, r1, #1
   13a4c:	add	r3, sl, r1
   13a50:	cmp	r0, r3
   13a54:	bhi	13a3c <__assert_fail@plt+0x2b78>
   13a58:	mov	r2, #0
   13a5c:	mov	r3, r7
   13a60:	str	r2, [sp, #32]
   13a64:	b	13830 <__assert_fail@plt+0x296c>
   13a68:	mov	r1, r7
   13a6c:	ldr	r7, [sp, #104]	; 0x68
   13a70:	mov	r2, #0
   13a74:	ldr	r4, [sp, #32]
   13a78:	ldr	r6, [sp, #108]	; 0x6c
   13a7c:	ldr	r8, [sp, #112]	; 0x70
   13a80:	ldr	r5, [sp, #116]	; 0x74
   13a84:	mov	r3, r7
   13a88:	str	r2, [sp, #32]
   13a8c:	b	13830 <__assert_fail@plt+0x296c>
   13a90:	mov	r3, r5
   13a94:	eor	r3, r3, #1
   13a98:	ldr	r4, [sp, #32]
   13a9c:	mov	r1, r7
   13aa0:	str	r5, [sp, #32]
   13aa4:	ldr	r7, [sp, #104]	; 0x68
   13aa8:	ldr	r6, [sp, #108]	; 0x6c
   13aac:	ldr	r8, [sp, #112]	; 0x70
   13ab0:	ldr	r5, [sp, #116]	; 0x74
   13ab4:	uxtb	r3, r3
   13ab8:	b	13830 <__assert_fail@plt+0x296c>
   13abc:	mov	sl, r9
   13ac0:	str	r3, [sp, #56]	; 0x38
   13ac4:	mov	r9, fp
   13ac8:	ldr	r2, [sp, #64]	; 0x40
   13acc:	b	13860 <__assert_fail@plt+0x299c>
   13ad0:	ldrdeq	r8, [r1], -r0
   13ad4:	andeq	r8, r1, ip, asr #17
   13ad8:	ldrdeq	r8, [r1], -r4
   13adc:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   13ae0:	ldr	r2, [sp, #44]	; 0x2c
   13ae4:	ldrb	r1, [r2, r3]
   13ae8:	sub	r2, r1, #33	; 0x21
   13aec:	uxtb	r2, r2
   13af0:	cmp	r2, #29
   13af4:	bhi	13b74 <__assert_fail@plt+0x2cb0>
   13af8:	ldr	r0, [pc, #-36]	; 13adc <__assert_fail@plt+0x2c18>
   13afc:	mov	ip, #1
   13b00:	ands	r2, r0, ip, lsl r2
   13b04:	beq	13b94 <__assert_fail@plt+0x2cd0>
   13b08:	ldr	r2, [sp, #40]	; 0x28
   13b0c:	cmp	r2, #0
   13b10:	bne	13c88 <__assert_fail@plt+0x2dc4>
   13b14:	add	r2, r8, #1
   13b18:	cmp	fp, r8
   13b1c:	strbhi	r4, [r9, r8]
   13b20:	cmp	fp, r2
   13b24:	movhi	r0, #34	; 0x22
   13b28:	strbhi	r0, [r9, r2]
   13b2c:	add	r2, r8, #2
   13b30:	cmp	fp, r2
   13b34:	movhi	r0, #34	; 0x22
   13b38:	strbhi	r0, [r9, r2]
   13b3c:	add	r2, r8, #3
   13b40:	cmp	fp, r2
   13b44:	mov	sl, r3
   13b48:	ldr	r3, [sp, #40]	; 0x28
   13b4c:	movhi	r0, #63	; 0x3f
   13b50:	mov	r4, r1
   13b54:	strbhi	r0, [r9, r2]
   13b58:	add	r8, r8, #4
   13b5c:	mov	r1, r3
   13b60:	str	r3, [sp, #32]
   13b64:	b	12ce4 <__assert_fail@plt+0x1e20>
   13b68:	str	r3, [sp, #32]
   13b6c:	mov	r3, r7
   13b70:	b	13830 <__assert_fail@plt+0x296c>
   13b74:	mov	r1, #0
   13b78:	str	r1, [sp, #32]
   13b7c:	b	12ce4 <__assert_fail@plt+0x1e20>
   13b80:	mov	sl, r9
   13b84:	ldr	r3, [sp, #56]	; 0x38
   13b88:	mov	r9, fp
   13b8c:	ldr	r2, [sp, #64]	; 0x40
   13b90:	b	13860 <__assert_fail@plt+0x299c>
   13b94:	str	r2, [sp, #32]
   13b98:	mov	r1, #0
   13b9c:	b	12ce4 <__assert_fail@plt+0x1e20>
   13ba0:	ldr	r2, [sp, #76]	; 0x4c
   13ba4:	mov	sl, r9
   13ba8:	mov	r9, fp
   13bac:	mov	fp, r8
   13bb0:	ldr	r1, [sp, #72]	; 0x48
   13bb4:	cmp	r1, #0
   13bb8:	moveq	r3, #0
   13bbc:	andne	r3, r2, #1
   13bc0:	cmp	r3, #0
   13bc4:	beq	13bf0 <__assert_fail@plt+0x2d2c>
   13bc8:	ldrb	r3, [r1]
   13bcc:	cmp	r3, #0
   13bd0:	beq	13bf0 <__assert_fail@plt+0x2d2c>
   13bd4:	mov	r2, r1
   13bd8:	cmp	r9, fp
   13bdc:	strbhi	r3, [sl, fp]
   13be0:	ldrb	r3, [r2, #1]!
   13be4:	add	fp, fp, #1
   13be8:	cmp	r3, #0
   13bec:	bne	13bd8 <__assert_fail@plt+0x2d14>
   13bf0:	cmp	r9, fp
   13bf4:	movhi	r3, #0
   13bf8:	strbhi	r3, [sl, fp]
   13bfc:	b	138b8 <__assert_fail@plt+0x29f4>
   13c00:	ldr	r3, [sp, #192]	; 0xc0
   13c04:	mov	ip, #5
   13c08:	str	r3, [sp, #16]
   13c0c:	ldr	r3, [sp, #188]	; 0xbc
   13c10:	ldr	r2, [sp, #44]	; 0x2c
   13c14:	str	r3, [sp, #12]
   13c18:	ldr	r3, [sp, #184]	; 0xb8
   13c1c:	ldr	r1, [sp, #84]	; 0x54
   13c20:	str	r3, [sp, #8]
   13c24:	ldr	r3, [sp, #180]	; 0xb4
   13c28:	mov	r0, r9
   13c2c:	str	r3, [sp, #4]
   13c30:	str	ip, [sp]
   13c34:	ldr	r3, [sp, #24]
   13c38:	bl	12710 <__assert_fail@plt+0x184c>
   13c3c:	mov	fp, r0
   13c40:	b	138b8 <__assert_fail@plt+0x29f4>
   13c44:	mov	sl, r9
   13c48:	mov	r9, fp
   13c4c:	mov	fp, r8
   13c50:	b	13bb0 <__assert_fail@plt+0x2cec>
   13c54:	ldr	r1, [sp, #176]	; 0xb0
   13c58:	bl	125f0 <__assert_fail@plt+0x172c>
   13c5c:	str	r0, [sp, #192]	; 0xc0
   13c60:	b	12bcc <__assert_fail@plt+0x1d08>
   13c64:	ldr	r1, [sp, #176]	; 0xb0
   13c68:	bl	125f0 <__assert_fail@plt+0x172c>
   13c6c:	str	r0, [sp, #188]	; 0xbc
   13c70:	b	12bac <__assert_fail@plt+0x1ce8>
   13c74:	mov	sl, r9
   13c78:	mov	r2, r3
   13c7c:	mov	r9, fp
   13c80:	mov	fp, r8
   13c84:	b	13bb0 <__assert_fail@plt+0x2cec>
   13c88:	mov	sl, r9
   13c8c:	mov	r9, fp
   13c90:	b	13874 <__assert_fail@plt+0x29b0>
   13c94:	push	{r4, r5, r6, lr}
   13c98:	mov	r5, r0
   13c9c:	bl	10de0 <__errno_location@plt>
   13ca0:	cmp	r5, #0
   13ca4:	mov	r1, #48	; 0x30
   13ca8:	mov	r4, r0
   13cac:	ldr	r0, [pc, #16]	; 13cc4 <__assert_fail@plt+0x2e00>
   13cb0:	ldr	r6, [r4]
   13cb4:	movne	r0, r5
   13cb8:	bl	17530 <__assert_fail@plt+0x666c>
   13cbc:	str	r6, [r4]
   13cc0:	pop	{r4, r5, r6, pc}
   13cc4:	andeq	r9, r2, r8, lsr #3
   13cc8:	ldr	r3, [pc, #12]	; 13cdc <__assert_fail@plt+0x2e18>
   13ccc:	cmp	r0, #0
   13cd0:	moveq	r0, r3
   13cd4:	ldr	r0, [r0]
   13cd8:	bx	lr
   13cdc:	andeq	r9, r2, r8, lsr #3
   13ce0:	ldr	r3, [pc, #12]	; 13cf4 <__assert_fail@plt+0x2e30>
   13ce4:	cmp	r0, #0
   13ce8:	moveq	r0, r3
   13cec:	str	r1, [r0]
   13cf0:	bx	lr
   13cf4:	andeq	r9, r2, r8, lsr #3
   13cf8:	ldr	r3, [pc, #52]	; 13d34 <__assert_fail@plt+0x2e70>
   13cfc:	cmp	r0, #0
   13d00:	moveq	r0, r3
   13d04:	add	r3, r0, #8
   13d08:	push	{lr}		; (str lr, [sp, #-4]!)
   13d0c:	lsr	lr, r1, #5
   13d10:	and	r1, r1, #31
   13d14:	ldr	ip, [r3, lr, lsl #2]
   13d18:	lsr	r0, ip, r1
   13d1c:	eor	r2, r2, r0
   13d20:	and	r2, r2, #1
   13d24:	and	r0, r0, #1
   13d28:	eor	r1, ip, r2, lsl r1
   13d2c:	str	r1, [r3, lr, lsl #2]
   13d30:	pop	{pc}		; (ldr pc, [sp], #4)
   13d34:	andeq	r9, r2, r8, lsr #3
   13d38:	ldr	r3, [pc, #16]	; 13d50 <__assert_fail@plt+0x2e8c>
   13d3c:	cmp	r0, #0
   13d40:	movne	r3, r0
   13d44:	ldr	r0, [r3, #4]
   13d48:	str	r1, [r3, #4]
   13d4c:	bx	lr
   13d50:	andeq	r9, r2, r8, lsr #3
   13d54:	ldr	r3, [pc, #44]	; 13d88 <__assert_fail@plt+0x2ec4>
   13d58:	cmp	r0, #0
   13d5c:	moveq	r0, r3
   13d60:	mov	ip, #10
   13d64:	cmp	r2, #0
   13d68:	cmpne	r1, #0
   13d6c:	str	ip, [r0]
   13d70:	beq	13d80 <__assert_fail@plt+0x2ebc>
   13d74:	str	r1, [r0, #40]	; 0x28
   13d78:	str	r2, [r0, #44]	; 0x2c
   13d7c:	bx	lr
   13d80:	push	{r4, lr}
   13d84:	bl	10eac <abort@plt>
   13d88:	andeq	r9, r2, r8, lsr #3
   13d8c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13d90:	sub	sp, sp, #24
   13d94:	ldr	ip, [pc, #108]	; 13e08 <__assert_fail@plt+0x2f44>
   13d98:	ldr	r4, [sp, #56]	; 0x38
   13d9c:	mov	r9, r2
   13da0:	cmp	r4, #0
   13da4:	moveq	r4, ip
   13da8:	mov	sl, r3
   13dac:	mov	r7, r0
   13db0:	mov	r8, r1
   13db4:	bl	10de0 <__errno_location@plt>
   13db8:	ldr	r3, [r4, #44]	; 0x2c
   13dbc:	mov	r1, r8
   13dc0:	ldr	r6, [r0]
   13dc4:	str	r3, [sp, #16]
   13dc8:	ldr	r2, [r4, #40]	; 0x28
   13dcc:	add	r3, r4, #8
   13dd0:	str	r3, [sp, #8]
   13dd4:	str	r2, [sp, #12]
   13dd8:	ldr	r2, [r4, #4]
   13ddc:	mov	r5, r0
   13de0:	str	r2, [sp, #4]
   13de4:	ldr	ip, [r4]
   13de8:	mov	r3, sl
   13dec:	mov	r2, r9
   13df0:	mov	r0, r7
   13df4:	str	ip, [sp]
   13df8:	bl	12710 <__assert_fail@plt+0x184c>
   13dfc:	str	r6, [r5]
   13e00:	add	sp, sp, #24
   13e04:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13e08:	andeq	r9, r2, r8, lsr #3
   13e0c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13e10:	cmp	r2, #0
   13e14:	sub	sp, sp, #36	; 0x24
   13e18:	ldr	r4, [pc, #164]	; 13ec4 <__assert_fail@plt+0x3000>
   13e1c:	mov	r8, r1
   13e20:	movne	r4, r2
   13e24:	mov	r7, r0
   13e28:	bl	10de0 <__errno_location@plt>
   13e2c:	ldr	r3, [r4, #44]	; 0x2c
   13e30:	ldr	r5, [r4, #4]
   13e34:	add	r9, r4, #8
   13e38:	orr	r5, r5, #1
   13e3c:	mov	r1, #0
   13e40:	mov	r2, r7
   13e44:	ldr	fp, [r0]
   13e48:	str	r3, [sp, #16]
   13e4c:	ldr	r3, [r4, #40]	; 0x28
   13e50:	stmib	sp, {r5, r9}
   13e54:	str	r3, [sp, #12]
   13e58:	ldr	r3, [r4]
   13e5c:	mov	r6, r0
   13e60:	str	r3, [sp]
   13e64:	mov	r0, r1
   13e68:	mov	r3, r8
   13e6c:	bl	12710 <__assert_fail@plt+0x184c>
   13e70:	add	r1, r0, #1
   13e74:	mov	r0, r1
   13e78:	str	r1, [sp, #28]
   13e7c:	bl	16fec <__assert_fail@plt+0x6128>
   13e80:	ldr	r3, [r4, #44]	; 0x2c
   13e84:	ldr	r1, [sp, #28]
   13e88:	str	r3, [sp, #16]
   13e8c:	ldr	r3, [r4, #40]	; 0x28
   13e90:	str	r5, [sp, #4]
   13e94:	str	r3, [sp, #12]
   13e98:	str	r9, [sp, #8]
   13e9c:	ldr	ip, [r4]
   13ea0:	mov	r3, r8
   13ea4:	mov	r2, r7
   13ea8:	str	ip, [sp]
   13eac:	mov	sl, r0
   13eb0:	bl	12710 <__assert_fail@plt+0x184c>
   13eb4:	mov	r0, sl
   13eb8:	str	fp, [r6]
   13ebc:	add	sp, sp, #36	; 0x24
   13ec0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ec4:	andeq	r9, r2, r8, lsr #3
   13ec8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13ecc:	cmp	r3, #0
   13ed0:	sub	sp, sp, #44	; 0x2c
   13ed4:	ldr	r4, [pc, #192]	; 13f9c <__assert_fail@plt+0x30d8>
   13ed8:	mov	r6, r2
   13edc:	movne	r4, r3
   13ee0:	mov	r9, r1
   13ee4:	mov	r8, r0
   13ee8:	bl	10de0 <__errno_location@plt>
   13eec:	ldr	r3, [r4, #44]	; 0x2c
   13ef0:	ldr	r5, [r4, #4]
   13ef4:	add	sl, r4, #8
   13ef8:	cmp	r6, #0
   13efc:	orreq	r5, r5, #1
   13f00:	mov	r1, #0
   13f04:	ldr	r2, [r0]
   13f08:	str	r3, [sp, #16]
   13f0c:	ldr	r3, [r4, #40]	; 0x28
   13f10:	stmib	sp, {r5, sl}
   13f14:	str	r3, [sp, #12]
   13f18:	ldr	r3, [r4]
   13f1c:	mov	r7, r0
   13f20:	str	r2, [sp, #28]
   13f24:	str	r3, [sp]
   13f28:	mov	r2, r8
   13f2c:	mov	r3, r9
   13f30:	mov	r0, r1
   13f34:	bl	12710 <__assert_fail@plt+0x184c>
   13f38:	add	r1, r0, #1
   13f3c:	mov	fp, r0
   13f40:	mov	r0, r1
   13f44:	str	r1, [sp, #36]	; 0x24
   13f48:	bl	16fec <__assert_fail@plt+0x6128>
   13f4c:	ldr	r3, [r4, #44]	; 0x2c
   13f50:	mov	r2, r8
   13f54:	str	r3, [sp, #16]
   13f58:	ldr	r3, [r4, #40]	; 0x28
   13f5c:	str	r5, [sp, #4]
   13f60:	str	r3, [sp, #12]
   13f64:	str	sl, [sp, #8]
   13f68:	ldr	ip, [r4]
   13f6c:	ldr	r1, [sp, #36]	; 0x24
   13f70:	mov	r3, r9
   13f74:	str	ip, [sp]
   13f78:	str	r0, [sp, #32]
   13f7c:	bl	12710 <__assert_fail@plt+0x184c>
   13f80:	ldr	r2, [sp, #28]
   13f84:	cmp	r6, #0
   13f88:	str	r2, [r7]
   13f8c:	ldr	r0, [sp, #32]
   13f90:	strne	fp, [r6]
   13f94:	add	sp, sp, #44	; 0x2c
   13f98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13f9c:	andeq	r9, r2, r8, lsr #3
   13fa0:	push	{r4, r5, r6, r7, r8, lr}
   13fa4:	ldr	r6, [pc, #116]	; 14020 <__assert_fail@plt+0x315c>
   13fa8:	ldr	r3, [r6, #4]
   13fac:	ldr	r7, [r6]
   13fb0:	cmp	r3, #1
   13fb4:	movgt	r5, r7
   13fb8:	movgt	r4, #1
   13fbc:	ble	13fdc <__assert_fail@plt+0x3118>
   13fc0:	ldr	r0, [r5, #12]
   13fc4:	bl	12444 <__assert_fail@plt+0x1580>
   13fc8:	ldr	r3, [r6, #4]
   13fcc:	add	r4, r4, #1
   13fd0:	cmp	r3, r4
   13fd4:	add	r5, r5, #8
   13fd8:	bgt	13fc0 <__assert_fail@plt+0x30fc>
   13fdc:	ldr	r0, [r7, #4]
   13fe0:	ldr	r4, [pc, #60]	; 14024 <__assert_fail@plt+0x3160>
   13fe4:	cmp	r0, r4
   13fe8:	beq	13ffc <__assert_fail@plt+0x3138>
   13fec:	bl	12444 <__assert_fail@plt+0x1580>
   13ff0:	mov	r3, #256	; 0x100
   13ff4:	str	r4, [r6, #12]
   13ff8:	str	r3, [r6, #8]
   13ffc:	ldr	r4, [pc, #36]	; 14028 <__assert_fail@plt+0x3164>
   14000:	cmp	r7, r4
   14004:	beq	14014 <__assert_fail@plt+0x3150>
   14008:	mov	r0, r7
   1400c:	bl	12444 <__assert_fail@plt+0x1580>
   14010:	str	r4, [r6]
   14014:	mov	r3, #1
   14018:	str	r3, [r6, #4]
   1401c:	pop	{r4, r5, r6, r7, r8, pc}
   14020:	strdeq	r9, [r2], -r4
   14024:	ldrdeq	r9, [r2], -r8
   14028:	strdeq	r9, [r2], -ip
   1402c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14030:	sub	sp, sp, #44	; 0x2c
   14034:	mov	r5, r0
   14038:	mov	sl, r1
   1403c:	bl	10de0 <__errno_location@plt>
   14040:	ldr	r4, [pc, #400]	; 141d8 <__assert_fail@plt+0x3314>
   14044:	cmn	r5, #-2147483647	; 0x80000001
   14048:	ldr	r6, [r4]
   1404c:	mov	r8, r0
   14050:	movne	r0, #0
   14054:	moveq	r0, #1
   14058:	ldr	r3, [r8]
   1405c:	orrs	r0, r0, r5, lsr #31
   14060:	str	r3, [sp, #24]
   14064:	bne	141d4 <__assert_fail@plt+0x3310>
   14068:	ldr	r2, [r4, #4]
   1406c:	cmp	r5, r2
   14070:	blt	140d0 <__assert_fail@plt+0x320c>
   14074:	add	r7, r4, #8
   14078:	cmp	r6, r7
   1407c:	str	r2, [sp, #36]	; 0x24
   14080:	beq	141a4 <__assert_fail@plt+0x32e0>
   14084:	mov	r3, #8
   14088:	sub	r2, r5, r2
   1408c:	mov	r0, r6
   14090:	str	r3, [sp]
   14094:	add	r2, r2, #1
   14098:	mvn	r3, #-2147483648	; 0x80000000
   1409c:	add	r1, sp, #36	; 0x24
   140a0:	bl	17208 <__assert_fail@plt+0x6344>
   140a4:	mov	r6, r0
   140a8:	str	r0, [r4]
   140ac:	ldr	r0, [r4, #4]
   140b0:	ldr	r2, [sp, #36]	; 0x24
   140b4:	mov	r1, #0
   140b8:	sub	r2, r2, r0
   140bc:	add	r0, r6, r0, lsl #3
   140c0:	lsl	r2, r2, #3
   140c4:	bl	10df8 <memset@plt>
   140c8:	ldr	r3, [sp, #36]	; 0x24
   140cc:	str	r3, [r4, #4]
   140d0:	ldr	r4, [pc, #260]	; 141dc <__assert_fail@plt+0x3318>
   140d4:	add	fp, r6, r5, lsl #3
   140d8:	ldr	r9, [r6, r5, lsl #3]
   140dc:	ldr	r0, [r4, #4]
   140e0:	ldr	r3, [r4]
   140e4:	ldr	r7, [fp, #4]
   140e8:	ldr	r1, [r4, #44]	; 0x2c
   140ec:	ldr	r2, [r4, #40]	; 0x28
   140f0:	orr	r0, r0, #1
   140f4:	str	r3, [sp]
   140f8:	add	r3, r4, #8
   140fc:	str	r0, [sp, #28]
   14100:	str	r0, [sp, #4]
   14104:	str	r1, [sp, #16]
   14108:	str	r2, [sp, #12]
   1410c:	str	r3, [sp, #8]
   14110:	mov	r0, r7
   14114:	mov	r1, r9
   14118:	mvn	r3, #0
   1411c:	mov	r2, sl
   14120:	bl	12710 <__assert_fail@plt+0x184c>
   14124:	cmp	r9, r0
   14128:	bhi	14190 <__assert_fail@plt+0x32cc>
   1412c:	add	r3, r4, #48	; 0x30
   14130:	add	r9, r0, #1
   14134:	cmp	r7, r3
   14138:	str	r9, [r6, r5, lsl #3]
   1413c:	beq	14148 <__assert_fail@plt+0x3284>
   14140:	mov	r0, r7
   14144:	bl	12444 <__assert_fail@plt+0x1580>
   14148:	mov	r0, r9
   1414c:	bl	16fec <__assert_fail@plt+0x6128>
   14150:	ldr	ip, [r4, #44]	; 0x2c
   14154:	ldr	r3, [r4]
   14158:	ldr	lr, [r4, #40]	; 0x28
   1415c:	ldr	r4, [pc, #124]	; 141e0 <__assert_fail@plt+0x331c>
   14160:	mov	r2, sl
   14164:	mov	r1, r9
   14168:	str	r0, [fp, #4]
   1416c:	str	r4, [sp, #8]
   14170:	ldr	r4, [sp, #28]
   14174:	str	r3, [sp]
   14178:	str	r4, [sp, #4]
   1417c:	str	ip, [sp, #16]
   14180:	str	lr, [sp, #12]
   14184:	mvn	r3, #0
   14188:	mov	r7, r0
   1418c:	bl	12710 <__assert_fail@plt+0x184c>
   14190:	ldr	r3, [sp, #24]
   14194:	mov	r0, r7
   14198:	str	r3, [r8]
   1419c:	add	sp, sp, #44	; 0x2c
   141a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   141a4:	mov	r3, #8
   141a8:	sub	r2, r5, r2
   141ac:	str	r3, [sp]
   141b0:	add	r1, sp, #36	; 0x24
   141b4:	add	r2, r2, #1
   141b8:	mvn	r3, #-2147483648	; 0x80000000
   141bc:	bl	17208 <__assert_fail@plt+0x6344>
   141c0:	mov	r6, r0
   141c4:	ldm	r7, {r0, r1}
   141c8:	str	r6, [r4]
   141cc:	stm	r6, {r0, r1}
   141d0:	b	140ac <__assert_fail@plt+0x31e8>
   141d4:	bl	10eac <abort@plt>
   141d8:	strdeq	r9, [r2], -r4
   141dc:	andeq	r9, r2, r8, lsr #3
   141e0:			; <UNDEFINED> instruction: 0x000291b0
   141e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   141e8:	sub	sp, sp, #52	; 0x34
   141ec:	mov	r5, r0
   141f0:	mov	sl, r1
   141f4:	mov	fp, r2
   141f8:	bl	10de0 <__errno_location@plt>
   141fc:	ldr	r4, [pc, #408]	; 1439c <__assert_fail@plt+0x34d8>
   14200:	cmn	r5, #-2147483647	; 0x80000001
   14204:	ldr	r6, [r4]
   14208:	mov	r8, r0
   1420c:	movne	r0, #0
   14210:	moveq	r0, #1
   14214:	ldr	r3, [r8]
   14218:	orrs	r0, r0, r5, lsr #31
   1421c:	str	r3, [sp, #28]
   14220:	bne	14398 <__assert_fail@plt+0x34d4>
   14224:	ldr	r2, [r4, #4]
   14228:	cmp	r5, r2
   1422c:	blt	1428c <__assert_fail@plt+0x33c8>
   14230:	add	r7, r4, #8
   14234:	cmp	r6, r7
   14238:	str	r2, [sp, #44]	; 0x2c
   1423c:	beq	14368 <__assert_fail@plt+0x34a4>
   14240:	mov	r3, #8
   14244:	sub	r2, r5, r2
   14248:	mov	r0, r6
   1424c:	str	r3, [sp]
   14250:	add	r2, r2, #1
   14254:	mvn	r3, #-2147483648	; 0x80000000
   14258:	add	r1, sp, #44	; 0x2c
   1425c:	bl	17208 <__assert_fail@plt+0x6344>
   14260:	mov	r6, r0
   14264:	str	r0, [r4]
   14268:	ldr	r0, [r4, #4]
   1426c:	ldr	r2, [sp, #44]	; 0x2c
   14270:	mov	r1, #0
   14274:	sub	r2, r2, r0
   14278:	add	r0, r6, r0, lsl #3
   1427c:	lsl	r2, r2, #3
   14280:	bl	10df8 <memset@plt>
   14284:	ldr	r3, [sp, #44]	; 0x2c
   14288:	str	r3, [r4, #4]
   1428c:	ldr	r4, [pc, #268]	; 143a0 <__assert_fail@plt+0x34dc>
   14290:	add	r3, r6, r5, lsl #3
   14294:	str	r3, [sp, #32]
   14298:	ldr	r7, [r3, #4]
   1429c:	ldr	r0, [r4, #4]
   142a0:	ldr	r3, [r4]
   142a4:	ldr	r9, [r6, r5, lsl #3]
   142a8:	ldr	r1, [r4, #44]	; 0x2c
   142ac:	ldr	r2, [r4, #40]	; 0x28
   142b0:	orr	r0, r0, #1
   142b4:	str	r3, [sp]
   142b8:	add	r3, r4, #8
   142bc:	str	r0, [sp, #36]	; 0x24
   142c0:	str	r0, [sp, #4]
   142c4:	str	r1, [sp, #16]
   142c8:	str	r2, [sp, #12]
   142cc:	str	r3, [sp, #8]
   142d0:	mov	r0, r7
   142d4:	mov	r1, r9
   142d8:	mov	r3, fp
   142dc:	mov	r2, sl
   142e0:	bl	12710 <__assert_fail@plt+0x184c>
   142e4:	cmp	r9, r0
   142e8:	bhi	14354 <__assert_fail@plt+0x3490>
   142ec:	add	r3, r4, #48	; 0x30
   142f0:	add	r9, r0, #1
   142f4:	cmp	r7, r3
   142f8:	str	r9, [r6, r5, lsl #3]
   142fc:	beq	14308 <__assert_fail@plt+0x3444>
   14300:	mov	r0, r7
   14304:	bl	12444 <__assert_fail@plt+0x1580>
   14308:	mov	r0, r9
   1430c:	bl	16fec <__assert_fail@plt+0x6128>
   14310:	ldr	ip, [sp, #32]
   14314:	ldr	lr, [r4, #44]	; 0x2c
   14318:	ldr	r5, [r4, #40]	; 0x28
   1431c:	mov	r3, fp
   14320:	mov	r2, sl
   14324:	mov	r1, r9
   14328:	str	r0, [ip, #4]
   1432c:	ldr	ip, [r4]
   14330:	ldr	r4, [pc, #108]	; 143a4 <__assert_fail@plt+0x34e0>
   14334:	str	lr, [sp, #16]
   14338:	str	r4, [sp, #8]
   1433c:	ldr	r4, [sp, #36]	; 0x24
   14340:	str	r5, [sp, #12]
   14344:	str	r4, [sp, #4]
   14348:	str	ip, [sp]
   1434c:	mov	r7, r0
   14350:	bl	12710 <__assert_fail@plt+0x184c>
   14354:	ldr	r3, [sp, #28]
   14358:	mov	r0, r7
   1435c:	str	r3, [r8]
   14360:	add	sp, sp, #52	; 0x34
   14364:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14368:	mov	r3, #8
   1436c:	sub	r2, r5, r2
   14370:	str	r3, [sp]
   14374:	add	r1, sp, #44	; 0x2c
   14378:	add	r2, r2, #1
   1437c:	mvn	r3, #-2147483648	; 0x80000000
   14380:	bl	17208 <__assert_fail@plt+0x6344>
   14384:	mov	r6, r0
   14388:	ldm	r7, {r0, r1}
   1438c:	str	r6, [r4]
   14390:	stm	r6, {r0, r1}
   14394:	b	14268 <__assert_fail@plt+0x33a4>
   14398:	bl	10eac <abort@plt>
   1439c:	strdeq	r9, [r2], -r4
   143a0:	andeq	r9, r2, r8, lsr #3
   143a4:			; <UNDEFINED> instruction: 0x000291b0
   143a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   143ac:	sub	sp, sp, #44	; 0x2c
   143b0:	mov	sl, r0
   143b4:	bl	10de0 <__errno_location@plt>
   143b8:	ldr	r4, [pc, #352]	; 14520 <__assert_fail@plt+0x365c>
   143bc:	ldr	r2, [r4, #4]
   143c0:	ldr	r5, [r4]
   143c4:	cmp	r2, #0
   143c8:	ldr	r3, [r0]
   143cc:	mov	r8, r0
   143d0:	str	r3, [sp, #28]
   143d4:	bgt	14430 <__assert_fail@plt+0x356c>
   143d8:	add	r6, r4, #8
   143dc:	cmp	r5, r6
   143e0:	str	r2, [sp, #36]	; 0x24
   143e4:	beq	144f0 <__assert_fail@plt+0x362c>
   143e8:	mov	r3, #8
   143ec:	mov	r0, r5
   143f0:	str	r3, [sp]
   143f4:	rsb	r2, r2, #1
   143f8:	mvn	r3, #-2147483648	; 0x80000000
   143fc:	add	r1, sp, #36	; 0x24
   14400:	bl	17208 <__assert_fail@plt+0x6344>
   14404:	mov	r5, r0
   14408:	str	r0, [r4]
   1440c:	ldr	r0, [r4, #4]
   14410:	ldr	r2, [sp, #36]	; 0x24
   14414:	mov	r1, #0
   14418:	sub	r2, r2, r0
   1441c:	add	r0, r5, r0, lsl #3
   14420:	lsl	r2, r2, #3
   14424:	bl	10df8 <memset@plt>
   14428:	ldr	r3, [sp, #36]	; 0x24
   1442c:	str	r3, [r4, #4]
   14430:	ldr	r4, [pc, #236]	; 14524 <__assert_fail@plt+0x3660>
   14434:	ldr	r9, [r5]
   14438:	ldr	r6, [r5, #4]
   1443c:	ldr	r7, [r4, #4]
   14440:	ldr	r1, [r4, #44]	; 0x2c
   14444:	ldr	r2, [r4, #40]	; 0x28
   14448:	ldr	r3, [r4]
   1444c:	orr	r7, r7, #1
   14450:	add	fp, r4, #8
   14454:	str	r1, [sp, #16]
   14458:	str	r2, [sp, #12]
   1445c:	str	r3, [sp]
   14460:	str	r7, [sp, #4]
   14464:	str	fp, [sp, #8]
   14468:	mov	r1, r9
   1446c:	mov	r0, r6
   14470:	mvn	r3, #0
   14474:	mov	r2, sl
   14478:	bl	12710 <__assert_fail@plt+0x184c>
   1447c:	cmp	r9, r0
   14480:	bhi	144dc <__assert_fail@plt+0x3618>
   14484:	add	r3, r4, #48	; 0x30
   14488:	add	r9, r0, #1
   1448c:	cmp	r6, r3
   14490:	str	r9, [r5]
   14494:	beq	144a0 <__assert_fail@plt+0x35dc>
   14498:	mov	r0, r6
   1449c:	bl	12444 <__assert_fail@plt+0x1580>
   144a0:	mov	r0, r9
   144a4:	bl	16fec <__assert_fail@plt+0x6128>
   144a8:	ldr	ip, [r4, #44]	; 0x2c
   144ac:	ldr	r3, [r4]
   144b0:	ldr	lr, [r4, #40]	; 0x28
   144b4:	mov	r2, sl
   144b8:	mov	r1, r9
   144bc:	str	r0, [r5, #4]
   144c0:	str	r3, [sp]
   144c4:	stmib	sp, {r7, fp}
   144c8:	str	ip, [sp, #16]
   144cc:	str	lr, [sp, #12]
   144d0:	mvn	r3, #0
   144d4:	mov	r6, r0
   144d8:	bl	12710 <__assert_fail@plt+0x184c>
   144dc:	ldr	r3, [sp, #28]
   144e0:	mov	r0, r6
   144e4:	str	r3, [r8]
   144e8:	add	sp, sp, #44	; 0x2c
   144ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   144f0:	mov	r3, #8
   144f4:	str	r3, [sp]
   144f8:	add	r1, sp, #36	; 0x24
   144fc:	rsb	r2, r2, #1
   14500:	mvn	r3, #-2147483648	; 0x80000000
   14504:	mov	r0, #0
   14508:	bl	17208 <__assert_fail@plt+0x6344>
   1450c:	mov	r5, r0
   14510:	ldm	r6, {r0, r1}
   14514:	str	r5, [r4]
   14518:	stm	r5, {r0, r1}
   1451c:	b	1440c <__assert_fail@plt+0x3548>
   14520:	strdeq	r9, [r2], -r4
   14524:	andeq	r9, r2, r8, lsr #3
   14528:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1452c:	sub	sp, sp, #44	; 0x2c
   14530:	mov	r9, r0
   14534:	mov	sl, r1
   14538:	bl	10de0 <__errno_location@plt>
   1453c:	ldr	r4, [pc, #364]	; 146b0 <__assert_fail@plt+0x37ec>
   14540:	ldr	r2, [r4, #4]
   14544:	ldr	r5, [r4]
   14548:	cmp	r2, #0
   1454c:	ldr	r3, [r0]
   14550:	mov	r7, r0
   14554:	str	r3, [sp, #24]
   14558:	bgt	145b4 <__assert_fail@plt+0x36f0>
   1455c:	add	r6, r4, #8
   14560:	cmp	r5, r6
   14564:	str	r2, [sp, #36]	; 0x24
   14568:	beq	14680 <__assert_fail@plt+0x37bc>
   1456c:	mov	r3, #8
   14570:	mov	r0, r5
   14574:	str	r3, [sp]
   14578:	rsb	r2, r2, #1
   1457c:	mvn	r3, #-2147483648	; 0x80000000
   14580:	add	r1, sp, #36	; 0x24
   14584:	bl	17208 <__assert_fail@plt+0x6344>
   14588:	mov	r5, r0
   1458c:	str	r0, [r4]
   14590:	ldr	r0, [r4, #4]
   14594:	ldr	r2, [sp, #36]	; 0x24
   14598:	mov	r1, #0
   1459c:	sub	r2, r2, r0
   145a0:	add	r0, r5, r0, lsl #3
   145a4:	lsl	r2, r2, #3
   145a8:	bl	10df8 <memset@plt>
   145ac:	ldr	r3, [sp, #36]	; 0x24
   145b0:	str	r3, [r4, #4]
   145b4:	ldr	r4, [pc, #248]	; 146b4 <__assert_fail@plt+0x37f0>
   145b8:	ldr	r8, [r5]
   145bc:	ldr	r6, [r5, #4]
   145c0:	ldr	r0, [r4, #4]
   145c4:	ldr	r1, [r4, #44]	; 0x2c
   145c8:	ldr	r2, [r4, #40]	; 0x28
   145cc:	ldr	r3, [r4]
   145d0:	orr	r0, r0, #1
   145d4:	add	fp, r4, #8
   145d8:	str	r0, [sp, #28]
   145dc:	str	r0, [sp, #4]
   145e0:	str	r1, [sp, #16]
   145e4:	str	r2, [sp, #12]
   145e8:	str	r3, [sp]
   145ec:	str	fp, [sp, #8]
   145f0:	mov	r1, r8
   145f4:	mov	r0, r6
   145f8:	mov	r3, sl
   145fc:	mov	r2, r9
   14600:	bl	12710 <__assert_fail@plt+0x184c>
   14604:	cmp	r8, r0
   14608:	bhi	1466c <__assert_fail@plt+0x37a8>
   1460c:	add	r3, r4, #48	; 0x30
   14610:	add	r8, r0, #1
   14614:	cmp	r6, r3
   14618:	str	r8, [r5]
   1461c:	beq	14628 <__assert_fail@plt+0x3764>
   14620:	mov	r0, r6
   14624:	bl	12444 <__assert_fail@plt+0x1580>
   14628:	mov	r0, r8
   1462c:	bl	16fec <__assert_fail@plt+0x6128>
   14630:	ldr	lr, [r4, #44]	; 0x2c
   14634:	ldr	ip, [r4]
   14638:	mov	r3, sl
   1463c:	mov	r2, r9
   14640:	mov	r1, r8
   14644:	str	r0, [r5, #4]
   14648:	ldr	r5, [r4, #40]	; 0x28
   1464c:	ldr	r4, [sp, #28]
   14650:	str	fp, [sp, #8]
   14654:	str	r4, [sp, #4]
   14658:	str	lr, [sp, #16]
   1465c:	str	r5, [sp, #12]
   14660:	str	ip, [sp]
   14664:	mov	r6, r0
   14668:	bl	12710 <__assert_fail@plt+0x184c>
   1466c:	ldr	r3, [sp, #24]
   14670:	mov	r0, r6
   14674:	str	r3, [r7]
   14678:	add	sp, sp, #44	; 0x2c
   1467c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14680:	mov	r3, #8
   14684:	str	r3, [sp]
   14688:	add	r1, sp, #36	; 0x24
   1468c:	rsb	r2, r2, #1
   14690:	mvn	r3, #-2147483648	; 0x80000000
   14694:	mov	r0, #0
   14698:	bl	17208 <__assert_fail@plt+0x6344>
   1469c:	mov	r5, r0
   146a0:	ldm	r6, {r0, r1}
   146a4:	str	r5, [r4]
   146a8:	stm	r5, {r0, r1}
   146ac:	b	14590 <__assert_fail@plt+0x36cc>
   146b0:	strdeq	r9, [r2], -r4
   146b4:	andeq	r9, r2, r8, lsr #3
   146b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   146bc:	sub	sp, sp, #132	; 0x84
   146c0:	mov	r5, r1
   146c4:	mov	r4, r0
   146c8:	mov	r9, r2
   146cc:	add	r0, sp, #80	; 0x50
   146d0:	mov	r2, #48	; 0x30
   146d4:	mov	r1, #0
   146d8:	bl	10df8 <memset@plt>
   146dc:	cmp	r5, #10
   146e0:	beq	14898 <__assert_fail@plt+0x39d4>
   146e4:	add	lr, sp, #80	; 0x50
   146e8:	str	r5, [sp, #80]	; 0x50
   146ec:	ldm	lr!, {r0, r1, r2, r3}
   146f0:	add	ip, sp, #32
   146f4:	ldr	r6, [pc, #416]	; 1489c <__assert_fail@plt+0x39d8>
   146f8:	stmia	ip!, {r0, r1, r2, r3}
   146fc:	ldm	lr!, {r0, r1, r2, r3}
   14700:	stmia	ip!, {r0, r1, r2, r3}
   14704:	ldm	lr, {r0, r1, r2, r3}
   14708:	stm	ip, {r0, r1, r2, r3}
   1470c:	bl	10de0 <__errno_location@plt>
   14710:	cmn	r4, #-2147483647	; 0x80000001
   14714:	ldr	r5, [r6]
   14718:	mov	r7, r0
   1471c:	movne	r0, #0
   14720:	moveq	r0, #1
   14724:	ldr	r3, [r7]
   14728:	orrs	r0, r0, r4, lsr #31
   1472c:	str	r3, [sp, #24]
   14730:	bne	14898 <__assert_fail@plt+0x39d4>
   14734:	ldr	r2, [r6, #4]
   14738:	cmp	r4, r2
   1473c:	blt	1479c <__assert_fail@plt+0x38d8>
   14740:	add	r8, r6, #8
   14744:	cmp	r5, r8
   14748:	str	r2, [sp, #80]	; 0x50
   1474c:	beq	14868 <__assert_fail@plt+0x39a4>
   14750:	mov	r3, #8
   14754:	sub	r2, r4, r2
   14758:	mov	r0, r5
   1475c:	str	r3, [sp]
   14760:	add	r2, r2, #1
   14764:	add	r1, sp, #80	; 0x50
   14768:	mvn	r3, #-2147483648	; 0x80000000
   1476c:	bl	17208 <__assert_fail@plt+0x6344>
   14770:	mov	r5, r0
   14774:	str	r0, [r6]
   14778:	ldr	r0, [r6, #4]
   1477c:	ldr	r2, [sp, #80]	; 0x50
   14780:	mov	r1, #0
   14784:	sub	r2, r2, r0
   14788:	add	r0, r5, r0, lsl #3
   1478c:	lsl	r2, r2, #3
   14790:	bl	10df8 <memset@plt>
   14794:	ldr	r3, [sp, #80]	; 0x50
   14798:	str	r3, [r6, #4]
   1479c:	add	fp, r5, r4, lsl #3
   147a0:	ldr	r1, [sp, #36]	; 0x24
   147a4:	ldr	r8, [r5, r4, lsl #3]
   147a8:	ldr	r6, [fp, #4]
   147ac:	ldr	r2, [sp, #72]	; 0x48
   147b0:	ldr	r3, [sp, #32]
   147b4:	ldr	ip, [sp, #76]	; 0x4c
   147b8:	orr	r1, r1, #1
   147bc:	add	sl, sp, #40	; 0x28
   147c0:	str	r1, [sp, #28]
   147c4:	str	r1, [sp, #4]
   147c8:	str	r2, [sp, #12]
   147cc:	str	r3, [sp]
   147d0:	mov	r0, r6
   147d4:	mov	r1, r8
   147d8:	str	ip, [sp, #16]
   147dc:	str	sl, [sp, #8]
   147e0:	mvn	r3, #0
   147e4:	mov	r2, r9
   147e8:	bl	12710 <__assert_fail@plt+0x184c>
   147ec:	cmp	r8, r0
   147f0:	bhi	14854 <__assert_fail@plt+0x3990>
   147f4:	ldr	r3, [pc, #164]	; 148a0 <__assert_fail@plt+0x39dc>
   147f8:	add	r8, r0, #1
   147fc:	cmp	r6, r3
   14800:	str	r8, [r5, r4, lsl #3]
   14804:	beq	14810 <__assert_fail@plt+0x394c>
   14808:	mov	r0, r6
   1480c:	bl	12444 <__assert_fail@plt+0x1580>
   14810:	mov	r0, r8
   14814:	bl	16fec <__assert_fail@plt+0x6128>
   14818:	ldr	lr, [sp, #76]	; 0x4c
   1481c:	ldr	r3, [sp, #32]
   14820:	ldr	ip, [sp, #72]	; 0x48
   14824:	ldr	r4, [sp, #28]
   14828:	mov	r2, r9
   1482c:	mov	r1, r8
   14830:	str	r0, [fp, #4]
   14834:	str	r3, [sp]
   14838:	str	sl, [sp, #8]
   1483c:	str	r4, [sp, #4]
   14840:	str	lr, [sp, #16]
   14844:	str	ip, [sp, #12]
   14848:	mvn	r3, #0
   1484c:	mov	r6, r0
   14850:	bl	12710 <__assert_fail@plt+0x184c>
   14854:	ldr	r3, [sp, #24]
   14858:	mov	r0, r6
   1485c:	str	r3, [r7]
   14860:	add	sp, sp, #132	; 0x84
   14864:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14868:	mov	r3, #8
   1486c:	sub	r2, r4, r2
   14870:	add	r1, sp, #80	; 0x50
   14874:	str	r3, [sp]
   14878:	add	r2, r2, #1
   1487c:	mvn	r3, #-2147483648	; 0x80000000
   14880:	bl	17208 <__assert_fail@plt+0x6344>
   14884:	mov	r5, r0
   14888:	ldm	r8, {r0, r1}
   1488c:	str	r5, [r6]
   14890:	stm	r5, {r0, r1}
   14894:	b	14778 <__assert_fail@plt+0x38b4>
   14898:	bl	10eac <abort@plt>
   1489c:	strdeq	r9, [r2], -r4
   148a0:	ldrdeq	r9, [r2], -r8
   148a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   148a8:	sub	sp, sp, #132	; 0x84
   148ac:	mov	r5, r1
   148b0:	mov	r4, r0
   148b4:	mov	r9, r2
   148b8:	add	r0, sp, #80	; 0x50
   148bc:	mov	r2, #48	; 0x30
   148c0:	mov	r1, #0
   148c4:	mov	sl, r3
   148c8:	bl	10df8 <memset@plt>
   148cc:	cmp	r5, #10
   148d0:	beq	14a8c <__assert_fail@plt+0x3bc8>
   148d4:	add	lr, sp, #80	; 0x50
   148d8:	str	r5, [sp, #80]	; 0x50
   148dc:	ldm	lr!, {r0, r1, r2, r3}
   148e0:	add	ip, sp, #32
   148e4:	ldr	r6, [pc, #420]	; 14a90 <__assert_fail@plt+0x3bcc>
   148e8:	stmia	ip!, {r0, r1, r2, r3}
   148ec:	ldm	lr!, {r0, r1, r2, r3}
   148f0:	stmia	ip!, {r0, r1, r2, r3}
   148f4:	ldm	lr, {r0, r1, r2, r3}
   148f8:	stm	ip, {r0, r1, r2, r3}
   148fc:	bl	10de0 <__errno_location@plt>
   14900:	cmn	r4, #-2147483647	; 0x80000001
   14904:	ldr	r5, [r6]
   14908:	mov	r7, r0
   1490c:	movne	r0, #0
   14910:	moveq	r0, #1
   14914:	ldr	r3, [r7]
   14918:	orrs	r0, r0, r4, lsr #31
   1491c:	str	r3, [sp, #24]
   14920:	bne	14a8c <__assert_fail@plt+0x3bc8>
   14924:	ldr	r2, [r6, #4]
   14928:	cmp	r4, r2
   1492c:	blt	1498c <__assert_fail@plt+0x3ac8>
   14930:	add	r8, r6, #8
   14934:	cmp	r5, r8
   14938:	str	r2, [sp, #80]	; 0x50
   1493c:	beq	14a5c <__assert_fail@plt+0x3b98>
   14940:	mov	r3, #8
   14944:	sub	r2, r4, r2
   14948:	mov	r0, r5
   1494c:	str	r3, [sp]
   14950:	add	r2, r2, #1
   14954:	add	r1, sp, #80	; 0x50
   14958:	mvn	r3, #-2147483648	; 0x80000000
   1495c:	bl	17208 <__assert_fail@plt+0x6344>
   14960:	mov	r5, r0
   14964:	str	r0, [r6]
   14968:	ldr	r0, [r6, #4]
   1496c:	ldr	r2, [sp, #80]	; 0x50
   14970:	mov	r1, #0
   14974:	sub	r2, r2, r0
   14978:	add	r0, r5, r0, lsl #3
   1497c:	lsl	r2, r2, #3
   14980:	bl	10df8 <memset@plt>
   14984:	ldr	r3, [sp, #80]	; 0x50
   14988:	str	r3, [r6, #4]
   1498c:	add	fp, r5, r4, lsl #3
   14990:	ldr	r3, [sp, #32]
   14994:	ldr	r1, [sp, #36]	; 0x24
   14998:	ldr	r8, [r5, r4, lsl #3]
   1499c:	ldr	r6, [fp, #4]
   149a0:	ldr	r2, [sp, #72]	; 0x48
   149a4:	ldr	ip, [sp, #76]	; 0x4c
   149a8:	orr	r1, r1, #1
   149ac:	str	r3, [sp]
   149b0:	add	r3, sp, #40	; 0x28
   149b4:	str	r1, [sp, #28]
   149b8:	str	r1, [sp, #4]
   149bc:	str	r2, [sp, #12]
   149c0:	str	r3, [sp, #8]
   149c4:	mov	r0, r6
   149c8:	mov	r1, r8
   149cc:	str	ip, [sp, #16]
   149d0:	mov	r3, sl
   149d4:	mov	r2, r9
   149d8:	bl	12710 <__assert_fail@plt+0x184c>
   149dc:	cmp	r8, r0
   149e0:	bhi	14a48 <__assert_fail@plt+0x3b84>
   149e4:	ldr	r3, [pc, #168]	; 14a94 <__assert_fail@plt+0x3bd0>
   149e8:	add	r8, r0, #1
   149ec:	cmp	r6, r3
   149f0:	str	r8, [r5, r4, lsl #3]
   149f4:	beq	14a00 <__assert_fail@plt+0x3b3c>
   149f8:	mov	r0, r6
   149fc:	bl	12444 <__assert_fail@plt+0x1580>
   14a00:	mov	r0, r8
   14a04:	bl	16fec <__assert_fail@plt+0x6128>
   14a08:	add	lr, sp, #40	; 0x28
   14a0c:	ldr	ip, [sp, #76]	; 0x4c
   14a10:	ldr	r4, [sp, #72]	; 0x48
   14a14:	ldr	r5, [sp, #28]
   14a18:	mov	r3, sl
   14a1c:	mov	r2, r9
   14a20:	mov	r1, r8
   14a24:	str	r0, [fp, #4]
   14a28:	str	lr, [sp, #8]
   14a2c:	ldr	lr, [sp, #32]
   14a30:	str	r5, [sp, #4]
   14a34:	str	ip, [sp, #16]
   14a38:	str	r4, [sp, #12]
   14a3c:	str	lr, [sp]
   14a40:	mov	r6, r0
   14a44:	bl	12710 <__assert_fail@plt+0x184c>
   14a48:	ldr	r3, [sp, #24]
   14a4c:	mov	r0, r6
   14a50:	str	r3, [r7]
   14a54:	add	sp, sp, #132	; 0x84
   14a58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14a5c:	mov	r3, #8
   14a60:	sub	r2, r4, r2
   14a64:	add	r1, sp, #80	; 0x50
   14a68:	str	r3, [sp]
   14a6c:	add	r2, r2, #1
   14a70:	mvn	r3, #-2147483648	; 0x80000000
   14a74:	bl	17208 <__assert_fail@plt+0x6344>
   14a78:	mov	r5, r0
   14a7c:	ldm	r8, {r0, r1}
   14a80:	str	r5, [r6]
   14a84:	stm	r5, {r0, r1}
   14a88:	b	14968 <__assert_fail@plt+0x3aa4>
   14a8c:	bl	10eac <abort@plt>
   14a90:	strdeq	r9, [r2], -r4
   14a94:	ldrdeq	r9, [r2], -r8
   14a98:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14a9c:	sub	sp, sp, #124	; 0x7c
   14aa0:	mov	r4, r0
   14aa4:	mov	r9, r1
   14aa8:	add	r0, sp, #72	; 0x48
   14aac:	mov	r2, #48	; 0x30
   14ab0:	mov	r1, #0
   14ab4:	bl	10df8 <memset@plt>
   14ab8:	cmp	r4, #10
   14abc:	beq	14c48 <__assert_fail@plt+0x3d84>
   14ac0:	add	lr, sp, #72	; 0x48
   14ac4:	str	r4, [sp, #72]	; 0x48
   14ac8:	ldm	lr!, {r0, r1, r2, r3}
   14acc:	add	ip, sp, #24
   14ad0:	ldr	r5, [pc, #372]	; 14c4c <__assert_fail@plt+0x3d88>
   14ad4:	stmia	ip!, {r0, r1, r2, r3}
   14ad8:	ldm	lr!, {r0, r1, r2, r3}
   14adc:	stmia	ip!, {r0, r1, r2, r3}
   14ae0:	ldm	lr, {r0, r1, r2, r3}
   14ae4:	stm	ip, {r0, r1, r2, r3}
   14ae8:	bl	10de0 <__errno_location@plt>
   14aec:	ldr	r2, [r5, #4]
   14af0:	ldr	r4, [r5]
   14af4:	cmp	r2, #0
   14af8:	mov	r7, r0
   14afc:	ldr	fp, [r0]
   14b00:	bgt	14b5c <__assert_fail@plt+0x3c98>
   14b04:	add	r6, r5, #8
   14b08:	cmp	r4, r6
   14b0c:	str	r2, [sp, #72]	; 0x48
   14b10:	beq	14c18 <__assert_fail@plt+0x3d54>
   14b14:	mov	r3, #8
   14b18:	mov	r0, r4
   14b1c:	str	r3, [sp]
   14b20:	rsb	r2, r2, #1
   14b24:	add	r1, sp, #72	; 0x48
   14b28:	mvn	r3, #-2147483648	; 0x80000000
   14b2c:	bl	17208 <__assert_fail@plt+0x6344>
   14b30:	mov	r4, r0
   14b34:	str	r0, [r5]
   14b38:	ldr	r0, [r5, #4]
   14b3c:	ldr	r2, [sp, #72]	; 0x48
   14b40:	mov	r1, #0
   14b44:	sub	r2, r2, r0
   14b48:	add	r0, r4, r0, lsl #3
   14b4c:	lsl	r2, r2, #3
   14b50:	bl	10df8 <memset@plt>
   14b54:	ldr	r3, [sp, #72]	; 0x48
   14b58:	str	r3, [r5, #4]
   14b5c:	ldr	r6, [sp, #28]
   14b60:	ldr	r8, [r4]
   14b64:	ldr	r5, [r4, #4]
   14b68:	ldr	r2, [sp, #64]	; 0x40
   14b6c:	ldr	r3, [sp, #24]
   14b70:	ldr	ip, [sp, #68]	; 0x44
   14b74:	orr	r6, r6, #1
   14b78:	add	sl, sp, #32
   14b7c:	str	r2, [sp, #12]
   14b80:	str	r3, [sp]
   14b84:	str	r6, [sp, #4]
   14b88:	mov	r1, r8
   14b8c:	mov	r0, r5
   14b90:	str	ip, [sp, #16]
   14b94:	str	sl, [sp, #8]
   14b98:	mvn	r3, #0
   14b9c:	mov	r2, r9
   14ba0:	bl	12710 <__assert_fail@plt+0x184c>
   14ba4:	cmp	r8, r0
   14ba8:	bhi	14c08 <__assert_fail@plt+0x3d44>
   14bac:	ldr	r3, [pc, #156]	; 14c50 <__assert_fail@plt+0x3d8c>
   14bb0:	add	r8, r0, #1
   14bb4:	cmp	r5, r3
   14bb8:	str	r8, [r4]
   14bbc:	beq	14bc8 <__assert_fail@plt+0x3d04>
   14bc0:	mov	r0, r5
   14bc4:	bl	12444 <__assert_fail@plt+0x1580>
   14bc8:	mov	r0, r8
   14bcc:	bl	16fec <__assert_fail@plt+0x6128>
   14bd0:	ldr	lr, [sp, #68]	; 0x44
   14bd4:	ldr	r3, [sp, #24]
   14bd8:	ldr	ip, [sp, #64]	; 0x40
   14bdc:	mov	r2, r9
   14be0:	mov	r1, r8
   14be4:	str	r0, [r4, #4]
   14be8:	str	r3, [sp]
   14bec:	str	sl, [sp, #8]
   14bf0:	str	r6, [sp, #4]
   14bf4:	str	lr, [sp, #16]
   14bf8:	str	ip, [sp, #12]
   14bfc:	mvn	r3, #0
   14c00:	mov	r5, r0
   14c04:	bl	12710 <__assert_fail@plt+0x184c>
   14c08:	mov	r0, r5
   14c0c:	str	fp, [r7]
   14c10:	add	sp, sp, #124	; 0x7c
   14c14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14c18:	mov	r3, #8
   14c1c:	add	r1, sp, #72	; 0x48
   14c20:	str	r3, [sp]
   14c24:	rsb	r2, r2, #1
   14c28:	mvn	r3, #-2147483648	; 0x80000000
   14c2c:	mov	r0, #0
   14c30:	bl	17208 <__assert_fail@plt+0x6344>
   14c34:	mov	r4, r0
   14c38:	ldm	r6, {r0, r1}
   14c3c:	str	r4, [r5]
   14c40:	stm	r4, {r0, r1}
   14c44:	b	14b38 <__assert_fail@plt+0x3c74>
   14c48:	bl	10eac <abort@plt>
   14c4c:	strdeq	r9, [r2], -r4
   14c50:	ldrdeq	r9, [r2], -r8
   14c54:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14c58:	sub	sp, sp, #132	; 0x84
   14c5c:	mov	r4, r0
   14c60:	mov	r9, r1
   14c64:	mov	sl, r2
   14c68:	add	r0, sp, #80	; 0x50
   14c6c:	mov	r2, #48	; 0x30
   14c70:	mov	r1, #0
   14c74:	bl	10df8 <memset@plt>
   14c78:	cmp	r4, #10
   14c7c:	beq	14e10 <__assert_fail@plt+0x3f4c>
   14c80:	add	lr, sp, #80	; 0x50
   14c84:	str	r4, [sp, #80]	; 0x50
   14c88:	ldm	lr!, {r0, r1, r2, r3}
   14c8c:	add	ip, sp, #32
   14c90:	ldr	r5, [pc, #380]	; 14e14 <__assert_fail@plt+0x3f50>
   14c94:	stmia	ip!, {r0, r1, r2, r3}
   14c98:	ldm	lr!, {r0, r1, r2, r3}
   14c9c:	stmia	ip!, {r0, r1, r2, r3}
   14ca0:	ldm	lr, {r0, r1, r2, r3}
   14ca4:	stm	ip, {r0, r1, r2, r3}
   14ca8:	bl	10de0 <__errno_location@plt>
   14cac:	ldr	r2, [r5, #4]
   14cb0:	ldr	r4, [r5]
   14cb4:	cmp	r2, #0
   14cb8:	ldr	r3, [r0]
   14cbc:	mov	r7, r0
   14cc0:	str	r3, [sp, #28]
   14cc4:	bgt	14d20 <__assert_fail@plt+0x3e5c>
   14cc8:	add	r6, r5, #8
   14ccc:	cmp	r4, r6
   14cd0:	str	r2, [sp, #80]	; 0x50
   14cd4:	beq	14de0 <__assert_fail@plt+0x3f1c>
   14cd8:	mov	r3, #8
   14cdc:	mov	r0, r4
   14ce0:	str	r3, [sp]
   14ce4:	rsb	r2, r2, #1
   14ce8:	add	r1, sp, #80	; 0x50
   14cec:	mvn	r3, #-2147483648	; 0x80000000
   14cf0:	bl	17208 <__assert_fail@plt+0x6344>
   14cf4:	mov	r4, r0
   14cf8:	str	r0, [r5]
   14cfc:	ldr	r0, [r5, #4]
   14d00:	ldr	r2, [sp, #80]	; 0x50
   14d04:	mov	r1, #0
   14d08:	sub	r2, r2, r0
   14d0c:	add	r0, r4, r0, lsl #3
   14d10:	lsl	r2, r2, #3
   14d14:	bl	10df8 <memset@plt>
   14d18:	ldr	r3, [sp, #80]	; 0x50
   14d1c:	str	r3, [r5, #4]
   14d20:	ldr	r6, [sp, #36]	; 0x24
   14d24:	ldr	r8, [r4]
   14d28:	ldr	r5, [r4, #4]
   14d2c:	ldr	r2, [sp, #72]	; 0x48
   14d30:	ldr	r3, [sp, #32]
   14d34:	ldr	ip, [sp, #76]	; 0x4c
   14d38:	orr	r6, r6, #1
   14d3c:	add	fp, sp, #40	; 0x28
   14d40:	str	r2, [sp, #12]
   14d44:	str	r3, [sp]
   14d48:	str	r6, [sp, #4]
   14d4c:	mov	r1, r8
   14d50:	mov	r0, r5
   14d54:	str	ip, [sp, #16]
   14d58:	str	fp, [sp, #8]
   14d5c:	mov	r3, sl
   14d60:	mov	r2, r9
   14d64:	bl	12710 <__assert_fail@plt+0x184c>
   14d68:	cmp	r8, r0
   14d6c:	bhi	14dcc <__assert_fail@plt+0x3f08>
   14d70:	ldr	r3, [pc, #160]	; 14e18 <__assert_fail@plt+0x3f54>
   14d74:	add	r8, r0, #1
   14d78:	cmp	r5, r3
   14d7c:	str	r8, [r4]
   14d80:	beq	14d8c <__assert_fail@plt+0x3ec8>
   14d84:	mov	r0, r5
   14d88:	bl	12444 <__assert_fail@plt+0x1580>
   14d8c:	mov	r0, r8
   14d90:	bl	16fec <__assert_fail@plt+0x6128>
   14d94:	ldr	ip, [sp, #76]	; 0x4c
   14d98:	ldr	lr, [sp, #32]
   14d9c:	mov	r3, sl
   14da0:	mov	r2, r9
   14da4:	mov	r1, r8
   14da8:	str	r0, [r4, #4]
   14dac:	ldr	r4, [sp, #72]	; 0x48
   14db0:	str	fp, [sp, #8]
   14db4:	str	r6, [sp, #4]
   14db8:	str	ip, [sp, #16]
   14dbc:	str	r4, [sp, #12]
   14dc0:	str	lr, [sp]
   14dc4:	mov	r5, r0
   14dc8:	bl	12710 <__assert_fail@plt+0x184c>
   14dcc:	ldr	r3, [sp, #28]
   14dd0:	mov	r0, r5
   14dd4:	str	r3, [r7]
   14dd8:	add	sp, sp, #132	; 0x84
   14ddc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14de0:	mov	r3, #8
   14de4:	add	r1, sp, #80	; 0x50
   14de8:	str	r3, [sp]
   14dec:	rsb	r2, r2, #1
   14df0:	mvn	r3, #-2147483648	; 0x80000000
   14df4:	mov	r0, #0
   14df8:	bl	17208 <__assert_fail@plt+0x6344>
   14dfc:	mov	r4, r0
   14e00:	ldm	r6, {r0, r1}
   14e04:	str	r4, [r5]
   14e08:	stm	r4, {r0, r1}
   14e0c:	b	14cfc <__assert_fail@plt+0x3e38>
   14e10:	bl	10eac <abort@plt>
   14e14:	strdeq	r9, [r2], -r4
   14e18:	ldrdeq	r9, [r2], -r8
   14e1c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14e20:	mov	r4, r2
   14e24:	ldr	lr, [pc, #432]	; 14fdc <__assert_fail@plt+0x4118>
   14e28:	mov	sl, r0
   14e2c:	mov	fp, r1
   14e30:	ldm	lr!, {r0, r1, r2, r3}
   14e34:	sub	sp, sp, #92	; 0x5c
   14e38:	add	ip, sp, #40	; 0x28
   14e3c:	lsr	r7, r4, #5
   14e40:	stmia	ip!, {r0, r1, r2, r3}
   14e44:	add	r6, sp, #48	; 0x30
   14e48:	ldm	lr!, {r0, r1, r2, r3}
   14e4c:	and	r4, r4, #31
   14e50:	ldr	r5, [pc, #392]	; 14fe0 <__assert_fail@plt+0x411c>
   14e54:	stmia	ip!, {r0, r1, r2, r3}
   14e58:	ldm	lr, {r0, r1, r2, r3}
   14e5c:	stm	ip, {r0, r1, r2, r3}
   14e60:	ldr	r2, [r6, r7, lsl #2]
   14e64:	lsr	r3, r2, r4
   14e68:	eor	r3, r3, #1
   14e6c:	and	r3, r3, #1
   14e70:	eor	r4, r2, r3, lsl r4
   14e74:	str	r4, [r6, r7, lsl #2]
   14e78:	bl	10de0 <__errno_location@plt>
   14e7c:	ldr	r2, [r5, #4]
   14e80:	ldr	r4, [r5]
   14e84:	cmp	r2, #0
   14e88:	ldr	r3, [r0]
   14e8c:	mov	r8, r0
   14e90:	str	r3, [sp, #28]
   14e94:	bgt	14ef0 <__assert_fail@plt+0x402c>
   14e98:	add	r7, r5, #8
   14e9c:	cmp	r4, r7
   14ea0:	str	r2, [sp, #36]	; 0x24
   14ea4:	beq	14fac <__assert_fail@plt+0x40e8>
   14ea8:	mov	r3, #8
   14eac:	mov	r0, r4
   14eb0:	str	r3, [sp]
   14eb4:	rsb	r2, r2, #1
   14eb8:	mvn	r3, #-2147483648	; 0x80000000
   14ebc:	add	r1, sp, #36	; 0x24
   14ec0:	bl	17208 <__assert_fail@plt+0x6344>
   14ec4:	mov	r4, r0
   14ec8:	str	r0, [r5]
   14ecc:	ldr	r0, [r5, #4]
   14ed0:	ldr	r2, [sp, #36]	; 0x24
   14ed4:	mov	r1, #0
   14ed8:	sub	r2, r2, r0
   14edc:	add	r0, r4, r0, lsl #3
   14ee0:	lsl	r2, r2, #3
   14ee4:	bl	10df8 <memset@plt>
   14ee8:	ldr	r3, [sp, #36]	; 0x24
   14eec:	str	r3, [r5, #4]
   14ef0:	ldr	r7, [sp, #44]	; 0x2c
   14ef4:	ldr	r9, [r4]
   14ef8:	ldr	r5, [r4, #4]
   14efc:	ldr	r2, [sp, #80]	; 0x50
   14f00:	ldr	r3, [sp, #40]	; 0x28
   14f04:	ldr	ip, [sp, #84]	; 0x54
   14f08:	orr	r7, r7, #1
   14f0c:	str	r2, [sp, #12]
   14f10:	str	r3, [sp]
   14f14:	str	r7, [sp, #4]
   14f18:	str	r6, [sp, #8]
   14f1c:	mov	r1, r9
   14f20:	mov	r0, r5
   14f24:	str	ip, [sp, #16]
   14f28:	mov	r3, fp
   14f2c:	mov	r2, sl
   14f30:	bl	12710 <__assert_fail@plt+0x184c>
   14f34:	cmp	r9, r0
   14f38:	bhi	14f98 <__assert_fail@plt+0x40d4>
   14f3c:	ldr	r3, [pc, #160]	; 14fe4 <__assert_fail@plt+0x4120>
   14f40:	add	r9, r0, #1
   14f44:	cmp	r5, r3
   14f48:	str	r9, [r4]
   14f4c:	beq	14f58 <__assert_fail@plt+0x4094>
   14f50:	mov	r0, r5
   14f54:	bl	12444 <__assert_fail@plt+0x1580>
   14f58:	mov	r0, r9
   14f5c:	bl	16fec <__assert_fail@plt+0x6128>
   14f60:	ldr	ip, [sp, #84]	; 0x54
   14f64:	ldr	lr, [sp, #40]	; 0x28
   14f68:	mov	r3, fp
   14f6c:	mov	r2, sl
   14f70:	mov	r1, r9
   14f74:	str	r0, [r4, #4]
   14f78:	ldr	r4, [sp, #80]	; 0x50
   14f7c:	str	r6, [sp, #8]
   14f80:	str	r7, [sp, #4]
   14f84:	str	ip, [sp, #16]
   14f88:	str	r4, [sp, #12]
   14f8c:	str	lr, [sp]
   14f90:	mov	r5, r0
   14f94:	bl	12710 <__assert_fail@plt+0x184c>
   14f98:	ldr	r3, [sp, #28]
   14f9c:	mov	r0, r5
   14fa0:	str	r3, [r8]
   14fa4:	add	sp, sp, #92	; 0x5c
   14fa8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14fac:	mov	r3, #8
   14fb0:	str	r3, [sp]
   14fb4:	add	r1, sp, #36	; 0x24
   14fb8:	rsb	r2, r2, #1
   14fbc:	mvn	r3, #-2147483648	; 0x80000000
   14fc0:	mov	r0, #0
   14fc4:	bl	17208 <__assert_fail@plt+0x6344>
   14fc8:	mov	r4, r0
   14fcc:	ldm	r7, {r0, r1}
   14fd0:	str	r4, [r5]
   14fd4:	stm	r4, {r0, r1}
   14fd8:	b	14ecc <__assert_fail@plt+0x4008>
   14fdc:	andeq	r9, r2, r8, lsr #3
   14fe0:	strdeq	r9, [r2], -r4
   14fe4:	ldrdeq	r9, [r2], -r8
   14fe8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14fec:	mov	r4, r1
   14ff0:	ldr	lr, [pc, #420]	; 1519c <__assert_fail@plt+0x42d8>
   14ff4:	mov	r6, r0
   14ff8:	sub	sp, sp, #84	; 0x54
   14ffc:	ldm	lr!, {r0, r1, r2, r3}
   15000:	add	ip, sp, #32
   15004:	lsr	r8, r4, #5
   15008:	add	r5, sp, #40	; 0x28
   1500c:	stmia	ip!, {r0, r1, r2, r3}
   15010:	and	r4, r4, #31
   15014:	ldm	lr!, {r0, r1, r2, r3}
   15018:	ldr	r7, [pc, #384]	; 151a0 <__assert_fail@plt+0x42dc>
   1501c:	stmia	ip!, {r0, r1, r2, r3}
   15020:	ldm	lr, {r0, r1, r2, r3}
   15024:	stm	ip, {r0, r1, r2, r3}
   15028:	ldr	r2, [r5, r8, lsl #2]
   1502c:	lsr	r3, r2, r4
   15030:	eor	r3, r3, #1
   15034:	and	r3, r3, #1
   15038:	eor	r4, r2, r3, lsl r4
   1503c:	str	r4, [r5, r8, lsl #2]
   15040:	bl	10de0 <__errno_location@plt>
   15044:	ldr	r2, [r7, #4]
   15048:	ldr	r4, [r7]
   1504c:	cmp	r2, #0
   15050:	mov	r9, r0
   15054:	ldr	sl, [r0]
   15058:	bgt	150b4 <__assert_fail@plt+0x41f0>
   1505c:	add	r8, r7, #8
   15060:	cmp	r4, r8
   15064:	str	r2, [sp, #28]
   15068:	beq	1516c <__assert_fail@plt+0x42a8>
   1506c:	mov	r3, #8
   15070:	mov	r0, r4
   15074:	str	r3, [sp]
   15078:	rsb	r2, r2, #1
   1507c:	mvn	r3, #-2147483648	; 0x80000000
   15080:	add	r1, sp, #28
   15084:	bl	17208 <__assert_fail@plt+0x6344>
   15088:	mov	r4, r0
   1508c:	str	r0, [r7]
   15090:	ldr	r0, [r7, #4]
   15094:	ldr	r2, [sp, #28]
   15098:	mov	r1, #0
   1509c:	sub	r2, r2, r0
   150a0:	add	r0, r4, r0, lsl #3
   150a4:	lsl	r2, r2, #3
   150a8:	bl	10df8 <memset@plt>
   150ac:	ldr	r3, [sp, #28]
   150b0:	str	r3, [r7, #4]
   150b4:	ldr	r8, [sp, #36]	; 0x24
   150b8:	ldr	fp, [r4]
   150bc:	ldr	r7, [r4, #4]
   150c0:	ldr	r2, [sp, #72]	; 0x48
   150c4:	ldr	r3, [sp, #32]
   150c8:	ldr	ip, [sp, #76]	; 0x4c
   150cc:	orr	r8, r8, #1
   150d0:	str	r2, [sp, #12]
   150d4:	str	r3, [sp]
   150d8:	str	r8, [sp, #4]
   150dc:	str	r5, [sp, #8]
   150e0:	mov	r1, fp
   150e4:	mov	r0, r7
   150e8:	str	ip, [sp, #16]
   150ec:	mvn	r3, #0
   150f0:	mov	r2, r6
   150f4:	bl	12710 <__assert_fail@plt+0x184c>
   150f8:	cmp	fp, r0
   150fc:	bhi	1515c <__assert_fail@plt+0x4298>
   15100:	ldr	r3, [pc, #156]	; 151a4 <__assert_fail@plt+0x42e0>
   15104:	add	fp, r0, #1
   15108:	cmp	r7, r3
   1510c:	str	fp, [r4]
   15110:	beq	1511c <__assert_fail@plt+0x4258>
   15114:	mov	r0, r7
   15118:	bl	12444 <__assert_fail@plt+0x1580>
   1511c:	mov	r0, fp
   15120:	bl	16fec <__assert_fail@plt+0x6128>
   15124:	ldr	lr, [sp, #76]	; 0x4c
   15128:	ldr	r3, [sp, #32]
   1512c:	ldr	ip, [sp, #72]	; 0x48
   15130:	mov	r2, r6
   15134:	mov	r1, fp
   15138:	str	r0, [r4, #4]
   1513c:	str	r3, [sp]
   15140:	str	r5, [sp, #8]
   15144:	str	r8, [sp, #4]
   15148:	str	lr, [sp, #16]
   1514c:	str	ip, [sp, #12]
   15150:	mvn	r3, #0
   15154:	mov	r7, r0
   15158:	bl	12710 <__assert_fail@plt+0x184c>
   1515c:	mov	r0, r7
   15160:	str	sl, [r9]
   15164:	add	sp, sp, #84	; 0x54
   15168:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1516c:	mov	r3, #8
   15170:	str	r3, [sp]
   15174:	add	r1, sp, #28
   15178:	rsb	r2, r2, #1
   1517c:	mvn	r3, #-2147483648	; 0x80000000
   15180:	mov	r0, #0
   15184:	bl	17208 <__assert_fail@plt+0x6344>
   15188:	mov	r4, r0
   1518c:	ldm	r8, {r0, r1}
   15190:	str	r4, [r7]
   15194:	stm	r4, {r0, r1}
   15198:	b	15090 <__assert_fail@plt+0x41cc>
   1519c:	andeq	r9, r2, r8, lsr #3
   151a0:	strdeq	r9, [r2], -r4
   151a4:	ldrdeq	r9, [r2], -r8
   151a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   151ac:	mov	r6, r0
   151b0:	ldr	lr, [pc, #404]	; 1534c <__assert_fail@plt+0x4488>
   151b4:	sub	sp, sp, #84	; 0x54
   151b8:	add	ip, sp, #32
   151bc:	ldm	lr!, {r0, r1, r2, r3}
   151c0:	ldr	r5, [pc, #392]	; 15350 <__assert_fail@plt+0x448c>
   151c4:	stmia	ip!, {r0, r1, r2, r3}
   151c8:	ldm	lr!, {r0, r1, r2, r3}
   151cc:	ldr	r4, [sp, #44]	; 0x2c
   151d0:	stmia	ip!, {r0, r1, r2, r3}
   151d4:	ldm	lr, {r0, r1, r2, r3}
   151d8:	mvn	lr, r4
   151dc:	and	lr, lr, #67108864	; 0x4000000
   151e0:	eor	lr, lr, r4
   151e4:	stm	ip, {r0, r1, r2, r3}
   151e8:	str	lr, [sp, #44]	; 0x2c
   151ec:	bl	10de0 <__errno_location@plt>
   151f0:	ldr	r2, [r5, #4]
   151f4:	ldr	r4, [r5]
   151f8:	cmp	r2, #0
   151fc:	mov	r8, r0
   15200:	ldr	sl, [r0]
   15204:	bgt	15260 <__assert_fail@plt+0x439c>
   15208:	add	r7, r5, #8
   1520c:	cmp	r4, r7
   15210:	str	r2, [sp, #28]
   15214:	beq	1531c <__assert_fail@plt+0x4458>
   15218:	mov	r3, #8
   1521c:	mov	r0, r4
   15220:	str	r3, [sp]
   15224:	rsb	r2, r2, #1
   15228:	mvn	r3, #-2147483648	; 0x80000000
   1522c:	add	r1, sp, #28
   15230:	bl	17208 <__assert_fail@plt+0x6344>
   15234:	mov	r4, r0
   15238:	str	r0, [r5]
   1523c:	ldr	r0, [r5, #4]
   15240:	ldr	r2, [sp, #28]
   15244:	mov	r1, #0
   15248:	sub	r2, r2, r0
   1524c:	add	r0, r4, r0, lsl #3
   15250:	lsl	r2, r2, #3
   15254:	bl	10df8 <memset@plt>
   15258:	ldr	r3, [sp, #28]
   1525c:	str	r3, [r5, #4]
   15260:	ldr	r7, [sp, #36]	; 0x24
   15264:	ldr	r9, [r4]
   15268:	ldr	r5, [r4, #4]
   1526c:	ldr	r2, [sp, #72]	; 0x48
   15270:	ldr	r3, [sp, #32]
   15274:	ldr	ip, [sp, #76]	; 0x4c
   15278:	orr	r7, r7, #1
   1527c:	add	fp, sp, #40	; 0x28
   15280:	str	r2, [sp, #12]
   15284:	str	r3, [sp]
   15288:	str	r7, [sp, #4]
   1528c:	mov	r1, r9
   15290:	mov	r0, r5
   15294:	str	ip, [sp, #16]
   15298:	str	fp, [sp, #8]
   1529c:	mvn	r3, #0
   152a0:	mov	r2, r6
   152a4:	bl	12710 <__assert_fail@plt+0x184c>
   152a8:	cmp	r9, r0
   152ac:	bhi	1530c <__assert_fail@plt+0x4448>
   152b0:	ldr	r3, [pc, #156]	; 15354 <__assert_fail@plt+0x4490>
   152b4:	add	r9, r0, #1
   152b8:	cmp	r5, r3
   152bc:	str	r9, [r4]
   152c0:	beq	152cc <__assert_fail@plt+0x4408>
   152c4:	mov	r0, r5
   152c8:	bl	12444 <__assert_fail@plt+0x1580>
   152cc:	mov	r0, r9
   152d0:	bl	16fec <__assert_fail@plt+0x6128>
   152d4:	ldr	lr, [sp, #76]	; 0x4c
   152d8:	ldr	r3, [sp, #32]
   152dc:	ldr	ip, [sp, #72]	; 0x48
   152e0:	mov	r2, r6
   152e4:	mov	r1, r9
   152e8:	str	r0, [r4, #4]
   152ec:	str	r3, [sp]
   152f0:	str	fp, [sp, #8]
   152f4:	str	r7, [sp, #4]
   152f8:	str	lr, [sp, #16]
   152fc:	str	ip, [sp, #12]
   15300:	mvn	r3, #0
   15304:	mov	r5, r0
   15308:	bl	12710 <__assert_fail@plt+0x184c>
   1530c:	mov	r0, r5
   15310:	str	sl, [r8]
   15314:	add	sp, sp, #84	; 0x54
   15318:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1531c:	mov	r3, #8
   15320:	str	r3, [sp]
   15324:	add	r1, sp, #28
   15328:	rsb	r2, r2, #1
   1532c:	mvn	r3, #-2147483648	; 0x80000000
   15330:	mov	r0, #0
   15334:	bl	17208 <__assert_fail@plt+0x6344>
   15338:	mov	r4, r0
   1533c:	ldm	r7, {r0, r1}
   15340:	str	r4, [r5]
   15344:	stm	r4, {r0, r1}
   15348:	b	1523c <__assert_fail@plt+0x4378>
   1534c:	andeq	r9, r2, r8, lsr #3
   15350:	strdeq	r9, [r2], -r4
   15354:	ldrdeq	r9, [r2], -r8
   15358:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1535c:	mov	r9, r0
   15360:	ldr	lr, [pc, #416]	; 15508 <__assert_fail@plt+0x4644>
   15364:	mov	sl, r1
   15368:	sub	sp, sp, #92	; 0x5c
   1536c:	ldm	lr!, {r0, r1, r2, r3}
   15370:	add	ip, sp, #40	; 0x28
   15374:	ldr	r5, [pc, #400]	; 1550c <__assert_fail@plt+0x4648>
   15378:	stmia	ip!, {r0, r1, r2, r3}
   1537c:	ldm	lr!, {r0, r1, r2, r3}
   15380:	ldr	r4, [sp, #52]	; 0x34
   15384:	stmia	ip!, {r0, r1, r2, r3}
   15388:	ldm	lr, {r0, r1, r2, r3}
   1538c:	mvn	lr, r4
   15390:	and	lr, lr, #67108864	; 0x4000000
   15394:	eor	lr, lr, r4
   15398:	stm	ip, {r0, r1, r2, r3}
   1539c:	str	lr, [sp, #52]	; 0x34
   153a0:	bl	10de0 <__errno_location@plt>
   153a4:	ldr	r2, [r5, #4]
   153a8:	ldr	r4, [r5]
   153ac:	cmp	r2, #0
   153b0:	ldr	r3, [r0]
   153b4:	mov	r7, r0
   153b8:	str	r3, [sp, #28]
   153bc:	bgt	15418 <__assert_fail@plt+0x4554>
   153c0:	add	r6, r5, #8
   153c4:	cmp	r4, r6
   153c8:	str	r2, [sp, #36]	; 0x24
   153cc:	beq	154d8 <__assert_fail@plt+0x4614>
   153d0:	mov	r3, #8
   153d4:	mov	r0, r4
   153d8:	str	r3, [sp]
   153dc:	rsb	r2, r2, #1
   153e0:	mvn	r3, #-2147483648	; 0x80000000
   153e4:	add	r1, sp, #36	; 0x24
   153e8:	bl	17208 <__assert_fail@plt+0x6344>
   153ec:	mov	r4, r0
   153f0:	str	r0, [r5]
   153f4:	ldr	r0, [r5, #4]
   153f8:	ldr	r2, [sp, #36]	; 0x24
   153fc:	mov	r1, #0
   15400:	sub	r2, r2, r0
   15404:	add	r0, r4, r0, lsl #3
   15408:	lsl	r2, r2, #3
   1540c:	bl	10df8 <memset@plt>
   15410:	ldr	r3, [sp, #36]	; 0x24
   15414:	str	r3, [r5, #4]
   15418:	ldr	r6, [sp, #44]	; 0x2c
   1541c:	ldr	r8, [r4]
   15420:	ldr	r5, [r4, #4]
   15424:	ldr	r2, [sp, #80]	; 0x50
   15428:	ldr	r3, [sp, #40]	; 0x28
   1542c:	ldr	ip, [sp, #84]	; 0x54
   15430:	orr	r6, r6, #1
   15434:	add	fp, sp, #48	; 0x30
   15438:	str	r2, [sp, #12]
   1543c:	str	r3, [sp]
   15440:	str	r6, [sp, #4]
   15444:	mov	r1, r8
   15448:	mov	r0, r5
   1544c:	str	ip, [sp, #16]
   15450:	str	fp, [sp, #8]
   15454:	mov	r3, sl
   15458:	mov	r2, r9
   1545c:	bl	12710 <__assert_fail@plt+0x184c>
   15460:	cmp	r8, r0
   15464:	bhi	154c4 <__assert_fail@plt+0x4600>
   15468:	ldr	r3, [pc, #160]	; 15510 <__assert_fail@plt+0x464c>
   1546c:	add	r8, r0, #1
   15470:	cmp	r5, r3
   15474:	str	r8, [r4]
   15478:	beq	15484 <__assert_fail@plt+0x45c0>
   1547c:	mov	r0, r5
   15480:	bl	12444 <__assert_fail@plt+0x1580>
   15484:	mov	r0, r8
   15488:	bl	16fec <__assert_fail@plt+0x6128>
   1548c:	ldr	ip, [sp, #84]	; 0x54
   15490:	ldr	lr, [sp, #40]	; 0x28
   15494:	mov	r3, sl
   15498:	mov	r2, r9
   1549c:	mov	r1, r8
   154a0:	str	r0, [r4, #4]
   154a4:	ldr	r4, [sp, #80]	; 0x50
   154a8:	str	fp, [sp, #8]
   154ac:	str	r6, [sp, #4]
   154b0:	str	ip, [sp, #16]
   154b4:	str	r4, [sp, #12]
   154b8:	str	lr, [sp]
   154bc:	mov	r5, r0
   154c0:	bl	12710 <__assert_fail@plt+0x184c>
   154c4:	ldr	r3, [sp, #28]
   154c8:	mov	r0, r5
   154cc:	str	r3, [r7]
   154d0:	add	sp, sp, #92	; 0x5c
   154d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   154d8:	mov	r3, #8
   154dc:	str	r3, [sp]
   154e0:	add	r1, sp, #36	; 0x24
   154e4:	rsb	r2, r2, #1
   154e8:	mvn	r3, #-2147483648	; 0x80000000
   154ec:	mov	r0, #0
   154f0:	bl	17208 <__assert_fail@plt+0x6344>
   154f4:	mov	r4, r0
   154f8:	ldm	r6, {r0, r1}
   154fc:	str	r4, [r5]
   15500:	stm	r4, {r0, r1}
   15504:	b	153f4 <__assert_fail@plt+0x4530>
   15508:	andeq	r9, r2, r8, lsr #3
   1550c:	strdeq	r9, [r2], -r4
   15510:	ldrdeq	r9, [r2], -r8
   15514:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15518:	sub	sp, sp, #180	; 0xb4
   1551c:	mov	r6, r1
   15520:	mov	r4, r0
   15524:	mov	r9, r2
   15528:	add	r0, sp, #80	; 0x50
   1552c:	mov	r2, #48	; 0x30
   15530:	mov	r1, #0
   15534:	bl	10df8 <memset@plt>
   15538:	cmp	r6, #10
   1553c:	beq	1571c <__assert_fail@plt+0x4858>
   15540:	add	r5, sp, #80	; 0x50
   15544:	str	r6, [sp, #80]	; 0x50
   15548:	ldm	r5!, {r0, r1, r2, r3}
   1554c:	add	ip, sp, #128	; 0x80
   15550:	mov	r7, ip
   15554:	add	lr, sp, #32
   15558:	stmia	ip!, {r0, r1, r2, r3}
   1555c:	mov	r8, #67108864	; 0x4000000
   15560:	ldm	r5!, {r0, r1, r2, r3}
   15564:	ldr	r6, [pc, #436]	; 15720 <__assert_fail@plt+0x485c>
   15568:	stmia	ip!, {r0, r1, r2, r3}
   1556c:	ldm	r5, {r0, r1, r2, r3}
   15570:	stm	ip, {r0, r1, r2, r3}
   15574:	ldm	r7!, {r0, r1, r2, r3}
   15578:	stmia	lr!, {r0, r1, r2, r3}
   1557c:	ldm	r7!, {r0, r1, r2, r3}
   15580:	str	r8, [sp, #44]	; 0x2c
   15584:	stmia	lr!, {r0, r1, r2, r3}
   15588:	ldm	ip, {r0, r1, r2, r3}
   1558c:	stm	lr, {r0, r1, r2, r3}
   15590:	bl	10de0 <__errno_location@plt>
   15594:	cmn	r4, #-2147483647	; 0x80000001
   15598:	ldr	r5, [r6]
   1559c:	mov	r7, r0
   155a0:	movne	r0, #0
   155a4:	moveq	r0, #1
   155a8:	ldr	r3, [r7]
   155ac:	orrs	r0, r0, r4, lsr #31
   155b0:	str	r3, [sp, #24]
   155b4:	bne	1571c <__assert_fail@plt+0x4858>
   155b8:	ldr	r2, [r6, #4]
   155bc:	cmp	r4, r2
   155c0:	blt	15620 <__assert_fail@plt+0x475c>
   155c4:	add	r8, r6, #8
   155c8:	cmp	r5, r8
   155cc:	str	r2, [sp, #80]	; 0x50
   155d0:	beq	156ec <__assert_fail@plt+0x4828>
   155d4:	mov	r3, #8
   155d8:	sub	r2, r4, r2
   155dc:	mov	r0, r5
   155e0:	str	r3, [sp]
   155e4:	add	r2, r2, #1
   155e8:	add	r1, sp, #80	; 0x50
   155ec:	mvn	r3, #-2147483648	; 0x80000000
   155f0:	bl	17208 <__assert_fail@plt+0x6344>
   155f4:	mov	r5, r0
   155f8:	str	r0, [r6]
   155fc:	ldr	r0, [r6, #4]
   15600:	ldr	r2, [sp, #80]	; 0x50
   15604:	mov	r1, #0
   15608:	sub	r2, r2, r0
   1560c:	add	r0, r5, r0, lsl #3
   15610:	lsl	r2, r2, #3
   15614:	bl	10df8 <memset@plt>
   15618:	ldr	r3, [sp, #80]	; 0x50
   1561c:	str	r3, [r6, #4]
   15620:	add	fp, r5, r4, lsl #3
   15624:	ldr	r1, [sp, #36]	; 0x24
   15628:	ldr	r8, [r5, r4, lsl #3]
   1562c:	ldr	r6, [fp, #4]
   15630:	ldr	r2, [sp, #72]	; 0x48
   15634:	ldr	r3, [sp, #32]
   15638:	ldr	ip, [sp, #76]	; 0x4c
   1563c:	orr	r1, r1, #1
   15640:	add	sl, sp, #40	; 0x28
   15644:	str	r1, [sp, #28]
   15648:	str	r1, [sp, #4]
   1564c:	str	r2, [sp, #12]
   15650:	str	r3, [sp]
   15654:	mov	r0, r6
   15658:	mov	r1, r8
   1565c:	str	ip, [sp, #16]
   15660:	str	sl, [sp, #8]
   15664:	mvn	r3, #0
   15668:	mov	r2, r9
   1566c:	bl	12710 <__assert_fail@plt+0x184c>
   15670:	cmp	r8, r0
   15674:	bhi	156d8 <__assert_fail@plt+0x4814>
   15678:	ldr	r3, [pc, #164]	; 15724 <__assert_fail@plt+0x4860>
   1567c:	add	r8, r0, #1
   15680:	cmp	r6, r3
   15684:	str	r8, [r5, r4, lsl #3]
   15688:	beq	15694 <__assert_fail@plt+0x47d0>
   1568c:	mov	r0, r6
   15690:	bl	12444 <__assert_fail@plt+0x1580>
   15694:	mov	r0, r8
   15698:	bl	16fec <__assert_fail@plt+0x6128>
   1569c:	ldr	lr, [sp, #76]	; 0x4c
   156a0:	ldr	r3, [sp, #32]
   156a4:	ldr	ip, [sp, #72]	; 0x48
   156a8:	ldr	r4, [sp, #28]
   156ac:	mov	r2, r9
   156b0:	mov	r1, r8
   156b4:	str	r0, [fp, #4]
   156b8:	str	r3, [sp]
   156bc:	str	sl, [sp, #8]
   156c0:	str	r4, [sp, #4]
   156c4:	str	lr, [sp, #16]
   156c8:	str	ip, [sp, #12]
   156cc:	mvn	r3, #0
   156d0:	mov	r6, r0
   156d4:	bl	12710 <__assert_fail@plt+0x184c>
   156d8:	ldr	r3, [sp, #24]
   156dc:	mov	r0, r6
   156e0:	str	r3, [r7]
   156e4:	add	sp, sp, #180	; 0xb4
   156e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   156ec:	mov	r3, #8
   156f0:	sub	r2, r4, r2
   156f4:	add	r1, sp, #80	; 0x50
   156f8:	str	r3, [sp]
   156fc:	add	r2, r2, #1
   15700:	mvn	r3, #-2147483648	; 0x80000000
   15704:	bl	17208 <__assert_fail@plt+0x6344>
   15708:	mov	r5, r0
   1570c:	ldm	r8, {r0, r1}
   15710:	str	r5, [r6]
   15714:	stm	r5, {r0, r1}
   15718:	b	155fc <__assert_fail@plt+0x4738>
   1571c:	bl	10eac <abort@plt>
   15720:	strdeq	r9, [r2], -r4
   15724:	ldrdeq	r9, [r2], -r8
   15728:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1572c:	mov	r7, r1
   15730:	ldr	lr, [pc, #492]	; 15924 <__assert_fail@plt+0x4a60>
   15734:	mov	r8, r2
   15738:	mov	r4, r0
   1573c:	mov	fp, r3
   15740:	ldm	lr!, {r0, r1, r2, r3}
   15744:	sub	sp, sp, #100	; 0x64
   15748:	add	ip, sp, #48	; 0x30
   1574c:	mov	sl, #10
   15750:	stmia	ip!, {r0, r1, r2, r3}
   15754:	cmp	r8, #0
   15758:	cmpne	r7, #0
   1575c:	ldm	lr!, {r0, r1, r2, r3}
   15760:	str	sl, [sp, #48]	; 0x30
   15764:	stmia	ip!, {r0, r1, r2, r3}
   15768:	ldm	lr, {r0, r1, r2, r3}
   1576c:	stm	ip, {r0, r1, r2, r3}
   15770:	beq	15920 <__assert_fail@plt+0x4a5c>
   15774:	str	r7, [sp, #88]	; 0x58
   15778:	str	r8, [sp, #92]	; 0x5c
   1577c:	bl	10de0 <__errno_location@plt>
   15780:	ldr	r6, [pc, #416]	; 15928 <__assert_fail@plt+0x4a64>
   15784:	cmn	r4, #-2147483647	; 0x80000001
   15788:	ldr	r5, [r6]
   1578c:	mov	r9, r0
   15790:	movne	r0, #0
   15794:	moveq	r0, #1
   15798:	ldr	r3, [r9]
   1579c:	orrs	r0, r0, r4, lsr #31
   157a0:	str	r3, [sp, #28]
   157a4:	bne	15920 <__assert_fail@plt+0x4a5c>
   157a8:	ldr	r2, [r6, #4]
   157ac:	cmp	r4, r2
   157b0:	movlt	r3, sl
   157b4:	blt	15820 <__assert_fail@plt+0x495c>
   157b8:	add	r7, r6, #8
   157bc:	cmp	r5, r7
   157c0:	str	r2, [sp, #44]	; 0x2c
   157c4:	beq	158f0 <__assert_fail@plt+0x4a2c>
   157c8:	mov	r3, #8
   157cc:	sub	r2, r4, r2
   157d0:	mov	r0, r5
   157d4:	str	r3, [sp]
   157d8:	add	r2, r2, #1
   157dc:	mvn	r3, #-2147483648	; 0x80000000
   157e0:	add	r1, sp, #44	; 0x2c
   157e4:	bl	17208 <__assert_fail@plt+0x6344>
   157e8:	mov	r5, r0
   157ec:	str	r0, [r6]
   157f0:	ldr	r0, [r6, #4]
   157f4:	ldr	r2, [sp, #44]	; 0x2c
   157f8:	mov	r1, #0
   157fc:	sub	r2, r2, r0
   15800:	add	r0, r5, r0, lsl #3
   15804:	lsl	r2, r2, #3
   15808:	bl	10df8 <memset@plt>
   1580c:	ldr	r3, [sp, #48]	; 0x30
   15810:	ldr	r7, [sp, #88]	; 0x58
   15814:	ldr	r8, [sp, #92]	; 0x5c
   15818:	ldr	r2, [sp, #44]	; 0x2c
   1581c:	str	r2, [r6, #4]
   15820:	add	r2, r5, r4, lsl #3
   15824:	mov	r1, r2
   15828:	str	r2, [sp, #32]
   1582c:	ldr	r2, [sp, #52]	; 0x34
   15830:	ldr	r6, [r1, #4]
   15834:	ldr	sl, [r5, r4, lsl #3]
   15838:	orr	r2, r2, #1
   1583c:	str	r3, [sp]
   15840:	add	r3, sp, #56	; 0x38
   15844:	str	r2, [sp, #36]	; 0x24
   15848:	str	r2, [sp, #4]
   1584c:	str	r3, [sp, #8]
   15850:	mov	r0, r6
   15854:	str	r8, [sp, #16]
   15858:	str	r7, [sp, #12]
   1585c:	mov	r1, sl
   15860:	mvn	r3, #0
   15864:	mov	r2, fp
   15868:	bl	12710 <__assert_fail@plt+0x184c>
   1586c:	cmp	sl, r0
   15870:	bhi	158dc <__assert_fail@plt+0x4a18>
   15874:	ldr	r3, [pc, #176]	; 1592c <__assert_fail@plt+0x4a68>
   15878:	add	r7, r0, #1
   1587c:	cmp	r6, r3
   15880:	str	r7, [r5, r4, lsl #3]
   15884:	beq	15890 <__assert_fail@plt+0x49cc>
   15888:	mov	r0, r6
   1588c:	bl	12444 <__assert_fail@plt+0x1580>
   15890:	mov	r0, r7
   15894:	bl	16fec <__assert_fail@plt+0x6128>
   15898:	ldr	r3, [sp, #32]
   1589c:	ldr	lr, [sp, #92]	; 0x5c
   158a0:	ldr	ip, [sp, #88]	; 0x58
   158a4:	ldr	r4, [sp, #36]	; 0x24
   158a8:	mov	r2, fp
   158ac:	mov	r1, r7
   158b0:	str	r0, [r3, #4]
   158b4:	add	r3, sp, #56	; 0x38
   158b8:	str	r3, [sp, #8]
   158bc:	ldr	r3, [sp, #48]	; 0x30
   158c0:	str	r4, [sp, #4]
   158c4:	str	r3, [sp]
   158c8:	str	lr, [sp, #16]
   158cc:	str	ip, [sp, #12]
   158d0:	mvn	r3, #0
   158d4:	mov	r6, r0
   158d8:	bl	12710 <__assert_fail@plt+0x184c>
   158dc:	ldr	r3, [sp, #28]
   158e0:	mov	r0, r6
   158e4:	str	r3, [r9]
   158e8:	add	sp, sp, #100	; 0x64
   158ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   158f0:	mov	r3, #8
   158f4:	sub	r2, r4, r2
   158f8:	str	r3, [sp]
   158fc:	add	r1, sp, #44	; 0x2c
   15900:	add	r2, r2, #1
   15904:	mvn	r3, #-2147483648	; 0x80000000
   15908:	bl	17208 <__assert_fail@plt+0x6344>
   1590c:	mov	r5, r0
   15910:	ldm	r7, {r0, r1}
   15914:	str	r5, [r6]
   15918:	stm	r5, {r0, r1}
   1591c:	b	157f0 <__assert_fail@plt+0x492c>
   15920:	bl	10eac <abort@plt>
   15924:	andeq	r9, r2, r8, lsr #3
   15928:	strdeq	r9, [r2], -r4
   1592c:	ldrdeq	r9, [r2], -r8
   15930:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15934:	mov	r7, r1
   15938:	ldr	lr, [pc, #492]	; 15b2c <__assert_fail@plt+0x4c68>
   1593c:	mov	r8, r2
   15940:	mov	r4, r0
   15944:	mov	fp, r3
   15948:	ldm	lr!, {r0, r1, r2, r3}
   1594c:	sub	sp, sp, #100	; 0x64
   15950:	add	ip, sp, #48	; 0x30
   15954:	mov	sl, #10
   15958:	stmia	ip!, {r0, r1, r2, r3}
   1595c:	cmp	r8, #0
   15960:	cmpne	r7, #0
   15964:	ldm	lr!, {r0, r1, r2, r3}
   15968:	str	sl, [sp, #48]	; 0x30
   1596c:	stmia	ip!, {r0, r1, r2, r3}
   15970:	ldm	lr, {r0, r1, r2, r3}
   15974:	stm	ip, {r0, r1, r2, r3}
   15978:	beq	15b28 <__assert_fail@plt+0x4c64>
   1597c:	str	r7, [sp, #88]	; 0x58
   15980:	str	r8, [sp, #92]	; 0x5c
   15984:	bl	10de0 <__errno_location@plt>
   15988:	ldr	r6, [pc, #416]	; 15b30 <__assert_fail@plt+0x4c6c>
   1598c:	cmn	r4, #-2147483647	; 0x80000001
   15990:	ldr	r5, [r6]
   15994:	mov	r9, r0
   15998:	movne	r0, #0
   1599c:	moveq	r0, #1
   159a0:	ldr	r3, [r9]
   159a4:	orrs	r0, r0, r4, lsr #31
   159a8:	str	r3, [sp, #28]
   159ac:	bne	15b28 <__assert_fail@plt+0x4c64>
   159b0:	ldr	r2, [r6, #4]
   159b4:	cmp	r4, r2
   159b8:	movlt	r3, sl
   159bc:	blt	15a28 <__assert_fail@plt+0x4b64>
   159c0:	add	r7, r6, #8
   159c4:	cmp	r5, r7
   159c8:	str	r2, [sp, #44]	; 0x2c
   159cc:	beq	15af8 <__assert_fail@plt+0x4c34>
   159d0:	mov	r3, #8
   159d4:	sub	r2, r4, r2
   159d8:	mov	r0, r5
   159dc:	str	r3, [sp]
   159e0:	add	r2, r2, #1
   159e4:	mvn	r3, #-2147483648	; 0x80000000
   159e8:	add	r1, sp, #44	; 0x2c
   159ec:	bl	17208 <__assert_fail@plt+0x6344>
   159f0:	mov	r5, r0
   159f4:	str	r0, [r6]
   159f8:	ldr	r0, [r6, #4]
   159fc:	ldr	r2, [sp, #44]	; 0x2c
   15a00:	mov	r1, #0
   15a04:	sub	r2, r2, r0
   15a08:	add	r0, r5, r0, lsl #3
   15a0c:	lsl	r2, r2, #3
   15a10:	bl	10df8 <memset@plt>
   15a14:	ldr	r3, [sp, #48]	; 0x30
   15a18:	ldr	r7, [sp, #88]	; 0x58
   15a1c:	ldr	r8, [sp, #92]	; 0x5c
   15a20:	ldr	r2, [sp, #44]	; 0x2c
   15a24:	str	r2, [r6, #4]
   15a28:	add	r2, r5, r4, lsl #3
   15a2c:	mov	r1, r2
   15a30:	str	r2, [sp, #32]
   15a34:	ldr	r2, [sp, #52]	; 0x34
   15a38:	ldr	r6, [r1, #4]
   15a3c:	ldr	sl, [r5, r4, lsl #3]
   15a40:	orr	r2, r2, #1
   15a44:	str	r3, [sp]
   15a48:	add	r3, sp, #56	; 0x38
   15a4c:	str	r2, [sp, #36]	; 0x24
   15a50:	str	r2, [sp, #4]
   15a54:	str	r3, [sp, #8]
   15a58:	mov	r0, r6
   15a5c:	str	r8, [sp, #16]
   15a60:	str	r7, [sp, #12]
   15a64:	mov	r1, sl
   15a68:	ldr	r3, [sp, #136]	; 0x88
   15a6c:	mov	r2, fp
   15a70:	bl	12710 <__assert_fail@plt+0x184c>
   15a74:	cmp	sl, r0
   15a78:	bhi	15ae4 <__assert_fail@plt+0x4c20>
   15a7c:	ldr	r3, [pc, #176]	; 15b34 <__assert_fail@plt+0x4c70>
   15a80:	add	r7, r0, #1
   15a84:	cmp	r6, r3
   15a88:	str	r7, [r5, r4, lsl #3]
   15a8c:	beq	15a98 <__assert_fail@plt+0x4bd4>
   15a90:	mov	r0, r6
   15a94:	bl	12444 <__assert_fail@plt+0x1580>
   15a98:	mov	r0, r7
   15a9c:	bl	16fec <__assert_fail@plt+0x6128>
   15aa0:	ldr	r3, [sp, #32]
   15aa4:	ldr	lr, [sp, #92]	; 0x5c
   15aa8:	ldr	ip, [sp, #88]	; 0x58
   15aac:	ldr	r4, [sp, #36]	; 0x24
   15ab0:	mov	r2, fp
   15ab4:	mov	r1, r7
   15ab8:	str	r0, [r3, #4]
   15abc:	add	r3, sp, #56	; 0x38
   15ac0:	str	r3, [sp, #8]
   15ac4:	ldr	r3, [sp, #48]	; 0x30
   15ac8:	str	r4, [sp, #4]
   15acc:	str	r3, [sp]
   15ad0:	str	lr, [sp, #16]
   15ad4:	str	ip, [sp, #12]
   15ad8:	ldr	r3, [sp, #136]	; 0x88
   15adc:	mov	r6, r0
   15ae0:	bl	12710 <__assert_fail@plt+0x184c>
   15ae4:	ldr	r3, [sp, #28]
   15ae8:	mov	r0, r6
   15aec:	str	r3, [r9]
   15af0:	add	sp, sp, #100	; 0x64
   15af4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15af8:	mov	r3, #8
   15afc:	sub	r2, r4, r2
   15b00:	str	r3, [sp]
   15b04:	add	r1, sp, #44	; 0x2c
   15b08:	add	r2, r2, #1
   15b0c:	mvn	r3, #-2147483648	; 0x80000000
   15b10:	bl	17208 <__assert_fail@plt+0x6344>
   15b14:	mov	r5, r0
   15b18:	ldm	r7, {r0, r1}
   15b1c:	str	r5, [r6]
   15b20:	stm	r5, {r0, r1}
   15b24:	b	159f8 <__assert_fail@plt+0x4b34>
   15b28:	bl	10eac <abort@plt>
   15b2c:	andeq	r9, r2, r8, lsr #3
   15b30:	strdeq	r9, [r2], -r4
   15b34:	ldrdeq	r9, [r2], -r8
   15b38:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15b3c:	mov	r5, r0
   15b40:	ldr	lr, [pc, #452]	; 15d0c <__assert_fail@plt+0x4e48>
   15b44:	mov	r6, r1
   15b48:	mov	sl, r2
   15b4c:	ldm	lr!, {r0, r1, r2, r3}
   15b50:	sub	sp, sp, #92	; 0x5c
   15b54:	add	ip, sp, #40	; 0x28
   15b58:	cmp	r6, #0
   15b5c:	cmpne	r5, #0
   15b60:	stmia	ip!, {r0, r1, r2, r3}
   15b64:	mov	r9, #10
   15b68:	ldm	lr!, {r0, r1, r2, r3}
   15b6c:	moveq	fp, #1
   15b70:	movne	fp, #0
   15b74:	str	r9, [sp, #40]	; 0x28
   15b78:	stmia	ip!, {r0, r1, r2, r3}
   15b7c:	ldm	lr, {r0, r1, r2, r3}
   15b80:	stm	ip, {r0, r1, r2, r3}
   15b84:	beq	15d08 <__assert_fail@plt+0x4e44>
   15b88:	str	r5, [sp, #80]	; 0x50
   15b8c:	str	r6, [sp, #84]	; 0x54
   15b90:	bl	10de0 <__errno_location@plt>
   15b94:	ldr	r7, [pc, #372]	; 15d10 <__assert_fail@plt+0x4e4c>
   15b98:	ldr	r2, [r7, #4]
   15b9c:	ldr	r4, [r7]
   15ba0:	cmp	r2, #0
   15ba4:	ldr	r3, [r0]
   15ba8:	mov	r8, r0
   15bac:	str	r3, [sp, #24]
   15bb0:	movgt	r3, r9
   15bb4:	bgt	15c1c <__assert_fail@plt+0x4d58>
   15bb8:	add	r5, r7, #8
   15bbc:	cmp	r4, r5
   15bc0:	str	r2, [sp, #36]	; 0x24
   15bc4:	beq	15cd8 <__assert_fail@plt+0x4e14>
   15bc8:	mov	r3, #8
   15bcc:	mov	r0, r4
   15bd0:	str	r3, [sp]
   15bd4:	rsb	r2, r2, #1
   15bd8:	mvn	r3, #-2147483648	; 0x80000000
   15bdc:	add	r1, sp, #36	; 0x24
   15be0:	bl	17208 <__assert_fail@plt+0x6344>
   15be4:	mov	r4, r0
   15be8:	str	r0, [r7]
   15bec:	ldr	r0, [r7, #4]
   15bf0:	ldr	r2, [sp, #36]	; 0x24
   15bf4:	mov	r1, #0
   15bf8:	sub	r2, r2, r0
   15bfc:	add	r0, r4, r0, lsl #3
   15c00:	lsl	r2, r2, #3
   15c04:	bl	10df8 <memset@plt>
   15c08:	ldr	r3, [sp, #40]	; 0x28
   15c0c:	ldr	r5, [sp, #80]	; 0x50
   15c10:	ldr	r6, [sp, #84]	; 0x54
   15c14:	ldr	r2, [sp, #36]	; 0x24
   15c18:	str	r2, [r7, #4]
   15c1c:	ldr	r2, [sp, #44]	; 0x2c
   15c20:	ldr	r9, [r4]
   15c24:	ldr	r7, [r4, #4]
   15c28:	orr	r2, r2, #1
   15c2c:	add	fp, sp, #48	; 0x30
   15c30:	str	r2, [sp, #28]
   15c34:	str	r2, [sp, #4]
   15c38:	str	r3, [sp]
   15c3c:	str	r6, [sp, #16]
   15c40:	str	r5, [sp, #12]
   15c44:	mov	r1, r9
   15c48:	mov	r0, r7
   15c4c:	str	fp, [sp, #8]
   15c50:	mvn	r3, #0
   15c54:	mov	r2, sl
   15c58:	bl	12710 <__assert_fail@plt+0x184c>
   15c5c:	cmp	r9, r0
   15c60:	bhi	15cc4 <__assert_fail@plt+0x4e00>
   15c64:	ldr	r3, [pc, #168]	; 15d14 <__assert_fail@plt+0x4e50>
   15c68:	add	r5, r0, #1
   15c6c:	cmp	r7, r3
   15c70:	str	r5, [r4]
   15c74:	beq	15c80 <__assert_fail@plt+0x4dbc>
   15c78:	mov	r0, r7
   15c7c:	bl	12444 <__assert_fail@plt+0x1580>
   15c80:	mov	r0, r5
   15c84:	bl	16fec <__assert_fail@plt+0x6128>
   15c88:	ldr	lr, [sp, #84]	; 0x54
   15c8c:	ldr	r3, [sp, #40]	; 0x28
   15c90:	ldr	ip, [sp, #80]	; 0x50
   15c94:	mov	r2, sl
   15c98:	mov	r1, r5
   15c9c:	str	r0, [r4, #4]
   15ca0:	ldr	r4, [sp, #28]
   15ca4:	str	r3, [sp]
   15ca8:	str	fp, [sp, #8]
   15cac:	str	r4, [sp, #4]
   15cb0:	str	lr, [sp, #16]
   15cb4:	str	ip, [sp, #12]
   15cb8:	mvn	r3, #0
   15cbc:	mov	r7, r0
   15cc0:	bl	12710 <__assert_fail@plt+0x184c>
   15cc4:	ldr	r3, [sp, #24]
   15cc8:	mov	r0, r7
   15ccc:	str	r3, [r8]
   15cd0:	add	sp, sp, #92	; 0x5c
   15cd4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15cd8:	mov	r3, #8
   15cdc:	str	r3, [sp]
   15ce0:	add	r1, sp, #36	; 0x24
   15ce4:	rsb	r2, r2, #1
   15ce8:	mov	r0, fp
   15cec:	mvn	r3, #-2147483648	; 0x80000000
   15cf0:	bl	17208 <__assert_fail@plt+0x6344>
   15cf4:	mov	r4, r0
   15cf8:	ldm	r5, {r0, r1}
   15cfc:	str	r4, [r7]
   15d00:	stm	r4, {r0, r1}
   15d04:	b	15bec <__assert_fail@plt+0x4d28>
   15d08:	bl	10eac <abort@plt>
   15d0c:	andeq	r9, r2, r8, lsr #3
   15d10:	strdeq	r9, [r2], -r4
   15d14:	ldrdeq	r9, [r2], -r8
   15d18:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15d1c:	mov	r5, r0
   15d20:	ldr	lr, [pc, #464]	; 15ef8 <__assert_fail@plt+0x5034>
   15d24:	mov	r6, r1
   15d28:	mov	sl, r2
   15d2c:	mov	fp, r3
   15d30:	ldm	lr!, {r0, r1, r2, r3}
   15d34:	sub	sp, sp, #92	; 0x5c
   15d38:	add	ip, sp, #40	; 0x28
   15d3c:	cmp	r6, #0
   15d40:	cmpne	r5, #0
   15d44:	stmia	ip!, {r0, r1, r2, r3}
   15d48:	moveq	r4, #1
   15d4c:	ldm	lr!, {r0, r1, r2, r3}
   15d50:	movne	r4, #0
   15d54:	mov	r9, #10
   15d58:	str	r4, [sp, #28]
   15d5c:	stmia	ip!, {r0, r1, r2, r3}
   15d60:	ldm	lr, {r0, r1, r2, r3}
   15d64:	str	r9, [sp, #40]	; 0x28
   15d68:	stm	ip, {r0, r1, r2, r3}
   15d6c:	beq	15ef4 <__assert_fail@plt+0x5030>
   15d70:	str	r5, [sp, #80]	; 0x50
   15d74:	str	r6, [sp, #84]	; 0x54
   15d78:	bl	10de0 <__errno_location@plt>
   15d7c:	ldr	r7, [pc, #376]	; 15efc <__assert_fail@plt+0x5038>
   15d80:	ldr	r2, [r7, #4]
   15d84:	ldr	r4, [r7]
   15d88:	cmp	r2, #0
   15d8c:	ldr	r3, [r0]
   15d90:	mov	r8, r0
   15d94:	str	r3, [sp, #24]
   15d98:	movgt	r3, r9
   15d9c:	bgt	15e04 <__assert_fail@plt+0x4f40>
   15da0:	add	r5, r7, #8
   15da4:	cmp	r4, r5
   15da8:	str	r2, [sp, #36]	; 0x24
   15dac:	beq	15ec4 <__assert_fail@plt+0x5000>
   15db0:	mov	r3, #8
   15db4:	mov	r0, r4
   15db8:	str	r3, [sp]
   15dbc:	rsb	r2, r2, #1
   15dc0:	mvn	r3, #-2147483648	; 0x80000000
   15dc4:	add	r1, sp, #36	; 0x24
   15dc8:	bl	17208 <__assert_fail@plt+0x6344>
   15dcc:	mov	r4, r0
   15dd0:	str	r0, [r7]
   15dd4:	ldr	r0, [r7, #4]
   15dd8:	ldr	r2, [sp, #36]	; 0x24
   15ddc:	mov	r1, #0
   15de0:	sub	r2, r2, r0
   15de4:	add	r0, r4, r0, lsl #3
   15de8:	lsl	r2, r2, #3
   15dec:	bl	10df8 <memset@plt>
   15df0:	ldr	r3, [sp, #40]	; 0x28
   15df4:	ldr	r5, [sp, #80]	; 0x50
   15df8:	ldr	r6, [sp, #84]	; 0x54
   15dfc:	ldr	r2, [sp, #36]	; 0x24
   15e00:	str	r2, [r7, #4]
   15e04:	ldr	r2, [sp, #44]	; 0x2c
   15e08:	ldr	r9, [r4]
   15e0c:	ldr	r7, [r4, #4]
   15e10:	orr	r2, r2, #1
   15e14:	str	r3, [sp]
   15e18:	add	r3, sp, #48	; 0x30
   15e1c:	str	r2, [sp, #28]
   15e20:	str	r2, [sp, #4]
   15e24:	str	r3, [sp, #8]
   15e28:	str	r6, [sp, #16]
   15e2c:	str	r5, [sp, #12]
   15e30:	mov	r1, r9
   15e34:	mov	r0, r7
   15e38:	mov	r3, fp
   15e3c:	mov	r2, sl
   15e40:	bl	12710 <__assert_fail@plt+0x184c>
   15e44:	cmp	r9, r0
   15e48:	bhi	15eb0 <__assert_fail@plt+0x4fec>
   15e4c:	ldr	r3, [pc, #172]	; 15f00 <__assert_fail@plt+0x503c>
   15e50:	add	r5, r0, #1
   15e54:	cmp	r7, r3
   15e58:	str	r5, [r4]
   15e5c:	beq	15e68 <__assert_fail@plt+0x4fa4>
   15e60:	mov	r0, r7
   15e64:	bl	12444 <__assert_fail@plt+0x1580>
   15e68:	mov	r0, r5
   15e6c:	bl	16fec <__assert_fail@plt+0x6128>
   15e70:	add	lr, sp, #48	; 0x30
   15e74:	ldr	ip, [sp, #84]	; 0x54
   15e78:	mov	r1, r5
   15e7c:	ldr	r5, [sp, #28]
   15e80:	mov	r3, fp
   15e84:	mov	r2, sl
   15e88:	str	r0, [r4, #4]
   15e8c:	ldr	r4, [sp, #80]	; 0x50
   15e90:	str	lr, [sp, #8]
   15e94:	ldr	lr, [sp, #40]	; 0x28
   15e98:	str	r5, [sp, #4]
   15e9c:	str	ip, [sp, #16]
   15ea0:	str	r4, [sp, #12]
   15ea4:	str	lr, [sp]
   15ea8:	mov	r7, r0
   15eac:	bl	12710 <__assert_fail@plt+0x184c>
   15eb0:	ldr	r3, [sp, #24]
   15eb4:	mov	r0, r7
   15eb8:	str	r3, [r8]
   15ebc:	add	sp, sp, #92	; 0x5c
   15ec0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15ec4:	mov	r3, #8
   15ec8:	str	r3, [sp]
   15ecc:	add	r1, sp, #36	; 0x24
   15ed0:	rsb	r2, r2, #1
   15ed4:	ldr	r0, [sp, #28]
   15ed8:	mvn	r3, #-2147483648	; 0x80000000
   15edc:	bl	17208 <__assert_fail@plt+0x6344>
   15ee0:	mov	r4, r0
   15ee4:	ldm	r5, {r0, r1}
   15ee8:	str	r4, [r7]
   15eec:	stm	r4, {r0, r1}
   15ef0:	b	15dd4 <__assert_fail@plt+0x4f10>
   15ef4:	bl	10eac <abort@plt>
   15ef8:	andeq	r9, r2, r8, lsr #3
   15efc:	strdeq	r9, [r2], -r4
   15f00:	ldrdeq	r9, [r2], -r8
   15f04:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15f08:	sub	sp, sp, #52	; 0x34
   15f0c:	mov	r5, r0
   15f10:	mov	sl, r1
   15f14:	mov	fp, r2
   15f18:	bl	10de0 <__errno_location@plt>
   15f1c:	ldr	r4, [pc, #404]	; 160b8 <__assert_fail@plt+0x51f4>
   15f20:	cmn	r5, #-2147483647	; 0x80000001
   15f24:	ldr	r6, [r4]
   15f28:	mov	r8, r0
   15f2c:	movne	r0, #0
   15f30:	moveq	r0, #1
   15f34:	ldr	r3, [r8]
   15f38:	orrs	r0, r0, r5, lsr #31
   15f3c:	str	r3, [sp, #28]
   15f40:	bne	160b4 <__assert_fail@plt+0x51f0>
   15f44:	ldr	r2, [r4, #4]
   15f48:	cmp	r5, r2
   15f4c:	blt	15fac <__assert_fail@plt+0x50e8>
   15f50:	add	r7, r4, #8
   15f54:	cmp	r6, r7
   15f58:	str	r2, [sp, #44]	; 0x2c
   15f5c:	beq	16084 <__assert_fail@plt+0x51c0>
   15f60:	mov	r3, #8
   15f64:	sub	r2, r5, r2
   15f68:	mov	r0, r6
   15f6c:	str	r3, [sp]
   15f70:	add	r2, r2, #1
   15f74:	mvn	r3, #-2147483648	; 0x80000000
   15f78:	add	r1, sp, #44	; 0x2c
   15f7c:	bl	17208 <__assert_fail@plt+0x6344>
   15f80:	mov	r6, r0
   15f84:	str	r0, [r4]
   15f88:	ldr	r0, [r4, #4]
   15f8c:	ldr	r2, [sp, #44]	; 0x2c
   15f90:	mov	r1, #0
   15f94:	sub	r2, r2, r0
   15f98:	add	r0, r6, r0, lsl #3
   15f9c:	lsl	r2, r2, #3
   15fa0:	bl	10df8 <memset@plt>
   15fa4:	ldr	r3, [sp, #44]	; 0x2c
   15fa8:	str	r3, [r4, #4]
   15fac:	ldr	r2, [r4, #56]	; 0x38
   15fb0:	add	r3, r6, r5, lsl #3
   15fb4:	ldr	r1, [r4, #20]
   15fb8:	ldr	r7, [r3, #4]
   15fbc:	ldr	r9, [r6, r5, lsl #3]
   15fc0:	ldr	ip, [r4, #60]	; 0x3c
   15fc4:	str	r3, [sp, #32]
   15fc8:	ldr	r3, [r4, #16]
   15fcc:	str	r2, [sp, #12]
   15fd0:	ldr	r2, [pc, #228]	; 160bc <__assert_fail@plt+0x51f8>
   15fd4:	orr	r1, r1, #1
   15fd8:	str	r1, [sp, #36]	; 0x24
   15fdc:	str	r1, [sp, #4]
   15fe0:	str	r2, [sp, #8]
   15fe4:	str	r3, [sp]
   15fe8:	mov	r0, r7
   15fec:	mov	r1, r9
   15ff0:	str	ip, [sp, #16]
   15ff4:	mov	r3, fp
   15ff8:	mov	r2, sl
   15ffc:	bl	12710 <__assert_fail@plt+0x184c>
   16000:	cmp	r9, r0
   16004:	bhi	16070 <__assert_fail@plt+0x51ac>
   16008:	ldr	r3, [pc, #176]	; 160c0 <__assert_fail@plt+0x51fc>
   1600c:	add	r9, r0, #1
   16010:	cmp	r7, r3
   16014:	str	r9, [r6, r5, lsl #3]
   16018:	beq	16024 <__assert_fail@plt+0x5160>
   1601c:	mov	r0, r7
   16020:	bl	12444 <__assert_fail@plt+0x1580>
   16024:	mov	r0, r9
   16028:	bl	16fec <__assert_fail@plt+0x6128>
   1602c:	ldr	ip, [sp, #32]
   16030:	ldr	lr, [r4, #60]	; 0x3c
   16034:	ldr	r5, [r4, #56]	; 0x38
   16038:	mov	r3, fp
   1603c:	mov	r2, sl
   16040:	mov	r1, r9
   16044:	str	r0, [ip, #4]
   16048:	ldr	ip, [r4, #16]
   1604c:	ldr	r4, [pc, #104]	; 160bc <__assert_fail@plt+0x51f8>
   16050:	str	lr, [sp, #16]
   16054:	str	r4, [sp, #8]
   16058:	ldr	r4, [sp, #36]	; 0x24
   1605c:	str	r5, [sp, #12]
   16060:	str	r4, [sp, #4]
   16064:	str	ip, [sp]
   16068:	mov	r7, r0
   1606c:	bl	12710 <__assert_fail@plt+0x184c>
   16070:	ldr	r3, [sp, #28]
   16074:	mov	r0, r7
   16078:	str	r3, [r8]
   1607c:	add	sp, sp, #52	; 0x34
   16080:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16084:	mov	r3, #8
   16088:	sub	r2, r5, r2
   1608c:	str	r3, [sp]
   16090:	add	r1, sp, #44	; 0x2c
   16094:	add	r2, r2, #1
   16098:	mvn	r3, #-2147483648	; 0x80000000
   1609c:	bl	17208 <__assert_fail@plt+0x6344>
   160a0:	mov	r6, r0
   160a4:	ldm	r7, {r0, r1}
   160a8:	str	r6, [r4]
   160ac:	stm	r6, {r0, r1}
   160b0:	b	15f88 <__assert_fail@plt+0x50c4>
   160b4:	bl	10eac <abort@plt>
   160b8:	strdeq	r9, [r2], -r4
   160bc:	andeq	r9, r2, ip, lsl #2
   160c0:	ldrdeq	r9, [r2], -r8
   160c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   160c8:	sub	sp, sp, #44	; 0x2c
   160cc:	mov	r9, r0
   160d0:	mov	sl, r1
   160d4:	bl	10de0 <__errno_location@plt>
   160d8:	ldr	r4, [pc, #360]	; 16248 <__assert_fail@plt+0x5384>
   160dc:	ldr	r2, [r4, #4]
   160e0:	ldr	r5, [r4]
   160e4:	cmp	r2, #0
   160e8:	ldr	r3, [r0]
   160ec:	mov	r7, r0
   160f0:	str	r3, [sp, #24]
   160f4:	bgt	16150 <__assert_fail@plt+0x528c>
   160f8:	add	r6, r4, #8
   160fc:	cmp	r5, r6
   16100:	str	r2, [sp, #36]	; 0x24
   16104:	beq	16218 <__assert_fail@plt+0x5354>
   16108:	mov	r3, #8
   1610c:	mov	r0, r5
   16110:	str	r3, [sp]
   16114:	rsb	r2, r2, #1
   16118:	mvn	r3, #-2147483648	; 0x80000000
   1611c:	add	r1, sp, #36	; 0x24
   16120:	bl	17208 <__assert_fail@plt+0x6344>
   16124:	mov	r5, r0
   16128:	str	r0, [r4]
   1612c:	ldr	r0, [r4, #4]
   16130:	ldr	r2, [sp, #36]	; 0x24
   16134:	mov	r1, #0
   16138:	sub	r2, r2, r0
   1613c:	add	r0, r5, r0, lsl #3
   16140:	lsl	r2, r2, #3
   16144:	bl	10df8 <memset@plt>
   16148:	ldr	r3, [sp, #36]	; 0x24
   1614c:	str	r3, [r4, #4]
   16150:	ldr	r1, [r4, #20]
   16154:	ldr	r8, [r5]
   16158:	ldr	r6, [r5, #4]
   1615c:	ldr	r2, [r4, #56]	; 0x38
   16160:	ldr	r3, [r4, #16]
   16164:	ldr	ip, [r4, #60]	; 0x3c
   16168:	ldr	fp, [pc, #220]	; 1624c <__assert_fail@plt+0x5388>
   1616c:	orr	r1, r1, #1
   16170:	str	r1, [sp, #28]
   16174:	str	r1, [sp, #4]
   16178:	str	r2, [sp, #12]
   1617c:	str	r3, [sp]
   16180:	mov	r1, r8
   16184:	mov	r0, r6
   16188:	str	ip, [sp, #16]
   1618c:	str	fp, [sp, #8]
   16190:	mov	r3, sl
   16194:	mov	r2, r9
   16198:	bl	12710 <__assert_fail@plt+0x184c>
   1619c:	cmp	r8, r0
   161a0:	bhi	16204 <__assert_fail@plt+0x5340>
   161a4:	ldr	r3, [pc, #164]	; 16250 <__assert_fail@plt+0x538c>
   161a8:	add	r8, r0, #1
   161ac:	cmp	r6, r3
   161b0:	str	r8, [r5]
   161b4:	beq	161c0 <__assert_fail@plt+0x52fc>
   161b8:	mov	r0, r6
   161bc:	bl	12444 <__assert_fail@plt+0x1580>
   161c0:	mov	r0, r8
   161c4:	bl	16fec <__assert_fail@plt+0x6128>
   161c8:	ldr	lr, [r4, #60]	; 0x3c
   161cc:	ldr	ip, [r4, #16]
   161d0:	mov	r3, sl
   161d4:	mov	r2, r9
   161d8:	mov	r1, r8
   161dc:	str	r0, [r5, #4]
   161e0:	ldr	r5, [r4, #56]	; 0x38
   161e4:	ldr	r4, [sp, #28]
   161e8:	str	fp, [sp, #8]
   161ec:	str	r4, [sp, #4]
   161f0:	str	lr, [sp, #16]
   161f4:	str	r5, [sp, #12]
   161f8:	str	ip, [sp]
   161fc:	mov	r6, r0
   16200:	bl	12710 <__assert_fail@plt+0x184c>
   16204:	ldr	r3, [sp, #24]
   16208:	mov	r0, r6
   1620c:	str	r3, [r7]
   16210:	add	sp, sp, #44	; 0x2c
   16214:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16218:	mov	r3, #8
   1621c:	str	r3, [sp]
   16220:	add	r1, sp, #36	; 0x24
   16224:	rsb	r2, r2, #1
   16228:	mvn	r3, #-2147483648	; 0x80000000
   1622c:	mov	r0, #0
   16230:	bl	17208 <__assert_fail@plt+0x6344>
   16234:	mov	r5, r0
   16238:	ldm	r6, {r0, r1}
   1623c:	str	r5, [r4]
   16240:	stm	r5, {r0, r1}
   16244:	b	1612c <__assert_fail@plt+0x5268>
   16248:	strdeq	r9, [r2], -r4
   1624c:	andeq	r9, r2, ip, lsl #2
   16250:	ldrdeq	r9, [r2], -r8
   16254:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16258:	sub	sp, sp, #44	; 0x2c
   1625c:	mov	r5, r0
   16260:	mov	sl, r1
   16264:	bl	10de0 <__errno_location@plt>
   16268:	ldr	r4, [pc, #396]	; 163fc <__assert_fail@plt+0x5538>
   1626c:	cmn	r5, #-2147483647	; 0x80000001
   16270:	ldr	r6, [r4]
   16274:	mov	r8, r0
   16278:	movne	r0, #0
   1627c:	moveq	r0, #1
   16280:	ldr	r3, [r8]
   16284:	orrs	r0, r0, r5, lsr #31
   16288:	str	r3, [sp, #24]
   1628c:	bne	163f8 <__assert_fail@plt+0x5534>
   16290:	ldr	r2, [r4, #4]
   16294:	cmp	r5, r2
   16298:	blt	162f8 <__assert_fail@plt+0x5434>
   1629c:	add	r7, r4, #8
   162a0:	cmp	r6, r7
   162a4:	str	r2, [sp, #36]	; 0x24
   162a8:	beq	163c8 <__assert_fail@plt+0x5504>
   162ac:	mov	r3, #8
   162b0:	sub	r2, r5, r2
   162b4:	mov	r0, r6
   162b8:	str	r3, [sp]
   162bc:	add	r2, r2, #1
   162c0:	mvn	r3, #-2147483648	; 0x80000000
   162c4:	add	r1, sp, #36	; 0x24
   162c8:	bl	17208 <__assert_fail@plt+0x6344>
   162cc:	mov	r6, r0
   162d0:	str	r0, [r4]
   162d4:	ldr	r0, [r4, #4]
   162d8:	ldr	r2, [sp, #36]	; 0x24
   162dc:	mov	r1, #0
   162e0:	sub	r2, r2, r0
   162e4:	add	r0, r6, r0, lsl #3
   162e8:	lsl	r2, r2, #3
   162ec:	bl	10df8 <memset@plt>
   162f0:	ldr	r3, [sp, #36]	; 0x24
   162f4:	str	r3, [r4, #4]
   162f8:	ldr	r2, [r4, #56]	; 0x38
   162fc:	add	fp, r6, r5, lsl #3
   16300:	ldr	r1, [r4, #20]
   16304:	ldr	r9, [r6, r5, lsl #3]
   16308:	ldr	r7, [fp, #4]
   1630c:	ldr	r3, [r4, #16]
   16310:	ldr	ip, [r4, #60]	; 0x3c
   16314:	str	r2, [sp, #12]
   16318:	ldr	r2, [pc, #224]	; 16400 <__assert_fail@plt+0x553c>
   1631c:	orr	r1, r1, #1
   16320:	str	r1, [sp, #28]
   16324:	str	r1, [sp, #4]
   16328:	str	r2, [sp, #8]
   1632c:	str	r3, [sp]
   16330:	mov	r0, r7
   16334:	mov	r1, r9
   16338:	str	ip, [sp, #16]
   1633c:	mvn	r3, #0
   16340:	mov	r2, sl
   16344:	bl	12710 <__assert_fail@plt+0x184c>
   16348:	cmp	r9, r0
   1634c:	bhi	163b4 <__assert_fail@plt+0x54f0>
   16350:	ldr	r3, [pc, #172]	; 16404 <__assert_fail@plt+0x5540>
   16354:	add	r9, r0, #1
   16358:	cmp	r7, r3
   1635c:	str	r9, [r6, r5, lsl #3]
   16360:	beq	1636c <__assert_fail@plt+0x54a8>
   16364:	mov	r0, r7
   16368:	bl	12444 <__assert_fail@plt+0x1580>
   1636c:	mov	r0, r9
   16370:	bl	16fec <__assert_fail@plt+0x6128>
   16374:	ldr	ip, [r4, #60]	; 0x3c
   16378:	ldr	r3, [r4, #16]
   1637c:	ldr	lr, [r4, #56]	; 0x38
   16380:	ldr	r4, [pc, #120]	; 16400 <__assert_fail@plt+0x553c>
   16384:	mov	r2, sl
   16388:	mov	r1, r9
   1638c:	str	r0, [fp, #4]
   16390:	str	r4, [sp, #8]
   16394:	ldr	r4, [sp, #28]
   16398:	str	r3, [sp]
   1639c:	str	r4, [sp, #4]
   163a0:	str	ip, [sp, #16]
   163a4:	str	lr, [sp, #12]
   163a8:	mvn	r3, #0
   163ac:	mov	r7, r0
   163b0:	bl	12710 <__assert_fail@plt+0x184c>
   163b4:	ldr	r3, [sp, #24]
   163b8:	mov	r0, r7
   163bc:	str	r3, [r8]
   163c0:	add	sp, sp, #44	; 0x2c
   163c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   163c8:	mov	r3, #8
   163cc:	sub	r2, r5, r2
   163d0:	str	r3, [sp]
   163d4:	add	r1, sp, #36	; 0x24
   163d8:	add	r2, r2, #1
   163dc:	mvn	r3, #-2147483648	; 0x80000000
   163e0:	bl	17208 <__assert_fail@plt+0x6344>
   163e4:	mov	r6, r0
   163e8:	ldm	r7, {r0, r1}
   163ec:	str	r6, [r4]
   163f0:	stm	r6, {r0, r1}
   163f4:	b	162d4 <__assert_fail@plt+0x5410>
   163f8:	bl	10eac <abort@plt>
   163fc:	strdeq	r9, [r2], -r4
   16400:	andeq	r9, r2, ip, lsl #2
   16404:	ldrdeq	r9, [r2], -r8
   16408:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1640c:	sub	sp, sp, #44	; 0x2c
   16410:	mov	sl, r0
   16414:	bl	10de0 <__errno_location@plt>
   16418:	ldr	r4, [pc, #348]	; 1657c <__assert_fail@plt+0x56b8>
   1641c:	ldr	r2, [r4, #4]
   16420:	ldr	r5, [r4]
   16424:	cmp	r2, #0
   16428:	ldr	r3, [r0]
   1642c:	mov	r8, r0
   16430:	str	r3, [sp, #28]
   16434:	bgt	16490 <__assert_fail@plt+0x55cc>
   16438:	add	r6, r4, #8
   1643c:	cmp	r5, r6
   16440:	str	r2, [sp, #36]	; 0x24
   16444:	beq	1654c <__assert_fail@plt+0x5688>
   16448:	mov	r3, #8
   1644c:	mov	r0, r5
   16450:	str	r3, [sp]
   16454:	rsb	r2, r2, #1
   16458:	mvn	r3, #-2147483648	; 0x80000000
   1645c:	add	r1, sp, #36	; 0x24
   16460:	bl	17208 <__assert_fail@plt+0x6344>
   16464:	mov	r5, r0
   16468:	str	r0, [r4]
   1646c:	ldr	r0, [r4, #4]
   16470:	ldr	r2, [sp, #36]	; 0x24
   16474:	mov	r1, #0
   16478:	sub	r2, r2, r0
   1647c:	add	r0, r5, r0, lsl #3
   16480:	lsl	r2, r2, #3
   16484:	bl	10df8 <memset@plt>
   16488:	ldr	r3, [sp, #36]	; 0x24
   1648c:	str	r3, [r4, #4]
   16490:	ldr	r7, [r4, #20]
   16494:	ldr	r9, [r5]
   16498:	ldr	r6, [r5, #4]
   1649c:	ldr	r2, [r4, #56]	; 0x38
   164a0:	ldr	r3, [r4, #16]
   164a4:	ldr	ip, [r4, #60]	; 0x3c
   164a8:	ldr	fp, [pc, #208]	; 16580 <__assert_fail@plt+0x56bc>
   164ac:	orr	r7, r7, #1
   164b0:	str	r2, [sp, #12]
   164b4:	str	r3, [sp]
   164b8:	str	r7, [sp, #4]
   164bc:	mov	r1, r9
   164c0:	mov	r0, r6
   164c4:	str	ip, [sp, #16]
   164c8:	str	fp, [sp, #8]
   164cc:	mvn	r3, #0
   164d0:	mov	r2, sl
   164d4:	bl	12710 <__assert_fail@plt+0x184c>
   164d8:	cmp	r9, r0
   164dc:	bhi	16538 <__assert_fail@plt+0x5674>
   164e0:	ldr	r3, [pc, #156]	; 16584 <__assert_fail@plt+0x56c0>
   164e4:	add	r9, r0, #1
   164e8:	cmp	r6, r3
   164ec:	str	r9, [r5]
   164f0:	beq	164fc <__assert_fail@plt+0x5638>
   164f4:	mov	r0, r6
   164f8:	bl	12444 <__assert_fail@plt+0x1580>
   164fc:	mov	r0, r9
   16500:	bl	16fec <__assert_fail@plt+0x6128>
   16504:	ldr	ip, [r4, #60]	; 0x3c
   16508:	ldr	r3, [r4, #16]
   1650c:	ldr	lr, [r4, #56]	; 0x38
   16510:	mov	r2, sl
   16514:	mov	r1, r9
   16518:	str	r0, [r5, #4]
   1651c:	str	r3, [sp]
   16520:	stmib	sp, {r7, fp}
   16524:	str	ip, [sp, #16]
   16528:	str	lr, [sp, #12]
   1652c:	mvn	r3, #0
   16530:	mov	r6, r0
   16534:	bl	12710 <__assert_fail@plt+0x184c>
   16538:	ldr	r3, [sp, #28]
   1653c:	mov	r0, r6
   16540:	str	r3, [r8]
   16544:	add	sp, sp, #44	; 0x2c
   16548:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1654c:	mov	r3, #8
   16550:	str	r3, [sp]
   16554:	add	r1, sp, #36	; 0x24
   16558:	rsb	r2, r2, #1
   1655c:	mvn	r3, #-2147483648	; 0x80000000
   16560:	mov	r0, #0
   16564:	bl	17208 <__assert_fail@plt+0x6344>
   16568:	mov	r5, r0
   1656c:	ldm	r6, {r0, r1}
   16570:	str	r5, [r4]
   16574:	stm	r5, {r0, r1}
   16578:	b	1646c <__assert_fail@plt+0x55a8>
   1657c:	strdeq	r9, [r2], -r4
   16580:	andeq	r9, r2, ip, lsl #2
   16584:	ldrdeq	r9, [r2], -r8
   16588:	push	{r4, r5, r6, lr}
   1658c:	sub	sp, sp, #32
   16590:	cmp	r1, #0
   16594:	mov	r4, r0
   16598:	ldr	r5, [sp, #48]	; 0x30
   1659c:	ldr	r6, [sp, #52]	; 0x34
   165a0:	beq	168b8 <__assert_fail@plt+0x59f4>
   165a4:	stm	sp, {r2, r3}
   165a8:	mov	r3, r1
   165ac:	ldr	r2, [pc, #808]	; 168dc <__assert_fail@plt+0x5a18>
   165b0:	mov	r1, #1
   165b4:	bl	10e1c <__fprintf_chk@plt>
   165b8:	mov	r2, #5
   165bc:	ldr	r1, [pc, #796]	; 168e0 <__assert_fail@plt+0x5a1c>
   165c0:	mov	r0, #0
   165c4:	bl	10d08 <dcgettext@plt>
   165c8:	ldr	r3, [pc, #788]	; 168e4 <__assert_fail@plt+0x5a20>
   165cc:	ldr	r2, [pc, #788]	; 168e8 <__assert_fail@plt+0x5a24>
   165d0:	str	r3, [sp]
   165d4:	mov	r1, #1
   165d8:	mov	r3, r0
   165dc:	mov	r0, r4
   165e0:	bl	10e1c <__fprintf_chk@plt>
   165e4:	mov	r1, r4
   165e8:	mov	r0, #10
   165ec:	bl	10cfc <fputc_unlocked@plt>
   165f0:	mov	r2, #5
   165f4:	ldr	r1, [pc, #752]	; 168ec <__assert_fail@plt+0x5a28>
   165f8:	mov	r0, #0
   165fc:	bl	10d08 <dcgettext@plt>
   16600:	mov	r1, #1
   16604:	ldr	r3, [pc, #740]	; 168f0 <__assert_fail@plt+0x5a2c>
   16608:	mov	r2, r0
   1660c:	mov	r0, r4
   16610:	bl	10e1c <__fprintf_chk@plt>
   16614:	mov	r1, r4
   16618:	mov	r0, #10
   1661c:	bl	10cfc <fputc_unlocked@plt>
   16620:	cmp	r6, #9
   16624:	ldrls	pc, [pc, r6, lsl #2]
   16628:	b	168d0 <__assert_fail@plt+0x5a0c>
   1662c:			; <UNDEFINED> instruction: 0x000166b0
   16630:			; <UNDEFINED> instruction: 0x000166b8
   16634:	andeq	r6, r1, r4, ror #13
   16638:	andeq	r6, r1, r8, lsl r7
   1663c:	andeq	r6, r1, r4, asr r7
   16640:	muleq	r1, r0, r7
   16644:	andeq	r6, r1, ip, asr #15
   16648:	andeq	r6, r1, r0, lsl r8
   1664c:	andeq	r6, r1, r0, ror #16
   16650:	andeq	r6, r1, r4, asr r6
   16654:	ldr	r1, [pc, #664]	; 168f4 <__assert_fail@plt+0x5a30>
   16658:	mov	r2, #5
   1665c:	mov	r0, #0
   16660:	bl	10d08 <dcgettext@plt>
   16664:	ldr	ip, [r5, #32]
   16668:	ldr	r1, [r5, #28]
   1666c:	ldr	r2, [r5, #24]
   16670:	ldr	r3, [r5]
   16674:	ldr	r6, [r5, #20]
   16678:	str	ip, [sp, #28]
   1667c:	ldr	lr, [r5, #16]
   16680:	str	r1, [sp, #24]
   16684:	ldr	ip, [r5, #12]
   16688:	str	r2, [sp, #20]
   1668c:	ldr	r1, [r5, #8]
   16690:	ldr	r2, [r5, #4]
   16694:	str	r6, [sp, #16]
   16698:	stmib	sp, {r1, ip, lr}
   1669c:	mov	r1, #1
   166a0:	str	r2, [sp]
   166a4:	mov	r2, r0
   166a8:	mov	r0, r4
   166ac:	bl	10e1c <__fprintf_chk@plt>
   166b0:	add	sp, sp, #32
   166b4:	pop	{r4, r5, r6, pc}
   166b8:	mov	r2, #5
   166bc:	ldr	r1, [pc, #564]	; 168f8 <__assert_fail@plt+0x5a34>
   166c0:	mov	r0, #0
   166c4:	bl	10d08 <dcgettext@plt>
   166c8:	ldr	r3, [r5]
   166cc:	mov	r1, #1
   166d0:	mov	r2, r0
   166d4:	mov	r0, r4
   166d8:	add	sp, sp, #32
   166dc:	pop	{r4, r5, r6, lr}
   166e0:	b	10e1c <__fprintf_chk@plt>
   166e4:	mov	r2, #5
   166e8:	ldr	r1, [pc, #524]	; 168fc <__assert_fail@plt+0x5a38>
   166ec:	mov	r0, #0
   166f0:	bl	10d08 <dcgettext@plt>
   166f4:	ldr	r2, [r5, #4]
   166f8:	ldr	r3, [r5]
   166fc:	mov	r1, #1
   16700:	str	r2, [sp, #48]	; 0x30
   16704:	mov	r2, r0
   16708:	mov	r0, r4
   1670c:	add	sp, sp, #32
   16710:	pop	{r4, r5, r6, lr}
   16714:	b	10e1c <__fprintf_chk@plt>
   16718:	mov	r2, #5
   1671c:	ldr	r1, [pc, #476]	; 16900 <__assert_fail@plt+0x5a3c>
   16720:	mov	r0, #0
   16724:	bl	10d08 <dcgettext@plt>
   16728:	ldr	r1, [r5, #8]
   1672c:	ldr	r2, [r5, #4]
   16730:	ldr	r3, [r5]
   16734:	str	r1, [sp, #52]	; 0x34
   16738:	str	r2, [sp, #48]	; 0x30
   1673c:	mov	r1, #1
   16740:	mov	r2, r0
   16744:	mov	r0, r4
   16748:	add	sp, sp, #32
   1674c:	pop	{r4, r5, r6, lr}
   16750:	b	10e1c <__fprintf_chk@plt>
   16754:	mov	r2, #5
   16758:	ldr	r1, [pc, #420]	; 16904 <__assert_fail@plt+0x5a40>
   1675c:	mov	r0, #0
   16760:	bl	10d08 <dcgettext@plt>
   16764:	ldr	r1, [r5, #8]
   16768:	ldr	ip, [r5, #12]
   1676c:	ldr	r2, [r5, #4]
   16770:	ldr	r3, [r5]
   16774:	stmib	sp, {r1, ip}
   16778:	str	r2, [sp]
   1677c:	mov	r1, #1
   16780:	mov	r2, r0
   16784:	mov	r0, r4
   16788:	bl	10e1c <__fprintf_chk@plt>
   1678c:	b	166b0 <__assert_fail@plt+0x57ec>
   16790:	mov	r2, #5
   16794:	ldr	r1, [pc, #364]	; 16908 <__assert_fail@plt+0x5a44>
   16798:	mov	r0, #0
   1679c:	bl	10d08 <dcgettext@plt>
   167a0:	add	r1, r5, #8
   167a4:	ldr	r2, [r5, #4]
   167a8:	ldm	r1, {r1, ip, lr}
   167ac:	ldr	r3, [r5]
   167b0:	str	r2, [sp]
   167b4:	stmib	sp, {r1, ip, lr}
   167b8:	mov	r1, #1
   167bc:	mov	r2, r0
   167c0:	mov	r0, r4
   167c4:	bl	10e1c <__fprintf_chk@plt>
   167c8:	b	166b0 <__assert_fail@plt+0x57ec>
   167cc:	mov	r2, #5
   167d0:	ldr	r1, [pc, #308]	; 1690c <__assert_fail@plt+0x5a48>
   167d4:	mov	r0, #0
   167d8:	bl	10d08 <dcgettext@plt>
   167dc:	add	r1, r5, #8
   167e0:	ldr	r2, [r5, #4]
   167e4:	ldm	r1, {r1, ip, lr}
   167e8:	ldr	r6, [r5, #20]
   167ec:	ldr	r3, [r5]
   167f0:	stmib	sp, {r1, ip, lr}
   167f4:	mov	r1, #1
   167f8:	str	r2, [sp]
   167fc:	str	r6, [sp, #16]
   16800:	mov	r2, r0
   16804:	mov	r0, r4
   16808:	bl	10e1c <__fprintf_chk@plt>
   1680c:	b	166b0 <__assert_fail@plt+0x57ec>
   16810:	mov	r2, #5
   16814:	ldr	r1, [pc, #244]	; 16910 <__assert_fail@plt+0x5a4c>
   16818:	mov	r0, #0
   1681c:	bl	10d08 <dcgettext@plt>
   16820:	ldr	r2, [r5, #24]
   16824:	ldr	r3, [r5]
   16828:	ldr	r6, [r5, #20]
   1682c:	ldr	lr, [r5, #16]
   16830:	ldr	ip, [r5, #12]
   16834:	str	r2, [sp, #20]
   16838:	ldr	r1, [r5, #8]
   1683c:	ldr	r2, [r5, #4]
   16840:	str	r6, [sp, #16]
   16844:	stmib	sp, {r1, ip, lr}
   16848:	mov	r1, #1
   1684c:	str	r2, [sp]
   16850:	mov	r2, r0
   16854:	mov	r0, r4
   16858:	bl	10e1c <__fprintf_chk@plt>
   1685c:	b	166b0 <__assert_fail@plt+0x57ec>
   16860:	mov	r2, #5
   16864:	ldr	r1, [pc, #168]	; 16914 <__assert_fail@plt+0x5a50>
   16868:	mov	r0, #0
   1686c:	bl	10d08 <dcgettext@plt>
   16870:	ldr	r1, [r5, #28]
   16874:	ldr	r2, [r5, #24]
   16878:	ldr	r3, [r5]
   1687c:	ldr	r6, [r5, #20]
   16880:	ldr	lr, [r5, #16]
   16884:	str	r1, [sp, #24]
   16888:	ldr	ip, [r5, #12]
   1688c:	str	r2, [sp, #20]
   16890:	ldr	r1, [r5, #8]
   16894:	ldr	r2, [r5, #4]
   16898:	str	r6, [sp, #16]
   1689c:	stmib	sp, {r1, ip, lr}
   168a0:	mov	r1, #1
   168a4:	str	r2, [sp]
   168a8:	mov	r2, r0
   168ac:	mov	r0, r4
   168b0:	bl	10e1c <__fprintf_chk@plt>
   168b4:	b	166b0 <__assert_fail@plt+0x57ec>
   168b8:	str	r3, [sp]
   168bc:	mov	r1, #1
   168c0:	mov	r3, r2
   168c4:	ldr	r2, [pc, #76]	; 16918 <__assert_fail@plt+0x5a54>
   168c8:	bl	10e1c <__fprintf_chk@plt>
   168cc:	b	165b8 <__assert_fail@plt+0x56f4>
   168d0:	mov	r2, #5
   168d4:	ldr	r1, [pc, #64]	; 1691c <__assert_fail@plt+0x5a58>
   168d8:	b	1665c <__assert_fail@plt+0x5798>
   168dc:	andeq	r8, r1, r0, asr #18
   168e0:	andeq	r8, r1, r4, asr r9
   168e4:	andeq	r0, r0, r6, ror #15
   168e8:	andeq	r8, r1, ip, lsr #24
   168ec:	andeq	r8, r1, r8, asr r9
   168f0:	andeq	r8, r1, r4, lsl #20
   168f4:	andeq	r8, r1, r4, lsr fp
   168f8:	andeq	r8, r1, r8, lsr #20
   168fc:	andeq	r8, r1, r8, lsr sl
   16900:	andeq	r8, r1, r0, asr sl
   16904:	andeq	r8, r1, ip, ror #20
   16908:	andeq	r8, r1, ip, lsl #21
   1690c:			; <UNDEFINED> instruction: 0x00018ab0
   16910:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   16914:	andeq	r8, r1, r4, lsl #22
   16918:	andeq	r8, r1, ip, asr #18
   1691c:	andeq	r8, r1, r8, ror #22
   16920:	push	{r4, r5, lr}
   16924:	sub	sp, sp, #12
   16928:	ldr	r5, [sp, #24]
   1692c:	ldr	ip, [r5]
   16930:	cmp	ip, #0
   16934:	beq	16950 <__assert_fail@plt+0x5a8c>
   16938:	mov	lr, r5
   1693c:	mov	ip, #0
   16940:	ldr	r4, [lr, #4]!
   16944:	add	ip, ip, #1
   16948:	cmp	r4, #0
   1694c:	bne	16940 <__assert_fail@plt+0x5a7c>
   16950:	stm	sp, {r5, ip}
   16954:	bl	16588 <__assert_fail@plt+0x56c4>
   16958:	add	sp, sp, #12
   1695c:	pop	{r4, r5, pc}
   16960:	push	{r4, r5, lr}
   16964:	sub	sp, sp, #76	; 0x4c
   16968:	mov	r5, r0
   1696c:	ldr	ip, [sp, #88]	; 0x58
   16970:	ldr	r0, [ip]
   16974:	cmp	r0, #0
   16978:	str	r0, [sp, #32]
   1697c:	beq	16d50 <__assert_fail@plt+0x5e8c>
   16980:	ldr	r0, [ip, #4]
   16984:	cmp	r0, #0
   16988:	str	r0, [sp, #36]	; 0x24
   1698c:	beq	16d58 <__assert_fail@plt+0x5e94>
   16990:	ldr	r0, [ip, #8]
   16994:	cmp	r0, #0
   16998:	str	r0, [sp, #40]	; 0x28
   1699c:	beq	16d60 <__assert_fail@plt+0x5e9c>
   169a0:	ldr	r0, [ip, #12]
   169a4:	cmp	r0, #0
   169a8:	str	r0, [sp, #44]	; 0x2c
   169ac:	beq	16d68 <__assert_fail@plt+0x5ea4>
   169b0:	ldr	r0, [ip, #16]
   169b4:	cmp	r0, #0
   169b8:	str	r0, [sp, #48]	; 0x30
   169bc:	beq	16d70 <__assert_fail@plt+0x5eac>
   169c0:	ldr	r0, [ip, #20]
   169c4:	cmp	r0, #0
   169c8:	str	r0, [sp, #52]	; 0x34
   169cc:	beq	16d78 <__assert_fail@plt+0x5eb4>
   169d0:	ldr	r0, [ip, #24]
   169d4:	cmp	r0, #0
   169d8:	str	r0, [sp, #56]	; 0x38
   169dc:	beq	16d80 <__assert_fail@plt+0x5ebc>
   169e0:	ldr	r0, [ip, #28]
   169e4:	cmp	r0, #0
   169e8:	str	r0, [sp, #60]	; 0x3c
   169ec:	beq	16d88 <__assert_fail@plt+0x5ec4>
   169f0:	ldr	r0, [ip, #32]
   169f4:	cmp	r0, #0
   169f8:	str	r0, [sp, #64]	; 0x40
   169fc:	beq	16d90 <__assert_fail@plt+0x5ecc>
   16a00:	ldr	r0, [ip, #36]	; 0x24
   16a04:	cmp	r0, #0
   16a08:	movne	r4, #10
   16a0c:	moveq	r4, #9
   16a10:	cmp	r1, #0
   16a14:	beq	16d28 <__assert_fail@plt+0x5e64>
   16a18:	stm	sp, {r2, r3}
   16a1c:	mov	r0, r5
   16a20:	mov	r3, r1
   16a24:	ldr	r2, [pc, #876]	; 16d98 <__assert_fail@plt+0x5ed4>
   16a28:	mov	r1, #1
   16a2c:	bl	10e1c <__fprintf_chk@plt>
   16a30:	mov	r2, #5
   16a34:	ldr	r1, [pc, #864]	; 16d9c <__assert_fail@plt+0x5ed8>
   16a38:	mov	r0, #0
   16a3c:	bl	10d08 <dcgettext@plt>
   16a40:	ldr	r3, [pc, #856]	; 16da0 <__assert_fail@plt+0x5edc>
   16a44:	ldr	r2, [pc, #856]	; 16da4 <__assert_fail@plt+0x5ee0>
   16a48:	str	r3, [sp]
   16a4c:	mov	r1, #1
   16a50:	mov	r3, r0
   16a54:	mov	r0, r5
   16a58:	bl	10e1c <__fprintf_chk@plt>
   16a5c:	mov	r1, r5
   16a60:	mov	r0, #10
   16a64:	bl	10cfc <fputc_unlocked@plt>
   16a68:	mov	r2, #5
   16a6c:	ldr	r1, [pc, #820]	; 16da8 <__assert_fail@plt+0x5ee4>
   16a70:	mov	r0, #0
   16a74:	bl	10d08 <dcgettext@plt>
   16a78:	mov	r1, #1
   16a7c:	ldr	r3, [pc, #808]	; 16dac <__assert_fail@plt+0x5ee8>
   16a80:	mov	r2, r0
   16a84:	mov	r0, r5
   16a88:	bl	10e1c <__fprintf_chk@plt>
   16a8c:	mov	r1, r5
   16a90:	mov	r0, #10
   16a94:	bl	10cfc <fputc_unlocked@plt>
   16a98:	cmp	r4, #9
   16a9c:	ldrls	pc, [pc, r4, lsl #2]
   16aa0:	b	16d44 <__assert_fail@plt+0x5e80>
   16aa4:	andeq	r6, r1, r8, lsr #22
   16aa8:	andeq	r6, r1, r0, lsr fp
   16aac:	andeq	r6, r1, ip, asr fp
   16ab0:	muleq	r1, r0, fp
   16ab4:	andeq	r6, r1, r8, asr #23
   16ab8:	andeq	r6, r1, r4, lsl #24
   16abc:	andeq	r6, r1, r0, asr #24
   16ac0:	andeq	r6, r1, r4, lsl #25
   16ac4:	ldrdeq	r6, [r1], -r0
   16ac8:	andeq	r6, r1, ip, asr #21
   16acc:	ldr	r1, [pc, #732]	; 16db0 <__assert_fail@plt+0x5eec>
   16ad0:	mov	r2, #5
   16ad4:	mov	r0, #0
   16ad8:	bl	10d08 <dcgettext@plt>
   16adc:	ldr	ip, [sp, #64]	; 0x40
   16ae0:	ldr	r1, [sp, #60]	; 0x3c
   16ae4:	ldr	r2, [sp, #56]	; 0x38
   16ae8:	ldr	lr, [sp, #48]	; 0x30
   16aec:	str	ip, [sp, #28]
   16af0:	str	r1, [sp, #24]
   16af4:	ldr	ip, [sp, #44]	; 0x2c
   16af8:	ldr	r1, [sp, #40]	; 0x28
   16afc:	ldr	r4, [sp, #52]	; 0x34
   16b00:	str	r2, [sp, #20]
   16b04:	ldr	r2, [sp, #36]	; 0x24
   16b08:	stmib	sp, {r1, ip, lr}
   16b0c:	mov	r1, #1
   16b10:	str	r2, [sp]
   16b14:	ldr	r3, [sp, #32]
   16b18:	str	r4, [sp, #16]
   16b1c:	mov	r2, r0
   16b20:	mov	r0, r5
   16b24:	bl	10e1c <__fprintf_chk@plt>
   16b28:	add	sp, sp, #76	; 0x4c
   16b2c:	pop	{r4, r5, pc}
   16b30:	mov	r2, #5
   16b34:	ldr	r1, [pc, #632]	; 16db4 <__assert_fail@plt+0x5ef0>
   16b38:	mov	r0, #0
   16b3c:	bl	10d08 <dcgettext@plt>
   16b40:	ldr	r3, [sp, #32]
   16b44:	mov	r1, #1
   16b48:	mov	r2, r0
   16b4c:	mov	r0, r5
   16b50:	add	sp, sp, #76	; 0x4c
   16b54:	pop	{r4, r5, lr}
   16b58:	b	10e1c <__fprintf_chk@plt>
   16b5c:	mov	r2, #5
   16b60:	ldr	r1, [pc, #592]	; 16db8 <__assert_fail@plt+0x5ef4>
   16b64:	mov	r0, #0
   16b68:	bl	10d08 <dcgettext@plt>
   16b6c:	ldr	r2, [sp, #36]	; 0x24
   16b70:	ldr	r3, [sp, #32]
   16b74:	str	r2, [sp, #88]	; 0x58
   16b78:	mov	r1, #1
   16b7c:	mov	r2, r0
   16b80:	mov	r0, r5
   16b84:	add	sp, sp, #76	; 0x4c
   16b88:	pop	{r4, r5, lr}
   16b8c:	b	10e1c <__fprintf_chk@plt>
   16b90:	mov	r2, #5
   16b94:	ldr	r1, [pc, #544]	; 16dbc <__assert_fail@plt+0x5ef8>
   16b98:	mov	r0, #0
   16b9c:	bl	10d08 <dcgettext@plt>
   16ba0:	ldr	r1, [sp, #40]	; 0x28
   16ba4:	ldr	r2, [sp, #36]	; 0x24
   16ba8:	str	r1, [sp, #4]
   16bac:	str	r2, [sp]
   16bb0:	ldr	r3, [sp, #32]
   16bb4:	mov	r1, #1
   16bb8:	mov	r2, r0
   16bbc:	mov	r0, r5
   16bc0:	bl	10e1c <__fprintf_chk@plt>
   16bc4:	b	16b28 <__assert_fail@plt+0x5c64>
   16bc8:	mov	r2, #5
   16bcc:	ldr	r1, [pc, #492]	; 16dc0 <__assert_fail@plt+0x5efc>
   16bd0:	mov	r0, #0
   16bd4:	bl	10d08 <dcgettext@plt>
   16bd8:	ldr	r1, [sp, #40]	; 0x28
   16bdc:	ldr	ip, [sp, #44]	; 0x2c
   16be0:	ldr	r2, [sp, #36]	; 0x24
   16be4:	ldr	r3, [sp, #32]
   16be8:	stmib	sp, {r1, ip}
   16bec:	str	r2, [sp]
   16bf0:	mov	r1, #1
   16bf4:	mov	r2, r0
   16bf8:	mov	r0, r5
   16bfc:	bl	10e1c <__fprintf_chk@plt>
   16c00:	b	16b28 <__assert_fail@plt+0x5c64>
   16c04:	mov	r2, #5
   16c08:	ldr	r1, [pc, #436]	; 16dc4 <__assert_fail@plt+0x5f00>
   16c0c:	mov	r0, #0
   16c10:	bl	10d08 <dcgettext@plt>
   16c14:	add	r1, sp, #40	; 0x28
   16c18:	ldr	r2, [sp, #36]	; 0x24
   16c1c:	ldm	r1, {r1, ip, lr}
   16c20:	ldr	r3, [sp, #32]
   16c24:	str	r2, [sp]
   16c28:	stmib	sp, {r1, ip, lr}
   16c2c:	mov	r1, #1
   16c30:	mov	r2, r0
   16c34:	mov	r0, r5
   16c38:	bl	10e1c <__fprintf_chk@plt>
   16c3c:	b	16b28 <__assert_fail@plt+0x5c64>
   16c40:	mov	r2, #5
   16c44:	ldr	r1, [pc, #380]	; 16dc8 <__assert_fail@plt+0x5f04>
   16c48:	mov	r0, #0
   16c4c:	bl	10d08 <dcgettext@plt>
   16c50:	add	r1, sp, #40	; 0x28
   16c54:	ldr	r2, [sp, #36]	; 0x24
   16c58:	ldm	r1, {r1, ip, lr}
   16c5c:	ldr	r4, [sp, #52]	; 0x34
   16c60:	str	r2, [sp]
   16c64:	stmib	sp, {r1, ip, lr}
   16c68:	mov	r1, #1
   16c6c:	ldr	r3, [sp, #32]
   16c70:	str	r4, [sp, #16]
   16c74:	mov	r2, r0
   16c78:	mov	r0, r5
   16c7c:	bl	10e1c <__fprintf_chk@plt>
   16c80:	b	16b28 <__assert_fail@plt+0x5c64>
   16c84:	mov	r2, #5
   16c88:	ldr	r1, [pc, #316]	; 16dcc <__assert_fail@plt+0x5f08>
   16c8c:	mov	r0, #0
   16c90:	bl	10d08 <dcgettext@plt>
   16c94:	add	r1, sp, #40	; 0x28
   16c98:	ldr	r2, [sp, #56]	; 0x38
   16c9c:	ldm	r1, {r1, ip, lr}
   16ca0:	ldr	r4, [sp, #52]	; 0x34
   16ca4:	str	r2, [sp, #20]
   16ca8:	ldr	r2, [sp, #36]	; 0x24
   16cac:	stmib	sp, {r1, ip, lr}
   16cb0:	mov	r1, #1
   16cb4:	str	r2, [sp]
   16cb8:	ldr	r3, [sp, #32]
   16cbc:	str	r4, [sp, #16]
   16cc0:	mov	r2, r0
   16cc4:	mov	r0, r5
   16cc8:	bl	10e1c <__fprintf_chk@plt>
   16ccc:	b	16b28 <__assert_fail@plt+0x5c64>
   16cd0:	mov	r2, #5
   16cd4:	ldr	r1, [pc, #244]	; 16dd0 <__assert_fail@plt+0x5f0c>
   16cd8:	mov	r0, #0
   16cdc:	bl	10d08 <dcgettext@plt>
   16ce0:	ldr	r1, [sp, #60]	; 0x3c
   16ce4:	ldr	r2, [sp, #56]	; 0x38
   16ce8:	ldr	lr, [sp, #48]	; 0x30
   16cec:	ldr	ip, [sp, #44]	; 0x2c
   16cf0:	str	r1, [sp, #24]
   16cf4:	ldr	r1, [sp, #40]	; 0x28
   16cf8:	ldr	r4, [sp, #52]	; 0x34
   16cfc:	str	r2, [sp, #20]
   16d00:	ldr	r2, [sp, #36]	; 0x24
   16d04:	stmib	sp, {r1, ip, lr}
   16d08:	mov	r1, #1
   16d0c:	str	r2, [sp]
   16d10:	ldr	r3, [sp, #32]
   16d14:	str	r4, [sp, #16]
   16d18:	mov	r2, r0
   16d1c:	mov	r0, r5
   16d20:	bl	10e1c <__fprintf_chk@plt>
   16d24:	b	16b28 <__assert_fail@plt+0x5c64>
   16d28:	str	r3, [sp]
   16d2c:	mov	r1, #1
   16d30:	mov	r3, r2
   16d34:	mov	r0, r5
   16d38:	ldr	r2, [pc, #148]	; 16dd4 <__assert_fail@plt+0x5f10>
   16d3c:	bl	10e1c <__fprintf_chk@plt>
   16d40:	b	16a30 <__assert_fail@plt+0x5b6c>
   16d44:	mov	r2, #5
   16d48:	ldr	r1, [pc, #136]	; 16dd8 <__assert_fail@plt+0x5f14>
   16d4c:	b	16ad4 <__assert_fail@plt+0x5c10>
   16d50:	mov	r4, r0
   16d54:	b	16a10 <__assert_fail@plt+0x5b4c>
   16d58:	mov	r4, #1
   16d5c:	b	16a10 <__assert_fail@plt+0x5b4c>
   16d60:	mov	r4, #2
   16d64:	b	16a10 <__assert_fail@plt+0x5b4c>
   16d68:	mov	r4, #3
   16d6c:	b	16a10 <__assert_fail@plt+0x5b4c>
   16d70:	mov	r4, #4
   16d74:	b	16a10 <__assert_fail@plt+0x5b4c>
   16d78:	mov	r4, #5
   16d7c:	b	16a10 <__assert_fail@plt+0x5b4c>
   16d80:	mov	r4, #6
   16d84:	b	16a10 <__assert_fail@plt+0x5b4c>
   16d88:	mov	r4, #7
   16d8c:	b	16a10 <__assert_fail@plt+0x5b4c>
   16d90:	mov	r4, #8
   16d94:	b	16a10 <__assert_fail@plt+0x5b4c>
   16d98:	andeq	r8, r1, r0, asr #18
   16d9c:	andeq	r8, r1, r4, asr r9
   16da0:	andeq	r0, r0, r6, ror #15
   16da4:	andeq	r8, r1, ip, lsr #24
   16da8:	andeq	r8, r1, r8, asr r9
   16dac:	andeq	r8, r1, r4, lsl #20
   16db0:	andeq	r8, r1, r4, lsr fp
   16db4:	andeq	r8, r1, r8, lsr #20
   16db8:	andeq	r8, r1, r8, lsr sl
   16dbc:	andeq	r8, r1, r0, asr sl
   16dc0:	andeq	r8, r1, ip, ror #20
   16dc4:	andeq	r8, r1, ip, lsl #21
   16dc8:			; <UNDEFINED> instruction: 0x00018ab0
   16dcc:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   16dd0:	andeq	r8, r1, r4, lsl #22
   16dd4:	andeq	r8, r1, ip, asr #18
   16dd8:	andeq	r8, r1, r8, ror #22
   16ddc:	push	{r3}		; (str r3, [sp, #-4]!)
   16de0:	push	{lr}		; (str lr, [sp, #-4]!)
   16de4:	sub	sp, sp, #56	; 0x38
   16de8:	add	r3, sp, #64	; 0x40
   16dec:	ldr	ip, [sp, #64]	; 0x40
   16df0:	str	r3, [sp, #12]
   16df4:	cmp	ip, #0
   16df8:	str	ip, [sp, #16]
   16dfc:	beq	16e94 <__assert_fail@plt+0x5fd0>
   16e00:	ldr	ip, [sp, #68]	; 0x44
   16e04:	cmp	ip, #0
   16e08:	str	ip, [sp, #20]
   16e0c:	beq	16eb4 <__assert_fail@plt+0x5ff0>
   16e10:	ldr	ip, [sp, #72]	; 0x48
   16e14:	cmp	ip, #0
   16e18:	str	ip, [sp, #24]
   16e1c:	beq	16ebc <__assert_fail@plt+0x5ff8>
   16e20:	ldr	ip, [sp, #76]	; 0x4c
   16e24:	cmp	ip, #0
   16e28:	str	ip, [sp, #28]
   16e2c:	beq	16ec4 <__assert_fail@plt+0x6000>
   16e30:	ldr	ip, [sp, #80]	; 0x50
   16e34:	cmp	ip, #0
   16e38:	str	ip, [sp, #32]
   16e3c:	beq	16ecc <__assert_fail@plt+0x6008>
   16e40:	ldr	ip, [sp, #84]	; 0x54
   16e44:	cmp	ip, #0
   16e48:	str	ip, [sp, #36]	; 0x24
   16e4c:	beq	16ed4 <__assert_fail@plt+0x6010>
   16e50:	ldr	ip, [sp, #88]	; 0x58
   16e54:	cmp	ip, #0
   16e58:	str	ip, [sp, #40]	; 0x28
   16e5c:	beq	16edc <__assert_fail@plt+0x6018>
   16e60:	ldr	ip, [sp, #92]	; 0x5c
   16e64:	cmp	ip, #0
   16e68:	str	ip, [sp, #44]	; 0x2c
   16e6c:	beq	16ee4 <__assert_fail@plt+0x6020>
   16e70:	ldr	ip, [sp, #96]	; 0x60
   16e74:	cmp	ip, #0
   16e78:	str	ip, [sp, #48]	; 0x30
   16e7c:	beq	16eec <__assert_fail@plt+0x6028>
   16e80:	ldr	ip, [sp, #100]	; 0x64
   16e84:	cmp	ip, #0
   16e88:	str	ip, [sp, #52]	; 0x34
   16e8c:	movne	ip, #10
   16e90:	moveq	ip, #9
   16e94:	add	r3, sp, #16
   16e98:	stm	sp, {r3, ip}
   16e9c:	ldr	r3, [sp, #60]	; 0x3c
   16ea0:	bl	16588 <__assert_fail@plt+0x56c4>
   16ea4:	add	sp, sp, #56	; 0x38
   16ea8:	pop	{lr}		; (ldr lr, [sp], #4)
   16eac:	add	sp, sp, #4
   16eb0:	bx	lr
   16eb4:	mov	ip, #1
   16eb8:	b	16e94 <__assert_fail@plt+0x5fd0>
   16ebc:	mov	ip, #2
   16ec0:	b	16e94 <__assert_fail@plt+0x5fd0>
   16ec4:	mov	ip, #3
   16ec8:	b	16e94 <__assert_fail@plt+0x5fd0>
   16ecc:	mov	ip, #4
   16ed0:	b	16e94 <__assert_fail@plt+0x5fd0>
   16ed4:	mov	ip, #5
   16ed8:	b	16e94 <__assert_fail@plt+0x5fd0>
   16edc:	mov	ip, #6
   16ee0:	b	16e94 <__assert_fail@plt+0x5fd0>
   16ee4:	mov	ip, #7
   16ee8:	b	16e94 <__assert_fail@plt+0x5fd0>
   16eec:	mov	ip, #8
   16ef0:	b	16e94 <__assert_fail@plt+0x5fd0>
   16ef4:	ldr	r3, [pc, #116]	; 16f70 <__assert_fail@plt+0x60ac>
   16ef8:	push	{r4, lr}
   16efc:	mov	r0, #10
   16f00:	ldr	r1, [r3]
   16f04:	bl	10cfc <fputc_unlocked@plt>
   16f08:	mov	r2, #5
   16f0c:	ldr	r1, [pc, #96]	; 16f74 <__assert_fail@plt+0x60b0>
   16f10:	mov	r0, #0
   16f14:	bl	10d08 <dcgettext@plt>
   16f18:	ldr	r2, [pc, #88]	; 16f78 <__assert_fail@plt+0x60b4>
   16f1c:	mov	r1, r0
   16f20:	mov	r0, #1
   16f24:	bl	10e04 <__printf_chk@plt>
   16f28:	mov	r2, #5
   16f2c:	ldr	r1, [pc, #72]	; 16f7c <__assert_fail@plt+0x60b8>
   16f30:	mov	r0, #0
   16f34:	bl	10d08 <dcgettext@plt>
   16f38:	ldr	r3, [pc, #64]	; 16f80 <__assert_fail@plt+0x60bc>
   16f3c:	ldr	r2, [pc, #64]	; 16f84 <__assert_fail@plt+0x60c0>
   16f40:	mov	r1, r0
   16f44:	mov	r0, #1
   16f48:	bl	10e04 <__printf_chk@plt>
   16f4c:	mov	r2, #5
   16f50:	ldr	r1, [pc, #48]	; 16f88 <__assert_fail@plt+0x60c4>
   16f54:	mov	r0, #0
   16f58:	bl	10d08 <dcgettext@plt>
   16f5c:	ldr	r2, [pc, #40]	; 16f8c <__assert_fail@plt+0x60c8>
   16f60:	pop	{r4, lr}
   16f64:	mov	r1, r0
   16f68:	mov	r0, #1
   16f6c:	b	10e04 <__printf_chk@plt>
   16f70:	andeq	r9, r2, r4, asr r1
   16f74:	andeq	r8, r1, r4, lsr #23
   16f78:			; <UNDEFINED> instruction: 0x00018bb8
   16f7c:	ldrdeq	r8, [r1], -r0
   16f80:	andeq	r8, r1, r0, asr #5
   16f84:	andeq	r8, r1, r8, ror #5
   16f88:	andeq	r8, r1, r4, ror #23
   16f8c:	andeq	r8, r1, ip, lsl #24
   16f90:	push	{r4, r5, r6, lr}
   16f94:	mov	r6, r0
   16f98:	mov	r5, r1
   16f9c:	mov	r4, r2
   16fa0:	bl	17820 <__assert_fail@plt+0x695c>
   16fa4:	cmp	r0, #0
   16fa8:	popne	{r4, r5, r6, pc}
   16fac:	cmp	r6, #0
   16fb0:	beq	16fc0 <__assert_fail@plt+0x60fc>
   16fb4:	cmp	r5, #0
   16fb8:	cmpne	r4, #0
   16fbc:	popeq	{r4, r5, r6, pc}
   16fc0:	bl	1760c <__assert_fail@plt+0x6748>
   16fc4:	push	{r4, lr}
   16fc8:	bl	17694 <__assert_fail@plt+0x67d0>
   16fcc:	cmp	r0, #0
   16fd0:	popne	{r4, pc}
   16fd4:	bl	1760c <__assert_fail@plt+0x6748>
   16fd8:	push	{r4, lr}
   16fdc:	bl	17694 <__assert_fail@plt+0x67d0>
   16fe0:	cmp	r0, #0
   16fe4:	popne	{r4, pc}
   16fe8:	bl	1760c <__assert_fail@plt+0x6748>
   16fec:	push	{r4, lr}
   16ff0:	bl	17694 <__assert_fail@plt+0x67d0>
   16ff4:	cmp	r0, #0
   16ff8:	popne	{r4, pc}
   16ffc:	bl	1760c <__assert_fail@plt+0x6748>
   17000:	push	{r4, r5, r6, lr}
   17004:	mov	r5, r0
   17008:	mov	r4, r1
   1700c:	bl	176c0 <__assert_fail@plt+0x67fc>
   17010:	cmp	r0, #0
   17014:	popne	{r4, r5, r6, pc}
   17018:	adds	r4, r4, #0
   1701c:	movne	r4, #1
   17020:	cmp	r5, #0
   17024:	orreq	r4, r4, #1
   17028:	cmp	r4, #0
   1702c:	popeq	{r4, r5, r6, pc}
   17030:	bl	1760c <__assert_fail@plt+0x6748>
   17034:	push	{r4, lr}
   17038:	cmp	r1, #0
   1703c:	orreq	r1, r1, #1
   17040:	bl	176c0 <__assert_fail@plt+0x67fc>
   17044:	cmp	r0, #0
   17048:	popne	{r4, pc}
   1704c:	bl	1760c <__assert_fail@plt+0x6748>
   17050:	push	{r4, r5, r6, lr}
   17054:	mov	r6, r0
   17058:	mov	r5, r1
   1705c:	mov	r4, r2
   17060:	bl	17820 <__assert_fail@plt+0x695c>
   17064:	cmp	r0, #0
   17068:	popne	{r4, r5, r6, pc}
   1706c:	cmp	r6, #0
   17070:	beq	17080 <__assert_fail@plt+0x61bc>
   17074:	cmp	r5, #0
   17078:	cmpne	r4, #0
   1707c:	popeq	{r4, r5, r6, pc}
   17080:	bl	1760c <__assert_fail@plt+0x6748>
   17084:	cmp	r2, #0
   17088:	cmpne	r1, #0
   1708c:	moveq	r2, #1
   17090:	moveq	r1, r2
   17094:	push	{r4, lr}
   17098:	bl	17820 <__assert_fail@plt+0x695c>
   1709c:	cmp	r0, #0
   170a0:	popne	{r4, pc}
   170a4:	bl	1760c <__assert_fail@plt+0x6748>
   170a8:	push	{r4, lr}
   170ac:	mov	r2, r1
   170b0:	mov	r1, r0
   170b4:	mov	r0, #0
   170b8:	bl	17820 <__assert_fail@plt+0x695c>
   170bc:	cmp	r0, #0
   170c0:	popne	{r4, pc}
   170c4:	bl	1760c <__assert_fail@plt+0x6748>
   170c8:	cmp	r1, #0
   170cc:	cmpne	r0, #0
   170d0:	moveq	r2, #1
   170d4:	movne	r2, r1
   170d8:	moveq	r1, r2
   170dc:	movne	r1, r0
   170e0:	push	{r4, lr}
   170e4:	mov	r0, #0
   170e8:	bl	17820 <__assert_fail@plt+0x695c>
   170ec:	cmp	r0, #0
   170f0:	popne	{r4, pc}
   170f4:	bl	1760c <__assert_fail@plt+0x6748>
   170f8:	cmp	r0, #0
   170fc:	push	{r4, r5, r6, lr}
   17100:	mov	r5, r1
   17104:	ldr	r4, [r1]
   17108:	beq	17144 <__assert_fail@plt+0x6280>
   1710c:	lsr	r2, r4, #1
   17110:	add	r3, r2, #1
   17114:	mvn	r3, r3
   17118:	cmp	r4, r3
   1711c:	bhi	17160 <__assert_fail@plt+0x629c>
   17120:	add	r4, r4, #1
   17124:	add	r4, r4, r2
   17128:	mov	r1, r4
   1712c:	mov	r2, #1
   17130:	bl	17820 <__assert_fail@plt+0x695c>
   17134:	cmp	r0, #0
   17138:	beq	17164 <__assert_fail@plt+0x62a0>
   1713c:	str	r4, [r5]
   17140:	pop	{r4, r5, r6, pc}
   17144:	cmp	r4, #0
   17148:	moveq	r4, #64	; 0x40
   1714c:	mov	r1, r4
   17150:	mov	r2, #1
   17154:	bl	17820 <__assert_fail@plt+0x695c>
   17158:	cmp	r0, #0
   1715c:	bne	1713c <__assert_fail@plt+0x6278>
   17160:	bl	1760c <__assert_fail@plt+0x6748>
   17164:	cmp	r4, #0
   17168:	bne	17160 <__assert_fail@plt+0x629c>
   1716c:	str	r4, [r5]
   17170:	pop	{r4, r5, r6, pc}
   17174:	cmp	r0, #0
   17178:	push	{r4, r5, r6, lr}
   1717c:	mov	r5, r1
   17180:	ldr	r4, [r1]
   17184:	mov	r6, r2
   17188:	beq	171cc <__assert_fail@plt+0x6308>
   1718c:	lsr	r1, r4, #1
   17190:	add	r3, r1, #1
   17194:	mvn	r3, r3
   17198:	cmp	r4, r3
   1719c:	bhi	17204 <__assert_fail@plt+0x6340>
   171a0:	add	r4, r4, #1
   171a4:	add	r4, r4, r1
   171a8:	mov	r1, r4
   171ac:	bl	17820 <__assert_fail@plt+0x695c>
   171b0:	cmp	r0, #0
   171b4:	bne	171c4 <__assert_fail@plt+0x6300>
   171b8:	cmp	r4, #0
   171bc:	cmpne	r6, #0
   171c0:	bne	17204 <__assert_fail@plt+0x6340>
   171c4:	str	r4, [r5]
   171c8:	pop	{r4, r5, r6, pc}
   171cc:	cmp	r4, #0
   171d0:	bne	171ec <__assert_fail@plt+0x6328>
   171d4:	mov	r1, r2
   171d8:	mov	r0, #64	; 0x40
   171dc:	bl	17960 <__assert_fail@plt+0x6a9c>
   171e0:	cmp	r0, #0
   171e4:	movne	r4, r0
   171e8:	addeq	r4, r0, #1
   171ec:	mov	r2, r6
   171f0:	mov	r1, r4
   171f4:	mov	r0, #0
   171f8:	bl	17820 <__assert_fail@plt+0x695c>
   171fc:	cmp	r0, #0
   17200:	bne	171c4 <__assert_fail@plt+0x6300>
   17204:	bl	1760c <__assert_fail@plt+0x6748>
   17208:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1720c:	sub	sp, sp, #12
   17210:	ldr	r6, [r1]
   17214:	mov	r8, r1
   17218:	mov	r9, r0
   1721c:	asrs	r4, r6, #1
   17220:	mov	sl, r2
   17224:	mov	fp, r3
   17228:	ldr	r7, [sp, #48]	; 0x30
   1722c:	bmi	173a8 <__assert_fail@plt+0x64e4>
   17230:	mvn	r1, #-2147483648	; 0x80000000
   17234:	sub	r1, r1, r4
   17238:	cmp	r6, r1
   1723c:	movle	r1, #0
   17240:	movgt	r1, #1
   17244:	mvn	r3, fp
   17248:	cmp	r1, #0
   1724c:	addeq	r4, r4, r6
   17250:	mvnne	r4, #-2147483648	; 0x80000000
   17254:	lsr	r3, r3, #31
   17258:	cmp	fp, r4
   1725c:	movge	r2, #0
   17260:	andlt	r2, r3, #1
   17264:	cmp	r2, #0
   17268:	beq	17358 <__assert_fail@plt+0x6494>
   1726c:	cmp	r7, #0
   17270:	blt	17440 <__assert_fail@plt+0x657c>
   17274:	bne	17438 <__assert_fail@plt+0x6574>
   17278:	mov	r5, #64	; 0x40
   1727c:	mov	r1, r7
   17280:	mov	r0, r5
   17284:	str	r3, [sp, #4]
   17288:	bl	17b6c <__assert_fail@plt+0x6ca8>
   1728c:	mov	r1, r7
   17290:	mov	r4, r0
   17294:	mov	r0, r5
   17298:	bl	17d8c <__assert_fail@plt+0x6ec8>
   1729c:	ldr	r3, [sp, #4]
   172a0:	sub	r5, r5, r1
   172a4:	cmp	r9, #0
   172a8:	sub	r2, r4, r6
   172ac:	streq	r9, [r8]
   172b0:	cmp	r2, sl
   172b4:	bge	17338 <__assert_fail@plt+0x6474>
   172b8:	cmp	sl, #0
   172bc:	blt	173d8 <__assert_fail@plt+0x6514>
   172c0:	cmp	r6, #0
   172c4:	blt	172e4 <__assert_fail@plt+0x6420>
   172c8:	mvn	r2, #-2147483648	; 0x80000000
   172cc:	sub	r2, r2, sl
   172d0:	cmp	r6, r2
   172d4:	movle	r2, #0
   172d8:	movgt	r2, #1
   172dc:	cmp	r2, #0
   172e0:	bne	173d4 <__assert_fail@plt+0x6510>
   172e4:	add	r6, r6, sl
   172e8:	cmp	fp, r6
   172ec:	movge	r3, #0
   172f0:	andlt	r3, r3, #1
   172f4:	cmp	r3, #0
   172f8:	mov	r4, r6
   172fc:	bne	173d4 <__assert_fail@plt+0x6510>
   17300:	cmp	r7, #0
   17304:	blt	173ec <__assert_fail@plt+0x6528>
   17308:	beq	17334 <__assert_fail@plt+0x6470>
   1730c:	cmp	r6, #0
   17310:	blt	17490 <__assert_fail@plt+0x65cc>
   17314:	mov	r1, r7
   17318:	mvn	r0, #-2147483648	; 0x80000000
   1731c:	bl	17b6c <__assert_fail@plt+0x6ca8>
   17320:	cmp	r6, r0
   17324:	movle	r0, #0
   17328:	movgt	r0, #1
   1732c:	cmp	r0, #0
   17330:	bne	173d4 <__assert_fail@plt+0x6510>
   17334:	mul	r5, r6, r7
   17338:	mov	r1, r5
   1733c:	mov	r0, r9
   17340:	bl	176c0 <__assert_fail@plt+0x67fc>
   17344:	cmp	r0, #0
   17348:	beq	173bc <__assert_fail@plt+0x64f8>
   1734c:	str	r4, [r8]
   17350:	add	sp, sp, #12
   17354:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17358:	cmp	r7, #0
   1735c:	blt	17418 <__assert_fail@plt+0x6554>
   17360:	beq	17278 <__assert_fail@plt+0x63b4>
   17364:	cmp	r4, #0
   17368:	blt	17448 <__assert_fail@plt+0x6584>
   1736c:	mov	r1, r7
   17370:	mvn	r0, #-2147483648	; 0x80000000
   17374:	str	r3, [sp, #4]
   17378:	bl	17b6c <__assert_fail@plt+0x6ca8>
   1737c:	ldr	r3, [sp, #4]
   17380:	cmp	r0, r4
   17384:	movge	r0, #0
   17388:	movlt	r0, #1
   1738c:	cmp	r0, #0
   17390:	mvnne	r5, #-2147483648	; 0x80000000
   17394:	bne	1727c <__assert_fail@plt+0x63b8>
   17398:	mul	r5, r7, r4
   1739c:	cmp	r5, #63	; 0x3f
   173a0:	bgt	172a4 <__assert_fail@plt+0x63e0>
   173a4:	b	17278 <__assert_fail@plt+0x63b4>
   173a8:	rsb	r1, r4, #-2147483648	; 0x80000000
   173ac:	cmp	r6, r1
   173b0:	movge	r1, #0
   173b4:	movlt	r1, #1
   173b8:	b	17244 <__assert_fail@plt+0x6380>
   173bc:	adds	r5, r5, #0
   173c0:	movne	r5, #1
   173c4:	cmp	r9, #0
   173c8:	orreq	r5, r5, #1
   173cc:	cmp	r5, #0
   173d0:	beq	1734c <__assert_fail@plt+0x6488>
   173d4:	bl	1760c <__assert_fail@plt+0x6748>
   173d8:	rsb	r2, sl, #-2147483648	; 0x80000000
   173dc:	cmp	r6, r2
   173e0:	movge	r2, #0
   173e4:	movlt	r2, #1
   173e8:	b	172dc <__assert_fail@plt+0x6418>
   173ec:	cmp	r6, #0
   173f0:	blt	17474 <__assert_fail@plt+0x65b0>
   173f4:	cmn	r7, #1
   173f8:	beq	17334 <__assert_fail@plt+0x6470>
   173fc:	mov	r1, r7
   17400:	mov	r0, #-2147483648	; 0x80000000
   17404:	bl	17b6c <__assert_fail@plt+0x6ca8>
   17408:	cmp	r6, r0
   1740c:	movle	r0, #0
   17410:	movgt	r0, #1
   17414:	b	1732c <__assert_fail@plt+0x6468>
   17418:	cmp	r4, #0
   1741c:	blt	174b4 <__assert_fail@plt+0x65f0>
   17420:	cmn	r7, #1
   17424:	beq	17398 <__assert_fail@plt+0x64d4>
   17428:	str	r3, [sp, #4]
   1742c:	mov	r1, r7
   17430:	mov	r0, #-2147483648	; 0x80000000
   17434:	b	17378 <__assert_fail@plt+0x64b4>
   17438:	mov	r4, fp
   1743c:	b	1736c <__assert_fail@plt+0x64a8>
   17440:	mov	r4, fp
   17444:	b	17420 <__assert_fail@plt+0x655c>
   17448:	cmn	r4, #1
   1744c:	beq	17398 <__assert_fail@plt+0x64d4>
   17450:	mov	r1, r4
   17454:	mov	r0, #-2147483648	; 0x80000000
   17458:	str	r3, [sp, #4]
   1745c:	bl	17b6c <__assert_fail@plt+0x6ca8>
   17460:	ldr	r3, [sp, #4]
   17464:	cmp	r7, r0
   17468:	movle	r0, #0
   1746c:	movgt	r0, #1
   17470:	b	1738c <__assert_fail@plt+0x64c8>
   17474:	mov	r1, r7
   17478:	mvn	r0, #-2147483648	; 0x80000000
   1747c:	bl	17b6c <__assert_fail@plt+0x6ca8>
   17480:	cmp	r6, r0
   17484:	movge	r0, #0
   17488:	movlt	r0, #1
   1748c:	b	1732c <__assert_fail@plt+0x6468>
   17490:	cmn	r6, #1
   17494:	beq	17334 <__assert_fail@plt+0x6470>
   17498:	mov	r1, r6
   1749c:	mov	r0, #-2147483648	; 0x80000000
   174a0:	bl	17b6c <__assert_fail@plt+0x6ca8>
   174a4:	cmp	r7, r0
   174a8:	movle	r0, #0
   174ac:	movgt	r0, #1
   174b0:	b	1732c <__assert_fail@plt+0x6468>
   174b4:	mov	r1, r7
   174b8:	mvn	r0, #-2147483648	; 0x80000000
   174bc:	str	r3, [sp, #4]
   174c0:	bl	17b6c <__assert_fail@plt+0x6ca8>
   174c4:	ldr	r3, [sp, #4]
   174c8:	cmp	r0, r4
   174cc:	movle	r0, #0
   174d0:	movgt	r0, #1
   174d4:	b	1738c <__assert_fail@plt+0x64c8>
   174d8:	push	{r4, lr}
   174dc:	mov	r1, #1
   174e0:	bl	1764c <__assert_fail@plt+0x6788>
   174e4:	cmp	r0, #0
   174e8:	popne	{r4, pc}
   174ec:	bl	1760c <__assert_fail@plt+0x6748>
   174f0:	push	{r4, lr}
   174f4:	mov	r1, #1
   174f8:	bl	1764c <__assert_fail@plt+0x6788>
   174fc:	cmp	r0, #0
   17500:	popne	{r4, pc}
   17504:	bl	1760c <__assert_fail@plt+0x6748>
   17508:	push	{r4, lr}
   1750c:	bl	1764c <__assert_fail@plt+0x6788>
   17510:	cmp	r0, #0
   17514:	popne	{r4, pc}
   17518:	bl	1760c <__assert_fail@plt+0x6748>
   1751c:	push	{r4, lr}
   17520:	bl	1764c <__assert_fail@plt+0x6788>
   17524:	cmp	r0, #0
   17528:	popne	{r4, pc}
   1752c:	bl	1760c <__assert_fail@plt+0x6748>
   17530:	push	{r4, r5, r6, lr}
   17534:	mov	r6, r0
   17538:	mov	r0, r1
   1753c:	mov	r4, r1
   17540:	bl	17694 <__assert_fail@plt+0x67d0>
   17544:	subs	r5, r0, #0
   17548:	beq	17560 <__assert_fail@plt+0x669c>
   1754c:	mov	r2, r4
   17550:	mov	r1, r6
   17554:	bl	10ccc <memcpy@plt>
   17558:	mov	r0, r5
   1755c:	pop	{r4, r5, r6, pc}
   17560:	bl	1760c <__assert_fail@plt+0x6748>
   17564:	push	{r4, r5, r6, lr}
   17568:	mov	r6, r0
   1756c:	mov	r0, r1
   17570:	mov	r4, r1
   17574:	bl	17694 <__assert_fail@plt+0x67d0>
   17578:	subs	r5, r0, #0
   1757c:	beq	17594 <__assert_fail@plt+0x66d0>
   17580:	mov	r2, r4
   17584:	mov	r1, r6
   17588:	bl	10ccc <memcpy@plt>
   1758c:	mov	r0, r5
   17590:	pop	{r4, r5, r6, pc}
   17594:	bl	1760c <__assert_fail@plt+0x6748>
   17598:	push	{r4, r5, r6, lr}
   1759c:	mov	r6, r0
   175a0:	add	r0, r1, #1
   175a4:	mov	r4, r1
   175a8:	bl	17694 <__assert_fail@plt+0x67d0>
   175ac:	subs	r5, r0, #0
   175b0:	beq	175d0 <__assert_fail@plt+0x670c>
   175b4:	mov	r3, #0
   175b8:	mov	r1, r6
   175bc:	strb	r3, [r5, r4]
   175c0:	mov	r2, r4
   175c4:	bl	10ccc <memcpy@plt>
   175c8:	mov	r0, r5
   175cc:	pop	{r4, r5, r6, pc}
   175d0:	bl	1760c <__assert_fail@plt+0x6748>
   175d4:	push	{r4, r5, r6, lr}
   175d8:	mov	r6, r0
   175dc:	bl	10dd4 <strlen@plt>
   175e0:	add	r4, r0, #1
   175e4:	mov	r0, r4
   175e8:	bl	17694 <__assert_fail@plt+0x67d0>
   175ec:	subs	r5, r0, #0
   175f0:	beq	17608 <__assert_fail@plt+0x6744>
   175f4:	mov	r2, r4
   175f8:	mov	r1, r6
   175fc:	bl	10ccc <memcpy@plt>
   17600:	mov	r0, r5
   17604:	pop	{r4, r5, r6, pc}
   17608:	bl	1760c <__assert_fail@plt+0x6748>
   1760c:	ldr	r3, [pc, #44]	; 17640 <__assert_fail@plt+0x677c>
   17610:	push	{r4, lr}
   17614:	mov	r2, #5
   17618:	ldr	r1, [pc, #36]	; 17644 <__assert_fail@plt+0x6780>
   1761c:	mov	r0, #0
   17620:	ldr	r4, [r3]
   17624:	bl	10d08 <dcgettext@plt>
   17628:	ldr	r2, [pc, #24]	; 17648 <__assert_fail@plt+0x6784>
   1762c:	mov	r1, #0
   17630:	mov	r3, r0
   17634:	mov	r0, r4
   17638:	bl	10d74 <error@plt>
   1763c:	bl	10eac <abort@plt>
   17640:	strdeq	r9, [r2], -r0
   17644:	andeq	r8, r1, ip, asr ip
   17648:	andeq	r8, r1, r4, lsr #11
   1764c:	cmp	r1, #0
   17650:	cmpne	r0, #0
   17654:	moveq	r1, #1
   17658:	moveq	r0, r1
   1765c:	umull	r2, r3, r0, r1
   17660:	adds	r3, r3, #0
   17664:	movne	r3, #1
   17668:	cmp	r2, #0
   1766c:	blt	1767c <__assert_fail@plt+0x67b8>
   17670:	cmp	r3, #0
   17674:	bne	1767c <__assert_fail@plt+0x67b8>
   17678:	b	10c6c <calloc@plt>
   1767c:	push	{r4, lr}
   17680:	bl	10de0 <__errno_location@plt>
   17684:	mov	r3, #12
   17688:	str	r3, [r0]
   1768c:	mov	r0, #0
   17690:	pop	{r4, pc}
   17694:	cmp	r0, #0
   17698:	moveq	r0, #1
   1769c:	cmp	r0, #0
   176a0:	blt	176a8 <__assert_fail@plt+0x67e4>
   176a4:	b	10d80 <malloc@plt>
   176a8:	push	{r4, lr}
   176ac:	bl	10de0 <__errno_location@plt>
   176b0:	mov	r3, #12
   176b4:	str	r3, [r0]
   176b8:	mov	r0, #0
   176bc:	pop	{r4, pc}
   176c0:	cmp	r0, #0
   176c4:	beq	176e8 <__assert_fail@plt+0x6824>
   176c8:	cmp	r1, #0
   176cc:	push	{lr}		; (str lr, [sp, #-4]!)
   176d0:	sub	sp, sp, #12
   176d4:	beq	176f0 <__assert_fail@plt+0x682c>
   176d8:	blt	17708 <__assert_fail@plt+0x6844>
   176dc:	add	sp, sp, #12
   176e0:	pop	{lr}		; (ldr lr, [sp], #4)
   176e4:	b	10d14 <realloc@plt>
   176e8:	mov	r0, r1
   176ec:	b	17694 <__assert_fail@plt+0x67d0>
   176f0:	str	r1, [sp, #4]
   176f4:	bl	12444 <__assert_fail@plt+0x1580>
   176f8:	ldr	r3, [sp, #4]
   176fc:	mov	r0, r3
   17700:	add	sp, sp, #12
   17704:	pop	{pc}		; (ldr pc, [sp], #4)
   17708:	bl	10de0 <__errno_location@plt>
   1770c:	mov	r2, #12
   17710:	mov	r3, #0
   17714:	str	r2, [r0]
   17718:	b	176fc <__assert_fail@plt+0x6838>
   1771c:	push	{r4, r5, r6, lr}
   17720:	mov	r4, r0
   17724:	bl	10d5c <__fpending@plt>
   17728:	ldr	r5, [r4]
   1772c:	and	r5, r5, #32
   17730:	mov	r6, r0
   17734:	mov	r0, r4
   17738:	bl	12344 <__assert_fail@plt+0x1480>
   1773c:	cmp	r5, #0
   17740:	mov	r4, r0
   17744:	bne	17764 <__assert_fail@plt+0x68a0>
   17748:	cmp	r0, #0
   1774c:	beq	1775c <__assert_fail@plt+0x6898>
   17750:	cmp	r6, #0
   17754:	beq	17780 <__assert_fail@plt+0x68bc>
   17758:	mvn	r4, #0
   1775c:	mov	r0, r4
   17760:	pop	{r4, r5, r6, pc}
   17764:	cmp	r0, #0
   17768:	bne	17758 <__assert_fail@plt+0x6894>
   1776c:	bl	10de0 <__errno_location@plt>
   17770:	str	r4, [r0]
   17774:	mvn	r4, #0
   17778:	mov	r0, r4
   1777c:	pop	{r4, r5, r6, pc}
   17780:	bl	10de0 <__errno_location@plt>
   17784:	ldr	r4, [r0]
   17788:	subs	r4, r4, #9
   1778c:	mvnne	r4, #0
   17790:	mov	r0, r4
   17794:	pop	{r4, r5, r6, pc}
   17798:	push	{r4, lr}
   1779c:	mov	r0, #14
   177a0:	bl	10e70 <nl_langinfo@plt>
   177a4:	cmp	r0, #0
   177a8:	beq	177c0 <__assert_fail@plt+0x68fc>
   177ac:	ldrb	r2, [r0]
   177b0:	ldr	r3, [pc, #16]	; 177c8 <__assert_fail@plt+0x6904>
   177b4:	cmp	r2, #0
   177b8:	moveq	r0, r3
   177bc:	pop	{r4, pc}
   177c0:	ldr	r0, [pc]	; 177c8 <__assert_fail@plt+0x6904>
   177c4:	pop	{r4, pc}
   177c8:	andeq	r8, r1, r0, ror ip
   177cc:	push	{r4, r5, r6, r7, lr}
   177d0:	subs	r6, r0, #0
   177d4:	sub	sp, sp, #12
   177d8:	addeq	r6, sp, #4
   177dc:	mov	r0, r6
   177e0:	mov	r5, r2
   177e4:	mov	r7, r1
   177e8:	bl	10d68 <mbrtowc@plt>
   177ec:	cmp	r5, #0
   177f0:	cmnne	r0, #3
   177f4:	mov	r4, r0
   177f8:	bls	17814 <__assert_fail@plt+0x6950>
   177fc:	mov	r0, #0
   17800:	bl	1786c <__assert_fail@plt+0x69a8>
   17804:	cmp	r0, #0
   17808:	moveq	r4, #1
   1780c:	ldrbeq	r3, [r7]
   17810:	streq	r3, [r6]
   17814:	mov	r0, r4
   17818:	add	sp, sp, #12
   1781c:	pop	{r4, r5, r6, r7, pc}
   17820:	push	{r4, r5, r6, lr}
   17824:	subs	r4, r2, #0
   17828:	mov	r6, r0
   1782c:	mov	r5, r1
   17830:	beq	1785c <__assert_fail@plt+0x6998>
   17834:	mov	r1, r4
   17838:	mvn	r0, #0
   1783c:	bl	17960 <__assert_fail@plt+0x6a9c>
   17840:	cmp	r0, r5
   17844:	bcs	1785c <__assert_fail@plt+0x6998>
   17848:	bl	10de0 <__errno_location@plt>
   1784c:	mov	r3, #12
   17850:	str	r3, [r0]
   17854:	mov	r0, #0
   17858:	pop	{r4, r5, r6, pc}
   1785c:	mul	r1, r5, r4
   17860:	mov	r0, r6
   17864:	pop	{r4, r5, r6, lr}
   17868:	b	176c0 <__assert_fail@plt+0x67fc>
   1786c:	push	{lr}		; (str lr, [sp, #-4]!)
   17870:	sub	sp, sp, #268	; 0x10c
   17874:	add	r1, sp, #4
   17878:	ldr	r2, [pc, #60]	; 178bc <__assert_fail@plt+0x69f8>
   1787c:	bl	178c8 <__assert_fail@plt+0x6a04>
   17880:	cmp	r0, #0
   17884:	movne	r0, #0
   17888:	bne	178b4 <__assert_fail@plt+0x69f0>
   1788c:	ldr	r1, [pc, #44]	; 178c0 <__assert_fail@plt+0x69fc>
   17890:	add	r0, sp, #4
   17894:	bl	10c90 <strcmp@plt>
   17898:	cmp	r0, #0
   1789c:	beq	178b4 <__assert_fail@plt+0x69f0>
   178a0:	add	r0, sp, #4
   178a4:	ldr	r1, [pc, #24]	; 178c4 <__assert_fail@plt+0x6a00>
   178a8:	bl	10c90 <strcmp@plt>
   178ac:	adds	r0, r0, #0
   178b0:	movne	r0, #1
   178b4:	add	sp, sp, #268	; 0x10c
   178b8:	pop	{pc}		; (ldr pc, [sp], #4)
   178bc:	andeq	r0, r0, r1, lsl #2
   178c0:	andeq	r8, r1, r8, ror ip
   178c4:	andeq	r8, r1, ip, ror ip
   178c8:	push	{r4, r5, r6, lr}
   178cc:	mov	r5, r1
   178d0:	mov	r1, #0
   178d4:	mov	r4, r2
   178d8:	bl	10e58 <setlocale@plt>
   178dc:	subs	r6, r0, #0
   178e0:	beq	1793c <__assert_fail@plt+0x6a78>
   178e4:	bl	10dd4 <strlen@plt>
   178e8:	cmp	r4, r0
   178ec:	bhi	17924 <__assert_fail@plt+0x6a60>
   178f0:	cmp	r4, #0
   178f4:	bne	17900 <__assert_fail@plt+0x6a3c>
   178f8:	mov	r0, #34	; 0x22
   178fc:	pop	{r4, r5, r6, pc}
   17900:	sub	r4, r4, #1
   17904:	mov	r1, r6
   17908:	mov	r2, r4
   1790c:	mov	r0, r5
   17910:	bl	10ccc <memcpy@plt>
   17914:	mov	r3, #0
   17918:	strb	r3, [r5, r4]
   1791c:	mov	r0, #34	; 0x22
   17920:	pop	{r4, r5, r6, pc}
   17924:	add	r2, r0, #1
   17928:	mov	r1, r6
   1792c:	mov	r0, r5
   17930:	bl	10ccc <memcpy@plt>
   17934:	mov	r0, #0
   17938:	pop	{r4, r5, r6, pc}
   1793c:	cmp	r4, #0
   17940:	beq	17950 <__assert_fail@plt+0x6a8c>
   17944:	strb	r6, [r5]
   17948:	mov	r0, #22
   1794c:	pop	{r4, r5, r6, pc}
   17950:	mov	r0, #22
   17954:	pop	{r4, r5, r6, pc}
   17958:	mov	r1, #0
   1795c:	b	10e58 <setlocale@plt>
   17960:	subs	r2, r1, #1
   17964:	bxeq	lr
   17968:	bcc	17b40 <__assert_fail@plt+0x6c7c>
   1796c:	cmp	r0, r1
   17970:	bls	17b24 <__assert_fail@plt+0x6c60>
   17974:	tst	r1, r2
   17978:	beq	17b30 <__assert_fail@plt+0x6c6c>
   1797c:	clz	r3, r0
   17980:	clz	r2, r1
   17984:	sub	r3, r2, r3
   17988:	rsbs	r3, r3, #31
   1798c:	addne	r3, r3, r3, lsl #1
   17990:	mov	r2, #0
   17994:	addne	pc, pc, r3, lsl #2
   17998:	nop			; (mov r0, r0)
   1799c:	cmp	r0, r1, lsl #31
   179a0:	adc	r2, r2, r2
   179a4:	subcs	r0, r0, r1, lsl #31
   179a8:	cmp	r0, r1, lsl #30
   179ac:	adc	r2, r2, r2
   179b0:	subcs	r0, r0, r1, lsl #30
   179b4:	cmp	r0, r1, lsl #29
   179b8:	adc	r2, r2, r2
   179bc:	subcs	r0, r0, r1, lsl #29
   179c0:	cmp	r0, r1, lsl #28
   179c4:	adc	r2, r2, r2
   179c8:	subcs	r0, r0, r1, lsl #28
   179cc:	cmp	r0, r1, lsl #27
   179d0:	adc	r2, r2, r2
   179d4:	subcs	r0, r0, r1, lsl #27
   179d8:	cmp	r0, r1, lsl #26
   179dc:	adc	r2, r2, r2
   179e0:	subcs	r0, r0, r1, lsl #26
   179e4:	cmp	r0, r1, lsl #25
   179e8:	adc	r2, r2, r2
   179ec:	subcs	r0, r0, r1, lsl #25
   179f0:	cmp	r0, r1, lsl #24
   179f4:	adc	r2, r2, r2
   179f8:	subcs	r0, r0, r1, lsl #24
   179fc:	cmp	r0, r1, lsl #23
   17a00:	adc	r2, r2, r2
   17a04:	subcs	r0, r0, r1, lsl #23
   17a08:	cmp	r0, r1, lsl #22
   17a0c:	adc	r2, r2, r2
   17a10:	subcs	r0, r0, r1, lsl #22
   17a14:	cmp	r0, r1, lsl #21
   17a18:	adc	r2, r2, r2
   17a1c:	subcs	r0, r0, r1, lsl #21
   17a20:	cmp	r0, r1, lsl #20
   17a24:	adc	r2, r2, r2
   17a28:	subcs	r0, r0, r1, lsl #20
   17a2c:	cmp	r0, r1, lsl #19
   17a30:	adc	r2, r2, r2
   17a34:	subcs	r0, r0, r1, lsl #19
   17a38:	cmp	r0, r1, lsl #18
   17a3c:	adc	r2, r2, r2
   17a40:	subcs	r0, r0, r1, lsl #18
   17a44:	cmp	r0, r1, lsl #17
   17a48:	adc	r2, r2, r2
   17a4c:	subcs	r0, r0, r1, lsl #17
   17a50:	cmp	r0, r1, lsl #16
   17a54:	adc	r2, r2, r2
   17a58:	subcs	r0, r0, r1, lsl #16
   17a5c:	cmp	r0, r1, lsl #15
   17a60:	adc	r2, r2, r2
   17a64:	subcs	r0, r0, r1, lsl #15
   17a68:	cmp	r0, r1, lsl #14
   17a6c:	adc	r2, r2, r2
   17a70:	subcs	r0, r0, r1, lsl #14
   17a74:	cmp	r0, r1, lsl #13
   17a78:	adc	r2, r2, r2
   17a7c:	subcs	r0, r0, r1, lsl #13
   17a80:	cmp	r0, r1, lsl #12
   17a84:	adc	r2, r2, r2
   17a88:	subcs	r0, r0, r1, lsl #12
   17a8c:	cmp	r0, r1, lsl #11
   17a90:	adc	r2, r2, r2
   17a94:	subcs	r0, r0, r1, lsl #11
   17a98:	cmp	r0, r1, lsl #10
   17a9c:	adc	r2, r2, r2
   17aa0:	subcs	r0, r0, r1, lsl #10
   17aa4:	cmp	r0, r1, lsl #9
   17aa8:	adc	r2, r2, r2
   17aac:	subcs	r0, r0, r1, lsl #9
   17ab0:	cmp	r0, r1, lsl #8
   17ab4:	adc	r2, r2, r2
   17ab8:	subcs	r0, r0, r1, lsl #8
   17abc:	cmp	r0, r1, lsl #7
   17ac0:	adc	r2, r2, r2
   17ac4:	subcs	r0, r0, r1, lsl #7
   17ac8:	cmp	r0, r1, lsl #6
   17acc:	adc	r2, r2, r2
   17ad0:	subcs	r0, r0, r1, lsl #6
   17ad4:	cmp	r0, r1, lsl #5
   17ad8:	adc	r2, r2, r2
   17adc:	subcs	r0, r0, r1, lsl #5
   17ae0:	cmp	r0, r1, lsl #4
   17ae4:	adc	r2, r2, r2
   17ae8:	subcs	r0, r0, r1, lsl #4
   17aec:	cmp	r0, r1, lsl #3
   17af0:	adc	r2, r2, r2
   17af4:	subcs	r0, r0, r1, lsl #3
   17af8:	cmp	r0, r1, lsl #2
   17afc:	adc	r2, r2, r2
   17b00:	subcs	r0, r0, r1, lsl #2
   17b04:	cmp	r0, r1, lsl #1
   17b08:	adc	r2, r2, r2
   17b0c:	subcs	r0, r0, r1, lsl #1
   17b10:	cmp	r0, r1
   17b14:	adc	r2, r2, r2
   17b18:	subcs	r0, r0, r1
   17b1c:	mov	r0, r2
   17b20:	bx	lr
   17b24:	moveq	r0, #1
   17b28:	movne	r0, #0
   17b2c:	bx	lr
   17b30:	clz	r2, r1
   17b34:	rsb	r2, r2, #31
   17b38:	lsr	r0, r0, r2
   17b3c:	bx	lr
   17b40:	cmp	r0, #0
   17b44:	mvnne	r0, #0
   17b48:	b	17de8 <__assert_fail@plt+0x6f24>
   17b4c:	cmp	r1, #0
   17b50:	beq	17b40 <__assert_fail@plt+0x6c7c>
   17b54:	push	{r0, r1, lr}
   17b58:	bl	17960 <__assert_fail@plt+0x6a9c>
   17b5c:	pop	{r1, r2, lr}
   17b60:	mul	r3, r2, r0
   17b64:	sub	r1, r1, r3
   17b68:	bx	lr
   17b6c:	cmp	r1, #0
   17b70:	beq	17d7c <__assert_fail@plt+0x6eb8>
   17b74:	eor	ip, r0, r1
   17b78:	rsbmi	r1, r1, #0
   17b7c:	subs	r2, r1, #1
   17b80:	beq	17d48 <__assert_fail@plt+0x6e84>
   17b84:	movs	r3, r0
   17b88:	rsbmi	r3, r0, #0
   17b8c:	cmp	r3, r1
   17b90:	bls	17d54 <__assert_fail@plt+0x6e90>
   17b94:	tst	r1, r2
   17b98:	beq	17d64 <__assert_fail@plt+0x6ea0>
   17b9c:	clz	r2, r3
   17ba0:	clz	r0, r1
   17ba4:	sub	r2, r0, r2
   17ba8:	rsbs	r2, r2, #31
   17bac:	addne	r2, r2, r2, lsl #1
   17bb0:	mov	r0, #0
   17bb4:	addne	pc, pc, r2, lsl #2
   17bb8:	nop			; (mov r0, r0)
   17bbc:	cmp	r3, r1, lsl #31
   17bc0:	adc	r0, r0, r0
   17bc4:	subcs	r3, r3, r1, lsl #31
   17bc8:	cmp	r3, r1, lsl #30
   17bcc:	adc	r0, r0, r0
   17bd0:	subcs	r3, r3, r1, lsl #30
   17bd4:	cmp	r3, r1, lsl #29
   17bd8:	adc	r0, r0, r0
   17bdc:	subcs	r3, r3, r1, lsl #29
   17be0:	cmp	r3, r1, lsl #28
   17be4:	adc	r0, r0, r0
   17be8:	subcs	r3, r3, r1, lsl #28
   17bec:	cmp	r3, r1, lsl #27
   17bf0:	adc	r0, r0, r0
   17bf4:	subcs	r3, r3, r1, lsl #27
   17bf8:	cmp	r3, r1, lsl #26
   17bfc:	adc	r0, r0, r0
   17c00:	subcs	r3, r3, r1, lsl #26
   17c04:	cmp	r3, r1, lsl #25
   17c08:	adc	r0, r0, r0
   17c0c:	subcs	r3, r3, r1, lsl #25
   17c10:	cmp	r3, r1, lsl #24
   17c14:	adc	r0, r0, r0
   17c18:	subcs	r3, r3, r1, lsl #24
   17c1c:	cmp	r3, r1, lsl #23
   17c20:	adc	r0, r0, r0
   17c24:	subcs	r3, r3, r1, lsl #23
   17c28:	cmp	r3, r1, lsl #22
   17c2c:	adc	r0, r0, r0
   17c30:	subcs	r3, r3, r1, lsl #22
   17c34:	cmp	r3, r1, lsl #21
   17c38:	adc	r0, r0, r0
   17c3c:	subcs	r3, r3, r1, lsl #21
   17c40:	cmp	r3, r1, lsl #20
   17c44:	adc	r0, r0, r0
   17c48:	subcs	r3, r3, r1, lsl #20
   17c4c:	cmp	r3, r1, lsl #19
   17c50:	adc	r0, r0, r0
   17c54:	subcs	r3, r3, r1, lsl #19
   17c58:	cmp	r3, r1, lsl #18
   17c5c:	adc	r0, r0, r0
   17c60:	subcs	r3, r3, r1, lsl #18
   17c64:	cmp	r3, r1, lsl #17
   17c68:	adc	r0, r0, r0
   17c6c:	subcs	r3, r3, r1, lsl #17
   17c70:	cmp	r3, r1, lsl #16
   17c74:	adc	r0, r0, r0
   17c78:	subcs	r3, r3, r1, lsl #16
   17c7c:	cmp	r3, r1, lsl #15
   17c80:	adc	r0, r0, r0
   17c84:	subcs	r3, r3, r1, lsl #15
   17c88:	cmp	r3, r1, lsl #14
   17c8c:	adc	r0, r0, r0
   17c90:	subcs	r3, r3, r1, lsl #14
   17c94:	cmp	r3, r1, lsl #13
   17c98:	adc	r0, r0, r0
   17c9c:	subcs	r3, r3, r1, lsl #13
   17ca0:	cmp	r3, r1, lsl #12
   17ca4:	adc	r0, r0, r0
   17ca8:	subcs	r3, r3, r1, lsl #12
   17cac:	cmp	r3, r1, lsl #11
   17cb0:	adc	r0, r0, r0
   17cb4:	subcs	r3, r3, r1, lsl #11
   17cb8:	cmp	r3, r1, lsl #10
   17cbc:	adc	r0, r0, r0
   17cc0:	subcs	r3, r3, r1, lsl #10
   17cc4:	cmp	r3, r1, lsl #9
   17cc8:	adc	r0, r0, r0
   17ccc:	subcs	r3, r3, r1, lsl #9
   17cd0:	cmp	r3, r1, lsl #8
   17cd4:	adc	r0, r0, r0
   17cd8:	subcs	r3, r3, r1, lsl #8
   17cdc:	cmp	r3, r1, lsl #7
   17ce0:	adc	r0, r0, r0
   17ce4:	subcs	r3, r3, r1, lsl #7
   17ce8:	cmp	r3, r1, lsl #6
   17cec:	adc	r0, r0, r0
   17cf0:	subcs	r3, r3, r1, lsl #6
   17cf4:	cmp	r3, r1, lsl #5
   17cf8:	adc	r0, r0, r0
   17cfc:	subcs	r3, r3, r1, lsl #5
   17d00:	cmp	r3, r1, lsl #4
   17d04:	adc	r0, r0, r0
   17d08:	subcs	r3, r3, r1, lsl #4
   17d0c:	cmp	r3, r1, lsl #3
   17d10:	adc	r0, r0, r0
   17d14:	subcs	r3, r3, r1, lsl #3
   17d18:	cmp	r3, r1, lsl #2
   17d1c:	adc	r0, r0, r0
   17d20:	subcs	r3, r3, r1, lsl #2
   17d24:	cmp	r3, r1, lsl #1
   17d28:	adc	r0, r0, r0
   17d2c:	subcs	r3, r3, r1, lsl #1
   17d30:	cmp	r3, r1
   17d34:	adc	r0, r0, r0
   17d38:	subcs	r3, r3, r1
   17d3c:	cmp	ip, #0
   17d40:	rsbmi	r0, r0, #0
   17d44:	bx	lr
   17d48:	teq	ip, r0
   17d4c:	rsbmi	r0, r0, #0
   17d50:	bx	lr
   17d54:	movcc	r0, #0
   17d58:	asreq	r0, ip, #31
   17d5c:	orreq	r0, r0, #1
   17d60:	bx	lr
   17d64:	clz	r2, r1
   17d68:	rsb	r2, r2, #31
   17d6c:	cmp	ip, #0
   17d70:	lsr	r0, r3, r2
   17d74:	rsbmi	r0, r0, #0
   17d78:	bx	lr
   17d7c:	cmp	r0, #0
   17d80:	mvngt	r0, #-2147483648	; 0x80000000
   17d84:	movlt	r0, #-2147483648	; 0x80000000
   17d88:	b	17de8 <__assert_fail@plt+0x6f24>
   17d8c:	cmp	r1, #0
   17d90:	beq	17d7c <__assert_fail@plt+0x6eb8>
   17d94:	push	{r0, r1, lr}
   17d98:	bl	17b74 <__assert_fail@plt+0x6cb0>
   17d9c:	pop	{r1, r2, lr}
   17da0:	mul	r3, r2, r0
   17da4:	sub	r1, r1, r3
   17da8:	bx	lr
   17dac:	cmp	r3, #0
   17db0:	cmpeq	r2, #0
   17db4:	bne	17dcc <__assert_fail@plt+0x6f08>
   17db8:	cmp	r1, #0
   17dbc:	cmpeq	r0, #0
   17dc0:	mvnne	r1, #0
   17dc4:	mvnne	r0, #0
   17dc8:	b	17de8 <__assert_fail@plt+0x6f24>
   17dcc:	sub	sp, sp, #8
   17dd0:	push	{sp, lr}
   17dd4:	bl	17df8 <__assert_fail@plt+0x6f34>
   17dd8:	ldr	lr, [sp, #4]
   17ddc:	add	sp, sp, #8
   17de0:	pop	{r2, r3}
   17de4:	bx	lr
   17de8:	push	{r1, lr}
   17dec:	mov	r0, #8
   17df0:	bl	10c84 <raise@plt>
   17df4:	pop	{r1, pc}
   17df8:	cmp	r1, r3
   17dfc:	push	{r4, r5, r6, r7, r8, r9, lr}
   17e00:	cmpeq	r0, r2
   17e04:	mov	r4, r0
   17e08:	mov	r5, r1
   17e0c:	ldr	r9, [sp, #28]
   17e10:	movcc	r0, #0
   17e14:	movcc	r1, #0
   17e18:	bcc	17f10 <__assert_fail@plt+0x704c>
   17e1c:	cmp	r3, #0
   17e20:	clzeq	ip, r2
   17e24:	clzne	ip, r3
   17e28:	addeq	ip, ip, #32
   17e2c:	cmp	r5, #0
   17e30:	clzeq	r1, r4
   17e34:	addeq	r1, r1, #32
   17e38:	clzne	r1, r5
   17e3c:	sub	ip, ip, r1
   17e40:	sub	lr, ip, #32
   17e44:	lsl	r7, r3, ip
   17e48:	rsb	r8, ip, #32
   17e4c:	orr	r7, r7, r2, lsl lr
   17e50:	orr	r7, r7, r2, lsr r8
   17e54:	lsl	r6, r2, ip
   17e58:	cmp	r5, r7
   17e5c:	cmpeq	r4, r6
   17e60:	movcc	r0, #0
   17e64:	movcc	r1, #0
   17e68:	bcc	17e84 <__assert_fail@plt+0x6fc0>
   17e6c:	mov	r3, #1
   17e70:	subs	r4, r4, r6
   17e74:	lsl	r1, r3, lr
   17e78:	lsl	r0, r3, ip
   17e7c:	orr	r1, r1, r3, lsr r8
   17e80:	sbc	r5, r5, r7
   17e84:	cmp	ip, #0
   17e88:	beq	17f10 <__assert_fail@plt+0x704c>
   17e8c:	lsrs	r3, r7, #1
   17e90:	rrx	r2, r6
   17e94:	mov	r6, ip
   17e98:	b	17ebc <__assert_fail@plt+0x6ff8>
   17e9c:	subs	r4, r4, r2
   17ea0:	sbc	r5, r5, r3
   17ea4:	adds	r4, r4, r4
   17ea8:	adc	r5, r5, r5
   17eac:	adds	r4, r4, #1
   17eb0:	adc	r5, r5, #0
   17eb4:	subs	r6, r6, #1
   17eb8:	beq	17ed8 <__assert_fail@plt+0x7014>
   17ebc:	cmp	r5, r3
   17ec0:	cmpeq	r4, r2
   17ec4:	bcs	17e9c <__assert_fail@plt+0x6fd8>
   17ec8:	adds	r4, r4, r4
   17ecc:	adc	r5, r5, r5
   17ed0:	subs	r6, r6, #1
   17ed4:	bne	17ebc <__assert_fail@plt+0x6ff8>
   17ed8:	lsr	r6, r4, ip
   17edc:	lsr	r7, r5, ip
   17ee0:	orr	r6, r6, r5, lsl r8
   17ee4:	adds	r2, r0, r4
   17ee8:	orr	r6, r6, r5, lsr lr
   17eec:	adc	r3, r1, r5
   17ef0:	lsl	r1, r7, ip
   17ef4:	orr	r1, r1, r6, lsl lr
   17ef8:	lsl	r0, r6, ip
   17efc:	orr	r1, r1, r6, lsr r8
   17f00:	subs	r0, r2, r0
   17f04:	mov	r4, r6
   17f08:	mov	r5, r7
   17f0c:	sbc	r1, r3, r1
   17f10:	cmp	r9, #0
   17f14:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   17f18:	strd	r4, [r9]
   17f1c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   17f20:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17f24:	mov	r7, r0
   17f28:	ldr	r6, [pc, #72]	; 17f78 <__assert_fail@plt+0x70b4>
   17f2c:	ldr	r5, [pc, #72]	; 17f7c <__assert_fail@plt+0x70b8>
   17f30:	add	r6, pc, r6
   17f34:	add	r5, pc, r5
   17f38:	sub	r6, r6, r5
   17f3c:	mov	r8, r1
   17f40:	mov	r9, r2
   17f44:	bl	10c4c <calloc@plt-0x20>
   17f48:	asrs	r6, r6, #2
   17f4c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   17f50:	mov	r4, #0
   17f54:	add	r4, r4, #1
   17f58:	ldr	r3, [r5], #4
   17f5c:	mov	r2, r9
   17f60:	mov	r1, r8
   17f64:	mov	r0, r7
   17f68:	blx	r3
   17f6c:	cmp	r6, r4
   17f70:	bne	17f54 <__assert_fail@plt+0x7090>
   17f74:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17f78:	ldrdeq	r0, [r1], -r8
   17f7c:	ldrdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   17f80:	bx	lr
   17f84:	ldr	r3, [pc, #12]	; 17f98 <__assert_fail@plt+0x70d4>
   17f88:	mov	r1, #0
   17f8c:	add	r3, pc, r3
   17f90:	ldr	r2, [r3]
   17f94:	b	10dec <__cxa_atexit@plt>
   17f98:	andeq	r1, r1, ip, asr #2

Disassembly of section .fini:

00017f9c <.fini>:
   17f9c:	push	{r3, lr}
   17fa0:	pop	{r3, pc}
