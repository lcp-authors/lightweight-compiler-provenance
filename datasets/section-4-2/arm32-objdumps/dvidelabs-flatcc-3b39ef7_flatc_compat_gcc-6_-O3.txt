
../repos/dvidelabs-flatcc-3b39ef7/test/flatc_compat/flatc_compat:     file format elf32-littlearm


Disassembly of section .init:

00010cc0 <.init>:
   10cc0:	push	{r3, lr}
   10cc4:	bl	111d4 <_start@@Base+0x3c>
   10cc8:	pop	{r3, pc}

Disassembly of section .plt:

00010ccc <strcmp@plt-0x14>:
   10ccc:	push	{lr}		; (str lr, [sp, #-4]!)
   10cd0:	ldr	lr, [pc, #4]	; 10cdc <strcmp@plt-0x4>
   10cd4:	add	lr, pc, lr
   10cd8:	ldr	pc, [lr, #8]!
   10cdc:	andeq	r4, r1, r4, lsr #6

00010ce0 <strcmp@plt>:
   10ce0:	add	ip, pc, #0, 12
   10ce4:	add	ip, ip, #20, 20	; 0x14000
   10ce8:	ldr	pc, [ip, #804]!	; 0x324

00010cec <printf@plt>:
   10cec:	add	ip, pc, #0, 12
   10cf0:	add	ip, ip, #20, 20	; 0x14000
   10cf4:	ldr	pc, [ip, #796]!	; 0x31c

00010cf8 <fopen@plt>:
   10cf8:	add	ip, pc, #0, 12
   10cfc:	add	ip, ip, #20, 20	; 0x14000
   10d00:	ldr	pc, [ip, #788]!	; 0x314

00010d04 <free@plt>:
   10d04:	add	ip, pc, #0, 12
   10d08:	add	ip, ip, #20, 20	; 0x14000
   10d0c:	ldr	pc, [ip, #780]!	; 0x30c

00010d10 <memcpy@plt>:
   10d10:	add	ip, pc, #0, 12
   10d14:	add	ip, ip, #20, 20	; 0x14000
   10d18:	ldr	pc, [ip, #772]!	; 0x304

00010d1c <ftell@plt>:
   10d1c:	add	ip, pc, #0, 12
   10d20:	add	ip, ip, #20, 20	; 0x14000
   10d24:	ldr	pc, [ip, #764]!	; 0x2fc

00010d28 <rewind@plt>:
   10d28:	add	ip, pc, #0, 12
   10d2c:	add	ip, ip, #20, 20	; 0x14000
   10d30:	ldr	pc, [ip, #756]!	; 0x2f4

00010d34 <fwrite@plt>:
   10d34:	add	ip, pc, #0, 12
   10d38:	add	ip, ip, #20, 20	; 0x14000
   10d3c:	ldr	pc, [ip, #748]!	; 0x2ec

00010d40 <fread@plt>:
   10d40:	add	ip, pc, #0, 12
   10d44:	add	ip, ip, #20, 20	; 0x14000
   10d48:	ldr	pc, [ip, #740]!	; 0x2e4

00010d4c <puts@plt>:
   10d4c:	add	ip, pc, #0, 12
   10d50:	add	ip, ip, #20, 20	; 0x14000
   10d54:	ldr	pc, [ip, #732]!	; 0x2dc

00010d58 <malloc@plt>:
   10d58:	add	ip, pc, #0, 12
   10d5c:	add	ip, ip, #20, 20	; 0x14000
   10d60:	ldr	pc, [ip, #724]!	; 0x2d4

00010d64 <__libc_start_main@plt>:
   10d64:	add	ip, pc, #0, 12
   10d68:	add	ip, ip, #20, 20	; 0x14000
   10d6c:	ldr	pc, [ip, #716]!	; 0x2cc

00010d70 <__gmon_start__@plt>:
   10d70:	add	ip, pc, #0, 12
   10d74:	add	ip, ip, #20, 20	; 0x14000
   10d78:	ldr	pc, [ip, #708]!	; 0x2c4

00010d7c <exit@plt>:
   10d7c:	add	ip, pc, #0, 12
   10d80:	add	ip, ip, #20, 20	; 0x14000
   10d84:	ldr	pc, [ip, #700]!	; 0x2bc

00010d88 <fprintf@plt>:
   10d88:	add	ip, pc, #0, 12
   10d8c:	add	ip, ip, #20, 20	; 0x14000
   10d90:	ldr	pc, [ip, #692]!	; 0x2b4

00010d94 <posix_memalign@plt>:
   10d94:	add	ip, pc, #0, 12
   10d98:	add	ip, ip, #20, 20	; 0x14000
   10d9c:	ldr	pc, [ip, #684]!	; 0x2ac

00010da0 <strncpy@plt>:
   10da0:	add	ip, pc, #0, 12
   10da4:	add	ip, ip, #20, 20	; 0x14000
   10da8:	ldr	pc, [ip, #676]!	; 0x2a4

00010dac <fclose@plt>:
   10dac:	add	ip, pc, #0, 12
   10db0:	add	ip, ip, #20, 20	; 0x14000
   10db4:	ldr	pc, [ip, #668]!	; 0x29c

00010db8 <fputc@plt>:
   10db8:	add	ip, pc, #0, 12
   10dbc:	add	ip, ip, #20, 20	; 0x14000
   10dc0:	ldr	pc, [ip, #660]!	; 0x294

00010dc4 <fseek@plt>:
   10dc4:	add	ip, pc, #0, 12
   10dc8:	add	ip, ip, #20, 20	; 0x14000
   10dcc:	ldr	pc, [ip, #652]!	; 0x28c

00010dd0 <abort@plt>:
   10dd0:	add	ip, pc, #0, 12
   10dd4:	add	ip, ip, #20, 20	; 0x14000
   10dd8:	ldr	pc, [ip, #644]!	; 0x284

00010ddc <__assert_fail@plt>:
   10ddc:	add	ip, pc, #0, 12
   10de0:	add	ip, ip, #20, 20	; 0x14000
   10de4:	ldr	pc, [ip, #636]!	; 0x27c

Disassembly of section .text:

00010de8 <main@@Base-0x70>:
   10de8:	push	{r4, lr}
   10dec:	mov	r2, #108	; 0x6c
   10df0:	ldr	r3, [pc, #8]	; 10e00 <__assert_fail@plt+0x24>
   10df4:	ldr	r1, [pc, #8]	; 10e04 <__assert_fail@plt+0x28>
   10df8:	ldr	r0, [pc, #8]	; 10e08 <__assert_fail@plt+0x2c>
   10dfc:	bl	10ddc <__assert_fail@plt>
   10e00:	andeq	r3, r1, r8, asr ip
   10e04:			; <UNDEFINED> instruction: 0x00013cbc
   10e08:	andeq	r3, r1, r4, lsr #26
   10e0c:	push	{r4, lr}
   10e10:	ldr	r3, [pc, #12]	; 10e24 <__assert_fail@plt+0x48>
   10e14:	ldr	r2, [pc, #12]	; 10e28 <__assert_fail@plt+0x4c>
   10e18:	ldr	r1, [pc, #12]	; 10e2c <__assert_fail@plt+0x50>
   10e1c:	ldr	r0, [pc, #12]	; 10e30 <__assert_fail@plt+0x54>
   10e20:	bl	10ddc <__assert_fail@plt>
   10e24:	andeq	r3, r1, r4, ror ip
   10e28:			; <UNDEFINED> instruction: 0x000002bb
   10e2c:	andeq	r3, r1, ip, asr sp
   10e30:	andeq	r3, r1, r0, asr #27
   10e34:	push	{r4, lr}
   10e38:	mov	r2, #380	; 0x17c
   10e3c:	ldr	r3, [pc, #8]	; 10e4c <__assert_fail@plt+0x70>
   10e40:	ldr	r1, [pc, #8]	; 10e50 <__assert_fail@plt+0x74>
   10e44:	ldr	r0, [pc, #8]	; 10e54 <__assert_fail@plt+0x78>
   10e48:	bl	10ddc <__assert_fail@plt>
   10e4c:	muleq	r1, r0, ip
   10e50:	andeq	r3, r1, ip, asr sp
   10e54:	andeq	r3, r1, r4, lsr #26

00010e58 <main@@Base>:
   10e58:	sub	r3, r0, #1
   10e5c:	cmp	r3, #1
   10e60:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10e64:	sub	sp, sp, #36	; 0x24
   10e68:	bhi	11140 <main@@Base+0x2e8>
   10e6c:	cmp	r0, #2
   10e70:	ldr	r3, [pc, #744]	; 11160 <main@@Base+0x308>
   10e74:	ldreq	r2, [r1, #4]
   10e78:	ldr	r1, [pc, #740]	; 11164 <main@@Base+0x30c>
   10e7c:	ldrne	r0, [r3]
   10e80:	moveq	r0, r2
   10e84:	streq	r2, [r3]
   10e88:	bl	10cf8 <fopen@plt>
   10e8c:	subs	r8, r0, #0
   10e90:	beq	11134 <main@@Base+0x2dc>
   10e94:	mov	r2, #2
   10e98:	mov	r1, #0
   10e9c:	bl	10dc4 <fseek@plt>
   10ea0:	mov	r0, r8
   10ea4:	bl	10d1c <ftell@plt>
   10ea8:	cmp	r0, #1024	; 0x400
   10eac:	mov	r7, r0
   10eb0:	bhi	11124 <main@@Base+0x2cc>
   10eb4:	mov	r0, r8
   10eb8:	bl	10d28 <rewind@plt>
   10ebc:	cmp	r7, #0
   10ec0:	movne	r0, r7
   10ec4:	moveq	r0, #1
   10ec8:	bl	10d58 <malloc@plt>
   10ecc:	subs	r6, r0, #0
   10ed0:	beq	11124 <main@@Base+0x2cc>
   10ed4:	mov	r4, #0
   10ed8:	mov	r9, #1
   10edc:	b	10ee4 <main@@Base+0x8c>
   10ee0:	add	r4, r4, r0
   10ee4:	mov	r3, r8
   10ee8:	sub	r2, r7, r4
   10eec:	mov	r1, r9
   10ef0:	add	r0, r6, r4
   10ef4:	bl	10d40 <fread@plt>
   10ef8:	cmp	r0, #0
   10efc:	bne	10ee0 <main@@Base+0x88>
   10f00:	cmp	r7, r4
   10f04:	mov	r5, r0
   10f08:	mov	r0, r8
   10f0c:	bne	11030 <main@@Base+0x1d8>
   10f10:	bl	10dac <fclose@plt>
   10f14:	add	sl, sp, #32
   10f18:	mov	r4, #0
   10f1c:	add	r2, r7, #255	; 0xff
   10f20:	str	r4, [sl, #-20]!	; 0xffffffec
   10f24:	bic	r2, r2, #255	; 0xff
   10f28:	mov	r0, sl
   10f2c:	mov	r1, #256	; 0x100
   10f30:	bl	10d94 <posix_memalign@plt>
   10f34:	ldr	r3, [sp, #12]
   10f38:	str	r3, [sp, #4]
   10f3c:	cmp	r0, r4
   10f40:	beq	10f5c <main@@Base+0x104>
   10f44:	cmp	r3, #0
   10f48:	beq	10f5c <main@@Base+0x104>
   10f4c:	mov	r0, r3
   10f50:	str	r4, [sp, #4]
   10f54:	bl	10d04 <free@plt>
   10f58:	str	r4, [sp, #12]
   10f5c:	mov	r2, r7
   10f60:	mov	r1, r6
   10f64:	ldr	r0, [sp, #4]
   10f68:	bl	10d10 <memcpy@plt>
   10f6c:	mov	r0, r6
   10f70:	bl	10d04 <free@plt>
   10f74:	ldr	r3, [pc, #492]	; 11168 <main@@Base+0x310>
   10f78:	ldr	r2, [pc, #492]	; 1116c <main@@Base+0x314>
   10f7c:	ldr	r1, [pc, #492]	; 11170 <main@@Base+0x318>
   10f80:	ldr	r5, [r3]
   10f84:	mov	r0, r5
   10f88:	bl	10d88 <fprintf@plt>
   10f8c:	cmp	r7, #0
   10f90:	beq	1107c <main@@Base+0x224>
   10f94:	ldr	r3, [sp, #4]
   10f98:	mov	fp, #0
   10f9c:	ldr	r9, [pc, #464]	; 11174 <main@@Base+0x31c>
   10fa0:	mov	r8, fp
   10fa4:	sub	r6, r3, #1
   10fa8:	b	11010 <main@@Base+0x1b8>
   10fac:	cmp	fp, #0
   10fb0:	beq	10fc4 <main@@Base+0x16c>
   10fb4:	mov	r2, sl
   10fb8:	ldr	r1, [pc, #440]	; 11178 <main@@Base+0x320>
   10fbc:	mov	r0, r5
   10fc0:	bl	10d88 <fprintf@plt>
   10fc4:	mov	r2, fp
   10fc8:	ldr	r1, [pc, #428]	; 1117c <main@@Base+0x324>
   10fcc:	mov	r0, r5
   10fd0:	bl	10d88 <fprintf@plt>
   10fd4:	ldrb	r2, [r6, #1]
   10fd8:	mov	r1, r9
   10fdc:	mov	r0, r5
   10fe0:	bl	10d88 <fprintf@plt>
   10fe4:	ldrb	r2, [r6, #1]!
   10fe8:	add	r3, sp, #32
   10fec:	add	r3, r3, r4
   10ff0:	sub	r1, r2, #32
   10ff4:	cmp	r1, #94	; 0x5e
   10ff8:	add	fp, fp, #1
   10ffc:	movhi	r2, #46	; 0x2e
   11000:	cmp	fp, r7
   11004:	strb	r8, [r3, #-19]	; 0xffffffed
   11008:	strb	r2, [r3, #-20]	; 0xffffffec
   1100c:	beq	11044 <main@@Base+0x1ec>
   11010:	ands	r4, fp, #15
   11014:	beq	10fac <main@@Base+0x154>
   11018:	tst	fp, #7
   1101c:	bne	10fd4 <main@@Base+0x17c>
   11020:	mov	r1, r5
   11024:	mov	r0, #32
   11028:	bl	10db8 <fputc@plt>
   1102c:	b	10fd4 <main@@Base+0x17c>
   11030:	bl	10dac <fclose@plt>
   11034:	mov	r0, r6
   11038:	bl	10d04 <free@plt>
   1103c:	mov	r6, r5
   11040:	b	10f14 <main@@Base+0xbc>
   11044:	tst	r7, #15
   11048:	beq	1107c <main@@Base+0x224>
   1104c:	ldr	r9, [pc, #300]	; 11180 <main@@Base+0x328>
   11050:	mov	r4, r7
   11054:	mov	r8, #3
   11058:	mov	r6, #1
   1105c:	add	r4, r4, #1
   11060:	mov	r3, r5
   11064:	mov	r2, r8
   11068:	mov	r1, r6
   1106c:	mov	r0, r9
   11070:	bl	10d34 <fwrite@plt>
   11074:	tst	r4, #15
   11078:	bne	1105c <main@@Base+0x204>
   1107c:	mov	r2, sl
   11080:	ldr	r1, [pc, #240]	; 11178 <main@@Base+0x320>
   11084:	mov	r0, r5
   11088:	bl	10d88 <fprintf@plt>
   1108c:	ldr	r3, [pc, #240]	; 11184 <main@@Base+0x32c>
   11090:	ldr	r2, [pc, #240]	; 11188 <main@@Base+0x330>
   11094:	mov	r1, r7
   11098:	ldr	r0, [sp, #4]
   1109c:	bl	13048 <flatcc_verify_table_as_root@@Base>
   110a0:	cmp	r0, #0
   110a4:	beq	110d8 <main@@Base+0x280>
   110a8:	ldr	r3, [pc, #184]	; 11168 <main@@Base+0x310>
   110ac:	mov	r2, #38	; 0x26
   110b0:	mov	r1, #1
   110b4:	ldr	r3, [r3]
   110b8:	ldr	r0, [pc, #204]	; 1118c <main@@Base+0x334>
   110bc:	bl	10d34 <fwrite@plt>
   110c0:	mvn	r4, #0
   110c4:	ldr	r0, [sp, #4]
   110c8:	bl	10d04 <free@plt>
   110cc:	mov	r0, r4
   110d0:	add	sp, sp, #36	; 0x24
   110d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   110d8:	mov	r1, r7
   110dc:	ldr	r3, [pc, #160]	; 11184 <main@@Base+0x32c>
   110e0:	ldr	r2, [pc, #160]	; 11188 <main@@Base+0x330>
   110e4:	ldr	r0, [sp, #4]
   110e8:	bl	13048 <flatcc_verify_table_as_root@@Base>
   110ec:	cmp	r0, #0
   110f0:	beq	11114 <main@@Base+0x2bc>
   110f4:	ldr	r3, [pc, #108]	; 11168 <main@@Base+0x310>
   110f8:	mov	r2, #62	; 0x3e
   110fc:	mov	r1, #1
   11100:	ldr	r3, [r3]
   11104:	ldr	r0, [pc, #132]	; 11190 <main@@Base+0x338>
   11108:	bl	10d34 <fwrite@plt>
   1110c:	mvn	r4, #0
   11110:	b	110c4 <main@@Base+0x26c>
   11114:	ldr	r0, [sp, #4]
   11118:	bl	11bc0 <verify_monster@@Base>
   1111c:	mov	r4, r0
   11120:	b	110c4 <main@@Base+0x26c>
   11124:	mov	r0, r8
   11128:	bl	10dac <fclose@plt>
   1112c:	mov	r6, #0
   11130:	b	10f14 <main@@Base+0xbc>
   11134:	mov	r7, r8
   11138:	mov	r6, r8
   1113c:	b	10f14 <main@@Base+0xbc>
   11140:	ldr	r3, [pc, #32]	; 11168 <main@@Base+0x310>
   11144:	mov	r2, #63	; 0x3f
   11148:	mov	r1, #1
   1114c:	ldr	r3, [r3]
   11150:	ldr	r0, [pc, #60]	; 11194 <main@@Base+0x33c>
   11154:	bl	10d34 <fwrite@plt>
   11158:	mov	r0, #1
   1115c:	bl	10d7c <exit@plt>
   11160:	andeq	r5, r2, r0, ror r0
   11164:	andeq	r4, r1, ip, lsl #7
   11168:	andeq	r5, r2, r8, ror r0
   1116c:	muleq	r1, r0, r3
   11170:	andeq	r4, r1, r8, lsr #7
   11174:	andeq	r4, r1, r8, asr #7
   11178:			; <UNDEFINED> instruction: 0x000143b0
   1117c:	andeq	r4, r1, r0, asr #7
   11180:	ldrdeq	r4, [r1], -r0
   11184:	andeq	r1, r1, r0, lsr #10
   11188:			; <UNDEFINED> instruction: 0x000143b8
   1118c:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   11190:	strdeq	r4, [r1], -ip
   11194:	andeq	r4, r1, ip, asr #6

00011198 <_start@@Base>:
   11198:	mov	fp, #0
   1119c:	mov	lr, #0
   111a0:	pop	{r1}		; (ldr r1, [sp], #4)
   111a4:	mov	r2, sp
   111a8:	push	{r2}		; (str r2, [sp, #-4]!)
   111ac:	push	{r0}		; (str r0, [sp, #-4]!)
   111b0:	ldr	ip, [pc, #16]	; 111c8 <_start@@Base+0x30>
   111b4:	push	{ip}		; (str ip, [sp, #-4]!)
   111b8:	ldr	r0, [pc, #12]	; 111cc <_start@@Base+0x34>
   111bc:	ldr	r3, [pc, #12]	; 111d0 <_start@@Base+0x38>
   111c0:	bl	10d64 <__libc_start_main@plt>
   111c4:	bl	10dd0 <abort@plt>
   111c8:	andeq	r3, r1, r8, asr #24
   111cc:	andeq	r0, r1, r8, asr lr
   111d0:	andeq	r3, r1, r8, ror #23
   111d4:	ldr	r3, [pc, #20]	; 111f0 <_start@@Base+0x58>
   111d8:	ldr	r2, [pc, #20]	; 111f4 <_start@@Base+0x5c>
   111dc:	add	r3, pc, r3
   111e0:	ldr	r2, [r3, r2]
   111e4:	cmp	r2, #0
   111e8:	bxeq	lr
   111ec:	b	10d70 <__gmon_start__@plt>
   111f0:	andeq	r3, r1, ip, lsl lr
   111f4:	andeq	r0, r0, r4, rrx
   111f8:	ldr	r3, [pc, #28]	; 1121c <_start@@Base+0x84>
   111fc:	ldr	r0, [pc, #28]	; 11220 <_start@@Base+0x88>
   11200:	sub	r3, r3, r0
   11204:	cmp	r3, #6
   11208:	bxls	lr
   1120c:	ldr	r3, [pc, #16]	; 11224 <_start@@Base+0x8c>
   11210:	cmp	r3, #0
   11214:	bxeq	lr
   11218:	bx	r3
   1121c:	andeq	r5, r2, r7, ror r0
   11220:	andeq	r5, r2, r4, ror r0
   11224:	andeq	r0, r0, r0
   11228:	ldr	r1, [pc, #36]	; 11254 <_start@@Base+0xbc>
   1122c:	ldr	r0, [pc, #36]	; 11258 <_start@@Base+0xc0>
   11230:	sub	r1, r1, r0
   11234:	asr	r1, r1, #2
   11238:	add	r1, r1, r1, lsr #31
   1123c:	asrs	r1, r1, #1
   11240:	bxeq	lr
   11244:	ldr	r3, [pc, #16]	; 1125c <_start@@Base+0xc4>
   11248:	cmp	r3, #0
   1124c:	bxeq	lr
   11250:	bx	r3
   11254:	andeq	r5, r2, r4, ror r0
   11258:	andeq	r5, r2, r4, ror r0
   1125c:	andeq	r0, r0, r0
   11260:	push	{r4, lr}
   11264:	ldr	r4, [pc, #24]	; 11284 <_start@@Base+0xec>
   11268:	ldrb	r3, [r4]
   1126c:	cmp	r3, #0
   11270:	popne	{r4, pc}
   11274:	bl	111f8 <_start@@Base+0x60>
   11278:	mov	r3, #1
   1127c:	strb	r3, [r4]
   11280:	pop	{r4, pc}
   11284:	andeq	r5, r2, ip, ror r0
   11288:	ldr	r0, [pc, #40]	; 112b8 <_start@@Base+0x120>
   1128c:	ldr	r3, [r0]
   11290:	cmp	r3, #0
   11294:	bne	1129c <_start@@Base+0x104>
   11298:	b	11228 <_start@@Base+0x90>
   1129c:	ldr	r3, [pc, #24]	; 112bc <_start@@Base+0x124>
   112a0:	cmp	r3, #0
   112a4:	beq	11298 <_start@@Base+0x100>
   112a8:	push	{r4, lr}
   112ac:	blx	r3
   112b0:	pop	{r4, lr}
   112b4:	b	11228 <_start@@Base+0x90>
   112b8:	andeq	r4, r2, r4, lsl pc
   112bc:	andeq	r0, r0, r0
   112c0:	mov	r0, #0
   112c4:	bx	lr
   112c8:	mov	r3, #4
   112cc:	mov	r2, r3
   112d0:	mov	r1, #0
   112d4:	b	12344 <flatcc_verify_field@@Base>
   112d8:	mov	r3, #8
   112dc:	push	{r4, lr}
   112e0:	mov	r2, r3
   112e4:	mov	r1, #0
   112e8:	mov	r4, r0
   112ec:	bl	12344 <flatcc_verify_field@@Base>
   112f0:	cmp	r0, #0
   112f4:	popne	{r4, pc}
   112f8:	mov	r3, #4
   112fc:	mov	r0, r4
   11300:	mov	r2, r3
   11304:	mov	r1, #1
   11308:	pop	{r4, lr}
   1130c:	b	12344 <flatcc_verify_field@@Base>
   11310:	mov	r3, #1
   11314:	push	{r4, lr}
   11318:	mov	r2, r3
   1131c:	mov	r1, #0
   11320:	mov	r4, r0
   11324:	bl	12344 <flatcc_verify_field@@Base>
   11328:	cmp	r0, #0
   1132c:	popne	{r4, pc}
   11330:	mov	r3, #1
   11334:	mov	r2, r3
   11338:	mov	r1, r3
   1133c:	mov	r0, r4
   11340:	bl	12344 <flatcc_verify_field@@Base>
   11344:	cmp	r0, #0
   11348:	popne	{r4, pc}
   1134c:	mov	r3, #1
   11350:	mov	r2, r3
   11354:	mov	r1, #2
   11358:	mov	r0, r4
   1135c:	bl	12344 <flatcc_verify_field@@Base>
   11360:	cmp	r0, #0
   11364:	popne	{r4, pc}
   11368:	mov	r3, #1
   1136c:	mov	r0, r4
   11370:	mov	r2, r3
   11374:	mov	r1, #3
   11378:	pop	{r4, lr}
   1137c:	b	12344 <flatcc_verify_field@@Base>
   11380:	mov	r2, #0
   11384:	push	{r4, lr}
   11388:	mov	r1, r2
   1138c:	mov	r4, r0
   11390:	bl	123b4 <flatcc_verify_string_field@@Base>
   11394:	cmp	r0, #0
   11398:	popne	{r4, pc}
   1139c:	mov	r3, #8
   113a0:	mov	r2, r3
   113a4:	mov	r1, #1
   113a8:	mov	r0, r4
   113ac:	bl	12344 <flatcc_verify_field@@Base>
   113b0:	cmp	r0, #0
   113b4:	popne	{r4, pc}
   113b8:	mov	r3, #2
   113bc:	mov	r0, r4
   113c0:	mov	r2, r3
   113c4:	mov	r1, r3
   113c8:	pop	{r4, lr}
   113cc:	b	12344 <flatcc_verify_field@@Base>
   113d0:	mov	r2, #0
   113d4:	push	{r4, lr}
   113d8:	mov	r1, r2
   113dc:	mov	r4, r0
   113e0:	bl	123b4 <flatcc_verify_string_field@@Base>
   113e4:	cmp	r0, #0
   113e8:	popne	{r4, pc}
   113ec:	mov	r3, #4
   113f0:	mov	r2, r3
   113f4:	mov	r1, #1
   113f8:	mov	r0, r4
   113fc:	bl	12344 <flatcc_verify_field@@Base>
   11400:	cmp	r0, #0
   11404:	popne	{r4, pc}
   11408:	mov	r2, r0
   1140c:	mov	r1, #2
   11410:	mov	r0, r4
   11414:	bl	123b4 <flatcc_verify_string_field@@Base>
   11418:	cmp	r0, #0
   1141c:	popne	{r4, pc}
   11420:	mov	r3, #8
   11424:	mov	r2, r3
   11428:	mov	r1, #3
   1142c:	mov	r0, r4
   11430:	bl	12344 <flatcc_verify_field@@Base>
   11434:	cmp	r0, #0
   11438:	popne	{r4, pc}
   1143c:	mov	r2, r0
   11440:	mov	r1, #4
   11444:	mov	r0, r4
   11448:	bl	123b4 <flatcc_verify_string_field@@Base>
   1144c:	cmp	r0, #0
   11450:	popne	{r4, pc}
   11454:	mov	r3, #8
   11458:	mov	r2, r3
   1145c:	mov	r1, #5
   11460:	mov	r0, r4
   11464:	bl	12344 <flatcc_verify_field@@Base>
   11468:	cmp	r0, #0
   1146c:	popne	{r4, pc}
   11470:	mov	r3, #4
   11474:	mov	r2, r3
   11478:	mov	r1, #6
   1147c:	mov	r0, r4
   11480:	bl	12344 <flatcc_verify_field@@Base>
   11484:	cmp	r0, #0
   11488:	popne	{r4, pc}
   1148c:	mov	r3, #8
   11490:	mov	r2, r3
   11494:	mov	r1, #7
   11498:	mov	r0, r4
   1149c:	bl	12344 <flatcc_verify_field@@Base>
   114a0:	cmp	r0, #0
   114a4:	popne	{r4, pc}
   114a8:	mov	r3, #4
   114ac:	mov	r0, r4
   114b0:	mov	r2, r3
   114b4:	mov	r1, #8
   114b8:	pop	{r4, lr}
   114bc:	b	12344 <flatcc_verify_field@@Base>
   114c0:	mov	r2, #0
   114c4:	push	{r4, lr}
   114c8:	mov	r1, r2
   114cc:	ldr	r3, [pc, #64]	; 11514 <_start@@Base+0x37c>
   114d0:	mov	r4, r0
   114d4:	bl	1273c <flatcc_verify_table_field@@Base>
   114d8:	cmp	r0, #0
   114dc:	popne	{r4, pc}
   114e0:	mov	r2, r0
   114e4:	ldr	r3, [pc, #44]	; 11518 <_start@@Base+0x380>
   114e8:	mov	r1, #1
   114ec:	mov	r0, r4
   114f0:	bl	1273c <flatcc_verify_table_field@@Base>
   114f4:	cmp	r0, #0
   114f8:	popne	{r4, pc}
   114fc:	mov	r2, r0
   11500:	ldr	r3, [pc, #20]	; 1151c <_start@@Base+0x384>
   11504:	mov	r0, r4
   11508:	mov	r1, #2
   1150c:	pop	{r4, lr}
   11510:	b	1273c <flatcc_verify_table_field@@Base>
   11514:	ldrdeq	r1, [r1], -r0
   11518:	andeq	r1, r1, r8, lsl #23
   1151c:	ldrdeq	r1, [r1], -r8
   11520:	push	{r4, r5, r6, r7, r8, lr}
   11524:	mov	r3, #16
   11528:	sub	sp, sp, #8
   1152c:	mov	r2, #32
   11530:	mov	r1, #0
   11534:	mov	r4, r0
   11538:	bl	12344 <flatcc_verify_field@@Base>
   1153c:	cmp	r0, #0
   11540:	beq	1154c <_start@@Base+0x3b4>
   11544:	add	sp, sp, #8
   11548:	pop	{r4, r5, r6, r7, r8, pc}
   1154c:	mov	r3, #2
   11550:	mov	r2, r3
   11554:	mov	r1, r3
   11558:	mov	r0, r4
   1155c:	bl	12344 <flatcc_verify_field@@Base>
   11560:	cmp	r0, #0
   11564:	bne	11544 <_start@@Base+0x3ac>
   11568:	mov	r3, #2
   1156c:	mov	r2, r3
   11570:	mov	r1, #1
   11574:	mov	r0, r4
   11578:	bl	12344 <flatcc_verify_field@@Base>
   1157c:	cmp	r0, #0
   11580:	bne	11544 <_start@@Base+0x3ac>
   11584:	mov	r2, #1
   11588:	mov	r1, #3
   1158c:	mov	r0, r4
   11590:	bl	123b4 <flatcc_verify_string_field@@Base>
   11594:	cmp	r0, #0
   11598:	bne	11544 <_start@@Base+0x3ac>
   1159c:	mov	r3, #1
   115a0:	mov	r2, r3
   115a4:	mov	r1, #6
   115a8:	mov	r0, r4
   115ac:	bl	12344 <flatcc_verify_field@@Base>
   115b0:	cmp	r0, #0
   115b4:	bne	11544 <_start@@Base+0x3ac>
   115b8:	mov	r5, #1
   115bc:	mvn	r6, #0
   115c0:	mov	r2, r0
   115c4:	stm	sp, {r5, r6}
   115c8:	mov	r3, r5
   115cc:	mov	r1, #5
   115d0:	mov	r0, r4
   115d4:	bl	12494 <flatcc_verify_vector_field@@Base>
   115d8:	cmp	r0, #0
   115dc:	bne	11544 <_start@@Base+0x3ac>
   115e0:	mov	r2, r0
   115e4:	ldr	r3, [pc, #840]	; 11934 <_start@@Base+0x79c>
   115e8:	mov	r1, #11
   115ec:	mov	r0, r4
   115f0:	bl	128a0 <flatcc_verify_table_vector_field@@Base>
   115f4:	cmp	r0, #0
   115f8:	bne	11544 <_start@@Base+0x3ac>
   115fc:	mov	r2, r0
   11600:	mov	r1, #10
   11604:	mov	r0, r4
   11608:	bl	12588 <flatcc_verify_string_vector_field@@Base>
   1160c:	cmp	r0, #0
   11610:	bne	11544 <_start@@Base+0x3ac>
   11614:	mov	r2, r0
   11618:	mov	r1, #28
   1161c:	mov	r0, r4
   11620:	bl	12588 <flatcc_verify_string_vector_field@@Base>
   11624:	cmp	r0, #0
   11628:	bne	11544 <_start@@Base+0x3ac>
   1162c:	mov	r2, r0
   11630:	stm	sp, {r5, r6}
   11634:	mov	r3, r5
   11638:	mov	r1, #24
   1163c:	mov	r0, r4
   11640:	bl	12494 <flatcc_verify_vector_field@@Base>
   11644:	cmp	r0, #0
   11648:	bne	11544 <_start@@Base+0x3ac>
   1164c:	mvn	r3, #-536870912	; 0xe0000000
   11650:	mov	r5, #4
   11654:	str	r3, [sp, #4]
   11658:	str	r5, [sp]
   1165c:	mov	r3, #8
   11660:	mov	r2, #0
   11664:	mov	r1, #29
   11668:	mov	r0, r4
   1166c:	bl	12494 <flatcc_verify_vector_field@@Base>
   11670:	cmp	r0, #0
   11674:	bne	11544 <_start@@Base+0x3ac>
   11678:	ldr	r7, [pc, #692]	; 11934 <_start@@Base+0x79c>
   1167c:	mov	r2, r0
   11680:	mov	r3, r7
   11684:	mov	r1, #12
   11688:	mov	r0, r4
   1168c:	bl	1273c <flatcc_verify_table_field@@Base>
   11690:	cmp	r0, #0
   11694:	bne	11544 <_start@@Base+0x3ac>
   11698:	mov	r2, r0
   1169c:	ldr	r3, [pc, #660]	; 11938 <_start@@Base+0x7a0>
   116a0:	mov	r1, #8
   116a4:	mov	r0, r4
   116a8:	bl	137d0 <flatcc_verify_union_field@@Base>
   116ac:	cmp	r0, #0
   116b0:	bne	11544 <_start@@Base+0x3ac>
   116b4:	mvn	r8, #-1073741824	; 0xc0000000
   116b8:	mov	r6, #2
   116bc:	mov	r2, r0
   116c0:	stm	sp, {r6, r8}
   116c4:	mov	r3, r5
   116c8:	mov	r1, #9
   116cc:	mov	r0, r4
   116d0:	bl	12494 <flatcc_verify_vector_field@@Base>
   116d4:	cmp	r0, #0
   116d8:	bne	11544 <_start@@Base+0x3ac>
   116dc:	mov	r2, r0
   116e0:	stm	sp, {r6, r8}
   116e4:	mov	r3, r5
   116e8:	mov	r1, #31
   116ec:	mov	r0, r4
   116f0:	bl	12494 <flatcc_verify_vector_field@@Base>
   116f4:	cmp	r0, #0
   116f8:	bne	11544 <_start@@Base+0x3ac>
   116fc:	mov	r6, #1
   11700:	mov	r3, r0
   11704:	mov	r2, r0
   11708:	stm	sp, {r6, r7}
   1170c:	mov	r1, #13
   11710:	mov	r0, r4
   11714:	bl	13540 <flatcc_verify_table_as_nested_root@@Base>
   11718:	cmp	r0, #0
   1171c:	bne	11544 <_start@@Base+0x3ac>
   11720:	mov	r2, r0
   11724:	ldr	r3, [pc, #528]	; 1193c <_start@@Base+0x7a4>
   11728:	mov	r1, #14
   1172c:	mov	r0, r4
   11730:	bl	1273c <flatcc_verify_table_field@@Base>
   11734:	cmp	r0, #0
   11738:	bne	11544 <_start@@Base+0x3ac>
   1173c:	mov	r3, r6
   11740:	mov	r2, r6
   11744:	mov	r1, #15
   11748:	mov	r0, r4
   1174c:	bl	12344 <flatcc_verify_field@@Base>
   11750:	cmp	r0, #0
   11754:	bne	11544 <_start@@Base+0x3ac>
   11758:	mov	r3, r5
   1175c:	mov	r2, r5
   11760:	mov	r1, #16
   11764:	mov	r0, r4
   11768:	bl	12344 <flatcc_verify_field@@Base>
   1176c:	cmp	r0, #0
   11770:	bne	11544 <_start@@Base+0x3ac>
   11774:	mov	r3, r5
   11778:	mov	r2, r5
   1177c:	mov	r1, #17
   11780:	mov	r0, r4
   11784:	bl	12344 <flatcc_verify_field@@Base>
   11788:	cmp	r0, #0
   1178c:	bne	11544 <_start@@Base+0x3ac>
   11790:	mov	r3, #8
   11794:	mov	r2, r3
   11798:	mov	r1, #18
   1179c:	mov	r0, r4
   117a0:	bl	12344 <flatcc_verify_field@@Base>
   117a4:	cmp	r0, #0
   117a8:	bne	11544 <_start@@Base+0x3ac>
   117ac:	mov	r3, #8
   117b0:	mov	r2, r3
   117b4:	mov	r1, #19
   117b8:	mov	r0, r4
   117bc:	bl	12344 <flatcc_verify_field@@Base>
   117c0:	cmp	r0, #0
   117c4:	bne	11544 <_start@@Base+0x3ac>
   117c8:	mov	r3, r5
   117cc:	mov	r2, r5
   117d0:	mov	r1, #20
   117d4:	mov	r0, r4
   117d8:	bl	12344 <flatcc_verify_field@@Base>
   117dc:	cmp	r0, #0
   117e0:	bne	11544 <_start@@Base+0x3ac>
   117e4:	mov	r3, r5
   117e8:	mov	r2, r5
   117ec:	mov	r1, #21
   117f0:	mov	r0, r4
   117f4:	bl	12344 <flatcc_verify_field@@Base>
   117f8:	cmp	r0, #0
   117fc:	bne	11544 <_start@@Base+0x3ac>
   11800:	mov	r3, #8
   11804:	mov	r2, r3
   11808:	mov	r1, #22
   1180c:	mov	r0, r4
   11810:	bl	12344 <flatcc_verify_field@@Base>
   11814:	cmp	r0, #0
   11818:	bne	11544 <_start@@Base+0x3ac>
   1181c:	mov	r3, #8
   11820:	mov	r2, r3
   11824:	mov	r1, #23
   11828:	mov	r0, r4
   1182c:	bl	12344 <flatcc_verify_field@@Base>
   11830:	cmp	r0, #0
   11834:	bne	11544 <_start@@Base+0x3ac>
   11838:	mov	r3, r5
   1183c:	mov	r2, r5
   11840:	mov	r1, #25
   11844:	mov	r0, r4
   11848:	bl	12344 <flatcc_verify_field@@Base>
   1184c:	cmp	r0, #0
   11850:	bne	11544 <_start@@Base+0x3ac>
   11854:	mov	r3, r5
   11858:	mov	r2, r5
   1185c:	mov	r1, #26
   11860:	mov	r0, r4
   11864:	bl	12344 <flatcc_verify_field@@Base>
   11868:	cmp	r0, #0
   1186c:	bne	11544 <_start@@Base+0x3ac>
   11870:	mov	r3, r5
   11874:	mov	r2, r5
   11878:	mov	r1, #27
   1187c:	mov	r0, r4
   11880:	bl	12344 <flatcc_verify_field@@Base>
   11884:	cmp	r0, #0
   11888:	bne	11544 <_start@@Base+0x3ac>
   1188c:	mvn	r1, #0
   11890:	mov	r2, r0
   11894:	str	r1, [sp, #4]
   11898:	mov	r3, r6
   1189c:	str	r6, [sp]
   118a0:	mov	r1, #30
   118a4:	mov	r0, r4
   118a8:	bl	12494 <flatcc_verify_vector_field@@Base>
   118ac:	cmp	r0, #0
   118b0:	bne	11544 <_start@@Base+0x3ac>
   118b4:	mov	r5, #8
   118b8:	mvn	r6, #-536870912	; 0xe0000000
   118bc:	mov	r3, r5
   118c0:	stm	sp, {r5, r6}
   118c4:	mov	r2, #0
   118c8:	mov	r1, #32
   118cc:	mov	r0, r4
   118d0:	bl	12494 <flatcc_verify_vector_field@@Base>
   118d4:	cmp	r0, #0
   118d8:	bne	11544 <_start@@Base+0x3ac>
   118dc:	mov	r2, r0
   118e0:	stm	sp, {r5, r6}
   118e4:	mov	r3, r5
   118e8:	mov	r1, #33	; 0x21
   118ec:	mov	r0, r4
   118f0:	bl	12494 <flatcc_verify_vector_field@@Base>
   118f4:	cmp	r0, #0
   118f8:	bne	11544 <_start@@Base+0x3ac>
   118fc:	mov	r2, r0
   11900:	ldr	r3, [pc, #56]	; 11940 <_start@@Base+0x7a8>
   11904:	mov	r1, #34	; 0x22
   11908:	mov	r0, r4
   1190c:	bl	1273c <flatcc_verify_table_field@@Base>
   11910:	cmp	r0, #0
   11914:	bne	11544 <_start@@Base+0x3ac>
   11918:	mov	r2, r0
   1191c:	ldr	r3, [pc, #32]	; 11944 <_start@@Base+0x7ac>
   11920:	mov	r0, r4
   11924:	mov	r1, #35	; 0x23
   11928:	add	sp, sp, #8
   1192c:	pop	{r4, r5, r6, r7, r8, lr}
   11930:	b	1273c <flatcc_verify_table_field@@Base>
   11934:	andeq	r1, r1, r0, lsr #10
   11938:	ldrdeq	r1, [r1], -r0
   1193c:	andeq	r1, r1, r0, lsl #7
   11940:	andeq	r1, r1, r0, lsl #23
   11944:	andeq	r1, r1, r8, asr #18
   11948:	push	{r4, r5, r6, lr}
   1194c:	mov	r4, #1
   11950:	sub	sp, sp, #8
   11954:	mvn	r5, #0
   11958:	mov	r2, #0
   1195c:	mov	r1, r2
   11960:	stm	sp, {r4, r5}
   11964:	mov	r3, r4
   11968:	mov	r6, r0
   1196c:	bl	12494 <flatcc_verify_vector_field@@Base>
   11970:	subs	r2, r0, #0
   11974:	beq	11984 <_start@@Base+0x7ec>
   11978:	mov	r0, r2
   1197c:	add	sp, sp, #8
   11980:	pop	{r4, r5, r6, pc}
   11984:	stm	sp, {r4, r5}
   11988:	mov	r3, r4
   1198c:	mov	r1, r4
   11990:	mov	r0, r6
   11994:	bl	12494 <flatcc_verify_vector_field@@Base>
   11998:	subs	r2, r0, #0
   1199c:	bne	11978 <_start@@Base+0x7e0>
   119a0:	ldr	r3, [pc, #36]	; 119cc <_start@@Base+0x834>
   119a4:	str	r4, [sp]
   119a8:	str	r3, [sp, #4]
   119ac:	mov	r0, r6
   119b0:	mov	r3, r2
   119b4:	mov	r1, #2
   119b8:	bl	13540 <flatcc_verify_table_as_nested_root@@Base>
   119bc:	mov	r2, r0
   119c0:	mov	r0, r2
   119c4:	add	sp, sp, #8
   119c8:	pop	{r4, r5, r6, pc}
   119cc:	andeq	r1, r1, r0, lsr #10
   119d0:	ldrb	r3, [r0, #12]
   119d4:	sub	r3, r3, #1
   119d8:	cmp	r3, #3
   119dc:	ldrls	pc, [pc, r3, lsl #2]
   119e0:	b	11a14 <_start@@Base+0x87c>
   119e4:	andeq	r1, r1, ip, lsl #20
   119e8:	andeq	r1, r1, r4, lsl #20
   119ec:	strdeq	r1, [r1], -ip
   119f0:	strdeq	r1, [r1], -r4
   119f4:	ldr	r1, [pc, #32]	; 11a1c <_start@@Base+0x884>
   119f8:	b	12b90 <flatcc_verify_union_table@@Base>
   119fc:	ldr	r1, [pc, #28]	; 11a20 <_start@@Base+0x888>
   11a00:	b	12b90 <flatcc_verify_union_table@@Base>
   11a04:	ldr	r1, [pc, #24]	; 11a24 <_start@@Base+0x88c>
   11a08:	b	12b90 <flatcc_verify_union_table@@Base>
   11a0c:	ldr	r1, [pc, #20]	; 11a28 <_start@@Base+0x890>
   11a10:	b	12b90 <flatcc_verify_union_table@@Base>
   11a14:	mov	r0, #0
   11a18:	bx	lr
   11a1c:	andeq	r1, r1, ip, lsr #20
   11a20:	andeq	r1, r1, r0, asr #5
   11a24:	andeq	r1, r1, r0, lsl r3
   11a28:	andeq	r1, r1, r0, lsr #10
   11a2c:	mov	r2, #0
   11a30:	push	{r4, lr}
   11a34:	mov	r1, r2
   11a38:	ldr	r3, [pc, #64]	; 11a80 <_start@@Base+0x8e8>
   11a3c:	mov	r4, r0
   11a40:	bl	1273c <flatcc_verify_table_field@@Base>
   11a44:	cmp	r0, #0
   11a48:	popne	{r4, pc}
   11a4c:	mov	r2, r0
   11a50:	ldr	r3, [pc, #44]	; 11a84 <_start@@Base+0x8ec>
   11a54:	mov	r1, #1
   11a58:	mov	r0, r4
   11a5c:	bl	1273c <flatcc_verify_table_field@@Base>
   11a60:	cmp	r0, #0
   11a64:	popne	{r4, pc}
   11a68:	mov	r2, r0
   11a6c:	ldr	r3, [pc, #20]	; 11a88 <_start@@Base+0x8f0>
   11a70:	mov	r0, r4
   11a74:	mov	r1, #3
   11a78:	pop	{r4, lr}
   11a7c:	b	1393c <flatcc_verify_union_vector_field@@Base>
   11a80:	andeq	r1, r1, r0, asr #9
   11a84:	andeq	r1, r1, ip, lsl #21
   11a88:	ldrdeq	r1, [r1], -r0
   11a8c:	push	{r4, lr}
   11a90:	mov	r2, #0
   11a94:	ldr	r3, [pc, #124]	; 11b18 <_start@@Base+0x980>
   11a98:	mov	r1, #1
   11a9c:	mov	r4, r0
   11aa0:	bl	137d0 <flatcc_verify_union_field@@Base>
   11aa4:	cmp	r0, #0
   11aa8:	popne	{r4, pc}
   11aac:	mov	r2, r0
   11ab0:	ldr	r3, [pc, #96]	; 11b18 <_start@@Base+0x980>
   11ab4:	mov	r1, #3
   11ab8:	mov	r0, r4
   11abc:	bl	137d0 <flatcc_verify_union_field@@Base>
   11ac0:	cmp	r0, #0
   11ac4:	popne	{r4, pc}
   11ac8:	mov	r2, r0
   11acc:	ldr	r3, [pc, #68]	; 11b18 <_start@@Base+0x980>
   11ad0:	mov	r1, #5
   11ad4:	mov	r0, r4
   11ad8:	bl	137d0 <flatcc_verify_union_field@@Base>
   11adc:	cmp	r0, #0
   11ae0:	popne	{r4, pc}
   11ae4:	mov	r2, r0
   11ae8:	ldr	r3, [pc, #40]	; 11b18 <_start@@Base+0x980>
   11aec:	mov	r1, #7
   11af0:	mov	r0, r4
   11af4:	bl	137d0 <flatcc_verify_union_field@@Base>
   11af8:	cmp	r0, #0
   11afc:	popne	{r4, pc}
   11b00:	mov	r2, r0
   11b04:	ldr	r3, [pc, #12]	; 11b18 <_start@@Base+0x980>
   11b08:	mov	r0, r4
   11b0c:	mov	r1, #9
   11b10:	pop	{r4, lr}
   11b14:	b	1393c <flatcc_verify_union_vector_field@@Base>
   11b18:	andeq	r1, r1, ip, lsl fp
   11b1c:	ldrb	r3, [r0, #12]
   11b20:	cmp	r3, #9
   11b24:	beq	11b60 <_start@@Base+0x9c8>
   11b28:	bls	11b44 <_start@@Base+0x9ac>
   11b2c:	cmp	r3, #11
   11b30:	beq	11b40 <_start@@Base+0x9a8>
   11b34:	bcc	11b60 <_start@@Base+0x9c8>
   11b38:	cmp	r3, #255	; 0xff
   11b3c:	bne	11b6c <_start@@Base+0x9d4>
   11b40:	b	12ce4 <flatcc_verify_union_string@@Base>
   11b44:	cmp	r3, #2
   11b48:	beq	11b74 <_start@@Base+0x9dc>
   11b4c:	cmp	r3, #8
   11b50:	bne	11b6c <_start@@Base+0x9d4>
   11b54:	mov	r2, #2
   11b58:	mov	r1, r2
   11b5c:	b	12c88 <flatcc_verify_union_struct@@Base>
   11b60:	mov	r2, #4
   11b64:	mov	r1, r2
   11b68:	b	12c88 <flatcc_verify_union_struct@@Base>
   11b6c:	mov	r0, #0
   11b70:	bx	lr
   11b74:	ldr	r1, [pc]	; 11b7c <_start@@Base+0x9e4>
   11b78:	b	12b90 <flatcc_verify_union_table@@Base>
   11b7c:	andeq	r1, r1, r8, asr #5
   11b80:	mov	r0, #0
   11b84:	bx	lr
   11b88:	mov	r3, #8
   11b8c:	push	{r4, lr}
   11b90:	mov	r2, r3
   11b94:	mov	r1, #0
   11b98:	mov	r4, r0
   11b9c:	bl	12344 <flatcc_verify_field@@Base>
   11ba0:	cmp	r0, #0
   11ba4:	popne	{r4, pc}
   11ba8:	mov	r3, #4
   11bac:	mov	r0, r4
   11bb0:	mov	r2, r3
   11bb4:	mov	r1, #1
   11bb8:	pop	{r4, lr}
   11bbc:	b	12344 <flatcc_verify_field@@Base>

00011bc0 <verify_monster@@Base>:
   11bc0:	cmp	r0, #0
   11bc4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11bc8:	beq	11bdc <verify_monster@@Base+0x1c>
   11bcc:	ldr	r3, [pc, #1112]	; 1202c <verify_monster@@Base+0x46c>
   11bd0:	ldr	r2, [r0, #4]
   11bd4:	cmp	r2, r3
   11bd8:	beq	11bec <verify_monster@@Base+0x2c>
   11bdc:	ldr	r0, [pc, #1100]	; 12030 <verify_monster@@Base+0x470>
   11be0:	bl	10d4c <puts@plt>
   11be4:	mvn	r0, #0
   11be8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11bec:	ldr	r3, [r0]
   11bf0:	adds	r4, r0, r3
   11bf4:	beq	11bdc <verify_monster@@Base+0x1c>
   11bf8:	ldr	r5, [r0, r3]
   11bfc:	sub	r5, r4, r5
   11c00:	ldrh	r6, [r5]
   11c04:	cmp	r6, #9
   11c08:	bhi	11c1c <verify_monster@@Base+0x5c>
   11c0c:	ldr	r0, [pc, #1056]	; 12034 <verify_monster@@Base+0x474>
   11c10:	bl	10d4c <puts@plt>
   11c14:	mvn	r0, #0
   11c18:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11c1c:	ldrh	r3, [r5, #8]
   11c20:	cmp	r3, #0
   11c24:	beq	11c0c <verify_monster@@Base+0x4c>
   11c28:	ldrsh	r3, [r4, r3]
   11c2c:	cmp	r3, #80	; 0x50
   11c30:	bne	11c0c <verify_monster@@Base+0x4c>
   11c34:	ldrh	r3, [r5, #4]
   11c38:	cmp	r3, #0
   11c3c:	beq	122a0 <verify_monster@@Base+0x6e0>
   11c40:	adds	r3, r4, r3
   11c44:	beq	122a0 <verify_monster@@Base+0x6e0>
   11c48:	sub	r0, r3, r0
   11c4c:	tst	r0, #15
   11c50:	bne	121f0 <verify_monster@@Base+0x630>
   11c54:	vldr	s15, [pc, #964]	; 12020 <verify_monster@@Base+0x460>
   11c58:	vldr	s14, [r3]
   11c5c:	vcmp.f32	s14, s15
   11c60:	vmrs	APSR_nzcv, fpscr
   11c64:	bne	12200 <verify_monster@@Base+0x640>
   11c68:	vldr	s15, [pc, #948]	; 12024 <verify_monster@@Base+0x464>
   11c6c:	vldr	s14, [r3, #4]
   11c70:	vcmp.f32	s14, s15
   11c74:	vmrs	APSR_nzcv, fpscr
   11c78:	bne	12210 <verify_monster@@Base+0x650>
   11c7c:	vldr	s15, [pc, #932]	; 12028 <verify_monster@@Base+0x468>
   11c80:	vldr	s14, [r3, #8]
   11c84:	vcmp.f32	s14, s15
   11c88:	vmrs	APSR_nzcv, fpscr
   11c8c:	bne	12220 <verify_monster@@Base+0x660>
   11c90:	vldr	d7, [pc, #888]	; 12010 <verify_monster@@Base+0x450>
   11c94:	vldr	d6, [r3, #16]
   11c98:	vcmp.f64	d6, d7
   11c9c:	vmrs	APSR_nzcv, fpscr
   11ca0:	bne	12230 <verify_monster@@Base+0x670>
   11ca4:	ldrsb	r2, [r3, #24]
   11ca8:	cmp	r2, #2
   11cac:	bne	12190 <verify_monster@@Base+0x5d0>
   11cb0:	ldrsh	r2, [r3, #26]
   11cb4:	cmp	r2, #5
   11cb8:	bne	11f14 <verify_monster@@Base+0x354>
   11cbc:	ldrsb	r3, [r3, #28]
   11cc0:	cmp	r3, #6
   11cc4:	bne	11f14 <verify_monster@@Base+0x354>
   11cc8:	cmp	r6, #11
   11ccc:	bhi	11ce4 <verify_monster@@Base+0x124>
   11cd0:	ldr	r3, [pc, #864]	; 12038 <verify_monster@@Base+0x478>
   11cd4:	ldr	r2, [pc, #864]	; 1203c <verify_monster@@Base+0x47c>
   11cd8:	ldr	r1, [pc, #864]	; 12040 <verify_monster@@Base+0x480>
   11cdc:	ldr	r0, [pc, #864]	; 12044 <verify_monster@@Base+0x484>
   11ce0:	bl	10ddc <__assert_fail@plt>
   11ce4:	ldrh	r0, [r5, #10]
   11ce8:	cmp	r0, #0
   11cec:	beq	11cd0 <verify_monster@@Base+0x110>
   11cf0:	ldr	r3, [r4, r0]
   11cf4:	add	r0, r4, r0
   11cf8:	add	r3, r3, #4
   11cfc:	adds	r0, r0, r3
   11d00:	beq	121b0 <verify_monster@@Base+0x5f0>
   11d04:	ldr	r3, [r0, #-4]
   11d08:	cmp	r3, #9
   11d0c:	bne	121b0 <verify_monster@@Base+0x5f0>
   11d10:	ldr	r1, [pc, #816]	; 12048 <verify_monster@@Base+0x488>
   11d14:	bl	10ce0 <strcmp@plt>
   11d18:	subs	r1, r0, #0
   11d1c:	bne	12170 <verify_monster@@Base+0x5b0>
   11d20:	cmp	r6, #15
   11d24:	bhi	11d38 <verify_monster@@Base+0x178>
   11d28:	ldr	r0, [pc, #796]	; 1204c <verify_monster@@Base+0x48c>
   11d2c:	bl	10d4c <puts@plt>
   11d30:	mvn	r0, #0
   11d34:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11d38:	ldrh	r3, [r5, #14]
   11d3c:	cmp	r3, #0
   11d40:	beq	11d28 <verify_monster@@Base+0x168>
   11d44:	ldr	r2, [r4, r3]
   11d48:	add	r3, r4, r3
   11d4c:	add	r2, r2, #4
   11d50:	adds	ip, r3, r2
   11d54:	beq	11d28 <verify_monster@@Base+0x168>
   11d58:	ldr	lr, [ip, #-4]
   11d5c:	cmp	lr, #5
   11d60:	bne	11d28 <verify_monster@@Base+0x168>
   11d64:	ldrb	r3, [r3, r2]
   11d68:	cmp	r3, #0
   11d6c:	bne	12160 <verify_monster@@Base+0x5a0>
   11d70:	ldrb	r3, [ip, #1]
   11d74:	cmp	r3, #1
   11d78:	bne	121c0 <verify_monster@@Base+0x600>
   11d7c:	ldrb	r3, [ip, #2]
   11d80:	cmp	r3, #2
   11d84:	bne	121c8 <verify_monster@@Base+0x608>
   11d88:	ldrb	r3, [ip, #3]
   11d8c:	cmp	r3, #3
   11d90:	bne	1215c <verify_monster@@Base+0x59c>
   11d94:	ldrb	r3, [ip, #4]
   11d98:	cmp	r3, #4
   11d9c:	movne	r1, #4
   11da0:	bne	12160 <verify_monster@@Base+0x5a0>
   11da4:	cmp	r6, #25
   11da8:	bhi	11dbc <verify_monster@@Base+0x1fc>
   11dac:	ldr	r0, [pc, #668]	; 12050 <verify_monster@@Base+0x490>
   11db0:	bl	10d4c <puts@plt>
   11db4:	mvn	r0, #0
   11db8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11dbc:	ldrh	r3, [r5, #24]
   11dc0:	cmp	r3, #0
   11dc4:	beq	11dac <verify_monster@@Base+0x1ec>
   11dc8:	ldr	r2, [r4, r3]
   11dcc:	add	r3, r4, r3
   11dd0:	add	r2, r2, #4
   11dd4:	adds	r7, r3, r2
   11dd8:	beq	11dac <verify_monster@@Base+0x1ec>
   11ddc:	ldr	r1, [r7, #-4]
   11de0:	cmp	r1, #2
   11de4:	bne	121d0 <verify_monster@@Base+0x610>
   11de8:	ldr	r0, [r3, r2]
   11dec:	ldr	r1, [pc, #608]	; 12054 <verify_monster@@Base+0x494>
   11df0:	add	r0, r0, #4
   11df4:	add	r0, r7, r0
   11df8:	bl	10ce0 <strcmp@plt>
   11dfc:	cmp	r0, #0
   11e00:	bne	12290 <verify_monster@@Base+0x6d0>
   11e04:	ldr	r0, [r7, #4]
   11e08:	ldr	r1, [pc, #584]	; 12058 <verify_monster@@Base+0x498>
   11e0c:	add	r0, r0, #8
   11e10:	add	r0, r7, r0
   11e14:	bl	10ce0 <strcmp@plt>
   11e18:	cmp	r0, #0
   11e1c:	bne	121e0 <verify_monster@@Base+0x620>
   11e20:	ldrh	r3, [r5, #18]
   11e24:	cmp	r3, #0
   11e28:	beq	12180 <verify_monster@@Base+0x5c0>
   11e2c:	ldrb	r3, [r4, r3]
   11e30:	cmp	r3, #1
   11e34:	bne	12180 <verify_monster@@Base+0x5c0>
   11e38:	ldrh	r3, [r5, #20]
   11e3c:	cmp	r3, #0
   11e40:	beq	122b0 <verify_monster@@Base+0x6f0>
   11e44:	ldr	r2, [r4, r3]
   11e48:	add	r3, r4, r3
   11e4c:	adds	r0, r3, r2
   11e50:	beq	122b0 <verify_monster@@Base+0x6f0>
   11e54:	ldr	r3, [r3, r2]
   11e58:	sub	r3, r0, r3
   11e5c:	ldrh	r2, [r3]
   11e60:	cmp	r2, #11
   11e64:	bls	11cd0 <verify_monster@@Base+0x110>
   11e68:	ldrh	r2, [r3, #10]
   11e6c:	cmp	r2, #0
   11e70:	beq	11cd0 <verify_monster@@Base+0x110>
   11e74:	ldr	r3, [r0, r2]
   11e78:	add	r0, r0, r2
   11e7c:	add	r3, r3, #4
   11e80:	add	r0, r0, r3
   11e84:	ldr	r1, [pc, #464]	; 1205c <verify_monster@@Base+0x49c>
   11e88:	bl	10ce0 <strcmp@plt>
   11e8c:	cmp	r0, #0
   11e90:	bne	12250 <verify_monster@@Base+0x690>
   11e94:	ldrh	r3, [r5, #22]
   11e98:	cmp	r3, #0
   11e9c:	beq	12240 <verify_monster@@Base+0x680>
   11ea0:	ldr	r2, [r4, r3]
   11ea4:	add	r3, r4, r3
   11ea8:	add	r2, r2, #4
   11eac:	adds	r1, r3, r2
   11eb0:	beq	12240 <verify_monster@@Base+0x680>
   11eb4:	ldr	ip, [r1, #-4]
   11eb8:	cmp	ip, #2
   11ebc:	bne	12240 <verify_monster@@Base+0x680>
   11ec0:	ldrsh	r3, [r3, r2]
   11ec4:	cmp	r3, #10
   11ec8:	bne	12260 <verify_monster@@Base+0x6a0>
   11ecc:	ldrsb	r3, [r1, #2]
   11ed0:	cmp	r3, #20
   11ed4:	bne	12270 <verify_monster@@Base+0x6b0>
   11ed8:	cmn	r1, #4
   11edc:	beq	12280 <verify_monster@@Base+0x6c0>
   11ee0:	ldrsh	r3, [r1, #4]
   11ee4:	cmp	r3, #30
   11ee8:	bne	12280 <verify_monster@@Base+0x6c0>
   11eec:	ldrsb	r3, [r1, #6]
   11ef0:	cmp	r3, #40	; 0x28
   11ef4:	bne	121a0 <verify_monster@@Base+0x5e0>
   11ef8:	cmp	r6, #37	; 0x25
   11efc:	bhi	11f24 <verify_monster@@Base+0x364>
   11f00:	ldr	r3, [pc, #380]	; 12084 <verify_monster@@Base+0x4c4>
   11f04:	mov	r2, #148	; 0x94
   11f08:	ldr	r1, [pc, #376]	; 12088 <verify_monster@@Base+0x4c8>
   11f0c:	ldr	r0, [pc, #332]	; 12060 <verify_monster@@Base+0x4a0>
   11f10:	bl	10ddc <__assert_fail@plt>
   11f14:	ldr	r0, [pc, #328]	; 12064 <verify_monster@@Base+0x4a4>
   11f18:	bl	10d4c <puts@plt>
   11f1c:	mvn	r0, #0
   11f20:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11f24:	ldrh	r3, [r5, #36]	; 0x24
   11f28:	cmp	r3, #0
   11f2c:	beq	11f00 <verify_monster@@Base+0x340>
   11f30:	ldr	r3, [r4, r3]
   11f34:	ldr	r2, [pc, #300]	; 12068 <verify_monster@@Base+0x4a8>
   11f38:	cmp	r3, r2
   11f3c:	bne	11f00 <verify_monster@@Base+0x340>
   11f40:	cmp	r6, #39	; 0x27
   11f44:	bhi	11f5c <verify_monster@@Base+0x39c>
   11f48:	ldr	r3, [pc, #308]	; 12084 <verify_monster@@Base+0x4c4>
   11f4c:	mov	r2, #149	; 0x95
   11f50:	ldr	r1, [pc, #304]	; 12088 <verify_monster@@Base+0x4c8>
   11f54:	ldr	r0, [pc, #272]	; 1206c <verify_monster@@Base+0x4ac>
   11f58:	bl	10ddc <__assert_fail@plt>
   11f5c:	ldrh	r2, [r5, #38]	; 0x26
   11f60:	cmp	r2, #0
   11f64:	beq	11f48 <verify_monster@@Base+0x388>
   11f68:	ldr	r2, [r4, r2]
   11f6c:	cmp	r2, r3
   11f70:	bne	11f48 <verify_monster@@Base+0x388>
   11f74:	cmp	r6, #41	; 0x29
   11f78:	bhi	11f90 <verify_monster@@Base+0x3d0>
   11f7c:	ldr	r3, [pc, #256]	; 12084 <verify_monster@@Base+0x4c4>
   11f80:	mov	r2, #150	; 0x96
   11f84:	ldr	r1, [pc, #252]	; 12088 <verify_monster@@Base+0x4c8>
   11f88:	ldr	r0, [pc, #224]	; 12070 <verify_monster@@Base+0x4b0>
   11f8c:	bl	10ddc <__assert_fail@plt>
   11f90:	ldrh	r3, [r5, #40]	; 0x28
   11f94:	cmp	r3, #0
   11f98:	beq	11f7c <verify_monster@@Base+0x3bc>
   11f9c:	add	r9, pc, #116	; 0x74
   11fa0:	ldrd	r8, [r9]
   11fa4:	ldrd	r2, [r3, r4]
   11fa8:	cmp	r3, r9
   11fac:	cmpeq	r2, r8
   11fb0:	bne	11f7c <verify_monster@@Base+0x3bc>
   11fb4:	cmp	r6, #43	; 0x2b
   11fb8:	bhi	11fd0 <verify_monster@@Base+0x410>
   11fbc:	ldr	r3, [pc, #192]	; 12084 <verify_monster@@Base+0x4c4>
   11fc0:	mov	r2, #151	; 0x97
   11fc4:	ldr	r1, [pc, #188]	; 12088 <verify_monster@@Base+0x4c8>
   11fc8:	ldr	r0, [pc, #164]	; 12074 <verify_monster@@Base+0x4b4>
   11fcc:	bl	10ddc <__assert_fail@plt>
   11fd0:	ldrh	r3, [r5, #42]	; 0x2a
   11fd4:	cmp	r3, #0
   11fd8:	beq	11fbc <verify_monster@@Base+0x3fc>
   11fdc:	add	r9, pc, #52	; 0x34
   11fe0:	ldrd	r8, [r9]
   11fe4:	ldrd	r2, [r3, r4]
   11fe8:	cmp	r3, r9
   11fec:	cmpeq	r2, r8
   11ff0:	bne	11fbc <verify_monster@@Base+0x3fc>
   11ff4:	cmp	r6, #45	; 0x2d
   11ff8:	bhi	12090 <verify_monster@@Base+0x4d0>
   11ffc:	ldr	r3, [pc, #128]	; 12084 <verify_monster@@Base+0x4c4>
   12000:	mov	r2, #152	; 0x98
   12004:	ldr	r1, [pc, #124]	; 12088 <verify_monster@@Base+0x4c8>
   12008:	ldr	r0, [pc, #104]	; 12078 <verify_monster@@Base+0x4b8>
   1200c:	bl	10ddc <__assert_fail@plt>
   12010:	andeq	r0, r0, r0
   12014:	andmi	r0, r8, r0
   12018:	vrhadd.s<illegal width 64>	d25, d27, d1
   1201c:	cdpvs	0, 0, cr8, cr15, cr13, {6}
   12020:	svccc	0x00800000
   12024:	andmi	r0, r0, r0
   12028:	submi	r0, r0, r0
   1202c:	movtpl	r4, #61261	; 0xef4d
   12030:	andeq	r3, r1, r8, ror #27
   12034:	andeq	r3, r1, r0, lsl #28
   12038:	andeq	r3, r1, r4, ror ip
   1203c:			; <UNDEFINED> instruction: 0x000002bb
   12040:	andeq	r3, r1, ip, asr sp
   12044:	andeq	r3, r1, r0, lsl pc
   12048:	andeq	r3, r1, r0, asr pc
   1204c:	andeq	r3, r1, r0, ror pc
   12050:	andeq	r3, r1, ip, lsr #31
   12054:	strdeq	r3, [r1], -r0
   12058:	andeq	r4, r1, ip, lsl r0
   1205c:	andeq	r4, r1, r4, ror r0
   12060:	andeq	r4, r1, ip, ror #2
   12064:	strdeq	r3, [r1], -r8
   12068:			; <UNDEFINED> instruction: 0xdd79c941
   1206c:	andeq	r4, r1, r4, lsr #3
   12070:	ldrdeq	r4, [r1], -ip
   12074:	andeq	r4, r1, ip, lsl r2
   12078:	andeq	r4, r1, ip, asr r2
   1207c:	mcrhi	4, 4, sl, cr1, cr1, {3}
   12080:	muleq	r1, r4, r2
   12084:	andeq	r3, r1, ip, lsr #25
   12088:	andeq	r4, r1, r8, lsl r1
   1208c:	andeq	r4, r1, ip, asr #5
   12090:	ldrh	r3, [r5, #44]	; 0x2c
   12094:	cmp	r3, #0
   12098:	beq	11ffc <verify_monster@@Base+0x43c>
   1209c:	ldr	r3, [r4, r3]
   120a0:	ldr	r2, [pc, #-44]	; 1207c <verify_monster@@Base+0x4bc>
   120a4:	cmp	r3, r2
   120a8:	bne	11ffc <verify_monster@@Base+0x43c>
   120ac:	cmp	r6, #47	; 0x2f
   120b0:	bhi	120c8 <verify_monster@@Base+0x508>
   120b4:	ldr	r3, [pc, #-56]	; 12084 <verify_monster@@Base+0x4c4>
   120b8:	mov	r2, #153	; 0x99
   120bc:	ldr	r1, [pc, #-60]	; 12088 <verify_monster@@Base+0x4c8>
   120c0:	ldr	r0, [pc, #-72]	; 12080 <verify_monster@@Base+0x4c0>
   120c4:	bl	10ddc <__assert_fail@plt>
   120c8:	ldrh	r2, [r5, #46]	; 0x2e
   120cc:	cmp	r2, #0
   120d0:	beq	120b4 <verify_monster@@Base+0x4f4>
   120d4:	ldr	r2, [r4, r2]
   120d8:	cmp	r2, r3
   120dc:	bne	120b4 <verify_monster@@Base+0x4f4>
   120e0:	cmp	r6, #49	; 0x31
   120e4:	bhi	120fc <verify_monster@@Base+0x53c>
   120e8:	ldr	r3, [pc, #-108]	; 12084 <verify_monster@@Base+0x4c4>
   120ec:	mov	r2, #154	; 0x9a
   120f0:	ldr	r1, [pc, #-112]	; 12088 <verify_monster@@Base+0x4c8>
   120f4:	ldr	r0, [pc, #-112]	; 1208c <verify_monster@@Base+0x4cc>
   120f8:	bl	10ddc <__assert_fail@plt>
   120fc:	ldrh	r3, [r5, #48]	; 0x30
   12100:	cmp	r3, #0
   12104:	beq	120e8 <verify_monster@@Base+0x528>
   12108:	add	r9, pc, #432	; 0x1b0
   1210c:	ldrd	r8, [r9]
   12110:	ldrd	r2, [r3, r4]
   12114:	cmp	r3, r9
   12118:	cmpeq	r2, r8
   1211c:	bne	120e8 <verify_monster@@Base+0x528>
   12120:	cmp	r6, #51	; 0x33
   12124:	bhi	1213c <verify_monster@@Base+0x57c>
   12128:	ldr	r3, [pc, #408]	; 122c8 <verify_monster@@Base+0x708>
   1212c:	mov	r2, #155	; 0x9b
   12130:	ldr	r1, [pc, #404]	; 122cc <verify_monster@@Base+0x70c>
   12134:	ldr	r0, [pc, #404]	; 122d0 <verify_monster@@Base+0x710>
   12138:	bl	10ddc <__assert_fail@plt>
   1213c:	ldrh	r1, [r5, #50]	; 0x32
   12140:	cmp	r1, #0
   12144:	beq	12128 <verify_monster@@Base+0x568>
   12148:	ldrd	r4, [r4, r1]
   1214c:	cmp	r5, r3
   12150:	cmpeq	r4, r2
   12154:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   12158:	b	12128 <verify_monster@@Base+0x568>
   1215c:	mov	r1, #3
   12160:	ldr	r0, [pc, #364]	; 122d4 <verify_monster@@Base+0x714>
   12164:	bl	10cec <printf@plt>
   12168:	mvn	r0, #0
   1216c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12170:	ldr	r0, [pc, #352]	; 122d8 <verify_monster@@Base+0x718>
   12174:	bl	10d4c <puts@plt>
   12178:	mvn	r0, #0
   1217c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12180:	ldr	r0, [pc, #340]	; 122dc <verify_monster@@Base+0x71c>
   12184:	bl	10d4c <puts@plt>
   12188:	mvn	r0, #0
   1218c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12190:	ldr	r0, [pc, #328]	; 122e0 <verify_monster@@Base+0x720>
   12194:	bl	10d4c <puts@plt>
   12198:	mvn	r0, #0
   1219c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   121a0:	ldr	r0, [pc, #316]	; 122e4 <verify_monster@@Base+0x724>
   121a4:	bl	10d4c <puts@plt>
   121a8:	mvn	r0, #0
   121ac:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   121b0:	ldr	r0, [pc, #304]	; 122e8 <verify_monster@@Base+0x728>
   121b4:	bl	10d4c <puts@plt>
   121b8:	mvn	r0, #0
   121bc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   121c0:	mov	r1, #1
   121c4:	b	12160 <verify_monster@@Base+0x5a0>
   121c8:	mov	r1, #2
   121cc:	b	12160 <verify_monster@@Base+0x5a0>
   121d0:	ldr	r0, [pc, #276]	; 122ec <verify_monster@@Base+0x72c>
   121d4:	bl	10d4c <puts@plt>
   121d8:	mvn	r0, #0
   121dc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   121e0:	ldr	r0, [pc, #264]	; 122f0 <verify_monster@@Base+0x730>
   121e4:	bl	10d4c <puts@plt>
   121e8:	mvn	r0, #0
   121ec:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   121f0:	ldr	r0, [pc, #252]	; 122f4 <verify_monster@@Base+0x734>
   121f4:	bl	10d4c <puts@plt>
   121f8:	mvn	r0, #0
   121fc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12200:	ldr	r0, [pc, #240]	; 122f8 <verify_monster@@Base+0x738>
   12204:	bl	10d4c <puts@plt>
   12208:	mvn	r0, #0
   1220c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12210:	ldr	r0, [pc, #228]	; 122fc <verify_monster@@Base+0x73c>
   12214:	bl	10d4c <puts@plt>
   12218:	mvn	r0, #0
   1221c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12220:	ldr	r0, [pc, #216]	; 12300 <verify_monster@@Base+0x740>
   12224:	bl	10d4c <puts@plt>
   12228:	mvn	r0, #0
   1222c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12230:	ldr	r0, [pc, #204]	; 12304 <verify_monster@@Base+0x744>
   12234:	bl	10d4c <puts@plt>
   12238:	mvn	r0, #0
   1223c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12240:	ldr	r0, [pc, #192]	; 12308 <verify_monster@@Base+0x748>
   12244:	bl	10d4c <puts@plt>
   12248:	mvn	r0, #0
   1224c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12250:	ldr	r0, [pc, #180]	; 1230c <verify_monster@@Base+0x74c>
   12254:	bl	10d4c <puts@plt>
   12258:	mvn	r0, #0
   1225c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12260:	ldr	r0, [pc, #168]	; 12310 <verify_monster@@Base+0x750>
   12264:	bl	10d4c <puts@plt>
   12268:	mvn	r0, #0
   1226c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12270:	ldr	r0, [pc, #156]	; 12314 <verify_monster@@Base+0x754>
   12274:	bl	10d4c <puts@plt>
   12278:	mvn	r0, #0
   1227c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12280:	ldr	r0, [pc, #144]	; 12318 <verify_monster@@Base+0x758>
   12284:	bl	10d4c <puts@plt>
   12288:	mvn	r0, #0
   1228c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12290:	ldr	r0, [pc, #132]	; 1231c <verify_monster@@Base+0x75c>
   12294:	bl	10d4c <puts@plt>
   12298:	mvn	r0, #0
   1229c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   122a0:	ldr	r0, [pc, #120]	; 12320 <verify_monster@@Base+0x760>
   122a4:	bl	10d4c <puts@plt>
   122a8:	mvn	r0, #0
   122ac:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   122b0:	ldr	r0, [pc, #108]	; 12324 <verify_monster@@Base+0x764>
   122b4:	bl	10d4c <puts@plt>
   122b8:	mvn	r0, #0
   122bc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   122c0:			; <UNDEFINED> instruction: 0xc767ddf1
   122c4:	mvnsmi	r4, #220, 16	; 0xdc0000
   122c8:	andeq	r3, r1, ip, lsr #25
   122cc:	andeq	r4, r1, r8, lsl r1
   122d0:	andeq	r4, r1, ip, lsl #6
   122d4:	andeq	r3, r1, ip, lsl #31
   122d8:	andeq	r3, r1, ip, asr pc
   122dc:	andeq	r4, r1, ip, asr #32
   122e0:	andeq	r3, r1, r0, ror #29
   122e4:	andeq	r4, r1, r0, lsl #2
   122e8:	andeq	r3, r1, r4, lsr pc
   122ec:	andeq	r3, r1, r8, asr #31
   122f0:	andeq	r4, r1, r4, lsr #32
   122f4:	andeq	r3, r1, r8, lsr lr
   122f8:	andeq	r3, r1, r0, ror #28
   122fc:	andeq	r3, r1, r4, lsl #29
   12300:	andeq	r3, r1, r8, lsr #29
   12304:	andeq	r3, r1, ip, asr #29
   12308:	muleq	r1, r4, r0
   1230c:	andeq	r4, r1, ip, ror r0
   12310:	strheq	r4, [r1], -r8
   12314:	ldrdeq	r4, [r1], -r0
   12318:	andeq	r4, r1, r8, ror #1
   1231c:	strdeq	r3, [r1], -r8
   12320:	andeq	r3, r1, r4, lsr #28
   12324:	andeq	r4, r1, ip, asr r0

00012328 <flatcc_verify_error_string@@Base>:
   12328:	cmp	r0, #36	; 0x24
   1232c:	ldrls	r3, [pc, #8]	; 1233c <flatcc_verify_error_string@@Base+0x14>
   12330:	ldrls	r0, [r3, r0, lsl #2]
   12334:	ldrhi	r0, [pc, #4]	; 12340 <flatcc_verify_error_string@@Base+0x18>
   12338:	bx	lr
   1233c:	andeq	r4, r1, ip, lsr r4
   12340:	ldrdeq	r4, [r1], -r0

00012344 <flatcc_verify_field@@Base>:
   12344:	add	r1, r1, #2
   12348:	ldrh	ip, [r0, #22]
   1234c:	lsl	r1, r1, #1
   12350:	uxth	r1, r1
   12354:	cmp	ip, r1
   12358:	bls	1238c <flatcc_verify_field@@Base+0x48>
   1235c:	ldr	ip, [r0, #12]
   12360:	ldrh	r1, [ip, r1]
   12364:	cmp	r1, #0
   12368:	beq	1238c <flatcc_verify_field@@Base+0x48>
   1236c:	push	{lr}		; (str lr, [sp, #-4]!)
   12370:	add	r2, r2, r1
   12374:	ldrh	lr, [r0, #20]
   12378:	ldr	ip, [r0]
   1237c:	cmp	r2, lr
   12380:	bls	12394 <flatcc_verify_field@@Base+0x50>
   12384:	mov	r0, #13
   12388:	pop	{pc}		; (ldr pc, [sp], #4)
   1238c:	mov	r0, #0
   12390:	bx	lr
   12394:	ldr	r0, [r0, #16]
   12398:	sub	r3, r3, #1
   1239c:	add	r0, ip, r0
   123a0:	add	r0, r0, r1
   123a4:	tst	r0, r3
   123a8:	moveq	r0, #0
   123ac:	movne	r0, #12
   123b0:	pop	{pc}		; (ldr pc, [sp], #4)

000123b4 <flatcc_verify_string_field@@Base>:
   123b4:	add	r1, r1, #2
   123b8:	ldrh	r3, [r0, #22]
   123bc:	lsl	r1, r1, #1
   123c0:	uxth	r1, r1
   123c4:	cmp	r3, r1
   123c8:	bls	123f4 <flatcc_verify_string_field@@Base+0x40>
   123cc:	ldr	r3, [r0, #12]
   123d0:	ldrh	r3, [r3, r1]
   123d4:	cmp	r3, #0
   123d8:	beq	123f4 <flatcc_verify_string_field@@Base+0x40>
   123dc:	ldrh	r2, [r0, #20]
   123e0:	add	r1, r3, #4
   123e4:	cmp	r1, r2
   123e8:	bls	12404 <flatcc_verify_string_field@@Base+0x50>
   123ec:	mov	r0, #13
   123f0:	bx	lr
   123f4:	cmp	r2, #0
   123f8:	movne	r0, #4
   123fc:	moveq	r0, #0
   12400:	bx	lr
   12404:	ldr	r2, [r0, #16]
   12408:	add	r2, r3, r2
   1240c:	tst	r2, #3
   12410:	beq	1241c <flatcc_verify_string_field@@Base+0x68>
   12414:	mov	r0, #12
   12418:	bx	lr
   1241c:	cmp	r2, #0
   12420:	beq	12474 <flatcc_verify_string_field@@Base+0xc0>
   12424:	ldr	r1, [r0]
   12428:	ldr	r3, [r1, r2]
   1242c:	add	r3, r2, r3
   12430:	cmp	r2, r3
   12434:	bcs	1246c <flatcc_verify_string_field@@Base+0xb8>
   12438:	ldr	r2, [r0, #4]
   1243c:	add	r0, r3, #4
   12440:	cmp	r2, r0
   12444:	bcc	1246c <flatcc_verify_string_field@@Base+0xb8>
   12448:	tst	r3, #3
   1244c:	bne	1246c <flatcc_verify_string_field@@Base+0xb8>
   12450:	ldr	r3, [r1, r3]
   12454:	sub	r2, r2, r0
   12458:	add	ip, r3, #1
   1245c:	cmp	r2, ip
   12460:	bcs	1247c <flatcc_verify_string_field@@Base+0xc8>
   12464:	mov	r0, #8
   12468:	bx	lr
   1246c:	mov	r0, #17
   12470:	bx	lr
   12474:	mov	r0, r2
   12478:	bx	lr
   1247c:	add	r1, r1, r0
   12480:	ldrb	r0, [r1, r3]
   12484:	cmp	r0, #0
   12488:	movne	r0, #7
   1248c:	moveq	r0, #0
   12490:	bx	lr

00012494 <flatcc_verify_vector_field@@Base>:
   12494:	add	r1, r1, #2
   12498:	ldrh	ip, [r0, #22]
   1249c:	lsl	r1, r1, #1
   124a0:	push	{lr}		; (str lr, [sp, #-4]!)
   124a4:	uxth	r1, r1
   124a8:	cmp	ip, r1
   124ac:	ldrh	ip, [sp, #4]
   124b0:	bls	124dc <flatcc_verify_vector_field@@Base+0x48>
   124b4:	ldr	lr, [r0, #12]
   124b8:	ldrh	r1, [lr, r1]
   124bc:	cmp	r1, #0
   124c0:	beq	124dc <flatcc_verify_vector_field@@Base+0x48>
   124c4:	ldrh	r2, [r0, #20]
   124c8:	add	lr, r1, #4
   124cc:	cmp	lr, r2
   124d0:	bls	124ec <flatcc_verify_vector_field@@Base+0x58>
   124d4:	mov	r0, #13
   124d8:	pop	{pc}		; (ldr pc, [sp], #4)
   124dc:	cmp	r2, #0
   124e0:	movne	r0, #4
   124e4:	moveq	r0, #0
   124e8:	pop	{pc}		; (ldr pc, [sp], #4)
   124ec:	ldr	r2, [r0, #16]
   124f0:	add	r2, r1, r2
   124f4:	tst	r2, #3
   124f8:	beq	12504 <flatcc_verify_vector_field@@Base+0x70>
   124fc:	mov	r0, #12
   12500:	pop	{pc}		; (ldr pc, [sp], #4)
   12504:	cmp	r2, #0
   12508:	beq	12568 <flatcc_verify_vector_field@@Base+0xd4>
   1250c:	ldr	lr, [r0]
   12510:	ldr	r1, [lr, r2]
   12514:	add	r1, r2, r1
   12518:	cmp	r1, r2
   1251c:	bls	12560 <flatcc_verify_vector_field@@Base+0xcc>
   12520:	ldr	r2, [r0, #4]
   12524:	add	r0, r1, #4
   12528:	cmp	r2, r0
   1252c:	bcc	12560 <flatcc_verify_vector_field@@Base+0xcc>
   12530:	cmp	ip, #4
   12534:	movcc	ip, #4
   12538:	sub	ip, ip, #1
   1253c:	orr	ip, ip, #3
   12540:	tst	ip, r0
   12544:	bne	12560 <flatcc_verify_vector_field@@Base+0xcc>
   12548:	ldr	r1, [lr, r1]
   1254c:	ldr	ip, [sp, #8]
   12550:	cmp	ip, r1
   12554:	bcs	12570 <flatcc_verify_vector_field@@Base+0xdc>
   12558:	mov	r0, #25
   1255c:	pop	{pc}		; (ldr pc, [sp], #4)
   12560:	mov	r0, #16
   12564:	pop	{pc}		; (ldr pc, [sp], #4)
   12568:	mov	r0, r2
   1256c:	pop	{pc}		; (ldr pc, [sp], #4)
   12570:	mul	r3, r1, r3
   12574:	sub	r2, r2, r0
   12578:	cmp	r2, r3
   1257c:	movcc	r0, #26
   12580:	movcs	r0, #0
   12584:	pop	{pc}		; (ldr pc, [sp], #4)

00012588 <flatcc_verify_string_vector_field@@Base>:
   12588:	add	r1, r1, #2
   1258c:	ldrh	r3, [r0, #22]
   12590:	lsl	r1, r1, #1
   12594:	uxth	r1, r1
   12598:	cmp	r3, r1
   1259c:	bls	125c8 <flatcc_verify_string_vector_field@@Base+0x40>
   125a0:	ldr	r3, [r0, #12]
   125a4:	ldrh	r3, [r3, r1]
   125a8:	cmp	r3, #0
   125ac:	beq	125c8 <flatcc_verify_string_vector_field@@Base+0x40>
   125b0:	ldrh	r2, [r0, #20]
   125b4:	add	r1, r3, #4
   125b8:	cmp	r1, r2
   125bc:	bls	125d8 <flatcc_verify_string_vector_field@@Base+0x50>
   125c0:	mov	r0, #13
   125c4:	bx	lr
   125c8:	cmp	r2, #0
   125cc:	movne	r0, #4
   125d0:	moveq	r0, #0
   125d4:	bx	lr
   125d8:	ldr	r2, [r0, #16]
   125dc:	add	r2, r3, r2
   125e0:	tst	r2, #3
   125e4:	beq	125f0 <flatcc_verify_string_vector_field@@Base+0x68>
   125e8:	mov	r0, #12
   125ec:	bx	lr
   125f0:	cmp	r2, #0
   125f4:	beq	126b4 <flatcc_verify_string_vector_field@@Base+0x12c>
   125f8:	push	{r4, r5, r6, lr}
   125fc:	ldr	lr, [r0]
   12600:	ldr	r1, [lr, r2]
   12604:	add	r1, r2, r1
   12608:	cmp	r2, r1
   1260c:	bcs	12648 <flatcc_verify_string_vector_field@@Base+0xc0>
   12610:	ldr	r5, [r0, #4]
   12614:	add	r3, r1, #4
   12618:	cmp	r5, r3
   1261c:	bcc	12648 <flatcc_verify_string_vector_field@@Base+0xc0>
   12620:	tst	r3, #3
   12624:	bne	12648 <flatcc_verify_string_vector_field@@Base+0xc0>
   12628:	ldr	r0, [lr, r1]
   1262c:	cmn	r0, #-1073741823	; 0xc0000001
   12630:	bls	12650 <flatcc_verify_string_vector_field@@Base+0xc8>
   12634:	ldr	r2, [lr, r1]
   12638:	cmn	r2, #-1073741823	; 0xc0000001
   1263c:	bls	126bc <flatcc_verify_string_vector_field@@Base+0x134>
   12640:	mov	r0, #25
   12644:	pop	{r4, r5, r6, pc}
   12648:	mov	r0, #16
   1264c:	pop	{r4, r5, r6, pc}
   12650:	lsl	r4, r0, #2
   12654:	sub	r2, r5, r3
   12658:	cmp	r2, r4
   1265c:	bcc	12634 <flatcc_verify_string_vector_field@@Base+0xac>
   12660:	cmp	r0, #0
   12664:	popeq	{r4, r5, r6, pc}
   12668:	ldr	r2, [lr, r3]
   1266c:	add	ip, lr, r3
   12670:	add	r2, r3, r2
   12674:	cmp	r3, r2
   12678:	bcs	126ac <flatcc_verify_string_vector_field@@Base+0x124>
   1267c:	add	r1, r2, #4
   12680:	cmp	r5, r1
   12684:	bcc	126ac <flatcc_verify_string_vector_field@@Base+0x124>
   12688:	tst	r2, #3
   1268c:	bne	126ac <flatcc_verify_string_vector_field@@Base+0x124>
   12690:	ldr	r2, [lr, r2]
   12694:	sub	r0, r5, r1
   12698:	add	r6, r2, #1
   1269c:	cmp	r6, r0
   126a0:	bls	126d0 <flatcc_verify_string_vector_field@@Base+0x148>
   126a4:	mov	r0, #8
   126a8:	pop	{r4, r5, r6, pc}
   126ac:	mov	r0, #17
   126b0:	pop	{r4, r5, r6, pc}
   126b4:	mov	r0, r2
   126b8:	bx	lr
   126bc:	sub	r3, r5, r3
   126c0:	cmp	r3, r2, lsl #2
   126c4:	movcs	r0, #0
   126c8:	movcc	r0, #26
   126cc:	pop	{r4, r5, r6, pc}
   126d0:	add	r4, r3, r4
   126d4:	add	r1, lr, r1
   126d8:	ldrb	r0, [r1, r2]
   126dc:	cmp	r0, #0
   126e0:	beq	126ec <flatcc_verify_string_vector_field@@Base+0x164>
   126e4:	mov	r0, #7
   126e8:	pop	{r4, r5, r6, pc}
   126ec:	add	r3, r3, #4
   126f0:	cmp	r4, r3
   126f4:	beq	12738 <flatcc_verify_string_vector_field@@Base+0x1b0>
   126f8:	ldr	r2, [ip, #4]!
   126fc:	add	r2, r3, r2
   12700:	cmp	r3, r2
   12704:	add	r1, r2, #4
   12708:	bcs	126ac <flatcc_verify_string_vector_field@@Base+0x124>
   1270c:	cmp	r5, r1
   12710:	bcc	126ac <flatcc_verify_string_vector_field@@Base+0x124>
   12714:	tst	r2, #3
   12718:	sub	r6, r5, r1
   1271c:	bne	126ac <flatcc_verify_string_vector_field@@Base+0x124>
   12720:	ldr	r2, [lr, r2]
   12724:	add	r0, r2, #1
   12728:	cmp	r6, r0
   1272c:	bcs	126d4 <flatcc_verify_string_vector_field@@Base+0x14c>
   12730:	mov	r0, #8
   12734:	pop	{r4, r5, r6, pc}
   12738:	pop	{r4, r5, r6, pc}

0001273c <flatcc_verify_table_field@@Base>:
   1273c:	add	r1, r1, #2
   12740:	ldrh	ip, [r0, #22]
   12744:	lsl	r1, r1, #1
   12748:	uxth	r1, r1
   1274c:	cmp	ip, r1
   12750:	bls	1277c <flatcc_verify_table_field@@Base+0x40>
   12754:	ldr	ip, [r0, #12]
   12758:	ldrh	r1, [ip, r1]
   1275c:	cmp	r1, #0
   12760:	beq	1277c <flatcc_verify_table_field@@Base+0x40>
   12764:	ldrh	r2, [r0, #20]
   12768:	add	ip, r1, #4
   1276c:	cmp	ip, r2
   12770:	bls	1278c <flatcc_verify_table_field@@Base+0x50>
   12774:	mov	r0, #13
   12778:	bx	lr
   1277c:	cmp	r2, #0
   12780:	movne	r0, #4
   12784:	moveq	r0, #0
   12788:	bx	lr
   1278c:	ldr	r2, [r0, #16]
   12790:	add	r2, r1, r2
   12794:	tst	r2, #3
   12798:	beq	127a4 <flatcc_verify_table_field@@Base+0x68>
   1279c:	mov	r0, #12
   127a0:	bx	lr
   127a4:	cmp	r2, #0
   127a8:	beq	127e0 <flatcc_verify_table_field@@Base+0xa4>
   127ac:	ldr	r1, [r0, #8]
   127b0:	ldr	ip, [r0]
   127b4:	push	{r4, r5, lr}
   127b8:	sub	r1, r1, #1
   127bc:	sub	sp, sp, #28
   127c0:	cmp	r1, #0
   127c4:	ldr	lr, [r0, #4]
   127c8:	ldr	r0, [ip, r2]
   127cc:	str	r1, [sp, #8]
   127d0:	moveq	r0, #3
   127d4:	bne	127e8 <flatcc_verify_table_field@@Base+0xac>
   127d8:	add	sp, sp, #28
   127dc:	pop	{r4, r5, pc}
   127e0:	mov	r0, r2
   127e4:	bx	lr
   127e8:	add	r1, r0, r2
   127ec:	cmp	r2, r1
   127f0:	bcs	12888 <flatcc_verify_table_field@@Base+0x14c>
   127f4:	add	r2, r1, #4
   127f8:	cmp	lr, r2
   127fc:	bcc	12888 <flatcc_verify_table_field@@Base+0x14c>
   12800:	tst	r1, #3
   12804:	bne	12888 <flatcc_verify_table_field@@Base+0x14c>
   12808:	str	r1, [sp, #16]
   1280c:	ldr	r2, [ip, r1]
   12810:	subs	r2, r1, r2
   12814:	bmi	12890 <flatcc_verify_table_field@@Base+0x154>
   12818:	tst	r2, #1
   1281c:	bne	12890 <flatcc_verify_table_field@@Base+0x154>
   12820:	add	r0, r2, #2
   12824:	cmp	lr, r0
   12828:	movcc	r0, #27
   1282c:	bcc	127d8 <flatcc_verify_table_field@@Base+0x9c>
   12830:	ldrh	r4, [ip, r2]
   12834:	add	r5, ip, r2
   12838:	add	r2, r4, r2
   1283c:	cmp	lr, r2
   12840:	strh	r4, [sp, #22]
   12844:	bcc	12898 <flatcc_verify_table_field@@Base+0x15c>
   12848:	tst	r4, #1
   1284c:	bne	12898 <flatcc_verify_table_field@@Base+0x15c>
   12850:	cmp	r4, #3
   12854:	movls	r0, #28
   12858:	bls	127d8 <flatcc_verify_table_field@@Base+0x9c>
   1285c:	ldrh	r2, [ip, r0]
   12860:	sub	r1, lr, r1
   12864:	cmp	r1, r2
   12868:	strh	r2, [sp, #20]
   1286c:	movcc	r0, #20
   12870:	bcc	127d8 <flatcc_verify_table_field@@Base+0x9c>
   12874:	mov	r0, sp
   12878:	str	r5, [sp, #12]
   1287c:	stm	sp, {ip, lr}
   12880:	blx	r3
   12884:	b	127d8 <flatcc_verify_table_field@@Base+0x9c>
   12888:	mov	r0, #15
   1288c:	b	127d8 <flatcc_verify_table_field@@Base+0x9c>
   12890:	mov	r0, #29
   12894:	b	127d8 <flatcc_verify_table_field@@Base+0x9c>
   12898:	mov	r0, #30
   1289c:	b	127d8 <flatcc_verify_table_field@@Base+0x9c>

000128a0 <flatcc_verify_table_vector_field@@Base>:
   128a0:	add	r1, r1, #2
   128a4:	ldrh	ip, [r0, #22]
   128a8:	lsl	r1, r1, #1
   128ac:	uxth	r1, r1
   128b0:	cmp	ip, r1
   128b4:	bls	128e0 <flatcc_verify_table_vector_field@@Base+0x40>
   128b8:	ldr	ip, [r0, #12]
   128bc:	ldrh	r1, [ip, r1]
   128c0:	cmp	r1, #0
   128c4:	beq	128e0 <flatcc_verify_table_vector_field@@Base+0x40>
   128c8:	ldrh	r2, [r0, #20]
   128cc:	add	ip, r1, #4
   128d0:	cmp	ip, r2
   128d4:	bls	128f8 <flatcc_verify_table_vector_field@@Base+0x58>
   128d8:	mov	r0, #13
   128dc:	bx	lr
   128e0:	cmp	r2, #0
   128e4:	beq	128f0 <flatcc_verify_table_vector_field@@Base+0x50>
   128e8:	mov	r0, #4
   128ec:	bx	lr
   128f0:	mov	r0, #0
   128f4:	bx	lr
   128f8:	ldr	r2, [r0, #16]
   128fc:	add	r1, r1, r2
   12900:	tst	r1, #3
   12904:	beq	12910 <flatcc_verify_table_vector_field@@Base+0x70>
   12908:	mov	r0, #12
   1290c:	bx	lr
   12910:	cmp	r1, #0
   12914:	beq	128f0 <flatcc_verify_table_vector_field@@Base+0x50>
   12918:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1291c:	sub	sp, sp, #32
   12920:	ldr	r7, [r0, #8]
   12924:	cmp	r7, #0
   12928:	ble	1299c <flatcc_verify_table_vector_field@@Base+0xfc>
   1292c:	ldr	r8, [r0]
   12930:	ldr	ip, [r8, r1]
   12934:	add	ip, r1, ip
   12938:	cmp	r1, ip
   1293c:	bcs	12990 <flatcc_verify_table_vector_field@@Base+0xf0>
   12940:	ldr	r9, [r0, #4]
   12944:	add	r4, ip, #4
   12948:	cmp	r9, r4
   1294c:	bcc	12990 <flatcc_verify_table_vector_field@@Base+0xf0>
   12950:	tst	r4, #3
   12954:	bne	12990 <flatcc_verify_table_vector_field@@Base+0xf0>
   12958:	ldr	r2, [r8, ip]
   1295c:	cmn	r2, #-1073741823	; 0xc0000001
   12960:	bls	129a8 <flatcc_verify_table_vector_field@@Base+0x108>
   12964:	ldr	r3, [r8, ip]
   12968:	cmn	r3, #-1073741823	; 0xc0000001
   1296c:	movhi	r0, #25
   12970:	bhi	12994 <flatcc_verify_table_vector_field@@Base+0xf4>
   12974:	sub	r4, r9, r4
   12978:	cmp	r4, r3, lsl #2
   1297c:	movcc	r0, #26
   12980:	bcc	12994 <flatcc_verify_table_vector_field@@Base+0xf4>
   12984:	mov	r0, #0
   12988:	add	sp, sp, #32
   1298c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12990:	mov	r0, #16
   12994:	add	sp, sp, #32
   12998:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1299c:	mov	r0, #3
   129a0:	add	sp, sp, #32
   129a4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   129a8:	lsl	r6, r2, #2
   129ac:	sub	r1, r9, r4
   129b0:	cmp	r1, r6
   129b4:	bcc	12964 <flatcc_verify_table_vector_field@@Base+0xc4>
   129b8:	cmp	r2, #0
   129bc:	beq	12984 <flatcc_verify_table_vector_field@@Base+0xe4>
   129c0:	sub	r7, r7, #2
   129c4:	cmp	r7, #0
   129c8:	ldr	r2, [r8, r4]
   129cc:	add	r1, r8, r4
   129d0:	str	r7, [sp, #16]
   129d4:	beq	1299c <flatcc_verify_table_vector_field@@Base+0xfc>
   129d8:	add	r2, r4, r2
   129dc:	cmp	r2, r4
   129e0:	bls	12b6c <flatcc_verify_table_vector_field@@Base+0x2cc>
   129e4:	add	r0, r2, #4
   129e8:	cmp	r9, r0
   129ec:	bcc	12b6c <flatcc_verify_table_vector_field@@Base+0x2cc>
   129f0:	tst	r2, #3
   129f4:	bne	12b6c <flatcc_verify_table_vector_field@@Base+0x2cc>
   129f8:	add	ip, ip, #8
   129fc:	add	r5, r8, ip
   12a00:	mov	sl, r1
   12a04:	add	r6, r4, r6
   12a08:	str	r2, [sp, #24]
   12a0c:	ldr	r1, [r8, r2]
   12a10:	subs	r1, r2, r1
   12a14:	bmi	12a20 <flatcc_verify_table_vector_field@@Base+0x180>
   12a18:	tst	r1, #1
   12a1c:	beq	12acc <flatcc_verify_table_vector_field@@Base+0x22c>
   12a20:	ldr	r2, [sl]
   12a24:	str	r7, [sp, #16]
   12a28:	add	r2, r4, r2
   12a2c:	cmp	r2, r4
   12a30:	bls	12b78 <flatcc_verify_table_vector_field@@Base+0x2d8>
   12a34:	add	r1, r2, #4
   12a38:	cmp	r9, r1
   12a3c:	bcc	12b78 <flatcc_verify_table_vector_field@@Base+0x2d8>
   12a40:	tst	r2, #3
   12a44:	bne	12b78 <flatcc_verify_table_vector_field@@Base+0x2d8>
   12a48:	str	r2, [sp, #24]
   12a4c:	ldr	r1, [r8, r2]
   12a50:	subs	r1, r2, r1
   12a54:	bmi	12b80 <flatcc_verify_table_vector_field@@Base+0x2e0>
   12a58:	tst	r1, #1
   12a5c:	bne	12b80 <flatcc_verify_table_vector_field@@Base+0x2e0>
   12a60:	add	ip, r1, #2
   12a64:	cmp	r9, ip
   12a68:	movcc	r0, #27
   12a6c:	bcc	12994 <flatcc_verify_table_vector_field@@Base+0xf4>
   12a70:	ldrh	r0, [r8, r1]
   12a74:	add	lr, r8, r1
   12a78:	add	r1, r0, r1
   12a7c:	cmp	r9, r1
   12a80:	strh	r0, [sp, #30]
   12a84:	bcc	12b88 <flatcc_verify_table_vector_field@@Base+0x2e8>
   12a88:	tst	r0, #1
   12a8c:	bne	12b88 <flatcc_verify_table_vector_field@@Base+0x2e8>
   12a90:	cmp	r0, #3
   12a94:	movls	r0, #28
   12a98:	bls	12994 <flatcc_verify_table_vector_field@@Base+0xf4>
   12a9c:	ldrh	r1, [r8, ip]
   12aa0:	sub	r2, r9, r2
   12aa4:	cmp	r2, r1
   12aa8:	strh	r1, [sp, #28]
   12aac:	movcc	r0, #20
   12ab0:	bcc	12994 <flatcc_verify_table_vector_field@@Base+0xf4>
   12ab4:	add	r0, sp, #8
   12ab8:	str	lr, [sp, #20]
   12abc:	str	r8, [sp, #8]
   12ac0:	str	r9, [sp, #12]
   12ac4:	blx	r3
   12ac8:	b	12994 <flatcc_verify_table_vector_field@@Base+0xf4>
   12acc:	add	r0, r1, #2
   12ad0:	cmp	r9, r0
   12ad4:	bcc	12a20 <flatcc_verify_table_vector_field@@Base+0x180>
   12ad8:	ldrh	lr, [r8, r1]
   12adc:	add	ip, r8, r1
   12ae0:	add	r1, lr, r1
   12ae4:	cmp	r9, r1
   12ae8:	strh	lr, [sp, #30]
   12aec:	bcc	12a20 <flatcc_verify_table_vector_field@@Base+0x180>
   12af0:	tst	lr, #1
   12af4:	bne	12a20 <flatcc_verify_table_vector_field@@Base+0x180>
   12af8:	cmp	lr, #3
   12afc:	bls	12a20 <flatcc_verify_table_vector_field@@Base+0x180>
   12b00:	ldrh	r1, [r8, r0]
   12b04:	sub	r2, r9, r2
   12b08:	cmp	r2, r1
   12b0c:	strh	r1, [sp, #28]
   12b10:	bcc	12a20 <flatcc_verify_table_vector_field@@Base+0x180>
   12b14:	add	r0, sp, #8
   12b18:	stmib	sp, {r3, r8, r9}
   12b1c:	str	ip, [sp, #20]
   12b20:	blx	r3
   12b24:	ldr	r3, [sp, #4]
   12b28:	cmp	r0, #0
   12b2c:	bne	12a20 <flatcc_verify_table_vector_field@@Base+0x180>
   12b30:	add	r4, r4, #4
   12b34:	cmp	r6, r4
   12b38:	beq	12984 <flatcc_verify_table_vector_field@@Base+0xe4>
   12b3c:	mov	r1, r5
   12b40:	ldr	r2, [r5], #4
   12b44:	str	r7, [sp, #16]
   12b48:	add	r2, r2, r4
   12b4c:	cmp	r4, r2
   12b50:	bcs	12b6c <flatcc_verify_table_vector_field@@Base+0x2cc>
   12b54:	add	r0, r2, #4
   12b58:	cmp	r9, r0
   12b5c:	bcc	12b6c <flatcc_verify_table_vector_field@@Base+0x2cc>
   12b60:	tst	r2, #3
   12b64:	add	sl, sl, #4
   12b68:	beq	12a08 <flatcc_verify_table_vector_field@@Base+0x168>
   12b6c:	ldr	r2, [r1]
   12b70:	str	r7, [sp, #16]
   12b74:	b	12a28 <flatcc_verify_table_vector_field@@Base+0x188>
   12b78:	mov	r0, #15
   12b7c:	b	12994 <flatcc_verify_table_vector_field@@Base+0xf4>
   12b80:	mov	r0, #29
   12b84:	b	12994 <flatcc_verify_table_vector_field@@Base+0xf4>
   12b88:	mov	r0, #30
   12b8c:	b	12994 <flatcc_verify_table_vector_field@@Base+0xf4>

00012b90 <flatcc_verify_union_table@@Base>:
   12b90:	ldr	r3, [r0, #8]
   12b94:	push	{r4, r5, lr}
   12b98:	sub	r3, r3, #1
   12b9c:	sub	sp, sp, #28
   12ba0:	cmp	r3, #0
   12ba4:	ldr	lr, [r0]
   12ba8:	str	r3, [sp, #8]
   12bac:	ldr	ip, [r0, #4]
   12bb0:	ldr	r2, [r0, #16]
   12bb4:	ldr	r3, [r0, #20]
   12bb8:	moveq	r0, #3
   12bbc:	bne	12bc8 <flatcc_verify_union_table@@Base+0x38>
   12bc0:	add	sp, sp, #28
   12bc4:	pop	{r4, r5, pc}
   12bc8:	add	r3, r2, r3
   12bcc:	cmp	r2, r3
   12bd0:	bcs	12c6c <flatcc_verify_union_table@@Base+0xdc>
   12bd4:	add	r2, r3, #4
   12bd8:	cmp	ip, r2
   12bdc:	bcc	12c6c <flatcc_verify_union_table@@Base+0xdc>
   12be0:	tst	r3, #3
   12be4:	bne	12c6c <flatcc_verify_union_table@@Base+0xdc>
   12be8:	str	r3, [sp, #16]
   12bec:	ldr	r2, [lr, r3]
   12bf0:	subs	r2, r3, r2
   12bf4:	bmi	12c78 <flatcc_verify_union_table@@Base+0xe8>
   12bf8:	tst	r2, #1
   12bfc:	bne	12c78 <flatcc_verify_union_table@@Base+0xe8>
   12c00:	add	r0, r2, #2
   12c04:	cmp	ip, r0
   12c08:	movcc	r0, #27
   12c0c:	bcc	12bc0 <flatcc_verify_union_table@@Base+0x30>
   12c10:	ldrh	r4, [lr, r2]
   12c14:	add	r5, lr, r2
   12c18:	add	r2, r4, r2
   12c1c:	cmp	ip, r2
   12c20:	strh	r4, [sp, #22]
   12c24:	bcc	12c80 <flatcc_verify_union_table@@Base+0xf0>
   12c28:	tst	r4, #1
   12c2c:	bne	12c80 <flatcc_verify_union_table@@Base+0xf0>
   12c30:	cmp	r4, #3
   12c34:	movls	r0, #28
   12c38:	bls	12bc0 <flatcc_verify_union_table@@Base+0x30>
   12c3c:	ldrh	r2, [lr, r0]
   12c40:	sub	r3, ip, r3
   12c44:	cmp	r3, r2
   12c48:	strh	r2, [sp, #20]
   12c4c:	movcc	r0, #20
   12c50:	bcc	12bc0 <flatcc_verify_union_table@@Base+0x30>
   12c54:	mov	r0, sp
   12c58:	str	r5, [sp, #12]
   12c5c:	str	lr, [sp]
   12c60:	str	ip, [sp, #4]
   12c64:	blx	r1
   12c68:	b	12bc0 <flatcc_verify_union_table@@Base+0x30>
   12c6c:	mov	r0, #15
   12c70:	add	sp, sp, #28
   12c74:	pop	{r4, r5, pc}
   12c78:	mov	r0, #29
   12c7c:	b	12bc0 <flatcc_verify_union_table@@Base+0x30>
   12c80:	mov	r0, #30
   12c84:	b	12bc0 <flatcc_verify_union_table@@Base+0x30>

00012c88 <flatcc_verify_union_struct@@Base>:
   12c88:	ldr	r3, [r0, #20]
   12c8c:	ldr	ip, [r0, #4]
   12c90:	cmp	r3, #0
   12c94:	ldr	r0, [r0, #16]
   12c98:	bne	12ca4 <flatcc_verify_union_struct@@Base+0x1c>
   12c9c:	mov	r0, #18
   12ca0:	bx	lr
   12ca4:	add	r3, r0, r3
   12ca8:	cmp	ip, r3
   12cac:	bcc	12c9c <flatcc_verify_union_struct@@Base+0x14>
   12cb0:	adds	r1, r1, r3
   12cb4:	bcc	12cc0 <flatcc_verify_union_struct@@Base+0x38>
   12cb8:	mov	r0, #10
   12cbc:	bx	lr
   12cc0:	cmp	ip, r1
   12cc4:	bcs	12cd0 <flatcc_verify_union_struct@@Base+0x48>
   12cc8:	mov	r0, #9
   12ccc:	bx	lr
   12cd0:	sub	r2, r2, #1
   12cd4:	tst	r2, r3
   12cd8:	movne	r0, #11
   12cdc:	moveq	r0, #0
   12ce0:	bx	lr

00012ce4 <flatcc_verify_union_string@@Base>:
   12ce4:	ldr	r2, [r0, #16]
   12ce8:	ldr	r3, [r0, #20]
   12cec:	add	r3, r2, r3
   12cf0:	cmp	r2, r3
   12cf4:	bcs	12d30 <flatcc_verify_union_string@@Base+0x4c>
   12cf8:	ldr	r2, [r0, #4]
   12cfc:	add	r1, r3, #4
   12d00:	cmp	r2, r1
   12d04:	bcc	12d30 <flatcc_verify_union_string@@Base+0x4c>
   12d08:	tst	r3, #3
   12d0c:	bne	12d30 <flatcc_verify_union_string@@Base+0x4c>
   12d10:	ldr	r0, [r0]
   12d14:	sub	r2, r2, r1
   12d18:	ldr	r3, [r0, r3]
   12d1c:	add	ip, r3, #1
   12d20:	cmp	r2, ip
   12d24:	bcs	12d38 <flatcc_verify_union_string@@Base+0x54>
   12d28:	mov	r0, #8
   12d2c:	bx	lr
   12d30:	mov	r0, #17
   12d34:	bx	lr
   12d38:	add	r1, r0, r1
   12d3c:	ldrb	r0, [r1, r3]
   12d40:	cmp	r0, #0
   12d44:	movne	r0, #7
   12d48:	moveq	r0, #0
   12d4c:	bx	lr

00012d50 <flatcc_verify_buffer_header@@Base>:
   12d50:	ands	r3, r0, #3
   12d54:	beq	12d60 <flatcc_verify_buffer_header@@Base+0x10>
   12d58:	mov	r0, #5
   12d5c:	bx	lr
   12d60:	cmn	r1, #9
   12d64:	bls	12d70 <flatcc_verify_buffer_header@@Base+0x20>
   12d68:	mov	r0, #6
   12d6c:	bx	lr
   12d70:	cmp	r1, #7
   12d74:	bls	12dc0 <flatcc_verify_buffer_header@@Base+0x70>
   12d78:	cmp	r2, #0
   12d7c:	beq	12dc8 <flatcc_verify_buffer_header@@Base+0x78>
   12d80:	push	{r4, lr}
   12d84:	sub	sp, sp, #8
   12d88:	mov	r4, r0
   12d8c:	add	r0, sp, #8
   12d90:	mov	r1, r2
   12d94:	str	r3, [r0, #-4]!
   12d98:	mov	r2, #4
   12d9c:	bl	10da0 <strncpy@plt>
   12da0:	ldr	r2, [r4, #4]
   12da4:	ldr	r3, [sp, #4]
   12da8:	cmp	r3, #0
   12dac:	cmpne	r2, r3
   12db0:	moveq	r0, #0
   12db4:	movne	r0, #2
   12db8:	add	sp, sp, #8
   12dbc:	pop	{r4, pc}
   12dc0:	mov	r0, #1
   12dc4:	bx	lr
   12dc8:	mov	r0, #0
   12dcc:	bx	lr

00012dd0 <flatcc_verify_typed_buffer_header@@Base>:
   12dd0:	tst	r0, #3
   12dd4:	beq	12de0 <flatcc_verify_typed_buffer_header@@Base+0x10>
   12dd8:	mov	r0, #5
   12ddc:	bx	lr
   12de0:	cmn	r1, #9
   12de4:	bls	12df0 <flatcc_verify_typed_buffer_header@@Base+0x20>
   12de8:	mov	r0, #6
   12dec:	bx	lr
   12df0:	cmp	r1, #7
   12df4:	bls	12e1c <flatcc_verify_typed_buffer_header@@Base+0x4c>
   12df8:	cmp	r2, #0
   12dfc:	beq	12e14 <flatcc_verify_typed_buffer_header@@Base+0x44>
   12e00:	ldr	r0, [r0, #4]
   12e04:	cmp	r2, r0
   12e08:	movne	r0, #2
   12e0c:	moveq	r0, #0
   12e10:	bx	lr
   12e14:	mov	r0, r2
   12e18:	bx	lr
   12e1c:	mov	r0, #1
   12e20:	bx	lr

00012e24 <flatcc_verify_struct_as_root@@Base>:
   12e24:	cmn	r1, #9
   12e28:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12e2c:	mov	r6, r1
   12e30:	movls	r5, #0
   12e34:	movhi	r5, #1
   12e38:	ands	r1, r0, #3
   12e3c:	movne	r1, #1
   12e40:	orr	r5, r5, r1
   12e44:	sub	sp, sp, #16
   12e48:	cmp	r6, #7
   12e4c:	movhi	r7, r5
   12e50:	orrls	r7, r5, #1
   12e54:	cmp	r7, #0
   12e58:	mov	r4, r0
   12e5c:	mov	sl, r2
   12e60:	and	r9, r0, #3
   12e64:	ldrh	r8, [sp, #48]	; 0x30
   12e68:	bne	12ea4 <flatcc_verify_struct_as_root@@Base+0x80>
   12e6c:	cmp	r2, #0
   12e70:	beq	12f00 <flatcc_verify_struct_as_root@@Base+0xdc>
   12e74:	add	r0, sp, #16
   12e78:	mov	r2, #4
   12e7c:	mov	r1, sl
   12e80:	str	r7, [r0, #-4]!
   12e84:	str	r3, [sp, #4]
   12e88:	bl	10da0 <strncpy@plt>
   12e8c:	ldr	r2, [sp, #12]
   12e90:	ldr	r1, [r4, #4]
   12e94:	ldr	r3, [sp, #4]
   12e98:	cmp	r2, #0
   12e9c:	cmpne	r1, r2
   12ea0:	beq	12f00 <flatcc_verify_struct_as_root@@Base+0xdc>
   12ea4:	cmp	r9, #0
   12ea8:	movne	r0, #5
   12eac:	bne	12f20 <flatcc_verify_struct_as_root@@Base+0xfc>
   12eb0:	cmp	r5, #0
   12eb4:	movne	r0, #6
   12eb8:	bne	12f20 <flatcc_verify_struct_as_root@@Base+0xfc>
   12ebc:	cmp	r7, #0
   12ec0:	movne	r0, #1
   12ec4:	bne	12f20 <flatcc_verify_struct_as_root@@Base+0xfc>
   12ec8:	cmp	sl, #0
   12ecc:	beq	12f50 <flatcc_verify_struct_as_root@@Base+0x12c>
   12ed0:	add	r0, sp, #16
   12ed4:	mov	r2, #4
   12ed8:	mov	r1, sl
   12edc:	str	r7, [r0, #-4]!
   12ee0:	bl	10da0 <strncpy@plt>
   12ee4:	ldr	r2, [r4, #4]
   12ee8:	ldr	r3, [sp, #12]
   12eec:	cmp	r3, #0
   12ef0:	cmpne	r2, r3
   12ef4:	movne	r0, #2
   12ef8:	bne	12f20 <flatcc_verify_struct_as_root@@Base+0xfc>
   12efc:	b	12f50 <flatcc_verify_struct_as_root@@Base+0x12c>
   12f00:	ldr	r1, [r4]
   12f04:	clz	r2, r1
   12f08:	lsr	r2, r2, #5
   12f0c:	cmp	r6, r1
   12f10:	orrcc	r2, r2, #1
   12f14:	cmp	r2, #0
   12f18:	movne	r0, #18
   12f1c:	beq	12f28 <flatcc_verify_struct_as_root@@Base+0x104>
   12f20:	add	sp, sp, #16
   12f24:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12f28:	adds	r3, r3, r1
   12f2c:	movcs	r0, #10
   12f30:	bcs	12f20 <flatcc_verify_struct_as_root@@Base+0xfc>
   12f34:	cmp	r6, r3
   12f38:	movcc	r0, #9
   12f3c:	bcc	12f20 <flatcc_verify_struct_as_root@@Base+0xfc>
   12f40:	sub	r8, r8, #1
   12f44:	tst	r8, r1
   12f48:	movne	r0, #11
   12f4c:	bne	12f20 <flatcc_verify_struct_as_root@@Base+0xfc>
   12f50:	mov	r0, #0
   12f54:	b	12f20 <flatcc_verify_struct_as_root@@Base+0xfc>

00012f58 <flatcc_verify_struct_as_typed_root@@Base>:
   12f58:	push	{lr}		; (str lr, [sp, #-4]!)
   12f5c:	sub	lr, r1, #8
   12f60:	cmn	lr, #17
   12f64:	movls	lr, #0
   12f68:	movhi	lr, #1
   12f6c:	ands	ip, r0, #3
   12f70:	movne	ip, #1
   12f74:	orrs	ip, lr, ip
   12f78:	ldrh	lr, [sp, #4]
   12f7c:	bne	12fcc <flatcc_verify_struct_as_typed_root@@Base+0x74>
   12f80:	cmp	r2, #0
   12f84:	beq	12fa4 <flatcc_verify_struct_as_typed_root@@Base+0x4c>
   12f88:	ldr	ip, [r0, #4]
   12f8c:	cmp	r2, ip
   12f90:	beq	12fa4 <flatcc_verify_struct_as_typed_root@@Base+0x4c>
   12f94:	cmn	r1, #9
   12f98:	bls	12ff0 <flatcc_verify_struct_as_typed_root@@Base+0x98>
   12f9c:	mov	r0, #6
   12fa0:	pop	{pc}		; (ldr pc, [sp], #4)
   12fa4:	ldr	r0, [r0]
   12fa8:	cmp	r1, r0
   12fac:	movcs	r2, #0
   12fb0:	movcc	r2, #1
   12fb4:	cmp	r0, #0
   12fb8:	orreq	r2, r2, #1
   12fbc:	cmp	r2, #0
   12fc0:	beq	12fe0 <flatcc_verify_struct_as_typed_root@@Base+0x88>
   12fc4:	mov	r0, #18
   12fc8:	pop	{pc}		; (ldr pc, [sp], #4)
   12fcc:	and	ip, r0, #3
   12fd0:	cmp	ip, #0
   12fd4:	beq	12f94 <flatcc_verify_struct_as_typed_root@@Base+0x3c>
   12fd8:	mov	r0, #5
   12fdc:	pop	{pc}		; (ldr pc, [sp], #4)
   12fe0:	adds	r3, r3, r0
   12fe4:	bcc	1301c <flatcc_verify_struct_as_typed_root@@Base+0xc4>
   12fe8:	mov	r0, #10
   12fec:	pop	{pc}		; (ldr pc, [sp], #4)
   12ff0:	cmp	r1, #7
   12ff4:	bls	13014 <flatcc_verify_struct_as_typed_root@@Base+0xbc>
   12ff8:	cmp	r2, #0
   12ffc:	beq	1302c <flatcc_verify_struct_as_typed_root@@Base+0xd4>
   13000:	ldr	r0, [r0, #4]
   13004:	cmp	r2, r0
   13008:	movne	r0, #2
   1300c:	moveq	r0, #0
   13010:	pop	{pc}		; (ldr pc, [sp], #4)
   13014:	mov	r0, #1
   13018:	pop	{pc}		; (ldr pc, [sp], #4)
   1301c:	cmp	r1, r3
   13020:	bcs	13034 <flatcc_verify_struct_as_typed_root@@Base+0xdc>
   13024:	mov	r0, #9
   13028:	pop	{pc}		; (ldr pc, [sp], #4)
   1302c:	mov	r0, r2
   13030:	pop	{pc}		; (ldr pc, [sp], #4)
   13034:	sub	lr, lr, #1
   13038:	tst	lr, r0
   1303c:	moveq	r0, #0
   13040:	movne	r0, #11
   13044:	pop	{pc}		; (ldr pc, [sp], #4)

00013048 <flatcc_verify_table_as_root@@Base>:
   13048:	push	{r4, r5, r6, lr}
   1304c:	mov	r5, r1
   13050:	sub	r1, r1, #8
   13054:	cmn	r1, #17
   13058:	movls	r1, #0
   1305c:	movhi	r1, #1
   13060:	mov	r4, r0
   13064:	ands	r0, r0, #3
   13068:	movne	r0, #1
   1306c:	orrs	r1, r1, r0
   13070:	sub	sp, sp, #32
   13074:	mov	r6, r2
   13078:	bne	131b8 <flatcc_verify_table_as_root@@Base+0x170>
   1307c:	cmp	r2, #0
   13080:	beq	1310c <flatcc_verify_table_as_root@@Base+0xc4>
   13084:	add	r0, sp, #32
   13088:	mov	r2, #4
   1308c:	str	r1, [r0, #-24]!	; 0xffffffe8
   13090:	mov	r1, r6
   13094:	str	r3, [sp, #4]
   13098:	bl	10da0 <strncpy@plt>
   1309c:	ldr	r2, [sp, #8]
   130a0:	ldr	r1, [r4, #4]
   130a4:	ldr	r3, [sp, #4]
   130a8:	cmp	r2, #0
   130ac:	cmpne	r1, r2
   130b0:	beq	1310c <flatcc_verify_table_as_root@@Base+0xc4>
   130b4:	cmn	r5, #9
   130b8:	movhi	r0, #6
   130bc:	bhi	131c8 <flatcc_verify_table_as_root@@Base+0x180>
   130c0:	cmp	r5, #7
   130c4:	movls	r0, #1
   130c8:	bls	131c8 <flatcc_verify_table_as_root@@Base+0x180>
   130cc:	cmp	r6, #0
   130d0:	beq	13104 <flatcc_verify_table_as_root@@Base+0xbc>
   130d4:	add	r0, sp, #32
   130d8:	mov	r3, #0
   130dc:	str	r3, [r0, #-24]!	; 0xffffffe8
   130e0:	mov	r2, #4
   130e4:	mov	r1, r6
   130e8:	bl	10da0 <strncpy@plt>
   130ec:	ldr	r2, [r4, #4]
   130f0:	ldr	r3, [sp, #8]
   130f4:	cmp	r3, #0
   130f8:	cmpne	r2, r3
   130fc:	movne	r0, #2
   13100:	bne	131c8 <flatcc_verify_table_as_root@@Base+0x180>
   13104:	mov	r0, #0
   13108:	b	131c8 <flatcc_verify_table_as_root@@Base+0x180>
   1310c:	ldr	r2, [r4]
   13110:	mov	r1, #99	; 0x63
   13114:	cmp	r2, #0
   13118:	str	r1, [sp, #16]
   1311c:	beq	131d0 <flatcc_verify_table_as_root@@Base+0x188>
   13120:	add	r1, r2, #4
   13124:	cmp	r5, r1
   13128:	bcc	131d0 <flatcc_verify_table_as_root@@Base+0x188>
   1312c:	tst	r2, #3
   13130:	bne	131d0 <flatcc_verify_table_as_root@@Base+0x188>
   13134:	ldr	r1, [r4, r2]
   13138:	str	r2, [sp, #24]
   1313c:	subs	r1, r2, r1
   13140:	bmi	131dc <flatcc_verify_table_as_root@@Base+0x194>
   13144:	tst	r1, #1
   13148:	bne	131dc <flatcc_verify_table_as_root@@Base+0x194>
   1314c:	add	r0, r1, #2
   13150:	cmp	r5, r0
   13154:	movcc	r0, #27
   13158:	bcc	131c8 <flatcc_verify_table_as_root@@Base+0x180>
   1315c:	ldrh	ip, [r4, r1]
   13160:	add	lr, r4, r1
   13164:	add	r1, ip, r1
   13168:	cmp	r5, r1
   1316c:	strh	ip, [sp, #30]
   13170:	bcc	131e4 <flatcc_verify_table_as_root@@Base+0x19c>
   13174:	tst	ip, #1
   13178:	bne	131e4 <flatcc_verify_table_as_root@@Base+0x19c>
   1317c:	cmp	ip, #3
   13180:	movls	r0, #28
   13184:	bls	131c8 <flatcc_verify_table_as_root@@Base+0x180>
   13188:	ldrh	r1, [r4, r0]
   1318c:	sub	r2, r5, r2
   13190:	cmp	r2, r1
   13194:	strh	r1, [sp, #28]
   13198:	movcc	r0, #20
   1319c:	bcc	131c8 <flatcc_verify_table_as_root@@Base+0x180>
   131a0:	add	r0, sp, #8
   131a4:	str	lr, [sp, #20]
   131a8:	str	r4, [sp, #8]
   131ac:	str	r5, [sp, #12]
   131b0:	blx	r3
   131b4:	b	131c8 <flatcc_verify_table_as_root@@Base+0x180>
   131b8:	and	r2, r4, #3
   131bc:	cmp	r2, #0
   131c0:	movne	r0, #5
   131c4:	beq	130b4 <flatcc_verify_table_as_root@@Base+0x6c>
   131c8:	add	sp, sp, #32
   131cc:	pop	{r4, r5, r6, pc}
   131d0:	mov	r0, #15
   131d4:	add	sp, sp, #32
   131d8:	pop	{r4, r5, r6, pc}
   131dc:	mov	r0, #29
   131e0:	b	131c8 <flatcc_verify_table_as_root@@Base+0x180>
   131e4:	mov	r0, #30
   131e8:	b	131c8 <flatcc_verify_table_as_root@@Base+0x180>

000131ec <flatcc_verify_table_as_typed_root@@Base>:
   131ec:	push	{r4, r5, lr}
   131f0:	sub	lr, r1, #8
   131f4:	cmn	lr, #17
   131f8:	movls	lr, #0
   131fc:	movhi	lr, #1
   13200:	ands	ip, r0, #3
   13204:	movne	ip, #1
   13208:	orrs	ip, lr, ip
   1320c:	sub	sp, sp, #28
   13210:	bne	13260 <flatcc_verify_table_as_typed_root@@Base+0x74>
   13214:	cmp	r2, #0
   13218:	beq	13278 <flatcc_verify_table_as_typed_root@@Base+0x8c>
   1321c:	ldr	ip, [r0, #4]
   13220:	cmp	r2, ip
   13224:	beq	13278 <flatcc_verify_table_as_typed_root@@Base+0x8c>
   13228:	cmn	r1, #9
   1322c:	movhi	r0, #6
   13230:	bhi	13270 <flatcc_verify_table_as_typed_root@@Base+0x84>
   13234:	cmp	r1, #7
   13238:	movls	r0, #1
   1323c:	bls	13270 <flatcc_verify_table_as_typed_root@@Base+0x84>
   13240:	cmp	r2, #0
   13244:	moveq	r0, r2
   13248:	beq	13270 <flatcc_verify_table_as_typed_root@@Base+0x84>
   1324c:	ldr	r0, [r0, #4]
   13250:	cmp	r2, r0
   13254:	movne	r0, #2
   13258:	moveq	r0, #0
   1325c:	b	13270 <flatcc_verify_table_as_typed_root@@Base+0x84>
   13260:	and	ip, r0, #3
   13264:	cmp	ip, #0
   13268:	movne	r0, #5
   1326c:	beq	13228 <flatcc_verify_table_as_typed_root@@Base+0x3c>
   13270:	add	sp, sp, #28
   13274:	pop	{r4, r5, pc}
   13278:	ldr	r2, [r0]
   1327c:	mov	ip, #99	; 0x63
   13280:	cmp	r2, #0
   13284:	str	ip, [sp, #8]
   13288:	beq	13328 <flatcc_verify_table_as_typed_root@@Base+0x13c>
   1328c:	add	ip, r2, #4
   13290:	cmp	r1, ip
   13294:	bcc	13328 <flatcc_verify_table_as_typed_root@@Base+0x13c>
   13298:	tst	r2, #3
   1329c:	bne	13328 <flatcc_verify_table_as_typed_root@@Base+0x13c>
   132a0:	ldr	ip, [r0, r2]
   132a4:	str	r2, [sp, #16]
   132a8:	subs	ip, r2, ip
   132ac:	bmi	13334 <flatcc_verify_table_as_typed_root@@Base+0x148>
   132b0:	tst	ip, #1
   132b4:	bne	13334 <flatcc_verify_table_as_typed_root@@Base+0x148>
   132b8:	add	lr, ip, #2
   132bc:	cmp	r1, lr
   132c0:	movcc	r0, #27
   132c4:	bcc	13270 <flatcc_verify_table_as_typed_root@@Base+0x84>
   132c8:	ldrh	r4, [r0, ip]
   132cc:	add	r5, r0, ip
   132d0:	add	ip, r4, ip
   132d4:	cmp	r1, ip
   132d8:	strh	r4, [sp, #22]
   132dc:	bcc	1333c <flatcc_verify_table_as_typed_root@@Base+0x150>
   132e0:	tst	r4, #1
   132e4:	bne	1333c <flatcc_verify_table_as_typed_root@@Base+0x150>
   132e8:	cmp	r4, #3
   132ec:	movls	r0, #28
   132f0:	bls	13270 <flatcc_verify_table_as_typed_root@@Base+0x84>
   132f4:	ldrh	ip, [r0, lr]
   132f8:	sub	r2, r1, r2
   132fc:	cmp	r2, ip
   13300:	strh	ip, [sp, #20]
   13304:	movcc	r0, #20
   13308:	bcc	13270 <flatcc_verify_table_as_typed_root@@Base+0x84>
   1330c:	mov	r2, r0
   13310:	mov	r0, sp
   13314:	str	r5, [sp, #12]
   13318:	str	r2, [sp]
   1331c:	str	r1, [sp, #4]
   13320:	blx	r3
   13324:	b	13270 <flatcc_verify_table_as_typed_root@@Base+0x84>
   13328:	mov	r0, #15
   1332c:	add	sp, sp, #28
   13330:	pop	{r4, r5, pc}
   13334:	mov	r0, #29
   13338:	b	13270 <flatcc_verify_table_as_typed_root@@Base+0x84>
   1333c:	mov	r0, #30
   13340:	b	13270 <flatcc_verify_table_as_typed_root@@Base+0x84>

00013344 <flatcc_verify_struct_as_nested_root@@Base>:
   13344:	add	ip, r1, #2
   13348:	push	{r4, r5, r6, r7, r8, lr}
   1334c:	lsl	ip, ip, #1
   13350:	ldrh	lr, [r0, #22]
   13354:	sub	sp, sp, #16
   13358:	uxth	ip, ip
   1335c:	cmp	lr, ip
   13360:	ldr	r5, [sp, #40]	; 0x28
   13364:	ldrh	r4, [sp, #44]	; 0x2c
   13368:	bls	133ac <flatcc_verify_struct_as_nested_root@@Base+0x68>
   1336c:	ldr	lr, [r0, #12]
   13370:	ldrh	ip, [lr, ip]
   13374:	cmp	ip, #0
   13378:	beq	133ac <flatcc_verify_struct_as_nested_root@@Base+0x68>
   1337c:	ldrh	lr, [r0, #20]
   13380:	add	r6, ip, #4
   13384:	cmp	r6, lr
   13388:	bls	133c0 <flatcc_verify_struct_as_nested_root@@Base+0x7c>
   1338c:	mvn	lr, #0
   13390:	mov	ip, #1
   13394:	mov	r3, r4
   13398:	str	lr, [sp, #44]	; 0x2c
   1339c:	str	ip, [sp, #40]	; 0x28
   133a0:	add	sp, sp, #16
   133a4:	pop	{r4, r5, r6, r7, r8, lr}
   133a8:	b	12494 <flatcc_verify_vector_field@@Base>
   133ac:	cmp	r2, #0
   133b0:	bne	1338c <flatcc_verify_struct_as_nested_root@@Base+0x48>
   133b4:	mov	r0, #0
   133b8:	add	sp, sp, #16
   133bc:	pop	{r4, r5, r6, r7, r8, pc}
   133c0:	ldr	lr, [r0, #16]
   133c4:	add	ip, ip, lr
   133c8:	tst	ip, #3
   133cc:	bne	1338c <flatcc_verify_struct_as_nested_root@@Base+0x48>
   133d0:	cmp	ip, #0
   133d4:	beq	134d0 <flatcc_verify_struct_as_nested_root@@Base+0x18c>
   133d8:	ldr	r7, [r0]
   133dc:	add	lr, r7, ip
   133e0:	ldr	r6, [r7, ip]
   133e4:	add	r6, ip, r6
   133e8:	cmp	r6, ip
   133ec:	bls	1338c <flatcc_verify_struct_as_nested_root@@Base+0x48>
   133f0:	ldr	ip, [r0, #4]
   133f4:	add	r8, r6, #4
   133f8:	cmp	ip, r8
   133fc:	bcc	1338c <flatcc_verify_struct_as_nested_root@@Base+0x48>
   13400:	tst	r8, #3
   13404:	bne	1338c <flatcc_verify_struct_as_nested_root@@Base+0x48>
   13408:	ldr	r6, [r7, r6]
   1340c:	sub	ip, ip, r8
   13410:	mul	r6, r6, r4
   13414:	cmp	ip, r6
   13418:	bcc	1338c <flatcc_verify_struct_as_nested_root@@Base+0x48>
   1341c:	ldr	r2, [lr]
   13420:	add	r6, lr, r2
   13424:	ldr	r7, [lr, r2]
   13428:	and	r0, r6, #3
   1342c:	sub	r2, r7, #8
   13430:	cmn	r2, #17
   13434:	movls	r2, #0
   13438:	movhi	r2, #1
   1343c:	ands	r1, r6, #3
   13440:	movne	r1, #1
   13444:	orrs	r1, r2, r1
   13448:	bne	134e0 <flatcc_verify_struct_as_nested_root@@Base+0x19c>
   1344c:	cmp	r3, #0
   13450:	beq	13484 <flatcc_verify_struct_as_nested_root@@Base+0x140>
   13454:	add	r0, sp, #16
   13458:	mov	r2, #4
   1345c:	str	r1, [r0, #-4]!
   13460:	mov	r1, r3
   13464:	str	r3, [sp, #4]
   13468:	bl	10da0 <strncpy@plt>
   1346c:	ldr	r2, [sp, #12]
   13470:	ldr	r1, [r6, #8]
   13474:	ldr	r3, [sp, #4]
   13478:	cmp	r2, #0
   1347c:	cmpne	r1, r2
   13480:	bne	134ec <flatcc_verify_struct_as_nested_root@@Base+0x1a8>
   13484:	ldr	r2, [r6, #4]
   13488:	clz	r3, r2
   1348c:	lsr	r3, r3, #5
   13490:	cmp	r7, r2
   13494:	orrcc	r3, r3, #1
   13498:	cmp	r3, #0
   1349c:	movne	r0, #18
   134a0:	bne	133b8 <flatcc_verify_struct_as_nested_root@@Base+0x74>
   134a4:	adds	r5, r5, r2
   134a8:	movcs	r0, #10
   134ac:	bcs	133b8 <flatcc_verify_struct_as_nested_root@@Base+0x74>
   134b0:	cmp	r7, r5
   134b4:	movcc	r0, #9
   134b8:	bcc	133b8 <flatcc_verify_struct_as_nested_root@@Base+0x74>
   134bc:	sub	r4, r4, #1
   134c0:	tst	r4, r2
   134c4:	movne	r0, #11
   134c8:	bne	133b8 <flatcc_verify_struct_as_nested_root@@Base+0x74>
   134cc:	b	133b4 <flatcc_verify_struct_as_nested_root@@Base+0x70>
   134d0:	ldr	lr, [r0]
   134d4:	cmp	lr, #0
   134d8:	bne	1341c <flatcc_verify_struct_as_nested_root@@Base+0xd8>
   134dc:	b	133b4 <flatcc_verify_struct_as_nested_root@@Base+0x70>
   134e0:	cmp	r0, #0
   134e4:	movne	r0, #5
   134e8:	bne	133b8 <flatcc_verify_struct_as_nested_root@@Base+0x74>
   134ec:	cmn	r7, #9
   134f0:	movhi	r0, #6
   134f4:	bhi	133b8 <flatcc_verify_struct_as_nested_root@@Base+0x74>
   134f8:	cmp	r7, #7
   134fc:	movls	r0, #1
   13500:	bls	133b8 <flatcc_verify_struct_as_nested_root@@Base+0x74>
   13504:	cmp	r3, #0
   13508:	beq	133b4 <flatcc_verify_struct_as_nested_root@@Base+0x70>
   1350c:	add	r0, sp, #16
   13510:	mov	r2, #0
   13514:	mov	r1, r3
   13518:	str	r2, [r0, #-4]!
   1351c:	mov	r2, #4
   13520:	bl	10da0 <strncpy@plt>
   13524:	ldr	r2, [r6, #8]
   13528:	ldr	r3, [sp, #12]
   1352c:	cmp	r3, #0
   13530:	cmpne	r2, r3
   13534:	movne	r0, #2
   13538:	bne	133b8 <flatcc_verify_struct_as_nested_root@@Base+0x74>
   1353c:	b	133b4 <flatcc_verify_struct_as_nested_root@@Base+0x70>

00013540 <flatcc_verify_table_as_nested_root@@Base>:
   13540:	push	{r4, r5, r6, r7, lr}
   13544:	mov	r4, r0
   13548:	add	r0, r1, #2
   1354c:	ldrh	ip, [r4, #22]
   13550:	lsl	r0, r0, #1
   13554:	sub	sp, sp, #44	; 0x2c
   13558:	uxth	r0, r0
   1355c:	cmp	ip, r0
   13560:	ldrh	r5, [sp, #64]	; 0x40
   13564:	bls	135a8 <flatcc_verify_table_as_nested_root@@Base+0x68>
   13568:	ldr	ip, [r4, #12]
   1356c:	ldrh	r0, [ip, r0]
   13570:	cmp	r0, #0
   13574:	beq	135a8 <flatcc_verify_table_as_nested_root@@Base+0x68>
   13578:	ldrh	ip, [r4, #20]
   1357c:	add	lr, r0, #4
   13580:	cmp	lr, ip
   13584:	bls	135bc <flatcc_verify_table_as_nested_root@@Base+0x7c>
   13588:	mvn	lr, #0
   1358c:	mov	ip, #1
   13590:	mov	r3, r5
   13594:	mov	r0, r4
   13598:	stm	sp, {ip, lr}
   1359c:	bl	12494 <flatcc_verify_vector_field@@Base>
   135a0:	add	sp, sp, #44	; 0x2c
   135a4:	pop	{r4, r5, r6, r7, pc}
   135a8:	cmp	r2, #0
   135ac:	bne	13588 <flatcc_verify_table_as_nested_root@@Base+0x48>
   135b0:	mov	r0, #0
   135b4:	add	sp, sp, #44	; 0x2c
   135b8:	pop	{r4, r5, r6, r7, pc}
   135bc:	ldr	ip, [r4, #16]
   135c0:	add	r0, r0, ip
   135c4:	tst	r0, #3
   135c8:	bne	13588 <flatcc_verify_table_as_nested_root@@Base+0x48>
   135cc:	cmp	r0, #0
   135d0:	beq	13750 <flatcc_verify_table_as_nested_root@@Base+0x210>
   135d4:	ldr	r6, [r4]
   135d8:	add	ip, r6, r0
   135dc:	ldr	lr, [r6, r0]
   135e0:	add	lr, r0, lr
   135e4:	cmp	lr, r0
   135e8:	bls	13588 <flatcc_verify_table_as_nested_root@@Base+0x48>
   135ec:	ldr	r0, [r4, #4]
   135f0:	add	r7, lr, #4
   135f4:	cmp	r0, r7
   135f8:	bcc	13588 <flatcc_verify_table_as_nested_root@@Base+0x48>
   135fc:	tst	r7, #3
   13600:	bne	13588 <flatcc_verify_table_as_nested_root@@Base+0x48>
   13604:	ldr	lr, [r6, lr]
   13608:	sub	r0, r0, r7
   1360c:	mul	lr, lr, r5
   13610:	cmp	r0, lr
   13614:	bcc	13588 <flatcc_verify_table_as_nested_root@@Base+0x48>
   13618:	ldr	r2, [ip]
   1361c:	add	r6, ip, r2
   13620:	ldr	r7, [ip, r2]
   13624:	add	r5, r6, #4
   13628:	sub	r2, r7, #8
   1362c:	cmn	r2, #17
   13630:	movls	r2, #0
   13634:	movhi	r2, #1
   13638:	ands	r1, r5, #3
   1363c:	movne	r1, #1
   13640:	orrs	r1, r2, r1
   13644:	and	r2, r5, #3
   13648:	bne	13760 <flatcc_verify_table_as_nested_root@@Base+0x220>
   1364c:	cmp	r3, #0
   13650:	beq	13684 <flatcc_verify_table_as_nested_root@@Base+0x144>
   13654:	add	r0, sp, #40	; 0x28
   13658:	mov	r2, #4
   1365c:	str	r1, [r0, #-24]!	; 0xffffffe8
   13660:	mov	r1, r3
   13664:	str	r3, [sp, #12]
   13668:	bl	10da0 <strncpy@plt>
   1366c:	ldr	r2, [sp, #16]
   13670:	ldr	r1, [r6, #8]
   13674:	ldr	r3, [sp, #12]
   13678:	cmp	r2, #0
   1367c:	cmpne	r1, r2
   13680:	bne	1376c <flatcc_verify_table_as_nested_root@@Base+0x22c>
   13684:	ldr	r3, [r4, #8]
   13688:	ldr	r2, [r6, #4]
   1368c:	sub	r3, r3, #1
   13690:	cmp	r3, #0
   13694:	str	r3, [sp, #24]
   13698:	moveq	r0, #3
   1369c:	beq	135a0 <flatcc_verify_table_as_nested_root@@Base+0x60>
   136a0:	cmp	r2, #0
   136a4:	beq	13744 <flatcc_verify_table_as_nested_root@@Base+0x204>
   136a8:	add	r3, r2, #4
   136ac:	cmp	r7, r3
   136b0:	bcc	13744 <flatcc_verify_table_as_nested_root@@Base+0x204>
   136b4:	tst	r2, #3
   136b8:	bne	13744 <flatcc_verify_table_as_nested_root@@Base+0x204>
   136bc:	str	r2, [sp, #32]
   136c0:	ldr	r3, [r5, r2]
   136c4:	subs	r3, r2, r3
   136c8:	bmi	137c0 <flatcc_verify_table_as_nested_root@@Base+0x280>
   136cc:	tst	r3, #1
   136d0:	bne	137c0 <flatcc_verify_table_as_nested_root@@Base+0x280>
   136d4:	add	r1, r3, #2
   136d8:	cmp	r7, r1
   136dc:	movcc	r0, #27
   136e0:	bcc	135a0 <flatcc_verify_table_as_nested_root@@Base+0x60>
   136e4:	ldrh	r0, [r5, r3]
   136e8:	add	ip, r5, r3
   136ec:	add	r3, r0, r3
   136f0:	cmp	r7, r3
   136f4:	strh	r0, [sp, #38]	; 0x26
   136f8:	bcc	137c8 <flatcc_verify_table_as_nested_root@@Base+0x288>
   136fc:	tst	r0, #1
   13700:	bne	137c8 <flatcc_verify_table_as_nested_root@@Base+0x288>
   13704:	cmp	r0, #3
   13708:	movls	r0, #28
   1370c:	bls	135a0 <flatcc_verify_table_as_nested_root@@Base+0x60>
   13710:	ldrh	r3, [r5, r1]
   13714:	sub	r2, r7, r2
   13718:	cmp	r2, r3
   1371c:	strh	r3, [sp, #36]	; 0x24
   13720:	movcc	r0, #20
   13724:	bcc	135a0 <flatcc_verify_table_as_nested_root@@Base+0x60>
   13728:	add	r0, sp, #16
   1372c:	ldr	r3, [sp, #68]	; 0x44
   13730:	str	ip, [sp, #28]
   13734:	str	r5, [sp, #16]
   13738:	str	r7, [sp, #20]
   1373c:	blx	r3
   13740:	b	135a0 <flatcc_verify_table_as_nested_root@@Base+0x60>
   13744:	mov	r0, #15
   13748:	add	sp, sp, #44	; 0x2c
   1374c:	pop	{r4, r5, r6, r7, pc}
   13750:	ldr	ip, [r4]
   13754:	cmp	ip, #0
   13758:	bne	13618 <flatcc_verify_table_as_nested_root@@Base+0xd8>
   1375c:	b	135b0 <flatcc_verify_table_as_nested_root@@Base+0x70>
   13760:	cmp	r2, #0
   13764:	movne	r0, #5
   13768:	bne	135a0 <flatcc_verify_table_as_nested_root@@Base+0x60>
   1376c:	cmn	r7, #9
   13770:	movhi	r0, #6
   13774:	bhi	135a0 <flatcc_verify_table_as_nested_root@@Base+0x60>
   13778:	cmp	r7, #7
   1377c:	movls	r0, #1
   13780:	bls	135a0 <flatcc_verify_table_as_nested_root@@Base+0x60>
   13784:	cmp	r3, #0
   13788:	beq	135b0 <flatcc_verify_table_as_nested_root@@Base+0x70>
   1378c:	add	r0, sp, #40	; 0x28
   13790:	mov	r2, #0
   13794:	mov	r1, r3
   13798:	str	r2, [r0, #-24]!	; 0xffffffe8
   1379c:	mov	r2, #4
   137a0:	bl	10da0 <strncpy@plt>
   137a4:	ldr	r2, [r6, #8]
   137a8:	ldr	r3, [sp, #16]
   137ac:	cmp	r3, #0
   137b0:	cmpne	r2, r3
   137b4:	movne	r0, #2
   137b8:	bne	135a0 <flatcc_verify_table_as_nested_root@@Base+0x60>
   137bc:	b	135b0 <flatcc_verify_table_as_nested_root@@Base+0x70>
   137c0:	mov	r0, #29
   137c4:	b	135a0 <flatcc_verify_table_as_nested_root@@Base+0x60>
   137c8:	mov	r0, #30
   137cc:	b	135a0 <flatcc_verify_table_as_nested_root@@Base+0x60>

000137d0 <flatcc_verify_union_field@@Base>:
   137d0:	sub	ip, r1, #1
   137d4:	push	{r4, r5, r6, r7, lr}
   137d8:	uxth	ip, ip
   137dc:	add	ip, ip, #2
   137e0:	ldrh	lr, [r0, #22]
   137e4:	lsl	ip, ip, #1
   137e8:	sub	sp, sp, #28
   137ec:	uxth	ip, ip
   137f0:	cmp	ip, lr
   137f4:	ldr	r4, [r0, #12]
   137f8:	bcs	13824 <flatcc_verify_union_field@@Base+0x54>
   137fc:	ldrh	ip, [r4, ip]
   13800:	cmp	ip, #0
   13804:	beq	13824 <flatcc_verify_union_field@@Base+0x54>
   13808:	ldrh	r5, [r0, #20]
   1380c:	add	r6, ip, #1
   13810:	cmp	r6, r5
   13814:	bls	13864 <flatcc_verify_union_field@@Base+0x94>
   13818:	mov	r0, #13
   1381c:	add	sp, sp, #28
   13820:	pop	{r4, r5, r6, r7, pc}
   13824:	add	r1, r1, #2
   13828:	lsl	r1, r1, #1
   1382c:	uxth	r1, r1
   13830:	cmp	lr, r1
   13834:	bhi	1384c <flatcc_verify_union_field@@Base+0x7c>
   13838:	cmp	r2, #0
   1383c:	movne	r0, #21
   13840:	moveq	r0, #0
   13844:	add	sp, sp, #28
   13848:	pop	{r4, r5, r6, r7, pc}
   1384c:	ldrh	r3, [r4, r1]
   13850:	cmp	r3, #0
   13854:	movne	r0, #23
   13858:	beq	13838 <flatcc_verify_union_field@@Base+0x68>
   1385c:	add	sp, sp, #28
   13860:	pop	{r4, r5, r6, r7, pc}
   13864:	add	r1, r1, #2
   13868:	ldr	r6, [r0]
   1386c:	lsl	r1, r1, #1
   13870:	uxth	r1, r1
   13874:	cmp	lr, r1
   13878:	bls	138b0 <flatcc_verify_union_field@@Base+0xe0>
   1387c:	ldr	r7, [r0, #16]
   13880:	ldrh	r4, [r4, r1]
   13884:	add	ip, r7, ip
   13888:	ldrb	r1, [r6, ip]
   1388c:	adds	lr, r1, #0
   13890:	movne	lr, #1
   13894:	cmp	r4, #0
   13898:	orreq	lr, lr, #1
   1389c:	cmp	lr, #0
   138a0:	bne	138d4 <flatcc_verify_union_field@@Base+0x104>
   138a4:	mov	r0, #24
   138a8:	add	sp, sp, #28
   138ac:	pop	{r4, r5, r6, r7, pc}
   138b0:	ldr	r3, [r0, #16]
   138b4:	add	ip, r6, ip
   138b8:	ldrb	r0, [ip, r3]
   138bc:	cmp	r0, #0
   138c0:	beq	1381c <flatcc_verify_union_field@@Base+0x4c>
   138c4:	cmp	r2, #0
   138c8:	movne	r0, #4
   138cc:	moveq	r0, #0
   138d0:	b	1381c <flatcc_verify_union_field@@Base+0x4c>
   138d4:	cmp	r1, #0
   138d8:	beq	13934 <flatcc_verify_union_field@@Base+0x164>
   138dc:	cmp	r4, #0
   138e0:	beq	138c4 <flatcc_verify_union_field@@Base+0xf4>
   138e4:	add	r2, r4, #4
   138e8:	cmp	r5, r2
   138ec:	bcc	13818 <flatcc_verify_union_field@@Base+0x48>
   138f0:	add	r7, r7, r4
   138f4:	tst	r7, #3
   138f8:	movne	r0, #12
   138fc:	bne	1381c <flatcc_verify_union_field@@Base+0x4c>
   13900:	cmp	r7, #0
   13904:	beq	13934 <flatcc_verify_union_field@@Base+0x164>
   13908:	ldmib	r0, {r1, r2}
   1390c:	str	r7, [sp, #16]
   13910:	mov	r0, sp
   13914:	stmib	sp, {r1, r2}
   13918:	ldr	r2, [r6, r7]
   1391c:	str	r6, [sp]
   13920:	str	r2, [sp, #20]
   13924:	ldrb	r2, [r6, ip]
   13928:	strb	r2, [sp, #12]
   1392c:	blx	r3
   13930:	b	1381c <flatcc_verify_union_field@@Base+0x4c>
   13934:	mov	r0, #0
   13938:	b	1381c <flatcc_verify_union_field@@Base+0x4c>

0001393c <flatcc_verify_union_vector_field@@Base>:
   1393c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13940:	sub	r4, r1, #1
   13944:	ldrh	lr, [r0, #22]
   13948:	uxth	r4, r4
   1394c:	add	ip, r4, #2
   13950:	sub	sp, sp, #44	; 0x2c
   13954:	lsl	ip, ip, #1
   13958:	ldr	r5, [r0, #12]
   1395c:	uxth	ip, ip
   13960:	cmp	ip, lr
   13964:	bcs	13a94 <flatcc_verify_union_vector_field@@Base+0x158>
   13968:	ldrh	ip, [r5, ip]
   1396c:	cmp	ip, #0
   13970:	beq	13a94 <flatcc_verify_union_vector_field@@Base+0x158>
   13974:	ldrh	r7, [r0, #20]
   13978:	add	r6, ip, #4
   1397c:	cmp	r6, r7
   13980:	bhi	13abc <flatcc_verify_union_vector_field@@Base+0x180>
   13984:	ldr	r8, [r0, #16]
   13988:	add	ip, ip, r8
   1398c:	tst	ip, #3
   13990:	bne	13abc <flatcc_verify_union_vector_field@@Base+0x180>
   13994:	cmp	ip, #0
   13998:	beq	13bd0 <flatcc_verify_union_vector_field@@Base+0x294>
   1399c:	ldr	r6, [r0]
   139a0:	ldr	r9, [r6, ip]
   139a4:	add	r9, ip, r9
   139a8:	cmp	r9, ip
   139ac:	bls	13abc <flatcc_verify_union_vector_field@@Base+0x180>
   139b0:	ldr	sl, [r0, #4]
   139b4:	add	fp, r9, #4
   139b8:	cmp	sl, fp
   139bc:	bcc	13abc <flatcc_verify_union_vector_field@@Base+0x180>
   139c0:	tst	fp, #3
   139c4:	bne	13abc <flatcc_verify_union_vector_field@@Base+0x180>
   139c8:	ldr	r9, [r6, r9]
   139cc:	sub	sl, sl, fp
   139d0:	cmp	r9, sl
   139d4:	bhi	13abc <flatcc_verify_union_vector_field@@Base+0x180>
   139d8:	adds	ip, r6, ip
   139dc:	beq	13a88 <flatcc_verify_union_vector_field@@Base+0x14c>
   139e0:	add	r1, r1, #2
   139e4:	lsl	r1, r1, #1
   139e8:	uxth	r1, r1
   139ec:	cmp	lr, r1
   139f0:	bls	13aec <flatcc_verify_union_vector_field@@Base+0x1b0>
   139f4:	ldrh	r1, [r5, r1]
   139f8:	cmp	r1, #0
   139fc:	beq	13aec <flatcc_verify_union_vector_field@@Base+0x1b0>
   13a00:	add	r2, r1, #4
   13a04:	cmp	r2, r7
   13a08:	movhi	r0, #13
   13a0c:	bhi	13ad0 <flatcc_verify_union_vector_field@@Base+0x194>
   13a10:	add	r2, r1, r8
   13a14:	tst	r2, #3
   13a18:	movne	r0, #12
   13a1c:	bne	13ad0 <flatcc_verify_union_vector_field@@Base+0x194>
   13a20:	cmp	r2, #0
   13a24:	beq	13a88 <flatcc_verify_union_vector_field@@Base+0x14c>
   13a28:	ldr	lr, [r0, #8]
   13a2c:	cmp	lr, #0
   13a30:	movle	r0, #3
   13a34:	ble	13ad0 <flatcc_verify_union_vector_field@@Base+0x194>
   13a38:	ldr	r1, [r6, r2]
   13a3c:	add	r1, r2, r1
   13a40:	cmp	r2, r1
   13a44:	bcs	13b00 <flatcc_verify_union_vector_field@@Base+0x1c4>
   13a48:	ldr	r9, [r0, #4]
   13a4c:	add	r4, r1, #4
   13a50:	cmp	r9, r4
   13a54:	bcc	13b00 <flatcc_verify_union_vector_field@@Base+0x1c4>
   13a58:	ands	r2, r4, #3
   13a5c:	beq	13b08 <flatcc_verify_union_vector_field@@Base+0x1cc>
   13a60:	cmp	r2, #0
   13a64:	bne	13b00 <flatcc_verify_union_vector_field@@Base+0x1c4>
   13a68:	ldr	r3, [r6, r1]
   13a6c:	cmn	r3, #-1073741823	; 0xc0000001
   13a70:	movhi	r0, #25
   13a74:	bhi	13ad0 <flatcc_verify_union_vector_field@@Base+0x194>
   13a78:	sub	r4, r9, r4
   13a7c:	cmp	r4, r3, lsl #2
   13a80:	movcc	r0, #26
   13a84:	bcc	13ad0 <flatcc_verify_union_vector_field@@Base+0x194>
   13a88:	mov	r0, #0
   13a8c:	add	sp, sp, #44	; 0x2c
   13a90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13a94:	add	r3, r1, #2
   13a98:	lsl	r3, r3, #1
   13a9c:	uxth	r3, r3
   13aa0:	cmp	lr, r3
   13aa4:	bls	13ad8 <flatcc_verify_union_vector_field@@Base+0x19c>
   13aa8:	ldrh	r3, [r5, r3]
   13aac:	cmp	r3, #0
   13ab0:	beq	13ad8 <flatcc_verify_union_vector_field@@Base+0x19c>
   13ab4:	cmp	r2, #0
   13ab8:	beq	13a88 <flatcc_verify_union_vector_field@@Base+0x14c>
   13abc:	mvn	ip, #0
   13ac0:	mov	r3, #1
   13ac4:	mov	r1, r4
   13ac8:	stm	sp, {r3, ip}
   13acc:	bl	12494 <flatcc_verify_vector_field@@Base>
   13ad0:	add	sp, sp, #44	; 0x2c
   13ad4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ad8:	cmp	r2, #0
   13adc:	movne	r0, #22
   13ae0:	moveq	r0, #0
   13ae4:	add	sp, sp, #44	; 0x2c
   13ae8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13aec:	cmp	r2, #0
   13af0:	movne	r0, #4
   13af4:	moveq	r0, #0
   13af8:	add	sp, sp, #44	; 0x2c
   13afc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13b00:	mov	r0, #16
   13b04:	b	13ad0 <flatcc_verify_union_vector_field@@Base+0x194>
   13b08:	ldr	r7, [r6, r1]
   13b0c:	add	r2, r6, r1
   13b10:	cmn	r7, #-1073741823	; 0xc0000001
   13b14:	bhi	13a68 <flatcc_verify_union_vector_field@@Base+0x12c>
   13b18:	lsl	r0, r7, #2
   13b1c:	sub	r5, r9, r4
   13b20:	cmp	r5, r0
   13b24:	bcc	13a68 <flatcc_verify_union_vector_field@@Base+0x12c>
   13b28:	ldr	r8, [ip]
   13b2c:	add	r5, ip, r8
   13b30:	ldr	ip, [ip, r8]
   13b34:	cmp	ip, r7
   13b38:	movne	r0, #34	; 0x22
   13b3c:	bne	13ad0 <flatcc_verify_union_vector_field@@Base+0x194>
   13b40:	sub	lr, lr, #1
   13b44:	cmp	ip, #0
   13b48:	str	lr, [sp, #24]
   13b4c:	str	r6, [sp, #16]
   13b50:	str	r9, [sp, #20]
   13b54:	beq	13a88 <flatcc_verify_union_vector_field@@Base+0x14c>
   13b58:	add	r1, r1, r0
   13b5c:	add	r7, r6, r1
   13b60:	add	r5, r5, #4
   13b64:	mov	r6, r2
   13b68:	b	13b88 <flatcc_verify_union_vector_field@@Base+0x24c>
   13b6c:	ldrb	r2, [r5]
   13b70:	cmp	r2, #0
   13b74:	bne	13bd8 <flatcc_verify_union_vector_field@@Base+0x29c>
   13b78:	cmp	r7, r6
   13b7c:	add	r4, r4, #4
   13b80:	add	r5, r5, #1
   13b84:	beq	13a88 <flatcc_verify_union_vector_field@@Base+0x14c>
   13b88:	ldr	r2, [r6, #4]!
   13b8c:	add	r0, sp, #16
   13b90:	cmp	r2, #0
   13b94:	beq	13b6c <flatcc_verify_union_vector_field@@Base+0x230>
   13b98:	ldrb	r1, [r5]
   13b9c:	cmp	r1, #0
   13ba0:	beq	13be0 <flatcc_verify_union_vector_field@@Base+0x2a4>
   13ba4:	str	r3, [sp, #12]
   13ba8:	strb	r1, [sp, #28]
   13bac:	str	r4, [sp, #32]
   13bb0:	str	r2, [sp, #36]	; 0x24
   13bb4:	blx	r3
   13bb8:	ldr	r3, [sp, #12]
   13bbc:	cmp	r0, #0
   13bc0:	beq	13b78 <flatcc_verify_union_vector_field@@Base+0x23c>
   13bc4:	add	r0, sp, #16
   13bc8:	blx	r3
   13bcc:	b	13ad0 <flatcc_verify_union_vector_field@@Base+0x194>
   13bd0:	ldr	r6, [r0]
   13bd4:	b	139d8 <flatcc_verify_union_vector_field@@Base+0x9c>
   13bd8:	mov	r0, #32
   13bdc:	b	13ad0 <flatcc_verify_union_vector_field@@Base+0x194>
   13be0:	mov	r0, #33	; 0x21
   13be4:	b	13ad0 <flatcc_verify_union_vector_field@@Base+0x194>

00013be8 <__libc_csu_init@@Base>:
   13be8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13bec:	mov	r7, r0
   13bf0:	ldr	r6, [pc, #72]	; 13c40 <__libc_csu_init@@Base+0x58>
   13bf4:	ldr	r5, [pc, #72]	; 13c44 <__libc_csu_init@@Base+0x5c>
   13bf8:	add	r6, pc, r6
   13bfc:	add	r5, pc, r5
   13c00:	sub	r6, r6, r5
   13c04:	mov	r8, r1
   13c08:	mov	r9, r2
   13c0c:	bl	10cc0 <strcmp@plt-0x20>
   13c10:	asrs	r6, r6, #2
   13c14:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   13c18:	mov	r4, #0
   13c1c:	add	r4, r4, #1
   13c20:	ldr	r3, [r5], #4
   13c24:	mov	r2, r9
   13c28:	mov	r1, r8
   13c2c:	mov	r0, r7
   13c30:	blx	r3
   13c34:	cmp	r6, r4
   13c38:	bne	13c1c <__libc_csu_init@@Base+0x34>
   13c3c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13c40:	andeq	r1, r1, r0, lsl r3
   13c44:	andeq	r1, r1, r8, lsl #6

00013c48 <__libc_csu_fini@@Base>:
   13c48:	bx	lr

Disassembly of section .fini:

00013c4c <.fini>:
   13c4c:	push	{r3, lr}
   13c50:	pop	{r3, pc}
