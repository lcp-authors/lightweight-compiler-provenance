
../repos/coreutils/src/sort:     file format elf32-littlearm


Disassembly of section .init:

000119d0 <.init>:
   119d0:	push	{r3, lr}
   119d4:	bl	14ea0 <__assert_fail@plt+0x2f58>
   119d8:	pop	{r3, pc}

Disassembly of section .plt:

000119dc <pthread_mutex_unlock@plt-0x14>:
   119dc:	push	{lr}		; (str lr, [sp, #-4]!)
   119e0:	ldr	lr, [pc, #4]	; 119ec <pthread_mutex_unlock@plt-0x4>
   119e4:	add	lr, pc, lr
   119e8:	ldr	pc, [lr, #8]!
   119ec:	andeq	r3, r2, r4, lsl r6

000119f0 <pthread_mutex_unlock@plt>:
   119f0:	add	ip, pc, #0, 12
   119f4:	add	ip, ip, #143360	; 0x23000
   119f8:	ldr	pc, [ip, #1556]!	; 0x614

000119fc <fdopen@plt>:
   119fc:	add	ip, pc, #0, 12
   11a00:	add	ip, ip, #143360	; 0x23000
   11a04:	ldr	pc, [ip, #1548]!	; 0x60c

00011a08 <calloc@plt>:
   11a08:	add	ip, pc, #0, 12
   11a0c:	add	ip, ip, #143360	; 0x23000
   11a10:	ldr	pc, [ip, #1540]!	; 0x604

00011a14 <fputs_unlocked@plt>:
   11a14:	add	ip, pc, #0, 12
   11a18:	add	ip, ip, #143360	; 0x23000
   11a1c:	ldr	pc, [ip, #1532]!	; 0x5fc

00011a20 <raise@plt>:
   11a20:	add	ip, pc, #0, 12
   11a24:	add	ip, ip, #143360	; 0x23000
   11a28:	ldr	pc, [ip, #1524]!	; 0x5f4

00011a2c <strcmp@plt>:
   11a2c:	add	ip, pc, #0, 12
   11a30:	add	ip, ip, #143360	; 0x23000
   11a34:	ldr	pc, [ip, #1516]!	; 0x5ec

00011a38 <strtol@plt>:
   11a38:	add	ip, pc, #0, 12
   11a3c:	add	ip, ip, #143360	; 0x23000
   11a40:	ldr	pc, [ip, #1508]!	; 0x5e4

00011a44 <posix_fadvise64@plt>:
   11a44:	add	ip, pc, #0, 12
   11a48:	add	ip, ip, #143360	; 0x23000
   11a4c:	ldr	pc, [ip, #1500]!	; 0x5dc

00011a50 <pause@plt>:
   11a50:	add	ip, pc, #0, 12
   11a54:	add	ip, ip, #143360	; 0x23000
   11a58:	ldr	pc, [ip, #1492]!	; 0x5d4

00011a5c <pthread_mutex_destroy@plt>:
   11a5c:	add	ip, pc, #0, 12
   11a60:	add	ip, ip, #143360	; 0x23000
   11a64:	ldr	pc, [ip, #1484]!	; 0x5cc

00011a68 <fflush@plt>:
   11a68:	add	ip, pc, #0, 12
   11a6c:	add	ip, ip, #143360	; 0x23000
   11a70:	ldr	pc, [ip, #1476]!	; 0x5c4

00011a74 <wcwidth@plt>:
   11a74:	add	ip, pc, #0, 12
   11a78:	add	ip, ip, #143360	; 0x23000
   11a7c:	ldr	pc, [ip, #1468]!	; 0x5bc

00011a80 <memmove@plt>:
   11a80:	add	ip, pc, #0, 12
   11a84:	add	ip, ip, #143360	; 0x23000
   11a88:	ldr	pc, [ip, #1460]!	; 0x5b4

00011a8c <free@plt>:
   11a8c:	add	ip, pc, #0, 12
   11a90:	add	ip, ip, #143360	; 0x23000
   11a94:	ldr	pc, [ip, #1452]!	; 0x5ac

00011a98 <pthread_mutex_lock@plt>:
   11a98:	add	ip, pc, #0, 12
   11a9c:	add	ip, ip, #143360	; 0x23000
   11aa0:	ldr	pc, [ip, #1444]!	; 0x5a4

00011aa4 <nanosleep@plt>:
   11aa4:	add	ip, pc, #0, 12
   11aa8:	add	ip, ip, #143360	; 0x23000
   11aac:	ldr	pc, [ip, #1436]!	; 0x59c

00011ab0 <ferror@plt>:
   11ab0:	add	ip, pc, #0, 12
   11ab4:	add	ip, ip, #143360	; 0x23000
   11ab8:	ldr	pc, [ip, #1428]!	; 0x594

00011abc <_exit@plt>:
   11abc:	add	ip, pc, #0, 12
   11ac0:	add	ip, ip, #143360	; 0x23000
   11ac4:	ldr	pc, [ip, #1420]!	; 0x58c

00011ac8 <memcpy@plt>:
   11ac8:	add	ip, pc, #0, 12
   11acc:	add	ip, ip, #143360	; 0x23000
   11ad0:	ldr	pc, [ip, #1412]!	; 0x584

00011ad4 <execlp@plt>:
   11ad4:	add	ip, pc, #0, 12
   11ad8:	add	ip, ip, #143360	; 0x23000
   11adc:	ldr	pc, [ip, #1404]!	; 0x57c

00011ae0 <pthread_mutex_init@plt>:
   11ae0:	add	ip, pc, #0, 12
   11ae4:	add	ip, ip, #143360	; 0x23000
   11ae8:	ldr	pc, [ip, #1396]!	; 0x574

00011aec <__strtoull_internal@plt>:
   11aec:	add	ip, pc, #0, 12
   11af0:	add	ip, ip, #143360	; 0x23000
   11af4:	ldr	pc, [ip, #1388]!	; 0x56c

00011af8 <mbsinit@plt>:
   11af8:	add	ip, pc, #0, 12
   11afc:	add	ip, ip, #143360	; 0x23000
   11b00:	ldr	pc, [ip, #1380]!	; 0x564

00011b04 <signal@plt>:
   11b04:	add	ip, pc, #0, 12
   11b08:	add	ip, ip, #143360	; 0x23000
   11b0c:	ldr	pc, [ip, #1372]!	; 0x55c

00011b10 <__sched_cpucount@plt>:
   11b10:	add	ip, pc, #0, 12
   11b14:	add	ip, ip, #143360	; 0x23000
   11b18:	ldr	pc, [ip, #1364]!	; 0x554

00011b1c <strtold@plt>:
   11b1c:	add	ip, pc, #0, 12
   11b20:	add	ip, ip, #143360	; 0x23000
   11b24:	ldr	pc, [ip, #1356]!	; 0x54c

00011b28 <ftruncate64@plt>:
   11b28:	add	ip, pc, #0, 12
   11b2c:	add	ip, ip, #143360	; 0x23000
   11b30:	ldr	pc, [ip, #1348]!	; 0x544

00011b34 <fwrite_unlocked@plt>:
   11b34:	add	ip, pc, #0, 12
   11b38:	add	ip, ip, #143360	; 0x23000
   11b3c:	ldr	pc, [ip, #1340]!	; 0x53c

00011b40 <memcmp@plt>:
   11b40:	add	ip, pc, #0, 12
   11b44:	add	ip, ip, #143360	; 0x23000
   11b48:	ldr	pc, [ip, #1332]!	; 0x534

00011b4c <fputc_unlocked@plt>:
   11b4c:	add	ip, pc, #0, 12
   11b50:	add	ip, ip, #143360	; 0x23000
   11b54:	ldr	pc, [ip, #1324]!	; 0x52c

00011b58 <dcgettext@plt>:
   11b58:	add	ip, pc, #0, 12
   11b5c:	add	ip, ip, #143360	; 0x23000
   11b60:	ldr	pc, [ip, #1316]!	; 0x524

00011b64 <pthread_cond_init@plt>:
   11b64:	add	ip, pc, #0, 12
   11b68:	add	ip, ip, #143360	; 0x23000
   11b6c:	ldr	pc, [ip, #1308]!	; 0x51c

00011b70 <sysconf@plt>:
   11b70:	add	ip, pc, #0, 12
   11b74:	add	ip, ip, #143360	; 0x23000
   11b78:	ldr	pc, [ip, #1300]!	; 0x514

00011b7c <unlink@plt>:
   11b7c:	add	ip, pc, #0, 12
   11b80:	add	ip, ip, #143360	; 0x23000
   11b84:	ldr	pc, [ip, #1292]!	; 0x50c

00011b88 <dup2@plt>:
   11b88:	add	ip, pc, #0, 12
   11b8c:	add	ip, ip, #143360	; 0x23000
   11b90:	ldr	pc, [ip, #1284]!	; 0x504

00011b94 <getrlimit64@plt>:
   11b94:	add	ip, pc, #0, 12
   11b98:	add	ip, ip, #143360	; 0x23000
   11b9c:	ldr	pc, [ip, #1276]!	; 0x4fc

00011ba0 <realloc@plt>:
   11ba0:	add	ip, pc, #0, 12
   11ba4:	add	ip, ip, #143360	; 0x23000
   11ba8:	ldr	pc, [ip, #1268]!	; 0x4f4

00011bac <sigismember@plt>:
   11bac:	add	ip, pc, #0, 12
   11bb0:	add	ip, ip, #143360	; 0x23000
   11bb4:	ldr	pc, [ip, #1260]!	; 0x4ec

00011bb8 <textdomain@plt>:
   11bb8:	add	ip, pc, #0, 12
   11bbc:	add	ip, ip, #143360	; 0x23000
   11bc0:	ldr	pc, [ip, #1252]!	; 0x4e4

00011bc4 <iswcntrl@plt>:
   11bc4:	add	ip, pc, #0, 12
   11bc8:	add	ip, ip, #143360	; 0x23000
   11bcc:	ldr	pc, [ip, #1244]!	; 0x4dc

00011bd0 <pthread_cond_destroy@plt>:
   11bd0:	add	ip, pc, #0, 12
   11bd4:	add	ip, ip, #143360	; 0x23000
   11bd8:	ldr	pc, [ip, #1236]!	; 0x4d4

00011bdc <fflush_unlocked@plt>:
   11bdc:	add	ip, pc, #0, 12
   11be0:	add	ip, ip, #143360	; 0x23000
   11be4:	ldr	pc, [ip, #1228]!	; 0x4cc

00011be8 <iswprint@plt>:
   11be8:	add	ip, pc, #0, 12
   11bec:	add	ip, ip, #143360	; 0x23000
   11bf0:	ldr	pc, [ip, #1220]!	; 0x4c4

00011bf4 <__fxstat64@plt>:
   11bf4:	add	ip, pc, #0, 12
   11bf8:	add	ip, ip, #143360	; 0x23000
   11bfc:	ldr	pc, [ip, #1212]!	; 0x4bc

00011c00 <sigaction@plt>:
   11c00:	add	ip, pc, #0, 12
   11c04:	add	ip, ip, #143360	; 0x23000
   11c08:	ldr	pc, [ip, #1204]!	; 0x4b4

00011c0c <mkostemp64@plt>:
   11c0c:	add	ip, pc, #0, 12
   11c10:	add	ip, ip, #143360	; 0x23000
   11c14:	ldr	pc, [ip, #1196]!	; 0x4ac

00011c18 <fwrite@plt>:
   11c18:	add	ip, pc, #0, 12
   11c1c:	add	ip, ip, #143360	; 0x23000
   11c20:	ldr	pc, [ip, #1188]!	; 0x4a4

00011c24 <lseek64@plt>:
   11c24:	add	ip, pc, #0, 12
   11c28:	add	ip, ip, #143360	; 0x23000
   11c2c:	ldr	pc, [ip, #1180]!	; 0x49c

00011c30 <__stpcpy_chk@plt>:
   11c30:	add	ip, pc, #0, 12
   11c34:	add	ip, ip, #143360	; 0x23000
   11c38:	ldr	pc, [ip, #1172]!	; 0x494

00011c3c <waitpid@plt>:
   11c3c:	add	ip, pc, #0, 12
   11c40:	add	ip, ip, #143360	; 0x23000
   11c44:	ldr	pc, [ip, #1164]!	; 0x48c

00011c48 <__ctype_get_mb_cur_max@plt>:
   11c48:	add	ip, pc, #0, 12
   11c4c:	add	ip, ip, #143360	; 0x23000
   11c50:	ldr	pc, [ip, #1156]!	; 0x484

00011c54 <strcpy@plt>:
   11c54:	add	ip, pc, #0, 12
   11c58:	add	ip, ip, #143360	; 0x23000
   11c5c:	ldr	pc, [ip, #1148]!	; 0x47c

00011c60 <pthread_sigmask@plt>:
   11c60:	add	ip, pc, #0, 12
   11c64:	add	ip, ip, #143360	; 0x23000
   11c68:	ldr	pc, [ip, #1140]!	; 0x474

00011c6c <pthread_create@plt>:
   11c6c:	add	ip, pc, #0, 12
   11c70:	add	ip, ip, #143360	; 0x23000
   11c74:	ldr	pc, [ip, #1132]!	; 0x46c

00011c78 <__fpending@plt>:
   11c78:	add	ip, pc, #0, 12
   11c7c:	add	ip, ip, #143360	; 0x23000
   11c80:	ldr	pc, [ip, #1124]!	; 0x464

00011c84 <mbrtowc@plt>:
   11c84:	add	ip, pc, #0, 12
   11c88:	add	ip, ip, #143360	; 0x23000
   11c8c:	ldr	pc, [ip, #1116]!	; 0x45c

00011c90 <error@plt>:
   11c90:	add	ip, pc, #0, 12
   11c94:	add	ip, ip, #143360	; 0x23000
   11c98:	ldr	pc, [ip, #1108]!	; 0x454

00011c9c <open64@plt>:
   11c9c:	add	ip, pc, #0, 12
   11ca0:	add	ip, ip, #143360	; 0x23000
   11ca4:	ldr	pc, [ip, #1100]!	; 0x44c

00011ca8 <strcoll@plt>:
   11ca8:	add	ip, pc, #0, 12
   11cac:	add	ip, ip, #143360	; 0x23000
   11cb0:	ldr	pc, [ip, #1092]!	; 0x444

00011cb4 <getenv@plt>:
   11cb4:	add	ip, pc, #0, 12
   11cb8:	add	ip, ip, #143360	; 0x23000
   11cbc:	ldr	pc, [ip, #1084]!	; 0x43c

00011cc0 <mkstemp64@plt>:
   11cc0:	add	ip, pc, #0, 12
   11cc4:	add	ip, ip, #143360	; 0x23000
   11cc8:	ldr	pc, [ip, #1076]!	; 0x434

00011ccc <sysinfo@plt>:
   11ccc:	add	ip, pc, #0, 12
   11cd0:	add	ip, ip, #143360	; 0x23000
   11cd4:	ldr	pc, [ip, #1068]!	; 0x42c

00011cd8 <malloc@plt>:
   11cd8:	add	ip, pc, #0, 12
   11cdc:	add	ip, ip, #143360	; 0x23000
   11ce0:	ldr	pc, [ip, #1060]!	; 0x424

00011ce4 <sigaddset@plt>:
   11ce4:	add	ip, pc, #0, 12
   11ce8:	add	ip, ip, #143360	; 0x23000
   11cec:	ldr	pc, [ip, #1052]!	; 0x41c

00011cf0 <__libc_start_main@plt>:
   11cf0:	add	ip, pc, #0, 12
   11cf4:	add	ip, ip, #143360	; 0x23000
   11cf8:	ldr	pc, [ip, #1044]!	; 0x414

00011cfc <__freading@plt>:
   11cfc:	add	ip, pc, #0, 12
   11d00:	add	ip, ip, #143360	; 0x23000
   11d04:	ldr	pc, [ip, #1036]!	; 0x40c

00011d08 <__ctype_toupper_loc@plt>:
   11d08:	add	ip, pc, #0, 12
   11d0c:	add	ip, ip, #143360	; 0x23000
   11d10:	ldr	pc, [ip, #1028]!	; 0x404

00011d14 <__gmon_start__@plt>:
   11d14:	add	ip, pc, #0, 12
   11d18:	add	ip, ip, #143360	; 0x23000
   11d1c:	ldr	pc, [ip, #1020]!	; 0x3fc

00011d20 <getopt_long@plt>:
   11d20:	add	ip, pc, #0, 12
   11d24:	add	ip, ip, #143360	; 0x23000
   11d28:	ldr	pc, [ip, #1012]!	; 0x3f4

00011d2c <__ctype_b_loc@plt>:
   11d2c:	add	ip, pc, #0, 12
   11d30:	add	ip, ip, #143360	; 0x23000
   11d34:	ldr	pc, [ip, #1004]!	; 0x3ec

00011d38 <exit@plt>:
   11d38:	add	ip, pc, #0, 12
   11d3c:	add	ip, ip, #143360	; 0x23000
   11d40:	ldr	pc, [ip, #996]!	; 0x3e4

00011d44 <strtoul@plt>:
   11d44:	add	ip, pc, #0, 12
   11d48:	add	ip, ip, #143360	; 0x23000
   11d4c:	ldr	pc, [ip, #988]!	; 0x3dc

00011d50 <strlen@plt>:
   11d50:	add	ip, pc, #0, 12
   11d54:	add	ip, ip, #143360	; 0x23000
   11d58:	ldr	pc, [ip, #980]!	; 0x3d4

00011d5c <strchr@plt>:
   11d5c:	add	ip, pc, #0, 12
   11d60:	add	ip, ip, #143360	; 0x23000
   11d64:	ldr	pc, [ip, #972]!	; 0x3cc

00011d68 <strxfrm@plt>:
   11d68:	add	ip, pc, #0, 12
   11d6c:	add	ip, ip, #143360	; 0x23000
   11d70:	ldr	pc, [ip, #964]!	; 0x3c4

00011d74 <__errno_location@plt>:
   11d74:	add	ip, pc, #0, 12
   11d78:	add	ip, ip, #143360	; 0x23000
   11d7c:	ldr	pc, [ip, #956]!	; 0x3bc

00011d80 <__cxa_atexit@plt>:
   11d80:	add	ip, pc, #0, 12
   11d84:	add	ip, ip, #143360	; 0x23000
   11d88:	ldr	pc, [ip, #948]!	; 0x3b4

00011d8c <setvbuf@plt>:
   11d8c:	add	ip, pc, #0, 12
   11d90:	add	ip, ip, #143360	; 0x23000
   11d94:	ldr	pc, [ip, #940]!	; 0x3ac

00011d98 <memset@plt>:
   11d98:	add	ip, pc, #0, 12
   11d9c:	add	ip, ip, #143360	; 0x23000
   11da0:	ldr	pc, [ip, #932]!	; 0x3a4

00011da4 <fgetc@plt>:
   11da4:	add	ip, pc, #0, 12
   11da8:	add	ip, ip, #143360	; 0x23000
   11dac:	ldr	pc, [ip, #924]!	; 0x39c

00011db0 <__printf_chk@plt>:
   11db0:	add	ip, pc, #0, 12
   11db4:	add	ip, ip, #143360	; 0x23000
   11db8:	ldr	pc, [ip, #916]!	; 0x394

00011dbc <write@plt>:
   11dbc:	add	ip, pc, #0, 12
   11dc0:	add	ip, ip, #143360	; 0x23000
   11dc4:	ldr	pc, [ip, #908]!	; 0x38c

00011dc8 <fileno@plt>:
   11dc8:	add	ip, pc, #0, 12
   11dcc:	add	ip, ip, #143360	; 0x23000
   11dd0:	ldr	pc, [ip, #900]!	; 0x384

00011dd4 <__fprintf_chk@plt>:
   11dd4:	add	ip, pc, #0, 12
   11dd8:	add	ip, ip, #143360	; 0x23000
   11ddc:	ldr	pc, [ip, #892]!	; 0x37c

00011de0 <memchr@plt>:
   11de0:	add	ip, pc, #0, 12
   11de4:	add	ip, ip, #143360	; 0x23000
   11de8:	ldr	pc, [ip, #884]!	; 0x374

00011dec <fclose@plt>:
   11dec:	add	ip, pc, #0, 12
   11df0:	add	ip, ip, #143360	; 0x23000
   11df4:	ldr	pc, [ip, #876]!	; 0x36c

00011df8 <pipe@plt>:
   11df8:	add	ip, pc, #0, 12
   11dfc:	add	ip, ip, #143360	; 0x23000
   11e00:	ldr	pc, [ip, #868]!	; 0x364

00011e04 <fseeko64@plt>:
   11e04:	add	ip, pc, #0, 12
   11e08:	add	ip, ip, #143360	; 0x23000
   11e0c:	ldr	pc, [ip, #860]!	; 0x35c

00011e10 <fcntl64@plt>:
   11e10:	add	ip, pc, #0, 12
   11e14:	add	ip, ip, #143360	; 0x23000
   11e18:	ldr	pc, [ip, #852]!	; 0x354

00011e1c <__overflow@plt>:
   11e1c:	add	ip, pc, #0, 12
   11e20:	add	ip, ip, #143360	; 0x23000
   11e24:	ldr	pc, [ip, #844]!	; 0x34c

00011e28 <setlocale@plt>:
   11e28:	add	ip, pc, #0, 12
   11e2c:	add	ip, ip, #143360	; 0x23000
   11e30:	ldr	pc, [ip, #836]!	; 0x344

00011e34 <sigemptyset@plt>:
   11e34:	add	ip, pc, #0, 12
   11e38:	add	ip, ip, #143360	; 0x23000
   11e3c:	ldr	pc, [ip, #828]!	; 0x33c

00011e40 <fork@plt>:
   11e40:	add	ip, pc, #0, 12
   11e44:	add	ip, ip, #143360	; 0x23000
   11e48:	ldr	pc, [ip, #820]!	; 0x334

00011e4c <__explicit_bzero_chk@plt>:
   11e4c:	add	ip, pc, #0, 12
   11e50:	add	ip, ip, #143360	; 0x23000
   11e54:	ldr	pc, [ip, #812]!	; 0x32c

00011e58 <strrchr@plt>:
   11e58:	add	ip, pc, #0, 12
   11e5c:	add	ip, ip, #143360	; 0x23000
   11e60:	ldr	pc, [ip, #804]!	; 0x324

00011e64 <pthread_join@plt>:
   11e64:	add	ip, pc, #0, 12
   11e68:	add	ip, ip, #143360	; 0x23000
   11e6c:	ldr	pc, [ip, #796]!	; 0x31c

00011e70 <nl_langinfo@plt>:
   11e70:	add	ip, pc, #0, 12
   11e74:	add	ip, ip, #143360	; 0x23000
   11e78:	ldr	pc, [ip, #788]!	; 0x314

00011e7c <localeconv@plt>:
   11e7c:	add	ip, pc, #0, 12
   11e80:	add	ip, ip, #143360	; 0x23000
   11e84:	ldr	pc, [ip, #780]!	; 0x30c

00011e88 <clearerr_unlocked@plt>:
   11e88:	add	ip, pc, #0, 12
   11e8c:	add	ip, ip, #143360	; 0x23000
   11e90:	ldr	pc, [ip, #772]!	; 0x304

00011e94 <fopen64@plt>:
   11e94:	add	ip, pc, #0, 12
   11e98:	add	ip, ip, #143360	; 0x23000
   11e9c:	ldr	pc, [ip, #764]!	; 0x2fc

00011ea0 <qsort@plt>:
   11ea0:	add	ip, pc, #0, 12
   11ea4:	add	ip, ip, #143360	; 0x23000
   11ea8:	ldr	pc, [ip, #756]!	; 0x2f4

00011eac <pipe2@plt>:
   11eac:	add	ip, pc, #0, 12
   11eb0:	add	ip, ip, #143360	; 0x23000
   11eb4:	ldr	pc, [ip, #748]!	; 0x2ec

00011eb8 <pthread_cond_wait@plt>:
   11eb8:	add	ip, pc, #0, 12
   11ebc:	add	ip, ip, #143360	; 0x23000
   11ec0:	ldr	pc, [ip, #740]!	; 0x2e4

00011ec4 <euidaccess@plt>:
   11ec4:	add	ip, pc, #0, 12
   11ec8:	add	ip, ip, #143360	; 0x23000
   11ecc:	ldr	pc, [ip, #732]!	; 0x2dc

00011ed0 <sched_getaffinity@plt>:
   11ed0:	add	ip, pc, #0, 12
   11ed4:	add	ip, ip, #143360	; 0x23000
   11ed8:	ldr	pc, [ip, #724]!	; 0x2d4

00011edc <bindtextdomain@plt>:
   11edc:	add	ip, pc, #0, 12
   11ee0:	add	ip, ip, #143360	; 0x23000
   11ee4:	ldr	pc, [ip, #716]!	; 0x2cc

00011ee8 <fread_unlocked@plt>:
   11ee8:	add	ip, pc, #0, 12
   11eec:	add	ip, ip, #143360	; 0x23000
   11ef0:	ldr	pc, [ip, #708]!	; 0x2c4

00011ef4 <getrandom@plt>:
   11ef4:	add	ip, pc, #0, 12
   11ef8:	add	ip, ip, #143360	; 0x23000
   11efc:	ldr	pc, [ip, #700]!	; 0x2bc

00011f00 <__xstat64@plt>:
   11f00:	add	ip, pc, #0, 12
   11f04:	add	ip, ip, #143360	; 0x23000
   11f08:	ldr	pc, [ip, #692]!	; 0x2b4

00011f0c <strncmp@plt>:
   11f0c:	add	ip, pc, #0, 12
   11f10:	add	ip, ip, #143360	; 0x23000
   11f14:	ldr	pc, [ip, #684]!	; 0x2ac

00011f18 <pthread_cond_signal@plt>:
   11f18:	add	ip, pc, #0, 12
   11f1c:	add	ip, ip, #143360	; 0x23000
   11f20:	ldr	pc, [ip, #676]!	; 0x2a4

00011f24 <abort@plt>:
   11f24:	add	ip, pc, #0, 12
   11f28:	add	ip, ip, #143360	; 0x23000
   11f2c:	ldr	pc, [ip, #668]!	; 0x29c

00011f30 <close@plt>:
   11f30:	add	ip, pc, #0, 12
   11f34:	add	ip, ip, #143360	; 0x23000
   11f38:	ldr	pc, [ip, #660]!	; 0x294

00011f3c <dcngettext@plt>:
   11f3c:	add	ip, pc, #0, 12
   11f40:	add	ip, ip, #143360	; 0x23000
   11f44:	ldr	pc, [ip, #652]!	; 0x28c

00011f48 <__assert_fail@plt>:
   11f48:	add	ip, pc, #0, 12
   11f4c:	add	ip, ip, #143360	; 0x23000
   11f50:	ldr	pc, [ip, #644]!	; 0x284

Disassembly of section .text:

00011f58 <_obstack_begin@@Base-0xf764>:
   11f58:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11f5c:	vpush	{d8-d11}
   11f60:	mov	r7, r1
   11f64:	mov	r4, #2
   11f68:	sub	sp, sp, #540	; 0x21c
   11f6c:	str	r0, [sp, #16]
   11f70:	ldr	r0, [pc, #1040]	; 12388 <__assert_fail@plt+0x440>
   11f74:	bl	11cb4 <getenv@plt>
   11f78:	adds	r3, r0, #0
   11f7c:	movne	r3, #1
   11f80:	str	r3, [sp, #28]
   11f84:	str	r0, [sp, #56]	; 0x38
   11f88:	bl	1cb00 <__assert_fail@plt+0xabb8>
   11f8c:	sub	r3, r0, #199680	; 0x30c00
   11f90:	sub	r3, r3, #432	; 0x1b0
   11f94:	cmp	r3, #696	; 0x2b8
   11f98:	movls	r3, #0
   11f9c:	movhi	r3, #1
   11fa0:	ldr	r0, [r7]
   11fa4:	str	r3, [sp, #32]
   11fa8:	bl	1cb60 <__assert_fail@plt+0xac18>
   11fac:	ldr	r1, [pc, #1120]	; 12414 <__assert_fail@plt+0x4cc>
   11fb0:	mov	r0, #6
   11fb4:	bl	11e28 <setlocale@plt>
   11fb8:	ldr	r1, [pc, #972]	; 1238c <__assert_fail@plt+0x444>
   11fbc:	str	r0, [sp, #60]	; 0x3c
   11fc0:	ldr	r0, [pc, #968]	; 12390 <__assert_fail@plt+0x448>
   11fc4:	bl	11edc <bindtextdomain@plt>
   11fc8:	ldr	r0, [pc, #960]	; 12390 <__assert_fail@plt+0x448>
   11fcc:	bl	11bb8 <textdomain@plt>
   11fd0:	ldr	r3, [pc, #956]	; 12394 <__assert_fail@plt+0x44c>
   11fd4:	mov	r0, #3
   11fd8:	str	r4, [r3]
   11fdc:	bl	1b0e0 <__assert_fail@plt+0x9198>
   11fe0:	ldr	r3, [pc, #1116]	; 12444 <__assert_fail@plt+0x4fc>
   11fe4:	strb	r0, [r3, #1311]	; 0x51f
   11fe8:	mov	r0, r4
   11fec:	bl	1b0e0 <__assert_fail@plt+0x9198>
   11ff0:	ldr	r3, [pc, #1100]	; 12444 <__assert_fail@plt+0x4fc>
   11ff4:	mov	r5, r0
   11ff8:	strb	r0, [r3, #1496]	; 0x5d8
   11ffc:	bl	11e7c <localeconv@plt>
   12000:	ldr	r1, [pc, #1084]	; 12444 <__assert_fail@plt+0x4fc>
   12004:	ldr	r2, [r0]
   12008:	ldrb	r3, [r2]
   1200c:	cmp	r3, #0
   12010:	strb	r3, [r1, #4]
   12014:	beq	12364 <__assert_fail@plt+0x41c>
   12018:	ldrb	r3, [r2, #1]
   1201c:	cmp	r3, #0
   12020:	bne	12364 <__assert_fail@plt+0x41c>
   12024:	ldr	r2, [r0, #4]
   12028:	ldr	r1, [pc, #1044]	; 12444 <__assert_fail@plt+0x4fc>
   1202c:	ldrb	r3, [r2]
   12030:	cmp	r3, #0
   12034:	str	r3, [r1]
   12038:	beq	12960 <__assert_fail@plt+0xa18>
   1203c:	ldrb	r3, [r2, #1]
   12040:	cmp	r3, #0
   12044:	bne	12958 <__assert_fail@plt+0xa10>
   12048:	ldr	r3, [pc, #1012]	; 12444 <__assert_fail@plt+0x4fc>
   1204c:	mov	r8, #0
   12050:	mov	sl, r8
   12054:	strb	r8, [r3, #1148]	; 0x47c
   12058:	bl	11d08 <__ctype_toupper_loc@plt>
   1205c:	mov	r6, r0
   12060:	bl	11d2c <__ctype_b_loc@plt>
   12064:	ldr	lr, [pc, #812]	; 12398 <__assert_fail@plt+0x450>
   12068:	ldr	ip, [pc, #812]	; 1239c <__assert_fail@plt+0x454>
   1206c:	mov	r3, r8
   12070:	add	r9, lr, #768	; 0x300
   12074:	add	r8, lr, #256	; 0x100
   12078:	mov	r4, r0
   1207c:	ldr	r1, [r4]
   12080:	lsl	r2, r3, #1
   12084:	add	ip, ip, #1
   12088:	ldrh	r0, [r1, r2]
   1208c:	and	r1, r0, #1
   12090:	lsr	r2, r0, #14
   12094:	eor	r2, r2, #1
   12098:	and	r2, r2, #1
   1209c:	strb	r2, [r9, #1]!
   120a0:	ldr	r2, [r6]
   120a4:	cmp	r3, #10
   120a8:	orreq	r1, r1, #1
   120ac:	tst	r0, #8
   120b0:	ldr	r2, [r2, r3, lsl #2]
   120b4:	strb	r1, [lr, #1]!
   120b8:	add	r3, r3, #1
   120bc:	eoreq	r1, r1, #1
   120c0:	strbne	sl, [ip, #-1]
   120c4:	strbeq	r1, [ip, #-1]
   120c8:	cmp	r3, #256	; 0x100
   120cc:	strb	r2, [r8, #1]!
   120d0:	bne	1207c <__assert_fail@plt+0x134>
   120d4:	cmp	r5, #0
   120d8:	beq	12188 <__assert_fail@plt+0x240>
   120dc:	ldr	fp, [pc, #700]	; 123a0 <__assert_fail@plt+0x458>
   120e0:	ldr	r6, [pc, #856]	; 12440 <__assert_fail@plt+0x4f8>
   120e4:	ldr	r8, [pc, #696]	; 123a4 <__assert_fail@plt+0x45c>
   120e8:	mov	r5, #0
   120ec:	mov	r0, fp
   120f0:	bl	11e70 <nl_langinfo@plt>
   120f4:	mov	r9, r0
   120f8:	bl	11d50 <strlen@plt>
   120fc:	mov	sl, r0
   12100:	add	r0, r0, #1
   12104:	bl	20048 <__assert_fail@plt+0xe100>
   12108:	add	r2, r6, fp, lsl #3
   1210c:	sub	r2, r2, #1048576	; 0x100000
   12110:	sub	r3, fp, #131072	; 0x20000
   12114:	sub	r3, r3, #13
   12118:	cmp	sl, #0
   1211c:	str	r3, [r2, #-108]	; 0xffffff94
   12120:	str	r0, [r2, #-112]	; 0xffffff90
   12124:	beq	12164 <__assert_fail@plt+0x21c>
   12128:	ldr	lr, [r4]
   1212c:	add	ip, r9, sl
   12130:	mov	r2, r9
   12134:	mov	sl, r5
   12138:	ldrb	r3, [r2], #1
   1213c:	lsl	r1, r3, #1
   12140:	ldrh	r1, [lr, r1]
   12144:	tst	r1, #1
   12148:	ldreq	r1, [pc, #756]	; 12444 <__assert_fail@plt+0x4fc>
   1214c:	addeq	r3, r1, r3
   12150:	ldrbeq	r3, [r3, #264]	; 0x108
   12154:	strbeq	r3, [r0, sl]
   12158:	addeq	sl, sl, #1
   1215c:	cmp	ip, r2
   12160:	bne	12138 <__assert_fail@plt+0x1f0>
   12164:	add	fp, fp, #1
   12168:	cmp	fp, r8
   1216c:	strb	r5, [r0, sl]
   12170:	bne	120ec <__assert_fail@plt+0x1a4>
   12174:	ldr	r3, [pc, #556]	; 123a8 <__assert_fail@plt+0x460>
   12178:	mov	r2, #8
   1217c:	mov	r1, #12
   12180:	ldr	r0, [pc, #696]	; 12440 <__assert_fail@plt+0x4f8>
   12184:	bl	11ea0 <qsort@plt>
   12188:	ldr	r3, [pc, #540]	; 123ac <__assert_fail@plt+0x464>
   1218c:	ldr	r6, [pc, #540]	; 123b0 <__assert_fail@plt+0x468>
   12190:	add	r0, r3, #12
   12194:	bl	11e34 <sigemptyset@plt>
   12198:	ldr	r3, [pc, #524]	; 123ac <__assert_fail@plt+0x464>
   1219c:	add	r9, r6, #40	; 0x28
   121a0:	add	sl, r3, #12
   121a4:	mov	r5, r6
   121a8:	mov	fp, #14
   121ac:	mov	r8, #0
   121b0:	b	121b8 <__assert_fail@plt+0x270>
   121b4:	ldr	fp, [r5, #4]!
   121b8:	add	r2, sp, #392	; 0x188
   121bc:	mov	r1, r8
   121c0:	mov	r0, fp
   121c4:	bl	11c00 <sigaction@plt>
   121c8:	ldr	r3, [sp, #392]	; 0x188
   121cc:	cmp	r3, #1
   121d0:	beq	121e0 <__assert_fail@plt+0x298>
   121d4:	mov	r1, fp
   121d8:	mov	r0, sl
   121dc:	bl	11ce4 <sigaddset@plt>
   121e0:	cmp	r9, r5
   121e4:	bne	121b4 <__assert_fail@plt+0x26c>
   121e8:	ldr	r2, [pc, #444]	; 123ac <__assert_fail@plt+0x464>
   121ec:	ldr	r3, [pc, #448]	; 123b4 <__assert_fail@plt+0x46c>
   121f0:	add	r8, r2, #12
   121f4:	mov	r1, r8
   121f8:	mov	r2, #128	; 0x80
   121fc:	add	r0, sp, #396	; 0x18c
   12200:	str	r3, [sp, #392]	; 0x188
   12204:	bl	11ac8 <memcpy@plt>
   12208:	mov	r3, #0
   1220c:	mov	r9, r3
   12210:	mov	sl, #14
   12214:	str	r3, [sp, #524]	; 0x20c
   12218:	b	12228 <__assert_fail@plt+0x2e0>
   1221c:	cmp	r5, r6
   12220:	beq	12254 <__assert_fail@plt+0x30c>
   12224:	ldr	sl, [r6, #4]!
   12228:	mov	r1, sl
   1222c:	mov	r0, r8
   12230:	bl	11bac <sigismember@plt>
   12234:	cmp	r0, #0
   12238:	beq	1221c <__assert_fail@plt+0x2d4>
   1223c:	mov	r0, sl
   12240:	mov	r2, r9
   12244:	add	r1, sp, #392	; 0x188
   12248:	bl	11c00 <sigaction@plt>
   1224c:	cmp	r5, r6
   12250:	bne	12224 <__assert_fail@plt+0x2dc>
   12254:	mov	r1, #0
   12258:	mov	r0, #17
   1225c:	bl	11b04 <signal@plt>
   12260:	ldr	r0, [pc, #336]	; 123b8 <__assert_fail@plt+0x470>
   12264:	bl	2237c <_obstack_memory_used@@Base+0xab0>
   12268:	mov	r2, #40	; 0x28
   1226c:	mov	r1, #0
   12270:	add	r0, sp, #248	; 0xf8
   12274:	bl	11d98 <memset@plt>
   12278:	ldr	sl, [sp, #16]
   1227c:	mov	r6, #0
   12280:	mvn	r3, #0
   12284:	mov	r1, #4
   12288:	mov	r0, sl
   1228c:	str	r3, [sp, #256]	; 0x100
   12290:	str	r3, [sp, #248]	; 0xf8
   12294:	str	r6, [sp, #40]	; 0x28
   12298:	bl	20130 <__assert_fail@plt+0xe1e8>
   1229c:	ldr	r3, [pc, #340]	; 123f8 <__assert_fail@plt+0x4b0>
   122a0:	mov	r8, r4
   122a4:	add	r3, r3, #572	; 0x23c
   122a8:	vldr	d9, [pc, #200]	; 12378 <__assert_fail@plt+0x430>
   122ac:	vldr	d8, [pc, #204]	; 12380 <__assert_fail@plt+0x438>
   122b0:	str	r3, [sp, #64]	; 0x40
   122b4:	str	r6, [sp, #36]	; 0x24
   122b8:	mov	r5, r6
   122bc:	str	r6, [sp, #52]	; 0x34
   122c0:	str	r6, [sp, #48]	; 0x30
   122c4:	str	r6, [sp, #44]	; 0x2c
   122c8:	mov	r4, r6
   122cc:	mov	r9, sl
   122d0:	str	r0, [sp, #16]
   122d4:	b	12348 <__assert_fail@plt+0x400>
   122d8:	ldr	r3, [sp, #28]
   122dc:	cmp	r5, #0
   122e0:	moveq	r3, #0
   122e4:	andne	r3, r3, #1
   122e8:	cmp	r3, #0
   122ec:	beq	12470 <__assert_fail@plt+0x528>
   122f0:	ldr	r3, [sp, #32]
   122f4:	eor	r2, r3, #1
   122f8:	ldr	r3, [pc, #280]	; 12418 <__assert_fail@plt+0x4d0>
   122fc:	cmp	r4, #0
   12300:	orrne	r2, r2, #1
   12304:	cmp	r2, #0
   12308:	ldr	r1, [r3]
   1230c:	bne	12328 <__assert_fail@plt+0x3e0>
   12310:	cmp	r9, r1
   12314:	beq	128d8 <__assert_fail@plt+0x990>
   12318:	ldr	r2, [r7, r1, lsl #2]
   1231c:	ldrb	r0, [r2]
   12320:	cmp	r0, #45	; 0x2d
   12324:	beq	1244c <__assert_fail@plt+0x504>
   12328:	cmp	r9, r1
   1232c:	ble	14bd8 <__assert_fail@plt+0x2c90>
   12330:	ldr	r0, [sp, #16]
   12334:	ldr	r2, [r7, r1, lsl #2]
   12338:	add	r1, r1, #1
   1233c:	str	r2, [r0, r5, lsl #2]
   12340:	add	r5, r5, #1
   12344:	str	r1, [r3]
   12348:	mvn	r3, #0
   1234c:	cmn	r6, #1
   12350:	str	r3, [sp, #144]	; 0x90
   12354:	bne	122d8 <__assert_fail@plt+0x390>
   12358:	ldr	r3, [pc, #184]	; 12418 <__assert_fail@plt+0x4d0>
   1235c:	ldr	r1, [r3]
   12360:	b	12328 <__assert_fail@plt+0x3e0>
   12364:	ldr	r2, [pc, #216]	; 12444 <__assert_fail@plt+0x4fc>
   12368:	mov	r3, #46	; 0x2e
   1236c:	strb	r3, [r2, #4]
   12370:	b	12024 <__assert_fail@plt+0xdc>
   12374:	nop			; (mov r0, r0)
   12378:	andeq	r0, r0, r0
   1237c:	subsmi	r0, r9, r0
   12380:	andeq	r0, r0, r0
   12384:	mvnsmi	r0, #0
   12388:	andeq	r3, r2, r4, lsr #21
   1238c:			; <UNDEFINED> instruction: 0x00023ab4
   12390:	strdeq	r3, [r2], -r0
   12394:	andeq	r5, r3, r0, ror r2
   12398:	andeq	r5, r3, r7, ror #5
   1239c:	andeq	r5, r3, r8, ror #9
   123a0:	andeq	r0, r2, lr
   123a4:	andeq	r0, r2, sl, lsl r0
   123a8:	andeq	r5, r1, r4, ror #8
   123ac:	andeq	r5, r3, r0, ror r7
   123b0:	andeq	r2, r2, r4, ror #9
   123b4:	strdeq	r5, [r1], -ip
   123b8:	andeq	r6, r1, r0, lsl r3
   123bc:	andeq	r0, r0, sl, lsl #2
   123c0:	andeq	r2, r2, ip, lsr #19
   123c4:	andeq	r3, r2, r0, ror sp
   123c8:	andeq	r2, r2, r8, lsr #14
   123cc:	andeq	r3, r2, r4, lsr #22
   123d0:	andeq	r5, r3, ip, ror #4
   123d4:	andeq	r3, r2, ip, lsr #22
   123d8:	andeq	r2, r2, r0, asr r7
   123dc:	andeq	r3, r2, r8, lsr #26
   123e0:	andeq	r5, r3, r8, asr #5
   123e4:	andeq	r3, r2, ip, lsr sp
   123e8:	andeq	r4, r2, ip, asr #13
   123ec:	muleq	r2, ip, ip
   123f0:			; <UNDEFINED> instruction: 0x00023cb8
   123f4:	andeq	r3, r2, r0, ror #22
   123f8:	andeq	r2, r2, r0, lsl r5
   123fc:	andeq	r5, r3, r8, ror #4
   12400:	ldrdeq	r5, [r3], -r4
   12404:	andeq	r3, r2, ip, lsl #26
   12408:	andeq	r3, r2, r8, lsl sp
   1240c:	andeq	r3, r2, ip, ror #19
   12410:	andeq	r4, r2, r4, ror #5
   12414:	muleq	r2, r8, pc	; <UNPREDICTABLE>
   12418:	andeq	r5, r3, r0, asr #5
   1241c:	ldrdeq	r5, [r3], -r8
   12420:	ldrdeq	r3, [r2], -r0
   12424:	andeq	r2, r2, r0, lsr #7
   12428:	andeq	r3, r2, ip, ror #23
   1242c:			; <UNDEFINED> instruction: 0x000227bc
   12430:	strdeq	r3, [r2], -r4
   12434:	strheq	r4, [r2], -r0
   12438:	andeq	r4, r2, ip, asr #1
   1243c:	andeq	r4, r2, r4, ror #1
   12440:	andeq	r5, r3, r4, ror #3
   12444:	andeq	r5, r3, r0, ror #5
   12448:	andeq	r4, r2, r0, lsr #2
   1244c:	ldrb	r0, [r2, #1]
   12450:	cmp	r0, #111	; 0x6f
   12454:	bne	12328 <__assert_fail@plt+0x3e0>
   12458:	ldrb	r2, [r2, #2]
   1245c:	cmp	r2, #0
   12460:	bne	12470 <__assert_fail@plt+0x528>
   12464:	add	r2, r1, #1
   12468:	cmp	r9, r2
   1246c:	beq	12328 <__assert_fail@plt+0x3e0>
   12470:	add	r3, sp, #144	; 0x90
   12474:	str	r3, [sp]
   12478:	ldr	r3, [pc, #-136]	; 123f8 <__assert_fail@plt+0x4b0>
   1247c:	mov	r1, r7
   12480:	add	r2, r3, #496	; 0x1f0
   12484:	mov	r0, r9
   12488:	bl	11d20 <getopt_long@plt>
   1248c:	cmn	r0, #1
   12490:	mov	r6, r0
   12494:	beq	12358 <__assert_fail@plt+0x410>
   12498:	ldr	r2, [pc, #-228]	; 123bc <__assert_fail@plt+0x474>
   1249c:	add	r3, r0, #3
   124a0:	cmp	r3, r2
   124a4:	ldrls	pc, [pc, r3, lsl #2]
   124a8:	b	12a8c <__assert_fail@plt+0xb44>
   124ac:			; <UNDEFINED> instruction: 0x00012dbc
   124b0:	strdeq	r2, [r1], -r8
   124b4:	andeq	r2, r1, ip, lsl #21
   124b8:	andeq	r2, r1, ip, lsl #21
   124bc:			; <UNDEFINED> instruction: 0x00012ebc
   124c0:	andeq	r2, r1, ip, lsl #21
   124c4:	andeq	r2, r1, ip, lsl #21
   124c8:	andeq	r2, r1, ip, lsl #21
   124cc:	andeq	r2, r1, ip, lsl #21
   124d0:	andeq	r2, r1, ip, lsl #21
   124d4:	andeq	r2, r1, ip, lsl #21
   124d8:	andeq	r2, r1, ip, lsl #21
   124dc:	andeq	r2, r1, ip, lsl #21
   124e0:	andeq	r2, r1, ip, lsl #21
   124e4:	andeq	r2, r1, ip, lsl #21
   124e8:	andeq	r2, r1, ip, lsl #21
   124ec:	andeq	r2, r1, ip, lsl #21
   124f0:	andeq	r2, r1, ip, lsl #21
   124f4:	andeq	r2, r1, ip, lsl #21
   124f8:	andeq	r2, r1, ip, lsl #21
   124fc:	andeq	r2, r1, ip, lsl #21
   12500:	andeq	r2, r1, ip, lsl #21
   12504:	andeq	r2, r1, ip, lsl #21
   12508:	andeq	r2, r1, ip, lsl #21
   1250c:	andeq	r2, r1, ip, lsl #21
   12510:	andeq	r2, r1, ip, lsl #21
   12514:	andeq	r2, r1, ip, lsl #21
   12518:	andeq	r2, r1, ip, lsl #21
   1251c:	andeq	r2, r1, ip, lsl #21
   12520:	andeq	r2, r1, ip, lsl #21
   12524:	andeq	r2, r1, ip, lsl #21
   12528:	andeq	r2, r1, ip, lsl #21
   1252c:	andeq	r2, r1, ip, lsl #21
   12530:	andeq	r2, r1, ip, lsl #21
   12534:	andeq	r2, r1, ip, lsl #21
   12538:	andeq	r2, r1, ip, lsl #21
   1253c:	andeq	r2, r1, ip, lsl #21
   12540:	andeq	r2, r1, ip, lsl #21
   12544:	andeq	r2, r1, ip, lsl #21
   12548:	andeq	r2, r1, ip, lsl #21
   1254c:	andeq	r2, r1, ip, lsl #21
   12550:	andeq	r2, r1, ip, lsl #21
   12554:	andeq	r2, r1, ip, lsl #21
   12558:	andeq	r2, r1, ip, lsl #21
   1255c:	andeq	r2, r1, ip, lsl #21
   12560:	andeq	r2, r1, ip, lsl #21
   12564:	andeq	r2, r1, ip, lsl #21
   12568:	andeq	r2, r1, ip, lsl #21
   1256c:	andeq	r2, r1, ip, lsl #21
   12570:	andeq	r2, r1, ip, lsl #21
   12574:	andeq	r2, r1, ip, lsl #21
   12578:	andeq	r2, r1, ip, lsl #21
   1257c:	andeq	r2, r1, ip, lsl #21
   12580:	andeq	r2, r1, ip, lsl #21
   12584:	andeq	r2, r1, ip, lsl #21
   12588:	andeq	r2, r1, ip, lsl #21
   1258c:	andeq	r2, r1, ip, lsl #21
   12590:	andeq	r2, r1, ip, lsl #21
   12594:	andeq	r2, r1, ip, lsl #21
   12598:	andeq	r2, r1, ip, lsl #21
   1259c:	andeq	r2, r1, ip, lsl #21
   125a0:	andeq	r2, r1, ip, lsl #21
   125a4:	andeq	r2, r1, ip, lsl #21
   125a8:	andeq	r2, r1, ip, lsl #21
   125ac:	andeq	r2, r1, ip, lsl #21
   125b0:	andeq	r2, r1, ip, lsl #21
   125b4:	andeq	r2, r1, ip, lsl #21
   125b8:	andeq	r2, r1, ip, lsl #21
   125bc:	andeq	r2, r1, ip, lsl #21
   125c0:	andeq	r2, r1, ip, lsl #21
   125c4:	andeq	r2, r1, r4, lsl sl
   125c8:	andeq	r2, r1, ip, lsl #21
   125cc:	andeq	r2, r1, ip, lsl #21
   125d0:	andeq	r2, r1, ip, lsl #21
   125d4:	andeq	r2, r1, ip, lsl #21
   125d8:	andeq	r2, r1, ip, lsl #21
   125dc:	andeq	r2, r1, ip, lsl #21
   125e0:	andeq	r2, r1, ip, lsl #21
   125e4:	andeq	r2, r1, ip, lsl #21
   125e8:	andeq	r2, r1, ip, lsl #21
   125ec:			; <UNDEFINED> instruction: 0x000129b0
   125f0:	andeq	r2, r1, ip, lsl #21
   125f4:	andeq	r2, r1, ip, lsl #21
   125f8:	andeq	r2, r1, ip, lsl #21
   125fc:	andeq	r2, r1, ip, lsl #21
   12600:			; <UNDEFINED> instruction: 0x000129b0
   12604:	muleq	r1, r4, sl
   12608:	strdeq	r2, [r1], -r0
   1260c:	andeq	r2, r1, ip, lsl #21
   12610:			; <UNDEFINED> instruction: 0x000129b0
   12614:	andeq	r2, r1, ip, lsl #21
   12618:	andeq	r2, r1, ip, lsl #21
   1261c:	andeq	r2, r1, ip, lsl #21
   12620:	andeq	r2, r1, ip, lsl #21
   12624:	andeq	r2, r1, ip, lsl #21
   12628:	andeq	r2, r1, ip, lsl #21
   1262c:	andeq	r2, r1, ip, lsl #21
   12630:	andeq	r2, r1, ip, lsl #21
   12634:	andeq	r2, r1, ip, lsl #21
   12638:	andeq	r2, r1, ip, lsl #21
   1263c:	andeq	r2, r1, ip, lsl #21
   12640:			; <UNDEFINED> instruction: 0x000129b0
   12644:	andeq	r2, r1, r4, lsl sl
   12648:			; <UNDEFINED> instruction: 0x000129b0
   1264c:	andeq	r2, r1, ip, lsl #21
   12650:			; <UNDEFINED> instruction: 0x000129b0
   12654:			; <UNDEFINED> instruction: 0x000129b0
   12658:			; <UNDEFINED> instruction: 0x000129b0
   1265c:			; <UNDEFINED> instruction: 0x000129b0
   12660:	andeq	r2, r1, ip, lsl #21
   12664:	andeq	r2, r1, ip, lsr #23
   12668:	andeq	r2, r1, ip, lsl #21
   1266c:	muleq	r1, ip, ip
   12670:			; <UNDEFINED> instruction: 0x000129b0
   12674:	andeq	r2, r1, r0, lsl #22
   12678:	andeq	r2, r1, ip, lsl #21
   1267c:	andeq	r2, r1, ip, lsl #21
   12680:			; <UNDEFINED> instruction: 0x000129b0
   12684:	andeq	r2, r1, r4, lsr fp
   12688:	andeq	r2, r1, r4, asr #22
   1268c:	muleq	r1, ip, fp
   12690:	andeq	r2, r1, ip, lsl #21
   12694:	andeq	r2, r1, ip, lsl #21
   12698:	andeq	r2, r1, ip, lsl #21
   1269c:	andeq	r2, r1, r0, ror lr
   126a0:	andeq	r2, r1, ip, ror #29
   126a4:	andeq	r2, r1, ip, lsl #21
   126a8:	andeq	r2, r1, ip, lsl #21
   126ac:	andeq	r2, r1, ip, lsl #21
   126b0:	andeq	r2, r1, ip, lsl #21
   126b4:	andeq	r2, r1, ip, lsl #21
   126b8:	andeq	r2, r1, ip, lsl #21
   126bc:	andeq	r2, r1, ip, lsl #21
   126c0:	andeq	r2, r1, ip, lsl #21
   126c4:	andeq	r2, r1, ip, lsl #21
   126c8:	andeq	r2, r1, ip, lsl #21
   126cc:	andeq	r2, r1, ip, lsl #21
   126d0:	andeq	r2, r1, ip, lsl #21
   126d4:	andeq	r2, r1, ip, lsl #21
   126d8:	andeq	r2, r1, ip, lsl #21
   126dc:	andeq	r2, r1, ip, lsl #21
   126e0:	andeq	r2, r1, ip, lsl #21
   126e4:	andeq	r2, r1, ip, lsl #21
   126e8:	andeq	r2, r1, ip, lsl #21
   126ec:	andeq	r2, r1, ip, lsl #21
   126f0:	andeq	r2, r1, ip, lsl #21
   126f4:	andeq	r2, r1, ip, lsl #21
   126f8:	andeq	r2, r1, ip, lsl #21
   126fc:	andeq	r2, r1, ip, lsl #21
   12700:	andeq	r2, r1, ip, lsl #21
   12704:	andeq	r2, r1, ip, lsl #21
   12708:	andeq	r2, r1, ip, lsl #21
   1270c:	andeq	r2, r1, ip, lsl #21
   12710:	andeq	r2, r1, ip, lsl #21
   12714:	andeq	r2, r1, ip, lsl #21
   12718:	andeq	r2, r1, ip, lsl #21
   1271c:	andeq	r2, r1, ip, lsl #21
   12720:	andeq	r2, r1, ip, lsl #21
   12724:	andeq	r2, r1, ip, lsl #21
   12728:	andeq	r2, r1, ip, lsl #21
   1272c:	andeq	r2, r1, ip, lsl #21
   12730:	andeq	r2, r1, ip, lsl #21
   12734:	andeq	r2, r1, ip, lsl #21
   12738:	andeq	r2, r1, ip, lsl #21
   1273c:	andeq	r2, r1, ip, lsl #21
   12740:	andeq	r2, r1, ip, lsl #21
   12744:	andeq	r2, r1, ip, lsl #21
   12748:	andeq	r2, r1, ip, lsl #21
   1274c:	andeq	r2, r1, ip, lsl #21
   12750:	andeq	r2, r1, ip, lsl #21
   12754:	andeq	r2, r1, ip, lsl #21
   12758:	andeq	r2, r1, ip, lsl #21
   1275c:	andeq	r2, r1, ip, lsl #21
   12760:	andeq	r2, r1, ip, lsl #21
   12764:	andeq	r2, r1, ip, lsl #21
   12768:	andeq	r2, r1, ip, lsl #21
   1276c:	andeq	r2, r1, ip, lsl #21
   12770:	andeq	r2, r1, ip, lsl #21
   12774:	andeq	r2, r1, ip, lsl #21
   12778:	andeq	r2, r1, ip, lsl #21
   1277c:	andeq	r2, r1, ip, lsl #21
   12780:	andeq	r2, r1, ip, lsl #21
   12784:	andeq	r2, r1, ip, lsl #21
   12788:	andeq	r2, r1, ip, lsl #21
   1278c:	andeq	r2, r1, ip, lsl #21
   12790:	andeq	r2, r1, ip, lsl #21
   12794:	andeq	r2, r1, ip, lsl #21
   12798:	andeq	r2, r1, ip, lsl #21
   1279c:	andeq	r2, r1, ip, lsl #21
   127a0:	andeq	r2, r1, ip, lsl #21
   127a4:	andeq	r2, r1, ip, lsl #21
   127a8:	andeq	r2, r1, ip, lsl #21
   127ac:	andeq	r2, r1, ip, lsl #21
   127b0:	andeq	r2, r1, ip, lsl #21
   127b4:	andeq	r2, r1, ip, lsl #21
   127b8:	andeq	r2, r1, ip, lsl #21
   127bc:	andeq	r2, r1, ip, lsl #21
   127c0:	andeq	r2, r1, ip, lsl #21
   127c4:	andeq	r2, r1, ip, lsl #21
   127c8:	andeq	r2, r1, ip, lsl #21
   127cc:	andeq	r2, r1, ip, lsl #21
   127d0:	andeq	r2, r1, ip, lsl #21
   127d4:	andeq	r2, r1, ip, lsl #21
   127d8:	andeq	r2, r1, ip, lsl #21
   127dc:	andeq	r2, r1, ip, lsl #21
   127e0:	andeq	r2, r1, ip, lsl #21
   127e4:	andeq	r2, r1, ip, lsl #21
   127e8:	andeq	r2, r1, ip, lsl #21
   127ec:	andeq	r2, r1, ip, lsl #21
   127f0:	andeq	r2, r1, ip, lsl #21
   127f4:	andeq	r2, r1, ip, lsl #21
   127f8:	andeq	r2, r1, ip, lsl #21
   127fc:	andeq	r2, r1, ip, lsl #21
   12800:	andeq	r2, r1, ip, lsl #21
   12804:	andeq	r2, r1, ip, lsl #21
   12808:	andeq	r2, r1, ip, lsl #21
   1280c:	andeq	r2, r1, ip, lsl #21
   12810:	andeq	r2, r1, ip, lsl #21
   12814:	andeq	r2, r1, ip, lsl #21
   12818:	andeq	r2, r1, ip, lsl #21
   1281c:	andeq	r2, r1, ip, lsl #21
   12820:	andeq	r2, r1, ip, lsl #21
   12824:	andeq	r2, r1, ip, lsl #21
   12828:	andeq	r2, r1, ip, lsl #21
   1282c:	andeq	r2, r1, ip, lsl #21
   12830:	andeq	r2, r1, ip, lsl #21
   12834:	andeq	r2, r1, ip, lsl #21
   12838:	andeq	r2, r1, ip, lsl #21
   1283c:	andeq	r2, r1, ip, lsl #21
   12840:	andeq	r2, r1, ip, lsl #21
   12844:	andeq	r2, r1, ip, lsl #21
   12848:	andeq	r2, r1, ip, lsl #21
   1284c:	andeq	r2, r1, ip, lsl #21
   12850:	andeq	r2, r1, ip, lsl #21
   12854:	andeq	r2, r1, ip, lsl #21
   12858:	andeq	r2, r1, ip, lsl #21
   1285c:	andeq	r2, r1, ip, lsl #21
   12860:	andeq	r2, r1, ip, lsl #21
   12864:	andeq	r2, r1, ip, lsl #21
   12868:	andeq	r2, r1, ip, lsl #21
   1286c:	andeq	r2, r1, ip, lsl #21
   12870:	andeq	r2, r1, ip, lsl #21
   12874:	andeq	r2, r1, ip, lsl #21
   12878:	andeq	r2, r1, ip, lsl #21
   1287c:	andeq	r2, r1, ip, lsl #21
   12880:	andeq	r2, r1, ip, lsl #21
   12884:	andeq	r2, r1, ip, lsl #21
   12888:	andeq	r2, r1, ip, lsl #21
   1288c:	andeq	r2, r1, ip, lsl #21
   12890:	andeq	r2, r1, ip, lsl #21
   12894:	andeq	r2, r1, ip, lsl #21
   12898:	andeq	r2, r1, ip, lsl #21
   1289c:	andeq	r2, r1, ip, lsl #21
   128a0:	andeq	r2, r1, ip, lsl #21
   128a4:	andeq	r2, r1, ip, lsl #21
   128a8:	andeq	r2, r1, ip, lsl #21
   128ac:	andeq	r2, r1, ip, lsl #21
   128b0:	andeq	r2, r1, ip, lsl #21
   128b4:	andeq	r2, r1, ip, lsl #21
   128b8:	ldrdeq	r2, [r1], -r0
   128bc:	ldrdeq	r2, [r1], -ip
   128c0:	andeq	r2, r1, r4, lsl sp
   128c4:	andeq	r2, r1, r4, lsr #26
   128c8:	andeq	r2, r1, r4, lsr sp
   128cc:	andeq	r2, r1, r8, lsr #25
   128d0:	andeq	r2, r1, r0, ror r9
   128d4:	andeq	r2, r1, r0, lsl #28
   128d8:	ldr	fp, [sp, #16]
   128dc:	mov	r4, r8
   128e0:	mov	r9, r2
   128e4:	ldr	r3, [sp, #36]	; 0x24
   128e8:	cmp	r3, #0
   128ec:	beq	13074 <__assert_fail@plt+0x112c>
   128f0:	cmp	r5, #0
   128f4:	bne	12a2c <__assert_fail@plt+0xae4>
   128f8:	ldr	r1, [pc, #-1344]	; 123c0 <__assert_fail@plt+0x478>
   128fc:	ldr	r0, [sp, #36]	; 0x24
   12900:	bl	1560c <__assert_fail@plt+0x36c4>
   12904:	subs	r6, r0, #0
   12908:	beq	13d04 <__assert_fail@plt+0x1dbc>
   1290c:	add	r0, sp, #392	; 0x188
   12910:	bl	1f26c <__assert_fail@plt+0xd324>
   12914:	add	r1, sp, #392	; 0x188
   12918:	mov	r0, r6
   1291c:	bl	1f318 <__assert_fail@plt+0xd3d0>
   12920:	cmp	r0, #0
   12924:	bne	13010 <__assert_fail@plt+0x10c8>
   12928:	ldr	r1, [pc, #-1388]	; 123c4 <__assert_fail@plt+0x47c>
   1292c:	mov	r2, #5
   12930:	bl	11b58 <dcgettext@plt>
   12934:	ldr	r1, [sp, #36]	; 0x24
   12938:	mov	r4, r0
   1293c:	mov	r0, #4
   12940:	bl	1e7e0 <__assert_fail@plt+0xc898>
   12944:	mov	r3, r0
   12948:	mov	r2, r4
   1294c:	mov	r1, #0
   12950:	mov	r0, #2
   12954:	bl	11c90 <error@plt>
   12958:	mov	r3, #1
   1295c:	strb	r3, [r1, #1497]	; 0x5d9
   12960:	ldr	r2, [pc, #-1316]	; 12444 <__assert_fail@plt+0x4fc>
   12964:	mov	r3, #256	; 0x100
   12968:	str	r3, [r2]
   1296c:	b	12048 <__assert_fail@plt+0x100>
   12970:	ldr	r2, [pc, #-1448]	; 123d0 <__assert_fail@plt+0x488>
   12974:	ldr	r3, [pc, #-1376]	; 1241c <__assert_fail@plt+0x4d4>
   12978:	mov	r0, #1
   1297c:	ldr	r2, [r2]
   12980:	mov	r1, r3
   12984:	ldr	r3, [pc, #-1476]	; 123c8 <__assert_fail@plt+0x480>
   12988:	str	r2, [sp, #4]
   1298c:	add	r2, r3, #8
   12990:	ldr	r1, [r1]
   12994:	str	r0, [sp, #8]
   12998:	str	r0, [sp]
   1299c:	ldr	r0, [pc, #-1496]	; 123cc <__assert_fail@plt+0x484>
   129a0:	bl	19a24 <__assert_fail@plt+0x7adc>
   129a4:	ldr	r3, [pc, #-1416]	; 12424 <__assert_fail@plt+0x4dc>
   129a8:	add	r0, r3, r0
   129ac:	ldrb	r6, [r0, #904]	; 0x388
   129b0:	mov	r3, #0
   129b4:	mov	r2, #2
   129b8:	add	r1, sp, #248	; 0xf8
   129bc:	add	r0, sp, #392	; 0x188
   129c0:	strb	r6, [sp, #392]	; 0x188
   129c4:	strb	r3, [sp, #393]	; 0x189
   129c8:	bl	15318 <__assert_fail@plt+0x33d0>
   129cc:	b	12348 <__assert_fail@plt+0x400>
   129d0:	ldr	r3, [pc, #-1468]	; 1241c <__assert_fail@plt+0x4d4>
   129d4:	ldr	r1, [r3]
   129d8:	cmp	r1, #0
   129dc:	moveq	r6, #99	; 0x63
   129e0:	beq	12a14 <__assert_fail@plt+0xacc>
   129e4:	ldr	r2, [pc, #-1564]	; 123d0 <__assert_fail@plt+0x488>
   129e8:	mov	r3, #1
   129ec:	ldr	r0, [pc, #-1568]	; 123d4 <__assert_fail@plt+0x48c>
   129f0:	ldr	r2, [r2]
   129f4:	str	r3, [sp]
   129f8:	stmib	sp, {r2, r3}
   129fc:	ldr	r3, [sp, #64]	; 0x40
   12a00:	ldr	r2, [pc, #-1584]	; 123d8 <__assert_fail@plt+0x490>
   12a04:	bl	19a24 <__assert_fail@plt+0x7adc>
   12a08:	ldr	r3, [pc, #-1516]	; 12424 <__assert_fail@plt+0x4dc>
   12a0c:	add	r0, r3, r0
   12a10:	ldrb	r6, [r0, #940]	; 0x3ac
   12a14:	cmp	r4, #0
   12a18:	beq	12a24 <__assert_fail@plt+0xadc>
   12a1c:	cmp	r6, r4
   12a20:	bne	14b1c <__assert_fail@plt+0x2bd4>
   12a24:	uxtb	r4, r6
   12a28:	b	12348 <__assert_fail@plt+0x400>
   12a2c:	mov	r2, #5
   12a30:	ldr	r1, [pc, #-1628]	; 123dc <__assert_fail@plt+0x494>
   12a34:	mov	r0, #0
   12a38:	bl	11b58 <dcgettext@plt>
   12a3c:	ldr	r1, [fp]
   12a40:	mov	r4, r0
   12a44:	mov	r0, #4
   12a48:	bl	1e7e0 <__assert_fail@plt+0xc898>
   12a4c:	mov	r1, #0
   12a50:	mov	r2, r4
   12a54:	mov	r3, r0
   12a58:	mov	r0, r1
   12a5c:	bl	11c90 <error@plt>
   12a60:	ldr	r3, [pc, #-1672]	; 123e0 <__assert_fail@plt+0x498>
   12a64:	mov	r2, #5
   12a68:	ldr	r1, [pc, #-1676]	; 123e4 <__assert_fail@plt+0x49c>
   12a6c:	mov	r0, #0
   12a70:	ldr	r4, [r3]
   12a74:	bl	11b58 <dcgettext@plt>
   12a78:	ldr	r2, [pc, #-1688]	; 123e8 <__assert_fail@plt+0x4a0>
   12a7c:	mov	r1, #1
   12a80:	mov	r3, r0
   12a84:	mov	r0, r4
   12a88:	bl	11dd4 <__fprintf_chk@plt>
   12a8c:	mov	r0, #2
   12a90:	bl	19288 <__assert_fail@plt+0x7340>
   12a94:	ldr	r3, [pc, #-1664]	; 1241c <__assert_fail@plt+0x4d4>
   12a98:	ldr	r2, [pc, #-1716]	; 123ec <__assert_fail@plt+0x4a4>
   12a9c:	mov	r1, r3
   12aa0:	ldr	ip, [sp, #144]	; 0x90
   12aa4:	ldr	r1, [r1]
   12aa8:	add	r3, sp, #392	; 0x188
   12aac:	str	r2, [sp]
   12ab0:	mov	r0, r1
   12ab4:	mov	sl, r1
   12ab8:	mov	r2, #10
   12abc:	add	r1, sp, #288	; 0x120
   12ac0:	mov	fp, ip
   12ac4:	bl	20928 <__assert_fail@plt+0xe9e0>
   12ac8:	cmp	r0, #0
   12acc:	beq	12f94 <__assert_fail@plt+0x104c>
   12ad0:	cmp	r0, #2
   12ad4:	beq	1373c <__assert_fail@plt+0x17f4>
   12ad8:	mov	r8, sl
   12adc:	str	r8, [sp]
   12ae0:	mov	r1, fp
   12ae4:	ldr	r3, [pc, #-1780]	; 123f8 <__assert_fail@plt+0x4b0>
   12ae8:	mov	r2, #83	; 0x53
   12aec:	bl	207e0 <__assert_fail@plt+0xe898>
   12af0:	ldr	r3, [pc, #-1756]	; 1241c <__assert_fail@plt+0x4d4>
   12af4:	ldr	r0, [r3]
   12af8:	bl	15750 <__assert_fail@plt+0x3808>
   12afc:	b	12348 <__assert_fail@plt+0x400>
   12b00:	ldr	r3, [sp, #40]	; 0x28
   12b04:	cmp	r3, #0
   12b08:	ldr	r3, [pc, #-1780]	; 1241c <__assert_fail@plt+0x4d4>
   12b0c:	mov	fp, r3
   12b10:	beq	12b28 <__assert_fail@plt+0xbe0>
   12b14:	ldr	r0, [sp, #40]	; 0x28
   12b18:	ldr	r1, [r3]
   12b1c:	bl	11a2c <strcmp@plt>
   12b20:	cmp	r0, #0
   12b24:	bne	14bcc <__assert_fail@plt+0x2c84>
   12b28:	ldr	r3, [fp]
   12b2c:	str	r3, [sp, #40]	; 0x28
   12b30:	b	12348 <__assert_fail@plt+0x400>
   12b34:	ldr	r2, [pc, #-1784]	; 12444 <__assert_fail@plt+0x4fc>
   12b38:	mov	r3, #1
   12b3c:	strb	r3, [r2, #1310]	; 0x51e
   12b40:	b	12348 <__assert_fail@plt+0x400>
   12b44:	ldr	r3, [pc, #-1840]	; 1241c <__assert_fail@plt+0x4d4>
   12b48:	mov	fp, r3
   12b4c:	ldr	r0, [r3]
   12b50:	ldrb	r2, [r0]
   12b54:	cmp	r2, #0
   12b58:	beq	14bc0 <__assert_fail@plt+0x2c78>
   12b5c:	ldrb	r3, [r0, #1]
   12b60:	cmp	r3, #0
   12b64:	beq	12b7c <__assert_fail@plt+0xc34>
   12b68:	ldr	r1, [pc, #-1920]	; 123f0 <__assert_fail@plt+0x4a8>
   12b6c:	bl	11a2c <strcmp@plt>
   12b70:	cmp	r0, #0
   12b74:	bne	14ba0 <__assert_fail@plt+0x2c58>
   12b78:	mov	r2, r0
   12b7c:	ldr	ip, [pc, #-1860]	; 12440 <__assert_fail@plt+0x4f8>
   12b80:	ldr	r3, [ip, #96]	; 0x60
   12b84:	cmp	r3, #256	; 0x100
   12b88:	beq	12b94 <__assert_fail@plt+0xc4c>
   12b8c:	cmp	r3, r2
   12b90:	bne	14b94 <__assert_fail@plt+0x2c4c>
   12b94:	str	r2, [ip, #96]	; 0x60
   12b98:	b	12348 <__assert_fail@plt+0x400>
   12b9c:	ldr	r2, [pc, #-1888]	; 12444 <__assert_fail@plt+0x4fc>
   12ba0:	mov	r3, #1
   12ba4:	strb	r3, [r2, #1309]	; 0x51d
   12ba8:	b	12348 <__assert_fail@plt+0x400>
   12bac:	ldr	r3, [pc, #-1944]	; 1241c <__assert_fail@plt+0x4d4>
   12bb0:	mov	r2, #40	; 0x28
   12bb4:	mov	fp, r3
   12bb8:	add	r3, sp, #208	; 0xd0
   12bbc:	mov	sl, r3
   12bc0:	mov	r0, r3
   12bc4:	mov	r1, #0
   12bc8:	bl	11d98 <memset@plt>
   12bcc:	mvn	r3, #0
   12bd0:	mov	r1, sl
   12bd4:	ldr	r0, [fp]
   12bd8:	ldr	r2, [pc, #-2028]	; 123f4 <__assert_fail@plt+0x4ac>
   12bdc:	str	r3, [sp, #216]	; 0xd8
   12be0:	bl	16684 <__assert_fail@plt+0x473c>
   12be4:	ldr	r3, [sp, #208]	; 0xd0
   12be8:	cmp	r3, #0
   12bec:	sub	r3, r3, #1
   12bf0:	str	r3, [sp, #208]	; 0xd0
   12bf4:	beq	14aec <__assert_fail@plt+0x2ba4>
   12bf8:	ldrb	r2, [r0]
   12bfc:	cmp	r2, #46	; 0x2e
   12c00:	beq	13cd8 <__assert_fail@plt+0x1d90>
   12c04:	cmp	r3, #0
   12c08:	bne	12c1c <__assert_fail@plt+0xcd4>
   12c0c:	ldr	r3, [sp, #212]	; 0xd4
   12c10:	cmp	r3, #0
   12c14:	mvneq	r3, #0
   12c18:	streq	r3, [sp, #208]	; 0xd0
   12c1c:	mov	r2, #0
   12c20:	mov	r1, sl
   12c24:	bl	15318 <__assert_fail@plt+0x33d0>
   12c28:	ldrb	r3, [r0]
   12c2c:	cmp	r3, #44	; 0x2c
   12c30:	beq	13c98 <__assert_fail@plt+0x1d50>
   12c34:	mvn	r2, #0
   12c38:	mov	r3, #0
   12c3c:	str	r2, [sp, #216]	; 0xd8
   12c40:	str	r3, [sp, #220]	; 0xdc
   12c44:	ldrb	r3, [r0]
   12c48:	cmp	r3, #0
   12c4c:	bne	14964 <__assert_fail@plt+0x2a1c>
   12c50:	mov	r0, sl
   12c54:	mov	r1, #40	; 0x28
   12c58:	bl	204d0 <__assert_fail@plt+0xe588>
   12c5c:	ldr	r3, [pc, #-2080]	; 12444 <__assert_fail@plt+0x4fc>
   12c60:	ldr	r2, [r3, #1176]	; 0x498
   12c64:	cmp	r2, #0
   12c68:	ldrne	fp, [sp, #16]
   12c6c:	bne	12c78 <__assert_fail@plt+0xd30>
   12c70:	b	13788 <__assert_fail@plt+0x1840>
   12c74:	mov	r2, r3
   12c78:	ldr	r3, [r2, #36]	; 0x24
   12c7c:	cmp	r3, #0
   12c80:	bne	12c74 <__assert_fail@plt+0xd2c>
   12c84:	add	r2, r2, #36	; 0x24
   12c88:	str	fp, [sp, #16]
   12c8c:	mov	r3, #0
   12c90:	str	r0, [r2]
   12c94:	str	r3, [r0, #36]	; 0x24
   12c98:	b	12348 <__assert_fail@plt+0x400>
   12c9c:	mov	r3, #1
   12ca0:	str	r3, [sp, #44]	; 0x2c
   12ca4:	b	12348 <__assert_fail@plt+0x400>
   12ca8:	ldr	r3, [sp, #48]	; 0x30
   12cac:	cmp	r3, #0
   12cb0:	ldr	r3, [pc, #-2204]	; 1241c <__assert_fail@plt+0x4d4>
   12cb4:	mov	fp, r3
   12cb8:	beq	12cd0 <__assert_fail@plt+0xd88>
   12cbc:	ldr	r0, [sp, #48]	; 0x30
   12cc0:	ldr	r1, [r3]
   12cc4:	bl	11a2c <strcmp@plt>
   12cc8:	cmp	r0, #0
   12ccc:	bne	14b24 <__assert_fail@plt+0x2bdc>
   12cd0:	ldr	r3, [fp]
   12cd4:	str	r3, [sp, #48]	; 0x30
   12cd8:	b	12348 <__assert_fail@plt+0x400>
   12cdc:	ldr	r3, [pc, #-2208]	; 12444 <__assert_fail@plt+0x4fc>
   12ce0:	ldr	r0, [r3, #1164]	; 0x48c
   12ce4:	ldr	r3, [pc, #-2256]	; 1241c <__assert_fail@plt+0x4d4>
   12ce8:	cmp	r0, #0
   12cec:	mov	fp, r3
   12cf0:	beq	12d04 <__assert_fail@plt+0xdbc>
   12cf4:	ldr	r1, [r3]
   12cf8:	bl	11a2c <strcmp@plt>
   12cfc:	cmp	r0, #0
   12d00:	bne	14b0c <__assert_fail@plt+0x2bc4>
   12d04:	ldr	r2, [pc, #-2248]	; 12444 <__assert_fail@plt+0x4fc>
   12d08:	ldr	r3, [fp]
   12d0c:	str	r3, [r2, #1164]	; 0x48c
   12d10:	b	12348 <__assert_fail@plt+0x400>
   12d14:	ldr	r2, [pc, #-2264]	; 12444 <__assert_fail@plt+0x4fc>
   12d18:	mov	r3, #1
   12d1c:	strb	r3, [r2, #1308]	; 0x51c
   12d20:	b	12348 <__assert_fail@plt+0x400>
   12d24:	ldr	r3, [pc, #-2320]	; 1241c <__assert_fail@plt+0x4d4>
   12d28:	ldr	r3, [r3]
   12d2c:	str	r3, [sp, #36]	; 0x24
   12d30:	b	12348 <__assert_fail@plt+0x400>
   12d34:	ldr	r3, [pc, #-2336]	; 1241c <__assert_fail@plt+0x4d4>
   12d38:	ldr	r2, [pc, #-2348]	; 12414 <__assert_fail@plt+0x4cc>
   12d3c:	mov	r1, r3
   12d40:	ldr	ip, [sp, #144]	; 0x90
   12d44:	ldr	r1, [r1]
   12d48:	add	r3, sp, #176	; 0xb0
   12d4c:	str	r2, [sp]
   12d50:	mov	r0, r1
   12d54:	mov	r2, #10
   12d58:	mov	fp, r1
   12d5c:	mov	r1, #0
   12d60:	mov	sl, ip
   12d64:	bl	20928 <__assert_fail@plt+0xe9e0>
   12d68:	add	r1, sp, #392	; 0x188
   12d6c:	str	r0, [sp, #68]	; 0x44
   12d70:	mov	r0, #7
   12d74:	bl	11b94 <getrlimit64@plt>
   12d78:	ldr	r3, [sp, #68]	; 0x44
   12d7c:	cmp	r0, #0
   12d80:	movne	lr, #17
   12d84:	ldreq	lr, [sp, #392]	; 0x188
   12d88:	subeq	lr, lr, #3
   12d8c:	cmp	r3, #0
   12d90:	beq	12efc <__assert_fail@plt+0xfb4>
   12d94:	ldr	r8, [sp, #68]	; 0x44
   12d98:	mov	r6, lr
   12d9c:	cmp	r8, #1
   12da0:	beq	12f1c <__assert_fail@plt+0xfd4>
   12da4:	str	fp, [sp]
   12da8:	mov	r1, sl
   12dac:	mov	r0, r8
   12db0:	ldr	r3, [pc, #-2496]	; 123f8 <__assert_fail@plt+0x4b0>
   12db4:	mov	r2, #4
   12db8:	bl	207e0 <__assert_fail@plt+0xe898>
   12dbc:	ldr	r3, [pc, #-2504]	; 123fc <__assert_fail@plt+0x4b4>
   12dc0:	ldr	r0, [pc, #-2504]	; 12400 <__assert_fail@plt+0x4b8>
   12dc4:	ldr	r1, [pc, #-2504]	; 12404 <__assert_fail@plt+0x4bc>
   12dc8:	ldr	r2, [pc, #-2504]	; 12408 <__assert_fail@plt+0x4c0>
   12dcc:	mov	r4, #0
   12dd0:	ldr	r0, [r0]
   12dd4:	ldr	r3, [r3]
   12dd8:	str	r1, [sp, #4]
   12ddc:	str	r2, [sp]
   12de0:	str	r4, [sp, #8]
   12de4:	ldr	r2, [pc, #-2528]	; 1240c <__assert_fail@plt+0x4c4>
   12de8:	ldr	r1, [pc, #-2528]	; 12410 <__assert_fail@plt+0x4c8>
   12dec:	bl	1ff4c <__assert_fail@plt+0xe004>
   12df0:	mov	r0, r4
   12df4:	bl	11d38 <exit@plt>
   12df8:	mov	r0, #0
   12dfc:	bl	19288 <__assert_fail@plt+0x7340>
   12e00:	ldr	r3, [pc, #-2540]	; 1241c <__assert_fail@plt+0x4d4>
   12e04:	ldr	r2, [pc, #-2552]	; 12414 <__assert_fail@plt+0x4cc>
   12e08:	mov	r1, r3
   12e0c:	ldr	ip, [sp, #144]	; 0x90
   12e10:	ldr	r1, [r1]
   12e14:	add	r3, sp, #392	; 0x188
   12e18:	str	r2, [sp]
   12e1c:	mov	r0, r1
   12e20:	mov	fp, r1
   12e24:	mov	r2, #10
   12e28:	mov	r1, #0
   12e2c:	mov	sl, ip
   12e30:	bl	20928 <__assert_fail@plt+0xe9e0>
   12e34:	cmp	r0, #1
   12e38:	beq	13004 <__assert_fail@plt+0x10bc>
   12e3c:	cmp	r0, #0
   12e40:	bne	1476c <__assert_fail@plt+0x2824>
   12e44:	add	r3, sp, #392	; 0x188
   12e48:	mov	fp, #0
   12e4c:	ldrd	r2, [r3]
   12e50:	mvn	sl, #0
   12e54:	cmp	r3, fp
   12e58:	cmpeq	r2, sl
   12e5c:	bhi	13494 <__assert_fail@plt+0x154c>
   12e60:	orrs	ip, r2, r3
   12e64:	beq	14780 <__assert_fail@plt+0x2838>
   12e68:	str	r2, [sp, #52]	; 0x34
   12e6c:	b	12348 <__assert_fail@plt+0x400>
   12e70:	ldr	r3, [pc, #-2656]	; 12418 <__assert_fail@plt+0x4d0>
   12e74:	ldr	r2, [pc, #-2656]	; 1241c <__assert_fail@plt+0x4d4>
   12e78:	ldr	r1, [r3]
   12e7c:	ldr	r0, [r2]
   12e80:	sub	r2, r1, #-1073741823	; 0xc0000001
   12e84:	ldr	r2, [r7, r2, lsl #2]
   12e88:	cmp	r2, r0
   12e8c:	bne	12348 <__assert_fail@plt+0x400>
   12e90:	ldr	fp, [sp, #16]
   12e94:	sub	r2, r2, #1
   12e98:	ldrb	r0, [r2, #1]!
   12e9c:	sub	ip, r0, #48	; 0x30
   12ea0:	cmp	ip, #9
   12ea4:	bls	12e98 <__assert_fail@plt+0xf50>
   12ea8:	cmp	r0, #0
   12eac:	subne	r1, r1, #1
   12eb0:	str	fp, [sp, #16]
   12eb4:	str	r1, [r3]
   12eb8:	b	12348 <__assert_fail@plt+0x400>
   12ebc:	ldr	r3, [pc, #-2728]	; 1241c <__assert_fail@plt+0x4d4>
   12ec0:	mov	fp, r3
   12ec4:	ldr	r3, [r3]
   12ec8:	str	r3, [sp, #88]	; 0x58
   12ecc:	ldrb	r3, [r3]
   12ed0:	cmp	r3, #43	; 0x2b
   12ed4:	beq	135ac <__assert_fail@plt+0x1664>
   12ed8:	ldr	r2, [sp, #16]
   12edc:	ldr	r3, [fp]
   12ee0:	str	r3, [r2, r5, lsl #2]
   12ee4:	add	r5, r5, #1
   12ee8:	b	12348 <__assert_fail@plt+0x400>
   12eec:	ldr	ip, [pc, #-2740]	; 12440 <__assert_fail@plt+0x4f8>
   12ef0:	mov	r3, #0
   12ef4:	strb	r3, [ip, #100]	; 0x64
   12ef8:	b	12348 <__assert_fail@plt+0x400>
   12efc:	ldrd	r2, [sp, #176]	; 0xb0
   12f00:	ldr	ip, [pc, #-2760]	; 12440 <__assert_fail@plt+0x4f8>
   12f04:	mov	r1, #0
   12f08:	cmp	r3, r1
   12f0c:	cmpeq	r2, r2
   12f10:	str	r2, [ip, #112]	; 0x70
   12f14:	beq	13774 <__assert_fail@plt+0x182c>
   12f18:	mov	r6, lr
   12f1c:	mov	r2, #5
   12f20:	ldr	r1, [pc, #-2824]	; 12420 <__assert_fail@plt+0x4d8>
   12f24:	mov	r0, #0
   12f28:	bl	11b58 <dcgettext@plt>
   12f2c:	ldr	r3, [pc, #-2832]	; 12424 <__assert_fail@plt+0x4dc>
   12f30:	mov	r5, r0
   12f34:	mov	r0, fp
   12f38:	add	fp, r3, sl, lsl #4
   12f3c:	ldr	r4, [fp, #368]	; 0x170
   12f40:	bl	1ea20 <__assert_fail@plt+0xcad8>
   12f44:	mov	r1, #0
   12f48:	mov	r2, r5
   12f4c:	mov	r3, r4
   12f50:	str	r0, [sp]
   12f54:	mov	r0, r1
   12f58:	bl	11c90 <error@plt>
   12f5c:	ldr	r1, [pc, #-2876]	; 12428 <__assert_fail@plt+0x4e0>
   12f60:	mov	r2, #5
   12f64:	mov	r0, #0
   12f68:	bl	11b58 <dcgettext@plt>
   12f6c:	add	r1, sp, #288	; 0x120
   12f70:	mov	r5, r0
   12f74:	mov	r0, r6
   12f78:	bl	1c378 <__assert_fail@plt+0xa430>
   12f7c:	str	r0, [sp]
   12f80:	mov	r3, r4
   12f84:	mov	r2, r5
   12f88:	mov	r1, #0
   12f8c:	mov	r0, #2
   12f90:	bl	11c90 <error@plt>
   12f94:	ldr	r3, [sp, #288]	; 0x120
   12f98:	ldrb	r3, [r3, #-1]
   12f9c:	sub	r3, r3, #48	; 0x30
   12fa0:	cmp	r3, #9
   12fa4:	bls	13460 <__assert_fail@plt+0x1518>
   12fa8:	ldr	r3, [pc, #-2924]	; 12444 <__assert_fail@plt+0x4fc>
   12fac:	mov	r1, #0
   12fb0:	ldr	r0, [r3, #1488]	; 0x5d0
   12fb4:	add	r3, sp, #392	; 0x188
   12fb8:	ldrd	r2, [r3]
   12fbc:	cmp	r1, r3
   12fc0:	cmpeq	r0, r2
   12fc4:	bhi	12348 <__assert_fail@plt+0x400>
   12fc8:	mov	r1, #0
   12fcc:	cmp	r3, r1
   12fd0:	ldr	r1, [pc, #-2964]	; 12444 <__assert_fail@plt+0x4fc>
   12fd4:	cmpeq	r2, r2
   12fd8:	str	r2, [r1, #1488]	; 0x5d0
   12fdc:	bne	13794 <__assert_fail@plt+0x184c>
   12fe0:	ldr	ip, [pc, #-2984]	; 12440 <__assert_fail@plt+0x4f8>
   12fe4:	mov	r3, #18
   12fe8:	ldr	r1, [ip, #112]	; 0x70
   12fec:	mul	r3, r3, r1
   12ff0:	cmp	r3, r2
   12ff4:	movcc	r3, r2
   12ff8:	ldr	r2, [pc, #-3004]	; 12444 <__assert_fail@plt+0x4fc>
   12ffc:	str	r3, [r2, #1488]	; 0x5d0
   13000:	b	12348 <__assert_fail@plt+0x400>
   13004:	mvn	r3, #0
   13008:	str	r3, [sp, #52]	; 0x34
   1300c:	b	12348 <__assert_fail@plt+0x400>
   13010:	mov	r0, r6
   13014:	ldr	r1, [sp, #36]	; 0x24
   13018:	bl	1677c <__assert_fail@plt+0x4834>
   1301c:	ldr	r3, [sp, #392]	; 0x188
   13020:	cmp	r3, #0
   13024:	beq	1349c <__assert_fail@plt+0x1554>
   13028:	mov	r0, fp
   1302c:	bl	1afe8 <__assert_fail@plt+0x90a0>
   13030:	ldr	fp, [sp, #396]	; 0x18c
   13034:	ldr	r6, [sp, #392]	; 0x188
   13038:	mov	sl, fp
   1303c:	b	1306c <__assert_fail@plt+0x1124>
   13040:	mov	r8, sl
   13044:	ldr	r7, [sl], #4
   13048:	ldr	r1, [pc, #-3108]	; 1242c <__assert_fail@plt+0x4e4>
   1304c:	mov	r0, r7
   13050:	bl	11a2c <strcmp@plt>
   13054:	subs	r3, r0, #0
   13058:	beq	14628 <__assert_fail@plt+0x26e0>
   1305c:	ldrb	r7, [r7]
   13060:	cmp	r7, #0
   13064:	beq	145e8 <__assert_fail@plt+0x26a0>
   13068:	add	r5, r5, #1
   1306c:	cmp	r5, r6
   13070:	bne	13040 <__assert_fail@plt+0x10f8>
   13074:	ldr	r3, [pc, #-3128]	; 12444 <__assert_fail@plt+0x4fc>
   13078:	ldr	r1, [r3, #1176]	; 0x498
   1307c:	cmp	r1, #0
   13080:	beq	14574 <__assert_fail@plt+0x262c>
   13084:	mov	r3, #0
   13088:	mov	r6, r3
   1308c:	mov	r0, r1
   13090:	bl	151ac <__assert_fail@plt+0x3264>
   13094:	cmp	r0, #0
   13098:	beq	13100 <__assert_fail@plt+0x11b8>
   1309c:	ldrb	r3, [r1, #31]
   130a0:	cmp	r3, #0
   130a4:	bne	13100 <__assert_fail@plt+0x11b8>
   130a8:	ldrb	r3, [sp, #278]	; 0x116
   130ac:	ldrb	r2, [sp, #273]	; 0x111
   130b0:	ldrb	r0, [sp, #272]	; 0x110
   130b4:	strb	r3, [r1, #30]
   130b8:	ldrb	r3, [sp, #277]	; 0x115
   130bc:	strb	r0, [r1, #24]
   130c0:	ldrb	r0, [sp, #274]	; 0x112
   130c4:	strb	r2, [r1, #25]
   130c8:	ldrb	r2, [sp, #276]	; 0x114
   130cc:	strb	r0, [r1, #26]
   130d0:	ldrb	r0, [sp, #280]	; 0x118
   130d4:	strb	r2, [r1, #28]
   130d8:	strb	r3, [r1, #29]
   130dc:	ldrb	r2, [sp, #275]	; 0x113
   130e0:	ldrb	r3, [sp, #279]	; 0x117
   130e4:	strb	r0, [r1, #32]
   130e8:	strb	r2, [r1, #27]
   130ec:	strb	r3, [r1, #31]
   130f0:	ldr	r2, [sp, #264]	; 0x108
   130f4:	ldr	r3, [sp, #268]	; 0x10c
   130f8:	str	r2, [r1, #16]
   130fc:	str	r3, [r1, #20]
   13100:	ldrb	r3, [r1, #27]
   13104:	ldr	r1, [r1, #36]	; 0x24
   13108:	cmp	r1, #0
   1310c:	orr	r6, r6, r3
   13110:	bne	1308c <__assert_fail@plt+0x1144>
   13114:	ldr	r3, [pc, #-3288]	; 12444 <__assert_fail@plt+0x4fc>
   13118:	str	r6, [sp, #64]	; 0x40
   1311c:	str	r1, [sp, #28]
   13120:	ldr	r0, [r3, #1176]	; 0x498
   13124:	ldrb	r1, [r0, #28]
   13128:	ldrb	r3, [r0, #26]
   1312c:	ldrb	ip, [r0, #29]
   13130:	ldrb	r2, [r0, #27]
   13134:	add	r3, r3, r1
   13138:	ldrb	r1, [r0, #32]
   1313c:	b	13158 <__assert_fail@plt+0x1210>
   13140:	ldrb	r1, [r0, #28]
   13144:	ldrb	r3, [r0, #26]
   13148:	ldrb	ip, [r0, #29]
   1314c:	ldrb	r2, [r0, #32]
   13150:	add	r3, r3, r1
   13154:	ldrb	r1, [r0, #27]
   13158:	add	r3, r3, ip
   1315c:	ldrb	ip, [r0, #30]
   13160:	orr	r2, r2, r1
   13164:	ldr	r1, [r0, #16]
   13168:	add	r3, r3, ip
   1316c:	cmp	r1, #0
   13170:	orrne	r2, r2, #1
   13174:	add	r3, r3, r2
   13178:	cmp	r3, #1
   1317c:	bgt	1474c <__assert_fail@plt+0x2804>
   13180:	ldr	r0, [r0, #36]	; 0x24
   13184:	cmp	r0, #0
   13188:	bne	13140 <__assert_fail@plt+0x11f8>
   1318c:	ldr	r3, [pc, #-3408]	; 12444 <__assert_fail@plt+0x4fc>
   13190:	ldrb	r3, [r3, #1308]	; 0x51c
   13194:	cmp	r3, #0
   13198:	beq	133b8 <__assert_fail@plt+0x1470>
   1319c:	ldr	r3, [sp, #40]	; 0x28
   131a0:	cmp	r3, #0
   131a4:	cmpeq	r9, #0
   131a8:	movne	r3, #1
   131ac:	moveq	r3, #0
   131b0:	str	r3, [sp, #16]
   131b4:	beq	137b8 <__assert_fail@plt+0x1870>
   131b8:	ldr	r0, [pc, #-3456]	; 12440 <__assert_fail@plt+0x4f8>
   131bc:	cmp	r9, #0
   131c0:	moveq	r9, #111	; 0x6f
   131c4:	strb	r9, [r0, #116]!	; 0x74
   131c8:	bl	15470 <__assert_fail@plt+0x3528>
   131cc:	ldr	r3, [sp, #60]	; 0x3c
   131d0:	ldr	r4, [sp, #100]	; 0x64
   131d4:	cmp	r3, #0
   131d8:	beq	13d0c <__assert_fail@plt+0x1dc4>
   131dc:	ldr	r6, [pc, #-3492]	; 12440 <__assert_fail@plt+0x4f8>
   131e0:	ldr	r3, [r6, #96]	; 0x60
   131e4:	cmp	r3, #256	; 0x100
   131e8:	beq	14970 <__assert_fail@plt+0x2a28>
   131ec:	ldr	r2, [pc, #-3504]	; 12444 <__assert_fail@plt+0x4fc>
   131f0:	ldr	r2, [r2]
   131f4:	sub	r3, r2, r3
   131f8:	clz	r3, r3
   131fc:	lsr	r3, r3, #5
   13200:	str	r3, [sp, #16]
   13204:	ldr	r3, [sp, #16]
   13208:	cmp	r3, #0
   1320c:	bne	14a60 <__assert_fail@plt+0x2b18>
   13210:	ldr	r3, [sp, #16]
   13214:	str	r3, [sp, #60]	; 0x3c
   13218:	ldr	r7, [r6, #96]	; 0x60
   1321c:	ldr	r3, [pc, #-3552]	; 12444 <__assert_fail@plt+0x4fc>
   13220:	cmp	r7, #256	; 0x100
   13224:	beq	149dc <__assert_fail@plt+0x2a94>
   13228:	ldrb	r3, [r3, #4]
   1322c:	cmp	r7, r3
   13230:	beq	14a04 <__assert_fail@plt+0x2abc>
   13234:	cmp	r7, #45	; 0x2d
   13238:	beq	1499c <__assert_fail@plt+0x2a54>
   1323c:	ldr	r3, [sp, #68]	; 0x44
   13240:	cmp	r7, #43	; 0x2b
   13244:	movne	r3, #0
   13248:	andeq	r3, r3, #1
   1324c:	cmp	r3, #0
   13250:	beq	13294 <__assert_fail@plt+0x134c>
   13254:	mov	r2, #5
   13258:	ldr	r1, [pc, #-3632]	; 12430 <__assert_fail@plt+0x4e8>
   1325c:	mov	r0, #0
   13260:	bl	11b58 <dcgettext@plt>
   13264:	mov	r4, #0
   13268:	mov	r3, #43	; 0x2b
   1326c:	strb	r3, [sp, #108]	; 0x6c
   13270:	strb	r4, [sp, #109]	; 0x6d
   13274:	mov	r7, r0
   13278:	add	r0, sp, #108	; 0x6c
   1327c:	bl	1ea20 <__assert_fail@plt+0xcad8>
   13280:	mov	r2, r7
   13284:	mov	r1, r4
   13288:	mov	r3, r0
   1328c:	mov	r0, r4
   13290:	bl	11c90 <error@plt>
   13294:	ldr	r3, [sp, #32]
   13298:	ldr	r2, [sp, #56]	; 0x38
   1329c:	orr	r3, r3, r2
   132a0:	tst	r3, #255	; 0xff
   132a4:	beq	132d0 <__assert_fail@plt+0x1388>
   132a8:	ldr	r3, [sp, #60]	; 0x3c
   132ac:	cmp	r3, #0
   132b0:	beq	13d30 <__assert_fail@plt+0x1de8>
   132b4:	ldr	r3, [sp, #32]
   132b8:	cmp	r3, #0
   132bc:	beq	132d0 <__assert_fail@plt+0x1388>
   132c0:	ldr	r3, [pc, #-3716]	; 12444 <__assert_fail@plt+0x4fc>
   132c4:	ldrb	r3, [r3, #1497]	; 0x5d9
   132c8:	cmp	r3, #0
   132cc:	bne	14ac8 <__assert_fail@plt+0x2b80>
   132d0:	ldr	r0, [sp, #36]	; 0x24
   132d4:	bl	151ac <__assert_fail@plt+0x3264>
   132d8:	cmp	r0, #0
   132dc:	beq	145c0 <__assert_fail@plt+0x2678>
   132e0:	ldrb	r3, [sp, #319]	; 0x13f
   132e4:	cmp	r3, #0
   132e8:	beq	133b8 <__assert_fail@plt+0x1470>
   132ec:	ldr	r3, [pc, #-3760]	; 12444 <__assert_fail@plt+0x4fc>
   132f0:	ldrb	r6, [r3, #1310]	; 0x51e
   132f4:	cmp	r6, #0
   132f8:	bne	13308 <__assert_fail@plt+0x13c0>
   132fc:	ldrb	r6, [r3, #1309]	; 0x51d
   13300:	cmp	r6, #0
   13304:	beq	1337c <__assert_fail@plt+0x1434>
   13308:	ldr	r3, [pc, #-3788]	; 12444 <__assert_fail@plt+0x4fc>
   1330c:	ldr	r3, [r3, #1176]	; 0x498
   13310:	cmp	r3, #0
   13314:	beq	1336c <__assert_fail@plt+0x1424>
   13318:	add	r4, sp, #176	; 0xb0
   1331c:	mov	r1, r4
   13320:	ldr	r0, [sp, #36]	; 0x24
   13324:	bl	15220 <__assert_fail@plt+0x32d8>
   13328:	mov	r0, r4
   1332c:	bl	11d50 <strlen@plt>
   13330:	mov	r3, #5
   13334:	str	r3, [sp]
   13338:	ldr	r2, [pc, #-3852]	; 12434 <__assert_fail@plt+0x4ec>
   1333c:	ldr	r1, [pc, #-3852]	; 12438 <__assert_fail@plt+0x4f0>
   13340:	mov	r3, r0
   13344:	mov	r0, #0
   13348:	bl	11f3c <dcngettext@plt>
   1334c:	mov	r1, #0
   13350:	mov	r3, r4
   13354:	mov	r2, r0
   13358:	mov	r0, r1
   1335c:	bl	11c90 <error@plt>
   13360:	cmp	r6, #0
   13364:	strb	r6, [sp, #319]	; 0x13f
   13368:	beq	133b8 <__assert_fail@plt+0x1470>
   1336c:	ldr	r3, [pc, #-3888]	; 12444 <__assert_fail@plt+0x4fc>
   13370:	ldrb	r3, [r3, #1310]	; 0x51e
   13374:	cmp	r3, #0
   13378:	bne	133b8 <__assert_fail@plt+0x1470>
   1337c:	ldr	r3, [pc, #-3904]	; 12444 <__assert_fail@plt+0x4fc>
   13380:	ldrb	r4, [r3, #1309]	; 0x51d
   13384:	cmp	r4, #0
   13388:	bne	133b8 <__assert_fail@plt+0x1470>
   1338c:	ldr	r3, [r3, #1176]	; 0x498
   13390:	cmp	r3, #0
   13394:	beq	133b8 <__assert_fail@plt+0x1470>
   13398:	mov	r2, #5
   1339c:	ldr	r1, [pc, #-3944]	; 1243c <__assert_fail@plt+0x4f4>
   133a0:	mov	r0, r4
   133a4:	bl	11b58 <dcgettext@plt>
   133a8:	mov	r1, r4
   133ac:	mov	r2, r0
   133b0:	mov	r0, r4
   133b4:	bl	11c90 <error@plt>
   133b8:	ldr	r2, [sp, #64]	; 0x40
   133bc:	ldrb	r3, [sp, #279]	; 0x117
   133c0:	cmp	r2, #0
   133c4:	ldr	r2, [pc, #-3976]	; 12444 <__assert_fail@plt+0x4fc>
   133c8:	strb	r3, [r2, #1468]	; 0x5bc
   133cc:	bne	134ac <__assert_fail@plt+0x1564>
   133d0:	ldr	r3, [pc, #-3988]	; 12444 <__assert_fail@plt+0x4fc>
   133d4:	ldr	r3, [r3, #1152]	; 0x480
   133d8:	cmp	r3, #0
   133dc:	beq	13524 <__assert_fail@plt+0x15dc>
   133e0:	cmp	r5, #0
   133e4:	beq	13500 <__assert_fail@plt+0x15b8>
   133e8:	ldr	r3, [pc, #-4012]	; 12444 <__assert_fail@plt+0x4fc>
   133ec:	ldr	r2, [r3, #1488]	; 0x5d0
   133f0:	cmp	r2, #0
   133f4:	beq	13418 <__assert_fail@plt+0x14d0>
   133f8:	ldr	r1, [pc, #-4032]	; 12440 <__assert_fail@plt+0x4f8>
   133fc:	mov	r3, #18
   13400:	ldr	r1, [r1, #112]	; 0x70
   13404:	mul	r3, r3, r1
   13408:	cmp	r3, r2
   1340c:	movcc	r3, r2
   13410:	ldr	r2, [pc, #-4052]	; 12444 <__assert_fail@plt+0x4fc>
   13414:	str	r3, [r2, #1488]	; 0x5d0
   13418:	cmp	r9, #0
   1341c:	beq	13540 <__assert_fail@plt+0x15f8>
   13420:	cmp	r5, #1
   13424:	bls	137a0 <__assert_fail@plt+0x1858>
   13428:	mov	r2, #5
   1342c:	ldr	r1, [pc, #-4076]	; 12448 <__assert_fail@plt+0x500>
   13430:	mov	r0, #0
   13434:	bl	11b58 <dcgettext@plt>
   13438:	ldr	r1, [fp, #4]
   1343c:	mov	r4, r0
   13440:	mov	r0, #4
   13444:	bl	1e7e0 <__assert_fail@plt+0xc898>
   13448:	mov	r2, r4
   1344c:	str	r9, [sp]
   13450:	mov	r1, #0
   13454:	mov	r3, r0
   13458:	mov	r0, #2
   1345c:	bl	11c90 <error@plt>
   13460:	add	r3, sp, #392	; 0x188
   13464:	ldr	r1, [pc, #3444]	; 141e0 <__assert_fail@plt+0x2298>
   13468:	ldrd	r2, [r3]
   1346c:	mvn	r0, #0
   13470:	cmp	r3, r1
   13474:	cmpeq	r2, r0
   13478:	bhi	13794 <__assert_fail@plt+0x184c>
   1347c:	lsl	r3, r3, #10
   13480:	orr	r3, r3, r2, lsr #22
   13484:	lsl	r2, r2, #10
   13488:	str	r3, [sp, #396]	; 0x18c
   1348c:	str	r2, [sp, #392]	; 0x188
   13490:	b	12fa8 <__assert_fail@plt+0x1060>
   13494:	mvn	r2, #0
   13498:	b	12e68 <__assert_fail@plt+0xf20>
   1349c:	mov	r2, #5
   134a0:	ldr	r1, [pc, #3388]	; 141e4 <__assert_fail@plt+0x229c>
   134a4:	mov	r0, r5
   134a8:	b	12930 <__assert_fail@plt+0x9e8>
   134ac:	mov	r1, #16
   134b0:	ldr	r0, [sp, #48]	; 0x30
   134b4:	bl	1ead8 <__assert_fail@plt+0xcb90>
   134b8:	subs	r4, r0, #0
   134bc:	beq	14720 <__assert_fail@plt+0x27d8>
   134c0:	add	r3, sp, #288	; 0x120
   134c4:	mov	r1, r3
   134c8:	mov	r2, #16
   134cc:	str	r3, [sp, #36]	; 0x24
   134d0:	bl	1ec24 <__assert_fail@plt+0xccdc>
   134d4:	mov	r0, r4
   134d8:	bl	1ed7c <__assert_fail@plt+0xce34>
   134dc:	cmp	r0, #0
   134e0:	bne	146b4 <__assert_fail@plt+0x276c>
   134e4:	ldr	r0, [pc, #3324]	; 141e8 <__assert_fail@plt+0x22a0>
   134e8:	bl	19c00 <__assert_fail@plt+0x7cb8>
   134ec:	ldr	r0, [sp, #36]	; 0x24
   134f0:	ldr	r2, [pc, #3312]	; 141e8 <__assert_fail@plt+0x22a0>
   134f4:	mov	r1, #16
   134f8:	bl	1a794 <__assert_fail@plt+0x884c>
   134fc:	b	133d0 <__assert_fail@plt+0x1488>
   13500:	mov	r0, fp
   13504:	bl	1afe8 <__assert_fail@plt+0x90a0>
   13508:	mov	r0, #4
   1350c:	bl	20048 <__assert_fail@plt+0xe100>
   13510:	ldr	r3, [pc, #3436]	; 14284 <__assert_fail@plt+0x233c>
   13514:	mov	r5, #1
   13518:	mov	fp, r0
   1351c:	str	r3, [r0]
   13520:	b	133e8 <__assert_fail@plt+0x14a0>
   13524:	ldr	r0, [pc, #3264]	; 141ec <__assert_fail@plt+0x22a4>
   13528:	bl	11cb4 <getenv@plt>
   1352c:	ldr	r3, [pc, #3260]	; 141f0 <__assert_fail@plt+0x22a8>
   13530:	cmp	r0, #0
   13534:	moveq	r0, r3
   13538:	bl	15750 <__assert_fail@plt+0x3808>
   1353c:	b	133e0 <__assert_fail@plt+0x1498>
   13540:	mov	sl, r9
   13544:	str	fp, [sp, #68]	; 0x44
   13548:	mov	r8, fp
   1354c:	ldr	r6, [pc, #3376]	; 14284 <__assert_fail@plt+0x233c>
   13550:	mov	r7, #4
   13554:	b	1355c <__assert_fail@plt+0x1614>
   13558:	add	sl, sl, #1
   1355c:	cmp	r5, sl
   13560:	beq	13dec <__assert_fail@plt+0x1ea4>
   13564:	mov	r4, r8
   13568:	ldr	r9, [r8], #4
   1356c:	mov	r1, r6
   13570:	mov	r0, r9
   13574:	bl	11a2c <strcmp@plt>
   13578:	cmp	r0, #0
   1357c:	beq	13558 <__assert_fail@plt+0x1610>
   13580:	mov	r0, r9
   13584:	mov	r1, r7
   13588:	bl	11ec4 <euidaccess@plt>
   1358c:	cmp	r0, #0
   13590:	beq	13558 <__assert_fail@plt+0x1610>
   13594:	ldr	r1, [pc, #3160]	; 141f4 <__assert_fail@plt+0x22ac>
   13598:	mov	r2, #5
   1359c:	mov	r0, #0
   135a0:	bl	11b58 <dcgettext@plt>
   135a4:	ldr	r1, [r4]
   135a8:	bl	1554c <__assert_fail@plt+0x3604>
   135ac:	ldr	r3, [pc, #3140]	; 141f8 <__assert_fail@plt+0x22b0>
   135b0:	ldr	r2, [r3]
   135b4:	cmp	r9, r2
   135b8:	beq	135cc <__assert_fail@plt+0x1684>
   135bc:	ldr	r2, [r7, r2, lsl #2]
   135c0:	ldrb	r1, [r2]
   135c4:	cmp	r1, #45	; 0x2d
   135c8:	beq	145a4 <__assert_fail@plt+0x265c>
   135cc:	mov	r2, #0
   135d0:	str	r2, [sp, #68]	; 0x44
   135d4:	ldr	r1, [sp, #56]	; 0x38
   135d8:	ldr	r2, [sp, #68]	; 0x44
   135dc:	cmp	r1, #0
   135e0:	movne	r2, #0
   135e4:	andeq	r2, r2, #1
   135e8:	ldr	r1, [sp, #32]
   135ec:	orrs	r2, r1, r2
   135f0:	str	r2, [sp, #32]
   135f4:	beq	12ed8 <__assert_fail@plt+0xf90>
   135f8:	str	r3, [sp, #92]	; 0x5c
   135fc:	add	r3, sp, #208	; 0xd0
   13600:	mov	r0, r3
   13604:	mov	r2, #40	; 0x28
   13608:	mov	r1, #0
   1360c:	mov	sl, r3
   13610:	bl	11d98 <memset@plt>
   13614:	ldr	r3, [sp, #88]	; 0x58
   13618:	mov	r1, sl
   1361c:	add	r0, r3, #1
   13620:	mov	r2, #0
   13624:	mvn	r3, #0
   13628:	str	r3, [sp, #216]	; 0xd8
   1362c:	bl	16684 <__assert_fail@plt+0x473c>
   13630:	cmp	r0, #0
   13634:	beq	14aa8 <__assert_fail@plt+0x2b60>
   13638:	ldrb	r2, [r0]
   1363c:	ldr	r3, [sp, #92]	; 0x5c
   13640:	cmp	r2, #46	; 0x2e
   13644:	beq	146ec <__assert_fail@plt+0x27a4>
   13648:	ldr	r2, [sp, #208]	; 0xd0
   1364c:	cmp	r2, #0
   13650:	beq	146cc <__assert_fail@plt+0x2784>
   13654:	mov	r2, #0
   13658:	mov	r1, sl
   1365c:	str	r3, [sp, #88]	; 0x58
   13660:	bl	15318 <__assert_fail@plt+0x33d0>
   13664:	ldrb	r2, [r0]
   13668:	cmp	r2, #0
   1366c:	bne	12ed8 <__assert_fail@plt+0xf90>
   13670:	ldr	r3, [sp, #68]	; 0x44
   13674:	cmp	r3, #0
   13678:	beq	13700 <__assert_fail@plt+0x17b8>
   1367c:	ldr	r3, [sp, #88]	; 0x58
   13680:	ldr	r2, [pc, #2932]	; 141fc <__assert_fail@plt+0x22b4>
   13684:	ldr	r1, [r3]
   13688:	add	r0, r1, #1
   1368c:	ldr	r1, [r7, r1, lsl #2]
   13690:	str	r0, [r3]
   13694:	mov	ip, r1
   13698:	mov	fp, r1
   1369c:	add	r0, ip, #1
   136a0:	add	r1, sp, #216	; 0xd8
   136a4:	bl	16684 <__assert_fail@plt+0x473c>
   136a8:	cmp	r0, #0
   136ac:	beq	147f0 <__assert_fail@plt+0x28a8>
   136b0:	ldrb	r3, [r0]
   136b4:	cmp	r3, #46	; 0x2e
   136b8:	bne	136cc <__assert_fail@plt+0x1784>
   136bc:	add	r0, r0, #1
   136c0:	ldr	r2, [pc, #3036]	; 142a4 <__assert_fail@plt+0x235c>
   136c4:	add	r1, sp, #220	; 0xdc
   136c8:	bl	16684 <__assert_fail@plt+0x473c>
   136cc:	ldr	r3, [sp, #220]	; 0xdc
   136d0:	cmp	r3, #0
   136d4:	bne	136e8 <__assert_fail@plt+0x17a0>
   136d8:	ldr	r3, [sp, #216]	; 0xd8
   136dc:	cmp	r3, #0
   136e0:	subne	r3, r3, #1
   136e4:	strne	r3, [sp, #216]	; 0xd8
   136e8:	mov	r2, #1
   136ec:	mov	r1, sl
   136f0:	bl	15318 <__assert_fail@plt+0x33d0>
   136f4:	ldrb	r3, [r0]
   136f8:	cmp	r3, #0
   136fc:	bne	147e4 <__assert_fail@plt+0x289c>
   13700:	mov	r3, #1
   13704:	mov	r0, sl
   13708:	mov	r1, #40	; 0x28
   1370c:	strb	r3, [sp, #241]	; 0xf1
   13710:	bl	204d0 <__assert_fail@plt+0xe588>
   13714:	ldr	r3, [pc, #3008]	; 142dc <__assert_fail@plt+0x2394>
   13718:	ldr	r2, [pc, #2876]	; 1425c <__assert_fail@plt+0x2314>
   1371c:	ldr	fp, [sp, #16]
   13720:	ldr	r3, [r3, #1176]	; 0x498
   13724:	add	r2, r2, #8
   13728:	cmp	r3, #0
   1372c:	beq	14d28 <__assert_fail@plt+0x2de0>
   13730:	add	r2, r3, #36	; 0x24
   13734:	ldr	r3, [r3, #36]	; 0x24
   13738:	b	13728 <__assert_fail@plt+0x17e0>
   1373c:	ldr	r3, [sp, #288]	; 0x120
   13740:	ldrb	r2, [r3, #-1]
   13744:	sub	r2, r2, #48	; 0x30
   13748:	cmp	r2, #9
   1374c:	bhi	12ad8 <__assert_fail@plt+0xb90>
   13750:	ldrb	r2, [r3, #1]
   13754:	cmp	r2, #0
   13758:	bne	12ad8 <__assert_fail@plt+0xb90>
   1375c:	ldrb	r3, [r3]
   13760:	cmp	r3, #37	; 0x25
   13764:	beq	147a4 <__assert_fail@plt+0x285c>
   13768:	cmp	r3, #98	; 0x62
   1376c:	beq	12fa8 <__assert_fail@plt+0x1060>
   13770:	b	12ad8 <__assert_fail@plt+0xb90>
   13774:	cmp	r2, #1
   13778:	bls	14b30 <__assert_fail@plt+0x2be8>
   1377c:	cmp	r2, lr
   13780:	bhi	12f18 <__assert_fail@plt+0xfd0>
   13784:	b	12348 <__assert_fail@plt+0x400>
   13788:	ldr	r3, [pc, #2764]	; 1425c <__assert_fail@plt+0x2314>
   1378c:	add	r2, r3, #8
   13790:	b	12c8c <__assert_fail@plt+0xd44>
   13794:	mov	r8, sl
   13798:	mov	r0, #1
   1379c:	b	12adc <__assert_fail@plt+0xb94>
   137a0:	ldr	r3, [sp, #40]	; 0x28
   137a4:	cmp	r3, #0
   137a8:	beq	14be8 <__assert_fail@plt+0x2ca0>
   137ac:	ldr	r0, [pc, #2852]	; 142d8 <__assert_fail@plt+0x2390>
   137b0:	strb	r9, [r0, #128]!	; 0x80
   137b4:	bl	15470 <__assert_fail@plt+0x3528>
   137b8:	ldr	r3, [sp, #60]	; 0x3c
   137bc:	cmp	r3, #0
   137c0:	beq	13da0 <__assert_fail@plt+0x1e58>
   137c4:	ldr	r1, [pc, #2612]	; 14200 <__assert_fail@plt+0x22b8>
   137c8:	mov	r0, #3
   137cc:	bl	11e28 <setlocale@plt>
   137d0:	cmp	r0, #0
   137d4:	beq	13da0 <__assert_fail@plt+0x1e58>
   137d8:	ldr	r3, [pc, #2812]	; 142dc <__assert_fail@plt+0x2394>
   137dc:	mov	r2, #5
   137e0:	ldrb	r6, [r3, #1311]	; 0x51f
   137e4:	cmp	r6, #0
   137e8:	beq	13dc8 <__assert_fail@plt+0x1e80>
   137ec:	ldr	r1, [pc, #2576]	; 14204 <__assert_fail@plt+0x22bc>
   137f0:	mov	r0, #0
   137f4:	bl	11b58 <dcgettext@plt>
   137f8:	mov	r1, #0
   137fc:	mov	r6, r0
   13800:	mov	r0, #3
   13804:	bl	11e28 <setlocale@plt>
   13808:	bl	1ea20 <__assert_fail@plt+0xcad8>
   1380c:	mov	r1, #0
   13810:	mov	r2, r6
   13814:	mov	r3, r0
   13818:	mov	r0, r1
   1381c:	bl	11c90 <error@plt>
   13820:	add	lr, sp, #248	; 0xf8
   13824:	add	r3, sp, #288	; 0x120
   13828:	mov	ip, r3
   1382c:	str	r3, [sp, #36]	; 0x24
   13830:	ldm	lr!, {r0, r1, r2, r3}
   13834:	add	r6, sp, #179	; 0xb3
   13838:	str	r6, [sp, #96]	; 0x60
   1383c:	ldr	r6, [pc, #2712]	; 142dc <__assert_fail@plt+0x2394>
   13840:	stmia	ip!, {r0, r1, r2, r3}
   13844:	add	r3, sp, #145	; 0x91
   13848:	str	r3, [sp, #92]	; 0x5c
   1384c:	ldm	lr!, {r0, r1, r2, r3}
   13850:	ldr	sl, [r6, #1176]	; 0x498
   13854:	ldr	r6, [sp, #16]
   13858:	stmia	ip!, {r0, r1, r2, r3}
   1385c:	mov	r3, #1
   13860:	ldm	lr, {r0, r1}
   13864:	str	r4, [sp, #100]	; 0x64
   13868:	str	r6, [sp, #68]	; 0x44
   1386c:	str	r6, [sp, #60]	; 0x3c
   13870:	str	r6, [sp, #56]	; 0x38
   13874:	str	r6, [sp, #32]
   13878:	stm	ip, {r0, r1}
   1387c:	mov	r4, r3
   13880:	b	139a0 <__assert_fail@plt+0x1a58>
   13884:	ldr	r1, [sl, #12]
   13888:	cmp	r1, #0
   1388c:	beq	13b90 <__assert_fail@plt+0x1c48>
   13890:	tst	r3, #255	; 0xff
   13894:	beq	13c08 <__assert_fail@plt+0x1cc0>
   13898:	ldr	r3, [sp, #28]
   1389c:	cmp	r3, #0
   138a0:	beq	13c08 <__assert_fail@plt+0x1cc0>
   138a4:	ldrb	r3, [sl, #28]
   138a8:	ldr	r1, [sp, #304]	; 0x130
   138ac:	cmp	r1, #0
   138b0:	beq	138c4 <__assert_fail@plt+0x197c>
   138b4:	ldr	r0, [sl, #16]
   138b8:	cmp	r1, r0
   138bc:	moveq	r1, #0
   138c0:	streq	r1, [sp, #304]	; 0x130
   138c4:	ldr	r1, [sp, #308]	; 0x134
   138c8:	cmp	r1, #0
   138cc:	beq	138e0 <__assert_fail@plt+0x1998>
   138d0:	ldr	r0, [sl, #20]
   138d4:	cmp	r1, r0
   138d8:	moveq	r1, #0
   138dc:	streq	r1, [sp, #308]	; 0x134
   138e0:	ldrb	r6, [sp, #314]	; 0x13a
   138e4:	eor	r2, r2, #1
   138e8:	ldrb	r0, [sl, #24]
   138ec:	and	r6, r6, r2
   138f0:	eor	r3, r3, #1
   138f4:	ldrb	r7, [sl, #25]
   138f8:	ldrb	lr, [sl, #30]
   138fc:	ldrb	ip, [sl, #29]
   13900:	ldrb	r1, [sl, #27]
   13904:	ldrb	r2, [sl, #32]
   13908:	ldrb	r8, [sl, #31]
   1390c:	str	r3, [sp, #88]	; 0x58
   13910:	ldr	sl, [sl, #36]	; 0x24
   13914:	ldrb	r3, [sp, #313]	; 0x139
   13918:	strb	r6, [sp, #314]	; 0x13a
   1391c:	ldrb	r6, [sp, #312]	; 0x138
   13920:	eor	r0, r0, #1
   13924:	eor	r7, r7, #1
   13928:	and	r0, r0, r6
   1392c:	mov	r6, r3
   13930:	and	r6, r6, r7
   13934:	strb	r0, [sp, #312]	; 0x138
   13938:	strb	r6, [sp, #313]	; 0x139
   1393c:	ldrb	r0, [sp, #318]	; 0x13e
   13940:	ldrb	r6, [sp, #316]	; 0x13c
   13944:	ldr	r3, [sp, #88]	; 0x58
   13948:	eor	lr, lr, #1
   1394c:	and	r0, r0, lr
   13950:	and	r3, r3, r6
   13954:	ldrb	lr, [sp, #317]	; 0x13d
   13958:	ldrb	r6, [sp, #315]	; 0x13b
   1395c:	eor	ip, ip, #1
   13960:	eor	r1, r1, #1
   13964:	and	ip, ip, lr
   13968:	and	r1, r1, r6
   1396c:	ldrb	lr, [sp, #320]	; 0x140
   13970:	ldrb	r6, [sp, #319]	; 0x13f
   13974:	eor	r2, r2, #1
   13978:	eor	r8, r8, #1
   1397c:	add	r4, r4, #1
   13980:	and	r2, r2, lr
   13984:	and	r6, r6, r8
   13988:	strb	r0, [sp, #318]	; 0x13e
   1398c:	strb	r3, [sp, #316]	; 0x13c
   13990:	strb	ip, [sp, #317]	; 0x13d
   13994:	strb	r1, [sp, #315]	; 0x13b
   13998:	strb	r2, [sp, #320]	; 0x140
   1399c:	strb	r6, [sp, #319]	; 0x13f
   139a0:	cmp	sl, #0
   139a4:	beq	131cc <__assert_fail@plt+0x1284>
   139a8:	ldrb	r3, [sl, #26]
   139ac:	cmp	r3, #0
   139b0:	bne	139c0 <__assert_fail@plt+0x1a78>
   139b4:	ldrh	r3, [sl, #28]
   139b8:	cmp	r3, #0
   139bc:	beq	139e0 <__assert_fail@plt+0x1a98>
   139c0:	ldrb	r3, [sl, #28]
   139c4:	ldr	r2, [sp, #56]	; 0x38
   139c8:	cmp	r3, #0
   139cc:	movne	r2, r3
   139d0:	ldr	r3, [sp, #32]
   139d4:	moveq	r3, #1
   139d8:	str	r2, [sp, #56]	; 0x38
   139dc:	str	r3, [sp, #32]
   139e0:	ldrb	r3, [sl, #33]	; 0x21
   139e4:	cmp	r3, #0
   139e8:	beq	13b1c <__assert_fail@plt+0x1bd4>
   139ec:	ldr	r6, [sl]
   139f0:	mov	r3, #43	; 0x2b
   139f4:	cmn	r6, #1
   139f8:	moveq	r6, #0
   139fc:	mov	r0, r6
   13a00:	add	r2, sp, #120	; 0x78
   13a04:	mov	r1, #0
   13a08:	ldr	r7, [sl, #8]
   13a0c:	strh	r3, [sp, #144]	; 0x90
   13a10:	bl	1c3b4 <__assert_fail@plt+0xa46c>
   13a14:	mov	r2, #25
   13a18:	mov	r1, r0
   13a1c:	ldr	r0, [sp, #92]	; 0x5c
   13a20:	bl	11c30 <__stpcpy_chk@plt>
   13a24:	ldr	r3, [pc, #2012]	; 14208 <__assert_fail@plt+0x22c0>
   13a28:	add	r2, sp, #120	; 0x78
   13a2c:	mov	r1, #0
   13a30:	str	r3, [sp, #176]	; 0xb0
   13a34:	str	r0, [sp, #88]	; 0x58
   13a38:	add	r0, r6, #1
   13a3c:	bl	1c3b4 <__assert_fail@plt+0xa46c>
   13a40:	mov	r2, #24
   13a44:	mov	r1, r0
   13a48:	ldr	r0, [sp, #96]	; 0x60
   13a4c:	bl	11c30 <__stpcpy_chk@plt>
   13a50:	ldr	r2, [sl, #8]
   13a54:	cmn	r2, #1
   13a58:	mov	r6, r0
   13a5c:	beq	13ad4 <__assert_fail@plt+0x1b8c>
   13a60:	ldr	r3, [pc, #1956]	; 1420c <__assert_fail@plt+0x22c4>
   13a64:	add	r7, r7, #1
   13a68:	mov	r0, r7
   13a6c:	ldrh	r1, [r3]
   13a70:	ldrb	r2, [r3, #2]
   13a74:	ldr	r3, [sp, #88]	; 0x58
   13a78:	mov	r8, r3
   13a7c:	strh	r1, [r3]
   13a80:	strb	r2, [r8, #2]!
   13a84:	mov	r1, #0
   13a88:	add	r2, sp, #120	; 0x78
   13a8c:	bl	1c3b4 <__assert_fail@plt+0xa46c>
   13a90:	mov	r1, r0
   13a94:	mov	r0, r8
   13a98:	bl	11c54 <strcpy@plt>
   13a9c:	ldr	r3, [pc, #1900]	; 14210 <__assert_fail@plt+0x22c8>
   13aa0:	mov	r1, #0
   13aa4:	add	r2, sp, #120	; 0x78
   13aa8:	ldrh	r3, [r3]
   13aac:	strh	r3, [r6], #1
   13ab0:	ldr	r0, [sl, #12]
   13ab4:	cmn	r0, #1
   13ab8:	movne	r0, #0
   13abc:	moveq	r0, #1
   13ac0:	add	r0, r0, r7
   13ac4:	bl	1c3b4 <__assert_fail@plt+0xa46c>
   13ac8:	mov	r1, r0
   13acc:	mov	r0, r6
   13ad0:	bl	11c54 <strcpy@plt>
   13ad4:	mov	r2, #5
   13ad8:	ldr	r1, [pc, #1844]	; 14214 <__assert_fail@plt+0x22cc>
   13adc:	mov	r0, #0
   13ae0:	bl	11b58 <dcgettext@plt>
   13ae4:	add	r1, sp, #144	; 0x90
   13ae8:	mov	r6, r0
   13aec:	mov	r0, #0
   13af0:	bl	1ea10 <__assert_fail@plt+0xcac8>
   13af4:	add	r1, sp, #176	; 0xb0
   13af8:	mov	r7, r0
   13afc:	mov	r0, #1
   13b00:	bl	1ea10 <__assert_fail@plt+0xcac8>
   13b04:	mov	r1, #0
   13b08:	mov	r3, r7
   13b0c:	mov	r2, r6
   13b10:	str	r0, [sp]
   13b14:	mov	r0, r1
   13b18:	bl	11c90 <error@plt>
   13b1c:	ldr	r3, [sl]
   13b20:	ldr	r1, [sl, #8]
   13b24:	cmn	r3, #1
   13b28:	beq	13c90 <__assert_fail@plt+0x1d48>
   13b2c:	cmp	r3, r1
   13b30:	bls	13c90 <__assert_fail@plt+0x1d48>
   13b34:	mov	r2, #5
   13b38:	ldr	r1, [pc, #1752]	; 14218 <__assert_fail@plt+0x22d0>
   13b3c:	mov	r0, #0
   13b40:	bl	11b58 <dcgettext@plt>
   13b44:	mov	r1, #0
   13b48:	mov	r3, r4
   13b4c:	mov	r2, r0
   13b50:	mov	r0, r1
   13b54:	bl	11c90 <error@plt>
   13b58:	ldr	r1, [sl, #8]
   13b5c:	mov	r3, #1
   13b60:	ldrb	r2, [sl, #26]
   13b64:	cmp	r2, #0
   13b68:	bne	13b7c <__assert_fail@plt+0x1c34>
   13b6c:	ldrh	r0, [sl, #28]
   13b70:	cmp	r0, #0
   13b74:	ldrbeq	r0, [sl, #30]
   13b78:	beq	13b80 <__assert_fail@plt+0x1c38>
   13b7c:	mov	r0, #1
   13b80:	cmp	r1, #0
   13b84:	ldr	r1, [sp, #28]
   13b88:	orr	r3, r1, r3
   13b8c:	beq	13884 <__assert_fail@plt+0x193c>
   13b90:	tst	r3, #255	; 0xff
   13b94:	bne	13898 <__assert_fail@plt+0x1950>
   13b98:	ldr	r3, [pc, #1848]	; 142d8 <__assert_fail@plt+0x2390>
   13b9c:	ldr	r3, [r3, #96]	; 0x60
   13ba0:	cmp	r3, #256	; 0x100
   13ba4:	bne	13c08 <__assert_fail@plt+0x1cc0>
   13ba8:	ldrb	r3, [sl, #24]
   13bac:	cmp	r3, #0
   13bb0:	bne	13bc8 <__assert_fail@plt+0x1c80>
   13bb4:	cmp	r0, #0
   13bb8:	beq	13be0 <__assert_fail@plt+0x1c98>
   13bbc:	ldr	r3, [sl, #4]
   13bc0:	cmp	r3, #0
   13bc4:	bne	13be0 <__assert_fail@plt+0x1c98>
   13bc8:	ldrb	r3, [sl, #25]
   13bcc:	cmp	r3, #0
   13bd0:	bne	13c08 <__assert_fail@plt+0x1cc0>
   13bd4:	ldr	r3, [sl, #12]
   13bd8:	cmp	r3, #0
   13bdc:	beq	13c08 <__assert_fail@plt+0x1cc0>
   13be0:	mov	r2, #5
   13be4:	ldr	r1, [pc, #1584]	; 1421c <__assert_fail@plt+0x22d4>
   13be8:	mov	r0, #0
   13bec:	bl	11b58 <dcgettext@plt>
   13bf0:	mov	r1, #0
   13bf4:	mov	r3, r4
   13bf8:	mov	r2, r0
   13bfc:	mov	r0, r1
   13c00:	bl	11c90 <error@plt>
   13c04:	ldrb	r2, [sl, #26]
   13c08:	cmp	r2, #0
   13c0c:	bne	13c1c <__assert_fail@plt+0x1cd4>
   13c10:	ldrh	r3, [sl, #28]
   13c14:	cmp	r3, #0
   13c18:	beq	138a4 <__assert_fail@plt+0x195c>
   13c1c:	ldr	r3, [sl]
   13c20:	ldr	r1, [sl, #8]
   13c24:	adds	r3, r3, #1
   13c28:	moveq	r3, #1
   13c2c:	cmn	r1, #1
   13c30:	add	r6, r1, #1
   13c34:	movne	r1, #0
   13c38:	moveq	r1, #1
   13c3c:	cmp	r6, r3
   13c40:	movls	r6, r1
   13c44:	orrhi	r6, r1, #1
   13c48:	cmp	r6, #0
   13c4c:	beq	138a4 <__assert_fail@plt+0x195c>
   13c50:	mov	r2, #5
   13c54:	ldr	r1, [pc, #1476]	; 14220 <__assert_fail@plt+0x22d8>
   13c58:	mov	r0, #0
   13c5c:	bl	11b58 <dcgettext@plt>
   13c60:	mov	r1, #0
   13c64:	mov	r3, r4
   13c68:	mov	r2, r0
   13c6c:	mov	r0, r1
   13c70:	bl	11c90 <error@plt>
   13c74:	ldrb	r3, [sl, #28]
   13c78:	cmp	r3, #0
   13c7c:	strne	r3, [sp, #68]	; 0x44
   13c80:	ldrbne	r2, [sl, #26]
   13c84:	ldrbeq	r2, [sl, #26]
   13c88:	streq	r6, [sp, #60]	; 0x3c
   13c8c:	b	138a8 <__assert_fail@plt+0x1960>
   13c90:	ldr	r3, [sp, #16]
   13c94:	b	13b60 <__assert_fail@plt+0x1c18>
   13c98:	add	r0, r0, #1
   13c9c:	ldr	r2, [pc, #1408]	; 14224 <__assert_fail@plt+0x22dc>
   13ca0:	add	r1, sp, #216	; 0xd8
   13ca4:	bl	16684 <__assert_fail@plt+0x473c>
   13ca8:	ldr	r3, [sp, #216]	; 0xd8
   13cac:	cmp	r3, #0
   13cb0:	sub	r3, r3, #1
   13cb4:	str	r3, [sp, #216]	; 0xd8
   13cb8:	beq	14aec <__assert_fail@plt+0x2ba4>
   13cbc:	ldrb	r3, [r0]
   13cc0:	cmp	r3, #46	; 0x2e
   13cc4:	beq	14af8 <__assert_fail@plt+0x2bb0>
   13cc8:	mov	r2, #1
   13ccc:	mov	r1, sl
   13cd0:	bl	15318 <__assert_fail@plt+0x33d0>
   13cd4:	b	12c44 <__assert_fail@plt+0xcfc>
   13cd8:	add	r0, r0, #1
   13cdc:	ldr	r2, [pc, #1472]	; 142a4 <__assert_fail@plt+0x235c>
   13ce0:	add	r1, sp, #212	; 0xd4
   13ce4:	bl	16684 <__assert_fail@plt+0x473c>
   13ce8:	ldr	r3, [sp, #212]	; 0xd4
   13cec:	cmp	r3, #0
   13cf0:	sub	r3, r3, #1
   13cf4:	str	r3, [sp, #212]	; 0xd4
   13cf8:	beq	14d38 <__assert_fail@plt+0x2df0>
   13cfc:	ldr	r3, [sp, #208]	; 0xd0
   13d00:	b	12c04 <__assert_fail@plt+0xcbc>
   13d04:	ldr	r0, [sp, #36]	; 0x24
   13d08:	bl	16758 <__assert_fail@plt+0x4810>
   13d0c:	ldr	r3, [sp, #68]	; 0x44
   13d10:	cmp	r3, #0
   13d14:	bne	1479c <__assert_fail@plt+0x2854>
   13d18:	ldr	r3, [sp, #32]
   13d1c:	ldr	r2, [sp, #56]	; 0x38
   13d20:	orr	r3, r3, r2
   13d24:	tst	r3, #255	; 0xff
   13d28:	ldrne	r6, [pc, #1448]	; 142d8 <__assert_fail@plt+0x2390>
   13d2c:	beq	132d0 <__assert_fail@plt+0x1388>
   13d30:	mov	r2, #5
   13d34:	ldr	r1, [pc, #1260]	; 14228 <__assert_fail@plt+0x22e0>
   13d38:	mov	r0, #0
   13d3c:	bl	11b58 <dcgettext@plt>
   13d40:	ldr	r3, [pc, #1428]	; 142dc <__assert_fail@plt+0x2394>
   13d44:	ldrb	r7, [r3, #4]
   13d48:	ldr	r3, [r6, #96]	; 0x60
   13d4c:	cmp	r7, r3
   13d50:	ldreq	r8, [pc, #1192]	; 14200 <__assert_fail@plt+0x22b8>
   13d54:	mov	r4, r0
   13d58:	beq	13d70 <__assert_fail@plt+0x1e28>
   13d5c:	mov	r2, #5
   13d60:	ldr	r1, [pc, #1220]	; 1422c <__assert_fail@plt+0x22e4>
   13d64:	mov	r0, #0
   13d68:	bl	11b58 <dcgettext@plt>
   13d6c:	mov	r8, r0
   13d70:	mov	r6, #0
   13d74:	add	r0, sp, #104	; 0x68
   13d78:	strb	r7, [sp, #104]	; 0x68
   13d7c:	strb	r6, [sp, #105]	; 0x69
   13d80:	bl	1ea20 <__assert_fail@plt+0xcad8>
   13d84:	mov	r3, r8
   13d88:	mov	r2, r4
   13d8c:	mov	r1, r6
   13d90:	str	r0, [sp]
   13d94:	mov	r0, r6
   13d98:	bl	11c90 <error@plt>
   13d9c:	b	132b4 <__assert_fail@plt+0x136c>
   13da0:	mov	r2, #5
   13da4:	ldr	r1, [pc, #1156]	; 14230 <__assert_fail@plt+0x22e8>
   13da8:	mov	r0, #0
   13dac:	bl	11b58 <dcgettext@plt>
   13db0:	mov	r1, #0
   13db4:	ldr	r2, [pc, #1144]	; 14234 <__assert_fail@plt+0x22ec>
   13db8:	mov	r3, r0
   13dbc:	mov	r0, r1
   13dc0:	bl	11c90 <error@plt>
   13dc4:	b	137d8 <__assert_fail@plt+0x1890>
   13dc8:	ldr	r1, [pc, #1128]	; 14238 <__assert_fail@plt+0x22f0>
   13dcc:	mov	r0, r6
   13dd0:	bl	11b58 <dcgettext@plt>
   13dd4:	ldr	r2, [pc, #1112]	; 14234 <__assert_fail@plt+0x22ec>
   13dd8:	mov	r1, r6
   13ddc:	mov	r3, r0
   13de0:	mov	r0, r6
   13de4:	bl	11c90 <error@plt>
   13de8:	b	13820 <__assert_fail@plt+0x18d8>
   13dec:	ldr	r3, [sp, #40]	; 0x28
   13df0:	cmp	r3, #0
   13df4:	beq	13e20 <__assert_fail@plt+0x1ed8>
   13df8:	mov	r0, r3
   13dfc:	ldr	r2, [pc, #1080]	; 1423c <__assert_fail@plt+0x22f4>
   13e00:	ldr	r1, [pc, #1080]	; 14240 <__assert_fail@plt+0x22f8>
   13e04:	bl	11c9c <open64@plt>
   13e08:	subs	r3, r0, #0
   13e0c:	blt	1493c <__assert_fail@plt+0x29f4>
   13e10:	cmp	r3, #1
   13e14:	beq	13e20 <__assert_fail@plt+0x1ed8>
   13e18:	mov	r1, #1
   13e1c:	bl	1825c <__assert_fail@plt+0x6314>
   13e20:	ldr	r3, [sp, #44]	; 0x2c
   13e24:	cmp	r3, #0
   13e28:	bne	14914 <__assert_fail@plt+0x29cc>
   13e2c:	ldr	r3, [sp, #52]	; 0x34
   13e30:	cmp	r3, #0
   13e34:	beq	148d0 <__assert_fail@plt+0x2988>
   13e38:	ldr	r3, [pc, #1028]	; 14244 <__assert_fail@plt+0x22fc>
   13e3c:	ldr	r1, [sp, #52]	; 0x34
   13e40:	mov	r2, #144	; 0x90
   13e44:	cmp	r1, r3
   13e48:	movcc	r3, r1
   13e4c:	mov	r1, r3
   13e50:	vldr	d10, [pc, #888]	; 141d0 <__assert_fail@plt+0x2288>
   13e54:	vldr	d9, [pc, #892]	; 141d8 <__assert_fail@plt+0x2290>
   13e58:	mul	r2, r2, r1
   13e5c:	lsl	r0, r1, #1
   13e60:	str	r3, [sp, #52]	; 0x34
   13e64:	mov	r3, #0
   13e68:	str	r0, [sp, #36]	; 0x24
   13e6c:	str	r3, [sp, #188]	; 0xbc
   13e70:	sub	r0, r0, #1
   13e74:	mov	fp, r3
   13e78:	add	r3, sp, #292	; 0x124
   13e7c:	str	r0, [sp, #92]	; 0x5c
   13e80:	str	r2, [sp, #88]	; 0x58
   13e84:	str	r3, [sp, #48]	; 0x30
   13e88:	ldr	r3, [sp, #68]	; 0x44
   13e8c:	cmp	sl, #0
   13e90:	str	r3, [sp, #64]	; 0x40
   13e94:	beq	1486c <__assert_fail@plt+0x2924>
   13e98:	ldr	r3, [sp, #68]	; 0x44
   13e9c:	ldr	r1, [pc, #1072]	; 142d4 <__assert_fail@plt+0x238c>
   13ea0:	ldr	r2, [r3], #4
   13ea4:	mov	r0, r2
   13ea8:	str	r3, [sp, #68]	; 0x44
   13eac:	str	r2, [sp, #16]
   13eb0:	bl	1560c <__assert_fail@plt+0x36c4>
   13eb4:	subs	r3, r0, #0
   13eb8:	str	r3, [sp, #28]
   13ebc:	beq	14744 <__assert_fail@plt+0x27fc>
   13ec0:	ldr	r3, [sp, #52]	; 0x34
   13ec4:	cmp	r3, #1
   13ec8:	bls	141a0 <__assert_fail@plt+0x2258>
   13ecc:	mov	r3, #1
   13ed0:	mov	r2, r3
   13ed4:	ldr	r1, [sp, #52]	; 0x34
   13ed8:	lsl	r2, r2, #1
   13edc:	cmp	r1, r2
   13ee0:	add	r3, r3, #1
   13ee4:	bhi	13ed4 <__assert_fail@plt+0x1f8c>
   13ee8:	lsl	r3, r3, #4
   13eec:	str	r3, [sp, #56]	; 0x38
   13ef0:	ldr	r7, [sp, #188]	; 0xbc
   13ef4:	cmp	r7, #0
   13ef8:	beq	141ac <__assert_fail@plt+0x2264>
   13efc:	add	r3, sp, #176	; 0xb0
   13f00:	str	r3, [sp, #60]	; 0x3c
   13f04:	mov	r3, #0
   13f08:	sub	sl, sl, #1
   13f0c:	strb	r3, [sp, #200]	; 0xc8
   13f10:	str	sl, [sp, #32]
   13f14:	ldr	r2, [sp, #16]
   13f18:	ldr	r1, [sp, #28]
   13f1c:	ldr	r0, [sp, #60]	; 0x3c
   13f20:	bl	15fac <__assert_fail@plt+0x4064>
   13f24:	cmp	r0, #0
   13f28:	beq	1418c <__assert_fail@plt+0x2244>
   13f2c:	ldrb	r7, [sp, #200]	; 0xc8
   13f30:	cmp	r7, #0
   13f34:	beq	14130 <__assert_fail@plt+0x21e8>
   13f38:	ldr	r3, [sp, #32]
   13f3c:	cmp	r3, #0
   13f40:	beq	13f68 <__assert_fail@plt+0x2020>
   13f44:	add	r1, sp, #180	; 0xb4
   13f48:	ldr	r0, [sp, #56]	; 0x38
   13f4c:	ldm	r1, {r1, r2, r3}
   13f50:	mul	r2, r2, r0
   13f54:	sub	r3, r3, r1
   13f58:	sub	r3, r3, r2
   13f5c:	add	r2, r0, #1
   13f60:	cmp	r2, r3
   13f64:	bcc	14568 <__assert_fail@plt+0x2620>
   13f68:	ldr	r2, [sp, #188]	; 0xbc
   13f6c:	ldr	r6, [sp, #176]	; 0xb0
   13f70:	ldr	r3, [sp, #32]
   13f74:	add	r6, r6, r2
   13f78:	ldr	r2, [pc, #860]	; 142dc <__assert_fail@plt+0x2394>
   13f7c:	orrs	r3, r3, fp
   13f80:	mov	r3, #0
   13f84:	str	r3, [r2, #1472]	; 0x5c0
   13f88:	bne	13f98 <__assert_fail@plt+0x2050>
   13f8c:	ldr	r4, [sp, #192]	; 0xc0
   13f90:	cmp	r4, #0
   13f94:	beq	1415c <__assert_fail@plt+0x2214>
   13f98:	mov	r1, #0
   13f9c:	add	r0, sp, #144	; 0x90
   13fa0:	bl	18538 <__assert_fail@plt+0x65f0>
   13fa4:	ldr	r7, [sp, #44]	; 0x2c
   13fa8:	add	fp, fp, #1
   13fac:	add	r8, r0, #9
   13fb0:	ldr	r3, [sp, #184]	; 0xb8
   13fb4:	cmp	r3, #1
   13fb8:	bls	14148 <__assert_fail@plt+0x2200>
   13fbc:	ldr	r1, [sp, #36]	; 0x24
   13fc0:	ldr	r0, [pc, #640]	; 14248 <__assert_fail@plt+0x2300>
   13fc4:	bl	1c100 <__assert_fail@plt+0xa1b8>
   13fc8:	mov	r1, #0
   13fcc:	mov	sl, r1
   13fd0:	str	r0, [sp, #288]	; 0x120
   13fd4:	ldr	r0, [sp, #48]	; 0x30
   13fd8:	bl	11ae0 <pthread_mutex_init@plt>
   13fdc:	mov	r1, sl
   13fe0:	add	r0, sp, #320	; 0x140
   13fe4:	bl	11b64 <pthread_cond_init@plt>
   13fe8:	ldr	r0, [sp, #88]	; 0x58
   13fec:	ldr	r4, [sp, #184]	; 0xb8
   13ff0:	bl	20048 <__assert_fail@plt+0xe100>
   13ff4:	mov	r1, sl
   13ff8:	mov	r5, r0
   13ffc:	add	r3, r0, #48	; 0x30
   14000:	mov	r0, r3
   14004:	str	r4, [r5, #24]
   14008:	str	r4, [r5, #20]
   1400c:	str	sl, [r5, #12]
   14010:	str	sl, [r5, #8]
   14014:	str	sl, [r5, #4]
   14018:	str	sl, [r5]
   1401c:	str	sl, [r5, #16]
   14020:	str	sl, [r5, #28]
   14024:	str	sl, [r5, #40]	; 0x28
   14028:	strb	sl, [r5, #44]	; 0x2c
   1402c:	str	r3, [sp, #64]	; 0x40
   14030:	bl	11ae0 <pthread_mutex_init@plt>
   14034:	stm	sp, {r4, sl}
   14038:	ldr	r4, [sp, #52]	; 0x34
   1403c:	add	r9, r5, #72	; 0x48
   14040:	mov	r3, r4
   14044:	mov	r2, r6
   14048:	mov	r1, r9
   1404c:	mov	r0, r5
   14050:	bl	15b54 <__assert_fail@plt+0x3c0c>
   14054:	ldr	r2, [sp, #144]	; 0x90
   14058:	add	r1, sp, #288	; 0x120
   1405c:	mov	r3, r9
   14060:	str	r1, [sp]
   14064:	mov	r0, r6
   14068:	str	r2, [sp, #4]
   1406c:	mov	r1, r4
   14070:	str	r8, [sp, #8]
   14074:	ldr	r2, [sp, #184]	; 0xb8
   14078:	bl	18c60 <__assert_fail@plt+0x6d18>
   1407c:	ldr	r3, [sp, #36]	; 0x24
   14080:	cmp	r3, sl
   14084:	ldrne	r4, [sp, #64]	; 0x40
   14088:	ldrne	r6, [sp, #92]	; 0x5c
   1408c:	beq	140a8 <__assert_fail@plt+0x2160>
   14090:	mov	r0, r4
   14094:	sub	r6, r6, #1
   14098:	bl	11a5c <pthread_mutex_destroy@plt>
   1409c:	cmn	r6, #1
   140a0:	add	r4, r4, #72	; 0x48
   140a4:	bne	14090 <__assert_fail@plt+0x2148>
   140a8:	mov	r0, r5
   140ac:	bl	1afe8 <__assert_fail@plt+0x90a0>
   140b0:	ldr	r0, [sp, #288]	; 0x120
   140b4:	bl	1c158 <__assert_fail@plt+0xa210>
   140b8:	add	r0, sp, #320	; 0x140
   140bc:	bl	11bd0 <pthread_cond_destroy@plt>
   140c0:	ldr	r0, [sp, #48]	; 0x30
   140c4:	bl	11a5c <pthread_mutex_destroy@plt>
   140c8:	mov	r1, r8
   140cc:	ldr	r0, [sp, #144]	; 0x90
   140d0:	bl	1677c <__assert_fail@plt+0x4834>
   140d4:	cmp	r7, #0
   140d8:	beq	13f14 <__assert_fail@plt+0x1fcc>
   140dc:	ldr	r0, [sp, #176]	; 0xb0
   140e0:	bl	1afe8 <__assert_fail@plt+0x90a0>
   140e4:	mvn	r4, #0
   140e8:	b	140f4 <__assert_fail@plt+0x21ac>
   140ec:	mov	r0, r4
   140f0:	bl	15904 <__assert_fail@plt+0x39bc>
   140f4:	ldr	r3, [pc, #480]	; 142dc <__assert_fail@plt+0x2394>
   140f8:	ldr	r3, [r3, #1172]	; 0x494
   140fc:	cmp	r3, #0
   14100:	bgt	140ec <__assert_fail@plt+0x21a4>
   14104:	ldr	r3, [pc, #464]	; 142dc <__assert_fail@plt+0x2394>
   14108:	ldrb	r3, [r3, #1148]	; 0x47c
   1410c:	cmp	r3, #0
   14110:	beq	14128 <__assert_fail@plt+0x21e0>
   14114:	ldr	r3, [pc, #304]	; 1424c <__assert_fail@plt+0x2304>
   14118:	ldr	r0, [r3]
   1411c:	bl	1a9e4 <__assert_fail@plt+0x8a9c>
   14120:	cmn	r0, #1
   14124:	beq	1484c <__assert_fail@plt+0x2904>
   14128:	mov	r0, #0
   1412c:	bl	11d38 <exit@plt>
   14130:	ldr	r2, [pc, #420]	; 142dc <__assert_fail@plt+0x2394>
   14134:	ldr	r6, [sp, #176]	; 0xb0
   14138:	ldr	r3, [sp, #188]	; 0xbc
   1413c:	str	r7, [r2, #1472]	; 0x5c0
   14140:	add	r6, r6, r3
   14144:	b	13f98 <__assert_fail@plt+0x2050>
   14148:	sub	r0, r6, #16
   1414c:	mov	r2, r8
   14150:	ldr	r1, [sp, #144]	; 0x90
   14154:	bl	17b6c <__assert_fail@plt+0x5c24>
   14158:	b	140c8 <__assert_fail@plt+0x2180>
   1415c:	ldr	r1, [sp, #16]
   14160:	ldr	r0, [sp, #28]
   14164:	bl	1677c <__assert_fail@plt+0x4834>
   14168:	ldr	r1, [pc, #224]	; 14250 <__assert_fail@plt+0x2308>
   1416c:	ldr	r0, [sp, #40]	; 0x28
   14170:	bl	1560c <__assert_fail@plt+0x36c4>
   14174:	cmp	r0, #0
   14178:	beq	14864 <__assert_fail@plt+0x291c>
   1417c:	str	r0, [sp, #144]	; 0x90
   14180:	mov	fp, r4
   14184:	ldr	r8, [sp, #40]	; 0x28
   14188:	b	13fb0 <__assert_fail@plt+0x2068>
   1418c:	ldr	sl, [sp, #32]
   14190:	ldr	r1, [sp, #16]
   14194:	ldr	r0, [sp, #28]
   14198:	bl	1677c <__assert_fail@plt+0x4834>
   1419c:	b	13e88 <__assert_fail@plt+0x1f40>
   141a0:	mov	r3, #24
   141a4:	str	r3, [sp, #56]	; 0x38
   141a8:	b	13ef0 <__assert_fail@plt+0x1fa8>
   141ac:	ldr	r3, [sp, #56]	; 0x38
   141b0:	str	sl, [sp, #32]
   141b4:	add	r2, r3, #1
   141b8:	str	fp, [sp, #60]	; 0x3c
   141bc:	ldr	r9, [pc, #276]	; 142d8 <__assert_fail@plt+0x2390>
   141c0:	str	r2, [sp, #96]	; 0x60
   141c4:	add	r8, r3, #2
   141c8:	ldrd	sl, [sp, #80]	; 0x50
   141cc:	b	14398 <__assert_fail@plt+0x2450>
   141d0:	andeq	r0, r0, r0
   141d4:	svccc	0x00c00000
   141d8:	andeq	r0, r0, r0
   141dc:	svccc	0x00e80000
   141e0:	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
   141e4:	strdeq	r3, [r2], -r8
   141e8:	andeq	r5, r3, r0, lsl #16
   141ec:	andeq	r4, r2, r8, lsl r1
   141f0:			; <UNDEFINED> instruction: 0x000235b8
   141f4:	andeq	r4, r2, r0, ror r1
   141f8:	andeq	r5, r3, r0, asr #5
   141fc:	andeq	r3, r2, ip, asr #21
   14200:	muleq	r2, r8, pc	; <UNPREDICTABLE>
   14204:	andeq	r3, r2, r4, lsr #28
   14208:	eoreq	r6, r0, sp, lsr #22
   1420c:	andeq	r3, r2, ip, lsl #29
   14210:	muleq	r2, r0, lr
   14214:	muleq	r2, r4, lr
   14218:	andeq	r4, r2, r8, lsl #3
   1421c:	andeq	r3, r2, r4, asr #29
   14220:	andeq	r3, r2, ip, lsl #30
   14224:			; <UNDEFINED> instruction: 0x00023bb4
   14228:	andeq	r4, r2, ip, lsr #32
   1422c:	andeq	r4, r2, r0, rrx
   14230:	andeq	r3, r2, ip, lsl #28
   14234:	andeq	r2, r2, r0, ror #17
   14238:	andeq	r3, r2, r4, asr lr
   1423c:			; <UNDEFINED> instruction: 0x000001b6
   14240:	andeq	r0, r8, r1, asr #32
   14244:	biceq	r1, r7, r1, ror ip
   14248:			; <UNDEFINED> instruction: 0x000162bc
   1424c:	ldrdeq	r5, [r3], -r0
   14250:	strdeq	r2, [r2], -r8
   14254:	ldrdeq	r3, [r2], -r0
   14258:	muleq	r2, r0, sp
   1425c:	andeq	r5, r3, r0, ror r7
   14260:	muleq	r2, r8, sl
   14264:	andeq	r2, r2, r0, lsl r5
   14268:	andeq	r3, r2, r8, ror #25
   1426c:	andeq	r2, r2, r0, lsr #14
   14270:	andeq	r1, r0, r1, ror #2
   14274:	ldrdeq	r2, [r2], -r8
   14278:	andeq	r3, r2, r4, ror #25
   1427c:	andeq	r4, r2, ip, ror r1
   14280:	andeq	r2, r2, r4, lsr #18
   14284:			; <UNDEFINED> instruction: 0x000227bc
   14288:	andeq	r2, r2, r8, lsl #18
   1428c:	andeq	r3, r2, r4, lsl #22
   14290:			; <UNDEFINED> instruction: 0x00023fb8
   14294:	andeq	r3, r2, ip, ror pc
   14298:	andeq	r3, r2, ip, lsr pc
   1429c:	andeq	r4, r2, r8, rrx
   142a0:	andeq	r3, r2, r0, lsl #23
   142a4:	andeq	r3, r2, r8, ror #21
   142a8:	andeq	r3, r2, r8, lsr fp
   142ac:	andeq	r3, r2, r4, lsr fp
   142b0:	andeq	r3, r2, r8, ror ip
   142b4:	andeq	r3, r2, ip, lsl ip
   142b8:	andeq	r2, r2, r0, lsr #7
   142bc:	andeq	r3, r2, r8, lsr ip
   142c0:	andeq	r3, r2, r4, asr ip
   142c4:	ldrdeq	r3, [r2], -r4
   142c8:			; <UNDEFINED> instruction: 0x00023cbc
   142cc:	andeq	r3, r2, ip, lsr #25
   142d0:	andeq	r3, r2, r8, asr ip
   142d4:	andeq	r2, r2, ip, lsr #19
   142d8:	andeq	r5, r3, r4, ror #3
   142dc:	andeq	r5, r3, r0, ror #5
   142e0:	muleq	r2, r8, fp
   142e4:	andeq	r5, r3, r8, asr #5
   142e8:	andeq	r4, r2, r8, asr #2
   142ec:	andeq	r5, r3, ip, asr #17
   142f0:	andeq	r4, r2, r0, ror #2
   142f4:	add	r2, sp, #288	; 0x120
   142f8:	mov	r0, #3
   142fc:	bl	11bf4 <__fxstat64@plt>
   14300:	adds	r0, r0, #0
   14304:	movne	r0, #1
   14308:	cmp	r0, #0
   1430c:	bne	14804 <__assert_fail@plt+0x28bc>
   14310:	ldr	r3, [sp, #304]	; 0x130
   14314:	and	r3, r3, #61440	; 0xf000
   14318:	cmp	r3, #32768	; 0x8000
   1431c:	ldr	r3, [pc, #-72]	; 142dc <__assert_fail@plt+0x2394>
   14320:	beq	143fc <__assert_fail@plt+0x24b4>
   14324:	ldr	r3, [r3, #1488]	; 0x5d0
   14328:	cmp	r3, #0
   1432c:	bne	14820 <__assert_fail@plt+0x28d8>
   14330:	ldr	r3, [pc, #-92]	; 142dc <__assert_fail@plt+0x2394>
   14334:	mov	r4, #131072	; 0x20000
   14338:	mov	r5, #0
   1433c:	ldr	r3, [r3, #1500]	; 0x5dc
   14340:	cmp	r3, #0
   14344:	beq	14428 <__assert_fail@plt+0x24e0>
   14348:	ldr	r3, [sp, #96]	; 0x60
   1434c:	mov	r1, r3
   14350:	mul	r6, r4, r3
   14354:	add	r6, r6, #1
   14358:	mov	r0, r6
   1435c:	bl	21958 <_obstack_memory_used@@Base+0x8c>
   14360:	mov	r1, #0
   14364:	cmp	r1, r5
   14368:	cmpeq	r0, r4
   1436c:	bne	148fc <__assert_fail@plt+0x29b4>
   14370:	ldr	r3, [pc, #-156]	; 142dc <__assert_fail@plt+0x2394>
   14374:	ldr	r3, [r3, #1500]	; 0x5dc
   14378:	sub	r3, r3, r8
   1437c:	cmp	r6, r3
   14380:	bcs	148fc <__assert_fail@plt+0x29b4>
   14384:	ldr	r3, [sp, #32]
   14388:	add	r7, r7, #1
   1438c:	cmp	r3, r7
   14390:	add	r8, r8, r6
   14394:	beq	148ec <__assert_fail@plt+0x29a4>
   14398:	cmp	r7, #0
   1439c:	beq	143d8 <__assert_fail@plt+0x2490>
   143a0:	ldr	r3, [sp, #64]	; 0x40
   143a4:	ldr	r1, [pc, #-296]	; 14284 <__assert_fail@plt+0x233c>
   143a8:	ldr	r4, [r3, r7, lsl #2]
   143ac:	mov	r0, r4
   143b0:	bl	11a2c <strcmp@plt>
   143b4:	subs	r1, r0, #0
   143b8:	beq	142f4 <__assert_fail@plt+0x23ac>
   143bc:	mov	r1, r4
   143c0:	add	r2, sp, #288	; 0x120
   143c4:	mov	r0, #3
   143c8:	bl	11f00 <__xstat64@plt>
   143cc:	adds	r0, r0, #0
   143d0:	movne	r0, #1
   143d4:	b	14308 <__assert_fail@plt+0x23c0>
   143d8:	ldr	r0, [sp, #28]
   143dc:	bl	11dc8 <fileno@plt>
   143e0:	add	r2, sp, #288	; 0x120
   143e4:	mov	r1, r0
   143e8:	mov	r0, #3
   143ec:	bl	11bf4 <__fxstat64@plt>
   143f0:	adds	r0, r0, #0
   143f4:	movne	r0, #1
   143f8:	b	14308 <__assert_fail@plt+0x23c0>
   143fc:	ldr	r3, [r3, #1500]	; 0x5dc
   14400:	add	r2, sp, #336	; 0x150
   14404:	cmp	r3, #0
   14408:	ldrd	r4, [r2]
   1440c:	bne	14348 <__assert_fail@plt+0x2400>
   14410:	ldr	r3, [pc, #-316]	; 142dc <__assert_fail@plt+0x2394>
   14414:	ldr	r2, [pc, #-320]	; 142dc <__assert_fail@plt+0x2394>
   14418:	ldr	r3, [r3, #1488]	; 0x5d0
   1441c:	cmp	r3, #0
   14420:	str	r3, [r2, #1500]	; 0x5dc
   14424:	bne	14348 <__assert_fail@plt+0x2400>
   14428:	add	r1, sp, #144	; 0x90
   1442c:	mov	r0, #2
   14430:	bl	11b94 <getrlimit64@plt>
   14434:	cmp	r0, #0
   14438:	mvnne	r6, #0
   1443c:	bne	1445c <__assert_fail@plt+0x2514>
   14440:	ldrd	r2, [sp, #144]	; 0x90
   14444:	mov	r1, #0
   14448:	mvn	r0, #1
   1444c:	cmp	r3, r1
   14450:	cmpeq	r2, r0
   14454:	movls	r6, r2
   14458:	mvnhi	r6, #0
   1445c:	add	r1, sp, #144	; 0x90
   14460:	mov	r0, #9
   14464:	bl	11b94 <getrlimit64@plt>
   14468:	cmp	r0, #0
   1446c:	bne	14484 <__assert_fail@plt+0x253c>
   14470:	ldrd	r2, [sp, #144]	; 0x90
   14474:	mov	r1, #0
   14478:	cmp	r3, r1
   1447c:	cmpeq	r2, r6
   14480:	movcc	r6, r2
   14484:	add	r1, sp, #144	; 0x90
   14488:	mov	r0, #5
   1448c:	bl	11b94 <getrlimit64@plt>
   14490:	lsr	r6, r6, #1
   14494:	cmp	r0, #0
   14498:	bne	144fc <__assert_fail@plt+0x25b4>
   1449c:	ldr	r2, [sp, #144]	; 0x90
   144a0:	ldr	r3, [sp, #148]	; 0x94
   144a4:	lsr	sl, r2, #4
   144a8:	orr	sl, sl, r3, lsl #28
   144ac:	lsr	fp, r3, #4
   144b0:	adds	r2, sl, sl
   144b4:	adc	r3, fp, fp
   144b8:	adds	r2, r2, sl
   144bc:	adc	r3, r3, fp
   144c0:	lsl	r1, r3, #2
   144c4:	orr	r1, r1, r2, lsr #30
   144c8:	str	r1, [sp, #76]	; 0x4c
   144cc:	lsl	r1, r2, #2
   144d0:	str	r1, [sp, #72]	; 0x48
   144d4:	ldrd	r0, [sp, #72]	; 0x48
   144d8:	adds	r0, r0, r2
   144dc:	adc	r1, r1, r3
   144e0:	mov	r3, r1
   144e4:	mov	r1, #0
   144e8:	cmp	r3, r1
   144ec:	mov	r2, r0
   144f0:	cmpeq	r2, r6
   144f4:	movcc	r6, #15
   144f8:	mulcc	r6, r6, sl
   144fc:	bl	1c8b0 <__assert_fail@plt+0xa968>
   14500:	vmov.f64	d11, d0
   14504:	bl	1c810 <__assert_fail@plt+0xa8c8>
   14508:	vmov	s15, r6
   1450c:	ldr	r2, [r9, #112]	; 0x70
   14510:	mov	r3, #18
   14514:	vcvt.f64.u32	d5, s15
   14518:	mul	r3, r3, r2
   1451c:	vmul.f64	d7, d0, d10
   14520:	vmul.f64	d0, d0, d9
   14524:	vcmp.f64	d11, d7
   14528:	vmrs	APSR_nzcv, fpscr
   1452c:	vcmpe.f64	d0, d5
   14530:	vmovgt.f64	d7, d11
   14534:	vmrs	APSR_nzcv, fpscr
   14538:	vcvtmi.u32.f64	s13, d0
   1453c:	vcvtmi.f64.u32	d5, s13
   14540:	vmovmi	r6, s13
   14544:	vcmpe.f64	d5, d7
   14548:	vmrs	APSR_nzcv, fpscr
   1454c:	vcvtgt.u32.f64	s15, d7
   14550:	vmovgt	r6, s15
   14554:	cmp	r3, r6
   14558:	movcs	r6, r3
   1455c:	ldr	r3, [pc, #-648]	; 142dc <__assert_fail@plt+0x2394>
   14560:	str	r6, [r3, #1500]	; 0x5dc
   14564:	b	14348 <__assert_fail@plt+0x2400>
   14568:	ldr	sl, [sp, #32]
   1456c:	str	r1, [sp, #192]	; 0xc0
   14570:	b	14190 <__assert_fail@plt+0x2248>
   14574:	add	r0, sp, #248	; 0xf8
   14578:	bl	151ac <__assert_fail@plt+0x3264>
   1457c:	cmp	r0, #0
   14580:	beq	14654 <__assert_fail@plt+0x270c>
   14584:	ldr	r3, [pc, #-688]	; 142dc <__assert_fail@plt+0x2394>
   14588:	ldrb	r3, [r3, #1308]	; 0x51c
   1458c:	cmp	r3, #0
   14590:	bne	14648 <__assert_fail@plt+0x2700>
   14594:	ldrb	r3, [sp, #279]	; 0x117
   14598:	ldr	r2, [pc, #-708]	; 142dc <__assert_fail@plt+0x2394>
   1459c:	strb	r3, [r2, #1468]	; 0x5bc
   145a0:	b	133d0 <__assert_fail@plt+0x1488>
   145a4:	ldrb	r2, [r2, #1]
   145a8:	sub	r2, r2, #48	; 0x30
   145ac:	cmp	r2, #9
   145b0:	movhi	r2, #0
   145b4:	movls	r2, #1
   145b8:	str	r2, [sp, #68]	; 0x44
   145bc:	b	135d4 <__assert_fail@plt+0x168c>
   145c0:	ldr	r3, [pc, #-748]	; 142dc <__assert_fail@plt+0x2394>
   145c4:	ldrb	r6, [sp, #319]	; 0x13f
   145c8:	ldrb	r3, [r3, #1310]	; 0x51e
   145cc:	cmp	r3, #0
   145d0:	bne	13318 <__assert_fail@plt+0x13d0>
   145d4:	ldr	r3, [pc, #-768]	; 142dc <__assert_fail@plt+0x2394>
   145d8:	ldrb	r3, [r3, #1309]	; 0x51d
   145dc:	cmp	r3, #0
   145e0:	strbeq	r3, [sp, #319]	; 0x13f
   145e4:	b	13318 <__assert_fail@plt+0x13d0>
   145e8:	mov	r2, #5
   145ec:	ldr	r1, [pc, #-928]	; 14254 <__assert_fail@plt+0x230c>
   145f0:	mov	r0, r7
   145f4:	bl	11b58 <dcgettext@plt>
   145f8:	ldr	r2, [sp, #36]	; 0x24
   145fc:	mov	r1, #3
   14600:	add	r5, r5, #1
   14604:	mov	r4, r0
   14608:	mov	r0, r7
   1460c:	bl	1e89c <__assert_fail@plt+0xc954>
   14610:	mov	r2, r4
   14614:	str	r5, [sp]
   14618:	mov	r1, r7
   1461c:	mov	r3, r0
   14620:	mov	r0, #2
   14624:	bl	11c90 <error@plt>
   14628:	mov	r2, #5
   1462c:	ldr	r1, [pc, #-988]	; 14258 <__assert_fail@plt+0x2310>
   14630:	bl	11b58 <dcgettext@plt>
   14634:	ldr	r1, [r8]
   14638:	mov	r4, r0
   1463c:	mov	r0, #4
   14640:	bl	1e7e0 <__assert_fail@plt+0xc898>
   14644:	b	12944 <__assert_fail@plt+0x9fc>
   14648:	str	r1, [sp, #64]	; 0x40
   1464c:	str	r1, [sp, #28]
   14650:	b	1319c <__assert_fail@plt+0x1254>
   14654:	mov	r1, #40	; 0x28
   14658:	add	r0, sp, #248	; 0xf8
   1465c:	bl	204d0 <__assert_fail@plt+0xe588>
   14660:	ldr	r3, [pc, #-1036]	; 1425c <__assert_fail@plt+0x2314>
   14664:	add	r1, r3, #8
   14668:	sub	r3, r3, #1168	; 0x490
   1466c:	ldr	r3, [r3, #1176]	; 0x498
   14670:	mov	r2, r0
   14674:	b	14680 <__assert_fail@plt+0x2738>
   14678:	add	r1, r3, #36	; 0x24
   1467c:	ldr	r3, [r3, #36]	; 0x24
   14680:	cmp	r3, #0
   14684:	bne	14678 <__assert_fail@plt+0x2730>
   14688:	str	r2, [r1]
   1468c:	ldr	r1, [pc, #-952]	; 142dc <__assert_fail@plt+0x2394>
   14690:	str	r3, [r2, #36]	; 0x24
   14694:	ldrb	r3, [sp, #275]	; 0x113
   14698:	ldr	r0, [r1, #1176]	; 0x498
   1469c:	str	r3, [sp, #64]	; 0x40
   146a0:	cmp	r0, #0
   146a4:	mov	r3, #1
   146a8:	str	r3, [sp, #28]
   146ac:	bne	13124 <__assert_fail@plt+0x11dc>
   146b0:	b	1318c <__assert_fail@plt+0x1244>
   146b4:	ldr	r1, [pc, #-1084]	; 14280 <__assert_fail@plt+0x2338>
   146b8:	mov	r2, #5
   146bc:	mov	r0, #0
   146c0:	bl	11b58 <dcgettext@plt>
   146c4:	ldr	r1, [sp, #48]	; 0x30
   146c8:	bl	1554c <__assert_fail@plt+0x3604>
   146cc:	ldr	r2, [sp, #212]	; 0xd4
   146d0:	cmp	r2, #0
   146d4:	bne	13654 <__assert_fail@plt+0x170c>
   146d8:	mvn	r2, #0
   146dc:	str	r2, [sp, #208]	; 0xd0
   146e0:	cmp	r0, #0
   146e4:	beq	12ed8 <__assert_fail@plt+0xf90>
   146e8:	b	13654 <__assert_fail@plt+0x170c>
   146ec:	mov	r2, #0
   146f0:	add	r0, r0, #1
   146f4:	add	r1, sp, #212	; 0xd4
   146f8:	str	r3, [sp, #88]	; 0x58
   146fc:	bl	16684 <__assert_fail@plt+0x473c>
   14700:	ldr	r2, [sp, #208]	; 0xd0
   14704:	ldr	r3, [sp, #88]	; 0x58
   14708:	cmp	r2, #0
   1470c:	bne	146e0 <__assert_fail@plt+0x2798>
   14710:	ldr	r2, [sp, #212]	; 0xd4
   14714:	cmp	r2, #0
   14718:	bne	146e0 <__assert_fail@plt+0x2798>
   1471c:	b	146d8 <__assert_fail@plt+0x2790>
   14720:	ldr	r1, [pc, #-1184]	; 14288 <__assert_fail@plt+0x2340>
   14724:	mov	r2, #5
   14728:	bl	11b58 <dcgettext@plt>
   1472c:	ldr	r3, [sp, #48]	; 0x30
   14730:	ldr	r1, [pc, #-1240]	; 14260 <__assert_fail@plt+0x2318>
   14734:	cmp	r3, #0
   14738:	moveq	r3, r1
   1473c:	mov	r1, r3
   14740:	bl	1554c <__assert_fail@plt+0x3604>
   14744:	ldr	r0, [sp, #16]
   14748:	bl	16758 <__assert_fail@plt+0x4810>
   1474c:	mov	r3, #0
   14750:	strb	r3, [r0, #31]
   14754:	strb	r3, [r0, #25]
   14758:	strb	r3, [r0, #24]
   1475c:	add	r1, sp, #288	; 0x120
   14760:	bl	15220 <__assert_fail@plt+0x32d8>
   14764:	add	r0, sp, #288	; 0x120
   14768:	bl	15470 <__assert_fail@plt+0x3528>
   1476c:	str	fp, [sp]
   14770:	mov	r1, sl
   14774:	ldr	r3, [pc, #-1304]	; 14264 <__assert_fail@plt+0x231c>
   14778:	mov	r2, #7
   1477c:	bl	207e0 <__assert_fail@plt+0xe898>
   14780:	ldr	r1, [pc, #-1312]	; 14268 <__assert_fail@plt+0x2320>
   14784:	mov	r2, #5
   14788:	bl	11b58 <dcgettext@plt>
   1478c:	mov	r1, #0
   14790:	mov	r2, r0
   14794:	mov	r0, #2
   14798:	bl	11c90 <error@plt>
   1479c:	ldr	r6, [pc, #-1228]	; 142d8 <__assert_fail@plt+0x2390>
   147a0:	b	13218 <__assert_fail@plt+0x12d0>
   147a4:	bl	1c810 <__assert_fail@plt+0xa8c8>
   147a8:	add	r3, sp, #392	; 0x188
   147ac:	ldrd	r0, [r3]
   147b0:	vmov.f64	d10, d0
   147b4:	bl	220e8 <_obstack_memory_used@@Base+0x81c>
   147b8:	vmov	d7, r0, r1
   147bc:	vmul.f64	d10, d7, d10
   147c0:	vdiv.f64	d7, d10, d9
   147c4:	vcmpe.f64	d7, d8
   147c8:	vmrs	APSR_nzcv, fpscr
   147cc:	bpl	13794 <__assert_fail@plt+0x184c>
   147d0:	vmov	r0, r1, d7
   147d4:	bl	221a8 <_obstack_memory_used@@Base+0x8dc>
   147d8:	add	r3, sp, #392	; 0x188
   147dc:	strd	r0, [r3]
   147e0:	b	12fa8 <__assert_fail@plt+0x1060>
   147e4:	mov	r0, fp
   147e8:	ldr	r1, [pc, #-1380]	; 1428c <__assert_fail@plt+0x2344>
   147ec:	bl	154a0 <__assert_fail@plt+0x3558>
   147f0:	ldr	r3, [pc, #-1420]	; 1426c <__assert_fail@plt+0x2324>
   147f4:	ldr	r2, [pc, #-1420]	; 14270 <__assert_fail@plt+0x2328>
   147f8:	ldr	r1, [pc, #-1420]	; 14274 <__assert_fail@plt+0x232c>
   147fc:	ldr	r0, [pc, #-1420]	; 14278 <__assert_fail@plt+0x2330>
   14800:	bl	11f48 <__assert_fail@plt>
   14804:	ldr	r1, [pc, #-1424]	; 1427c <__assert_fail@plt+0x2334>
   14808:	mov	r2, #5
   1480c:	mov	r0, #0
   14810:	bl	11b58 <dcgettext@plt>
   14814:	ldr	r3, [sp, #64]	; 0x40
   14818:	ldr	r1, [r3, r7, lsl #2]
   1481c:	bl	1554c <__assert_fail@plt+0x3604>
   14820:	strd	sl, [sp, #80]	; 0x50
   14824:	ldr	sl, [sp, #32]
   14828:	ldr	fp, [sp, #60]	; 0x3c
   1482c:	mov	r8, r3
   14830:	add	r3, sp, #176	; 0xb0
   14834:	mov	r2, r8
   14838:	mov	r0, r3
   1483c:	ldr	r1, [sp, #56]	; 0x38
   14840:	str	r3, [sp, #60]	; 0x3c
   14844:	bl	157a8 <__assert_fail@plt+0x3860>
   14848:	b	13f04 <__assert_fail@plt+0x1fbc>
   1484c:	ldr	r1, [pc, #-1492]	; 14280 <__assert_fail@plt+0x2338>
   14850:	mov	r2, #5
   14854:	mov	r0, #0
   14858:	bl	11b58 <dcgettext@plt>
   1485c:	ldr	r1, [pc, #-1504]	; 14284 <__assert_fail@plt+0x233c>
   14860:	bl	1554c <__assert_fail@plt+0x3604>
   14864:	ldr	r0, [sp, #40]	; 0x28
   14868:	bl	16758 <__assert_fail@plt+0x4810>
   1486c:	ldr	r0, [sp, #176]	; 0xb0
   14870:	bl	1afe8 <__assert_fail@plt+0x90a0>
   14874:	ldr	r3, [pc, #-1440]	; 142dc <__assert_fail@plt+0x2394>
   14878:	mov	r1, #8
   1487c:	mov	r0, fp
   14880:	ldr	r4, [r3, #1032]	; 0x408
   14884:	bl	20130 <__assert_fail@plt+0xe1e8>
   14888:	mov	r5, r0
   1488c:	mov	r3, r0
   14890:	b	148a4 <__assert_fail@plt+0x295c>
   14894:	add	r2, r4, #9
   14898:	str	r4, [r3, #-4]
   1489c:	ldr	r4, [r4]
   148a0:	str	r2, [r3, #-8]
   148a4:	cmp	r4, #0
   148a8:	add	r3, r3, #8
   148ac:	bne	14894 <__assert_fail@plt+0x294c>
   148b0:	mov	r0, r5
   148b4:	ldr	r3, [sp, #40]	; 0x28
   148b8:	mov	r2, fp
   148bc:	mov	r1, fp
   148c0:	bl	187a0 <__assert_fail@plt+0x6858>
   148c4:	mov	r0, r5
   148c8:	bl	1afe8 <__assert_fail@plt+0x90a0>
   148cc:	b	140e4 <__assert_fail@plt+0x219c>
   148d0:	mov	r0, #2
   148d4:	bl	1c73c <__assert_fail@plt+0xa7f4>
   148d8:	cmp	r0, #8
   148dc:	movcc	r3, r0
   148e0:	movcs	r3, #8
   148e4:	str	r3, [sp, #52]	; 0x34
   148e8:	b	13e38 <__assert_fail@plt+0x1ef0>
   148ec:	strd	sl, [sp, #80]	; 0x50
   148f0:	mov	sl, r3
   148f4:	ldr	fp, [sp, #60]	; 0x3c
   148f8:	b	14830 <__assert_fail@plt+0x28e8>
   148fc:	ldr	r3, [pc, #-1576]	; 142dc <__assert_fail@plt+0x2394>
   14900:	strd	sl, [sp, #80]	; 0x50
   14904:	ldr	sl, [sp, #32]
   14908:	ldr	fp, [sp, #60]	; 0x3c
   1490c:	ldr	r3, [r3, #1500]	; 0x5dc
   14910:	b	1482c <__assert_fail@plt+0x28e4>
   14914:	mov	r1, #8
   14918:	mov	r0, sl
   1491c:	bl	204a8 <__assert_fail@plt+0xe560>
   14920:	mov	r2, #0
   14924:	cmp	r2, sl
   14928:	beq	14954 <__assert_fail@plt+0x2a0c>
   1492c:	ldr	r3, [fp, r2, lsl #2]
   14930:	str	r3, [r0, r2, lsl #3]
   14934:	add	r2, r2, #1
   14938:	b	14924 <__assert_fail@plt+0x29dc>
   1493c:	ldr	r1, [pc, #-1724]	; 14288 <__assert_fail@plt+0x2340>
   14940:	mov	r2, #5
   14944:	mov	r0, #0
   14948:	bl	11b58 <dcgettext@plt>
   1494c:	ldr	r1, [sp, #40]	; 0x28
   14950:	bl	1554c <__assert_fail@plt+0x3604>
   14954:	ldr	r3, [sp, #40]	; 0x28
   14958:	mov	r1, #0
   1495c:	bl	187a0 <__assert_fail@plt+0x6858>
   14960:	b	14104 <__assert_fail@plt+0x21bc>
   14964:	ldr	r0, [fp]
   14968:	ldr	r1, [pc, #-1764]	; 1428c <__assert_fail@plt+0x2344>
   1496c:	bl	154a0 <__assert_fail@plt+0x3558>
   14970:	ldr	r3, [pc, #-1692]	; 142dc <__assert_fail@plt+0x2394>
   14974:	ldr	r3, [r3]
   14978:	cmp	r3, #256	; 0x100
   1497c:	beq	13210 <__assert_fail@plt+0x12c8>
   14980:	uxtb	r3, r3
   14984:	ldr	r2, [r4]
   14988:	lsl	r3, r3, #1
   1498c:	ldrh	r3, [r2, r3]
   14990:	and	r3, r3, #1
   14994:	str	r3, [sp, #16]
   14998:	b	13204 <__assert_fail@plt+0x12bc>
   1499c:	mov	r2, #5
   149a0:	ldr	r1, [pc, #-1816]	; 14290 <__assert_fail@plt+0x2348>
   149a4:	mov	r0, #0
   149a8:	bl	11b58 <dcgettext@plt>
   149ac:	mov	r4, #0
   149b0:	strb	r7, [sp, #112]	; 0x70
   149b4:	strb	r4, [sp, #113]	; 0x71
   149b8:	mov	r8, r0
   149bc:	add	r0, sp, #112	; 0x70
   149c0:	bl	1ea20 <__assert_fail@plt+0xcad8>
   149c4:	mov	r2, r8
   149c8:	mov	r1, r4
   149cc:	mov	r3, r0
   149d0:	mov	r0, r4
   149d4:	bl	11c90 <error@plt>
   149d8:	b	13294 <__assert_fail@plt+0x134c>
   149dc:	ldr	r3, [r3]
   149e0:	cmp	r3, #256	; 0x100
   149e4:	beq	1323c <__assert_fail@plt+0x12f4>
   149e8:	ldr	r3, [pc, #-1812]	; 142dc <__assert_fail@plt+0x2394>
   149ec:	ldr	r2, [r4]
   149f0:	ldrb	r3, [r3, #4]
   149f4:	lsl	r3, r3, #1
   149f8:	ldrh	r3, [r2, r3]
   149fc:	tst	r3, #1
   14a00:	beq	13294 <__assert_fail@plt+0x134c>
   14a04:	mov	r2, #5
   14a08:	ldr	r1, [pc, #-1916]	; 14294 <__assert_fail@plt+0x234c>
   14a0c:	mov	r0, #0
   14a10:	bl	11b58 <dcgettext@plt>
   14a14:	ldr	r3, [pc, #-1856]	; 142dc <__assert_fail@plt+0x2394>
   14a18:	mov	r4, #0
   14a1c:	strb	r4, [sp, #117]	; 0x75
   14a20:	ldrb	r3, [r3, #4]
   14a24:	strb	r3, [sp, #116]	; 0x74
   14a28:	mov	r6, r0
   14a2c:	add	r0, sp, #116	; 0x74
   14a30:	bl	1ea20 <__assert_fail@plt+0xcad8>
   14a34:	mov	r2, r6
   14a38:	mov	r1, r4
   14a3c:	mov	r3, r0
   14a40:	mov	r0, r4
   14a44:	bl	11c90 <error@plt>
   14a48:	ldr	r3, [sp, #32]
   14a4c:	ldr	r2, [sp, #56]	; 0x38
   14a50:	orr	r3, r3, r2
   14a54:	tst	r3, #255	; 0xff
   14a58:	bne	132b4 <__assert_fail@plt+0x136c>
   14a5c:	b	132d0 <__assert_fail@plt+0x1388>
   14a60:	mov	r2, #5
   14a64:	ldr	r1, [pc, #-2004]	; 14298 <__assert_fail@plt+0x2350>
   14a68:	mov	r0, #0
   14a6c:	bl	11b58 <dcgettext@plt>
   14a70:	ldr	r3, [pc, #-1948]	; 142dc <__assert_fail@plt+0x2394>
   14a74:	mov	r7, #0
   14a78:	strb	r7, [sp, #121]	; 0x79
   14a7c:	ldr	r3, [r3]
   14a80:	strb	r3, [sp, #120]	; 0x78
   14a84:	mov	r8, r0
   14a88:	add	r0, sp, #120	; 0x78
   14a8c:	bl	1ea20 <__assert_fail@plt+0xcad8>
   14a90:	mov	r2, r8
   14a94:	mov	r1, r7
   14a98:	mov	r3, r0
   14a9c:	mov	r0, r7
   14aa0:	bl	11c90 <error@plt>
   14aa4:	b	13210 <__assert_fail@plt+0x12c8>
   14aa8:	ldr	r3, [sp, #208]	; 0xd0
   14aac:	cmp	r3, #0
   14ab0:	bne	12ed8 <__assert_fail@plt+0xf90>
   14ab4:	ldr	r3, [sp, #212]	; 0xd4
   14ab8:	cmp	r3, #0
   14abc:	mvneq	r3, #0
   14ac0:	streq	r3, [sp, #208]	; 0xd0
   14ac4:	b	12ed8 <__assert_fail@plt+0xf90>
   14ac8:	mov	r2, #5
   14acc:	ldr	r1, [pc, #-2104]	; 1429c <__assert_fail@plt+0x2354>
   14ad0:	mov	r0, #0
   14ad4:	bl	11b58 <dcgettext@plt>
   14ad8:	mov	r1, #0
   14adc:	mov	r2, r0
   14ae0:	mov	r0, r1
   14ae4:	bl	11c90 <error@plt>
   14ae8:	b	132d0 <__assert_fail@plt+0x1388>
   14aec:	ldr	r0, [fp]
   14af0:	ldr	r1, [pc, #-2136]	; 142a0 <__assert_fail@plt+0x2358>
   14af4:	bl	154a0 <__assert_fail@plt+0x3558>
   14af8:	ldr	r2, [pc, #-2140]	; 142a4 <__assert_fail@plt+0x235c>
   14afc:	add	r1, sp, #220	; 0xdc
   14b00:	add	r0, r0, #1
   14b04:	bl	16684 <__assert_fail@plt+0x473c>
   14b08:	b	13cc8 <__assert_fail@plt+0x1d80>
   14b0c:	ldr	r1, [pc, #-2156]	; 142a8 <__assert_fail@plt+0x2360>
   14b10:	mov	r2, #5
   14b14:	mov	r0, #0
   14b18:	b	14788 <__assert_fail@plt+0x2840>
   14b1c:	ldr	r0, [pc, #-2168]	; 142ac <__assert_fail@plt+0x2364>
   14b20:	bl	15470 <__assert_fail@plt+0x3528>
   14b24:	mov	r2, #5
   14b28:	ldr	r1, [pc, #-2176]	; 142b0 <__assert_fail@plt+0x2368>
   14b2c:	b	14b14 <__assert_fail@plt+0x2bcc>
   14b30:	ldr	r8, [sp, #68]	; 0x44
   14b34:	mov	r2, #5
   14b38:	ldr	r1, [pc, #-2188]	; 142b4 <__assert_fail@plt+0x236c>
   14b3c:	mov	r0, r8
   14b40:	bl	11b58 <dcgettext@plt>
   14b44:	ldr	r3, [pc, #-2196]	; 142b8 <__assert_fail@plt+0x2370>
   14b48:	mov	r5, r0
   14b4c:	mov	r0, fp
   14b50:	add	fp, r3, sl, lsl #4
   14b54:	ldr	r4, [fp, #368]	; 0x170
   14b58:	bl	1ea20 <__assert_fail@plt+0xcad8>
   14b5c:	mov	r2, r5
   14b60:	mov	r3, r4
   14b64:	mov	r1, r8
   14b68:	str	r0, [sp]
   14b6c:	mov	r0, r8
   14b70:	bl	11c90 <error@plt>
   14b74:	mov	r2, #5
   14b78:	ldr	r1, [pc, #-2244]	; 142bc <__assert_fail@plt+0x2374>
   14b7c:	mov	r0, r8
   14b80:	bl	11b58 <dcgettext@plt>
   14b84:	mov	r5, r0
   14b88:	ldr	r0, [pc, #-2256]	; 142c0 <__assert_fail@plt+0x2378>
   14b8c:	bl	1ea20 <__assert_fail@plt+0xcad8>
   14b90:	b	12f7c <__assert_fail@plt+0x1034>
   14b94:	mov	r2, #5
   14b98:	ldr	r1, [pc, #-2268]	; 142c4 <__assert_fail@plt+0x237c>
   14b9c:	b	14b14 <__assert_fail@plt+0x2bcc>
   14ba0:	mov	r2, #5
   14ba4:	ldr	r1, [pc, #-2276]	; 142c8 <__assert_fail@plt+0x2380>
   14ba8:	mov	r0, #0
   14bac:	bl	11b58 <dcgettext@plt>
   14bb0:	mov	r4, r0
   14bb4:	ldr	r0, [fp]
   14bb8:	bl	1ea20 <__assert_fail@plt+0xcad8>
   14bbc:	b	12944 <__assert_fail@plt+0x9fc>
   14bc0:	mov	r2, #5
   14bc4:	ldr	r1, [pc, #-2304]	; 142cc <__assert_fail@plt+0x2384>
   14bc8:	b	14b14 <__assert_fail@plt+0x2bcc>
   14bcc:	mov	r2, #5
   14bd0:	ldr	r1, [pc, #-2312]	; 142d0 <__assert_fail@plt+0x2388>
   14bd4:	b	14b14 <__assert_fail@plt+0x2bcc>
   14bd8:	mov	r9, r4
   14bdc:	ldr	fp, [sp, #16]
   14be0:	mov	r4, r8
   14be4:	b	128e4 <__assert_fail@plt+0x99c>
   14be8:	ldr	r5, [fp]
   14bec:	ldr	r1, [pc, #-2336]	; 142d4 <__assert_fail@plt+0x238c>
   14bf0:	mov	r0, r5
   14bf4:	bl	1560c <__assert_fail@plt+0x36c4>
   14bf8:	subs	r3, r0, #0
   14bfc:	str	r3, [sp, #28]
   14c00:	beq	14e5c <__assert_fail@plt+0x2f14>
   14c04:	ldr	r3, [pc, #-2356]	; 142d8 <__assert_fail@plt+0x2390>
   14c08:	ldr	r2, [pc, #-2356]	; 142dc <__assert_fail@plt+0x2394>
   14c0c:	ldr	r1, [pc, #-2360]	; 142dc <__assert_fail@plt+0x2394>
   14c10:	ldr	r3, [r3, #104]	; 0x68
   14c14:	ldr	r2, [r2, #1488]	; 0x5d0
   14c18:	ldrb	r6, [r1, #1309]	; 0x51d
   14c1c:	cmp	r2, r3
   14c20:	movcc	r2, r3
   14c24:	ldr	r3, [pc, #-2384]	; 142dc <__assert_fail@plt+0x2394>
   14c28:	add	r1, sp, #288	; 0x120
   14c2c:	str	r1, [sp, #36]	; 0x24
   14c30:	mov	r0, r1
   14c34:	mov	r1, #16
   14c38:	ldr	sl, [r3, #1176]	; 0x498
   14c3c:	add	r7, sp, #536	; 0x218
   14c40:	bl	157a8 <__assert_fail@plt+0x3860>
   14c44:	ldr	r3, [sp, #40]	; 0x28
   14c48:	mov	r2, #0
   14c4c:	mov	r4, r3
   14c50:	str	r3, [r7, #-392]!	; 0xfffffe78
   14c54:	eor	r6, r6, #1
   14c58:	mov	r3, #0
   14c5c:	strd	r2, [sp, #16]
   14c60:	mov	r2, r5
   14c64:	ldr	r1, [sp, #28]
   14c68:	ldr	r0, [sp, #36]	; 0x24
   14c6c:	bl	15fac <__assert_fail@plt+0x4064>
   14c70:	cmp	r0, #0
   14c74:	beq	14e54 <__assert_fail@plt+0x2f0c>
   14c78:	ldr	fp, [sp, #288]	; 0x120
   14c7c:	ldr	r3, [sp, #300]	; 0x12c
   14c80:	ldr	r8, [sp, #296]	; 0x128
   14c84:	add	fp, fp, r3
   14c88:	cmp	r4, #0
   14c8c:	sub	r8, fp, r8, lsl #4
   14c90:	bne	14d44 <__assert_fail@plt+0x2dfc>
   14c94:	mov	r1, fp
   14c98:	b	14cb4 <__assert_fail@plt+0x2d6c>
   14c9c:	sub	r1, r1, #32
   14ca0:	mov	r0, fp
   14ca4:	bl	178d0 <__assert_fail@plt+0x5988>
   14ca8:	mov	r1, fp
   14cac:	cmp	r6, r0
   14cb0:	ble	14d58 <__assert_fail@plt+0x2e10>
   14cb4:	sub	fp, r1, #16
   14cb8:	cmp	r8, fp
   14cbc:	bcc	14c9c <__assert_fail@plt+0x2d54>
   14cc0:	ldrd	r0, [sp, #16]
   14cc4:	ldr	r3, [sp, #296]	; 0x128
   14cc8:	ldr	r2, [fp, #4]
   14ccc:	adds	r0, r0, r3
   14cd0:	adc	r1, r1, #0
   14cd4:	cmp	r4, r2
   14cd8:	strd	r0, [sp, #16]
   14cdc:	bcc	14e2c <__assert_fail@plt+0x2ee4>
   14ce0:	ldr	r1, [fp]
   14ce4:	ldr	r0, [sp, #144]	; 0x90
   14ce8:	bl	11ac8 <memcpy@plt>
   14cec:	ldr	r3, [fp, #4]
   14cf0:	cmp	sl, #0
   14cf4:	str	r3, [sp, #148]	; 0x94
   14cf8:	beq	14c60 <__assert_fail@plt+0x2d18>
   14cfc:	ldr	r0, [fp]
   14d00:	ldr	r3, [fp, #8]
   14d04:	ldr	r1, [fp, #12]
   14d08:	ldr	r2, [sp, #144]	; 0x90
   14d0c:	sub	r3, r3, r0
   14d10:	sub	r1, r1, r0
   14d14:	add	r3, r2, r3
   14d18:	add	r2, r2, r1
   14d1c:	str	r3, [sp, #152]	; 0x98
   14d20:	str	r2, [sp, #156]	; 0x9c
   14d24:	b	14c60 <__assert_fail@plt+0x2d18>
   14d28:	str	fp, [sp, #16]
   14d2c:	str	r0, [r2]
   14d30:	str	r3, [r0, #36]	; 0x24
   14d34:	b	12348 <__assert_fail@plt+0x400>
   14d38:	ldr	r0, [fp]
   14d3c:	ldr	r1, [pc, #-2660]	; 142e0 <__assert_fail@plt+0x2398>
   14d40:	bl	154a0 <__assert_fail@plt+0x3558>
   14d44:	sub	r1, fp, #16
   14d48:	mov	r0, r7
   14d4c:	bl	178d0 <__assert_fail@plt+0x5988>
   14d50:	cmp	r6, r0
   14d54:	bgt	14c94 <__assert_fail@plt+0x2d4c>
   14d58:	cmp	r9, #99	; 0x63
   14d5c:	movne	r6, #0
   14d60:	bne	14e00 <__assert_fail@plt+0x2eb8>
   14d64:	ldr	r2, [sp, #300]	; 0x12c
   14d68:	ldr	r3, [sp, #288]	; 0x120
   14d6c:	sub	fp, fp, #16
   14d70:	add	r3, r3, r2
   14d74:	ldrd	r6, [sp, #16]
   14d78:	sub	r3, r3, fp
   14d7c:	ldr	r4, [pc, #-2720]	; 142e4 <__assert_fail@plt+0x239c>
   14d80:	asr	r3, r3, #4
   14d84:	adds	r6, r6, r3
   14d88:	mov	r2, #5
   14d8c:	ldr	r1, [pc, #-2732]	; 142e8 <__assert_fail@plt+0x23a0>
   14d90:	mov	r0, #0
   14d94:	adc	r7, r7, r3, asr #31
   14d98:	ldr	r8, [r4]
   14d9c:	bl	11b58 <dcgettext@plt>
   14da0:	ldr	r3, [pc, #-2748]	; 142ec <__assert_fail@plt+0x23a4>
   14da4:	mov	r1, r7
   14da8:	add	r2, sp, #176	; 0xb0
   14dac:	mov	sl, r0
   14db0:	mov	r0, r6
   14db4:	ldr	r6, [r3]
   14db8:	bl	1c3b4 <__assert_fail@plt+0xa46c>
   14dbc:	mov	r3, r6
   14dc0:	mov	r2, sl
   14dc4:	mov	r1, #1
   14dc8:	str	r5, [sp]
   14dcc:	mov	r6, #0
   14dd0:	str	r0, [sp, #4]
   14dd4:	mov	r0, r8
   14dd8:	bl	11dd4 <__fprintf_chk@plt>
   14ddc:	mov	r2, #5
   14de0:	ldr	r1, [pc, #-2808]	; 142f0 <__assert_fail@plt+0x23a8>
   14de4:	mov	r0, r6
   14de8:	ldr	r4, [r4]
   14dec:	bl	11b58 <dcgettext@plt>
   14df0:	mov	r1, r4
   14df4:	mov	r2, r0
   14df8:	mov	r0, fp
   14dfc:	bl	16800 <__assert_fail@plt+0x48b8>
   14e00:	mov	r1, r5
   14e04:	ldr	r0, [sp, #28]
   14e08:	bl	1677c <__assert_fail@plt+0x4834>
   14e0c:	ldr	r0, [sp, #288]	; 0x120
   14e10:	bl	1afe8 <__assert_fail@plt+0x90a0>
   14e14:	ldr	r0, [sp, #144]	; 0x90
   14e18:	bl	1afe8 <__assert_fail@plt+0x90a0>
   14e1c:	eor	r0, r6, #1
   14e20:	bl	11d38 <exit@plt>
   14e24:	cmp	r2, r4
   14e28:	bls	14e38 <__assert_fail@plt+0x2ef0>
   14e2c:	lsls	r4, r4, #1
   14e30:	bne	14e24 <__assert_fail@plt+0x2edc>
   14e34:	mov	r4, r2
   14e38:	ldr	r0, [sp, #144]	; 0x90
   14e3c:	bl	1afe8 <__assert_fail@plt+0x90a0>
   14e40:	mov	r0, r4
   14e44:	bl	20048 <__assert_fail@plt+0xe100>
   14e48:	ldr	r2, [fp, #4]
   14e4c:	str	r0, [sp, #144]	; 0x90
   14e50:	b	14ce0 <__assert_fail@plt+0x2d98>
   14e54:	mov	r6, #1
   14e58:	b	14e00 <__assert_fail@plt+0x2eb8>
   14e5c:	mov	r0, r5
   14e60:	bl	16758 <__assert_fail@plt+0x4810>
   14e64:	mov	fp, #0
   14e68:	mov	lr, #0
   14e6c:	pop	{r1}		; (ldr r1, [sp], #4)
   14e70:	mov	r2, sp
   14e74:	push	{r2}		; (str r2, [sp, #-4]!)
   14e78:	push	{r0}		; (str r0, [sp, #-4]!)
   14e7c:	ldr	ip, [pc, #16]	; 14e94 <__assert_fail@plt+0x2f4c>
   14e80:	push	{ip}		; (str ip, [sp, #-4]!)
   14e84:	ldr	r0, [pc, #12]	; 14e98 <__assert_fail@plt+0x2f50>
   14e88:	ldr	r3, [pc, #12]	; 14e9c <__assert_fail@plt+0x2f54>
   14e8c:	bl	11cf0 <__libc_start_main@plt>
   14e90:	bl	11f24 <abort@plt>
   14e94:	andeq	r2, r2, r8, ror r3
   14e98:	andeq	r1, r1, r8, asr pc
   14e9c:	andeq	r2, r2, r8, lsl r3
   14ea0:	ldr	r3, [pc, #20]	; 14ebc <__assert_fail@plt+0x2f74>
   14ea4:	ldr	r2, [pc, #20]	; 14ec0 <__assert_fail@plt+0x2f78>
   14ea8:	add	r3, pc, r3
   14eac:	ldr	r2, [r3, r2]
   14eb0:	cmp	r2, #0
   14eb4:	bxeq	lr
   14eb8:	b	11d14 <__gmon_start__@plt>
   14ebc:	andeq	r0, r2, r0, asr r1
   14ec0:	ldrdeq	r0, [r0], -r8
   14ec4:	ldr	r3, [pc, #28]	; 14ee8 <__assert_fail@plt+0x2fa0>
   14ec8:	ldr	r0, [pc, #28]	; 14eec <__assert_fail@plt+0x2fa4>
   14ecc:	sub	r3, r3, r0
   14ed0:	cmp	r3, #6
   14ed4:	bxls	lr
   14ed8:	ldr	r3, [pc, #16]	; 14ef0 <__assert_fail@plt+0x2fa8>
   14edc:	cmp	r3, #0
   14ee0:	bxeq	lr
   14ee4:	bx	r3
   14ee8:			; <UNDEFINED> instruction: 0x000352bb
   14eec:			; <UNDEFINED> instruction: 0x000352b8
   14ef0:	andeq	r0, r0, r0
   14ef4:	ldr	r1, [pc, #36]	; 14f20 <__assert_fail@plt+0x2fd8>
   14ef8:	ldr	r0, [pc, #36]	; 14f24 <__assert_fail@plt+0x2fdc>
   14efc:	sub	r1, r1, r0
   14f00:	asr	r1, r1, #2
   14f04:	add	r1, r1, r1, lsr #31
   14f08:	asrs	r1, r1, #1
   14f0c:	bxeq	lr
   14f10:	ldr	r3, [pc, #16]	; 14f28 <__assert_fail@plt+0x2fe0>
   14f14:	cmp	r3, #0
   14f18:	bxeq	lr
   14f1c:	bx	r3
   14f20:			; <UNDEFINED> instruction: 0x000352b8
   14f24:			; <UNDEFINED> instruction: 0x000352b8
   14f28:	andeq	r0, r0, r0
   14f2c:	push	{r4, lr}
   14f30:	ldr	r4, [pc, #24]	; 14f50 <__assert_fail@plt+0x3008>
   14f34:	ldrb	r3, [r4]
   14f38:	cmp	r3, #0
   14f3c:	popne	{r4, pc}
   14f40:	bl	14ec4 <__assert_fail@plt+0x2f7c>
   14f44:	mov	r3, #1
   14f48:	strb	r3, [r4]
   14f4c:	pop	{r4, pc}
   14f50:	ldrdeq	r5, [r3], -ip
   14f54:	ldr	r0, [pc, #40]	; 14f84 <__assert_fail@plt+0x303c>
   14f58:	ldr	r3, [r0]
   14f5c:	cmp	r3, #0
   14f60:	bne	14f68 <__assert_fail@plt+0x3020>
   14f64:	b	14ef4 <__assert_fail@plt+0x2fac>
   14f68:	ldr	r3, [pc, #24]	; 14f88 <__assert_fail@plt+0x3040>
   14f6c:	cmp	r3, #0
   14f70:	beq	14f64 <__assert_fail@plt+0x301c>
   14f74:	push	{r4, lr}
   14f78:	blx	r3
   14f7c:	pop	{r4, lr}
   14f80:	b	14ef4 <__assert_fail@plt+0x2fac>
   14f84:	andeq	r4, r3, ip, lsl #30
	...
   14f90:	push	{r4, lr}
   14f94:	ldr	r0, [r0, #4]
   14f98:	bl	21b44 <_obstack_memory_used@@Base+0x278>
   14f9c:	mov	r0, r1
   14fa0:	pop	{r4, pc}
   14fa4:	ldr	r0, [r0, #4]
   14fa8:	ldr	r3, [r1, #4]
   14fac:	sub	r0, r0, r3
   14fb0:	clz	r0, r0
   14fb4:	lsr	r0, r0, #5
   14fb8:	bx	lr
   14fbc:	push	{r4, r5, r6, r7, lr}
   14fc0:	mov	lr, #0
   14fc4:	ldr	r7, [pc, #168]	; 15074 <__assert_fail@plt+0x312c>
   14fc8:	ldr	r2, [r0]
   14fcc:	mov	r1, lr
   14fd0:	ldr	r5, [r7]
   14fd4:	ldrb	r3, [r2]
   14fd8:	mov	r4, lr
   14fdc:	mov	r6, #1
   14fe0:	b	15008 <__assert_fail@plt+0x30c0>
   14fe4:	cmp	r1, r3
   14fe8:	movcc	r1, r3
   14fec:	ldrb	r3, [r2, #1]
   14ff0:	mov	lr, r4
   14ff4:	cmp	r3, r5
   14ff8:	addeq	ip, r2, #2
   14ffc:	ldrbeq	r3, [r2, #2]
   15000:	moveq	lr, r6
   15004:	mov	r2, ip
   15008:	sub	ip, r3, #48	; 0x30
   1500c:	cmp	ip, #9
   15010:	add	ip, r2, #1
   15014:	bls	14fe4 <__assert_fail@plt+0x309c>
   15018:	cmp	lr, #0
   1501c:	subne	r2, r2, #1
   15020:	strne	r2, [r0]
   15024:	bne	1503c <__assert_fail@plt+0x30f4>
   15028:	ldrb	lr, [r7, #4]
   1502c:	cmp	lr, r3
   15030:	beq	15044 <__assert_fail@plt+0x30fc>
   15034:	sub	ip, ip, #1
   15038:	str	ip, [r0]
   1503c:	mov	r0, r1
   15040:	pop	{r4, r5, r6, r7, pc}
   15044:	ldrb	r3, [r2, #1]
   15048:	add	ip, r2, #2
   1504c:	sub	r2, r3, #48	; 0x30
   15050:	cmp	r2, #9
   15054:	bhi	15034 <__assert_fail@plt+0x30ec>
   15058:	cmp	r1, r3
   1505c:	movcc	r1, r3
   15060:	ldrb	r3, [ip], #1
   15064:	sub	r2, r3, #48	; 0x30
   15068:	cmp	r2, #9
   1506c:	bls	15058 <__assert_fail@plt+0x3110>
   15070:	b	15034 <__assert_fail@plt+0x30ec>
   15074:	andeq	r5, r3, r0, ror #5
   15078:	mov	r3, r0
   1507c:	push	{r4, lr}
   15080:	sub	sp, sp, #8
   15084:	ldrb	r4, [r3]
   15088:	add	r0, sp, #8
   1508c:	cmp	r4, #45	; 0x2d
   15090:	addeq	r3, r3, #1
   15094:	str	r3, [r0, #-4]!
   15098:	bl	14fbc <__assert_fail@plt+0x3074>
   1509c:	cmp	r0, #48	; 0x30
   150a0:	movls	r0, #0
   150a4:	bls	150c0 <__assert_fail@plt+0x3178>
   150a8:	ldr	r3, [sp, #4]
   150ac:	ldr	r2, [pc, #20]	; 150c8 <__assert_fail@plt+0x3180>
   150b0:	cmp	r4, #45	; 0x2d
   150b4:	ldrb	r3, [r3]
   150b8:	ldrb	r0, [r2, r3]
   150bc:	rsbeq	r0, r0, #0
   150c0:	add	sp, sp, #8
   150c4:	pop	{r4, pc}
   150c8:	andeq	r2, r2, r0, lsr #7
   150cc:	push	{r4, r5, r6, r7, r8, lr}
   150d0:	ldrb	r3, [r0]
   150d4:	ldr	r4, [pc, #200]	; 151a4 <__assert_fail@plt+0x325c>
   150d8:	add	r3, r4, r3
   150dc:	ldrb	r3, [r3, #8]
   150e0:	cmp	r3, #0
   150e4:	beq	150fc <__assert_fail@plt+0x31b4>
   150e8:	ldrb	r3, [r0, #1]!
   150ec:	add	r3, r4, r3
   150f0:	ldrb	r3, [r3, #8]
   150f4:	cmp	r3, #0
   150f8:	bne	150e8 <__assert_fail@plt+0x31a0>
   150fc:	ldr	r8, [pc, #164]	; 151a8 <__assert_fail@plt+0x3260>
   15100:	mov	r7, #12
   15104:	mov	r6, #0
   15108:	add	r5, r6, r7
   1510c:	lsr	r5, r5, #1
   15110:	ldr	lr, [r8, r5, lsl #3]
   15114:	ldrb	r2, [lr]
   15118:	cmp	r2, #0
   1511c:	beq	1519c <__assert_fail@plt+0x3254>
   15120:	ldrb	r3, [r0]
   15124:	add	r3, r4, r3
   15128:	ldrb	r3, [r3, #264]	; 0x108
   1512c:	cmp	r2, r3
   15130:	bhi	15180 <__assert_fail@plt+0x3238>
   15134:	addcs	r2, r0, #1
   15138:	bcs	15158 <__assert_fail@plt+0x3210>
   1513c:	b	15194 <__assert_fail@plt+0x324c>
   15140:	ldrb	r3, [r3]
   15144:	add	r3, r4, r3
   15148:	ldrb	r3, [r3, #264]	; 0x108
   1514c:	cmp	ip, r3
   15150:	bhi	15180 <__assert_fail@plt+0x3238>
   15154:	bcc	15194 <__assert_fail@plt+0x324c>
   15158:	ldrb	ip, [lr, #1]!
   1515c:	mov	r3, r2
   15160:	add	r2, r2, #1
   15164:	cmp	ip, #0
   15168:	bne	15140 <__assert_fail@plt+0x31f8>
   1516c:	add	r5, r8, r5, lsl #3
   15170:	cmp	r1, #0
   15174:	strne	r3, [r1]
   15178:	ldr	r0, [r5, #4]
   1517c:	pop	{r4, r5, r6, r7, r8, pc}
   15180:	mov	r7, r5
   15184:	cmp	r6, r7
   15188:	bcc	15108 <__assert_fail@plt+0x31c0>
   1518c:	mov	r0, #0
   15190:	pop	{r4, r5, r6, r7, r8, pc}
   15194:	add	r6, r5, #1
   15198:	b	15184 <__assert_fail@plt+0x323c>
   1519c:	mov	r3, r0
   151a0:	b	1516c <__assert_fail@plt+0x3224>
   151a4:	andeq	r5, r3, r0, ror #5
   151a8:	andeq	r5, r3, r4, ror #3
   151ac:	ldr	r3, [r0, #16]
   151b0:	cmp	r3, #0
   151b4:	beq	151c4 <__assert_fail@plt+0x327c>
   151b8:	mov	r3, #0
   151bc:	mov	r0, r3
   151c0:	bx	lr
   151c4:	ldr	r2, [r0, #20]
   151c8:	cmp	r2, #0
   151cc:	bne	151bc <__assert_fail@plt+0x3274>
   151d0:	ldrb	r3, [r0, #24]
   151d4:	cmp	r3, #0
   151d8:	bne	151b8 <__assert_fail@plt+0x3270>
   151dc:	ldrb	r2, [r0, #25]
   151e0:	cmp	r2, #0
   151e4:	bne	151bc <__assert_fail@plt+0x3274>
   151e8:	ldrb	r3, [r0, #26]
   151ec:	cmp	r3, #0
   151f0:	bne	151b8 <__assert_fail@plt+0x3270>
   151f4:	ldrh	r2, [r0, #28]
   151f8:	cmp	r2, #0
   151fc:	bne	151bc <__assert_fail@plt+0x3274>
   15200:	ldrb	r2, [r0, #30]
   15204:	cmp	r2, #0
   15208:	bne	151bc <__assert_fail@plt+0x3274>
   1520c:	ldrb	r2, [r0, #32]
   15210:	cmp	r2, #0
   15214:	ldrbeq	r3, [r0, #27]
   15218:	eoreq	r3, r3, #1
   1521c:	b	151bc <__assert_fail@plt+0x3274>
   15220:	ldrh	r3, [r0, #24]
   15224:	cmp	r3, #0
   15228:	movne	r3, #98	; 0x62
   1522c:	strbne	r3, [r1]
   15230:	ldr	r3, [pc, #216]	; 15310 <__assert_fail@plt+0x33c8>
   15234:	ldr	r2, [r0, #16]
   15238:	addne	r1, r1, #1
   1523c:	cmp	r2, r3
   15240:	moveq	r3, #100	; 0x64
   15244:	strbeq	r3, [r1]
   15248:	ldr	r3, [r0, #20]
   1524c:	addeq	r1, r1, #1
   15250:	cmp	r3, #0
   15254:	movne	r3, #102	; 0x66
   15258:	strbne	r3, [r1]
   1525c:	ldrb	r3, [r0, #28]
   15260:	addne	r1, r1, #1
   15264:	cmp	r3, #0
   15268:	movne	r3, #103	; 0x67
   1526c:	strbne	r3, [r1]
   15270:	ldrb	r3, [r0, #29]
   15274:	addne	r1, r1, #1
   15278:	cmp	r3, #0
   1527c:	movne	r3, #104	; 0x68
   15280:	strbne	r3, [r1]
   15284:	ldr	r3, [pc, #136]	; 15314 <__assert_fail@plt+0x33cc>
   15288:	ldr	r2, [r0, #16]
   1528c:	addne	r1, r1, #1
   15290:	cmp	r2, r3
   15294:	moveq	r3, #105	; 0x69
   15298:	strbeq	r3, [r1]
   1529c:	ldrb	r3, [r0, #30]
   152a0:	addeq	r1, r1, #1
   152a4:	cmp	r3, #0
   152a8:	movne	r3, #77	; 0x4d
   152ac:	strbne	r3, [r1]
   152b0:	ldrb	r3, [r0, #26]
   152b4:	addne	r1, r1, #1
   152b8:	cmp	r3, #0
   152bc:	movne	r3, #110	; 0x6e
   152c0:	strbne	r3, [r1]
   152c4:	ldrb	r3, [r0, #27]
   152c8:	addne	r1, r1, #1
   152cc:	cmp	r3, #0
   152d0:	movne	r3, #82	; 0x52
   152d4:	strbne	r3, [r1]
   152d8:	ldrb	r3, [r0, #31]
   152dc:	addne	r1, r1, #1
   152e0:	cmp	r3, #0
   152e4:	movne	r3, #114	; 0x72
   152e8:	strbne	r3, [r1]
   152ec:	ldrb	r3, [r0, #32]
   152f0:	addne	r1, r1, #1
   152f4:	cmp	r3, #0
   152f8:	movne	r3, #86	; 0x56
   152fc:	strbne	r3, [r1]
   15300:	addne	r1, r1, #1
   15304:	mov	r3, #0
   15308:	strb	r3, [r1]
   1530c:	bx	lr
   15310:	andeq	r5, r3, r8, ror #9
   15314:	andeq	r5, r3, r8, ror #11
   15318:	ldrb	r3, [r0]
   1531c:	cmp	r3, #0
   15320:	bxeq	lr
   15324:	push	{r4, r5, r6, lr}
   15328:	mov	ip, #1
   1532c:	ldr	lr, [pc, #300]	; 15460 <__assert_fail@plt+0x3518>
   15330:	bic	r4, r2, #2
   15334:	sub	r6, lr, #512	; 0x200
   15338:	sub	r5, lr, #256	; 0x100
   1533c:	sub	r2, r2, #1
   15340:	sub	r3, r3, #77	; 0x4d
   15344:	cmp	r3, #37	; 0x25
   15348:	ldrls	pc, [pc, r3, lsl #2]
   1534c:	b	153f8 <__assert_fail@plt+0x34b0>
   15350:	andeq	r5, r1, r8, asr r4
   15354:	strdeq	r5, [r1], -r8
   15358:	strdeq	r5, [r1], -r8
   1535c:	strdeq	r5, [r1], -r8
   15360:	strdeq	r5, [r1], -r8
   15364:	andeq	r5, r1, r0, asr r4
   15368:	strdeq	r5, [r1], -r8
   1536c:	strdeq	r5, [r1], -r8
   15370:	strdeq	r5, [r1], -r8
   15374:	andeq	r5, r1, r8, asr #8
   15378:	strdeq	r5, [r1], -r8
   1537c:	strdeq	r5, [r1], -r8
   15380:	strdeq	r5, [r1], -r8
   15384:	strdeq	r5, [r1], -r8
   15388:	strdeq	r5, [r1], -r8
   1538c:	strdeq	r5, [r1], -r8
   15390:	strdeq	r5, [r1], -r8
   15394:	strdeq	r5, [r1], -r8
   15398:	strdeq	r5, [r1], -r8
   1539c:	strdeq	r5, [r1], -r8
   153a0:	strdeq	r5, [r1], -r8
   153a4:	andeq	r5, r1, r4, lsr r4
   153a8:	strdeq	r5, [r1], -r8
   153ac:	andeq	r5, r1, ip, lsr #8
   153b0:	strdeq	r5, [r1], -r8
   153b4:	andeq	r5, r1, r4, lsr #8
   153b8:	andeq	r5, r1, ip, lsl r4
   153bc:	andeq	r5, r1, r4, lsl r4
   153c0:	andeq	r5, r1, r4, lsl #8
   153c4:	strdeq	r5, [r1], -r8
   153c8:	strdeq	r5, [r1], -r8
   153cc:	strdeq	r5, [r1], -r8
   153d0:	strdeq	r5, [r1], -r8
   153d4:	strdeq	r5, [r1], -ip
   153d8:	strdeq	r5, [r1], -r8
   153dc:	strdeq	r5, [r1], -r8
   153e0:	strdeq	r5, [r1], -r8
   153e4:	andeq	r5, r1, r8, ror #7
   153e8:	strb	ip, [r1, #31]
   153ec:	ldrb	r3, [r0, #1]!
   153f0:	cmp	r3, #0
   153f4:	bne	15340 <__assert_fail@plt+0x33f8>
   153f8:	pop	{r4, r5, r6, pc}
   153fc:	strb	ip, [r1, #26]
   15400:	b	153ec <__assert_fail@plt+0x34a4>
   15404:	ldr	r3, [r1, #16]
   15408:	cmp	r3, #0
   1540c:	streq	lr, [r1, #16]
   15410:	b	153ec <__assert_fail@plt+0x34a4>
   15414:	strb	ip, [r1, #29]
   15418:	b	153ec <__assert_fail@plt+0x34a4>
   1541c:	strb	ip, [r1, #28]
   15420:	b	153ec <__assert_fail@plt+0x34a4>
   15424:	str	r6, [r1, #20]
   15428:	b	153ec <__assert_fail@plt+0x34a4>
   1542c:	str	r5, [r1, #16]
   15430:	b	153ec <__assert_fail@plt+0x34a4>
   15434:	cmp	r4, #0
   15438:	strbeq	ip, [r1, #24]
   1543c:	cmp	r2, #1
   15440:	strbls	ip, [r1, #25]
   15444:	b	153ec <__assert_fail@plt+0x34a4>
   15448:	strb	ip, [r1, #32]
   1544c:	b	153ec <__assert_fail@plt+0x34a4>
   15450:	strb	ip, [r1, #27]
   15454:	b	153ec <__assert_fail@plt+0x34a4>
   15458:	strb	ip, [r1, #30]
   1545c:	b	153ec <__assert_fail@plt+0x34a4>
   15460:	andeq	r5, r3, r8, ror #11
   15464:	ldr	r1, [r1]
   15468:	ldr	r0, [r0]
   1546c:	b	11a2c <strcmp@plt>
   15470:	push	{r4, lr}
   15474:	mov	r2, #5
   15478:	mov	r4, r0
   1547c:	ldr	r1, [pc, #24]	; 1549c <__assert_fail@plt+0x3554>
   15480:	mov	r0, #0
   15484:	bl	11b58 <dcgettext@plt>
   15488:	mov	r3, r4
   1548c:	mov	r1, #0
   15490:	mov	r2, r0
   15494:	mov	r0, #2
   15498:	bl	11c90 <error@plt>
   1549c:	andeq	r2, r2, r0, ror #14
   154a0:	push	{lr}		; (str lr, [sp, #-4]!)
   154a4:	mov	r5, r1
   154a8:	sub	sp, sp, #12
   154ac:	mov	r6, r0
   154b0:	mov	r2, #5
   154b4:	ldr	r1, [pc, #60]	; 154f8 <__assert_fail@plt+0x35b0>
   154b8:	mov	r0, #0
   154bc:	bl	11b58 <dcgettext@plt>
   154c0:	mov	r1, r5
   154c4:	mov	r2, #5
   154c8:	mov	r4, r0
   154cc:	mov	r0, #0
   154d0:	bl	11b58 <dcgettext@plt>
   154d4:	mov	r5, r0
   154d8:	mov	r0, r6
   154dc:	bl	1ea20 <__assert_fail@plt+0xcad8>
   154e0:	mov	r3, r5
   154e4:	mov	r2, r4
   154e8:	mov	r1, #0
   154ec:	str	r0, [sp]
   154f0:	mov	r0, #2
   154f4:	bl	11c90 <error@plt>
   154f8:	andeq	r2, r2, r0, lsl #15
   154fc:	push	{r4, r5, r6, lr}
   15500:	mov	r5, r0
   15504:	ldr	r6, [pc, #60]	; 15548 <__assert_fail@plt+0x3600>
   15508:	ldr	r4, [r6, #1032]	; 0x408
   1550c:	cmp	r4, #0
   15510:	beq	15528 <__assert_fail@plt+0x35e0>
   15514:	add	r0, r4, #9
   15518:	bl	11b7c <unlink@plt>
   1551c:	ldr	r4, [r4]
   15520:	cmp	r4, #0
   15524:	bne	15514 <__assert_fail@plt+0x35cc>
   15528:	mov	r3, #0
   1552c:	mov	r0, r5
   15530:	mov	r1, r3
   15534:	str	r3, [r6, #1032]	; 0x408
   15538:	bl	11b04 <signal@plt>
   1553c:	mov	r0, r5
   15540:	pop	{r4, r5, r6, lr}
   15544:	b	11a20 <raise@plt>
   15548:	andeq	r5, r3, r0, ror #5
   1554c:	push	{lr}		; (str lr, [sp, #-4]!)
   15550:	sub	sp, sp, #12
   15554:	mov	r4, r1
   15558:	mov	r6, r0
   1555c:	bl	11d74 <__errno_location@plt>
   15560:	cmp	r4, #0
   15564:	ldr	r5, [r0]
   15568:	beq	15594 <__assert_fail@plt+0x364c>
   1556c:	mov	r2, r4
   15570:	mov	r1, #3
   15574:	mov	r0, #0
   15578:	bl	1e89c <__assert_fail@plt+0xc954>
   1557c:	mov	r3, r6
   15580:	mov	r1, r5
   15584:	ldr	r2, [pc, #32]	; 155ac <__assert_fail@plt+0x3664>
   15588:	str	r0, [sp]
   1558c:	mov	r0, #2
   15590:	bl	11c90 <error@plt>
   15594:	mov	r0, r4
   15598:	mov	r2, #5
   1559c:	ldr	r1, [pc, #12]	; 155b0 <__assert_fail@plt+0x3668>
   155a0:	bl	11b58 <dcgettext@plt>
   155a4:	mov	r4, r0
   155a8:	b	1556c <__assert_fail@plt+0x3624>
   155ac:			; <UNDEFINED> instruction: 0x000227b4
   155b0:	andeq	r2, r2, r4, lsr #15
   155b4:	push	{r4, lr}
   155b8:	ldr	r4, [pc, #68]	; 15604 <__assert_fail@plt+0x36bc>
   155bc:	ldr	r3, [r4, #1144]	; 0x478
   155c0:	cmp	r3, #0
   155c4:	beq	155d8 <__assert_fail@plt+0x3690>
   155c8:	cmp	r3, #0
   155cc:	ldr	r0, [pc, #52]	; 15608 <__assert_fail@plt+0x36c0>
   155d0:	movge	r0, #0
   155d4:	pop	{r4, pc}
   155d8:	add	r2, r4, #1040	; 0x410
   155dc:	mov	r1, #1
   155e0:	mov	r0, #3
   155e4:	bl	11bf4 <__fxstat64@plt>
   155e8:	cmp	r0, #0
   155ec:	mvneq	r3, #0
   155f0:	beq	155fc <__assert_fail@plt+0x36b4>
   155f4:	bl	11d74 <__errno_location@plt>
   155f8:	ldr	r3, [r0]
   155fc:	str	r3, [r4, #1144]	; 0x478
   15600:	b	155c8 <__assert_fail@plt+0x3680>
   15604:	andeq	r5, r3, r0, ror #5
   15608:	strdeq	r5, [r3], -r0
   1560c:	push	{r4, r5, r6, lr}
   15610:	mov	r5, r0
   15614:	ldrb	r3, [r1]
   15618:	cmp	r3, #114	; 0x72
   1561c:	beq	156b4 <__assert_fail@plt+0x376c>
   15620:	cmp	r3, #119	; 0x77
   15624:	bne	15718 <__assert_fail@plt+0x37d0>
   15628:	cmp	r0, #0
   1562c:	beq	15648 <__assert_fail@plt+0x3700>
   15630:	mov	r2, #0
   15634:	mov	r3, #0
   15638:	mov	r0, #1
   1563c:	bl	11b28 <ftruncate64@plt>
   15640:	cmp	r0, #0
   15644:	bne	15658 <__assert_fail@plt+0x3710>
   15648:	ldr	r3, [pc, #220]	; 1572c <__assert_fail@plt+0x37e4>
   1564c:	ldr	r4, [r3]
   15650:	mov	r0, r4
   15654:	pop	{r4, r5, r6, pc}
   15658:	bl	11d74 <__errno_location@plt>
   1565c:	ldr	r4, [r0]
   15660:	bl	155b4 <__assert_fail@plt+0x366c>
   15664:	cmp	r0, #0
   15668:	beq	1567c <__assert_fail@plt+0x3734>
   1566c:	ldr	r3, [r0, #16]
   15670:	and	r3, r3, #61440	; 0xf000
   15674:	cmp	r3, #32768	; 0x8000
   15678:	bne	15648 <__assert_fail@plt+0x3700>
   1567c:	mov	r2, #5
   15680:	ldr	r1, [pc, #168]	; 15730 <__assert_fail@plt+0x37e8>
   15684:	mov	r0, #0
   15688:	bl	11b58 <dcgettext@plt>
   1568c:	mov	r2, r5
   15690:	mov	r1, #3
   15694:	mov	r6, r0
   15698:	mov	r0, #0
   1569c:	bl	1e89c <__assert_fail@plt+0xc954>
   156a0:	mov	r2, r6
   156a4:	mov	r1, r4
   156a8:	mov	r3, r0
   156ac:	mov	r0, #2
   156b0:	bl	11c90 <error@plt>
   156b4:	mov	r4, r1
   156b8:	ldr	r1, [pc, #116]	; 15734 <__assert_fail@plt+0x37ec>
   156bc:	bl	11a2c <strcmp@plt>
   156c0:	cmp	r0, #0
   156c4:	bne	156f0 <__assert_fail@plt+0x37a8>
   156c8:	ldr	r3, [pc, #104]	; 15738 <__assert_fail@plt+0x37f0>
   156cc:	ldr	r2, [pc, #104]	; 1573c <__assert_fail@plt+0x37f4>
   156d0:	mov	r1, #1
   156d4:	ldr	r4, [r3]
   156d8:	strb	r1, [r2, #1148]	; 0x47c
   156dc:	mov	r0, r4
   156e0:	mov	r1, #2
   156e4:	bl	1a9b0 <__assert_fail@plt+0x8a68>
   156e8:	mov	r0, r4
   156ec:	pop	{r4, r5, r6, pc}
   156f0:	mov	r0, r5
   156f4:	mov	r1, #524288	; 0x80000
   156f8:	bl	11c9c <open64@plt>
   156fc:	cmp	r0, #0
   15700:	movlt	r4, #0
   15704:	blt	156dc <__assert_fail@plt+0x3794>
   15708:	mov	r1, r4
   1570c:	bl	119fc <fdopen@plt>
   15710:	mov	r4, r0
   15714:	b	156dc <__assert_fail@plt+0x3794>
   15718:	ldr	r3, [pc, #32]	; 15740 <__assert_fail@plt+0x37f8>
   1571c:	ldr	r2, [pc, #32]	; 15744 <__assert_fail@plt+0x37fc>
   15720:	ldr	r1, [pc, #32]	; 15748 <__assert_fail@plt+0x3800>
   15724:	ldr	r0, [pc, #32]	; 1574c <__assert_fail@plt+0x3804>
   15728:	bl	11f48 <__assert_fail@plt>
   1572c:	ldrdeq	r5, [r3], -r4
   15730:	andeq	r2, r2, r0, asr #15
   15734:			; <UNDEFINED> instruction: 0x000227bc
   15738:	ldrdeq	r5, [r3], -r0
   1573c:	andeq	r5, r3, r0, ror #5
   15740:	andeq	r2, r2, r0, lsr #9
   15744:	ldrdeq	r0, [r0], -r5
   15748:	ldrdeq	r2, [r2], -r8
   1574c:	andeq	r2, r2, r4, ror #15
   15750:	push	{r4, r5, r6, lr}
   15754:	mov	r5, r0
   15758:	ldr	r4, [pc, #64]	; 157a0 <__assert_fail@plt+0x3858>
   1575c:	ldr	r3, [r4, #1152]	; 0x480
   15760:	ldr	r2, [r4, #1156]	; 0x484
   15764:	cmp	r3, r2
   15768:	beq	15780 <__assert_fail@plt+0x3838>
   1576c:	ldr	r1, [r4, #1160]	; 0x488
   15770:	add	r2, r3, #1
   15774:	str	r5, [r1, r3, lsl #2]
   15778:	str	r2, [r4, #1152]	; 0x480
   1577c:	pop	{r4, r5, r6, pc}
   15780:	ldr	r1, [pc, #28]	; 157a4 <__assert_fail@plt+0x385c>
   15784:	mov	r2, #4
   15788:	ldr	r0, [r4, #1160]	; 0x488
   1578c:	bl	20150 <__assert_fail@plt+0xe208>
   15790:	ldr	r3, [r4, #1152]	; 0x480
   15794:	mov	r1, r0
   15798:	str	r0, [r4, #1160]	; 0x488
   1579c:	b	15770 <__assert_fail@plt+0x3828>
   157a0:	andeq	r5, r3, r0, ror #5
   157a4:	andeq	r5, r3, r4, ror #14
   157a8:	push	{r4, r5, r6, r7, r8, lr}
   157ac:	mov	r7, r1
   157b0:	mov	r5, r0
   157b4:	mov	r4, r2
   157b8:	add	r6, r1, #1
   157bc:	b	157cc <__assert_fail@plt+0x3884>
   157c0:	lsr	r4, r4, #1
   157c4:	cmp	r4, r6
   157c8:	bls	15808 <__assert_fail@plt+0x38c0>
   157cc:	bic	r4, r4, #15
   157d0:	add	r4, r4, #16
   157d4:	mov	r0, r4
   157d8:	bl	20f18 <__assert_fail@plt+0xefd0>
   157dc:	cmp	r0, #0
   157e0:	str	r0, [r5]
   157e4:	beq	157c0 <__assert_fail@plt+0x3878>
   157e8:	mov	r3, #0
   157ec:	str	r7, [r5, #20]
   157f0:	str	r4, [r5, #12]
   157f4:	str	r3, [r5, #8]
   157f8:	str	r3, [r5, #16]
   157fc:	str	r3, [r5, #4]
   15800:	strb	r3, [r5, #24]
   15804:	pop	{r4, r5, r6, r7, r8, pc}
   15808:	bl	20590 <__assert_fail@plt+0xe648>
   1580c:	push	{r4, r5, r6, lr}
   15810:	mov	r2, #0
   15814:	mov	r5, r1
   15818:	mov	r4, r0
   1581c:	sub	r1, r1, r0
   15820:	bl	1c41c <__assert_fail@plt+0xa4d4>
   15824:	cmp	r5, r4
   15828:	popls	{r4, r5, r6, pc}
   1582c:	ldrb	r3, [r4], #1
   15830:	cmp	r3, #9
   15834:	addeq	r0, r0, #1
   15838:	cmp	r5, r4
   1583c:	bne	1582c <__assert_fail@plt+0x38e4>
   15840:	pop	{r4, r5, r6, pc}
   15844:	push	{r4, r5, r6, r7, r8, lr}
   15848:	mov	r7, r0
   1584c:	mov	r6, r1
   15850:	mov	r8, r2
   15854:	bl	11d74 <__errno_location@plt>
   15858:	mov	r5, #0
   1585c:	mov	r2, r8
   15860:	mov	r1, r6
   15864:	mov	r4, r0
   15868:	mov	r0, r7
   1586c:	str	r5, [r4]
   15870:	bl	11d68 <strxfrm@plt>
   15874:	ldr	r4, [r4]
   15878:	cmp	r4, r5
   1587c:	popeq	{r4, r5, r6, r7, r8, pc}
   15880:	mov	r2, #5
   15884:	ldr	r1, [pc, #108]	; 158f8 <__assert_fail@plt+0x39b0>
   15888:	mov	r0, r5
   1588c:	bl	11b58 <dcgettext@plt>
   15890:	mov	r1, r4
   15894:	mov	r2, r0
   15898:	mov	r0, r5
   1589c:	bl	11c90 <error@plt>
   158a0:	mov	r2, #5
   158a4:	ldr	r1, [pc, #80]	; 158fc <__assert_fail@plt+0x39b4>
   158a8:	mov	r0, r5
   158ac:	bl	11b58 <dcgettext@plt>
   158b0:	mov	r1, r5
   158b4:	mov	r2, r0
   158b8:	mov	r0, r5
   158bc:	bl	11c90 <error@plt>
   158c0:	mov	r2, #5
   158c4:	ldr	r1, [pc, #52]	; 15900 <__assert_fail@plt+0x39b8>
   158c8:	mov	r0, r5
   158cc:	bl	11b58 <dcgettext@plt>
   158d0:	mov	r2, r6
   158d4:	mov	r1, #8
   158d8:	mov	r4, r0
   158dc:	mov	r0, r5
   158e0:	bl	1e774 <__assert_fail@plt+0xc82c>
   158e4:	mov	r2, r4
   158e8:	mov	r1, r5
   158ec:	mov	r3, r0
   158f0:	mov	r0, #2
   158f4:	bl	11c90 <error@plt>
   158f8:	andeq	r2, r2, r0, lsl r8
   158fc:	andeq	r2, r2, r0, lsr r8
   15900:	andeq	r2, r2, ip, asr r8
   15904:	push	{r4, r5, lr}
   15908:	subs	r4, r0, #0
   1590c:	sub	sp, sp, #20
   15910:	moveq	r2, #1
   15914:	movne	r2, #0
   15918:	movne	r0, r4
   1591c:	mvneq	r0, #0
   15920:	mov	r1, sp
   15924:	bl	11c3c <waitpid@plt>
   15928:	subs	r5, r0, #0
   1592c:	blt	159c8 <__assert_fail@plt+0x3a80>
   15930:	beq	15964 <__assert_fail@plt+0x3a1c>
   15934:	cmp	r4, #0
   15938:	ldr	r4, [pc, #200]	; 15a08 <__assert_fail@plt+0x3ac0>
   1593c:	ble	15970 <__assert_fail@plt+0x3a28>
   15940:	ldr	r3, [sp]
   15944:	tst	r3, #127	; 0x7f
   15948:	bne	15994 <__assert_fail@plt+0x3a4c>
   1594c:	asr	r3, r3, #8
   15950:	tst	r3, #255	; 0xff
   15954:	bne	15994 <__assert_fail@plt+0x3a4c>
   15958:	ldr	r3, [r4, #1172]	; 0x494
   1595c:	sub	r3, r3, #1
   15960:	str	r3, [r4, #1172]	; 0x494
   15964:	mov	r0, r5
   15968:	add	sp, sp, #20
   1596c:	pop	{r4, r5, pc}
   15970:	add	r1, sp, #4
   15974:	ldr	r0, [r4, #1168]	; 0x490
   15978:	str	r5, [sp, #8]
   1597c:	bl	1bfec <__assert_fail@plt+0xa0a4>
   15980:	cmp	r0, #0
   15984:	beq	15964 <__assert_fail@plt+0x3a1c>
   15988:	mov	r3, #2
   1598c:	strb	r3, [r0, #8]
   15990:	b	15940 <__assert_fail@plt+0x39f8>
   15994:	mov	r2, #5
   15998:	ldr	r1, [pc, #108]	; 15a0c <__assert_fail@plt+0x3ac4>
   1599c:	mov	r0, #0
   159a0:	bl	11b58 <dcgettext@plt>
   159a4:	ldr	r1, [r4, #1164]	; 0x48c
   159a8:	mov	r5, r0
   159ac:	mov	r0, #4
   159b0:	bl	1e7e0 <__assert_fail@plt+0xc898>
   159b4:	mov	r2, r5
   159b8:	mov	r1, #0
   159bc:	mov	r3, r0
   159c0:	mov	r0, #2
   159c4:	bl	11c90 <error@plt>
   159c8:	bl	11d74 <__errno_location@plt>
   159cc:	mov	r2, #5
   159d0:	ldr	r1, [pc, #56]	; 15a10 <__assert_fail@plt+0x3ac8>
   159d4:	ldr	r4, [r0]
   159d8:	mov	r0, #0
   159dc:	bl	11b58 <dcgettext@plt>
   159e0:	ldr	r3, [pc, #32]	; 15a08 <__assert_fail@plt+0x3ac0>
   159e4:	ldr	r1, [r3, #1164]	; 0x48c
   159e8:	mov	r5, r0
   159ec:	mov	r0, #4
   159f0:	bl	1e7e0 <__assert_fail@plt+0xc898>
   159f4:	mov	r2, r5
   159f8:	mov	r1, r4
   159fc:	mov	r3, r0
   15a00:	mov	r0, #2
   15a04:	bl	11c90 <error@plt>
   15a08:	andeq	r5, r3, r0, ror #5
   15a0c:	muleq	r2, r0, r8
   15a10:	andeq	r2, r2, ip, ror r8
   15a14:	ldr	r3, [pc, #56]	; 15a54 <__assert_fail@plt+0x3b0c>
   15a18:	push	{r4, lr}
   15a1c:	sub	sp, sp, #16
   15a20:	mov	r4, r0
   15a24:	add	r1, sp, #4
   15a28:	ldr	r0, [r3, #1168]	; 0x490
   15a2c:	str	r4, [sp, #8]
   15a30:	bl	1bfec <__assert_fail@plt+0xa0a4>
   15a34:	subs	r3, r0, #0
   15a38:	beq	15a4c <__assert_fail@plt+0x3b04>
   15a3c:	mov	r2, #2
   15a40:	mov	r0, r4
   15a44:	strb	r2, [r3, #8]
   15a48:	bl	15904 <__assert_fail@plt+0x39bc>
   15a4c:	add	sp, sp, #16
   15a50:	pop	{r4, pc}
   15a54:	andeq	r5, r3, r0, ror #5
   15a58:	push	{lr}		; (str lr, [sp, #-4]!)
   15a5c:	mov	r5, r0
   15a60:	sub	sp, sp, #20
   15a64:	mov	r0, r1
   15a68:	mov	r4, r1
   15a6c:	bl	11d50 <strlen@plt>
   15a70:	mov	r1, r4
   15a74:	mov	r2, r0
   15a78:	mov	r0, #2
   15a7c:	bl	11dbc <write@plt>
   15a80:	cmp	r5, #0
   15a84:	bne	15aa0 <__assert_fail@plt+0x3b58>
   15a88:	mov	r2, #1
   15a8c:	ldr	r1, [pc, #72]	; 15adc <__assert_fail@plt+0x3b94>
   15a90:	mov	r0, #2
   15a94:	bl	11dbc <write@plt>
   15a98:	mov	r0, #2
   15a9c:	bl	11abc <_exit@plt>
   15aa0:	add	r1, sp, #4
   15aa4:	mov	r0, r5
   15aa8:	bl	1c2ec <__assert_fail@plt+0xa3a4>
   15aac:	mov	r2, #8
   15ab0:	ldr	r1, [pc, #40]	; 15ae0 <__assert_fail@plt+0x3b98>
   15ab4:	mov	r4, r0
   15ab8:	mov	r0, #2
   15abc:	bl	11dbc <write@plt>
   15ac0:	mov	r0, r4
   15ac4:	bl	11d50 <strlen@plt>
   15ac8:	mov	r1, r4
   15acc:	mov	r2, r0
   15ad0:	mov	r0, #2
   15ad4:	bl	11dbc <write@plt>
   15ad8:	b	15a88 <__assert_fail@plt+0x3b40>
   15adc:	andeq	r2, r2, r4, lsl #31
   15ae0:			; <UNDEFINED> instruction: 0x000228b0
   15ae4:	push	{r4, r5, lr}
   15ae8:	mov	r4, r0
   15aec:	ldr	r5, [pc, #84]	; 15b48 <__assert_fail@plt+0x3c00>
   15af0:	sub	sp, sp, #12
   15af4:	ldr	r0, [r5, #1168]	; 0x490
   15af8:	cmp	r0, #0
   15afc:	beq	15b20 <__assert_fail@plt+0x3bd8>
   15b00:	mov	r3, #1
   15b04:	strb	r3, [r4, #8]
   15b08:	mov	r1, r4
   15b0c:	bl	1bfb4 <__assert_fail@plt+0xa06c>
   15b10:	cmp	r0, #0
   15b14:	beq	15b44 <__assert_fail@plt+0x3bfc>
   15b18:	add	sp, sp, #12
   15b1c:	pop	{r4, r5, pc}
   15b20:	str	r0, [sp]
   15b24:	mov	r1, r0
   15b28:	ldr	r3, [pc, #28]	; 15b4c <__assert_fail@plt+0x3c04>
   15b2c:	ldr	r2, [pc, #28]	; 15b50 <__assert_fail@plt+0x3c08>
   15b30:	mov	r0, #47	; 0x2f
   15b34:	bl	1b9c0 <__assert_fail@plt+0x9a78>
   15b38:	cmp	r0, #0
   15b3c:	str	r0, [r5, #1168]	; 0x490
   15b40:	bne	15b00 <__assert_fail@plt+0x3bb8>
   15b44:	bl	20590 <__assert_fail@plt+0xe648>
   15b48:	andeq	r5, r3, r0, ror #5
   15b4c:	andeq	r4, r1, r4, lsr #31
   15b50:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   15b54:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15b58:	sub	sp, sp, #12
   15b5c:	mov	ip, r0
   15b60:	ldr	r9, [sp, #48]	; 0x30
   15b64:	ldrb	lr, [sp, #52]	; 0x34
   15b68:	mov	r4, r1
   15b6c:	lsl	r8, r9, #4
   15b70:	cmp	lr, #0
   15b74:	mov	r5, r2
   15b78:	mov	r6, r3
   15b7c:	rsb	r8, r8, #0
   15b80:	mov	r7, #0
   15b84:	mov	sl, #1
   15b88:	beq	15c18 <__assert_fail@plt+0x3cd0>
   15b8c:	ldr	r3, [r0, #20]
   15b90:	add	fp, r2, r8
   15b94:	add	r1, r0, #8
   15b98:	lsr	r2, r3, sl
   15b9c:	sub	r3, r3, r2
   15ba0:	sub	r5, fp, r2, lsl #4
   15ba4:	ldr	r0, [ip, #40]	; 0x28
   15ba8:	str	r1, [r4, #16]
   15bac:	add	r0, r0, #1
   15bb0:	str	r0, [r4, #40]	; 0x28
   15bb4:	mov	r1, #0
   15bb8:	str	fp, [r4, #8]
   15bbc:	str	fp, [r4]
   15bc0:	str	r5, [r4, #12]
   15bc4:	str	r5, [r4, #4]
   15bc8:	str	r2, [r4, #20]
   15bcc:	str	r3, [r4, #24]
   15bd0:	str	ip, [r4, #28]
   15bd4:	strb	r7, [r4, #44]	; 0x2c
   15bd8:	add	r0, r4, #48	; 0x30
   15bdc:	bl	11ae0 <pthread_mutex_init@plt>
   15be0:	cmp	r6, #1
   15be4:	add	r1, r4, #72	; 0x48
   15be8:	bls	15c34 <__assert_fail@plt+0x3cec>
   15bec:	lsr	ip, r6, #1
   15bf0:	str	r1, [r4, #32]
   15bf4:	mov	r3, ip
   15bf8:	mov	r0, r4
   15bfc:	mov	r2, fp
   15c00:	stm	sp, {r9, sl}
   15c04:	sub	r6, r6, ip
   15c08:	bl	15b54 <__assert_fail@plt+0x3c0c>
   15c0c:	mov	ip, r4
   15c10:	str	r0, [r4, #36]	; 0x24
   15c14:	mov	r4, r0
   15c18:	ldr	r3, [ip, #24]
   15c1c:	add	fp, r5, r8
   15c20:	add	r1, ip, #12
   15c24:	lsr	r2, r3, #1
   15c28:	sub	r3, r3, r2
   15c2c:	sub	r5, fp, r2, lsl #4
   15c30:	b	15ba4 <__assert_fail@plt+0x3c5c>
   15c34:	mov	r0, r1
   15c38:	str	r7, [r4, #32]
   15c3c:	str	r7, [r4, #36]	; 0x24
   15c40:	add	sp, sp, #12
   15c44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15c48:	push	{r4, r5, r6, lr}
   15c4c:	mov	r4, r0
   15c50:	add	r5, r0, #4
   15c54:	mov	r6, r1
   15c58:	mov	r0, r5
   15c5c:	bl	11a98 <pthread_mutex_lock@plt>
   15c60:	ldr	r0, [r4], #32
   15c64:	mov	r1, r6
   15c68:	bl	1c174 <__assert_fail@plt+0xa22c>
   15c6c:	mov	r3, #1
   15c70:	mov	r0, r4
   15c74:	strb	r3, [r6, #44]	; 0x2c
   15c78:	bl	11f18 <pthread_cond_signal@plt>
   15c7c:	mov	r0, r5
   15c80:	pop	{r4, r5, r6, lr}
   15c84:	b	119f0 <pthread_mutex_unlock@plt>
   15c88:	ldr	r3, [pc, #368]	; 15e00 <__assert_fail@plt+0x3eb8>
   15c8c:	push	{r4, r5, lr}
   15c90:	sub	r1, r1, #1
   15c94:	ldr	lr, [r3, #96]	; 0x60
   15c98:	add	r1, r0, r1
   15c9c:	cmp	lr, #256	; 0x100
   15ca0:	ldr	r5, [r2]
   15ca4:	ldr	r4, [r2, #4]
   15ca8:	beq	15d68 <__assert_fail@plt+0x3e20>
   15cac:	cmp	r1, r0
   15cb0:	bls	15d50 <__assert_fail@plt+0x3e08>
   15cb4:	cmp	r5, #0
   15cb8:	sub	r5, r5, #1
   15cbc:	beq	15d00 <__assert_fail@plt+0x3db8>
   15cc0:	ldrb	r3, [r0]
   15cc4:	cmp	lr, r3
   15cc8:	addne	r3, r0, #1
   15ccc:	bne	15ce4 <__assert_fail@plt+0x3d9c>
   15cd0:	b	15d60 <__assert_fail@plt+0x3e18>
   15cd4:	ldrb	ip, [r3]
   15cd8:	add	r3, r3, #1
   15cdc:	cmp	lr, ip
   15ce0:	beq	15d60 <__assert_fail@plt+0x3e18>
   15ce4:	cmp	r1, r3
   15ce8:	mov	r0, r3
   15cec:	bne	15cd4 <__assert_fail@plt+0x3d8c>
   15cf0:	cmp	r1, r0
   15cf4:	bls	15d50 <__assert_fail@plt+0x3e08>
   15cf8:	subs	r5, r5, #1
   15cfc:	bcs	15cc0 <__assert_fail@plt+0x3d78>
   15d00:	ldrb	r3, [r2, #24]
   15d04:	cmp	r3, #0
   15d08:	beq	15d50 <__assert_fail@plt+0x3e08>
   15d0c:	ldrb	r3, [r0]
   15d10:	ldr	lr, [pc, #236]	; 15e04 <__assert_fail@plt+0x3ebc>
   15d14:	add	r3, lr, r3
   15d18:	ldrb	r3, [r3, #8]
   15d1c:	cmp	r3, #0
   15d20:	beq	15d50 <__assert_fail@plt+0x3e08>
   15d24:	add	r3, r0, #1
   15d28:	b	15d44 <__assert_fail@plt+0x3dfc>
   15d2c:	ldrb	r2, [r3]
   15d30:	add	r3, r3, #1
   15d34:	add	r2, lr, r2
   15d38:	ldrb	r2, [r2, #8]
   15d3c:	cmp	r2, #0
   15d40:	beq	15d50 <__assert_fail@plt+0x3e08>
   15d44:	cmp	r1, r3
   15d48:	mov	r0, r3
   15d4c:	bhi	15d2c <__assert_fail@plt+0x3de4>
   15d50:	add	r0, r0, r4
   15d54:	cmp	r1, r0
   15d58:	movcc	r0, r1
   15d5c:	pop	{r4, r5, pc}
   15d60:	add	r0, r0, #1
   15d64:	b	15cf0 <__assert_fail@plt+0x3da8>
   15d68:	cmp	r1, r0
   15d6c:	bls	15d50 <__assert_fail@plt+0x3e08>
   15d70:	cmp	r5, #0
   15d74:	sub	r5, r5, #1
   15d78:	ldrne	lr, [pc, #132]	; 15e04 <__assert_fail@plt+0x3ebc>
   15d7c:	beq	15d00 <__assert_fail@plt+0x3db8>
   15d80:	ldrb	r3, [r0]
   15d84:	add	r3, lr, r3
   15d88:	ldrb	r3, [r3, #8]
   15d8c:	cmp	r3, #0
   15d90:	addne	r3, r0, #1
   15d94:	bne	15db4 <__assert_fail@plt+0x3e6c>
   15d98:	b	15dc4 <__assert_fail@plt+0x3e7c>
   15d9c:	ldrb	ip, [r3]
   15da0:	add	r3, r3, #1
   15da4:	add	ip, lr, ip
   15da8:	ldrb	ip, [ip, #8]
   15dac:	cmp	ip, #0
   15db0:	beq	15dc4 <__assert_fail@plt+0x3e7c>
   15db4:	cmp	r3, r1
   15db8:	mov	r0, r3
   15dbc:	bne	15d9c <__assert_fail@plt+0x3e54>
   15dc0:	b	15d50 <__assert_fail@plt+0x3e08>
   15dc4:	add	ip, r0, #1
   15dc8:	b	15de4 <__assert_fail@plt+0x3e9c>
   15dcc:	ldrb	r3, [ip]
   15dd0:	add	ip, ip, #1
   15dd4:	add	r3, lr, r3
   15dd8:	ldrb	r3, [r3, #8]
   15ddc:	cmp	r3, #0
   15de0:	bne	15df4 <__assert_fail@plt+0x3eac>
   15de4:	cmp	r1, ip
   15de8:	mov	r0, ip
   15dec:	bhi	15dcc <__assert_fail@plt+0x3e84>
   15df0:	b	15d50 <__assert_fail@plt+0x3e08>
   15df4:	subs	r5, r5, #1
   15df8:	bcs	15d80 <__assert_fail@plt+0x3e38>
   15dfc:	b	15d00 <__assert_fail@plt+0x3db8>
   15e00:	andeq	r5, r3, r4, ror #3
   15e04:	andeq	r5, r3, r0, ror #5
   15e08:	ldr	r3, [pc, #404]	; 15fa4 <__assert_fail@plt+0x405c>
   15e0c:	push	{r4, r5, lr}
   15e10:	sub	r1, r1, #1
   15e14:	ldr	r4, [r2, #12]
   15e18:	ldr	r5, [r2, #8]
   15e1c:	ldr	lr, [r3, #96]	; 0x60
   15e20:	cmp	r4, #0
   15e24:	addeq	r5, r5, #1
   15e28:	cmp	lr, #256	; 0x100
   15e2c:	add	r1, r0, r1
   15e30:	beq	15f0c <__assert_fail@plt+0x3fc4>
   15e34:	cmp	r1, r0
   15e38:	bls	15e88 <__assert_fail@plt+0x3f40>
   15e3c:	cmp	r5, #0
   15e40:	sub	r5, r5, #1
   15e44:	beq	15e88 <__assert_fail@plt+0x3f40>
   15e48:	ldrb	r3, [r0]
   15e4c:	cmp	lr, r3
   15e50:	addne	r3, r0, #1
   15e54:	bne	15e6c <__assert_fail@plt+0x3f24>
   15e58:	b	15ef8 <__assert_fail@plt+0x3fb0>
   15e5c:	ldrb	ip, [r3]
   15e60:	add	r3, r3, #1
   15e64:	cmp	lr, ip
   15e68:	beq	15ef8 <__assert_fail@plt+0x3fb0>
   15e6c:	cmp	r1, r3
   15e70:	mov	r0, r3
   15e74:	bne	15e5c <__assert_fail@plt+0x3f14>
   15e78:	cmp	r1, r0
   15e7c:	bls	15e88 <__assert_fail@plt+0x3f40>
   15e80:	subs	r5, r5, #1
   15e84:	bcs	15e48 <__assert_fail@plt+0x3f00>
   15e88:	cmp	r4, #0
   15e8c:	popeq	{r4, r5, pc}
   15e90:	ldrb	r3, [r2, #25]
   15e94:	cmp	r3, #0
   15e98:	beq	15ee8 <__assert_fail@plt+0x3fa0>
   15e9c:	cmp	r1, r0
   15ea0:	bls	15ee8 <__assert_fail@plt+0x3fa0>
   15ea4:	ldrb	r3, [r0]
   15ea8:	ldr	lr, [pc, #248]	; 15fa8 <__assert_fail@plt+0x4060>
   15eac:	add	r3, lr, r3
   15eb0:	ldrb	r3, [r3, #8]
   15eb4:	cmp	r3, #0
   15eb8:	beq	15ee8 <__assert_fail@plt+0x3fa0>
   15ebc:	add	r3, r0, #1
   15ec0:	b	15edc <__assert_fail@plt+0x3f94>
   15ec4:	ldrb	r2, [r3]
   15ec8:	add	r3, r3, #1
   15ecc:	add	r2, lr, r2
   15ed0:	ldrb	r2, [r2, #8]
   15ed4:	cmp	r2, #0
   15ed8:	beq	15ee8 <__assert_fail@plt+0x3fa0>
   15edc:	cmp	r1, r3
   15ee0:	mov	r0, r3
   15ee4:	bne	15ec4 <__assert_fail@plt+0x3f7c>
   15ee8:	add	r0, r0, r4
   15eec:	cmp	r1, r0
   15ef0:	movcc	r0, r1
   15ef4:	pop	{r4, r5, pc}
   15ef8:	orrs	r3, r4, r5
   15efc:	bne	15f04 <__assert_fail@plt+0x3fbc>
   15f00:	pop	{r4, r5, pc}
   15f04:	add	r0, r0, #1
   15f08:	b	15e78 <__assert_fail@plt+0x3f30>
   15f0c:	cmp	r1, r0
   15f10:	bls	15e88 <__assert_fail@plt+0x3f40>
   15f14:	cmp	r5, #0
   15f18:	sub	r5, r5, #1
   15f1c:	ldrne	lr, [pc, #132]	; 15fa8 <__assert_fail@plt+0x4060>
   15f20:	beq	15e88 <__assert_fail@plt+0x3f40>
   15f24:	ldrb	r3, [r0]
   15f28:	add	r3, lr, r3
   15f2c:	ldrb	r3, [r3, #8]
   15f30:	cmp	r3, #0
   15f34:	addne	r3, r0, #1
   15f38:	bne	15f58 <__assert_fail@plt+0x4010>
   15f3c:	b	15f68 <__assert_fail@plt+0x4020>
   15f40:	ldrb	ip, [r3]
   15f44:	add	r3, r3, #1
   15f48:	add	ip, lr, ip
   15f4c:	ldrb	ip, [ip, #8]
   15f50:	cmp	ip, #0
   15f54:	beq	15f68 <__assert_fail@plt+0x4020>
   15f58:	cmp	r3, r1
   15f5c:	mov	r0, r3
   15f60:	bne	15f40 <__assert_fail@plt+0x3ff8>
   15f64:	b	15e88 <__assert_fail@plt+0x3f40>
   15f68:	add	ip, r0, #1
   15f6c:	b	15f88 <__assert_fail@plt+0x4040>
   15f70:	ldrb	r3, [ip]
   15f74:	add	ip, ip, #1
   15f78:	add	r3, lr, r3
   15f7c:	ldrb	r3, [r3, #8]
   15f80:	cmp	r3, #0
   15f84:	bne	15f98 <__assert_fail@plt+0x4050>
   15f88:	cmp	r1, ip
   15f8c:	mov	r0, ip
   15f90:	bhi	15f70 <__assert_fail@plt+0x4028>
   15f94:	b	15e88 <__assert_fail@plt+0x3f40>
   15f98:	subs	r5, r5, #1
   15f9c:	bcs	15f24 <__assert_fail@plt+0x3fdc>
   15fa0:	b	15e88 <__assert_fail@plt+0x3f40>
   15fa4:	andeq	r5, r3, r4, ror #3
   15fa8:	andeq	r5, r3, r0, ror #5
   15fac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15fb0:	sub	sp, sp, #44	; 0x2c
   15fb4:	ldrb	r5, [r0, #24]
   15fb8:	cmp	r5, #0
   15fbc:	bne	161e0 <__assert_fail@plt+0x4298>
   15fc0:	ldr	r3, [r0, #4]
   15fc4:	str	r2, [sp, #28]
   15fc8:	str	r1, [sp, #24]
   15fcc:	ldr	r2, [r0, #16]
   15fd0:	mov	r1, r0
   15fd4:	str	r0, [sp, #16]
   15fd8:	ldr	r0, [pc, #720]	; 162b0 <__assert_fail@plt+0x4368>
   15fdc:	cmp	r3, r2
   15fe0:	ldr	r6, [r0, #1176]	; 0x498
   15fe4:	ldr	r0, [pc, #712]	; 162b4 <__assert_fail@plt+0x436c>
   15fe8:	ldrb	r0, [r0, #100]	; 0x64
   15fec:	str	r0, [sp, #4]
   15ff0:	ldr	r0, [pc, #700]	; 162b4 <__assert_fail@plt+0x436c>
   15ff4:	ldr	r7, [r0, #104]	; 0x68
   15ff8:	ldr	r0, [r1, #20]
   15ffc:	str	r0, [sp, #8]
   16000:	beq	161ec <__assert_fail@plt+0x42a4>
   16004:	ldr	r4, [sp, #16]
   16008:	sub	r3, r3, r2
   1600c:	ldr	r0, [r4]
   16010:	add	r1, r0, r3
   16014:	bl	11a80 <memmove@plt>
   16018:	ldr	r2, [r4, #16]
   1601c:	mov	r3, r5
   16020:	stmib	r4, {r2, r5}
   16024:	ldr	r1, [sp, #16]
   16028:	sub	r7, r7, #18
   1602c:	ldr	fp, [r1, #12]
   16030:	ldr	r5, [r1]
   16034:	ldr	r1, [sp, #8]
   16038:	mov	sl, fp
   1603c:	add	r1, r1, #1
   16040:	str	r1, [sp, #12]
   16044:	ldr	r1, [sp, #8]
   16048:	add	sl, r5, sl
   1604c:	add	r4, r5, r2
   16050:	mul	r8, r3, r1
   16054:	cmp	r3, #0
   16058:	sub	r8, sl, r8
   1605c:	sub	r8, r8, r4
   16060:	sub	sl, sl, r3, lsl #4
   16064:	ldmne	sl, {r3, r5}
   16068:	addne	r5, r5, r3
   1606c:	ldr	r3, [sp, #12]
   16070:	cmp	r8, r3
   16074:	bls	1626c <__assert_fail@plt+0x4324>
   16078:	ldr	r1, [sp, #12]
   1607c:	sub	r0, r8, #1
   16080:	bl	21958 <_obstack_memory_used@@Base+0x8c>
   16084:	ldr	fp, [sp, #24]
   16088:	mov	r1, #1
   1608c:	mov	r3, fp
   16090:	mov	r9, r0
   16094:	mov	r2, r0
   16098:	mov	r0, r4
   1609c:	bl	11ee8 <fread_unlocked@plt>
   160a0:	cmp	r9, r0
   160a4:	sub	r8, r8, r0
   160a8:	add	r9, r4, r0
   160ac:	beq	160fc <__assert_fail@plt+0x41b4>
   160b0:	ldr	r3, [fp]
   160b4:	tst	r3, #32
   160b8:	bne	16298 <__assert_fail@plt+0x4350>
   160bc:	tst	r3, #16
   160c0:	beq	160fc <__assert_fail@plt+0x41b4>
   160c4:	ldr	r2, [sp, #16]
   160c8:	mov	r1, #1
   160cc:	ldr	r3, [r2]
   160d0:	strb	r1, [r2, #24]
   160d4:	cmp	r9, r3
   160d8:	beq	161e0 <__assert_fail@plt+0x4298>
   160dc:	cmp	r5, r9
   160e0:	beq	160fc <__assert_fail@plt+0x41b4>
   160e4:	ldrb	r3, [r9, #-1]
   160e8:	ldr	r2, [sp, #4]
   160ec:	cmp	r3, r2
   160f0:	movne	r3, r2
   160f4:	strbne	r3, [r9]
   160f8:	addne	r9, r9, #1
   160fc:	mov	fp, sl
   16100:	str	r9, [sp, #20]
   16104:	b	16124 <__assert_fail@plt+0x41dc>
   16108:	mov	r1, sl
   1610c:	mov	r0, r5
   16110:	mov	r2, r6
   16114:	bl	15c88 <__assert_fail@plt+0x3d40>
   16118:	str	r0, [fp, #-8]
   1611c:	sub	fp, fp, #16
   16120:	mov	r5, r4
   16124:	sub	r2, r9, r4
   16128:	mov	r0, r4
   1612c:	ldr	r1, [sp, #4]
   16130:	bl	11de0 <memchr@plt>
   16134:	mov	sl, fp
   16138:	cmp	r0, #0
   1613c:	beq	161f4 <__assert_fail@plt+0x42ac>
   16140:	ldr	r3, [sp, #8]
   16144:	mov	r4, r0
   16148:	sub	r8, r8, r3
   1614c:	mov	r3, #0
   16150:	strb	r3, [r4], #1
   16154:	sub	sl, r4, r5
   16158:	cmp	r7, sl
   1615c:	movcc	r7, sl
   16160:	cmp	r6, #0
   16164:	str	r5, [fp, #-16]
   16168:	str	sl, [fp, #-12]
   1616c:	beq	1611c <__assert_fail@plt+0x41d4>
   16170:	ldr	r2, [r6, #8]
   16174:	cmn	r2, #1
   16178:	beq	1618c <__assert_fail@plt+0x4244>
   1617c:	mov	r2, r6
   16180:	mov	r1, sl
   16184:	mov	r0, r5
   16188:	bl	15e08 <__assert_fail@plt+0x3ec0>
   1618c:	ldr	r2, [r6]
   16190:	str	r0, [fp, #-4]
   16194:	cmn	r2, #1
   16198:	bne	16108 <__assert_fail@plt+0x41c0>
   1619c:	ldrb	r2, [r6, #24]
   161a0:	cmp	r2, #0
   161a4:	beq	161d8 <__assert_fail@plt+0x4290>
   161a8:	ldrb	r2, [r5]
   161ac:	ldr	r3, [pc, #252]	; 162b0 <__assert_fail@plt+0x4368>
   161b0:	add	r2, r3, r2
   161b4:	ldrb	r2, [r2, #8]
   161b8:	cmp	r2, #0
   161bc:	beq	161d8 <__assert_fail@plt+0x4290>
   161c0:	ldrb	r3, [r5, #1]!
   161c4:	ldr	r2, [pc, #228]	; 162b0 <__assert_fail@plt+0x4368>
   161c8:	add	r3, r2, r3
   161cc:	ldrb	r3, [r3, #8]
   161d0:	cmp	r3, #0
   161d4:	bne	161c0 <__assert_fail@plt+0x4278>
   161d8:	str	r5, [fp, #-8]
   161dc:	b	1611c <__assert_fail@plt+0x41d4>
   161e0:	mov	r0, #0
   161e4:	add	sp, sp, #44	; 0x2c
   161e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   161ec:	ldr	r3, [r1, #8]
   161f0:	b	16024 <__assert_fail@plt+0x40dc>
   161f4:	ldr	r3, [sp, #16]
   161f8:	mov	r4, r9
   161fc:	ldrb	r3, [r3, #24]
   16200:	cmp	r3, #0
   16204:	beq	1606c <__assert_fail@plt+0x4124>
   16208:	ldr	ip, [sp, #16]
   1620c:	ldr	r3, [sp, #20]
   16210:	ldr	r0, [ip]
   16214:	ldr	r2, [ip, #12]
   16218:	sub	r1, r3, r0
   1621c:	add	r3, r0, r2
   16220:	sub	r3, r3, sl
   16224:	str	r1, [ip, #4]
   16228:	asr	r3, r3, #4
   1622c:	cmp	r3, #0
   16230:	str	r3, [ip, #8]
   16234:	bne	16274 <__assert_fail@plt+0x432c>
   16238:	lsr	r3, r2, #4
   1623c:	add	r1, sp, #36	; 0x24
   16240:	mov	r2, #16
   16244:	str	r3, [sp, #36]	; 0x24
   16248:	bl	20150 <__assert_fail@plt+0xe208>
   1624c:	ldr	sl, [sp, #36]	; 0x24
   16250:	ldr	r3, [sp, #16]
   16254:	lsl	sl, sl, #4
   16258:	str	sl, [r3, #12]
   1625c:	str	r0, [r3]
   16260:	mov	r5, r0
   16264:	ldmib	r3, {r2, r3}
   16268:	b	16044 <__assert_fail@plt+0x40fc>
   1626c:	str	r4, [sp, #20]
   16270:	b	16208 <__assert_fail@plt+0x42c0>
   16274:	ldr	r3, [sp, #20]
   16278:	add	r7, r7, #18
   1627c:	sub	r5, r3, r5
   16280:	ldr	r3, [pc, #44]	; 162b4 <__assert_fail@plt+0x436c>
   16284:	mov	r0, #1
   16288:	str	r5, [ip, #16]
   1628c:	str	r7, [r3, #104]	; 0x68
   16290:	add	sp, sp, #44	; 0x2c
   16294:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16298:	ldr	r1, [pc, #24]	; 162b8 <__assert_fail@plt+0x4370>
   1629c:	mov	r2, #5
   162a0:	mov	r0, #0
   162a4:	bl	11b58 <dcgettext@plt>
   162a8:	ldr	r1, [sp, #28]
   162ac:	bl	1554c <__assert_fail@plt+0x3604>
   162b0:	andeq	r5, r3, r0, ror #5
   162b4:	andeq	r5, r3, r4, ror #3
   162b8:			; <UNDEFINED> instruction: 0x000228bc
   162bc:	ldr	r2, [r0, #40]	; 0x28
   162c0:	ldr	r3, [r1, #40]	; 0x28
   162c4:	cmp	r2, r3
   162c8:	beq	162d8 <__assert_fail@plt+0x4390>
   162cc:	movcc	r0, #1
   162d0:	movcs	r0, #0
   162d4:	bx	lr
   162d8:	ldr	r3, [r0, #20]
   162dc:	ldr	r2, [r1, #20]
   162e0:	ldr	r0, [r0, #24]
   162e4:	ldr	r1, [r1, #24]
   162e8:	add	r0, r3, r0
   162ec:	add	r3, r2, r1
   162f0:	cmp	r0, r3
   162f4:	movcs	r0, #0
   162f8:	movcc	r0, #1
   162fc:	bx	lr
   16300:	add	r1, r0, #4
   16304:	mov	r2, #0
   16308:	mov	r0, #2
   1630c:	b	11c60 <pthread_sigmask@plt>
   16310:	push	{r4, r5, lr}
   16314:	sub	sp, sp, #140	; 0x8c
   16318:	ldr	r5, [pc, #120]	; 16398 <__assert_fail@plt+0x4450>
   1631c:	ldr	r3, [r5, #1032]	; 0x408
   16320:	cmp	r3, #0
   16324:	beq	16378 <__assert_fail@plt+0x4430>
   16328:	add	r2, sp, #8
   1632c:	ldr	r1, [pc, #104]	; 1639c <__assert_fail@plt+0x4454>
   16330:	mov	r0, #0
   16334:	bl	11c60 <pthread_sigmask@plt>
   16338:	ldr	r4, [r5, #1032]	; 0x408
   1633c:	cmp	r4, #0
   16340:	clz	r0, r0
   16344:	lsr	r0, r0, #5
   16348:	strb	r0, [sp, #4]
   1634c:	beq	16368 <__assert_fail@plt+0x4420>
   16350:	add	r0, r4, #9
   16354:	bl	11b7c <unlink@plt>
   16358:	ldr	r4, [r4]
   1635c:	cmp	r4, #0
   16360:	bne	16350 <__assert_fail@plt+0x4408>
   16364:	ldrb	r0, [sp, #4]
   16368:	mov	r3, #0
   1636c:	cmp	r0, #0
   16370:	str	r3, [r5, #1032]	; 0x408
   16374:	bne	16384 <__assert_fail@plt+0x443c>
   16378:	bl	19b1c <__assert_fail@plt+0x7bd4>
   1637c:	add	sp, sp, #140	; 0x8c
   16380:	pop	{r4, r5, pc}
   16384:	add	r0, sp, #4
   16388:	bl	16300 <__assert_fail@plt+0x43b8>
   1638c:	bl	19b1c <__assert_fail@plt+0x7bd4>
   16390:	add	sp, sp, #140	; 0x8c
   16394:	pop	{r4, r5, pc}
   16398:	andeq	r5, r3, r0, ror #5
   1639c:	andeq	r5, r3, ip, ror r7
   163a0:	ldr	r3, [pc, #276]	; 164bc <__assert_fail@plt+0x4574>
   163a4:	push	{r4, r5, r6, r7, r8, r9, lr}
   163a8:	mov	r5, r0
   163ac:	ldr	r3, [r3, #1032]	; 0x408
   163b0:	sub	sp, sp, #140	; 0x8c
   163b4:	add	r2, r3, #9
   163b8:	cmp	r0, r2
   163bc:	bne	163c8 <__assert_fail@plt+0x4480>
   163c0:	b	1649c <__assert_fail@plt+0x4554>
   163c4:	mov	r3, r4
   163c8:	ldr	r4, [r3]
   163cc:	add	r2, r4, #9
   163d0:	cmp	r2, r5
   163d4:	bne	163c4 <__assert_fail@plt+0x447c>
   163d8:	mov	r7, r3
   163dc:	ldrb	r3, [r4, #8]
   163e0:	cmp	r3, #1
   163e4:	beq	164b0 <__assert_fail@plt+0x4568>
   163e8:	add	r2, sp, #8
   163ec:	ldr	r1, [pc, #204]	; 164c0 <__assert_fail@plt+0x4578>
   163f0:	mov	r0, #0
   163f4:	ldr	r6, [r4]
   163f8:	bl	11c60 <pthread_sigmask@plt>
   163fc:	clz	r3, r0
   16400:	mov	r0, r5
   16404:	lsr	r3, r3, #5
   16408:	strb	r3, [sp, #4]
   1640c:	bl	11b7c <unlink@plt>
   16410:	mov	r8, r0
   16414:	bl	11d74 <__errno_location@plt>
   16418:	ldrb	r3, [sp, #4]
   1641c:	cmp	r3, #0
   16420:	ldr	r9, [r0]
   16424:	str	r6, [r7]
   16428:	bne	16450 <__assert_fail@plt+0x4508>
   1642c:	cmp	r8, #0
   16430:	bne	16460 <__assert_fail@plt+0x4518>
   16434:	cmp	r6, #0
   16438:	mov	r0, r4
   1643c:	ldreq	r3, [pc, #128]	; 164c4 <__assert_fail@plt+0x457c>
   16440:	streq	r7, [r3, #108]	; 0x6c
   16444:	bl	1afe8 <__assert_fail@plt+0x90a0>
   16448:	add	sp, sp, #140	; 0x8c
   1644c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   16450:	add	r0, sp, #4
   16454:	bl	16300 <__assert_fail@plt+0x43b8>
   16458:	cmp	r8, #0
   1645c:	beq	16434 <__assert_fail@plt+0x44ec>
   16460:	mov	r2, #5
   16464:	ldr	r1, [pc, #92]	; 164c8 <__assert_fail@plt+0x4580>
   16468:	mov	r0, #0
   1646c:	bl	11b58 <dcgettext@plt>
   16470:	mov	r2, r5
   16474:	mov	r1, #3
   16478:	mov	r8, r0
   1647c:	mov	r0, #0
   16480:	bl	1e89c <__assert_fail@plt+0xc954>
   16484:	mov	r2, r8
   16488:	mov	r1, r9
   1648c:	mov	r3, r0
   16490:	mov	r0, #0
   16494:	bl	11c90 <error@plt>
   16498:	b	16434 <__assert_fail@plt+0x44ec>
   1649c:	mov	r4, r3
   164a0:	ldr	r7, [pc, #36]	; 164cc <__assert_fail@plt+0x4584>
   164a4:	ldrb	r3, [r4, #8]
   164a8:	cmp	r3, #1
   164ac:	bne	163e8 <__assert_fail@plt+0x44a0>
   164b0:	ldr	r0, [r4, #4]
   164b4:	bl	15a14 <__assert_fail@plt+0x3acc>
   164b8:	b	163e8 <__assert_fail@plt+0x44a0>
   164bc:	andeq	r5, r3, r0, ror #5
   164c0:	andeq	r5, r3, ip, ror r7
   164c4:	andeq	r5, r3, r4, ror #3
   164c8:	andeq	r2, r2, r8, asr #17
   164cc:	andeq	r5, r3, r8, ror #13
   164d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   164d4:	vpush	{d8}
   164d8:	mov	r6, r1
   164dc:	mov	r1, #524288	; 0x80000
   164e0:	sub	sp, sp, #148	; 0x94
   164e4:	str	r0, [sp, #4]
   164e8:	bl	1c960 <__assert_fail@plt+0xaa18>
   164ec:	cmp	r0, #0
   164f0:	blt	16668 <__assert_fail@plt+0x4720>
   164f4:	ldr	r3, [pc, #380]	; 16678 <__assert_fail@plt+0x4730>
   164f8:	ldr	r4, [pc, #380]	; 1667c <__assert_fail@plt+0x4734>
   164fc:	ldr	r3, [r3, #112]	; 0x70
   16500:	ldr	r2, [r4, #1172]	; 0x494
   16504:	add	r3, r3, #1
   16508:	cmp	r3, r2
   1650c:	bcc	1663c <__assert_fail@plt+0x46f4>
   16510:	bl	11d74 <__errno_location@plt>
   16514:	vldr	d8, [pc, #340]	; 16670 <__assert_fail@plt+0x4728>
   16518:	ldr	r9, [pc, #352]	; 16680 <__assert_fail@plt+0x4738>
   1651c:	mov	r5, #0
   16520:	mov	r7, r0
   16524:	b	16574 <__assert_fail@plt+0x462c>
   16528:	cmp	r2, #0
   1652c:	str	r8, [r4, #1032]	; 0x408
   16530:	bne	165bc <__assert_fail@plt+0x4674>
   16534:	cmp	fp, #0
   16538:	str	sl, [r7]
   1653c:	bge	165f4 <__assert_fail@plt+0x46ac>
   16540:	cmp	sl, #11
   16544:	bne	165cc <__assert_fail@plt+0x4684>
   16548:	vmov.f64	d0, d8
   1654c:	bl	20740 <__assert_fail@plt+0xe7f8>
   16550:	vadd.f64	d8, d8, d8
   16554:	ldr	r3, [r4, #1172]	; 0x494
   16558:	mov	r0, r5
   1655c:	cmp	r3, #0
   16560:	ble	16570 <__assert_fail@plt+0x4628>
   16564:	bl	15904 <__assert_fail@plt+0x39bc>
   16568:	cmp	r0, #0
   1656c:	bne	16554 <__assert_fail@plt+0x460c>
   16570:	sub	r6, r6, #1
   16574:	cmp	r6, #0
   16578:	beq	165c8 <__assert_fail@plt+0x4680>
   1657c:	add	r2, sp, #16
   16580:	mov	r1, r9
   16584:	mov	r0, r5
   16588:	bl	11c60 <pthread_sigmask@plt>
   1658c:	ldr	r8, [r4, #1032]	; 0x408
   16590:	str	r5, [r4, #1032]	; 0x408
   16594:	clz	r0, r0
   16598:	lsr	r0, r0, #5
   1659c:	strb	r0, [sp, #12]
   165a0:	bl	11e40 <fork@plt>
   165a4:	ldr	sl, [r7]
   165a8:	ldrb	r2, [sp, #12]
   165ac:	subs	fp, r0, #0
   165b0:	bne	16528 <__assert_fail@plt+0x45e0>
   165b4:	cmp	r2, #0
   165b8:	beq	16614 <__assert_fail@plt+0x46cc>
   165bc:	add	r0, sp, #12
   165c0:	bl	16300 <__assert_fail@plt+0x43b8>
   165c4:	b	16534 <__assert_fail@plt+0x45ec>
   165c8:	ldr	sl, [r7]
   165cc:	ldr	r4, [sp, #4]
   165d0:	ldr	r0, [r4]
   165d4:	bl	11f30 <close@plt>
   165d8:	ldr	r0, [r4, #4]
   165dc:	bl	11f30 <close@plt>
   165e0:	str	sl, [r7]
   165e4:	mov	r0, fp
   165e8:	add	sp, sp, #148	; 0x94
   165ec:	vpop	{d8}
   165f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   165f4:	beq	16618 <__assert_fail@plt+0x46d0>
   165f8:	ldr	r3, [r4, #1172]	; 0x494
   165fc:	mov	r0, fp
   16600:	add	r3, r3, #1
   16604:	str	r3, [r4, #1172]	; 0x494
   16608:	add	sp, sp, #148	; 0x94
   1660c:	vpop	{d8}
   16610:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16614:	str	sl, [r7]
   16618:	mov	r0, #0
   1661c:	bl	11f30 <close@plt>
   16620:	mov	r0, #1
   16624:	bl	11f30 <close@plt>
   16628:	mov	fp, #0
   1662c:	mov	r0, fp
   16630:	add	sp, sp, #148	; 0x94
   16634:	vpop	{d8}
   16638:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1663c:	mvn	r0, #0
   16640:	bl	15904 <__assert_fail@plt+0x39bc>
   16644:	mov	r5, #0
   16648:	ldr	r3, [r4, #1172]	; 0x494
   1664c:	mov	r0, r5
   16650:	cmp	r3, #0
   16654:	ble	16510 <__assert_fail@plt+0x45c8>
   16658:	bl	15904 <__assert_fail@plt+0x39bc>
   1665c:	cmp	r0, #0
   16660:	bne	16648 <__assert_fail@plt+0x4700>
   16664:	b	16510 <__assert_fail@plt+0x45c8>
   16668:	mvn	fp, #0
   1666c:	b	165e4 <__assert_fail@plt+0x469c>
   16670:	andeq	r0, r0, r0
   16674:	svccc	0x00d00000
   16678:	andeq	r5, r3, r4, ror #3
   1667c:	andeq	r5, r3, r0, ror #5
   16680:	andeq	r5, r3, ip, ror r7
   16684:	push	{r4, r5, r6, lr}
   16688:	sub	sp, sp, #24
   1668c:	ldr	r3, [pc, #188]	; 16750 <__assert_fail@plt+0x4808>
   16690:	mov	r5, r1
   16694:	mov	r4, r2
   16698:	str	r3, [sp]
   1669c:	mov	r2, #10
   166a0:	add	r3, sp, #16
   166a4:	add	r1, sp, #12
   166a8:	mov	r6, r0
   166ac:	bl	20928 <__assert_fail@plt+0xe9e0>
   166b0:	cmp	r0, #4
   166b4:	ldrls	pc, [pc, r0, lsl #2]
   166b8:	b	166f0 <__assert_fail@plt+0x47a8>
   166bc:	ldrdeq	r6, [r1], -r0
   166c0:	andeq	r6, r1, r8, ror #13
   166c4:	ldrdeq	r6, [r1], -r0
   166c8:	andeq	r6, r1, r8, ror #13
   166cc:	strdeq	r6, [r1], -ip
   166d0:	ldrd	r2, [sp, #16]
   166d4:	mov	r1, #0
   166d8:	cmp	r3, r1
   166dc:	cmpeq	r2, r2
   166e0:	str	r2, [r5]
   166e4:	beq	166f0 <__assert_fail@plt+0x47a8>
   166e8:	mvn	r3, #0
   166ec:	str	r3, [r5]
   166f0:	ldr	r0, [sp, #12]
   166f4:	add	sp, sp, #24
   166f8:	pop	{r4, r5, r6, pc}
   166fc:	cmp	r4, #0
   16700:	moveq	r0, r4
   16704:	beq	166f4 <__assert_fail@plt+0x47ac>
   16708:	mov	r2, #5
   1670c:	ldr	r1, [pc, #64]	; 16754 <__assert_fail@plt+0x480c>
   16710:	mov	r0, #0
   16714:	bl	11b58 <dcgettext@plt>
   16718:	mov	r1, r4
   1671c:	mov	r2, #5
   16720:	mov	r5, r0
   16724:	mov	r0, #0
   16728:	bl	11b58 <dcgettext@plt>
   1672c:	mov	r4, r0
   16730:	mov	r0, r6
   16734:	bl	1ea20 <__assert_fail@plt+0xcad8>
   16738:	mov	r3, r4
   1673c:	mov	r2, r5
   16740:	mov	r1, #0
   16744:	str	r0, [sp]
   16748:	mov	r0, #2
   1674c:	bl	11c90 <error@plt>
   16750:	muleq	r2, r8, pc	; <UNPREDICTABLE>
   16754:	andeq	r2, r2, r4, ror #17
   16758:	push	{r4, lr}
   1675c:	mov	r2, #5
   16760:	mov	r4, r0
   16764:	ldr	r1, [pc, #12]	; 16778 <__assert_fail@plt+0x4830>
   16768:	mov	r0, #0
   1676c:	bl	11b58 <dcgettext@plt>
   16770:	mov	r1, r4
   16774:	bl	1554c <__assert_fail@plt+0x3604>
   16778:	andeq	r2, r2, r8, lsl #18
   1677c:	push	{r4, r5, r6, lr}
   16780:	mov	r5, r1
   16784:	mov	r4, r0
   16788:	bl	11dc8 <fileno@plt>
   1678c:	cmp	r0, #0
   16790:	beq	167ec <__assert_fail@plt+0x48a4>
   16794:	cmp	r0, #1
   16798:	bne	167c4 <__assert_fail@plt+0x487c>
   1679c:	mov	r0, r4
   167a0:	bl	11bdc <fflush_unlocked@plt>
   167a4:	cmp	r0, #0
   167a8:	popeq	{r4, r5, r6, pc}
   167ac:	ldr	r1, [pc, #68]	; 167f8 <__assert_fail@plt+0x48b0>
   167b0:	mov	r2, #5
   167b4:	mov	r0, #0
   167b8:	bl	11b58 <dcgettext@plt>
   167bc:	mov	r1, r5
   167c0:	bl	1554c <__assert_fail@plt+0x3604>
   167c4:	mov	r0, r4
   167c8:	bl	1a9e4 <__assert_fail@plt+0x8a9c>
   167cc:	cmp	r0, #0
   167d0:	popeq	{r4, r5, r6, pc}
   167d4:	ldr	r1, [pc, #32]	; 167fc <__assert_fail@plt+0x48b4>
   167d8:	mov	r2, #5
   167dc:	mov	r0, #0
   167e0:	bl	11b58 <dcgettext@plt>
   167e4:	mov	r1, r5
   167e8:	bl	1554c <__assert_fail@plt+0x3604>
   167ec:	mov	r0, r4
   167f0:	pop	{r4, r5, r6, lr}
   167f4:	b	11e88 <clearerr_unlocked@plt>
   167f8:	andeq	r2, r2, r4, lsl r9
   167fc:	andeq	r2, r2, r4, lsr #18
   16800:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16804:	sub	sp, sp, #20
   16808:	ldr	r9, [r0]
   1680c:	ldr	r6, [r0, #4]
   16810:	subs	r5, r2, #0
   16814:	str	r0, [sp, #4]
   16818:	mov	r3, r1
   1681c:	add	r4, r9, r6
   16820:	beq	16858 <__assert_fail@plt+0x4910>
   16824:	ldr	r2, [pc, #1012]	; 16c20 <__assert_fail@plt+0x4cd8>
   16828:	mov	r0, r9
   1682c:	mov	r1, #1
   16830:	ldrb	ip, [r2, #100]	; 0x64
   16834:	mov	r2, r6
   16838:	strb	ip, [r4, #-1]
   1683c:	bl	11b34 <fwrite_unlocked@plt>
   16840:	cmp	r6, r0
   16844:	moveq	r3, #0
   16848:	strbeq	r3, [r4, #-1]
   1684c:	bne	16c08 <__assert_fail@plt+0x4cc0>
   16850:	add	sp, sp, #20
   16854:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16858:	ldr	fp, [pc, #964]	; 16c24 <__assert_fail@plt+0x4cdc>
   1685c:	ldrb	r2, [fp, #1308]	; 0x51c
   16860:	cmp	r2, #0
   16864:	beq	16824 <__assert_fail@plt+0x48dc>
   16868:	cmp	r9, r4
   1686c:	bcs	168fc <__assert_fail@plt+0x49b4>
   16870:	mov	r6, #62	; 0x3e
   16874:	mov	r5, #10
   16878:	mov	r7, r1
   1687c:	b	168b0 <__assert_fail@plt+0x4968>
   16880:	cmp	r4, r9
   16884:	beq	16bfc <__assert_fail@plt+0x4cb4>
   16888:	mov	r1, r2
   1688c:	ldr	r0, [r7, #20]
   16890:	ldr	r3, [r7, #24]
   16894:	cmp	r0, r3
   16898:	addcc	r3, r0, #1
   1689c:	strcc	r3, [r7, #20]
   168a0:	strbcc	r2, [r0]
   168a4:	bcs	168c8 <__assert_fail@plt+0x4980>
   168a8:	cmp	r4, r9
   168ac:	beq	168f0 <__assert_fail@plt+0x49a8>
   168b0:	ldrb	r2, [r9], #1
   168b4:	cmp	r2, #9
   168b8:	bne	16880 <__assert_fail@plt+0x4938>
   168bc:	mov	r1, r6
   168c0:	mov	r2, #62	; 0x3e
   168c4:	b	1688c <__assert_fail@plt+0x4944>
   168c8:	mov	r0, r7
   168cc:	bl	11e1c <__overflow@plt>
   168d0:	cmn	r0, #1
   168d4:	bne	168a8 <__assert_fail@plt+0x4960>
   168d8:	ldr	r1, [pc, #840]	; 16c28 <__assert_fail@plt+0x4ce0>
   168dc:	mov	r2, #5
   168e0:	mov	r0, #0
   168e4:	bl	11b58 <dcgettext@plt>
   168e8:	mov	r1, #0
   168ec:	bl	1554c <__assert_fail@plt+0x3604>
   168f0:	ldr	r3, [sp, #4]
   168f4:	ldr	r9, [r3]
   168f8:	ldr	r6, [r3, #4]
   168fc:	ldr	r7, [fp, #1176]	; 0x498
   16900:	sub	sl, r6, #1
   16904:	cmp	r7, #0
   16908:	ldr	r5, [pc, #796]	; 16c2c <__assert_fail@plt+0x4ce4>
   1690c:	add	sl, r9, sl
   16910:	beq	16b5c <__assert_fail@plt+0x4c14>
   16914:	ldr	r8, [r7]
   16918:	cmn	r8, #1
   1691c:	beq	16b6c <__assert_fail@plt+0x4c24>
   16920:	mov	r2, r7
   16924:	mov	r1, r6
   16928:	mov	r0, r9
   1692c:	bl	15c88 <__assert_fail@plt+0x3d40>
   16930:	ldr	r2, [r7, #8]
   16934:	cmn	r2, #1
   16938:	mov	r4, r0
   1693c:	beq	1696c <__assert_fail@plt+0x4a24>
   16940:	mov	r1, r6
   16944:	mov	r2, r7
   16948:	mov	r0, r9
   1694c:	bl	15e08 <__assert_fail@plt+0x3ec0>
   16950:	mov	sl, r0
   16954:	ldrb	r2, [r7, #24]
   16958:	cmn	r8, #1
   1695c:	movne	r8, #0
   16960:	moveq	r8, #1
   16964:	tst	r8, r2
   16968:	bne	16990 <__assert_fail@plt+0x4a48>
   1696c:	ldrb	r2, [r7, #30]
   16970:	cmp	r2, #0
   16974:	bne	16990 <__assert_fail@plt+0x4a48>
   16978:	ldrb	r2, [r7, #26]
   1697c:	cmp	r2, #0
   16980:	bne	16990 <__assert_fail@plt+0x4a48>
   16984:	ldrh	r2, [r7, #28]
   16988:	cmp	r2, #0
   1698c:	beq	16a60 <__assert_fail@plt+0x4b18>
   16990:	mov	r3, #0
   16994:	ldrb	r6, [sl]
   16998:	strb	r3, [sl]
   1699c:	ldrb	r2, [r4]
   169a0:	add	r2, fp, r2
   169a4:	ldrb	r2, [r2, #8]
   169a8:	cmp	r2, #0
   169ac:	beq	169c4 <__assert_fail@plt+0x4a7c>
   169b0:	ldrb	r3, [r4, #1]!
   169b4:	add	r3, fp, r3
   169b8:	ldrb	r3, [r3, #8]
   169bc:	cmp	r3, #0
   169c0:	bne	169b0 <__assert_fail@plt+0x4a68>
   169c4:	cmp	r4, sl
   169c8:	str	r4, [sp, #8]
   169cc:	bhi	16b64 <__assert_fail@plt+0x4c1c>
   169d0:	ldrb	r2, [r7, #30]
   169d4:	cmp	r2, #0
   169d8:	bne	16bd0 <__assert_fail@plt+0x4c88>
   169dc:	ldrb	r2, [r7, #28]
   169e0:	cmp	r2, #0
   169e4:	bne	16bec <__assert_fail@plt+0x4ca4>
   169e8:	ldrb	r1, [r7, #26]
   169ec:	cmp	r1, #0
   169f0:	bne	16a00 <__assert_fail@plt+0x4ab8>
   169f4:	ldrb	r1, [r7, #29]
   169f8:	cmp	r1, #0
   169fc:	beq	16b64 <__assert_fail@plt+0x4c1c>
   16a00:	cmp	r4, sl
   16a04:	add	r0, sp, #12
   16a08:	ldrbcc	r2, [r4]
   16a0c:	subcc	r2, r2, #45	; 0x2d
   16a10:	clzcc	r2, r2
   16a14:	lsrcc	r2, r2, #5
   16a18:	add	r2, r4, r2
   16a1c:	str	r2, [sp, #12]
   16a20:	bl	14fbc <__assert_fail@plt+0x3074>
   16a24:	cmp	r0, #47	; 0x2f
   16a28:	bls	16a58 <__assert_fail@plt+0x4b10>
   16a2c:	ldrb	r1, [r7, #29]
   16a30:	ldr	r2, [sp, #12]
   16a34:	cmp	r1, #0
   16a38:	beq	16a50 <__assert_fail@plt+0x4b08>
   16a3c:	ldrb	r1, [r2]
   16a40:	ldr	r3, [pc, #488]	; 16c30 <__assert_fail@plt+0x4ce8>
   16a44:	ldrb	r1, [r3, r1]
   16a48:	adds	r1, r1, #0
   16a4c:	movne	r1, #1
   16a50:	add	r2, r2, r1
   16a54:	str	r2, [sp, #8]
   16a58:	strb	r6, [sl]
   16a5c:	ldr	sl, [sp, #8]
   16a60:	mov	r6, #32
   16a64:	mov	r8, #95	; 0x5f
   16a68:	mov	r0, r9
   16a6c:	mov	r1, r4
   16a70:	bl	1580c <__assert_fail@plt+0x38c4>
   16a74:	mov	r1, sl
   16a78:	mov	r9, r0
   16a7c:	mov	r0, r4
   16a80:	bl	1580c <__assert_fail@plt+0x38c4>
   16a84:	mov	r4, r0
   16a88:	b	16a90 <__assert_fail@plt+0x4b48>
   16a8c:	sub	r9, r9, #1
   16a90:	cmp	r9, #0
   16a94:	beq	16ac4 <__assert_fail@plt+0x4b7c>
   16a98:	ldr	r0, [r5]
   16a9c:	ldr	r3, [r0, #20]
   16aa0:	ldr	r2, [r0, #24]
   16aa4:	cmp	r3, r2
   16aa8:	addcc	r2, r3, #1
   16aac:	strcc	r2, [r0, #20]
   16ab0:	strbcc	r6, [r3]
   16ab4:	bcc	16a8c <__assert_fail@plt+0x4b44>
   16ab8:	mov	r1, r6
   16abc:	bl	11e1c <__overflow@plt>
   16ac0:	b	16a8c <__assert_fail@plt+0x4b44>
   16ac4:	cmp	r4, #0
   16ac8:	bne	16ad8 <__assert_fail@plt+0x4b90>
   16acc:	b	16b80 <__assert_fail@plt+0x4c38>
   16ad0:	subs	r4, r4, #1
   16ad4:	beq	16b08 <__assert_fail@plt+0x4bc0>
   16ad8:	ldr	r0, [r5]
   16adc:	ldr	r3, [r0, #20]
   16ae0:	ldr	r2, [r0, #24]
   16ae4:	cmp	r3, r2
   16ae8:	addcc	r2, r3, #1
   16aec:	strcc	r2, [r0, #20]
   16af0:	strbcc	r8, [r3]
   16af4:	bcc	16ad0 <__assert_fail@plt+0x4b88>
   16af8:	mov	r1, r8
   16afc:	bl	11e1c <__overflow@plt>
   16b00:	subs	r4, r4, #1
   16b04:	bne	16ad8 <__assert_fail@plt+0x4b90>
   16b08:	ldr	r0, [r5]
   16b0c:	ldr	r2, [r0, #24]
   16b10:	ldr	r3, [r0, #20]
   16b14:	cmp	r3, r2
   16b18:	addcc	r2, r3, #1
   16b1c:	strcc	r2, [r0, #20]
   16b20:	movcc	r2, #10
   16b24:	strbcc	r2, [r3]
   16b28:	bcs	16be0 <__assert_fail@plt+0x4c98>
   16b2c:	cmp	r7, #0
   16b30:	beq	16850 <__assert_fail@plt+0x4908>
   16b34:	ldr	r7, [r7, #36]	; 0x24
   16b38:	cmp	r7, #0
   16b3c:	beq	16ba0 <__assert_fail@plt+0x4c58>
   16b40:	ldr	r3, [sp, #4]
   16b44:	cmp	r7, #0
   16b48:	ldr	r6, [r3, #4]
   16b4c:	ldr	r9, [r3]
   16b50:	sub	sl, r6, #1
   16b54:	add	sl, r9, sl
   16b58:	bne	16914 <__assert_fail@plt+0x49cc>
   16b5c:	mov	r4, r9
   16b60:	b	16a60 <__assert_fail@plt+0x4b18>
   16b64:	str	sl, [sp, #8]
   16b68:	b	16a58 <__assert_fail@plt+0x4b10>
   16b6c:	ldr	r2, [r7, #8]
   16b70:	mov	r4, r9
   16b74:	cmn	r2, #1
   16b78:	bne	16940 <__assert_fail@plt+0x49f8>
   16b7c:	b	16954 <__assert_fail@plt+0x4a0c>
   16b80:	mov	r2, #5
   16b84:	ldr	r1, [pc, #168]	; 16c34 <__assert_fail@plt+0x4cec>
   16b88:	mov	r0, #0
   16b8c:	bl	11b58 <dcgettext@plt>
   16b90:	mov	r1, r0
   16b94:	mov	r0, #1
   16b98:	bl	11db0 <__printf_chk@plt>
   16b9c:	b	16b2c <__assert_fail@plt+0x4be4>
   16ba0:	ldrb	r3, [fp, #1309]	; 0x51d
   16ba4:	cmp	r3, #0
   16ba8:	bne	16850 <__assert_fail@plt+0x4908>
   16bac:	ldrb	r3, [fp, #1310]	; 0x51e
   16bb0:	cmp	r3, #0
   16bb4:	bne	16850 <__assert_fail@plt+0x4908>
   16bb8:	ldr	r3, [sp, #4]
   16bbc:	ldm	r3, {r4, sl}
   16bc0:	sub	sl, sl, #1
   16bc4:	add	sl, r4, sl
   16bc8:	mov	r0, r4
   16bcc:	b	16a6c <__assert_fail@plt+0x4b24>
   16bd0:	add	r1, sp, #8
   16bd4:	mov	r0, r4
   16bd8:	bl	150cc <__assert_fail@plt+0x3184>
   16bdc:	b	16a58 <__assert_fail@plt+0x4b10>
   16be0:	mov	r1, #10
   16be4:	bl	11e1c <__overflow@plt>
   16be8:	b	16b2c <__assert_fail@plt+0x4be4>
   16bec:	add	r1, sp, #8
   16bf0:	mov	r0, r4
   16bf4:	bl	11b1c <strtold@plt>
   16bf8:	b	16a58 <__assert_fail@plt+0x4b10>
   16bfc:	mov	r1, r5
   16c00:	mov	r2, #10
   16c04:	b	1688c <__assert_fail@plt+0x4944>
   16c08:	ldr	r1, [pc, #24]	; 16c28 <__assert_fail@plt+0x4ce0>
   16c0c:	mov	r2, #5
   16c10:	mov	r0, #0
   16c14:	bl	11b58 <dcgettext@plt>
   16c18:	mov	r1, r5
   16c1c:	bl	1554c <__assert_fail@plt+0x3604>
   16c20:	andeq	r5, r3, r4, ror #3
   16c24:	andeq	r5, r3, r0, ror #5
   16c28:	andeq	r2, r2, r4, lsr r9
   16c2c:	ldrdeq	r5, [r3], -r4
   16c30:	andeq	r2, r2, r0, lsr #7
   16c34:	andeq	r2, r2, r4, asr #18
   16c38:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16c3c:	vpush	{d8}
   16c40:	ldr	r6, [pc, #3196]	; 178c4 <__assert_fail@plt+0x597c>
   16c44:	ldr	r5, [r0, #8]
   16c48:	ldr	r8, [r1, #8]
   16c4c:	sub	sp, sp, #8384	; 0x20c0
   16c50:	ldr	fp, [r0, #12]
   16c54:	ldr	sl, [r1, #12]
   16c58:	ldr	r7, [r6, #1176]	; 0x498
   16c5c:	sub	sp, sp, #52	; 0x34
   16c60:	mov	r2, r1
   16c64:	add	r3, sp, #276	; 0x114
   16c68:	str	r0, [sp, #12]
   16c6c:	str	r1, [sp, #16]
   16c70:	str	r3, [sp, #72]	; 0x48
   16c74:	ldrb	r3, [r6, #1311]	; 0x51f
   16c78:	cmp	r5, fp
   16c7c:	movcc	r2, fp
   16c80:	movcs	r2, r5
   16c84:	cmp	r8, sl
   16c88:	movcs	sl, r8
   16c8c:	cmp	r3, #0
   16c90:	sub	r9, r2, r5
   16c94:	sub	fp, sl, r8
   16c98:	ldr	r1, [r7, #20]
   16c9c:	ldr	r4, [r7, #16]
   16ca0:	bne	16df8 <__assert_fail@plt+0x4eb0>
   16ca4:	ldrb	r3, [r7, #26]
   16ca8:	cmp	r3, #0
   16cac:	bne	16df8 <__assert_fail@plt+0x4eb0>
   16cb0:	ldrh	r3, [r7, #28]
   16cb4:	cmp	r3, #0
   16cb8:	bne	16df8 <__assert_fail@plt+0x4eb0>
   16cbc:	ldrb	r3, [r7, #30]
   16cc0:	cmp	r3, #0
   16cc4:	bne	16df8 <__assert_fail@plt+0x4eb0>
   16cc8:	ldrb	r3, [r7, #27]
   16ccc:	cmp	r3, #0
   16cd0:	bne	16df8 <__assert_fail@plt+0x4eb0>
   16cd4:	ldrb	r3, [r7, #32]
   16cd8:	cmp	r3, #0
   16cdc:	bne	16df8 <__assert_fail@plt+0x4eb0>
   16ce0:	cmp	r4, #0
   16ce4:	beq	17808 <__assert_fail@plt+0x58c0>
   16ce8:	cmp	r1, #0
   16cec:	beq	16d9c <__assert_fail@plt+0x4e54>
   16cf0:	cmp	r5, r2
   16cf4:	bcs	16d08 <__assert_fail@plt+0x4dc0>
   16cf8:	ldrb	r3, [r5]
   16cfc:	ldrb	r3, [r4, r3]
   16d00:	cmp	r3, #0
   16d04:	bne	16d70 <__assert_fail@plt+0x4e28>
   16d08:	cmp	r8, sl
   16d0c:	bcs	177c4 <__assert_fail@plt+0x587c>
   16d10:	ldrb	r3, [r8]
   16d14:	ldrb	r3, [r4, r3]
   16d18:	cmp	r3, #0
   16d1c:	addne	r3, r8, #1
   16d20:	bne	16d3c <__assert_fail@plt+0x4df4>
   16d24:	b	16d48 <__assert_fail@plt+0x4e00>
   16d28:	ldrb	r0, [r3]
   16d2c:	add	r3, r3, #1
   16d30:	ldrb	r0, [r4, r0]
   16d34:	cmp	r0, #0
   16d38:	beq	16d48 <__assert_fail@plt+0x4e00>
   16d3c:	cmp	sl, r3
   16d40:	mov	r8, r3
   16d44:	bne	16d28 <__assert_fail@plt+0x4de0>
   16d48:	cmp	sl, r8
   16d4c:	cmphi	r2, r5
   16d50:	bls	177c4 <__assert_fail@plt+0x587c>
   16d54:	ldrb	r3, [r5]
   16d58:	ldrb	r0, [r8]
   16d5c:	ldrb	r3, [r1, r3]
   16d60:	ldrb	r0, [r1, r0]
   16d64:	subs	r3, r3, r0
   16d68:	bne	170e8 <__assert_fail@plt+0x51a0>
   16d6c:	add	r8, r8, #1
   16d70:	add	r5, r5, #1
   16d74:	b	16cf0 <__assert_fail@plt+0x4da8>
   16d78:	cmp	sl, r8
   16d7c:	cmphi	r2, r5
   16d80:	bls	177c4 <__assert_fail@plt+0x587c>
   16d84:	ldrb	r3, [r5]
   16d88:	ldrb	r1, [r8]
   16d8c:	subs	r3, r3, r1
   16d90:	bne	170e8 <__assert_fail@plt+0x51a0>
   16d94:	add	r8, r8, #1
   16d98:	add	r5, r5, #1
   16d9c:	cmp	r5, r2
   16da0:	bcs	16db4 <__assert_fail@plt+0x4e6c>
   16da4:	ldrb	r3, [r5]
   16da8:	ldrb	r3, [r4, r3]
   16dac:	cmp	r3, #0
   16db0:	bne	16d98 <__assert_fail@plt+0x4e50>
   16db4:	cmp	r8, sl
   16db8:	bcs	177c4 <__assert_fail@plt+0x587c>
   16dbc:	ldrb	r3, [r8]
   16dc0:	ldrb	r3, [r4, r3]
   16dc4:	cmp	r3, #0
   16dc8:	addne	r3, r8, #1
   16dcc:	bne	16de8 <__assert_fail@plt+0x4ea0>
   16dd0:	b	16d78 <__assert_fail@plt+0x4e30>
   16dd4:	ldrb	r1, [r3]
   16dd8:	add	r3, r3, #1
   16ddc:	ldrb	r1, [r4, r1]
   16de0:	cmp	r1, #0
   16de4:	beq	16d78 <__assert_fail@plt+0x4e30>
   16de8:	cmp	sl, r3
   16dec:	mov	r8, r3
   16df0:	bne	16dd4 <__assert_fail@plt+0x4e8c>
   16df4:	b	16d78 <__assert_fail@plt+0x4e30>
   16df8:	cmp	r1, #0
   16dfc:	cmpeq	r4, #0
   16e00:	movne	r3, #1
   16e04:	moveq	r3, #0
   16e08:	str	r3, [sp, #8]
   16e0c:	beq	170ac <__assert_fail@plt+0x5164>
   16e10:	add	r0, r9, fp
   16e14:	add	r0, r0, #2
   16e18:	cmp	r0, #4000	; 0xfa0
   16e1c:	movls	r3, #0
   16e20:	strls	r3, [sp, #28]
   16e24:	addls	ip, sp, #432	; 0x1b0
   16e28:	bhi	17280 <__assert_fail@plt+0x5338>
   16e2c:	add	r3, r9, #1
   16e30:	add	r3, ip, r3
   16e34:	cmp	r9, #0
   16e38:	str	r3, [sp, #4]
   16e3c:	beq	172c4 <__assert_fail@plt+0x537c>
   16e40:	mov	r9, #0
   16e44:	cmp	r4, #0
   16e48:	ldrb	r3, [r5]
   16e4c:	beq	16e5c <__assert_fail@plt+0x4f14>
   16e50:	ldrb	r0, [r4, r3]
   16e54:	cmp	r0, #0
   16e58:	bne	16e74 <__assert_fail@plt+0x4f2c>
   16e5c:	cmp	r1, #0
   16e60:	add	lr, r9, #1
   16e64:	ldrbne	r3, [r1, r3]
   16e68:	add	r0, ip, r9
   16e6c:	mov	r9, lr
   16e70:	strb	r3, [r0]
   16e74:	add	r5, r5, #1
   16e78:	cmp	r2, r5
   16e7c:	bne	16e44 <__assert_fail@plt+0x4efc>
   16e80:	add	r2, ip, r9
   16e84:	mov	r3, #0
   16e88:	cmp	fp, #0
   16e8c:	strb	r3, [r2]
   16e90:	beq	16ed8 <__assert_fail@plt+0x4f90>
   16e94:	ldr	lr, [sp, #4]
   16e98:	mov	fp, r3
   16e9c:	cmp	r4, #0
   16ea0:	ldrb	r3, [r8]
   16ea4:	beq	16eb4 <__assert_fail@plt+0x4f6c>
   16ea8:	ldrb	r2, [r4, r3]
   16eac:	cmp	r2, #0
   16eb0:	bne	16ecc <__assert_fail@plt+0x4f84>
   16eb4:	cmp	r1, #0
   16eb8:	add	r0, fp, #1
   16ebc:	ldrbne	r3, [r1, r3]
   16ec0:	add	r2, lr, fp
   16ec4:	mov	fp, r0
   16ec8:	strb	r3, [r2]
   16ecc:	add	r8, r8, #1
   16ed0:	cmp	r8, sl
   16ed4:	bne	16e9c <__assert_fail@plt+0x4f54>
   16ed8:	ldr	r2, [sp, #4]
   16edc:	mov	r5, ip
   16ee0:	mov	r3, #0
   16ee4:	strb	r3, [r2, fp]
   16ee8:	ldrb	r8, [r7, #26]
   16eec:	cmp	r8, #0
   16ef0:	beq	17014 <__assert_fail@plt+0x50cc>
   16ef4:	ldrb	r3, [r5]
   16ef8:	mov	r0, r5
   16efc:	add	r3, r6, r3
   16f00:	ldrb	r3, [r3, #8]
   16f04:	cmp	r3, #0
   16f08:	beq	16f20 <__assert_fail@plt+0x4fd8>
   16f0c:	ldrb	r3, [r0, #1]!
   16f10:	add	r3, r6, r3
   16f14:	ldrb	r3, [r3, #8]
   16f18:	cmp	r3, #0
   16f1c:	bne	16f0c <__assert_fail@plt+0x4fc4>
   16f20:	ldr	r1, [sp, #4]
   16f24:	ldrb	r3, [r1]
   16f28:	add	r3, r6, r3
   16f2c:	ldrb	r3, [r3, #8]
   16f30:	cmp	r3, #0
   16f34:	beq	172cc <__assert_fail@plt+0x5384>
   16f38:	ldrb	r3, [r1, #1]!
   16f3c:	add	r3, r6, r3
   16f40:	ldrb	r3, [r3, #8]
   16f44:	cmp	r3, #0
   16f48:	bne	16f38 <__assert_fail@plt+0x4ff0>
   16f4c:	ldr	r3, [r6]
   16f50:	ldrb	r2, [r6, #4]
   16f54:	bl	1f570 <__assert_fail@plt+0xd628>
   16f58:	mov	r3, r0
   16f5c:	ldr	r2, [sp, #8]
   16f60:	cmp	r2, #0
   16f64:	bne	170d0 <__assert_fail@plt+0x5188>
   16f68:	ldrb	r2, [sp, #20]
   16f6c:	ldrb	r1, [sp, #24]
   16f70:	strb	r2, [r5, r9]
   16f74:	ldr	r2, [sp, #4]
   16f78:	strb	r1, [r2, fp]
   16f7c:	cmp	r3, #0
   16f80:	bne	170e8 <__assert_fail@plt+0x51a0>
   16f84:	ldr	r7, [r7, #36]	; 0x24
   16f88:	cmp	r7, #0
   16f8c:	beq	170f4 <__assert_fail@plt+0x51ac>
   16f90:	ldr	r3, [r7, #8]
   16f94:	cmn	r3, #1
   16f98:	ldr	r3, [sp, #12]
   16f9c:	beq	171a8 <__assert_fail@plt+0x5260>
   16fa0:	ldr	r5, [r3]
   16fa4:	ldr	r1, [r3, #4]
   16fa8:	mov	r2, r7
   16fac:	mov	r0, r5
   16fb0:	bl	15e08 <__assert_fail@plt+0x3ec0>
   16fb4:	ldr	r3, [sp, #16]
   16fb8:	mov	r2, r7
   16fbc:	ldr	r8, [r3]
   16fc0:	ldr	r1, [r3, #4]
   16fc4:	mov	fp, r0
   16fc8:	mov	r0, r8
   16fcc:	bl	15e08 <__assert_fail@plt+0x3ec0>
   16fd0:	mov	sl, r0
   16fd4:	ldr	r3, [r7]
   16fd8:	cmn	r3, #1
   16fdc:	beq	17108 <__assert_fail@plt+0x51c0>
   16fe0:	ldr	r3, [sp, #12]
   16fe4:	mov	r0, r5
   16fe8:	mov	r2, r7
   16fec:	ldr	r1, [r3, #4]
   16ff0:	bl	15c88 <__assert_fail@plt+0x3d40>
   16ff4:	ldr	r3, [sp, #16]
   16ff8:	mov	r2, r7
   16ffc:	ldr	r1, [r3, #4]
   17000:	mov	r5, r0
   17004:	mov	r0, r8
   17008:	bl	15c88 <__assert_fail@plt+0x3d40>
   1700c:	mov	r8, r0
   17010:	b	16c74 <__assert_fail@plt+0x4d2c>
   17014:	ldrb	r3, [r7, #28]
   17018:	cmp	r3, #0
   1701c:	bne	17208 <__assert_fail@plt+0x52c0>
   17020:	ldrb	r8, [r7, #29]
   17024:	cmp	r8, #0
   17028:	beq	171d0 <__assert_fail@plt+0x5288>
   1702c:	ldrb	r3, [r5]
   17030:	mov	r4, r5
   17034:	add	r3, r6, r3
   17038:	ldrb	r3, [r3, #8]
   1703c:	cmp	r3, #0
   17040:	beq	17058 <__assert_fail@plt+0x5110>
   17044:	ldrb	r3, [r4, #1]!
   17048:	add	r3, r6, r3
   1704c:	ldrb	r3, [r3, #8]
   17050:	cmp	r3, #0
   17054:	bne	17044 <__assert_fail@plt+0x50fc>
   17058:	ldr	r8, [sp, #4]
   1705c:	ldrb	r3, [r8]
   17060:	add	r3, r6, r3
   17064:	ldrb	r3, [r3, #8]
   17068:	cmp	r3, #0
   1706c:	beq	177bc <__assert_fail@plt+0x5874>
   17070:	ldrb	r3, [r8, #1]!
   17074:	add	r3, r6, r3
   17078:	ldrb	r3, [r3, #8]
   1707c:	cmp	r3, #0
   17080:	bne	17070 <__assert_fail@plt+0x5128>
   17084:	mov	r0, r4
   17088:	bl	15078 <__assert_fail@plt+0x3130>
   1708c:	mov	sl, r0
   17090:	mov	r0, r8
   17094:	bl	15078 <__assert_fail@plt+0x3130>
   17098:	subs	r3, sl, r0
   1709c:	bne	16f5c <__assert_fail@plt+0x5014>
   170a0:	mov	r1, r8
   170a4:	mov	r0, r4
   170a8:	b	16f4c <__assert_fail@plt+0x5004>
   170ac:	ldrb	r3, [r2]
   170b0:	str	r8, [sp, #4]
   170b4:	str	r3, [sp, #20]
   170b8:	ldr	r3, [sp, #8]
   170bc:	strb	r3, [r2]
   170c0:	ldrb	r2, [sl]
   170c4:	strb	r3, [sl]
   170c8:	str	r2, [sp, #24]
   170cc:	b	16ee8 <__assert_fail@plt+0x4fa0>
   170d0:	ldr	r0, [sp, #28]
   170d4:	str	r3, [sp, #4]
   170d8:	bl	1afe8 <__assert_fail@plt+0x90a0>
   170dc:	ldr	r3, [sp, #4]
   170e0:	cmp	r3, #0
   170e4:	beq	16f84 <__assert_fail@plt+0x503c>
   170e8:	ldrb	r2, [r7, #31]
   170ec:	cmp	r2, #0
   170f0:	rsbne	r3, r3, #0
   170f4:	mov	r0, r3
   170f8:	add	sp, sp, #8384	; 0x20c0
   170fc:	add	sp, sp, #52	; 0x34
   17100:	vpop	{d8}
   17104:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17108:	ldrb	r3, [r7, #24]
   1710c:	cmp	r3, #0
   17110:	beq	16c74 <__assert_fail@plt+0x4d2c>
   17114:	cmp	fp, r5
   17118:	bls	1715c <__assert_fail@plt+0x5214>
   1711c:	ldrb	r3, [r5]
   17120:	add	r3, r6, r3
   17124:	ldrb	r3, [r3, #8]
   17128:	cmp	r3, #0
   1712c:	beq	1715c <__assert_fail@plt+0x5214>
   17130:	add	r3, r5, #1
   17134:	b	17150 <__assert_fail@plt+0x5208>
   17138:	ldrb	r2, [r3]
   1713c:	add	r3, r3, #1
   17140:	add	r2, r6, r2
   17144:	ldrb	r2, [r2, #8]
   17148:	cmp	r2, #0
   1714c:	beq	1715c <__assert_fail@plt+0x5214>
   17150:	cmp	r3, fp
   17154:	mov	r5, r3
   17158:	bne	17138 <__assert_fail@plt+0x51f0>
   1715c:	cmp	sl, r8
   17160:	bls	16c74 <__assert_fail@plt+0x4d2c>
   17164:	ldrb	r3, [r8]
   17168:	add	r3, r6, r3
   1716c:	ldrb	r3, [r3, #8]
   17170:	cmp	r3, #0
   17174:	addne	r3, r8, #1
   17178:	bne	17198 <__assert_fail@plt+0x5250>
   1717c:	b	16c74 <__assert_fail@plt+0x4d2c>
   17180:	ldrb	r2, [r3]
   17184:	add	r3, r3, #1
   17188:	add	r2, r6, r2
   1718c:	ldrb	r2, [r2, #8]
   17190:	cmp	r2, #0
   17194:	beq	16c74 <__assert_fail@plt+0x4d2c>
   17198:	cmp	sl, r3
   1719c:	mov	r8, r3
   171a0:	bne	17180 <__assert_fail@plt+0x5238>
   171a4:	b	16c74 <__assert_fail@plt+0x4d2c>
   171a8:	ldr	r1, [sp, #16]
   171ac:	ldr	r2, [r3, #4]
   171b0:	ldr	r5, [r3]
   171b4:	ldr	sl, [r1, #4]
   171b8:	ldr	r8, [r1]
   171bc:	sub	r2, r2, #1
   171c0:	sub	sl, sl, #1
   171c4:	add	fp, r5, r2
   171c8:	add	sl, r8, sl
   171cc:	b	16fd4 <__assert_fail@plt+0x508c>
   171d0:	ldrb	r4, [r7, #30]
   171d4:	cmp	r4, #0
   171d8:	bne	172a0 <__assert_fail@plt+0x5358>
   171dc:	ldrb	r3, [r7, #27]
   171e0:	cmp	r3, #0
   171e4:	bne	172e8 <__assert_fail@plt+0x53a0>
   171e8:	ldrb	r3, [r7, #32]
   171ec:	cmp	r3, #0
   171f0:	beq	172d4 <__assert_fail@plt+0x538c>
   171f4:	ldr	r1, [sp, #4]
   171f8:	mov	r0, r5
   171fc:	bl	1ac18 <__assert_fail@plt+0x8cd0>
   17200:	mov	r3, r0
   17204:	b	16f5c <__assert_fail@plt+0x5014>
   17208:	add	r1, sp, #84	; 0x54
   1720c:	mov	r0, r5
   17210:	bl	11b1c <strtold@plt>
   17214:	add	r1, sp, #88	; 0x58
   17218:	ldr	r0, [sp, #4]
   1721c:	vmov.f64	d8, d0
   17220:	bl	11b1c <strtold@plt>
   17224:	ldr	r3, [sp, #84]	; 0x54
   17228:	ldr	r2, [sp, #4]
   1722c:	cmp	r5, r3
   17230:	ldr	r3, [sp, #88]	; 0x58
   17234:	beq	177b0 <__assert_fail@plt+0x5868>
   17238:	cmp	r2, r3
   1723c:	beq	17278 <__assert_fail@plt+0x5330>
   17240:	vcmpe.f64	d8, d0
   17244:	vmrs	APSR_nzcv, fpscr
   17248:	bmi	17800 <__assert_fail@plt+0x58b8>
   1724c:	bgt	17278 <__assert_fail@plt+0x5330>
   17250:	vcmp.f64	d8, d0
   17254:	vmrs	APSR_nzcv, fpscr
   17258:	moveq	r3, r8
   1725c:	beq	16f5c <__assert_fail@plt+0x5014>
   17260:	vcmp.f64	d0, d0
   17264:	vmrs	APSR_nzcv, fpscr
   17268:	beq	17800 <__assert_fail@plt+0x58b8>
   1726c:	vcmp.f64	d8, d8
   17270:	vmrs	APSR_nzcv, fpscr
   17274:	bne	176b8 <__assert_fail@plt+0x5770>
   17278:	mov	r3, #1
   1727c:	b	16f5c <__assert_fail@plt+0x5014>
   17280:	str	r2, [sp, #32]
   17284:	str	r1, [sp, #4]
   17288:	bl	20048 <__assert_fail@plt+0xe100>
   1728c:	ldr	r1, [sp, #4]
   17290:	ldr	r2, [sp, #32]
   17294:	str	r0, [sp, #28]
   17298:	mov	ip, r0
   1729c:	b	16e2c <__assert_fail@plt+0x4ee4>
   172a0:	mov	r1, r8
   172a4:	mov	r0, r5
   172a8:	bl	150cc <__assert_fail@plt+0x3184>
   172ac:	mov	r1, r8
   172b0:	mov	r4, r0
   172b4:	ldr	r0, [sp, #4]
   172b8:	bl	150cc <__assert_fail@plt+0x3184>
   172bc:	sub	r3, r4, r0
   172c0:	b	16f5c <__assert_fail@plt+0x5014>
   172c4:	mov	r2, ip
   172c8:	b	16e84 <__assert_fail@plt+0x4f3c>
   172cc:	ldr	r1, [sp, #4]
   172d0:	b	16f4c <__assert_fail@plt+0x5004>
   172d4:	cmp	r9, #0
   172d8:	bne	175d4 <__assert_fail@plt+0x568c>
   172dc:	adds	r3, fp, #0
   172e0:	mvnne	r3, #0
   172e4:	b	16f5c <__assert_fail@plt+0x5014>
   172e8:	ldr	r8, [sp, #72]	; 0x48
   172ec:	mov	r2, #156	; 0x9c
   172f0:	ldr	r1, [pc, #1488]	; 178c8 <__assert_fail@plt+0x5980>
   172f4:	mov	r0, r8
   172f8:	bl	11ac8 <memcpy@plt>
   172fc:	mov	r2, #156	; 0x9c
   17300:	mov	r1, r8
   17304:	add	r0, sp, #120	; 0x78
   17308:	bl	11ac8 <memcpy@plt>
   1730c:	ldrb	sl, [r6, #1311]	; 0x51f
   17310:	cmp	sl, #0
   17314:	beq	175f8 <__assert_fail@plt+0x56b0>
   17318:	add	r3, r9, fp
   1731c:	add	r2, sp, #176	; 0xb0
   17320:	add	r3, r3, r3, lsl #1
   17324:	str	r2, [sp, #76]	; 0x4c
   17328:	add	r2, sp, #276	; 0x114
   1732c:	mov	r1, r4
   17330:	add	r3, r3, #2
   17334:	str	r2, [sp, #52]	; 0x34
   17338:	add	r2, r5, r9
   1733c:	str	r3, [sp, #48]	; 0x30
   17340:	str	r2, [sp, #40]	; 0x28
   17344:	mov	r3, r1
   17348:	ldr	r2, [sp, #4]
   1734c:	add	r1, sp, #4416	; 0x1140
   17350:	add	r1, r1, #16
   17354:	str	r4, [sp, #36]	; 0x24
   17358:	str	r1, [sp, #32]
   1735c:	str	fp, [sp, #68]	; 0x44
   17360:	add	r1, r2, fp
   17364:	mov	r4, #4000	; 0xfa0
   17368:	mov	sl, r2
   1736c:	mov	fp, r3
   17370:	str	r1, [sp, #44]	; 0x2c
   17374:	str	r7, [sp, #56]	; 0x38
   17378:	str	r5, [sp, #60]	; 0x3c
   1737c:	str	r9, [sp, #64]	; 0x40
   17380:	ldr	r3, [sp, #48]	; 0x30
   17384:	cmp	r4, r3
   17388:	bcc	1745c <__assert_fail@plt+0x5514>
   1738c:	ldr	r3, [sp, #40]	; 0x28
   17390:	cmp	r3, r5
   17394:	bhi	174a0 <__assert_fail@plt+0x5558>
   17398:	ldr	r3, [sp, #44]	; 0x2c
   1739c:	cmp	r3, sl
   173a0:	bhi	1777c <__assert_fail@plt+0x5834>
   173a4:	mov	r8, #0
   173a8:	mov	r7, r8
   173ac:	ldr	r3, [sp, #32]
   173b0:	add	r9, r3, r8
   173b4:	ldr	r3, [sp, #40]	; 0x28
   173b8:	cmp	r3, r5
   173bc:	bhi	17724 <__assert_fail@plt+0x57dc>
   173c0:	ldr	r3, [sp, #44]	; 0x2c
   173c4:	cmp	r3, sl
   173c8:	bls	17898 <__assert_fail@plt+0x5950>
   173cc:	mov	r0, sl
   173d0:	bl	11d50 <strlen@plt>
   173d4:	add	r0, r0, #1
   173d8:	add	sl, sl, r0
   173dc:	ldr	r3, [sp, #40]	; 0x28
   173e0:	ldr	r2, [sp, #44]	; 0x2c
   173e4:	cmp	r3, r5
   173e8:	cmpls	r2, sl
   173ec:	bls	17898 <__assert_fail@plt+0x5950>
   173f0:	add	r2, sp, #120	; 0x78
   173f4:	mov	r1, r8
   173f8:	ldr	r0, [sp, #32]
   173fc:	bl	1a794 <__assert_fail@plt+0x884c>
   17400:	ldr	r2, [sp, #52]	; 0x34
   17404:	mov	r1, r7
   17408:	mov	r0, r9
   1740c:	bl	1a794 <__assert_fail@plt+0x884c>
   17410:	cmp	fp, #0
   17414:	bne	17380 <__assert_fail@plt+0x5438>
   17418:	cmp	r7, r8
   1741c:	movcc	r2, r7
   17420:	movcs	r2, r8
   17424:	mov	r1, r9
   17428:	ldr	r0, [sp, #32]
   1742c:	bl	11b40 <memcmp@plt>
   17430:	subs	fp, r0, #0
   17434:	bne	17380 <__assert_fail@plt+0x5438>
   17438:	cmp	r7, r8
   1743c:	ldr	r3, [sp, #48]	; 0x30
   17440:	movls	fp, #0
   17444:	movhi	fp, #1
   17448:	cmp	r7, r8
   1744c:	rsbcs	fp, fp, #0
   17450:	rsbcc	fp, fp, #1
   17454:	cmp	r4, r3
   17458:	bcs	1738c <__assert_fail@plt+0x5444>
   1745c:	add	r4, r4, r4, lsl #1
   17460:	ldr	r0, [sp, #36]	; 0x24
   17464:	lsr	r4, r4, #1
   17468:	cmp	r4, r3
   1746c:	movcc	r4, r3
   17470:	bl	1afe8 <__assert_fail@plt+0x90a0>
   17474:	mov	r0, r4
   17478:	bl	20f18 <__assert_fail@plt+0xefd0>
   1747c:	subs	r3, r0, #0
   17480:	str	r3, [sp, #36]	; 0x24
   17484:	addeq	r3, sp, #4416	; 0x1140
   17488:	addeq	r3, r3, #16
   1748c:	str	r3, [sp, #32]
   17490:	ldr	r3, [sp, #40]	; 0x28
   17494:	moveq	r4, #4000	; 0xfa0
   17498:	cmp	r3, r5
   1749c:	bls	17398 <__assert_fail@plt+0x5450>
   174a0:	mov	r2, r4
   174a4:	mov	r1, r5
   174a8:	ldr	r0, [sp, #32]
   174ac:	bl	15844 <__assert_fail@plt+0x38fc>
   174b0:	ldr	r3, [sp, #44]	; 0x2c
   174b4:	cmp	r3, sl
   174b8:	movls	r7, #0
   174bc:	add	r8, r0, #1
   174c0:	bls	174e0 <__assert_fail@plt+0x5598>
   174c4:	cmp	r4, r8
   174c8:	bcs	178b8 <__assert_fail@plt+0x5970>
   174cc:	mov	r0, #0
   174d0:	mov	r2, r0
   174d4:	mov	r1, sl
   174d8:	bl	15844 <__assert_fail@plt+0x38fc>
   174dc:	add	r7, r0, #1
   174e0:	cmp	r4, r8
   174e4:	bcs	177ec <__assert_fail@plt+0x58a4>
   174e8:	add	r4, r7, r8
   174ec:	ldr	r3, [pc, #984]	; 178cc <__assert_fail@plt+0x5984>
   174f0:	ldr	r0, [sp, #36]	; 0x24
   174f4:	cmp	r4, r3
   174f8:	addls	r4, r4, r4, lsl #1
   174fc:	lsrls	r4, r4, #1
   17500:	bl	1afe8 <__assert_fail@plt+0x90a0>
   17504:	mov	r0, r4
   17508:	bl	20048 <__assert_fail@plt+0xe100>
   1750c:	ldr	r3, [sp, #40]	; 0x28
   17510:	cmp	r3, r5
   17514:	str	r0, [sp, #36]	; 0x24
   17518:	bhi	17744 <__assert_fail@plt+0x57fc>
   1751c:	ldr	r3, [sp, #44]	; 0x2c
   17520:	cmp	r3, sl
   17524:	bhi	1778c <__assert_fail@plt+0x5844>
   17528:	ldr	r2, [sp, #36]	; 0x24
   1752c:	str	r7, [sp, #40]	; 0x28
   17530:	mov	r3, fp
   17534:	ldr	r5, [sp, #60]	; 0x3c
   17538:	ldr	r9, [sp, #64]	; 0x40
   1753c:	ldr	r7, [sp, #56]	; 0x38
   17540:	ldr	fp, [sp, #68]	; 0x44
   17544:	add	r1, r2, r8
   17548:	str	r1, [sp, #44]	; 0x2c
   1754c:	str	r2, [sp, #32]
   17550:	str	r3, [sp, #48]	; 0x30
   17554:	ldr	r3, [sp, #76]	; 0x4c
   17558:	add	r2, sp, #120	; 0x78
   1755c:	mov	r1, r8
   17560:	ldr	r0, [sp, #32]
   17564:	add	sl, r3, #100	; 0x64
   17568:	bl	1a794 <__assert_fail@plt+0x884c>
   1756c:	add	r1, sp, #88	; 0x58
   17570:	add	r0, sp, #120	; 0x78
   17574:	bl	1a6ec <__assert_fail@plt+0x87a4>
   17578:	add	r4, sp, #104	; 0x68
   1757c:	mov	r2, sl
   17580:	ldr	r1, [sp, #40]	; 0x28
   17584:	ldr	r0, [sp, #44]	; 0x2c
   17588:	bl	1a794 <__assert_fail@plt+0x884c>
   1758c:	mov	r1, r4
   17590:	mov	r0, sl
   17594:	bl	1a6ec <__assert_fail@plt+0x87a4>
   17598:	mov	r1, r4
   1759c:	add	r0, sp, #88	; 0x58
   175a0:	mov	r2, #16
   175a4:	bl	11b40 <memcmp@plt>
   175a8:	ldr	r3, [sp, #48]	; 0x30
   175ac:	cmp	r0, #0
   175b0:	movne	r3, r0
   175b4:	bne	175c0 <__assert_fail@plt+0x5678>
   175b8:	cmp	r3, #0
   175bc:	beq	177e0 <__assert_fail@plt+0x5898>
   175c0:	ldr	r0, [sp, #36]	; 0x24
   175c4:	str	r3, [sp, #32]
   175c8:	bl	1afe8 <__assert_fail@plt+0x90a0>
   175cc:	ldr	r3, [sp, #32]
   175d0:	b	16f5c <__assert_fail@plt+0x5014>
   175d4:	cmp	fp, #0
   175d8:	beq	17278 <__assert_fail@plt+0x5330>
   175dc:	add	r3, fp, #1
   175e0:	ldr	r2, [sp, #4]
   175e4:	add	r1, r9, #1
   175e8:	mov	r0, r5
   175ec:	bl	206ec <__assert_fail@plt+0xe7a4>
   175f0:	mov	r3, r0
   175f4:	b	16f5c <__assert_fail@plt+0x5014>
   175f8:	add	r4, sp, #120	; 0x78
   175fc:	mov	r2, r4
   17600:	mov	r1, r9
   17604:	mov	r0, r5
   17608:	bl	1a794 <__assert_fail@plt+0x884c>
   1760c:	add	r8, sp, #276	; 0x114
   17610:	mov	r0, r4
   17614:	add	r1, sp, #88	; 0x58
   17618:	bl	1a6ec <__assert_fail@plt+0x87a4>
   1761c:	add	r4, sp, #104	; 0x68
   17620:	mov	r2, r8
   17624:	mov	r1, fp
   17628:	ldr	r0, [sp, #4]
   1762c:	bl	1a794 <__assert_fail@plt+0x884c>
   17630:	mov	r1, r4
   17634:	mov	r0, r8
   17638:	bl	1a6ec <__assert_fail@plt+0x87a4>
   1763c:	mov	r1, r4
   17640:	add	r0, sp, #88	; 0x58
   17644:	mov	r2, #16
   17648:	bl	11b40 <memcmp@plt>
   1764c:	subs	r3, r0, #0
   17650:	strne	sl, [sp, #36]	; 0x24
   17654:	bne	175c0 <__assert_fail@plt+0x5678>
   17658:	ldr	r1, [sp, #4]
   1765c:	mov	r8, r9
   17660:	mov	r0, r5
   17664:	str	r3, [sp, #36]	; 0x24
   17668:	str	fp, [sp, #40]	; 0x28
   1766c:	ldr	r4, [sp, #40]	; 0x28
   17670:	cmp	r8, r4
   17674:	movcc	r2, r8
   17678:	movcs	r2, r4
   1767c:	bl	11b40 <memcmp@plt>
   17680:	subs	r3, r0, #0
   17684:	bne	175c0 <__assert_fail@plt+0x5678>
   17688:	cmp	r8, r4
   1768c:	mov	r3, r4
   17690:	movcs	r3, #0
   17694:	movcc	r3, #1
   17698:	cmp	r8, r4
   1769c:	rsbls	r3, r3, #0
   176a0:	rsbhi	r3, r3, #1
   176a4:	ldr	r0, [sp, #36]	; 0x24
   176a8:	str	r3, [sp, #32]
   176ac:	bl	1afe8 <__assert_fail@plt+0x90a0>
   176b0:	ldr	r3, [sp, #32]
   176b4:	b	16f5c <__assert_fail@plt+0x5014>
   176b8:	add	r3, sp, #176	; 0xb0
   176bc:	mov	r1, r8
   176c0:	mov	r0, r5
   176c4:	mov	sl, r3
   176c8:	str	r8, [sp, #120]	; 0x78
   176cc:	str	r8, [sp, #124]	; 0x7c
   176d0:	bl	11b1c <strtold@plt>
   176d4:	add	r3, sp, #4416	; 0x1140
   176d8:	add	r3, r3, #16
   176dc:	str	r8, [r3]
   176e0:	add	r3, sp, #4416	; 0x1140
   176e4:	add	r3, r3, #20
   176e8:	mov	r1, r8
   176ec:	str	r8, [r3]
   176f0:	ldr	r0, [sp, #4]
   176f4:	add	r8, sp, #4416	; 0x1140
   176f8:	add	r8, r8, #16
   176fc:	add	r4, sp, #120	; 0x78
   17700:	vstr	d0, [sl, #-56]	; 0xffffffc8
   17704:	bl	11b1c <strtold@plt>
   17708:	mov	r0, r4
   1770c:	mov	r1, r8
   17710:	mov	r2, #8
   17714:	vstr	d0, [r8]
   17718:	bl	11b40 <memcmp@plt>
   1771c:	mov	r3, r0
   17720:	b	16f5c <__assert_fail@plt+0x5014>
   17724:	mov	r0, r5
   17728:	bl	11d50 <strlen@plt>
   1772c:	ldr	r3, [sp, #44]	; 0x2c
   17730:	cmp	r3, sl
   17734:	add	r0, r0, #1
   17738:	add	r5, r5, r0
   1773c:	bls	173dc <__assert_fail@plt+0x5494>
   17740:	b	173cc <__assert_fail@plt+0x5484>
   17744:	mov	r2, r8
   17748:	mov	r1, r5
   1774c:	bl	11d68 <strxfrm@plt>
   17750:	ldr	r3, [sp, #44]	; 0x2c
   17754:	cmp	r3, sl
   17758:	bhi	1778c <__assert_fail@plt+0x5844>
   1775c:	mov	r0, r5
   17760:	bl	11d50 <strlen@plt>
   17764:	ldr	r3, [sp, #36]	; 0x24
   17768:	add	r9, r3, r8
   1776c:	str	r3, [sp, #32]
   17770:	add	r0, r0, #1
   17774:	add	r5, r5, r0
   17778:	b	173dc <__assert_fail@plt+0x5494>
   1777c:	ldr	r0, [sp, #32]
   17780:	mov	r8, #0
   17784:	sub	r2, r4, r8
   17788:	b	174d4 <__assert_fail@plt+0x558c>
   1778c:	ldr	r3, [sp, #36]	; 0x24
   17790:	mov	r2, r7
   17794:	add	r9, r3, r8
   17798:	mov	r0, r9
   1779c:	mov	r1, sl
   177a0:	bl	11d68 <strxfrm@plt>
   177a4:	ldr	r3, [sp, #36]	; 0x24
   177a8:	str	r3, [sp, #32]
   177ac:	b	173b4 <__assert_fail@plt+0x546c>
   177b0:	subs	r3, r3, r2
   177b4:	mvnne	r3, #0
   177b8:	b	16f5c <__assert_fail@plt+0x5014>
   177bc:	ldr	r8, [sp, #4]
   177c0:	b	17084 <__assert_fail@plt+0x513c>
   177c4:	cmp	sl, r8
   177c8:	movls	r3, #0
   177cc:	movhi	r3, #1
   177d0:	cmp	r2, r5
   177d4:	rsbls	r3, r3, #0
   177d8:	rsbhi	r3, r3, #1
   177dc:	b	16f7c <__assert_fail@plt+0x5034>
   177e0:	ldr	r1, [sp, #44]	; 0x2c
   177e4:	ldr	r0, [sp, #32]
   177e8:	b	1766c <__assert_fail@plt+0x5724>
   177ec:	add	r3, r7, r8
   177f0:	cmp	r4, r3
   177f4:	bcs	173ac <__assert_fail@plt+0x5464>
   177f8:	mov	r4, r3
   177fc:	b	174ec <__assert_fail@plt+0x55a4>
   17800:	mvn	r3, #0
   17804:	b	16f5c <__assert_fail@plt+0x5014>
   17808:	cmp	r9, #0
   1780c:	bne	1781c <__assert_fail@plt+0x58d4>
   17810:	adds	r3, fp, #0
   17814:	mvnne	r3, #0
   17818:	b	16f7c <__assert_fail@plt+0x5034>
   1781c:	cmp	fp, #0
   17820:	beq	17890 <__assert_fail@plt+0x5948>
   17824:	cmp	r1, #0
   17828:	bne	17878 <__assert_fail@plt+0x5930>
   1782c:	cmp	r9, fp
   17830:	movcc	r2, r9
   17834:	movcs	r2, fp
   17838:	mov	r1, r8
   1783c:	mov	r0, r5
   17840:	bl	11b40 <memcmp@plt>
   17844:	subs	r3, r0, #0
   17848:	bne	170e8 <__assert_fail@plt+0x51a0>
   1784c:	cmp	r9, fp
   17850:	bcc	17888 <__assert_fail@plt+0x5940>
   17854:	movne	r3, #1
   17858:	moveq	r3, #0
   1785c:	b	16f7c <__assert_fail@plt+0x5034>
   17860:	ldrb	r3, [r5], #1
   17864:	ldrb	r0, [r8], #1
   17868:	ldrb	r3, [r1, r3]
   1786c:	ldrb	r0, [r1, r0]
   17870:	subs	r3, r3, r0
   17874:	bne	170e8 <__assert_fail@plt+0x51a0>
   17878:	cmp	r5, r2
   1787c:	cmpcc	r8, sl
   17880:	bcc	17860 <__assert_fail@plt+0x5918>
   17884:	b	1784c <__assert_fail@plt+0x5904>
   17888:	mvn	r3, #0
   1788c:	b	170e8 <__assert_fail@plt+0x51a0>
   17890:	mov	r3, #1
   17894:	b	170e8 <__assert_fail@plt+0x51a0>
   17898:	str	r7, [sp, #40]	; 0x28
   1789c:	str	r9, [sp, #44]	; 0x2c
   178a0:	mov	r3, fp
   178a4:	ldr	r5, [sp, #60]	; 0x3c
   178a8:	ldr	r7, [sp, #56]	; 0x38
   178ac:	ldr	r9, [sp, #64]	; 0x40
   178b0:	ldr	fp, [sp, #68]	; 0x44
   178b4:	b	17550 <__assert_fail@plt+0x5608>
   178b8:	ldr	r3, [sp, #32]
   178bc:	add	r0, r3, r8
   178c0:	b	17784 <__assert_fail@plt+0x583c>
   178c4:	andeq	r5, r3, r0, ror #5
   178c8:	andeq	r5, r3, r0, lsl #16
   178cc:	ldrbpl	r5, [r5, #-1364]	; 0xfffffaac
   178d0:	push	{r4, r5, r6, r7, r8, lr}
   178d4:	mov	r5, r0
   178d8:	ldr	r4, [pc, #192]	; 179a0 <__assert_fail@plt+0x5a58>
   178dc:	mov	r6, r1
   178e0:	ldr	r3, [r4, #1176]	; 0x498
   178e4:	cmp	r3, #0
   178e8:	beq	17910 <__assert_fail@plt+0x59c8>
   178ec:	bl	16c38 <__assert_fail@plt+0x4cf0>
   178f0:	cmp	r0, #0
   178f4:	popne	{r4, r5, r6, r7, r8, pc}
   178f8:	ldrb	r3, [r4, #1309]	; 0x51d
   178fc:	cmp	r3, #0
   17900:	popne	{r4, r5, r6, r7, r8, pc}
   17904:	ldrb	r3, [r4, #1310]	; 0x51e
   17908:	cmp	r3, #0
   1790c:	bne	1798c <__assert_fail@plt+0x5a44>
   17910:	ldr	r1, [r5, #4]
   17914:	ldr	r3, [r6, #4]
   17918:	subs	r8, r1, #1
   1791c:	sub	r7, r3, #1
   17920:	bne	1793c <__assert_fail@plt+0x59f4>
   17924:	adds	r0, r7, #0
   17928:	mvnne	r0, #0
   1792c:	ldrb	r3, [r4, #1468]	; 0x5bc
   17930:	cmp	r3, #0
   17934:	rsbne	r0, r0, #0
   17938:	pop	{r4, r5, r6, r7, r8, pc}
   1793c:	cmp	r7, #0
   17940:	moveq	r0, #1
   17944:	beq	1792c <__assert_fail@plt+0x59e4>
   17948:	ldrb	r2, [r4, #1311]	; 0x51f
   1794c:	cmp	r2, #0
   17950:	bne	17990 <__assert_fail@plt+0x5a48>
   17954:	cmp	r8, r7
   17958:	movcc	r2, r8
   1795c:	movcs	r2, r7
   17960:	ldr	r1, [r6]
   17964:	ldr	r0, [r5]
   17968:	bl	11b40 <memcmp@plt>
   1796c:	cmp	r0, #0
   17970:	bne	1792c <__assert_fail@plt+0x59e4>
   17974:	cmp	r8, r7
   17978:	mvncc	r0, #0
   1797c:	bcc	1792c <__assert_fail@plt+0x59e4>
   17980:	movne	r0, #1
   17984:	moveq	r0, #0
   17988:	b	1792c <__assert_fail@plt+0x59e4>
   1798c:	pop	{r4, r5, r6, r7, r8, pc}
   17990:	ldr	r2, [r6]
   17994:	ldr	r0, [r5]
   17998:	bl	206ec <__assert_fail@plt+0xe7a4>
   1799c:	b	1792c <__assert_fail@plt+0x59e4>
   179a0:	andeq	r5, r3, r0, ror #5
   179a4:	cmp	r1, #2
   179a8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   179ac:	mov	r4, r0
   179b0:	mov	r6, r2
   179b4:	mov	r5, r3
   179b8:	beq	17af4 <__assert_fail@plt+0x5bac>
   179bc:	lsr	r7, r1, #1
   179c0:	cmp	r3, #0
   179c4:	lsl	r5, r7, #4
   179c8:	rsb	r5, r5, #0
   179cc:	sub	r8, r1, r7
   179d0:	add	r9, r0, r5
   179d4:	bne	17a60 <__assert_fail@plt+0x5b18>
   179d8:	mov	r1, r8
   179dc:	mov	r0, r9
   179e0:	bl	179a4 <__assert_fail@plt+0x5a5c>
   179e4:	cmp	r7, #1
   179e8:	bls	17ae0 <__assert_fail@plt+0x5b98>
   179ec:	mov	r3, #1
   179f0:	mov	r2, r6
   179f4:	mov	r1, r7
   179f8:	mov	r0, r4
   179fc:	bl	179a4 <__assert_fail@plt+0x5a5c>
   17a00:	mov	r5, r9
   17a04:	mov	r9, r6
   17a08:	sub	r4, r4, #16
   17a0c:	sub	r5, r5, #16
   17a10:	sub	r6, r9, #16
   17a14:	b	17a30 <__assert_fail@plt+0x5ae8>
   17a18:	ldm	r5, {r0, r1, r2, r3}
   17a1c:	subs	r8, r8, #1
   17a20:	sub	r5, r5, #16
   17a24:	stm	r4, {r0, r1, r2, r3}
   17a28:	beq	17aa8 <__assert_fail@plt+0x5b60>
   17a2c:	sub	r4, r4, #16
   17a30:	mov	r1, r5
   17a34:	mov	r0, r6
   17a38:	bl	178d0 <__assert_fail@plt+0x5988>
   17a3c:	cmp	r0, #0
   17a40:	bgt	17a18 <__assert_fail@plt+0x5ad0>
   17a44:	ldm	r6, {r0, r1, r2, r3}
   17a48:	subs	r7, r7, #1
   17a4c:	mov	r9, r6
   17a50:	sub	r6, r6, #16
   17a54:	stm	r4, {r0, r1, r2, r3}
   17a58:	bne	17a2c <__assert_fail@plt+0x5ae4>
   17a5c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17a60:	add	r5, r2, r5
   17a64:	mov	r0, r9
   17a68:	mov	r2, r5
   17a6c:	mov	r3, #1
   17a70:	mov	r1, r8
   17a74:	bl	179a4 <__assert_fail@plt+0x5a5c>
   17a78:	cmp	r7, #1
   17a7c:	movls	r9, r4
   17a80:	movls	r4, r6
   17a84:	bls	17a08 <__assert_fail@plt+0x5ac0>
   17a88:	mov	r0, r4
   17a8c:	mov	r3, #0
   17a90:	mov	r2, r6
   17a94:	mov	r1, r7
   17a98:	mov	r9, r4
   17a9c:	bl	179a4 <__assert_fail@plt+0x5a5c>
   17aa0:	mov	r4, r6
   17aa4:	b	17a08 <__assert_fail@plt+0x5ac0>
   17aa8:	rsb	r3, r7, r7, lsl #28
   17aac:	sub	r7, r7, #1
   17ab0:	lsl	r3, r3, #4
   17ab4:	add	r9, r9, r3
   17ab8:	add	r4, r4, r3
   17abc:	lsl	ip, r7, #4
   17ac0:	add	r3, r9, ip
   17ac4:	sub	r7, r7, #1
   17ac8:	ldm	r3, {r0, r1, r2, r3}
   17acc:	add	ip, r4, ip
   17ad0:	cmn	r7, #1
   17ad4:	stm	ip, {r0, r1, r2, r3}
   17ad8:	bne	17abc <__assert_fail@plt+0x5b74>
   17adc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17ae0:	ldmdb	r4, {r0, r1, r2, r3}
   17ae4:	mov	r5, r9
   17ae8:	mov	r9, r6
   17aec:	stmdb	r6, {r0, r1, r2, r3}
   17af0:	b	17a08 <__assert_fail@plt+0x5ac0>
   17af4:	sub	r7, r0, #32
   17af8:	sub	r8, r0, #16
   17afc:	mov	r1, r7
   17b00:	mov	r0, r8
   17b04:	bl	178d0 <__assert_fail@plt+0x5988>
   17b08:	cmp	r5, #0
   17b0c:	bne	17b38 <__assert_fail@plt+0x5bf0>
   17b10:	cmp	r0, #0
   17b14:	pople	{r4, r5, r6, r7, r8, r9, sl, pc}
   17b18:	ldm	r8, {r0, r1, r2, r3}
   17b1c:	sub	r6, r6, #16
   17b20:	stm	r6, {r0, r1, r2, r3}
   17b24:	ldm	r7, {r0, r1, r2, r3}
   17b28:	stm	r8, {r0, r1, r2, r3}
   17b2c:	ldm	r6, {r0, r1, r2, r3}
   17b30:	stm	r7, {r0, r1, r2, r3}
   17b34:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17b38:	cmp	r0, #0
   17b3c:	movle	r0, #0
   17b40:	movgt	r0, #1
   17b44:	mvn	r3, r0
   17b48:	sub	r0, r0, #2
   17b4c:	add	r3, r4, r3, lsl #4
   17b50:	add	r4, r4, r0, lsl #4
   17b54:	ldm	r3, {r0, r1, r2, r3}
   17b58:	sub	ip, r6, #32
   17b5c:	stmdb	r6, {r0, r1, r2, r3}
   17b60:	ldm	r4, {r0, r1, r2, r3}
   17b64:	stm	ip, {r0, r1, r2, r3}
   17b68:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17b6c:	ldr	r3, [pc, #88]	; 17bcc <__assert_fail@plt+0x5c84>
   17b70:	push	{r4, r5, r6, r7, r8, lr}
   17b74:	mov	r7, r2
   17b78:	ldrb	r2, [r3, #1309]	; 0x51d
   17b7c:	mov	r6, r1
   17b80:	mov	r5, r0
   17b84:	cmp	r2, #0
   17b88:	beq	17bb4 <__assert_fail@plt+0x5c6c>
   17b8c:	ldr	r2, [r3, #1472]	; 0x5c0
   17b90:	add	r4, r3, #1472	; 0x5c0
   17b94:	cmp	r2, #0
   17b98:	beq	17bac <__assert_fail@plt+0x5c64>
   17b9c:	mov	r1, r4
   17ba0:	bl	178d0 <__assert_fail@plt+0x5988>
   17ba4:	cmp	r0, #0
   17ba8:	beq	17bc8 <__assert_fail@plt+0x5c80>
   17bac:	ldm	r5, {r0, r1, r2, r3}
   17bb0:	stm	r4, {r0, r1, r2, r3}
   17bb4:	mov	r2, r7
   17bb8:	mov	r1, r6
   17bbc:	mov	r0, r5
   17bc0:	pop	{r4, r5, r6, r7, r8, lr}
   17bc4:	b	16800 <__assert_fail@plt+0x48b8>
   17bc8:	pop	{r4, r5, r6, r7, r8, pc}
   17bcc:	andeq	r5, r3, r0, ror #5
   17bd0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17bd4:	sub	sp, sp, #68	; 0x44
   17bd8:	mov	r6, r2
   17bdc:	str	r0, [sp, #4]
   17be0:	str	r1, [sp, #28]
   17be4:	mov	r0, r2
   17be8:	mov	r1, #28
   17bec:	str	r3, [sp, #36]	; 0x24
   17bf0:	bl	20130 <__assert_fail@plt+0xe1e8>
   17bf4:	mov	r1, #4
   17bf8:	mov	r7, #0
   17bfc:	str	r0, [sp, #8]
   17c00:	mov	r0, r6
   17c04:	bl	20130 <__assert_fail@plt+0xe1e8>
   17c08:	mov	r1, #4
   17c0c:	str	r0, [sp, #20]
   17c10:	mov	r0, r6
   17c14:	bl	20130 <__assert_fail@plt+0xe1e8>
   17c18:	mov	r1, #4
   17c1c:	str	r0, [sp, #12]
   17c20:	mov	r0, r6
   17c24:	bl	20130 <__assert_fail@plt+0xe1e8>
   17c28:	ldr	r3, [pc, #1572]	; 18254 <__assert_fail@plt+0x630c>
   17c2c:	cmp	r6, #0
   17c30:	str	r7, [sp, #48]	; 0x30
   17c34:	ldr	r3, [r3, #1176]	; 0x498
   17c38:	str	r3, [sp, #44]	; 0x2c
   17c3c:	mov	fp, r0
   17c40:	beq	17dac <__assert_fail@plt+0x5e64>
   17c44:	ldr	fp, [sp, #108]	; 0x6c
   17c48:	mov	sl, r7
   17c4c:	mov	r8, r7
   17c50:	str	r0, [sp, #24]
   17c54:	ldr	r3, [pc, #1528]	; 18254 <__assert_fail@plt+0x630c>
   17c58:	mov	r1, r6
   17c5c:	sub	r5, sl, r7
   17c60:	ldr	r0, [r3, #1488]	; 0x5d0
   17c64:	bl	21958 <_obstack_memory_used@@Base+0x8c>
   17c68:	ldr	r3, [pc, #1512]	; 18258 <__assert_fail@plt+0x6310>
   17c6c:	add	ip, fp, r8
   17c70:	mov	r1, #16
   17c74:	ldr	r2, [r3, #104]	; 0x68
   17c78:	ldr	r3, [sp, #8]
   17c7c:	str	ip, [sp, #16]
   17c80:	add	r9, r3, r5, lsl #2
   17c84:	ldr	r3, [sp, #4]
   17c88:	add	r4, r3, sl
   17c8c:	cmp	r0, r2
   17c90:	movcs	r2, r0
   17c94:	mov	r0, r9
   17c98:	bl	157a8 <__assert_fail@plt+0x3860>
   17c9c:	ldr	r3, [sp, #4]
   17ca0:	mov	r0, r9
   17ca4:	ldr	r1, [fp, r8]
   17ca8:	ldr	r2, [r3, sl]
   17cac:	bl	15fac <__assert_fail@plt+0x4064>
   17cb0:	cmp	r0, #0
   17cb4:	beq	17cfc <__assert_fail@plt+0x5db4>
   17cb8:	ldr	r3, [sp, #8]
   17cbc:	ldr	r1, [r9, #12]
   17cc0:	ldr	r2, [r9, #8]
   17cc4:	ldr	r3, [r3, r5, lsl #2]
   17cc8:	add	r7, r7, #1
   17ccc:	add	r3, r3, r1
   17cd0:	ldr	r1, [sp, #12]
   17cd4:	sub	r2, r3, r2, lsl #4
   17cd8:	cmp	r7, r6
   17cdc:	str	r2, [r1, r8]
   17ce0:	ldr	r2, [sp, #20]
   17ce4:	sub	r3, r3, #16
   17ce8:	str	r3, [r2, r8]
   17cec:	bcs	17dfc <__assert_fail@plt+0x5eb4>
   17cf0:	lsl	sl, r7, #3
   17cf4:	lsl	r8, r7, #2
   17cf8:	b	17c54 <__assert_fail@plt+0x5d0c>
   17cfc:	ldr	r3, [sp, #4]
   17d00:	ldr	r0, [fp, r8]
   17d04:	ldr	r1, [r3, sl]
   17d08:	bl	1677c <__assert_fail@plt+0x4834>
   17d0c:	ldr	r3, [sp, #28]
   17d10:	cmp	r7, r3
   17d14:	bcc	17de8 <__assert_fail@plt+0x5ea0>
   17d18:	ldr	r3, [sp, #8]
   17d1c:	ldr	r0, [r3, r5, lsl #2]
   17d20:	bl	1afe8 <__assert_fail@plt+0x90a0>
   17d24:	sub	r2, r6, #1
   17d28:	cmp	r2, r7
   17d2c:	bls	1823c <__assert_fail@plt+0x62f4>
   17d30:	sub	r6, r6, #-1073741823	; 0xc0000001
   17d34:	ldr	r5, [sp, #16]
   17d38:	add	r6, fp, r6, lsl #2
   17d3c:	add	r3, r4, #8
   17d40:	ldr	ip, [r5, #4]
   17d44:	ldm	r3, {r0, r1}
   17d48:	stm	r4, {r0, r1}
   17d4c:	str	ip, [r5], #4
   17d50:	cmp	r6, r5
   17d54:	mov	r4, r3
   17d58:	bne	17d3c <__assert_fail@plt+0x5df4>
   17d5c:	mov	r6, r2
   17d60:	b	17c54 <__assert_fail@plt+0x5d0c>
   17d64:	ldr	r3, [sp, #16]
   17d68:	str	r8, [fp]
   17d6c:	cmp	r3, #0
   17d70:	bne	17e8c <__assert_fail@plt+0x5f44>
   17d74:	ldr	r3, [pc, #1240]	; 18254 <__assert_fail@plt+0x630c>
   17d78:	ldr	r2, [sp, #24]
   17d7c:	ldrb	r3, [r3, #1309]	; 0x51d
   17d80:	cmp	r2, #0
   17d84:	moveq	r3, #0
   17d88:	andne	r3, r3, #1
   17d8c:	cmp	r3, #0
   17d90:	beq	17dac <__assert_fail@plt+0x5e64>
   17d94:	add	r0, sp, #48	; 0x30
   17d98:	ldr	r2, [sp, #104]	; 0x68
   17d9c:	ldr	r1, [sp, #36]	; 0x24
   17da0:	bl	16800 <__assert_fail@plt+0x48b8>
   17da4:	ldr	r0, [sp, #48]	; 0x30
   17da8:	bl	1afe8 <__assert_fail@plt+0x90a0>
   17dac:	ldr	r1, [sp, #104]	; 0x68
   17db0:	ldr	r0, [sp, #36]	; 0x24
   17db4:	bl	1677c <__assert_fail@plt+0x4834>
   17db8:	ldr	r0, [sp, #108]	; 0x6c
   17dbc:	bl	1afe8 <__assert_fail@plt+0x90a0>
   17dc0:	ldr	r0, [sp, #8]
   17dc4:	bl	1afe8 <__assert_fail@plt+0x90a0>
   17dc8:	mov	r0, fp
   17dcc:	bl	1afe8 <__assert_fail@plt+0x90a0>
   17dd0:	ldr	r0, [sp, #12]
   17dd4:	bl	1afe8 <__assert_fail@plt+0x90a0>
   17dd8:	ldr	r0, [sp, #20]
   17ddc:	bl	1afe8 <__assert_fail@plt+0x90a0>
   17de0:	add	sp, sp, #68	; 0x44
   17de4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17de8:	sub	r3, r3, #1
   17dec:	ldr	r0, [r4]
   17df0:	str	r3, [sp, #28]
   17df4:	bl	163a0 <__assert_fail@plt+0x4458>
   17df8:	b	17d18 <__assert_fail@plt+0x5dd0>
   17dfc:	ldr	fp, [sp, #24]
   17e00:	cmp	r6, #0
   17e04:	beq	17dac <__assert_fail@plt+0x5e64>
   17e08:	sub	r3, fp, #4
   17e0c:	mov	r7, #0
   17e10:	str	r7, [r3, #4]!
   17e14:	add	r7, r7, #1
   17e18:	cmp	r7, r6
   17e1c:	bne	17e10 <__assert_fail@plt+0x5ec8>
   17e20:	cmp	r7, #1
   17e24:	beq	17e78 <__assert_fail@plt+0x5f30>
   17e28:	ldr	r8, [sp, #20]
   17e2c:	mov	r4, #1
   17e30:	sub	r6, r4, #-1073741823	; 0xc0000001
   17e34:	lsl	r5, r4, #2
   17e38:	ldr	r2, [fp, r6, lsl #2]
   17e3c:	ldr	r3, [fp, r5]
   17e40:	ldr	r0, [r8, r2, lsl #2]
   17e44:	ldr	r1, [r8, r3, lsl #2]
   17e48:	bl	178d0 <__assert_fail@plt+0x5988>
   17e4c:	cmp	r0, #0
   17e50:	ble	17e6c <__assert_fail@plt+0x5f24>
   17e54:	ldr	r3, [fp, r6, lsl #2]
   17e58:	ldr	r2, [fp, r5]
   17e5c:	mov	r4, #1
   17e60:	str	r2, [fp, r6, lsl #2]
   17e64:	str	r3, [fp, r5]
   17e68:	b	17e30 <__assert_fail@plt+0x5ee8>
   17e6c:	add	r4, r4, #1
   17e70:	cmp	r7, r4
   17e74:	bhi	17e30 <__assert_fail@plt+0x5ee8>
   17e78:	str	r7, [sp, #16]
   17e7c:	ldr	r7, [sp, #20]
   17e80:	mov	r3, #0
   17e84:	str	r3, [sp, #40]	; 0x28
   17e88:	str	r3, [sp, #24]
   17e8c:	ldr	r3, [pc, #960]	; 18254 <__assert_fail@plt+0x630c>
   17e90:	ldrb	r2, [r3, #1309]	; 0x51d
   17e94:	ldr	r3, [fp]
   17e98:	cmp	r2, #0
   17e9c:	ldr	r4, [r7, r3, lsl #2]
   17ea0:	beq	17ffc <__assert_fail@plt+0x60b4>
   17ea4:	ldr	r3, [sp, #24]
   17ea8:	cmp	r3, #0
   17eac:	beq	17f98 <__assert_fail@plt+0x6050>
   17eb0:	mov	r1, r4
   17eb4:	mov	r0, r3
   17eb8:	bl	178d0 <__assert_fail@plt+0x5988>
   17ebc:	cmp	r0, #0
   17ec0:	bne	17f88 <__assert_fail@plt+0x6040>
   17ec4:	ldr	r8, [fp]
   17ec8:	ldr	r3, [sp, #12]
   17ecc:	lsl	r6, r8, #2
   17ed0:	ldr	r3, [r3, r8, lsl #2]
   17ed4:	cmp	r4, r3
   17ed8:	bls	18010 <__assert_fail@plt+0x60c8>
   17edc:	sub	r4, r4, #16
   17ee0:	str	r4, [r7, r8, lsl #2]
   17ee4:	ldr	r3, [sp, #16]
   17ee8:	cmp	r3, #1
   17eec:	bls	17d64 <__assert_fail@plt+0x5e1c>
   17ef0:	mov	r4, #1
   17ef4:	add	r6, r7, r6
   17ef8:	mov	sl, r3
   17efc:	mov	r9, r4
   17f00:	b	17f24 <__assert_fail@plt+0x5fdc>
   17f04:	ldr	r3, [fp, r5]
   17f08:	cmp	r3, r8
   17f0c:	bls	17f44 <__assert_fail@plt+0x5ffc>
   17f10:	mov	sl, r4
   17f14:	add	r4, r9, sl
   17f18:	cmp	r9, sl
   17f1c:	lsr	r4, r4, #1
   17f20:	bcs	17f58 <__assert_fail@plt+0x6010>
   17f24:	ldr	r3, [fp, r4, lsl #2]
   17f28:	ldr	r0, [r6]
   17f2c:	lsl	r5, r4, #2
   17f30:	ldr	r1, [r7, r3, lsl #2]
   17f34:	bl	178d0 <__assert_fail@plt+0x5988>
   17f38:	cmp	r0, #0
   17f3c:	blt	17f10 <__assert_fail@plt+0x5fc8>
   17f40:	beq	17f04 <__assert_fail@plt+0x5fbc>
   17f44:	add	r9, r4, #1
   17f48:	add	r4, r9, sl
   17f4c:	cmp	r9, sl
   17f50:	lsr	r4, r4, #1
   17f54:	bcc	17f24 <__assert_fail@plt+0x5fdc>
   17f58:	subs	r1, r9, #1
   17f5c:	beq	17f80 <__assert_fail@plt+0x6038>
   17f60:	sub	r9, r9, #-1073741823	; 0xc0000001
   17f64:	mov	r3, fp
   17f68:	add	r9, fp, r9, lsl #2
   17f6c:	ldr	r2, [r3, #4]
   17f70:	str	r2, [r3], #4
   17f74:	cmp	r3, r9
   17f78:	bne	17f6c <__assert_fail@plt+0x6024>
   17f7c:	lsl	r1, r1, #2
   17f80:	str	r8, [fp, r1]
   17f84:	b	17e8c <__assert_fail@plt+0x5f44>
   17f88:	ldr	r2, [sp, #104]	; 0x68
   17f8c:	ldr	r1, [sp, #36]	; 0x24
   17f90:	add	r0, sp, #48	; 0x30
   17f94:	bl	16800 <__assert_fail@plt+0x48b8>
   17f98:	ldr	r5, [r4, #4]
   17f9c:	ldr	r3, [sp, #40]	; 0x28
   17fa0:	cmp	r5, r3
   17fa4:	bhi	18190 <__assert_fail@plt+0x6248>
   17fa8:	ldr	r0, [sp, #48]	; 0x30
   17fac:	ldr	r1, [r4]
   17fb0:	mov	r2, r5
   17fb4:	str	r5, [sp, #52]	; 0x34
   17fb8:	bl	11ac8 <memcpy@plt>
   17fbc:	ldr	r3, [sp, #44]	; 0x2c
   17fc0:	cmp	r3, #0
   17fc4:	beq	18248 <__assert_fail@plt+0x6300>
   17fc8:	ldr	r0, [r4]
   17fcc:	ldr	r3, [r4, #8]
   17fd0:	ldr	r1, [r4, #12]
   17fd4:	ldr	r2, [sp, #48]	; 0x30
   17fd8:	sub	r3, r3, r0
   17fdc:	add	r3, r2, r3
   17fe0:	sub	r1, r1, r0
   17fe4:	add	r2, r2, r1
   17fe8:	str	r3, [sp, #56]	; 0x38
   17fec:	add	r3, sp, #48	; 0x30
   17ff0:	str	r2, [sp, #60]	; 0x3c
   17ff4:	str	r3, [sp, #24]
   17ff8:	b	17ec4 <__assert_fail@plt+0x5f7c>
   17ffc:	ldr	r2, [sp, #104]	; 0x68
   18000:	ldr	r1, [sp, #36]	; 0x24
   18004:	mov	r0, r4
   18008:	bl	16800 <__assert_fail@plt+0x48b8>
   1800c:	b	17ec4 <__assert_fail@plt+0x5f7c>
   18010:	ldr	r3, [sp, #4]
   18014:	rsb	r0, r8, r8, lsl #3
   18018:	ldr	r2, [r3, r8, lsl #3]
   1801c:	ldr	r3, [sp, #8]
   18020:	add	r0, r3, r0, lsl #2
   18024:	ldr	r3, [sp, #108]	; 0x6c
   18028:	ldr	r1, [r3, r8, lsl #2]
   1802c:	bl	15fac <__assert_fail@plt+0x4064>
   18030:	cmp	r0, #0
   18034:	bne	181e0 <__assert_fail@plt+0x6298>
   18038:	ldr	r3, [sp, #16]
   1803c:	cmp	r3, #1
   18040:	ldrls	r0, [fp]
   18044:	bls	18078 <__assert_fail@plt+0x6130>
   18048:	mov	r3, fp
   1804c:	ldr	r2, [sp, #16]
   18050:	ldr	r0, [r3], #4
   18054:	add	ip, fp, r2, lsl #2
   18058:	ldr	r2, [r3]
   1805c:	add	r3, r3, #4
   18060:	cmp	r2, r0
   18064:	sub	r1, r2, #1
   18068:	strhi	r1, [r3, #-4]
   1806c:	ldrhi	r0, [fp]
   18070:	cmp	ip, r3
   18074:	bne	18058 <__assert_fail@plt+0x6110>
   18078:	ldr	r3, [sp, #4]
   1807c:	ldr	r1, [r3, r0, lsl #3]
   18080:	ldr	r3, [sp, #108]	; 0x6c
   18084:	ldr	r0, [r3, r0, lsl #2]
   18088:	bl	1677c <__assert_fail@plt+0x4834>
   1808c:	ldr	r2, [sp, #16]
   18090:	ldr	r3, [fp]
   18094:	sub	r2, r2, #1
   18098:	str	r2, [sp, #32]
   1809c:	ldr	r2, [sp, #28]
   180a0:	cmp	r3, r2
   180a4:	bcc	1821c <__assert_fail@plt+0x62d4>
   180a8:	ldr	r6, [sp, #8]
   180ac:	rsb	r3, r3, r3, lsl #3
   180b0:	ldr	r0, [r6, r3, lsl #2]
   180b4:	bl	1afe8 <__assert_fail@plt+0x90a0>
   180b8:	ldr	r3, [fp]
   180bc:	ldr	r2, [sp, #32]
   180c0:	cmp	r2, r3
   180c4:	bls	18158 <__assert_fail@plt+0x6210>
   180c8:	ldr	r2, [sp, #16]
   180cc:	ldr	r1, [sp, #108]	; 0x6c
   180d0:	sub	r2, r2, #-1073741823	; 0xc0000001
   180d4:	lsl	r4, r3, #3
   180d8:	add	r2, r1, r2, lsl #2
   180dc:	mov	sl, r2
   180e0:	ldr	r2, [sp, #4]
   180e4:	sub	r5, r4, r3
   180e8:	add	r4, r2, r4
   180ec:	ldr	r2, [sp, #12]
   180f0:	lsl	r3, r3, #2
   180f4:	add	r5, r6, r5, lsl #2
   180f8:	add	r9, r7, r3
   180fc:	add	r6, r1, r3
   18100:	add	r8, r2, r3
   18104:	str	r7, [sp, #16]
   18108:	add	r7, r4, #8
   1810c:	ldr	r3, [r6, #4]
   18110:	ldm	r7, {r0, r1}
   18114:	add	lr, r5, #28
   18118:	str	r3, [r6], #4
   1811c:	stm	r4, {r0, r1}
   18120:	ldm	lr!, {r0, r1, r2, r3}
   18124:	mov	ip, r5
   18128:	cmp	sl, r6
   1812c:	mov	r4, r7
   18130:	stmia	ip!, {r0, r1, r2, r3}
   18134:	add	r5, r5, #28
   18138:	ldm	lr, {r0, r1, r2}
   1813c:	ldr	r3, [r8, #4]
   18140:	ldr	lr, [r9, #4]
   18144:	stm	ip, {r0, r1, r2}
   18148:	str	lr, [r9], #4
   1814c:	str	r3, [r8], #4
   18150:	bne	18108 <__assert_fail@plt+0x61c0>
   18154:	ldr	r7, [sp, #16]
   18158:	ldr	r3, [sp, #32]
   1815c:	cmp	r3, #0
   18160:	beq	17d74 <__assert_fail@plt+0x5e2c>
   18164:	ldr	r0, [sp, #32]
   18168:	mov	r2, fp
   1816c:	mov	r3, #0
   18170:	add	r3, r3, #1
   18174:	ldr	r1, [r2, #4]
   18178:	cmp	r0, r3
   1817c:	str	r1, [r2], #4
   18180:	bhi	18170 <__assert_fail@plt+0x6228>
   18184:	ldr	r3, [sp, #32]
   18188:	str	r3, [sp, #16]
   1818c:	b	17e8c <__assert_fail@plt+0x5f44>
   18190:	ldr	r3, [sp, #40]	; 0x28
   18194:	cmp	r3, #0
   18198:	beq	181c0 <__assert_fail@plt+0x6278>
   1819c:	lsl	r3, r3, #1
   181a0:	cmp	r5, r3
   181a4:	bls	181bc <__assert_fail@plt+0x6274>
   181a8:	cmp	r3, #0
   181ac:	lsl	r3, r3, #1
   181b0:	beq	181c0 <__assert_fail@plt+0x6278>
   181b4:	cmp	r5, r3
   181b8:	bhi	181a8 <__assert_fail@plt+0x6260>
   181bc:	mov	r5, r3
   181c0:	ldr	r0, [sp, #48]	; 0x30
   181c4:	bl	1afe8 <__assert_fail@plt+0x90a0>
   181c8:	mov	r0, r5
   181cc:	bl	20048 <__assert_fail@plt+0xe100>
   181d0:	str	r5, [sp, #40]	; 0x28
   181d4:	ldr	r5, [r4, #4]
   181d8:	str	r0, [sp, #48]	; 0x30
   181dc:	b	17fac <__assert_fail@plt+0x6064>
   181e0:	ldr	r8, [fp]
   181e4:	ldr	r1, [sp, #8]
   181e8:	rsb	r3, r8, r8, lsl #3
   181ec:	lsl	r6, r8, #2
   181f0:	add	r2, r1, r3, lsl #2
   181f4:	ldr	r3, [r1, r3, lsl #2]
   181f8:	ldr	r0, [r2, #12]
   181fc:	ldr	r1, [r2, #8]
   18200:	add	r3, r3, r0
   18204:	sub	r2, r3, #16
   18208:	str	r2, [r7, r8, lsl #2]
   1820c:	ldr	r2, [sp, #12]
   18210:	sub	r3, r3, r1, lsl #4
   18214:	str	r3, [r2, r8, lsl #2]
   18218:	b	17ee4 <__assert_fail@plt+0x5f9c>
   1821c:	ldr	r2, [sp, #4]
   18220:	ldr	r0, [r2, r3, lsl #3]
   18224:	bl	163a0 <__assert_fail@plt+0x4458>
   18228:	ldr	r2, [sp, #28]
   1822c:	ldr	r3, [fp]
   18230:	sub	r2, r2, #1
   18234:	str	r2, [sp, #28]
   18238:	b	180a8 <__assert_fail@plt+0x6160>
   1823c:	ldr	fp, [sp, #24]
   18240:	mov	r6, r2
   18244:	b	17e00 <__assert_fail@plt+0x5eb8>
   18248:	add	r3, sp, #48	; 0x30
   1824c:	str	r3, [sp, #24]
   18250:	b	17ec4 <__assert_fail@plt+0x5f7c>
   18254:	andeq	r5, r3, r0, ror #5
   18258:	andeq	r5, r3, r4, ror #3
   1825c:	push	{r4, lr}
   18260:	mov	r4, r0
   18264:	bl	11b88 <dup2@plt>
   18268:	mov	r0, r4
   1826c:	pop	{r4, lr}
   18270:	b	11f30 <close@plt>
   18274:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18278:	mov	r7, r1
   1827c:	sub	sp, sp, #20
   18280:	mov	r8, r0
   18284:	mov	r0, r1
   18288:	mov	r1, #4
   1828c:	mov	r4, r2
   18290:	bl	20130 <__assert_fail@plt+0xe1e8>
   18294:	cmp	r7, #0
   18298:	str	r0, [r4]
   1829c:	beq	18454 <__assert_fail@plt+0x650c>
   182a0:	mov	r4, #0
   182a4:	ldr	r9, [pc, #488]	; 18494 <__assert_fail@plt+0x654c>
   182a8:	mov	r5, r0
   182ac:	mov	fp, r8
   182b0:	b	182e4 <__assert_fail@plt+0x639c>
   182b4:	mov	r1, r9
   182b8:	ldr	r0, [r8, r4, lsl #3]
   182bc:	bl	1560c <__assert_fail@plt+0x36c4>
   182c0:	cmp	r0, #0
   182c4:	str	r0, [r5]
   182c8:	beq	183bc <__assert_fail@plt+0x6474>
   182cc:	add	r4, r4, #1
   182d0:	cmp	r4, r7
   182d4:	add	fp, fp, #8
   182d8:	add	r5, r5, #4
   182dc:	mov	r6, r4
   182e0:	beq	183bc <__assert_fail@plt+0x6474>
   182e4:	ldr	sl, [fp, #4]
   182e8:	mov	r6, r4
   182ec:	cmp	sl, #0
   182f0:	beq	182b4 <__assert_fail@plt+0x636c>
   182f4:	ldrb	r2, [sl, #8]
   182f8:	cmp	r2, #0
   182fc:	beq	182b4 <__assert_fail@plt+0x636c>
   18300:	cmp	r2, #1
   18304:	beq	1843c <__assert_fail@plt+0x64f4>
   18308:	mov	r1, #0
   1830c:	add	r0, sl, #9
   18310:	bl	11c9c <open64@plt>
   18314:	subs	r3, r0, #0
   18318:	str	r3, [sp]
   1831c:	blt	183c8 <__assert_fail@plt+0x6480>
   18320:	mov	r1, #9
   18324:	add	r0, sp, #8
   18328:	bl	164d0 <__assert_fail@plt+0x4588>
   1832c:	cmn	r0, #1
   18330:	beq	18394 <__assert_fail@plt+0x644c>
   18334:	cmp	r0, #0
   18338:	bne	183dc <__assert_fail@plt+0x6494>
   1833c:	str	r0, [sp, #4]
   18340:	ldr	r0, [sp, #8]
   18344:	bl	11f30 <close@plt>
   18348:	ldr	r3, [sp]
   1834c:	ldr	r1, [sp, #4]
   18350:	cmp	r3, #0
   18354:	bne	18448 <__assert_fail@plt+0x6500>
   18358:	ldr	r0, [sp, #12]
   1835c:	cmp	r0, #1
   18360:	beq	1836c <__assert_fail@plt+0x6424>
   18364:	mov	r1, #1
   18368:	bl	1825c <__assert_fail@plt+0x6314>
   1836c:	ldr	r1, [pc, #292]	; 18498 <__assert_fail@plt+0x6550>
   18370:	mov	r3, #0
   18374:	ldr	r2, [pc, #288]	; 1849c <__assert_fail@plt+0x6554>
   18378:	ldr	r1, [r1, #1164]	; 0x48c
   1837c:	mov	r0, r1
   18380:	bl	11ad4 <execlp@plt>
   18384:	bl	11d74 <__errno_location@plt>
   18388:	ldr	r1, [pc, #272]	; 184a0 <__assert_fail@plt+0x6558>
   1838c:	ldr	r0, [r0]
   18390:	bl	15a58 <__assert_fail@plt+0x3b10>
   18394:	bl	11d74 <__errno_location@plt>
   18398:	ldr	r4, [r0]
   1839c:	mov	r7, r0
   183a0:	cmp	r4, #24
   183a4:	bne	1845c <__assert_fail@plt+0x6514>
   183a8:	ldr	r0, [sp]
   183ac:	bl	11f30 <close@plt>
   183b0:	mov	r3, #0
   183b4:	str	r4, [r7]
   183b8:	str	r3, [r5]
   183bc:	mov	r0, r6
   183c0:	add	sp, sp, #20
   183c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   183c8:	mov	r3, #0
   183cc:	mov	r0, r6
   183d0:	str	r3, [r5]
   183d4:	add	sp, sp, #20
   183d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   183dc:	str	r0, [sl, #4]
   183e0:	mov	r0, sl
   183e4:	bl	15ae4 <__assert_fail@plt+0x3b9c>
   183e8:	ldr	r0, [sp]
   183ec:	bl	11f30 <close@plt>
   183f0:	ldr	r0, [sp, #12]
   183f4:	bl	11f30 <close@plt>
   183f8:	mov	r1, r9
   183fc:	ldr	r0, [sp, #8]
   18400:	bl	119fc <fdopen@plt>
   18404:	cmp	r0, #0
   18408:	strne	r0, [r5]
   1840c:	bne	182cc <__assert_fail@plt+0x6384>
   18410:	mov	sl, r0
   18414:	bl	11d74 <__errno_location@plt>
   18418:	mov	r4, r0
   1841c:	ldr	r0, [sp, #8]
   18420:	ldr	r7, [r4]
   18424:	bl	11f30 <close@plt>
   18428:	mov	r0, r6
   1842c:	str	r7, [r4]
   18430:	str	sl, [r5]
   18434:	add	sp, sp, #20
   18438:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1843c:	ldr	r0, [sl, #4]
   18440:	bl	15a14 <__assert_fail@plt+0x3acc>
   18444:	b	18308 <__assert_fail@plt+0x63c0>
   18448:	mov	r0, r3
   1844c:	bl	1825c <__assert_fail@plt+0x6314>
   18450:	b	18358 <__assert_fail@plt+0x6410>
   18454:	mov	r6, r7
   18458:	b	183bc <__assert_fail@plt+0x6474>
   1845c:	mov	r2, #5
   18460:	ldr	r1, [pc, #60]	; 184a4 <__assert_fail@plt+0x655c>
   18464:	mov	r0, #0
   18468:	bl	11b58 <dcgettext@plt>
   1846c:	ldr	r3, [pc, #36]	; 18498 <__assert_fail@plt+0x6550>
   18470:	ldr	r1, [r3, #1164]	; 0x48c
   18474:	mov	r5, r0
   18478:	mov	r0, #4
   1847c:	bl	1e7e0 <__assert_fail@plt+0xc898>
   18480:	mov	r2, r5
   18484:	mov	r1, r4
   18488:	mov	r3, r0
   1848c:	mov	r0, #2
   18490:	bl	11c90 <error@plt>
   18494:	andeq	r2, r2, ip, lsr #19
   18498:	andeq	r5, r3, r0, ror #5
   1849c:	andeq	r2, r2, ip, ror r9
   184a0:	andeq	r2, r2, r0, lsl #19
   184a4:	andeq	r2, r2, r8, asr r9
   184a8:	push	{r4, r5, r6, r7, r8, lr}
   184ac:	mov	r4, r2
   184b0:	sub	sp, sp, #16
   184b4:	mov	r7, r1
   184b8:	add	r2, sp, #12
   184bc:	mov	r1, r4
   184c0:	mov	r8, r3
   184c4:	mov	r6, r0
   184c8:	bl	18274 <__assert_fail@plt+0x632c>
   184cc:	cmp	r4, r0
   184d0:	movhi	r4, #1
   184d4:	movls	r4, #0
   184d8:	cmp	r0, #1
   184dc:	movhi	r4, #0
   184e0:	cmp	r4, #0
   184e4:	mov	r5, r0
   184e8:	bne	1851c <__assert_fail@plt+0x65d4>
   184ec:	ldr	r2, [sp, #12]
   184f0:	ldr	r3, [sp, #40]	; 0x28
   184f4:	mov	r0, r6
   184f8:	str	r3, [sp]
   184fc:	str	r2, [sp, #4]
   18500:	mov	r3, r8
   18504:	mov	r1, r7
   18508:	mov	r2, r5
   1850c:	bl	17bd0 <__assert_fail@plt+0x5c88>
   18510:	mov	r0, r5
   18514:	add	sp, sp, #16
   18518:	pop	{r4, r5, r6, r7, r8, pc}
   1851c:	ldr	r1, [pc, #16]	; 18534 <__assert_fail@plt+0x65ec>
   18520:	mov	r2, #5
   18524:	mov	r0, #0
   18528:	bl	11b58 <dcgettext@plt>
   1852c:	ldr	r1, [r6, r5, lsl #3]
   18530:	bl	1554c <__assert_fail@plt+0x3604>
   18534:	andeq	r2, r2, r8, lsl #18
   18538:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1853c:	mov	sl, r0
   18540:	ldr	r5, [pc, #568]	; 18780 <__assert_fail@plt+0x6838>
   18544:	sub	sp, sp, #136	; 0x88
   18548:	mov	r8, r1
   1854c:	ldr	r3, [r5, #1160]	; 0x488
   18550:	ldr	r2, [r5, #1492]	; 0x5d4
   18554:	ldr	r9, [r3, r2, lsl #2]
   18558:	mov	r0, r9
   1855c:	bl	11d50 <strlen@plt>
   18560:	mov	r7, r0
   18564:	add	r0, r0, #24
   18568:	bic	r0, r0, #3
   1856c:	bl	20048 <__assert_fail@plt+0xe100>
   18570:	mov	r2, r7
   18574:	mov	r1, r9
   18578:	add	r6, r0, #9
   1857c:	mov	r4, r0
   18580:	mov	r0, r6
   18584:	bl	11ac8 <memcpy@plt>
   18588:	ldr	r3, [pc, #500]	; 18784 <__assert_fail@plt+0x683c>
   1858c:	ldr	ip, [r5, #1492]	; 0x5d4
   18590:	ldm	r3!, {r0, r1, r2}
   18594:	add	r3, ip, #1
   18598:	ldr	ip, [r5, #1152]	; 0x480
   1859c:	str	r3, [r5, #1492]	; 0x5d4
   185a0:	cmp	r3, ip
   185a4:	add	r3, r6, r7
   185a8:	str	r0, [r6, r7]
   185ac:	mov	r0, #0
   185b0:	str	r1, [r3, #4]
   185b4:	str	r2, [r3, #8]
   185b8:	streq	r0, [r5, #1492]	; 0x5d4
   185bc:	str	r0, [r4]
   185c0:	add	r2, sp, #8
   185c4:	ldr	r1, [pc, #444]	; 18788 <__assert_fail@plt+0x6840>
   185c8:	mov	r0, #0
   185cc:	bl	11c60 <pthread_sigmask@plt>
   185d0:	mov	r1, #524288	; 0x80000
   185d4:	clz	r3, r0
   185d8:	mov	r0, r6
   185dc:	lsr	r3, r3, #5
   185e0:	strb	r3, [sp, #4]
   185e4:	bl	1f558 <__assert_fail@plt+0xd610>
   185e8:	subs	r7, r0, #0
   185ec:	blt	186cc <__assert_fail@plt+0x6784>
   185f0:	ldr	r3, [pc, #404]	; 1878c <__assert_fail@plt+0x6844>
   185f4:	ldr	r2, [r3, #108]	; 0x6c
   185f8:	str	r4, [r3, #108]	; 0x6c
   185fc:	str	r4, [r2]
   18600:	bl	11d74 <__errno_location@plt>
   18604:	ldrb	r3, [sp, #4]
   18608:	cmp	r3, #0
   1860c:	mov	r8, r0
   18610:	ldr	r9, [r0]
   18614:	bne	1871c <__assert_fail@plt+0x67d4>
   18618:	ldr	r2, [r5, #1164]	; 0x48c
   1861c:	mov	r3, #0
   18620:	cmp	r2, r3
   18624:	strb	r3, [r4, #8]
   18628:	beq	18660 <__assert_fail@plt+0x6718>
   1862c:	add	r0, sp, #4
   18630:	mov	r1, #4
   18634:	bl	164d0 <__assert_fail@plt+0x4588>
   18638:	cmp	r0, #0
   1863c:	str	r0, [r4, #4]
   18640:	ble	18684 <__assert_fail@plt+0x673c>
   18644:	mov	r0, r7
   18648:	bl	11f30 <close@plt>
   1864c:	ldr	r0, [sp, #4]
   18650:	bl	11f30 <close@plt>
   18654:	mov	r0, r4
   18658:	ldr	r7, [sp, #8]
   1865c:	bl	15ae4 <__assert_fail@plt+0x3b9c>
   18660:	mov	r0, r7
   18664:	ldr	r1, [pc, #292]	; 18790 <__assert_fail@plt+0x6848>
   18668:	bl	119fc <fdopen@plt>
   1866c:	cmp	r0, #0
   18670:	str	r0, [sl]
   18674:	beq	1872c <__assert_fail@plt+0x67e4>
   18678:	mov	r0, r4
   1867c:	add	sp, sp, #136	; 0x88
   18680:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18684:	bne	18660 <__assert_fail@plt+0x6718>
   18688:	ldr	r0, [sp, #8]
   1868c:	bl	11f30 <close@plt>
   18690:	cmp	r7, #1
   18694:	beq	186a4 <__assert_fail@plt+0x675c>
   18698:	mov	r0, r7
   1869c:	mov	r1, #1
   186a0:	bl	1825c <__assert_fail@plt+0x6314>
   186a4:	ldr	r0, [sp, #4]
   186a8:	cmp	r0, #0
   186ac:	bne	18774 <__assert_fail@plt+0x682c>
   186b0:	ldr	r1, [r5, #1164]	; 0x48c
   186b4:	mov	r2, #0
   186b8:	mov	r0, r1
   186bc:	bl	11ad4 <execlp@plt>
   186c0:	ldr	r0, [r8]
   186c4:	ldr	r1, [pc, #200]	; 18794 <__assert_fail@plt+0x684c>
   186c8:	bl	15a58 <__assert_fail@plt+0x3b10>
   186cc:	bl	11d74 <__errno_location@plt>
   186d0:	ldrb	r3, [sp, #4]
   186d4:	cmp	r3, #0
   186d8:	mov	r6, r0
   186dc:	ldr	r5, [r0]
   186e0:	beq	186f0 <__assert_fail@plt+0x67a8>
   186e4:	add	r0, sp, #4
   186e8:	bl	16300 <__assert_fail@plt+0x43b8>
   186ec:	str	r5, [r6]
   186f0:	eor	r8, r8, #1
   186f4:	cmp	r5, #24
   186f8:	orrne	r8, r8, #1
   186fc:	cmp	r8, #0
   18700:	bne	18740 <__assert_fail@plt+0x67f8>
   18704:	mov	r0, r4
   18708:	bl	1afe8 <__assert_fail@plt+0x90a0>
   1870c:	mov	r4, r8
   18710:	mov	r0, r4
   18714:	add	sp, sp, #136	; 0x88
   18718:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1871c:	add	r0, sp, #4
   18720:	bl	16300 <__assert_fail@plt+0x43b8>
   18724:	str	r9, [r8]
   18728:	b	18618 <__assert_fail@plt+0x66d0>
   1872c:	ldr	r1, [pc, #100]	; 18798 <__assert_fail@plt+0x6850>
   18730:	mov	r2, #5
   18734:	bl	11b58 <dcgettext@plt>
   18738:	mov	r1, r6
   1873c:	bl	1554c <__assert_fail@plt+0x3604>
   18740:	mov	r2, #5
   18744:	ldr	r1, [pc, #80]	; 1879c <__assert_fail@plt+0x6854>
   18748:	mov	r0, #0
   1874c:	bl	11b58 <dcgettext@plt>
   18750:	mov	r1, r9
   18754:	mov	r4, r0
   18758:	mov	r0, #4
   1875c:	bl	1e7e0 <__assert_fail@plt+0xc898>
   18760:	mov	r2, r4
   18764:	mov	r1, r5
   18768:	mov	r3, r0
   1876c:	mov	r0, #2
   18770:	bl	11c90 <error@plt>
   18774:	mov	r1, #0
   18778:	bl	1825c <__assert_fail@plt+0x6314>
   1877c:	b	186b0 <__assert_fail@plt+0x6768>
   18780:	andeq	r5, r3, r0, ror #5
   18784:	andeq	r2, r2, ip, lsl sl
   18788:	andeq	r5, r3, ip, ror r7
   1878c:	andeq	r5, r3, r4, ror #3
   18790:	strdeq	r2, [r2], -r8
   18794:	ldrdeq	r2, [r2], -r4
   18798:	strdeq	r2, [r2], -ip
   1879c:			; <UNDEFINED> instruction: 0x000229b0
   187a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   187a4:	mov	fp, r2
   187a8:	ldr	sl, [pc, #1100]	; 18bfc <__assert_fail@plt+0x6cb4>
   187ac:	sub	sp, sp, #140	; 0x8c
   187b0:	mov	r4, r0
   187b4:	ldr	r2, [sl, #112]	; 0x70
   187b8:	mov	r5, r1
   187bc:	cmp	fp, r2
   187c0:	str	r3, [sp, #20]
   187c4:	bls	18944 <__assert_fail@plt+0x69fc>
   187c8:	cmp	r2, fp
   187cc:	bls	18820 <__assert_fail@plt+0x68d8>
   187d0:	mov	r8, #0
   187d4:	mov	r1, r8
   187d8:	mov	r3, fp
   187dc:	sub	r2, r2, r1
   187e0:	cmp	r2, r3
   187e4:	mov	r9, r8
   187e8:	mov	r7, r8
   187ec:	mov	r6, r8
   187f0:	bcc	188cc <__assert_fail@plt+0x6984>
   187f4:	sub	r2, fp, r6
   187f8:	add	r1, r4, r9
   187fc:	lsl	r2, r2, #3
   18800:	add	r0, r4, r8
   18804:	bl	11a80 <memmove@plt>
   18808:	sub	r6, r7, r6
   1880c:	ldr	r2, [sl, #112]	; 0x70
   18810:	add	fp, fp, r6
   18814:	cmp	r2, fp
   18818:	add	r5, r5, r7
   1881c:	bcs	18944 <__assert_fail@plt+0x69fc>
   18820:	mov	r7, #0
   18824:	mov	r6, r7
   18828:	mov	r8, r4
   1882c:	str	fp, [sp, #12]
   18830:	mov	r1, #0
   18834:	add	r0, sp, #32
   18838:	bl	18538 <__assert_fail@plt+0x65f0>
   1883c:	ldr	r2, [sl, #112]	; 0x70
   18840:	ldr	r3, [sp, #32]
   18844:	cmp	r2, r5
   18848:	movcs	r1, r5
   1884c:	movcc	r1, r2
   18850:	add	r8, r8, #8
   18854:	add	fp, r0, #9
   18858:	mov	r9, r0
   1885c:	str	fp, [sp]
   18860:	add	r0, r4, r6, lsl #3
   18864:	bl	184a8 <__assert_fail@plt+0x6560>
   18868:	ldr	r3, [sp, #12]
   1886c:	ldr	r2, [sl, #112]	; 0x70
   18870:	str	fp, [r4, r7, lsl #3]
   18874:	str	r9, [r8, #-4]
   18878:	add	r7, r7, #1
   1887c:	add	r6, r6, r0
   18880:	cmp	r0, r5
   18884:	sub	r3, r3, r6
   18888:	subls	r5, r5, r0
   1888c:	subhi	r5, r5, r5
   18890:	cmp	r3, r2
   18894:	bcs	18830 <__assert_fail@plt+0x68e8>
   18898:	mov	r1, r2
   1889c:	mov	r0, r7
   188a0:	str	r3, [sp, #16]
   188a4:	ldr	fp, [sp, #12]
   188a8:	str	r2, [sp, #12]
   188ac:	bl	21b44 <_obstack_memory_used@@Base+0x278>
   188b0:	ldr	r2, [sp, #12]
   188b4:	ldr	r3, [sp, #16]
   188b8:	lsl	r9, r6, #3
   188bc:	lsl	r8, r7, #3
   188c0:	sub	r2, r2, r1
   188c4:	cmp	r2, r3
   188c8:	bcs	187f4 <__assert_fail@plt+0x68ac>
   188cc:	add	r3, r3, #1
   188d0:	sub	r2, r3, r2
   188d4:	mov	r1, #0
   188d8:	add	r0, sp, #32
   188dc:	str	r2, [sp, #12]
   188e0:	bl	18538 <__assert_fail@plt+0x65f0>
   188e4:	ldr	r2, [sp, #12]
   188e8:	ldr	r3, [sp, #32]
   188ec:	cmp	r2, r5
   188f0:	add	r7, r7, #1
   188f4:	add	r1, r0, #9
   188f8:	mov	ip, r1
   188fc:	str	r0, [sp, #12]
   18900:	movcs	r1, r5
   18904:	movcc	r1, r2
   18908:	add	r0, r4, r9
   1890c:	str	ip, [sp]
   18910:	mov	r9, ip
   18914:	bl	184a8 <__assert_fail@plt+0x6560>
   18918:	add	r3, r4, r8
   1891c:	ldr	r1, [sp, #12]
   18920:	str	r9, [r4, r8]
   18924:	lsl	r8, r7, #3
   18928:	str	r1, [r3, #4]
   1892c:	add	r6, r6, r0
   18930:	cmp	r0, r5
   18934:	subls	r5, r5, r0
   18938:	subhi	r5, r5, r5
   1893c:	lsl	r9, r6, #3
   18940:	b	187f4 <__assert_fail@plt+0x68ac>
   18944:	cmp	r5, fp
   18948:	addcs	r3, sp, #28
   1894c:	strcs	r3, [sp, #12]
   18950:	bcs	18a8c <__assert_fail@plt+0x6b44>
   18954:	add	r3, sp, #28
   18958:	mov	r9, #0
   1895c:	add	sl, r4, r5, lsl #3
   18960:	mov	r7, r5
   18964:	str	r3, [sp, #12]
   18968:	str	r5, [sp, #16]
   1896c:	ldr	r6, [sp, #20]
   18970:	b	18998 <__assert_fail@plt+0x6a50>
   18974:	cmp	r9, #0
   18978:	beq	18a34 <__assert_fail@plt+0x6aec>
   1897c:	add	r5, r9, #9
   18980:	str	r5, [r4, r7, lsl #3]
   18984:	str	r9, [sl, #4]
   18988:	add	r7, r7, #1
   1898c:	cmp	r7, fp
   18990:	add	sl, sl, #8
   18994:	beq	18a88 <__assert_fail@plt+0x6b40>
   18998:	ldr	r5, [r4, r7, lsl #3]
   1899c:	ldr	r1, [pc, #604]	; 18c00 <__assert_fail@plt+0x6cb8>
   189a0:	mov	r0, r5
   189a4:	bl	11a2c <strcmp@plt>
   189a8:	cmp	r6, #0
   189ac:	mov	r8, r0
   189b0:	beq	189d8 <__assert_fail@plt+0x6a90>
   189b4:	mov	r1, r5
   189b8:	mov	r0, r6
   189bc:	bl	11a2c <strcmp@plt>
   189c0:	adds	r3, r8, #0
   189c4:	movne	r3, #1
   189c8:	cmp	r0, #0
   189cc:	movne	r3, #0
   189d0:	cmp	r3, #0
   189d4:	bne	18974 <__assert_fail@plt+0x6a2c>
   189d8:	bl	155b4 <__assert_fail@plt+0x366c>
   189dc:	subs	r5, r0, #0
   189e0:	beq	18a88 <__assert_fail@plt+0x6b40>
   189e4:	cmp	r8, #0
   189e8:	add	r2, sp, #32
   189ec:	bne	18a64 <__assert_fail@plt+0x6b1c>
   189f0:	mov	r1, #0
   189f4:	mov	r0, #3
   189f8:	bl	11bf4 <__fxstat64@plt>
   189fc:	cmp	r0, #0
   18a00:	bne	18988 <__assert_fail@plt+0x6a40>
   18a04:	ldrd	r0, [sp, #128]	; 0x80
   18a08:	ldrd	r2, [r5, #96]	; 0x60
   18a0c:	cmp	r1, r3
   18a10:	cmpeq	r0, r2
   18a14:	bne	18988 <__assert_fail@plt+0x6a40>
   18a18:	ldrd	r2, [sp, #32]
   18a1c:	ldrd	r0, [r5]
   18a20:	cmp	r3, r1
   18a24:	cmpeq	r2, r0
   18a28:	bne	18988 <__assert_fail@plt+0x6a40>
   18a2c:	cmp	r9, #0
   18a30:	bne	1897c <__assert_fail@plt+0x6a34>
   18a34:	mov	r1, r9
   18a38:	ldr	r0, [sp, #12]
   18a3c:	bl	18538 <__assert_fail@plt+0x65f0>
   18a40:	ldr	r3, [sp, #28]
   18a44:	mov	r2, #1
   18a48:	mov	r1, #0
   18a4c:	add	r5, r0, #9
   18a50:	mov	r9, r0
   18a54:	str	r5, [sp]
   18a58:	mov	r0, sl
   18a5c:	bl	184a8 <__assert_fail@plt+0x6560>
   18a60:	b	18980 <__assert_fail@plt+0x6a38>
   18a64:	ldr	r1, [r4, r7, lsl #3]
   18a68:	mov	r0, #3
   18a6c:	bl	11f00 <__xstat64@plt>
   18a70:	cmp	r0, #0
   18a74:	beq	18a04 <__assert_fail@plt+0x6abc>
   18a78:	add	r7, r7, #1
   18a7c:	cmp	r7, fp
   18a80:	add	sl, sl, #8
   18a84:	bne	18998 <__assert_fail@plt+0x6a50>
   18a88:	ldr	r5, [sp, #16]
   18a8c:	mov	r8, fp
   18a90:	add	r3, r4, #8
   18a94:	str	r3, [sp, #16]
   18a98:	ldr	r2, [sp, #12]
   18a9c:	mov	r1, r8
   18aa0:	mov	r0, r4
   18aa4:	bl	18274 <__assert_fail@plt+0x632c>
   18aa8:	cmp	r8, r0
   18aac:	mov	sl, r0
   18ab0:	beq	18b68 <__assert_fail@plt+0x6c20>
   18ab4:	cmp	r0, #2
   18ab8:	bls	18be4 <__assert_fail@plt+0x6c9c>
   18abc:	sub	fp, sl, #-536870911	; 0xe0000001
   18ac0:	sub	r9, sl, #-1073741823	; 0xc0000001
   18ac4:	add	fp, r4, fp, lsl #3
   18ac8:	lsl	r9, r9, #2
   18acc:	ldr	r3, [sp, #28]
   18ad0:	sub	sl, sl, #1
   18ad4:	mov	r7, fp
   18ad8:	ldr	r1, [r4, sl, lsl #3]
   18adc:	ldr	r0, [r3, r9]
   18ae0:	bl	1677c <__assert_fail@plt+0x4834>
   18ae4:	cmp	sl, #2
   18ae8:	movls	r1, #0
   18aec:	movhi	r1, #1
   18af0:	add	r0, sp, #32
   18af4:	bl	18538 <__assert_fail@plt+0x65f0>
   18af8:	sub	r9, r9, #4
   18afc:	sub	fp, fp, #8
   18b00:	cmp	r0, #0
   18b04:	beq	18acc <__assert_fail@plt+0x6b84>
   18b08:	cmp	r5, sl
   18b0c:	mov	r6, r0
   18b10:	ldr	r0, [sp, #28]
   18b14:	movcc	r9, r5
   18b18:	movcs	r9, sl
   18b1c:	sub	r8, r8, sl
   18b20:	add	fp, r6, #9
   18b24:	mov	r1, r9
   18b28:	ldr	r3, [sp, #32]
   18b2c:	mov	r2, sl
   18b30:	str	r0, [sp, #4]
   18b34:	str	fp, [sp]
   18b38:	mov	r0, r4
   18b3c:	bl	17bd0 <__assert_fail@plt+0x5c88>
   18b40:	rsb	r9, r9, #1
   18b44:	lsl	r2, r8, #3
   18b48:	str	fp, [r4]
   18b4c:	str	r6, [r4, #4]
   18b50:	mov	r1, r7
   18b54:	ldr	r0, [sp, #16]
   18b58:	bl	11a80 <memmove@plt>
   18b5c:	add	r8, r8, #1
   18b60:	add	r5, r5, r9
   18b64:	b	18a98 <__assert_fail@plt+0x6b50>
   18b68:	ldr	r1, [pc, #148]	; 18c04 <__assert_fail@plt+0x6cbc>
   18b6c:	ldr	r0, [sp, #20]
   18b70:	bl	1560c <__assert_fail@plt+0x36c4>
   18b74:	subs	r6, r0, #0
   18b78:	bne	18bb8 <__assert_fail@plt+0x6c70>
   18b7c:	bl	11d74 <__errno_location@plt>
   18b80:	cmp	r8, #2
   18b84:	movhi	r3, #0
   18b88:	movls	r3, #1
   18b8c:	ldr	r1, [r0]
   18b90:	cmp	r1, #24
   18b94:	orrne	r3, r3, #1
   18b98:	cmp	r3, #0
   18b9c:	beq	18abc <__assert_fail@plt+0x6b74>
   18ba0:	ldr	r1, [pc, #96]	; 18c08 <__assert_fail@plt+0x6cc0>
   18ba4:	mov	r0, r6
   18ba8:	mov	r2, #5
   18bac:	bl	11b58 <dcgettext@plt>
   18bb0:	ldr	r1, [sp, #20]
   18bb4:	bl	1554c <__assert_fail@plt+0x3604>
   18bb8:	ldr	r3, [sp, #20]
   18bbc:	ldr	ip, [sp, #28]
   18bc0:	str	r3, [sp]
   18bc4:	mov	r2, r8
   18bc8:	mov	r3, r6
   18bcc:	mov	r1, r5
   18bd0:	mov	r0, r4
   18bd4:	str	ip, [sp, #4]
   18bd8:	bl	17bd0 <__assert_fail@plt+0x5c88>
   18bdc:	add	sp, sp, #140	; 0x8c
   18be0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18be4:	ldr	r1, [pc, #28]	; 18c08 <__assert_fail@plt+0x6cc0>
   18be8:	mov	r2, #5
   18bec:	mov	r0, #0
   18bf0:	bl	11b58 <dcgettext@plt>
   18bf4:	ldr	r1, [r4, sl, lsl #3]
   18bf8:	bl	1554c <__assert_fail@plt+0x3604>
   18bfc:	andeq	r5, r3, r4, ror #3
   18c00:			; <UNDEFINED> instruction: 0x000227bc
   18c04:	strdeq	r2, [r2], -r8
   18c08:	andeq	r2, r2, r8, lsl #18
   18c0c:	ldm	r1, {r2, r3, ip}
   18c10:	sub	r2, r2, ip
   18c14:	ldr	ip, [r1, #12]
   18c18:	add	r2, r2, #15
   18c1c:	sub	r3, r3, ip
   18c20:	cmp	r2, #30
   18c24:	add	r3, r3, #15
   18c28:	bls	18c38 <__assert_fail@plt+0x6cf0>
   18c2c:	cmp	r3, #30
   18c30:	bls	18c50 <__assert_fail@plt+0x6d08>
   18c34:	b	15c48 <__assert_fail@plt+0x3d00>
   18c38:	cmp	r3, #30
   18c3c:	bxls	lr
   18c40:	ldr	r3, [r1, #20]
   18c44:	cmp	r3, #0
   18c48:	bxne	lr
   18c4c:	b	15c48 <__assert_fail@plt+0x3d00>
   18c50:	ldr	r3, [r1, #24]
   18c54:	cmp	r3, #0
   18c58:	bxne	lr
   18c5c:	b	18c34 <__assert_fail@plt+0x6cec>
   18c60:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18c64:	mov	r4, r3
   18c68:	sub	sp, sp, #76	; 0x4c
   18c6c:	ldr	fp, [r3, #20]
   18c70:	ldr	r8, [r3, #24]
   18c74:	ldr	r3, [r3, #32]
   18c78:	mov	r5, r1
   18c7c:	str	r3, [sp, #56]	; 0x38
   18c80:	ldr	r3, [sp, #116]	; 0x74
   18c84:	add	r1, fp, r8
   18c88:	ldr	r7, [sp, #112]	; 0x70
   18c8c:	str	r3, [sp, #64]	; 0x40
   18c90:	ldr	r3, [sp, #120]	; 0x78
   18c94:	lsr	r9, r5, #1
   18c98:	cmp	r1, #131072	; 0x20000
   18c9c:	cmpcs	r5, #1
   18ca0:	mov	r6, r0
   18ca4:	str	r2, [sp, #36]	; 0x24
   18ca8:	str	r0, [sp, #44]	; 0x2c
   18cac:	str	r2, [sp, #52]	; 0x34
   18cb0:	str	r9, [sp, #48]	; 0x30
   18cb4:	str	r7, [sp, #60]	; 0x3c
   18cb8:	str	r3, [sp, #68]	; 0x44
   18cbc:	bhi	191c4 <__assert_fail@plt+0x727c>
   18cc0:	ldr	r3, [sp, #36]	; 0x24
   18cc4:	lsl	r5, fp, #4
   18cc8:	rsb	r5, r5, #0
   18ccc:	cmp	r8, #1
   18cd0:	sub	sl, r6, r3, lsl #4
   18cd4:	addls	r9, r6, r5
   18cd8:	bls	18cf8 <__assert_fail@plt+0x6db0>
   18cdc:	lsr	r2, fp, #1
   18ce0:	add	r9, r6, r5
   18ce4:	mov	r0, r9
   18ce8:	sub	r2, sl, r2, lsl #4
   18cec:	mov	r3, #0
   18cf0:	mov	r1, r8
   18cf4:	bl	179a4 <__assert_fail@plt+0x5a5c>
   18cf8:	cmp	fp, #1
   18cfc:	bls	18d14 <__assert_fail@plt+0x6dcc>
   18d00:	mov	r2, sl
   18d04:	mov	r1, fp
   18d08:	mov	r3, #0
   18d0c:	mov	r0, r6
   18d10:	bl	179a4 <__assert_fail@plt+0x5a5c>
   18d14:	sub	r3, r5, r8, lsl #4
   18d18:	add	r3, r6, r3
   18d1c:	str	r3, [r4, #12]
   18d20:	stm	r4, {r6, r9}
   18d24:	str	r9, [r4, #8]
   18d28:	mov	r1, r4
   18d2c:	mov	r0, r7
   18d30:	bl	15c48 <__assert_fail@plt+0x3d00>
   18d34:	add	r3, r7, #32
   18d38:	add	r4, r7, #4
   18d3c:	mov	r9, r3
   18d40:	mov	r0, r4
   18d44:	bl	11a98 <pthread_mutex_lock@plt>
   18d48:	b	18d50 <__assert_fail@plt+0x6e08>
   18d4c:	bl	11eb8 <pthread_cond_wait@plt>
   18d50:	ldr	r0, [r7]
   18d54:	bl	1c21c <__assert_fail@plt+0xa2d4>
   18d58:	mov	r1, r4
   18d5c:	subs	r8, r0, #0
   18d60:	mov	r0, r9
   18d64:	beq	18d4c <__assert_fail@plt+0x6e04>
   18d68:	add	r3, r8, #48	; 0x30
   18d6c:	mov	r5, r3
   18d70:	mov	r0, r4
   18d74:	str	r3, [sp, #32]
   18d78:	bl	119f0 <pthread_mutex_unlock@plt>
   18d7c:	mov	r0, r5
   18d80:	bl	11a98 <pthread_mutex_lock@plt>
   18d84:	ldr	r3, [r8, #40]	; 0x28
   18d88:	mov	r2, #0
   18d8c:	cmp	r3, #0
   18d90:	strb	r2, [r8, #44]	; 0x2c
   18d94:	beq	1910c <__assert_fail@plt+0x71c4>
   18d98:	add	r5, r3, #1
   18d9c:	cmp	r3, #1
   18da0:	ldr	r3, [r8]
   18da4:	lsl	r5, r5, #1
   18da8:	mov	lr, r3
   18dac:	str	r3, [sp, #20]
   18db0:	ldr	r3, [sp, #36]	; 0x24
   18db4:	lsr	r5, r3, r5
   18db8:	ldr	r3, [r8, #4]
   18dbc:	add	r5, r5, #1
   18dc0:	mov	ip, r3
   18dc4:	str	r3, [sp, #24]
   18dc8:	bls	18f18 <__assert_fail@plt+0x6fd0>
   18dcc:	ldr	r3, [r8, #16]
   18dd0:	ldr	sl, [r3]
   18dd4:	b	18e2c <__assert_fail@plt+0x6ee4>
   18dd8:	ldr	r3, [r8, #12]
   18ddc:	cmp	r3, ip
   18de0:	beq	18e44 <__assert_fail@plt+0x6efc>
   18de4:	cmp	r5, #0
   18de8:	beq	1903c <__assert_fail@plt+0x70f4>
   18dec:	bl	178d0 <__assert_fail@plt+0x5988>
   18df0:	sub	r6, sl, #16
   18df4:	sub	r5, r5, #1
   18df8:	mov	sl, r6
   18dfc:	cmp	r0, #0
   18e00:	ldrle	lr, [r8]
   18e04:	ldrgt	ip, [r8, #4]
   18e08:	suble	lr, lr, #16
   18e0c:	subgt	ip, ip, #16
   18e10:	ldmle	lr, {r0, r1, r2, r3}
   18e14:	ldmgt	ip, {r0, r1, r2, r3}
   18e18:	strle	lr, [r8]
   18e1c:	ldrle	ip, [r8, #4]
   18e20:	ldrgt	lr, [r8]
   18e24:	strgt	ip, [r8, #4]
   18e28:	stm	r6, {r0, r1, r2, r3}
   18e2c:	sub	r1, ip, #16
   18e30:	ldr	fp, [r8, #8]
   18e34:	sub	r0, lr, #16
   18e38:	cmp	fp, lr
   18e3c:	mov	r6, sl
   18e40:	bne	18dd8 <__assert_fail@plt+0x6e90>
   18e44:	ldr	r3, [sp, #24]
   18e48:	ldr	r2, [sp, #20]
   18e4c:	sub	r1, r3, ip
   18e50:	ldr	r3, [r8, #24]
   18e54:	asr	r1, r1, #4
   18e58:	sub	sl, r2, lr
   18e5c:	cmp	r1, r3
   18e60:	str	r3, [sp, #28]
   18e64:	asr	sl, sl, #4
   18e68:	beq	19044 <__assert_fail@plt+0x70fc>
   18e6c:	ldr	lr, [r8, #20]
   18e70:	cmp	sl, lr
   18e74:	beq	190a4 <__assert_fail@plt+0x715c>
   18e78:	ldr	r3, [r8, #16]
   18e7c:	str	r6, [r3]
   18e80:	ldrb	r3, [r8, #44]	; 0x2c
   18e84:	ldr	r2, [sp, #28]
   18e88:	sub	sl, lr, sl
   18e8c:	sub	r1, r2, r1
   18e90:	cmp	r3, #0
   18e94:	str	sl, [r8, #20]
   18e98:	str	r1, [r8, #24]
   18e9c:	beq	18f08 <__assert_fail@plt+0x6fc0>
   18ea0:	ldr	r3, [r8, #40]	; 0x28
   18ea4:	cmp	r3, #1
   18ea8:	bls	18ee8 <__assert_fail@plt+0x6fa0>
   18eac:	ldr	r0, [r8, #28]
   18eb0:	add	r0, r0, #48	; 0x30
   18eb4:	bl	11a98 <pthread_mutex_lock@plt>
   18eb8:	ldr	r1, [r8, #28]
   18ebc:	ldrb	r3, [r1, #44]	; 0x2c
   18ec0:	cmp	r3, #0
   18ec4:	bne	18ed4 <__assert_fail@plt+0x6f8c>
   18ec8:	mov	r0, r7
   18ecc:	bl	18c0c <__assert_fail@plt+0x6cc4>
   18ed0:	ldr	r1, [r8, #28]
   18ed4:	add	r0, r1, #48	; 0x30
   18ed8:	bl	119f0 <pthread_mutex_unlock@plt>
   18edc:	ldr	r0, [sp, #32]
   18ee0:	bl	119f0 <pthread_mutex_unlock@plt>
   18ee4:	b	18d40 <__assert_fail@plt+0x6df8>
   18ee8:	ldr	r3, [r8, #20]
   18eec:	ldr	r2, [r8, #24]
   18ef0:	cmn	r3, r2
   18ef4:	bne	18edc <__assert_fail@plt+0x6f94>
   18ef8:	ldr	r1, [r8, #28]
   18efc:	mov	r0, r7
   18f00:	bl	15c48 <__assert_fail@plt+0x3d00>
   18f04:	b	18edc <__assert_fail@plt+0x6f94>
   18f08:	mov	r1, r8
   18f0c:	mov	r0, r7
   18f10:	bl	18c0c <__assert_fail@plt+0x6cc4>
   18f14:	b	18ea0 <__assert_fail@plt+0x6f58>
   18f18:	ldr	r3, [sp, #24]
   18f1c:	ldr	r2, [sp, #20]
   18f20:	ldr	r6, [sp, #116]	; 0x74
   18f24:	ldr	sl, [sp, #120]	; 0x78
   18f28:	b	18f74 <__assert_fail@plt+0x702c>
   18f2c:	ldr	lr, [r8, #12]
   18f30:	cmp	lr, r3
   18f34:	beq	18f88 <__assert_fail@plt+0x7040>
   18f38:	cmp	r5, #0
   18f3c:	beq	19140 <__assert_fail@plt+0x71f8>
   18f40:	bl	178d0 <__assert_fail@plt+0x5988>
   18f44:	mov	r2, sl
   18f48:	mov	r1, r6
   18f4c:	sub	r5, r5, #1
   18f50:	cmp	r0, #0
   18f54:	ldrle	r0, [r8]
   18f58:	ldrgt	r0, [r8, #4]
   18f5c:	suble	r0, r0, #16
   18f60:	subgt	r0, r0, #16
   18f64:	strle	r0, [r8]
   18f68:	strgt	r0, [r8, #4]
   18f6c:	bl	17b6c <__assert_fail@plt+0x5c24>
   18f70:	ldm	r8, {r2, r3}
   18f74:	ldr	ip, [r8, #8]
   18f78:	sub	r1, r3, #16
   18f7c:	cmp	ip, r2
   18f80:	sub	r0, r2, #16
   18f84:	bne	18f2c <__assert_fail@plt+0x6fe4>
   18f88:	ldr	r1, [sp, #24]
   18f8c:	ldr	lr, [sp, #20]
   18f90:	sub	r1, r1, r3
   18f94:	ldr	r0, [r8, #24]
   18f98:	asr	r1, r1, #4
   18f9c:	sub	sl, lr, r2
   18fa0:	cmp	r1, r0
   18fa4:	str	r0, [sp, #28]
   18fa8:	asr	sl, sl, #4
   18fac:	beq	19148 <__assert_fail@plt+0x7200>
   18fb0:	ldr	lr, [r8, #20]
   18fb4:	cmp	sl, lr
   18fb8:	bne	18e80 <__assert_fail@plt+0x6f38>
   18fbc:	ldr	r2, [r8, #12]
   18fc0:	cmp	r3, r2
   18fc4:	beq	191fc <__assert_fail@plt+0x72b4>
   18fc8:	cmp	r5, #0
   18fcc:	sub	r5, r5, #1
   18fd0:	beq	191fc <__assert_fail@plt+0x72b4>
   18fd4:	ldr	r6, [sp, #116]	; 0x74
   18fd8:	ldr	sl, [sp, #120]	; 0x78
   18fdc:	b	18fe8 <__assert_fail@plt+0x70a0>
   18fe0:	cmn	r5, #1
   18fe4:	beq	19010 <__assert_fail@plt+0x70c8>
   18fe8:	sub	r0, r3, #16
   18fec:	mov	r2, sl
   18ff0:	str	r0, [r8, #4]
   18ff4:	mov	r1, r6
   18ff8:	bl	17b6c <__assert_fail@plt+0x5c24>
   18ffc:	ldr	r3, [r8, #4]
   19000:	ldr	r2, [r8, #12]
   19004:	sub	r5, r5, #1
   19008:	cmp	r3, r2
   1900c:	bne	18fe0 <__assert_fail@plt+0x7098>
   19010:	ldr	r2, [sp, #24]
   19014:	ldr	sl, [r8]
   19018:	sub	r3, r2, r3
   1901c:	ldr	r2, [sp, #20]
   19020:	asr	r1, r3, #4
   19024:	sub	sl, r2, sl
   19028:	ldr	r3, [r8, #24]
   1902c:	asr	sl, sl, #4
   19030:	ldr	lr, [r8, #20]
   19034:	str	r3, [sp, #28]
   19038:	b	18e80 <__assert_fail@plt+0x6f38>
   1903c:	mvn	r5, #0
   19040:	b	18e44 <__assert_fail@plt+0x6efc>
   19044:	cmp	fp, lr
   19048:	beq	191ec <__assert_fail@plt+0x72a4>
   1904c:	cmp	r5, #0
   19050:	subne	lr, lr, #16
   19054:	sub	r5, r5, #1
   19058:	bne	19070 <__assert_fail@plt+0x7128>
   1905c:	b	191ec <__assert_fail@plt+0x72a4>
   19060:	cmn	r5, #1
   19064:	sub	r3, lr, #16
   19068:	beq	19128 <__assert_fail@plt+0x71e0>
   1906c:	mov	lr, r3
   19070:	ldm	lr, {r0, r1, r2, r3}
   19074:	sub	r6, r6, #16
   19078:	cmp	fp, lr
   1907c:	str	lr, [r8]
   19080:	sub	r5, r5, #1
   19084:	stm	r6, {r0, r1, r2, r3}
   19088:	bne	19060 <__assert_fail@plt+0x7118>
   1908c:	ldr	r3, [sp, #20]
   19090:	ldr	lr, [r8, #20]
   19094:	sub	sl, r3, fp
   19098:	ldr	r1, [sp, #28]
   1909c:	asr	sl, sl, #4
   190a0:	b	18e78 <__assert_fail@plt+0x6f30>
   190a4:	ldr	fp, [r8, #12]
   190a8:	cmp	fp, ip
   190ac:	beq	191f4 <__assert_fail@plt+0x72ac>
   190b0:	cmp	r5, #0
   190b4:	sub	r5, r5, #1
   190b8:	beq	191f4 <__assert_fail@plt+0x72ac>
   190bc:	sub	ip, ip, #16
   190c0:	b	190d4 <__assert_fail@plt+0x718c>
   190c4:	cmn	r5, #1
   190c8:	sub	r3, ip, #16
   190cc:	beq	190f0 <__assert_fail@plt+0x71a8>
   190d0:	mov	ip, r3
   190d4:	ldm	ip, {r0, r1, r2, r3}
   190d8:	sub	r6, r6, #16
   190dc:	cmp	ip, fp
   190e0:	str	ip, [r8, #4]
   190e4:	sub	r5, r5, #1
   190e8:	stm	r6, {r0, r1, r2, r3}
   190ec:	bne	190c4 <__assert_fail@plt+0x717c>
   190f0:	ldr	r3, [sp, #24]
   190f4:	sub	ip, r3, ip
   190f8:	mov	r3, lr
   190fc:	asr	r1, ip, #4
   19100:	mov	lr, sl
   19104:	mov	sl, r3
   19108:	b	18e78 <__assert_fail@plt+0x6f30>
   1910c:	ldr	r0, [sp, #32]
   19110:	bl	119f0 <pthread_mutex_unlock@plt>
   19114:	mov	r1, r8
   19118:	mov	r0, r7
   1911c:	bl	15c48 <__assert_fail@plt+0x3d00>
   19120:	add	sp, sp, #76	; 0x4c
   19124:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19128:	ldr	r3, [sp, #20]
   1912c:	ldr	r1, [sp, #28]
   19130:	sub	sl, r3, lr
   19134:	ldr	lr, [r8, #20]
   19138:	asr	sl, sl, #4
   1913c:	b	18e78 <__assert_fail@plt+0x6f30>
   19140:	mvn	r5, #0
   19144:	b	18f88 <__assert_fail@plt+0x7040>
   19148:	cmp	ip, r2
   1914c:	beq	19204 <__assert_fail@plt+0x72bc>
   19150:	cmp	r5, #0
   19154:	sub	r5, r5, #1
   19158:	beq	19204 <__assert_fail@plt+0x72bc>
   1915c:	ldr	r6, [sp, #116]	; 0x74
   19160:	ldr	sl, [sp, #120]	; 0x78
   19164:	b	19170 <__assert_fail@plt+0x7228>
   19168:	cmn	r5, #1
   1916c:	beq	19198 <__assert_fail@plt+0x7250>
   19170:	sub	r0, r2, #16
   19174:	str	r0, [r8]
   19178:	mov	r2, sl
   1917c:	mov	r1, r6
   19180:	bl	17b6c <__assert_fail@plt+0x5c24>
   19184:	ldr	r2, [r8]
   19188:	ldr	r3, [r8, #8]
   1918c:	sub	r5, r5, #1
   19190:	cmp	r2, r3
   19194:	bne	19168 <__assert_fail@plt+0x7220>
   19198:	ldr	r3, [sp, #20]
   1919c:	ldr	r1, [r8, #4]
   191a0:	sub	r2, r3, r2
   191a4:	ldr	r3, [sp, #24]
   191a8:	asr	sl, r2, #4
   191ac:	sub	r1, r3, r1
   191b0:	ldr	r3, [r8, #24]
   191b4:	asr	r1, r1, #4
   191b8:	ldr	lr, [r8, #20]
   191bc:	str	r3, [sp, #28]
   191c0:	b	18e80 <__assert_fail@plt+0x6f38>
   191c4:	add	r3, sp, #44	; 0x2c
   191c8:	ldr	r2, [pc, #124]	; 1924c <__assert_fail@plt+0x7304>
   191cc:	mov	r1, #0
   191d0:	add	r0, sp, #40	; 0x28
   191d4:	bl	11c6c <pthread_create@plt>
   191d8:	subs	r8, r0, #0
   191dc:	beq	19210 <__assert_fail@plt+0x72c8>
   191e0:	ldr	fp, [r4, #20]
   191e4:	ldr	r8, [r4, #24]
   191e8:	b	18cc0 <__assert_fail@plt+0x6d78>
   191ec:	ldr	lr, [r8, #20]
   191f0:	b	18e78 <__assert_fail@plt+0x6f30>
   191f4:	mov	lr, sl
   191f8:	b	18e78 <__assert_fail@plt+0x6f30>
   191fc:	mov	lr, sl
   19200:	b	18e80 <__assert_fail@plt+0x6f38>
   19204:	ldr	lr, [r8, #20]
   19208:	str	r1, [sp, #28]
   1920c:	b	18e80 <__assert_fail@plt+0x6f38>
   19210:	ldr	r2, [sp, #120]	; 0x78
   19214:	ldr	r0, [r4, #20]
   19218:	ldr	r3, [r4, #36]	; 0x24
   1921c:	str	r2, [sp, #8]
   19220:	ldr	r2, [sp, #116]	; 0x74
   19224:	sub	r1, r5, r9
   19228:	str	r2, [sp, #4]
   1922c:	sub	r0, r6, r0, lsl #4
   19230:	str	r7, [sp]
   19234:	ldr	r2, [sp, #36]	; 0x24
   19238:	bl	18c60 <__assert_fail@plt+0x6d18>
   1923c:	mov	r1, r8
   19240:	ldr	r0, [sp, #40]	; 0x28
   19244:	bl	11e64 <pthread_join@plt>
   19248:	b	19120 <__assert_fail@plt+0x71d8>
   1924c:	andeq	r9, r1, r0, asr r2
   19250:	push	{r4, r5, lr}
   19254:	sub	sp, sp, #20
   19258:	ldr	lr, [r0, #20]
   1925c:	ldr	ip, [r0, #16]
   19260:	ldr	r5, [r0]
   19264:	ldr	r4, [r0, #24]
   19268:	ldmib	r0, {r1, r2, r3}
   1926c:	mov	r0, r5
   19270:	str	r4, [sp, #8]
   19274:	stm	sp, {ip, lr}
   19278:	bl	18c60 <__assert_fail@plt+0x6d18>
   1927c:	mov	r0, #0
   19280:	add	sp, sp, #20
   19284:	pop	{r4, r5, pc}
   19288:	subs	r5, r0, #0
   1928c:	push	{r7, lr}
   19290:	sub	sp, sp, #56	; 0x38
   19294:	beq	192d0 <__assert_fail@plt+0x7388>
   19298:	ldr	r3, [pc, #1056]	; 196c0 <__assert_fail@plt+0x7778>
   1929c:	mov	r2, #5
   192a0:	ldr	r1, [pc, #1052]	; 196c4 <__assert_fail@plt+0x777c>
   192a4:	mov	r0, #0
   192a8:	ldr	r4, [r3]
   192ac:	bl	11b58 <dcgettext@plt>
   192b0:	ldr	r3, [pc, #1040]	; 196c8 <__assert_fail@plt+0x7780>
   192b4:	mov	r1, #1
   192b8:	ldr	r3, [r3]
   192bc:	mov	r2, r0
   192c0:	mov	r0, r4
   192c4:	bl	11dd4 <__fprintf_chk@plt>
   192c8:	mov	r0, r5
   192cc:	bl	11d38 <exit@plt>
   192d0:	mov	r2, #5
   192d4:	ldr	r1, [pc, #1008]	; 196cc <__assert_fail@plt+0x7784>
   192d8:	bl	11b58 <dcgettext@plt>
   192dc:	ldr	r3, [pc, #996]	; 196c8 <__assert_fail@plt+0x7780>
   192e0:	ldr	r6, [pc, #1000]	; 196d0 <__assert_fail@plt+0x7788>
   192e4:	ldr	r4, [pc, #1000]	; 196d4 <__assert_fail@plt+0x778c>
   192e8:	ldr	r3, [r3]
   192ec:	mov	r2, r3
   192f0:	mov	r1, r0
   192f4:	mov	r0, #1
   192f8:	bl	11db0 <__printf_chk@plt>
   192fc:	mov	r2, #5
   19300:	ldr	r1, [pc, #976]	; 196d8 <__assert_fail@plt+0x7790>
   19304:	mov	r0, r5
   19308:	bl	11b58 <dcgettext@plt>
   1930c:	ldr	r1, [r6]
   19310:	bl	11a14 <fputs_unlocked@plt>
   19314:	mov	r2, #5
   19318:	ldr	r1, [pc, #956]	; 196dc <__assert_fail@plt+0x7794>
   1931c:	mov	r0, r5
   19320:	bl	11b58 <dcgettext@plt>
   19324:	ldr	r1, [r6]
   19328:	bl	11a14 <fputs_unlocked@plt>
   1932c:	mov	r2, #5
   19330:	ldr	r1, [pc, #936]	; 196e0 <__assert_fail@plt+0x7798>
   19334:	mov	r0, r5
   19338:	bl	11b58 <dcgettext@plt>
   1933c:	ldr	r1, [r6]
   19340:	bl	11a14 <fputs_unlocked@plt>
   19344:	mov	r2, #5
   19348:	ldr	r1, [pc, #916]	; 196e4 <__assert_fail@plt+0x779c>
   1934c:	mov	r0, r5
   19350:	bl	11b58 <dcgettext@plt>
   19354:	ldr	r1, [r6]
   19358:	bl	11a14 <fputs_unlocked@plt>
   1935c:	mov	r2, #5
   19360:	ldr	r1, [pc, #896]	; 196e8 <__assert_fail@plt+0x77a0>
   19364:	mov	r0, r5
   19368:	bl	11b58 <dcgettext@plt>
   1936c:	ldr	r1, [r6]
   19370:	bl	11a14 <fputs_unlocked@plt>
   19374:	mov	r2, #5
   19378:	ldr	r1, [pc, #876]	; 196ec <__assert_fail@plt+0x77a4>
   1937c:	mov	r0, r5
   19380:	bl	11b58 <dcgettext@plt>
   19384:	ldr	r1, [r6]
   19388:	bl	11a14 <fputs_unlocked@plt>
   1938c:	mov	r2, #5
   19390:	ldr	r1, [pc, #856]	; 196f0 <__assert_fail@plt+0x77a8>
   19394:	mov	r0, r5
   19398:	bl	11b58 <dcgettext@plt>
   1939c:	ldr	r1, [r6]
   193a0:	bl	11a14 <fputs_unlocked@plt>
   193a4:	mov	r2, #5
   193a8:	ldr	r1, [pc, #836]	; 196f4 <__assert_fail@plt+0x77ac>
   193ac:	mov	r0, r5
   193b0:	bl	11b58 <dcgettext@plt>
   193b4:	ldr	r1, [r6]
   193b8:	bl	11a14 <fputs_unlocked@plt>
   193bc:	mov	r2, #5
   193c0:	ldr	r1, [pc, #816]	; 196f8 <__assert_fail@plt+0x77b0>
   193c4:	mov	r0, r5
   193c8:	bl	11b58 <dcgettext@plt>
   193cc:	ldr	r1, [r6]
   193d0:	bl	11a14 <fputs_unlocked@plt>
   193d4:	mov	r2, #5
   193d8:	ldr	r1, [pc, #796]	; 196fc <__assert_fail@plt+0x77b4>
   193dc:	mov	r0, r5
   193e0:	bl	11b58 <dcgettext@plt>
   193e4:	ldr	r1, [r6]
   193e8:	bl	11a14 <fputs_unlocked@plt>
   193ec:	mov	r2, #5
   193f0:	ldr	r1, [pc, #776]	; 19700 <__assert_fail@plt+0x77b8>
   193f4:	mov	r0, r5
   193f8:	bl	11b58 <dcgettext@plt>
   193fc:	ldr	r1, [r6]
   19400:	bl	11a14 <fputs_unlocked@plt>
   19404:	mov	r2, #5
   19408:	ldr	r1, [pc, #756]	; 19704 <__assert_fail@plt+0x77bc>
   1940c:	mov	r0, r5
   19410:	bl	11b58 <dcgettext@plt>
   19414:	ldr	r1, [r6]
   19418:	bl	11a14 <fputs_unlocked@plt>
   1941c:	mov	r2, #5
   19420:	ldr	r1, [pc, #736]	; 19708 <__assert_fail@plt+0x77c0>
   19424:	mov	r0, r5
   19428:	bl	11b58 <dcgettext@plt>
   1942c:	ldr	r1, [r6]
   19430:	bl	11a14 <fputs_unlocked@plt>
   19434:	mov	r2, #5
   19438:	ldr	r1, [pc, #716]	; 1970c <__assert_fail@plt+0x77c4>
   1943c:	mov	r0, r5
   19440:	bl	11b58 <dcgettext@plt>
   19444:	ldr	r1, [r6]
   19448:	bl	11a14 <fputs_unlocked@plt>
   1944c:	mov	r2, #5
   19450:	ldr	r1, [pc, #696]	; 19710 <__assert_fail@plt+0x77c8>
   19454:	mov	r0, r5
   19458:	bl	11b58 <dcgettext@plt>
   1945c:	ldr	r1, [r6]
   19460:	bl	11a14 <fputs_unlocked@plt>
   19464:	mov	r2, #5
   19468:	ldr	r1, [pc, #676]	; 19714 <__assert_fail@plt+0x77cc>
   1946c:	mov	r0, r5
   19470:	bl	11b58 <dcgettext@plt>
   19474:	ldr	r2, [pc, #668]	; 19718 <__assert_fail@plt+0x77d0>
   19478:	mov	r1, r0
   1947c:	mov	r0, #1
   19480:	bl	11db0 <__printf_chk@plt>
   19484:	mov	r2, #5
   19488:	ldr	r1, [pc, #652]	; 1971c <__assert_fail@plt+0x77d4>
   1948c:	mov	r0, r5
   19490:	bl	11b58 <dcgettext@plt>
   19494:	ldr	r1, [r6]
   19498:	bl	11a14 <fputs_unlocked@plt>
   1949c:	mov	r2, #5
   194a0:	ldr	r1, [pc, #632]	; 19720 <__assert_fail@plt+0x77d8>
   194a4:	mov	r0, r5
   194a8:	bl	11b58 <dcgettext@plt>
   194ac:	ldr	r1, [r6]
   194b0:	bl	11a14 <fputs_unlocked@plt>
   194b4:	mov	r2, #5
   194b8:	ldr	r1, [pc, #612]	; 19724 <__assert_fail@plt+0x77dc>
   194bc:	mov	r0, r5
   194c0:	bl	11b58 <dcgettext@plt>
   194c4:	ldr	r1, [r6]
   194c8:	bl	11a14 <fputs_unlocked@plt>
   194cc:	mov	r2, #5
   194d0:	ldr	r1, [pc, #592]	; 19728 <__assert_fail@plt+0x77e0>
   194d4:	mov	r0, r5
   194d8:	bl	11b58 <dcgettext@plt>
   194dc:	ldr	r1, [r6]
   194e0:	bl	11a14 <fputs_unlocked@plt>
   194e4:	mov	r2, #5
   194e8:	ldr	r1, [pc, #572]	; 1972c <__assert_fail@plt+0x77e4>
   194ec:	mov	r0, r5
   194f0:	bl	11b58 <dcgettext@plt>
   194f4:	ldr	r1, [r6]
   194f8:	bl	11a14 <fputs_unlocked@plt>
   194fc:	ldm	r4!, {r0, r1, r2, r3}
   19500:	mov	lr, sp
   19504:	stmia	lr!, {r0, r1, r2, r3}
   19508:	ldm	r4!, {r0, r1, r2, r3}
   1950c:	ldr	ip, [sp]
   19510:	stmia	lr!, {r0, r1, r2, r3}
   19514:	cmp	ip, #0
   19518:	ldm	r4!, {r0, r1, r2, r3}
   1951c:	stmia	lr!, {r0, r1, r2, r3}
   19520:	ldm	r4, {r0, r1}
   19524:	moveq	r4, sp
   19528:	stm	lr, {r0, r1}
   1952c:	beq	1955c <__assert_fail@plt+0x7614>
   19530:	ldr	r7, [pc, #504]	; 19730 <__assert_fail@plt+0x77e8>
   19534:	mov	r4, sp
   19538:	b	19548 <__assert_fail@plt+0x7600>
   1953c:	ldr	ip, [r4, #8]!
   19540:	cmp	ip, #0
   19544:	beq	1955c <__assert_fail@plt+0x7614>
   19548:	mov	r1, ip
   1954c:	mov	r0, r7
   19550:	bl	11a2c <strcmp@plt>
   19554:	cmp	r0, #0
   19558:	bne	1953c <__assert_fail@plt+0x75f4>
   1955c:	ldr	r4, [r4, #4]
   19560:	mov	r2, #5
   19564:	cmp	r4, #0
   19568:	ldr	r1, [pc, #452]	; 19734 <__assert_fail@plt+0x77ec>
   1956c:	beq	19614 <__assert_fail@plt+0x76cc>
   19570:	mov	r0, #0
   19574:	bl	11b58 <dcgettext@plt>
   19578:	ldr	r3, [pc, #440]	; 19738 <__assert_fail@plt+0x77f0>
   1957c:	ldr	r2, [pc, #440]	; 1973c <__assert_fail@plt+0x77f4>
   19580:	mov	r1, r0
   19584:	mov	r0, #1
   19588:	bl	11db0 <__printf_chk@plt>
   1958c:	mov	r1, #0
   19590:	mov	r0, #5
   19594:	bl	11e28 <setlocale@plt>
   19598:	cmp	r0, #0
   1959c:	ldreq	r7, [pc, #396]	; 19730 <__assert_fail@plt+0x77e8>
   195a0:	beq	195bc <__assert_fail@plt+0x7674>
   195a4:	mov	r2, #3
   195a8:	ldr	r1, [pc, #400]	; 19740 <__assert_fail@plt+0x77f8>
   195ac:	bl	11f0c <strncmp@plt>
   195b0:	ldr	r7, [pc, #376]	; 19730 <__assert_fail@plt+0x77e8>
   195b4:	cmp	r0, #0
   195b8:	bne	196a4 <__assert_fail@plt+0x775c>
   195bc:	mov	r2, #5
   195c0:	ldr	r1, [pc, #380]	; 19744 <__assert_fail@plt+0x77fc>
   195c4:	mov	r0, #0
   195c8:	bl	11b58 <dcgettext@plt>
   195cc:	ldr	r3, [pc, #348]	; 19730 <__assert_fail@plt+0x77e8>
   195d0:	ldr	r2, [pc, #352]	; 19738 <__assert_fail@plt+0x77f0>
   195d4:	mov	r1, r0
   195d8:	mov	r0, #1
   195dc:	bl	11db0 <__printf_chk@plt>
   195e0:	mov	r2, #5
   195e4:	ldr	r1, [pc, #348]	; 19748 <__assert_fail@plt+0x7800>
   195e8:	mov	r0, #0
   195ec:	bl	11b58 <dcgettext@plt>
   195f0:	ldr	r2, [pc, #340]	; 1974c <__assert_fail@plt+0x7804>
   195f4:	cmp	r4, r7
   195f8:	ldr	r3, [pc, #336]	; 19750 <__assert_fail@plt+0x7808>
   195fc:	movne	r3, r2
   19600:	mov	r1, r0
   19604:	mov	r2, r4
   19608:	mov	r0, #1
   1960c:	bl	11db0 <__printf_chk@plt>
   19610:	b	192c8 <__assert_fail@plt+0x7380>
   19614:	mov	r0, r4
   19618:	bl	11b58 <dcgettext@plt>
   1961c:	ldr	r3, [pc, #276]	; 19738 <__assert_fail@plt+0x77f0>
   19620:	ldr	r2, [pc, #276]	; 1973c <__assert_fail@plt+0x77f4>
   19624:	mov	r1, r0
   19628:	mov	r0, #1
   1962c:	bl	11db0 <__printf_chk@plt>
   19630:	mov	r1, r4
   19634:	mov	r0, #5
   19638:	bl	11e28 <setlocale@plt>
   1963c:	cmp	r0, #0
   19640:	beq	19658 <__assert_fail@plt+0x7710>
   19644:	mov	r2, #3
   19648:	ldr	r1, [pc, #240]	; 19740 <__assert_fail@plt+0x77f8>
   1964c:	bl	11f0c <strncmp@plt>
   19650:	cmp	r0, #0
   19654:	bne	1969c <__assert_fail@plt+0x7754>
   19658:	mov	r2, #5
   1965c:	ldr	r1, [pc, #224]	; 19744 <__assert_fail@plt+0x77fc>
   19660:	mov	r0, #0
   19664:	bl	11b58 <dcgettext@plt>
   19668:	ldr	r3, [pc, #192]	; 19730 <__assert_fail@plt+0x77e8>
   1966c:	ldr	r2, [pc, #196]	; 19738 <__assert_fail@plt+0x77f0>
   19670:	mov	r4, r3
   19674:	mov	r1, r0
   19678:	mov	r0, #1
   1967c:	bl	11db0 <__printf_chk@plt>
   19680:	ldr	r1, [pc, #192]	; 19748 <__assert_fail@plt+0x7800>
   19684:	mov	r2, #5
   19688:	mov	r0, #0
   1968c:	bl	11b58 <dcgettext@plt>
   19690:	ldr	r3, [pc, #184]	; 19750 <__assert_fail@plt+0x7808>
   19694:	mov	r1, r0
   19698:	b	19604 <__assert_fail@plt+0x76bc>
   1969c:	ldr	r7, [pc, #140]	; 19730 <__assert_fail@plt+0x77e8>
   196a0:	mov	r4, r7
   196a4:	mov	r2, #5
   196a8:	ldr	r1, [pc, #164]	; 19754 <__assert_fail@plt+0x780c>
   196ac:	mov	r0, #0
   196b0:	bl	11b58 <dcgettext@plt>
   196b4:	ldr	r1, [r6]
   196b8:	bl	11a14 <fputs_unlocked@plt>
   196bc:	b	195bc <__assert_fail@plt+0x7674>
   196c0:	andeq	r5, r3, r8, asr #5
   196c4:	andeq	r2, r2, r8, lsr #20
   196c8:	andeq	r5, r3, ip, asr #17
   196cc:	andeq	r2, r2, r0, asr sl
   196d0:	ldrdeq	r5, [r3], -r4
   196d4:	andeq	r2, r2, ip, lsr #9
   196d8:	muleq	r2, r8, sl
   196dc:	ldrdeq	r2, [r2], -r8
   196e0:	andeq	r2, r2, r0, lsl fp
   196e4:	andeq	r2, r2, ip, asr fp
   196e8:	andeq	r2, r2, r0, ror fp
   196ec:	andeq	r2, r2, ip, lsr ip
   196f0:	andeq	r2, r2, r0, lsl sp
   196f4:	andeq	r2, r2, ip, asr sp
   196f8:	andeq	r2, r2, r0, ror lr
   196fc:	andeq	r2, r2, r8, lsl #31
   19700:	muleq	r2, ip, pc	; <UNPREDICTABLE>
   19704:	andeq	r3, r2, r4, lsl r0
   19708:	andeq	r3, r2, ip, lsr #2
   1970c:	andeq	r3, r2, r8, lsl #5
   19710:	andeq	r3, r2, r8, lsl r3
   19714:	strdeq	r3, [r2], -r0
   19718:			; <UNDEFINED> instruction: 0x000235b8
   1971c:	andeq	r3, r2, r0, asr #11
   19720:	andeq	r3, r2, r0, lsl #12
   19724:	andeq	r3, r2, r0, lsr r6
   19728:	andeq	r3, r2, r8, ror #12
   1972c:	andeq	r3, r2, r4, asr #17
   19730:	andeq	r4, r2, r4, ror #5
   19734:	andeq	r3, r2, ip, lsr #19
   19738:	andeq	r3, r2, r4, asr #19
   1973c:	andeq	r3, r2, ip, ror #19
   19740:	strdeq	r3, [r2], -ip
   19744:	andeq	r3, r2, r8, asr #20
   19748:	andeq	r3, r2, r4, ror #20
   1974c:	muleq	r2, r8, pc	; <UNPREDICTABLE>
   19750:			; <UNDEFINED> instruction: 0x000241bc
   19754:	andeq	r3, r2, r0, lsl #20
   19758:	mov	r0, #1
   1975c:	b	19288 <__assert_fail@plt+0x7340>
   19760:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19764:	mov	r5, r1
   19768:	sub	sp, sp, #12
   1976c:	mov	r4, r2
   19770:	str	r2, [sp]
   19774:	mov	r7, r3
   19778:	mov	sl, r0
   1977c:	bl	11d50 <strlen@plt>
   19780:	ldr	fp, [r5]
   19784:	cmp	fp, #0
   19788:	beq	19850 <__assert_fail@plt+0x7908>
   1978c:	mov	r3, #0
   19790:	mov	r8, r0
   19794:	str	r3, [sp, #4]
   19798:	mov	r6, r3
   1979c:	mvn	r9, #0
   197a0:	b	197cc <__assert_fail@plt+0x7884>
   197a4:	bl	11b40 <memcmp@plt>
   197a8:	ldr	r3, [sp, #4]
   197ac:	cmp	r0, #0
   197b0:	movne	r3, #1
   197b4:	str	r3, [sp, #4]
   197b8:	ldr	fp, [r5, #4]!
   197bc:	add	r6, r6, #1
   197c0:	cmp	fp, #0
   197c4:	add	r4, r4, r7
   197c8:	beq	19828 <__assert_fail@plt+0x78e0>
   197cc:	mov	r2, r8
   197d0:	mov	r1, sl
   197d4:	mov	r0, fp
   197d8:	bl	11f0c <strncmp@plt>
   197dc:	cmp	r0, #0
   197e0:	mov	r0, fp
   197e4:	bne	197b8 <__assert_fail@plt+0x7870>
   197e8:	bl	11d50 <strlen@plt>
   197ec:	ldr	r3, [sp]
   197f0:	mov	r2, r7
   197f4:	mov	r1, r4
   197f8:	cmp	r8, r0
   197fc:	mla	r0, r7, r9, r3
   19800:	beq	19840 <__assert_fail@plt+0x78f8>
   19804:	cmn	r9, #1
   19808:	moveq	r9, r6
   1980c:	beq	197b8 <__assert_fail@plt+0x7870>
   19810:	ldr	r3, [sp]
   19814:	cmp	r3, #0
   19818:	bne	197a4 <__assert_fail@plt+0x785c>
   1981c:	mov	r3, #1
   19820:	str	r3, [sp, #4]
   19824:	b	197b8 <__assert_fail@plt+0x7870>
   19828:	ldr	r3, [sp, #4]
   1982c:	cmp	r3, #0
   19830:	mvnne	r9, #1
   19834:	mov	r0, r9
   19838:	add	sp, sp, #12
   1983c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19840:	mov	r9, r6
   19844:	mov	r0, r9
   19848:	add	sp, sp, #12
   1984c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19850:	mvn	r9, #0
   19854:	b	19834 <__assert_fail@plt+0x78ec>
   19858:	push	{r4, r5, r6, lr}
   1985c:	mov	r6, r0
   19860:	ldr	r0, [r1]
   19864:	cmp	r0, #0
   19868:	beq	198a0 <__assert_fail@plt+0x7958>
   1986c:	mov	r4, r1
   19870:	mov	r5, #0
   19874:	b	19888 <__assert_fail@plt+0x7940>
   19878:	ldr	r0, [r4, #4]!
   1987c:	add	r5, r5, #1
   19880:	cmp	r0, #0
   19884:	beq	198a0 <__assert_fail@plt+0x7958>
   19888:	mov	r1, r6
   1988c:	bl	11a2c <strcmp@plt>
   19890:	cmp	r0, #0
   19894:	bne	19878 <__assert_fail@plt+0x7930>
   19898:	mov	r0, r5
   1989c:	pop	{r4, r5, r6, pc}
   198a0:	mvn	r0, #0
   198a4:	pop	{r4, r5, r6, pc}
   198a8:	cmn	r2, #1
   198ac:	push	{r4, r5, r6, lr}
   198b0:	mov	r2, #5
   198b4:	sub	sp, sp, #8
   198b8:	mov	r4, r1
   198bc:	mov	r5, r0
   198c0:	ldreq	r1, [pc, #76]	; 19914 <__assert_fail@plt+0x79cc>
   198c4:	ldrne	r1, [pc, #76]	; 19918 <__assert_fail@plt+0x79d0>
   198c8:	mov	r0, #0
   198cc:	bl	11b58 <dcgettext@plt>
   198d0:	mov	r2, r4
   198d4:	mov	r1, #8
   198d8:	mov	r6, r0
   198dc:	mov	r0, #0
   198e0:	bl	1e774 <__assert_fail@plt+0xc82c>
   198e4:	mov	r1, r5
   198e8:	mov	r4, r0
   198ec:	mov	r0, #1
   198f0:	bl	1ea10 <__assert_fail@plt+0xcac8>
   198f4:	mov	r1, #0
   198f8:	mov	r3, r4
   198fc:	mov	r2, r6
   19900:	str	r0, [sp]
   19904:	mov	r0, r1
   19908:	bl	11c90 <error@plt>
   1990c:	add	sp, sp, #8
   19910:	pop	{r4, r5, r6, pc}
   19914:	andeq	r4, r2, r8, lsl r4
   19918:	andeq	r4, r2, r4, lsr r4
   1991c:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19920:	mov	r6, r0
   19924:	ldr	r9, [pc, #232]	; 19a14 <__assert_fail@plt+0x7acc>
   19928:	mov	r4, r1
   1992c:	mov	r7, r2
   19930:	ldr	r1, [pc, #224]	; 19a18 <__assert_fail@plt+0x7ad0>
   19934:	mov	r2, #5
   19938:	mov	r0, #0
   1993c:	bl	11b58 <dcgettext@plt>
   19940:	ldr	r1, [r9]
   19944:	bl	11a14 <fputs_unlocked@plt>
   19948:	ldr	fp, [r6]
   1994c:	cmp	fp, #0
   19950:	movne	r8, #0
   19954:	movne	r5, r8
   19958:	movne	sl, #1
   1995c:	bne	1999c <__assert_fail@plt+0x7a54>
   19960:	b	199e0 <__assert_fail@plt+0x7a98>
   19964:	mov	r0, fp
   19968:	ldr	r8, [r9]
   1996c:	bl	1ea20 <__assert_fail@plt+0xcad8>
   19970:	ldr	r2, [pc, #164]	; 19a1c <__assert_fail@plt+0x7ad4>
   19974:	mov	r1, sl
   19978:	mov	r3, r0
   1997c:	mov	r0, r8
   19980:	bl	11dd4 <__fprintf_chk@plt>
   19984:	mov	r8, r4
   19988:	ldr	fp, [r6, #4]!
   1998c:	add	r5, r5, #1
   19990:	cmp	fp, #0
   19994:	add	r4, r4, r7
   19998:	beq	199e0 <__assert_fail@plt+0x7a98>
   1999c:	cmp	r5, #0
   199a0:	mov	r1, r4
   199a4:	mov	r2, r7
   199a8:	mov	r0, r8
   199ac:	beq	19964 <__assert_fail@plt+0x7a1c>
   199b0:	bl	11b40 <memcmp@plt>
   199b4:	cmp	r0, #0
   199b8:	bne	19964 <__assert_fail@plt+0x7a1c>
   199bc:	mov	r0, fp
   199c0:	ldr	fp, [r9]
   199c4:	bl	1ea20 <__assert_fail@plt+0xcad8>
   199c8:	ldr	r2, [pc, #80]	; 19a20 <__assert_fail@plt+0x7ad8>
   199cc:	mov	r1, sl
   199d0:	mov	r3, r0
   199d4:	mov	r0, fp
   199d8:	bl	11dd4 <__fprintf_chk@plt>
   199dc:	b	19988 <__assert_fail@plt+0x7a40>
   199e0:	ldr	r0, [r9]
   199e4:	ldr	r3, [r0, #20]
   199e8:	ldr	r2, [r0, #24]
   199ec:	cmp	r3, r2
   199f0:	bcs	19a08 <__assert_fail@plt+0x7ac0>
   199f4:	add	r1, r3, #1
   199f8:	mov	r2, #10
   199fc:	str	r1, [r0, #20]
   19a00:	strb	r2, [r3]
   19a04:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19a08:	mov	r1, #10
   19a0c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19a10:	b	11e1c <__overflow@plt>
   19a14:	andeq	r5, r3, r8, asr #5
   19a18:	andeq	r4, r2, r4, asr r4
   19a1c:	andeq	r4, r2, ip, ror #8
   19a20:	andeq	r4, r2, r4, ror r4
   19a24:	push	{r4, r5, r6, r7, r8, lr}
   19a28:	mov	r7, r0
   19a2c:	ldrb	ip, [sp, #32]
   19a30:	mov	r5, r1
   19a34:	mov	r4, r2
   19a38:	cmp	ip, #0
   19a3c:	mov	r6, r3
   19a40:	beq	19a90 <__assert_fail@plt+0x7b48>
   19a44:	ldr	r3, [sp, #24]
   19a48:	mov	r2, r6
   19a4c:	mov	r1, r4
   19a50:	mov	r0, r5
   19a54:	bl	19760 <__assert_fail@plt+0x7818>
   19a58:	cmp	r0, #0
   19a5c:	popge	{r4, r5, r6, r7, r8, pc}
   19a60:	mov	r2, r0
   19a64:	mov	r1, r5
   19a68:	mov	r0, r7
   19a6c:	bl	198a8 <__assert_fail@plt+0x7960>
   19a70:	mov	r0, r4
   19a74:	ldr	r2, [sp, #24]
   19a78:	mov	r1, r6
   19a7c:	bl	1991c <__assert_fail@plt+0x79d4>
   19a80:	ldr	r3, [sp, #28]
   19a84:	blx	r3
   19a88:	mvn	r0, #0
   19a8c:	pop	{r4, r5, r6, r7, r8, pc}
   19a90:	mov	r1, r2
   19a94:	mov	r0, r5
   19a98:	bl	19858 <__assert_fail@plt+0x7910>
   19a9c:	cmp	r0, #0
   19aa0:	popge	{r4, r5, r6, r7, r8, pc}
   19aa4:	b	19a60 <__assert_fail@plt+0x7b18>
   19aa8:	push	{r4, r5, r6, r7, r8, lr}
   19aac:	ldr	r7, [r1]
   19ab0:	cmp	r7, #0
   19ab4:	beq	19af4 <__assert_fail@plt+0x7bac>
   19ab8:	mov	r6, r3
   19abc:	mov	r8, r0
   19ac0:	mov	r4, r2
   19ac4:	mov	r5, r1
   19ac8:	b	19ad8 <__assert_fail@plt+0x7b90>
   19acc:	ldr	r7, [r5, #4]!
   19ad0:	cmp	r7, #0
   19ad4:	beq	19af4 <__assert_fail@plt+0x7bac>
   19ad8:	mov	r1, r4
   19adc:	mov	r2, r6
   19ae0:	mov	r0, r8
   19ae4:	bl	11b40 <memcmp@plt>
   19ae8:	add	r4, r4, r6
   19aec:	cmp	r0, #0
   19af0:	bne	19acc <__assert_fail@plt+0x7b84>
   19af4:	mov	r0, r7
   19af8:	pop	{r4, r5, r6, r7, r8, pc}
   19afc:	ldr	r3, [pc, #4]	; 19b08 <__assert_fail@plt+0x7bc0>
   19b00:	str	r0, [r3]
   19b04:	bx	lr
   19b08:	andeq	r5, r3, r0, asr #17
   19b0c:	ldr	r3, [pc, #4]	; 19b18 <__assert_fail@plt+0x7bd0>
   19b10:	strb	r0, [r3, #4]
   19b14:	bx	lr
   19b18:	andeq	r5, r3, r0, asr #17
   19b1c:	ldr	r3, [pc, #192]	; 19be4 <__assert_fail@plt+0x7c9c>
   19b20:	push	{r4, r5, r6, lr}
   19b24:	sub	sp, sp, #8
   19b28:	ldr	r0, [r3]
   19b2c:	bl	20fa0 <__assert_fail@plt+0xf058>
   19b30:	cmp	r0, #0
   19b34:	beq	19b58 <__assert_fail@plt+0x7c10>
   19b38:	ldr	r4, [pc, #168]	; 19be8 <__assert_fail@plt+0x7ca0>
   19b3c:	ldrb	r3, [r4, #4]
   19b40:	cmp	r3, #0
   19b44:	beq	19b74 <__assert_fail@plt+0x7c2c>
   19b48:	bl	11d74 <__errno_location@plt>
   19b4c:	ldr	r3, [r0]
   19b50:	cmp	r3, #32
   19b54:	bne	19b74 <__assert_fail@plt+0x7c2c>
   19b58:	ldr	r3, [pc, #140]	; 19bec <__assert_fail@plt+0x7ca4>
   19b5c:	ldr	r0, [r3]
   19b60:	bl	20fa0 <__assert_fail@plt+0xf058>
   19b64:	cmp	r0, #0
   19b68:	bne	19bbc <__assert_fail@plt+0x7c74>
   19b6c:	add	sp, sp, #8
   19b70:	pop	{r4, r5, r6, pc}
   19b74:	mov	r2, #5
   19b78:	ldr	r1, [pc, #112]	; 19bf0 <__assert_fail@plt+0x7ca8>
   19b7c:	mov	r0, #0
   19b80:	bl	11b58 <dcgettext@plt>
   19b84:	ldr	r4, [r4]
   19b88:	cmp	r4, #0
   19b8c:	mov	r5, r0
   19b90:	beq	19bc8 <__assert_fail@plt+0x7c80>
   19b94:	bl	11d74 <__errno_location@plt>
   19b98:	ldr	r6, [r0]
   19b9c:	mov	r0, r4
   19ba0:	bl	1e888 <__assert_fail@plt+0xc940>
   19ba4:	mov	r1, r6
   19ba8:	str	r5, [sp]
   19bac:	ldr	r2, [pc, #64]	; 19bf4 <__assert_fail@plt+0x7cac>
   19bb0:	mov	r3, r0
   19bb4:	mov	r0, #0
   19bb8:	bl	11c90 <error@plt>
   19bbc:	ldr	r3, [pc, #52]	; 19bf8 <__assert_fail@plt+0x7cb0>
   19bc0:	ldr	r0, [r3]
   19bc4:	bl	11abc <_exit@plt>
   19bc8:	bl	11d74 <__errno_location@plt>
   19bcc:	mov	r3, r5
   19bd0:	ldr	r2, [pc, #36]	; 19bfc <__assert_fail@plt+0x7cb4>
   19bd4:	ldr	r1, [r0]
   19bd8:	mov	r0, r4
   19bdc:	bl	11c90 <error@plt>
   19be0:	b	19bbc <__assert_fail@plt+0x7c74>
   19be4:	ldrdeq	r5, [r3], -r4
   19be8:	andeq	r5, r3, r0, asr #17
   19bec:	andeq	r5, r3, r8, asr #5
   19bf0:	andeq	r4, r2, ip, ror r4
   19bf4:			; <UNDEFINED> instruction: 0x000227b4
   19bf8:	andeq	r5, r3, r0, ror r2
   19bfc:	andeq	r2, r2, r0, ror #17
   19c00:	push	{lr}		; (str lr, [sp, #-4]!)
   19c04:	mov	r3, #0
   19c08:	ldr	lr, [pc, #40]	; 19c38 <__assert_fail@plt+0x7cf0>
   19c0c:	ldr	ip, [pc, #40]	; 19c3c <__assert_fail@plt+0x7cf4>
   19c10:	ldr	r1, [pc, #40]	; 19c40 <__assert_fail@plt+0x7cf8>
   19c14:	ldr	r2, [pc, #40]	; 19c44 <__assert_fail@plt+0x7cfc>
   19c18:	str	lr, [r0]
   19c1c:	str	ip, [r0, #4]
   19c20:	str	r1, [r0, #8]
   19c24:	str	r2, [r0, #12]
   19c28:	str	r3, [r0, #20]
   19c2c:	str	r3, [r0, #16]
   19c30:	str	r3, [r0, #24]
   19c34:	pop	{pc}		; (ldr pc, [sp], #4)
   19c38:	strbvs	r2, [r5, -r1, lsl #6]
   19c3c:	svc	0x00cdab89
   19c40:	ldmls	sl!, {r1, r2, r3, r4, r5, r6, r7, sl, fp, ip, lr, pc}
   19c44:	eorsne	r5, r2, r6, ror r4
   19c48:	ldr	r2, [r0]
   19c4c:	mov	r3, r0
   19c50:	str	r2, [r1]
   19c54:	ldr	r2, [r3, #4]
   19c58:	mov	r0, r1
   19c5c:	str	r2, [r1, #4]
   19c60:	ldr	r2, [r3, #8]
   19c64:	str	r2, [r1, #8]
   19c68:	ldr	r3, [r3, #12]
   19c6c:	str	r3, [r1, #12]
   19c70:	bx	lr
   19c74:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19c78:	sub	sp, sp, #20
   19c7c:	ldr	r3, [r2, #16]
   19c80:	mov	lr, r2
   19c84:	str	r2, [sp, #12]
   19c88:	ldr	r2, [r2, #20]
   19c8c:	add	r3, r1, r3
   19c90:	bic	ip, r1, #3
   19c94:	add	ip, r0, ip
   19c98:	cmp	r1, r3
   19c9c:	movls	r1, r2
   19ca0:	addhi	r1, r2, #1
   19ca4:	str	r3, [lr, #16]
   19ca8:	ldr	r3, [lr]
   19cac:	cmp	r0, ip
   19cb0:	str	r1, [lr, #20]
   19cb4:	str	r3, [sp, #4]
   19cb8:	str	ip, [sp, #8]
   19cbc:	ldr	r3, [lr, #4]
   19cc0:	ldr	r1, [lr, #8]
   19cc4:	ldr	r2, [lr, #12]
   19cc8:	bcs	1a5fc <__assert_fail@plt+0x86b4>
   19ccc:	mov	r9, r0
   19cd0:	mov	lr, r3
   19cd4:	mov	r4, r1
   19cd8:	mov	r6, r2
   19cdc:	ldr	r3, [sp, #4]
   19ce0:	ldr	r2, [r9]
   19ce4:	add	r3, r3, #-687865856	; 0xd7000000
   19ce8:	add	r3, r3, #6946816	; 0x6a0000
   19cec:	eor	r8, r4, r6
   19cf0:	add	r3, r3, #41984	; 0xa400
   19cf4:	and	r8, r8, lr
   19cf8:	add	r3, r3, #120	; 0x78
   19cfc:	add	r3, r3, r2
   19d00:	eor	r8, r8, r6
   19d04:	add	r8, r8, r3
   19d08:	ldr	r5, [pc, #2296]	; 1a608 <__assert_fail@plt+0x86c0>
   19d0c:	add	r8, lr, r8, ror #25
   19d10:	ldr	r2, [r9, #4]
   19d14:	eor	r7, lr, r4
   19d18:	and	r7, r7, r8
   19d1c:	add	r5, r6, r5
   19d20:	add	r5, r5, r2
   19d24:	eor	r7, r7, r4
   19d28:	add	r7, r7, r5
   19d2c:	ldr	r0, [pc, #2264]	; 1a60c <__assert_fail@plt+0x86c4>
   19d30:	add	r7, r8, r7, ror #20
   19d34:	ldr	r2, [r9, #8]
   19d38:	eor	ip, r8, lr
   19d3c:	and	ip, ip, r7
   19d40:	add	r0, r4, r0
   19d44:	add	r0, r0, r2
   19d48:	eor	ip, ip, lr
   19d4c:	add	ip, ip, r0
   19d50:	ldr	r2, [pc, #2232]	; 1a610 <__assert_fail@plt+0x86c8>
   19d54:	add	ip, r7, ip, ror #15
   19d58:	ldr	r0, [r9, #12]
   19d5c:	eor	r1, r8, r7
   19d60:	and	r1, r1, ip
   19d64:	add	r2, lr, r2
   19d68:	add	r2, r2, r0
   19d6c:	eor	r1, r1, r8
   19d70:	ldr	r0, [r9, #16]
   19d74:	add	r1, r1, r2
   19d78:	ldr	r3, [pc, #2196]	; 1a614 <__assert_fail@plt+0x86cc>
   19d7c:	add	r1, ip, r1, ror #10
   19d80:	eor	r2, r7, ip
   19d84:	add	r3, r0, r3
   19d88:	ldr	r0, [r9, #20]
   19d8c:	and	r2, r2, r1
   19d90:	add	r8, r3, r8
   19d94:	add	r0, r0, #1191182336	; 0x47000000
   19d98:	eor	r3, r2, r7
   19d9c:	add	r3, r3, r8
   19da0:	add	r0, r0, #8847360	; 0x870000
   19da4:	add	r0, r0, #50688	; 0xc600
   19da8:	add	r3, r1, r3, ror #25
   19dac:	eor	r2, ip, r1
   19db0:	add	r0, r0, #42	; 0x2a
   19db4:	and	r2, r2, r3
   19db8:	add	r7, r0, r7
   19dbc:	ldr	r0, [r9, #24]
   19dc0:	eor	r5, r2, ip
   19dc4:	add	r5, r5, r7
   19dc8:	add	r0, r0, #-1476395008	; 0xa8000000
   19dcc:	add	r0, r0, #3162112	; 0x304000
   19dd0:	add	r5, r3, r5, ror #20
   19dd4:	eor	r2, r1, r3
   19dd8:	add	r0, r0, #1552	; 0x610
   19ddc:	and	r2, r2, r5
   19de0:	add	r0, r0, #3
   19de4:	add	ip, r0, ip
   19de8:	eor	r0, r2, r1
   19dec:	ldr	r2, [r9, #28]
   19df0:	add	r0, r0, ip
   19df4:	add	r2, r2, #-50331648	; 0xfd000000
   19df8:	add	r2, r2, #4587520	; 0x460000
   19dfc:	add	r0, r5, r0, ror #15
   19e00:	eor	ip, r3, r5
   19e04:	add	r2, r2, #38144	; 0x9500
   19e08:	and	ip, ip, r0
   19e0c:	add	r2, r2, #1
   19e10:	add	r1, r2, r1
   19e14:	eor	r2, ip, r3
   19e18:	ldr	ip, [r9, #32]
   19e1c:	add	r2, r2, r1
   19e20:	add	ip, ip, #1761607680	; 0x69000000
   19e24:	add	ip, ip, #8388608	; 0x800000
   19e28:	add	r2, r0, r2, ror #10
   19e2c:	eor	r1, r5, r0
   19e30:	add	ip, ip, #38912	; 0x9800
   19e34:	and	r1, r1, r2
   19e38:	add	ip, ip, #216	; 0xd8
   19e3c:	add	r3, ip, r3
   19e40:	eor	sl, r1, r5
   19e44:	add	sl, sl, r3
   19e48:	ldr	ip, [r9, #36]	; 0x24
   19e4c:	ldr	r1, [pc, #1988]	; 1a618 <__assert_fail@plt+0x86d0>
   19e50:	add	sl, r2, sl, ror #25
   19e54:	eor	r3, r0, r2
   19e58:	add	r1, ip, r1
   19e5c:	and	r3, r3, sl
   19e60:	add	r5, r1, r5
   19e64:	eor	r7, r3, r0
   19e68:	ldr	r1, [r9, #40]	; 0x28
   19e6c:	add	r7, r7, r5
   19e70:	sub	r1, r1, #41984	; 0xa400
   19e74:	add	r7, sl, r7, ror #20
   19e78:	eor	r3, r2, sl
   19e7c:	sub	r1, r1, #79	; 0x4f
   19e80:	and	r3, r3, r7
   19e84:	add	r0, r1, r0
   19e88:	ldr	r1, [r9, #44]	; 0x2c
   19e8c:	eor	r3, r3, r2
   19e90:	add	r0, r3, r0
   19e94:	add	r1, r1, #-1996488704	; 0x89000000
   19e98:	add	r1, r1, #6029312	; 0x5c0000
   19e9c:	add	ip, r7, r0, ror #15
   19ea0:	eor	r3, sl, r7
   19ea4:	add	r1, r1, #55040	; 0xd700
   19ea8:	and	r3, r3, ip
   19eac:	add	r1, r1, #190	; 0xbe
   19eb0:	add	r2, r1, r2
   19eb4:	eor	r1, r3, sl
   19eb8:	add	r1, r1, r2
   19ebc:	ldr	r8, [r9, #48]	; 0x30
   19ec0:	ldr	r0, [pc, #1876]	; 1a61c <__assert_fail@plt+0x86d4>
   19ec4:	add	r1, ip, r1, ror #10
   19ec8:	eor	r2, r7, ip
   19ecc:	add	r0, r8, r0
   19ed0:	and	r2, r2, r1
   19ed4:	add	sl, r0, sl
   19ed8:	eor	r3, r2, r7
   19edc:	add	r3, r3, sl
   19ee0:	ldr	r5, [r9, #52]	; 0x34
   19ee4:	ldr	r0, [pc, #1844]	; 1a620 <__assert_fail@plt+0x86d8>
   19ee8:	add	r3, r1, r3, ror #25
   19eec:	eor	r2, ip, r1
   19ef0:	add	r0, r5, r0
   19ef4:	and	r2, r2, r3
   19ef8:	add	r7, r0, r7
   19efc:	eor	r5, r2, ip
   19f00:	add	r5, r5, r7
   19f04:	ldr	sl, [r9, #56]	; 0x38
   19f08:	ldr	r7, [pc, #1812]	; 1a624 <__assert_fail@plt+0x86dc>
   19f0c:	add	r5, r3, r5, ror #20
   19f10:	eor	r2, r1, r3
   19f14:	add	r7, sl, r7
   19f18:	and	r2, r2, r5
   19f1c:	add	ip, r7, ip
   19f20:	eor	r0, r2, r1
   19f24:	add	r0, r0, ip
   19f28:	ldr	r7, [r9, #60]	; 0x3c
   19f2c:	ldr	r2, [pc, #1780]	; 1a628 <__assert_fail@plt+0x86e0>
   19f30:	add	r0, r5, r0, ror #15
   19f34:	eor	ip, r3, r5
   19f38:	add	r2, r7, r2
   19f3c:	and	ip, ip, r0
   19f40:	add	r1, r2, r1
   19f44:	eor	r2, ip, r3
   19f48:	add	r2, r2, r1
   19f4c:	ldr	ip, [pc, #1752]	; 1a62c <__assert_fail@plt+0x86e4>
   19f50:	ldr	r1, [r9, #4]
   19f54:	add	r2, r0, r2, ror #10
   19f58:	add	ip, r1, ip
   19f5c:	eor	r1, r0, r2
   19f60:	and	r1, r1, r5
   19f64:	add	r3, ip, r3
   19f68:	eor	fp, r1, r0
   19f6c:	add	fp, fp, r3
   19f70:	ldr	ip, [r9, #24]
   19f74:	add	fp, r2, fp, ror #27
   19f78:	ldr	r1, [pc, #1712]	; 1a630 <__assert_fail@plt+0x86e8>
   19f7c:	eor	r3, r2, fp
   19f80:	add	r1, ip, r1
   19f84:	and	r3, r3, r0
   19f88:	eor	r3, r3, r2
   19f8c:	add	r5, r1, r5
   19f90:	add	r5, r3, r5
   19f94:	ldr	r1, [r9, #44]	; 0x2c
   19f98:	add	r5, fp, r5, ror #23
   19f9c:	ldr	ip, [pc, #1680]	; 1a634 <__assert_fail@plt+0x86ec>
   19fa0:	eor	r3, fp, r5
   19fa4:	add	ip, r1, ip
   19fa8:	and	r3, r3, r2
   19fac:	add	r0, ip, r0
   19fb0:	eor	ip, r3, fp
   19fb4:	add	ip, ip, r0
   19fb8:	ldr	r1, [pc, #1656]	; 1a638 <__assert_fail@plt+0x86f0>
   19fbc:	add	ip, r5, ip, ror #18
   19fc0:	ldr	r0, [r9]
   19fc4:	eor	r3, r5, ip
   19fc8:	add	r1, r0, r1
   19fcc:	and	r3, r3, fp
   19fd0:	eor	r3, r3, r5
   19fd4:	add	r2, r1, r2
   19fd8:	add	r2, r3, r2
   19fdc:	ldr	r0, [r9, #20]
   19fe0:	add	r2, ip, r2, ror #12
   19fe4:	ldr	r3, [pc, #1616]	; 1a63c <__assert_fail@plt+0x86f4>
   19fe8:	eor	r1, ip, r2
   19fec:	add	r3, r0, r3
   19ff0:	and	r1, r1, r5
   19ff4:	add	fp, r3, fp
   19ff8:	eor	r3, r1, ip
   19ffc:	add	r3, r3, fp
   1a000:	ldr	r1, [pc, #1592]	; 1a640 <__assert_fail@plt+0x86f8>
   1a004:	add	r3, r2, r3, ror #27
   1a008:	ldr	fp, [r9, #40]	; 0x28
   1a00c:	eor	r0, r2, r3
   1a010:	add	r1, fp, r1
   1a014:	and	r0, r0, ip
   1a018:	add	r5, r1, r5
   1a01c:	eor	r1, r0, r2
   1a020:	add	r1, r1, r5
   1a024:	ldr	r0, [pc, #1560]	; 1a644 <__assert_fail@plt+0x86fc>
   1a028:	add	r1, r3, r1, ror #23
   1a02c:	eor	r5, r3, r1
   1a030:	add	r0, r7, r0
   1a034:	and	r5, r5, r2
   1a038:	add	ip, r0, ip
   1a03c:	eor	r0, r5, r3
   1a040:	add	r0, r0, ip
   1a044:	ldr	fp, [r9, #16]
   1a048:	add	r0, r1, r0, ror #18
   1a04c:	ldr	r5, [pc, #1524]	; 1a648 <__assert_fail@plt+0x8700>
   1a050:	eor	ip, r1, r0
   1a054:	add	r5, fp, r5
   1a058:	and	ip, ip, r3
   1a05c:	eor	ip, ip, r1
   1a060:	add	r2, r5, r2
   1a064:	add	r2, ip, r2
   1a068:	ldr	fp, [r9, #36]	; 0x24
   1a06c:	add	r2, r0, r2, ror #12
   1a070:	ldr	r5, [pc, #1492]	; 1a64c <__assert_fail@plt+0x8704>
   1a074:	eor	ip, r0, r2
   1a078:	add	r5, fp, r5
   1a07c:	and	ip, ip, r1
   1a080:	add	r3, r5, r3
   1a084:	eor	fp, ip, r0
   1a088:	add	fp, fp, r3
   1a08c:	ldr	ip, [pc, #1468]	; 1a650 <__assert_fail@plt+0x8708>
   1a090:	add	fp, r2, fp, ror #27
   1a094:	eor	r3, r2, fp
   1a098:	add	ip, sl, ip
   1a09c:	and	r3, r3, r0
   1a0a0:	add	r1, ip, r1
   1a0a4:	eor	r5, r3, r2
   1a0a8:	add	r5, r5, r1
   1a0ac:	ldr	ip, [pc, #1440]	; 1a654 <__assert_fail@plt+0x870c>
   1a0b0:	add	r5, fp, r5, ror #23
   1a0b4:	ldr	r1, [r9, #12]
   1a0b8:	eor	r3, fp, r5
   1a0bc:	add	ip, r1, ip
   1a0c0:	and	r3, r3, r2
   1a0c4:	add	r0, ip, r0
   1a0c8:	eor	ip, r3, fp
   1a0cc:	add	ip, ip, r0
   1a0d0:	ldr	r1, [pc, #1408]	; 1a658 <__assert_fail@plt+0x8710>
   1a0d4:	add	ip, r5, ip, ror #18
   1a0d8:	ldr	r0, [r9, #32]
   1a0dc:	eor	r3, r5, ip
   1a0e0:	add	r1, r0, r1
   1a0e4:	and	r3, r3, fp
   1a0e8:	eor	r3, r3, r5
   1a0ec:	add	r2, r1, r2
   1a0f0:	add	r2, r3, r2
   1a0f4:	ldr	r0, [r9, #52]	; 0x34
   1a0f8:	add	r2, ip, r2, ror #12
   1a0fc:	ldr	r3, [pc, #1368]	; 1a65c <__assert_fail@plt+0x8714>
   1a100:	eor	r1, ip, r2
   1a104:	add	r3, r0, r3
   1a108:	and	r1, r1, r5
   1a10c:	add	fp, r3, fp
   1a110:	eor	r3, r1, ip
   1a114:	add	r3, r3, fp
   1a118:	ldr	r1, [pc, #1344]	; 1a660 <__assert_fail@plt+0x8718>
   1a11c:	add	r3, r2, r3, ror #27
   1a120:	ldr	fp, [r9, #8]
   1a124:	eor	r0, r2, r3
   1a128:	add	r1, fp, r1
   1a12c:	and	r0, r0, ip
   1a130:	add	r5, r1, r5
   1a134:	eor	r1, r0, r2
   1a138:	add	r1, r1, r5
   1a13c:	ldr	fp, [r9, #28]
   1a140:	add	r1, r3, r1, ror #23
   1a144:	ldr	r0, [pc, #1304]	; 1a664 <__assert_fail@plt+0x871c>
   1a148:	eor	r5, r3, r1
   1a14c:	add	r0, fp, r0
   1a150:	and	r5, r5, r2
   1a154:	add	ip, r0, ip
   1a158:	eor	r0, r5, r3
   1a15c:	add	r0, r0, ip
   1a160:	ldr	r5, [pc, #1280]	; 1a668 <__assert_fail@plt+0x8720>
   1a164:	add	r0, r1, r0, ror #18
   1a168:	eor	fp, r1, r0
   1a16c:	add	r5, r8, r5
   1a170:	and	ip, r3, fp
   1a174:	eor	ip, ip, r1
   1a178:	add	r2, r5, r2
   1a17c:	add	r2, ip, r2
   1a180:	ldr	r5, [pc, #1252]	; 1a66c <__assert_fail@plt+0x8724>
   1a184:	ldr	ip, [r9, #20]
   1a188:	add	r2, r0, r2, ror #12
   1a18c:	add	r5, ip, r5
   1a190:	eor	fp, fp, r2
   1a194:	add	r3, r5, r3
   1a198:	ldr	ip, [r9, #32]
   1a19c:	add	r3, fp, r3
   1a1a0:	ldr	fp, [pc, #1224]	; 1a670 <__assert_fail@plt+0x8728>
   1a1a4:	add	r3, r2, r3, ror #28
   1a1a8:	add	fp, ip, fp
   1a1ac:	eor	ip, r0, r2
   1a1b0:	eor	ip, ip, r3
   1a1b4:	add	r1, fp, r1
   1a1b8:	add	r1, ip, r1
   1a1bc:	ldr	r5, [pc, #1200]	; 1a674 <__assert_fail@plt+0x872c>
   1a1c0:	ldr	ip, [r9, #44]	; 0x2c
   1a1c4:	add	r1, r3, r1, ror #21
   1a1c8:	add	r5, ip, r5
   1a1cc:	eor	ip, r2, r3
   1a1d0:	eor	ip, ip, r1
   1a1d4:	add	r0, r5, r0
   1a1d8:	add	r0, ip, r0
   1a1dc:	ldr	r5, [pc, #1172]	; 1a678 <__assert_fail@plt+0x8730>
   1a1e0:	add	r0, r1, r0, ror #16
   1a1e4:	add	r5, sl, r5
   1a1e8:	eor	fp, r3, r1
   1a1ec:	eor	fp, fp, r0
   1a1f0:	add	r2, r5, r2
   1a1f4:	ldr	ip, [r9, #4]
   1a1f8:	add	r2, fp, r2
   1a1fc:	ldr	fp, [pc, #1144]	; 1a67c <__assert_fail@plt+0x8734>
   1a200:	add	r2, r0, r2, ror #9
   1a204:	add	fp, ip, fp
   1a208:	eor	ip, r1, r0
   1a20c:	add	r3, fp, r3
   1a210:	eor	fp, ip, r2
   1a214:	ldr	r5, [r9, #16]
   1a218:	add	fp, fp, r3
   1a21c:	ldr	ip, [pc, #1116]	; 1a680 <__assert_fail@plt+0x8738>
   1a220:	add	fp, r2, fp, ror #28
   1a224:	add	ip, r5, ip
   1a228:	eor	r3, r0, r2
   1a22c:	eor	r3, r3, fp
   1a230:	add	r1, ip, r1
   1a234:	ldr	r5, [r9, #28]
   1a238:	add	r1, r3, r1
   1a23c:	ldr	ip, [pc, #1088]	; 1a684 <__assert_fail@plt+0x873c>
   1a240:	add	r1, fp, r1, ror #21
   1a244:	add	ip, r5, ip
   1a248:	eor	r3, r2, fp
   1a24c:	eor	r3, r3, r1
   1a250:	add	r0, ip, r0
   1a254:	add	r0, r3, r0
   1a258:	ldr	ip, [r9, #40]	; 0x28
   1a25c:	ldr	r5, [pc, #1060]	; 1a688 <__assert_fail@plt+0x8740>
   1a260:	add	r0, r1, r0, ror #16
   1a264:	eor	r3, fp, r1
   1a268:	add	r5, ip, r5
   1a26c:	add	r2, r5, r2
   1a270:	eor	r5, r3, r0
   1a274:	ldr	ip, [r9, #52]	; 0x34
   1a278:	add	r5, r5, r2
   1a27c:	ldr	r2, [pc, #1032]	; 1a68c <__assert_fail@plt+0x8744>
   1a280:	add	r5, r0, r5, ror #9
   1a284:	add	r2, ip, r2
   1a288:	eor	ip, r1, r0
   1a28c:	add	fp, r2, fp
   1a290:	eor	r2, ip, r5
   1a294:	add	r2, r2, fp
   1a298:	ldr	ip, [pc, #1008]	; 1a690 <__assert_fail@plt+0x8748>
   1a29c:	ldr	fp, [r9]
   1a2a0:	add	r2, r5, r2, ror #28
   1a2a4:	eor	r3, r0, r5
   1a2a8:	add	ip, fp, ip
   1a2ac:	add	r1, ip, r1
   1a2b0:	eor	fp, r3, r2
   1a2b4:	add	fp, fp, r1
   1a2b8:	ldr	ip, [pc, #980]	; 1a694 <__assert_fail@plt+0x874c>
   1a2bc:	ldr	r1, [r9, #12]
   1a2c0:	add	fp, r2, fp, ror #21
   1a2c4:	eor	r3, r5, r2
   1a2c8:	add	ip, r1, ip
   1a2cc:	add	r0, ip, r0
   1a2d0:	eor	ip, r3, fp
   1a2d4:	ldr	r1, [r9, #24]
   1a2d8:	add	ip, ip, r0
   1a2dc:	ldr	r3, [pc, #948]	; 1a698 <__assert_fail@plt+0x8750>
   1a2e0:	add	ip, fp, ip, ror #16
   1a2e4:	add	r3, r1, r3
   1a2e8:	eor	r1, r2, fp
   1a2ec:	add	r5, r3, r5
   1a2f0:	eor	r3, r1, ip
   1a2f4:	add	r3, r3, r5
   1a2f8:	ldr	r1, [r9, #36]	; 0x24
   1a2fc:	ldr	r0, [pc, #920]	; 1a69c <__assert_fail@plt+0x8754>
   1a300:	add	r3, ip, r3, ror #9
   1a304:	add	r0, r1, r0
   1a308:	eor	r1, fp, ip
   1a30c:	add	r2, r0, r2
   1a310:	eor	r5, r1, r3
   1a314:	add	r5, r5, r2
   1a318:	ldr	r0, [pc, #896]	; 1a6a0 <__assert_fail@plt+0x8758>
   1a31c:	add	r5, r3, r5, ror #28
   1a320:	eor	r2, ip, r3
   1a324:	add	r0, r8, r0
   1a328:	add	fp, r0, fp
   1a32c:	eor	r0, r2, r5
   1a330:	add	r0, r0, fp
   1a334:	ldr	r1, [pc, #872]	; 1a6a4 <__assert_fail@plt+0x875c>
   1a338:	add	r0, r5, r0, ror #21
   1a33c:	eor	r2, r3, r5
   1a340:	add	r1, r7, r1
   1a344:	add	ip, r1, ip
   1a348:	eor	r1, r2, r0
   1a34c:	add	r1, r1, ip
   1a350:	ldr	r2, [r9, #8]
   1a354:	ldr	ip, [pc, #844]	; 1a6a8 <__assert_fail@plt+0x8760>
   1a358:	add	r1, r0, r1, ror #16
   1a35c:	add	ip, r2, ip
   1a360:	eor	r2, r5, r0
   1a364:	add	r3, ip, r3
   1a368:	eor	ip, r2, r1
   1a36c:	add	ip, ip, r3
   1a370:	ldr	fp, [r9]
   1a374:	ldr	r2, [pc, #816]	; 1a6ac <__assert_fail@plt+0x8764>
   1a378:	add	ip, r1, ip, ror #9
   1a37c:	mvn	r3, r0
   1a380:	add	r2, fp, r2
   1a384:	orr	r3, r3, ip
   1a388:	add	r5, r2, r5
   1a38c:	eor	r2, r3, r1
   1a390:	add	r2, r2, r5
   1a394:	ldr	fp, [pc, #788]	; 1a6b0 <__assert_fail@plt+0x8768>
   1a398:	ldr	r5, [r9, #28]
   1a39c:	add	r2, ip, r2, ror #26
   1a3a0:	mvn	r3, r1
   1a3a4:	add	fp, r5, fp
   1a3a8:	orr	r3, r3, r2
   1a3ac:	eor	r3, r3, ip
   1a3b0:	add	r0, fp, r0
   1a3b4:	add	r0, r3, r0
   1a3b8:	ldr	fp, [pc, #756]	; 1a6b4 <__assert_fail@plt+0x876c>
   1a3bc:	add	r0, r2, r0, ror #22
   1a3c0:	mvn	r5, ip
   1a3c4:	add	fp, sl, fp
   1a3c8:	orr	r5, r5, r0
   1a3cc:	eor	r5, r5, r2
   1a3d0:	add	r1, fp, r1
   1a3d4:	add	r1, r5, r1
   1a3d8:	ldr	r3, [pc, #728]	; 1a6b8 <__assert_fail@plt+0x8770>
   1a3dc:	ldr	r5, [r9, #20]
   1a3e0:	add	r1, r0, r1, ror #17
   1a3e4:	mvn	sl, r2
   1a3e8:	add	r3, r5, r3
   1a3ec:	orr	sl, sl, r1
   1a3f0:	add	ip, r3, ip
   1a3f4:	eor	sl, sl, r0
   1a3f8:	add	ip, sl, ip
   1a3fc:	ldr	fp, [pc, #696]	; 1a6bc <__assert_fail@plt+0x8774>
   1a400:	add	ip, r1, ip, ror #11
   1a404:	mvn	r5, r0
   1a408:	add	fp, r8, fp
   1a40c:	orr	r5, r5, ip
   1a410:	eor	r5, r5, r1
   1a414:	add	r2, fp, r2
   1a418:	add	r2, r5, r2
   1a41c:	ldr	r8, [pc, #668]	; 1a6c0 <__assert_fail@plt+0x8778>
   1a420:	ldr	r5, [r9, #12]
   1a424:	add	r2, ip, r2, ror #26
   1a428:	mvn	r3, r1
   1a42c:	add	r8, r5, r8
   1a430:	orr	r3, r3, r2
   1a434:	eor	r3, r3, ip
   1a438:	add	r0, r8, r0
   1a43c:	add	r0, r3, r0
   1a440:	ldr	r8, [r9, #40]	; 0x28
   1a444:	ldr	fp, [pc, #632]	; 1a6c4 <__assert_fail@plt+0x877c>
   1a448:	add	r0, r2, r0, ror #22
   1a44c:	mvn	r5, ip
   1a450:	add	fp, r8, fp
   1a454:	orr	r5, r5, r0
   1a458:	eor	r5, r5, r2
   1a45c:	add	r1, fp, r1
   1a460:	add	r1, r5, r1
   1a464:	ldr	r8, [r9, #4]
   1a468:	ldr	r3, [pc, #600]	; 1a6c8 <__assert_fail@plt+0x8780>
   1a46c:	add	r1, r0, r1, ror #17
   1a470:	mvn	r5, r2
   1a474:	add	r3, r8, r3
   1a478:	orr	r5, r5, r1
   1a47c:	eor	r5, r5, r0
   1a480:	add	ip, r3, ip
   1a484:	add	ip, r5, ip
   1a488:	ldr	fp, [pc, #572]	; 1a6cc <__assert_fail@plt+0x8784>
   1a48c:	ldr	r5, [r9, #32]
   1a490:	add	ip, r1, ip, ror #11
   1a494:	mvn	r3, r0
   1a498:	add	fp, r5, fp
   1a49c:	orr	r3, r3, ip
   1a4a0:	eor	r3, r3, r1
   1a4a4:	add	r2, fp, r2
   1a4a8:	add	r2, r3, r2
   1a4ac:	ldr	r8, [pc, #540]	; 1a6d0 <__assert_fail@plt+0x8788>
   1a4b0:	add	r2, ip, r2, ror #26
   1a4b4:	mvn	r5, r1
   1a4b8:	add	r8, r7, r8
   1a4bc:	orr	r5, r5, r2
   1a4c0:	eor	r5, r5, ip
   1a4c4:	add	r0, r8, r0
   1a4c8:	add	r0, r5, r0
   1a4cc:	ldr	fp, [pc, #512]	; 1a6d4 <__assert_fail@plt+0x878c>
   1a4d0:	ldr	r5, [r9, #24]
   1a4d4:	add	r0, r2, r0, ror #22
   1a4d8:	mvn	r3, ip
   1a4dc:	add	fp, r5, fp
   1a4e0:	orr	r3, r3, r0
   1a4e4:	eor	r3, r3, r2
   1a4e8:	add	r1, fp, r1
   1a4ec:	add	r1, r3, r1
   1a4f0:	ldr	r8, [r9, #52]	; 0x34
   1a4f4:	ldr	r7, [pc, #476]	; 1a6d8 <__assert_fail@plt+0x8790>
   1a4f8:	add	r1, r0, r1, ror #17
   1a4fc:	mvn	r5, r2
   1a500:	add	r7, r8, r7
   1a504:	orr	r5, r5, r1
   1a508:	eor	r5, r5, r0
   1a50c:	add	ip, r7, ip
   1a510:	add	ip, r5, ip
   1a514:	ldr	fp, [pc, #448]	; 1a6dc <__assert_fail@plt+0x8794>
   1a518:	ldr	r5, [r9, #16]
   1a51c:	add	ip, r1, ip, ror #11
   1a520:	mvn	r3, r0
   1a524:	add	fp, r5, fp
   1a528:	orr	r3, r3, ip
   1a52c:	eor	r3, r3, r1
   1a530:	add	r2, fp, r2
   1a534:	add	r2, r3, r2
   1a538:	ldr	r5, [r9, #44]	; 0x2c
   1a53c:	ldr	r8, [pc, #412]	; 1a6e0 <__assert_fail@plt+0x8798>
   1a540:	add	r2, ip, r2, ror #26
   1a544:	mvn	r3, r1
   1a548:	add	r8, r5, r8
   1a54c:	orr	r3, r3, r2
   1a550:	add	r8, r8, r0
   1a554:	eor	r0, r3, ip
   1a558:	add	r0, r0, r8
   1a55c:	ldr	r5, [r9, #8]
   1a560:	ldr	fp, [pc, #380]	; 1a6e4 <__assert_fail@plt+0x879c>
   1a564:	add	r0, r2, r0, ror #22
   1a568:	mvn	r3, ip
   1a56c:	add	fp, r5, fp
   1a570:	orr	r3, r3, r0
   1a574:	add	fp, fp, r1
   1a578:	eor	r1, r3, r2
   1a57c:	add	r1, r1, fp
   1a580:	ldr	r5, [r9, #36]	; 0x24
   1a584:	ldr	r7, [pc, #348]	; 1a6e8 <__assert_fail@plt+0x87a0>
   1a588:	add	r1, r0, r1, ror #17
   1a58c:	mvn	r3, r2
   1a590:	add	r7, r5, r7
   1a594:	orr	r3, r3, r1
   1a598:	eor	r3, r3, r0
   1a59c:	add	ip, r7, ip
   1a5a0:	add	ip, r3, ip
   1a5a4:	ldr	r5, [sp, #8]
   1a5a8:	ldr	r3, [sp, #4]
   1a5ac:	add	r9, r9, #64	; 0x40
   1a5b0:	add	ip, r1, ip, ror #11
   1a5b4:	add	r3, r3, r2
   1a5b8:	cmp	r5, r9
   1a5bc:	str	r3, [sp, #4]
   1a5c0:	add	r6, r6, r0
   1a5c4:	add	r4, r4, r1
   1a5c8:	add	lr, lr, ip
   1a5cc:	bhi	19cdc <__assert_fail@plt+0x7d94>
   1a5d0:	mov	ip, lr
   1a5d4:	mov	r1, r4
   1a5d8:	mov	lr, r6
   1a5dc:	ldr	r3, [sp, #12]
   1a5e0:	ldr	r2, [sp, #4]
   1a5e4:	str	ip, [r3, #4]
   1a5e8:	str	r2, [r3]
   1a5ec:	str	r1, [r3, #8]
   1a5f0:	str	lr, [r3, #12]
   1a5f4:	add	sp, sp, #20
   1a5f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a5fc:	mov	ip, r3
   1a600:	mov	lr, r2
   1a604:	b	1a5dc <__assert_fail@plt+0x8694>
   1a608:	stmia	r7, {r1, r2, r4, r6, r8, r9, sl, ip, sp, pc}^
   1a60c:	strtcs	r7, [r0], #-219	; 0xffffff25
   1a610:			; <UNDEFINED> instruction: 0xc1bdceee
   1a614:			; <UNDEFINED> instruction: 0xf57c0faf
   1a618:	blhi	11584dc <optarg@@GLIBC_2.4+0x1123204>
   1a61c:	blvs	fe41eaac <optarg@@GLIBC_2.4+0xfe3e97d4>
   1a620:	ldc2	1, cr7, [r8, #588]	; 0x24c
   1a624:	ldrbtge	r4, [r9], -lr, lsl #7
   1a628:	ldmibmi	r4!, {r0, r5, fp}
   1a62c:			; <UNDEFINED> instruction: 0xf61e2562
   1a630:	subgt	fp, r0, r0, asr #6
   1a634:			; <UNDEFINED> instruction: 0x265e5a51
   1a638:	ldmib	r6!, {r1, r3, r5, r7, r8, r9, sl, lr, pc}
   1a63c:			; <UNDEFINED> instruction: 0xd62f105d
   1a640:	subeq	r1, r4, #1392508928	; 0x53000000
   1a644:	stmiale	r1!, {r0, r7, r9, sl, sp, lr, pc}
   1a648:	ldrb	pc, [r3, r8, asr #23]	; <UNPREDICTABLE>
   1a64c:	mvncs	ip, r6, ror #27
   1a650:	teqgt	r7, #56098816	; 0x3580000
   1a654:			; <UNDEFINED> instruction: 0xf4d50d87
   1a658:	ldrbmi	r1, [sl, #-1261]	; 0xfffffb13
   1a65c:	stmibge	r3!, {r0, r2, r8, fp, sp, lr, pc}^
   1a660:	stc2l	3, cr10, [pc], #992	; 1aa48 <__assert_fail@plt+0x8b00>
   1a664:			; <UNDEFINED> instruction: 0x676f02d9
   1a668:	stchi	12, cr4, [sl, #-552]!	; 0xfffffdd8
   1a66c:			; <UNDEFINED> instruction: 0xfffa3942
   1a670:	ldrbhi	pc, [r1, -r1, lsl #13]!	; <UNPREDICTABLE>
   1a674:	ldfvss	f6, [sp, #136]	; 0x88
   1a678:	vcmla.f16	d19, d5, d12, #270
   1a67c:	ldrtge	lr, [lr], #2628	; 0xa44
   1a680:	blmi	ff7ce52c <optarg@@GLIBC_2.4+0xff799254>
   1a684:			; <UNDEFINED> instruction: 0xf6bb4b60
   1a688:	mrclt	12, 5, fp, cr15, cr0, {3}
   1a68c:	ldmcs	fp, {r1, r2, r6, r7, r9, sl, fp, ip, sp, lr}
   1a690:	b	fe864680 <optarg@@GLIBC_2.4+0xfe82f3a8>
   1a694:	strbtle	r3, [pc], #133	; 1a69c <__assert_fail@plt+0x8754>
   1a698:	streq	r1, [r8], #3333	; 0xd05
   1a69c:	ldmible	r4, {r0, r3, r4, r5, ip, lr, pc}^
   1a6a0:	ldrb	r9, [fp], r5, ror #19
   1a6a4:	svcne	0x00a27cf8
   1a6a8:	strtgt	r5, [ip], #1637	; 0x665
   1a6ac:	vld1.16	{d2-d5}, [r9], r4
   1a6b0:	msrmi	CPSR_fx, #604	; 0x25c
   1a6b4:	blge	fe523558 <optarg@@GLIBC_2.4+0xfe4ee280>
   1a6b8:	ldc2	0, cr10, [r3], {57}	; 0x39
   1a6bc:	ldrbvs	r5, [fp, #-2499]	; 0xfffff63d
   1a6c0:	svchi	0x000ccc92
   1a6c4:			; <UNDEFINED> instruction: 0xffeff47d
   1a6c8:	strhi	r5, [r4, #3537]	; 0xdd1
   1a6cc:	svcvs	0x00a87e4f
   1a6d0:	cdp2	6, 2, cr14, cr12, cr0, {7}
   1a6d4:	movwge	r4, #4884	; 0x1314
   1a6d8:	adfmi<illegal precision>p	f1, f0, f1
   1a6dc:			; <UNDEFINED> instruction: 0xf7537e82
   1a6e0:	lfmlt	f7, 1, [sl, #-212]!	; 0xffffff2c
   1a6e4:	bcs	ff60f1d8 <optarg@@GLIBC_2.4+0xff5d9f00>
   1a6e8:	bl	fe1cf534 <optarg@@GLIBC_2.4+0xfe19a25c>
   1a6ec:	push	{r4, r5, r6, r7, r8, lr}
   1a6f0:	mov	r4, r0
   1a6f4:	ldr	r0, [r0, #24]
   1a6f8:	ldr	r3, [r4, #16]
   1a6fc:	cmp	r0, #55	; 0x37
   1a700:	add	r3, r0, r3
   1a704:	mov	r5, r1
   1a708:	movhi	r6, #128	; 0x80
   1a70c:	movls	r6, #64	; 0x40
   1a710:	movhi	r2, #120	; 0x78
   1a714:	movls	r2, #56	; 0x38
   1a718:	movhi	r1, #31
   1a71c:	movls	r1, #15
   1a720:	movhi	lr, #30
   1a724:	movls	lr, #14
   1a728:	cmp	r0, r3
   1a72c:	add	lr, r4, lr, lsl #2
   1a730:	ldrhi	ip, [r4, #20]
   1a734:	ldrls	r7, [r4, #20]
   1a738:	addhi	r7, ip, #1
   1a73c:	add	r1, r4, r1, lsl #2
   1a740:	lsr	ip, r3, #29
   1a744:	strhi	r7, [r4, #20]
   1a748:	str	r3, [r4, #16]
   1a74c:	orr	ip, ip, r7, lsl #3
   1a750:	lsl	r3, r3, #3
   1a754:	add	r7, r4, #28
   1a758:	str	r3, [lr, #28]
   1a75c:	sub	r2, r2, r0
   1a760:	str	ip, [r1, #28]
   1a764:	add	r0, r7, r0
   1a768:	ldr	r1, [pc, #32]	; 1a790 <__assert_fail@plt+0x8848>
   1a76c:	bl	11ac8 <memcpy@plt>
   1a770:	mov	r1, r6
   1a774:	mov	r0, r7
   1a778:	mov	r2, r4
   1a77c:	bl	19c74 <__assert_fail@plt+0x7d2c>
   1a780:	mov	r1, r5
   1a784:	mov	r0, r4
   1a788:	pop	{r4, r5, r6, r7, r8, lr}
   1a78c:	b	19c48 <__assert_fail@plt+0x7d00>
   1a790:	andeq	r4, r2, r8, lsl #9
   1a794:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a798:	mov	r6, r2
   1a79c:	ldr	r4, [r2, #24]
   1a7a0:	mov	r8, r0
   1a7a4:	cmp	r4, #0
   1a7a8:	mov	r5, r1
   1a7ac:	bne	1a89c <__assert_fail@plt+0x8954>
   1a7b0:	cmp	r5, #63	; 0x3f
   1a7b4:	bls	1a88c <__assert_fail@plt+0x8944>
   1a7b8:	tst	r8, #3
   1a7bc:	beq	1a870 <__assert_fail@plt+0x8928>
   1a7c0:	cmp	r5, #64	; 0x40
   1a7c4:	add	r7, r6, #28
   1a7c8:	beq	1a848 <__assert_fail@plt+0x8900>
   1a7cc:	mov	sl, r5
   1a7d0:	mov	r4, r8
   1a7d4:	mov	r9, #64	; 0x40
   1a7d8:	add	r2, r4, #64	; 0x40
   1a7dc:	mov	r3, r7
   1a7e0:	ldr	lr, [r4]
   1a7e4:	ldr	ip, [r4, #4]
   1a7e8:	ldr	r0, [r4, #8]
   1a7ec:	ldr	r1, [r4, #12]
   1a7f0:	add	r4, r4, #16
   1a7f4:	cmp	r4, r2
   1a7f8:	str	lr, [r3]
   1a7fc:	str	ip, [r3, #4]
   1a800:	str	r0, [r3, #8]
   1a804:	str	r1, [r3, #12]
   1a808:	add	r3, r3, #16
   1a80c:	bne	1a7e0 <__assert_fail@plt+0x8898>
   1a810:	sub	sl, sl, #64	; 0x40
   1a814:	mov	r2, r6
   1a818:	mov	r1, r9
   1a81c:	mov	r0, r7
   1a820:	bl	19c74 <__assert_fail@plt+0x7d2c>
   1a824:	cmp	sl, #64	; 0x40
   1a828:	bhi	1a7d8 <__assert_fail@plt+0x8890>
   1a82c:	sub	r3, r5, #65	; 0x41
   1a830:	bic	r2, r3, #63	; 0x3f
   1a834:	mov	r3, r2
   1a838:	sub	r5, r5, #64	; 0x40
   1a83c:	add	r2, r2, #64	; 0x40
   1a840:	sub	r5, r5, r3
   1a844:	add	r8, r8, r2
   1a848:	ldr	r4, [r6, #24]
   1a84c:	mov	r1, r8
   1a850:	add	r0, r7, r4
   1a854:	mov	r2, r5
   1a858:	add	r4, r4, r5
   1a85c:	bl	11ac8 <memcpy@plt>
   1a860:	cmp	r4, #63	; 0x3f
   1a864:	bhi	1a8dc <__assert_fail@plt+0x8994>
   1a868:	str	r4, [r6, #24]
   1a86c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a870:	bic	r4, r5, #63	; 0x3f
   1a874:	mov	r0, r8
   1a878:	mov	r1, r4
   1a87c:	mov	r2, r6
   1a880:	bl	19c74 <__assert_fail@plt+0x7d2c>
   1a884:	and	r5, r5, #63	; 0x3f
   1a888:	add	r8, r8, r4
   1a88c:	cmp	r5, #0
   1a890:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a894:	add	r7, r6, #28
   1a898:	b	1a848 <__assert_fail@plt+0x8900>
   1a89c:	rsb	r7, r4, #128	; 0x80
   1a8a0:	cmp	r7, r1
   1a8a4:	movcs	r7, r1
   1a8a8:	add	r9, r2, #28
   1a8ac:	mov	r1, r8
   1a8b0:	mov	r2, r7
   1a8b4:	add	r0, r9, r4
   1a8b8:	bl	11ac8 <memcpy@plt>
   1a8bc:	ldr	r1, [r6, #24]
   1a8c0:	add	r1, r7, r1
   1a8c4:	cmp	r1, #64	; 0x40
   1a8c8:	str	r1, [r6, #24]
   1a8cc:	bhi	1a908 <__assert_fail@plt+0x89c0>
   1a8d0:	add	r8, r8, r7
   1a8d4:	sub	r5, r5, r7
   1a8d8:	b	1a7b0 <__assert_fail@plt+0x8868>
   1a8dc:	sub	r4, r4, #64	; 0x40
   1a8e0:	mov	r2, r6
   1a8e4:	mov	r1, #64	; 0x40
   1a8e8:	mov	r0, r7
   1a8ec:	bl	19c74 <__assert_fail@plt+0x7d2c>
   1a8f0:	mov	r0, r7
   1a8f4:	mov	r2, r4
   1a8f8:	add	r1, r6, #92	; 0x5c
   1a8fc:	bl	11ac8 <memcpy@plt>
   1a900:	str	r4, [r6, #24]
   1a904:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a908:	mov	r2, r6
   1a90c:	mov	r0, r9
   1a910:	bic	r1, r1, #63	; 0x3f
   1a914:	bl	19c74 <__assert_fail@plt+0x7d2c>
   1a918:	ldr	r2, [r6, #24]
   1a91c:	add	r1, r4, r7
   1a920:	and	r2, r2, #63	; 0x3f
   1a924:	bic	r1, r1, #63	; 0x3f
   1a928:	add	r1, r9, r1
   1a92c:	mov	r0, r9
   1a930:	str	r2, [r6, #24]
   1a934:	bl	11ac8 <memcpy@plt>
   1a938:	b	1a8d0 <__assert_fail@plt+0x8988>
   1a93c:	push	{r4, r5, lr}
   1a940:	sub	sp, sp, #164	; 0xa4
   1a944:	ldr	r3, [pc, #72]	; 1a994 <__assert_fail@plt+0x8a4c>
   1a948:	ldr	lr, [pc, #72]	; 1a998 <__assert_fail@plt+0x8a50>
   1a94c:	ldr	ip, [pc, #72]	; 1a99c <__assert_fail@plt+0x8a54>
   1a950:	ldr	r5, [pc, #72]	; 1a9a0 <__assert_fail@plt+0x8a58>
   1a954:	mov	r4, r2
   1a958:	str	r3, [sp, #8]
   1a95c:	add	r2, sp, #4
   1a960:	mov	r3, #0
   1a964:	str	lr, [sp, #12]
   1a968:	str	ip, [sp, #16]
   1a96c:	str	r3, [sp, #24]
   1a970:	str	r3, [sp, #20]
   1a974:	str	r3, [sp, #28]
   1a978:	str	r5, [sp, #4]
   1a97c:	bl	1a794 <__assert_fail@plt+0x884c>
   1a980:	mov	r1, r4
   1a984:	add	r0, sp, #4
   1a988:	bl	1a6ec <__assert_fail@plt+0x87a4>
   1a98c:	add	sp, sp, #164	; 0xa4
   1a990:	pop	{r4, r5, pc}
   1a994:	svc	0x00cdab89
   1a998:	ldmls	sl!, {r1, r2, r3, r4, r5, r6, r7, sl, fp, ip, lr, pc}
   1a99c:	eorsne	r5, r2, r6, ror r4
   1a9a0:	strbvs	r2, [r5, -r1, lsl #6]
   1a9a4:	push	{r4, r5}
   1a9a8:	pop	{r4, r5}
   1a9ac:	b	11a44 <posix_fadvise64@plt>
   1a9b0:	cmp	r0, #0
   1a9b4:	bxeq	lr
   1a9b8:	push	{r4, lr}
   1a9bc:	sub	sp, sp, #16
   1a9c0:	mov	r4, r1
   1a9c4:	bl	11dc8 <fileno@plt>
   1a9c8:	mov	r2, #0
   1a9cc:	mov	r3, #0
   1a9d0:	str	r4, [sp, #8]
   1a9d4:	strd	r2, [sp]
   1a9d8:	bl	11a44 <posix_fadvise64@plt>
   1a9dc:	add	sp, sp, #16
   1a9e0:	pop	{r4, pc}
   1a9e4:	push	{r4, r5, lr}
   1a9e8:	sub	sp, sp, #12
   1a9ec:	mov	r4, r0
   1a9f0:	bl	11dc8 <fileno@plt>
   1a9f4:	cmp	r0, #0
   1a9f8:	mov	r0, r4
   1a9fc:	blt	1aa78 <__assert_fail@plt+0x8b30>
   1aa00:	bl	11cfc <__freading@plt>
   1aa04:	cmp	r0, #0
   1aa08:	bne	1aa44 <__assert_fail@plt+0x8afc>
   1aa0c:	mov	r0, r4
   1aa10:	bl	1aa84 <__assert_fail@plt+0x8b3c>
   1aa14:	cmp	r0, #0
   1aa18:	beq	1aa74 <__assert_fail@plt+0x8b2c>
   1aa1c:	bl	11d74 <__errno_location@plt>
   1aa20:	mov	r5, r0
   1aa24:	mov	r0, r4
   1aa28:	ldr	r4, [r5]
   1aa2c:	bl	11dec <fclose@plt>
   1aa30:	cmp	r4, #0
   1aa34:	mvnne	r0, #0
   1aa38:	strne	r4, [r5]
   1aa3c:	add	sp, sp, #12
   1aa40:	pop	{r4, r5, pc}
   1aa44:	mov	r0, r4
   1aa48:	bl	11dc8 <fileno@plt>
   1aa4c:	mov	r3, #1
   1aa50:	str	r3, [sp]
   1aa54:	mov	r2, #0
   1aa58:	mov	r3, #0
   1aa5c:	bl	11c24 <lseek64@plt>
   1aa60:	mvn	r3, #0
   1aa64:	mvn	r2, #0
   1aa68:	cmp	r1, r3
   1aa6c:	cmpeq	r0, r2
   1aa70:	bne	1aa0c <__assert_fail@plt+0x8ac4>
   1aa74:	mov	r0, r4
   1aa78:	add	sp, sp, #12
   1aa7c:	pop	{r4, r5, lr}
   1aa80:	b	11dec <fclose@plt>
   1aa84:	push	{r4, lr}
   1aa88:	subs	r4, r0, #0
   1aa8c:	sub	sp, sp, #8
   1aa90:	beq	1aaac <__assert_fail@plt+0x8b64>
   1aa94:	bl	11cfc <__freading@plt>
   1aa98:	cmp	r0, #0
   1aa9c:	beq	1aaac <__assert_fail@plt+0x8b64>
   1aaa0:	ldr	r3, [r4]
   1aaa4:	tst	r3, #256	; 0x100
   1aaa8:	bne	1aabc <__assert_fail@plt+0x8b74>
   1aaac:	mov	r0, r4
   1aab0:	add	sp, sp, #8
   1aab4:	pop	{r4, lr}
   1aab8:	b	11a68 <fflush@plt>
   1aabc:	mov	r3, #1
   1aac0:	str	r3, [sp]
   1aac4:	mov	r2, #0
   1aac8:	mov	r3, #0
   1aacc:	mov	r0, r4
   1aad0:	bl	1b040 <__assert_fail@plt+0x90f8>
   1aad4:	mov	r0, r4
   1aad8:	add	sp, sp, #8
   1aadc:	pop	{r4, lr}
   1aae0:	b	11a68 <fflush@plt>
   1aae4:	ldr	r2, [r0]
   1aae8:	ldrb	r3, [r2]
   1aaec:	cmp	r3, #0
   1aaf0:	beq	1ac0c <__assert_fail@plt+0x8cc4>
   1aaf4:	mov	ip, #0
   1aaf8:	cmp	r3, #46	; 0x2e
   1aafc:	push	{r4, lr}
   1ab00:	mov	r4, ip
   1ab04:	beq	1ab9c <__assert_fail@plt+0x8c54>
   1ab08:	mov	r1, r2
   1ab0c:	cmp	r3, #90	; 0x5a
   1ab10:	sub	r2, r3, #48	; 0x30
   1ab14:	sub	lr, r3, #97	; 0x61
   1ab18:	bhi	1ab78 <__assert_fail@plt+0x8c30>
   1ab1c:	cmp	r3, #65	; 0x41
   1ab20:	bcs	1ab80 <__assert_fail@plt+0x8c38>
   1ab24:	cmp	r2, #9
   1ab28:	bls	1ab80 <__assert_fail@plt+0x8c38>
   1ab2c:	cmp	r3, #126	; 0x7e
   1ab30:	beq	1ab80 <__assert_fail@plt+0x8c38>
   1ab34:	add	r1, r1, #1
   1ab38:	str	r1, [r0]
   1ab3c:	ldrb	r3, [r1]
   1ab40:	mov	ip, r4
   1ab44:	cmp	r3, #0
   1ab48:	beq	1ac00 <__assert_fail@plt+0x8cb8>
   1ab4c:	cmp	r3, #46	; 0x2e
   1ab50:	bne	1ab0c <__assert_fail@plt+0x8bc4>
   1ab54:	mov	r2, r1
   1ab58:	add	r1, r2, #1
   1ab5c:	str	r1, [r0]
   1ab60:	ldrb	r3, [r2, #1]
   1ab64:	mov	ip, r2
   1ab68:	cmp	r3, #0
   1ab6c:	bne	1abb8 <__assert_fail@plt+0x8c70>
   1ab70:	mov	r0, ip
   1ab74:	pop	{r4, pc}
   1ab78:	cmp	lr, #25
   1ab7c:	bhi	1ab2c <__assert_fail@plt+0x8be4>
   1ab80:	add	r2, r1, #1
   1ab84:	str	r2, [r0]
   1ab88:	ldrb	r3, [r1, #1]
   1ab8c:	cmp	r3, #0
   1ab90:	beq	1ab70 <__assert_fail@plt+0x8c28>
   1ab94:	cmp	r3, #46	; 0x2e
   1ab98:	bne	1ab08 <__assert_fail@plt+0x8bc0>
   1ab9c:	cmp	ip, #0
   1aba0:	beq	1ab58 <__assert_fail@plt+0x8c10>
   1aba4:	add	r1, r2, #1
   1aba8:	str	r1, [r0]
   1abac:	ldrb	r3, [r2, #1]
   1abb0:	cmp	r3, #0
   1abb4:	beq	1ab70 <__assert_fail@plt+0x8c28>
   1abb8:	cmp	r3, #65	; 0x41
   1abbc:	bcc	1abd4 <__assert_fail@plt+0x8c8c>
   1abc0:	cmp	r3, #90	; 0x5a
   1abc4:	bls	1ab80 <__assert_fail@plt+0x8c38>
   1abc8:	sub	r2, r3, #97	; 0x61
   1abcc:	cmp	r2, #25
   1abd0:	bls	1ab80 <__assert_fail@plt+0x8c38>
   1abd4:	cmp	r3, #126	; 0x7e
   1abd8:	beq	1ab80 <__assert_fail@plt+0x8c38>
   1abdc:	add	r2, r1, #1
   1abe0:	str	r2, [r0]
   1abe4:	ldrb	r3, [r1, #1]
   1abe8:	cmp	r3, #0
   1abec:	beq	1ac00 <__assert_fail@plt+0x8cb8>
   1abf0:	cmp	r3, #46	; 0x2e
   1abf4:	movne	ip, r4
   1abf8:	bne	1ab08 <__assert_fail@plt+0x8bc0>
   1abfc:	b	1ab58 <__assert_fail@plt+0x8c10>
   1ac00:	mov	ip, #0
   1ac04:	mov	r0, ip
   1ac08:	pop	{r4, pc}
   1ac0c:	mov	ip, #0
   1ac10:	mov	r0, ip
   1ac14:	bx	lr
   1ac18:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ac1c:	sub	sp, sp, #20
   1ac20:	mov	r6, r0
   1ac24:	mov	fp, r1
   1ac28:	bl	11a2c <strcmp@plt>
   1ac2c:	subs	r7, r0, #0
   1ac30:	beq	1ae44 <__assert_fail@plt+0x8efc>
   1ac34:	ldrb	r4, [r6]
   1ac38:	cmp	r4, #0
   1ac3c:	beq	1af74 <__assert_fail@plt+0x902c>
   1ac40:	ldrb	r5, [fp]
   1ac44:	cmp	r5, #0
   1ac48:	beq	1ae50 <__assert_fail@plt+0x8f08>
   1ac4c:	mov	r1, r6
   1ac50:	ldr	r0, [pc, #904]	; 1afe0 <__assert_fail@plt+0x9098>
   1ac54:	bl	11a2c <strcmp@plt>
   1ac58:	cmp	r0, #0
   1ac5c:	beq	1af74 <__assert_fail@plt+0x902c>
   1ac60:	mov	r1, fp
   1ac64:	ldr	r0, [pc, #884]	; 1afe0 <__assert_fail@plt+0x9098>
   1ac68:	bl	11a2c <strcmp@plt>
   1ac6c:	cmp	r0, #0
   1ac70:	beq	1ae50 <__assert_fail@plt+0x8f08>
   1ac74:	mov	r1, r6
   1ac78:	ldr	r0, [pc, #868]	; 1afe4 <__assert_fail@plt+0x909c>
   1ac7c:	bl	11a2c <strcmp@plt>
   1ac80:	cmp	r0, #0
   1ac84:	beq	1af74 <__assert_fail@plt+0x902c>
   1ac88:	mov	r1, fp
   1ac8c:	ldr	r0, [pc, #848]	; 1afe4 <__assert_fail@plt+0x909c>
   1ac90:	bl	11a2c <strcmp@plt>
   1ac94:	cmp	r0, #0
   1ac98:	beq	1ae50 <__assert_fail@plt+0x8f08>
   1ac9c:	cmp	r4, #46	; 0x2e
   1aca0:	beq	1af64 <__assert_fail@plt+0x901c>
   1aca4:	cmp	r5, #46	; 0x2e
   1aca8:	beq	1ae50 <__assert_fail@plt+0x8f08>
   1acac:	add	r0, sp, #8
   1acb0:	str	r6, [sp, #8]
   1acb4:	str	fp, [sp, #12]
   1acb8:	bl	1aae4 <__assert_fail@plt+0x8b9c>
   1acbc:	mov	r8, r0
   1acc0:	add	r0, sp, #12
   1acc4:	bl	1aae4 <__assert_fail@plt+0x8b9c>
   1acc8:	cmp	r8, #0
   1accc:	movne	r4, r8
   1acd0:	ldreq	r4, [sp, #8]
   1acd4:	sub	r4, r4, r6
   1acd8:	cmp	r0, #0
   1acdc:	movne	r5, r0
   1ace0:	ldreq	r5, [sp, #12]
   1ace4:	cmp	r0, #0
   1ace8:	cmpeq	r8, #0
   1acec:	movne	r8, #1
   1acf0:	moveq	r8, #0
   1acf4:	sub	r5, r5, fp
   1acf8:	cmp	r4, r5
   1acfc:	movne	r8, #0
   1ad00:	andeq	r8, r8, #1
   1ad04:	cmp	r8, #0
   1ad08:	bne	1af7c <__assert_fail@plt+0x9034>
   1ad0c:	mov	r3, #0
   1ad10:	mov	r1, r3
   1ad14:	mov	r0, r3
   1ad18:	str	r7, [sp, #4]
   1ad1c:	cmp	r5, r3
   1ad20:	cmpls	r4, r1
   1ad24:	bls	1afb4 <__assert_fail@plt+0x906c>
   1ad28:	add	lr, fp, r3
   1ad2c:	add	ip, r6, r1
   1ad30:	b	1ad6c <__assert_fail@plt+0x8e24>
   1ad34:	mov	r8, r0
   1ad38:	cmp	r5, r3
   1ad3c:	beq	1ad50 <__assert_fail@plt+0x8e08>
   1ad40:	ldrb	r2, [lr]
   1ad44:	sub	r7, r2, #48	; 0x30
   1ad48:	cmp	r7, #9
   1ad4c:	bhi	1ae7c <__assert_fail@plt+0x8f34>
   1ad50:	mov	r9, r0
   1ad54:	cmp	r9, r8
   1ad58:	bne	1afbc <__assert_fail@plt+0x9074>
   1ad5c:	add	r1, r1, #1
   1ad60:	add	r3, r3, #1
   1ad64:	add	lr, lr, #1
   1ad68:	add	ip, ip, #1
   1ad6c:	cmp	r4, r1
   1ad70:	bls	1ad84 <__assert_fail@plt+0x8e3c>
   1ad74:	ldrb	r2, [ip]
   1ad78:	sub	r2, r2, #48	; 0x30
   1ad7c:	cmp	r2, #9
   1ad80:	bhi	1ad9c <__assert_fail@plt+0x8e54>
   1ad84:	cmp	r5, r3
   1ad88:	bls	1aea0 <__assert_fail@plt+0x8f58>
   1ad8c:	ldrb	r2, [lr]
   1ad90:	sub	r7, r2, #48	; 0x30
   1ad94:	cmp	r7, #9
   1ad98:	bls	1aea4 <__assert_fail@plt+0x8f5c>
   1ad9c:	cmp	r4, r1
   1ada0:	beq	1ae60 <__assert_fail@plt+0x8f18>
   1ada4:	ldrb	r2, [ip]
   1ada8:	sub	r7, r2, #48	; 0x30
   1adac:	cmp	r7, #9
   1adb0:	bls	1ad34 <__assert_fail@plt+0x8dec>
   1adb4:	cmp	r2, #65	; 0x41
   1adb8:	mov	r8, r2
   1adbc:	bcc	1add4 <__assert_fail@plt+0x8e8c>
   1adc0:	cmp	r2, #90	; 0x5a
   1adc4:	bls	1ad38 <__assert_fail@plt+0x8df0>
   1adc8:	sub	r7, r2, #97	; 0x61
   1adcc:	cmp	r7, #25
   1add0:	bls	1ad38 <__assert_fail@plt+0x8df0>
   1add4:	cmp	r2, #126	; 0x7e
   1add8:	addne	r8, r2, #256	; 0x100
   1addc:	bne	1ad38 <__assert_fail@plt+0x8df0>
   1ade0:	cmp	r5, r3
   1ade4:	beq	1afd0 <__assert_fail@plt+0x9088>
   1ade8:	ldrb	r2, [lr]
   1adec:	sub	r7, r2, #48	; 0x30
   1adf0:	cmp	r7, #9
   1adf4:	bls	1ae2c <__assert_fail@plt+0x8ee4>
   1adf8:	cmp	r2, #65	; 0x41
   1adfc:	mov	r9, r2
   1ae00:	bcc	1ae18 <__assert_fail@plt+0x8ed0>
   1ae04:	cmp	r2, #90	; 0x5a
   1ae08:	bls	1afc4 <__assert_fail@plt+0x907c>
   1ae0c:	sub	r7, r2, #97	; 0x61
   1ae10:	cmp	r7, #25
   1ae14:	bls	1afc4 <__assert_fail@plt+0x907c>
   1ae18:	mvn	r8, #0
   1ae1c:	cmp	r2, #126	; 0x7e
   1ae20:	addne	r9, r2, #256	; 0x100
   1ae24:	mvneq	r9, #0
   1ae28:	b	1ad54 <__assert_fail@plt+0x8e0c>
   1ae2c:	ldr	r7, [sp, #4]
   1ae30:	mvn	r8, #0
   1ae34:	mov	r9, #0
   1ae38:	subs	r8, r8, r9
   1ae3c:	beq	1ae44 <__assert_fail@plt+0x8efc>
   1ae40:	mov	r7, r8
   1ae44:	mov	r0, r7
   1ae48:	add	sp, sp, #20
   1ae4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ae50:	mov	r7, #1
   1ae54:	mov	r0, r7
   1ae58:	add	sp, sp, #20
   1ae5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ae60:	cmp	r5, r3
   1ae64:	beq	1ad5c <__assert_fail@plt+0x8e14>
   1ae68:	ldrb	r2, [lr]
   1ae6c:	sub	r7, r2, #48	; 0x30
   1ae70:	cmp	r7, #9
   1ae74:	bls	1ad5c <__assert_fail@plt+0x8e14>
   1ae78:	mov	r8, r0
   1ae7c:	cmp	r2, #65	; 0x41
   1ae80:	mov	r9, r2
   1ae84:	bcc	1ae1c <__assert_fail@plt+0x8ed4>
   1ae88:	cmp	r2, #90	; 0x5a
   1ae8c:	bls	1ad54 <__assert_fail@plt+0x8e0c>
   1ae90:	sub	r7, r2, #97	; 0x61
   1ae94:	cmp	r7, #25
   1ae98:	bls	1ad54 <__assert_fail@plt+0x8e0c>
   1ae9c:	b	1ae1c <__assert_fail@plt+0x8ed4>
   1aea0:	ldrb	r2, [fp, r3]
   1aea4:	ldrb	ip, [r6, r1]
   1aea8:	add	lr, r6, r1
   1aeac:	mov	r7, r1
   1aeb0:	cmp	ip, #48	; 0x30
   1aeb4:	bne	1aec8 <__assert_fail@plt+0x8f80>
   1aeb8:	ldrb	ip, [lr, #1]!
   1aebc:	add	r7, r7, #1
   1aec0:	cmp	ip, #48	; 0x30
   1aec4:	beq	1aeb8 <__assert_fail@plt+0x8f70>
   1aec8:	cmp	r2, #48	; 0x30
   1aecc:	bne	1aee4 <__assert_fail@plt+0x8f9c>
   1aed0:	add	r2, fp, r3
   1aed4:	ldrb	r1, [r2, #1]!
   1aed8:	add	r3, r3, #1
   1aedc:	cmp	r1, #48	; 0x30
   1aee0:	beq	1aed4 <__assert_fail@plt+0x8f8c>
   1aee4:	add	sl, r6, r7
   1aee8:	mov	r1, r7
   1aeec:	sub	r9, r3, r7
   1aef0:	add	r2, fp, r3
   1aef4:	mov	r7, #0
   1aef8:	mov	r8, r4
   1aefc:	str	sl, [sp]
   1af00:	sub	lr, ip, #48	; 0x30
   1af04:	cmp	lr, #9
   1af08:	add	r3, r9, r1
   1af0c:	bls	1af38 <__assert_fail@plt+0x8ff0>
   1af10:	cmp	lr, #9
   1af14:	mov	r4, r8
   1af18:	bls	1afa4 <__assert_fail@plt+0x905c>
   1af1c:	ldrb	r2, [fp, r3]
   1af20:	sub	r2, r2, #48	; 0x30
   1af24:	cmp	r2, #9
   1af28:	bls	1afac <__assert_fail@plt+0x9064>
   1af2c:	cmp	r7, #0
   1af30:	beq	1ad1c <__assert_fail@plt+0x8dd4>
   1af34:	b	1ae44 <__assert_fail@plt+0x8efc>
   1af38:	ldrb	r4, [r2], #1
   1af3c:	sub	sl, r4, #48	; 0x30
   1af40:	cmp	sl, #9
   1af44:	bhi	1af10 <__assert_fail@plt+0x8fc8>
   1af48:	ldr	r3, [sp]
   1af4c:	cmp	r7, #0
   1af50:	subeq	r7, ip, r4
   1af54:	ldrb	ip, [r3, #1]!
   1af58:	add	r1, r1, #1
   1af5c:	str	r3, [sp]
   1af60:	b	1af00 <__assert_fail@plt+0x8fb8>
   1af64:	cmp	r5, #46	; 0x2e
   1af68:	addeq	r6, r6, #1
   1af6c:	addeq	fp, fp, #1
   1af70:	beq	1acac <__assert_fail@plt+0x8d64>
   1af74:	mvn	r7, #0
   1af78:	b	1ae44 <__assert_fail@plt+0x8efc>
   1af7c:	mov	r2, r4
   1af80:	mov	r1, fp
   1af84:	mov	r0, r6
   1af88:	bl	11f0c <strncmp@plt>
   1af8c:	cmp	r0, #0
   1af90:	ldreq	r4, [sp, #8]
   1af94:	ldreq	r5, [sp, #12]
   1af98:	subeq	r4, r4, r6
   1af9c:	subeq	r5, r5, fp
   1afa0:	b	1ad0c <__assert_fail@plt+0x8dc4>
   1afa4:	mov	r8, #1
   1afa8:	b	1ae40 <__assert_fail@plt+0x8ef8>
   1afac:	mvn	r8, #0
   1afb0:	b	1ae40 <__assert_fail@plt+0x8ef8>
   1afb4:	ldr	r7, [sp, #4]
   1afb8:	b	1ae44 <__assert_fail@plt+0x8efc>
   1afbc:	ldr	r7, [sp, #4]
   1afc0:	b	1ae38 <__assert_fail@plt+0x8ef0>
   1afc4:	ldr	r7, [sp, #4]
   1afc8:	mvn	r8, #0
   1afcc:	b	1ae38 <__assert_fail@plt+0x8ef0>
   1afd0:	ldr	r7, [sp, #4]
   1afd4:	mov	r9, #0
   1afd8:	mvn	r8, #0
   1afdc:	b	1ae38 <__assert_fail@plt+0x8ef0>
   1afe0:	andeq	r4, r2, r8, asr #9
   1afe4:	andeq	r4, r2, ip, asr #9
   1afe8:	push	{r4, r5, lr}
   1afec:	sub	sp, sp, #12
   1aff0:	mov	r5, r0
   1aff4:	bl	11d74 <__errno_location@plt>
   1aff8:	mov	r2, #0
   1affc:	mov	r4, r0
   1b000:	ldr	r3, [r0]
   1b004:	str	r2, [r4]
   1b008:	mov	r0, r5
   1b00c:	str	r3, [sp]
   1b010:	str	r3, [sp, #4]
   1b014:	bl	11a8c <free@plt>
   1b018:	ldr	r3, [r4]
   1b01c:	add	r2, sp, #8
   1b020:	cmp	r3, #0
   1b024:	moveq	r3, #4
   1b028:	movne	r3, #0
   1b02c:	add	r3, r2, r3
   1b030:	ldr	r3, [r3, #-8]
   1b034:	str	r3, [r4]
   1b038:	add	sp, sp, #12
   1b03c:	pop	{r4, r5, pc}
   1b040:	push	{r4, r5, r6, r7, r8, lr}
   1b044:	sub	sp, sp, #8
   1b048:	ldmib	r0, {ip, lr}
   1b04c:	mov	r4, r0
   1b050:	ldr	r5, [sp, #32]
   1b054:	cmp	lr, ip
   1b058:	beq	1b070 <__assert_fail@plt+0x9128>
   1b05c:	str	r5, [sp, #32]
   1b060:	mov	r0, r4
   1b064:	add	sp, sp, #8
   1b068:	pop	{r4, r5, r6, r7, r8, lr}
   1b06c:	b	11e04 <fseeko64@plt>
   1b070:	ldr	lr, [r0, #20]
   1b074:	ldr	ip, [r0, #16]
   1b078:	cmp	lr, ip
   1b07c:	bne	1b05c <__assert_fail@plt+0x9114>
   1b080:	ldr	r8, [r0, #36]	; 0x24
   1b084:	cmp	r8, #0
   1b088:	bne	1b05c <__assert_fail@plt+0x9114>
   1b08c:	mov	r6, r2
   1b090:	mov	r7, r3
   1b094:	bl	11dc8 <fileno@plt>
   1b098:	mov	r2, r6
   1b09c:	mov	r3, r7
   1b0a0:	str	r5, [sp]
   1b0a4:	bl	11c24 <lseek64@plt>
   1b0a8:	mvn	r3, #0
   1b0ac:	mvn	r2, #0
   1b0b0:	cmp	r1, r3
   1b0b4:	cmpeq	r0, r2
   1b0b8:	beq	1b0d8 <__assert_fail@plt+0x9190>
   1b0bc:	ldr	r3, [r4]
   1b0c0:	strd	r0, [r4, #80]	; 0x50
   1b0c4:	mov	r0, r8
   1b0c8:	bic	r3, r3, #16
   1b0cc:	str	r3, [r4]
   1b0d0:	add	sp, sp, #8
   1b0d4:	pop	{r4, r5, r6, r7, r8, pc}
   1b0d8:	mvn	r0, #0
   1b0dc:	b	1b0d0 <__assert_fail@plt+0x9188>
   1b0e0:	push	{lr}		; (str lr, [sp, #-4]!)
   1b0e4:	sub	sp, sp, #268	; 0x10c
   1b0e8:	add	r1, sp, #4
   1b0ec:	ldr	r2, [pc, #60]	; 1b130 <__assert_fail@plt+0x91e8>
   1b0f0:	bl	1f4b0 <__assert_fail@plt+0xd568>
   1b0f4:	cmp	r0, #0
   1b0f8:	movne	r0, #0
   1b0fc:	bne	1b128 <__assert_fail@plt+0x91e0>
   1b100:	ldr	r1, [pc, #44]	; 1b134 <__assert_fail@plt+0x91ec>
   1b104:	add	r0, sp, #4
   1b108:	bl	11a2c <strcmp@plt>
   1b10c:	cmp	r0, #0
   1b110:	beq	1b128 <__assert_fail@plt+0x91e0>
   1b114:	add	r0, sp, #4
   1b118:	ldr	r1, [pc, #24]	; 1b138 <__assert_fail@plt+0x91f0>
   1b11c:	bl	11a2c <strcmp@plt>
   1b120:	adds	r0, r0, #0
   1b124:	movne	r0, #1
   1b128:	add	sp, sp, #268	; 0x10c
   1b12c:	pop	{pc}		; (ldr pc, [sp], #4)
   1b130:	andeq	r0, r0, r1, lsl #2
   1b134:	ldrdeq	r4, [r2], -r0
   1b138:	ldrdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   1b13c:	andeq	r0, r0, r0
   1b140:	cmp	r0, #10
   1b144:	movcc	r0, #10
   1b148:	push	{r4, r5, r6, r7, r8, lr}
   1b14c:	orr	r7, r0, #1
   1b150:	cmn	r7, #1
   1b154:	ldrne	r8, [pc, #132]	; 1b1e0 <__assert_fail@plt+0x9298>
   1b158:	beq	1b1d0 <__assert_fail@plt+0x9288>
   1b15c:	cmp	r7, #9
   1b160:	bls	1b1d8 <__assert_fail@plt+0x9290>
   1b164:	umull	r2, r3, r8, r7
   1b168:	lsr	r3, r3, #1
   1b16c:	add	r3, r3, r3, lsl #1
   1b170:	cmp	r7, r3
   1b174:	beq	1b1c4 <__assert_fail@plt+0x927c>
   1b178:	mov	r6, #16
   1b17c:	mov	r5, #9
   1b180:	mov	r4, #3
   1b184:	b	1b198 <__assert_fail@plt+0x9250>
   1b188:	bl	21b44 <_obstack_memory_used@@Base+0x278>
   1b18c:	add	r6, r6, #8
   1b190:	cmp	r1, #0
   1b194:	beq	1b1c4 <__assert_fail@plt+0x927c>
   1b198:	add	r5, r5, r6
   1b19c:	add	r4, r4, #2
   1b1a0:	cmp	r5, r7
   1b1a4:	mov	r0, r7
   1b1a8:	mov	r1, r4
   1b1ac:	bcc	1b188 <__assert_fail@plt+0x9240>
   1b1b0:	mov	r1, r4
   1b1b4:	mov	r0, r7
   1b1b8:	bl	21b44 <_obstack_memory_used@@Base+0x278>
   1b1bc:	cmp	r1, #0
   1b1c0:	bne	1b1d0 <__assert_fail@plt+0x9288>
   1b1c4:	add	r7, r7, #2
   1b1c8:	cmn	r7, #1
   1b1cc:	bne	1b15c <__assert_fail@plt+0x9214>
   1b1d0:	mov	r0, r7
   1b1d4:	pop	{r4, r5, r6, r7, r8, pc}
   1b1d8:	mov	r4, #3
   1b1dc:	b	1b1b0 <__assert_fail@plt+0x9268>
   1b1e0:	bge	feac5c94 <optarg@@GLIBC_2.4+0xfea909bc>
   1b1e4:	push	{r4, lr}
   1b1e8:	ror	r0, r0, #3
   1b1ec:	bl	21b44 <_obstack_memory_used@@Base+0x278>
   1b1f0:	mov	r0, r1
   1b1f4:	pop	{r4, pc}
   1b1f8:	sub	r0, r1, r0
   1b1fc:	clz	r0, r0
   1b200:	lsr	r0, r0, #5
   1b204:	bx	lr
   1b208:	push	{r4, lr}
   1b20c:	mov	r4, r0
   1b210:	mov	r0, r1
   1b214:	ldr	r3, [r4, #24]
   1b218:	ldr	r1, [r4, #8]
   1b21c:	blx	r3
   1b220:	ldr	r3, [r4, #8]
   1b224:	cmp	r0, r3
   1b228:	bcs	1b238 <__assert_fail@plt+0x92f0>
   1b22c:	ldr	r3, [r4]
   1b230:	add	r0, r3, r0, lsl #3
   1b234:	pop	{r4, pc}
   1b238:	bl	11f24 <abort@plt>
   1b23c:	push	{r4, r5, r6, r7, r8, lr}
   1b240:	mov	r7, r2
   1b244:	mov	r8, r3
   1b248:	mov	r6, r0
   1b24c:	mov	r5, r1
   1b250:	bl	1b208 <__assert_fail@plt+0x92c0>
   1b254:	str	r0, [r7]
   1b258:	ldr	r3, [r0]
   1b25c:	cmp	r3, #0
   1b260:	beq	1b2f8 <__assert_fail@plt+0x93b0>
   1b264:	cmp	r5, r3
   1b268:	mov	r4, r0
   1b26c:	beq	1b28c <__assert_fail@plt+0x9344>
   1b270:	mov	r1, r3
   1b274:	mov	r0, r5
   1b278:	ldr	r3, [r6, #28]
   1b27c:	blx	r3
   1b280:	cmp	r0, #0
   1b284:	beq	1b2ec <__assert_fail@plt+0x93a4>
   1b288:	ldr	r3, [r4]
   1b28c:	cmp	r8, #0
   1b290:	beq	1b2bc <__assert_fail@plt+0x9374>
   1b294:	ldr	r2, [r4, #4]
   1b298:	cmp	r2, #0
   1b29c:	movne	ip, #0
   1b2a0:	ldmne	r2, {r0, r1}
   1b2a4:	streq	r2, [r4]
   1b2a8:	stmne	r4, {r0, r1}
   1b2ac:	strne	ip, [r2]
   1b2b0:	ldrne	r1, [r6, #36]	; 0x24
   1b2b4:	strne	r1, [r2, #4]
   1b2b8:	strne	r2, [r6, #36]	; 0x24
   1b2bc:	mov	r0, r3
   1b2c0:	pop	{r4, r5, r6, r7, r8, pc}
   1b2c4:	ldr	r3, [r2]
   1b2c8:	cmp	r5, r3
   1b2cc:	beq	1b30c <__assert_fail@plt+0x93c4>
   1b2d0:	mov	r1, r3
   1b2d4:	mov	r0, r5
   1b2d8:	ldr	r3, [r6, #28]
   1b2dc:	blx	r3
   1b2e0:	cmp	r0, #0
   1b2e4:	bne	1b304 <__assert_fail@plt+0x93bc>
   1b2e8:	ldr	r4, [r4, #4]
   1b2ec:	ldr	r2, [r4, #4]
   1b2f0:	cmp	r2, #0
   1b2f4:	bne	1b2c4 <__assert_fail@plt+0x937c>
   1b2f8:	mov	r3, #0
   1b2fc:	mov	r0, r3
   1b300:	pop	{r4, r5, r6, r7, r8, pc}
   1b304:	ldr	r2, [r4, #4]
   1b308:	ldr	r3, [r2]
   1b30c:	cmp	r8, #0
   1b310:	beq	1b2bc <__assert_fail@plt+0x9374>
   1b314:	ldr	r0, [r2, #4]
   1b318:	mov	r1, #0
   1b31c:	str	r0, [r4, #4]
   1b320:	str	r1, [r2]
   1b324:	ldr	r1, [r6, #36]	; 0x24
   1b328:	mov	r0, r3
   1b32c:	str	r1, [r2, #4]
   1b330:	str	r2, [r6, #36]	; 0x24
   1b334:	pop	{r4, r5, r6, r7, r8, pc}
   1b338:	ldr	r2, [pc, #164]	; 1b3e4 <__assert_fail@plt+0x949c>
   1b33c:	ldr	r3, [r0]
   1b340:	cmp	r3, r2
   1b344:	beq	1b3cc <__assert_fail@plt+0x9484>
   1b348:	vldr	s15, [r3, #8]
   1b34c:	vldr	s14, [pc, #128]	; 1b3d4 <__assert_fail@plt+0x948c>
   1b350:	vcmpe.f32	s15, s14
   1b354:	vmrs	APSR_nzcv, fpscr
   1b358:	ble	1b3c0 <__assert_fail@plt+0x9478>
   1b35c:	vldr	s13, [pc, #116]	; 1b3d8 <__assert_fail@plt+0x9490>
   1b360:	vcmpe.f32	s15, s13
   1b364:	vmrs	APSR_nzcv, fpscr
   1b368:	bpl	1b3c0 <__assert_fail@plt+0x9478>
   1b36c:	vldr	s13, [pc, #104]	; 1b3dc <__assert_fail@plt+0x9494>
   1b370:	vldr	s12, [r3, #12]
   1b374:	vcmpe.f32	s12, s13
   1b378:	vmrs	APSR_nzcv, fpscr
   1b37c:	ble	1b3c0 <__assert_fail@plt+0x9478>
   1b380:	vldr	s13, [r3]
   1b384:	vcmpe.f32	s13, #0.0
   1b388:	vmrs	APSR_nzcv, fpscr
   1b38c:	blt	1b3c0 <__assert_fail@plt+0x9478>
   1b390:	vadd.f32	s14, s13, s14
   1b394:	vldr	s13, [r3, #4]
   1b398:	vcmpe.f32	s14, s13
   1b39c:	vmrs	APSR_nzcv, fpscr
   1b3a0:	bpl	1b3c0 <__assert_fail@plt+0x9478>
   1b3a4:	vldr	s12, [pc, #52]	; 1b3e0 <__assert_fail@plt+0x9498>
   1b3a8:	vcmpe.f32	s13, s12
   1b3ac:	vmrs	APSR_nzcv, fpscr
   1b3b0:	bhi	1b3c0 <__assert_fail@plt+0x9478>
   1b3b4:	vcmpe.f32	s15, s14
   1b3b8:	vmrs	APSR_nzcv, fpscr
   1b3bc:	bgt	1b3cc <__assert_fail@plt+0x9484>
   1b3c0:	str	r2, [r0]
   1b3c4:	mov	r0, #0
   1b3c8:	bx	lr
   1b3cc:	mov	r0, #1
   1b3d0:	bx	lr
   1b3d4:	stclcc	12, cr12, [ip, #820]	; 0x334
   1b3d8:	svccc	0x00666666
   1b3dc:	svccc	0x008ccccd
   1b3e0:	svccc	0x00800000
   1b3e4:	ldrdeq	r4, [r2], -ip
   1b3e8:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b3ec:	ldm	r1, {r6, ip}
   1b3f0:	cmp	r6, ip
   1b3f4:	bcs	1b4b0 <__assert_fail@plt+0x9568>
   1b3f8:	mov	sl, r2
   1b3fc:	mov	r5, r0
   1b400:	mov	r8, r1
   1b404:	add	r6, r6, #8
   1b408:	mov	r9, #0
   1b40c:	ldr	fp, [r6, #-8]
   1b410:	mov	r7, r6
   1b414:	cmp	fp, #0
   1b418:	beq	1b4a4 <__assert_fail@plt+0x955c>
   1b41c:	ldr	r4, [r6, #-4]
   1b420:	cmp	r4, #0
   1b424:	bne	1b444 <__assert_fail@plt+0x94fc>
   1b428:	b	1b494 <__assert_fail@plt+0x954c>
   1b42c:	ldr	r3, [r0, #4]
   1b430:	cmp	r2, #0
   1b434:	str	r3, [r4, #4]
   1b438:	str	r4, [r0, #4]
   1b43c:	mov	r4, r2
   1b440:	beq	1b490 <__assert_fail@plt+0x9548>
   1b444:	ldr	fp, [r4]
   1b448:	mov	r0, r5
   1b44c:	mov	r1, fp
   1b450:	bl	1b208 <__assert_fail@plt+0x92c0>
   1b454:	ldr	r2, [r4, #4]
   1b458:	ldr	r1, [r0]
   1b45c:	cmp	r1, #0
   1b460:	bne	1b42c <__assert_fail@plt+0x94e4>
   1b464:	ldr	ip, [r5, #12]
   1b468:	str	fp, [r0]
   1b46c:	add	r3, ip, #1
   1b470:	str	r3, [r5, #12]
   1b474:	str	r1, [r4]
   1b478:	ldr	r3, [r5, #36]	; 0x24
   1b47c:	cmp	r2, #0
   1b480:	str	r3, [r4, #4]
   1b484:	str	r4, [r5, #36]	; 0x24
   1b488:	mov	r4, r2
   1b48c:	bne	1b444 <__assert_fail@plt+0x94fc>
   1b490:	ldr	fp, [r6, #-8]
   1b494:	cmp	sl, #0
   1b498:	str	r9, [r6, #-4]
   1b49c:	beq	1b4b8 <__assert_fail@plt+0x9570>
   1b4a0:	ldr	ip, [r8, #4]
   1b4a4:	cmp	ip, r7
   1b4a8:	add	r6, r6, #8
   1b4ac:	bhi	1b40c <__assert_fail@plt+0x94c4>
   1b4b0:	mov	r0, #1
   1b4b4:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b4b8:	mov	r1, fp
   1b4bc:	mov	r0, r5
   1b4c0:	bl	1b208 <__assert_fail@plt+0x92c0>
   1b4c4:	ldr	r2, [r0]
   1b4c8:	mov	r4, r0
   1b4cc:	cmp	r2, #0
   1b4d0:	beq	1b51c <__assert_fail@plt+0x95d4>
   1b4d4:	ldr	r0, [r5, #36]	; 0x24
   1b4d8:	cmp	r0, #0
   1b4dc:	beq	1b530 <__assert_fail@plt+0x95e8>
   1b4e0:	ldr	r2, [r0, #4]
   1b4e4:	str	r2, [r5, #36]	; 0x24
   1b4e8:	ldr	r2, [r4, #4]
   1b4ec:	str	fp, [r0]
   1b4f0:	str	r2, [r0, #4]
   1b4f4:	str	r0, [r4, #4]
   1b4f8:	str	r9, [r6, #-8]
   1b4fc:	ldr	r3, [r8, #12]
   1b500:	ldr	ip, [r8, #4]
   1b504:	sub	r3, r3, #1
   1b508:	cmp	ip, r7
   1b50c:	str	r3, [r8, #12]
   1b510:	add	r6, r6, #8
   1b514:	bhi	1b40c <__assert_fail@plt+0x94c4>
   1b518:	b	1b4b0 <__assert_fail@plt+0x9568>
   1b51c:	ldr	r2, [r5, #12]
   1b520:	str	fp, [r0]
   1b524:	add	r3, r2, #1
   1b528:	str	r3, [r5, #12]
   1b52c:	b	1b4f8 <__assert_fail@plt+0x95b0>
   1b530:	mov	r0, #8
   1b534:	bl	20f18 <__assert_fail@plt+0xefd0>
   1b538:	cmp	r0, #0
   1b53c:	bne	1b4e8 <__assert_fail@plt+0x95a0>
   1b540:	mov	r0, sl
   1b544:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b548:	ldr	r0, [r0, #8]
   1b54c:	bx	lr
   1b550:	ldr	r0, [r0, #12]
   1b554:	bx	lr
   1b558:	ldr	r0, [r0, #16]
   1b55c:	bx	lr
   1b560:	ldm	r0, {r1, ip}
   1b564:	mov	r0, #0
   1b568:	cmp	r1, ip
   1b56c:	bcs	1b5b4 <__assert_fail@plt+0x966c>
   1b570:	ldr	r3, [r1]
   1b574:	cmp	r3, #0
   1b578:	beq	1b5a4 <__assert_fail@plt+0x965c>
   1b57c:	ldr	r3, [r1, #4]
   1b580:	mov	r2, #1
   1b584:	cmp	r3, #0
   1b588:	beq	1b59c <__assert_fail@plt+0x9654>
   1b58c:	ldr	r3, [r3, #4]
   1b590:	add	r2, r2, #1
   1b594:	cmp	r3, #0
   1b598:	bne	1b58c <__assert_fail@plt+0x9644>
   1b59c:	cmp	r0, r2
   1b5a0:	movcc	r0, r2
   1b5a4:	add	r1, r1, #8
   1b5a8:	cmp	r1, ip
   1b5ac:	bcc	1b570 <__assert_fail@plt+0x9628>
   1b5b0:	bx	lr
   1b5b4:	bx	lr
   1b5b8:	push	{lr}		; (str lr, [sp, #-4]!)
   1b5bc:	mov	r2, #0
   1b5c0:	ldm	r0, {r1, lr}
   1b5c4:	mov	ip, r2
   1b5c8:	cmp	r1, lr
   1b5cc:	bcs	1b60c <__assert_fail@plt+0x96c4>
   1b5d0:	ldr	r3, [r1]
   1b5d4:	cmp	r3, #0
   1b5d8:	beq	1b600 <__assert_fail@plt+0x96b8>
   1b5dc:	ldr	r3, [r1, #4]
   1b5e0:	add	ip, ip, #1
   1b5e4:	cmp	r3, #0
   1b5e8:	add	r2, r2, #1
   1b5ec:	beq	1b600 <__assert_fail@plt+0x96b8>
   1b5f0:	ldr	r3, [r3, #4]
   1b5f4:	add	r2, r2, #1
   1b5f8:	cmp	r3, #0
   1b5fc:	bne	1b5f0 <__assert_fail@plt+0x96a8>
   1b600:	add	r1, r1, #8
   1b604:	cmp	r1, lr
   1b608:	bcc	1b5d0 <__assert_fail@plt+0x9688>
   1b60c:	ldr	r3, [r0, #12]
   1b610:	cmp	r3, ip
   1b614:	ldreq	r0, [r0, #16]
   1b618:	subeq	r0, r0, r2
   1b61c:	clzeq	r0, r0
   1b620:	lsreq	r0, r0, #5
   1b624:	movne	r0, #0
   1b628:	pop	{pc}		; (ldr pc, [sp], #4)
   1b62c:	push	{r4, r5, r6, r7, lr}
   1b630:	mov	r5, r1
   1b634:	ldm	r0, {ip, lr}
   1b638:	sub	sp, sp, #12
   1b63c:	ldr	r3, [r0, #16]
   1b640:	cmp	ip, lr
   1b644:	mov	r4, #0
   1b648:	ldr	r6, [r0, #8]
   1b64c:	ldr	r7, [r0, #12]
   1b650:	bcs	1b694 <__assert_fail@plt+0x974c>
   1b654:	ldr	r2, [ip]
   1b658:	cmp	r2, #0
   1b65c:	beq	1b688 <__assert_fail@plt+0x9740>
   1b660:	ldr	r2, [ip, #4]
   1b664:	mov	r1, #1
   1b668:	cmp	r2, #0
   1b66c:	beq	1b680 <__assert_fail@plt+0x9738>
   1b670:	ldr	r2, [r2, #4]
   1b674:	add	r1, r1, #1
   1b678:	cmp	r2, #0
   1b67c:	bne	1b670 <__assert_fail@plt+0x9728>
   1b680:	cmp	r4, r1
   1b684:	movcc	r4, r1
   1b688:	add	ip, ip, #8
   1b68c:	cmp	ip, lr
   1b690:	bcc	1b654 <__assert_fail@plt+0x970c>
   1b694:	ldr	r2, [pc, #116]	; 1b710 <__assert_fail@plt+0x97c8>
   1b698:	mov	r1, #1
   1b69c:	mov	r0, r5
   1b6a0:	bl	11dd4 <__fprintf_chk@plt>
   1b6a4:	mov	r3, r6
   1b6a8:	ldr	r2, [pc, #100]	; 1b714 <__assert_fail@plt+0x97cc>
   1b6ac:	mov	r1, #1
   1b6b0:	mov	r0, r5
   1b6b4:	bl	11dd4 <__fprintf_chk@plt>
   1b6b8:	vmov	s15, r7
   1b6bc:	vldr	d5, [pc, #68]	; 1b708 <__assert_fail@plt+0x97c0>
   1b6c0:	mov	r3, r7
   1b6c4:	ldr	r2, [pc, #76]	; 1b718 <__assert_fail@plt+0x97d0>
   1b6c8:	vcvt.f64.u32	d6, s15
   1b6cc:	vmov	s15, r6
   1b6d0:	mov	r1, #1
   1b6d4:	mov	r0, r5
   1b6d8:	vcvt.f64.u32	d7, s15
   1b6dc:	vmul.f64	d6, d6, d5
   1b6e0:	vdiv.f64	d5, d6, d7
   1b6e4:	vstr	d5, [sp]
   1b6e8:	bl	11dd4 <__fprintf_chk@plt>
   1b6ec:	mov	r3, r4
   1b6f0:	mov	r0, r5
   1b6f4:	ldr	r2, [pc, #32]	; 1b71c <__assert_fail@plt+0x97d4>
   1b6f8:	mov	r1, #1
   1b6fc:	add	sp, sp, #12
   1b700:	pop	{r4, r5, r6, r7, lr}
   1b704:	b	11dd4 <__fprintf_chk@plt>
   1b708:	andeq	r0, r0, r0
   1b70c:	subsmi	r0, r9, r0
   1b710:	strdeq	r4, [r2], -r0
   1b714:	andeq	r4, r2, r8, lsl #10
   1b718:	andeq	r4, r2, r0, lsr #10
   1b71c:	andeq	r4, r2, r4, asr #10
   1b720:	push	{r4, r5, r6, lr}
   1b724:	mov	r6, r0
   1b728:	mov	r5, r1
   1b72c:	bl	1b208 <__assert_fail@plt+0x92c0>
   1b730:	ldr	r3, [r0]
   1b734:	cmp	r3, #0
   1b738:	movne	r4, r0
   1b73c:	bne	1b748 <__assert_fail@plt+0x9800>
   1b740:	b	1b774 <__assert_fail@plt+0x982c>
   1b744:	ldr	r3, [r4]
   1b748:	cmp	r5, r3
   1b74c:	mov	r1, r3
   1b750:	mov	r0, r5
   1b754:	beq	1b77c <__assert_fail@plt+0x9834>
   1b758:	ldr	r3, [r6, #28]
   1b75c:	blx	r3
   1b760:	cmp	r0, #0
   1b764:	bne	1b784 <__assert_fail@plt+0x983c>
   1b768:	ldr	r4, [r4, #4]
   1b76c:	cmp	r4, #0
   1b770:	bne	1b744 <__assert_fail@plt+0x97fc>
   1b774:	mov	r0, #0
   1b778:	pop	{r4, r5, r6, pc}
   1b77c:	mov	r0, r5
   1b780:	pop	{r4, r5, r6, pc}
   1b784:	ldr	r0, [r4]
   1b788:	pop	{r4, r5, r6, pc}
   1b78c:	ldr	r3, [r0, #16]
   1b790:	cmp	r3, #0
   1b794:	beq	1b7c8 <__assert_fail@plt+0x9880>
   1b798:	ldr	r3, [r0]
   1b79c:	ldr	r2, [r0, #4]
   1b7a0:	cmp	r3, r2
   1b7a4:	bcc	1b7b8 <__assert_fail@plt+0x9870>
   1b7a8:	b	1b7d0 <__assert_fail@plt+0x9888>
   1b7ac:	add	r3, r3, #8
   1b7b0:	cmp	r3, r2
   1b7b4:	bcs	1b7d0 <__assert_fail@plt+0x9888>
   1b7b8:	ldr	r0, [r3]
   1b7bc:	cmp	r0, #0
   1b7c0:	beq	1b7ac <__assert_fail@plt+0x9864>
   1b7c4:	bx	lr
   1b7c8:	mov	r0, r3
   1b7cc:	bx	lr
   1b7d0:	push	{r4, lr}
   1b7d4:	bl	11f24 <abort@plt>
   1b7d8:	push	{r4, r5, r6, lr}
   1b7dc:	mov	r5, r0
   1b7e0:	mov	r4, r1
   1b7e4:	bl	1b208 <__assert_fail@plt+0x92c0>
   1b7e8:	mov	r2, r0
   1b7ec:	mov	r3, r0
   1b7f0:	b	1b7fc <__assert_fail@plt+0x98b4>
   1b7f4:	cmp	r3, #0
   1b7f8:	beq	1b810 <__assert_fail@plt+0x98c8>
   1b7fc:	ldm	r3, {r1, r3}
   1b800:	cmp	r4, r1
   1b804:	bne	1b7f4 <__assert_fail@plt+0x98ac>
   1b808:	cmp	r3, #0
   1b80c:	bne	1b838 <__assert_fail@plt+0x98f0>
   1b810:	ldr	r3, [r5, #4]
   1b814:	b	1b824 <__assert_fail@plt+0x98dc>
   1b818:	ldr	r0, [r2]
   1b81c:	cmp	r0, #0
   1b820:	popne	{r4, r5, r6, pc}
   1b824:	add	r2, r2, #8
   1b828:	cmp	r2, r3
   1b82c:	bcc	1b818 <__assert_fail@plt+0x98d0>
   1b830:	mov	r0, #0
   1b834:	pop	{r4, r5, r6, pc}
   1b838:	ldr	r0, [r3]
   1b83c:	pop	{r4, r5, r6, pc}
   1b840:	push	{r4, r5, r6, lr}
   1b844:	ldm	r0, {r5, lr}
   1b848:	cmp	r5, lr
   1b84c:	bcs	1b8d0 <__assert_fail@plt+0x9988>
   1b850:	add	r5, r5, #8
   1b854:	mov	ip, #0
   1b858:	ldr	r3, [r5, #-8]
   1b85c:	mov	r6, r5
   1b860:	cmp	r3, #0
   1b864:	beq	1b8b0 <__assert_fail@plt+0x9968>
   1b868:	cmp	r2, ip
   1b86c:	bls	1b8bc <__assert_fail@plt+0x9974>
   1b870:	str	r3, [r1, ip, lsl #2]
   1b874:	ldr	r3, [r5, #-4]
   1b878:	add	r4, ip, #1
   1b87c:	cmp	r3, #0
   1b880:	add	lr, r1, ip, lsl #2
   1b884:	beq	1b8c4 <__assert_fail@plt+0x997c>
   1b888:	mov	ip, r4
   1b88c:	cmp	r2, ip
   1b890:	beq	1b8bc <__assert_fail@plt+0x9974>
   1b894:	ldr	r4, [r3]
   1b898:	add	ip, ip, #1
   1b89c:	str	r4, [lr, #4]!
   1b8a0:	ldr	r3, [r3, #4]
   1b8a4:	cmp	r3, #0
   1b8a8:	bne	1b88c <__assert_fail@plt+0x9944>
   1b8ac:	ldr	lr, [r0, #4]
   1b8b0:	cmp	lr, r6
   1b8b4:	add	r5, r5, #8
   1b8b8:	bhi	1b858 <__assert_fail@plt+0x9910>
   1b8bc:	mov	r0, ip
   1b8c0:	pop	{r4, r5, r6, pc}
   1b8c4:	ldr	lr, [r0, #4]
   1b8c8:	mov	ip, r4
   1b8cc:	b	1b8b0 <__assert_fail@plt+0x9968>
   1b8d0:	mov	ip, #0
   1b8d4:	b	1b8bc <__assert_fail@plt+0x9974>
   1b8d8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1b8dc:	ldr	r3, [r0, #4]
   1b8e0:	ldr	r8, [r0]
   1b8e4:	cmp	r8, r3
   1b8e8:	bcs	1b94c <__assert_fail@plt+0x9a04>
   1b8ec:	mov	r7, r2
   1b8f0:	mov	r6, r1
   1b8f4:	mov	r9, r0
   1b8f8:	mov	r5, #0
   1b8fc:	ldr	r0, [r8]
   1b900:	cmp	r0, #0
   1b904:	beq	1b938 <__assert_fail@plt+0x99f0>
   1b908:	mov	r4, r8
   1b90c:	b	1b914 <__assert_fail@plt+0x99cc>
   1b910:	ldr	r0, [r4]
   1b914:	mov	r1, r7
   1b918:	blx	r6
   1b91c:	cmp	r0, #0
   1b920:	beq	1b944 <__assert_fail@plt+0x99fc>
   1b924:	ldr	r4, [r4, #4]
   1b928:	add	r5, r5, #1
   1b92c:	cmp	r4, #0
   1b930:	bne	1b910 <__assert_fail@plt+0x99c8>
   1b934:	ldr	r3, [r9, #4]
   1b938:	add	r8, r8, #8
   1b93c:	cmp	r3, r8
   1b940:	bhi	1b8fc <__assert_fail@plt+0x99b4>
   1b944:	mov	r0, r5
   1b948:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1b94c:	mov	r5, #0
   1b950:	b	1b944 <__assert_fail@plt+0x99fc>
   1b954:	push	{r4, r5, r6, lr}
   1b958:	mov	r4, r0
   1b95c:	ldrb	r0, [r0]
   1b960:	cmp	r0, #0
   1b964:	beq	1b994 <__assert_fail@plt+0x9a4c>
   1b968:	mov	r5, r1
   1b96c:	mov	r1, #0
   1b970:	rsb	r1, r1, r1, lsl #5
   1b974:	add	r0, r1, r0
   1b978:	mov	r1, r5
   1b97c:	bl	21b44 <_obstack_memory_used@@Base+0x278>
   1b980:	ldrb	r0, [r4, #1]!
   1b984:	cmp	r0, #0
   1b988:	bne	1b970 <__assert_fail@plt+0x9a28>
   1b98c:	mov	r0, r1
   1b990:	pop	{r4, r5, r6, pc}
   1b994:	mov	r1, r0
   1b998:	b	1b98c <__assert_fail@plt+0x9a44>
   1b99c:	push	{lr}		; (str lr, [sp, #-4]!)
   1b9a0:	mov	ip, r0
   1b9a4:	ldr	lr, [pc, #16]	; 1b9bc <__assert_fail@plt+0x9a74>
   1b9a8:	ldm	lr!, {r0, r1, r2, r3}
   1b9ac:	ldr	lr, [lr]
   1b9b0:	stmia	ip!, {r0, r1, r2, r3}
   1b9b4:	str	lr, [ip]
   1b9b8:	pop	{pc}		; (ldr pc, [sp], #4)
   1b9bc:	ldrdeq	r4, [r2], -ip
   1b9c0:	push	{r4, r5, r6, r7, lr}
   1b9c4:	sub	sp, sp, #12
   1b9c8:	cmp	r2, #0
   1b9cc:	str	r0, [sp, #4]
   1b9d0:	ldr	r6, [pc, #304]	; 1bb08 <__assert_fail@plt+0x9bc0>
   1b9d4:	mov	r0, #40	; 0x28
   1b9d8:	movne	r6, r2
   1b9dc:	cmp	r3, #0
   1b9e0:	ldr	r7, [pc, #292]	; 1bb0c <__assert_fail@plt+0x9bc4>
   1b9e4:	mov	r5, r1
   1b9e8:	movne	r7, r3
   1b9ec:	bl	20f18 <__assert_fail@plt+0xefd0>
   1b9f0:	subs	r4, r0, #0
   1b9f4:	beq	1ba8c <__assert_fail@plt+0x9b44>
   1b9f8:	cmp	r5, #0
   1b9fc:	beq	1bae0 <__assert_fail@plt+0x9b98>
   1ba00:	mov	r0, r4
   1ba04:	str	r5, [r0, #20]!
   1ba08:	bl	1b338 <__assert_fail@plt+0x93f0>
   1ba0c:	cmp	r0, #0
   1ba10:	beq	1bac8 <__assert_fail@plt+0x9b80>
   1ba14:	ldrb	r3, [r5, #16]
   1ba18:	cmp	r3, #0
   1ba1c:	beq	1ba98 <__assert_fail@plt+0x9b50>
   1ba20:	ldr	r0, [sp, #4]
   1ba24:	bl	1b140 <__assert_fail@plt+0x91f8>
   1ba28:	lsrs	r2, r0, #30
   1ba2c:	movne	r5, #1
   1ba30:	moveq	r5, #0
   1ba34:	tst	r0, #536870912	; 0x20000000
   1ba38:	bne	1bac0 <__assert_fail@plt+0x9b78>
   1ba3c:	cmp	r5, #0
   1ba40:	bne	1bac0 <__assert_fail@plt+0x9b78>
   1ba44:	cmp	r0, #0
   1ba48:	str	r0, [r4, #8]
   1ba4c:	beq	1bac8 <__assert_fail@plt+0x9b80>
   1ba50:	mov	r1, #8
   1ba54:	bl	20ed0 <__assert_fail@plt+0xef88>
   1ba58:	cmp	r0, #0
   1ba5c:	str	r0, [r4]
   1ba60:	beq	1bac8 <__assert_fail@plt+0x9b80>
   1ba64:	ldr	r3, [r4, #8]
   1ba68:	str	r5, [r4, #12]
   1ba6c:	str	r5, [r4, #16]
   1ba70:	add	r0, r0, r3, lsl #3
   1ba74:	ldr	r3, [sp, #32]
   1ba78:	str	r6, [r4, #24]
   1ba7c:	str	r7, [r4, #28]
   1ba80:	str	r3, [r4, #32]
   1ba84:	str	r5, [r4, #36]	; 0x24
   1ba88:	str	r0, [r4, #4]
   1ba8c:	mov	r0, r4
   1ba90:	add	sp, sp, #12
   1ba94:	pop	{r4, r5, r6, r7, pc}
   1ba98:	vldr	s12, [r5, #8]
   1ba9c:	vldr	s15, [sp, #4]
   1baa0:	vldr	s14, [pc, #88]	; 1bb00 <__assert_fail@plt+0x9bb8>
   1baa4:	vcvt.f32.u32	s13, s15
   1baa8:	vdiv.f32	s15, s13, s12
   1baac:	vcmpe.f32	s15, s14
   1bab0:	vmrs	APSR_nzcv, fpscr
   1bab4:	vcvtlt.u32.f32	s15, s15
   1bab8:	vstrlt	s15, [sp, #4]
   1babc:	blt	1ba20 <__assert_fail@plt+0x9ad8>
   1bac0:	mov	r3, #0
   1bac4:	str	r3, [r4, #8]
   1bac8:	mov	r0, r4
   1bacc:	bl	1afe8 <__assert_fail@plt+0x90a0>
   1bad0:	mov	r4, #0
   1bad4:	mov	r0, r4
   1bad8:	add	sp, sp, #12
   1badc:	pop	{r4, r5, r6, r7, pc}
   1bae0:	ldr	r3, [pc, #40]	; 1bb10 <__assert_fail@plt+0x9bc8>
   1bae4:	mov	r0, r4
   1bae8:	str	r3, [r0, #20]!
   1baec:	bl	1b338 <__assert_fail@plt+0x93f0>
   1baf0:	cmp	r0, #0
   1baf4:	vldrne	s12, [pc, #8]	; 1bb04 <__assert_fail@plt+0x9bbc>
   1baf8:	bne	1ba9c <__assert_fail@plt+0x9b54>
   1bafc:	b	1bac8 <__assert_fail@plt+0x9b80>
   1bb00:	svcmi	0x00800000
   1bb04:	svccc	0x004ccccd
   1bb08:	andeq	fp, r1, r4, ror #3
   1bb0c:	strdeq	fp, [r1], -r8
   1bb10:	ldrdeq	r4, [r2], -ip
   1bb14:	push	{r4, r5, r6, r7, r8, lr}
   1bb18:	mov	r5, r0
   1bb1c:	ldr	r7, [r0]
   1bb20:	ldr	r3, [r0, #4]
   1bb24:	cmp	r7, r3
   1bb28:	addcc	r7, r7, #8
   1bb2c:	movcc	r6, #0
   1bb30:	bcs	1bbac <__assert_fail@plt+0x9c64>
   1bb34:	ldr	r2, [r7, #-8]
   1bb38:	mov	r8, r7
   1bb3c:	cmp	r2, #0
   1bb40:	beq	1bba0 <__assert_fail@plt+0x9c58>
   1bb44:	ldr	r4, [r7, #-4]
   1bb48:	ldr	r2, [r5, #32]
   1bb4c:	cmp	r4, #0
   1bb50:	beq	1bb84 <__assert_fail@plt+0x9c3c>
   1bb54:	cmp	r2, #0
   1bb58:	beq	1bb68 <__assert_fail@plt+0x9c20>
   1bb5c:	ldr	r0, [r4]
   1bb60:	blx	r2
   1bb64:	ldr	r2, [r5, #32]
   1bb68:	ldr	r3, [r4, #4]
   1bb6c:	ldr	r1, [r5, #36]	; 0x24
   1bb70:	str	r6, [r4]
   1bb74:	str	r1, [r4, #4]
   1bb78:	str	r4, [r5, #36]	; 0x24
   1bb7c:	subs	r4, r3, #0
   1bb80:	bne	1bb54 <__assert_fail@plt+0x9c0c>
   1bb84:	cmp	r2, #0
   1bb88:	beq	1bb94 <__assert_fail@plt+0x9c4c>
   1bb8c:	ldr	r0, [r7, #-8]
   1bb90:	blx	r2
   1bb94:	str	r6, [r7, #-8]
   1bb98:	str	r6, [r7, #-4]
   1bb9c:	ldr	r3, [r5, #4]
   1bba0:	cmp	r3, r8
   1bba4:	add	r7, r7, #8
   1bba8:	bhi	1bb34 <__assert_fail@plt+0x9bec>
   1bbac:	mov	r3, #0
   1bbb0:	str	r3, [r5, #12]
   1bbb4:	str	r3, [r5, #16]
   1bbb8:	pop	{r4, r5, r6, r7, r8, pc}
   1bbbc:	ldr	r3, [r0, #32]
   1bbc0:	push	{r4, r5, r6, lr}
   1bbc4:	cmp	r3, #0
   1bbc8:	mov	r5, r0
   1bbcc:	beq	1bc2c <__assert_fail@plt+0x9ce4>
   1bbd0:	ldr	r3, [r0, #16]
   1bbd4:	cmp	r3, #0
   1bbd8:	beq	1bc2c <__assert_fail@plt+0x9ce4>
   1bbdc:	ldr	r6, [r0]
   1bbe0:	ldr	r3, [r0, #4]
   1bbe4:	cmp	r6, r3
   1bbe8:	bcs	1bc68 <__assert_fail@plt+0x9d20>
   1bbec:	ldr	r0, [r6]
   1bbf0:	cmp	r0, #0
   1bbf4:	movne	r4, r6
   1bbf8:	bne	1bc04 <__assert_fail@plt+0x9cbc>
   1bbfc:	b	1bc1c <__assert_fail@plt+0x9cd4>
   1bc00:	ldr	r0, [r4]
   1bc04:	ldr	r3, [r5, #32]
   1bc08:	blx	r3
   1bc0c:	ldr	r4, [r4, #4]
   1bc10:	cmp	r4, #0
   1bc14:	bne	1bc00 <__assert_fail@plt+0x9cb8>
   1bc18:	ldr	r3, [r5, #4]
   1bc1c:	add	r6, r6, #8
   1bc20:	cmp	r3, r6
   1bc24:	bhi	1bbec <__assert_fail@plt+0x9ca4>
   1bc28:	b	1bc30 <__assert_fail@plt+0x9ce8>
   1bc2c:	ldr	r3, [r5, #4]
   1bc30:	ldr	r6, [r5]
   1bc34:	cmp	r3, r6
   1bc38:	bls	1bc68 <__assert_fail@plt+0x9d20>
   1bc3c:	ldr	r0, [r6, #4]
   1bc40:	cmp	r0, #0
   1bc44:	beq	1bc5c <__assert_fail@plt+0x9d14>
   1bc48:	ldr	r4, [r0, #4]
   1bc4c:	bl	1afe8 <__assert_fail@plt+0x90a0>
   1bc50:	subs	r0, r4, #0
   1bc54:	bne	1bc48 <__assert_fail@plt+0x9d00>
   1bc58:	ldr	r3, [r5, #4]
   1bc5c:	add	r6, r6, #8
   1bc60:	cmp	r3, r6
   1bc64:	bhi	1bc3c <__assert_fail@plt+0x9cf4>
   1bc68:	ldr	r0, [r5, #36]	; 0x24
   1bc6c:	cmp	r0, #0
   1bc70:	beq	1bc84 <__assert_fail@plt+0x9d3c>
   1bc74:	ldr	r4, [r0, #4]
   1bc78:	bl	1afe8 <__assert_fail@plt+0x90a0>
   1bc7c:	subs	r0, r4, #0
   1bc80:	bne	1bc74 <__assert_fail@plt+0x9d2c>
   1bc84:	ldr	r0, [r5]
   1bc88:	bl	1afe8 <__assert_fail@plt+0x90a0>
   1bc8c:	mov	r0, r5
   1bc90:	pop	{r4, r5, r6, lr}
   1bc94:	b	1afe8 <__assert_fail@plt+0x90a0>
   1bc98:	ldr	r3, [r0, #20]
   1bc9c:	push	{r4, r5, r6, r7, lr}
   1bca0:	sub	sp, sp, #52	; 0x34
   1bca4:	ldrb	r2, [r3, #16]
   1bca8:	mov	r5, r0
   1bcac:	str	r1, [sp, #4]
   1bcb0:	cmp	r2, #0
   1bcb4:	bne	1bce0 <__assert_fail@plt+0x9d98>
   1bcb8:	vmov	s15, r1
   1bcbc:	vldr	s13, [r3, #8]
   1bcc0:	vldr	s14, [pc, #352]	; 1be28 <__assert_fail@plt+0x9ee0>
   1bcc4:	vcvt.f32.u32	s12, s15
   1bcc8:	vdiv.f32	s15, s12, s13
   1bccc:	vcmpe.f32	s15, s14
   1bcd0:	vmrs	APSR_nzcv, fpscr
   1bcd4:	bge	1bde4 <__assert_fail@plt+0x9e9c>
   1bcd8:	vcvt.u32.f32	s15, s15
   1bcdc:	vstr	s15, [sp, #4]
   1bce0:	ldr	r0, [sp, #4]
   1bce4:	bl	1b140 <__assert_fail@plt+0x91f8>
   1bce8:	lsrs	r3, r0, #30
   1bcec:	movne	r2, #1
   1bcf0:	moveq	r2, #0
   1bcf4:	tst	r0, #536870912	; 0x20000000
   1bcf8:	movne	r2, #1
   1bcfc:	cmp	r0, #0
   1bd00:	movne	r4, r2
   1bd04:	orreq	r4, r2, #1
   1bd08:	cmp	r4, #0
   1bd0c:	mov	r6, r0
   1bd10:	bne	1bde4 <__assert_fail@plt+0x9e9c>
   1bd14:	ldr	r3, [r5, #8]
   1bd18:	cmp	r3, r0
   1bd1c:	beq	1bdd4 <__assert_fail@plt+0x9e8c>
   1bd20:	mov	r1, #8
   1bd24:	bl	20ed0 <__assert_fail@plt+0xef88>
   1bd28:	cmp	r0, #0
   1bd2c:	str	r0, [sp, #8]
   1bd30:	beq	1bde4 <__assert_fail@plt+0x9e9c>
   1bd34:	ldr	r1, [r5, #24]
   1bd38:	ldr	r7, [r5, #20]
   1bd3c:	ldr	lr, [r5, #28]
   1bd40:	ldr	ip, [r5, #32]
   1bd44:	add	r0, r0, r6, lsl #3
   1bd48:	ldr	r3, [r5, #36]	; 0x24
   1bd4c:	str	r0, [sp, #12]
   1bd50:	mov	r2, r4
   1bd54:	str	r1, [sp, #32]
   1bd58:	add	r0, sp, #8
   1bd5c:	mov	r1, r5
   1bd60:	str	r4, [sp, #20]
   1bd64:	str	r4, [sp, #24]
   1bd68:	str	r6, [sp, #16]
   1bd6c:	str	r7, [sp, #28]
   1bd70:	str	lr, [sp, #36]	; 0x24
   1bd74:	str	ip, [sp, #40]	; 0x28
   1bd78:	str	r3, [sp, #44]	; 0x2c
   1bd7c:	bl	1b3e8 <__assert_fail@plt+0x94a0>
   1bd80:	subs	r4, r0, #0
   1bd84:	bne	1bdf4 <__assert_fail@plt+0x9eac>
   1bd88:	ldr	r3, [sp, #44]	; 0x2c
   1bd8c:	mov	r2, #1
   1bd90:	str	r3, [r5, #36]	; 0x24
   1bd94:	add	r1, sp, #8
   1bd98:	mov	r0, r5
   1bd9c:	bl	1b3e8 <__assert_fail@plt+0x94a0>
   1bda0:	cmp	r0, #0
   1bda4:	beq	1be24 <__assert_fail@plt+0x9edc>
   1bda8:	add	r1, sp, #8
   1bdac:	mov	r0, r5
   1bdb0:	mov	r2, r4
   1bdb4:	bl	1b3e8 <__assert_fail@plt+0x94a0>
   1bdb8:	cmp	r0, #0
   1bdbc:	beq	1be24 <__assert_fail@plt+0x9edc>
   1bdc0:	ldr	r0, [sp, #8]
   1bdc4:	bl	1afe8 <__assert_fail@plt+0x90a0>
   1bdc8:	mov	r0, r4
   1bdcc:	add	sp, sp, #52	; 0x34
   1bdd0:	pop	{r4, r5, r6, r7, pc}
   1bdd4:	mov	r4, #1
   1bdd8:	mov	r0, r4
   1bddc:	add	sp, sp, #52	; 0x34
   1bde0:	pop	{r4, r5, r6, r7, pc}
   1bde4:	mov	r4, #0
   1bde8:	mov	r0, r4
   1bdec:	add	sp, sp, #52	; 0x34
   1bdf0:	pop	{r4, r5, r6, r7, pc}
   1bdf4:	ldr	r0, [r5]
   1bdf8:	bl	1afe8 <__assert_fail@plt+0x90a0>
   1bdfc:	add	r0, sp, #12
   1be00:	ldr	ip, [sp, #8]
   1be04:	ldm	r0, {r0, r1, r2}
   1be08:	ldr	r3, [sp, #44]	; 0x2c
   1be0c:	str	ip, [r5]
   1be10:	stmib	r5, {r0, r1, r2}
   1be14:	mov	r0, r4
   1be18:	str	r3, [r5, #36]	; 0x24
   1be1c:	add	sp, sp, #52	; 0x34
   1be20:	pop	{r4, r5, r6, r7, pc}
   1be24:	bl	11f24 <abort@plt>
   1be28:	svcmi	0x00800000
   1be2c:	push	{r4, r5, r6, lr}
   1be30:	subs	r6, r1, #0
   1be34:	sub	sp, sp, #8
   1be38:	beq	1bf6c <__assert_fail@plt+0xa024>
   1be3c:	mov	r4, r2
   1be40:	mov	r3, #0
   1be44:	add	r2, sp, #4
   1be48:	mov	r5, r0
   1be4c:	bl	1b23c <__assert_fail@plt+0x92f4>
   1be50:	cmp	r0, #0
   1be54:	beq	1be70 <__assert_fail@plt+0x9f28>
   1be58:	cmp	r4, #0
   1be5c:	moveq	r0, r4
   1be60:	strne	r0, [r4]
   1be64:	movne	r0, #0
   1be68:	add	sp, sp, #8
   1be6c:	pop	{r4, r5, r6, pc}
   1be70:	vldr	s15, [r5, #8]
   1be74:	ldr	r3, [r5, #20]
   1be78:	vldr	s14, [r5, #12]
   1be7c:	vcvt.f32.u32	s15, s15
   1be80:	vldr	s13, [r3, #8]
   1be84:	vcvt.f32.u32	s14, s14
   1be88:	vmul.f32	s15, s15, s13
   1be8c:	vcmpe.f32	s14, s15
   1be90:	vmrs	APSR_nzcv, fpscr
   1be94:	bgt	1bee4 <__assert_fail@plt+0x9f9c>
   1be98:	ldr	r2, [sp, #4]
   1be9c:	ldr	r3, [r2]
   1bea0:	cmp	r3, #0
   1bea4:	beq	1bf70 <__assert_fail@plt+0xa028>
   1bea8:	ldr	r3, [r5, #36]	; 0x24
   1beac:	cmp	r3, #0
   1beb0:	beq	1bf94 <__assert_fail@plt+0xa04c>
   1beb4:	ldr	r1, [r3, #4]
   1beb8:	str	r1, [r5, #36]	; 0x24
   1bebc:	ldr	r1, [r5, #16]
   1bec0:	ldr	r0, [r2, #4]
   1bec4:	add	r1, r1, #1
   1bec8:	str	r0, [r3, #4]
   1becc:	str	r6, [r3]
   1bed0:	mov	r0, #1
   1bed4:	str	r3, [r2, #4]
   1bed8:	str	r1, [r5, #16]
   1bedc:	add	sp, sp, #8
   1bee0:	pop	{r4, r5, r6, pc}
   1bee4:	add	r0, r5, #20
   1bee8:	bl	1b338 <__assert_fail@plt+0x93f0>
   1beec:	vldr	s15, [r5, #8]
   1bef0:	ldr	r3, [r5, #20]
   1bef4:	vldr	s14, [r5, #12]
   1bef8:	vcvt.f32.u32	s15, s15
   1befc:	vldr	s13, [r3, #8]
   1bf00:	vcvt.f32.u32	s14, s14
   1bf04:	vmul.f32	s12, s13, s15
   1bf08:	vcmpe.f32	s14, s12
   1bf0c:	vmrs	APSR_nzcv, fpscr
   1bf10:	ble	1be98 <__assert_fail@plt+0x9f50>
   1bf14:	vldr	s14, [r3, #12]
   1bf18:	ldrb	r2, [r3, #16]
   1bf1c:	vmul.f32	s15, s15, s14
   1bf20:	cmp	r2, #0
   1bf24:	vldr	s14, [pc, #132]	; 1bfb0 <__assert_fail@plt+0xa068>
   1bf28:	vmuleq.f32	s15, s15, s13
   1bf2c:	vcmpe.f32	s15, s14
   1bf30:	vmrs	APSR_nzcv, fpscr
   1bf34:	bge	1bfa8 <__assert_fail@plt+0xa060>
   1bf38:	vcvt.u32.f32	s15, s15
   1bf3c:	mov	r0, r5
   1bf40:	vmov	r1, s15
   1bf44:	bl	1bc98 <__assert_fail@plt+0x9d50>
   1bf48:	cmp	r0, #0
   1bf4c:	beq	1bfa8 <__assert_fail@plt+0xa060>
   1bf50:	add	r2, sp, #4
   1bf54:	mov	r3, #0
   1bf58:	mov	r1, r6
   1bf5c:	mov	r0, r5
   1bf60:	bl	1b23c <__assert_fail@plt+0x92f4>
   1bf64:	cmp	r0, #0
   1bf68:	beq	1be98 <__assert_fail@plt+0x9f50>
   1bf6c:	bl	11f24 <abort@plt>
   1bf70:	ldr	r1, [r5, #16]
   1bf74:	ldr	r3, [r5, #12]
   1bf78:	add	r1, r1, #1
   1bf7c:	add	r3, r3, #1
   1bf80:	str	r6, [r2]
   1bf84:	mov	r0, #1
   1bf88:	str	r1, [r5, #16]
   1bf8c:	str	r3, [r5, #12]
   1bf90:	b	1be68 <__assert_fail@plt+0x9f20>
   1bf94:	mov	r0, #8
   1bf98:	bl	20f18 <__assert_fail@plt+0xefd0>
   1bf9c:	subs	r3, r0, #0
   1bfa0:	ldrne	r2, [sp, #4]
   1bfa4:	bne	1bebc <__assert_fail@plt+0x9f74>
   1bfa8:	mvn	r0, #0
   1bfac:	b	1be68 <__assert_fail@plt+0x9f20>
   1bfb0:	svcmi	0x00800000
   1bfb4:	push	{r4, lr}
   1bfb8:	sub	sp, sp, #8
   1bfbc:	add	r2, sp, #4
   1bfc0:	mov	r4, r1
   1bfc4:	bl	1be2c <__assert_fail@plt+0x9ee4>
   1bfc8:	cmn	r0, #1
   1bfcc:	beq	1bfe4 <__assert_fail@plt+0xa09c>
   1bfd0:	cmp	r0, #0
   1bfd4:	movne	r0, r4
   1bfd8:	ldreq	r0, [sp, #4]
   1bfdc:	add	sp, sp, #8
   1bfe0:	pop	{r4, pc}
   1bfe4:	mov	r0, #0
   1bfe8:	b	1bfdc <__assert_fail@plt+0xa094>
   1bfec:	push	{r4, r5, r6, lr}
   1bff0:	sub	sp, sp, #8
   1bff4:	mov	r3, #1
   1bff8:	add	r2, sp, #4
   1bffc:	mov	r4, r0
   1c000:	bl	1b23c <__assert_fail@plt+0x92f4>
   1c004:	subs	r5, r0, #0
   1c008:	beq	1c028 <__assert_fail@plt+0xa0e0>
   1c00c:	ldr	r2, [sp, #4]
   1c010:	ldr	r3, [r4, #16]
   1c014:	ldr	r2, [r2]
   1c018:	sub	r3, r3, #1
   1c01c:	cmp	r2, #0
   1c020:	str	r3, [r4, #16]
   1c024:	beq	1c034 <__assert_fail@plt+0xa0ec>
   1c028:	mov	r0, r5
   1c02c:	add	sp, sp, #8
   1c030:	pop	{r4, r5, r6, pc}
   1c034:	vldr	s15, [r4, #8]
   1c038:	ldr	r3, [r4, #12]
   1c03c:	ldr	r2, [r4, #20]
   1c040:	sub	r3, r3, #1
   1c044:	vcvt.f32.u32	s14, s15
   1c048:	vldr	s13, [r2]
   1c04c:	vmov	s15, r3
   1c050:	str	r3, [r4, #12]
   1c054:	vcvt.f32.u32	s15, s15
   1c058:	vmul.f32	s14, s14, s13
   1c05c:	vcmpe.f32	s15, s14
   1c060:	vmrs	APSR_nzcv, fpscr
   1c064:	bpl	1c028 <__assert_fail@plt+0xa0e0>
   1c068:	add	r0, r4, #20
   1c06c:	bl	1b338 <__assert_fail@plt+0x93f0>
   1c070:	vldr	s15, [r4, #8]
   1c074:	ldr	r3, [r4, #20]
   1c078:	vldr	s13, [r4, #12]
   1c07c:	vcvt.f32.u32	s15, s15
   1c080:	vldr	s14, [r3]
   1c084:	vcvt.f32.u32	s13, s13
   1c088:	vmul.f32	s14, s15, s14
   1c08c:	vcmpe.f32	s13, s14
   1c090:	vmrs	APSR_nzcv, fpscr
   1c094:	bpl	1c028 <__assert_fail@plt+0xa0e0>
   1c098:	ldrb	r2, [r3, #16]
   1c09c:	mov	r0, r4
   1c0a0:	cmp	r2, #0
   1c0a4:	vldreq	s13, [r3, #4]
   1c0a8:	vldrne	s14, [r3, #4]
   1c0ac:	vldreq	s14, [r3, #8]
   1c0b0:	vmuleq.f32	s15, s15, s13
   1c0b4:	vmul.f32	s15, s15, s14
   1c0b8:	vcvt.u32.f32	s15, s15
   1c0bc:	vmov	r1, s15
   1c0c0:	bl	1bc98 <__assert_fail@plt+0x9d50>
   1c0c4:	cmp	r0, #0
   1c0c8:	bne	1c028 <__assert_fail@plt+0xa0e0>
   1c0cc:	ldr	r0, [r4, #36]	; 0x24
   1c0d0:	cmp	r0, #0
   1c0d4:	beq	1c0e8 <__assert_fail@plt+0xa1a0>
   1c0d8:	ldr	r6, [r0, #4]
   1c0dc:	bl	1afe8 <__assert_fail@plt+0x90a0>
   1c0e0:	subs	r0, r6, #0
   1c0e4:	bne	1c0d8 <__assert_fail@plt+0xa190>
   1c0e8:	mov	r3, #0
   1c0ec:	str	r3, [r4, #36]	; 0x24
   1c0f0:	b	1c028 <__assert_fail@plt+0xa0e0>
   1c0f4:	b	1bfec <__assert_fail@plt+0xa0a4>
   1c0f8:	mov	r0, #0
   1c0fc:	bx	lr
   1c100:	push	{r4, r5, r6, lr}
   1c104:	cmp	r1, #0
   1c108:	mov	r6, r0
   1c10c:	mov	r0, #16
   1c110:	mov	r5, r1
   1c114:	moveq	r5, #1
   1c118:	bl	20048 <__assert_fail@plt+0xe100>
   1c11c:	mov	r1, #4
   1c120:	mov	r4, r0
   1c124:	mov	r0, r5
   1c128:	bl	20130 <__assert_fail@plt+0xe1e8>
   1c12c:	mov	r3, #0
   1c130:	ldr	r2, [pc, #28]	; 1c154 <__assert_fail@plt+0xa20c>
   1c134:	cmp	r6, r3
   1c138:	moveq	r6, r2
   1c13c:	str	r6, [r4, #12]
   1c140:	str	r3, [r4, #8]
   1c144:	stm	r4, {r0, r5}
   1c148:	str	r3, [r0]
   1c14c:	mov	r0, r4
   1c150:	pop	{r4, r5, r6, pc}
   1c154:	strdeq	ip, [r1], -r8
   1c158:	push	{r4, lr}
   1c15c:	mov	r4, r0
   1c160:	ldr	r0, [r0]
   1c164:	bl	1afe8 <__assert_fail@plt+0x90a0>
   1c168:	mov	r0, r4
   1c16c:	pop	{r4, lr}
   1c170:	b	1afe8 <__assert_fail@plt+0x90a0>
   1c174:	push	{r4, r5, r6, r7, r8, lr}
   1c178:	mov	r5, r0
   1c17c:	ldmib	r0, {r3, r4}
   1c180:	mov	r6, r1
   1c184:	sub	r3, r3, #1
   1c188:	cmp	r3, r4
   1c18c:	bls	1c1fc <__assert_fail@plt+0xa2b4>
   1c190:	ldr	r3, [r0]
   1c194:	add	r4, r4, #1
   1c198:	str	r4, [r5, #8]
   1c19c:	str	r6, [r3, r4, lsl #2]
   1c1a0:	ldr	r6, [r5]
   1c1a4:	cmp	r4, #1
   1c1a8:	ldr	r8, [r5, #12]
   1c1ac:	ldr	r7, [r6, r4, lsl #2]
   1c1b0:	bne	1c1cc <__assert_fail@plt+0xa284>
   1c1b4:	b	1c1ec <__assert_fail@plt+0xa2a4>
   1c1b8:	ldr	r3, [r6, r5, lsl #2]
   1c1bc:	cmp	r5, #1
   1c1c0:	str	r3, [r6, r4, lsl #2]
   1c1c4:	mov	r4, r5
   1c1c8:	beq	1c1ec <__assert_fail@plt+0xa2a4>
   1c1cc:	lsr	r5, r4, #1
   1c1d0:	mov	r1, r7
   1c1d4:	ldr	r0, [r6, r5, lsl #2]
   1c1d8:	blx	r8
   1c1dc:	cmp	r0, #0
   1c1e0:	ble	1c1b8 <__assert_fail@plt+0xa270>
   1c1e4:	lsl	r4, r4, #2
   1c1e8:	b	1c1f0 <__assert_fail@plt+0xa2a8>
   1c1ec:	mov	r4, #4
   1c1f0:	str	r7, [r6, r4]
   1c1f4:	mov	r0, #0
   1c1f8:	pop	{r4, r5, r6, r7, r8, pc}
   1c1fc:	mov	r2, #4
   1c200:	add	r1, r0, r2
   1c204:	ldr	r0, [r0]
   1c208:	bl	20150 <__assert_fail@plt+0xe208>
   1c20c:	ldr	r4, [r5, #8]
   1c210:	mov	r3, r0
   1c214:	str	r0, [r5]
   1c218:	b	1c194 <__assert_fail@plt+0xa24c>
   1c21c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c220:	sub	sp, sp, #12
   1c224:	ldr	fp, [r0, #8]
   1c228:	cmp	fp, #0
   1c22c:	streq	fp, [sp, #4]
   1c230:	beq	1c2e0 <__assert_fail@plt+0xa398>
   1c234:	ldr	r3, [r0]
   1c238:	sub	r8, fp, #1
   1c23c:	ldr	r2, [r3, fp, lsl #2]
   1c240:	ldr	r1, [r3, #4]
   1c244:	str	r8, [r0, #8]
   1c248:	str	r2, [r3, #4]
   1c24c:	ldr	fp, [r0]
   1c250:	lsrs	sl, r8, #1
   1c254:	str	r1, [sp, #4]
   1c258:	ldr	r7, [r0, #12]
   1c25c:	ldr	r9, [fp, #4]
   1c260:	addeq	r6, fp, #4
   1c264:	beq	1c2dc <__assert_fail@plt+0xa394>
   1c268:	mov	r4, #1
   1c26c:	b	1c298 <__assert_fail@plt+0xa350>
   1c270:	mov	r1, r9
   1c274:	ldr	r0, [r6]
   1c278:	blx	r7
   1c27c:	cmp	r0, #0
   1c280:	ble	1c2d8 <__assert_fail@plt+0xa390>
   1c284:	ldr	r2, [r6]
   1c288:	cmp	r5, sl
   1c28c:	str	r2, [fp, r4, lsl #2]
   1c290:	mov	r4, r5
   1c294:	bhi	1c2dc <__assert_fail@plt+0xa394>
   1c298:	lsl	r5, r4, #1
   1c29c:	cmp	r8, r5
   1c2a0:	addls	r6, fp, r4, lsl #3
   1c2a4:	bls	1c270 <__assert_fail@plt+0xa328>
   1c2a8:	add	r2, r5, #1
   1c2ac:	ldr	r0, [fp, r4, lsl #3]
   1c2b0:	ldr	r1, [fp, r2, lsl #2]
   1c2b4:	str	r2, [sp]
   1c2b8:	blx	r7
   1c2bc:	ldr	r2, [sp]
   1c2c0:	add	r6, fp, r4, lsl #3
   1c2c4:	add	r1, fp, r2, lsl #2
   1c2c8:	cmp	r0, #0
   1c2cc:	movlt	r5, r2
   1c2d0:	movlt	r6, r1
   1c2d4:	b	1c270 <__assert_fail@plt+0xa328>
   1c2d8:	add	r6, fp, r4, lsl #2
   1c2dc:	str	r9, [r6]
   1c2e0:	ldr	r0, [sp, #4]
   1c2e4:	add	sp, sp, #12
   1c2e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c2ec:	subs	ip, r0, #0
   1c2f0:	mov	r3, #0
   1c2f4:	strb	r3, [r1, #11]
   1c2f8:	add	r0, r1, #11
   1c2fc:	blt	1c32c <__assert_fail@plt+0xa3e4>
   1c300:	ldr	r1, [pc, #108]	; 1c374 <__assert_fail@plt+0xa42c>
   1c304:	smull	r3, r2, r1, ip
   1c308:	asr	r3, ip, #31
   1c30c:	rsb	r3, r3, r2, asr #2
   1c310:	add	r2, r3, r3, lsl #2
   1c314:	sub	r2, ip, r2, lsl #1
   1c318:	add	r2, r2, #48	; 0x30
   1c31c:	subs	ip, r3, #0
   1c320:	strb	r2, [r0, #-1]!
   1c324:	bne	1c304 <__assert_fail@plt+0xa3bc>
   1c328:	bx	lr
   1c32c:	push	{lr}		; (str lr, [sp, #-4]!)
   1c330:	ldr	lr, [pc, #60]	; 1c374 <__assert_fail@plt+0xa42c>
   1c334:	b	1c33c <__assert_fail@plt+0xa3f4>
   1c338:	mov	r0, r1
   1c33c:	smull	r3, r2, lr, ip
   1c340:	asr	r3, ip, #31
   1c344:	rsb	r3, r3, r2, asr #2
   1c348:	sub	r1, r0, #1
   1c34c:	add	r2, r3, r3, lsl #2
   1c350:	sub	r2, ip, r2, lsl #1
   1c354:	rsb	r2, r2, #48	; 0x30
   1c358:	subs	ip, r3, #0
   1c35c:	strb	r2, [r0, #-1]
   1c360:	bne	1c338 <__assert_fail@plt+0xa3f0>
   1c364:	mov	r3, #45	; 0x2d
   1c368:	sub	r0, r0, #2
   1c36c:	strb	r3, [r1, #-1]
   1c370:	pop	{pc}		; (ldr pc, [sp], #4)
   1c374:	strbtvs	r6, [r6], -r7, ror #12
   1c378:	ldr	ip, [pc, #48]	; 1c3b0 <__assert_fail@plt+0xa468>
   1c37c:	mov	r2, r0
   1c380:	add	r0, r1, #10
   1c384:	mov	r3, #0
   1c388:	strb	r3, [r1, #10]
   1c38c:	umull	r1, r3, ip, r2
   1c390:	lsr	r3, r3, #3
   1c394:	add	r1, r3, r3, lsl #2
   1c398:	sub	r2, r2, r1, lsl #1
   1c39c:	add	r1, r2, #48	; 0x30
   1c3a0:	subs	r2, r3, #0
   1c3a4:	strb	r1, [r0, #-1]!
   1c3a8:	bne	1c38c <__assert_fail@plt+0xa444>
   1c3ac:	bx	lr
   1c3b0:	stclgt	12, cr12, [ip], {205}	; 0xcd
   1c3b4:	push	{r4, r5, r6, r8, r9, lr}
   1c3b8:	mov	r4, r0
   1c3bc:	mov	r5, r1
   1c3c0:	add	r6, r2, #20
   1c3c4:	mov	r8, #10
   1c3c8:	mov	r9, #0
   1c3cc:	mov	r3, #0
   1c3d0:	strb	r3, [r2, #20]
   1c3d4:	mov	r0, r4
   1c3d8:	mov	r1, r5
   1c3dc:	mov	r2, r8
   1c3e0:	mov	r3, r9
   1c3e4:	bl	2215c <_obstack_memory_used@@Base+0x890>
   1c3e8:	mov	r0, r4
   1c3ec:	mov	r1, r5
   1c3f0:	mov	r3, r9
   1c3f4:	add	r2, r2, #48	; 0x30
   1c3f8:	strb	r2, [r6, #-1]!
   1c3fc:	mov	r2, r8
   1c400:	bl	2215c <_obstack_memory_used@@Base+0x890>
   1c404:	mov	r4, r0
   1c408:	mov	r5, r1
   1c40c:	orrs	r3, r4, r5
   1c410:	bne	1c3d4 <__assert_fail@plt+0xa48c>
   1c414:	mov	r0, r6
   1c418:	pop	{r4, r5, r6, r8, r9, pc}
   1c41c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c420:	sub	sp, sp, #20
   1c424:	mov	r5, r0
   1c428:	add	r7, r0, r1
   1c42c:	mov	sl, r2
   1c430:	bl	11c48 <__ctype_get_mb_cur_max@plt>
   1c434:	cmp	r0, #1
   1c438:	bls	1c578 <__assert_fail@plt+0xa630>
   1c43c:	cmp	r5, r7
   1c440:	mov	r6, #0
   1c444:	bcs	1c540 <__assert_fail@plt+0xa5f8>
   1c448:	and	r9, sl, #2
   1c44c:	mov	fp, r6
   1c450:	and	sl, sl, #1
   1c454:	mvn	r8, #-2147483648	; 0x80000000
   1c458:	b	1c480 <__assert_fail@plt+0xa538>
   1c45c:	cmp	r3, #37	; 0x25
   1c460:	bcs	1c470 <__assert_fail@plt+0xa528>
   1c464:	sub	r3, r3, #32
   1c468:	cmp	r3, #3
   1c46c:	bhi	1c4a8 <__assert_fail@plt+0xa560>
   1c470:	add	r5, r5, #1
   1c474:	add	r6, r6, #1
   1c478:	cmp	r7, r5
   1c47c:	bls	1c540 <__assert_fail@plt+0xa5f8>
   1c480:	ldrb	r3, [r5]
   1c484:	cmp	r3, #63	; 0x3f
   1c488:	bls	1c45c <__assert_fail@plt+0xa514>
   1c48c:	cmp	r3, #65	; 0x41
   1c490:	bcc	1c4a8 <__assert_fail@plt+0xa560>
   1c494:	cmp	r3, #95	; 0x5f
   1c498:	bls	1c470 <__assert_fail@plt+0xa528>
   1c49c:	sub	r3, r3, #97	; 0x61
   1c4a0:	cmp	r3, #29
   1c4a4:	bls	1c470 <__assert_fail@plt+0xa528>
   1c4a8:	str	fp, [sp, #8]
   1c4ac:	str	fp, [sp, #12]
   1c4b0:	b	1c4d4 <__assert_fail@plt+0xa58c>
   1c4b4:	cmp	r0, r3
   1c4b8:	bgt	1c53c <__assert_fail@plt+0xa5f4>
   1c4bc:	add	r6, r6, r0
   1c4c0:	add	r0, sp, #8
   1c4c4:	bl	11af8 <mbsinit@plt>
   1c4c8:	add	r5, r5, r4
   1c4cc:	cmp	r0, #0
   1c4d0:	bne	1c478 <__assert_fail@plt+0xa530>
   1c4d4:	add	r3, sp, #8
   1c4d8:	sub	r2, r7, r5
   1c4dc:	mov	r1, r5
   1c4e0:	add	r0, sp, #4
   1c4e4:	bl	213e0 <__assert_fail@plt+0xf498>
   1c4e8:	cmn	r0, #1
   1c4ec:	mov	r4, r0
   1c4f0:	beq	1c54c <__assert_fail@plt+0xa604>
   1c4f4:	cmn	r0, #2
   1c4f8:	beq	1c564 <__assert_fail@plt+0xa61c>
   1c4fc:	ldr	r0, [sp, #4]
   1c500:	bl	11a74 <wcwidth@plt>
   1c504:	cmp	r4, #0
   1c508:	moveq	r4, #1
   1c50c:	sub	r3, r8, r6
   1c510:	cmp	r0, #0
   1c514:	bge	1c4b4 <__assert_fail@plt+0xa56c>
   1c518:	cmp	r9, #0
   1c51c:	bne	1c554 <__assert_fail@plt+0xa60c>
   1c520:	ldr	r0, [sp, #4]
   1c524:	bl	11bc4 <iswcntrl@plt>
   1c528:	cmp	r0, #0
   1c52c:	bne	1c4c0 <__assert_fail@plt+0xa578>
   1c530:	cmn	r6, #-2147483647	; 0x80000001
   1c534:	add	r6, r6, #1
   1c538:	bne	1c4c0 <__assert_fail@plt+0xa578>
   1c53c:	mvn	r6, #-2147483648	; 0x80000000
   1c540:	mov	r0, r6
   1c544:	add	sp, sp, #20
   1c548:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c54c:	cmp	sl, #0
   1c550:	beq	1c470 <__assert_fail@plt+0xa528>
   1c554:	mvn	r6, #0
   1c558:	mov	r0, r6
   1c55c:	add	sp, sp, #20
   1c560:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c564:	cmp	sl, #0
   1c568:	bne	1c554 <__assert_fail@plt+0xa60c>
   1c56c:	add	r6, r6, #1
   1c570:	mov	r5, r7
   1c574:	b	1c478 <__assert_fail@plt+0xa530>
   1c578:	cmp	r5, r7
   1c57c:	movcs	r6, #0
   1c580:	bcs	1c540 <__assert_fail@plt+0xa5f8>
   1c584:	bl	11d2c <__ctype_b_loc@plt>
   1c588:	mov	r6, #0
   1c58c:	and	r2, sl, #2
   1c590:	ldr	r1, [r0]
   1c594:	ldrb	r3, [r5], #1
   1c598:	lsl	r3, r3, #1
   1c59c:	ldrh	r3, [r1, r3]
   1c5a0:	tst	r3, #16384	; 0x4000
   1c5a4:	bne	1c5b8 <__assert_fail@plt+0xa670>
   1c5a8:	cmp	r2, #0
   1c5ac:	bne	1c554 <__assert_fail@plt+0xa60c>
   1c5b0:	tst	r3, #2
   1c5b4:	bne	1c5c4 <__assert_fail@plt+0xa67c>
   1c5b8:	cmn	r6, #-2147483647	; 0x80000001
   1c5bc:	beq	1c540 <__assert_fail@plt+0xa5f8>
   1c5c0:	add	r6, r6, #1
   1c5c4:	cmp	r7, r5
   1c5c8:	bne	1c594 <__assert_fail@plt+0xa64c>
   1c5cc:	mov	r0, r6
   1c5d0:	add	sp, sp, #20
   1c5d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c5d8:	push	{r4, r5, r6, lr}
   1c5dc:	mov	r5, r1
   1c5e0:	mov	r4, r0
   1c5e4:	bl	11d50 <strlen@plt>
   1c5e8:	mov	r2, r5
   1c5ec:	mov	r1, r0
   1c5f0:	mov	r0, r4
   1c5f4:	pop	{r4, r5, r6, lr}
   1c5f8:	b	1c41c <__assert_fail@plt+0xa4d4>
   1c5fc:	cmp	r0, #0
   1c600:	bxeq	lr
   1c604:	ldrb	r3, [r0]
   1c608:	cmp	r3, #0
   1c60c:	beq	1c6bc <__assert_fail@plt+0xa774>
   1c610:	sub	r2, r3, #9
   1c614:	cmp	r2, #23
   1c618:	bhi	1c64c <__assert_fail@plt+0xa704>
   1c61c:	mov	ip, #1
   1c620:	ldr	r1, [pc, #200]	; 1c6f0 <__assert_fail@plt+0xa7a8>
   1c624:	ands	r2, r1, ip, lsl r2
   1c628:	beq	1c64c <__assert_fail@plt+0xa704>
   1c62c:	ldrb	r3, [r0, #1]!
   1c630:	cmp	r3, #0
   1c634:	sub	r2, r3, #9
   1c638:	beq	1c6bc <__assert_fail@plt+0xa774>
   1c63c:	cmp	r2, #23
   1c640:	bhi	1c64c <__assert_fail@plt+0xa704>
   1c644:	ands	r2, r1, ip, lsl r2
   1c648:	bne	1c62c <__assert_fail@plt+0xa6e4>
   1c64c:	sub	r3, r3, #48	; 0x30
   1c650:	cmp	r3, #9
   1c654:	bhi	1c6bc <__assert_fail@plt+0xa774>
   1c658:	push	{lr}		; (str lr, [sp, #-4]!)
   1c65c:	sub	sp, sp, #12
   1c660:	add	r1, sp, #8
   1c664:	mov	r3, #0
   1c668:	str	r3, [r1, #-4]!
   1c66c:	mov	r2, #10
   1c670:	bl	11d44 <strtoul@plt>
   1c674:	ldr	r3, [sp, #4]
   1c678:	cmp	r3, #0
   1c67c:	beq	1c6b0 <__assert_fail@plt+0xa768>
   1c680:	ldrb	r2, [r3]
   1c684:	cmp	r2, #0
   1c688:	beq	1c6b4 <__assert_fail@plt+0xa76c>
   1c68c:	sub	r1, r2, #9
   1c690:	cmp	r1, #23
   1c694:	bhi	1c6a8 <__assert_fail@plt+0xa760>
   1c698:	mov	lr, #1
   1c69c:	ldr	ip, [pc, #76]	; 1c6f0 <__assert_fail@plt+0xa7a8>
   1c6a0:	ands	r1, ip, lr, lsl r1
   1c6a4:	bne	1c6c4 <__assert_fail@plt+0xa77c>
   1c6a8:	cmp	r2, #44	; 0x2c
   1c6ac:	beq	1c6b4 <__assert_fail@plt+0xa76c>
   1c6b0:	mov	r0, #0
   1c6b4:	add	sp, sp, #12
   1c6b8:	pop	{pc}		; (ldr pc, [sp], #4)
   1c6bc:	mov	r0, #0
   1c6c0:	bx	lr
   1c6c4:	add	r3, r3, #1
   1c6c8:	str	r3, [sp, #4]
   1c6cc:	ldrb	r2, [r3]
   1c6d0:	cmp	r2, #0
   1c6d4:	sub	r1, r2, #9
   1c6d8:	beq	1c6b4 <__assert_fail@plt+0xa76c>
   1c6dc:	cmp	r1, #23
   1c6e0:	bhi	1c6a8 <__assert_fail@plt+0xa760>
   1c6e4:	ands	r1, ip, lr, lsl r1
   1c6e8:	bne	1c6c4 <__assert_fail@plt+0xa77c>
   1c6ec:	b	1c6a8 <__assert_fail@plt+0xa760>
   1c6f0:	addeq	r0, r0, pc, lsl r0
   1c6f4:	push	{lr}		; (str lr, [sp, #-4]!)
   1c6f8:	sub	sp, sp, #132	; 0x84
   1c6fc:	mov	r2, sp
   1c700:	mov	r1, #128	; 0x80
   1c704:	mov	r0, #0
   1c708:	bl	11ed0 <sched_getaffinity@plt>
   1c70c:	cmp	r0, #0
   1c710:	beq	1c720 <__assert_fail@plt+0xa7d8>
   1c714:	mov	r0, #0
   1c718:	add	sp, sp, #132	; 0x84
   1c71c:	pop	{pc}		; (ldr pc, [sp], #4)
   1c720:	mov	r1, sp
   1c724:	mov	r0, #128	; 0x80
   1c728:	bl	11b10 <__sched_cpucount@plt>
   1c72c:	cmp	r0, #0
   1c730:	beq	1c714 <__assert_fail@plt+0xa7cc>
   1c734:	add	sp, sp, #132	; 0x84
   1c738:	pop	{pc}		; (ldr pc, [sp], #4)
   1c73c:	cmp	r0, #2
   1c740:	push	{r4, r5, r6, lr}
   1c744:	beq	1c780 <__assert_fail@plt+0xa838>
   1c748:	cmp	r0, #1
   1c74c:	beq	1c800 <__assert_fail@plt+0xa8b8>
   1c750:	mov	r0, #83	; 0x53
   1c754:	bl	11b70 <sysconf@plt>
   1c758:	sub	r3, r0, #1
   1c75c:	cmp	r3, #1
   1c760:	mov	r4, r0
   1c764:	bls	1c7ec <__assert_fail@plt+0xa8a4>
   1c768:	cmp	r4, #0
   1c76c:	ble	1c7d4 <__assert_fail@plt+0xa88c>
   1c770:	mvn	r0, #0
   1c774:	cmp	r4, r0
   1c778:	movcc	r0, r4
   1c77c:	pop	{r4, r5, r6, pc}
   1c780:	ldr	r0, [pc, #128]	; 1c808 <__assert_fail@plt+0xa8c0>
   1c784:	bl	11cb4 <getenv@plt>
   1c788:	bl	1c5fc <__assert_fail@plt+0xa6b4>
   1c78c:	mov	r5, r0
   1c790:	ldr	r0, [pc, #116]	; 1c80c <__assert_fail@plt+0xa8c4>
   1c794:	bl	11cb4 <getenv@plt>
   1c798:	bl	1c5fc <__assert_fail@plt+0xa6b4>
   1c79c:	subs	r4, r0, #0
   1c7a0:	mvneq	r4, #0
   1c7a4:	cmp	r5, #0
   1c7a8:	bne	1c7dc <__assert_fail@plt+0xa894>
   1c7ac:	bl	1c6f4 <__assert_fail@plt+0xa7ac>
   1c7b0:	cmp	r0, #0
   1c7b4:	beq	1c7c4 <__assert_fail@plt+0xa87c>
   1c7b8:	cmp	r0, r4
   1c7bc:	movcs	r0, r4
   1c7c0:	pop	{r4, r5, r6, pc}
   1c7c4:	mov	r0, #84	; 0x54
   1c7c8:	bl	11b70 <sysconf@plt>
   1c7cc:	cmp	r0, #0
   1c7d0:	bgt	1c7b8 <__assert_fail@plt+0xa870>
   1c7d4:	mov	r0, #1
   1c7d8:	pop	{r4, r5, r6, pc}
   1c7dc:	cmp	r4, r5
   1c7e0:	movcc	r0, r4
   1c7e4:	movcs	r0, r5
   1c7e8:	pop	{r4, r5, r6, pc}
   1c7ec:	bl	1c6f4 <__assert_fail@plt+0xa7ac>
   1c7f0:	cmp	r4, r0
   1c7f4:	bcs	1c770 <__assert_fail@plt+0xa828>
   1c7f8:	mov	r4, r0
   1c7fc:	b	1c768 <__assert_fail@plt+0xa820>
   1c800:	mvn	r4, #0
   1c804:	b	1c7ac <__assert_fail@plt+0xa864>
   1c808:	andeq	r4, r2, ip, asr r5
   1c80c:	andeq	r4, r2, ip, ror #10
   1c810:	push	{lr}		; (str lr, [sp, #-4]!)
   1c814:	vpush	{d8}
   1c818:	mov	r0, #85	; 0x55
   1c81c:	sub	sp, sp, #68	; 0x44
   1c820:	bl	11b70 <sysconf@plt>
   1c824:	vmov	s15, r0
   1c828:	mov	r0, #30
   1c82c:	vcvt.f64.s32	d8, s15
   1c830:	bl	11b70 <sysconf@plt>
   1c834:	vldr	d7, [pc, #100]	; 1c8a0 <__assert_fail@plt+0xa958>
   1c838:	vcmpe.f64	d8, d7
   1c83c:	vmrs	APSR_nzcv, fpscr
   1c840:	blt	1c868 <__assert_fail@plt+0xa920>
   1c844:	vmov	s13, r0
   1c848:	vcvt.f64.s32	d0, s13
   1c84c:	vcmpe.f64	d0, d7
   1c850:	vmrs	APSR_nzcv, fpscr
   1c854:	blt	1c868 <__assert_fail@plt+0xa920>
   1c858:	vmul.f64	d0, d0, d8
   1c85c:	add	sp, sp, #68	; 0x44
   1c860:	vpop	{d8}
   1c864:	pop	{pc}		; (ldr pc, [sp], #4)
   1c868:	mov	r0, sp
   1c86c:	bl	11ccc <sysinfo@plt>
   1c870:	cmp	r0, #0
   1c874:	beq	1c888 <__assert_fail@plt+0xa940>
   1c878:	vldr	d0, [pc, #40]	; 1c8a8 <__assert_fail@plt+0xa960>
   1c87c:	add	sp, sp, #68	; 0x44
   1c880:	vpop	{d8}
   1c884:	pop	{pc}		; (ldr pc, [sp], #4)
   1c888:	vldr	s15, [sp, #16]
   1c88c:	vcvt.f64.u32	d0, s15
   1c890:	vldr	s15, [sp, #52]	; 0x34
   1c894:	vcvt.f64.u32	d8, s15
   1c898:	b	1c858 <__assert_fail@plt+0xa910>
   1c89c:	nop			; (mov r0, r0)
	...
   1c8ac:	orrsmi	r0, r0, r0
   1c8b0:	push	{lr}		; (str lr, [sp, #-4]!)
   1c8b4:	vpush	{d8}
   1c8b8:	mov	r0, #86	; 0x56
   1c8bc:	sub	sp, sp, #68	; 0x44
   1c8c0:	bl	11b70 <sysconf@plt>
   1c8c4:	vmov	s15, r0
   1c8c8:	mov	r0, #30
   1c8cc:	vcvt.f64.s32	d8, s15
   1c8d0:	bl	11b70 <sysconf@plt>
   1c8d4:	vldr	d7, [pc, #116]	; 1c950 <__assert_fail@plt+0xaa08>
   1c8d8:	vcmpe.f64	d8, d7
   1c8dc:	vmrs	APSR_nzcv, fpscr
   1c8e0:	blt	1c908 <__assert_fail@plt+0xa9c0>
   1c8e4:	vmov	s13, r0
   1c8e8:	vcvt.f64.s32	d0, s13
   1c8ec:	vcmpe.f64	d0, d7
   1c8f0:	vmrs	APSR_nzcv, fpscr
   1c8f4:	blt	1c908 <__assert_fail@plt+0xa9c0>
   1c8f8:	vmul.f64	d0, d0, d8
   1c8fc:	add	sp, sp, #68	; 0x44
   1c900:	vpop	{d8}
   1c904:	pop	{pc}		; (ldr pc, [sp], #4)
   1c908:	mov	r0, sp
   1c90c:	bl	11ccc <sysinfo@plt>
   1c910:	cmp	r0, #0
   1c914:	bne	1c944 <__assert_fail@plt+0xa9fc>
   1c918:	vldr	s15, [sp, #20]
   1c91c:	vldr	s13, [sp, #52]	; 0x34
   1c920:	vcvt.f64.u32	d0, s15
   1c924:	vldr	s15, [sp, #28]
   1c928:	vcvt.f64.u32	d8, s13
   1c92c:	vcvt.f64.u32	d7, s15
   1c930:	vadd.f64	d0, d0, d7
   1c934:	vmul.f64	d0, d0, d8
   1c938:	add	sp, sp, #68	; 0x44
   1c93c:	vpop	{d8}
   1c940:	pop	{pc}		; (ldr pc, [sp], #4)
   1c944:	bl	1c810 <__assert_fail@plt+0xa8c8>
   1c948:	vldr	d8, [pc, #8]	; 1c958 <__assert_fail@plt+0xaa10>
   1c94c:	b	1c8f8 <__assert_fail@plt+0xa9b0>
	...
   1c95c:	svccc	0x00d00000
   1c960:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1c964:	mov	r4, r0
   1c968:	ldr	r6, [pc, #396]	; 1cafc <__assert_fail@plt+0xabb4>
   1c96c:	mov	r7, r1
   1c970:	ldr	r8, [r0]
   1c974:	ldr	r3, [r6]
   1c978:	ldr	r9, [r0, #4]
   1c97c:	cmp	r3, #0
   1c980:	blt	1c9b8 <__assert_fail@plt+0xaa70>
   1c984:	bl	11eac <pipe2@plt>
   1c988:	subs	r5, r0, #0
   1c98c:	blt	1c9a0 <__assert_fail@plt+0xaa58>
   1c990:	mov	r3, #1
   1c994:	str	r3, [r6]
   1c998:	mov	r0, r5
   1c99c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c9a0:	bl	11d74 <__errno_location@plt>
   1c9a4:	ldr	r3, [r0]
   1c9a8:	cmp	r3, #38	; 0x26
   1c9ac:	bne	1c990 <__assert_fail@plt+0xaa48>
   1c9b0:	mvn	r3, #0
   1c9b4:	str	r3, [r6]
   1c9b8:	bic	r5, r7, #524288	; 0x80000
   1c9bc:	bic	r5, r5, #2048	; 0x800
   1c9c0:	cmp	r5, #0
   1c9c4:	bne	1c9f0 <__assert_fail@plt+0xaaa8>
   1c9c8:	mov	r0, r4
   1c9cc:	bl	11df8 <pipe@plt>
   1c9d0:	cmp	r0, #0
   1c9d4:	blt	1caf4 <__assert_fail@plt+0xabac>
   1c9d8:	tst	r7, #2048	; 0x800
   1c9dc:	bne	1ca90 <__assert_fail@plt+0xab48>
   1c9e0:	tst	r7, #524288	; 0x80000
   1c9e4:	bne	1ca04 <__assert_fail@plt+0xaabc>
   1c9e8:	mov	r0, r5
   1c9ec:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c9f0:	bl	11d74 <__errno_location@plt>
   1c9f4:	mov	r3, #22
   1c9f8:	mvn	r5, #0
   1c9fc:	str	r3, [r0]
   1ca00:	b	1c9e8 <__assert_fail@plt+0xaaa0>
   1ca04:	mov	r2, #0
   1ca08:	mov	r1, #1
   1ca0c:	ldr	r0, [r4, #4]
   1ca10:	bl	210ec <__assert_fail@plt+0xf1a4>
   1ca14:	cmp	r0, #0
   1ca18:	blt	1ca64 <__assert_fail@plt+0xab1c>
   1ca1c:	orr	r2, r0, #1
   1ca20:	mov	r1, #2
   1ca24:	ldr	r0, [r4, #4]
   1ca28:	bl	210ec <__assert_fail@plt+0xf1a4>
   1ca2c:	cmn	r0, #1
   1ca30:	beq	1ca64 <__assert_fail@plt+0xab1c>
   1ca34:	mov	r2, #0
   1ca38:	mov	r1, #1
   1ca3c:	ldr	r0, [r4]
   1ca40:	bl	210ec <__assert_fail@plt+0xf1a4>
   1ca44:	cmp	r0, #0
   1ca48:	blt	1ca64 <__assert_fail@plt+0xab1c>
   1ca4c:	orr	r2, r0, #1
   1ca50:	mov	r1, #2
   1ca54:	ldr	r0, [r4]
   1ca58:	bl	210ec <__assert_fail@plt+0xf1a4>
   1ca5c:	cmn	r0, #1
   1ca60:	bne	1c9e8 <__assert_fail@plt+0xaaa0>
   1ca64:	bl	11d74 <__errno_location@plt>
   1ca68:	mvn	r5, #0
   1ca6c:	mov	r6, r0
   1ca70:	ldr	r0, [r4]
   1ca74:	ldr	r7, [r6]
   1ca78:	bl	11f30 <close@plt>
   1ca7c:	ldr	r0, [r4, #4]
   1ca80:	bl	11f30 <close@plt>
   1ca84:	stm	r4, {r8, r9}
   1ca88:	str	r7, [r6]
   1ca8c:	b	1c9e8 <__assert_fail@plt+0xaaa0>
   1ca90:	mov	r2, r5
   1ca94:	mov	r1, #3
   1ca98:	ldr	r0, [r4, #4]
   1ca9c:	bl	210ec <__assert_fail@plt+0xf1a4>
   1caa0:	subs	r2, r0, #0
   1caa4:	blt	1ca64 <__assert_fail@plt+0xab1c>
   1caa8:	orr	r2, r2, #2048	; 0x800
   1caac:	mov	r1, #4
   1cab0:	ldr	r0, [r4, #4]
   1cab4:	bl	210ec <__assert_fail@plt+0xf1a4>
   1cab8:	cmn	r0, #1
   1cabc:	beq	1ca64 <__assert_fail@plt+0xab1c>
   1cac0:	mov	r2, r5
   1cac4:	mov	r1, #3
   1cac8:	ldr	r0, [r4]
   1cacc:	bl	210ec <__assert_fail@plt+0xf1a4>
   1cad0:	cmp	r0, #0
   1cad4:	blt	1ca64 <__assert_fail@plt+0xab1c>
   1cad8:	orr	r2, r0, #2048	; 0x800
   1cadc:	mov	r1, #4
   1cae0:	ldr	r0, [r4]
   1cae4:	bl	210ec <__assert_fail@plt+0xf1a4>
   1cae8:	cmn	r0, #1
   1caec:	bne	1c9e0 <__assert_fail@plt+0xaa98>
   1caf0:	b	1ca64 <__assert_fail@plt+0xab1c>
   1caf4:	mvn	r5, #0
   1caf8:	b	1c9e8 <__assert_fail@plt+0xaaa0>
   1cafc:	andeq	r5, r3, r8, asr #17
   1cb00:	push	{lr}		; (str lr, [sp, #-4]!)
   1cb04:	sub	sp, sp, #12
   1cb08:	ldr	r0, [pc, #72]	; 1cb58 <__assert_fail@plt+0xac10>
   1cb0c:	bl	11cb4 <getenv@plt>
   1cb10:	subs	r3, r0, #0
   1cb14:	beq	1cb24 <__assert_fail@plt+0xabdc>
   1cb18:	ldrb	r3, [r3]
   1cb1c:	cmp	r3, #0
   1cb20:	bne	1cb30 <__assert_fail@plt+0xabe8>
   1cb24:	ldr	r0, [pc, #48]	; 1cb5c <__assert_fail@plt+0xac14>
   1cb28:	add	sp, sp, #12
   1cb2c:	pop	{pc}		; (ldr pc, [sp], #4)
   1cb30:	mov	r2, #10
   1cb34:	add	r1, sp, #4
   1cb38:	bl	11a38 <strtol@plt>
   1cb3c:	ldr	r2, [sp, #4]
   1cb40:	ldr	r3, [pc, #20]	; 1cb5c <__assert_fail@plt+0xac14>
   1cb44:	ldrb	r2, [r2]
   1cb48:	cmp	r2, #0
   1cb4c:	movne	r0, r3
   1cb50:	add	sp, sp, #12
   1cb54:	pop	{pc}		; (ldr pc, [sp], #4)
   1cb58:	andeq	r4, r2, r0, lsl #11
   1cb5c:	andeq	r1, r3, r9, rrx
   1cb60:	push	{r4, r5, r6, lr}
   1cb64:	subs	r4, r0, #0
   1cb68:	beq	1cbdc <__assert_fail@plt+0xac94>
   1cb6c:	mov	r1, #47	; 0x2f
   1cb70:	bl	11e58 <strrchr@plt>
   1cb74:	subs	r5, r0, #0
   1cb78:	beq	1cbc8 <__assert_fail@plt+0xac80>
   1cb7c:	add	r6, r5, #1
   1cb80:	sub	r3, r6, r4
   1cb84:	cmp	r3, #6
   1cb88:	ble	1cbc8 <__assert_fail@plt+0xac80>
   1cb8c:	mov	r2, #7
   1cb90:	ldr	r1, [pc, #96]	; 1cbf8 <__assert_fail@plt+0xacb0>
   1cb94:	sub	r0, r5, #6
   1cb98:	bl	11f0c <strncmp@plt>
   1cb9c:	cmp	r0, #0
   1cba0:	bne	1cbc8 <__assert_fail@plt+0xac80>
   1cba4:	mov	r2, #3
   1cba8:	ldr	r1, [pc, #76]	; 1cbfc <__assert_fail@plt+0xacb4>
   1cbac:	mov	r0, r6
   1cbb0:	bl	11f0c <strncmp@plt>
   1cbb4:	cmp	r0, #0
   1cbb8:	movne	r4, r6
   1cbbc:	ldreq	r3, [pc, #60]	; 1cc00 <__assert_fail@plt+0xacb8>
   1cbc0:	addeq	r4, r5, #4
   1cbc4:	streq	r4, [r3]
   1cbc8:	ldr	r2, [pc, #52]	; 1cc04 <__assert_fail@plt+0xacbc>
   1cbcc:	ldr	r3, [pc, #52]	; 1cc08 <__assert_fail@plt+0xacc0>
   1cbd0:	str	r4, [r2]
   1cbd4:	str	r4, [r3]
   1cbd8:	pop	{r4, r5, r6, pc}
   1cbdc:	ldr	r3, [pc, #40]	; 1cc0c <__assert_fail@plt+0xacc4>
   1cbe0:	mov	r2, #55	; 0x37
   1cbe4:	mov	r1, #1
   1cbe8:	ldr	r3, [r3]
   1cbec:	ldr	r0, [pc, #28]	; 1cc10 <__assert_fail@plt+0xacc8>
   1cbf0:	bl	11c18 <fwrite@plt>
   1cbf4:	bl	11f24 <abort@plt>
   1cbf8:	andeq	r4, r2, r8, asr #11
   1cbfc:	ldrdeq	r4, [r2], -r0
   1cc00:			; <UNDEFINED> instruction: 0x000352b8
   1cc04:	andeq	r5, r3, ip, asr #17
   1cc08:			; <UNDEFINED> instruction: 0x000352bc
   1cc0c:	andeq	r5, r3, r8, asr #5
   1cc10:	muleq	r2, r0, r5
   1cc14:	push	{r4, r5, r6, lr}
   1cc18:	mov	r2, #48	; 0x30
   1cc1c:	mov	r4, r1
   1cc20:	mov	r1, #0
   1cc24:	mov	r5, r0
   1cc28:	bl	11d98 <memset@plt>
   1cc2c:	cmp	r4, #10
   1cc30:	beq	1cc40 <__assert_fail@plt+0xacf8>
   1cc34:	str	r4, [r5]
   1cc38:	mov	r0, r5
   1cc3c:	pop	{r4, r5, r6, pc}
   1cc40:	bl	11f24 <abort@plt>
   1cc44:	push	{r4, r5, r6, lr}
   1cc48:	mov	r4, r0
   1cc4c:	mov	r5, r1
   1cc50:	bl	213ac <__assert_fail@plt+0xf464>
   1cc54:	ldrb	r3, [r0]
   1cc58:	bic	r3, r3, #32
   1cc5c:	cmp	r3, #85	; 0x55
   1cc60:	bne	1ccc0 <__assert_fail@plt+0xad78>
   1cc64:	ldrb	r3, [r0, #1]
   1cc68:	bic	r3, r3, #32
   1cc6c:	cmp	r3, #84	; 0x54
   1cc70:	bne	1ccfc <__assert_fail@plt+0xadb4>
   1cc74:	ldrb	r3, [r0, #2]
   1cc78:	bic	r3, r3, #32
   1cc7c:	cmp	r3, #70	; 0x46
   1cc80:	bne	1ccfc <__assert_fail@plt+0xadb4>
   1cc84:	ldrb	r3, [r0, #3]
   1cc88:	cmp	r3, #45	; 0x2d
   1cc8c:	bne	1ccfc <__assert_fail@plt+0xadb4>
   1cc90:	ldrb	r3, [r0, #4]
   1cc94:	cmp	r3, #56	; 0x38
   1cc98:	bne	1ccfc <__assert_fail@plt+0xadb4>
   1cc9c:	ldrb	r3, [r0, #5]
   1cca0:	cmp	r3, #0
   1cca4:	bne	1ccfc <__assert_fail@plt+0xadb4>
   1cca8:	ldrb	r2, [r4]
   1ccac:	ldr	r3, [pc, #152]	; 1cd4c <__assert_fail@plt+0xae04>
   1ccb0:	ldr	r0, [pc, #152]	; 1cd50 <__assert_fail@plt+0xae08>
   1ccb4:	cmp	r2, #96	; 0x60
   1ccb8:	movne	r0, r3
   1ccbc:	pop	{r4, r5, r6, pc}
   1ccc0:	cmp	r3, #71	; 0x47
   1ccc4:	bne	1ccfc <__assert_fail@plt+0xadb4>
   1ccc8:	ldrb	r3, [r0, #1]
   1cccc:	bic	r3, r3, #32
   1ccd0:	cmp	r3, #66	; 0x42
   1ccd4:	bne	1ccfc <__assert_fail@plt+0xadb4>
   1ccd8:	ldrb	r3, [r0, #2]
   1ccdc:	cmp	r3, #49	; 0x31
   1cce0:	bne	1ccfc <__assert_fail@plt+0xadb4>
   1cce4:	ldrb	r3, [r0, #3]
   1cce8:	cmp	r3, #56	; 0x38
   1ccec:	bne	1ccfc <__assert_fail@plt+0xadb4>
   1ccf0:	ldrb	r3, [r0, #4]
   1ccf4:	cmp	r3, #48	; 0x30
   1ccf8:	beq	1cd10 <__assert_fail@plt+0xadc8>
   1ccfc:	ldr	r3, [pc, #80]	; 1cd54 <__assert_fail@plt+0xae0c>
   1cd00:	cmp	r5, #9
   1cd04:	ldr	r0, [pc, #76]	; 1cd58 <__assert_fail@plt+0xae10>
   1cd08:	movne	r0, r3
   1cd0c:	pop	{r4, r5, r6, pc}
   1cd10:	ldrb	r3, [r0, #5]
   1cd14:	cmp	r3, #51	; 0x33
   1cd18:	bne	1ccfc <__assert_fail@plt+0xadb4>
   1cd1c:	ldrb	r3, [r0, #6]
   1cd20:	cmp	r3, #48	; 0x30
   1cd24:	bne	1ccfc <__assert_fail@plt+0xadb4>
   1cd28:	ldrb	r3, [r0, #7]
   1cd2c:	cmp	r3, #0
   1cd30:	bne	1ccfc <__assert_fail@plt+0xadb4>
   1cd34:	ldrb	r2, [r4]
   1cd38:	ldr	r3, [pc, #28]	; 1cd5c <__assert_fail@plt+0xae14>
   1cd3c:	ldr	r0, [pc, #28]	; 1cd60 <__assert_fail@plt+0xae18>
   1cd40:	cmp	r2, #96	; 0x60
   1cd44:	movne	r0, r3
   1cd48:	pop	{r4, r5, r6, pc}
   1cd4c:	andeq	r4, r2, ip, lsr #12
   1cd50:	andeq	r4, r2, r8, lsr #12
   1cd54:	andeq	r4, r2, ip, lsr r6
   1cd58:	andeq	r4, r2, r8, lsr r6
   1cd5c:	andeq	r4, r2, r4, lsr r6
   1cd60:	andeq	r4, r2, r0, lsr r6
   1cd64:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cd68:	sub	sp, sp, #116	; 0x74
   1cd6c:	mov	sl, r0
   1cd70:	str	r3, [sp, #24]
   1cd74:	mov	r3, #1
   1cd78:	mov	r8, r1
   1cd7c:	str	r2, [sp, #56]	; 0x38
   1cd80:	str	r3, [sp, #36]	; 0x24
   1cd84:	bl	11c48 <__ctype_get_mb_cur_max@plt>
   1cd88:	ldr	r3, [sp, #156]	; 0x9c
   1cd8c:	mov	fp, r8
   1cd90:	mov	r2, #0
   1cd94:	lsr	r3, r3, #1
   1cd98:	and	r3, r3, #1
   1cd9c:	str	r2, [sp, #68]	; 0x44
   1cda0:	str	r3, [sp, #28]
   1cda4:	str	r2, [sp, #40]	; 0x28
   1cda8:	str	r2, [sp, #44]	; 0x2c
   1cdac:	str	r2, [sp, #52]	; 0x34
   1cdb0:	str	r2, [sp, #64]	; 0x40
   1cdb4:	str	r2, [sp, #72]	; 0x48
   1cdb8:	str	sl, [sp, #32]
   1cdbc:	str	r0, [sp, #76]	; 0x4c
   1cdc0:	ldr	r3, [sp, #152]	; 0x98
   1cdc4:	cmp	r3, #10
   1cdc8:	ldrls	pc, [pc, r3, lsl #2]
   1cdcc:	b	1df8c <__assert_fail@plt+0xc044>
   1cdd0:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1cdd4:	andeq	sp, r1, r4, ror #1
   1cdd8:	andeq	sp, r1, r8, lsl #2
   1cddc:	andeq	sp, r1, ip, lsr #2
   1cde0:	andeq	sp, r1, r8, asr r2
   1cde4:	andeq	sp, r1, ip, lsr #4
   1cde8:	andeq	sp, r1, r4, lsl #4
   1cdec:	andeq	sp, r1, r0, asr #2
   1cdf0:	andeq	sp, r1, r8, asr r1
   1cdf4:	andeq	sp, r1, r8, asr r1
   1cdf8:	andeq	sp, r1, r8, asr r1
   1cdfc:	mov	r3, #0
   1ce00:	mov	r7, r3
   1ce04:	str	r3, [sp, #28]
   1ce08:	ldr	r3, [sp, #44]	; 0x2c
   1ce0c:	mov	sl, #0
   1ce10:	eor	r3, r3, #1
   1ce14:	str	r3, [sp, #60]	; 0x3c
   1ce18:	ldr	r3, [sp, #24]
   1ce1c:	cmn	r3, #1
   1ce20:	beq	1d384 <__assert_fail@plt+0xb43c>
   1ce24:	ldr	r3, [sp, #24]
   1ce28:	subs	r5, r3, sl
   1ce2c:	movne	r5, #1
   1ce30:	cmp	r5, #0
   1ce34:	beq	1d39c <__assert_fail@plt+0xb454>
   1ce38:	ldr	r3, [sp, #152]	; 0x98
   1ce3c:	ldr	r8, [sp, #44]	; 0x2c
   1ce40:	cmp	r3, #2
   1ce44:	moveq	r8, #0
   1ce48:	andne	r8, r8, #1
   1ce4c:	ldr	r3, [sp, #52]	; 0x34
   1ce50:	adds	r9, r3, #0
   1ce54:	movne	r9, #1
   1ce58:	ands	r6, r9, r8
   1ce5c:	beq	1d804 <__assert_fail@plt+0xb8bc>
   1ce60:	ldr	r2, [sp, #52]	; 0x34
   1ce64:	ldr	r1, [sp, #24]
   1ce68:	cmp	r2, #1
   1ce6c:	mov	r3, r2
   1ce70:	movls	r3, #0
   1ce74:	movhi	r3, #1
   1ce78:	cmn	r1, #1
   1ce7c:	movne	r3, #0
   1ce80:	cmp	r3, #0
   1ce84:	add	r4, sl, r2
   1ce88:	beq	1ce98 <__assert_fail@plt+0xaf50>
   1ce8c:	ldr	r0, [sp, #56]	; 0x38
   1ce90:	bl	11d50 <strlen@plt>
   1ce94:	str	r0, [sp, #24]
   1ce98:	ldr	r3, [sp, #24]
   1ce9c:	cmp	r3, r4
   1cea0:	ldr	r3, [sp, #56]	; 0x38
   1cea4:	add	r3, r3, sl
   1cea8:	str	r3, [sp, #48]	; 0x30
   1ceac:	bcc	1d810 <__assert_fail@plt+0xb8c8>
   1ceb0:	mov	r0, r3
   1ceb4:	ldr	r2, [sp, #52]	; 0x34
   1ceb8:	ldr	r1, [sp, #64]	; 0x40
   1cebc:	bl	11b40 <memcmp@plt>
   1cec0:	cmp	r0, #0
   1cec4:	bne	1d810 <__assert_fail@plt+0xb8c8>
   1cec8:	ldr	r3, [sp, #28]
   1cecc:	cmp	r3, #0
   1ced0:	bne	1e08c <__assert_fail@plt+0xc144>
   1ced4:	ldr	r3, [sp, #48]	; 0x30
   1ced8:	ldrb	r4, [r3]
   1cedc:	cmp	r4, #126	; 0x7e
   1cee0:	ldrls	pc, [pc, r4, lsl #2]
   1cee4:	b	1d7a4 <__assert_fail@plt+0xb85c>
   1cee8:	andeq	sp, r1, r8, asr #11
   1ceec:	andeq	sp, r1, r4, lsr #15
   1cef0:	andeq	sp, r1, r4, lsr #15
   1cef4:	andeq	sp, r1, r4, lsr #15
   1cef8:	andeq	sp, r1, r4, lsr #15
   1cefc:	andeq	sp, r1, r4, lsr #15
   1cf00:	andeq	sp, r1, r4, lsr #15
   1cf04:	andeq	sp, r1, ip, lsr #11
   1cf08:	muleq	r1, r0, r5
   1cf0c:	andeq	sp, r1, ip, lsl #15
   1cf10:	strdeq	sp, [r1], -r0
   1cf14:	ldrdeq	sp, [r1], -r4
   1cf18:	andeq	sp, r1, r8, ror #14
   1cf1c:	andeq	sp, r1, r4, asr #14
   1cf20:	andeq	sp, r1, r4, lsr #15
   1cf24:	andeq	sp, r1, r4, lsr #15
   1cf28:	andeq	sp, r1, r4, lsr #15
   1cf2c:	andeq	sp, r1, r4, lsr #15
   1cf30:	andeq	sp, r1, r4, lsr #15
   1cf34:	andeq	sp, r1, r4, lsr #15
   1cf38:	andeq	sp, r1, r4, lsr #15
   1cf3c:	andeq	sp, r1, r4, lsr #15
   1cf40:	andeq	sp, r1, r4, lsr #15
   1cf44:	andeq	sp, r1, r4, lsr #15
   1cf48:	andeq	sp, r1, r4, lsr #15
   1cf4c:	andeq	sp, r1, r4, lsr #15
   1cf50:	andeq	sp, r1, r4, lsr #15
   1cf54:	andeq	sp, r1, r4, lsr #15
   1cf58:	andeq	sp, r1, r4, lsr #15
   1cf5c:	andeq	sp, r1, r4, lsr #15
   1cf60:	andeq	sp, r1, r4, lsr #15
   1cf64:	andeq	sp, r1, r4, lsr #15
   1cf68:	andeq	sp, r1, r4, lsl #15
   1cf6c:			; <UNDEFINED> instruction: 0x0001d6b8
   1cf70:			; <UNDEFINED> instruction: 0x0001d6b8
   1cf74:	andeq	sp, r1, r8, asr #5
   1cf78:			; <UNDEFINED> instruction: 0x0001d6b8
   1cf7c:	andeq	sp, r1, r0, asr r7
   1cf80:			; <UNDEFINED> instruction: 0x0001d6b8
   1cf84:	andeq	sp, r1, r4, lsr #14
   1cf88:			; <UNDEFINED> instruction: 0x0001d6b8
   1cf8c:			; <UNDEFINED> instruction: 0x0001d6b8
   1cf90:			; <UNDEFINED> instruction: 0x0001d6b8
   1cf94:	andeq	sp, r1, r0, asr r7
   1cf98:	andeq	sp, r1, r0, asr r7
   1cf9c:	andeq	sp, r1, r0, asr r7
   1cfa0:	andeq	sp, r1, r0, asr r7
   1cfa4:	andeq	sp, r1, r0, asr r7
   1cfa8:	andeq	sp, r1, r0, asr r7
   1cfac:	andeq	sp, r1, r0, asr r7
   1cfb0:	andeq	sp, r1, r0, asr r7
   1cfb4:	andeq	sp, r1, r0, asr r7
   1cfb8:	andeq	sp, r1, r0, asr r7
   1cfbc:	andeq	sp, r1, r0, asr r7
   1cfc0:	andeq	sp, r1, r0, asr r7
   1cfc4:	andeq	sp, r1, r0, asr r7
   1cfc8:	andeq	sp, r1, r0, asr r7
   1cfcc:	andeq	sp, r1, r0, asr r7
   1cfd0:	andeq	sp, r1, r0, asr r7
   1cfd4:			; <UNDEFINED> instruction: 0x0001d6b8
   1cfd8:			; <UNDEFINED> instruction: 0x0001d6b8
   1cfdc:			; <UNDEFINED> instruction: 0x0001d6b8
   1cfe0:			; <UNDEFINED> instruction: 0x0001d6b8
   1cfe4:	strdeq	sp, [r1], -r4
   1cfe8:	andeq	sp, r1, r4, lsr #15
   1cfec:	andeq	sp, r1, r0, asr r7
   1cff0:	andeq	sp, r1, r0, asr r7
   1cff4:	andeq	sp, r1, r0, asr r7
   1cff8:	andeq	sp, r1, r0, asr r7
   1cffc:	andeq	sp, r1, r0, asr r7
   1d000:	andeq	sp, r1, r0, asr r7
   1d004:	andeq	sp, r1, r0, asr r7
   1d008:	andeq	sp, r1, r0, asr r7
   1d00c:	andeq	sp, r1, r0, asr r7
   1d010:	andeq	sp, r1, r0, asr r7
   1d014:	andeq	sp, r1, r0, asr r7
   1d018:	andeq	sp, r1, r0, asr r7
   1d01c:	andeq	sp, r1, r0, asr r7
   1d020:	andeq	sp, r1, r0, asr r7
   1d024:	andeq	sp, r1, r0, asr r7
   1d028:	andeq	sp, r1, r0, asr r7
   1d02c:	andeq	sp, r1, r0, asr r7
   1d030:	andeq	sp, r1, r0, asr r7
   1d034:	andeq	sp, r1, r0, asr r7
   1d038:	andeq	sp, r1, r0, asr r7
   1d03c:	andeq	sp, r1, r0, asr r7
   1d040:	andeq	sp, r1, r0, asr r7
   1d044:	andeq	sp, r1, r0, asr r7
   1d048:	andeq	sp, r1, r0, asr r7
   1d04c:	andeq	sp, r1, r0, asr r7
   1d050:	andeq	sp, r1, r0, asr r7
   1d054:			; <UNDEFINED> instruction: 0x0001d6b8
   1d058:	andeq	sp, r1, r4, lsl r4
   1d05c:	andeq	sp, r1, r0, asr r7
   1d060:			; <UNDEFINED> instruction: 0x0001d6b8
   1d064:	andeq	sp, r1, r0, asr r7
   1d068:			; <UNDEFINED> instruction: 0x0001d6b8
   1d06c:	andeq	sp, r1, r0, asr r7
   1d070:	andeq	sp, r1, r0, asr r7
   1d074:	andeq	sp, r1, r0, asr r7
   1d078:	andeq	sp, r1, r0, asr r7
   1d07c:	andeq	sp, r1, r0, asr r7
   1d080:	andeq	sp, r1, r0, asr r7
   1d084:	andeq	sp, r1, r0, asr r7
   1d088:	andeq	sp, r1, r0, asr r7
   1d08c:	andeq	sp, r1, r0, asr r7
   1d090:	andeq	sp, r1, r0, asr r7
   1d094:	andeq	sp, r1, r0, asr r7
   1d098:	andeq	sp, r1, r0, asr r7
   1d09c:	andeq	sp, r1, r0, asr r7
   1d0a0:	andeq	sp, r1, r0, asr r7
   1d0a4:	andeq	sp, r1, r0, asr r7
   1d0a8:	andeq	sp, r1, r0, asr r7
   1d0ac:	andeq	sp, r1, r0, asr r7
   1d0b0:	andeq	sp, r1, r0, asr r7
   1d0b4:	andeq	sp, r1, r0, asr r7
   1d0b8:	andeq	sp, r1, r0, asr r7
   1d0bc:	andeq	sp, r1, r0, asr r7
   1d0c0:	andeq	sp, r1, r0, asr r7
   1d0c4:	andeq	sp, r1, r0, asr r7
   1d0c8:	andeq	sp, r1, r0, asr r7
   1d0cc:	andeq	sp, r1, r0, asr r7
   1d0d0:	andeq	sp, r1, r0, asr r7
   1d0d4:	andeq	sp, r1, r8, lsr #5
   1d0d8:			; <UNDEFINED> instruction: 0x0001d6b8
   1d0dc:	andeq	sp, r1, r8, lsr #5
   1d0e0:	andeq	sp, r1, r8, asr #5
   1d0e4:	mov	r3, #1
   1d0e8:	str	r3, [sp, #28]
   1d0ec:	str	r3, [sp, #52]	; 0x34
   1d0f0:	ldr	r3, [pc, #4000]	; 1e098 <__assert_fail@plt+0xc150>
   1d0f4:	mov	r7, #0
   1d0f8:	str	r3, [sp, #64]	; 0x40
   1d0fc:	mov	r3, #2
   1d100:	str	r3, [sp, #152]	; 0x98
   1d104:	b	1ce08 <__assert_fail@plt+0xaec0>
   1d108:	ldr	r3, [sp, #28]
   1d10c:	cmp	r3, #0
   1d110:	beq	1d26c <__assert_fail@plt+0xb324>
   1d114:	mov	r3, #1
   1d118:	str	r3, [sp, #52]	; 0x34
   1d11c:	ldr	r3, [pc, #3956]	; 1e098 <__assert_fail@plt+0xc150>
   1d120:	mov	r7, #0
   1d124:	str	r3, [sp, #64]	; 0x40
   1d128:	b	1ce08 <__assert_fail@plt+0xaec0>
   1d12c:	mov	r3, #1
   1d130:	str	r3, [sp, #44]	; 0x2c
   1d134:	str	r3, [sp, #52]	; 0x34
   1d138:	str	r3, [sp, #28]
   1d13c:	b	1d0f0 <__assert_fail@plt+0xb1a8>
   1d140:	mov	r3, #0
   1d144:	str	r3, [sp, #28]
   1d148:	mov	r3, #1
   1d14c:	str	r3, [sp, #44]	; 0x2c
   1d150:	mov	r7, #0
   1d154:	b	1ce08 <__assert_fail@plt+0xaec0>
   1d158:	ldr	r3, [sp, #152]	; 0x98
   1d15c:	cmp	r3, #10
   1d160:	beq	1d1a4 <__assert_fail@plt+0xb25c>
   1d164:	mov	r2, #5
   1d168:	ldr	r1, [pc, #3884]	; 1e09c <__assert_fail@plt+0xc154>
   1d16c:	mov	r0, #0
   1d170:	bl	11b58 <dcgettext@plt>
   1d174:	ldr	r2, [pc, #3872]	; 1e09c <__assert_fail@plt+0xc154>
   1d178:	cmp	r0, r2
   1d17c:	str	r0, [sp, #164]	; 0xa4
   1d180:	beq	1e188 <__assert_fail@plt+0xc240>
   1d184:	mov	r2, #5
   1d188:	ldr	r1, [pc, #3848]	; 1e098 <__assert_fail@plt+0xc150>
   1d18c:	mov	r0, #0
   1d190:	bl	11b58 <dcgettext@plt>
   1d194:	ldr	r2, [pc, #3836]	; 1e098 <__assert_fail@plt+0xc150>
   1d198:	cmp	r0, r2
   1d19c:	str	r0, [sp, #168]	; 0xa8
   1d1a0:	beq	1e178 <__assert_fail@plt+0xc230>
   1d1a4:	ldr	r7, [sp, #28]
   1d1a8:	cmp	r7, #0
   1d1ac:	movne	r7, #0
   1d1b0:	bne	1d1e4 <__assert_fail@plt+0xb29c>
   1d1b4:	ldr	r3, [sp, #164]	; 0xa4
   1d1b8:	ldrb	r3, [r3]
   1d1bc:	cmp	r3, #0
   1d1c0:	beq	1e198 <__assert_fail@plt+0xc250>
   1d1c4:	ldr	r2, [sp, #164]	; 0xa4
   1d1c8:	ldr	r1, [sp, #32]
   1d1cc:	cmp	fp, r7
   1d1d0:	strbhi	r3, [r1, r7]
   1d1d4:	ldrb	r3, [r2, #1]!
   1d1d8:	add	r7, r7, #1
   1d1dc:	cmp	r3, #0
   1d1e0:	bne	1d1cc <__assert_fail@plt+0xb284>
   1d1e4:	ldr	r0, [sp, #168]	; 0xa8
   1d1e8:	bl	11d50 <strlen@plt>
   1d1ec:	ldr	r3, [sp, #168]	; 0xa8
   1d1f0:	str	r3, [sp, #64]	; 0x40
   1d1f4:	mov	r3, #1
   1d1f8:	str	r3, [sp, #44]	; 0x2c
   1d1fc:	str	r0, [sp, #52]	; 0x34
   1d200:	b	1ce08 <__assert_fail@plt+0xaec0>
   1d204:	mov	r3, #1
   1d208:	str	r3, [sp, #44]	; 0x2c
   1d20c:	str	r3, [sp, #52]	; 0x34
   1d210:	str	r3, [sp, #28]
   1d214:	ldr	r3, [pc, #3716]	; 1e0a0 <__assert_fail@plt+0xc158>
   1d218:	mov	r7, #0
   1d21c:	str	r3, [sp, #64]	; 0x40
   1d220:	mov	r3, #5
   1d224:	str	r3, [sp, #152]	; 0x98
   1d228:	b	1ce08 <__assert_fail@plt+0xaec0>
   1d22c:	ldr	r3, [sp, #28]
   1d230:	cmp	r3, #0
   1d234:	beq	1df34 <__assert_fail@plt+0xbfec>
   1d238:	ldr	r3, [sp, #28]
   1d23c:	mov	r7, #0
   1d240:	str	r3, [sp, #44]	; 0x2c
   1d244:	mov	r3, #1
   1d248:	str	r3, [sp, #52]	; 0x34
   1d24c:	ldr	r3, [pc, #3660]	; 1e0a0 <__assert_fail@plt+0xc158>
   1d250:	str	r3, [sp, #64]	; 0x40
   1d254:	b	1ce08 <__assert_fail@plt+0xaec0>
   1d258:	ldr	r3, [sp, #28]
   1d25c:	cmp	r3, #0
   1d260:	mov	r3, #1
   1d264:	streq	r3, [sp, #44]	; 0x2c
   1d268:	bne	1d0ec <__assert_fail@plt+0xb1a4>
   1d26c:	cmp	fp, #0
   1d270:	beq	1df64 <__assert_fail@plt+0xc01c>
   1d274:	ldr	r3, [sp, #32]
   1d278:	mov	r2, #39	; 0x27
   1d27c:	mov	r7, #1
   1d280:	strb	r2, [r3]
   1d284:	mov	r3, #0
   1d288:	str	r3, [sp, #28]
   1d28c:	mov	r3, #1
   1d290:	str	r3, [sp, #52]	; 0x34
   1d294:	ldr	r3, [pc, #3580]	; 1e098 <__assert_fail@plt+0xc150>
   1d298:	str	r3, [sp, #64]	; 0x40
   1d29c:	mov	r3, #2
   1d2a0:	str	r3, [sp, #152]	; 0x98
   1d2a4:	b	1ce08 <__assert_fail@plt+0xaec0>
   1d2a8:	ldr	r3, [sp, #24]
   1d2ac:	cmn	r3, #1
   1d2b0:	beq	1dec8 <__assert_fail@plt+0xbf80>
   1d2b4:	ldr	r3, [sp, #24]
   1d2b8:	subs	r3, r3, #1
   1d2bc:	movne	r3, #1
   1d2c0:	cmp	r3, #0
   1d2c4:	bne	1d2d0 <__assert_fail@plt+0xb388>
   1d2c8:	cmp	sl, #0
   1d2cc:	beq	1d6bc <__assert_fail@plt+0xb774>
   1d2d0:	ldr	r3, [sp, #152]	; 0x98
   1d2d4:	mov	r5, #0
   1d2d8:	sub	r2, r3, #2
   1d2dc:	mov	r8, r5
   1d2e0:	clz	r2, r2
   1d2e4:	lsr	r2, r2, #5
   1d2e8:	ldr	r3, [sp, #60]	; 0x3c
   1d2ec:	ldr	r1, [sp, #28]
   1d2f0:	orr	r3, r2, r3
   1d2f4:	eor	r3, r3, #1
   1d2f8:	orr	r3, r1, r3
   1d2fc:	tst	r3, #255	; 0xff
   1d300:	bne	1da2c <__assert_fail@plt+0xbae4>
   1d304:	cmp	r6, #0
   1d308:	bne	1d458 <__assert_fail@plt+0xb510>
   1d30c:	ldr	r3, [sp, #40]	; 0x28
   1d310:	eor	r8, r8, #1
   1d314:	and	r8, r8, r3
   1d318:	add	sl, sl, #1
   1d31c:	uxtb	r6, r8
   1d320:	cmp	r6, #0
   1d324:	beq	1d358 <__assert_fail@plt+0xb410>
   1d328:	cmp	fp, r7
   1d32c:	movhi	r2, #39	; 0x27
   1d330:	ldrhi	r3, [sp, #32]
   1d334:	strbhi	r2, [r3, r7]
   1d338:	add	r3, r7, #1
   1d33c:	cmp	fp, r3
   1d340:	movhi	r1, #39	; 0x27
   1d344:	ldrhi	r2, [sp, #32]
   1d348:	add	r7, r7, #2
   1d34c:	strbhi	r1, [r2, r3]
   1d350:	mov	r3, #0
   1d354:	str	r3, [sp, #40]	; 0x28
   1d358:	cmp	r7, fp
   1d35c:	ldrcc	r3, [sp, #32]
   1d360:	strbcc	r4, [r3, r7]
   1d364:	ldr	r3, [sp, #36]	; 0x24
   1d368:	cmp	r5, #0
   1d36c:	moveq	r3, #0
   1d370:	str	r3, [sp, #36]	; 0x24
   1d374:	ldr	r3, [sp, #24]
   1d378:	add	r7, r7, #1
   1d37c:	cmn	r3, #1
   1d380:	bne	1ce24 <__assert_fail@plt+0xaedc>
   1d384:	ldr	r3, [sp, #56]	; 0x38
   1d388:	ldrb	r5, [r3, sl]
   1d38c:	adds	r5, r5, #0
   1d390:	movne	r5, #1
   1d394:	cmp	r5, #0
   1d398:	bne	1ce38 <__assert_fail@plt+0xaef0>
   1d39c:	ldr	r3, [sp, #152]	; 0x98
   1d3a0:	ldr	r1, [sp, #28]
   1d3a4:	sub	r3, r3, #2
   1d3a8:	clz	r3, r3
   1d3ac:	lsr	r3, r3, #5
   1d3b0:	and	r9, r1, r3
   1d3b4:	cmp	r7, #0
   1d3b8:	movne	r2, #0
   1d3bc:	andeq	r2, r9, #1
   1d3c0:	cmp	r2, #0
   1d3c4:	bne	1dda0 <__assert_fail@plt+0xbe58>
   1d3c8:	eor	r2, r1, #1
   1d3cc:	ands	r3, r3, r2
   1d3d0:	beq	1e25c <__assert_fail@plt+0xc314>
   1d3d4:	ldr	r2, [sp, #68]	; 0x44
   1d3d8:	cmp	r2, #0
   1d3dc:	beq	1e248 <__assert_fail@plt+0xc300>
   1d3e0:	ldr	r3, [sp, #36]	; 0x24
   1d3e4:	cmp	r3, #0
   1d3e8:	bne	1e200 <__assert_fail@plt+0xc2b8>
   1d3ec:	ldr	r2, [sp, #72]	; 0x48
   1d3f0:	clz	r3, fp
   1d3f4:	cmp	r2, #0
   1d3f8:	lsr	r3, r3, #5
   1d3fc:	moveq	r3, #0
   1d400:	cmp	r3, #0
   1d404:	beq	1e1a0 <__assert_fail@plt+0xc258>
   1d408:	str	r3, [sp, #68]	; 0x44
   1d40c:	ldr	fp, [sp, #72]	; 0x48
   1d410:	b	1cdc0 <__assert_fail@plt+0xae78>
   1d414:	ldr	r3, [sp, #152]	; 0x98
   1d418:	cmp	r3, #2
   1d41c:	beq	1da70 <__assert_fail@plt+0xbb28>
   1d420:	ldr	r3, [sp, #44]	; 0x2c
   1d424:	ldr	r2, [sp, #28]
   1d428:	and	r2, r3, r2
   1d42c:	ands	r2, r9, r2
   1d430:	bne	1da7c <__assert_fail@plt+0xbb34>
   1d434:	mov	r4, #92	; 0x5c
   1d438:	mov	r3, r4
   1d43c:	ldr	r1, [sp, #44]	; 0x2c
   1d440:	cmp	r1, #0
   1d444:	moveq	r5, #0
   1d448:	moveq	r8, r1
   1d44c:	beq	1d2e8 <__assert_fail@plt+0xb3a0>
   1d450:	mov	r4, r3
   1d454:	mov	r5, #0
   1d458:	ldr	r3, [sp, #28]
   1d45c:	cmp	r3, #0
   1d460:	bne	1da64 <__assert_fail@plt+0xbb1c>
   1d464:	ldr	r3, [sp, #40]	; 0x28
   1d468:	eor	r9, r3, #1
   1d46c:	and	r9, r9, r2
   1d470:	ands	r9, r9, #255	; 0xff
   1d474:	beq	1d4b8 <__assert_fail@plt+0xb570>
   1d478:	cmp	fp, r7
   1d47c:	movhi	r2, #39	; 0x27
   1d480:	ldrhi	r3, [sp, #32]
   1d484:	str	r9, [sp, #40]	; 0x28
   1d488:	strbhi	r2, [r3, r7]
   1d48c:	add	r3, r7, #1
   1d490:	cmp	fp, r3
   1d494:	movhi	r1, #36	; 0x24
   1d498:	ldrhi	r2, [sp, #32]
   1d49c:	strbhi	r1, [r2, r3]
   1d4a0:	add	r3, r7, #2
   1d4a4:	cmp	fp, r3
   1d4a8:	add	r7, r7, #3
   1d4ac:	ldrhi	r2, [sp, #32]
   1d4b0:	movhi	r1, #39	; 0x27
   1d4b4:	strbhi	r1, [r2, r3]
   1d4b8:	cmp	fp, r7
   1d4bc:	movhi	r2, #92	; 0x5c
   1d4c0:	ldrhi	r3, [sp, #32]
   1d4c4:	add	sl, sl, #1
   1d4c8:	strbhi	r2, [r3, r7]
   1d4cc:	add	r7, r7, #1
   1d4d0:	b	1d358 <__assert_fail@plt+0xb410>
   1d4d4:	ldr	r3, [sp, #152]	; 0x98
   1d4d8:	mov	r4, #11
   1d4dc:	sub	r2, r3, #2
   1d4e0:	mov	r3, #118	; 0x76
   1d4e4:	clz	r2, r2
   1d4e8:	lsr	r2, r2, #5
   1d4ec:	b	1d43c <__assert_fail@plt+0xb4f4>
   1d4f0:	mov	r4, #10
   1d4f4:	mov	r3, #110	; 0x6e
   1d4f8:	ldr	r2, [sp, #152]	; 0x98
   1d4fc:	ldr	r1, [sp, #28]
   1d500:	sub	r2, r2, #2
   1d504:	clz	r2, r2
   1d508:	lsr	r2, r2, #5
   1d50c:	ands	r1, r1, r2
   1d510:	beq	1d43c <__assert_fail@plt+0xb4f4>
   1d514:	ldr	sl, [sp, #32]
   1d518:	mov	r8, fp
   1d51c:	mov	r2, r1
   1d520:	mov	r3, #2
   1d524:	str	r3, [sp, #152]	; 0x98
   1d528:	ldr	r9, [sp, #44]	; 0x2c
   1d52c:	ldr	r3, [sp, #152]	; 0x98
   1d530:	and	r9, r9, r2
   1d534:	tst	r9, #255	; 0xff
   1d538:	movne	r3, #4
   1d53c:	str	r3, [sp, #152]	; 0x98
   1d540:	ldr	r3, [sp, #156]	; 0x9c
   1d544:	mov	ip, #0
   1d548:	bic	r3, r3, #2
   1d54c:	str	r3, [sp, #4]
   1d550:	ldr	r3, [sp, #168]	; 0xa8
   1d554:	ldr	r2, [sp, #56]	; 0x38
   1d558:	str	r3, [sp, #16]
   1d55c:	ldr	r3, [sp, #164]	; 0xa4
   1d560:	mov	r1, r8
   1d564:	str	r3, [sp, #12]
   1d568:	ldr	r3, [sp, #152]	; 0x98
   1d56c:	mov	r0, sl
   1d570:	str	r3, [sp]
   1d574:	str	ip, [sp, #8]
   1d578:	ldr	r3, [sp, #24]
   1d57c:	bl	1cd64 <__assert_fail@plt+0xae1c>
   1d580:	mov	fp, r0
   1d584:	mov	r0, fp
   1d588:	add	sp, sp, #116	; 0x74
   1d58c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d590:	ldr	r3, [sp, #152]	; 0x98
   1d594:	mov	r4, #8
   1d598:	sub	r2, r3, #2
   1d59c:	mov	r3, #98	; 0x62
   1d5a0:	clz	r2, r2
   1d5a4:	lsr	r2, r2, #5
   1d5a8:	b	1d43c <__assert_fail@plt+0xb4f4>
   1d5ac:	ldr	r3, [sp, #152]	; 0x98
   1d5b0:	mov	r4, #7
   1d5b4:	sub	r2, r3, #2
   1d5b8:	mov	r3, #97	; 0x61
   1d5bc:	clz	r2, r2
   1d5c0:	lsr	r2, r2, #5
   1d5c4:	b	1d43c <__assert_fail@plt+0xb4f4>
   1d5c8:	ldr	r3, [sp, #44]	; 0x2c
   1d5cc:	cmp	r3, #0
   1d5d0:	beq	1ddb4 <__assert_fail@plt+0xbe6c>
   1d5d4:	ldr	r3, [sp, #28]
   1d5d8:	cmp	r3, #0
   1d5dc:	bne	1e08c <__assert_fail@plt+0xc144>
   1d5e0:	ldr	r3, [sp, #152]	; 0x98
   1d5e4:	sub	r2, r3, #2
   1d5e8:	ldr	r3, [sp, #40]	; 0x28
   1d5ec:	clz	r2, r2
   1d5f0:	eor	r3, r3, #1
   1d5f4:	lsr	r2, r2, #5
   1d5f8:	ands	r3, r2, r3
   1d5fc:	moveq	r1, r7
   1d600:	beq	1d644 <__assert_fail@plt+0xb6fc>
   1d604:	cmp	fp, r7
   1d608:	movhi	r0, #39	; 0x27
   1d60c:	ldrhi	r1, [sp, #32]
   1d610:	str	r3, [sp, #40]	; 0x28
   1d614:	strbhi	r0, [r1, r7]
   1d618:	add	r1, r7, #1
   1d61c:	cmp	fp, r1
   1d620:	movhi	ip, #36	; 0x24
   1d624:	ldrhi	r0, [sp, #32]
   1d628:	strbhi	ip, [r0, r1]
   1d62c:	add	r1, r7, #2
   1d630:	cmp	fp, r1
   1d634:	movhi	ip, #39	; 0x27
   1d638:	ldrhi	r0, [sp, #32]
   1d63c:	strbhi	ip, [r0, r1]
   1d640:	add	r1, r7, #3
   1d644:	cmp	fp, r1
   1d648:	movhi	r0, #92	; 0x5c
   1d64c:	ldrhi	r3, [sp, #32]
   1d650:	add	r7, r1, #1
   1d654:	strbhi	r0, [r3, r1]
   1d658:	cmp	r8, #0
   1d65c:	beq	1dfa0 <__assert_fail@plt+0xc058>
   1d660:	ldr	r0, [sp, #24]
   1d664:	add	r3, sl, #1
   1d668:	cmp	r3, r0
   1d66c:	bcs	1dedc <__assert_fail@plt+0xbf94>
   1d670:	ldr	r0, [sp, #56]	; 0x38
   1d674:	ldrb	r3, [r0, r3]
   1d678:	sub	r3, r3, #48	; 0x30
   1d67c:	cmp	r3, #9
   1d680:	bhi	1dedc <__assert_fail@plt+0xbf94>
   1d684:	cmp	fp, r7
   1d688:	movhi	r3, #48	; 0x30
   1d68c:	ldrhi	r0, [sp, #32]
   1d690:	ldr	r5, [sp, #28]
   1d694:	mov	r4, #48	; 0x30
   1d698:	strbhi	r3, [r0, r7]
   1d69c:	add	r3, r1, #2
   1d6a0:	cmp	fp, r3
   1d6a4:	movhi	r0, #48	; 0x30
   1d6a8:	ldrhi	ip, [sp, #32]
   1d6ac:	add	r7, r1, #3
   1d6b0:	strbhi	r0, [ip, r3]
   1d6b4:	b	1d2e8 <__assert_fail@plt+0xb3a0>
   1d6b8:	mov	r5, #0
   1d6bc:	ldr	r3, [sp, #152]	; 0x98
   1d6c0:	sub	r2, r3, #2
   1d6c4:	ldr	r3, [sp, #28]
   1d6c8:	clz	r2, r2
   1d6cc:	lsr	r2, r2, #5
   1d6d0:	ands	r8, r3, r2
   1d6d4:	beq	1d2e8 <__assert_fail@plt+0xb3a0>
   1d6d8:	mov	r3, r8
   1d6dc:	mov	r2, r3
   1d6e0:	mov	r3, #2
   1d6e4:	ldr	sl, [sp, #32]
   1d6e8:	mov	r8, fp
   1d6ec:	str	r3, [sp, #152]	; 0x98
   1d6f0:	b	1d528 <__assert_fail@plt+0xb5e0>
   1d6f4:	ldr	r3, [sp, #152]	; 0x98
   1d6f8:	cmp	r3, #2
   1d6fc:	beq	1de20 <__assert_fail@plt+0xbed8>
   1d700:	cmp	r3, #5
   1d704:	beq	1dde0 <__assert_fail@plt+0xbe98>
   1d708:	mov	r5, #0
   1d70c:	sub	r2, r3, #2
   1d710:	mov	r8, r5
   1d714:	clz	r2, r2
   1d718:	mov	r4, #63	; 0x3f
   1d71c:	lsr	r2, r2, #5
   1d720:	b	1d2e8 <__assert_fail@plt+0xb3a0>
   1d724:	ldr	r3, [sp, #152]	; 0x98
   1d728:	cmp	r3, #2
   1d72c:	beq	1de40 <__assert_fail@plt+0xbef8>
   1d730:	mov	r2, #0
   1d734:	str	r5, [sp, #68]	; 0x44
   1d738:	mov	r8, r2
   1d73c:	mov	r4, #39	; 0x27
   1d740:	b	1d2e8 <__assert_fail@plt+0xb3a0>
   1d744:	mov	r4, #13
   1d748:	mov	r3, #114	; 0x72
   1d74c:	b	1d4f8 <__assert_fail@plt+0xb5b0>
   1d750:	ldr	r3, [sp, #152]	; 0x98
   1d754:	mov	r8, #0
   1d758:	sub	r2, r3, #2
   1d75c:	clz	r2, r2
   1d760:	lsr	r2, r2, #5
   1d764:	b	1d2e8 <__assert_fail@plt+0xb3a0>
   1d768:	ldr	r3, [sp, #152]	; 0x98
   1d76c:	mov	r4, #12
   1d770:	sub	r2, r3, #2
   1d774:	mov	r3, #102	; 0x66
   1d778:	clz	r2, r2
   1d77c:	lsr	r2, r2, #5
   1d780:	b	1d43c <__assert_fail@plt+0xb4f4>
   1d784:	mov	r5, r6
   1d788:	b	1d6bc <__assert_fail@plt+0xb774>
   1d78c:	ldr	r3, [sp, #152]	; 0x98
   1d790:	sub	r2, r3, #2
   1d794:	mov	r3, #116	; 0x74
   1d798:	clz	r2, r2
   1d79c:	lsr	r2, r2, #5
   1d7a0:	b	1d43c <__assert_fail@plt+0xb4f4>
   1d7a4:	ldr	r8, [sp, #76]	; 0x4c
   1d7a8:	cmp	r8, #1
   1d7ac:	bne	1dc5c <__assert_fail@plt+0xbd14>
   1d7b0:	bl	11d2c <__ctype_b_loc@plt>
   1d7b4:	sxth	r3, r4
   1d7b8:	mov	ip, r8
   1d7bc:	lsl	r3, r3, #1
   1d7c0:	ldr	r2, [r0]
   1d7c4:	ldrh	r3, [r2, r3]
   1d7c8:	and	r3, r3, #16384	; 0x4000
   1d7cc:	cmp	r3, #0
   1d7d0:	movne	r5, #1
   1d7d4:	moveq	r5, #0
   1d7d8:	moveq	r3, #1
   1d7dc:	movne	r3, #0
   1d7e0:	ldr	r2, [sp, #44]	; 0x2c
   1d7e4:	and	r3, r3, r2
   1d7e8:	ands	r8, r3, #255	; 0xff
   1d7ec:	bne	1daf0 <__assert_fail@plt+0xbba8>
   1d7f0:	ldr	r3, [sp, #152]	; 0x98
   1d7f4:	sub	r2, r3, #2
   1d7f8:	clz	r2, r2
   1d7fc:	lsr	r2, r2, #5
   1d800:	b	1d2e8 <__assert_fail@plt+0xb3a0>
   1d804:	ldr	r3, [sp, #56]	; 0x38
   1d808:	add	r3, r3, sl
   1d80c:	str	r3, [sp, #48]	; 0x30
   1d810:	ldr	r3, [sp, #48]	; 0x30
   1d814:	mov	r6, #0
   1d818:	ldrb	r4, [r3]
   1d81c:	cmp	r4, #126	; 0x7e
   1d820:	ldrls	pc, [pc, r4, lsl #2]
   1d824:	b	1d7a4 <__assert_fail@plt+0xb85c>
   1d828:	andeq	sp, r1, r8, asr #11
   1d82c:	andeq	sp, r1, r4, lsr #15
   1d830:	andeq	sp, r1, r4, lsr #15
   1d834:	andeq	sp, r1, r4, lsr #15
   1d838:	andeq	sp, r1, r4, lsr #15
   1d83c:	andeq	sp, r1, r4, lsr #15
   1d840:	andeq	sp, r1, r4, lsr #15
   1d844:	andeq	sp, r1, ip, lsr #11
   1d848:	muleq	r1, r0, r5
   1d84c:	andeq	sp, r1, r4, lsr #20
   1d850:	strdeq	sp, [r1], -r0
   1d854:	ldrdeq	sp, [r1], -r4
   1d858:	andeq	sp, r1, r8, ror #14
   1d85c:	andeq	sp, r1, r4, asr #14
   1d860:	andeq	sp, r1, r4, lsr #15
   1d864:	andeq	sp, r1, r4, lsr #15
   1d868:	andeq	sp, r1, r4, lsr #15
   1d86c:	andeq	sp, r1, r4, lsr #15
   1d870:	andeq	sp, r1, r4, lsr #15
   1d874:	andeq	sp, r1, r4, lsr #15
   1d878:	andeq	sp, r1, r4, lsr #15
   1d87c:	andeq	sp, r1, r4, lsr #15
   1d880:	andeq	sp, r1, r4, lsr #15
   1d884:	andeq	sp, r1, r4, lsr #15
   1d888:	andeq	sp, r1, r4, lsr #15
   1d88c:	andeq	sp, r1, r4, lsr #15
   1d890:	andeq	sp, r1, r4, lsr #15
   1d894:	andeq	sp, r1, r4, lsr #15
   1d898:	andeq	sp, r1, r4, lsr #15
   1d89c:	andeq	sp, r1, r4, lsr #15
   1d8a0:	andeq	sp, r1, r4, lsr #15
   1d8a4:	andeq	sp, r1, r4, lsr #15
   1d8a8:			; <UNDEFINED> instruction: 0x0001d6bc
   1d8ac:			; <UNDEFINED> instruction: 0x0001d6b8
   1d8b0:			; <UNDEFINED> instruction: 0x0001d6b8
   1d8b4:	andeq	sp, r1, r8, asr #5
   1d8b8:			; <UNDEFINED> instruction: 0x0001d6b8
   1d8bc:	andeq	sp, r1, r0, asr r7
   1d8c0:			; <UNDEFINED> instruction: 0x0001d6b8
   1d8c4:	andeq	sp, r1, r4, lsr #14
   1d8c8:			; <UNDEFINED> instruction: 0x0001d6b8
   1d8cc:			; <UNDEFINED> instruction: 0x0001d6b8
   1d8d0:			; <UNDEFINED> instruction: 0x0001d6b8
   1d8d4:	andeq	sp, r1, r0, asr r7
   1d8d8:	andeq	sp, r1, r0, asr r7
   1d8dc:	andeq	sp, r1, r0, asr r7
   1d8e0:	andeq	sp, r1, r0, asr r7
   1d8e4:	andeq	sp, r1, r0, asr r7
   1d8e8:	andeq	sp, r1, r0, asr r7
   1d8ec:	andeq	sp, r1, r0, asr r7
   1d8f0:	andeq	sp, r1, r0, asr r7
   1d8f4:	andeq	sp, r1, r0, asr r7
   1d8f8:	andeq	sp, r1, r0, asr r7
   1d8fc:	andeq	sp, r1, r0, asr r7
   1d900:	andeq	sp, r1, r0, asr r7
   1d904:	andeq	sp, r1, r0, asr r7
   1d908:	andeq	sp, r1, r0, asr r7
   1d90c:	andeq	sp, r1, r0, asr r7
   1d910:	andeq	sp, r1, r0, asr r7
   1d914:			; <UNDEFINED> instruction: 0x0001d6b8
   1d918:			; <UNDEFINED> instruction: 0x0001d6b8
   1d91c:			; <UNDEFINED> instruction: 0x0001d6b8
   1d920:			; <UNDEFINED> instruction: 0x0001d6b8
   1d924:	strdeq	sp, [r1], -r4
   1d928:	andeq	sp, r1, r4, lsr #15
   1d92c:	andeq	sp, r1, r0, asr r7
   1d930:	andeq	sp, r1, r0, asr r7
   1d934:	andeq	sp, r1, r0, asr r7
   1d938:	andeq	sp, r1, r0, asr r7
   1d93c:	andeq	sp, r1, r0, asr r7
   1d940:	andeq	sp, r1, r0, asr r7
   1d944:	andeq	sp, r1, r0, asr r7
   1d948:	andeq	sp, r1, r0, asr r7
   1d94c:	andeq	sp, r1, r0, asr r7
   1d950:	andeq	sp, r1, r0, asr r7
   1d954:	andeq	sp, r1, r0, asr r7
   1d958:	andeq	sp, r1, r0, asr r7
   1d95c:	andeq	sp, r1, r0, asr r7
   1d960:	andeq	sp, r1, r0, asr r7
   1d964:	andeq	sp, r1, r0, asr r7
   1d968:	andeq	sp, r1, r0, asr r7
   1d96c:	andeq	sp, r1, r0, asr r7
   1d970:	andeq	sp, r1, r0, asr r7
   1d974:	andeq	sp, r1, r0, asr r7
   1d978:	andeq	sp, r1, r0, asr r7
   1d97c:	andeq	sp, r1, r0, asr r7
   1d980:	andeq	sp, r1, r0, asr r7
   1d984:	andeq	sp, r1, r0, asr r7
   1d988:	andeq	sp, r1, r0, asr r7
   1d98c:	andeq	sp, r1, r0, asr r7
   1d990:	andeq	sp, r1, r0, asr r7
   1d994:			; <UNDEFINED> instruction: 0x0001d6b8
   1d998:	andeq	sp, r1, r4, lsl r4
   1d99c:	andeq	sp, r1, r0, asr r7
   1d9a0:			; <UNDEFINED> instruction: 0x0001d6b8
   1d9a4:	andeq	sp, r1, r0, asr r7
   1d9a8:			; <UNDEFINED> instruction: 0x0001d6b8
   1d9ac:	andeq	sp, r1, r0, asr r7
   1d9b0:	andeq	sp, r1, r0, asr r7
   1d9b4:	andeq	sp, r1, r0, asr r7
   1d9b8:	andeq	sp, r1, r0, asr r7
   1d9bc:	andeq	sp, r1, r0, asr r7
   1d9c0:	andeq	sp, r1, r0, asr r7
   1d9c4:	andeq	sp, r1, r0, asr r7
   1d9c8:	andeq	sp, r1, r0, asr r7
   1d9cc:	andeq	sp, r1, r0, asr r7
   1d9d0:	andeq	sp, r1, r0, asr r7
   1d9d4:	andeq	sp, r1, r0, asr r7
   1d9d8:	andeq	sp, r1, r0, asr r7
   1d9dc:	andeq	sp, r1, r0, asr r7
   1d9e0:	andeq	sp, r1, r0, asr r7
   1d9e4:	andeq	sp, r1, r0, asr r7
   1d9e8:	andeq	sp, r1, r0, asr r7
   1d9ec:	andeq	sp, r1, r0, asr r7
   1d9f0:	andeq	sp, r1, r0, asr r7
   1d9f4:	andeq	sp, r1, r0, asr r7
   1d9f8:	andeq	sp, r1, r0, asr r7
   1d9fc:	andeq	sp, r1, r0, asr r7
   1da00:	andeq	sp, r1, r0, asr r7
   1da04:	andeq	sp, r1, r0, asr r7
   1da08:	andeq	sp, r1, r0, asr r7
   1da0c:	andeq	sp, r1, r0, asr r7
   1da10:	andeq	sp, r1, r0, asr r7
   1da14:	andeq	sp, r1, r8, lsr #5
   1da18:			; <UNDEFINED> instruction: 0x0001d6b8
   1da1c:	andeq	sp, r1, r8, lsr #5
   1da20:	andeq	sp, r1, r8, asr #5
   1da24:	mov	r3, #116	; 0x74
   1da28:	b	1d4f8 <__assert_fail@plt+0xb5b0>
   1da2c:	ldr	r3, [sp, #160]	; 0xa0
   1da30:	cmp	r3, #0
   1da34:	beq	1d304 <__assert_fail@plt+0xb3bc>
   1da38:	lsr	r3, r4, #5
   1da3c:	ldr	r0, [sp, #160]	; 0xa0
   1da40:	uxtb	r3, r3
   1da44:	and	r1, r4, #31
   1da48:	ldr	r0, [r0, r3, lsl #2]
   1da4c:	lsr	r3, r0, r1
   1da50:	tst	r3, #1
   1da54:	beq	1d304 <__assert_fail@plt+0xb3bc>
   1da58:	ldr	r3, [sp, #28]
   1da5c:	cmp	r3, #0
   1da60:	beq	1d464 <__assert_fail@plt+0xb51c>
   1da64:	ldr	sl, [sp, #32]
   1da68:	mov	r8, fp
   1da6c:	b	1d528 <__assert_fail@plt+0xb5e0>
   1da70:	ldr	r3, [sp, #28]
   1da74:	cmp	r3, #0
   1da78:	bne	1dfcc <__assert_fail@plt+0xc084>
   1da7c:	add	sl, sl, #1
   1da80:	ldr	r6, [sp, #40]	; 0x28
   1da84:	mov	r5, #0
   1da88:	mov	r4, #92	; 0x5c
   1da8c:	b	1d320 <__assert_fail@plt+0xb3d8>
   1da90:	cmp	r9, r8
   1da94:	bne	1dd04 <__assert_fail@plt+0xbdbc>
   1da98:	ldr	r0, [sp, #100]	; 0x64
   1da9c:	bl	11be8 <iswprint@plt>
   1daa0:	add	r5, r5, r4
   1daa4:	cmp	r0, #0
   1daa8:	add	r0, sp, #104	; 0x68
   1daac:	moveq	r6, #0
   1dab0:	bl	11af8 <mbsinit@plt>
   1dab4:	cmp	r0, #0
   1dab8:	beq	1dc98 <__assert_fail@plt+0xbd50>
   1dabc:	mov	r2, r6
   1dac0:	mov	ip, r5
   1dac4:	eor	r5, r2, #1
   1dac8:	ldr	r4, [sp, #80]	; 0x50
   1dacc:	ldr	r6, [sp, #84]	; 0x54
   1dad0:	ldr	r7, [sp, #88]	; 0x58
   1dad4:	uxtb	r5, r5
   1dad8:	cmp	ip, #1
   1dadc:	bls	1dfdc <__assert_fail@plt+0xc094>
   1dae0:	ldr	r3, [sp, #44]	; 0x2c
   1dae4:	and	r8, r3, r5
   1dae8:	mov	r5, r2
   1daec:	uxtb	r8, r8
   1daf0:	add	r2, sl, ip
   1daf4:	ldr	r0, [sp, #48]	; 0x30
   1daf8:	mov	r1, #0
   1dafc:	str	r5, [sp, #48]	; 0x30
   1db00:	ldr	r9, [sp, #28]
   1db04:	ldr	ip, [sp, #40]	; 0x28
   1db08:	ldr	r3, [sp, #32]
   1db0c:	ldr	r5, [sp, #152]	; 0x98
   1db10:	b	1dbcc <__assert_fail@plt+0xbc84>
   1db14:	cmp	r9, #0
   1db18:	bne	1def0 <__assert_fail@plt+0xbfa8>
   1db1c:	eor	r1, ip, #1
   1db20:	cmp	r5, #2
   1db24:	movne	r1, #0
   1db28:	andeq	r1, r1, #1
   1db2c:	cmp	r1, #0
   1db30:	beq	1db68 <__assert_fail@plt+0xbc20>
   1db34:	cmp	fp, r7
   1db38:	movhi	ip, #39	; 0x27
   1db3c:	strbhi	ip, [r3, r7]
   1db40:	add	ip, r7, #1
   1db44:	cmp	fp, ip
   1db48:	movhi	lr, #36	; 0x24
   1db4c:	strbhi	lr, [r3, ip]
   1db50:	add	ip, r7, #2
   1db54:	cmp	fp, ip
   1db58:	movhi	lr, #39	; 0x27
   1db5c:	strbhi	lr, [r3, ip]
   1db60:	add	r7, r7, #3
   1db64:	mov	ip, r1
   1db68:	cmp	fp, r7
   1db6c:	movhi	r1, #92	; 0x5c
   1db70:	strbhi	r1, [r3, r7]
   1db74:	add	r1, r7, #1
   1db78:	cmp	fp, r1
   1db7c:	lsrhi	lr, r4, #6
   1db80:	addhi	lr, lr, #48	; 0x30
   1db84:	strbhi	lr, [r3, r1]
   1db88:	add	lr, r7, #2
   1db8c:	cmp	fp, lr
   1db90:	lsrhi	r1, r4, #3
   1db94:	andhi	r1, r1, #7
   1db98:	addhi	r1, r1, #48	; 0x30
   1db9c:	add	sl, sl, #1
   1dba0:	strbhi	r1, [r3, lr]
   1dba4:	and	r4, r4, #7
   1dba8:	cmp	r2, sl
   1dbac:	add	r4, r4, #48	; 0x30
   1dbb0:	add	r7, r7, #3
   1dbb4:	bls	1df14 <__assert_fail@plt+0xbfcc>
   1dbb8:	mov	r1, r8
   1dbbc:	cmp	fp, r7
   1dbc0:	strbhi	r4, [r3, r7]
   1dbc4:	ldrb	r4, [r0, #1]!
   1dbc8:	add	r7, r7, #1
   1dbcc:	cmp	r8, #0
   1dbd0:	bne	1db14 <__assert_fail@plt+0xbbcc>
   1dbd4:	cmp	r6, #0
   1dbd8:	bne	1dc28 <__assert_fail@plt+0xbce0>
   1dbdc:	eor	r6, r1, #1
   1dbe0:	and	r6, r6, ip
   1dbe4:	add	sl, sl, #1
   1dbe8:	cmp	r2, sl
   1dbec:	uxtb	r6, r6
   1dbf0:	bls	1dc50 <__assert_fail@plt+0xbd08>
   1dbf4:	cmp	r6, #0
   1dbf8:	beq	1dbbc <__assert_fail@plt+0xbc74>
   1dbfc:	cmp	fp, r7
   1dc00:	movhi	ip, #39	; 0x27
   1dc04:	strbhi	ip, [r3, r7]
   1dc08:	add	ip, r7, #1
   1dc0c:	cmp	fp, ip
   1dc10:	movhi	lr, #39	; 0x27
   1dc14:	strbhi	lr, [r3, ip]
   1dc18:	add	r7, r7, #2
   1dc1c:	mov	r6, r8
   1dc20:	mov	ip, r8
   1dc24:	b	1dbbc <__assert_fail@plt+0xbc74>
   1dc28:	cmp	fp, r7
   1dc2c:	eor	r6, r1, #1
   1dc30:	movhi	lr, #92	; 0x5c
   1dc34:	and	r6, r6, ip
   1dc38:	add	sl, sl, #1
   1dc3c:	strbhi	lr, [r3, r7]
   1dc40:	cmp	r2, sl
   1dc44:	add	r7, r7, #1
   1dc48:	uxtb	r6, r6
   1dc4c:	bhi	1dbf4 <__assert_fail@plt+0xbcac>
   1dc50:	str	ip, [sp, #40]	; 0x28
   1dc54:	ldr	r5, [sp, #48]	; 0x30
   1dc58:	b	1d320 <__assert_fail@plt+0xb3d8>
   1dc5c:	ldr	r3, [sp, #24]
   1dc60:	cmn	r3, #1
   1dc64:	mov	r3, #0
   1dc68:	str	r3, [sp, #104]	; 0x68
   1dc6c:	str	r3, [sp, #108]	; 0x6c
   1dc70:	beq	1df90 <__assert_fail@plt+0xc048>
   1dc74:	mov	r2, r5
   1dc78:	mov	r3, #0
   1dc7c:	str	r7, [sp, #88]	; 0x58
   1dc80:	ldr	r7, [sp, #152]	; 0x98
   1dc84:	str	r5, [sp, #92]	; 0x5c
   1dc88:	str	r6, [sp, #84]	; 0x54
   1dc8c:	mov	r5, r3
   1dc90:	mov	r6, r2
   1dc94:	str	r4, [sp, #80]	; 0x50
   1dc98:	ldr	r3, [sp, #56]	; 0x38
   1dc9c:	add	r9, sl, r5
   1dca0:	add	r8, r3, r9
   1dca4:	ldr	r3, [sp, #24]
   1dca8:	mov	r1, r8
   1dcac:	sub	r2, r3, r9
   1dcb0:	add	r0, sp, #100	; 0x64
   1dcb4:	add	r3, sp, #104	; 0x68
   1dcb8:	bl	213e0 <__assert_fail@plt+0xf498>
   1dcbc:	subs	r4, r0, #0
   1dcc0:	beq	1e068 <__assert_fail@plt+0xc120>
   1dcc4:	cmn	r4, #1
   1dcc8:	beq	1e048 <__assert_fail@plt+0xc100>
   1dccc:	cmn	r4, #2
   1dcd0:	beq	1dfe8 <__assert_fail@plt+0xc0a0>
   1dcd4:	ldr	r2, [sp, #28]
   1dcd8:	cmp	r7, #2
   1dcdc:	movne	r2, #0
   1dce0:	andeq	r2, r2, #1
   1dce4:	cmp	r2, #0
   1dce8:	beq	1da98 <__assert_fail@plt+0xbb50>
   1dcec:	cmp	r4, #1
   1dcf0:	beq	1da98 <__assert_fail@plt+0xbb50>
   1dcf4:	sub	r3, r4, #1
   1dcf8:	add	r9, r3, r9
   1dcfc:	ldr	r3, [sp, #56]	; 0x38
   1dd00:	add	r9, r3, r9
   1dd04:	ldrb	r3, [r8, #1]!
   1dd08:	sub	r3, r3, #91	; 0x5b
   1dd0c:	cmp	r3, #33	; 0x21
   1dd10:	ldrls	pc, [pc, r3, lsl #2]
   1dd14:	b	1da90 <__assert_fail@plt+0xbb48>
   1dd18:	andeq	sp, r1, r0, lsr #27
   1dd1c:	andeq	sp, r1, r0, lsr #27
   1dd20:	muleq	r1, r0, sl
   1dd24:	andeq	sp, r1, r0, lsr #27
   1dd28:	muleq	r1, r0, sl
   1dd2c:	andeq	sp, r1, r0, lsr #27
   1dd30:	muleq	r1, r0, sl
   1dd34:	muleq	r1, r0, sl
   1dd38:	muleq	r1, r0, sl
   1dd3c:	muleq	r1, r0, sl
   1dd40:	muleq	r1, r0, sl
   1dd44:	muleq	r1, r0, sl
   1dd48:	muleq	r1, r0, sl
   1dd4c:	muleq	r1, r0, sl
   1dd50:	muleq	r1, r0, sl
   1dd54:	muleq	r1, r0, sl
   1dd58:	muleq	r1, r0, sl
   1dd5c:	muleq	r1, r0, sl
   1dd60:	muleq	r1, r0, sl
   1dd64:	muleq	r1, r0, sl
   1dd68:	muleq	r1, r0, sl
   1dd6c:	muleq	r1, r0, sl
   1dd70:	muleq	r1, r0, sl
   1dd74:	muleq	r1, r0, sl
   1dd78:	muleq	r1, r0, sl
   1dd7c:	muleq	r1, r0, sl
   1dd80:	muleq	r1, r0, sl
   1dd84:	muleq	r1, r0, sl
   1dd88:	muleq	r1, r0, sl
   1dd8c:	muleq	r1, r0, sl
   1dd90:	muleq	r1, r0, sl
   1dd94:	muleq	r1, r0, sl
   1dd98:	muleq	r1, r0, sl
   1dd9c:	andeq	sp, r1, r0, lsr #27
   1dda0:	mov	r3, #2
   1dda4:	ldr	sl, [sp, #32]
   1dda8:	mov	r8, fp
   1ddac:	str	r3, [sp, #152]	; 0x98
   1ddb0:	b	1d528 <__assert_fail@plt+0xb5e0>
   1ddb4:	ldr	r3, [sp, #156]	; 0x9c
   1ddb8:	tst	r3, #1
   1ddbc:	bne	1dee8 <__assert_fail@plt+0xbfa0>
   1ddc0:	ldr	r3, [sp, #152]	; 0x98
   1ddc4:	ldr	r4, [sp, #44]	; 0x2c
   1ddc8:	sub	r2, r3, #2
   1ddcc:	mov	r5, #0
   1ddd0:	clz	r2, r2
   1ddd4:	mov	r8, r4
   1ddd8:	lsr	r2, r2, #5
   1dddc:	b	1d2e8 <__assert_fail@plt+0xb3a0>
   1dde0:	ldr	r3, [sp, #156]	; 0x9c
   1dde4:	ands	r9, r3, #4
   1dde8:	beq	1df20 <__assert_fail@plt+0xbfd8>
   1ddec:	ldr	r2, [sp, #24]
   1ddf0:	add	r3, sl, #2
   1ddf4:	cmp	r3, r2
   1ddf8:	bcs	1de0c <__assert_fail@plt+0xbec4>
   1ddfc:	ldr	r2, [sp, #48]	; 0x30
   1de00:	ldrb	r4, [r2, #1]
   1de04:	cmp	r4, #63	; 0x3f
   1de08:	beq	1e0a8 <__assert_fail@plt+0xc160>
   1de0c:	mov	r2, #0
   1de10:	mov	r8, r2
   1de14:	mov	r5, r2
   1de18:	mov	r4, #63	; 0x3f
   1de1c:	b	1d2e8 <__assert_fail@plt+0xb3a0>
   1de20:	ldr	r3, [sp, #28]
   1de24:	cmp	r3, #0
   1de28:	bne	1e14c <__assert_fail@plt+0xc204>
   1de2c:	mov	r2, r5
   1de30:	mov	r8, r3
   1de34:	mov	r5, #0
   1de38:	mov	r4, #63	; 0x3f
   1de3c:	b	1d2e8 <__assert_fail@plt+0xb3a0>
   1de40:	ldr	r3, [sp, #28]
   1de44:	cmp	r3, #0
   1de48:	bne	1e14c <__assert_fail@plt+0xc204>
   1de4c:	ldr	r2, [sp, #72]	; 0x48
   1de50:	adds	r3, fp, #0
   1de54:	movne	r3, #1
   1de58:	cmp	r2, #0
   1de5c:	movne	r3, #0
   1de60:	cmp	r3, #0
   1de64:	strne	fp, [sp, #72]	; 0x48
   1de68:	movne	fp, #0
   1de6c:	bne	1dea8 <__assert_fail@plt+0xbf60>
   1de70:	cmp	fp, r7
   1de74:	movhi	r2, #39	; 0x27
   1de78:	ldrhi	r3, [sp, #32]
   1de7c:	strbhi	r2, [r3, r7]
   1de80:	add	r3, r7, #1
   1de84:	cmp	fp, r3
   1de88:	movhi	r1, #92	; 0x5c
   1de8c:	ldrhi	r2, [sp, #32]
   1de90:	strbhi	r1, [r2, r3]
   1de94:	add	r3, r7, #2
   1de98:	cmp	fp, r3
   1de9c:	movhi	r1, #39	; 0x27
   1dea0:	ldrhi	r2, [sp, #32]
   1dea4:	strbhi	r1, [r2, r3]
   1dea8:	ldr	r3, [sp, #28]
   1deac:	add	r7, r7, #3
   1deb0:	mov	r2, r5
   1deb4:	mov	r8, r3
   1deb8:	str	r5, [sp, #68]	; 0x44
   1debc:	str	r3, [sp, #40]	; 0x28
   1dec0:	mov	r4, #39	; 0x27
   1dec4:	b	1d2e8 <__assert_fail@plt+0xb3a0>
   1dec8:	ldr	r3, [sp, #56]	; 0x38
   1decc:	ldrb	r3, [r3, #1]
   1ded0:	adds	r3, r3, #0
   1ded4:	movne	r3, #1
   1ded8:	b	1d2c0 <__assert_fail@plt+0xb378>
   1dedc:	ldr	r5, [sp, #28]
   1dee0:	mov	r4, #48	; 0x30
   1dee4:	b	1d2e8 <__assert_fail@plt+0xb3a0>
   1dee8:	add	sl, sl, #1
   1deec:	b	1ce18 <__assert_fail@plt+0xaed0>
   1def0:	mov	sl, r3
   1def4:	ldr	r3, [sp, #28]
   1def8:	mov	r8, fp
   1defc:	str	r3, [sp, #44]	; 0x2c
   1df00:	ldr	r3, [sp, #152]	; 0x98
   1df04:	sub	r2, r3, #2
   1df08:	clz	r2, r2
   1df0c:	lsr	r2, r2, #5
   1df10:	b	1d528 <__assert_fail@plt+0xb5e0>
   1df14:	str	ip, [sp, #40]	; 0x28
   1df18:	ldr	r5, [sp, #48]	; 0x30
   1df1c:	b	1d358 <__assert_fail@plt+0xb410>
   1df20:	mov	r2, r9
   1df24:	mov	r8, r9
   1df28:	mov	r5, #0
   1df2c:	mov	r4, #63	; 0x3f
   1df30:	b	1d2e8 <__assert_fail@plt+0xb3a0>
   1df34:	cmp	fp, #0
   1df38:	beq	1dfb0 <__assert_fail@plt+0xc068>
   1df3c:	ldr	r1, [sp, #32]
   1df40:	mov	r3, #34	; 0x22
   1df44:	mov	r2, #1
   1df48:	strb	r3, [r1]
   1df4c:	ldr	r3, [pc, #332]	; 1e0a0 <__assert_fail@plt+0xc158>
   1df50:	str	r2, [sp, #52]	; 0x34
   1df54:	mov	r7, r2
   1df58:	str	r2, [sp, #44]	; 0x2c
   1df5c:	str	r3, [sp, #64]	; 0x40
   1df60:	b	1ce08 <__assert_fail@plt+0xaec0>
   1df64:	ldr	r3, [pc, #300]	; 1e098 <__assert_fail@plt+0xc150>
   1df68:	str	r3, [sp, #64]	; 0x40
   1df6c:	mov	r3, #0
   1df70:	str	r3, [sp, #28]
   1df74:	mov	r3, #1
   1df78:	str	r3, [sp, #52]	; 0x34
   1df7c:	mov	r7, r3
   1df80:	mov	r3, #2
   1df84:	str	r3, [sp, #152]	; 0x98
   1df88:	b	1ce08 <__assert_fail@plt+0xaec0>
   1df8c:	bl	11f24 <abort@plt>
   1df90:	ldr	r0, [sp, #56]	; 0x38
   1df94:	bl	11d50 <strlen@plt>
   1df98:	str	r0, [sp, #24]
   1df9c:	b	1dc74 <__assert_fail@plt+0xbd2c>
   1dfa0:	mov	r5, r8
   1dfa4:	mov	r4, #48	; 0x30
   1dfa8:	ldr	r8, [sp, #44]	; 0x2c
   1dfac:	b	1d2e8 <__assert_fail@plt+0xb3a0>
   1dfb0:	mov	r3, #1
   1dfb4:	str	r3, [sp, #52]	; 0x34
   1dfb8:	mov	r7, r3
   1dfbc:	str	r3, [sp, #44]	; 0x2c
   1dfc0:	ldr	r3, [pc, #216]	; 1e0a0 <__assert_fail@plt+0xc158>
   1dfc4:	str	r3, [sp, #64]	; 0x40
   1dfc8:	b	1ce08 <__assert_fail@plt+0xaec0>
   1dfcc:	ldr	sl, [sp, #32]
   1dfd0:	mov	r8, fp
   1dfd4:	mov	r2, r3
   1dfd8:	b	1d528 <__assert_fail@plt+0xb5e0>
   1dfdc:	mov	r3, r5
   1dfe0:	mov	r5, r2
   1dfe4:	b	1d7e0 <__assert_fail@plt+0xb898>
   1dfe8:	ldr	r1, [sp, #24]
   1dfec:	mov	r2, r5
   1dff0:	cmp	r1, r9
   1dff4:	mov	ip, r5
   1dff8:	ldr	r4, [sp, #80]	; 0x50
   1dffc:	ldr	r5, [sp, #92]	; 0x5c
   1e000:	ldr	r6, [sp, #84]	; 0x54
   1e004:	ldr	r7, [sp, #88]	; 0x58
   1e008:	bls	1e03c <__assert_fail@plt+0xc0f4>
   1e00c:	ldrb	r3, [r8]
   1e010:	cmp	r3, #0
   1e014:	bne	1e028 <__assert_fail@plt+0xc0e0>
   1e018:	b	1e040 <__assert_fail@plt+0xc0f8>
   1e01c:	ldrb	r3, [r8, #1]!
   1e020:	cmp	r3, #0
   1e024:	beq	1e140 <__assert_fail@plt+0xc1f8>
   1e028:	add	r2, r2, #1
   1e02c:	add	r3, sl, r2
   1e030:	cmp	r1, r3
   1e034:	bhi	1e01c <__assert_fail@plt+0xc0d4>
   1e038:	mov	ip, r2
   1e03c:	mov	r3, #0
   1e040:	mov	r2, r3
   1e044:	b	1dad8 <__assert_fail@plt+0xbb90>
   1e048:	mov	r3, #0
   1e04c:	mov	ip, r5
   1e050:	ldr	r4, [sp, #80]	; 0x50
   1e054:	ldr	r5, [sp, #92]	; 0x5c
   1e058:	ldr	r6, [sp, #84]	; 0x54
   1e05c:	ldr	r7, [sp, #88]	; 0x58
   1e060:	mov	r2, r3
   1e064:	b	1dad8 <__assert_fail@plt+0xbb90>
   1e068:	mov	r3, r6
   1e06c:	mov	ip, r5
   1e070:	eor	r5, r3, #1
   1e074:	mov	r2, r6
   1e078:	ldr	r4, [sp, #80]	; 0x50
   1e07c:	ldr	r6, [sp, #84]	; 0x54
   1e080:	ldr	r7, [sp, #88]	; 0x58
   1e084:	uxtb	r5, r5
   1e088:	b	1dad8 <__assert_fail@plt+0xbb90>
   1e08c:	ldr	sl, [sp, #32]
   1e090:	mov	r8, fp
   1e094:	b	1defc <__assert_fail@plt+0xbfb4>
   1e098:	andeq	r4, r2, ip, lsr r6
   1e09c:	andeq	r4, r2, r0, asr #12
   1e0a0:	andeq	r4, r2, r8, lsr r6
   1e0a4:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   1e0a8:	ldr	r2, [sp, #56]	; 0x38
   1e0ac:	ldrb	r1, [r2, r3]
   1e0b0:	sub	r2, r1, #33	; 0x21
   1e0b4:	uxtb	r2, r2
   1e0b8:	cmp	r2, #29
   1e0bc:	bhi	1e15c <__assert_fail@plt+0xc214>
   1e0c0:	ldr	r0, [pc, #-36]	; 1e0a4 <__assert_fail@plt+0xc15c>
   1e0c4:	mov	ip, #1
   1e0c8:	ands	r2, r0, ip, lsl r2
   1e0cc:	beq	1e16c <__assert_fail@plt+0xc224>
   1e0d0:	ldr	r2, [sp, #28]
   1e0d4:	cmp	r2, #0
   1e0d8:	bne	1e26c <__assert_fail@plt+0xc324>
   1e0dc:	cmp	fp, r7
   1e0e0:	ldr	r8, [sp, #28]
   1e0e4:	ldrhi	r2, [sp, #32]
   1e0e8:	mov	sl, r3
   1e0ec:	mov	r5, r8
   1e0f0:	strbhi	r4, [r2, r7]
   1e0f4:	add	r2, r7, #1
   1e0f8:	cmp	fp, r2
   1e0fc:	movhi	r0, #34	; 0x22
   1e100:	ldrhi	ip, [sp, #32]
   1e104:	mov	r4, r1
   1e108:	strbhi	r0, [ip, r2]
   1e10c:	add	r2, r7, #2
   1e110:	cmp	fp, r2
   1e114:	movhi	r0, #34	; 0x22
   1e118:	ldrhi	ip, [sp, #32]
   1e11c:	strbhi	r0, [ip, r2]
   1e120:	add	r2, r7, #3
   1e124:	cmp	fp, r2
   1e128:	movhi	r0, #63	; 0x3f
   1e12c:	ldrhi	ip, [sp, #32]
   1e130:	add	r7, r7, #4
   1e134:	strbhi	r0, [ip, r2]
   1e138:	mov	r2, r8
   1e13c:	b	1d2e8 <__assert_fail@plt+0xb3a0>
   1e140:	mov	ip, r2
   1e144:	mov	r2, r3
   1e148:	b	1dad8 <__assert_fail@plt+0xbb90>
   1e14c:	ldr	sl, [sp, #32]
   1e150:	mov	r8, fp
   1e154:	ldr	r2, [sp, #28]
   1e158:	b	1d528 <__assert_fail@plt+0xb5e0>
   1e15c:	mov	r2, #0
   1e160:	mov	r8, r2
   1e164:	mov	r5, r2
   1e168:	b	1d2e8 <__assert_fail@plt+0xb3a0>
   1e16c:	mov	r8, r2
   1e170:	mov	r5, #0
   1e174:	b	1d2e8 <__assert_fail@plt+0xb3a0>
   1e178:	ldr	r1, [sp, #152]	; 0x98
   1e17c:	bl	1cc44 <__assert_fail@plt+0xacfc>
   1e180:	str	r0, [sp, #168]	; 0xa8
   1e184:	b	1d1a4 <__assert_fail@plt+0xb25c>
   1e188:	ldr	r1, [sp, #152]	; 0x98
   1e18c:	bl	1cc44 <__assert_fail@plt+0xacfc>
   1e190:	str	r0, [sp, #164]	; 0xa4
   1e194:	b	1d184 <__assert_fail@plt+0xb23c>
   1e198:	ldr	r7, [sp, #28]
   1e19c:	b	1d1e4 <__assert_fail@plt+0xb29c>
   1e1a0:	ldr	sl, [sp, #32]
   1e1a4:	ldr	r2, [sp, #68]	; 0x44
   1e1a8:	mov	r8, fp
   1e1ac:	mov	fp, r7
   1e1b0:	ldr	r3, [sp, #64]	; 0x40
   1e1b4:	cmp	r3, #0
   1e1b8:	moveq	r2, #0
   1e1bc:	andne	r2, r2, #1
   1e1c0:	cmp	r2, #0
   1e1c4:	beq	1e1f0 <__assert_fail@plt+0xc2a8>
   1e1c8:	mov	r2, r3
   1e1cc:	ldrb	r3, [r3]
   1e1d0:	cmp	r3, #0
   1e1d4:	beq	1e1f0 <__assert_fail@plt+0xc2a8>
   1e1d8:	cmp	r8, fp
   1e1dc:	strbhi	r3, [sl, fp]
   1e1e0:	ldrb	r3, [r2, #1]!
   1e1e4:	add	fp, fp, #1
   1e1e8:	cmp	r3, #0
   1e1ec:	bne	1e1d8 <__assert_fail@plt+0xc290>
   1e1f0:	cmp	r8, fp
   1e1f4:	movhi	r3, #0
   1e1f8:	strbhi	r3, [sl, fp]
   1e1fc:	b	1d584 <__assert_fail@plt+0xb63c>
   1e200:	ldr	r3, [sp, #168]	; 0xa8
   1e204:	ldr	sl, [sp, #32]
   1e208:	str	r3, [sp, #16]
   1e20c:	ldr	r3, [sp, #164]	; 0xa4
   1e210:	mov	ip, #5
   1e214:	str	r3, [sp, #12]
   1e218:	ldr	r3, [sp, #160]	; 0xa0
   1e21c:	ldr	r2, [sp, #56]	; 0x38
   1e220:	str	r3, [sp, #8]
   1e224:	ldr	r3, [sp, #156]	; 0x9c
   1e228:	ldr	r1, [sp, #72]	; 0x48
   1e22c:	str	r3, [sp, #4]
   1e230:	mov	r0, sl
   1e234:	ldr	r3, [sp, #24]
   1e238:	str	ip, [sp]
   1e23c:	bl	1cd64 <__assert_fail@plt+0xae1c>
   1e240:	mov	fp, r0
   1e244:	b	1d584 <__assert_fail@plt+0xb63c>
   1e248:	mov	r8, fp
   1e24c:	ldr	sl, [sp, #32]
   1e250:	mov	fp, r7
   1e254:	mov	r2, r3
   1e258:	b	1e1b0 <__assert_fail@plt+0xc268>
   1e25c:	mov	r8, fp
   1e260:	ldr	sl, [sp, #32]
   1e264:	mov	fp, r7
   1e268:	b	1e1b0 <__assert_fail@plt+0xc268>
   1e26c:	ldr	sl, [sp, #32]
   1e270:	mov	r8, fp
   1e274:	b	1d540 <__assert_fail@plt+0xb5f8>
   1e278:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e27c:	sub	sp, sp, #52	; 0x34
   1e280:	mov	r4, r0
   1e284:	mov	r5, r3
   1e288:	mov	sl, r1
   1e28c:	mov	fp, r2
   1e290:	bl	11d74 <__errno_location@plt>
   1e294:	ldr	r7, [pc, #412]	; 1e438 <__assert_fail@plt+0xc4f0>
   1e298:	cmn	r4, #-2147483647	; 0x80000001
   1e29c:	ldr	r6, [r7]
   1e2a0:	mov	r8, r0
   1e2a4:	movne	r0, #0
   1e2a8:	moveq	r0, #1
   1e2ac:	ldr	r3, [r8]
   1e2b0:	orrs	r0, r0, r4, lsr #31
   1e2b4:	str	r3, [sp, #24]
   1e2b8:	bne	1e434 <__assert_fail@plt+0xc4ec>
   1e2bc:	ldr	r2, [r7, #4]
   1e2c0:	cmp	r4, r2
   1e2c4:	blt	1e324 <__assert_fail@plt+0xc3dc>
   1e2c8:	add	r9, r7, #8
   1e2cc:	cmp	r6, r9
   1e2d0:	str	r2, [sp, #44]	; 0x2c
   1e2d4:	beq	1e404 <__assert_fail@plt+0xc4bc>
   1e2d8:	mov	r3, #8
   1e2dc:	sub	r2, r4, r2
   1e2e0:	mov	r0, r6
   1e2e4:	str	r3, [sp]
   1e2e8:	add	r2, r2, #1
   1e2ec:	mvn	r3, #-2147483648	; 0x80000000
   1e2f0:	add	r1, sp, #44	; 0x2c
   1e2f4:	bl	201d4 <__assert_fail@plt+0xe28c>
   1e2f8:	mov	r6, r0
   1e2fc:	str	r0, [r7]
   1e300:	ldr	r0, [r7, #4]
   1e304:	ldr	r2, [sp, #44]	; 0x2c
   1e308:	mov	r1, #0
   1e30c:	sub	r2, r2, r0
   1e310:	add	r0, r6, r0, lsl #3
   1e314:	lsl	r2, r2, #3
   1e318:	bl	11d98 <memset@plt>
   1e31c:	ldr	r3, [sp, #44]	; 0x2c
   1e320:	str	r3, [r7, #4]
   1e324:	add	r3, r6, r4, lsl #3
   1e328:	ldr	r1, [r5, #4]
   1e32c:	ldr	r7, [r3, #4]
   1e330:	ldr	r9, [r6, r4, lsl #3]
   1e334:	ldr	r2, [r5, #40]	; 0x28
   1e338:	ldr	ip, [r5, #44]	; 0x2c
   1e33c:	add	r0, r5, #8
   1e340:	str	r3, [sp, #28]
   1e344:	ldr	r3, [r5]
   1e348:	orr	r1, r1, #1
   1e34c:	mov	lr, r0
   1e350:	str	r1, [sp, #32]
   1e354:	str	r0, [sp, #36]	; 0x24
   1e358:	str	r1, [sp, #4]
   1e35c:	str	r2, [sp, #12]
   1e360:	str	r3, [sp]
   1e364:	mov	r0, r7
   1e368:	mov	r1, r9
   1e36c:	str	ip, [sp, #16]
   1e370:	str	lr, [sp, #8]
   1e374:	mov	r3, fp
   1e378:	mov	r2, sl
   1e37c:	bl	1cd64 <__assert_fail@plt+0xae1c>
   1e380:	cmp	r9, r0
   1e384:	bhi	1e3f0 <__assert_fail@plt+0xc4a8>
   1e388:	ldr	r3, [pc, #172]	; 1e43c <__assert_fail@plt+0xc4f4>
   1e38c:	add	r9, r0, #1
   1e390:	cmp	r7, r3
   1e394:	str	r9, [r6, r4, lsl #3]
   1e398:	beq	1e3a4 <__assert_fail@plt+0xc45c>
   1e39c:	mov	r0, r7
   1e3a0:	bl	1afe8 <__assert_fail@plt+0x90a0>
   1e3a4:	mov	r0, r9
   1e3a8:	bl	20070 <__assert_fail@plt+0xe128>
   1e3ac:	ldr	lr, [sp, #28]
   1e3b0:	ldr	ip, [r5, #44]	; 0x2c
   1e3b4:	ldr	r4, [r5, #40]	; 0x28
   1e3b8:	mov	r3, fp
   1e3bc:	mov	r2, sl
   1e3c0:	mov	r1, r9
   1e3c4:	str	r0, [lr, #4]
   1e3c8:	ldr	lr, [r5]
   1e3cc:	ldr	r5, [sp, #36]	; 0x24
   1e3d0:	str	ip, [sp, #16]
   1e3d4:	str	r5, [sp, #8]
   1e3d8:	ldr	r5, [sp, #32]
   1e3dc:	str	r4, [sp, #12]
   1e3e0:	str	r5, [sp, #4]
   1e3e4:	str	lr, [sp]
   1e3e8:	mov	r7, r0
   1e3ec:	bl	1cd64 <__assert_fail@plt+0xae1c>
   1e3f0:	ldr	r3, [sp, #24]
   1e3f4:	mov	r0, r7
   1e3f8:	str	r3, [r8]
   1e3fc:	add	sp, sp, #52	; 0x34
   1e400:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e404:	mov	r3, #8
   1e408:	sub	r2, r4, r2
   1e40c:	str	r3, [sp]
   1e410:	add	r1, sp, #44	; 0x2c
   1e414:	add	r2, r2, #1
   1e418:	mvn	r3, #-2147483648	; 0x80000000
   1e41c:	bl	201d4 <__assert_fail@plt+0xe28c>
   1e420:	mov	r6, r0
   1e424:	ldm	r9, {r0, r1}
   1e428:	str	r6, [r7]
   1e42c:	stm	r6, {r0, r1}
   1e430:	b	1e300 <__assert_fail@plt+0xc3b8>
   1e434:	bl	11f24 <abort@plt>
   1e438:	andeq	r5, r3, r4, ror r2
   1e43c:	ldrdeq	r5, [r3], -r0
   1e440:	push	{r4, r5, r6, lr}
   1e444:	mov	r5, r0
   1e448:	bl	11d74 <__errno_location@plt>
   1e44c:	cmp	r5, #0
   1e450:	mov	r1, #48	; 0x30
   1e454:	mov	r4, r0
   1e458:	ldr	r0, [pc, #16]	; 1e470 <__assert_fail@plt+0xc528>
   1e45c:	ldr	r6, [r4]
   1e460:	movne	r0, r5
   1e464:	bl	204d0 <__assert_fail@plt+0xe588>
   1e468:	str	r6, [r4]
   1e46c:	pop	{r4, r5, r6, pc}
   1e470:	ldrdeq	r5, [r3], -r0
   1e474:	ldr	r3, [pc, #12]	; 1e488 <__assert_fail@plt+0xc540>
   1e478:	cmp	r0, #0
   1e47c:	moveq	r0, r3
   1e480:	ldr	r0, [r0]
   1e484:	bx	lr
   1e488:	ldrdeq	r5, [r3], -r0
   1e48c:	ldr	r3, [pc, #12]	; 1e4a0 <__assert_fail@plt+0xc558>
   1e490:	cmp	r0, #0
   1e494:	moveq	r0, r3
   1e498:	str	r1, [r0]
   1e49c:	bx	lr
   1e4a0:	ldrdeq	r5, [r3], -r0
   1e4a4:	ldr	r3, [pc, #52]	; 1e4e0 <__assert_fail@plt+0xc598>
   1e4a8:	cmp	r0, #0
   1e4ac:	moveq	r0, r3
   1e4b0:	add	r3, r0, #8
   1e4b4:	push	{lr}		; (str lr, [sp, #-4]!)
   1e4b8:	lsr	lr, r1, #5
   1e4bc:	and	r1, r1, #31
   1e4c0:	ldr	ip, [r3, lr, lsl #2]
   1e4c4:	lsr	r0, ip, r1
   1e4c8:	eor	r2, r2, r0
   1e4cc:	and	r2, r2, #1
   1e4d0:	and	r0, r0, #1
   1e4d4:	eor	r1, ip, r2, lsl r1
   1e4d8:	str	r1, [r3, lr, lsl #2]
   1e4dc:	pop	{pc}		; (ldr pc, [sp], #4)
   1e4e0:	ldrdeq	r5, [r3], -r0
   1e4e4:	ldr	r3, [pc, #16]	; 1e4fc <__assert_fail@plt+0xc5b4>
   1e4e8:	cmp	r0, #0
   1e4ec:	movne	r3, r0
   1e4f0:	ldr	r0, [r3, #4]
   1e4f4:	str	r1, [r3, #4]
   1e4f8:	bx	lr
   1e4fc:	ldrdeq	r5, [r3], -r0
   1e500:	ldr	r3, [pc, #44]	; 1e534 <__assert_fail@plt+0xc5ec>
   1e504:	cmp	r0, #0
   1e508:	moveq	r0, r3
   1e50c:	mov	ip, #10
   1e510:	cmp	r2, #0
   1e514:	cmpne	r1, #0
   1e518:	str	ip, [r0]
   1e51c:	beq	1e52c <__assert_fail@plt+0xc5e4>
   1e520:	str	r1, [r0, #40]	; 0x28
   1e524:	str	r2, [r0, #44]	; 0x2c
   1e528:	bx	lr
   1e52c:	push	{r4, lr}
   1e530:	bl	11f24 <abort@plt>
   1e534:	ldrdeq	r5, [r3], -r0
   1e538:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1e53c:	sub	sp, sp, #24
   1e540:	ldr	ip, [pc, #108]	; 1e5b4 <__assert_fail@plt+0xc66c>
   1e544:	ldr	r4, [sp, #56]	; 0x38
   1e548:	mov	r9, r2
   1e54c:	cmp	r4, #0
   1e550:	moveq	r4, ip
   1e554:	mov	sl, r3
   1e558:	mov	r7, r0
   1e55c:	mov	r8, r1
   1e560:	bl	11d74 <__errno_location@plt>
   1e564:	ldr	r3, [r4, #44]	; 0x2c
   1e568:	mov	r1, r8
   1e56c:	ldr	r6, [r0]
   1e570:	str	r3, [sp, #16]
   1e574:	ldr	r2, [r4, #40]	; 0x28
   1e578:	add	r3, r4, #8
   1e57c:	str	r3, [sp, #8]
   1e580:	str	r2, [sp, #12]
   1e584:	ldr	r2, [r4, #4]
   1e588:	mov	r5, r0
   1e58c:	str	r2, [sp, #4]
   1e590:	ldr	ip, [r4]
   1e594:	mov	r3, sl
   1e598:	mov	r2, r9
   1e59c:	mov	r0, r7
   1e5a0:	str	ip, [sp]
   1e5a4:	bl	1cd64 <__assert_fail@plt+0xae1c>
   1e5a8:	str	r6, [r5]
   1e5ac:	add	sp, sp, #24
   1e5b0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1e5b4:	ldrdeq	r5, [r3], -r0
   1e5b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e5bc:	cmp	r3, #0
   1e5c0:	sub	sp, sp, #44	; 0x2c
   1e5c4:	ldr	r4, [pc, #192]	; 1e68c <__assert_fail@plt+0xc744>
   1e5c8:	mov	r6, r2
   1e5cc:	movne	r4, r3
   1e5d0:	mov	r9, r1
   1e5d4:	mov	r8, r0
   1e5d8:	bl	11d74 <__errno_location@plt>
   1e5dc:	ldr	r3, [r4, #44]	; 0x2c
   1e5e0:	ldr	r5, [r4, #4]
   1e5e4:	add	sl, r4, #8
   1e5e8:	cmp	r6, #0
   1e5ec:	orreq	r5, r5, #1
   1e5f0:	mov	r1, #0
   1e5f4:	ldr	r2, [r0]
   1e5f8:	str	r3, [sp, #16]
   1e5fc:	ldr	r3, [r4, #40]	; 0x28
   1e600:	stmib	sp, {r5, sl}
   1e604:	str	r3, [sp, #12]
   1e608:	ldr	r3, [r4]
   1e60c:	mov	r7, r0
   1e610:	str	r2, [sp, #28]
   1e614:	str	r3, [sp]
   1e618:	mov	r2, r8
   1e61c:	mov	r3, r9
   1e620:	mov	r0, r1
   1e624:	bl	1cd64 <__assert_fail@plt+0xae1c>
   1e628:	add	r1, r0, #1
   1e62c:	mov	fp, r0
   1e630:	mov	r0, r1
   1e634:	str	r1, [sp, #36]	; 0x24
   1e638:	bl	20070 <__assert_fail@plt+0xe128>
   1e63c:	ldr	r3, [r4, #44]	; 0x2c
   1e640:	mov	r2, r8
   1e644:	str	r3, [sp, #16]
   1e648:	ldr	r3, [r4, #40]	; 0x28
   1e64c:	str	r5, [sp, #4]
   1e650:	str	r3, [sp, #12]
   1e654:	str	sl, [sp, #8]
   1e658:	ldr	ip, [r4]
   1e65c:	ldr	r1, [sp, #36]	; 0x24
   1e660:	mov	r3, r9
   1e664:	str	ip, [sp]
   1e668:	str	r0, [sp, #32]
   1e66c:	bl	1cd64 <__assert_fail@plt+0xae1c>
   1e670:	ldr	r2, [sp, #28]
   1e674:	cmp	r6, #0
   1e678:	str	r2, [r7]
   1e67c:	ldr	r0, [sp, #32]
   1e680:	strne	fp, [r6]
   1e684:	add	sp, sp, #44	; 0x2c
   1e688:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e68c:	ldrdeq	r5, [r3], -r0
   1e690:	mov	r3, r2
   1e694:	mov	r2, #0
   1e698:	b	1e5b8 <__assert_fail@plt+0xc670>
   1e69c:	push	{r4, r5, r6, r7, r8, lr}
   1e6a0:	ldr	r6, [pc, #116]	; 1e71c <__assert_fail@plt+0xc7d4>
   1e6a4:	ldr	r3, [r6, #4]
   1e6a8:	ldr	r7, [r6]
   1e6ac:	cmp	r3, #1
   1e6b0:	movgt	r5, r7
   1e6b4:	movgt	r4, #1
   1e6b8:	ble	1e6d8 <__assert_fail@plt+0xc790>
   1e6bc:	ldr	r0, [r5, #12]
   1e6c0:	bl	1afe8 <__assert_fail@plt+0x90a0>
   1e6c4:	ldr	r3, [r6, #4]
   1e6c8:	add	r4, r4, #1
   1e6cc:	cmp	r3, r4
   1e6d0:	add	r5, r5, #8
   1e6d4:	bgt	1e6bc <__assert_fail@plt+0xc774>
   1e6d8:	ldr	r0, [r7, #4]
   1e6dc:	ldr	r4, [pc, #60]	; 1e720 <__assert_fail@plt+0xc7d8>
   1e6e0:	cmp	r0, r4
   1e6e4:	beq	1e6f8 <__assert_fail@plt+0xc7b0>
   1e6e8:	bl	1afe8 <__assert_fail@plt+0x90a0>
   1e6ec:	mov	r3, #256	; 0x100
   1e6f0:	str	r4, [r6, #12]
   1e6f4:	str	r3, [r6, #8]
   1e6f8:	ldr	r4, [pc, #36]	; 1e724 <__assert_fail@plt+0xc7dc>
   1e6fc:	cmp	r7, r4
   1e700:	beq	1e710 <__assert_fail@plt+0xc7c8>
   1e704:	mov	r0, r7
   1e708:	bl	1afe8 <__assert_fail@plt+0x90a0>
   1e70c:	str	r4, [r6]
   1e710:	mov	r3, #1
   1e714:	str	r3, [r6, #4]
   1e718:	pop	{r4, r5, r6, r7, r8, pc}
   1e71c:	andeq	r5, r3, r4, ror r2
   1e720:	ldrdeq	r5, [r3], -r0
   1e724:	andeq	r5, r3, ip, ror r2
   1e728:	ldr	r3, [pc, #4]	; 1e734 <__assert_fail@plt+0xc7ec>
   1e72c:	mvn	r2, #0
   1e730:	b	1e278 <__assert_fail@plt+0xc330>
   1e734:	ldrdeq	r5, [r3], -r0
   1e738:	ldr	r3, [pc]	; 1e740 <__assert_fail@plt+0xc7f8>
   1e73c:	b	1e278 <__assert_fail@plt+0xc330>
   1e740:	ldrdeq	r5, [r3], -r0
   1e744:	mov	r1, r0
   1e748:	ldr	r3, [pc, #8]	; 1e758 <__assert_fail@plt+0xc810>
   1e74c:	mvn	r2, #0
   1e750:	mov	r0, #0
   1e754:	b	1e278 <__assert_fail@plt+0xc330>
   1e758:	ldrdeq	r5, [r3], -r0
   1e75c:	mov	r2, r1
   1e760:	ldr	r3, [pc, #8]	; 1e770 <__assert_fail@plt+0xc828>
   1e764:	mov	r1, r0
   1e768:	mov	r0, #0
   1e76c:	b	1e278 <__assert_fail@plt+0xc330>
   1e770:	ldrdeq	r5, [r3], -r0
   1e774:	push	{r4, r5, lr}
   1e778:	sub	sp, sp, #52	; 0x34
   1e77c:	mov	r5, r2
   1e780:	mov	r4, r0
   1e784:	mov	r0, sp
   1e788:	bl	1cc14 <__assert_fail@plt+0xaccc>
   1e78c:	mov	r3, sp
   1e790:	mov	r1, r5
   1e794:	mov	r0, r4
   1e798:	mvn	r2, #0
   1e79c:	bl	1e278 <__assert_fail@plt+0xc330>
   1e7a0:	add	sp, sp, #52	; 0x34
   1e7a4:	pop	{r4, r5, pc}
   1e7a8:	push	{r4, r5, r6, lr}
   1e7ac:	sub	sp, sp, #48	; 0x30
   1e7b0:	mov	r5, r2
   1e7b4:	mov	r6, r3
   1e7b8:	mov	r4, r0
   1e7bc:	mov	r0, sp
   1e7c0:	bl	1cc14 <__assert_fail@plt+0xaccc>
   1e7c4:	mov	r3, sp
   1e7c8:	mov	r2, r6
   1e7cc:	mov	r1, r5
   1e7d0:	mov	r0, r4
   1e7d4:	bl	1e278 <__assert_fail@plt+0xc330>
   1e7d8:	add	sp, sp, #48	; 0x30
   1e7dc:	pop	{r4, r5, r6, pc}
   1e7e0:	mov	r2, r1
   1e7e4:	mov	r1, r0
   1e7e8:	mov	r0, #0
   1e7ec:	b	1e774 <__assert_fail@plt+0xc82c>
   1e7f0:	mov	r3, r2
   1e7f4:	mov	r2, r1
   1e7f8:	mov	r1, r0
   1e7fc:	mov	r0, #0
   1e800:	b	1e7a8 <__assert_fail@plt+0xc860>
   1e804:	push	{r4, r5, r6, r7, r8, lr}
   1e808:	mov	r7, r0
   1e80c:	ldr	lr, [pc, #100]	; 1e878 <__assert_fail@plt+0xc930>
   1e810:	mov	r8, r1
   1e814:	mov	r4, r2
   1e818:	ldm	lr!, {r0, r1, r2, r3}
   1e81c:	sub	sp, sp, #48	; 0x30
   1e820:	mov	ip, sp
   1e824:	lsr	r5, r4, #5
   1e828:	stmia	ip!, {r0, r1, r2, r3}
   1e82c:	add	r6, sp, #8
   1e830:	ldm	lr!, {r0, r1, r2, r3}
   1e834:	and	r4, r4, #31
   1e838:	stmia	ip!, {r0, r1, r2, r3}
   1e83c:	ldm	lr, {r0, r1, r2, r3}
   1e840:	stm	ip, {r0, r1, r2, r3}
   1e844:	mov	r2, r8
   1e848:	ldr	lr, [r6, r5, lsl #2]
   1e84c:	mov	r1, r7
   1e850:	mov	r3, sp
   1e854:	lsr	ip, lr, r4
   1e858:	eor	ip, ip, #1
   1e85c:	and	ip, ip, #1
   1e860:	mov	r0, #0
   1e864:	eor	r4, lr, ip, lsl r4
   1e868:	str	r4, [r6, r5, lsl #2]
   1e86c:	bl	1e278 <__assert_fail@plt+0xc330>
   1e870:	add	sp, sp, #48	; 0x30
   1e874:	pop	{r4, r5, r6, r7, r8, pc}
   1e878:	ldrdeq	r5, [r3], -r0
   1e87c:	mov	r2, r1
   1e880:	mvn	r1, #0
   1e884:	b	1e804 <__assert_fail@plt+0xc8bc>
   1e888:	mov	r2, #58	; 0x3a
   1e88c:	mvn	r1, #0
   1e890:	b	1e804 <__assert_fail@plt+0xc8bc>
   1e894:	mov	r2, #58	; 0x3a
   1e898:	b	1e804 <__assert_fail@plt+0xc8bc>
   1e89c:	push	{r4, r5, r6, r7, lr}
   1e8a0:	sub	sp, sp, #100	; 0x64
   1e8a4:	mov	r6, r0
   1e8a8:	mov	r0, sp
   1e8ac:	mov	r7, r2
   1e8b0:	bl	1cc14 <__assert_fail@plt+0xaccc>
   1e8b4:	mov	ip, sp
   1e8b8:	add	lr, sp, #48	; 0x30
   1e8bc:	ldm	ip!, {r0, r1, r2, r3}
   1e8c0:	stmia	lr!, {r0, r1, r2, r3}
   1e8c4:	ldm	ip!, {r0, r1, r2, r3}
   1e8c8:	ldr	r5, [sp, #60]	; 0x3c
   1e8cc:	stmia	lr!, {r0, r1, r2, r3}
   1e8d0:	mvn	r4, r5
   1e8d4:	ldm	ip, {r0, r1, r2, r3}
   1e8d8:	and	ip, r4, #67108864	; 0x4000000
   1e8dc:	eor	ip, ip, r5
   1e8e0:	str	ip, [sp, #60]	; 0x3c
   1e8e4:	stm	lr, {r0, r1, r2, r3}
   1e8e8:	mov	r1, r7
   1e8ec:	mov	r0, r6
   1e8f0:	add	r3, sp, #48	; 0x30
   1e8f4:	mvn	r2, #0
   1e8f8:	bl	1e278 <__assert_fail@plt+0xc330>
   1e8fc:	add	sp, sp, #100	; 0x64
   1e900:	pop	{r4, r5, r6, r7, pc}
   1e904:	push	{r4, r5, r6, r7, r8, lr}
   1e908:	mov	r5, r1
   1e90c:	ldr	lr, [pc, #100]	; 1e978 <__assert_fail@plt+0xca30>
   1e910:	mov	r4, r2
   1e914:	mov	r7, r0
   1e918:	mov	r8, r3
   1e91c:	ldm	lr!, {r0, r1, r2, r3}
   1e920:	sub	sp, sp, #48	; 0x30
   1e924:	mov	ip, sp
   1e928:	mov	r6, #10
   1e92c:	stmia	ip!, {r0, r1, r2, r3}
   1e930:	cmp	r4, #0
   1e934:	cmpne	r5, #0
   1e938:	ldm	lr!, {r0, r1, r2, r3}
   1e93c:	str	r6, [sp]
   1e940:	stmia	ip!, {r0, r1, r2, r3}
   1e944:	ldm	lr, {r0, r1, r2, r3}
   1e948:	stm	ip, {r0, r1, r2, r3}
   1e94c:	beq	1e974 <__assert_fail@plt+0xca2c>
   1e950:	mov	r3, sp
   1e954:	mov	r1, r8
   1e958:	mov	r0, r7
   1e95c:	ldr	r2, [sp, #72]	; 0x48
   1e960:	str	r5, [sp, #40]	; 0x28
   1e964:	str	r4, [sp, #44]	; 0x2c
   1e968:	bl	1e278 <__assert_fail@plt+0xc330>
   1e96c:	add	sp, sp, #48	; 0x30
   1e970:	pop	{r4, r5, r6, r7, r8, pc}
   1e974:	bl	11f24 <abort@plt>
   1e978:	ldrdeq	r5, [r3], -r0
   1e97c:	push	{lr}		; (str lr, [sp, #-4]!)
   1e980:	sub	sp, sp, #12
   1e984:	mvn	ip, #0
   1e988:	str	ip, [sp]
   1e98c:	bl	1e904 <__assert_fail@plt+0xc9bc>
   1e990:	add	sp, sp, #12
   1e994:	pop	{pc}		; (ldr pc, [sp], #4)
   1e998:	push	{lr}		; (str lr, [sp, #-4]!)
   1e99c:	sub	sp, sp, #12
   1e9a0:	mvn	ip, #0
   1e9a4:	mov	r3, r2
   1e9a8:	str	ip, [sp]
   1e9ac:	mov	r2, r1
   1e9b0:	mov	r1, r0
   1e9b4:	mov	r0, #0
   1e9b8:	bl	1e904 <__assert_fail@plt+0xc9bc>
   1e9bc:	add	sp, sp, #12
   1e9c0:	pop	{pc}		; (ldr pc, [sp], #4)
   1e9c4:	push	{lr}		; (str lr, [sp, #-4]!)
   1e9c8:	sub	sp, sp, #12
   1e9cc:	str	r3, [sp]
   1e9d0:	mov	r3, r2
   1e9d4:	mov	r2, r1
   1e9d8:	mov	r1, r0
   1e9dc:	mov	r0, #0
   1e9e0:	bl	1e904 <__assert_fail@plt+0xc9bc>
   1e9e4:	add	sp, sp, #12
   1e9e8:	pop	{pc}		; (ldr pc, [sp], #4)
   1e9ec:	ldr	r3, [pc]	; 1e9f4 <__assert_fail@plt+0xcaac>
   1e9f0:	b	1e278 <__assert_fail@plt+0xc330>
   1e9f4:	andeq	r5, r3, r4, lsl #5
   1e9f8:	mov	r2, r1
   1e9fc:	ldr	r3, [pc, #8]	; 1ea0c <__assert_fail@plt+0xcac4>
   1ea00:	mov	r1, r0
   1ea04:	mov	r0, #0
   1ea08:	b	1e278 <__assert_fail@plt+0xc330>
   1ea0c:	andeq	r5, r3, r4, lsl #5
   1ea10:	ldr	r3, [pc, #4]	; 1ea1c <__assert_fail@plt+0xcad4>
   1ea14:	mvn	r2, #0
   1ea18:	b	1e278 <__assert_fail@plt+0xc330>
   1ea1c:	andeq	r5, r3, r4, lsl #5
   1ea20:	mov	r1, r0
   1ea24:	ldr	r3, [pc, #8]	; 1ea34 <__assert_fail@plt+0xcaec>
   1ea28:	mvn	r2, #0
   1ea2c:	mov	r0, #0
   1ea30:	b	1e278 <__assert_fail@plt+0xc330>
   1ea34:	andeq	r5, r3, r4, lsl #5
   1ea38:	subs	r5, r0, #0
   1ea3c:	push	{r7, lr}
   1ea40:	beq	1ea90 <__assert_fail@plt+0xcb48>
   1ea44:	ldr	r3, [pc, #72]	; 1ea94 <__assert_fail@plt+0xcb4c>
   1ea48:	ldr	r6, [r3]
   1ea4c:	bl	11d74 <__errno_location@plt>
   1ea50:	mov	r2, #5
   1ea54:	ldr	r4, [r0]
   1ea58:	cmp	r4, #0
   1ea5c:	moveq	r0, r4
   1ea60:	ldreq	r1, [pc, #48]	; 1ea98 <__assert_fail@plt+0xcb50>
   1ea64:	ldrne	r1, [pc, #48]	; 1ea9c <__assert_fail@plt+0xcb54>
   1ea68:	movne	r0, #0
   1ea6c:	bl	11b58 <dcgettext@plt>
   1ea70:	mov	r7, r0
   1ea74:	mov	r0, r5
   1ea78:	bl	1ea20 <__assert_fail@plt+0xcad8>
   1ea7c:	mov	r2, r7
   1ea80:	mov	r1, r4
   1ea84:	mov	r3, r0
   1ea88:	mov	r0, r6
   1ea8c:	bl	11c90 <error@plt>
   1ea90:	bl	11f24 <abort@plt>
   1ea94:	andeq	r5, r3, r0, ror r2
   1ea98:	andeq	r4, r2, r0, lsr #13
   1ea9c:			; <UNDEFINED> instruction: 0x000246b0
   1eaa0:	push	{r4, r5, r6, lr}
   1eaa4:	mvn	r2, #0
   1eaa8:	ldr	r5, [r0]
   1eaac:	mov	r4, r0
   1eab0:	ldr	r1, [pc, #28]	; 1ead4 <__assert_fail@plt+0xcb8c>
   1eab4:	bl	11e4c <__explicit_bzero_chk@plt>
   1eab8:	mov	r0, r4
   1eabc:	bl	1afe8 <__assert_fail@plt+0x90a0>
   1eac0:	subs	r0, r5, #0
   1eac4:	beq	1ead0 <__assert_fail@plt+0xcb88>
   1eac8:	pop	{r4, r5, r6, lr}
   1eacc:	b	1a9e4 <__assert_fail@plt+0x8a9c>
   1ead0:	pop	{r4, r5, r6, pc}
   1ead4:	andeq	r0, r0, ip, lsl r8
   1ead8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1eadc:	subs	r5, r1, #0
   1eae0:	beq	1eb40 <__assert_fail@plt+0xcbf8>
   1eae4:	cmp	r0, #0
   1eae8:	mov	r4, r0
   1eaec:	beq	1eb60 <__assert_fail@plt+0xcc18>
   1eaf0:	ldr	r1, [pc, #272]	; 1ec08 <__assert_fail@plt+0xccc0>
   1eaf4:	bl	21314 <__assert_fail@plt+0xf3cc>
   1eaf8:	subs	r6, r0, #0
   1eafc:	beq	1ec00 <__assert_fail@plt+0xccb8>
   1eb00:	ldr	r0, [pc, #260]	; 1ec0c <__assert_fail@plt+0xccc4>
   1eb04:	bl	20048 <__assert_fail@plt+0xe100>
   1eb08:	ldr	r2, [pc, #256]	; 1ec10 <__assert_fail@plt+0xccc8>
   1eb0c:	cmp	r5, #2048	; 0x800
   1eb10:	movcc	r3, r5
   1eb14:	movcs	r3, #2048	; 0x800
   1eb18:	mov	r7, r0
   1eb1c:	str	r6, [r0]
   1eb20:	str	r4, [r0, #8]
   1eb24:	add	r1, r7, #12
   1eb28:	str	r2, [r7, #4]
   1eb2c:	mov	r0, r6
   1eb30:	mov	r2, #0
   1eb34:	bl	11d8c <setvbuf@plt>
   1eb38:	mov	r0, r7
   1eb3c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1eb40:	ldr	r0, [pc, #196]	; 1ec0c <__assert_fail@plt+0xccc4>
   1eb44:	bl	20048 <__assert_fail@plt+0xe100>
   1eb48:	ldr	r3, [pc, #192]	; 1ec10 <__assert_fail@plt+0xccc8>
   1eb4c:	mov	r7, r0
   1eb50:	str	r5, [r0]
   1eb54:	stmib	r0, {r3, r5}
   1eb58:	mov	r0, r7
   1eb5c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1eb60:	ldr	r0, [pc, #164]	; 1ec0c <__assert_fail@plt+0xccc4>
   1eb64:	bl	20048 <__assert_fail@plt+0xe100>
   1eb68:	ldr	r3, [pc, #160]	; 1ec10 <__assert_fail@plt+0xccc8>
   1eb6c:	add	r8, r0, #16
   1eb70:	cmp	r5, #1024	; 0x400
   1eb74:	addls	r5, r8, r5
   1eb78:	addhi	r5, r8, #1024	; 0x400
   1eb7c:	cmp	r8, r5
   1eb80:	mov	r7, r0
   1eb84:	str	r4, [r0]
   1eb88:	str	r4, [r0, #8]
   1eb8c:	str	r4, [r0, #12]
   1eb90:	str	r3, [r0, #4]
   1eb94:	bcs	1ebf0 <__assert_fail@plt+0xcca8>
   1eb98:	mov	r6, r4
   1eb9c:	mov	r4, r8
   1eba0:	b	1ebac <__assert_fail@plt+0xcc64>
   1eba4:	cmp	r5, r4
   1eba8:	bls	1ebf0 <__assert_fail@plt+0xcca8>
   1ebac:	sub	r1, r5, r4
   1ebb0:	mov	r0, r4
   1ebb4:	mov	r2, r6
   1ebb8:	bl	11ef4 <getrandom@plt>
   1ebbc:	cmp	r0, #0
   1ebc0:	addge	r4, r4, r0
   1ebc4:	bge	1eba4 <__assert_fail@plt+0xcc5c>
   1ebc8:	bl	11d74 <__errno_location@plt>
   1ebcc:	ldr	sl, [r0]
   1ebd0:	mov	r9, r0
   1ebd4:	cmp	sl, #4
   1ebd8:	beq	1eba4 <__assert_fail@plt+0xcc5c>
   1ebdc:	mov	r0, r7
   1ebe0:	bl	1eaa0 <__assert_fail@plt+0xcb58>
   1ebe4:	mov	r7, #0
   1ebe8:	str	sl, [r9]
   1ebec:	b	1eb38 <__assert_fail@plt+0xcbf0>
   1ebf0:	mov	r0, r8
   1ebf4:	bl	1efa4 <__assert_fail@plt+0xd05c>
   1ebf8:	mov	r0, r7
   1ebfc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1ec00:	mov	r7, r6
   1ec04:	b	1eb38 <__assert_fail@plt+0xcbf0>
   1ec08:	andeq	r4, r2, r0, asr #13
   1ec0c:	andeq	r0, r0, ip, lsl r8
   1ec10:	andeq	lr, r1, r8, lsr sl
   1ec14:	str	r1, [r0, #4]
   1ec18:	bx	lr
   1ec1c:	str	r1, [r0, #8]
   1ec20:	bx	lr
   1ec24:	ldr	r3, [r0]
   1ec28:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1ec2c:	sub	sp, sp, #8
   1ec30:	cmp	r3, #0
   1ec34:	mov	r6, r0
   1ec38:	mov	r5, r1
   1ec3c:	mov	r4, r2
   1ec40:	str	r3, [sp, #4]
   1ec44:	beq	1eca8 <__assert_fail@plt+0xcd60>
   1ec48:	bl	11d74 <__errno_location@plt>
   1ec4c:	mov	r8, #1
   1ec50:	ldr	r3, [sp, #4]
   1ec54:	mov	r7, r0
   1ec58:	b	1ec80 <__assert_fail@plt+0xcd38>
   1ec5c:	ldr	r3, [r6]
   1ec60:	ldr	r1, [r6, #4]
   1ec64:	ldr	r0, [r6, #8]
   1ec68:	ldr	r3, [r3]
   1ec6c:	ands	r3, r3, #32
   1ec70:	movne	r3, r2
   1ec74:	str	r3, [r7]
   1ec78:	blx	r1
   1ec7c:	ldr	r3, [r6]
   1ec80:	mov	r2, r4
   1ec84:	mov	r0, r5
   1ec88:	mov	r1, r8
   1ec8c:	bl	11ee8 <fread_unlocked@plt>
   1ec90:	ldr	r2, [r7]
   1ec94:	subs	r4, r4, r0
   1ec98:	add	r5, r5, r0
   1ec9c:	bne	1ec5c <__assert_fail@plt+0xcd14>
   1eca0:	add	sp, sp, #8
   1eca4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1eca8:	ldr	r7, [r0, #12]
   1ecac:	add	r9, r0, #12
   1ecb0:	cmp	r2, r7
   1ecb4:	add	r9, r9, #1040	; 0x410
   1ecb8:	addhi	r8, r0, #16
   1ecbc:	movhi	sl, #1024	; 0x400
   1ecc0:	bls	1ed70 <__assert_fail@plt+0xce28>
   1ecc4:	rsb	r1, r7, #1024	; 0x400
   1ecc8:	mov	r0, r5
   1eccc:	add	r1, r9, r1
   1ecd0:	mov	r2, r7
   1ecd4:	add	r5, r5, r7
   1ecd8:	bl	11ac8 <memcpy@plt>
   1ecdc:	tst	r5, #3
   1ece0:	sub	r4, r4, r7
   1ece4:	bne	1ed54 <__assert_fail@plt+0xce0c>
   1ece8:	ldr	r7, [pc, #136]	; 1ed78 <__assert_fail@plt+0xce30>
   1ecec:	cmp	r4, r7
   1ecf0:	bhi	1ed00 <__assert_fail@plt+0xcdb8>
   1ecf4:	b	1ed24 <__assert_fail@plt+0xcddc>
   1ecf8:	cmp	r4, r7
   1ecfc:	bls	1ed24 <__assert_fail@plt+0xcddc>
   1ed00:	mov	r1, r5
   1ed04:	mov	r0, r8
   1ed08:	bl	1ed80 <__assert_fail@plt+0xce38>
   1ed0c:	subs	r4, r4, #1024	; 0x400
   1ed10:	add	r5, r5, #1024	; 0x400
   1ed14:	bne	1ecf8 <__assert_fail@plt+0xcdb0>
   1ed18:	str	r4, [r6, #12]
   1ed1c:	add	sp, sp, #8
   1ed20:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1ed24:	mov	r0, r8
   1ed28:	mov	r1, r9
   1ed2c:	bl	1ed80 <__assert_fail@plt+0xce38>
   1ed30:	mov	r1, #0
   1ed34:	mov	r7, #1024	; 0x400
   1ed38:	mov	r2, r4
   1ed3c:	add	r1, r9, r1
   1ed40:	mov	r0, r5
   1ed44:	sub	r4, r7, r4
   1ed48:	bl	11ac8 <memcpy@plt>
   1ed4c:	str	r4, [r6, #12]
   1ed50:	b	1eca0 <__assert_fail@plt+0xcd58>
   1ed54:	mov	r1, r9
   1ed58:	mov	r0, r8
   1ed5c:	bl	1ed80 <__assert_fail@plt+0xce38>
   1ed60:	cmp	r4, #1024	; 0x400
   1ed64:	mov	r7, sl
   1ed68:	bhi	1ecc4 <__assert_fail@plt+0xcd7c>
   1ed6c:	b	1ed30 <__assert_fail@plt+0xcde8>
   1ed70:	rsb	r1, r7, #1024	; 0x400
   1ed74:	b	1ed38 <__assert_fail@plt+0xcdf0>
   1ed78:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   1ed7c:	b	1eaa0 <__assert_fail@plt+0xcb58>
   1ed80:	ldr	r2, [r0, #1032]	; 0x408
   1ed84:	push	{r4, r5, r6, r7, r8, lr}
   1ed88:	add	r2, r2, #1
   1ed8c:	ldr	r5, [r0, #1028]	; 0x404
   1ed90:	ldr	r3, [r0, #1024]	; 0x400
   1ed94:	add	r1, r1, #16
   1ed98:	add	r5, r5, r2
   1ed9c:	add	r4, r0, #512	; 0x200
   1eda0:	add	ip, r0, #16
   1eda4:	str	r2, [r0, #1032]	; 0x408
   1eda8:	ldr	lr, [ip, #-16]
   1edac:	ldr	r6, [ip, #496]	; 0x1f0
   1edb0:	and	r2, lr, #1020	; 0x3fc
   1edb4:	eor	r3, r3, r3, lsl #13
   1edb8:	ldr	r2, [r0, r2]
   1edbc:	add	r3, r3, r6
   1edc0:	add	r2, r3, r2
   1edc4:	add	r5, r2, r5
   1edc8:	str	r5, [ip, #-16]
   1edcc:	lsr	r5, r5, #8
   1edd0:	and	r5, r5, #1020	; 0x3fc
   1edd4:	eor	r3, r3, r3, lsr #6
   1edd8:	ldr	r6, [r0, r5]
   1eddc:	cmp	r4, ip
   1ede0:	add	r6, lr, r6
   1ede4:	str	r6, [r1, #-16]
   1ede8:	ldr	r5, [ip, #-12]
   1edec:	ldr	r7, [ip, #500]	; 0x1f4
   1edf0:	and	lr, r5, #1020	; 0x3fc
   1edf4:	add	r3, r3, r7
   1edf8:	ldr	r7, [r0, lr]
   1edfc:	eor	lr, r3, r3, lsl #2
   1ee00:	add	r3, r3, r7
   1ee04:	add	r3, r3, r6
   1ee08:	str	r3, [ip, #-12]
   1ee0c:	lsr	r3, r3, #8
   1ee10:	and	r3, r3, #1020	; 0x3fc
   1ee14:	mov	r2, ip
   1ee18:	ldr	r3, [r0, r3]
   1ee1c:	add	ip, ip, #16
   1ee20:	add	r5, r5, r3
   1ee24:	str	r5, [r1, #-12]
   1ee28:	ldr	r7, [ip, #-24]	; 0xffffffe8
   1ee2c:	ldr	r8, [ip, #488]	; 0x1e8
   1ee30:	and	r3, r7, #1020	; 0x3fc
   1ee34:	add	lr, lr, r8
   1ee38:	ldr	r8, [r0, r3]
   1ee3c:	eor	r3, lr, lr, lsr #16
   1ee40:	add	lr, lr, r8
   1ee44:	add	lr, lr, r5
   1ee48:	str	lr, [ip, #-24]	; 0xffffffe8
   1ee4c:	lsr	lr, lr, #8
   1ee50:	and	lr, lr, #1020	; 0x3fc
   1ee54:	add	r1, r1, #16
   1ee58:	ldr	lr, [r0, lr]
   1ee5c:	add	r7, r7, lr
   1ee60:	str	r7, [r1, #-24]	; 0xffffffe8
   1ee64:	ldr	r5, [ip, #-20]	; 0xffffffec
   1ee68:	ldr	r8, [ip, #492]	; 0x1ec
   1ee6c:	and	lr, r5, #1020	; 0x3fc
   1ee70:	add	r3, r3, r8
   1ee74:	ldr	lr, [r0, lr]
   1ee78:	add	lr, r3, lr
   1ee7c:	add	lr, lr, r7
   1ee80:	str	lr, [ip, #-20]	; 0xffffffec
   1ee84:	lsr	lr, lr, #8
   1ee88:	and	lr, lr, #1020	; 0x3fc
   1ee8c:	ldr	lr, [r0, lr]
   1ee90:	add	r5, r5, lr
   1ee94:	str	r5, [r1, #-20]	; 0xffffffec
   1ee98:	bhi	1eda8 <__assert_fail@plt+0xce60>
   1ee9c:	mov	ip, r1
   1eea0:	add	r2, r2, #16
   1eea4:	add	lr, r0, #1024	; 0x400
   1eea8:	ldr	r4, [r2, #-16]
   1eeac:	ldr	r6, [r2, #-528]	; 0xfffffdf0
   1eeb0:	and	r1, r4, #1020	; 0x3fc
   1eeb4:	eor	r3, r3, r3, lsl #13
   1eeb8:	ldr	r1, [r0, r1]
   1eebc:	add	r3, r3, r6
   1eec0:	add	r1, r3, r1
   1eec4:	add	r5, r1, r5
   1eec8:	str	r5, [r2, #-16]
   1eecc:	lsr	r5, r5, #8
   1eed0:	and	r5, r5, #1020	; 0x3fc
   1eed4:	eor	r3, r3, r3, lsr #6
   1eed8:	ldr	r1, [r0, r5]
   1eedc:	cmp	r2, lr
   1eee0:	add	r4, r4, r1
   1eee4:	str	r4, [ip, #-16]
   1eee8:	ldr	r5, [r2, #-12]
   1eeec:	ldr	r7, [r2, #-524]	; 0xfffffdf4
   1eef0:	and	r1, r5, #1020	; 0x3fc
   1eef4:	add	r3, r3, r7
   1eef8:	ldr	r7, [r0, r1]
   1eefc:	eor	r1, r3, r3, lsl #2
   1ef00:	add	r3, r3, r7
   1ef04:	add	r3, r3, r4
   1ef08:	str	r3, [r2, #-12]
   1ef0c:	lsr	r3, r3, #8
   1ef10:	and	r3, r3, #1020	; 0x3fc
   1ef14:	add	r2, r2, #16
   1ef18:	ldr	r3, [r0, r3]
   1ef1c:	add	ip, ip, #16
   1ef20:	add	r5, r5, r3
   1ef24:	str	r5, [ip, #-28]	; 0xffffffe4
   1ef28:	ldr	r4, [r2, #-24]	; 0xffffffe8
   1ef2c:	ldr	r6, [r2, #-536]	; 0xfffffde8
   1ef30:	and	r3, r4, #1020	; 0x3fc
   1ef34:	add	r1, r1, r6
   1ef38:	ldr	r6, [r0, r3]
   1ef3c:	eor	r3, r1, r1, lsr #16
   1ef40:	add	r1, r1, r6
   1ef44:	add	r1, r1, r5
   1ef48:	str	r1, [r2, #-24]	; 0xffffffe8
   1ef4c:	lsr	r1, r1, #8
   1ef50:	and	r1, r1, #1020	; 0x3fc
   1ef54:	ldr	r1, [r0, r1]
   1ef58:	add	r4, r4, r1
   1ef5c:	str	r4, [ip, #-24]	; 0xffffffe8
   1ef60:	ldr	r5, [r2, #-20]	; 0xffffffec
   1ef64:	ldr	r6, [r2, #-532]	; 0xfffffdec
   1ef68:	and	r1, r5, #1020	; 0x3fc
   1ef6c:	add	r3, r3, r6
   1ef70:	ldr	r1, [r0, r1]
   1ef74:	add	r1, r3, r1
   1ef78:	add	r1, r1, r4
   1ef7c:	str	r1, [r2, #-20]	; 0xffffffec
   1ef80:	lsr	r1, r1, #8
   1ef84:	and	r1, r1, #1020	; 0x3fc
   1ef88:	ldr	r1, [r0, r1]
   1ef8c:	add	r5, r5, r1
   1ef90:	str	r5, [ip, #-20]	; 0xffffffec
   1ef94:	bcc	1eea8 <__assert_fail@plt+0xcf60>
   1ef98:	str	r3, [r0, #1024]	; 0x400
   1ef9c:	str	r5, [r0, #1028]	; 0x404
   1efa0:	pop	{r4, r5, r6, r7, r8, pc}
   1efa4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1efa8:	mov	r2, r0
   1efac:	ldr	r8, [pc, #452]	; 1f178 <__assert_fail@plt+0xd230>
   1efb0:	ldr	r7, [pc, #452]	; 1f17c <__assert_fail@plt+0xd234>
   1efb4:	ldr	r6, [pc, #452]	; 1f180 <__assert_fail@plt+0xd238>
   1efb8:	ldr	r4, [pc, #452]	; 1f184 <__assert_fail@plt+0xd23c>
   1efbc:	ldr	lr, [pc, #452]	; 1f188 <__assert_fail@plt+0xd240>
   1efc0:	ldr	ip, [pc, #452]	; 1f18c <__assert_fail@plt+0xd244>
   1efc4:	ldr	r1, [pc, #452]	; 1f190 <__assert_fail@plt+0xd248>
   1efc8:	ldr	r9, [pc, #452]	; 1f194 <__assert_fail@plt+0xd24c>
   1efcc:	add	fp, r0, #1024	; 0x400
   1efd0:	mov	r3, r0
   1efd4:	ldm	r3, {r5, sl}
   1efd8:	add	r3, r3, #32
   1efdc:	add	r1, r1, sl
   1efe0:	add	r9, r9, r5
   1efe4:	ldr	sl, [r3, #-24]	; 0xffffffe8
   1efe8:	ldr	r5, [r3, #-20]	; 0xffffffec
   1efec:	eor	r9, r9, r1, lsl #11
   1eff0:	add	ip, ip, sl
   1eff4:	add	r5, r9, r5
   1eff8:	ldr	sl, [r3, #-16]
   1effc:	add	lr, r5, lr
   1f000:	add	r1, r1, ip
   1f004:	ldr	r5, [r3, #-12]
   1f008:	eor	r1, r1, ip, lsr #2
   1f00c:	add	ip, ip, lr
   1f010:	add	sl, r1, sl
   1f014:	eor	ip, ip, lr, lsl #8
   1f018:	add	r4, sl, r4
   1f01c:	add	r5, ip, r5
   1f020:	add	r6, r5, r6
   1f024:	add	lr, lr, r4
   1f028:	ldr	r5, [r3, #-8]
   1f02c:	eor	lr, lr, r4, lsr #16
   1f030:	ldr	sl, [r3, #-4]
   1f034:	add	r4, r4, r6
   1f038:	add	r5, lr, r5
   1f03c:	eor	r4, r4, r6, lsl #10
   1f040:	add	r7, r5, r7
   1f044:	add	r6, r6, r7
   1f048:	add	sl, r4, sl
   1f04c:	add	r8, sl, r8
   1f050:	eor	r6, r6, r7, lsr #4
   1f054:	add	r9, r9, r6
   1f058:	add	r7, r7, r8
   1f05c:	eor	r7, r7, r8, lsl #8
   1f060:	add	r8, r8, r9
   1f064:	eor	r8, r8, r9, lsr #9
   1f068:	add	r1, r1, r7
   1f06c:	add	r9, r9, r1
   1f070:	add	ip, ip, r8
   1f074:	str	r4, [r3, #-16]
   1f078:	str	lr, [r3, #-20]	; 0xffffffec
   1f07c:	str	r1, [r3, #-28]	; 0xffffffe4
   1f080:	str	r9, [r3, #-32]	; 0xffffffe0
   1f084:	str	ip, [r3, #-24]	; 0xffffffe8
   1f088:	str	r7, [r3, #-8]
   1f08c:	str	r8, [r3, #-4]
   1f090:	str	r6, [r3, #-12]
   1f094:	cmp	fp, r3
   1f098:	bne	1efd4 <__assert_fail@plt+0xd08c>
   1f09c:	ldm	r2, {r5, sl}
   1f0a0:	add	r2, r2, #32
   1f0a4:	add	r1, r1, sl
   1f0a8:	ldr	sl, [r2, #-24]	; 0xffffffe8
   1f0ac:	add	r9, r9, r5
   1f0b0:	ldr	r5, [r2, #-20]	; 0xffffffec
   1f0b4:	add	ip, ip, sl
   1f0b8:	eor	r9, r9, r1, lsl #11
   1f0bc:	ldr	sl, [r2, #-16]
   1f0c0:	add	r5, r9, r5
   1f0c4:	add	r1, r1, ip
   1f0c8:	add	lr, r5, lr
   1f0cc:	eor	r1, r1, ip, lsr #2
   1f0d0:	ldr	r5, [r2, #-12]
   1f0d4:	add	sl, r1, sl
   1f0d8:	add	ip, ip, lr
   1f0dc:	add	r4, sl, r4
   1f0e0:	eor	ip, ip, lr, lsl #8
   1f0e4:	ldr	sl, [r2, #-8]
   1f0e8:	add	r5, ip, r5
   1f0ec:	add	lr, lr, r4
   1f0f0:	add	r6, r5, r6
   1f0f4:	eor	lr, lr, r4, lsr #16
   1f0f8:	ldr	r5, [r2, #-4]
   1f0fc:	add	r4, r4, r6
   1f100:	add	sl, lr, sl
   1f104:	eor	r4, r4, r6, lsl #10
   1f108:	add	r7, sl, r7
   1f10c:	add	r6, r6, r7
   1f110:	add	r5, r4, r5
   1f114:	add	r8, r5, r8
   1f118:	eor	r6, r6, r7, lsr #4
   1f11c:	add	r9, r9, r6
   1f120:	add	r7, r7, r8
   1f124:	eor	r7, r7, r8, lsl #8
   1f128:	add	r8, r8, r9
   1f12c:	eor	r8, r8, r9, lsr #9
   1f130:	add	r1, r1, r7
   1f134:	add	r9, r9, r1
   1f138:	add	ip, ip, r8
   1f13c:	str	r4, [r2, #-16]
   1f140:	str	lr, [r2, #-20]	; 0xffffffec
   1f144:	str	r1, [r2, #-28]	; 0xffffffe4
   1f148:	str	r9, [r2, #-32]	; 0xffffffe0
   1f14c:	str	ip, [r2, #-24]	; 0xffffffe8
   1f150:	str	r7, [r2, #-8]
   1f154:	str	r8, [r2, #-4]
   1f158:	str	r6, [r2, #-12]
   1f15c:	cmp	r3, r2
   1f160:	bne	1f09c <__assert_fail@plt+0xd154>
   1f164:	mov	r3, #0
   1f168:	str	r3, [r0, #1032]	; 0x408
   1f16c:	str	r3, [r0, #1028]	; 0x404
   1f170:	str	r3, [r0, #1024]	; 0x400
   1f174:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f178:	rsbcc	r9, r0, r9, lsl r1
   1f17c:	strbtgt	lr, [pc], #2587	; 1f184 <__assert_fail@plt+0xd23c>
   1f180:	ldrge	r3, [sl, #-3145]	; 0xfffff3b7
   1f184:	stmdble	sl!, {r3, r4, r5, r6, r9, fp, lr}
   1f188:	svceq	0x00421ad8
   1f18c:	tstgt	r6, #1200	; 0x4b0
   1f190:	ldrbls	r0, [r9, #89]	; 0x59
   1f194:	cmnne	r7, #360	; 0x168
   1f198:	push	{r4, r5, r6, lr}
   1f19c:	mov	r4, r0
   1f1a0:	ldr	r3, [r0, #24]
   1f1a4:	ldr	r6, [r0, #20]
   1f1a8:	cmp	r3, r6
   1f1ac:	sub	r5, r3, r6
   1f1b0:	ldrbeq	r2, [r0, #52]	; 0x34
   1f1b4:	sub	r5, r5, #1
   1f1b8:	orreq	r2, r2, #2
   1f1bc:	strbeq	r2, [r0, #52]	; 0x34
   1f1c0:	ldr	r0, [r0, #36]	; 0x24
   1f1c4:	ldr	r1, [r4, #28]
   1f1c8:	ldr	r2, [r4, #16]
   1f1cc:	add	r3, r3, r0
   1f1d0:	bic	r3, r3, r0
   1f1d4:	sub	r0, r3, r2
   1f1d8:	sub	r2, r1, r2
   1f1dc:	cmp	r0, r2
   1f1e0:	str	r3, [r4, #24]
   1f1e4:	ldr	r2, [r4, #72]	; 0x48
   1f1e8:	movhi	r3, r1
   1f1ec:	strhi	r1, [r4, #24]
   1f1f0:	ldr	r1, [r4, #68]	; 0x44
   1f1f4:	str	r3, [r4, #20]
   1f1f8:	sub	r3, r2, r1
   1f1fc:	cmp	r3, #3
   1f200:	bls	1f258 <__assert_fail@plt+0xd310>
   1f204:	str	r6, [r1]
   1f208:	ldr	r1, [r4, #112]	; 0x70
   1f20c:	ldr	r2, [r4, #116]	; 0x74
   1f210:	ldr	r3, [r4, #68]	; 0x44
   1f214:	sub	r2, r2, r1
   1f218:	add	r3, r3, #4
   1f21c:	cmp	r2, #3
   1f220:	str	r3, [r4, #68]	; 0x44
   1f224:	bhi	1f238 <__assert_fail@plt+0xd2f0>
   1f228:	mov	r1, #4
   1f22c:	add	r0, r4, #100	; 0x64
   1f230:	bl	2170c <_obstack_newchunk@@Base>
   1f234:	ldr	r1, [r4, #112]	; 0x70
   1f238:	str	r5, [r1]
   1f23c:	ldr	r2, [r4, #112]	; 0x70
   1f240:	ldr	r3, [r4]
   1f244:	add	r2, r2, #4
   1f248:	add	r3, r3, #1
   1f24c:	str	r2, [r4, #112]	; 0x70
   1f250:	str	r3, [r4]
   1f254:	pop	{r4, r5, r6, pc}
   1f258:	mov	r1, #4
   1f25c:	add	r0, r4, #56	; 0x38
   1f260:	bl	2170c <_obstack_newchunk@@Base>
   1f264:	ldr	r1, [r4, #68]	; 0x44
   1f268:	b	1f204 <__assert_fail@plt+0xd2bc>
   1f26c:	push	{r4, r5, r6, r7, lr}
   1f270:	sub	sp, sp, #12
   1f274:	ldr	r6, [pc, #100]	; 1f2e0 <__assert_fail@plt+0xd398>
   1f278:	ldr	r7, [pc, #100]	; 1f2e4 <__assert_fail@plt+0xd39c>
   1f27c:	mov	r4, #0
   1f280:	mov	r5, r0
   1f284:	str	r4, [r0]
   1f288:	str	r4, [r0, #4]
   1f28c:	str	r4, [r0, #8]
   1f290:	mov	r2, r4
   1f294:	mov	r1, r4
   1f298:	mov	r3, r6
   1f29c:	str	r7, [sp]
   1f2a0:	add	r0, r0, #12
   1f2a4:	bl	216bc <_obstack_begin@@Base>
   1f2a8:	mov	r3, r6
   1f2ac:	mov	r2, r4
   1f2b0:	mov	r1, r4
   1f2b4:	str	r7, [sp]
   1f2b8:	add	r0, r5, #56	; 0x38
   1f2bc:	bl	216bc <_obstack_begin@@Base>
   1f2c0:	str	r7, [sp]
   1f2c4:	mov	r3, r6
   1f2c8:	add	r0, r5, #100	; 0x64
   1f2cc:	mov	r2, r4
   1f2d0:	mov	r1, r4
   1f2d4:	bl	216bc <_obstack_begin@@Base>
   1f2d8:	add	sp, sp, #12
   1f2dc:	pop	{r4, r5, r6, r7, pc}
   1f2e0:	andeq	r0, r2, r8, lsl pc
   1f2e4:	andeq	sl, r1, r8, ror #31
   1f2e8:	push	{r4, lr}
   1f2ec:	mov	r1, #0
   1f2f0:	mov	r4, r0
   1f2f4:	add	r0, r0, #12
   1f2f8:	bl	21858 <_obstack_free@@Base>
   1f2fc:	add	r0, r4, #56	; 0x38
   1f300:	mov	r1, #0
   1f304:	bl	21858 <_obstack_free@@Base>
   1f308:	add	r0, r4, #100	; 0x64
   1f30c:	mov	r1, #0
   1f310:	pop	{r4, lr}
   1f314:	b	21858 <_obstack_free@@Base>
   1f318:	push	{r4, r5, r6, r7, r8, lr}
   1f31c:	mov	r4, r1
   1f320:	mov	r6, r0
   1f324:	add	r8, r1, #12
   1f328:	mov	r7, #1
   1f32c:	b	1f344 <__assert_fail@plt+0xd3fc>
   1f330:	add	r2, r3, #1
   1f334:	cmp	r5, #0
   1f338:	str	r2, [r4, #24]
   1f33c:	strb	r5, [r3]
   1f340:	beq	1f47c <__assert_fail@plt+0xd534>
   1f344:	mov	r0, r6
   1f348:	bl	11da4 <fgetc@plt>
   1f34c:	ldr	r3, [r4, #24]
   1f350:	cmn	r0, #1
   1f354:	mov	r5, r0
   1f358:	beq	1f37c <__assert_fail@plt+0xd434>
   1f35c:	ldr	r2, [r4, #28]
   1f360:	cmp	r2, r3
   1f364:	bne	1f330 <__assert_fail@plt+0xd3e8>
   1f368:	mov	r1, r7
   1f36c:	mov	r0, r8
   1f370:	bl	2170c <_obstack_newchunk@@Base>
   1f374:	ldr	r3, [r4, #24]
   1f378:	b	1f330 <__assert_fail@plt+0xd3e8>
   1f37c:	ldr	r2, [r4, #20]
   1f380:	cmp	r2, r3
   1f384:	beq	1f3ac <__assert_fail@plt+0xd464>
   1f388:	ldr	r2, [r4, #28]
   1f38c:	cmp	r2, r3
   1f390:	beq	1f49c <__assert_fail@plt+0xd554>
   1f394:	add	r1, r3, #1
   1f398:	mov	r2, #0
   1f39c:	str	r1, [r4, #24]
   1f3a0:	mov	r0, r4
   1f3a4:	strb	r2, [r3]
   1f3a8:	bl	1f198 <__assert_fail@plt+0xd250>
   1f3ac:	ldr	r2, [r4, #68]	; 0x44
   1f3b0:	ldr	r3, [r4, #72]	; 0x48
   1f3b4:	sub	r3, r3, r2
   1f3b8:	cmp	r3, #3
   1f3bc:	bls	1f488 <__assert_fail@plt+0xd540>
   1f3c0:	mov	r3, #0
   1f3c4:	str	r3, [r2]
   1f3c8:	ldr	r3, [r4, #68]	; 0x44
   1f3cc:	ldr	r1, [r4, #64]	; 0x40
   1f3d0:	add	r3, r3, #4
   1f3d4:	cmp	r3, r1
   1f3d8:	ldr	r0, [r4, #80]	; 0x50
   1f3dc:	ldrbeq	r2, [r4, #96]	; 0x60
   1f3e0:	ldr	ip, [r4, #72]	; 0x48
   1f3e4:	str	r3, [r4, #68]	; 0x44
   1f3e8:	orreq	r2, r2, #2
   1f3ec:	strbeq	r2, [r4, #96]	; 0x60
   1f3f0:	add	r3, r3, r0
   1f3f4:	ldr	r2, [r4, #60]	; 0x3c
   1f3f8:	bic	r3, r3, r0
   1f3fc:	sub	r0, r3, r2
   1f400:	sub	r2, ip, r2
   1f404:	cmp	r0, r2
   1f408:	ldr	r2, [r4, #112]	; 0x70
   1f40c:	ldr	r0, [r4, #108]	; 0x6c
   1f410:	str	r3, [r4, #68]	; 0x44
   1f414:	movhi	r3, ip
   1f418:	strhi	ip, [r4, #68]	; 0x44
   1f41c:	cmp	r0, r2
   1f420:	str	r3, [r4, #64]	; 0x40
   1f424:	ldrbeq	r3, [r4, #140]	; 0x8c
   1f428:	ldr	ip, [r4, #124]	; 0x7c
   1f42c:	str	r1, [r4, #4]
   1f430:	orreq	r3, r3, #2
   1f434:	strbeq	r3, [r4, #140]	; 0x8c
   1f438:	ldr	r1, [r4, #104]	; 0x68
   1f43c:	add	r3, r2, ip
   1f440:	ldr	r2, [r4, #116]	; 0x74
   1f444:	bic	r3, r3, ip
   1f448:	sub	ip, r3, r1
   1f44c:	sub	r1, r2, r1
   1f450:	cmp	ip, r1
   1f454:	str	r3, [r4, #112]	; 0x70
   1f458:	movhi	r3, r2
   1f45c:	str	r0, [r4, #8]
   1f460:	strhi	r2, [r4, #112]	; 0x70
   1f464:	str	r3, [r4, #108]	; 0x6c
   1f468:	mov	r0, r6
   1f46c:	bl	11ab0 <ferror@plt>
   1f470:	clz	r0, r0
   1f474:	lsr	r0, r0, #5
   1f478:	pop	{r4, r5, r6, r7, r8, pc}
   1f47c:	mov	r0, r4
   1f480:	bl	1f198 <__assert_fail@plt+0xd250>
   1f484:	b	1f344 <__assert_fail@plt+0xd3fc>
   1f488:	mov	r1, #4
   1f48c:	add	r0, r4, #56	; 0x38
   1f490:	bl	2170c <_obstack_newchunk@@Base>
   1f494:	ldr	r2, [r4, #68]	; 0x44
   1f498:	b	1f3c0 <__assert_fail@plt+0xd478>
   1f49c:	mov	r1, #1
   1f4a0:	add	r0, r4, #12
   1f4a4:	bl	2170c <_obstack_newchunk@@Base>
   1f4a8:	ldr	r3, [r4, #24]
   1f4ac:	b	1f394 <__assert_fail@plt+0xd44c>
   1f4b0:	push	{r4, r5, r6, lr}
   1f4b4:	mov	r5, r1
   1f4b8:	mov	r1, #0
   1f4bc:	mov	r4, r2
   1f4c0:	bl	11e28 <setlocale@plt>
   1f4c4:	subs	r6, r0, #0
   1f4c8:	beq	1f524 <__assert_fail@plt+0xd5dc>
   1f4cc:	bl	11d50 <strlen@plt>
   1f4d0:	cmp	r4, r0
   1f4d4:	bhi	1f50c <__assert_fail@plt+0xd5c4>
   1f4d8:	cmp	r4, #0
   1f4dc:	bne	1f4e8 <__assert_fail@plt+0xd5a0>
   1f4e0:	mov	r0, #34	; 0x22
   1f4e4:	pop	{r4, r5, r6, pc}
   1f4e8:	sub	r4, r4, #1
   1f4ec:	mov	r1, r6
   1f4f0:	mov	r2, r4
   1f4f4:	mov	r0, r5
   1f4f8:	bl	11ac8 <memcpy@plt>
   1f4fc:	mov	r3, #0
   1f500:	strb	r3, [r5, r4]
   1f504:	mov	r0, #34	; 0x22
   1f508:	pop	{r4, r5, r6, pc}
   1f50c:	add	r2, r0, #1
   1f510:	mov	r1, r6
   1f514:	mov	r0, r5
   1f518:	bl	11ac8 <memcpy@plt>
   1f51c:	mov	r0, #0
   1f520:	pop	{r4, r5, r6, pc}
   1f524:	cmp	r4, #0
   1f528:	beq	1f538 <__assert_fail@plt+0xd5f0>
   1f52c:	strb	r6, [r5]
   1f530:	mov	r0, #22
   1f534:	pop	{r4, r5, r6, pc}
   1f538:	mov	r0, #22
   1f53c:	pop	{r4, r5, r6, pc}
   1f540:	mov	r1, #0
   1f544:	b	11e28 <setlocale@plt>
   1f548:	push	{r4, lr}
   1f54c:	bl	11cc0 <mkstemp64@plt>
   1f550:	pop	{r4, lr}
   1f554:	b	1faec <__assert_fail@plt+0xdba4>
   1f558:	push	{r4, lr}
   1f55c:	mov	r4, r1
   1f560:	bl	11c0c <mkostemp64@plt>
   1f564:	mov	r1, r4
   1f568:	pop	{r4, lr}
   1f56c:	b	212c0 <__assert_fail@plt+0xf378>
   1f570:	push	{r4, r5, lr}
   1f574:	ldrb	ip, [r0]
   1f578:	ldrb	lr, [r1]
   1f57c:	cmp	ip, #45	; 0x2d
   1f580:	beq	1f69c <__assert_fail@plt+0xd754>
   1f584:	cmp	lr, #45	; 0x2d
   1f588:	bne	1f594 <__assert_fail@plt+0xd64c>
   1f58c:	b	1f708 <__assert_fail@plt+0xd7c0>
   1f590:	ldrb	ip, [r0, #1]!
   1f594:	cmp	ip, #48	; 0x30
   1f598:	beq	1f590 <__assert_fail@plt+0xd648>
   1f59c:	cmp	r3, ip
   1f5a0:	mov	r4, ip
   1f5a4:	beq	1f590 <__assert_fail@plt+0xd648>
   1f5a8:	cmp	lr, #48	; 0x30
   1f5ac:	bne	1f5bc <__assert_fail@plt+0xd674>
   1f5b0:	ldrb	lr, [r1, #1]!
   1f5b4:	cmp	lr, #48	; 0x30
   1f5b8:	beq	1f5b0 <__assert_fail@plt+0xd668>
   1f5bc:	cmp	r3, lr
   1f5c0:	beq	1f5b0 <__assert_fail@plt+0xd668>
   1f5c4:	cmp	ip, lr
   1f5c8:	bne	1f88c <__assert_fail@plt+0xd944>
   1f5cc:	sub	lr, ip, #48	; 0x30
   1f5d0:	cmp	lr, #9
   1f5d4:	movhi	lr, ip
   1f5d8:	bhi	1f60c <__assert_fail@plt+0xd6c4>
   1f5dc:	ldrb	ip, [r0, #1]!
   1f5e0:	cmp	r3, ip
   1f5e4:	mov	r4, ip
   1f5e8:	beq	1f5dc <__assert_fail@plt+0xd694>
   1f5ec:	ldrb	lr, [r1, #1]!
   1f5f0:	cmp	r3, lr
   1f5f4:	beq	1f5ec <__assert_fail@plt+0xd6a4>
   1f5f8:	cmp	ip, lr
   1f5fc:	bne	1f88c <__assert_fail@plt+0xd944>
   1f600:	sub	r5, ip, #48	; 0x30
   1f604:	cmp	r5, #9
   1f608:	bls	1f5dc <__assert_fail@plt+0xd694>
   1f60c:	cmp	r2, ip
   1f610:	beq	1f8ec <__assert_fail@plt+0xd9a4>
   1f614:	mov	r5, ip
   1f618:	mov	ip, lr
   1f61c:	mov	lr, r5
   1f620:	cmp	r2, lr
   1f624:	sub	ip, ip, #48	; 0x30
   1f628:	beq	1f8e0 <__assert_fail@plt+0xd998>
   1f62c:	cmp	ip, #9
   1f630:	sub	r4, r4, lr
   1f634:	bhi	1f93c <__assert_fail@plt+0xd9f4>
   1f638:	mov	ip, #0
   1f63c:	ldrb	r2, [r0, #1]!
   1f640:	cmp	r3, r2
   1f644:	beq	1f63c <__assert_fail@plt+0xd6f4>
   1f648:	sub	r2, r2, #48	; 0x30
   1f64c:	cmp	r2, #9
   1f650:	add	ip, ip, #1
   1f654:	bls	1f63c <__assert_fail@plt+0xd6f4>
   1f658:	sub	lr, lr, #48	; 0x30
   1f65c:	cmp	lr, #9
   1f660:	bhi	1f950 <__assert_fail@plt+0xda08>
   1f664:	mov	r0, #0
   1f668:	ldrb	r2, [r1, #1]!
   1f66c:	cmp	r3, r2
   1f670:	beq	1f668 <__assert_fail@plt+0xd720>
   1f674:	sub	r2, r2, #48	; 0x30
   1f678:	cmp	r2, #9
   1f67c:	add	r0, r0, #1
   1f680:	bls	1f668 <__assert_fail@plt+0xd720>
   1f684:	cmp	r0, ip
   1f688:	beq	1f910 <__assert_fail@plt+0xd9c8>
   1f68c:	bhi	1f84c <__assert_fail@plt+0xd904>
   1f690:	mov	r4, #1
   1f694:	mov	r0, r4
   1f698:	pop	{r4, r5, pc}
   1f69c:	ldrb	ip, [r0, #1]!
   1f6a0:	cmp	ip, #48	; 0x30
   1f6a4:	beq	1f69c <__assert_fail@plt+0xd754>
   1f6a8:	cmp	r3, ip
   1f6ac:	mov	r4, ip
   1f6b0:	beq	1f69c <__assert_fail@plt+0xd754>
   1f6b4:	cmp	lr, #45	; 0x2d
   1f6b8:	beq	1f76c <__assert_fail@plt+0xd824>
   1f6bc:	cmp	r2, ip
   1f6c0:	beq	1f854 <__assert_fail@plt+0xd90c>
   1f6c4:	sub	ip, ip, #48	; 0x30
   1f6c8:	cmp	ip, #9
   1f6cc:	bhi	1f6d8 <__assert_fail@plt+0xd790>
   1f6d0:	b	1f84c <__assert_fail@plt+0xd904>
   1f6d4:	ldrb	lr, [r1, #1]!
   1f6d8:	cmp	lr, #48	; 0x30
   1f6dc:	beq	1f6d4 <__assert_fail@plt+0xd78c>
   1f6e0:	cmp	r3, lr
   1f6e4:	beq	1f6d4 <__assert_fail@plt+0xd78c>
   1f6e8:	cmp	r2, lr
   1f6ec:	beq	1f8a8 <__assert_fail@plt+0xd960>
   1f6f0:	sub	r4, lr, #48	; 0x30
   1f6f4:	cmp	r4, #9
   1f6f8:	movhi	r4, #0
   1f6fc:	mvnls	r4, #0
   1f700:	mov	r0, r4
   1f704:	pop	{r4, r5, pc}
   1f708:	ldrb	lr, [r1, #1]!
   1f70c:	cmp	lr, #48	; 0x30
   1f710:	beq	1f708 <__assert_fail@plt+0xd7c0>
   1f714:	cmp	r3, lr
   1f718:	beq	1f708 <__assert_fail@plt+0xd7c0>
   1f71c:	cmp	r2, lr
   1f720:	beq	1f870 <__assert_fail@plt+0xd928>
   1f724:	sub	lr, lr, #48	; 0x30
   1f728:	cmp	lr, #9
   1f72c:	bls	1f690 <__assert_fail@plt+0xd748>
   1f730:	cmp	ip, #48	; 0x30
   1f734:	bne	1f744 <__assert_fail@plt+0xd7fc>
   1f738:	ldrb	ip, [r0, #1]!
   1f73c:	cmp	ip, #48	; 0x30
   1f740:	beq	1f738 <__assert_fail@plt+0xd7f0>
   1f744:	cmp	r3, ip
   1f748:	beq	1f738 <__assert_fail@plt+0xd7f0>
   1f74c:	cmp	r2, ip
   1f750:	beq	1f8c4 <__assert_fail@plt+0xd97c>
   1f754:	sub	r4, ip, #48	; 0x30
   1f758:	cmp	r4, #9
   1f75c:	movhi	r4, #0
   1f760:	movls	r4, #1
   1f764:	mov	r0, r4
   1f768:	pop	{r4, r5, pc}
   1f76c:	ldrb	r5, [r1, #1]!
   1f770:	cmp	r5, #48	; 0x30
   1f774:	beq	1f76c <__assert_fail@plt+0xd824>
   1f778:	cmp	r3, r5
   1f77c:	beq	1f76c <__assert_fail@plt+0xd824>
   1f780:	cmp	ip, r5
   1f784:	bne	1f920 <__assert_fail@plt+0xd9d8>
   1f788:	sub	lr, ip, #48	; 0x30
   1f78c:	cmp	lr, #9
   1f790:	movhi	r5, ip
   1f794:	bhi	1f7c8 <__assert_fail@plt+0xd880>
   1f798:	ldrb	ip, [r0, #1]!
   1f79c:	cmp	r3, ip
   1f7a0:	mov	r4, ip
   1f7a4:	beq	1f798 <__assert_fail@plt+0xd850>
   1f7a8:	ldrb	r5, [r1, #1]!
   1f7ac:	cmp	r3, r5
   1f7b0:	beq	1f7a8 <__assert_fail@plt+0xd860>
   1f7b4:	cmp	ip, r5
   1f7b8:	bne	1f920 <__assert_fail@plt+0xd9d8>
   1f7bc:	sub	lr, ip, #48	; 0x30
   1f7c0:	cmp	lr, #9
   1f7c4:	bls	1f798 <__assert_fail@plt+0xd850>
   1f7c8:	cmp	r2, ip
   1f7cc:	beq	1f9cc <__assert_fail@plt+0xda84>
   1f7d0:	mov	lr, ip
   1f7d4:	mov	ip, r5
   1f7d8:	mov	r5, lr
   1f7dc:	cmp	r2, r5
   1f7e0:	sub	ip, ip, #48	; 0x30
   1f7e4:	beq	1f9c0 <__assert_fail@plt+0xda78>
   1f7e8:	cmp	ip, #9
   1f7ec:	sub	r4, r5, r4
   1f7f0:	bhi	1fa7c <__assert_fail@plt+0xdb34>
   1f7f4:	mov	lr, #0
   1f7f8:	ldrb	ip, [r0, #1]!
   1f7fc:	cmp	r3, ip
   1f800:	beq	1f7f8 <__assert_fail@plt+0xd8b0>
   1f804:	sub	ip, ip, #48	; 0x30
   1f808:	cmp	ip, #9
   1f80c:	add	lr, lr, #1
   1f810:	bls	1f7f8 <__assert_fail@plt+0xd8b0>
   1f814:	sub	r2, r5, #48	; 0x30
   1f818:	cmp	r2, #9
   1f81c:	bhi	1fa6c <__assert_fail@plt+0xdb24>
   1f820:	mov	r0, #0
   1f824:	ldrb	r2, [r1, #1]!
   1f828:	cmp	r3, r2
   1f82c:	beq	1f824 <__assert_fail@plt+0xd8dc>
   1f830:	sub	r2, r2, #48	; 0x30
   1f834:	cmp	r2, #9
   1f838:	add	r0, r0, #1
   1f83c:	bls	1f824 <__assert_fail@plt+0xd8dc>
   1f840:	cmp	r0, lr
   1f844:	beq	1f910 <__assert_fail@plt+0xd9c8>
   1f848:	bhi	1f690 <__assert_fail@plt+0xd748>
   1f84c:	mvn	r4, #0
   1f850:	b	1f694 <__assert_fail@plt+0xd74c>
   1f854:	ldrb	ip, [r0, #1]!
   1f858:	cmp	ip, #48	; 0x30
   1f85c:	bne	1f6c4 <__assert_fail@plt+0xd77c>
   1f860:	ldrb	ip, [r0, #1]!
   1f864:	cmp	ip, #48	; 0x30
   1f868:	beq	1f854 <__assert_fail@plt+0xd90c>
   1f86c:	b	1f6c4 <__assert_fail@plt+0xd77c>
   1f870:	ldrb	lr, [r1, #1]!
   1f874:	cmp	lr, #48	; 0x30
   1f878:	bne	1f724 <__assert_fail@plt+0xd7dc>
   1f87c:	ldrb	lr, [r1, #1]!
   1f880:	cmp	lr, #48	; 0x30
   1f884:	beq	1f870 <__assert_fail@plt+0xd928>
   1f888:	b	1f724 <__assert_fail@plt+0xd7dc>
   1f88c:	cmp	r2, ip
   1f890:	bne	1f620 <__assert_fail@plt+0xd6d8>
   1f894:	sub	r4, lr, #48	; 0x30
   1f898:	cmp	r4, #9
   1f89c:	bhi	1f8ec <__assert_fail@plt+0xd9a4>
   1f8a0:	mov	r4, r2
   1f8a4:	b	1f620 <__assert_fail@plt+0xd6d8>
   1f8a8:	ldrb	lr, [r1, #1]!
   1f8ac:	cmp	lr, #48	; 0x30
   1f8b0:	bne	1f6f0 <__assert_fail@plt+0xd7a8>
   1f8b4:	ldrb	lr, [r1, #1]!
   1f8b8:	cmp	lr, #48	; 0x30
   1f8bc:	beq	1f8a8 <__assert_fail@plt+0xd960>
   1f8c0:	b	1f6f0 <__assert_fail@plt+0xd7a8>
   1f8c4:	ldrb	ip, [r0, #1]!
   1f8c8:	cmp	ip, #48	; 0x30
   1f8cc:	bne	1f754 <__assert_fail@plt+0xd80c>
   1f8d0:	ldrb	ip, [r0, #1]!
   1f8d4:	cmp	ip, #48	; 0x30
   1f8d8:	beq	1f8c4 <__assert_fail@plt+0xd97c>
   1f8dc:	b	1f754 <__assert_fail@plt+0xd80c>
   1f8e0:	cmp	ip, #9
   1f8e4:	subls	r4, r4, lr
   1f8e8:	bls	1f638 <__assert_fail@plt+0xd6f0>
   1f8ec:	ldrb	r3, [r0]
   1f8f0:	uxtb	r2, r2
   1f8f4:	cmp	r3, r2
   1f8f8:	beq	1f988 <__assert_fail@plt+0xda40>
   1f8fc:	ldrb	r3, [r1]
   1f900:	cmp	r3, r2
   1f904:	beq	1f95c <__assert_fail@plt+0xda14>
   1f908:	mov	r4, #0
   1f90c:	b	1f694 <__assert_fail@plt+0xd74c>
   1f910:	cmp	r0, #0
   1f914:	moveq	r4, #0
   1f918:	mov	r0, r4
   1f91c:	pop	{r4, r5, pc}
   1f920:	cmp	r2, ip
   1f924:	bne	1f7dc <__assert_fail@plt+0xd894>
   1f928:	sub	lr, r5, #48	; 0x30
   1f92c:	cmp	lr, #9
   1f930:	bhi	1f9cc <__assert_fail@plt+0xda84>
   1f934:	mov	r4, r2
   1f938:	b	1f7dc <__assert_fail@plt+0xd894>
   1f93c:	sub	lr, lr, #48	; 0x30
   1f940:	cmp	lr, #9
   1f944:	movls	ip, #0
   1f948:	bls	1f664 <__assert_fail@plt+0xd71c>
   1f94c:	b	1f908 <__assert_fail@plt+0xd9c0>
   1f950:	adds	r4, ip, #0
   1f954:	movne	r4, #1
   1f958:	b	1f694 <__assert_fail@plt+0xd74c>
   1f95c:	add	r2, r1, #1
   1f960:	ldrb	r4, [r1, #1]
   1f964:	b	1f96c <__assert_fail@plt+0xda24>
   1f968:	ldrb	r4, [r2, #1]!
   1f96c:	cmp	r4, #48	; 0x30
   1f970:	beq	1f968 <__assert_fail@plt+0xda20>
   1f974:	sub	r4, r4, #48	; 0x30
   1f978:	cmp	r4, #9
   1f97c:	movhi	r4, #0
   1f980:	mvnls	r4, #0
   1f984:	b	1f694 <__assert_fail@plt+0xd74c>
   1f988:	ldrb	r2, [r1]
   1f98c:	cmp	r2, r3
   1f990:	beq	1fa04 <__assert_fail@plt+0xdabc>
   1f994:	ldrb	r3, [r0, #1]
   1f998:	add	r0, r0, #1
   1f99c:	b	1f9a4 <__assert_fail@plt+0xda5c>
   1f9a0:	ldrb	r3, [r0, #1]!
   1f9a4:	cmp	r3, #48	; 0x30
   1f9a8:	beq	1f9a0 <__assert_fail@plt+0xda58>
   1f9ac:	sub	r4, r3, #48	; 0x30
   1f9b0:	cmp	r4, #9
   1f9b4:	movhi	r4, #0
   1f9b8:	movls	r4, #1
   1f9bc:	b	1f694 <__assert_fail@plt+0xd74c>
   1f9c0:	cmp	ip, #9
   1f9c4:	subls	r4, r5, r4
   1f9c8:	bls	1f7f4 <__assert_fail@plt+0xd8ac>
   1f9cc:	ldrb	r3, [r1]
   1f9d0:	uxtb	r2, r2
   1f9d4:	cmp	r3, r2
   1f9d8:	beq	1fa44 <__assert_fail@plt+0xdafc>
   1f9dc:	ldrb	r3, [r0]
   1f9e0:	cmp	r3, r2
   1f9e4:	bne	1f908 <__assert_fail@plt+0xd9c0>
   1f9e8:	add	r2, r0, #1
   1f9ec:	ldrb	r4, [r0, #1]
   1f9f0:	b	1f9f8 <__assert_fail@plt+0xdab0>
   1f9f4:	ldrb	r4, [r2, #1]!
   1f9f8:	cmp	r4, #48	; 0x30
   1f9fc:	beq	1f9f4 <__assert_fail@plt+0xdaac>
   1fa00:	b	1f974 <__assert_fail@plt+0xda2c>
   1fa04:	mov	r2, r1
   1fa08:	b	1fa14 <__assert_fail@plt+0xdacc>
   1fa0c:	cmp	r1, #9
   1fa10:	bhi	1f908 <__assert_fail@plt+0xd9c0>
   1fa14:	ldrb	r3, [r0, #1]!
   1fa18:	ldrb	r4, [r2, #1]!
   1fa1c:	sub	r1, r3, #48	; 0x30
   1fa20:	cmp	r3, r4
   1fa24:	beq	1fa0c <__assert_fail@plt+0xdac4>
   1fa28:	cmp	r1, #9
   1fa2c:	bhi	1fa90 <__assert_fail@plt+0xdb48>
   1fa30:	sub	r2, r4, #48	; 0x30
   1fa34:	cmp	r2, #9
   1fa38:	bhi	1f9a4 <__assert_fail@plt+0xda5c>
   1fa3c:	sub	r4, r3, r4
   1fa40:	b	1f694 <__assert_fail@plt+0xd74c>
   1fa44:	ldrb	r2, [r0]
   1fa48:	cmp	r2, r3
   1fa4c:	beq	1faa0 <__assert_fail@plt+0xdb58>
   1fa50:	ldrb	r3, [r1, #1]
   1fa54:	add	r1, r1, #1
   1fa58:	b	1fa60 <__assert_fail@plt+0xdb18>
   1fa5c:	ldrb	r3, [r1, #1]!
   1fa60:	cmp	r3, #48	; 0x30
   1fa64:	beq	1fa5c <__assert_fail@plt+0xdb14>
   1fa68:	b	1f9ac <__assert_fail@plt+0xda64>
   1fa6c:	cmp	lr, #0
   1fa70:	mvnne	r4, #0
   1fa74:	moveq	r4, #0
   1fa78:	b	1f694 <__assert_fail@plt+0xd74c>
   1fa7c:	sub	r2, r5, #48	; 0x30
   1fa80:	cmp	r2, #9
   1fa84:	movls	lr, #0
   1fa88:	bls	1f820 <__assert_fail@plt+0xd8d8>
   1fa8c:	b	1f908 <__assert_fail@plt+0xd9c0>
   1fa90:	sub	r3, r4, #48	; 0x30
   1fa94:	cmp	r3, #9
   1fa98:	bls	1f96c <__assert_fail@plt+0xda24>
   1fa9c:	b	1f908 <__assert_fail@plt+0xd9c0>
   1faa0:	mov	r2, r0
   1faa4:	b	1fab0 <__assert_fail@plt+0xdb68>
   1faa8:	cmp	r0, #9
   1faac:	bhi	1f908 <__assert_fail@plt+0xd9c0>
   1fab0:	ldrb	r3, [r1, #1]!
   1fab4:	ldrb	r4, [r2, #1]!
   1fab8:	sub	r0, r3, #48	; 0x30
   1fabc:	cmp	r3, r4
   1fac0:	beq	1faa8 <__assert_fail@plt+0xdb60>
   1fac4:	cmp	r0, #9
   1fac8:	bhi	1fadc <__assert_fail@plt+0xdb94>
   1facc:	sub	r2, r4, #48	; 0x30
   1fad0:	cmp	r2, #9
   1fad4:	bhi	1fa60 <__assert_fail@plt+0xdb18>
   1fad8:	b	1fa3c <__assert_fail@plt+0xdaf4>
   1fadc:	sub	r3, r4, #48	; 0x30
   1fae0:	cmp	r3, #9
   1fae4:	bls	1f9f8 <__assert_fail@plt+0xdab0>
   1fae8:	b	1f908 <__assert_fail@plt+0xd9c0>
   1faec:	cmp	r0, #2
   1faf0:	push	{r4, r5, r6, r7, r8, lr}
   1faf4:	mov	r4, r0
   1faf8:	bhi	1fb20 <__assert_fail@plt+0xdbd8>
   1fafc:	bl	2194c <_obstack_memory_used@@Base+0x80>
   1fb00:	mov	r7, r0
   1fb04:	bl	11d74 <__errno_location@plt>
   1fb08:	mov	r5, r0
   1fb0c:	mov	r0, r4
   1fb10:	ldr	r6, [r5]
   1fb14:	mov	r4, r7
   1fb18:	bl	11f30 <close@plt>
   1fb1c:	str	r6, [r5]
   1fb20:	mov	r0, r4
   1fb24:	pop	{r4, r5, r6, r7, r8, pc}
   1fb28:	push	{r4, r5, r6, lr}
   1fb2c:	sub	sp, sp, #32
   1fb30:	cmp	r1, #0
   1fb34:	mov	r4, r0
   1fb38:	ldr	r5, [sp, #48]	; 0x30
   1fb3c:	ldr	r6, [sp, #52]	; 0x34
   1fb40:	beq	1fe58 <__assert_fail@plt+0xdf10>
   1fb44:	stm	sp, {r2, r3}
   1fb48:	mov	r3, r1
   1fb4c:	ldr	r2, [pc, #808]	; 1fe7c <__assert_fail@plt+0xdf34>
   1fb50:	mov	r1, #1
   1fb54:	bl	11dd4 <__fprintf_chk@plt>
   1fb58:	mov	r2, #5
   1fb5c:	ldr	r1, [pc, #796]	; 1fe80 <__assert_fail@plt+0xdf38>
   1fb60:	mov	r0, #0
   1fb64:	bl	11b58 <dcgettext@plt>
   1fb68:	ldr	r3, [pc, #788]	; 1fe84 <__assert_fail@plt+0xdf3c>
   1fb6c:	ldr	r2, [pc, #788]	; 1fe88 <__assert_fail@plt+0xdf40>
   1fb70:	str	r3, [sp]
   1fb74:	mov	r1, #1
   1fb78:	mov	r3, r0
   1fb7c:	mov	r0, r4
   1fb80:	bl	11dd4 <__fprintf_chk@plt>
   1fb84:	mov	r1, r4
   1fb88:	mov	r0, #10
   1fb8c:	bl	11b4c <fputc_unlocked@plt>
   1fb90:	mov	r2, #5
   1fb94:	ldr	r1, [pc, #752]	; 1fe8c <__assert_fail@plt+0xdf44>
   1fb98:	mov	r0, #0
   1fb9c:	bl	11b58 <dcgettext@plt>
   1fba0:	mov	r1, #1
   1fba4:	ldr	r3, [pc, #740]	; 1fe90 <__assert_fail@plt+0xdf48>
   1fba8:	mov	r2, r0
   1fbac:	mov	r0, r4
   1fbb0:	bl	11dd4 <__fprintf_chk@plt>
   1fbb4:	mov	r1, r4
   1fbb8:	mov	r0, #10
   1fbbc:	bl	11b4c <fputc_unlocked@plt>
   1fbc0:	cmp	r6, #9
   1fbc4:	ldrls	pc, [pc, r6, lsl #2]
   1fbc8:	b	1fe70 <__assert_fail@plt+0xdf28>
   1fbcc:	andeq	pc, r1, r0, asr ip	; <UNPREDICTABLE>
   1fbd0:	andeq	pc, r1, r8, asr ip	; <UNPREDICTABLE>
   1fbd4:	andeq	pc, r1, r4, lsl #25
   1fbd8:			; <UNDEFINED> instruction: 0x0001fcb8
   1fbdc:	strdeq	pc, [r1], -r4
   1fbe0:	andeq	pc, r1, r0, lsr sp	; <UNPREDICTABLE>
   1fbe4:	andeq	pc, r1, ip, ror #26
   1fbe8:			; <UNDEFINED> instruction: 0x0001fdb0
   1fbec:	andeq	pc, r1, r0, lsl #28
   1fbf0:	strdeq	pc, [r1], -r4
   1fbf4:	ldr	r1, [pc, #664]	; 1fe94 <__assert_fail@plt+0xdf4c>
   1fbf8:	mov	r2, #5
   1fbfc:	mov	r0, #0
   1fc00:	bl	11b58 <dcgettext@plt>
   1fc04:	ldr	ip, [r5, #32]
   1fc08:	ldr	r1, [r5, #28]
   1fc0c:	ldr	r2, [r5, #24]
   1fc10:	ldr	r3, [r5]
   1fc14:	ldr	r6, [r5, #20]
   1fc18:	str	ip, [sp, #28]
   1fc1c:	ldr	lr, [r5, #16]
   1fc20:	str	r1, [sp, #24]
   1fc24:	ldr	ip, [r5, #12]
   1fc28:	str	r2, [sp, #20]
   1fc2c:	ldr	r1, [r5, #8]
   1fc30:	ldr	r2, [r5, #4]
   1fc34:	str	r6, [sp, #16]
   1fc38:	stmib	sp, {r1, ip, lr}
   1fc3c:	mov	r1, #1
   1fc40:	str	r2, [sp]
   1fc44:	mov	r2, r0
   1fc48:	mov	r0, r4
   1fc4c:	bl	11dd4 <__fprintf_chk@plt>
   1fc50:	add	sp, sp, #32
   1fc54:	pop	{r4, r5, r6, pc}
   1fc58:	mov	r2, #5
   1fc5c:	ldr	r1, [pc, #564]	; 1fe98 <__assert_fail@plt+0xdf50>
   1fc60:	mov	r0, #0
   1fc64:	bl	11b58 <dcgettext@plt>
   1fc68:	ldr	r3, [r5]
   1fc6c:	mov	r1, #1
   1fc70:	mov	r2, r0
   1fc74:	mov	r0, r4
   1fc78:	add	sp, sp, #32
   1fc7c:	pop	{r4, r5, r6, lr}
   1fc80:	b	11dd4 <__fprintf_chk@plt>
   1fc84:	mov	r2, #5
   1fc88:	ldr	r1, [pc, #524]	; 1fe9c <__assert_fail@plt+0xdf54>
   1fc8c:	mov	r0, #0
   1fc90:	bl	11b58 <dcgettext@plt>
   1fc94:	ldr	r2, [r5, #4]
   1fc98:	ldr	r3, [r5]
   1fc9c:	mov	r1, #1
   1fca0:	str	r2, [sp, #48]	; 0x30
   1fca4:	mov	r2, r0
   1fca8:	mov	r0, r4
   1fcac:	add	sp, sp, #32
   1fcb0:	pop	{r4, r5, r6, lr}
   1fcb4:	b	11dd4 <__fprintf_chk@plt>
   1fcb8:	mov	r2, #5
   1fcbc:	ldr	r1, [pc, #476]	; 1fea0 <__assert_fail@plt+0xdf58>
   1fcc0:	mov	r0, #0
   1fcc4:	bl	11b58 <dcgettext@plt>
   1fcc8:	ldr	r1, [r5, #8]
   1fccc:	ldr	r2, [r5, #4]
   1fcd0:	ldr	r3, [r5]
   1fcd4:	str	r1, [sp, #52]	; 0x34
   1fcd8:	str	r2, [sp, #48]	; 0x30
   1fcdc:	mov	r1, #1
   1fce0:	mov	r2, r0
   1fce4:	mov	r0, r4
   1fce8:	add	sp, sp, #32
   1fcec:	pop	{r4, r5, r6, lr}
   1fcf0:	b	11dd4 <__fprintf_chk@plt>
   1fcf4:	mov	r2, #5
   1fcf8:	ldr	r1, [pc, #420]	; 1fea4 <__assert_fail@plt+0xdf5c>
   1fcfc:	mov	r0, #0
   1fd00:	bl	11b58 <dcgettext@plt>
   1fd04:	ldr	r1, [r5, #8]
   1fd08:	ldr	ip, [r5, #12]
   1fd0c:	ldr	r2, [r5, #4]
   1fd10:	ldr	r3, [r5]
   1fd14:	stmib	sp, {r1, ip}
   1fd18:	str	r2, [sp]
   1fd1c:	mov	r1, #1
   1fd20:	mov	r2, r0
   1fd24:	mov	r0, r4
   1fd28:	bl	11dd4 <__fprintf_chk@plt>
   1fd2c:	b	1fc50 <__assert_fail@plt+0xdd08>
   1fd30:	mov	r2, #5
   1fd34:	ldr	r1, [pc, #364]	; 1fea8 <__assert_fail@plt+0xdf60>
   1fd38:	mov	r0, #0
   1fd3c:	bl	11b58 <dcgettext@plt>
   1fd40:	add	r1, r5, #8
   1fd44:	ldr	r2, [r5, #4]
   1fd48:	ldm	r1, {r1, ip, lr}
   1fd4c:	ldr	r3, [r5]
   1fd50:	str	r2, [sp]
   1fd54:	stmib	sp, {r1, ip, lr}
   1fd58:	mov	r1, #1
   1fd5c:	mov	r2, r0
   1fd60:	mov	r0, r4
   1fd64:	bl	11dd4 <__fprintf_chk@plt>
   1fd68:	b	1fc50 <__assert_fail@plt+0xdd08>
   1fd6c:	mov	r2, #5
   1fd70:	ldr	r1, [pc, #308]	; 1feac <__assert_fail@plt+0xdf64>
   1fd74:	mov	r0, #0
   1fd78:	bl	11b58 <dcgettext@plt>
   1fd7c:	add	r1, r5, #8
   1fd80:	ldr	r2, [r5, #4]
   1fd84:	ldm	r1, {r1, ip, lr}
   1fd88:	ldr	r6, [r5, #20]
   1fd8c:	ldr	r3, [r5]
   1fd90:	stmib	sp, {r1, ip, lr}
   1fd94:	mov	r1, #1
   1fd98:	str	r2, [sp]
   1fd9c:	str	r6, [sp, #16]
   1fda0:	mov	r2, r0
   1fda4:	mov	r0, r4
   1fda8:	bl	11dd4 <__fprintf_chk@plt>
   1fdac:	b	1fc50 <__assert_fail@plt+0xdd08>
   1fdb0:	mov	r2, #5
   1fdb4:	ldr	r1, [pc, #244]	; 1feb0 <__assert_fail@plt+0xdf68>
   1fdb8:	mov	r0, #0
   1fdbc:	bl	11b58 <dcgettext@plt>
   1fdc0:	ldr	r2, [r5, #24]
   1fdc4:	ldr	r3, [r5]
   1fdc8:	ldr	r6, [r5, #20]
   1fdcc:	ldr	lr, [r5, #16]
   1fdd0:	ldr	ip, [r5, #12]
   1fdd4:	str	r2, [sp, #20]
   1fdd8:	ldr	r1, [r5, #8]
   1fddc:	ldr	r2, [r5, #4]
   1fde0:	str	r6, [sp, #16]
   1fde4:	stmib	sp, {r1, ip, lr}
   1fde8:	mov	r1, #1
   1fdec:	str	r2, [sp]
   1fdf0:	mov	r2, r0
   1fdf4:	mov	r0, r4
   1fdf8:	bl	11dd4 <__fprintf_chk@plt>
   1fdfc:	b	1fc50 <__assert_fail@plt+0xdd08>
   1fe00:	mov	r2, #5
   1fe04:	ldr	r1, [pc, #168]	; 1feb4 <__assert_fail@plt+0xdf6c>
   1fe08:	mov	r0, #0
   1fe0c:	bl	11b58 <dcgettext@plt>
   1fe10:	ldr	r1, [r5, #28]
   1fe14:	ldr	r2, [r5, #24]
   1fe18:	ldr	r3, [r5]
   1fe1c:	ldr	r6, [r5, #20]
   1fe20:	ldr	lr, [r5, #16]
   1fe24:	str	r1, [sp, #24]
   1fe28:	ldr	ip, [r5, #12]
   1fe2c:	str	r2, [sp, #20]
   1fe30:	ldr	r1, [r5, #8]
   1fe34:	ldr	r2, [r5, #4]
   1fe38:	str	r6, [sp, #16]
   1fe3c:	stmib	sp, {r1, ip, lr}
   1fe40:	mov	r1, #1
   1fe44:	str	r2, [sp]
   1fe48:	mov	r2, r0
   1fe4c:	mov	r0, r4
   1fe50:	bl	11dd4 <__fprintf_chk@plt>
   1fe54:	b	1fc50 <__assert_fail@plt+0xdd08>
   1fe58:	str	r3, [sp]
   1fe5c:	mov	r1, #1
   1fe60:	mov	r3, r2
   1fe64:	ldr	r2, [pc, #76]	; 1feb8 <__assert_fail@plt+0xdf70>
   1fe68:	bl	11dd4 <__fprintf_chk@plt>
   1fe6c:	b	1fb58 <__assert_fail@plt+0xdc10>
   1fe70:	mov	r2, #5
   1fe74:	ldr	r1, [pc, #64]	; 1febc <__assert_fail@plt+0xdf74>
   1fe78:	b	1fbfc <__assert_fail@plt+0xdcb4>
   1fe7c:	andeq	r4, r2, r4, asr #13
   1fe80:	ldrdeq	r4, [r2], -r8
   1fe84:	andeq	r0, r0, r6, ror #15
   1fe88:			; <UNDEFINED> instruction: 0x000249b0
   1fe8c:	ldrdeq	r4, [r2], -ip
   1fe90:	andeq	r4, r2, r8, lsl #15
   1fe94:			; <UNDEFINED> instruction: 0x000248b8
   1fe98:	andeq	r4, r2, ip, lsr #15
   1fe9c:			; <UNDEFINED> instruction: 0x000247bc
   1fea0:	ldrdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   1fea4:	strdeq	r4, [r2], -r0
   1fea8:	andeq	r4, r2, r0, lsl r8
   1feac:	andeq	r4, r2, r4, lsr r8
   1feb0:	andeq	r4, r2, ip, asr r8
   1feb4:	andeq	r4, r2, r8, lsl #17
   1feb8:	ldrdeq	r4, [r2], -r0
   1febc:	andeq	r4, r2, ip, ror #17
   1fec0:	push	{r4, r5, lr}
   1fec4:	sub	sp, sp, #12
   1fec8:	ldr	r5, [sp, #24]
   1fecc:	ldr	ip, [r5]
   1fed0:	cmp	ip, #0
   1fed4:	beq	1fef0 <__assert_fail@plt+0xdfa8>
   1fed8:	mov	lr, r5
   1fedc:	mov	ip, #0
   1fee0:	ldr	r4, [lr, #4]!
   1fee4:	add	ip, ip, #1
   1fee8:	cmp	r4, #0
   1feec:	bne	1fee0 <__assert_fail@plt+0xdf98>
   1fef0:	stm	sp, {r5, ip}
   1fef4:	bl	1fb28 <__assert_fail@plt+0xdbe0>
   1fef8:	add	sp, sp, #12
   1fefc:	pop	{r4, r5, pc}
   1ff00:	push	{r4, r5, lr}
   1ff04:	sub	sp, sp, #52	; 0x34
   1ff08:	add	r5, sp, #4
   1ff0c:	ldr	r4, [sp, #64]	; 0x40
   1ff10:	mov	ip, #0
   1ff14:	sub	r4, r4, #4
   1ff18:	ldr	lr, [r4, #4]!
   1ff1c:	cmp	lr, #0
   1ff20:	str	lr, [r5, #4]!
   1ff24:	beq	1ff34 <__assert_fail@plt+0xdfec>
   1ff28:	add	ip, ip, #1
   1ff2c:	cmp	ip, #10
   1ff30:	bne	1ff18 <__assert_fail@plt+0xdfd0>
   1ff34:	add	lr, sp, #8
   1ff38:	str	ip, [sp, #4]
   1ff3c:	str	lr, [sp]
   1ff40:	bl	1fb28 <__assert_fail@plt+0xdbe0>
   1ff44:	add	sp, sp, #52	; 0x34
   1ff48:	pop	{r4, r5, pc}
   1ff4c:	push	{r3}		; (str r3, [sp, #-4]!)
   1ff50:	push	{r4, lr}
   1ff54:	sub	sp, sp, #60	; 0x3c
   1ff58:	add	lr, sp, #56	; 0x38
   1ff5c:	add	r3, sp, #72	; 0x48
   1ff60:	str	r3, [lr, #-44]!	; 0xffffffd4
   1ff64:	add	r4, sp, #68	; 0x44
   1ff68:	mov	r3, #0
   1ff6c:	ldr	ip, [r4, #4]!
   1ff70:	cmp	ip, #0
   1ff74:	str	ip, [lr, #4]!
   1ff78:	beq	1ff88 <__assert_fail@plt+0xe040>
   1ff7c:	add	r3, r3, #1
   1ff80:	cmp	r3, #10
   1ff84:	bne	1ff6c <__assert_fail@plt+0xe024>
   1ff88:	add	ip, sp, #16
   1ff8c:	str	r3, [sp, #4]
   1ff90:	str	ip, [sp]
   1ff94:	ldr	r3, [sp, #68]	; 0x44
   1ff98:	bl	1fb28 <__assert_fail@plt+0xdbe0>
   1ff9c:	add	sp, sp, #60	; 0x3c
   1ffa0:	pop	{r4, lr}
   1ffa4:	add	sp, sp, #4
   1ffa8:	bx	lr
   1ffac:	ldr	r3, [pc, #116]	; 20028 <__assert_fail@plt+0xe0e0>
   1ffb0:	push	{r4, lr}
   1ffb4:	mov	r0, #10
   1ffb8:	ldr	r1, [r3]
   1ffbc:	bl	11b4c <fputc_unlocked@plt>
   1ffc0:	mov	r2, #5
   1ffc4:	ldr	r1, [pc, #96]	; 2002c <__assert_fail@plt+0xe0e4>
   1ffc8:	mov	r0, #0
   1ffcc:	bl	11b58 <dcgettext@plt>
   1ffd0:	ldr	r2, [pc, #88]	; 20030 <__assert_fail@plt+0xe0e8>
   1ffd4:	mov	r1, r0
   1ffd8:	mov	r0, #1
   1ffdc:	bl	11db0 <__printf_chk@plt>
   1ffe0:	mov	r2, #5
   1ffe4:	ldr	r1, [pc, #72]	; 20034 <__assert_fail@plt+0xe0ec>
   1ffe8:	mov	r0, #0
   1ffec:	bl	11b58 <dcgettext@plt>
   1fff0:	ldr	r3, [pc, #64]	; 20038 <__assert_fail@plt+0xe0f0>
   1fff4:	ldr	r2, [pc, #64]	; 2003c <__assert_fail@plt+0xe0f4>
   1fff8:	mov	r1, r0
   1fffc:	mov	r0, #1
   20000:	bl	11db0 <__printf_chk@plt>
   20004:	mov	r2, #5
   20008:	ldr	r1, [pc, #48]	; 20040 <__assert_fail@plt+0xe0f8>
   2000c:	mov	r0, #0
   20010:	bl	11b58 <dcgettext@plt>
   20014:	ldr	r2, [pc, #40]	; 20044 <__assert_fail@plt+0xe0fc>
   20018:	pop	{r4, lr}
   2001c:	mov	r1, r0
   20020:	mov	r0, #1
   20024:	b	11db0 <__printf_chk@plt>
   20028:	ldrdeq	r5, [r3], -r4
   2002c:	andeq	r4, r2, r8, lsr #18
   20030:	andeq	r4, r2, ip, lsr r9
   20034:	andeq	r4, r2, r4, asr r9
   20038:	andeq	r3, r2, r4, asr #19
   2003c:	andeq	r3, r2, ip, ror #19
   20040:	andeq	r4, r2, r8, ror #18
   20044:	muleq	r2, r0, r9
   20048:	push	{r4, lr}
   2004c:	bl	20f18 <__assert_fail@plt+0xefd0>
   20050:	cmp	r0, #0
   20054:	popne	{r4, pc}
   20058:	bl	20590 <__assert_fail@plt+0xe648>
   2005c:	push	{r4, lr}
   20060:	bl	20f18 <__assert_fail@plt+0xefd0>
   20064:	cmp	r0, #0
   20068:	popne	{r4, pc}
   2006c:	bl	20590 <__assert_fail@plt+0xe648>
   20070:	push	{r4, lr}
   20074:	bl	20f18 <__assert_fail@plt+0xefd0>
   20078:	cmp	r0, #0
   2007c:	popne	{r4, pc}
   20080:	bl	20590 <__assert_fail@plt+0xe648>
   20084:	push	{r4, r5, r6, lr}
   20088:	mov	r5, r0
   2008c:	mov	r4, r1
   20090:	bl	20f44 <__assert_fail@plt+0xeffc>
   20094:	cmp	r0, #0
   20098:	popne	{r4, r5, r6, pc}
   2009c:	adds	r4, r4, #0
   200a0:	movne	r4, #1
   200a4:	cmp	r5, #0
   200a8:	orreq	r4, r4, #1
   200ac:	cmp	r4, #0
   200b0:	popeq	{r4, r5, r6, pc}
   200b4:	bl	20590 <__assert_fail@plt+0xe648>
   200b8:	push	{r4, lr}
   200bc:	cmp	r1, #0
   200c0:	orreq	r1, r1, #1
   200c4:	bl	20f44 <__assert_fail@plt+0xeffc>
   200c8:	cmp	r0, #0
   200cc:	popne	{r4, pc}
   200d0:	bl	20590 <__assert_fail@plt+0xe648>
   200d4:	push	{r4, r5, r6, lr}
   200d8:	mov	r6, r0
   200dc:	mov	r5, r1
   200e0:	mov	r4, r2
   200e4:	bl	21900 <_obstack_memory_used@@Base+0x34>
   200e8:	cmp	r0, #0
   200ec:	popne	{r4, r5, r6, pc}
   200f0:	cmp	r6, #0
   200f4:	beq	20104 <__assert_fail@plt+0xe1bc>
   200f8:	cmp	r5, #0
   200fc:	cmpne	r4, #0
   20100:	popeq	{r4, r5, r6, pc}
   20104:	bl	20590 <__assert_fail@plt+0xe648>
   20108:	b	200d4 <__assert_fail@plt+0xe18c>
   2010c:	cmp	r2, #0
   20110:	cmpne	r1, #0
   20114:	moveq	r2, #1
   20118:	moveq	r1, r2
   2011c:	push	{r4, lr}
   20120:	bl	21900 <_obstack_memory_used@@Base+0x34>
   20124:	cmp	r0, #0
   20128:	popne	{r4, pc}
   2012c:	bl	20590 <__assert_fail@plt+0xe648>
   20130:	mov	r2, r1
   20134:	mov	r1, r0
   20138:	mov	r0, #0
   2013c:	b	200d4 <__assert_fail@plt+0xe18c>
   20140:	mov	r2, r1
   20144:	mov	r1, r0
   20148:	mov	r0, #0
   2014c:	b	2010c <__assert_fail@plt+0xe1c4>
   20150:	push	{r4, r5, r6, lr}
   20154:	subs	r6, r0, #0
   20158:	sub	sp, sp, #8
   2015c:	mov	r5, r1
   20160:	ldr	r4, [r1]
   20164:	beq	201a0 <__assert_fail@plt+0xe258>
   20168:	lsr	r1, r4, #1
   2016c:	add	r3, r1, #1
   20170:	mvn	r3, r3
   20174:	cmp	r4, r3
   20178:	bhi	2019c <__assert_fail@plt+0xe254>
   2017c:	add	r4, r4, #1
   20180:	add	r4, r4, r1
   20184:	mov	r0, r6
   20188:	mov	r1, r4
   2018c:	bl	200d4 <__assert_fail@plt+0xe18c>
   20190:	str	r4, [r5]
   20194:	add	sp, sp, #8
   20198:	pop	{r4, r5, r6, pc}
   2019c:	bl	20590 <__assert_fail@plt+0xe648>
   201a0:	cmp	r4, #0
   201a4:	bne	20184 <__assert_fail@plt+0xe23c>
   201a8:	mov	r1, r2
   201ac:	mov	r0, #64	; 0x40
   201b0:	str	r2, [sp, #4]
   201b4:	bl	21958 <_obstack_memory_used@@Base+0x8c>
   201b8:	ldr	r2, [sp, #4]
   201bc:	cmp	r0, #0
   201c0:	movne	r4, r0
   201c4:	addeq	r4, r0, #1
   201c8:	b	20184 <__assert_fail@plt+0xe23c>
   201cc:	mov	r2, #1
   201d0:	b	20150 <__assert_fail@plt+0xe208>
   201d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   201d8:	sub	sp, sp, #12
   201dc:	ldr	r6, [r1]
   201e0:	mov	sl, r1
   201e4:	mov	r9, r0
   201e8:	asrs	r4, r6, #1
   201ec:	mov	r5, r2
   201f0:	mov	fp, r3
   201f4:	ldr	r7, [sp, #48]	; 0x30
   201f8:	bmi	20364 <__assert_fail@plt+0xe41c>
   201fc:	mvn	r3, #-2147483648	; 0x80000000
   20200:	sub	r3, r3, r4
   20204:	cmp	r6, r3
   20208:	movle	r3, #0
   2020c:	movgt	r3, #1
   20210:	mvn	r8, fp
   20214:	cmp	r3, #0
   20218:	addeq	r4, r4, r6
   2021c:	mvnne	r4, #-2147483648	; 0x80000000
   20220:	lsr	r8, r8, #31
   20224:	cmp	fp, r4
   20228:	movge	r3, #0
   2022c:	andlt	r3, r8, #1
   20230:	cmp	r3, #0
   20234:	beq	2031c <__assert_fail@plt+0xe3d4>
   20238:	cmp	r7, #0
   2023c:	blt	203ec <__assert_fail@plt+0xe4a4>
   20240:	bne	203e4 <__assert_fail@plt+0xe49c>
   20244:	mov	r2, #64	; 0x40
   20248:	mov	r1, r7
   2024c:	mov	r0, r2
   20250:	str	r2, [sp, #4]
   20254:	bl	21b64 <_obstack_memory_used@@Base+0x298>
   20258:	ldr	r2, [sp, #4]
   2025c:	mov	r1, r7
   20260:	mov	r4, r0
   20264:	mov	r0, r2
   20268:	bl	21d84 <_obstack_memory_used@@Base+0x4b8>
   2026c:	ldr	r2, [sp, #4]
   20270:	sub	r1, r2, r1
   20274:	cmp	r9, #0
   20278:	sub	r3, r4, r6
   2027c:	streq	r9, [sl]
   20280:	cmp	r3, r5
   20284:	bge	20308 <__assert_fail@plt+0xe3c0>
   20288:	cmp	r5, #0
   2028c:	blt	20378 <__assert_fail@plt+0xe430>
   20290:	cmp	r6, #0
   20294:	blt	202b4 <__assert_fail@plt+0xe36c>
   20298:	mvn	r3, #-2147483648	; 0x80000000
   2029c:	sub	r3, r3, r5
   202a0:	cmp	r6, r3
   202a4:	movle	r3, #0
   202a8:	movgt	r3, #1
   202ac:	cmp	r3, #0
   202b0:	bne	20474 <__assert_fail@plt+0xe52c>
   202b4:	add	r5, r6, r5
   202b8:	cmp	fp, r5
   202bc:	movge	r8, #0
   202c0:	andlt	r8, r8, #1
   202c4:	cmp	r8, #0
   202c8:	mov	r4, r5
   202cc:	bne	20474 <__assert_fail@plt+0xe52c>
   202d0:	cmp	r7, #0
   202d4:	blt	2038c <__assert_fail@plt+0xe444>
   202d8:	beq	20304 <__assert_fail@plt+0xe3bc>
   202dc:	cmp	r5, #0
   202e0:	blt	20434 <__assert_fail@plt+0xe4ec>
   202e4:	mov	r1, r7
   202e8:	mvn	r0, #-2147483648	; 0x80000000
   202ec:	bl	21b64 <_obstack_memory_used@@Base+0x298>
   202f0:	cmp	r5, r0
   202f4:	movle	r0, #0
   202f8:	movgt	r0, #1
   202fc:	cmp	r0, #0
   20300:	bne	20474 <__assert_fail@plt+0xe52c>
   20304:	mul	r1, r5, r7
   20308:	mov	r0, r9
   2030c:	bl	20084 <__assert_fail@plt+0xe13c>
   20310:	str	r4, [sl]
   20314:	add	sp, sp, #12
   20318:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2031c:	cmp	r7, #0
   20320:	blt	203b8 <__assert_fail@plt+0xe470>
   20324:	beq	20244 <__assert_fail@plt+0xe2fc>
   20328:	cmp	r4, #0
   2032c:	blt	203f4 <__assert_fail@plt+0xe4ac>
   20330:	mov	r1, r7
   20334:	mvn	r0, #-2147483648	; 0x80000000
   20338:	bl	21b64 <_obstack_memory_used@@Base+0x298>
   2033c:	cmp	r0, r4
   20340:	movge	r0, #0
   20344:	movlt	r0, #1
   20348:	cmp	r0, #0
   2034c:	mvnne	r2, #-2147483648	; 0x80000000
   20350:	bne	20248 <__assert_fail@plt+0xe300>
   20354:	mul	r1, r7, r4
   20358:	cmp	r1, #63	; 0x3f
   2035c:	bgt	20274 <__assert_fail@plt+0xe32c>
   20360:	b	20244 <__assert_fail@plt+0xe2fc>
   20364:	rsb	r3, r4, #-2147483648	; 0x80000000
   20368:	cmp	r6, r3
   2036c:	movge	r3, #0
   20370:	movlt	r3, #1
   20374:	b	20210 <__assert_fail@plt+0xe2c8>
   20378:	rsb	r3, r5, #-2147483648	; 0x80000000
   2037c:	cmp	r6, r3
   20380:	movge	r3, #0
   20384:	movlt	r3, #1
   20388:	b	202ac <__assert_fail@plt+0xe364>
   2038c:	cmp	r5, #0
   20390:	blt	20418 <__assert_fail@plt+0xe4d0>
   20394:	cmn	r7, #1
   20398:	beq	20304 <__assert_fail@plt+0xe3bc>
   2039c:	mov	r1, r7
   203a0:	mov	r0, #-2147483648	; 0x80000000
   203a4:	bl	21b64 <_obstack_memory_used@@Base+0x298>
   203a8:	cmp	r5, r0
   203ac:	movle	r0, #0
   203b0:	movgt	r0, #1
   203b4:	b	202fc <__assert_fail@plt+0xe3b4>
   203b8:	cmp	r4, #0
   203bc:	blt	20458 <__assert_fail@plt+0xe510>
   203c0:	cmn	r7, #1
   203c4:	beq	20354 <__assert_fail@plt+0xe40c>
   203c8:	mov	r1, r7
   203cc:	mov	r0, #-2147483648	; 0x80000000
   203d0:	bl	21b64 <_obstack_memory_used@@Base+0x298>
   203d4:	cmp	r0, r4
   203d8:	movge	r0, #0
   203dc:	movlt	r0, #1
   203e0:	b	20348 <__assert_fail@plt+0xe400>
   203e4:	mov	r4, fp
   203e8:	b	20330 <__assert_fail@plt+0xe3e8>
   203ec:	mov	r4, fp
   203f0:	b	203c0 <__assert_fail@plt+0xe478>
   203f4:	cmn	r4, #1
   203f8:	beq	20354 <__assert_fail@plt+0xe40c>
   203fc:	mov	r1, r4
   20400:	mov	r0, #-2147483648	; 0x80000000
   20404:	bl	21b64 <_obstack_memory_used@@Base+0x298>
   20408:	cmp	r7, r0
   2040c:	movle	r0, #0
   20410:	movgt	r0, #1
   20414:	b	20348 <__assert_fail@plt+0xe400>
   20418:	mov	r1, r7
   2041c:	mvn	r0, #-2147483648	; 0x80000000
   20420:	bl	21b64 <_obstack_memory_used@@Base+0x298>
   20424:	cmp	r5, r0
   20428:	movge	r0, #0
   2042c:	movlt	r0, #1
   20430:	b	202fc <__assert_fail@plt+0xe3b4>
   20434:	cmn	r5, #1
   20438:	beq	20304 <__assert_fail@plt+0xe3bc>
   2043c:	mov	r1, r5
   20440:	mov	r0, #-2147483648	; 0x80000000
   20444:	bl	21b64 <_obstack_memory_used@@Base+0x298>
   20448:	cmp	r7, r0
   2044c:	movle	r0, #0
   20450:	movgt	r0, #1
   20454:	b	202fc <__assert_fail@plt+0xe3b4>
   20458:	mov	r1, r7
   2045c:	mvn	r0, #-2147483648	; 0x80000000
   20460:	bl	21b64 <_obstack_memory_used@@Base+0x298>
   20464:	cmp	r0, r4
   20468:	movle	r0, #0
   2046c:	movgt	r0, #1
   20470:	b	20348 <__assert_fail@plt+0xe400>
   20474:	bl	20590 <__assert_fail@plt+0xe648>
   20478:	push	{r4, lr}
   2047c:	mov	r1, #1
   20480:	bl	20ed0 <__assert_fail@plt+0xef88>
   20484:	cmp	r0, #0
   20488:	popne	{r4, pc}
   2048c:	bl	20590 <__assert_fail@plt+0xe648>
   20490:	push	{r4, lr}
   20494:	mov	r1, #1
   20498:	bl	20ed0 <__assert_fail@plt+0xef88>
   2049c:	cmp	r0, #0
   204a0:	popne	{r4, pc}
   204a4:	bl	20590 <__assert_fail@plt+0xe648>
   204a8:	push	{r4, lr}
   204ac:	bl	20ed0 <__assert_fail@plt+0xef88>
   204b0:	cmp	r0, #0
   204b4:	popne	{r4, pc}
   204b8:	bl	20590 <__assert_fail@plt+0xe648>
   204bc:	push	{r4, lr}
   204c0:	bl	20ed0 <__assert_fail@plt+0xef88>
   204c4:	cmp	r0, #0
   204c8:	popne	{r4, pc}
   204cc:	bl	20590 <__assert_fail@plt+0xe648>
   204d0:	push	{r4, r5, r6, lr}
   204d4:	mov	r6, r0
   204d8:	mov	r0, r1
   204dc:	mov	r4, r1
   204e0:	bl	20f18 <__assert_fail@plt+0xefd0>
   204e4:	subs	r5, r0, #0
   204e8:	beq	20500 <__assert_fail@plt+0xe5b8>
   204ec:	mov	r2, r4
   204f0:	mov	r1, r6
   204f4:	bl	11ac8 <memcpy@plt>
   204f8:	mov	r0, r5
   204fc:	pop	{r4, r5, r6, pc}
   20500:	bl	20590 <__assert_fail@plt+0xe648>
   20504:	push	{r4, r5, r6, lr}
   20508:	mov	r6, r0
   2050c:	mov	r0, r1
   20510:	mov	r4, r1
   20514:	bl	20f18 <__assert_fail@plt+0xefd0>
   20518:	subs	r5, r0, #0
   2051c:	beq	20534 <__assert_fail@plt+0xe5ec>
   20520:	mov	r2, r4
   20524:	mov	r1, r6
   20528:	bl	11ac8 <memcpy@plt>
   2052c:	mov	r0, r5
   20530:	pop	{r4, r5, r6, pc}
   20534:	bl	20590 <__assert_fail@plt+0xe648>
   20538:	push	{r4, r5, r6, lr}
   2053c:	mov	r6, r0
   20540:	add	r0, r1, #1
   20544:	mov	r4, r1
   20548:	bl	20f18 <__assert_fail@plt+0xefd0>
   2054c:	subs	r5, r0, #0
   20550:	beq	20570 <__assert_fail@plt+0xe628>
   20554:	mov	r3, #0
   20558:	mov	r1, r6
   2055c:	strb	r3, [r5, r4]
   20560:	mov	r2, r4
   20564:	bl	11ac8 <memcpy@plt>
   20568:	mov	r0, r5
   2056c:	pop	{r4, r5, r6, pc}
   20570:	bl	20590 <__assert_fail@plt+0xe648>
   20574:	push	{r4, lr}
   20578:	mov	r4, r0
   2057c:	bl	11d50 <strlen@plt>
   20580:	add	r1, r0, #1
   20584:	mov	r0, r4
   20588:	pop	{r4, lr}
   2058c:	b	204d0 <__assert_fail@plt+0xe588>
   20590:	ldr	r3, [pc, #44]	; 205c4 <__assert_fail@plt+0xe67c>
   20594:	push	{r4, lr}
   20598:	mov	r2, #5
   2059c:	ldr	r1, [pc, #36]	; 205c8 <__assert_fail@plt+0xe680>
   205a0:	mov	r0, #0
   205a4:	ldr	r4, [r3]
   205a8:	bl	11b58 <dcgettext@plt>
   205ac:	ldr	r2, [pc, #24]	; 205cc <__assert_fail@plt+0xe684>
   205b0:	mov	r1, #0
   205b4:	mov	r3, r0
   205b8:	mov	r0, r4
   205bc:	bl	11c90 <error@plt>
   205c0:	bl	11f24 <abort@plt>
   205c4:	andeq	r5, r3, r0, ror r2
   205c8:	andeq	r4, r2, r0, ror #19
   205cc:	andeq	r2, r2, r0, ror #17
   205d0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   205d4:	mov	r4, r0
   205d8:	mov	r6, r1
   205dc:	mov	r9, r2
   205e0:	ldr	r1, [pc, #164]	; 2068c <__assert_fail@plt+0xe744>
   205e4:	mov	r2, #5
   205e8:	mov	r0, #0
   205ec:	mov	r7, r3
   205f0:	ldr	r8, [sp, #32]
   205f4:	bl	11b58 <dcgettext@plt>
   205f8:	mov	r1, r4
   205fc:	mov	r2, r0
   20600:	mov	r0, #0
   20604:	bl	11c90 <error@plt>
   20608:	mov	r2, #5
   2060c:	ldr	r1, [pc, #124]	; 20690 <__assert_fail@plt+0xe748>
   20610:	mov	r0, #0
   20614:	bl	11b58 <dcgettext@plt>
   20618:	mov	r1, #0
   2061c:	mov	r2, r0
   20620:	mov	r0, r1
   20624:	bl	11c90 <error@plt>
   20628:	ldr	r3, [pc, #100]	; 20694 <__assert_fail@plt+0xe74c>
   2062c:	mov	r2, #5
   20630:	ldr	r1, [pc, #96]	; 20698 <__assert_fail@plt+0xe750>
   20634:	mov	r0, #0
   20638:	ldr	r4, [r3]
   2063c:	bl	11b58 <dcgettext@plt>
   20640:	mov	r3, r9
   20644:	mov	r2, r6
   20648:	mov	r1, #8
   2064c:	mov	r5, r0
   20650:	mov	r0, #0
   20654:	bl	1e7a8 <__assert_fail@plt+0xc860>
   20658:	mov	r3, r8
   2065c:	mov	r2, r7
   20660:	mov	r1, #8
   20664:	mov	r6, r0
   20668:	mov	r0, #1
   2066c:	bl	1e7a8 <__assert_fail@plt+0xc860>
   20670:	mov	r3, r6
   20674:	mov	r2, r5
   20678:	mov	r1, #0
   2067c:	str	r0, [sp, #32]
   20680:	mov	r0, r4
   20684:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   20688:	b	11c90 <error@plt>
   2068c:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   20690:	andeq	r4, r2, r0, lsl sl
   20694:	andeq	r5, r3, r0, ror r2
   20698:	andeq	r4, r2, ip, lsr sl
   2069c:	push	{r4, r5, r6, r7, r8, lr}
   206a0:	sub	sp, sp, #8
   206a4:	mov	r6, r1
   206a8:	mov	r7, r2
   206ac:	mov	r8, r3
   206b0:	mov	r5, r0
   206b4:	bl	214c8 <__assert_fail@plt+0xf580>
   206b8:	mov	r4, r0
   206bc:	bl	11d74 <__errno_location@plt>
   206c0:	ldr	r0, [r0]
   206c4:	cmp	r0, #0
   206c8:	beq	206e0 <__assert_fail@plt+0xe798>
   206cc:	str	r8, [sp]
   206d0:	mov	r3, r7
   206d4:	mov	r2, r6
   206d8:	mov	r1, r5
   206dc:	bl	205d0 <__assert_fail@plt+0xe688>
   206e0:	mov	r0, r4
   206e4:	add	sp, sp, #8
   206e8:	pop	{r4, r5, r6, r7, r8, pc}
   206ec:	push	{r4, r5, r6, r7, r8, lr}
   206f0:	sub	sp, sp, #8
   206f4:	mov	r7, r1
   206f8:	mov	r8, r2
   206fc:	mov	r4, r3
   20700:	mov	r6, r0
   20704:	bl	21544 <__assert_fail@plt+0xf5fc>
   20708:	mov	r5, r0
   2070c:	bl	11d74 <__errno_location@plt>
   20710:	ldr	r0, [r0]
   20714:	cmp	r0, #0
   20718:	beq	20734 <__assert_fail@plt+0xe7ec>
   2071c:	sub	r4, r4, #1
   20720:	str	r4, [sp]
   20724:	mov	r3, r8
   20728:	sub	r2, r7, #1
   2072c:	mov	r1, r6
   20730:	bl	205d0 <__assert_fail@plt+0xe688>
   20734:	mov	r0, r5
   20738:	add	sp, sp, #8
   2073c:	pop	{r4, r5, r6, r7, r8, pc}
   20740:	vldr	d7, [pc, #144]	; 207d8 <__assert_fail@plt+0xe890>
   20744:	push	{r4, r5, lr}
   20748:	vpush	{d8}
   2074c:	vmov.f64	d8, d0
   20750:	vcmpe.f64	d0, d7
   20754:	sub	sp, sp, #12
   20758:	vmrs	APSR_nzcv, fpscr
   2075c:	bge	207ac <__assert_fail@plt+0xe864>
   20760:	bl	11d74 <__errno_location@plt>
   20764:	mov	r4, r0
   20768:	vmov.f64	d0, d8
   2076c:	mov	r0, sp
   20770:	bl	21020 <__assert_fail@plt+0xf0d8>
   20774:	mov	r5, #0
   20778:	b	20788 <__assert_fail@plt+0xe840>
   2077c:	ldr	r3, [r4]
   20780:	bics	r3, r3, #4
   20784:	bne	207c8 <__assert_fail@plt+0xe880>
   20788:	str	r5, [r4]
   2078c:	mov	r1, sp
   20790:	mov	r0, sp
   20794:	bl	11aa4 <nanosleep@plt>
   20798:	cmp	r0, #0
   2079c:	bne	2077c <__assert_fail@plt+0xe834>
   207a0:	add	sp, sp, #12
   207a4:	vpop	{d8}
   207a8:	pop	{r4, r5, pc}
   207ac:	bl	11d74 <__errno_location@plt>
   207b0:	mov	r4, r0
   207b4:	bl	11a50 <pause@plt>
   207b8:	ldr	r3, [r4]
   207bc:	cmp	r3, #4
   207c0:	beq	207b4 <__assert_fail@plt+0xe86c>
   207c4:	b	20768 <__assert_fail@plt+0xe820>
   207c8:	mvn	r0, #0
   207cc:	add	sp, sp, #12
   207d0:	vpop	{d8}
   207d4:	pop	{r4, r5, pc}
   207d8:	andeq	r0, r0, r0
   207dc:	mvnmi	r0, r0
   207e0:	ldr	ip, [pc, #148]	; 2087c <__assert_fail@plt+0xe934>
   207e4:	sub	r0, r0, #1
   207e8:	push	{lr}		; (str lr, [sp, #-4]!)
   207ec:	sub	sp, sp, #20
   207f0:	ldr	r5, [ip]
   207f4:	cmp	r0, #3
   207f8:	ldrls	pc, [pc, r0, lsl #2]
   207fc:	b	20868 <__assert_fail@plt+0xe920>
   20800:	andeq	r0, r2, r4, ror r8
   20804:	andeq	r0, r2, ip, ror #16
   20808:	andeq	r0, r2, ip, ror #16
   2080c:	andeq	r0, r2, r0, lsl r8
   20810:	ldr	r0, [pc, #104]	; 20880 <__assert_fail@plt+0xe938>
   20814:	cmp	r1, #0
   20818:	movlt	r3, #0
   2081c:	ldrlt	r4, [pc, #96]	; 20884 <__assert_fail@plt+0xe93c>
   20820:	ldrge	r6, [r3, r1, lsl #4]
   20824:	sublt	r4, r4, r1
   20828:	strblt	r2, [sp, #12]
   2082c:	mov	r1, r0
   20830:	mov	r2, #5
   20834:	mov	r0, #0
   20838:	strblt	r3, [sp, #13]
   2083c:	addlt	r6, sp, #12
   20840:	ldrge	r4, [pc, #60]	; 20884 <__assert_fail@plt+0xe93c>
   20844:	bl	11b58 <dcgettext@plt>
   20848:	ldr	r3, [sp, #24]
   2084c:	str	r6, [sp]
   20850:	str	r3, [sp, #4]
   20854:	mov	r1, #0
   20858:	mov	r3, r4
   2085c:	mov	r2, r0
   20860:	mov	r0, r5
   20864:	bl	11c90 <error@plt>
   20868:	bl	11f24 <abort@plt>
   2086c:	ldr	r0, [pc, #20]	; 20888 <__assert_fail@plt+0xe940>
   20870:	b	20814 <__assert_fail@plt+0xe8cc>
   20874:	ldr	r0, [pc, #16]	; 2088c <__assert_fail@plt+0xe944>
   20878:	b	20814 <__assert_fail@plt+0xe8cc>
   2087c:	andeq	r5, r3, r0, ror r2
   20880:	andeq	r4, r2, r4, ror #20
   20884:	andeq	r4, r2, r8, asr #21
   20888:	andeq	r4, r2, r0, lsl #21
   2088c:	andeq	r4, r2, r8, lsr #21
   20890:	push	{r4, r5, r6, r7, r8, lr}
   20894:	subs	r5, r1, #0
   20898:	mov	r4, r0
   2089c:	blt	20910 <__assert_fail@plt+0xe9c8>
   208a0:	moveq	r6, #0
   208a4:	moveq	r7, #0
   208a8:	bne	208d0 <__assert_fail@plt+0xe988>
   208ac:	ldr	r2, [r4]
   208b0:	ldr	r1, [r4, #4]
   208b4:	mov	r0, #0
   208b8:	mul	ip, r2, r7
   208bc:	umull	r2, r3, r2, r5
   208c0:	mla	r5, r5, r1, ip
   208c4:	add	r3, r5, r3
   208c8:	strd	r2, [r4]
   208cc:	pop	{r4, r5, r6, r7, r8, pc}
   208d0:	asr	r7, r5, #31
   208d4:	mov	r2, r5
   208d8:	mov	r3, r7
   208dc:	mvn	r0, #0
   208e0:	mvn	r1, #0
   208e4:	bl	2215c <_obstack_memory_used@@Base+0x890>
   208e8:	ldrd	r2, [r4]
   208ec:	mov	r6, r5
   208f0:	cmp	r1, r3
   208f4:	cmpeq	r0, r2
   208f8:	bcs	208ac <__assert_fail@plt+0xe964>
   208fc:	mvn	r2, #0
   20900:	mvn	r3, #0
   20904:	mov	r0, #1
   20908:	strd	r2, [r4]
   2090c:	pop	{r4, r5, r6, r7, r8, pc}
   20910:	ldrd	r2, [r0]
   20914:	orrs	r3, r2, r3
   20918:	moveq	r6, r5
   2091c:	asreq	r7, r6, #31
   20920:	bne	208fc <__assert_fail@plt+0xe9b4>
   20924:	b	208ac <__assert_fail@plt+0xe964>
   20928:	cmp	r2, #36	; 0x24
   2092c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20930:	sub	sp, sp, #20
   20934:	bhi	20ea8 <__assert_fail@plt+0xef60>
   20938:	cmp	r1, #0
   2093c:	mov	r8, r2
   20940:	mov	r7, r0
   20944:	mov	r5, r1
   20948:	mov	r6, r3
   2094c:	addeq	r5, sp, #4
   20950:	bl	11d74 <__errno_location@plt>
   20954:	mov	r3, #0
   20958:	str	r3, [r0]
   2095c:	mov	r9, r0
   20960:	bl	11d2c <__ctype_b_loc@plt>
   20964:	ldrb	r3, [r7]
   20968:	mov	r2, r7
   2096c:	ldr	r0, [r0]
   20970:	b	20978 <__assert_fail@plt+0xea30>
   20974:	ldrb	r3, [r2, #1]!
   20978:	lsl	r1, r3, #1
   2097c:	ldrh	r4, [r0, r1]
   20980:	ands	r4, r4, #8192	; 0x2000
   20984:	bne	20974 <__assert_fail@plt+0xea2c>
   20988:	cmp	r3, #45	; 0x2d
   2098c:	bne	209a0 <__assert_fail@plt+0xea58>
   20990:	mov	r4, #4
   20994:	mov	r0, r4
   20998:	add	sp, sp, #20
   2099c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   209a0:	mov	r2, r8
   209a4:	mov	r3, r4
   209a8:	mov	r1, r5
   209ac:	mov	r0, r7
   209b0:	bl	11aec <__strtoull_internal@plt>
   209b4:	ldr	r8, [r5]
   209b8:	cmp	r7, r8
   209bc:	mov	r2, r0
   209c0:	str	r0, [sp, #8]
   209c4:	str	r1, [sp, #12]
   209c8:	beq	20a14 <__assert_fail@plt+0xeacc>
   209cc:	ldr	r4, [r9]
   209d0:	cmp	r4, #0
   209d4:	bne	20a04 <__assert_fail@plt+0xeabc>
   209d8:	ldr	r3, [sp, #56]	; 0x38
   209dc:	cmp	r3, #0
   209e0:	beq	209f0 <__assert_fail@plt+0xeaa8>
   209e4:	ldrb	r9, [r8]
   209e8:	cmp	r9, #0
   209ec:	bne	20a4c <__assert_fail@plt+0xeb04>
   209f0:	mov	r0, r4
   209f4:	str	r2, [r6]
   209f8:	str	r1, [r6, #4]
   209fc:	add	sp, sp, #20
   20a00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20a04:	cmp	r4, #34	; 0x22
   20a08:	bne	20990 <__assert_fail@plt+0xea48>
   20a0c:	mov	r4, #1
   20a10:	b	209d8 <__assert_fail@plt+0xea90>
   20a14:	ldr	r3, [sp, #56]	; 0x38
   20a18:	cmp	r3, #0
   20a1c:	beq	20990 <__assert_fail@plt+0xea48>
   20a20:	ldrb	r1, [r8]
   20a24:	cmp	r1, #0
   20a28:	beq	20990 <__assert_fail@plt+0xea48>
   20a2c:	mov	r0, r3
   20a30:	bl	11d5c <strchr@plt>
   20a34:	cmp	r0, #0
   20a38:	beq	20990 <__assert_fail@plt+0xea48>
   20a3c:	ldrb	r9, [r8]
   20a40:	mov	r2, #1
   20a44:	mov	r3, #0
   20a48:	strd	r2, [sp, #8]
   20a4c:	mov	r1, r9
   20a50:	ldr	r0, [sp, #56]	; 0x38
   20a54:	bl	11d5c <strchr@plt>
   20a58:	cmp	r0, #0
   20a5c:	beq	20e64 <__assert_fail@plt+0xef1c>
   20a60:	sub	r3, r9, #69	; 0x45
   20a64:	cmp	r3, #47	; 0x2f
   20a68:	ldrls	pc, [pc, r3, lsl #2]
   20a6c:	b	20b30 <__assert_fail@plt+0xebe8>
   20a70:	andeq	r0, r2, r0, lsr #24
   20a74:	andeq	r0, r2, r0, lsr fp
   20a78:	andeq	r0, r2, r0, lsr #24
   20a7c:	andeq	r0, r2, r0, lsr fp
   20a80:	andeq	r0, r2, r0, lsr fp
   20a84:	andeq	r0, r2, r0, lsr fp
   20a88:	andeq	r0, r2, r0, lsr #24
   20a8c:	andeq	r0, r2, r0, lsr fp
   20a90:	andeq	r0, r2, r0, lsr #24
   20a94:	andeq	r0, r2, r0, lsr fp
   20a98:	andeq	r0, r2, r0, lsr fp
   20a9c:	andeq	r0, r2, r0, lsr #24
   20aa0:	andeq	r0, r2, r0, lsr fp
   20aa4:	andeq	r0, r2, r0, lsr fp
   20aa8:	andeq	r0, r2, r0, lsr fp
   20aac:	andeq	r0, r2, r0, lsr #24
   20ab0:	andeq	r0, r2, r0, lsr fp
   20ab4:	andeq	r0, r2, r0, lsr fp
   20ab8:	andeq	r0, r2, r0, lsr fp
   20abc:	andeq	r0, r2, r0, lsr fp
   20ac0:	andeq	r0, r2, r0, lsr #24
   20ac4:	andeq	r0, r2, r0, lsr #24
   20ac8:	andeq	r0, r2, r0, lsr fp
   20acc:	andeq	r0, r2, r0, lsr fp
   20ad0:	andeq	r0, r2, r0, lsr fp
   20ad4:	andeq	r0, r2, r0, lsr fp
   20ad8:	andeq	r0, r2, r0, lsr fp
   20adc:	andeq	r0, r2, r0, lsr fp
   20ae0:	andeq	r0, r2, r0, lsr fp
   20ae4:	andeq	r0, r2, r0, lsr fp
   20ae8:	andeq	r0, r2, r0, lsr fp
   20aec:	andeq	r0, r2, r0, lsr fp
   20af0:	andeq	r0, r2, r0, lsr fp
   20af4:	andeq	r0, r2, r0, lsr fp
   20af8:	andeq	r0, r2, r0, lsr #24
   20afc:	andeq	r0, r2, r0, lsr fp
   20b00:	andeq	r0, r2, r0, lsr fp
   20b04:	andeq	r0, r2, r0, lsr fp
   20b08:	andeq	r0, r2, r0, lsr #24
   20b0c:	andeq	r0, r2, r0, lsr fp
   20b10:	andeq	r0, r2, r0, lsr #24
   20b14:	andeq	r0, r2, r0, lsr fp
   20b18:	andeq	r0, r2, r0, lsr fp
   20b1c:	andeq	r0, r2, r0, lsr fp
   20b20:	andeq	r0, r2, r0, lsr fp
   20b24:	andeq	r0, r2, r0, lsr fp
   20b28:	andeq	r0, r2, r0, lsr fp
   20b2c:	andeq	r0, r2, r0, lsr #24
   20b30:	mov	r7, #1
   20b34:	mov	sl, #1024	; 0x400
   20b38:	sub	r9, r9, #66	; 0x42
   20b3c:	cmp	r9, #53	; 0x35
   20b40:	ldrls	pc, [pc, r9, lsl #2]
   20b44:	b	20e64 <__assert_fail@plt+0xef1c>
   20b48:			; <UNDEFINED> instruction: 0x00020db0
   20b4c:	andeq	r0, r2, r4, ror #28
   20b50:	andeq	r0, r2, r4, ror #28
   20b54:	andeq	r0, r2, r8, lsl #27
   20b58:	andeq	r0, r2, r4, ror #28
   20b5c:	andeq	r0, r2, r0, ror #26
   20b60:	andeq	r0, r2, r4, ror #28
   20b64:	andeq	r0, r2, r4, ror #28
   20b68:	andeq	r0, r2, r4, ror #28
   20b6c:	andeq	r0, r2, r0, asr #26
   20b70:	andeq	r0, r2, r4, ror #28
   20b74:	andeq	r0, r2, ip, lsl #28
   20b78:	andeq	r0, r2, r4, ror #28
   20b7c:	andeq	r0, r2, r4, ror #28
   20b80:	andeq	r0, r2, r4, ror #27
   20b84:	andeq	r0, r2, r4, ror #28
   20b88:	andeq	r0, r2, r4, ror #28
   20b8c:	andeq	r0, r2, r4, ror #28
   20b90:	andeq	r0, r2, ip, lsr lr
   20b94:	andeq	r0, r2, r4, ror #28
   20b98:	andeq	r0, r2, r4, ror #28
   20b9c:	andeq	r0, r2, r4, ror #28
   20ba0:	andeq	r0, r2, r4, ror #28
   20ba4:	andeq	r0, r2, r8, lsl sp
   20ba8:	andeq	r0, r2, r4, ror #25
   20bac:	andeq	r0, r2, r4, ror #28
   20bb0:	andeq	r0, r2, r4, ror #28
   20bb4:	andeq	r0, r2, r4, ror #28
   20bb8:	andeq	r0, r2, r4, ror #28
   20bbc:	andeq	r0, r2, r4, ror #28
   20bc0:	andeq	r0, r2, r4, ror #28
   20bc4:	andeq	r0, r2, r4, ror #28
   20bc8:			; <UNDEFINED> instruction: 0x00020cb0
   20bcc:	andeq	r0, r2, r0, lsr #25
   20bd0:	andeq	r0, r2, r4, ror #28
   20bd4:	andeq	r0, r2, r4, ror #28
   20bd8:	andeq	r0, r2, r4, ror #28
   20bdc:	andeq	r0, r2, r0, ror #26
   20be0:	andeq	r0, r2, r4, ror #28
   20be4:	andeq	r0, r2, r4, ror #28
   20be8:	andeq	r0, r2, r4, ror #28
   20bec:	andeq	r0, r2, r0, asr #26
   20bf0:	andeq	r0, r2, r4, ror #28
   20bf4:	andeq	r0, r2, ip, lsl #28
   20bf8:	andeq	r0, r2, r4, ror #28
   20bfc:	andeq	r0, r2, r4, ror #28
   20c00:	andeq	r0, r2, r4, ror #28
   20c04:	andeq	r0, r2, r4, ror #28
   20c08:	andeq	r0, r2, r4, ror #28
   20c0c:	andeq	r0, r2, r4, ror #28
   20c10:	andeq	r0, r2, ip, lsr lr
   20c14:	andeq	r0, r2, r4, ror #28
   20c18:	andeq	r0, r2, r4, ror #28
   20c1c:	andeq	r0, r2, ip, asr ip
   20c20:	mov	r1, #48	; 0x30
   20c24:	ldr	r0, [sp, #56]	; 0x38
   20c28:	bl	11d5c <strchr@plt>
   20c2c:	cmp	r0, #0
   20c30:	beq	20b30 <__assert_fail@plt+0xebe8>
   20c34:	ldrb	r3, [r8, #1]
   20c38:	cmp	r3, #68	; 0x44
   20c3c:	beq	20c50 <__assert_fail@plt+0xed08>
   20c40:	cmp	r3, #105	; 0x69
   20c44:	beq	20e74 <__assert_fail@plt+0xef2c>
   20c48:	cmp	r3, #66	; 0x42
   20c4c:	bne	20b30 <__assert_fail@plt+0xebe8>
   20c50:	mov	r7, #2
   20c54:	mov	sl, #1000	; 0x3e8
   20c58:	b	20b38 <__assert_fail@plt+0xebf0>
   20c5c:	ldrd	r2, [sp, #8]
   20c60:	cmp	r2, #0
   20c64:	sbcs	r1, r3, #0
   20c68:	blt	20e8c <__assert_fail@plt+0xef44>
   20c6c:	adds	r2, r2, r2
   20c70:	adc	r3, r3, r3
   20c74:	mov	r1, r3
   20c78:	mov	r9, #0
   20c7c:	str	r2, [sp, #8]
   20c80:	str	r3, [sp, #12]
   20c84:	add	r3, r8, r7
   20c88:	str	r3, [r5]
   20c8c:	ldrb	r3, [r8, r7]
   20c90:	orr	r4, r4, r9
   20c94:	cmp	r3, #0
   20c98:	orrne	r4, r4, #2
   20c9c:	b	209f0 <__assert_fail@plt+0xeaa8>
   20ca0:	ldr	r2, [sp, #8]
   20ca4:	ldr	r1, [sp, #12]
   20ca8:	mov	r9, #0
   20cac:	b	20c84 <__assert_fail@plt+0xed3c>
   20cb0:	ldrd	r2, [sp, #8]
   20cb4:	ldr	r1, [pc, #512]	; 20ebc <__assert_fail@plt+0xef74>
   20cb8:	mvn	r0, #0
   20cbc:	cmp	r3, r1
   20cc0:	cmpeq	r2, r0
   20cc4:	bhi	20e8c <__assert_fail@plt+0xef44>
   20cc8:	lsl	r1, r3, #9
   20ccc:	orr	r1, r1, r2, lsr #23
   20cd0:	lsl	r2, r2, #9
   20cd4:	str	r1, [sp, #12]
   20cd8:	str	r2, [sp, #8]
   20cdc:	mov	r9, #0
   20ce0:	b	20c84 <__assert_fail@plt+0xed3c>
   20ce4:	mov	fp, #7
   20ce8:	mov	r9, #0
   20cec:	add	r8, sp, #8
   20cf0:	mov	r1, sl
   20cf4:	mov	r0, r8
   20cf8:	bl	20890 <__assert_fail@plt+0xe948>
   20cfc:	subs	fp, fp, #1
   20d00:	orr	r9, r9, r0
   20d04:	bne	20cf0 <__assert_fail@plt+0xeda8>
   20d08:	ldr	r8, [r5]
   20d0c:	ldr	r2, [sp, #8]
   20d10:	ldr	r1, [sp, #12]
   20d14:	b	20c84 <__assert_fail@plt+0xed3c>
   20d18:	mov	fp, #8
   20d1c:	mov	r9, #0
   20d20:	add	r8, sp, fp
   20d24:	mov	r1, sl
   20d28:	mov	r0, r8
   20d2c:	bl	20890 <__assert_fail@plt+0xe948>
   20d30:	subs	fp, fp, #1
   20d34:	orr	r9, r9, r0
   20d38:	bne	20d24 <__assert_fail@plt+0xeddc>
   20d3c:	b	20d08 <__assert_fail@plt+0xedc0>
   20d40:	mov	r1, sl
   20d44:	add	r0, sp, #8
   20d48:	bl	20890 <__assert_fail@plt+0xe948>
   20d4c:	ldr	r8, [r5]
   20d50:	ldr	r2, [sp, #8]
   20d54:	ldr	r1, [sp, #12]
   20d58:	mov	r9, r0
   20d5c:	b	20c84 <__assert_fail@plt+0xed3c>
   20d60:	mov	fp, #3
   20d64:	mov	r9, #0
   20d68:	add	r8, sp, #8
   20d6c:	mov	r1, sl
   20d70:	mov	r0, r8
   20d74:	bl	20890 <__assert_fail@plt+0xe948>
   20d78:	subs	fp, fp, #1
   20d7c:	orr	r9, r9, r0
   20d80:	bne	20d6c <__assert_fail@plt+0xee24>
   20d84:	b	20d08 <__assert_fail@plt+0xedc0>
   20d88:	mov	fp, #6
   20d8c:	mov	r9, #0
   20d90:	add	r8, sp, #8
   20d94:	mov	r1, sl
   20d98:	mov	r0, r8
   20d9c:	bl	20890 <__assert_fail@plt+0xe948>
   20da0:	subs	fp, fp, #1
   20da4:	orr	r9, r9, r0
   20da8:	bne	20d94 <__assert_fail@plt+0xee4c>
   20dac:	b	20d08 <__assert_fail@plt+0xedc0>
   20db0:	ldrd	r0, [sp, #8]
   20db4:	ldr	r3, [pc, #260]	; 20ec0 <__assert_fail@plt+0xef78>
   20db8:	mvn	r2, #0
   20dbc:	cmp	r1, r3
   20dc0:	cmpeq	r0, r2
   20dc4:	bhi	20e8c <__assert_fail@plt+0xef44>
   20dc8:	lsl	r1, r1, #10
   20dcc:	orr	r1, r1, r0, lsr #22
   20dd0:	lsl	r2, r0, #10
   20dd4:	str	r1, [sp, #12]
   20dd8:	str	r2, [sp, #8]
   20ddc:	mov	r9, #0
   20de0:	b	20c84 <__assert_fail@plt+0xed3c>
   20de4:	mov	fp, #5
   20de8:	mov	r9, #0
   20dec:	add	r8, sp, #8
   20df0:	mov	r1, sl
   20df4:	mov	r0, r8
   20df8:	bl	20890 <__assert_fail@plt+0xe948>
   20dfc:	subs	fp, fp, #1
   20e00:	orr	r9, r9, r0
   20e04:	bne	20df0 <__assert_fail@plt+0xeea8>
   20e08:	b	20d08 <__assert_fail@plt+0xedc0>
   20e0c:	mov	r1, sl
   20e10:	add	r0, sp, #8
   20e14:	bl	20890 <__assert_fail@plt+0xe948>
   20e18:	mov	r1, sl
   20e1c:	mov	r9, r0
   20e20:	add	r0, sp, #8
   20e24:	bl	20890 <__assert_fail@plt+0xe948>
   20e28:	ldr	r8, [r5]
   20e2c:	ldr	r2, [sp, #8]
   20e30:	ldr	r1, [sp, #12]
   20e34:	orr	r9, r9, r0
   20e38:	b	20c84 <__assert_fail@plt+0xed3c>
   20e3c:	mov	fp, #4
   20e40:	mov	r9, #0
   20e44:	add	r8, sp, #8
   20e48:	mov	r1, sl
   20e4c:	mov	r0, r8
   20e50:	bl	20890 <__assert_fail@plt+0xe948>
   20e54:	subs	fp, fp, #1
   20e58:	orr	r9, r9, r0
   20e5c:	bne	20e48 <__assert_fail@plt+0xef00>
   20e60:	b	20d08 <__assert_fail@plt+0xedc0>
   20e64:	ldrd	r2, [sp, #8]
   20e68:	orr	r4, r4, #2
   20e6c:	strd	r2, [r6]
   20e70:	b	20994 <__assert_fail@plt+0xea4c>
   20e74:	ldrb	r7, [r8, #2]
   20e78:	mov	sl, #1024	; 0x400
   20e7c:	cmp	r7, #66	; 0x42
   20e80:	movne	r7, #1
   20e84:	moveq	r7, #3
   20e88:	b	20b38 <__assert_fail@plt+0xebf0>
   20e8c:	mvn	r1, #0
   20e90:	mvn	r0, #0
   20e94:	mvn	r2, #0
   20e98:	strd	r0, [sp, #8]
   20e9c:	mov	r9, #1
   20ea0:	mov	r1, r2
   20ea4:	b	20c84 <__assert_fail@plt+0xed3c>
   20ea8:	ldr	r3, [pc, #20]	; 20ec4 <__assert_fail@plt+0xef7c>
   20eac:	mov	r2, #85	; 0x55
   20eb0:	ldr	r1, [pc, #16]	; 20ec8 <__assert_fail@plt+0xef80>
   20eb4:	ldr	r0, [pc, #16]	; 20ecc <__assert_fail@plt+0xef84>
   20eb8:	bl	11f48 <__assert_fail@plt>
   20ebc:	ldrshteq	pc, [pc], #-255	; <UNPREDICTABLE>
   20ec0:	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
   20ec4:	andeq	r4, r2, ip, asr #21
   20ec8:	ldrdeq	r4, [r2], -r8
   20ecc:	andeq	r4, r2, r8, ror #21
   20ed0:	cmp	r1, #0
   20ed4:	cmpne	r0, #0
   20ed8:	moveq	r1, #1
   20edc:	moveq	r0, r1
   20ee0:	umull	r2, r3, r0, r1
   20ee4:	adds	r3, r3, #0
   20ee8:	movne	r3, #1
   20eec:	cmp	r2, #0
   20ef0:	blt	20f00 <__assert_fail@plt+0xefb8>
   20ef4:	cmp	r3, #0
   20ef8:	bne	20f00 <__assert_fail@plt+0xefb8>
   20efc:	b	11a08 <calloc@plt>
   20f00:	push	{r4, lr}
   20f04:	bl	11d74 <__errno_location@plt>
   20f08:	mov	r3, #12
   20f0c:	str	r3, [r0]
   20f10:	mov	r0, #0
   20f14:	pop	{r4, pc}
   20f18:	cmp	r0, #0
   20f1c:	moveq	r0, #1
   20f20:	cmp	r0, #0
   20f24:	blt	20f2c <__assert_fail@plt+0xefe4>
   20f28:	b	11cd8 <malloc@plt>
   20f2c:	push	{r4, lr}
   20f30:	bl	11d74 <__errno_location@plt>
   20f34:	mov	r3, #12
   20f38:	str	r3, [r0]
   20f3c:	mov	r0, #0
   20f40:	pop	{r4, pc}
   20f44:	cmp	r0, #0
   20f48:	beq	20f6c <__assert_fail@plt+0xf024>
   20f4c:	cmp	r1, #0
   20f50:	push	{lr}		; (str lr, [sp, #-4]!)
   20f54:	sub	sp, sp, #12
   20f58:	beq	20f74 <__assert_fail@plt+0xf02c>
   20f5c:	blt	20f8c <__assert_fail@plt+0xf044>
   20f60:	add	sp, sp, #12
   20f64:	pop	{lr}		; (ldr lr, [sp], #4)
   20f68:	b	11ba0 <realloc@plt>
   20f6c:	mov	r0, r1
   20f70:	b	20f18 <__assert_fail@plt+0xefd0>
   20f74:	str	r1, [sp, #4]
   20f78:	bl	1afe8 <__assert_fail@plt+0x90a0>
   20f7c:	ldr	r3, [sp, #4]
   20f80:	mov	r0, r3
   20f84:	add	sp, sp, #12
   20f88:	pop	{pc}		; (ldr pc, [sp], #4)
   20f8c:	bl	11d74 <__errno_location@plt>
   20f90:	mov	r2, #12
   20f94:	mov	r3, #0
   20f98:	str	r2, [r0]
   20f9c:	b	20f80 <__assert_fail@plt+0xf038>
   20fa0:	push	{r4, r5, r6, lr}
   20fa4:	mov	r4, r0
   20fa8:	bl	11c78 <__fpending@plt>
   20fac:	ldr	r5, [r4]
   20fb0:	and	r5, r5, #32
   20fb4:	mov	r6, r0
   20fb8:	mov	r0, r4
   20fbc:	bl	1a9e4 <__assert_fail@plt+0x8a9c>
   20fc0:	cmp	r5, #0
   20fc4:	mov	r4, r0
   20fc8:	bne	20fe8 <__assert_fail@plt+0xf0a0>
   20fcc:	cmp	r0, #0
   20fd0:	beq	20fe0 <__assert_fail@plt+0xf098>
   20fd4:	cmp	r6, #0
   20fd8:	beq	21004 <__assert_fail@plt+0xf0bc>
   20fdc:	mvn	r4, #0
   20fe0:	mov	r0, r4
   20fe4:	pop	{r4, r5, r6, pc}
   20fe8:	cmp	r0, #0
   20fec:	bne	20fdc <__assert_fail@plt+0xf094>
   20ff0:	bl	11d74 <__errno_location@plt>
   20ff4:	str	r4, [r0]
   20ff8:	mvn	r4, #0
   20ffc:	mov	r0, r4
   21000:	pop	{r4, r5, r6, pc}
   21004:	bl	11d74 <__errno_location@plt>
   21008:	ldr	r4, [r0]
   2100c:	subs	r4, r4, #9
   21010:	mvnne	r4, #0
   21014:	mov	r0, r4
   21018:	pop	{r4, r5, r6, pc}
   2101c:	andeq	r0, r0, r0
   21020:	vldr	d7, [pc, #160]	; 210c8 <__assert_fail@plt+0xf180>
   21024:	vcmpe.f64	d0, d7
   21028:	vmrs	APSR_nzcv, fpscr
   2102c:	ble	210b8 <__assert_fail@plt+0xf170>
   21030:	vldr	d7, [pc, #152]	; 210d0 <__assert_fail@plt+0xf188>
   21034:	vcmpe.f64	d0, d7
   21038:	vmrs	APSR_nzcv, fpscr
   2103c:	bpl	210a8 <__assert_fail@plt+0xf160>
   21040:	vcvt.s32.f64	s14, d0
   21044:	vldr	d6, [pc, #140]	; 210d8 <__assert_fail@plt+0xf190>
   21048:	ldr	r2, [pc, #144]	; 210e0 <__assert_fail@plt+0xf198>
   2104c:	ldr	ip, [pc, #144]	; 210e4 <__assert_fail@plt+0xf19c>
   21050:	vcvt.f64.s32	d5, s14
   21054:	vsub.f64	d0, d0, d5
   21058:	vmul.f64	d0, d0, d6
   2105c:	vcvt.s32.f64	s15, d0
   21060:	vcvt.f64.s32	d6, s15
   21064:	vmov	r1, s15
   21068:	vcmpe.f64	d0, d6
   2106c:	vmrs	APSR_nzcv, fpscr
   21070:	movgt	r3, #1
   21074:	movle	r3, #0
   21078:	add	r3, r1, r3
   2107c:	smull	r2, r1, r2, r3
   21080:	asr	r2, r3, #31
   21084:	rsb	r2, r2, r1, asr #28
   21088:	vmov	r1, s14
   2108c:	add	r1, r2, r1
   21090:	mul	r2, ip, r2
   21094:	subs	r3, r3, r2
   21098:	submi	r1, r1, #1
   2109c:	addmi	r3, r3, ip
   210a0:	stm	r0, {r1, r3}
   210a4:	bx	lr
   210a8:	ldr	r3, [pc, #56]	; 210e8 <__assert_fail@plt+0xf1a0>
   210ac:	mvn	r2, #-2147483648	; 0x80000000
   210b0:	stm	r0, {r2, r3}
   210b4:	bx	lr
   210b8:	mov	r2, #-2147483648	; 0x80000000
   210bc:	mov	r3, #0
   210c0:	stm	r0, {r2, r3}
   210c4:	bx	lr
   210c8:	andeq	r0, r0, r0
   210cc:	mvngt	r0, r0
   210d0:	andeq	r0, r0, r0
   210d4:	mvnmi	r0, r0
   210d8:	andeq	r0, r0, r0
   210dc:	bicmi	ip, sp, r5, ror #26
   210e0:	ldrtmi	r2, [r8], #4001	; 0xfa1
   210e4:	blcc	fe6d38ec <optarg@@GLIBC_2.4+0xfe69e614>
   210e8:	blcc	fe6d38ec <optarg@@GLIBC_2.4+0xfe69e614>
   210ec:	push	{r1, r2, r3}
   210f0:	push	{r4, r5, r6, r7, lr}
   210f4:	sub	sp, sp, #8
   210f8:	add	r3, sp, #32
   210fc:	ldr	r1, [sp, #28]
   21100:	str	r3, [sp, #4]
   21104:	cmp	r1, #0
   21108:	beq	211a0 <__assert_fail@plt+0xf258>
   2110c:	ldr	r2, [pc, #412]	; 212b0 <__assert_fail@plt+0xf368>
   21110:	mov	r5, r0
   21114:	cmp	r1, r2
   21118:	bne	21164 <__assert_fail@plt+0xf21c>
   2111c:	ldr	r6, [pc, #400]	; 212b4 <__assert_fail@plt+0xf36c>
   21120:	ldr	r7, [r3]
   21124:	add	r2, sp, #36	; 0x24
   21128:	ldr	r3, [r6]
   2112c:	str	r2, [sp, #4]
   21130:	cmp	r3, #0
   21134:	mov	r2, r7
   21138:	blt	21264 <__assert_fail@plt+0xf31c>
   2113c:	bl	11e10 <fcntl64@plt>
   21140:	subs	r4, r0, #0
   21144:	blt	211e8 <__assert_fail@plt+0xf2a0>
   21148:	mov	r3, #1
   2114c:	str	r3, [r6]
   21150:	mov	r0, r4
   21154:	add	sp, sp, #8
   21158:	pop	{r4, r5, r6, r7, lr}
   2115c:	add	sp, sp, #12
   21160:	bx	lr
   21164:	cmp	r1, #11
   21168:	beq	21190 <__assert_fail@plt+0xf248>
   2116c:	bgt	211b0 <__assert_fail@plt+0xf268>
   21170:	cmp	r1, #3
   21174:	beq	21190 <__assert_fail@plt+0xf248>
   21178:	ble	212a4 <__assert_fail@plt+0xf35c>
   2117c:	cmp	r1, #8
   21180:	beq	211d0 <__assert_fail@plt+0xf288>
   21184:	ble	211d0 <__assert_fail@plt+0xf288>
   21188:	cmp	r1, #9
   2118c:	bne	211d0 <__assert_fail@plt+0xf288>
   21190:	mov	r0, r5
   21194:	bl	11e10 <fcntl64@plt>
   21198:	mov	r4, r0
   2119c:	b	21150 <__assert_fail@plt+0xf208>
   211a0:	ldr	r2, [sp, #32]
   211a4:	bl	11e10 <fcntl64@plt>
   211a8:	mov	r4, r0
   211ac:	b	21150 <__assert_fail@plt+0xf208>
   211b0:	ldr	r3, [pc, #256]	; 212b8 <__assert_fail@plt+0xf370>
   211b4:	cmp	r1, r3
   211b8:	bgt	21284 <__assert_fail@plt+0xf33c>
   211bc:	cmp	r1, r2
   211c0:	bge	211d0 <__assert_fail@plt+0xf288>
   211c4:	sub	r3, r3, #6
   211c8:	cmp	r1, r3
   211cc:	beq	21190 <__assert_fail@plt+0xf248>
   211d0:	ldr	r3, [sp, #4]
   211d4:	mov	r0, r5
   211d8:	ldr	r2, [r3]
   211dc:	bl	11e10 <fcntl64@plt>
   211e0:	mov	r4, r0
   211e4:	b	21150 <__assert_fail@plt+0xf208>
   211e8:	bl	11d74 <__errno_location@plt>
   211ec:	ldr	r3, [r0]
   211f0:	cmp	r3, #22
   211f4:	bne	21148 <__assert_fail@plt+0xf200>
   211f8:	mov	r2, r7
   211fc:	mov	r0, r5
   21200:	mov	r1, #0
   21204:	bl	11e10 <fcntl64@plt>
   21208:	subs	r4, r0, #0
   2120c:	blt	21150 <__assert_fail@plt+0xf208>
   21210:	mvn	r3, #0
   21214:	str	r3, [r6]
   21218:	mov	r1, #1
   2121c:	mov	r0, r4
   21220:	bl	11e10 <fcntl64@plt>
   21224:	subs	r2, r0, #0
   21228:	blt	21244 <__assert_fail@plt+0xf2fc>
   2122c:	orr	r2, r2, #1
   21230:	mov	r1, #2
   21234:	mov	r0, r4
   21238:	bl	11e10 <fcntl64@plt>
   2123c:	cmn	r0, #1
   21240:	bne	21150 <__assert_fail@plt+0xf208>
   21244:	bl	11d74 <__errno_location@plt>
   21248:	mov	r5, r0
   2124c:	mov	r0, r4
   21250:	ldr	r6, [r5]
   21254:	mvn	r4, #0
   21258:	bl	11f30 <close@plt>
   2125c:	str	r6, [r5]
   21260:	b	21150 <__assert_fail@plt+0xf208>
   21264:	mov	r1, #0
   21268:	bl	11e10 <fcntl64@plt>
   2126c:	subs	r4, r0, #0
   21270:	blt	21150 <__assert_fail@plt+0xf208>
   21274:	ldr	r3, [r6]
   21278:	cmn	r3, #1
   2127c:	beq	21218 <__assert_fail@plt+0xf2d0>
   21280:	b	21150 <__assert_fail@plt+0xf208>
   21284:	ldr	r3, [pc, #48]	; 212bc <__assert_fail@plt+0xf374>
   21288:	cmp	r1, r3
   2128c:	beq	211d0 <__assert_fail@plt+0xf288>
   21290:	blt	21190 <__assert_fail@plt+0xf248>
   21294:	add	r3, r3, #1
   21298:	cmp	r1, r3
   2129c:	bne	211d0 <__assert_fail@plt+0xf288>
   212a0:	b	21190 <__assert_fail@plt+0xf248>
   212a4:	cmp	r1, #1
   212a8:	bne	211d0 <__assert_fail@plt+0xf288>
   212ac:	b	21190 <__assert_fail@plt+0xf248>
   212b0:	andeq	r0, r0, r6, lsl #8
   212b4:	andeq	r5, r3, r0, lsl #20
   212b8:	andeq	r0, r0, r7, lsl #8
   212bc:	andeq	r0, r0, r9, lsl #8
   212c0:	cmp	r0, #2
   212c4:	push	{r4, r5, r6, r7, r8, lr}
   212c8:	mov	r4, r0
   212cc:	bhi	212f4 <__assert_fail@plt+0xf3ac>
   212d0:	bl	212fc <__assert_fail@plt+0xf3b4>
   212d4:	mov	r7, r0
   212d8:	bl	11d74 <__errno_location@plt>
   212dc:	mov	r5, r0
   212e0:	mov	r0, r4
   212e4:	ldr	r6, [r5]
   212e8:	mov	r4, r7
   212ec:	bl	11f30 <close@plt>
   212f0:	str	r6, [r5]
   212f4:	mov	r0, r4
   212f8:	pop	{r4, r5, r6, r7, r8, pc}
   212fc:	ldr	r3, [pc, #12]	; 21310 <__assert_fail@plt+0xf3c8>
   21300:	ands	r1, r1, #524288	; 0x80000
   21304:	movne	r1, r3
   21308:	mov	r2, #3
   2130c:	b	210ec <__assert_fail@plt+0xf1a4>
   21310:	andeq	r0, r0, r6, lsl #8
   21314:	push	{r4, r5, r6, lr}
   21318:	mov	r5, r1
   2131c:	bl	11e94 <fopen64@plt>
   21320:	subs	r4, r0, #0
   21324:	beq	21334 <__assert_fail@plt+0xf3ec>
   21328:	bl	11dc8 <fileno@plt>
   2132c:	cmp	r0, #2
   21330:	bls	2133c <__assert_fail@plt+0xf3f4>
   21334:	mov	r0, r4
   21338:	pop	{r4, r5, r6, pc}
   2133c:	bl	2194c <_obstack_memory_used@@Base+0x80>
   21340:	subs	r6, r0, #0
   21344:	blt	2138c <__assert_fail@plt+0xf444>
   21348:	mov	r0, r4
   2134c:	bl	1a9e4 <__assert_fail@plt+0x8a9c>
   21350:	cmp	r0, #0
   21354:	bne	2136c <__assert_fail@plt+0xf424>
   21358:	mov	r1, r5
   2135c:	mov	r0, r6
   21360:	bl	119fc <fdopen@plt>
   21364:	subs	r4, r0, #0
   21368:	bne	21334 <__assert_fail@plt+0xf3ec>
   2136c:	bl	11d74 <__errno_location@plt>
   21370:	mov	r4, #0
   21374:	mov	r5, r0
   21378:	mov	r0, r6
   2137c:	ldr	r6, [r5]
   21380:	bl	11f30 <close@plt>
   21384:	str	r6, [r5]
   21388:	b	21334 <__assert_fail@plt+0xf3ec>
   2138c:	bl	11d74 <__errno_location@plt>
   21390:	mov	r5, r0
   21394:	mov	r0, r4
   21398:	ldr	r6, [r5]
   2139c:	mov	r4, #0
   213a0:	bl	1a9e4 <__assert_fail@plt+0x8a9c>
   213a4:	str	r6, [r5]
   213a8:	b	21334 <__assert_fail@plt+0xf3ec>
   213ac:	push	{r4, lr}
   213b0:	mov	r0, #14
   213b4:	bl	11e70 <nl_langinfo@plt>
   213b8:	cmp	r0, #0
   213bc:	beq	213d4 <__assert_fail@plt+0xf48c>
   213c0:	ldrb	r2, [r0]
   213c4:	ldr	r3, [pc, #16]	; 213dc <__assert_fail@plt+0xf494>
   213c8:	cmp	r2, #0
   213cc:	moveq	r0, r3
   213d0:	pop	{r4, pc}
   213d4:	ldr	r0, [pc]	; 213dc <__assert_fail@plt+0xf494>
   213d8:	pop	{r4, pc}
   213dc:	andeq	r4, r2, r0, lsl fp
   213e0:	push	{r4, r5, r6, r7, lr}
   213e4:	subs	r6, r0, #0
   213e8:	sub	sp, sp, #12
   213ec:	addeq	r6, sp, #4
   213f0:	mov	r0, r6
   213f4:	mov	r5, r2
   213f8:	mov	r7, r1
   213fc:	bl	11c84 <mbrtowc@plt>
   21400:	cmp	r5, #0
   21404:	cmnne	r0, #3
   21408:	mov	r4, r0
   2140c:	bls	21428 <__assert_fail@plt+0xf4e0>
   21410:	mov	r0, #0
   21414:	bl	1b0e0 <__assert_fail@plt+0x9198>
   21418:	cmp	r0, #0
   2141c:	moveq	r4, #1
   21420:	ldrbeq	r3, [r7]
   21424:	streq	r3, [r6]
   21428:	mov	r0, r4
   2142c:	add	sp, sp, #12
   21430:	pop	{r4, r5, r6, r7, pc}
   21434:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   21438:	mov	r4, r0
   2143c:	mov	r7, r1
   21440:	mov	r5, r2
   21444:	mov	r8, r3
   21448:	bl	11d74 <__errno_location@plt>
   2144c:	mov	sl, #0
   21450:	mov	r9, r0
   21454:	b	21488 <__assert_fail@plt+0xf540>
   21458:	bl	11d50 <strlen@plt>
   2145c:	add	r6, r0, #1
   21460:	mov	r0, r5
   21464:	bl	11d50 <strlen@plt>
   21468:	subs	r7, r7, r6
   2146c:	add	r4, r4, r6
   21470:	add	r0, r0, #1
   21474:	add	r5, r5, r0
   21478:	sub	r8, r8, r0
   2147c:	beq	214ac <__assert_fail@plt+0xf564>
   21480:	cmp	r8, #0
   21484:	beq	214bc <__assert_fail@plt+0xf574>
   21488:	str	sl, [r9]
   2148c:	mov	r1, r5
   21490:	mov	r0, r4
   21494:	bl	11ca8 <strcoll@plt>
   21498:	subs	r3, r0, #0
   2149c:	mov	r0, r4
   214a0:	beq	21458 <__assert_fail@plt+0xf510>
   214a4:	mov	r0, r3
   214a8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   214ac:	adds	r3, r8, #0
   214b0:	mvnne	r3, #0
   214b4:	mov	r0, r3
   214b8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   214bc:	mov	r3, #1
   214c0:	mov	r0, r3
   214c4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   214c8:	cmp	r1, r3
   214cc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   214d0:	mov	r4, r1
   214d4:	mov	r5, r3
   214d8:	mov	r6, r2
   214dc:	mov	r7, r0
   214e0:	beq	21520 <__assert_fail@plt+0xf5d8>
   214e4:	mov	r1, #0
   214e8:	ldrb	sl, [r7, r4]
   214ec:	ldrb	r9, [r6, r5]
   214f0:	add	r3, r5, #1
   214f4:	strb	r1, [r7, r4]
   214f8:	mov	r2, r6
   214fc:	strb	r1, [r6, r5]
   21500:	mov	r0, r7
   21504:	add	r1, r4, #1
   21508:	bl	21434 <__assert_fail@plt+0xf4ec>
   2150c:	strb	sl, [r7, r4]
   21510:	strb	r9, [r6, r5]
   21514:	mov	r8, r0
   21518:	mov	r0, r8
   2151c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   21520:	mov	r2, r1
   21524:	mov	r1, r6
   21528:	bl	11b40 <memcmp@plt>
   2152c:	subs	r8, r0, #0
   21530:	bne	214e4 <__assert_fail@plt+0xf59c>
   21534:	bl	11d74 <__errno_location@plt>
   21538:	str	r8, [r0]
   2153c:	mov	r0, r8
   21540:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   21544:	cmp	r1, r3
   21548:	push	{r4, r5, r6, r7, r8, lr}
   2154c:	mov	r4, r1
   21550:	mov	r5, r3
   21554:	mov	r6, r2
   21558:	mov	r7, r0
   2155c:	beq	21578 <__assert_fail@plt+0xf630>
   21560:	mov	r3, r5
   21564:	mov	r2, r6
   21568:	mov	r1, r4
   2156c:	mov	r0, r7
   21570:	pop	{r4, r5, r6, r7, r8, lr}
   21574:	b	21434 <__assert_fail@plt+0xf4ec>
   21578:	mov	r2, r1
   2157c:	mov	r1, r6
   21580:	bl	11b40 <memcmp@plt>
   21584:	subs	r8, r0, #0
   21588:	bne	21560 <__assert_fail@plt+0xf618>
   2158c:	bl	11d74 <__errno_location@plt>
   21590:	str	r8, [r0]
   21594:	mov	r0, r8
   21598:	pop	{r4, r5, r6, r7, r8, pc}
   2159c:	ldr	r3, [pc, #52]	; 215d8 <__assert_fail@plt+0xf690>
   215a0:	push	{r4, lr}
   215a4:	mov	r2, #5
   215a8:	ldr	r1, [pc, #44]	; 215dc <__assert_fail@plt+0xf694>
   215ac:	mov	r0, #0
   215b0:	ldr	r4, [r3]
   215b4:	bl	11b58 <dcgettext@plt>
   215b8:	ldr	r2, [pc, #32]	; 215e0 <__assert_fail@plt+0xf698>
   215bc:	mov	r1, #1
   215c0:	mov	r3, r0
   215c4:	mov	r0, r4
   215c8:	bl	11dd4 <__fprintf_chk@plt>
   215cc:	ldr	r3, [pc, #16]	; 215e4 <__assert_fail@plt+0xf69c>
   215d0:	ldr	r0, [r3]
   215d4:	bl	11d38 <exit@plt>
   215d8:	andeq	r5, r3, r8, asr #5
   215dc:	andeq	r4, r2, r0, ror #19
   215e0:	andeq	r4, r2, ip, asr #13
   215e4:	andeq	r5, r3, r0, ror r2
   215e8:	ldrb	r3, [r0, #40]	; 0x28
   215ec:	tst	r3, #1
   215f0:	ldr	r3, [r0, #28]
   215f4:	bne	21600 <__assert_fail@plt+0xf6b8>
   215f8:	mov	r0, r1
   215fc:	bx	r3
   21600:	ldr	r0, [r0, #36]	; 0x24
   21604:	bx	r3
   21608:	ldrb	r3, [r0, #40]	; 0x28
   2160c:	tst	r3, #1
   21610:	ldr	r3, [r0, #32]
   21614:	bne	21620 <__assert_fail@plt+0xf6d8>
   21618:	mov	r0, r1
   2161c:	bx	r3
   21620:	ldr	r0, [r0, #36]	; 0x24
   21624:	bx	r3
   21628:	push	{r4, r5, r6, lr}
   2162c:	subs	r5, r2, #0
   21630:	ldr	r3, [pc, #124]	; 216b4 <__assert_fail@plt+0xf76c>
   21634:	subne	r6, r5, #1
   21638:	moveq	r6, #7
   2163c:	moveq	r5, #8
   21640:	cmp	r1, #0
   21644:	moveq	r1, r3
   21648:	str	r6, [r0, #24]
   2164c:	str	r1, [r0]
   21650:	mov	r4, r0
   21654:	bl	215e8 <__assert_fail@plt+0xf6a0>
   21658:	cmp	r0, #0
   2165c:	str	r0, [r4, #4]
   21660:	beq	216a8 <__assert_fail@plt+0xf760>
   21664:	ldr	r3, [r4]
   21668:	add	r2, r0, #8
   2166c:	rsb	r5, r5, #0
   21670:	add	r2, r2, r6
   21674:	add	r3, r0, r3
   21678:	and	r2, r2, r5
   2167c:	mov	r1, #0
   21680:	str	r2, [r4, #8]
   21684:	str	r2, [r4, #12]
   21688:	str	r3, [r0]
   2168c:	str	r3, [r4, #16]
   21690:	str	r1, [r0, #4]
   21694:	ldrb	r3, [r4, #40]	; 0x28
   21698:	mov	r0, #1
   2169c:	and	r3, r3, #249	; 0xf9
   216a0:	strb	r3, [r4, #40]	; 0x28
   216a4:	pop	{r4, r5, r6, pc}
   216a8:	ldr	r3, [pc, #8]	; 216b8 <__assert_fail@plt+0xf770>
   216ac:	ldr	r3, [r3]
   216b0:	blx	r3
   216b4:	andeq	r0, r0, r8, ror #31
   216b8:			; <UNDEFINED> instruction: 0x000352b4

000216bc <_obstack_begin@@Base>:
   216bc:	push	{r4, lr}
   216c0:	ldrb	lr, [r0, #40]	; 0x28
   216c4:	ldr	r4, [sp, #8]
   216c8:	str	r3, [r0, #28]
   216cc:	bic	lr, lr, #1
   216d0:	str	r4, [r0, #32]
   216d4:	strb	lr, [r0, #40]	; 0x28
   216d8:	pop	{r4, lr}
   216dc:	b	21628 <__assert_fail@plt+0xf6e0>

000216e0 <_obstack_begin_1@@Base>:
   216e0:	push	{r4, r5, lr}
   216e4:	ldrb	lr, [r0, #40]	; 0x28
   216e8:	ldr	r5, [sp, #12]
   216ec:	ldr	r4, [sp, #16]
   216f0:	orr	lr, lr, #1
   216f4:	str	r3, [r0, #28]
   216f8:	str	r5, [r0, #32]
   216fc:	str	r4, [r0, #36]	; 0x24
   21700:	strb	lr, [r0, #40]	; 0x28
   21704:	pop	{r4, r5, lr}
   21708:	b	21628 <__assert_fail@plt+0xf6e0>

0002170c <_obstack_newchunk@@Base>:
   2170c:	ldr	r2, [r0, #8]
   21710:	push	{r4, r5, r6, r7, r8, lr}
   21714:	ldr	r6, [r0, #12]
   21718:	ldr	r3, [r0, #24]
   2171c:	sub	r6, r6, r2
   21720:	add	r1, r6, r1
   21724:	adds	r3, r1, r3
   21728:	movcc	r2, #1
   2172c:	movcs	r2, #0
   21730:	cmp	r6, r1
   21734:	movhi	r1, #0
   21738:	andls	r1, r2, #1
   2173c:	cmp	r1, #0
   21740:	bne	21750 <_obstack_newchunk@@Base+0x44>
   21744:	ldr	r3, [pc, #204]	; 21818 <_obstack_newchunk@@Base+0x10c>
   21748:	ldr	r3, [r3]
   2174c:	blx	r3
   21750:	ldr	r5, [r0]
   21754:	add	r1, r3, r6, lsr #3
   21758:	cmp	r3, r5
   2175c:	movcc	r3, r5
   21760:	add	r1, r1, #100	; 0x64
   21764:	cmp	r3, r1
   21768:	movcs	r5, r3
   2176c:	movcc	r5, r1
   21770:	mov	r1, r5
   21774:	mov	r4, r0
   21778:	ldr	r7, [r0, #4]
   2177c:	bl	215e8 <__assert_fail@plt+0xf6a0>
   21780:	subs	r8, r0, #0
   21784:	beq	21744 <_obstack_newchunk@@Base+0x38>
   21788:	ldr	r2, [r4, #24]
   2178c:	mov	r3, r8
   21790:	add	r1, r8, r5
   21794:	str	r8, [r4, #4]
   21798:	str	r7, [r8, #4]
   2179c:	str	r1, [r4, #16]
   217a0:	str	r1, [r3], #8
   217a4:	add	r3, r3, r2
   217a8:	bic	r5, r3, r2
   217ac:	mov	r0, r5
   217b0:	mov	r2, r6
   217b4:	ldr	r1, [r4, #8]
   217b8:	bl	11ac8 <memcpy@plt>
   217bc:	ldrb	r3, [r4, #40]	; 0x28
   217c0:	tst	r3, #2
   217c4:	bne	217e4 <_obstack_newchunk@@Base+0xd8>
   217c8:	ldr	r2, [r4, #24]
   217cc:	add	r3, r7, #8
   217d0:	add	r3, r3, r2
   217d4:	ldr	r1, [r4, #8]
   217d8:	bic	r3, r3, r2
   217dc:	cmp	r1, r3
   217e0:	beq	21800 <_obstack_newchunk@@Base+0xf4>
   217e4:	ldrb	r3, [r4, #40]	; 0x28
   217e8:	add	r2, r5, r6
   217ec:	str	r2, [r4, #12]
   217f0:	bic	r3, r3, #2
   217f4:	str	r5, [r4, #8]
   217f8:	strb	r3, [r4, #40]	; 0x28
   217fc:	pop	{r4, r5, r6, r7, r8, pc}
   21800:	ldr	r3, [r7, #4]
   21804:	mov	r1, r7
   21808:	str	r3, [r8, #4]
   2180c:	mov	r0, r4
   21810:	bl	21608 <__assert_fail@plt+0xf6c0>
   21814:	b	217e4 <_obstack_newchunk@@Base+0xd8>
   21818:			; <UNDEFINED> instruction: 0x000352b4

0002181c <_obstack_allocated_p@@Base>:
   2181c:	ldr	r0, [r0, #4]
   21820:	cmp	r0, #0
   21824:	bne	21838 <_obstack_allocated_p@@Base+0x1c>
   21828:	b	21854 <_obstack_allocated_p@@Base+0x38>
   2182c:	ldr	r0, [r0, #4]
   21830:	cmp	r0, #0
   21834:	bxeq	lr
   21838:	cmp	r1, r0
   2183c:	bls	2182c <_obstack_allocated_p@@Base+0x10>
   21840:	ldr	r3, [r0]
   21844:	cmp	r1, r3
   21848:	bhi	2182c <_obstack_allocated_p@@Base+0x10>
   2184c:	mov	r0, #1
   21850:	bx	lr
   21854:	bx	lr

00021858 <_obstack_free@@Base>:
   21858:	push	{r4, r5, r6, lr}
   2185c:	mov	r6, r1
   21860:	ldr	r4, [r0, #4]
   21864:	cmp	r4, #0
   21868:	movne	r5, r0
   2186c:	beq	218a8 <_obstack_free@@Base+0x50>
   21870:	cmp	r6, r4
   21874:	bls	21884 <_obstack_free@@Base+0x2c>
   21878:	ldr	r2, [r4]
   2187c:	cmp	r6, r2
   21880:	bls	218b4 <_obstack_free@@Base+0x5c>
   21884:	mov	r1, r4
   21888:	mov	r0, r5
   2188c:	ldr	r4, [r4, #4]
   21890:	bl	21608 <__assert_fail@plt+0xf6c0>
   21894:	ldrb	r2, [r5, #40]	; 0x28
   21898:	cmp	r4, #0
   2189c:	orr	r2, r2, #2
   218a0:	strb	r2, [r5, #40]	; 0x28
   218a4:	bne	21870 <_obstack_free@@Base+0x18>
   218a8:	cmp	r6, #0
   218ac:	bne	218c8 <_obstack_free@@Base+0x70>
   218b0:	pop	{r4, r5, r6, pc}
   218b4:	str	r6, [r5, #12]
   218b8:	str	r6, [r5, #8]
   218bc:	str	r2, [r5, #16]
   218c0:	str	r4, [r5, #4]
   218c4:	pop	{r4, r5, r6, pc}
   218c8:	bl	11f24 <abort@plt>

000218cc <_obstack_memory_used@@Base>:
   218cc:	ldr	r3, [r0, #4]
   218d0:	cmp	r3, #0
   218d4:	beq	218f8 <_obstack_memory_used@@Base+0x2c>
   218d8:	mov	r0, #0
   218dc:	ldr	r2, [r3]
   218e0:	sub	r2, r2, r3
   218e4:	ldr	r3, [r3, #4]
   218e8:	add	r0, r0, r2
   218ec:	cmp	r3, #0
   218f0:	bne	218dc <_obstack_memory_used@@Base+0x10>
   218f4:	bx	lr
   218f8:	mov	r0, r3
   218fc:	bx	lr
   21900:	push	{r4, r5, r6, lr}
   21904:	subs	r4, r2, #0
   21908:	mov	r6, r0
   2190c:	mov	r5, r1
   21910:	beq	2193c <_obstack_memory_used@@Base+0x70>
   21914:	mov	r1, r4
   21918:	mvn	r0, #0
   2191c:	bl	21958 <_obstack_memory_used@@Base+0x8c>
   21920:	cmp	r0, r5
   21924:	bcs	2193c <_obstack_memory_used@@Base+0x70>
   21928:	bl	11d74 <__errno_location@plt>
   2192c:	mov	r3, #12
   21930:	str	r3, [r0]
   21934:	mov	r0, #0
   21938:	pop	{r4, r5, r6, pc}
   2193c:	mul	r1, r5, r4
   21940:	mov	r0, r6
   21944:	pop	{r4, r5, r6, lr}
   21948:	b	20f44 <__assert_fail@plt+0xeffc>
   2194c:	mov	r2, #3
   21950:	mov	r1, #0
   21954:	b	210ec <__assert_fail@plt+0xf1a4>
   21958:	subs	r2, r1, #1
   2195c:	bxeq	lr
   21960:	bcc	21b38 <_obstack_memory_used@@Base+0x26c>
   21964:	cmp	r0, r1
   21968:	bls	21b1c <_obstack_memory_used@@Base+0x250>
   2196c:	tst	r1, r2
   21970:	beq	21b28 <_obstack_memory_used@@Base+0x25c>
   21974:	clz	r3, r0
   21978:	clz	r2, r1
   2197c:	sub	r3, r2, r3
   21980:	rsbs	r3, r3, #31
   21984:	addne	r3, r3, r3, lsl #1
   21988:	mov	r2, #0
   2198c:	addne	pc, pc, r3, lsl #2
   21990:	nop			; (mov r0, r0)
   21994:	cmp	r0, r1, lsl #31
   21998:	adc	r2, r2, r2
   2199c:	subcs	r0, r0, r1, lsl #31
   219a0:	cmp	r0, r1, lsl #30
   219a4:	adc	r2, r2, r2
   219a8:	subcs	r0, r0, r1, lsl #30
   219ac:	cmp	r0, r1, lsl #29
   219b0:	adc	r2, r2, r2
   219b4:	subcs	r0, r0, r1, lsl #29
   219b8:	cmp	r0, r1, lsl #28
   219bc:	adc	r2, r2, r2
   219c0:	subcs	r0, r0, r1, lsl #28
   219c4:	cmp	r0, r1, lsl #27
   219c8:	adc	r2, r2, r2
   219cc:	subcs	r0, r0, r1, lsl #27
   219d0:	cmp	r0, r1, lsl #26
   219d4:	adc	r2, r2, r2
   219d8:	subcs	r0, r0, r1, lsl #26
   219dc:	cmp	r0, r1, lsl #25
   219e0:	adc	r2, r2, r2
   219e4:	subcs	r0, r0, r1, lsl #25
   219e8:	cmp	r0, r1, lsl #24
   219ec:	adc	r2, r2, r2
   219f0:	subcs	r0, r0, r1, lsl #24
   219f4:	cmp	r0, r1, lsl #23
   219f8:	adc	r2, r2, r2
   219fc:	subcs	r0, r0, r1, lsl #23
   21a00:	cmp	r0, r1, lsl #22
   21a04:	adc	r2, r2, r2
   21a08:	subcs	r0, r0, r1, lsl #22
   21a0c:	cmp	r0, r1, lsl #21
   21a10:	adc	r2, r2, r2
   21a14:	subcs	r0, r0, r1, lsl #21
   21a18:	cmp	r0, r1, lsl #20
   21a1c:	adc	r2, r2, r2
   21a20:	subcs	r0, r0, r1, lsl #20
   21a24:	cmp	r0, r1, lsl #19
   21a28:	adc	r2, r2, r2
   21a2c:	subcs	r0, r0, r1, lsl #19
   21a30:	cmp	r0, r1, lsl #18
   21a34:	adc	r2, r2, r2
   21a38:	subcs	r0, r0, r1, lsl #18
   21a3c:	cmp	r0, r1, lsl #17
   21a40:	adc	r2, r2, r2
   21a44:	subcs	r0, r0, r1, lsl #17
   21a48:	cmp	r0, r1, lsl #16
   21a4c:	adc	r2, r2, r2
   21a50:	subcs	r0, r0, r1, lsl #16
   21a54:	cmp	r0, r1, lsl #15
   21a58:	adc	r2, r2, r2
   21a5c:	subcs	r0, r0, r1, lsl #15
   21a60:	cmp	r0, r1, lsl #14
   21a64:	adc	r2, r2, r2
   21a68:	subcs	r0, r0, r1, lsl #14
   21a6c:	cmp	r0, r1, lsl #13
   21a70:	adc	r2, r2, r2
   21a74:	subcs	r0, r0, r1, lsl #13
   21a78:	cmp	r0, r1, lsl #12
   21a7c:	adc	r2, r2, r2
   21a80:	subcs	r0, r0, r1, lsl #12
   21a84:	cmp	r0, r1, lsl #11
   21a88:	adc	r2, r2, r2
   21a8c:	subcs	r0, r0, r1, lsl #11
   21a90:	cmp	r0, r1, lsl #10
   21a94:	adc	r2, r2, r2
   21a98:	subcs	r0, r0, r1, lsl #10
   21a9c:	cmp	r0, r1, lsl #9
   21aa0:	adc	r2, r2, r2
   21aa4:	subcs	r0, r0, r1, lsl #9
   21aa8:	cmp	r0, r1, lsl #8
   21aac:	adc	r2, r2, r2
   21ab0:	subcs	r0, r0, r1, lsl #8
   21ab4:	cmp	r0, r1, lsl #7
   21ab8:	adc	r2, r2, r2
   21abc:	subcs	r0, r0, r1, lsl #7
   21ac0:	cmp	r0, r1, lsl #6
   21ac4:	adc	r2, r2, r2
   21ac8:	subcs	r0, r0, r1, lsl #6
   21acc:	cmp	r0, r1, lsl #5
   21ad0:	adc	r2, r2, r2
   21ad4:	subcs	r0, r0, r1, lsl #5
   21ad8:	cmp	r0, r1, lsl #4
   21adc:	adc	r2, r2, r2
   21ae0:	subcs	r0, r0, r1, lsl #4
   21ae4:	cmp	r0, r1, lsl #3
   21ae8:	adc	r2, r2, r2
   21aec:	subcs	r0, r0, r1, lsl #3
   21af0:	cmp	r0, r1, lsl #2
   21af4:	adc	r2, r2, r2
   21af8:	subcs	r0, r0, r1, lsl #2
   21afc:	cmp	r0, r1, lsl #1
   21b00:	adc	r2, r2, r2
   21b04:	subcs	r0, r0, r1, lsl #1
   21b08:	cmp	r0, r1
   21b0c:	adc	r2, r2, r2
   21b10:	subcs	r0, r0, r1
   21b14:	mov	r0, r2
   21b18:	bx	lr
   21b1c:	moveq	r0, #1
   21b20:	movne	r0, #0
   21b24:	bx	lr
   21b28:	clz	r2, r1
   21b2c:	rsb	r2, r2, #31
   21b30:	lsr	r0, r0, r2
   21b34:	bx	lr
   21b38:	cmp	r0, #0
   21b3c:	mvnne	r0, #0
   21b40:	b	22198 <_obstack_memory_used@@Base+0x8cc>
   21b44:	cmp	r1, #0
   21b48:	beq	21b38 <_obstack_memory_used@@Base+0x26c>
   21b4c:	push	{r0, r1, lr}
   21b50:	bl	21958 <_obstack_memory_used@@Base+0x8c>
   21b54:	pop	{r1, r2, lr}
   21b58:	mul	r3, r2, r0
   21b5c:	sub	r1, r1, r3
   21b60:	bx	lr
   21b64:	cmp	r1, #0
   21b68:	beq	21d74 <_obstack_memory_used@@Base+0x4a8>
   21b6c:	eor	ip, r0, r1
   21b70:	rsbmi	r1, r1, #0
   21b74:	subs	r2, r1, #1
   21b78:	beq	21d40 <_obstack_memory_used@@Base+0x474>
   21b7c:	movs	r3, r0
   21b80:	rsbmi	r3, r0, #0
   21b84:	cmp	r3, r1
   21b88:	bls	21d4c <_obstack_memory_used@@Base+0x480>
   21b8c:	tst	r1, r2
   21b90:	beq	21d5c <_obstack_memory_used@@Base+0x490>
   21b94:	clz	r2, r3
   21b98:	clz	r0, r1
   21b9c:	sub	r2, r0, r2
   21ba0:	rsbs	r2, r2, #31
   21ba4:	addne	r2, r2, r2, lsl #1
   21ba8:	mov	r0, #0
   21bac:	addne	pc, pc, r2, lsl #2
   21bb0:	nop			; (mov r0, r0)
   21bb4:	cmp	r3, r1, lsl #31
   21bb8:	adc	r0, r0, r0
   21bbc:	subcs	r3, r3, r1, lsl #31
   21bc0:	cmp	r3, r1, lsl #30
   21bc4:	adc	r0, r0, r0
   21bc8:	subcs	r3, r3, r1, lsl #30
   21bcc:	cmp	r3, r1, lsl #29
   21bd0:	adc	r0, r0, r0
   21bd4:	subcs	r3, r3, r1, lsl #29
   21bd8:	cmp	r3, r1, lsl #28
   21bdc:	adc	r0, r0, r0
   21be0:	subcs	r3, r3, r1, lsl #28
   21be4:	cmp	r3, r1, lsl #27
   21be8:	adc	r0, r0, r0
   21bec:	subcs	r3, r3, r1, lsl #27
   21bf0:	cmp	r3, r1, lsl #26
   21bf4:	adc	r0, r0, r0
   21bf8:	subcs	r3, r3, r1, lsl #26
   21bfc:	cmp	r3, r1, lsl #25
   21c00:	adc	r0, r0, r0
   21c04:	subcs	r3, r3, r1, lsl #25
   21c08:	cmp	r3, r1, lsl #24
   21c0c:	adc	r0, r0, r0
   21c10:	subcs	r3, r3, r1, lsl #24
   21c14:	cmp	r3, r1, lsl #23
   21c18:	adc	r0, r0, r0
   21c1c:	subcs	r3, r3, r1, lsl #23
   21c20:	cmp	r3, r1, lsl #22
   21c24:	adc	r0, r0, r0
   21c28:	subcs	r3, r3, r1, lsl #22
   21c2c:	cmp	r3, r1, lsl #21
   21c30:	adc	r0, r0, r0
   21c34:	subcs	r3, r3, r1, lsl #21
   21c38:	cmp	r3, r1, lsl #20
   21c3c:	adc	r0, r0, r0
   21c40:	subcs	r3, r3, r1, lsl #20
   21c44:	cmp	r3, r1, lsl #19
   21c48:	adc	r0, r0, r0
   21c4c:	subcs	r3, r3, r1, lsl #19
   21c50:	cmp	r3, r1, lsl #18
   21c54:	adc	r0, r0, r0
   21c58:	subcs	r3, r3, r1, lsl #18
   21c5c:	cmp	r3, r1, lsl #17
   21c60:	adc	r0, r0, r0
   21c64:	subcs	r3, r3, r1, lsl #17
   21c68:	cmp	r3, r1, lsl #16
   21c6c:	adc	r0, r0, r0
   21c70:	subcs	r3, r3, r1, lsl #16
   21c74:	cmp	r3, r1, lsl #15
   21c78:	adc	r0, r0, r0
   21c7c:	subcs	r3, r3, r1, lsl #15
   21c80:	cmp	r3, r1, lsl #14
   21c84:	adc	r0, r0, r0
   21c88:	subcs	r3, r3, r1, lsl #14
   21c8c:	cmp	r3, r1, lsl #13
   21c90:	adc	r0, r0, r0
   21c94:	subcs	r3, r3, r1, lsl #13
   21c98:	cmp	r3, r1, lsl #12
   21c9c:	adc	r0, r0, r0
   21ca0:	subcs	r3, r3, r1, lsl #12
   21ca4:	cmp	r3, r1, lsl #11
   21ca8:	adc	r0, r0, r0
   21cac:	subcs	r3, r3, r1, lsl #11
   21cb0:	cmp	r3, r1, lsl #10
   21cb4:	adc	r0, r0, r0
   21cb8:	subcs	r3, r3, r1, lsl #10
   21cbc:	cmp	r3, r1, lsl #9
   21cc0:	adc	r0, r0, r0
   21cc4:	subcs	r3, r3, r1, lsl #9
   21cc8:	cmp	r3, r1, lsl #8
   21ccc:	adc	r0, r0, r0
   21cd0:	subcs	r3, r3, r1, lsl #8
   21cd4:	cmp	r3, r1, lsl #7
   21cd8:	adc	r0, r0, r0
   21cdc:	subcs	r3, r3, r1, lsl #7
   21ce0:	cmp	r3, r1, lsl #6
   21ce4:	adc	r0, r0, r0
   21ce8:	subcs	r3, r3, r1, lsl #6
   21cec:	cmp	r3, r1, lsl #5
   21cf0:	adc	r0, r0, r0
   21cf4:	subcs	r3, r3, r1, lsl #5
   21cf8:	cmp	r3, r1, lsl #4
   21cfc:	adc	r0, r0, r0
   21d00:	subcs	r3, r3, r1, lsl #4
   21d04:	cmp	r3, r1, lsl #3
   21d08:	adc	r0, r0, r0
   21d0c:	subcs	r3, r3, r1, lsl #3
   21d10:	cmp	r3, r1, lsl #2
   21d14:	adc	r0, r0, r0
   21d18:	subcs	r3, r3, r1, lsl #2
   21d1c:	cmp	r3, r1, lsl #1
   21d20:	adc	r0, r0, r0
   21d24:	subcs	r3, r3, r1, lsl #1
   21d28:	cmp	r3, r1
   21d2c:	adc	r0, r0, r0
   21d30:	subcs	r3, r3, r1
   21d34:	cmp	ip, #0
   21d38:	rsbmi	r0, r0, #0
   21d3c:	bx	lr
   21d40:	teq	ip, r0
   21d44:	rsbmi	r0, r0, #0
   21d48:	bx	lr
   21d4c:	movcc	r0, #0
   21d50:	asreq	r0, ip, #31
   21d54:	orreq	r0, r0, #1
   21d58:	bx	lr
   21d5c:	clz	r2, r1
   21d60:	rsb	r2, r2, #31
   21d64:	cmp	ip, #0
   21d68:	lsr	r0, r3, r2
   21d6c:	rsbmi	r0, r0, #0
   21d70:	bx	lr
   21d74:	cmp	r0, #0
   21d78:	mvngt	r0, #-2147483648	; 0x80000000
   21d7c:	movlt	r0, #-2147483648	; 0x80000000
   21d80:	b	22198 <_obstack_memory_used@@Base+0x8cc>
   21d84:	cmp	r1, #0
   21d88:	beq	21d74 <_obstack_memory_used@@Base+0x4a8>
   21d8c:	push	{r0, r1, lr}
   21d90:	bl	21b6c <_obstack_memory_used@@Base+0x2a0>
   21d94:	pop	{r1, r2, lr}
   21d98:	mul	r3, r2, r0
   21d9c:	sub	r1, r1, r3
   21da0:	bx	lr
   21da4:	eor	r1, r1, #-2147483648	; 0x80000000
   21da8:	b	21db0 <_obstack_memory_used@@Base+0x4e4>
   21dac:	eor	r3, r3, #-2147483648	; 0x80000000
   21db0:	push	{r4, r5, lr}
   21db4:	lsl	r4, r1, #1
   21db8:	lsl	r5, r3, #1
   21dbc:	teq	r4, r5
   21dc0:	teqeq	r0, r2
   21dc4:	orrsne	ip, r4, r0
   21dc8:	orrsne	ip, r5, r2
   21dcc:	mvnsne	ip, r4, asr #21
   21dd0:	mvnsne	ip, r5, asr #21
   21dd4:	beq	21fc0 <_obstack_memory_used@@Base+0x6f4>
   21dd8:	lsr	r4, r4, #21
   21ddc:	rsbs	r5, r4, r5, lsr #21
   21de0:	rsblt	r5, r5, #0
   21de4:	ble	21e04 <_obstack_memory_used@@Base+0x538>
   21de8:	add	r4, r4, r5
   21dec:	eor	r2, r0, r2
   21df0:	eor	r3, r1, r3
   21df4:	eor	r0, r2, r0
   21df8:	eor	r1, r3, r1
   21dfc:	eor	r2, r0, r2
   21e00:	eor	r3, r1, r3
   21e04:	cmp	r5, #54	; 0x36
   21e08:	pophi	{r4, r5, pc}
   21e0c:	tst	r1, #-2147483648	; 0x80000000
   21e10:	lsl	r1, r1, #12
   21e14:	mov	ip, #1048576	; 0x100000
   21e18:	orr	r1, ip, r1, lsr #12
   21e1c:	beq	21e28 <_obstack_memory_used@@Base+0x55c>
   21e20:	rsbs	r0, r0, #0
   21e24:	rsc	r1, r1, #0
   21e28:	tst	r3, #-2147483648	; 0x80000000
   21e2c:	lsl	r3, r3, #12
   21e30:	orr	r3, ip, r3, lsr #12
   21e34:	beq	21e40 <_obstack_memory_used@@Base+0x574>
   21e38:	rsbs	r2, r2, #0
   21e3c:	rsc	r3, r3, #0
   21e40:	teq	r4, r5
   21e44:	beq	21fa8 <_obstack_memory_used@@Base+0x6dc>
   21e48:	sub	r4, r4, #1
   21e4c:	rsbs	lr, r5, #32
   21e50:	blt	21e6c <_obstack_memory_used@@Base+0x5a0>
   21e54:	lsl	ip, r2, lr
   21e58:	adds	r0, r0, r2, lsr r5
   21e5c:	adc	r1, r1, #0
   21e60:	adds	r0, r0, r3, lsl lr
   21e64:	adcs	r1, r1, r3, asr r5
   21e68:	b	21e88 <_obstack_memory_used@@Base+0x5bc>
   21e6c:	sub	r5, r5, #32
   21e70:	add	lr, lr, #32
   21e74:	cmp	r2, #1
   21e78:	lsl	ip, r3, lr
   21e7c:	orrcs	ip, ip, #2
   21e80:	adds	r0, r0, r3, asr r5
   21e84:	adcs	r1, r1, r3, asr #31
   21e88:	and	r5, r1, #-2147483648	; 0x80000000
   21e8c:	bpl	21e9c <_obstack_memory_used@@Base+0x5d0>
   21e90:	rsbs	ip, ip, #0
   21e94:	rscs	r0, r0, #0
   21e98:	rsc	r1, r1, #0
   21e9c:	cmp	r1, #1048576	; 0x100000
   21ea0:	bcc	21ee0 <_obstack_memory_used@@Base+0x614>
   21ea4:	cmp	r1, #2097152	; 0x200000
   21ea8:	bcc	21ec8 <_obstack_memory_used@@Base+0x5fc>
   21eac:	lsrs	r1, r1, #1
   21eb0:	rrxs	r0, r0
   21eb4:	rrx	ip, ip
   21eb8:	add	r4, r4, #1
   21ebc:	lsl	r2, r4, #21
   21ec0:	cmn	r2, #4194304	; 0x400000
   21ec4:	bcs	22020 <_obstack_memory_used@@Base+0x754>
   21ec8:	cmp	ip, #-2147483648	; 0x80000000
   21ecc:	lsrseq	ip, r0, #1
   21ed0:	adcs	r0, r0, #0
   21ed4:	adc	r1, r1, r4, lsl #20
   21ed8:	orr	r1, r1, r5
   21edc:	pop	{r4, r5, pc}
   21ee0:	lsls	ip, ip, #1
   21ee4:	adcs	r0, r0, r0
   21ee8:	adc	r1, r1, r1
   21eec:	tst	r1, #1048576	; 0x100000
   21ef0:	sub	r4, r4, #1
   21ef4:	bne	21ec8 <_obstack_memory_used@@Base+0x5fc>
   21ef8:	teq	r1, #0
   21efc:	moveq	r1, r0
   21f00:	moveq	r0, #0
   21f04:	clz	r3, r1
   21f08:	addeq	r3, r3, #32
   21f0c:	sub	r3, r3, #11
   21f10:	subs	r2, r3, #32
   21f14:	bge	21f38 <_obstack_memory_used@@Base+0x66c>
   21f18:	adds	r2, r2, #12
   21f1c:	ble	21f34 <_obstack_memory_used@@Base+0x668>
   21f20:	add	ip, r2, #20
   21f24:	rsb	r2, r2, #12
   21f28:	lsl	r0, r1, ip
   21f2c:	lsr	r1, r1, r2
   21f30:	b	21f48 <_obstack_memory_used@@Base+0x67c>
   21f34:	add	r2, r2, #20
   21f38:	rsble	ip, r2, #32
   21f3c:	lsl	r1, r1, r2
   21f40:	orrle	r1, r1, r0, lsr ip
   21f44:	lslle	r0, r0, r2
   21f48:	subs	r4, r4, r3
   21f4c:	addge	r1, r1, r4, lsl #20
   21f50:	orrge	r1, r1, r5
   21f54:	popge	{r4, r5, pc}
   21f58:	mvn	r4, r4
   21f5c:	subs	r4, r4, #31
   21f60:	bge	21f9c <_obstack_memory_used@@Base+0x6d0>
   21f64:	adds	r4, r4, #12
   21f68:	bgt	21f84 <_obstack_memory_used@@Base+0x6b8>
   21f6c:	add	r4, r4, #20
   21f70:	rsb	r2, r4, #32
   21f74:	lsr	r0, r0, r4
   21f78:	orr	r0, r0, r1, lsl r2
   21f7c:	orr	r1, r5, r1, lsr r4
   21f80:	pop	{r4, r5, pc}
   21f84:	rsb	r4, r4, #12
   21f88:	rsb	r2, r4, #32
   21f8c:	lsr	r0, r0, r2
   21f90:	orr	r0, r0, r1, lsl r4
   21f94:	mov	r1, r5
   21f98:	pop	{r4, r5, pc}
   21f9c:	lsr	r0, r1, r4
   21fa0:	mov	r1, r5
   21fa4:	pop	{r4, r5, pc}
   21fa8:	teq	r4, #0
   21fac:	eor	r3, r3, #1048576	; 0x100000
   21fb0:	eoreq	r1, r1, #1048576	; 0x100000
   21fb4:	addeq	r4, r4, #1
   21fb8:	subne	r5, r5, #1
   21fbc:	b	21e48 <_obstack_memory_used@@Base+0x57c>
   21fc0:	mvns	ip, r4, asr #21
   21fc4:	mvnsne	ip, r5, asr #21
   21fc8:	beq	22030 <_obstack_memory_used@@Base+0x764>
   21fcc:	teq	r4, r5
   21fd0:	teqeq	r0, r2
   21fd4:	beq	21fe8 <_obstack_memory_used@@Base+0x71c>
   21fd8:	orrs	ip, r4, r0
   21fdc:	moveq	r1, r3
   21fe0:	moveq	r0, r2
   21fe4:	pop	{r4, r5, pc}
   21fe8:	teq	r1, r3
   21fec:	movne	r1, #0
   21ff0:	movne	r0, #0
   21ff4:	popne	{r4, r5, pc}
   21ff8:	lsrs	ip, r4, #21
   21ffc:	bne	22010 <_obstack_memory_used@@Base+0x744>
   22000:	lsls	r0, r0, #1
   22004:	adcs	r1, r1, r1
   22008:	orrcs	r1, r1, #-2147483648	; 0x80000000
   2200c:	pop	{r4, r5, pc}
   22010:	adds	r4, r4, #4194304	; 0x400000
   22014:	addcc	r1, r1, #1048576	; 0x100000
   22018:	popcc	{r4, r5, pc}
   2201c:	and	r5, r1, #-2147483648	; 0x80000000
   22020:	orr	r1, r5, #2130706432	; 0x7f000000
   22024:	orr	r1, r1, #15728640	; 0xf00000
   22028:	mov	r0, #0
   2202c:	pop	{r4, r5, pc}
   22030:	mvns	ip, r4, asr #21
   22034:	movne	r1, r3
   22038:	movne	r0, r2
   2203c:	mvnseq	ip, r5, asr #21
   22040:	movne	r3, r1
   22044:	movne	r2, r0
   22048:	orrs	r4, r0, r1, lsl #12
   2204c:	orrseq	r5, r2, r3, lsl #12
   22050:	teqeq	r1, r3
   22054:	orrne	r1, r1, #524288	; 0x80000
   22058:	pop	{r4, r5, pc}
   2205c:	teq	r0, #0
   22060:	moveq	r1, #0
   22064:	bxeq	lr
   22068:	push	{r4, r5, lr}
   2206c:	mov	r4, #1024	; 0x400
   22070:	add	r4, r4, #50	; 0x32
   22074:	mov	r5, #0
   22078:	mov	r1, #0
   2207c:	b	21ef8 <_obstack_memory_used@@Base+0x62c>
   22080:	teq	r0, #0
   22084:	moveq	r1, #0
   22088:	bxeq	lr
   2208c:	push	{r4, r5, lr}
   22090:	mov	r4, #1024	; 0x400
   22094:	add	r4, r4, #50	; 0x32
   22098:	ands	r5, r0, #-2147483648	; 0x80000000
   2209c:	rsbmi	r0, r0, #0
   220a0:	mov	r1, #0
   220a4:	b	21ef8 <_obstack_memory_used@@Base+0x62c>
   220a8:	lsls	r2, r0, #1
   220ac:	asr	r1, r2, #3
   220b0:	rrx	r1, r1
   220b4:	lsl	r0, r2, #28
   220b8:	andsne	r3, r2, #-16777216	; 0xff000000
   220bc:	teqne	r3, #-16777216	; 0xff000000
   220c0:	eorne	r1, r1, #939524096	; 0x38000000
   220c4:	bxne	lr
   220c8:	teq	r2, #0
   220cc:	teqne	r3, #-16777216	; 0xff000000
   220d0:	bxeq	lr
   220d4:	push	{r4, r5, lr}
   220d8:	mov	r4, #896	; 0x380
   220dc:	and	r5, r1, #-2147483648	; 0x80000000
   220e0:	bic	r1, r1, #-2147483648	; 0x80000000
   220e4:	b	21ef8 <_obstack_memory_used@@Base+0x62c>
   220e8:	orrs	r2, r0, r1
   220ec:	bxeq	lr
   220f0:	push	{r4, r5, lr}
   220f4:	mov	r5, #0
   220f8:	b	22118 <_obstack_memory_used@@Base+0x84c>
   220fc:	orrs	r2, r0, r1
   22100:	bxeq	lr
   22104:	push	{r4, r5, lr}
   22108:	ands	r5, r1, #-2147483648	; 0x80000000
   2210c:	bpl	22118 <_obstack_memory_used@@Base+0x84c>
   22110:	rsbs	r0, r0, #0
   22114:	rsc	r1, r1, #0
   22118:	mov	r4, #1024	; 0x400
   2211c:	add	r4, r4, #50	; 0x32
   22120:	lsrs	ip, r1, #22
   22124:	beq	21e9c <_obstack_memory_used@@Base+0x5d0>
   22128:	mov	r2, #3
   2212c:	lsrs	ip, ip, #3
   22130:	addne	r2, r2, #3
   22134:	lsrs	ip, ip, #3
   22138:	addne	r2, r2, #3
   2213c:	add	r2, r2, ip, lsr #3
   22140:	rsb	r3, r2, #32
   22144:	lsl	ip, r0, r3
   22148:	lsr	r0, r0, r2
   2214c:	orr	r0, r0, r1, lsl r3
   22150:	lsr	r1, r1, r2
   22154:	add	r4, r4, r2
   22158:	b	21e9c <_obstack_memory_used@@Base+0x5d0>
   2215c:	cmp	r3, #0
   22160:	cmpeq	r2, #0
   22164:	bne	2217c <_obstack_memory_used@@Base+0x8b0>
   22168:	cmp	r1, #0
   2216c:	cmpeq	r0, #0
   22170:	mvnne	r1, #0
   22174:	mvnne	r0, #0
   22178:	b	22198 <_obstack_memory_used@@Base+0x8cc>
   2217c:	sub	sp, sp, #8
   22180:	push	{sp, lr}
   22184:	bl	221f0 <_obstack_memory_used@@Base+0x924>
   22188:	ldr	lr, [sp, #4]
   2218c:	add	sp, sp, #8
   22190:	pop	{r2, r3}
   22194:	bx	lr
   22198:	push	{r1, lr}
   2219c:	mov	r0, #8
   221a0:	bl	11a20 <raise@plt>
   221a4:	pop	{r1, pc}
   221a8:	vmov	d7, r0, r1
   221ac:	vldr	d6, [pc, #44]	; 221e0 <_obstack_memory_used@@Base+0x914>
   221b0:	vldr	d5, [pc, #48]	; 221e8 <_obstack_memory_used@@Base+0x91c>
   221b4:	mov	r0, #0
   221b8:	vmul.f64	d6, d7, d6
   221bc:	vcvt.u32.f64	s12, d6
   221c0:	vcvt.f64.u32	d4, s12
   221c4:	vmov	r1, s12
   221c8:	vmls.f64	d7, d4, d5
   221cc:	vcvt.u32.f64	s14, d7
   221d0:	vmov	r3, s14
   221d4:	orr	r0, r0, r3
   221d8:	bx	lr
   221dc:	nop			; (mov r0, r0)
   221e0:	andeq	r0, r0, r0
   221e4:	ldclcc	0, cr0, [r0]
   221e8:	andeq	r0, r0, r0
   221ec:	mvnsmi	r0, r0
   221f0:	cmp	r1, r3
   221f4:	push	{r4, r5, r6, r7, r8, r9, lr}
   221f8:	cmpeq	r0, r2
   221fc:	mov	r4, r0
   22200:	mov	r5, r1
   22204:	ldr	r9, [sp, #28]
   22208:	movcc	r0, #0
   2220c:	movcc	r1, #0
   22210:	bcc	22308 <_obstack_memory_used@@Base+0xa3c>
   22214:	cmp	r3, #0
   22218:	clzeq	ip, r2
   2221c:	clzne	ip, r3
   22220:	addeq	ip, ip, #32
   22224:	cmp	r5, #0
   22228:	clzeq	r1, r4
   2222c:	addeq	r1, r1, #32
   22230:	clzne	r1, r5
   22234:	sub	ip, ip, r1
   22238:	sub	lr, ip, #32
   2223c:	lsl	r7, r3, ip
   22240:	rsb	r8, ip, #32
   22244:	orr	r7, r7, r2, lsl lr
   22248:	orr	r7, r7, r2, lsr r8
   2224c:	lsl	r6, r2, ip
   22250:	cmp	r5, r7
   22254:	cmpeq	r4, r6
   22258:	movcc	r0, #0
   2225c:	movcc	r1, #0
   22260:	bcc	2227c <_obstack_memory_used@@Base+0x9b0>
   22264:	mov	r3, #1
   22268:	subs	r4, r4, r6
   2226c:	lsl	r1, r3, lr
   22270:	lsl	r0, r3, ip
   22274:	orr	r1, r1, r3, lsr r8
   22278:	sbc	r5, r5, r7
   2227c:	cmp	ip, #0
   22280:	beq	22308 <_obstack_memory_used@@Base+0xa3c>
   22284:	lsrs	r3, r7, #1
   22288:	rrx	r2, r6
   2228c:	mov	r6, ip
   22290:	b	222b4 <_obstack_memory_used@@Base+0x9e8>
   22294:	subs	r4, r4, r2
   22298:	sbc	r5, r5, r3
   2229c:	adds	r4, r4, r4
   222a0:	adc	r5, r5, r5
   222a4:	adds	r4, r4, #1
   222a8:	adc	r5, r5, #0
   222ac:	subs	r6, r6, #1
   222b0:	beq	222d0 <_obstack_memory_used@@Base+0xa04>
   222b4:	cmp	r5, r3
   222b8:	cmpeq	r4, r2
   222bc:	bcs	22294 <_obstack_memory_used@@Base+0x9c8>
   222c0:	adds	r4, r4, r4
   222c4:	adc	r5, r5, r5
   222c8:	subs	r6, r6, #1
   222cc:	bne	222b4 <_obstack_memory_used@@Base+0x9e8>
   222d0:	lsr	r6, r4, ip
   222d4:	lsr	r7, r5, ip
   222d8:	orr	r6, r6, r5, lsl r8
   222dc:	adds	r2, r0, r4
   222e0:	orr	r6, r6, r5, lsr lr
   222e4:	adc	r3, r1, r5
   222e8:	lsl	r1, r7, ip
   222ec:	orr	r1, r1, r6, lsl lr
   222f0:	lsl	r0, r6, ip
   222f4:	orr	r1, r1, r6, lsr r8
   222f8:	subs	r0, r2, r0
   222fc:	mov	r4, r6
   22300:	mov	r5, r7
   22304:	sbc	r1, r3, r1
   22308:	cmp	r9, #0
   2230c:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   22310:	strd	r4, [r9]
   22314:	pop	{r4, r5, r6, r7, r8, r9, pc}
   22318:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2231c:	mov	r7, r0
   22320:	ldr	r6, [pc, #72]	; 22370 <_obstack_memory_used@@Base+0xaa4>
   22324:	ldr	r5, [pc, #72]	; 22374 <_obstack_memory_used@@Base+0xaa8>
   22328:	add	r6, pc, r6
   2232c:	add	r5, pc, r5
   22330:	sub	r6, r6, r5
   22334:	mov	r8, r1
   22338:	mov	r9, r2
   2233c:	bl	119d0 <pthread_mutex_unlock@plt-0x20>
   22340:	asrs	r6, r6, #2
   22344:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   22348:	mov	r4, #0
   2234c:	add	r4, r4, #1
   22350:	ldr	r3, [r5], #4
   22354:	mov	r2, r9
   22358:	mov	r1, r8
   2235c:	mov	r0, r7
   22360:	blx	r3
   22364:	cmp	r6, r4
   22368:	bne	2234c <_obstack_memory_used@@Base+0xa80>
   2236c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   22370:	ldrdeq	r2, [r1], -r8
   22374:	ldrdeq	r2, [r1], -r0
   22378:	bx	lr
   2237c:	ldr	r3, [pc, #12]	; 22390 <_obstack_memory_used@@Base+0xac4>
   22380:	mov	r1, #0
   22384:	add	r3, pc, r3
   22388:	ldr	r2, [r3]
   2238c:	b	11d80 <__cxa_atexit@plt>
   22390:	andeq	r2, r1, r4, asr lr

Disassembly of section .fini:

00022394 <.fini>:
   22394:	push	{r3, lr}
   22398:	pop	{r3, pc}
