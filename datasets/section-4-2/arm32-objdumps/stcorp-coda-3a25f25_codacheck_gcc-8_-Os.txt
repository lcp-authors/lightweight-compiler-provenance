
../repos/stcorp-coda-3a25f25/codacheck:     file format elf32-littlearm


Disassembly of section .init:

00010b90 <.init>:
   10b90:	push	{r3, lr}
   10b94:	bl	11108 <_start@@Base+0x3c>
   10b98:	pop	{r3, pc}

Disassembly of section .plt:

00010b9c <coda_set_option_perform_boundary_checks@plt-0x14>:
   10b9c:	push	{lr}		; (str lr, [sp, #-4]!)
   10ba0:	ldr	lr, [pc, #4]	; 10bac <coda_set_option_perform_boundary_checks@plt-0x4>
   10ba4:	add	lr, pc, lr
   10ba8:	ldr	pc, [lr, #8]!
   10bac:	andeq	r1, r1, r4, asr r4

00010bb0 <coda_set_option_perform_boundary_checks@plt>:
   10bb0:	add	ip, pc, #0, 12
   10bb4:	add	ip, ip, #69632	; 0x11000
   10bb8:	ldr	pc, [ip, #1108]!	; 0x454

00010bbc <strcmp@plt>:
   10bbc:	add	ip, pc, #0, 12
   10bc0:	add	ip, ip, #69632	; 0x11000
   10bc4:	ldr	pc, [ip, #1100]!	; 0x44c

00010bc8 <printf@plt>:
   10bc8:	add	ip, pc, #0, 12
   10bcc:	add	ip, ip, #69632	; 0x11000
   10bd0:	ldr	pc, [ip, #1092]!	; 0x444

00010bd4 <coda_set_error@plt>:
   10bd4:	add	ip, pc, #0, 12
   10bd8:	add	ip, ip, #69632	; 0x11000
   10bdc:	ldr	pc, [ip, #1084]!	; 0x43c

00010be0 <coda_open@plt>:
   10be0:	add	ip, pc, #0, 12
   10be4:	add	ip, ip, #69632	; 0x11000
   10be8:	ldr	pc, [ip, #1076]!	; 0x434

00010bec <fflush@plt>:
   10bec:	add	ip, pc, #0, 12
   10bf0:	add	ip, ip, #69632	; 0x11000
   10bf4:	ldr	pc, [ip, #1068]!	; 0x42c

00010bf8 <coda_set_option_use_mmap@plt>:
   10bf8:	add	ip, pc, #0, 12
   10bfc:	add	ip, ip, #69632	; 0x11000
   10c00:	ldr	pc, [ip, #1060]!	; 0x424

00010c04 <coda_cursor_print_path@plt>:
   10c04:	add	ip, pc, #0, 12
   10c08:	add	ip, ip, #69632	; 0x11000
   10c0c:	ldr	pc, [ip, #1052]!	; 0x41c

00010c10 <coda_set_definition_path_conditional@plt>:
   10c10:	add	ip, pc, #0, 12
   10c14:	add	ip, ip, #69632	; 0x11000
   10c18:	ldr	pc, [ip, #1044]!	; 0x414

00010c1c <getchar@plt>:
   10c1c:	add	ip, pc, #0, 12
   10c20:	add	ip, ip, #69632	; 0x11000
   10c24:	ldr	pc, [ip, #1036]!	; 0x40c

00010c28 <coda_set_definition_path@plt>:
   10c28:	add	ip, pc, #0, 12
   10c2c:	add	ip, ip, #69632	; 0x11000
   10c30:	ldr	pc, [ip, #1028]!	; 0x404

00010c34 <coda_recognize_file@plt>:
   10c34:	add	ip, pc, #0, 12
   10c38:	add	ip, ip, #69632	; 0x11000
   10c3c:	ldr	pc, [ip, #1020]!	; 0x3fc

00010c40 <coda_type_get_format_name@plt>:
   10c40:	add	ip, pc, #0, 12
   10c44:	add	ip, ip, #69632	; 0x11000
   10c48:	ldr	pc, [ip, #1012]!	; 0x3f4

00010c4c <coda_done@plt>:
   10c4c:	add	ip, pc, #0, 12
   10c50:	add	ip, ip, #69632	; 0x11000
   10c54:	ldr	pc, [ip, #1004]!	; 0x3ec

00010c58 <puts@plt>:
   10c58:	add	ip, pc, #0, 12
   10c5c:	add	ip, ip, #69632	; 0x11000
   10c60:	ldr	pc, [ip, #996]!	; 0x3e4

00010c64 <coda_product_check@plt>:
   10c64:	add	ip, pc, #0, 12
   10c68:	add	ip, ip, #69632	; 0x11000
   10c6c:	ldr	pc, [ip, #988]!	; 0x3dc

00010c70 <__libc_start_main@plt>:
   10c70:	add	ip, pc, #0, 12
   10c74:	add	ip, ip, #69632	; 0x11000
   10c78:	ldr	pc, [ip, #980]!	; 0x3d4

00010c7c <__gmon_start__@plt>:
   10c7c:	add	ip, pc, #0, 12
   10c80:	add	ip, ip, #69632	; 0x11000
   10c84:	ldr	pc, [ip, #972]!	; 0x3cc

00010c88 <exit@plt>:
   10c88:	add	ip, pc, #0, 12
   10c8c:	add	ip, ip, #69632	; 0x11000
   10c90:	ldr	pc, [ip, #964]!	; 0x3c4

00010c94 <fprintf@plt>:
   10c94:	add	ip, pc, #0, 12
   10c98:	add	ip, ip, #69632	; 0x11000
   10c9c:	ldr	pc, [ip, #956]!	; 0x3bc

00010ca0 <coda_init@plt>:
   10ca0:	add	ip, pc, #0, 12
   10ca4:	add	ip, ip, #69632	; 0x11000
   10ca8:	ldr	pc, [ip, #948]!	; 0x3b4

00010cac <ungetc@plt>:
   10cac:	add	ip, pc, #0, 12
   10cb0:	add	ip, ip, #69632	; 0x11000
   10cb4:	ldr	pc, [ip, #940]!	; 0x3ac

00010cb8 <coda_set_option_perform_conversions@plt>:
   10cb8:	add	ip, pc, #0, 12
   10cbc:	add	ip, ip, #69632	; 0x11000
   10cc0:	ldr	pc, [ip, #932]!	; 0x3a4

00010cc4 <putchar@plt>:
   10cc4:	add	ip, pc, #0, 12
   10cc8:	add	ip, ip, #69632	; 0x11000
   10ccc:	ldr	pc, [ip, #924]!	; 0x39c

00010cd0 <coda_close@plt>:
   10cd0:	add	ip, pc, #0, 12
   10cd4:	add	ip, ip, #69632	; 0x11000
   10cd8:	ldr	pc, [ip, #916]!	; 0x394

00010cdc <coda_errno_to_string@plt>:
   10cdc:	add	ip, pc, #0, 12
   10ce0:	add	ip, ip, #69632	; 0x11000
   10ce4:	ldr	pc, [ip, #908]!	; 0x38c

00010ce8 <coda_get_libcoda_version@plt>:
   10ce8:	add	ip, pc, #0, 12
   10cec:	add	ip, ip, #69632	; 0x11000
   10cf0:	ldr	pc, [ip, #900]!	; 0x384

00010cf4 <coda_get_errno@plt>:
   10cf4:	add	ip, pc, #0, 12
   10cf8:	add	ip, ip, #69632	; 0x11000
   10cfc:	ldr	pc, [ip, #892]!	; 0x37c

00010d00 <fputs@plt>:
   10d00:	add	ip, pc, #0, 12
   10d04:	add	ip, ip, #69632	; 0x11000
   10d08:	ldr	pc, [ip, #884]!	; 0x374

00010d0c <abort@plt>:
   10d0c:	add	ip, pc, #0, 12
   10d10:	add	ip, ip, #69632	; 0x11000
   10d14:	ldr	pc, [ip, #876]!	; 0x36c

00010d18 <__assert_fail@plt>:
   10d18:	add	ip, pc, #0, 12
   10d1c:	add	ip, ip, #69632	; 0x11000
   10d20:	ldr	pc, [ip, #868]!	; 0x364

Disassembly of section .text:

00010d24 <main@@Base>:
   10d24:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10d28:	mov	r6, r0
   10d2c:	mov	r7, r1
   10d30:	mov	r3, #0
   10d34:	sub	sp, sp, #1020	; 0x3fc
   10d38:	cmp	r6, #1
   10d3c:	ldr	r0, [pc, #796]	; 11060 <main@@Base+0x33c>
   10d40:	ldr	r1, [pc, #796]	; 11064 <main@@Base+0x340>
   10d44:	ldr	r2, [pc, #796]	; 11068 <main@@Base+0x344>
   10d48:	str	r3, [r0]
   10d4c:	str	r3, [r1]
   10d50:	strd	r0, [sp, #4]
   10d54:	str	r3, [r2]
   10d58:	str	r2, [sp, #12]
   10d5c:	beq	10d8c <main@@Base+0x68>
   10d60:	ldr	r4, [r7, #4]
   10d64:	ldr	r1, [pc, #768]	; 1106c <main@@Base+0x348>
   10d68:	mov	r0, r4
   10d6c:	bl	10bbc <strcmp@plt>
   10d70:	cmp	r0, #0
   10d74:	beq	10d8c <main@@Base+0x68>
   10d78:	ldr	r1, [pc, #752]	; 11070 <main@@Base+0x34c>
   10d7c:	mov	r0, r4
   10d80:	bl	10bbc <strcmp@plt>
   10d84:	cmp	r0, #0
   10d88:	bne	10d98 <main@@Base+0x74>
   10d8c:	bl	111bc <_start@@Base+0xf0>
   10d90:	mov	r0, #0
   10d94:	bl	10c88 <exit@plt>
   10d98:	ldr	r1, [pc, #724]	; 11074 <main@@Base+0x350>
   10d9c:	mov	r0, r4
   10da0:	bl	10bbc <strcmp@plt>
   10da4:	cmp	r0, #0
   10da8:	beq	10dc0 <main@@Base+0x9c>
   10dac:	ldr	r1, [pc, #708]	; 11078 <main@@Base+0x354>
   10db0:	mov	r0, r4
   10db4:	bl	10bbc <strcmp@plt>
   10db8:	cmp	r0, #0
   10dbc:	bne	10de4 <main@@Base+0xc0>
   10dc0:	bl	10ce8 <coda_get_libcoda_version@plt>
   10dc4:	mov	r1, r0
   10dc8:	ldr	r0, [pc, #684]	; 1107c <main@@Base+0x358>
   10dcc:	bl	10bc8 <printf@plt>
   10dd0:	ldr	r0, [pc, #680]	; 11080 <main@@Base+0x35c>
   10dd4:	bl	10c58 <puts@plt>
   10dd8:	mov	r0, #10
   10ddc:	bl	10cc4 <putchar@plt>
   10de0:	b	10d90 <main@@Base+0x6c>
   10de4:	cmp	r6, #2
   10de8:	ble	10e2c <main@@Base+0x108>
   10dec:	ldr	r1, [pc, #656]	; 11084 <main@@Base+0x360>
   10df0:	mov	r0, r4
   10df4:	bl	10bbc <strcmp@plt>
   10df8:	cmp	r0, #0
   10dfc:	bne	10e2c <main@@Base+0x108>
   10e00:	ldr	r0, [r7, #8]
   10e04:	mov	r4, #3
   10e08:	bl	10c28 <coda_set_definition_path@plt>
   10e0c:	ldr	sl, [pc, #628]	; 11088 <main@@Base+0x364>
   10e10:	mov	r8, #1
   10e14:	mov	r9, r8
   10e18:	ldr	fp, [pc, #620]	; 1108c <main@@Base+0x368>
   10e1c:	cmp	r4, r6
   10e20:	blt	10e70 <main@@Base+0x14c>
   10e24:	mov	r5, #0
   10e28:	b	10f74 <main@@Base+0x250>
   10e2c:	ldr	r2, [pc, #604]	; 11090 <main@@Base+0x36c>
   10e30:	mov	r1, #0
   10e34:	ldr	r0, [r7]
   10e38:	bl	10c10 <coda_set_definition_path_conditional@plt>
   10e3c:	cmp	r0, #0
   10e40:	moveq	r4, #1
   10e44:	beq	10e0c <main@@Base+0xe8>
   10e48:	ldr	r3, [pc, #580]	; 11094 <main@@Base+0x370>
   10e4c:	ldr	r4, [r3]
   10e50:	bl	10cf4 <coda_get_errno@plt>
   10e54:	ldr	r0, [r0]
   10e58:	bl	10cdc <coda_errno_to_string@plt>
   10e5c:	mov	r2, r0
   10e60:	ldr	r1, [pc, #560]	; 11098 <main@@Base+0x374>
   10e64:	mov	r0, r4
   10e68:	bl	10c94 <fprintf@plt>
   10e6c:	b	10f60 <main@@Base+0x23c>
   10e70:	ldr	r5, [r7, r4, lsl #2]
   10e74:	ldr	r1, [pc, #544]	; 1109c <main@@Base+0x378>
   10e78:	mov	r0, r5
   10e7c:	bl	10bbc <strcmp@plt>
   10e80:	cmp	r0, #0
   10e84:	beq	10e9c <main@@Base+0x178>
   10e88:	ldr	r1, [pc, #528]	; 110a0 <main@@Base+0x37c>
   10e8c:	mov	r0, r5
   10e90:	bl	10bbc <strcmp@plt>
   10e94:	cmp	r0, #0
   10e98:	bne	10eac <main@@Base+0x188>
   10e9c:	ldr	r3, [sp, #4]
   10ea0:	str	r9, [r3]
   10ea4:	add	r4, r4, #1
   10ea8:	b	10e1c <main@@Base+0xf8>
   10eac:	ldr	r1, [pc, #496]	; 110a4 <main@@Base+0x380>
   10eb0:	mov	r0, r5
   10eb4:	bl	10bbc <strcmp@plt>
   10eb8:	cmp	r0, #0
   10ebc:	beq	10ed4 <main@@Base+0x1b0>
   10ec0:	ldr	r1, [pc, #480]	; 110a8 <main@@Base+0x384>
   10ec4:	mov	r0, r5
   10ec8:	bl	10bbc <strcmp@plt>
   10ecc:	cmp	r0, #0
   10ed0:	bne	10edc <main@@Base+0x1b8>
   10ed4:	ldr	r3, [sp, #8]
   10ed8:	b	10ea0 <main@@Base+0x17c>
   10edc:	ldr	r1, [pc, #456]	; 110ac <main@@Base+0x388>
   10ee0:	mov	r0, r5
   10ee4:	bl	10bbc <strcmp@plt>
   10ee8:	cmp	r0, #0
   10eec:	beq	10f04 <main@@Base+0x1e0>
   10ef0:	mov	r1, sl
   10ef4:	mov	r0, r5
   10ef8:	bl	10bbc <strcmp@plt>
   10efc:	cmp	r0, #0
   10f00:	bne	10f0c <main@@Base+0x1e8>
   10f04:	ldr	r3, [sp, #12]
   10f08:	b	10ea0 <main@@Base+0x17c>
   10f0c:	mov	r1, fp
   10f10:	mov	r0, r5
   10f14:	bl	10bbc <strcmp@plt>
   10f18:	cmp	r0, #0
   10f1c:	beq	10f68 <main@@Base+0x244>
   10f20:	ldr	r1, [pc, #392]	; 110b0 <main@@Base+0x38c>
   10f24:	mov	r0, r5
   10f28:	bl	10bbc <strcmp@plt>
   10f2c:	cmp	r0, #0
   10f30:	bne	10f40 <main@@Base+0x21c>
   10f34:	sub	r3, r6, #1
   10f38:	cmp	r3, r4
   10f3c:	beq	10f70 <main@@Base+0x24c>
   10f40:	ldrb	r3, [r5]
   10f44:	cmp	r3, #45	; 0x2d
   10f48:	bne	10e24 <main@@Base+0x100>
   10f4c:	ldr	r3, [pc, #320]	; 11094 <main@@Base+0x370>
   10f50:	ldr	r0, [pc, #348]	; 110b4 <main@@Base+0x390>
   10f54:	ldr	r1, [r3]
   10f58:	bl	10d00 <fputs@plt>
   10f5c:	bl	111bc <_start@@Base+0xf0>
   10f60:	mov	r0, #1
   10f64:	b	10d94 <main@@Base+0x70>
   10f68:	mov	r8, r0
   10f6c:	b	10ea4 <main@@Base+0x180>
   10f70:	mov	r5, #1
   10f74:	bl	10ca0 <coda_init@plt>
   10f78:	subs	r9, r0, #0
   10f7c:	bne	10e48 <main@@Base+0x124>
   10f80:	bl	10bb0 <coda_set_option_perform_boundary_checks@plt>
   10f84:	mov	r0, r9
   10f88:	bl	10cb8 <coda_set_option_perform_conversions@plt>
   10f8c:	mov	r0, r8
   10f90:	bl	10bf8 <coda_set_option_use_mmap@plt>
   10f94:	cmp	r5, #0
   10f98:	beq	1103c <main@@Base+0x318>
   10f9c:	ldr	r6, [pc, #276]	; 110b8 <main@@Base+0x394>
   10fa0:	mov	r4, #0
   10fa4:	bl	10c1c <getchar@plt>
   10fa8:	uxtb	r0, r0
   10fac:	cmp	r0, #13
   10fb0:	bne	10ff8 <main@@Base+0x2d4>
   10fb4:	bl	10c1c <getchar@plt>
   10fb8:	uxtb	r0, r0
   10fbc:	cmp	r0, #10
   10fc0:	beq	10fcc <main@@Base+0x2a8>
   10fc4:	ldr	r1, [r6]
   10fc8:	bl	10cac <ungetc@plt>
   10fcc:	add	r3, sp, #1016	; 0x3f8
   10fd0:	mov	r5, #0
   10fd4:	add	r3, r3, r4
   10fd8:	cmp	r4, r5
   10fdc:	strb	r5, [r3, #-1000]	; 0xfffffc18
   10fe0:	beq	10fa0 <main@@Base+0x27c>
   10fe4:	add	r0, sp, #16
   10fe8:	bl	1133c <_start@@Base+0x270>
   10fec:	mov	r0, r5
   10ff0:	bl	10bec <fflush@plt>
   10ff4:	b	10fa0 <main@@Base+0x27c>
   10ff8:	cmp	r0, #10
   10ffc:	beq	10fcc <main@@Base+0x2a8>
   11000:	add	r3, sp, #16
   11004:	strb	r0, [r3, r4]
   11008:	add	r4, r4, #1
   1100c:	cmp	r4, #1000	; 0x3e8
   11010:	bne	10fa4 <main@@Base+0x280>
   11014:	ldr	r3, [pc, #160]	; 110bc <main@@Base+0x398>
   11018:	mov	r2, #316	; 0x13c
   1101c:	ldr	r1, [pc, #156]	; 110c0 <main@@Base+0x39c>
   11020:	ldr	r0, [pc, #156]	; 110c4 <main@@Base+0x3a0>
   11024:	bl	10d18 <__assert_fail@plt>
   11028:	ldr	r0, [r7, r4, lsl #2]
   1102c:	add	r4, r4, #1
   11030:	bl	1133c <_start@@Base+0x270>
   11034:	mov	r0, #0
   11038:	bl	10bec <fflush@plt>
   1103c:	cmp	r4, r6
   11040:	blt	11028 <main@@Base+0x304>
   11044:	bl	10c4c <coda_done@plt>
   11048:	ldr	r3, [pc, #120]	; 110c8 <main@@Base+0x3a4>
   1104c:	ldr	r0, [r3]
   11050:	cmp	r0, #0
   11054:	bne	10f60 <main@@Base+0x23c>
   11058:	add	sp, sp, #1020	; 0x3fc
   1105c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11060:	strheq	r2, [r2], -r0
   11064:	strheq	r2, [r2], -r4
   11068:	andeq	r2, r2, r8, lsr #1
   1106c:	andeq	r1, r1, r4, lsr #24
   11070:	andeq	r1, r1, r7, ror #18
   11074:	andeq	r1, r1, r7, lsr #24
   11078:	muleq	r1, lr, r9
   1107c:	andeq	r1, r1, sl, lsr #24
   11080:	andeq	r1, r1, r0, asr #24
   11084:	andeq	r1, r1, r0, ror ip
   11088:			; <UNDEFINED> instruction: 0x000116bf
   1108c:	andeq	r1, r1, r2, lsr #17
   11090:	andeq	r1, r1, r3, ror ip
   11094:	muleq	r2, r8, r0
   11098:	andeq	r1, r1, r8, lsl #24
   1109c:	andeq	r1, r1, sp, lsl #25
   110a0:	andeq	r1, r1, r7, asr #16
   110a4:	muleq	r1, r0, ip
   110a8:			; <UNDEFINED> instruction: 0x000117ba
   110ac:	muleq	r1, r3, ip
   110b0:	muleq	r1, r6, ip
   110b4:	muleq	r1, r8, ip
   110b8:	andeq	r2, r2, r0, lsr #1
   110bc:	andeq	r1, r1, r4, lsl r6
   110c0:			; <UNDEFINED> instruction: 0x00011cb2
   110c4:	strdeq	r1, [r1], -r9
   110c8:	andeq	r2, r2, ip, lsr #1

000110cc <_start@@Base>:
   110cc:	mov	fp, #0
   110d0:	mov	lr, #0
   110d4:	pop	{r1}		; (ldr r1, [sp], #4)
   110d8:	mov	r2, sp
   110dc:	push	{r2}		; (str r2, [sp, #-4]!)
   110e0:	push	{r0}		; (str r0, [sp, #-4]!)
   110e4:	ldr	ip, [pc, #16]	; 110fc <_start@@Base+0x30>
   110e8:	push	{ip}		; (str ip, [sp, #-4]!)
   110ec:	ldr	r0, [pc, #12]	; 11100 <_start@@Base+0x34>
   110f0:	ldr	r3, [pc, #12]	; 11104 <_start@@Base+0x38>
   110f4:	bl	10c70 <__libc_start_main@plt>
   110f8:	bl	10d0c <abort@plt>
   110fc:	andeq	r1, r1, r4, lsl #12
   11100:	andeq	r0, r1, r4, lsr #26
   11104:	andeq	r1, r1, r4, lsr #11
   11108:	ldr	r3, [pc, #20]	; 11124 <_start@@Base+0x58>
   1110c:	ldr	r2, [pc, #20]	; 11128 <_start@@Base+0x5c>
   11110:	add	r3, pc, r3
   11114:	ldr	r2, [r3, r2]
   11118:	cmp	r2, #0
   1111c:	bxeq	lr
   11120:	b	10c7c <__gmon_start__@plt>
   11124:	andeq	r0, r1, r8, ror #29
   11128:	andeq	r0, r0, r8, lsl #1
   1112c:	ldr	r0, [pc, #24]	; 1114c <_start@@Base+0x80>
   11130:	ldr	r3, [pc, #24]	; 11150 <_start@@Base+0x84>
   11134:	cmp	r3, r0
   11138:	bxeq	lr
   1113c:	ldr	r3, [pc, #16]	; 11154 <_start@@Base+0x88>
   11140:	cmp	r3, #0
   11144:	bxeq	lr
   11148:	bx	r3
   1114c:	muleq	r2, r4, r0
   11150:	muleq	r2, r4, r0
   11154:	andeq	r0, r0, r0
   11158:	ldr	r0, [pc, #36]	; 11184 <_start@@Base+0xb8>
   1115c:	ldr	r1, [pc, #36]	; 11188 <_start@@Base+0xbc>
   11160:	sub	r1, r1, r0
   11164:	asr	r1, r1, #2
   11168:	add	r1, r1, r1, lsr #31
   1116c:	asrs	r1, r1, #1
   11170:	bxeq	lr
   11174:	ldr	r3, [pc, #16]	; 1118c <_start@@Base+0xc0>
   11178:	cmp	r3, #0
   1117c:	bxeq	lr
   11180:	bx	r3
   11184:	muleq	r2, r4, r0
   11188:	muleq	r2, r4, r0
   1118c:	andeq	r0, r0, r0
   11190:	push	{r4, lr}
   11194:	ldr	r4, [pc, #24]	; 111b4 <_start@@Base+0xe8>
   11198:	ldrb	r3, [r4]
   1119c:	cmp	r3, #0
   111a0:	popne	{r4, pc}
   111a4:	bl	1112c <_start@@Base+0x60>
   111a8:	mov	r3, #1
   111ac:	strb	r3, [r4]
   111b0:	pop	{r4, pc}
   111b4:	andeq	r2, r2, r4, lsr #1
   111b8:	b	11158 <_start@@Base+0x8c>
   111bc:	push	{r4, lr}
   111c0:	ldr	r0, [pc, #260]	; 112cc <_start@@Base+0x200>
   111c4:	bl	10c58 <puts@plt>
   111c8:	ldr	r0, [pc, #256]	; 112d0 <_start@@Base+0x204>
   111cc:	bl	10c58 <puts@plt>
   111d0:	ldr	r0, [pc, #252]	; 112d4 <_start@@Base+0x208>
   111d4:	bl	10c58 <puts@plt>
   111d8:	ldr	r0, [pc, #248]	; 112d8 <_start@@Base+0x20c>
   111dc:	bl	10c58 <puts@plt>
   111e0:	ldr	r0, [pc, #244]	; 112dc <_start@@Base+0x210>
   111e4:	bl	10c58 <puts@plt>
   111e8:	ldr	r0, [pc, #240]	; 112e0 <_start@@Base+0x214>
   111ec:	bl	10c58 <puts@plt>
   111f0:	ldr	r0, [pc, #236]	; 112e4 <_start@@Base+0x218>
   111f4:	bl	10c58 <puts@plt>
   111f8:	ldr	r0, [pc, #232]	; 112e8 <_start@@Base+0x21c>
   111fc:	bl	10c58 <puts@plt>
   11200:	ldr	r0, [pc, #228]	; 112ec <_start@@Base+0x220>
   11204:	bl	10c58 <puts@plt>
   11208:	ldr	r0, [pc, #224]	; 112f0 <_start@@Base+0x224>
   1120c:	bl	10c58 <puts@plt>
   11210:	ldr	r0, [pc, #220]	; 112f4 <_start@@Base+0x228>
   11214:	bl	10c58 <puts@plt>
   11218:	ldr	r0, [pc, #216]	; 112f8 <_start@@Base+0x22c>
   1121c:	bl	10c58 <puts@plt>
   11220:	ldr	r0, [pc, #212]	; 112fc <_start@@Base+0x230>
   11224:	bl	10c58 <puts@plt>
   11228:	ldr	r0, [pc, #208]	; 11300 <_start@@Base+0x234>
   1122c:	bl	10c58 <puts@plt>
   11230:	ldr	r0, [pc, #204]	; 11304 <_start@@Base+0x238>
   11234:	bl	10c58 <puts@plt>
   11238:	mov	r0, #10
   1123c:	bl	10cc4 <putchar@plt>
   11240:	ldr	r0, [pc, #192]	; 11308 <_start@@Base+0x23c>
   11244:	bl	10c58 <puts@plt>
   11248:	ldr	r0, [pc, #188]	; 1130c <_start@@Base+0x240>
   1124c:	bl	10c58 <puts@plt>
   11250:	mov	r0, #10
   11254:	bl	10cc4 <putchar@plt>
   11258:	ldr	r0, [pc, #176]	; 11310 <_start@@Base+0x244>
   1125c:	bl	10c58 <puts@plt>
   11260:	ldr	r0, [pc, #172]	; 11314 <_start@@Base+0x248>
   11264:	bl	10c58 <puts@plt>
   11268:	mov	r0, #10
   1126c:	bl	10cc4 <putchar@plt>
   11270:	ldr	r0, [pc, #160]	; 11318 <_start@@Base+0x24c>
   11274:	bl	10c58 <puts@plt>
   11278:	ldr	r0, [pc, #156]	; 1131c <_start@@Base+0x250>
   1127c:	bl	10c58 <puts@plt>
   11280:	mov	r0, #10
   11284:	bl	10cc4 <putchar@plt>
   11288:	ldr	r0, [pc, #144]	; 11320 <_start@@Base+0x254>
   1128c:	bl	10c58 <puts@plt>
   11290:	ldr	r0, [pc, #140]	; 11324 <_start@@Base+0x258>
   11294:	bl	10c58 <puts@plt>
   11298:	ldr	r0, [pc, #136]	; 11328 <_start@@Base+0x25c>
   1129c:	bl	10c58 <puts@plt>
   112a0:	ldr	r0, [pc, #132]	; 1132c <_start@@Base+0x260>
   112a4:	bl	10c58 <puts@plt>
   112a8:	ldr	r0, [pc, #128]	; 11330 <_start@@Base+0x264>
   112ac:	bl	10c58 <puts@plt>
   112b0:	ldr	r0, [pc, #124]	; 11334 <_start@@Base+0x268>
   112b4:	bl	10c58 <puts@plt>
   112b8:	ldr	r0, [pc, #120]	; 11338 <_start@@Base+0x26c>
   112bc:	bl	10c58 <puts@plt>
   112c0:	mov	r0, #10
   112c4:	pop	{r4, lr}
   112c8:	b	10cc4 <putchar@plt>
   112cc:	andeq	r1, r1, r9, lsl r6
   112d0:	andeq	r1, r1, r0, lsr #12
   112d4:	andeq	r1, r1, r6, asr r6
   112d8:	muleq	r1, lr, r6
   112dc:	andeq	r1, r1, pc, lsr #13
   112e0:	andeq	r1, r1, ip, asr #13
   112e4:	andeq	r1, r1, r9, lsl r7
   112e8:	andeq	r1, r1, lr, asr r7
   112ec:	andeq	r1, r1, sl, lsr #15
   112f0:	andeq	r1, r1, r2, asr #15
   112f4:	andeq	r1, r1, r0, lsl #16
   112f8:	andeq	r1, r1, r7, lsr r8
   112fc:	andeq	r1, r1, r1, asr r8
   11300:	muleq	r1, r6, r8
   11304:	andeq	r1, r1, ip, lsr #17
   11308:	andeq	r1, r1, fp, ror #17
   1130c:	andeq	r1, r1, r9, lsr r9
   11310:	andeq	r1, r1, r5, asr r9
   11314:	andeq	r1, r1, lr, ror #18
   11318:	andeq	r1, r1, ip, lsl #19
   1131c:	andeq	r1, r1, r8, lsr #19
   11320:	ldrdeq	r1, [r1], -sl
   11324:	andeq	r1, r1, r8, lsr #20
   11328:	andeq	r1, r1, r1, ror sl
   1132c:	muleq	r1, ip, sl
   11330:	andeq	r1, r1, r8, ror #21
   11334:	andeq	r1, r1, lr, lsr #22
   11338:	andeq	r1, r1, sp, ror #22
   1133c:	push	{r4, lr}
   11340:	sub	sp, sp, #40	; 0x28
   11344:	mov	r4, r0
   11348:	bl	10c58 <puts@plt>
   1134c:	add	r3, sp, #28
   11350:	add	r2, sp, #16
   11354:	add	r1, sp, #32
   11358:	mov	r0, r4
   1135c:	str	r3, [sp, #4]
   11360:	add	r3, sp, #24
   11364:	str	r3, [sp]
   11368:	add	r3, sp, #20
   1136c:	bl	10c34 <coda_recognize_file@plt>
   11370:	cmp	r0, #0
   11374:	beq	113b0 <_start@@Base+0x2e4>
   11378:	bl	10cf4 <coda_get_errno@plt>
   1137c:	ldr	r0, [r0]
   11380:	bl	10cdc <coda_errno_to_string@plt>
   11384:	mov	r1, r0
   11388:	ldr	r0, [pc, #408]	; 11528 <_start@@Base+0x45c>
   1138c:	bl	10bc8 <printf@plt>
   11390:	mov	r1, #0
   11394:	mov	r0, r1
   11398:	bl	10bd4 <coda_set_error@plt>
   1139c:	ldr	r3, [pc, #392]	; 1152c <_start@@Base+0x460>
   113a0:	mov	r2, #1
   113a4:	str	r2, [r3]
   113a8:	add	sp, sp, #40	; 0x28
   113ac:	pop	{r4, pc}
   113b0:	ldr	r3, [pc, #376]	; 11530 <_start@@Base+0x464>
   113b4:	ldr	r3, [r3]
   113b8:	cmp	r3, #0
   113bc:	beq	113e4 <_start@@Base+0x318>
   113c0:	ldr	r3, [sp, #20]
   113c4:	cmp	r3, #0
   113c8:	beq	113d8 <_start@@Base+0x30c>
   113cc:	ldr	r3, [sp, #24]
   113d0:	cmp	r3, #0
   113d4:	bne	113e4 <_start@@Base+0x318>
   113d8:	ldr	r0, [pc, #340]	; 11534 <_start@@Base+0x468>
   113dc:	bl	10c58 <puts@plt>
   113e0:	b	1139c <_start@@Base+0x2d0>
   113e4:	ldr	r3, [pc, #332]	; 11538 <_start@@Base+0x46c>
   113e8:	ldr	r3, [r3]
   113ec:	cmp	r3, #0
   113f0:	beq	11434 <_start@@Base+0x368>
   113f4:	ldr	r0, [sp, #16]
   113f8:	bl	10c40 <coda_type_get_format_name@plt>
   113fc:	mov	r1, r0
   11400:	ldr	r0, [pc, #308]	; 1153c <_start@@Base+0x470>
   11404:	bl	10bc8 <printf@plt>
   11408:	ldr	r1, [sp, #20]
   1140c:	cmp	r1, #0
   11410:	beq	1142c <_start@@Base+0x360>
   11414:	ldr	r2, [sp, #24]
   11418:	cmp	r2, #0
   1141c:	beq	1142c <_start@@Base+0x360>
   11420:	ldr	r0, [pc, #280]	; 11540 <_start@@Base+0x474>
   11424:	ldr	r3, [sp, #28]
   11428:	bl	10bc8 <printf@plt>
   1142c:	mov	r0, #10
   11430:	bl	10cc4 <putchar@plt>
   11434:	add	r1, sp, #12
   11438:	mov	r0, r4
   1143c:	bl	10be0 <coda_open@plt>
   11440:	cmp	r0, #0
   11444:	beq	1149c <_start@@Base+0x3d0>
   11448:	bl	10cf4 <coda_get_errno@plt>
   1144c:	ldr	r3, [r0]
   11450:	cmn	r3, #21
   11454:	beq	11474 <_start@@Base+0x3a8>
   11458:	bl	10cf4 <coda_get_errno@plt>
   1145c:	ldr	r0, [r0]
   11460:	bl	10cdc <coda_errno_to_string@plt>
   11464:	mov	r1, r0
   11468:	ldr	r0, [pc, #184]	; 11528 <_start@@Base+0x45c>
   1146c:	bl	10bc8 <printf@plt>
   11470:	b	1139c <_start@@Base+0x2d0>
   11474:	mov	r0, #0
   11478:	bl	10bf8 <coda_set_option_use_mmap@plt>
   1147c:	add	r1, sp, #12
   11480:	mov	r0, r4
   11484:	bl	10be0 <coda_open@plt>
   11488:	mov	r4, r0
   1148c:	mov	r0, #1
   11490:	bl	10bf8 <coda_set_option_use_mmap@plt>
   11494:	cmp	r4, #0
   11498:	bne	11458 <_start@@Base+0x38c>
   1149c:	ldr	r3, [pc, #160]	; 11544 <_start@@Base+0x478>
   114a0:	ldr	r2, [pc, #160]	; 11548 <_start@@Base+0x47c>
   114a4:	ldr	r0, [sp, #12]
   114a8:	ldr	r1, [r3]
   114ac:	mov	r3, #0
   114b0:	clz	r1, r1
   114b4:	lsr	r1, r1, #5
   114b8:	bl	10c64 <coda_product_check@plt>
   114bc:	cmp	r0, #0
   114c0:	beq	114f4 <_start@@Base+0x428>
   114c4:	bl	10cf4 <coda_get_errno@plt>
   114c8:	ldr	r0, [r0]
   114cc:	bl	10cdc <coda_errno_to_string@plt>
   114d0:	mov	r1, r0
   114d4:	ldr	r0, [pc, #76]	; 11528 <_start@@Base+0x45c>
   114d8:	bl	10bc8 <printf@plt>
   114dc:	ldr	r3, [pc, #72]	; 1152c <_start@@Base+0x460>
   114e0:	mov	r2, #1
   114e4:	ldr	r0, [sp, #12]
   114e8:	str	r2, [r3]
   114ec:	bl	10cd0 <coda_close@plt>
   114f0:	b	113a8 <_start@@Base+0x2dc>
   114f4:	ldr	r0, [sp, #12]
   114f8:	bl	10cd0 <coda_close@plt>
   114fc:	cmp	r0, #0
   11500:	beq	1151c <_start@@Base+0x450>
   11504:	bl	10cf4 <coda_get_errno@plt>
   11508:	ldr	r0, [r0]
   1150c:	bl	10cdc <coda_errno_to_string@plt>
   11510:	mov	r1, r0
   11514:	ldr	r0, [pc, #48]	; 1154c <_start@@Base+0x480>
   11518:	b	1146c <_start@@Base+0x3a0>
   1151c:	mov	r0, #10
   11520:	bl	10cc4 <putchar@plt>
   11524:	b	113a8 <_start@@Base+0x2dc>
   11528:	andeq	r1, r1, sp, lsr #23
   1152c:	andeq	r2, r2, ip, lsr #1
   11530:	andeq	r2, r2, r8, lsr #1
   11534:			; <UNDEFINED> instruction: 0x00011bbb
   11538:	strheq	r2, [r2], -r0
   1153c:	andeq	r1, r1, r6, ror #23
   11540:	strdeq	r1, [r1], -fp
   11544:	strheq	r2, [r2], -r4
   11548:	andeq	r1, r1, r0, asr r5
   1154c:	andeq	r1, r1, r6, lsl #24
   11550:	push	{r4, lr}
   11554:	mov	r4, r0
   11558:	ldr	r0, [pc, #52]	; 11594 <_start@@Base+0x4c8>
   1155c:	bl	10bc8 <printf@plt>
   11560:	cmp	r4, #0
   11564:	beq	1157c <_start@@Base+0x4b0>
   11568:	ldr	r0, [pc, #40]	; 11598 <_start@@Base+0x4cc>
   1156c:	bl	10bc8 <printf@plt>
   11570:	ldr	r1, [pc, #36]	; 1159c <_start@@Base+0x4d0>
   11574:	mov	r0, r4
   11578:	bl	10c04 <coda_cursor_print_path@plt>
   1157c:	mov	r0, #10
   11580:	bl	10cc4 <putchar@plt>
   11584:	ldr	r3, [pc, #20]	; 115a0 <_start@@Base+0x4d4>
   11588:	mov	r2, #1
   1158c:	str	r2, [r3]
   11590:	pop	{r4, pc}
   11594:	andeq	r1, r1, r3, lsl ip
   11598:	andeq	r1, r1, pc, lsl ip
   1159c:	andeq	r0, r1, r8, asr #23
   115a0:	andeq	r2, r2, ip, lsr #1

000115a4 <__libc_csu_init@@Base>:
   115a4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   115a8:	mov	r7, r0
   115ac:	ldr	r6, [pc, #72]	; 115fc <__libc_csu_init@@Base+0x58>
   115b0:	ldr	r5, [pc, #72]	; 11600 <__libc_csu_init@@Base+0x5c>
   115b4:	add	r6, pc, r6
   115b8:	add	r5, pc, r5
   115bc:	sub	r6, r6, r5
   115c0:	mov	r8, r1
   115c4:	mov	r9, r2
   115c8:	bl	10b90 <coda_set_option_perform_boundary_checks@plt-0x20>
   115cc:	asrs	r6, r6, #2
   115d0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   115d4:	mov	r4, #0
   115d8:	add	r4, r4, #1
   115dc:	ldr	r3, [r5], #4
   115e0:	mov	r2, r9
   115e4:	mov	r1, r8
   115e8:	mov	r0, r7
   115ec:	blx	r3
   115f0:	cmp	r6, r4
   115f4:	bne	115d8 <__libc_csu_init@@Base+0x34>
   115f8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   115fc:	andeq	r0, r1, r0, asr #18
   11600:	andeq	r0, r1, r8, lsr r9

00011604 <__libc_csu_fini@@Base>:
   11604:	bx	lr

Disassembly of section .fini:

00011608 <.fini>:
   11608:	push	{r3, lr}
   1160c:	pop	{r3, pc}
