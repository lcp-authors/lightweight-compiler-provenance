
../repos/coreutils/src/chown:     file format elf32-littlearm


Disassembly of section .init:

00011038 <.init>:
   11038:	push	{r3, lr}
   1103c:	bl	118e4 <__assert_fail@plt+0x520>
   11040:	pop	{r3, pc}

Disassembly of section .plt:

00011044 <fstatfs64@plt-0x14>:
   11044:	push	{lr}		; (str lr, [sp, #-4]!)
   11048:	ldr	lr, [pc, #4]	; 11054 <fstatfs64@plt-0x4>
   1104c:	add	lr, pc, lr
   11050:	ldr	pc, [lr, #8]!
   11054:	andeq	r8, r1, ip, lsr #31

00011058 <fstatfs64@plt>:
   11058:	add	ip, pc, #0, 12
   1105c:	add	ip, ip, #24, 20	; 0x18000
   11060:	ldr	pc, [ip, #4012]!	; 0xfac

00011064 <calloc@plt>:
   11064:	add	ip, pc, #0, 12
   11068:	add	ip, ip, #24, 20	; 0x18000
   1106c:	ldr	pc, [ip, #4004]!	; 0xfa4

00011070 <endgrent@plt>:
   11070:	add	ip, pc, #0, 12
   11074:	add	ip, ip, #24, 20	; 0x18000
   11078:	ldr	pc, [ip, #3996]!	; 0xf9c

0001107c <fputs_unlocked@plt>:
   1107c:	add	ip, pc, #0, 12
   11080:	add	ip, ip, #24, 20	; 0x18000
   11084:	ldr	pc, [ip, #3988]!	; 0xf94

00011088 <raise@plt>:
   11088:	add	ip, pc, #0, 12
   1108c:	add	ip, ip, #24, 20	; 0x18000
   11090:	ldr	pc, [ip, #3980]!	; 0xf8c

00011094 <getpwnam@plt>:
   11094:	add	ip, pc, #0, 12
   11098:	add	ip, ip, #24, 20	; 0x18000
   1109c:	ldr	pc, [ip, #3972]!	; 0xf84

000110a0 <strcmp@plt>:
   110a0:	add	ip, pc, #0, 12
   110a4:	add	ip, ip, #24, 20	; 0x18000
   110a8:	ldr	pc, [ip, #3964]!	; 0xf7c

000110ac <getpwuid@plt>:
   110ac:	add	ip, pc, #0, 12
   110b0:	add	ip, ip, #24, 20	; 0x18000
   110b4:	ldr	pc, [ip, #3956]!	; 0xf74

000110b8 <fflush@plt>:
   110b8:	add	ip, pc, #0, 12
   110bc:	add	ip, ip, #24, 20	; 0x18000
   110c0:	ldr	pc, [ip, #3948]!	; 0xf6c

000110c4 <memmove@plt>:
   110c4:	add	ip, pc, #0, 12
   110c8:	add	ip, ip, #24, 20	; 0x18000
   110cc:	ldr	pc, [ip, #3940]!	; 0xf64

000110d0 <free@plt>:
   110d0:	add	ip, pc, #0, 12
   110d4:	add	ip, ip, #24, 20	; 0x18000
   110d8:	ldr	pc, [ip, #3932]!	; 0xf5c

000110dc <__openat64_2@plt>:
   110dc:	add	ip, pc, #0, 12
   110e0:	add	ip, ip, #24, 20	; 0x18000
   110e4:	ldr	pc, [ip, #3924]!	; 0xf54

000110e8 <_exit@plt>:
   110e8:	add	ip, pc, #0, 12
   110ec:	add	ip, ip, #24, 20	; 0x18000
   110f0:	ldr	pc, [ip, #3916]!	; 0xf4c

000110f4 <memcpy@plt>:
   110f4:	add	ip, pc, #0, 12
   110f8:	add	ip, ip, #24, 20	; 0x18000
   110fc:	ldr	pc, [ip, #3908]!	; 0xf44

00011100 <mbsinit@plt>:
   11100:	add	ip, pc, #0, 12
   11104:	add	ip, ip, #24, 20	; 0x18000
   11108:	ldr	pc, [ip, #3900]!	; 0xf3c

0001110c <memcmp@plt>:
   1110c:	add	ip, pc, #0, 12
   11110:	add	ip, ip, #24, 20	; 0x18000
   11114:	ldr	pc, [ip, #3892]!	; 0xf34

00011118 <stpcpy@plt>:
   11118:	add	ip, pc, #0, 12
   1111c:	add	ip, ip, #24, 20	; 0x18000
   11120:	ldr	pc, [ip, #3884]!	; 0xf2c

00011124 <fputc_unlocked@plt>:
   11124:	add	ip, pc, #0, 12
   11128:	add	ip, ip, #24, 20	; 0x18000
   1112c:	ldr	pc, [ip, #3876]!	; 0xf24

00011130 <dcgettext@plt>:
   11130:	add	ip, pc, #0, 12
   11134:	add	ip, ip, #24, 20	; 0x18000
   11138:	ldr	pc, [ip, #3868]!	; 0xf1c

0001113c <realloc@plt>:
   1113c:	add	ip, pc, #0, 12
   11140:	add	ip, ip, #24, 20	; 0x18000
   11144:	ldr	pc, [ip, #3860]!	; 0xf14

00011148 <textdomain@plt>:
   11148:	add	ip, pc, #0, 12
   1114c:	add	ip, ip, #24, 20	; 0x18000
   11150:	ldr	pc, [ip, #3852]!	; 0xf0c

00011154 <__fxstatat64@plt>:
   11154:	add	ip, pc, #0, 12
   11158:	add	ip, ip, #24, 20	; 0x18000
   1115c:	ldr	pc, [ip, #3844]!	; 0xf04

00011160 <iswprint@plt>:
   11160:	add	ip, pc, #0, 12
   11164:	add	ip, ip, #24, 20	; 0x18000
   11168:	ldr	pc, [ip, #3836]!	; 0xefc

0001116c <__fxstat64@plt>:
   1116c:	add	ip, pc, #0, 12
   11170:	add	ip, ip, #24, 20	; 0x18000
   11174:	ldr	pc, [ip, #3828]!	; 0xef4

00011178 <lseek64@plt>:
   11178:	add	ip, pc, #0, 12
   1117c:	add	ip, ip, #24, 20	; 0x18000
   11180:	ldr	pc, [ip, #3820]!	; 0xeec

00011184 <__ctype_get_mb_cur_max@plt>:
   11184:	add	ip, pc, #0, 12
   11188:	add	ip, ip, #24, 20	; 0x18000
   1118c:	ldr	pc, [ip, #3812]!	; 0xee4

00011190 <strcpy@plt>:
   11190:	add	ip, pc, #0, 12
   11194:	add	ip, ip, #24, 20	; 0x18000
   11198:	ldr	pc, [ip, #3804]!	; 0xedc

0001119c <__fpending@plt>:
   1119c:	add	ip, pc, #0, 12
   111a0:	add	ip, ip, #24, 20	; 0x18000
   111a4:	ldr	pc, [ip, #3796]!	; 0xed4

000111a8 <ferror_unlocked@plt>:
   111a8:	add	ip, pc, #0, 12
   111ac:	add	ip, ip, #24, 20	; 0x18000
   111b0:	ldr	pc, [ip, #3788]!	; 0xecc

000111b4 <mbrtowc@plt>:
   111b4:	add	ip, pc, #0, 12
   111b8:	add	ip, ip, #24, 20	; 0x18000
   111bc:	ldr	pc, [ip, #3780]!	; 0xec4

000111c0 <error@plt>:
   111c0:	add	ip, pc, #0, 12
   111c4:	add	ip, ip, #24, 20	; 0x18000
   111c8:	ldr	pc, [ip, #3772]!	; 0xebc

000111cc <open64@plt>:
   111cc:	add	ip, pc, #0, 12
   111d0:	add	ip, ip, #24, 20	; 0x18000
   111d4:	ldr	pc, [ip, #3764]!	; 0xeb4

000111d8 <malloc@plt>:
   111d8:	add	ip, pc, #0, 12
   111dc:	add	ip, ip, #24, 20	; 0x18000
   111e0:	ldr	pc, [ip, #3756]!	; 0xeac

000111e4 <__libc_start_main@plt>:
   111e4:	add	ip, pc, #0, 12
   111e8:	add	ip, ip, #24, 20	; 0x18000
   111ec:	ldr	pc, [ip, #3748]!	; 0xea4

000111f0 <__freading@plt>:
   111f0:	add	ip, pc, #0, 12
   111f4:	add	ip, ip, #24, 20	; 0x18000
   111f8:	ldr	pc, [ip, #3740]!	; 0xe9c

000111fc <__gmon_start__@plt>:
   111fc:	add	ip, pc, #0, 12
   11200:	add	ip, ip, #24, 20	; 0x18000
   11204:	ldr	pc, [ip, #3732]!	; 0xe94

00011208 <getopt_long@plt>:
   11208:	add	ip, pc, #0, 12
   1120c:	add	ip, ip, #24, 20	; 0x18000
   11210:	ldr	pc, [ip, #3724]!	; 0xe8c

00011214 <__ctype_b_loc@plt>:
   11214:	add	ip, pc, #0, 12
   11218:	add	ip, ip, #24, 20	; 0x18000
   1121c:	ldr	pc, [ip, #3716]!	; 0xe84

00011220 <exit@plt>:
   11220:	add	ip, pc, #0, 12
   11224:	add	ip, ip, #24, 20	; 0x18000
   11228:	ldr	pc, [ip, #3708]!	; 0xe7c

0001122c <strtoul@plt>:
   1122c:	add	ip, pc, #0, 12
   11230:	add	ip, ip, #24, 20	; 0x18000
   11234:	ldr	pc, [ip, #3700]!	; 0xe74

00011238 <strlen@plt>:
   11238:	add	ip, pc, #0, 12
   1123c:	add	ip, ip, #24, 20	; 0x18000
   11240:	ldr	pc, [ip, #3692]!	; 0xe6c

00011244 <strchr@plt>:
   11244:	add	ip, pc, #0, 12
   11248:	add	ip, ip, #24, 20	; 0x18000
   1124c:	ldr	pc, [ip, #3684]!	; 0xe64

00011250 <openat64@plt>:
   11250:	add	ip, pc, #0, 12
   11254:	add	ip, ip, #24, 20	; 0x18000
   11258:	ldr	pc, [ip, #3676]!	; 0xe5c

0001125c <fchown@plt>:
   1125c:	add	ip, pc, #0, 12
   11260:	add	ip, ip, #24, 20	; 0x18000
   11264:	ldr	pc, [ip, #3668]!	; 0xe54

00011268 <__errno_location@plt>:
   11268:	add	ip, pc, #0, 12
   1126c:	add	ip, ip, #24, 20	; 0x18000
   11270:	ldr	pc, [ip, #3660]!	; 0xe4c

00011274 <__cxa_atexit@plt>:
   11274:	add	ip, pc, #0, 12
   11278:	add	ip, ip, #24, 20	; 0x18000
   1127c:	ldr	pc, [ip, #3652]!	; 0xe44

00011280 <memset@plt>:
   11280:	add	ip, pc, #0, 12
   11284:	add	ip, ip, #24, 20	; 0x18000
   11288:	ldr	pc, [ip, #3644]!	; 0xe3c

0001128c <__printf_chk@plt>:
   1128c:	add	ip, pc, #0, 12
   11290:	add	ip, ip, #24, 20	; 0x18000
   11294:	ldr	pc, [ip, #3636]!	; 0xe34

00011298 <fileno@plt>:
   11298:	add	ip, pc, #0, 12
   1129c:	add	ip, ip, #24, 20	; 0x18000
   112a0:	ldr	pc, [ip, #3628]!	; 0xe2c

000112a4 <__fprintf_chk@plt>:
   112a4:	add	ip, pc, #0, 12
   112a8:	add	ip, ip, #24, 20	; 0x18000
   112ac:	ldr	pc, [ip, #3620]!	; 0xe24

000112b0 <fclose@plt>:
   112b0:	add	ip, pc, #0, 12
   112b4:	add	ip, ip, #24, 20	; 0x18000
   112b8:	ldr	pc, [ip, #3612]!	; 0xe1c

000112bc <fseeko64@plt>:
   112bc:	add	ip, pc, #0, 12
   112c0:	add	ip, ip, #24, 20	; 0x18000
   112c4:	ldr	pc, [ip, #3604]!	; 0xe14

000112c8 <fcntl64@plt>:
   112c8:	add	ip, pc, #0, 12
   112cc:	add	ip, ip, #24, 20	; 0x18000
   112d0:	ldr	pc, [ip, #3596]!	; 0xe0c

000112d4 <setlocale@plt>:
   112d4:	add	ip, pc, #0, 12
   112d8:	add	ip, ip, #24, 20	; 0x18000
   112dc:	ldr	pc, [ip, #3588]!	; 0xe04

000112e0 <endpwent@plt>:
   112e0:	add	ip, pc, #0, 12
   112e4:	add	ip, ip, #24, 20	; 0x18000
   112e8:	ldr	pc, [ip, #3580]!	; 0xdfc

000112ec <strrchr@plt>:
   112ec:	add	ip, pc, #0, 12
   112f0:	add	ip, ip, #24, 20	; 0x18000
   112f4:	ldr	pc, [ip, #3572]!	; 0xdf4

000112f8 <nl_langinfo@plt>:
   112f8:	add	ip, pc, #0, 12
   112fc:	add	ip, ip, #24, 20	; 0x18000
   11300:	ldr	pc, [ip, #3564]!	; 0xdec

00011304 <readdir64@plt>:
   11304:	add	ip, pc, #0, 12
   11308:	add	ip, ip, #24, 20	; 0x18000
   1130c:	ldr	pc, [ip, #3556]!	; 0xde4

00011310 <fdopendir@plt>:
   11310:	add	ip, pc, #0, 12
   11314:	add	ip, ip, #24, 20	; 0x18000
   11318:	ldr	pc, [ip, #3548]!	; 0xddc

0001131c <dirfd@plt>:
   1131c:	add	ip, pc, #0, 12
   11320:	add	ip, ip, #24, 20	; 0x18000
   11324:	ldr	pc, [ip, #3540]!	; 0xdd4

00011328 <fchdir@plt>:
   11328:	add	ip, pc, #0, 12
   1132c:	add	ip, ip, #24, 20	; 0x18000
   11330:	ldr	pc, [ip, #3532]!	; 0xdcc

00011334 <qsort@plt>:
   11334:	add	ip, pc, #0, 12
   11338:	add	ip, ip, #24, 20	; 0x18000
   1133c:	ldr	pc, [ip, #3524]!	; 0xdc4

00011340 <fchownat@plt>:
   11340:	add	ip, pc, #0, 12
   11344:	add	ip, ip, #24, 20	; 0x18000
   11348:	ldr	pc, [ip, #3516]!	; 0xdbc

0001134c <bindtextdomain@plt>:
   1134c:	add	ip, pc, #0, 12
   11350:	add	ip, ip, #24, 20	; 0x18000
   11354:	ldr	pc, [ip, #3508]!	; 0xdb4

00011358 <__xstat64@plt>:
   11358:	add	ip, pc, #0, 12
   1135c:	add	ip, ip, #24, 20	; 0x18000
   11360:	ldr	pc, [ip, #3500]!	; 0xdac

00011364 <fputs@plt>:
   11364:	add	ip, pc, #0, 12
   11368:	add	ip, ip, #24, 20	; 0x18000
   1136c:	ldr	pc, [ip, #3492]!	; 0xda4

00011370 <strncmp@plt>:
   11370:	add	ip, pc, #0, 12
   11374:	add	ip, ip, #24, 20	; 0x18000
   11378:	ldr	pc, [ip, #3484]!	; 0xd9c

0001137c <abort@plt>:
   1137c:	add	ip, pc, #0, 12
   11380:	add	ip, ip, #24, 20	; 0x18000
   11384:	ldr	pc, [ip, #3476]!	; 0xd94

00011388 <close@plt>:
   11388:	add	ip, pc, #0, 12
   1138c:	add	ip, ip, #24, 20	; 0x18000
   11390:	ldr	pc, [ip, #3468]!	; 0xd8c

00011394 <__lxstat64@plt>:
   11394:	add	ip, pc, #0, 12
   11398:	add	ip, ip, #24, 20	; 0x18000
   1139c:	ldr	pc, [ip, #3460]!	; 0xd84

000113a0 <closedir@plt>:
   113a0:	add	ip, pc, #0, 12
   113a4:	add	ip, ip, #24, 20	; 0x18000
   113a8:	ldr	pc, [ip, #3452]!	; 0xd7c

000113ac <getgrgid@plt>:
   113ac:	add	ip, pc, #0, 12
   113b0:	add	ip, ip, #24, 20	; 0x18000
   113b4:	ldr	pc, [ip, #3444]!	; 0xd74

000113b8 <getgrnam@plt>:
   113b8:	add	ip, pc, #0, 12
   113bc:	add	ip, ip, #24, 20	; 0x18000
   113c0:	ldr	pc, [ip, #3436]!	; 0xd6c

000113c4 <__assert_fail@plt>:
   113c4:	add	ip, pc, #0, 12
   113c8:	add	ip, ip, #24, 20	; 0x18000
   113cc:	ldr	pc, [ip, #3428]!	; 0xd64

Disassembly of section .text:

000113d0 <.text>:
   113d0:	push	{r4, lr}
   113d4:	bl	11268 <__errno_location@plt>
   113d8:	mov	r3, #12
   113dc:	str	r3, [r0]
   113e0:	mov	r0, #0
   113e4:	pop	{r4, pc}
   113e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   113ec:	mvn	r4, #0
   113f0:	sub	sp, sp, #172	; 0xac
   113f4:	mov	r8, r0
   113f8:	mov	r7, r1
   113fc:	add	fp, sp, #40	; 0x28
   11400:	mov	r6, #16
   11404:	ldr	r0, [r1]
   11408:	mov	r9, #0
   1140c:	str	r4, [sp, #24]
   11410:	str	r4, [sp, #28]
   11414:	str	r4, [sp, #32]
   11418:	str	r4, [sp, #36]	; 0x24
   1141c:	bl	15688 <__assert_fail@plt+0x42c4>
   11420:	ldr	r1, [pc, #1064]	; 11850 <__assert_fail@plt+0x48c>
   11424:	mov	r0, #6
   11428:	bl	112d4 <setlocale@plt>
   1142c:	ldr	r1, [pc, #1056]	; 11854 <__assert_fail@plt+0x490>
   11430:	ldr	r0, [pc, #1056]	; 11858 <__assert_fail@plt+0x494>
   11434:	bl	1134c <bindtextdomain@plt>
   11438:	ldr	r0, [pc, #1048]	; 11858 <__assert_fail@plt+0x494>
   1143c:	bl	11148 <textdomain@plt>
   11440:	ldr	r0, [pc, #1044]	; 1185c <__assert_fail@plt+0x498>
   11444:	bl	1858c <__assert_fail@plt+0x71c8>
   11448:	mov	r0, fp
   1144c:	ldr	sl, [pc, #1036]	; 11860 <__assert_fail@plt+0x49c>
   11450:	bl	11d5c <__assert_fail@plt+0x998>
   11454:	mov	r5, #0
   11458:	ldr	r3, [pc, #1028]	; 11864 <__assert_fail@plt+0x4a0>
   1145c:	mov	r1, r7
   11460:	mov	r0, r8
   11464:	ldr	r2, [pc, #1020]	; 11868 <__assert_fail@plt+0x4a4>
   11468:	str	r5, [sp]
   1146c:	bl	11208 <getopt_long@plt>
   11470:	cmn	r0, #1
   11474:	bne	114b8 <__assert_fail@plt+0xf4>
   11478:	ldrb	r3, [sp, #44]	; 0x2c
   1147c:	cmp	r3, r5
   11480:	beq	11634 <__assert_fail@plt+0x270>
   11484:	cmp	r6, #16
   11488:	bne	11638 <__assert_fail@plt+0x274>
   1148c:	cmp	r4, #1
   11490:	movne	r4, r5
   11494:	bne	11638 <__assert_fail@plt+0x274>
   11498:	mov	r2, #5
   1149c:	ldr	r1, [pc, #968]	; 1186c <__assert_fail@plt+0x4a8>
   114a0:	mov	r0, r5
   114a4:	bl	11130 <dcgettext@plt>
   114a8:	mov	r2, r0
   114ac:	mov	r1, r5
   114b0:	mov	r0, r4
   114b4:	bl	111c0 <error@plt>
   114b8:	cmp	r0, #102	; 0x66
   114bc:	beq	115f0 <__assert_fail@plt+0x22c>
   114c0:	bgt	1153c <__assert_fail@plt+0x178>
   114c4:	cmp	r0, #76	; 0x4c
   114c8:	beq	1160c <__assert_fail@plt+0x248>
   114cc:	bgt	1151c <__assert_fail@plt+0x158>
   114d0:	cmn	r0, #2
   114d4:	beq	11604 <__assert_fail@plt+0x240>
   114d8:	cmp	r0, #72	; 0x48
   114dc:	beq	11614 <__assert_fail@plt+0x250>
   114e0:	cmn	r0, #3
   114e4:	bne	116d8 <__assert_fail@plt+0x314>
   114e8:	ldr	r3, [pc, #896]	; 11870 <__assert_fail@plt+0x4ac>
   114ec:	ldr	r0, [pc, #896]	; 11874 <__assert_fail@plt+0x4b0>
   114f0:	ldr	r2, [pc, #896]	; 11878 <__assert_fail@plt+0x4b4>
   114f4:	stmib	sp, {r3, r5}
   114f8:	ldr	r3, [pc, #892]	; 1187c <__assert_fail@plt+0x4b8>
   114fc:	ldr	r1, [pc, #892]	; 11880 <__assert_fail@plt+0x4bc>
   11500:	str	r3, [sp]
   11504:	ldr	r3, [pc, #888]	; 11884 <__assert_fail@plt+0x4c0>
   11508:	ldr	r0, [r0]
   1150c:	ldr	r3, [r3]
   11510:	bl	1748c <__assert_fail@plt+0x60c8>
   11514:	mov	r0, r5
   11518:	bl	11220 <exit@plt>
   1151c:	cmp	r0, #82	; 0x52
   11520:	beq	115d8 <__assert_fail@plt+0x214>
   11524:	cmp	r0, #99	; 0x63
   11528:	beq	115e4 <__assert_fail@plt+0x220>
   1152c:	cmp	r0, #80	; 0x50
   11530:	bne	116d8 <__assert_fail@plt+0x314>
   11534:	mov	r6, #16
   11538:	b	11454 <__assert_fail@plt+0x90>
   1153c:	movw	r3, #257	; 0x101
   11540:	cmp	r0, r3
   11544:	beq	11594 <__assert_fail@plt+0x1d0>
   11548:	bgt	1156c <__assert_fail@plt+0x1a8>
   1154c:	cmp	r0, #118	; 0x76
   11550:	beq	115fc <__assert_fail@plt+0x238>
   11554:	cmp	r0, #256	; 0x100
   11558:	beq	1161c <__assert_fail@plt+0x258>
   1155c:	cmp	r0, #104	; 0x68
   11560:	bne	116d8 <__assert_fail@plt+0x314>
   11564:	mov	r4, r5
   11568:	b	11454 <__assert_fail@plt+0x90>
   1156c:	movw	r3, #259	; 0x103
   11570:	cmp	r0, r3
   11574:	beq	11624 <__assert_fail@plt+0x260>
   11578:	blt	1162c <__assert_fail@plt+0x268>
   1157c:	cmp	r0, #260	; 0x104
   11580:	bne	116d8 <__assert_fail@plt+0x314>
   11584:	ldr	r3, [pc, #764]	; 11888 <__assert_fail@plt+0x4c4>
   11588:	ldr	r2, [sl]
   1158c:	str	r2, [r3]
   11590:	b	11454 <__assert_fail@plt+0x90>
   11594:	mov	r3, r5
   11598:	add	r2, sp, #36	; 0x24
   1159c:	str	r5, [sp]
   115a0:	add	r1, sp, #32
   115a4:	ldr	r0, [sl]
   115a8:	bl	16fa4 <__assert_fail@plt+0x5be0>
   115ac:	subs	r3, r0, #0
   115b0:	beq	11454 <__assert_fail@plt+0x90>
   115b4:	ldr	r0, [sl]
   115b8:	str	r3, [sp, #20]
   115bc:	bl	16c88 <__assert_fail@plt+0x58c4>
   115c0:	ldr	r2, [pc, #708]	; 1188c <__assert_fail@plt+0x4c8>
   115c4:	mov	r1, r5
   115c8:	str	r0, [sp]
   115cc:	ldr	r3, [sp, #20]
   115d0:	mov	r0, #1
   115d4:	bl	111c0 <error@plt>
   115d8:	mov	r3, #1
   115dc:	strb	r3, [sp, #44]	; 0x2c
   115e0:	b	11454 <__assert_fail@plt+0x90>
   115e4:	mov	r3, #1
   115e8:	str	r3, [sp, #40]	; 0x28
   115ec:	b	11454 <__assert_fail@plt+0x90>
   115f0:	mov	r3, #1
   115f4:	strb	r3, [sp, #53]	; 0x35
   115f8:	b	11454 <__assert_fail@plt+0x90>
   115fc:	str	r5, [sp, #40]	; 0x28
   11600:	b	11454 <__assert_fail@plt+0x90>
   11604:	mov	r0, r5
   11608:	bl	11998 <__assert_fail@plt+0x5d4>
   1160c:	mov	r6, #2
   11610:	b	11454 <__assert_fail@plt+0x90>
   11614:	mov	r6, #17
   11618:	b	11454 <__assert_fail@plt+0x90>
   1161c:	mov	r4, #1
   11620:	b	11454 <__assert_fail@plt+0x90>
   11624:	mov	r9, #1
   11628:	b	11454 <__assert_fail@plt+0x90>
   1162c:	mov	r9, r5
   11630:	b	11454 <__assert_fail@plt+0x90>
   11634:	mov	r6, #16
   11638:	ldr	r2, [pc, #584]	; 11888 <__assert_fail@plt+0x4c4>
   1163c:	adds	r4, r4, #0
   11640:	movne	r4, #1
   11644:	ldr	sl, [pc, #580]	; 11890 <__assert_fail@plt+0x4cc>
   11648:	strb	r4, [sp, #52]	; 0x34
   1164c:	ldr	r4, [r2]
   11650:	ldr	r0, [sl]
   11654:	mov	r5, sl
   11658:	cmp	r4, #0
   1165c:	sub	r3, r8, r0
   11660:	bne	117f8 <__assert_fail@plt+0x434>
   11664:	cmp	r3, #1
   11668:	ble	116b0 <__assert_fail@plt+0x2ec>
   1166c:	add	r3, sp, #60	; 0x3c
   11670:	add	r2, sp, #28
   11674:	ldr	r0, [r7, r0, lsl #2]
   11678:	add	r1, sp, #24
   1167c:	str	r3, [sp]
   11680:	add	r3, sp, #56	; 0x38
   11684:	bl	16fa4 <__assert_fail@plt+0x5be0>
   11688:	subs	r8, r0, #0
   1168c:	beq	11790 <__assert_fail@plt+0x3cc>
   11690:	ldr	r3, [sl]
   11694:	ldr	r0, [r7, r3, lsl #2]
   11698:	bl	16c88 <__assert_fail@plt+0x58c4>
   1169c:	mov	r3, r8
   116a0:	ldr	r2, [pc, #484]	; 1188c <__assert_fail@plt+0x4c8>
   116a4:	mov	r1, r4
   116a8:	str	r0, [sp]
   116ac:	b	115d0 <__assert_fail@plt+0x20c>
   116b0:	cmp	r0, r8
   116b4:	mov	r2, #5
   116b8:	blt	116e0 <__assert_fail@plt+0x31c>
   116bc:	ldr	r1, [pc, #464]	; 11894 <__assert_fail@plt+0x4d0>
   116c0:	mov	r0, #0
   116c4:	bl	11130 <dcgettext@plt>
   116c8:	mov	r1, #0
   116cc:	mov	r2, r0
   116d0:	mov	r0, r1
   116d4:	bl	111c0 <error@plt>
   116d8:	mov	r0, #1
   116dc:	b	11608 <__assert_fail@plt+0x244>
   116e0:	ldr	r1, [pc, #432]	; 11898 <__assert_fail@plt+0x4d4>
   116e4:	mov	r0, #0
   116e8:	sub	r8, r8, #-1073741823	; 0xc0000001
   116ec:	bl	11130 <dcgettext@plt>
   116f0:	mov	r4, r0
   116f4:	ldr	r0, [r7, r8, lsl #2]
   116f8:	bl	16c88 <__assert_fail@plt+0x58c4>
   116fc:	mov	r1, #0
   11700:	mov	r3, r0
   11704:	mov	r2, r4
   11708:	mov	r0, r1
   1170c:	bl	111c0 <error@plt>
   11710:	b	116d8 <__assert_fail@plt+0x314>
   11714:	ldr	r0, [sp, #88]	; 0x58
   11718:	ldr	r3, [sp, #92]	; 0x5c
   1171c:	str	r0, [sp, #24]
   11720:	str	r3, [sp, #28]
   11724:	bl	11dd4 <__assert_fail@plt+0xa10>
   11728:	str	r0, [sp, #56]	; 0x38
   1172c:	ldr	r0, [sp, #92]	; 0x5c
   11730:	bl	11da0 <__assert_fail@plt+0x9dc>
   11734:	str	r0, [sp, #60]	; 0x3c
   11738:	ldrb	r3, [sp, #44]	; 0x2c
   1173c:	tst	r9, r3
   11740:	beq	117c4 <__assert_fail@plt+0x400>
   11744:	ldr	r0, [pc, #336]	; 1189c <__assert_fail@plt+0x4d8>
   11748:	bl	16c94 <__assert_fail@plt+0x58d0>
   1174c:	cmp	r0, #0
   11750:	mov	r4, r0
   11754:	str	r0, [sp, #48]	; 0x30
   11758:	bne	117c4 <__assert_fail@plt+0x400>
   1175c:	bl	11268 <__errno_location@plt>
   11760:	mov	r2, #5
   11764:	ldr	r1, [pc, #308]	; 118a0 <__assert_fail@plt+0x4dc>
   11768:	ldr	r5, [r0]
   1176c:	mov	r0, r4
   11770:	bl	11130 <dcgettext@plt>
   11774:	mov	r4, r0
   11778:	ldr	r1, [pc, #292]	; 118a4 <__assert_fail@plt+0x4e0>
   1177c:	mov	r0, #4
   11780:	bl	16aa4 <__assert_fail@plt+0x56e0>
   11784:	mov	r3, r0
   11788:	mov	r2, r4
   1178c:	b	11844 <__assert_fail@plt+0x480>
   11790:	ldr	r3, [sp, #56]	; 0x38
   11794:	cmp	r3, #0
   11798:	bne	117b4 <__assert_fail@plt+0x3f0>
   1179c:	ldr	r3, [sp, #60]	; 0x3c
   117a0:	cmp	r3, #0
   117a4:	beq	117b4 <__assert_fail@plt+0x3f0>
   117a8:	ldr	r0, [pc, #160]	; 11850 <__assert_fail@plt+0x48c>
   117ac:	bl	177f0 <__assert_fail@plt+0x642c>
   117b0:	str	r0, [sp, #56]	; 0x38
   117b4:	ldr	r3, [r5]
   117b8:	add	r3, r3, #1
   117bc:	str	r3, [r5]
   117c0:	b	11738 <__assert_fail@plt+0x374>
   117c4:	ldr	r0, [r5]
   117c8:	orr	r1, r6, #1024	; 0x400
   117cc:	ldr	r3, [sp, #36]	; 0x24
   117d0:	ldr	r2, [sp, #24]
   117d4:	add	r0, r7, r0, lsl #2
   117d8:	stmib	sp, {r3, fp}
   117dc:	ldr	r3, [sp, #32]
   117e0:	str	r3, [sp]
   117e4:	ldr	r3, [sp, #28]
   117e8:	bl	11e08 <__assert_fail@plt+0xa44>
   117ec:	eor	r0, r0, #1
   117f0:	uxtb	r0, r0
   117f4:	b	11518 <__assert_fail@plt+0x154>
   117f8:	cmp	r3, #0
   117fc:	ble	116b0 <__assert_fail@plt+0x2ec>
   11800:	add	r1, sp, #64	; 0x40
   11804:	mov	r0, r4
   11808:	bl	185a4 <__assert_fail@plt+0x71e0>
   1180c:	cmp	r0, #0
   11810:	beq	11714 <__assert_fail@plt+0x350>
   11814:	bl	11268 <__errno_location@plt>
   11818:	mov	r2, #5
   1181c:	ldr	r1, [pc, #124]	; 118a0 <__assert_fail@plt+0x4dc>
   11820:	ldr	r5, [r0]
   11824:	mov	r0, #0
   11828:	bl	11130 <dcgettext@plt>
   1182c:	mov	r6, r0
   11830:	mov	r1, r4
   11834:	mov	r0, #4
   11838:	bl	16aa4 <__assert_fail@plt+0x56e0>
   1183c:	mov	r3, r0
   11840:	mov	r2, r6
   11844:	mov	r1, r5
   11848:	mov	r0, #1
   1184c:	bl	111c0 <error@plt>
   11850:	andeq	r8, r1, sl, asr #29
   11854:	muleq	r1, sp, r1
   11858:	strdeq	r9, [r1], -sl
   1185c:	andeq	r2, r1, ip, lsl #19
   11860:	andeq	sl, r2, r0, lsr #3
   11864:	andeq	r8, r1, r0, asr #12
   11868:	ldrdeq	r9, [r1], -r9	; <UNPREDICTABLE>
   1186c:	andeq	r9, r1, r2, ror #3
   11870:			; <UNDEFINED> instruction: 0x000191bc
   11874:	muleq	r2, ip, r1
   11878:	strdeq	r9, [r1], -r6
   1187c:	andeq	r9, r1, r9, asr #3
   11880:	andeq	r8, r1, r0, lsr #14
   11884:	andeq	sl, r2, r0, asr #2
   11888:	andeq	sl, r2, r8, lsr #3
   1188c:			; <UNDEFINED> instruction: 0x000191b5
   11890:	muleq	r2, r0, r1
   11894:	andeq	r9, r1, ip, lsl #4
   11898:	andeq	r9, r1, ip, lsl r2
   1189c:			; <UNDEFINED> instruction: 0x0002a1b0
   118a0:	andeq	r9, r1, r5, lsr r2
   118a4:	andeq	r9, r1, r8, ror #22
   118a8:	mov	fp, #0
   118ac:	mov	lr, #0
   118b0:	pop	{r1}		; (ldr r1, [sp], #4)
   118b4:	mov	r2, sp
   118b8:	push	{r2}		; (str r2, [sp, #-4]!)
   118bc:	push	{r0}		; (str r0, [sp, #-4]!)
   118c0:	ldr	ip, [pc, #16]	; 118d8 <__assert_fail@plt+0x514>
   118c4:	push	{ip}		; (str ip, [sp, #-4]!)
   118c8:	ldr	r0, [pc, #12]	; 118dc <__assert_fail@plt+0x518>
   118cc:	ldr	r3, [pc, #12]	; 118e0 <__assert_fail@plt+0x51c>
   118d0:	bl	111e4 <__libc_start_main@plt>
   118d4:	bl	1137c <abort@plt>
   118d8:	andeq	r8, r1, r8, lsl #11
   118dc:	andeq	r1, r1, r8, ror #7
   118e0:	andeq	r8, r1, r8, lsr #10
   118e4:	ldr	r3, [pc, #20]	; 11900 <__assert_fail@plt+0x53c>
   118e8:	ldr	r2, [pc, #20]	; 11904 <__assert_fail@plt+0x540>
   118ec:	add	r3, pc, r3
   118f0:	ldr	r2, [r3, r2]
   118f4:	cmp	r2, #0
   118f8:	bxeq	lr
   118fc:	b	111fc <__gmon_start__@plt>
   11900:	andeq	r8, r1, ip, lsl #14
   11904:	andeq	r0, r0, r4, lsr r1
   11908:	ldr	r0, [pc, #24]	; 11928 <__assert_fail@plt+0x564>
   1190c:	ldr	r3, [pc, #24]	; 1192c <__assert_fail@plt+0x568>
   11910:	cmp	r3, r0
   11914:	bxeq	lr
   11918:	ldr	r3, [pc, #16]	; 11930 <__assert_fail@plt+0x56c>
   1191c:	cmp	r3, #0
   11920:	bxeq	lr
   11924:	bx	r3
   11928:	andeq	sl, r2, r8, lsl #3
   1192c:	andeq	sl, r2, r8, lsl #3
   11930:	andeq	r0, r0, r0
   11934:	ldr	r0, [pc, #36]	; 11960 <__assert_fail@plt+0x59c>
   11938:	ldr	r1, [pc, #36]	; 11964 <__assert_fail@plt+0x5a0>
   1193c:	sub	r1, r1, r0
   11940:	asr	r1, r1, #2
   11944:	add	r1, r1, r1, lsr #31
   11948:	asrs	r1, r1, #1
   1194c:	bxeq	lr
   11950:	ldr	r3, [pc, #16]	; 11968 <__assert_fail@plt+0x5a4>
   11954:	cmp	r3, #0
   11958:	bxeq	lr
   1195c:	bx	r3
   11960:	andeq	sl, r2, r8, lsl #3
   11964:	andeq	sl, r2, r8, lsl #3
   11968:	andeq	r0, r0, r0
   1196c:	push	{r4, lr}
   11970:	ldr	r4, [pc, #24]	; 11990 <__assert_fail@plt+0x5cc>
   11974:	ldrb	r3, [r4]
   11978:	cmp	r3, #0
   1197c:	popne	{r4, pc}
   11980:	bl	11908 <__assert_fail@plt+0x544>
   11984:	mov	r3, #1
   11988:	strb	r3, [r4]
   1198c:	pop	{r4, pc}
   11990:	andeq	sl, r2, r4, lsr #3
   11994:	b	11934 <__assert_fail@plt+0x570>
   11998:	subs	r5, r0, #0
   1199c:	push	{r7, lr}
   119a0:	sub	sp, sp, #64	; 0x40
   119a4:	ldr	r6, [pc, #708]	; 11c70 <__assert_fail@plt+0x8ac>
   119a8:	beq	119e0 <__assert_fail@plt+0x61c>
   119ac:	mov	r2, #5
   119b0:	mov	r0, #0
   119b4:	ldr	r3, [pc, #696]	; 11c74 <__assert_fail@plt+0x8b0>
   119b8:	ldr	r1, [pc, #696]	; 11c78 <__assert_fail@plt+0x8b4>
   119bc:	ldr	r4, [r3]
   119c0:	bl	11130 <dcgettext@plt>
   119c4:	mov	r2, r0
   119c8:	mov	r1, #1
   119cc:	ldr	r3, [r6]
   119d0:	mov	r0, r4
   119d4:	bl	112a4 <__fprintf_chk@plt>
   119d8:	mov	r0, r5
   119dc:	bl	11220 <exit@plt>
   119e0:	mov	r2, #5
   119e4:	ldr	r1, [pc, #656]	; 11c7c <__assert_fail@plt+0x8b8>
   119e8:	bl	11130 <dcgettext@plt>
   119ec:	ldr	r3, [r6]
   119f0:	mov	r1, r0
   119f4:	mov	r0, #1
   119f8:	ldr	r4, [pc, #640]	; 11c80 <__assert_fail@plt+0x8bc>
   119fc:	ldr	r7, [pc, #640]	; 11c84 <__assert_fail@plt+0x8c0>
   11a00:	mov	r2, r3
   11a04:	bl	1128c <__printf_chk@plt>
   11a08:	mov	r2, #5
   11a0c:	ldr	r1, [pc, #628]	; 11c88 <__assert_fail@plt+0x8c4>
   11a10:	mov	r0, r5
   11a14:	bl	11130 <dcgettext@plt>
   11a18:	ldr	r1, [r4]
   11a1c:	bl	1107c <fputs_unlocked@plt>
   11a20:	mov	r2, #5
   11a24:	ldr	r1, [pc, #608]	; 11c8c <__assert_fail@plt+0x8c8>
   11a28:	mov	r0, r5
   11a2c:	bl	11130 <dcgettext@plt>
   11a30:	ldr	r1, [r4]
   11a34:	bl	1107c <fputs_unlocked@plt>
   11a38:	mov	r2, #5
   11a3c:	ldr	r1, [pc, #588]	; 11c90 <__assert_fail@plt+0x8cc>
   11a40:	mov	r0, r5
   11a44:	bl	11130 <dcgettext@plt>
   11a48:	ldr	r1, [r4]
   11a4c:	bl	1107c <fputs_unlocked@plt>
   11a50:	mov	r2, #5
   11a54:	ldr	r1, [pc, #568]	; 11c94 <__assert_fail@plt+0x8d0>
   11a58:	mov	r0, r5
   11a5c:	bl	11130 <dcgettext@plt>
   11a60:	ldr	r1, [r4]
   11a64:	bl	1107c <fputs_unlocked@plt>
   11a68:	mov	r2, #5
   11a6c:	ldr	r1, [pc, #548]	; 11c98 <__assert_fail@plt+0x8d4>
   11a70:	mov	r0, r5
   11a74:	bl	11130 <dcgettext@plt>
   11a78:	ldr	r1, [r4]
   11a7c:	bl	1107c <fputs_unlocked@plt>
   11a80:	mov	r2, #5
   11a84:	ldr	r1, [pc, #528]	; 11c9c <__assert_fail@plt+0x8d8>
   11a88:	mov	r0, r5
   11a8c:	bl	11130 <dcgettext@plt>
   11a90:	ldr	r1, [r4]
   11a94:	bl	1107c <fputs_unlocked@plt>
   11a98:	mov	r2, #5
   11a9c:	ldr	r1, [pc, #508]	; 11ca0 <__assert_fail@plt+0x8dc>
   11aa0:	mov	r0, r5
   11aa4:	bl	11130 <dcgettext@plt>
   11aa8:	ldr	r1, [r4]
   11aac:	bl	1107c <fputs_unlocked@plt>
   11ab0:	mov	r2, #5
   11ab4:	ldr	r1, [pc, #488]	; 11ca4 <__assert_fail@plt+0x8e0>
   11ab8:	mov	r0, r5
   11abc:	bl	11130 <dcgettext@plt>
   11ac0:	ldr	r1, [r4]
   11ac4:	bl	1107c <fputs_unlocked@plt>
   11ac8:	mov	r2, #5
   11acc:	ldr	r1, [pc, #468]	; 11ca8 <__assert_fail@plt+0x8e4>
   11ad0:	mov	r0, r5
   11ad4:	bl	11130 <dcgettext@plt>
   11ad8:	ldr	r1, [r4]
   11adc:	bl	1107c <fputs_unlocked@plt>
   11ae0:	mov	r2, #5
   11ae4:	ldr	r1, [pc, #448]	; 11cac <__assert_fail@plt+0x8e8>
   11ae8:	mov	r0, r5
   11aec:	bl	11130 <dcgettext@plt>
   11af0:	ldr	r1, [r4]
   11af4:	bl	1107c <fputs_unlocked@plt>
   11af8:	mov	r2, #5
   11afc:	ldr	r1, [pc, #428]	; 11cb0 <__assert_fail@plt+0x8ec>
   11b00:	mov	r0, r5
   11b04:	bl	11130 <dcgettext@plt>
   11b08:	ldr	r1, [r4]
   11b0c:	bl	1107c <fputs_unlocked@plt>
   11b10:	mov	r2, #5
   11b14:	ldr	r1, [pc, #408]	; 11cb4 <__assert_fail@plt+0x8f0>
   11b18:	mov	r0, r5
   11b1c:	bl	11130 <dcgettext@plt>
   11b20:	ldr	r1, [r4]
   11b24:	bl	1107c <fputs_unlocked@plt>
   11b28:	mov	r2, #5
   11b2c:	ldr	r1, [pc, #388]	; 11cb8 <__assert_fail@plt+0x8f4>
   11b30:	mov	r0, r5
   11b34:	bl	11130 <dcgettext@plt>
   11b38:	ldr	r3, [r6]
   11b3c:	mov	r1, r0
   11b40:	mov	r0, #1
   11b44:	add	r6, sp, #8
   11b48:	mov	r2, r3
   11b4c:	str	r3, [sp]
   11b50:	bl	1128c <__printf_chk@plt>
   11b54:	ldr	lr, [pc, #352]	; 11cbc <__assert_fail@plt+0x8f8>
   11b58:	add	ip, sp, #8
   11b5c:	ldm	lr!, {r0, r1, r2, r3}
   11b60:	stmia	ip!, {r0, r1, r2, r3}
   11b64:	ldm	lr!, {r0, r1, r2, r3}
   11b68:	stmia	ip!, {r0, r1, r2, r3}
   11b6c:	ldm	lr!, {r0, r1, r2, r3}
   11b70:	stmia	ip!, {r0, r1, r2, r3}
   11b74:	ldm	lr, {r0, r1}
   11b78:	stm	ip, {r0, r1}
   11b7c:	ldr	r1, [r6]
   11b80:	cmp	r1, #0
   11b84:	bne	11c28 <__assert_fail@plt+0x864>
   11b88:	ldr	r6, [r6, #4]
   11b8c:	mov	r2, #5
   11b90:	mov	r0, #0
   11b94:	ldr	r7, [pc, #232]	; 11c84 <__assert_fail@plt+0x8c0>
   11b98:	ldr	r1, [pc, #288]	; 11cc0 <__assert_fail@plt+0x8fc>
   11b9c:	cmp	r6, #0
   11ba0:	moveq	r6, r7
   11ba4:	bl	11130 <dcgettext@plt>
   11ba8:	mov	r1, r0
   11bac:	ldr	r3, [pc, #272]	; 11cc4 <__assert_fail@plt+0x900>
   11bb0:	mov	r0, #1
   11bb4:	ldr	r2, [pc, #268]	; 11cc8 <__assert_fail@plt+0x904>
   11bb8:	bl	1128c <__printf_chk@plt>
   11bbc:	mov	r1, #0
   11bc0:	mov	r0, #5
   11bc4:	bl	112d4 <setlocale@plt>
   11bc8:	cmp	r0, #0
   11bcc:	bne	11c40 <__assert_fail@plt+0x87c>
   11bd0:	mov	r2, #5
   11bd4:	ldr	r1, [pc, #240]	; 11ccc <__assert_fail@plt+0x908>
   11bd8:	mov	r0, #0
   11bdc:	bl	11130 <dcgettext@plt>
   11be0:	mov	r1, r0
   11be4:	ldr	r3, [pc, #152]	; 11c84 <__assert_fail@plt+0x8c0>
   11be8:	mov	r0, #1
   11bec:	ldr	r2, [pc, #208]	; 11cc4 <__assert_fail@plt+0x900>
   11bf0:	bl	1128c <__printf_chk@plt>
   11bf4:	mov	r2, #5
   11bf8:	ldr	r1, [pc, #208]	; 11cd0 <__assert_fail@plt+0x90c>
   11bfc:	mov	r0, #0
   11c00:	bl	11130 <dcgettext@plt>
   11c04:	ldr	r2, [pc, #200]	; 11cd4 <__assert_fail@plt+0x910>
   11c08:	cmp	r6, r7
   11c0c:	mov	r1, r0
   11c10:	mov	r0, #1
   11c14:	ldr	r3, [pc, #188]	; 11cd8 <__assert_fail@plt+0x914>
   11c18:	moveq	r3, r2
   11c1c:	mov	r2, r6
   11c20:	bl	1128c <__printf_chk@plt>
   11c24:	b	119d8 <__assert_fail@plt+0x614>
   11c28:	mov	r0, r7
   11c2c:	bl	110a0 <strcmp@plt>
   11c30:	cmp	r0, #0
   11c34:	beq	11b88 <__assert_fail@plt+0x7c4>
   11c38:	add	r6, r6, #8
   11c3c:	b	11b7c <__assert_fail@plt+0x7b8>
   11c40:	mov	r2, #3
   11c44:	ldr	r1, [pc, #144]	; 11cdc <__assert_fail@plt+0x918>
   11c48:	bl	11370 <strncmp@plt>
   11c4c:	cmp	r0, #0
   11c50:	beq	11bd0 <__assert_fail@plt+0x80c>
   11c54:	mov	r2, #5
   11c58:	ldr	r1, [pc, #128]	; 11ce0 <__assert_fail@plt+0x91c>
   11c5c:	mov	r0, #0
   11c60:	bl	11130 <dcgettext@plt>
   11c64:	ldr	r1, [r4]
   11c68:	bl	1107c <fputs_unlocked@plt>
   11c6c:	b	11bd0 <__assert_fail@plt+0x80c>
   11c70:	andeq	sl, r2, r8, asr #3
   11c74:	muleq	r2, r8, r1
   11c78:	andeq	r8, r1, r6, lsr #14
   11c7c:	andeq	r8, r1, sp, asr #14
   11c80:	muleq	r2, ip, r1
   11c84:	andeq	r8, r1, r0, lsr #14
   11c88:	andeq	r8, r1, lr, lsr #15
   11c8c:	andeq	r8, r1, pc, lsr r8
   11c90:	andeq	r8, r1, r8, lsl #18
   11c94:	andeq	r8, r1, pc, ror #19
   11c98:	andeq	r8, r1, r6, ror #20
   11c9c:			; <UNDEFINED> instruction: 0x00018bba
   11ca0:	andeq	r8, r1, sl, lsr ip
   11ca4:			; <UNDEFINED> instruction: 0x00018cb3
   11ca8:	strdeq	r8, [r1], -sl
   11cac:	andeq	r8, r1, fp, asr #29
   11cb0:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   11cb4:	andeq	r8, r1, lr, lsr #30
   11cb8:	andeq	r8, r1, lr, ror #31
   11cbc:	andeq	r8, r1, r8, lsl #12
   11cc0:	strheq	r9, [r1], -r7
   11cc4:	andeq	r9, r1, lr, asr #1
   11cc8:	strdeq	r9, [r1], -r6
   11ccc:	andeq	r9, r1, pc, asr #2
   11cd0:	andeq	r9, r1, sl, ror #2
   11cd4:	andeq	r9, r1, r0, ror r2
   11cd8:	andeq	r8, r1, sl, asr #29
   11cdc:	andeq	r9, r1, r4, lsl #2
   11ce0:	andeq	r9, r1, r8, lsl #2
   11ce4:	push	{r4, r5, r6, lr}
   11ce8:	subs	r6, r0, #0
   11cec:	mov	r4, r1
   11cf0:	beq	11d44 <__assert_fail@plt+0x980>
   11cf4:	cmp	r1, #0
   11cf8:	beq	11d50 <__assert_fail@plt+0x98c>
   11cfc:	bl	11238 <strlen@plt>
   11d00:	mov	r5, r0
   11d04:	mov	r0, r4
   11d08:	bl	11238 <strlen@plt>
   11d0c:	add	r0, r5, r0
   11d10:	add	r0, r0, #2
   11d14:	bl	17554 <__assert_fail@plt+0x6190>
   11d18:	mov	r1, r6
   11d1c:	mov	r5, r0
   11d20:	bl	11118 <stpcpy@plt>
   11d24:	ldr	r3, [pc, #44]	; 11d58 <__assert_fail@plt+0x994>
   11d28:	mov	r1, r4
   11d2c:	mov	r4, r5
   11d30:	ldrh	r3, [r3]
   11d34:	strh	r3, [r0], #1
   11d38:	bl	11190 <strcpy@plt>
   11d3c:	mov	r0, r4
   11d40:	pop	{r4, r5, r6, pc}
   11d44:	cmp	r1, #0
   11d48:	beq	11d3c <__assert_fail@plt+0x978>
   11d4c:	mov	r0, r1
   11d50:	pop	{r4, r5, r6, lr}
   11d54:	b	177f0 <__assert_fail@plt+0x642c>
   11d58:	andeq	r9, r1, ip, lsl #6
   11d5c:	mov	r3, #2
   11d60:	mov	r2, #1
   11d64:	str	r3, [r0]
   11d68:	mov	r3, #0
   11d6c:	strb	r3, [r0, #4]
   11d70:	str	r3, [r0, #8]
   11d74:	strh	r2, [r0, #12]
   11d78:	str	r3, [r0, #16]
   11d7c:	str	r3, [r0, #20]
   11d80:	bx	lr
   11d84:	push	{r4, lr}
   11d88:	mov	r4, r0
   11d8c:	ldr	r0, [r0, #16]
   11d90:	bl	12a60 <__assert_fail@plt+0x169c>
   11d94:	ldr	r0, [r4, #20]
   11d98:	pop	{r4, lr}
   11d9c:	b	12a60 <__assert_fail@plt+0x169c>
   11da0:	push	{r4, lr}
   11da4:	sub	sp, sp, #24
   11da8:	mov	r4, r0
   11dac:	bl	113ac <getgrgid@plt>
   11db0:	subs	r1, r0, #0
   11db4:	ldrne	r0, [r1]
   11db8:	bne	11dc8 <__assert_fail@plt+0xa04>
   11dbc:	mov	r2, sp
   11dc0:	mov	r0, r4
   11dc4:	bl	1559c <__assert_fail@plt+0x41d8>
   11dc8:	bl	177f0 <__assert_fail@plt+0x642c>
   11dcc:	add	sp, sp, #24
   11dd0:	pop	{r4, pc}
   11dd4:	push	{r4, lr}
   11dd8:	sub	sp, sp, #24
   11ddc:	mov	r4, r0
   11de0:	bl	110ac <getpwuid@plt>
   11de4:	subs	r1, r0, #0
   11de8:	ldrne	r0, [r1]
   11dec:	bne	11dfc <__assert_fail@plt+0xa38>
   11df0:	mov	r2, sp
   11df4:	mov	r0, r4
   11df8:	bl	1559c <__assert_fail@plt+0x41d8>
   11dfc:	bl	177f0 <__assert_fail@plt+0x642c>
   11e00:	add	sp, sp, #24
   11e04:	pop	{r4, pc}
   11e08:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11e0c:	sub	sp, sp, #252	; 0xfc
   11e10:	str	r2, [sp, #20]
   11e14:	str	r3, [sp, #28]
   11e18:	ldr	r3, [sp, #288]	; 0x120
   11e1c:	ldr	r2, [sp, #292]	; 0x124
   11e20:	ldr	r7, [sp, #296]	; 0x128
   11e24:	and	r3, r3, r2
   11e28:	cmn	r3, #1
   11e2c:	str	r3, [sp, #32]
   11e30:	bne	11f08 <__assert_fail@plt+0xb44>
   11e34:	ldrb	r3, [r7, #12]
   11e38:	cmp	r3, #0
   11e3c:	bne	11f08 <__assert_fail@plt+0xb44>
   11e40:	ldr	r3, [r7]
   11e44:	cmp	r3, #2
   11e48:	movne	r3, #0
   11e4c:	moveq	r3, #8
   11e50:	orr	r1, r3, r1
   11e54:	mov	r2, #0
   11e58:	bl	1784c <__assert_fail@plt+0x6488>
   11e5c:	mov	r3, #1
   11e60:	str	r0, [sp, #8]
   11e64:	ldr	r0, [sp, #8]
   11e68:	str	r3, [sp, #12]
   11e6c:	bl	14068 <__assert_fail@plt+0x2ca4>
   11e70:	subs	r9, r0, #0
   11e74:	bne	11f10 <__assert_fail@plt+0xb4c>
   11e78:	bl	11268 <__errno_location@plt>
   11e7c:	ldr	r5, [r0]
   11e80:	mov	r4, r0
   11e84:	cmp	r5, #0
   11e88:	beq	11ec0 <__assert_fail@plt+0xafc>
   11e8c:	ldrb	r3, [r7, #13]
   11e90:	cmp	r3, #0
   11e94:	str	r3, [sp, #12]
   11e98:	strne	r9, [sp, #12]
   11e9c:	bne	11ec0 <__assert_fail@plt+0xafc>
   11ea0:	mov	r2, #5
   11ea4:	ldr	r1, [pc, #2604]	; 128d8 <__assert_fail@plt+0x1514>
   11ea8:	mov	r0, r3
   11eac:	bl	11130 <dcgettext@plt>
   11eb0:	mov	r2, r0
   11eb4:	mov	r1, r5
   11eb8:	ldr	r0, [sp, #12]
   11ebc:	bl	111c0 <error@plt>
   11ec0:	ldr	r0, [sp, #8]
   11ec4:	bl	13f50 <__assert_fail@plt+0x2b8c>
   11ec8:	cmp	r0, #0
   11ecc:	beq	11efc <__assert_fail@plt+0xb38>
   11ed0:	ldr	r4, [r4]
   11ed4:	mov	r2, #5
   11ed8:	mov	r0, #0
   11edc:	ldr	r1, [pc, #2552]	; 128dc <__assert_fail@plt+0x1518>
   11ee0:	bl	11130 <dcgettext@plt>
   11ee4:	mov	r2, r0
   11ee8:	mov	r0, #0
   11eec:	mov	r1, r4
   11ef0:	bl	111c0 <error@plt>
   11ef4:	mov	r3, #0
   11ef8:	str	r3, [sp, #12]
   11efc:	ldr	r0, [sp, #12]
   11f00:	add	sp, sp, #252	; 0xfc
   11f04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11f08:	mov	r3, #0
   11f0c:	b	11e50 <__assert_fail@plt+0xa8c>
   11f10:	ldrh	r3, [r9, #56]	; 0x38
   11f14:	ldr	fp, [r9, #28]
   11f18:	sub	r3, r3, #1
   11f1c:	cmp	r3, #9
   11f20:	ldrls	pc, [pc, r3, lsl #2]
   11f24:	b	1207c <__assert_fail@plt+0xcb8>
   11f28:	andeq	r1, r1, r0, asr pc
   11f2c:	andeq	r2, r1, r8, lsl #4
   11f30:	andeq	r2, r1, ip, ror r0
   11f34:	andeq	r2, r1, ip, ror #3
   11f38:	andeq	r2, r1, ip, ror r0
   11f3c:	andeq	r2, r1, ip, rrx
   11f40:	andeq	r2, r1, r4, lsr #3
   11f44:	andeq	r2, r1, ip, ror r0
   11f48:	andeq	r2, r1, ip, ror r0
   11f4c:	andeq	r2, r1, r4, asr #2
   11f50:	ldrb	r5, [r7, #4]
   11f54:	cmp	r5, #0
   11f58:	beq	1207c <__assert_fail@plt+0xcb8>
   11f5c:	ldr	ip, [r7, #8]
   11f60:	cmp	ip, #0
   11f64:	beq	12010 <__assert_fail@plt+0xc4c>
   11f68:	ldrd	r2, [ip]
   11f6c:	ldrd	r0, [r9, #160]	; 0xa0
   11f70:	cmp	r1, r3
   11f74:	cmpeq	r0, r2
   11f78:	bne	12010 <__assert_fail@plt+0xc4c>
   11f7c:	ldrd	r0, [ip, #8]
   11f80:	ldrd	r2, [r9, #64]	; 0x40
   11f84:	cmp	r3, r1
   11f88:	cmpeq	r2, r0
   11f8c:	bne	12010 <__assert_fail@plt+0xc4c>
   11f90:	ldr	r1, [pc, #2376]	; 128e0 <__assert_fail@plt+0x151c>
   11f94:	mov	r0, fp
   11f98:	bl	110a0 <strcmp@plt>
   11f9c:	subs	r4, r0, #0
   11fa0:	mov	r2, #5
   11fa4:	bne	1201c <__assert_fail@plt+0xc58>
   11fa8:	ldr	r1, [pc, #2356]	; 128e4 <__assert_fail@plt+0x1520>
   11fac:	bl	11130 <dcgettext@plt>
   11fb0:	mov	r5, r0
   11fb4:	mov	r1, fp
   11fb8:	mov	r0, #4
   11fbc:	bl	16aa4 <__assert_fail@plt+0x56e0>
   11fc0:	mov	r3, r0
   11fc4:	mov	r2, r5
   11fc8:	mov	r1, r4
   11fcc:	mov	r0, r4
   11fd0:	bl	111c0 <error@plt>
   11fd4:	mov	r2, #5
   11fd8:	ldr	r1, [pc, #2312]	; 128e8 <__assert_fail@plt+0x1524>
   11fdc:	mov	r0, #0
   11fe0:	bl	11130 <dcgettext@plt>
   11fe4:	mov	r1, #0
   11fe8:	mov	r2, r0
   11fec:	mov	r0, r1
   11ff0:	bl	111c0 <error@plt>
   11ff4:	mov	r2, #4
   11ff8:	mov	r1, r9
   11ffc:	ldr	r0, [sp, #8]
   12000:	bl	1462c <__assert_fail@plt+0x3268>
   12004:	ldr	r0, [sp, #8]
   12008:	bl	14068 <__assert_fail@plt+0x2ca4>
   1200c:	mov	r5, #0
   12010:	ldr	r3, [sp, #12]
   12014:	and	r3, r3, r5
   12018:	b	11e64 <__assert_fail@plt+0xaa0>
   1201c:	ldr	r1, [pc, #2248]	; 128ec <__assert_fail@plt+0x1528>
   12020:	mov	r0, #0
   12024:	bl	11130 <dcgettext@plt>
   12028:	mov	r4, r0
   1202c:	mov	r2, fp
   12030:	mov	r1, #4
   12034:	mov	r0, #0
   12038:	bl	16a38 <__assert_fail@plt+0x5674>
   1203c:	mov	r5, r0
   12040:	ldr	r2, [pc, #2200]	; 128e0 <__assert_fail@plt+0x151c>
   12044:	mov	r1, #4
   12048:	mov	r0, #1
   1204c:	bl	16a38 <__assert_fail@plt+0x5674>
   12050:	mov	r1, #0
   12054:	mov	r3, r5
   12058:	str	r0, [sp]
   1205c:	mov	r2, r4
   12060:	mov	r0, r1
   12064:	bl	111c0 <error@plt>
   12068:	b	11fd4 <__assert_fail@plt+0xc10>
   1206c:	ldrb	r3, [r7, #4]
   12070:	cmp	r3, #0
   12074:	moveq	r5, #1
   12078:	beq	12010 <__assert_fail@plt+0xc4c>
   1207c:	ldr	r2, [sp, #32]
   12080:	add	r6, r9, #64	; 0x40
   12084:	ldr	r3, [r9, #24]
   12088:	cmn	r2, #1
   1208c:	str	r3, [sp, #24]
   12090:	ldrb	r3, [r7, #12]
   12094:	bne	12258 <__assert_fail@plt+0xe94>
   12098:	ldr	r2, [r7]
   1209c:	cmp	r2, #2
   120a0:	bne	12258 <__assert_fail@plt+0xe94>
   120a4:	ldr	r2, [r7, #8]
   120a8:	cmp	r2, #0
   120ac:	bne	12258 <__assert_fail@plt+0xe94>
   120b0:	cmp	r3, #0
   120b4:	moveq	r4, #1
   120b8:	beq	122ac <__assert_fail@plt+0xee8>
   120bc:	ldr	r3, [r9, #80]	; 0x50
   120c0:	and	r3, r3, #61440	; 0xf000
   120c4:	cmp	r3, #40960	; 0xa000
   120c8:	bne	12260 <__assert_fail@plt+0xe9c>
   120cc:	ldr	r0, [sp, #8]
   120d0:	mov	r3, #0
   120d4:	add	r2, sp, #40	; 0x28
   120d8:	ldr	r1, [sp, #24]
   120dc:	ldr	r0, [r0, #32]
   120e0:	bl	185d4 <__assert_fail@plt+0x7210>
   120e4:	cmp	r0, #0
   120e8:	beq	12368 <__assert_fail@plt+0xfa4>
   120ec:	ldrb	r5, [r7, #13]
   120f0:	cmp	r5, #0
   120f4:	movne	r5, #0
   120f8:	bne	12138 <__assert_fail@plt+0xd74>
   120fc:	bl	11268 <__errno_location@plt>
   12100:	ldr	r4, [r0]
   12104:	mov	r2, #5
   12108:	mov	r0, r5
   1210c:	ldr	r1, [pc, #2012]	; 128f0 <__assert_fail@plt+0x152c>
   12110:	bl	11130 <dcgettext@plt>
   12114:	mov	r6, r0
   12118:	mov	r1, fp
   1211c:	mov	r0, #4
   12120:	bl	16aa4 <__assert_fail@plt+0x56e0>
   12124:	mov	r3, r0
   12128:	mov	r2, r6
   1212c:	mov	r1, r4
   12130:	mov	r0, r5
   12134:	bl	111c0 <error@plt>
   12138:	add	r6, sp, #40	; 0x28
   1213c:	mov	r4, r5
   12140:	b	122a4 <__assert_fail@plt+0xee0>
   12144:	ldr	r3, [r9, #48]	; 0x30
   12148:	cmp	r3, #0
   1214c:	bne	12168 <__assert_fail@plt+0xda4>
   12150:	ldr	r3, [r9, #16]
   12154:	cmp	r3, #0
   12158:	moveq	r5, #1
   1215c:	moveq	r2, r5
   12160:	streq	r5, [r9, #16]
   12164:	beq	128c0 <__assert_fail@plt+0x14fc>
   12168:	ldrb	r4, [r7, #13]
   1216c:	cmp	r4, #0
   12170:	bne	121d8 <__assert_fail@plt+0xe14>
   12174:	ldr	r1, [pc, #1912]	; 128f4 <__assert_fail@plt+0x1530>
   12178:	mov	r2, #5
   1217c:	ldr	r5, [r9, #32]
   12180:	mov	r0, r4
   12184:	bl	11130 <dcgettext@plt>
   12188:	mov	r6, r0
   1218c:	mov	r1, fp
   12190:	mov	r0, #4
   12194:	bl	16aa4 <__assert_fail@plt+0x56e0>
   12198:	mov	r3, r0
   1219c:	mov	r2, r6
   121a0:	b	121cc <__assert_fail@plt+0xe08>
   121a4:	ldrb	r4, [r7, #13]
   121a8:	cmp	r4, #0
   121ac:	bne	121d8 <__assert_fail@plt+0xe14>
   121b0:	mov	r2, fp
   121b4:	mov	r1, #3
   121b8:	ldr	r5, [r9, #32]
   121bc:	mov	r0, r4
   121c0:	bl	16b48 <__assert_fail@plt+0x5784>
   121c4:	ldr	r2, [pc, #1836]	; 128f8 <__assert_fail@plt+0x1534>
   121c8:	mov	r3, r0
   121cc:	mov	r1, r5
   121d0:	mov	r0, r4
   121d4:	bl	111c0 <error@plt>
   121d8:	mov	r6, #0
   121dc:	mov	r8, #1
   121e0:	mov	r4, r6
   121e4:	mov	r5, #0
   121e8:	b	1249c <__assert_fail@plt+0x10d8>
   121ec:	ldrb	r4, [r7, #13]
   121f0:	cmp	r4, #0
   121f4:	bne	121d8 <__assert_fail@plt+0xe14>
   121f8:	mov	r2, #5
   121fc:	ldr	r1, [pc, #1784]	; 128fc <__assert_fail@plt+0x1538>
   12200:	ldr	r5, [r9, #32]
   12204:	b	12180 <__assert_fail@plt+0xdbc>
   12208:	mov	r1, r9
   1220c:	ldr	r0, [sp, #8]
   12210:	bl	17894 <__assert_fail@plt+0x64d0>
   12214:	cmp	r0, #0
   12218:	beq	1207c <__assert_fail@plt+0xcb8>
   1221c:	mov	r2, #5
   12220:	ldr	r1, [pc, #1752]	; 12900 <__assert_fail@plt+0x153c>
   12224:	mov	r0, #0
   12228:	bl	11130 <dcgettext@plt>
   1222c:	mov	r4, r0
   12230:	mov	r2, fp
   12234:	mov	r1, #3
   12238:	mov	r0, #0
   1223c:	bl	16b48 <__assert_fail@plt+0x5784>
   12240:	mov	r1, #0
   12244:	mov	r3, r0
   12248:	mov	r2, r4
   1224c:	mov	r0, r1
   12250:	bl	111c0 <error@plt>
   12254:	b	1200c <__assert_fail@plt+0xc48>
   12258:	cmp	r3, #0
   1225c:	bne	120bc <__assert_fail@plt+0xcf8>
   12260:	ldr	r3, [sp, #288]	; 0x120
   12264:	cmn	r3, #1
   12268:	beq	12284 <__assert_fail@plt+0xec0>
   1226c:	ldr	r3, [r6, #24]
   12270:	ldr	r2, [sp, #288]	; 0x120
   12274:	cmp	r2, r3
   12278:	movne	r5, #1
   1227c:	movne	r4, #0
   12280:	bne	122a4 <__assert_fail@plt+0xee0>
   12284:	ldr	r3, [sp, #292]	; 0x124
   12288:	cmn	r3, #1
   1228c:	beq	12370 <__assert_fail@plt+0xfac>
   12290:	ldr	r4, [r6, #28]
   12294:	mov	r5, #1
   12298:	sub	r4, r4, r3
   1229c:	clz	r4, r4
   122a0:	lsr	r4, r4, #5
   122a4:	cmp	r5, #0
   122a8:	beq	123cc <__assert_fail@plt+0x1008>
   122ac:	ldrh	r5, [r9, #56]	; 0x38
   122b0:	sub	r3, r5, #1
   122b4:	bic	r5, r5, #2
   122b8:	cmp	r5, #4
   122bc:	cmpne	r3, #1
   122c0:	movls	r5, #1
   122c4:	movhi	r5, #0
   122c8:	bhi	123c8 <__assert_fail@plt+0x1004>
   122cc:	ldr	ip, [r7, #8]
   122d0:	cmp	ip, #0
   122d4:	beq	123cc <__assert_fail@plt+0x1008>
   122d8:	ldrd	r2, [ip]
   122dc:	ldrd	r0, [r6, #96]	; 0x60
   122e0:	cmp	r1, r3
   122e4:	cmpeq	r0, r2
   122e8:	bne	123cc <__assert_fail@plt+0x1008>
   122ec:	ldrd	r2, [r6]
   122f0:	ldrd	r0, [ip, #8]
   122f4:	cmp	r3, r1
   122f8:	cmpeq	r2, r0
   122fc:	bne	123cc <__assert_fail@plt+0x1008>
   12300:	ldr	r1, [pc, #1496]	; 128e0 <__assert_fail@plt+0x151c>
   12304:	mov	r0, fp
   12308:	bl	110a0 <strcmp@plt>
   1230c:	subs	r4, r0, #0
   12310:	mov	r2, #5
   12314:	bne	12378 <__assert_fail@plt+0xfb4>
   12318:	ldr	r1, [pc, #1476]	; 128e4 <__assert_fail@plt+0x1520>
   1231c:	bl	11130 <dcgettext@plt>
   12320:	mov	r5, r0
   12324:	mov	r1, fp
   12328:	mov	r0, #4
   1232c:	bl	16aa4 <__assert_fail@plt+0x56e0>
   12330:	mov	r3, r0
   12334:	mov	r2, r5
   12338:	mov	r1, r4
   1233c:	mov	r0, r4
   12340:	bl	111c0 <error@plt>
   12344:	mov	r2, #5
   12348:	ldr	r1, [pc, #1432]	; 128e8 <__assert_fail@plt+0x1524>
   1234c:	mov	r0, #0
   12350:	bl	11130 <dcgettext@plt>
   12354:	mov	r1, #0
   12358:	mov	r2, r0
   1235c:	mov	r0, r1
   12360:	bl	111c0 <error@plt>
   12364:	b	1200c <__assert_fail@plt+0xc48>
   12368:	add	r6, sp, #40	; 0x28
   1236c:	b	12260 <__assert_fail@plt+0xe9c>
   12370:	mov	r5, #1
   12374:	b	1213c <__assert_fail@plt+0xd78>
   12378:	ldr	r1, [pc, #1388]	; 128ec <__assert_fail@plt+0x1528>
   1237c:	mov	r0, #0
   12380:	bl	11130 <dcgettext@plt>
   12384:	mov	r4, r0
   12388:	mov	r2, fp
   1238c:	mov	r1, #4
   12390:	mov	r0, #0
   12394:	bl	16a38 <__assert_fail@plt+0x5674>
   12398:	mov	r5, r0
   1239c:	ldr	r2, [pc, #1340]	; 128e0 <__assert_fail@plt+0x151c>
   123a0:	mov	r1, #4
   123a4:	mov	r0, #1
   123a8:	bl	16a38 <__assert_fail@plt+0x5674>
   123ac:	mov	r1, #0
   123b0:	mov	r3, r5
   123b4:	str	r0, [sp]
   123b8:	mov	r2, r4
   123bc:	mov	r0, r1
   123c0:	bl	111c0 <error@plt>
   123c4:	b	12344 <__assert_fail@plt+0xf80>
   123c8:	mov	r5, #1
   123cc:	bl	11268 <__errno_location@plt>
   123d0:	cmp	r4, #0
   123d4:	str	r0, [sp, #16]
   123d8:	moveq	r8, #1
   123dc:	beq	1249c <__assert_fail@plt+0x10d8>
   123e0:	ldrb	r8, [r7, #12]
   123e4:	ldr	r3, [sp, #8]
   123e8:	cmp	r8, #0
   123ec:	ldr	sl, [r3, #32]
   123f0:	bne	125a4 <__assert_fail@plt+0x11e0>
   123f4:	mov	r0, sl
   123f8:	ldr	r2, [sp, #20]
   123fc:	ldr	r1, [sp, #24]
   12400:	ldr	r3, [sp, #28]
   12404:	bl	12954 <__assert_fail@plt+0x1590>
   12408:	cmp	r0, #0
   1240c:	moveq	r5, #1
   12410:	movne	r5, #0
   12414:	moveq	r8, r4
   12418:	beq	12430 <__assert_fail@plt+0x106c>
   1241c:	ldr	r3, [sp, #16]
   12420:	ldr	r3, [r3]
   12424:	cmp	r3, #95	; 0x5f
   12428:	moveq	r5, r4
   1242c:	movne	r8, r4
   12430:	eor	sl, r5, #1
   12434:	and	sl, sl, r4
   12438:	ands	sl, sl, #255	; 0xff
   1243c:	beq	1249c <__assert_fail@plt+0x10d8>
   12440:	ldrb	r4, [r7, #13]
   12444:	cmp	r4, #0
   12448:	bne	121e4 <__assert_fail@plt+0xe20>
   1244c:	ldr	r3, [sp, #16]
   12450:	mov	r2, #5
   12454:	mov	r0, r4
   12458:	ldr	r5, [r3]
   1245c:	ldr	r3, [sp, #20]
   12460:	cmn	r3, #1
   12464:	ldrne	r1, [pc, #1176]	; 12904 <__assert_fail@plt+0x1540>
   12468:	ldreq	r1, [pc, #1176]	; 12908 <__assert_fail@plt+0x1544>
   1246c:	bl	11130 <dcgettext@plt>
   12470:	mov	r4, r0
   12474:	mov	r1, fp
   12478:	mov	r0, #4
   1247c:	bl	16aa4 <__assert_fail@plt+0x56e0>
   12480:	mov	r3, r0
   12484:	mov	r2, r4
   12488:	mov	r1, r5
   1248c:	mov	r0, #0
   12490:	mov	r5, #0
   12494:	mov	r4, sl
   12498:	bl	111c0 <error@plt>
   1249c:	ldr	r3, [r7]
   124a0:	cmp	r3, #2
   124a4:	beq	128b0 <__assert_fail@plt+0x14ec>
   124a8:	and	r4, r4, r5
   124ac:	and	r4, r4, r8
   124b0:	ands	r4, r4, #255	; 0xff
   124b4:	beq	124f4 <__assert_fail@plt+0x1130>
   124b8:	ldr	r2, [sp, #20]
   124bc:	cmn	r2, #1
   124c0:	beq	124d8 <__assert_fail@plt+0x1114>
   124c4:	ldr	r1, [sp, #20]
   124c8:	ldr	r2, [r6, #24]
   124cc:	cmp	r1, r2
   124d0:	movne	r4, #1
   124d4:	bne	124f4 <__assert_fail@plt+0x1130>
   124d8:	ldr	r2, [sp, #28]
   124dc:	cmn	r2, #1
   124e0:	moveq	r4, #0
   124e4:	beq	124f4 <__assert_fail@plt+0x1130>
   124e8:	ldr	r4, [r6, #28]
   124ec:	subs	r4, r4, r2
   124f0:	movne	r4, #1
   124f4:	cmp	r3, #0
   124f8:	movne	r3, r4
   124fc:	moveq	r3, #1
   12500:	cmp	r3, #0
   12504:	beq	128b0 <__assert_fail@plt+0x14ec>
   12508:	cmp	r5, #0
   1250c:	beq	128d0 <__assert_fail@plt+0x150c>
   12510:	cmp	r8, #0
   12514:	beq	12838 <__assert_fail@plt+0x1474>
   12518:	cmp	r4, #0
   1251c:	moveq	r3, #4
   12520:	movne	r3, #2
   12524:	cmp	r6, #0
   12528:	streq	r6, [sp, #16]
   1252c:	bne	12848 <__assert_fail@plt+0x1484>
   12530:	ldr	sl, [r7, #16]
   12534:	str	r3, [sp, #36]	; 0x24
   12538:	ldr	r4, [r7, #20]
   1253c:	mov	r0, sl
   12540:	mov	r1, r4
   12544:	bl	11ce4 <__assert_fail@plt+0x920>
   12548:	ldr	r3, [sp, #16]
   1254c:	cmp	sl, #0
   12550:	str	r0, [sp, #24]
   12554:	moveq	r0, #0
   12558:	movne	r0, r3
   1255c:	cmp	r4, #0
   12560:	movne	r1, r6
   12564:	moveq	r1, #0
   12568:	bl	11ce4 <__assert_fail@plt+0x920>
   1256c:	ldr	r3, [sp, #36]	; 0x24
   12570:	mov	r8, r0
   12574:	mov	r2, #5
   12578:	cmp	r3, #3
   1257c:	beq	12780 <__assert_fail@plt+0x13bc>
   12580:	cmp	r3, #4
   12584:	beq	12818 <__assert_fail@plt+0x1454>
   12588:	cmp	sl, #0
   1258c:	beq	12768 <__assert_fail@plt+0x13a4>
   12590:	ldr	r1, [pc, #884]	; 1290c <__assert_fail@plt+0x1548>
   12594:	mov	r0, #0
   12598:	bl	11130 <dcgettext@plt>
   1259c:	mov	r4, r0
   125a0:	b	127dc <__assert_fail@plt+0x1418>
   125a4:	ldr	r3, [sp, #32]
   125a8:	cmn	r3, #1
   125ac:	beq	125cc <__assert_fail@plt+0x1208>
   125b0:	ldr	r3, [r6, #16]
   125b4:	and	r3, r3, #61440	; 0xf000
   125b8:	cmp	r3, #32768	; 0x8000
   125bc:	beq	125f0 <__assert_fail@plt+0x122c>
   125c0:	cmp	r3, #16384	; 0x4000
   125c4:	moveq	r3, #18688	; 0x4900
   125c8:	beq	125f4 <__assert_fail@plt+0x1230>
   125cc:	ldr	r0, [sp, #8]
   125d0:	ldr	r2, [sp, #20]
   125d4:	ldr	r1, [sp, #24]
   125d8:	ldr	r3, [sp, #28]
   125dc:	ldr	r0, [r0, #32]
   125e0:	bl	1293c <__assert_fail@plt+0x1578>
   125e4:	clz	r5, r0
   125e8:	lsr	r5, r5, #5
   125ec:	b	12704 <__assert_fail@plt+0x1340>
   125f0:	mov	r3, #2304	; 0x900
   125f4:	mov	r2, r3
   125f8:	mov	r0, sl
   125fc:	ldr	r1, [sp, #24]
   12600:	str	r3, [sp, #36]	; 0x24
   12604:	bl	110dc <__openat64_2@plt>
   12608:	subs	r4, r0, #0
   1260c:	bge	12668 <__assert_fail@plt+0x12a4>
   12610:	ldr	r3, [sp, #16]
   12614:	ldr	r2, [r3]
   12618:	cmp	r2, #13
   1261c:	bne	1265c <__assert_fail@plt+0x1298>
   12620:	ldr	r2, [r6, #16]
   12624:	and	r2, r2, #61440	; 0xf000
   12628:	cmp	r2, #32768	; 0x8000
   1262c:	bne	125cc <__assert_fail@plt+0x1208>
   12630:	mov	r0, sl
   12634:	ldr	r1, [sp, #24]
   12638:	ldr	r3, [sp, #36]	; 0x24
   1263c:	orr	r2, r3, #1
   12640:	bl	110dc <__openat64_2@plt>
   12644:	subs	r4, r0, #0
   12648:	bge	12668 <__assert_fail@plt+0x12a4>
   1264c:	ldr	r3, [sp, #16]
   12650:	ldr	r3, [r3]
   12654:	cmp	r3, #13
   12658:	beq	125cc <__assert_fail@plt+0x1208>
   1265c:	mov	r4, r8
   12660:	mov	r5, #0
   12664:	b	12430 <__assert_fail@plt+0x106c>
   12668:	add	r1, sp, #144	; 0x90
   1266c:	mov	r0, r4
   12670:	bl	185b4 <__assert_fail@plt+0x71f0>
   12674:	cmp	r0, #0
   12678:	bne	1270c <__assert_fail@plt+0x1348>
   1267c:	ldrd	r0, [r6, #96]	; 0x60
   12680:	ldrd	r2, [sp, #240]	; 0xf0
   12684:	cmp	r1, r3
   12688:	cmpeq	r0, r2
   1268c:	bne	12750 <__assert_fail@plt+0x138c>
   12690:	ldrd	r0, [r6]
   12694:	ldrd	r2, [sp, #144]	; 0x90
   12698:	cmp	r1, r3
   1269c:	cmpeq	r0, r2
   126a0:	bne	12750 <__assert_fail@plt+0x138c>
   126a4:	ldr	r3, [sp, #288]	; 0x120
   126a8:	cmn	r3, #1
   126ac:	beq	126c0 <__assert_fail@plt+0x12fc>
   126b0:	ldr	r3, [sp, #168]	; 0xa8
   126b4:	ldr	r2, [sp, #288]	; 0x120
   126b8:	cmp	r2, r3
   126bc:	bne	12758 <__assert_fail@plt+0x1394>
   126c0:	ldr	r3, [sp, #292]	; 0x124
   126c4:	cmn	r3, #1
   126c8:	beq	126dc <__assert_fail@plt+0x1318>
   126cc:	ldr	r3, [sp, #172]	; 0xac
   126d0:	ldr	r2, [sp, #292]	; 0x124
   126d4:	cmp	r2, r3
   126d8:	bne	12758 <__assert_fail@plt+0x1394>
   126dc:	mov	r0, r4
   126e0:	ldr	r1, [sp, #20]
   126e4:	ldr	r2, [sp, #28]
   126e8:	bl	1125c <fchown@plt>
   126ec:	cmp	r0, #0
   126f0:	bne	1270c <__assert_fail@plt+0x1348>
   126f4:	mov	r0, r4
   126f8:	bl	11388 <close@plt>
   126fc:	cmp	r0, #0
   12700:	bne	1265c <__assert_fail@plt+0x1298>
   12704:	mov	r4, r8
   12708:	b	12430 <__assert_fail@plt+0x106c>
   1270c:	mov	sl, #6
   12710:	ldr	r3, [sp, #16]
   12714:	mov	r0, r4
   12718:	sub	sl, sl, #3
   1271c:	ldr	r3, [r3]
   12720:	str	r3, [sp, #36]	; 0x24
   12724:	bl	11388 <close@plt>
   12728:	ldr	r2, [sp, #16]
   1272c:	ldr	r3, [sp, #36]	; 0x24
   12730:	str	r3, [r2]
   12734:	cmp	sl, #3
   12738:	ldrls	pc, [pc, sl, lsl #2]
   1273c:	b	12704 <__assert_fail@plt+0x1340>
   12740:	andeq	r2, r1, r0, ror #14
   12744:	andeq	r2, r1, r0, ror #14
   12748:	andeq	r2, r1, ip, asr #11
   1274c:	andeq	r2, r1, ip, asr r6
   12750:	mov	sl, #4
   12754:	b	12710 <__assert_fail@plt+0x134c>
   12758:	mov	sl, #2
   1275c:	b	12710 <__assert_fail@plt+0x134c>
   12760:	mov	r4, #0
   12764:	b	12660 <__assert_fail@plt+0x129c>
   12768:	cmp	r4, #0
   1276c:	ldrne	r1, [pc, #412]	; 12910 <__assert_fail@plt+0x154c>
   12770:	ldreq	r1, [pc, #412]	; 12914 <__assert_fail@plt+0x1550>
   12774:	bne	12594 <__assert_fail@plt+0x11d0>
   12778:	mov	r0, r4
   1277c:	b	12598 <__assert_fail@plt+0x11d4>
   12780:	cmp	r0, #0
   12784:	beq	127a8 <__assert_fail@plt+0x13e4>
   12788:	cmp	sl, #0
   1278c:	ldrne	r1, [pc, #388]	; 12918 <__assert_fail@plt+0x1554>
   12790:	bne	12594 <__assert_fail@plt+0x11d0>
   12794:	cmp	r4, #0
   12798:	ldrne	r1, [pc, #380]	; 1291c <__assert_fail@plt+0x1558>
   1279c:	ldreq	r1, [pc, #380]	; 12920 <__assert_fail@plt+0x155c>
   127a0:	bne	12594 <__assert_fail@plt+0x11d0>
   127a4:	b	12778 <__assert_fail@plt+0x13b4>
   127a8:	cmp	sl, #0
   127ac:	ldrne	r1, [pc, #368]	; 12924 <__assert_fail@plt+0x1560>
   127b0:	bne	127c0 <__assert_fail@plt+0x13fc>
   127b4:	cmp	r4, #0
   127b8:	ldrne	r1, [pc, #360]	; 12928 <__assert_fail@plt+0x1564>
   127bc:	ldreq	r1, [pc, #348]	; 12920 <__assert_fail@plt+0x155c>
   127c0:	bl	11130 <dcgettext@plt>
   127c4:	mov	r4, r0
   127c8:	mov	r0, #0
   127cc:	bl	12a60 <__assert_fail@plt+0x169c>
   127d0:	mov	r3, #0
   127d4:	ldr	r8, [sp, #24]
   127d8:	str	r3, [sp, #24]
   127dc:	mov	r1, fp
   127e0:	mov	r0, #4
   127e4:	bl	16aa4 <__assert_fail@plt+0x56e0>
   127e8:	ldr	r3, [sp, #24]
   127ec:	mov	r2, r0
   127f0:	mov	r1, r4
   127f4:	mov	r0, #1
   127f8:	str	r3, [sp]
   127fc:	mov	r3, r8
   12800:	bl	1128c <__printf_chk@plt>
   12804:	mov	r0, r8
   12808:	bl	12a60 <__assert_fail@plt+0x169c>
   1280c:	ldr	r0, [sp, #24]
   12810:	bl	12a60 <__assert_fail@plt+0x169c>
   12814:	b	128a0 <__assert_fail@plt+0x14dc>
   12818:	cmp	sl, #0
   1281c:	ldrne	r1, [pc, #264]	; 1292c <__assert_fail@plt+0x1568>
   12820:	bne	12594 <__assert_fail@plt+0x11d0>
   12824:	cmp	r4, #0
   12828:	ldrne	r1, [pc, #256]	; 12930 <__assert_fail@plt+0x156c>
   1282c:	bne	12594 <__assert_fail@plt+0x11d0>
   12830:	ldr	r1, [pc, #252]	; 12934 <__assert_fail@plt+0x1570>
   12834:	b	12778 <__assert_fail@plt+0x13b4>
   12838:	cmp	r6, #0
   1283c:	streq	r6, [sp, #16]
   12840:	beq	12870 <__assert_fail@plt+0x14ac>
   12844:	mov	r3, #1
   12848:	ldr	r0, [r6, #24]
   1284c:	str	r3, [sp, #24]
   12850:	bl	11dd4 <__assert_fail@plt+0xa10>
   12854:	str	r0, [sp, #16]
   12858:	ldr	r0, [r6, #28]
   1285c:	bl	11da0 <__assert_fail@plt+0x9dc>
   12860:	ldr	r3, [sp, #24]
   12864:	mov	r6, r0
   12868:	cmp	r3, #1
   1286c:	bne	12530 <__assert_fail@plt+0x116c>
   12870:	mov	r2, #5
   12874:	ldr	r1, [pc, #188]	; 12938 <__assert_fail@plt+0x1574>
   12878:	mov	r0, #0
   1287c:	bl	11130 <dcgettext@plt>
   12880:	mov	r4, r0
   12884:	mov	r1, fp
   12888:	mov	r0, #4
   1288c:	bl	16aa4 <__assert_fail@plt+0x56e0>
   12890:	mov	r2, r0
   12894:	mov	r1, r4
   12898:	mov	r0, #1
   1289c:	bl	1128c <__printf_chk@plt>
   128a0:	ldr	r0, [sp, #16]
   128a4:	bl	12a60 <__assert_fail@plt+0x169c>
   128a8:	mov	r0, r6
   128ac:	bl	12a60 <__assert_fail@plt+0x169c>
   128b0:	ldrb	r3, [r7, #4]
   128b4:	cmp	r3, #0
   128b8:	bne	12010 <__assert_fail@plt+0xc4c>
   128bc:	mov	r2, #4
   128c0:	mov	r1, r9
   128c4:	ldr	r0, [sp, #8]
   128c8:	bl	1462c <__assert_fail@plt+0x3268>
   128cc:	b	12010 <__assert_fail@plt+0xc4c>
   128d0:	mov	r3, #3
   128d4:	b	12524 <__assert_fail@plt+0x1160>
   128d8:	andeq	r9, r1, lr, lsl #6
   128dc:	muleq	r1, lr, r6
   128e0:	andeq	r9, r1, r8, ror #22
   128e4:	andeq	r9, r1, lr, lsl r3
   128e8:	andeq	r9, r1, r5, lsl #7
   128ec:	andeq	r9, r1, fp, asr #6
   128f0:	muleq	r1, sl, r4
   128f4:			; <UNDEFINED> instruction: 0x000193b6
   128f8:			; <UNDEFINED> instruction: 0x000191b9
   128fc:	andeq	r9, r1, r7, asr #7
   12900:	andeq	r9, r1, r0, ror #7
   12904:			; <UNDEFINED> instruction: 0x000194b0
   12908:	andeq	r9, r1, r9, asr #9
   1290c:	andeq	r9, r1, r6, lsl r5
   12910:	andeq	r9, r1, sp, lsr r5
   12914:	andeq	r9, r1, r0, ror #10
   12918:	andeq	r9, r1, lr, ror r5
   1291c:	andeq	r9, r1, lr, lsr #11
   12920:	ldrdeq	r9, [r1], -sl
   12924:	strdeq	r9, [r1], -ip
   12928:	andeq	r9, r1, r4, lsr #12
   1292c:	andeq	r9, r1, r8, asr #12
   12930:	andeq	r9, r1, r8, ror #12
   12934:	andeq	r9, r1, r4, lsl #13
   12938:	ldrdeq	r9, [r1], -lr
   1293c:	mov	ip, #0
   12940:	push	{r0, r1, r2, lr}
   12944:	str	ip, [sp]
   12948:	bl	11340 <fchownat@plt>
   1294c:	add	sp, sp, #12
   12950:	pop	{pc}		; (ldr pc, [sp], #4)
   12954:	mov	ip, #256	; 0x100
   12958:	push	{r0, r1, r2, lr}
   1295c:	str	ip, [sp]
   12960:	bl	11340 <fchownat@plt>
   12964:	add	sp, sp, #12
   12968:	pop	{pc}		; (ldr pc, [sp], #4)
   1296c:	ldr	r3, [pc, #4]	; 12978 <__assert_fail@plt+0x15b4>
   12970:	str	r0, [r3]
   12974:	bx	lr
   12978:	andeq	sl, r2, r0, asr #3
   1297c:	ldr	r3, [pc, #4]	; 12988 <__assert_fail@plt+0x15c4>
   12980:	strb	r0, [r3, #4]
   12984:	bx	lr
   12988:	andeq	sl, r2, r0, asr #3
   1298c:	ldr	r3, [pc, #176]	; 12a44 <__assert_fail@plt+0x1680>
   12990:	push	{r0, r1, r4, r5, r6, lr}
   12994:	ldr	r0, [r3]
   12998:	bl	17d40 <__assert_fail@plt+0x697c>
   1299c:	cmp	r0, #0
   129a0:	beq	12a28 <__assert_fail@plt+0x1664>
   129a4:	ldr	r4, [pc, #156]	; 12a48 <__assert_fail@plt+0x1684>
   129a8:	bl	11268 <__errno_location@plt>
   129ac:	mov	r5, r0
   129b0:	ldrb	r6, [r4, #4]
   129b4:	cmp	r6, #0
   129b8:	beq	129c8 <__assert_fail@plt+0x1604>
   129bc:	ldr	r3, [r0]
   129c0:	cmp	r3, #32
   129c4:	beq	12a28 <__assert_fail@plt+0x1664>
   129c8:	mov	r2, #5
   129cc:	ldr	r1, [pc, #120]	; 12a4c <__assert_fail@plt+0x1688>
   129d0:	mov	r0, #0
   129d4:	bl	11130 <dcgettext@plt>
   129d8:	mov	r6, r0
   129dc:	ldr	r0, [r4]
   129e0:	cmp	r0, #0
   129e4:	beq	12a14 <__assert_fail@plt+0x1650>
   129e8:	ldr	r4, [r5]
   129ec:	bl	16b38 <__assert_fail@plt+0x5774>
   129f0:	mov	r3, r0
   129f4:	ldr	r2, [pc, #84]	; 12a50 <__assert_fail@plt+0x168c>
   129f8:	mov	r0, #0
   129fc:	str	r6, [sp]
   12a00:	mov	r1, r4
   12a04:	bl	111c0 <error@plt>
   12a08:	ldr	r3, [pc, #68]	; 12a54 <__assert_fail@plt+0x1690>
   12a0c:	ldr	r0, [r3]
   12a10:	bl	110e8 <_exit@plt>
   12a14:	mov	r3, r6
   12a18:	ldr	r2, [pc, #56]	; 12a58 <__assert_fail@plt+0x1694>
   12a1c:	ldr	r1, [r5]
   12a20:	bl	111c0 <error@plt>
   12a24:	b	12a08 <__assert_fail@plt+0x1644>
   12a28:	ldr	r3, [pc, #44]	; 12a5c <__assert_fail@plt+0x1698>
   12a2c:	ldr	r0, [r3]
   12a30:	bl	17d40 <__assert_fail@plt+0x697c>
   12a34:	cmp	r0, #0
   12a38:	bne	12a08 <__assert_fail@plt+0x1644>
   12a3c:	add	sp, sp, #8
   12a40:	pop	{r4, r5, r6, pc}
   12a44:	muleq	r2, ip, r1
   12a48:	andeq	sl, r2, r0, asr #3
   12a4c:			; <UNDEFINED> instruction: 0x000196be
   12a50:			; <UNDEFINED> instruction: 0x000191b5
   12a54:	andeq	sl, r2, r4, asr #2
   12a58:			; <UNDEFINED> instruction: 0x000191b9
   12a5c:	muleq	r2, r8, r1
   12a60:	push	{r0, r1, r2, r4, r5, lr}
   12a64:	mov	r5, r0
   12a68:	bl	11268 <__errno_location@plt>
   12a6c:	mov	r4, r0
   12a70:	mov	r0, r5
   12a74:	ldr	r3, [r4]
   12a78:	str	r3, [sp]
   12a7c:	str	r3, [sp, #4]
   12a80:	mov	r3, #0
   12a84:	str	r3, [r4]
   12a88:	bl	110d0 <free@plt>
   12a8c:	ldr	r3, [r4]
   12a90:	add	r2, sp, #8
   12a94:	clz	r3, r3
   12a98:	lsr	r3, r3, #5
   12a9c:	add	r3, r2, r3, lsl #2
   12aa0:	ldr	r3, [r3, #-8]
   12aa4:	str	r3, [r4]
   12aa8:	add	sp, sp, #12
   12aac:	pop	{r4, r5, pc}
   12ab0:	push	{r4, r5, lr}
   12ab4:	ldrd	r2, [r1, #8]
   12ab8:	ldrd	r4, [r0, #8]
   12abc:	cmp	r5, r3
   12ac0:	cmpeq	r4, r2
   12ac4:	bne	12ae4 <__assert_fail@plt+0x1720>
   12ac8:	ldrd	r4, [r0]
   12acc:	ldrd	r2, [r1]
   12ad0:	cmp	r5, r3
   12ad4:	cmpeq	r4, r2
   12ad8:	moveq	r0, #1
   12adc:	movne	r0, #0
   12ae0:	pop	{r4, r5, pc}
   12ae4:	mov	r0, #0
   12ae8:	pop	{r4, r5, pc}
   12aec:	push	{r4, lr}
   12af0:	mov	r2, r1
   12af4:	mov	r3, #0
   12af8:	ldrd	r0, [r0, #8]
   12afc:	bl	183b4 <__assert_fail@plt+0x6ff0>
   12b00:	mov	r0, r2
   12b04:	pop	{r4, pc}
   12b08:	push	{r4, lr}
   12b0c:	mov	r2, r1
   12b10:	mov	r3, #0
   12b14:	ldrd	r0, [r0]
   12b18:	bl	183b4 <__assert_fail@plt+0x6ff0>
   12b1c:	mov	r0, r2
   12b20:	pop	{r4, pc}
   12b24:	push	{r4, r5, lr}
   12b28:	ldrd	r2, [r1]
   12b2c:	ldrd	r4, [r0]
   12b30:	cmp	r5, r3
   12b34:	cmpeq	r4, r2
   12b38:	moveq	r0, #1
   12b3c:	movne	r0, #0
   12b40:	pop	{r4, r5, pc}
   12b44:	ldr	r3, [r0]
   12b48:	push	{r4, r5, lr}
   12b4c:	ldrd	r4, [r3, #160]	; 0xa0
   12b50:	ldr	r3, [r1]
   12b54:	ldrd	r2, [r3, #160]	; 0xa0
   12b58:	cmp	r5, r3
   12b5c:	cmpeq	r4, r2
   12b60:	movhi	r0, #1
   12b64:	movls	r0, #0
   12b68:	movcc	r3, #1
   12b6c:	movcs	r3, #0
   12b70:	sub	r0, r0, r3
   12b74:	pop	{r4, r5, pc}
   12b78:	push	{r4, r5, r6, lr}
   12b7c:	mov	r4, r1
   12b80:	add	r5, r1, #64	; 0x40
   12b84:	ldr	r1, [r1, #48]	; 0x30
   12b88:	ldr	r3, [r0, #48]	; 0x30
   12b8c:	cmp	r1, #0
   12b90:	bne	12b9c <__assert_fail@plt+0x17d8>
   12b94:	tst	r3, #1
   12b98:	bne	12ba8 <__assert_fail@plt+0x17e4>
   12b9c:	ubfx	r3, r3, #1, #1
   12ba0:	orrs	r3, r2, r3
   12ba4:	beq	12c10 <__assert_fail@plt+0x184c>
   12ba8:	mov	r1, r5
   12bac:	ldr	r0, [r4, #24]
   12bb0:	bl	185a4 <__assert_fail@plt+0x71e0>
   12bb4:	cmp	r0, #0
   12bb8:	beq	12c38 <__assert_fail@plt+0x1874>
   12bbc:	bl	11268 <__errno_location@plt>
   12bc0:	ldr	r3, [r0]
   12bc4:	mov	r6, r0
   12bc8:	cmp	r3, #2
   12bcc:	bne	12bf0 <__assert_fail@plt+0x182c>
   12bd0:	mov	r1, r5
   12bd4:	ldr	r0, [r4, #24]
   12bd8:	bl	185c4 <__assert_fail@plt+0x7200>
   12bdc:	cmp	r0, #0
   12be0:	bne	12bf0 <__assert_fail@plt+0x182c>
   12be4:	str	r0, [r6]
   12be8:	mov	r0, #13
   12bec:	pop	{r4, r5, r6, pc}
   12bf0:	ldr	r3, [r6]
   12bf4:	mov	r2, #104	; 0x68
   12bf8:	mov	r1, #0
   12bfc:	str	r3, [r4, #32]
   12c00:	mov	r0, r5
   12c04:	bl	11280 <memset@plt>
   12c08:	mov	r0, #10
   12c0c:	pop	{r4, r5, r6, pc}
   12c10:	mov	r3, #256	; 0x100
   12c14:	mov	r2, r5
   12c18:	ldr	r1, [r4, #24]
   12c1c:	ldr	r0, [r0, #32]
   12c20:	bl	185d4 <__assert_fail@plt+0x7210>
   12c24:	cmp	r0, #0
   12c28:	beq	12c38 <__assert_fail@plt+0x1874>
   12c2c:	bl	11268 <__errno_location@plt>
   12c30:	ldr	r3, [r0]
   12c34:	b	12bf4 <__assert_fail@plt+0x1830>
   12c38:	ldr	r3, [r4, #80]	; 0x50
   12c3c:	and	r3, r3, #61440	; 0xf000
   12c40:	cmp	r3, #16384	; 0x4000
   12c44:	bne	12c88 <__assert_fail@plt+0x18c4>
   12c48:	ldrb	r3, [r4, #168]	; 0xa8
   12c4c:	cmp	r3, #46	; 0x2e
   12c50:	bne	12ca0 <__assert_fail@plt+0x18dc>
   12c54:	ldrb	r3, [r4, #169]	; 0xa9
   12c58:	cmp	r3, #0
   12c5c:	beq	12c74 <__assert_fail@plt+0x18b0>
   12c60:	ldr	r3, [r4, #168]	; 0xa8
   12c64:	bic	r3, r3, #-16777216	; 0xff000000
   12c68:	bic	r3, r3, #255	; 0xff
   12c6c:	cmp	r3, #11776	; 0x2e00
   12c70:	bne	12ca0 <__assert_fail@plt+0x18dc>
   12c74:	ldr	r3, [r4, #48]	; 0x30
   12c78:	cmp	r3, #0
   12c7c:	moveq	r0, #1
   12c80:	movne	r0, #5
   12c84:	pop	{r4, r5, r6, pc}
   12c88:	cmp	r3, #40960	; 0xa000
   12c8c:	beq	12ca8 <__assert_fail@plt+0x18e4>
   12c90:	cmp	r3, #32768	; 0x8000
   12c94:	movne	r0, #3
   12c98:	moveq	r0, #8
   12c9c:	pop	{r4, r5, r6, pc}
   12ca0:	mov	r0, #1
   12ca4:	pop	{r4, r5, r6, pc}
   12ca8:	mov	r0, #12
   12cac:	pop	{r4, r5, r6, pc}
   12cb0:	ldr	r3, [r0, #40]	; 0x28
   12cb4:	push	{r4, r5, r6, r7, r8, lr}
   12cb8:	mov	r4, r0
   12cbc:	mov	r6, r1
   12cc0:	mov	r5, r2
   12cc4:	ldr	r7, [r0, #44]	; 0x2c
   12cc8:	cmp	r3, r2
   12ccc:	bcs	12d14 <__assert_fail@plt+0x1950>
   12cd0:	add	r1, r2, #40	; 0x28
   12cd4:	ldr	r0, [r0, #8]
   12cd8:	cmn	r1, #-1073741823	; 0xc0000001
   12cdc:	str	r1, [r4, #40]	; 0x28
   12ce0:	bls	12d00 <__assert_fail@plt+0x193c>
   12ce4:	ldr	r0, [r4, #8]
   12ce8:	bl	12a60 <__assert_fail@plt+0x169c>
   12cec:	mov	r3, #0
   12cf0:	str	r3, [r4, #8]
   12cf4:	str	r3, [r4, #40]	; 0x28
   12cf8:	mov	r0, r6
   12cfc:	pop	{r4, r5, r6, r7, r8, pc}
   12d00:	lsl	r1, r1, #2
   12d04:	bl	17cfc <__assert_fail@plt+0x6938>
   12d08:	cmp	r0, #0
   12d0c:	beq	12ce4 <__assert_fail@plt+0x1920>
   12d10:	str	r0, [r4, #8]
   12d14:	ldr	r0, [r4, #8]
   12d18:	mov	r2, r0
   12d1c:	cmp	r6, #0
   12d20:	bne	12d50 <__assert_fail@plt+0x198c>
   12d24:	mov	r3, r7
   12d28:	mov	r2, #4
   12d2c:	mov	r1, r5
   12d30:	bl	11334 <qsort@plt>
   12d34:	ldr	r3, [r4, #8]
   12d38:	ldr	r6, [r3]
   12d3c:	subs	r5, r5, #1
   12d40:	ldr	r2, [r3]
   12d44:	bne	12d5c <__assert_fail@plt+0x1998>
   12d48:	str	r5, [r2, #8]
   12d4c:	b	12cf8 <__assert_fail@plt+0x1934>
   12d50:	str	r6, [r2], #4
   12d54:	ldr	r6, [r6, #8]
   12d58:	b	12d1c <__assert_fail@plt+0x1958>
   12d5c:	ldr	r1, [r3, #4]!
   12d60:	str	r1, [r2, #8]
   12d64:	b	12d3c <__assert_fail@plt+0x1978>
   12d68:	push	{r4, r5, r6, r7, r8, lr}
   12d6c:	mov	r6, r0
   12d70:	add	r0, r2, #176	; 0xb0
   12d74:	bic	r0, r0, #7
   12d78:	mov	r7, r1
   12d7c:	mov	r5, r2
   12d80:	bl	17cd0 <__assert_fail@plt+0x690c>
   12d84:	subs	r4, r0, #0
   12d88:	beq	12dd4 <__assert_fail@plt+0x1a10>
   12d8c:	mov	r2, r5
   12d90:	mov	r1, r7
   12d94:	add	r0, r4, #168	; 0xa8
   12d98:	bl	110f4 <memcpy@plt>
   12d9c:	mov	r3, #0
   12da0:	add	r2, r4, r5
   12da4:	strb	r3, [r2, #168]	; 0xa8
   12da8:	ldr	r2, [r6, #24]
   12dac:	str	r3, [r4, #12]
   12db0:	str	r3, [r4, #16]
   12db4:	str	r3, [r4, #20]
   12db8:	str	r2, [r4, #28]
   12dbc:	mov	r2, #3
   12dc0:	str	r3, [r4, #32]
   12dc4:	str	r6, [r4, #44]	; 0x2c
   12dc8:	str	r5, [r4, #52]	; 0x34
   12dcc:	strh	r3, [r4, #58]	; 0x3a
   12dd0:	strh	r2, [r4, #60]	; 0x3c
   12dd4:	mov	r0, r4
   12dd8:	pop	{r4, r5, r6, r7, r8, pc}
   12ddc:	mov	r3, r0
   12de0:	mov	r0, r1
   12de4:	ldr	ip, [r3, #48]	; 0x30
   12de8:	lsl	r2, ip, #11
   12dec:	tst	ip, #512	; 0x200
   12df0:	and	r2, r2, #32768	; 0x8000
   12df4:	orr	r2, r2, #540672	; 0x84000
   12df8:	orr	r2, r2, #2304	; 0x900
   12dfc:	beq	12e08 <__assert_fail@plt+0x1a44>
   12e00:	ldr	r0, [r3, #32]
   12e04:	b	15604 <__assert_fail@plt+0x4240>
   12e08:	mov	r1, r2
   12e0c:	b	180d4 <__assert_fail@plt+0x6d10>
   12e10:	push	{r4, r5, r6, lr}
   12e14:	mov	r4, r0
   12e18:	cmp	r4, #0
   12e1c:	popeq	{r4, r5, r6, pc}
   12e20:	ldr	r5, [r4, #8]
   12e24:	ldr	r0, [r4, #12]
   12e28:	cmp	r0, #0
   12e2c:	beq	12e34 <__assert_fail@plt+0x1a70>
   12e30:	bl	113a0 <closedir@plt>
   12e34:	mov	r0, r4
   12e38:	mov	r4, r5
   12e3c:	bl	12a60 <__assert_fail@plt+0x169c>
   12e40:	b	12e18 <__assert_fail@plt+0x1a54>
   12e44:	push	{r4, lr}
   12e48:	mov	r4, r0
   12e4c:	mov	r0, r4
   12e50:	bl	15508 <__assert_fail@plt+0x4144>
   12e54:	cmp	r0, #0
   12e58:	popne	{r4, pc}
   12e5c:	mov	r0, r4
   12e60:	bl	15554 <__assert_fail@plt+0x4190>
   12e64:	cmp	r0, #0
   12e68:	blt	12e4c <__assert_fail@plt+0x1a88>
   12e6c:	bl	11388 <close@plt>
   12e70:	b	12e4c <__assert_fail@plt+0x1a88>
   12e74:	push	{r4, r5, r6, r7, lr}
   12e78:	sub	sp, sp, #100	; 0x64
   12e7c:	ldr	r5, [r0, #44]	; 0x2c
   12e80:	ldr	r3, [r5, #48]	; 0x30
   12e84:	tst	r3, #512	; 0x200
   12e88:	bne	12e98 <__assert_fail@plt+0x1ad4>
   12e8c:	mov	r0, #0
   12e90:	add	sp, sp, #100	; 0x64
   12e94:	pop	{r4, r5, r6, r7, pc}
   12e98:	ldr	r4, [r5, #52]	; 0x34
   12e9c:	mov	r7, r1
   12ea0:	mov	r6, r0
   12ea4:	cmp	r4, #0
   12ea8:	bne	12ed8 <__assert_fail@plt+0x1b14>
   12eac:	ldr	r3, [pc, #184]	; 12f6c <__assert_fail@plt+0x1ba8>
   12eb0:	mov	r1, r4
   12eb4:	mov	r0, #13
   12eb8:	ldr	r2, [pc, #176]	; 12f70 <__assert_fail@plt+0x1bac>
   12ebc:	str	r3, [sp]
   12ec0:	ldr	r3, [pc, #172]	; 12f74 <__assert_fail@plt+0x1bb0>
   12ec4:	bl	14ee8 <__assert_fail@plt+0x3b24>
   12ec8:	cmp	r0, #0
   12ecc:	mov	r4, r0
   12ed0:	str	r0, [r5, #52]	; 0x34
   12ed4:	beq	12ef8 <__assert_fail@plt+0x1b34>
   12ed8:	ldrd	r2, [r6, #64]	; 0x40
   12edc:	add	r1, sp, #8
   12ee0:	mov	r0, r4
   12ee4:	strd	r2, [sp, #8]
   12ee8:	bl	14cd8 <__assert_fail@plt+0x3914>
   12eec:	cmp	r0, #0
   12ef0:	ldrne	r0, [r0, #8]
   12ef4:	bne	12e90 <__assert_fail@plt+0x1acc>
   12ef8:	cmp	r7, #0
   12efc:	blt	12e8c <__assert_fail@plt+0x1ac8>
   12f00:	add	r1, sp, #8
   12f04:	mov	r0, r7
   12f08:	bl	11058 <fstatfs64@plt>
   12f0c:	cmp	r0, #0
   12f10:	bne	12e8c <__assert_fail@plt+0x1ac8>
   12f14:	cmp	r4, #0
   12f18:	beq	12f64 <__assert_fail@plt+0x1ba0>
   12f1c:	mov	r0, #16
   12f20:	bl	17cd0 <__assert_fail@plt+0x690c>
   12f24:	subs	r5, r0, #0
   12f28:	beq	12f64 <__assert_fail@plt+0x1ba0>
   12f2c:	ldrd	r2, [r6, #64]	; 0x40
   12f30:	mov	r1, r5
   12f34:	mov	r0, r4
   12f38:	strd	r2, [r5]
   12f3c:	ldr	r3, [sp, #8]
   12f40:	str	r3, [r5, #8]
   12f44:	bl	153b0 <__assert_fail@plt+0x3fec>
   12f48:	cmp	r0, #0
   12f4c:	beq	12f5c <__assert_fail@plt+0x1b98>
   12f50:	cmp	r5, r0
   12f54:	beq	12f64 <__assert_fail@plt+0x1ba0>
   12f58:	bl	1137c <abort@plt>
   12f5c:	mov	r0, r5
   12f60:	bl	12a60 <__assert_fail@plt+0x169c>
   12f64:	ldr	r0, [sp, #8]
   12f68:	b	12e90 <__assert_fail@plt+0x1acc>
   12f6c:	andeq	r2, r1, r0, ror #20
   12f70:	andeq	r2, r1, r8, lsl #22
   12f74:	andeq	r2, r1, r4, lsr #22
   12f78:	push	{r4, r5, r6, lr}
   12f7c:	mov	r5, r1
   12f80:	ldr	r1, [r0, #32]
   12f84:	sub	r3, r1, r5
   12f88:	cmn	r1, #100	; 0x64
   12f8c:	clz	r3, r3
   12f90:	lsr	r3, r3, #5
   12f94:	moveq	r3, #0
   12f98:	cmp	r3, #0
   12f9c:	beq	12fa4 <__assert_fail@plt+0x1be0>
   12fa0:	bl	1137c <abort@plt>
   12fa4:	cmp	r2, #0
   12fa8:	mov	r4, r0
   12fac:	beq	12fcc <__assert_fail@plt+0x1c08>
   12fb0:	add	r0, r0, #60	; 0x3c
   12fb4:	bl	15510 <__assert_fail@plt+0x414c>
   12fb8:	cmp	r0, #0
   12fbc:	blt	12fc4 <__assert_fail@plt+0x1c00>
   12fc0:	bl	11388 <close@plt>
   12fc4:	str	r5, [r4, #32]
   12fc8:	pop	{r4, r5, r6, pc}
   12fcc:	ldr	r3, [r0, #48]	; 0x30
   12fd0:	mvn	r2, r1
   12fd4:	lsr	r2, r2, #31
   12fd8:	eor	r3, r3, #4
   12fdc:	ands	r3, r2, r3, lsr #2
   12fe0:	beq	12fc4 <__assert_fail@plt+0x1c00>
   12fe4:	mov	r0, r1
   12fe8:	b	12fc0 <__assert_fail@plt+0x1bfc>
   12fec:	ldr	r3, [r0, #48]	; 0x30
   12ff0:	push	{r4, r5, r6, lr}
   12ff4:	mov	r5, r0
   12ff8:	ands	r4, r3, #4
   12ffc:	movne	r4, #0
   13000:	bne	13018 <__assert_fail@plt+0x1c54>
   13004:	tst	r3, #512	; 0x200
   13008:	beq	13028 <__assert_fail@plt+0x1c64>
   1300c:	mov	r2, #1
   13010:	mvn	r1, #99	; 0x63
   13014:	bl	12f78 <__assert_fail@plt+0x1bb4>
   13018:	add	r0, r5, #60	; 0x3c
   1301c:	bl	12e44 <__assert_fail@plt+0x1a80>
   13020:	mov	r0, r4
   13024:	pop	{r4, r5, r6, pc}
   13028:	ldr	r0, [r0, #28]
   1302c:	bl	11328 <fchdir@plt>
   13030:	adds	r4, r0, #0
   13034:	movne	r4, #1
   13038:	b	13018 <__assert_fail@plt+0x1c54>
   1303c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13040:	subs	sl, r3, #0
   13044:	sub	sp, sp, #104	; 0x68
   13048:	mov	r7, r0
   1304c:	mov	r8, r1
   13050:	mov	r6, r2
   13054:	moveq	r9, sl
   13058:	beq	13070 <__assert_fail@plt+0x1cac>
   1305c:	ldr	r1, [pc, #368]	; 131d4 <__assert_fail@plt+0x1e10>
   13060:	mov	r0, sl
   13064:	bl	110a0 <strcmp@plt>
   13068:	clz	r9, r0
   1306c:	lsr	r9, r9, #5
   13070:	ldr	r3, [r7, #48]	; 0x30
   13074:	ands	r4, r3, #4
   13078:	beq	130a4 <__assert_fail@plt+0x1ce0>
   1307c:	mvn	r4, r6
   13080:	lsr	r4, r4, #31
   13084:	ands	r4, r4, r3, lsr #9
   13088:	beq	13098 <__assert_fail@plt+0x1cd4>
   1308c:	mov	r0, r6
   13090:	mov	r4, #0
   13094:	bl	11388 <close@plt>
   13098:	mov	r0, r4
   1309c:	add	sp, sp, #104	; 0x68
   130a0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   130a4:	ands	r2, r9, r6, lsr #31
   130a8:	beq	13194 <__assert_fail@plt+0x1dd0>
   130ac:	tst	r3, #512	; 0x200
   130b0:	bne	130d0 <__assert_fail@plt+0x1d0c>
   130b4:	mov	r1, sl
   130b8:	mov	r0, r7
   130bc:	bl	12ddc <__assert_fail@plt+0x1a18>
   130c0:	subs	r5, r0, #0
   130c4:	bge	130fc <__assert_fail@plt+0x1d38>
   130c8:	mvn	r4, #0
   130cc:	b	13098 <__assert_fail@plt+0x1cd4>
   130d0:	add	r5, r7, #60	; 0x3c
   130d4:	mov	r0, r5
   130d8:	bl	15508 <__assert_fail@plt+0x4144>
   130dc:	cmp	r0, #0
   130e0:	bne	130b4 <__assert_fail@plt+0x1cf0>
   130e4:	mov	r0, r5
   130e8:	bl	15554 <__assert_fail@plt+0x4190>
   130ec:	subs	r5, r0, #0
   130f0:	movge	r6, r5
   130f4:	movge	sl, r4
   130f8:	blt	130b4 <__assert_fail@plt+0x1cf0>
   130fc:	ldr	r3, [r7, #48]	; 0x30
   13100:	tst	r3, #2
   13104:	bne	13124 <__assert_fail@plt+0x1d60>
   13108:	cmp	sl, #0
   1310c:	beq	131a4 <__assert_fail@plt+0x1de0>
   13110:	ldr	r1, [pc, #188]	; 131d4 <__assert_fail@plt+0x1e10>
   13114:	mov	r0, sl
   13118:	bl	110a0 <strcmp@plt>
   1311c:	cmp	r0, #0
   13120:	bne	131a4 <__assert_fail@plt+0x1de0>
   13124:	mov	r1, sp
   13128:	mov	r0, r5
   1312c:	bl	185b4 <__assert_fail@plt+0x71f0>
   13130:	cmp	r0, #0
   13134:	bne	1316c <__assert_fail@plt+0x1da8>
   13138:	ldrd	r2, [sp]
   1313c:	ldrd	r0, [r8, #64]	; 0x40
   13140:	cmp	r1, r3
   13144:	cmpeq	r0, r2
   13148:	bne	13160 <__assert_fail@plt+0x1d9c>
   1314c:	ldrd	r2, [sp, #96]	; 0x60
   13150:	ldrd	r0, [r8, #160]	; 0xa0
   13154:	cmp	r1, r3
   13158:	cmpeq	r0, r2
   1315c:	beq	131a4 <__assert_fail@plt+0x1de0>
   13160:	bl	11268 <__errno_location@plt>
   13164:	mov	r3, #2
   13168:	str	r3, [r0]
   1316c:	mvn	r4, #0
   13170:	cmp	r6, #0
   13174:	bge	13098 <__assert_fail@plt+0x1cd4>
   13178:	bl	11268 <__errno_location@plt>
   1317c:	mov	r6, r0
   13180:	mov	r0, r5
   13184:	ldr	r7, [r6]
   13188:	bl	11388 <close@plt>
   1318c:	str	r7, [r6]
   13190:	b	13098 <__assert_fail@plt+0x1cd4>
   13194:	cmp	r6, #0
   13198:	movge	r5, r6
   1319c:	bge	130fc <__assert_fail@plt+0x1d38>
   131a0:	b	130b4 <__assert_fail@plt+0x1cf0>
   131a4:	ldr	r3, [r7, #48]	; 0x30
   131a8:	tst	r3, #512	; 0x200
   131ac:	beq	131c4 <__assert_fail@plt+0x1e00>
   131b0:	eor	r2, r9, #1
   131b4:	mov	r1, r5
   131b8:	mov	r0, r7
   131bc:	bl	12f78 <__assert_fail@plt+0x1bb4>
   131c0:	b	13098 <__assert_fail@plt+0x1cd4>
   131c4:	mov	r0, r5
   131c8:	bl	11328 <fchdir@plt>
   131cc:	mov	r4, r0
   131d0:	b	13170 <__assert_fail@plt+0x1dac>
   131d4:	andeq	r9, r1, r2, ror #13
   131d8:	ldr	r3, [r0, #36]	; 0x24
   131dc:	add	r1, r1, #256	; 0x100
   131e0:	push	{r4, r5, r6, lr}
   131e4:	mov	r5, r0
   131e8:	ldr	r0, [r0, #24]
   131ec:	adds	r1, r3, r1
   131f0:	bcc	13214 <__assert_fail@plt+0x1e50>
   131f4:	mov	r4, #0
   131f8:	bl	12a60 <__assert_fail@plt+0x169c>
   131fc:	str	r4, [r5, #24]
   13200:	bl	11268 <__errno_location@plt>
   13204:	mov	r3, #36	; 0x24
   13208:	str	r3, [r0]
   1320c:	mov	r0, r4
   13210:	pop	{r4, r5, r6, pc}
   13214:	str	r1, [r5, #36]	; 0x24
   13218:	bl	17cfc <__assert_fail@plt+0x6938>
   1321c:	subs	r4, r0, #0
   13220:	bne	13234 <__assert_fail@plt+0x1e70>
   13224:	ldr	r0, [r5, #24]
   13228:	bl	12a60 <__assert_fail@plt+0x169c>
   1322c:	str	r4, [r5, #24]
   13230:	b	1320c <__assert_fail@plt+0x1e48>
   13234:	mov	r0, #1
   13238:	str	r4, [r5, #24]
   1323c:	pop	{r4, r5, r6, pc}
   13240:	ldr	r3, [r0, #48]	; 0x30
   13244:	movw	r2, #258	; 0x102
   13248:	push	{r0, r1, r4, lr}
   1324c:	mov	r4, r0
   13250:	tst	r2, r3
   13254:	beq	13288 <__assert_fail@plt+0x1ec4>
   13258:	ldr	r3, [pc, #72]	; 132a8 <__assert_fail@plt+0x1ee4>
   1325c:	mov	r1, #0
   13260:	mov	r0, #31
   13264:	ldr	r2, [pc, #64]	; 132ac <__assert_fail@plt+0x1ee8>
   13268:	str	r3, [sp]
   1326c:	ldr	r3, [pc, #60]	; 132b0 <__assert_fail@plt+0x1eec>
   13270:	bl	14ee8 <__assert_fail@plt+0x3b24>
   13274:	str	r0, [r4, #56]	; 0x38
   13278:	adds	r0, r0, #0
   1327c:	movne	r0, #1
   13280:	add	sp, sp, #8
   13284:	pop	{r4, pc}
   13288:	mov	r0, #32
   1328c:	bl	17cd0 <__assert_fail@plt+0x690c>
   13290:	cmp	r0, #0
   13294:	str	r0, [r4, #56]	; 0x38
   13298:	beq	13280 <__assert_fail@plt+0x1ebc>
   1329c:	bl	17db0 <__assert_fail@plt+0x69ec>
   132a0:	mov	r0, #1
   132a4:	b	13280 <__assert_fail@plt+0x1ebc>
   132a8:	andeq	r2, r1, r0, ror #20
   132ac:	andeq	r2, r1, ip, ror #21
   132b0:			; <UNDEFINED> instruction: 0x00012ab0
   132b4:	mov	r3, r0
   132b8:	movw	r2, #258	; 0x102
   132bc:	ldr	r0, [r0, #56]	; 0x38
   132c0:	ldr	r3, [r3, #48]	; 0x30
   132c4:	tst	r2, r3
   132c8:	beq	132d8 <__assert_fail@plt+0x1f14>
   132cc:	cmp	r0, #0
   132d0:	bxeq	lr
   132d4:	b	15050 <__assert_fail@plt+0x3c8c>
   132d8:	b	12a60 <__assert_fail@plt+0x169c>
   132dc:	ldr	r3, [r0, #48]	; 0x30
   132e0:	movw	r2, #258	; 0x102
   132e4:	push	{r4, r5, r6, lr}
   132e8:	mov	r6, r0
   132ec:	mov	r4, r1
   132f0:	tst	r2, r3
   132f4:	beq	13368 <__assert_fail@plt+0x1fa4>
   132f8:	mov	r0, #24
   132fc:	bl	17cd0 <__assert_fail@plt+0x690c>
   13300:	subs	r5, r0, #0
   13304:	bne	13310 <__assert_fail@plt+0x1f4c>
   13308:	mov	r0, #0
   1330c:	pop	{r4, r5, r6, pc}
   13310:	ldrd	r2, [r4, #64]	; 0x40
   13314:	mov	r1, r5
   13318:	ldr	r0, [r6, #56]	; 0x38
   1331c:	strd	r2, [r5]
   13320:	ldrd	r2, [r4, #160]	; 0xa0
   13324:	str	r4, [r5, #16]
   13328:	strd	r2, [r5, #8]
   1332c:	bl	153b0 <__assert_fail@plt+0x3fec>
   13330:	cmp	r5, r0
   13334:	mov	r6, r0
   13338:	bne	13344 <__assert_fail@plt+0x1f80>
   1333c:	mov	r0, #1
   13340:	pop	{r4, r5, r6, pc}
   13344:	mov	r0, r5
   13348:	bl	12a60 <__assert_fail@plt+0x169c>
   1334c:	cmp	r6, #0
   13350:	beq	13308 <__assert_fail@plt+0x1f44>
   13354:	ldr	r3, [r6, #16]
   13358:	str	r3, [r4]
   1335c:	mov	r3, #2
   13360:	strh	r3, [r4, #56]	; 0x38
   13364:	b	1333c <__assert_fail@plt+0x1f78>
   13368:	add	r1, r1, #64	; 0x40
   1336c:	ldr	r0, [r0, #56]	; 0x38
   13370:	bl	17dcc <__assert_fail@plt+0x6a08>
   13374:	cmp	r0, #0
   13378:	beq	1333c <__assert_fail@plt+0x1f78>
   1337c:	mov	r3, #2
   13380:	str	r4, [r4]
   13384:	strh	r3, [r4, #56]	; 0x38
   13388:	pop	{r4, r5, r6, pc}
   1338c:	ldr	r3, [r0, #48]	; 0x30
   13390:	mov	r2, r1
   13394:	movw	r1, #258	; 0x102
   13398:	push	{r4, r5, lr}
   1339c:	sub	sp, sp, #28
   133a0:	tst	r1, r3
   133a4:	beq	133dc <__assert_fail@plt+0x2018>
   133a8:	ldrd	r4, [r2, #64]	; 0x40
   133ac:	mov	r1, sp
   133b0:	ldrd	r2, [r2, #160]	; 0xa0
   133b4:	ldr	r0, [r0, #56]	; 0x38
   133b8:	strd	r4, [sp]
   133bc:	strd	r2, [sp, #8]
   133c0:	bl	153e0 <__assert_fail@plt+0x401c>
   133c4:	cmp	r0, #0
   133c8:	bne	133d0 <__assert_fail@plt+0x200c>
   133cc:	bl	1137c <abort@plt>
   133d0:	bl	12a60 <__assert_fail@plt+0x169c>
   133d4:	add	sp, sp, #28
   133d8:	pop	{r4, r5, pc}
   133dc:	ldr	ip, [r2, #4]
   133e0:	cmp	ip, #0
   133e4:	beq	133d4 <__assert_fail@plt+0x2010>
   133e8:	ldr	r3, [ip, #48]	; 0x30
   133ec:	cmp	r3, #0
   133f0:	blt	133d4 <__assert_fail@plt+0x2010>
   133f4:	ldr	r3, [r0, #56]	; 0x38
   133f8:	ldrd	r0, [r3, #16]
   133fc:	orrs	r1, r0, r1
   13400:	beq	133cc <__assert_fail@plt+0x2008>
   13404:	ldrd	r4, [r3]
   13408:	ldrd	r0, [r2, #160]	; 0xa0
   1340c:	cmp	r5, r1
   13410:	cmpeq	r4, r0
   13414:	bne	133d4 <__assert_fail@plt+0x2010>
   13418:	ldrd	r0, [r3, #8]
   1341c:	ldrd	r4, [r2, #64]	; 0x40
   13420:	cmp	r1, r5
   13424:	cmpeq	r0, r4
   13428:	ldrdeq	r0, [ip, #64]	; 0x40
   1342c:	strdeq	r0, [r3, #8]
   13430:	ldrdeq	r0, [ip, #160]	; 0xa0
   13434:	strdeq	r0, [r3]
   13438:	b	133d4 <__assert_fail@plt+0x2010>
   1343c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13440:	sub	sp, sp, #60	; 0x3c
   13444:	mov	r4, r0
   13448:	ldr	r5, [r0]
   1344c:	str	r1, [sp, #8]
   13450:	ldr	r3, [r5, #12]
   13454:	cmp	r3, #0
   13458:	str	r3, [sp]
   1345c:	beq	134b0 <__assert_fail@plt+0x20ec>
   13460:	mov	r0, r3
   13464:	bl	1131c <dirfd@plt>
   13468:	cmp	r0, #0
   1346c:	str	r0, [sp, #52]	; 0x34
   13470:	bge	13520 <__assert_fail@plt+0x215c>
   13474:	mov	r6, #0
   13478:	ldr	r0, [r5, #12]
   1347c:	bl	113a0 <closedir@plt>
   13480:	str	r6, [r5, #12]
   13484:	ldr	r3, [sp, #8]
   13488:	cmp	r3, #3
   1348c:	bne	136a8 <__assert_fail@plt+0x22e4>
   13490:	mov	r3, #4
   13494:	strh	r3, [r5, #56]	; 0x38
   13498:	bl	11268 <__errno_location@plt>
   1349c:	ldr	r3, [r0]
   134a0:	str	r3, [r5, #32]
   134a4:	mov	r0, r6
   134a8:	add	sp, sp, #60	; 0x3c
   134ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   134b0:	ldr	r3, [r0, #48]	; 0x30
   134b4:	ldr	r1, [r5, #24]
   134b8:	and	r2, r3, #516	; 0x204
   134bc:	cmp	r2, #512	; 0x200
   134c0:	ldreq	r0, [r0, #32]
   134c4:	mvnne	r0, #99	; 0x63
   134c8:	ands	r2, r3, #16
   134cc:	beq	134e8 <__assert_fail@plt+0x2124>
   134d0:	tst	r3, #1
   134d4:	moveq	r2, #32768	; 0x8000
   134d8:	beq	134e8 <__assert_fail@plt+0x2124>
   134dc:	ldr	r2, [r5, #48]	; 0x30
   134e0:	cmp	r2, #0
   134e4:	movne	r2, #32768	; 0x8000
   134e8:	add	r3, sp, #52	; 0x34
   134ec:	bl	15638 <__assert_fail@plt+0x4274>
   134f0:	cmp	r0, #0
   134f4:	mov	r6, r0
   134f8:	str	r0, [r5, #12]
   134fc:	beq	13484 <__assert_fail@plt+0x20c0>
   13500:	ldrh	r3, [r5, #56]	; 0x38
   13504:	cmp	r3, #11
   13508:	bne	136b0 <__assert_fail@plt+0x22ec>
   1350c:	mov	r2, #0
   13510:	mov	r1, r5
   13514:	mov	r0, r4
   13518:	bl	12b78 <__assert_fail@plt+0x17b4>
   1351c:	strh	r0, [r5, #56]	; 0x38
   13520:	ldr	r3, [r4, #44]	; 0x2c
   13524:	cmp	r3, #0
   13528:	ldr	r3, [pc, #1812]	; 13c44 <__assert_fail@plt+0x2880>
   1352c:	mvnne	r3, #0
   13530:	str	r3, [sp, #36]	; 0x24
   13534:	ldr	r3, [sp]
   13538:	cmp	r3, #0
   1353c:	beq	136fc <__assert_fail@plt+0x2338>
   13540:	mov	r3, #1
   13544:	str	r3, [sp, #24]
   13548:	ldr	r2, [r5, #28]
   1354c:	mov	r8, #0
   13550:	mov	r9, r8
   13554:	mov	r6, r8
   13558:	ldr	r3, [r5, #40]	; 0x28
   1355c:	str	r8, [sp, #20]
   13560:	str	r8, [sp, #32]
   13564:	sub	fp, r3, #1
   13568:	ldrb	r2, [r2, fp]
   1356c:	cmp	r2, #47	; 0x2f
   13570:	movne	fp, r3
   13574:	ldr	r3, [r4, #48]	; 0x30
   13578:	ands	r3, r3, #4
   1357c:	ldrne	r3, [r4, #24]
   13580:	streq	r3, [sp, #4]
   13584:	addne	r2, r3, fp
   13588:	addne	r2, r2, #1
   1358c:	strne	r2, [sp, #4]
   13590:	movne	r2, #47	; 0x2f
   13594:	strbne	r2, [r3, fp]
   13598:	add	r3, fp, #1
   1359c:	add	r2, fp, #1
   135a0:	str	r3, [sp, #16]
   135a4:	ldr	r3, [r4, #36]	; 0x24
   135a8:	sub	r3, r3, r2
   135ac:	str	r3, [sp, #28]
   135b0:	ldr	r3, [r5, #48]	; 0x30
   135b4:	add	r3, r3, #1
   135b8:	str	r3, [sp, #40]	; 0x28
   135bc:	ldr	r7, [r5, #12]
   135c0:	cmp	r7, #0
   135c4:	beq	13610 <__assert_fail@plt+0x224c>
   135c8:	bl	11268 <__errno_location@plt>
   135cc:	mov	r3, #0
   135d0:	str	r0, [sp, #12]
   135d4:	str	r3, [r0]
   135d8:	mov	r0, r7
   135dc:	bl	11304 <readdir64@plt>
   135e0:	subs	r3, r0, #0
   135e4:	bne	13840 <__assert_fail@plt+0x247c>
   135e8:	ldr	r3, [sp, #12]
   135ec:	ldr	r3, [r3]
   135f0:	cmp	r3, #0
   135f4:	beq	13610 <__assert_fail@plt+0x224c>
   135f8:	str	r3, [r5, #32]
   135fc:	ldr	r3, [sp]
   13600:	orrs	r3, r3, r9
   13604:	moveq	r3, #4
   13608:	movne	r3, #7
   1360c:	strh	r3, [r5, #56]	; 0x38
   13610:	ldr	r0, [r5, #12]
   13614:	cmp	r0, #0
   13618:	beq	13628 <__assert_fail@plt+0x2264>
   1361c:	bl	113a0 <closedir@plt>
   13620:	mov	r3, #0
   13624:	str	r3, [r5, #12]
   13628:	ldr	r3, [sp, #20]
   1362c:	cmp	r3, #0
   13630:	bne	13b00 <__assert_fail@plt+0x273c>
   13634:	ldr	r3, [r4, #48]	; 0x30
   13638:	tst	r3, #4
   1363c:	bne	13b7c <__assert_fail@plt+0x27b8>
   13640:	ldr	r2, [sp]
   13644:	ldr	r3, [sp, #24]
   13648:	cmp	r2, #0
   1364c:	movne	r3, #0
   13650:	cmp	r3, #0
   13654:	beq	13bc0 <__assert_fail@plt+0x27fc>
   13658:	ldr	r3, [sp, #8]
   1365c:	cmp	r9, #0
   13660:	cmpne	r3, #1
   13664:	bne	13bec <__assert_fail@plt+0x2828>
   13668:	ldr	r3, [r5, #48]	; 0x30
   1366c:	cmp	r3, #0
   13670:	bne	13ba8 <__assert_fail@plt+0x27e4>
   13674:	mov	r0, r4
   13678:	bl	12fec <__assert_fail@plt+0x1c28>
   1367c:	adds	r0, r0, #0
   13680:	movne	r0, #1
   13684:	cmp	r0, #0
   13688:	beq	13bc0 <__assert_fail@plt+0x27fc>
   1368c:	mov	r3, #7
   13690:	strh	r3, [r5, #56]	; 0x38
   13694:	ldr	r3, [r4, #48]	; 0x30
   13698:	orr	r3, r3, #8192	; 0x2000
   1369c:	str	r3, [r4, #48]	; 0x30
   136a0:	mov	r0, r6
   136a4:	bl	12e10 <__assert_fail@plt+0x1a4c>
   136a8:	mov	r6, #0
   136ac:	b	134a4 <__assert_fail@plt+0x20e0>
   136b0:	ldr	r3, [r4, #48]	; 0x30
   136b4:	tst	r3, #256	; 0x100
   136b8:	beq	13520 <__assert_fail@plt+0x215c>
   136bc:	mov	r1, r5
   136c0:	mov	r0, r4
   136c4:	bl	1338c <__assert_fail@plt+0x1fc8>
   136c8:	mov	r2, #0
   136cc:	mov	r1, r5
   136d0:	mov	r0, r4
   136d4:	bl	12b78 <__assert_fail@plt+0x17b4>
   136d8:	mov	r1, r5
   136dc:	mov	r0, r4
   136e0:	bl	132dc <__assert_fail@plt+0x1f18>
   136e4:	subs	r6, r0, #0
   136e8:	bne	13520 <__assert_fail@plt+0x215c>
   136ec:	bl	11268 <__errno_location@plt>
   136f0:	mov	r3, #12
   136f4:	str	r3, [r0]
   136f8:	b	134a4 <__assert_fail@plt+0x20e0>
   136fc:	ldr	r3, [sp, #8]
   13700:	cmp	r3, #2
   13704:	ldreq	r0, [sp]
   13708:	beq	1377c <__assert_fail@plt+0x23b8>
   1370c:	ldr	r3, [r4, #48]	; 0x30
   13710:	and	r3, r3, #56	; 0x38
   13714:	cmp	r3, #24
   13718:	bne	13758 <__assert_fail@plt+0x2394>
   1371c:	ldr	r3, [r5, #84]	; 0x54
   13720:	cmp	r3, #2
   13724:	bne	13758 <__assert_fail@plt+0x2394>
   13728:	mov	r0, r5
   1372c:	ldr	r1, [sp, #52]	; 0x34
   13730:	bl	12e74 <__assert_fail@plt+0x1ab0>
   13734:	movw	r3, #26985	; 0x6969
   13738:	cmp	r0, r3
   1373c:	beq	13758 <__assert_fail@plt+0x2394>
   13740:	bgt	13760 <__assert_fail@plt+0x239c>
   13744:	ldr	r3, [pc, #1276]	; 13c48 <__assert_fail@plt+0x2884>
   13748:	cmp	r0, r3
   1374c:	clzne	r0, r0
   13750:	lsrne	r0, r0, #5
   13754:	bne	1377c <__assert_fail@plt+0x23b8>
   13758:	mov	r0, #1
   1375c:	b	1377c <__assert_fail@plt+0x23b8>
   13760:	movw	r3, #40864	; 0x9fa0
   13764:	cmp	r0, r3
   13768:	beq	13758 <__assert_fail@plt+0x2394>
   1376c:	ldr	r3, [pc, #1240]	; 13c4c <__assert_fail@plt+0x2888>
   13770:	sub	r0, r0, r3
   13774:	clz	r0, r0
   13778:	lsr	r0, r0, #5
   1377c:	ldr	r3, [sp, #8]
   13780:	mov	r6, r0
   13784:	sub	r7, r3, #3
   13788:	clz	r7, r7
   1378c:	lsr	r7, r7, #5
   13790:	orrs	r3, r7, r0
   13794:	str	r3, [sp, #24]
   13798:	beq	13548 <__assert_fail@plt+0x2184>
   1379c:	ldr	r3, [r4, #48]	; 0x30
   137a0:	tst	r3, #512	; 0x200
   137a4:	beq	137bc <__assert_fail@plt+0x23f8>
   137a8:	mov	r2, #3
   137ac:	movw	r1, #1030	; 0x406
   137b0:	ldr	r0, [sp, #52]	; 0x34
   137b4:	bl	17f24 <__assert_fail@plt+0x6b60>
   137b8:	str	r0, [sp, #52]	; 0x34
   137bc:	ldr	r2, [sp, #52]	; 0x34
   137c0:	cmp	r2, #0
   137c4:	bge	13814 <__assert_fail@plt+0x2450>
   137c8:	tst	r7, r6
   137cc:	bne	13830 <__assert_fail@plt+0x246c>
   137d0:	ldrh	r3, [r5, #58]	; 0x3a
   137d4:	ldr	r0, [r5, #12]
   137d8:	orr	r3, r3, #1
   137dc:	strh	r3, [r5, #58]	; 0x3a
   137e0:	bl	113a0 <closedir@plt>
   137e4:	mov	r3, #0
   137e8:	str	r3, [r5, #12]
   137ec:	ldr	r3, [r4, #48]	; 0x30
   137f0:	tst	r3, #512	; 0x200
   137f4:	beq	13808 <__assert_fail@plt+0x2444>
   137f8:	ldr	r0, [sp, #52]	; 0x34
   137fc:	cmp	r0, #0
   13800:	blt	13808 <__assert_fail@plt+0x2444>
   13804:	bl	11388 <close@plt>
   13808:	mov	r3, #0
   1380c:	str	r3, [r5, #12]
   13810:	b	13544 <__assert_fail@plt+0x2180>
   13814:	mov	r3, #0
   13818:	mov	r1, r5
   1381c:	mov	r0, r4
   13820:	bl	1303c <__assert_fail@plt+0x1c78>
   13824:	cmp	r0, #0
   13828:	bne	137c8 <__assert_fail@plt+0x2404>
   1382c:	b	13540 <__assert_fail@plt+0x217c>
   13830:	bl	11268 <__errno_location@plt>
   13834:	ldr	r3, [r0]
   13838:	str	r3, [r5, #32]
   1383c:	b	137d0 <__assert_fail@plt+0x240c>
   13840:	ldr	r2, [r4, #48]	; 0x30
   13844:	tst	r2, #32
   13848:	bne	13870 <__assert_fail@plt+0x24ac>
   1384c:	ldrb	r2, [r3, #19]
   13850:	cmp	r2, #46	; 0x2e
   13854:	bne	13870 <__assert_fail@plt+0x24ac>
   13858:	ldrb	r2, [r3, #20]
   1385c:	cmp	r2, #0
   13860:	beq	135bc <__assert_fail@plt+0x21f8>
   13864:	ldrh	r2, [r3, #20]
   13868:	cmp	r2, #46	; 0x2e
   1386c:	beq	135bc <__assert_fail@plt+0x21f8>
   13870:	add	r7, r3, #19
   13874:	str	r3, [sp, #44]	; 0x2c
   13878:	mov	r0, r7
   1387c:	bl	11238 <strlen@plt>
   13880:	mov	r2, r0
   13884:	mov	r1, r7
   13888:	mov	sl, r0
   1388c:	mov	r0, r4
   13890:	bl	12d68 <__assert_fail@plt+0x19a4>
   13894:	subs	r7, r0, #0
   13898:	beq	138d4 <__assert_fail@plt+0x2510>
   1389c:	ldr	r3, [sp, #28]
   138a0:	cmp	r3, sl
   138a4:	ldr	r3, [sp, #44]	; 0x2c
   138a8:	bhi	13954 <__assert_fail@plt+0x2590>
   138ac:	ldr	r2, [r4, #24]
   138b0:	add	r1, fp, #2
   138b4:	mov	r0, r4
   138b8:	add	r1, r1, sl
   138bc:	str	r2, [sp, #28]
   138c0:	bl	131d8 <__assert_fail@plt+0x1e14>
   138c4:	cmp	r0, #0
   138c8:	ldr	r2, [sp, #28]
   138cc:	ldr	r3, [sp, #44]	; 0x2c
   138d0:	bne	1391c <__assert_fail@plt+0x2558>
   138d4:	ldr	r3, [sp, #12]
   138d8:	mov	r0, r7
   138dc:	ldr	r8, [r3]
   138e0:	bl	12a60 <__assert_fail@plt+0x169c>
   138e4:	mov	r0, r6
   138e8:	mov	r6, #0
   138ec:	bl	12e10 <__assert_fail@plt+0x1a4c>
   138f0:	ldr	r0, [r5, #12]
   138f4:	bl	113a0 <closedir@plt>
   138f8:	mov	r3, #7
   138fc:	str	r6, [r5, #12]
   13900:	strh	r3, [r5, #56]	; 0x38
   13904:	ldr	r3, [r4, #48]	; 0x30
   13908:	orr	r3, r3, #8192	; 0x2000
   1390c:	str	r3, [r4, #48]	; 0x30
   13910:	ldr	r3, [sp, #12]
   13914:	str	r8, [r3]
   13918:	b	134a4 <__assert_fail@plt+0x20e0>
   1391c:	ldr	r1, [r4, #24]
   13920:	cmp	r1, r2
   13924:	ldreq	r0, [sp, #20]
   13928:	beq	13940 <__assert_fail@plt+0x257c>
   1392c:	ldr	r2, [r4, #48]	; 0x30
   13930:	tst	r2, #4
   13934:	ldrne	r2, [sp, #16]
   13938:	addne	r2, r1, r2
   1393c:	strne	r2, [sp, #4]
   13940:	ldr	r1, [sp, #16]
   13944:	str	r0, [sp, #20]
   13948:	ldr	r2, [r4, #36]	; 0x24
   1394c:	sub	r2, r2, r1
   13950:	str	r2, [sp, #28]
   13954:	ldr	r2, [sp, #16]
   13958:	adds	r2, r2, sl
   1395c:	movcs	sl, #1
   13960:	movcc	sl, #0
   13964:	bcc	139ac <__assert_fail@plt+0x25e8>
   13968:	mov	r0, r7
   1396c:	bl	12a60 <__assert_fail@plt+0x169c>
   13970:	mov	r0, r6
   13974:	mov	r6, #0
   13978:	bl	12e10 <__assert_fail@plt+0x1a4c>
   1397c:	ldr	r0, [r5, #12]
   13980:	bl	113a0 <closedir@plt>
   13984:	mov	r3, #7
   13988:	ldr	r2, [sp, #12]
   1398c:	str	r6, [r5, #12]
   13990:	strh	r3, [r5, #56]	; 0x38
   13994:	ldr	r3, [r4, #48]	; 0x30
   13998:	orr	r3, r3, #8192	; 0x2000
   1399c:	str	r3, [r4, #48]	; 0x30
   139a0:	mov	r3, #36	; 0x24
   139a4:	str	r3, [r2]
   139a8:	b	134a4 <__assert_fail@plt+0x20e0>
   139ac:	ldr	r1, [sp, #40]	; 0x28
   139b0:	str	r1, [r7, #48]	; 0x30
   139b4:	ldr	r1, [r4]
   139b8:	str	r1, [r7, #4]
   139bc:	str	r2, [r7, #40]	; 0x28
   139c0:	ldrd	r0, [r3]
   139c4:	ldr	r2, [r4, #48]	; 0x30
   139c8:	strd	r0, [r7, #160]	; 0xa0
   139cc:	add	r1, r7, #168	; 0xa8
   139d0:	tst	r2, #4
   139d4:	streq	r1, [r7, #24]
   139d8:	beq	139fc <__assert_fail@plt+0x2638>
   139dc:	ldr	r2, [r7, #28]
   139e0:	str	r3, [sp, #12]
   139e4:	ldr	r0, [sp, #4]
   139e8:	str	r2, [r7, #24]
   139ec:	ldr	r2, [r7, #52]	; 0x34
   139f0:	add	r2, r2, #1
   139f4:	bl	110c4 <memmove@plt>
   139f8:	ldr	r3, [sp, #12]
   139fc:	ldr	r2, [r4, #44]	; 0x2c
   13a00:	ldr	r1, [r4, #48]	; 0x30
   13a04:	cmp	r2, #0
   13a08:	beq	13a14 <__assert_fail@plt+0x2650>
   13a0c:	ands	r2, r1, #1024	; 0x400
   13a10:	beq	13ae4 <__assert_fail@plt+0x2720>
   13a14:	ands	r2, r1, #8
   13a18:	ldrb	r3, [r3, #18]
   13a1c:	beq	13a38 <__assert_fail@plt+0x2674>
   13a20:	ands	r2, r3, #251	; 0xfb
   13a24:	beq	13a38 <__assert_fail@plt+0x2674>
   13a28:	ubfx	r1, r1, #4, #1
   13a2c:	cmp	r3, #10
   13a30:	moveq	r2, r1
   13a34:	orrne	r2, r1, #1
   13a38:	mov	r1, #11
   13a3c:	sub	r3, r3, #1
   13a40:	cmp	r3, r1
   13a44:	strh	r1, [r7, #56]	; 0x38
   13a48:	lslls	r3, r3, #1
   13a4c:	ldrls	r1, [pc, #508]	; 13c50 <__assert_fail@plt+0x288c>
   13a50:	ldrhls	sl, [r1, r3]
   13a54:	cmp	r2, #0
   13a58:	mov	r3, #0
   13a5c:	movne	r2, #1
   13a60:	moveq	r2, #2
   13a64:	str	sl, [r7, #80]	; 0x50
   13a68:	strd	r2, [r7, #112]	; 0x70
   13a6c:	mov	r3, #0
   13a70:	cmp	r6, r3
   13a74:	str	r3, [r7, #8]
   13a78:	moveq	r6, r7
   13a7c:	ldrne	r3, [sp, #32]
   13a80:	strne	r7, [r3, #8]
   13a84:	movw	r3, #10000	; 0x2710
   13a88:	cmp	r9, r3
   13a8c:	bne	13acc <__assert_fail@plt+0x2708>
   13a90:	ldr	sl, [r4, #44]	; 0x2c
   13a94:	cmp	sl, #0
   13a98:	bne	13acc <__assert_fail@plt+0x2708>
   13a9c:	mov	r0, r5
   13aa0:	ldr	r1, [sp, #52]	; 0x34
   13aa4:	bl	12e74 <__assert_fail@plt+0x1ab0>
   13aa8:	movw	r3, #26985	; 0x6969
   13aac:	cmp	r0, r3
   13ab0:	beq	13af8 <__assert_fail@plt+0x2734>
   13ab4:	ldr	r3, [pc, #408]	; 13c54 <__assert_fail@plt+0x2890>
   13ab8:	cmp	r0, r3
   13abc:	beq	13af8 <__assert_fail@plt+0x2734>
   13ac0:	ldr	r3, [pc, #384]	; 13c48 <__assert_fail@plt+0x2884>
   13ac4:	subs	r8, r0, r3
   13ac8:	movne	r8, #1
   13acc:	ldr	r3, [sp, #36]	; 0x24
   13ad0:	add	r9, r9, #1
   13ad4:	cmp	r3, r9
   13ad8:	bls	13628 <__assert_fail@plt+0x2264>
   13adc:	str	r7, [sp, #32]
   13ae0:	b	135bc <__assert_fail@plt+0x21f8>
   13ae4:	mov	r1, r7
   13ae8:	mov	r0, r4
   13aec:	bl	12b78 <__assert_fail@plt+0x17b4>
   13af0:	strh	r0, [r7, #56]	; 0x38
   13af4:	b	13a6c <__assert_fail@plt+0x26a8>
   13af8:	mov	r8, sl
   13afc:	b	13acc <__assert_fail@plt+0x2708>
   13b00:	ldr	r3, [r4, #4]
   13b04:	ldr	r1, [r4, #24]
   13b08:	cmp	r3, #0
   13b0c:	bne	13b54 <__assert_fail@plt+0x2790>
   13b10:	mov	r3, r6
   13b14:	ldr	r2, [r3, #48]	; 0x30
   13b18:	cmp	r2, #0
   13b1c:	blt	13634 <__assert_fail@plt+0x2270>
   13b20:	ldr	r2, [r3, #24]
   13b24:	add	r0, r3, #168	; 0xa8
   13b28:	cmp	r2, r0
   13b2c:	ldrne	r0, [r3, #28]
   13b30:	str	r1, [r3, #28]
   13b34:	subne	r2, r2, r0
   13b38:	addne	r2, r1, r2
   13b3c:	strne	r2, [r3, #24]
   13b40:	ldr	r2, [r3, #8]
   13b44:	cmp	r2, #0
   13b48:	ldreq	r2, [r3, #4]
   13b4c:	mov	r3, r2
   13b50:	b	13b14 <__assert_fail@plt+0x2750>
   13b54:	ldr	r2, [r3, #24]
   13b58:	add	r0, r3, #168	; 0xa8
   13b5c:	cmp	r2, r0
   13b60:	ldrne	r0, [r3, #28]
   13b64:	str	r1, [r3, #28]
   13b68:	subne	r2, r2, r0
   13b6c:	addne	r2, r1, r2
   13b70:	strne	r2, [r3, #24]
   13b74:	ldr	r3, [r3, #8]
   13b78:	b	13b08 <__assert_fail@plt+0x2744>
   13b7c:	ldr	r2, [sp, #16]
   13b80:	ldr	r3, [r4, #36]	; 0x24
   13b84:	cmp	r9, #0
   13b88:	cmpne	r3, r2
   13b8c:	ldreq	r3, [sp, #4]
   13b90:	subeq	r3, r3, #1
   13b94:	streq	r3, [sp, #4]
   13b98:	mov	r3, #0
   13b9c:	ldr	r2, [sp, #4]
   13ba0:	strb	r3, [r2]
   13ba4:	b	13640 <__assert_fail@plt+0x227c>
   13ba8:	ldr	r3, [pc, #168]	; 13c58 <__assert_fail@plt+0x2894>
   13bac:	mvn	r2, #0
   13bb0:	mov	r0, r4
   13bb4:	ldr	r1, [r5, #4]
   13bb8:	bl	1303c <__assert_fail@plt+0x1c78>
   13bbc:	b	1367c <__assert_fail@plt+0x22b8>
   13bc0:	cmp	r9, #0
   13bc4:	bne	13bec <__assert_fail@plt+0x2828>
   13bc8:	ldr	r3, [sp, #8]
   13bcc:	cmp	r3, #3
   13bd0:	bne	136a0 <__assert_fail@plt+0x22dc>
   13bd4:	ldrh	r3, [r5, #56]	; 0x38
   13bd8:	cmp	r3, #4
   13bdc:	cmpne	r3, #7
   13be0:	movne	r3, #6
   13be4:	strhne	r3, [r5, #56]	; 0x38
   13be8:	b	136a0 <__assert_fail@plt+0x22dc>
   13bec:	cmp	r8, #0
   13bf0:	beq	13c1c <__assert_fail@plt+0x2858>
   13bf4:	ldr	r3, [pc, #96]	; 13c5c <__assert_fail@plt+0x2898>
   13bf8:	mov	r1, r6
   13bfc:	mov	r2, r9
   13c00:	mov	r0, r4
   13c04:	str	r3, [r4, #44]	; 0x2c
   13c08:	bl	12cb0 <__assert_fail@plt+0x18ec>
   13c0c:	mov	r3, #0
   13c10:	mov	r6, r0
   13c14:	str	r3, [r4, #44]	; 0x2c
   13c18:	b	134a4 <__assert_fail@plt+0x20e0>
   13c1c:	ldr	r3, [r4, #44]	; 0x2c
   13c20:	cmp	r3, #0
   13c24:	cmpne	r9, #1
   13c28:	beq	134a4 <__assert_fail@plt+0x20e0>
   13c2c:	mov	r1, r6
   13c30:	mov	r2, r9
   13c34:	mov	r0, r4
   13c38:	bl	12cb0 <__assert_fail@plt+0x18ec>
   13c3c:	mov	r6, r0
   13c40:	b	134a4 <__assert_fail@plt+0x20e0>
   13c44:	andeq	r8, r1, r0, lsr #13
   13c48:			; <UNDEFINED> instruction: 0xff534d42
   13c4c:	movtpl	r4, #24911	; 0x614f
   13c50:	andeq	r9, r1, sl, asr #13
   13c54:			; <UNDEFINED> instruction: 0x01021994
   13c58:	andeq	r9, r1, r2, ror #13
   13c5c:	andeq	r2, r1, r4, asr #22
   13c60:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13c64:	bic	r4, r1, #4080	; 0xff0
   13c68:	bic	r4, r4, #15
   13c6c:	cmp	r4, #0
   13c70:	str	r0, [sp]
   13c74:	beq	13c8c <__assert_fail@plt+0x28c8>
   13c78:	bl	11268 <__errno_location@plt>
   13c7c:	mov	r3, #22
   13c80:	str	r3, [r0]
   13c84:	mov	r4, #0
   13c88:	b	13ca8 <__assert_fail@plt+0x28e4>
   13c8c:	and	r3, r1, #516	; 0x204
   13c90:	mov	r6, r1
   13c94:	cmp	r3, #516	; 0x204
   13c98:	bne	13cb4 <__assert_fail@plt+0x28f0>
   13c9c:	bl	11268 <__errno_location@plt>
   13ca0:	mov	r3, #22
   13ca4:	str	r3, [r0]
   13ca8:	mov	r0, r4
   13cac:	add	sp, sp, #12
   13cb0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13cb4:	ands	r4, r1, #18
   13cb8:	beq	13c9c <__assert_fail@plt+0x28d8>
   13cbc:	mov	r1, #96	; 0x60
   13cc0:	mov	r0, #1
   13cc4:	mov	sl, r2
   13cc8:	bl	17c7c <__assert_fail@plt+0x68b8>
   13ccc:	subs	r4, r0, #0
   13cd0:	beq	13ca8 <__assert_fail@plt+0x28e4>
   13cd4:	tst	r6, #2
   13cd8:	mov	r5, #0
   13cdc:	str	sl, [r4, #44]	; 0x2c
   13ce0:	bicne	r3, r6, #512	; 0x200
   13ce4:	orrne	r3, r3, #4
   13ce8:	streq	r6, [r4, #48]	; 0x30
   13cec:	strne	r3, [r4, #48]	; 0x30
   13cf0:	mvn	r3, #99	; 0x63
   13cf4:	str	r3, [r4, #32]
   13cf8:	ldr	r3, [sp]
   13cfc:	sub	r8, r3, #4
   13d00:	ldr	r7, [r8, #4]!
   13d04:	cmp	r7, #0
   13d08:	bne	13e2c <__assert_fail@plt+0x2a68>
   13d0c:	add	r1, r5, #1
   13d10:	mov	r0, r4
   13d14:	cmp	r1, #4096	; 0x1000
   13d18:	movcc	r1, #4096	; 0x1000
   13d1c:	bl	131d8 <__assert_fail@plt+0x1e14>
   13d20:	cmp	r0, #0
   13d24:	beq	13f3c <__assert_fail@plt+0x2b78>
   13d28:	ldr	r3, [sp]
   13d2c:	ldr	r8, [r3]
   13d30:	cmp	r8, #0
   13d34:	beq	13d58 <__assert_fail@plt+0x2994>
   13d38:	mov	r2, r7
   13d3c:	ldr	r1, [pc, #516]	; 13f48 <__assert_fail@plt+0x2b84>
   13d40:	mov	r0, r4
   13d44:	bl	12d68 <__assert_fail@plt+0x19a4>
   13d48:	subs	r8, r0, #0
   13d4c:	beq	13f34 <__assert_fail@plt+0x2b70>
   13d50:	mvn	r3, #0
   13d54:	str	r3, [r8, #48]	; 0x30
   13d58:	cmp	sl, #0
   13d5c:	eor	r6, r6, #2048	; 0x800
   13d60:	ldrne	r3, [r4, #48]	; 0x30
   13d64:	mov	fp, #0
   13d68:	ubfx	r6, r6, #11, #1
   13d6c:	moveq	r3, #1
   13d70:	mov	r7, fp
   13d74:	mov	r9, fp
   13d78:	ubfxne	r3, r3, #10, #1
   13d7c:	str	r3, [sp, #4]
   13d80:	ldr	r3, [sp]
   13d84:	ldr	r5, [r3, r9, lsl #2]
   13d88:	cmp	r5, #0
   13d8c:	bne	13e40 <__assert_fail@plt+0x2a7c>
   13d90:	cmp	sl, #0
   13d94:	cmpne	r9, #1
   13d98:	bls	13db0 <__assert_fail@plt+0x29ec>
   13d9c:	mov	r1, r7
   13da0:	mov	r2, r9
   13da4:	mov	r0, r4
   13da8:	bl	12cb0 <__assert_fail@plt+0x18ec>
   13dac:	mov	r7, r0
   13db0:	mov	r2, #0
   13db4:	ldr	r1, [pc, #396]	; 13f48 <__assert_fail@plt+0x2b84>
   13db8:	mov	r0, r4
   13dbc:	bl	12d68 <__assert_fail@plt+0x19a4>
   13dc0:	cmp	r0, #0
   13dc4:	str	r0, [r4]
   13dc8:	beq	13f24 <__assert_fail@plt+0x2b60>
   13dcc:	mov	r3, #9
   13dd0:	str	r7, [r0, #8]
   13dd4:	strh	r3, [r0, #56]	; 0x38
   13dd8:	mov	r3, #1
   13ddc:	str	r3, [r0, #48]	; 0x30
   13de0:	mov	r0, r4
   13de4:	bl	13240 <__assert_fail@plt+0x1e7c>
   13de8:	cmp	r0, #0
   13dec:	beq	13f24 <__assert_fail@plt+0x2b60>
   13df0:	ldr	r3, [r4, #48]	; 0x30
   13df4:	tst	r3, #516	; 0x204
   13df8:	bne	13e1c <__assert_fail@plt+0x2a58>
   13dfc:	ldr	r1, [pc, #328]	; 13f4c <__assert_fail@plt+0x2b88>
   13e00:	mov	r0, r4
   13e04:	bl	12ddc <__assert_fail@plt+0x1a18>
   13e08:	cmp	r0, #0
   13e0c:	str	r0, [r4, #28]
   13e10:	ldrlt	r3, [r4, #48]	; 0x30
   13e14:	orrlt	r3, r3, #4
   13e18:	strlt	r3, [r4, #48]	; 0x30
   13e1c:	mvn	r1, #0
   13e20:	add	r0, r4, #60	; 0x3c
   13e24:	bl	154dc <__assert_fail@plt+0x4118>
   13e28:	b	13ca8 <__assert_fail@plt+0x28e4>
   13e2c:	mov	r0, r7
   13e30:	bl	11238 <strlen@plt>
   13e34:	cmp	r5, r0
   13e38:	movcc	r5, r0
   13e3c:	b	13d00 <__assert_fail@plt+0x293c>
   13e40:	mov	r0, r5
   13e44:	bl	11238 <strlen@plt>
   13e48:	cmp	r0, #2
   13e4c:	movls	r1, #0
   13e50:	andhi	r1, r6, #1
   13e54:	mov	r2, r0
   13e58:	cmp	r1, #0
   13e5c:	beq	13e74 <__assert_fail@plt+0x2ab0>
   13e60:	add	r1, r5, r0
   13e64:	ldrb	r1, [r1, #-1]
   13e68:	cmp	r1, #47	; 0x2f
   13e6c:	subeq	r0, r5, #2
   13e70:	beq	13f00 <__assert_fail@plt+0x2b3c>
   13e74:	mov	r1, r5
   13e78:	mov	r0, r4
   13e7c:	bl	12d68 <__assert_fail@plt+0x19a4>
   13e80:	subs	r5, r0, #0
   13e84:	beq	13f24 <__assert_fail@plt+0x2b60>
   13e88:	mov	r2, #0
   13e8c:	cmp	r7, #0
   13e90:	str	r8, [r5, #4]
   13e94:	str	r2, [r5, #48]	; 0x30
   13e98:	add	r2, r5, #168	; 0xa8
   13e9c:	str	r2, [r5, #24]
   13ea0:	ldr	r2, [sp, #4]
   13ea4:	moveq	r2, #0
   13ea8:	cmp	r2, #0
   13eac:	beq	13f10 <__assert_fail@plt+0x2b4c>
   13eb0:	mov	r2, #11
   13eb4:	mov	r0, #2
   13eb8:	mov	r1, #0
   13ebc:	strh	r2, [r5, #56]	; 0x38
   13ec0:	strd	r0, [r5, #112]	; 0x70
   13ec4:	cmp	sl, #0
   13ec8:	strne	r7, [r5, #8]
   13ecc:	bne	13ee8 <__assert_fail@plt+0x2b24>
   13ed0:	cmp	r7, #0
   13ed4:	str	sl, [r5, #8]
   13ed8:	moveq	fp, r5
   13edc:	strne	r5, [fp, #8]
   13ee0:	movne	fp, r5
   13ee4:	movne	r5, r7
   13ee8:	add	r9, r9, #1
   13eec:	mov	r7, r5
   13ef0:	b	13d80 <__assert_fail@plt+0x29bc>
   13ef4:	sub	r2, r2, #1
   13ef8:	cmp	r2, #1
   13efc:	beq	13e74 <__assert_fail@plt+0x2ab0>
   13f00:	ldrb	r1, [r0, r2]
   13f04:	cmp	r1, #47	; 0x2f
   13f08:	beq	13ef4 <__assert_fail@plt+0x2b30>
   13f0c:	b	13e74 <__assert_fail@plt+0x2ab0>
   13f10:	mov	r1, r5
   13f14:	mov	r0, r4
   13f18:	bl	12b78 <__assert_fail@plt+0x17b4>
   13f1c:	strh	r0, [r5, #56]	; 0x38
   13f20:	b	13ec4 <__assert_fail@plt+0x2b00>
   13f24:	mov	r0, r7
   13f28:	bl	12e10 <__assert_fail@plt+0x1a4c>
   13f2c:	mov	r0, r8
   13f30:	bl	12a60 <__assert_fail@plt+0x169c>
   13f34:	ldr	r0, [r4, #24]
   13f38:	bl	12a60 <__assert_fail@plt+0x169c>
   13f3c:	mov	r0, r4
   13f40:	bl	12a60 <__assert_fail@plt+0x169c>
   13f44:	b	13c84 <__assert_fail@plt+0x28c0>
   13f48:	andeq	r8, r1, sl, asr #29
   13f4c:	andeq	r9, r1, r3, ror #13
   13f50:	push	{r4, r5, r6, lr}
   13f54:	mov	r4, r0
   13f58:	ldr	r0, [r0]
   13f5c:	cmp	r0, #0
   13f60:	bne	13ff8 <__assert_fail@plt+0x2c34>
   13f64:	ldr	r0, [r4, #4]
   13f68:	cmp	r0, #0
   13f6c:	beq	13f74 <__assert_fail@plt+0x2bb0>
   13f70:	bl	12e10 <__assert_fail@plt+0x1a4c>
   13f74:	ldr	r0, [r4, #8]
   13f78:	bl	12a60 <__assert_fail@plt+0x169c>
   13f7c:	ldr	r0, [r4, #24]
   13f80:	bl	12a60 <__assert_fail@plt+0x169c>
   13f84:	ldr	r3, [r4, #48]	; 0x30
   13f88:	tst	r3, #512	; 0x200
   13f8c:	beq	14024 <__assert_fail@plt+0x2c60>
   13f90:	ldr	r0, [r4, #32]
   13f94:	cmp	r0, #0
   13f98:	bge	1400c <__assert_fail@plt+0x2c48>
   13f9c:	mov	r5, #0
   13fa0:	add	r0, r4, #60	; 0x3c
   13fa4:	bl	12e44 <__assert_fail@plt+0x1a80>
   13fa8:	ldr	r0, [r4, #52]	; 0x34
   13fac:	cmp	r0, #0
   13fb0:	beq	13fb8 <__assert_fail@plt+0x2bf4>
   13fb4:	bl	15050 <__assert_fail@plt+0x3c8c>
   13fb8:	mov	r0, r4
   13fbc:	bl	132b4 <__assert_fail@plt+0x1ef0>
   13fc0:	mov	r0, r4
   13fc4:	bl	12a60 <__assert_fail@plt+0x169c>
   13fc8:	cmp	r5, #0
   13fcc:	beq	13fdc <__assert_fail@plt+0x2c18>
   13fd0:	bl	11268 <__errno_location@plt>
   13fd4:	str	r5, [r0]
   13fd8:	mvn	r5, #0
   13fdc:	mov	r0, r5
   13fe0:	pop	{r4, r5, r6, pc}
   13fe4:	ldr	r5, [r0, #8]
   13fe8:	cmp	r5, #0
   13fec:	ldreq	r5, [r0, #4]
   13ff0:	bl	12a60 <__assert_fail@plt+0x169c>
   13ff4:	mov	r0, r5
   13ff8:	ldr	r3, [r0, #48]	; 0x30
   13ffc:	cmp	r3, #0
   14000:	bge	13fe4 <__assert_fail@plt+0x2c20>
   14004:	bl	12a60 <__assert_fail@plt+0x169c>
   14008:	b	13f64 <__assert_fail@plt+0x2ba0>
   1400c:	bl	11388 <close@plt>
   14010:	cmp	r0, #0
   14014:	beq	13f9c <__assert_fail@plt+0x2bd8>
   14018:	bl	11268 <__errno_location@plt>
   1401c:	ldr	r5, [r0]
   14020:	b	13fa0 <__assert_fail@plt+0x2bdc>
   14024:	tst	r3, #4
   14028:	bne	13f9c <__assert_fail@plt+0x2bd8>
   1402c:	ldr	r0, [r4, #28]
   14030:	bl	11328 <fchdir@plt>
   14034:	subs	r5, r0, #0
   14038:	beq	14044 <__assert_fail@plt+0x2c80>
   1403c:	bl	11268 <__errno_location@plt>
   14040:	ldr	r5, [r0]
   14044:	ldr	r0, [r4, #28]
   14048:	bl	11388 <close@plt>
   1404c:	adds	r0, r0, #0
   14050:	movne	r0, #1
   14054:	cmp	r5, #0
   14058:	movne	r0, #0
   1405c:	cmp	r0, #0
   14060:	beq	13fa0 <__assert_fail@plt+0x2bdc>
   14064:	b	14018 <__assert_fail@plt+0x2c54>
   14068:	push	{r4, r5, r6, r7, r8, lr}
   1406c:	ldr	r4, [r0]
   14070:	cmp	r4, #0
   14074:	bne	14084 <__assert_fail@plt+0x2cc0>
   14078:	mov	r4, #0
   1407c:	mov	r0, r4
   14080:	pop	{r4, r5, r6, r7, r8, pc}
   14084:	ldr	r1, [r0, #48]	; 0x30
   14088:	mov	r5, r0
   1408c:	ands	r2, r1, #8192	; 0x2000
   14090:	bne	14078 <__assert_fail@plt+0x2cb4>
   14094:	ldrh	ip, [r4, #60]	; 0x3c
   14098:	mov	r3, #3
   1409c:	strh	r3, [r4, #60]	; 0x3c
   140a0:	cmp	ip, #1
   140a4:	bne	140b8 <__assert_fail@plt+0x2cf4>
   140a8:	mov	r1, r4
   140ac:	bl	12b78 <__assert_fail@plt+0x17b4>
   140b0:	strh	r0, [r4, #56]	; 0x38
   140b4:	b	1407c <__assert_fail@plt+0x2cb8>
   140b8:	cmp	ip, #2
   140bc:	ldrh	r3, [r4, #56]	; 0x38
   140c0:	bne	141a0 <__assert_fail@plt+0x2ddc>
   140c4:	sub	r2, r3, #12
   140c8:	cmp	r2, #1
   140cc:	bhi	14594 <__assert_fail@plt+0x31d0>
   140d0:	mov	r2, #1
   140d4:	mov	r1, r4
   140d8:	bl	12b78 <__assert_fail@plt+0x17b4>
   140dc:	cmp	r0, #1
   140e0:	strh	r0, [r4, #56]	; 0x38
   140e4:	bne	1412c <__assert_fail@plt+0x2d68>
   140e8:	ldr	r3, [r5, #48]	; 0x30
   140ec:	tst	r3, #4
   140f0:	bne	1412c <__assert_fail@plt+0x2d68>
   140f4:	ldr	r1, [pc, #1320]	; 14624 <__assert_fail@plt+0x3260>
   140f8:	mov	r0, r5
   140fc:	bl	12ddc <__assert_fail@plt+0x1a18>
   14100:	cmp	r0, #0
   14104:	str	r0, [r4, #36]	; 0x24
   14108:	ldrhge	r3, [r4, #58]	; 0x3a
   1410c:	orrge	r3, r3, #2
   14110:	strhge	r3, [r4, #58]	; 0x3a
   14114:	bge	1412c <__assert_fail@plt+0x2d68>
   14118:	bl	11268 <__errno_location@plt>
   1411c:	ldr	r3, [r0]
   14120:	str	r3, [r4, #32]
   14124:	mov	r3, #7
   14128:	strh	r3, [r4, #56]	; 0x38
   1412c:	ldrh	r3, [r4, #56]	; 0x38
   14130:	str	r4, [r5]
   14134:	cmp	r3, #11
   14138:	bne	14160 <__assert_fail@plt+0x2d9c>
   1413c:	ldrd	r2, [r4, #112]	; 0x70
   14140:	cmp	r3, #0
   14144:	cmpeq	r2, #2
   14148:	bne	143dc <__assert_fail@plt+0x3018>
   1414c:	mov	r2, #0
   14150:	mov	r1, r4
   14154:	mov	r0, r5
   14158:	bl	12b78 <__assert_fail@plt+0x17b4>
   1415c:	strh	r0, [r4, #56]	; 0x38
   14160:	ldrh	r3, [r4, #56]	; 0x38
   14164:	cmp	r3, #1
   14168:	bne	1407c <__assert_fail@plt+0x2cb8>
   1416c:	ldr	r3, [r4, #48]	; 0x30
   14170:	mov	r0, r5
   14174:	mov	r1, r4
   14178:	cmp	r3, #0
   1417c:	ldrdeq	r2, [r4, #64]	; 0x40
   14180:	strdeq	r2, [r5, #16]
   14184:	bl	132dc <__assert_fail@plt+0x1f18>
   14188:	subs	r5, r0, #0
   1418c:	bne	1407c <__assert_fail@plt+0x2cb8>
   14190:	bl	11268 <__errno_location@plt>
   14194:	mov	r3, #12
   14198:	str	r3, [r0]
   1419c:	b	14078 <__assert_fail@plt+0x2cb4>
   141a0:	cmp	r3, #1
   141a4:	bne	1459c <__assert_fail@plt+0x31d8>
   141a8:	cmp	ip, #4
   141ac:	beq	141cc <__assert_fail@plt+0x2e08>
   141b0:	tst	r1, #64	; 0x40
   141b4:	beq	14210 <__assert_fail@plt+0x2e4c>
   141b8:	ldrd	r2, [r5, #16]
   141bc:	ldrd	r6, [r4, #64]	; 0x40
   141c0:	cmp	r7, r3
   141c4:	cmpeq	r6, r2
   141c8:	beq	14210 <__assert_fail@plt+0x2e4c>
   141cc:	ldrh	r3, [r4, #58]	; 0x3a
   141d0:	tst	r3, #2
   141d4:	beq	141e0 <__assert_fail@plt+0x2e1c>
   141d8:	ldr	r0, [r4, #36]	; 0x24
   141dc:	bl	11388 <close@plt>
   141e0:	ldr	r0, [r5, #4]
   141e4:	cmp	r0, #0
   141e8:	beq	141f8 <__assert_fail@plt+0x2e34>
   141ec:	bl	12e10 <__assert_fail@plt+0x1a4c>
   141f0:	mov	r3, #0
   141f4:	str	r3, [r5, #4]
   141f8:	mov	r3, #6
   141fc:	strh	r3, [r4, #56]	; 0x38
   14200:	mov	r1, r4
   14204:	mov	r0, r5
   14208:	bl	1338c <__assert_fail@plt+0x1fc8>
   1420c:	b	1407c <__assert_fail@plt+0x2cb8>
   14210:	ldr	r0, [r5, #4]
   14214:	cmp	r0, #0
   14218:	beq	14238 <__assert_fail@plt+0x2e74>
   1421c:	tst	r1, #4096	; 0x1000
   14220:	beq	14504 <__assert_fail@plt+0x3140>
   14224:	bic	r1, r1, #4096	; 0x1000
   14228:	str	r1, [r5, #48]	; 0x30
   1422c:	bl	12e10 <__assert_fail@plt+0x1a4c>
   14230:	mov	r3, #0
   14234:	str	r3, [r5, #4]
   14238:	mov	r1, #3
   1423c:	mov	r0, r5
   14240:	bl	1343c <__assert_fail@plt+0x2078>
   14244:	cmp	r0, #0
   14248:	str	r0, [r5, #4]
   1424c:	bne	14544 <__assert_fail@plt+0x3180>
   14250:	ldr	r3, [r5, #48]	; 0x30
   14254:	tst	r3, #8192	; 0x2000
   14258:	bne	14078 <__assert_fail@plt+0x2cb4>
   1425c:	ldr	r3, [r4, #32]
   14260:	cmp	r3, #0
   14264:	beq	14200 <__assert_fail@plt+0x2e3c>
   14268:	ldrh	r3, [r4, #56]	; 0x38
   1426c:	cmp	r3, #4
   14270:	beq	14200 <__assert_fail@plt+0x2e3c>
   14274:	mov	r3, #7
   14278:	b	141fc <__assert_fail@plt+0x2e38>
   1427c:	ldr	r2, [r3, #4]
   14280:	ldr	r2, [r2, #24]
   14284:	str	r2, [r3, #24]
   14288:	ldr	r3, [r3, #8]
   1428c:	b	1453c <__assert_fail@plt+0x3178>
   14290:	mov	r0, r6
   14294:	bl	12a60 <__assert_fail@plt+0x169c>
   14298:	b	14550 <__assert_fail@plt+0x318c>
   1429c:	mov	r0, r6
   142a0:	str	r4, [r5]
   142a4:	bl	12a60 <__assert_fail@plt+0x169c>
   142a8:	ldr	r6, [r4, #48]	; 0x30
   142ac:	cmp	r6, #0
   142b0:	bne	14358 <__assert_fail@plt+0x2f94>
   142b4:	mov	r0, r5
   142b8:	bl	12fec <__assert_fail@plt+0x1c28>
   142bc:	cmp	r0, #0
   142c0:	ldrne	r3, [r5, #48]	; 0x30
   142c4:	orrne	r3, r3, #8192	; 0x2000
   142c8:	strne	r3, [r5, #48]	; 0x30
   142cc:	bne	14078 <__assert_fail@plt+0x2cb4>
   142d0:	mov	r0, r5
   142d4:	add	r6, r4, #168	; 0xa8
   142d8:	bl	132b4 <__assert_fail@plt+0x1ef0>
   142dc:	ldr	r2, [r4, #52]	; 0x34
   142e0:	mov	r1, r6
   142e4:	ldr	r0, [r5, #24]
   142e8:	str	r2, [r4, #40]	; 0x28
   142ec:	add	r2, r2, #1
   142f0:	bl	110c4 <memmove@plt>
   142f4:	mov	r1, #47	; 0x2f
   142f8:	mov	r0, r6
   142fc:	bl	112ec <strrchr@plt>
   14300:	cmp	r0, #0
   14304:	beq	14340 <__assert_fail@plt+0x2f7c>
   14308:	cmp	r6, r0
   1430c:	bne	1431c <__assert_fail@plt+0x2f58>
   14310:	ldrb	r3, [r6, #1]
   14314:	cmp	r3, #0
   14318:	beq	14340 <__assert_fail@plt+0x2f7c>
   1431c:	add	r7, r0, #1
   14320:	mov	r0, r7
   14324:	bl	11238 <strlen@plt>
   14328:	mov	r8, r0
   1432c:	add	r2, r0, #1
   14330:	mov	r1, r7
   14334:	mov	r0, r6
   14338:	bl	110c4 <memmove@plt>
   1433c:	str	r8, [r4, #52]	; 0x34
   14340:	ldr	r3, [r5, #24]
   14344:	mov	r0, r5
   14348:	str	r3, [r4, #24]
   1434c:	str	r3, [r4, #28]
   14350:	bl	13240 <__assert_fail@plt+0x1e7c>
   14354:	b	1412c <__assert_fail@plt+0x2d68>
   14358:	ldrh	r3, [r4, #60]	; 0x3c
   1435c:	mov	r6, r4
   14360:	cmp	r3, #4
   14364:	beq	145a0 <__assert_fail@plt+0x31dc>
   14368:	cmp	r3, #2
   1436c:	bne	14550 <__assert_fail@plt+0x318c>
   14370:	mov	r2, #1
   14374:	mov	r1, r4
   14378:	mov	r0, r5
   1437c:	bl	12b78 <__assert_fail@plt+0x17b4>
   14380:	cmp	r0, #1
   14384:	strh	r0, [r4, #56]	; 0x38
   14388:	bne	143d0 <__assert_fail@plt+0x300c>
   1438c:	ldr	r3, [r5, #48]	; 0x30
   14390:	tst	r3, #4
   14394:	bne	143d0 <__assert_fail@plt+0x300c>
   14398:	ldr	r1, [pc, #644]	; 14624 <__assert_fail@plt+0x3260>
   1439c:	mov	r0, r5
   143a0:	bl	12ddc <__assert_fail@plt+0x1a18>
   143a4:	cmp	r0, #0
   143a8:	str	r0, [r4, #36]	; 0x24
   143ac:	ldrhge	r3, [r4, #58]	; 0x3a
   143b0:	orrge	r3, r3, #2
   143b4:	strhge	r3, [r4, #58]	; 0x3a
   143b8:	bge	143d0 <__assert_fail@plt+0x300c>
   143bc:	bl	11268 <__errno_location@plt>
   143c0:	ldr	r3, [r0]
   143c4:	str	r3, [r4, #32]
   143c8:	mov	r3, #7
   143cc:	strh	r3, [r4, #56]	; 0x38
   143d0:	mov	r3, #3
   143d4:	strh	r3, [r4, #60]	; 0x3c
   143d8:	b	14550 <__assert_fail@plt+0x318c>
   143dc:	cmp	r3, #0
   143e0:	cmpeq	r2, #1
   143e4:	beq	1407c <__assert_fail@plt+0x2cb8>
   143e8:	bl	1137c <abort@plt>
   143ec:	ldrh	r3, [r4, #56]	; 0x38
   143f0:	cmp	r3, #11
   143f4:	beq	143e8 <__assert_fail@plt+0x3024>
   143f8:	ldr	r2, [r5, #24]
   143fc:	mov	r1, #0
   14400:	ldr	r3, [r4, #40]	; 0x28
   14404:	strb	r1, [r2, r3]
   14408:	ldr	r3, [r4, #48]	; 0x30
   1440c:	cmp	r3, r1
   14410:	bne	14440 <__assert_fail@plt+0x307c>
   14414:	mov	r0, r5
   14418:	bl	12fec <__assert_fail@plt+0x1c28>
   1441c:	cmp	r0, #0
   14420:	beq	14478 <__assert_fail@plt+0x30b4>
   14424:	bl	11268 <__errno_location@plt>
   14428:	ldr	r3, [r0]
   1442c:	str	r3, [r4, #32]
   14430:	ldr	r3, [r5, #48]	; 0x30
   14434:	orr	r3, r3, #8192	; 0x2000
   14438:	str	r3, [r5, #48]	; 0x30
   1443c:	b	14478 <__assert_fail@plt+0x30b4>
   14440:	ldrh	r3, [r4, #58]	; 0x3a
   14444:	tst	r3, #2
   14448:	beq	144e4 <__assert_fail@plt+0x3120>
   1444c:	ldr	r3, [r5, #48]	; 0x30
   14450:	tst	r3, #4
   14454:	bne	14470 <__assert_fail@plt+0x30ac>
   14458:	tst	r3, #512	; 0x200
   1445c:	ldr	r1, [r4, #36]	; 0x24
   14460:	beq	144b8 <__assert_fail@plt+0x30f4>
   14464:	mov	r2, #1
   14468:	mov	r0, r5
   1446c:	bl	12f78 <__assert_fail@plt+0x1bb4>
   14470:	ldr	r0, [r4, #36]	; 0x24
   14474:	bl	11388 <close@plt>
   14478:	ldrh	r3, [r4, #56]	; 0x38
   1447c:	cmp	r3, #2
   14480:	beq	144a8 <__assert_fail@plt+0x30e4>
   14484:	ldr	r3, [r4, #32]
   14488:	cmp	r3, #0
   1448c:	movne	r3, #7
   14490:	moveq	r3, #6
   14494:	strh	r3, [r4, #56]	; 0x38
   14498:	bne	144a8 <__assert_fail@plt+0x30e4>
   1449c:	mov	r1, r4
   144a0:	mov	r0, r5
   144a4:	bl	1338c <__assert_fail@plt+0x1fc8>
   144a8:	ldr	r3, [r5, #48]	; 0x30
   144ac:	tst	r3, #8192	; 0x2000
   144b0:	beq	1407c <__assert_fail@plt+0x2cb8>
   144b4:	b	14078 <__assert_fail@plt+0x2cb4>
   144b8:	mov	r0, r1
   144bc:	bl	11328 <fchdir@plt>
   144c0:	cmp	r0, #0
   144c4:	beq	14470 <__assert_fail@plt+0x30ac>
   144c8:	bl	11268 <__errno_location@plt>
   144cc:	ldr	r3, [r0]
   144d0:	str	r3, [r4, #32]
   144d4:	ldr	r3, [r5, #48]	; 0x30
   144d8:	orr	r3, r3, #8192	; 0x2000
   144dc:	str	r3, [r5, #48]	; 0x30
   144e0:	b	14470 <__assert_fail@plt+0x30ac>
   144e4:	tst	r3, #1
   144e8:	bne	14478 <__assert_fail@plt+0x30b4>
   144ec:	ldr	r3, [pc, #308]	; 14628 <__assert_fail@plt+0x3264>
   144f0:	mvn	r2, #0
   144f4:	mov	r0, r5
   144f8:	ldr	r1, [r4, #4]
   144fc:	bl	1303c <__assert_fail@plt+0x1c78>
   14500:	b	1441c <__assert_fail@plt+0x3058>
   14504:	mvn	r2, #0
   14508:	mov	r1, r4
   1450c:	ldr	r3, [r4, #24]
   14510:	mov	r0, r5
   14514:	bl	1303c <__assert_fail@plt+0x1c78>
   14518:	cmp	r0, #0
   1451c:	beq	14544 <__assert_fail@plt+0x3180>
   14520:	bl	11268 <__errno_location@plt>
   14524:	ldr	r3, [r0]
   14528:	str	r3, [r4, #32]
   1452c:	ldrh	r3, [r4, #58]	; 0x3a
   14530:	orr	r3, r3, #1
   14534:	strh	r3, [r4, #58]	; 0x3a
   14538:	ldr	r3, [r5, #4]
   1453c:	cmp	r3, #0
   14540:	bne	1427c <__assert_fail@plt+0x2eb8>
   14544:	mov	r3, #0
   14548:	ldr	r4, [r5, #4]
   1454c:	str	r3, [r5, #4]
   14550:	ldr	r0, [r4, #4]
   14554:	ldr	r2, [r5, #24]
   14558:	ldr	r1, [r0, #40]	; 0x28
   1455c:	ldr	r0, [r0, #28]
   14560:	sub	r3, r1, #1
   14564:	ldrb	r0, [r0, r3]
   14568:	cmp	r0, #47	; 0x2f
   1456c:	movne	r3, r1
   14570:	mov	r1, #47	; 0x2f
   14574:	add	r0, r2, r3
   14578:	strb	r1, [r2, r3]
   1457c:	add	r0, r0, #1
   14580:	add	r1, r4, #168	; 0xa8
   14584:	ldr	r2, [r4, #52]	; 0x34
   14588:	add	r2, r2, #1
   1458c:	bl	110c4 <memmove@plt>
   14590:	b	1412c <__assert_fail@plt+0x2d68>
   14594:	cmp	r3, #1
   14598:	beq	141b0 <__assert_fail@plt+0x2dec>
   1459c:	mov	r6, r4
   145a0:	ldr	r4, [r6, #8]
   145a4:	cmp	r4, #0
   145a8:	bne	1429c <__assert_fail@plt+0x2ed8>
   145ac:	ldr	r3, [r6, #4]
   145b0:	ldr	r2, [r3, #12]
   145b4:	cmp	r2, #0
   145b8:	beq	145ec <__assert_fail@plt+0x3228>
   145bc:	str	r3, [r5]
   145c0:	mov	r1, #3
   145c4:	mov	r0, r5
   145c8:	ldr	r2, [r5, #24]
   145cc:	ldr	r3, [r3, #40]	; 0x28
   145d0:	strb	r4, [r2, r3]
   145d4:	bl	1343c <__assert_fail@plt+0x2078>
   145d8:	subs	r4, r0, #0
   145dc:	bne	14290 <__assert_fail@plt+0x2ecc>
   145e0:	ldr	r3, [r5, #48]	; 0x30
   145e4:	tst	r3, #8192	; 0x2000
   145e8:	bne	14078 <__assert_fail@plt+0x2cb4>
   145ec:	ldr	r4, [r6, #4]
   145f0:	mov	r0, r6
   145f4:	str	r4, [r5]
   145f8:	bl	12a60 <__assert_fail@plt+0x169c>
   145fc:	ldr	r3, [r4, #48]	; 0x30
   14600:	cmn	r3, #1
   14604:	bne	143ec <__assert_fail@plt+0x3028>
   14608:	mov	r0, r4
   1460c:	mov	r4, #0
   14610:	bl	12a60 <__assert_fail@plt+0x169c>
   14614:	bl	11268 <__errno_location@plt>
   14618:	str	r4, [r0]
   1461c:	str	r4, [r5]
   14620:	b	1407c <__assert_fail@plt+0x2cb8>
   14624:	andeq	r9, r1, r3, ror #13
   14628:	andeq	r9, r1, r2, ror #13
   1462c:	cmp	r2, #4
   14630:	bls	1464c <__assert_fail@plt+0x3288>
   14634:	push	{r4, lr}
   14638:	bl	11268 <__errno_location@plt>
   1463c:	mov	r3, #22
   14640:	str	r3, [r0]
   14644:	mov	r0, #1
   14648:	pop	{r4, pc}
   1464c:	mov	r0, #0
   14650:	strh	r2, [r1, #60]	; 0x3c
   14654:	bx	lr
   14658:	push	{r4, r5, r6, r7, r8, lr}
   1465c:	mov	r7, r1
   14660:	mov	r5, r0
   14664:	bl	11268 <__errno_location@plt>
   14668:	bics	r2, r7, #4096	; 0x1000
   1466c:	mov	r6, r0
   14670:	beq	14684 <__assert_fail@plt+0x32c0>
   14674:	mov	r3, #22
   14678:	str	r3, [r0]
   1467c:	mov	r0, #0
   14680:	pop	{r4, r5, r6, r7, r8, pc}
   14684:	ldr	r4, [r5]
   14688:	str	r2, [r0]
   1468c:	ldr	r3, [r5, #48]	; 0x30
   14690:	ands	r0, r3, #8192	; 0x2000
   14694:	bne	1467c <__assert_fail@plt+0x32b8>
   14698:	ldrh	r3, [r4, #56]	; 0x38
   1469c:	cmp	r3, #9
   146a0:	bne	146ac <__assert_fail@plt+0x32e8>
   146a4:	ldr	r0, [r4, #8]
   146a8:	pop	{r4, r5, r6, r7, r8, pc}
   146ac:	cmp	r3, #1
   146b0:	popne	{r4, r5, r6, r7, r8, pc}
   146b4:	ldr	r0, [r5, #4]
   146b8:	cmp	r0, #0
   146bc:	beq	146c4 <__assert_fail@plt+0x3300>
   146c0:	bl	12e10 <__assert_fail@plt+0x1a4c>
   146c4:	cmp	r7, #4096	; 0x1000
   146c8:	ldreq	r3, [r5, #48]	; 0x30
   146cc:	moveq	r8, #2
   146d0:	movne	r8, #1
   146d4:	orreq	r3, r3, #4096	; 0x1000
   146d8:	streq	r3, [r5, #48]	; 0x30
   146dc:	ldr	r3, [r4, #48]	; 0x30
   146e0:	cmp	r3, #0
   146e4:	bne	14704 <__assert_fail@plt+0x3340>
   146e8:	ldr	r3, [r4, #24]
   146ec:	ldrb	r3, [r3]
   146f0:	cmp	r3, #47	; 0x2f
   146f4:	beq	14704 <__assert_fail@plt+0x3340>
   146f8:	ldr	r0, [r5, #48]	; 0x30
   146fc:	ands	r4, r0, #4
   14700:	beq	14718 <__assert_fail@plt+0x3354>
   14704:	mov	r1, r8
   14708:	mov	r0, r5
   1470c:	bl	1343c <__assert_fail@plt+0x2078>
   14710:	str	r0, [r5, #4]
   14714:	pop	{r4, r5, r6, r7, r8, pc}
   14718:	ldr	r1, [pc, #116]	; 14794 <__assert_fail@plt+0x33d0>
   1471c:	mov	r0, r5
   14720:	bl	12ddc <__assert_fail@plt+0x1a18>
   14724:	subs	r7, r0, #0
   14728:	strlt	r4, [r5, #4]
   1472c:	blt	1467c <__assert_fail@plt+0x32b8>
   14730:	mov	r1, r8
   14734:	mov	r0, r5
   14738:	bl	1343c <__assert_fail@plt+0x2078>
   1473c:	str	r0, [r5, #4]
   14740:	ldr	r0, [r5, #48]	; 0x30
   14744:	ands	r4, r0, #512	; 0x200
   14748:	beq	14764 <__assert_fail@plt+0x33a0>
   1474c:	mov	r2, #1
   14750:	mov	r1, r7
   14754:	mov	r0, r5
   14758:	bl	12f78 <__assert_fail@plt+0x1bb4>
   1475c:	ldr	r0, [r5, #4]
   14760:	pop	{r4, r5, r6, r7, r8, pc}
   14764:	mov	r0, r7
   14768:	bl	11328 <fchdir@plt>
   1476c:	cmp	r0, #0
   14770:	beq	14788 <__assert_fail@plt+0x33c4>
   14774:	ldr	r5, [r6]
   14778:	mov	r0, r7
   1477c:	bl	11388 <close@plt>
   14780:	str	r5, [r6]
   14784:	b	1467c <__assert_fail@plt+0x32b8>
   14788:	mov	r0, r7
   1478c:	bl	11388 <close@plt>
   14790:	b	1475c <__assert_fail@plt+0x3398>
   14794:	andeq	r9, r1, r3, ror #13
   14798:	ror	r0, r0, #3
   1479c:	udiv	r3, r0, r1
   147a0:	mls	r0, r3, r1, r0
   147a4:	bx	lr
   147a8:	sub	r0, r1, r0
   147ac:	clz	r0, r0
   147b0:	lsr	r0, r0, #5
   147b4:	bx	lr
   147b8:	ldrb	r3, [r1, #16]
   147bc:	cmp	r3, #0
   147c0:	bne	147ec <__assert_fail@plt+0x3428>
   147c4:	vmov	s15, r0
   147c8:	vldr	s14, [r1, #8]
   147cc:	vcvt.f32.u32	s13, s15
   147d0:	vdiv.f32	s15, s13, s14
   147d4:	vldr	s14, [pc, #140]	; 14868 <__assert_fail@plt+0x34a4>
   147d8:	vcmpe.f32	s15, s14
   147dc:	vmrs	APSR_nzcv, fpscr
   147e0:	bge	14800 <__assert_fail@plt+0x343c>
   147e4:	vcvt.u32.f32	s15, s15
   147e8:	vmov	r0, s15
   147ec:	cmp	r0, #10
   147f0:	movcc	r0, #10
   147f4:	orr	r0, r0, #1
   147f8:	cmn	r0, #1
   147fc:	bne	14834 <__assert_fail@plt+0x3470>
   14800:	mov	r0, #0
   14804:	bx	lr
   14808:	add	r2, r3, #1
   1480c:	add	r3, r3, #2
   14810:	add	r1, r1, r2, lsl #2
   14814:	udiv	r2, r0, r3
   14818:	cmp	r0, r1
   1481c:	mls	r2, r3, r2, r0
   14820:	bls	14840 <__assert_fail@plt+0x347c>
   14824:	cmp	r2, #0
   14828:	bne	14808 <__assert_fail@plt+0x3444>
   1482c:	add	r0, r0, #2
   14830:	b	147f8 <__assert_fail@plt+0x3434>
   14834:	mov	r1, #9
   14838:	mov	r3, #3
   1483c:	b	14814 <__assert_fail@plt+0x3450>
   14840:	cmp	r2, #0
   14844:	beq	1482c <__assert_fail@plt+0x3468>
   14848:	lsrs	r3, r0, #30
   1484c:	movne	r3, #1
   14850:	moveq	r3, #0
   14854:	tst	r0, #536870912	; 0x20000000
   14858:	bne	14800 <__assert_fail@plt+0x343c>
   1485c:	cmp	r3, #0
   14860:	bxeq	lr
   14864:	b	14800 <__assert_fail@plt+0x343c>
   14868:	svcmi	0x00800000
   1486c:	push	{r4, lr}
   14870:	mov	r4, r0
   14874:	mov	r0, r1
   14878:	ldr	r1, [r4, #8]
   1487c:	ldr	r3, [r4, #24]
   14880:	blx	r3
   14884:	ldr	r3, [r4, #8]
   14888:	cmp	r3, r0
   1488c:	bhi	14894 <__assert_fail@plt+0x34d0>
   14890:	bl	1137c <abort@plt>
   14894:	ldr	r3, [r4]
   14898:	add	r0, r3, r0, lsl #3
   1489c:	pop	{r4, pc}
   148a0:	push	{r4, r5, r6, r7, r8, lr}
   148a4:	mov	r8, r2
   148a8:	mov	r6, r1
   148ac:	mov	r5, r0
   148b0:	mov	r7, r3
   148b4:	bl	1486c <__assert_fail@plt+0x34a8>
   148b8:	str	r0, [r8]
   148bc:	ldr	r1, [r0]
   148c0:	cmp	r1, #0
   148c4:	bne	148d4 <__assert_fail@plt+0x3510>
   148c8:	mov	r2, #0
   148cc:	mov	r0, r2
   148d0:	pop	{r4, r5, r6, r7, r8, pc}
   148d4:	cmp	r1, r6
   148d8:	mov	r4, r0
   148dc:	beq	148f4 <__assert_fail@plt+0x3530>
   148e0:	mov	r0, r6
   148e4:	ldr	r3, [r5, #28]
   148e8:	blx	r3
   148ec:	cmp	r0, #0
   148f0:	beq	14948 <__assert_fail@plt+0x3584>
   148f4:	cmp	r7, #0
   148f8:	ldr	r2, [r4]
   148fc:	beq	148cc <__assert_fail@plt+0x3508>
   14900:	ldr	r3, [r4, #4]
   14904:	cmp	r3, #0
   14908:	streq	r3, [r4]
   1490c:	beq	148cc <__assert_fail@plt+0x3508>
   14910:	ldm	r3, {r0, r1}
   14914:	stm	r4, {r0, r1}
   14918:	mov	r1, #0
   1491c:	str	r1, [r3]
   14920:	ldr	r1, [r5, #36]	; 0x24
   14924:	str	r1, [r3, #4]
   14928:	str	r3, [r5, #36]	; 0x24
   1492c:	b	148cc <__assert_fail@plt+0x3508>
   14930:	mov	r0, r6
   14934:	ldr	r3, [r5, #28]
   14938:	blx	r3
   1493c:	cmp	r0, #0
   14940:	bne	14960 <__assert_fail@plt+0x359c>
   14944:	ldr	r4, [r4, #4]
   14948:	ldr	r3, [r4, #4]
   1494c:	cmp	r3, #0
   14950:	beq	148c8 <__assert_fail@plt+0x3504>
   14954:	ldr	r1, [r3]
   14958:	cmp	r1, r6
   1495c:	bne	14930 <__assert_fail@plt+0x356c>
   14960:	ldr	r3, [r4, #4]
   14964:	cmp	r7, #0
   14968:	ldr	r2, [r3]
   1496c:	beq	148cc <__assert_fail@plt+0x3508>
   14970:	ldr	r1, [r3, #4]
   14974:	str	r1, [r4, #4]
   14978:	b	14918 <__assert_fail@plt+0x3554>
   1497c:	ldr	r2, [pc, #164]	; 14a28 <__assert_fail@plt+0x3664>
   14980:	ldr	r3, [r0]
   14984:	cmp	r3, r2
   14988:	beq	14a10 <__assert_fail@plt+0x364c>
   1498c:	vldr	s13, [pc, #132]	; 14a18 <__assert_fail@plt+0x3654>
   14990:	vldr	s14, [r3, #8]
   14994:	vcmpe.f32	s14, s13
   14998:	vmrs	APSR_nzcv, fpscr
   1499c:	ble	14a04 <__assert_fail@plt+0x3640>
   149a0:	vldr	s15, [pc, #116]	; 14a1c <__assert_fail@plt+0x3658>
   149a4:	vcmpe.f32	s14, s15
   149a8:	vmrs	APSR_nzcv, fpscr
   149ac:	bpl	14a04 <__assert_fail@plt+0x3640>
   149b0:	vldr	s15, [pc, #104]	; 14a20 <__assert_fail@plt+0x365c>
   149b4:	vldr	s12, [r3, #12]
   149b8:	vcmpe.f32	s12, s15
   149bc:	vmrs	APSR_nzcv, fpscr
   149c0:	ble	14a04 <__assert_fail@plt+0x3640>
   149c4:	vldr	s15, [r3]
   149c8:	vcmpe.f32	s15, #0.0
   149cc:	vmrs	APSR_nzcv, fpscr
   149d0:	blt	14a04 <__assert_fail@plt+0x3640>
   149d4:	vadd.f32	s15, s15, s13
   149d8:	vldr	s13, [r3, #4]
   149dc:	vcmpe.f32	s15, s13
   149e0:	vmrs	APSR_nzcv, fpscr
   149e4:	bpl	14a04 <__assert_fail@plt+0x3640>
   149e8:	vldr	s12, [pc, #52]	; 14a24 <__assert_fail@plt+0x3660>
   149ec:	vcmpe.f32	s13, s12
   149f0:	vmrs	APSR_nzcv, fpscr
   149f4:	bhi	14a04 <__assert_fail@plt+0x3640>
   149f8:	vcmpe.f32	s14, s15
   149fc:	vmrs	APSR_nzcv, fpscr
   14a00:	bgt	14a10 <__assert_fail@plt+0x364c>
   14a04:	str	r2, [r0]
   14a08:	mov	r0, #0
   14a0c:	bx	lr
   14a10:	mov	r0, #1
   14a14:	bx	lr
   14a18:	stclcc	12, cr12, [ip, #820]	; 0x334
   14a1c:	svccc	0x00666666
   14a20:	svccc	0x008ccccd
   14a24:	svccc	0x00800000
   14a28:	andeq	r9, r1, r8, ror #13
   14a2c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14a30:	mov	r5, r0
   14a34:	mov	r7, r1
   14a38:	mov	r8, r2
   14a3c:	mov	r9, #0
   14a40:	ldr	r4, [r1]
   14a44:	add	r4, r4, #8
   14a48:	ldr	r2, [r7, #4]
   14a4c:	sub	r3, r4, #8
   14a50:	cmp	r2, r3
   14a54:	bhi	14a64 <__assert_fail@plt+0x36a0>
   14a58:	mov	r8, #1
   14a5c:	mov	r0, r8
   14a60:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14a64:	ldr	r3, [r4, #-8]
   14a68:	cmp	r3, #0
   14a6c:	ldrne	r6, [r4, #-4]
   14a70:	bne	14acc <__assert_fail@plt+0x3708>
   14a74:	add	r4, r4, #8
   14a78:	b	14a48 <__assert_fail@plt+0x3684>
   14a7c:	ldr	sl, [r6]
   14a80:	mov	r0, r5
   14a84:	mov	r1, sl
   14a88:	bl	1486c <__assert_fail@plt+0x34a8>
   14a8c:	ldr	r2, [r0]
   14a90:	ldr	r1, [r6, #4]
   14a94:	cmp	r2, #0
   14a98:	ldrne	r3, [r0, #4]
   14a9c:	strne	r3, [r6, #4]
   14aa0:	strne	r6, [r0, #4]
   14aa4:	bne	14ac8 <__assert_fail@plt+0x3704>
   14aa8:	ldr	r3, [r5, #12]
   14aac:	str	sl, [r0]
   14ab0:	add	r3, r3, #1
   14ab4:	str	r3, [r5, #12]
   14ab8:	str	r2, [r6]
   14abc:	ldr	r3, [r5, #36]	; 0x24
   14ac0:	str	r3, [r6, #4]
   14ac4:	str	r6, [r5, #36]	; 0x24
   14ac8:	mov	r6, r1
   14acc:	cmp	r6, #0
   14ad0:	bne	14a7c <__assert_fail@plt+0x36b8>
   14ad4:	cmp	r8, #0
   14ad8:	str	r6, [r4, #-4]
   14adc:	ldr	sl, [r4, #-8]
   14ae0:	bne	14a74 <__assert_fail@plt+0x36b0>
   14ae4:	mov	r1, sl
   14ae8:	mov	r0, r5
   14aec:	bl	1486c <__assert_fail@plt+0x34a8>
   14af0:	ldr	r3, [r0]
   14af4:	mov	r6, r0
   14af8:	cmp	r3, #0
   14afc:	beq	14b48 <__assert_fail@plt+0x3784>
   14b00:	ldr	r0, [r5, #36]	; 0x24
   14b04:	cmp	r0, #0
   14b08:	ldrne	r3, [r0, #4]
   14b0c:	strne	r3, [r5, #36]	; 0x24
   14b10:	bne	14b24 <__assert_fail@plt+0x3760>
   14b14:	mov	r0, #8
   14b18:	bl	17cd0 <__assert_fail@plt+0x690c>
   14b1c:	cmp	r0, #0
   14b20:	beq	14a5c <__assert_fail@plt+0x3698>
   14b24:	ldr	r3, [r6, #4]
   14b28:	str	sl, [r0]
   14b2c:	str	r3, [r0, #4]
   14b30:	str	r0, [r6, #4]
   14b34:	ldr	r3, [r7, #12]
   14b38:	str	r9, [r4, #-8]
   14b3c:	sub	r3, r3, #1
   14b40:	str	r3, [r7, #12]
   14b44:	b	14a74 <__assert_fail@plt+0x36b0>
   14b48:	ldr	r3, [r5, #12]
   14b4c:	str	sl, [r0]
   14b50:	add	r3, r3, #1
   14b54:	str	r3, [r5, #12]
   14b58:	b	14b34 <__assert_fail@plt+0x3770>
   14b5c:	ldr	r0, [r0, #8]
   14b60:	bx	lr
   14b64:	ldr	r0, [r0, #12]
   14b68:	bx	lr
   14b6c:	ldr	r0, [r0, #16]
   14b70:	bx	lr
   14b74:	ldm	r0, {r3, ip}
   14b78:	mov	r0, #0
   14b7c:	cmp	ip, r3
   14b80:	bxls	lr
   14b84:	ldr	r2, [r3]
   14b88:	cmp	r2, #0
   14b8c:	beq	14bb4 <__assert_fail@plt+0x37f0>
   14b90:	mov	r1, r3
   14b94:	mov	r2, #1
   14b98:	b	14ba0 <__assert_fail@plt+0x37dc>
   14b9c:	add	r2, r2, #1
   14ba0:	ldr	r1, [r1, #4]
   14ba4:	cmp	r1, #0
   14ba8:	bne	14b9c <__assert_fail@plt+0x37d8>
   14bac:	cmp	r0, r2
   14bb0:	movcc	r0, r2
   14bb4:	add	r3, r3, #8
   14bb8:	b	14b7c <__assert_fail@plt+0x37b8>
   14bbc:	push	{lr}		; (str lr, [sp, #-4]!)
   14bc0:	mov	r3, #0
   14bc4:	mov	r1, r3
   14bc8:	ldm	r0, {r2, lr}
   14bcc:	cmp	lr, r2
   14bd0:	bhi	14bf4 <__assert_fail@plt+0x3830>
   14bd4:	ldr	r2, [r0, #12]
   14bd8:	cmp	r2, r1
   14bdc:	ldreq	r0, [r0, #16]
   14be0:	subeq	r0, r0, r3
   14be4:	clzeq	r0, r0
   14be8:	lsreq	r0, r0, #5
   14bec:	movne	r0, #0
   14bf0:	pop	{pc}		; (ldr pc, [sp], #4)
   14bf4:	ldr	ip, [r2]
   14bf8:	cmp	ip, #0
   14bfc:	addne	r1, r1, #1
   14c00:	addne	r3, r3, #1
   14c04:	movne	ip, r2
   14c08:	bne	14c18 <__assert_fail@plt+0x3854>
   14c0c:	add	r2, r2, #8
   14c10:	b	14bcc <__assert_fail@plt+0x3808>
   14c14:	add	r3, r3, #1
   14c18:	ldr	ip, [ip, #4]
   14c1c:	cmp	ip, #0
   14c20:	bne	14c14 <__assert_fail@plt+0x3850>
   14c24:	b	14c0c <__assert_fail@plt+0x3848>
   14c28:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   14c2c:	mov	r6, r0
   14c30:	mov	r4, r1
   14c34:	bl	14b74 <__assert_fail@plt+0x37b0>
   14c38:	ldr	r5, [r6, #8]
   14c3c:	mov	r8, r0
   14c40:	mov	r1, #1
   14c44:	mov	r0, r4
   14c48:	ldr	r7, [r6, #12]
   14c4c:	ldr	r2, [pc, #116]	; 14cc8 <__assert_fail@plt+0x3904>
   14c50:	ldr	r3, [r6, #16]
   14c54:	bl	112a4 <__fprintf_chk@plt>
   14c58:	mov	r3, r5
   14c5c:	ldr	r2, [pc, #104]	; 14ccc <__assert_fail@plt+0x3908>
   14c60:	mov	r1, #1
   14c64:	mov	r0, r4
   14c68:	bl	112a4 <__fprintf_chk@plt>
   14c6c:	vmov	s15, r7
   14c70:	mov	r3, r7
   14c74:	mov	r1, #1
   14c78:	ldr	r2, [pc, #80]	; 14cd0 <__assert_fail@plt+0x390c>
   14c7c:	mov	r0, r4
   14c80:	vcvt.f64.u32	d6, s15
   14c84:	vldr	d7, [pc, #52]	; 14cc0 <__assert_fail@plt+0x38fc>
   14c88:	vmul.f64	d6, d6, d7
   14c8c:	vmov	s15, r5
   14c90:	vcvt.f64.u32	d7, s15
   14c94:	vdiv.f64	d5, d6, d7
   14c98:	vstr	d5, [sp]
   14c9c:	bl	112a4 <__fprintf_chk@plt>
   14ca0:	ldr	r2, [pc, #44]	; 14cd4 <__assert_fail@plt+0x3910>
   14ca4:	mov	r3, r8
   14ca8:	mov	r1, #1
   14cac:	mov	r0, r4
   14cb0:	add	sp, sp, #8
   14cb4:	pop	{r4, r5, r6, r7, r8, lr}
   14cb8:	b	112a4 <__fprintf_chk@plt>
   14cbc:	nop	{0}
   14cc0:	andeq	r0, r0, r0
   14cc4:	subsmi	r0, r9, r0
   14cc8:	strdeq	r9, [r1], -ip
   14ccc:	andeq	r9, r1, r4, lsl r7
   14cd0:	andeq	r9, r1, ip, lsr #14
   14cd4:	andeq	r9, r1, sp, asr #14
   14cd8:	push	{r4, r5, r6, lr}
   14cdc:	mov	r6, r0
   14ce0:	mov	r5, r1
   14ce4:	bl	1486c <__assert_fail@plt+0x34a8>
   14ce8:	ldr	r3, [r0]
   14cec:	cmp	r3, #0
   14cf0:	beq	14d2c <__assert_fail@plt+0x3968>
   14cf4:	mov	r4, r0
   14cf8:	ldr	r1, [r4]
   14cfc:	cmp	r1, r5
   14d00:	bne	14d0c <__assert_fail@plt+0x3948>
   14d04:	ldr	r0, [r4]
   14d08:	pop	{r4, r5, r6, pc}
   14d0c:	mov	r0, r5
   14d10:	ldr	r3, [r6, #28]
   14d14:	blx	r3
   14d18:	cmp	r0, #0
   14d1c:	bne	14d04 <__assert_fail@plt+0x3940>
   14d20:	ldr	r4, [r4, #4]
   14d24:	cmp	r4, #0
   14d28:	bne	14cf8 <__assert_fail@plt+0x3934>
   14d2c:	mov	r0, #0
   14d30:	pop	{r4, r5, r6, pc}
   14d34:	ldr	r3, [r0, #16]
   14d38:	cmp	r3, #0
   14d3c:	beq	14d6c <__assert_fail@plt+0x39a8>
   14d40:	ldr	r3, [r0]
   14d44:	ldr	r2, [r0, #4]
   14d48:	cmp	r2, r3
   14d4c:	bhi	14d58 <__assert_fail@plt+0x3994>
   14d50:	push	{r4, lr}
   14d54:	bl	1137c <abort@plt>
   14d58:	ldr	r0, [r3]
   14d5c:	cmp	r0, #0
   14d60:	bxne	lr
   14d64:	add	r3, r3, #8
   14d68:	b	14d48 <__assert_fail@plt+0x3984>
   14d6c:	mov	r0, r3
   14d70:	bx	lr
   14d74:	push	{r4, r5, r6, lr}
   14d78:	mov	r4, r0
   14d7c:	mov	r5, r1
   14d80:	bl	1486c <__assert_fail@plt+0x34a8>
   14d84:	mov	r2, r0
   14d88:	mov	r3, r0
   14d8c:	ldm	r3, {r1, r3}
   14d90:	cmp	r1, r5
   14d94:	bne	14da8 <__assert_fail@plt+0x39e4>
   14d98:	cmp	r3, #0
   14d9c:	beq	14db0 <__assert_fail@plt+0x39ec>
   14da0:	ldr	r0, [r3]
   14da4:	pop	{r4, r5, r6, pc}
   14da8:	cmp	r3, #0
   14dac:	bne	14d8c <__assert_fail@plt+0x39c8>
   14db0:	ldr	r3, [r4, #4]
   14db4:	add	r2, r2, #8
   14db8:	cmp	r3, r2
   14dbc:	bhi	14dc8 <__assert_fail@plt+0x3a04>
   14dc0:	mov	r0, #0
   14dc4:	pop	{r4, r5, r6, pc}
   14dc8:	ldr	r0, [r2]
   14dcc:	cmp	r0, #0
   14dd0:	beq	14db4 <__assert_fail@plt+0x39f0>
   14dd4:	pop	{r4, r5, r6, pc}
   14dd8:	ldr	ip, [r0]
   14ddc:	mov	r3, #0
   14de0:	push	{r4, r5, lr}
   14de4:	ldr	lr, [r0, #4]
   14de8:	cmp	lr, ip
   14dec:	bhi	14df8 <__assert_fail@plt+0x3a34>
   14df0:	mov	r0, r3
   14df4:	pop	{r4, r5, pc}
   14df8:	ldr	lr, [ip]
   14dfc:	cmp	lr, #0
   14e00:	beq	14e2c <__assert_fail@plt+0x3a68>
   14e04:	add	r4, r1, r3, lsl #2
   14e08:	mov	lr, ip
   14e0c:	cmp	r2, r3
   14e10:	bls	14df0 <__assert_fail@plt+0x3a2c>
   14e14:	ldr	r5, [lr]
   14e18:	add	r3, r3, #1
   14e1c:	str	r5, [r4], #4
   14e20:	ldr	lr, [lr, #4]
   14e24:	cmp	lr, #0
   14e28:	bne	14e0c <__assert_fail@plt+0x3a48>
   14e2c:	add	ip, ip, #8
   14e30:	b	14de4 <__assert_fail@plt+0x3a20>
   14e34:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14e38:	mov	r7, r0
   14e3c:	mov	r8, r1
   14e40:	mov	r9, r2
   14e44:	mov	r6, #0
   14e48:	ldr	r4, [r0]
   14e4c:	ldr	r3, [r7, #4]
   14e50:	cmp	r3, r4
   14e54:	bhi	14e60 <__assert_fail@plt+0x3a9c>
   14e58:	mov	r0, r6
   14e5c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14e60:	ldr	r3, [r4]
   14e64:	cmp	r3, #0
   14e68:	beq	14e94 <__assert_fail@plt+0x3ad0>
   14e6c:	mov	r5, r4
   14e70:	mov	r1, r9
   14e74:	ldr	r0, [r5]
   14e78:	blx	r8
   14e7c:	cmp	r0, #0
   14e80:	beq	14e58 <__assert_fail@plt+0x3a94>
   14e84:	ldr	r5, [r5, #4]
   14e88:	add	r6, r6, #1
   14e8c:	cmp	r5, #0
   14e90:	bne	14e70 <__assert_fail@plt+0x3aac>
   14e94:	add	r4, r4, #8
   14e98:	b	14e4c <__assert_fail@plt+0x3a88>
   14e9c:	sub	r2, r0, #1
   14ea0:	mov	r0, #0
   14ea4:	ldrb	r3, [r2, #1]!
   14ea8:	cmp	r3, #0
   14eac:	bxeq	lr
   14eb0:	rsb	r0, r0, r0, lsl #5
   14eb4:	add	r0, r0, r3
   14eb8:	udiv	r3, r0, r1
   14ebc:	mls	r0, r1, r3, r0
   14ec0:	b	14ea4 <__assert_fail@plt+0x3ae0>
   14ec4:	push	{lr}		; (str lr, [sp, #-4]!)
   14ec8:	mov	ip, r0
   14ecc:	ldr	lr, [pc, #16]	; 14ee4 <__assert_fail@plt+0x3b20>
   14ed0:	ldm	lr!, {r0, r1, r2, r3}
   14ed4:	stmia	ip!, {r0, r1, r2, r3}
   14ed8:	ldr	r3, [lr]
   14edc:	str	r3, [ip]
   14ee0:	pop	{pc}		; (ldr pc, [sp], #4)
   14ee4:	andeq	r9, r1, r8, ror #13
   14ee8:	cmp	r2, #0
   14eec:	push	{r4, r5, r6, r7, r8, lr}
   14ef0:	mov	r8, r0
   14ef4:	mov	r0, #40	; 0x28
   14ef8:	mov	r5, r1
   14efc:	ldr	r7, [pc, #164]	; 14fa8 <__assert_fail@plt+0x3be4>
   14f00:	movne	r7, r2
   14f04:	cmp	r3, #0
   14f08:	ldr	r6, [pc, #156]	; 14fac <__assert_fail@plt+0x3be8>
   14f0c:	movne	r6, r3
   14f10:	bl	17cd0 <__assert_fail@plt+0x690c>
   14f14:	subs	r4, r0, #0
   14f18:	beq	14f90 <__assert_fail@plt+0x3bcc>
   14f1c:	ldr	r3, [pc, #140]	; 14fb0 <__assert_fail@plt+0x3bec>
   14f20:	cmp	r5, #0
   14f24:	mov	r0, r4
   14f28:	moveq	r5, r3
   14f2c:	str	r5, [r0, #20]!
   14f30:	bl	1497c <__assert_fail@plt+0x35b8>
   14f34:	cmp	r0, #0
   14f38:	beq	14f98 <__assert_fail@plt+0x3bd4>
   14f3c:	mov	r1, r5
   14f40:	mov	r0, r8
   14f44:	bl	147b8 <__assert_fail@plt+0x33f4>
   14f48:	cmp	r0, #0
   14f4c:	str	r0, [r4, #8]
   14f50:	beq	14f98 <__assert_fail@plt+0x3bd4>
   14f54:	mov	r1, #8
   14f58:	bl	17c7c <__assert_fail@plt+0x68b8>
   14f5c:	cmp	r0, #0
   14f60:	str	r0, [r4]
   14f64:	beq	14f98 <__assert_fail@plt+0x3bd4>
   14f68:	ldr	r3, [r4, #8]
   14f6c:	str	r7, [r4, #24]
   14f70:	ldr	r2, [sp, #24]
   14f74:	str	r6, [r4, #28]
   14f78:	add	r0, r0, r3, lsl #3
   14f7c:	mov	r3, #0
   14f80:	str	r0, [r4, #4]
   14f84:	str	r3, [r4, #12]
   14f88:	str	r3, [r4, #16]
   14f8c:	strd	r2, [r4, #32]
   14f90:	mov	r0, r4
   14f94:	pop	{r4, r5, r6, r7, r8, pc}
   14f98:	mov	r0, r4
   14f9c:	mov	r4, #0
   14fa0:	bl	12a60 <__assert_fail@plt+0x169c>
   14fa4:	b	14f90 <__assert_fail@plt+0x3bcc>
   14fa8:	muleq	r1, r8, r7
   14fac:	andeq	r4, r1, r8, lsr #15
   14fb0:	andeq	r9, r1, r8, ror #13
   14fb4:	push	{r4, r5, r6, r7, r8, lr}
   14fb8:	mov	r5, r0
   14fbc:	mov	r7, #0
   14fc0:	ldr	r4, [r0]
   14fc4:	add	r4, r4, #8
   14fc8:	ldr	r2, [r5, #4]
   14fcc:	sub	r3, r4, #8
   14fd0:	cmp	r2, r3
   14fd4:	bhi	14fe8 <__assert_fail@plt+0x3c24>
   14fd8:	mov	r3, #0
   14fdc:	str	r3, [r5, #12]
   14fe0:	str	r3, [r5, #16]
   14fe4:	pop	{r4, r5, r6, r7, r8, pc}
   14fe8:	ldr	r3, [r4, #-8]
   14fec:	cmp	r3, #0
   14ff0:	ldrne	r6, [r4, #-4]
   14ff4:	bne	15028 <__assert_fail@plt+0x3c64>
   14ff8:	add	r4, r4, #8
   14ffc:	b	14fc8 <__assert_fail@plt+0x3c04>
   15000:	cmp	r3, #0
   15004:	beq	15010 <__assert_fail@plt+0x3c4c>
   15008:	ldr	r0, [r6]
   1500c:	blx	r3
   15010:	ldr	r3, [r6, #4]
   15014:	ldr	r2, [r5, #36]	; 0x24
   15018:	str	r7, [r6]
   1501c:	str	r2, [r6, #4]
   15020:	str	r6, [r5, #36]	; 0x24
   15024:	mov	r6, r3
   15028:	cmp	r6, #0
   1502c:	ldr	r3, [r5, #32]
   15030:	bne	15000 <__assert_fail@plt+0x3c3c>
   15034:	cmp	r3, #0
   15038:	beq	15044 <__assert_fail@plt+0x3c80>
   1503c:	ldr	r0, [r4, #-8]
   15040:	blx	r3
   15044:	str	r7, [r4, #-8]
   15048:	str	r7, [r4, #-4]
   1504c:	b	14ff8 <__assert_fail@plt+0x3c34>
   15050:	ldr	r3, [r0, #32]
   15054:	push	{r4, r5, r6, lr}
   15058:	mov	r4, r0
   1505c:	cmp	r3, #0
   15060:	bne	15094 <__assert_fail@plt+0x3cd0>
   15064:	ldr	r5, [r4]
   15068:	ldr	r3, [r4, #4]
   1506c:	cmp	r3, r5
   15070:	bhi	150e4 <__assert_fail@plt+0x3d20>
   15074:	ldr	r0, [r4, #36]	; 0x24
   15078:	cmp	r0, #0
   1507c:	bne	15104 <__assert_fail@plt+0x3d40>
   15080:	ldr	r0, [r4]
   15084:	bl	12a60 <__assert_fail@plt+0x169c>
   15088:	mov	r0, r4
   1508c:	pop	{r4, r5, r6, lr}
   15090:	b	12a60 <__assert_fail@plt+0x169c>
   15094:	ldr	r3, [r0, #16]
   15098:	cmp	r3, #0
   1509c:	ldrne	r5, [r0]
   150a0:	beq	15064 <__assert_fail@plt+0x3ca0>
   150a4:	ldr	r3, [r4, #4]
   150a8:	cmp	r3, r5
   150ac:	bls	15064 <__assert_fail@plt+0x3ca0>
   150b0:	ldr	r3, [r5]
   150b4:	cmp	r3, #0
   150b8:	bne	150c4 <__assert_fail@plt+0x3d00>
   150bc:	add	r5, r5, #8
   150c0:	b	150a4 <__assert_fail@plt+0x3ce0>
   150c4:	mov	r6, r5
   150c8:	ldr	r0, [r6]
   150cc:	ldr	r3, [r4, #32]
   150d0:	blx	r3
   150d4:	ldr	r6, [r6, #4]
   150d8:	cmp	r6, #0
   150dc:	bne	150c8 <__assert_fail@plt+0x3d04>
   150e0:	b	150bc <__assert_fail@plt+0x3cf8>
   150e4:	ldr	r0, [r5, #4]
   150e8:	cmp	r0, #0
   150ec:	addeq	r5, r5, #8
   150f0:	beq	15068 <__assert_fail@plt+0x3ca4>
   150f4:	ldr	r6, [r0, #4]
   150f8:	bl	12a60 <__assert_fail@plt+0x169c>
   150fc:	mov	r0, r6
   15100:	b	150e8 <__assert_fail@plt+0x3d24>
   15104:	ldr	r5, [r0, #4]
   15108:	bl	12a60 <__assert_fail@plt+0x169c>
   1510c:	mov	r0, r5
   15110:	b	15078 <__assert_fail@plt+0x3cb4>
   15114:	push	{r4, r5, lr}
   15118:	mov	r4, r0
   1511c:	sub	sp, sp, #44	; 0x2c
   15120:	mov	r0, r1
   15124:	ldr	r1, [r4, #20]
   15128:	bl	147b8 <__assert_fail@plt+0x33f4>
   1512c:	subs	r5, r0, #0
   15130:	bne	15144 <__assert_fail@plt+0x3d80>
   15134:	mov	r5, #0
   15138:	mov	r0, r5
   1513c:	add	sp, sp, #44	; 0x2c
   15140:	pop	{r4, r5, pc}
   15144:	ldr	r3, [r4, #8]
   15148:	cmp	r3, r5
   1514c:	beq	1522c <__assert_fail@plt+0x3e68>
   15150:	mov	r1, #8
   15154:	bl	17c7c <__assert_fail@plt+0x68b8>
   15158:	cmp	r0, #0
   1515c:	str	r0, [sp]
   15160:	beq	15134 <__assert_fail@plt+0x3d70>
   15164:	ldr	r3, [r4, #20]
   15168:	mov	r2, #0
   1516c:	add	r0, r0, r5, lsl #3
   15170:	mov	r1, r4
   15174:	stmib	sp, {r0, r5}
   15178:	mov	r0, sp
   1517c:	str	r2, [sp, #12]
   15180:	strd	r2, [sp, #16]
   15184:	ldr	r3, [r4, #24]
   15188:	str	r3, [sp, #24]
   1518c:	ldr	r3, [r4, #28]
   15190:	str	r3, [sp, #28]
   15194:	ldr	r3, [r4, #32]
   15198:	str	r3, [sp, #32]
   1519c:	ldr	r3, [r4, #36]	; 0x24
   151a0:	str	r3, [sp, #36]	; 0x24
   151a4:	bl	14a2c <__assert_fail@plt+0x3668>
   151a8:	subs	r5, r0, #0
   151ac:	beq	151e4 <__assert_fail@plt+0x3e20>
   151b0:	ldr	r0, [r4]
   151b4:	bl	12a60 <__assert_fail@plt+0x169c>
   151b8:	ldr	r3, [sp]
   151bc:	str	r3, [r4]
   151c0:	ldr	r3, [sp, #4]
   151c4:	str	r3, [r4, #4]
   151c8:	ldr	r3, [sp, #8]
   151cc:	str	r3, [r4, #8]
   151d0:	ldr	r3, [sp, #12]
   151d4:	str	r3, [r4, #12]
   151d8:	ldr	r3, [sp, #36]	; 0x24
   151dc:	str	r3, [r4, #36]	; 0x24
   151e0:	b	15138 <__assert_fail@plt+0x3d74>
   151e4:	ldr	r3, [sp, #36]	; 0x24
   151e8:	mov	r2, #1
   151ec:	mov	r1, sp
   151f0:	mov	r0, r4
   151f4:	str	r3, [r4, #36]	; 0x24
   151f8:	bl	14a2c <__assert_fail@plt+0x3668>
   151fc:	cmp	r0, #0
   15200:	bne	15208 <__assert_fail@plt+0x3e44>
   15204:	bl	1137c <abort@plt>
   15208:	mov	r2, r5
   1520c:	mov	r1, sp
   15210:	mov	r0, r4
   15214:	bl	14a2c <__assert_fail@plt+0x3668>
   15218:	cmp	r0, #0
   1521c:	beq	15204 <__assert_fail@plt+0x3e40>
   15220:	ldr	r0, [sp]
   15224:	bl	12a60 <__assert_fail@plt+0x169c>
   15228:	b	15138 <__assert_fail@plt+0x3d74>
   1522c:	mov	r5, #1
   15230:	b	15138 <__assert_fail@plt+0x3d74>
   15234:	push	{r0, r1, r4, r5, r6, lr}
   15238:	subs	r6, r1, #0
   1523c:	bne	15244 <__assert_fail@plt+0x3e80>
   15240:	bl	1137c <abort@plt>
   15244:	mov	r5, r2
   15248:	mov	r3, #0
   1524c:	add	r2, sp, #4
   15250:	mov	r4, r0
   15254:	bl	148a0 <__assert_fail@plt+0x34dc>
   15258:	cmp	r0, #0
   1525c:	beq	15274 <__assert_fail@plt+0x3eb0>
   15260:	cmp	r5, #0
   15264:	strne	r0, [r5]
   15268:	movne	r0, #0
   1526c:	moveq	r0, r5
   15270:	b	152f4 <__assert_fail@plt+0x3f30>
   15274:	vldr	s15, [r4, #12]
   15278:	ldr	r3, [r4, #20]
   1527c:	vcvt.f32.u32	s14, s15
   15280:	vldr	s15, [r4, #8]
   15284:	vldr	s13, [r3, #8]
   15288:	vcvt.f32.u32	s15, s15
   1528c:	vmul.f32	s15, s15, s13
   15290:	vcmpe.f32	s14, s15
   15294:	vmrs	APSR_nzcv, fpscr
   15298:	ble	15330 <__assert_fail@plt+0x3f6c>
   1529c:	add	r0, r4, #20
   152a0:	bl	1497c <__assert_fail@plt+0x35b8>
   152a4:	vldr	s15, [r4, #8]
   152a8:	vldr	s14, [r4, #12]
   152ac:	ldr	r3, [r4, #20]
   152b0:	vcvt.f32.u32	s15, s15
   152b4:	vcvt.f32.u32	s14, s14
   152b8:	vldr	s13, [r3, #8]
   152bc:	vmul.f32	s12, s13, s15
   152c0:	vcmpe.f32	s14, s12
   152c4:	vmrs	APSR_nzcv, fpscr
   152c8:	ble	15330 <__assert_fail@plt+0x3f6c>
   152cc:	vldr	s14, [r3, #12]
   152d0:	ldrb	r3, [r3, #16]
   152d4:	vmul.f32	s15, s15, s14
   152d8:	vldr	s14, [pc, #204]	; 153ac <__assert_fail@plt+0x3fe8>
   152dc:	cmp	r3, #0
   152e0:	vmuleq.f32	s15, s15, s13
   152e4:	vcmpe.f32	s15, s14
   152e8:	vmrs	APSR_nzcv, fpscr
   152ec:	blt	152fc <__assert_fail@plt+0x3f38>
   152f0:	mvn	r0, #0
   152f4:	add	sp, sp, #8
   152f8:	pop	{r4, r5, r6, pc}
   152fc:	vcvt.u32.f32	s15, s15
   15300:	mov	r0, r4
   15304:	vmov	r1, s15
   15308:	bl	15114 <__assert_fail@plt+0x3d50>
   1530c:	cmp	r0, #0
   15310:	beq	152f0 <__assert_fail@plt+0x3f2c>
   15314:	mov	r3, #0
   15318:	add	r2, sp, #4
   1531c:	mov	r1, r6
   15320:	mov	r0, r4
   15324:	bl	148a0 <__assert_fail@plt+0x34dc>
   15328:	cmp	r0, #0
   1532c:	bne	15240 <__assert_fail@plt+0x3e7c>
   15330:	ldr	r3, [sp, #4]
   15334:	ldr	r2, [r3]
   15338:	cmp	r2, #0
   1533c:	beq	1538c <__assert_fail@plt+0x3fc8>
   15340:	ldr	r0, [r4, #36]	; 0x24
   15344:	cmp	r0, #0
   15348:	ldrne	r3, [r0, #4]
   1534c:	strne	r3, [r4, #36]	; 0x24
   15350:	bne	15364 <__assert_fail@plt+0x3fa0>
   15354:	mov	r0, #8
   15358:	bl	17cd0 <__assert_fail@plt+0x690c>
   1535c:	cmp	r0, #0
   15360:	beq	152f0 <__assert_fail@plt+0x3f2c>
   15364:	ldr	r3, [sp, #4]
   15368:	ldr	r2, [r3, #4]
   1536c:	str	r6, [r0]
   15370:	str	r2, [r0, #4]
   15374:	str	r0, [r3, #4]
   15378:	ldr	r3, [r4, #16]
   1537c:	add	r3, r3, #1
   15380:	str	r3, [r4, #16]
   15384:	mov	r0, #1
   15388:	b	152f4 <__assert_fail@plt+0x3f30>
   1538c:	str	r6, [r3]
   15390:	ldr	r3, [r4, #16]
   15394:	add	r3, r3, #1
   15398:	str	r3, [r4, #16]
   1539c:	ldr	r3, [r4, #12]
   153a0:	add	r3, r3, #1
   153a4:	str	r3, [r4, #12]
   153a8:	b	15384 <__assert_fail@plt+0x3fc0>
   153ac:	svcmi	0x00800000
   153b0:	push	{r0, r1, r4, lr}
   153b4:	add	r2, sp, #4
   153b8:	mov	r4, r1
   153bc:	bl	15234 <__assert_fail@plt+0x3e70>
   153c0:	cmn	r0, #1
   153c4:	moveq	r4, #0
   153c8:	beq	153d4 <__assert_fail@plt+0x4010>
   153cc:	cmp	r0, #0
   153d0:	ldreq	r4, [sp, #4]
   153d4:	mov	r0, r4
   153d8:	add	sp, sp, #8
   153dc:	pop	{r4, pc}
   153e0:	push	{r0, r1, r4, r5, r6, lr}
   153e4:	mov	r3, #1
   153e8:	add	r2, sp, #4
   153ec:	mov	r4, r0
   153f0:	bl	148a0 <__assert_fail@plt+0x34dc>
   153f4:	subs	r5, r0, #0
   153f8:	beq	154b0 <__assert_fail@plt+0x40ec>
   153fc:	ldr	r3, [r4, #16]
   15400:	sub	r3, r3, #1
   15404:	str	r3, [r4, #16]
   15408:	ldr	r3, [sp, #4]
   1540c:	ldr	r3, [r3]
   15410:	cmp	r3, #0
   15414:	bne	154b0 <__assert_fail@plt+0x40ec>
   15418:	vldr	s14, [r4, #8]
   1541c:	ldr	r3, [r4, #12]
   15420:	vcvt.f32.u32	s14, s14
   15424:	sub	r3, r3, #1
   15428:	vmov	s15, r3
   1542c:	str	r3, [r4, #12]
   15430:	ldr	r3, [r4, #20]
   15434:	vldr	s13, [r3]
   15438:	vcvt.f32.u32	s15, s15
   1543c:	vmul.f32	s14, s14, s13
   15440:	vcmpe.f32	s15, s14
   15444:	vmrs	APSR_nzcv, fpscr
   15448:	bpl	154b0 <__assert_fail@plt+0x40ec>
   1544c:	add	r0, r4, #20
   15450:	bl	1497c <__assert_fail@plt+0x35b8>
   15454:	vldr	s15, [r4, #8]
   15458:	vldr	s14, [r4, #12]
   1545c:	ldr	r3, [r4, #20]
   15460:	vcvt.f32.u32	s15, s15
   15464:	vcvt.f32.u32	s13, s14
   15468:	vldr	s14, [r3]
   1546c:	vmul.f32	s14, s15, s14
   15470:	vcmpe.f32	s13, s14
   15474:	vmrs	APSR_nzcv, fpscr
   15478:	bpl	154b0 <__assert_fail@plt+0x40ec>
   1547c:	ldrb	r2, [r3, #16]
   15480:	mov	r0, r4
   15484:	vldr	s14, [r3, #4]
   15488:	cmp	r2, #0
   1548c:	vmul.f32	s15, s15, s14
   15490:	vldreq	s14, [r3, #8]
   15494:	vmuleq.f32	s15, s15, s14
   15498:	vcvt.u32.f32	s15, s15
   1549c:	vmov	r1, s15
   154a0:	bl	15114 <__assert_fail@plt+0x3d50>
   154a4:	cmp	r0, #0
   154a8:	ldreq	r0, [r4, #36]	; 0x24
   154ac:	beq	154c8 <__assert_fail@plt+0x4104>
   154b0:	mov	r0, r5
   154b4:	add	sp, sp, #8
   154b8:	pop	{r4, r5, r6, pc}
   154bc:	ldr	r6, [r0, #4]
   154c0:	bl	12a60 <__assert_fail@plt+0x169c>
   154c4:	mov	r0, r6
   154c8:	cmp	r0, #0
   154cc:	bne	154bc <__assert_fail@plt+0x40f8>
   154d0:	str	r0, [r4, #36]	; 0x24
   154d4:	b	154b0 <__assert_fail@plt+0x40ec>
   154d8:	b	153e0 <__assert_fail@plt+0x401c>
   154dc:	mov	r3, #1
   154e0:	str	r1, [r0]
   154e4:	str	r1, [r0, #4]
   154e8:	str	r1, [r0, #8]
   154ec:	strb	r3, [r0, #28]
   154f0:	mov	r3, #0
   154f4:	str	r1, [r0, #12]
   154f8:	str	r1, [r0, #16]
   154fc:	str	r3, [r0, #20]
   15500:	str	r3, [r0, #24]
   15504:	bx	lr
   15508:	ldrb	r0, [r0, #28]
   1550c:	bx	lr
   15510:	ldrb	r2, [r0, #28]
   15514:	mov	r3, r0
   15518:	ldr	ip, [r0, #20]
   1551c:	eor	r2, r2, #1
   15520:	add	ip, r2, ip
   15524:	and	ip, ip, #3
   15528:	ldr	r0, [r0, ip, lsl #2]
   1552c:	str	r1, [r3, ip, lsl #2]
   15530:	ldr	r1, [r3, #24]
   15534:	str	ip, [r3, #20]
   15538:	cmp	r1, ip
   1553c:	addeq	r2, r2, r1
   15540:	andeq	r2, r2, #3
   15544:	streq	r2, [r3, #24]
   15548:	mov	r2, #0
   1554c:	strb	r2, [r3, #28]
   15550:	bx	lr
   15554:	ldrb	r2, [r0, #28]
   15558:	cmp	r2, #0
   1555c:	beq	15568 <__assert_fail@plt+0x41a4>
   15560:	push	{r4, lr}
   15564:	bl	1137c <abort@plt>
   15568:	ldr	r1, [r0, #16]
   1556c:	mov	r3, r0
   15570:	ldr	r2, [r0, #20]
   15574:	ldr	r0, [r0, r2, lsl #2]
   15578:	str	r1, [r3, r2, lsl #2]
   1557c:	ldr	r1, [r3, #24]
   15580:	cmp	r2, r1
   15584:	addne	r2, r2, #3
   15588:	moveq	r2, #1
   1558c:	andne	r2, r2, #3
   15590:	strbeq	r2, [r3, #28]
   15594:	strne	r2, [r3, #20]
   15598:	bx	lr
   1559c:	push	{r4, r5, r6, lr}
   155a0:	mov	r3, #0
   155a4:	mov	r4, r0
   155a8:	mov	r5, r1
   155ac:	add	r6, r2, #20
   155b0:	strb	r3, [r2, #20]
   155b4:	mov	r2, #10
   155b8:	mov	r3, #0
   155bc:	mov	r0, r4
   155c0:	mov	r1, r5
   155c4:	bl	183b4 <__assert_fail@plt+0x6ff0>
   155c8:	add	r2, r2, #48	; 0x30
   155cc:	mov	r3, #0
   155d0:	mov	r0, r4
   155d4:	mov	r1, r5
   155d8:	strb	r2, [r6, #-1]!
   155dc:	mov	r2, #10
   155e0:	bl	183b4 <__assert_fail@plt+0x6ff0>
   155e4:	cmp	r5, #0
   155e8:	cmpeq	r4, #9
   155ec:	bhi	155f8 <__assert_fail@plt+0x4234>
   155f0:	mov	r0, r6
   155f4:	pop	{r4, r5, r6, pc}
   155f8:	mov	r4, r0
   155fc:	mov	r5, r1
   15600:	b	155b4 <__assert_fail@plt+0x41f0>
   15604:	push	{r2, r3}
   15608:	push	{r0, r1, r2, lr}
   1560c:	ldr	r2, [sp, #16]
   15610:	ands	r3, r2, #64	; 0x40
   15614:	addne	r3, sp, #20
   15618:	strne	r3, [sp, #4]
   1561c:	ldrne	r3, [sp, #20]
   15620:	bl	11250 <openat64@plt>
   15624:	bl	16cd4 <__assert_fail@plt+0x5910>
   15628:	add	sp, sp, #12
   1562c:	pop	{lr}		; (ldr lr, [sp], #4)
   15630:	add	sp, sp, #8
   15634:	bx	lr
   15638:	orr	r2, r2, #540672	; 0x84000
   1563c:	push	{r4, r5, r6, r7, r8, lr}
   15640:	mov	r5, r3
   15644:	orr	r2, r2, #2304	; 0x900
   15648:	bl	15604 <__assert_fail@plt+0x4240>
   1564c:	subs	r6, r0, #0
   15650:	movlt	r4, #0
   15654:	blt	15680 <__assert_fail@plt+0x42bc>
   15658:	bl	11310 <fdopendir@plt>
   1565c:	subs	r4, r0, #0
   15660:	strne	r6, [r5]
   15664:	bne	15680 <__assert_fail@plt+0x42bc>
   15668:	bl	11268 <__errno_location@plt>
   1566c:	mov	r5, r0
   15670:	mov	r0, r6
   15674:	ldr	r7, [r5]
   15678:	bl	11388 <close@plt>
   1567c:	str	r7, [r5]
   15680:	mov	r0, r4
   15684:	pop	{r4, r5, r6, r7, r8, pc}
   15688:	push	{r4, r5, r6, lr}
   1568c:	subs	r4, r0, #0
   15690:	bne	156a8 <__assert_fail@plt+0x42e4>
   15694:	ldr	r3, [pc, #124]	; 15718 <__assert_fail@plt+0x4354>
   15698:	ldr	r0, [pc, #124]	; 1571c <__assert_fail@plt+0x4358>
   1569c:	ldr	r1, [r3]
   156a0:	bl	11364 <fputs@plt>
   156a4:	bl	1137c <abort@plt>
   156a8:	mov	r1, #47	; 0x2f
   156ac:	bl	112ec <strrchr@plt>
   156b0:	subs	r6, r0, #0
   156b4:	beq	15704 <__assert_fail@plt+0x4340>
   156b8:	add	r5, r6, #1
   156bc:	sub	r3, r5, r4
   156c0:	cmp	r3, #6
   156c4:	ble	15704 <__assert_fail@plt+0x4340>
   156c8:	mov	r2, #7
   156cc:	ldr	r1, [pc, #76]	; 15720 <__assert_fail@plt+0x435c>
   156d0:	sub	r0, r6, #6
   156d4:	bl	11370 <strncmp@plt>
   156d8:	cmp	r0, #0
   156dc:	bne	15704 <__assert_fail@plt+0x4340>
   156e0:	mov	r2, #3
   156e4:	ldr	r1, [pc, #56]	; 15724 <__assert_fail@plt+0x4360>
   156e8:	mov	r0, r5
   156ec:	bl	11370 <strncmp@plt>
   156f0:	cmp	r0, #0
   156f4:	ldreq	r3, [pc, #44]	; 15728 <__assert_fail@plt+0x4364>
   156f8:	addeq	r4, r6, #4
   156fc:	movne	r4, r5
   15700:	streq	r4, [r3]
   15704:	ldr	r3, [pc, #32]	; 1572c <__assert_fail@plt+0x4368>
   15708:	str	r4, [r3]
   1570c:	ldr	r3, [pc, #28]	; 15730 <__assert_fail@plt+0x436c>
   15710:	str	r4, [r3]
   15714:	pop	{r4, r5, r6, pc}
   15718:	muleq	r2, r8, r1
   1571c:	andeq	r9, r1, r5, ror #14
   15720:	muleq	r1, sp, r7
   15724:	andeq	r9, r1, r5, lsr #15
   15728:	andeq	sl, r2, r8, lsl #3
   1572c:	andeq	sl, r2, r8, asr #3
   15730:	andeq	sl, r2, ip, lsl #3
   15734:	push	{r4, lr}
   15738:	mov	r2, #48	; 0x30
   1573c:	mov	r4, r1
   15740:	mov	r1, #0
   15744:	bl	11280 <memset@plt>
   15748:	cmp	r4, #10
   1574c:	bne	15754 <__assert_fail@plt+0x4390>
   15750:	bl	1137c <abort@plt>
   15754:	str	r4, [r0]
   15758:	pop	{r4, pc}
   1575c:	push	{r4, r5, r6, lr}
   15760:	mov	r2, #5
   15764:	mov	r6, r0
   15768:	mov	r5, r1
   1576c:	mov	r1, r0
   15770:	mov	r0, #0
   15774:	bl	11130 <dcgettext@plt>
   15778:	cmp	r6, r0
   1577c:	mov	r4, r0
   15780:	bne	157f0 <__assert_fail@plt+0x442c>
   15784:	bl	18218 <__assert_fail@plt+0x6e54>
   15788:	ldrb	r3, [r0]
   1578c:	bic	r3, r3, #32
   15790:	cmp	r3, #85	; 0x55
   15794:	bne	157f8 <__assert_fail@plt+0x4434>
   15798:	ldrb	r3, [r0, #1]
   1579c:	bic	r3, r3, #32
   157a0:	cmp	r3, #84	; 0x54
   157a4:	bne	15868 <__assert_fail@plt+0x44a4>
   157a8:	ldrb	r3, [r0, #2]
   157ac:	bic	r3, r3, #32
   157b0:	cmp	r3, #70	; 0x46
   157b4:	bne	15868 <__assert_fail@plt+0x44a4>
   157b8:	ldrb	r3, [r0, #3]
   157bc:	cmp	r3, #45	; 0x2d
   157c0:	bne	15868 <__assert_fail@plt+0x44a4>
   157c4:	ldrb	r3, [r0, #4]
   157c8:	cmp	r3, #56	; 0x38
   157cc:	bne	15868 <__assert_fail@plt+0x44a4>
   157d0:	ldrb	r3, [r0, #5]
   157d4:	cmp	r3, #0
   157d8:	bne	15868 <__assert_fail@plt+0x44a4>
   157dc:	ldrb	r2, [r4]
   157e0:	ldr	r3, [pc, #144]	; 15878 <__assert_fail@plt+0x44b4>
   157e4:	ldr	r4, [pc, #144]	; 1587c <__assert_fail@plt+0x44b8>
   157e8:	cmp	r2, #96	; 0x60
   157ec:	movne	r4, r3
   157f0:	mov	r0, r4
   157f4:	pop	{r4, r5, r6, pc}
   157f8:	cmp	r3, #71	; 0x47
   157fc:	bne	15868 <__assert_fail@plt+0x44a4>
   15800:	ldrb	r3, [r0, #1]
   15804:	bic	r3, r3, #32
   15808:	cmp	r3, #66	; 0x42
   1580c:	bne	15868 <__assert_fail@plt+0x44a4>
   15810:	ldrb	r3, [r0, #2]
   15814:	cmp	r3, #49	; 0x31
   15818:	bne	15868 <__assert_fail@plt+0x44a4>
   1581c:	ldrb	r3, [r0, #3]
   15820:	cmp	r3, #56	; 0x38
   15824:	bne	15868 <__assert_fail@plt+0x44a4>
   15828:	ldrb	r3, [r0, #4]
   1582c:	cmp	r3, #48	; 0x30
   15830:	bne	15868 <__assert_fail@plt+0x44a4>
   15834:	ldrb	r3, [r0, #5]
   15838:	cmp	r3, #51	; 0x33
   1583c:	bne	15868 <__assert_fail@plt+0x44a4>
   15840:	ldrb	r3, [r0, #6]
   15844:	cmp	r3, #48	; 0x30
   15848:	bne	15868 <__assert_fail@plt+0x44a4>
   1584c:	ldrb	r3, [r0, #7]
   15850:	cmp	r3, #0
   15854:	bne	15868 <__assert_fail@plt+0x44a4>
   15858:	ldrb	r2, [r4]
   1585c:	ldr	r3, [pc, #28]	; 15880 <__assert_fail@plt+0x44bc>
   15860:	ldr	r4, [pc, #28]	; 15884 <__assert_fail@plt+0x44c0>
   15864:	b	157e8 <__assert_fail@plt+0x4424>
   15868:	ldr	r4, [pc, #24]	; 15888 <__assert_fail@plt+0x44c4>
   1586c:	cmp	r5, #9
   15870:	ldr	r3, [pc, #20]	; 1588c <__assert_fail@plt+0x44c8>
   15874:	b	157ec <__assert_fail@plt+0x4428>
   15878:	andeq	r9, r1, r2, lsl #16
   1587c:	andeq	r9, r1, sp, lsl #16
   15880:	andeq	r9, r1, r6, lsl #16
   15884:	andeq	r9, r1, r9, lsl #16
   15888:	andeq	r9, r1, r0, lsl #16
   1588c:	andeq	r9, r1, r1, lsl r8
   15890:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15894:	sub	sp, sp, #108	; 0x6c
   15898:	mov	r8, r0
   1589c:	mov	r5, r1
   158a0:	mov	r6, #0
   158a4:	str	r3, [sp, #40]	; 0x28
   158a8:	str	r2, [sp, #48]	; 0x30
   158ac:	ldr	sl, [sp, #144]	; 0x90
   158b0:	bl	11184 <__ctype_get_mb_cur_max@plt>
   158b4:	ldr	r3, [sp, #148]	; 0x94
   158b8:	str	r6, [sp, #24]
   158bc:	str	r6, [sp, #32]
   158c0:	str	r6, [sp, #44]	; 0x2c
   158c4:	str	r6, [sp, #52]	; 0x34
   158c8:	ubfx	r7, r3, #1, #1
   158cc:	mov	r3, #1
   158d0:	str	r6, [sp, #60]	; 0x3c
   158d4:	str	r3, [sp, #72]	; 0x48
   158d8:	str	r0, [sp, #76]	; 0x4c
   158dc:	cmp	sl, #10
   158e0:	ldrls	pc, [pc, sl, lsl #2]
   158e4:	b	15b28 <__assert_fail@plt+0x4764>
   158e8:	andeq	r5, r1, r4, lsl r9
   158ec:	andeq	r5, r1, r0, asr #22
   158f0:	andeq	r5, r1, r4, asr #21
   158f4:	ldrdeq	r5, [r1], -ip
   158f8:	andeq	r5, r1, ip, lsr #21
   158fc:	andeq	r5, r1, r4, lsl #20
   15900:	andeq	r5, r1, r4, ror #19
   15904:	andeq	r5, r1, ip, lsr #22
   15908:	andeq	r5, r1, r4, lsr sl
   1590c:	andeq	r5, r1, r4, lsr sl
   15910:	andeq	r5, r1, r4, lsr sl
   15914:	mov	r4, sl
   15918:	mov	r7, #0
   1591c:	mov	r9, r5
   15920:	mov	r3, #0
   15924:	str	r6, [sp, #68]	; 0x44
   15928:	str	r3, [sp, #28]
   1592c:	ldr	r3, [sp, #40]	; 0x28
   15930:	cmn	r3, #1
   15934:	bne	164d4 <__assert_fail@plt+0x5110>
   15938:	ldr	r2, [sp, #28]
   1593c:	ldr	r3, [sp, #48]	; 0x30
   15940:	ldrb	r3, [r3, r2]
   15944:	adds	r3, r3, #0
   15948:	movne	r3, #1
   1594c:	str	r3, [sp, #36]	; 0x24
   15950:	ldr	r3, [sp, #36]	; 0x24
   15954:	cmp	r3, #0
   15958:	bne	15b64 <__assert_fail@plt+0x47a0>
   1595c:	sub	r3, sl, #2
   15960:	cmp	r4, #0
   15964:	clz	r3, r3
   15968:	movne	r2, #0
   1596c:	lsr	r3, r3, #5
   15970:	andeq	r2, r3, r7
   15974:	cmp	r2, #0
   15978:	bne	15d28 <__assert_fail@plt+0x4964>
   1597c:	eor	r7, r7, #1
   15980:	ands	r3, r3, r7
   15984:	beq	1654c <__assert_fail@plt+0x5188>
   15988:	ldr	r2, [sp, #68]	; 0x44
   1598c:	cmp	r2, #0
   15990:	beq	16514 <__assert_fail@plt+0x5150>
   15994:	ldr	r3, [sp, #72]	; 0x48
   15998:	cmp	r3, #0
   1599c:	beq	164e8 <__assert_fail@plt+0x5124>
   159a0:	ldr	r2, [sp, #48]	; 0x30
   159a4:	ldr	r3, [sp, #160]	; 0xa0
   159a8:	ldr	r1, [sp, #60]	; 0x3c
   159ac:	str	r3, [sp, #16]
   159b0:	ldr	r3, [sp, #156]	; 0x9c
   159b4:	str	r3, [sp, #12]
   159b8:	ldr	r3, [sp, #152]	; 0x98
   159bc:	str	r3, [sp, #8]
   159c0:	ldr	r3, [sp, #148]	; 0x94
   159c4:	str	r3, [sp, #4]
   159c8:	mov	r3, #5
   159cc:	str	r3, [sp]
   159d0:	ldr	r3, [sp, #40]	; 0x28
   159d4:	mov	r0, r8
   159d8:	bl	15890 <__assert_fail@plt+0x44cc>
   159dc:	mov	r4, r0
   159e0:	b	16540 <__assert_fail@plt+0x517c>
   159e4:	ldr	r3, [pc, #2948]	; 16570 <__assert_fail@plt+0x51ac>
   159e8:	mov	r7, #1
   159ec:	mov	r4, #0
   159f0:	mov	sl, #5
   159f4:	str	r7, [sp, #24]
   159f8:	str	r7, [sp, #32]
   159fc:	str	r3, [sp, #44]	; 0x2c
   15a00:	b	1591c <__assert_fail@plt+0x4558>
   15a04:	cmp	r7, #0
   15a08:	bne	15b4c <__assert_fail@plt+0x4788>
   15a0c:	cmp	r5, #0
   15a10:	mov	r4, #1
   15a14:	movne	r3, #34	; 0x22
   15a18:	strbne	r3, [r8]
   15a1c:	mov	r3, #1
   15a20:	str	r3, [sp, #24]
   15a24:	str	r3, [sp, #32]
   15a28:	ldr	r3, [pc, #2880]	; 16570 <__assert_fail@plt+0x51ac>
   15a2c:	str	r3, [sp, #44]	; 0x2c
   15a30:	b	1591c <__assert_fail@plt+0x4558>
   15a34:	cmp	sl, #10
   15a38:	beq	15a5c <__assert_fail@plt+0x4698>
   15a3c:	mov	r1, sl
   15a40:	ldr	r0, [pc, #2860]	; 16574 <__assert_fail@plt+0x51b0>
   15a44:	bl	1575c <__assert_fail@plt+0x4398>
   15a48:	mov	r1, sl
   15a4c:	str	r0, [sp, #156]	; 0x9c
   15a50:	ldr	r0, [pc, #2848]	; 16578 <__assert_fail@plt+0x51b4>
   15a54:	bl	1575c <__assert_fail@plt+0x4398>
   15a58:	str	r0, [sp, #160]	; 0xa0
   15a5c:	cmp	r7, #0
   15a60:	moveq	r4, r7
   15a64:	beq	15a7c <__assert_fail@plt+0x46b8>
   15a68:	mov	r4, #0
   15a6c:	b	15a8c <__assert_fail@plt+0x46c8>
   15a70:	cmp	r5, r4
   15a74:	strbhi	r3, [r8, r4]
   15a78:	add	r4, r4, #1
   15a7c:	ldr	r3, [sp, #156]	; 0x9c
   15a80:	ldrb	r3, [r3, r4]
   15a84:	cmp	r3, #0
   15a88:	bne	15a70 <__assert_fail@plt+0x46ac>
   15a8c:	ldr	r0, [sp, #160]	; 0xa0
   15a90:	bl	11238 <strlen@plt>
   15a94:	ldr	r3, [sp, #160]	; 0xa0
   15a98:	str	r0, [sp, #32]
   15a9c:	str	r3, [sp, #44]	; 0x2c
   15aa0:	mov	r3, #1
   15aa4:	str	r3, [sp, #24]
   15aa8:	b	1591c <__assert_fail@plt+0x4558>
   15aac:	mov	r3, #1
   15ab0:	cmp	r7, #0
   15ab4:	streq	r3, [sp, #24]
   15ab8:	beq	15afc <__assert_fail@plt+0x4738>
   15abc:	str	r3, [sp, #32]
   15ac0:	b	15ae8 <__assert_fail@plt+0x4724>
   15ac4:	cmp	r7, #0
   15ac8:	beq	15afc <__assert_fail@plt+0x4738>
   15acc:	mov	r3, #1
   15ad0:	str	r3, [sp, #32]
   15ad4:	ldr	r3, [pc, #2716]	; 16578 <__assert_fail@plt+0x51b4>
   15ad8:	b	15b5c <__assert_fail@plt+0x4798>
   15adc:	mov	r7, #1
   15ae0:	str	r7, [sp, #24]
   15ae4:	str	r7, [sp, #32]
   15ae8:	ldr	r3, [pc, #2696]	; 16578 <__assert_fail@plt+0x51b4>
   15aec:	mov	r4, #0
   15af0:	str	r3, [sp, #44]	; 0x2c
   15af4:	mov	sl, #2
   15af8:	b	1591c <__assert_fail@plt+0x4558>
   15afc:	cmp	r5, #0
   15b00:	movne	r3, #39	; 0x27
   15b04:	movne	r7, #0
   15b08:	strbne	r3, [r8]
   15b0c:	moveq	r7, r5
   15b10:	mov	r3, #1
   15b14:	mov	r4, #1
   15b18:	str	r3, [sp, #32]
   15b1c:	ldr	r3, [pc, #2644]	; 16578 <__assert_fail@plt+0x51b4>
   15b20:	str	r3, [sp, #44]	; 0x2c
   15b24:	b	15af4 <__assert_fail@plt+0x4730>
   15b28:	bl	1137c <abort@plt>
   15b2c:	mov	r3, #1
   15b30:	mov	r7, #0
   15b34:	str	r3, [sp, #24]
   15b38:	mov	r4, #0
   15b3c:	b	1591c <__assert_fail@plt+0x4558>
   15b40:	mov	r7, #1
   15b44:	str	sl, [sp, #32]
   15b48:	b	15ae8 <__assert_fail@plt+0x4724>
   15b4c:	mov	r3, #1
   15b50:	str	r7, [sp, #24]
   15b54:	str	r3, [sp, #32]
   15b58:	ldr	r3, [pc, #2576]	; 16570 <__assert_fail@plt+0x51ac>
   15b5c:	str	r3, [sp, #44]	; 0x2c
   15b60:	b	15b38 <__assert_fail@plt+0x4774>
   15b64:	ldr	fp, [sp, #24]
   15b68:	ldr	r3, [sp, #32]
   15b6c:	cmp	sl, #2
   15b70:	moveq	fp, #0
   15b74:	andne	fp, fp, #1
   15b78:	adds	r5, r3, #0
   15b7c:	movne	r5, #1
   15b80:	ands	r3, fp, r5
   15b84:	str	r3, [sp, #64]	; 0x40
   15b88:	beq	15c58 <__assert_fail@plt+0x4894>
   15b8c:	ldr	r3, [sp, #28]
   15b90:	ldr	r2, [sp, #32]
   15b94:	cmp	r2, #1
   15b98:	add	r6, r3, r2
   15b9c:	mov	r3, r2
   15ba0:	ldr	r2, [sp, #40]	; 0x28
   15ba4:	movls	r3, #0
   15ba8:	movhi	r3, #1
   15bac:	cmn	r2, #1
   15bb0:	movne	r3, #0
   15bb4:	cmp	r3, #0
   15bb8:	beq	15bc8 <__assert_fail@plt+0x4804>
   15bbc:	ldr	r0, [sp, #48]	; 0x30
   15bc0:	bl	11238 <strlen@plt>
   15bc4:	str	r0, [sp, #40]	; 0x28
   15bc8:	ldr	r3, [sp, #40]	; 0x28
   15bcc:	cmp	r6, r3
   15bd0:	bhi	15c50 <__assert_fail@plt+0x488c>
   15bd4:	ldr	r0, [sp, #28]
   15bd8:	ldr	r2, [sp, #32]
   15bdc:	ldr	r3, [sp, #48]	; 0x30
   15be0:	ldr	r1, [sp, #44]	; 0x2c
   15be4:	add	r0, r3, r0
   15be8:	bl	1110c <memcmp@plt>
   15bec:	cmp	r0, #0
   15bf0:	bne	15c50 <__assert_fail@plt+0x488c>
   15bf4:	cmp	r7, #0
   15bf8:	beq	15c58 <__assert_fail@plt+0x4894>
   15bfc:	str	r7, [sp, #24]
   15c00:	ldr	r3, [sp, #24]
   15c04:	mov	r1, r9
   15c08:	ldr	r2, [sp, #48]	; 0x30
   15c0c:	cmp	sl, #2
   15c10:	movne	r3, #0
   15c14:	andeq	r3, r3, #1
   15c18:	cmp	r3, #0
   15c1c:	ldr	r3, [sp, #160]	; 0xa0
   15c20:	movne	sl, #4
   15c24:	str	sl, [sp]
   15c28:	str	r3, [sp, #16]
   15c2c:	ldr	r3, [sp, #156]	; 0x9c
   15c30:	str	r3, [sp, #12]
   15c34:	mov	r3, #0
   15c38:	str	r3, [sp, #8]
   15c3c:	ldr	r3, [sp, #148]	; 0x94
   15c40:	bic	r3, r3, #2
   15c44:	str	r3, [sp, #4]
   15c48:	ldr	r3, [sp, #40]	; 0x28
   15c4c:	b	159d4 <__assert_fail@plt+0x4610>
   15c50:	mov	r3, #0
   15c54:	str	r3, [sp, #64]	; 0x40
   15c58:	ldr	r2, [sp, #28]
   15c5c:	ldr	r3, [sp, #48]	; 0x30
   15c60:	add	r3, r3, r2
   15c64:	str	r3, [sp, #80]	; 0x50
   15c68:	ldr	r3, [sp, #48]	; 0x30
   15c6c:	ldrb	r6, [r3, r2]
   15c70:	cmp	r6, #58	; 0x3a
   15c74:	bhi	15dd8 <__assert_fail@plt+0x4a14>
   15c78:	cmp	r6, #43	; 0x2b
   15c7c:	bcs	15f98 <__assert_fail@plt+0x4bd4>
   15c80:	cmp	r6, #32
   15c84:	beq	15fec <__assert_fail@plt+0x4c28>
   15c88:	bhi	15d30 <__assert_fail@plt+0x496c>
   15c8c:	cmp	r6, #9
   15c90:	beq	16194 <__assert_fail@plt+0x4dd0>
   15c94:	bhi	15cf4 <__assert_fail@plt+0x4930>
   15c98:	cmp	r6, #7
   15c9c:	beq	161a4 <__assert_fail@plt+0x4de0>
   15ca0:	bhi	161c0 <__assert_fail@plt+0x4dfc>
   15ca4:	cmp	r6, #0
   15ca8:	beq	16008 <__assert_fail@plt+0x4c44>
   15cac:	ldr	r3, [sp, #76]	; 0x4c
   15cb0:	cmp	r3, #1
   15cb4:	bne	1620c <__assert_fail@plt+0x4e48>
   15cb8:	bl	11214 <__ctype_b_loc@plt>
   15cbc:	ldr	r2, [r0]
   15cc0:	sxth	r3, r6
   15cc4:	lsl	r3, r3, #1
   15cc8:	ldrh	r5, [r2, r3]
   15ccc:	ldr	r3, [sp, #76]	; 0x4c
   15cd0:	ubfx	r5, r5, #14, #1
   15cd4:	str	r3, [sp, #56]	; 0x38
   15cd8:	ldr	r3, [sp, #24]
   15cdc:	eor	fp, r5, #1
   15ce0:	and	fp, fp, r3
   15ce4:	ands	fp, fp, #255	; 0xff
   15ce8:	beq	15ec8 <__assert_fail@plt+0x4b04>
   15cec:	mov	r5, #0
   15cf0:	b	162b8 <__assert_fail@plt+0x4ef4>
   15cf4:	cmp	r6, #11
   15cf8:	beq	161c8 <__assert_fail@plt+0x4e04>
   15cfc:	bcc	1619c <__assert_fail@plt+0x4dd8>
   15d00:	cmp	r6, #12
   15d04:	beq	161d0 <__assert_fail@plt+0x4e0c>
   15d08:	cmp	r6, #13
   15d0c:	moveq	r3, #114	; 0x72
   15d10:	bne	15cac <__assert_fail@plt+0x48e8>
   15d14:	cmp	sl, #2
   15d18:	movne	r2, #0
   15d1c:	andeq	r2, r7, #1
   15d20:	cmp	r2, #0
   15d24:	beq	161a8 <__assert_fail@plt+0x4de4>
   15d28:	mov	sl, #2
   15d2c:	b	15c00 <__assert_fail@plt+0x483c>
   15d30:	cmp	r6, #37	; 0x25
   15d34:	beq	15f98 <__assert_fail@plt+0x4bd4>
   15d38:	bhi	15d4c <__assert_fail@plt+0x4988>
   15d3c:	cmp	r6, #35	; 0x23
   15d40:	beq	15fe0 <__assert_fail@plt+0x4c1c>
   15d44:	mov	r5, #0
   15d48:	b	15ff0 <__assert_fail@plt+0x4c2c>
   15d4c:	cmp	r6, #39	; 0x27
   15d50:	bne	15d44 <__assert_fail@plt+0x4980>
   15d54:	cmp	sl, #2
   15d58:	ldrne	r5, [sp, #36]	; 0x24
   15d5c:	movne	r3, r5
   15d60:	strne	r3, [sp, #68]	; 0x44
   15d64:	bne	160e4 <__assert_fail@plt+0x4d20>
   15d68:	cmp	r7, #0
   15d6c:	bne	15c00 <__assert_fail@plt+0x483c>
   15d70:	ldr	r3, [sp, #60]	; 0x3c
   15d74:	cmp	r9, #0
   15d78:	clz	r3, r3
   15d7c:	lsr	r3, r3, #5
   15d80:	moveq	r3, #0
   15d84:	cmp	r3, #0
   15d88:	strne	r9, [sp, #60]	; 0x3c
   15d8c:	movne	r9, #0
   15d90:	bne	15da0 <__assert_fail@plt+0x49dc>
   15d94:	cmp	r9, r4
   15d98:	movhi	r3, #39	; 0x27
   15d9c:	strbhi	r3, [r8, r4]
   15da0:	add	r3, r4, #1
   15da4:	ldr	r5, [sp, #36]	; 0x24
   15da8:	mov	fp, #0
   15dac:	cmp	r3, r9
   15db0:	movcc	r2, #92	; 0x5c
   15db4:	str	fp, [sp, #52]	; 0x34
   15db8:	strbcc	r2, [r8, r3]
   15dbc:	add	r3, r4, #2
   15dc0:	add	r4, r4, #3
   15dc4:	cmp	r3, r9
   15dc8:	str	r5, [sp, #68]	; 0x44
   15dcc:	movcc	r2, #39	; 0x27
   15dd0:	strbcc	r2, [r8, r3]
   15dd4:	b	15ec8 <__assert_fail@plt+0x4b04>
   15dd8:	cmp	r6, #94	; 0x5e
   15ddc:	beq	15d44 <__assert_fail@plt+0x4980>
   15de0:	bhi	15fa0 <__assert_fail@plt+0x4bdc>
   15de4:	cmp	r6, #90	; 0x5a
   15de8:	bhi	15f8c <__assert_fail@plt+0x4bc8>
   15dec:	cmp	r6, #65	; 0x41
   15df0:	bcs	15f98 <__assert_fail@plt+0x4bd4>
   15df4:	cmp	r6, #62	; 0x3e
   15df8:	bls	15d44 <__assert_fail@plt+0x4980>
   15dfc:	cmp	r6, #63	; 0x3f
   15e00:	bne	15cac <__assert_fail@plt+0x48e8>
   15e04:	cmp	sl, #2
   15e08:	beq	160ec <__assert_fail@plt+0x4d28>
   15e0c:	cmp	sl, #5
   15e10:	movne	fp, #0
   15e14:	bne	164bc <__assert_fail@plt+0x50f8>
   15e18:	ldr	r3, [sp, #148]	; 0x94
   15e1c:	tst	r3, #4
   15e20:	beq	160f4 <__assert_fail@plt+0x4d30>
   15e24:	ldr	r3, [sp, #28]
   15e28:	add	r2, r3, #2
   15e2c:	ldr	r3, [sp, #40]	; 0x28
   15e30:	cmp	r2, r3
   15e34:	bcs	160f4 <__assert_fail@plt+0x4d30>
   15e38:	ldr	r1, [sp, #28]
   15e3c:	ldr	r3, [sp, #48]	; 0x30
   15e40:	add	r3, r3, r1
   15e44:	ldrb	r1, [r3, #1]
   15e48:	cmp	r1, #63	; 0x3f
   15e4c:	bne	160f4 <__assert_fail@plt+0x4d30>
   15e50:	ldr	r3, [sp, #48]	; 0x30
   15e54:	ldrb	r6, [r3, r2]
   15e58:	sub	r3, r6, #33	; 0x21
   15e5c:	uxtb	r3, r3
   15e60:	cmp	r3, #29
   15e64:	bhi	164c4 <__assert_fail@plt+0x5100>
   15e68:	ldr	r0, [pc, #1804]	; 1657c <__assert_fail@plt+0x51b8>
   15e6c:	mov	r5, #1
   15e70:	ands	r5, r0, r5, lsl r3
   15e74:	beq	164cc <__assert_fail@plt+0x5108>
   15e78:	cmp	r7, #0
   15e7c:	bne	15c00 <__assert_fail@plt+0x483c>
   15e80:	cmp	r9, r4
   15e84:	add	r3, r4, #1
   15e88:	str	r2, [sp, #28]
   15e8c:	mov	r5, #0
   15e90:	strbhi	r1, [r8, r4]
   15e94:	cmp	r9, r3
   15e98:	mov	fp, r5
   15e9c:	movhi	r1, #34	; 0x22
   15ea0:	strbhi	r1, [r8, r3]
   15ea4:	add	r3, r4, #2
   15ea8:	cmp	r9, r3
   15eac:	movhi	r1, #34	; 0x22
   15eb0:	strbhi	r1, [r8, r3]
   15eb4:	add	r3, r4, #3
   15eb8:	add	r4, r4, #4
   15ebc:	cmp	r9, r3
   15ec0:	movhi	r1, #63	; 0x3f
   15ec4:	strbhi	r1, [r8, r3]
   15ec8:	ldr	r3, [sp, #24]
   15ecc:	eor	r3, r3, #1
   15ed0:	cmp	sl, #2
   15ed4:	orreq	r3, r3, #1
   15ed8:	eor	r3, r3, #1
   15edc:	orr	r3, r7, r3
   15ee0:	tst	r3, #255	; 0xff
   15ee4:	beq	15f10 <__assert_fail@plt+0x4b4c>
   15ee8:	ldr	r3, [sp, #152]	; 0x98
   15eec:	cmp	r3, #0
   15ef0:	beq	15f10 <__assert_fail@plt+0x4b4c>
   15ef4:	ldr	r1, [sp, #152]	; 0x98
   15ef8:	ubfx	r2, r6, #5, #8
   15efc:	and	r3, r6, #31
   15f00:	ldr	r2, [r1, r2, lsl #2]
   15f04:	lsr	r3, r2, r3
   15f08:	tst	r3, #1
   15f0c:	bne	15f1c <__assert_fail@plt+0x4b58>
   15f10:	ldr	r3, [sp, #64]	; 0x40
   15f14:	cmp	r3, #0
   15f18:	beq	16114 <__assert_fail@plt+0x4d50>
   15f1c:	sub	r3, sl, #2
   15f20:	cmp	r7, #0
   15f24:	clz	r3, r3
   15f28:	lsr	r3, r3, #5
   15f2c:	bne	15c00 <__assert_fail@plt+0x483c>
   15f30:	ldr	r2, [sp, #52]	; 0x34
   15f34:	eor	r2, r2, #1
   15f38:	ands	r3, r3, r2
   15f3c:	beq	15f74 <__assert_fail@plt+0x4bb0>
   15f40:	cmp	r9, r4
   15f44:	str	r3, [sp, #52]	; 0x34
   15f48:	movhi	r2, #39	; 0x27
   15f4c:	strbhi	r2, [r8, r4]
   15f50:	add	r2, r4, #1
   15f54:	cmp	r9, r2
   15f58:	movhi	r1, #36	; 0x24
   15f5c:	strbhi	r1, [r8, r2]
   15f60:	add	r2, r4, #2
   15f64:	add	r4, r4, #3
   15f68:	cmp	r9, r2
   15f6c:	movhi	r1, #39	; 0x27
   15f70:	strbhi	r1, [r8, r2]
   15f74:	cmp	r9, r4
   15f78:	ldr	fp, [sp, #36]	; 0x24
   15f7c:	movhi	r3, #92	; 0x5c
   15f80:	strbhi	r3, [r8, r4]
   15f84:	add	r4, r4, #1
   15f88:	b	16114 <__assert_fail@plt+0x4d50>
   15f8c:	cmp	r6, #92	; 0x5c
   15f90:	beq	160fc <__assert_fail@plt+0x4d38>
   15f94:	bls	15d44 <__assert_fail@plt+0x4980>
   15f98:	ldr	r5, [sp, #36]	; 0x24
   15f9c:	b	160e4 <__assert_fail@plt+0x4d20>
   15fa0:	cmp	r6, #122	; 0x7a
   15fa4:	bhi	15fc4 <__assert_fail@plt+0x4c00>
   15fa8:	cmp	r6, #97	; 0x61
   15fac:	bcs	15f98 <__assert_fail@plt+0x4bd4>
   15fb0:	cmp	r6, #95	; 0x5f
   15fb4:	beq	15f98 <__assert_fail@plt+0x4bd4>
   15fb8:	cmp	r6, #96	; 0x60
   15fbc:	bne	15cac <__assert_fail@plt+0x48e8>
   15fc0:	b	15d44 <__assert_fail@plt+0x4980>
   15fc4:	cmp	r6, #124	; 0x7c
   15fc8:	beq	15d44 <__assert_fail@plt+0x4980>
   15fcc:	bcc	161d8 <__assert_fail@plt+0x4e14>
   15fd0:	cmp	r6, #125	; 0x7d
   15fd4:	beq	161d8 <__assert_fail@plt+0x4e14>
   15fd8:	cmp	r6, #126	; 0x7e
   15fdc:	bne	15cac <__assert_fail@plt+0x48e8>
   15fe0:	ldr	r3, [sp, #28]
   15fe4:	cmp	r3, #0
   15fe8:	bne	160f4 <__assert_fail@plt+0x4d30>
   15fec:	ldr	r5, [sp, #36]	; 0x24
   15ff0:	cmp	sl, #2
   15ff4:	movne	fp, #0
   15ff8:	andeq	fp, r7, #1
   15ffc:	cmp	fp, #0
   16000:	beq	15ec8 <__assert_fail@plt+0x4b04>
   16004:	b	15d28 <__assert_fail@plt+0x4964>
   16008:	ldr	r3, [sp, #24]
   1600c:	cmp	r3, #0
   16010:	beq	160d8 <__assert_fail@plt+0x4d14>
   16014:	sub	r2, sl, #2
   16018:	cmp	r7, #0
   1601c:	clz	r2, r2
   16020:	lsr	r2, r2, #5
   16024:	bne	15bfc <__assert_fail@plt+0x4838>
   16028:	ldr	r3, [sp, #52]	; 0x34
   1602c:	eor	r3, r3, #1
   16030:	ands	r2, r2, r3
   16034:	moveq	r3, r4
   16038:	beq	16070 <__assert_fail@plt+0x4cac>
   1603c:	cmp	r9, r4
   16040:	str	r2, [sp, #52]	; 0x34
   16044:	movhi	r3, #39	; 0x27
   16048:	strbhi	r3, [r8, r4]
   1604c:	add	r3, r4, #1
   16050:	cmp	r9, r3
   16054:	movhi	r1, #36	; 0x24
   16058:	strbhi	r1, [r8, r3]
   1605c:	add	r3, r4, #2
   16060:	cmp	r9, r3
   16064:	movhi	r1, #39	; 0x27
   16068:	strbhi	r1, [r8, r3]
   1606c:	add	r3, r4, #3
   16070:	cmp	r9, r3
   16074:	add	r4, r3, #1
   16078:	movhi	r2, #92	; 0x5c
   1607c:	strbhi	r2, [r8, r3]
   16080:	cmp	fp, #0
   16084:	beq	164ac <__assert_fail@plt+0x50e8>
   16088:	ldr	r2, [sp, #28]
   1608c:	ldr	r1, [sp, #40]	; 0x28
   16090:	add	r2, r2, #1
   16094:	cmp	r2, r1
   16098:	bcs	160d0 <__assert_fail@plt+0x4d0c>
   1609c:	ldr	r1, [sp, #48]	; 0x30
   160a0:	mov	r6, #48	; 0x30
   160a4:	ldrb	r2, [r1, r2]
   160a8:	sub	r2, r2, #48	; 0x30
   160ac:	cmp	r2, #9
   160b0:	bhi	164bc <__assert_fail@plt+0x50f8>
   160b4:	cmp	r9, r4
   160b8:	add	r2, r3, #2
   160bc:	strbhi	r6, [r8, r4]
   160c0:	cmp	r9, r2
   160c4:	add	r4, r3, #3
   160c8:	movhi	r1, #48	; 0x30
   160cc:	strbhi	r1, [r8, r2]
   160d0:	mov	r5, #0
   160d4:	b	164b4 <__assert_fail@plt+0x50f0>
   160d8:	ldr	r3, [sp, #148]	; 0x94
   160dc:	ands	r5, r3, #1
   160e0:	bne	16168 <__assert_fail@plt+0x4da4>
   160e4:	mov	fp, #0
   160e8:	b	15ec8 <__assert_fail@plt+0x4b04>
   160ec:	cmp	r7, #0
   160f0:	bne	15c00 <__assert_fail@plt+0x483c>
   160f4:	mov	r5, #0
   160f8:	b	160e4 <__assert_fail@plt+0x4d20>
   160fc:	cmp	sl, #2
   16100:	bne	16174 <__assert_fail@plt+0x4db0>
   16104:	cmp	r7, #0
   16108:	bne	15c00 <__assert_fail@plt+0x483c>
   1610c:	mov	r5, r7
   16110:	mov	fp, r7
   16114:	ldr	r3, [sp, #52]	; 0x34
   16118:	eor	fp, fp, #1
   1611c:	tst	r3, fp
   16120:	beq	1614c <__assert_fail@plt+0x4d88>
   16124:	cmp	r9, r4
   16128:	movhi	r3, #39	; 0x27
   1612c:	strbhi	r3, [r8, r4]
   16130:	add	r3, r4, #1
   16134:	add	r4, r4, #2
   16138:	cmp	r9, r3
   1613c:	movhi	r2, #39	; 0x27
   16140:	strbhi	r2, [r8, r3]
   16144:	mov	r3, #0
   16148:	str	r3, [sp, #52]	; 0x34
   1614c:	cmp	r9, r4
   16150:	ldr	r3, [sp, #72]	; 0x48
   16154:	strbhi	r6, [r8, r4]
   16158:	cmp	r5, #0
   1615c:	add	r4, r4, #1
   16160:	moveq	r3, #0
   16164:	str	r3, [sp, #72]	; 0x48
   16168:	ldr	r3, [sp, #28]
   1616c:	add	r3, r3, #1
   16170:	b	15928 <__assert_fail@plt+0x4564>
   16174:	ldr	r3, [sp, #24]
   16178:	and	r3, r3, r7
   1617c:	tst	r5, r3
   16180:	moveq	r3, r6
   16184:	beq	15d14 <__assert_fail@plt+0x4950>
   16188:	mov	fp, #0
   1618c:	mov	r5, fp
   16190:	b	16114 <__assert_fail@plt+0x4d50>
   16194:	mov	r3, #116	; 0x74
   16198:	b	15d14 <__assert_fail@plt+0x4950>
   1619c:	mov	r3, #110	; 0x6e
   161a0:	b	15d14 <__assert_fail@plt+0x4950>
   161a4:	mov	r3, #97	; 0x61
   161a8:	ldr	r2, [sp, #24]
   161ac:	cmp	r2, #0
   161b0:	beq	160f4 <__assert_fail@plt+0x4d30>
   161b4:	mov	r6, r3
   161b8:	mov	r5, #0
   161bc:	b	15f1c <__assert_fail@plt+0x4b58>
   161c0:	mov	r3, #98	; 0x62
   161c4:	b	161a8 <__assert_fail@plt+0x4de4>
   161c8:	mov	r3, #118	; 0x76
   161cc:	b	161a8 <__assert_fail@plt+0x4de4>
   161d0:	mov	r3, #102	; 0x66
   161d4:	b	161a8 <__assert_fail@plt+0x4de4>
   161d8:	ldr	r3, [sp, #40]	; 0x28
   161dc:	cmn	r3, #1
   161e0:	bne	16200 <__assert_fail@plt+0x4e3c>
   161e4:	ldr	r3, [sp, #48]	; 0x30
   161e8:	ldrb	r3, [r3, #1]
   161ec:	adds	r3, r3, #0
   161f0:	movne	r3, #1
   161f4:	cmp	r3, #0
   161f8:	bne	160f4 <__assert_fail@plt+0x4d30>
   161fc:	b	15fe0 <__assert_fail@plt+0x4c1c>
   16200:	ldr	r3, [sp, #40]	; 0x28
   16204:	subs	r3, r3, #1
   16208:	b	161f0 <__assert_fail@plt+0x4e2c>
   1620c:	mov	r3, #0
   16210:	mov	r2, #0
   16214:	strd	r2, [sp, #96]	; 0x60
   16218:	ldr	r3, [sp, #40]	; 0x28
   1621c:	cmn	r3, #1
   16220:	bne	16230 <__assert_fail@plt+0x4e6c>
   16224:	ldr	r0, [sp, #48]	; 0x30
   16228:	bl	11238 <strlen@plt>
   1622c:	str	r0, [sp, #40]	; 0x28
   16230:	ldr	r5, [sp, #36]	; 0x24
   16234:	mov	r3, #0
   16238:	str	r3, [sp, #56]	; 0x38
   1623c:	ldr	r3, [sp, #28]
   16240:	add	r0, sp, #92	; 0x5c
   16244:	ldr	r1, [sp, #40]	; 0x28
   16248:	ldr	r2, [sp, #56]	; 0x38
   1624c:	add	r2, r3, r2
   16250:	ldr	r3, [sp, #48]	; 0x30
   16254:	add	fp, r3, r2
   16258:	sub	r2, r1, r2
   1625c:	add	r3, sp, #96	; 0x60
   16260:	mov	r1, fp
   16264:	bl	1824c <__assert_fail@plt+0x6e88>
   16268:	subs	r2, r0, #0
   1626c:	beq	162ac <__assert_fail@plt+0x4ee8>
   16270:	cmn	r2, #1
   16274:	beq	16480 <__assert_fail@plt+0x50bc>
   16278:	cmn	r2, #2
   1627c:	bne	163f0 <__assert_fail@plt+0x502c>
   16280:	ldr	r3, [sp, #28]
   16284:	ldr	r2, [sp, #56]	; 0x38
   16288:	add	r3, r3, r2
   1628c:	ldr	r2, [sp, #40]	; 0x28
   16290:	cmp	r2, r3
   16294:	bls	16480 <__assert_fail@plt+0x50bc>
   16298:	ldr	r2, [sp, #56]	; 0x38
   1629c:	ldr	r3, [sp, #80]	; 0x50
   162a0:	ldrb	r5, [r3, r2]
   162a4:	cmp	r5, #0
   162a8:	bne	163e0 <__assert_fail@plt+0x501c>
   162ac:	ldr	r3, [sp, #56]	; 0x38
   162b0:	cmp	r3, #1
   162b4:	bls	15cd8 <__assert_fail@plt+0x4914>
   162b8:	ldr	r3, [sp, #28]
   162bc:	mov	fp, #0
   162c0:	mov	ip, #92	; 0x5c
   162c4:	ldr	r2, [sp, #56]	; 0x38
   162c8:	add	r3, r3, r2
   162cc:	ldr	r2, [sp, #24]
   162d0:	str	r3, [sp, #36]	; 0x24
   162d4:	eor	r3, r5, #1
   162d8:	and	r3, r3, r2
   162dc:	mov	r2, #39	; 0x27
   162e0:	uxtb	r3, r3
   162e4:	cmp	r3, #0
   162e8:	beq	16488 <__assert_fail@plt+0x50c4>
   162ec:	sub	r0, sl, #2
   162f0:	cmp	r7, #0
   162f4:	clz	r0, r0
   162f8:	lsr	r0, r0, #5
   162fc:	bne	15bfc <__assert_fail@plt+0x4838>
   16300:	ldr	r1, [sp, #52]	; 0x34
   16304:	eor	r1, r1, #1
   16308:	ands	r1, r0, r1
   1630c:	beq	1633c <__assert_fail@plt+0x4f78>
   16310:	cmp	r9, r4
   16314:	add	r0, r4, #1
   16318:	str	r1, [sp, #52]	; 0x34
   1631c:	strbhi	r2, [r8, r4]
   16320:	cmp	r9, r0
   16324:	movhi	lr, #36	; 0x24
   16328:	strbhi	lr, [r8, r0]
   1632c:	add	r0, r4, #2
   16330:	add	r4, r4, #3
   16334:	cmp	r9, r0
   16338:	strbhi	r2, [r8, r0]
   1633c:	cmp	r9, r4
   16340:	add	r0, r4, #1
   16344:	mov	fp, r3
   16348:	strbhi	ip, [r8, r4]
   1634c:	cmp	r9, r0
   16350:	lsrhi	r1, r6, #6
   16354:	addhi	r1, r1, #48	; 0x30
   16358:	strbhi	r1, [r8, r0]
   1635c:	add	r0, r4, #2
   16360:	add	r4, r4, #3
   16364:	cmp	r9, r0
   16368:	ubfxhi	r1, r6, #3, #3
   1636c:	and	r6, r6, #7
   16370:	add	r6, r6, #48	; 0x30
   16374:	addhi	r1, r1, #48	; 0x30
   16378:	strbhi	r1, [r8, r0]
   1637c:	eor	r0, fp, #1
   16380:	ldr	r1, [sp, #28]
   16384:	ldr	lr, [sp, #52]	; 0x34
   16388:	add	r1, r1, #1
   1638c:	and	r0, r0, lr
   16390:	ldr	lr, [sp, #36]	; 0x24
   16394:	cmp	r1, lr
   16398:	bcs	16114 <__assert_fail@plt+0x4d50>
   1639c:	cmp	r0, #0
   163a0:	beq	163c4 <__assert_fail@plt+0x5000>
   163a4:	cmp	r9, r4
   163a8:	add	r0, r4, #1
   163ac:	strbhi	r2, [r8, r4]
   163b0:	cmp	r9, r0
   163b4:	add	r4, r4, #2
   163b8:	strbhi	r2, [r8, r0]
   163bc:	mov	r0, #0
   163c0:	str	r0, [sp, #52]	; 0x34
   163c4:	ldr	r0, [sp, #48]	; 0x30
   163c8:	cmp	r9, r4
   163cc:	str	r1, [sp, #28]
   163d0:	strbhi	r6, [r8, r4]
   163d4:	add	r4, r4, #1
   163d8:	ldrb	r6, [r0, r1]
   163dc:	b	162e4 <__assert_fail@plt+0x4f20>
   163e0:	ldr	r3, [sp, #56]	; 0x38
   163e4:	add	r3, r3, #1
   163e8:	str	r3, [sp, #56]	; 0x38
   163ec:	b	16280 <__assert_fail@plt+0x4ebc>
   163f0:	cmp	sl, #2
   163f4:	movne	r3, #0
   163f8:	andeq	r3, r7, #1
   163fc:	cmp	r3, #0
   16400:	movne	r1, #1
   16404:	bne	16460 <__assert_fail@plt+0x509c>
   16408:	ldr	r0, [sp, #92]	; 0x5c
   1640c:	str	r2, [sp, #84]	; 0x54
   16410:	bl	11160 <iswprint@plt>
   16414:	ldr	r3, [sp, #56]	; 0x38
   16418:	cmp	r0, #0
   1641c:	add	r0, sp, #96	; 0x60
   16420:	moveq	r5, #0
   16424:	ldr	r2, [sp, #84]	; 0x54
   16428:	add	r3, r3, r2
   1642c:	str	r3, [sp, #56]	; 0x38
   16430:	bl	11100 <mbsinit@plt>
   16434:	cmp	r0, #0
   16438:	beq	1623c <__assert_fail@plt+0x4e78>
   1643c:	b	162ac <__assert_fail@plt+0x4ee8>
   16440:	ldrb	r3, [fp, #1]!
   16444:	cmp	r3, #94	; 0x5e
   16448:	beq	15d28 <__assert_fail@plt+0x4964>
   1644c:	bhi	1646c <__assert_fail@plt+0x50a8>
   16450:	sub	r3, r3, #91	; 0x5b
   16454:	cmp	r3, #1
   16458:	bls	15d28 <__assert_fail@plt+0x4964>
   1645c:	add	r1, r1, #1
   16460:	cmp	r1, r2
   16464:	bne	16440 <__assert_fail@plt+0x507c>
   16468:	b	16408 <__assert_fail@plt+0x5044>
   1646c:	cmp	r3, #96	; 0x60
   16470:	beq	15d28 <__assert_fail@plt+0x4964>
   16474:	cmp	r3, #124	; 0x7c
   16478:	bne	1645c <__assert_fail@plt+0x5098>
   1647c:	b	15d28 <__assert_fail@plt+0x4964>
   16480:	mov	r5, #0
   16484:	b	162ac <__assert_fail@plt+0x4ee8>
   16488:	ldr	r1, [sp, #64]	; 0x40
   1648c:	cmp	r1, #0
   16490:	beq	1637c <__assert_fail@plt+0x4fb8>
   16494:	cmp	r9, r4
   16498:	mov	r1, #0
   1649c:	strbhi	ip, [r8, r4]
   164a0:	add	r4, r4, #1
   164a4:	str	r1, [sp, #64]	; 0x40
   164a8:	b	1637c <__assert_fail@plt+0x4fb8>
   164ac:	mov	r5, fp
   164b0:	ldr	fp, [sp, #24]
   164b4:	mov	r6, #48	; 0x30
   164b8:	b	15ec8 <__assert_fail@plt+0x4b04>
   164bc:	mov	r5, #0
   164c0:	b	15ec8 <__assert_fail@plt+0x4b04>
   164c4:	mov	r6, r1
   164c8:	b	160f4 <__assert_fail@plt+0x4d30>
   164cc:	mov	r6, r1
   164d0:	b	160e4 <__assert_fail@plt+0x4d20>
   164d4:	ldr	r2, [sp, #28]
   164d8:	ldr	r3, [sp, #40]	; 0x28
   164dc:	subs	r3, r3, r2
   164e0:	movne	r3, #1
   164e4:	b	1594c <__assert_fail@plt+0x4588>
   164e8:	ldr	r3, [sp, #60]	; 0x3c
   164ec:	mov	sl, #2
   164f0:	ldr	r7, [sp, #72]	; 0x48
   164f4:	adds	r6, r3, #0
   164f8:	mov	r5, r3
   164fc:	movne	r6, #1
   16500:	cmp	r9, #0
   16504:	movne	r6, #0
   16508:	cmp	r6, #0
   1650c:	bne	158dc <__assert_fail@plt+0x4518>
   16510:	ldr	r3, [sp, #68]	; 0x44
   16514:	ldr	r2, [sp, #44]	; 0x2c
   16518:	cmp	r2, #0
   1651c:	moveq	r3, #0
   16520:	andne	r3, r3, #1
   16524:	cmp	r3, #0
   16528:	movne	r3, r2
   1652c:	subne	r3, r3, #1
   16530:	bne	16560 <__assert_fail@plt+0x519c>
   16534:	cmp	r9, r4
   16538:	movhi	r3, #0
   1653c:	strbhi	r3, [r8, r4]
   16540:	mov	r0, r4
   16544:	add	sp, sp, #108	; 0x6c
   16548:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1654c:	mov	r3, r7
   16550:	b	16514 <__assert_fail@plt+0x5150>
   16554:	cmp	r9, r4
   16558:	strbhi	r2, [r8, r4]
   1655c:	add	r4, r4, #1
   16560:	ldrb	r2, [r3, #1]!
   16564:	cmp	r2, #0
   16568:	bne	16554 <__assert_fail@plt+0x5190>
   1656c:	b	16534 <__assert_fail@plt+0x5170>
   16570:	andeq	r9, r1, r0, lsl #16
   16574:	andeq	r9, r1, r3, lsl r8
   16578:	andeq	r9, r1, r1, lsl r8
   1657c:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   16580:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16584:	sub	sp, sp, #52	; 0x34
   16588:	mov	r6, r0
   1658c:	mov	r5, r3
   16590:	mov	r8, r1
   16594:	mov	r9, r2
   16598:	bl	11268 <__errno_location@plt>
   1659c:	ldr	r3, [r0]
   165a0:	cmn	r6, #-2147483647	; 0x80000001
   165a4:	str	r0, [sp, #24]
   165a8:	ldr	r7, [pc, #368]	; 16720 <__assert_fail@plt+0x535c>
   165ac:	str	r3, [sp, #32]
   165b0:	movne	r3, #0
   165b4:	moveq	r3, #1
   165b8:	orrs	r3, r3, r6, lsr #31
   165bc:	ldr	r4, [r7]
   165c0:	beq	165c8 <__assert_fail@plt+0x5204>
   165c4:	bl	1137c <abort@plt>
   165c8:	ldr	r2, [r7, #4]
   165cc:	cmp	r2, r6
   165d0:	bgt	16640 <__assert_fail@plt+0x527c>
   165d4:	add	sl, r7, #8
   165d8:	mov	r3, #8
   165dc:	cmp	r4, sl
   165e0:	add	r1, sp, #44	; 0x2c
   165e4:	str	r2, [sp, #44]	; 0x2c
   165e8:	sub	r2, r6, r2
   165ec:	movne	r0, r4
   165f0:	moveq	r0, #0
   165f4:	add	r2, r2, #1
   165f8:	str	r3, [sp]
   165fc:	mvn	r3, #-2147483648	; 0x80000000
   16600:	bl	1768c <__assert_fail@plt+0x62c8>
   16604:	cmp	r4, sl
   16608:	mov	fp, r0
   1660c:	str	r0, [r7]
   16610:	ldmeq	r4, {r0, r1}
   16614:	mov	r4, fp
   16618:	ldr	r2, [sp, #44]	; 0x2c
   1661c:	stmeq	fp, {r0, r1}
   16620:	mov	r1, #0
   16624:	ldr	r0, [r7, #4]
   16628:	sub	r2, r2, r0
   1662c:	add	r0, fp, r0, lsl #3
   16630:	lsl	r2, r2, #3
   16634:	bl	11280 <memset@plt>
   16638:	ldr	r3, [sp, #44]	; 0x2c
   1663c:	str	r3, [r7, #4]
   16640:	ldr	r3, [r5, #4]
   16644:	add	sl, r4, r6, lsl #3
   16648:	mov	r2, r8
   1664c:	ldr	fp, [r4, r6, lsl #3]
   16650:	ldr	r7, [sl, #4]
   16654:	orr	r3, r3, #1
   16658:	str	r3, [sp, #28]
   1665c:	add	r3, r5, #8
   16660:	mov	r1, fp
   16664:	str	r3, [sp, #36]	; 0x24
   16668:	mov	r0, r7
   1666c:	ldr	r3, [r5, #44]	; 0x2c
   16670:	str	r3, [sp, #16]
   16674:	ldr	r3, [r5, #40]	; 0x28
   16678:	str	r3, [sp, #12]
   1667c:	add	r3, r5, #8
   16680:	str	r3, [sp, #8]
   16684:	ldr	r3, [sp, #28]
   16688:	str	r3, [sp, #4]
   1668c:	ldr	r3, [r5]
   16690:	str	r3, [sp]
   16694:	mov	r3, r9
   16698:	bl	15890 <__assert_fail@plt+0x44cc>
   1669c:	cmp	fp, r0
   166a0:	bhi	16708 <__assert_fail@plt+0x5344>
   166a4:	ldr	r3, [pc, #120]	; 16724 <__assert_fail@plt+0x5360>
   166a8:	add	fp, r0, #1
   166ac:	str	fp, [r4, r6, lsl #3]
   166b0:	cmp	r7, r3
   166b4:	beq	166c0 <__assert_fail@plt+0x52fc>
   166b8:	mov	r0, r7
   166bc:	bl	12a60 <__assert_fail@plt+0x169c>
   166c0:	mov	r0, fp
   166c4:	bl	1757c <__assert_fail@plt+0x61b8>
   166c8:	ldr	r3, [r5, #44]	; 0x2c
   166cc:	mov	r2, r8
   166d0:	mov	r1, fp
   166d4:	str	r0, [sl, #4]
   166d8:	mov	r7, r0
   166dc:	str	r3, [sp, #16]
   166e0:	ldr	r3, [r5, #40]	; 0x28
   166e4:	str	r3, [sp, #12]
   166e8:	add	r3, r5, #8
   166ec:	str	r3, [sp, #8]
   166f0:	ldr	r3, [sp, #28]
   166f4:	str	r3, [sp, #4]
   166f8:	ldr	r3, [r5]
   166fc:	str	r3, [sp]
   16700:	mov	r3, r9
   16704:	bl	15890 <__assert_fail@plt+0x44cc>
   16708:	ldr	r3, [sp, #24]
   1670c:	mov	r0, r7
   16710:	ldr	r2, [sp, #32]
   16714:	str	r2, [r3]
   16718:	add	sp, sp, #52	; 0x34
   1671c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16720:	andeq	sl, r2, r8, asr #2
   16724:	andeq	sl, r2, ip, asr #3
   16728:	push	{r4, r5, r6, lr}
   1672c:	mov	r5, r0
   16730:	bl	11268 <__errno_location@plt>
   16734:	mov	r4, r0
   16738:	cmp	r5, #0
   1673c:	ldr	r0, [pc, #20]	; 16758 <__assert_fail@plt+0x5394>
   16740:	mov	r1, #48	; 0x30
   16744:	movne	r0, r5
   16748:	ldr	r6, [r4]
   1674c:	bl	1777c <__assert_fail@plt+0x63b8>
   16750:	str	r6, [r4]
   16754:	pop	{r4, r5, r6, pc}
   16758:	andeq	sl, r2, ip, asr #5
   1675c:	ldr	r3, [pc, #12]	; 16770 <__assert_fail@plt+0x53ac>
   16760:	cmp	r0, #0
   16764:	moveq	r0, r3
   16768:	ldr	r0, [r0]
   1676c:	bx	lr
   16770:	andeq	sl, r2, ip, asr #5
   16774:	ldr	r3, [pc, #12]	; 16788 <__assert_fail@plt+0x53c4>
   16778:	cmp	r0, #0
   1677c:	moveq	r0, r3
   16780:	str	r1, [r0]
   16784:	bx	lr
   16788:	andeq	sl, r2, ip, asr #5
   1678c:	ldr	r3, [pc, #52]	; 167c8 <__assert_fail@plt+0x5404>
   16790:	cmp	r0, #0
   16794:	push	{lr}		; (str lr, [sp, #-4]!)
   16798:	lsr	lr, r1, #5
   1679c:	and	r1, r1, #31
   167a0:	moveq	r0, r3
   167a4:	add	r3, r0, #8
   167a8:	ldr	ip, [r3, lr, lsl #2]
   167ac:	lsr	r0, ip, r1
   167b0:	eor	r2, r2, r0
   167b4:	and	r0, r0, #1
   167b8:	and	r2, r2, #1
   167bc:	eor	r1, ip, r2, lsl r1
   167c0:	str	r1, [r3, lr, lsl #2]
   167c4:	pop	{pc}		; (ldr pc, [sp], #4)
   167c8:	andeq	sl, r2, ip, asr #5
   167cc:	ldr	r3, [pc, #16]	; 167e4 <__assert_fail@plt+0x5420>
   167d0:	cmp	r0, #0
   167d4:	movne	r3, r0
   167d8:	ldr	r0, [r3, #4]
   167dc:	str	r1, [r3, #4]
   167e0:	bx	lr
   167e4:	andeq	sl, r2, ip, asr #5
   167e8:	ldr	r3, [pc, #44]	; 1681c <__assert_fail@plt+0x5458>
   167ec:	cmp	r0, #0
   167f0:	moveq	r0, r3
   167f4:	mov	r3, #10
   167f8:	cmp	r2, #0
   167fc:	cmpne	r1, #0
   16800:	str	r3, [r0]
   16804:	bne	16810 <__assert_fail@plt+0x544c>
   16808:	push	{r4, lr}
   1680c:	bl	1137c <abort@plt>
   16810:	str	r1, [r0, #40]	; 0x28
   16814:	str	r2, [r0, #44]	; 0x2c
   16818:	bx	lr
   1681c:	andeq	sl, r2, ip, asr #5
   16820:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16824:	sub	sp, sp, #24
   16828:	mov	sl, r3
   1682c:	mov	r7, r0
   16830:	mov	r8, r1
   16834:	mov	r9, r2
   16838:	ldr	r4, [sp, #56]	; 0x38
   1683c:	ldr	r3, [pc, #88]	; 1689c <__assert_fail@plt+0x54d8>
   16840:	cmp	r4, #0
   16844:	moveq	r4, r3
   16848:	bl	11268 <__errno_location@plt>
   1684c:	ldr	r3, [r4, #44]	; 0x2c
   16850:	mov	r5, r0
   16854:	mov	r2, r9
   16858:	mov	r1, r8
   1685c:	mov	r0, r7
   16860:	ldr	r6, [r5]
   16864:	str	r3, [sp, #16]
   16868:	ldr	r3, [r4, #40]	; 0x28
   1686c:	str	r3, [sp, #12]
   16870:	add	r3, r4, #8
   16874:	str	r3, [sp, #8]
   16878:	ldr	r3, [r4, #4]
   1687c:	str	r3, [sp, #4]
   16880:	ldr	r3, [r4]
   16884:	str	r3, [sp]
   16888:	mov	r3, sl
   1688c:	bl	15890 <__assert_fail@plt+0x44cc>
   16890:	str	r6, [r5]
   16894:	add	sp, sp, #24
   16898:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1689c:	andeq	sl, r2, ip, asr #5
   168a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   168a4:	cmp	r3, #0
   168a8:	sub	sp, sp, #44	; 0x2c
   168ac:	mov	r6, r2
   168b0:	mov	sl, r1
   168b4:	mov	r9, r0
   168b8:	ldr	r4, [pc, #176]	; 16970 <__assert_fail@plt+0x55ac>
   168bc:	movne	r4, r3
   168c0:	bl	11268 <__errno_location@plt>
   168c4:	ldr	r3, [r0]
   168c8:	mov	r1, #0
   168cc:	mov	r2, r9
   168d0:	mov	r8, r0
   168d4:	mov	r0, r1
   168d8:	ldr	r5, [r4, #4]
   168dc:	add	fp, r4, #8
   168e0:	str	r3, [sp, #28]
   168e4:	ldr	r3, [r4, #44]	; 0x2c
   168e8:	cmp	r6, #0
   168ec:	orreq	r5, r5, #1
   168f0:	str	r3, [sp, #16]
   168f4:	ldr	r3, [r4, #40]	; 0x28
   168f8:	stmib	sp, {r5, fp}
   168fc:	str	r3, [sp, #12]
   16900:	ldr	r3, [r4]
   16904:	str	r3, [sp]
   16908:	mov	r3, sl
   1690c:	bl	15890 <__assert_fail@plt+0x44cc>
   16910:	add	r1, r0, #1
   16914:	mov	r7, r0
   16918:	mov	r0, r1
   1691c:	str	r1, [sp, #36]	; 0x24
   16920:	bl	1757c <__assert_fail@plt+0x61b8>
   16924:	ldr	r3, [r4, #44]	; 0x2c
   16928:	mov	r2, r9
   1692c:	ldr	r1, [sp, #36]	; 0x24
   16930:	str	r3, [sp, #16]
   16934:	ldr	r3, [r4, #40]	; 0x28
   16938:	stmib	sp, {r5, fp}
   1693c:	str	r0, [sp, #32]
   16940:	str	r3, [sp, #12]
   16944:	ldr	r3, [r4]
   16948:	str	r3, [sp]
   1694c:	mov	r3, sl
   16950:	bl	15890 <__assert_fail@plt+0x44cc>
   16954:	ldr	r3, [sp, #28]
   16958:	cmp	r6, #0
   1695c:	ldr	r0, [sp, #32]
   16960:	str	r3, [r8]
   16964:	strne	r7, [r6]
   16968:	add	sp, sp, #44	; 0x2c
   1696c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16970:	andeq	sl, r2, ip, asr #5
   16974:	mov	r3, r2
   16978:	mov	r2, #0
   1697c:	b	168a0 <__assert_fail@plt+0x54dc>
   16980:	push	{r4, r5, r6, r7, r8, lr}
   16984:	mov	r6, #1
   16988:	ldr	r4, [pc, #100]	; 169f4 <__assert_fail@plt+0x5630>
   1698c:	ldr	r5, [r4]
   16990:	add	r7, r5, #4
   16994:	ldr	r3, [r4, #4]
   16998:	cmp	r3, r6
   1699c:	bgt	169e4 <__assert_fail@plt+0x5620>
   169a0:	ldr	r6, [pc, #80]	; 169f8 <__assert_fail@plt+0x5634>
   169a4:	ldr	r0, [r5, #4]
   169a8:	cmp	r0, r6
   169ac:	beq	169c0 <__assert_fail@plt+0x55fc>
   169b0:	bl	12a60 <__assert_fail@plt+0x169c>
   169b4:	mov	r3, #256	; 0x100
   169b8:	str	r3, [r4, #8]
   169bc:	str	r6, [r4, #12]
   169c0:	ldr	r6, [pc, #52]	; 169fc <__assert_fail@plt+0x5638>
   169c4:	cmp	r5, r6
   169c8:	beq	169d8 <__assert_fail@plt+0x5614>
   169cc:	mov	r0, r5
   169d0:	bl	12a60 <__assert_fail@plt+0x169c>
   169d4:	str	r6, [r4]
   169d8:	mov	r3, #1
   169dc:	str	r3, [r4, #4]
   169e0:	pop	{r4, r5, r6, r7, r8, pc}
   169e4:	ldr	r0, [r7, r6, lsl #3]
   169e8:	add	r6, r6, #1
   169ec:	bl	12a60 <__assert_fail@plt+0x169c>
   169f0:	b	16994 <__assert_fail@plt+0x55d0>
   169f4:	andeq	sl, r2, r8, asr #2
   169f8:	andeq	sl, r2, ip, asr #3
   169fc:	andeq	sl, r2, r0, asr r1
   16a00:	ldr	r3, [pc, #4]	; 16a0c <__assert_fail@plt+0x5648>
   16a04:	mvn	r2, #0
   16a08:	b	16580 <__assert_fail@plt+0x51bc>
   16a0c:	andeq	sl, r2, ip, asr #5
   16a10:	ldr	r3, [pc]	; 16a18 <__assert_fail@plt+0x5654>
   16a14:	b	16580 <__assert_fail@plt+0x51bc>
   16a18:	andeq	sl, r2, ip, asr #5
   16a1c:	mov	r1, r0
   16a20:	mov	r0, #0
   16a24:	b	16a00 <__assert_fail@plt+0x563c>
   16a28:	mov	r2, r1
   16a2c:	mov	r1, r0
   16a30:	mov	r0, #0
   16a34:	b	16a10 <__assert_fail@plt+0x564c>
   16a38:	push	{r4, r5, lr}
   16a3c:	sub	sp, sp, #52	; 0x34
   16a40:	mov	r5, r2
   16a44:	mov	r4, r0
   16a48:	mov	r0, sp
   16a4c:	bl	15734 <__assert_fail@plt+0x4370>
   16a50:	mov	r3, sp
   16a54:	mvn	r2, #0
   16a58:	mov	r1, r5
   16a5c:	mov	r0, r4
   16a60:	bl	16580 <__assert_fail@plt+0x51bc>
   16a64:	add	sp, sp, #52	; 0x34
   16a68:	pop	{r4, r5, pc}
   16a6c:	push	{r4, r5, r6, lr}
   16a70:	sub	sp, sp, #48	; 0x30
   16a74:	mov	r5, r2
   16a78:	mov	r6, r3
   16a7c:	mov	r4, r0
   16a80:	mov	r0, sp
   16a84:	bl	15734 <__assert_fail@plt+0x4370>
   16a88:	mov	r3, sp
   16a8c:	mov	r2, r6
   16a90:	mov	r1, r5
   16a94:	mov	r0, r4
   16a98:	bl	16580 <__assert_fail@plt+0x51bc>
   16a9c:	add	sp, sp, #48	; 0x30
   16aa0:	pop	{r4, r5, r6, pc}
   16aa4:	mov	r2, r1
   16aa8:	mov	r1, r0
   16aac:	mov	r0, #0
   16ab0:	b	16a38 <__assert_fail@plt+0x5674>
   16ab4:	mov	r3, r2
   16ab8:	mov	r2, r1
   16abc:	mov	r1, r0
   16ac0:	mov	r0, #0
   16ac4:	b	16a6c <__assert_fail@plt+0x56a8>
   16ac8:	push	{r4, r5, r6, lr}
   16acc:	mov	r4, r0
   16ad0:	mov	r5, r1
   16ad4:	mov	r6, r2
   16ad8:	sub	sp, sp, #48	; 0x30
   16adc:	mov	ip, sp
   16ae0:	ldr	lr, [pc, #64]	; 16b28 <__assert_fail@plt+0x5764>
   16ae4:	ldm	lr!, {r0, r1, r2, r3}
   16ae8:	stmia	ip!, {r0, r1, r2, r3}
   16aec:	ldm	lr!, {r0, r1, r2, r3}
   16af0:	stmia	ip!, {r0, r1, r2, r3}
   16af4:	ldm	lr, {r0, r1, r2, r3}
   16af8:	stm	ip, {r0, r1, r2, r3}
   16afc:	mov	r1, r6
   16b00:	mov	r2, #1
   16b04:	mov	r0, sp
   16b08:	bl	1678c <__assert_fail@plt+0x53c8>
   16b0c:	mov	r3, sp
   16b10:	mov	r2, r5
   16b14:	mov	r1, r4
   16b18:	mov	r0, #0
   16b1c:	bl	16580 <__assert_fail@plt+0x51bc>
   16b20:	add	sp, sp, #48	; 0x30
   16b24:	pop	{r4, r5, r6, pc}
   16b28:	andeq	sl, r2, ip, asr #5
   16b2c:	mov	r2, r1
   16b30:	mvn	r1, #0
   16b34:	b	16ac8 <__assert_fail@plt+0x5704>
   16b38:	mov	r1, #58	; 0x3a
   16b3c:	b	16b2c <__assert_fail@plt+0x5768>
   16b40:	mov	r2, #58	; 0x3a
   16b44:	b	16ac8 <__assert_fail@plt+0x5704>
   16b48:	push	{r4, r5, lr}
   16b4c:	sub	sp, sp, #100	; 0x64
   16b50:	mov	r4, r0
   16b54:	mov	r0, sp
   16b58:	mov	r5, r2
   16b5c:	bl	15734 <__assert_fail@plt+0x4370>
   16b60:	mov	ip, sp
   16b64:	add	lr, sp, #48	; 0x30
   16b68:	ldm	ip!, {r0, r1, r2, r3}
   16b6c:	stmia	lr!, {r0, r1, r2, r3}
   16b70:	ldm	ip!, {r0, r1, r2, r3}
   16b74:	stmia	lr!, {r0, r1, r2, r3}
   16b78:	ldm	ip, {r0, r1, r2, r3}
   16b7c:	stm	lr, {r0, r1, r2, r3}
   16b80:	mov	r2, #1
   16b84:	mov	r1, #58	; 0x3a
   16b88:	add	r0, sp, #48	; 0x30
   16b8c:	bl	1678c <__assert_fail@plt+0x53c8>
   16b90:	add	r3, sp, #48	; 0x30
   16b94:	mvn	r2, #0
   16b98:	mov	r1, r5
   16b9c:	mov	r0, r4
   16ba0:	bl	16580 <__assert_fail@plt+0x51bc>
   16ba4:	add	sp, sp, #100	; 0x64
   16ba8:	pop	{r4, r5, pc}
   16bac:	push	{r4, r5, r6, r7, lr}
   16bb0:	mov	r4, r0
   16bb4:	mov	r6, r1
   16bb8:	mov	r7, r2
   16bbc:	mov	r5, r3
   16bc0:	sub	sp, sp, #52	; 0x34
   16bc4:	ldr	lr, [pc, #68]	; 16c10 <__assert_fail@plt+0x584c>
   16bc8:	mov	ip, sp
   16bcc:	ldm	lr!, {r0, r1, r2, r3}
   16bd0:	stmia	ip!, {r0, r1, r2, r3}
   16bd4:	ldm	lr!, {r0, r1, r2, r3}
   16bd8:	stmia	ip!, {r0, r1, r2, r3}
   16bdc:	ldm	lr, {r0, r1, r2, r3}
   16be0:	stm	ip, {r0, r1, r2, r3}
   16be4:	mov	r2, r7
   16be8:	mov	r1, r6
   16bec:	mov	r0, sp
   16bf0:	bl	167e8 <__assert_fail@plt+0x5424>
   16bf4:	ldr	r2, [sp, #72]	; 0x48
   16bf8:	mov	r3, sp
   16bfc:	mov	r1, r5
   16c00:	mov	r0, r4
   16c04:	bl	16580 <__assert_fail@plt+0x51bc>
   16c08:	add	sp, sp, #52	; 0x34
   16c0c:	pop	{r4, r5, r6, r7, pc}
   16c10:	andeq	sl, r2, ip, asr #5
   16c14:	mvn	ip, #0
   16c18:	push	{r0, r1, r2, lr}
   16c1c:	str	ip, [sp]
   16c20:	bl	16bac <__assert_fail@plt+0x57e8>
   16c24:	add	sp, sp, #12
   16c28:	pop	{pc}		; (ldr pc, [sp], #4)
   16c2c:	mov	r3, r2
   16c30:	mov	r2, r1
   16c34:	mov	r1, r0
   16c38:	mov	r0, #0
   16c3c:	b	16c14 <__assert_fail@plt+0x5850>
   16c40:	push	{r0, r1, r2, lr}
   16c44:	str	r3, [sp]
   16c48:	mov	r3, r2
   16c4c:	mov	r2, r1
   16c50:	mov	r1, r0
   16c54:	mov	r0, #0
   16c58:	bl	16bac <__assert_fail@plt+0x57e8>
   16c5c:	add	sp, sp, #12
   16c60:	pop	{pc}		; (ldr pc, [sp], #4)
   16c64:	ldr	r3, [pc]	; 16c6c <__assert_fail@plt+0x58a8>
   16c68:	b	16580 <__assert_fail@plt+0x51bc>
   16c6c:	andeq	sl, r2, r8, asr r1
   16c70:	mov	r2, r1
   16c74:	mov	r1, r0
   16c78:	mov	r0, #0
   16c7c:	b	16c64 <__assert_fail@plt+0x58a0>
   16c80:	mvn	r2, #0
   16c84:	b	16c64 <__assert_fail@plt+0x58a0>
   16c88:	mov	r1, r0
   16c8c:	mov	r0, #0
   16c90:	b	16c80 <__assert_fail@plt+0x58bc>
   16c94:	push	{r4, lr}
   16c98:	sub	sp, sp, #104	; 0x68
   16c9c:	mov	r4, r0
   16ca0:	mov	r1, sp
   16ca4:	ldr	r0, [pc, #36]	; 16cd0 <__assert_fail@plt+0x590c>
   16ca8:	bl	185c4 <__assert_fail@plt+0x7200>
   16cac:	cmp	r0, #0
   16cb0:	ldrdeq	r2, [sp, #96]	; 0x60
   16cb4:	movne	r4, #0
   16cb8:	mov	r0, r4
   16cbc:	strdeq	r2, [r4]
   16cc0:	ldrdeq	r2, [sp]
   16cc4:	strdeq	r2, [r4, #8]
   16cc8:	add	sp, sp, #104	; 0x68
   16ccc:	pop	{r4, pc}
   16cd0:	andeq	r9, r1, r8, ror #22
   16cd4:	cmp	r0, #2
   16cd8:	push	{r4, r5, r6, r7, r8, lr}
   16cdc:	mov	r4, r0
   16ce0:	bhi	16d08 <__assert_fail@plt+0x5944>
   16ce4:	bl	182c8 <__assert_fail@plt+0x6f04>
   16ce8:	mov	r6, r0
   16cec:	bl	11268 <__errno_location@plt>
   16cf0:	mov	r5, r0
   16cf4:	mov	r0, r4
   16cf8:	ldr	r7, [r5]
   16cfc:	mov	r4, r6
   16d00:	bl	11388 <close@plt>
   16d04:	str	r7, [r5]
   16d08:	mov	r0, r4
   16d0c:	pop	{r4, r5, r6, r7, r8, pc}
   16d10:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16d14:	sub	sp, sp, #44	; 0x2c
   16d18:	subs	sl, r3, #0
   16d1c:	mvneq	r7, #0
   16d20:	mov	fp, r2
   16d24:	mov	r4, r1
   16d28:	ldr	r3, [sp, #80]	; 0x50
   16d2c:	ldrne	r7, [sl]
   16d30:	ldr	r9, [r2]
   16d34:	cmp	r3, #0
   16d38:	ldrne	r2, [sp, #80]	; 0x50
   16d3c:	movne	r3, #0
   16d40:	strne	r3, [r2]
   16d44:	ldr	r3, [sp, #84]	; 0x54
   16d48:	cmp	r3, #0
   16d4c:	ldrne	r2, [sp, #84]	; 0x54
   16d50:	movne	r3, #0
   16d54:	strne	r3, [r2]
   16d58:	cmp	r1, #0
   16d5c:	bne	16e68 <__assert_fail@plt+0x5aa4>
   16d60:	ldrb	r3, [r0]
   16d64:	cmp	r3, #0
   16d68:	moveq	r8, r1
   16d6c:	moveq	r6, r1
   16d70:	moveq	r5, r1
   16d74:	beq	16e04 <__assert_fail@plt+0x5a40>
   16d78:	bl	177f0 <__assert_fail@plt+0x642c>
   16d7c:	mov	r5, r0
   16d80:	mov	r6, r4
   16d84:	ldrb	r3, [r5]
   16d88:	adds	r4, r4, #0
   16d8c:	movne	r4, #1
   16d90:	cmp	r6, #0
   16d94:	movne	r4, #0
   16d98:	cmp	r3, #43	; 0x2b
   16d9c:	bne	16ea8 <__assert_fail@plt+0x5ae4>
   16da0:	cmp	r4, #0
   16da4:	movne	r4, #0
   16da8:	ldrne	r3, [pc, #484]	; 16f94 <__assert_fail@plt+0x5bd0>
   16dac:	bne	16df0 <__assert_fail@plt+0x5a2c>
   16db0:	mov	r2, #10
   16db4:	mov	r1, r4
   16db8:	ldr	r3, [pc, #472]	; 16f98 <__assert_fail@plt+0x5bd4>
   16dbc:	mov	r0, r5
   16dc0:	str	r3, [sp]
   16dc4:	add	r3, sp, #16
   16dc8:	bl	17918 <__assert_fail@plt+0x6554>
   16dcc:	cmp	r0, #0
   16dd0:	ldrne	r3, [pc, #452]	; 16f9c <__assert_fail@plt+0x5bd8>
   16dd4:	bne	16dec <__assert_fail@plt+0x5a28>
   16dd8:	ldr	r3, [sp, #16]
   16ddc:	cmn	r3, #1
   16de0:	movne	r9, r3
   16de4:	ldr	r3, [pc, #432]	; 16f9c <__assert_fail@plt+0x5bd8>
   16de8:	movne	r3, #0
   16dec:	mov	r4, #0
   16df0:	str	r3, [sp, #12]
   16df4:	mov	r8, r5
   16df8:	bl	112e0 <endpwent@plt>
   16dfc:	ldr	r3, [sp, #12]
   16e00:	mov	r5, r3
   16e04:	clz	r3, r5
   16e08:	cmp	r6, #0
   16e0c:	lsr	r3, r3, #5
   16e10:	moveq	r3, #0
   16e14:	cmp	r3, #0
   16e18:	beq	16f28 <__assert_fail@plt+0x5b64>
   16e1c:	ldrb	r3, [r6]
   16e20:	cmp	r3, #43	; 0x2b
   16e24:	bne	16f00 <__assert_fail@plt+0x5b3c>
   16e28:	ldr	r3, [pc, #360]	; 16f98 <__assert_fail@plt+0x5bd4>
   16e2c:	mov	r2, #10
   16e30:	mov	r1, #0
   16e34:	mov	r0, r6
   16e38:	str	r3, [sp]
   16e3c:	add	r3, sp, #16
   16e40:	bl	17918 <__assert_fail@plt+0x6554>
   16e44:	cmp	r0, #0
   16e48:	ldrne	r5, [pc, #336]	; 16fa0 <__assert_fail@plt+0x5bdc>
   16e4c:	bne	16f18 <__assert_fail@plt+0x5b54>
   16e50:	ldr	r3, [sp, #16]
   16e54:	ldr	r5, [pc, #324]	; 16fa0 <__assert_fail@plt+0x5bdc>
   16e58:	cmn	r3, #1
   16e5c:	movne	r7, r3
   16e60:	movne	r5, #0
   16e64:	b	16f18 <__assert_fail@plt+0x5b54>
   16e68:	subs	r6, r1, r0
   16e6c:	moveq	r5, r6
   16e70:	beq	16e88 <__assert_fail@plt+0x5ac4>
   16e74:	add	r1, r6, #1
   16e78:	bl	177a0 <__assert_fail@plt+0x63dc>
   16e7c:	mov	r5, r0
   16e80:	mov	r3, #0
   16e84:	strb	r3, [r0, r6]
   16e88:	ldrb	r6, [r4, #1]
   16e8c:	cmp	r6, #0
   16e90:	addne	r6, r4, #1
   16e94:	cmp	r5, #0
   16e98:	moveq	r8, r5
   16e9c:	moveq	r4, r5
   16ea0:	bne	16d84 <__assert_fail@plt+0x59c0>
   16ea4:	b	16e04 <__assert_fail@plt+0x5a40>
   16ea8:	mov	r0, r5
   16eac:	bl	11094 <getpwnam@plt>
   16eb0:	cmp	r0, #0
   16eb4:	beq	16da0 <__assert_fail@plt+0x59dc>
   16eb8:	cmp	r4, #0
   16ebc:	ldr	r9, [r0, #8]
   16ec0:	moveq	r3, r4
   16ec4:	beq	16df0 <__assert_fail@plt+0x5a2c>
   16ec8:	ldr	r7, [r0, #12]
   16ecc:	mov	r0, r7
   16ed0:	bl	113ac <getgrgid@plt>
   16ed4:	subs	r1, r0, #0
   16ed8:	ldrne	r0, [r1]
   16edc:	bne	16eec <__assert_fail@plt+0x5b28>
   16ee0:	add	r2, sp, #16
   16ee4:	mov	r0, r7
   16ee8:	bl	1559c <__assert_fail@plt+0x41d8>
   16eec:	bl	177f0 <__assert_fail@plt+0x642c>
   16ef0:	mov	r4, r0
   16ef4:	bl	11070 <endgrent@plt>
   16ef8:	mov	r3, #0
   16efc:	b	16df0 <__assert_fail@plt+0x5a2c>
   16f00:	mov	r0, r6
   16f04:	bl	113b8 <getgrnam@plt>
   16f08:	cmp	r0, #0
   16f0c:	movne	r5, #0
   16f10:	ldrne	r7, [r0, #8]
   16f14:	beq	16e28 <__assert_fail@plt+0x5a64>
   16f18:	bl	11070 <endgrent@plt>
   16f1c:	mov	r0, r6
   16f20:	bl	177f0 <__assert_fail@plt+0x642c>
   16f24:	mov	r4, r0
   16f28:	cmp	r5, #0
   16f2c:	bne	16f5c <__assert_fail@plt+0x5b98>
   16f30:	ldr	r3, [sp, #80]	; 0x50
   16f34:	cmp	sl, #0
   16f38:	str	r9, [fp]
   16f3c:	strne	r7, [sl]
   16f40:	cmp	r3, #0
   16f44:	strne	r8, [r3]
   16f48:	movne	r8, #0
   16f4c:	ldr	r3, [sp, #84]	; 0x54
   16f50:	cmp	r3, #0
   16f54:	strne	r4, [r3]
   16f58:	movne	r4, #0
   16f5c:	mov	r0, r8
   16f60:	bl	12a60 <__assert_fail@plt+0x169c>
   16f64:	mov	r0, r4
   16f68:	bl	12a60 <__assert_fail@plt+0x169c>
   16f6c:	cmp	r5, #0
   16f70:	beq	16f88 <__assert_fail@plt+0x5bc4>
   16f74:	mov	r1, r5
   16f78:	mov	r2, #5
   16f7c:	mov	r0, #0
   16f80:	bl	11130 <dcgettext@plt>
   16f84:	mov	r5, r0
   16f88:	mov	r0, r5
   16f8c:	add	sp, sp, #44	; 0x2c
   16f90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16f94:	andeq	r9, r1, lr, ror #16
   16f98:	andeq	r8, r1, sl, asr #29
   16f9c:	andeq	r9, r1, r1, ror #16
   16fa0:	andeq	r9, r1, fp, ror r8
   16fa4:	push	{r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   16fa8:	subs	r5, r2, #0
   16fac:	mov	r7, r0
   16fb0:	mov	r8, r1
   16fb4:	mov	r9, r3
   16fb8:	moveq	r4, r5
   16fbc:	ldr	sl, [sp, #40]	; 0x28
   16fc0:	beq	16fd0 <__assert_fail@plt+0x5c0c>
   16fc4:	mov	r1, #58	; 0x3a
   16fc8:	bl	11244 <strchr@plt>
   16fcc:	mov	r4, r0
   16fd0:	mov	r1, r4
   16fd4:	mov	r3, r5
   16fd8:	stm	sp, {r9, sl}
   16fdc:	mov	r2, r8
   16fe0:	mov	r0, r7
   16fe4:	clz	r4, r4
   16fe8:	lsr	r4, r4, #5
   16fec:	bl	16d10 <__assert_fail@plt+0x594c>
   16ff0:	cmp	r5, #0
   16ff4:	mov	r6, r0
   16ff8:	moveq	r4, #0
   16ffc:	cmp	r4, #0
   17000:	beq	17040 <__assert_fail@plt+0x5c7c>
   17004:	cmp	r0, #0
   17008:	beq	1703c <__assert_fail@plt+0x5c78>
   1700c:	mov	r1, #46	; 0x2e
   17010:	mov	r0, r7
   17014:	bl	11244 <strchr@plt>
   17018:	subs	r1, r0, #0
   1701c:	beq	17040 <__assert_fail@plt+0x5c7c>
   17020:	mov	r3, r5
   17024:	mov	r2, r8
   17028:	stm	sp, {r9, sl}
   1702c:	mov	r0, r7
   17030:	bl	16d10 <__assert_fail@plt+0x594c>
   17034:	cmp	r0, #0
   17038:	bne	17040 <__assert_fail@plt+0x5c7c>
   1703c:	mov	r6, #0
   17040:	mov	r0, r6
   17044:	add	sp, sp, #8
   17048:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1704c:	push	{r4, r5, r6, lr}
   17050:	cmp	r1, #0
   17054:	sub	sp, sp, #32
   17058:	mov	r5, r0
   1705c:	ldr	r4, [sp, #48]	; 0x30
   17060:	ldr	r6, [sp, #52]	; 0x34
   17064:	beq	17118 <__assert_fail@plt+0x5d54>
   17068:	strd	r2, [sp]
   1706c:	mov	r3, r1
   17070:	mov	r1, #1
   17074:	ldr	r2, [pc, #856]	; 173d4 <__assert_fail@plt+0x6010>
   17078:	bl	112a4 <__fprintf_chk@plt>
   1707c:	mov	r2, #5
   17080:	ldr	r1, [pc, #848]	; 173d8 <__assert_fail@plt+0x6014>
   17084:	mov	r0, #0
   17088:	bl	11130 <dcgettext@plt>
   1708c:	movw	r3, #2022	; 0x7e6
   17090:	ldr	r2, [pc, #836]	; 173dc <__assert_fail@plt+0x6018>
   17094:	mov	r1, #1
   17098:	str	r3, [sp]
   1709c:	mov	r3, r0
   170a0:	mov	r0, r5
   170a4:	bl	112a4 <__fprintf_chk@plt>
   170a8:	mov	r1, r5
   170ac:	mov	r0, #10
   170b0:	bl	11124 <fputc_unlocked@plt>
   170b4:	mov	r2, #5
   170b8:	ldr	r1, [pc, #800]	; 173e0 <__assert_fail@plt+0x601c>
   170bc:	mov	r0, #0
   170c0:	bl	11130 <dcgettext@plt>
   170c4:	mov	r2, r0
   170c8:	mov	r1, #1
   170cc:	ldr	r3, [pc, #784]	; 173e4 <__assert_fail@plt+0x6020>
   170d0:	mov	r0, r5
   170d4:	bl	112a4 <__fprintf_chk@plt>
   170d8:	mov	r1, r5
   170dc:	mov	r0, #10
   170e0:	bl	11124 <fputc_unlocked@plt>
   170e4:	cmp	r6, #9
   170e8:	ldrls	pc, [pc, r6, lsl #2]
   170ec:	b	173c8 <__assert_fail@plt+0x6004>
   170f0:	andeq	r7, r1, r8, lsl #4
   170f4:	andeq	r7, r1, r0, lsr r1
   170f8:	andeq	r7, r1, ip, asr r1
   170fc:	muleq	r1, r0, r1
   17100:	andeq	r7, r1, ip, asr #3
   17104:	andeq	r7, r1, r0, lsl r2
   17108:	andeq	r7, r1, r8, asr r2
   1710c:	andeq	r7, r1, r8, lsr #5
   17110:	andeq	r7, r1, r0, lsl #6
   17114:	andeq	r7, r1, r0, ror #6
   17118:	mov	r1, #1
   1711c:	str	r3, [sp]
   17120:	mov	r3, r2
   17124:	ldr	r2, [pc, #700]	; 173e8 <__assert_fail@plt+0x6024>
   17128:	bl	112a4 <__fprintf_chk@plt>
   1712c:	b	1707c <__assert_fail@plt+0x5cb8>
   17130:	mov	r2, #5
   17134:	ldr	r1, [pc, #688]	; 173ec <__assert_fail@plt+0x6028>
   17138:	mov	r0, #0
   1713c:	bl	11130 <dcgettext@plt>
   17140:	ldr	r3, [r4]
   17144:	mov	r2, r0
   17148:	mov	r1, #1
   1714c:	mov	r0, r5
   17150:	add	sp, sp, #32
   17154:	pop	{r4, r5, r6, lr}
   17158:	b	112a4 <__fprintf_chk@plt>
   1715c:	mov	r2, #5
   17160:	ldr	r1, [pc, #648]	; 173f0 <__assert_fail@plt+0x602c>
   17164:	mov	r0, #0
   17168:	bl	11130 <dcgettext@plt>
   1716c:	ldr	r3, [r4, #4]
   17170:	mov	r2, r0
   17174:	mov	r1, #1
   17178:	mov	r0, r5
   1717c:	str	r3, [sp, #48]	; 0x30
   17180:	ldr	r3, [r4]
   17184:	add	sp, sp, #32
   17188:	pop	{r4, r5, r6, lr}
   1718c:	b	112a4 <__fprintf_chk@plt>
   17190:	mov	r2, #5
   17194:	ldr	r1, [pc, #600]	; 173f4 <__assert_fail@plt+0x6030>
   17198:	mov	r0, #0
   1719c:	bl	11130 <dcgettext@plt>
   171a0:	ldr	r3, [r4, #8]
   171a4:	mov	r2, r0
   171a8:	mov	r1, #1
   171ac:	mov	r0, r5
   171b0:	str	r3, [sp, #52]	; 0x34
   171b4:	ldr	r3, [r4, #4]
   171b8:	str	r3, [sp, #48]	; 0x30
   171bc:	ldr	r3, [r4]
   171c0:	add	sp, sp, #32
   171c4:	pop	{r4, r5, r6, lr}
   171c8:	b	112a4 <__fprintf_chk@plt>
   171cc:	mov	r2, #5
   171d0:	ldr	r1, [pc, #544]	; 173f8 <__assert_fail@plt+0x6034>
   171d4:	mov	r0, #0
   171d8:	bl	11130 <dcgettext@plt>
   171dc:	ldr	r3, [r4, #12]
   171e0:	mov	r2, r0
   171e4:	mov	r1, #1
   171e8:	mov	r0, r5
   171ec:	str	r3, [sp, #8]
   171f0:	ldr	r3, [r4, #8]
   171f4:	str	r3, [sp, #4]
   171f8:	ldr	r3, [r4, #4]
   171fc:	str	r3, [sp]
   17200:	ldr	r3, [r4]
   17204:	bl	112a4 <__fprintf_chk@plt>
   17208:	add	sp, sp, #32
   1720c:	pop	{r4, r5, r6, pc}
   17210:	mov	r2, #5
   17214:	ldr	r1, [pc, #480]	; 173fc <__assert_fail@plt+0x6038>
   17218:	mov	r0, #0
   1721c:	bl	11130 <dcgettext@plt>
   17220:	ldr	r3, [r4, #16]
   17224:	mov	r2, r0
   17228:	mov	r1, #1
   1722c:	mov	r0, r5
   17230:	str	r3, [sp, #12]
   17234:	ldr	r3, [r4, #12]
   17238:	str	r3, [sp, #8]
   1723c:	ldr	r3, [r4, #8]
   17240:	str	r3, [sp, #4]
   17244:	ldr	r3, [r4, #4]
   17248:	str	r3, [sp]
   1724c:	ldr	r3, [r4]
   17250:	bl	112a4 <__fprintf_chk@plt>
   17254:	b	17208 <__assert_fail@plt+0x5e44>
   17258:	mov	r2, #5
   1725c:	ldr	r1, [pc, #412]	; 17400 <__assert_fail@plt+0x603c>
   17260:	mov	r0, #0
   17264:	bl	11130 <dcgettext@plt>
   17268:	ldr	r3, [r4, #20]
   1726c:	mov	r2, r0
   17270:	mov	r1, #1
   17274:	mov	r0, r5
   17278:	str	r3, [sp, #16]
   1727c:	ldr	r3, [r4, #16]
   17280:	str	r3, [sp, #12]
   17284:	ldr	r3, [r4, #12]
   17288:	str	r3, [sp, #8]
   1728c:	ldr	r3, [r4, #8]
   17290:	str	r3, [sp, #4]
   17294:	ldr	r3, [r4, #4]
   17298:	str	r3, [sp]
   1729c:	ldr	r3, [r4]
   172a0:	bl	112a4 <__fprintf_chk@plt>
   172a4:	b	17208 <__assert_fail@plt+0x5e44>
   172a8:	mov	r2, #5
   172ac:	ldr	r1, [pc, #336]	; 17404 <__assert_fail@plt+0x6040>
   172b0:	mov	r0, #0
   172b4:	bl	11130 <dcgettext@plt>
   172b8:	ldr	r3, [r4, #24]
   172bc:	mov	r2, r0
   172c0:	mov	r1, #1
   172c4:	mov	r0, r5
   172c8:	str	r3, [sp, #20]
   172cc:	ldr	r3, [r4, #20]
   172d0:	str	r3, [sp, #16]
   172d4:	ldr	r3, [r4, #16]
   172d8:	str	r3, [sp, #12]
   172dc:	ldr	r3, [r4, #12]
   172e0:	str	r3, [sp, #8]
   172e4:	ldr	r3, [r4, #8]
   172e8:	str	r3, [sp, #4]
   172ec:	ldr	r3, [r4, #4]
   172f0:	str	r3, [sp]
   172f4:	ldr	r3, [r4]
   172f8:	bl	112a4 <__fprintf_chk@plt>
   172fc:	b	17208 <__assert_fail@plt+0x5e44>
   17300:	mov	r2, #5
   17304:	ldr	r1, [pc, #252]	; 17408 <__assert_fail@plt+0x6044>
   17308:	mov	r0, #0
   1730c:	bl	11130 <dcgettext@plt>
   17310:	ldr	r3, [r4, #28]
   17314:	mov	r2, r0
   17318:	mov	r1, #1
   1731c:	mov	r0, r5
   17320:	str	r3, [sp, #24]
   17324:	ldr	r3, [r4, #24]
   17328:	str	r3, [sp, #20]
   1732c:	ldr	r3, [r4, #20]
   17330:	str	r3, [sp, #16]
   17334:	ldr	r3, [r4, #16]
   17338:	str	r3, [sp, #12]
   1733c:	ldr	r3, [r4, #12]
   17340:	str	r3, [sp, #8]
   17344:	ldr	r3, [r4, #8]
   17348:	str	r3, [sp, #4]
   1734c:	ldr	r3, [r4, #4]
   17350:	str	r3, [sp]
   17354:	ldr	r3, [r4]
   17358:	bl	112a4 <__fprintf_chk@plt>
   1735c:	b	17208 <__assert_fail@plt+0x5e44>
   17360:	ldr	r1, [pc, #164]	; 1740c <__assert_fail@plt+0x6048>
   17364:	mov	r2, #5
   17368:	mov	r0, #0
   1736c:	bl	11130 <dcgettext@plt>
   17370:	ldr	r3, [r4, #32]
   17374:	mov	r2, r0
   17378:	mov	r1, #1
   1737c:	mov	r0, r5
   17380:	str	r3, [sp, #28]
   17384:	ldr	r3, [r4, #28]
   17388:	str	r3, [sp, #24]
   1738c:	ldr	r3, [r4, #24]
   17390:	str	r3, [sp, #20]
   17394:	ldr	r3, [r4, #20]
   17398:	str	r3, [sp, #16]
   1739c:	ldr	r3, [r4, #16]
   173a0:	str	r3, [sp, #12]
   173a4:	ldr	r3, [r4, #12]
   173a8:	str	r3, [sp, #8]
   173ac:	ldr	r3, [r4, #8]
   173b0:	str	r3, [sp, #4]
   173b4:	ldr	r3, [r4, #4]
   173b8:	str	r3, [sp]
   173bc:	ldr	r3, [r4]
   173c0:	bl	112a4 <__fprintf_chk@plt>
   173c4:	b	17208 <__assert_fail@plt+0x5e44>
   173c8:	mov	r2, #5
   173cc:	ldr	r1, [pc, #60]	; 17410 <__assert_fail@plt+0x604c>
   173d0:	b	17368 <__assert_fail@plt+0x5fa4>
   173d4:	andeq	r9, r1, r9, lsl #17
   173d8:	muleq	r1, ip, r8
   173dc:	andeq	r9, r1, sl, ror #22
   173e0:	andeq	r9, r1, r0, lsr #17
   173e4:	andeq	r9, r1, fp, asr #18
   173e8:	muleq	r1, r5, r8
   173ec:	andeq	r9, r1, sp, ror #18
   173f0:	andeq	r9, r1, sp, ror r9
   173f4:	muleq	r1, r4, r9
   173f8:			; <UNDEFINED> instruction: 0x000199b0
   173fc:	ldrdeq	r9, [r1], -r0
   17400:	strdeq	r9, [r1], -r4
   17404:	andeq	r9, r1, ip, lsl sl
   17408:	andeq	r9, r1, r8, asr #20
   1740c:	andeq	r9, r1, r8, ror sl
   17410:	andeq	r9, r1, ip, lsr #21
   17414:	push	{r0, r1, r4, lr}
   17418:	mov	ip, #0
   1741c:	ldr	lr, [sp, #16]
   17420:	ldr	r4, [lr, ip, lsl #2]
   17424:	cmp	r4, #0
   17428:	bne	17440 <__assert_fail@plt+0x607c>
   1742c:	str	lr, [sp]
   17430:	str	ip, [sp, #4]
   17434:	bl	1704c <__assert_fail@plt+0x5c88>
   17438:	add	sp, sp, #8
   1743c:	pop	{r4, pc}
   17440:	add	ip, ip, #1
   17444:	b	17420 <__assert_fail@plt+0x605c>
   17448:	push	{r4, r5, r6, lr}
   1744c:	sub	sp, sp, #48	; 0x30
   17450:	mov	ip, #0
   17454:	add	lr, sp, #8
   17458:	mov	r5, lr
   1745c:	ldr	r6, [sp, #64]	; 0x40
   17460:	ldr	r4, [r6, ip, lsl #2]
   17464:	cmp	r4, #0
   17468:	str	r4, [lr], #4
   1746c:	beq	1747c <__assert_fail@plt+0x60b8>
   17470:	add	ip, ip, #1
   17474:	cmp	ip, #10
   17478:	bne	17460 <__assert_fail@plt+0x609c>
   1747c:	stm	sp, {r5, ip}
   17480:	bl	1704c <__assert_fail@plt+0x5c88>
   17484:	add	sp, sp, #48	; 0x30
   17488:	pop	{r4, r5, r6, pc}
   1748c:	push	{r3}		; (str r3, [sp, #-4]!)
   17490:	push	{r0, r1, r2, r3, lr}
   17494:	add	r3, sp, #24
   17498:	str	r3, [sp]
   1749c:	str	r3, [sp, #12]
   174a0:	ldr	r3, [sp, #20]
   174a4:	bl	17448 <__assert_fail@plt+0x6084>
   174a8:	add	sp, sp, #16
   174ac:	pop	{lr}		; (ldr lr, [sp], #4)
   174b0:	add	sp, sp, #4
   174b4:	bx	lr
   174b8:	ldr	r3, [pc, #116]	; 17534 <__assert_fail@plt+0x6170>
   174bc:	mov	r0, #10
   174c0:	push	{r4, lr}
   174c4:	ldr	r1, [r3]
   174c8:	bl	11124 <fputc_unlocked@plt>
   174cc:	mov	r2, #5
   174d0:	ldr	r1, [pc, #96]	; 17538 <__assert_fail@plt+0x6174>
   174d4:	mov	r0, #0
   174d8:	bl	11130 <dcgettext@plt>
   174dc:	mov	r1, r0
   174e0:	ldr	r2, [pc, #84]	; 1753c <__assert_fail@plt+0x6178>
   174e4:	mov	r0, #1
   174e8:	bl	1128c <__printf_chk@plt>
   174ec:	mov	r2, #5
   174f0:	ldr	r1, [pc, #72]	; 17540 <__assert_fail@plt+0x617c>
   174f4:	mov	r0, #0
   174f8:	bl	11130 <dcgettext@plt>
   174fc:	mov	r1, r0
   17500:	ldr	r3, [pc, #60]	; 17544 <__assert_fail@plt+0x6180>
   17504:	mov	r0, #1
   17508:	ldr	r2, [pc, #56]	; 17548 <__assert_fail@plt+0x6184>
   1750c:	bl	1128c <__printf_chk@plt>
   17510:	mov	r2, #5
   17514:	ldr	r1, [pc, #48]	; 1754c <__assert_fail@plt+0x6188>
   17518:	mov	r0, #0
   1751c:	bl	11130 <dcgettext@plt>
   17520:	mov	r1, r0
   17524:	ldr	r2, [pc, #36]	; 17550 <__assert_fail@plt+0x618c>
   17528:	mov	r0, #1
   1752c:	pop	{r4, lr}
   17530:	b	1128c <__printf_chk@plt>
   17534:	muleq	r2, ip, r1
   17538:	andeq	r9, r1, r8, ror #21
   1753c:	strdeq	r9, [r1], -ip
   17540:	andeq	r9, r1, r2, lsl fp
   17544:	andeq	r9, r1, lr, asr #1
   17548:	strdeq	r9, [r1], -r6
   1754c:	andeq	r9, r1, r6, lsr #22
   17550:	andeq	r9, r1, sp, asr #22
   17554:	push	{r4, lr}
   17558:	bl	17cd0 <__assert_fail@plt+0x690c>
   1755c:	cmp	r0, #0
   17560:	popne	{r4, pc}
   17564:	bl	1780c <__assert_fail@plt+0x6448>
   17568:	push	{r4, lr}
   1756c:	bl	17cd0 <__assert_fail@plt+0x690c>
   17570:	cmp	r0, #0
   17574:	popne	{r4, pc}
   17578:	bl	1780c <__assert_fail@plt+0x6448>
   1757c:	b	17554 <__assert_fail@plt+0x6190>
   17580:	push	{r4, r5, r6, lr}
   17584:	mov	r5, r0
   17588:	mov	r4, r1
   1758c:	bl	17cfc <__assert_fail@plt+0x6938>
   17590:	cmp	r0, #0
   17594:	popne	{r4, r5, r6, pc}
   17598:	adds	r4, r4, #0
   1759c:	movne	r4, #1
   175a0:	cmp	r5, #0
   175a4:	moveq	r4, #1
   175a8:	cmp	r4, #0
   175ac:	popeq	{r4, r5, r6, pc}
   175b0:	bl	1780c <__assert_fail@plt+0x6448>
   175b4:	push	{r4, lr}
   175b8:	bl	181f4 <__assert_fail@plt+0x6e30>
   175bc:	cmp	r0, #0
   175c0:	popne	{r4, pc}
   175c4:	bl	1780c <__assert_fail@plt+0x6448>
   175c8:	push	{r4, r5, r6, lr}
   175cc:	mov	r6, r0
   175d0:	mov	r5, r1
   175d4:	mov	r4, r2
   175d8:	bl	1829c <__assert_fail@plt+0x6ed8>
   175dc:	cmp	r0, #0
   175e0:	popne	{r4, r5, r6, pc}
   175e4:	cmp	r6, #0
   175e8:	beq	175f8 <__assert_fail@plt+0x6234>
   175ec:	cmp	r5, #0
   175f0:	cmpne	r4, #0
   175f4:	popeq	{r4, r5, r6, pc}
   175f8:	bl	1780c <__assert_fail@plt+0x6448>
   175fc:	b	175c8 <__assert_fail@plt+0x6204>
   17600:	push	{r4, lr}
   17604:	bl	18204 <__assert_fail@plt+0x6e40>
   17608:	cmp	r0, #0
   1760c:	popne	{r4, pc}
   17610:	bl	1780c <__assert_fail@plt+0x6448>
   17614:	mov	r2, r1
   17618:	mov	r1, r0
   1761c:	mov	r0, #0
   17620:	b	175c8 <__assert_fail@plt+0x6204>
   17624:	mov	r2, r1
   17628:	mov	r1, r0
   1762c:	mov	r0, #0
   17630:	b	17600 <__assert_fail@plt+0x623c>
   17634:	cmp	r0, #0
   17638:	push	{r4, r5, r6, lr}
   1763c:	mov	r5, r1
   17640:	ldr	r4, [r1]
   17644:	bne	17670 <__assert_fail@plt+0x62ac>
   17648:	cmp	r4, #0
   1764c:	bne	17660 <__assert_fail@plt+0x629c>
   17650:	mov	r4, #64	; 0x40
   17654:	udiv	r4, r4, r2
   17658:	cmp	r2, #64	; 0x40
   1765c:	addhi	r4, r4, #1
   17660:	mov	r1, r4
   17664:	bl	175c8 <__assert_fail@plt+0x6204>
   17668:	str	r4, [r5]
   1766c:	pop	{r4, r5, r6, pc}
   17670:	lsr	r3, r4, #1
   17674:	add	r3, r3, #1
   17678:	adds	r4, r4, r3
   1767c:	bcc	17660 <__assert_fail@plt+0x629c>
   17680:	bl	1780c <__assert_fail@plt+0x6448>
   17684:	mov	r2, #1
   17688:	b	17634 <__assert_fail@plt+0x6270>
   1768c:	ldr	ip, [r1]
   17690:	push	{r4, r5, r6, r7, r8, lr}
   17694:	mov	r5, r1
   17698:	mvn	r8, r3
   1769c:	lsr	r8, r8, #31
   176a0:	ldr	lr, [sp, #24]
   176a4:	asr	r1, ip, #1
   176a8:	adds	r4, ip, r1
   176ac:	mvnvs	r4, #-2147483648	; 0x80000000
   176b0:	cmp	r3, r4
   176b4:	movge	r1, #0
   176b8:	andlt	r1, r8, #1
   176bc:	cmp	r1, #0
   176c0:	movne	r4, r3
   176c4:	smull	r6, r7, r4, lr
   176c8:	cmp	r7, r6, asr #31
   176cc:	bne	176e4 <__assert_fail@plt+0x6320>
   176d0:	cmp	r6, #63	; 0x3f
   176d4:	mov	r1, r6
   176d8:	bgt	176f4 <__assert_fail@plt+0x6330>
   176dc:	mov	r1, #64	; 0x40
   176e0:	b	176e8 <__assert_fail@plt+0x6324>
   176e4:	mvn	r1, #-2147483648	; 0x80000000
   176e8:	sdiv	r4, r1, lr
   176ec:	mls	r6, lr, r4, r1
   176f0:	sub	r1, r1, r6
   176f4:	cmp	r0, #0
   176f8:	sub	r6, r4, ip
   176fc:	streq	r0, [r5]
   17700:	cmp	r6, r2
   17704:	bge	17738 <__assert_fail@plt+0x6374>
   17708:	adds	r4, ip, r2
   1770c:	bvs	17734 <__assert_fail@plt+0x6370>
   17710:	cmp	r4, r3
   17714:	movle	r3, #0
   17718:	andgt	r3, r8, #1
   1771c:	cmp	r3, #0
   17720:	bne	17734 <__assert_fail@plt+0x6370>
   17724:	smull	r2, r3, r4, lr
   17728:	cmp	r3, r2, asr #31
   1772c:	mov	r1, r2
   17730:	beq	17738 <__assert_fail@plt+0x6374>
   17734:	bl	1780c <__assert_fail@plt+0x6448>
   17738:	bl	17580 <__assert_fail@plt+0x61bc>
   1773c:	str	r4, [r5]
   17740:	pop	{r4, r5, r6, r7, r8, pc}
   17744:	push	{r4, lr}
   17748:	bl	17c7c <__assert_fail@plt+0x68b8>
   1774c:	cmp	r0, #0
   17750:	popne	{r4, pc}
   17754:	bl	1780c <__assert_fail@plt+0x6448>
   17758:	mov	r1, #1
   1775c:	b	17744 <__assert_fail@plt+0x6380>
   17760:	push	{r4, lr}
   17764:	bl	17c7c <__assert_fail@plt+0x68b8>
   17768:	cmp	r0, #0
   1776c:	popne	{r4, pc}
   17770:	bl	1780c <__assert_fail@plt+0x6448>
   17774:	mov	r1, #1
   17778:	b	17760 <__assert_fail@plt+0x639c>
   1777c:	push	{r4, r5, r6, lr}
   17780:	mov	r4, r1
   17784:	mov	r5, r0
   17788:	mov	r0, r1
   1778c:	bl	17554 <__assert_fail@plt+0x6190>
   17790:	mov	r2, r4
   17794:	mov	r1, r5
   17798:	pop	{r4, r5, r6, lr}
   1779c:	b	110f4 <memcpy@plt>
   177a0:	push	{r4, r5, r6, lr}
   177a4:	mov	r4, r1
   177a8:	mov	r5, r0
   177ac:	mov	r0, r1
   177b0:	bl	17568 <__assert_fail@plt+0x61a4>
   177b4:	mov	r2, r4
   177b8:	mov	r1, r5
   177bc:	pop	{r4, r5, r6, lr}
   177c0:	b	110f4 <memcpy@plt>
   177c4:	push	{r4, r5, r6, lr}
   177c8:	mov	r5, r0
   177cc:	add	r0, r1, #1
   177d0:	mov	r4, r1
   177d4:	bl	17568 <__assert_fail@plt+0x61a4>
   177d8:	mov	r2, #0
   177dc:	mov	r1, r5
   177e0:	strb	r2, [r0, r4]
   177e4:	mov	r2, r4
   177e8:	pop	{r4, r5, r6, lr}
   177ec:	b	110f4 <memcpy@plt>
   177f0:	push	{r4, lr}
   177f4:	mov	r4, r0
   177f8:	bl	11238 <strlen@plt>
   177fc:	add	r1, r0, #1
   17800:	mov	r0, r4
   17804:	pop	{r4, lr}
   17808:	b	1777c <__assert_fail@plt+0x63b8>
   1780c:	ldr	r3, [pc, #44]	; 17840 <__assert_fail@plt+0x647c>
   17810:	mov	r2, #5
   17814:	mov	r0, #0
   17818:	push	{r4, lr}
   1781c:	ldr	r1, [pc, #32]	; 17844 <__assert_fail@plt+0x6480>
   17820:	ldr	r4, [r3]
   17824:	bl	11130 <dcgettext@plt>
   17828:	mov	r3, r0
   1782c:	ldr	r2, [pc, #20]	; 17848 <__assert_fail@plt+0x6484>
   17830:	mov	r1, #0
   17834:	mov	r0, r4
   17838:	bl	111c0 <error@plt>
   1783c:	bl	1137c <abort@plt>
   17840:	andeq	sl, r2, r4, asr #2
   17844:	muleq	r1, r9, fp
   17848:			; <UNDEFINED> instruction: 0x000191b9
   1784c:	push	{r4, lr}
   17850:	orr	r1, r1, #512	; 0x200
   17854:	bl	13c60 <__assert_fail@plt+0x289c>
   17858:	cmp	r0, #0
   1785c:	popne	{r4, pc}
   17860:	bl	11268 <__errno_location@plt>
   17864:	ldr	r3, [r0]
   17868:	cmp	r3, #22
   1786c:	bne	17884 <__assert_fail@plt+0x64c0>
   17870:	ldr	r3, [pc, #16]	; 17888 <__assert_fail@plt+0x64c4>
   17874:	mov	r2, #41	; 0x29
   17878:	ldr	r1, [pc, #12]	; 1788c <__assert_fail@plt+0x64c8>
   1787c:	ldr	r0, [pc, #12]	; 17890 <__assert_fail@plt+0x64cc>
   17880:	bl	113c4 <__assert_fail@plt>
   17884:	bl	1780c <__assert_fail@plt+0x6448>
   17888:	andeq	r9, r1, sl, lsr #23
   1788c:			; <UNDEFINED> instruction: 0x00019bb4
   17890:			; <UNDEFINED> instruction: 0x00019bbf
   17894:	ldr	r3, [r0, #48]	; 0x30
   17898:	and	r3, r3, #17
   1789c:	cmp	r3, #16
   178a0:	beq	178bc <__assert_fail@plt+0x64f8>
   178a4:	cmp	r3, #17
   178a8:	bne	178c4 <__assert_fail@plt+0x6500>
   178ac:	ldr	r0, [r1, #48]	; 0x30
   178b0:	adds	r0, r0, #0
   178b4:	movne	r0, #1
   178b8:	bx	lr
   178bc:	mov	r0, #1
   178c0:	bx	lr
   178c4:	mov	r0, #0
   178c8:	bx	lr
   178cc:	subs	r2, r2, #1
   178d0:	mov	r3, #0
   178d4:	bcs	178e0 <__assert_fail@plt+0x651c>
   178d8:	mov	r0, r3
   178dc:	bx	lr
   178e0:	push	{r4, r5, lr}
   178e4:	sub	r2, r2, #1
   178e8:	ldr	r4, [r0]
   178ec:	umull	r4, r5, r1, r4
   178f0:	adds	ip, r5, #0
   178f4:	movne	ip, #1
   178f8:	cmp	ip, #0
   178fc:	orr	r3, r3, ip
   17900:	mvnne	r4, #0
   17904:	cmn	r2, #1
   17908:	str	r4, [r0]
   1790c:	bne	178e4 <__assert_fail@plt+0x6520>
   17910:	mov	r0, r3
   17914:	pop	{r4, r5, pc}
   17918:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1791c:	cmp	r2, #36	; 0x24
   17920:	ldr	r6, [sp, #48]	; 0x30
   17924:	bls	1793c <__assert_fail@plt+0x6578>
   17928:	ldr	r3, [pc, #832]	; 17c70 <__assert_fail@plt+0x68ac>
   1792c:	mov	r2, #85	; 0x55
   17930:	ldr	r1, [pc, #828]	; 17c74 <__assert_fail@plt+0x68b0>
   17934:	ldr	r0, [pc, #828]	; 17c78 <__assert_fail@plt+0x68b4>
   17938:	bl	113c4 <__assert_fail@plt>
   1793c:	cmp	r1, #0
   17940:	mov	r7, r1
   17944:	mov	r4, r0
   17948:	mov	fp, r2
   1794c:	mov	r8, r3
   17950:	moveq	r7, sp
   17954:	bl	11268 <__errno_location@plt>
   17958:	mov	r3, #0
   1795c:	mov	sl, r0
   17960:	str	r3, [r0]
   17964:	bl	11214 <__ctype_b_loc@plt>
   17968:	ldrb	r9, [r4]
   1796c:	mov	r3, r4
   17970:	ldr	r1, [r0]
   17974:	lsl	r2, r9, #1
   17978:	ldrh	r5, [r1, r2]
   1797c:	ands	r5, r5, #8192	; 0x2000
   17980:	bne	1799c <__assert_fail@plt+0x65d8>
   17984:	cmp	r9, #45	; 0x2d
   17988:	bne	179a4 <__assert_fail@plt+0x65e0>
   1798c:	mov	r5, #4
   17990:	mov	r0, r5
   17994:	add	sp, sp, #12
   17998:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1799c:	ldrb	r9, [r3, #1]!
   179a0:	b	17974 <__assert_fail@plt+0x65b0>
   179a4:	mov	r2, fp
   179a8:	mov	r1, r7
   179ac:	mov	r0, r4
   179b0:	bl	1122c <strtoul@plt>
   179b4:	ldr	r9, [r7]
   179b8:	str	r0, [sp, #4]
   179bc:	cmp	r9, r4
   179c0:	bne	17a20 <__assert_fail@plt+0x665c>
   179c4:	cmp	r6, #0
   179c8:	beq	1798c <__assert_fail@plt+0x65c8>
   179cc:	ldrb	r1, [r4]
   179d0:	cmp	r1, #0
   179d4:	beq	1798c <__assert_fail@plt+0x65c8>
   179d8:	mov	r0, r6
   179dc:	bl	11244 <strchr@plt>
   179e0:	cmp	r0, #0
   179e4:	movne	r3, #1
   179e8:	strne	r3, [sp, #4]
   179ec:	beq	1798c <__assert_fail@plt+0x65c8>
   179f0:	ldrb	r4, [r9]
   179f4:	cmp	r4, #0
   179f8:	beq	17c28 <__assert_fail@plt+0x6864>
   179fc:	mov	r1, r4
   17a00:	mov	r0, r6
   17a04:	bl	11244 <strchr@plt>
   17a08:	cmp	r0, #0
   17a0c:	bne	17a48 <__assert_fail@plt+0x6684>
   17a10:	ldr	r3, [sp, #4]
   17a14:	orr	r5, r5, #2
   17a18:	str	r3, [r8]
   17a1c:	b	17990 <__assert_fail@plt+0x65cc>
   17a20:	ldr	r5, [sl]
   17a24:	cmp	r5, #0
   17a28:	beq	17a38 <__assert_fail@plt+0x6674>
   17a2c:	cmp	r5, #34	; 0x22
   17a30:	bne	1798c <__assert_fail@plt+0x65c8>
   17a34:	mov	r5, #1
   17a38:	cmp	r6, #0
   17a3c:	streq	r0, [r8]
   17a40:	bne	179f0 <__assert_fail@plt+0x662c>
   17a44:	b	17990 <__assert_fail@plt+0x65cc>
   17a48:	cmp	r4, #84	; 0x54
   17a4c:	beq	17aa0 <__assert_fail@plt+0x66dc>
   17a50:	bhi	17a88 <__assert_fail@plt+0x66c4>
   17a54:	cmp	r4, #75	; 0x4b
   17a58:	beq	17aa0 <__assert_fail@plt+0x66dc>
   17a5c:	bhi	17a78 <__assert_fail@plt+0x66b4>
   17a60:	cmp	r4, #69	; 0x45
   17a64:	beq	17aa0 <__assert_fail@plt+0x66dc>
   17a68:	cmp	r4, #71	; 0x47
   17a6c:	beq	17aa0 <__assert_fail@plt+0x66dc>
   17a70:	mov	r6, #1
   17a74:	b	17b4c <__assert_fail@plt+0x6788>
   17a78:	cmp	r4, #77	; 0x4d
   17a7c:	beq	17aa0 <__assert_fail@plt+0x66dc>
   17a80:	cmp	r4, #80	; 0x50
   17a84:	b	17a6c <__assert_fail@plt+0x66a8>
   17a88:	cmp	r4, #103	; 0x67
   17a8c:	beq	17aa0 <__assert_fail@plt+0x66dc>
   17a90:	bhi	17b24 <__assert_fail@plt+0x6760>
   17a94:	sub	r3, r4, #89	; 0x59
   17a98:	cmp	r3, #1
   17a9c:	bhi	17a70 <__assert_fail@plt+0x66ac>
   17aa0:	mov	r1, #48	; 0x30
   17aa4:	mov	r0, r6
   17aa8:	bl	11244 <strchr@plt>
   17aac:	cmp	r0, #0
   17ab0:	beq	17a70 <__assert_fail@plt+0x66ac>
   17ab4:	ldrb	r3, [r9, #1]
   17ab8:	cmp	r3, #68	; 0x44
   17abc:	moveq	r6, #2
   17ac0:	moveq	r1, #1000	; 0x3e8
   17ac4:	beq	17ae4 <__assert_fail@plt+0x6720>
   17ac8:	cmp	r3, #105	; 0x69
   17acc:	beq	17b3c <__assert_fail@plt+0x6778>
   17ad0:	cmp	r3, #66	; 0x42
   17ad4:	moveq	r6, #2
   17ad8:	movne	r6, #1
   17adc:	moveq	r1, #1000	; 0x3e8
   17ae0:	movne	r1, #1024	; 0x400
   17ae4:	cmp	r4, #89	; 0x59
   17ae8:	beq	17c60 <__assert_fail@plt+0x689c>
   17aec:	bhi	17b74 <__assert_fail@plt+0x67b0>
   17af0:	cmp	r4, #75	; 0x4b
   17af4:	beq	17bb4 <__assert_fail@plt+0x67f0>
   17af8:	bhi	17b54 <__assert_fail@plt+0x6790>
   17afc:	cmp	r4, #69	; 0x45
   17b00:	beq	17c34 <__assert_fail@plt+0x6870>
   17b04:	cmp	r4, #71	; 0x47
   17b08:	beq	17c40 <__assert_fail@plt+0x687c>
   17b0c:	cmp	r4, #66	; 0x42
   17b10:	bne	17a10 <__assert_fail@plt+0x664c>
   17b14:	ldr	r3, [sp, #4]
   17b18:	lsl	r2, r3, #10
   17b1c:	lsrs	r3, r3, #22
   17b20:	b	17bf0 <__assert_fail@plt+0x682c>
   17b24:	cmp	r4, #109	; 0x6d
   17b28:	beq	17aa0 <__assert_fail@plt+0x66dc>
   17b2c:	cmp	r4, #116	; 0x74
   17b30:	beq	17aa0 <__assert_fail@plt+0x66dc>
   17b34:	cmp	r4, #107	; 0x6b
   17b38:	b	17a6c <__assert_fail@plt+0x66a8>
   17b3c:	ldrb	r3, [r9, #2]
   17b40:	cmp	r3, #66	; 0x42
   17b44:	movne	r6, #1
   17b48:	moveq	r6, #3
   17b4c:	mov	r1, #1024	; 0x400
   17b50:	b	17ae4 <__assert_fail@plt+0x6720>
   17b54:	cmp	r4, #80	; 0x50
   17b58:	beq	17c48 <__assert_fail@plt+0x6884>
   17b5c:	cmp	r4, #84	; 0x54
   17b60:	beq	17c50 <__assert_fail@plt+0x688c>
   17b64:	cmp	r4, #77	; 0x4d
   17b68:	bne	17a10 <__assert_fail@plt+0x664c>
   17b6c:	mov	r2, #2
   17b70:	b	17c38 <__assert_fail@plt+0x6874>
   17b74:	cmp	r4, #103	; 0x67
   17b78:	beq	17c40 <__assert_fail@plt+0x687c>
   17b7c:	bhi	17ba0 <__assert_fail@plt+0x67dc>
   17b80:	cmp	r4, #98	; 0x62
   17b84:	beq	17be4 <__assert_fail@plt+0x6820>
   17b88:	cmp	r4, #99	; 0x63
   17b8c:	beq	17c68 <__assert_fail@plt+0x68a4>
   17b90:	cmp	r4, #90	; 0x5a
   17b94:	bne	17a10 <__assert_fail@plt+0x664c>
   17b98:	mov	r2, #7
   17b9c:	b	17c38 <__assert_fail@plt+0x6874>
   17ba0:	cmp	r4, #109	; 0x6d
   17ba4:	beq	17b6c <__assert_fail@plt+0x67a8>
   17ba8:	bhi	17bbc <__assert_fail@plt+0x67f8>
   17bac:	cmp	r4, #107	; 0x6b
   17bb0:	bne	17a10 <__assert_fail@plt+0x664c>
   17bb4:	mov	r2, #1
   17bb8:	b	17c38 <__assert_fail@plt+0x6874>
   17bbc:	cmp	r4, #116	; 0x74
   17bc0:	beq	17c50 <__assert_fail@plt+0x688c>
   17bc4:	cmp	r4, #119	; 0x77
   17bc8:	bne	17a10 <__assert_fail@plt+0x664c>
   17bcc:	ldr	r0, [sp, #4]
   17bd0:	lsl	r3, r0, #1
   17bd4:	lsrs	r0, r0, #31
   17bd8:	streq	r3, [sp, #4]
   17bdc:	beq	17c0c <__assert_fail@plt+0x6848>
   17be0:	b	17c00 <__assert_fail@plt+0x683c>
   17be4:	ldr	r3, [sp, #4]
   17be8:	lsl	r2, r3, #9
   17bec:	lsrs	r3, r3, #23
   17bf0:	movne	r0, #1
   17bf4:	moveq	r0, #0
   17bf8:	streq	r2, [sp, #4]
   17bfc:	beq	17c0c <__assert_fail@plt+0x6848>
   17c00:	mvn	r3, #0
   17c04:	mov	r0, #1
   17c08:	str	r3, [sp, #4]
   17c0c:	ldr	r3, [r7]
   17c10:	orr	r5, r5, r0
   17c14:	add	r2, r3, r6
   17c18:	str	r2, [r7]
   17c1c:	ldrb	r3, [r3, r6]
   17c20:	cmp	r3, #0
   17c24:	orrne	r5, r5, #2
   17c28:	ldr	r3, [sp, #4]
   17c2c:	str	r3, [r8]
   17c30:	b	17990 <__assert_fail@plt+0x65cc>
   17c34:	mov	r2, #6
   17c38:	add	r0, sp, #4
   17c3c:	b	17c58 <__assert_fail@plt+0x6894>
   17c40:	mov	r2, #3
   17c44:	b	17c38 <__assert_fail@plt+0x6874>
   17c48:	mov	r2, #5
   17c4c:	b	17c38 <__assert_fail@plt+0x6874>
   17c50:	mov	r2, #4
   17c54:	add	r0, sp, r2
   17c58:	bl	178cc <__assert_fail@plt+0x6508>
   17c5c:	b	17c0c <__assert_fail@plt+0x6848>
   17c60:	mov	r2, #8
   17c64:	b	17c38 <__assert_fail@plt+0x6874>
   17c68:	mov	r0, #0
   17c6c:	b	17c0c <__assert_fail@plt+0x6848>
   17c70:	andeq	r9, r1, pc, asr #23
   17c74:	ldrdeq	r9, [r1], -r8
   17c78:	andeq	r9, r1, r6, ror #23
   17c7c:	cmp	r1, #0
   17c80:	cmpne	r0, #0
   17c84:	beq	17cbc <__assert_fail@plt+0x68f8>
   17c88:	push	{r4, r5, r6, lr}
   17c8c:	umull	r4, r5, r0, r1
   17c90:	adds	r3, r5, #0
   17c94:	movne	r3, #1
   17c98:	cmp	r4, #0
   17c9c:	blt	17ca8 <__assert_fail@plt+0x68e4>
   17ca0:	cmp	r3, #0
   17ca4:	beq	17cc8 <__assert_fail@plt+0x6904>
   17ca8:	bl	11268 <__errno_location@plt>
   17cac:	mov	r3, #12
   17cb0:	str	r3, [r0]
   17cb4:	mov	r0, #0
   17cb8:	pop	{r4, r5, r6, pc}
   17cbc:	mov	r1, #1
   17cc0:	mov	r0, r1
   17cc4:	b	11064 <calloc@plt>
   17cc8:	pop	{r4, r5, r6, lr}
   17ccc:	b	17cc4 <__assert_fail@plt+0x6900>
   17cd0:	cmp	r0, #0
   17cd4:	beq	17cf4 <__assert_fail@plt+0x6930>
   17cd8:	bge	17cf8 <__assert_fail@plt+0x6934>
   17cdc:	push	{r4, lr}
   17ce0:	bl	11268 <__errno_location@plt>
   17ce4:	mov	r3, #12
   17ce8:	str	r3, [r0]
   17cec:	mov	r0, #0
   17cf0:	pop	{r4, pc}
   17cf4:	mov	r0, #1
   17cf8:	b	111d8 <malloc@plt>
   17cfc:	cmp	r0, #0
   17d00:	bne	17d0c <__assert_fail@plt+0x6948>
   17d04:	mov	r0, r1
   17d08:	b	17cd0 <__assert_fail@plt+0x690c>
   17d0c:	cmp	r1, #0
   17d10:	push	{r4, lr}
   17d14:	bne	17d24 <__assert_fail@plt+0x6960>
   17d18:	bl	12a60 <__assert_fail@plt+0x169c>
   17d1c:	mov	r0, #0
   17d20:	pop	{r4, pc}
   17d24:	blt	17d30 <__assert_fail@plt+0x696c>
   17d28:	pop	{r4, lr}
   17d2c:	b	1113c <realloc@plt>
   17d30:	bl	11268 <__errno_location@plt>
   17d34:	mov	r3, #12
   17d38:	str	r3, [r0]
   17d3c:	b	17d1c <__assert_fail@plt+0x6958>
   17d40:	push	{r4, r5, r6, lr}
   17d44:	mov	r4, r0
   17d48:	bl	1119c <__fpending@plt>
   17d4c:	mov	r5, r0
   17d50:	mov	r0, r4
   17d54:	bl	111a8 <ferror_unlocked@plt>
   17d58:	mov	r6, r0
   17d5c:	mov	r0, r4
   17d60:	bl	17e7c <__assert_fail@plt+0x6ab8>
   17d64:	cmp	r6, #0
   17d68:	mov	r4, r0
   17d6c:	bne	17d98 <__assert_fail@plt+0x69d4>
   17d70:	cmp	r0, #0
   17d74:	beq	17d90 <__assert_fail@plt+0x69cc>
   17d78:	cmp	r5, #0
   17d7c:	bne	17da8 <__assert_fail@plt+0x69e4>
   17d80:	bl	11268 <__errno_location@plt>
   17d84:	ldr	r4, [r0]
   17d88:	subs	r4, r4, #9
   17d8c:	mvnne	r4, #0
   17d90:	mov	r0, r4
   17d94:	pop	{r4, r5, r6, pc}
   17d98:	cmp	r0, #0
   17d9c:	bne	17da8 <__assert_fail@plt+0x69e4>
   17da0:	bl	11268 <__errno_location@plt>
   17da4:	str	r4, [r0]
   17da8:	mvn	r4, #0
   17dac:	b	17d90 <__assert_fail@plt+0x69cc>
   17db0:	mov	r3, #0
   17db4:	mov	r2, #0
   17db8:	strd	r2, [r0, #16]
   17dbc:	ldr	r3, [pc, #4]	; 17dc8 <__assert_fail@plt+0x6a04>
   17dc0:	str	r3, [r0, #24]
   17dc4:	bx	lr
   17dc8:	addseq	pc, r5, r6, lsl r6	; <UNPREDICTABLE>
   17dcc:	ldr	r3, [pc, #152]	; 17e6c <__assert_fail@plt+0x6aa8>
   17dd0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17dd4:	ldr	r2, [r0, #24]
   17dd8:	cmp	r2, r3
   17ddc:	beq	17df4 <__assert_fail@plt+0x6a30>
   17de0:	ldr	r3, [pc, #136]	; 17e70 <__assert_fail@plt+0x6aac>
   17de4:	mov	r2, #60	; 0x3c
   17de8:	ldr	r1, [pc, #132]	; 17e74 <__assert_fail@plt+0x6ab0>
   17dec:	ldr	r0, [pc, #132]	; 17e78 <__assert_fail@plt+0x6ab4>
   17df0:	bl	113c4 <__assert_fail@plt>
   17df4:	ldrd	r6, [r0, #16]
   17df8:	orrs	r3, r6, r7
   17dfc:	beq	17e30 <__assert_fail@plt+0x6a6c>
   17e00:	ldrd	r2, [r0]
   17e04:	ldrd	r4, [r1, #96]	; 0x60
   17e08:	cmp	r5, r3
   17e0c:	cmpeq	r4, r2
   17e10:	bne	17e30 <__assert_fail@plt+0x6a6c>
   17e14:	ldrd	r4, [r1]
   17e18:	ldrd	r2, [r0, #8]
   17e1c:	cmp	r5, r3
   17e20:	cmpeq	r4, r2
   17e24:	bne	17e30 <__assert_fail@plt+0x6a6c>
   17e28:	mov	r0, #1
   17e2c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17e30:	adds	r8, r6, #1
   17e34:	adc	r9, r7, #0
   17e38:	and	r2, r6, r8
   17e3c:	and	r3, r7, r9
   17e40:	orrs	r3, r2, r3
   17e44:	strd	r8, [r0, #16]
   17e48:	bne	17e64 <__assert_fail@plt+0x6aa0>
   17e4c:	orrs	r3, r8, r9
   17e50:	beq	17e28 <__assert_fail@plt+0x6a64>
   17e54:	ldrd	r2, [r1]
   17e58:	strd	r2, [r0, #8]
   17e5c:	ldrd	r2, [r1, #96]	; 0x60
   17e60:	strd	r2, [r0]
   17e64:	mov	r0, #0
   17e68:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17e6c:	addseq	pc, r5, r6, lsl r6	; <UNPREDICTABLE>
   17e70:	andeq	r9, r1, ip, lsl #24
   17e74:	andeq	r9, r1, r8, lsl ip
   17e78:	andeq	r9, r1, sl, lsr #24
   17e7c:	push	{r0, r1, r2, r4, r5, lr}
   17e80:	mov	r4, r0
   17e84:	bl	11298 <fileno@plt>
   17e88:	cmp	r0, #0
   17e8c:	mov	r0, r4
   17e90:	bge	17ea0 <__assert_fail@plt+0x6adc>
   17e94:	add	sp, sp, #12
   17e98:	pop	{r4, r5, lr}
   17e9c:	b	112b0 <fclose@plt>
   17ea0:	bl	111f0 <__freading@plt>
   17ea4:	cmp	r0, #0
   17ea8:	bne	17ee4 <__assert_fail@plt+0x6b20>
   17eac:	mov	r0, r4
   17eb0:	bl	18108 <__assert_fail@plt+0x6d44>
   17eb4:	cmp	r0, #0
   17eb8:	bne	17f18 <__assert_fail@plt+0x6b54>
   17ebc:	mov	r5, #0
   17ec0:	mov	r0, r4
   17ec4:	bl	112b0 <fclose@plt>
   17ec8:	cmp	r5, #0
   17ecc:	beq	17edc <__assert_fail@plt+0x6b18>
   17ed0:	bl	11268 <__errno_location@plt>
   17ed4:	str	r5, [r0]
   17ed8:	mvn	r0, #0
   17edc:	add	sp, sp, #12
   17ee0:	pop	{r4, r5, pc}
   17ee4:	mov	r0, r4
   17ee8:	bl	11298 <fileno@plt>
   17eec:	mov	r3, #1
   17ef0:	mov	r2, #0
   17ef4:	str	r3, [sp]
   17ef8:	mov	r3, #0
   17efc:	bl	11178 <lseek64@plt>
   17f00:	mvn	r3, #0
   17f04:	mvn	r2, #0
   17f08:	cmp	r1, r3
   17f0c:	cmpeq	r0, r2
   17f10:	bne	17eac <__assert_fail@plt+0x6ae8>
   17f14:	b	17ebc <__assert_fail@plt+0x6af8>
   17f18:	bl	11268 <__errno_location@plt>
   17f1c:	ldr	r5, [r0]
   17f20:	b	17ec0 <__assert_fail@plt+0x6afc>
   17f24:	push	{r1, r2, r3}
   17f28:	push	{r0, r1, r2, r4, r5, r6, r7, r8, lr}
   17f2c:	add	r2, sp, #40	; 0x28
   17f30:	ldr	r1, [sp, #36]	; 0x24
   17f34:	str	r2, [sp, #4]
   17f38:	cmp	r1, #0
   17f3c:	beq	17f8c <__assert_fail@plt+0x6bc8>
   17f40:	movw	r3, #1030	; 0x406
   17f44:	mov	r5, r0
   17f48:	cmp	r1, r3
   17f4c:	beq	17f98 <__assert_fail@plt+0x6bd4>
   17f50:	cmp	r1, #11
   17f54:	beq	17f7c <__assert_fail@plt+0x6bb8>
   17f58:	bgt	1808c <__assert_fail@plt+0x6cc8>
   17f5c:	cmp	r1, #4
   17f60:	beq	180a4 <__assert_fail@plt+0x6ce0>
   17f64:	bgt	18084 <__assert_fail@plt+0x6cc0>
   17f68:	cmp	r1, #2
   17f6c:	beq	180a4 <__assert_fail@plt+0x6ce0>
   17f70:	bgt	17f7c <__assert_fail@plt+0x6bb8>
   17f74:	cmp	r1, #1
   17f78:	bne	180a4 <__assert_fail@plt+0x6ce0>
   17f7c:	mov	r0, r5
   17f80:	bl	112c8 <fcntl64@plt>
   17f84:	mov	r4, r0
   17f88:	b	17fe0 <__assert_fail@plt+0x6c1c>
   17f8c:	ldr	r2, [sp, #40]	; 0x28
   17f90:	bl	112c8 <fcntl64@plt>
   17f94:	b	17f84 <__assert_fail@plt+0x6bc0>
   17f98:	ldr	r6, [pc, #304]	; 180d0 <__assert_fail@plt+0x6d0c>
   17f9c:	add	r3, sp, #44	; 0x2c
   17fa0:	str	r3, [sp, #4]
   17fa4:	ldr	r7, [r2]
   17fa8:	ldr	r3, [r6]
   17fac:	mov	r8, r6
   17fb0:	mov	r2, r7
   17fb4:	cmp	r3, #0
   17fb8:	blt	18048 <__assert_fail@plt+0x6c84>
   17fbc:	bl	112c8 <fcntl64@plt>
   17fc0:	subs	r4, r0, #0
   17fc4:	bge	17fd8 <__assert_fail@plt+0x6c14>
   17fc8:	bl	11268 <__errno_location@plt>
   17fcc:	ldr	r3, [r0]
   17fd0:	cmp	r3, #22
   17fd4:	beq	17ff4 <__assert_fail@plt+0x6c30>
   17fd8:	mov	r3, #1
   17fdc:	str	r3, [r8]
   17fe0:	mov	r0, r4
   17fe4:	add	sp, sp, #12
   17fe8:	pop	{r4, r5, r6, r7, r8, lr}
   17fec:	add	sp, sp, #12
   17ff0:	bx	lr
   17ff4:	mov	r2, r7
   17ff8:	mov	r1, #0
   17ffc:	mov	r0, r5
   18000:	bl	112c8 <fcntl64@plt>
   18004:	subs	r4, r0, #0
   18008:	mvnge	r3, #0
   1800c:	strge	r3, [r6]
   18010:	blt	17fe0 <__assert_fail@plt+0x6c1c>
   18014:	mov	r1, #1
   18018:	mov	r0, r4
   1801c:	bl	112c8 <fcntl64@plt>
   18020:	subs	r2, r0, #0
   18024:	bge	18068 <__assert_fail@plt+0x6ca4>
   18028:	bl	11268 <__errno_location@plt>
   1802c:	mov	r5, r0
   18030:	mov	r0, r4
   18034:	ldr	r6, [r5]
   18038:	mvn	r4, #0
   1803c:	bl	11388 <close@plt>
   18040:	str	r6, [r5]
   18044:	b	17fe0 <__assert_fail@plt+0x6c1c>
   18048:	mov	r1, #0
   1804c:	bl	112c8 <fcntl64@plt>
   18050:	subs	r4, r0, #0
   18054:	blt	17fe0 <__assert_fail@plt+0x6c1c>
   18058:	ldr	r3, [r6]
   1805c:	cmn	r3, #1
   18060:	bne	17fe0 <__assert_fail@plt+0x6c1c>
   18064:	b	18014 <__assert_fail@plt+0x6c50>
   18068:	orr	r2, r2, #1
   1806c:	mov	r1, #2
   18070:	mov	r0, r4
   18074:	bl	112c8 <fcntl64@plt>
   18078:	cmn	r0, #1
   1807c:	bne	17fe0 <__assert_fail@plt+0x6c1c>
   18080:	b	18028 <__assert_fail@plt+0x6c64>
   18084:	cmp	r1, #9
   18088:	b	17f78 <__assert_fail@plt+0x6bb4>
   1808c:	movw	r2, #1031	; 0x407
   18090:	cmp	r1, r2
   18094:	bgt	180b4 <__assert_fail@plt+0x6cf0>
   18098:	cmp	r1, r3
   1809c:	movwlt	r3, #1025	; 0x401
   180a0:	blt	180c8 <__assert_fail@plt+0x6d04>
   180a4:	ldr	r3, [sp, #4]
   180a8:	mov	r0, r5
   180ac:	ldr	r2, [r3]
   180b0:	b	17f90 <__assert_fail@plt+0x6bcc>
   180b4:	movw	r3, #1033	; 0x409
   180b8:	cmp	r1, r3
   180bc:	beq	180a4 <__assert_fail@plt+0x6ce0>
   180c0:	blt	17f7c <__assert_fail@plt+0x6bb8>
   180c4:	movw	r3, #1034	; 0x40a
   180c8:	cmp	r1, r3
   180cc:	b	17f78 <__assert_fail@plt+0x6bb4>
   180d0:	strdeq	sl, [r2], -ip
   180d4:	push	{r1, r2, r3}
   180d8:	push	{r0, r1, lr}
   180dc:	ldr	r1, [sp, #12]
   180e0:	ands	r2, r1, #64	; 0x40
   180e4:	ldrne	r2, [sp, #16]
   180e8:	addne	r3, sp, #16
   180ec:	strne	r3, [sp, #4]
   180f0:	bl	111cc <open64@plt>
   180f4:	bl	16cd4 <__assert_fail@plt+0x5910>
   180f8:	add	sp, sp, #8
   180fc:	pop	{lr}		; (ldr lr, [sp], #4)
   18100:	add	sp, sp, #12
   18104:	bx	lr
   18108:	push	{r0, r1, r4, lr}
   1810c:	subs	r4, r0, #0
   18110:	bne	18124 <__assert_fail@plt+0x6d60>
   18114:	mov	r0, r4
   18118:	add	sp, sp, #8
   1811c:	pop	{r4, lr}
   18120:	b	110b8 <fflush@plt>
   18124:	bl	111f0 <__freading@plt>
   18128:	cmp	r0, #0
   1812c:	beq	18114 <__assert_fail@plt+0x6d50>
   18130:	ldr	r3, [r4]
   18134:	tst	r3, #256	; 0x100
   18138:	beq	18114 <__assert_fail@plt+0x6d50>
   1813c:	mov	r3, #1
   18140:	mov	r2, #0
   18144:	mov	r0, r4
   18148:	str	r3, [sp]
   1814c:	mov	r3, #0
   18150:	bl	18158 <__assert_fail@plt+0x6d94>
   18154:	b	18114 <__assert_fail@plt+0x6d50>
   18158:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   1815c:	mov	r4, r0
   18160:	ldmib	r0, {ip, lr}
   18164:	ldr	r8, [sp, #32]
   18168:	cmp	lr, ip
   1816c:	bne	181dc <__assert_fail@plt+0x6e18>
   18170:	ldr	ip, [r0, #16]
   18174:	ldr	lr, [r0, #20]
   18178:	cmp	lr, ip
   1817c:	bne	181dc <__assert_fail@plt+0x6e18>
   18180:	ldr	r5, [r0, #36]	; 0x24
   18184:	cmp	r5, #0
   18188:	bne	181dc <__assert_fail@plt+0x6e18>
   1818c:	mov	r6, r2
   18190:	mov	r7, r3
   18194:	bl	11298 <fileno@plt>
   18198:	mov	r2, r6
   1819c:	mov	r3, r7
   181a0:	str	r8, [sp]
   181a4:	bl	11178 <lseek64@plt>
   181a8:	mvn	r3, #0
   181ac:	mvn	r2, #0
   181b0:	cmp	r1, r3
   181b4:	cmpeq	r0, r2
   181b8:	mvneq	r0, #0
   181bc:	beq	181d4 <__assert_fail@plt+0x6e10>
   181c0:	ldr	r3, [r4]
   181c4:	strd	r0, [r4, #80]	; 0x50
   181c8:	mov	r0, r5
   181cc:	bic	r3, r3, #16
   181d0:	str	r3, [r4]
   181d4:	add	sp, sp, #8
   181d8:	pop	{r4, r5, r6, r7, r8, pc}
   181dc:	mov	r0, r4
   181e0:	str	r8, [sp, #32]
   181e4:	add	sp, sp, #8
   181e8:	pop	{r4, r5, r6, r7, r8, lr}
   181ec:	b	112bc <fseeko64@plt>
   181f0:	b	17cd0 <__assert_fail@plt+0x690c>
   181f4:	cmp	r1, #0
   181f8:	orreq	r1, r1, #1
   181fc:	b	17cfc <__assert_fail@plt+0x6938>
   18200:	b	17c7c <__assert_fail@plt+0x68b8>
   18204:	cmp	r2, #0
   18208:	cmpne	r1, #0
   1820c:	moveq	r2, #1
   18210:	moveq	r1, r2
   18214:	b	1829c <__assert_fail@plt+0x6ed8>
   18218:	push	{r4, lr}
   1821c:	mov	r0, #14
   18220:	bl	112f8 <nl_langinfo@plt>
   18224:	cmp	r0, #0
   18228:	beq	18240 <__assert_fail@plt+0x6e7c>
   1822c:	ldrb	r2, [r0]
   18230:	ldr	r3, [pc, #16]	; 18248 <__assert_fail@plt+0x6e84>
   18234:	cmp	r2, #0
   18238:	moveq	r0, r3
   1823c:	pop	{r4, pc}
   18240:	ldr	r0, [pc]	; 18248 <__assert_fail@plt+0x6e84>
   18244:	pop	{r4, pc}
   18248:	andeq	r9, r1, r2, asr #24
   1824c:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   18250:	subs	r5, r0, #0
   18254:	mov	r7, r2
   18258:	addeq	r5, sp, #4
   1825c:	mov	r6, r1
   18260:	mov	r0, r5
   18264:	bl	111b4 <mbrtowc@plt>
   18268:	cmp	r7, #0
   1826c:	cmnne	r0, #3
   18270:	mov	r4, r0
   18274:	bls	18290 <__assert_fail@plt+0x6ecc>
   18278:	mov	r0, #0
   1827c:	bl	182d4 <__assert_fail@plt+0x6f10>
   18280:	cmp	r0, #0
   18284:	ldrbeq	r3, [r6]
   18288:	moveq	r4, #1
   1828c:	streq	r3, [r5]
   18290:	mov	r0, r4
   18294:	add	sp, sp, #12
   18298:	pop	{r4, r5, r6, r7, pc}
   1829c:	umull	r2, r3, r1, r2
   182a0:	cmp	r3, #0
   182a4:	bne	182b0 <__assert_fail@plt+0x6eec>
   182a8:	mov	r1, r2
   182ac:	b	17cfc <__assert_fail@plt+0x6938>
   182b0:	push	{r4, lr}
   182b4:	bl	11268 <__errno_location@plt>
   182b8:	mov	r3, #12
   182bc:	str	r3, [r0]
   182c0:	mov	r0, #0
   182c4:	pop	{r4, pc}
   182c8:	mov	r2, #3
   182cc:	mov	r1, #0
   182d0:	b	17f24 <__assert_fail@plt+0x6b60>
   182d4:	push	{lr}		; (str lr, [sp, #-4]!)
   182d8:	sub	sp, sp, #268	; 0x10c
   182dc:	movw	r2, #257	; 0x101
   182e0:	add	r1, sp, #4
   182e4:	bl	18330 <__assert_fail@plt+0x6f6c>
   182e8:	cmp	r0, #0
   182ec:	movne	r0, #0
   182f0:	bne	18320 <__assert_fail@plt+0x6f5c>
   182f4:	ldr	r1, [pc, #44]	; 18328 <__assert_fail@plt+0x6f64>
   182f8:	add	r0, sp, #4
   182fc:	bl	110a0 <strcmp@plt>
   18300:	cmp	r0, #0
   18304:	beq	1831c <__assert_fail@plt+0x6f58>
   18308:	ldr	r1, [pc, #28]	; 1832c <__assert_fail@plt+0x6f68>
   1830c:	add	r0, sp, #4
   18310:	bl	110a0 <strcmp@plt>
   18314:	adds	r0, r0, #0
   18318:	movne	r0, #1
   1831c:	and	r0, r0, #1
   18320:	add	sp, sp, #268	; 0x10c
   18324:	pop	{pc}		; (ldr pc, [sp], #4)
   18328:	andeq	r9, r1, r8, asr #24
   1832c:	andeq	r9, r1, sl, asr #24
   18330:	push	{r4, r5, r6, lr}
   18334:	mov	r5, r1
   18338:	mov	r1, #0
   1833c:	mov	r4, r2
   18340:	bl	112d4 <setlocale@plt>
   18344:	subs	r6, r0, #0
   18348:	bne	1835c <__assert_fail@plt+0x6f98>
   1834c:	cmp	r4, #0
   18350:	mov	r0, #22
   18354:	strbne	r6, [r5]
   18358:	pop	{r4, r5, r6, pc}
   1835c:	bl	11238 <strlen@plt>
   18360:	cmp	r4, r0
   18364:	bls	18380 <__assert_fail@plt+0x6fbc>
   18368:	add	r2, r0, #1
   1836c:	mov	r1, r6
   18370:	mov	r0, r5
   18374:	bl	110f4 <memcpy@plt>
   18378:	mov	r0, #0
   1837c:	pop	{r4, r5, r6, pc}
   18380:	cmp	r4, #0
   18384:	beq	183a4 <__assert_fail@plt+0x6fe0>
   18388:	sub	r4, r4, #1
   1838c:	mov	r1, r6
   18390:	mov	r2, r4
   18394:	mov	r0, r5
   18398:	bl	110f4 <memcpy@plt>
   1839c:	mov	r3, #0
   183a0:	strb	r3, [r5, r4]
   183a4:	mov	r0, #34	; 0x22
   183a8:	pop	{r4, r5, r6, pc}
   183ac:	mov	r1, #0
   183b0:	b	112d4 <setlocale@plt>
   183b4:	cmp	r3, #0
   183b8:	cmpeq	r2, #0
   183bc:	bne	183d4 <__assert_fail@plt+0x7010>
   183c0:	cmp	r1, #0
   183c4:	cmpeq	r0, #0
   183c8:	mvnne	r1, #0
   183cc:	mvnne	r0, #0
   183d0:	b	183f0 <__assert_fail@plt+0x702c>
   183d4:	sub	sp, sp, #8
   183d8:	push	{sp, lr}
   183dc:	bl	18400 <__assert_fail@plt+0x703c>
   183e0:	ldr	lr, [sp, #4]
   183e4:	add	sp, sp, #8
   183e8:	pop	{r2, r3}
   183ec:	bx	lr
   183f0:	push	{r1, lr}
   183f4:	mov	r0, #8
   183f8:	bl	11088 <raise@plt>
   183fc:	pop	{r1, pc}
   18400:	cmp	r1, r3
   18404:	cmpeq	r0, r2
   18408:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1840c:	mov	r4, r0
   18410:	movcc	r0, #0
   18414:	mov	r5, r1
   18418:	ldr	lr, [sp, #36]	; 0x24
   1841c:	movcc	r1, r0
   18420:	bcc	1851c <__assert_fail@plt+0x7158>
   18424:	cmp	r3, #0
   18428:	clzeq	ip, r2
   1842c:	clzne	ip, r3
   18430:	addeq	ip, ip, #32
   18434:	cmp	r5, #0
   18438:	clzeq	r1, r4
   1843c:	addeq	r1, r1, #32
   18440:	clzne	r1, r5
   18444:	sub	ip, ip, r1
   18448:	sub	sl, ip, #32
   1844c:	lsl	r9, r3, ip
   18450:	rsb	fp, ip, #32
   18454:	orr	r9, r9, r2, lsl sl
   18458:	orr	r9, r9, r2, lsr fp
   1845c:	lsl	r8, r2, ip
   18460:	cmp	r5, r9
   18464:	cmpeq	r4, r8
   18468:	movcc	r0, #0
   1846c:	movcc	r1, r0
   18470:	bcc	1848c <__assert_fail@plt+0x70c8>
   18474:	mov	r0, #1
   18478:	subs	r4, r4, r8
   1847c:	lsl	r1, r0, sl
   18480:	orr	r1, r1, r0, lsr fp
   18484:	lsl	r0, r0, ip
   18488:	sbc	r5, r5, r9
   1848c:	cmp	ip, #0
   18490:	beq	1851c <__assert_fail@plt+0x7158>
   18494:	lsr	r6, r8, #1
   18498:	orr	r6, r6, r9, lsl #31
   1849c:	lsr	r7, r9, #1
   184a0:	mov	r2, ip
   184a4:	b	184c8 <__assert_fail@plt+0x7104>
   184a8:	subs	r3, r4, r6
   184ac:	sbc	r8, r5, r7
   184b0:	adds	r3, r3, r3
   184b4:	adc	r8, r8, r8
   184b8:	adds	r4, r3, #1
   184bc:	adc	r5, r8, #0
   184c0:	subs	r2, r2, #1
   184c4:	beq	184e4 <__assert_fail@plt+0x7120>
   184c8:	cmp	r5, r7
   184cc:	cmpeq	r4, r6
   184d0:	bcs	184a8 <__assert_fail@plt+0x70e4>
   184d4:	adds	r4, r4, r4
   184d8:	adc	r5, r5, r5
   184dc:	subs	r2, r2, #1
   184e0:	bne	184c8 <__assert_fail@plt+0x7104>
   184e4:	lsr	r3, r4, ip
   184e8:	orr	r3, r3, r5, lsl fp
   184ec:	lsr	r2, r5, ip
   184f0:	orr	r3, r3, r5, lsr sl
   184f4:	adds	r0, r0, r4
   184f8:	mov	r4, r3
   184fc:	lsl	r3, r2, ip
   18500:	orr	r3, r3, r4, lsl sl
   18504:	lsl	ip, r4, ip
   18508:	orr	r3, r3, r4, lsr fp
   1850c:	adc	r1, r1, r5
   18510:	subs	r0, r0, ip
   18514:	mov	r5, r2
   18518:	sbc	r1, r1, r3
   1851c:	cmp	lr, #0
   18520:	strdne	r4, [lr]
   18524:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18528:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1852c:	mov	r7, r0
   18530:	ldr	r6, [pc, #72]	; 18580 <__assert_fail@plt+0x71bc>
   18534:	ldr	r5, [pc, #72]	; 18584 <__assert_fail@plt+0x71c0>
   18538:	add	r6, pc, r6
   1853c:	add	r5, pc, r5
   18540:	sub	r6, r6, r5
   18544:	mov	r8, r1
   18548:	mov	r9, r2
   1854c:	bl	11038 <fstatfs64@plt-0x20>
   18550:	asrs	r6, r6, #2
   18554:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   18558:	mov	r4, #0
   1855c:	add	r4, r4, #1
   18560:	ldr	r3, [r5], #4
   18564:	mov	r2, r9
   18568:	mov	r1, r8
   1856c:	mov	r0, r7
   18570:	blx	r3
   18574:	cmp	r6, r4
   18578:	bne	1855c <__assert_fail@plt+0x7198>
   1857c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18580:	ldrdeq	r1, [r1], -r4
   18584:	andeq	r1, r1, ip, asr #19
   18588:	bx	lr
   1858c:	ldr	r3, [pc, #12]	; 185a0 <__assert_fail@plt+0x71dc>
   18590:	mov	r1, #0
   18594:	add	r3, pc, r3
   18598:	ldr	r2, [r3]
   1859c:	b	11274 <__cxa_atexit@plt>
   185a0:	andeq	r1, r1, r0, lsr #23
   185a4:	mov	r2, r1
   185a8:	mov	r1, r0
   185ac:	mov	r0, #3
   185b0:	b	11358 <__xstat64@plt>
   185b4:	mov	r2, r1
   185b8:	mov	r1, r0
   185bc:	mov	r0, #3
   185c0:	b	1116c <__fxstat64@plt>
   185c4:	mov	r2, r1
   185c8:	mov	r1, r0
   185cc:	mov	r0, #3
   185d0:	b	11394 <__lxstat64@plt>
   185d4:	push	{lr}		; (str lr, [sp, #-4]!)
   185d8:	sub	sp, sp, #12
   185dc:	str	r3, [sp]
   185e0:	mov	r3, r2
   185e4:	mov	r2, r1
   185e8:	mov	r1, r0
   185ec:	mov	r0, #3
   185f0:	bl	11154 <__fxstatat64@plt>
   185f4:	add	sp, sp, #12
   185f8:	pop	{pc}		; (ldr pc, [sp], #4)

Disassembly of section .fini:

000185fc <.fini>:
   185fc:	push	{r3, lr}
   18600:	pop	{r3, pc}
