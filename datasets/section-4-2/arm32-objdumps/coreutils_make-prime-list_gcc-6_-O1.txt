
../repos/coreutils/src/make-prime-list:     file format elf32-littlearm


Disassembly of section .init:

0001056c <.init>:
   1056c:	push	{r3, lr}
   10570:	bl	106a0 <abort@plt+0x48>
   10574:	pop	{r3, pc}

Disassembly of section .plt:

00010578 <raise@plt-0x14>:
   10578:	push	{lr}		; (str lr, [sp, #-4]!)
   1057c:	ldr	lr, [pc, #4]	; 10588 <raise@plt-0x4>
   10580:	add	lr, pc, lr
   10584:	ldr	pc, [lr, #8]!
   10588:	andeq	r1, r1, r8, ror sl

0001058c <raise@plt>:
   1058c:	add	ip, pc, #0, 12
   10590:	add	ip, ip, #69632	; 0x11000
   10594:	ldr	pc, [ip, #2680]!	; 0xa78

00010598 <strtol@plt>:
   10598:	add	ip, pc, #0, 12
   1059c:	add	ip, ip, #69632	; 0x11000
   105a0:	ldr	pc, [ip, #2672]!	; 0xa70

000105a4 <free@plt>:
   105a4:	add	ip, pc, #0, 12
   105a8:	add	ip, ip, #69632	; 0x11000
   105ac:	ldr	pc, [ip, #2664]!	; 0xa68

000105b0 <ferror@plt>:
   105b0:	add	ip, pc, #0, 12
   105b4:	add	ip, ip, #69632	; 0x11000
   105b8:	ldr	pc, [ip, #2656]!	; 0xa60

000105bc <fwrite@plt>:
   105bc:	add	ip, pc, #0, 12
   105c0:	add	ip, ip, #69632	; 0x11000
   105c4:	ldr	pc, [ip, #2648]!	; 0xa58

000105c8 <puts@plt>:
   105c8:	add	ip, pc, #0, 12
   105cc:	add	ip, ip, #69632	; 0x11000
   105d0:	ldr	pc, [ip, #2640]!	; 0xa50

000105d4 <malloc@plt>:
   105d4:	add	ip, pc, #0, 12
   105d8:	add	ip, ip, #69632	; 0x11000
   105dc:	ldr	pc, [ip, #2632]!	; 0xa48

000105e0 <__libc_start_main@plt>:
   105e0:	add	ip, pc, #0, 12
   105e4:	add	ip, ip, #69632	; 0x11000
   105e8:	ldr	pc, [ip, #2624]!	; 0xa40

000105ec <strerror@plt>:
   105ec:	add	ip, pc, #0, 12
   105f0:	add	ip, ip, #69632	; 0x11000
   105f4:	ldr	pc, [ip, #2616]!	; 0xa38

000105f8 <__gmon_start__@plt>:
   105f8:	add	ip, pc, #0, 12
   105fc:	add	ip, ip, #69632	; 0x11000
   10600:	ldr	pc, [ip, #2608]!	; 0xa30

00010604 <exit@plt>:
   10604:	add	ip, pc, #0, 12
   10608:	add	ip, ip, #69632	; 0x11000
   1060c:	ldr	pc, [ip, #2600]!	; 0xa28

00010610 <__errno_location@plt>:
   10610:	add	ip, pc, #0, 12
   10614:	add	ip, ip, #69632	; 0x11000
   10618:	ldr	pc, [ip, #2592]!	; 0xa20

0001061c <memset@plt>:
   1061c:	add	ip, pc, #0, 12
   10620:	add	ip, ip, #69632	; 0x11000
   10624:	ldr	pc, [ip, #2584]!	; 0xa18

00010628 <putchar@plt>:
   10628:	add	ip, pc, #0, 12
   1062c:	add	ip, ip, #69632	; 0x11000
   10630:	ldr	pc, [ip, #2576]!	; 0xa10

00010634 <__printf_chk@plt>:
   10634:	add	ip, pc, #0, 12
   10638:	add	ip, ip, #69632	; 0x11000
   1063c:	ldr	pc, [ip, #2568]!	; 0xa08

00010640 <__fprintf_chk@plt>:
   10640:	add	ip, pc, #0, 12
   10644:	add	ip, ip, #69632	; 0x11000
   10648:	ldr	pc, [ip, #2560]!	; 0xa00

0001064c <fclose@plt>:
   1064c:	add	ip, pc, #0, 12
   10650:	add	ip, ip, #69632	; 0x11000
   10654:	ldr	pc, [ip, #2552]!	; 0x9f8

00010658 <abort@plt>:
   10658:	add	ip, pc, #0, 12
   1065c:	add	ip, ip, #69632	; 0x11000
   10660:	ldr	pc, [ip, #2544]!	; 0x9f0

Disassembly of section .text:

00010664 <.text>:
   10664:	mov	fp, #0
   10668:	mov	lr, #0
   1066c:	pop	{r1}		; (ldr r1, [sp], #4)
   10670:	mov	r2, sp
   10674:	push	{r2}		; (str r2, [sp, #-4]!)
   10678:	push	{r0}		; (str r0, [sp, #-4]!)
   1067c:	ldr	ip, [pc, #16]	; 10694 <abort@plt+0x3c>
   10680:	push	{ip}		; (str ip, [sp, #-4]!)
   10684:	ldr	r0, [pc, #12]	; 10698 <abort@plt+0x40>
   10688:	ldr	r3, [pc, #12]	; 1069c <abort@plt+0x44>
   1068c:	bl	105e0 <__libc_start_main@plt>
   10690:	bl	10658 <abort@plt>
   10694:	andeq	r0, r1, r0, asr #28
   10698:			; <UNDEFINED> instruction: 0x000108b0
   1069c:	andeq	r0, r1, r0, ror #27
   106a0:	ldr	r3, [pc, #20]	; 106bc <abort@plt+0x64>
   106a4:	ldr	r2, [pc, #20]	; 106c0 <abort@plt+0x68>
   106a8:	add	r3, pc, r3
   106ac:	ldr	r2, [r3, r2]
   106b0:	cmp	r2, #0
   106b4:	bxeq	lr
   106b8:	b	105f8 <__gmon_start__@plt>
   106bc:	andeq	r1, r1, r0, asr r9
   106c0:	andeq	r0, r0, r4, asr r0
   106c4:	ldr	r3, [pc, #28]	; 106e8 <abort@plt+0x90>
   106c8:	ldr	r0, [pc, #28]	; 106ec <abort@plt+0x94>
   106cc:	sub	r3, r3, r0
   106d0:	cmp	r3, #6
   106d4:	bxls	lr
   106d8:	ldr	r3, [pc, #16]	; 106f0 <abort@plt+0x98>
   106dc:	cmp	r3, #0
   106e0:	bxeq	lr
   106e4:	bx	r3
   106e8:	andeq	r2, r2, r3, rrx
   106ec:	andeq	r2, r2, r0, rrx
   106f0:	andeq	r0, r0, r0
   106f4:	ldr	r1, [pc, #36]	; 10720 <abort@plt+0xc8>
   106f8:	ldr	r0, [pc, #36]	; 10724 <abort@plt+0xcc>
   106fc:	sub	r1, r1, r0
   10700:	asr	r1, r1, #2
   10704:	add	r1, r1, r1, lsr #31
   10708:	asrs	r1, r1, #1
   1070c:	bxeq	lr
   10710:	ldr	r3, [pc, #16]	; 10728 <abort@plt+0xd0>
   10714:	cmp	r3, #0
   10718:	bxeq	lr
   1071c:	bx	r3
   10720:	andeq	r2, r2, r0, rrx
   10724:	andeq	r2, r2, r0, rrx
   10728:	andeq	r0, r0, r0
   1072c:	push	{r4, lr}
   10730:	ldr	r4, [pc, #24]	; 10750 <abort@plt+0xf8>
   10734:	ldrb	r3, [r4]
   10738:	cmp	r3, #0
   1073c:	popne	{r4, pc}
   10740:	bl	106c4 <abort@plt+0x6c>
   10744:	mov	r3, #1
   10748:	strb	r3, [r4]
   1074c:	pop	{r4, pc}
   10750:	andeq	r2, r2, r8, rrx
   10754:	ldr	r0, [pc, #40]	; 10784 <abort@plt+0x12c>
   10758:	ldr	r3, [r0]
   1075c:	cmp	r3, #0
   10760:	bne	10768 <abort@plt+0x110>
   10764:	b	106f4 <abort@plt+0x9c>
   10768:	ldr	r3, [pc, #24]	; 10788 <abort@plt+0x130>
   1076c:	cmp	r3, #0
   10770:	beq	10764 <abort@plt+0x10c>
   10774:	push	{r4, lr}
   10778:	blx	r3
   1077c:	pop	{r4, lr}
   10780:	b	106f4 <abort@plt+0x9c>
   10784:	andeq	r1, r2, r4, lsl pc
   10788:	andeq	r0, r0, r0
   1078c:	push	{r4, r5, r6, r7, r8, lr}
   10790:	mov	r7, r2
   10794:	mov	r5, r3
   10798:	bic	r6, r0, #-268435456	; 0xf0000000
   1079c:	mov	r2, r6
   107a0:	mov	r3, #0
   107a4:	cmp	r1, r3
   107a8:	cmpeq	r0, r6
   107ac:	beq	1083c <abort@plt+0x1e4>
   107b0:	lsr	r4, r0, #28
   107b4:	orr	r4, r4, r1, lsl #4
   107b8:	lsr	r8, r1, #28
   107bc:	lsr	r2, r1, #24
   107c0:	mov	r3, #0
   107c4:	orrs	r3, r2, r3
   107c8:	bne	10808 <abort@plt+0x1b0>
   107cc:	mov	r3, r5
   107d0:	add	r2, r7, #1
   107d4:	mov	r0, r4
   107d8:	mov	r1, r8
   107dc:	bl	1078c <abort@plt+0x134>
   107e0:	mov	r2, #28
   107e4:	ldr	r1, [pc, #120]	; 10864 <abort@plt+0x20c>
   107e8:	mov	r0, #1
   107ec:	bl	10634 <__printf_chk@plt>
   107f0:	mov	r2, #7
   107f4:	mov	r3, r6
   107f8:	ldr	r1, [pc, #104]	; 10868 <abort@plt+0x210>
   107fc:	mov	r0, #1
   10800:	bl	10634 <__printf_chk@plt>
   10804:	pop	{r4, r5, r6, r7, r8, pc}
   10808:	mov	r0, #40	; 0x28
   1080c:	bl	10628 <putchar@plt>
   10810:	mov	r3, r5
   10814:	add	r2, r7, #1
   10818:	mov	r0, r4
   1081c:	mov	r1, r8
   10820:	bl	1078c <abort@plt+0x134>
   10824:	ldr	r3, [pc, #64]	; 1086c <abort@plt+0x214>
   10828:	add	r2, r7, #3
   1082c:	ldr	r1, [pc, #60]	; 10870 <abort@plt+0x218>
   10830:	mov	r0, #1
   10834:	bl	10634 <__printf_chk@plt>
   10838:	b	107e0 <abort@plt+0x188>
   1083c:	cmp	r7, #0
   10840:	moveq	r2, #7
   10844:	beq	107f4 <abort@plt+0x19c>
   10848:	ldr	r1, [pc, #36]	; 10874 <abort@plt+0x21c>
   1084c:	mov	r0, #1
   10850:	bl	10634 <__printf_chk@plt>
   10854:	sub	r2, r5, #1
   10858:	and	r2, r2, #3
   1085c:	add	r2, r2, #1
   10860:	b	107f4 <abort@plt+0x19c>
   10864:	andeq	r0, r1, r8, asr lr
   10868:	andeq	r0, r1, r4, ror lr
   1086c:	andeq	r0, r1, ip, lsr pc
   10870:	andeq	r0, r1, r0, asr lr
   10874:	andeq	r0, r1, r4, ror #28
   10878:	push	{r4, lr}
   1087c:	bl	105d4 <malloc@plt>
   10880:	cmp	r0, #0
   10884:	popne	{r4, pc}
   10888:	ldr	r3, [pc, #24]	; 108a8 <abort@plt+0x250>
   1088c:	ldr	r3, [r3]
   10890:	mov	r2, #26
   10894:	mov	r1, #1
   10898:	ldr	r0, [pc, #12]	; 108ac <abort@plt+0x254>
   1089c:	bl	105bc <fwrite@plt>
   108a0:	mov	r0, #1
   108a4:	bl	10604 <exit@plt>
   108a8:	andeq	r2, r2, r0, rrx
   108ac:	andeq	r0, r1, ip, ror lr
   108b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   108b4:	sub	sp, sp, #20
   108b8:	mov	r3, r1
   108bc:	cmp	r0, #2
   108c0:	beq	108e4 <abort@plt+0x28c>
   108c4:	ldr	r3, [r1]
   108c8:	ldr	r2, [pc, #880]	; 10c40 <abort@plt+0x5e8>
   108cc:	mov	r1, #1
   108d0:	ldr	r0, [pc, #876]	; 10c44 <abort@plt+0x5ec>
   108d4:	ldr	r0, [r0]
   108d8:	bl	10640 <__fprintf_chk@plt>
   108dc:	mov	r0, #1
   108e0:	b	10c38 <abort@plt+0x5e0>
   108e4:	mov	r2, #10
   108e8:	mov	r1, #0
   108ec:	ldr	r0, [r3, #4]
   108f0:	bl	10598 <strtol@plt>
   108f4:	cmp	r0, #2
   108f8:	ble	10bf0 <abort@plt+0x598>
   108fc:	tst	r0, #1
   10900:	subeq	r0, r0, #1
   10904:	sub	r0, r0, #1
   10908:	add	r0, r0, r0, lsr #31
   1090c:	asr	fp, r0, #1
   10910:	mov	r0, fp
   10914:	bl	10878 <abort@plt+0x220>
   10918:	mov	r9, r0
   1091c:	mov	r2, fp
   10920:	mov	r1, #1
   10924:	bl	1061c <memset@plt>
   10928:	mov	r0, #24
   1092c:	mul	r0, r0, fp
   10930:	bl	10878 <abort@plt+0x220>
   10934:	str	r0, [sp, #12]
   10938:	cmp	fp, #0
   1093c:	beq	10a54 <abort@plt+0x3fc>
   10940:	str	r0, [sp, #8]
   10944:	mov	r3, #0
   10948:	str	r3, [sp, #4]
   1094c:	mov	sl, r3
   10950:	str	r9, [sp]
   10954:	b	10a0c <abort@plt+0x3b4>
   10958:	mov	r4, r2
   1095c:	mov	r5, r3
   10960:	adds	r0, r4, r4
   10964:	adc	r1, r5, r5
   10968:	mul	ip, r4, r5
   1096c:	umull	r2, r3, r4, r4
   10970:	add	r3, r3, ip, lsl #1
   10974:	mul	ip, r2, r9
   10978:	mla	ip, r8, r3, ip
   1097c:	umull	r2, r3, r2, r8
   10980:	add	r3, ip, r3
   10984:	subs	r2, r0, r2
   10988:	sbc	r3, r1, r3
   1098c:	cmp	r5, r3
   10990:	cmpeq	r4, r2
   10994:	bne	10958 <abort@plt+0x300>
   10998:	strd	r4, [r7, #8]
   1099c:	mov	r2, r8
   109a0:	mov	r3, r9
   109a4:	mvn	r0, #0
   109a8:	mvn	r1, #0
   109ac:	bl	10c6c <abort@plt+0x614>
   109b0:	strd	r0, [r7, #16]
   109b4:	mul	r3, r6, r6
   109b8:	sub	r3, r3, #3
   109bc:	lsr	r3, r3, #1
   109c0:	cmp	fp, r3
   109c4:	bls	109e0 <abort@plt+0x388>
   109c8:	ldr	r2, [sp]
   109cc:	mov	r1, #0
   109d0:	strb	r1, [r2, r3]
   109d4:	add	r3, r3, r6
   109d8:	cmp	fp, r3
   109dc:	bhi	109cc <abort@plt+0x374>
   109e0:	ldr	r3, [sp]
   109e4:	add	r3, r3, sl
   109e8:	add	sl, sl, #1
   109ec:	cmp	fp, sl
   109f0:	bls	10a60 <abort@plt+0x408>
   109f4:	ldrb	r2, [r3, #1]!
   109f8:	cmp	r2, #0
   109fc:	beq	109e8 <abort@plt+0x390>
   10a00:	ldr	r3, [sp, #8]
   10a04:	add	r3, r3, #24
   10a08:	str	r3, [sp, #8]
   10a0c:	lsl	r6, sl, #1
   10a10:	add	r6, r6, #3
   10a14:	ldr	r3, [sp, #4]
   10a18:	add	r3, r3, #1
   10a1c:	str	r3, [sp, #4]
   10a20:	ldr	r3, [sp, #8]
   10a24:	mov	r7, r3
   10a28:	str	r6, [r3]
   10a2c:	mov	r8, r6
   10a30:	mov	r9, #0
   10a34:	lsrs	r5, r9, #1
   10a38:	rrx	r4, r8
   10a3c:	and	r4, r4, #7
   10a40:	lsl	r4, r4, #2
   10a44:	ldr	r3, [pc, #508]	; 10c48 <abort@plt+0x5f0>
   10a48:	lsr	r4, r3, r4
   10a4c:	mov	r5, #0
   10a50:	b	10960 <abort@plt+0x308>
   10a54:	mov	r3, #0
   10a58:	str	r3, [sp, #4]
   10a5c:	b	10a64 <abort@plt+0x40c>
   10a60:	ldr	r9, [sp]
   10a64:	mov	r3, #0
   10a68:	add	r3, r3, #1
   10a6c:	cmp	r3, #64	; 0x40
   10a70:	bne	10a68 <abort@plt+0x410>
   10a74:	ldr	r0, [pc, #464]	; 10c4c <abort@plt+0x5f4>
   10a78:	bl	105c8 <puts@plt>
   10a7c:	mov	r2, #64	; 0x40
   10a80:	ldr	r1, [pc, #456]	; 10c50 <abort@plt+0x5f8>
   10a84:	mov	r0, #1
   10a88:	bl	10634 <__printf_chk@plt>
   10a8c:	ldr	r3, [sp, #4]
   10a90:	cmp	r3, #0
   10a94:	beq	10bb8 <abort@plt+0x560>
   10a98:	ldr	r5, [sp, #12]
   10a9c:	add	r8, r3, #8
   10aa0:	mov	r6, #8
   10aa4:	mov	r2, #2
   10aa8:	mov	r7, #1
   10aac:	mov	sl, #64	; 0x40
   10ab0:	mov	fp, #0
   10ab4:	str	r9, [sp]
   10ab8:	mov	r9, r3
   10abc:	cmp	r6, r9
   10ac0:	bcs	10bb0 <abort@plt+0x558>
   10ac4:	ldr	r3, [r5, #192]	; 0xc0
   10ac8:	ldr	r1, [r5]
   10acc:	sub	r3, r3, r1
   10ad0:	cmp	r3, #255	; 0xff
   10ad4:	bhi	10bac <abort@plt+0x554>
   10ad8:	ldr	r4, [r5]
   10adc:	sub	r2, r4, r2
   10ae0:	ldr	r1, [pc, #364]	; 10c54 <abort@plt+0x5fc>
   10ae4:	mov	r0, r7
   10ae8:	bl	10634 <__printf_chk@plt>
   10aec:	mov	r3, sl
   10af0:	mov	r2, fp
   10af4:	ldrd	r0, [r5, #8]
   10af8:	bl	1078c <abort@plt+0x134>
   10afc:	mov	r2, r4
   10b00:	ldr	r1, [pc, #336]	; 10c58 <abort@plt+0x600>
   10b04:	mov	r0, r7
   10b08:	bl	10634 <__printf_chk@plt>
   10b0c:	add	r6, r6, #1
   10b10:	add	r5, r5, #24
   10b14:	mov	r2, r4
   10b18:	cmp	r8, r6
   10b1c:	bne	10abc <abort@plt+0x464>
   10b20:	ldr	r9, [sp]
   10b24:	ldr	r0, [pc, #304]	; 10c5c <abort@plt+0x604>
   10b28:	bl	105c8 <puts@plt>
   10b2c:	ldr	r3, [sp, #12]
   10b30:	ldr	lr, [r3]
   10b34:	mul	lr, lr, lr
   10b38:	mov	r0, r3
   10b3c:	add	r4, r4, #2
   10b40:	cmp	lr, r4
   10b44:	bhi	10bf8 <abort@plt+0x5a0>
   10b48:	mov	r1, r4
   10b4c:	ldr	r6, [r0, #8]
   10b50:	ldr	r3, [r0, #12]
   10b54:	umull	r6, r7, r6, r4
   10b58:	mla	r7, r4, r3, r7
   10b5c:	ldrd	r2, [r0, #16]
   10b60:	cmp	r7, r3
   10b64:	cmpeq	r6, r2
   10b68:	bls	10b3c <abort@plt+0x4e4>
   10b6c:	mov	ip, r0
   10b70:	mov	r5, ip
   10b74:	ldr	r3, [ip, #24]
   10b78:	mul	r3, r3, r3
   10b7c:	cmp	r4, r3
   10b80:	bcc	10bf8 <abort@plt+0x5a0>
   10b84:	add	ip, ip, #24
   10b88:	ldr	r2, [r5, #32]
   10b8c:	ldr	r5, [r5, #36]	; 0x24
   10b90:	umull	r2, r3, r2, r1
   10b94:	mla	r3, r1, r5, r3
   10b98:	ldrd	r6, [ip, #16]
   10b9c:	cmp	r3, r7
   10ba0:	cmpeq	r2, r6
   10ba4:	bhi	10b70 <abort@plt+0x518>
   10ba8:	b	10b3c <abort@plt+0x4e4>
   10bac:	bl	10658 <abort@plt>
   10bb0:	mov	r3, #255	; 0xff
   10bb4:	b	10ad8 <abort@plt+0x480>
   10bb8:	mov	r4, #2
   10bbc:	b	10b24 <abort@plt+0x4cc>
   10bc0:	ldr	r3, [pc, #124]	; 10c44 <abort@plt+0x5ec>
   10bc4:	ldr	r4, [r3]
   10bc8:	bl	10610 <__errno_location@plt>
   10bcc:	ldr	r0, [r0]
   10bd0:	bl	105ec <strerror@plt>
   10bd4:	mov	r3, r0
   10bd8:	ldr	r2, [pc, #128]	; 10c60 <abort@plt+0x608>
   10bdc:	mov	r1, #1
   10be0:	mov	r0, r4
   10be4:	bl	10640 <__fprintf_chk@plt>
   10be8:	mov	r0, #1
   10bec:	b	10c38 <abort@plt+0x5e0>
   10bf0:	mov	r0, #0
   10bf4:	b	10c38 <abort@plt+0x5e0>
   10bf8:	mov	r2, r4
   10bfc:	ldr	r1, [pc, #96]	; 10c64 <abort@plt+0x60c>
   10c00:	mov	r0, #1
   10c04:	bl	10634 <__printf_chk@plt>
   10c08:	mov	r0, r9
   10c0c:	bl	105a4 <free@plt>
   10c10:	ldr	r0, [sp, #12]
   10c14:	bl	105a4 <free@plt>
   10c18:	ldr	r5, [pc, #72]	; 10c68 <abort@plt+0x610>
   10c1c:	ldr	r0, [r5]
   10c20:	bl	105b0 <ferror@plt>
   10c24:	mov	r4, r0
   10c28:	ldr	r0, [r5]
   10c2c:	bl	1064c <fclose@plt>
   10c30:	adds	r0, r4, r0
   10c34:	bne	10bc0 <abort@plt+0x568>
   10c38:	add	sp, sp, #20
   10c3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10c40:	muleq	r1, r8, lr
   10c44:	andeq	r2, r2, r0, rrx
   10c48:			; <UNDEFINED> instruction: 0xf5397db1
   10c4c:	ldrdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   10c50:	strdeq	r0, [r1], -r8
   10c54:	andeq	r0, r1, r4, lsl pc
   10c58:	andeq	r0, r1, r4, lsr #30
   10c5c:	andeq	r0, r1, r0, asr #30
   10c60:	andeq	r0, r1, ip, asr pc
   10c64:	andeq	r0, r1, r0, ror pc
   10c68:	andeq	r2, r2, r4, rrx
   10c6c:	cmp	r3, #0
   10c70:	cmpeq	r2, #0
   10c74:	bne	10c8c <abort@plt+0x634>
   10c78:	cmp	r1, #0
   10c7c:	cmpeq	r0, #0
   10c80:	mvnne	r1, #0
   10c84:	mvnne	r0, #0
   10c88:	b	10ca8 <abort@plt+0x650>
   10c8c:	sub	sp, sp, #8
   10c90:	push	{sp, lr}
   10c94:	bl	10cb8 <abort@plt+0x660>
   10c98:	ldr	lr, [sp, #4]
   10c9c:	add	sp, sp, #8
   10ca0:	pop	{r2, r3}
   10ca4:	bx	lr
   10ca8:	push	{r1, lr}
   10cac:	mov	r0, #8
   10cb0:	bl	1058c <raise@plt>
   10cb4:	pop	{r1, pc}
   10cb8:	cmp	r1, r3
   10cbc:	push	{r4, r5, r6, r7, r8, r9, lr}
   10cc0:	cmpeq	r0, r2
   10cc4:	mov	r4, r0
   10cc8:	mov	r5, r1
   10ccc:	ldr	r9, [sp, #28]
   10cd0:	movcc	r0, #0
   10cd4:	movcc	r1, #0
   10cd8:	bcc	10dd0 <abort@plt+0x778>
   10cdc:	cmp	r3, #0
   10ce0:	clzeq	ip, r2
   10ce4:	clzne	ip, r3
   10ce8:	addeq	ip, ip, #32
   10cec:	cmp	r5, #0
   10cf0:	clzeq	r1, r4
   10cf4:	addeq	r1, r1, #32
   10cf8:	clzne	r1, r5
   10cfc:	sub	ip, ip, r1
   10d00:	sub	lr, ip, #32
   10d04:	lsl	r7, r3, ip
   10d08:	rsb	r8, ip, #32
   10d0c:	orr	r7, r7, r2, lsl lr
   10d10:	orr	r7, r7, r2, lsr r8
   10d14:	lsl	r6, r2, ip
   10d18:	cmp	r5, r7
   10d1c:	cmpeq	r4, r6
   10d20:	movcc	r0, #0
   10d24:	movcc	r1, #0
   10d28:	bcc	10d44 <abort@plt+0x6ec>
   10d2c:	mov	r3, #1
   10d30:	subs	r4, r4, r6
   10d34:	lsl	r1, r3, lr
   10d38:	lsl	r0, r3, ip
   10d3c:	orr	r1, r1, r3, lsr r8
   10d40:	sbc	r5, r5, r7
   10d44:	cmp	ip, #0
   10d48:	beq	10dd0 <abort@plt+0x778>
   10d4c:	lsrs	r3, r7, #1
   10d50:	rrx	r2, r6
   10d54:	mov	r6, ip
   10d58:	b	10d7c <abort@plt+0x724>
   10d5c:	subs	r4, r4, r2
   10d60:	sbc	r5, r5, r3
   10d64:	adds	r4, r4, r4
   10d68:	adc	r5, r5, r5
   10d6c:	adds	r4, r4, #1
   10d70:	adc	r5, r5, #0
   10d74:	subs	r6, r6, #1
   10d78:	beq	10d98 <abort@plt+0x740>
   10d7c:	cmp	r5, r3
   10d80:	cmpeq	r4, r2
   10d84:	bcs	10d5c <abort@plt+0x704>
   10d88:	adds	r4, r4, r4
   10d8c:	adc	r5, r5, r5
   10d90:	subs	r6, r6, #1
   10d94:	bne	10d7c <abort@plt+0x724>
   10d98:	lsr	r6, r4, ip
   10d9c:	lsr	r7, r5, ip
   10da0:	orr	r6, r6, r5, lsl r8
   10da4:	adds	r2, r0, r4
   10da8:	orr	r6, r6, r5, lsr lr
   10dac:	adc	r3, r1, r5
   10db0:	lsl	r1, r7, ip
   10db4:	orr	r1, r1, r6, lsl lr
   10db8:	lsl	r0, r6, ip
   10dbc:	orr	r1, r1, r6, lsr r8
   10dc0:	subs	r0, r2, r0
   10dc4:	mov	r4, r6
   10dc8:	mov	r5, r7
   10dcc:	sbc	r1, r3, r1
   10dd0:	cmp	r9, #0
   10dd4:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   10dd8:	strd	r4, [r9]
   10ddc:	pop	{r4, r5, r6, r7, r8, r9, pc}
   10de0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10de4:	mov	r7, r0
   10de8:	ldr	r6, [pc, #72]	; 10e38 <abort@plt+0x7e0>
   10dec:	ldr	r5, [pc, #72]	; 10e3c <abort@plt+0x7e4>
   10df0:	add	r6, pc, r6
   10df4:	add	r5, pc, r5
   10df8:	sub	r6, r6, r5
   10dfc:	mov	r8, r1
   10e00:	mov	r9, r2
   10e04:	bl	1056c <raise@plt-0x20>
   10e08:	asrs	r6, r6, #2
   10e0c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10e10:	mov	r4, #0
   10e14:	add	r4, r4, #1
   10e18:	ldr	r3, [r5], #4
   10e1c:	mov	r2, r9
   10e20:	mov	r1, r8
   10e24:	mov	r0, r7
   10e28:	blx	r3
   10e2c:	cmp	r6, r4
   10e30:	bne	10e14 <abort@plt+0x7bc>
   10e34:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10e38:	andeq	r1, r1, r8, lsl r1
   10e3c:	andeq	r1, r1, r0, lsl r1
   10e40:	bx	lr

Disassembly of section .fini:

00010e44 <.fini>:
   10e44:	push	{r3, lr}
   10e48:	pop	{r3, pc}
