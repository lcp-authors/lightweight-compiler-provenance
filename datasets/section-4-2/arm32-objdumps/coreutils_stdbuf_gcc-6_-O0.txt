
../repos/coreutils/src/stdbuf:     file format elf32-littlearm


Disassembly of section .init:

00010ce4 <.init>:
   10ce4:	push	{r3, lr}
   10ce8:	bl	10fec <__assert_fail@plt+0x48>
   10cec:	pop	{r3, pc}

Disassembly of section .plt:

00010cf0 <calloc@plt-0x14>:
   10cf0:	push	{lr}		; (str lr, [sp, #-4]!)
   10cf4:	ldr	lr, [pc, #4]	; 10d00 <calloc@plt-0x4>
   10cf8:	add	lr, pc, lr
   10cfc:	ldr	pc, [lr, #8]!
   10d00:	andeq	r9, r1, r0, lsl #6

00010d04 <calloc@plt>:
   10d04:	add	ip, pc, #0, 12
   10d08:	add	ip, ip, #102400	; 0x19000
   10d0c:	ldr	pc, [ip, #768]!	; 0x300

00010d10 <fputs_unlocked@plt>:
   10d10:	add	ip, pc, #0, 12
   10d14:	add	ip, ip, #102400	; 0x19000
   10d18:	ldr	pc, [ip, #760]!	; 0x2f8

00010d1c <raise@plt>:
   10d1c:	add	ip, pc, #0, 12
   10d20:	add	ip, ip, #102400	; 0x19000
   10d24:	ldr	pc, [ip, #752]!	; 0x2f0

00010d28 <strcmp@plt>:
   10d28:	add	ip, pc, #0, 12
   10d2c:	add	ip, ip, #102400	; 0x19000
   10d30:	ldr	pc, [ip, #744]!	; 0x2e8

00010d34 <printf@plt>:
   10d34:	add	ip, pc, #0, 12
   10d38:	add	ip, ip, #102400	; 0x19000
   10d3c:	ldr	pc, [ip, #736]!	; 0x2e0

00010d40 <fflush@plt>:
   10d40:	add	ip, pc, #0, 12
   10d44:	add	ip, ip, #102400	; 0x19000
   10d48:	ldr	pc, [ip, #728]!	; 0x2d8

00010d4c <free@plt>:
   10d4c:	add	ip, pc, #0, 12
   10d50:	add	ip, ip, #102400	; 0x19000
   10d54:	ldr	pc, [ip, #720]!	; 0x2d0

00010d58 <_exit@plt>:
   10d58:	add	ip, pc, #0, 12
   10d5c:	add	ip, ip, #102400	; 0x19000
   10d60:	ldr	pc, [ip, #712]!	; 0x2c8

00010d64 <memcpy@plt>:
   10d64:	add	ip, pc, #0, 12
   10d68:	add	ip, ip, #102400	; 0x19000
   10d6c:	ldr	pc, [ip, #704]!	; 0x2c0

00010d70 <execvp@plt>:
   10d70:	add	ip, pc, #0, 12
   10d74:	add	ip, ip, #102400	; 0x19000
   10d78:	ldr	pc, [ip, #696]!	; 0x2b8

00010d7c <mbsinit@plt>:
   10d7c:	add	ip, pc, #0, 12
   10d80:	add	ip, ip, #102400	; 0x19000
   10d84:	ldr	pc, [ip, #688]!	; 0x2b0

00010d88 <memcmp@plt>:
   10d88:	add	ip, pc, #0, 12
   10d8c:	add	ip, ip, #102400	; 0x19000
   10d90:	ldr	pc, [ip, #680]!	; 0x2a8

00010d94 <fputc_unlocked@plt>:
   10d94:	add	ip, pc, #0, 12
   10d98:	add	ip, ip, #102400	; 0x19000
   10d9c:	ldr	pc, [ip, #672]!	; 0x2a0

00010da0 <realloc@plt>:
   10da0:	add	ip, pc, #0, 12
   10da4:	add	ip, ip, #102400	; 0x19000
   10da8:	ldr	pc, [ip, #664]!	; 0x298

00010dac <textdomain@plt>:
   10dac:	add	ip, pc, #0, 12
   10db0:	add	ip, ip, #102400	; 0x19000
   10db4:	ldr	pc, [ip, #656]!	; 0x290

00010db8 <iswprint@plt>:
   10db8:	add	ip, pc, #0, 12
   10dbc:	add	ip, ip, #102400	; 0x19000
   10dc0:	ldr	pc, [ip, #648]!	; 0x288

00010dc4 <readlink@plt>:
   10dc4:	add	ip, pc, #0, 12
   10dc8:	add	ip, ip, #102400	; 0x19000
   10dcc:	ldr	pc, [ip, #640]!	; 0x280

00010dd0 <fwrite@plt>:
   10dd0:	add	ip, pc, #0, 12
   10dd4:	add	ip, ip, #102400	; 0x19000
   10dd8:	ldr	pc, [ip, #632]!	; 0x278

00010ddc <lseek64@plt>:
   10ddc:	add	ip, pc, #0, 12
   10de0:	add	ip, ip, #102400	; 0x19000
   10de4:	ldr	pc, [ip, #624]!	; 0x270

00010de8 <__ctype_get_mb_cur_max@plt>:
   10de8:	add	ip, pc, #0, 12
   10dec:	add	ip, ip, #102400	; 0x19000
   10df0:	ldr	pc, [ip, #616]!	; 0x268

00010df4 <__fpending@plt>:
   10df4:	add	ip, pc, #0, 12
   10df8:	add	ip, ip, #102400	; 0x19000
   10dfc:	ldr	pc, [ip, #608]!	; 0x260

00010e00 <ferror_unlocked@plt>:
   10e00:	add	ip, pc, #0, 12
   10e04:	add	ip, ip, #102400	; 0x19000
   10e08:	ldr	pc, [ip, #600]!	; 0x258

00010e0c <mbrtowc@plt>:
   10e0c:	add	ip, pc, #0, 12
   10e10:	add	ip, ip, #102400	; 0x19000
   10e14:	ldr	pc, [ip, #592]!	; 0x250

00010e18 <error@plt>:
   10e18:	add	ip, pc, #0, 12
   10e1c:	add	ip, ip, #102400	; 0x19000
   10e20:	ldr	pc, [ip, #584]!	; 0x248

00010e24 <getenv@plt>:
   10e24:	add	ip, pc, #0, 12
   10e28:	add	ip, ip, #102400	; 0x19000
   10e2c:	ldr	pc, [ip, #576]!	; 0x240

00010e30 <malloc@plt>:
   10e30:	add	ip, pc, #0, 12
   10e34:	add	ip, ip, #102400	; 0x19000
   10e38:	ldr	pc, [ip, #568]!	; 0x238

00010e3c <__libc_start_main@plt>:
   10e3c:	add	ip, pc, #0, 12
   10e40:	add	ip, ip, #102400	; 0x19000
   10e44:	ldr	pc, [ip, #560]!	; 0x230

00010e48 <__freading@plt>:
   10e48:	add	ip, pc, #0, 12
   10e4c:	add	ip, ip, #102400	; 0x19000
   10e50:	ldr	pc, [ip, #552]!	; 0x228

00010e54 <__gmon_start__@plt>:
   10e54:	add	ip, pc, #0, 12
   10e58:	add	ip, ip, #102400	; 0x19000
   10e5c:	ldr	pc, [ip, #544]!	; 0x220

00010e60 <mempcpy@plt>:
   10e60:	add	ip, pc, #0, 12
   10e64:	add	ip, ip, #102400	; 0x19000
   10e68:	ldr	pc, [ip, #536]!	; 0x218

00010e6c <getopt_long@plt>:
   10e6c:	add	ip, pc, #0, 12
   10e70:	add	ip, ip, #102400	; 0x19000
   10e74:	ldr	pc, [ip, #528]!	; 0x210

00010e78 <__ctype_b_loc@plt>:
   10e78:	add	ip, pc, #0, 12
   10e7c:	add	ip, ip, #102400	; 0x19000
   10e80:	ldr	pc, [ip, #520]!	; 0x208

00010e84 <exit@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #102400	; 0x19000
   10e8c:	ldr	pc, [ip, #512]!	; 0x200

00010e90 <gettext@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #102400	; 0x19000
   10e98:	ldr	pc, [ip, #504]!	; 0x1f8

00010e9c <strlen@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #102400	; 0x19000
   10ea4:	ldr	pc, [ip, #496]!	; 0x1f0

00010ea8 <strchr@plt>:
   10ea8:	add	ip, pc, #0, 12
   10eac:	add	ip, ip, #102400	; 0x19000
   10eb0:	ldr	pc, [ip, #488]!	; 0x1e8

00010eb4 <fprintf@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #102400	; 0x19000
   10ebc:	ldr	pc, [ip, #480]!	; 0x1e0

00010ec0 <__errno_location@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #102400	; 0x19000
   10ec8:	ldr	pc, [ip, #472]!	; 0x1d8

00010ecc <__cxa_atexit@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #102400	; 0x19000
   10ed4:	ldr	pc, [ip, #464]!	; 0x1d0

00010ed8 <memset@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #102400	; 0x19000
   10ee0:	ldr	pc, [ip, #456]!	; 0x1c8

00010ee4 <fileno@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #102400	; 0x19000
   10eec:	ldr	pc, [ip, #448]!	; 0x1c0

00010ef0 <strtoumax@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #102400	; 0x19000
   10ef8:	ldr	pc, [ip, #440]!	; 0x1b8

00010efc <asprintf@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #102400	; 0x19000
   10f04:	ldr	pc, [ip, #432]!	; 0x1b0

00010f08 <access@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #102400	; 0x19000
   10f10:	ldr	pc, [ip, #424]!	; 0x1a8

00010f14 <fclose@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #102400	; 0x19000
   10f1c:	ldr	pc, [ip, #416]!	; 0x1a0

00010f20 <fseeko64@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #102400	; 0x19000
   10f28:	ldr	pc, [ip, #408]!	; 0x198

00010f2c <strtok@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #102400	; 0x19000
   10f34:	ldr	pc, [ip, #400]!	; 0x190

00010f38 <setlocale@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #102400	; 0x19000
   10f40:	ldr	pc, [ip, #392]!	; 0x188

00010f44 <putenv@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #102400	; 0x19000
   10f4c:	ldr	pc, [ip, #384]!	; 0x180

00010f50 <toupper@plt>:
   10f50:	add	ip, pc, #0, 12
   10f54:	add	ip, ip, #102400	; 0x19000
   10f58:	ldr	pc, [ip, #376]!	; 0x178

00010f5c <strrchr@plt>:
   10f5c:	add	ip, pc, #0, 12
   10f60:	add	ip, ip, #102400	; 0x19000
   10f64:	ldr	pc, [ip, #368]!	; 0x170

00010f68 <nl_langinfo@plt>:
   10f68:	add	ip, pc, #0, 12
   10f6c:	add	ip, ip, #102400	; 0x19000
   10f70:	ldr	pc, [ip, #360]!	; 0x168

00010f74 <bindtextdomain@plt>:
   10f74:	add	ip, pc, #0, 12
   10f78:	add	ip, ip, #102400	; 0x19000
   10f7c:	ldr	pc, [ip, #352]!	; 0x160

00010f80 <__xstat64@plt>:
   10f80:	add	ip, pc, #0, 12
   10f84:	add	ip, ip, #102400	; 0x19000
   10f88:	ldr	pc, [ip, #344]!	; 0x158

00010f8c <strncmp@plt>:
   10f8c:	add	ip, pc, #0, 12
   10f90:	add	ip, ip, #102400	; 0x19000
   10f94:	ldr	pc, [ip, #336]!	; 0x150

00010f98 <abort@plt>:
   10f98:	add	ip, pc, #0, 12
   10f9c:	add	ip, ip, #102400	; 0x19000
   10fa0:	ldr	pc, [ip, #328]!	; 0x148

00010fa4 <__assert_fail@plt>:
   10fa4:	add	ip, pc, #0, 12
   10fa8:	add	ip, ip, #102400	; 0x19000
   10fac:	ldr	pc, [ip, #320]!	; 0x140

Disassembly of section .text:

00010fb0 <.text>:
   10fb0:	mov	fp, #0
   10fb4:	mov	lr, #0
   10fb8:	pop	{r1}		; (ldr r1, [sp], #4)
   10fbc:	mov	r2, sp
   10fc0:	push	{r2}		; (str r2, [sp, #-4]!)
   10fc4:	push	{r0}		; (str r0, [sp, #-4]!)
   10fc8:	ldr	ip, [pc, #16]	; 10fe0 <__assert_fail@plt+0x3c>
   10fcc:	push	{ip}		; (str ip, [sp, #-4]!)
   10fd0:	ldr	r0, [pc, #12]	; 10fe4 <__assert_fail@plt+0x40>
   10fd4:	ldr	r3, [pc, #12]	; 10fe8 <__assert_fail@plt+0x44>
   10fd8:	bl	10e3c <__libc_start_main@plt>
   10fdc:	bl	10f98 <abort@plt>
   10fe0:	andeq	r8, r1, r4, asr #6
   10fe4:	andeq	r1, r1, r4, lsl #22
   10fe8:	andeq	r8, r1, r4, ror #5
   10fec:	ldr	r3, [pc, #20]	; 11008 <__assert_fail@plt+0x64>
   10ff0:	ldr	r2, [pc, #20]	; 1100c <__assert_fail@plt+0x68>
   10ff4:	add	r3, pc, r3
   10ff8:	ldr	r2, [r3, r2]
   10ffc:	cmp	r2, #0
   11000:	bxeq	lr
   11004:	b	10e54 <__gmon_start__@plt>
   11008:	andeq	r9, r1, r4
   1100c:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   11010:	ldr	r3, [pc, #28]	; 11034 <__assert_fail@plt+0x90>
   11014:	ldr	r0, [pc, #28]	; 11038 <__assert_fail@plt+0x94>
   11018:	sub	r3, r3, r0
   1101c:	cmp	r3, #6
   11020:	bxls	lr
   11024:	ldr	r3, [pc, #16]	; 1103c <__assert_fail@plt+0x98>
   11028:	cmp	r3, #0
   1102c:	bxeq	lr
   11030:	bx	r3
   11034:	andeq	sl, r2, r7, asr #2
   11038:	andeq	sl, r2, r4, asr #2
   1103c:	andeq	r0, r0, r0
   11040:	ldr	r1, [pc, #36]	; 1106c <__assert_fail@plt+0xc8>
   11044:	ldr	r0, [pc, #36]	; 11070 <__assert_fail@plt+0xcc>
   11048:	sub	r1, r1, r0
   1104c:	asr	r1, r1, #2
   11050:	add	r1, r1, r1, lsr #31
   11054:	asrs	r1, r1, #1
   11058:	bxeq	lr
   1105c:	ldr	r3, [pc, #16]	; 11074 <__assert_fail@plt+0xd0>
   11060:	cmp	r3, #0
   11064:	bxeq	lr
   11068:	bx	r3
   1106c:	andeq	sl, r2, r4, asr #2
   11070:	andeq	sl, r2, r4, asr #2
   11074:	andeq	r0, r0, r0
   11078:	push	{r4, lr}
   1107c:	ldr	r4, [pc, #24]	; 1109c <__assert_fail@plt+0xf8>
   11080:	ldrb	r3, [r4]
   11084:	cmp	r3, #0
   11088:	popne	{r4, pc}
   1108c:	bl	11010 <__assert_fail@plt+0x6c>
   11090:	mov	r3, #1
   11094:	strb	r3, [r4]
   11098:	pop	{r4, pc}
   1109c:	andeq	sl, r2, r4, ror #2
   110a0:	ldr	r0, [pc, #40]	; 110d0 <__assert_fail@plt+0x12c>
   110a4:	ldr	r3, [r0]
   110a8:	cmp	r3, #0
   110ac:	bne	110b4 <__assert_fail@plt+0x110>
   110b0:	b	11040 <__assert_fail@plt+0x9c>
   110b4:	ldr	r3, [pc, #24]	; 110d4 <__assert_fail@plt+0x130>
   110b8:	cmp	r3, #0
   110bc:	beq	110b0 <__assert_fail@plt+0x10c>
   110c0:	push	{r4, lr}
   110c4:	blx	r3
   110c8:	pop	{r4, lr}
   110cc:	b	11040 <__assert_fail@plt+0x9c>
   110d0:	andeq	r9, r2, r4, lsl pc
   110d4:	andeq	r0, r0, r0
   110d8:	push	{fp}		; (str fp, [sp, #-4]!)
   110dc:	add	fp, sp, #0
   110e0:	sub	sp, sp, #12
   110e4:	str	r0, [fp, #-8]
   110e8:	ldr	r3, [fp, #-8]
   110ec:	cmp	r3, #1
   110f0:	beq	11100 <__assert_fail@plt+0x15c>
   110f4:	ldr	r2, [pc, #20]	; 11110 <__assert_fail@plt+0x16c>
   110f8:	ldr	r3, [fp, #-8]
   110fc:	str	r3, [r2]
   11100:	nop			; (mov r0, r0)
   11104:	add	sp, fp, #0
   11108:	pop	{fp}		; (ldr fp, [sp], #4)
   1110c:	bx	lr
   11110:	andeq	sl, r2, r0, lsl #2
   11114:	push	{fp, lr}
   11118:	add	fp, sp, #4
   1111c:	ldr	r0, [pc, #32]	; 11144 <__assert_fail@plt+0x1a0>
   11120:	bl	10e90 <gettext@plt>
   11124:	mov	r2, r0
   11128:	ldr	r3, [pc, #24]	; 11148 <__assert_fail@plt+0x1a4>
   1112c:	ldr	r3, [r3]
   11130:	mov	r1, r3
   11134:	mov	r0, r2
   11138:	bl	10d10 <fputs_unlocked@plt>
   1113c:	nop			; (mov r0, r0)
   11140:	pop	{fp, pc}
   11144:	andeq	r8, r1, ip, ror r3
   11148:	andeq	sl, r2, ip, asr r1
   1114c:	push	{fp, lr}
   11150:	add	fp, sp, #4
   11154:	sub	sp, sp, #80	; 0x50
   11158:	str	r0, [fp, #-80]	; 0xffffffb0
   1115c:	ldr	r3, [pc, #348]	; 112c0 <__assert_fail@plt+0x31c>
   11160:	sub	ip, fp, #72	; 0x48
   11164:	mov	lr, r3
   11168:	ldm	lr!, {r0, r1, r2, r3}
   1116c:	stmia	ip!, {r0, r1, r2, r3}
   11170:	ldm	lr!, {r0, r1, r2, r3}
   11174:	stmia	ip!, {r0, r1, r2, r3}
   11178:	ldm	lr!, {r0, r1, r2, r3}
   1117c:	stmia	ip!, {r0, r1, r2, r3}
   11180:	ldm	lr, {r0, r1}
   11184:	stm	ip, {r0, r1}
   11188:	ldr	r3, [fp, #-80]	; 0xffffffb0
   1118c:	str	r3, [fp, #-8]
   11190:	sub	r3, fp, #72	; 0x48
   11194:	str	r3, [fp, #-12]
   11198:	b	111a8 <__assert_fail@plt+0x204>
   1119c:	ldr	r3, [fp, #-12]
   111a0:	add	r3, r3, #8
   111a4:	str	r3, [fp, #-12]
   111a8:	ldr	r3, [fp, #-12]
   111ac:	ldr	r3, [r3]
   111b0:	cmp	r3, #0
   111b4:	beq	111d8 <__assert_fail@plt+0x234>
   111b8:	ldr	r3, [fp, #-12]
   111bc:	ldr	r3, [r3]
   111c0:	mov	r1, r3
   111c4:	ldr	r0, [fp, #-80]	; 0xffffffb0
   111c8:	bl	10d28 <strcmp@plt>
   111cc:	mov	r3, r0
   111d0:	cmp	r3, #0
   111d4:	bne	1119c <__assert_fail@plt+0x1f8>
   111d8:	ldr	r3, [fp, #-12]
   111dc:	ldr	r3, [r3, #4]
   111e0:	cmp	r3, #0
   111e4:	beq	111f4 <__assert_fail@plt+0x250>
   111e8:	ldr	r3, [fp, #-12]
   111ec:	ldr	r3, [r3, #4]
   111f0:	str	r3, [fp, #-8]
   111f4:	ldr	r0, [pc, #200]	; 112c4 <__assert_fail@plt+0x320>
   111f8:	bl	10e90 <gettext@plt>
   111fc:	mov	r3, r0
   11200:	ldr	r2, [pc, #192]	; 112c8 <__assert_fail@plt+0x324>
   11204:	ldr	r1, [pc, #192]	; 112cc <__assert_fail@plt+0x328>
   11208:	mov	r0, r3
   1120c:	bl	10d34 <printf@plt>
   11210:	mov	r1, #0
   11214:	mov	r0, #5
   11218:	bl	10f38 <setlocale@plt>
   1121c:	str	r0, [fp, #-16]
   11220:	ldr	r3, [fp, #-16]
   11224:	cmp	r3, #0
   11228:	beq	11268 <__assert_fail@plt+0x2c4>
   1122c:	mov	r2, #3
   11230:	ldr	r1, [pc, #152]	; 112d0 <__assert_fail@plt+0x32c>
   11234:	ldr	r0, [fp, #-16]
   11238:	bl	10f8c <strncmp@plt>
   1123c:	mov	r3, r0
   11240:	cmp	r3, #0
   11244:	beq	11268 <__assert_fail@plt+0x2c4>
   11248:	ldr	r0, [pc, #132]	; 112d4 <__assert_fail@plt+0x330>
   1124c:	bl	10e90 <gettext@plt>
   11250:	mov	r2, r0
   11254:	ldr	r3, [pc, #124]	; 112d8 <__assert_fail@plt+0x334>
   11258:	ldr	r3, [r3]
   1125c:	mov	r1, r3
   11260:	mov	r0, r2
   11264:	bl	10d10 <fputs_unlocked@plt>
   11268:	ldr	r0, [pc, #108]	; 112dc <__assert_fail@plt+0x338>
   1126c:	bl	10e90 <gettext@plt>
   11270:	mov	r3, r0
   11274:	ldr	r2, [fp, #-80]	; 0xffffffb0
   11278:	ldr	r1, [pc, #72]	; 112c8 <__assert_fail@plt+0x324>
   1127c:	mov	r0, r3
   11280:	bl	10d34 <printf@plt>
   11284:	ldr	r0, [pc, #84]	; 112e0 <__assert_fail@plt+0x33c>
   11288:	bl	10e90 <gettext@plt>
   1128c:	ldr	r2, [fp, #-8]
   11290:	ldr	r3, [fp, #-80]	; 0xffffffb0
   11294:	cmp	r2, r3
   11298:	bne	112a4 <__assert_fail@plt+0x300>
   1129c:	ldr	r3, [pc, #64]	; 112e4 <__assert_fail@plt+0x340>
   112a0:	b	112a8 <__assert_fail@plt+0x304>
   112a4:	ldr	r3, [pc, #60]	; 112e8 <__assert_fail@plt+0x344>
   112a8:	mov	r2, r3
   112ac:	ldr	r1, [fp, #-8]
   112b0:	bl	10d34 <printf@plt>
   112b4:	nop			; (mov r0, r0)
   112b8:	sub	sp, fp, #4
   112bc:	pop	{fp, pc}
   112c0:	andeq	r8, r1, ip, lsr r5
   112c4:	andeq	r8, r1, r8, asr #7
   112c8:	andeq	r8, r1, r0, ror #7
   112cc:	andeq	r8, r1, r8, lsl #8
   112d0:	andeq	r8, r1, r8, lsl r4
   112d4:	andeq	r8, r1, ip, lsl r4
   112d8:	andeq	sl, r2, ip, asr r1
   112dc:	andeq	r8, r1, r4, ror #8
   112e0:	andeq	r8, r1, r0, lsl #9
   112e4:			; <UNDEFINED> instruction: 0x000184b4
   112e8:	andeq	r8, r1, r0, asr #9
   112ec:	push	{r4, fp, lr}
   112f0:	add	fp, sp, #8
   112f4:	sub	sp, sp, #36	; 0x24
   112f8:	str	r0, [fp, #-32]	; 0xffffffe0
   112fc:	str	r1, [fp, #-36]	; 0xffffffdc
   11300:	sub	r2, fp, #28
   11304:	ldr	r3, [pc, #176]	; 113bc <__assert_fail@plt+0x418>
   11308:	str	r3, [sp]
   1130c:	mov	r3, r2
   11310:	mov	r2, #10
   11314:	mov	r1, #0
   11318:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1131c:	bl	166f0 <__assert_fail@plt+0x574c>
   11320:	str	r0, [fp, #-16]
   11324:	ldr	r3, [fp, #-16]
   11328:	cmp	r3, #0
   1132c:	bne	11350 <__assert_fail@plt+0x3ac>
   11330:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   11334:	mvn	r0, #0
   11338:	mov	r1, #0
   1133c:	cmp	r3, r1
   11340:	cmpeq	r2, r0
   11344:	bls	11350 <__assert_fail@plt+0x3ac>
   11348:	mov	r3, #1
   1134c:	str	r3, [fp, #-16]
   11350:	ldr	r3, [fp, #-16]
   11354:	cmp	r3, #0
   11358:	bne	11380 <__assert_fail@plt+0x3dc>
   1135c:	bl	10ec0 <__errno_location@plt>
   11360:	mov	r2, r0
   11364:	mov	r3, #0
   11368:	str	r3, [r2]
   1136c:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   11370:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11374:	str	r2, [r3]
   11378:	mov	r3, #0
   1137c:	b	113b0 <__assert_fail@plt+0x40c>
   11380:	bl	10ec0 <__errno_location@plt>
   11384:	mov	r4, r0
   11388:	ldr	r3, [fp, #-16]
   1138c:	cmp	r3, #1
   11390:	beq	113a4 <__assert_fail@plt+0x400>
   11394:	bl	10ec0 <__errno_location@plt>
   11398:	mov	r3, r0
   1139c:	ldr	r3, [r3]
   113a0:	b	113a8 <__assert_fail@plt+0x404>
   113a4:	mov	r3, #75	; 0x4b
   113a8:	str	r3, [r4]
   113ac:	mvn	r3, #0
   113b0:	mov	r0, r3
   113b4:	sub	sp, fp, #8
   113b8:	pop	{r4, fp, pc}
   113bc:	strdeq	r8, [r1], -ip
   113c0:	push	{r4, fp, lr}
   113c4:	add	fp, sp, #8
   113c8:	sub	sp, sp, #12
   113cc:	str	r0, [fp, #-16]
   113d0:	ldr	r3, [fp, #-16]
   113d4:	cmp	r3, #0
   113d8:	beq	11408 <__assert_fail@plt+0x464>
   113dc:	ldr	r3, [pc, #344]	; 1153c <__assert_fail@plt+0x598>
   113e0:	ldr	r4, [r3]
   113e4:	ldr	r0, [pc, #340]	; 11540 <__assert_fail@plt+0x59c>
   113e8:	bl	10e90 <gettext@plt>
   113ec:	mov	r1, r0
   113f0:	ldr	r3, [pc, #332]	; 11544 <__assert_fail@plt+0x5a0>
   113f4:	ldr	r3, [r3]
   113f8:	mov	r2, r3
   113fc:	mov	r0, r4
   11400:	bl	10eb4 <fprintf@plt>
   11404:	b	11534 <__assert_fail@plt+0x590>
   11408:	ldr	r0, [pc, #312]	; 11548 <__assert_fail@plt+0x5a4>
   1140c:	bl	10e90 <gettext@plt>
   11410:	mov	r2, r0
   11414:	ldr	r3, [pc, #296]	; 11544 <__assert_fail@plt+0x5a0>
   11418:	ldr	r3, [r3]
   1141c:	mov	r1, r3
   11420:	mov	r0, r2
   11424:	bl	10d34 <printf@plt>
   11428:	ldr	r0, [pc, #284]	; 1154c <__assert_fail@plt+0x5a8>
   1142c:	bl	10e90 <gettext@plt>
   11430:	mov	r2, r0
   11434:	ldr	r3, [pc, #276]	; 11550 <__assert_fail@plt+0x5ac>
   11438:	ldr	r3, [r3]
   1143c:	mov	r1, r3
   11440:	mov	r0, r2
   11444:	bl	10d10 <fputs_unlocked@plt>
   11448:	bl	11114 <__assert_fail@plt+0x170>
   1144c:	ldr	r0, [pc, #256]	; 11554 <__assert_fail@plt+0x5b0>
   11450:	bl	10e90 <gettext@plt>
   11454:	mov	r2, r0
   11458:	ldr	r3, [pc, #240]	; 11550 <__assert_fail@plt+0x5ac>
   1145c:	ldr	r3, [r3]
   11460:	mov	r1, r3
   11464:	mov	r0, r2
   11468:	bl	10d10 <fputs_unlocked@plt>
   1146c:	ldr	r0, [pc, #228]	; 11558 <__assert_fail@plt+0x5b4>
   11470:	bl	10e90 <gettext@plt>
   11474:	mov	r2, r0
   11478:	ldr	r3, [pc, #208]	; 11550 <__assert_fail@plt+0x5ac>
   1147c:	ldr	r3, [r3]
   11480:	mov	r1, r3
   11484:	mov	r0, r2
   11488:	bl	10d10 <fputs_unlocked@plt>
   1148c:	ldr	r0, [pc, #200]	; 1155c <__assert_fail@plt+0x5b8>
   11490:	bl	10e90 <gettext@plt>
   11494:	mov	r2, r0
   11498:	ldr	r3, [pc, #176]	; 11550 <__assert_fail@plt+0x5ac>
   1149c:	ldr	r3, [r3]
   114a0:	mov	r1, r3
   114a4:	mov	r0, r2
   114a8:	bl	10d10 <fputs_unlocked@plt>
   114ac:	ldr	r0, [pc, #172]	; 11560 <__assert_fail@plt+0x5bc>
   114b0:	bl	10e90 <gettext@plt>
   114b4:	mov	r2, r0
   114b8:	ldr	r3, [pc, #144]	; 11550 <__assert_fail@plt+0x5ac>
   114bc:	ldr	r3, [r3]
   114c0:	mov	r1, r3
   114c4:	mov	r0, r2
   114c8:	bl	10d10 <fputs_unlocked@plt>
   114cc:	ldr	r0, [pc, #144]	; 11564 <__assert_fail@plt+0x5c0>
   114d0:	bl	10e90 <gettext@plt>
   114d4:	mov	r2, r0
   114d8:	ldr	r3, [pc, #112]	; 11550 <__assert_fail@plt+0x5ac>
   114dc:	ldr	r3, [r3]
   114e0:	mov	r1, r3
   114e4:	mov	r0, r2
   114e8:	bl	10d10 <fputs_unlocked@plt>
   114ec:	ldr	r0, [pc, #116]	; 11568 <__assert_fail@plt+0x5c4>
   114f0:	bl	10e90 <gettext@plt>
   114f4:	mov	r2, r0
   114f8:	ldr	r3, [pc, #80]	; 11550 <__assert_fail@plt+0x5ac>
   114fc:	ldr	r3, [r3]
   11500:	mov	r1, r3
   11504:	mov	r0, r2
   11508:	bl	10d10 <fputs_unlocked@plt>
   1150c:	ldr	r0, [pc, #88]	; 1156c <__assert_fail@plt+0x5c8>
   11510:	bl	10e90 <gettext@plt>
   11514:	mov	r2, r0
   11518:	ldr	r3, [pc, #48]	; 11550 <__assert_fail@plt+0x5ac>
   1151c:	ldr	r3, [r3]
   11520:	mov	r1, r3
   11524:	mov	r0, r2
   11528:	bl	10d10 <fputs_unlocked@plt>
   1152c:	ldr	r0, [pc, #60]	; 11570 <__assert_fail@plt+0x5cc>
   11530:	bl	1114c <__assert_fail@plt+0x1a8>
   11534:	ldr	r0, [fp, #-16]
   11538:	bl	10e84 <exit@plt>
   1153c:	andeq	sl, r2, r8, asr r1
   11540:	andeq	r8, r1, r8, lsl #12
   11544:	muleq	r2, r8, r1
   11548:	andeq	r8, r1, r0, lsr r6
   1154c:	andeq	r8, r1, r0, asr r6
   11550:	andeq	sl, r2, ip, asr r1
   11554:	muleq	r1, ip, r6
   11558:	andeq	r8, r1, r4, asr r7
   1155c:	andeq	r8, r1, r4, lsl #15
   11560:			; <UNDEFINED> instruction: 0x000187bc
   11564:	andeq	r8, r1, ip, lsr #16
   11568:	andeq	r8, r1, ip, ror #16
   1156c:	andeq	r8, r1, r4, lsr #19
   11570:			; <UNDEFINED> instruction: 0x00018ab0
   11574:	push	{fp, lr}
   11578:	add	fp, sp, #4
   1157c:	sub	sp, sp, #24
   11580:	str	r0, [fp, #-24]	; 0xffffffe8
   11584:	mov	r1, #47	; 0x2f
   11588:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1158c:	bl	10ea8 <strchr@plt>
   11590:	mov	r3, r0
   11594:	cmp	r3, #0
   11598:	beq	115b8 <__assert_fail@plt+0x614>
   1159c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   115a0:	bl	12600 <__assert_fail@plt+0x165c>
   115a4:	mov	r3, r0
   115a8:	mov	r2, r3
   115ac:	ldr	r3, [pc, #260]	; 116b8 <__assert_fail@plt+0x714>
   115b0:	str	r2, [r3]
   115b4:	b	116ac <__assert_fail@plt+0x708>
   115b8:	ldr	r0, [pc, #252]	; 116bc <__assert_fail@plt+0x718>
   115bc:	bl	164d8 <__assert_fail@plt+0x5534>
   115c0:	mov	r3, r0
   115c4:	str	r3, [fp, #-8]
   115c8:	ldr	r3, [fp, #-8]
   115cc:	cmp	r3, #0
   115d0:	beq	115f0 <__assert_fail@plt+0x64c>
   115d4:	ldr	r0, [fp, #-8]
   115d8:	bl	12600 <__assert_fail@plt+0x165c>
   115dc:	mov	r3, r0
   115e0:	mov	r2, r3
   115e4:	ldr	r3, [pc, #204]	; 116b8 <__assert_fail@plt+0x714>
   115e8:	str	r2, [r3]
   115ec:	b	116a4 <__assert_fail@plt+0x700>
   115f0:	ldr	r0, [pc, #200]	; 116c0 <__assert_fail@plt+0x71c>
   115f4:	bl	10e24 <getenv@plt>
   115f8:	str	r0, [fp, #-8]
   115fc:	ldr	r3, [fp, #-8]
   11600:	cmp	r3, #0
   11604:	beq	116a4 <__assert_fail@plt+0x700>
   11608:	ldr	r0, [fp, #-8]
   1160c:	bl	16460 <__assert_fail@plt+0x54bc>
   11610:	mov	r3, r0
   11614:	str	r3, [fp, #-8]
   11618:	ldr	r1, [pc, #164]	; 116c4 <__assert_fail@plt+0x720>
   1161c:	ldr	r0, [fp, #-8]
   11620:	bl	10f2c <strtok@plt>
   11624:	str	r0, [fp, #-12]
   11628:	b	11698 <__assert_fail@plt+0x6f4>
   1162c:	mov	r2, #0
   11630:	ldr	r1, [fp, #-24]	; 0xffffffe8
   11634:	ldr	r0, [fp, #-12]
   11638:	bl	127c4 <__assert_fail@plt+0x1820>
   1163c:	mov	r3, r0
   11640:	str	r3, [fp, #-16]
   11644:	mov	r1, #1
   11648:	ldr	r0, [fp, #-16]
   1164c:	bl	10f08 <access@plt>
   11650:	mov	r3, r0
   11654:	cmp	r3, #0
   11658:	bne	11680 <__assert_fail@plt+0x6dc>
   1165c:	ldr	r0, [fp, #-16]
   11660:	bl	12600 <__assert_fail@plt+0x165c>
   11664:	mov	r3, r0
   11668:	mov	r2, r3
   1166c:	ldr	r3, [pc, #68]	; 116b8 <__assert_fail@plt+0x714>
   11670:	str	r2, [r3]
   11674:	ldr	r0, [fp, #-16]
   11678:	bl	129ac <__assert_fail@plt+0x1a08>
   1167c:	b	116a4 <__assert_fail@plt+0x700>
   11680:	ldr	r0, [fp, #-16]
   11684:	bl	129ac <__assert_fail@plt+0x1a08>
   11688:	ldr	r1, [pc, #52]	; 116c4 <__assert_fail@plt+0x720>
   1168c:	mov	r0, #0
   11690:	bl	10f2c <strtok@plt>
   11694:	str	r0, [fp, #-12]
   11698:	ldr	r3, [fp, #-12]
   1169c:	cmp	r3, #0
   116a0:	bne	1162c <__assert_fail@plt+0x688>
   116a4:	ldr	r0, [fp, #-8]
   116a8:	bl	129ac <__assert_fail@plt+0x1a08>
   116ac:	nop			; (mov r0, r0)
   116b0:	sub	sp, fp, #4
   116b4:	pop	{fp, pc}
   116b8:	andeq	sl, r2, r8, ror #2
   116bc:			; <UNDEFINED> instruction: 0x00018ab8
   116c0:	andeq	r8, r1, r8, asr #21
   116c4:	ldrdeq	r8, [r1], -r0
   116c8:	push	{fp}		; (str fp, [sp, #-4]!)
   116cc:	add	fp, sp, #0
   116d0:	sub	sp, sp, #20
   116d4:	str	r0, [fp, #-16]
   116d8:	mvn	r3, #0
   116dc:	str	r3, [fp, #-8]
   116e0:	ldr	r3, [fp, #-16]
   116e4:	cmp	r3, #105	; 0x69
   116e8:	beq	11708 <__assert_fail@plt+0x764>
   116ec:	cmp	r3, #111	; 0x6f
   116f0:	beq	11714 <__assert_fail@plt+0x770>
   116f4:	cmp	r3, #101	; 0x65
   116f8:	bne	11720 <__assert_fail@plt+0x77c>
   116fc:	mov	r3, #2
   11700:	str	r3, [fp, #-8]
   11704:	b	11720 <__assert_fail@plt+0x77c>
   11708:	mov	r3, #0
   1170c:	str	r3, [fp, #-8]
   11710:	b	11720 <__assert_fail@plt+0x77c>
   11714:	mov	r3, #1
   11718:	str	r3, [fp, #-8]
   1171c:	nop			; (mov r0, r0)
   11720:	ldr	r3, [fp, #-8]
   11724:	mov	r0, r3
   11728:	add	sp, fp, #0
   1172c:	pop	{fp}		; (ldr fp, [sp], #4)
   11730:	bx	lr
   11734:	push	{r4, r5, fp, lr}
   11738:	add	fp, sp, #12
   1173c:	sub	sp, sp, #152	; 0x98
   11740:	ldr	r3, [pc, #444]	; 11904 <__assert_fail@plt+0x960>
   11744:	str	r3, [fp, #-24]	; 0xffffffe8
   11748:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1174c:	bl	10e24 <getenv@plt>
   11750:	str	r0, [fp, #-28]	; 0xffffffe4
   11754:	ldr	r3, [pc, #428]	; 11908 <__assert_fail@plt+0x964>
   11758:	ldr	r3, [r3]
   1175c:	str	r3, [fp, #-44]	; 0xffffffd4
   11760:	ldr	r3, [pc, #420]	; 1190c <__assert_fail@plt+0x968>
   11764:	str	r3, [fp, #-40]	; 0xffffffd8
   11768:	mov	r3, #0
   1176c:	str	r3, [fp, #-36]	; 0xffffffdc
   11770:	sub	r3, fp, #44	; 0x2c
   11774:	str	r3, [fp, #-20]	; 0xffffffec
   11778:	ldr	r3, [fp, #-20]	; 0xffffffec
   1177c:	ldr	r3, [r3]
   11780:	ldrb	r3, [r3]
   11784:	cmp	r3, #0
   11788:	bne	117a0 <__assert_fail@plt+0x7fc>
   1178c:	ldr	r0, [pc, #380]	; 11910 <__assert_fail@plt+0x96c>
   11790:	bl	16460 <__assert_fail@plt+0x54bc>
   11794:	mov	r3, r0
   11798:	str	r3, [fp, #-48]	; 0xffffffd0
   1179c:	b	11840 <__assert_fail@plt+0x89c>
   117a0:	ldr	r3, [fp, #-20]	; 0xffffffec
   117a4:	ldr	r2, [r3]
   117a8:	sub	r0, fp, #48	; 0x30
   117ac:	ldr	r3, [pc, #348]	; 11910 <__assert_fail@plt+0x96c>
   117b0:	ldr	r1, [pc, #348]	; 11914 <__assert_fail@plt+0x970>
   117b4:	bl	10efc <asprintf@plt>
   117b8:	str	r0, [fp, #-16]
   117bc:	ldr	r3, [fp, #-16]
   117c0:	cmp	r3, #0
   117c4:	bge	117cc <__assert_fail@plt+0x828>
   117c8:	bl	1649c <__assert_fail@plt+0x54f8>
   117cc:	ldr	r3, [fp, #-48]	; 0xffffffd0
   117d0:	sub	r2, fp, #156	; 0x9c
   117d4:	mov	r1, r2
   117d8:	mov	r0, r3
   117dc:	bl	18360 <__assert_fail@plt+0x73bc>
   117e0:	mov	r3, r0
   117e4:	cmp	r3, #0
   117e8:	beq	1183c <__assert_fail@plt+0x898>
   117ec:	ldr	r3, [fp, #-48]	; 0xffffffd0
   117f0:	mov	r0, r3
   117f4:	bl	129ac <__assert_fail@plt+0x1a08>
   117f8:	ldr	r3, [fp, #-20]	; 0xffffffec
   117fc:	add	r3, r3, #4
   11800:	str	r3, [fp, #-20]	; 0xffffffec
   11804:	ldr	r3, [fp, #-20]	; 0xffffffec
   11808:	ldr	r3, [r3]
   1180c:	cmp	r3, #0
   11810:	bne	11778 <__assert_fail@plt+0x7d4>
   11814:	ldr	r0, [pc, #252]	; 11918 <__assert_fail@plt+0x974>
   11818:	bl	10e90 <gettext@plt>
   1181c:	mov	r4, r0
   11820:	ldr	r0, [pc, #232]	; 11910 <__assert_fail@plt+0x96c>
   11824:	bl	15168 <__assert_fail@plt+0x41c4>
   11828:	mov	r3, r0
   1182c:	mov	r2, r4
   11830:	mov	r1, #0
   11834:	mov	r0, #125	; 0x7d
   11838:	bl	10e18 <error@plt>
   1183c:	nop			; (mov r0, r0)
   11840:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11844:	cmp	r3, #0
   11848:	beq	11870 <__assert_fail@plt+0x8cc>
   1184c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   11850:	sub	r0, fp, #32
   11854:	str	r3, [sp]
   11858:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1185c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   11860:	ldr	r1, [pc, #180]	; 1191c <__assert_fail@plt+0x978>
   11864:	bl	10efc <asprintf@plt>
   11868:	str	r0, [fp, #-16]
   1186c:	b	11888 <__assert_fail@plt+0x8e4>
   11870:	ldr	r3, [fp, #-48]	; 0xffffffd0
   11874:	sub	r0, fp, #32
   11878:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1187c:	ldr	r1, [pc, #156]	; 11920 <__assert_fail@plt+0x97c>
   11880:	bl	10efc <asprintf@plt>
   11884:	str	r0, [fp, #-16]
   11888:	ldr	r3, [fp, #-16]
   1188c:	cmp	r3, #0
   11890:	bge	11898 <__assert_fail@plt+0x8f4>
   11894:	bl	1649c <__assert_fail@plt+0x54f8>
   11898:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1189c:	mov	r0, r3
   118a0:	bl	129ac <__assert_fail@plt+0x1a08>
   118a4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   118a8:	mov	r0, r3
   118ac:	bl	10f44 <putenv@plt>
   118b0:	str	r0, [fp, #-16]
   118b4:	ldr	r3, [fp, #-16]
   118b8:	cmp	r3, #0
   118bc:	beq	118f8 <__assert_fail@plt+0x954>
   118c0:	bl	10ec0 <__errno_location@plt>
   118c4:	mov	r3, r0
   118c8:	ldr	r4, [r3]
   118cc:	ldr	r0, [pc, #80]	; 11924 <__assert_fail@plt+0x980>
   118d0:	bl	10e90 <gettext@plt>
   118d4:	mov	r5, r0
   118d8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   118dc:	mov	r0, r3
   118e0:	bl	15168 <__assert_fail@plt+0x41c4>
   118e4:	mov	r3, r0
   118e8:	mov	r2, r5
   118ec:	mov	r1, r4
   118f0:	mov	r0, #125	; 0x7d
   118f4:	bl	10e18 <error@plt>
   118f8:	nop			; (mov r0, r0)
   118fc:	sub	sp, fp, #12
   11900:	pop	{r4, r5, fp, pc}
   11904:	ldrdeq	r8, [r1], -r4
   11908:	andeq	sl, r2, r8, ror #2
   1190c:	andeq	r8, r1, r0, ror #21
   11910:	andeq	r8, r1, r0, lsl #22
   11914:	andeq	r8, r1, r0, lsl fp
   11918:	andeq	r8, r1, r8, lsl fp
   1191c:	andeq	r8, r1, ip, lsr #22
   11920:	andeq	r8, r1, r8, lsr fp
   11924:	andeq	r8, r1, r0, asr #22
   11928:	push	{r4, r5, fp, lr}
   1192c:	add	fp, sp, #12
   11930:	sub	sp, sp, #24
   11934:	mov	r3, #0
   11938:	strb	r3, [fp, #-13]
   1193c:	mov	r3, #0
   11940:	str	r3, [fp, #-20]	; 0xffffffec
   11944:	b	11ad4 <__assert_fail@plt+0xb30>
   11948:	ldr	r1, [pc, #416]	; 11af0 <__assert_fail@plt+0xb4c>
   1194c:	ldr	r2, [fp, #-20]	; 0xffffffec
   11950:	mov	r3, r2
   11954:	lsl	r3, r3, #1
   11958:	add	r3, r3, r2
   1195c:	lsl	r3, r3, #2
   11960:	add	r3, r1, r3
   11964:	add	r3, r3, #8
   11968:	ldr	r3, [r3]
   1196c:	cmp	r3, #0
   11970:	beq	11ac8 <__assert_fail@plt+0xb24>
   11974:	ldr	r1, [pc, #372]	; 11af0 <__assert_fail@plt+0xb4c>
   11978:	ldr	r2, [fp, #-20]	; 0xffffffec
   1197c:	mov	r3, r2
   11980:	lsl	r3, r3, #1
   11984:	add	r3, r3, r2
   11988:	lsl	r3, r3, #2
   1198c:	add	r3, r1, r3
   11990:	add	r3, r3, #8
   11994:	ldr	r3, [r3]
   11998:	ldrb	r3, [r3]
   1199c:	cmp	r3, #76	; 0x4c
   119a0:	bne	119ec <__assert_fail@plt+0xa48>
   119a4:	ldr	r1, [pc, #324]	; 11af0 <__assert_fail@plt+0xb4c>
   119a8:	ldr	r2, [fp, #-20]	; 0xffffffec
   119ac:	mov	r3, r2
   119b0:	lsl	r3, r3, #1
   119b4:	add	r3, r3, r2
   119b8:	lsl	r3, r3, #2
   119bc:	add	r3, r1, r3
   119c0:	add	r3, r3, #4
   119c4:	ldr	r3, [r3]
   119c8:	mov	r0, r3
   119cc:	bl	10f50 <toupper@plt>
   119d0:	mov	r3, r0
   119d4:	sub	r0, fp, #28
   119d8:	ldr	r2, [pc, #276]	; 11af4 <__assert_fail@plt+0xb50>
   119dc:	ldr	r1, [pc, #276]	; 11af8 <__assert_fail@plt+0xb54>
   119e0:	bl	10efc <asprintf@plt>
   119e4:	str	r0, [fp, #-24]	; 0xffffffe8
   119e8:	b	11a60 <__assert_fail@plt+0xabc>
   119ec:	ldr	r1, [pc, #252]	; 11af0 <__assert_fail@plt+0xb4c>
   119f0:	ldr	r2, [fp, #-20]	; 0xffffffec
   119f4:	mov	r3, r2
   119f8:	lsl	r3, r3, #1
   119fc:	add	r3, r3, r2
   11a00:	lsl	r3, r3, #2
   11a04:	add	r3, r1, r3
   11a08:	add	r3, r3, #4
   11a0c:	ldr	r3, [r3]
   11a10:	mov	r0, r3
   11a14:	bl	10f50 <toupper@plt>
   11a18:	mov	ip, r0
   11a1c:	ldr	r1, [pc, #204]	; 11af0 <__assert_fail@plt+0xb4c>
   11a20:	ldr	r2, [fp, #-20]	; 0xffffffec
   11a24:	mov	r3, r2
   11a28:	lsl	r3, r3, #1
   11a2c:	add	r3, r3, r2
   11a30:	lsl	r3, r3, #2
   11a34:	add	r3, r1, r3
   11a38:	ldr	r3, [r3]
   11a3c:	mov	r2, r3
   11a40:	mov	r3, #0
   11a44:	sub	r0, fp, #28
   11a48:	strd	r2, [sp]
   11a4c:	mov	r3, ip
   11a50:	ldr	r2, [pc, #156]	; 11af4 <__assert_fail@plt+0xb50>
   11a54:	ldr	r1, [pc, #160]	; 11afc <__assert_fail@plt+0xb58>
   11a58:	bl	10efc <asprintf@plt>
   11a5c:	str	r0, [fp, #-24]	; 0xffffffe8
   11a60:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11a64:	cmp	r3, #0
   11a68:	bge	11a70 <__assert_fail@plt+0xacc>
   11a6c:	bl	1649c <__assert_fail@plt+0x54f8>
   11a70:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11a74:	mov	r0, r3
   11a78:	bl	10f44 <putenv@plt>
   11a7c:	mov	r3, r0
   11a80:	cmp	r3, #0
   11a84:	beq	11ac0 <__assert_fail@plt+0xb1c>
   11a88:	bl	10ec0 <__errno_location@plt>
   11a8c:	mov	r3, r0
   11a90:	ldr	r4, [r3]
   11a94:	ldr	r0, [pc, #100]	; 11b00 <__assert_fail@plt+0xb5c>
   11a98:	bl	10e90 <gettext@plt>
   11a9c:	mov	r5, r0
   11aa0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11aa4:	mov	r0, r3
   11aa8:	bl	15168 <__assert_fail@plt+0x41c4>
   11aac:	mov	r3, r0
   11ab0:	mov	r2, r5
   11ab4:	mov	r1, r4
   11ab8:	mov	r0, #125	; 0x7d
   11abc:	bl	10e18 <error@plt>
   11ac0:	mov	r3, #1
   11ac4:	strb	r3, [fp, #-13]
   11ac8:	ldr	r3, [fp, #-20]	; 0xffffffec
   11acc:	add	r3, r3, #1
   11ad0:	str	r3, [fp, #-20]	; 0xffffffec
   11ad4:	ldr	r3, [fp, #-20]	; 0xffffffec
   11ad8:	cmp	r3, #2
   11adc:	bls	11948 <__assert_fail@plt+0x9a4>
   11ae0:	ldrb	r3, [fp, #-13]
   11ae4:	mov	r0, r3
   11ae8:	sub	sp, fp, #12
   11aec:	pop	{r4, r5, fp, pc}
   11af0:	andeq	sl, r2, ip, ror #2
   11af4:	andeq	r8, r1, ip, ror #22
   11af8:	andeq	r8, r1, r8, ror fp
   11afc:	andeq	r8, r1, r0, lsl #23
   11b00:	andeq	r8, r1, r0, asr #22
   11b04:	push	{r4, r5, fp, lr}
   11b08:	add	fp, sp, #12
   11b0c:	sub	sp, sp, #32
   11b10:	str	r0, [fp, #-32]	; 0xffffffe0
   11b14:	str	r1, [fp, #-36]	; 0xffffffdc
   11b18:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11b1c:	ldr	r3, [r3]
   11b20:	mov	r0, r3
   11b24:	bl	12a38 <__assert_fail@plt+0x1a94>
   11b28:	ldr	r1, [pc, #988]	; 11f0c <__assert_fail@plt+0xf68>
   11b2c:	mov	r0, #6
   11b30:	bl	10f38 <setlocale@plt>
   11b34:	ldr	r1, [pc, #980]	; 11f10 <__assert_fail@plt+0xf6c>
   11b38:	ldr	r0, [pc, #980]	; 11f14 <__assert_fail@plt+0xf70>
   11b3c:	bl	10f74 <bindtextdomain@plt>
   11b40:	ldr	r0, [pc, #972]	; 11f14 <__assert_fail@plt+0xf70>
   11b44:	bl	10dac <textdomain@plt>
   11b48:	mov	r0, #125	; 0x7d
   11b4c:	bl	110d8 <__assert_fail@plt+0x134>
   11b50:	ldr	r0, [pc, #960]	; 11f18 <__assert_fail@plt+0xf74>
   11b54:	bl	18348 <__assert_fail@plt+0x73a4>
   11b58:	b	11d78 <__assert_fail@plt+0xdd4>
   11b5c:	ldr	r3, [fp, #-16]
   11b60:	cmp	r3, #101	; 0x65
   11b64:	beq	11b94 <__assert_fail@plt+0xbf0>
   11b68:	cmp	r3, #101	; 0x65
   11b6c:	bgt	11b84 <__assert_fail@plt+0xbe0>
   11b70:	cmn	r3, #3
   11b74:	beq	11d38 <__assert_fail@plt+0xd94>
   11b78:	cmn	r3, #2
   11b7c:	beq	11d30 <__assert_fail@plt+0xd8c>
   11b80:	b	11d70 <__assert_fail@plt+0xdcc>
   11b84:	cmp	r3, #105	; 0x69
   11b88:	beq	11b94 <__assert_fail@plt+0xbf0>
   11b8c:	cmp	r3, #111	; 0x6f
   11b90:	bne	11d70 <__assert_fail@plt+0xdcc>
   11b94:	ldr	r0, [fp, #-16]
   11b98:	bl	116c8 <__assert_fail@plt+0x724>
   11b9c:	str	r0, [fp, #-20]	; 0xffffffec
   11ba0:	ldr	r3, [fp, #-20]	; 0xffffffec
   11ba4:	cmp	r3, #0
   11ba8:	blt	11bb8 <__assert_fail@plt+0xc14>
   11bac:	ldr	r3, [fp, #-20]	; 0xffffffec
   11bb0:	cmp	r3, #2
   11bb4:	bls	11bcc <__assert_fail@plt+0xc28>
   11bb8:	ldr	r3, [pc, #860]	; 11f1c <__assert_fail@plt+0xf78>
   11bbc:	mov	r2, #336	; 0x150
   11bc0:	ldr	r1, [pc, #856]	; 11f20 <__assert_fail@plt+0xf7c>
   11bc4:	ldr	r0, [pc, #856]	; 11f24 <__assert_fail@plt+0xf80>
   11bc8:	bl	10fa4 <__assert_fail@plt>
   11bcc:	ldr	r1, [pc, #852]	; 11f28 <__assert_fail@plt+0xf84>
   11bd0:	ldr	r2, [fp, #-20]	; 0xffffffec
   11bd4:	mov	r3, r2
   11bd8:	lsl	r3, r3, #1
   11bdc:	add	r3, r3, r2
   11be0:	lsl	r3, r3, #2
   11be4:	add	r3, r1, r3
   11be8:	add	r3, r3, #4
   11bec:	ldr	r2, [fp, #-16]
   11bf0:	str	r2, [r3]
   11bf4:	b	11c0c <__assert_fail@plt+0xc68>
   11bf8:	ldr	r3, [pc, #812]	; 11f2c <__assert_fail@plt+0xf88>
   11bfc:	ldr	r3, [r3]
   11c00:	add	r3, r3, #1
   11c04:	ldr	r2, [pc, #800]	; 11f2c <__assert_fail@plt+0xf88>
   11c08:	str	r3, [r2]
   11c0c:	ldr	r3, [pc, #792]	; 11f2c <__assert_fail@plt+0xf88>
   11c10:	ldr	r3, [r3]
   11c14:	ldrb	r3, [r3]
   11c18:	mov	r0, r3
   11c1c:	bl	12248 <__assert_fail@plt+0x12a4>
   11c20:	mov	r3, r0
   11c24:	cmp	r3, #0
   11c28:	bne	11bf8 <__assert_fail@plt+0xc54>
   11c2c:	ldr	r3, [pc, #760]	; 11f2c <__assert_fail@plt+0xf88>
   11c30:	ldr	r1, [r3]
   11c34:	ldr	r0, [pc, #748]	; 11f28 <__assert_fail@plt+0xf84>
   11c38:	ldr	r2, [fp, #-20]	; 0xffffffec
   11c3c:	mov	r3, r2
   11c40:	lsl	r3, r3, #1
   11c44:	add	r3, r3, r2
   11c48:	lsl	r3, r3, #2
   11c4c:	add	r3, r0, r3
   11c50:	add	r3, r3, #8
   11c54:	str	r1, [r3]
   11c58:	ldr	r3, [fp, #-16]
   11c5c:	cmp	r3, #105	; 0x69
   11c60:	bne	11c9c <__assert_fail@plt+0xcf8>
   11c64:	ldr	r3, [pc, #704]	; 11f2c <__assert_fail@plt+0xf88>
   11c68:	ldr	r3, [r3]
   11c6c:	ldrb	r3, [r3]
   11c70:	cmp	r3, #76	; 0x4c
   11c74:	bne	11c9c <__assert_fail@plt+0xcf8>
   11c78:	ldr	r0, [pc, #688]	; 11f30 <__assert_fail@plt+0xf8c>
   11c7c:	bl	10e90 <gettext@plt>
   11c80:	mov	r3, r0
   11c84:	mov	r2, r3
   11c88:	mov	r1, #0
   11c8c:	mov	r0, #0
   11c90:	bl	10e18 <error@plt>
   11c94:	mov	r0, #125	; 0x7d
   11c98:	bl	113c0 <__assert_fail@plt+0x41c>
   11c9c:	ldr	r3, [pc, #648]	; 11f2c <__assert_fail@plt+0xf88>
   11ca0:	ldr	r3, [r3]
   11ca4:	ldr	r1, [pc, #648]	; 11f34 <__assert_fail@plt+0xf90>
   11ca8:	mov	r0, r3
   11cac:	bl	10d28 <strcmp@plt>
   11cb0:	mov	r3, r0
   11cb4:	cmp	r3, #0
   11cb8:	beq	11d78 <__assert_fail@plt+0xdd4>
   11cbc:	ldr	r3, [pc, #616]	; 11f2c <__assert_fail@plt+0xf88>
   11cc0:	ldr	r0, [r3]
   11cc4:	ldr	r2, [fp, #-20]	; 0xffffffec
   11cc8:	mov	r3, r2
   11ccc:	lsl	r3, r3, #1
   11cd0:	add	r3, r3, r2
   11cd4:	lsl	r3, r3, #2
   11cd8:	ldr	r2, [pc, #584]	; 11f28 <__assert_fail@plt+0xf84>
   11cdc:	add	r3, r3, r2
   11ce0:	mov	r1, r3
   11ce4:	bl	112ec <__assert_fail@plt+0x348>
   11ce8:	mov	r3, r0
   11cec:	cmn	r3, #1
   11cf0:	bne	11d78 <__assert_fail@plt+0xdd4>
   11cf4:	bl	10ec0 <__errno_location@plt>
   11cf8:	mov	r3, r0
   11cfc:	ldr	r4, [r3]
   11d00:	ldr	r0, [pc, #560]	; 11f38 <__assert_fail@plt+0xf94>
   11d04:	bl	10e90 <gettext@plt>
   11d08:	mov	r5, r0
   11d0c:	ldr	r3, [pc, #536]	; 11f2c <__assert_fail@plt+0xf88>
   11d10:	ldr	r3, [r3]
   11d14:	mov	r0, r3
   11d18:	bl	15168 <__assert_fail@plt+0x41c4>
   11d1c:	mov	r3, r0
   11d20:	mov	r2, r5
   11d24:	mov	r1, r4
   11d28:	mov	r0, #125	; 0x7d
   11d2c:	bl	10e18 <error@plt>
   11d30:	mov	r0, #0
   11d34:	bl	113c0 <__assert_fail@plt+0x41c>
   11d38:	ldr	r3, [pc, #508]	; 11f3c <__assert_fail@plt+0xf98>
   11d3c:	ldr	r0, [r3]
   11d40:	ldr	r3, [pc, #504]	; 11f40 <__assert_fail@plt+0xf9c>
   11d44:	ldr	r2, [r3]
   11d48:	mov	r3, #0
   11d4c:	str	r3, [sp, #4]
   11d50:	ldr	r3, [pc, #492]	; 11f44 <__assert_fail@plt+0xfa0>
   11d54:	str	r3, [sp]
   11d58:	mov	r3, r2
   11d5c:	ldr	r2, [pc, #484]	; 11f48 <__assert_fail@plt+0xfa4>
   11d60:	ldr	r1, [pc, #484]	; 11f4c <__assert_fail@plt+0xfa8>
   11d64:	bl	15834 <__assert_fail@plt+0x4890>
   11d68:	mov	r0, #0
   11d6c:	bl	10e84 <exit@plt>
   11d70:	mov	r0, #125	; 0x7d
   11d74:	bl	113c0 <__assert_fail@plt+0x41c>
   11d78:	mov	r3, #0
   11d7c:	str	r3, [sp]
   11d80:	ldr	r3, [pc, #456]	; 11f50 <__assert_fail@plt+0xfac>
   11d84:	ldr	r2, [pc, #456]	; 11f54 <__assert_fail@plt+0xfb0>
   11d88:	ldr	r1, [fp, #-36]	; 0xffffffdc
   11d8c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   11d90:	bl	10e6c <getopt_long@plt>
   11d94:	str	r0, [fp, #-16]
   11d98:	ldr	r3, [fp, #-16]
   11d9c:	cmn	r3, #1
   11da0:	bne	11b5c <__assert_fail@plt+0xbb8>
   11da4:	ldr	r3, [pc, #428]	; 11f58 <__assert_fail@plt+0xfb4>
   11da8:	ldr	r3, [r3]
   11dac:	lsl	r3, r3, #2
   11db0:	ldr	r2, [fp, #-36]	; 0xffffffdc
   11db4:	add	r3, r2, r3
   11db8:	str	r3, [fp, #-36]	; 0xffffffdc
   11dbc:	ldr	r3, [pc, #404]	; 11f58 <__assert_fail@plt+0xfb4>
   11dc0:	ldr	r3, [r3]
   11dc4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   11dc8:	sub	r3, r2, r3
   11dcc:	str	r3, [fp, #-32]	; 0xffffffe0
   11dd0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11dd4:	cmp	r3, #0
   11dd8:	bgt	11e00 <__assert_fail@plt+0xe5c>
   11ddc:	ldr	r0, [pc, #376]	; 11f5c <__assert_fail@plt+0xfb8>
   11de0:	bl	10e90 <gettext@plt>
   11de4:	mov	r3, r0
   11de8:	mov	r2, r3
   11dec:	mov	r1, #0
   11df0:	mov	r0, #0
   11df4:	bl	10e18 <error@plt>
   11df8:	mov	r0, #125	; 0x7d
   11dfc:	bl	113c0 <__assert_fail@plt+0x41c>
   11e00:	bl	11928 <__assert_fail@plt+0x984>
   11e04:	mov	r3, r0
   11e08:	eor	r3, r3, #1
   11e0c:	uxtb	r3, r3
   11e10:	cmp	r3, #0
   11e14:	beq	11e3c <__assert_fail@plt+0xe98>
   11e18:	ldr	r0, [pc, #320]	; 11f60 <__assert_fail@plt+0xfbc>
   11e1c:	bl	10e90 <gettext@plt>
   11e20:	mov	r3, r0
   11e24:	mov	r2, r3
   11e28:	mov	r1, #0
   11e2c:	mov	r0, #0
   11e30:	bl	10e18 <error@plt>
   11e34:	mov	r0, #125	; 0x7d
   11e38:	bl	113c0 <__assert_fail@plt+0x41c>
   11e3c:	ldr	r3, [pc, #288]	; 11f64 <__assert_fail@plt+0xfc0>
   11e40:	ldr	r3, [r3]
   11e44:	mov	r0, r3
   11e48:	bl	11574 <__assert_fail@plt+0x5d0>
   11e4c:	ldr	r3, [pc, #276]	; 11f68 <__assert_fail@plt+0xfc4>
   11e50:	ldr	r3, [r3]
   11e54:	cmp	r3, #0
   11e58:	bne	11e74 <__assert_fail@plt+0xed0>
   11e5c:	ldr	r0, [pc, #264]	; 11f6c <__assert_fail@plt+0xfc8>
   11e60:	bl	16460 <__assert_fail@plt+0x54bc>
   11e64:	mov	r3, r0
   11e68:	mov	r2, r3
   11e6c:	ldr	r3, [pc, #244]	; 11f68 <__assert_fail@plt+0xfc4>
   11e70:	str	r2, [r3]
   11e74:	bl	11734 <__assert_fail@plt+0x790>
   11e78:	ldr	r3, [pc, #232]	; 11f68 <__assert_fail@plt+0xfc4>
   11e7c:	ldr	r3, [r3]
   11e80:	mov	r0, r3
   11e84:	bl	129ac <__assert_fail@plt+0x1a08>
   11e88:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11e8c:	ldr	r3, [r3]
   11e90:	ldr	r1, [fp, #-36]	; 0xffffffdc
   11e94:	mov	r0, r3
   11e98:	bl	10d70 <execvp@plt>
   11e9c:	bl	10ec0 <__errno_location@plt>
   11ea0:	mov	r3, r0
   11ea4:	ldr	r3, [r3]
   11ea8:	cmp	r3, #2
   11eac:	bne	11eb8 <__assert_fail@plt+0xf14>
   11eb0:	mov	r3, #127	; 0x7f
   11eb4:	b	11ebc <__assert_fail@plt+0xf18>
   11eb8:	mov	r3, #126	; 0x7e
   11ebc:	str	r3, [fp, #-24]	; 0xffffffe8
   11ec0:	bl	10ec0 <__errno_location@plt>
   11ec4:	mov	r3, r0
   11ec8:	ldr	r4, [r3]
   11ecc:	ldr	r0, [pc, #156]	; 11f70 <__assert_fail@plt+0xfcc>
   11ed0:	bl	10e90 <gettext@plt>
   11ed4:	mov	r5, r0
   11ed8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11edc:	ldr	r3, [r3]
   11ee0:	mov	r0, r3
   11ee4:	bl	15168 <__assert_fail@plt+0x41c4>
   11ee8:	mov	r3, r0
   11eec:	mov	r2, r5
   11ef0:	mov	r1, r4
   11ef4:	mov	r0, #0
   11ef8:	bl	10e18 <error@plt>
   11efc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11f00:	mov	r0, r3
   11f04:	sub	sp, fp, #12
   11f08:	pop	{r4, r5, fp, pc}
   11f0c:	andeq	r8, r1, r0, asr #9
   11f10:	andeq	r8, r1, ip, lsl #23
   11f14:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   11f18:	andeq	r2, r1, ip, asr #9
   11f1c:			; <UNDEFINED> instruction: 0x00018cb4
   11f20:	andeq	r8, r1, r4, lsr #23
   11f24:			; <UNDEFINED> instruction: 0x00018bb4
   11f28:	andeq	sl, r2, ip, ror #2
   11f2c:	andeq	sl, r2, r0, ror #2
   11f30:	strdeq	r8, [r1], -r0
   11f34:	andeq	r8, r1, r4, lsl ip
   11f38:	andeq	r8, r1, r8, lsl ip
   11f3c:	andeq	sl, r2, ip, asr r1
   11f40:	strdeq	sl, [r2], -ip
   11f44:	andeq	r8, r1, r8, lsr #24
   11f48:	andeq	r8, r1, r8, lsl #8
   11f4c:			; <UNDEFINED> instruction: 0x00018ab0
   11f50:	muleq	r1, ip, r5
   11f54:	andeq	r8, r1, r8, lsr ip
   11f58:	andeq	sl, r2, r0, asr r1
   11f5c:	andeq	r8, r1, r0, asr #24
   11f60:	andeq	r8, r1, r0, asr ip
   11f64:	muleq	r2, r8, r1
   11f68:	andeq	sl, r2, r8, ror #2
   11f6c:	andeq	r8, r1, ip, ror ip
   11f70:	muleq	r1, r8, ip
   11f74:	push	{fp}		; (str fp, [sp, #-4]!)
   11f78:	add	fp, sp, #0
   11f7c:	sub	sp, sp, #12
   11f80:	str	r0, [fp, #-8]
   11f84:	ldr	r3, [fp, #-8]
   11f88:	cmp	r3, #90	; 0x5a
   11f8c:	bgt	11fa8 <__assert_fail@plt+0x1004>
   11f90:	cmp	r3, #65	; 0x41
   11f94:	bge	11fb4 <__assert_fail@plt+0x1010>
   11f98:	sub	r3, r3, #48	; 0x30
   11f9c:	cmp	r3, #9
   11fa0:	bhi	11fbc <__assert_fail@plt+0x1018>
   11fa4:	b	11fb4 <__assert_fail@plt+0x1010>
   11fa8:	sub	r3, r3, #97	; 0x61
   11fac:	cmp	r3, #25
   11fb0:	bhi	11fbc <__assert_fail@plt+0x1018>
   11fb4:	mov	r3, #1
   11fb8:	b	11fc0 <__assert_fail@plt+0x101c>
   11fbc:	mov	r3, #0
   11fc0:	mov	r0, r3
   11fc4:	add	sp, fp, #0
   11fc8:	pop	{fp}		; (ldr fp, [sp], #4)
   11fcc:	bx	lr
   11fd0:	push	{fp}		; (str fp, [sp, #-4]!)
   11fd4:	add	fp, sp, #0
   11fd8:	sub	sp, sp, #12
   11fdc:	str	r0, [fp, #-8]
   11fe0:	ldr	r3, [fp, #-8]
   11fe4:	cmp	r3, #65	; 0x41
   11fe8:	blt	12008 <__assert_fail@plt+0x1064>
   11fec:	cmp	r3, #90	; 0x5a
   11ff0:	ble	12000 <__assert_fail@plt+0x105c>
   11ff4:	sub	r3, r3, #97	; 0x61
   11ff8:	cmp	r3, #25
   11ffc:	bhi	12008 <__assert_fail@plt+0x1064>
   12000:	mov	r3, #1
   12004:	b	1200c <__assert_fail@plt+0x1068>
   12008:	mov	r3, #0
   1200c:	mov	r0, r3
   12010:	add	sp, fp, #0
   12014:	pop	{fp}		; (ldr fp, [sp], #4)
   12018:	bx	lr
   1201c:	push	{fp}		; (str fp, [sp, #-4]!)
   12020:	add	fp, sp, #0
   12024:	sub	sp, sp, #12
   12028:	str	r0, [fp, #-8]
   1202c:	ldr	r3, [fp, #-8]
   12030:	add	r3, r3, #0
   12034:	cmp	r3, #127	; 0x7f
   12038:	bhi	12044 <__assert_fail@plt+0x10a0>
   1203c:	mov	r3, #1
   12040:	b	12048 <__assert_fail@plt+0x10a4>
   12044:	mov	r3, #0
   12048:	mov	r0, r3
   1204c:	add	sp, fp, #0
   12050:	pop	{fp}		; (ldr fp, [sp], #4)
   12054:	bx	lr
   12058:	push	{fp}		; (str fp, [sp, #-4]!)
   1205c:	add	fp, sp, #0
   12060:	sub	sp, sp, #12
   12064:	str	r0, [fp, #-8]
   12068:	ldr	r3, [fp, #-8]
   1206c:	cmp	r3, #32
   12070:	beq	12080 <__assert_fail@plt+0x10dc>
   12074:	ldr	r3, [fp, #-8]
   12078:	cmp	r3, #9
   1207c:	bne	12088 <__assert_fail@plt+0x10e4>
   12080:	mov	r3, #1
   12084:	b	1208c <__assert_fail@plt+0x10e8>
   12088:	mov	r3, #0
   1208c:	and	r3, r3, #1
   12090:	uxtb	r3, r3
   12094:	mov	r0, r3
   12098:	add	sp, fp, #0
   1209c:	pop	{fp}		; (ldr fp, [sp], #4)
   120a0:	bx	lr
   120a4:	push	{fp}		; (str fp, [sp, #-4]!)
   120a8:	add	fp, sp, #0
   120ac:	sub	sp, sp, #12
   120b0:	str	r0, [fp, #-8]
   120b4:	ldr	r3, [fp, #-8]
   120b8:	cmp	r3, #0
   120bc:	blt	120d8 <__assert_fail@plt+0x1134>
   120c0:	cmp	r3, #31
   120c4:	ble	120d0 <__assert_fail@plt+0x112c>
   120c8:	cmp	r3, #127	; 0x7f
   120cc:	bne	120d8 <__assert_fail@plt+0x1134>
   120d0:	mov	r3, #1
   120d4:	b	120dc <__assert_fail@plt+0x1138>
   120d8:	mov	r3, #0
   120dc:	mov	r0, r3
   120e0:	add	sp, fp, #0
   120e4:	pop	{fp}		; (ldr fp, [sp], #4)
   120e8:	bx	lr
   120ec:	push	{fp}		; (str fp, [sp, #-4]!)
   120f0:	add	fp, sp, #0
   120f4:	sub	sp, sp, #12
   120f8:	str	r0, [fp, #-8]
   120fc:	ldr	r3, [fp, #-8]
   12100:	sub	r3, r3, #48	; 0x30
   12104:	cmp	r3, #9
   12108:	bhi	12114 <__assert_fail@plt+0x1170>
   1210c:	mov	r3, #1
   12110:	b	12118 <__assert_fail@plt+0x1174>
   12114:	mov	r3, #0
   12118:	mov	r0, r3
   1211c:	add	sp, fp, #0
   12120:	pop	{fp}		; (ldr fp, [sp], #4)
   12124:	bx	lr
   12128:	push	{fp}		; (str fp, [sp, #-4]!)
   1212c:	add	fp, sp, #0
   12130:	sub	sp, sp, #12
   12134:	str	r0, [fp, #-8]
   12138:	ldr	r3, [fp, #-8]
   1213c:	sub	r3, r3, #33	; 0x21
   12140:	cmp	r3, #93	; 0x5d
   12144:	bhi	12150 <__assert_fail@plt+0x11ac>
   12148:	mov	r3, #1
   1214c:	b	12154 <__assert_fail@plt+0x11b0>
   12150:	mov	r3, #0
   12154:	mov	r0, r3
   12158:	add	sp, fp, #0
   1215c:	pop	{fp}		; (ldr fp, [sp], #4)
   12160:	bx	lr
   12164:	push	{fp}		; (str fp, [sp, #-4]!)
   12168:	add	fp, sp, #0
   1216c:	sub	sp, sp, #12
   12170:	str	r0, [fp, #-8]
   12174:	ldr	r3, [fp, #-8]
   12178:	sub	r3, r3, #97	; 0x61
   1217c:	cmp	r3, #25
   12180:	bhi	1218c <__assert_fail@plt+0x11e8>
   12184:	mov	r3, #1
   12188:	b	12190 <__assert_fail@plt+0x11ec>
   1218c:	mov	r3, #0
   12190:	mov	r0, r3
   12194:	add	sp, fp, #0
   12198:	pop	{fp}		; (ldr fp, [sp], #4)
   1219c:	bx	lr
   121a0:	push	{fp}		; (str fp, [sp, #-4]!)
   121a4:	add	fp, sp, #0
   121a8:	sub	sp, sp, #12
   121ac:	str	r0, [fp, #-8]
   121b0:	ldr	r3, [fp, #-8]
   121b4:	sub	r3, r3, #32
   121b8:	cmp	r3, #94	; 0x5e
   121bc:	bhi	121c8 <__assert_fail@plt+0x1224>
   121c0:	mov	r3, #1
   121c4:	b	121cc <__assert_fail@plt+0x1228>
   121c8:	mov	r3, #0
   121cc:	mov	r0, r3
   121d0:	add	sp, fp, #0
   121d4:	pop	{fp}		; (ldr fp, [sp], #4)
   121d8:	bx	lr
   121dc:	push	{fp}		; (str fp, [sp, #-4]!)
   121e0:	add	fp, sp, #0
   121e4:	sub	sp, sp, #12
   121e8:	str	r0, [fp, #-8]
   121ec:	ldr	r3, [fp, #-8]
   121f0:	cmp	r3, #64	; 0x40
   121f4:	bgt	12210 <__assert_fail@plt+0x126c>
   121f8:	cmp	r3, #58	; 0x3a
   121fc:	bge	1222c <__assert_fail@plt+0x1288>
   12200:	sub	r3, r3, #33	; 0x21
   12204:	cmp	r3, #14
   12208:	bhi	12234 <__assert_fail@plt+0x1290>
   1220c:	b	1222c <__assert_fail@plt+0x1288>
   12210:	cmp	r3, #91	; 0x5b
   12214:	blt	12234 <__assert_fail@plt+0x1290>
   12218:	cmp	r3, #96	; 0x60
   1221c:	ble	1222c <__assert_fail@plt+0x1288>
   12220:	sub	r3, r3, #123	; 0x7b
   12224:	cmp	r3, #3
   12228:	bhi	12234 <__assert_fail@plt+0x1290>
   1222c:	mov	r3, #1
   12230:	b	12238 <__assert_fail@plt+0x1294>
   12234:	mov	r3, #0
   12238:	mov	r0, r3
   1223c:	add	sp, fp, #0
   12240:	pop	{fp}		; (ldr fp, [sp], #4)
   12244:	bx	lr
   12248:	push	{fp}		; (str fp, [sp, #-4]!)
   1224c:	add	fp, sp, #0
   12250:	sub	sp, sp, #12
   12254:	str	r0, [fp, #-8]
   12258:	ldr	r3, [fp, #-8]
   1225c:	cmp	r3, #9
   12260:	blt	1227c <__assert_fail@plt+0x12d8>
   12264:	cmp	r3, #13
   12268:	ble	12274 <__assert_fail@plt+0x12d0>
   1226c:	cmp	r3, #32
   12270:	bne	1227c <__assert_fail@plt+0x12d8>
   12274:	mov	r3, #1
   12278:	b	12280 <__assert_fail@plt+0x12dc>
   1227c:	mov	r3, #0
   12280:	mov	r0, r3
   12284:	add	sp, fp, #0
   12288:	pop	{fp}		; (ldr fp, [sp], #4)
   1228c:	bx	lr
   12290:	push	{fp}		; (str fp, [sp, #-4]!)
   12294:	add	fp, sp, #0
   12298:	sub	sp, sp, #12
   1229c:	str	r0, [fp, #-8]
   122a0:	ldr	r3, [fp, #-8]
   122a4:	sub	r3, r3, #65	; 0x41
   122a8:	cmp	r3, #25
   122ac:	bhi	122b8 <__assert_fail@plt+0x1314>
   122b0:	mov	r3, #1
   122b4:	b	122bc <__assert_fail@plt+0x1318>
   122b8:	mov	r3, #0
   122bc:	mov	r0, r3
   122c0:	add	sp, fp, #0
   122c4:	pop	{fp}		; (ldr fp, [sp], #4)
   122c8:	bx	lr
   122cc:	push	{fp}		; (str fp, [sp, #-4]!)
   122d0:	add	fp, sp, #0
   122d4:	sub	sp, sp, #12
   122d8:	str	r0, [fp, #-8]
   122dc:	ldr	r3, [fp, #-8]
   122e0:	sub	r3, r3, #48	; 0x30
   122e4:	cmp	r3, #54	; 0x36
   122e8:	addls	pc, pc, r3, lsl #2
   122ec:	b	123d4 <__assert_fail@plt+0x1430>
   122f0:	b	123cc <__assert_fail@plt+0x1428>
   122f4:	b	123cc <__assert_fail@plt+0x1428>
   122f8:	b	123cc <__assert_fail@plt+0x1428>
   122fc:	b	123cc <__assert_fail@plt+0x1428>
   12300:	b	123cc <__assert_fail@plt+0x1428>
   12304:	b	123cc <__assert_fail@plt+0x1428>
   12308:	b	123cc <__assert_fail@plt+0x1428>
   1230c:	b	123cc <__assert_fail@plt+0x1428>
   12310:	b	123cc <__assert_fail@plt+0x1428>
   12314:	b	123cc <__assert_fail@plt+0x1428>
   12318:	b	123d4 <__assert_fail@plt+0x1430>
   1231c:	b	123d4 <__assert_fail@plt+0x1430>
   12320:	b	123d4 <__assert_fail@plt+0x1430>
   12324:	b	123d4 <__assert_fail@plt+0x1430>
   12328:	b	123d4 <__assert_fail@plt+0x1430>
   1232c:	b	123d4 <__assert_fail@plt+0x1430>
   12330:	b	123d4 <__assert_fail@plt+0x1430>
   12334:	b	123cc <__assert_fail@plt+0x1428>
   12338:	b	123cc <__assert_fail@plt+0x1428>
   1233c:	b	123cc <__assert_fail@plt+0x1428>
   12340:	b	123cc <__assert_fail@plt+0x1428>
   12344:	b	123cc <__assert_fail@plt+0x1428>
   12348:	b	123cc <__assert_fail@plt+0x1428>
   1234c:	b	123d4 <__assert_fail@plt+0x1430>
   12350:	b	123d4 <__assert_fail@plt+0x1430>
   12354:	b	123d4 <__assert_fail@plt+0x1430>
   12358:	b	123d4 <__assert_fail@plt+0x1430>
   1235c:	b	123d4 <__assert_fail@plt+0x1430>
   12360:	b	123d4 <__assert_fail@plt+0x1430>
   12364:	b	123d4 <__assert_fail@plt+0x1430>
   12368:	b	123d4 <__assert_fail@plt+0x1430>
   1236c:	b	123d4 <__assert_fail@plt+0x1430>
   12370:	b	123d4 <__assert_fail@plt+0x1430>
   12374:	b	123d4 <__assert_fail@plt+0x1430>
   12378:	b	123d4 <__assert_fail@plt+0x1430>
   1237c:	b	123d4 <__assert_fail@plt+0x1430>
   12380:	b	123d4 <__assert_fail@plt+0x1430>
   12384:	b	123d4 <__assert_fail@plt+0x1430>
   12388:	b	123d4 <__assert_fail@plt+0x1430>
   1238c:	b	123d4 <__assert_fail@plt+0x1430>
   12390:	b	123d4 <__assert_fail@plt+0x1430>
   12394:	b	123d4 <__assert_fail@plt+0x1430>
   12398:	b	123d4 <__assert_fail@plt+0x1430>
   1239c:	b	123d4 <__assert_fail@plt+0x1430>
   123a0:	b	123d4 <__assert_fail@plt+0x1430>
   123a4:	b	123d4 <__assert_fail@plt+0x1430>
   123a8:	b	123d4 <__assert_fail@plt+0x1430>
   123ac:	b	123d4 <__assert_fail@plt+0x1430>
   123b0:	b	123d4 <__assert_fail@plt+0x1430>
   123b4:	b	123cc <__assert_fail@plt+0x1428>
   123b8:	b	123cc <__assert_fail@plt+0x1428>
   123bc:	b	123cc <__assert_fail@plt+0x1428>
   123c0:	b	123cc <__assert_fail@plt+0x1428>
   123c4:	b	123cc <__assert_fail@plt+0x1428>
   123c8:	b	123cc <__assert_fail@plt+0x1428>
   123cc:	mov	r3, #1
   123d0:	b	123d8 <__assert_fail@plt+0x1434>
   123d4:	mov	r3, #0
   123d8:	mov	r0, r3
   123dc:	add	sp, fp, #0
   123e0:	pop	{fp}		; (ldr fp, [sp], #4)
   123e4:	bx	lr
   123e8:	push	{fp}		; (str fp, [sp, #-4]!)
   123ec:	add	fp, sp, #0
   123f0:	sub	sp, sp, #12
   123f4:	str	r0, [fp, #-8]
   123f8:	ldr	r3, [fp, #-8]
   123fc:	sub	r3, r3, #65	; 0x41
   12400:	cmp	r3, #25
   12404:	bhi	12414 <__assert_fail@plt+0x1470>
   12408:	ldr	r3, [fp, #-8]
   1240c:	add	r3, r3, #32
   12410:	b	12418 <__assert_fail@plt+0x1474>
   12414:	ldr	r3, [fp, #-8]
   12418:	mov	r0, r3
   1241c:	add	sp, fp, #0
   12420:	pop	{fp}		; (ldr fp, [sp], #4)
   12424:	bx	lr
   12428:	push	{fp}		; (str fp, [sp, #-4]!)
   1242c:	add	fp, sp, #0
   12430:	sub	sp, sp, #12
   12434:	str	r0, [fp, #-8]
   12438:	ldr	r3, [fp, #-8]
   1243c:	sub	r3, r3, #97	; 0x61
   12440:	cmp	r3, #25
   12444:	bhi	12454 <__assert_fail@plt+0x14b0>
   12448:	ldr	r3, [fp, #-8]
   1244c:	sub	r3, r3, #32
   12450:	b	12458 <__assert_fail@plt+0x14b4>
   12454:	ldr	r3, [fp, #-8]
   12458:	mov	r0, r3
   1245c:	add	sp, fp, #0
   12460:	pop	{fp}		; (ldr fp, [sp], #4)
   12464:	bx	lr
   12468:	push	{fp}		; (str fp, [sp, #-4]!)
   1246c:	add	fp, sp, #0
   12470:	sub	sp, sp, #12
   12474:	str	r0, [fp, #-8]
   12478:	ldr	r2, [pc, #20]	; 12494 <__assert_fail@plt+0x14f0>
   1247c:	ldr	r3, [fp, #-8]
   12480:	str	r3, [r2]
   12484:	nop			; (mov r0, r0)
   12488:	add	sp, fp, #0
   1248c:	pop	{fp}		; (ldr fp, [sp], #4)
   12490:	bx	lr
   12494:	muleq	r2, r0, r1
   12498:	push	{fp}		; (str fp, [sp, #-4]!)
   1249c:	add	fp, sp, #0
   124a0:	sub	sp, sp, #12
   124a4:	mov	r3, r0
   124a8:	strb	r3, [fp, #-5]
   124ac:	ldr	r2, [pc, #20]	; 124c8 <__assert_fail@plt+0x1524>
   124b0:	ldrb	r3, [fp, #-5]
   124b4:	strb	r3, [r2]
   124b8:	nop			; (mov r0, r0)
   124bc:	add	sp, fp, #0
   124c0:	pop	{fp}		; (ldr fp, [sp], #4)
   124c4:	bx	lr
   124c8:	muleq	r2, r4, r1
   124cc:	push	{r4, fp, lr}
   124d0:	add	fp, sp, #8
   124d4:	sub	sp, sp, #20
   124d8:	ldr	r3, [pc, #256]	; 125e0 <__assert_fail@plt+0x163c>
   124dc:	ldr	r3, [r3]
   124e0:	mov	r0, r3
   124e4:	bl	174d0 <__assert_fail@plt+0x652c>
   124e8:	mov	r3, r0
   124ec:	cmp	r3, #0
   124f0:	beq	125a8 <__assert_fail@plt+0x1604>
   124f4:	ldr	r3, [pc, #232]	; 125e4 <__assert_fail@plt+0x1640>
   124f8:	ldrb	r3, [r3]
   124fc:	eor	r3, r3, #1
   12500:	uxtb	r3, r3
   12504:	cmp	r3, #0
   12508:	bne	12520 <__assert_fail@plt+0x157c>
   1250c:	bl	10ec0 <__errno_location@plt>
   12510:	mov	r3, r0
   12514:	ldr	r3, [r3]
   12518:	cmp	r3, #32
   1251c:	beq	125a8 <__assert_fail@plt+0x1604>
   12520:	ldr	r0, [pc, #192]	; 125e8 <__assert_fail@plt+0x1644>
   12524:	bl	10e90 <gettext@plt>
   12528:	str	r0, [fp, #-16]
   1252c:	ldr	r3, [pc, #184]	; 125ec <__assert_fail@plt+0x1648>
   12530:	ldr	r3, [r3]
   12534:	cmp	r3, #0
   12538:	beq	1257c <__assert_fail@plt+0x15d8>
   1253c:	bl	10ec0 <__errno_location@plt>
   12540:	mov	r3, r0
   12544:	ldr	r4, [r3]
   12548:	ldr	r3, [pc, #156]	; 125ec <__assert_fail@plt+0x1648>
   1254c:	ldr	r3, [r3]
   12550:	mov	r0, r3
   12554:	bl	14e98 <__assert_fail@plt+0x3ef4>
   12558:	mov	r2, r0
   1255c:	ldr	r3, [fp, #-16]
   12560:	str	r3, [sp]
   12564:	mov	r3, r2
   12568:	ldr	r2, [pc, #128]	; 125f0 <__assert_fail@plt+0x164c>
   1256c:	mov	r1, r4
   12570:	mov	r0, #0
   12574:	bl	10e18 <error@plt>
   12578:	b	12598 <__assert_fail@plt+0x15f4>
   1257c:	bl	10ec0 <__errno_location@plt>
   12580:	mov	r3, r0
   12584:	ldr	r1, [r3]
   12588:	ldr	r3, [fp, #-16]
   1258c:	ldr	r2, [pc, #96]	; 125f4 <__assert_fail@plt+0x1650>
   12590:	mov	r0, #0
   12594:	bl	10e18 <error@plt>
   12598:	ldr	r3, [pc, #88]	; 125f8 <__assert_fail@plt+0x1654>
   1259c:	ldr	r3, [r3]
   125a0:	mov	r0, r3
   125a4:	bl	10d58 <_exit@plt>
   125a8:	ldr	r3, [pc, #76]	; 125fc <__assert_fail@plt+0x1658>
   125ac:	ldr	r3, [r3]
   125b0:	mov	r0, r3
   125b4:	bl	174d0 <__assert_fail@plt+0x652c>
   125b8:	mov	r3, r0
   125bc:	cmp	r3, #0
   125c0:	beq	125d4 <__assert_fail@plt+0x1630>
   125c4:	ldr	r3, [pc, #44]	; 125f8 <__assert_fail@plt+0x1654>
   125c8:	ldr	r3, [r3]
   125cc:	mov	r0, r3
   125d0:	bl	10d58 <_exit@plt>
   125d4:	nop			; (mov r0, r0)
   125d8:	sub	sp, fp, #8
   125dc:	pop	{r4, fp, pc}
   125e0:	andeq	sl, r2, ip, asr r1
   125e4:	muleq	r2, r4, r1
   125e8:	andeq	r8, r1, ip, asr #25
   125ec:	muleq	r2, r0, r1
   125f0:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   125f4:	andeq	r8, r1, r0, ror #25
   125f8:	andeq	sl, r2, r0, lsl #2
   125fc:	andeq	sl, r2, r8, asr r1
   12600:	push	{fp, lr}
   12604:	add	fp, sp, #4
   12608:	sub	sp, sp, #16
   1260c:	str	r0, [fp, #-16]
   12610:	ldr	r0, [fp, #-16]
   12614:	bl	12704 <__assert_fail@plt+0x1760>
   12618:	mov	r3, r0
   1261c:	str	r3, [fp, #-8]
   12620:	ldr	r3, [fp, #-8]
   12624:	cmp	r3, #0
   12628:	bne	12630 <__assert_fail@plt+0x168c>
   1262c:	bl	1649c <__assert_fail@plt+0x54f8>
   12630:	ldr	r3, [fp, #-8]
   12634:	mov	r0, r3
   12638:	sub	sp, fp, #4
   1263c:	pop	{fp, pc}
   12640:	push	{fp, lr}
   12644:	add	fp, sp, #4
   12648:	sub	sp, sp, #16
   1264c:	str	r0, [fp, #-16]
   12650:	mov	r3, #0
   12654:	str	r3, [fp, #-12]
   12658:	ldr	r3, [fp, #-12]
   1265c:	cmp	r3, #0
   12660:	bne	12684 <__assert_fail@plt+0x16e0>
   12664:	ldr	r3, [fp, #-16]
   12668:	ldrb	r3, [r3]
   1266c:	cmp	r3, #47	; 0x2f
   12670:	bne	1267c <__assert_fail@plt+0x16d8>
   12674:	mov	r3, #1
   12678:	b	12688 <__assert_fail@plt+0x16e4>
   1267c:	mov	r3, #0
   12680:	b	12688 <__assert_fail@plt+0x16e4>
   12684:	mov	r3, #0
   12688:	ldr	r2, [fp, #-12]
   1268c:	add	r3, r2, r3
   12690:	str	r3, [fp, #-12]
   12694:	ldr	r0, [fp, #-16]
   12698:	bl	17000 <__assert_fail@plt+0x605c>
   1269c:	mov	r3, r0
   126a0:	mov	r2, r3
   126a4:	ldr	r3, [fp, #-16]
   126a8:	sub	r3, r2, r3
   126ac:	str	r3, [fp, #-8]
   126b0:	b	126dc <__assert_fail@plt+0x1738>
   126b4:	ldr	r3, [fp, #-8]
   126b8:	sub	r3, r3, #1
   126bc:	ldr	r2, [fp, #-16]
   126c0:	add	r3, r2, r3
   126c4:	ldrb	r3, [r3]
   126c8:	cmp	r3, #47	; 0x2f
   126cc:	bne	126f0 <__assert_fail@plt+0x174c>
   126d0:	ldr	r3, [fp, #-8]
   126d4:	sub	r3, r3, #1
   126d8:	str	r3, [fp, #-8]
   126dc:	ldr	r2, [fp, #-12]
   126e0:	ldr	r3, [fp, #-8]
   126e4:	cmp	r2, r3
   126e8:	bcc	126b4 <__assert_fail@plt+0x1710>
   126ec:	b	126f4 <__assert_fail@plt+0x1750>
   126f0:	nop			; (mov r0, r0)
   126f4:	ldr	r3, [fp, #-8]
   126f8:	mov	r0, r3
   126fc:	sub	sp, fp, #4
   12700:	pop	{fp, pc}
   12704:	push	{fp, lr}
   12708:	add	fp, sp, #4
   1270c:	sub	sp, sp, #24
   12710:	str	r0, [fp, #-24]	; 0xffffffe8
   12714:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12718:	bl	12640 <__assert_fail@plt+0x169c>
   1271c:	str	r0, [fp, #-8]
   12720:	ldr	r3, [fp, #-8]
   12724:	cmp	r3, #0
   12728:	moveq	r3, #1
   1272c:	movne	r3, #0
   12730:	strb	r3, [fp, #-9]
   12734:	ldrb	r2, [fp, #-9]
   12738:	ldr	r3, [fp, #-8]
   1273c:	add	r3, r2, r3
   12740:	add	r3, r3, #1
   12744:	mov	r0, r3
   12748:	bl	16df4 <__assert_fail@plt+0x5e50>
   1274c:	mov	r3, r0
   12750:	str	r3, [fp, #-16]
   12754:	ldr	r3, [fp, #-16]
   12758:	cmp	r3, #0
   1275c:	bne	12768 <__assert_fail@plt+0x17c4>
   12760:	mov	r3, #0
   12764:	b	127b8 <__assert_fail@plt+0x1814>
   12768:	ldr	r2, [fp, #-8]
   1276c:	ldr	r1, [fp, #-24]	; 0xffffffe8
   12770:	ldr	r0, [fp, #-16]
   12774:	bl	10d64 <memcpy@plt>
   12778:	ldrb	r3, [fp, #-9]
   1277c:	cmp	r3, #0
   12780:	beq	127a0 <__assert_fail@plt+0x17fc>
   12784:	ldr	r3, [fp, #-8]
   12788:	add	r2, r3, #1
   1278c:	str	r2, [fp, #-8]
   12790:	ldr	r2, [fp, #-16]
   12794:	add	r3, r2, r3
   12798:	mov	r2, #46	; 0x2e
   1279c:	strb	r2, [r3]
   127a0:	ldr	r2, [fp, #-16]
   127a4:	ldr	r3, [fp, #-8]
   127a8:	add	r3, r2, r3
   127ac:	mov	r2, #0
   127b0:	strb	r2, [r3]
   127b4:	ldr	r3, [fp, #-16]
   127b8:	mov	r0, r3
   127bc:	sub	sp, fp, #4
   127c0:	pop	{fp, pc}
   127c4:	push	{fp, lr}
   127c8:	add	fp, sp, #4
   127cc:	sub	sp, sp, #24
   127d0:	str	r0, [fp, #-16]
   127d4:	str	r1, [fp, #-20]	; 0xffffffec
   127d8:	str	r2, [fp, #-24]	; 0xffffffe8
   127dc:	ldr	r2, [fp, #-24]	; 0xffffffe8
   127e0:	ldr	r1, [fp, #-20]	; 0xffffffec
   127e4:	ldr	r0, [fp, #-16]
   127e8:	bl	12814 <__assert_fail@plt+0x1870>
   127ec:	mov	r3, r0
   127f0:	str	r3, [fp, #-8]
   127f4:	ldr	r3, [fp, #-8]
   127f8:	cmp	r3, #0
   127fc:	bne	12804 <__assert_fail@plt+0x1860>
   12800:	bl	1649c <__assert_fail@plt+0x54f8>
   12804:	ldr	r3, [fp, #-8]
   12808:	mov	r0, r3
   1280c:	sub	sp, fp, #4
   12810:	pop	{fp, pc}
   12814:	push	{fp, lr}
   12818:	add	fp, sp, #4
   1281c:	sub	sp, sp, #48	; 0x30
   12820:	str	r0, [fp, #-40]	; 0xffffffd8
   12824:	str	r1, [fp, #-44]	; 0xffffffd4
   12828:	str	r2, [fp, #-48]	; 0xffffffd0
   1282c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   12830:	bl	17000 <__assert_fail@plt+0x605c>
   12834:	str	r0, [fp, #-12]
   12838:	ldr	r0, [fp, #-12]
   1283c:	bl	170b4 <__assert_fail@plt+0x6110>
   12840:	str	r0, [fp, #-16]
   12844:	ldr	r2, [fp, #-12]
   12848:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1284c:	sub	r3, r2, r3
   12850:	mov	r2, r3
   12854:	ldr	r3, [fp, #-16]
   12858:	add	r3, r2, r3
   1285c:	str	r3, [fp, #-20]	; 0xffffffec
   12860:	ldr	r0, [fp, #-44]	; 0xffffffd4
   12864:	bl	10e9c <strlen@plt>
   12868:	str	r0, [fp, #-24]	; 0xffffffe8
   1286c:	mov	r3, #0
   12870:	strb	r3, [fp, #-5]
   12874:	ldr	r3, [fp, #-16]
   12878:	cmp	r3, #0
   1287c:	beq	128b8 <__assert_fail@plt+0x1914>
   12880:	ldr	r3, [fp, #-20]	; 0xffffffec
   12884:	sub	r3, r3, #1
   12888:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1288c:	add	r3, r2, r3
   12890:	ldrb	r3, [r3]
   12894:	cmp	r3, #47	; 0x2f
   12898:	beq	128d0 <__assert_fail@plt+0x192c>
   1289c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   128a0:	ldrb	r3, [r3]
   128a4:	cmp	r3, #47	; 0x2f
   128a8:	beq	128d0 <__assert_fail@plt+0x192c>
   128ac:	mov	r3, #47	; 0x2f
   128b0:	strb	r3, [fp, #-5]
   128b4:	b	128d0 <__assert_fail@plt+0x192c>
   128b8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   128bc:	ldrb	r3, [r3]
   128c0:	cmp	r3, #47	; 0x2f
   128c4:	bne	128d0 <__assert_fail@plt+0x192c>
   128c8:	mov	r3, #46	; 0x2e
   128cc:	strb	r3, [fp, #-5]
   128d0:	ldrb	r3, [fp, #-5]
   128d4:	cmp	r3, #0
   128d8:	movne	r3, #1
   128dc:	moveq	r3, #0
   128e0:	uxtb	r3, r3
   128e4:	mov	r2, r3
   128e8:	ldr	r3, [fp, #-20]	; 0xffffffec
   128ec:	add	r2, r2, r3
   128f0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   128f4:	add	r3, r2, r3
   128f8:	add	r3, r3, #1
   128fc:	mov	r0, r3
   12900:	bl	16df4 <__assert_fail@plt+0x5e50>
   12904:	mov	r3, r0
   12908:	str	r3, [fp, #-28]	; 0xffffffe4
   1290c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12910:	cmp	r3, #0
   12914:	bne	12920 <__assert_fail@plt+0x197c>
   12918:	mov	r3, #0
   1291c:	b	129a0 <__assert_fail@plt+0x19fc>
   12920:	ldr	r2, [fp, #-20]	; 0xffffffec
   12924:	ldr	r1, [fp, #-40]	; 0xffffffd8
   12928:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1292c:	bl	10e60 <mempcpy@plt>
   12930:	str	r0, [fp, #-32]	; 0xffffffe0
   12934:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12938:	ldrb	r2, [fp, #-5]
   1293c:	strb	r2, [r3]
   12940:	ldrb	r3, [fp, #-5]
   12944:	cmp	r3, #0
   12948:	movne	r3, #1
   1294c:	moveq	r3, #0
   12950:	uxtb	r3, r3
   12954:	mov	r2, r3
   12958:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1295c:	add	r3, r3, r2
   12960:	str	r3, [fp, #-32]	; 0xffffffe0
   12964:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12968:	cmp	r3, #0
   1296c:	beq	1297c <__assert_fail@plt+0x19d8>
   12970:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12974:	ldr	r2, [fp, #-32]	; 0xffffffe0
   12978:	str	r2, [r3]
   1297c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   12980:	ldr	r1, [fp, #-44]	; 0xffffffd4
   12984:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12988:	bl	10e60 <mempcpy@plt>
   1298c:	str	r0, [fp, #-32]	; 0xffffffe0
   12990:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12994:	mov	r2, #0
   12998:	strb	r2, [r3]
   1299c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   129a0:	mov	r0, r3
   129a4:	sub	sp, fp, #4
   129a8:	pop	{fp, pc}
   129ac:	push	{r4, fp, lr}
   129b0:	add	fp, sp, #8
   129b4:	sub	sp, sp, #20
   129b8:	str	r0, [fp, #-24]	; 0xffffffe8
   129bc:	bl	10ec0 <__errno_location@plt>
   129c0:	mov	r3, r0
   129c4:	ldr	r3, [r3]
   129c8:	str	r3, [fp, #-20]	; 0xffffffec
   129cc:	bl	10ec0 <__errno_location@plt>
   129d0:	mov	r3, r0
   129d4:	ldr	r3, [r3]
   129d8:	str	r3, [fp, #-16]
   129dc:	bl	10ec0 <__errno_location@plt>
   129e0:	mov	r2, r0
   129e4:	mov	r3, #0
   129e8:	str	r3, [r2]
   129ec:	ldr	r0, [fp, #-24]	; 0xffffffe8
   129f0:	bl	10d4c <free@plt>
   129f4:	bl	10ec0 <__errno_location@plt>
   129f8:	mov	r4, r0
   129fc:	bl	10ec0 <__errno_location@plt>
   12a00:	mov	r3, r0
   12a04:	ldr	r3, [r3]
   12a08:	cmp	r3, #0
   12a0c:	moveq	r3, #1
   12a10:	movne	r3, #0
   12a14:	uxtb	r3, r3
   12a18:	lsl	r3, r3, #2
   12a1c:	sub	r2, fp, #12
   12a20:	add	r3, r2, r3
   12a24:	ldr	r3, [r3, #-8]
   12a28:	str	r3, [r4]
   12a2c:	nop			; (mov r0, r0)
   12a30:	sub	sp, fp, #8
   12a34:	pop	{r4, fp, pc}
   12a38:	push	{fp, lr}
   12a3c:	add	fp, sp, #4
   12a40:	sub	sp, sp, #16
   12a44:	str	r0, [fp, #-16]
   12a48:	ldr	r3, [fp, #-16]
   12a4c:	cmp	r3, #0
   12a50:	bne	12a70 <__assert_fail@plt+0x1acc>
   12a54:	ldr	r3, [pc, #220]	; 12b38 <__assert_fail@plt+0x1b94>
   12a58:	ldr	r3, [r3]
   12a5c:	mov	r2, #55	; 0x37
   12a60:	mov	r1, #1
   12a64:	ldr	r0, [pc, #208]	; 12b3c <__assert_fail@plt+0x1b98>
   12a68:	bl	10dd0 <fwrite@plt>
   12a6c:	bl	10f98 <abort@plt>
   12a70:	mov	r1, #47	; 0x2f
   12a74:	ldr	r0, [fp, #-16]
   12a78:	bl	10f5c <strrchr@plt>
   12a7c:	str	r0, [fp, #-8]
   12a80:	ldr	r3, [fp, #-8]
   12a84:	cmp	r3, #0
   12a88:	beq	12a98 <__assert_fail@plt+0x1af4>
   12a8c:	ldr	r3, [fp, #-8]
   12a90:	add	r3, r3, #1
   12a94:	b	12a9c <__assert_fail@plt+0x1af8>
   12a98:	ldr	r3, [fp, #-16]
   12a9c:	str	r3, [fp, #-12]
   12aa0:	ldr	r2, [fp, #-12]
   12aa4:	ldr	r3, [fp, #-16]
   12aa8:	sub	r3, r2, r3
   12aac:	cmp	r3, #6
   12ab0:	ble	12b14 <__assert_fail@plt+0x1b70>
   12ab4:	ldr	r3, [fp, #-12]
   12ab8:	sub	r3, r3, #7
   12abc:	mov	r2, #7
   12ac0:	ldr	r1, [pc, #120]	; 12b40 <__assert_fail@plt+0x1b9c>
   12ac4:	mov	r0, r3
   12ac8:	bl	10f8c <strncmp@plt>
   12acc:	mov	r3, r0
   12ad0:	cmp	r3, #0
   12ad4:	bne	12b14 <__assert_fail@plt+0x1b70>
   12ad8:	ldr	r3, [fp, #-12]
   12adc:	str	r3, [fp, #-16]
   12ae0:	mov	r2, #3
   12ae4:	ldr	r1, [pc, #88]	; 12b44 <__assert_fail@plt+0x1ba0>
   12ae8:	ldr	r0, [fp, #-12]
   12aec:	bl	10f8c <strncmp@plt>
   12af0:	mov	r3, r0
   12af4:	cmp	r3, #0
   12af8:	bne	12b14 <__assert_fail@plt+0x1b70>
   12afc:	ldr	r3, [fp, #-12]
   12b00:	add	r3, r3, #3
   12b04:	str	r3, [fp, #-16]
   12b08:	ldr	r2, [pc, #56]	; 12b48 <__assert_fail@plt+0x1ba4>
   12b0c:	ldr	r3, [fp, #-16]
   12b10:	str	r3, [r2]
   12b14:	ldr	r2, [pc, #48]	; 12b4c <__assert_fail@plt+0x1ba8>
   12b18:	ldr	r3, [fp, #-16]
   12b1c:	str	r3, [r2]
   12b20:	ldr	r2, [pc, #40]	; 12b50 <__assert_fail@plt+0x1bac>
   12b24:	ldr	r3, [fp, #-16]
   12b28:	str	r3, [r2]
   12b2c:	nop			; (mov r0, r0)
   12b30:	sub	sp, fp, #4
   12b34:	pop	{fp, pc}
   12b38:	andeq	sl, r2, r8, asr r1
   12b3c:	andeq	r8, r1, r4, ror #25
   12b40:	andeq	r8, r1, ip, lsl sp
   12b44:	andeq	r8, r1, r4, lsr #26
   12b48:	andeq	sl, r2, r8, asr #2
   12b4c:	muleq	r2, r8, r1
   12b50:	andeq	sl, r2, ip, asr #2
   12b54:	push	{fp, lr}
   12b58:	add	fp, sp, #4
   12b5c:	sub	sp, sp, #16
   12b60:	str	r0, [fp, #-16]
   12b64:	bl	10ec0 <__errno_location@plt>
   12b68:	mov	r3, r0
   12b6c:	ldr	r3, [r3]
   12b70:	str	r3, [fp, #-8]
   12b74:	ldr	r3, [fp, #-16]
   12b78:	cmp	r3, #0
   12b7c:	beq	12b88 <__assert_fail@plt+0x1be4>
   12b80:	ldr	r3, [fp, #-16]
   12b84:	b	12b8c <__assert_fail@plt+0x1be8>
   12b88:	ldr	r3, [pc, #48]	; 12bc0 <__assert_fail@plt+0x1c1c>
   12b8c:	mov	r1, #48	; 0x30
   12b90:	mov	r0, r3
   12b94:	bl	16378 <__assert_fail@plt+0x53d4>
   12b98:	mov	r3, r0
   12b9c:	str	r3, [fp, #-12]
   12ba0:	bl	10ec0 <__errno_location@plt>
   12ba4:	mov	r2, r0
   12ba8:	ldr	r3, [fp, #-8]
   12bac:	str	r3, [r2]
   12bb0:	ldr	r3, [fp, #-12]
   12bb4:	mov	r0, r3
   12bb8:	sub	sp, fp, #4
   12bbc:	pop	{fp, pc}
   12bc0:	muleq	r2, ip, r1
   12bc4:	push	{fp}		; (str fp, [sp, #-4]!)
   12bc8:	add	fp, sp, #0
   12bcc:	sub	sp, sp, #12
   12bd0:	str	r0, [fp, #-8]
   12bd4:	ldr	r3, [fp, #-8]
   12bd8:	cmp	r3, #0
   12bdc:	beq	12be8 <__assert_fail@plt+0x1c44>
   12be0:	ldr	r3, [fp, #-8]
   12be4:	b	12bec <__assert_fail@plt+0x1c48>
   12be8:	ldr	r3, [pc, #16]	; 12c00 <__assert_fail@plt+0x1c5c>
   12bec:	ldr	r3, [r3]
   12bf0:	mov	r0, r3
   12bf4:	add	sp, fp, #0
   12bf8:	pop	{fp}		; (ldr fp, [sp], #4)
   12bfc:	bx	lr
   12c00:	muleq	r2, ip, r1
   12c04:	push	{fp}		; (str fp, [sp, #-4]!)
   12c08:	add	fp, sp, #0
   12c0c:	sub	sp, sp, #12
   12c10:	str	r0, [fp, #-8]
   12c14:	str	r1, [fp, #-12]
   12c18:	ldr	r3, [fp, #-8]
   12c1c:	cmp	r3, #0
   12c20:	beq	12c2c <__assert_fail@plt+0x1c88>
   12c24:	ldr	r3, [fp, #-8]
   12c28:	b	12c30 <__assert_fail@plt+0x1c8c>
   12c2c:	ldr	r3, [pc, #20]	; 12c48 <__assert_fail@plt+0x1ca4>
   12c30:	ldr	r2, [fp, #-12]
   12c34:	str	r2, [r3]
   12c38:	nop			; (mov r0, r0)
   12c3c:	add	sp, fp, #0
   12c40:	pop	{fp}		; (ldr fp, [sp], #4)
   12c44:	bx	lr
   12c48:	muleq	r2, ip, r1
   12c4c:	push	{fp}		; (str fp, [sp, #-4]!)
   12c50:	add	fp, sp, #0
   12c54:	sub	sp, sp, #36	; 0x24
   12c58:	str	r0, [fp, #-24]	; 0xffffffe8
   12c5c:	mov	r3, r1
   12c60:	str	r2, [fp, #-32]	; 0xffffffe0
   12c64:	strb	r3, [fp, #-25]	; 0xffffffe7
   12c68:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   12c6c:	strb	r3, [fp, #-5]
   12c70:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12c74:	cmp	r3, #0
   12c78:	beq	12c84 <__assert_fail@plt+0x1ce0>
   12c7c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12c80:	b	12c88 <__assert_fail@plt+0x1ce4>
   12c84:	ldr	r3, [pc, #124]	; 12d08 <__assert_fail@plt+0x1d64>
   12c88:	add	r2, r3, #8
   12c8c:	ldrb	r3, [fp, #-5]
   12c90:	lsr	r3, r3, #5
   12c94:	uxtb	r3, r3
   12c98:	lsl	r3, r3, #2
   12c9c:	add	r3, r2, r3
   12ca0:	str	r3, [fp, #-12]
   12ca4:	ldrb	r3, [fp, #-5]
   12ca8:	and	r3, r3, #31
   12cac:	str	r3, [fp, #-16]
   12cb0:	ldr	r3, [fp, #-12]
   12cb4:	ldr	r2, [r3]
   12cb8:	ldr	r3, [fp, #-16]
   12cbc:	lsr	r3, r2, r3
   12cc0:	and	r3, r3, #1
   12cc4:	str	r3, [fp, #-20]	; 0xffffffec
   12cc8:	ldr	r3, [fp, #-12]
   12ccc:	ldr	r3, [r3]
   12cd0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   12cd4:	and	r1, r2, #1
   12cd8:	ldr	r2, [fp, #-20]	; 0xffffffec
   12cdc:	eor	r1, r1, r2
   12ce0:	ldr	r2, [fp, #-16]
   12ce4:	lsl	r2, r1, r2
   12ce8:	eor	r2, r2, r3
   12cec:	ldr	r3, [fp, #-12]
   12cf0:	str	r2, [r3]
   12cf4:	ldr	r3, [fp, #-20]	; 0xffffffec
   12cf8:	mov	r0, r3
   12cfc:	add	sp, fp, #0
   12d00:	pop	{fp}		; (ldr fp, [sp], #4)
   12d04:	bx	lr
   12d08:	muleq	r2, ip, r1
   12d0c:	push	{fp}		; (str fp, [sp, #-4]!)
   12d10:	add	fp, sp, #0
   12d14:	sub	sp, sp, #20
   12d18:	str	r0, [fp, #-16]
   12d1c:	str	r1, [fp, #-20]	; 0xffffffec
   12d20:	ldr	r3, [fp, #-16]
   12d24:	cmp	r3, #0
   12d28:	bne	12d34 <__assert_fail@plt+0x1d90>
   12d2c:	ldr	r3, [pc, #44]	; 12d60 <__assert_fail@plt+0x1dbc>
   12d30:	str	r3, [fp, #-16]
   12d34:	ldr	r3, [fp, #-16]
   12d38:	ldr	r3, [r3, #4]
   12d3c:	str	r3, [fp, #-8]
   12d40:	ldr	r3, [fp, #-16]
   12d44:	ldr	r2, [fp, #-20]	; 0xffffffec
   12d48:	str	r2, [r3, #4]
   12d4c:	ldr	r3, [fp, #-8]
   12d50:	mov	r0, r3
   12d54:	add	sp, fp, #0
   12d58:	pop	{fp}		; (ldr fp, [sp], #4)
   12d5c:	bx	lr
   12d60:	muleq	r2, ip, r1
   12d64:	push	{fp, lr}
   12d68:	add	fp, sp, #4
   12d6c:	sub	sp, sp, #16
   12d70:	str	r0, [fp, #-8]
   12d74:	str	r1, [fp, #-12]
   12d78:	str	r2, [fp, #-16]
   12d7c:	ldr	r3, [fp, #-8]
   12d80:	cmp	r3, #0
   12d84:	bne	12d90 <__assert_fail@plt+0x1dec>
   12d88:	ldr	r3, [pc, #76]	; 12ddc <__assert_fail@plt+0x1e38>
   12d8c:	str	r3, [fp, #-8]
   12d90:	ldr	r3, [fp, #-8]
   12d94:	mov	r2, #10
   12d98:	str	r2, [r3]
   12d9c:	ldr	r3, [fp, #-12]
   12da0:	cmp	r3, #0
   12da4:	beq	12db4 <__assert_fail@plt+0x1e10>
   12da8:	ldr	r3, [fp, #-16]
   12dac:	cmp	r3, #0
   12db0:	bne	12db8 <__assert_fail@plt+0x1e14>
   12db4:	bl	10f98 <abort@plt>
   12db8:	ldr	r3, [fp, #-8]
   12dbc:	ldr	r2, [fp, #-12]
   12dc0:	str	r2, [r3, #40]	; 0x28
   12dc4:	ldr	r3, [fp, #-8]
   12dc8:	ldr	r2, [fp, #-16]
   12dcc:	str	r2, [r3, #44]	; 0x2c
   12dd0:	nop			; (mov r0, r0)
   12dd4:	sub	sp, fp, #4
   12dd8:	pop	{fp, pc}
   12ddc:	muleq	r2, ip, r1
   12de0:	push	{fp, lr}
   12de4:	add	fp, sp, #4
   12de8:	sub	sp, sp, #56	; 0x38
   12dec:	str	r0, [fp, #-56]	; 0xffffffc8
   12df0:	str	r1, [fp, #-60]	; 0xffffffc4
   12df4:	sub	r3, fp, #52	; 0x34
   12df8:	mov	r2, #48	; 0x30
   12dfc:	mov	r1, #0
   12e00:	mov	r0, r3
   12e04:	bl	10ed8 <memset@plt>
   12e08:	ldr	r3, [fp, #-60]	; 0xffffffc4
   12e0c:	cmp	r3, #10
   12e10:	bne	12e18 <__assert_fail@plt+0x1e74>
   12e14:	bl	10f98 <abort@plt>
   12e18:	ldr	r3, [fp, #-60]	; 0xffffffc4
   12e1c:	str	r3, [fp, #-52]	; 0xffffffcc
   12e20:	ldr	r3, [fp, #-56]	; 0xffffffc8
   12e24:	mov	lr, r3
   12e28:	sub	ip, fp, #52	; 0x34
   12e2c:	ldm	ip!, {r0, r1, r2, r3}
   12e30:	stmia	lr!, {r0, r1, r2, r3}
   12e34:	ldm	ip!, {r0, r1, r2, r3}
   12e38:	stmia	lr!, {r0, r1, r2, r3}
   12e3c:	ldm	ip, {r0, r1, r2, r3}
   12e40:	stm	lr, {r0, r1, r2, r3}
   12e44:	ldr	r0, [fp, #-56]	; 0xffffffc8
   12e48:	sub	sp, fp, #4
   12e4c:	pop	{fp, pc}
   12e50:	push	{fp, lr}
   12e54:	add	fp, sp, #4
   12e58:	sub	sp, sp, #16
   12e5c:	str	r0, [fp, #-16]
   12e60:	str	r1, [fp, #-20]	; 0xffffffec
   12e64:	ldr	r0, [fp, #-16]
   12e68:	bl	10e90 <gettext@plt>
   12e6c:	str	r0, [fp, #-8]
   12e70:	ldr	r2, [fp, #-8]
   12e74:	ldr	r3, [fp, #-16]
   12e78:	cmp	r2, r3
   12e7c:	beq	12e88 <__assert_fail@plt+0x1ee4>
   12e80:	ldr	r3, [fp, #-8]
   12e84:	b	12f18 <__assert_fail@plt+0x1f74>
   12e88:	bl	17968 <__assert_fail@plt+0x69c4>
   12e8c:	str	r0, [fp, #-12]
   12e90:	ldr	r1, [pc, #140]	; 12f24 <__assert_fail@plt+0x1f80>
   12e94:	ldr	r0, [fp, #-12]
   12e98:	bl	17120 <__assert_fail@plt+0x617c>
   12e9c:	mov	r3, r0
   12ea0:	cmp	r3, #0
   12ea4:	bne	12ec8 <__assert_fail@plt+0x1f24>
   12ea8:	ldr	r3, [fp, #-16]
   12eac:	ldrb	r3, [r3]
   12eb0:	cmp	r3, #96	; 0x60
   12eb4:	bne	12ec0 <__assert_fail@plt+0x1f1c>
   12eb8:	ldr	r3, [pc, #104]	; 12f28 <__assert_fail@plt+0x1f84>
   12ebc:	b	12f18 <__assert_fail@plt+0x1f74>
   12ec0:	ldr	r3, [pc, #100]	; 12f2c <__assert_fail@plt+0x1f88>
   12ec4:	b	12f18 <__assert_fail@plt+0x1f74>
   12ec8:	ldr	r1, [pc, #96]	; 12f30 <__assert_fail@plt+0x1f8c>
   12ecc:	ldr	r0, [fp, #-12]
   12ed0:	bl	17120 <__assert_fail@plt+0x617c>
   12ed4:	mov	r3, r0
   12ed8:	cmp	r3, #0
   12edc:	bne	12f00 <__assert_fail@plt+0x1f5c>
   12ee0:	ldr	r3, [fp, #-16]
   12ee4:	ldrb	r3, [r3]
   12ee8:	cmp	r3, #96	; 0x60
   12eec:	bne	12ef8 <__assert_fail@plt+0x1f54>
   12ef0:	ldr	r3, [pc, #60]	; 12f34 <__assert_fail@plt+0x1f90>
   12ef4:	b	12f18 <__assert_fail@plt+0x1f74>
   12ef8:	ldr	r3, [pc, #56]	; 12f38 <__assert_fail@plt+0x1f94>
   12efc:	b	12f18 <__assert_fail@plt+0x1f74>
   12f00:	ldr	r3, [fp, #-20]	; 0xffffffec
   12f04:	cmp	r3, #9
   12f08:	bne	12f14 <__assert_fail@plt+0x1f70>
   12f0c:	ldr	r3, [pc, #40]	; 12f3c <__assert_fail@plt+0x1f98>
   12f10:	b	12f18 <__assert_fail@plt+0x1f74>
   12f14:	ldr	r3, [pc, #36]	; 12f40 <__assert_fail@plt+0x1f9c>
   12f18:	mov	r0, r3
   12f1c:	sub	sp, fp, #4
   12f20:	pop	{fp, pc}
   12f24:	andeq	r8, r1, r4, ror #27
   12f28:	andeq	r8, r1, ip, ror #27
   12f2c:	strdeq	r8, [r1], -r0
   12f30:	strdeq	r8, [r1], -r4
   12f34:	strdeq	r8, [r1], -ip
   12f38:	andeq	r8, r1, r0, lsl #28
   12f3c:	andeq	r8, r1, r4, lsl #28
   12f40:	andeq	r8, r1, r8, lsl #28
   12f44:	push	{r4, fp, lr}
   12f48:	add	fp, sp, #8
   12f4c:	sub	sp, sp, #116	; 0x74
   12f50:	str	r0, [fp, #-88]	; 0xffffffa8
   12f54:	str	r1, [fp, #-92]	; 0xffffffa4
   12f58:	str	r2, [fp, #-96]	; 0xffffffa0
   12f5c:	str	r3, [fp, #-100]	; 0xffffff9c
   12f60:	mov	r3, #0
   12f64:	str	r3, [fp, #-20]	; 0xffffffec
   12f68:	mov	r3, #0
   12f6c:	str	r3, [fp, #-24]	; 0xffffffe8
   12f70:	mov	r3, #0
   12f74:	str	r3, [fp, #-28]	; 0xffffffe4
   12f78:	mov	r3, #0
   12f7c:	str	r3, [fp, #-32]	; 0xffffffe0
   12f80:	mov	r3, #0
   12f84:	strb	r3, [fp, #-33]	; 0xffffffdf
   12f88:	bl	10de8 <__ctype_get_mb_cur_max@plt>
   12f8c:	mov	r3, r0
   12f90:	cmp	r3, #1
   12f94:	moveq	r3, #1
   12f98:	movne	r3, #0
   12f9c:	strb	r3, [fp, #-57]	; 0xffffffc7
   12fa0:	ldr	r3, [fp, #8]
   12fa4:	and	r3, r3, #2
   12fa8:	cmp	r3, #0
   12fac:	movne	r3, #1
   12fb0:	moveq	r3, #0
   12fb4:	strb	r3, [fp, #-34]	; 0xffffffde
   12fb8:	mov	r3, #0
   12fbc:	strb	r3, [fp, #-35]	; 0xffffffdd
   12fc0:	mov	r3, #0
   12fc4:	strb	r3, [fp, #-36]	; 0xffffffdc
   12fc8:	mov	r3, #1
   12fcc:	strb	r3, [fp, #-37]	; 0xffffffdb
   12fd0:	ldr	r3, [fp, #4]
   12fd4:	cmp	r3, #10
   12fd8:	ldrls	pc, [pc, r3, lsl #2]
   12fdc:	b	131e4 <__assert_fail@plt+0x2240>
   12fe0:	ldrdeq	r3, [r1], -r8
   12fe4:	andeq	r3, r1, r4, asr r1
   12fe8:	andeq	r3, r1, r8, ror r1
   12fec:	andeq	r3, r1, ip, asr #2
   12ff0:	andeq	r3, r1, ip, asr r1
   12ff4:	andeq	r3, r1, ip, lsl r0
   12ff8:	andeq	r3, r1, ip
   12ffc:	andeq	r3, r1, ip, ror r0
   13000:	muleq	r1, r0, r0
   13004:	muleq	r1, r0, r0
   13008:	muleq	r1, r0, r0
   1300c:	mov	r3, #5
   13010:	str	r3, [fp, #4]
   13014:	mov	r3, #1
   13018:	strb	r3, [fp, #-34]	; 0xffffffde
   1301c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13020:	eor	r3, r3, #1
   13024:	uxtb	r3, r3
   13028:	cmp	r3, #0
   1302c:	beq	13060 <__assert_fail@plt+0x20bc>
   13030:	ldr	r2, [fp, #-20]	; 0xffffffec
   13034:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13038:	cmp	r2, r3
   1303c:	bcs	13054 <__assert_fail@plt+0x20b0>
   13040:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13044:	ldr	r3, [fp, #-20]	; 0xffffffec
   13048:	add	r3, r2, r3
   1304c:	mov	r2, #34	; 0x22
   13050:	strb	r2, [r3]
   13054:	ldr	r3, [fp, #-20]	; 0xffffffec
   13058:	add	r3, r3, #1
   1305c:	str	r3, [fp, #-20]	; 0xffffffec
   13060:	mov	r3, #1
   13064:	strb	r3, [fp, #-33]	; 0xffffffdf
   13068:	ldr	r3, [pc, #3872]	; 13f90 <__assert_fail@plt+0x2fec>
   1306c:	str	r3, [fp, #-28]	; 0xffffffe4
   13070:	mov	r3, #1
   13074:	str	r3, [fp, #-32]	; 0xffffffe0
   13078:	b	131e8 <__assert_fail@plt+0x2244>
   1307c:	mov	r3, #1
   13080:	strb	r3, [fp, #-33]	; 0xffffffdf
   13084:	mov	r3, #0
   13088:	strb	r3, [fp, #-34]	; 0xffffffde
   1308c:	b	131e8 <__assert_fail@plt+0x2244>
   13090:	ldr	r3, [fp, #4]
   13094:	cmp	r3, #10
   13098:	beq	130bc <__assert_fail@plt+0x2118>
   1309c:	ldr	r1, [fp, #4]
   130a0:	ldr	r0, [pc, #3820]	; 13f94 <__assert_fail@plt+0x2ff0>
   130a4:	bl	12e50 <__assert_fail@plt+0x1eac>
   130a8:	str	r0, [fp, #16]
   130ac:	ldr	r1, [fp, #4]
   130b0:	ldr	r0, [pc, #3808]	; 13f98 <__assert_fail@plt+0x2ff4>
   130b4:	bl	12e50 <__assert_fail@plt+0x1eac>
   130b8:	str	r0, [fp, #20]
   130bc:	ldrb	r3, [fp, #-34]	; 0xffffffde
   130c0:	eor	r3, r3, #1
   130c4:	uxtb	r3, r3
   130c8:	cmp	r3, #0
   130cc:	beq	1312c <__assert_fail@plt+0x2188>
   130d0:	ldr	r3, [fp, #16]
   130d4:	str	r3, [fp, #-28]	; 0xffffffe4
   130d8:	b	1311c <__assert_fail@plt+0x2178>
   130dc:	ldr	r2, [fp, #-20]	; 0xffffffec
   130e0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   130e4:	cmp	r2, r3
   130e8:	bcs	13104 <__assert_fail@plt+0x2160>
   130ec:	ldr	r2, [fp, #-88]	; 0xffffffa8
   130f0:	ldr	r3, [fp, #-20]	; 0xffffffec
   130f4:	add	r3, r2, r3
   130f8:	ldr	r2, [fp, #-28]	; 0xffffffe4
   130fc:	ldrb	r2, [r2]
   13100:	strb	r2, [r3]
   13104:	ldr	r3, [fp, #-20]	; 0xffffffec
   13108:	add	r3, r3, #1
   1310c:	str	r3, [fp, #-20]	; 0xffffffec
   13110:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13114:	add	r3, r3, #1
   13118:	str	r3, [fp, #-28]	; 0xffffffe4
   1311c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13120:	ldrb	r3, [r3]
   13124:	cmp	r3, #0
   13128:	bne	130dc <__assert_fail@plt+0x2138>
   1312c:	mov	r3, #1
   13130:	strb	r3, [fp, #-33]	; 0xffffffdf
   13134:	ldr	r3, [fp, #20]
   13138:	str	r3, [fp, #-28]	; 0xffffffe4
   1313c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   13140:	bl	10e9c <strlen@plt>
   13144:	str	r0, [fp, #-32]	; 0xffffffe0
   13148:	b	131e8 <__assert_fail@plt+0x2244>
   1314c:	mov	r3, #1
   13150:	strb	r3, [fp, #-33]	; 0xffffffdf
   13154:	mov	r3, #1
   13158:	strb	r3, [fp, #-34]	; 0xffffffde
   1315c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13160:	eor	r3, r3, #1
   13164:	uxtb	r3, r3
   13168:	cmp	r3, #0
   1316c:	beq	13178 <__assert_fail@plt+0x21d4>
   13170:	mov	r3, #1
   13174:	strb	r3, [fp, #-33]	; 0xffffffdf
   13178:	mov	r3, #2
   1317c:	str	r3, [fp, #4]
   13180:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13184:	eor	r3, r3, #1
   13188:	uxtb	r3, r3
   1318c:	cmp	r3, #0
   13190:	beq	131c4 <__assert_fail@plt+0x2220>
   13194:	ldr	r2, [fp, #-20]	; 0xffffffec
   13198:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1319c:	cmp	r2, r3
   131a0:	bcs	131b8 <__assert_fail@plt+0x2214>
   131a4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   131a8:	ldr	r3, [fp, #-20]	; 0xffffffec
   131ac:	add	r3, r2, r3
   131b0:	mov	r2, #39	; 0x27
   131b4:	strb	r2, [r3]
   131b8:	ldr	r3, [fp, #-20]	; 0xffffffec
   131bc:	add	r3, r3, #1
   131c0:	str	r3, [fp, #-20]	; 0xffffffec
   131c4:	ldr	r3, [pc, #3532]	; 13f98 <__assert_fail@plt+0x2ff4>
   131c8:	str	r3, [fp, #-28]	; 0xffffffe4
   131cc:	mov	r3, #1
   131d0:	str	r3, [fp, #-32]	; 0xffffffe0
   131d4:	b	131e8 <__assert_fail@plt+0x2244>
   131d8:	mov	r3, #0
   131dc:	strb	r3, [fp, #-34]	; 0xffffffde
   131e0:	b	131e8 <__assert_fail@plt+0x2244>
   131e4:	bl	10f98 <abort@plt>
   131e8:	mov	r3, #0
   131ec:	str	r3, [fp, #-16]
   131f0:	b	14380 <__assert_fail@plt+0x33dc>
   131f4:	mov	r3, #0
   131f8:	strb	r3, [fp, #-40]	; 0xffffffd8
   131fc:	mov	r3, #0
   13200:	strb	r3, [fp, #-41]	; 0xffffffd7
   13204:	mov	r3, #0
   13208:	strb	r3, [fp, #-42]	; 0xffffffd6
   1320c:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   13210:	cmp	r3, #0
   13214:	beq	132b0 <__assert_fail@plt+0x230c>
   13218:	ldr	r3, [fp, #4]
   1321c:	cmp	r3, #2
   13220:	beq	132b0 <__assert_fail@plt+0x230c>
   13224:	ldr	r3, [fp, #-32]	; 0xffffffe0
   13228:	cmp	r3, #0
   1322c:	beq	132b0 <__assert_fail@plt+0x230c>
   13230:	ldr	r2, [fp, #-16]
   13234:	ldr	r3, [fp, #-32]	; 0xffffffe0
   13238:	add	r4, r2, r3
   1323c:	ldr	r3, [fp, #-100]	; 0xffffff9c
   13240:	cmn	r3, #1
   13244:	bne	13268 <__assert_fail@plt+0x22c4>
   13248:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1324c:	cmp	r3, #1
   13250:	bls	13268 <__assert_fail@plt+0x22c4>
   13254:	ldr	r0, [fp, #-96]	; 0xffffffa0
   13258:	bl	10e9c <strlen@plt>
   1325c:	str	r0, [fp, #-100]	; 0xffffff9c
   13260:	ldr	r3, [fp, #-100]	; 0xffffff9c
   13264:	b	1326c <__assert_fail@plt+0x22c8>
   13268:	ldr	r3, [fp, #-100]	; 0xffffff9c
   1326c:	cmp	r4, r3
   13270:	bhi	132b0 <__assert_fail@plt+0x230c>
   13274:	ldr	r2, [fp, #-96]	; 0xffffffa0
   13278:	ldr	r3, [fp, #-16]
   1327c:	add	r3, r2, r3
   13280:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13284:	ldr	r1, [fp, #-28]	; 0xffffffe4
   13288:	mov	r0, r3
   1328c:	bl	10d88 <memcmp@plt>
   13290:	mov	r3, r0
   13294:	cmp	r3, #0
   13298:	bne	132b0 <__assert_fail@plt+0x230c>
   1329c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   132a0:	cmp	r3, #0
   132a4:	bne	1453c <__assert_fail@plt+0x3598>
   132a8:	mov	r3, #1
   132ac:	strb	r3, [fp, #-40]	; 0xffffffd8
   132b0:	ldr	r2, [fp, #-96]	; 0xffffffa0
   132b4:	ldr	r3, [fp, #-16]
   132b8:	add	r3, r2, r3
   132bc:	ldrb	r3, [r3]
   132c0:	strb	r3, [fp, #-38]	; 0xffffffda
   132c4:	ldrb	r3, [fp, #-38]	; 0xffffffda
   132c8:	cmp	r3, #126	; 0x7e
   132cc:	ldrls	pc, [pc, r3, lsl #2]
   132d0:	b	13afc <__assert_fail@plt+0x2b58>
   132d4:	ldrdeq	r3, [r1], -r0
   132d8:	strdeq	r3, [r1], -ip
   132dc:	strdeq	r3, [r1], -ip
   132e0:	strdeq	r3, [r1], -ip
   132e4:	strdeq	r3, [r1], -ip
   132e8:	strdeq	r3, [r1], -ip
   132ec:	strdeq	r3, [r1], -ip
   132f0:	andeq	r3, r1, r0, asr #17
   132f4:	andeq	r3, r1, ip, asr #17
   132f8:	strdeq	r3, [r1], -ip
   132fc:	andeq	r3, r1, r4, ror #17
   13300:	andeq	r3, r1, r8, lsl #18
   13304:	ldrdeq	r3, [r1], -r8
   13308:	strdeq	r3, [r1], -r0
   1330c:	strdeq	r3, [r1], -ip
   13310:	strdeq	r3, [r1], -ip
   13314:	strdeq	r3, [r1], -ip
   13318:	strdeq	r3, [r1], -ip
   1331c:	strdeq	r3, [r1], -ip
   13320:	strdeq	r3, [r1], -ip
   13324:	strdeq	r3, [r1], -ip
   13328:	strdeq	r3, [r1], -ip
   1332c:	strdeq	r3, [r1], -ip
   13330:	strdeq	r3, [r1], -ip
   13334:	strdeq	r3, [r1], -ip
   13338:	strdeq	r3, [r1], -ip
   1333c:	strdeq	r3, [r1], -ip
   13340:	strdeq	r3, [r1], -ip
   13344:	strdeq	r3, [r1], -ip
   13348:	strdeq	r3, [r1], -ip
   1334c:	strdeq	r3, [r1], -ip
   13350:	strdeq	r3, [r1], -ip
   13354:	andeq	r3, r1, r0, ror #19
   13358:	andeq	r3, r1, r8, ror #19
   1335c:	andeq	r3, r1, r8, ror #19
   13360:	ldrdeq	r3, [r1], -r4
   13364:	andeq	r3, r1, r8, ror #19
   13368:	strdeq	r3, [r1], -r0
   1336c:	andeq	r3, r1, r8, ror #19
   13370:	andeq	r3, r1, r4, lsl #20
   13374:	andeq	r3, r1, r8, ror #19
   13378:	andeq	r3, r1, r8, ror #19
   1337c:	andeq	r3, r1, r8, ror #19
   13380:	strdeq	r3, [r1], -r0
   13384:	strdeq	r3, [r1], -r0
   13388:	strdeq	r3, [r1], -r0
   1338c:	strdeq	r3, [r1], -r0
   13390:	strdeq	r3, [r1], -r0
   13394:	strdeq	r3, [r1], -r0
   13398:	strdeq	r3, [r1], -r0
   1339c:	strdeq	r3, [r1], -r0
   133a0:	strdeq	r3, [r1], -r0
   133a4:	strdeq	r3, [r1], -r0
   133a8:	strdeq	r3, [r1], -r0
   133ac:	strdeq	r3, [r1], -r0
   133b0:	strdeq	r3, [r1], -r0
   133b4:	strdeq	r3, [r1], -r0
   133b8:	strdeq	r3, [r1], -r0
   133bc:	strdeq	r3, [r1], -r0
   133c0:	andeq	r3, r1, r8, ror #19
   133c4:	andeq	r3, r1, r8, ror #19
   133c8:	andeq	r3, r1, r8, ror #19
   133cc:	andeq	r3, r1, r8, ror #19
   133d0:			; <UNDEFINED> instruction: 0x000136b0
   133d4:	strdeq	r3, [r1], -ip
   133d8:	strdeq	r3, [r1], -r0
   133dc:	strdeq	r3, [r1], -r0
   133e0:	strdeq	r3, [r1], -r0
   133e4:	strdeq	r3, [r1], -r0
   133e8:	strdeq	r3, [r1], -r0
   133ec:	strdeq	r3, [r1], -r0
   133f0:	strdeq	r3, [r1], -r0
   133f4:	strdeq	r3, [r1], -r0
   133f8:	strdeq	r3, [r1], -r0
   133fc:	strdeq	r3, [r1], -r0
   13400:	strdeq	r3, [r1], -r0
   13404:	strdeq	r3, [r1], -r0
   13408:	strdeq	r3, [r1], -r0
   1340c:	strdeq	r3, [r1], -r0
   13410:	strdeq	r3, [r1], -r0
   13414:	strdeq	r3, [r1], -r0
   13418:	strdeq	r3, [r1], -r0
   1341c:	strdeq	r3, [r1], -r0
   13420:	strdeq	r3, [r1], -r0
   13424:	strdeq	r3, [r1], -r0
   13428:	strdeq	r3, [r1], -r0
   1342c:	strdeq	r3, [r1], -r0
   13430:	strdeq	r3, [r1], -r0
   13434:	strdeq	r3, [r1], -r0
   13438:	strdeq	r3, [r1], -r0
   1343c:	strdeq	r3, [r1], -r0
   13440:	andeq	r3, r1, r8, ror #19
   13444:	andeq	r3, r1, r4, lsl r9
   13448:	strdeq	r3, [r1], -r0
   1344c:	andeq	r3, r1, r8, ror #19
   13450:	strdeq	r3, [r1], -r0
   13454:	andeq	r3, r1, r8, ror #19
   13458:	strdeq	r3, [r1], -r0
   1345c:	strdeq	r3, [r1], -r0
   13460:	strdeq	r3, [r1], -r0
   13464:	strdeq	r3, [r1], -r0
   13468:	strdeq	r3, [r1], -r0
   1346c:	strdeq	r3, [r1], -r0
   13470:	strdeq	r3, [r1], -r0
   13474:	strdeq	r3, [r1], -r0
   13478:	strdeq	r3, [r1], -r0
   1347c:	strdeq	r3, [r1], -r0
   13480:	strdeq	r3, [r1], -r0
   13484:	strdeq	r3, [r1], -r0
   13488:	strdeq	r3, [r1], -r0
   1348c:	strdeq	r3, [r1], -r0
   13490:	strdeq	r3, [r1], -r0
   13494:	strdeq	r3, [r1], -r0
   13498:	strdeq	r3, [r1], -r0
   1349c:	strdeq	r3, [r1], -r0
   134a0:	strdeq	r3, [r1], -r0
   134a4:	strdeq	r3, [r1], -r0
   134a8:	strdeq	r3, [r1], -r0
   134ac:	strdeq	r3, [r1], -r0
   134b0:	strdeq	r3, [r1], -r0
   134b4:	strdeq	r3, [r1], -r0
   134b8:	strdeq	r3, [r1], -r0
   134bc:	strdeq	r3, [r1], -r0
   134c0:	andeq	r3, r1, ip, lsl #19
   134c4:	andeq	r3, r1, r8, ror #19
   134c8:	andeq	r3, r1, ip, lsl #19
   134cc:	ldrdeq	r3, [r1], -r4
   134d0:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   134d4:	cmp	r3, #0
   134d8:	beq	1369c <__assert_fail@plt+0x26f8>
   134dc:	ldrb	r3, [fp, #-34]	; 0xffffffde
   134e0:	cmp	r3, #0
   134e4:	bne	14544 <__assert_fail@plt+0x35a0>
   134e8:	mov	r3, #1
   134ec:	strb	r3, [fp, #-41]	; 0xffffffd7
   134f0:	ldr	r3, [fp, #4]
   134f4:	cmp	r3, #2
   134f8:	bne	135a8 <__assert_fail@plt+0x2604>
   134fc:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   13500:	eor	r3, r3, #1
   13504:	uxtb	r3, r3
   13508:	cmp	r3, #0
   1350c:	beq	135a8 <__assert_fail@plt+0x2604>
   13510:	ldr	r2, [fp, #-20]	; 0xffffffec
   13514:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13518:	cmp	r2, r3
   1351c:	bcs	13534 <__assert_fail@plt+0x2590>
   13520:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13524:	ldr	r3, [fp, #-20]	; 0xffffffec
   13528:	add	r3, r2, r3
   1352c:	mov	r2, #39	; 0x27
   13530:	strb	r2, [r3]
   13534:	ldr	r3, [fp, #-20]	; 0xffffffec
   13538:	add	r3, r3, #1
   1353c:	str	r3, [fp, #-20]	; 0xffffffec
   13540:	ldr	r2, [fp, #-20]	; 0xffffffec
   13544:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13548:	cmp	r2, r3
   1354c:	bcs	13564 <__assert_fail@plt+0x25c0>
   13550:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13554:	ldr	r3, [fp, #-20]	; 0xffffffec
   13558:	add	r3, r2, r3
   1355c:	mov	r2, #36	; 0x24
   13560:	strb	r2, [r3]
   13564:	ldr	r3, [fp, #-20]	; 0xffffffec
   13568:	add	r3, r3, #1
   1356c:	str	r3, [fp, #-20]	; 0xffffffec
   13570:	ldr	r2, [fp, #-20]	; 0xffffffec
   13574:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13578:	cmp	r2, r3
   1357c:	bcs	13594 <__assert_fail@plt+0x25f0>
   13580:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13584:	ldr	r3, [fp, #-20]	; 0xffffffec
   13588:	add	r3, r2, r3
   1358c:	mov	r2, #39	; 0x27
   13590:	strb	r2, [r3]
   13594:	ldr	r3, [fp, #-20]	; 0xffffffec
   13598:	add	r3, r3, #1
   1359c:	str	r3, [fp, #-20]	; 0xffffffec
   135a0:	mov	r3, #1
   135a4:	strb	r3, [fp, #-35]	; 0xffffffdd
   135a8:	ldr	r2, [fp, #-20]	; 0xffffffec
   135ac:	ldr	r3, [fp, #-92]	; 0xffffffa4
   135b0:	cmp	r2, r3
   135b4:	bcs	135cc <__assert_fail@plt+0x2628>
   135b8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   135bc:	ldr	r3, [fp, #-20]	; 0xffffffec
   135c0:	add	r3, r2, r3
   135c4:	mov	r2, #92	; 0x5c
   135c8:	strb	r2, [r3]
   135cc:	ldr	r3, [fp, #-20]	; 0xffffffec
   135d0:	add	r3, r3, #1
   135d4:	str	r3, [fp, #-20]	; 0xffffffec
   135d8:	ldr	r3, [fp, #4]
   135dc:	cmp	r3, #2
   135e0:	beq	13690 <__assert_fail@plt+0x26ec>
   135e4:	ldr	r3, [fp, #-16]
   135e8:	add	r2, r3, #1
   135ec:	ldr	r3, [fp, #-100]	; 0xffffff9c
   135f0:	cmp	r2, r3
   135f4:	bcs	13690 <__assert_fail@plt+0x26ec>
   135f8:	ldr	r3, [fp, #-16]
   135fc:	add	r3, r3, #1
   13600:	ldr	r2, [fp, #-96]	; 0xffffffa0
   13604:	add	r3, r2, r3
   13608:	ldrb	r3, [r3]
   1360c:	cmp	r3, #47	; 0x2f
   13610:	bls	13690 <__assert_fail@plt+0x26ec>
   13614:	ldr	r3, [fp, #-16]
   13618:	add	r3, r3, #1
   1361c:	ldr	r2, [fp, #-96]	; 0xffffffa0
   13620:	add	r3, r2, r3
   13624:	ldrb	r3, [r3]
   13628:	cmp	r3, #57	; 0x39
   1362c:	bhi	13690 <__assert_fail@plt+0x26ec>
   13630:	ldr	r2, [fp, #-20]	; 0xffffffec
   13634:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13638:	cmp	r2, r3
   1363c:	bcs	13654 <__assert_fail@plt+0x26b0>
   13640:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13644:	ldr	r3, [fp, #-20]	; 0xffffffec
   13648:	add	r3, r2, r3
   1364c:	mov	r2, #48	; 0x30
   13650:	strb	r2, [r3]
   13654:	ldr	r3, [fp, #-20]	; 0xffffffec
   13658:	add	r3, r3, #1
   1365c:	str	r3, [fp, #-20]	; 0xffffffec
   13660:	ldr	r2, [fp, #-20]	; 0xffffffec
   13664:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13668:	cmp	r2, r3
   1366c:	bcs	13684 <__assert_fail@plt+0x26e0>
   13670:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13674:	ldr	r3, [fp, #-20]	; 0xffffffec
   13678:	add	r3, r2, r3
   1367c:	mov	r2, #48	; 0x30
   13680:	strb	r2, [r3]
   13684:	ldr	r3, [fp, #-20]	; 0xffffffec
   13688:	add	r3, r3, #1
   1368c:	str	r3, [fp, #-20]	; 0xffffffec
   13690:	mov	r3, #48	; 0x30
   13694:	strb	r3, [fp, #-38]	; 0xffffffda
   13698:	b	140d8 <__assert_fail@plt+0x3134>
   1369c:	ldr	r3, [fp, #8]
   136a0:	and	r3, r3, #1
   136a4:	cmp	r3, #0
   136a8:	beq	140d8 <__assert_fail@plt+0x3134>
   136ac:	b	14374 <__assert_fail@plt+0x33d0>
   136b0:	ldr	r3, [fp, #4]
   136b4:	cmp	r3, #2
   136b8:	beq	136c8 <__assert_fail@plt+0x2724>
   136bc:	cmp	r3, #5
   136c0:	beq	136d8 <__assert_fail@plt+0x2734>
   136c4:	b	138bc <__assert_fail@plt+0x2918>
   136c8:	ldrb	r3, [fp, #-34]	; 0xffffffde
   136cc:	cmp	r3, #0
   136d0:	beq	138b0 <__assert_fail@plt+0x290c>
   136d4:	b	14580 <__assert_fail@plt+0x35dc>
   136d8:	ldr	r3, [fp, #8]
   136dc:	and	r3, r3, #4
   136e0:	cmp	r3, #0
   136e4:	beq	138b8 <__assert_fail@plt+0x2914>
   136e8:	ldr	r3, [fp, #-16]
   136ec:	add	r2, r3, #2
   136f0:	ldr	r3, [fp, #-100]	; 0xffffff9c
   136f4:	cmp	r2, r3
   136f8:	bcs	138b8 <__assert_fail@plt+0x2914>
   136fc:	ldr	r3, [fp, #-16]
   13700:	add	r3, r3, #1
   13704:	ldr	r2, [fp, #-96]	; 0xffffffa0
   13708:	add	r3, r2, r3
   1370c:	ldrb	r3, [r3]
   13710:	cmp	r3, #63	; 0x3f
   13714:	bne	138b8 <__assert_fail@plt+0x2914>
   13718:	ldr	r3, [fp, #-16]
   1371c:	add	r3, r3, #2
   13720:	ldr	r2, [fp, #-96]	; 0xffffffa0
   13724:	add	r3, r2, r3
   13728:	ldrb	r3, [r3]
   1372c:	sub	r3, r3, #33	; 0x21
   13730:	cmp	r3, #29
   13734:	ldrls	pc, [pc, r3, lsl #2]
   13738:	b	138a8 <__assert_fail@plt+0x2904>
   1373c:			; <UNDEFINED> instruction: 0x000137b4
   13740:	andeq	r3, r1, r8, lsr #17
   13744:	andeq	r3, r1, r8, lsr #17
   13748:	andeq	r3, r1, r8, lsr #17
   1374c:	andeq	r3, r1, r8, lsr #17
   13750:	andeq	r3, r1, r8, lsr #17
   13754:			; <UNDEFINED> instruction: 0x000137b4
   13758:			; <UNDEFINED> instruction: 0x000137b4
   1375c:			; <UNDEFINED> instruction: 0x000137b4
   13760:	andeq	r3, r1, r8, lsr #17
   13764:	andeq	r3, r1, r8, lsr #17
   13768:	andeq	r3, r1, r8, lsr #17
   1376c:			; <UNDEFINED> instruction: 0x000137b4
   13770:	andeq	r3, r1, r8, lsr #17
   13774:			; <UNDEFINED> instruction: 0x000137b4
   13778:	andeq	r3, r1, r8, lsr #17
   1377c:	andeq	r3, r1, r8, lsr #17
   13780:	andeq	r3, r1, r8, lsr #17
   13784:	andeq	r3, r1, r8, lsr #17
   13788:	andeq	r3, r1, r8, lsr #17
   1378c:	andeq	r3, r1, r8, lsr #17
   13790:	andeq	r3, r1, r8, lsr #17
   13794:	andeq	r3, r1, r8, lsr #17
   13798:	andeq	r3, r1, r8, lsr #17
   1379c:	andeq	r3, r1, r8, lsr #17
   137a0:	andeq	r3, r1, r8, lsr #17
   137a4:	andeq	r3, r1, r8, lsr #17
   137a8:			; <UNDEFINED> instruction: 0x000137b4
   137ac:			; <UNDEFINED> instruction: 0x000137b4
   137b0:			; <UNDEFINED> instruction: 0x000137b4
   137b4:	ldrb	r3, [fp, #-34]	; 0xffffffde
   137b8:	cmp	r3, #0
   137bc:	bne	1454c <__assert_fail@plt+0x35a8>
   137c0:	ldr	r3, [fp, #-16]
   137c4:	add	r3, r3, #2
   137c8:	ldr	r2, [fp, #-96]	; 0xffffffa0
   137cc:	add	r3, r2, r3
   137d0:	ldrb	r3, [r3]
   137d4:	strb	r3, [fp, #-38]	; 0xffffffda
   137d8:	ldr	r3, [fp, #-16]
   137dc:	add	r3, r3, #2
   137e0:	str	r3, [fp, #-16]
   137e4:	ldr	r2, [fp, #-20]	; 0xffffffec
   137e8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   137ec:	cmp	r2, r3
   137f0:	bcs	13808 <__assert_fail@plt+0x2864>
   137f4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   137f8:	ldr	r3, [fp, #-20]	; 0xffffffec
   137fc:	add	r3, r2, r3
   13800:	mov	r2, #63	; 0x3f
   13804:	strb	r2, [r3]
   13808:	ldr	r3, [fp, #-20]	; 0xffffffec
   1380c:	add	r3, r3, #1
   13810:	str	r3, [fp, #-20]	; 0xffffffec
   13814:	ldr	r2, [fp, #-20]	; 0xffffffec
   13818:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1381c:	cmp	r2, r3
   13820:	bcs	13838 <__assert_fail@plt+0x2894>
   13824:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13828:	ldr	r3, [fp, #-20]	; 0xffffffec
   1382c:	add	r3, r2, r3
   13830:	mov	r2, #34	; 0x22
   13834:	strb	r2, [r3]
   13838:	ldr	r3, [fp, #-20]	; 0xffffffec
   1383c:	add	r3, r3, #1
   13840:	str	r3, [fp, #-20]	; 0xffffffec
   13844:	ldr	r2, [fp, #-20]	; 0xffffffec
   13848:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1384c:	cmp	r2, r3
   13850:	bcs	13868 <__assert_fail@plt+0x28c4>
   13854:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13858:	ldr	r3, [fp, #-20]	; 0xffffffec
   1385c:	add	r3, r2, r3
   13860:	mov	r2, #34	; 0x22
   13864:	strb	r2, [r3]
   13868:	ldr	r3, [fp, #-20]	; 0xffffffec
   1386c:	add	r3, r3, #1
   13870:	str	r3, [fp, #-20]	; 0xffffffec
   13874:	ldr	r2, [fp, #-20]	; 0xffffffec
   13878:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1387c:	cmp	r2, r3
   13880:	bcs	13898 <__assert_fail@plt+0x28f4>
   13884:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13888:	ldr	r3, [fp, #-20]	; 0xffffffec
   1388c:	add	r3, r2, r3
   13890:	mov	r2, #63	; 0x3f
   13894:	strb	r2, [r3]
   13898:	ldr	r3, [fp, #-20]	; 0xffffffec
   1389c:	add	r3, r3, #1
   138a0:	str	r3, [fp, #-20]	; 0xffffffec
   138a4:	b	138ac <__assert_fail@plt+0x2908>
   138a8:	nop			; (mov r0, r0)
   138ac:	b	138b8 <__assert_fail@plt+0x2914>
   138b0:	nop			; (mov r0, r0)
   138b4:	b	14104 <__assert_fail@plt+0x3160>
   138b8:	nop			; (mov r0, r0)
   138bc:	b	14104 <__assert_fail@plt+0x3160>
   138c0:	mov	r3, #97	; 0x61
   138c4:	strb	r3, [fp, #-39]	; 0xffffffd9
   138c8:	b	13974 <__assert_fail@plt+0x29d0>
   138cc:	mov	r3, #98	; 0x62
   138d0:	strb	r3, [fp, #-39]	; 0xffffffd9
   138d4:	b	13974 <__assert_fail@plt+0x29d0>
   138d8:	mov	r3, #102	; 0x66
   138dc:	strb	r3, [fp, #-39]	; 0xffffffd9
   138e0:	b	13974 <__assert_fail@plt+0x29d0>
   138e4:	mov	r3, #110	; 0x6e
   138e8:	strb	r3, [fp, #-39]	; 0xffffffd9
   138ec:	b	1395c <__assert_fail@plt+0x29b8>
   138f0:	mov	r3, #114	; 0x72
   138f4:	strb	r3, [fp, #-39]	; 0xffffffd9
   138f8:	b	1395c <__assert_fail@plt+0x29b8>
   138fc:	mov	r3, #116	; 0x74
   13900:	strb	r3, [fp, #-39]	; 0xffffffd9
   13904:	b	1395c <__assert_fail@plt+0x29b8>
   13908:	mov	r3, #118	; 0x76
   1390c:	strb	r3, [fp, #-39]	; 0xffffffd9
   13910:	b	13974 <__assert_fail@plt+0x29d0>
   13914:	ldrb	r3, [fp, #-38]	; 0xffffffda
   13918:	strb	r3, [fp, #-39]	; 0xffffffd9
   1391c:	ldr	r3, [fp, #4]
   13920:	cmp	r3, #2
   13924:	bne	13938 <__assert_fail@plt+0x2994>
   13928:	ldrb	r3, [fp, #-34]	; 0xffffffde
   1392c:	cmp	r3, #0
   13930:	beq	1428c <__assert_fail@plt+0x32e8>
   13934:	b	14580 <__assert_fail@plt+0x35dc>
   13938:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   1393c:	cmp	r3, #0
   13940:	beq	1395c <__assert_fail@plt+0x29b8>
   13944:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13948:	cmp	r3, #0
   1394c:	beq	1395c <__assert_fail@plt+0x29b8>
   13950:	ldr	r3, [fp, #-32]	; 0xffffffe0
   13954:	cmp	r3, #0
   13958:	bne	14294 <__assert_fail@plt+0x32f0>
   1395c:	ldr	r3, [fp, #4]
   13960:	cmp	r3, #2
   13964:	bne	13974 <__assert_fail@plt+0x29d0>
   13968:	ldrb	r3, [fp, #-34]	; 0xffffffde
   1396c:	cmp	r3, #0
   13970:	bne	14554 <__assert_fail@plt+0x35b0>
   13974:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   13978:	cmp	r3, #0
   1397c:	beq	140e0 <__assert_fail@plt+0x313c>
   13980:	ldrb	r3, [fp, #-39]	; 0xffffffd9
   13984:	strb	r3, [fp, #-38]	; 0xffffffda
   13988:	b	1418c <__assert_fail@plt+0x31e8>
   1398c:	ldr	r3, [fp, #-100]	; 0xffffff9c
   13990:	cmn	r3, #1
   13994:	bne	139b8 <__assert_fail@plt+0x2a14>
   13998:	ldr	r3, [fp, #-96]	; 0xffffffa0
   1399c:	add	r3, r3, #1
   139a0:	ldrb	r3, [r3]
   139a4:	cmp	r3, #0
   139a8:	movne	r3, #1
   139ac:	moveq	r3, #0
   139b0:	uxtb	r3, r3
   139b4:	b	139cc <__assert_fail@plt+0x2a28>
   139b8:	ldr	r3, [fp, #-100]	; 0xffffff9c
   139bc:	cmp	r3, #1
   139c0:	movne	r3, #1
   139c4:	moveq	r3, #0
   139c8:	uxtb	r3, r3
   139cc:	cmp	r3, #0
   139d0:	bne	140e8 <__assert_fail@plt+0x3144>
   139d4:	ldr	r3, [fp, #-16]
   139d8:	cmp	r3, #0
   139dc:	bne	140f0 <__assert_fail@plt+0x314c>
   139e0:	mov	r3, #1
   139e4:	strb	r3, [fp, #-42]	; 0xffffffd6
   139e8:	ldr	r3, [fp, #4]
   139ec:	cmp	r3, #2
   139f0:	bne	140f8 <__assert_fail@plt+0x3154>
   139f4:	ldrb	r3, [fp, #-34]	; 0xffffffde
   139f8:	cmp	r3, #0
   139fc:	beq	140f8 <__assert_fail@plt+0x3154>
   13a00:	b	14580 <__assert_fail@plt+0x35dc>
   13a04:	mov	r3, #1
   13a08:	strb	r3, [fp, #-36]	; 0xffffffdc
   13a0c:	mov	r3, #1
   13a10:	strb	r3, [fp, #-42]	; 0xffffffd6
   13a14:	ldr	r3, [fp, #4]
   13a18:	cmp	r3, #2
   13a1c:	bne	14100 <__assert_fail@plt+0x315c>
   13a20:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13a24:	cmp	r3, #0
   13a28:	bne	1455c <__assert_fail@plt+0x35b8>
   13a2c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13a30:	cmp	r3, #0
   13a34:	beq	13a54 <__assert_fail@plt+0x2ab0>
   13a38:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13a3c:	cmp	r3, #0
   13a40:	bne	13a54 <__assert_fail@plt+0x2ab0>
   13a44:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13a48:	str	r3, [fp, #-24]	; 0xffffffe8
   13a4c:	mov	r3, #0
   13a50:	str	r3, [fp, #-92]	; 0xffffffa4
   13a54:	ldr	r2, [fp, #-20]	; 0xffffffec
   13a58:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13a5c:	cmp	r2, r3
   13a60:	bcs	13a78 <__assert_fail@plt+0x2ad4>
   13a64:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13a68:	ldr	r3, [fp, #-20]	; 0xffffffec
   13a6c:	add	r3, r2, r3
   13a70:	mov	r2, #39	; 0x27
   13a74:	strb	r2, [r3]
   13a78:	ldr	r3, [fp, #-20]	; 0xffffffec
   13a7c:	add	r3, r3, #1
   13a80:	str	r3, [fp, #-20]	; 0xffffffec
   13a84:	ldr	r2, [fp, #-20]	; 0xffffffec
   13a88:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13a8c:	cmp	r2, r3
   13a90:	bcs	13aa8 <__assert_fail@plt+0x2b04>
   13a94:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13a98:	ldr	r3, [fp, #-20]	; 0xffffffec
   13a9c:	add	r3, r2, r3
   13aa0:	mov	r2, #92	; 0x5c
   13aa4:	strb	r2, [r3]
   13aa8:	ldr	r3, [fp, #-20]	; 0xffffffec
   13aac:	add	r3, r3, #1
   13ab0:	str	r3, [fp, #-20]	; 0xffffffec
   13ab4:	ldr	r2, [fp, #-20]	; 0xffffffec
   13ab8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13abc:	cmp	r2, r3
   13ac0:	bcs	13ad8 <__assert_fail@plt+0x2b34>
   13ac4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13ac8:	ldr	r3, [fp, #-20]	; 0xffffffec
   13acc:	add	r3, r2, r3
   13ad0:	mov	r2, #39	; 0x27
   13ad4:	strb	r2, [r3]
   13ad8:	ldr	r3, [fp, #-20]	; 0xffffffec
   13adc:	add	r3, r3, #1
   13ae0:	str	r3, [fp, #-20]	; 0xffffffec
   13ae4:	mov	r3, #0
   13ae8:	strb	r3, [fp, #-35]	; 0xffffffdd
   13aec:	b	14100 <__assert_fail@plt+0x315c>
   13af0:	mov	r3, #1
   13af4:	strb	r3, [fp, #-42]	; 0xffffffd6
   13af8:	b	14104 <__assert_fail@plt+0x3160>
   13afc:	ldrb	r3, [fp, #-57]	; 0xffffffc7
   13b00:	cmp	r3, #0
   13b04:	beq	13b44 <__assert_fail@plt+0x2ba0>
   13b08:	mov	r3, #1
   13b0c:	str	r3, [fp, #-48]	; 0xffffffd0
   13b10:	bl	10e78 <__ctype_b_loc@plt>
   13b14:	mov	r3, r0
   13b18:	ldr	r2, [r3]
   13b1c:	ldrb	r3, [fp, #-38]	; 0xffffffda
   13b20:	lsl	r3, r3, #1
   13b24:	add	r3, r2, r3
   13b28:	ldrh	r3, [r3]
   13b2c:	and	r3, r3, #16384	; 0x4000
   13b30:	cmp	r3, #0
   13b34:	movne	r3, #1
   13b38:	moveq	r3, #0
   13b3c:	strb	r3, [fp, #-49]	; 0xffffffcf
   13b40:	b	13d90 <__assert_fail@plt+0x2dec>
   13b44:	sub	r3, fp, #76	; 0x4c
   13b48:	mov	r2, #8
   13b4c:	mov	r1, #0
   13b50:	mov	r0, r3
   13b54:	bl	10ed8 <memset@plt>
   13b58:	mov	r3, #0
   13b5c:	str	r3, [fp, #-48]	; 0xffffffd0
   13b60:	mov	r3, #1
   13b64:	strb	r3, [fp, #-49]	; 0xffffffcf
   13b68:	ldr	r3, [fp, #-100]	; 0xffffff9c
   13b6c:	cmn	r3, #1
   13b70:	bne	13b80 <__assert_fail@plt+0x2bdc>
   13b74:	ldr	r0, [fp, #-96]	; 0xffffffa0
   13b78:	bl	10e9c <strlen@plt>
   13b7c:	str	r0, [fp, #-100]	; 0xffffff9c
   13b80:	ldr	r2, [fp, #-16]
   13b84:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13b88:	add	r3, r2, r3
   13b8c:	ldr	r2, [fp, #-96]	; 0xffffffa0
   13b90:	add	r1, r2, r3
   13b94:	ldr	r2, [fp, #-16]
   13b98:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13b9c:	add	r3, r2, r3
   13ba0:	ldr	r2, [fp, #-100]	; 0xffffff9c
   13ba4:	sub	r2, r2, r3
   13ba8:	sub	r3, fp, #76	; 0x4c
   13bac:	sub	r0, fp, #80	; 0x50
   13bb0:	bl	179c4 <__assert_fail@plt+0x6a20>
   13bb4:	str	r0, [fp, #-64]	; 0xffffffc0
   13bb8:	ldr	r3, [fp, #-64]	; 0xffffffc0
   13bbc:	cmp	r3, #0
   13bc0:	beq	13d84 <__assert_fail@plt+0x2de0>
   13bc4:	ldr	r3, [fp, #-64]	; 0xffffffc0
   13bc8:	cmn	r3, #1
   13bcc:	bne	13bdc <__assert_fail@plt+0x2c38>
   13bd0:	mov	r3, #0
   13bd4:	strb	r3, [fp, #-49]	; 0xffffffcf
   13bd8:	b	13d90 <__assert_fail@plt+0x2dec>
   13bdc:	ldr	r3, [fp, #-64]	; 0xffffffc0
   13be0:	cmn	r3, #2
   13be4:	bne	13c3c <__assert_fail@plt+0x2c98>
   13be8:	mov	r3, #0
   13bec:	strb	r3, [fp, #-49]	; 0xffffffcf
   13bf0:	b	13c00 <__assert_fail@plt+0x2c5c>
   13bf4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13bf8:	add	r3, r3, #1
   13bfc:	str	r3, [fp, #-48]	; 0xffffffd0
   13c00:	ldr	r2, [fp, #-16]
   13c04:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13c08:	add	r2, r2, r3
   13c0c:	ldr	r3, [fp, #-100]	; 0xffffff9c
   13c10:	cmp	r2, r3
   13c14:	bcs	13d8c <__assert_fail@plt+0x2de8>
   13c18:	ldr	r2, [fp, #-16]
   13c1c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13c20:	add	r3, r2, r3
   13c24:	ldr	r2, [fp, #-96]	; 0xffffffa0
   13c28:	add	r3, r2, r3
   13c2c:	ldrb	r3, [r3]
   13c30:	cmp	r3, #0
   13c34:	bne	13bf4 <__assert_fail@plt+0x2c50>
   13c38:	b	13d8c <__assert_fail@plt+0x2de8>
   13c3c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13c40:	cmp	r3, #0
   13c44:	beq	13d38 <__assert_fail@plt+0x2d94>
   13c48:	ldr	r3, [fp, #4]
   13c4c:	cmp	r3, #2
   13c50:	bne	13d38 <__assert_fail@plt+0x2d94>
   13c54:	mov	r3, #1
   13c58:	str	r3, [fp, #-56]	; 0xffffffc8
   13c5c:	b	13d28 <__assert_fail@plt+0x2d84>
   13c60:	ldr	r2, [fp, #-16]
   13c64:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13c68:	add	r2, r2, r3
   13c6c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13c70:	add	r3, r2, r3
   13c74:	ldr	r2, [fp, #-96]	; 0xffffffa0
   13c78:	add	r3, r2, r3
   13c7c:	ldrb	r3, [r3]
   13c80:	sub	r3, r3, #91	; 0x5b
   13c84:	cmp	r3, #33	; 0x21
   13c88:	ldrls	pc, [pc, r3, lsl #2]
   13c8c:	b	13d18 <__assert_fail@plt+0x2d74>
   13c90:	andeq	r4, r1, r4, ror #10
   13c94:	andeq	r4, r1, r4, ror #10
   13c98:	andeq	r3, r1, r8, lsl sp
   13c9c:	andeq	r4, r1, r4, ror #10
   13ca0:	andeq	r3, r1, r8, lsl sp
   13ca4:	andeq	r4, r1, r4, ror #10
   13ca8:	andeq	r3, r1, r8, lsl sp
   13cac:	andeq	r3, r1, r8, lsl sp
   13cb0:	andeq	r3, r1, r8, lsl sp
   13cb4:	andeq	r3, r1, r8, lsl sp
   13cb8:	andeq	r3, r1, r8, lsl sp
   13cbc:	andeq	r3, r1, r8, lsl sp
   13cc0:	andeq	r3, r1, r8, lsl sp
   13cc4:	andeq	r3, r1, r8, lsl sp
   13cc8:	andeq	r3, r1, r8, lsl sp
   13ccc:	andeq	r3, r1, r8, lsl sp
   13cd0:	andeq	r3, r1, r8, lsl sp
   13cd4:	andeq	r3, r1, r8, lsl sp
   13cd8:	andeq	r3, r1, r8, lsl sp
   13cdc:	andeq	r3, r1, r8, lsl sp
   13ce0:	andeq	r3, r1, r8, lsl sp
   13ce4:	andeq	r3, r1, r8, lsl sp
   13ce8:	andeq	r3, r1, r8, lsl sp
   13cec:	andeq	r3, r1, r8, lsl sp
   13cf0:	andeq	r3, r1, r8, lsl sp
   13cf4:	andeq	r3, r1, r8, lsl sp
   13cf8:	andeq	r3, r1, r8, lsl sp
   13cfc:	andeq	r3, r1, r8, lsl sp
   13d00:	andeq	r3, r1, r8, lsl sp
   13d04:	andeq	r3, r1, r8, lsl sp
   13d08:	andeq	r3, r1, r8, lsl sp
   13d0c:	andeq	r3, r1, r8, lsl sp
   13d10:	andeq	r3, r1, r8, lsl sp
   13d14:	andeq	r4, r1, r4, ror #10
   13d18:	nop			; (mov r0, r0)
   13d1c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13d20:	add	r3, r3, #1
   13d24:	str	r3, [fp, #-56]	; 0xffffffc8
   13d28:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13d2c:	ldr	r3, [fp, #-64]	; 0xffffffc0
   13d30:	cmp	r2, r3
   13d34:	bcc	13c60 <__assert_fail@plt+0x2cbc>
   13d38:	ldr	r3, [fp, #-80]	; 0xffffffb0
   13d3c:	mov	r0, r3
   13d40:	bl	10db8 <iswprint@plt>
   13d44:	mov	r3, r0
   13d48:	cmp	r3, #0
   13d4c:	bne	13d58 <__assert_fail@plt+0x2db4>
   13d50:	mov	r3, #0
   13d54:	strb	r3, [fp, #-49]	; 0xffffffcf
   13d58:	ldr	r2, [fp, #-48]	; 0xffffffd0
   13d5c:	ldr	r3, [fp, #-64]	; 0xffffffc0
   13d60:	add	r3, r2, r3
   13d64:	str	r3, [fp, #-48]	; 0xffffffd0
   13d68:	sub	r3, fp, #76	; 0x4c
   13d6c:	mov	r0, r3
   13d70:	bl	10d7c <mbsinit@plt>
   13d74:	mov	r3, r0
   13d78:	cmp	r3, #0
   13d7c:	beq	13b80 <__assert_fail@plt+0x2bdc>
   13d80:	b	13d90 <__assert_fail@plt+0x2dec>
   13d84:	nop			; (mov r0, r0)
   13d88:	b	13d90 <__assert_fail@plt+0x2dec>
   13d8c:	nop			; (mov r0, r0)
   13d90:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   13d94:	strb	r3, [fp, #-42]	; 0xffffffd6
   13d98:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13d9c:	cmp	r3, #1
   13da0:	bhi	13dc4 <__assert_fail@plt+0x2e20>
   13da4:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   13da8:	cmp	r3, #0
   13dac:	beq	14104 <__assert_fail@plt+0x3160>
   13db0:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   13db4:	eor	r3, r3, #1
   13db8:	uxtb	r3, r3
   13dbc:	cmp	r3, #0
   13dc0:	beq	14104 <__assert_fail@plt+0x3160>
   13dc4:	ldr	r2, [fp, #-16]
   13dc8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13dcc:	add	r3, r2, r3
   13dd0:	str	r3, [fp, #-68]	; 0xffffffbc
   13dd4:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   13dd8:	cmp	r3, #0
   13ddc:	beq	13f9c <__assert_fail@plt+0x2ff8>
   13de0:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   13de4:	eor	r3, r3, #1
   13de8:	uxtb	r3, r3
   13dec:	cmp	r3, #0
   13df0:	beq	13f9c <__assert_fail@plt+0x2ff8>
   13df4:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13df8:	cmp	r3, #0
   13dfc:	bne	1456c <__assert_fail@plt+0x35c8>
   13e00:	mov	r3, #1
   13e04:	strb	r3, [fp, #-41]	; 0xffffffd7
   13e08:	ldr	r3, [fp, #4]
   13e0c:	cmp	r3, #2
   13e10:	bne	13ec0 <__assert_fail@plt+0x2f1c>
   13e14:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   13e18:	eor	r3, r3, #1
   13e1c:	uxtb	r3, r3
   13e20:	cmp	r3, #0
   13e24:	beq	13ec0 <__assert_fail@plt+0x2f1c>
   13e28:	ldr	r2, [fp, #-20]	; 0xffffffec
   13e2c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13e30:	cmp	r2, r3
   13e34:	bcs	13e4c <__assert_fail@plt+0x2ea8>
   13e38:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13e3c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13e40:	add	r3, r2, r3
   13e44:	mov	r2, #39	; 0x27
   13e48:	strb	r2, [r3]
   13e4c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13e50:	add	r3, r3, #1
   13e54:	str	r3, [fp, #-20]	; 0xffffffec
   13e58:	ldr	r2, [fp, #-20]	; 0xffffffec
   13e5c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13e60:	cmp	r2, r3
   13e64:	bcs	13e7c <__assert_fail@plt+0x2ed8>
   13e68:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13e6c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13e70:	add	r3, r2, r3
   13e74:	mov	r2, #36	; 0x24
   13e78:	strb	r2, [r3]
   13e7c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13e80:	add	r3, r3, #1
   13e84:	str	r3, [fp, #-20]	; 0xffffffec
   13e88:	ldr	r2, [fp, #-20]	; 0xffffffec
   13e8c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13e90:	cmp	r2, r3
   13e94:	bcs	13eac <__assert_fail@plt+0x2f08>
   13e98:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13e9c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13ea0:	add	r3, r2, r3
   13ea4:	mov	r2, #39	; 0x27
   13ea8:	strb	r2, [r3]
   13eac:	ldr	r3, [fp, #-20]	; 0xffffffec
   13eb0:	add	r3, r3, #1
   13eb4:	str	r3, [fp, #-20]	; 0xffffffec
   13eb8:	mov	r3, #1
   13ebc:	strb	r3, [fp, #-35]	; 0xffffffdd
   13ec0:	ldr	r2, [fp, #-20]	; 0xffffffec
   13ec4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13ec8:	cmp	r2, r3
   13ecc:	bcs	13ee4 <__assert_fail@plt+0x2f40>
   13ed0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13ed4:	ldr	r3, [fp, #-20]	; 0xffffffec
   13ed8:	add	r3, r2, r3
   13edc:	mov	r2, #92	; 0x5c
   13ee0:	strb	r2, [r3]
   13ee4:	ldr	r3, [fp, #-20]	; 0xffffffec
   13ee8:	add	r3, r3, #1
   13eec:	str	r3, [fp, #-20]	; 0xffffffec
   13ef0:	ldr	r2, [fp, #-20]	; 0xffffffec
   13ef4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13ef8:	cmp	r2, r3
   13efc:	bcs	13f24 <__assert_fail@plt+0x2f80>
   13f00:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13f04:	ldr	r3, [fp, #-20]	; 0xffffffec
   13f08:	add	r3, r2, r3
   13f0c:	ldrb	r2, [fp, #-38]	; 0xffffffda
   13f10:	lsr	r2, r2, #6
   13f14:	uxtb	r2, r2
   13f18:	add	r2, r2, #48	; 0x30
   13f1c:	uxtb	r2, r2
   13f20:	strb	r2, [r3]
   13f24:	ldr	r3, [fp, #-20]	; 0xffffffec
   13f28:	add	r3, r3, #1
   13f2c:	str	r3, [fp, #-20]	; 0xffffffec
   13f30:	ldr	r2, [fp, #-20]	; 0xffffffec
   13f34:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13f38:	cmp	r2, r3
   13f3c:	bcs	13f6c <__assert_fail@plt+0x2fc8>
   13f40:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13f44:	ldr	r3, [fp, #-20]	; 0xffffffec
   13f48:	add	r3, r2, r3
   13f4c:	ldrb	r2, [fp, #-38]	; 0xffffffda
   13f50:	lsr	r2, r2, #3
   13f54:	uxtb	r2, r2
   13f58:	and	r2, r2, #7
   13f5c:	uxtb	r2, r2
   13f60:	add	r2, r2, #48	; 0x30
   13f64:	uxtb	r2, r2
   13f68:	strb	r2, [r3]
   13f6c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13f70:	add	r3, r3, #1
   13f74:	str	r3, [fp, #-20]	; 0xffffffec
   13f78:	ldrb	r3, [fp, #-38]	; 0xffffffda
   13f7c:	and	r3, r3, #7
   13f80:	uxtb	r3, r3
   13f84:	add	r3, r3, #48	; 0x30
   13f88:	strb	r3, [fp, #-38]	; 0xffffffda
   13f8c:	b	13fe0 <__assert_fail@plt+0x303c>
   13f90:	andeq	r8, r1, r4, lsl #28
   13f94:	andeq	r8, r1, ip, lsl #28
   13f98:	andeq	r8, r1, r8, lsl #28
   13f9c:	ldrb	r3, [fp, #-40]	; 0xffffffd8
   13fa0:	cmp	r3, #0
   13fa4:	beq	13fe0 <__assert_fail@plt+0x303c>
   13fa8:	ldr	r2, [fp, #-20]	; 0xffffffec
   13fac:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13fb0:	cmp	r2, r3
   13fb4:	bcs	13fcc <__assert_fail@plt+0x3028>
   13fb8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13fbc:	ldr	r3, [fp, #-20]	; 0xffffffec
   13fc0:	add	r3, r2, r3
   13fc4:	mov	r2, #92	; 0x5c
   13fc8:	strb	r2, [r3]
   13fcc:	ldr	r3, [fp, #-20]	; 0xffffffec
   13fd0:	add	r3, r3, #1
   13fd4:	str	r3, [fp, #-20]	; 0xffffffec
   13fd8:	mov	r3, #0
   13fdc:	strb	r3, [fp, #-40]	; 0xffffffd8
   13fe0:	ldr	r3, [fp, #-16]
   13fe4:	add	r2, r3, #1
   13fe8:	ldr	r3, [fp, #-68]	; 0xffffffbc
   13fec:	cmp	r2, r3
   13ff0:	bcs	140d0 <__assert_fail@plt+0x312c>
   13ff4:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   13ff8:	cmp	r3, #0
   13ffc:	beq	1407c <__assert_fail@plt+0x30d8>
   14000:	ldrb	r3, [fp, #-41]	; 0xffffffd7
   14004:	eor	r3, r3, #1
   14008:	uxtb	r3, r3
   1400c:	cmp	r3, #0
   14010:	beq	1407c <__assert_fail@plt+0x30d8>
   14014:	ldr	r2, [fp, #-20]	; 0xffffffec
   14018:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1401c:	cmp	r2, r3
   14020:	bcs	14038 <__assert_fail@plt+0x3094>
   14024:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14028:	ldr	r3, [fp, #-20]	; 0xffffffec
   1402c:	add	r3, r2, r3
   14030:	mov	r2, #39	; 0x27
   14034:	strb	r2, [r3]
   14038:	ldr	r3, [fp, #-20]	; 0xffffffec
   1403c:	add	r3, r3, #1
   14040:	str	r3, [fp, #-20]	; 0xffffffec
   14044:	ldr	r2, [fp, #-20]	; 0xffffffec
   14048:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1404c:	cmp	r2, r3
   14050:	bcs	14068 <__assert_fail@plt+0x30c4>
   14054:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14058:	ldr	r3, [fp, #-20]	; 0xffffffec
   1405c:	add	r3, r2, r3
   14060:	mov	r2, #39	; 0x27
   14064:	strb	r2, [r3]
   14068:	ldr	r3, [fp, #-20]	; 0xffffffec
   1406c:	add	r3, r3, #1
   14070:	str	r3, [fp, #-20]	; 0xffffffec
   14074:	mov	r3, #0
   14078:	strb	r3, [fp, #-35]	; 0xffffffdd
   1407c:	ldr	r2, [fp, #-20]	; 0xffffffec
   14080:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14084:	cmp	r2, r3
   14088:	bcs	140a0 <__assert_fail@plt+0x30fc>
   1408c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14090:	ldr	r3, [fp, #-20]	; 0xffffffec
   14094:	add	r3, r2, r3
   14098:	ldrb	r2, [fp, #-38]	; 0xffffffda
   1409c:	strb	r2, [r3]
   140a0:	ldr	r3, [fp, #-20]	; 0xffffffec
   140a4:	add	r3, r3, #1
   140a8:	str	r3, [fp, #-20]	; 0xffffffec
   140ac:	ldr	r3, [fp, #-16]
   140b0:	add	r3, r3, #1
   140b4:	str	r3, [fp, #-16]
   140b8:	ldr	r2, [fp, #-96]	; 0xffffffa0
   140bc:	ldr	r3, [fp, #-16]
   140c0:	add	r3, r2, r3
   140c4:	ldrb	r3, [r3]
   140c8:	strb	r3, [fp, #-38]	; 0xffffffda
   140cc:	b	13dd4 <__assert_fail@plt+0x2e30>
   140d0:	nop			; (mov r0, r0)
   140d4:	b	142a0 <__assert_fail@plt+0x32fc>
   140d8:	nop			; (mov r0, r0)
   140dc:	b	14104 <__assert_fail@plt+0x3160>
   140e0:	nop			; (mov r0, r0)
   140e4:	b	14104 <__assert_fail@plt+0x3160>
   140e8:	nop			; (mov r0, r0)
   140ec:	b	14104 <__assert_fail@plt+0x3160>
   140f0:	nop			; (mov r0, r0)
   140f4:	b	14104 <__assert_fail@plt+0x3160>
   140f8:	nop			; (mov r0, r0)
   140fc:	b	14104 <__assert_fail@plt+0x3160>
   14100:	nop			; (mov r0, r0)
   14104:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   14108:	eor	r3, r3, #1
   1410c:	uxtb	r3, r3
   14110:	cmp	r3, #0
   14114:	bne	14124 <__assert_fail@plt+0x3180>
   14118:	ldr	r3, [fp, #4]
   1411c:	cmp	r3, #2
   14120:	bne	14138 <__assert_fail@plt+0x3194>
   14124:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14128:	eor	r3, r3, #1
   1412c:	uxtb	r3, r3
   14130:	cmp	r3, #0
   14134:	bne	14178 <__assert_fail@plt+0x31d4>
   14138:	ldr	r3, [fp, #12]
   1413c:	cmp	r3, #0
   14140:	beq	14178 <__assert_fail@plt+0x31d4>
   14144:	ldrb	r3, [fp, #-38]	; 0xffffffda
   14148:	lsr	r3, r3, #5
   1414c:	uxtb	r3, r3
   14150:	lsl	r3, r3, #2
   14154:	ldr	r2, [fp, #12]
   14158:	add	r3, r2, r3
   1415c:	ldr	r2, [r3]
   14160:	ldrb	r3, [fp, #-38]	; 0xffffffda
   14164:	and	r3, r3, #31
   14168:	lsr	r3, r2, r3
   1416c:	and	r3, r3, #1
   14170:	cmp	r3, #0
   14174:	bne	1418c <__assert_fail@plt+0x31e8>
   14178:	ldrb	r3, [fp, #-40]	; 0xffffffd8
   1417c:	eor	r3, r3, #1
   14180:	uxtb	r3, r3
   14184:	cmp	r3, #0
   14188:	bne	1429c <__assert_fail@plt+0x32f8>
   1418c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14190:	cmp	r3, #0
   14194:	bne	14574 <__assert_fail@plt+0x35d0>
   14198:	mov	r3, #1
   1419c:	strb	r3, [fp, #-41]	; 0xffffffd7
   141a0:	ldr	r3, [fp, #4]
   141a4:	cmp	r3, #2
   141a8:	bne	14258 <__assert_fail@plt+0x32b4>
   141ac:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   141b0:	eor	r3, r3, #1
   141b4:	uxtb	r3, r3
   141b8:	cmp	r3, #0
   141bc:	beq	14258 <__assert_fail@plt+0x32b4>
   141c0:	ldr	r2, [fp, #-20]	; 0xffffffec
   141c4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   141c8:	cmp	r2, r3
   141cc:	bcs	141e4 <__assert_fail@plt+0x3240>
   141d0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   141d4:	ldr	r3, [fp, #-20]	; 0xffffffec
   141d8:	add	r3, r2, r3
   141dc:	mov	r2, #39	; 0x27
   141e0:	strb	r2, [r3]
   141e4:	ldr	r3, [fp, #-20]	; 0xffffffec
   141e8:	add	r3, r3, #1
   141ec:	str	r3, [fp, #-20]	; 0xffffffec
   141f0:	ldr	r2, [fp, #-20]	; 0xffffffec
   141f4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   141f8:	cmp	r2, r3
   141fc:	bcs	14214 <__assert_fail@plt+0x3270>
   14200:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14204:	ldr	r3, [fp, #-20]	; 0xffffffec
   14208:	add	r3, r2, r3
   1420c:	mov	r2, #36	; 0x24
   14210:	strb	r2, [r3]
   14214:	ldr	r3, [fp, #-20]	; 0xffffffec
   14218:	add	r3, r3, #1
   1421c:	str	r3, [fp, #-20]	; 0xffffffec
   14220:	ldr	r2, [fp, #-20]	; 0xffffffec
   14224:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14228:	cmp	r2, r3
   1422c:	bcs	14244 <__assert_fail@plt+0x32a0>
   14230:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14234:	ldr	r3, [fp, #-20]	; 0xffffffec
   14238:	add	r3, r2, r3
   1423c:	mov	r2, #39	; 0x27
   14240:	strb	r2, [r3]
   14244:	ldr	r3, [fp, #-20]	; 0xffffffec
   14248:	add	r3, r3, #1
   1424c:	str	r3, [fp, #-20]	; 0xffffffec
   14250:	mov	r3, #1
   14254:	strb	r3, [fp, #-35]	; 0xffffffdd
   14258:	ldr	r2, [fp, #-20]	; 0xffffffec
   1425c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14260:	cmp	r2, r3
   14264:	bcs	1427c <__assert_fail@plt+0x32d8>
   14268:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1426c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14270:	add	r3, r2, r3
   14274:	mov	r2, #92	; 0x5c
   14278:	strb	r2, [r3]
   1427c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14280:	add	r3, r3, #1
   14284:	str	r3, [fp, #-20]	; 0xffffffec
   14288:	b	142a0 <__assert_fail@plt+0x32fc>
   1428c:	nop			; (mov r0, r0)
   14290:	b	142a0 <__assert_fail@plt+0x32fc>
   14294:	nop			; (mov r0, r0)
   14298:	b	142a0 <__assert_fail@plt+0x32fc>
   1429c:	nop			; (mov r0, r0)
   142a0:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   142a4:	cmp	r3, #0
   142a8:	beq	14328 <__assert_fail@plt+0x3384>
   142ac:	ldrb	r3, [fp, #-41]	; 0xffffffd7
   142b0:	eor	r3, r3, #1
   142b4:	uxtb	r3, r3
   142b8:	cmp	r3, #0
   142bc:	beq	14328 <__assert_fail@plt+0x3384>
   142c0:	ldr	r2, [fp, #-20]	; 0xffffffec
   142c4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   142c8:	cmp	r2, r3
   142cc:	bcs	142e4 <__assert_fail@plt+0x3340>
   142d0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   142d4:	ldr	r3, [fp, #-20]	; 0xffffffec
   142d8:	add	r3, r2, r3
   142dc:	mov	r2, #39	; 0x27
   142e0:	strb	r2, [r3]
   142e4:	ldr	r3, [fp, #-20]	; 0xffffffec
   142e8:	add	r3, r3, #1
   142ec:	str	r3, [fp, #-20]	; 0xffffffec
   142f0:	ldr	r2, [fp, #-20]	; 0xffffffec
   142f4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   142f8:	cmp	r2, r3
   142fc:	bcs	14314 <__assert_fail@plt+0x3370>
   14300:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14304:	ldr	r3, [fp, #-20]	; 0xffffffec
   14308:	add	r3, r2, r3
   1430c:	mov	r2, #39	; 0x27
   14310:	strb	r2, [r3]
   14314:	ldr	r3, [fp, #-20]	; 0xffffffec
   14318:	add	r3, r3, #1
   1431c:	str	r3, [fp, #-20]	; 0xffffffec
   14320:	mov	r3, #0
   14324:	strb	r3, [fp, #-35]	; 0xffffffdd
   14328:	ldr	r2, [fp, #-20]	; 0xffffffec
   1432c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14330:	cmp	r2, r3
   14334:	bcs	1434c <__assert_fail@plt+0x33a8>
   14338:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1433c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14340:	add	r3, r2, r3
   14344:	ldrb	r2, [fp, #-38]	; 0xffffffda
   14348:	strb	r2, [r3]
   1434c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14350:	add	r3, r3, #1
   14354:	str	r3, [fp, #-20]	; 0xffffffec
   14358:	ldrb	r3, [fp, #-42]	; 0xffffffd6
   1435c:	eor	r3, r3, #1
   14360:	uxtb	r3, r3
   14364:	cmp	r3, #0
   14368:	beq	14374 <__assert_fail@plt+0x33d0>
   1436c:	mov	r3, #0
   14370:	strb	r3, [fp, #-37]	; 0xffffffdb
   14374:	ldr	r3, [fp, #-16]
   14378:	add	r3, r3, #1
   1437c:	str	r3, [fp, #-16]
   14380:	ldr	r3, [fp, #-100]	; 0xffffff9c
   14384:	cmn	r3, #1
   14388:	bne	143b0 <__assert_fail@plt+0x340c>
   1438c:	ldr	r2, [fp, #-96]	; 0xffffffa0
   14390:	ldr	r3, [fp, #-16]
   14394:	add	r3, r2, r3
   14398:	ldrb	r3, [r3]
   1439c:	cmp	r3, #0
   143a0:	movne	r3, #1
   143a4:	moveq	r3, #0
   143a8:	uxtb	r3, r3
   143ac:	b	143c8 <__assert_fail@plt+0x3424>
   143b0:	ldr	r2, [fp, #-16]
   143b4:	ldr	r3, [fp, #-100]	; 0xffffff9c
   143b8:	cmp	r2, r3
   143bc:	movne	r3, #1
   143c0:	moveq	r3, #0
   143c4:	uxtb	r3, r3
   143c8:	cmp	r3, #0
   143cc:	bne	131f4 <__assert_fail@plt+0x2250>
   143d0:	ldr	r3, [fp, #-20]	; 0xffffffec
   143d4:	cmp	r3, #0
   143d8:	bne	143f4 <__assert_fail@plt+0x3450>
   143dc:	ldr	r3, [fp, #4]
   143e0:	cmp	r3, #2
   143e4:	bne	143f4 <__assert_fail@plt+0x3450>
   143e8:	ldrb	r3, [fp, #-34]	; 0xffffffde
   143ec:	cmp	r3, #0
   143f0:	bne	1457c <__assert_fail@plt+0x35d8>
   143f4:	ldr	r3, [fp, #4]
   143f8:	cmp	r3, #2
   143fc:	bne	1449c <__assert_fail@plt+0x34f8>
   14400:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14404:	eor	r3, r3, #1
   14408:	uxtb	r3, r3
   1440c:	cmp	r3, #0
   14410:	beq	1449c <__assert_fail@plt+0x34f8>
   14414:	ldrb	r3, [fp, #-36]	; 0xffffffdc
   14418:	cmp	r3, #0
   1441c:	beq	1449c <__assert_fail@plt+0x34f8>
   14420:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   14424:	cmp	r3, #0
   14428:	beq	14470 <__assert_fail@plt+0x34cc>
   1442c:	ldr	r3, [fp, #20]
   14430:	str	r3, [sp, #16]
   14434:	ldr	r3, [fp, #16]
   14438:	str	r3, [sp, #12]
   1443c:	ldr	r3, [fp, #12]
   14440:	str	r3, [sp, #8]
   14444:	ldr	r3, [fp, #8]
   14448:	str	r3, [sp, #4]
   1444c:	mov	r3, #5
   14450:	str	r3, [sp]
   14454:	ldr	r3, [fp, #-100]	; 0xffffff9c
   14458:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1445c:	ldr	r1, [fp, #-24]	; 0xffffffe8
   14460:	ldr	r0, [fp, #-88]	; 0xffffffa8
   14464:	bl	12f44 <__assert_fail@plt+0x1fa0>
   14468:	mov	r3, r0
   1446c:	b	145e4 <__assert_fail@plt+0x3640>
   14470:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14474:	cmp	r3, #0
   14478:	bne	1449c <__assert_fail@plt+0x34f8>
   1447c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14480:	cmp	r3, #0
   14484:	beq	1449c <__assert_fail@plt+0x34f8>
   14488:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1448c:	str	r3, [fp, #-92]	; 0xffffffa4
   14490:	mov	r3, #0
   14494:	str	r3, [fp, #-20]	; 0xffffffec
   14498:	b	12fd0 <__assert_fail@plt+0x202c>
   1449c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   144a0:	cmp	r3, #0
   144a4:	beq	14510 <__assert_fail@plt+0x356c>
   144a8:	ldrb	r3, [fp, #-34]	; 0xffffffde
   144ac:	eor	r3, r3, #1
   144b0:	uxtb	r3, r3
   144b4:	cmp	r3, #0
   144b8:	beq	14510 <__assert_fail@plt+0x356c>
   144bc:	b	14500 <__assert_fail@plt+0x355c>
   144c0:	ldr	r2, [fp, #-20]	; 0xffffffec
   144c4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   144c8:	cmp	r2, r3
   144cc:	bcs	144e8 <__assert_fail@plt+0x3544>
   144d0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   144d4:	ldr	r3, [fp, #-20]	; 0xffffffec
   144d8:	add	r3, r2, r3
   144dc:	ldr	r2, [fp, #-28]	; 0xffffffe4
   144e0:	ldrb	r2, [r2]
   144e4:	strb	r2, [r3]
   144e8:	ldr	r3, [fp, #-20]	; 0xffffffec
   144ec:	add	r3, r3, #1
   144f0:	str	r3, [fp, #-20]	; 0xffffffec
   144f4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   144f8:	add	r3, r3, #1
   144fc:	str	r3, [fp, #-28]	; 0xffffffe4
   14500:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14504:	ldrb	r3, [r3]
   14508:	cmp	r3, #0
   1450c:	bne	144c0 <__assert_fail@plt+0x351c>
   14510:	ldr	r2, [fp, #-20]	; 0xffffffec
   14514:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14518:	cmp	r2, r3
   1451c:	bcs	14534 <__assert_fail@plt+0x3590>
   14520:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14524:	ldr	r3, [fp, #-20]	; 0xffffffec
   14528:	add	r3, r2, r3
   1452c:	mov	r2, #0
   14530:	strb	r2, [r3]
   14534:	ldr	r3, [fp, #-20]	; 0xffffffec
   14538:	b	145e4 <__assert_fail@plt+0x3640>
   1453c:	nop			; (mov r0, r0)
   14540:	b	14580 <__assert_fail@plt+0x35dc>
   14544:	nop			; (mov r0, r0)
   14548:	b	14580 <__assert_fail@plt+0x35dc>
   1454c:	nop			; (mov r0, r0)
   14550:	b	14580 <__assert_fail@plt+0x35dc>
   14554:	nop			; (mov r0, r0)
   14558:	b	14580 <__assert_fail@plt+0x35dc>
   1455c:	nop			; (mov r0, r0)
   14560:	b	14580 <__assert_fail@plt+0x35dc>
   14564:	nop			; (mov r0, r0)
   14568:	b	14580 <__assert_fail@plt+0x35dc>
   1456c:	nop			; (mov r0, r0)
   14570:	b	14580 <__assert_fail@plt+0x35dc>
   14574:	nop			; (mov r0, r0)
   14578:	b	14580 <__assert_fail@plt+0x35dc>
   1457c:	nop			; (mov r0, r0)
   14580:	ldr	r3, [fp, #4]
   14584:	cmp	r3, #2
   14588:	bne	145a0 <__assert_fail@plt+0x35fc>
   1458c:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   14590:	cmp	r3, #0
   14594:	beq	145a0 <__assert_fail@plt+0x35fc>
   14598:	mov	r3, #4
   1459c:	str	r3, [fp, #4]
   145a0:	ldr	r3, [fp, #8]
   145a4:	bic	r3, r3, #2
   145a8:	ldr	r2, [fp, #20]
   145ac:	str	r2, [sp, #16]
   145b0:	ldr	r2, [fp, #16]
   145b4:	str	r2, [sp, #12]
   145b8:	mov	r2, #0
   145bc:	str	r2, [sp, #8]
   145c0:	str	r3, [sp, #4]
   145c4:	ldr	r3, [fp, #4]
   145c8:	str	r3, [sp]
   145cc:	ldr	r3, [fp, #-100]	; 0xffffff9c
   145d0:	ldr	r2, [fp, #-96]	; 0xffffffa0
   145d4:	ldr	r1, [fp, #-92]	; 0xffffffa4
   145d8:	ldr	r0, [fp, #-88]	; 0xffffffa8
   145dc:	bl	12f44 <__assert_fail@plt+0x1fa0>
   145e0:	mov	r3, r0
   145e4:	mov	r0, r3
   145e8:	sub	sp, fp, #8
   145ec:	pop	{r4, fp, pc}
   145f0:	push	{fp, lr}
   145f4:	add	fp, sp, #4
   145f8:	sub	sp, sp, #56	; 0x38
   145fc:	str	r0, [fp, #-24]	; 0xffffffe8
   14600:	str	r1, [fp, #-28]	; 0xffffffe4
   14604:	str	r2, [fp, #-32]	; 0xffffffe0
   14608:	str	r3, [fp, #-36]	; 0xffffffdc
   1460c:	ldr	r3, [fp, #4]
   14610:	cmp	r3, #0
   14614:	beq	14620 <__assert_fail@plt+0x367c>
   14618:	ldr	r3, [fp, #4]
   1461c:	b	14624 <__assert_fail@plt+0x3680>
   14620:	ldr	r3, [pc, #132]	; 146ac <__assert_fail@plt+0x3708>
   14624:	str	r3, [fp, #-8]
   14628:	bl	10ec0 <__errno_location@plt>
   1462c:	mov	r3, r0
   14630:	ldr	r3, [r3]
   14634:	str	r3, [fp, #-12]
   14638:	ldr	r3, [fp, #-8]
   1463c:	ldr	r3, [r3]
   14640:	ldr	r2, [fp, #-8]
   14644:	ldr	r2, [r2, #4]
   14648:	ldr	r1, [fp, #-8]
   1464c:	add	r1, r1, #8
   14650:	ldr	r0, [fp, #-8]
   14654:	ldr	r0, [r0, #40]	; 0x28
   14658:	ldr	ip, [fp, #-8]
   1465c:	ldr	ip, [ip, #44]	; 0x2c
   14660:	str	ip, [sp, #16]
   14664:	str	r0, [sp, #12]
   14668:	str	r1, [sp, #8]
   1466c:	str	r2, [sp, #4]
   14670:	str	r3, [sp]
   14674:	ldr	r3, [fp, #-36]	; 0xffffffdc
   14678:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1467c:	ldr	r1, [fp, #-28]	; 0xffffffe4
   14680:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14684:	bl	12f44 <__assert_fail@plt+0x1fa0>
   14688:	str	r0, [fp, #-16]
   1468c:	bl	10ec0 <__errno_location@plt>
   14690:	mov	r2, r0
   14694:	ldr	r3, [fp, #-12]
   14698:	str	r3, [r2]
   1469c:	ldr	r3, [fp, #-16]
   146a0:	mov	r0, r3
   146a4:	sub	sp, fp, #4
   146a8:	pop	{fp, pc}
   146ac:	muleq	r2, ip, r1
   146b0:	push	{fp, lr}
   146b4:	add	fp, sp, #4
   146b8:	sub	sp, sp, #16
   146bc:	str	r0, [fp, #-8]
   146c0:	str	r1, [fp, #-12]
   146c4:	str	r2, [fp, #-16]
   146c8:	ldr	r3, [fp, #-16]
   146cc:	mov	r2, #0
   146d0:	ldr	r1, [fp, #-12]
   146d4:	ldr	r0, [fp, #-8]
   146d8:	bl	146ec <__assert_fail@plt+0x3748>
   146dc:	mov	r3, r0
   146e0:	mov	r0, r3
   146e4:	sub	sp, fp, #4
   146e8:	pop	{fp, pc}
   146ec:	push	{fp, lr}
   146f0:	add	fp, sp, #4
   146f4:	sub	sp, sp, #64	; 0x40
   146f8:	str	r0, [fp, #-32]	; 0xffffffe0
   146fc:	str	r1, [fp, #-36]	; 0xffffffdc
   14700:	str	r2, [fp, #-40]	; 0xffffffd8
   14704:	str	r3, [fp, #-44]	; 0xffffffd4
   14708:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1470c:	cmp	r3, #0
   14710:	beq	1471c <__assert_fail@plt+0x3778>
   14714:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14718:	b	14720 <__assert_fail@plt+0x377c>
   1471c:	ldr	r3, [pc, #292]	; 14848 <__assert_fail@plt+0x38a4>
   14720:	str	r3, [fp, #-8]
   14724:	bl	10ec0 <__errno_location@plt>
   14728:	mov	r3, r0
   1472c:	ldr	r3, [r3]
   14730:	str	r3, [fp, #-12]
   14734:	ldr	r3, [fp, #-8]
   14738:	ldr	r3, [r3, #4]
   1473c:	ldr	r2, [fp, #-40]	; 0xffffffd8
   14740:	cmp	r2, #0
   14744:	moveq	r2, #1
   14748:	movne	r2, #0
   1474c:	uxtb	r2, r2
   14750:	orr	r3, r3, r2
   14754:	str	r3, [fp, #-16]
   14758:	ldr	r3, [fp, #-8]
   1475c:	ldr	r3, [r3]
   14760:	ldr	r2, [fp, #-8]
   14764:	add	r2, r2, #8
   14768:	ldr	r1, [fp, #-8]
   1476c:	ldr	r1, [r1, #40]	; 0x28
   14770:	ldr	r0, [fp, #-8]
   14774:	ldr	r0, [r0, #44]	; 0x2c
   14778:	str	r0, [sp, #16]
   1477c:	str	r1, [sp, #12]
   14780:	str	r2, [sp, #8]
   14784:	ldr	r2, [fp, #-16]
   14788:	str	r2, [sp, #4]
   1478c:	str	r3, [sp]
   14790:	ldr	r3, [fp, #-36]	; 0xffffffdc
   14794:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14798:	mov	r1, #0
   1479c:	mov	r0, #0
   147a0:	bl	12f44 <__assert_fail@plt+0x1fa0>
   147a4:	mov	r3, r0
   147a8:	add	r3, r3, #1
   147ac:	str	r3, [fp, #-20]	; 0xffffffec
   147b0:	ldr	r0, [fp, #-20]	; 0xffffffec
   147b4:	bl	159e8 <__assert_fail@plt+0x4a44>
   147b8:	mov	r3, r0
   147bc:	str	r3, [fp, #-24]	; 0xffffffe8
   147c0:	ldr	r3, [fp, #-8]
   147c4:	ldr	r3, [r3]
   147c8:	ldr	r2, [fp, #-8]
   147cc:	add	r2, r2, #8
   147d0:	ldr	r1, [fp, #-8]
   147d4:	ldr	r1, [r1, #40]	; 0x28
   147d8:	ldr	r0, [fp, #-8]
   147dc:	ldr	r0, [r0, #44]	; 0x2c
   147e0:	str	r0, [sp, #16]
   147e4:	str	r1, [sp, #12]
   147e8:	str	r2, [sp, #8]
   147ec:	ldr	r2, [fp, #-16]
   147f0:	str	r2, [sp, #4]
   147f4:	str	r3, [sp]
   147f8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   147fc:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14800:	ldr	r1, [fp, #-20]	; 0xffffffec
   14804:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14808:	bl	12f44 <__assert_fail@plt+0x1fa0>
   1480c:	bl	10ec0 <__errno_location@plt>
   14810:	mov	r2, r0
   14814:	ldr	r3, [fp, #-12]
   14818:	str	r3, [r2]
   1481c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   14820:	cmp	r3, #0
   14824:	beq	14838 <__assert_fail@plt+0x3894>
   14828:	ldr	r3, [fp, #-20]	; 0xffffffec
   1482c:	sub	r2, r3, #1
   14830:	ldr	r3, [fp, #-40]	; 0xffffffd8
   14834:	str	r2, [r3]
   14838:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1483c:	mov	r0, r3
   14840:	sub	sp, fp, #4
   14844:	pop	{fp, pc}
   14848:	muleq	r2, ip, r1
   1484c:	push	{fp, lr}
   14850:	add	fp, sp, #4
   14854:	sub	sp, sp, #8
   14858:	ldr	r3, [pc, #196]	; 14924 <__assert_fail@plt+0x3980>
   1485c:	ldr	r3, [r3]
   14860:	str	r3, [fp, #-12]
   14864:	mov	r3, #1
   14868:	str	r3, [fp, #-8]
   1486c:	b	14898 <__assert_fail@plt+0x38f4>
   14870:	ldr	r3, [fp, #-8]
   14874:	lsl	r3, r3, #3
   14878:	ldr	r2, [fp, #-12]
   1487c:	add	r3, r2, r3
   14880:	ldr	r3, [r3, #4]
   14884:	mov	r0, r3
   14888:	bl	129ac <__assert_fail@plt+0x1a08>
   1488c:	ldr	r3, [fp, #-8]
   14890:	add	r3, r3, #1
   14894:	str	r3, [fp, #-8]
   14898:	ldr	r3, [pc, #136]	; 14928 <__assert_fail@plt+0x3984>
   1489c:	ldr	r3, [r3]
   148a0:	ldr	r2, [fp, #-8]
   148a4:	cmp	r2, r3
   148a8:	blt	14870 <__assert_fail@plt+0x38cc>
   148ac:	ldr	r3, [fp, #-12]
   148b0:	ldr	r3, [r3, #4]
   148b4:	ldr	r2, [pc, #112]	; 1492c <__assert_fail@plt+0x3988>
   148b8:	cmp	r3, r2
   148bc:	beq	148e8 <__assert_fail@plt+0x3944>
   148c0:	ldr	r3, [fp, #-12]
   148c4:	ldr	r3, [r3, #4]
   148c8:	mov	r0, r3
   148cc:	bl	129ac <__assert_fail@plt+0x1a08>
   148d0:	ldr	r3, [pc, #88]	; 14930 <__assert_fail@plt+0x398c>
   148d4:	mov	r2, #256	; 0x100
   148d8:	str	r2, [r3]
   148dc:	ldr	r3, [pc, #76]	; 14930 <__assert_fail@plt+0x398c>
   148e0:	ldr	r2, [pc, #68]	; 1492c <__assert_fail@plt+0x3988>
   148e4:	str	r2, [r3, #4]
   148e8:	ldr	r3, [fp, #-12]
   148ec:	ldr	r2, [pc, #60]	; 14930 <__assert_fail@plt+0x398c>
   148f0:	cmp	r3, r2
   148f4:	beq	1490c <__assert_fail@plt+0x3968>
   148f8:	ldr	r0, [fp, #-12]
   148fc:	bl	129ac <__assert_fail@plt+0x1a08>
   14900:	ldr	r3, [pc, #28]	; 14924 <__assert_fail@plt+0x3980>
   14904:	ldr	r2, [pc, #36]	; 14930 <__assert_fail@plt+0x398c>
   14908:	str	r2, [r3]
   1490c:	ldr	r3, [pc, #20]	; 14928 <__assert_fail@plt+0x3984>
   14910:	mov	r2, #1
   14914:	str	r2, [r3]
   14918:	nop			; (mov r0, r0)
   1491c:	sub	sp, fp, #4
   14920:	pop	{fp, pc}
   14924:	andeq	sl, r2, r0, lsl r1
   14928:	andeq	sl, r2, r4, lsl #2
   1492c:	andeq	sl, r2, ip, asr #3
   14930:	andeq	sl, r2, r8, lsl #2
   14934:	push	{r4, fp, lr}
   14938:	add	fp, sp, #8
   1493c:	sub	sp, sp, #84	; 0x54
   14940:	str	r0, [fp, #-56]	; 0xffffffc8
   14944:	str	r1, [fp, #-60]	; 0xffffffc4
   14948:	str	r2, [fp, #-64]	; 0xffffffc0
   1494c:	str	r3, [fp, #-68]	; 0xffffffbc
   14950:	bl	10ec0 <__errno_location@plt>
   14954:	mov	r3, r0
   14958:	ldr	r3, [r3]
   1495c:	str	r3, [fp, #-24]	; 0xffffffe8
   14960:	ldr	r3, [pc, #640]	; 14be8 <__assert_fail@plt+0x3c44>
   14964:	ldr	r3, [r3]
   14968:	str	r3, [fp, #-16]
   1496c:	mvn	r3, #-2147483648	; 0x80000000
   14970:	str	r3, [fp, #-28]	; 0xffffffe4
   14974:	ldr	r3, [fp, #-56]	; 0xffffffc8
   14978:	cmp	r3, #0
   1497c:	blt	14990 <__assert_fail@plt+0x39ec>
   14980:	ldr	r2, [fp, #-56]	; 0xffffffc8
   14984:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14988:	cmp	r2, r3
   1498c:	blt	14994 <__assert_fail@plt+0x39f0>
   14990:	bl	10f98 <abort@plt>
   14994:	ldr	r3, [pc, #592]	; 14bec <__assert_fail@plt+0x3c48>
   14998:	ldr	r2, [r3]
   1499c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   149a0:	cmp	r2, r3
   149a4:	bgt	14a78 <__assert_fail@plt+0x3ad4>
   149a8:	ldr	r3, [fp, #-16]
   149ac:	ldr	r2, [pc, #572]	; 14bf0 <__assert_fail@plt+0x3c4c>
   149b0:	cmp	r3, r2
   149b4:	moveq	r3, #1
   149b8:	movne	r3, #0
   149bc:	strb	r3, [fp, #-29]	; 0xffffffe3
   149c0:	ldr	r3, [pc, #548]	; 14bec <__assert_fail@plt+0x3c48>
   149c4:	ldr	r3, [r3]
   149c8:	str	r3, [fp, #-48]	; 0xffffffd0
   149cc:	ldrb	r3, [fp, #-29]	; 0xffffffe3
   149d0:	cmp	r3, #0
   149d4:	beq	149e0 <__assert_fail@plt+0x3a3c>
   149d8:	mov	r0, #0
   149dc:	b	149e4 <__assert_fail@plt+0x3a40>
   149e0:	ldr	r0, [fp, #-16]
   149e4:	ldr	r3, [pc, #512]	; 14bec <__assert_fail@plt+0x3c48>
   149e8:	ldr	r3, [r3]
   149ec:	ldr	r2, [fp, #-56]	; 0xffffffc8
   149f0:	sub	r3, r2, r3
   149f4:	add	r2, r3, #1
   149f8:	sub	r1, fp, #48	; 0x30
   149fc:	mov	r3, #8
   14a00:	str	r3, [sp]
   14a04:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14a08:	bl	15d08 <__assert_fail@plt+0x4d64>
   14a0c:	str	r0, [fp, #-16]
   14a10:	ldr	r2, [pc, #464]	; 14be8 <__assert_fail@plt+0x3c44>
   14a14:	ldr	r3, [fp, #-16]
   14a18:	str	r3, [r2]
   14a1c:	ldrb	r3, [fp, #-29]	; 0xffffffe3
   14a20:	cmp	r3, #0
   14a24:	beq	14a38 <__assert_fail@plt+0x3a94>
   14a28:	ldr	r3, [fp, #-16]
   14a2c:	ldr	r2, [pc, #444]	; 14bf0 <__assert_fail@plt+0x3c4c>
   14a30:	ldm	r2, {r0, r1}
   14a34:	stm	r3, {r0, r1}
   14a38:	ldr	r3, [pc, #428]	; 14bec <__assert_fail@plt+0x3c48>
   14a3c:	ldr	r3, [r3]
   14a40:	lsl	r3, r3, #3
   14a44:	ldr	r2, [fp, #-16]
   14a48:	add	r0, r2, r3
   14a4c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   14a50:	ldr	r3, [pc, #404]	; 14bec <__assert_fail@plt+0x3c48>
   14a54:	ldr	r3, [r3]
   14a58:	sub	r3, r2, r3
   14a5c:	lsl	r3, r3, #3
   14a60:	mov	r2, r3
   14a64:	mov	r1, #0
   14a68:	bl	10ed8 <memset@plt>
   14a6c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14a70:	ldr	r2, [pc, #372]	; 14bec <__assert_fail@plt+0x3c48>
   14a74:	str	r3, [r2]
   14a78:	ldr	r3, [fp, #-56]	; 0xffffffc8
   14a7c:	lsl	r3, r3, #3
   14a80:	ldr	r2, [fp, #-16]
   14a84:	add	r3, r2, r3
   14a88:	ldr	r3, [r3]
   14a8c:	str	r3, [fp, #-36]	; 0xffffffdc
   14a90:	ldr	r3, [fp, #-56]	; 0xffffffc8
   14a94:	lsl	r3, r3, #3
   14a98:	ldr	r2, [fp, #-16]
   14a9c:	add	r3, r2, r3
   14aa0:	ldr	r3, [r3, #4]
   14aa4:	str	r3, [fp, #-20]	; 0xffffffec
   14aa8:	ldr	r3, [fp, #-68]	; 0xffffffbc
   14aac:	ldr	r3, [r3, #4]
   14ab0:	orr	r3, r3, #1
   14ab4:	str	r3, [fp, #-40]	; 0xffffffd8
   14ab8:	ldr	r3, [fp, #-68]	; 0xffffffbc
   14abc:	ldr	r3, [r3]
   14ac0:	ldr	r2, [fp, #-68]	; 0xffffffbc
   14ac4:	add	r2, r2, #8
   14ac8:	ldr	r1, [fp, #-68]	; 0xffffffbc
   14acc:	ldr	r1, [r1, #40]	; 0x28
   14ad0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14ad4:	ldr	r0, [r0, #44]	; 0x2c
   14ad8:	str	r0, [sp, #16]
   14adc:	str	r1, [sp, #12]
   14ae0:	str	r2, [sp, #8]
   14ae4:	ldr	r2, [fp, #-40]	; 0xffffffd8
   14ae8:	str	r2, [sp, #4]
   14aec:	str	r3, [sp]
   14af0:	ldr	r3, [fp, #-64]	; 0xffffffc0
   14af4:	ldr	r2, [fp, #-60]	; 0xffffffc4
   14af8:	ldr	r1, [fp, #-36]	; 0xffffffdc
   14afc:	ldr	r0, [fp, #-20]	; 0xffffffec
   14b00:	bl	12f44 <__assert_fail@plt+0x1fa0>
   14b04:	str	r0, [fp, #-44]	; 0xffffffd4
   14b08:	ldr	r2, [fp, #-36]	; 0xffffffdc
   14b0c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14b10:	cmp	r2, r3
   14b14:	bhi	14bc8 <__assert_fail@plt+0x3c24>
   14b18:	ldr	r3, [fp, #-56]	; 0xffffffc8
   14b1c:	lsl	r3, r3, #3
   14b20:	ldr	r2, [fp, #-16]
   14b24:	add	r3, r2, r3
   14b28:	ldr	r2, [fp, #-44]	; 0xffffffd4
   14b2c:	add	r2, r2, #1
   14b30:	str	r2, [fp, #-36]	; 0xffffffdc
   14b34:	ldr	r2, [fp, #-36]	; 0xffffffdc
   14b38:	str	r2, [r3]
   14b3c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14b40:	ldr	r2, [pc, #172]	; 14bf4 <__assert_fail@plt+0x3c50>
   14b44:	cmp	r3, r2
   14b48:	beq	14b54 <__assert_fail@plt+0x3bb0>
   14b4c:	ldr	r0, [fp, #-20]	; 0xffffffec
   14b50:	bl	129ac <__assert_fail@plt+0x1a08>
   14b54:	ldr	r3, [fp, #-56]	; 0xffffffc8
   14b58:	lsl	r3, r3, #3
   14b5c:	ldr	r2, [fp, #-16]
   14b60:	add	r4, r2, r3
   14b64:	ldr	r0, [fp, #-36]	; 0xffffffdc
   14b68:	bl	159e8 <__assert_fail@plt+0x4a44>
   14b6c:	mov	r3, r0
   14b70:	str	r3, [fp, #-20]	; 0xffffffec
   14b74:	ldr	r3, [fp, #-20]	; 0xffffffec
   14b78:	str	r3, [r4, #4]
   14b7c:	ldr	r3, [fp, #-68]	; 0xffffffbc
   14b80:	ldr	r3, [r3]
   14b84:	ldr	r2, [fp, #-68]	; 0xffffffbc
   14b88:	add	r2, r2, #8
   14b8c:	ldr	r1, [fp, #-68]	; 0xffffffbc
   14b90:	ldr	r1, [r1, #40]	; 0x28
   14b94:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14b98:	ldr	r0, [r0, #44]	; 0x2c
   14b9c:	str	r0, [sp, #16]
   14ba0:	str	r1, [sp, #12]
   14ba4:	str	r2, [sp, #8]
   14ba8:	ldr	r2, [fp, #-40]	; 0xffffffd8
   14bac:	str	r2, [sp, #4]
   14bb0:	str	r3, [sp]
   14bb4:	ldr	r3, [fp, #-64]	; 0xffffffc0
   14bb8:	ldr	r2, [fp, #-60]	; 0xffffffc4
   14bbc:	ldr	r1, [fp, #-36]	; 0xffffffdc
   14bc0:	ldr	r0, [fp, #-20]	; 0xffffffec
   14bc4:	bl	12f44 <__assert_fail@plt+0x1fa0>
   14bc8:	bl	10ec0 <__errno_location@plt>
   14bcc:	mov	r2, r0
   14bd0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14bd4:	str	r3, [r2]
   14bd8:	ldr	r3, [fp, #-20]	; 0xffffffec
   14bdc:	mov	r0, r3
   14be0:	sub	sp, fp, #8
   14be4:	pop	{r4, fp, pc}
   14be8:	andeq	sl, r2, r0, lsl r1
   14bec:	andeq	sl, r2, r4, lsl #2
   14bf0:	andeq	sl, r2, r8, lsl #2
   14bf4:	andeq	sl, r2, ip, asr #3
   14bf8:	push	{fp, lr}
   14bfc:	add	fp, sp, #4
   14c00:	sub	sp, sp, #8
   14c04:	str	r0, [fp, #-8]
   14c08:	str	r1, [fp, #-12]
   14c0c:	ldr	r3, [pc, #28]	; 14c30 <__assert_fail@plt+0x3c8c>
   14c10:	mvn	r2, #0
   14c14:	ldr	r1, [fp, #-12]
   14c18:	ldr	r0, [fp, #-8]
   14c1c:	bl	14934 <__assert_fail@plt+0x3990>
   14c20:	mov	r3, r0
   14c24:	mov	r0, r3
   14c28:	sub	sp, fp, #4
   14c2c:	pop	{fp, pc}
   14c30:	muleq	r2, ip, r1
   14c34:	push	{fp, lr}
   14c38:	add	fp, sp, #4
   14c3c:	sub	sp, sp, #16
   14c40:	str	r0, [fp, #-8]
   14c44:	str	r1, [fp, #-12]
   14c48:	str	r2, [fp, #-16]
   14c4c:	ldr	r3, [pc, #28]	; 14c70 <__assert_fail@plt+0x3ccc>
   14c50:	ldr	r2, [fp, #-16]
   14c54:	ldr	r1, [fp, #-12]
   14c58:	ldr	r0, [fp, #-8]
   14c5c:	bl	14934 <__assert_fail@plt+0x3990>
   14c60:	mov	r3, r0
   14c64:	mov	r0, r3
   14c68:	sub	sp, fp, #4
   14c6c:	pop	{fp, pc}
   14c70:	muleq	r2, ip, r1
   14c74:	push	{fp, lr}
   14c78:	add	fp, sp, #4
   14c7c:	sub	sp, sp, #8
   14c80:	str	r0, [fp, #-8]
   14c84:	ldr	r1, [fp, #-8]
   14c88:	mov	r0, #0
   14c8c:	bl	14bf8 <__assert_fail@plt+0x3c54>
   14c90:	mov	r3, r0
   14c94:	mov	r0, r3
   14c98:	sub	sp, fp, #4
   14c9c:	pop	{fp, pc}
   14ca0:	push	{fp, lr}
   14ca4:	add	fp, sp, #4
   14ca8:	sub	sp, sp, #8
   14cac:	str	r0, [fp, #-8]
   14cb0:	str	r1, [fp, #-12]
   14cb4:	ldr	r2, [fp, #-12]
   14cb8:	ldr	r1, [fp, #-8]
   14cbc:	mov	r0, #0
   14cc0:	bl	14c34 <__assert_fail@plt+0x3c90>
   14cc4:	mov	r3, r0
   14cc8:	mov	r0, r3
   14ccc:	sub	sp, fp, #4
   14cd0:	pop	{fp, pc}
   14cd4:	push	{fp, lr}
   14cd8:	add	fp, sp, #4
   14cdc:	sub	sp, sp, #64	; 0x40
   14ce0:	str	r0, [fp, #-56]	; 0xffffffc8
   14ce4:	str	r1, [fp, #-60]	; 0xffffffc4
   14ce8:	str	r2, [fp, #-64]	; 0xffffffc0
   14cec:	sub	r3, fp, #52	; 0x34
   14cf0:	ldr	r1, [fp, #-60]	; 0xffffffc4
   14cf4:	mov	r0, r3
   14cf8:	bl	12de0 <__assert_fail@plt+0x1e3c>
   14cfc:	sub	r3, fp, #52	; 0x34
   14d00:	mvn	r2, #0
   14d04:	ldr	r1, [fp, #-64]	; 0xffffffc0
   14d08:	ldr	r0, [fp, #-56]	; 0xffffffc8
   14d0c:	bl	14934 <__assert_fail@plt+0x3990>
   14d10:	mov	r3, r0
   14d14:	mov	r0, r3
   14d18:	sub	sp, fp, #4
   14d1c:	pop	{fp, pc}
   14d20:	push	{fp, lr}
   14d24:	add	fp, sp, #4
   14d28:	sub	sp, sp, #64	; 0x40
   14d2c:	str	r0, [fp, #-56]	; 0xffffffc8
   14d30:	str	r1, [fp, #-60]	; 0xffffffc4
   14d34:	str	r2, [fp, #-64]	; 0xffffffc0
   14d38:	str	r3, [fp, #-68]	; 0xffffffbc
   14d3c:	sub	r3, fp, #52	; 0x34
   14d40:	ldr	r1, [fp, #-60]	; 0xffffffc4
   14d44:	mov	r0, r3
   14d48:	bl	12de0 <__assert_fail@plt+0x1e3c>
   14d4c:	sub	r3, fp, #52	; 0x34
   14d50:	ldr	r2, [fp, #-68]	; 0xffffffbc
   14d54:	ldr	r1, [fp, #-64]	; 0xffffffc0
   14d58:	ldr	r0, [fp, #-56]	; 0xffffffc8
   14d5c:	bl	14934 <__assert_fail@plt+0x3990>
   14d60:	mov	r3, r0
   14d64:	mov	r0, r3
   14d68:	sub	sp, fp, #4
   14d6c:	pop	{fp, pc}
   14d70:	push	{fp, lr}
   14d74:	add	fp, sp, #4
   14d78:	sub	sp, sp, #8
   14d7c:	str	r0, [fp, #-8]
   14d80:	str	r1, [fp, #-12]
   14d84:	ldr	r2, [fp, #-12]
   14d88:	ldr	r1, [fp, #-8]
   14d8c:	mov	r0, #0
   14d90:	bl	14cd4 <__assert_fail@plt+0x3d30>
   14d94:	mov	r3, r0
   14d98:	mov	r0, r3
   14d9c:	sub	sp, fp, #4
   14da0:	pop	{fp, pc}
   14da4:	push	{fp, lr}
   14da8:	add	fp, sp, #4
   14dac:	sub	sp, sp, #16
   14db0:	str	r0, [fp, #-8]
   14db4:	str	r1, [fp, #-12]
   14db8:	str	r2, [fp, #-16]
   14dbc:	ldr	r3, [fp, #-16]
   14dc0:	ldr	r2, [fp, #-12]
   14dc4:	ldr	r1, [fp, #-8]
   14dc8:	mov	r0, #0
   14dcc:	bl	14d20 <__assert_fail@plt+0x3d7c>
   14dd0:	mov	r3, r0
   14dd4:	mov	r0, r3
   14dd8:	sub	sp, fp, #4
   14ddc:	pop	{fp, pc}
   14de0:	push	{fp, lr}
   14de4:	add	fp, sp, #4
   14de8:	sub	sp, sp, #64	; 0x40
   14dec:	str	r0, [fp, #-56]	; 0xffffffc8
   14df0:	str	r1, [fp, #-60]	; 0xffffffc4
   14df4:	mov	r3, r2
   14df8:	strb	r3, [fp, #-61]	; 0xffffffc3
   14dfc:	ldr	r3, [pc, #84]	; 14e58 <__assert_fail@plt+0x3eb4>
   14e00:	sub	ip, fp, #52	; 0x34
   14e04:	mov	lr, r3
   14e08:	ldm	lr!, {r0, r1, r2, r3}
   14e0c:	stmia	ip!, {r0, r1, r2, r3}
   14e10:	ldm	lr!, {r0, r1, r2, r3}
   14e14:	stmia	ip!, {r0, r1, r2, r3}
   14e18:	ldm	lr, {r0, r1, r2, r3}
   14e1c:	stm	ip, {r0, r1, r2, r3}
   14e20:	ldrb	r1, [fp, #-61]	; 0xffffffc3
   14e24:	sub	r3, fp, #52	; 0x34
   14e28:	mov	r2, #1
   14e2c:	mov	r0, r3
   14e30:	bl	12c4c <__assert_fail@plt+0x1ca8>
   14e34:	sub	r3, fp, #52	; 0x34
   14e38:	ldr	r2, [fp, #-60]	; 0xffffffc4
   14e3c:	ldr	r1, [fp, #-56]	; 0xffffffc8
   14e40:	mov	r0, #0
   14e44:	bl	14934 <__assert_fail@plt+0x3990>
   14e48:	mov	r3, r0
   14e4c:	mov	r0, r3
   14e50:	sub	sp, fp, #4
   14e54:	pop	{fp, pc}
   14e58:	muleq	r2, ip, r1
   14e5c:	push	{fp, lr}
   14e60:	add	fp, sp, #4
   14e64:	sub	sp, sp, #8
   14e68:	str	r0, [fp, #-8]
   14e6c:	mov	r3, r1
   14e70:	strb	r3, [fp, #-9]
   14e74:	ldrb	r3, [fp, #-9]
   14e78:	mov	r2, r3
   14e7c:	mvn	r1, #0
   14e80:	ldr	r0, [fp, #-8]
   14e84:	bl	14de0 <__assert_fail@plt+0x3e3c>
   14e88:	mov	r3, r0
   14e8c:	mov	r0, r3
   14e90:	sub	sp, fp, #4
   14e94:	pop	{fp, pc}
   14e98:	push	{fp, lr}
   14e9c:	add	fp, sp, #4
   14ea0:	sub	sp, sp, #8
   14ea4:	str	r0, [fp, #-8]
   14ea8:	mov	r1, #58	; 0x3a
   14eac:	ldr	r0, [fp, #-8]
   14eb0:	bl	14e5c <__assert_fail@plt+0x3eb8>
   14eb4:	mov	r3, r0
   14eb8:	mov	r0, r3
   14ebc:	sub	sp, fp, #4
   14ec0:	pop	{fp, pc}
   14ec4:	push	{fp, lr}
   14ec8:	add	fp, sp, #4
   14ecc:	sub	sp, sp, #8
   14ed0:	str	r0, [fp, #-8]
   14ed4:	str	r1, [fp, #-12]
   14ed8:	mov	r2, #58	; 0x3a
   14edc:	ldr	r1, [fp, #-12]
   14ee0:	ldr	r0, [fp, #-8]
   14ee4:	bl	14de0 <__assert_fail@plt+0x3e3c>
   14ee8:	mov	r3, r0
   14eec:	mov	r0, r3
   14ef0:	sub	sp, fp, #4
   14ef4:	pop	{fp, pc}
   14ef8:	push	{fp, lr}
   14efc:	add	fp, sp, #4
   14f00:	sub	sp, sp, #112	; 0x70
   14f04:	str	r0, [fp, #-56]	; 0xffffffc8
   14f08:	str	r1, [fp, #-60]	; 0xffffffc4
   14f0c:	str	r2, [fp, #-64]	; 0xffffffc0
   14f10:	sub	r3, fp, #116	; 0x74
   14f14:	ldr	r1, [fp, #-60]	; 0xffffffc4
   14f18:	mov	r0, r3
   14f1c:	bl	12de0 <__assert_fail@plt+0x1e3c>
   14f20:	sub	ip, fp, #52	; 0x34
   14f24:	sub	lr, fp, #116	; 0x74
   14f28:	ldm	lr!, {r0, r1, r2, r3}
   14f2c:	stmia	ip!, {r0, r1, r2, r3}
   14f30:	ldm	lr!, {r0, r1, r2, r3}
   14f34:	stmia	ip!, {r0, r1, r2, r3}
   14f38:	ldm	lr, {r0, r1, r2, r3}
   14f3c:	stm	ip, {r0, r1, r2, r3}
   14f40:	sub	r3, fp, #52	; 0x34
   14f44:	mov	r2, #1
   14f48:	mov	r1, #58	; 0x3a
   14f4c:	mov	r0, r3
   14f50:	bl	12c4c <__assert_fail@plt+0x1ca8>
   14f54:	sub	r3, fp, #52	; 0x34
   14f58:	mvn	r2, #0
   14f5c:	ldr	r1, [fp, #-64]	; 0xffffffc0
   14f60:	ldr	r0, [fp, #-56]	; 0xffffffc8
   14f64:	bl	14934 <__assert_fail@plt+0x3990>
   14f68:	mov	r3, r0
   14f6c:	mov	r0, r3
   14f70:	sub	sp, fp, #4
   14f74:	pop	{fp, pc}
   14f78:	push	{fp, lr}
   14f7c:	add	fp, sp, #4
   14f80:	sub	sp, sp, #24
   14f84:	str	r0, [fp, #-8]
   14f88:	str	r1, [fp, #-12]
   14f8c:	str	r2, [fp, #-16]
   14f90:	str	r3, [fp, #-20]	; 0xffffffec
   14f94:	mvn	r3, #0
   14f98:	str	r3, [sp]
   14f9c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14fa0:	ldr	r2, [fp, #-16]
   14fa4:	ldr	r1, [fp, #-12]
   14fa8:	ldr	r0, [fp, #-8]
   14fac:	bl	14fc0 <__assert_fail@plt+0x401c>
   14fb0:	mov	r3, r0
   14fb4:	mov	r0, r3
   14fb8:	sub	sp, fp, #4
   14fbc:	pop	{fp, pc}
   14fc0:	push	{fp, lr}
   14fc4:	add	fp, sp, #4
   14fc8:	sub	sp, sp, #64	; 0x40
   14fcc:	str	r0, [fp, #-56]	; 0xffffffc8
   14fd0:	str	r1, [fp, #-60]	; 0xffffffc4
   14fd4:	str	r2, [fp, #-64]	; 0xffffffc0
   14fd8:	str	r3, [fp, #-68]	; 0xffffffbc
   14fdc:	ldr	r3, [pc, #84]	; 15038 <__assert_fail@plt+0x4094>
   14fe0:	sub	ip, fp, #52	; 0x34
   14fe4:	mov	lr, r3
   14fe8:	ldm	lr!, {r0, r1, r2, r3}
   14fec:	stmia	ip!, {r0, r1, r2, r3}
   14ff0:	ldm	lr!, {r0, r1, r2, r3}
   14ff4:	stmia	ip!, {r0, r1, r2, r3}
   14ff8:	ldm	lr, {r0, r1, r2, r3}
   14ffc:	stm	ip, {r0, r1, r2, r3}
   15000:	sub	r3, fp, #52	; 0x34
   15004:	ldr	r2, [fp, #-64]	; 0xffffffc0
   15008:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1500c:	mov	r0, r3
   15010:	bl	12d64 <__assert_fail@plt+0x1dc0>
   15014:	sub	r3, fp, #52	; 0x34
   15018:	ldr	r2, [fp, #4]
   1501c:	ldr	r1, [fp, #-68]	; 0xffffffbc
   15020:	ldr	r0, [fp, #-56]	; 0xffffffc8
   15024:	bl	14934 <__assert_fail@plt+0x3990>
   15028:	mov	r3, r0
   1502c:	mov	r0, r3
   15030:	sub	sp, fp, #4
   15034:	pop	{fp, pc}
   15038:	muleq	r2, ip, r1
   1503c:	push	{fp, lr}
   15040:	add	fp, sp, #4
   15044:	sub	sp, sp, #16
   15048:	str	r0, [fp, #-8]
   1504c:	str	r1, [fp, #-12]
   15050:	str	r2, [fp, #-16]
   15054:	ldr	r3, [fp, #-16]
   15058:	ldr	r2, [fp, #-12]
   1505c:	ldr	r1, [fp, #-8]
   15060:	mov	r0, #0
   15064:	bl	14f78 <__assert_fail@plt+0x3fd4>
   15068:	mov	r3, r0
   1506c:	mov	r0, r3
   15070:	sub	sp, fp, #4
   15074:	pop	{fp, pc}
   15078:	push	{fp, lr}
   1507c:	add	fp, sp, #4
   15080:	sub	sp, sp, #24
   15084:	str	r0, [fp, #-8]
   15088:	str	r1, [fp, #-12]
   1508c:	str	r2, [fp, #-16]
   15090:	str	r3, [fp, #-20]	; 0xffffffec
   15094:	ldr	r3, [fp, #-20]	; 0xffffffec
   15098:	str	r3, [sp]
   1509c:	ldr	r3, [fp, #-16]
   150a0:	ldr	r2, [fp, #-12]
   150a4:	ldr	r1, [fp, #-8]
   150a8:	mov	r0, #0
   150ac:	bl	14fc0 <__assert_fail@plt+0x401c>
   150b0:	mov	r3, r0
   150b4:	mov	r0, r3
   150b8:	sub	sp, fp, #4
   150bc:	pop	{fp, pc}
   150c0:	push	{fp, lr}
   150c4:	add	fp, sp, #4
   150c8:	sub	sp, sp, #16
   150cc:	str	r0, [fp, #-8]
   150d0:	str	r1, [fp, #-12]
   150d4:	str	r2, [fp, #-16]
   150d8:	ldr	r3, [pc, #28]	; 150fc <__assert_fail@plt+0x4158>
   150dc:	ldr	r2, [fp, #-16]
   150e0:	ldr	r1, [fp, #-12]
   150e4:	ldr	r0, [fp, #-8]
   150e8:	bl	14934 <__assert_fail@plt+0x3990>
   150ec:	mov	r3, r0
   150f0:	mov	r0, r3
   150f4:	sub	sp, fp, #4
   150f8:	pop	{fp, pc}
   150fc:	andeq	sl, r2, r4, lsl r1
   15100:	push	{fp, lr}
   15104:	add	fp, sp, #4
   15108:	sub	sp, sp, #8
   1510c:	str	r0, [fp, #-8]
   15110:	str	r1, [fp, #-12]
   15114:	ldr	r2, [fp, #-12]
   15118:	ldr	r1, [fp, #-8]
   1511c:	mov	r0, #0
   15120:	bl	150c0 <__assert_fail@plt+0x411c>
   15124:	mov	r3, r0
   15128:	mov	r0, r3
   1512c:	sub	sp, fp, #4
   15130:	pop	{fp, pc}
   15134:	push	{fp, lr}
   15138:	add	fp, sp, #4
   1513c:	sub	sp, sp, #8
   15140:	str	r0, [fp, #-8]
   15144:	str	r1, [fp, #-12]
   15148:	mvn	r2, #0
   1514c:	ldr	r1, [fp, #-12]
   15150:	ldr	r0, [fp, #-8]
   15154:	bl	150c0 <__assert_fail@plt+0x411c>
   15158:	mov	r3, r0
   1515c:	mov	r0, r3
   15160:	sub	sp, fp, #4
   15164:	pop	{fp, pc}
   15168:	push	{fp, lr}
   1516c:	add	fp, sp, #4
   15170:	sub	sp, sp, #8
   15174:	str	r0, [fp, #-8]
   15178:	ldr	r1, [fp, #-8]
   1517c:	mov	r0, #0
   15180:	bl	15134 <__assert_fail@plt+0x4190>
   15184:	mov	r3, r0
   15188:	mov	r0, r3
   1518c:	sub	sp, fp, #4
   15190:	pop	{fp, pc}
   15194:	push	{r4, r5, r6, r7, fp, lr}
   15198:	add	fp, sp, #20
   1519c:	sub	sp, sp, #48	; 0x30
   151a0:	str	r0, [fp, #-24]	; 0xffffffe8
   151a4:	str	r1, [fp, #-28]	; 0xffffffe4
   151a8:	str	r2, [fp, #-32]	; 0xffffffe0
   151ac:	str	r3, [fp, #-36]	; 0xffffffdc
   151b0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   151b4:	cmp	r3, #0
   151b8:	beq	151dc <__assert_fail@plt+0x4238>
   151bc:	ldr	r3, [fp, #-36]	; 0xffffffdc
   151c0:	str	r3, [sp]
   151c4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   151c8:	ldr	r2, [fp, #-28]	; 0xffffffe4
   151cc:	ldr	r1, [pc, #1260]	; 156c0 <__assert_fail@plt+0x471c>
   151d0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   151d4:	bl	10eb4 <fprintf@plt>
   151d8:	b	151f0 <__assert_fail@plt+0x424c>
   151dc:	ldr	r3, [fp, #-36]	; 0xffffffdc
   151e0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   151e4:	ldr	r1, [pc, #1240]	; 156c4 <__assert_fail@plt+0x4720>
   151e8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   151ec:	bl	10eb4 <fprintf@plt>
   151f0:	ldr	r0, [pc, #1232]	; 156c8 <__assert_fail@plt+0x4724>
   151f4:	bl	10e90 <gettext@plt>
   151f8:	mov	r2, r0
   151fc:	ldr	r3, [pc, #1224]	; 156cc <__assert_fail@plt+0x4728>
   15200:	ldr	r1, [pc, #1224]	; 156d0 <__assert_fail@plt+0x472c>
   15204:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15208:	bl	10eb4 <fprintf@plt>
   1520c:	ldr	r1, [fp, #-24]	; 0xffffffe8
   15210:	mov	r0, #10
   15214:	bl	10d94 <fputc_unlocked@plt>
   15218:	ldr	r0, [pc, #1204]	; 156d4 <__assert_fail@plt+0x4730>
   1521c:	bl	10e90 <gettext@plt>
   15220:	mov	r3, r0
   15224:	ldr	r2, [pc, #1196]	; 156d8 <__assert_fail@plt+0x4734>
   15228:	mov	r1, r3
   1522c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15230:	bl	10eb4 <fprintf@plt>
   15234:	ldr	r1, [fp, #-24]	; 0xffffffe8
   15238:	mov	r0, #10
   1523c:	bl	10d94 <fputc_unlocked@plt>
   15240:	ldr	r3, [fp, #8]
   15244:	cmp	r3, #9
   15248:	ldrls	pc, [pc, r3, lsl #2]
   1524c:	b	15608 <__assert_fail@plt+0x4664>
   15250:			; <UNDEFINED> instruction: 0x000156b0
   15254:	andeq	r5, r1, r8, ror r2
   15258:	muleq	r1, ip, r2
   1525c:	andeq	r5, r1, r8, asr #5
   15260:	andeq	r5, r1, r8, lsl #6
   15264:	andeq	r5, r1, r0, ror #6
   15268:	andeq	r5, r1, r8, asr #7
   1526c:	andeq	r5, r1, r0, asr #8
   15270:	andeq	r5, r1, r8, asr #9
   15274:	andeq	r5, r1, r0, ror #10
   15278:	ldr	r0, [pc, #1116]	; 156dc <__assert_fail@plt+0x4738>
   1527c:	bl	10e90 <gettext@plt>
   15280:	mov	r1, r0
   15284:	ldr	r3, [fp, #4]
   15288:	ldr	r3, [r3]
   1528c:	mov	r2, r3
   15290:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15294:	bl	10eb4 <fprintf@plt>
   15298:	b	156b4 <__assert_fail@plt+0x4710>
   1529c:	ldr	r0, [pc, #1084]	; 156e0 <__assert_fail@plt+0x473c>
   152a0:	bl	10e90 <gettext@plt>
   152a4:	mov	r1, r0
   152a8:	ldr	r3, [fp, #4]
   152ac:	ldr	r2, [r3]
   152b0:	ldr	r3, [fp, #4]
   152b4:	add	r3, r3, #4
   152b8:	ldr	r3, [r3]
   152bc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   152c0:	bl	10eb4 <fprintf@plt>
   152c4:	b	156b4 <__assert_fail@plt+0x4710>
   152c8:	ldr	r0, [pc, #1044]	; 156e4 <__assert_fail@plt+0x4740>
   152cc:	bl	10e90 <gettext@plt>
   152d0:	ldr	r3, [fp, #4]
   152d4:	ldr	r2, [r3]
   152d8:	ldr	r3, [fp, #4]
   152dc:	add	r3, r3, #4
   152e0:	ldr	r1, [r3]
   152e4:	ldr	r3, [fp, #4]
   152e8:	add	r3, r3, #8
   152ec:	ldr	r3, [r3]
   152f0:	str	r3, [sp]
   152f4:	mov	r3, r1
   152f8:	mov	r1, r0
   152fc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15300:	bl	10eb4 <fprintf@plt>
   15304:	b	156b4 <__assert_fail@plt+0x4710>
   15308:	ldr	r0, [pc, #984]	; 156e8 <__assert_fail@plt+0x4744>
   1530c:	bl	10e90 <gettext@plt>
   15310:	mov	ip, r0
   15314:	ldr	r3, [fp, #4]
   15318:	ldr	r1, [r3]
   1531c:	ldr	r3, [fp, #4]
   15320:	add	r3, r3, #4
   15324:	ldr	r0, [r3]
   15328:	ldr	r3, [fp, #4]
   1532c:	add	r3, r3, #8
   15330:	ldr	r3, [r3]
   15334:	ldr	r2, [fp, #4]
   15338:	add	r2, r2, #12
   1533c:	ldr	r2, [r2]
   15340:	str	r2, [sp, #4]
   15344:	str	r3, [sp]
   15348:	mov	r3, r0
   1534c:	mov	r2, r1
   15350:	mov	r1, ip
   15354:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15358:	bl	10eb4 <fprintf@plt>
   1535c:	b	156b4 <__assert_fail@plt+0x4710>
   15360:	ldr	r0, [pc, #900]	; 156ec <__assert_fail@plt+0x4748>
   15364:	bl	10e90 <gettext@plt>
   15368:	mov	lr, r0
   1536c:	ldr	r3, [fp, #4]
   15370:	ldr	r0, [r3]
   15374:	ldr	r3, [fp, #4]
   15378:	add	r3, r3, #4
   1537c:	ldr	ip, [r3]
   15380:	ldr	r3, [fp, #4]
   15384:	add	r3, r3, #8
   15388:	ldr	r3, [r3]
   1538c:	ldr	r2, [fp, #4]
   15390:	add	r2, r2, #12
   15394:	ldr	r2, [r2]
   15398:	ldr	r1, [fp, #4]
   1539c:	add	r1, r1, #16
   153a0:	ldr	r1, [r1]
   153a4:	str	r1, [sp, #8]
   153a8:	str	r2, [sp, #4]
   153ac:	str	r3, [sp]
   153b0:	mov	r3, ip
   153b4:	mov	r2, r0
   153b8:	mov	r1, lr
   153bc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   153c0:	bl	10eb4 <fprintf@plt>
   153c4:	b	156b4 <__assert_fail@plt+0x4710>
   153c8:	ldr	r0, [pc, #800]	; 156f0 <__assert_fail@plt+0x474c>
   153cc:	bl	10e90 <gettext@plt>
   153d0:	mov	r4, r0
   153d4:	ldr	r3, [fp, #4]
   153d8:	ldr	ip, [r3]
   153dc:	ldr	r3, [fp, #4]
   153e0:	add	r3, r3, #4
   153e4:	ldr	lr, [r3]
   153e8:	ldr	r3, [fp, #4]
   153ec:	add	r3, r3, #8
   153f0:	ldr	r3, [r3]
   153f4:	ldr	r2, [fp, #4]
   153f8:	add	r2, r2, #12
   153fc:	ldr	r2, [r2]
   15400:	ldr	r1, [fp, #4]
   15404:	add	r1, r1, #16
   15408:	ldr	r1, [r1]
   1540c:	ldr	r0, [fp, #4]
   15410:	add	r0, r0, #20
   15414:	ldr	r0, [r0]
   15418:	str	r0, [sp, #12]
   1541c:	str	r1, [sp, #8]
   15420:	str	r2, [sp, #4]
   15424:	str	r3, [sp]
   15428:	mov	r3, lr
   1542c:	mov	r2, ip
   15430:	mov	r1, r4
   15434:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15438:	bl	10eb4 <fprintf@plt>
   1543c:	b	156b4 <__assert_fail@plt+0x4710>
   15440:	ldr	r0, [pc, #684]	; 156f4 <__assert_fail@plt+0x4750>
   15444:	bl	10e90 <gettext@plt>
   15448:	mov	r5, r0
   1544c:	ldr	r3, [fp, #4]
   15450:	ldr	lr, [r3]
   15454:	ldr	r3, [fp, #4]
   15458:	add	r3, r3, #4
   1545c:	ldr	r4, [r3]
   15460:	ldr	r3, [fp, #4]
   15464:	add	r3, r3, #8
   15468:	ldr	r3, [r3]
   1546c:	ldr	r2, [fp, #4]
   15470:	add	r2, r2, #12
   15474:	ldr	r2, [r2]
   15478:	ldr	r1, [fp, #4]
   1547c:	add	r1, r1, #16
   15480:	ldr	r1, [r1]
   15484:	ldr	r0, [fp, #4]
   15488:	add	r0, r0, #20
   1548c:	ldr	r0, [r0]
   15490:	ldr	ip, [fp, #4]
   15494:	add	ip, ip, #24
   15498:	ldr	ip, [ip]
   1549c:	str	ip, [sp, #16]
   154a0:	str	r0, [sp, #12]
   154a4:	str	r1, [sp, #8]
   154a8:	str	r2, [sp, #4]
   154ac:	str	r3, [sp]
   154b0:	mov	r3, r4
   154b4:	mov	r2, lr
   154b8:	mov	r1, r5
   154bc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   154c0:	bl	10eb4 <fprintf@plt>
   154c4:	b	156b4 <__assert_fail@plt+0x4710>
   154c8:	ldr	r0, [pc, #552]	; 156f8 <__assert_fail@plt+0x4754>
   154cc:	bl	10e90 <gettext@plt>
   154d0:	mov	r6, r0
   154d4:	ldr	r3, [fp, #4]
   154d8:	ldr	r4, [r3]
   154dc:	ldr	r3, [fp, #4]
   154e0:	add	r3, r3, #4
   154e4:	ldr	r5, [r3]
   154e8:	ldr	r3, [fp, #4]
   154ec:	add	r3, r3, #8
   154f0:	ldr	r3, [r3]
   154f4:	ldr	r2, [fp, #4]
   154f8:	add	r2, r2, #12
   154fc:	ldr	r2, [r2]
   15500:	ldr	r1, [fp, #4]
   15504:	add	r1, r1, #16
   15508:	ldr	r1, [r1]
   1550c:	ldr	r0, [fp, #4]
   15510:	add	r0, r0, #20
   15514:	ldr	r0, [r0]
   15518:	ldr	ip, [fp, #4]
   1551c:	add	ip, ip, #24
   15520:	ldr	ip, [ip]
   15524:	ldr	lr, [fp, #4]
   15528:	add	lr, lr, #28
   1552c:	ldr	lr, [lr]
   15530:	str	lr, [sp, #20]
   15534:	str	ip, [sp, #16]
   15538:	str	r0, [sp, #12]
   1553c:	str	r1, [sp, #8]
   15540:	str	r2, [sp, #4]
   15544:	str	r3, [sp]
   15548:	mov	r3, r5
   1554c:	mov	r2, r4
   15550:	mov	r1, r6
   15554:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15558:	bl	10eb4 <fprintf@plt>
   1555c:	b	156b4 <__assert_fail@plt+0x4710>
   15560:	ldr	r0, [pc, #404]	; 156fc <__assert_fail@plt+0x4758>
   15564:	bl	10e90 <gettext@plt>
   15568:	mov	r7, r0
   1556c:	ldr	r3, [fp, #4]
   15570:	ldr	r5, [r3]
   15574:	ldr	r3, [fp, #4]
   15578:	add	r3, r3, #4
   1557c:	ldr	r6, [r3]
   15580:	ldr	r3, [fp, #4]
   15584:	add	r3, r3, #8
   15588:	ldr	r3, [r3]
   1558c:	ldr	r2, [fp, #4]
   15590:	add	r2, r2, #12
   15594:	ldr	r2, [r2]
   15598:	ldr	r1, [fp, #4]
   1559c:	add	r1, r1, #16
   155a0:	ldr	r1, [r1]
   155a4:	ldr	r0, [fp, #4]
   155a8:	add	r0, r0, #20
   155ac:	ldr	r0, [r0]
   155b0:	ldr	ip, [fp, #4]
   155b4:	add	ip, ip, #24
   155b8:	ldr	ip, [ip]
   155bc:	ldr	lr, [fp, #4]
   155c0:	add	lr, lr, #28
   155c4:	ldr	lr, [lr]
   155c8:	ldr	r4, [fp, #4]
   155cc:	add	r4, r4, #32
   155d0:	ldr	r4, [r4]
   155d4:	str	r4, [sp, #24]
   155d8:	str	lr, [sp, #20]
   155dc:	str	ip, [sp, #16]
   155e0:	str	r0, [sp, #12]
   155e4:	str	r1, [sp, #8]
   155e8:	str	r2, [sp, #4]
   155ec:	str	r3, [sp]
   155f0:	mov	r3, r6
   155f4:	mov	r2, r5
   155f8:	mov	r1, r7
   155fc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15600:	bl	10eb4 <fprintf@plt>
   15604:	b	156b4 <__assert_fail@plt+0x4710>
   15608:	ldr	r0, [pc, #240]	; 15700 <__assert_fail@plt+0x475c>
   1560c:	bl	10e90 <gettext@plt>
   15610:	mov	r7, r0
   15614:	ldr	r3, [fp, #4]
   15618:	ldr	r5, [r3]
   1561c:	ldr	r3, [fp, #4]
   15620:	add	r3, r3, #4
   15624:	ldr	r6, [r3]
   15628:	ldr	r3, [fp, #4]
   1562c:	add	r3, r3, #8
   15630:	ldr	r3, [r3]
   15634:	ldr	r2, [fp, #4]
   15638:	add	r2, r2, #12
   1563c:	ldr	r2, [r2]
   15640:	ldr	r1, [fp, #4]
   15644:	add	r1, r1, #16
   15648:	ldr	r1, [r1]
   1564c:	ldr	r0, [fp, #4]
   15650:	add	r0, r0, #20
   15654:	ldr	r0, [r0]
   15658:	ldr	ip, [fp, #4]
   1565c:	add	ip, ip, #24
   15660:	ldr	ip, [ip]
   15664:	ldr	lr, [fp, #4]
   15668:	add	lr, lr, #28
   1566c:	ldr	lr, [lr]
   15670:	ldr	r4, [fp, #4]
   15674:	add	r4, r4, #32
   15678:	ldr	r4, [r4]
   1567c:	str	r4, [sp, #24]
   15680:	str	lr, [sp, #20]
   15684:	str	ip, [sp, #16]
   15688:	str	r0, [sp, #12]
   1568c:	str	r1, [sp, #8]
   15690:	str	r2, [sp, #4]
   15694:	str	r3, [sp]
   15698:	mov	r3, r6
   1569c:	mov	r2, r5
   156a0:	mov	r1, r7
   156a4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   156a8:	bl	10eb4 <fprintf@plt>
   156ac:	b	156b4 <__assert_fail@plt+0x4710>
   156b0:	nop			; (mov r0, r0)
   156b4:	nop			; (mov r0, r0)
   156b8:	sub	sp, fp, #20
   156bc:	pop	{r4, r5, r6, r7, fp, pc}
   156c0:	andeq	r8, r1, r0, lsl lr
   156c4:	andeq	r8, r1, ip, lsl lr
   156c8:	andeq	r8, r1, r4, lsr #28
   156cc:	andeq	r0, r0, r6, ror #15
   156d0:	andeq	r9, r1, r4, lsr r1
   156d4:	andeq	r8, r1, r8, lsr #28
   156d8:	ldrdeq	r8, [r1], -r4
   156dc:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   156e0:	andeq	r8, r1, r8, lsl #30
   156e4:	andeq	r8, r1, r0, lsr #30
   156e8:	andeq	r8, r1, ip, lsr pc
   156ec:	andeq	r8, r1, ip, asr pc
   156f0:	andeq	r8, r1, r0, lsl #31
   156f4:	andeq	r8, r1, r8, lsr #31
   156f8:	ldrdeq	r8, [r1], -r4
   156fc:	andeq	r9, r1, r4
   15700:	andeq	r9, r1, r8, lsr r0
   15704:	push	{fp, lr}
   15708:	add	fp, sp, #4
   1570c:	sub	sp, sp, #32
   15710:	str	r0, [fp, #-16]
   15714:	str	r1, [fp, #-20]	; 0xffffffec
   15718:	str	r2, [fp, #-24]	; 0xffffffe8
   1571c:	str	r3, [fp, #-28]	; 0xffffffe4
   15720:	mov	r3, #0
   15724:	str	r3, [fp, #-8]
   15728:	b	15738 <__assert_fail@plt+0x4794>
   1572c:	ldr	r3, [fp, #-8]
   15730:	add	r3, r3, #1
   15734:	str	r3, [fp, #-8]
   15738:	ldr	r3, [fp, #-8]
   1573c:	lsl	r3, r3, #2
   15740:	ldr	r2, [fp, #4]
   15744:	add	r3, r2, r3
   15748:	ldr	r3, [r3]
   1574c:	cmp	r3, #0
   15750:	bne	1572c <__assert_fail@plt+0x4788>
   15754:	ldr	r3, [fp, #-8]
   15758:	str	r3, [sp, #4]
   1575c:	ldr	r3, [fp, #4]
   15760:	str	r3, [sp]
   15764:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15768:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1576c:	ldr	r1, [fp, #-20]	; 0xffffffec
   15770:	ldr	r0, [fp, #-16]
   15774:	bl	15194 <__assert_fail@plt+0x41f0>
   15778:	nop			; (mov r0, r0)
   1577c:	sub	sp, fp, #4
   15780:	pop	{fp, pc}
   15784:	push	{fp, lr}
   15788:	add	fp, sp, #4
   1578c:	sub	sp, sp, #72	; 0x48
   15790:	str	r0, [fp, #-56]	; 0xffffffc8
   15794:	str	r1, [fp, #-60]	; 0xffffffc4
   15798:	str	r2, [fp, #-64]	; 0xffffffc0
   1579c:	str	r3, [fp, #-68]	; 0xffffffbc
   157a0:	mov	r3, #0
   157a4:	str	r3, [fp, #-8]
   157a8:	b	157b8 <__assert_fail@plt+0x4814>
   157ac:	ldr	r3, [fp, #-8]
   157b0:	add	r3, r3, #1
   157b4:	str	r3, [fp, #-8]
   157b8:	ldr	r3, [fp, #-8]
   157bc:	cmp	r3, #9
   157c0:	bhi	15804 <__assert_fail@plt+0x4860>
   157c4:	ldr	r3, [fp, #4]
   157c8:	add	r2, r3, #4
   157cc:	str	r2, [fp, #4]
   157d0:	ldr	r2, [r3]
   157d4:	ldr	r3, [fp, #-8]
   157d8:	lsl	r3, r3, #2
   157dc:	sub	r1, fp, #4
   157e0:	add	r3, r1, r3
   157e4:	str	r2, [r3, #-44]	; 0xffffffd4
   157e8:	ldr	r3, [fp, #-8]
   157ec:	lsl	r3, r3, #2
   157f0:	sub	r2, fp, #4
   157f4:	add	r3, r2, r3
   157f8:	ldr	r3, [r3, #-44]	; 0xffffffd4
   157fc:	cmp	r3, #0
   15800:	bne	157ac <__assert_fail@plt+0x4808>
   15804:	ldr	r3, [fp, #-8]
   15808:	str	r3, [sp, #4]
   1580c:	sub	r3, fp, #48	; 0x30
   15810:	str	r3, [sp]
   15814:	ldr	r3, [fp, #-68]	; 0xffffffbc
   15818:	ldr	r2, [fp, #-64]	; 0xffffffc0
   1581c:	ldr	r1, [fp, #-60]	; 0xffffffc4
   15820:	ldr	r0, [fp, #-56]	; 0xffffffc8
   15824:	bl	15194 <__assert_fail@plt+0x41f0>
   15828:	nop			; (mov r0, r0)
   1582c:	sub	sp, fp, #4
   15830:	pop	{fp, pc}
   15834:	push	{r3}		; (str r3, [sp, #-4]!)
   15838:	push	{fp, lr}
   1583c:	add	fp, sp, #4
   15840:	sub	sp, sp, #36	; 0x24
   15844:	str	r0, [fp, #-20]	; 0xffffffec
   15848:	str	r1, [fp, #-24]	; 0xffffffe8
   1584c:	str	r2, [fp, #-28]	; 0xffffffe4
   15850:	add	r3, fp, #8
   15854:	str	r3, [fp, #-12]
   15858:	ldr	r3, [fp, #-12]
   1585c:	str	r3, [sp]
   15860:	ldr	r3, [fp, #4]
   15864:	ldr	r2, [fp, #-28]	; 0xffffffe4
   15868:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1586c:	ldr	r0, [fp, #-20]	; 0xffffffec
   15870:	bl	15784 <__assert_fail@plt+0x47e0>
   15874:	nop			; (mov r0, r0)
   15878:	sub	sp, fp, #4
   1587c:	pop	{fp, lr}
   15880:	add	sp, sp, #4
   15884:	bx	lr
   15888:	push	{fp, lr}
   1588c:	add	fp, sp, #4
   15890:	ldr	r3, [pc, #96]	; 158f8 <__assert_fail@plt+0x4954>
   15894:	ldr	r3, [r3]
   15898:	mov	r1, r3
   1589c:	mov	r0, #10
   158a0:	bl	10d94 <fputc_unlocked@plt>
   158a4:	ldr	r0, [pc, #80]	; 158fc <__assert_fail@plt+0x4958>
   158a8:	bl	10e90 <gettext@plt>
   158ac:	mov	r3, r0
   158b0:	ldr	r1, [pc, #72]	; 15900 <__assert_fail@plt+0x495c>
   158b4:	mov	r0, r3
   158b8:	bl	10d34 <printf@plt>
   158bc:	ldr	r0, [pc, #64]	; 15904 <__assert_fail@plt+0x4960>
   158c0:	bl	10e90 <gettext@plt>
   158c4:	mov	r3, r0
   158c8:	ldr	r2, [pc, #56]	; 15908 <__assert_fail@plt+0x4964>
   158cc:	ldr	r1, [pc, #56]	; 1590c <__assert_fail@plt+0x4968>
   158d0:	mov	r0, r3
   158d4:	bl	10d34 <printf@plt>
   158d8:	ldr	r0, [pc, #48]	; 15910 <__assert_fail@plt+0x496c>
   158dc:	bl	10e90 <gettext@plt>
   158e0:	mov	r3, r0
   158e4:	ldr	r1, [pc, #40]	; 15914 <__assert_fail@plt+0x4970>
   158e8:	mov	r0, r3
   158ec:	bl	10d34 <printf@plt>
   158f0:	nop			; (mov r0, r0)
   158f4:	pop	{fp, pc}
   158f8:	andeq	sl, r2, ip, asr r1
   158fc:	andeq	r9, r1, r4, ror r0
   15900:	andeq	r9, r1, r8, lsl #1
   15904:	andeq	r9, r1, r0, lsr #1
   15908:	strheq	r9, [r1], -r4
   1590c:	ldrdeq	r9, [r1], -ip
   15910:	andeq	r9, r1, ip, ror #1
   15914:	andeq	r9, r1, r4, lsl r1
   15918:	push	{fp, lr}
   1591c:	add	fp, sp, #4
   15920:	sub	sp, sp, #16
   15924:	str	r0, [fp, #-8]
   15928:	str	r1, [fp, #-12]
   1592c:	str	r2, [fp, #-16]
   15930:	ldr	r2, [fp, #-16]
   15934:	ldr	r1, [fp, #-12]
   15938:	ldr	r0, [fp, #-8]
   1593c:	bl	15aa8 <__assert_fail@plt+0x4b04>
   15940:	mov	r3, r0
   15944:	mov	r0, r3
   15948:	sub	sp, fp, #4
   1594c:	pop	{fp, pc}
   15950:	push	{fp, lr}
   15954:	add	fp, sp, #4
   15958:	sub	sp, sp, #8
   1595c:	str	r0, [fp, #-8]
   15960:	ldr	r3, [fp, #-8]
   15964:	cmp	r3, #0
   15968:	bne	15970 <__assert_fail@plt+0x49cc>
   1596c:	bl	1649c <__assert_fail@plt+0x54f8>
   15970:	ldr	r3, [fp, #-8]
   15974:	mov	r0, r3
   15978:	sub	sp, fp, #4
   1597c:	pop	{fp, pc}
   15980:	push	{fp, lr}
   15984:	add	fp, sp, #4
   15988:	sub	sp, sp, #8
   1598c:	str	r0, [fp, #-8]
   15990:	ldr	r0, [fp, #-8]
   15994:	bl	16df4 <__assert_fail@plt+0x5e50>
   15998:	mov	r3, r0
   1599c:	mov	r0, r3
   159a0:	bl	15950 <__assert_fail@plt+0x49ac>
   159a4:	mov	r3, r0
   159a8:	mov	r0, r3
   159ac:	sub	sp, fp, #4
   159b0:	pop	{fp, pc}
   159b4:	push	{fp, lr}
   159b8:	add	fp, sp, #4
   159bc:	sub	sp, sp, #8
   159c0:	str	r0, [fp, #-8]
   159c4:	ldr	r0, [fp, #-8]
   159c8:	bl	17850 <__assert_fail@plt+0x68ac>
   159cc:	mov	r3, r0
   159d0:	mov	r0, r3
   159d4:	bl	15950 <__assert_fail@plt+0x49ac>
   159d8:	mov	r3, r0
   159dc:	mov	r0, r3
   159e0:	sub	sp, fp, #4
   159e4:	pop	{fp, pc}
   159e8:	push	{fp, lr}
   159ec:	add	fp, sp, #4
   159f0:	sub	sp, sp, #8
   159f4:	str	r0, [fp, #-8]
   159f8:	ldr	r0, [fp, #-8]
   159fc:	bl	15980 <__assert_fail@plt+0x49dc>
   15a00:	mov	r3, r0
   15a04:	mov	r0, r3
   15a08:	sub	sp, fp, #4
   15a0c:	pop	{fp, pc}
   15a10:	push	{fp, lr}
   15a14:	add	fp, sp, #4
   15a18:	sub	sp, sp, #16
   15a1c:	str	r0, [fp, #-16]
   15a20:	str	r1, [fp, #-20]	; 0xffffffec
   15a24:	ldr	r1, [fp, #-20]	; 0xffffffec
   15a28:	ldr	r0, [fp, #-16]
   15a2c:	bl	16e9c <__assert_fail@plt+0x5ef8>
   15a30:	str	r0, [fp, #-8]
   15a34:	ldr	r3, [fp, #-8]
   15a38:	cmp	r3, #0
   15a3c:	bne	15a5c <__assert_fail@plt+0x4ab8>
   15a40:	ldr	r3, [fp, #-16]
   15a44:	cmp	r3, #0
   15a48:	beq	15a58 <__assert_fail@plt+0x4ab4>
   15a4c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15a50:	cmp	r3, #0
   15a54:	beq	15a5c <__assert_fail@plt+0x4ab8>
   15a58:	bl	1649c <__assert_fail@plt+0x54f8>
   15a5c:	ldr	r3, [fp, #-8]
   15a60:	mov	r0, r3
   15a64:	sub	sp, fp, #4
   15a68:	pop	{fp, pc}
   15a6c:	push	{fp, lr}
   15a70:	add	fp, sp, #4
   15a74:	sub	sp, sp, #8
   15a78:	str	r0, [fp, #-8]
   15a7c:	str	r1, [fp, #-12]
   15a80:	ldr	r1, [fp, #-12]
   15a84:	ldr	r0, [fp, #-8]
   15a88:	bl	1787c <__assert_fail@plt+0x68d8>
   15a8c:	mov	r3, r0
   15a90:	mov	r0, r3
   15a94:	bl	15950 <__assert_fail@plt+0x49ac>
   15a98:	mov	r3, r0
   15a9c:	mov	r0, r3
   15aa0:	sub	sp, fp, #4
   15aa4:	pop	{fp, pc}
   15aa8:	push	{fp, lr}
   15aac:	add	fp, sp, #4
   15ab0:	sub	sp, sp, #24
   15ab4:	str	r0, [fp, #-16]
   15ab8:	str	r1, [fp, #-20]	; 0xffffffec
   15abc:	str	r2, [fp, #-24]	; 0xffffffe8
   15ac0:	ldr	r2, [fp, #-24]	; 0xffffffe8
   15ac4:	ldr	r1, [fp, #-20]	; 0xffffffec
   15ac8:	ldr	r0, [fp, #-16]
   15acc:	bl	17a70 <__assert_fail@plt+0x6acc>
   15ad0:	str	r0, [fp, #-8]
   15ad4:	ldr	r3, [fp, #-8]
   15ad8:	cmp	r3, #0
   15adc:	bne	15b08 <__assert_fail@plt+0x4b64>
   15ae0:	ldr	r3, [fp, #-16]
   15ae4:	cmp	r3, #0
   15ae8:	beq	15b04 <__assert_fail@plt+0x4b60>
   15aec:	ldr	r3, [fp, #-20]	; 0xffffffec
   15af0:	cmp	r3, #0
   15af4:	beq	15b08 <__assert_fail@plt+0x4b64>
   15af8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15afc:	cmp	r3, #0
   15b00:	beq	15b08 <__assert_fail@plt+0x4b64>
   15b04:	bl	1649c <__assert_fail@plt+0x54f8>
   15b08:	ldr	r3, [fp, #-8]
   15b0c:	mov	r0, r3
   15b10:	sub	sp, fp, #4
   15b14:	pop	{fp, pc}
   15b18:	push	{fp, lr}
   15b1c:	add	fp, sp, #4
   15b20:	sub	sp, sp, #16
   15b24:	str	r0, [fp, #-8]
   15b28:	str	r1, [fp, #-12]
   15b2c:	str	r2, [fp, #-16]
   15b30:	ldr	r2, [fp, #-16]
   15b34:	ldr	r1, [fp, #-12]
   15b38:	ldr	r0, [fp, #-8]
   15b3c:	bl	17904 <__assert_fail@plt+0x6960>
   15b40:	mov	r3, r0
   15b44:	mov	r0, r3
   15b48:	bl	15950 <__assert_fail@plt+0x49ac>
   15b4c:	mov	r3, r0
   15b50:	mov	r0, r3
   15b54:	sub	sp, fp, #4
   15b58:	pop	{fp, pc}
   15b5c:	push	{fp, lr}
   15b60:	add	fp, sp, #4
   15b64:	sub	sp, sp, #8
   15b68:	str	r0, [fp, #-8]
   15b6c:	str	r1, [fp, #-12]
   15b70:	ldr	r2, [fp, #-12]
   15b74:	ldr	r1, [fp, #-8]
   15b78:	mov	r0, #0
   15b7c:	bl	15aa8 <__assert_fail@plt+0x4b04>
   15b80:	mov	r3, r0
   15b84:	mov	r0, r3
   15b88:	sub	sp, fp, #4
   15b8c:	pop	{fp, pc}
   15b90:	push	{fp, lr}
   15b94:	add	fp, sp, #4
   15b98:	sub	sp, sp, #8
   15b9c:	str	r0, [fp, #-8]
   15ba0:	str	r1, [fp, #-12]
   15ba4:	ldr	r2, [fp, #-12]
   15ba8:	ldr	r1, [fp, #-8]
   15bac:	mov	r0, #0
   15bb0:	bl	15b18 <__assert_fail@plt+0x4b74>
   15bb4:	mov	r3, r0
   15bb8:	mov	r0, r3
   15bbc:	sub	sp, fp, #4
   15bc0:	pop	{fp, pc}
   15bc4:	push	{fp, lr}
   15bc8:	add	fp, sp, #4
   15bcc:	sub	sp, sp, #8
   15bd0:	str	r0, [fp, #-8]
   15bd4:	str	r1, [fp, #-12]
   15bd8:	mov	r2, #1
   15bdc:	ldr	r1, [fp, #-12]
   15be0:	ldr	r0, [fp, #-8]
   15be4:	bl	15bf8 <__assert_fail@plt+0x4c54>
   15be8:	mov	r3, r0
   15bec:	mov	r0, r3
   15bf0:	sub	sp, fp, #4
   15bf4:	pop	{fp, pc}
   15bf8:	push	{fp, lr}
   15bfc:	add	fp, sp, #4
   15c00:	sub	sp, sp, #24
   15c04:	str	r0, [fp, #-16]
   15c08:	str	r1, [fp, #-20]	; 0xffffffec
   15c0c:	str	r2, [fp, #-24]	; 0xffffffe8
   15c10:	ldr	r3, [fp, #-20]	; 0xffffffec
   15c14:	ldr	r3, [r3]
   15c18:	str	r3, [fp, #-8]
   15c1c:	ldr	r3, [fp, #-16]
   15c20:	cmp	r3, #0
   15c24:	bne	15c70 <__assert_fail@plt+0x4ccc>
   15c28:	ldr	r3, [fp, #-8]
   15c2c:	cmp	r3, #0
   15c30:	bne	15cd4 <__assert_fail@plt+0x4d30>
   15c34:	ldr	r1, [fp, #-24]	; 0xffffffe8
   15c38:	mov	r0, #64	; 0x40
   15c3c:	bl	17d24 <__assert_fail@plt+0x6d80>
   15c40:	mov	r3, r0
   15c44:	str	r3, [fp, #-8]
   15c48:	ldr	r3, [fp, #-8]
   15c4c:	cmp	r3, #0
   15c50:	moveq	r3, #1
   15c54:	movne	r3, #0
   15c58:	uxtb	r3, r3
   15c5c:	mov	r2, r3
   15c60:	ldr	r3, [fp, #-8]
   15c64:	add	r3, r2, r3
   15c68:	str	r3, [fp, #-8]
   15c6c:	b	15cd4 <__assert_fail@plt+0x4d30>
   15c70:	ldr	r3, [fp, #-8]
   15c74:	lsr	r3, r3, #1
   15c78:	add	r3, r3, #1
   15c7c:	mvn	r2, r3
   15c80:	ldr	r3, [fp, #-8]
   15c84:	cmp	r2, r3
   15c88:	bcs	15cac <__assert_fail@plt+0x4d08>
   15c8c:	ldr	r3, [fp, #-8]
   15c90:	lsr	r2, r3, #1
   15c94:	ldr	r3, [fp, #-8]
   15c98:	add	r3, r2, r3
   15c9c:	add	r3, r3, #1
   15ca0:	str	r3, [fp, #-8]
   15ca4:	mov	r3, #1
   15ca8:	b	15cc8 <__assert_fail@plt+0x4d24>
   15cac:	ldr	r3, [fp, #-8]
   15cb0:	lsr	r2, r3, #1
   15cb4:	ldr	r3, [fp, #-8]
   15cb8:	add	r3, r2, r3
   15cbc:	add	r3, r3, #1
   15cc0:	str	r3, [fp, #-8]
   15cc4:	mov	r3, #0
   15cc8:	cmp	r3, #0
   15ccc:	beq	15cd4 <__assert_fail@plt+0x4d30>
   15cd0:	bl	1649c <__assert_fail@plt+0x54f8>
   15cd4:	ldr	r3, [fp, #-8]
   15cd8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   15cdc:	mov	r1, r3
   15ce0:	ldr	r0, [fp, #-16]
   15ce4:	bl	15aa8 <__assert_fail@plt+0x4b04>
   15ce8:	str	r0, [fp, #-16]
   15cec:	ldr	r2, [fp, #-8]
   15cf0:	ldr	r3, [fp, #-20]	; 0xffffffec
   15cf4:	str	r2, [r3]
   15cf8:	ldr	r3, [fp, #-16]
   15cfc:	mov	r0, r3
   15d00:	sub	sp, fp, #4
   15d04:	pop	{fp, pc}
   15d08:	push	{fp, lr}
   15d0c:	add	fp, sp, #4
   15d10:	sub	sp, sp, #32
   15d14:	str	r0, [fp, #-24]	; 0xffffffe8
   15d18:	str	r1, [fp, #-28]	; 0xffffffe4
   15d1c:	str	r2, [fp, #-32]	; 0xffffffe0
   15d20:	str	r3, [fp, #-36]	; 0xffffffdc
   15d24:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15d28:	ldr	r3, [r3]
   15d2c:	str	r3, [fp, #-8]
   15d30:	ldr	r3, [fp, #-8]
   15d34:	asr	r3, r3, #1
   15d38:	cmp	r3, #0
   15d3c:	bge	15d64 <__assert_fail@plt+0x4dc0>
   15d40:	ldr	r3, [fp, #-8]
   15d44:	asr	r3, r3, #1
   15d48:	rsb	r2, r3, #-2147483648	; 0x80000000
   15d4c:	ldr	r3, [fp, #-8]
   15d50:	cmp	r2, r3
   15d54:	movgt	r3, #1
   15d58:	movle	r3, #0
   15d5c:	uxtb	r3, r3
   15d60:	b	15db8 <__assert_fail@plt+0x4e14>
   15d64:	ldr	r3, [fp, #-8]
   15d68:	cmp	r3, #0
   15d6c:	bge	15d94 <__assert_fail@plt+0x4df0>
   15d70:	ldr	r3, [fp, #-8]
   15d74:	asr	r2, r3, #1
   15d78:	ldr	r3, [fp, #-8]
   15d7c:	rsb	r3, r3, #-2147483648	; 0x80000000
   15d80:	cmp	r2, r3
   15d84:	movlt	r3, #1
   15d88:	movge	r3, #0
   15d8c:	uxtb	r3, r3
   15d90:	b	15db8 <__assert_fail@plt+0x4e14>
   15d94:	ldr	r3, [fp, #-8]
   15d98:	asr	r2, r3, #1
   15d9c:	mvn	r3, #-2147483648	; 0x80000000
   15da0:	sub	r3, r3, r2
   15da4:	ldr	r2, [fp, #-8]
   15da8:	cmp	r3, r2
   15dac:	movlt	r3, #1
   15db0:	movge	r3, #0
   15db4:	uxtb	r3, r3
   15db8:	cmp	r3, #0
   15dbc:	beq	15de0 <__assert_fail@plt+0x4e3c>
   15dc0:	ldr	r3, [fp, #-8]
   15dc4:	asr	r3, r3, #1
   15dc8:	mov	r2, r3
   15dcc:	ldr	r3, [fp, #-8]
   15dd0:	add	r3, r2, r3
   15dd4:	str	r3, [fp, #-16]
   15dd8:	mov	r3, #1
   15ddc:	b	15dfc <__assert_fail@plt+0x4e58>
   15de0:	ldr	r3, [fp, #-8]
   15de4:	asr	r3, r3, #1
   15de8:	mov	r2, r3
   15dec:	ldr	r3, [fp, #-8]
   15df0:	add	r3, r2, r3
   15df4:	str	r3, [fp, #-16]
   15df8:	mov	r3, #0
   15dfc:	cmp	r3, #0
   15e00:	beq	15e0c <__assert_fail@plt+0x4e68>
   15e04:	mvn	r3, #-2147483648	; 0x80000000
   15e08:	str	r3, [fp, #-16]
   15e0c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15e10:	cmp	r3, #0
   15e14:	blt	15e30 <__assert_fail@plt+0x4e8c>
   15e18:	ldr	r3, [fp, #-16]
   15e1c:	ldr	r2, [fp, #-36]	; 0xffffffdc
   15e20:	cmp	r2, r3
   15e24:	bge	15e30 <__assert_fail@plt+0x4e8c>
   15e28:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15e2c:	str	r3, [fp, #-16]
   15e30:	ldr	r3, [fp, #4]
   15e34:	cmp	r3, #0
   15e38:	bge	15ec8 <__assert_fail@plt+0x4f24>
   15e3c:	ldr	r3, [fp, #-16]
   15e40:	cmp	r3, #0
   15e44:	bge	15e74 <__assert_fail@plt+0x4ed0>
   15e48:	ldr	r1, [fp, #4]
   15e4c:	mvn	r0, #-2147483648	; 0x80000000
   15e50:	bl	17f30 <__assert_fail@plt+0x6f8c>
   15e54:	mov	r3, r0
   15e58:	mov	r2, r3
   15e5c:	ldr	r3, [fp, #-16]
   15e60:	cmp	r2, r3
   15e64:	movgt	r3, #1
   15e68:	movle	r3, #0
   15e6c:	uxtb	r3, r3
   15e70:	b	15f68 <__assert_fail@plt+0x4fc4>
   15e74:	ldr	r3, [fp, #4]
   15e78:	cmn	r3, #1
   15e7c:	bne	15e9c <__assert_fail@plt+0x4ef8>
   15e80:	ldr	r3, [fp, #-16]
   15e84:	add	r3, r3, #-2147483648	; 0x80000000
   15e88:	cmp	r3, #0
   15e8c:	movgt	r3, #1
   15e90:	movle	r3, #0
   15e94:	uxtb	r3, r3
   15e98:	b	15f68 <__assert_fail@plt+0x4fc4>
   15e9c:	ldr	r1, [fp, #4]
   15ea0:	mov	r0, #-2147483648	; 0x80000000
   15ea4:	bl	17f30 <__assert_fail@plt+0x6f8c>
   15ea8:	mov	r3, r0
   15eac:	mov	r2, r3
   15eb0:	ldr	r3, [fp, #-16]
   15eb4:	cmp	r2, r3
   15eb8:	movlt	r3, #1
   15ebc:	movge	r3, #0
   15ec0:	uxtb	r3, r3
   15ec4:	b	15f68 <__assert_fail@plt+0x4fc4>
   15ec8:	ldr	r3, [fp, #4]
   15ecc:	cmp	r3, #0
   15ed0:	beq	15f64 <__assert_fail@plt+0x4fc0>
   15ed4:	ldr	r3, [fp, #-16]
   15ed8:	cmp	r3, #0
   15edc:	bge	15f38 <__assert_fail@plt+0x4f94>
   15ee0:	ldr	r3, [fp, #-16]
   15ee4:	cmn	r3, #1
   15ee8:	bne	15f08 <__assert_fail@plt+0x4f64>
   15eec:	ldr	r3, [fp, #4]
   15ef0:	add	r3, r3, #-2147483648	; 0x80000000
   15ef4:	cmp	r3, #0
   15ef8:	movgt	r3, #1
   15efc:	movle	r3, #0
   15f00:	uxtb	r3, r3
   15f04:	b	15f68 <__assert_fail@plt+0x4fc4>
   15f08:	ldr	r3, [fp, #-16]
   15f0c:	mov	r1, r3
   15f10:	mov	r0, #-2147483648	; 0x80000000
   15f14:	bl	17f30 <__assert_fail@plt+0x6f8c>
   15f18:	mov	r3, r0
   15f1c:	mov	r2, r3
   15f20:	ldr	r3, [fp, #4]
   15f24:	cmp	r2, r3
   15f28:	movlt	r3, #1
   15f2c:	movge	r3, #0
   15f30:	uxtb	r3, r3
   15f34:	b	15f68 <__assert_fail@plt+0x4fc4>
   15f38:	ldr	r1, [fp, #4]
   15f3c:	mvn	r0, #-2147483648	; 0x80000000
   15f40:	bl	17f30 <__assert_fail@plt+0x6f8c>
   15f44:	mov	r3, r0
   15f48:	mov	r2, r3
   15f4c:	ldr	r3, [fp, #-16]
   15f50:	cmp	r2, r3
   15f54:	movlt	r3, #1
   15f58:	movge	r3, #0
   15f5c:	uxtb	r3, r3
   15f60:	b	15f68 <__assert_fail@plt+0x4fc4>
   15f64:	mov	r3, #0
   15f68:	cmp	r3, #0
   15f6c:	beq	15f8c <__assert_fail@plt+0x4fe8>
   15f70:	ldr	r3, [fp, #-16]
   15f74:	mov	r2, r3
   15f78:	ldr	r3, [fp, #4]
   15f7c:	mul	r3, r3, r2
   15f80:	str	r3, [fp, #-20]	; 0xffffffec
   15f84:	mov	r3, #1
   15f88:	b	15fa4 <__assert_fail@plt+0x5000>
   15f8c:	ldr	r3, [fp, #-16]
   15f90:	mov	r2, r3
   15f94:	ldr	r3, [fp, #4]
   15f98:	mul	r3, r3, r2
   15f9c:	str	r3, [fp, #-20]	; 0xffffffec
   15fa0:	mov	r3, #0
   15fa4:	cmp	r3, #0
   15fa8:	beq	15fb4 <__assert_fail@plt+0x5010>
   15fac:	mvn	r3, #-2147483648	; 0x80000000
   15fb0:	b	15fcc <__assert_fail@plt+0x5028>
   15fb4:	ldr	r3, [fp, #-20]	; 0xffffffec
   15fb8:	cmp	r3, #63	; 0x3f
   15fbc:	bgt	15fc8 <__assert_fail@plt+0x5024>
   15fc0:	mov	r3, #64	; 0x40
   15fc4:	b	15fcc <__assert_fail@plt+0x5028>
   15fc8:	mov	r3, #0
   15fcc:	str	r3, [fp, #-12]
   15fd0:	ldr	r3, [fp, #-12]
   15fd4:	cmp	r3, #0
   15fd8:	beq	16014 <__assert_fail@plt+0x5070>
   15fdc:	ldr	r1, [fp, #4]
   15fe0:	ldr	r0, [fp, #-12]
   15fe4:	bl	17f30 <__assert_fail@plt+0x6f8c>
   15fe8:	mov	r3, r0
   15fec:	str	r3, [fp, #-16]
   15ff0:	ldr	r3, [fp, #-12]
   15ff4:	ldr	r1, [fp, #4]
   15ff8:	mov	r0, r3
   15ffc:	bl	18150 <__assert_fail@plt+0x71ac>
   16000:	mov	r3, r1
   16004:	mov	r2, r3
   16008:	ldr	r3, [fp, #-12]
   1600c:	sub	r3, r3, r2
   16010:	str	r3, [fp, #-20]	; 0xffffffec
   16014:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16018:	cmp	r3, #0
   1601c:	bne	1602c <__assert_fail@plt+0x5088>
   16020:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16024:	mov	r2, #0
   16028:	str	r2, [r3]
   1602c:	ldr	r2, [fp, #-16]
   16030:	ldr	r3, [fp, #-8]
   16034:	sub	r2, r2, r3
   16038:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1603c:	cmp	r2, r3
   16040:	bge	16278 <__assert_fail@plt+0x52d4>
   16044:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16048:	cmp	r3, #0
   1604c:	bge	16070 <__assert_fail@plt+0x50cc>
   16050:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16054:	rsb	r2, r3, #-2147483648	; 0x80000000
   16058:	ldr	r3, [fp, #-8]
   1605c:	cmp	r2, r3
   16060:	movgt	r3, #1
   16064:	movle	r3, #0
   16068:	uxtb	r3, r3
   1606c:	b	160bc <__assert_fail@plt+0x5118>
   16070:	ldr	r3, [fp, #-8]
   16074:	cmp	r3, #0
   16078:	bge	1609c <__assert_fail@plt+0x50f8>
   1607c:	ldr	r3, [fp, #-8]
   16080:	rsb	r2, r3, #-2147483648	; 0x80000000
   16084:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16088:	cmp	r2, r3
   1608c:	movgt	r3, #1
   16090:	movle	r3, #0
   16094:	uxtb	r3, r3
   16098:	b	160bc <__assert_fail@plt+0x5118>
   1609c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   160a0:	mvn	r3, #-2147483648	; 0x80000000
   160a4:	sub	r3, r3, r2
   160a8:	ldr	r2, [fp, #-8]
   160ac:	cmp	r3, r2
   160b0:	movlt	r3, #1
   160b4:	movge	r3, #0
   160b8:	uxtb	r3, r3
   160bc:	cmp	r3, #0
   160c0:	beq	160d8 <__assert_fail@plt+0x5134>
   160c4:	ldr	r2, [fp, #-8]
   160c8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   160cc:	add	r3, r2, r3
   160d0:	str	r3, [fp, #-16]
   160d4:	b	16274 <__assert_fail@plt+0x52d0>
   160d8:	ldr	r2, [fp, #-8]
   160dc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   160e0:	add	r3, r2, r3
   160e4:	str	r3, [fp, #-16]
   160e8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   160ec:	cmp	r3, #0
   160f0:	blt	16104 <__assert_fail@plt+0x5160>
   160f4:	ldr	r3, [fp, #-16]
   160f8:	ldr	r2, [fp, #-36]	; 0xffffffdc
   160fc:	cmp	r2, r3
   16100:	blt	16274 <__assert_fail@plt+0x52d0>
   16104:	ldr	r3, [fp, #4]
   16108:	cmp	r3, #0
   1610c:	bge	1619c <__assert_fail@plt+0x51f8>
   16110:	ldr	r3, [fp, #-16]
   16114:	cmp	r3, #0
   16118:	bge	16148 <__assert_fail@plt+0x51a4>
   1611c:	ldr	r1, [fp, #4]
   16120:	mvn	r0, #-2147483648	; 0x80000000
   16124:	bl	17f30 <__assert_fail@plt+0x6f8c>
   16128:	mov	r3, r0
   1612c:	mov	r2, r3
   16130:	ldr	r3, [fp, #-16]
   16134:	cmp	r2, r3
   16138:	movgt	r3, #1
   1613c:	movle	r3, #0
   16140:	uxtb	r3, r3
   16144:	b	1623c <__assert_fail@plt+0x5298>
   16148:	ldr	r3, [fp, #4]
   1614c:	cmn	r3, #1
   16150:	bne	16170 <__assert_fail@plt+0x51cc>
   16154:	ldr	r3, [fp, #-16]
   16158:	add	r3, r3, #-2147483648	; 0x80000000
   1615c:	cmp	r3, #0
   16160:	movgt	r3, #1
   16164:	movle	r3, #0
   16168:	uxtb	r3, r3
   1616c:	b	1623c <__assert_fail@plt+0x5298>
   16170:	ldr	r1, [fp, #4]
   16174:	mov	r0, #-2147483648	; 0x80000000
   16178:	bl	17f30 <__assert_fail@plt+0x6f8c>
   1617c:	mov	r3, r0
   16180:	mov	r2, r3
   16184:	ldr	r3, [fp, #-16]
   16188:	cmp	r2, r3
   1618c:	movlt	r3, #1
   16190:	movge	r3, #0
   16194:	uxtb	r3, r3
   16198:	b	1623c <__assert_fail@plt+0x5298>
   1619c:	ldr	r3, [fp, #4]
   161a0:	cmp	r3, #0
   161a4:	beq	16238 <__assert_fail@plt+0x5294>
   161a8:	ldr	r3, [fp, #-16]
   161ac:	cmp	r3, #0
   161b0:	bge	1620c <__assert_fail@plt+0x5268>
   161b4:	ldr	r3, [fp, #-16]
   161b8:	cmn	r3, #1
   161bc:	bne	161dc <__assert_fail@plt+0x5238>
   161c0:	ldr	r3, [fp, #4]
   161c4:	add	r3, r3, #-2147483648	; 0x80000000
   161c8:	cmp	r3, #0
   161cc:	movgt	r3, #1
   161d0:	movle	r3, #0
   161d4:	uxtb	r3, r3
   161d8:	b	1623c <__assert_fail@plt+0x5298>
   161dc:	ldr	r3, [fp, #-16]
   161e0:	mov	r1, r3
   161e4:	mov	r0, #-2147483648	; 0x80000000
   161e8:	bl	17f30 <__assert_fail@plt+0x6f8c>
   161ec:	mov	r3, r0
   161f0:	mov	r2, r3
   161f4:	ldr	r3, [fp, #4]
   161f8:	cmp	r2, r3
   161fc:	movlt	r3, #1
   16200:	movge	r3, #0
   16204:	uxtb	r3, r3
   16208:	b	1623c <__assert_fail@plt+0x5298>
   1620c:	ldr	r1, [fp, #4]
   16210:	mvn	r0, #-2147483648	; 0x80000000
   16214:	bl	17f30 <__assert_fail@plt+0x6f8c>
   16218:	mov	r3, r0
   1621c:	mov	r2, r3
   16220:	ldr	r3, [fp, #-16]
   16224:	cmp	r2, r3
   16228:	movlt	r3, #1
   1622c:	movge	r3, #0
   16230:	uxtb	r3, r3
   16234:	b	1623c <__assert_fail@plt+0x5298>
   16238:	mov	r3, #0
   1623c:	cmp	r3, #0
   16240:	beq	1625c <__assert_fail@plt+0x52b8>
   16244:	ldr	r3, [fp, #-16]
   16248:	mov	r2, r3
   1624c:	ldr	r3, [fp, #4]
   16250:	mul	r3, r3, r2
   16254:	str	r3, [fp, #-20]	; 0xffffffec
   16258:	b	16274 <__assert_fail@plt+0x52d0>
   1625c:	ldr	r3, [fp, #-16]
   16260:	mov	r2, r3
   16264:	ldr	r3, [fp, #4]
   16268:	mul	r3, r3, r2
   1626c:	str	r3, [fp, #-20]	; 0xffffffec
   16270:	b	16278 <__assert_fail@plt+0x52d4>
   16274:	bl	1649c <__assert_fail@plt+0x54f8>
   16278:	ldr	r3, [fp, #-20]	; 0xffffffec
   1627c:	mov	r1, r3
   16280:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16284:	bl	15a10 <__assert_fail@plt+0x4a6c>
   16288:	str	r0, [fp, #-24]	; 0xffffffe8
   1628c:	ldr	r2, [fp, #-16]
   16290:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16294:	str	r2, [r3]
   16298:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1629c:	mov	r0, r3
   162a0:	sub	sp, fp, #4
   162a4:	pop	{fp, pc}
   162a8:	push	{fp, lr}
   162ac:	add	fp, sp, #4
   162b0:	sub	sp, sp, #8
   162b4:	str	r0, [fp, #-8]
   162b8:	mov	r1, #1
   162bc:	ldr	r0, [fp, #-8]
   162c0:	bl	16300 <__assert_fail@plt+0x535c>
   162c4:	mov	r3, r0
   162c8:	mov	r0, r3
   162cc:	sub	sp, fp, #4
   162d0:	pop	{fp, pc}
   162d4:	push	{fp, lr}
   162d8:	add	fp, sp, #4
   162dc:	sub	sp, sp, #8
   162e0:	str	r0, [fp, #-8]
   162e4:	mov	r1, #1
   162e8:	ldr	r0, [fp, #-8]
   162ec:	bl	1633c <__assert_fail@plt+0x5398>
   162f0:	mov	r3, r0
   162f4:	mov	r0, r3
   162f8:	sub	sp, fp, #4
   162fc:	pop	{fp, pc}
   16300:	push	{fp, lr}
   16304:	add	fp, sp, #4
   16308:	sub	sp, sp, #8
   1630c:	str	r0, [fp, #-8]
   16310:	str	r1, [fp, #-12]
   16314:	ldr	r1, [fp, #-12]
   16318:	ldr	r0, [fp, #-8]
   1631c:	bl	16d30 <__assert_fail@plt+0x5d8c>
   16320:	mov	r3, r0
   16324:	mov	r0, r3
   16328:	bl	15950 <__assert_fail@plt+0x49ac>
   1632c:	mov	r3, r0
   16330:	mov	r0, r3
   16334:	sub	sp, fp, #4
   16338:	pop	{fp, pc}
   1633c:	push	{fp, lr}
   16340:	add	fp, sp, #4
   16344:	sub	sp, sp, #8
   16348:	str	r0, [fp, #-8]
   1634c:	str	r1, [fp, #-12]
   16350:	ldr	r1, [fp, #-12]
   16354:	ldr	r0, [fp, #-8]
   16358:	bl	178cc <__assert_fail@plt+0x6928>
   1635c:	mov	r3, r0
   16360:	mov	r0, r3
   16364:	bl	15950 <__assert_fail@plt+0x49ac>
   16368:	mov	r3, r0
   1636c:	mov	r0, r3
   16370:	sub	sp, fp, #4
   16374:	pop	{fp, pc}
   16378:	push	{fp, lr}
   1637c:	add	fp, sp, #4
   16380:	sub	sp, sp, #8
   16384:	str	r0, [fp, #-8]
   16388:	str	r1, [fp, #-12]
   1638c:	ldr	r0, [fp, #-12]
   16390:	bl	15980 <__assert_fail@plt+0x49dc>
   16394:	mov	r3, r0
   16398:	ldr	r2, [fp, #-12]
   1639c:	ldr	r1, [fp, #-8]
   163a0:	mov	r0, r3
   163a4:	bl	10d64 <memcpy@plt>
   163a8:	mov	r3, r0
   163ac:	mov	r0, r3
   163b0:	sub	sp, fp, #4
   163b4:	pop	{fp, pc}
   163b8:	push	{fp, lr}
   163bc:	add	fp, sp, #4
   163c0:	sub	sp, sp, #8
   163c4:	str	r0, [fp, #-8]
   163c8:	str	r1, [fp, #-12]
   163cc:	ldr	r0, [fp, #-12]
   163d0:	bl	159b4 <__assert_fail@plt+0x4a10>
   163d4:	mov	r3, r0
   163d8:	mov	r0, r3
   163dc:	ldr	r3, [fp, #-12]
   163e0:	mov	r2, r3
   163e4:	ldr	r1, [fp, #-8]
   163e8:	bl	10d64 <memcpy@plt>
   163ec:	mov	r3, r0
   163f0:	mov	r0, r3
   163f4:	sub	sp, fp, #4
   163f8:	pop	{fp, pc}
   163fc:	push	{fp, lr}
   16400:	add	fp, sp, #4
   16404:	sub	sp, sp, #16
   16408:	str	r0, [fp, #-16]
   1640c:	str	r1, [fp, #-20]	; 0xffffffec
   16410:	ldr	r3, [fp, #-20]	; 0xffffffec
   16414:	add	r3, r3, #1
   16418:	mov	r0, r3
   1641c:	bl	159b4 <__assert_fail@plt+0x4a10>
   16420:	mov	r3, r0
   16424:	str	r3, [fp, #-8]
   16428:	ldr	r3, [fp, #-20]	; 0xffffffec
   1642c:	ldr	r2, [fp, #-8]
   16430:	add	r3, r2, r3
   16434:	mov	r2, #0
   16438:	strb	r2, [r3]
   1643c:	ldr	r3, [fp, #-20]	; 0xffffffec
   16440:	mov	r2, r3
   16444:	ldr	r1, [fp, #-16]
   16448:	ldr	r0, [fp, #-8]
   1644c:	bl	10d64 <memcpy@plt>
   16450:	mov	r3, r0
   16454:	mov	r0, r3
   16458:	sub	sp, fp, #4
   1645c:	pop	{fp, pc}
   16460:	push	{fp, lr}
   16464:	add	fp, sp, #4
   16468:	sub	sp, sp, #8
   1646c:	str	r0, [fp, #-8]
   16470:	ldr	r0, [fp, #-8]
   16474:	bl	10e9c <strlen@plt>
   16478:	mov	r3, r0
   1647c:	add	r3, r3, #1
   16480:	mov	r1, r3
   16484:	ldr	r0, [fp, #-8]
   16488:	bl	16378 <__assert_fail@plt+0x53d4>
   1648c:	mov	r3, r0
   16490:	mov	r0, r3
   16494:	sub	sp, fp, #4
   16498:	pop	{fp, pc}
   1649c:	push	{r4, r5, fp, lr}
   164a0:	add	fp, sp, #12
   164a4:	ldr	r3, [pc, #32]	; 164cc <__assert_fail@plt+0x5528>
   164a8:	ldr	r4, [r3]
   164ac:	ldr	r0, [pc, #28]	; 164d0 <__assert_fail@plt+0x552c>
   164b0:	bl	10e90 <gettext@plt>
   164b4:	mov	r3, r0
   164b8:	ldr	r2, [pc, #20]	; 164d4 <__assert_fail@plt+0x5530>
   164bc:	mov	r1, #0
   164c0:	mov	r0, r4
   164c4:	bl	10e18 <error@plt>
   164c8:	bl	10f98 <abort@plt>
   164cc:	andeq	sl, r2, r0, lsl #2
   164d0:	andeq	r9, r1, r4, ror #2
   164d4:	andeq	r9, r1, r8, ror r1
   164d8:	push	{fp, lr}
   164dc:	add	fp, sp, #4
   164e0:	sub	sp, sp, #16
   164e4:	str	r0, [fp, #-16]
   164e8:	ldr	r0, [fp, #-16]
   164ec:	bl	16fb8 <__assert_fail@plt+0x6014>
   164f0:	str	r0, [fp, #-8]
   164f4:	ldr	r3, [fp, #-8]
   164f8:	cmp	r3, #0
   164fc:	bne	16518 <__assert_fail@plt+0x5574>
   16500:	bl	10ec0 <__errno_location@plt>
   16504:	mov	r3, r0
   16508:	ldr	r3, [r3]
   1650c:	cmp	r3, #12
   16510:	bne	16518 <__assert_fail@plt+0x5574>
   16514:	bl	1649c <__assert_fail@plt+0x54f8>
   16518:	ldr	r3, [fp, #-8]
   1651c:	mov	r0, r3
   16520:	sub	sp, fp, #4
   16524:	pop	{fp, pc}
   16528:	push	{fp, lr}
   1652c:	add	fp, sp, #4
   16530:	sub	sp, sp, #16
   16534:	str	r0, [fp, #-16]
   16538:	str	r1, [fp, #-20]	; 0xffffffec
   1653c:	ldr	r3, [fp, #-20]	; 0xffffffec
   16540:	cmp	r3, #0
   16544:	bge	16580 <__assert_fail@plt+0x55dc>
   16548:	ldr	r1, [fp, #-20]	; 0xffffffec
   1654c:	mov	r0, #0
   16550:	bl	17f30 <__assert_fail@plt+0x6f8c>
   16554:	mov	r3, r0
   16558:	mov	r0, r3
   1655c:	asr	r1, r0, #31
   16560:	ldr	r3, [fp, #-16]
   16564:	ldrd	r2, [r3]
   16568:	cmp	r1, r3
   1656c:	cmpeq	r0, r2
   16570:	movcc	r3, #1
   16574:	movcs	r3, #0
   16578:	uxtb	r3, r3
   1657c:	b	165dc <__assert_fail@plt+0x5638>
   16580:	ldr	r3, [fp, #-20]	; 0xffffffec
   16584:	cmp	r3, #0
   16588:	beq	165d0 <__assert_fail@plt+0x562c>
   1658c:	ldr	r3, [fp, #-20]	; 0xffffffec
   16590:	mov	r2, r3
   16594:	asr	r3, r2, #31
   16598:	mvn	r0, #0
   1659c:	mvn	r1, #0
   165a0:	bl	18170 <__assert_fail@plt+0x71cc>
   165a4:	mov	r2, r0
   165a8:	mov	r3, r1
   165ac:	mov	r0, r2
   165b0:	mov	r1, r3
   165b4:	ldr	r3, [fp, #-16]
   165b8:	ldrd	r2, [r3]
   165bc:	cmp	r1, r3
   165c0:	cmpeq	r0, r2
   165c4:	bcs	165d0 <__assert_fail@plt+0x562c>
   165c8:	mov	r3, #1
   165cc:	b	165d4 <__assert_fail@plt+0x5630>
   165d0:	mov	r3, #0
   165d4:	and	r3, r3, #1
   165d8:	uxtb	r3, r3
   165dc:	cmp	r3, #0
   165e0:	beq	1661c <__assert_fail@plt+0x5678>
   165e4:	ldr	r3, [fp, #-16]
   165e8:	ldrd	r0, [r3]
   165ec:	ldr	r3, [fp, #-20]	; 0xffffffec
   165f0:	mov	r2, r3
   165f4:	asr	r3, r2, #31
   165f8:	mul	lr, r2, r1
   165fc:	mul	ip, r0, r3
   16600:	add	ip, lr, ip
   16604:	umull	r2, r3, r0, r2
   16608:	add	r1, ip, r3
   1660c:	mov	r3, r1
   16610:	strd	r2, [fp, #-12]
   16614:	mov	r3, #1
   16618:	b	16650 <__assert_fail@plt+0x56ac>
   1661c:	ldr	r3, [fp, #-16]
   16620:	ldrd	r0, [r3]
   16624:	ldr	r3, [fp, #-20]	; 0xffffffec
   16628:	mov	r2, r3
   1662c:	asr	r3, r2, #31
   16630:	mul	lr, r2, r1
   16634:	mul	ip, r0, r3
   16638:	add	ip, lr, ip
   1663c:	umull	r2, r3, r0, r2
   16640:	add	r1, ip, r3
   16644:	mov	r3, r1
   16648:	strd	r2, [fp, #-12]
   1664c:	mov	r3, #0
   16650:	cmp	r3, #0
   16654:	beq	16670 <__assert_fail@plt+0x56cc>
   16658:	ldr	r1, [fp, #-16]
   1665c:	mvn	r2, #0
   16660:	mvn	r3, #0
   16664:	strd	r2, [r1]
   16668:	mov	r3, #1
   1666c:	b	16680 <__assert_fail@plt+0x56dc>
   16670:	ldrd	r2, [fp, #-12]
   16674:	ldr	r1, [fp, #-16]
   16678:	strd	r2, [r1]
   1667c:	mov	r3, #0
   16680:	mov	r0, r3
   16684:	sub	sp, fp, #4
   16688:	pop	{fp, pc}
   1668c:	push	{fp, lr}
   16690:	add	fp, sp, #4
   16694:	sub	sp, sp, #24
   16698:	str	r0, [fp, #-16]
   1669c:	str	r1, [fp, #-20]	; 0xffffffec
   166a0:	str	r2, [fp, #-24]	; 0xffffffe8
   166a4:	mov	r3, #0
   166a8:	str	r3, [fp, #-8]
   166ac:	b	166cc <__assert_fail@plt+0x5728>
   166b0:	ldr	r1, [fp, #-20]	; 0xffffffec
   166b4:	ldr	r0, [fp, #-16]
   166b8:	bl	16528 <__assert_fail@plt+0x5584>
   166bc:	mov	r2, r0
   166c0:	ldr	r3, [fp, #-8]
   166c4:	orr	r3, r3, r2
   166c8:	str	r3, [fp, #-8]
   166cc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   166d0:	sub	r2, r3, #1
   166d4:	str	r2, [fp, #-24]	; 0xffffffe8
   166d8:	cmp	r3, #0
   166dc:	bne	166b0 <__assert_fail@plt+0x570c>
   166e0:	ldr	r3, [fp, #-8]
   166e4:	mov	r0, r3
   166e8:	sub	sp, fp, #4
   166ec:	pop	{fp, pc}
   166f0:	push	{fp, lr}
   166f4:	add	fp, sp, #4
   166f8:	sub	sp, sp, #56	; 0x38
   166fc:	str	r0, [fp, #-48]	; 0xffffffd0
   16700:	str	r1, [fp, #-52]	; 0xffffffcc
   16704:	str	r2, [fp, #-56]	; 0xffffffc8
   16708:	str	r3, [fp, #-60]	; 0xffffffc4
   1670c:	mov	r3, #0
   16710:	str	r3, [fp, #-8]
   16714:	ldr	r3, [fp, #-56]	; 0xffffffc8
   16718:	cmp	r3, #0
   1671c:	blt	1672c <__assert_fail@plt+0x5788>
   16720:	ldr	r3, [fp, #-56]	; 0xffffffc8
   16724:	cmp	r3, #36	; 0x24
   16728:	ble	16740 <__assert_fail@plt+0x579c>
   1672c:	ldr	r3, [pc, #1520]	; 16d24 <__assert_fail@plt+0x5d80>
   16730:	mov	r2, #85	; 0x55
   16734:	ldr	r1, [pc, #1516]	; 16d28 <__assert_fail@plt+0x5d84>
   16738:	ldr	r0, [pc, #1516]	; 16d2c <__assert_fail@plt+0x5d88>
   1673c:	bl	10fa4 <__assert_fail@plt>
   16740:	ldr	r3, [fp, #-52]	; 0xffffffcc
   16744:	cmp	r3, #0
   16748:	bne	16754 <__assert_fail@plt+0x57b0>
   1674c:	sub	r3, fp, #36	; 0x24
   16750:	b	16758 <__assert_fail@plt+0x57b4>
   16754:	ldr	r3, [fp, #-52]	; 0xffffffcc
   16758:	str	r3, [fp, #-32]	; 0xffffffe0
   1675c:	bl	10ec0 <__errno_location@plt>
   16760:	mov	r2, r0
   16764:	mov	r3, #0
   16768:	str	r3, [r2]
   1676c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   16770:	str	r3, [fp, #-12]
   16774:	ldr	r3, [fp, #-12]
   16778:	ldrb	r3, [r3]
   1677c:	strb	r3, [fp, #-13]
   16780:	b	1679c <__assert_fail@plt+0x57f8>
   16784:	ldr	r3, [fp, #-12]
   16788:	add	r3, r3, #1
   1678c:	str	r3, [fp, #-12]
   16790:	ldr	r3, [fp, #-12]
   16794:	ldrb	r3, [r3]
   16798:	strb	r3, [fp, #-13]
   1679c:	bl	10e78 <__ctype_b_loc@plt>
   167a0:	mov	r3, r0
   167a4:	ldr	r2, [r3]
   167a8:	ldrb	r3, [fp, #-13]
   167ac:	lsl	r3, r3, #1
   167b0:	add	r3, r2, r3
   167b4:	ldrh	r3, [r3]
   167b8:	and	r3, r3, #8192	; 0x2000
   167bc:	cmp	r3, #0
   167c0:	bne	16784 <__assert_fail@plt+0x57e0>
   167c4:	ldrb	r3, [fp, #-13]
   167c8:	cmp	r3, #45	; 0x2d
   167cc:	bne	167d8 <__assert_fail@plt+0x5834>
   167d0:	mov	r3, #4
   167d4:	b	16d18 <__assert_fail@plt+0x5d74>
   167d8:	ldr	r2, [fp, #-56]	; 0xffffffc8
   167dc:	ldr	r1, [fp, #-32]	; 0xffffffe0
   167e0:	ldr	r0, [fp, #-48]	; 0xffffffd0
   167e4:	bl	10ef0 <strtoumax@plt>
   167e8:	mov	r2, r0
   167ec:	mov	r3, r1
   167f0:	strd	r2, [fp, #-44]	; 0xffffffd4
   167f4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   167f8:	ldr	r2, [r3]
   167fc:	ldr	r3, [fp, #-48]	; 0xffffffd0
   16800:	cmp	r2, r3
   16804:	bne	16864 <__assert_fail@plt+0x58c0>
   16808:	ldr	r3, [fp, #4]
   1680c:	cmp	r3, #0
   16810:	beq	1685c <__assert_fail@plt+0x58b8>
   16814:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16818:	ldr	r3, [r3]
   1681c:	ldrb	r3, [r3]
   16820:	cmp	r3, #0
   16824:	beq	1685c <__assert_fail@plt+0x58b8>
   16828:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1682c:	ldr	r3, [r3]
   16830:	ldrb	r3, [r3]
   16834:	mov	r1, r3
   16838:	ldr	r0, [fp, #4]
   1683c:	bl	10ea8 <strchr@plt>
   16840:	mov	r3, r0
   16844:	cmp	r3, #0
   16848:	beq	1685c <__assert_fail@plt+0x58b8>
   1684c:	mov	r2, #1
   16850:	mov	r3, #0
   16854:	strd	r2, [fp, #-44]	; 0xffffffd4
   16858:	b	1689c <__assert_fail@plt+0x58f8>
   1685c:	mov	r3, #4
   16860:	b	16d18 <__assert_fail@plt+0x5d74>
   16864:	bl	10ec0 <__errno_location@plt>
   16868:	mov	r3, r0
   1686c:	ldr	r3, [r3]
   16870:	cmp	r3, #0
   16874:	beq	1689c <__assert_fail@plt+0x58f8>
   16878:	bl	10ec0 <__errno_location@plt>
   1687c:	mov	r3, r0
   16880:	ldr	r3, [r3]
   16884:	cmp	r3, #34	; 0x22
   16888:	beq	16894 <__assert_fail@plt+0x58f0>
   1688c:	mov	r3, #4
   16890:	b	16d18 <__assert_fail@plt+0x5d74>
   16894:	mov	r3, #1
   16898:	str	r3, [fp, #-8]
   1689c:	ldr	r3, [fp, #4]
   168a0:	cmp	r3, #0
   168a4:	bne	168bc <__assert_fail@plt+0x5918>
   168a8:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   168ac:	ldr	r1, [fp, #-60]	; 0xffffffc4
   168b0:	strd	r2, [r1]
   168b4:	ldr	r3, [fp, #-8]
   168b8:	b	16d18 <__assert_fail@plt+0x5d74>
   168bc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   168c0:	ldr	r3, [r3]
   168c4:	ldrb	r3, [r3]
   168c8:	cmp	r3, #0
   168cc:	beq	16d08 <__assert_fail@plt+0x5d64>
   168d0:	mov	r3, #1024	; 0x400
   168d4:	str	r3, [fp, #-20]	; 0xffffffec
   168d8:	mov	r3, #1
   168dc:	str	r3, [fp, #-24]	; 0xffffffe8
   168e0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   168e4:	ldr	r3, [r3]
   168e8:	ldrb	r3, [r3]
   168ec:	mov	r1, r3
   168f0:	ldr	r0, [fp, #4]
   168f4:	bl	10ea8 <strchr@plt>
   168f8:	mov	r3, r0
   168fc:	cmp	r3, #0
   16900:	bne	1691c <__assert_fail@plt+0x5978>
   16904:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   16908:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1690c:	strd	r2, [r1]
   16910:	ldr	r3, [fp, #-8]
   16914:	orr	r3, r3, #2
   16918:	b	16d18 <__assert_fail@plt+0x5d74>
   1691c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16920:	ldr	r3, [r3]
   16924:	ldrb	r3, [r3]
   16928:	sub	r3, r3, #69	; 0x45
   1692c:	cmp	r3, #47	; 0x2f
   16930:	ldrls	pc, [pc, r3, lsl #2]
   16934:	b	16a80 <__assert_fail@plt+0x5adc>
   16938:	strdeq	r6, [r1], -r8
   1693c:	andeq	r6, r1, r0, lsl #21
   16940:	strdeq	r6, [r1], -r8
   16944:	andeq	r6, r1, r0, lsl #21
   16948:	andeq	r6, r1, r0, lsl #21
   1694c:	andeq	r6, r1, r0, lsl #21
   16950:	strdeq	r6, [r1], -r8
   16954:	andeq	r6, r1, r0, lsl #21
   16958:	strdeq	r6, [r1], -r8
   1695c:	andeq	r6, r1, r0, lsl #21
   16960:	andeq	r6, r1, r0, lsl #21
   16964:	strdeq	r6, [r1], -r8
   16968:	andeq	r6, r1, r0, lsl #21
   1696c:	andeq	r6, r1, r0, lsl #21
   16970:	andeq	r6, r1, r0, lsl #21
   16974:	strdeq	r6, [r1], -r8
   16978:	andeq	r6, r1, r0, lsl #21
   1697c:	andeq	r6, r1, r0, lsl #21
   16980:	andeq	r6, r1, r0, lsl #21
   16984:	andeq	r6, r1, r0, lsl #21
   16988:	strdeq	r6, [r1], -r8
   1698c:	strdeq	r6, [r1], -r8
   16990:	andeq	r6, r1, r0, lsl #21
   16994:	andeq	r6, r1, r0, lsl #21
   16998:	andeq	r6, r1, r0, lsl #21
   1699c:	andeq	r6, r1, r0, lsl #21
   169a0:	andeq	r6, r1, r0, lsl #21
   169a4:	andeq	r6, r1, r0, lsl #21
   169a8:	andeq	r6, r1, r0, lsl #21
   169ac:	andeq	r6, r1, r0, lsl #21
   169b0:	andeq	r6, r1, r0, lsl #21
   169b4:	andeq	r6, r1, r0, lsl #21
   169b8:	andeq	r6, r1, r0, lsl #21
   169bc:	andeq	r6, r1, r0, lsl #21
   169c0:	strdeq	r6, [r1], -r8
   169c4:	andeq	r6, r1, r0, lsl #21
   169c8:	andeq	r6, r1, r0, lsl #21
   169cc:	andeq	r6, r1, r0, lsl #21
   169d0:	strdeq	r6, [r1], -r8
   169d4:	andeq	r6, r1, r0, lsl #21
   169d8:	strdeq	r6, [r1], -r8
   169dc:	andeq	r6, r1, r0, lsl #21
   169e0:	andeq	r6, r1, r0, lsl #21
   169e4:	andeq	r6, r1, r0, lsl #21
   169e8:	andeq	r6, r1, r0, lsl #21
   169ec:	andeq	r6, r1, r0, lsl #21
   169f0:	andeq	r6, r1, r0, lsl #21
   169f4:	strdeq	r6, [r1], -r8
   169f8:	mov	r1, #48	; 0x30
   169fc:	ldr	r0, [fp, #4]
   16a00:	bl	10ea8 <strchr@plt>
   16a04:	mov	r3, r0
   16a08:	cmp	r3, #0
   16a0c:	beq	16a80 <__assert_fail@plt+0x5adc>
   16a10:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16a14:	ldr	r3, [r3]
   16a18:	add	r3, r3, #1
   16a1c:	ldrb	r3, [r3]
   16a20:	cmp	r3, #68	; 0x44
   16a24:	beq	16a64 <__assert_fail@plt+0x5ac0>
   16a28:	cmp	r3, #105	; 0x69
   16a2c:	beq	16a3c <__assert_fail@plt+0x5a98>
   16a30:	cmp	r3, #66	; 0x42
   16a34:	beq	16a64 <__assert_fail@plt+0x5ac0>
   16a38:	b	16a80 <__assert_fail@plt+0x5adc>
   16a3c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16a40:	ldr	r3, [r3]
   16a44:	add	r3, r3, #2
   16a48:	ldrb	r3, [r3]
   16a4c:	cmp	r3, #66	; 0x42
   16a50:	bne	16a7c <__assert_fail@plt+0x5ad8>
   16a54:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16a58:	add	r3, r3, #2
   16a5c:	str	r3, [fp, #-24]	; 0xffffffe8
   16a60:	b	16a7c <__assert_fail@plt+0x5ad8>
   16a64:	mov	r3, #1000	; 0x3e8
   16a68:	str	r3, [fp, #-20]	; 0xffffffec
   16a6c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16a70:	add	r3, r3, #1
   16a74:	str	r3, [fp, #-24]	; 0xffffffe8
   16a78:	b	16a80 <__assert_fail@plt+0x5adc>
   16a7c:	nop			; (mov r0, r0)
   16a80:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16a84:	ldr	r3, [r3]
   16a88:	ldrb	r3, [r3]
   16a8c:	sub	r3, r3, #66	; 0x42
   16a90:	cmp	r3, #53	; 0x35
   16a94:	ldrls	pc, [pc, r3, lsl #2]
   16a98:	b	16ca8 <__assert_fail@plt+0x5d04>
   16a9c:	andeq	r6, r1, ip, lsl #23
   16aa0:	andeq	r6, r1, r8, lsr #25
   16aa4:	andeq	r6, r1, r8, lsr #25
   16aa8:			; <UNDEFINED> instruction: 0x00016bb0
   16aac:	andeq	r6, r1, r8, lsr #25
   16ab0:	andeq	r6, r1, ip, asr #23
   16ab4:	andeq	r6, r1, r8, lsr #25
   16ab8:	andeq	r6, r1, r8, lsr #25
   16abc:	andeq	r6, r1, r8, lsr #25
   16ac0:	andeq	r6, r1, r8, ror #23
   16ac4:	andeq	r6, r1, r8, lsr #25
   16ac8:	andeq	r6, r1, r4, lsl #24
   16acc:	andeq	r6, r1, r8, lsr #25
   16ad0:	andeq	r6, r1, r8, lsr #25
   16ad4:	andeq	r6, r1, r0, lsr #24
   16ad8:	andeq	r6, r1, r8, lsr #25
   16adc:	andeq	r6, r1, r8, lsr #25
   16ae0:	andeq	r6, r1, r8, lsr #25
   16ae4:	andeq	r6, r1, ip, lsr ip
   16ae8:	andeq	r6, r1, r8, lsr #25
   16aec:	andeq	r6, r1, r8, lsr #25
   16af0:	andeq	r6, r1, r8, lsr #25
   16af4:	andeq	r6, r1, r8, lsr #25
   16af8:	andeq	r6, r1, r0, ror ip
   16afc:	andeq	r6, r1, ip, lsl #25
   16b00:	andeq	r6, r1, r8, lsr #25
   16b04:	andeq	r6, r1, r8, lsr #25
   16b08:	andeq	r6, r1, r8, lsr #25
   16b0c:	andeq	r6, r1, r8, lsr #25
   16b10:	andeq	r6, r1, r8, lsr #25
   16b14:	andeq	r6, r1, r8, lsr #25
   16b18:	andeq	r6, r1, r8, lsr #25
   16b1c:	andeq	r6, r1, r4, ror fp
   16b20:	andeq	r6, r1, r4, lsr #23
   16b24:	andeq	r6, r1, r8, lsr #25
   16b28:	andeq	r6, r1, r8, lsr #25
   16b2c:	andeq	r6, r1, r8, lsr #25
   16b30:	andeq	r6, r1, ip, asr #23
   16b34:	andeq	r6, r1, r8, lsr #25
   16b38:	andeq	r6, r1, r8, lsr #25
   16b3c:	andeq	r6, r1, r8, lsr #25
   16b40:	andeq	r6, r1, r8, ror #23
   16b44:	andeq	r6, r1, r8, lsr #25
   16b48:	andeq	r6, r1, r4, lsl #24
   16b4c:	andeq	r6, r1, r8, lsr #25
   16b50:	andeq	r6, r1, r8, lsr #25
   16b54:	andeq	r6, r1, r8, lsr #25
   16b58:	andeq	r6, r1, r8, lsr #25
   16b5c:	andeq	r6, r1, r8, lsr #25
   16b60:	andeq	r6, r1, r8, lsr #25
   16b64:	andeq	r6, r1, ip, lsr ip
   16b68:	andeq	r6, r1, r8, lsr #25
   16b6c:	andeq	r6, r1, r8, lsr #25
   16b70:	andeq	r6, r1, r8, asr ip
   16b74:	sub	r3, fp, #44	; 0x2c
   16b78:	mov	r1, #512	; 0x200
   16b7c:	mov	r0, r3
   16b80:	bl	16528 <__assert_fail@plt+0x5584>
   16b84:	str	r0, [fp, #-28]	; 0xffffffe4
   16b88:	b	16cc0 <__assert_fail@plt+0x5d1c>
   16b8c:	sub	r3, fp, #44	; 0x2c
   16b90:	mov	r1, #1024	; 0x400
   16b94:	mov	r0, r3
   16b98:	bl	16528 <__assert_fail@plt+0x5584>
   16b9c:	str	r0, [fp, #-28]	; 0xffffffe4
   16ba0:	b	16cc0 <__assert_fail@plt+0x5d1c>
   16ba4:	mov	r3, #0
   16ba8:	str	r3, [fp, #-28]	; 0xffffffe4
   16bac:	b	16cc0 <__assert_fail@plt+0x5d1c>
   16bb0:	sub	r3, fp, #44	; 0x2c
   16bb4:	mov	r2, #6
   16bb8:	ldr	r1, [fp, #-20]	; 0xffffffec
   16bbc:	mov	r0, r3
   16bc0:	bl	1668c <__assert_fail@plt+0x56e8>
   16bc4:	str	r0, [fp, #-28]	; 0xffffffe4
   16bc8:	b	16cc0 <__assert_fail@plt+0x5d1c>
   16bcc:	sub	r3, fp, #44	; 0x2c
   16bd0:	mov	r2, #3
   16bd4:	ldr	r1, [fp, #-20]	; 0xffffffec
   16bd8:	mov	r0, r3
   16bdc:	bl	1668c <__assert_fail@plt+0x56e8>
   16be0:	str	r0, [fp, #-28]	; 0xffffffe4
   16be4:	b	16cc0 <__assert_fail@plt+0x5d1c>
   16be8:	sub	r3, fp, #44	; 0x2c
   16bec:	mov	r2, #1
   16bf0:	ldr	r1, [fp, #-20]	; 0xffffffec
   16bf4:	mov	r0, r3
   16bf8:	bl	1668c <__assert_fail@plt+0x56e8>
   16bfc:	str	r0, [fp, #-28]	; 0xffffffe4
   16c00:	b	16cc0 <__assert_fail@plt+0x5d1c>
   16c04:	sub	r3, fp, #44	; 0x2c
   16c08:	mov	r2, #2
   16c0c:	ldr	r1, [fp, #-20]	; 0xffffffec
   16c10:	mov	r0, r3
   16c14:	bl	1668c <__assert_fail@plt+0x56e8>
   16c18:	str	r0, [fp, #-28]	; 0xffffffe4
   16c1c:	b	16cc0 <__assert_fail@plt+0x5d1c>
   16c20:	sub	r3, fp, #44	; 0x2c
   16c24:	mov	r2, #5
   16c28:	ldr	r1, [fp, #-20]	; 0xffffffec
   16c2c:	mov	r0, r3
   16c30:	bl	1668c <__assert_fail@plt+0x56e8>
   16c34:	str	r0, [fp, #-28]	; 0xffffffe4
   16c38:	b	16cc0 <__assert_fail@plt+0x5d1c>
   16c3c:	sub	r3, fp, #44	; 0x2c
   16c40:	mov	r2, #4
   16c44:	ldr	r1, [fp, #-20]	; 0xffffffec
   16c48:	mov	r0, r3
   16c4c:	bl	1668c <__assert_fail@plt+0x56e8>
   16c50:	str	r0, [fp, #-28]	; 0xffffffe4
   16c54:	b	16cc0 <__assert_fail@plt+0x5d1c>
   16c58:	sub	r3, fp, #44	; 0x2c
   16c5c:	mov	r1, #2
   16c60:	mov	r0, r3
   16c64:	bl	16528 <__assert_fail@plt+0x5584>
   16c68:	str	r0, [fp, #-28]	; 0xffffffe4
   16c6c:	b	16cc0 <__assert_fail@plt+0x5d1c>
   16c70:	sub	r3, fp, #44	; 0x2c
   16c74:	mov	r2, #8
   16c78:	ldr	r1, [fp, #-20]	; 0xffffffec
   16c7c:	mov	r0, r3
   16c80:	bl	1668c <__assert_fail@plt+0x56e8>
   16c84:	str	r0, [fp, #-28]	; 0xffffffe4
   16c88:	b	16cc0 <__assert_fail@plt+0x5d1c>
   16c8c:	sub	r3, fp, #44	; 0x2c
   16c90:	mov	r2, #7
   16c94:	ldr	r1, [fp, #-20]	; 0xffffffec
   16c98:	mov	r0, r3
   16c9c:	bl	1668c <__assert_fail@plt+0x56e8>
   16ca0:	str	r0, [fp, #-28]	; 0xffffffe4
   16ca4:	b	16cc0 <__assert_fail@plt+0x5d1c>
   16ca8:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   16cac:	ldr	r1, [fp, #-60]	; 0xffffffc4
   16cb0:	strd	r2, [r1]
   16cb4:	ldr	r3, [fp, #-8]
   16cb8:	orr	r3, r3, #2
   16cbc:	b	16d18 <__assert_fail@plt+0x5d74>
   16cc0:	ldr	r2, [fp, #-8]
   16cc4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16cc8:	orr	r3, r2, r3
   16ccc:	str	r3, [fp, #-8]
   16cd0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16cd4:	ldr	r2, [r3]
   16cd8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16cdc:	add	r2, r2, r3
   16ce0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16ce4:	str	r2, [r3]
   16ce8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16cec:	ldr	r3, [r3]
   16cf0:	ldrb	r3, [r3]
   16cf4:	cmp	r3, #0
   16cf8:	beq	16d08 <__assert_fail@plt+0x5d64>
   16cfc:	ldr	r3, [fp, #-8]
   16d00:	orr	r3, r3, #2
   16d04:	str	r3, [fp, #-8]
   16d08:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   16d0c:	ldr	r1, [fp, #-60]	; 0xffffffc4
   16d10:	strd	r2, [r1]
   16d14:	ldr	r3, [fp, #-8]
   16d18:	mov	r0, r3
   16d1c:	sub	sp, fp, #4
   16d20:	pop	{fp, pc}
   16d24:			; <UNDEFINED> instruction: 0x000191b4
   16d28:	andeq	r9, r1, ip, ror r1
   16d2c:	andeq	r9, r1, ip, lsl #3
   16d30:	push	{r4, r5, fp, lr}
   16d34:	add	fp, sp, #12
   16d38:	sub	sp, sp, #16
   16d3c:	str	r0, [fp, #-24]	; 0xffffffe8
   16d40:	str	r1, [fp, #-28]	; 0xffffffe4
   16d44:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16d48:	cmp	r3, #0
   16d4c:	beq	16d5c <__assert_fail@plt+0x5db8>
   16d50:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16d54:	cmp	r3, #0
   16d58:	bne	16d6c <__assert_fail@plt+0x5dc8>
   16d5c:	mov	r3, #1
   16d60:	str	r3, [fp, #-28]	; 0xffffffe4
   16d64:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16d68:	str	r3, [fp, #-24]	; 0xffffffe8
   16d6c:	mov	r1, #0
   16d70:	ldr	r2, [fp, #-24]	; 0xffffffe8
   16d74:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16d78:	umull	r2, r3, r2, r3
   16d7c:	mov	r4, r3
   16d80:	mov	r5, #0
   16d84:	cmp	r4, #0
   16d88:	beq	16d90 <__assert_fail@plt+0x5dec>
   16d8c:	mov	r1, #1
   16d90:	cmp	r2, #0
   16d94:	bge	16d9c <__assert_fail@plt+0x5df8>
   16d98:	mov	r1, #1
   16d9c:	mov	r3, r2
   16da0:	str	r3, [fp, #-20]	; 0xffffffec
   16da4:	mov	r3, r1
   16da8:	and	r3, r3, #1
   16dac:	uxtb	r3, r3
   16db0:	cmp	r3, #0
   16db4:	beq	16dd0 <__assert_fail@plt+0x5e2c>
   16db8:	bl	10ec0 <__errno_location@plt>
   16dbc:	mov	r2, r0
   16dc0:	mov	r3, #12
   16dc4:	str	r3, [r2]
   16dc8:	mov	r3, #0
   16dcc:	b	16de8 <__assert_fail@plt+0x5e44>
   16dd0:	ldr	r1, [fp, #-28]	; 0xffffffe4
   16dd4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16dd8:	bl	10d04 <calloc@plt>
   16ddc:	mov	r3, r0
   16de0:	str	r3, [fp, #-16]
   16de4:	ldr	r3, [fp, #-16]
   16de8:	mov	r0, r3
   16dec:	sub	sp, fp, #12
   16df0:	pop	{r4, r5, fp, pc}
   16df4:	push	{r4, r5, fp, lr}
   16df8:	add	fp, sp, #12
   16dfc:	sub	sp, sp, #16
   16e00:	str	r0, [fp, #-24]	; 0xffffffe8
   16e04:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16e08:	cmp	r3, #0
   16e0c:	bne	16e18 <__assert_fail@plt+0x5e74>
   16e10:	mov	r3, #1
   16e14:	str	r3, [fp, #-24]	; 0xffffffe8
   16e18:	mov	r1, #0
   16e1c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16e20:	mov	r2, r3
   16e24:	mov	r3, #0
   16e28:	mov	r4, r3
   16e2c:	mov	r5, #0
   16e30:	cmp	r4, #0
   16e34:	beq	16e3c <__assert_fail@plt+0x5e98>
   16e38:	mov	r1, #1
   16e3c:	cmp	r2, #0
   16e40:	bge	16e48 <__assert_fail@plt+0x5ea4>
   16e44:	mov	r1, #1
   16e48:	mov	r3, r2
   16e4c:	str	r3, [fp, #-20]	; 0xffffffec
   16e50:	mov	r3, r1
   16e54:	and	r3, r3, #1
   16e58:	uxtb	r3, r3
   16e5c:	cmp	r3, #0
   16e60:	beq	16e7c <__assert_fail@plt+0x5ed8>
   16e64:	bl	10ec0 <__errno_location@plt>
   16e68:	mov	r2, r0
   16e6c:	mov	r3, #12
   16e70:	str	r3, [r2]
   16e74:	mov	r3, #0
   16e78:	b	16e90 <__assert_fail@plt+0x5eec>
   16e7c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16e80:	bl	10e30 <malloc@plt>
   16e84:	mov	r3, r0
   16e88:	str	r3, [fp, #-16]
   16e8c:	ldr	r3, [fp, #-16]
   16e90:	mov	r0, r3
   16e94:	sub	sp, fp, #12
   16e98:	pop	{r4, r5, fp, pc}
   16e9c:	push	{r4, r5, fp, lr}
   16ea0:	add	fp, sp, #12
   16ea4:	sub	sp, sp, #16
   16ea8:	str	r0, [fp, #-24]	; 0xffffffe8
   16eac:	str	r1, [fp, #-28]	; 0xffffffe4
   16eb0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16eb4:	cmp	r3, #0
   16eb8:	bne	16ecc <__assert_fail@plt+0x5f28>
   16ebc:	ldr	r0, [fp, #-28]	; 0xffffffe4
   16ec0:	bl	16df4 <__assert_fail@plt+0x5e50>
   16ec4:	mov	r3, r0
   16ec8:	b	16f60 <__assert_fail@plt+0x5fbc>
   16ecc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16ed0:	cmp	r3, #0
   16ed4:	bne	16ee8 <__assert_fail@plt+0x5f44>
   16ed8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16edc:	bl	129ac <__assert_fail@plt+0x1a08>
   16ee0:	mov	r3, #0
   16ee4:	b	16f60 <__assert_fail@plt+0x5fbc>
   16ee8:	mov	r1, #0
   16eec:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16ef0:	mov	r2, r3
   16ef4:	mov	r3, #0
   16ef8:	mov	r4, r3
   16efc:	mov	r5, #0
   16f00:	cmp	r4, #0
   16f04:	beq	16f0c <__assert_fail@plt+0x5f68>
   16f08:	mov	r1, #1
   16f0c:	cmp	r2, #0
   16f10:	bge	16f18 <__assert_fail@plt+0x5f74>
   16f14:	mov	r1, #1
   16f18:	mov	r3, r2
   16f1c:	str	r3, [fp, #-20]	; 0xffffffec
   16f20:	mov	r3, r1
   16f24:	and	r3, r3, #1
   16f28:	uxtb	r3, r3
   16f2c:	cmp	r3, #0
   16f30:	beq	16f4c <__assert_fail@plt+0x5fa8>
   16f34:	bl	10ec0 <__errno_location@plt>
   16f38:	mov	r2, r0
   16f3c:	mov	r3, #12
   16f40:	str	r3, [r2]
   16f44:	mov	r3, #0
   16f48:	b	16f60 <__assert_fail@plt+0x5fbc>
   16f4c:	ldr	r1, [fp, #-28]	; 0xffffffe4
   16f50:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16f54:	bl	10da0 <realloc@plt>
   16f58:	str	r0, [fp, #-16]
   16f5c:	ldr	r3, [fp, #-16]
   16f60:	mov	r0, r3
   16f64:	sub	sp, fp, #12
   16f68:	pop	{r4, r5, fp, pc}
   16f6c:	push	{fp, lr}
   16f70:	add	fp, sp, #4
   16f74:	sub	sp, sp, #16
   16f78:	str	r0, [fp, #-8]
   16f7c:	str	r1, [fp, #-12]
   16f80:	str	r2, [fp, #-16]
   16f84:	str	r3, [fp, #-20]	; 0xffffffec
   16f88:	ldr	r3, [fp, #-8]
   16f8c:	cmn	r3, #100	; 0x64
   16f90:	beq	16f98 <__assert_fail@plt+0x5ff4>
   16f94:	bl	10f98 <abort@plt>
   16f98:	ldr	r2, [fp, #-20]	; 0xffffffec
   16f9c:	ldr	r1, [fp, #-16]
   16fa0:	ldr	r0, [fp, #-12]
   16fa4:	bl	10dc4 <readlink@plt>
   16fa8:	mov	r3, r0
   16fac:	mov	r0, r3
   16fb0:	sub	sp, fp, #4
   16fb4:	pop	{fp, pc}
   16fb8:	push	{fp, lr}
   16fbc:	add	fp, sp, #4
   16fc0:	sub	sp, sp, #16
   16fc4:	str	r0, [fp, #-8]
   16fc8:	ldr	r3, [pc, #44]	; 16ffc <__assert_fail@plt+0x6058>
   16fcc:	str	r3, [sp, #4]
   16fd0:	mov	r3, #0
   16fd4:	str	r3, [sp]
   16fd8:	mov	r3, #0
   16fdc:	mov	r2, #0
   16fe0:	ldr	r1, [fp, #-8]
   16fe4:	mvn	r0, #99	; 0x63
   16fe8:	bl	17474 <__assert_fail@plt+0x64d0>
   16fec:	mov	r3, r0
   16ff0:	mov	r0, r3
   16ff4:	sub	sp, fp, #4
   16ff8:	pop	{fp, pc}
   16ffc:	andeq	r6, r1, ip, ror #30
   17000:	push	{fp}		; (str fp, [sp, #-4]!)
   17004:	add	fp, sp, #0
   17008:	sub	sp, sp, #28
   1700c:	str	r0, [fp, #-24]	; 0xffffffe8
   17010:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17014:	str	r3, [fp, #-8]
   17018:	mov	r3, #0
   1701c:	strb	r3, [fp, #-13]
   17020:	b	17030 <__assert_fail@plt+0x608c>
   17024:	ldr	r3, [fp, #-8]
   17028:	add	r3, r3, #1
   1702c:	str	r3, [fp, #-8]
   17030:	ldr	r3, [fp, #-8]
   17034:	ldrb	r3, [r3]
   17038:	cmp	r3, #47	; 0x2f
   1703c:	beq	17024 <__assert_fail@plt+0x6080>
   17040:	ldr	r3, [fp, #-8]
   17044:	str	r3, [fp, #-12]
   17048:	b	17090 <__assert_fail@plt+0x60ec>
   1704c:	ldr	r3, [fp, #-12]
   17050:	ldrb	r3, [r3]
   17054:	cmp	r3, #47	; 0x2f
   17058:	bne	17068 <__assert_fail@plt+0x60c4>
   1705c:	mov	r3, #1
   17060:	strb	r3, [fp, #-13]
   17064:	b	17084 <__assert_fail@plt+0x60e0>
   17068:	ldrb	r3, [fp, #-13]
   1706c:	cmp	r3, #0
   17070:	beq	17084 <__assert_fail@plt+0x60e0>
   17074:	ldr	r3, [fp, #-12]
   17078:	str	r3, [fp, #-8]
   1707c:	mov	r3, #0
   17080:	strb	r3, [fp, #-13]
   17084:	ldr	r3, [fp, #-12]
   17088:	add	r3, r3, #1
   1708c:	str	r3, [fp, #-12]
   17090:	ldr	r3, [fp, #-12]
   17094:	ldrb	r3, [r3]
   17098:	cmp	r3, #0
   1709c:	bne	1704c <__assert_fail@plt+0x60a8>
   170a0:	ldr	r3, [fp, #-8]
   170a4:	mov	r0, r3
   170a8:	add	sp, fp, #0
   170ac:	pop	{fp}		; (ldr fp, [sp], #4)
   170b0:	bx	lr
   170b4:	push	{fp, lr}
   170b8:	add	fp, sp, #4
   170bc:	sub	sp, sp, #16
   170c0:	str	r0, [fp, #-16]
   170c4:	mov	r3, #0
   170c8:	str	r3, [fp, #-12]
   170cc:	ldr	r0, [fp, #-16]
   170d0:	bl	10e9c <strlen@plt>
   170d4:	str	r0, [fp, #-8]
   170d8:	b	170e8 <__assert_fail@plt+0x6144>
   170dc:	ldr	r3, [fp, #-8]
   170e0:	sub	r3, r3, #1
   170e4:	str	r3, [fp, #-8]
   170e8:	ldr	r3, [fp, #-8]
   170ec:	cmp	r3, #1
   170f0:	bls	17110 <__assert_fail@plt+0x616c>
   170f4:	ldr	r3, [fp, #-8]
   170f8:	sub	r3, r3, #1
   170fc:	ldr	r2, [fp, #-16]
   17100:	add	r3, r2, r3
   17104:	ldrb	r3, [r3]
   17108:	cmp	r3, #47	; 0x2f
   1710c:	beq	170dc <__assert_fail@plt+0x6138>
   17110:	ldr	r3, [fp, #-8]
   17114:	mov	r0, r3
   17118:	sub	sp, fp, #4
   1711c:	pop	{fp, pc}
   17120:	push	{r4, r5, fp, lr}
   17124:	add	fp, sp, #12
   17128:	sub	sp, sp, #16
   1712c:	str	r0, [fp, #-24]	; 0xffffffe8
   17130:	str	r1, [fp, #-28]	; 0xffffffe4
   17134:	ldr	r5, [fp, #-24]	; 0xffffffe8
   17138:	ldr	r4, [fp, #-28]	; 0xffffffe4
   1713c:	cmp	r5, r4
   17140:	bne	1714c <__assert_fail@plt+0x61a8>
   17144:	mov	r3, #0
   17148:	b	171ac <__assert_fail@plt+0x6208>
   1714c:	ldrb	r3, [r5]
   17150:	mov	r0, r3
   17154:	bl	123e8 <__assert_fail@plt+0x1444>
   17158:	mov	r3, r0
   1715c:	strb	r3, [fp, #-13]
   17160:	ldrb	r3, [r4]
   17164:	mov	r0, r3
   17168:	bl	123e8 <__assert_fail@plt+0x1444>
   1716c:	mov	r3, r0
   17170:	strb	r3, [fp, #-14]
   17174:	ldrb	r3, [fp, #-13]
   17178:	cmp	r3, #0
   1717c:	beq	1719c <__assert_fail@plt+0x61f8>
   17180:	add	r5, r5, #1
   17184:	add	r4, r4, #1
   17188:	ldrb	r2, [fp, #-13]
   1718c:	ldrb	r3, [fp, #-14]
   17190:	cmp	r2, r3
   17194:	beq	1714c <__assert_fail@plt+0x61a8>
   17198:	b	171a0 <__assert_fail@plt+0x61fc>
   1719c:	nop			; (mov r0, r0)
   171a0:	ldrb	r2, [fp, #-13]
   171a4:	ldrb	r3, [fp, #-14]
   171a8:	sub	r3, r2, r3
   171ac:	mov	r0, r3
   171b0:	sub	sp, fp, #12
   171b4:	pop	{r4, r5, fp, pc}
   171b8:	push	{r4, fp, lr}
   171bc:	add	fp, sp, #8
   171c0:	sub	sp, sp, #52	; 0x34
   171c4:	str	r0, [fp, #-48]	; 0xffffffd0
   171c8:	str	r1, [fp, #-52]	; 0xffffffcc
   171cc:	str	r2, [fp, #-56]	; 0xffffffc8
   171d0:	str	r3, [fp, #-60]	; 0xffffffc4
   171d4:	ldr	r3, [fp, #4]
   171d8:	cmp	r3, #0
   171dc:	bne	171e8 <__assert_fail@plt+0x6244>
   171e0:	ldr	r3, [pc, #648]	; 17470 <__assert_fail@plt+0x64cc>
   171e4:	str	r3, [fp, #4]
   171e8:	ldr	r3, [fp, #-56]	; 0xffffffc8
   171ec:	cmp	r3, #0
   171f0:	bne	17204 <__assert_fail@plt+0x6260>
   171f4:	ldr	r3, [fp, #12]
   171f8:	str	r3, [fp, #-56]	; 0xffffffc8
   171fc:	mov	r3, #1024	; 0x400
   17200:	str	r3, [fp, #-60]	; 0xffffffc4
   17204:	ldr	r3, [fp, #-56]	; 0xffffffc8
   17208:	str	r3, [fp, #-16]
   1720c:	mvn	r3, #-2147483648	; 0x80000000
   17210:	str	r3, [fp, #-24]	; 0xffffffe8
   17214:	ldr	r2, [fp, #-24]	; 0xffffffe8
   17218:	ldr	r3, [fp, #-60]	; 0xffffffc4
   1721c:	cmp	r2, r3
   17220:	movcc	r3, r2
   17224:	movcs	r3, r3
   17228:	str	r3, [fp, #-20]	; 0xffffffec
   1722c:	b	17418 <__assert_fail@plt+0x6474>
   17230:	ldr	r3, [fp, #-20]	; 0xffffffec
   17234:	ldr	r4, [fp, #8]
   17238:	ldr	r2, [fp, #-16]
   1723c:	ldr	r1, [fp, #-52]	; 0xffffffcc
   17240:	ldr	r0, [fp, #-48]	; 0xffffffd0
   17244:	blx	r4
   17248:	str	r0, [fp, #-28]	; 0xffffffe4
   1724c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17250:	cmp	r3, #0
   17254:	bge	172a0 <__assert_fail@plt+0x62fc>
   17258:	ldr	r2, [fp, #-16]
   1725c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   17260:	cmp	r2, r3
   17264:	beq	17298 <__assert_fail@plt+0x62f4>
   17268:	bl	10ec0 <__errno_location@plt>
   1726c:	mov	r3, r0
   17270:	ldr	r3, [r3]
   17274:	str	r3, [fp, #-44]	; 0xffffffd4
   17278:	ldr	r3, [fp, #4]
   1727c:	ldr	r3, [r3, #8]
   17280:	ldr	r0, [fp, #-16]
   17284:	blx	r3
   17288:	bl	10ec0 <__errno_location@plt>
   1728c:	mov	r2, r0
   17290:	ldr	r3, [fp, #-44]	; 0xffffffd4
   17294:	str	r3, [r2]
   17298:	mov	r3, #0
   1729c:	b	17464 <__assert_fail@plt+0x64c0>
   172a0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   172a4:	str	r3, [fp, #-32]	; 0xffffffe0
   172a8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   172ac:	ldr	r3, [fp, #-20]	; 0xffffffec
   172b0:	cmp	r2, r3
   172b4:	bge	17398 <__assert_fail@plt+0x63f4>
   172b8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   172bc:	add	r2, r3, #1
   172c0:	str	r2, [fp, #-32]	; 0xffffffe0
   172c4:	mov	r2, r3
   172c8:	ldr	r3, [fp, #-16]
   172cc:	add	r3, r3, r2
   172d0:	mov	r2, #0
   172d4:	strb	r2, [r3]
   172d8:	ldr	r2, [fp, #-16]
   172dc:	ldr	r3, [fp, #12]
   172e0:	cmp	r2, r3
   172e4:	bne	17330 <__assert_fail@plt+0x638c>
   172e8:	ldr	r3, [fp, #4]
   172ec:	ldr	r3, [r3]
   172f0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   172f4:	mov	r0, r2
   172f8:	blx	r3
   172fc:	str	r0, [fp, #-36]	; 0xffffffdc
   17300:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17304:	str	r3, [fp, #-20]	; 0xffffffec
   17308:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1730c:	cmp	r3, #0
   17310:	beq	17428 <__assert_fail@plt+0x6484>
   17314:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17318:	mov	r2, r3
   1731c:	ldr	r1, [fp, #-16]
   17320:	ldr	r0, [fp, #-36]	; 0xffffffdc
   17324:	bl	10d64 <memcpy@plt>
   17328:	mov	r3, r0
   1732c:	b	17464 <__assert_fail@plt+0x64c0>
   17330:	ldr	r2, [fp, #-32]	; 0xffffffe0
   17334:	ldr	r3, [fp, #-20]	; 0xffffffec
   17338:	cmp	r2, r3
   1733c:	bge	17390 <__assert_fail@plt+0x63ec>
   17340:	ldr	r2, [fp, #-16]
   17344:	ldr	r3, [fp, #-56]	; 0xffffffc8
   17348:	cmp	r2, r3
   1734c:	beq	17390 <__assert_fail@plt+0x63ec>
   17350:	ldr	r3, [fp, #4]
   17354:	ldr	r3, [r3, #4]
   17358:	cmp	r3, #0
   1735c:	beq	17390 <__assert_fail@plt+0x63ec>
   17360:	ldr	r3, [fp, #4]
   17364:	ldr	r3, [r3, #4]
   17368:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1736c:	mov	r1, r2
   17370:	ldr	r0, [fp, #-16]
   17374:	blx	r3
   17378:	str	r0, [fp, #-40]	; 0xffffffd8
   1737c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   17380:	cmp	r3, #0
   17384:	beq	17390 <__assert_fail@plt+0x63ec>
   17388:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1738c:	b	17464 <__assert_fail@plt+0x64c0>
   17390:	ldr	r3, [fp, #-16]
   17394:	b	17464 <__assert_fail@plt+0x64c0>
   17398:	ldr	r2, [fp, #-16]
   1739c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   173a0:	cmp	r2, r3
   173a4:	beq	173b8 <__assert_fail@plt+0x6414>
   173a8:	ldr	r3, [fp, #4]
   173ac:	ldr	r3, [r3, #8]
   173b0:	ldr	r0, [fp, #-16]
   173b4:	blx	r3
   173b8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   173bc:	lsr	r2, r3, #31
   173c0:	add	r3, r2, r3
   173c4:	asr	r3, r3, #1
   173c8:	mov	r2, r3
   173cc:	ldr	r3, [fp, #-20]	; 0xffffffec
   173d0:	cmp	r2, r3
   173d4:	bgt	173f0 <__assert_fail@plt+0x644c>
   173d8:	bl	10ec0 <__errno_location@plt>
   173dc:	mov	r2, r0
   173e0:	mov	r3, #36	; 0x24
   173e4:	str	r3, [r2]
   173e8:	mov	r3, #0
   173ec:	b	17464 <__assert_fail@plt+0x64c0>
   173f0:	ldr	r3, [fp, #-20]	; 0xffffffec
   173f4:	lsl	r3, r3, #1
   173f8:	add	r3, r3, #1
   173fc:	str	r3, [fp, #-20]	; 0xffffffec
   17400:	ldr	r3, [fp, #4]
   17404:	ldr	r3, [r3]
   17408:	ldr	r2, [fp, #-20]	; 0xffffffec
   1740c:	mov	r0, r2
   17410:	blx	r3
   17414:	str	r0, [fp, #-16]
   17418:	ldr	r3, [fp, #-16]
   1741c:	cmp	r3, #0
   17420:	bne	17230 <__assert_fail@plt+0x628c>
   17424:	b	1742c <__assert_fail@plt+0x6488>
   17428:	nop			; (mov r0, r0)
   1742c:	ldr	r3, [fp, #4]
   17430:	ldr	r3, [r3, #12]
   17434:	cmp	r3, #0
   17438:	beq	17450 <__assert_fail@plt+0x64ac>
   1743c:	ldr	r3, [fp, #4]
   17440:	ldr	r3, [r3, #12]
   17444:	ldr	r2, [fp, #-20]	; 0xffffffec
   17448:	mov	r0, r2
   1744c:	blx	r3
   17450:	bl	10ec0 <__errno_location@plt>
   17454:	mov	r2, r0
   17458:	mov	r3, #12
   1745c:	str	r3, [r2]
   17460:	mov	r3, #0
   17464:	mov	r0, r3
   17468:	sub	sp, fp, #8
   1746c:	pop	{r4, fp, pc}
   17470:	andeq	r9, r1, ip, asr #3
   17474:	push	{fp, lr}
   17478:	add	fp, sp, #4
   1747c:	sub	sp, sp, #1056	; 0x420
   17480:	str	r0, [fp, #-1032]	; 0xfffffbf8
   17484:	str	r1, [fp, #-1036]	; 0xfffffbf4
   17488:	str	r2, [fp, #-1040]	; 0xfffffbf0
   1748c:	str	r3, [fp, #-1044]	; 0xfffffbec
   17490:	sub	r3, fp, #1024	; 0x400
   17494:	sub	r3, r3, #4
   17498:	str	r3, [sp, #8]
   1749c:	ldr	r3, [fp, #8]
   174a0:	str	r3, [sp, #4]
   174a4:	ldr	r3, [fp, #4]
   174a8:	str	r3, [sp]
   174ac:	ldr	r3, [fp, #-1044]	; 0xfffffbec
   174b0:	ldr	r2, [fp, #-1040]	; 0xfffffbf0
   174b4:	ldr	r1, [fp, #-1036]	; 0xfffffbf4
   174b8:	ldr	r0, [fp, #-1032]	; 0xfffffbf8
   174bc:	bl	171b8 <__assert_fail@plt+0x6214>
   174c0:	mov	r3, r0
   174c4:	mov	r0, r3
   174c8:	sub	sp, fp, #4
   174cc:	pop	{fp, pc}
   174d0:	push	{fp, lr}
   174d4:	add	fp, sp, #4
   174d8:	sub	sp, sp, #16
   174dc:	str	r0, [fp, #-16]
   174e0:	ldr	r0, [fp, #-16]
   174e4:	bl	10df4 <__fpending@plt>
   174e8:	mov	r3, r0
   174ec:	cmp	r3, #0
   174f0:	movne	r3, #1
   174f4:	moveq	r3, #0
   174f8:	strb	r3, [fp, #-5]
   174fc:	ldr	r0, [fp, #-16]
   17500:	bl	10e00 <ferror_unlocked@plt>
   17504:	mov	r3, r0
   17508:	cmp	r3, #0
   1750c:	movne	r3, #1
   17510:	moveq	r3, #0
   17514:	strb	r3, [fp, #-6]
   17518:	ldr	r0, [fp, #-16]
   1751c:	bl	175a8 <__assert_fail@plt+0x6604>
   17520:	mov	r3, r0
   17524:	cmp	r3, #0
   17528:	movne	r3, #1
   1752c:	moveq	r3, #0
   17530:	strb	r3, [fp, #-7]
   17534:	ldrb	r3, [fp, #-6]
   17538:	cmp	r3, #0
   1753c:	bne	1756c <__assert_fail@plt+0x65c8>
   17540:	ldrb	r3, [fp, #-7]
   17544:	cmp	r3, #0
   17548:	beq	17598 <__assert_fail@plt+0x65f4>
   1754c:	ldrb	r3, [fp, #-5]
   17550:	cmp	r3, #0
   17554:	bne	1756c <__assert_fail@plt+0x65c8>
   17558:	bl	10ec0 <__errno_location@plt>
   1755c:	mov	r3, r0
   17560:	ldr	r3, [r3]
   17564:	cmp	r3, #9
   17568:	beq	17598 <__assert_fail@plt+0x65f4>
   1756c:	ldrb	r3, [fp, #-7]
   17570:	eor	r3, r3, #1
   17574:	uxtb	r3, r3
   17578:	cmp	r3, #0
   1757c:	beq	17590 <__assert_fail@plt+0x65ec>
   17580:	bl	10ec0 <__errno_location@plt>
   17584:	mov	r2, r0
   17588:	mov	r3, #0
   1758c:	str	r3, [r2]
   17590:	mvn	r3, #0
   17594:	b	1759c <__assert_fail@plt+0x65f8>
   17598:	mov	r3, #0
   1759c:	mov	r0, r3
   175a0:	sub	sp, fp, #4
   175a4:	pop	{fp, pc}
   175a8:	push	{fp, lr}
   175ac:	add	fp, sp, #4
   175b0:	sub	sp, sp, #32
   175b4:	str	r0, [fp, #-24]	; 0xffffffe8
   175b8:	mov	r3, #0
   175bc:	str	r3, [fp, #-8]
   175c0:	mov	r3, #0
   175c4:	str	r3, [fp, #-12]
   175c8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   175cc:	bl	10ee4 <fileno@plt>
   175d0:	str	r0, [fp, #-16]
   175d4:	ldr	r3, [fp, #-16]
   175d8:	cmp	r3, #0
   175dc:	bge	175f0 <__assert_fail@plt+0x664c>
   175e0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   175e4:	bl	10f14 <fclose@plt>
   175e8:	mov	r3, r0
   175ec:	b	17694 <__assert_fail@plt+0x66f0>
   175f0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   175f4:	bl	10e48 <__freading@plt>
   175f8:	mov	r3, r0
   175fc:	cmp	r3, #0
   17600:	beq	1763c <__assert_fail@plt+0x6698>
   17604:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17608:	bl	10ee4 <fileno@plt>
   1760c:	mov	r1, r0
   17610:	mov	r3, #1
   17614:	str	r3, [sp]
   17618:	mov	r2, #0
   1761c:	mov	r3, #0
   17620:	mov	r0, r1
   17624:	bl	10ddc <lseek64@plt>
   17628:	mvn	r2, #0
   1762c:	mvn	r3, #0
   17630:	cmp	r1, r3
   17634:	cmpeq	r0, r2
   17638:	beq	17660 <__assert_fail@plt+0x66bc>
   1763c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17640:	bl	176e8 <__assert_fail@plt+0x6744>
   17644:	mov	r3, r0
   17648:	cmp	r3, #0
   1764c:	beq	17660 <__assert_fail@plt+0x66bc>
   17650:	bl	10ec0 <__errno_location@plt>
   17654:	mov	r3, r0
   17658:	ldr	r3, [r3]
   1765c:	str	r3, [fp, #-8]
   17660:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17664:	bl	10f14 <fclose@plt>
   17668:	str	r0, [fp, #-12]
   1766c:	ldr	r3, [fp, #-8]
   17670:	cmp	r3, #0
   17674:	beq	17690 <__assert_fail@plt+0x66ec>
   17678:	bl	10ec0 <__errno_location@plt>
   1767c:	mov	r2, r0
   17680:	ldr	r3, [fp, #-8]
   17684:	str	r3, [r2]
   17688:	mvn	r3, #0
   1768c:	str	r3, [fp, #-12]
   17690:	ldr	r3, [fp, #-12]
   17694:	mov	r0, r3
   17698:	sub	sp, fp, #4
   1769c:	pop	{fp, pc}
   176a0:	push	{fp, lr}
   176a4:	add	fp, sp, #4
   176a8:	sub	sp, sp, #16
   176ac:	str	r0, [fp, #-8]
   176b0:	ldr	r3, [fp, #-8]
   176b4:	ldr	r3, [r3]
   176b8:	and	r3, r3, #256	; 0x100
   176bc:	cmp	r3, #0
   176c0:	beq	176dc <__assert_fail@plt+0x6738>
   176c4:	mov	r3, #1
   176c8:	str	r3, [sp]
   176cc:	mov	r2, #0
   176d0:	mov	r3, #0
   176d4:	ldr	r0, [fp, #-8]
   176d8:	bl	17748 <__assert_fail@plt+0x67a4>
   176dc:	nop			; (mov r0, r0)
   176e0:	sub	sp, fp, #4
   176e4:	pop	{fp, pc}
   176e8:	push	{fp, lr}
   176ec:	add	fp, sp, #4
   176f0:	sub	sp, sp, #8
   176f4:	str	r0, [fp, #-8]
   176f8:	ldr	r3, [fp, #-8]
   176fc:	cmp	r3, #0
   17700:	beq	17718 <__assert_fail@plt+0x6774>
   17704:	ldr	r0, [fp, #-8]
   17708:	bl	10e48 <__freading@plt>
   1770c:	mov	r3, r0
   17710:	cmp	r3, #0
   17714:	bne	17728 <__assert_fail@plt+0x6784>
   17718:	ldr	r0, [fp, #-8]
   1771c:	bl	10d40 <fflush@plt>
   17720:	mov	r3, r0
   17724:	b	1773c <__assert_fail@plt+0x6798>
   17728:	ldr	r0, [fp, #-8]
   1772c:	bl	176a0 <__assert_fail@plt+0x66fc>
   17730:	ldr	r0, [fp, #-8]
   17734:	bl	10d40 <fflush@plt>
   17738:	mov	r3, r0
   1773c:	mov	r0, r3
   17740:	sub	sp, fp, #4
   17744:	pop	{fp, pc}
   17748:	push	{fp, lr}
   1774c:	add	fp, sp, #4
   17750:	sub	sp, sp, #32
   17754:	str	r0, [fp, #-16]
   17758:	strd	r2, [fp, #-28]	; 0xffffffe4
   1775c:	ldr	r3, [fp, #-16]
   17760:	ldr	r2, [r3, #8]
   17764:	ldr	r3, [fp, #-16]
   17768:	ldr	r3, [r3, #4]
   1776c:	cmp	r2, r3
   17770:	bne	17808 <__assert_fail@plt+0x6864>
   17774:	ldr	r3, [fp, #-16]
   17778:	ldr	r2, [r3, #20]
   1777c:	ldr	r3, [fp, #-16]
   17780:	ldr	r3, [r3, #16]
   17784:	cmp	r2, r3
   17788:	bne	17808 <__assert_fail@plt+0x6864>
   1778c:	ldr	r3, [fp, #-16]
   17790:	ldr	r3, [r3, #36]	; 0x24
   17794:	cmp	r3, #0
   17798:	bne	17808 <__assert_fail@plt+0x6864>
   1779c:	ldr	r0, [fp, #-16]
   177a0:	bl	10ee4 <fileno@plt>
   177a4:	mov	r1, r0
   177a8:	ldr	r3, [fp, #4]
   177ac:	str	r3, [sp]
   177b0:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   177b4:	mov	r0, r1
   177b8:	bl	10ddc <lseek64@plt>
   177bc:	strd	r0, [fp, #-12]
   177c0:	ldrd	r2, [fp, #-12]
   177c4:	mvn	r0, #0
   177c8:	mvn	r1, #0
   177cc:	cmp	r3, r1
   177d0:	cmpeq	r2, r0
   177d4:	bne	177e0 <__assert_fail@plt+0x683c>
   177d8:	mvn	r3, #0
   177dc:	b	17820 <__assert_fail@plt+0x687c>
   177e0:	ldr	r3, [fp, #-16]
   177e4:	ldr	r3, [r3]
   177e8:	bic	r2, r3, #16
   177ec:	ldr	r3, [fp, #-16]
   177f0:	str	r2, [r3]
   177f4:	ldr	r1, [fp, #-16]
   177f8:	ldrd	r2, [fp, #-12]
   177fc:	strd	r2, [r1, #80]	; 0x50
   17800:	mov	r3, #0
   17804:	b	17820 <__assert_fail@plt+0x687c>
   17808:	ldr	r3, [fp, #4]
   1780c:	str	r3, [sp]
   17810:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   17814:	ldr	r0, [fp, #-16]
   17818:	bl	10f20 <fseeko64@plt>
   1781c:	mov	r3, r0
   17820:	mov	r0, r3
   17824:	sub	sp, fp, #4
   17828:	pop	{fp, pc}
   1782c:	push	{fp, lr}
   17830:	add	fp, sp, #4
   17834:	bl	10ec0 <__errno_location@plt>
   17838:	mov	r2, r0
   1783c:	mov	r3, #12
   17840:	str	r3, [r2]
   17844:	mov	r3, #0
   17848:	mov	r0, r3
   1784c:	pop	{fp, pc}
   17850:	push	{fp, lr}
   17854:	add	fp, sp, #4
   17858:	sub	sp, sp, #8
   1785c:	str	r0, [fp, #-8]
   17860:	ldr	r3, [fp, #-8]
   17864:	mov	r0, r3
   17868:	bl	16df4 <__assert_fail@plt+0x5e50>
   1786c:	mov	r3, r0
   17870:	mov	r0, r3
   17874:	sub	sp, fp, #4
   17878:	pop	{fp, pc}
   1787c:	push	{fp, lr}
   17880:	add	fp, sp, #4
   17884:	sub	sp, sp, #8
   17888:	str	r0, [fp, #-8]
   1788c:	str	r1, [fp, #-12]
   17890:	ldr	r3, [fp, #-12]
   17894:	cmp	r3, #0
   17898:	moveq	r3, #1
   1789c:	movne	r3, #0
   178a0:	uxtb	r3, r3
   178a4:	mov	r2, r3
   178a8:	ldr	r3, [fp, #-12]
   178ac:	orr	r3, r2, r3
   178b0:	mov	r1, r3
   178b4:	ldr	r0, [fp, #-8]
   178b8:	bl	16e9c <__assert_fail@plt+0x5ef8>
   178bc:	mov	r3, r0
   178c0:	mov	r0, r3
   178c4:	sub	sp, fp, #4
   178c8:	pop	{fp, pc}
   178cc:	push	{fp, lr}
   178d0:	add	fp, sp, #4
   178d4:	sub	sp, sp, #8
   178d8:	str	r0, [fp, #-8]
   178dc:	str	r1, [fp, #-12]
   178e0:	ldr	r3, [fp, #-8]
   178e4:	ldr	r2, [fp, #-12]
   178e8:	mov	r1, r2
   178ec:	mov	r0, r3
   178f0:	bl	16d30 <__assert_fail@plt+0x5d8c>
   178f4:	mov	r3, r0
   178f8:	mov	r0, r3
   178fc:	sub	sp, fp, #4
   17900:	pop	{fp, pc}
   17904:	push	{fp, lr}
   17908:	add	fp, sp, #4
   1790c:	sub	sp, sp, #16
   17910:	str	r0, [fp, #-8]
   17914:	str	r1, [fp, #-12]
   17918:	str	r2, [fp, #-16]
   1791c:	ldr	r3, [fp, #-12]
   17920:	cmp	r3, #0
   17924:	beq	17934 <__assert_fail@plt+0x6990>
   17928:	ldr	r3, [fp, #-16]
   1792c:	cmp	r3, #0
   17930:	bne	17944 <__assert_fail@plt+0x69a0>
   17934:	mov	r3, #1
   17938:	str	r3, [fp, #-16]
   1793c:	ldr	r3, [fp, #-16]
   17940:	str	r3, [fp, #-12]
   17944:	ldr	r3, [fp, #-12]
   17948:	ldr	r2, [fp, #-16]
   1794c:	mov	r1, r3
   17950:	ldr	r0, [fp, #-8]
   17954:	bl	17a70 <__assert_fail@plt+0x6acc>
   17958:	mov	r3, r0
   1795c:	mov	r0, r3
   17960:	sub	sp, fp, #4
   17964:	pop	{fp, pc}
   17968:	push	{fp, lr}
   1796c:	add	fp, sp, #4
   17970:	sub	sp, sp, #8
   17974:	mov	r0, #14
   17978:	bl	10f68 <nl_langinfo@plt>
   1797c:	str	r0, [fp, #-8]
   17980:	ldr	r3, [fp, #-8]
   17984:	cmp	r3, #0
   17988:	bne	17994 <__assert_fail@plt+0x69f0>
   1798c:	ldr	r3, [pc, #40]	; 179bc <__assert_fail@plt+0x6a18>
   17990:	str	r3, [fp, #-8]
   17994:	ldr	r3, [fp, #-8]
   17998:	ldrb	r3, [r3]
   1799c:	cmp	r3, #0
   179a0:	bne	179ac <__assert_fail@plt+0x6a08>
   179a4:	ldr	r3, [pc, #20]	; 179c0 <__assert_fail@plt+0x6a1c>
   179a8:	str	r3, [fp, #-8]
   179ac:	ldr	r3, [fp, #-8]
   179b0:	mov	r0, r3
   179b4:	sub	sp, fp, #4
   179b8:	pop	{fp, pc}
   179bc:	andeq	r9, r1, r0, asr #3
   179c0:	andeq	r9, r1, r4, asr #3
   179c4:	push	{fp, lr}
   179c8:	add	fp, sp, #4
   179cc:	sub	sp, sp, #32
   179d0:	str	r0, [fp, #-24]	; 0xffffffe8
   179d4:	str	r1, [fp, #-28]	; 0xffffffe4
   179d8:	str	r2, [fp, #-32]	; 0xffffffe0
   179dc:	str	r3, [fp, #-36]	; 0xffffffdc
   179e0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   179e4:	cmp	r3, #0
   179e8:	bne	179f4 <__assert_fail@plt+0x6a50>
   179ec:	sub	r3, fp, #16
   179f0:	str	r3, [fp, #-24]	; 0xffffffe8
   179f4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   179f8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   179fc:	ldr	r1, [fp, #-28]	; 0xffffffe4
   17a00:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17a04:	bl	10e0c <mbrtowc@plt>
   17a08:	str	r0, [fp, #-8]
   17a0c:	ldr	r3, [fp, #-8]
   17a10:	cmn	r3, #3
   17a14:	bls	17a60 <__assert_fail@plt+0x6abc>
   17a18:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17a1c:	cmp	r3, #0
   17a20:	beq	17a60 <__assert_fail@plt+0x6abc>
   17a24:	mov	r0, #0
   17a28:	bl	17b20 <__assert_fail@plt+0x6b7c>
   17a2c:	mov	r3, r0
   17a30:	eor	r3, r3, #1
   17a34:	uxtb	r3, r3
   17a38:	cmp	r3, #0
   17a3c:	beq	17a60 <__assert_fail@plt+0x6abc>
   17a40:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17a44:	ldrb	r3, [r3]
   17a48:	strb	r3, [fp, #-9]
   17a4c:	ldrb	r2, [fp, #-9]
   17a50:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17a54:	str	r2, [r3]
   17a58:	mov	r3, #1
   17a5c:	b	17a64 <__assert_fail@plt+0x6ac0>
   17a60:	ldr	r3, [fp, #-8]
   17a64:	mov	r0, r3
   17a68:	sub	sp, fp, #4
   17a6c:	pop	{fp, pc}
   17a70:	push	{fp, lr}
   17a74:	add	fp, sp, #4
   17a78:	sub	sp, sp, #24
   17a7c:	str	r0, [fp, #-16]
   17a80:	str	r1, [fp, #-20]	; 0xffffffec
   17a84:	str	r2, [fp, #-24]	; 0xffffffe8
   17a88:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17a8c:	cmp	r3, #0
   17a90:	beq	17acc <__assert_fail@plt+0x6b28>
   17a94:	ldr	r1, [fp, #-24]	; 0xffffffe8
   17a98:	mvn	r0, #0
   17a9c:	bl	17d24 <__assert_fail@plt+0x6d80>
   17aa0:	mov	r3, r0
   17aa4:	mov	r2, r3
   17aa8:	ldr	r3, [fp, #-20]	; 0xffffffec
   17aac:	cmp	r2, r3
   17ab0:	bcs	17acc <__assert_fail@plt+0x6b28>
   17ab4:	ldr	r3, [fp, #-20]	; 0xffffffec
   17ab8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   17abc:	mul	r3, r2, r3
   17ac0:	str	r3, [fp, #-8]
   17ac4:	mov	r3, #1
   17ac8:	b	17ae0 <__assert_fail@plt+0x6b3c>
   17acc:	ldr	r3, [fp, #-20]	; 0xffffffec
   17ad0:	ldr	r2, [fp, #-24]	; 0xffffffe8
   17ad4:	mul	r3, r2, r3
   17ad8:	str	r3, [fp, #-8]
   17adc:	mov	r3, #0
   17ae0:	cmp	r3, #0
   17ae4:	beq	17b00 <__assert_fail@plt+0x6b5c>
   17ae8:	bl	10ec0 <__errno_location@plt>
   17aec:	mov	r2, r0
   17af0:	mov	r3, #12
   17af4:	str	r3, [r2]
   17af8:	mov	r3, #0
   17afc:	b	17b14 <__assert_fail@plt+0x6b70>
   17b00:	ldr	r3, [fp, #-8]
   17b04:	mov	r1, r3
   17b08:	ldr	r0, [fp, #-16]
   17b0c:	bl	16e9c <__assert_fail@plt+0x5ef8>
   17b10:	mov	r3, r0
   17b14:	mov	r0, r3
   17b18:	sub	sp, fp, #4
   17b1c:	pop	{fp, pc}
   17b20:	push	{fp, lr}
   17b24:	add	fp, sp, #4
   17b28:	sub	sp, sp, #272	; 0x110
   17b2c:	str	r0, [fp, #-272]	; 0xfffffef0
   17b30:	sub	r3, fp, #264	; 0x108
   17b34:	ldr	r2, [pc, #116]	; 17bb0 <__assert_fail@plt+0x6c0c>
   17b38:	mov	r1, r3
   17b3c:	ldr	r0, [fp, #-272]	; 0xfffffef0
   17b40:	bl	17cc4 <__assert_fail@plt+0x6d20>
   17b44:	mov	r3, r0
   17b48:	cmp	r3, #0
   17b4c:	beq	17b58 <__assert_fail@plt+0x6bb4>
   17b50:	mov	r3, #0
   17b54:	b	17ba4 <__assert_fail@plt+0x6c00>
   17b58:	sub	r3, fp, #264	; 0x108
   17b5c:	ldr	r1, [pc, #80]	; 17bb4 <__assert_fail@plt+0x6c10>
   17b60:	mov	r0, r3
   17b64:	bl	10d28 <strcmp@plt>
   17b68:	mov	r3, r0
   17b6c:	cmp	r3, #0
   17b70:	beq	17b98 <__assert_fail@plt+0x6bf4>
   17b74:	sub	r3, fp, #264	; 0x108
   17b78:	ldr	r1, [pc, #56]	; 17bb8 <__assert_fail@plt+0x6c14>
   17b7c:	mov	r0, r3
   17b80:	bl	10d28 <strcmp@plt>
   17b84:	mov	r3, r0
   17b88:	cmp	r3, #0
   17b8c:	beq	17b98 <__assert_fail@plt+0x6bf4>
   17b90:	mov	r3, #1
   17b94:	b	17b9c <__assert_fail@plt+0x6bf8>
   17b98:	mov	r3, #0
   17b9c:	and	r3, r3, #1
   17ba0:	uxtb	r3, r3
   17ba4:	mov	r0, r3
   17ba8:	sub	sp, fp, #4
   17bac:	pop	{fp, pc}
   17bb0:	andeq	r0, r0, r1, lsl #2
   17bb4:	ldrdeq	r9, [r1], -ip
   17bb8:	andeq	r9, r1, r0, ror #3
   17bbc:	push	{fp, lr}
   17bc0:	add	fp, sp, #4
   17bc4:	sub	sp, sp, #16
   17bc8:	str	r0, [fp, #-16]
   17bcc:	mov	r1, #0
   17bd0:	ldr	r0, [fp, #-16]
   17bd4:	bl	10f38 <setlocale@plt>
   17bd8:	str	r0, [fp, #-8]
   17bdc:	ldr	r3, [fp, #-8]
   17be0:	mov	r0, r3
   17be4:	sub	sp, fp, #4
   17be8:	pop	{fp, pc}
   17bec:	push	{fp, lr}
   17bf0:	add	fp, sp, #4
   17bf4:	sub	sp, sp, #24
   17bf8:	str	r0, [fp, #-16]
   17bfc:	str	r1, [fp, #-20]	; 0xffffffec
   17c00:	str	r2, [fp, #-24]	; 0xffffffe8
   17c04:	ldr	r0, [fp, #-16]
   17c08:	bl	17bbc <__assert_fail@plt+0x6c18>
   17c0c:	str	r0, [fp, #-8]
   17c10:	ldr	r3, [fp, #-8]
   17c14:	cmp	r3, #0
   17c18:	bne	17c3c <__assert_fail@plt+0x6c98>
   17c1c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17c20:	cmp	r3, #0
   17c24:	beq	17c34 <__assert_fail@plt+0x6c90>
   17c28:	ldr	r3, [fp, #-20]	; 0xffffffec
   17c2c:	mov	r2, #0
   17c30:	strb	r2, [r3]
   17c34:	mov	r3, #22
   17c38:	b	17cb8 <__assert_fail@plt+0x6d14>
   17c3c:	ldr	r0, [fp, #-8]
   17c40:	bl	10e9c <strlen@plt>
   17c44:	str	r0, [fp, #-12]
   17c48:	ldr	r2, [fp, #-12]
   17c4c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17c50:	cmp	r2, r3
   17c54:	bcs	17c78 <__assert_fail@plt+0x6cd4>
   17c58:	ldr	r3, [fp, #-12]
   17c5c:	add	r3, r3, #1
   17c60:	mov	r2, r3
   17c64:	ldr	r1, [fp, #-8]
   17c68:	ldr	r0, [fp, #-20]	; 0xffffffec
   17c6c:	bl	10d64 <memcpy@plt>
   17c70:	mov	r3, #0
   17c74:	b	17cb8 <__assert_fail@plt+0x6d14>
   17c78:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17c7c:	cmp	r3, #0
   17c80:	beq	17cb4 <__assert_fail@plt+0x6d10>
   17c84:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17c88:	sub	r3, r3, #1
   17c8c:	mov	r2, r3
   17c90:	ldr	r1, [fp, #-8]
   17c94:	ldr	r0, [fp, #-20]	; 0xffffffec
   17c98:	bl	10d64 <memcpy@plt>
   17c9c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17ca0:	sub	r3, r3, #1
   17ca4:	ldr	r2, [fp, #-20]	; 0xffffffec
   17ca8:	add	r3, r2, r3
   17cac:	mov	r2, #0
   17cb0:	strb	r2, [r3]
   17cb4:	mov	r3, #34	; 0x22
   17cb8:	mov	r0, r3
   17cbc:	sub	sp, fp, #4
   17cc0:	pop	{fp, pc}
   17cc4:	push	{fp, lr}
   17cc8:	add	fp, sp, #4
   17ccc:	sub	sp, sp, #16
   17cd0:	str	r0, [fp, #-8]
   17cd4:	str	r1, [fp, #-12]
   17cd8:	str	r2, [fp, #-16]
   17cdc:	ldr	r2, [fp, #-16]
   17ce0:	ldr	r1, [fp, #-12]
   17ce4:	ldr	r0, [fp, #-8]
   17ce8:	bl	17bec <__assert_fail@plt+0x6c48>
   17cec:	mov	r3, r0
   17cf0:	mov	r0, r3
   17cf4:	sub	sp, fp, #4
   17cf8:	pop	{fp, pc}
   17cfc:	push	{fp, lr}
   17d00:	add	fp, sp, #4
   17d04:	sub	sp, sp, #8
   17d08:	str	r0, [fp, #-8]
   17d0c:	ldr	r0, [fp, #-8]
   17d10:	bl	17bbc <__assert_fail@plt+0x6c18>
   17d14:	mov	r3, r0
   17d18:	mov	r0, r3
   17d1c:	sub	sp, fp, #4
   17d20:	pop	{fp, pc}
   17d24:	subs	r2, r1, #1
   17d28:	bxeq	lr
   17d2c:	bcc	17f04 <__assert_fail@plt+0x6f60>
   17d30:	cmp	r0, r1
   17d34:	bls	17ee8 <__assert_fail@plt+0x6f44>
   17d38:	tst	r1, r2
   17d3c:	beq	17ef4 <__assert_fail@plt+0x6f50>
   17d40:	clz	r3, r0
   17d44:	clz	r2, r1
   17d48:	sub	r3, r2, r3
   17d4c:	rsbs	r3, r3, #31
   17d50:	addne	r3, r3, r3, lsl #1
   17d54:	mov	r2, #0
   17d58:	addne	pc, pc, r3, lsl #2
   17d5c:	nop			; (mov r0, r0)
   17d60:	cmp	r0, r1, lsl #31
   17d64:	adc	r2, r2, r2
   17d68:	subcs	r0, r0, r1, lsl #31
   17d6c:	cmp	r0, r1, lsl #30
   17d70:	adc	r2, r2, r2
   17d74:	subcs	r0, r0, r1, lsl #30
   17d78:	cmp	r0, r1, lsl #29
   17d7c:	adc	r2, r2, r2
   17d80:	subcs	r0, r0, r1, lsl #29
   17d84:	cmp	r0, r1, lsl #28
   17d88:	adc	r2, r2, r2
   17d8c:	subcs	r0, r0, r1, lsl #28
   17d90:	cmp	r0, r1, lsl #27
   17d94:	adc	r2, r2, r2
   17d98:	subcs	r0, r0, r1, lsl #27
   17d9c:	cmp	r0, r1, lsl #26
   17da0:	adc	r2, r2, r2
   17da4:	subcs	r0, r0, r1, lsl #26
   17da8:	cmp	r0, r1, lsl #25
   17dac:	adc	r2, r2, r2
   17db0:	subcs	r0, r0, r1, lsl #25
   17db4:	cmp	r0, r1, lsl #24
   17db8:	adc	r2, r2, r2
   17dbc:	subcs	r0, r0, r1, lsl #24
   17dc0:	cmp	r0, r1, lsl #23
   17dc4:	adc	r2, r2, r2
   17dc8:	subcs	r0, r0, r1, lsl #23
   17dcc:	cmp	r0, r1, lsl #22
   17dd0:	adc	r2, r2, r2
   17dd4:	subcs	r0, r0, r1, lsl #22
   17dd8:	cmp	r0, r1, lsl #21
   17ddc:	adc	r2, r2, r2
   17de0:	subcs	r0, r0, r1, lsl #21
   17de4:	cmp	r0, r1, lsl #20
   17de8:	adc	r2, r2, r2
   17dec:	subcs	r0, r0, r1, lsl #20
   17df0:	cmp	r0, r1, lsl #19
   17df4:	adc	r2, r2, r2
   17df8:	subcs	r0, r0, r1, lsl #19
   17dfc:	cmp	r0, r1, lsl #18
   17e00:	adc	r2, r2, r2
   17e04:	subcs	r0, r0, r1, lsl #18
   17e08:	cmp	r0, r1, lsl #17
   17e0c:	adc	r2, r2, r2
   17e10:	subcs	r0, r0, r1, lsl #17
   17e14:	cmp	r0, r1, lsl #16
   17e18:	adc	r2, r2, r2
   17e1c:	subcs	r0, r0, r1, lsl #16
   17e20:	cmp	r0, r1, lsl #15
   17e24:	adc	r2, r2, r2
   17e28:	subcs	r0, r0, r1, lsl #15
   17e2c:	cmp	r0, r1, lsl #14
   17e30:	adc	r2, r2, r2
   17e34:	subcs	r0, r0, r1, lsl #14
   17e38:	cmp	r0, r1, lsl #13
   17e3c:	adc	r2, r2, r2
   17e40:	subcs	r0, r0, r1, lsl #13
   17e44:	cmp	r0, r1, lsl #12
   17e48:	adc	r2, r2, r2
   17e4c:	subcs	r0, r0, r1, lsl #12
   17e50:	cmp	r0, r1, lsl #11
   17e54:	adc	r2, r2, r2
   17e58:	subcs	r0, r0, r1, lsl #11
   17e5c:	cmp	r0, r1, lsl #10
   17e60:	adc	r2, r2, r2
   17e64:	subcs	r0, r0, r1, lsl #10
   17e68:	cmp	r0, r1, lsl #9
   17e6c:	adc	r2, r2, r2
   17e70:	subcs	r0, r0, r1, lsl #9
   17e74:	cmp	r0, r1, lsl #8
   17e78:	adc	r2, r2, r2
   17e7c:	subcs	r0, r0, r1, lsl #8
   17e80:	cmp	r0, r1, lsl #7
   17e84:	adc	r2, r2, r2
   17e88:	subcs	r0, r0, r1, lsl #7
   17e8c:	cmp	r0, r1, lsl #6
   17e90:	adc	r2, r2, r2
   17e94:	subcs	r0, r0, r1, lsl #6
   17e98:	cmp	r0, r1, lsl #5
   17e9c:	adc	r2, r2, r2
   17ea0:	subcs	r0, r0, r1, lsl #5
   17ea4:	cmp	r0, r1, lsl #4
   17ea8:	adc	r2, r2, r2
   17eac:	subcs	r0, r0, r1, lsl #4
   17eb0:	cmp	r0, r1, lsl #3
   17eb4:	adc	r2, r2, r2
   17eb8:	subcs	r0, r0, r1, lsl #3
   17ebc:	cmp	r0, r1, lsl #2
   17ec0:	adc	r2, r2, r2
   17ec4:	subcs	r0, r0, r1, lsl #2
   17ec8:	cmp	r0, r1, lsl #1
   17ecc:	adc	r2, r2, r2
   17ed0:	subcs	r0, r0, r1, lsl #1
   17ed4:	cmp	r0, r1
   17ed8:	adc	r2, r2, r2
   17edc:	subcs	r0, r0, r1
   17ee0:	mov	r0, r2
   17ee4:	bx	lr
   17ee8:	moveq	r0, #1
   17eec:	movne	r0, #0
   17ef0:	bx	lr
   17ef4:	clz	r2, r1
   17ef8:	rsb	r2, r2, #31
   17efc:	lsr	r0, r0, r2
   17f00:	bx	lr
   17f04:	cmp	r0, #0
   17f08:	mvnne	r0, #0
   17f0c:	b	181ac <__assert_fail@plt+0x7208>
   17f10:	cmp	r1, #0
   17f14:	beq	17f04 <__assert_fail@plt+0x6f60>
   17f18:	push	{r0, r1, lr}
   17f1c:	bl	17d24 <__assert_fail@plt+0x6d80>
   17f20:	pop	{r1, r2, lr}
   17f24:	mul	r3, r2, r0
   17f28:	sub	r1, r1, r3
   17f2c:	bx	lr
   17f30:	cmp	r1, #0
   17f34:	beq	18140 <__assert_fail@plt+0x719c>
   17f38:	eor	ip, r0, r1
   17f3c:	rsbmi	r1, r1, #0
   17f40:	subs	r2, r1, #1
   17f44:	beq	1810c <__assert_fail@plt+0x7168>
   17f48:	movs	r3, r0
   17f4c:	rsbmi	r3, r0, #0
   17f50:	cmp	r3, r1
   17f54:	bls	18118 <__assert_fail@plt+0x7174>
   17f58:	tst	r1, r2
   17f5c:	beq	18128 <__assert_fail@plt+0x7184>
   17f60:	clz	r2, r3
   17f64:	clz	r0, r1
   17f68:	sub	r2, r0, r2
   17f6c:	rsbs	r2, r2, #31
   17f70:	addne	r2, r2, r2, lsl #1
   17f74:	mov	r0, #0
   17f78:	addne	pc, pc, r2, lsl #2
   17f7c:	nop			; (mov r0, r0)
   17f80:	cmp	r3, r1, lsl #31
   17f84:	adc	r0, r0, r0
   17f88:	subcs	r3, r3, r1, lsl #31
   17f8c:	cmp	r3, r1, lsl #30
   17f90:	adc	r0, r0, r0
   17f94:	subcs	r3, r3, r1, lsl #30
   17f98:	cmp	r3, r1, lsl #29
   17f9c:	adc	r0, r0, r0
   17fa0:	subcs	r3, r3, r1, lsl #29
   17fa4:	cmp	r3, r1, lsl #28
   17fa8:	adc	r0, r0, r0
   17fac:	subcs	r3, r3, r1, lsl #28
   17fb0:	cmp	r3, r1, lsl #27
   17fb4:	adc	r0, r0, r0
   17fb8:	subcs	r3, r3, r1, lsl #27
   17fbc:	cmp	r3, r1, lsl #26
   17fc0:	adc	r0, r0, r0
   17fc4:	subcs	r3, r3, r1, lsl #26
   17fc8:	cmp	r3, r1, lsl #25
   17fcc:	adc	r0, r0, r0
   17fd0:	subcs	r3, r3, r1, lsl #25
   17fd4:	cmp	r3, r1, lsl #24
   17fd8:	adc	r0, r0, r0
   17fdc:	subcs	r3, r3, r1, lsl #24
   17fe0:	cmp	r3, r1, lsl #23
   17fe4:	adc	r0, r0, r0
   17fe8:	subcs	r3, r3, r1, lsl #23
   17fec:	cmp	r3, r1, lsl #22
   17ff0:	adc	r0, r0, r0
   17ff4:	subcs	r3, r3, r1, lsl #22
   17ff8:	cmp	r3, r1, lsl #21
   17ffc:	adc	r0, r0, r0
   18000:	subcs	r3, r3, r1, lsl #21
   18004:	cmp	r3, r1, lsl #20
   18008:	adc	r0, r0, r0
   1800c:	subcs	r3, r3, r1, lsl #20
   18010:	cmp	r3, r1, lsl #19
   18014:	adc	r0, r0, r0
   18018:	subcs	r3, r3, r1, lsl #19
   1801c:	cmp	r3, r1, lsl #18
   18020:	adc	r0, r0, r0
   18024:	subcs	r3, r3, r1, lsl #18
   18028:	cmp	r3, r1, lsl #17
   1802c:	adc	r0, r0, r0
   18030:	subcs	r3, r3, r1, lsl #17
   18034:	cmp	r3, r1, lsl #16
   18038:	adc	r0, r0, r0
   1803c:	subcs	r3, r3, r1, lsl #16
   18040:	cmp	r3, r1, lsl #15
   18044:	adc	r0, r0, r0
   18048:	subcs	r3, r3, r1, lsl #15
   1804c:	cmp	r3, r1, lsl #14
   18050:	adc	r0, r0, r0
   18054:	subcs	r3, r3, r1, lsl #14
   18058:	cmp	r3, r1, lsl #13
   1805c:	adc	r0, r0, r0
   18060:	subcs	r3, r3, r1, lsl #13
   18064:	cmp	r3, r1, lsl #12
   18068:	adc	r0, r0, r0
   1806c:	subcs	r3, r3, r1, lsl #12
   18070:	cmp	r3, r1, lsl #11
   18074:	adc	r0, r0, r0
   18078:	subcs	r3, r3, r1, lsl #11
   1807c:	cmp	r3, r1, lsl #10
   18080:	adc	r0, r0, r0
   18084:	subcs	r3, r3, r1, lsl #10
   18088:	cmp	r3, r1, lsl #9
   1808c:	adc	r0, r0, r0
   18090:	subcs	r3, r3, r1, lsl #9
   18094:	cmp	r3, r1, lsl #8
   18098:	adc	r0, r0, r0
   1809c:	subcs	r3, r3, r1, lsl #8
   180a0:	cmp	r3, r1, lsl #7
   180a4:	adc	r0, r0, r0
   180a8:	subcs	r3, r3, r1, lsl #7
   180ac:	cmp	r3, r1, lsl #6
   180b0:	adc	r0, r0, r0
   180b4:	subcs	r3, r3, r1, lsl #6
   180b8:	cmp	r3, r1, lsl #5
   180bc:	adc	r0, r0, r0
   180c0:	subcs	r3, r3, r1, lsl #5
   180c4:	cmp	r3, r1, lsl #4
   180c8:	adc	r0, r0, r0
   180cc:	subcs	r3, r3, r1, lsl #4
   180d0:	cmp	r3, r1, lsl #3
   180d4:	adc	r0, r0, r0
   180d8:	subcs	r3, r3, r1, lsl #3
   180dc:	cmp	r3, r1, lsl #2
   180e0:	adc	r0, r0, r0
   180e4:	subcs	r3, r3, r1, lsl #2
   180e8:	cmp	r3, r1, lsl #1
   180ec:	adc	r0, r0, r0
   180f0:	subcs	r3, r3, r1, lsl #1
   180f4:	cmp	r3, r1
   180f8:	adc	r0, r0, r0
   180fc:	subcs	r3, r3, r1
   18100:	cmp	ip, #0
   18104:	rsbmi	r0, r0, #0
   18108:	bx	lr
   1810c:	teq	ip, r0
   18110:	rsbmi	r0, r0, #0
   18114:	bx	lr
   18118:	movcc	r0, #0
   1811c:	asreq	r0, ip, #31
   18120:	orreq	r0, r0, #1
   18124:	bx	lr
   18128:	clz	r2, r1
   1812c:	rsb	r2, r2, #31
   18130:	cmp	ip, #0
   18134:	lsr	r0, r3, r2
   18138:	rsbmi	r0, r0, #0
   1813c:	bx	lr
   18140:	cmp	r0, #0
   18144:	mvngt	r0, #-2147483648	; 0x80000000
   18148:	movlt	r0, #-2147483648	; 0x80000000
   1814c:	b	181ac <__assert_fail@plt+0x7208>
   18150:	cmp	r1, #0
   18154:	beq	18140 <__assert_fail@plt+0x719c>
   18158:	push	{r0, r1, lr}
   1815c:	bl	17f38 <__assert_fail@plt+0x6f94>
   18160:	pop	{r1, r2, lr}
   18164:	mul	r3, r2, r0
   18168:	sub	r1, r1, r3
   1816c:	bx	lr
   18170:	cmp	r3, #0
   18174:	cmpeq	r2, #0
   18178:	bne	18190 <__assert_fail@plt+0x71ec>
   1817c:	cmp	r1, #0
   18180:	cmpeq	r0, #0
   18184:	mvnne	r1, #0
   18188:	mvnne	r0, #0
   1818c:	b	181ac <__assert_fail@plt+0x7208>
   18190:	sub	sp, sp, #8
   18194:	push	{sp, lr}
   18198:	bl	181bc <__assert_fail@plt+0x7218>
   1819c:	ldr	lr, [sp, #4]
   181a0:	add	sp, sp, #8
   181a4:	pop	{r2, r3}
   181a8:	bx	lr
   181ac:	push	{r1, lr}
   181b0:	mov	r0, #8
   181b4:	bl	10d1c <raise@plt>
   181b8:	pop	{r1, pc}
   181bc:	cmp	r1, r3
   181c0:	push	{r4, r5, r6, r7, r8, r9, lr}
   181c4:	cmpeq	r0, r2
   181c8:	mov	r4, r0
   181cc:	mov	r5, r1
   181d0:	ldr	r9, [sp, #28]
   181d4:	movcc	r0, #0
   181d8:	movcc	r1, #0
   181dc:	bcc	182d4 <__assert_fail@plt+0x7330>
   181e0:	cmp	r3, #0
   181e4:	clzeq	ip, r2
   181e8:	clzne	ip, r3
   181ec:	addeq	ip, ip, #32
   181f0:	cmp	r5, #0
   181f4:	clzeq	r1, r4
   181f8:	addeq	r1, r1, #32
   181fc:	clzne	r1, r5
   18200:	sub	ip, ip, r1
   18204:	sub	lr, ip, #32
   18208:	lsl	r7, r3, ip
   1820c:	rsb	r8, ip, #32
   18210:	orr	r7, r7, r2, lsl lr
   18214:	orr	r7, r7, r2, lsr r8
   18218:	lsl	r6, r2, ip
   1821c:	cmp	r5, r7
   18220:	cmpeq	r4, r6
   18224:	movcc	r0, #0
   18228:	movcc	r1, #0
   1822c:	bcc	18248 <__assert_fail@plt+0x72a4>
   18230:	mov	r3, #1
   18234:	subs	r4, r4, r6
   18238:	lsl	r1, r3, lr
   1823c:	lsl	r0, r3, ip
   18240:	orr	r1, r1, r3, lsr r8
   18244:	sbc	r5, r5, r7
   18248:	cmp	ip, #0
   1824c:	beq	182d4 <__assert_fail@plt+0x7330>
   18250:	lsrs	r3, r7, #1
   18254:	rrx	r2, r6
   18258:	mov	r6, ip
   1825c:	b	18280 <__assert_fail@plt+0x72dc>
   18260:	subs	r4, r4, r2
   18264:	sbc	r5, r5, r3
   18268:	adds	r4, r4, r4
   1826c:	adc	r5, r5, r5
   18270:	adds	r4, r4, #1
   18274:	adc	r5, r5, #0
   18278:	subs	r6, r6, #1
   1827c:	beq	1829c <__assert_fail@plt+0x72f8>
   18280:	cmp	r5, r3
   18284:	cmpeq	r4, r2
   18288:	bcs	18260 <__assert_fail@plt+0x72bc>
   1828c:	adds	r4, r4, r4
   18290:	adc	r5, r5, r5
   18294:	subs	r6, r6, #1
   18298:	bne	18280 <__assert_fail@plt+0x72dc>
   1829c:	lsr	r6, r4, ip
   182a0:	lsr	r7, r5, ip
   182a4:	orr	r6, r6, r5, lsl r8
   182a8:	adds	r2, r0, r4
   182ac:	orr	r6, r6, r5, lsr lr
   182b0:	adc	r3, r1, r5
   182b4:	lsl	r1, r7, ip
   182b8:	orr	r1, r1, r6, lsl lr
   182bc:	lsl	r0, r6, ip
   182c0:	orr	r1, r1, r6, lsr r8
   182c4:	subs	r0, r2, r0
   182c8:	mov	r4, r6
   182cc:	mov	r5, r7
   182d0:	sbc	r1, r3, r1
   182d4:	cmp	r9, #0
   182d8:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   182dc:	strd	r4, [r9]
   182e0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   182e4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   182e8:	mov	r7, r0
   182ec:	ldr	r6, [pc, #72]	; 1833c <__assert_fail@plt+0x7398>
   182f0:	ldr	r5, [pc, #72]	; 18340 <__assert_fail@plt+0x739c>
   182f4:	add	r6, pc, r6
   182f8:	add	r5, pc, r5
   182fc:	sub	r6, r6, r5
   18300:	mov	r8, r1
   18304:	mov	r9, r2
   18308:	bl	10ce4 <calloc@plt-0x20>
   1830c:	asrs	r6, r6, #2
   18310:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   18314:	mov	r4, #0
   18318:	add	r4, r4, #1
   1831c:	ldr	r3, [r5], #4
   18320:	mov	r2, r9
   18324:	mov	r1, r8
   18328:	mov	r0, r7
   1832c:	blx	r3
   18330:	cmp	r6, r4
   18334:	bne	18318 <__assert_fail@plt+0x7374>
   18338:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1833c:	andeq	r1, r1, r4, lsl ip
   18340:	andeq	r1, r1, ip, lsl #24
   18344:	bx	lr
   18348:	ldr	r3, [pc, #12]	; 1835c <__assert_fail@plt+0x73b8>
   1834c:	mov	r1, #0
   18350:	add	r3, pc, r3
   18354:	ldr	r2, [r3]
   18358:	b	10ecc <__cxa_atexit@plt>
   1835c:	andeq	r1, r1, r0, lsr #27
   18360:	mov	r2, r1
   18364:	mov	r1, r0
   18368:	mov	r0, #3
   1836c:	b	10f80 <__xstat64@plt>

Disassembly of section .fini:

00018370 <.fini>:
   18370:	push	{r3, lr}
   18374:	pop	{r3, pc}
