
../repos/coreutils/src/numfmt:     file format elf32-littlearm


Disassembly of section .init:

00010e18 <.init>:
   10e18:	push	{r3, lr}
   10e1c:	bl	11144 <__assert_fail@plt+0x48>
   10e20:	pop	{r3, pc}

Disassembly of section .plt:

00010e24 <calloc@plt-0x14>:
   10e24:	push	{lr}		; (str lr, [sp, #-4]!)
   10e28:	ldr	lr, [pc, #4]	; 10e34 <calloc@plt-0x4>
   10e2c:	add	lr, pc, lr
   10e30:	ldr	pc, [lr, #8]!
   10e34:	andeq	fp, r1, ip, asr #3

00010e38 <calloc@plt>:
   10e38:	add	ip, pc, #0, 12
   10e3c:	add	ip, ip, #110592	; 0x1b000
   10e40:	ldr	pc, [ip, #460]!	; 0x1cc

00010e44 <fputs_unlocked@plt>:
   10e44:	add	ip, pc, #0, 12
   10e48:	add	ip, ip, #110592	; 0x1b000
   10e4c:	ldr	pc, [ip, #452]!	; 0x1c4

00010e50 <raise@plt>:
   10e50:	add	ip, pc, #0, 12
   10e54:	add	ip, ip, #110592	; 0x1b000
   10e58:	ldr	pc, [ip, #444]!	; 0x1bc

00010e5c <__strncat_chk@plt>:
   10e5c:	add	ip, pc, #0, 12
   10e60:	add	ip, ip, #110592	; 0x1b000
   10e64:	ldr	pc, [ip, #436]!	; 0x1b4

00010e68 <strcmp@plt>:
   10e68:	add	ip, pc, #0, 12
   10e6c:	add	ip, ip, #110592	; 0x1b000
   10e70:	ldr	pc, [ip, #428]!	; 0x1ac

00010e74 <strtol@plt>:
   10e74:	add	ip, pc, #0, 12
   10e78:	add	ip, ip, #110592	; 0x1b000
   10e7c:	ldr	pc, [ip, #420]!	; 0x1a4

00010e80 <fflush@plt>:
   10e80:	add	ip, pc, #0, 12
   10e84:	add	ip, ip, #110592	; 0x1b000
   10e88:	ldr	pc, [ip, #412]!	; 0x19c

00010e8c <wcwidth@plt>:
   10e8c:	add	ip, pc, #0, 12
   10e90:	add	ip, ip, #110592	; 0x1b000
   10e94:	ldr	pc, [ip, #404]!	; 0x194

00010e98 <memmove@plt>:
   10e98:	add	ip, pc, #0, 12
   10e9c:	add	ip, ip, #110592	; 0x1b000
   10ea0:	ldr	pc, [ip, #396]!	; 0x18c

00010ea4 <free@plt>:
   10ea4:	add	ip, pc, #0, 12
   10ea8:	add	ip, ip, #110592	; 0x1b000
   10eac:	ldr	pc, [ip, #388]!	; 0x184

00010eb0 <_exit@plt>:
   10eb0:	add	ip, pc, #0, 12
   10eb4:	add	ip, ip, #110592	; 0x1b000
   10eb8:	ldr	pc, [ip, #380]!	; 0x17c

00010ebc <memcpy@plt>:
   10ebc:	add	ip, pc, #0, 12
   10ec0:	add	ip, ip, #110592	; 0x1b000
   10ec4:	ldr	pc, [ip, #372]!	; 0x174

00010ec8 <__strtoull_internal@plt>:
   10ec8:	add	ip, pc, #0, 12
   10ecc:	add	ip, ip, #110592	; 0x1b000
   10ed0:	ldr	pc, [ip, #364]!	; 0x16c

00010ed4 <mbsinit@plt>:
   10ed4:	add	ip, pc, #0, 12
   10ed8:	add	ip, ip, #110592	; 0x1b000
   10edc:	ldr	pc, [ip, #356]!	; 0x164

00010ee0 <memcmp@plt>:
   10ee0:	add	ip, pc, #0, 12
   10ee4:	add	ip, ip, #110592	; 0x1b000
   10ee8:	ldr	pc, [ip, #348]!	; 0x15c

00010eec <fputc_unlocked@plt>:
   10eec:	add	ip, pc, #0, 12
   10ef0:	add	ip, ip, #110592	; 0x1b000
   10ef4:	ldr	pc, [ip, #340]!	; 0x154

00010ef8 <dcgettext@plt>:
   10ef8:	add	ip, pc, #0, 12
   10efc:	add	ip, ip, #110592	; 0x1b000
   10f00:	ldr	pc, [ip, #332]!	; 0x14c

00010f04 <realloc@plt>:
   10f04:	add	ip, pc, #0, 12
   10f08:	add	ip, ip, #110592	; 0x1b000
   10f0c:	ldr	pc, [ip, #324]!	; 0x144

00010f10 <textdomain@plt>:
   10f10:	add	ip, pc, #0, 12
   10f14:	add	ip, ip, #110592	; 0x1b000
   10f18:	ldr	pc, [ip, #316]!	; 0x13c

00010f1c <iswprint@plt>:
   10f1c:	add	ip, pc, #0, 12
   10f20:	add	ip, ip, #110592	; 0x1b000
   10f24:	ldr	pc, [ip, #308]!	; 0x134

00010f28 <fwrite@plt>:
   10f28:	add	ip, pc, #0, 12
   10f2c:	add	ip, ip, #110592	; 0x1b000
   10f30:	ldr	pc, [ip, #300]!	; 0x12c

00010f34 <lseek64@plt>:
   10f34:	add	ip, pc, #0, 12
   10f38:	add	ip, ip, #110592	; 0x1b000
   10f3c:	ldr	pc, [ip, #292]!	; 0x124

00010f40 <__ctype_get_mb_cur_max@plt>:
   10f40:	add	ip, pc, #0, 12
   10f44:	add	ip, ip, #110592	; 0x1b000
   10f48:	ldr	pc, [ip, #284]!	; 0x11c

00010f4c <strcpy@plt>:
   10f4c:	add	ip, pc, #0, 12
   10f50:	add	ip, ip, #110592	; 0x1b000
   10f54:	ldr	pc, [ip, #276]!	; 0x114

00010f58 <__fpending@plt>:
   10f58:	add	ip, pc, #0, 12
   10f5c:	add	ip, ip, #110592	; 0x1b000
   10f60:	ldr	pc, [ip, #268]!	; 0x10c

00010f64 <mbrtowc@plt>:
   10f64:	add	ip, pc, #0, 12
   10f68:	add	ip, ip, #110592	; 0x1b000
   10f6c:	ldr	pc, [ip, #260]!	; 0x104

00010f70 <wcstombs@plt>:
   10f70:	add	ip, pc, #0, 12
   10f74:	add	ip, ip, #110592	; 0x1b000
   10f78:	ldr	pc, [ip, #252]!	; 0xfc

00010f7c <error@plt>:
   10f7c:	add	ip, pc, #0, 12
   10f80:	add	ip, ip, #110592	; 0x1b000
   10f84:	ldr	pc, [ip, #244]!	; 0xf4

00010f88 <malloc@plt>:
   10f88:	add	ip, pc, #0, 12
   10f8c:	add	ip, ip, #110592	; 0x1b000
   10f90:	ldr	pc, [ip, #236]!	; 0xec

00010f94 <__libc_start_main@plt>:
   10f94:	add	ip, pc, #0, 12
   10f98:	add	ip, ip, #110592	; 0x1b000
   10f9c:	ldr	pc, [ip, #228]!	; 0xe4

00010fa0 <__freading@plt>:
   10fa0:	add	ip, pc, #0, 12
   10fa4:	add	ip, ip, #110592	; 0x1b000
   10fa8:	ldr	pc, [ip, #220]!	; 0xdc

00010fac <__gmon_start__@plt>:
   10fac:	add	ip, pc, #0, 12
   10fb0:	add	ip, ip, #110592	; 0x1b000
   10fb4:	ldr	pc, [ip, #212]!	; 0xd4

00010fb8 <mempcpy@plt>:
   10fb8:	add	ip, pc, #0, 12
   10fbc:	add	ip, ip, #110592	; 0x1b000
   10fc0:	ldr	pc, [ip, #204]!	; 0xcc

00010fc4 <getopt_long@plt>:
   10fc4:	add	ip, pc, #0, 12
   10fc8:	add	ip, ip, #110592	; 0x1b000
   10fcc:	ldr	pc, [ip, #196]!	; 0xc4

00010fd0 <__ctype_b_loc@plt>:
   10fd0:	add	ip, pc, #0, 12
   10fd4:	add	ip, ip, #110592	; 0x1b000
   10fd8:	ldr	pc, [ip, #188]!	; 0xbc

00010fdc <exit@plt>:
   10fdc:	add	ip, pc, #0, 12
   10fe0:	add	ip, ip, #110592	; 0x1b000
   10fe4:	ldr	pc, [ip, #180]!	; 0xb4

00010fe8 <strlen@plt>:
   10fe8:	add	ip, pc, #0, 12
   10fec:	add	ip, ip, #110592	; 0x1b000
   10ff0:	ldr	pc, [ip, #172]!	; 0xac

00010ff4 <strchr@plt>:
   10ff4:	add	ip, pc, #0, 12
   10ff8:	add	ip, ip, #110592	; 0x1b000
   10ffc:	ldr	pc, [ip, #164]!	; 0xa4

00011000 <__errno_location@plt>:
   11000:	add	ip, pc, #0, 12
   11004:	add	ip, ip, #110592	; 0x1b000
   11008:	ldr	pc, [ip, #156]!	; 0x9c

0001100c <__cxa_atexit@plt>:
   1100c:	add	ip, pc, #0, 12
   11010:	add	ip, ip, #110592	; 0x1b000
   11014:	ldr	pc, [ip, #148]!	; 0x94

00011018 <memset@plt>:
   11018:	add	ip, pc, #0, 12
   1101c:	add	ip, ip, #110592	; 0x1b000
   11020:	ldr	pc, [ip, #140]!	; 0x8c

00011024 <__printf_chk@plt>:
   11024:	add	ip, pc, #0, 12
   11028:	add	ip, ip, #110592	; 0x1b000
   1102c:	ldr	pc, [ip, #132]!	; 0x84

00011030 <fileno@plt>:
   11030:	add	ip, pc, #0, 12
   11034:	add	ip, ip, #110592	; 0x1b000
   11038:	ldr	pc, [ip, #124]!	; 0x7c

0001103c <__fprintf_chk@plt>:
   1103c:	add	ip, pc, #0, 12
   11040:	add	ip, ip, #110592	; 0x1b000
   11044:	ldr	pc, [ip, #116]!	; 0x74

00011048 <fclose@plt>:
   11048:	add	ip, pc, #0, 12
   1104c:	add	ip, ip, #110592	; 0x1b000
   11050:	ldr	pc, [ip, #108]!	; 0x6c

00011054 <fseeko64@plt>:
   11054:	add	ip, pc, #0, 12
   11058:	add	ip, ip, #110592	; 0x1b000
   1105c:	ldr	pc, [ip, #100]!	; 0x64

00011060 <__overflow@plt>:
   11060:	add	ip, pc, #0, 12
   11064:	add	ip, ip, #110592	; 0x1b000
   11068:	ldr	pc, [ip, #92]!	; 0x5c

0001106c <setlocale@plt>:
   1106c:	add	ip, pc, #0, 12
   11070:	add	ip, ip, #110592	; 0x1b000
   11074:	ldr	pc, [ip, #84]!	; 0x54

00011078 <wcswidth@plt>:
   11078:	add	ip, pc, #0, 12
   1107c:	add	ip, ip, #110592	; 0x1b000
   11080:	ldr	pc, [ip, #76]!	; 0x4c

00011084 <strrchr@plt>:
   11084:	add	ip, pc, #0, 12
   11088:	add	ip, ip, #110592	; 0x1b000
   1108c:	ldr	pc, [ip, #68]!	; 0x44

00011090 <nl_langinfo@plt>:
   11090:	add	ip, pc, #0, 12
   11094:	add	ip, ip, #110592	; 0x1b000
   11098:	ldr	pc, [ip, #60]!	; 0x3c

0001109c <mbstowcs@plt>:
   1109c:	add	ip, pc, #0, 12
   110a0:	add	ip, ip, #110592	; 0x1b000
   110a4:	ldr	pc, [ip, #52]!	; 0x34

000110a8 <qsort@plt>:
   110a8:	add	ip, pc, #0, 12
   110ac:	add	ip, ip, #110592	; 0x1b000
   110b0:	ldr	pc, [ip, #44]!	; 0x2c

000110b4 <bindtextdomain@plt>:
   110b4:	add	ip, pc, #0, 12
   110b8:	add	ip, ip, #110592	; 0x1b000
   110bc:	ldr	pc, [ip, #36]!	; 0x24

000110c0 <getdelim@plt>:
   110c0:	add	ip, pc, #0, 12
   110c4:	add	ip, ip, #110592	; 0x1b000
   110c8:	ldr	pc, [ip, #28]!

000110cc <strncmp@plt>:
   110cc:	add	ip, pc, #0, 12
   110d0:	add	ip, ip, #110592	; 0x1b000
   110d4:	ldr	pc, [ip, #20]!

000110d8 <abort@plt>:
   110d8:	add	ip, pc, #0, 12
   110dc:	add	ip, ip, #110592	; 0x1b000
   110e0:	ldr	pc, [ip, #12]!

000110e4 <__snprintf_chk@plt>:
   110e4:	add	ip, pc, #0, 12
   110e8:	add	ip, ip, #110592	; 0x1b000
   110ec:	ldr	pc, [ip, #4]!

000110f0 <strspn@plt>:
   110f0:	add	ip, pc, #0, 12
   110f4:	add	ip, ip, #106496	; 0x1a000
   110f8:	ldr	pc, [ip, #4092]!	; 0xffc

000110fc <__assert_fail@plt>:
   110fc:	add	ip, pc, #0, 12
   11100:	add	ip, ip, #106496	; 0x1a000
   11104:	ldr	pc, [ip, #4084]!	; 0xff4

Disassembly of section .text:

00011108 <.text>:
   11108:	mov	fp, #0
   1110c:	mov	lr, #0
   11110:	pop	{r1}		; (ldr r1, [sp], #4)
   11114:	mov	r2, sp
   11118:	push	{r2}		; (str r2, [sp, #-4]!)
   1111c:	push	{r0}		; (str r0, [sp, #-4]!)
   11120:	ldr	ip, [pc, #16]	; 11138 <__assert_fail@plt+0x3c>
   11124:	push	{ip}		; (str ip, [sp, #-4]!)
   11128:	ldr	r0, [pc, #12]	; 1113c <__assert_fail@plt+0x40>
   1112c:	ldr	r3, [pc, #12]	; 11140 <__assert_fail@plt+0x44>
   11130:	bl	10f94 <__libc_start_main@plt>
   11134:	bl	110d8 <abort@plt>
   11138:	muleq	r1, r8, r0
   1113c:	andeq	r3, r1, ip, asr #2
   11140:	andeq	r9, r1, r8, lsr r0
   11144:	ldr	r3, [pc, #20]	; 11160 <__assert_fail@plt+0x64>
   11148:	ldr	r2, [pc, #20]	; 11164 <__assert_fail@plt+0x68>
   1114c:	add	r3, pc, r3
   11150:	ldr	r2, [r3, r2]
   11154:	cmp	r2, #0
   11158:	bxeq	lr
   1115c:	b	10fac <__gmon_start__@plt>
   11160:	andeq	sl, r1, ip, lsr #29
   11164:	strdeq	r0, [r0], -ip
   11168:	ldr	r3, [pc, #28]	; 1118c <__assert_fail@plt+0x90>
   1116c:	ldr	r0, [pc, #28]	; 11190 <__assert_fail@plt+0x94>
   11170:	sub	r3, r3, r0
   11174:	cmp	r3, #6
   11178:	bxls	lr
   1117c:	ldr	r3, [pc, #16]	; 11194 <__assert_fail@plt+0x98>
   11180:	cmp	r3, #0
   11184:	bxeq	lr
   11188:	bx	r3
   1118c:	andeq	ip, r2, r3, lsl #3
   11190:	andeq	ip, r2, r0, lsl #3
   11194:	andeq	r0, r0, r0
   11198:	ldr	r1, [pc, #36]	; 111c4 <__assert_fail@plt+0xc8>
   1119c:	ldr	r0, [pc, #36]	; 111c8 <__assert_fail@plt+0xcc>
   111a0:	sub	r1, r1, r0
   111a4:	asr	r1, r1, #2
   111a8:	add	r1, r1, r1, lsr #31
   111ac:	asrs	r1, r1, #1
   111b0:	bxeq	lr
   111b4:	ldr	r3, [pc, #16]	; 111cc <__assert_fail@plt+0xd0>
   111b8:	cmp	r3, #0
   111bc:	bxeq	lr
   111c0:	bx	r3
   111c4:	andeq	ip, r2, r0, lsl #3
   111c8:	andeq	ip, r2, r0, lsl #3
   111cc:	andeq	r0, r0, r0
   111d0:	push	{r4, lr}
   111d4:	ldr	r4, [pc, #24]	; 111f4 <__assert_fail@plt+0xf8>
   111d8:	ldrb	r3, [r4]
   111dc:	cmp	r3, #0
   111e0:	popne	{r4, pc}
   111e4:	bl	11168 <__assert_fail@plt+0x6c>
   111e8:	mov	r3, #1
   111ec:	strb	r3, [r4]
   111f0:	pop	{r4, pc}
   111f4:	andeq	ip, r2, r4, lsr #3
   111f8:	ldr	r0, [pc, #40]	; 11228 <__assert_fail@plt+0x12c>
   111fc:	ldr	r3, [r0]
   11200:	cmp	r3, #0
   11204:	bne	1120c <__assert_fail@plt+0x110>
   11208:	b	11198 <__assert_fail@plt+0x9c>
   1120c:	ldr	r3, [pc, #24]	; 1122c <__assert_fail@plt+0x130>
   11210:	cmp	r3, #0
   11214:	beq	11208 <__assert_fail@plt+0x10c>
   11218:	push	{r4, lr}
   1121c:	blx	r3
   11220:	pop	{r4, lr}
   11224:	b	11198 <__assert_fail@plt+0x9c>
   11228:	andeq	fp, r2, r4, lsl pc
   1122c:	andeq	r0, r0, r0
   11230:	push	{r4, r5, r6, r7, r8, lr}
   11234:	vpush	{d8}
   11238:	mov	r6, r2
   1123c:	mov	r5, r3
   11240:	ldrb	r3, [r0]
   11244:	cmp	r3, #45	; 0x2d
   11248:	addeq	r0, r0, #1
   1124c:	moveq	r3, #1
   11250:	movne	r3, #0
   11254:	strb	r3, [r5]
   11258:	str	r0, [r1]
   1125c:	mov	r2, #0
   11260:	mov	ip, r2
   11264:	vldr	d8, [pc, #196]	; 11330 <__assert_fail@plt+0x234>
   11268:	mov	r4, r2
   1126c:	vldr	d6, [pc, #196]	; 11338 <__assert_fail@plt+0x23c>
   11270:	mov	r7, #1
   11274:	ldr	r0, [r1]
   11278:	ldrb	r3, [r0]
   1127c:	sub	lr, r3, #48	; 0x30
   11280:	cmp	lr, #9
   11284:	bls	112c4 <__assert_fail@plt+0x1c8>
   11288:	cmp	r2, #0
   1128c:	bne	112ac <__assert_fail@plt+0x1b0>
   11290:	ldr	r3, [pc, #168]	; 11340 <__assert_fail@plt+0x244>
   11294:	ldr	r2, [r3]
   11298:	ldr	r1, [r3, #4]
   1129c:	bl	110cc <strncmp@plt>
   112a0:	cmp	r0, #0
   112a4:	movne	r4, #3
   112a8:	bne	11320 <__assert_fail@plt+0x224>
   112ac:	ldrb	r3, [r5]
   112b0:	cmp	r3, #0
   112b4:	vnegne.f64	d8, d8
   112b8:	cmp	r6, #0
   112bc:	vstrne	d8, [r6]
   112c0:	b	11320 <__assert_fail@plt+0x224>
   112c4:	vcmp.f64	d8, #0.0
   112c8:	vmrs	APSR_nzcv, fpscr
   112cc:	movne	r2, #1
   112d0:	moveq	r2, #0
   112d4:	sub	lr, r3, #48	; 0x30
   112d8:	cmp	r3, #48	; 0x30
   112dc:	moveq	r3, r2
   112e0:	orrne	r3, r2, #1
   112e4:	cmp	r3, #0
   112e8:	addne	ip, ip, #1
   112ec:	cmp	ip, #15
   112f0:	movhi	r4, #1
   112f4:	cmp	ip, #27
   112f8:	bhi	1131c <__assert_fail@plt+0x220>
   112fc:	vmov	s15, lr
   11300:	vcvt.f64.s32	d7, s15
   11304:	vmla.f64	d7, d8, d6
   11308:	vmov.f64	d8, d7
   1130c:	add	r0, r0, #1
   11310:	str	r0, [r1]
   11314:	mov	r2, r7
   11318:	b	11274 <__assert_fail@plt+0x178>
   1131c:	mov	r4, #2
   11320:	mov	r0, r4
   11324:	vpop	{d8}
   11328:	pop	{r4, r5, r6, r7, r8, pc}
   1132c:	nop			; (mov r0, r0)
	...
   1133c:	eormi	r0, r4, r0
   11340:	andeq	ip, r2, r8, lsr #3
   11344:	push	{r4, r5, r6, r7, r8, lr}
   11348:	sub	sp, sp, #24
   1134c:	mov	r4, r0
   11350:	bl	10fe8 <strlen@plt>
   11354:	mov	r3, #0
   11358:	str	r3, [sp, #20]
   1135c:	subs	r6, r0, #0
   11360:	beq	11400 <__assert_fail@plt+0x304>
   11364:	sub	r7, r6, #1
   11368:	ldrb	r3, [r4, r7]
   1136c:	sub	r3, r3, #48	; 0x30
   11370:	cmp	r3, #9
   11374:	bls	11458 <__assert_fail@plt+0x35c>
   11378:	add	r0, r6, #2
   1137c:	bl	1709c <__assert_fail@plt+0x5fa0>
   11380:	mov	r5, r0
   11384:	add	r8, r0, r7
   11388:	str	r8, [sp, #20]
   1138c:	mov	r2, r6
   11390:	mov	r1, r4
   11394:	bl	10ebc <memcpy@plt>
   11398:	ldrb	r3, [r5, r7]
   1139c:	cmp	r3, #105	; 0x69
   113a0:	movne	r3, #0
   113a4:	moveq	r3, #1
   113a8:	cmp	r6, #1
   113ac:	movls	r3, #0
   113b0:	cmp	r3, #0
   113b4:	beq	113dc <__assert_fail@plt+0x2e0>
   113b8:	ldrb	r3, [r8, #-1]
   113bc:	sub	r3, r3, #48	; 0x30
   113c0:	cmp	r3, #9
   113c4:	bls	113dc <__assert_fail@plt+0x2e0>
   113c8:	mov	r3, #0
   113cc:	strb	r3, [r8]
   113d0:	mov	r0, r5
   113d4:	ldr	r3, [pc, #196]	; 114a0 <__assert_fail@plt+0x3a4>
   113d8:	b	1140c <__assert_fail@plt+0x310>
   113dc:	mov	r3, #66	; 0x42
   113e0:	strb	r3, [r8, #1]
   113e4:	add	r3, r8, #2
   113e8:	str	r3, [sp, #20]
   113ec:	mov	r3, #0
   113f0:	strb	r3, [r8, #2]
   113f4:	mov	r0, r5
   113f8:	ldr	r3, [pc, #164]	; 114a4 <__assert_fail@plt+0x3a8>
   113fc:	b	1140c <__assert_fail@plt+0x310>
   11400:	mov	r0, r4
   11404:	ldr	r3, [pc, #148]	; 114a0 <__assert_fail@plt+0x3a4>
   11408:	mov	r5, #0
   1140c:	str	r3, [sp]
   11410:	add	r3, sp, #8
   11414:	mov	r2, #10
   11418:	add	r1, sp, #20
   1141c:	bl	17cec <__assert_fail@plt+0x6bf0>
   11420:	cmp	r0, #0
   11424:	bne	11468 <__assert_fail@plt+0x36c>
   11428:	ldr	r3, [sp, #20]
   1142c:	ldrb	r3, [r3]
   11430:	cmp	r3, #0
   11434:	bne	11468 <__assert_fail@plt+0x36c>
   11438:	ldrd	r2, [sp, #8]
   1143c:	orrs	r3, r2, r3
   11440:	beq	11468 <__assert_fail@plt+0x36c>
   11444:	mov	r0, r5
   11448:	bl	14b5c <__assert_fail@plt+0x3a60>
   1144c:	ldrd	r0, [sp, #8]
   11450:	add	sp, sp, #24
   11454:	pop	{r4, r5, r6, r7, r8, pc}
   11458:	mov	r0, r4
   1145c:	ldr	r3, [pc, #60]	; 114a0 <__assert_fail@plt+0x3a4>
   11460:	mov	r5, #0
   11464:	b	1140c <__assert_fail@plt+0x310>
   11468:	mov	r0, r5
   1146c:	bl	14b5c <__assert_fail@plt+0x3a60>
   11470:	mov	r2, #5
   11474:	ldr	r1, [pc, #44]	; 114a8 <__assert_fail@plt+0x3ac>
   11478:	mov	r0, #0
   1147c:	bl	10ef8 <dcgettext@plt>
   11480:	mov	r5, r0
   11484:	mov	r0, r4
   11488:	bl	16b04 <__assert_fail@plt+0x5a08>
   1148c:	mov	r3, r0
   11490:	mov	r2, r5
   11494:	mov	r1, #0
   11498:	mov	r0, #1
   1149c:	bl	10f7c <error@plt>
   114a0:	andeq	r9, r1, r8, asr #5
   114a4:	ldrdeq	r9, [r1], -r4
   114a8:	andeq	r9, r1, r0, ror #5
   114ac:	ldr	r3, [pc, #40]	; 114dc <__assert_fail@plt+0x3e0>
   114b0:	ldr	r3, [r3, #8]
   114b4:	cmp	r3, r0
   114b8:	bxhi	lr
   114bc:	push	{r4, lr}
   114c0:	add	r1, r0, #1
   114c4:	ldr	r4, [pc, #16]	; 114dc <__assert_fail@plt+0x3e0>
   114c8:	str	r1, [r4, #8]
   114cc:	ldr	r0, [r4, #12]
   114d0:	bl	170d0 <__assert_fail@plt+0x5fd4>
   114d4:	str	r0, [r4, #12]
   114d8:	pop	{r4, pc}
   114dc:	andeq	ip, r2, r8, lsr #3
   114e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   114e4:	vpush	{d8-d12}
   114e8:	sub	sp, sp, #236	; 0xec
   114ec:	mov	r6, r0
   114f0:	mov	r4, r2
   114f4:	mov	r5, r3
   114f8:	ldr	r3, [pc, #1800]	; 11c08 <__assert_fail@plt+0xb0c>
   114fc:	ldr	ip, [r3]
   11500:	cmp	ip, #0
   11504:	beq	11548 <__assert_fail@plt+0x44c>
   11508:	ldrd	r2, [ip]
   1150c:	mvn	r0, #0
   11510:	mvn	r1, #0
   11514:	cmp	r3, r1
   11518:	cmpeq	r2, r0
   1151c:	mvnne	r0, #0
   11520:	mvnne	r1, #0
   11524:	bne	11568 <__assert_fail@plt+0x46c>
   11528:	ldr	r3, [pc, #1756]	; 11c0c <__assert_fail@plt+0xb10>
   1152c:	ldr	r1, [r3]
   11530:	mov	r0, r6
   11534:	bl	10e44 <fputs_unlocked@plt>
   11538:	mov	r0, #1
   1153c:	add	sp, sp, #236	; 0xec
   11540:	vpop	{d8-d12}
   11544:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11548:	cmp	r5, #0
   1154c:	cmpeq	r2, #1
   11550:	beq	11584 <__assert_fail@plt+0x488>
   11554:	b	11528 <__assert_fail@plt+0x42c>
   11558:	ldrd	r2, [ip, #16]!
   1155c:	cmp	r3, r1
   11560:	cmpeq	r2, r0
   11564:	beq	11528 <__assert_fail@plt+0x42c>
   11568:	cmp	r5, r3
   1156c:	cmpeq	r4, r2
   11570:	bcc	11558 <__assert_fail@plt+0x45c>
   11574:	ldrd	r2, [ip, #8]
   11578:	cmp	r5, r3
   1157c:	cmpeq	r4, r2
   11580:	bhi	11558 <__assert_fail@plt+0x45c>
   11584:	ldr	r3, [pc, #1668]	; 11c10 <__assert_fail@plt+0xb14>
   11588:	ldr	r7, [r3, #16]
   1158c:	cmp	r7, #0
   11590:	beq	115e0 <__assert_fail@plt+0x4e4>
   11594:	mov	r0, r6
   11598:	bl	10fe8 <strlen@plt>
   1159c:	mov	r8, r0
   115a0:	mov	r0, r7
   115a4:	bl	10fe8 <strlen@plt>
   115a8:	cmp	r8, r0
   115ac:	bls	115e0 <__assert_fail@plt+0x4e4>
   115b0:	sub	r8, r8, r0
   115b4:	add	r1, r6, r8
   115b8:	mov	r0, r7
   115bc:	bl	10e68 <strcmp@plt>
   115c0:	cmp	r0, #0
   115c4:	bne	116f8 <__assert_fail@plt+0x5fc>
   115c8:	mov	r3, #0
   115cc:	strb	r3, [r6, r8]
   115d0:	ldr	r3, [pc, #1592]	; 11c10 <__assert_fail@plt+0xb14>
   115d4:	ldrb	r3, [r3, #20]
   115d8:	cmp	r3, #0
   115dc:	bne	116d0 <__assert_fail@plt+0x5d4>
   115e0:	ldrb	r7, [r6]
   115e4:	cmp	r7, #0
   115e8:	beq	11724 <__assert_fail@plt+0x628>
   115ec:	bl	10fd0 <__ctype_b_loc@plt>
   115f0:	ldr	r2, [r0]
   115f4:	mov	r8, r6
   115f8:	lsl	r7, r7, #1
   115fc:	ldrh	r3, [r2, r7]
   11600:	tst	r3, #1
   11604:	beq	11614 <__assert_fail@plt+0x518>
   11608:	ldrb	r7, [r8, #1]!
   1160c:	cmp	r7, #0
   11610:	bne	115f8 <__assert_fail@plt+0x4fc>
   11614:	ldr	r3, [pc, #1524]	; 11c10 <__assert_fail@plt+0xb14>
   11618:	ldr	r3, [r3, #24]
   1161c:	cmp	r3, #0
   11620:	beq	1164c <__assert_fail@plt+0x550>
   11624:	cmp	r4, #1
   11628:	cmple	r6, r8
   1162c:	bne	1172c <__assert_fail@plt+0x630>
   11630:	mov	r2, #0
   11634:	ldr	r3, [pc, #1492]	; 11c10 <__assert_fail@plt+0xb14>
   11638:	str	r2, [r3, #28]
   1163c:	ldr	r3, [pc, #1484]	; 11c10 <__assert_fail@plt+0xb14>
   11640:	ldrb	r3, [r3, #20]
   11644:	cmp	r3, #0
   11648:	bne	11744 <__assert_fail@plt+0x648>
   1164c:	mov	r2, #0
   11650:	mov	r3, #0
   11654:	strd	r2, [sp, #40]	; 0x28
   11658:	mov	r3, #0
   1165c:	str	r3, [sp, #32]
   11660:	ldr	r3, [pc, #1448]	; 11c10 <__assert_fail@plt+0xb14>
   11664:	ldr	r9, [r3, #32]
   11668:	sub	r7, r9, #3
   1166c:	cmp	r7, #1
   11670:	movhi	r7, #1000	; 0x3e8
   11674:	movls	r7, #1024	; 0x400
   11678:	ldrb	r3, [r3, #20]
   1167c:	cmp	r3, #0
   11680:	bne	11764 <__assert_fail@plt+0x668>
   11684:	add	r3, sp, #30
   11688:	add	r2, sp, #40	; 0x28
   1168c:	add	r1, sp, #32
   11690:	mov	r0, r8
   11694:	bl	11230 <__assert_fail@plt+0x134>
   11698:	mov	r5, r0
   1169c:	cmp	r0, #1
   116a0:	movhi	fp, #0
   116a4:	bls	117b0 <__assert_fail@plt+0x6b4>
   116a8:	cmp	r5, #6
   116ac:	ldrls	pc, [pc, r5, lsl #2]
   116b0:	b	11b90 <__assert_fail@plt+0xa94>
   116b4:	andeq	r1, r1, r8, asr #21
   116b8:	andeq	r1, r1, r8, asr #21
   116bc:	andeq	r1, r1, r0, asr #21
   116c0:	andeq	r1, r1, ip, asr #21
   116c4:	andeq	r1, r1, r8, lsr #18
   116c8:	andeq	r1, r1, r4, ror fp
   116cc:	andeq	r1, r1, r4, lsl #23
   116d0:	ldr	r3, [pc, #1340]	; 11c14 <__assert_fail@plt+0xb18>
   116d4:	ldr	r8, [r3]
   116d8:	mov	r0, r7
   116dc:	bl	16b04 <__assert_fail@plt+0x5a08>
   116e0:	mov	r3, r0
   116e4:	ldr	r2, [pc, #1324]	; 11c18 <__assert_fail@plt+0xb1c>
   116e8:	mov	r1, #1
   116ec:	mov	r0, r8
   116f0:	bl	1103c <__fprintf_chk@plt>
   116f4:	b	115e0 <__assert_fail@plt+0x4e4>
   116f8:	ldr	r3, [pc, #1296]	; 11c10 <__assert_fail@plt+0xb14>
   116fc:	ldrb	r3, [r3, #20]
   11700:	cmp	r3, #0
   11704:	beq	115e0 <__assert_fail@plt+0x4e4>
   11708:	ldr	r3, [pc, #1284]	; 11c14 <__assert_fail@plt+0xb18>
   1170c:	ldr	r3, [r3]
   11710:	mov	r2, #22
   11714:	mov	r1, #1
   11718:	ldr	r0, [pc, #1276]	; 11c1c <__assert_fail@plt+0xb20>
   1171c:	bl	10f28 <fwrite@plt>
   11720:	b	115e0 <__assert_fail@plt+0x4e4>
   11724:	mov	r8, r6
   11728:	b	11614 <__assert_fail@plt+0x518>
   1172c:	mov	r0, r6
   11730:	bl	10fe8 <strlen@plt>
   11734:	ldr	r3, [pc, #1236]	; 11c10 <__assert_fail@plt+0xb14>
   11738:	str	r0, [r3, #28]
   1173c:	bl	114ac <__assert_fail@plt+0x3b0>
   11740:	b	1163c <__assert_fail@plt+0x540>
   11744:	ldr	r3, [pc, #1220]	; 11c10 <__assert_fail@plt+0xb14>
   11748:	ldr	r3, [r3, #28]
   1174c:	ldr	r2, [pc, #1228]	; 11c20 <__assert_fail@plt+0xb24>
   11750:	mov	r1, #1
   11754:	ldr	r0, [pc, #1208]	; 11c14 <__assert_fail@plt+0xb18>
   11758:	ldr	r0, [r0]
   1175c:	bl	1103c <__fprintf_chk@plt>
   11760:	b	1164c <__assert_fail@plt+0x550>
   11764:	ldr	r3, [pc, #1192]	; 11c14 <__assert_fail@plt+0xb18>
   11768:	ldr	r4, [r3]
   1176c:	mov	r1, r8
   11770:	mov	r0, #0
   11774:	bl	16af4 <__assert_fail@plt+0x59f8>
   11778:	mov	r5, r0
   1177c:	ldr	r3, [pc, #1164]	; 11c10 <__assert_fail@plt+0xb14>
   11780:	ldr	r1, [r3, #4]
   11784:	mov	r0, #1
   11788:	bl	16af4 <__assert_fail@plt+0x59f8>
   1178c:	mov	r3, #15
   11790:	str	r3, [sp, #4]
   11794:	str	r0, [sp]
   11798:	mov	r3, r5
   1179c:	ldr	r2, [pc, #1152]	; 11c24 <__assert_fail@plt+0xb28>
   117a0:	mov	r1, #1
   117a4:	mov	r0, r4
   117a8:	bl	1103c <__fprintf_chk@plt>
   117ac:	b	11684 <__assert_fail@plt+0x588>
   117b0:	ldr	r4, [sp, #32]
   117b4:	ldr	r3, [pc, #1108]	; 11c10 <__assert_fail@plt+0xb14>
   117b8:	ldr	sl, [r3]
   117bc:	mov	r2, sl
   117c0:	ldr	r1, [r3, #4]
   117c4:	mov	r0, r4
   117c8:	bl	110cc <strncmp@plt>
   117cc:	cmp	r0, #0
   117d0:	movne	fp, #0
   117d4:	beq	11804 <__assert_fail@plt+0x708>
   117d8:	ldr	r3, [pc, #1072]	; 11c10 <__assert_fail@plt+0xb14>
   117dc:	ldrb	r3, [r3, #20]
   117e0:	cmp	r3, #0
   117e4:	bne	118c8 <__assert_fail@plt+0x7cc>
   117e8:	ldr	r3, [sp, #32]
   117ec:	ldrb	r3, [r3]
   117f0:	cmp	r3, #0
   117f4:	beq	12800 <__assert_fail@plt+0x1704>
   117f8:	bl	10fd0 <__ctype_b_loc@plt>
   117fc:	ldr	r2, [r0]
   11800:	b	118f4 <__assert_fail@plt+0x7f8>
   11804:	mov	r2, #0
   11808:	mov	r3, #0
   1180c:	strd	r2, [sp, #104]	; 0x68
   11810:	add	r0, r4, sl
   11814:	str	r0, [sp, #32]
   11818:	add	r3, sp, #31
   1181c:	add	r2, sp, #104	; 0x68
   11820:	add	r1, sp, #36	; 0x24
   11824:	bl	11230 <__assert_fail@plt+0x134>
   11828:	cmp	r0, #1
   1182c:	bls	11844 <__assert_fail@plt+0x748>
   11830:	mov	r5, r0
   11834:	mov	fp, #0
   11838:	cmp	r5, #1
   1183c:	bls	117d8 <__assert_fail@plt+0x6dc>
   11840:	b	116a8 <__assert_fail@plt+0x5ac>
   11844:	cmp	r0, #1
   11848:	moveq	r5, #1
   1184c:	ldrb	r3, [sp, #31]
   11850:	cmp	r3, #0
   11854:	bne	118c0 <__assert_fail@plt+0x7c4>
   11858:	ldr	r2, [sp, #36]	; 0x24
   1185c:	ldr	fp, [sp, #32]
   11860:	vldr	d5, [sp, #104]	; 0x68
   11864:	subs	fp, r2, fp
   11868:	beq	118b0 <__assert_fail@plt+0x7b4>
   1186c:	subs	r3, fp, #1
   11870:	beq	118b8 <__assert_fail@plt+0x7bc>
   11874:	vldr	d7, [pc, #892]	; 11bf8 <__assert_fail@plt+0xafc>
   11878:	vmov.f64	d6, d7
   1187c:	vmul.f64	d7, d7, d6
   11880:	subs	r3, r3, #1
   11884:	bne	1187c <__assert_fail@plt+0x780>
   11888:	vdiv.f64	d6, d5, d7
   1188c:	vstr	d6, [sp, #104]	; 0x68
   11890:	ldrb	r3, [sp, #30]
   11894:	cmp	r3, #0
   11898:	vldr	d7, [sp, #40]	; 0x28
   1189c:	vsubne.f64	d7, d7, d6
   118a0:	vaddeq.f64	d7, d7, d6
   118a4:	vstr	d7, [sp, #40]	; 0x28
   118a8:	str	r2, [sp, #32]
   118ac:	b	11838 <__assert_fail@plt+0x73c>
   118b0:	vldr	d7, [pc, #840]	; 11c00 <__assert_fail@plt+0xb04>
   118b4:	b	11888 <__assert_fail@plt+0x78c>
   118b8:	vldr	d7, [pc, #824]	; 11bf8 <__assert_fail@plt+0xafc>
   118bc:	b	11888 <__assert_fail@plt+0x78c>
   118c0:	mov	r0, #3
   118c4:	b	11830 <__assert_fail@plt+0x734>
   118c8:	ldr	r3, [pc, #836]	; 11c14 <__assert_fail@plt+0xb18>
   118cc:	ldr	r0, [r3]
   118d0:	str	fp, [sp, #8]
   118d4:	ldrd	r2, [sp, #40]	; 0x28
   118d8:	strd	r2, [sp]
   118dc:	ldr	r2, [pc, #836]	; 11c28 <__assert_fail@plt+0xb2c>
   118e0:	mov	r1, #1
   118e4:	bl	1103c <__fprintf_chk@plt>
   118e8:	b	117e8 <__assert_fail@plt+0x6ec>
   118ec:	add	r4, r4, #1
   118f0:	str	r4, [sp, #32]
   118f4:	ldr	r4, [sp, #32]
   118f8:	ldrb	sl, [r4]
   118fc:	lsl	r3, sl, #1
   11900:	ldrh	r3, [r2, r3]
   11904:	tst	r3, #1
   11908:	bne	118ec <__assert_fail@plt+0x7f0>
   1190c:	mov	r1, sl
   11910:	ldr	r0, [pc, #788]	; 11c2c <__assert_fail@plt+0xb30>
   11914:	bl	10ff4 <strchr@plt>
   11918:	cmp	r0, #0
   1191c:	beq	11b74 <__assert_fail@plt+0xa78>
   11920:	cmp	r9, #0
   11924:	bne	11934 <__assert_fail@plt+0x838>
   11928:	mov	r5, #4
   1192c:	ldr	r1, [pc, #764]	; 11c30 <__assert_fail@plt+0xb34>
   11930:	b	11ad0 <__assert_fail@plt+0x9d4>
   11934:	sub	sl, sl, #69	; 0x45
   11938:	cmp	sl, #21
   1193c:	ldrls	pc, [pc, sl, lsl #2]
   11940:	b	11a0c <__assert_fail@plt+0x910>
   11944:	strdeq	r1, [r1], -r4
   11948:	andeq	r1, r1, ip, lsl #20
   1194c:	ldrdeq	r1, [r1], -ip
   11950:	andeq	r1, r1, ip, lsl #20
   11954:	andeq	r1, r1, ip, lsl #20
   11958:	andeq	r1, r1, ip, lsl #20
   1195c:	andeq	r1, r1, r4, lsl sl
   11960:	andeq	r1, r1, ip, lsl #20
   11964:	muleq	r1, ip, r9
   11968:	andeq	r1, r1, ip, lsl #20
   1196c:	andeq	r1, r1, ip, lsl #20
   11970:	andeq	r1, r1, ip, ror #19
   11974:	andeq	r1, r1, ip, lsl #20
   11978:	andeq	r1, r1, ip, lsl #20
   1197c:	andeq	r1, r1, ip, lsl #20
   11980:	andeq	r1, r1, r4, ror #19
   11984:	andeq	r1, r1, ip, lsl #20
   11988:	andeq	r1, r1, ip, lsl #20
   1198c:	andeq	r1, r1, ip, lsl #20
   11990:	andeq	r1, r1, ip, lsl #20
   11994:	andeq	r1, r1, r4, lsl #20
   11998:	strdeq	r1, [r1], -ip
   1199c:	mov	sl, #2
   119a0:	add	r3, r4, #1
   119a4:	str	r3, [sp, #32]
   119a8:	cmp	r9, #1
   119ac:	beq	11a1c <__assert_fail@plt+0x920>
   119b0:	cmp	r9, #4
   119b4:	movne	fp, #0
   119b8:	bne	1280c <__assert_fail@plt+0x1710>
   119bc:	ldr	r3, [sp, #32]
   119c0:	ldrb	r2, [r3]
   119c4:	cmp	r2, #105	; 0x69
   119c8:	bne	11b80 <__assert_fail@plt+0xa84>
   119cc:	add	r3, r3, #1
   119d0:	str	r3, [sp, #32]
   119d4:	mov	fp, #0
   119d8:	b	1280c <__assert_fail@plt+0x1710>
   119dc:	mov	sl, #3
   119e0:	b	119a0 <__assert_fail@plt+0x8a4>
   119e4:	mov	sl, #4
   119e8:	b	119a0 <__assert_fail@plt+0x8a4>
   119ec:	mov	sl, #5
   119f0:	b	119a0 <__assert_fail@plt+0x8a4>
   119f4:	mov	sl, #6
   119f8:	b	119a0 <__assert_fail@plt+0x8a4>
   119fc:	mov	sl, #7
   11a00:	b	119a0 <__assert_fail@plt+0x8a4>
   11a04:	mov	sl, #8
   11a08:	b	119a0 <__assert_fail@plt+0x8a4>
   11a0c:	mov	sl, #0
   11a10:	b	119a0 <__assert_fail@plt+0x8a4>
   11a14:	mov	sl, #1
   11a18:	b	119a0 <__assert_fail@plt+0x8a4>
   11a1c:	ldrb	r3, [r4, #1]
   11a20:	cmp	r3, #105	; 0x69
   11a24:	beq	11a30 <__assert_fail@plt+0x934>
   11a28:	mov	fp, #0
   11a2c:	b	1280c <__assert_fail@plt+0x1710>
   11a30:	add	r4, r4, #2
   11a34:	str	r4, [sp, #32]
   11a38:	ldr	r3, [pc, #464]	; 11c10 <__assert_fail@plt+0xb14>
   11a3c:	ldrb	r3, [r3, #20]
   11a40:	cmp	r3, #0
   11a44:	moveq	r7, #1024	; 0x400
   11a48:	beq	11a28 <__assert_fail@plt+0x92c>
   11a4c:	mov	r3, #1024	; 0x400
   11a50:	ldr	r2, [pc, #476]	; 11c34 <__assert_fail@plt+0xb38>
   11a54:	mov	r1, #1
   11a58:	ldr	r0, [pc, #436]	; 11c14 <__assert_fail@plt+0xb18>
   11a5c:	ldr	r0, [r0]
   11a60:	bl	1103c <__fprintf_chk@plt>
   11a64:	mov	r7, #1024	; 0x400
   11a68:	b	11a28 <__assert_fail@plt+0x92c>
   11a6c:	vldr	d8, [pc, #396]	; 11c00 <__assert_fail@plt+0xb04>
   11a70:	b	12834 <__assert_fail@plt+0x1738>
   11a74:	vmov.f64	d8, d7
   11a78:	b	12834 <__assert_fail@plt+0x1738>
   11a7c:	ldr	r3, [pc, #400]	; 11c14 <__assert_fail@plt+0xb18>
   11a80:	ldr	r0, [r3]
   11a84:	vstr	d8, [sp, #8]
   11a88:	str	sl, [sp]
   11a8c:	mov	r3, r7
   11a90:	ldr	r2, [pc, #416]	; 11c38 <__assert_fail@plt+0xb3c>
   11a94:	mov	r1, #1
   11a98:	bl	1103c <__fprintf_chk@plt>
   11a9c:	b	12844 <__assert_fail@plt+0x1748>
   11aa0:	ldr	r3, [pc, #364]	; 11c14 <__assert_fail@plt+0xb18>
   11aa4:	ldr	r0, [r3]
   11aa8:	vstr	d8, [sp, #8]
   11aac:	vstr	d8, [sp]
   11ab0:	ldr	r2, [pc, #388]	; 11c3c <__assert_fail@plt+0xb40>
   11ab4:	mov	r1, #1
   11ab8:	bl	1103c <__fprintf_chk@plt>
   11abc:	b	12860 <__assert_fail@plt+0x1764>
   11ac0:	ldr	r1, [pc, #376]	; 11c40 <__assert_fail@plt+0xb44>
   11ac4:	b	11ad0 <__assert_fail@plt+0x9d4>
   11ac8:	bl	110d8 <abort@plt>
   11acc:	ldr	r1, [pc, #368]	; 11c44 <__assert_fail@plt+0xb48>
   11ad0:	ldr	r3, [pc, #312]	; 11c10 <__assert_fail@plt+0xb14>
   11ad4:	ldr	r3, [r3, #36]	; 0x24
   11ad8:	cmp	r3, #3
   11adc:	beq	11b14 <__assert_fail@plt+0xa18>
   11ae0:	ldr	r3, [pc, #364]	; 11c54 <__assert_fail@plt+0xb58>
   11ae4:	ldr	r4, [r3]
   11ae8:	mov	r2, #5
   11aec:	mov	r0, #0
   11af0:	bl	10ef8 <dcgettext@plt>
   11af4:	mov	r7, r0
   11af8:	mov	r0, r8
   11afc:	bl	16b04 <__assert_fail@plt+0x5a08>
   11b00:	mov	r3, r0
   11b04:	mov	r2, r7
   11b08:	mov	r1, #0
   11b0c:	mov	r0, r4
   11b10:	bl	10f7c <error@plt>
   11b14:	ldr	r3, [pc, #312]	; 11c54 <__assert_fail@plt+0xb58>
   11b18:	ldrd	r0, [r3, #8]
   11b1c:	cmp	r1, #0
   11b20:	cmpeq	r0, #1
   11b24:	beq	11be4 <__assert_fail@plt+0xae8>
   11b28:	bl	18dd8 <__assert_fail@plt+0x7cdc>
   11b2c:	vldr	d8, [sp, #40]	; 0x28
   11b30:	vmov	d7, r0, r1
   11b34:	vmul.f64	d8, d7, d8
   11b38:	ldr	r3, [pc, #276]	; 11c54 <__assert_fail@plt+0xb58>
   11b3c:	ldrd	r0, [r3, #16]
   11b40:	bl	18dd8 <__assert_fail@plt+0x7cdc>
   11b44:	vmov	d6, r0, r1
   11b48:	vdiv.f64	d7, d8, d6
   11b4c:	vstr	d7, [sp, #40]	; 0x28
   11b50:	vldr	d8, [sp, #40]	; 0x28
   11b54:	cmp	r5, #1
   11b58:	bls	11c58 <__assert_fail@plt+0xb5c>
   11b5c:	ldr	r3, [pc, #168]	; 11c0c <__assert_fail@plt+0xb10>
   11b60:	ldr	r1, [r3]
   11b64:	mov	r0, r6
   11b68:	bl	10e44 <fputs_unlocked@plt>
   11b6c:	mov	r0, #0
   11b70:	b	1153c <__assert_fail@plt+0x440>
   11b74:	mov	r5, #5
   11b78:	ldr	r1, [pc, #200]	; 11c48 <__assert_fail@plt+0xb4c>
   11b7c:	b	11ad0 <__assert_fail@plt+0x9d4>
   11b80:	mov	fp, #0
   11b84:	mov	r5, #6
   11b88:	ldr	r1, [pc, #188]	; 11c4c <__assert_fail@plt+0xb50>
   11b8c:	b	11ad0 <__assert_fail@plt+0x9d4>
   11b90:	mov	r1, #0
   11b94:	b	11ad0 <__assert_fail@plt+0x9d4>
   11b98:	cmp	r5, #1
   11b9c:	bne	11b14 <__assert_fail@plt+0xa18>
   11ba0:	ldr	r3, [pc, #104]	; 11c10 <__assert_fail@plt+0xb14>
   11ba4:	ldrb	r3, [r3, #40]	; 0x28
   11ba8:	cmp	r3, #0
   11bac:	beq	11b14 <__assert_fail@plt+0xa18>
   11bb0:	mov	r2, #5
   11bb4:	ldr	r1, [pc, #148]	; 11c50 <__assert_fail@plt+0xb54>
   11bb8:	mov	r0, #0
   11bbc:	bl	10ef8 <dcgettext@plt>
   11bc0:	mov	r4, r0
   11bc4:	mov	r0, r8
   11bc8:	bl	16b04 <__assert_fail@plt+0x5a08>
   11bcc:	mov	r3, r0
   11bd0:	mov	r2, r4
   11bd4:	mov	r1, #0
   11bd8:	mov	r0, r1
   11bdc:	bl	10f7c <error@plt>
   11be0:	b	11b14 <__assert_fail@plt+0xa18>
   11be4:	ldrd	r2, [r3, #16]
   11be8:	cmp	r3, #0
   11bec:	cmpeq	r2, #1
   11bf0:	bne	11b28 <__assert_fail@plt+0xa2c>
   11bf4:	b	11b50 <__assert_fail@plt+0xa54>
   11bf8:	andeq	r0, r0, r0
   11bfc:	eormi	r0, r4, r0
   11c00:	andeq	r0, r0, r0
   11c04:	svccc	0x00f00000	; IMB
   11c08:	strdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   11c0c:	muleq	r2, ip, r1
   11c10:	andeq	ip, r2, r8, lsr #3
   11c14:	muleq	r2, r0, r1
   11c18:	andeq	r9, r1, r8, lsr r4
   11c1c:	andeq	r9, r1, ip, asr #8
   11c20:	andeq	r9, r1, r4, ror #8
   11c24:	andeq	r9, r1, ip, lsl #9
   11c28:	andeq	r9, r1, ip, ror #9
   11c2c:	andeq	r9, r1, r8, asr #5
   11c30:	andeq	r9, r1, r0, lsr r3
   11c34:	andeq	r9, r1, r0, lsr #10
   11c38:	andeq	r9, r1, r4, asr r5
   11c3c:	andeq	r9, r1, r0, ror r5
   11c40:	strdeq	r9, [r1], -r8
   11c44:	andeq	r9, r1, ip, lsl r3
   11c48:	andeq	r9, r1, r8, ror #6
   11c4c:	andeq	r9, r1, r4, lsl #7
   11c50:			; <UNDEFINED> instruction: 0x000195b0
   11c54:	andeq	ip, r2, r8, lsl #2
   11c58:	ldr	r3, [pc, #-12]	; 11c54 <__assert_fail@plt+0xb58>
   11c5c:	ldr	r3, [r3, #24]
   11c60:	cmn	r3, #1
   11c64:	movne	fp, r3
   11c68:	vldr	d7, [pc, #672]	; 11f10 <__assert_fail@plt+0xe14>
   11c6c:	vcmpe.f64	d8, d7
   11c70:	vmrs	APSR_nzcv, fpscr
   11c74:	blt	11c88 <__assert_fail@plt+0xb8c>
   11c78:	vldr	d7, [pc, #664]	; 11f18 <__assert_fail@plt+0xe1c>
   11c7c:	vcmpe.f64	d8, d7
   11c80:	vmrs	APSR_nzcv, fpscr
   11c84:	bls	11d6c <__assert_fail@plt+0xc70>
   11c88:	ldr	r3, [pc, #736]	; 11f70 <__assert_fail@plt+0xe74>
   11c8c:	ldr	r4, [r3, #44]	; 0x2c
   11c90:	cmp	r4, #0
   11c94:	bne	11dc0 <__assert_fail@plt+0xcc4>
   11c98:	cmp	fp, #15
   11c9c:	bls	11dc0 <__assert_fail@plt+0xcc4>
   11ca0:	ldr	r3, [pc, #712]	; 11f70 <__assert_fail@plt+0xe74>
   11ca4:	ldr	r3, [r3, #36]	; 0x24
   11ca8:	cmp	r3, #3
   11cac:	beq	11b5c <__assert_fail@plt+0xa60>
   11cb0:	cmp	fp, #0
   11cb4:	beq	11d90 <__assert_fail@plt+0xc94>
   11cb8:	ldr	r3, [pc, #648]	; 11f48 <__assert_fail@plt+0xe4c>
   11cbc:	ldr	r4, [r3]
   11cc0:	mov	r2, #5
   11cc4:	ldr	r1, [pc, #640]	; 11f4c <__assert_fail@plt+0xe50>
   11cc8:	mov	r0, #0
   11ccc:	bl	10ef8 <dcgettext@plt>
   11cd0:	mov	r1, #0
   11cd4:	str	fp, [sp, #8]
   11cd8:	str	r1, [sp, #12]
   11cdc:	vstr	d8, [sp]
   11ce0:	mov	r2, r0
   11ce4:	mov	r0, r4
   11ce8:	bl	10f7c <error@plt>
   11cec:	b	11b5c <__assert_fail@plt+0xa60>
   11cf0:	add	r3, r3, #1
   11cf4:	vdiv.f64	d7, d7, d6
   11cf8:	vcmpe.f64	d7, d4
   11cfc:	vmrs	APSR_nzcv, fpscr
   11d00:	vnegmi.f64	d5, d7
   11d04:	vmovpl.f64	d5, d7
   11d08:	vcmpe.f64	d5, d6
   11d0c:	vmrs	APSR_nzcv, fpscr
   11d10:	bge	11cf0 <__assert_fail@plt+0xbf4>
   11d14:	ldr	r2, [pc, #596]	; 11f70 <__assert_fail@plt+0xe74>
   11d18:	ldr	r4, [r2, #44]	; 0x2c
   11d1c:	cmp	r4, #0
   11d20:	beq	11d80 <__assert_fail@plt+0xc84>
   11d24:	cmp	r3, #26
   11d28:	bls	11dc0 <__assert_fail@plt+0xcc4>
   11d2c:	ldr	r3, [pc, #572]	; 11f70 <__assert_fail@plt+0xe74>
   11d30:	ldr	r3, [r3, #36]	; 0x24
   11d34:	cmp	r3, #3
   11d38:	beq	11b5c <__assert_fail@plt+0xa60>
   11d3c:	ldr	r3, [pc, #516]	; 11f48 <__assert_fail@plt+0xe4c>
   11d40:	ldr	r4, [r3]
   11d44:	mov	r2, #5
   11d48:	ldr	r1, [pc, #512]	; 11f50 <__assert_fail@plt+0xe54>
   11d4c:	mov	r0, #0
   11d50:	bl	10ef8 <dcgettext@plt>
   11d54:	vstr	d8, [sp]
   11d58:	mov	r2, r0
   11d5c:	mov	r1, #0
   11d60:	mov	r0, r4
   11d64:	bl	10f7c <error@plt>
   11d68:	b	11b5c <__assert_fail@plt+0xa60>
   11d6c:	vmov.f64	d7, d8
   11d70:	mov	r3, #0
   11d74:	vldr	d4, [pc, #420]	; 11f20 <__assert_fail@plt+0xe24>
   11d78:	vldr	d6, [pc, #424]	; 11f28 <__assert_fail@plt+0xe2c>
   11d7c:	b	11cf8 <__assert_fail@plt+0xbfc>
   11d80:	add	r2, fp, r3
   11d84:	cmp	r2, #15
   11d88:	bls	11d24 <__assert_fail@plt+0xc28>
   11d8c:	b	11ca0 <__assert_fail@plt+0xba4>
   11d90:	ldr	r3, [pc, #432]	; 11f48 <__assert_fail@plt+0xe4c>
   11d94:	ldr	r4, [r3]
   11d98:	mov	r2, #5
   11d9c:	ldr	r1, [pc, #432]	; 11f54 <__assert_fail@plt+0xe58>
   11da0:	mov	r0, #0
   11da4:	bl	10ef8 <dcgettext@plt>
   11da8:	vstr	d8, [sp]
   11dac:	mov	r2, r0
   11db0:	mov	r1, #0
   11db4:	mov	r0, r4
   11db8:	bl	10f7c <error@plt>
   11dbc:	b	11b5c <__assert_fail@plt+0xa60>
   11dc0:	ldr	r3, [pc, #424]	; 11f70 <__assert_fail@plt+0xe74>
   11dc4:	ldr	r8, [r3, #48]	; 0x30
   11dc8:	ldr	r3, [pc, #376]	; 11f48 <__assert_fail@plt+0xe4c>
   11dcc:	ldr	r6, [r3, #28]
   11dd0:	mov	r3, #37	; 0x25
   11dd4:	strb	r3, [sp, #40]	; 0x28
   11dd8:	cmp	r8, #0
   11ddc:	movne	r3, #39	; 0x27
   11de0:	strbne	r3, [sp, #41]	; 0x29
   11de4:	addne	r5, sp, #42	; 0x2a
   11de8:	addeq	r5, sp, #41	; 0x29
   11dec:	ldr	r3, [pc, #380]	; 11f70 <__assert_fail@plt+0xe74>
   11df0:	ldr	r3, [r3, #52]	; 0x34
   11df4:	cmp	r3, #0
   11df8:	bne	11e80 <__assert_fail@plt+0xd84>
   11dfc:	ldr	r3, [pc, #364]	; 11f70 <__assert_fail@plt+0xe74>
   11e00:	ldrb	r3, [r3, #20]
   11e04:	cmp	r3, #0
   11e08:	bne	11ea8 <__assert_fail@plt+0xdac>
   11e0c:	cmp	r4, #0
   11e10:	bne	121f8 <__assert_fail@plt+0x10fc>
   11e14:	cmp	fp, #0
   11e18:	beq	11ec4 <__assert_fail@plt+0xdc8>
   11e1c:	subs	r3, fp, #1
   11e20:	beq	11ecc <__assert_fail@plt+0xdd0>
   11e24:	vldr	d10, [pc, #252]	; 11f28 <__assert_fail@plt+0xe2c>
   11e28:	vmov.f64	d7, d10
   11e2c:	vmul.f64	d10, d10, d7
   11e30:	subs	r3, r3, #1
   11e34:	bne	11e2c <__assert_fail@plt+0xd30>
   11e38:	vmul.f64	d9, d8, d10
   11e3c:	vldr	d7, [pc, #236]	; 11f30 <__assert_fail@plt+0xe34>
   11e40:	vmul.f64	d7, d9, d7
   11e44:	vmov	r0, r1, d7
   11e48:	bl	18e98 <__assert_fail@plt+0x7d9c>
   11e4c:	bl	18dec <__assert_fail@plt+0x7cf0>
   11e50:	vldr	d11, [pc, #224]	; 11f38 <__assert_fail@plt+0xe3c>
   11e54:	vmov	d7, r0, r1
   11e58:	vmul.f64	d11, d7, d11
   11e5c:	vsub.f64	d9, d9, d11
   11e60:	cmp	r6, #4
   11e64:	ldrls	pc, [pc, r6, lsl #2]
   11e68:	b	121cc <__assert_fail@plt+0x10d0>
   11e6c:	ldrdeq	r1, [r1], -r4
   11e70:	andeq	r1, r1, r8, ror pc
   11e74:	andeq	r2, r1, r0, lsl r1
   11e78:	muleq	r1, r0, r1
   11e7c:	andeq	r2, r1, r4, lsr #3
   11e80:	str	r3, [sp, #4]
   11e84:	ldr	r3, [pc, #204]	; 11f58 <__assert_fail@plt+0xe5c>
   11e88:	str	r3, [sp]
   11e8c:	mov	r3, #63	; 0x3f
   11e90:	mov	r2, #1
   11e94:	mov	r1, #62	; 0x3e
   11e98:	mov	r0, r5
   11e9c:	bl	110e4 <__snprintf_chk@plt>
   11ea0:	add	r5, r5, r0
   11ea4:	b	11dfc <__assert_fail@plt+0xd00>
   11ea8:	ldr	r3, [pc, #176]	; 11f60 <__assert_fail@plt+0xe64>
   11eac:	ldr	r3, [r3]
   11eb0:	mov	r2, #17
   11eb4:	mov	r1, #1
   11eb8:	ldr	r0, [pc, #156]	; 11f5c <__assert_fail@plt+0xe60>
   11ebc:	bl	10f28 <fwrite@plt>
   11ec0:	b	11e0c <__assert_fail@plt+0xd10>
   11ec4:	vldr	d10, [pc, #116]	; 11f40 <__assert_fail@plt+0xe44>
   11ec8:	b	11e38 <__assert_fail@plt+0xd3c>
   11ecc:	vldr	d10, [pc, #84]	; 11f28 <__assert_fail@plt+0xe2c>
   11ed0:	b	11e38 <__assert_fail@plt+0xd3c>
   11ed4:	vmov	r0, r1, d9
   11ed8:	bl	18e98 <__assert_fail@plt+0x7d9c>
   11edc:	mov	r6, r0
   11ee0:	mov	r7, r1
   11ee4:	bl	18dec <__assert_fail@plt+0x7cf0>
   11ee8:	vmov	d7, r0, r1
   11eec:	vcmpe.f64	d9, d7
   11ef0:	vmrs	APSR_nzcv, fpscr
   11ef4:	ble	11fb0 <__assert_fail@plt+0xeb4>
   11ef8:	adds	r2, r6, #1
   11efc:	adc	r3, r7, #0
   11f00:	mov	r6, r2
   11f04:	mov	r7, r3
   11f08:	b	11fb0 <__assert_fail@plt+0xeb4>
   11f0c:	nop			; (mov r0, r0)
   11f10:			; <UNDEFINED> instruction: 0xffffffff
   11f14:			; <UNDEFINED> instruction: 0xffefffff
   11f18:			; <UNDEFINED> instruction: 0xffffffff
   11f1c:	svcvc	0x00efffff
	...
   11f2c:	eormi	r0, r4, r0
   11f30:	andeq	r0, r0, r0
   11f34:	stccc	0, cr0, [r0], {-0}
   11f38:	andeq	r0, r0, r0
   11f3c:	mvnmi	r0, #0
   11f40:	andeq	r0, r0, r0
   11f44:	svccc	0x00f00000	; IMB
   11f48:	andeq	ip, r2, r8, lsl #2
   11f4c:	andeq	r9, r1, r0, ror #11
   11f50:	andeq	r9, r1, r8, ror #12
   11f54:	andeq	r9, r1, ip, lsr #12
   11f58:	andeq	r9, r1, ip, lsr #13
   11f5c:			; <UNDEFINED> instruction: 0x000196b4
   11f60:	muleq	r2, r0, r1
   11f64:	andeq	r9, r1, r8, ror #7
   11f68:			; <UNDEFINED> instruction: 0x000193b4
   11f6c:	andeq	r9, r1, r8, asr #13
   11f70:	andeq	ip, r2, r8, lsr #3
   11f74:	muleq	r2, ip, r1
   11f78:	vneg.f64	d9, d9
   11f7c:	vmov	r0, r1, d9
   11f80:	bl	18e98 <__assert_fail@plt+0x7d9c>
   11f84:	mov	r6, r0
   11f88:	mov	r7, r1
   11f8c:	bl	18dec <__assert_fail@plt+0x7cf0>
   11f90:	vmov	d7, r0, r1
   11f94:	vcmpe.f64	d9, d7
   11f98:	vmrs	APSR_nzcv, fpscr
   11f9c:	ble	11fa8 <__assert_fail@plt+0xeac>
   11fa0:	adds	r6, r6, #1
   11fa4:	adc	r7, r7, #0
   11fa8:	rsbs	r6, r6, #0
   11fac:	rsc	r7, r7, #0
   11fb0:	mov	r0, r6
   11fb4:	mov	r1, r7
   11fb8:	bl	18dec <__assert_fail@plt+0x7cf0>
   11fbc:	vmov	d7, r0, r1
   11fc0:	vadd.f64	d11, d7, d11
   11fc4:	vdiv.f64	d9, d11, d10
   11fc8:	ldr	r3, [pc, #-96]	; 11f70 <__assert_fail@plt+0xe74>
   11fcc:	ldrb	r3, [r3, #20]
   11fd0:	cmp	r3, #0
   11fd4:	beq	12000 <__assert_fail@plt+0xf04>
   11fd8:	ldr	r3, [pc, #-128]	; 11f60 <__assert_fail@plt+0xe64>
   11fdc:	ldr	r0, [r3]
   11fe0:	vstr	d9, [sp]
   11fe4:	mov	r3, fp
   11fe8:	ldr	r2, [pc, #-140]	; 11f64 <__assert_fail@plt+0xe68>
   11fec:	ldr	r1, [pc, #-140]	; 11f68 <__assert_fail@plt+0xe6c>
   11ff0:	cmp	r8, #0
   11ff4:	movne	r2, r1
   11ff8:	mov	r1, #1
   11ffc:	bl	1103c <__fprintf_chk@plt>
   12000:	ldr	r3, [pc, #-156]	; 11f6c <__assert_fail@plt+0xe70>
   12004:	ldr	r0, [r3]
   12008:	str	r0, [r5]
   1200c:	ldrb	r3, [r3, #4]
   12010:	strb	r3, [r5, #4]
   12014:	vstr	d9, [sp, #8]
   12018:	str	fp, [sp, #4]
   1201c:	add	r3, sp, #40	; 0x28
   12020:	str	r3, [sp]
   12024:	mov	r3, #128	; 0x80
   12028:	mov	r2, #1
   1202c:	mov	r1, r3
   12030:	add	r0, sp, #104	; 0x68
   12034:	bl	110e4 <__snprintf_chk@plt>
   12038:	cmp	r0, #127	; 0x7f
   1203c:	bhi	121d4 <__assert_fail@plt+0x10d8>
   12040:	ldr	r3, [pc, #-216]	; 11f70 <__assert_fail@plt+0xe74>
   12044:	ldr	r4, [r3, #16]
   12048:	cmp	r4, #0
   1204c:	beq	1206c <__assert_fail@plt+0xf70>
   12050:	add	r0, sp, #104	; 0x68
   12054:	bl	10fe8 <strlen@plt>
   12058:	mov	r3, #128	; 0x80
   1205c:	rsb	r2, r0, #127	; 0x7f
   12060:	mov	r1, r4
   12064:	add	r0, sp, #104	; 0x68
   12068:	bl	10e5c <__strncat_chk@plt>
   1206c:	ldr	r3, [pc, #-260]	; 11f70 <__assert_fail@plt+0xe74>
   12070:	ldrb	r3, [r3, #20]
   12074:	cmp	r3, #0
   12078:	bne	1270c <__assert_fail@plt+0x1610>
   1207c:	ldr	r3, [pc, #-276]	; 11f70 <__assert_fail@plt+0xe74>
   12080:	ldr	r4, [r3, #28]
   12084:	cmp	r4, #0
   12088:	beq	1209c <__assert_fail@plt+0xfa0>
   1208c:	add	r0, sp, #104	; 0x68
   12090:	bl	10fe8 <strlen@plt>
   12094:	cmp	r0, r4
   12098:	bcc	12738 <__assert_fail@plt+0x163c>
   1209c:	add	r0, sp, #104	; 0x68
   120a0:	bl	10fe8 <strlen@plt>
   120a4:	add	r0, r0, #1
   120a8:	bl	114ac <__assert_fail@plt+0x3b0>
   120ac:	add	r1, sp, #104	; 0x68
   120b0:	ldr	r3, [pc, #-328]	; 11f70 <__assert_fail@plt+0xe74>
   120b4:	ldr	r0, [r3, #12]
   120b8:	bl	10f4c <strcpy@plt>
   120bc:	ldr	r3, [pc, #-340]	; 11f70 <__assert_fail@plt+0xe74>
   120c0:	ldr	r0, [r3, #60]	; 0x3c
   120c4:	cmp	r0, #0
   120c8:	beq	120d8 <__assert_fail@plt+0xfdc>
   120cc:	ldr	r3, [pc, #-352]	; 11f74 <__assert_fail@plt+0xe78>
   120d0:	ldr	r1, [r3]
   120d4:	bl	10e44 <fputs_unlocked@plt>
   120d8:	ldr	r4, [pc, #-368]	; 11f70 <__assert_fail@plt+0xe74>
   120dc:	ldr	r3, [pc, #-368]	; 11f74 <__assert_fail@plt+0xe78>
   120e0:	ldr	r1, [r3]
   120e4:	ldr	r0, [r4, #12]
   120e8:	bl	10e44 <fputs_unlocked@plt>
   120ec:	ldr	r0, [r4, #56]	; 0x38
   120f0:	cmp	r0, #0
   120f4:	moveq	r0, #1
   120f8:	beq	1153c <__assert_fail@plt+0x440>
   120fc:	ldr	r3, [pc, #-400]	; 11f74 <__assert_fail@plt+0xe78>
   12100:	ldr	r1, [r3]
   12104:	bl	10e44 <fputs_unlocked@plt>
   12108:	mov	r0, #1
   1210c:	b	1153c <__assert_fail@plt+0x440>
   12110:	vcmpe.f64	d9, #0.0
   12114:	vmrs	APSR_nzcv, fpscr
   12118:	bpl	12158 <__assert_fail@plt+0x105c>
   1211c:	vneg.f64	d9, d9
   12120:	vmov	r0, r1, d9
   12124:	bl	18e98 <__assert_fail@plt+0x7d9c>
   12128:	mov	r6, r0
   1212c:	mov	r7, r1
   12130:	bl	18dec <__assert_fail@plt+0x7cf0>
   12134:	vmov	d7, r0, r1
   12138:	vcmpe.f64	d9, d7
   1213c:	vmrs	APSR_nzcv, fpscr
   12140:	ble	1214c <__assert_fail@plt+0x1050>
   12144:	adds	r6, r6, #1
   12148:	adc	r7, r7, #0
   1214c:	rsbs	r6, r6, #0
   12150:	rsc	r7, r7, #0
   12154:	b	11fb0 <__assert_fail@plt+0xeb4>
   12158:	vmov	r0, r1, d9
   1215c:	bl	18e98 <__assert_fail@plt+0x7d9c>
   12160:	mov	r6, r0
   12164:	mov	r7, r1
   12168:	bl	18dec <__assert_fail@plt+0x7cf0>
   1216c:	vmov	d7, r0, r1
   12170:	vcmpe.f64	d9, d7
   12174:	vmrs	APSR_nzcv, fpscr
   12178:	ble	11fb0 <__assert_fail@plt+0xeb4>
   1217c:	adds	r2, r6, #1
   12180:	adc	r3, r7, #0
   12184:	mov	r6, r2
   12188:	mov	r7, r3
   1218c:	b	11fb0 <__assert_fail@plt+0xeb4>
   12190:	vmov	r0, r1, d9
   12194:	bl	18e98 <__assert_fail@plt+0x7d9c>
   12198:	mov	r6, r0
   1219c:	mov	r7, r1
   121a0:	b	11fb0 <__assert_fail@plt+0xeb4>
   121a4:	vcmpe.f64	d9, #0.0
   121a8:	vmrs	APSR_nzcv, fpscr
   121ac:	vldr	d7, [pc, #980]	; 12588 <__assert_fail@plt+0x148c>
   121b0:	vsubmi.f64	d7, d9, d7
   121b4:	vaddpl.f64	d7, d9, d7
   121b8:	vmov	r0, r1, d7
   121bc:	bl	18e98 <__assert_fail@plt+0x7d9c>
   121c0:	mov	r6, r0
   121c4:	mov	r7, r1
   121c8:	b	11fb0 <__assert_fail@plt+0xeb4>
   121cc:	vldr	d11, [pc, #956]	; 12590 <__assert_fail@plt+0x1494>
   121d0:	b	11fc4 <__assert_fail@plt+0xec8>
   121d4:	mov	r2, #5
   121d8:	ldr	r1, [pc, #992]	; 125c0 <__assert_fail@plt+0x14c4>
   121dc:	mov	r0, #0
   121e0:	bl	10ef8 <dcgettext@plt>
   121e4:	vstr	d9, [sp]
   121e8:	mov	r2, r0
   121ec:	mov	r1, #0
   121f0:	mov	r0, #1
   121f4:	bl	10f7c <error@plt>
   121f8:	sub	r3, r4, #3
   121fc:	cmp	r3, #1
   12200:	movhi	r3, #1000	; 0x3e8
   12204:	movls	r3, #1024	; 0x400
   12208:	vmov	s14, r3
   1220c:	vcvt.f64.s32	d10, s14
   12210:	vldr	d6, [pc, #896]	; 12598 <__assert_fail@plt+0x149c>
   12214:	vcmpe.f64	d8, d6
   12218:	vmrs	APSR_nzcv, fpscr
   1221c:	vmovlt.f64	d9, d8
   12220:	movlt	r9, #0
   12224:	blt	12278 <__assert_fail@plt+0x117c>
   12228:	vldr	d6, [pc, #880]	; 125a0 <__assert_fail@plt+0x14a4>
   1222c:	vcmpe.f64	d8, d6
   12230:	vmrs	APSR_nzcv, fpscr
   12234:	vmovhi.f64	d9, d8
   12238:	movhi	r9, #0
   1223c:	bhi	12278 <__assert_fail@plt+0x117c>
   12240:	vmov.f64	d9, d8
   12244:	mov	r9, #0
   12248:	vldr	d5, [pc, #832]	; 12590 <__assert_fail@plt+0x1494>
   1224c:	vcvt.f64.u32	d7, s14
   12250:	b	1225c <__assert_fail@plt+0x1160>
   12254:	add	r9, r9, #1
   12258:	vdiv.f64	d9, d9, d7
   1225c:	vcmpe.f64	d9, d5
   12260:	vmrs	APSR_nzcv, fpscr
   12264:	vnegmi.f64	d6, d9
   12268:	vmovpl.f64	d6, d9
   1226c:	vcmpe.f64	d7, d6
   12270:	vmrs	APSR_nzcv, fpscr
   12274:	bls	12254 <__assert_fail@plt+0x1158>
   12278:	ldr	r3, [pc, #904]	; 12608 <__assert_fail@plt+0x150c>
   1227c:	ldrb	r3, [r3, #20]
   12280:	cmp	r3, #0
   12284:	bne	12310 <__assert_fail@plt+0x1214>
   12288:	ldr	r3, [pc, #880]	; 12600 <__assert_fail@plt+0x1504>
   1228c:	ldr	r2, [r3, #24]
   12290:	cmn	r2, #1
   12294:	beq	12334 <__assert_fail@plt+0x1238>
   12298:	add	r3, r9, r9, lsl #1
   1229c:	cmp	r3, r2
   122a0:	movcs	r3, r2
   122a4:	cmp	r3, #0
   122a8:	beq	127ac <__assert_fail@plt+0x16b0>
   122ac:	subs	r3, r3, #1
   122b0:	beq	127f8 <__assert_fail@plt+0x16fc>
   122b4:	vldr	d11, [pc, #748]	; 125a8 <__assert_fail@plt+0x14ac>
   122b8:	vmov.f64	d7, d11
   122bc:	vmul.f64	d11, d11, d7
   122c0:	subs	r3, r3, #1
   122c4:	bne	122bc <__assert_fail@plt+0x11c0>
   122c8:	vmul.f64	d9, d9, d11
   122cc:	vldr	d7, [pc, #732]	; 125b0 <__assert_fail@plt+0x14b4>
   122d0:	vmul.f64	d7, d9, d7
   122d4:	vmov	r0, r1, d7
   122d8:	bl	18e98 <__assert_fail@plt+0x7d9c>
   122dc:	bl	18dec <__assert_fail@plt+0x7cf0>
   122e0:	vldr	d12, [pc, #720]	; 125b8 <__assert_fail@plt+0x14bc>
   122e4:	vmov	d7, r0, r1
   122e8:	vmul.f64	d12, d7, d12
   122ec:	vsub.f64	d9, d9, d12
   122f0:	cmp	r6, #4
   122f4:	ldrls	pc, [pc, r6, lsl #2]
   122f8:	b	1252c <__assert_fail@plt+0x1430>
   122fc:	andeq	r2, r1, ip, asr r3
   12300:	andeq	r2, r1, ip, lsl #7
   12304:	andeq	r2, r1, r8, ror r4
   12308:	strdeq	r2, [r1], -r0
   1230c:	andeq	r2, r1, r4, lsl #10
   12310:	ldr	r3, [pc, #748]	; 12604 <__assert_fail@plt+0x1508>
   12314:	ldr	r0, [r3]
   12318:	str	r9, [sp, #16]
   1231c:	vstr	d10, [sp, #8]
   12320:	vstr	d9, [sp]
   12324:	ldr	r2, [pc, #664]	; 125c4 <__assert_fail@plt+0x14c8>
   12328:	mov	r1, #1
   1232c:	bl	1103c <__fprintf_chk@plt>
   12330:	b	12288 <__assert_fail@plt+0x118c>
   12334:	vcmpe.f64	d9, #0.0
   12338:	vmrs	APSR_nzcv, fpscr
   1233c:	vnegmi.f64	d7, d9
   12340:	vmovpl.f64	d7, d9
   12344:	vldr	d6, [pc, #604]	; 125a8 <__assert_fail@plt+0x14ac>
   12348:	vcmpe.f64	d7, d6
   1234c:	vmrs	APSR_nzcv, fpscr
   12350:	movmi	r3, #1
   12354:	movpl	r3, #0
   12358:	b	122a4 <__assert_fail@plt+0x11a8>
   1235c:	vmov	r0, r1, d9
   12360:	bl	18e98 <__assert_fail@plt+0x7d9c>
   12364:	mov	sl, r0
   12368:	mov	fp, r1
   1236c:	bl	18dec <__assert_fail@plt+0x7cf0>
   12370:	vmov	d7, r0, r1
   12374:	vcmpe.f64	d7, d9
   12378:	vmrs	APSR_nzcv, fpscr
   1237c:	bpl	123c4 <__assert_fail@plt+0x12c8>
   12380:	adds	sl, sl, #1
   12384:	adc	fp, fp, #0
   12388:	b	123c4 <__assert_fail@plt+0x12c8>
   1238c:	vneg.f64	d9, d9
   12390:	vmov	r0, r1, d9
   12394:	bl	18e98 <__assert_fail@plt+0x7d9c>
   12398:	mov	r6, r0
   1239c:	mov	r7, r1
   123a0:	bl	18dec <__assert_fail@plt+0x7cf0>
   123a4:	vmov	d7, r0, r1
   123a8:	vcmpe.f64	d9, d7
   123ac:	vmrs	APSR_nzcv, fpscr
   123b0:	ble	123bc <__assert_fail@plt+0x12c0>
   123b4:	adds	r6, r6, #1
   123b8:	adc	r7, r7, #0
   123bc:	rsbs	sl, r6, #0
   123c0:	rsc	fp, r7, #0
   123c4:	mov	r0, sl
   123c8:	mov	r1, fp
   123cc:	bl	18dec <__assert_fail@plt+0x7cf0>
   123d0:	vmov	d7, r0, r1
   123d4:	vadd.f64	d12, d7, d12
   123d8:	vdiv.f64	d9, d12, d11
   123dc:	vcmpe.f64	d9, #0.0
   123e0:	vmrs	APSR_nzcv, fpscr
   123e4:	bmi	12534 <__assert_fail@plt+0x1438>
   123e8:	vcmpe.f64	d10, d9
   123ec:	vmrs	APSR_nzcv, fpscr
   123f0:	bhi	123fc <__assert_fail@plt+0x1300>
   123f4:	vdiv.f64	d9, d9, d10
   123f8:	add	r9, r9, #1
   123fc:	vcmp.f64	d9, #0.0
   12400:	vmrs	APSR_nzcv, fpscr
   12404:	moveq	r6, #0
   12408:	bne	12550 <__assert_fail@plt+0x1454>
   1240c:	ldr	r3, [pc, #500]	; 12608 <__assert_fail@plt+0x150c>
   12410:	ldrb	r3, [r3, #20]
   12414:	cmp	r3, #0
   12418:	bne	12610 <__assert_fail@plt+0x1514>
   1241c:	ldr	r3, [pc, #420]	; 125c8 <__assert_fail@plt+0x14cc>
   12420:	ldr	r0, [r3]
   12424:	str	r0, [r5]
   12428:	ldrh	r2, [r3, #4]
   1242c:	ldrb	r3, [r3, #6]
   12430:	strh	r2, [r5, #4]
   12434:	strb	r3, [r5, #6]
   12438:	ldr	r3, [pc, #448]	; 12600 <__assert_fail@plt+0x1504>
   1243c:	ldr	r3, [r3, #24]
   12440:	cmn	r3, #1
   12444:	movne	r6, r3
   12448:	cmp	r9, #8
   1244c:	ldrls	pc, [pc, r9, lsl #2]
   12450:	b	126fc <__assert_fail@plt+0x1600>
   12454:	andeq	r2, r1, r4, ror #17
   12458:	andeq	r2, r1, r4, lsr r6
   1245c:	andeq	r2, r1, r4, lsl #14
   12460:	andeq	r2, r1, ip, asr #13
   12464:	ldrdeq	r2, [r1], -r4
   12468:	ldrdeq	r2, [r1], -ip
   1246c:	andeq	r2, r1, r4, ror #13
   12470:	andeq	r2, r1, ip, ror #13
   12474:	strdeq	r2, [r1], -r4
   12478:	vcmpe.f64	d9, #0.0
   1247c:	vmrs	APSR_nzcv, fpscr
   12480:	bpl	124c0 <__assert_fail@plt+0x13c4>
   12484:	vneg.f64	d9, d9
   12488:	vmov	r0, r1, d9
   1248c:	bl	18e98 <__assert_fail@plt+0x7d9c>
   12490:	mov	r6, r0
   12494:	mov	r7, r1
   12498:	bl	18dec <__assert_fail@plt+0x7cf0>
   1249c:	vmov	d7, r0, r1
   124a0:	vcmpe.f64	d9, d7
   124a4:	vmrs	APSR_nzcv, fpscr
   124a8:	ble	124b4 <__assert_fail@plt+0x13b8>
   124ac:	adds	r6, r6, #1
   124b0:	adc	r7, r7, #0
   124b4:	rsbs	sl, r6, #0
   124b8:	rsc	fp, r7, #0
   124bc:	b	123c4 <__assert_fail@plt+0x12c8>
   124c0:	vmov	r0, r1, d9
   124c4:	bl	18e98 <__assert_fail@plt+0x7d9c>
   124c8:	mov	sl, r0
   124cc:	mov	fp, r1
   124d0:	bl	18dec <__assert_fail@plt+0x7cf0>
   124d4:	vmov	d7, r0, r1
   124d8:	vcmpe.f64	d7, d9
   124dc:	vmrs	APSR_nzcv, fpscr
   124e0:	bpl	123c4 <__assert_fail@plt+0x12c8>
   124e4:	adds	sl, sl, #1
   124e8:	adc	fp, fp, #0
   124ec:	b	123c4 <__assert_fail@plt+0x12c8>
   124f0:	vmov	r0, r1, d9
   124f4:	bl	18e98 <__assert_fail@plt+0x7d9c>
   124f8:	mov	sl, r0
   124fc:	mov	fp, r1
   12500:	b	123c4 <__assert_fail@plt+0x12c8>
   12504:	vcmpe.f64	d9, #0.0
   12508:	vmrs	APSR_nzcv, fpscr
   1250c:	vldr	d7, [pc, #116]	; 12588 <__assert_fail@plt+0x148c>
   12510:	vsubmi.f64	d7, d9, d7
   12514:	vaddpl.f64	d7, d9, d7
   12518:	vmov	r0, r1, d7
   1251c:	bl	18e98 <__assert_fail@plt+0x7d9c>
   12520:	mov	sl, r0
   12524:	mov	fp, r1
   12528:	b	123c4 <__assert_fail@plt+0x12c8>
   1252c:	vldr	d12, [pc, #92]	; 12590 <__assert_fail@plt+0x1494>
   12530:	b	123d8 <__assert_fail@plt+0x12dc>
   12534:	vneg.f64	d7, d9
   12538:	vcmpe.f64	d10, d7
   1253c:	vmrs	APSR_nzcv, fpscr
   12540:	bls	123f4 <__assert_fail@plt+0x12f8>
   12544:	vmov	r2, r3, d9
   12548:	vneg.f64	d9, d9
   1254c:	b	12560 <__assert_fail@plt+0x1464>
   12550:	vcmpe.f64	d9, #0.0
   12554:	vmrs	APSR_nzcv, fpscr
   12558:	vmovpl	r2, r3, d9
   1255c:	bmi	12544 <__assert_fail@plt+0x1448>
   12560:	vldr	d7, [pc, #64]	; 125a8 <__assert_fail@plt+0x14ac>
   12564:	vcmpe.f64	d9, d7
   12568:	vmrs	APSR_nzcv, fpscr
   1256c:	movmi	r6, #1
   12570:	movpl	r6, #0
   12574:	cmp	r9, #0
   12578:	moveq	r6, #0
   1257c:	andne	r6, r6, #1
   12580:	vmov	d9, r2, r3
   12584:	b	1240c <__assert_fail@plt+0x1310>
   12588:	andeq	r0, r0, r0
   1258c:	svccc	0x00e00000
	...
   12598:			; <UNDEFINED> instruction: 0xffffffff
   1259c:			; <UNDEFINED> instruction: 0xffefffff
   125a0:			; <UNDEFINED> instruction: 0xffffffff
   125a4:	svcvc	0x00efffff
   125a8:	andeq	r0, r0, r0
   125ac:	eormi	r0, r4, r0
   125b0:	andeq	r0, r0, r0
   125b4:	stccc	0, cr0, [r0], {-0}
   125b8:	andeq	r0, r0, r0
   125bc:	mvnmi	r0, #0
   125c0:	ldrdeq	r9, [r1], -r0
   125c4:	strdeq	r9, [r1], -ip
   125c8:	andeq	r9, r1, ip, asr #14
   125cc:	andeq	r9, r1, r0, lsr #14
   125d0:	andeq	r9, r1, r8, lsl r4
   125d4:	andeq	sl, r1, ip, ror #28
   125d8:	andeq	r9, r1, r4, asr r7
   125dc:	andeq	r9, r1, r0, lsr #8
   125e0:	andeq	r9, r1, r4, lsr #8
   125e4:	andeq	r9, r1, r8, lsr #8
   125e8:	andeq	r9, r1, ip, lsr #8
   125ec:	andeq	r9, r1, r0, lsr r4
   125f0:	andeq	r9, r1, r4, lsr r4
   125f4:	andeq	r9, r1, r0, lsl r4
   125f8:	andeq	r9, r1, ip, lsl r4
   125fc:	andeq	r9, r1, ip, ror #14
   12600:	andeq	ip, r2, r8, lsl #2
   12604:	muleq	r2, r0, r1
   12608:	andeq	ip, r2, r8, lsr #3
   1260c:	andeq	r9, r1, r0, lsr #15
   12610:	ldr	r3, [pc, #-20]	; 12604 <__assert_fail@plt+0x1508>
   12614:	ldr	r0, [r3]
   12618:	str	r9, [sp, #16]
   1261c:	vstr	d10, [sp, #8]
   12620:	vstr	d9, [sp]
   12624:	ldr	r2, [pc, #-96]	; 125cc <__assert_fail@plt+0x14d0>
   12628:	mov	r1, #1
   1262c:	bl	1103c <__fprintf_chk@plt>
   12630:	b	1241c <__assert_fail@plt+0x1320>
   12634:	ldr	r3, [pc, #-108]	; 125d0 <__assert_fail@plt+0x14d4>
   12638:	str	r3, [sp, #16]
   1263c:	vstr	d9, [sp, #8]
   12640:	str	r6, [sp, #4]
   12644:	add	r3, sp, #40	; 0x28
   12648:	str	r3, [sp]
   1264c:	mov	r3, #128	; 0x80
   12650:	mov	r2, #1
   12654:	mov	r1, #127	; 0x7f
   12658:	add	r0, sp, #104	; 0x68
   1265c:	bl	110e4 <__snprintf_chk@plt>
   12660:	cmp	r0, #126	; 0x7e
   12664:	bhi	12918 <__assert_fail@plt+0x181c>
   12668:	adds	r8, r9, #0
   1266c:	movne	r8, #1
   12670:	cmp	r4, #4
   12674:	movne	r8, #0
   12678:	cmp	r8, #0
   1267c:	beq	12694 <__assert_fail@plt+0x1598>
   12680:	mov	r3, #128	; 0x80
   12684:	rsb	r2, r0, #127	; 0x7f
   12688:	ldr	r1, [pc, #-188]	; 125d4 <__assert_fail@plt+0x14d8>
   1268c:	add	r0, sp, #104	; 0x68
   12690:	bl	10e5c <__strncat_chk@plt>
   12694:	ldr	r3, [pc, #-148]	; 12608 <__assert_fail@plt+0x150c>
   12698:	ldrb	r3, [r3, #20]
   1269c:	cmp	r3, #0
   126a0:	beq	12040 <__assert_fail@plt+0xf44>
   126a4:	ldr	r3, [pc, #-168]	; 12604 <__assert_fail@plt+0x1508>
   126a8:	ldr	r4, [r3]
   126ac:	add	r0, sp, #104	; 0x68
   126b0:	bl	16b04 <__assert_fail@plt+0x5a08>
   126b4:	mov	r3, r0
   126b8:	ldr	r2, [pc, #-232]	; 125d8 <__assert_fail@plt+0x14dc>
   126bc:	mov	r1, #1
   126c0:	mov	r0, r4
   126c4:	bl	1103c <__fprintf_chk@plt>
   126c8:	b	12040 <__assert_fail@plt+0xf44>
   126cc:	ldr	r3, [pc, #-248]	; 125dc <__assert_fail@plt+0x14e0>
   126d0:	b	12638 <__assert_fail@plt+0x153c>
   126d4:	ldr	r3, [pc, #-252]	; 125e0 <__assert_fail@plt+0x14e4>
   126d8:	b	12638 <__assert_fail@plt+0x153c>
   126dc:	ldr	r3, [pc, #-256]	; 125e4 <__assert_fail@plt+0x14e8>
   126e0:	b	12638 <__assert_fail@plt+0x153c>
   126e4:	ldr	r3, [pc, #-260]	; 125e8 <__assert_fail@plt+0x14ec>
   126e8:	b	12638 <__assert_fail@plt+0x153c>
   126ec:	ldr	r3, [pc, #-264]	; 125ec <__assert_fail@plt+0x14f0>
   126f0:	b	12638 <__assert_fail@plt+0x153c>
   126f4:	ldr	r3, [pc, #-268]	; 125f0 <__assert_fail@plt+0x14f4>
   126f8:	b	12638 <__assert_fail@plt+0x153c>
   126fc:	ldr	r3, [pc, #-272]	; 125f4 <__assert_fail@plt+0x14f8>
   12700:	b	12638 <__assert_fail@plt+0x153c>
   12704:	ldr	r3, [pc, #-276]	; 125f8 <__assert_fail@plt+0x14fc>
   12708:	b	12638 <__assert_fail@plt+0x153c>
   1270c:	ldr	r3, [pc, #-272]	; 12604 <__assert_fail@plt+0x1508>
   12710:	ldr	r4, [r3]
   12714:	add	r0, sp, #104	; 0x68
   12718:	bl	16b04 <__assert_fail@plt+0x5a08>
   1271c:	str	r0, [sp, #8]
   12720:	vstr	d8, [sp]
   12724:	ldr	r2, [pc, #-304]	; 125fc <__assert_fail@plt+0x1500>
   12728:	mov	r1, #1
   1272c:	mov	r0, r4
   12730:	bl	1103c <__fprintf_chk@plt>
   12734:	b	1207c <__assert_fail@plt+0xf80>
   12738:	add	r3, sp, #232	; 0xe8
   1273c:	str	r4, [r3, #-192]!	; 0xffffff40
   12740:	ldr	r4, [pc, #-320]	; 12608 <__assert_fail@plt+0x150c>
   12744:	mov	r2, #2
   12748:	str	r2, [sp, #4]
   1274c:	ldr	r2, [pc, #-340]	; 12600 <__assert_fail@plt+0x1504>
   12750:	ldr	r2, [r2, #32]
   12754:	str	r2, [sp]
   12758:	ldr	r2, [r4, #8]
   1275c:	ldr	r1, [r4, #12]
   12760:	add	r0, sp, #104	; 0x68
   12764:	bl	14bb4 <__assert_fail@plt+0x3ab8>
   12768:	ldrb	r3, [r4, #20]
   1276c:	cmp	r3, #0
   12770:	beq	120bc <__assert_fail@plt+0xfc0>
   12774:	ldr	r3, [pc, #-376]	; 12604 <__assert_fail@plt+0x1508>
   12778:	ldr	r4, [r3]
   1277c:	ldr	r3, [pc, #-380]	; 12608 <__assert_fail@plt+0x150c>
   12780:	ldr	r0, [r3, #12]
   12784:	bl	16b04 <__assert_fail@plt+0x5a08>
   12788:	mov	r3, r0
   1278c:	ldr	r2, [pc, #-392]	; 1260c <__assert_fail@plt+0x1510>
   12790:	mov	r1, #1
   12794:	mov	r0, r4
   12798:	bl	1103c <__fprintf_chk@plt>
   1279c:	b	120bc <__assert_fail@plt+0xfc0>
   127a0:	vldr	d7, [pc, #408]	; 12940 <__assert_fail@plt+0x1844>
   127a4:	vdiv.f64	d9, d7, d11
   127a8:	b	123e8 <__assert_fail@plt+0x12ec>
   127ac:	vldr	d11, [pc, #404]	; 12948 <__assert_fail@plt+0x184c>
   127b0:	vmul.f64	d9, d11, d9
   127b4:	vldr	d7, [pc, #404]	; 12950 <__assert_fail@plt+0x1854>
   127b8:	vmul.f64	d7, d9, d7
   127bc:	vmov	r0, r1, d7
   127c0:	bl	18e98 <__assert_fail@plt+0x7d9c>
   127c4:	bl	18dec <__assert_fail@plt+0x7cf0>
   127c8:	vldr	d12, [pc, #392]	; 12958 <__assert_fail@plt+0x185c>
   127cc:	vmov	d7, r0, r1
   127d0:	vmul.f64	d12, d7, d12
   127d4:	vsub.f64	d9, d9, d12
   127d8:	cmp	r6, #4
   127dc:	ldrls	pc, [pc, r6, lsl #2]
   127e0:	b	127a0 <__assert_fail@plt+0x16a4>
   127e4:	andeq	r2, r1, ip, asr r3
   127e8:	andeq	r2, r1, ip, lsl #7
   127ec:	andeq	r2, r1, r8, ror r4
   127f0:	strdeq	r2, [r1], -r0
   127f4:	andeq	r2, r1, r4, lsl #10
   127f8:	vldr	d11, [pc, #352]	; 12960 <__assert_fail@plt+0x1864>
   127fc:	b	127b0 <__assert_fail@plt+0x16b4>
   12800:	cmp	r9, #4
   12804:	movne	sl, #0
   12808:	beq	11b84 <__assert_fail@plt+0xa88>
   1280c:	cmp	sl, #0
   12810:	beq	11a6c <__assert_fail@plt+0x970>
   12814:	vmov	s15, r7
   12818:	vcvt.f64.s32	d7, s15
   1281c:	subs	r3, sl, #1
   12820:	beq	11a74 <__assert_fail@plt+0x978>
   12824:	vmov.f64	d8, d7
   12828:	vmul.f64	d8, d8, d7
   1282c:	subs	r3, r3, #1
   12830:	bne	12828 <__assert_fail@plt+0x172c>
   12834:	ldr	r3, [pc, #300]	; 12968 <__assert_fail@plt+0x186c>
   12838:	ldrb	r3, [r3, #20]
   1283c:	cmp	r3, #0
   12840:	bne	11a7c <__assert_fail@plt+0x980>
   12844:	vldr	d7, [sp, #40]	; 0x28
   12848:	vmul.f64	d8, d8, d7
   1284c:	vstr	d8, [sp, #40]	; 0x28
   12850:	ldr	r3, [pc, #272]	; 12968 <__assert_fail@plt+0x186c>
   12854:	ldrb	r3, [r3, #20]
   12858:	cmp	r3, #0
   1285c:	bne	11aa0 <__assert_fail@plt+0x9a4>
   12860:	ldr	r3, [sp, #32]
   12864:	cmp	r3, #0
   12868:	beq	11b98 <__assert_fail@plt+0xa9c>
   1286c:	ldrb	r3, [r3]
   12870:	cmp	r3, #0
   12874:	beq	11b98 <__assert_fail@plt+0xa9c>
   12878:	ldr	r3, [pc, #232]	; 12968 <__assert_fail@plt+0x186c>
   1287c:	ldr	r3, [r3, #36]	; 0x24
   12880:	cmp	r3, #3
   12884:	moveq	r5, #5
   12888:	beq	11b14 <__assert_fail@plt+0xa18>
   1288c:	ldr	r3, [pc, #216]	; 1296c <__assert_fail@plt+0x1870>
   12890:	ldr	r4, [r3]
   12894:	mov	r2, #5
   12898:	ldr	r1, [pc, #208]	; 12970 <__assert_fail@plt+0x1874>
   1289c:	mov	r0, #0
   128a0:	bl	10ef8 <dcgettext@plt>
   128a4:	mov	r5, r0
   128a8:	mov	r1, r8
   128ac:	mov	r0, #0
   128b0:	bl	16af4 <__assert_fail@plt+0x59f8>
   128b4:	mov	r7, r0
   128b8:	ldr	r1, [sp, #32]
   128bc:	mov	r0, #1
   128c0:	bl	16af4 <__assert_fail@plt+0x59f8>
   128c4:	str	r0, [sp]
   128c8:	mov	r3, r7
   128cc:	mov	r2, r5
   128d0:	mov	r1, #0
   128d4:	mov	r0, r4
   128d8:	bl	10f7c <error@plt>
   128dc:	mov	r5, #5
   128e0:	b	11b14 <__assert_fail@plt+0xa18>
   128e4:	ldr	r3, [pc, #136]	; 12974 <__assert_fail@plt+0x1878>
   128e8:	str	r3, [sp, #16]
   128ec:	vstr	d9, [sp, #8]
   128f0:	str	r6, [sp, #4]
   128f4:	add	r3, sp, #40	; 0x28
   128f8:	str	r3, [sp]
   128fc:	mov	r3, #128	; 0x80
   12900:	mov	r2, #1
   12904:	mov	r1, #127	; 0x7f
   12908:	add	r0, sp, #104	; 0x68
   1290c:	bl	110e4 <__snprintf_chk@plt>
   12910:	cmp	r0, #126	; 0x7e
   12914:	bls	12694 <__assert_fail@plt+0x1598>
   12918:	mov	r2, #5
   1291c:	ldr	r1, [pc, #84]	; 12978 <__assert_fail@plt+0x187c>
   12920:	mov	r0, #0
   12924:	bl	10ef8 <dcgettext@plt>
   12928:	vstr	d9, [sp]
   1292c:	mov	r2, r0
   12930:	mov	r1, #0
   12934:	mov	r0, #1
   12938:	bl	10f7c <error@plt>
   1293c:	nop			; (mov r0, r0)
	...
   1294c:	svccc	0x00f00000	; IMB
   12950:	andeq	r0, r0, r0
   12954:	stccc	0, cr0, [r0], {-0}
   12958:	andeq	r0, r0, r0
   1295c:	mvnmi	r0, #0
   12960:	andeq	r0, r0, r0
   12964:	eormi	r0, r4, r0
   12968:	andeq	ip, r2, r8, lsr #3
   1296c:	andeq	ip, r2, r8, lsl #2
   12970:	muleq	r1, r0, r5
   12974:	andeq	sl, r1, r4, lsr #5
   12978:	ldrdeq	r9, [r1], -r0
   1297c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12980:	sub	sp, sp, #12
   12984:	mov	r6, r0
   12988:	str	r1, [sp, #4]
   1298c:	mov	r7, #1
   12990:	mov	r8, #0
   12994:	mov	r9, #0
   12998:	ldr	sl, [pc, #400]	; 12b30 <__assert_fail@plt+0x1a34>
   1299c:	mov	fp, #0
   129a0:	b	12ad8 <__assert_fail@plt+0x19dc>
   129a4:	ldrb	r5, [r6]
   129a8:	cmp	r5, #0
   129ac:	beq	12a1c <__assert_fail@plt+0x1920>
   129b0:	bl	10fd0 <__ctype_b_loc@plt>
   129b4:	ldr	r1, [r0]
   129b8:	mov	r4, r6
   129bc:	lsl	r3, r5, #1
   129c0:	ldrh	r3, [r1, r3]
   129c4:	cmp	r5, #10
   129c8:	movne	r5, r3
   129cc:	orreq	r5, r3, #1
   129d0:	tst	r5, #1
   129d4:	beq	129e8 <__assert_fail@plt+0x18ec>
   129d8:	ldrb	r5, [r4, #1]!
   129dc:	cmp	r5, #0
   129e0:	bne	129bc <__assert_fail@plt+0x18c0>
   129e4:	b	12a7c <__assert_fail@plt+0x1980>
   129e8:	ldrb	r3, [r4]
   129ec:	cmp	r3, #0
   129f0:	beq	12a1c <__assert_fail@plt+0x1920>
   129f4:	lsl	r2, r3, #1
   129f8:	ldrh	r2, [r1, r2]
   129fc:	cmp	r3, #10
   12a00:	movne	r3, r2
   12a04:	orreq	r3, r2, #1
   12a08:	tst	r3, #1
   12a0c:	bne	12a7c <__assert_fail@plt+0x1980>
   12a10:	ldrb	r3, [r4, #1]!
   12a14:	cmp	r3, #0
   12a18:	bne	129f4 <__assert_fail@plt+0x18f8>
   12a1c:	mov	r2, r8
   12a20:	mov	r3, r9
   12a24:	mov	r0, r6
   12a28:	bl	114e0 <__assert_fail@plt+0x3e4>
   12a2c:	cmp	r0, #0
   12a30:	moveq	r7, #0
   12a34:	ldr	r3, [sp, #4]
   12a38:	cmp	r3, #0
   12a3c:	beq	12a6c <__assert_fail@plt+0x1970>
   12a40:	ldr	r3, [pc, #232]	; 12b30 <__assert_fail@plt+0x1a34>
   12a44:	ldrb	r1, [r3, #40]	; 0x28
   12a48:	ldr	r3, [pc, #228]	; 12b34 <__assert_fail@plt+0x1a38>
   12a4c:	ldr	r0, [r3]
   12a50:	ldr	r3, [r0, #20]
   12a54:	ldr	r2, [r0, #24]
   12a58:	cmp	r3, r2
   12a5c:	addcc	r2, r3, #1
   12a60:	strcc	r2, [r0, #20]
   12a64:	strbcc	r1, [r3]
   12a68:	bcs	12b28 <__assert_fail@plt+0x1a2c>
   12a6c:	mov	r0, r7
   12a70:	add	sp, sp, #12
   12a74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12a78:	mov	r4, r6
   12a7c:	ldrb	r3, [r4]
   12a80:	cmp	r3, #0
   12a84:	beq	12a1c <__assert_fail@plt+0x1920>
   12a88:	strb	fp, [r4]
   12a8c:	mov	r2, r8
   12a90:	mov	r3, r9
   12a94:	mov	r0, r6
   12a98:	bl	114e0 <__assert_fail@plt+0x3e4>
   12a9c:	cmp	r0, #0
   12aa0:	moveq	r7, #0
   12aa4:	ldr	r1, [sl, #36]	; 0x24
   12aa8:	cmp	r1, #256	; 0x100
   12aac:	moveq	r1, #32
   12ab0:	ldr	r3, [pc, #124]	; 12b34 <__assert_fail@plt+0x1a38>
   12ab4:	ldr	r0, [r3]
   12ab8:	ldr	r3, [r0, #20]
   12abc:	ldr	r2, [r0, #24]
   12ac0:	cmp	r3, r2
   12ac4:	addcc	r2, r3, #1
   12ac8:	strcc	r2, [r0, #20]
   12acc:	strbcc	r1, [r3]
   12ad0:	bcs	12b1c <__assert_fail@plt+0x1a20>
   12ad4:	add	r6, r4, #1
   12ad8:	adds	r8, r8, #1
   12adc:	adc	r9, r9, #0
   12ae0:	ldr	r2, [sl, #36]	; 0x24
   12ae4:	cmp	r2, #256	; 0x100
   12ae8:	beq	129a4 <__assert_fail@plt+0x18a8>
   12aec:	ldrb	r3, [r6]
   12af0:	cmp	r2, r3
   12af4:	beq	12a78 <__assert_fail@plt+0x197c>
   12af8:	cmp	r3, #0
   12afc:	beq	12a1c <__assert_fail@plt+0x1920>
   12b00:	mov	r4, r6
   12b04:	ldrb	r3, [r4, #1]!
   12b08:	cmp	r3, #0
   12b0c:	beq	12a1c <__assert_fail@plt+0x1920>
   12b10:	cmp	r2, r3
   12b14:	bne	12b04 <__assert_fail@plt+0x1a08>
   12b18:	b	12a88 <__assert_fail@plt+0x198c>
   12b1c:	uxtb	r1, r1
   12b20:	bl	11060 <__overflow@plt>
   12b24:	b	12ad4 <__assert_fail@plt+0x19d8>
   12b28:	bl	11060 <__overflow@plt>
   12b2c:	b	12a6c <__assert_fail@plt+0x1970>
   12b30:	andeq	ip, r2, r8, lsl #2
   12b34:	muleq	r2, ip, r1
   12b38:	push	{lr}		; (str lr, [sp, #-4]!)
   12b3c:	sub	sp, sp, #92	; 0x5c
   12b40:	subs	r6, r0, #0
   12b44:	beq	12b80 <__assert_fail@plt+0x1a84>
   12b48:	ldr	r3, [pc, #1352]	; 13098 <__assert_fail@plt+0x1f9c>
   12b4c:	ldr	r4, [r3]
   12b50:	mov	r2, #5
   12b54:	ldr	r1, [pc, #1344]	; 1309c <__assert_fail@plt+0x1fa0>
   12b58:	mov	r0, #0
   12b5c:	bl	10ef8 <dcgettext@plt>
   12b60:	ldr	r3, [pc, #1336]	; 130a0 <__assert_fail@plt+0x1fa4>
   12b64:	ldr	r3, [r3]
   12b68:	mov	r2, r0
   12b6c:	mov	r1, #1
   12b70:	mov	r0, r4
   12b74:	bl	1103c <__fprintf_chk@plt>
   12b78:	mov	r0, r6
   12b7c:	bl	10fdc <exit@plt>
   12b80:	mov	r2, #5
   12b84:	ldr	r1, [pc, #1304]	; 130a4 <__assert_fail@plt+0x1fa8>
   12b88:	mov	r0, #0
   12b8c:	bl	10ef8 <dcgettext@plt>
   12b90:	ldr	r5, [pc, #1288]	; 130a0 <__assert_fail@plt+0x1fa4>
   12b94:	ldr	r2, [r5]
   12b98:	mov	r1, r0
   12b9c:	mov	r0, #1
   12ba0:	bl	11024 <__printf_chk@plt>
   12ba4:	mov	r2, #5
   12ba8:	ldr	r1, [pc, #1272]	; 130a8 <__assert_fail@plt+0x1fac>
   12bac:	mov	r0, #0
   12bb0:	bl	10ef8 <dcgettext@plt>
   12bb4:	ldr	r4, [pc, #1264]	; 130ac <__assert_fail@plt+0x1fb0>
   12bb8:	ldr	r1, [r4]
   12bbc:	bl	10e44 <fputs_unlocked@plt>
   12bc0:	mov	r2, #5
   12bc4:	ldr	r1, [pc, #1252]	; 130b0 <__assert_fail@plt+0x1fb4>
   12bc8:	mov	r0, #0
   12bcc:	bl	10ef8 <dcgettext@plt>
   12bd0:	ldr	r1, [r4]
   12bd4:	bl	10e44 <fputs_unlocked@plt>
   12bd8:	mov	r2, #5
   12bdc:	ldr	r1, [pc, #1232]	; 130b4 <__assert_fail@plt+0x1fb8>
   12be0:	mov	r0, #0
   12be4:	bl	10ef8 <dcgettext@plt>
   12be8:	ldr	r1, [r4]
   12bec:	bl	10e44 <fputs_unlocked@plt>
   12bf0:	mov	r2, #5
   12bf4:	ldr	r1, [pc, #1212]	; 130b8 <__assert_fail@plt+0x1fbc>
   12bf8:	mov	r0, #0
   12bfc:	bl	10ef8 <dcgettext@plt>
   12c00:	ldr	r1, [r4]
   12c04:	bl	10e44 <fputs_unlocked@plt>
   12c08:	mov	r2, #5
   12c0c:	ldr	r1, [pc, #1192]	; 130bc <__assert_fail@plt+0x1fc0>
   12c10:	mov	r0, #0
   12c14:	bl	10ef8 <dcgettext@plt>
   12c18:	ldr	r1, [r4]
   12c1c:	bl	10e44 <fputs_unlocked@plt>
   12c20:	mov	r2, #5
   12c24:	ldr	r1, [pc, #1172]	; 130c0 <__assert_fail@plt+0x1fc4>
   12c28:	mov	r0, #0
   12c2c:	bl	10ef8 <dcgettext@plt>
   12c30:	ldr	r1, [r4]
   12c34:	bl	10e44 <fputs_unlocked@plt>
   12c38:	mov	r2, #5
   12c3c:	ldr	r1, [pc, #1152]	; 130c4 <__assert_fail@plt+0x1fc8>
   12c40:	mov	r0, #0
   12c44:	bl	10ef8 <dcgettext@plt>
   12c48:	ldr	r1, [r4]
   12c4c:	bl	10e44 <fputs_unlocked@plt>
   12c50:	mov	r2, #5
   12c54:	ldr	r1, [pc, #1132]	; 130c8 <__assert_fail@plt+0x1fcc>
   12c58:	mov	r0, #0
   12c5c:	bl	10ef8 <dcgettext@plt>
   12c60:	ldr	r1, [r4]
   12c64:	bl	10e44 <fputs_unlocked@plt>
   12c68:	mov	r2, #5
   12c6c:	ldr	r1, [pc, #1112]	; 130cc <__assert_fail@plt+0x1fd0>
   12c70:	mov	r0, #0
   12c74:	bl	10ef8 <dcgettext@plt>
   12c78:	ldr	r1, [r4]
   12c7c:	bl	10e44 <fputs_unlocked@plt>
   12c80:	mov	r2, #5
   12c84:	ldr	r1, [pc, #1092]	; 130d0 <__assert_fail@plt+0x1fd4>
   12c88:	mov	r0, #0
   12c8c:	bl	10ef8 <dcgettext@plt>
   12c90:	ldr	r1, [r4]
   12c94:	bl	10e44 <fputs_unlocked@plt>
   12c98:	mov	r2, #5
   12c9c:	ldr	r1, [pc, #1072]	; 130d4 <__assert_fail@plt+0x1fd8>
   12ca0:	mov	r0, #0
   12ca4:	bl	10ef8 <dcgettext@plt>
   12ca8:	ldr	r1, [r4]
   12cac:	bl	10e44 <fputs_unlocked@plt>
   12cb0:	mov	r2, #5
   12cb4:	ldr	r1, [pc, #1052]	; 130d8 <__assert_fail@plt+0x1fdc>
   12cb8:	mov	r0, #0
   12cbc:	bl	10ef8 <dcgettext@plt>
   12cc0:	ldr	r1, [r4]
   12cc4:	bl	10e44 <fputs_unlocked@plt>
   12cc8:	mov	r2, #5
   12ccc:	ldr	r1, [pc, #1032]	; 130dc <__assert_fail@plt+0x1fe0>
   12cd0:	mov	r0, #0
   12cd4:	bl	10ef8 <dcgettext@plt>
   12cd8:	ldr	r1, [r4]
   12cdc:	bl	10e44 <fputs_unlocked@plt>
   12ce0:	mov	r2, #5
   12ce4:	ldr	r1, [pc, #1012]	; 130e0 <__assert_fail@plt+0x1fe4>
   12ce8:	mov	r0, #0
   12cec:	bl	10ef8 <dcgettext@plt>
   12cf0:	ldr	r1, [r4]
   12cf4:	bl	10e44 <fputs_unlocked@plt>
   12cf8:	mov	r2, #5
   12cfc:	ldr	r1, [pc, #992]	; 130e4 <__assert_fail@plt+0x1fe8>
   12d00:	mov	r0, #0
   12d04:	bl	10ef8 <dcgettext@plt>
   12d08:	ldr	r1, [r4]
   12d0c:	bl	10e44 <fputs_unlocked@plt>
   12d10:	mov	r2, #5
   12d14:	ldr	r1, [pc, #972]	; 130e8 <__assert_fail@plt+0x1fec>
   12d18:	mov	r0, #0
   12d1c:	bl	10ef8 <dcgettext@plt>
   12d20:	ldr	r1, [r4]
   12d24:	bl	10e44 <fputs_unlocked@plt>
   12d28:	mov	r2, #5
   12d2c:	ldr	r1, [pc, #952]	; 130ec <__assert_fail@plt+0x1ff0>
   12d30:	mov	r0, #0
   12d34:	bl	10ef8 <dcgettext@plt>
   12d38:	ldr	r1, [r4]
   12d3c:	bl	10e44 <fputs_unlocked@plt>
   12d40:	mov	r2, #5
   12d44:	ldr	r1, [pc, #932]	; 130f0 <__assert_fail@plt+0x1ff4>
   12d48:	mov	r0, #0
   12d4c:	bl	10ef8 <dcgettext@plt>
   12d50:	ldr	r1, [r4]
   12d54:	bl	10e44 <fputs_unlocked@plt>
   12d58:	mov	r2, #5
   12d5c:	ldr	r1, [pc, #912]	; 130f4 <__assert_fail@plt+0x1ff8>
   12d60:	mov	r0, #0
   12d64:	bl	10ef8 <dcgettext@plt>
   12d68:	ldr	r1, [r4]
   12d6c:	bl	10e44 <fputs_unlocked@plt>
   12d70:	mov	r2, #5
   12d74:	ldr	r1, [pc, #892]	; 130f8 <__assert_fail@plt+0x1ffc>
   12d78:	mov	r0, #0
   12d7c:	bl	10ef8 <dcgettext@plt>
   12d80:	ldr	r1, [r4]
   12d84:	bl	10e44 <fputs_unlocked@plt>
   12d88:	mov	r2, #5
   12d8c:	ldr	r1, [pc, #872]	; 130fc <__assert_fail@plt+0x2000>
   12d90:	mov	r0, #0
   12d94:	bl	10ef8 <dcgettext@plt>
   12d98:	ldr	r1, [r4]
   12d9c:	bl	10e44 <fputs_unlocked@plt>
   12da0:	mov	r2, #5
   12da4:	ldr	r1, [pc, #852]	; 13100 <__assert_fail@plt+0x2004>
   12da8:	mov	r0, #0
   12dac:	bl	10ef8 <dcgettext@plt>
   12db0:	ldr	r1, [r4]
   12db4:	bl	10e44 <fputs_unlocked@plt>
   12db8:	mov	r2, #5
   12dbc:	ldr	r1, [pc, #832]	; 13104 <__assert_fail@plt+0x2008>
   12dc0:	mov	r0, #0
   12dc4:	bl	10ef8 <dcgettext@plt>
   12dc8:	ldr	r1, [r4]
   12dcc:	bl	10e44 <fputs_unlocked@plt>
   12dd0:	mov	r2, #5
   12dd4:	ldr	r1, [pc, #812]	; 13108 <__assert_fail@plt+0x200c>
   12dd8:	mov	r0, #0
   12ddc:	bl	10ef8 <dcgettext@plt>
   12de0:	ldr	r1, [r4]
   12de4:	bl	10e44 <fputs_unlocked@plt>
   12de8:	mov	r2, #5
   12dec:	ldr	r1, [pc, #792]	; 1310c <__assert_fail@plt+0x2010>
   12df0:	mov	r0, #0
   12df4:	bl	10ef8 <dcgettext@plt>
   12df8:	ldr	r1, [r4]
   12dfc:	bl	10e44 <fputs_unlocked@plt>
   12e00:	mov	r2, #5
   12e04:	ldr	r1, [pc, #772]	; 13110 <__assert_fail@plt+0x2014>
   12e08:	mov	r0, #0
   12e0c:	bl	10ef8 <dcgettext@plt>
   12e10:	ldr	r1, [r4]
   12e14:	bl	10e44 <fputs_unlocked@plt>
   12e18:	mov	r2, #5
   12e1c:	ldr	r1, [pc, #752]	; 13114 <__assert_fail@plt+0x2018>
   12e20:	mov	r0, #0
   12e24:	bl	10ef8 <dcgettext@plt>
   12e28:	ldr	r1, [r4]
   12e2c:	bl	10e44 <fputs_unlocked@plt>
   12e30:	mov	r2, #5
   12e34:	ldr	r1, [pc, #732]	; 13118 <__assert_fail@plt+0x201c>
   12e38:	mov	r0, #0
   12e3c:	bl	10ef8 <dcgettext@plt>
   12e40:	ldr	r2, [r5]
   12e44:	mov	r1, r0
   12e48:	mov	r0, #1
   12e4c:	bl	11024 <__printf_chk@plt>
   12e50:	mov	r2, #5
   12e54:	ldr	r1, [pc, #704]	; 1311c <__assert_fail@plt+0x2020>
   12e58:	mov	r0, #0
   12e5c:	bl	10ef8 <dcgettext@plt>
   12e60:	ldr	r2, [r5]
   12e64:	str	r2, [sp, #24]
   12e68:	str	r2, [sp, #20]
   12e6c:	str	r2, [sp, #16]
   12e70:	str	r2, [sp, #12]
   12e74:	str	r2, [sp, #8]
   12e78:	str	r2, [sp, #4]
   12e7c:	str	r2, [sp]
   12e80:	mov	r3, r2
   12e84:	mov	r1, r0
   12e88:	mov	r0, #1
   12e8c:	bl	11024 <__printf_chk@plt>
   12e90:	add	ip, sp, #32
   12e94:	ldr	lr, [pc, #644]	; 13120 <__assert_fail@plt+0x2024>
   12e98:	ldm	lr!, {r0, r1, r2, r3}
   12e9c:	stmia	ip!, {r0, r1, r2, r3}
   12ea0:	ldm	lr!, {r0, r1, r2, r3}
   12ea4:	stmia	ip!, {r0, r1, r2, r3}
   12ea8:	ldm	lr!, {r0, r1, r2, r3}
   12eac:	stmia	ip!, {r0, r1, r2, r3}
   12eb0:	ldm	lr, {r0, r1}
   12eb4:	stm	ip, {r0, r1}
   12eb8:	ldr	r1, [sp, #32]
   12ebc:	cmp	r1, #0
   12ec0:	addeq	r4, sp, #32
   12ec4:	beq	12eec <__assert_fail@plt+0x1df0>
   12ec8:	add	r4, sp, #32
   12ecc:	ldr	r5, [pc, #592]	; 13124 <__assert_fail@plt+0x2028>
   12ed0:	mov	r0, r5
   12ed4:	bl	10e68 <strcmp@plt>
   12ed8:	cmp	r0, #0
   12edc:	beq	12eec <__assert_fail@plt+0x1df0>
   12ee0:	ldr	r1, [r4, #8]!
   12ee4:	cmp	r1, #0
   12ee8:	bne	12ed0 <__assert_fail@plt+0x1dd4>
   12eec:	ldr	r4, [r4, #4]
   12ef0:	cmp	r4, #0
   12ef4:	beq	13008 <__assert_fail@plt+0x1f0c>
   12ef8:	mov	r2, #5
   12efc:	ldr	r1, [pc, #548]	; 13128 <__assert_fail@plt+0x202c>
   12f00:	mov	r0, #0
   12f04:	bl	10ef8 <dcgettext@plt>
   12f08:	ldr	r3, [pc, #540]	; 1312c <__assert_fail@plt+0x2030>
   12f0c:	ldr	r2, [pc, #540]	; 13130 <__assert_fail@plt+0x2034>
   12f10:	mov	r1, r0
   12f14:	mov	r0, #1
   12f18:	bl	11024 <__printf_chk@plt>
   12f1c:	mov	r1, #0
   12f20:	mov	r0, #5
   12f24:	bl	1106c <setlocale@plt>
   12f28:	cmp	r0, #0
   12f2c:	beq	12f44 <__assert_fail@plt+0x1e48>
   12f30:	mov	r2, #3
   12f34:	ldr	r1, [pc, #504]	; 13134 <__assert_fail@plt+0x2038>
   12f38:	bl	110cc <strncmp@plt>
   12f3c:	cmp	r0, #0
   12f40:	bne	12fa4 <__assert_fail@plt+0x1ea8>
   12f44:	mov	r2, #5
   12f48:	ldr	r1, [pc, #488]	; 13138 <__assert_fail@plt+0x203c>
   12f4c:	mov	r0, #0
   12f50:	bl	10ef8 <dcgettext@plt>
   12f54:	ldr	r5, [pc, #456]	; 13124 <__assert_fail@plt+0x2028>
   12f58:	mov	r3, r5
   12f5c:	ldr	r2, [pc, #456]	; 1312c <__assert_fail@plt+0x2030>
   12f60:	mov	r1, r0
   12f64:	mov	r0, #1
   12f68:	bl	11024 <__printf_chk@plt>
   12f6c:	mov	r2, #5
   12f70:	ldr	r1, [pc, #452]	; 1313c <__assert_fail@plt+0x2040>
   12f74:	mov	r0, #0
   12f78:	bl	10ef8 <dcgettext@plt>
   12f7c:	mov	r1, r0
   12f80:	ldr	r2, [pc, #440]	; 13140 <__assert_fail@plt+0x2044>
   12f84:	ldr	r3, [pc, #440]	; 13144 <__assert_fail@plt+0x2048>
   12f88:	cmp	r4, r5
   12f8c:	movne	r3, r2
   12f90:	mov	r2, r4
   12f94:	mov	r0, #1
   12f98:	bl	11024 <__printf_chk@plt>
   12f9c:	b	12b78 <__assert_fail@plt+0x1a7c>
   12fa0:	ldr	r4, [pc, #380]	; 13124 <__assert_fail@plt+0x2028>
   12fa4:	mov	r2, #5
   12fa8:	ldr	r1, [pc, #408]	; 13148 <__assert_fail@plt+0x204c>
   12fac:	mov	r0, #0
   12fb0:	bl	10ef8 <dcgettext@plt>
   12fb4:	ldr	r3, [pc, #240]	; 130ac <__assert_fail@plt+0x1fb0>
   12fb8:	ldr	r1, [r3]
   12fbc:	bl	10e44 <fputs_unlocked@plt>
   12fc0:	b	12f44 <__assert_fail@plt+0x1e48>
   12fc4:	mov	r2, #5
   12fc8:	ldr	r1, [pc, #360]	; 13138 <__assert_fail@plt+0x203c>
   12fcc:	mov	r0, #0
   12fd0:	bl	10ef8 <dcgettext@plt>
   12fd4:	ldr	r4, [pc, #328]	; 13124 <__assert_fail@plt+0x2028>
   12fd8:	mov	r3, r4
   12fdc:	ldr	r2, [pc, #328]	; 1312c <__assert_fail@plt+0x2030>
   12fe0:	mov	r1, r0
   12fe4:	mov	r0, #1
   12fe8:	bl	11024 <__printf_chk@plt>
   12fec:	mov	r2, #5
   12ff0:	ldr	r1, [pc, #324]	; 1313c <__assert_fail@plt+0x2040>
   12ff4:	mov	r0, #0
   12ff8:	bl	10ef8 <dcgettext@plt>
   12ffc:	mov	r1, r0
   13000:	ldr	r3, [pc, #316]	; 13144 <__assert_fail@plt+0x2048>
   13004:	b	12f90 <__assert_fail@plt+0x1e94>
   13008:	mov	r2, #5
   1300c:	ldr	r1, [pc, #276]	; 13128 <__assert_fail@plt+0x202c>
   13010:	mov	r0, #0
   13014:	bl	10ef8 <dcgettext@plt>
   13018:	ldr	r3, [pc, #268]	; 1312c <__assert_fail@plt+0x2030>
   1301c:	ldr	r2, [pc, #268]	; 13130 <__assert_fail@plt+0x2034>
   13020:	mov	r1, r0
   13024:	mov	r0, #1
   13028:	bl	11024 <__printf_chk@plt>
   1302c:	mov	r1, #0
   13030:	mov	r0, #5
   13034:	bl	1106c <setlocale@plt>
   13038:	cmp	r0, #0
   1303c:	beq	12fc4 <__assert_fail@plt+0x1ec8>
   13040:	mov	r2, #3
   13044:	ldr	r1, [pc, #232]	; 13134 <__assert_fail@plt+0x2038>
   13048:	bl	110cc <strncmp@plt>
   1304c:	cmp	r0, #0
   13050:	bne	12fa0 <__assert_fail@plt+0x1ea4>
   13054:	mov	r2, #5
   13058:	ldr	r1, [pc, #216]	; 13138 <__assert_fail@plt+0x203c>
   1305c:	mov	r0, #0
   13060:	bl	10ef8 <dcgettext@plt>
   13064:	ldr	r4, [pc, #184]	; 13124 <__assert_fail@plt+0x2028>
   13068:	mov	r3, r4
   1306c:	ldr	r2, [pc, #184]	; 1312c <__assert_fail@plt+0x2030>
   13070:	mov	r1, r0
   13074:	mov	r0, #1
   13078:	bl	11024 <__printf_chk@plt>
   1307c:	mov	r2, #5
   13080:	ldr	r1, [pc, #180]	; 1313c <__assert_fail@plt+0x2040>
   13084:	mov	r0, #0
   13088:	bl	10ef8 <dcgettext@plt>
   1308c:	mov	r1, r0
   13090:	ldr	r3, [pc, #172]	; 13144 <__assert_fail@plt+0x2048>
   13094:	b	12f90 <__assert_fail@plt+0x1e94>
   13098:	muleq	r2, r0, r1
   1309c:	andeq	r9, r1, r0, asr #15
   130a0:	andeq	ip, r2, ip, lsl #4
   130a4:	andeq	r9, r1, r8, ror #15
   130a8:	andeq	r9, r1, ip, lsl #16
   130ac:	muleq	r2, ip, r1
   130b0:	andeq	r9, r1, ip, asr r8
   130b4:	andeq	r9, r1, r8, lsr #17
   130b8:	andeq	r9, r1, r4, ror #17
   130bc:	andeq	r9, r1, ip, lsr #18
   130c0:	andeq	r9, r1, r8, lsr #19
   130c4:	andeq	r9, r1, r0, lsr #20
   130c8:	muleq	r1, r8, sl
   130cc:	andeq	r9, r1, r8, ror #21
   130d0:	andeq	r9, r1, r4, lsl #23
   130d4:	andeq	r9, r1, ip, lsl #24
   130d8:	muleq	r1, r0, ip
   130dc:	ldrdeq	r9, [r1], -r4
   130e0:	andeq	r9, r1, r0, ror lr
   130e4:	andeq	r9, r1, ip, ror #29
   130e8:	andeq	r9, r1, r8, lsr pc
   130ec:	andeq	r9, r1, r0, lsl #31
   130f0:	andeq	r9, r1, r0, asr #31
   130f4:	strdeq	r9, [r1], -r0
   130f8:	andeq	sl, r1, r8, lsr #32
   130fc:	andeq	sl, r1, r8, lsr r0
   13100:	andeq	sl, r1, r0, lsl #1
   13104:	andeq	sl, r1, r8, lsr #2
   13108:	andeq	sl, r1, r8, lsr #3
   1310c:	andeq	sl, r1, r8, lsr #4
   13110:	andeq	sl, r1, r8, lsr #5
   13114:			; <UNDEFINED> instruction: 0x0001a3bc
   13118:	andeq	sl, r1, r0, lsr r5
   1311c:	andeq	sl, r1, ip, asr #13
   13120:	andeq	r9, r1, r0, asr #1
   13124:			; <UNDEFINED> instruction: 0x000197b8
   13128:	andeq	sl, r1, ip, lsl #17
   1312c:	andeq	sl, r1, r4, lsr #17
   13130:	andeq	sl, r1, ip, asr #17
   13134:	ldrdeq	sl, [r1], -ip
   13138:	andeq	sl, r1, r8, lsr #18
   1313c:	andeq	sl, r1, r4, asr #18
   13140:	andeq	sl, r1, r4, lsr #5
   13144:	andeq	sl, r1, r4, lsl #26
   13148:	andeq	sl, r1, r0, ror #17
   1314c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13150:	sub	sp, sp, #44	; 0x2c
   13154:	mov	r7, r0
   13158:	mov	r6, r1
   1315c:	ldr	r0, [r1]
   13160:	bl	14fb4 <__assert_fail@plt+0x3eb8>
   13164:	ldr	r1, [pc, #3384]	; 13ea4 <__assert_fail@plt+0x2da8>
   13168:	mov	r0, #6
   1316c:	bl	1106c <setlocale@plt>
   13170:	str	r0, [sp, #28]
   13174:	ldr	r4, [pc, #3372]	; 13ea8 <__assert_fail@plt+0x2dac>
   13178:	ldr	r1, [pc, #3372]	; 13eac <__assert_fail@plt+0x2db0>
   1317c:	mov	r0, r4
   13180:	bl	110b4 <bindtextdomain@plt>
   13184:	mov	r0, r4
   13188:	bl	10f10 <textdomain@plt>
   1318c:	mov	r0, #65536	; 0x10000
   13190:	bl	11090 <nl_langinfo@plt>
   13194:	ldr	r3, [pc, #3348]	; 13eb0 <__assert_fail@plt+0x2db4>
   13198:	str	r0, [r3, #4]
   1319c:	cmp	r0, #0
   131a0:	beq	131b0 <__assert_fail@plt+0x20b4>
   131a4:	ldrb	r3, [r0]
   131a8:	cmp	r3, #0
   131ac:	bne	131bc <__assert_fail@plt+0x20c0>
   131b0:	ldr	r2, [pc, #3324]	; 13eb4 <__assert_fail@plt+0x2db8>
   131b4:	ldr	r3, [pc, #3316]	; 13eb0 <__assert_fail@plt+0x2db4>
   131b8:	str	r2, [r3, #4]
   131bc:	ldr	r4, [pc, #3308]	; 13eb0 <__assert_fail@plt+0x2db4>
   131c0:	ldr	r0, [r4, #4]
   131c4:	bl	10fe8 <strlen@plt>
   131c8:	str	r0, [r4]
   131cc:	ldr	r0, [pc, #3300]	; 13eb8 <__assert_fail@plt+0x2dbc>
   131d0:	bl	1909c <__assert_fail@plt+0x7fa0>
   131d4:	ldr	r4, [pc, #3296]	; 13ebc <__assert_fail@plt+0x2dc0>
   131d8:	ldr	r5, [pc, #3296]	; 13ec0 <__assert_fail@plt+0x2dc4>
   131dc:	add	sl, r4, #440	; 0x1b8
   131e0:	ldr	r9, [pc, #3292]	; 13ec4 <__assert_fail@plt+0x2dc8>
   131e4:	ldr	r8, [pc, #3268]	; 13eb0 <__assert_fail@plt+0x2db4>
   131e8:	add	fp, r8, #64	; 0x40
   131ec:	mov	r3, #0
   131f0:	str	r3, [sp]
   131f4:	add	r3, r4, #56	; 0x38
   131f8:	mov	r2, r5
   131fc:	mov	r1, r6
   13200:	mov	r0, r7
   13204:	bl	10fc4 <getopt_long@plt>
   13208:	cmn	r0, #1
   1320c:	beq	13610 <__assert_fail@plt+0x2514>
   13210:	cmp	r0, #260	; 0x104
   13214:	beq	133d8 <__assert_fail@plt+0x22dc>
   13218:	ble	13270 <__assert_fail@plt+0x2174>
   1321c:	ldr	r3, [pc, #3236]	; 13ec8 <__assert_fail@plt+0x2dcc>
   13220:	cmp	r0, r3
   13224:	beq	13530 <__assert_fail@plt+0x2434>
   13228:	bgt	13320 <__assert_fail@plt+0x2224>
   1322c:	sub	r3, r3, #3
   13230:	cmp	r0, r3
   13234:	beq	1341c <__assert_fail@plt+0x2320>
   13238:	blt	13524 <__assert_fail@plt+0x2428>
   1323c:	add	r3, r3, #1
   13240:	cmp	r0, r3
   13244:	beq	13428 <__assert_fail@plt+0x232c>
   13248:	cmp	r0, #264	; 0x108
   1324c:	bne	132d0 <__assert_fail@plt+0x21d4>
   13250:	ldr	r3, [pc, #3188]	; 13ecc <__assert_fail@plt+0x2dd0>
   13254:	ldr	r3, [r3]
   13258:	cmp	r3, #0
   1325c:	bne	134ac <__assert_fail@plt+0x23b0>
   13260:	mov	r1, #1
   13264:	ldr	r0, [r9]
   13268:	bl	14020 <__assert_fail@plt+0x2f24>
   1326c:	b	131ec <__assert_fail@plt+0x20f0>
   13270:	cmp	r0, #122	; 0x7a
   13274:	beq	13514 <__assert_fail@plt+0x2418>
   13278:	ble	132b8 <__assert_fail@plt+0x21bc>
   1327c:	ldr	r3, [pc, #3148]	; 13ed0 <__assert_fail@plt+0x2dd4>
   13280:	cmp	r0, r3
   13284:	beq	13384 <__assert_fail@plt+0x2288>
   13288:	ble	132d8 <__assert_fail@plt+0x21dc>
   1328c:	ldr	r3, [pc, #3136]	; 13ed4 <__assert_fail@plt+0x2dd8>
   13290:	cmp	r0, r3
   13294:	beq	13398 <__assert_fail@plt+0x229c>
   13298:	add	r3, r3, #1
   1329c:	cmp	r0, r3
   132a0:	bne	132d0 <__assert_fail@plt+0x21d4>
   132a4:	ldr	r0, [r9]
   132a8:	bl	11344 <__assert_fail@plt+0x248>
   132ac:	ldr	r3, [pc, #3108]	; 13ed8 <__assert_fail@plt+0x2ddc>
   132b0:	strd	r0, [r3, #16]
   132b4:	b	131ec <__assert_fail@plt+0x20f0>
   132b8:	cmn	r0, #2
   132bc:	beq	135d4 <__assert_fail@plt+0x24d8>
   132c0:	cmp	r0, #100	; 0x64
   132c4:	beq	134cc <__assert_fail@plt+0x23d0>
   132c8:	cmn	r0, #3
   132cc:	beq	135dc <__assert_fail@plt+0x24e0>
   132d0:	mov	r0, #1
   132d4:	bl	12b38 <__assert_fail@plt+0x1a3c>
   132d8:	cmp	r0, #256	; 0x100
   132dc:	bne	132d0 <__assert_fail@plt+0x21d4>
   132e0:	mov	r3, #1
   132e4:	str	r3, [sp, #8]
   132e8:	ldr	r3, [pc, #3052]	; 13edc <__assert_fail@plt+0x2de0>
   132ec:	ldr	r3, [r3]
   132f0:	str	r3, [sp, #4]
   132f4:	mov	r3, #4
   132f8:	str	r3, [sp]
   132fc:	add	r3, r4, #360	; 0x168
   13300:	add	r2, r4, #380	; 0x17c
   13304:	ldr	r1, [r9]
   13308:	ldr	r0, [pc, #3024]	; 13ee0 <__assert_fail@plt+0x2de4>
   1330c:	bl	14974 <__assert_fail@plt+0x3878>
   13310:	add	r0, r4, r0, lsl #2
   13314:	ldr	r3, [r0, #360]	; 0x168
   13318:	str	r3, [r8, #32]
   1331c:	b	131ec <__assert_fail@plt+0x20f0>
   13320:	ldr	r3, [pc, #3004]	; 13ee4 <__assert_fail@plt+0x2de8>
   13324:	cmp	r0, r3
   13328:	beq	1354c <__assert_fail@plt+0x2450>
   1332c:	blt	1353c <__assert_fail@plt+0x2440>
   13330:	cmp	r0, #268	; 0x10c
   13334:	beq	135c8 <__assert_fail@plt+0x24cc>
   13338:	add	r3, r3, #2
   1333c:	cmp	r0, r3
   13340:	bne	132d0 <__assert_fail@plt+0x21d4>
   13344:	mov	r3, #1
   13348:	str	r3, [sp, #8]
   1334c:	ldr	r3, [pc, #2952]	; 13edc <__assert_fail@plt+0x2de0>
   13350:	ldr	r3, [r3]
   13354:	str	r3, [sp, #4]
   13358:	mov	r3, #4
   1335c:	str	r3, [sp]
   13360:	add	r3, r4, #484	; 0x1e4
   13364:	add	r2, r4, #500	; 0x1f4
   13368:	ldr	r1, [r9]
   1336c:	ldr	r0, [pc, #2932]	; 13ee8 <__assert_fail@plt+0x2dec>
   13370:	bl	14974 <__assert_fail@plt+0x3878>
   13374:	add	r0, r4, r0, lsl #2
   13378:	ldr	r3, [r0, #484]	; 0x1e4
   1337c:	str	r3, [r8, #36]	; 0x24
   13380:	b	131ec <__assert_fail@plt+0x20f0>
   13384:	ldr	r0, [r9]
   13388:	bl	11344 <__assert_fail@plt+0x248>
   1338c:	ldr	r3, [pc, #2884]	; 13ed8 <__assert_fail@plt+0x2ddc>
   13390:	strd	r0, [r3, #8]
   13394:	b	131ec <__assert_fail@plt+0x20f0>
   13398:	mov	r3, #1
   1339c:	str	r3, [sp, #8]
   133a0:	ldr	r3, [pc, #2868]	; 13edc <__assert_fail@plt+0x2de0>
   133a4:	ldr	r3, [r3]
   133a8:	str	r3, [sp, #4]
   133ac:	mov	r3, #4
   133b0:	str	r3, [sp]
   133b4:	add	r3, r4, #404	; 0x194
   133b8:	add	r2, r4, #420	; 0x1a4
   133bc:	ldr	r1, [r9]
   133c0:	ldr	r0, [pc, #2852]	; 13eec <__assert_fail@plt+0x2df0>
   133c4:	bl	14974 <__assert_fail@plt+0x3878>
   133c8:	add	r0, r4, r0, lsl #2
   133cc:	ldr	r3, [r0, #404]	; 0x194
   133d0:	str	r3, [r8, #44]	; 0x2c
   133d4:	b	131ec <__assert_fail@plt+0x20f0>
   133d8:	mov	r3, #1
   133dc:	str	r3, [sp, #8]
   133e0:	ldr	r3, [pc, #2804]	; 13edc <__assert_fail@plt+0x2de0>
   133e4:	ldr	r3, [r3]
   133e8:	str	r3, [sp, #4]
   133ec:	mov	r3, #4
   133f0:	str	r3, [sp]
   133f4:	mov	r3, sl
   133f8:	add	r2, r4, #460	; 0x1cc
   133fc:	ldr	r1, [r9]
   13400:	ldr	r0, [pc, #2792]	; 13ef0 <__assert_fail@plt+0x2df4>
   13404:	bl	14974 <__assert_fail@plt+0x3878>
   13408:	add	r0, r4, r0, lsl #2
   1340c:	ldr	r2, [r0, #440]	; 0x1b8
   13410:	ldr	r3, [pc, #2752]	; 13ed8 <__assert_fail@plt+0x2ddc>
   13414:	str	r2, [r3, #28]
   13418:	b	131ec <__assert_fail@plt+0x20f0>
   1341c:	mov	r3, #1
   13420:	str	r3, [r8, #48]	; 0x30
   13424:	b	131ec <__assert_fail@plt+0x20f0>
   13428:	ldr	r3, [pc, #2676]	; 13ea4 <__assert_fail@plt+0x2da8>
   1342c:	str	r3, [sp]
   13430:	add	r3, r8, #28
   13434:	mov	r2, #10
   13438:	mov	r1, #0
   1343c:	ldr	r0, [r9]
   13440:	bl	177c8 <__assert_fail@plt+0x66cc>
   13444:	cmp	r0, #0
   13448:	bne	13478 <__assert_fail@plt+0x237c>
   1344c:	ldr	r3, [r8, #28]
   13450:	bics	r2, r3, #-2147483648	; 0x80000000
   13454:	beq	13478 <__assert_fail@plt+0x237c>
   13458:	cmp	r3, #0
   1345c:	bge	131ec <__assert_fail@plt+0x20f0>
   13460:	mov	r1, #0
   13464:	ldr	r2, [pc, #2668]	; 13ed8 <__assert_fail@plt+0x2ddc>
   13468:	str	r1, [r2, #32]
   1346c:	rsb	r3, r3, #0
   13470:	str	r3, [r8, #28]
   13474:	b	131ec <__assert_fail@plt+0x20f0>
   13478:	mov	r2, #5
   1347c:	ldr	r1, [pc, #2672]	; 13ef4 <__assert_fail@plt+0x2df8>
   13480:	mov	r0, #0
   13484:	bl	10ef8 <dcgettext@plt>
   13488:	mov	r4, r0
   1348c:	ldr	r3, [pc, #2608]	; 13ec4 <__assert_fail@plt+0x2dc8>
   13490:	ldr	r0, [r3]
   13494:	bl	16b04 <__assert_fail@plt+0x5a08>
   13498:	mov	r3, r0
   1349c:	mov	r2, r4
   134a0:	mov	r1, #0
   134a4:	mov	r0, #1
   134a8:	bl	10f7c <error@plt>
   134ac:	mov	r2, #5
   134b0:	ldr	r1, [pc, #2624]	; 13ef8 <__assert_fail@plt+0x2dfc>
   134b4:	mov	r0, #0
   134b8:	bl	10ef8 <dcgettext@plt>
   134bc:	mov	r2, r0
   134c0:	mov	r1, #0
   134c4:	mov	r0, #1
   134c8:	bl	10f7c <error@plt>
   134cc:	ldr	r2, [r9]
   134d0:	ldrb	r3, [r2]
   134d4:	cmp	r3, #0
   134d8:	beq	134e8 <__assert_fail@plt+0x23ec>
   134dc:	ldrb	r2, [r2, #1]
   134e0:	cmp	r2, #0
   134e4:	bne	134f4 <__assert_fail@plt+0x23f8>
   134e8:	ldr	r2, [pc, #2536]	; 13ed8 <__assert_fail@plt+0x2ddc>
   134ec:	str	r3, [r2, #36]	; 0x24
   134f0:	b	131ec <__assert_fail@plt+0x20f0>
   134f4:	mov	r2, #5
   134f8:	ldr	r1, [pc, #2556]	; 13efc <__assert_fail@plt+0x2e00>
   134fc:	mov	r0, #0
   13500:	bl	10ef8 <dcgettext@plt>
   13504:	mov	r2, r0
   13508:	mov	r1, #0
   1350c:	mov	r0, #1
   13510:	bl	10f7c <error@plt>
   13514:	mov	r2, #0
   13518:	ldr	r3, [pc, #2488]	; 13ed8 <__assert_fail@plt+0x2ddc>
   1351c:	strb	r2, [r3, #40]	; 0x28
   13520:	b	131ec <__assert_fail@plt+0x20f0>
   13524:	ldr	r3, [r9]
   13528:	str	r3, [r8, #16]
   1352c:	b	131ec <__assert_fail@plt+0x20f0>
   13530:	mov	r3, #1
   13534:	strb	r3, [r8, #40]	; 0x28
   13538:	b	131ec <__assert_fail@plt+0x20f0>
   1353c:	mov	r3, #1
   13540:	strb	r3, [r8, #20]
   13544:	strb	r3, [r8, #40]	; 0x28
   13548:	b	131ec <__assert_fail@plt+0x20f0>
   1354c:	ldr	r0, [r9]
   13550:	cmp	r0, #0
   13554:	beq	135b8 <__assert_fail@plt+0x24bc>
   13558:	ldr	r3, [pc, #2372]	; 13ea4 <__assert_fail@plt+0x2da8>
   1355c:	str	r3, [sp]
   13560:	mov	r3, fp
   13564:	mov	r2, #10
   13568:	mov	r1, #0
   1356c:	bl	17cec <__assert_fail@plt+0x6bf0>
   13570:	cmp	r0, #0
   13574:	bne	13584 <__assert_fail@plt+0x2488>
   13578:	ldrd	r2, [r8, #64]	; 0x40
   1357c:	orrs	r3, r2, r3
   13580:	bne	131ec <__assert_fail@plt+0x20f0>
   13584:	mov	r2, #5
   13588:	ldr	r1, [pc, #2416]	; 13f00 <__assert_fail@plt+0x2e04>
   1358c:	mov	r0, #0
   13590:	bl	10ef8 <dcgettext@plt>
   13594:	mov	r4, r0
   13598:	ldr	r3, [pc, #2340]	; 13ec4 <__assert_fail@plt+0x2dc8>
   1359c:	ldr	r0, [r3]
   135a0:	bl	16b04 <__assert_fail@plt+0x5a08>
   135a4:	mov	r3, r0
   135a8:	mov	r2, r4
   135ac:	mov	r1, #0
   135b0:	mov	r0, #1
   135b4:	bl	10f7c <error@plt>
   135b8:	mov	r2, #1
   135bc:	mov	r3, #0
   135c0:	strd	r2, [r8, #64]	; 0x40
   135c4:	b	131ec <__assert_fail@plt+0x20f0>
   135c8:	ldr	r3, [r9]
   135cc:	str	r3, [r8, #72]	; 0x48
   135d0:	b	131ec <__assert_fail@plt+0x20f0>
   135d4:	mov	r0, #0
   135d8:	bl	12b38 <__assert_fail@plt+0x1a3c>
   135dc:	mov	r4, #0
   135e0:	str	r4, [sp, #4]
   135e4:	ldr	r3, [pc, #2328]	; 13f04 <__assert_fail@plt+0x2e08>
   135e8:	str	r3, [sp]
   135ec:	ldr	r3, [pc, #2324]	; 13f08 <__assert_fail@plt+0x2e0c>
   135f0:	ldr	r3, [r3]
   135f4:	ldr	r2, [pc, #2320]	; 13f0c <__assert_fail@plt+0x2e10>
   135f8:	ldr	r1, [pc, #2320]	; 13f10 <__assert_fail@plt+0x2e14>
   135fc:	ldr	r0, [pc, #2320]	; 13f14 <__assert_fail@plt+0x2e18>
   13600:	ldr	r0, [r0]
   13604:	bl	16fd0 <__assert_fail@plt+0x5ed4>
   13608:	mov	r0, r4
   1360c:	bl	10fdc <exit@plt>
   13610:	ldr	r3, [pc, #2200]	; 13eb0 <__assert_fail@plt+0x2db4>
   13614:	ldr	r3, [r3, #72]	; 0x48
   13618:	cmp	r3, #0
   1361c:	beq	13630 <__assert_fail@plt+0x2534>
   13620:	ldr	r3, [pc, #2184]	; 13eb0 <__assert_fail@plt+0x2db4>
   13624:	ldr	r3, [r3, #48]	; 0x30
   13628:	cmp	r3, #0
   1362c:	bne	136f8 <__assert_fail@plt+0x25fc>
   13630:	ldr	r3, [pc, #2168]	; 13eb0 <__assert_fail@plt+0x2db4>
   13634:	ldrb	r3, [r3, #40]	; 0x28
   13638:	ldr	r2, [sp, #28]
   1363c:	cmp	r2, #0
   13640:	movne	r3, #0
   13644:	andeq	r3, r3, #1
   13648:	cmp	r3, #0
   1364c:	bne	13718 <__assert_fail@plt+0x261c>
   13650:	ldr	r3, [pc, #2136]	; 13eb0 <__assert_fail@plt+0x2db4>
   13654:	ldrb	r3, [r3, #40]	; 0x28
   13658:	cmp	r3, #0
   1365c:	beq	136d0 <__assert_fail@plt+0x25d4>
   13660:	ldr	r3, [pc, #2120]	; 13eb0 <__assert_fail@plt+0x2db4>
   13664:	ldr	r3, [r3, #32]
   13668:	cmp	r3, #0
   1366c:	bne	136d0 <__assert_fail@plt+0x25d4>
   13670:	ldr	r3, [pc, #2104]	; 13eb0 <__assert_fail@plt+0x2db4>
   13674:	ldr	r3, [r3, #44]	; 0x2c
   13678:	cmp	r3, #0
   1367c:	bne	136d0 <__assert_fail@plt+0x25d4>
   13680:	ldr	r3, [pc, #2088]	; 13eb0 <__assert_fail@plt+0x2db4>
   13684:	ldr	r3, [r3, #48]	; 0x30
   13688:	cmp	r3, #0
   1368c:	bne	13d54 <__assert_fail@plt+0x2c58>
   13690:	ldr	r3, [pc, #2072]	; 13eb0 <__assert_fail@plt+0x2db4>
   13694:	ldr	r3, [r3, #28]
   13698:	cmp	r3, #0
   1369c:	bne	13d68 <__assert_fail@plt+0x2c6c>
   136a0:	ldr	r3, [pc, #2056]	; 13eb0 <__assert_fail@plt+0x2db4>
   136a4:	ldr	r4, [r3, #72]	; 0x48
   136a8:	cmp	r4, #0
   136ac:	bne	136e0 <__assert_fail@plt+0x25e4>
   136b0:	mov	r2, #5
   136b4:	ldr	r1, [pc, #2140]	; 13f18 <__assert_fail@plt+0x2e1c>
   136b8:	mov	r0, #0
   136bc:	bl	10ef8 <dcgettext@plt>
   136c0:	mov	r2, r0
   136c4:	mov	r1, #0
   136c8:	mov	r0, r1
   136cc:	bl	10f7c <error@plt>
   136d0:	ldr	r3, [pc, #2008]	; 13eb0 <__assert_fail@plt+0x2db4>
   136d4:	ldr	r4, [r3, #72]	; 0x48
   136d8:	cmp	r4, #0
   136dc:	beq	13db4 <__assert_fail@plt+0x2cb8>
   136e0:	mov	r3, #0
   136e4:	str	r3, [sp, #36]	; 0x24
   136e8:	mov	r2, #1
   136ec:	mov	r0, r2
   136f0:	mov	ip, #2
   136f4:	b	13788 <__assert_fail@plt+0x268c>
   136f8:	mov	r2, #5
   136fc:	ldr	r1, [pc, #2072]	; 13f1c <__assert_fail@plt+0x2e20>
   13700:	mov	r0, #0
   13704:	bl	10ef8 <dcgettext@plt>
   13708:	mov	r2, r0
   1370c:	mov	r1, #0
   13710:	mov	r0, #1
   13714:	bl	10f7c <error@plt>
   13718:	mov	r2, #5
   1371c:	ldr	r1, [pc, #2044]	; 13f20 <__assert_fail@plt+0x2e24>
   13720:	mov	r0, #0
   13724:	bl	10ef8 <dcgettext@plt>
   13728:	mov	r2, r0
   1372c:	mov	r1, #0
   13730:	mov	r0, r1
   13734:	bl	10f7c <error@plt>
   13738:	b	13650 <__assert_fail@plt+0x2554>
   1373c:	mov	r2, #5
   13740:	ldr	r1, [pc, #2012]	; 13f24 <__assert_fail@plt+0x2e28>
   13744:	mov	r0, #0
   13748:	bl	10ef8 <dcgettext@plt>
   1374c:	mov	r5, r0
   13750:	mov	r0, r4
   13754:	bl	16b04 <__assert_fail@plt+0x5a08>
   13758:	mov	r3, r0
   1375c:	mov	r2, r5
   13760:	mov	r1, #0
   13764:	mov	r0, #1
   13768:	bl	10f7c <error@plt>
   1376c:	add	r5, r3, #1
   13770:	ldrb	r1, [r4, r5]
   13774:	cmp	r1, #37	; 0x25
   13778:	bne	137a8 <__assert_fail@plt+0x26ac>
   1377c:	mov	r1, ip
   13780:	add	r3, r3, r1
   13784:	add	r2, r2, #1
   13788:	sub	r8, r2, #1
   1378c:	ldrb	r1, [r4, r3]
   13790:	cmp	r1, #37	; 0x25
   13794:	beq	1376c <__assert_fail@plt+0x2670>
   13798:	cmp	r1, #0
   1379c:	beq	1373c <__assert_fail@plt+0x2640>
   137a0:	mov	r1, r0
   137a4:	b	13780 <__assert_fail@plt+0x2684>
   137a8:	mov	r3, #0
   137ac:	str	r3, [sp, #28]
   137b0:	mov	sl, #1
   137b4:	ldr	fp, [pc, #1780]	; 13eb0 <__assert_fail@plt+0x2db4>
   137b8:	ldr	r1, [pc, #1896]	; 13f28 <__assert_fail@plt+0x2e2c>
   137bc:	add	r0, r4, r5
   137c0:	bl	110f0 <strspn@plt>
   137c4:	add	r5, r5, r0
   137c8:	add	r9, r4, r5
   137cc:	ldrb	r3, [r4, r5]
   137d0:	cmp	r3, #39	; 0x27
   137d4:	streq	sl, [fp, #48]	; 0x30
   137d8:	addeq	r5, r5, #1
   137dc:	beq	137b8 <__assert_fail@plt+0x26bc>
   137e0:	cmp	r3, #48	; 0x30
   137e4:	addeq	r5, r5, #1
   137e8:	streq	sl, [sp, #28]
   137ec:	beq	137b8 <__assert_fail@plt+0x26bc>
   137f0:	cmp	r0, #0
   137f4:	bne	137b8 <__assert_fail@plt+0x26bc>
   137f8:	bl	11000 <__errno_location@plt>
   137fc:	mov	r5, r0
   13800:	mov	r3, #0
   13804:	str	r3, [r0]
   13808:	mov	r2, #10
   1380c:	add	r1, sp, #36	; 0x24
   13810:	mov	r0, r9
   13814:	bl	10e74 <strtol@plt>
   13818:	mov	sl, r0
   1381c:	ldr	r3, [r5]
   13820:	cmp	r0, #-2147483648	; 0x80000000
   13824:	cmpne	r3, #34	; 0x22
   13828:	beq	138d8 <__assert_fail@plt+0x27dc>
   1382c:	ldr	r3, [sp, #36]	; 0x24
   13830:	cmp	r3, r9
   13834:	cmpne	r0, #0
   13838:	beq	13890 <__assert_fail@plt+0x2794>
   1383c:	ldr	r3, [pc, #1644]	; 13eb0 <__assert_fail@plt+0x2db4>
   13840:	ldrb	r3, [r3, #40]	; 0x28
   13844:	cmp	r3, #0
   13848:	beq	13874 <__assert_fail@plt+0x2778>
   1384c:	ldr	r3, [pc, #1628]	; 13eb0 <__assert_fail@plt+0x2db4>
   13850:	ldr	r3, [r3, #28]
   13854:	cmp	r3, #0
   13858:	beq	13874 <__assert_fail@plt+0x2778>
   1385c:	ldr	r3, [sp, #28]
   13860:	eor	r3, r3, #1
   13864:	cmp	r0, #0
   13868:	orrle	r3, r3, #1
   1386c:	cmp	r3, #0
   13870:	bne	13908 <__assert_fail@plt+0x280c>
   13874:	cmp	sl, #0
   13878:	blt	1392c <__assert_fail@plt+0x2830>
   1387c:	ldr	r3, [sp, #28]
   13880:	cmp	r3, #0
   13884:	ldr	r3, [pc, #1572]	; 13eb0 <__assert_fail@plt+0x2db4>
   13888:	strne	sl, [r3, #52]	; 0x34
   1388c:	streq	sl, [r3, #28]
   13890:	ldr	r2, [sp, #36]	; 0x24
   13894:	sub	r3, r2, r4
   13898:	ldrb	r2, [r2]
   1389c:	cmp	r2, #0
   138a0:	beq	13948 <__assert_fail@plt+0x284c>
   138a4:	cmp	r2, #46	; 0x2e
   138a8:	beq	13978 <__assert_fail@plt+0x287c>
   138ac:	ldrb	r2, [r4, r3]
   138b0:	cmp	r2, #102	; 0x66
   138b4:	bne	13a10 <__assert_fail@plt+0x2914>
   138b8:	add	r3, r3, #1
   138bc:	add	r5, r4, r3
   138c0:	ldrb	r2, [r4, r3]
   138c4:	cmp	r2, #0
   138c8:	beq	13e98 <__assert_fail@plt+0x2d9c>
   138cc:	mov	r0, #2
   138d0:	mov	r1, #1
   138d4:	b	13a80 <__assert_fail@plt+0x2984>
   138d8:	mov	r2, #5
   138dc:	ldr	r1, [pc, #1608]	; 13f2c <__assert_fail@plt+0x2e30>
   138e0:	mov	r0, #0
   138e4:	bl	10ef8 <dcgettext@plt>
   138e8:	mov	r5, r0
   138ec:	mov	r0, r4
   138f0:	bl	16b04 <__assert_fail@plt+0x5a08>
   138f4:	mov	r3, r0
   138f8:	mov	r2, r5
   138fc:	mov	r1, #0
   13900:	mov	r0, #1
   13904:	bl	10f7c <error@plt>
   13908:	mov	r2, #5
   1390c:	ldr	r1, [pc, #1564]	; 13f30 <__assert_fail@plt+0x2e34>
   13910:	mov	r0, #0
   13914:	bl	10ef8 <dcgettext@plt>
   13918:	mov	r2, r0
   1391c:	mov	r1, #0
   13920:	mov	r0, r1
   13924:	bl	10f7c <error@plt>
   13928:	b	13874 <__assert_fail@plt+0x2778>
   1392c:	mov	r2, #0
   13930:	ldr	r3, [pc, #1440]	; 13ed8 <__assert_fail@plt+0x2ddc>
   13934:	str	r2, [r3, #32]
   13938:	rsb	sl, sl, #0
   1393c:	ldr	r3, [pc, #1388]	; 13eb0 <__assert_fail@plt+0x2db4>
   13940:	str	sl, [r3, #28]
   13944:	b	13890 <__assert_fail@plt+0x2794>
   13948:	mov	r2, #5
   1394c:	ldr	r1, [pc, #1504]	; 13f34 <__assert_fail@plt+0x2e38>
   13950:	mov	r0, #0
   13954:	bl	10ef8 <dcgettext@plt>
   13958:	mov	r5, r0
   1395c:	mov	r0, r4
   13960:	bl	16b04 <__assert_fail@plt+0x5a08>
   13964:	mov	r3, r0
   13968:	mov	r2, r5
   1396c:	mov	r1, #0
   13970:	mov	r0, #1
   13974:	bl	10f7c <error@plt>
   13978:	mov	r2, #0
   1397c:	str	r2, [r5]
   13980:	add	r9, r3, #1
   13984:	mov	r2, #10
   13988:	add	r1, sp, #36	; 0x24
   1398c:	add	r0, r4, r9
   13990:	bl	10e74 <strtol@plt>
   13994:	ldr	r3, [pc, #1340]	; 13ed8 <__assert_fail@plt+0x2ddc>
   13998:	str	r0, [r3, #24]
   1399c:	ldr	r3, [r5]
   139a0:	cmp	r3, #34	; 0x22
   139a4:	movne	r3, #0
   139a8:	moveq	r3, #1
   139ac:	orrs	r3, r3, r0, lsr #31
   139b0:	bne	139e0 <__assert_fail@plt+0x28e4>
   139b4:	bl	10fd0 <__ctype_b_loc@plt>
   139b8:	ldrb	r2, [r4, r9]
   139bc:	ldr	r1, [r0]
   139c0:	lsl	r3, r2, #1
   139c4:	ldrh	r3, [r1, r3]
   139c8:	cmp	r2, #43	; 0x2b
   139cc:	orreq	r3, r3, #1
   139d0:	tst	r3, #1
   139d4:	ldreq	r3, [sp, #36]	; 0x24
   139d8:	subeq	r3, r3, r4
   139dc:	beq	138ac <__assert_fail@plt+0x27b0>
   139e0:	mov	r2, #5
   139e4:	ldr	r1, [pc, #1356]	; 13f38 <__assert_fail@plt+0x2e3c>
   139e8:	mov	r0, #0
   139ec:	bl	10ef8 <dcgettext@plt>
   139f0:	mov	r5, r0
   139f4:	mov	r0, r4
   139f8:	bl	16b04 <__assert_fail@plt+0x5a08>
   139fc:	mov	r3, r0
   13a00:	mov	r2, r5
   13a04:	mov	r1, #0
   13a08:	mov	r0, #1
   13a0c:	bl	10f7c <error@plt>
   13a10:	mov	r2, #5
   13a14:	ldr	r1, [pc, #1312]	; 13f3c <__assert_fail@plt+0x2e40>
   13a18:	mov	r0, #0
   13a1c:	bl	10ef8 <dcgettext@plt>
   13a20:	mov	r5, r0
   13a24:	mov	r0, r4
   13a28:	bl	16b04 <__assert_fail@plt+0x5a08>
   13a2c:	mov	r3, r0
   13a30:	mov	r2, r5
   13a34:	mov	r1, #0
   13a38:	mov	r0, #1
   13a3c:	bl	10f7c <error@plt>
   13a40:	mov	r2, #5
   13a44:	ldr	r1, [pc, #1268]	; 13f40 <__assert_fail@plt+0x2e44>
   13a48:	mov	r0, #0
   13a4c:	bl	10ef8 <dcgettext@plt>
   13a50:	mov	r5, r0
   13a54:	mov	r0, r4
   13a58:	bl	16b04 <__assert_fail@plt+0x5a08>
   13a5c:	mov	r3, r0
   13a60:	mov	r2, r5
   13a64:	mov	r1, #0
   13a68:	mov	r0, #1
   13a6c:	bl	10f7c <error@plt>
   13a70:	add	r3, r3, r2
   13a74:	ldrb	r2, [r4, r3]
   13a78:	cmp	r2, #0
   13a7c:	beq	13d7c <__assert_fail@plt+0x2c80>
   13a80:	cmp	r2, #37	; 0x25
   13a84:	movne	r2, r1
   13a88:	bne	13a70 <__assert_fail@plt+0x2974>
   13a8c:	add	r2, r4, r3
   13a90:	ldrb	r2, [r2, #1]
   13a94:	cmp	r2, #37	; 0x25
   13a98:	bne	13a40 <__assert_fail@plt+0x2944>
   13a9c:	mov	r2, r0
   13aa0:	b	13a70 <__assert_fail@plt+0x2974>
   13aa4:	mov	r0, r5
   13aa8:	bl	17624 <__assert_fail@plt+0x6528>
   13aac:	ldr	r3, [pc, #1020]	; 13eb0 <__assert_fail@plt+0x2db4>
   13ab0:	str	r0, [r3, #56]	; 0x38
   13ab4:	b	13da4 <__assert_fail@plt+0x2ca8>
   13ab8:	ldr	r3, [pc, #1156]	; 13f44 <__assert_fail@plt+0x2e48>
   13abc:	ldr	r8, [r3]
   13ac0:	mov	r1, r4
   13ac4:	mov	r0, #0
   13ac8:	bl	16af4 <__assert_fail@plt+0x59f8>
   13acc:	mov	r9, r0
   13ad0:	ldr	r3, [pc, #984]	; 13eb0 <__assert_fail@plt+0x2db4>
   13ad4:	ldr	r2, [r3, #48]	; 0x30
   13ad8:	ldr	r3, [pc, #1128]	; 13f48 <__assert_fail@plt+0x2e4c>
   13adc:	ldr	r4, [pc, #1128]	; 13f4c <__assert_fail@plt+0x2e50>
   13ae0:	cmp	r2, #0
   13ae4:	moveq	r4, r3
   13ae8:	ldr	r3, [pc, #960]	; 13eb0 <__assert_fail@plt+0x2db4>
   13aec:	ldr	sl, [r3, #28]
   13af0:	ldr	r3, [pc, #992]	; 13ed8 <__assert_fail@plt+0x2ddc>
   13af4:	ldr	r2, [r3, #32]
   13af8:	ldr	r3, [pc, #1104]	; 13f50 <__assert_fail@plt+0x2e54>
   13afc:	ldr	r5, [pc, #1104]	; 13f54 <__assert_fail@plt+0x2e58>
   13b00:	cmp	r2, #0
   13b04:	movne	r5, r3
   13b08:	ldr	r3, [pc, #928]	; 13eb0 <__assert_fail@plt+0x2db4>
   13b0c:	ldr	r1, [r3, #60]	; 0x3c
   13b10:	ldr	r3, [pc, #908]	; 13ea4 <__assert_fail@plt+0x2da8>
   13b14:	cmp	r1, #0
   13b18:	moveq	r1, r3
   13b1c:	mov	r0, #1
   13b20:	bl	16af4 <__assert_fail@plt+0x59f8>
   13b24:	mov	fp, r0
   13b28:	ldr	r3, [pc, #896]	; 13eb0 <__assert_fail@plt+0x2db4>
   13b2c:	ldr	r1, [r3, #56]	; 0x38
   13b30:	ldr	r3, [pc, #876]	; 13ea4 <__assert_fail@plt+0x2da8>
   13b34:	cmp	r1, #0
   13b38:	moveq	r1, r3
   13b3c:	mov	r0, #2
   13b40:	bl	16af4 <__assert_fail@plt+0x59f8>
   13b44:	str	r0, [sp, #16]
   13b48:	str	fp, [sp, #12]
   13b4c:	str	r5, [sp, #8]
   13b50:	str	sl, [sp, #4]
   13b54:	str	r4, [sp]
   13b58:	mov	r3, r9
   13b5c:	ldr	r2, [pc, #1012]	; 13f58 <__assert_fail@plt+0x2e5c>
   13b60:	mov	r1, #1
   13b64:	mov	r0, r8
   13b68:	bl	1103c <__fprintf_chk@plt>
   13b6c:	b	13db4 <__assert_fail@plt+0x2cb8>
   13b70:	mov	r2, #5
   13b74:	ldr	r1, [pc, #992]	; 13f5c <__assert_fail@plt+0x2e60>
   13b78:	mov	r0, #0
   13b7c:	bl	10ef8 <dcgettext@plt>
   13b80:	mov	r2, r0
   13b84:	mov	r1, #0
   13b88:	mov	r0, #1
   13b8c:	bl	10f7c <error@plt>
   13b90:	ldr	r0, [pc, #968]	; 13f60 <__assert_fail@plt+0x2e64>
   13b94:	bl	11090 <nl_langinfo@plt>
   13b98:	ldrb	r3, [r0]
   13b9c:	cmp	r3, #0
   13ba0:	bne	13de4 <__assert_fail@plt+0x2ce8>
   13ba4:	mov	r2, #5
   13ba8:	ldr	r1, [pc, #948]	; 13f64 <__assert_fail@plt+0x2e68>
   13bac:	mov	r0, #0
   13bb0:	bl	10ef8 <dcgettext@plt>
   13bb4:	mov	r2, r0
   13bb8:	mov	r1, #0
   13bbc:	mov	r0, r1
   13bc0:	bl	10f7c <error@plt>
   13bc4:	b	13de4 <__assert_fail@plt+0x2ce8>
   13bc8:	mov	r2, #5
   13bcc:	ldr	r1, [pc, #916]	; 13f68 <__assert_fail@plt+0x2e6c>
   13bd0:	mov	r0, #0
   13bd4:	bl	10ef8 <dcgettext@plt>
   13bd8:	mov	r2, r0
   13bdc:	mov	r1, #0
   13be0:	mov	r0, r1
   13be4:	bl	10f7c <error@plt>
   13be8:	b	13e60 <__assert_fail@plt+0x2d64>
   13bec:	mov	r3, #0
   13bf0:	str	r3, [sp, #32]
   13bf4:	add	r5, sp, #40	; 0x28
   13bf8:	str	r3, [r5, #-4]!
   13bfc:	ldr	r4, [pc, #684]	; 13eb0 <__assert_fail@plt+0x2db4>
   13c00:	ldr	r7, [pc, #868]	; 13f6c <__assert_fail@plt+0x2e70>
   13c04:	ldr	r6, [pc, #716]	; 13ed8 <__assert_fail@plt+0x2ddc>
   13c08:	ldr	r8, [pc, #772]	; 13f14 <__assert_fail@plt+0x2e18>
   13c0c:	b	13c1c <__assert_fail@plt+0x2b20>
   13c10:	ldr	r1, [r8]
   13c14:	ldr	r0, [sp, #32]
   13c18:	bl	10e44 <fputs_unlocked@plt>
   13c1c:	ldrd	r2, [r4, #64]	; 0x40
   13c20:	subs	r0, r2, #1
   13c24:	sbc	r1, r3, #0
   13c28:	strd	r0, [r4, #64]	; 0x40
   13c2c:	orrs	r3, r2, r3
   13c30:	beq	13c50 <__assert_fail@plt+0x2b54>
   13c34:	ldr	r3, [r7]
   13c38:	ldrb	r2, [r6, #40]	; 0x28
   13c3c:	mov	r1, r5
   13c40:	add	r0, sp, #32
   13c44:	bl	110c0 <getdelim@plt>
   13c48:	cmp	r0, #0
   13c4c:	bgt	13c10 <__assert_fail@plt+0x2b14>
   13c50:	mov	r4, #1
   13c54:	ldr	r6, [pc, #784]	; 13f6c <__assert_fail@plt+0x2e70>
   13c58:	ldr	r5, [pc, #632]	; 13ed8 <__assert_fail@plt+0x2ddc>
   13c5c:	mov	r7, #0
   13c60:	ldr	r3, [r6]
   13c64:	ldrb	r2, [r5, #40]	; 0x28
   13c68:	add	r1, sp, #36	; 0x24
   13c6c:	add	r0, sp, #32
   13c70:	bl	110c0 <getdelim@plt>
   13c74:	cmp	r0, #0
   13c78:	ble	13cac <__assert_fail@plt+0x2bb0>
   13c7c:	sub	r0, r0, #1
   13c80:	ldr	r3, [sp, #32]
   13c84:	ldrb	r1, [r3, r0]
   13c88:	ldrb	r2, [r5, #40]	; 0x28
   13c8c:	cmp	r1, r2
   13c90:	moveq	r1, #1
   13c94:	movne	r1, #0
   13c98:	strbeq	r7, [r3, r0]
   13c9c:	ldr	r0, [sp, #32]
   13ca0:	bl	1297c <__assert_fail@plt+0x1880>
   13ca4:	and	r4, r4, r0
   13ca8:	b	13c60 <__assert_fail@plt+0x2b64>
   13cac:	ldr	r3, [pc, #696]	; 13f6c <__assert_fail@plt+0x2e70>
   13cb0:	ldr	r3, [r3]
   13cb4:	ldr	r3, [r3]
   13cb8:	tst	r3, #32
   13cbc:	bne	13d04 <__assert_fail@plt+0x2c08>
   13cc0:	ldr	r3, [pc, #488]	; 13eb0 <__assert_fail@plt+0x2db4>
   13cc4:	ldrb	r3, [r3, #40]	; 0x28
   13cc8:	cmp	r4, #0
   13ccc:	movne	r3, #0
   13cd0:	andeq	r3, r3, #1
   13cd4:	cmp	r3, #0
   13cd8:	bne	13d30 <__assert_fail@plt+0x2c34>
   13cdc:	cmp	r4, #0
   13ce0:	movne	r4, #0
   13ce4:	bne	13cfc <__assert_fail@plt+0x2c00>
   13ce8:	ldr	r3, [pc, #448]	; 13eb0 <__assert_fail@plt+0x2db4>
   13cec:	ldr	r3, [r3, #36]	; 0x24
   13cf0:	sub	r3, r3, #2
   13cf4:	cmp	r3, #1
   13cf8:	movhi	r4, #2
   13cfc:	mov	r0, r4
   13d00:	bl	10fdc <exit@plt>
   13d04:	bl	11000 <__errno_location@plt>
   13d08:	ldr	r5, [r0]
   13d0c:	mov	r2, #5
   13d10:	ldr	r1, [pc, #600]	; 13f70 <__assert_fail@plt+0x2e74>
   13d14:	mov	r0, #0
   13d18:	bl	10ef8 <dcgettext@plt>
   13d1c:	mov	r2, r0
   13d20:	mov	r1, r5
   13d24:	mov	r0, #0
   13d28:	bl	10f7c <error@plt>
   13d2c:	b	13cc0 <__assert_fail@plt+0x2bc4>
   13d30:	mov	r2, #5
   13d34:	ldr	r1, [pc, #568]	; 13f74 <__assert_fail@plt+0x2e78>
   13d38:	mov	r0, #0
   13d3c:	bl	10ef8 <dcgettext@plt>
   13d40:	mov	r2, r0
   13d44:	mov	r1, #0
   13d48:	mov	r0, r1
   13d4c:	bl	10f7c <error@plt>
   13d50:	b	13cdc <__assert_fail@plt+0x2be0>
   13d54:	ldr	r3, [pc, #340]	; 13eb0 <__assert_fail@plt+0x2db4>
   13d58:	ldr	r4, [r3, #72]	; 0x48
   13d5c:	cmp	r4, #0
   13d60:	bne	136e0 <__assert_fail@plt+0x25e4>
   13d64:	b	13dd4 <__assert_fail@plt+0x2cd8>
   13d68:	ldr	r3, [pc, #320]	; 13eb0 <__assert_fail@plt+0x2db4>
   13d6c:	ldr	r4, [r3, #72]	; 0x48
   13d70:	cmp	r4, #0
   13d74:	bne	136e0 <__assert_fail@plt+0x25e4>
   13d78:	b	13de4 <__assert_fail@plt+0x2ce8>
   13d7c:	cmp	r8, #0
   13d80:	beq	13aa4 <__assert_fail@plt+0x29a8>
   13d84:	mov	r1, r8
   13d88:	mov	r0, r4
   13d8c:	bl	175f8 <__assert_fail@plt+0x64fc>
   13d90:	ldr	r3, [pc, #280]	; 13eb0 <__assert_fail@plt+0x2db4>
   13d94:	str	r0, [r3, #60]	; 0x3c
   13d98:	ldrb	r3, [r5]
   13d9c:	cmp	r3, #0
   13da0:	bne	13aa4 <__assert_fail@plt+0x29a8>
   13da4:	ldr	r3, [pc, #260]	; 13eb0 <__assert_fail@plt+0x2db4>
   13da8:	ldrb	r3, [r3, #20]
   13dac:	cmp	r3, #0
   13db0:	bne	13ab8 <__assert_fail@plt+0x29bc>
   13db4:	ldr	r3, [pc, #244]	; 13eb0 <__assert_fail@plt+0x2db4>
   13db8:	ldr	r3, [r3, #48]	; 0x30
   13dbc:	cmp	r3, #0
   13dc0:	beq	13de4 <__assert_fail@plt+0x2ce8>
   13dc4:	ldr	r3, [pc, #228]	; 13eb0 <__assert_fail@plt+0x2db4>
   13dc8:	ldr	r3, [r3, #44]	; 0x2c
   13dcc:	cmp	r3, #0
   13dd0:	bne	13b70 <__assert_fail@plt+0x2a74>
   13dd4:	ldr	r3, [pc, #212]	; 13eb0 <__assert_fail@plt+0x2db4>
   13dd8:	ldrb	r3, [r3, #40]	; 0x28
   13ddc:	cmp	r3, #0
   13de0:	bne	13b90 <__assert_fail@plt+0x2a94>
   13de4:	ldr	r4, [pc, #196]	; 13eb0 <__assert_fail@plt+0x2db4>
   13de8:	ldr	r0, [r4, #28]
   13dec:	bl	114ac <__assert_fail@plt+0x3b0>
   13df0:	ldr	r3, [r4, #28]
   13df4:	cmp	r3, #0
   13df8:	movne	r2, #0
   13dfc:	bne	13e14 <__assert_fail@plt+0x2d18>
   13e00:	ldr	r3, [pc, #208]	; 13ed8 <__assert_fail@plt+0x2ddc>
   13e04:	ldr	r2, [r3, #36]	; 0x24
   13e08:	cmp	r2, #256	; 0x100
   13e0c:	movne	r2, #0
   13e10:	moveq	r2, #1
   13e14:	ldr	r3, [pc, #148]	; 13eb0 <__assert_fail@plt+0x2db4>
   13e18:	str	r2, [r3, #24]
   13e1c:	ldr	r3, [r3, #36]	; 0x24
   13e20:	cmp	r3, #0
   13e24:	movne	r2, #0
   13e28:	ldrne	r3, [pc, #168]	; 13ed8 <__assert_fail@plt+0x2ddc>
   13e2c:	strne	r2, [r3]
   13e30:	ldr	r3, [pc, #320]	; 13f78 <__assert_fail@plt+0x2e7c>
   13e34:	ldr	r3, [r3]
   13e38:	cmp	r7, r3
   13e3c:	ble	13bec <__assert_fail@plt+0x2af0>
   13e40:	ldr	r3, [pc, #104]	; 13eb0 <__assert_fail@plt+0x2db4>
   13e44:	ldrb	r3, [r3, #40]	; 0x28
   13e48:	cmp	r3, #0
   13e4c:	beq	13e60 <__assert_fail@plt+0x2d64>
   13e50:	ldr	r3, [pc, #88]	; 13eb0 <__assert_fail@plt+0x2db4>
   13e54:	ldrd	r2, [r3, #64]	; 0x40
   13e58:	orrs	r3, r2, r3
   13e5c:	bne	13bc8 <__assert_fail@plt+0x2acc>
   13e60:	mov	r4, #1
   13e64:	ldr	r5, [pc, #268]	; 13f78 <__assert_fail@plt+0x2e7c>
   13e68:	mov	r8, r4
   13e6c:	ldr	r3, [r5]
   13e70:	cmp	r7, r3
   13e74:	ble	13cc0 <__assert_fail@plt+0x2bc4>
   13e78:	mov	r1, r8
   13e7c:	ldr	r0, [r6, r3, lsl #2]
   13e80:	bl	1297c <__assert_fail@plt+0x1880>
   13e84:	and	r4, r4, r0
   13e88:	ldr	r3, [r5]
   13e8c:	add	r3, r3, #1
   13e90:	str	r3, [r5]
   13e94:	b	13e6c <__assert_fail@plt+0x2d70>
   13e98:	cmp	r8, #0
   13e9c:	beq	13da4 <__assert_fail@plt+0x2ca8>
   13ea0:	b	13d84 <__assert_fail@plt+0x2c88>
   13ea4:	andeq	sl, r1, r4, lsr #5
   13ea8:	ldrdeq	sl, [r1], -r0
   13eac:	muleq	r1, r0, r9
   13eb0:	andeq	ip, r2, r8, lsr #3
   13eb4:	andeq	sl, r1, r8, lsr #19
   13eb8:	andeq	r4, r1, r8, ror #20
   13ebc:	andeq	r9, r1, r0, asr #1
   13ec0:	andeq	sl, r1, ip, lsr #19
   13ec4:	andeq	ip, r2, r0, lsr #3
   13ec8:	andeq	r0, r0, r9, lsl #2
   13ecc:	strdeq	ip, [r2], -r4
   13ed0:	andeq	r0, r0, r1, lsl #2
   13ed4:	andeq	r0, r0, r2, lsl #2
   13ed8:	andeq	ip, r2, r8, lsl #2
   13edc:	andeq	ip, r2, r8, lsr r1
   13ee0:			; <UNDEFINED> instruction: 0x0001a9b0
   13ee4:	andeq	r0, r0, fp, lsl #2
   13ee8:	andeq	sl, r1, r8, asr #20
   13eec:			; <UNDEFINED> instruction: 0x0001a9b8
   13ef0:	andeq	sl, r1, r0, asr #19
   13ef4:	andeq	sl, r1, r8, asr #19
   13ef8:	andeq	sl, r1, r4, ror #19
   13efc:	andeq	sl, r1, r4, lsl #20
   13f00:	andeq	sl, r1, r0, lsr sl
   13f04:	andeq	sl, r1, r4, asr sl
   13f08:	andeq	ip, r2, r4, lsr r1
   13f0c:	andeq	sl, r1, ip, asr #17
   13f10:			; <UNDEFINED> instruction: 0x000197b8
   13f14:	muleq	r2, ip, r1
   13f18:	andeq	sl, r1, r8, lsr #21
   13f1c:	andeq	sl, r1, r4, ror #20
   13f20:	muleq	r1, r0, sl
   13f24:	andeq	sl, r1, r8, asr #21
   13f28:	andeq	sl, r1, r8, ror #21
   13f2c:	andeq	sl, r1, ip, ror #21
   13f30:	andeq	sl, r1, r0, lsl fp
   13f34:	andeq	sl, r1, r8, lsr fp
   13f38:	andeq	sl, r1, r0, asr fp
   13f3c:	andeq	sl, r1, r0, ror fp
   13f40:	andeq	sl, r1, ip, lsr #23
   13f44:	muleq	r2, r0, r1
   13f48:	andeq	sl, r1, ip, ror r9
   13f4c:	andeq	sl, r1, r8, ror r9
   13f50:	andeq	sl, r1, r8, lsl #19
   13f54:	andeq	sl, r1, r0, lsl #19
   13f58:	ldrdeq	sl, [r1], -r4
   13f5c:	andeq	sl, r1, r0, asr #24
   13f60:	andeq	r0, r1, r1
   13f64:	andeq	sl, r1, r8, ror #24
   13f68:	muleq	r1, r0, ip
   13f6c:	muleq	r2, r8, r1
   13f70:			; <UNDEFINED> instruction: 0x0001acbc
   13f74:	ldrdeq	sl, [r1], -r0
   13f78:	andeq	ip, r2, r8, lsl #3
   13f7c:	andeq	r0, r0, r0
   13f80:	ldr	r0, [r0]
   13f84:	ldr	r3, [r1]
   13f88:	cmp	r0, r3
   13f8c:	blt	13fa0 <__assert_fail@plt+0x2ea4>
   13f90:	cmp	r0, r3
   13f94:	movle	r0, #0
   13f98:	movgt	r0, #1
   13f9c:	bx	lr
   13fa0:	mvn	r0, #0
   13fa4:	bx	lr
   13fa8:	push	{r4, r5, r6, r7, r8, lr}
   13fac:	mov	r6, r0
   13fb0:	mov	r7, r1
   13fb4:	mov	r4, r2
   13fb8:	mov	r5, r3
   13fbc:	ldr	r3, [pc, #88]	; 1401c <__assert_fail@plt+0x2f20>
   13fc0:	ldr	r2, [r3]
   13fc4:	ldr	r3, [r3, #4]
   13fc8:	cmp	r2, r3
   13fcc:	beq	14000 <__assert_fail@plt+0x2f04>
   13fd0:	ldr	r3, [pc, #68]	; 1401c <__assert_fail@plt+0x2f20>
   13fd4:	ldr	r2, [r3]
   13fd8:	ldr	r1, [r3, #8]
   13fdc:	lsl	r2, r2, #4
   13fe0:	strd	r6, [r1, r2]
   13fe4:	ldr	r2, [r3]
   13fe8:	ldr	r1, [r3, #8]
   13fec:	add	r1, r1, r2, lsl #4
   13ff0:	strd	r4, [r1, #8]
   13ff4:	add	r2, r2, #1
   13ff8:	str	r2, [r3]
   13ffc:	pop	{r4, r5, r6, r7, r8, pc}
   14000:	ldr	r8, [pc, #20]	; 1401c <__assert_fail@plt+0x2f20>
   14004:	mov	r2, #16
   14008:	add	r1, r8, #4
   1400c:	ldr	r0, [r8, #8]
   14010:	bl	171c4 <__assert_fail@plt+0x60c8>
   14014:	str	r0, [r8, #8]
   14018:	b	13fd0 <__assert_fail@plt+0x2ed4>
   1401c:	strdeq	ip, [r2], -r4
   14020:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14024:	sub	sp, sp, #28
   14028:	mov	r4, r0
   1402c:	str	r1, [sp, #20]
   14030:	ands	r3, r1, #1
   14034:	str	r3, [sp, #16]
   14038:	beq	14060 <__assert_fail@plt+0x2f64>
   1403c:	ldr	r1, [pc, #1588]	; 14678 <__assert_fail@plt+0x357c>
   14040:	bl	10e68 <strcmp@plt>
   14044:	cmp	r0, #0
   14048:	bne	14090 <__assert_fail@plt+0x2f94>
   1404c:	add	r4, r4, #1
   14050:	mov	r8, #1
   14054:	mov	r9, #0
   14058:	mov	r6, #1
   1405c:	b	1406c <__assert_fail@plt+0x2f70>
   14060:	mov	r8, #0
   14064:	mov	r9, #0
   14068:	mov	r6, #0
   1406c:	add	r4, r4, #1
   14070:	mov	r7, r6
   14074:	mov	r3, #0
   14078:	str	r3, [sp, #12]
   1407c:	mov	sl, r3
   14080:	mov	r2, #1
   14084:	mov	r3, #0
   14088:	strd	r2, [sp]
   1408c:	b	1420c <__assert_fail@plt+0x3110>
   14090:	mov	r8, #0
   14094:	mov	r9, #0
   14098:	mov	r6, #0
   1409c:	b	1406c <__assert_fail@plt+0x2f70>
   140a0:	mov	r7, r6
   140a4:	strd	r8, [sp]
   140a8:	mov	r8, #0
   140ac:	mov	r9, r8
   140b0:	b	14208 <__assert_fail@plt+0x310c>
   140b4:	cmp	r7, #0
   140b8:	bne	140f8 <__assert_fail@plt+0x2ffc>
   140bc:	orrs	r3, r8, r9
   140c0:	movne	r3, #0
   140c4:	andeq	r3, r6, #1
   140c8:	str	r3, [sp, #12]
   140cc:	cmp	r3, #0
   140d0:	bne	1412c <__assert_fail@plt+0x3030>
   140d4:	cmp	r6, #0
   140d8:	bne	140a0 <__assert_fail@plt+0x2fa4>
   140dc:	str	r6, [sp, #12]
   140e0:	mov	r8, #0
   140e4:	mov	r9, r8
   140e8:	mov	r7, #1
   140ec:	str	r7, [sp]
   140f0:	str	r8, [sp, #4]
   140f4:	b	14208 <__assert_fail@plt+0x310c>
   140f8:	ldr	r3, [sp, #20]
   140fc:	tst	r3, #4
   14100:	mov	r2, #5
   14104:	ldrne	r1, [pc, #1392]	; 1467c <__assert_fail@plt+0x3580>
   14108:	ldreq	r1, [pc, #1392]	; 14680 <__assert_fail@plt+0x3584>
   1410c:	mov	r0, #0
   14110:	bl	10ef8 <dcgettext@plt>
   14114:	mov	r2, r0
   14118:	mov	r1, #0
   1411c:	mov	r0, r1
   14120:	bl	10f7c <error@plt>
   14124:	mov	r0, #1
   14128:	bl	12b38 <__assert_fail@plt+0x1a3c>
   1412c:	ldr	r3, [sp, #20]
   14130:	tst	r3, #4
   14134:	mov	r2, #5
   14138:	ldrne	r1, [pc, #1348]	; 14684 <__assert_fail@plt+0x3588>
   1413c:	ldreq	r1, [pc, #1348]	; 14688 <__assert_fail@plt+0x358c>
   14140:	mov	r0, #0
   14144:	bl	10ef8 <dcgettext@plt>
   14148:	mov	r2, r0
   1414c:	mov	r1, #0
   14150:	mov	r0, r1
   14154:	bl	10f7c <error@plt>
   14158:	mov	r0, #1
   1415c:	bl	12b38 <__assert_fail@plt+0x1a3c>
   14160:	mov	r2, #5
   14164:	ldr	r1, [pc, #1312]	; 1468c <__assert_fail@plt+0x3590>
   14168:	mov	r0, #0
   1416c:	bl	10ef8 <dcgettext@plt>
   14170:	mov	r2, r0
   14174:	mov	r1, #0
   14178:	mov	r0, r1
   1417c:	bl	10f7c <error@plt>
   14180:	mov	r0, #1
   14184:	bl	12b38 <__assert_fail@plt+0x1a3c>
   14188:	mvn	r2, #0
   1418c:	mvn	r3, #0
   14190:	ldrd	r0, [sp]
   14194:	bl	13fa8 <__assert_fail@plt+0x2eac>
   14198:	b	141e0 <__assert_fail@plt+0x30e4>
   1419c:	mov	r2, #5
   141a0:	ldr	r1, [pc, #1256]	; 14690 <__assert_fail@plt+0x3594>
   141a4:	mov	r0, #0
   141a8:	bl	10ef8 <dcgettext@plt>
   141ac:	mov	r2, r0
   141b0:	mov	r1, #0
   141b4:	mov	r0, r1
   141b8:	bl	10f7c <error@plt>
   141bc:	mov	r0, #1
   141c0:	bl	12b38 <__assert_fail@plt+0x1a3c>
   141c4:	orrs	r3, r8, r9
   141c8:	beq	142a4 <__assert_fail@plt+0x31a8>
   141cc:	mov	r2, r8
   141d0:	mov	r3, r9
   141d4:	mov	r0, r8
   141d8:	mov	r1, r9
   141dc:	bl	13fa8 <__assert_fail@plt+0x2eac>
   141e0:	ldr	r3, [sp, #8]
   141e4:	ldrb	r3, [r3, #-1]
   141e8:	cmp	r3, #0
   141ec:	beq	14434 <__assert_fail@plt+0x3338>
   141f0:	mov	r8, #0
   141f4:	mov	r9, r8
   141f8:	str	r8, [sp, #12]
   141fc:	mov	r7, r8
   14200:	mov	sl, r8
   14204:	mov	r6, r8
   14208:	add	r4, r4, #1
   1420c:	sub	fp, r4, #1
   14210:	str	r4, [sp, #8]
   14214:	ldrb	r5, [r4, #-1]
   14218:	cmp	r5, #45	; 0x2d
   1421c:	beq	140b4 <__assert_fail@plt+0x2fb8>
   14220:	cmp	r5, #44	; 0x2c
   14224:	beq	14248 <__assert_fail@plt+0x314c>
   14228:	bl	10fd0 <__ctype_b_loc@plt>
   1422c:	ldr	r2, [r0]
   14230:	lsl	r3, r5, #1
   14234:	ldrh	r3, [r2, r3]
   14238:	cmp	r5, #0
   1423c:	orreq	r3, r3, #1
   14240:	tst	r3, #1
   14244:	beq	142d8 <__assert_fail@plt+0x31dc>
   14248:	cmp	r7, #0
   1424c:	beq	141c4 <__assert_fail@plt+0x30c8>
   14250:	orr	r6, r6, sl
   14254:	tst	r6, #255	; 0xff
   14258:	bne	14278 <__assert_fail@plt+0x317c>
   1425c:	ldr	r3, [sp, #16]
   14260:	cmp	r3, #0
   14264:	beq	14160 <__assert_fail@plt+0x3064>
   14268:	mov	r3, #1
   1426c:	str	r3, [sp]
   14270:	mov	r3, #0
   14274:	str	r3, [sp, #4]
   14278:	cmp	sl, #0
   1427c:	beq	14188 <__assert_fail@plt+0x308c>
   14280:	ldrd	r2, [sp]
   14284:	cmp	r3, r9
   14288:	cmpeq	r2, r8
   1428c:	bhi	1419c <__assert_fail@plt+0x30a0>
   14290:	mov	r2, r8
   14294:	mov	r3, r9
   14298:	ldrd	r0, [sp]
   1429c:	bl	13fa8 <__assert_fail@plt+0x2eac>
   142a0:	b	141e0 <__assert_fail@plt+0x30e4>
   142a4:	ldr	r3, [sp, #20]
   142a8:	tst	r3, #4
   142ac:	mov	r2, #5
   142b0:	ldrne	r1, [pc, #972]	; 14684 <__assert_fail@plt+0x3588>
   142b4:	ldreq	r1, [pc, #972]	; 14688 <__assert_fail@plt+0x358c>
   142b8:	mov	r0, #0
   142bc:	bl	10ef8 <dcgettext@plt>
   142c0:	mov	r2, r0
   142c4:	mov	r1, #0
   142c8:	mov	r0, r1
   142cc:	bl	10f7c <error@plt>
   142d0:	mov	r0, #1
   142d4:	bl	12b38 <__assert_fail@plt+0x1a3c>
   142d8:	sub	r3, r5, #48	; 0x30
   142dc:	cmp	r3, #9
   142e0:	bhi	143f0 <__assert_fail@plt+0x32f4>
   142e4:	ldr	r3, [sp, #12]
   142e8:	cmp	r3, #0
   142ec:	beq	14300 <__assert_fail@plt+0x3204>
   142f0:	ldr	r3, [pc, #924]	; 14694 <__assert_fail@plt+0x3598>
   142f4:	ldr	r3, [r3, #12]
   142f8:	cmp	r3, #0
   142fc:	bne	14308 <__assert_fail@plt+0x320c>
   14300:	ldr	r3, [pc, #908]	; 14694 <__assert_fail@plt+0x3598>
   14304:	str	fp, [r3, #12]
   14308:	cmp	r7, #0
   1430c:	moveq	r6, #1
   14310:	cmp	r7, #0
   14314:	movne	sl, r7
   14318:	add	r3, pc, #848	; 0x350
   1431c:	ldrd	r2, [r3]
   14320:	cmp	r9, r3
   14324:	cmpeq	r8, r2
   14328:	bhi	14380 <__assert_fail@plt+0x3284>
   1432c:	mov	r1, #10
   14330:	umull	r2, r3, r8, r1
   14334:	mla	r3, r1, r9, r3
   14338:	sub	r5, r5, #48	; 0x30
   1433c:	adds	r2, r2, r5
   14340:	adc	r3, r3, r5, asr #31
   14344:	cmp	r3, r9
   14348:	cmpeq	r2, r8
   1434c:	movcc	r0, #1
   14350:	movcs	r0, #0
   14354:	and	r1, r2, r3
   14358:	cmn	r1, #1
   1435c:	movne	r1, #0
   14360:	moveq	r1, #1
   14364:	orrs	r1, r0, r1
   14368:	bne	14380 <__assert_fail@plt+0x3284>
   1436c:	mov	r8, r2
   14370:	mov	r9, r3
   14374:	mov	r3, #1
   14378:	str	r3, [sp, #12]
   1437c:	b	14208 <__assert_fail@plt+0x310c>
   14380:	ldr	r3, [pc, #780]	; 14694 <__assert_fail@plt+0x3598>
   14384:	ldr	r4, [r3, #12]
   14388:	ldr	r1, [pc, #776]	; 14698 <__assert_fail@plt+0x359c>
   1438c:	mov	r0, r4
   14390:	bl	110f0 <strspn@plt>
   14394:	mov	r1, r0
   14398:	mov	r0, r4
   1439c:	bl	175f8 <__assert_fail@plt+0x64fc>
   143a0:	mov	r4, r0
   143a4:	ldr	r3, [sp, #20]
   143a8:	tst	r3, #4
   143ac:	mov	r2, #5
   143b0:	ldrne	r1, [pc, #740]	; 1469c <__assert_fail@plt+0x35a0>
   143b4:	ldreq	r1, [pc, #740]	; 146a0 <__assert_fail@plt+0x35a4>
   143b8:	mov	r0, #0
   143bc:	bl	10ef8 <dcgettext@plt>
   143c0:	mov	r5, r0
   143c4:	mov	r0, r4
   143c8:	bl	16b04 <__assert_fail@plt+0x5a08>
   143cc:	mov	r3, r0
   143d0:	mov	r2, r5
   143d4:	mov	r1, #0
   143d8:	mov	r0, r1
   143dc:	bl	10f7c <error@plt>
   143e0:	mov	r0, r4
   143e4:	bl	14b5c <__assert_fail@plt+0x3a60>
   143e8:	mov	r0, #1
   143ec:	bl	12b38 <__assert_fail@plt+0x1a3c>
   143f0:	ldr	r3, [sp, #20]
   143f4:	tst	r3, #4
   143f8:	mov	r2, #5
   143fc:	ldrne	r1, [pc, #672]	; 146a4 <__assert_fail@plt+0x35a8>
   14400:	ldreq	r1, [pc, #672]	; 146a8 <__assert_fail@plt+0x35ac>
   14404:	mov	r0, #0
   14408:	bl	10ef8 <dcgettext@plt>
   1440c:	mov	r4, r0
   14410:	mov	r0, fp
   14414:	bl	16b04 <__assert_fail@plt+0x5a08>
   14418:	mov	r3, r0
   1441c:	mov	r2, r4
   14420:	mov	r1, #0
   14424:	mov	r0, r1
   14428:	bl	10f7c <error@plt>
   1442c:	mov	r0, #1
   14430:	bl	12b38 <__assert_fail@plt+0x1a3c>
   14434:	ldr	r3, [pc, #600]	; 14694 <__assert_fail@plt+0x3598>
   14438:	ldr	r1, [r3]
   1443c:	cmp	r1, #0
   14440:	beq	14468 <__assert_fail@plt+0x336c>
   14444:	ldr	r3, [pc, #608]	; 146ac <__assert_fail@plt+0x35b0>
   14448:	mov	r2, #16
   1444c:	ldr	r0, [pc, #576]	; 14694 <__assert_fail@plt+0x3598>
   14450:	ldr	r0, [r0, #8]
   14454:	bl	110a8 <qsort@plt>
   14458:	mov	r5, #0
   1445c:	mov	fp, r5
   14460:	ldr	sl, [pc, #556]	; 14694 <__assert_fail@plt+0x3598>
   14464:	b	144a0 <__assert_fail@plt+0x33a4>
   14468:	ldr	r3, [sp, #20]
   1446c:	tst	r3, #4
   14470:	mov	r2, #5
   14474:	ldrne	r1, [pc, #564]	; 146b0 <__assert_fail@plt+0x35b4>
   14478:	ldreq	r1, [pc, #564]	; 146b4 <__assert_fail@plt+0x35b8>
   1447c:	mov	r0, #0
   14480:	bl	10ef8 <dcgettext@plt>
   14484:	mov	r2, r0
   14488:	mov	r1, #0
   1448c:	mov	r0, r1
   14490:	bl	10f7c <error@plt>
   14494:	mov	r0, #1
   14498:	bl	12b38 <__assert_fail@plt+0x1a3c>
   1449c:	add	r5, r5, #16
   144a0:	ldr	r2, [sl]
   144a4:	cmp	fp, r2
   144a8:	bcs	14558 <__assert_fail@plt+0x345c>
   144ac:	add	fp, fp, #1
   144b0:	cmp	r2, fp
   144b4:	bls	1449c <__assert_fail@plt+0x33a0>
   144b8:	ldr	r1, [sl, #8]
   144bc:	lsl	r4, fp, #4
   144c0:	add	r0, r1, r4
   144c4:	add	r3, r1, r5
   144c8:	ldrd	r8, [r3, #8]
   144cc:	ldrd	r6, [r1, r4]
   144d0:	cmp	r7, r9
   144d4:	cmpeq	r6, r8
   144d8:	bhi	1449c <__assert_fail@plt+0x33a0>
   144dc:	add	ip, r5, #32
   144e0:	str	ip, [sp, #8]
   144e4:	mvn	ip, #-268435456	; 0xf0000000
   144e8:	sub	ip, ip, fp
   144ec:	str	ip, [sp]
   144f0:	ldrd	r6, [r0, #8]
   144f4:	cmp	r7, r9
   144f8:	cmpeq	r6, r8
   144fc:	movcc	r6, r8
   14500:	movcc	r7, r9
   14504:	strd	r6, [r3, #8]
   14508:	ldr	r3, [sp]
   1450c:	add	r2, r3, r2
   14510:	lsl	r2, r2, #4
   14514:	ldr	r3, [sp, #8]
   14518:	add	r1, r1, r3
   1451c:	bl	10e98 <memmove@plt>
   14520:	ldr	r2, [sl]
   14524:	sub	r2, r2, #1
   14528:	str	r2, [sl]
   1452c:	cmp	fp, r2
   14530:	bcs	1449c <__assert_fail@plt+0x33a0>
   14534:	ldr	r1, [sl, #8]
   14538:	add	r0, r1, r4
   1453c:	add	r3, r1, r5
   14540:	ldrd	r8, [r3, #8]
   14544:	ldrd	r6, [r1, r4]
   14548:	cmp	r7, r9
   1454c:	cmpeq	r6, r8
   14550:	bls	144f0 <__assert_fail@plt+0x33f4>
   14554:	b	1449c <__assert_fail@plt+0x33a0>
   14558:	mov	r9, r2
   1455c:	ldr	r3, [sp, #20]
   14560:	tst	r3, #2
   14564:	bne	145b0 <__assert_fail@plt+0x34b4>
   14568:	ldr	r4, [pc, #292]	; 14694 <__assert_fail@plt+0x3598>
   1456c:	ldr	r1, [r4]
   14570:	add	r1, r1, #1
   14574:	str	r1, [r4]
   14578:	lsl	r1, r1, #4
   1457c:	ldr	r0, [r4, #8]
   14580:	bl	170d0 <__assert_fail@plt+0x5fd4>
   14584:	str	r0, [r4, #8]
   14588:	ldr	r3, [r4]
   1458c:	sub	r3, r3, #-268435455	; 0xf0000001
   14590:	lsl	r3, r3, #4
   14594:	add	r2, r0, r3
   14598:	mvn	r4, #0
   1459c:	mvn	r5, #0
   145a0:	strd	r4, [r2, #8]
   145a4:	strd	r4, [r0, r3]
   145a8:	add	sp, sp, #28
   145ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   145b0:	ldr	r3, [pc, #220]	; 14694 <__assert_fail@plt+0x3598>
   145b4:	ldr	r6, [r3, #8]
   145b8:	mov	r2, #0
   145bc:	str	r2, [r3, #8]
   145c0:	str	r2, [r3]
   145c4:	str	r2, [r3, #4]
   145c8:	ldrd	r2, [r6]
   145cc:	cmp	r3, #0
   145d0:	cmpeq	r2, #1
   145d4:	bls	145ec <__assert_fail@plt+0x34f0>
   145d8:	subs	r2, r2, #1
   145dc:	sbc	r3, r3, #0
   145e0:	mov	r0, #1
   145e4:	mov	r1, #0
   145e8:	bl	13fa8 <__assert_fail@plt+0x2eac>
   145ec:	cmp	r9, #1
   145f0:	bls	1463c <__assert_fail@plt+0x3540>
   145f4:	mov	r4, r6
   145f8:	mov	r5, #1
   145fc:	b	14610 <__assert_fail@plt+0x3514>
   14600:	add	r5, r5, #1
   14604:	add	r4, r4, #16
   14608:	cmp	r9, r5
   1460c:	beq	1463c <__assert_fail@plt+0x3540>
   14610:	ldrd	r0, [r4, #8]
   14614:	adds	r0, r0, #1
   14618:	adc	r1, r1, #0
   1461c:	ldrd	r2, [r4, #16]
   14620:	cmp	r1, r3
   14624:	cmpeq	r0, r2
   14628:	beq	14600 <__assert_fail@plt+0x3504>
   1462c:	subs	r2, r2, #1
   14630:	sbc	r3, r3, #0
   14634:	bl	13fa8 <__assert_fail@plt+0x2eac>
   14638:	b	14600 <__assert_fail@plt+0x3504>
   1463c:	add	r9, r6, r9, lsl #4
   14640:	ldrd	r0, [r9, #-8]
   14644:	mvn	r2, #0
   14648:	mvn	r3, #0
   1464c:	cmp	r1, r3
   14650:	cmpeq	r0, r2
   14654:	beq	14664 <__assert_fail@plt+0x3568>
   14658:	adds	r0, r0, #1
   1465c:	adc	r1, r1, #0
   14660:	bl	13fa8 <__assert_fail@plt+0x2eac>
   14664:	mov	r0, r6
   14668:	bl	14b5c <__assert_fail@plt+0x3a60>
   1466c:	b	14568 <__assert_fail@plt+0x346c>
   14670:	ldmibls	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   14674:	ldmibne	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   14678:	andeq	sl, r1, r8, lsl pc
   1467c:	andeq	sl, r1, r8, ror lr
   14680:	muleq	r1, r8, lr
   14684:	andeq	sl, r1, ip, lsr #29
   14688:	ldrdeq	sl, [r1], -ip
   1468c:	strdeq	sl, [r1], -r8
   14690:	andeq	sl, r1, ip, lsl pc
   14694:	strdeq	ip, [r2], -r4
   14698:	andeq	sl, r1, r8, lsr pc
   1469c:	andeq	sl, r1, r4, asr #30
   146a0:	andeq	sl, r1, ip, ror #30
   146a4:	andeq	sl, r1, ip, lsl #31
   146a8:			; <UNDEFINED> instruction: 0x0001afb0
   146ac:	andeq	r3, r1, r0, lsl #31
   146b0:	andeq	sl, r1, r8, asr #31
   146b4:	strdeq	sl, [r1], -r4
   146b8:	push	{r4, lr}
   146bc:	mov	r0, #1
   146c0:	bl	12b38 <__assert_fail@plt+0x1a3c>
   146c4:	pop	{r4, pc}
   146c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   146cc:	sub	sp, sp, #12
   146d0:	str	r0, [sp, #4]
   146d4:	mov	r6, r1
   146d8:	mov	fp, r2
   146dc:	mov	r8, r3
   146e0:	bl	10fe8 <strlen@plt>
   146e4:	str	r0, [sp]
   146e8:	ldr	r4, [r6]
   146ec:	cmp	r4, #0
   146f0:	beq	14798 <__assert_fail@plt+0x369c>
   146f4:	mov	r5, fp
   146f8:	mov	sl, #0
   146fc:	mvn	r9, #0
   14700:	mov	r7, sl
   14704:	b	14724 <__assert_fail@plt+0x3628>
   14708:	mov	r9, r7
   1470c:	b	1478c <__assert_fail@plt+0x3690>
   14710:	add	r7, r7, #1
   14714:	ldr	r4, [r6, #4]!
   14718:	add	r5, r5, r8
   1471c:	cmp	r4, #0
   14720:	beq	14784 <__assert_fail@plt+0x3688>
   14724:	ldr	r2, [sp]
   14728:	ldr	r1, [sp, #4]
   1472c:	mov	r0, r4
   14730:	bl	110cc <strncmp@plt>
   14734:	cmp	r0, #0
   14738:	bne	14710 <__assert_fail@plt+0x3614>
   1473c:	mov	r0, r4
   14740:	bl	10fe8 <strlen@plt>
   14744:	ldr	r3, [sp]
   14748:	cmp	r3, r0
   1474c:	beq	14708 <__assert_fail@plt+0x360c>
   14750:	cmn	r9, #1
   14754:	moveq	r9, r7
   14758:	beq	14710 <__assert_fail@plt+0x3614>
   1475c:	cmp	fp, #0
   14760:	moveq	sl, #1
   14764:	beq	14710 <__assert_fail@plt+0x3614>
   14768:	mov	r2, r8
   1476c:	mov	r1, r5
   14770:	mla	r0, r8, r9, fp
   14774:	bl	10ee0 <memcmp@plt>
   14778:	cmp	r0, #0
   1477c:	movne	sl, #1
   14780:	b	14710 <__assert_fail@plt+0x3614>
   14784:	cmp	sl, #0
   14788:	mvnne	r9, #1
   1478c:	mov	r0, r9
   14790:	add	sp, sp, #12
   14794:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14798:	mvn	r9, #0
   1479c:	b	1478c <__assert_fail@plt+0x3690>
   147a0:	push	{r4, r5, r6, lr}
   147a4:	mov	r6, r0
   147a8:	ldr	r0, [r1]
   147ac:	cmp	r0, #0
   147b0:	beq	147ec <__assert_fail@plt+0x36f0>
   147b4:	mov	r4, r1
   147b8:	mov	r5, #0
   147bc:	mov	r1, r6
   147c0:	bl	10e68 <strcmp@plt>
   147c4:	cmp	r0, #0
   147c8:	beq	147e4 <__assert_fail@plt+0x36e8>
   147cc:	add	r5, r5, #1
   147d0:	ldr	r0, [r4, #4]!
   147d4:	cmp	r0, #0
   147d8:	bne	147bc <__assert_fail@plt+0x36c0>
   147dc:	mvn	r0, #0
   147e0:	pop	{r4, r5, r6, pc}
   147e4:	mov	r0, r5
   147e8:	pop	{r4, r5, r6, pc}
   147ec:	mvn	r0, #0
   147f0:	pop	{r4, r5, r6, pc}
   147f4:	push	{r4, r5, r6, lr}
   147f8:	sub	sp, sp, #8
   147fc:	mov	r5, r0
   14800:	mov	r4, r1
   14804:	cmn	r2, #1
   14808:	mov	r2, #5
   1480c:	ldreq	r1, [pc, #76]	; 14860 <__assert_fail@plt+0x3764>
   14810:	ldrne	r1, [pc, #76]	; 14864 <__assert_fail@plt+0x3768>
   14814:	mov	r0, #0
   14818:	bl	10ef8 <dcgettext@plt>
   1481c:	mov	r6, r0
   14820:	mov	r2, r4
   14824:	mov	r1, #8
   14828:	mov	r0, #0
   1482c:	bl	16864 <__assert_fail@plt+0x5768>
   14830:	mov	r4, r0
   14834:	mov	r1, r5
   14838:	mov	r0, #1
   1483c:	bl	16af4 <__assert_fail@plt+0x59f8>
   14840:	str	r0, [sp]
   14844:	mov	r3, r4
   14848:	mov	r2, r6
   1484c:	mov	r1, #0
   14850:	mov	r0, r1
   14854:	bl	10f7c <error@plt>
   14858:	add	sp, sp, #8
   1485c:	pop	{r4, r5, r6, pc}
   14860:	andeq	fp, r1, ip, lsl r0
   14864:	andeq	fp, r1, r8, lsr r0
   14868:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1486c:	mov	r7, r0
   14870:	mov	r4, r1
   14874:	mov	r8, r2
   14878:	mov	r2, #5
   1487c:	ldr	r1, [pc, #224]	; 14964 <__assert_fail@plt+0x3868>
   14880:	mov	r0, #0
   14884:	bl	10ef8 <dcgettext@plt>
   14888:	ldr	r3, [pc, #216]	; 14968 <__assert_fail@plt+0x386c>
   1488c:	ldr	r1, [r3]
   14890:	bl	10e44 <fputs_unlocked@plt>
   14894:	ldr	r5, [r7]
   14898:	cmp	r5, #0
   1489c:	beq	1492c <__assert_fail@plt+0x3830>
   148a0:	mov	r9, #0
   148a4:	mov	r6, r9
   148a8:	ldr	sl, [pc, #184]	; 14968 <__assert_fail@plt+0x386c>
   148ac:	b	148e8 <__assert_fail@plt+0x37ec>
   148b0:	ldr	r9, [sl]
   148b4:	mov	r0, r5
   148b8:	bl	16b04 <__assert_fail@plt+0x5a08>
   148bc:	mov	r3, r0
   148c0:	ldr	r2, [pc, #164]	; 1496c <__assert_fail@plt+0x3870>
   148c4:	mov	r1, #1
   148c8:	mov	r0, r9
   148cc:	bl	1103c <__fprintf_chk@plt>
   148d0:	mov	r9, r4
   148d4:	add	r6, r6, #1
   148d8:	ldr	r5, [r7, #4]!
   148dc:	add	r4, r4, r8
   148e0:	cmp	r5, #0
   148e4:	beq	1492c <__assert_fail@plt+0x3830>
   148e8:	cmp	r6, #0
   148ec:	beq	148b0 <__assert_fail@plt+0x37b4>
   148f0:	mov	r2, r8
   148f4:	mov	r1, r4
   148f8:	mov	r0, r9
   148fc:	bl	10ee0 <memcmp@plt>
   14900:	cmp	r0, #0
   14904:	bne	148b0 <__assert_fail@plt+0x37b4>
   14908:	ldr	fp, [sl]
   1490c:	mov	r0, r5
   14910:	bl	16b04 <__assert_fail@plt+0x5a08>
   14914:	mov	r3, r0
   14918:	ldr	r2, [pc, #80]	; 14970 <__assert_fail@plt+0x3874>
   1491c:	mov	r1, #1
   14920:	mov	r0, fp
   14924:	bl	1103c <__fprintf_chk@plt>
   14928:	b	148d4 <__assert_fail@plt+0x37d8>
   1492c:	ldr	r3, [pc, #52]	; 14968 <__assert_fail@plt+0x386c>
   14930:	ldr	r0, [r3]
   14934:	ldr	r3, [r0, #20]
   14938:	ldr	r2, [r0, #24]
   1493c:	cmp	r3, r2
   14940:	bcs	14958 <__assert_fail@plt+0x385c>
   14944:	add	r2, r3, #1
   14948:	str	r2, [r0, #20]
   1494c:	mov	r2, #10
   14950:	strb	r2, [r3]
   14954:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14958:	mov	r1, #10
   1495c:	bl	11060 <__overflow@plt>
   14960:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14964:	andeq	fp, r1, r8, asr r0
   14968:	muleq	r2, r0, r1
   1496c:	andeq	fp, r1, r0, ror r0
   14970:	andeq	fp, r1, r8, ror r0
   14974:	push	{r4, r5, r6, r7, r8, lr}
   14978:	mov	r7, r0
   1497c:	mov	r5, r1
   14980:	mov	r4, r2
   14984:	mov	r6, r3
   14988:	ldrb	r3, [sp, #32]
   1498c:	cmp	r3, #0
   14990:	beq	149e0 <__assert_fail@plt+0x38e4>
   14994:	ldr	r3, [sp, #24]
   14998:	mov	r2, r6
   1499c:	mov	r1, r4
   149a0:	mov	r0, r5
   149a4:	bl	146c8 <__assert_fail@plt+0x35cc>
   149a8:	cmp	r0, #0
   149ac:	popge	{r4, r5, r6, r7, r8, pc}
   149b0:	mov	r2, r0
   149b4:	mov	r1, r5
   149b8:	mov	r0, r7
   149bc:	bl	147f4 <__assert_fail@plt+0x36f8>
   149c0:	ldr	r2, [sp, #24]
   149c4:	mov	r1, r6
   149c8:	mov	r0, r4
   149cc:	bl	14868 <__assert_fail@plt+0x376c>
   149d0:	ldr	r3, [sp, #28]
   149d4:	blx	r3
   149d8:	mvn	r0, #0
   149dc:	pop	{r4, r5, r6, r7, r8, pc}
   149e0:	mov	r1, r2
   149e4:	mov	r0, r5
   149e8:	bl	147a0 <__assert_fail@plt+0x36a4>
   149ec:	b	149a8 <__assert_fail@plt+0x38ac>
   149f0:	push	{r4, r5, r6, r7, r8, lr}
   149f4:	ldr	r6, [r1]
   149f8:	cmp	r6, #0
   149fc:	beq	14a40 <__assert_fail@plt+0x3944>
   14a00:	mov	r7, r3
   14a04:	mov	r8, r0
   14a08:	mov	r4, r2
   14a0c:	mov	r5, r1
   14a10:	mov	r2, r7
   14a14:	mov	r1, r4
   14a18:	mov	r0, r8
   14a1c:	bl	10ee0 <memcmp@plt>
   14a20:	cmp	r0, #0
   14a24:	beq	14a38 <__assert_fail@plt+0x393c>
   14a28:	ldr	r6, [r5, #4]!
   14a2c:	add	r4, r4, r7
   14a30:	cmp	r6, #0
   14a34:	bne	14a10 <__assert_fail@plt+0x3914>
   14a38:	mov	r0, r6
   14a3c:	pop	{r4, r5, r6, r7, r8, pc}
   14a40:	mov	r6, #0
   14a44:	b	14a38 <__assert_fail@plt+0x393c>
   14a48:	ldr	r3, [pc, #4]	; 14a54 <__assert_fail@plt+0x3958>
   14a4c:	str	r0, [r3]
   14a50:	bx	lr
   14a54:	andeq	ip, r2, r4, lsl #4
   14a58:	ldr	r3, [pc, #4]	; 14a64 <__assert_fail@plt+0x3968>
   14a5c:	strb	r0, [r3, #4]
   14a60:	bx	lr
   14a64:	andeq	ip, r2, r4, lsl #4
   14a68:	push	{r4, r5, r6, lr}
   14a6c:	sub	sp, sp, #8
   14a70:	ldr	r3, [pc, #200]	; 14b40 <__assert_fail@plt+0x3a44>
   14a74:	ldr	r0, [r3]
   14a78:	bl	1823c <__assert_fail@plt+0x7140>
   14a7c:	cmp	r0, #0
   14a80:	beq	14aa4 <__assert_fail@plt+0x39a8>
   14a84:	ldr	r3, [pc, #184]	; 14b44 <__assert_fail@plt+0x3a48>
   14a88:	ldrb	r3, [r3, #4]
   14a8c:	cmp	r3, #0
   14a90:	beq	14ac0 <__assert_fail@plt+0x39c4>
   14a94:	bl	11000 <__errno_location@plt>
   14a98:	ldr	r3, [r0]
   14a9c:	cmp	r3, #32
   14aa0:	bne	14ac0 <__assert_fail@plt+0x39c4>
   14aa4:	ldr	r3, [pc, #156]	; 14b48 <__assert_fail@plt+0x3a4c>
   14aa8:	ldr	r0, [r3]
   14aac:	bl	1823c <__assert_fail@plt+0x7140>
   14ab0:	cmp	r0, #0
   14ab4:	bne	14b34 <__assert_fail@plt+0x3a38>
   14ab8:	add	sp, sp, #8
   14abc:	pop	{r4, r5, r6, pc}
   14ac0:	mov	r2, #5
   14ac4:	ldr	r1, [pc, #128]	; 14b4c <__assert_fail@plt+0x3a50>
   14ac8:	mov	r0, #0
   14acc:	bl	10ef8 <dcgettext@plt>
   14ad0:	mov	r4, r0
   14ad4:	ldr	r3, [pc, #104]	; 14b44 <__assert_fail@plt+0x3a48>
   14ad8:	ldr	r5, [r3]
   14adc:	cmp	r5, #0
   14ae0:	beq	14b18 <__assert_fail@plt+0x3a1c>
   14ae4:	bl	11000 <__errno_location@plt>
   14ae8:	ldr	r6, [r0]
   14aec:	mov	r0, r5
   14af0:	bl	1697c <__assert_fail@plt+0x5880>
   14af4:	str	r4, [sp]
   14af8:	mov	r3, r0
   14afc:	ldr	r2, [pc, #76]	; 14b50 <__assert_fail@plt+0x3a54>
   14b00:	mov	r1, r6
   14b04:	mov	r0, #0
   14b08:	bl	10f7c <error@plt>
   14b0c:	ldr	r3, [pc, #64]	; 14b54 <__assert_fail@plt+0x3a58>
   14b10:	ldr	r0, [r3]
   14b14:	bl	10eb0 <_exit@plt>
   14b18:	bl	11000 <__errno_location@plt>
   14b1c:	mov	r3, r4
   14b20:	ldr	r2, [pc, #48]	; 14b58 <__assert_fail@plt+0x3a5c>
   14b24:	ldr	r1, [r0]
   14b28:	mov	r0, #0
   14b2c:	bl	10f7c <error@plt>
   14b30:	b	14b0c <__assert_fail@plt+0x3a10>
   14b34:	ldr	r3, [pc, #24]	; 14b54 <__assert_fail@plt+0x3a58>
   14b38:	ldr	r0, [r3]
   14b3c:	bl	10eb0 <_exit@plt>
   14b40:	muleq	r2, ip, r1
   14b44:	andeq	ip, r2, r4, lsl #4
   14b48:	muleq	r2, r0, r1
   14b4c:	andeq	fp, r1, r0, lsl #1
   14b50:	andeq	r9, r1, r8, lsr #11
   14b54:	andeq	ip, r2, ip, lsr r1
   14b58:	andeq	r9, r1, ip, lsr #6
   14b5c:	push	{r4, r5, lr}
   14b60:	sub	sp, sp, #12
   14b64:	mov	r5, r0
   14b68:	bl	11000 <__errno_location@plt>
   14b6c:	mov	r4, r0
   14b70:	ldr	r3, [r0]
   14b74:	str	r3, [sp]
   14b78:	str	r3, [sp, #4]
   14b7c:	mov	r3, #0
   14b80:	str	r3, [r0]
   14b84:	mov	r0, r5
   14b88:	bl	10ea4 <free@plt>
   14b8c:	ldr	r3, [r4]
   14b90:	cmp	r3, #0
   14b94:	moveq	r3, #4
   14b98:	movne	r3, #0
   14b9c:	add	r2, sp, #8
   14ba0:	add	r3, r2, r3
   14ba4:	ldr	r3, [r3, #-8]
   14ba8:	str	r3, [r4]
   14bac:	add	sp, sp, #12
   14bb0:	pop	{r4, r5, pc}
   14bb4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14bb8:	sub	sp, sp, #20
   14bbc:	str	r0, [sp, #8]
   14bc0:	mov	r4, r1
   14bc4:	mov	r6, r2
   14bc8:	mov	r9, r3
   14bcc:	ldr	r8, [sp, #60]	; 0x3c
   14bd0:	bl	10fe8 <strlen@plt>
   14bd4:	mov	fp, r0
   14bd8:	tst	r8, #2
   14bdc:	movne	r3, #0
   14be0:	strne	r3, [sp, #4]
   14be4:	beq	14c78 <__assert_fail@plt+0x3b7c>
   14be8:	mov	r5, fp
   14bec:	mov	sl, #0
   14bf0:	ldr	r3, [r9]
   14bf4:	cmp	r5, r3
   14bf8:	movhi	fp, r3
   14bfc:	movhi	r7, #0
   14c00:	bls	14f00 <__assert_fail@plt+0x3e04>
   14c04:	str	r3, [r9]
   14c08:	ldr	r3, [sp, #56]	; 0x38
   14c0c:	cmp	r3, #0
   14c10:	moveq	r5, #0
   14c14:	beq	14c34 <__assert_fail@plt+0x3b38>
   14c18:	cmp	r3, #1
   14c1c:	moveq	r5, r7
   14c20:	moveq	r7, #0
   14c24:	lsrne	r3, r7, #1
   14c28:	andne	r7, r7, #1
   14c2c:	addne	r5, r7, r3
   14c30:	movne	r7, r3
   14c34:	and	r3, r8, #4
   14c38:	cmp	r3, #0
   14c3c:	movne	r5, #0
   14c40:	and	r8, r8, #8
   14c44:	cmp	r8, #0
   14c48:	movne	r7, #0
   14c4c:	cmp	r6, #0
   14c50:	bne	14e30 <__assert_fail@plt+0x3d34>
   14c54:	add	fp, r5, fp
   14c58:	add	r7, fp, r7
   14c5c:	ldr	r0, [sp, #4]
   14c60:	bl	14b5c <__assert_fail@plt+0x3a60>
   14c64:	mov	r0, sl
   14c68:	bl	14b5c <__assert_fail@plt+0x3a60>
   14c6c:	mov	r0, r7
   14c70:	add	sp, sp, #20
   14c74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14c78:	bl	10f40 <__ctype_get_mb_cur_max@plt>
   14c7c:	cmp	r0, #1
   14c80:	bls	14ecc <__assert_fail@plt+0x3dd0>
   14c84:	mov	r2, #0
   14c88:	ldr	r1, [sp, #8]
   14c8c:	mov	r0, r2
   14c90:	bl	1109c <mbstowcs@plt>
   14c94:	cmn	r0, #1
   14c98:	beq	14dc4 <__assert_fail@plt+0x3cc8>
   14c9c:	add	sl, r0, #1
   14ca0:	lsl	r5, sl, #2
   14ca4:	mov	r0, r5
   14ca8:	bl	181bc <__assert_fail@plt+0x70c0>
   14cac:	subs	r3, r0, #0
   14cb0:	str	r3, [sp, #4]
   14cb4:	beq	14de0 <__assert_fail@plt+0x3ce4>
   14cb8:	mov	r2, sl
   14cbc:	ldr	r1, [sp, #8]
   14cc0:	ldr	r0, [sp, #4]
   14cc4:	bl	1109c <mbstowcs@plt>
   14cc8:	cmp	r0, #0
   14ccc:	beq	14be8 <__assert_fail@plt+0x3aec>
   14cd0:	ldr	r2, [sp, #4]
   14cd4:	add	r5, r2, r5
   14cd8:	mov	r3, #0
   14cdc:	str	r3, [r5, #-4]
   14ce0:	ldr	r0, [r2]
   14ce4:	cmp	r0, #0
   14ce8:	beq	14ed8 <__assert_fail@plt+0x3ddc>
   14cec:	mov	r5, r2
   14cf0:	mov	r7, #0
   14cf4:	bl	10f1c <iswprint@plt>
   14cf8:	cmp	r0, #0
   14cfc:	ldreq	r3, [pc, #532]	; 14f18 <__assert_fail@plt+0x3e1c>
   14d00:	streq	r3, [r5]
   14d04:	moveq	r7, #1
   14d08:	ldr	r0, [r5, #4]!
   14d0c:	cmp	r0, #0
   14d10:	bne	14cf4 <__assert_fail@plt+0x3bf8>
   14d14:	mov	r1, sl
   14d18:	ldr	r0, [sp, #4]
   14d1c:	bl	11078 <wcswidth@plt>
   14d20:	mov	r5, r0
   14d24:	cmp	r7, #0
   14d28:	beq	14ee8 <__assert_fail@plt+0x3dec>
   14d2c:	mov	r2, #0
   14d30:	ldr	r1, [sp, #4]
   14d34:	mov	r0, r2
   14d38:	bl	10f70 <wcstombs@plt>
   14d3c:	add	r3, r0, #1
   14d40:	str	r3, [sp, #12]
   14d44:	ldr	r0, [sp, #12]
   14d48:	bl	181bc <__assert_fail@plt+0x70c0>
   14d4c:	subs	sl, r0, #0
   14d50:	beq	14df4 <__assert_fail@plt+0x3cf8>
   14d54:	ldr	fp, [r9]
   14d58:	ldr	r3, [sp, #4]
   14d5c:	ldr	r0, [r3]
   14d60:	cmp	r0, #0
   14d64:	beq	14e04 <__assert_fail@plt+0x3d08>
   14d68:	mov	r7, r3
   14d6c:	mov	r5, #0
   14d70:	bl	10e8c <wcwidth@plt>
   14d74:	cmn	r0, #1
   14d78:	ldreq	r3, [pc, #408]	; 14f18 <__assert_fail@plt+0x3e1c>
   14d7c:	streq	r3, [r7]
   14d80:	moveq	r0, #1
   14d84:	add	r3, r0, r5
   14d88:	cmp	fp, r3
   14d8c:	bcc	14da0 <__assert_fail@plt+0x3ca4>
   14d90:	ldr	r0, [r7, #4]!
   14d94:	mov	r5, r3
   14d98:	cmp	r0, #0
   14d9c:	bne	14d70 <__assert_fail@plt+0x3c74>
   14da0:	mov	r3, #0
   14da4:	str	r3, [r7]
   14da8:	ldr	r2, [sp, #12]
   14dac:	ldr	r1, [sp, #4]
   14db0:	mov	r0, sl
   14db4:	bl	10f70 <wcstombs@plt>
   14db8:	mov	fp, r0
   14dbc:	str	sl, [sp, #8]
   14dc0:	b	14bf0 <__assert_fail@plt+0x3af4>
   14dc4:	tst	r8, #1
   14dc8:	bne	14e10 <__assert_fail@plt+0x3d14>
   14dcc:	mov	r3, #0
   14dd0:	str	r3, [sp, #4]
   14dd4:	mov	sl, r3
   14dd8:	mvn	r7, #0
   14ddc:	b	14c5c <__assert_fail@plt+0x3b60>
   14de0:	tst	r8, #1
   14de4:	bne	14e24 <__assert_fail@plt+0x3d28>
   14de8:	mov	sl, #0
   14dec:	mvn	r7, #0
   14df0:	b	14c5c <__assert_fail@plt+0x3b60>
   14df4:	tst	r8, #1
   14df8:	mvneq	r7, #0
   14dfc:	beq	14c5c <__assert_fail@plt+0x3b60>
   14e00:	b	14bf0 <__assert_fail@plt+0x3af4>
   14e04:	ldr	r7, [sp, #4]
   14e08:	mov	r5, #0
   14e0c:	b	14da0 <__assert_fail@plt+0x3ca4>
   14e10:	mov	r5, fp
   14e14:	mov	r3, #0
   14e18:	str	r3, [sp, #4]
   14e1c:	mov	sl, r3
   14e20:	b	14bf0 <__assert_fail@plt+0x3af4>
   14e24:	mov	r5, fp
   14e28:	mov	sl, #0
   14e2c:	b	14bf0 <__assert_fail@plt+0x3af4>
   14e30:	sub	r6, r6, #1
   14e34:	add	r6, r4, r6
   14e38:	sub	r3, r5, #1
   14e3c:	cmp	r5, #0
   14e40:	cmpne	r4, r6
   14e44:	bcs	14e6c <__assert_fail@plt+0x3d70>
   14e48:	mov	r1, #32
   14e4c:	strb	r1, [r4], #1
   14e50:	cmp	r3, #0
   14e54:	cmpne	r6, r4
   14e58:	movhi	r2, #1
   14e5c:	movls	r2, #0
   14e60:	sub	r3, r3, #1
   14e64:	cmp	r2, #0
   14e68:	bne	14e4c <__assert_fail@plt+0x3d50>
   14e6c:	mov	r3, #0
   14e70:	strb	r3, [r4]
   14e74:	sub	r2, r6, r4
   14e78:	cmp	r2, fp
   14e7c:	movcs	r2, fp
   14e80:	ldr	r1, [sp, #8]
   14e84:	mov	r0, r4
   14e88:	bl	10fb8 <mempcpy@plt>
   14e8c:	sub	r3, r7, #1
   14e90:	cmp	r7, #0
   14e94:	cmpne	r6, r0
   14e98:	bls	14ec0 <__assert_fail@plt+0x3dc4>
   14e9c:	mov	r1, #32
   14ea0:	strb	r1, [r0], #1
   14ea4:	cmp	r3, #0
   14ea8:	cmpne	r6, r0
   14eac:	movhi	r2, #1
   14eb0:	movls	r2, #0
   14eb4:	sub	r3, r3, #1
   14eb8:	cmp	r2, #0
   14ebc:	bne	14ea0 <__assert_fail@plt+0x3da4>
   14ec0:	mov	r3, #0
   14ec4:	strb	r3, [r0]
   14ec8:	b	14c54 <__assert_fail@plt+0x3b58>
   14ecc:	mov	r3, #0
   14ed0:	str	r3, [sp, #4]
   14ed4:	b	14be8 <__assert_fail@plt+0x3aec>
   14ed8:	mov	r1, sl
   14edc:	ldr	r0, [sp, #4]
   14ee0:	bl	11078 <wcswidth@plt>
   14ee4:	mov	r5, r0
   14ee8:	ldr	r3, [r9]
   14eec:	cmp	r3, r5
   14ef0:	addcc	r3, fp, #1
   14ef4:	strcc	r3, [sp, #12]
   14ef8:	bcc	14d44 <__assert_fail@plt+0x3c48>
   14efc:	mov	sl, #0
   14f00:	cmp	r5, r3
   14f04:	movcs	r3, r5
   14f08:	movcs	r7, #0
   14f0c:	subcc	r7, r3, r5
   14f10:	movcc	r3, r5
   14f14:	b	14c04 <__assert_fail@plt+0x3b08>
   14f18:	strdeq	pc, [r0], -sp
   14f1c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14f20:	sub	sp, sp, #12
   14f24:	mov	fp, r0
   14f28:	mov	r6, r1
   14f2c:	mov	sl, r2
   14f30:	mov	r9, r3
   14f34:	ldr	r8, [r1]
   14f38:	mov	r0, r8
   14f3c:	mov	r7, #0
   14f40:	add	r4, r0, #1
   14f44:	mov	r1, r4
   14f48:	mov	r0, r7
   14f4c:	bl	181ec <__assert_fail@plt+0x70f0>
   14f50:	subs	r5, r0, #0
   14f54:	beq	14f90 <__assert_fail@plt+0x3e94>
   14f58:	str	r8, [r6]
   14f5c:	str	r9, [sp, #4]
   14f60:	str	sl, [sp]
   14f64:	mov	r3, r6
   14f68:	mov	r2, r4
   14f6c:	mov	r1, r5
   14f70:	mov	r0, fp
   14f74:	bl	14bb4 <__assert_fail@plt+0x3ab8>
   14f78:	cmn	r0, #1
   14f7c:	beq	14fa4 <__assert_fail@plt+0x3ea8>
   14f80:	mov	r7, r5
   14f84:	cmp	r4, r0
   14f88:	bls	14f40 <__assert_fail@plt+0x3e44>
   14f8c:	b	14f98 <__assert_fail@plt+0x3e9c>
   14f90:	mov	r0, r7
   14f94:	bl	14b5c <__assert_fail@plt+0x3a60>
   14f98:	mov	r0, r5
   14f9c:	add	sp, sp, #12
   14fa0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14fa4:	mov	r0, r5
   14fa8:	bl	14b5c <__assert_fail@plt+0x3a60>
   14fac:	mov	r5, #0
   14fb0:	b	14f98 <__assert_fail@plt+0x3e9c>
   14fb4:	push	{r4, r5, r6, lr}
   14fb8:	subs	r4, r0, #0
   14fbc:	beq	15034 <__assert_fail@plt+0x3f38>
   14fc0:	mov	r1, #47	; 0x2f
   14fc4:	mov	r0, r4
   14fc8:	bl	11084 <strrchr@plt>
   14fcc:	cmp	r0, #0
   14fd0:	addne	r5, r0, #1
   14fd4:	moveq	r5, r4
   14fd8:	sub	r3, r5, r4
   14fdc:	cmp	r3, #6
   14fe0:	ble	15020 <__assert_fail@plt+0x3f24>
   14fe4:	mov	r2, #7
   14fe8:	ldr	r1, [pc, #96]	; 15050 <__assert_fail@plt+0x3f54>
   14fec:	sub	r0, r5, #7
   14ff0:	bl	110cc <strncmp@plt>
   14ff4:	cmp	r0, #0
   14ff8:	bne	15020 <__assert_fail@plt+0x3f24>
   14ffc:	mov	r2, #3
   15000:	ldr	r1, [pc, #76]	; 15054 <__assert_fail@plt+0x3f58>
   15004:	mov	r0, r5
   15008:	bl	110cc <strncmp@plt>
   1500c:	cmp	r0, #0
   15010:	addeq	r4, r5, #3
   15014:	ldreq	r3, [pc, #60]	; 15058 <__assert_fail@plt+0x3f5c>
   15018:	streq	r4, [r3]
   1501c:	movne	r4, r5
   15020:	ldr	r3, [pc, #52]	; 1505c <__assert_fail@plt+0x3f60>
   15024:	str	r4, [r3]
   15028:	ldr	r3, [pc, #48]	; 15060 <__assert_fail@plt+0x3f64>
   1502c:	str	r4, [r3]
   15030:	pop	{r4, r5, r6, pc}
   15034:	ldr	r3, [pc, #40]	; 15064 <__assert_fail@plt+0x3f68>
   15038:	ldr	r3, [r3]
   1503c:	mov	r2, #55	; 0x37
   15040:	mov	r1, #1
   15044:	ldr	r0, [pc, #28]	; 15068 <__assert_fail@plt+0x3f6c>
   15048:	bl	10f28 <fwrite@plt>
   1504c:	bl	110d8 <abort@plt>
   15050:	andeq	fp, r1, r4, asr #1
   15054:	andeq	fp, r1, ip, asr #1
   15058:	andeq	ip, r2, r0, lsl #3
   1505c:	andeq	ip, r2, ip, lsl #4
   15060:	andeq	ip, r2, r4, lsl #3
   15064:	muleq	r2, r0, r1
   15068:	andeq	fp, r1, ip, lsl #1
   1506c:	push	{r4, r5, r6, lr}
   15070:	mov	r5, r0
   15074:	mov	r4, r1
   15078:	mov	r2, #48	; 0x30
   1507c:	mov	r1, #0
   15080:	bl	11018 <memset@plt>
   15084:	cmp	r4, #10
   15088:	beq	15098 <__assert_fail@plt+0x3f9c>
   1508c:	str	r4, [r5]
   15090:	mov	r0, r5
   15094:	pop	{r4, r5, r6, pc}
   15098:	bl	110d8 <abort@plt>
   1509c:	push	{r4, r5, r6, lr}
   150a0:	mov	r4, r0
   150a4:	mov	r5, r1
   150a8:	mov	r2, #5
   150ac:	mov	r1, r0
   150b0:	mov	r0, #0
   150b4:	bl	10ef8 <dcgettext@plt>
   150b8:	cmp	r4, r0
   150bc:	popne	{r4, r5, r6, pc}
   150c0:	bl	18468 <__assert_fail@plt+0x736c>
   150c4:	ldrb	r3, [r0]
   150c8:	bic	r3, r3, #32
   150cc:	cmp	r3, #85	; 0x55
   150d0:	beq	1514c <__assert_fail@plt+0x4050>
   150d4:	cmp	r3, #71	; 0x47
   150d8:	bne	151a8 <__assert_fail@plt+0x40ac>
   150dc:	ldrb	r3, [r0, #1]
   150e0:	bic	r3, r3, #32
   150e4:	cmp	r3, #66	; 0x42
   150e8:	bne	151a8 <__assert_fail@plt+0x40ac>
   150ec:	ldrb	r3, [r0, #2]
   150f0:	cmp	r3, #49	; 0x31
   150f4:	bne	151a8 <__assert_fail@plt+0x40ac>
   150f8:	ldrb	r3, [r0, #3]
   150fc:	cmp	r3, #56	; 0x38
   15100:	bne	151a8 <__assert_fail@plt+0x40ac>
   15104:	ldrb	r3, [r0, #4]
   15108:	cmp	r3, #48	; 0x30
   1510c:	bne	151a8 <__assert_fail@plt+0x40ac>
   15110:	ldrb	r3, [r0, #5]
   15114:	cmp	r3, #51	; 0x33
   15118:	bne	151a8 <__assert_fail@plt+0x40ac>
   1511c:	ldrb	r3, [r0, #6]
   15120:	cmp	r3, #48	; 0x30
   15124:	bne	151a8 <__assert_fail@plt+0x40ac>
   15128:	ldrb	r3, [r0, #7]
   1512c:	cmp	r3, #0
   15130:	bne	151a8 <__assert_fail@plt+0x40ac>
   15134:	ldrb	r2, [r4]
   15138:	ldr	r3, [pc, #124]	; 151bc <__assert_fail@plt+0x40c0>
   1513c:	ldr	r0, [pc, #124]	; 151c0 <__assert_fail@plt+0x40c4>
   15140:	cmp	r2, #96	; 0x60
   15144:	movne	r0, r3
   15148:	pop	{r4, r5, r6, pc}
   1514c:	ldrb	r3, [r0, #1]
   15150:	bic	r3, r3, #32
   15154:	cmp	r3, #84	; 0x54
   15158:	bne	151a8 <__assert_fail@plt+0x40ac>
   1515c:	ldrb	r3, [r0, #2]
   15160:	bic	r3, r3, #32
   15164:	cmp	r3, #70	; 0x46
   15168:	bne	151a8 <__assert_fail@plt+0x40ac>
   1516c:	ldrb	r3, [r0, #3]
   15170:	cmp	r3, #45	; 0x2d
   15174:	bne	151a8 <__assert_fail@plt+0x40ac>
   15178:	ldrb	r3, [r0, #4]
   1517c:	cmp	r3, #56	; 0x38
   15180:	bne	151a8 <__assert_fail@plt+0x40ac>
   15184:	ldrb	r3, [r0, #5]
   15188:	cmp	r3, #0
   1518c:	bne	151a8 <__assert_fail@plt+0x40ac>
   15190:	ldrb	r2, [r4]
   15194:	ldr	r3, [pc, #40]	; 151c4 <__assert_fail@plt+0x40c8>
   15198:	ldr	r0, [pc, #40]	; 151c8 <__assert_fail@plt+0x40cc>
   1519c:	cmp	r2, #96	; 0x60
   151a0:	movne	r0, r3
   151a4:	pop	{r4, r5, r6, pc}
   151a8:	ldr	r3, [pc, #28]	; 151cc <__assert_fail@plt+0x40d0>
   151ac:	ldr	r0, [pc, #28]	; 151d0 <__assert_fail@plt+0x40d4>
   151b0:	cmp	r5, #9
   151b4:	movne	r0, r3
   151b8:	pop	{r4, r5, r6, pc}
   151bc:	andeq	fp, r1, r8, lsr #2
   151c0:	andeq	fp, r1, r4, lsr r1
   151c4:	andeq	fp, r1, r4, lsr #2
   151c8:	andeq	fp, r1, r8, lsr r1
   151cc:	andeq	fp, r1, ip, lsr #2
   151d0:	andeq	fp, r1, r0, lsr r1
   151d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   151d8:	sub	sp, sp, #116	; 0x74
   151dc:	str	r0, [sp, #36]	; 0x24
   151e0:	mov	sl, r1
   151e4:	str	r2, [sp, #52]	; 0x34
   151e8:	str	r3, [sp, #28]
   151ec:	ldr	r8, [sp, #152]	; 0x98
   151f0:	bl	10f40 <__ctype_get_mb_cur_max@plt>
   151f4:	str	r0, [sp, #84]	; 0x54
   151f8:	ldr	r3, [sp, #156]	; 0x9c
   151fc:	lsr	r3, r3, #1
   15200:	and	r3, r3, #1
   15204:	str	r3, [sp, #32]
   15208:	mov	r3, #1
   1520c:	str	r3, [sp, #40]	; 0x28
   15210:	mov	r3, #0
   15214:	str	r3, [sp, #80]	; 0x50
   15218:	str	r3, [sp, #44]	; 0x2c
   1521c:	str	r3, [sp, #48]	; 0x30
   15220:	str	r3, [sp, #60]	; 0x3c
   15224:	str	r3, [sp, #72]	; 0x48
   15228:	str	r3, [sp, #76]	; 0x4c
   1522c:	mov	r7, sl
   15230:	mov	sl, r8
   15234:	cmp	sl, #10
   15238:	ldrls	pc, [pc, sl, lsl #2]
   1523c:	b	153f4 <__assert_fail@plt+0x42f8>
   15240:	andeq	r5, r1, r4, lsr #5
   15244:	andeq	r5, r1, r4, ror r2
   15248:	ldrdeq	r5, [r1], -r0
   1524c:	andeq	r5, r1, ip, ror #4
   15250:	andeq	r5, r1, r4, lsl #7
   15254:			; <UNDEFINED> instruction: 0x000152b4
   15258:	andeq	r6, r1, r0, lsr #6
   1525c:	strdeq	r5, [r1], -r8
   15260:	strdeq	r5, [r1], -r0
   15264:	strdeq	r5, [r1], -r0
   15268:	strdeq	r5, [r1], -r0
   1526c:	mov	r3, #1
   15270:	str	r3, [sp, #48]	; 0x30
   15274:	mov	r3, #1
   15278:	str	r3, [sp, #32]
   1527c:	str	r3, [sp, #60]	; 0x3c
   15280:	ldr	r3, [pc, #4068]	; 1626c <__assert_fail@plt+0x5170>
   15284:	str	r3, [sp, #72]	; 0x48
   15288:	mov	fp, #0
   1528c:	mov	sl, #2
   15290:	mov	r6, #0
   15294:	ldr	r3, [sp, #48]	; 0x30
   15298:	eor	r3, r3, #1
   1529c:	str	r3, [sp, #68]	; 0x44
   152a0:	b	15b88 <__assert_fail@plt+0x4a8c>
   152a4:	mov	r3, #0
   152a8:	str	r3, [sp, #32]
   152ac:	mov	fp, r3
   152b0:	b	15290 <__assert_fail@plt+0x4194>
   152b4:	ldr	r3, [sp, #32]
   152b8:	cmp	r3, #0
   152bc:	bne	15410 <__assert_fail@plt+0x4314>
   152c0:	cmp	r7, #0
   152c4:	beq	15430 <__assert_fail@plt+0x4334>
   152c8:	ldr	r3, [sp, #36]	; 0x24
   152cc:	mov	r2, #34	; 0x22
   152d0:	strb	r2, [r3]
   152d4:	mov	r3, #1
   152d8:	str	r3, [sp, #48]	; 0x30
   152dc:	str	r3, [sp, #60]	; 0x3c
   152e0:	ldr	r3, [pc, #3980]	; 16274 <__assert_fail@plt+0x5178>
   152e4:	str	r3, [sp, #72]	; 0x48
   152e8:	mov	fp, #1
   152ec:	b	15290 <__assert_fail@plt+0x4194>
   152f0:	cmp	sl, #10
   152f4:	beq	15318 <__assert_fail@plt+0x421c>
   152f8:	mov	r1, sl
   152fc:	ldr	r0, [pc, #3948]	; 16270 <__assert_fail@plt+0x5174>
   15300:	bl	1509c <__assert_fail@plt+0x3fa0>
   15304:	str	r0, [sp, #164]	; 0xa4
   15308:	mov	r1, sl
   1530c:	ldr	r0, [pc, #3928]	; 1626c <__assert_fail@plt+0x5170>
   15310:	bl	1509c <__assert_fail@plt+0x3fa0>
   15314:	str	r0, [sp, #168]	; 0xa8
   15318:	ldr	r3, [sp, #32]
   1531c:	cmp	r3, #0
   15320:	movne	fp, #0
   15324:	bne	1535c <__assert_fail@plt+0x4260>
   15328:	ldr	r3, [sp, #164]	; 0xa4
   1532c:	ldrb	r3, [r3]
   15330:	cmp	r3, #0
   15334:	beq	1537c <__assert_fail@plt+0x4280>
   15338:	ldr	r2, [sp, #164]	; 0xa4
   1533c:	mov	fp, #0
   15340:	ldr	r1, [sp, #36]	; 0x24
   15344:	cmp	r7, fp
   15348:	strbhi	r3, [r1, fp]
   1534c:	add	fp, fp, #1
   15350:	ldrb	r3, [r2, #1]!
   15354:	cmp	r3, #0
   15358:	bne	15344 <__assert_fail@plt+0x4248>
   1535c:	ldr	r0, [sp, #168]	; 0xa8
   15360:	bl	10fe8 <strlen@plt>
   15364:	str	r0, [sp, #60]	; 0x3c
   15368:	ldr	r3, [sp, #168]	; 0xa8
   1536c:	str	r3, [sp, #72]	; 0x48
   15370:	mov	r3, #1
   15374:	str	r3, [sp, #48]	; 0x30
   15378:	b	15290 <__assert_fail@plt+0x4194>
   1537c:	mov	fp, #0
   15380:	b	1535c <__assert_fail@plt+0x4260>
   15384:	ldr	r3, [sp, #32]
   15388:	cmp	r3, #0
   1538c:	bne	1544c <__assert_fail@plt+0x4350>
   15390:	mov	r3, #1
   15394:	str	r3, [sp, #48]	; 0x30
   15398:	cmp	r7, #0
   1539c:	beq	15468 <__assert_fail@plt+0x436c>
   153a0:	ldr	r3, [sp, #36]	; 0x24
   153a4:	mov	r2, #39	; 0x27
   153a8:	strb	r2, [r3]
   153ac:	mov	r3, #0
   153b0:	str	r3, [sp, #32]
   153b4:	mov	r3, #1
   153b8:	str	r3, [sp, #60]	; 0x3c
   153bc:	ldr	r3, [pc, #3752]	; 1626c <__assert_fail@plt+0x5170>
   153c0:	str	r3, [sp, #72]	; 0x48
   153c4:	mov	fp, #1
   153c8:	mov	sl, #2
   153cc:	b	15290 <__assert_fail@plt+0x4194>
   153d0:	ldr	r3, [sp, #32]
   153d4:	cmp	r3, #0
   153d8:	beq	15398 <__assert_fail@plt+0x429c>
   153dc:	mov	r3, #1
   153e0:	str	r3, [sp, #60]	; 0x3c
   153e4:	ldr	r3, [pc, #3712]	; 1626c <__assert_fail@plt+0x5170>
   153e8:	str	r3, [sp, #72]	; 0x48
   153ec:	mov	fp, #0
   153f0:	b	15290 <__assert_fail@plt+0x4194>
   153f4:	bl	110d8 <abort@plt>
   153f8:	mov	r3, #0
   153fc:	str	r3, [sp, #32]
   15400:	mov	r3, #1
   15404:	str	r3, [sp, #48]	; 0x30
   15408:	mov	fp, #0
   1540c:	b	15290 <__assert_fail@plt+0x4194>
   15410:	ldr	r3, [sp, #32]
   15414:	str	r3, [sp, #48]	; 0x30
   15418:	mov	r3, #1
   1541c:	str	r3, [sp, #60]	; 0x3c
   15420:	ldr	r3, [pc, #3660]	; 16274 <__assert_fail@plt+0x5178>
   15424:	str	r3, [sp, #72]	; 0x48
   15428:	mov	fp, #0
   1542c:	b	15290 <__assert_fail@plt+0x4194>
   15430:	mov	r3, #1
   15434:	str	r3, [sp, #48]	; 0x30
   15438:	str	r3, [sp, #60]	; 0x3c
   1543c:	ldr	r3, [pc, #3632]	; 16274 <__assert_fail@plt+0x5178>
   15440:	str	r3, [sp, #72]	; 0x48
   15444:	mov	fp, #1
   15448:	b	15290 <__assert_fail@plt+0x4194>
   1544c:	mov	r3, #1
   15450:	str	r3, [sp, #60]	; 0x3c
   15454:	ldr	r3, [pc, #3600]	; 1626c <__assert_fail@plt+0x5170>
   15458:	str	r3, [sp, #72]	; 0x48
   1545c:	mov	fp, #0
   15460:	mov	sl, #2
   15464:	b	15290 <__assert_fail@plt+0x4194>
   15468:	mov	r3, #0
   1546c:	str	r3, [sp, #32]
   15470:	mov	r3, #1
   15474:	str	r3, [sp, #60]	; 0x3c
   15478:	ldr	r3, [pc, #3564]	; 1626c <__assert_fail@plt+0x5170>
   1547c:	str	r3, [sp, #72]	; 0x48
   15480:	mov	fp, #1
   15484:	mov	sl, #2
   15488:	b	15290 <__assert_fail@plt+0x4194>
   1548c:	mov	r3, #0
   15490:	str	r3, [sp, #56]	; 0x38
   15494:	ldr	r3, [sp, #52]	; 0x34
   15498:	add	r2, r3, r6
   1549c:	str	r2, [sp, #64]	; 0x40
   154a0:	ldrb	r4, [r3, r6]
   154a4:	cmp	r4, #126	; 0x7e
   154a8:	ldrls	pc, [pc, r4, lsl #2]
   154ac:	b	15ce8 <__assert_fail@plt+0x4bec>
   154b0:	andeq	r5, r1, r8, asr #13
   154b4:	andeq	r5, r1, r8, ror #25
   154b8:	andeq	r5, r1, r8, ror #25
   154bc:	andeq	r5, r1, r8, ror #25
   154c0:	andeq	r5, r1, r8, ror #25
   154c4:	andeq	r5, r1, r8, ror #25
   154c8:	andeq	r5, r1, r8, ror #25
   154cc:	andeq	r5, r1, r4, lsr #20
   154d0:	andeq	r5, r1, r0, asr #13
   154d4:	ldrdeq	r5, [r1], -ip
   154d8:	ldrdeq	r5, [r1], -r4
   154dc:	andeq	r5, r1, r4, asr #18
   154e0:	andeq	r5, r1, ip, lsr r9
   154e4:			; <UNDEFINED> instruction: 0x000156b8
   154e8:	andeq	r5, r1, r8, ror #25
   154ec:	andeq	r5, r1, r8, ror #25
   154f0:	andeq	r5, r1, r8, ror #25
   154f4:	andeq	r5, r1, r8, ror #25
   154f8:	andeq	r5, r1, r8, ror #25
   154fc:	andeq	r5, r1, r8, ror #25
   15500:	andeq	r5, r1, r8, ror #25
   15504:	andeq	r5, r1, r8, ror #25
   15508:	andeq	r5, r1, r8, ror #25
   1550c:	andeq	r5, r1, r8, ror #25
   15510:	andeq	r5, r1, r8, ror #25
   15514:	andeq	r5, r1, r8, ror #25
   15518:	andeq	r5, r1, r8, ror #25
   1551c:	andeq	r5, r1, r8, ror #25
   15520:	andeq	r5, r1, r8, ror #25
   15524:	andeq	r5, r1, r8, ror #25
   15528:	andeq	r5, r1, r8, ror #25
   1552c:	andeq	r5, r1, r8, ror #25
   15530:	andeq	r5, r1, r8, ror sl
   15534:	andeq	r5, r1, r4, ror sl
   15538:	andeq	r5, r1, r4, ror sl
   1553c:	andeq	r5, r1, ip, asr #20
   15540:	andeq	r5, r1, r4, ror sl
   15544:	strheq	r6, [r1], -ip
   15548:	andeq	r5, r1, r4, ror sl
   1554c:	andeq	r5, r1, ip, asr #24
   15550:	andeq	r5, r1, r4, ror sl
   15554:	andeq	r5, r1, r4, ror sl
   15558:	andeq	r5, r1, r4, ror sl
   1555c:	strheq	r6, [r1], -ip
   15560:	strheq	r6, [r1], -ip
   15564:	strheq	r6, [r1], -ip
   15568:	strheq	r6, [r1], -ip
   1556c:	strheq	r6, [r1], -ip
   15570:	strheq	r6, [r1], -ip
   15574:	strheq	r6, [r1], -ip
   15578:	strheq	r6, [r1], -ip
   1557c:	strheq	r6, [r1], -ip
   15580:	strheq	r6, [r1], -ip
   15584:	strheq	r6, [r1], -ip
   15588:	strheq	r6, [r1], -ip
   1558c:	strheq	r6, [r1], -ip
   15590:	strheq	r6, [r1], -ip
   15594:	strheq	r6, [r1], -ip
   15598:	strheq	r6, [r1], -ip
   1559c:	andeq	r5, r1, r4, ror sl
   155a0:	andeq	r5, r1, r4, ror sl
   155a4:	andeq	r5, r1, r4, ror sl
   155a8:	andeq	r5, r1, r4, ror sl
   155ac:	ldrdeq	r5, [r1], -r0
   155b0:	andeq	r5, r1, r8, ror #25
   155b4:	strheq	r6, [r1], -ip
   155b8:	strheq	r6, [r1], -ip
   155bc:	strheq	r6, [r1], -ip
   155c0:	strheq	r6, [r1], -ip
   155c4:	strheq	r6, [r1], -ip
   155c8:	strheq	r6, [r1], -ip
   155cc:	strheq	r6, [r1], -ip
   155d0:	strheq	r6, [r1], -ip
   155d4:	strheq	r6, [r1], -ip
   155d8:	strheq	r6, [r1], -ip
   155dc:	strheq	r6, [r1], -ip
   155e0:	strheq	r6, [r1], -ip
   155e4:	strheq	r6, [r1], -ip
   155e8:	strheq	r6, [r1], -ip
   155ec:	strheq	r6, [r1], -ip
   155f0:	strheq	r6, [r1], -ip
   155f4:	strheq	r6, [r1], -ip
   155f8:	strheq	r6, [r1], -ip
   155fc:	strheq	r6, [r1], -ip
   15600:	strheq	r6, [r1], -ip
   15604:	strheq	r6, [r1], -ip
   15608:	strheq	r6, [r1], -ip
   1560c:	strheq	r6, [r1], -ip
   15610:	strheq	r6, [r1], -ip
   15614:	strheq	r6, [r1], -ip
   15618:	strheq	r6, [r1], -ip
   1561c:	andeq	r5, r1, r4, ror sl
   15620:	andeq	r5, r1, ip, asr #18
   15624:	strheq	r6, [r1], -ip
   15628:	andeq	r5, r1, r4, ror sl
   1562c:	strheq	r6, [r1], -ip
   15630:	andeq	r5, r1, r4, ror sl
   15634:	strheq	r6, [r1], -ip
   15638:	strheq	r6, [r1], -ip
   1563c:	strheq	r6, [r1], -ip
   15640:	strheq	r6, [r1], -ip
   15644:	strheq	r6, [r1], -ip
   15648:	strheq	r6, [r1], -ip
   1564c:	strheq	r6, [r1], -ip
   15650:	strheq	r6, [r1], -ip
   15654:	strheq	r6, [r1], -ip
   15658:	strheq	r6, [r1], -ip
   1565c:	strheq	r6, [r1], -ip
   15660:	strheq	r6, [r1], -ip
   15664:	strheq	r6, [r1], -ip
   15668:	strheq	r6, [r1], -ip
   1566c:	strheq	r6, [r1], -ip
   15670:	strheq	r6, [r1], -ip
   15674:	strheq	r6, [r1], -ip
   15678:	strheq	r6, [r1], -ip
   1567c:	strheq	r6, [r1], -ip
   15680:	strheq	r6, [r1], -ip
   15684:	strheq	r6, [r1], -ip
   15688:	strheq	r6, [r1], -ip
   1568c:	strheq	r6, [r1], -ip
   15690:	strheq	r6, [r1], -ip
   15694:	strheq	r6, [r1], -ip
   15698:	strheq	r6, [r1], -ip
   1569c:	andeq	r5, r1, ip, lsr #20
   156a0:	andeq	r5, r1, r4, ror sl
   156a4:	andeq	r5, r1, ip, lsr #20
   156a8:	andeq	r5, r1, ip, asr #20
   156ac:	mov	r3, #0
   156b0:	str	r3, [sp, #56]	; 0x38
   156b4:	b	15494 <__assert_fail@plt+0x4398>
   156b8:	mov	r3, #114	; 0x72
   156bc:	b	159e0 <__assert_fail@plt+0x48e4>
   156c0:	mov	r3, #98	; 0x62
   156c4:	b	159f8 <__assert_fail@plt+0x48fc>
   156c8:	ldr	r3, [sp, #48]	; 0x30
   156cc:	cmp	r3, #0
   156d0:	beq	157b8 <__assert_fail@plt+0x46bc>
   156d4:	ldr	r3, [sp, #32]
   156d8:	cmp	r3, #0
   156dc:	bne	16240 <__assert_fail@plt+0x5144>
   156e0:	ldr	r3, [sp, #44]	; 0x2c
   156e4:	eor	r3, r3, #1
   156e8:	cmp	sl, #2
   156ec:	movne	r3, #0
   156f0:	andeq	r3, r3, #1
   156f4:	cmp	r3, #0
   156f8:	moveq	r2, fp
   156fc:	beq	15740 <__assert_fail@plt+0x4644>
   15700:	cmp	r7, fp
   15704:	ldrhi	r2, [sp, #36]	; 0x24
   15708:	movhi	r1, #39	; 0x27
   1570c:	strbhi	r1, [r2, fp]
   15710:	add	r2, fp, #1
   15714:	cmp	r7, r2
   15718:	ldrhi	r1, [sp, #36]	; 0x24
   1571c:	movhi	r0, #36	; 0x24
   15720:	strbhi	r0, [r1, r2]
   15724:	add	r2, fp, #2
   15728:	cmp	r7, r2
   1572c:	ldrhi	r1, [sp, #36]	; 0x24
   15730:	movhi	r0, #39	; 0x27
   15734:	strbhi	r0, [r1, r2]
   15738:	add	r2, fp, #3
   1573c:	str	r3, [sp, #44]	; 0x2c
   15740:	cmp	r7, r2
   15744:	ldrhi	r3, [sp, #36]	; 0x24
   15748:	movhi	r1, #92	; 0x5c
   1574c:	strbhi	r1, [r3, r2]
   15750:	add	fp, r2, #1
   15754:	cmp	r5, #0
   15758:	beq	160c4 <__assert_fail@plt+0x4fc8>
   1575c:	add	r3, r6, #1
   15760:	ldr	r1, [sp, #28]
   15764:	cmp	r1, r3
   15768:	bls	160d4 <__assert_fail@plt+0x4fd8>
   1576c:	ldr	r1, [sp, #52]	; 0x34
   15770:	ldrb	r3, [r1, r3]
   15774:	sub	r3, r3, #48	; 0x30
   15778:	uxtb	r3, r3
   1577c:	cmp	r3, #9
   15780:	bhi	160e0 <__assert_fail@plt+0x4fe4>
   15784:	cmp	r7, fp
   15788:	movhi	r3, #48	; 0x30
   1578c:	ldrhi	r1, [sp, #36]	; 0x24
   15790:	strbhi	r3, [r1, fp]
   15794:	add	r3, r2, #2
   15798:	cmp	r7, r3
   1579c:	movhi	r1, #48	; 0x30
   157a0:	ldrhi	r0, [sp, #36]	; 0x24
   157a4:	strbhi	r1, [r0, r3]
   157a8:	add	fp, r2, #3
   157ac:	ldr	r8, [sp, #32]
   157b0:	mov	r4, #48	; 0x30
   157b4:	b	15a90 <__assert_fail@plt+0x4994>
   157b8:	ldr	r3, [sp, #156]	; 0x9c
   157bc:	tst	r3, #1
   157c0:	bne	15b84 <__assert_fail@plt+0x4a88>
   157c4:	ldr	r5, [sp, #48]	; 0x30
   157c8:	mov	r8, r5
   157cc:	b	15a90 <__assert_fail@plt+0x4994>
   157d0:	cmp	sl, #2
   157d4:	beq	157ec <__assert_fail@plt+0x46f0>
   157d8:	cmp	sl, #5
   157dc:	beq	15804 <__assert_fail@plt+0x4708>
   157e0:	mov	r8, #0
   157e4:	mov	r5, r8
   157e8:	b	15a90 <__assert_fail@plt+0x4994>
   157ec:	ldr	r3, [sp, #32]
   157f0:	cmp	r3, #0
   157f4:	bne	16254 <__assert_fail@plt+0x5158>
   157f8:	mov	r8, r3
   157fc:	mov	r5, r3
   15800:	b	15a90 <__assert_fail@plt+0x4994>
   15804:	ldr	r3, [sp, #156]	; 0x9c
   15808:	tst	r3, #4
   1580c:	beq	160ec <__assert_fail@plt+0x4ff0>
   15810:	add	r3, r6, #2
   15814:	ldr	r2, [sp, #28]
   15818:	cmp	r2, r3
   1581c:	bls	160f8 <__assert_fail@plt+0x4ffc>
   15820:	ldr	r2, [sp, #52]	; 0x34
   15824:	add	r2, r2, r6
   15828:	ldrb	r2, [r2, #1]
   1582c:	cmp	r2, #63	; 0x3f
   15830:	movne	r8, #0
   15834:	movne	r5, r8
   15838:	bne	15a90 <__assert_fail@plt+0x4994>
   1583c:	ldr	r2, [sp, #52]	; 0x34
   15840:	ldrb	r2, [r2, r3]
   15844:	sub	r1, r2, #33	; 0x21
   15848:	cmp	r1, #29
   1584c:	ldrls	pc, [pc, r1, lsl #2]
   15850:	b	16104 <__assert_fail@plt+0x5008>
   15854:	andeq	r5, r1, ip, asr #17
   15858:	andeq	r6, r1, r4, lsl #2
   1585c:	andeq	r6, r1, r4, lsl #2
   15860:	andeq	r6, r1, r4, lsl #2
   15864:	andeq	r6, r1, r4, lsl #2
   15868:	andeq	r6, r1, r4, lsl #2
   1586c:	andeq	r5, r1, ip, asr #17
   15870:	andeq	r5, r1, ip, asr #17
   15874:	andeq	r5, r1, ip, asr #17
   15878:	andeq	r6, r1, r4, lsl #2
   1587c:	andeq	r6, r1, r4, lsl #2
   15880:	andeq	r6, r1, r4, lsl #2
   15884:	andeq	r5, r1, ip, asr #17
   15888:	andeq	r6, r1, r4, lsl #2
   1588c:	andeq	r5, r1, ip, asr #17
   15890:	andeq	r6, r1, r4, lsl #2
   15894:	andeq	r6, r1, r4, lsl #2
   15898:	andeq	r6, r1, r4, lsl #2
   1589c:	andeq	r6, r1, r4, lsl #2
   158a0:	andeq	r6, r1, r4, lsl #2
   158a4:	andeq	r6, r1, r4, lsl #2
   158a8:	andeq	r6, r1, r4, lsl #2
   158ac:	andeq	r6, r1, r4, lsl #2
   158b0:	andeq	r6, r1, r4, lsl #2
   158b4:	andeq	r6, r1, r4, lsl #2
   158b8:	andeq	r6, r1, r4, lsl #2
   158bc:	andeq	r6, r1, r4, lsl #2
   158c0:	andeq	r5, r1, ip, asr #17
   158c4:	andeq	r5, r1, ip, asr #17
   158c8:	andeq	r5, r1, ip, asr #17
   158cc:	ldr	r1, [sp, #32]
   158d0:	cmp	r1, #0
   158d4:	bne	16314 <__assert_fail@plt+0x5218>
   158d8:	cmp	r7, fp
   158dc:	movhi	r1, #63	; 0x3f
   158e0:	ldrhi	r0, [sp, #36]	; 0x24
   158e4:	strbhi	r1, [r0, fp]
   158e8:	add	r1, fp, #1
   158ec:	cmp	r7, r1
   158f0:	ldrhi	r0, [sp, #36]	; 0x24
   158f4:	movhi	ip, #34	; 0x22
   158f8:	strbhi	ip, [r0, r1]
   158fc:	add	r1, fp, #2
   15900:	cmp	r7, r1
   15904:	ldrhi	r0, [sp, #36]	; 0x24
   15908:	movhi	ip, #34	; 0x22
   1590c:	strbhi	ip, [r0, r1]
   15910:	add	r1, fp, #3
   15914:	cmp	r7, r1
   15918:	movhi	r0, #63	; 0x3f
   1591c:	ldrhi	ip, [sp, #36]	; 0x24
   15920:	strbhi	r0, [ip, r1]
   15924:	add	fp, fp, #4
   15928:	ldr	r5, [sp, #32]
   1592c:	mov	r8, r5
   15930:	mov	r4, r2
   15934:	mov	r6, r3
   15938:	b	15a90 <__assert_fail@plt+0x4994>
   1593c:	mov	r3, #102	; 0x66
   15940:	b	159f8 <__assert_fail@plt+0x48fc>
   15944:	mov	r3, #118	; 0x76
   15948:	b	159f8 <__assert_fail@plt+0x48fc>
   1594c:	cmp	sl, #2
   15950:	beq	159bc <__assert_fail@plt+0x48c0>
   15954:	ldr	r3, [sp, #48]	; 0x30
   15958:	ldr	r2, [sp, #32]
   1595c:	and	r3, r3, r2
   15960:	tst	r9, r3
   15964:	moveq	r3, r4
   15968:	beq	159f8 <__assert_fail@plt+0x48fc>
   1596c:	mov	r8, #0
   15970:	mov	r5, r8
   15974:	eor	r5, r5, #1
   15978:	ldr	r3, [sp, #44]	; 0x2c
   1597c:	and	r5, r5, r3
   15980:	tst	r5, #255	; 0xff
   15984:	beq	15b64 <__assert_fail@plt+0x4a68>
   15988:	cmp	r7, fp
   1598c:	ldrhi	r3, [sp, #36]	; 0x24
   15990:	movhi	r2, #39	; 0x27
   15994:	strbhi	r2, [r3, fp]
   15998:	add	r3, fp, #1
   1599c:	cmp	r7, r3
   159a0:	ldrhi	r2, [sp, #36]	; 0x24
   159a4:	movhi	r1, #39	; 0x27
   159a8:	strbhi	r1, [r2, r3]
   159ac:	add	fp, fp, #2
   159b0:	mov	r3, #0
   159b4:	str	r3, [sp, #44]	; 0x2c
   159b8:	b	15b64 <__assert_fail@plt+0x4a68>
   159bc:	ldr	r3, [sp, #32]
   159c0:	cmp	r3, #0
   159c4:	bne	16260 <__assert_fail@plt+0x5164>
   159c8:	mov	r8, r3
   159cc:	mov	r5, r3
   159d0:	b	15974 <__assert_fail@plt+0x4878>
   159d4:	mov	r3, #110	; 0x6e
   159d8:	b	159e0 <__assert_fail@plt+0x48e4>
   159dc:	mov	r3, #116	; 0x74
   159e0:	ldr	r2, [sp, #32]
   159e4:	cmp	sl, #2
   159e8:	movne	r2, #0
   159ec:	andeq	r2, r2, #1
   159f0:	cmp	r2, #0
   159f4:	bne	15a18 <__assert_fail@plt+0x491c>
   159f8:	ldr	r2, [sp, #48]	; 0x30
   159fc:	cmp	r2, #0
   15a00:	moveq	r8, r2
   15a04:	moveq	r5, r2
   15a08:	beq	15a90 <__assert_fail@plt+0x4994>
   15a0c:	mov	r4, r3
   15a10:	mov	r8, #0
   15a14:	b	15ae8 <__assert_fail@plt+0x49ec>
   15a18:	mov	r8, sl
   15a1c:	mov	sl, r7
   15a20:	b	1628c <__assert_fail@plt+0x5190>
   15a24:	mov	r3, #97	; 0x61
   15a28:	b	159f8 <__assert_fail@plt+0x48fc>
   15a2c:	ldr	r3, [sp, #28]
   15a30:	cmn	r3, #1
   15a34:	beq	15a60 <__assert_fail@plt+0x4964>
   15a38:	ldr	r3, [sp, #28]
   15a3c:	subs	r3, r3, #1
   15a40:	movne	r3, #1
   15a44:	cmp	r3, #0
   15a48:	bne	16110 <__assert_fail@plt+0x5014>
   15a4c:	cmp	r6, #0
   15a50:	beq	15a78 <__assert_fail@plt+0x497c>
   15a54:	mov	r8, #0
   15a58:	mov	r5, r8
   15a5c:	b	15a90 <__assert_fail@plt+0x4994>
   15a60:	ldr	r3, [sp, #52]	; 0x34
   15a64:	ldrb	r3, [r3, #1]
   15a68:	adds	r3, r3, #0
   15a6c:	movne	r3, #1
   15a70:	b	15a44 <__assert_fail@plt+0x4948>
   15a74:	mov	r8, #0
   15a78:	ldr	r5, [sp, #32]
   15a7c:	cmp	sl, #2
   15a80:	movne	r5, #0
   15a84:	andeq	r5, r5, #1
   15a88:	cmp	r5, #0
   15a8c:	bne	15c40 <__assert_fail@plt+0x4b44>
   15a90:	ldr	r3, [sp, #68]	; 0x44
   15a94:	cmp	sl, #2
   15a98:	orreq	r3, r3, #1
   15a9c:	eor	r3, r3, #1
   15aa0:	ldr	r2, [sp, #32]
   15aa4:	orr	r3, r2, r3
   15aa8:	tst	r3, #255	; 0xff
   15aac:	beq	15adc <__assert_fail@plt+0x49e0>
   15ab0:	ldr	r3, [sp, #160]	; 0xa0
   15ab4:	cmp	r3, #0
   15ab8:	beq	15adc <__assert_fail@plt+0x49e0>
   15abc:	lsr	r2, r4, #5
   15ac0:	uxtb	r2, r2
   15ac4:	and	r3, r4, #31
   15ac8:	ldr	r1, [sp, #160]	; 0xa0
   15acc:	ldr	r2, [r1, r2, lsl #2]
   15ad0:	lsr	r3, r2, r3
   15ad4:	tst	r3, #1
   15ad8:	bne	15ae8 <__assert_fail@plt+0x49ec>
   15adc:	ldr	r3, [sp, #56]	; 0x38
   15ae0:	cmp	r3, #0
   15ae4:	beq	15974 <__assert_fail@plt+0x4878>
   15ae8:	ldr	r3, [sp, #32]
   15aec:	cmp	r3, #0
   15af0:	bne	162fc <__assert_fail@plt+0x5200>
   15af4:	ldr	r3, [sp, #44]	; 0x2c
   15af8:	eor	r3, r3, #1
   15afc:	cmp	sl, #2
   15b00:	movne	r3, #0
   15b04:	andeq	r3, r3, #1
   15b08:	cmp	r3, #0
   15b0c:	beq	15b50 <__assert_fail@plt+0x4a54>
   15b10:	cmp	r7, fp
   15b14:	ldrhi	r2, [sp, #36]	; 0x24
   15b18:	movhi	r1, #39	; 0x27
   15b1c:	strbhi	r1, [r2, fp]
   15b20:	add	r2, fp, #1
   15b24:	cmp	r7, r2
   15b28:	ldrhi	r1, [sp, #36]	; 0x24
   15b2c:	movhi	r0, #36	; 0x24
   15b30:	strbhi	r0, [r1, r2]
   15b34:	add	r2, fp, #2
   15b38:	cmp	r7, r2
   15b3c:	ldrhi	r1, [sp, #36]	; 0x24
   15b40:	movhi	r0, #39	; 0x27
   15b44:	strbhi	r0, [r1, r2]
   15b48:	add	fp, fp, #3
   15b4c:	str	r3, [sp, #44]	; 0x2c
   15b50:	cmp	r7, fp
   15b54:	ldrhi	r3, [sp, #36]	; 0x24
   15b58:	movhi	r2, #92	; 0x5c
   15b5c:	strbhi	r2, [r3, fp]
   15b60:	add	fp, fp, #1
   15b64:	cmp	fp, r7
   15b68:	ldrcc	r3, [sp, #36]	; 0x24
   15b6c:	strbcc	r4, [r3, fp]
   15b70:	add	fp, fp, #1
   15b74:	ldr	r3, [sp, #40]	; 0x28
   15b78:	cmp	r8, #0
   15b7c:	moveq	r3, #0
   15b80:	str	r3, [sp, #40]	; 0x28
   15b84:	add	r6, r6, #1
   15b88:	ldr	r3, [sp, #28]
   15b8c:	cmn	r3, #1
   15b90:	beq	1611c <__assert_fail@plt+0x5020>
   15b94:	ldr	r3, [sp, #28]
   15b98:	subs	r8, r3, r6
   15b9c:	movne	r8, #1
   15ba0:	cmp	r8, #0
   15ba4:	beq	16130 <__assert_fail@plt+0x5034>
   15ba8:	ldr	r5, [sp, #48]	; 0x30
   15bac:	cmp	sl, #2
   15bb0:	moveq	r5, #0
   15bb4:	andne	r5, r5, #1
   15bb8:	ldr	r3, [sp, #60]	; 0x3c
   15bbc:	adds	r9, r3, #0
   15bc0:	movne	r9, #1
   15bc4:	ands	r2, r5, r9
   15bc8:	str	r2, [sp, #56]	; 0x38
   15bcc:	beq	15494 <__assert_fail@plt+0x4398>
   15bd0:	add	r4, r6, r3
   15bd4:	ldr	r2, [sp, #28]
   15bd8:	cmp	r3, #1
   15bdc:	movls	r3, #0
   15be0:	movhi	r3, #1
   15be4:	cmn	r2, #1
   15be8:	movne	r3, #0
   15bec:	cmp	r3, #0
   15bf0:	beq	15c00 <__assert_fail@plt+0x4b04>
   15bf4:	ldr	r0, [sp, #52]	; 0x34
   15bf8:	bl	10fe8 <strlen@plt>
   15bfc:	str	r0, [sp, #28]
   15c00:	ldr	r3, [sp, #28]
   15c04:	cmp	r3, r4
   15c08:	bcc	1548c <__assert_fail@plt+0x4390>
   15c0c:	ldr	r2, [sp, #60]	; 0x3c
   15c10:	ldr	r1, [sp, #72]	; 0x48
   15c14:	ldr	r3, [sp, #52]	; 0x34
   15c18:	add	r0, r3, r6
   15c1c:	bl	10ee0 <memcmp@plt>
   15c20:	cmp	r0, #0
   15c24:	bne	156ac <__assert_fail@plt+0x45b0>
   15c28:	ldr	r3, [sp, #32]
   15c2c:	cmp	r3, #0
   15c30:	beq	15494 <__assert_fail@plt+0x4398>
   15c34:	mov	r8, sl
   15c38:	mov	sl, r7
   15c3c:	b	1628c <__assert_fail@plt+0x5190>
   15c40:	mov	r8, sl
   15c44:	mov	sl, r7
   15c48:	b	1628c <__assert_fail@plt+0x5190>
   15c4c:	cmp	sl, #2
   15c50:	strne	r8, [sp, #80]	; 0x50
   15c54:	movne	r5, #0
   15c58:	bne	15a90 <__assert_fail@plt+0x4994>
   15c5c:	ldr	r3, [sp, #32]
   15c60:	cmp	r3, #0
   15c64:	bne	16278 <__assert_fail@plt+0x517c>
   15c68:	ldr	r2, [sp, #76]	; 0x4c
   15c6c:	adds	r3, r7, #0
   15c70:	movne	r3, #1
   15c74:	cmp	r2, #0
   15c78:	movne	r3, #0
   15c7c:	cmp	r3, #0
   15c80:	movne	r3, #0
   15c84:	bne	15cb4 <__assert_fail@plt+0x4bb8>
   15c88:	cmp	r7, fp
   15c8c:	ldrhi	r3, [sp, #36]	; 0x24
   15c90:	movhi	r2, #39	; 0x27
   15c94:	strbhi	r2, [r3, fp]
   15c98:	add	r3, fp, #1
   15c9c:	cmp	r7, r3
   15ca0:	ldrhi	r2, [sp, #36]	; 0x24
   15ca4:	movhi	r1, #92	; 0x5c
   15ca8:	strbhi	r1, [r2, r3]
   15cac:	mov	r3, r7
   15cb0:	ldr	r7, [sp, #76]	; 0x4c
   15cb4:	add	r2, fp, #2
   15cb8:	cmp	r2, r3
   15cbc:	ldrcc	r1, [sp, #36]	; 0x24
   15cc0:	movcc	r0, #39	; 0x27
   15cc4:	strbcc	r0, [r1, r2]
   15cc8:	add	fp, fp, #3
   15ccc:	ldr	r2, [sp, #32]
   15cd0:	mov	r5, r2
   15cd4:	str	r8, [sp, #80]	; 0x50
   15cd8:	str	r2, [sp, #44]	; 0x2c
   15cdc:	str	r7, [sp, #76]	; 0x4c
   15ce0:	mov	r7, r3
   15ce4:	b	15a90 <__assert_fail@plt+0x4994>
   15ce8:	ldr	r5, [sp, #84]	; 0x54
   15cec:	cmp	r5, #1
   15cf0:	beq	15d20 <__assert_fail@plt+0x4c24>
   15cf4:	mov	r3, #0
   15cf8:	str	r3, [sp, #104]	; 0x68
   15cfc:	str	r3, [sp, #108]	; 0x6c
   15d00:	ldr	r3, [sp, #28]
   15d04:	cmn	r3, #1
   15d08:	beq	15d54 <__assert_fail@plt+0x4c58>
   15d0c:	mov	r3, #0
   15d10:	str	r4, [sp, #88]	; 0x58
   15d14:	str	fp, [sp, #92]	; 0x5c
   15d18:	mov	fp, r3
   15d1c:	b	15e7c <__assert_fail@plt+0x4d80>
   15d20:	bl	10fd0 <__ctype_b_loc@plt>
   15d24:	ldr	r2, [r0]
   15d28:	lsl	r3, r4, #1
   15d2c:	ldrh	r8, [r2, r3]
   15d30:	lsr	r8, r8, #14
   15d34:	and	r8, r8, #1
   15d38:	mov	r2, r5
   15d3c:	eor	r5, r8, #1
   15d40:	ldr	r3, [sp, #48]	; 0x30
   15d44:	and	r5, r5, r3
   15d48:	ands	r5, r5, #255	; 0xff
   15d4c:	beq	15a90 <__assert_fail@plt+0x4994>
   15d50:	b	15f14 <__assert_fail@plt+0x4e18>
   15d54:	ldr	r0, [sp, #52]	; 0x34
   15d58:	bl	10fe8 <strlen@plt>
   15d5c:	str	r0, [sp, #28]
   15d60:	b	15d0c <__assert_fail@plt+0x4c10>
   15d64:	mov	r2, fp
   15d68:	mov	r1, r4
   15d6c:	ldr	r4, [sp, #88]	; 0x58
   15d70:	ldr	fp, [sp, #92]	; 0x5c
   15d74:	ldr	r0, [sp, #28]
   15d78:	cmp	r0, r5
   15d7c:	bls	15f48 <__assert_fail@plt+0x4e4c>
   15d80:	ldrb	r3, [r1]
   15d84:	cmp	r3, #0
   15d88:	beq	15f50 <__assert_fail@plt+0x4e54>
   15d8c:	mov	r3, r1
   15d90:	add	r2, r2, #1
   15d94:	add	r1, r6, r2
   15d98:	cmp	r0, r1
   15d9c:	bls	15f58 <__assert_fail@plt+0x4e5c>
   15da0:	ldrb	r1, [r3, #1]!
   15da4:	cmp	r1, #0
   15da8:	bne	15d90 <__assert_fail@plt+0x4c94>
   15dac:	mov	r8, #0
   15db0:	b	15f0c <__assert_fail@plt+0x4e10>
   15db4:	cmp	r4, r5
   15db8:	beq	15e58 <__assert_fail@plt+0x4d5c>
   15dbc:	ldrb	r3, [r4, #1]!
   15dc0:	sub	r3, r3, #91	; 0x5b
   15dc4:	cmp	r3, #33	; 0x21
   15dc8:	ldrls	pc, [pc, r3, lsl #2]
   15dcc:	b	15db4 <__assert_fail@plt+0x4cb8>
   15dd0:	andeq	r6, r1, r4, lsl #5
   15dd4:	andeq	r6, r1, r4, lsl #5
   15dd8:			; <UNDEFINED> instruction: 0x00015db4
   15ddc:	andeq	r6, r1, r4, lsl #5
   15de0:			; <UNDEFINED> instruction: 0x00015db4
   15de4:	andeq	r6, r1, r4, lsl #5
   15de8:			; <UNDEFINED> instruction: 0x00015db4
   15dec:			; <UNDEFINED> instruction: 0x00015db4
   15df0:			; <UNDEFINED> instruction: 0x00015db4
   15df4:			; <UNDEFINED> instruction: 0x00015db4
   15df8:			; <UNDEFINED> instruction: 0x00015db4
   15dfc:			; <UNDEFINED> instruction: 0x00015db4
   15e00:			; <UNDEFINED> instruction: 0x00015db4
   15e04:			; <UNDEFINED> instruction: 0x00015db4
   15e08:			; <UNDEFINED> instruction: 0x00015db4
   15e0c:			; <UNDEFINED> instruction: 0x00015db4
   15e10:			; <UNDEFINED> instruction: 0x00015db4
   15e14:			; <UNDEFINED> instruction: 0x00015db4
   15e18:			; <UNDEFINED> instruction: 0x00015db4
   15e1c:			; <UNDEFINED> instruction: 0x00015db4
   15e20:			; <UNDEFINED> instruction: 0x00015db4
   15e24:			; <UNDEFINED> instruction: 0x00015db4
   15e28:			; <UNDEFINED> instruction: 0x00015db4
   15e2c:			; <UNDEFINED> instruction: 0x00015db4
   15e30:			; <UNDEFINED> instruction: 0x00015db4
   15e34:			; <UNDEFINED> instruction: 0x00015db4
   15e38:			; <UNDEFINED> instruction: 0x00015db4
   15e3c:			; <UNDEFINED> instruction: 0x00015db4
   15e40:			; <UNDEFINED> instruction: 0x00015db4
   15e44:			; <UNDEFINED> instruction: 0x00015db4
   15e48:			; <UNDEFINED> instruction: 0x00015db4
   15e4c:			; <UNDEFINED> instruction: 0x00015db4
   15e50:			; <UNDEFINED> instruction: 0x00015db4
   15e54:	andeq	r6, r1, r4, lsl #5
   15e58:	ldr	r0, [sp, #100]	; 0x64
   15e5c:	bl	10f1c <iswprint@plt>
   15e60:	cmp	r0, #0
   15e64:	moveq	r8, #0
   15e68:	add	fp, fp, r9
   15e6c:	add	r0, sp, #104	; 0x68
   15e70:	bl	10ed4 <mbsinit@plt>
   15e74:	cmp	r0, #0
   15e78:	bne	15eec <__assert_fail@plt+0x4df0>
   15e7c:	add	r5, r6, fp
   15e80:	ldr	r3, [sp, #52]	; 0x34
   15e84:	add	r4, r3, r5
   15e88:	add	r3, sp, #104	; 0x68
   15e8c:	ldr	r2, [sp, #28]
   15e90:	sub	r2, r2, r5
   15e94:	mov	r1, r4
   15e98:	add	r0, sp, #100	; 0x64
   15e9c:	bl	1849c <__assert_fail@plt+0x73a0>
   15ea0:	subs	r9, r0, #0
   15ea4:	beq	15f60 <__assert_fail@plt+0x4e64>
   15ea8:	cmn	r9, #1
   15eac:	beq	15efc <__assert_fail@plt+0x4e00>
   15eb0:	cmn	r9, #2
   15eb4:	beq	15d64 <__assert_fail@plt+0x4c68>
   15eb8:	ldr	r3, [sp, #32]
   15ebc:	cmp	sl, #2
   15ec0:	movne	r3, #0
   15ec4:	andeq	r3, r3, #1
   15ec8:	cmp	r3, #0
   15ecc:	beq	15e58 <__assert_fail@plt+0x4d5c>
   15ed0:	cmp	r9, #1
   15ed4:	bls	15e58 <__assert_fail@plt+0x4d5c>
   15ed8:	sub	r3, r9, #1
   15edc:	add	r5, r3, r5
   15ee0:	ldr	r3, [sp, #52]	; 0x34
   15ee4:	add	r5, r3, r5
   15ee8:	b	15dbc <__assert_fail@plt+0x4cc0>
   15eec:	ldr	r4, [sp, #88]	; 0x58
   15ef0:	mov	r2, fp
   15ef4:	ldr	fp, [sp, #92]	; 0x5c
   15ef8:	b	15f0c <__assert_fail@plt+0x4e10>
   15efc:	ldr	r4, [sp, #88]	; 0x58
   15f00:	mov	r2, fp
   15f04:	ldr	fp, [sp, #92]	; 0x5c
   15f08:	mov	r8, #0
   15f0c:	cmp	r2, #1
   15f10:	bls	15d3c <__assert_fail@plt+0x4c40>
   15f14:	add	r1, r6, r2
   15f18:	ldr	ip, [sp, #64]	; 0x40
   15f1c:	mov	r5, #0
   15f20:	eor	r3, r8, #1
   15f24:	ldr	r2, [sp, #48]	; 0x30
   15f28:	and	r3, r3, r2
   15f2c:	uxtb	r3, r3
   15f30:	ldr	r9, [sp, #32]
   15f34:	ldr	lr, [sp, #44]	; 0x2c
   15f38:	ldr	r2, [sp, #56]	; 0x38
   15f3c:	str	r8, [sp, #56]	; 0x38
   15f40:	ldr	r0, [sp, #36]	; 0x24
   15f44:	b	15fe0 <__assert_fail@plt+0x4ee4>
   15f48:	mov	r8, #0
   15f4c:	b	15f0c <__assert_fail@plt+0x4e10>
   15f50:	mov	r8, #0
   15f54:	b	15f0c <__assert_fail@plt+0x4e10>
   15f58:	mov	r8, #0
   15f5c:	b	15f0c <__assert_fail@plt+0x4e10>
   15f60:	ldr	r4, [sp, #88]	; 0x58
   15f64:	mov	r2, fp
   15f68:	ldr	fp, [sp, #92]	; 0x5c
   15f6c:	b	15f0c <__assert_fail@plt+0x4e10>
   15f70:	cmp	r2, #0
   15f74:	beq	15f88 <__assert_fail@plt+0x4e8c>
   15f78:	cmp	r7, fp
   15f7c:	movhi	r2, #92	; 0x5c
   15f80:	strbhi	r2, [r0, fp]
   15f84:	add	fp, fp, #1
   15f88:	add	r8, r6, #1
   15f8c:	cmp	r1, r8
   15f90:	bls	16098 <__assert_fail@plt+0x4f9c>
   15f94:	eor	r2, r5, #1
   15f98:	and	r2, r2, lr
   15f9c:	ands	r2, r2, #255	; 0xff
   15fa0:	beq	160b4 <__assert_fail@plt+0x4fb8>
   15fa4:	cmp	r7, fp
   15fa8:	movhi	r2, #39	; 0x27
   15fac:	strbhi	r2, [r0, fp]
   15fb0:	add	r2, fp, #1
   15fb4:	cmp	r7, r2
   15fb8:	movhi	lr, #39	; 0x27
   15fbc:	strbhi	lr, [r0, r2]
   15fc0:	add	fp, fp, #2
   15fc4:	mov	r6, r8
   15fc8:	mov	r2, r3
   15fcc:	mov	lr, r3
   15fd0:	cmp	r7, fp
   15fd4:	strbhi	r4, [r0, fp]
   15fd8:	add	fp, fp, #1
   15fdc:	ldrb	r4, [ip, #1]!
   15fe0:	cmp	r3, #0
   15fe4:	beq	15f70 <__assert_fail@plt+0x4e74>
   15fe8:	cmp	r9, #0
   15fec:	bne	162f0 <__assert_fail@plt+0x51f4>
   15ff0:	eor	r5, lr, #1
   15ff4:	cmp	sl, #2
   15ff8:	movne	r5, #0
   15ffc:	andeq	r5, r5, #1
   16000:	cmp	r5, #0
   16004:	beq	1603c <__assert_fail@plt+0x4f40>
   16008:	cmp	r7, fp
   1600c:	movhi	lr, #39	; 0x27
   16010:	strbhi	lr, [r0, fp]
   16014:	add	lr, fp, #1
   16018:	cmp	r7, lr
   1601c:	movhi	r8, #36	; 0x24
   16020:	strbhi	r8, [r0, lr]
   16024:	add	lr, fp, #2
   16028:	cmp	r7, lr
   1602c:	movhi	r8, #39	; 0x27
   16030:	strbhi	r8, [r0, lr]
   16034:	add	fp, fp, #3
   16038:	mov	lr, r5
   1603c:	cmp	r7, fp
   16040:	movhi	r5, #92	; 0x5c
   16044:	strbhi	r5, [r0, fp]
   16048:	add	r5, fp, #1
   1604c:	cmp	r7, r5
   16050:	lsrhi	r8, r4, #6
   16054:	addhi	r8, r8, #48	; 0x30
   16058:	strbhi	r8, [r0, r5]
   1605c:	add	r8, fp, #2
   16060:	cmp	r7, r8
   16064:	lsrhi	r5, r4, #3
   16068:	andhi	r5, r5, #7
   1606c:	addhi	r5, r5, #48	; 0x30
   16070:	strbhi	r5, [r0, r8]
   16074:	add	fp, fp, #3
   16078:	and	r4, r4, #7
   1607c:	add	r4, r4, #48	; 0x30
   16080:	add	r5, r6, #1
   16084:	cmp	r1, r5
   16088:	bls	160a4 <__assert_fail@plt+0x4fa8>
   1608c:	mov	r6, r5
   16090:	mov	r5, r3
   16094:	b	15fd0 <__assert_fail@plt+0x4ed4>
   16098:	str	lr, [sp, #44]	; 0x2c
   1609c:	ldr	r8, [sp, #56]	; 0x38
   160a0:	b	15974 <__assert_fail@plt+0x4878>
   160a4:	str	lr, [sp, #44]	; 0x2c
   160a8:	ldr	r8, [sp, #56]	; 0x38
   160ac:	mov	r5, r3
   160b0:	b	15974 <__assert_fail@plt+0x4878>
   160b4:	mov	r6, r8
   160b8:	b	15fd0 <__assert_fail@plt+0x4ed4>
   160bc:	mov	r5, #0
   160c0:	b	15a90 <__assert_fail@plt+0x4994>
   160c4:	mov	r8, r5
   160c8:	ldr	r5, [sp, #48]	; 0x30
   160cc:	mov	r4, #48	; 0x30
   160d0:	b	15a90 <__assert_fail@plt+0x4994>
   160d4:	ldr	r8, [sp, #32]
   160d8:	mov	r4, #48	; 0x30
   160dc:	b	15a90 <__assert_fail@plt+0x4994>
   160e0:	ldr	r8, [sp, #32]
   160e4:	mov	r4, #48	; 0x30
   160e8:	b	15a90 <__assert_fail@plt+0x4994>
   160ec:	mov	r8, #0
   160f0:	mov	r5, r8
   160f4:	b	15a90 <__assert_fail@plt+0x4994>
   160f8:	mov	r8, #0
   160fc:	mov	r5, r8
   16100:	b	15a90 <__assert_fail@plt+0x4994>
   16104:	mov	r8, #0
   16108:	mov	r5, r8
   1610c:	b	15a90 <__assert_fail@plt+0x4994>
   16110:	mov	r8, #0
   16114:	mov	r5, r8
   16118:	b	15a90 <__assert_fail@plt+0x4994>
   1611c:	ldr	r3, [sp, #52]	; 0x34
   16120:	ldrb	r8, [r3, r6]
   16124:	adds	r8, r8, #0
   16128:	movne	r8, #1
   1612c:	b	15ba0 <__assert_fail@plt+0x4aa4>
   16130:	cmp	sl, #2
   16134:	movne	r3, #0
   16138:	moveq	r3, #1
   1613c:	ldr	r1, [sp, #32]
   16140:	mov	r2, r1
   16144:	and	r2, r2, r3
   16148:	cmp	fp, #0
   1614c:	movne	r2, #0
   16150:	andeq	r2, r2, #1
   16154:	cmp	r2, #0
   16158:	bne	16308 <__assert_fail@plt+0x520c>
   1615c:	eor	r2, r1, #1
   16160:	and	r3, r3, r2
   16164:	ldr	r1, [sp, #80]	; 0x50
   16168:	tst	r1, r3
   1616c:	beq	161e4 <__assert_fail@plt+0x50e8>
   16170:	ldr	r3, [sp, #40]	; 0x28
   16174:	cmp	r3, #0
   16178:	bne	161a0 <__assert_fail@plt+0x50a4>
   1617c:	ldr	r1, [sp, #76]	; 0x4c
   16180:	clz	r3, r7
   16184:	lsr	r3, r3, #5
   16188:	cmp	r1, #0
   1618c:	moveq	r3, #0
   16190:	cmp	r3, #0
   16194:	beq	161e4 <__assert_fail@plt+0x50e8>
   16198:	ldr	r7, [sp, #76]	; 0x4c
   1619c:	b	15234 <__assert_fail@plt+0x4138>
   161a0:	ldr	r3, [sp, #168]	; 0xa8
   161a4:	str	r3, [sp, #16]
   161a8:	ldr	r3, [sp, #164]	; 0xa4
   161ac:	str	r3, [sp, #12]
   161b0:	ldr	r3, [sp, #160]	; 0xa0
   161b4:	str	r3, [sp, #8]
   161b8:	ldr	r3, [sp, #156]	; 0x9c
   161bc:	str	r3, [sp, #4]
   161c0:	mov	r3, #5
   161c4:	str	r3, [sp]
   161c8:	ldr	r3, [sp, #28]
   161cc:	ldr	r2, [sp, #52]	; 0x34
   161d0:	ldr	r1, [sp, #76]	; 0x4c
   161d4:	ldr	r0, [sp, #36]	; 0x24
   161d8:	bl	151d4 <__assert_fail@plt+0x40d8>
   161dc:	mov	fp, r0
   161e0:	b	162e4 <__assert_fail@plt+0x51e8>
   161e4:	mov	sl, r7
   161e8:	ldr	r3, [sp, #72]	; 0x48
   161ec:	cmp	r3, #0
   161f0:	moveq	r2, #0
   161f4:	andne	r2, r2, #1
   161f8:	cmp	r2, #0
   161fc:	beq	1622c <__assert_fail@plt+0x5130>
   16200:	mov	r2, r3
   16204:	ldrb	r3, [r3]
   16208:	cmp	r3, #0
   1620c:	beq	1622c <__assert_fail@plt+0x5130>
   16210:	ldr	r1, [sp, #36]	; 0x24
   16214:	cmp	sl, fp
   16218:	strbhi	r3, [r1, fp]
   1621c:	add	fp, fp, #1
   16220:	ldrb	r3, [r2, #1]!
   16224:	cmp	r3, #0
   16228:	bne	16214 <__assert_fail@plt+0x5118>
   1622c:	cmp	sl, fp
   16230:	movhi	r3, #0
   16234:	ldrhi	r2, [sp, #36]	; 0x24
   16238:	strbhi	r3, [r2, fp]
   1623c:	b	162e4 <__assert_fail@plt+0x51e8>
   16240:	mov	r8, sl
   16244:	mov	sl, r7
   16248:	ldr	r3, [sp, #32]
   1624c:	str	r3, [sp, #48]	; 0x30
   16250:	b	1628c <__assert_fail@plt+0x5190>
   16254:	mov	r8, sl
   16258:	mov	sl, r7
   1625c:	b	1628c <__assert_fail@plt+0x5190>
   16260:	mov	r8, sl
   16264:	mov	sl, r7
   16268:	b	1628c <__assert_fail@plt+0x5190>
   1626c:	andeq	fp, r1, ip, lsr #2
   16270:	andeq	fp, r1, ip, lsr r1
   16274:	andeq	fp, r1, r0, lsr r1
   16278:	mov	r8, sl
   1627c:	mov	sl, r7
   16280:	b	1628c <__assert_fail@plt+0x5190>
   16284:	mov	r8, sl
   16288:	mov	sl, r7
   1628c:	ldr	r3, [sp, #48]	; 0x30
   16290:	cmp	r8, #2
   16294:	movne	r3, #0
   16298:	andeq	r3, r3, #1
   1629c:	cmp	r3, #0
   162a0:	movne	r8, #4
   162a4:	ldr	r3, [sp, #168]	; 0xa8
   162a8:	str	r3, [sp, #16]
   162ac:	ldr	r3, [sp, #164]	; 0xa4
   162b0:	str	r3, [sp, #12]
   162b4:	mov	r3, #0
   162b8:	str	r3, [sp, #8]
   162bc:	ldr	r3, [sp, #156]	; 0x9c
   162c0:	bic	r3, r3, #2
   162c4:	str	r3, [sp, #4]
   162c8:	str	r8, [sp]
   162cc:	ldr	r3, [sp, #28]
   162d0:	ldr	r2, [sp, #52]	; 0x34
   162d4:	mov	r1, sl
   162d8:	ldr	r0, [sp, #36]	; 0x24
   162dc:	bl	151d4 <__assert_fail@plt+0x40d8>
   162e0:	mov	fp, r0
   162e4:	mov	r0, fp
   162e8:	add	sp, sp, #116	; 0x74
   162ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   162f0:	mov	r8, sl
   162f4:	mov	sl, r7
   162f8:	b	1628c <__assert_fail@plt+0x5190>
   162fc:	mov	r8, sl
   16300:	mov	sl, r7
   16304:	b	1628c <__assert_fail@plt+0x5190>
   16308:	mov	r8, sl
   1630c:	mov	sl, r7
   16310:	b	1628c <__assert_fail@plt+0x5190>
   16314:	mov	r8, sl
   16318:	mov	sl, r7
   1631c:	b	162a4 <__assert_fail@plt+0x51a8>
   16320:	mov	r3, #1
   16324:	str	r3, [sp, #32]
   16328:	str	r3, [sp, #48]	; 0x30
   1632c:	str	r3, [sp, #60]	; 0x3c
   16330:	ldr	r3, [pc, #-196]	; 16274 <__assert_fail@plt+0x5178>
   16334:	str	r3, [sp, #72]	; 0x48
   16338:	mov	fp, #0
   1633c:	mov	sl, #5
   16340:	b	15290 <__assert_fail@plt+0x4194>
   16344:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16348:	sub	sp, sp, #52	; 0x34
   1634c:	mov	r5, r0
   16350:	str	r1, [sp, #24]
   16354:	str	r2, [sp, #28]
   16358:	mov	r4, r3
   1635c:	bl	11000 <__errno_location@plt>
   16360:	str	r0, [sp, #32]
   16364:	ldr	r3, [r0]
   16368:	str	r3, [sp, #36]	; 0x24
   1636c:	ldr	r3, [pc, #396]	; 16500 <__assert_fail@plt+0x5404>
   16370:	ldr	r6, [r3]
   16374:	cmn	r5, #-2147483647	; 0x80000001
   16378:	movne	r3, #0
   1637c:	moveq	r3, #1
   16380:	orrs	r3, r3, r5, lsr #31
   16384:	bne	164c4 <__assert_fail@plt+0x53c8>
   16388:	ldr	r3, [pc, #368]	; 16500 <__assert_fail@plt+0x5404>
   1638c:	ldr	r2, [r3, #4]
   16390:	cmp	r5, r2
   16394:	blt	163fc <__assert_fail@plt+0x5300>
   16398:	str	r2, [sp, #44]	; 0x2c
   1639c:	add	r3, r3, #8
   163a0:	cmp	r6, r3
   163a4:	beq	164c8 <__assert_fail@plt+0x53cc>
   163a8:	sub	r2, r5, r2
   163ac:	mov	r3, #8
   163b0:	str	r3, [sp]
   163b4:	mvn	r3, #-2147483648	; 0x80000000
   163b8:	add	r2, r2, #1
   163bc:	add	r1, sp, #44	; 0x2c
   163c0:	mov	r0, r6
   163c4:	bl	17248 <__assert_fail@plt+0x614c>
   163c8:	mov	r6, r0
   163cc:	ldr	r3, [pc, #300]	; 16500 <__assert_fail@plt+0x5404>
   163d0:	str	r0, [r3]
   163d4:	ldr	r7, [pc, #292]	; 16500 <__assert_fail@plt+0x5404>
   163d8:	ldr	r0, [r7, #4]
   163dc:	ldr	r2, [sp, #44]	; 0x2c
   163e0:	sub	r2, r2, r0
   163e4:	lsl	r2, r2, #3
   163e8:	mov	r1, #0
   163ec:	add	r0, r6, r0, lsl #3
   163f0:	bl	11018 <memset@plt>
   163f4:	ldr	r3, [sp, #44]	; 0x2c
   163f8:	str	r3, [r7, #4]
   163fc:	add	fp, r6, r5, lsl #3
   16400:	ldr	r8, [r6, r5, lsl #3]
   16404:	ldr	r7, [fp, #4]
   16408:	ldr	r9, [r4, #4]
   1640c:	orr	r9, r9, #1
   16410:	add	sl, r4, #8
   16414:	ldr	r3, [r4, #44]	; 0x2c
   16418:	str	r3, [sp, #16]
   1641c:	ldr	r3, [r4, #40]	; 0x28
   16420:	str	r3, [sp, #12]
   16424:	str	sl, [sp, #8]
   16428:	str	r9, [sp, #4]
   1642c:	ldr	r3, [r4]
   16430:	str	r3, [sp]
   16434:	ldr	r3, [sp, #28]
   16438:	ldr	r2, [sp, #24]
   1643c:	mov	r1, r8
   16440:	mov	r0, r7
   16444:	bl	151d4 <__assert_fail@plt+0x40d8>
   16448:	cmp	r8, r0
   1644c:	bhi	164ac <__assert_fail@plt+0x53b0>
   16450:	add	r8, r0, #1
   16454:	str	r8, [r6, r5, lsl #3]
   16458:	ldr	r3, [pc, #164]	; 16504 <__assert_fail@plt+0x5408>
   1645c:	cmp	r7, r3
   16460:	beq	1646c <__assert_fail@plt+0x5370>
   16464:	mov	r0, r7
   16468:	bl	14b5c <__assert_fail@plt+0x3a60>
   1646c:	mov	r0, r8
   16470:	bl	170c4 <__assert_fail@plt+0x5fc8>
   16474:	mov	r7, r0
   16478:	str	r0, [fp, #4]
   1647c:	ldr	r3, [r4, #44]	; 0x2c
   16480:	str	r3, [sp, #16]
   16484:	ldr	r3, [r4, #40]	; 0x28
   16488:	str	r3, [sp, #12]
   1648c:	str	sl, [sp, #8]
   16490:	str	r9, [sp, #4]
   16494:	ldr	r3, [r4]
   16498:	str	r3, [sp]
   1649c:	ldr	r3, [sp, #28]
   164a0:	ldr	r2, [sp, #24]
   164a4:	mov	r1, r8
   164a8:	bl	151d4 <__assert_fail@plt+0x40d8>
   164ac:	ldr	r3, [sp, #32]
   164b0:	ldr	r2, [sp, #36]	; 0x24
   164b4:	str	r2, [r3]
   164b8:	mov	r0, r7
   164bc:	add	sp, sp, #52	; 0x34
   164c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   164c4:	bl	110d8 <abort@plt>
   164c8:	sub	r2, r5, r2
   164cc:	mov	r3, #8
   164d0:	str	r3, [sp]
   164d4:	mvn	r3, #-2147483648	; 0x80000000
   164d8:	add	r2, r2, #1
   164dc:	add	r1, sp, #44	; 0x2c
   164e0:	mov	r0, #0
   164e4:	bl	17248 <__assert_fail@plt+0x614c>
   164e8:	mov	r6, r0
   164ec:	ldr	r3, [pc, #12]	; 16500 <__assert_fail@plt+0x5404>
   164f0:	str	r0, [r3], #8
   164f4:	ldm	r3, {r0, r1}
   164f8:	stm	r6, {r0, r1}
   164fc:	b	163d4 <__assert_fail@plt+0x52d8>
   16500:	andeq	ip, r2, r0, asr #2
   16504:	andeq	ip, r2, r0, lsl r2
   16508:	push	{r4, r5, r6, lr}
   1650c:	mov	r4, r0
   16510:	bl	11000 <__errno_location@plt>
   16514:	mov	r5, r0
   16518:	ldr	r6, [r0]
   1651c:	cmp	r4, #0
   16520:	ldr	r3, [pc, #20]	; 1653c <__assert_fail@plt+0x5440>
   16524:	moveq	r4, r3
   16528:	mov	r1, #48	; 0x30
   1652c:	mov	r0, r4
   16530:	bl	175b0 <__assert_fail@plt+0x64b4>
   16534:	str	r6, [r5]
   16538:	pop	{r4, r5, r6, pc}
   1653c:	andeq	ip, r2, r0, lsl r3
   16540:	subs	r3, r0, #0
   16544:	ldr	r2, [pc, #8]	; 16554 <__assert_fail@plt+0x5458>
   16548:	moveq	r3, r2
   1654c:	ldr	r0, [r3]
   16550:	bx	lr
   16554:	andeq	ip, r2, r0, lsl r3
   16558:	subs	r3, r0, #0
   1655c:	ldr	r2, [pc, #8]	; 1656c <__assert_fail@plt+0x5470>
   16560:	moveq	r3, r2
   16564:	str	r1, [r3]
   16568:	bx	lr
   1656c:	andeq	ip, r2, r0, lsl r3
   16570:	push	{lr}		; (str lr, [sp, #-4]!)
   16574:	subs	r3, r0, #0
   16578:	ldr	r0, [pc, #44]	; 165ac <__assert_fail@plt+0x54b0>
   1657c:	moveq	r3, r0
   16580:	add	r3, r3, #8
   16584:	lsr	lr, r1, #5
   16588:	and	r1, r1, #31
   1658c:	ldr	ip, [r3, lr, lsl #2]
   16590:	lsr	r0, ip, r1
   16594:	eor	r2, r2, r0
   16598:	and	r2, r2, #1
   1659c:	eor	r1, ip, r2, lsl r1
   165a0:	str	r1, [r3, lr, lsl #2]
   165a4:	and	r0, r0, #1
   165a8:	pop	{pc}		; (ldr pc, [sp], #4)
   165ac:	andeq	ip, r2, r0, lsl r3
   165b0:	subs	r3, r0, #0
   165b4:	ldr	r2, [pc, #12]	; 165c8 <__assert_fail@plt+0x54cc>
   165b8:	moveq	r3, r2
   165bc:	ldr	r0, [r3, #4]
   165c0:	str	r1, [r3, #4]
   165c4:	bx	lr
   165c8:	andeq	ip, r2, r0, lsl r3
   165cc:	subs	r3, r0, #0
   165d0:	ldr	r0, [pc, #40]	; 16600 <__assert_fail@plt+0x5504>
   165d4:	moveq	r3, r0
   165d8:	mov	r0, #10
   165dc:	str	r0, [r3]
   165e0:	cmp	r2, #0
   165e4:	cmpne	r1, #0
   165e8:	beq	165f8 <__assert_fail@plt+0x54fc>
   165ec:	str	r1, [r3, #40]	; 0x28
   165f0:	str	r2, [r3, #44]	; 0x2c
   165f4:	bx	lr
   165f8:	push	{r4, lr}
   165fc:	bl	110d8 <abort@plt>
   16600:	andeq	ip, r2, r0, lsl r3
   16604:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16608:	sub	sp, sp, #24
   1660c:	mov	r7, r0
   16610:	mov	r8, r1
   16614:	mov	r9, r2
   16618:	mov	sl, r3
   1661c:	ldr	r4, [sp, #56]	; 0x38
   16620:	cmp	r4, #0
   16624:	ldr	r3, [pc, #84]	; 16680 <__assert_fail@plt+0x5584>
   16628:	moveq	r4, r3
   1662c:	bl	11000 <__errno_location@plt>
   16630:	mov	r5, r0
   16634:	ldr	r6, [r0]
   16638:	ldr	r3, [r4, #44]	; 0x2c
   1663c:	str	r3, [sp, #16]
   16640:	ldr	r3, [r4, #40]	; 0x28
   16644:	str	r3, [sp, #12]
   16648:	add	r3, r4, #8
   1664c:	str	r3, [sp, #8]
   16650:	ldr	r3, [r4, #4]
   16654:	str	r3, [sp, #4]
   16658:	ldr	r3, [r4]
   1665c:	str	r3, [sp]
   16660:	mov	r3, sl
   16664:	mov	r2, r9
   16668:	mov	r1, r8
   1666c:	mov	r0, r7
   16670:	bl	151d4 <__assert_fail@plt+0x40d8>
   16674:	str	r6, [r5]
   16678:	add	sp, sp, #24
   1667c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16680:	andeq	ip, r2, r0, lsl r3
   16684:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16688:	sub	sp, sp, #44	; 0x2c
   1668c:	str	r0, [sp, #28]
   16690:	str	r1, [sp, #32]
   16694:	mov	r6, r2
   16698:	subs	r4, r3, #0
   1669c:	ldr	r3, [pc, #172]	; 16750 <__assert_fail@plt+0x5654>
   166a0:	moveq	r4, r3
   166a4:	bl	11000 <__errno_location@plt>
   166a8:	mov	r7, r0
   166ac:	ldr	fp, [r0]
   166b0:	ldr	r5, [r4, #4]
   166b4:	cmp	r6, #0
   166b8:	orreq	r5, r5, #1
   166bc:	add	r9, r4, #8
   166c0:	ldr	r3, [r4, #44]	; 0x2c
   166c4:	str	r3, [sp, #16]
   166c8:	ldr	r3, [r4, #40]	; 0x28
   166cc:	str	r3, [sp, #12]
   166d0:	str	r9, [sp, #8]
   166d4:	str	r5, [sp, #4]
   166d8:	ldr	r3, [r4]
   166dc:	str	r3, [sp]
   166e0:	ldr	r3, [sp, #32]
   166e4:	ldr	r2, [sp, #28]
   166e8:	mov	r1, #0
   166ec:	mov	r0, r1
   166f0:	bl	151d4 <__assert_fail@plt+0x40d8>
   166f4:	mov	sl, r0
   166f8:	add	r8, r0, #1
   166fc:	mov	r0, r8
   16700:	bl	170c4 <__assert_fail@plt+0x5fc8>
   16704:	str	r0, [sp, #36]	; 0x24
   16708:	ldr	r3, [r4, #44]	; 0x2c
   1670c:	str	r3, [sp, #16]
   16710:	ldr	r3, [r4, #40]	; 0x28
   16714:	str	r3, [sp, #12]
   16718:	str	r9, [sp, #8]
   1671c:	str	r5, [sp, #4]
   16720:	ldr	r3, [r4]
   16724:	str	r3, [sp]
   16728:	ldr	r3, [sp, #32]
   1672c:	ldr	r2, [sp, #28]
   16730:	mov	r1, r8
   16734:	bl	151d4 <__assert_fail@plt+0x40d8>
   16738:	str	fp, [r7]
   1673c:	cmp	r6, #0
   16740:	strne	sl, [r6]
   16744:	ldr	r0, [sp, #36]	; 0x24
   16748:	add	sp, sp, #44	; 0x2c
   1674c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16750:	andeq	ip, r2, r0, lsl r3
   16754:	push	{r4, lr}
   16758:	mov	r3, r2
   1675c:	mov	r2, #0
   16760:	bl	16684 <__assert_fail@plt+0x5588>
   16764:	pop	{r4, pc}
   16768:	push	{r4, r5, r6, r7, r8, lr}
   1676c:	ldr	r3, [pc, #140]	; 16800 <__assert_fail@plt+0x5704>
   16770:	ldr	r7, [r3]
   16774:	ldr	r3, [r3, #4]
   16778:	cmp	r3, #1
   1677c:	ble	167a8 <__assert_fail@plt+0x56ac>
   16780:	mov	r5, r7
   16784:	mov	r4, #1
   16788:	ldr	r6, [pc, #112]	; 16800 <__assert_fail@plt+0x5704>
   1678c:	ldr	r0, [r5, #12]
   16790:	bl	14b5c <__assert_fail@plt+0x3a60>
   16794:	add	r4, r4, #1
   16798:	add	r5, r5, #8
   1679c:	ldr	r3, [r6, #4]
   167a0:	cmp	r3, r4
   167a4:	bgt	1678c <__assert_fail@plt+0x5690>
   167a8:	ldr	r0, [r7, #4]
   167ac:	ldr	r3, [pc, #80]	; 16804 <__assert_fail@plt+0x5708>
   167b0:	cmp	r0, r3
   167b4:	beq	167d0 <__assert_fail@plt+0x56d4>
   167b8:	bl	14b5c <__assert_fail@plt+0x3a60>
   167bc:	ldr	r3, [pc, #60]	; 16800 <__assert_fail@plt+0x5704>
   167c0:	mov	r2, #256	; 0x100
   167c4:	str	r2, [r3, #8]
   167c8:	ldr	r2, [pc, #52]	; 16804 <__assert_fail@plt+0x5708>
   167cc:	str	r2, [r3, #12]
   167d0:	ldr	r3, [pc, #48]	; 16808 <__assert_fail@plt+0x570c>
   167d4:	cmp	r7, r3
   167d8:	beq	167f0 <__assert_fail@plt+0x56f4>
   167dc:	mov	r0, r7
   167e0:	bl	14b5c <__assert_fail@plt+0x3a60>
   167e4:	ldr	r3, [pc, #20]	; 16800 <__assert_fail@plt+0x5704>
   167e8:	add	r2, r3, #8
   167ec:	str	r2, [r3]
   167f0:	mov	r2, #1
   167f4:	ldr	r3, [pc, #4]	; 16800 <__assert_fail@plt+0x5704>
   167f8:	str	r2, [r3, #4]
   167fc:	pop	{r4, r5, r6, r7, r8, pc}
   16800:	andeq	ip, r2, r0, asr #2
   16804:	andeq	ip, r2, r0, lsl r2
   16808:	andeq	ip, r2, r8, asr #2
   1680c:	push	{r4, lr}
   16810:	ldr	r3, [pc, #8]	; 16820 <__assert_fail@plt+0x5724>
   16814:	mvn	r2, #0
   16818:	bl	16344 <__assert_fail@plt+0x5248>
   1681c:	pop	{r4, pc}
   16820:	andeq	ip, r2, r0, lsl r3
   16824:	push	{r4, lr}
   16828:	ldr	r3, [pc, #4]	; 16834 <__assert_fail@plt+0x5738>
   1682c:	bl	16344 <__assert_fail@plt+0x5248>
   16830:	pop	{r4, pc}
   16834:	andeq	ip, r2, r0, lsl r3
   16838:	push	{r4, lr}
   1683c:	mov	r1, r0
   16840:	mov	r0, #0
   16844:	bl	1680c <__assert_fail@plt+0x5710>
   16848:	pop	{r4, pc}
   1684c:	push	{r4, lr}
   16850:	mov	r2, r1
   16854:	mov	r1, r0
   16858:	mov	r0, #0
   1685c:	bl	16824 <__assert_fail@plt+0x5728>
   16860:	pop	{r4, pc}
   16864:	push	{r4, r5, lr}
   16868:	sub	sp, sp, #52	; 0x34
   1686c:	mov	r4, r0
   16870:	mov	r5, r2
   16874:	mov	r0, sp
   16878:	bl	1506c <__assert_fail@plt+0x3f70>
   1687c:	mov	r3, sp
   16880:	mvn	r2, #0
   16884:	mov	r1, r5
   16888:	mov	r0, r4
   1688c:	bl	16344 <__assert_fail@plt+0x5248>
   16890:	add	sp, sp, #52	; 0x34
   16894:	pop	{r4, r5, pc}
   16898:	push	{r4, r5, r6, lr}
   1689c:	sub	sp, sp, #48	; 0x30
   168a0:	mov	r4, r0
   168a4:	mov	r5, r2
   168a8:	mov	r6, r3
   168ac:	mov	r0, sp
   168b0:	bl	1506c <__assert_fail@plt+0x3f70>
   168b4:	mov	r3, sp
   168b8:	mov	r2, r6
   168bc:	mov	r1, r5
   168c0:	mov	r0, r4
   168c4:	bl	16344 <__assert_fail@plt+0x5248>
   168c8:	add	sp, sp, #48	; 0x30
   168cc:	pop	{r4, r5, r6, pc}
   168d0:	push	{r4, lr}
   168d4:	mov	r2, r1
   168d8:	mov	r1, r0
   168dc:	mov	r0, #0
   168e0:	bl	16864 <__assert_fail@plt+0x5768>
   168e4:	pop	{r4, pc}
   168e8:	push	{r4, lr}
   168ec:	mov	r3, r2
   168f0:	mov	r2, r1
   168f4:	mov	r1, r0
   168f8:	mov	r0, #0
   168fc:	bl	16898 <__assert_fail@plt+0x579c>
   16900:	pop	{r4, pc}
   16904:	push	{r4, r5, r6, lr}
   16908:	sub	sp, sp, #48	; 0x30
   1690c:	mov	r4, r0
   16910:	mov	r5, r1
   16914:	mov	r6, r2
   16918:	mov	ip, sp
   1691c:	ldr	lr, [pc, #64]	; 16964 <__assert_fail@plt+0x5868>
   16920:	ldm	lr!, {r0, r1, r2, r3}
   16924:	stmia	ip!, {r0, r1, r2, r3}
   16928:	ldm	lr!, {r0, r1, r2, r3}
   1692c:	stmia	ip!, {r0, r1, r2, r3}
   16930:	ldm	lr, {r0, r1, r2, r3}
   16934:	stm	ip, {r0, r1, r2, r3}
   16938:	mov	r2, #1
   1693c:	mov	r1, r6
   16940:	mov	r0, sp
   16944:	bl	16570 <__assert_fail@plt+0x5474>
   16948:	mov	r3, sp
   1694c:	mov	r2, r5
   16950:	mov	r1, r4
   16954:	mov	r0, #0
   16958:	bl	16344 <__assert_fail@plt+0x5248>
   1695c:	add	sp, sp, #48	; 0x30
   16960:	pop	{r4, r5, r6, pc}
   16964:	andeq	ip, r2, r0, lsl r3
   16968:	push	{r4, lr}
   1696c:	mov	r2, r1
   16970:	mvn	r1, #0
   16974:	bl	16904 <__assert_fail@plt+0x5808>
   16978:	pop	{r4, pc}
   1697c:	push	{r4, lr}
   16980:	mov	r1, #58	; 0x3a
   16984:	bl	16968 <__assert_fail@plt+0x586c>
   16988:	pop	{r4, pc}
   1698c:	push	{r4, lr}
   16990:	mov	r2, #58	; 0x3a
   16994:	bl	16904 <__assert_fail@plt+0x5808>
   16998:	pop	{r4, pc}
   1699c:	push	{r4, r5, lr}
   169a0:	sub	sp, sp, #100	; 0x64
   169a4:	mov	r4, r0
   169a8:	mov	r5, r2
   169ac:	mov	r0, sp
   169b0:	bl	1506c <__assert_fail@plt+0x3f70>
   169b4:	add	lr, sp, #48	; 0x30
   169b8:	mov	ip, sp
   169bc:	ldm	ip!, {r0, r1, r2, r3}
   169c0:	stmia	lr!, {r0, r1, r2, r3}
   169c4:	ldm	ip!, {r0, r1, r2, r3}
   169c8:	stmia	lr!, {r0, r1, r2, r3}
   169cc:	ldm	ip, {r0, r1, r2, r3}
   169d0:	stm	lr, {r0, r1, r2, r3}
   169d4:	mov	r2, #1
   169d8:	mov	r1, #58	; 0x3a
   169dc:	add	r0, sp, #48	; 0x30
   169e0:	bl	16570 <__assert_fail@plt+0x5474>
   169e4:	add	r3, sp, #48	; 0x30
   169e8:	mvn	r2, #0
   169ec:	mov	r1, r5
   169f0:	mov	r0, r4
   169f4:	bl	16344 <__assert_fail@plt+0x5248>
   169f8:	add	sp, sp, #100	; 0x64
   169fc:	pop	{r4, r5, pc}
   16a00:	push	{r4, r5, r6, r7, lr}
   16a04:	sub	sp, sp, #52	; 0x34
   16a08:	mov	r4, r0
   16a0c:	mov	r6, r1
   16a10:	mov	r7, r2
   16a14:	mov	r5, r3
   16a18:	mov	ip, sp
   16a1c:	ldr	lr, [pc, #64]	; 16a64 <__assert_fail@plt+0x5968>
   16a20:	ldm	lr!, {r0, r1, r2, r3}
   16a24:	stmia	ip!, {r0, r1, r2, r3}
   16a28:	ldm	lr!, {r0, r1, r2, r3}
   16a2c:	stmia	ip!, {r0, r1, r2, r3}
   16a30:	ldm	lr, {r0, r1, r2, r3}
   16a34:	stm	ip, {r0, r1, r2, r3}
   16a38:	mov	r2, r7
   16a3c:	mov	r1, r6
   16a40:	mov	r0, sp
   16a44:	bl	165cc <__assert_fail@plt+0x54d0>
   16a48:	mov	r3, sp
   16a4c:	ldr	r2, [sp, #72]	; 0x48
   16a50:	mov	r1, r5
   16a54:	mov	r0, r4
   16a58:	bl	16344 <__assert_fail@plt+0x5248>
   16a5c:	add	sp, sp, #52	; 0x34
   16a60:	pop	{r4, r5, r6, r7, pc}
   16a64:	andeq	ip, r2, r0, lsl r3
   16a68:	push	{lr}		; (str lr, [sp, #-4]!)
   16a6c:	sub	sp, sp, #12
   16a70:	mvn	ip, #0
   16a74:	str	ip, [sp]
   16a78:	bl	16a00 <__assert_fail@plt+0x5904>
   16a7c:	add	sp, sp, #12
   16a80:	pop	{pc}		; (ldr pc, [sp], #4)
   16a84:	push	{r4, lr}
   16a88:	mov	r3, r2
   16a8c:	mov	r2, r1
   16a90:	mov	r1, r0
   16a94:	mov	r0, #0
   16a98:	bl	16a68 <__assert_fail@plt+0x596c>
   16a9c:	pop	{r4, pc}
   16aa0:	push	{lr}		; (str lr, [sp, #-4]!)
   16aa4:	sub	sp, sp, #12
   16aa8:	str	r3, [sp]
   16aac:	mov	r3, r2
   16ab0:	mov	r2, r1
   16ab4:	mov	r1, r0
   16ab8:	mov	r0, #0
   16abc:	bl	16a00 <__assert_fail@plt+0x5904>
   16ac0:	add	sp, sp, #12
   16ac4:	pop	{pc}		; (ldr pc, [sp], #4)
   16ac8:	push	{r4, lr}
   16acc:	ldr	r3, [pc, #4]	; 16ad8 <__assert_fail@plt+0x59dc>
   16ad0:	bl	16344 <__assert_fail@plt+0x5248>
   16ad4:	pop	{r4, pc}
   16ad8:	andeq	ip, r2, r0, asr r1
   16adc:	push	{r4, lr}
   16ae0:	mov	r2, r1
   16ae4:	mov	r1, r0
   16ae8:	mov	r0, #0
   16aec:	bl	16ac8 <__assert_fail@plt+0x59cc>
   16af0:	pop	{r4, pc}
   16af4:	push	{r4, lr}
   16af8:	mvn	r2, #0
   16afc:	bl	16ac8 <__assert_fail@plt+0x59cc>
   16b00:	pop	{r4, pc}
   16b04:	push	{r4, lr}
   16b08:	mov	r1, r0
   16b0c:	mov	r0, #0
   16b10:	bl	16af4 <__assert_fail@plt+0x59f8>
   16b14:	pop	{r4, pc}
   16b18:	push	{r4, r5, r6, lr}
   16b1c:	sub	sp, sp, #32
   16b20:	mov	r4, r0
   16b24:	ldr	r5, [sp, #48]	; 0x30
   16b28:	ldr	r6, [sp, #52]	; 0x34
   16b2c:	cmp	r1, #0
   16b30:	beq	16be8 <__assert_fail@plt+0x5aec>
   16b34:	str	r3, [sp, #4]
   16b38:	str	r2, [sp]
   16b3c:	mov	r3, r1
   16b40:	ldr	r2, [pc, #940]	; 16ef4 <__assert_fail@plt+0x5df8>
   16b44:	mov	r1, #1
   16b48:	bl	1103c <__fprintf_chk@plt>
   16b4c:	mov	r2, #5
   16b50:	ldr	r1, [pc, #928]	; 16ef8 <__assert_fail@plt+0x5dfc>
   16b54:	mov	r0, #0
   16b58:	bl	10ef8 <dcgettext@plt>
   16b5c:	ldr	r3, [pc, #920]	; 16efc <__assert_fail@plt+0x5e00>
   16b60:	str	r3, [sp]
   16b64:	mov	r3, r0
   16b68:	ldr	r2, [pc, #912]	; 16f00 <__assert_fail@plt+0x5e04>
   16b6c:	mov	r1, #1
   16b70:	mov	r0, r4
   16b74:	bl	1103c <__fprintf_chk@plt>
   16b78:	mov	r1, r4
   16b7c:	mov	r0, #10
   16b80:	bl	10eec <fputc_unlocked@plt>
   16b84:	mov	r2, #5
   16b88:	ldr	r1, [pc, #884]	; 16f04 <__assert_fail@plt+0x5e08>
   16b8c:	mov	r0, #0
   16b90:	bl	10ef8 <dcgettext@plt>
   16b94:	ldr	r3, [pc, #876]	; 16f08 <__assert_fail@plt+0x5e0c>
   16b98:	mov	r2, r0
   16b9c:	mov	r1, #1
   16ba0:	mov	r0, r4
   16ba4:	bl	1103c <__fprintf_chk@plt>
   16ba8:	mov	r1, r4
   16bac:	mov	r0, #10
   16bb0:	bl	10eec <fputc_unlocked@plt>
   16bb4:	cmp	r6, #9
   16bb8:	ldrls	pc, [pc, r6, lsl #2]
   16bbc:	b	16e8c <__assert_fail@plt+0x5d90>
   16bc0:	andeq	r6, r1, r4, lsr #24
   16bc4:	andeq	r6, r1, r0, lsl #24
   16bc8:	andeq	r6, r1, ip, lsr #24
   16bcc:	andeq	r6, r1, ip, asr ip
   16bd0:	muleq	r1, r4, ip
   16bd4:	ldrdeq	r6, [r1], -r4
   16bd8:	andeq	r6, r1, ip, lsl sp
   16bdc:	andeq	r6, r1, ip, ror #26
   16be0:	andeq	r6, r1, r4, asr #27
   16be4:	andeq	r6, r1, r4, lsr #28
   16be8:	str	r3, [sp]
   16bec:	mov	r3, r2
   16bf0:	ldr	r2, [pc, #788]	; 16f0c <__assert_fail@plt+0x5e10>
   16bf4:	mov	r1, #1
   16bf8:	bl	1103c <__fprintf_chk@plt>
   16bfc:	b	16b4c <__assert_fail@plt+0x5a50>
   16c00:	mov	r2, #5
   16c04:	ldr	r1, [pc, #772]	; 16f10 <__assert_fail@plt+0x5e14>
   16c08:	mov	r0, #0
   16c0c:	bl	10ef8 <dcgettext@plt>
   16c10:	ldr	r3, [r5]
   16c14:	mov	r2, r0
   16c18:	mov	r1, #1
   16c1c:	mov	r0, r4
   16c20:	bl	1103c <__fprintf_chk@plt>
   16c24:	add	sp, sp, #32
   16c28:	pop	{r4, r5, r6, pc}
   16c2c:	mov	r2, #5
   16c30:	ldr	r1, [pc, #732]	; 16f14 <__assert_fail@plt+0x5e18>
   16c34:	mov	r0, #0
   16c38:	bl	10ef8 <dcgettext@plt>
   16c3c:	ldr	r3, [r5]
   16c40:	ldr	r2, [r5, #4]
   16c44:	str	r2, [sp]
   16c48:	mov	r2, r0
   16c4c:	mov	r1, #1
   16c50:	mov	r0, r4
   16c54:	bl	1103c <__fprintf_chk@plt>
   16c58:	b	16c24 <__assert_fail@plt+0x5b28>
   16c5c:	mov	r2, #5
   16c60:	ldr	r1, [pc, #688]	; 16f18 <__assert_fail@plt+0x5e1c>
   16c64:	mov	r0, #0
   16c68:	bl	10ef8 <dcgettext@plt>
   16c6c:	ldr	r3, [r5]
   16c70:	ldr	r2, [r5, #8]
   16c74:	str	r2, [sp, #4]
   16c78:	ldr	r2, [r5, #4]
   16c7c:	str	r2, [sp]
   16c80:	mov	r2, r0
   16c84:	mov	r1, #1
   16c88:	mov	r0, r4
   16c8c:	bl	1103c <__fprintf_chk@plt>
   16c90:	b	16c24 <__assert_fail@plt+0x5b28>
   16c94:	mov	r2, #5
   16c98:	ldr	r1, [pc, #636]	; 16f1c <__assert_fail@plt+0x5e20>
   16c9c:	mov	r0, #0
   16ca0:	bl	10ef8 <dcgettext@plt>
   16ca4:	ldr	r3, [r5]
   16ca8:	ldr	r2, [r5, #12]
   16cac:	str	r2, [sp, #8]
   16cb0:	ldr	r2, [r5, #8]
   16cb4:	str	r2, [sp, #4]
   16cb8:	ldr	r2, [r5, #4]
   16cbc:	str	r2, [sp]
   16cc0:	mov	r2, r0
   16cc4:	mov	r1, #1
   16cc8:	mov	r0, r4
   16ccc:	bl	1103c <__fprintf_chk@plt>
   16cd0:	b	16c24 <__assert_fail@plt+0x5b28>
   16cd4:	mov	r2, #5
   16cd8:	ldr	r1, [pc, #576]	; 16f20 <__assert_fail@plt+0x5e24>
   16cdc:	mov	r0, #0
   16ce0:	bl	10ef8 <dcgettext@plt>
   16ce4:	ldr	r3, [r5]
   16ce8:	ldr	r2, [r5, #16]
   16cec:	str	r2, [sp, #12]
   16cf0:	ldr	r2, [r5, #12]
   16cf4:	str	r2, [sp, #8]
   16cf8:	ldr	r2, [r5, #8]
   16cfc:	str	r2, [sp, #4]
   16d00:	ldr	r2, [r5, #4]
   16d04:	str	r2, [sp]
   16d08:	mov	r2, r0
   16d0c:	mov	r1, #1
   16d10:	mov	r0, r4
   16d14:	bl	1103c <__fprintf_chk@plt>
   16d18:	b	16c24 <__assert_fail@plt+0x5b28>
   16d1c:	mov	r2, #5
   16d20:	ldr	r1, [pc, #508]	; 16f24 <__assert_fail@plt+0x5e28>
   16d24:	mov	r0, #0
   16d28:	bl	10ef8 <dcgettext@plt>
   16d2c:	ldr	r3, [r5]
   16d30:	ldr	r2, [r5, #20]
   16d34:	str	r2, [sp, #16]
   16d38:	ldr	r2, [r5, #16]
   16d3c:	str	r2, [sp, #12]
   16d40:	ldr	r2, [r5, #12]
   16d44:	str	r2, [sp, #8]
   16d48:	ldr	r2, [r5, #8]
   16d4c:	str	r2, [sp, #4]
   16d50:	ldr	r2, [r5, #4]
   16d54:	str	r2, [sp]
   16d58:	mov	r2, r0
   16d5c:	mov	r1, #1
   16d60:	mov	r0, r4
   16d64:	bl	1103c <__fprintf_chk@plt>
   16d68:	b	16c24 <__assert_fail@plt+0x5b28>
   16d6c:	mov	r2, #5
   16d70:	ldr	r1, [pc, #432]	; 16f28 <__assert_fail@plt+0x5e2c>
   16d74:	mov	r0, #0
   16d78:	bl	10ef8 <dcgettext@plt>
   16d7c:	ldr	r3, [r5]
   16d80:	ldr	r2, [r5, #24]
   16d84:	str	r2, [sp, #20]
   16d88:	ldr	r2, [r5, #20]
   16d8c:	str	r2, [sp, #16]
   16d90:	ldr	r2, [r5, #16]
   16d94:	str	r2, [sp, #12]
   16d98:	ldr	r2, [r5, #12]
   16d9c:	str	r2, [sp, #8]
   16da0:	ldr	r2, [r5, #8]
   16da4:	str	r2, [sp, #4]
   16da8:	ldr	r2, [r5, #4]
   16dac:	str	r2, [sp]
   16db0:	mov	r2, r0
   16db4:	mov	r1, #1
   16db8:	mov	r0, r4
   16dbc:	bl	1103c <__fprintf_chk@plt>
   16dc0:	b	16c24 <__assert_fail@plt+0x5b28>
   16dc4:	mov	r2, #5
   16dc8:	ldr	r1, [pc, #348]	; 16f2c <__assert_fail@plt+0x5e30>
   16dcc:	mov	r0, #0
   16dd0:	bl	10ef8 <dcgettext@plt>
   16dd4:	ldr	r3, [r5]
   16dd8:	ldr	r2, [r5, #28]
   16ddc:	str	r2, [sp, #24]
   16de0:	ldr	r2, [r5, #24]
   16de4:	str	r2, [sp, #20]
   16de8:	ldr	r2, [r5, #20]
   16dec:	str	r2, [sp, #16]
   16df0:	ldr	r2, [r5, #16]
   16df4:	str	r2, [sp, #12]
   16df8:	ldr	r2, [r5, #12]
   16dfc:	str	r2, [sp, #8]
   16e00:	ldr	r2, [r5, #8]
   16e04:	str	r2, [sp, #4]
   16e08:	ldr	r2, [r5, #4]
   16e0c:	str	r2, [sp]
   16e10:	mov	r2, r0
   16e14:	mov	r1, #1
   16e18:	mov	r0, r4
   16e1c:	bl	1103c <__fprintf_chk@plt>
   16e20:	b	16c24 <__assert_fail@plt+0x5b28>
   16e24:	mov	r2, #5
   16e28:	ldr	r1, [pc, #256]	; 16f30 <__assert_fail@plt+0x5e34>
   16e2c:	mov	r0, #0
   16e30:	bl	10ef8 <dcgettext@plt>
   16e34:	ldr	r3, [r5]
   16e38:	ldr	r2, [r5, #32]
   16e3c:	str	r2, [sp, #28]
   16e40:	ldr	r2, [r5, #28]
   16e44:	str	r2, [sp, #24]
   16e48:	ldr	r2, [r5, #24]
   16e4c:	str	r2, [sp, #20]
   16e50:	ldr	r2, [r5, #20]
   16e54:	str	r2, [sp, #16]
   16e58:	ldr	r2, [r5, #16]
   16e5c:	str	r2, [sp, #12]
   16e60:	ldr	r2, [r5, #12]
   16e64:	str	r2, [sp, #8]
   16e68:	ldr	r2, [r5, #8]
   16e6c:	str	r2, [sp, #4]
   16e70:	ldr	r2, [r5, #4]
   16e74:	str	r2, [sp]
   16e78:	mov	r2, r0
   16e7c:	mov	r1, #1
   16e80:	mov	r0, r4
   16e84:	bl	1103c <__fprintf_chk@plt>
   16e88:	b	16c24 <__assert_fail@plt+0x5b28>
   16e8c:	mov	r2, #5
   16e90:	ldr	r1, [pc, #156]	; 16f34 <__assert_fail@plt+0x5e38>
   16e94:	mov	r0, #0
   16e98:	bl	10ef8 <dcgettext@plt>
   16e9c:	ldr	r3, [r5]
   16ea0:	ldr	r2, [r5, #32]
   16ea4:	str	r2, [sp, #28]
   16ea8:	ldr	r2, [r5, #28]
   16eac:	str	r2, [sp, #24]
   16eb0:	ldr	r2, [r5, #24]
   16eb4:	str	r2, [sp, #20]
   16eb8:	ldr	r2, [r5, #20]
   16ebc:	str	r2, [sp, #16]
   16ec0:	ldr	r2, [r5, #16]
   16ec4:	str	r2, [sp, #12]
   16ec8:	ldr	r2, [r5, #12]
   16ecc:	str	r2, [sp, #8]
   16ed0:	ldr	r2, [r5, #8]
   16ed4:	str	r2, [sp, #4]
   16ed8:	ldr	r2, [r5, #4]
   16edc:	str	r2, [sp]
   16ee0:	mov	r2, r0
   16ee4:	mov	r1, #1
   16ee8:	mov	r0, r4
   16eec:	bl	1103c <__fprintf_chk@plt>
   16ef0:	b	16c24 <__assert_fail@plt+0x5b28>
   16ef4:	andeq	fp, r1, r4, lsr #3
   16ef8:			; <UNDEFINED> instruction: 0x0001b1b8
   16efc:	andeq	r0, r0, r6, ror #15
   16f00:	muleq	r1, r0, r4
   16f04:			; <UNDEFINED> instruction: 0x0001b1bc
   16f08:	andeq	fp, r1, r8, ror #4
   16f0c:			; <UNDEFINED> instruction: 0x0001b1b0
   16f10:	andeq	fp, r1, ip, lsl #5
   16f14:	muleq	r1, ip, r2
   16f18:			; <UNDEFINED> instruction: 0x0001b2b4
   16f1c:	ldrdeq	fp, [r1], -r0
   16f20:	strdeq	fp, [r1], -r0
   16f24:	andeq	fp, r1, r4, lsl r3
   16f28:	andeq	fp, r1, ip, lsr r3
   16f2c:	andeq	fp, r1, r8, ror #6
   16f30:	muleq	r1, r8, r3
   16f34:	andeq	fp, r1, ip, asr #7
   16f38:	push	{r4, r5, lr}
   16f3c:	sub	sp, sp, #12
   16f40:	ldr	r5, [sp, #24]
   16f44:	ldr	ip, [r5]
   16f48:	cmp	ip, #0
   16f4c:	beq	16f7c <__assert_fail@plt+0x5e80>
   16f50:	mov	lr, r5
   16f54:	mov	ip, #0
   16f58:	add	ip, ip, #1
   16f5c:	ldr	r4, [lr, #4]!
   16f60:	cmp	r4, #0
   16f64:	bne	16f58 <__assert_fail@plt+0x5e5c>
   16f68:	str	ip, [sp, #4]
   16f6c:	str	r5, [sp]
   16f70:	bl	16b18 <__assert_fail@plt+0x5a1c>
   16f74:	add	sp, sp, #12
   16f78:	pop	{r4, r5, pc}
   16f7c:	mov	ip, #0
   16f80:	b	16f68 <__assert_fail@plt+0x5e6c>
   16f84:	push	{r4, r5, lr}
   16f88:	sub	sp, sp, #52	; 0x34
   16f8c:	ldr	r4, [sp, #64]	; 0x40
   16f90:	sub	r4, r4, #4
   16f94:	add	r5, sp, #4
   16f98:	mov	ip, #0
   16f9c:	ldr	lr, [r4, #4]!
   16fa0:	str	lr, [r5, #4]!
   16fa4:	cmp	lr, #0
   16fa8:	beq	16fb8 <__assert_fail@plt+0x5ebc>
   16fac:	add	ip, ip, #1
   16fb0:	cmp	ip, #10
   16fb4:	bne	16f9c <__assert_fail@plt+0x5ea0>
   16fb8:	str	ip, [sp, #4]
   16fbc:	add	ip, sp, #8
   16fc0:	str	ip, [sp]
   16fc4:	bl	16b18 <__assert_fail@plt+0x5a1c>
   16fc8:	add	sp, sp, #52	; 0x34
   16fcc:	pop	{r4, r5, pc}
   16fd0:	push	{r3}		; (str r3, [sp, #-4]!)
   16fd4:	push	{lr}		; (str lr, [sp, #-4]!)
   16fd8:	sub	sp, sp, #16
   16fdc:	add	r3, sp, #24
   16fe0:	str	r3, [sp, #12]
   16fe4:	str	r3, [sp]
   16fe8:	ldr	r3, [sp, #20]
   16fec:	bl	16f84 <__assert_fail@plt+0x5e88>
   16ff0:	add	sp, sp, #16
   16ff4:	pop	{lr}		; (ldr lr, [sp], #4)
   16ff8:	add	sp, sp, #4
   16ffc:	bx	lr
   17000:	push	{r4, lr}
   17004:	ldr	r3, [pc, #112]	; 1707c <__assert_fail@plt+0x5f80>
   17008:	ldr	r1, [r3]
   1700c:	mov	r0, #10
   17010:	bl	10eec <fputc_unlocked@plt>
   17014:	mov	r2, #5
   17018:	ldr	r1, [pc, #96]	; 17080 <__assert_fail@plt+0x5f84>
   1701c:	mov	r0, #0
   17020:	bl	10ef8 <dcgettext@plt>
   17024:	ldr	r2, [pc, #88]	; 17084 <__assert_fail@plt+0x5f88>
   17028:	mov	r1, r0
   1702c:	mov	r0, #1
   17030:	bl	11024 <__printf_chk@plt>
   17034:	mov	r2, #5
   17038:	ldr	r1, [pc, #72]	; 17088 <__assert_fail@plt+0x5f8c>
   1703c:	mov	r0, #0
   17040:	bl	10ef8 <dcgettext@plt>
   17044:	ldr	r3, [pc, #64]	; 1708c <__assert_fail@plt+0x5f90>
   17048:	ldr	r2, [pc, #64]	; 17090 <__assert_fail@plt+0x5f94>
   1704c:	mov	r1, r0
   17050:	mov	r0, #1
   17054:	bl	11024 <__printf_chk@plt>
   17058:	mov	r2, #5
   1705c:	ldr	r1, [pc, #48]	; 17094 <__assert_fail@plt+0x5f98>
   17060:	mov	r0, #0
   17064:	bl	10ef8 <dcgettext@plt>
   17068:	ldr	r2, [pc, #40]	; 17098 <__assert_fail@plt+0x5f9c>
   1706c:	mov	r1, r0
   17070:	mov	r0, #1
   17074:	bl	11024 <__printf_chk@plt>
   17078:	pop	{r4, pc}
   1707c:	muleq	r2, ip, r1
   17080:	andeq	fp, r1, r8, lsl #8
   17084:	andeq	fp, r1, ip, lsl r4
   17088:	andeq	fp, r1, r4, lsr r4
   1708c:	andeq	sl, r1, r4, lsr #17
   17090:	andeq	sl, r1, ip, asr #17
   17094:	andeq	fp, r1, r8, asr #8
   17098:	andeq	fp, r1, r0, ror r4
   1709c:	push	{r4, lr}
   170a0:	bl	181bc <__assert_fail@plt+0x70c0>
   170a4:	cmp	r0, #0
   170a8:	popne	{r4, pc}
   170ac:	bl	17640 <__assert_fail@plt+0x6544>
   170b0:	push	{r4, lr}
   170b4:	bl	181bc <__assert_fail@plt+0x70c0>
   170b8:	cmp	r0, #0
   170bc:	popne	{r4, pc}
   170c0:	bl	17640 <__assert_fail@plt+0x6544>
   170c4:	push	{r4, lr}
   170c8:	bl	1709c <__assert_fail@plt+0x5fa0>
   170cc:	pop	{r4, pc}
   170d0:	push	{r4, r5, r6, lr}
   170d4:	mov	r5, r0
   170d8:	mov	r4, r1
   170dc:	bl	181ec <__assert_fail@plt+0x70f0>
   170e0:	cmp	r0, #0
   170e4:	popne	{r4, r5, r6, pc}
   170e8:	adds	r4, r4, #0
   170ec:	movne	r4, #1
   170f0:	cmp	r5, #0
   170f4:	orreq	r4, r4, #1
   170f8:	cmp	r4, #0
   170fc:	popeq	{r4, r5, r6, pc}
   17100:	bl	17640 <__assert_fail@plt+0x6544>
   17104:	push	{r4, lr}
   17108:	cmp	r1, #0
   1710c:	orreq	r1, r1, #1
   17110:	bl	181ec <__assert_fail@plt+0x70f0>
   17114:	cmp	r0, #0
   17118:	popne	{r4, pc}
   1711c:	bl	17640 <__assert_fail@plt+0x6544>
   17120:	push	{r4, r5, r6, lr}
   17124:	mov	r6, r0
   17128:	mov	r5, r1
   1712c:	mov	r4, r2
   17130:	bl	184f4 <__assert_fail@plt+0x73f8>
   17134:	cmp	r0, #0
   17138:	popne	{r4, r5, r6, pc}
   1713c:	cmp	r6, #0
   17140:	beq	17150 <__assert_fail@plt+0x6054>
   17144:	cmp	r5, #0
   17148:	cmpne	r4, #0
   1714c:	popeq	{r4, r5, r6, pc}
   17150:	bl	17640 <__assert_fail@plt+0x6544>
   17154:	push	{r4, lr}
   17158:	bl	17120 <__assert_fail@plt+0x6024>
   1715c:	pop	{r4, pc}
   17160:	push	{r4, lr}
   17164:	mov	ip, r1
   17168:	mov	r3, r2
   1716c:	cmp	r2, #0
   17170:	cmpne	r1, #0
   17174:	moveq	r3, #1
   17178:	moveq	ip, r3
   1717c:	mov	r2, r3
   17180:	mov	r1, ip
   17184:	bl	184f4 <__assert_fail@plt+0x73f8>
   17188:	cmp	r0, #0
   1718c:	popne	{r4, pc}
   17190:	bl	17640 <__assert_fail@plt+0x6544>
   17194:	push	{r4, lr}
   17198:	mov	r2, r1
   1719c:	mov	r1, r0
   171a0:	mov	r0, #0
   171a4:	bl	17120 <__assert_fail@plt+0x6024>
   171a8:	pop	{r4, pc}
   171ac:	push	{r4, lr}
   171b0:	mov	r2, r1
   171b4:	mov	r1, r0
   171b8:	mov	r0, #0
   171bc:	bl	17160 <__assert_fail@plt+0x6064>
   171c0:	pop	{r4, pc}
   171c4:	push	{r4, r5, r6, r7, r8, lr}
   171c8:	mov	r5, r1
   171cc:	mov	r6, r2
   171d0:	ldr	r4, [r1]
   171d4:	subs	r7, r0, #0
   171d8:	beq	171f4 <__assert_fail@plt+0x60f8>
   171dc:	lsr	r2, r4, #1
   171e0:	add	r3, r2, #1
   171e4:	mvn	r3, r3
   171e8:	cmp	r4, r3
   171ec:	bls	17218 <__assert_fail@plt+0x611c>
   171f0:	bl	17640 <__assert_fail@plt+0x6544>
   171f4:	cmp	r4, #0
   171f8:	bne	17220 <__assert_fail@plt+0x6124>
   171fc:	mov	r1, r2
   17200:	mov	r0, #64	; 0x40
   17204:	bl	18648 <__assert_fail@plt+0x754c>
   17208:	cmp	r0, #0
   1720c:	movne	r4, r0
   17210:	addeq	r4, r0, #1
   17214:	b	17220 <__assert_fail@plt+0x6124>
   17218:	add	r4, r4, #1
   1721c:	add	r4, r4, r2
   17220:	mov	r2, r6
   17224:	mov	r1, r4
   17228:	mov	r0, r7
   1722c:	bl	17120 <__assert_fail@plt+0x6024>
   17230:	str	r4, [r5]
   17234:	pop	{r4, r5, r6, r7, r8, pc}
   17238:	push	{r4, lr}
   1723c:	mov	r2, #1
   17240:	bl	171c4 <__assert_fail@plt+0x60c8>
   17244:	pop	{r4, pc}
   17248:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1724c:	sub	sp, sp, #12
   17250:	mov	fp, r0
   17254:	mov	sl, r1
   17258:	mov	r9, r2
   1725c:	mov	r7, r3
   17260:	ldr	r6, [sp, #48]	; 0x30
   17264:	ldr	r5, [r1]
   17268:	asrs	r4, r5, #1
   1726c:	bmi	173c8 <__assert_fail@plt+0x62cc>
   17270:	cmp	r5, #0
   17274:	blt	173dc <__assert_fail@plt+0x62e0>
   17278:	mvn	r3, #-2147483648	; 0x80000000
   1727c:	sub	r3, r3, r4
   17280:	cmp	r5, r3
   17284:	movle	r3, #0
   17288:	movgt	r3, #1
   1728c:	cmp	r3, #0
   17290:	addeq	r4, r4, r5
   17294:	mvnne	r4, #-2147483648	; 0x80000000
   17298:	mvn	r8, r7
   1729c:	lsr	r8, r8, #31
   172a0:	cmp	r7, r4
   172a4:	movge	r3, #0
   172a8:	andlt	r3, r8, #1
   172ac:	cmp	r3, #0
   172b0:	movne	r4, r7
   172b4:	cmp	r6, #0
   172b8:	blt	173f0 <__assert_fail@plt+0x62f4>
   172bc:	cmp	r6, #0
   172c0:	beq	1749c <__assert_fail@plt+0x63a0>
   172c4:	cmp	r4, #0
   172c8:	blt	1744c <__assert_fail@plt+0x6350>
   172cc:	mov	r1, r6
   172d0:	mvn	r0, #-2147483648	; 0x80000000
   172d4:	bl	18854 <__assert_fail@plt+0x7758>
   172d8:	cmp	r0, r4
   172dc:	movge	r0, #0
   172e0:	movlt	r0, #1
   172e4:	cmp	r0, #0
   172e8:	mvnne	r3, #-2147483648	; 0x80000000
   172ec:	strne	r3, [sp, #4]
   172f0:	beq	17484 <__assert_fail@plt+0x6388>
   172f4:	mov	r1, r6
   172f8:	ldr	r0, [sp, #4]
   172fc:	bl	18854 <__assert_fail@plt+0x7758>
   17300:	mov	r4, r0
   17304:	mov	r1, r6
   17308:	ldr	r0, [sp, #4]
   1730c:	bl	18a74 <__assert_fail@plt+0x7978>
   17310:	ldr	r3, [sp, #4]
   17314:	sub	r1, r3, r1
   17318:	cmp	fp, #0
   1731c:	moveq	r3, #0
   17320:	streq	r3, [sl]
   17324:	sub	r3, r4, r5
   17328:	cmp	r3, r9
   1732c:	bge	173b4 <__assert_fail@plt+0x62b8>
   17330:	cmp	r9, #0
   17334:	blt	174a8 <__assert_fail@plt+0x63ac>
   17338:	cmp	r5, #0
   1733c:	blt	174bc <__assert_fail@plt+0x63c0>
   17340:	mvn	r3, #-2147483648	; 0x80000000
   17344:	sub	r3, r3, r9
   17348:	cmp	r5, r3
   1734c:	movle	r3, #0
   17350:	movgt	r3, #1
   17354:	cmp	r3, #0
   17358:	bne	17564 <__assert_fail@plt+0x6468>
   1735c:	add	r5, r5, r9
   17360:	mov	r4, r5
   17364:	cmp	r7, r5
   17368:	movge	r7, #0
   1736c:	andlt	r7, r8, #1
   17370:	cmp	r7, #0
   17374:	bne	17564 <__assert_fail@plt+0x6468>
   17378:	cmp	r6, #0
   1737c:	blt	174d0 <__assert_fail@plt+0x63d4>
   17380:	cmp	r6, #0
   17384:	beq	173b0 <__assert_fail@plt+0x62b4>
   17388:	cmp	r5, #0
   1738c:	blt	1752c <__assert_fail@plt+0x6430>
   17390:	mov	r1, r6
   17394:	mvn	r0, #-2147483648	; 0x80000000
   17398:	bl	18854 <__assert_fail@plt+0x7758>
   1739c:	cmp	r5, r0
   173a0:	movle	r0, #0
   173a4:	movgt	r0, #1
   173a8:	cmp	r0, #0
   173ac:	bne	17564 <__assert_fail@plt+0x6468>
   173b0:	mul	r1, r5, r6
   173b4:	mov	r0, fp
   173b8:	bl	170d0 <__assert_fail@plt+0x5fd4>
   173bc:	str	r4, [sl]
   173c0:	add	sp, sp, #12
   173c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   173c8:	rsb	r3, r4, #-2147483648	; 0x80000000
   173cc:	cmp	r5, r3
   173d0:	movge	r3, #0
   173d4:	movlt	r3, #1
   173d8:	b	1728c <__assert_fail@plt+0x6190>
   173dc:	rsb	r3, r5, #-2147483648	; 0x80000000
   173e0:	cmp	r4, r3
   173e4:	movge	r3, #0
   173e8:	movlt	r3, #1
   173ec:	b	1728c <__assert_fail@plt+0x6190>
   173f0:	cmp	r4, #0
   173f4:	blt	1741c <__assert_fail@plt+0x6320>
   173f8:	cmn	r6, #1
   173fc:	beq	17438 <__assert_fail@plt+0x633c>
   17400:	mov	r1, r6
   17404:	mov	r0, #-2147483648	; 0x80000000
   17408:	bl	18854 <__assert_fail@plt+0x7758>
   1740c:	cmp	r0, r4
   17410:	movge	r0, #0
   17414:	movlt	r0, #1
   17418:	b	172e4 <__assert_fail@plt+0x61e8>
   1741c:	mov	r1, r6
   17420:	mvn	r0, #-2147483648	; 0x80000000
   17424:	bl	18854 <__assert_fail@plt+0x7758>
   17428:	cmp	r0, r4
   1742c:	movle	r0, #0
   17430:	movgt	r0, #1
   17434:	b	172e4 <__assert_fail@plt+0x61e8>
   17438:	add	r0, r4, #-2147483648	; 0x80000000
   1743c:	cmp	r0, #0
   17440:	movle	r0, #0
   17444:	movgt	r0, #1
   17448:	b	172e4 <__assert_fail@plt+0x61e8>
   1744c:	cmn	r4, #1
   17450:	beq	17470 <__assert_fail@plt+0x6374>
   17454:	mov	r1, r4
   17458:	mov	r0, #-2147483648	; 0x80000000
   1745c:	bl	18854 <__assert_fail@plt+0x7758>
   17460:	cmp	r6, r0
   17464:	movle	r0, #0
   17468:	movgt	r0, #1
   1746c:	b	172e4 <__assert_fail@plt+0x61e8>
   17470:	add	r0, r6, #-2147483648	; 0x80000000
   17474:	cmp	r0, #0
   17478:	movle	r0, #0
   1747c:	movgt	r0, #1
   17480:	b	172e4 <__assert_fail@plt+0x61e8>
   17484:	mul	r1, r6, r4
   17488:	cmp	r1, #63	; 0x3f
   1748c:	movle	r3, #64	; 0x40
   17490:	strle	r3, [sp, #4]
   17494:	bgt	17318 <__assert_fail@plt+0x621c>
   17498:	b	172f4 <__assert_fail@plt+0x61f8>
   1749c:	mov	r3, #64	; 0x40
   174a0:	str	r3, [sp, #4]
   174a4:	b	172f4 <__assert_fail@plt+0x61f8>
   174a8:	rsb	r3, r9, #-2147483648	; 0x80000000
   174ac:	cmp	r5, r3
   174b0:	movge	r3, #0
   174b4:	movlt	r3, #1
   174b8:	b	17354 <__assert_fail@plt+0x6258>
   174bc:	rsb	r3, r5, #-2147483648	; 0x80000000
   174c0:	cmp	r9, r3
   174c4:	movge	r3, #0
   174c8:	movlt	r3, #1
   174cc:	b	17354 <__assert_fail@plt+0x6258>
   174d0:	cmp	r5, #0
   174d4:	blt	174fc <__assert_fail@plt+0x6400>
   174d8:	cmn	r6, #1
   174dc:	beq	17518 <__assert_fail@plt+0x641c>
   174e0:	mov	r1, r6
   174e4:	mov	r0, #-2147483648	; 0x80000000
   174e8:	bl	18854 <__assert_fail@plt+0x7758>
   174ec:	cmp	r5, r0
   174f0:	movle	r0, #0
   174f4:	movgt	r0, #1
   174f8:	b	173a8 <__assert_fail@plt+0x62ac>
   174fc:	mov	r1, r6
   17500:	mvn	r0, #-2147483648	; 0x80000000
   17504:	bl	18854 <__assert_fail@plt+0x7758>
   17508:	cmp	r5, r0
   1750c:	movge	r0, #0
   17510:	movlt	r0, #1
   17514:	b	173a8 <__assert_fail@plt+0x62ac>
   17518:	add	r0, r5, #-2147483648	; 0x80000000
   1751c:	cmp	r0, #0
   17520:	movle	r0, #0
   17524:	movgt	r0, #1
   17528:	b	173a8 <__assert_fail@plt+0x62ac>
   1752c:	cmn	r5, #1
   17530:	beq	17550 <__assert_fail@plt+0x6454>
   17534:	mov	r1, r5
   17538:	mov	r0, #-2147483648	; 0x80000000
   1753c:	bl	18854 <__assert_fail@plt+0x7758>
   17540:	cmp	r6, r0
   17544:	movle	r0, #0
   17548:	movgt	r0, #1
   1754c:	b	173a8 <__assert_fail@plt+0x62ac>
   17550:	add	r0, r6, #-2147483648	; 0x80000000
   17554:	cmp	r0, #0
   17558:	movle	r0, #0
   1755c:	movgt	r0, #1
   17560:	b	173a8 <__assert_fail@plt+0x62ac>
   17564:	bl	17640 <__assert_fail@plt+0x6544>
   17568:	push	{r4, lr}
   1756c:	bl	1816c <__assert_fail@plt+0x7070>
   17570:	cmp	r0, #0
   17574:	popne	{r4, pc}
   17578:	bl	17640 <__assert_fail@plt+0x6544>
   1757c:	push	{r4, lr}
   17580:	mov	r1, #1
   17584:	bl	17568 <__assert_fail@plt+0x646c>
   17588:	pop	{r4, pc}
   1758c:	push	{r4, lr}
   17590:	bl	1816c <__assert_fail@plt+0x7070>
   17594:	cmp	r0, #0
   17598:	popne	{r4, pc}
   1759c:	bl	17640 <__assert_fail@plt+0x6544>
   175a0:	push	{r4, lr}
   175a4:	mov	r1, #1
   175a8:	bl	1758c <__assert_fail@plt+0x6490>
   175ac:	pop	{r4, pc}
   175b0:	push	{r4, r5, r6, lr}
   175b4:	mov	r5, r0
   175b8:	mov	r4, r1
   175bc:	mov	r0, r1
   175c0:	bl	1709c <__assert_fail@plt+0x5fa0>
   175c4:	mov	r2, r4
   175c8:	mov	r1, r5
   175cc:	bl	10ebc <memcpy@plt>
   175d0:	pop	{r4, r5, r6, pc}
   175d4:	push	{r4, r5, r6, lr}
   175d8:	mov	r5, r0
   175dc:	mov	r4, r1
   175e0:	mov	r0, r1
   175e4:	bl	170b0 <__assert_fail@plt+0x5fb4>
   175e8:	mov	r2, r4
   175ec:	mov	r1, r5
   175f0:	bl	10ebc <memcpy@plt>
   175f4:	pop	{r4, r5, r6, pc}
   175f8:	push	{r4, r5, r6, lr}
   175fc:	mov	r5, r0
   17600:	mov	r4, r1
   17604:	add	r0, r1, #1
   17608:	bl	170b0 <__assert_fail@plt+0x5fb4>
   1760c:	mov	r2, #0
   17610:	strb	r2, [r0, r4]
   17614:	mov	r2, r4
   17618:	mov	r1, r5
   1761c:	bl	10ebc <memcpy@plt>
   17620:	pop	{r4, r5, r6, pc}
   17624:	push	{r4, lr}
   17628:	mov	r4, r0
   1762c:	bl	10fe8 <strlen@plt>
   17630:	add	r1, r0, #1
   17634:	mov	r0, r4
   17638:	bl	175b0 <__assert_fail@plt+0x64b4>
   1763c:	pop	{r4, pc}
   17640:	push	{r4, lr}
   17644:	ldr	r3, [pc, #40]	; 17674 <__assert_fail@plt+0x6578>
   17648:	ldr	r4, [r3]
   1764c:	mov	r2, #5
   17650:	ldr	r1, [pc, #32]	; 17678 <__assert_fail@plt+0x657c>
   17654:	mov	r0, #0
   17658:	bl	10ef8 <dcgettext@plt>
   1765c:	mov	r3, r0
   17660:	ldr	r2, [pc, #20]	; 1767c <__assert_fail@plt+0x6580>
   17664:	mov	r1, #0
   17668:	mov	r0, r4
   1766c:	bl	10f7c <error@plt>
   17670:	bl	110d8 <abort@plt>
   17674:	andeq	ip, r2, ip, lsr r1
   17678:	andeq	fp, r1, r0, asr #9
   1767c:	andeq	r9, r1, ip, lsr #6
   17680:	push	{r4, r5, r6, lr}
   17684:	mov	r5, r0
   17688:	subs	r6, r1, #0
   1768c:	blt	176d4 <__assert_fail@plt+0x65d8>
   17690:	cmp	r6, #0
   17694:	beq	17728 <__assert_fail@plt+0x662c>
   17698:	ldr	r4, [r0]
   1769c:	cmp	r4, #0
   176a0:	blt	17750 <__assert_fail@plt+0x6654>
   176a4:	mov	r1, r6
   176a8:	mvn	r0, #-2147483648	; 0x80000000
   176ac:	bl	18854 <__assert_fail@plt+0x7758>
   176b0:	cmp	r4, r0
   176b4:	movle	r0, #0
   176b8:	movgt	r0, #1
   176bc:	cmp	r0, #0
   176c0:	mvnne	r3, #-2147483648	; 0x80000000
   176c4:	beq	17728 <__assert_fail@plt+0x662c>
   176c8:	str	r3, [r5]
   176cc:	mov	r0, #1
   176d0:	pop	{r4, r5, r6, pc}
   176d4:	ldr	r4, [r0]
   176d8:	cmp	r4, #0
   176dc:	blt	17704 <__assert_fail@plt+0x6608>
   176e0:	cmn	r6, #1
   176e4:	beq	1773c <__assert_fail@plt+0x6640>
   176e8:	mov	r1, r6
   176ec:	mov	r0, #-2147483648	; 0x80000000
   176f0:	bl	18854 <__assert_fail@plt+0x7758>
   176f4:	cmp	r4, r0
   176f8:	movle	r0, #0
   176fc:	movgt	r0, #1
   17700:	b	176bc <__assert_fail@plt+0x65c0>
   17704:	mov	r1, r6
   17708:	mvn	r0, #-2147483648	; 0x80000000
   1770c:	bl	18854 <__assert_fail@plt+0x7758>
   17710:	cmp	r4, r0
   17714:	movge	r0, #0
   17718:	movlt	r0, #1
   1771c:	cmp	r0, #0
   17720:	movne	r3, #-2147483648	; 0x80000000
   17724:	bne	176c8 <__assert_fail@plt+0x65cc>
   17728:	ldr	r3, [r5]
   1772c:	mul	r6, r6, r3
   17730:	str	r6, [r5]
   17734:	mov	r0, #0
   17738:	pop	{r4, r5, r6, pc}
   1773c:	add	r0, r4, #-2147483648	; 0x80000000
   17740:	cmp	r0, #0
   17744:	movle	r0, #0
   17748:	movgt	r0, #1
   1774c:	b	176bc <__assert_fail@plt+0x65c0>
   17750:	cmn	r4, #1
   17754:	beq	17774 <__assert_fail@plt+0x6678>
   17758:	mov	r1, r4
   1775c:	mov	r0, #-2147483648	; 0x80000000
   17760:	bl	18854 <__assert_fail@plt+0x7758>
   17764:	cmp	r6, r0
   17768:	movle	r0, #0
   1776c:	movgt	r0, #1
   17770:	b	1771c <__assert_fail@plt+0x6620>
   17774:	add	r0, r6, #-2147483648	; 0x80000000
   17778:	cmp	r0, #0
   1777c:	movle	r0, #0
   17780:	movgt	r0, #1
   17784:	b	1771c <__assert_fail@plt+0x6620>
   17788:	push	{r4, r5, r6, r7, r8, lr}
   1778c:	subs	r4, r2, #0
   17790:	beq	177c0 <__assert_fail@plt+0x66c4>
   17794:	mov	r7, r1
   17798:	mov	r6, r0
   1779c:	mov	r5, #0
   177a0:	mov	r1, r7
   177a4:	mov	r0, r6
   177a8:	bl	17680 <__assert_fail@plt+0x6584>
   177ac:	orr	r5, r5, r0
   177b0:	subs	r4, r4, #1
   177b4:	bne	177a0 <__assert_fail@plt+0x66a4>
   177b8:	mov	r0, r5
   177bc:	pop	{r4, r5, r6, r7, r8, pc}
   177c0:	mov	r5, #0
   177c4:	b	177b8 <__assert_fail@plt+0x66bc>
   177c8:	push	{r4, r5, r6, r7, r8, lr}
   177cc:	sub	sp, sp, #8
   177d0:	cmp	r2, #36	; 0x24
   177d4:	bhi	17840 <__assert_fail@plt+0x6744>
   177d8:	mov	r6, r0
   177dc:	mov	r4, r1
   177e0:	mov	r5, r2
   177e4:	mov	r8, r3
   177e8:	cmp	r1, #0
   177ec:	addeq	r4, sp, #4
   177f0:	bl	11000 <__errno_location@plt>
   177f4:	mov	r7, r0
   177f8:	mov	r3, #0
   177fc:	str	r3, [r0]
   17800:	mov	r2, r5
   17804:	mov	r1, r4
   17808:	mov	r0, r6
   1780c:	bl	10e74 <strtol@plt>
   17810:	str	r0, [sp]
   17814:	ldr	r5, [r4]
   17818:	cmp	r6, r5
   1781c:	beq	17854 <__assert_fail@plt+0x6758>
   17820:	ldr	r3, [r7]
   17824:	cmp	r3, #0
   17828:	beq	17898 <__assert_fail@plt+0x679c>
   1782c:	cmp	r3, #34	; 0x22
   17830:	moveq	r6, #1
   17834:	beq	1789c <__assert_fail@plt+0x67a0>
   17838:	mov	r6, #4
   1783c:	b	17bec <__assert_fail@plt+0x6af0>
   17840:	ldr	r3, [pc, #944]	; 17bf8 <__assert_fail@plt+0x6afc>
   17844:	mov	r2, #85	; 0x55
   17848:	ldr	r1, [pc, #940]	; 17bfc <__assert_fail@plt+0x6b00>
   1784c:	ldr	r0, [pc, #940]	; 17c00 <__assert_fail@plt+0x6b04>
   17850:	bl	110fc <__assert_fail@plt>
   17854:	ldr	r3, [sp, #32]
   17858:	cmp	r3, #0
   1785c:	moveq	r6, #4
   17860:	beq	17bec <__assert_fail@plt+0x6af0>
   17864:	ldrb	r1, [r5]
   17868:	cmp	r1, #0
   1786c:	moveq	r6, #4
   17870:	beq	17bec <__assert_fail@plt+0x6af0>
   17874:	mov	r0, r3
   17878:	bl	10ff4 <strchr@plt>
   1787c:	cmp	r0, #0
   17880:	moveq	r6, #4
   17884:	beq	17bec <__assert_fail@plt+0x6af0>
   17888:	mov	r3, #1
   1788c:	str	r3, [sp]
   17890:	mov	r6, #0
   17894:	b	178ac <__assert_fail@plt+0x67b0>
   17898:	mov	r6, #0
   1789c:	ldr	r3, [sp, #32]
   178a0:	cmp	r3, #0
   178a4:	streq	r0, [r8]
   178a8:	beq	17bec <__assert_fail@plt+0x6af0>
   178ac:	ldrb	r7, [r5]
   178b0:	cmp	r7, #0
   178b4:	beq	17be4 <__assert_fail@plt+0x6ae8>
   178b8:	mov	r1, r7
   178bc:	ldr	r0, [sp, #32]
   178c0:	bl	10ff4 <strchr@plt>
   178c4:	cmp	r0, #0
   178c8:	beq	1799c <__assert_fail@plt+0x68a0>
   178cc:	sub	r3, r7, #69	; 0x45
   178d0:	cmp	r3, #47	; 0x2f
   178d4:	ldrls	pc, [pc, r3, lsl #2]
   178d8:	b	17a08 <__assert_fail@plt+0x690c>
   178dc:	andeq	r7, r1, ip, lsr #19
   178e0:	andeq	r7, r1, r8, lsl #20
   178e4:	andeq	r7, r1, ip, lsr #19
   178e8:	andeq	r7, r1, r8, lsl #20
   178ec:	andeq	r7, r1, r8, lsl #20
   178f0:	andeq	r7, r1, r8, lsl #20
   178f4:	andeq	r7, r1, ip, lsr #19
   178f8:	andeq	r7, r1, r8, lsl #20
   178fc:	andeq	r7, r1, ip, lsr #19
   17900:	andeq	r7, r1, r8, lsl #20
   17904:	andeq	r7, r1, r8, lsl #20
   17908:	andeq	r7, r1, ip, lsr #19
   1790c:	andeq	r7, r1, r8, lsl #20
   17910:	andeq	r7, r1, r8, lsl #20
   17914:	andeq	r7, r1, r8, lsl #20
   17918:	andeq	r7, r1, ip, lsr #19
   1791c:	andeq	r7, r1, r8, lsl #20
   17920:	andeq	r7, r1, r8, lsl #20
   17924:	andeq	r7, r1, r8, lsl #20
   17928:	andeq	r7, r1, r8, lsl #20
   1792c:	andeq	r7, r1, ip, lsr #19
   17930:	andeq	r7, r1, ip, lsr #19
   17934:	andeq	r7, r1, r8, lsl #20
   17938:	andeq	r7, r1, r8, lsl #20
   1793c:	andeq	r7, r1, r8, lsl #20
   17940:	andeq	r7, r1, r8, lsl #20
   17944:	andeq	r7, r1, r8, lsl #20
   17948:	andeq	r7, r1, r8, lsl #20
   1794c:	andeq	r7, r1, r8, lsl #20
   17950:	andeq	r7, r1, r8, lsl #20
   17954:	andeq	r7, r1, r8, lsl #20
   17958:	andeq	r7, r1, r8, lsl #20
   1795c:	andeq	r7, r1, r8, lsl #20
   17960:	andeq	r7, r1, r8, lsl #20
   17964:	andeq	r7, r1, ip, lsr #19
   17968:	andeq	r7, r1, r8, lsl #20
   1796c:	andeq	r7, r1, r8, lsl #20
   17970:	andeq	r7, r1, r8, lsl #20
   17974:	andeq	r7, r1, ip, lsr #19
   17978:	andeq	r7, r1, r8, lsl #20
   1797c:	andeq	r7, r1, ip, lsr #19
   17980:	andeq	r7, r1, r8, lsl #20
   17984:	andeq	r7, r1, r8, lsl #20
   17988:	andeq	r7, r1, r8, lsl #20
   1798c:	andeq	r7, r1, r8, lsl #20
   17990:	andeq	r7, r1, r8, lsl #20
   17994:	andeq	r7, r1, r8, lsl #20
   17998:	andeq	r7, r1, ip, lsr #19
   1799c:	ldr	r3, [sp]
   179a0:	str	r3, [r8]
   179a4:	orr	r6, r6, #2
   179a8:	b	17bec <__assert_fail@plt+0x6af0>
   179ac:	mov	r1, #48	; 0x30
   179b0:	ldr	r0, [sp, #32]
   179b4:	bl	10ff4 <strchr@plt>
   179b8:	cmp	r0, #0
   179bc:	beq	17af8 <__assert_fail@plt+0x69fc>
   179c0:	ldrb	r3, [r5, #1]
   179c4:	cmp	r3, #68	; 0x44
   179c8:	beq	179e4 <__assert_fail@plt+0x68e8>
   179cc:	cmp	r3, #105	; 0x69
   179d0:	beq	179f0 <__assert_fail@plt+0x68f4>
   179d4:	cmp	r3, #66	; 0x42
   179d8:	movne	r5, #1
   179dc:	movne	r1, #1024	; 0x400
   179e0:	bne	17a10 <__assert_fail@plt+0x6914>
   179e4:	mov	r5, #2
   179e8:	mov	r1, #1000	; 0x3e8
   179ec:	b	17a10 <__assert_fail@plt+0x6914>
   179f0:	ldrb	r5, [r5, #2]
   179f4:	cmp	r5, #66	; 0x42
   179f8:	movne	r5, #1
   179fc:	moveq	r5, #3
   17a00:	mov	r1, #1024	; 0x400
   17a04:	b	17a10 <__assert_fail@plt+0x6914>
   17a08:	mov	r5, #1
   17a0c:	mov	r1, #1024	; 0x400
   17a10:	sub	r7, r7, #66	; 0x42
   17a14:	cmp	r7, #53	; 0x35
   17a18:	ldrls	pc, [pc, r7, lsl #2]
   17a1c:	b	17bb4 <__assert_fail@plt+0x6ab8>
   17a20:	andeq	r7, r1, r4, lsl fp
   17a24:			; <UNDEFINED> instruction: 0x00017bb4
   17a28:			; <UNDEFINED> instruction: 0x00017bb4
   17a2c:	andeq	r7, r1, r4, lsr #22
   17a30:			; <UNDEFINED> instruction: 0x00017bb4
   17a34:	andeq	r7, r1, r4, lsr fp
   17a38:			; <UNDEFINED> instruction: 0x00017bb4
   17a3c:			; <UNDEFINED> instruction: 0x00017bb4
   17a40:			; <UNDEFINED> instruction: 0x00017bb4
   17a44:	andeq	r7, r1, r4, asr #22
   17a48:			; <UNDEFINED> instruction: 0x00017bb4
   17a4c:	andeq	r7, r1, r4, asr fp
   17a50:			; <UNDEFINED> instruction: 0x00017bb4
   17a54:			; <UNDEFINED> instruction: 0x00017bb4
   17a58:	andeq	r7, r1, r4, ror #22
   17a5c:			; <UNDEFINED> instruction: 0x00017bb4
   17a60:			; <UNDEFINED> instruction: 0x00017bb4
   17a64:			; <UNDEFINED> instruction: 0x00017bb4
   17a68:	andeq	r7, r1, r4, ror fp
   17a6c:			; <UNDEFINED> instruction: 0x00017bb4
   17a70:			; <UNDEFINED> instruction: 0x00017bb4
   17a74:			; <UNDEFINED> instruction: 0x00017bb4
   17a78:			; <UNDEFINED> instruction: 0x00017bb4
   17a7c:	muleq	r1, r4, fp
   17a80:	andeq	r7, r1, r4, lsr #23
   17a84:			; <UNDEFINED> instruction: 0x00017bb4
   17a88:			; <UNDEFINED> instruction: 0x00017bb4
   17a8c:			; <UNDEFINED> instruction: 0x00017bb4
   17a90:			; <UNDEFINED> instruction: 0x00017bb4
   17a94:			; <UNDEFINED> instruction: 0x00017bb4
   17a98:			; <UNDEFINED> instruction: 0x00017bb4
   17a9c:			; <UNDEFINED> instruction: 0x00017bb4
   17aa0:	andeq	r7, r1, r4, lsl #22
   17aa4:	andeq	r7, r1, r4, asr #23
   17aa8:			; <UNDEFINED> instruction: 0x00017bb4
   17aac:			; <UNDEFINED> instruction: 0x00017bb4
   17ab0:			; <UNDEFINED> instruction: 0x00017bb4
   17ab4:	andeq	r7, r1, r4, lsr fp
   17ab8:			; <UNDEFINED> instruction: 0x00017bb4
   17abc:			; <UNDEFINED> instruction: 0x00017bb4
   17ac0:			; <UNDEFINED> instruction: 0x00017bb4
   17ac4:	andeq	r7, r1, r4, asr #22
   17ac8:			; <UNDEFINED> instruction: 0x00017bb4
   17acc:	andeq	r7, r1, r4, asr fp
   17ad0:			; <UNDEFINED> instruction: 0x00017bb4
   17ad4:			; <UNDEFINED> instruction: 0x00017bb4
   17ad8:			; <UNDEFINED> instruction: 0x00017bb4
   17adc:			; <UNDEFINED> instruction: 0x00017bb4
   17ae0:			; <UNDEFINED> instruction: 0x00017bb4
   17ae4:			; <UNDEFINED> instruction: 0x00017bb4
   17ae8:	andeq	r7, r1, r4, ror fp
   17aec:			; <UNDEFINED> instruction: 0x00017bb4
   17af0:			; <UNDEFINED> instruction: 0x00017bb4
   17af4:	andeq	r7, r1, r4, lsl #23
   17af8:	mov	r5, #1
   17afc:	mov	r1, #1024	; 0x400
   17b00:	b	17a10 <__assert_fail@plt+0x6914>
   17b04:	mov	r1, #512	; 0x200
   17b08:	mov	r0, sp
   17b0c:	bl	17680 <__assert_fail@plt+0x6584>
   17b10:	b	17bc8 <__assert_fail@plt+0x6acc>
   17b14:	mov	r1, #1024	; 0x400
   17b18:	mov	r0, sp
   17b1c:	bl	17680 <__assert_fail@plt+0x6584>
   17b20:	b	17bc8 <__assert_fail@plt+0x6acc>
   17b24:	mov	r2, #6
   17b28:	mov	r0, sp
   17b2c:	bl	17788 <__assert_fail@plt+0x668c>
   17b30:	b	17bc8 <__assert_fail@plt+0x6acc>
   17b34:	mov	r2, #3
   17b38:	mov	r0, sp
   17b3c:	bl	17788 <__assert_fail@plt+0x668c>
   17b40:	b	17bc8 <__assert_fail@plt+0x6acc>
   17b44:	mov	r2, #1
   17b48:	mov	r0, sp
   17b4c:	bl	17788 <__assert_fail@plt+0x668c>
   17b50:	b	17bc8 <__assert_fail@plt+0x6acc>
   17b54:	mov	r2, #2
   17b58:	mov	r0, sp
   17b5c:	bl	17788 <__assert_fail@plt+0x668c>
   17b60:	b	17bc8 <__assert_fail@plt+0x6acc>
   17b64:	mov	r2, #5
   17b68:	mov	r0, sp
   17b6c:	bl	17788 <__assert_fail@plt+0x668c>
   17b70:	b	17bc8 <__assert_fail@plt+0x6acc>
   17b74:	mov	r2, #4
   17b78:	mov	r0, sp
   17b7c:	bl	17788 <__assert_fail@plt+0x668c>
   17b80:	b	17bc8 <__assert_fail@plt+0x6acc>
   17b84:	mov	r1, #2
   17b88:	mov	r0, sp
   17b8c:	bl	17680 <__assert_fail@plt+0x6584>
   17b90:	b	17bc8 <__assert_fail@plt+0x6acc>
   17b94:	mov	r2, #8
   17b98:	mov	r0, sp
   17b9c:	bl	17788 <__assert_fail@plt+0x668c>
   17ba0:	b	17bc8 <__assert_fail@plt+0x6acc>
   17ba4:	mov	r2, #7
   17ba8:	mov	r0, sp
   17bac:	bl	17788 <__assert_fail@plt+0x668c>
   17bb0:	b	17bc8 <__assert_fail@plt+0x6acc>
   17bb4:	ldr	r3, [sp]
   17bb8:	str	r3, [r8]
   17bbc:	orr	r6, r6, #2
   17bc0:	b	17bec <__assert_fail@plt+0x6af0>
   17bc4:	mov	r0, #0
   17bc8:	orr	r6, r6, r0
   17bcc:	ldr	r3, [r4]
   17bd0:	add	r2, r3, r5
   17bd4:	str	r2, [r4]
   17bd8:	ldrb	r3, [r3, r5]
   17bdc:	cmp	r3, #0
   17be0:	orrne	r6, r6, #2
   17be4:	ldr	r3, [sp]
   17be8:	str	r3, [r8]
   17bec:	mov	r0, r6
   17bf0:	add	sp, sp, #8
   17bf4:	pop	{r4, r5, r6, r7, r8, pc}
   17bf8:	ldrdeq	fp, [r1], -r4
   17bfc:	ldrdeq	fp, [r1], -ip
   17c00:	andeq	fp, r1, ip, ror #9
   17c04:	push	{r4, r5, r6, lr}
   17c08:	mov	r5, r0
   17c0c:	subs	r4, r1, #0
   17c10:	blt	17c64 <__assert_fail@plt+0x6b68>
   17c14:	cmp	r4, #0
   17c18:	moveq	r3, #0
   17c1c:	beq	17c48 <__assert_fail@plt+0x6b4c>
   17c20:	mov	r2, r4
   17c24:	asr	r3, r4, #31
   17c28:	mvn	r0, #0
   17c2c:	mvn	r1, #0
   17c30:	bl	18e4c <__assert_fail@plt+0x7d50>
   17c34:	ldrd	r2, [r5]
   17c38:	cmp	r1, r3
   17c3c:	cmpeq	r0, r2
   17c40:	movcc	r3, #1
   17c44:	movcs	r3, #0
   17c48:	cmp	r3, #0
   17c4c:	beq	17c84 <__assert_fail@plt+0x6b88>
   17c50:	mvn	r2, #0
   17c54:	mvn	r3, #0
   17c58:	strd	r2, [r5]
   17c5c:	mov	r0, #1
   17c60:	pop	{r4, r5, r6, pc}
   17c64:	mov	r1, r4
   17c68:	mov	r0, #0
   17c6c:	bl	18854 <__assert_fail@plt+0x7758>
   17c70:	ldrd	r2, [r5]
   17c74:	orrs	r3, r2, r3
   17c78:	movne	r3, #1
   17c7c:	moveq	r3, #0
   17c80:	b	17c48 <__assert_fail@plt+0x6b4c>
   17c84:	asr	r3, r4, #31
   17c88:	ldr	r1, [r5, #4]
   17c8c:	ldr	r2, [r5]
   17c90:	mul	r3, r3, r2
   17c94:	mla	r1, r4, r1, r3
   17c98:	umull	r2, r3, r2, r4
   17c9c:	add	r3, r1, r3
   17ca0:	strd	r2, [r5]
   17ca4:	mov	r0, #0
   17ca8:	pop	{r4, r5, r6, pc}
   17cac:	push	{r4, r5, r6, r7, r8, lr}
   17cb0:	subs	r4, r2, #0
   17cb4:	beq	17ce4 <__assert_fail@plt+0x6be8>
   17cb8:	mov	r7, r1
   17cbc:	mov	r6, r0
   17cc0:	mov	r5, #0
   17cc4:	mov	r1, r7
   17cc8:	mov	r0, r6
   17ccc:	bl	17c04 <__assert_fail@plt+0x6b08>
   17cd0:	orr	r5, r5, r0
   17cd4:	subs	r4, r4, #1
   17cd8:	bne	17cc4 <__assert_fail@plt+0x6bc8>
   17cdc:	mov	r0, r5
   17ce0:	pop	{r4, r5, r6, r7, r8, pc}
   17ce4:	mov	r5, #0
   17ce8:	b	17cdc <__assert_fail@plt+0x6be0>
   17cec:	push	{r4, r5, r6, r7, r8, r9, lr}
   17cf0:	sub	sp, sp, #20
   17cf4:	cmp	r2, #36	; 0x24
   17cf8:	bhi	17d38 <__assert_fail@plt+0x6c3c>
   17cfc:	mov	r5, r0
   17d00:	mov	r6, r1
   17d04:	mov	r7, r2
   17d08:	mov	r9, r3
   17d0c:	cmp	r1, #0
   17d10:	addeq	r6, sp, #12
   17d14:	bl	11000 <__errno_location@plt>
   17d18:	mov	r8, r0
   17d1c:	mov	r3, #0
   17d20:	str	r3, [r0]
   17d24:	ldrb	r4, [r5]
   17d28:	bl	10fd0 <__ctype_b_loc@plt>
   17d2c:	ldr	r1, [r0]
   17d30:	mov	r2, r5
   17d34:	b	17d50 <__assert_fail@plt+0x6c54>
   17d38:	ldr	r3, [pc, #1056]	; 18160 <__assert_fail@plt+0x7064>
   17d3c:	mov	r2, #85	; 0x55
   17d40:	ldr	r1, [pc, #1052]	; 18164 <__assert_fail@plt+0x7068>
   17d44:	ldr	r0, [pc, #1052]	; 18168 <__assert_fail@plt+0x706c>
   17d48:	bl	110fc <__assert_fail@plt>
   17d4c:	ldrb	r4, [r2, #1]!
   17d50:	lsl	r3, r4, #1
   17d54:	ldrh	r3, [r1, r3]
   17d58:	tst	r3, #8192	; 0x2000
   17d5c:	bne	17d4c <__assert_fail@plt+0x6c50>
   17d60:	cmp	r4, #45	; 0x2d
   17d64:	moveq	r4, #4
   17d68:	bne	17d78 <__assert_fail@plt+0x6c7c>
   17d6c:	mov	r0, r4
   17d70:	add	sp, sp, #20
   17d74:	pop	{r4, r5, r6, r7, r8, r9, pc}
   17d78:	mov	r3, #0
   17d7c:	mov	r2, r7
   17d80:	mov	r1, r6
   17d84:	mov	r0, r5
   17d88:	bl	10ec8 <__strtoull_internal@plt>
   17d8c:	strd	r0, [sp]
   17d90:	ldr	r7, [r6]
   17d94:	cmp	r5, r7
   17d98:	beq	17dbc <__assert_fail@plt+0x6cc0>
   17d9c:	ldr	r3, [r8]
   17da0:	cmp	r3, #0
   17da4:	beq	17e04 <__assert_fail@plt+0x6d08>
   17da8:	cmp	r3, #34	; 0x22
   17dac:	moveq	r4, #1
   17db0:	beq	17e08 <__assert_fail@plt+0x6d0c>
   17db4:	mov	r4, #4
   17db8:	b	17d6c <__assert_fail@plt+0x6c70>
   17dbc:	ldr	r3, [sp, #48]	; 0x30
   17dc0:	cmp	r3, #0
   17dc4:	moveq	r4, #4
   17dc8:	beq	17d6c <__assert_fail@plt+0x6c70>
   17dcc:	ldrb	r1, [r7]
   17dd0:	cmp	r1, #0
   17dd4:	moveq	r4, #4
   17dd8:	beq	17d6c <__assert_fail@plt+0x6c70>
   17ddc:	mov	r0, r3
   17de0:	bl	10ff4 <strchr@plt>
   17de4:	cmp	r0, #0
   17de8:	moveq	r4, #4
   17dec:	beq	17d6c <__assert_fail@plt+0x6c70>
   17df0:	mov	r2, #1
   17df4:	mov	r3, #0
   17df8:	strd	r2, [sp]
   17dfc:	mov	r4, #0
   17e00:	b	17e14 <__assert_fail@plt+0x6d18>
   17e04:	mov	r4, #0
   17e08:	ldr	r3, [sp, #48]	; 0x30
   17e0c:	cmp	r3, #0
   17e10:	beq	17f04 <__assert_fail@plt+0x6e08>
   17e14:	ldrb	r5, [r7]
   17e18:	cmp	r5, #0
   17e1c:	beq	1809c <__assert_fail@plt+0x6fa0>
   17e20:	mov	r1, r5
   17e24:	ldr	r0, [sp, #48]	; 0x30
   17e28:	bl	10ff4 <strchr@plt>
   17e2c:	cmp	r0, #0
   17e30:	beq	17f0c <__assert_fail@plt+0x6e10>
   17e34:	sub	r3, r5, #69	; 0x45
   17e38:	cmp	r3, #47	; 0x2f
   17e3c:	ldrls	pc, [pc, r3, lsl #2]
   17e40:	b	17f78 <__assert_fail@plt+0x6e7c>
   17e44:	andeq	r7, r1, ip, lsl pc
   17e48:	andeq	r7, r1, r8, ror pc
   17e4c:	andeq	r7, r1, ip, lsl pc
   17e50:	andeq	r7, r1, r8, ror pc
   17e54:	andeq	r7, r1, r8, ror pc
   17e58:	andeq	r7, r1, r8, ror pc
   17e5c:	andeq	r7, r1, ip, lsl pc
   17e60:	andeq	r7, r1, r8, ror pc
   17e64:	andeq	r7, r1, ip, lsl pc
   17e68:	andeq	r7, r1, r8, ror pc
   17e6c:	andeq	r7, r1, r8, ror pc
   17e70:	andeq	r7, r1, ip, lsl pc
   17e74:	andeq	r7, r1, r8, ror pc
   17e78:	andeq	r7, r1, r8, ror pc
   17e7c:	andeq	r7, r1, r8, ror pc
   17e80:	andeq	r7, r1, ip, lsl pc
   17e84:	andeq	r7, r1, r8, ror pc
   17e88:	andeq	r7, r1, r8, ror pc
   17e8c:	andeq	r7, r1, r8, ror pc
   17e90:	andeq	r7, r1, r8, ror pc
   17e94:	andeq	r7, r1, ip, lsl pc
   17e98:	andeq	r7, r1, ip, lsl pc
   17e9c:	andeq	r7, r1, r8, ror pc
   17ea0:	andeq	r7, r1, r8, ror pc
   17ea4:	andeq	r7, r1, r8, ror pc
   17ea8:	andeq	r7, r1, r8, ror pc
   17eac:	andeq	r7, r1, r8, ror pc
   17eb0:	andeq	r7, r1, r8, ror pc
   17eb4:	andeq	r7, r1, r8, ror pc
   17eb8:	andeq	r7, r1, r8, ror pc
   17ebc:	andeq	r7, r1, r8, ror pc
   17ec0:	andeq	r7, r1, r8, ror pc
   17ec4:	andeq	r7, r1, r8, ror pc
   17ec8:	andeq	r7, r1, r8, ror pc
   17ecc:	andeq	r7, r1, ip, lsl pc
   17ed0:	andeq	r7, r1, r8, ror pc
   17ed4:	andeq	r7, r1, r8, ror pc
   17ed8:	andeq	r7, r1, r8, ror pc
   17edc:	andeq	r7, r1, ip, lsl pc
   17ee0:	andeq	r7, r1, r8, ror pc
   17ee4:	andeq	r7, r1, ip, lsl pc
   17ee8:	andeq	r7, r1, r8, ror pc
   17eec:	andeq	r7, r1, r8, ror pc
   17ef0:	andeq	r7, r1, r8, ror pc
   17ef4:	andeq	r7, r1, r8, ror pc
   17ef8:	andeq	r7, r1, r8, ror pc
   17efc:	andeq	r7, r1, r8, ror pc
   17f00:	andeq	r7, r1, ip, lsl pc
   17f04:	strd	r0, [r9]
   17f08:	b	17d6c <__assert_fail@plt+0x6c70>
   17f0c:	ldrd	r2, [sp]
   17f10:	strd	r2, [r9]
   17f14:	orr	r4, r4, #2
   17f18:	b	17d6c <__assert_fail@plt+0x6c70>
   17f1c:	mov	r1, #48	; 0x30
   17f20:	ldr	r0, [sp, #48]	; 0x30
   17f24:	bl	10ff4 <strchr@plt>
   17f28:	cmp	r0, #0
   17f2c:	beq	18068 <__assert_fail@plt+0x6f6c>
   17f30:	ldrb	r3, [r7, #1]
   17f34:	cmp	r3, #68	; 0x44
   17f38:	beq	17f54 <__assert_fail@plt+0x6e58>
   17f3c:	cmp	r3, #105	; 0x69
   17f40:	beq	17f60 <__assert_fail@plt+0x6e64>
   17f44:	cmp	r3, #66	; 0x42
   17f48:	movne	r7, #1
   17f4c:	movne	r1, #1024	; 0x400
   17f50:	bne	17f80 <__assert_fail@plt+0x6e84>
   17f54:	mov	r7, #2
   17f58:	mov	r1, #1000	; 0x3e8
   17f5c:	b	17f80 <__assert_fail@plt+0x6e84>
   17f60:	ldrb	r7, [r7, #2]
   17f64:	cmp	r7, #66	; 0x42
   17f68:	movne	r7, #1
   17f6c:	moveq	r7, #3
   17f70:	mov	r1, #1024	; 0x400
   17f74:	b	17f80 <__assert_fail@plt+0x6e84>
   17f78:	mov	r7, #1
   17f7c:	mov	r1, #1024	; 0x400
   17f80:	sub	r5, r5, #66	; 0x42
   17f84:	cmp	r5, #53	; 0x35
   17f88:	ldrls	pc, [pc, r5, lsl #2]
   17f8c:	b	18148 <__assert_fail@plt+0x704c>
   17f90:	andeq	r8, r1, r8, lsr #1
   17f94:	andeq	r8, r1, r8, asr #2
   17f98:	andeq	r8, r1, r8, asr #2
   17f9c:	strheq	r8, [r1], -r8	; <UNPREDICTABLE>
   17fa0:	andeq	r8, r1, r8, asr #2
   17fa4:	andeq	r8, r1, r8, asr #1
   17fa8:	andeq	r8, r1, r8, asr #2
   17fac:	andeq	r8, r1, r8, asr #2
   17fb0:	andeq	r8, r1, r8, asr #2
   17fb4:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17fb8:	andeq	r8, r1, r8, asr #2
   17fbc:	andeq	r8, r1, r8, ror #1
   17fc0:	andeq	r8, r1, r8, asr #2
   17fc4:	andeq	r8, r1, r8, asr #2
   17fc8:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17fcc:	andeq	r8, r1, r8, asr #2
   17fd0:	andeq	r8, r1, r8, asr #2
   17fd4:	andeq	r8, r1, r8, asr #2
   17fd8:	andeq	r8, r1, r8, lsl #2
   17fdc:	andeq	r8, r1, r8, asr #2
   17fe0:	andeq	r8, r1, r8, asr #2
   17fe4:	andeq	r8, r1, r8, asr #2
   17fe8:	andeq	r8, r1, r8, asr #2
   17fec:	andeq	r8, r1, r8, lsr #2
   17ff0:	andeq	r8, r1, r8, lsr r1
   17ff4:	andeq	r8, r1, r8, asr #2
   17ff8:	andeq	r8, r1, r8, asr #2
   17ffc:	andeq	r8, r1, r8, asr #2
   18000:	andeq	r8, r1, r8, asr #2
   18004:	andeq	r8, r1, r8, asr #2
   18008:	andeq	r8, r1, r8, asr #2
   1800c:	andeq	r8, r1, r8, asr #2
   18010:	andeq	r8, r1, r4, ror r0
   18014:	andeq	r8, r1, r8, asr r1
   18018:	andeq	r8, r1, r8, asr #2
   1801c:	andeq	r8, r1, r8, asr #2
   18020:	andeq	r8, r1, r8, asr #2
   18024:	andeq	r8, r1, r8, asr #1
   18028:	andeq	r8, r1, r8, asr #2
   1802c:	andeq	r8, r1, r8, asr #2
   18030:	andeq	r8, r1, r8, asr #2
   18034:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18038:	andeq	r8, r1, r8, asr #2
   1803c:	andeq	r8, r1, r8, ror #1
   18040:	andeq	r8, r1, r8, asr #2
   18044:	andeq	r8, r1, r8, asr #2
   18048:	andeq	r8, r1, r8, asr #2
   1804c:	andeq	r8, r1, r8, asr #2
   18050:	andeq	r8, r1, r8, asr #2
   18054:	andeq	r8, r1, r8, asr #2
   18058:	andeq	r8, r1, r8, lsl #2
   1805c:	andeq	r8, r1, r8, asr #2
   18060:	andeq	r8, r1, r8, asr #2
   18064:	andeq	r8, r1, r8, lsl r1
   18068:	mov	r7, #1
   1806c:	mov	r1, #1024	; 0x400
   18070:	b	17f80 <__assert_fail@plt+0x6e84>
   18074:	mov	r1, #512	; 0x200
   18078:	mov	r0, sp
   1807c:	bl	17c04 <__assert_fail@plt+0x6b08>
   18080:	orr	r4, r4, r0
   18084:	ldr	r3, [r6]
   18088:	add	r2, r3, r7
   1808c:	str	r2, [r6]
   18090:	ldrb	r3, [r3, r7]
   18094:	cmp	r3, #0
   18098:	orrne	r4, r4, #2
   1809c:	ldrd	r2, [sp]
   180a0:	strd	r2, [r9]
   180a4:	b	17d6c <__assert_fail@plt+0x6c70>
   180a8:	mov	r1, #1024	; 0x400
   180ac:	mov	r0, sp
   180b0:	bl	17c04 <__assert_fail@plt+0x6b08>
   180b4:	b	18080 <__assert_fail@plt+0x6f84>
   180b8:	mov	r2, #6
   180bc:	mov	r0, sp
   180c0:	bl	17cac <__assert_fail@plt+0x6bb0>
   180c4:	b	18080 <__assert_fail@plt+0x6f84>
   180c8:	mov	r2, #3
   180cc:	mov	r0, sp
   180d0:	bl	17cac <__assert_fail@plt+0x6bb0>
   180d4:	b	18080 <__assert_fail@plt+0x6f84>
   180d8:	mov	r2, #1
   180dc:	mov	r0, sp
   180e0:	bl	17cac <__assert_fail@plt+0x6bb0>
   180e4:	b	18080 <__assert_fail@plt+0x6f84>
   180e8:	mov	r2, #2
   180ec:	mov	r0, sp
   180f0:	bl	17cac <__assert_fail@plt+0x6bb0>
   180f4:	b	18080 <__assert_fail@plt+0x6f84>
   180f8:	mov	r2, #5
   180fc:	mov	r0, sp
   18100:	bl	17cac <__assert_fail@plt+0x6bb0>
   18104:	b	18080 <__assert_fail@plt+0x6f84>
   18108:	mov	r2, #4
   1810c:	mov	r0, sp
   18110:	bl	17cac <__assert_fail@plt+0x6bb0>
   18114:	b	18080 <__assert_fail@plt+0x6f84>
   18118:	mov	r1, #2
   1811c:	mov	r0, sp
   18120:	bl	17c04 <__assert_fail@plt+0x6b08>
   18124:	b	18080 <__assert_fail@plt+0x6f84>
   18128:	mov	r2, #8
   1812c:	mov	r0, sp
   18130:	bl	17cac <__assert_fail@plt+0x6bb0>
   18134:	b	18080 <__assert_fail@plt+0x6f84>
   18138:	mov	r2, #7
   1813c:	mov	r0, sp
   18140:	bl	17cac <__assert_fail@plt+0x6bb0>
   18144:	b	18080 <__assert_fail@plt+0x6f84>
   18148:	ldrd	r2, [sp]
   1814c:	strd	r2, [r9]
   18150:	orr	r4, r4, #2
   18154:	b	17d6c <__assert_fail@plt+0x6c70>
   18158:	mov	r0, #0
   1815c:	b	18080 <__assert_fail@plt+0x6f84>
   18160:	andeq	fp, r1, r4, lsl r5
   18164:	ldrdeq	fp, [r1], -ip
   18168:	andeq	fp, r1, ip, ror #9
   1816c:	push	{r4, lr}
   18170:	mov	r2, r0
   18174:	mov	r3, r1
   18178:	cmp	r1, #0
   1817c:	cmpne	r0, #0
   18180:	moveq	r3, #1
   18184:	moveq	r2, r3
   18188:	umull	r0, r1, r2, r3
   1818c:	cmp	r0, #0
   18190:	cmpge	r1, #0
   18194:	bne	181a8 <__assert_fail@plt+0x70ac>
   18198:	mov	r1, r3
   1819c:	mov	r0, r2
   181a0:	bl	10e38 <calloc@plt>
   181a4:	pop	{r4, pc}
   181a8:	bl	11000 <__errno_location@plt>
   181ac:	mov	r3, #12
   181b0:	str	r3, [r0]
   181b4:	mov	r0, #0
   181b8:	pop	{r4, pc}
   181bc:	push	{r4, lr}
   181c0:	cmp	r0, #0
   181c4:	moveq	r0, #1
   181c8:	cmp	r0, #0
   181cc:	blt	181d8 <__assert_fail@plt+0x70dc>
   181d0:	bl	10f88 <malloc@plt>
   181d4:	pop	{r4, pc}
   181d8:	bl	11000 <__errno_location@plt>
   181dc:	mov	r3, #12
   181e0:	str	r3, [r0]
   181e4:	mov	r0, #0
   181e8:	pop	{r4, pc}
   181ec:	push	{r4, lr}
   181f0:	cmp	r0, #0
   181f4:	beq	18210 <__assert_fail@plt+0x7114>
   181f8:	cmp	r1, #0
   181fc:	beq	1821c <__assert_fail@plt+0x7120>
   18200:	cmp	r1, #0
   18204:	blt	18228 <__assert_fail@plt+0x712c>
   18208:	bl	10f04 <realloc@plt>
   1820c:	pop	{r4, pc}
   18210:	mov	r0, r1
   18214:	bl	181bc <__assert_fail@plt+0x70c0>
   18218:	pop	{r4, pc}
   1821c:	bl	14b5c <__assert_fail@plt+0x3a60>
   18220:	mov	r0, #0
   18224:	pop	{r4, pc}
   18228:	bl	11000 <__errno_location@plt>
   1822c:	mov	r3, #12
   18230:	str	r3, [r0]
   18234:	mov	r0, #0
   18238:	pop	{r4, pc}
   1823c:	push	{r4, r5, r6, lr}
   18240:	mov	r5, r0
   18244:	bl	10f58 <__fpending@plt>
   18248:	mov	r6, r0
   1824c:	ldr	r4, [r5]
   18250:	and	r4, r4, #32
   18254:	mov	r0, r5
   18258:	bl	182b4 <__assert_fail@plt+0x71b8>
   1825c:	cmp	r4, #0
   18260:	bne	18288 <__assert_fail@plt+0x718c>
   18264:	cmp	r0, #0
   18268:	popeq	{r4, r5, r6, pc}
   1826c:	cmp	r6, #0
   18270:	bne	182a4 <__assert_fail@plt+0x71a8>
   18274:	bl	11000 <__errno_location@plt>
   18278:	ldr	r0, [r0]
   1827c:	subs	r0, r0, #9
   18280:	mvnne	r0, #0
   18284:	pop	{r4, r5, r6, pc}
   18288:	cmp	r0, #0
   1828c:	bne	182ac <__assert_fail@plt+0x71b0>
   18290:	bl	11000 <__errno_location@plt>
   18294:	mov	r3, #0
   18298:	str	r3, [r0]
   1829c:	mvn	r0, #0
   182a0:	pop	{r4, r5, r6, pc}
   182a4:	mvn	r0, #0
   182a8:	pop	{r4, r5, r6, pc}
   182ac:	mvn	r0, #0
   182b0:	pop	{r4, r5, r6, pc}
   182b4:	push	{r4, r5, r6, lr}
   182b8:	sub	sp, sp, #8
   182bc:	mov	r4, r0
   182c0:	bl	11030 <fileno@plt>
   182c4:	cmp	r0, #0
   182c8:	blt	18340 <__assert_fail@plt+0x7244>
   182cc:	mov	r0, r4
   182d0:	bl	10fa0 <__freading@plt>
   182d4:	cmp	r0, #0
   182d8:	beq	1830c <__assert_fail@plt+0x7210>
   182dc:	mov	r0, r4
   182e0:	bl	11030 <fileno@plt>
   182e4:	mov	r3, #1
   182e8:	str	r3, [sp]
   182ec:	mov	r2, #0
   182f0:	mov	r3, #0
   182f4:	bl	10f34 <lseek64@plt>
   182f8:	mvn	r2, #0
   182fc:	mvn	r3, #0
   18300:	cmp	r1, r3
   18304:	cmpeq	r0, r2
   18308:	beq	1834c <__assert_fail@plt+0x7250>
   1830c:	mov	r0, r4
   18310:	bl	1835c <__assert_fail@plt+0x7260>
   18314:	cmp	r0, #0
   18318:	beq	1834c <__assert_fail@plt+0x7250>
   1831c:	bl	11000 <__errno_location@plt>
   18320:	mov	r5, r0
   18324:	ldr	r6, [r0]
   18328:	mov	r0, r4
   1832c:	bl	11048 <fclose@plt>
   18330:	cmp	r6, #0
   18334:	strne	r6, [r5]
   18338:	mvnne	r0, #0
   1833c:	b	18354 <__assert_fail@plt+0x7258>
   18340:	mov	r0, r4
   18344:	bl	11048 <fclose@plt>
   18348:	b	18354 <__assert_fail@plt+0x7258>
   1834c:	mov	r0, r4
   18350:	bl	11048 <fclose@plt>
   18354:	add	sp, sp, #8
   18358:	pop	{r4, r5, r6, pc}
   1835c:	push	{r4, lr}
   18360:	sub	sp, sp, #8
   18364:	subs	r4, r0, #0
   18368:	beq	1837c <__assert_fail@plt+0x7280>
   1836c:	mov	r0, r4
   18370:	bl	10fa0 <__freading@plt>
   18374:	cmp	r0, #0
   18378:	bne	1838c <__assert_fail@plt+0x7290>
   1837c:	mov	r0, r4
   18380:	bl	10e80 <fflush@plt>
   18384:	add	sp, sp, #8
   18388:	pop	{r4, pc}
   1838c:	ldr	r3, [r4]
   18390:	tst	r3, #256	; 0x100
   18394:	bne	183a4 <__assert_fail@plt+0x72a8>
   18398:	mov	r0, r4
   1839c:	bl	10e80 <fflush@plt>
   183a0:	b	18384 <__assert_fail@plt+0x7288>
   183a4:	mov	r3, #1
   183a8:	str	r3, [sp]
   183ac:	mov	r2, #0
   183b0:	mov	r3, #0
   183b4:	mov	r0, r4
   183b8:	bl	183c0 <__assert_fail@plt+0x72c4>
   183bc:	b	18398 <__assert_fail@plt+0x729c>
   183c0:	push	{r4, r5, r6, r7, lr}
   183c4:	sub	sp, sp, #12
   183c8:	mov	r4, r0
   183cc:	mov	r6, r2
   183d0:	mov	r7, r3
   183d4:	ldr	r5, [sp, #32]
   183d8:	ldr	r2, [r0, #8]
   183dc:	ldr	r3, [r0, #4]
   183e0:	cmp	r2, r3
   183e4:	beq	18404 <__assert_fail@plt+0x7308>
   183e8:	str	r5, [sp]
   183ec:	mov	r2, r6
   183f0:	mov	r3, r7
   183f4:	mov	r0, r4
   183f8:	bl	11054 <fseeko64@plt>
   183fc:	add	sp, sp, #12
   18400:	pop	{r4, r5, r6, r7, pc}
   18404:	ldr	r2, [r0, #20]
   18408:	ldr	r3, [r0, #16]
   1840c:	cmp	r2, r3
   18410:	bne	183e8 <__assert_fail@plt+0x72ec>
   18414:	ldr	r3, [r0, #36]	; 0x24
   18418:	cmp	r3, #0
   1841c:	bne	183e8 <__assert_fail@plt+0x72ec>
   18420:	bl	11030 <fileno@plt>
   18424:	str	r5, [sp]
   18428:	mov	r2, r6
   1842c:	mov	r3, r7
   18430:	bl	10f34 <lseek64@plt>
   18434:	mvn	r2, #0
   18438:	mvn	r3, #0
   1843c:	cmp	r1, r3
   18440:	cmpeq	r0, r2
   18444:	beq	18460 <__assert_fail@plt+0x7364>
   18448:	ldr	r3, [r4]
   1844c:	bic	r3, r3, #16
   18450:	str	r3, [r4]
   18454:	strd	r0, [r4, #80]	; 0x50
   18458:	mov	r0, #0
   1845c:	b	183fc <__assert_fail@plt+0x7300>
   18460:	mvn	r0, #0
   18464:	b	183fc <__assert_fail@plt+0x7300>
   18468:	push	{r4, lr}
   1846c:	mov	r0, #14
   18470:	bl	11090 <nl_langinfo@plt>
   18474:	cmp	r0, #0
   18478:	beq	18490 <__assert_fail@plt+0x7394>
   1847c:	ldrb	r2, [r0]
   18480:	ldr	r3, [pc, #16]	; 18498 <__assert_fail@plt+0x739c>
   18484:	cmp	r2, #0
   18488:	moveq	r0, r3
   1848c:	pop	{r4, pc}
   18490:	ldr	r0, [pc]	; 18498 <__assert_fail@plt+0x739c>
   18494:	pop	{r4, pc}
   18498:	andeq	fp, r1, r0, lsr #10
   1849c:	push	{r4, r5, r6, r7, lr}
   184a0:	sub	sp, sp, #12
   184a4:	mov	r7, r1
   184a8:	mov	r5, r2
   184ac:	subs	r6, r0, #0
   184b0:	addeq	r6, sp, #4
   184b4:	mov	r0, r6
   184b8:	bl	10f64 <mbrtowc@plt>
   184bc:	mov	r4, r0
   184c0:	cmp	r5, #0
   184c4:	cmnne	r0, #3
   184c8:	bhi	184d8 <__assert_fail@plt+0x73dc>
   184cc:	mov	r0, r4
   184d0:	add	sp, sp, #12
   184d4:	pop	{r4, r5, r6, r7, pc}
   184d8:	mov	r0, #0
   184dc:	bl	18540 <__assert_fail@plt+0x7444>
   184e0:	cmp	r0, #0
   184e4:	ldrbeq	r3, [r7]
   184e8:	streq	r3, [r6]
   184ec:	moveq	r4, #1
   184f0:	b	184cc <__assert_fail@plt+0x73d0>
   184f4:	push	{r4, r5, r6, lr}
   184f8:	mov	r6, r0
   184fc:	mov	r5, r1
   18500:	subs	r4, r2, #0
   18504:	beq	18530 <__assert_fail@plt+0x7434>
   18508:	mov	r1, r4
   1850c:	mvn	r0, #0
   18510:	bl	18648 <__assert_fail@plt+0x754c>
   18514:	cmp	r0, r5
   18518:	bcs	18530 <__assert_fail@plt+0x7434>
   1851c:	bl	11000 <__errno_location@plt>
   18520:	mov	r3, #12
   18524:	str	r3, [r0]
   18528:	mov	r0, #0
   1852c:	pop	{r4, r5, r6, pc}
   18530:	mul	r1, r5, r4
   18534:	mov	r0, r6
   18538:	bl	181ec <__assert_fail@plt+0x70f0>
   1853c:	pop	{r4, r5, r6, pc}
   18540:	push	{lr}		; (str lr, [sp, #-4]!)
   18544:	sub	sp, sp, #268	; 0x10c
   18548:	ldr	r2, [pc, #68]	; 18594 <__assert_fail@plt+0x7498>
   1854c:	add	r1, sp, #4
   18550:	bl	185a0 <__assert_fail@plt+0x74a4>
   18554:	cmp	r0, #0
   18558:	movne	r0, #0
   1855c:	bne	1858c <__assert_fail@plt+0x7490>
   18560:	ldr	r1, [pc, #48]	; 18598 <__assert_fail@plt+0x749c>
   18564:	add	r0, sp, #4
   18568:	bl	10e68 <strcmp@plt>
   1856c:	cmp	r0, #0
   18570:	moveq	r0, #0
   18574:	beq	1858c <__assert_fail@plt+0x7490>
   18578:	ldr	r1, [pc, #28]	; 1859c <__assert_fail@plt+0x74a0>
   1857c:	add	r0, sp, #4
   18580:	bl	10e68 <strcmp@plt>
   18584:	adds	r0, r0, #0
   18588:	movne	r0, #1
   1858c:	add	sp, sp, #268	; 0x10c
   18590:	pop	{pc}		; (ldr pc, [sp], #4)
   18594:	andeq	r0, r0, r1, lsl #2
   18598:	andeq	fp, r1, r8, lsr #10
   1859c:	andeq	fp, r1, ip, lsr #10
   185a0:	push	{r4, r5, r6, lr}
   185a4:	mov	r6, r1
   185a8:	mov	r4, r2
   185ac:	mov	r1, #0
   185b0:	bl	1106c <setlocale@plt>
   185b4:	subs	r5, r0, #0
   185b8:	beq	185dc <__assert_fail@plt+0x74e0>
   185bc:	mov	r0, r5
   185c0:	bl	10fe8 <strlen@plt>
   185c4:	cmp	r4, r0
   185c8:	bhi	185f4 <__assert_fail@plt+0x74f8>
   185cc:	cmp	r4, #0
   185d0:	bne	1860c <__assert_fail@plt+0x7510>
   185d4:	mov	r0, #34	; 0x22
   185d8:	pop	{r4, r5, r6, pc}
   185dc:	cmp	r4, #0
   185e0:	beq	18630 <__assert_fail@plt+0x7534>
   185e4:	mov	r3, #0
   185e8:	strb	r3, [r6]
   185ec:	mov	r0, #22
   185f0:	pop	{r4, r5, r6, pc}
   185f4:	add	r2, r0, #1
   185f8:	mov	r1, r5
   185fc:	mov	r0, r6
   18600:	bl	10ebc <memcpy@plt>
   18604:	mov	r0, #0
   18608:	pop	{r4, r5, r6, pc}
   1860c:	sub	r4, r4, #1
   18610:	mov	r2, r4
   18614:	mov	r1, r5
   18618:	mov	r0, r6
   1861c:	bl	10ebc <memcpy@plt>
   18620:	mov	r3, #0
   18624:	strb	r3, [r6, r4]
   18628:	mov	r0, #34	; 0x22
   1862c:	pop	{r4, r5, r6, pc}
   18630:	mov	r0, #22
   18634:	pop	{r4, r5, r6, pc}
   18638:	push	{r4, lr}
   1863c:	mov	r1, #0
   18640:	bl	1106c <setlocale@plt>
   18644:	pop	{r4, pc}
   18648:	subs	r2, r1, #1
   1864c:	bxeq	lr
   18650:	bcc	18828 <__assert_fail@plt+0x772c>
   18654:	cmp	r0, r1
   18658:	bls	1880c <__assert_fail@plt+0x7710>
   1865c:	tst	r1, r2
   18660:	beq	18818 <__assert_fail@plt+0x771c>
   18664:	clz	r3, r0
   18668:	clz	r2, r1
   1866c:	sub	r3, r2, r3
   18670:	rsbs	r3, r3, #31
   18674:	addne	r3, r3, r3, lsl #1
   18678:	mov	r2, #0
   1867c:	addne	pc, pc, r3, lsl #2
   18680:	nop			; (mov r0, r0)
   18684:	cmp	r0, r1, lsl #31
   18688:	adc	r2, r2, r2
   1868c:	subcs	r0, r0, r1, lsl #31
   18690:	cmp	r0, r1, lsl #30
   18694:	adc	r2, r2, r2
   18698:	subcs	r0, r0, r1, lsl #30
   1869c:	cmp	r0, r1, lsl #29
   186a0:	adc	r2, r2, r2
   186a4:	subcs	r0, r0, r1, lsl #29
   186a8:	cmp	r0, r1, lsl #28
   186ac:	adc	r2, r2, r2
   186b0:	subcs	r0, r0, r1, lsl #28
   186b4:	cmp	r0, r1, lsl #27
   186b8:	adc	r2, r2, r2
   186bc:	subcs	r0, r0, r1, lsl #27
   186c0:	cmp	r0, r1, lsl #26
   186c4:	adc	r2, r2, r2
   186c8:	subcs	r0, r0, r1, lsl #26
   186cc:	cmp	r0, r1, lsl #25
   186d0:	adc	r2, r2, r2
   186d4:	subcs	r0, r0, r1, lsl #25
   186d8:	cmp	r0, r1, lsl #24
   186dc:	adc	r2, r2, r2
   186e0:	subcs	r0, r0, r1, lsl #24
   186e4:	cmp	r0, r1, lsl #23
   186e8:	adc	r2, r2, r2
   186ec:	subcs	r0, r0, r1, lsl #23
   186f0:	cmp	r0, r1, lsl #22
   186f4:	adc	r2, r2, r2
   186f8:	subcs	r0, r0, r1, lsl #22
   186fc:	cmp	r0, r1, lsl #21
   18700:	adc	r2, r2, r2
   18704:	subcs	r0, r0, r1, lsl #21
   18708:	cmp	r0, r1, lsl #20
   1870c:	adc	r2, r2, r2
   18710:	subcs	r0, r0, r1, lsl #20
   18714:	cmp	r0, r1, lsl #19
   18718:	adc	r2, r2, r2
   1871c:	subcs	r0, r0, r1, lsl #19
   18720:	cmp	r0, r1, lsl #18
   18724:	adc	r2, r2, r2
   18728:	subcs	r0, r0, r1, lsl #18
   1872c:	cmp	r0, r1, lsl #17
   18730:	adc	r2, r2, r2
   18734:	subcs	r0, r0, r1, lsl #17
   18738:	cmp	r0, r1, lsl #16
   1873c:	adc	r2, r2, r2
   18740:	subcs	r0, r0, r1, lsl #16
   18744:	cmp	r0, r1, lsl #15
   18748:	adc	r2, r2, r2
   1874c:	subcs	r0, r0, r1, lsl #15
   18750:	cmp	r0, r1, lsl #14
   18754:	adc	r2, r2, r2
   18758:	subcs	r0, r0, r1, lsl #14
   1875c:	cmp	r0, r1, lsl #13
   18760:	adc	r2, r2, r2
   18764:	subcs	r0, r0, r1, lsl #13
   18768:	cmp	r0, r1, lsl #12
   1876c:	adc	r2, r2, r2
   18770:	subcs	r0, r0, r1, lsl #12
   18774:	cmp	r0, r1, lsl #11
   18778:	adc	r2, r2, r2
   1877c:	subcs	r0, r0, r1, lsl #11
   18780:	cmp	r0, r1, lsl #10
   18784:	adc	r2, r2, r2
   18788:	subcs	r0, r0, r1, lsl #10
   1878c:	cmp	r0, r1, lsl #9
   18790:	adc	r2, r2, r2
   18794:	subcs	r0, r0, r1, lsl #9
   18798:	cmp	r0, r1, lsl #8
   1879c:	adc	r2, r2, r2
   187a0:	subcs	r0, r0, r1, lsl #8
   187a4:	cmp	r0, r1, lsl #7
   187a8:	adc	r2, r2, r2
   187ac:	subcs	r0, r0, r1, lsl #7
   187b0:	cmp	r0, r1, lsl #6
   187b4:	adc	r2, r2, r2
   187b8:	subcs	r0, r0, r1, lsl #6
   187bc:	cmp	r0, r1, lsl #5
   187c0:	adc	r2, r2, r2
   187c4:	subcs	r0, r0, r1, lsl #5
   187c8:	cmp	r0, r1, lsl #4
   187cc:	adc	r2, r2, r2
   187d0:	subcs	r0, r0, r1, lsl #4
   187d4:	cmp	r0, r1, lsl #3
   187d8:	adc	r2, r2, r2
   187dc:	subcs	r0, r0, r1, lsl #3
   187e0:	cmp	r0, r1, lsl #2
   187e4:	adc	r2, r2, r2
   187e8:	subcs	r0, r0, r1, lsl #2
   187ec:	cmp	r0, r1, lsl #1
   187f0:	adc	r2, r2, r2
   187f4:	subcs	r0, r0, r1, lsl #1
   187f8:	cmp	r0, r1
   187fc:	adc	r2, r2, r2
   18800:	subcs	r0, r0, r1
   18804:	mov	r0, r2
   18808:	bx	lr
   1880c:	moveq	r0, #1
   18810:	movne	r0, #0
   18814:	bx	lr
   18818:	clz	r2, r1
   1881c:	rsb	r2, r2, #31
   18820:	lsr	r0, r0, r2
   18824:	bx	lr
   18828:	cmp	r0, #0
   1882c:	mvnne	r0, #0
   18830:	b	18e88 <__assert_fail@plt+0x7d8c>
   18834:	cmp	r1, #0
   18838:	beq	18828 <__assert_fail@plt+0x772c>
   1883c:	push	{r0, r1, lr}
   18840:	bl	18648 <__assert_fail@plt+0x754c>
   18844:	pop	{r1, r2, lr}
   18848:	mul	r3, r2, r0
   1884c:	sub	r1, r1, r3
   18850:	bx	lr
   18854:	cmp	r1, #0
   18858:	beq	18a64 <__assert_fail@plt+0x7968>
   1885c:	eor	ip, r0, r1
   18860:	rsbmi	r1, r1, #0
   18864:	subs	r2, r1, #1
   18868:	beq	18a30 <__assert_fail@plt+0x7934>
   1886c:	movs	r3, r0
   18870:	rsbmi	r3, r0, #0
   18874:	cmp	r3, r1
   18878:	bls	18a3c <__assert_fail@plt+0x7940>
   1887c:	tst	r1, r2
   18880:	beq	18a4c <__assert_fail@plt+0x7950>
   18884:	clz	r2, r3
   18888:	clz	r0, r1
   1888c:	sub	r2, r0, r2
   18890:	rsbs	r2, r2, #31
   18894:	addne	r2, r2, r2, lsl #1
   18898:	mov	r0, #0
   1889c:	addne	pc, pc, r2, lsl #2
   188a0:	nop			; (mov r0, r0)
   188a4:	cmp	r3, r1, lsl #31
   188a8:	adc	r0, r0, r0
   188ac:	subcs	r3, r3, r1, lsl #31
   188b0:	cmp	r3, r1, lsl #30
   188b4:	adc	r0, r0, r0
   188b8:	subcs	r3, r3, r1, lsl #30
   188bc:	cmp	r3, r1, lsl #29
   188c0:	adc	r0, r0, r0
   188c4:	subcs	r3, r3, r1, lsl #29
   188c8:	cmp	r3, r1, lsl #28
   188cc:	adc	r0, r0, r0
   188d0:	subcs	r3, r3, r1, lsl #28
   188d4:	cmp	r3, r1, lsl #27
   188d8:	adc	r0, r0, r0
   188dc:	subcs	r3, r3, r1, lsl #27
   188e0:	cmp	r3, r1, lsl #26
   188e4:	adc	r0, r0, r0
   188e8:	subcs	r3, r3, r1, lsl #26
   188ec:	cmp	r3, r1, lsl #25
   188f0:	adc	r0, r0, r0
   188f4:	subcs	r3, r3, r1, lsl #25
   188f8:	cmp	r3, r1, lsl #24
   188fc:	adc	r0, r0, r0
   18900:	subcs	r3, r3, r1, lsl #24
   18904:	cmp	r3, r1, lsl #23
   18908:	adc	r0, r0, r0
   1890c:	subcs	r3, r3, r1, lsl #23
   18910:	cmp	r3, r1, lsl #22
   18914:	adc	r0, r0, r0
   18918:	subcs	r3, r3, r1, lsl #22
   1891c:	cmp	r3, r1, lsl #21
   18920:	adc	r0, r0, r0
   18924:	subcs	r3, r3, r1, lsl #21
   18928:	cmp	r3, r1, lsl #20
   1892c:	adc	r0, r0, r0
   18930:	subcs	r3, r3, r1, lsl #20
   18934:	cmp	r3, r1, lsl #19
   18938:	adc	r0, r0, r0
   1893c:	subcs	r3, r3, r1, lsl #19
   18940:	cmp	r3, r1, lsl #18
   18944:	adc	r0, r0, r0
   18948:	subcs	r3, r3, r1, lsl #18
   1894c:	cmp	r3, r1, lsl #17
   18950:	adc	r0, r0, r0
   18954:	subcs	r3, r3, r1, lsl #17
   18958:	cmp	r3, r1, lsl #16
   1895c:	adc	r0, r0, r0
   18960:	subcs	r3, r3, r1, lsl #16
   18964:	cmp	r3, r1, lsl #15
   18968:	adc	r0, r0, r0
   1896c:	subcs	r3, r3, r1, lsl #15
   18970:	cmp	r3, r1, lsl #14
   18974:	adc	r0, r0, r0
   18978:	subcs	r3, r3, r1, lsl #14
   1897c:	cmp	r3, r1, lsl #13
   18980:	adc	r0, r0, r0
   18984:	subcs	r3, r3, r1, lsl #13
   18988:	cmp	r3, r1, lsl #12
   1898c:	adc	r0, r0, r0
   18990:	subcs	r3, r3, r1, lsl #12
   18994:	cmp	r3, r1, lsl #11
   18998:	adc	r0, r0, r0
   1899c:	subcs	r3, r3, r1, lsl #11
   189a0:	cmp	r3, r1, lsl #10
   189a4:	adc	r0, r0, r0
   189a8:	subcs	r3, r3, r1, lsl #10
   189ac:	cmp	r3, r1, lsl #9
   189b0:	adc	r0, r0, r0
   189b4:	subcs	r3, r3, r1, lsl #9
   189b8:	cmp	r3, r1, lsl #8
   189bc:	adc	r0, r0, r0
   189c0:	subcs	r3, r3, r1, lsl #8
   189c4:	cmp	r3, r1, lsl #7
   189c8:	adc	r0, r0, r0
   189cc:	subcs	r3, r3, r1, lsl #7
   189d0:	cmp	r3, r1, lsl #6
   189d4:	adc	r0, r0, r0
   189d8:	subcs	r3, r3, r1, lsl #6
   189dc:	cmp	r3, r1, lsl #5
   189e0:	adc	r0, r0, r0
   189e4:	subcs	r3, r3, r1, lsl #5
   189e8:	cmp	r3, r1, lsl #4
   189ec:	adc	r0, r0, r0
   189f0:	subcs	r3, r3, r1, lsl #4
   189f4:	cmp	r3, r1, lsl #3
   189f8:	adc	r0, r0, r0
   189fc:	subcs	r3, r3, r1, lsl #3
   18a00:	cmp	r3, r1, lsl #2
   18a04:	adc	r0, r0, r0
   18a08:	subcs	r3, r3, r1, lsl #2
   18a0c:	cmp	r3, r1, lsl #1
   18a10:	adc	r0, r0, r0
   18a14:	subcs	r3, r3, r1, lsl #1
   18a18:	cmp	r3, r1
   18a1c:	adc	r0, r0, r0
   18a20:	subcs	r3, r3, r1
   18a24:	cmp	ip, #0
   18a28:	rsbmi	r0, r0, #0
   18a2c:	bx	lr
   18a30:	teq	ip, r0
   18a34:	rsbmi	r0, r0, #0
   18a38:	bx	lr
   18a3c:	movcc	r0, #0
   18a40:	asreq	r0, ip, #31
   18a44:	orreq	r0, r0, #1
   18a48:	bx	lr
   18a4c:	clz	r2, r1
   18a50:	rsb	r2, r2, #31
   18a54:	cmp	ip, #0
   18a58:	lsr	r0, r3, r2
   18a5c:	rsbmi	r0, r0, #0
   18a60:	bx	lr
   18a64:	cmp	r0, #0
   18a68:	mvngt	r0, #-2147483648	; 0x80000000
   18a6c:	movlt	r0, #-2147483648	; 0x80000000
   18a70:	b	18e88 <__assert_fail@plt+0x7d8c>
   18a74:	cmp	r1, #0
   18a78:	beq	18a64 <__assert_fail@plt+0x7968>
   18a7c:	push	{r0, r1, lr}
   18a80:	bl	1885c <__assert_fail@plt+0x7760>
   18a84:	pop	{r1, r2, lr}
   18a88:	mul	r3, r2, r0
   18a8c:	sub	r1, r1, r3
   18a90:	bx	lr
   18a94:	eor	r1, r1, #-2147483648	; 0x80000000
   18a98:	b	18aa0 <__assert_fail@plt+0x79a4>
   18a9c:	eor	r3, r3, #-2147483648	; 0x80000000
   18aa0:	push	{r4, r5, lr}
   18aa4:	lsl	r4, r1, #1
   18aa8:	lsl	r5, r3, #1
   18aac:	teq	r4, r5
   18ab0:	teqeq	r0, r2
   18ab4:	orrsne	ip, r4, r0
   18ab8:	orrsne	ip, r5, r2
   18abc:	mvnsne	ip, r4, asr #21
   18ac0:	mvnsne	ip, r5, asr #21
   18ac4:	beq	18cb0 <__assert_fail@plt+0x7bb4>
   18ac8:	lsr	r4, r4, #21
   18acc:	rsbs	r5, r4, r5, lsr #21
   18ad0:	rsblt	r5, r5, #0
   18ad4:	ble	18af4 <__assert_fail@plt+0x79f8>
   18ad8:	add	r4, r4, r5
   18adc:	eor	r2, r0, r2
   18ae0:	eor	r3, r1, r3
   18ae4:	eor	r0, r2, r0
   18ae8:	eor	r1, r3, r1
   18aec:	eor	r2, r0, r2
   18af0:	eor	r3, r1, r3
   18af4:	cmp	r5, #54	; 0x36
   18af8:	pophi	{r4, r5, pc}
   18afc:	tst	r1, #-2147483648	; 0x80000000
   18b00:	lsl	r1, r1, #12
   18b04:	mov	ip, #1048576	; 0x100000
   18b08:	orr	r1, ip, r1, lsr #12
   18b0c:	beq	18b18 <__assert_fail@plt+0x7a1c>
   18b10:	rsbs	r0, r0, #0
   18b14:	rsc	r1, r1, #0
   18b18:	tst	r3, #-2147483648	; 0x80000000
   18b1c:	lsl	r3, r3, #12
   18b20:	orr	r3, ip, r3, lsr #12
   18b24:	beq	18b30 <__assert_fail@plt+0x7a34>
   18b28:	rsbs	r2, r2, #0
   18b2c:	rsc	r3, r3, #0
   18b30:	teq	r4, r5
   18b34:	beq	18c98 <__assert_fail@plt+0x7b9c>
   18b38:	sub	r4, r4, #1
   18b3c:	rsbs	lr, r5, #32
   18b40:	blt	18b5c <__assert_fail@plt+0x7a60>
   18b44:	lsl	ip, r2, lr
   18b48:	adds	r0, r0, r2, lsr r5
   18b4c:	adc	r1, r1, #0
   18b50:	adds	r0, r0, r3, lsl lr
   18b54:	adcs	r1, r1, r3, asr r5
   18b58:	b	18b78 <__assert_fail@plt+0x7a7c>
   18b5c:	sub	r5, r5, #32
   18b60:	add	lr, lr, #32
   18b64:	cmp	r2, #1
   18b68:	lsl	ip, r3, lr
   18b6c:	orrcs	ip, ip, #2
   18b70:	adds	r0, r0, r3, asr r5
   18b74:	adcs	r1, r1, r3, asr #31
   18b78:	and	r5, r1, #-2147483648	; 0x80000000
   18b7c:	bpl	18b8c <__assert_fail@plt+0x7a90>
   18b80:	rsbs	ip, ip, #0
   18b84:	rscs	r0, r0, #0
   18b88:	rsc	r1, r1, #0
   18b8c:	cmp	r1, #1048576	; 0x100000
   18b90:	bcc	18bd0 <__assert_fail@plt+0x7ad4>
   18b94:	cmp	r1, #2097152	; 0x200000
   18b98:	bcc	18bb8 <__assert_fail@plt+0x7abc>
   18b9c:	lsrs	r1, r1, #1
   18ba0:	rrxs	r0, r0
   18ba4:	rrx	ip, ip
   18ba8:	add	r4, r4, #1
   18bac:	lsl	r2, r4, #21
   18bb0:	cmn	r2, #4194304	; 0x400000
   18bb4:	bcs	18d10 <__assert_fail@plt+0x7c14>
   18bb8:	cmp	ip, #-2147483648	; 0x80000000
   18bbc:	lsrseq	ip, r0, #1
   18bc0:	adcs	r0, r0, #0
   18bc4:	adc	r1, r1, r4, lsl #20
   18bc8:	orr	r1, r1, r5
   18bcc:	pop	{r4, r5, pc}
   18bd0:	lsls	ip, ip, #1
   18bd4:	adcs	r0, r0, r0
   18bd8:	adc	r1, r1, r1
   18bdc:	tst	r1, #1048576	; 0x100000
   18be0:	sub	r4, r4, #1
   18be4:	bne	18bb8 <__assert_fail@plt+0x7abc>
   18be8:	teq	r1, #0
   18bec:	moveq	r1, r0
   18bf0:	moveq	r0, #0
   18bf4:	clz	r3, r1
   18bf8:	addeq	r3, r3, #32
   18bfc:	sub	r3, r3, #11
   18c00:	subs	r2, r3, #32
   18c04:	bge	18c28 <__assert_fail@plt+0x7b2c>
   18c08:	adds	r2, r2, #12
   18c0c:	ble	18c24 <__assert_fail@plt+0x7b28>
   18c10:	add	ip, r2, #20
   18c14:	rsb	r2, r2, #12
   18c18:	lsl	r0, r1, ip
   18c1c:	lsr	r1, r1, r2
   18c20:	b	18c38 <__assert_fail@plt+0x7b3c>
   18c24:	add	r2, r2, #20
   18c28:	rsble	ip, r2, #32
   18c2c:	lsl	r1, r1, r2
   18c30:	orrle	r1, r1, r0, lsr ip
   18c34:	lslle	r0, r0, r2
   18c38:	subs	r4, r4, r3
   18c3c:	addge	r1, r1, r4, lsl #20
   18c40:	orrge	r1, r1, r5
   18c44:	popge	{r4, r5, pc}
   18c48:	mvn	r4, r4
   18c4c:	subs	r4, r4, #31
   18c50:	bge	18c8c <__assert_fail@plt+0x7b90>
   18c54:	adds	r4, r4, #12
   18c58:	bgt	18c74 <__assert_fail@plt+0x7b78>
   18c5c:	add	r4, r4, #20
   18c60:	rsb	r2, r4, #32
   18c64:	lsr	r0, r0, r4
   18c68:	orr	r0, r0, r1, lsl r2
   18c6c:	orr	r1, r5, r1, lsr r4
   18c70:	pop	{r4, r5, pc}
   18c74:	rsb	r4, r4, #12
   18c78:	rsb	r2, r4, #32
   18c7c:	lsr	r0, r0, r2
   18c80:	orr	r0, r0, r1, lsl r4
   18c84:	mov	r1, r5
   18c88:	pop	{r4, r5, pc}
   18c8c:	lsr	r0, r1, r4
   18c90:	mov	r1, r5
   18c94:	pop	{r4, r5, pc}
   18c98:	teq	r4, #0
   18c9c:	eor	r3, r3, #1048576	; 0x100000
   18ca0:	eoreq	r1, r1, #1048576	; 0x100000
   18ca4:	addeq	r4, r4, #1
   18ca8:	subne	r5, r5, #1
   18cac:	b	18b38 <__assert_fail@plt+0x7a3c>
   18cb0:	mvns	ip, r4, asr #21
   18cb4:	mvnsne	ip, r5, asr #21
   18cb8:	beq	18d20 <__assert_fail@plt+0x7c24>
   18cbc:	teq	r4, r5
   18cc0:	teqeq	r0, r2
   18cc4:	beq	18cd8 <__assert_fail@plt+0x7bdc>
   18cc8:	orrs	ip, r4, r0
   18ccc:	moveq	r1, r3
   18cd0:	moveq	r0, r2
   18cd4:	pop	{r4, r5, pc}
   18cd8:	teq	r1, r3
   18cdc:	movne	r1, #0
   18ce0:	movne	r0, #0
   18ce4:	popne	{r4, r5, pc}
   18ce8:	lsrs	ip, r4, #21
   18cec:	bne	18d00 <__assert_fail@plt+0x7c04>
   18cf0:	lsls	r0, r0, #1
   18cf4:	adcs	r1, r1, r1
   18cf8:	orrcs	r1, r1, #-2147483648	; 0x80000000
   18cfc:	pop	{r4, r5, pc}
   18d00:	adds	r4, r4, #4194304	; 0x400000
   18d04:	addcc	r1, r1, #1048576	; 0x100000
   18d08:	popcc	{r4, r5, pc}
   18d0c:	and	r5, r1, #-2147483648	; 0x80000000
   18d10:	orr	r1, r5, #2130706432	; 0x7f000000
   18d14:	orr	r1, r1, #15728640	; 0xf00000
   18d18:	mov	r0, #0
   18d1c:	pop	{r4, r5, pc}
   18d20:	mvns	ip, r4, asr #21
   18d24:	movne	r1, r3
   18d28:	movne	r0, r2
   18d2c:	mvnseq	ip, r5, asr #21
   18d30:	movne	r3, r1
   18d34:	movne	r2, r0
   18d38:	orrs	r4, r0, r1, lsl #12
   18d3c:	orrseq	r5, r2, r3, lsl #12
   18d40:	teqeq	r1, r3
   18d44:	orrne	r1, r1, #524288	; 0x80000
   18d48:	pop	{r4, r5, pc}
   18d4c:	teq	r0, #0
   18d50:	moveq	r1, #0
   18d54:	bxeq	lr
   18d58:	push	{r4, r5, lr}
   18d5c:	mov	r4, #1024	; 0x400
   18d60:	add	r4, r4, #50	; 0x32
   18d64:	mov	r5, #0
   18d68:	mov	r1, #0
   18d6c:	b	18be8 <__assert_fail@plt+0x7aec>
   18d70:	teq	r0, #0
   18d74:	moveq	r1, #0
   18d78:	bxeq	lr
   18d7c:	push	{r4, r5, lr}
   18d80:	mov	r4, #1024	; 0x400
   18d84:	add	r4, r4, #50	; 0x32
   18d88:	ands	r5, r0, #-2147483648	; 0x80000000
   18d8c:	rsbmi	r0, r0, #0
   18d90:	mov	r1, #0
   18d94:	b	18be8 <__assert_fail@plt+0x7aec>
   18d98:	lsls	r2, r0, #1
   18d9c:	asr	r1, r2, #3
   18da0:	rrx	r1, r1
   18da4:	lsl	r0, r2, #28
   18da8:	andsne	r3, r2, #-16777216	; 0xff000000
   18dac:	teqne	r3, #-16777216	; 0xff000000
   18db0:	eorne	r1, r1, #939524096	; 0x38000000
   18db4:	bxne	lr
   18db8:	teq	r2, #0
   18dbc:	teqne	r3, #-16777216	; 0xff000000
   18dc0:	bxeq	lr
   18dc4:	push	{r4, r5, lr}
   18dc8:	mov	r4, #896	; 0x380
   18dcc:	and	r5, r1, #-2147483648	; 0x80000000
   18dd0:	bic	r1, r1, #-2147483648	; 0x80000000
   18dd4:	b	18be8 <__assert_fail@plt+0x7aec>
   18dd8:	orrs	r2, r0, r1
   18ddc:	bxeq	lr
   18de0:	push	{r4, r5, lr}
   18de4:	mov	r5, #0
   18de8:	b	18e08 <__assert_fail@plt+0x7d0c>
   18dec:	orrs	r2, r0, r1
   18df0:	bxeq	lr
   18df4:	push	{r4, r5, lr}
   18df8:	ands	r5, r1, #-2147483648	; 0x80000000
   18dfc:	bpl	18e08 <__assert_fail@plt+0x7d0c>
   18e00:	rsbs	r0, r0, #0
   18e04:	rsc	r1, r1, #0
   18e08:	mov	r4, #1024	; 0x400
   18e0c:	add	r4, r4, #50	; 0x32
   18e10:	lsrs	ip, r1, #22
   18e14:	beq	18b8c <__assert_fail@plt+0x7a90>
   18e18:	mov	r2, #3
   18e1c:	lsrs	ip, ip, #3
   18e20:	addne	r2, r2, #3
   18e24:	lsrs	ip, ip, #3
   18e28:	addne	r2, r2, #3
   18e2c:	add	r2, r2, ip, lsr #3
   18e30:	rsb	r3, r2, #32
   18e34:	lsl	ip, r0, r3
   18e38:	lsr	r0, r0, r2
   18e3c:	orr	r0, r0, r1, lsl r3
   18e40:	lsr	r1, r1, r2
   18e44:	add	r4, r4, r2
   18e48:	b	18b8c <__assert_fail@plt+0x7a90>
   18e4c:	cmp	r3, #0
   18e50:	cmpeq	r2, #0
   18e54:	bne	18e6c <__assert_fail@plt+0x7d70>
   18e58:	cmp	r1, #0
   18e5c:	cmpeq	r0, #0
   18e60:	mvnne	r1, #0
   18e64:	mvnne	r0, #0
   18e68:	b	18e88 <__assert_fail@plt+0x7d8c>
   18e6c:	sub	sp, sp, #8
   18e70:	push	{sp, lr}
   18e74:	bl	18f10 <__assert_fail@plt+0x7e14>
   18e78:	ldr	lr, [sp, #4]
   18e7c:	add	sp, sp, #8
   18e80:	pop	{r2, r3}
   18e84:	bx	lr
   18e88:	push	{r1, lr}
   18e8c:	mov	r0, #8
   18e90:	bl	10e50 <raise@plt>
   18e94:	pop	{r1, pc}
   18e98:	vmov	d7, r0, r1
   18e9c:	vcmpe.f64	d7, #0.0
   18ea0:	vmrs	APSR_nzcv, fpscr
   18ea4:	bmi	18eac <__assert_fail@plt+0x7db0>
   18ea8:	b	18ec8 <__assert_fail@plt+0x7dcc>
   18eac:	push	{r4, lr}
   18eb0:	eor	r1, r1, #-2147483648	; 0x80000000
   18eb4:	bl	18ec8 <__assert_fail@plt+0x7dcc>
   18eb8:	rsbs	r0, r0, #0
   18ebc:	rsc	r1, r1, #0
   18ec0:	pop	{r4, pc}
   18ec4:	andeq	r0, r0, r0
   18ec8:	vmov	d7, r0, r1
   18ecc:	vldr	d6, [pc, #44]	; 18f00 <__assert_fail@plt+0x7e04>
   18ed0:	vldr	d5, [pc, #48]	; 18f08 <__assert_fail@plt+0x7e0c>
   18ed4:	mov	r0, #0
   18ed8:	vmul.f64	d6, d7, d6
   18edc:	vcvt.u32.f64	s12, d6
   18ee0:	vcvt.f64.u32	d4, s12
   18ee4:	vmov	r1, s12
   18ee8:	vmls.f64	d7, d4, d5
   18eec:	vcvt.u32.f64	s14, d7
   18ef0:	vmov	r3, s14
   18ef4:	orr	r0, r0, r3
   18ef8:	bx	lr
   18efc:	nop			; (mov r0, r0)
   18f00:	andeq	r0, r0, r0
   18f04:	ldclcc	0, cr0, [r0]
   18f08:	andeq	r0, r0, r0
   18f0c:	mvnsmi	r0, r0
   18f10:	cmp	r1, r3
   18f14:	push	{r4, r5, r6, r7, r8, r9, lr}
   18f18:	cmpeq	r0, r2
   18f1c:	mov	r4, r0
   18f20:	mov	r5, r1
   18f24:	ldr	r9, [sp, #28]
   18f28:	movcc	r0, #0
   18f2c:	movcc	r1, #0
   18f30:	bcc	19028 <__assert_fail@plt+0x7f2c>
   18f34:	cmp	r3, #0
   18f38:	clzeq	ip, r2
   18f3c:	clzne	ip, r3
   18f40:	addeq	ip, ip, #32
   18f44:	cmp	r5, #0
   18f48:	clzeq	r1, r4
   18f4c:	addeq	r1, r1, #32
   18f50:	clzne	r1, r5
   18f54:	sub	ip, ip, r1
   18f58:	sub	lr, ip, #32
   18f5c:	lsl	r7, r3, ip
   18f60:	rsb	r8, ip, #32
   18f64:	orr	r7, r7, r2, lsl lr
   18f68:	orr	r7, r7, r2, lsr r8
   18f6c:	lsl	r6, r2, ip
   18f70:	cmp	r5, r7
   18f74:	cmpeq	r4, r6
   18f78:	movcc	r0, #0
   18f7c:	movcc	r1, #0
   18f80:	bcc	18f9c <__assert_fail@plt+0x7ea0>
   18f84:	mov	r3, #1
   18f88:	subs	r4, r4, r6
   18f8c:	lsl	r1, r3, lr
   18f90:	lsl	r0, r3, ip
   18f94:	orr	r1, r1, r3, lsr r8
   18f98:	sbc	r5, r5, r7
   18f9c:	cmp	ip, #0
   18fa0:	beq	19028 <__assert_fail@plt+0x7f2c>
   18fa4:	lsrs	r3, r7, #1
   18fa8:	rrx	r2, r6
   18fac:	mov	r6, ip
   18fb0:	b	18fd4 <__assert_fail@plt+0x7ed8>
   18fb4:	subs	r4, r4, r2
   18fb8:	sbc	r5, r5, r3
   18fbc:	adds	r4, r4, r4
   18fc0:	adc	r5, r5, r5
   18fc4:	adds	r4, r4, #1
   18fc8:	adc	r5, r5, #0
   18fcc:	subs	r6, r6, #1
   18fd0:	beq	18ff0 <__assert_fail@plt+0x7ef4>
   18fd4:	cmp	r5, r3
   18fd8:	cmpeq	r4, r2
   18fdc:	bcs	18fb4 <__assert_fail@plt+0x7eb8>
   18fe0:	adds	r4, r4, r4
   18fe4:	adc	r5, r5, r5
   18fe8:	subs	r6, r6, #1
   18fec:	bne	18fd4 <__assert_fail@plt+0x7ed8>
   18ff0:	lsr	r6, r4, ip
   18ff4:	lsr	r7, r5, ip
   18ff8:	orr	r6, r6, r5, lsl r8
   18ffc:	adds	r2, r0, r4
   19000:	orr	r6, r6, r5, lsr lr
   19004:	adc	r3, r1, r5
   19008:	lsl	r1, r7, ip
   1900c:	orr	r1, r1, r6, lsl lr
   19010:	lsl	r0, r6, ip
   19014:	orr	r1, r1, r6, lsr r8
   19018:	subs	r0, r2, r0
   1901c:	mov	r4, r6
   19020:	mov	r5, r7
   19024:	sbc	r1, r3, r1
   19028:	cmp	r9, #0
   1902c:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   19030:	strd	r4, [r9]
   19034:	pop	{r4, r5, r6, r7, r8, r9, pc}
   19038:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1903c:	mov	r7, r0
   19040:	ldr	r6, [pc, #72]	; 19090 <__assert_fail@plt+0x7f94>
   19044:	ldr	r5, [pc, #72]	; 19094 <__assert_fail@plt+0x7f98>
   19048:	add	r6, pc, r6
   1904c:	add	r5, pc, r5
   19050:	sub	r6, r6, r5
   19054:	mov	r8, r1
   19058:	mov	r9, r2
   1905c:	bl	10e18 <calloc@plt-0x20>
   19060:	asrs	r6, r6, #2
   19064:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   19068:	mov	r4, #0
   1906c:	add	r4, r4, #1
   19070:	ldr	r3, [r5], #4
   19074:	mov	r2, r9
   19078:	mov	r1, r8
   1907c:	mov	r0, r7
   19080:	blx	r3
   19084:	cmp	r6, r4
   19088:	bne	1906c <__assert_fail@plt+0x7f70>
   1908c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19090:	andeq	r2, r1, r0, asr #29
   19094:			; <UNDEFINED> instruction: 0x00012eb8
   19098:	bx	lr
   1909c:	ldr	r3, [pc, #12]	; 190b0 <__assert_fail@plt+0x7fb4>
   190a0:	mov	r1, #0
   190a4:	add	r3, pc, r3
   190a8:	ldr	r2, [r3]
   190ac:	b	1100c <__cxa_atexit@plt>
   190b0:	andeq	r3, r1, r8, asr r0

Disassembly of section .fini:

000190b4 <.fini>:
   190b4:	push	{r3, lr}
   190b8:	pop	{r3, pc}
