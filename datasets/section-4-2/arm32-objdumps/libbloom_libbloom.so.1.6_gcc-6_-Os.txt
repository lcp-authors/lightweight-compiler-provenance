
../repos/libbloom/build/libbloom.so.1.6:     file format elf32-littlearm


Disassembly of section .init:

00000510 <.init>:
 510:	push	{r3, lr}
 514:	bl	5b8 <bloom_init@plt+0x10>
 518:	pop	{r3, pc}

Disassembly of section .plt:

0000051c <calloc@plt-0x14>:
 51c:	push	{lr}		; (str lr, [sp, #-4]!)
 520:	ldr	lr, [pc, #4]	; 52c <calloc@plt-0x4>
 524:	add	lr, pc, lr
 528:	ldr	pc, [lr, #8]!
 52c:	ldrdeq	r0, [r1], -r4

00000530 <calloc@plt>:
 530:	add	ip, pc, #0, 12
 534:	add	ip, ip, #16, 20	; 0x10000
 538:	ldr	pc, [ip, #2772]!	; 0xad4

0000053c <raise@plt>:
 53c:	add	ip, pc, #0, 12
 540:	add	ip, ip, #16, 20	; 0x10000
 544:	ldr	pc, [ip, #2764]!	; 0xacc

00000548 <log@plt>:
 548:	add	ip, pc, #0, 12
 54c:	add	ip, ip, #16, 20	; 0x10000
 550:	ldr	pc, [ip, #2756]!	; 0xac4

00000554 <__cxa_finalize@plt>:
 554:	add	ip, pc, #0, 12
 558:	add	ip, ip, #16, 20	; 0x10000
 55c:	ldr	pc, [ip, #2748]!	; 0xabc

00000560 <printf@plt>:
 560:	add	ip, pc, #0, 12
 564:	add	ip, ip, #16, 20	; 0x10000
 568:	ldr	pc, [ip, #2740]!	; 0xab4

0000056c <murmurhash2@plt>:
 56c:	add	ip, pc, #0, 12
 570:	add	ip, ip, #16, 20	; 0x10000
 574:	ldr	pc, [ip, #2732]!	; 0xaac

00000578 <free@plt>:
 578:	add	ip, pc, #0, 12
 57c:	add	ip, ip, #16, 20	; 0x10000
 580:	ldr	pc, [ip, #2724]!	; 0xaa4

00000584 <__gmon_start__@plt>:
 584:	add	ip, pc, #0, 12
 588:	add	ip, ip, #16, 20	; 0x10000
 58c:	ldr	pc, [ip, #2716]!	; 0xa9c

00000590 <memset@plt>:
 590:	add	ip, pc, #0, 12
 594:	add	ip, ip, #16, 20	; 0x10000
 598:	ldr	pc, [ip, #2708]!	; 0xa94

0000059c <ceil@plt>:
 59c:	add	ip, pc, #0, 12
 5a0:	add	ip, ip, #16, 20	; 0x10000
 5a4:	ldr	pc, [ip, #2700]!	; 0xa8c

000005a8 <bloom_init@plt>:
 5a8:	add	ip, pc, #0, 12
 5ac:	add	ip, ip, #16, 20	; 0x10000
 5b0:	ldr	pc, [ip, #2692]!	; 0xa84

Disassembly of section .text:

000005b8 <bloom_init@@Base-0x250>:
 5b8:	ldr	r3, [pc, #20]	; 5d4 <bloom_init@plt+0x2c>
 5bc:	ldr	r2, [pc, #20]	; 5d8 <bloom_init@plt+0x30>
 5c0:	add	r3, pc, r3
 5c4:	ldr	r2, [r3, r2]
 5c8:	cmp	r2, #0
 5cc:	bxeq	lr
 5d0:	b	584 <__gmon_start__@plt>
 5d4:	andeq	r0, r1, r8, lsr sl
 5d8:	andeq	r0, r0, r0, asr #32
 5dc:	ldr	r3, [pc, #52]	; 618 <bloom_init@plt+0x70>
 5e0:	ldr	r0, [pc, #52]	; 61c <bloom_init@plt+0x74>
 5e4:	add	r3, pc, r3
 5e8:	add	r0, pc, r0
 5ec:	add	r3, r3, #3
 5f0:	sub	r3, r3, r0
 5f4:	cmp	r3, #6
 5f8:	ldr	r3, [pc, #32]	; 620 <bloom_init@plt+0x78>
 5fc:	add	r3, pc, r3
 600:	bxls	lr
 604:	ldr	r2, [pc, #24]	; 624 <bloom_init@plt+0x7c>
 608:	ldr	r3, [r3, r2]
 60c:	cmp	r3, #0
 610:	bxeq	lr
 614:	bx	r3
 618:	andeq	r0, r1, r4, ror #20
 61c:	andeq	r0, r1, r0, ror #20
 620:	strdeq	r0, [r1], -ip
 624:	andeq	r0, r0, ip, lsr r0
 628:	ldr	r1, [pc, #56]	; 668 <bloom_init@plt+0xc0>
 62c:	ldr	r0, [pc, #56]	; 66c <bloom_init@plt+0xc4>
 630:	add	r1, pc, r1
 634:	add	r0, pc, r0
 638:	sub	r1, r1, r0
 63c:	ldr	r3, [pc, #44]	; 670 <bloom_init@plt+0xc8>
 640:	asr	r1, r1, #2
 644:	add	r3, pc, r3
 648:	add	r1, r1, r1, lsr #31
 64c:	asrs	r1, r1, #1
 650:	bxeq	lr
 654:	ldr	r2, [pc, #24]	; 674 <bloom_init@plt+0xcc>
 658:	ldr	r3, [r3, r2]
 65c:	cmp	r3, #0
 660:	bxeq	lr
 664:	bx	r3
 668:	andeq	r0, r1, r8, lsl sl
 66c:	andeq	r0, r1, r4, lsl sl
 670:			; <UNDEFINED> instruction: 0x000109b4
 674:	andeq	r0, r0, r8, asr #32
 678:	ldr	r3, [pc, #76]	; 6cc <bloom_init@plt+0x124>
 67c:	ldr	r2, [pc, #76]	; 6d0 <bloom_init@plt+0x128>
 680:	add	r3, pc, r3
 684:	add	r2, pc, r2
 688:	ldrb	r3, [r3]
 68c:	cmp	r3, #0
 690:	bxne	lr
 694:	ldr	r3, [pc, #56]	; 6d4 <bloom_init@plt+0x12c>
 698:	push	{r4, lr}
 69c:	ldr	r3, [r2, r3]
 6a0:	cmp	r3, #0
 6a4:	beq	6b4 <bloom_init@plt+0x10c>
 6a8:	ldr	r3, [pc, #40]	; 6d8 <bloom_init@plt+0x130>
 6ac:	ldr	r0, [pc, r3]
 6b0:	bl	554 <__cxa_finalize@plt>
 6b4:	bl	5dc <bloom_init@plt+0x34>
 6b8:	ldr	r3, [pc, #28]	; 6dc <bloom_init@plt+0x134>
 6bc:	mov	r2, #1
 6c0:	add	r3, pc, r3
 6c4:	strb	r2, [r3]
 6c8:	pop	{r4, pc}
 6cc:	andeq	r0, r1, r8, asr #19
 6d0:	andeq	r0, r1, r4, ror r9
 6d4:	andeq	r0, r0, r8, lsr r0
 6d8:	muleq	r1, r8, r9
 6dc:	andeq	r0, r1, r8, lsl #19
 6e0:	ldr	r0, [pc, #56]	; 720 <bloom_init@plt+0x178>
 6e4:	ldr	r3, [pc, #56]	; 724 <bloom_init@plt+0x17c>
 6e8:	add	r0, pc, r0
 6ec:	ldr	r2, [r0]
 6f0:	add	r3, pc, r3
 6f4:	cmp	r2, #0
 6f8:	bne	700 <bloom_init@plt+0x158>
 6fc:	b	628 <bloom_init@plt+0x80>
 700:	ldr	r2, [pc, #32]	; 728 <bloom_init@plt+0x180>
 704:	ldr	r3, [r3, r2]
 708:	cmp	r3, #0
 70c:	beq	6fc <bloom_init@plt+0x154>
 710:	push	{r4, lr}
 714:	blx	r3
 718:	pop	{r4, lr}
 71c:	b	628 <bloom_init@plt+0x80>
 720:	andeq	r0, r1, ip, lsl r8
 724:	andeq	r0, r1, r8, lsl #18
 728:	andeq	r0, r0, r4, asr #32
 72c:	andeq	r0, r0, r0
 730:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
 734:	mov	r5, r3
 738:	ldr	r3, [r0, #44]	; 0x2c
 73c:	mov	r4, r0
 740:	cmp	r3, #0
 744:	bne	764 <bloom_init@plt+0x1bc>
 748:	mov	r1, r0
 74c:	ldr	r0, [pc, #172]	; 800 <bloom_init@plt+0x258>
 750:	mvn	r5, #0
 754:	add	r0, pc, r0
 758:	bl	560 <printf@plt>
 75c:	mov	r0, r5
 760:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
 764:	mov	r6, r1
 768:	mov	r8, r2
 76c:	mov	r1, r8
 770:	ldr	r2, [pc, #140]	; 804 <bloom_init@plt+0x25c>
 774:	mov	r0, r6
 778:	bl	56c <murmurhash2@plt>
 77c:	mov	r1, r8
 780:	mov	sl, #1
 784:	mov	r2, r0
 788:	mov	r7, r0
 78c:	mov	r0, r6
 790:	bl	56c <murmurhash2@plt>
 794:	mov	r6, #0
 798:	mov	r8, r6
 79c:	mov	r9, r0
 7a0:	ldr	r3, [r4, #24]
 7a4:	cmp	r6, r3
 7a8:	subcs	r5, r8, r3
 7ac:	clzcs	r5, r5
 7b0:	lsrcs	r5, r5, #5
 7b4:	bcs	75c <bloom_init@plt+0x1b4>
 7b8:	ldr	r1, [r4, #16]
 7bc:	mov	r0, r7
 7c0:	bl	c74 <murmurhash2@@Base+0x268>
 7c4:	ldr	r0, [r4, #40]	; 0x28
 7c8:	and	r2, r1, #7
 7cc:	ldrb	r3, [r0, r1, lsr #3]
 7d0:	lsl	r2, sl, r2
 7d4:	tst	r2, r3
 7d8:	bne	7f8 <bloom_init@plt+0x250>
 7dc:	cmp	r5, #0
 7e0:	beq	75c <bloom_init@plt+0x1b4>
 7e4:	orr	r3, r3, r2
 7e8:	strb	r3, [r0, r1, lsr #3]
 7ec:	add	r6, r6, #1
 7f0:	add	r7, r7, r9
 7f4:	b	7a0 <bloom_init@plt+0x1f8>
 7f8:	add	r8, r8, #1
 7fc:	b	7ec <bloom_init@plt+0x244>
 800:	andeq	r0, r0, r0, asr r5
 804:	strbls	fp, [r7, -ip, lsl #5]

00000808 <bloom_init@@Base>:
 808:	vcmp.f64	d0, #0.0
 80c:	mov	r3, #0
 810:	str	r3, [r0, #44]	; 0x2c
 814:	vmrs	APSR_nzcv, fpscr
 818:	moveq	r3, #1
 81c:	cmp	r1, #1000	; 0x3e8
 820:	orrlt	r3, r3, #1
 824:	cmp	r3, #0
 828:	beq	83c <bloom_init@@Base+0x34>
 82c:	mov	r0, #1
 830:	bx	lr
 834:	mov	r0, #1
 838:	pop	{r4, r5, r6, pc}
 83c:	push	{r4, r5, r6, lr}
 840:	mov	r5, r0
 844:	mov	r4, r1
 848:	str	r1, [r5]
 84c:	vstr	d0, [r5, #8]
 850:	bl	548 <log@plt>
 854:	vldr	d7, [pc, #140]	; 8e8 <bloom_init@@Base+0xe0>
 858:	vdiv.f64	d0, d0, d7
 85c:	vmov	s15, r4
 860:	vcvt.f64.s32	d7, s15
 864:	vneg.f64	d0, d0
 868:	vmul.f64	d7, d7, d0
 86c:	vstr	d0, [r5, #32]
 870:	vcvt.s32.f64	s15, d7
 874:	vmov	r3, s15
 878:	vstr	s15, [r5, #16]
 87c:	tst	r3, #7
 880:	add	r2, r3, #7
 884:	beq	8d8 <bloom_init@@Base+0xd0>
 888:	cmp	r3, #0
 88c:	movlt	r3, r2
 890:	asr	r3, r3, #3
 894:	add	r3, r3, #1
 898:	vldr	d7, [pc, #80]	; 8f0 <bloom_init@@Base+0xe8>
 89c:	str	r3, [r5, #20]
 8a0:	vmul.f64	d0, d0, d7
 8a4:	bl	59c <ceil@plt>
 8a8:	mov	r1, #1
 8ac:	ldr	r0, [r5, #20]
 8b0:	vcvt.s32.f64	s0, d0
 8b4:	vstr	s0, [r5, #24]
 8b8:	bl	530 <calloc@plt>
 8bc:	cmp	r0, #0
 8c0:	str	r0, [r5, #40]	; 0x28
 8c4:	beq	834 <bloom_init@@Base+0x2c>
 8c8:	mov	r3, #1
 8cc:	str	r3, [r5, #44]	; 0x2c
 8d0:	mov	r0, #0
 8d4:	pop	{r4, r5, r6, pc}
 8d8:	cmp	r3, #0
 8dc:	movlt	r3, r2
 8e0:	asr	r3, r3, #3
 8e4:	b	898 <bloom_init@@Base+0x90>
 8e8:			; <UNDEFINED> instruction: 0xff82c587
 8ec:	svccc	0x00debfbd
 8f0:			; <UNDEFINED> instruction: 0xfefa39ec
 8f4:	svccc	0x00e62e42

000008f8 <bloom_init_size@@Base>:
 8f8:	b	5a8 <bloom_init@plt>

000008fc <bloom_check@@Base>:
 8fc:	mov	r3, #0
 900:	b	730 <bloom_init@plt+0x188>

00000904 <bloom_add@@Base>:
 904:	mov	r3, #1
 908:	b	730 <bloom_init@plt+0x188>

0000090c <bloom_print@@Base>:
 90c:	push	{r4, lr}
 910:	mov	r1, r0
 914:	mov	r4, r0
 918:	ldr	r0, [pc, #104]	; 988 <bloom_print@@Base+0x7c>
 91c:	add	r0, pc, r0
 920:	bl	560 <printf@plt>
 924:	ldr	r0, [pc, #96]	; 98c <bloom_print@@Base+0x80>
 928:	ldr	r1, [r4]
 92c:	add	r0, pc, r0
 930:	bl	560 <printf@plt>
 934:	ldr	r0, [pc, #84]	; 990 <bloom_print@@Base+0x84>
 938:	ldrd	r2, [r4, #8]
 93c:	add	r0, pc, r0
 940:	bl	560 <printf@plt>
 944:	ldr	r0, [pc, #72]	; 994 <bloom_print@@Base+0x88>
 948:	ldr	r1, [r4, #16]
 94c:	add	r0, pc, r0
 950:	bl	560 <printf@plt>
 954:	ldr	r0, [pc, #60]	; 998 <bloom_print@@Base+0x8c>
 958:	ldrd	r2, [r4, #32]
 95c:	add	r0, pc, r0
 960:	bl	560 <printf@plt>
 964:	ldr	r0, [pc, #48]	; 99c <bloom_print@@Base+0x90>
 968:	ldr	r1, [r4, #20]
 96c:	add	r0, pc, r0
 970:	bl	560 <printf@plt>
 974:	ldr	r0, [pc, #36]	; 9a0 <bloom_print@@Base+0x94>
 978:	ldr	r1, [r4, #24]
 97c:	add	r0, pc, r0
 980:	pop	{r4, lr}
 984:	b	560 <printf@plt>
 988:	andeq	r0, r0, r6, lsr #7
 98c:	andeq	r0, r0, r3, lsr #7
 990:	andeq	r0, r0, r4, lsr #7
 994:	andeq	r0, r0, r3, lsr #7
 998:	andeq	r0, r0, r1, lsr #7
 99c:	andeq	r0, r0, r8, lsr #7
 9a0:	andeq	r0, r0, r7, lsr #7

000009a4 <bloom_free@@Base>:
 9a4:	ldr	r3, [r0, #44]	; 0x2c
 9a8:	push	{r4, lr}
 9ac:	cmp	r3, #0
 9b0:	mov	r4, r0
 9b4:	beq	9c0 <bloom_free@@Base+0x1c>
 9b8:	ldr	r0, [r0, #40]	; 0x28
 9bc:	bl	578 <free@plt>
 9c0:	mov	r3, #0
 9c4:	str	r3, [r4, #44]	; 0x2c
 9c8:	pop	{r4, pc}

000009cc <bloom_reset@@Base>:
 9cc:	ldr	r3, [r0, #44]	; 0x2c
 9d0:	cmp	r3, #0
 9d4:	beq	9f4 <bloom_reset@@Base+0x28>
 9d8:	ldr	r2, [r0, #20]
 9dc:	push	{r4, lr}
 9e0:	mov	r1, #0
 9e4:	ldr	r0, [r0, #40]	; 0x28
 9e8:	bl	590 <memset@plt>
 9ec:	mov	r0, #0
 9f0:	pop	{r4, pc}
 9f4:	mov	r0, #1
 9f8:	bx	lr

000009fc <bloom_version@@Base>:
 9fc:	ldr	r0, [pc, #4]	; a08 <bloom_version@@Base+0xc>
 a00:	add	r0, pc, r0
 a04:	bx	lr
 a08:	andeq	r0, r0, fp, lsr r3

00000a0c <murmurhash2@@Base>:
 a0c:	ldr	r3, [pc, #112]	; a84 <murmurhash2@@Base+0x78>
 a10:	eor	r2, r2, r1
 a14:	cmp	r1, #3
 a18:	bgt	a50 <murmurhash2@@Base+0x44>
 a1c:	cmp	r1, #2
 a20:	beq	a78 <murmurhash2@@Base+0x6c>
 a24:	cmp	r1, #3
 a28:	beq	a70 <murmurhash2@@Base+0x64>
 a2c:	cmp	r1, #1
 a30:	bne	a40 <murmurhash2@@Base+0x34>
 a34:	ldrb	r0, [r0]
 a38:	eor	r2, r2, r0
 a3c:	mul	r2, r3, r2
 a40:	eor	r2, r2, r2, lsr #13
 a44:	mul	r0, r3, r2
 a48:	eor	r0, r0, r0, lsr #15
 a4c:	bx	lr
 a50:	ldr	ip, [r0], #4
 a54:	mul	r2, r3, r2
 a58:	mul	ip, r3, ip
 a5c:	sub	r1, r1, #4
 a60:	eor	ip, ip, ip, lsr #24
 a64:	mul	ip, r3, ip
 a68:	eor	r2, r2, ip
 a6c:	b	a14 <murmurhash2@@Base+0x8>
 a70:	ldrb	r1, [r0, #2]
 a74:	eor	r2, r2, r1, lsl #16
 a78:	ldrb	r1, [r0, #1]
 a7c:	eor	r2, r2, r1, lsl #8
 a80:	b	a34 <murmurhash2@@Base+0x28>
 a84:	blpl	ff47b0e0 <murmurhash2@@Base+0xff47a6d4>
 a88:	subs	r2, r1, #1
 a8c:	bxeq	lr
 a90:	bcc	c68 <murmurhash2@@Base+0x25c>
 a94:	cmp	r0, r1
 a98:	bls	c4c <murmurhash2@@Base+0x240>
 a9c:	tst	r1, r2
 aa0:	beq	c58 <murmurhash2@@Base+0x24c>
 aa4:	clz	r3, r0
 aa8:	clz	r2, r1
 aac:	sub	r3, r2, r3
 ab0:	rsbs	r3, r3, #31
 ab4:	addne	r3, r3, r3, lsl #1
 ab8:	mov	r2, #0
 abc:	addne	pc, pc, r3, lsl #2
 ac0:	nop			; (mov r0, r0)
 ac4:	cmp	r0, r1, lsl #31
 ac8:	adc	r2, r2, r2
 acc:	subcs	r0, r0, r1, lsl #31
 ad0:	cmp	r0, r1, lsl #30
 ad4:	adc	r2, r2, r2
 ad8:	subcs	r0, r0, r1, lsl #30
 adc:	cmp	r0, r1, lsl #29
 ae0:	adc	r2, r2, r2
 ae4:	subcs	r0, r0, r1, lsl #29
 ae8:	cmp	r0, r1, lsl #28
 aec:	adc	r2, r2, r2
 af0:	subcs	r0, r0, r1, lsl #28
 af4:	cmp	r0, r1, lsl #27
 af8:	adc	r2, r2, r2
 afc:	subcs	r0, r0, r1, lsl #27
 b00:	cmp	r0, r1, lsl #26
 b04:	adc	r2, r2, r2
 b08:	subcs	r0, r0, r1, lsl #26
 b0c:	cmp	r0, r1, lsl #25
 b10:	adc	r2, r2, r2
 b14:	subcs	r0, r0, r1, lsl #25
 b18:	cmp	r0, r1, lsl #24
 b1c:	adc	r2, r2, r2
 b20:	subcs	r0, r0, r1, lsl #24
 b24:	cmp	r0, r1, lsl #23
 b28:	adc	r2, r2, r2
 b2c:	subcs	r0, r0, r1, lsl #23
 b30:	cmp	r0, r1, lsl #22
 b34:	adc	r2, r2, r2
 b38:	subcs	r0, r0, r1, lsl #22
 b3c:	cmp	r0, r1, lsl #21
 b40:	adc	r2, r2, r2
 b44:	subcs	r0, r0, r1, lsl #21
 b48:	cmp	r0, r1, lsl #20
 b4c:	adc	r2, r2, r2
 b50:	subcs	r0, r0, r1, lsl #20
 b54:	cmp	r0, r1, lsl #19
 b58:	adc	r2, r2, r2
 b5c:	subcs	r0, r0, r1, lsl #19
 b60:	cmp	r0, r1, lsl #18
 b64:	adc	r2, r2, r2
 b68:	subcs	r0, r0, r1, lsl #18
 b6c:	cmp	r0, r1, lsl #17
 b70:	adc	r2, r2, r2
 b74:	subcs	r0, r0, r1, lsl #17
 b78:	cmp	r0, r1, lsl #16
 b7c:	adc	r2, r2, r2
 b80:	subcs	r0, r0, r1, lsl #16
 b84:	cmp	r0, r1, lsl #15
 b88:	adc	r2, r2, r2
 b8c:	subcs	r0, r0, r1, lsl #15
 b90:	cmp	r0, r1, lsl #14
 b94:	adc	r2, r2, r2
 b98:	subcs	r0, r0, r1, lsl #14
 b9c:	cmp	r0, r1, lsl #13
 ba0:	adc	r2, r2, r2
 ba4:	subcs	r0, r0, r1, lsl #13
 ba8:	cmp	r0, r1, lsl #12
 bac:	adc	r2, r2, r2
 bb0:	subcs	r0, r0, r1, lsl #12
 bb4:	cmp	r0, r1, lsl #11
 bb8:	adc	r2, r2, r2
 bbc:	subcs	r0, r0, r1, lsl #11
 bc0:	cmp	r0, r1, lsl #10
 bc4:	adc	r2, r2, r2
 bc8:	subcs	r0, r0, r1, lsl #10
 bcc:	cmp	r0, r1, lsl #9
 bd0:	adc	r2, r2, r2
 bd4:	subcs	r0, r0, r1, lsl #9
 bd8:	cmp	r0, r1, lsl #8
 bdc:	adc	r2, r2, r2
 be0:	subcs	r0, r0, r1, lsl #8
 be4:	cmp	r0, r1, lsl #7
 be8:	adc	r2, r2, r2
 bec:	subcs	r0, r0, r1, lsl #7
 bf0:	cmp	r0, r1, lsl #6
 bf4:	adc	r2, r2, r2
 bf8:	subcs	r0, r0, r1, lsl #6
 bfc:	cmp	r0, r1, lsl #5
 c00:	adc	r2, r2, r2
 c04:	subcs	r0, r0, r1, lsl #5
 c08:	cmp	r0, r1, lsl #4
 c0c:	adc	r2, r2, r2
 c10:	subcs	r0, r0, r1, lsl #4
 c14:	cmp	r0, r1, lsl #3
 c18:	adc	r2, r2, r2
 c1c:	subcs	r0, r0, r1, lsl #3
 c20:	cmp	r0, r1, lsl #2
 c24:	adc	r2, r2, r2
 c28:	subcs	r0, r0, r1, lsl #2
 c2c:	cmp	r0, r1, lsl #1
 c30:	adc	r2, r2, r2
 c34:	subcs	r0, r0, r1, lsl #1
 c38:	cmp	r0, r1
 c3c:	adc	r2, r2, r2
 c40:	subcs	r0, r0, r1
 c44:	mov	r0, r2
 c48:	bx	lr
 c4c:	moveq	r0, #1
 c50:	movne	r0, #0
 c54:	bx	lr
 c58:	clz	r2, r1
 c5c:	rsb	r2, r2, #31
 c60:	lsr	r0, r0, r2
 c64:	bx	lr
 c68:	cmp	r0, #0
 c6c:	mvnne	r0, #0
 c70:	b	c94 <murmurhash2@@Base+0x288>
 c74:	cmp	r1, #0
 c78:	beq	c68 <murmurhash2@@Base+0x25c>
 c7c:	push	{r0, r1, lr}
 c80:	bl	a88 <murmurhash2@@Base+0x7c>
 c84:	pop	{r1, r2, lr}
 c88:	mul	r3, r2, r0
 c8c:	sub	r1, r1, r3
 c90:	bx	lr
 c94:	push	{r1, lr}
 c98:	mov	r0, #8
 c9c:	bl	53c <raise@plt>
 ca0:	pop	{r1, pc}

Disassembly of section .fini:

00000ca4 <.fini>:
 ca4:	push	{r3, lr}
 ca8:	pop	{r3, pc}
