
../repos/charybdis/authd/.libs/authd:     file format elf32-littlearm


Disassembly of section .init:

00011208 <.init>:
   11208:	push	{r3, lr}
   1120c:	bl	11800 <sprintf@plt+0x200>
   11210:	pop	{r3, pc}

Disassembly of section .plt:

00011214 <sigemptyset@plt-0x14>:
   11214:	push	{lr}		; (str lr, [sp, #-4]!)
   11218:	ldr	lr, [pc, #4]	; 11224 <sigemptyset@plt-0x4>
   1121c:	add	lr, pc, lr
   11220:	ldr	pc, [lr, #8]!
   11224:	ldrdeq	r9, [r1], -ip

00011228 <sigemptyset@plt>:
   11228:	add	ip, pc, #0, 12
   1122c:	add	ip, ip, #102400	; 0x19000
   11230:	ldr	pc, [ip, #3548]!	; 0xddc

00011234 <strerror@plt>:
   11234:	add	ip, pc, #0, 12
   11238:	add	ip, ip, #102400	; 0x19000
   1123c:	ldr	pc, [ip, #3540]!	; 0xdd4

00011240 <rb_helper_loop@plt>:
   11240:	add	ip, pc, #0, 12
   11244:	add	ip, ip, #102400	; 0x19000
   11248:	ldr	pc, [ip, #3532]!	; 0xdcc

0001124c <abort@plt>:
   1124c:	add	ip, pc, #0, 12
   11250:	add	ip, ip, #102400	; 0x19000
   11254:	ldr	pc, [ip, #3524]!	; 0xdc4

00011258 <rb_event_addish@plt>:
   11258:	add	ip, pc, #0, 12
   1125c:	add	ip, ip, #102400	; 0x19000
   11260:	ldr	pc, [ip, #3516]!	; 0xdbc

00011264 <getsockname@plt>:
   11264:	add	ip, pc, #0, 12
   11268:	add	ip, ip, #102400	; 0x19000
   1126c:	ldr	pc, [ip, #3508]!	; 0xdb4

00011270 <rb_ignore_errno@plt>:
   11270:	add	ip, pc, #0, 12
   11274:	add	ip, ip, #102400	; 0x19000
   11278:	ldr	pc, [ip, #3500]!	; 0xdac

0001127c <rb_connect_tcp_ssl@plt>:
   1127c:	add	ip, pc, #0, 12
   11280:	add	ip, ip, #102400	; 0x19000
   11284:	ldr	pc, [ip, #3492]!	; 0xda4

00011288 <rb_connect_tcp@plt>:
   11288:	add	ip, pc, #0, 12
   1128c:	add	ip, ip, #102400	; 0x19000
   11290:	ldr	pc, [ip, #3484]!	; 0xd9c

00011294 <memcmp@plt>:
   11294:	add	ip, pc, #0, 12
   11298:	add	ip, ip, #102400	; 0x19000
   1129c:	ldr	pc, [ip, #3476]!	; 0xd94

000112a0 <__libc_start_main@plt>:
   112a0:	add	ip, pc, #0, 12
   112a4:	add	ip, ip, #102400	; 0x19000
   112a8:	ldr	pc, [ip, #3468]!	; 0xd8c

000112ac <rb_event_delete@plt>:
   112ac:	add	ip, pc, #0, 12
   112b0:	add	ip, ip, #102400	; 0x19000
   112b4:	ldr	pc, [ip, #3460]!	; 0xd84

000112b8 <rb_setselect@plt>:
   112b8:	add	ip, pc, #0, 12
   112bc:	add	ip, ip, #102400	; 0x19000
   112c0:	ldr	pc, [ip, #3452]!	; 0xd7c

000112c4 <rb_get_fd@plt>:
   112c4:	add	ip, pc, #0, 12
   112c8:	add	ip, ip, #102400	; 0x19000
   112cc:	ldr	pc, [ip, #3444]!	; 0xd74

000112d0 <__gmon_start__@plt>:
   112d0:	add	ip, pc, #0, 12
   112d4:	add	ip, ip, #102400	; 0x19000
   112d8:	ldr	pc, [ip, #3436]!	; 0xd6c

000112dc <vsnprintf@plt>:
   112dc:	add	ip, pc, #0, 12
   112e0:	add	ip, ip, #102400	; 0x19000
   112e4:	ldr	pc, [ip, #3428]!	; 0xd64

000112e8 <rb_socket@plt>:
   112e8:	add	ip, pc, #0, 12
   112ec:	add	ip, ip, #102400	; 0x19000
   112f0:	ldr	pc, [ip, #3420]!	; 0xd5c

000112f4 <fclose@plt>:
   112f4:	add	ip, pc, #0, 12
   112f8:	add	ip, ip, #102400	; 0x19000
   112fc:	ldr	pc, [ip, #3412]!	; 0xd54

00011300 <fgets@plt>:
   11300:	add	ip, pc, #0, 12
   11304:	add	ip, ip, #102400	; 0x19000
   11308:	ldr	pc, [ip, #3404]!	; 0xd4c

0001130c <rb_strtok_r@plt>:
   1130c:	add	ip, pc, #0, 12
   11310:	add	ip, ip, #102400	; 0x19000
   11314:	ldr	pc, [ip, #3396]!	; 0xd44

00011318 <strchr@plt>:
   11318:	add	ip, pc, #0, 12
   1131c:	add	ip, ip, #102400	; 0x19000
   11320:	ldr	pc, [ip, #3388]!	; 0xd3c

00011324 <rb_dictionary_foreach_cur@plt>:
   11324:	add	ip, pc, #0, 12
   11328:	add	ip, ip, #102400	; 0x19000
   1132c:	ldr	pc, [ip, #3380]!	; 0xd34

00011330 <strcasecmp@plt>:
   11330:	add	ip, pc, #0, 12
   11334:	add	ip, ip, #102400	; 0x19000
   11338:	ldr	pc, [ip, #3372]!	; 0xd2c

0001133c <calloc@plt>:
   1133c:	add	ip, pc, #0, 12
   11340:	add	ip, ip, #102400	; 0x19000
   11344:	ldr	pc, [ip, #3364]!	; 0xd24

00011348 <rb_helper_child@plt>:
   11348:	add	ip, pc, #0, 12
   1134c:	add	ip, ip, #102400	; 0x19000
   11350:	ldr	pc, [ip, #3356]!	; 0xd1c

00011354 <sendto@plt>:
   11354:	add	ip, pc, #0, 12
   11358:	add	ip, ip, #102400	; 0x19000
   1135c:	ldr	pc, [ip, #3348]!	; 0xd14

00011360 <fopen@plt>:
   11360:	add	ip, pc, #0, 12
   11364:	add	ip, ip, #102400	; 0x19000
   11368:	ldr	pc, [ip, #3340]!	; 0xd0c

0001136c <memset@plt>:
   1136c:	add	ip, pc, #0, 12
   11370:	add	ip, ip, #102400	; 0x19000
   11374:	ldr	pc, [ip, #3332]!	; 0xd04

00011378 <freeaddrinfo@plt>:
   11378:	add	ip, pc, #0, 12
   1137c:	add	ip, ip, #102400	; 0x19000
   11380:	ldr	pc, [ip, #3324]!	; 0xcfc

00011384 <strrchr@plt>:
   11384:	add	ip, pc, #0, 12
   11388:	add	ip, ip, #102400	; 0x19000
   1138c:	ldr	pc, [ip, #3316]!	; 0xcf4

00011390 <rb_write@plt>:
   11390:	add	ip, pc, #0, 12
   11394:	add	ip, ip, #102400	; 0x19000
   11398:	ldr	pc, [ip, #3308]!	; 0xcec

0001139c <__assert_fail@plt>:
   1139c:	add	ip, pc, #0, 12
   113a0:	add	ip, ip, #102400	; 0x19000
   113a4:	ldr	pc, [ip, #3300]!	; 0xce4

000113a8 <rb_strlcpy@plt>:
   113a8:	add	ip, pc, #0, 12
   113ac:	add	ip, ip, #102400	; 0x19000
   113b0:	ldr	pc, [ip, #3292]!	; 0xcdc

000113b4 <strtoull@plt>:
   113b4:	add	ip, pc, #0, 12
   113b8:	add	ip, ip, #102400	; 0x19000
   113bc:	ldr	pc, [ip, #3284]!	; 0xcd4

000113c0 <rb_dictionary_foreach_next@plt>:
   113c0:	add	ip, pc, #0, 12
   113c4:	add	ip, ip, #102400	; 0x19000
   113c8:	ldr	pc, [ip, #3276]!	; 0xccc

000113cc <free@plt>:
   113cc:	add	ip, pc, #0, 12
   113d0:	add	ip, ip, #102400	; 0x19000
   113d4:	ldr	pc, [ip, #3268]!	; 0xcc4

000113d8 <rb_string_to_array@plt>:
   113d8:	add	ip, pc, #0, 12
   113dc:	add	ip, ip, #102400	; 0x19000
   113e0:	ldr	pc, [ip, #3260]!	; 0xcbc

000113e4 <rb_read@plt>:
   113e4:	add	ip, pc, #0, 12
   113e8:	add	ip, ip, #102400	; 0x19000
   113ec:	ldr	pc, [ip, #3252]!	; 0xcb4

000113f0 <rb_strcasecmp@plt>:
   113f0:	add	ip, pc, #0, 12
   113f4:	add	ip, ip, #102400	; 0x19000
   113f8:	ldr	pc, [ip, #3244]!	; 0xcac

000113fc <getaddrinfo@plt>:
   113fc:	add	ip, pc, #0, 12
   11400:	add	ip, ip, #102400	; 0x19000
   11404:	ldr	pc, [ip, #3236]!	; 0xca4

00011408 <rb_dictionary_foreach_start@plt>:
   11408:	add	ip, pc, #0, 12
   1140c:	add	ip, ip, #102400	; 0x19000
   11410:	ldr	pc, [ip, #3228]!	; 0xc9c

00011414 <rb_inet_pton_sock@plt>:
   11414:	add	ip, pc, #0, 12
   11418:	add	ip, ip, #102400	; 0x19000
   1141c:	ldr	pc, [ip, #3220]!	; 0xc94

00011420 <strlen@plt>:
   11420:	add	ip, pc, #0, 12
   11424:	add	ip, ip, #102400	; 0x19000
   11428:	ldr	pc, [ip, #3212]!	; 0xc8c

0001142c <rb_current_time@plt>:
   1142c:	add	ip, pc, #0, 12
   11430:	add	ip, ip, #102400	; 0x19000
   11434:	ldr	pc, [ip, #3204]!	; 0xc84

00011438 <rb_dictionary_delete@plt>:
   11438:	add	ip, pc, #0, 12
   1143c:	add	ip, ip, #102400	; 0x19000
   11440:	ldr	pc, [ip, #3196]!	; 0xc7c

00011444 <memcpy@plt>:
   11444:	add	ip, pc, #0, 12
   11448:	add	ip, ip, #102400	; 0x19000
   1144c:	ldr	pc, [ip, #3188]!	; 0xc74

00011450 <rb_free_rb_dlink_node@plt>:
   11450:	add	ip, pc, #0, 12
   11454:	add	ip, ip, #102400	; 0x19000
   11458:	ldr	pc, [ip, #3180]!	; 0xc6c

0001145c <rb_close@plt>:
   1145c:	add	ip, pc, #0, 12
   11460:	add	ip, ip, #102400	; 0x19000
   11464:	ldr	pc, [ip, #3172]!	; 0xc64

00011468 <strtol@plt>:
   11468:	add	ip, pc, #0, 12
   1146c:	add	ip, ip, #102400	; 0x19000
   11470:	ldr	pc, [ip, #3164]!	; 0xc5c

00011474 <sigaddset@plt>:
   11474:	add	ip, pc, #0, 12
   11478:	add	ip, ip, #102400	; 0x19000
   1147c:	ldr	pc, [ip, #3156]!	; 0xc54

00011480 <raise@plt>:
   11480:	add	ip, pc, #0, 12
   11484:	add	ip, ip, #102400	; 0x19000
   11488:	ldr	pc, [ip, #3148]!	; 0xc4c

0001148c <rb_dictionary_destroy@plt>:
   1148c:	add	ip, pc, #0, 12
   11490:	add	ip, ip, #102400	; 0x19000
   11494:	ldr	pc, [ip, #3140]!	; 0xc44

00011498 <bind@plt>:
   11498:	add	ip, pc, #0, 12
   1149c:	add	ip, ip, #102400	; 0x19000
   114a0:	ldr	pc, [ip, #3132]!	; 0xc3c

000114a4 <strstr@plt>:
   114a4:	add	ip, pc, #0, 12
   114a8:	add	ip, ip, #102400	; 0x19000
   114ac:	ldr	pc, [ip, #3124]!	; 0xc34

000114b0 <fwrite@plt>:
   114b0:	add	ip, pc, #0, 12
   114b4:	add	ip, ip, #102400	; 0x19000
   114b8:	ldr	pc, [ip, #3116]!	; 0xc2c

000114bc <rb_init_prng@plt>:
   114bc:	add	ip, pc, #0, 12
   114c0:	add	ip, ip, #102400	; 0x19000
   114c4:	ldr	pc, [ip, #3108]!	; 0xc24

000114c8 <rb_dictionary_retrieve@plt>:
   114c8:	add	ip, pc, #0, 12
   114cc:	add	ip, ip, #102400	; 0x19000
   114d0:	ldr	pc, [ip, #3100]!	; 0xc1c

000114d4 <rb_outofmemory@plt>:
   114d4:	add	ip, pc, #0, 12
   114d8:	add	ip, ip, #102400	; 0x19000
   114dc:	ldr	pc, [ip, #3092]!	; 0xc14

000114e0 <__ctype_b_loc@plt>:
   114e0:	add	ip, pc, #0, 12
   114e4:	add	ip, ip, #102400	; 0x19000
   114e8:	ldr	pc, [ip, #3084]!	; 0xc0c

000114ec <rb_dictionary_add@plt>:
   114ec:	add	ip, pc, #0, 12
   114f0:	add	ip, ip, #102400	; 0x19000
   114f4:	ldr	pc, [ip, #3076]!	; 0xc04

000114f8 <rb_set_time@plt>:
   114f8:	add	ip, pc, #0, 12
   114fc:	add	ip, ip, #102400	; 0x19000
   11500:	ldr	pc, [ip, #3068]!	; 0xbfc

00011504 <malloc@plt>:
   11504:	add	ip, pc, #0, 12
   11508:	add	ip, ip, #102400	; 0x19000
   1150c:	ldr	pc, [ip, #3060]!	; 0xbf4

00011510 <sigaction@plt>:
   11510:	add	ip, pc, #0, 12
   11514:	add	ip, ip, #102400	; 0x19000
   11518:	ldr	pc, [ip, #3052]!	; 0xbec

0001151c <rb_helper_read@plt>:
   1151c:	add	ip, pc, #0, 12
   11520:	add	ip, ip, #102400	; 0x19000
   11524:	ldr	pc, [ip, #3044]!	; 0xbe4

00011528 <rb_inet_ntop_sock@plt>:
   11528:	add	ip, pc, #0, 12
   1152c:	add	ip, ip, #102400	; 0x19000
   11530:	ldr	pc, [ip, #3036]!	; 0xbdc

00011534 <rb_dictionary_find@plt>:
   11534:	add	ip, pc, #0, 12
   11538:	add	ip, ip, #102400	; 0x19000
   1153c:	ldr	pc, [ip, #3028]!	; 0xbd4

00011540 <rb_dictionary_create@plt>:
   11540:	add	ip, pc, #0, 12
   11544:	add	ip, ip, #102400	; 0x19000
   11548:	ldr	pc, [ip, #3020]!	; 0xbcc

0001154c <memmove@plt>:
   1154c:	add	ip, pc, #0, 12
   11550:	add	ip, ip, #102400	; 0x19000
   11554:	ldr	pc, [ip, #3012]!	; 0xbc4

00011558 <rb_accept_tcp@plt>:
   11558:	add	ip, pc, #0, 12
   1155c:	add	ip, ip, #102400	; 0x19000
   11560:	ldr	pc, [ip, #3004]!	; 0xbbc

00011564 <rb_helper_write@plt>:
   11564:	add	ip, pc, #0, 12
   11568:	add	ip, ip, #102400	; 0x19000
   1156c:	ldr	pc, [ip, #2996]!	; 0xbb4

00011570 <rb_event_add@plt>:
   11570:	add	ip, pc, #0, 12
   11574:	add	ip, ip, #102400	; 0x19000
   11578:	ldr	pc, [ip, #2988]!	; 0xbac

0001157c <rb_get_random@plt>:
   1157c:	add	ip, pc, #0, 12
   11580:	add	ip, ip, #102400	; 0x19000
   11584:	ldr	pc, [ip, #2980]!	; 0xba4

00011588 <rb_make_rb_dlink_node@plt>:
   11588:	add	ip, pc, #0, 12
   1158c:	add	ip, ip, #102400	; 0x19000
   11590:	ldr	pc, [ip, #2972]!	; 0xb9c

00011594 <snprintf@plt>:
   11594:	add	ip, pc, #0, 12
   11598:	add	ip, ip, #102400	; 0x19000
   1159c:	ldr	pc, [ip, #2964]!	; 0xb94

000115a0 <rb_listen@plt>:
   115a0:	add	ip, pc, #0, 12
   115a4:	add	ip, ip, #102400	; 0x19000
   115a8:	ldr	pc, [ip, #2956]!	; 0xb8c

000115ac <strncmp@plt>:
   115ac:	add	ip, pc, #0, 12
   115b0:	add	ip, ip, #102400	; 0x19000
   115b4:	ldr	pc, [ip, #2948]!	; 0xb84

000115b8 <recvfrom@plt>:
   115b8:	add	ip, pc, #0, 12
   115bc:	add	ip, ip, #102400	; 0x19000
   115c0:	ldr	pc, [ip, #2940]!	; 0xb7c

000115c4 <setsockopt@plt>:
   115c4:	add	ip, pc, #0, 12
   115c8:	add	ip, ip, #102400	; 0x19000
   115cc:	ldr	pc, [ip, #2932]!	; 0xb74

000115d0 <strpbrk@plt>:
   115d0:	add	ip, pc, #0, 12
   115d4:	add	ip, ip, #102400	; 0x19000
   115d8:	ldr	pc, [ip, #2924]!	; 0xb6c

000115dc <strcmp@plt>:
   115dc:	add	ip, pc, #0, 12
   115e0:	add	ip, ip, #102400	; 0x19000
   115e4:	ldr	pc, [ip, #2916]!	; 0xb64

000115e8 <exit@plt>:
   115e8:	add	ip, pc, #0, 12
   115ec:	add	ip, ip, #102400	; 0x19000
   115f0:	ldr	pc, [ip, #2908]!	; 0xb5c

000115f4 <__errno_location@plt>:
   115f4:	add	ip, pc, #0, 12
   115f8:	add	ip, ip, #102400	; 0x19000
   115fc:	ldr	pc, [ip, #2900]!	; 0xb54

00011600 <sprintf@plt>:
   11600:	add	ip, pc, #0, 12
   11604:	add	ip, ip, #102400	; 0x19000
   11608:	ldr	pc, [ip, #2892]!	; 0xb4c

Disassembly of section .text:

0001160c <.text>:
   1160c:	ldr	r3, [pc, #28]	; 11630 <sprintf@plt+0x30>
   11610:	ldr	r1, [pc, #28]	; 11634 <sprintf@plt+0x34>
   11614:	ldr	r0, [pc, #28]	; 11638 <sprintf@plt+0x38>
   11618:	push	{r4, lr}
   1161c:	add	r3, pc, r3
   11620:	mov	r2, #145	; 0x91
   11624:	add	r1, pc, r1
   11628:	add	r0, pc, r0
   1162c:	bl	1139c <__assert_fail@plt>
   11630:	ldrdeq	r8, [r0], -r8	; <UNPREDICTABLE>
   11634:			; <UNDEFINED> instruction: 0x00007db0
   11638:	andeq	r8, r0, r4, lsr #4
   1163c:	ldr	r3, [pc, #32]	; 11664 <sprintf@plt+0x64>
   11640:	ldr	r1, [pc, #32]	; 11668 <sprintf@plt+0x68>
   11644:	ldr	r0, [pc, #32]	; 1166c <sprintf@plt+0x6c>
   11648:	add	r3, pc, r3
   1164c:	push	{r4, lr}
   11650:	mov	r2, #236	; 0xec
   11654:	add	r3, r3, #12
   11658:	add	r1, pc, r1
   1165c:	add	r0, pc, r0
   11660:	bl	1139c <__assert_fail@plt>
   11664:	andeq	r8, r0, ip, lsr #3
   11668:	andeq	r7, r0, ip, ror sp
   1166c:	strdeq	r8, [r0], -r0
   11670:	ldr	r3, [pc, #32]	; 11698 <sprintf@plt+0x98>
   11674:	ldr	r1, [pc, #32]	; 1169c <sprintf@plt+0x9c>
   11678:	ldr	r0, [pc, #32]	; 116a0 <sprintf@plt+0xa0>
   1167c:	add	r3, pc, r3
   11680:	push	{r4, lr}
   11684:	mov	r2, #288	; 0x120
   11688:	add	r3, r3, #28
   1168c:	add	r1, pc, r1
   11690:	add	r0, pc, r0
   11694:	bl	1139c <__assert_fail@plt>
   11698:	andeq	r8, r0, r8, ror r1
   1169c:	andeq	r7, r0, r8, asr #26
   116a0:	andeq	r7, r0, r0, ror #26
   116a4:	ldr	r3, [pc, #28]	; 116c8 <sprintf@plt+0xc8>
   116a8:	ldr	r1, [pc, #28]	; 116cc <sprintf@plt+0xcc>
   116ac:	ldr	r0, [pc, #28]	; 116d0 <sprintf@plt+0xd0>
   116b0:	push	{r4, lr}
   116b4:	add	r3, pc, r3
   116b8:	mov	r2, #236	; 0xec
   116bc:	add	r1, pc, r1
   116c0:	add	r0, pc, r0
   116c4:	bl	1139c <__assert_fail@plt>
   116c8:	andeq	r8, r0, r8, lsl #12
   116cc:	andeq	r7, r0, r8, lsl sp
   116d0:	andeq	r8, r0, ip, lsl #3
   116d4:	push	{r4, r5, r6, lr}
   116d8:	sub	sp, sp, #16
   116dc:	bl	11988 <sprintf@plt+0x388>
   116e0:	ldr	r1, [pc, #184]	; 117a0 <sprintf@plt+0x1a0>
   116e4:	ldr	r0, [pc, #184]	; 117a4 <sprintf@plt+0x1a4>
   116e8:	mov	r4, #0
   116ec:	mov	r3, #256	; 0x100
   116f0:	str	r3, [sp, #12]
   116f4:	str	r3, [sp, #8]
   116f8:	str	r3, [sp, #4]
   116fc:	str	r4, [sp]
   11700:	mov	r3, r4
   11704:	mov	r2, r4
   11708:	add	r1, pc, r1
   1170c:	add	r0, pc, r0
   11710:	bl	11348 <rb_helper_child@plt>
   11714:	ldr	r5, [pc, #140]	; 117a8 <sprintf@plt+0x1a8>
   11718:	ldr	r3, [pc, #140]	; 117ac <sprintf@plt+0x1ac>
   1171c:	add	r5, pc, r5
   11720:	ldr	r6, [r5, r3]
   11724:	cmp	r0, r4
   11728:	str	r0, [r6]
   1172c:	beq	11778 <sprintf@plt+0x178>
   11730:	bl	114f8 <rb_set_time@plt>
   11734:	bl	11988 <sprintf@plt+0x388>
   11738:	ldr	r3, [pc, #112]	; 117b0 <sprintf@plt+0x1b0>
   1173c:	ldr	r0, [pc, #112]	; 117b4 <sprintf@plt+0x1b4>
   11740:	ldr	r1, [r5, r3]
   11744:	add	r0, pc, r0
   11748:	bl	11540 <rb_dictionary_create@plt>
   1174c:	ldr	r3, [pc, #100]	; 117b8 <sprintf@plt+0x1b8>
   11750:	ldr	r3, [r5, r3]
   11754:	str	r0, [r3]
   11758:	bl	13768 <sprintf@plt+0x2168>
   1175c:	bl	126bc <sprintf@plt+0x10bc>
   11760:	mov	r1, #1
   11764:	mov	r0, r4
   11768:	bl	114bc <rb_init_prng@plt>
   1176c:	mov	r1, r4
   11770:	ldr	r0, [r6]
   11774:	bl	11240 <rb_helper_loop@plt>
   11778:	ldr	r3, [pc, #60]	; 117bc <sprintf@plt+0x1bc>
   1177c:	ldr	r0, [pc, #60]	; 117c0 <sprintf@plt+0x1c0>
   11780:	mov	r2, #46	; 0x2e
   11784:	ldr	r3, [r5, r3]
   11788:	mov	r1, #1
   1178c:	add	r0, pc, r0
   11790:	ldr	r3, [r3]
   11794:	bl	114b0 <fwrite@plt>
   11798:	mov	r0, #1
   1179c:	bl	115e8 <exit@plt>
   117a0:	andeq	r0, r0, r0, ror #3
   117a4:	andeq	r0, r0, r8, ror #3
   117a8:	ldrdeq	r9, [r1], -ip
   117ac:	muleq	r0, r4, r1
   117b0:	andeq	r0, r0, ip, ror r1
   117b4:	andeq	r7, r0, r0, lsr sl
   117b8:	andeq	r0, r0, r0, lsl #3
   117bc:	muleq	r0, r0, r1
   117c0:			; <UNDEFINED> instruction: 0x000079b8
   117c4:	mov	fp, #0
   117c8:	mov	lr, #0
   117cc:	pop	{r1}		; (ldr r1, [sp], #4)
   117d0:	mov	r2, sp
   117d4:	push	{r2}		; (str r2, [sp, #-4]!)
   117d8:	push	{r0}		; (str r0, [sp, #-4]!)
   117dc:	ldr	ip, [pc, #16]	; 117f4 <sprintf@plt+0x1f4>
   117e0:	push	{ip}		; (str ip, [sp, #-4]!)
   117e4:	ldr	r0, [pc, #12]	; 117f8 <sprintf@plt+0x1f8>
   117e8:	ldr	r3, [pc, #12]	; 117fc <sprintf@plt+0x1fc>
   117ec:	bl	112a0 <__libc_start_main@plt>
   117f0:	bl	1124c <abort@plt>
   117f4:	andeq	r8, r1, ip, ror #31
   117f8:	ldrdeq	r1, [r1], -r4
   117fc:	andeq	r8, r1, ip, lsl #31
   11800:	ldr	r3, [pc, #20]	; 1181c <sprintf@plt+0x21c>
   11804:	ldr	r2, [pc, #20]	; 11820 <sprintf@plt+0x220>
   11808:	add	r3, pc, r3
   1180c:	ldr	r2, [r3, r2]
   11810:	cmp	r2, #0
   11814:	bxeq	lr
   11818:	b	112d0 <__gmon_start__@plt>
   1181c:	strdeq	r9, [r1], -r0
   11820:	andeq	r0, r0, ip, asr r1
   11824:	ldr	r3, [pc, #28]	; 11848 <sprintf@plt+0x248>
   11828:	ldr	r0, [pc, #28]	; 1184c <sprintf@plt+0x24c>
   1182c:	sub	r3, r3, r0
   11830:	cmp	r3, #6
   11834:	bxls	lr
   11838:	ldr	r3, [pc, #16]	; 11850 <sprintf@plt+0x250>
   1183c:	cmp	r3, #0
   11840:	bxeq	lr
   11844:	bx	r3
   11848:	andeq	fp, r2, fp, lsl #31
   1184c:	andeq	fp, r2, r8, lsl #31
   11850:	andeq	r0, r0, r0
   11854:	ldr	r1, [pc, #36]	; 11880 <sprintf@plt+0x280>
   11858:	ldr	r0, [pc, #36]	; 11884 <sprintf@plt+0x284>
   1185c:	sub	r1, r1, r0
   11860:	asr	r1, r1, #2
   11864:	add	r1, r1, r1, lsr #31
   11868:	asrs	r1, r1, #1
   1186c:	bxeq	lr
   11870:	ldr	r3, [pc, #16]	; 11888 <sprintf@plt+0x288>
   11874:	cmp	r3, #0
   11878:	bxeq	lr
   1187c:	bx	r3
   11880:	andeq	fp, r2, r8, lsl #31
   11884:	andeq	fp, r2, r8, lsl #31
   11888:	andeq	r0, r0, r0
   1188c:	push	{r4, lr}
   11890:	ldr	r4, [pc, #24]	; 118b0 <sprintf@plt+0x2b0>
   11894:	ldrb	r3, [r4]
   11898:	cmp	r3, #0
   1189c:	popne	{r4, pc}
   118a0:	bl	11824 <sprintf@plt+0x224>
   118a4:	mov	r3, #1
   118a8:	strb	r3, [r4]
   118ac:	pop	{r4, pc}
   118b0:	andeq	fp, r2, r8, lsl #31
   118b4:	ldr	r0, [pc, #40]	; 118e4 <sprintf@plt+0x2e4>
   118b8:	ldr	r3, [r0]
   118bc:	cmp	r3, #0
   118c0:	bne	118c8 <sprintf@plt+0x2c8>
   118c4:	b	11854 <sprintf@plt+0x254>
   118c8:	ldr	r3, [pc, #24]	; 118e8 <sprintf@plt+0x2e8>
   118cc:	cmp	r3, #0
   118d0:	beq	118c4 <sprintf@plt+0x2c4>
   118d4:	push	{r4, lr}
   118d8:	blx	r3
   118dc:	pop	{r4, lr}
   118e0:	b	11854 <sprintf@plt+0x254>
   118e4:	ldrdeq	sl, [r2], -ip
   118e8:	andeq	r0, r0, r0
   118ec:	bx	lr
   118f0:	push	{r4, lr}
   118f4:	mov	r0, #1
   118f8:	bl	115e8 <exit@plt>
   118fc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11900:	mov	r8, r0
   11904:	ldr	r4, [pc, #112]	; 1197c <sprintf@plt+0x37c>
   11908:	ldr	r9, [pc, #112]	; 11980 <sprintf@plt+0x380>
   1190c:	add	r4, pc, r4
   11910:	add	r5, r4, #44	; 0x2c
   11914:	mov	r7, #16384	; 0x4000
   11918:	mov	r6, #10
   1191c:	add	r9, pc, r9
   11920:	mov	r2, r7
   11924:	mov	r1, r5
   11928:	mov	r0, r8
   1192c:	bl	1151c <rb_helper_read@plt>
   11930:	mov	r2, r6
   11934:	mov	r1, r4
   11938:	cmp	r0, #0
   1193c:	mov	r0, r5
   11940:	ble	11978 <sprintf@plt+0x378>
   11944:	bl	113d8 <rb_string_to_array@plt>
   11948:	mov	r1, r4
   1194c:	ldr	r3, [pc, #48]	; 11984 <sprintf@plt+0x384>
   11950:	cmp	r0, #0
   11954:	ble	11920 <sprintf@plt+0x320>
   11958:	ldr	r2, [r4]
   1195c:	ldr	r3, [r9, r3]
   11960:	ldrb	r2, [r2]
   11964:	ldr	r3, [r3, r2, lsl #2]
   11968:	cmp	r3, #0
   1196c:	beq	11920 <sprintf@plt+0x320>
   11970:	blx	r3
   11974:	b	11920 <sprintf@plt+0x320>
   11978:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1197c:	andeq	sl, r1, r8, ror r6
   11980:	ldrdeq	r9, [r1], -ip
   11984:	andeq	r0, r0, r0, ror #2
   11988:	push	{r4, r5, r6, lr}
   1198c:	sub	sp, sp, #144	; 0x90
   11990:	add	r5, sp, #144	; 0x90
   11994:	add	r4, sp, #8
   11998:	mov	r3, #1
   1199c:	mov	r6, #0
   119a0:	mov	r0, r4
   119a4:	str	r3, [r5, #-140]!	; 0xffffff74
   119a8:	str	r6, [sp, #136]	; 0x88
   119ac:	bl	11228 <sigemptyset@plt>
   119b0:	mov	r0, r4
   119b4:	mov	r1, #13
   119b8:	bl	11474 <sigaddset@plt>
   119bc:	mov	r0, r4
   119c0:	mov	r1, #14
   119c4:	bl	11474 <sigaddset@plt>
   119c8:	mov	r0, r4
   119cc:	mov	r1, #5
   119d0:	bl	11474 <sigaddset@plt>
   119d4:	mov	r0, r4
   119d8:	mov	r1, #28
   119dc:	bl	11474 <sigaddset@plt>
   119e0:	mov	r2, r6
   119e4:	mov	r1, r5
   119e8:	mov	r0, #28
   119ec:	bl	11510 <sigaction@plt>
   119f0:	mov	r2, r6
   119f4:	mov	r1, r5
   119f8:	mov	r0, #13
   119fc:	bl	11510 <sigaction@plt>
   11a00:	mov	r2, r6
   11a04:	mov	r1, r5
   11a08:	mov	r0, #5
   11a0c:	bl	11510 <sigaction@plt>
   11a10:	ldr	r3, [pc, #28]	; 11a34 <sprintf@plt+0x434>
   11a14:	mov	r1, r5
   11a18:	add	r3, pc, r3
   11a1c:	mov	r2, r6
   11a20:	mov	r0, #14
   11a24:	str	r3, [sp, #4]
   11a28:	bl	11510 <sigaction@plt>
   11a2c:	add	sp, sp, #144	; 0x90
   11a30:	pop	{r4, r5, r6, pc}
   11a34:			; <UNDEFINED> instruction: 0xfffffecc
   11a38:	ldr	r3, [pc, #96]	; 11aa0 <sprintf@plt+0x4a0>
   11a3c:	cmp	r0, #2
   11a40:	add	r3, pc, r3
   11a44:	bgt	11a80 <sprintf@plt+0x480>
   11a48:	ldr	r2, [pc, #84]	; 11aa4 <sprintf@plt+0x4a4>
   11a4c:	push	{r4, r5, r6, lr}
   11a50:	mov	r6, #0
   11a54:	ldr	r5, [r3, r2]
   11a58:	sub	r4, r5, #4
   11a5c:	add	r5, r5, #1020	; 0x3fc
   11a60:	ldr	r3, [r4, #4]!
   11a64:	mov	r0, r6
   11a68:	cmp	r3, #0
   11a6c:	beq	11a74 <sprintf@plt+0x474>
   11a70:	blx	r3
   11a74:	cmp	r4, r5
   11a78:	bne	11a60 <sprintf@plt+0x460>
   11a7c:	pop	{r4, r5, r6, pc}
   11a80:	ldr	r1, [r1, #4]
   11a84:	ldr	r2, [pc, #24]	; 11aa4 <sprintf@plt+0x4a4>
   11a88:	ldrb	r0, [r1]
   11a8c:	ldr	r3, [r3, r2]
   11a90:	ldr	r3, [r3, r0, lsl #2]
   11a94:	cmp	r3, #0
   11a98:	bxeq	lr
   11a9c:	bx	r3
   11aa0:			; <UNDEFINED> instruction: 0x000195b8
   11aa4:	andeq	r0, r0, ip, lsl #3
   11aa8:	push	{r4, r5, r6, lr}
   11aac:	cmp	r0, #2
   11ab0:	ldr	r5, [pc, #132]	; 11b3c <sprintf@plt+0x53c>
   11ab4:	add	r5, pc, r5
   11ab8:	ble	11b0c <sprintf@plt+0x50c>
   11abc:	mov	r4, r1
   11ac0:	mov	r2, #16
   11ac4:	mov	r1, #0
   11ac8:	ldr	r0, [r4, #4]
   11acc:	bl	113b4 <strtoull@plt>
   11ad0:	mov	r3, #0
   11ad4:	mvn	r2, #0
   11ad8:	cmp	r1, r3
   11adc:	cmpeq	r0, r2
   11ae0:	bhi	11b24 <sprintf@plt+0x524>
   11ae4:	ldr	r2, [r4, #8]
   11ae8:	ldr	r3, [pc, #80]	; 11b40 <sprintf@plt+0x540>
   11aec:	ldrb	r2, [r2]
   11af0:	ldr	r3, [r5, r3]
   11af4:	ldr	r3, [r3, r2, lsl #2]
   11af8:	cmp	r3, #0
   11afc:	popeq	{r4, r5, r6, pc}
   11b00:	mov	r1, r2
   11b04:	pop	{r4, r5, r6, lr}
   11b08:	bx	r3
   11b0c:	ldr	r1, [pc, #48]	; 11b44 <sprintf@plt+0x544>
   11b10:	mov	r2, r0
   11b14:	add	r1, pc, r1
   11b18:	mov	r0, #67	; 0x43
   11b1c:	pop	{r4, r5, r6, lr}
   11b20:	b	12370 <sprintf@plt+0xd70>
   11b24:	ldr	r1, [pc, #28]	; 11b48 <sprintf@plt+0x548>
   11b28:	ldr	r2, [r4, #4]
   11b2c:	add	r1, pc, r1
   11b30:	mov	r0, #67	; 0x43
   11b34:	pop	{r4, r5, r6, lr}
   11b38:	b	12370 <sprintf@plt+0xd70>
   11b3c:	andeq	r9, r1, r4, asr #10
   11b40:	muleq	r0, r8, r1
   11b44:	andeq	r7, r0, r0, ror #9
   11b48:	andeq	r7, r0, r4, lsl r5
   11b4c:	ldr	r2, [pc, #156]	; 11bf0 <sprintf@plt+0x5f0>
   11b50:	cmp	r0, #1
   11b54:	add	r2, pc, r2
   11b58:	ble	11bc4 <sprintf@plt+0x5c4>
   11b5c:	ldr	r3, [pc, #144]	; 11bf4 <sprintf@plt+0x5f4>
   11b60:	push	{r4, r5, r6, lr}
   11b64:	mov	r5, r1
   11b68:	ldr	r3, [r2, r3]
   11b6c:	mov	r4, r0
   11b70:	ldr	r1, [r1, #4]
   11b74:	ldr	r0, [r3]
   11b78:	bl	114c8 <rb_dictionary_retrieve@plt>
   11b7c:	cmp	r0, #0
   11b80:	beq	11bd8 <sprintf@plt+0x5d8>
   11b84:	ldr	r2, [r0, #4]
   11b88:	sub	r3, r4, #1
   11b8c:	cmp	r3, r2
   11b90:	ble	11bac <sprintf@plt+0x5ac>
   11b94:	ldr	r3, [r0, #8]
   11b98:	sub	r1, r4, #2
   11b9c:	add	r2, r5, #8
   11ba0:	ldr	r0, [r5, #4]
   11ba4:	pop	{r4, r5, r6, lr}
   11ba8:	bx	r3
   11bac:	ldr	r1, [pc, #68]	; 11bf8 <sprintf@plt+0x5f8>
   11bb0:	mov	r3, r4
   11bb4:	add	r1, pc, r1
   11bb8:	mov	r0, #67	; 0x43
   11bbc:	pop	{r4, r5, r6, lr}
   11bc0:	b	12370 <sprintf@plt+0xd70>
   11bc4:	ldr	r1, [pc, #48]	; 11bfc <sprintf@plt+0x5fc>
   11bc8:	mov	r2, r0
   11bcc:	add	r1, pc, r1
   11bd0:	mov	r0, #67	; 0x43
   11bd4:	b	12370 <sprintf@plt+0xd70>
   11bd8:	ldr	r1, [pc, #32]	; 11c00 <sprintf@plt+0x600>
   11bdc:	ldr	r2, [r5, #4]
   11be0:	add	r1, pc, r1
   11be4:	mov	r0, #67	; 0x43
   11be8:	pop	{r4, r5, r6, lr}
   11bec:	b	12370 <sprintf@plt+0xd70>
   11bf0:	andeq	r9, r1, r4, lsr #9
   11bf4:	andeq	r0, r0, r0, lsl #3
   11bf8:	andeq	r7, r0, r0, asr #10
   11bfc:	andeq	r7, r0, r8, lsr #9
   11c00:	andeq	r7, r0, r4, ror #9
   11c04:	push	{r4, r5, r6, lr}
   11c08:	sub	sp, sp, #56	; 0x38
   11c0c:	mov	r4, r0
   11c10:	mov	r3, #42	; 0x2a
   11c14:	mov	r5, r1
   11c18:	mov	r2, #49	; 0x31
   11c1c:	mov	r1, #0
   11c20:	add	r0, sp, #4
   11c24:	str	r3, [sp]
   11c28:	bl	1136c <memset@plt>
   11c2c:	cmp	r4, #0
   11c30:	beq	11d0c <sprintf@plt+0x70c>
   11c34:	cmp	r5, #0
   11c38:	beq	11c5c <sprintf@plt+0x65c>
   11c3c:	ldr	r2, [r4, #8]
   11c40:	cmp	r2, #52	; 0x34
   11c44:	beq	11cac <sprintf@plt+0x6ac>
   11c48:	cmp	r2, #54	; 0x36
   11c4c:	bne	11c94 <sprintf@plt+0x694>
   11c50:	ldrh	r3, [r5, #4]
   11c54:	cmp	r3, #10
   11c58:	beq	11ccc <sprintf@plt+0x6cc>
   11c5c:	ldr	r5, [r4, #152]	; 0x98
   11c60:	cmp	r5, #0
   11c64:	beq	11c84 <sprintf@plt+0x684>
   11c68:	add	r0, sp, #56	; 0x38
   11c6c:	ldr	r3, [r4, #156]	; 0x9c
   11c70:	ldrb	r1, [r0, #-56]!	; 0xffffffc8
   11c74:	ldr	r2, [r4, #8]
   11c78:	subs	r1, r1, #42	; 0x2a
   11c7c:	movne	r1, #1
   11c80:	blx	r5
   11c84:	mov	r0, r4
   11c88:	add	sp, sp, #56	; 0x38
   11c8c:	pop	{r4, r5, r6, lr}
   11c90:	b	113cc <free@plt>
   11c94:	ldr	r1, [pc, #136]	; 11d24 <sprintf@plt+0x724>
   11c98:	mov	r0, #67	; 0x43
   11c9c:	add	r1, pc, r1
   11ca0:	bl	12370 <sprintf@plt+0xd70>
   11ca4:	mov	r0, #2
   11ca8:	bl	115e8 <exit@plt>
   11cac:	ldrh	r3, [r5, #4]
   11cb0:	cmp	r3, #2
   11cb4:	bne	11c5c <sprintf@plt+0x65c>
   11cb8:	add	r0, r5, #4
   11cbc:	mov	r2, #53	; 0x35
   11cc0:	mov	r1, sp
   11cc4:	bl	11528 <rb_inet_ntop_sock@plt>
   11cc8:	b	11c5c <sprintf@plt+0x65c>
   11ccc:	add	r0, r5, #4
   11cd0:	mov	r1, sp
   11cd4:	mov	r2, #53	; 0x35
   11cd8:	bl	11528 <rb_inet_ntop_sock@plt>
   11cdc:	ldrb	r3, [sp]
   11ce0:	cmp	r3, #58	; 0x3a
   11ce4:	bne	11c5c <sprintf@plt+0x65c>
   11ce8:	mov	r0, sp
   11cec:	bl	11420 <strlen@plt>
   11cf0:	mov	r1, sp
   11cf4:	mov	r2, r0
   11cf8:	add	r0, sp, #1
   11cfc:	bl	1154c <memmove@plt>
   11d00:	mov	r3, #48	; 0x30
   11d04:	strb	r3, [sp]
   11d08:	b	11c5c <sprintf@plt+0x65c>
   11d0c:	ldr	r1, [pc, #20]	; 11d28 <sprintf@plt+0x728>
   11d10:	mov	r0, #67	; 0x43
   11d14:	add	r1, pc, r1
   11d18:	bl	12370 <sprintf@plt+0xd70>
   11d1c:	mov	r0, #2
   11d20:	bl	115e8 <exit@plt>
   11d24:	andeq	r7, r0, ip, lsl r5
   11d28:	andeq	r7, r0, r8, ror r4
   11d2c:	push	{r4, r5, r6, lr}
   11d30:	subs	r4, r0, #0
   11d34:	beq	11db8 <sprintf@plt+0x7b8>
   11d38:	cmp	r1, #0
   11d3c:	mov	r5, r1
   11d40:	beq	11d70 <sprintf@plt+0x770>
   11d44:	ldr	r2, [r4, #8]
   11d48:	cmp	r2, #82	; 0x52
   11d4c:	beq	11da0 <sprintf@plt+0x7a0>
   11d50:	cmp	r2, #83	; 0x53
   11d54:	bne	11dd0 <sprintf@plt+0x7d0>
   11d58:	mov	r2, #16
   11d5c:	add	r1, r1, #12
   11d60:	add	r0, r4, #20
   11d64:	bl	11294 <memcmp@plt>
   11d68:	cmp	r0, #0
   11d6c:	beq	11db0 <sprintf@plt+0x7b0>
   11d70:	mov	r0, #0
   11d74:	ldr	r5, [r4, #152]	; 0x98
   11d78:	cmp	r5, #0
   11d7c:	beq	11d94 <sprintf@plt+0x794>
   11d80:	adds	r1, r0, #0
   11d84:	ldr	r3, [r4, #156]	; 0x9c
   11d88:	ldr	r2, [r4, #8]
   11d8c:	movne	r1, #1
   11d90:	blx	r5
   11d94:	mov	r0, r4
   11d98:	pop	{r4, r5, r6, lr}
   11d9c:	b	113cc <free@plt>
   11da0:	ldr	r2, [r4, #16]
   11da4:	ldr	r3, [r1, #8]
   11da8:	cmp	r2, r3
   11dac:	bne	11d70 <sprintf@plt+0x770>
   11db0:	ldr	r0, [r5]
   11db4:	b	11d74 <sprintf@plt+0x774>
   11db8:	ldr	r1, [pc, #40]	; 11de8 <sprintf@plt+0x7e8>
   11dbc:	mov	r0, #67	; 0x43
   11dc0:	add	r1, pc, r1
   11dc4:	bl	12370 <sprintf@plt+0xd70>
   11dc8:	mov	r0, #2
   11dcc:	bl	115e8 <exit@plt>
   11dd0:	ldr	r1, [pc, #20]	; 11dec <sprintf@plt+0x7ec>
   11dd4:	mov	r0, #67	; 0x43
   11dd8:	add	r1, pc, r1
   11ddc:	bl	12370 <sprintf@plt+0xd70>
   11de0:	mov	r0, #2
   11de4:	bl	115e8 <exit@plt>
   11de8:	andeq	r7, r0, ip, lsr #8
   11dec:	andeq	r7, r0, r8, asr #8
   11df0:	ldr	ip, [pc, #156]	; 11e94 <sprintf@plt+0x894>
   11df4:	cmp	r2, #0
   11df8:	cmpne	r3, #0
   11dfc:	push	{r4, lr}
   11e00:	add	ip, pc, ip
   11e04:	sub	sp, sp, #8
   11e08:	beq	11e7c <sprintf@plt+0x87c>
   11e0c:	eor	r1, r1, #1
   11e10:	cmp	r0, #0
   11e14:	orreq	r1, r1, #1
   11e18:	mov	r4, r3
   11e1c:	cmp	r1, #0
   11e20:	mov	r3, r2
   11e24:	ldr	r1, [pc, #108]	; 11e98 <sprintf@plt+0x898>
   11e28:	mov	r2, r4
   11e2c:	bne	11e58 <sprintf@plt+0x858>
   11e30:	ldr	ip, [ip, r1]
   11e34:	ldr	r1, [pc, #96]	; 11e9c <sprintf@plt+0x89c>
   11e38:	str	r0, [sp]
   11e3c:	add	r1, pc, r1
   11e40:	ldr	r0, [ip]
   11e44:	bl	11564 <rb_helper_write@plt>
   11e48:	mov	r0, r4
   11e4c:	add	sp, sp, #8
   11e50:	pop	{r4, lr}
   11e54:	b	113cc <free@plt>
   11e58:	ldr	r0, [ip, r1]
   11e5c:	ldr	r1, [pc, #60]	; 11ea0 <sprintf@plt+0x8a0>
   11e60:	ldr	r0, [r0]
   11e64:	add	r1, pc, r1
   11e68:	bl	11564 <rb_helper_write@plt>
   11e6c:	mov	r0, r4
   11e70:	add	sp, sp, #8
   11e74:	pop	{r4, lr}
   11e78:	b	113cc <free@plt>
   11e7c:	ldr	r1, [pc, #32]	; 11ea4 <sprintf@plt+0x8a4>
   11e80:	mov	r0, #67	; 0x43
   11e84:	add	r1, pc, r1
   11e88:	bl	12370 <sprintf@plt+0xd70>
   11e8c:	mov	r0, #2
   11e90:	bl	115e8 <exit@plt>
   11e94:	strdeq	r9, [r1], -r8
   11e98:	muleq	r0, r4, r1
   11e9c:	andeq	r7, r0, r8, asr r4
   11ea0:	andeq	r7, r0, r4, lsr #8
   11ea4:	ldrdeq	r7, [r0], -r8
   11ea8:	push	{r4, r5, r6, r7, r8, lr}
   11eac:	mov	r7, r0
   11eb0:	mov	r5, r1
   11eb4:	mov	r0, #1
   11eb8:	mov	r1, #160	; 0xa0
   11ebc:	mov	r8, r3
   11ec0:	mov	r6, r2
   11ec4:	bl	1133c <calloc@plt>
   11ec8:	ldr	r3, [pc, #136]	; 11f58 <sprintf@plt+0x958>
   11ecc:	add	r3, pc, r3
   11ed0:	subs	r4, r0, #0
   11ed4:	beq	11f54 <sprintf@plt+0x954>
   11ed8:	cmp	r5, #2
   11edc:	moveq	r2, #52	; 0x34
   11ee0:	streq	r2, [r4, #8]
   11ee4:	moveq	r2, #1
   11ee8:	beq	11f0c <sprintf@plt+0x90c>
   11eec:	cmp	r5, #10
   11ef0:	moveq	r2, #54	; 0x36
   11ef4:	streq	r2, [r4, #8]
   11ef8:	moveq	r2, #28
   11efc:	beq	11f0c <sprintf@plt+0x90c>
   11f00:	bl	113cc <free@plt>
   11f04:	mov	r0, #0
   11f08:	pop	{r4, r5, r6, r7, r8, pc}
   11f0c:	ldr	r1, [pc, #72]	; 11f5c <sprintf@plt+0x95c>
   11f10:	mov	r0, r7
   11f14:	ldr	ip, [r3, r1]
   11f18:	str	r6, [r4, #152]	; 0x98
   11f1c:	ldr	r3, [pc, #60]	; 11f60 <sprintf@plt+0x960>
   11f20:	ldrd	r6, [ip]
   11f24:	add	r3, pc, r3
   11f28:	str	r8, [r4, #156]	; 0x9c
   11f2c:	strd	r6, [r4, #144]	; 0x90
   11f30:	adds	r6, r6, #1
   11f34:	adc	r7, r7, #0
   11f38:	str	r4, [r4]
   11f3c:	str	r3, [r4, #4]
   11f40:	mov	r1, r4
   11f44:	strd	r6, [ip]
   11f48:	bl	1379c <sprintf@plt+0x219c>
   11f4c:	mov	r0, r4
   11f50:	pop	{r4, r5, r6, r7, r8, pc}
   11f54:	bl	114d4 <rb_outofmemory@plt>
   11f58:	andeq	r9, r1, ip, lsr #2
   11f5c:	muleq	r0, ip, r1
   11f60:			; <UNDEFINED> instruction: 0xfffffcd8
   11f64:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11f68:	mov	r5, r0
   11f6c:	mov	r9, r1
   11f70:	mov	r0, #1
   11f74:	mov	r1, #160	; 0xa0
   11f78:	mov	r8, r2
   11f7c:	bl	1133c <calloc@plt>
   11f80:	ldr	r6, [pc, #160]	; 12028 <sprintf@plt+0xa28>
   11f84:	add	r6, pc, r6
   11f88:	subs	r4, r0, #0
   11f8c:	beq	12024 <sprintf@plt+0xa24>
   11f90:	add	r7, r4, #12
   11f94:	mov	r0, r5
   11f98:	mov	r1, r7
   11f9c:	bl	11414 <rb_inet_pton_sock@plt>
   11fa0:	subs	r5, r0, #0
   11fa4:	beq	11fcc <sprintf@plt+0x9cc>
   11fa8:	ldrh	r3, [r4, #12]
   11fac:	cmp	r3, #2
   11fb0:	moveq	r3, #82	; 0x52
   11fb4:	streq	r3, [r4, #8]
   11fb8:	beq	11fdc <sprintf@plt+0x9dc>
   11fbc:	cmp	r3, #10
   11fc0:	moveq	r3, #83	; 0x53
   11fc4:	streq	r3, [r4, #8]
   11fc8:	beq	11fdc <sprintf@plt+0x9dc>
   11fcc:	mov	r0, r4
   11fd0:	bl	113cc <free@plt>
   11fd4:	mov	r0, #0
   11fd8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11fdc:	ldr	r3, [pc, #72]	; 1202c <sprintf@plt+0xa2c>
   11fe0:	ldr	ip, [pc, #72]	; 12030 <sprintf@plt+0xa30>
   11fe4:	mov	r0, r7
   11fe8:	ldr	lr, [r6, r3]
   11fec:	add	ip, pc, ip
   11ff0:	mov	r1, r4
   11ff4:	ldrd	r2, [lr]
   11ff8:	str	r9, [r4, #152]	; 0x98
   11ffc:	str	r8, [r4, #156]	; 0x9c
   12000:	strd	r2, [r4, #144]	; 0x90
   12004:	adds	r2, r2, #1
   12008:	adc	r3, r3, #0
   1200c:	str	r4, [r4]
   12010:	str	ip, [r4, #4]
   12014:	strd	r2, [lr]
   12018:	bl	142c8 <sprintf@plt+0x2cc8>
   1201c:	mov	r0, r4
   12020:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12024:	bl	114d4 <rb_outofmemory@plt>
   12028:	andeq	r9, r1, r4, ror r0
   1202c:	muleq	r0, ip, r1
   12030:			; <UNDEFINED> instruction: 0xfffffd38
   12034:	mov	r3, #0
   12038:	str	r3, [r0, #156]	; 0x9c
   1203c:	str	r3, [r0, #152]	; 0x98
   12040:	bx	lr
   12044:	push	{r4, r5, r6, r7, r8, lr}
   12048:	mov	r4, r1
   1204c:	ldr	r5, [r1, #4]
   12050:	mov	r0, r5
   12054:	bl	11420 <strlen@plt>
   12058:	add	r6, r0, #1
   1205c:	mov	r0, r6
   12060:	bl	11504 <malloc@plt>
   12064:	subs	r7, r0, #0
   12068:	beq	12180 <sprintf@plt+0xb80>
   1206c:	mov	r2, r6
   12070:	mov	r1, r5
   12074:	bl	11444 <memcpy@plt>
   12078:	ldr	r2, [r4, #8]
   1207c:	ldr	r0, [r4, #12]
   12080:	ldrb	r4, [r2]
   12084:	sub	r2, r4, #52	; 0x34
   12088:	cmp	r2, #31
   1208c:	addls	pc, pc, r2, lsl #2
   12090:	b	12164 <sprintf@plt+0xb64>
   12094:	b	12114 <sprintf@plt+0xb14>
   12098:	b	12164 <sprintf@plt+0xb64>
   1209c:	b	1215c <sprintf@plt+0xb5c>
   120a0:	b	12164 <sprintf@plt+0xb64>
   120a4:	b	12164 <sprintf@plt+0xb64>
   120a8:	b	12164 <sprintf@plt+0xb64>
   120ac:	b	12164 <sprintf@plt+0xb64>
   120b0:	b	12164 <sprintf@plt+0xb64>
   120b4:	b	12164 <sprintf@plt+0xb64>
   120b8:	b	12164 <sprintf@plt+0xb64>
   120bc:	b	12164 <sprintf@plt+0xb64>
   120c0:	b	12164 <sprintf@plt+0xb64>
   120c4:	b	12164 <sprintf@plt+0xb64>
   120c8:	b	12164 <sprintf@plt+0xb64>
   120cc:	b	12164 <sprintf@plt+0xb64>
   120d0:	b	12164 <sprintf@plt+0xb64>
   120d4:	b	12164 <sprintf@plt+0xb64>
   120d8:	b	12164 <sprintf@plt+0xb64>
   120dc:	b	12164 <sprintf@plt+0xb64>
   120e0:	b	12164 <sprintf@plt+0xb64>
   120e4:	b	12164 <sprintf@plt+0xb64>
   120e8:	b	12164 <sprintf@plt+0xb64>
   120ec:	b	12164 <sprintf@plt+0xb64>
   120f0:	b	12164 <sprintf@plt+0xb64>
   120f4:	b	12164 <sprintf@plt+0xb64>
   120f8:	b	12164 <sprintf@plt+0xb64>
   120fc:	b	12164 <sprintf@plt+0xb64>
   12100:	b	12164 <sprintf@plt+0xb64>
   12104:	b	12164 <sprintf@plt+0xb64>
   12108:	b	12164 <sprintf@plt+0xb64>
   1210c:	b	12140 <sprintf@plt+0xb40>
   12110:	b	12140 <sprintf@plt+0xb40>
   12114:	mov	r1, #2
   12118:	ldr	r2, [pc, #100]	; 12184 <sprintf@plt+0xb84>
   1211c:	mov	r3, r7
   12120:	add	r2, pc, r2
   12124:	bl	11ea8 <sprintf@plt+0x8a8>
   12128:	subs	r3, r0, #0
   1212c:	popne	{r4, r5, r6, r7, r8, pc}
   12130:	mov	r2, r4
   12134:	mov	r1, r3
   12138:	pop	{r4, r5, r6, r7, r8, lr}
   1213c:	b	11df0 <sprintf@plt+0x7f0>
   12140:	ldr	r1, [pc, #64]	; 12188 <sprintf@plt+0xb88>
   12144:	mov	r2, r7
   12148:	add	r1, pc, r1
   1214c:	bl	11f64 <sprintf@plt+0x964>
   12150:	subs	r3, r0, #0
   12154:	popne	{r4, r5, r6, r7, r8, pc}
   12158:	b	12130 <sprintf@plt+0xb30>
   1215c:	mov	r1, #10
   12160:	b	12118 <sprintf@plt+0xb18>
   12164:	ldr	r1, [pc, #32]	; 1218c <sprintf@plt+0xb8c>
   12168:	mov	r0, #67	; 0x43
   1216c:	mov	r2, r4
   12170:	add	r1, pc, r1
   12174:	bl	12370 <sprintf@plt+0xd70>
   12178:	mov	r0, #2
   1217c:	bl	115e8 <exit@plt>
   12180:	bl	114d4 <rb_outofmemory@plt>
   12184:			; <UNDEFINED> instruction: 0xfffffcc8
   12188:			; <UNDEFINED> instruction: 0xfffffca0
   1218c:	andeq	r7, r0, r4, lsr r1
   12190:	ldr	r2, [pc, #312]	; 122d0 <sprintf@plt+0xcd0>
   12194:	ldr	r3, [pc, #312]	; 122d4 <sprintf@plt+0xcd4>
   12198:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1219c:	add	r2, pc, r2
   121a0:	sub	sp, sp, #620	; 0x26c
   121a4:	str	r0, [sp, #8]
   121a8:	str	r1, [sp, #12]
   121ac:	ldr	sl, [r2, r3]
   121b0:	ldr	r3, [sl]
   121b4:	cmp	r3, #0
   121b8:	beq	122a4 <sprintf@plt+0xca4>
   121bc:	addle	r9, sp, #76	; 0x4c
   121c0:	ble	12258 <sprintf@plt+0xc58>
   121c4:	ldr	r3, [pc, #268]	; 122d8 <sprintf@plt+0xcd8>
   121c8:	ldr	fp, [pc, #268]	; 122dc <sprintf@plt+0xcdc>
   121cc:	mov	r6, #0
   121d0:	add	fp, pc, fp
   121d4:	mov	r4, r6
   121d8:	add	r7, sp, #20
   121dc:	ldr	r8, [r2, r3]
   121e0:	add	r3, sp, #76	; 0x4c
   121e4:	str	r3, [sp, #4]
   121e8:	mov	r2, #53	; 0x35
   121ec:	mov	r1, r7
   121f0:	mov	r0, r8
   121f4:	bl	11528 <rb_inet_ntop_sock@plt>
   121f8:	ldrb	r3, [sp, #20]
   121fc:	cmp	r3, #0
   12200:	beq	12278 <sprintf@plt+0xc78>
   12204:	mov	r0, r7
   12208:	bl	11420 <strlen@plt>
   1220c:	ldr	r9, [sp, #4]
   12210:	mov	r3, r7
   12214:	rsb	r1, r4, #540	; 0x21c
   12218:	mov	r2, fp
   1221c:	add	r6, r6, #1
   12220:	add	r8, r8, #128	; 0x80
   12224:	mov	r5, r0
   12228:	add	r0, r9, r4
   1222c:	bl	11594 <snprintf@plt>
   12230:	ldr	r3, [sl]
   12234:	add	r5, r5, #1
   12238:	cmp	r3, r6
   1223c:	add	r4, r4, r5
   12240:	bgt	121e8 <sprintf@plt+0xbe8>
   12244:	cmp	r4, #0
   12248:	addne	r3, sp, #616	; 0x268
   1224c:	addne	r4, r3, r4
   12250:	movne	r3, #0
   12254:	strbne	r3, [r4, #-541]	; 0xfffffde3
   12258:	ldr	r2, [pc, #128]	; 122e0 <sprintf@plt+0xce0>
   1225c:	mov	r3, r9
   12260:	ldr	r1, [sp, #12]
   12264:	ldr	r0, [sp, #8]
   12268:	add	r2, pc, r2
   1226c:	bl	123e8 <sprintf@plt+0xde8>
   12270:	add	sp, sp, #620	; 0x26c
   12274:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12278:	ldr	r1, [pc, #100]	; 122e4 <sprintf@plt+0xce4>
   1227c:	mov	r0, #67	; 0x43
   12280:	add	r1, pc, r1
   12284:	bl	12370 <sprintf@plt+0xd70>
   12288:	ldr	r2, [pc, #88]	; 122e8 <sprintf@plt+0xce8>
   1228c:	ldr	r0, [sp, #8]
   12290:	ldr	r1, [sp, #12]
   12294:	add	r2, pc, r2
   12298:	bl	12464 <sprintf@plt+0xe64>
   1229c:	mov	r0, #2
   122a0:	bl	115e8 <exit@plt>
   122a4:	ldr	r1, [pc, #64]	; 122ec <sprintf@plt+0xcec>
   122a8:	mov	r0, #67	; 0x43
   122ac:	add	r1, pc, r1
   122b0:	bl	12370 <sprintf@plt+0xd70>
   122b4:	ldr	r2, [pc, #52]	; 122f0 <sprintf@plt+0xcf0>
   122b8:	ldr	r0, [sp, #8]
   122bc:	ldr	r1, [sp, #12]
   122c0:	add	r2, pc, r2
   122c4:	bl	12464 <sprintf@plt+0xe64>
   122c8:	mov	r0, #2
   122cc:	bl	115e8 <exit@plt>
   122d0:	andeq	r8, r1, ip, asr lr
   122d4:	andeq	r0, r0, ip, ror #2
   122d8:	andeq	r0, r0, r8, ror r1
   122dc:	andeq	r7, r0, ip, asr r1
   122e0:	muleq	r0, r8, fp
   122e4:	andeq	r7, r0, r0, lsl #1
   122e8:	andeq	r7, r0, r4, lsl #1
   122ec:	andeq	r7, r0, ip, lsr #32
   122f0:	andeq	r7, r0, r0, lsr r0
   122f4:	b	1376c <sprintf@plt+0x216c>
   122f8:	push	{r1, r2, r3}
   122fc:	mov	r1, #512	; 0x200
   12300:	push	{r4, r5, r6, lr}
   12304:	sub	sp, sp, #524	; 0x20c
   12308:	add	ip, sp, #544	; 0x220
   1230c:	add	r5, sp, #8
   12310:	mov	r6, r0
   12314:	mov	r3, ip
   12318:	ldr	r2, [sp, #540]	; 0x21c
   1231c:	mov	r0, r5
   12320:	ldr	r4, [pc, #60]	; 12364 <sprintf@plt+0xd64>
   12324:	str	ip, [sp, #4]
   12328:	bl	112dc <vsnprintf@plt>
   1232c:	ldr	r1, [pc, #52]	; 12368 <sprintf@plt+0xd68>
   12330:	add	r4, pc, r4
   12334:	mov	r0, r4
   12338:	ldr	ip, [r4, r1]
   1233c:	ldr	r1, [pc, #40]	; 1236c <sprintf@plt+0xd6c>
   12340:	mov	r3, r5
   12344:	mov	r2, r6
   12348:	add	r1, pc, r1
   1234c:	ldr	r0, [ip]
   12350:	bl	11564 <rb_helper_write@plt>
   12354:	add	sp, sp, #524	; 0x20c
   12358:	pop	{r4, r5, r6, lr}
   1235c:	add	sp, sp, #12
   12360:	bx	lr
   12364:	andeq	r8, r1, r8, asr #25
   12368:	muleq	r0, r4, r1
   1236c:	andeq	r6, r0, r8, ror #31
   12370:	push	{r1, r2, r3}
   12374:	mov	r1, #512	; 0x200
   12378:	push	{r4, r5, r6, lr}
   1237c:	sub	sp, sp, #524	; 0x20c
   12380:	add	ip, sp, #544	; 0x220
   12384:	add	r5, sp, #8
   12388:	mov	r6, r0
   1238c:	mov	r3, ip
   12390:	ldr	r2, [sp, #540]	; 0x21c
   12394:	mov	r0, r5
   12398:	ldr	r4, [pc, #60]	; 123dc <sprintf@plt+0xddc>
   1239c:	str	ip, [sp, #4]
   123a0:	bl	112dc <vsnprintf@plt>
   123a4:	ldr	r1, [pc, #52]	; 123e0 <sprintf@plt+0xde0>
   123a8:	add	r4, pc, r4
   123ac:	mov	r0, r4
   123b0:	ldr	ip, [r4, r1]
   123b4:	ldr	r1, [pc, #40]	; 123e4 <sprintf@plt+0xde4>
   123b8:	mov	r3, r5
   123bc:	mov	r2, r6
   123c0:	add	r1, pc, r1
   123c4:	ldr	r0, [ip]
   123c8:	bl	11564 <rb_helper_write@plt>
   123cc:	add	sp, sp, #524	; 0x20c
   123d0:	pop	{r4, r5, r6, lr}
   123d4:	add	sp, sp, #12
   123d8:	bx	lr
   123dc:	andeq	r8, r1, r0, asr ip
   123e0:	muleq	r0, r4, r1
   123e4:	andeq	r6, r0, ip, ror pc
   123e8:	push	{r2, r3}
   123ec:	push	{r4, r5, r6, lr}
   123f0:	sub	sp, sp, #528	; 0x210
   123f4:	add	ip, sp, #548	; 0x224
   123f8:	add	r4, sp, #16
   123fc:	mov	r5, r0
   12400:	mov	r6, r1
   12404:	mov	r3, ip
   12408:	ldr	r2, [sp, #544]	; 0x220
   1240c:	mov	r0, r4
   12410:	mov	r1, #512	; 0x200
   12414:	str	ip, [sp, #12]
   12418:	bl	112dc <vsnprintf@plt>
   1241c:	ldr	ip, [pc, #52]	; 12458 <sprintf@plt+0xe58>
   12420:	ldr	r1, [pc, #52]	; 1245c <sprintf@plt+0xe5c>
   12424:	add	ip, pc, ip
   12428:	mov	r3, r6
   1242c:	ldr	r0, [ip, r1]
   12430:	ldr	r1, [pc, #40]	; 12460 <sprintf@plt+0xe60>
   12434:	str	r4, [sp]
   12438:	mov	r2, r5
   1243c:	add	r1, pc, r1
   12440:	ldr	r0, [r0]
   12444:	bl	11564 <rb_helper_write@plt>
   12448:	add	sp, sp, #528	; 0x210
   1244c:	pop	{r4, r5, r6, lr}
   12450:	add	sp, sp, #8
   12454:	bx	lr
   12458:	ldrdeq	r8, [r1], -r4
   1245c:	muleq	r0, r4, r1
   12460:	andeq	r6, r0, ip, lsl #30
   12464:	push	{r2, r3}
   12468:	push	{r4, r5, r6, lr}
   1246c:	sub	sp, sp, #528	; 0x210
   12470:	add	ip, sp, #548	; 0x224
   12474:	add	r4, sp, #16
   12478:	mov	r5, r0
   1247c:	mov	r6, r1
   12480:	mov	r3, ip
   12484:	ldr	r2, [sp, #544]	; 0x220
   12488:	mov	r0, r4
   1248c:	mov	r1, #512	; 0x200
   12490:	str	ip, [sp, #12]
   12494:	bl	112dc <vsnprintf@plt>
   12498:	ldr	ip, [pc, #52]	; 124d4 <sprintf@plt+0xed4>
   1249c:	ldr	r1, [pc, #52]	; 124d8 <sprintf@plt+0xed8>
   124a0:	add	ip, pc, ip
   124a4:	mov	r3, r6
   124a8:	ldr	r0, [ip, r1]
   124ac:	ldr	r1, [pc, #40]	; 124dc <sprintf@plt+0xedc>
   124b0:	str	r4, [sp]
   124b4:	mov	r2, r5
   124b8:	add	r1, pc, r1
   124bc:	ldr	r0, [r0]
   124c0:	bl	11564 <rb_helper_write@plt>
   124c4:	add	sp, sp, #528	; 0x210
   124c8:	pop	{r4, r5, r6, lr}
   124cc:	add	sp, sp, #8
   124d0:	bx	lr
   124d4:	andeq	r8, r1, r8, asr fp
   124d8:	muleq	r0, r4, r1
   124dc:	muleq	r0, ip, lr
   124e0:	ldr	ip, [pc, #44]	; 12514 <sprintf@plt+0xf14>
   124e4:	push	{lr}		; (str lr, [sp, #-4]!)
   124e8:	add	ip, pc, ip
   124ec:	ldr	lr, [pc, #36]	; 12518 <sprintf@plt+0xf18>
   124f0:	mov	r2, r0
   124f4:	mov	r0, ip
   124f8:	ldr	ip, [ip, lr]
   124fc:	mov	r3, r1
   12500:	ldr	r1, [pc, #20]	; 1251c <sprintf@plt+0xf1c>
   12504:	pop	{lr}		; (ldr lr, [sp], #4)
   12508:	add	r1, pc, r1
   1250c:	ldr	r0, [ip]
   12510:	b	11564 <rb_helper_write@plt>
   12514:	andeq	r8, r1, r0, lsl fp
   12518:	muleq	r0, r4, r1
   1251c:	andeq	r6, r0, r8, asr lr
   12520:	sub	r0, r1, r0
   12524:	bx	lr
   12528:	ldr	r3, [pc, #364]	; 1269c <sprintf@plt+0x109c>
   1252c:	push	{r4, r5, r6, r7, r8, lr}
   12530:	add	r3, pc, r3
   12534:	ldr	r7, [pc, #356]	; 126a0 <sprintf@plt+0x10a0>
   12538:	ldr	r2, [r3, #8]
   1253c:	add	r7, pc, r7
   12540:	cmp	r2, #0
   12544:	mov	r5, r0
   12548:	bne	1260c <sprintf@plt+0x100c>
   1254c:	ldr	r2, [r3, #12]
   12550:	cmn	r2, #1
   12554:	cmpne	r2, #32
   12558:	addne	r1, r2, #1
   1255c:	strne	r2, [r0, #12]
   12560:	strne	r1, [r3, #12]
   12564:	beq	12678 <sprintf@plt+0x1078>
   12568:	ldr	r4, [r5, #56]	; 0x38
   1256c:	cmp	r4, #0
   12570:	beq	125a0 <sprintf@plt+0xfa0>
   12574:	ldr	r1, [r4]
   12578:	cmp	r1, #0
   1257c:	beq	125a0 <sprintf@plt+0xfa0>
   12580:	ldr	r3, [pc, #284]	; 126a4 <sprintf@plt+0x10a4>
   12584:	ldr	r6, [r7, r3]
   12588:	mov	r2, r4
   1258c:	ldr	r0, [r6]
   12590:	bl	114ec <rb_dictionary_add@plt>
   12594:	ldr	r1, [r4, #12]!
   12598:	cmp	r1, #0
   1259c:	bne	12588 <sprintf@plt+0xf88>
   125a0:	ldrb	r3, [r5, #48]	; 0x30
   125a4:	cmp	r3, #0
   125a8:	bne	125f8 <sprintf@plt+0xff8>
   125ac:	ldr	r3, [r5, #24]
   125b0:	cmp	r3, #0
   125b4:	beq	125bc <sprintf@plt+0xfbc>
   125b8:	blx	r3
   125bc:	ldr	r3, [pc, #228]	; 126a8 <sprintf@plt+0x10a8>
   125c0:	mov	r2, #0
   125c4:	str	r2, [r5, #4]
   125c8:	str	r5, [r5]
   125cc:	ldr	r3, [r7, r3]
   125d0:	ldr	r2, [r3]
   125d4:	cmp	r2, #0
   125d8:	str	r2, [r5, #8]
   125dc:	strne	r5, [r2, #4]
   125e0:	beq	12668 <sprintf@plt+0x1068>
   125e4:	ldr	r2, [r3, #8]
   125e8:	str	r5, [r3]
   125ec:	add	r2, r2, #1
   125f0:	str	r2, [r3, #8]
   125f4:	pop	{r4, r5, r6, r7, r8, pc}
   125f8:	ldr	r2, [pc, #172]	; 126ac <sprintf@plt+0x10ac>
   125fc:	ldr	r1, [r5, #52]	; 0x34
   12600:	ldr	r2, [r7, r2]
   12604:	str	r1, [r2, r3, lsl #2]
   12608:	b	125ac <sprintf@plt+0xfac>
   1260c:	ldr	r1, [r3]
   12610:	ldr	r0, [r1, #8]
   12614:	ldr	ip, [r1]
   12618:	cmp	r0, #0
   1261c:	str	ip, [r5, #12]
   12620:	ldrne	r3, [r1, #4]
   12624:	ldreq	ip, [r1, #4]
   12628:	strne	r3, [r0, #4]
   1262c:	ldrne	ip, [r1, #4]
   12630:	streq	ip, [r3, #4]
   12634:	cmp	ip, #0
   12638:	beq	1268c <sprintf@plt+0x108c>
   1263c:	str	r0, [ip, #8]
   12640:	mov	r0, r1
   12644:	ldr	r3, [pc, #100]	; 126b0 <sprintf@plt+0x10b0>
   12648:	mov	ip, #0
   1264c:	add	r3, pc, r3
   12650:	sub	r2, r2, #1
   12654:	str	ip, [r1, #4]
   12658:	str	ip, [r1, #8]
   1265c:	str	r2, [r3, #8]
   12660:	bl	11450 <rb_free_rb_dlink_node@plt>
   12664:	b	12568 <sprintf@plt+0xf68>
   12668:	ldr	r2, [r3, #4]
   1266c:	cmp	r2, #0
   12670:	streq	r5, [r3, #4]
   12674:	b	125e4 <sprintf@plt+0xfe4>
   12678:	ldr	r1, [pc, #52]	; 126b4 <sprintf@plt+0x10b4>
   1267c:	mov	r0, #87	; 0x57
   12680:	add	r1, pc, r1
   12684:	pop	{r4, r5, r6, r7, r8, lr}
   12688:	b	12370 <sprintf@plt+0xd70>
   1268c:	ldr	r3, [pc, #36]	; 126b8 <sprintf@plt+0x10b8>
   12690:	add	r3, pc, r3
   12694:	str	r0, [r3]
   12698:	b	12644 <sprintf@plt+0x1044>
   1269c:	muleq	r1, r0, sl
   126a0:			; <UNDEFINED> instruction: 0x00018abc
   126a4:	andeq	r0, r0, r0, lsl #3
   126a8:	andeq	r0, r0, r0, lsr #3
   126ac:	muleq	r0, r8, r1
   126b0:	andeq	sp, r1, r4, ror r9
   126b4:	strdeq	r6, [r0], -r4
   126b8:	andeq	sp, r1, r0, lsr r9
   126bc:	ldr	r1, [pc, #128]	; 12744 <sprintf@plt+0x1144>
   126c0:	ldr	r0, [pc, #128]	; 12748 <sprintf@plt+0x1148>
   126c4:	push	{r4, lr}
   126c8:	add	r1, pc, r1
   126cc:	add	r0, pc, r0
   126d0:	bl	11540 <rb_dictionary_create@plt>
   126d4:	ldr	r4, [pc, #112]	; 1274c <sprintf@plt+0x114c>
   126d8:	ldr	r1, [pc, #112]	; 12750 <sprintf@plt+0x1150>
   126dc:	add	r4, pc, r4
   126e0:	mov	r3, #1
   126e4:	ldr	ip, [r4, r1]
   126e8:	ldr	r1, [pc, #100]	; 12754 <sprintf@plt+0x1154>
   126ec:	mov	r2, #0
   126f0:	add	r1, pc, r1
   126f4:	str	r0, [ip]
   126f8:	ldr	r0, [pc, #88]	; 12758 <sprintf@plt+0x1158>
   126fc:	add	r0, pc, r0
   12700:	bl	11258 <rb_event_addish@plt>
   12704:	ldr	r2, [pc, #80]	; 1275c <sprintf@plt+0x115c>
   12708:	ldr	r3, [pc, #80]	; 12760 <sprintf@plt+0x1160>
   1270c:	add	r2, pc, r2
   12710:	str	r0, [r2, #16]
   12714:	ldr	r0, [r4, r3]
   12718:	bl	12528 <sprintf@plt+0xf28>
   1271c:	ldr	r3, [pc, #64]	; 12764 <sprintf@plt+0x1164>
   12720:	ldr	r0, [r4, r3]
   12724:	bl	12528 <sprintf@plt+0xf28>
   12728:	ldr	r3, [pc, #56]	; 12768 <sprintf@plt+0x1168>
   1272c:	ldr	r0, [r4, r3]
   12730:	bl	12528 <sprintf@plt+0xf28>
   12734:	ldr	r3, [pc, #48]	; 1276c <sprintf@plt+0x116c>
   12738:	ldr	r0, [r4, r3]
   1273c:	pop	{r4, lr}
   12740:	b	12528 <sprintf@plt+0xf28>
   12744:			; <UNDEFINED> instruction: 0xfffffe50
   12748:	ldrdeq	r6, [r0], -r8
   1274c:	andeq	r8, r1, ip, lsl r9
   12750:	andeq	r0, r0, r8, asr r1
   12754:	andeq	r0, r0, ip, asr #4
   12758:	andeq	r6, r0, r0, asr #25
   1275c:			; <UNDEFINED> instruction: 0x0001d8b4
   12760:	andeq	r0, r0, r8, lsl #3
   12764:	andeq	r0, r0, r4, lsl #3
   12768:	andeq	r0, r0, r8, ror #2
   1276c:	andeq	r0, r0, r4, ror #2
   12770:	push	{r4, r5, r6, r7, r8, lr}
   12774:	mov	r5, r0
   12778:	ldr	r4, [r0, #56]	; 0x38
   1277c:	ldr	r7, [pc, #328]	; 128cc <sprintf@plt+0x12cc>
   12780:	cmp	r4, #0
   12784:	add	r7, pc, r7
   12788:	beq	127b4 <sprintf@plt+0x11b4>
   1278c:	ldr	r1, [r4]
   12790:	cmp	r1, #0
   12794:	beq	127b4 <sprintf@plt+0x11b4>
   12798:	ldr	r3, [pc, #304]	; 128d0 <sprintf@plt+0x12d0>
   1279c:	ldr	r6, [r7, r3]
   127a0:	ldr	r0, [r6]
   127a4:	bl	11438 <rb_dictionary_delete@plt>
   127a8:	ldr	r1, [r4, #12]!
   127ac:	cmp	r1, #0
   127b0:	bne	127a0 <sprintf@plt+0x11a0>
   127b4:	ldrb	r3, [r5, #48]	; 0x30
   127b8:	cmp	r3, #0
   127bc:	ldrne	r2, [pc, #272]	; 128d4 <sprintf@plt+0x12d4>
   127c0:	movne	r1, #0
   127c4:	ldrne	r2, [r7, r2]
   127c8:	strne	r1, [r2, r3, lsl #2]
   127cc:	ldr	r3, [r5, #28]
   127d0:	cmp	r3, #0
   127d4:	beq	127dc <sprintf@plt+0x11dc>
   127d8:	blx	r3
   127dc:	ldr	r3, [r5, #8]
   127e0:	ldr	r2, [pc, #240]	; 128d8 <sprintf@plt+0x12d8>
   127e4:	cmp	r3, #0
   127e8:	ldr	r1, [r5, #4]
   127ec:	ldreq	r2, [r7, r2]
   127f0:	strne	r1, [r3, #4]
   127f4:	ldrne	r2, [r7, r2]
   127f8:	ldrne	r1, [r5, #4]
   127fc:	streq	r1, [r2, #4]
   12800:	cmp	r1, #0
   12804:	strne	r3, [r1, #8]
   12808:	streq	r3, [r2]
   1280c:	ldr	r3, [r2, #8]
   12810:	mov	r4, #0
   12814:	ldr	r6, [r5, #12]
   12818:	sub	r3, r3, #1
   1281c:	str	r4, [r5, #4]
   12820:	str	r4, [r5, #8]
   12824:	str	r3, [r2, #8]
   12828:	bl	11588 <rb_make_rb_dlink_node@plt>
   1282c:	cmp	r6, r4
   12830:	beq	128ac <sprintf@plt+0x12ac>
   12834:	cmp	r0, #0
   12838:	beq	1288c <sprintf@plt+0x128c>
   1283c:	ldr	r2, [pc, #152]	; 128dc <sprintf@plt+0x12dc>
   12840:	str	r6, [r0]
   12844:	add	r2, pc, r2
   12848:	str	r4, [r0, #4]
   1284c:	ldr	r3, [r2]
   12850:	cmp	r3, #0
   12854:	str	r3, [r0, #8]
   12858:	strne	r0, [r3, #4]
   1285c:	beq	1287c <sprintf@plt+0x127c>
   12860:	ldr	r3, [pc, #120]	; 128e0 <sprintf@plt+0x12e0>
   12864:	add	r3, pc, r3
   12868:	ldr	r2, [r3, #8]
   1286c:	str	r0, [r3]
   12870:	add	r2, r2, #1
   12874:	str	r2, [r3, #8]
   12878:	pop	{r4, r5, r6, r7, r8, pc}
   1287c:	ldr	r3, [r2, #4]
   12880:	cmp	r3, #0
   12884:	streq	r0, [r2, #4]
   12888:	b	12860 <sprintf@plt+0x1260>
   1288c:	ldr	r3, [pc, #80]	; 128e4 <sprintf@plt+0x12e4>
   12890:	ldr	r1, [pc, #80]	; 128e8 <sprintf@plt+0x12e8>
   12894:	ldr	r0, [pc, #80]	; 128ec <sprintf@plt+0x12ec>
   12898:	add	r3, pc, r3
   1289c:	mov	r2, #144	; 0x90
   128a0:	add	r1, pc, r1
   128a4:	add	r0, pc, r0
   128a8:	bl	1139c <__assert_fail@plt>
   128ac:	ldr	r3, [pc, #60]	; 128f0 <sprintf@plt+0x12f0>
   128b0:	ldr	r1, [pc, #60]	; 128f4 <sprintf@plt+0x12f4>
   128b4:	ldr	r0, [pc, #60]	; 128f8 <sprintf@plt+0x12f8>
   128b8:	add	r3, pc, r3
   128bc:	mov	r2, #143	; 0x8f
   128c0:	add	r1, pc, r1
   128c4:	add	r0, pc, r0
   128c8:	bl	1139c <__assert_fail@plt>
   128cc:	andeq	r8, r1, r4, ror r8
   128d0:	andeq	r0, r0, r0, lsl #3
   128d4:	muleq	r0, r8, r1
   128d8:	andeq	r0, r0, r0, lsr #3
   128dc:	andeq	sp, r1, ip, ror r7
   128e0:	andeq	sp, r1, ip, asr r7
   128e4:	ldrdeq	r6, [r0], -r0
   128e8:	andeq	r6, r0, r4, lsr fp
   128ec:	andeq	r6, r0, ip, asr fp
   128f0:			; <UNDEFINED> instruction: 0x00006ab0
   128f4:	andeq	r6, r0, r4, lsl fp
   128f8:	andeq	r6, r0, ip, lsr #22
   128fc:	ldr	r3, [pc, #56]	; 1293c <sprintf@plt+0x133c>
   12900:	ldr	r2, [pc, #56]	; 12940 <sprintf@plt+0x1340>
   12904:	add	r3, pc, r3
   12908:	push	{r4, lr}
   1290c:	mov	r4, r0
   12910:	ldr	r3, [r3, r2]
   12914:	ldr	r1, [r0]
   12918:	ldr	r0, [r3]
   1291c:	bl	11438 <rb_dictionary_delete@plt>
   12920:	ldr	r0, [r4, #464]	; 0x1d0
   12924:	cmp	r0, #0
   12928:	beq	12930 <sprintf@plt+0x1330>
   1292c:	bl	113cc <free@plt>
   12930:	mov	r0, r4
   12934:	pop	{r4, lr}
   12938:	b	113cc <free@plt>
   1293c:	strdeq	r8, [r1], -r4
   12940:	andeq	r0, r0, r8, asr r1
   12944:	push	{r4, r5, r6, r7, r8, r9, lr}
   12948:	sub	sp, sp, #12
   1294c:	bl	1142c <rb_current_time@plt>
   12950:	ldr	r8, [pc, #228]	; 12a3c <sprintf@plt+0x143c>
   12954:	ldr	r3, [pc, #228]	; 12a40 <sprintf@plt+0x1440>
   12958:	add	r8, pc, r8
   1295c:	mov	r1, sp
   12960:	ldr	r6, [r8, r3]
   12964:	mov	r7, sp
   12968:	mov	r5, r0
   1296c:	ldr	r0, [r6]
   12970:	bl	11408 <rb_dictionary_foreach_start@plt>
   12974:	mov	r1, r7
   12978:	ldr	r0, [r6]
   1297c:	bl	11324 <rb_dictionary_foreach_cur@plt>
   12980:	subs	r9, r0, #0
   12984:	beq	12a34 <sprintf@plt+0x1434>
   12988:	ldr	r3, [r9, #460]	; 0x1cc
   1298c:	ldr	r2, [pc, #176]	; 12a44 <sprintf@plt+0x1444>
   12990:	add	r3, r3, #1
   12994:	str	r3, [r9, #460]	; 0x1cc
   12998:	ldr	r2, [r8, r2]
   1299c:	ldr	r4, [r2]
   129a0:	cmp	r4, #0
   129a4:	bne	129b8 <sprintf@plt+0x13b8>
   129a8:	b	12a08 <sprintf@plt+0x1408>
   129ac:	ldr	r4, [r4, #8]
   129b0:	cmp	r4, #0
   129b4:	beq	12a04 <sprintf@plt+0x1404>
   129b8:	ldr	r2, [r4]
   129bc:	ldr	r3, [r9, #464]	; 0x1d0
   129c0:	ldr	r1, [r2, #12]
   129c4:	add	r3, r3, r1, lsl #4
   129c8:	ldr	r1, [r3, #12]
   129cc:	cmp	r1, #1
   129d0:	bne	129ac <sprintf@plt+0x13ac>
   129d4:	ldr	r2, [r2, #40]	; 0x28
   129d8:	cmp	r2, #0
   129dc:	beq	129ac <sprintf@plt+0x13ac>
   129e0:	ldr	r3, [r3, #4]
   129e4:	cmp	r3, #0
   129e8:	cmpgt	r5, r3
   129ec:	ble	129ac <sprintf@plt+0x13ac>
   129f0:	mov	r0, r9
   129f4:	blx	r2
   129f8:	ldr	r4, [r4, #8]
   129fc:	cmp	r4, #0
   12a00:	bne	129b8 <sprintf@plt+0x13b8>
   12a04:	ldr	r3, [r9, #460]	; 0x1cc
   12a08:	sub	r3, r3, #1
   12a0c:	cmp	r3, #0
   12a10:	str	r3, [r9, #460]	; 0x1cc
   12a14:	beq	12a28 <sprintf@plt+0x1428>
   12a18:	mov	r1, r7
   12a1c:	ldr	r0, [r6]
   12a20:	bl	113c0 <rb_dictionary_foreach_next@plt>
   12a24:	b	12974 <sprintf@plt+0x1374>
   12a28:	mov	r0, r9
   12a2c:	bl	128fc <sprintf@plt+0x12fc>
   12a30:	b	12a18 <sprintf@plt+0x1418>
   12a34:	add	sp, sp, #12
   12a38:	pop	{r4, r5, r6, r7, r8, r9, pc}
   12a3c:	andeq	r8, r1, r0, lsr #13
   12a40:	andeq	r0, r0, r8, asr r1
   12a44:	andeq	r0, r0, r0, lsr #3
   12a48:	ldrb	r2, [r0, #452]	; 0x1c4
   12a4c:	ldr	r3, [pc, #136]	; 12adc <sprintf@plt+0x14dc>
   12a50:	cmp	r2, #0
   12a54:	add	r3, pc, r3
   12a58:	bxne	lr
   12a5c:	ldr	r1, [r0, #456]	; 0x1c8
   12a60:	mov	r2, #1
   12a64:	cmp	r1, #0
   12a68:	strb	r2, [r0, #452]	; 0x1c4
   12a6c:	bxeq	lr
   12a70:	ldr	r2, [pc, #104]	; 12ae0 <sprintf@plt+0x14e0>
   12a74:	push	{r4, r5, r6, lr}
   12a78:	mov	r5, r0
   12a7c:	ldr	r3, [r3, r2]
   12a80:	ldr	r4, [r3]
   12a84:	cmp	r4, #0
   12a88:	bne	12a9c <sprintf@plt+0x149c>
   12a8c:	pop	{r4, r5, r6, pc}
   12a90:	ldr	r4, [r4, #8]
   12a94:	cmp	r4, #0
   12a98:	beq	12ad8 <sprintf@plt+0x14d8>
   12a9c:	ldr	r3, [r4]
   12aa0:	ldr	r2, [r3, #36]	; 0x24
   12aa4:	cmp	r2, #0
   12aa8:	beq	12a90 <sprintf@plt+0x1490>
   12aac:	ldr	r1, [r3, #12]
   12ab0:	ldr	r3, [r5, #464]	; 0x1d0
   12ab4:	add	r3, r3, r1, lsl #4
   12ab8:	ldr	r3, [r3, #12]
   12abc:	cmp	r3, #1
   12ac0:	bne	12a90 <sprintf@plt+0x1490>
   12ac4:	mov	r0, r5
   12ac8:	blx	r2
   12acc:	ldr	r4, [r4, #8]
   12ad0:	cmp	r4, #0
   12ad4:	bne	12a9c <sprintf@plt+0x149c>
   12ad8:	pop	{r4, r5, r6, pc}
   12adc:	andeq	r8, r1, r4, lsr #11
   12ae0:	andeq	r0, r0, r0, lsr #3
   12ae4:	push	{r3}		; (str r3, [sp, #-4]!)
   12ae8:	push	{r4, r5, r6, r7, r8, lr}
   12aec:	sub	sp, sp, #540	; 0x21c
   12af0:	add	ip, sp, #568	; 0x238
   12af4:	add	r6, sp, #24
   12af8:	mov	r4, r0
   12afc:	mov	r5, r1
   12b00:	mov	r3, ip
   12b04:	mov	r1, #512	; 0x200
   12b08:	mov	r7, r2
   12b0c:	mov	r0, r6
   12b10:	ldr	r2, [sp, #564]	; 0x234
   12b14:	str	ip, [sp, #20]
   12b18:	bl	112dc <vsnprintf@plt>
   12b1c:	ldr	r3, [pc, #256]	; 12c24 <sprintf@plt+0x1624>
   12b20:	ldr	r1, [pc, #256]	; 12c28 <sprintf@plt+0x1628>
   12b24:	add	r3, pc, r3
   12b28:	cmn	r5, #1
   12b2c:	ldr	r3, [r3, r1]
   12b30:	ldr	r2, [r4]
   12b34:	ldr	r0, [r3]
   12b38:	beq	12ba8 <sprintf@plt+0x15a8>
   12b3c:	ldr	r3, [r4, #464]	; 0x1d0
   12b40:	cmp	r7, #0
   12b44:	lsl	r8, r5, #4
   12b48:	ldr	r3, [r3, r5, lsl #4]
   12b4c:	add	r1, r4, #440	; 0x1b8
   12b50:	add	ip, r4, #376	; 0x178
   12b54:	ldrb	r3, [r3, #20]
   12b58:	beq	12c00 <sprintf@plt+0x1600>
   12b5c:	stm	sp, {r1, ip}
   12b60:	ldr	r1, [pc, #196]	; 12c2c <sprintf@plt+0x162c>
   12b64:	str	r6, [sp, #12]
   12b68:	str	r7, [sp, #8]
   12b6c:	add	r1, pc, r1
   12b70:	bl	11564 <rb_helper_write@plt>
   12b74:	ldr	r2, [r4, #464]	; 0x1d0
   12b78:	ldr	r3, [r4, #456]	; 0x1c8
   12b7c:	add	r2, r2, r8
   12b80:	mov	r1, #2
   12b84:	sub	r3, r3, #1
   12b88:	str	r1, [r2, #12]
   12b8c:	str	r3, [r4, #456]	; 0x1c8
   12b90:	mov	r0, r4
   12b94:	bl	12a48 <sprintf@plt+0x1448>
   12b98:	add	sp, sp, #540	; 0x21c
   12b9c:	pop	{r4, r5, r6, r7, r8, lr}
   12ba0:	add	sp, sp, #4
   12ba4:	bx	lr
   12ba8:	cmp	r7, #0
   12bac:	add	r1, r4, #440	; 0x1b8
   12bb0:	add	ip, r4, #376	; 0x178
   12bb4:	bne	12be0 <sprintf@plt+0x15e0>
   12bb8:	ldr	r3, [pc, #112]	; 12c30 <sprintf@plt+0x1630>
   12bbc:	stm	sp, {r1, ip}
   12bc0:	ldr	r1, [pc, #108]	; 12c34 <sprintf@plt+0x1634>
   12bc4:	add	r3, pc, r3
   12bc8:	str	r3, [sp, #8]
   12bcc:	str	r6, [sp, #12]
   12bd0:	mov	r3, #42	; 0x2a
   12bd4:	add	r1, pc, r1
   12bd8:	bl	11564 <rb_helper_write@plt>
   12bdc:	b	12b90 <sprintf@plt+0x1590>
   12be0:	stm	sp, {r1, ip}
   12be4:	ldr	r1, [pc, #76]	; 12c38 <sprintf@plt+0x1638>
   12be8:	str	r6, [sp, #12]
   12bec:	str	r7, [sp, #8]
   12bf0:	mov	r3, #42	; 0x2a
   12bf4:	add	r1, pc, r1
   12bf8:	bl	11564 <rb_helper_write@plt>
   12bfc:	b	12b90 <sprintf@plt+0x1590>
   12c00:	ldr	lr, [pc, #52]	; 12c3c <sprintf@plt+0x163c>
   12c04:	stm	sp, {r1, ip}
   12c08:	ldr	r1, [pc, #48]	; 12c40 <sprintf@plt+0x1640>
   12c0c:	add	lr, pc, lr
   12c10:	str	r6, [sp, #12]
   12c14:	str	lr, [sp, #8]
   12c18:	add	r1, pc, r1
   12c1c:	bl	11564 <rb_helper_write@plt>
   12c20:	b	12b74 <sprintf@plt+0x1574>
   12c24:	ldrdeq	r8, [r1], -r4
   12c28:	muleq	r0, r4, r1
   12c2c:	andeq	r6, r0, r0, lsr #17
   12c30:	andeq	r6, r0, r0, ror #16
   12c34:	andeq	r6, r0, r8, lsr r8
   12c38:	andeq	r6, r0, r8, lsl r8
   12c3c:	andeq	r6, r0, r8, lsl r8
   12c40:	strdeq	r6, [r0], -r4
   12c44:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12c48:	sub	sp, sp, #8
   12c4c:	ldr	sl, [pc, #296]	; 12d7c <sprintf@plt+0x177c>
   12c50:	ldr	r3, [pc, #296]	; 12d80 <sprintf@plt+0x1780>
   12c54:	add	sl, pc, sl
   12c58:	ldr	r9, [pc, #292]	; 12d84 <sprintf@plt+0x1784>
   12c5c:	ldr	r6, [sl, r3]
   12c60:	ldr	r8, [pc, #288]	; 12d88 <sprintf@plt+0x1788>
   12c64:	mov	r1, sp
   12c68:	ldr	r0, [r6]
   12c6c:	mov	r5, sp
   12c70:	add	r9, pc, r9
   12c74:	add	r8, pc, r8
   12c78:	bl	11408 <rb_dictionary_foreach_start@plt>
   12c7c:	mvn	r7, #0
   12c80:	b	12c90 <sprintf@plt+0x1690>
   12c84:	mov	r1, r5
   12c88:	ldr	r0, [r6]
   12c8c:	bl	113c0 <rb_dictionary_foreach_next@plt>
   12c90:	mov	r1, r5
   12c94:	ldr	r0, [r6]
   12c98:	bl	11324 <rb_dictionary_foreach_cur@plt>
   12c9c:	mov	r3, r9
   12ca0:	mov	r2, r8
   12ca4:	mov	r1, r7
   12ca8:	subs	r4, r0, #0
   12cac:	beq	12ce0 <sprintf@plt+0x16e0>
   12cb0:	ldr	ip, [r4, #460]	; 0x1cc
   12cb4:	add	ip, ip, #1
   12cb8:	str	ip, [r4, #460]	; 0x1cc
   12cbc:	bl	12ae4 <sprintf@plt+0x14e4>
   12cc0:	ldr	r3, [r4, #460]	; 0x1cc
   12cc4:	sub	r3, r3, #1
   12cc8:	cmp	r3, #0
   12ccc:	str	r3, [r4, #460]	; 0x1cc
   12cd0:	bne	12c84 <sprintf@plt+0x1684>
   12cd4:	mov	r0, r4
   12cd8:	bl	128fc <sprintf@plt+0x12fc>
   12cdc:	b	12c84 <sprintf@plt+0x1684>
   12ce0:	ldr	r3, [pc, #164]	; 12d8c <sprintf@plt+0x178c>
   12ce4:	ldr	r8, [sl, r3]
   12ce8:	ldr	r5, [r8]
   12cec:	cmp	r5, #0
   12cf0:	beq	12d54 <sprintf@plt+0x1754>
   12cf4:	ldr	r7, [r5, #8]
   12cf8:	b	12d04 <sprintf@plt+0x1704>
   12cfc:	mov	r5, r7
   12d00:	ldr	r7, [r7, #8]
   12d04:	ldr	r3, [r5]
   12d08:	ldr	r3, [r3, #28]
   12d0c:	cmp	r3, #0
   12d10:	beq	12d18 <sprintf@plt+0x1718>
   12d14:	blx	r3
   12d18:	ldmib	r5, {r2, r3}
   12d1c:	cmp	r3, #0
   12d20:	strne	r2, [r3, #4]
   12d24:	ldrne	r2, [r5, #4]
   12d28:	streq	r2, [r8, #4]
   12d2c:	cmp	r2, #0
   12d30:	strne	r3, [r2, #8]
   12d34:	streq	r3, [r8]
   12d38:	ldr	r3, [r8, #8]
   12d3c:	cmp	r7, #0
   12d40:	sub	r3, r3, #1
   12d44:	str	r4, [r5, #4]
   12d48:	str	r4, [r5, #8]
   12d4c:	str	r3, [r8, #8]
   12d50:	bne	12cfc <sprintf@plt+0x16fc>
   12d54:	mov	r2, #0
   12d58:	ldr	r0, [r6]
   12d5c:	mov	r1, r2
   12d60:	bl	1148c <rb_dictionary_destroy@plt>
   12d64:	ldr	r3, [pc, #36]	; 12d90 <sprintf@plt+0x1790>
   12d68:	add	r3, pc, r3
   12d6c:	ldr	r0, [r3, #16]
   12d70:	bl	112ac <rb_event_delete@plt>
   12d74:	add	sp, sp, #8
   12d78:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12d7c:	andeq	r8, r1, r4, lsr #7
   12d80:	andeq	r0, r0, r8, asr r1
   12d84:			; <UNDEFINED> instruction: 0x000067b8
   12d88:	strdeq	r6, [r0], -r8
   12d8c:	andeq	r0, r0, r0, lsr #3
   12d90:	andeq	sp, r1, r8, asr r2
   12d94:	ldr	ip, [pc, #68]	; 12de0 <sprintf@plt+0x17e0>
   12d98:	ldr	r3, [pc, #68]	; 12de4 <sprintf@plt+0x17e4>
   12d9c:	add	ip, pc, ip
   12da0:	mov	r1, r0
   12da4:	push	{r4, lr}
   12da8:	mov	r4, r0
   12dac:	ldr	r0, [ip, r3]
   12db0:	ldr	r2, [r1], #376	; 0x178
   12db4:	sub	sp, sp, #8
   12db8:	ldr	r0, [r0]
   12dbc:	str	r1, [sp]
   12dc0:	ldr	r1, [pc, #32]	; 12de8 <sprintf@plt+0x17e8>
   12dc4:	add	r3, r4, #440	; 0x1b8
   12dc8:	add	r1, pc, r1
   12dcc:	bl	11564 <rb_helper_write@plt>
   12dd0:	mov	r0, r4
   12dd4:	add	sp, sp, #8
   12dd8:	pop	{r4, lr}
   12ddc:	b	12a48 <sprintf@plt+0x1448>
   12de0:	andeq	r8, r1, ip, asr r2
   12de4:	muleq	r0, r4, r1
   12de8:	andeq	r6, r0, ip, lsr #13
   12dec:	ldr	r2, [r0, #464]	; 0x1d0
   12df0:	ldr	r3, [r0, #456]	; 0x1c8
   12df4:	add	r2, r2, r1, lsl #4
   12df8:	mov	ip, #2
   12dfc:	push	{r4, r5, r6, lr}
   12e00:	sub	r3, r3, #1
   12e04:	str	ip, [r2, #12]
   12e08:	ldr	r2, [pc, #144]	; 12ea0 <sprintf@plt+0x18a0>
   12e0c:	cmp	r3, #0
   12e10:	str	r3, [r0, #456]	; 0x1c8
   12e14:	mov	r6, r0
   12e18:	add	r2, pc, r2
   12e1c:	bne	12e2c <sprintf@plt+0x182c>
   12e20:	ldrb	r3, [r0, #451]	; 0x1c3
   12e24:	cmp	r3, #0
   12e28:	beq	12e98 <sprintf@plt+0x1898>
   12e2c:	ldr	r3, [pc, #112]	; 12ea4 <sprintf@plt+0x18a4>
   12e30:	mov	r5, r1
   12e34:	ldr	r3, [r2, r3]
   12e38:	ldr	r4, [r3]
   12e3c:	cmp	r4, #0
   12e40:	bne	12e54 <sprintf@plt+0x1854>
   12e44:	pop	{r4, r5, r6, pc}
   12e48:	ldr	r4, [r4, #8]
   12e4c:	cmp	r4, #0
   12e50:	beq	12e94 <sprintf@plt+0x1894>
   12e54:	ldr	r3, [r4]
   12e58:	ldr	r2, [r3, #44]	; 0x2c
   12e5c:	cmp	r2, #0
   12e60:	beq	12e48 <sprintf@plt+0x1848>
   12e64:	ldr	ip, [r3, #12]
   12e68:	ldr	r3, [r6, #464]	; 0x1d0
   12e6c:	add	r3, r3, ip, lsl #4
   12e70:	ldr	r3, [r3, #12]
   12e74:	cmp	r3, #1
   12e78:	bne	12e48 <sprintf@plt+0x1848>
   12e7c:	mov	r1, r5
   12e80:	mov	r0, r6
   12e84:	blx	r2
   12e88:	ldr	r4, [r4, #8]
   12e8c:	cmp	r4, #0
   12e90:	bne	12e54 <sprintf@plt+0x1854>
   12e94:	pop	{r4, r5, r6, pc}
   12e98:	pop	{r4, r5, r6, lr}
   12e9c:	b	12d94 <sprintf@plt+0x1794>
   12ea0:	andeq	r8, r1, r0, ror #3
   12ea4:	andeq	r0, r0, r0, lsr #3
   12ea8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12eac:	cmp	r0, #5
   12eb0:	ldr	r6, [pc, #652]	; 13144 <sprintf@plt+0x1b44>
   12eb4:	sub	sp, sp, #12
   12eb8:	add	r6, pc, r6
   12ebc:	ble	1310c <sprintf@plt+0x1b0c>
   12ec0:	ldr	r3, [r1, #12]
   12ec4:	cmp	r0, #6
   12ec8:	ldmib	r1, {r7, r8}
   12ecc:	str	r3, [sp]
   12ed0:	ldr	r9, [r1, #16]
   12ed4:	ldr	fp, [r1, #20]
   12ed8:	beq	12f1c <sprintf@plt+0x191c>
   12edc:	ldr	r3, [r1, #24]
   12ee0:	str	r3, [sp, #4]
   12ee4:	mov	r2, #16
   12ee8:	mov	r1, #0
   12eec:	mov	r0, r7
   12ef0:	bl	113b4 <strtoull@plt>
   12ef4:	mov	r3, #0
   12ef8:	mvn	r2, #1
   12efc:	mov	r4, r0
   12f00:	subs	r0, r0, #1
   12f04:	sbc	r1, r1, #0
   12f08:	cmp	r1, r3
   12f0c:	cmpeq	r0, r2
   12f10:	bls	12f2c <sprintf@plt+0x192c>
   12f14:	add	sp, sp, #12
   12f18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12f1c:	ldr	r3, [pc, #548]	; 13148 <sprintf@plt+0x1b48>
   12f20:	add	r3, pc, r3
   12f24:	str	r3, [sp, #4]
   12f28:	b	12ee4 <sprintf@plt+0x18e4>
   12f2c:	mov	r1, #468	; 0x1d4
   12f30:	mov	r0, #1
   12f34:	bl	1133c <calloc@plt>
   12f38:	subs	sl, r0, #0
   12f3c:	beq	13108 <sprintf@plt+0x1b08>
   12f40:	ldr	r1, [sl, #460]	; 0x1cc
   12f44:	ldr	r2, [pc, #512]	; 1314c <sprintf@plt+0x1b4c>
   12f48:	add	r1, r1, #1
   12f4c:	str	r4, [sl]
   12f50:	str	r1, [sl, #460]	; 0x1cc
   12f54:	ldr	r5, [r6, r2]
   12f58:	mov	r1, r4
   12f5c:	ldr	r0, [r5]
   12f60:	bl	11534 <rb_dictionary_find@plt>
   12f64:	subs	r4, r0, #0
   12f68:	bne	13128 <sprintf@plt+0x1b28>
   12f6c:	mov	r2, sl
   12f70:	ldr	r1, [sl]
   12f74:	ldr	r0, [r5]
   12f78:	bl	114ec <rb_dictionary_add@plt>
   12f7c:	mov	r2, #16
   12f80:	mov	r1, r4
   12f84:	ldr	r0, [sp, #4]
   12f88:	bl	113b4 <strtoull@plt>
   12f8c:	mov	r2, #54	; 0x36
   12f90:	mov	r1, r8
   12f94:	str	r0, [sl, #4]
   12f98:	add	r0, sl, #8
   12f9c:	bl	113a8 <rb_strlcpy@plt>
   12fa0:	mov	r1, r4
   12fa4:	mov	r2, #10
   12fa8:	ldr	r0, [sp]
   12fac:	bl	11468 <strtol@plt>
   12fb0:	add	r1, sl, #64	; 0x40
   12fb4:	ldr	r4, [pc, #404]	; 13150 <sprintf@plt+0x1b50>
   12fb8:	add	r4, pc, r4
   12fbc:	strh	r0, [sl, #62]	; 0x3e
   12fc0:	mov	r0, r8
   12fc4:	bl	11414 <rb_inet_pton_sock@plt>
   12fc8:	ldrh	r2, [sl, #62]	; 0x3e
   12fcc:	mov	r1, r9
   12fd0:	add	r0, sl, #192	; 0xc0
   12fd4:	rev16	r2, r2
   12fd8:	strh	r2, [sl, #66]	; 0x42
   12fdc:	mov	r2, #54	; 0x36
   12fe0:	bl	113a8 <rb_strlcpy@plt>
   12fe4:	mov	r2, #10
   12fe8:	mov	r1, #0
   12fec:	mov	r0, fp
   12ff0:	bl	11468 <strtol@plt>
   12ff4:	add	r1, sl, #248	; 0xf8
   12ff8:	strh	r0, [sl, #246]	; 0xf6
   12ffc:	mov	r0, r9
   13000:	bl	11414 <rb_inet_pton_sock@plt>
   13004:	ldrh	r2, [sl, #246]	; 0xf6
   13008:	mov	r1, r4
   1300c:	add	r0, sl, #376	; 0x178
   13010:	rev16	r2, r2
   13014:	strh	r2, [sl, #250]	; 0xfa
   13018:	mov	r2, #64	; 0x40
   1301c:	bl	113a8 <rb_strlcpy@plt>
   13020:	mov	r1, r4
   13024:	mov	r2, #11
   13028:	add	r0, sl, #440	; 0x1b8
   1302c:	bl	113a8 <rb_strlcpy@plt>
   13030:	ldr	r2, [pc, #284]	; 13154 <sprintf@plt+0x1b54>
   13034:	mov	r0, #1
   13038:	add	r2, pc, r2
   1303c:	ldr	r1, [r2, #12]
   13040:	lsl	r1, r1, #4
   13044:	bl	1133c <calloc@plt>
   13048:	subs	ip, r0, #0
   1304c:	beq	13108 <sprintf@plt+0x1b08>
   13050:	ldr	r2, [pc, #256]	; 13158 <sprintf@plt+0x1b58>
   13054:	mov	r5, #1
   13058:	str	ip, [sl, #464]	; 0x1d0
   1305c:	strb	r5, [sl, #451]	; 0x1c3
   13060:	ldr	r2, [r6, r2]
   13064:	ldr	r4, [r2]
   13068:	cmp	r4, #0
   1306c:	bne	13090 <sprintf@plt+0x1a90>
   13070:	b	130e8 <sprintf@plt+0x1ae8>
   13074:	ldrb	r2, [sl, #452]	; 0x1c4
   13078:	cmp	r2, #0
   1307c:	bne	130e8 <sprintf@plt+0x1ae8>
   13080:	ldr	r4, [r4, #8]
   13084:	cmp	r4, #0
   13088:	beq	130e8 <sprintf@plt+0x1ae8>
   1308c:	ldr	ip, [sl, #464]	; 0x1d0
   13090:	ldr	r1, [r4]
   13094:	ldr	r2, [sl, #456]	; 0x1c8
   13098:	mov	r0, sl
   1309c:	ldr	lr, [r1, #12]
   130a0:	add	r2, r2, #1
   130a4:	ldr	r6, [r1, #32]
   130a8:	add	r7, ip, lr, lsl #4
   130ac:	str	r1, [ip, lr, lsl #4]
   130b0:	str	r2, [sl, #456]	; 0x1c8
   130b4:	str	r5, [r7, #12]
   130b8:	blx	r6
   130bc:	cmp	r0, #0
   130c0:	bne	13074 <sprintf@plt+0x1a74>
   130c4:	ldr	r2, [sl, #460]	; 0x1cc
   130c8:	sub	r2, r2, #1
   130cc:	cmp	r2, #0
   130d0:	str	r2, [sl, #460]	; 0x1cc
   130d4:	bne	12f14 <sprintf@plt+0x1914>
   130d8:	mov	r0, sl
   130dc:	add	sp, sp, #12
   130e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   130e4:	b	128fc <sprintf@plt+0x12fc>
   130e8:	ldr	r1, [sl, #456]	; 0x1c8
   130ec:	mov	r2, #0
   130f0:	cmp	r1, r2
   130f4:	strb	r2, [sl, #451]	; 0x1c3
   130f8:	bne	130c4 <sprintf@plt+0x1ac4>
   130fc:	mov	r0, sl
   13100:	bl	12d94 <sprintf@plt+0x1794>
   13104:	b	130c4 <sprintf@plt+0x1ac4>
   13108:	bl	114d4 <rb_outofmemory@plt>
   1310c:	ldr	r1, [pc, #72]	; 1315c <sprintf@plt+0x1b5c>
   13110:	mov	r2, r0
   13114:	add	r1, pc, r1
   13118:	mov	r0, #67	; 0x43
   1311c:	bl	12370 <sprintf@plt+0xd70>
   13120:	mov	r0, #3
   13124:	bl	115e8 <exit@plt>
   13128:	ldr	r1, [pc, #48]	; 13160 <sprintf@plt+0x1b60>
   1312c:	mov	r0, #67	; 0x43
   13130:	mov	r2, r7
   13134:	add	r1, pc, r1
   13138:	bl	12370 <sprintf@plt+0xd70>
   1313c:	mov	r0, #3
   13140:	bl	115e8 <exit@plt>
   13144:	andeq	r8, r1, r0, asr #2
   13148:	ldrdeq	r6, [r0], -ip
   1314c:	andeq	r0, r0, r8, asr r1
   13150:	andeq	r6, r0, ip, ror #8
   13154:	andeq	ip, r1, r8, lsl #31
   13158:	andeq	r0, r0, r0, lsr #3
   1315c:	andeq	r6, r0, ip, ror #6
   13160:	muleq	r0, r8, r3
   13164:	push	{r4, r5, r6, r7, r8, lr}
   13168:	cmp	r0, #1
   1316c:	ldr	r4, [pc, #184]	; 1322c <sprintf@plt+0x1c2c>
   13170:	add	r4, pc, r4
   13174:	ble	13210 <sprintf@plt+0x1c10>
   13178:	mov	r5, r1
   1317c:	mov	r2, #16
   13180:	mov	r1, #0
   13184:	ldr	r0, [r5, #4]
   13188:	bl	113b4 <strtoull@plt>
   1318c:	mov	r3, #0
   13190:	mvn	r2, #1
   13194:	subs	r6, r0, #1
   13198:	sbc	r7, r1, #0
   1319c:	cmp	r7, r3
   131a0:	cmpeq	r6, r2
   131a4:	bhi	131f4 <sprintf@plt+0x1bf4>
   131a8:	ldr	r3, [pc, #128]	; 13230 <sprintf@plt+0x1c30>
   131ac:	mov	r1, r0
   131b0:	ldr	r3, [r4, r3]
   131b4:	ldr	r0, [r3]
   131b8:	bl	114c8 <rb_dictionary_retrieve@plt>
   131bc:	subs	r4, r0, #0
   131c0:	popeq	{r4, r5, r6, r7, r8, pc}
   131c4:	ldr	r3, [r4, #460]	; 0x1cc
   131c8:	add	r3, r3, #1
   131cc:	str	r3, [r4, #460]	; 0x1cc
   131d0:	bl	12a48 <sprintf@plt+0x1448>
   131d4:	ldr	r3, [r4, #460]	; 0x1cc
   131d8:	sub	r3, r3, #1
   131dc:	cmp	r3, #0
   131e0:	str	r3, [r4, #460]	; 0x1cc
   131e4:	popne	{r4, r5, r6, r7, r8, pc}
   131e8:	mov	r0, r4
   131ec:	pop	{r4, r5, r6, r7, r8, lr}
   131f0:	b	128fc <sprintf@plt+0x12fc>
   131f4:	ldr	r1, [pc, #56]	; 13234 <sprintf@plt+0x1c34>
   131f8:	mov	r0, #67	; 0x43
   131fc:	ldr	r2, [r5, #4]
   13200:	add	r1, pc, r1
   13204:	bl	12370 <sprintf@plt+0xd70>
   13208:	mov	r0, #3
   1320c:	bl	115e8 <exit@plt>
   13210:	ldr	r1, [pc, #32]	; 13238 <sprintf@plt+0x1c38>
   13214:	mov	r2, r0
   13218:	add	r1, pc, r1
   1321c:	mov	r0, #67	; 0x43
   13220:	bl	12370 <sprintf@plt+0xd70>
   13224:	mov	r0, #3
   13228:	bl	115e8 <exit@plt>
   1322c:	andeq	r7, r1, r8, lsl #29
   13230:	andeq	r0, r0, r8, asr r1
   13234:	andeq	r6, r0, ip, asr #6
   13238:	andeq	r6, r0, r8, ror #5
   1323c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13240:	sub	sp, sp, #1040	; 0x410
   13244:	sub	sp, sp, #12
   13248:	mov	r5, r0
   1324c:	add	fp, sp, #24
   13250:	mov	r4, #1024	; 0x400
   13254:	str	r0, [sp, #20]
   13258:	mov	r2, r4
   1325c:	mov	r1, #0
   13260:	mov	r0, fp
   13264:	bl	1136c <memset@plt>
   13268:	ldrb	r2, [r5, #20]
   1326c:	mov	r3, fp
   13270:	str	r4, [sp]
   13274:	add	r0, r5, #21
   13278:	mov	r1, #1
   1327c:	bl	14cdc <sprintf@plt+0x36dc>
   13280:	ldr	r9, [pc, #424]	; 13430 <sprintf@plt+0x1e30>
   13284:	add	r9, pc, r9
   13288:	subs	r8, r0, #0
   1328c:	ble	13424 <sprintf@plt+0x1e24>
   13290:	ldr	sl, [pc, #412]	; 13434 <sprintf@plt+0x1e34>
   13294:	ldrb	r6, [r5, #278]	; 0x116
   13298:	add	sl, pc, sl
   1329c:	ldr	r3, [pc, #404]	; 13438 <sprintf@plt+0x1e38>
   132a0:	ldr	r2, [sl]
   132a4:	add	r6, r6, #1
   132a8:	ldr	r1, [r5, #12]
   132ac:	uxtb	r6, r6
   132b0:	add	r2, r2, #1
   132b4:	strh	r1, [fp]
   132b8:	strb	r6, [r5, #278]	; 0x116
   132bc:	str	r2, [sl]
   132c0:	ldr	r7, [r9, r3]
   132c4:	ldr	r1, [r7]
   132c8:	cmp	r1, #0
   132cc:	ble	13424 <sprintf@plt+0x1e24>
   132d0:	ldr	r3, [pc, #356]	; 1343c <sprintf@plt+0x1e3c>
   132d4:	mov	r5, #0
   132d8:	add	r3, pc, r3
   132dc:	str	r3, [sp, #12]
   132e0:	ldr	r3, [pc, #344]	; 13440 <sprintf@plt+0x1e40>
   132e4:	sub	r6, r6, #1
   132e8:	add	r3, pc, r3
   132ec:	str	r3, [sp, #16]
   132f0:	add	r0, r5, r6
   132f4:	bl	18f5c <sprintf@plt+0x795c>
   132f8:	add	r3, sl, r1, lsl #2
   132fc:	mov	r4, r1
   13300:	ldr	r3, [r3, #4]
   13304:	cmp	r3, #0
   13308:	sub	r2, r3, #1
   1330c:	beq	13330 <sprintf@plt+0x1d30>
   13310:	cmp	r2, #3
   13314:	mov	r1, #243	; 0xf3
   13318:	ldrls	r3, [sp, #16]
   1331c:	ldr	r0, [sl]
   13320:	ldrls	r1, [r3, r2, lsl #2]
   13324:	bl	18f5c <sprintf@plt+0x795c>
   13328:	cmp	r1, #0
   1332c:	bne	1337c <sprintf@plt+0x1d7c>
   13330:	ldr	r3, [sp, #12]
   13334:	ldr	r0, [r3, #44]	; 0x2c
   13338:	bl	112c4 <rb_get_fd@plt>
   1333c:	ldr	r2, [pc, #256]	; 13444 <sprintf@plt+0x1e44>
   13340:	lsl	r1, r4, #7
   13344:	mov	r3, #0
   13348:	ldr	lr, [r9, r2]
   1334c:	mov	r2, r8
   13350:	ldrh	ip, [r1, lr]
   13354:	add	r1, r1, lr
   13358:	str	r1, [sp]
   1335c:	cmp	ip, #2
   13360:	movne	ip, #28
   13364:	moveq	ip, #16
   13368:	str	ip, [sp, #4]
   1336c:	mov	r1, fp
   13370:	bl	11354 <sendto@plt>
   13374:	cmp	r8, r0
   13378:	beq	13418 <sprintf@plt+0x1e18>
   1337c:	ldr	r1, [r7]
   13380:	add	r5, r5, #1
   13384:	cmp	r1, r5
   13388:	bgt	132f0 <sprintf@plt+0x1cf0>
   1338c:	cmp	r1, #0
   13390:	ble	13424 <sprintf@plt+0x1e24>
   13394:	ldr	sl, [pc, #172]	; 13448 <sprintf@plt+0x1e48>
   13398:	mov	r5, #0
   1339c:	add	sl, pc, sl
   133a0:	b	133b0 <sprintf@plt+0x1db0>
   133a4:	ldr	r1, [r7]
   133a8:	cmp	r1, r5
   133ac:	ble	13424 <sprintf@plt+0x1e24>
   133b0:	add	r0, r5, r6
   133b4:	bl	18f5c <sprintf@plt+0x795c>
   133b8:	add	r5, r5, #1
   133bc:	add	r3, sl, r1, lsl #2
   133c0:	mov	r4, r1
   133c4:	ldr	r3, [r3, #4]
   133c8:	cmp	r3, #0
   133cc:	beq	133a4 <sprintf@plt+0x1da4>
   133d0:	ldr	r0, [sl, #44]	; 0x2c
   133d4:	bl	112c4 <rb_get_fd@plt>
   133d8:	ldr	r2, [pc, #100]	; 13444 <sprintf@plt+0x1e44>
   133dc:	lsl	r1, r4, #7
   133e0:	mov	r3, #0
   133e4:	ldr	lr, [r9, r2]
   133e8:	mov	r2, r8
   133ec:	ldrh	ip, [r1, lr]
   133f0:	add	r1, r1, lr
   133f4:	str	r1, [sp]
   133f8:	cmp	ip, #2
   133fc:	movne	ip, #28
   13400:	moveq	ip, #16
   13404:	str	ip, [sp, #4]
   13408:	mov	r1, fp
   1340c:	bl	11354 <sendto@plt>
   13410:	cmp	r8, r0
   13414:	bne	133a4 <sprintf@plt+0x1da4>
   13418:	cmn	r4, #1
   1341c:	ldrne	r3, [sp, #20]
   13420:	strne	r4, [r3, #288]	; 0x120
   13424:	add	sp, sp, #1040	; 0x410
   13428:	add	sp, sp, #12
   1342c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13430:	andeq	r7, r1, r4, ror sp
   13434:	andeq	ip, r1, ip, lsr sp
   13438:	andeq	r0, r0, ip, ror #2
   1343c:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   13440:	andeq	r6, r0, r8, lsr #5
   13444:	andeq	r0, r0, r8, ror r1
   13448:	andeq	ip, r1, r8, lsr ip
   1344c:	push	{r4, r5, r6, lr}
   13450:	bl	143e8 <sprintf@plt+0x2de8>
   13454:	ldr	r0, [pc, #172]	; 13508 <sprintf@plt+0x1f08>
   13458:	ldr	r3, [pc, #172]	; 1350c <sprintf@plt+0x1f0c>
   1345c:	add	r0, pc, r0
   13460:	ldr	r3, [r0, r3]
   13464:	ldr	r2, [r3]
   13468:	cmp	r2, #0
   1346c:	ble	13490 <sprintf@plt+0x1e90>
   13470:	ldr	r3, [pc, #152]	; 13510 <sprintf@plt+0x1f10>
   13474:	mov	r1, #0
   13478:	add	r3, pc, r3
   1347c:	add	r3, r3, #4
   13480:	add	r2, r3, r2, lsl #2
   13484:	str	r1, [r3], #4
   13488:	cmp	r3, r2
   1348c:	bne	13484 <sprintf@plt+0x1e84>
   13490:	ldr	r5, [pc, #124]	; 13514 <sprintf@plt+0x1f14>
   13494:	add	r5, pc, r5
   13498:	ldr	r4, [r5, #44]	; 0x2c
   1349c:	cmp	r4, #0
   134a0:	popne	{r4, r5, r6, pc}
   134a4:	ldr	r1, [pc, #108]	; 13518 <sprintf@plt+0x1f18>
   134a8:	ldr	r3, [pc, #108]	; 1351c <sprintf@plt+0x1f1c>
   134ac:	mov	r2, r4
   134b0:	ldr	r0, [r0, r1]
   134b4:	add	r3, pc, r3
   134b8:	mov	r1, #2
   134bc:	ldrh	r0, [r0]
   134c0:	bl	112e8 <rb_socket@plt>
   134c4:	cmp	r0, #0
   134c8:	str	r0, [r5, #44]	; 0x2c
   134cc:	popeq	{r4, r5, r6, pc}
   134d0:	ldr	r2, [pc, #72]	; 13520 <sprintf@plt+0x1f20>
   134d4:	mov	r3, r4
   134d8:	add	r2, pc, r2
   134dc:	mov	r1, #1
   134e0:	bl	112b8 <rb_setselect@plt>
   134e4:	ldr	r1, [pc, #56]	; 13524 <sprintf@plt+0x1f24>
   134e8:	ldr	r0, [pc, #56]	; 13528 <sprintf@plt+0x1f28>
   134ec:	mov	r2, r4
   134f0:	mov	r3, #1
   134f4:	add	r1, pc, r1
   134f8:	add	r0, pc, r0
   134fc:	bl	11570 <rb_event_add@plt>
   13500:	str	r0, [r5, #48]	; 0x30
   13504:	pop	{r4, r5, r6, pc}
   13508:	muleq	r1, ip, fp
   1350c:	andeq	r0, r0, ip, ror #2
   13510:	andeq	ip, r1, ip, asr fp
   13514:	andeq	ip, r1, r0, asr #22
   13518:	andeq	r0, r0, r8, ror r1
   1351c:	andeq	r6, r0, r0, lsl r1
   13520:			; <UNDEFINED> instruction: 0x00000db4
   13524:	andeq	r0, r0, ip, asr #14
   13528:	andeq	r6, r0, r0, ror #1
   1352c:	push	{r4, lr}
   13530:	subs	r4, r0, #0
   13534:	beq	135bc <sprintf@plt+0x1fbc>
   13538:	ldr	r3, [r4, #8]
   1353c:	cmp	r3, #0
   13540:	beq	135a8 <sprintf@plt+0x1fa8>
   13544:	ldr	r2, [r4, #4]
   13548:	str	r2, [r3, #4]
   1354c:	ldr	r2, [r4, #4]
   13550:	cmp	r2, #0
   13554:	strne	r3, [r2, #8]
   13558:	beq	13598 <sprintf@plt+0x1f98>
   1355c:	ldr	r2, [pc, #124]	; 135e0 <sprintf@plt+0x1fe0>
   13560:	ldr	r0, [r4, #420]	; 0x1a4
   13564:	add	r2, pc, r2
   13568:	mov	r1, #0
   1356c:	ldr	r3, [r2, #60]	; 0x3c
   13570:	cmp	r0, r1
   13574:	sub	r3, r3, #1
   13578:	str	r1, [r4, #4]
   1357c:	str	r1, [r4, #8]
   13580:	str	r3, [r2, #60]	; 0x3c
   13584:	beq	1358c <sprintf@plt+0x1f8c>
   13588:	bl	113cc <free@plt>
   1358c:	mov	r0, r4
   13590:	pop	{r4, lr}
   13594:	b	113cc <free@plt>
   13598:	ldr	r2, [pc, #68]	; 135e4 <sprintf@plt+0x1fe4>
   1359c:	add	r2, pc, r2
   135a0:	str	r3, [r2, #52]	; 0x34
   135a4:	b	1355c <sprintf@plt+0x1f5c>
   135a8:	ldr	r1, [pc, #56]	; 135e8 <sprintf@plt+0x1fe8>
   135ac:	ldr	r2, [r4, #4]
   135b0:	add	r1, pc, r1
   135b4:	str	r2, [r1, #56]	; 0x38
   135b8:	b	13550 <sprintf@plt+0x1f50>
   135bc:	ldr	r3, [pc, #40]	; 135ec <sprintf@plt+0x1fec>
   135c0:	ldr	r1, [pc, #40]	; 135f0 <sprintf@plt+0x1ff0>
   135c4:	ldr	r0, [pc, #40]	; 135f4 <sprintf@plt+0x1ff4>
   135c8:	add	r3, pc, r3
   135cc:	mov	r2, #235	; 0xeb
   135d0:	add	r3, r3, #16
   135d4:	add	r1, pc, r1
   135d8:	add	r0, pc, r0
   135dc:	bl	1139c <__assert_fail@plt>
   135e0:	andeq	ip, r1, r0, ror sl
   135e4:	andeq	ip, r1, r8, lsr sl
   135e8:	andeq	ip, r1, r4, lsr #20
   135ec:	andeq	r5, r0, r8, asr #31
   135f0:	andeq	r5, r0, r0, lsl #28
   135f4:	andeq	r5, r0, r8, lsr #28
   135f8:	push	{r4, r5, r6, r7, r8, lr}
   135fc:	mov	r1, #428	; 0x1ac
   13600:	sub	sp, sp, #8
   13604:	mov	r8, r0
   13608:	mov	r0, #1
   1360c:	bl	1133c <calloc@plt>
   13610:	subs	r7, r0, #0
   13614:	beq	136ec <sprintf@plt+0x20ec>
   13618:	bl	1142c <rb_current_time@plt>
   1361c:	ldr	r4, [pc, #204]	; 136f0 <sprintf@plt+0x20f0>
   13620:	add	r6, sp, #6
   13624:	add	r4, pc, r4
   13628:	mov	r5, #2
   1362c:	mov	r2, #3
   13630:	mov	r3, #4
   13634:	str	r8, [r7, #424]	; 0x1a8
   13638:	strb	r2, [r7, #277]	; 0x115
   1363c:	str	r3, [r7, #284]	; 0x11c
   13640:	str	r0, [r7, #280]	; 0x118
   13644:	mov	r1, r5
   13648:	mov	r0, r6
   1364c:	bl	1157c <rb_get_random@plt>
   13650:	ldr	r0, [r4, #52]	; 0x34
   13654:	ldrh	r1, [sp, #6]
   13658:	cmp	r0, #0
   1365c:	beq	136cc <sprintf@plt+0x20cc>
   13660:	ldr	r3, [r0]
   13664:	ldr	r3, [r3, #12]
   13668:	cmp	r3, r1
   1366c:	beq	13644 <sprintf@plt+0x2044>
   13670:	mov	r3, r0
   13674:	b	13688 <sprintf@plt+0x2088>
   13678:	ldr	r2, [r3]
   1367c:	ldr	r2, [r2, #12]
   13680:	cmp	r1, r2
   13684:	beq	13644 <sprintf@plt+0x2044>
   13688:	ldr	r3, [r3, #8]
   1368c:	cmp	r3, #0
   13690:	bne	13678 <sprintf@plt+0x2078>
   13694:	str	r1, [r7, #12]
   13698:	str	r7, [r7]
   1369c:	str	r3, [r7, #4]
   136a0:	str	r0, [r7, #8]
   136a4:	str	r7, [r0, #4]
   136a8:	ldr	r3, [pc, #68]	; 136f4 <sprintf@plt+0x20f4>
   136ac:	mov	r0, r7
   136b0:	add	r3, pc, r3
   136b4:	ldr	r2, [r3, #60]	; 0x3c
   136b8:	str	r7, [r3, #52]	; 0x34
   136bc:	add	r2, r2, #1
   136c0:	str	r2, [r3, #60]	; 0x3c
   136c4:	add	sp, sp, #8
   136c8:	pop	{r4, r5, r6, r7, r8, pc}
   136cc:	ldr	r3, [r4, #56]	; 0x38
   136d0:	str	r1, [r7, #12]
   136d4:	cmp	r3, #0
   136d8:	str	r7, [r7]
   136dc:	str	r0, [r7, #4]
   136e0:	str	r0, [r7, #8]
   136e4:	streq	r7, [r4, #56]	; 0x38
   136e8:	b	136a8 <sprintf@plt+0x20a8>
   136ec:	bl	114d4 <rb_outofmemory@plt>
   136f0:			; <UNDEFINED> instruction: 0x0001c9b0
   136f4:	andeq	ip, r1, r4, lsr #18
   136f8:	push	{r4, r5, r6, r7, r8, lr}
   136fc:	subs	r4, r2, #0
   13700:	mov	r5, r1
   13704:	mov	r6, r3
   13708:	beq	1372c <sprintf@plt+0x212c>
   1370c:	mov	r1, r5
   13710:	add	r0, r4, #21
   13714:	mov	r2, #256	; 0x100
   13718:	bl	113a8 <rb_strlcpy@plt>
   1371c:	strb	r6, [r4, #20]
   13720:	mov	r0, r4
   13724:	pop	{r4, r5, r6, r7, r8, lr}
   13728:	b	1323c <sprintf@plt+0x1c3c>
   1372c:	bl	135f8 <sprintf@plt+0x1ff8>
   13730:	mov	r4, r0
   13734:	mov	r0, r5
   13738:	bl	11420 <strlen@plt>
   1373c:	add	r7, r0, #1
   13740:	mov	r0, r7
   13744:	bl	11504 <malloc@plt>
   13748:	subs	r8, r0, #0
   1374c:	beq	13764 <sprintf@plt+0x2164>
   13750:	mov	r2, r7
   13754:	mov	r1, r5
   13758:	bl	11444 <memcpy@plt>
   1375c:	str	r8, [r4, #420]	; 0x1a4
   13760:	b	1370c <sprintf@plt+0x210c>
   13764:	bl	114d4 <rb_outofmemory@plt>
   13768:	b	1344c <sprintf@plt+0x1e4c>
   1376c:	push	{r4, lr}
   13770:	ldr	r4, [pc, #32]	; 13798 <sprintf@plt+0x2198>
   13774:	add	r4, pc, r4
   13778:	ldr	r0, [r4, #44]	; 0x2c
   1377c:	bl	1145c <rb_close@plt>
   13780:	mov	r3, #0
   13784:	ldr	r0, [r4, #48]	; 0x30
   13788:	str	r3, [r4, #44]	; 0x2c
   1378c:	bl	112ac <rb_event_delete@plt>
   13790:	pop	{r4, lr}
   13794:	b	1344c <sprintf@plt+0x1e4c>
   13798:	andeq	ip, r1, r0, ror #16
   1379c:	push	{r4, r5, r6, r7, r8, lr}
   137a0:	cmp	r0, #0
   137a4:	ldr	r5, [pc, #216]	; 13884 <sprintf@plt+0x2284>
   137a8:	sub	sp, sp, #256	; 0x100
   137ac:	add	r5, pc, r5
   137b0:	beq	13860 <sprintf@plt+0x2260>
   137b4:	mov	r6, r1
   137b8:	mov	r7, r2
   137bc:	mov	r1, r0
   137c0:	mov	r2, #256	; 0x100
   137c4:	mov	r0, sp
   137c8:	bl	113a8 <rb_strlcpy@plt>
   137cc:	mov	r0, sp
   137d0:	mov	r1, #46	; 0x2e
   137d4:	bl	11318 <strchr@plt>
   137d8:	mov	r4, sp
   137dc:	cmp	r0, #0
   137e0:	beq	13800 <sprintf@plt+0x2200>
   137e4:	mov	r3, r7
   137e8:	mov	r1, r4
   137ec:	mov	r0, r6
   137f0:	mov	r2, #0
   137f4:	bl	136f8 <sprintf@plt+0x20f8>
   137f8:	add	sp, sp, #256	; 0x100
   137fc:	pop	{r4, r5, r6, r7, r8, pc}
   13800:	ldr	r3, [pc, #128]	; 13888 <sprintf@plt+0x2288>
   13804:	ldr	r5, [r5, r3]
   13808:	ldrb	r3, [r5]
   1380c:	cmp	r3, #0
   13810:	beq	137e4 <sprintf@plt+0x21e4>
   13814:	mov	r0, sp
   13818:	bl	11420 <strlen@plt>
   1381c:	mov	r8, r0
   13820:	mov	r0, r5
   13824:	bl	11420 <strlen@plt>
   13828:	add	r3, r8, r0
   1382c:	add	r3, r3, #2
   13830:	cmp	r3, #254	; 0xfe
   13834:	bhi	137e4 <sprintf@plt+0x21e4>
   13838:	add	r3, sp, #256	; 0x100
   1383c:	add	r3, r3, r8
   13840:	mov	ip, #46	; 0x2e
   13844:	add	r8, r8, #1
   13848:	add	r2, r0, #1
   1384c:	mov	r1, r5
   13850:	add	r0, sp, r8
   13854:	strb	ip, [r3, #-256]	; 0xffffff00
   13858:	bl	11444 <memcpy@plt>
   1385c:	b	137e4 <sprintf@plt+0x21e4>
   13860:	ldr	r3, [pc, #36]	; 1388c <sprintf@plt+0x228c>
   13864:	ldr	r1, [pc, #36]	; 13890 <sprintf@plt+0x2290>
   13868:	ldr	r0, [pc, #36]	; 13894 <sprintf@plt+0x2294>
   1386c:	add	r3, pc, r3
   13870:	mov	r2, #412	; 0x19c
   13874:	add	r3, r3, #32
   13878:	add	r1, pc, r1
   1387c:	add	r0, pc, r0
   13880:	bl	1139c <__assert_fail@plt>
   13884:	andeq	r7, r1, ip, asr #16
   13888:	andeq	r0, r0, r0, ror r1
   1388c:	andeq	r5, r0, r4, lsr #26
   13890:	andeq	r5, r0, r4, ror sp
   13894:	andeq	r5, r0, r8, ror sp
   13898:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1389c:	mov	ip, r3
   138a0:	ldrh	lr, [r2]
   138a4:	sub	sp, sp, #228	; 0xe4
   138a8:	cmp	lr, #2
   138ac:	beq	13b04 <sprintf@plt+0x2504>
   138b0:	cmp	lr, #10
   138b4:	beq	138c0 <sprintf@plt+0x22c0>
   138b8:	add	sp, sp, #228	; 0xe4
   138bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   138c0:	ldrb	lr, [r2, #15]
   138c4:	ldrb	fp, [r2, #23]
   138c8:	ldrb	sl, [r2, #22]
   138cc:	str	lr, [sp, #172]	; 0xac
   138d0:	ldrb	lr, [r2, #12]
   138d4:	ldrb	r9, [r2, #21]
   138d8:	ldrb	r8, [r2, #20]
   138dc:	str	lr, [sp, #188]	; 0xbc
   138e0:	ldrb	lr, [r2, #11]
   138e4:	ldrb	r7, [r2, #19]
   138e8:	ldrb	r6, [r2, #18]
   138ec:	str	lr, [sp, #196]	; 0xc4
   138f0:	ldrb	lr, [r2, #10]
   138f4:	ldrb	r5, [r2, #17]
   138f8:	ldrb	r4, [r2, #16]
   138fc:	str	lr, [sp, #204]	; 0xcc
   13900:	ldrb	lr, [r2, #9]
   13904:	ldrb	r3, [r2, #14]
   13908:	cmp	ip, #0
   1390c:	str	lr, [sp, #212]	; 0xd4
   13910:	and	lr, fp, #15
   13914:	str	lr, [sp, #136]	; 0x88
   13918:	and	lr, sl, #15
   1391c:	str	lr, [sp, #140]	; 0x8c
   13920:	and	lr, r9, #15
   13924:	str	lr, [sp, #144]	; 0x90
   13928:	and	lr, r8, #15
   1392c:	str	lr, [sp, #148]	; 0x94
   13930:	and	lr, r7, #15
   13934:	str	lr, [sp, #152]	; 0x98
   13938:	and	lr, r6, #15
   1393c:	str	lr, [sp, #156]	; 0x9c
   13940:	and	lr, r5, #15
   13944:	str	lr, [sp, #160]	; 0xa0
   13948:	and	lr, r4, #15
   1394c:	str	lr, [sp, #164]	; 0xa4
   13950:	lsr	lr, r4, #4
   13954:	ldr	r4, [sp, #172]	; 0xac
   13958:	str	lr, [sp, #168]	; 0xa8
   1395c:	and	lr, r4, #15
   13960:	str	r3, [sp, #132]	; 0x84
   13964:	ldrb	r3, [r2, #13]
   13968:	ldrb	r2, [r2, #8]
   1396c:	str	lr, [sp, #172]	; 0xac
   13970:	lsr	lr, r4, #4
   13974:	ldr	r4, [sp, #132]	; 0x84
   13978:	lsr	fp, fp, #4
   1397c:	and	r4, r4, #15
   13980:	str	r4, [sp, #176]	; 0xb0
   13984:	ldr	r4, [sp, #132]	; 0x84
   13988:	lsr	sl, sl, #4
   1398c:	lsr	r9, r9, #4
   13990:	lsr	r4, r4, #4
   13994:	str	r4, [sp, #132]	; 0x84
   13998:	and	r4, r3, #15
   1399c:	str	r4, [sp, #180]	; 0xb4
   139a0:	lsr	r4, r3, #4
   139a4:	ldr	r3, [sp, #188]	; 0xbc
   139a8:	str	r4, [sp, #184]	; 0xb8
   139ac:	and	r4, r3, #15
   139b0:	str	r4, [sp, #188]	; 0xbc
   139b4:	lsr	r4, r3, #4
   139b8:	ldr	r3, [sp, #196]	; 0xc4
   139bc:	str	r4, [sp, #192]	; 0xc0
   139c0:	and	r4, r3, #15
   139c4:	str	r4, [sp, #196]	; 0xc4
   139c8:	lsr	r4, r3, #4
   139cc:	ldr	r3, [sp, #204]	; 0xcc
   139d0:	str	r4, [sp, #200]	; 0xc8
   139d4:	and	r4, r3, #15
   139d8:	str	r4, [sp, #204]	; 0xcc
   139dc:	lsr	r4, r3, #4
   139e0:	ldr	r3, [sp, #212]	; 0xd4
   139e4:	str	r4, [sp, #208]	; 0xd0
   139e8:	and	r4, r3, #15
   139ec:	lsr	r3, r3, #4
   139f0:	str	r3, [sp, #212]	; 0xd4
   139f4:	and	r3, r2, #15
   139f8:	str	r3, [sp, #216]	; 0xd8
   139fc:	lsr	r3, r2, #4
   13a00:	lsr	r8, r8, #4
   13a04:	lsr	r7, r7, #4
   13a08:	lsr	r6, r6, #4
   13a0c:	lsr	r5, r5, #4
   13a10:	str	r3, [sp, #220]	; 0xdc
   13a14:	beq	13b4c <sprintf@plt+0x254c>
   13a18:	str	ip, [sp, #124]	; 0x7c
   13a1c:	ldr	ip, [sp, #220]	; 0xdc
   13a20:	ldr	r3, [sp, #136]	; 0x88
   13a24:	str	ip, [sp, #120]	; 0x78
   13a28:	ldr	ip, [sp, #216]	; 0xd8
   13a2c:	str	lr, [sp, #64]	; 0x40
   13a30:	str	ip, [sp, #116]	; 0x74
   13a34:	ldr	ip, [sp, #212]	; 0xd4
   13a38:	str	r4, [sp, #108]	; 0x6c
   13a3c:	str	ip, [sp, #112]	; 0x70
   13a40:	ldr	ip, [sp, #208]	; 0xd0
   13a44:	ldr	r2, [pc, #268]	; 13b58 <sprintf@plt+0x2558>
   13a48:	str	ip, [sp, #104]	; 0x68
   13a4c:	ldr	ip, [sp, #204]	; 0xcc
   13a50:	add	r2, pc, r2
   13a54:	str	ip, [sp, #100]	; 0x64
   13a58:	ldr	ip, [sp, #200]	; 0xc8
   13a5c:	str	ip, [sp, #96]	; 0x60
   13a60:	ldr	ip, [sp, #196]	; 0xc4
   13a64:	str	ip, [sp, #92]	; 0x5c
   13a68:	ldr	ip, [sp, #192]	; 0xc0
   13a6c:	str	ip, [sp, #88]	; 0x58
   13a70:	ldr	ip, [sp, #188]	; 0xbc
   13a74:	str	ip, [sp, #84]	; 0x54
   13a78:	ldr	ip, [sp, #184]	; 0xb8
   13a7c:	str	ip, [sp, #80]	; 0x50
   13a80:	ldr	ip, [sp, #180]	; 0xb4
   13a84:	str	ip, [sp, #76]	; 0x4c
   13a88:	ldr	ip, [sp, #132]	; 0x84
   13a8c:	str	ip, [sp, #72]	; 0x48
   13a90:	ldr	ip, [sp, #176]	; 0xb0
   13a94:	str	ip, [sp, #68]	; 0x44
   13a98:	ldr	ip, [sp, #172]	; 0xac
   13a9c:	str	ip, [sp, #60]	; 0x3c
   13aa0:	ldr	ip, [sp, #168]	; 0xa8
   13aa4:	str	r7, [sp, #32]
   13aa8:	str	ip, [sp, #56]	; 0x38
   13aac:	ldr	ip, [sp, #164]	; 0xa4
   13ab0:	str	r8, [sp, #24]
   13ab4:	str	ip, [sp, #52]	; 0x34
   13ab8:	ldr	ip, [sp, #160]	; 0xa0
   13abc:	str	r9, [sp, #16]
   13ac0:	str	ip, [sp, #44]	; 0x2c
   13ac4:	ldr	ip, [sp, #156]	; 0x9c
   13ac8:	str	sl, [sp, #8]
   13acc:	str	ip, [sp, #36]	; 0x24
   13ad0:	ldr	ip, [sp, #152]	; 0x98
   13ad4:	str	r5, [sp, #48]	; 0x30
   13ad8:	str	ip, [sp, #28]
   13adc:	ldr	ip, [sp, #148]	; 0x94
   13ae0:	str	r6, [sp, #40]	; 0x28
   13ae4:	str	ip, [sp, #20]
   13ae8:	ldr	ip, [sp, #144]	; 0x90
   13aec:	str	ip, [sp, #12]
   13af0:	ldr	ip, [sp, #140]	; 0x8c
   13af4:	stm	sp, {fp, ip}
   13af8:	bl	11594 <snprintf@plt>
   13afc:	add	sp, sp, #228	; 0xe4
   13b00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13b04:	cmp	r3, #0
   13b08:	ldrb	lr, [r2, #6]
   13b0c:	ldrb	r3, [r2, #7]
   13b10:	ldrb	r4, [r2, #5]
   13b14:	ldrb	r2, [r2, #4]
   13b18:	beq	13b40 <sprintf@plt+0x2540>
   13b1c:	str	r2, [sp, #8]
   13b20:	ldr	r2, [pc, #52]	; 13b5c <sprintf@plt+0x255c>
   13b24:	str	ip, [sp, #12]
   13b28:	str	r4, [sp, #4]
   13b2c:	str	lr, [sp]
   13b30:	add	r2, pc, r2
   13b34:	bl	11594 <snprintf@plt>
   13b38:	add	sp, sp, #228	; 0xe4
   13b3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13b40:	ldr	ip, [pc, #24]	; 13b60 <sprintf@plt+0x2560>
   13b44:	add	ip, pc, ip
   13b48:	b	13b1c <sprintf@plt+0x251c>
   13b4c:	ldr	ip, [pc, #16]	; 13b64 <sprintf@plt+0x2564>
   13b50:	add	ip, pc, ip
   13b54:	b	13a18 <sprintf@plt+0x2418>
   13b58:	ldrdeq	r5, [r0], -ip
   13b5c:	andeq	r5, r0, ip, ror #21
   13b60:			; <UNDEFINED> instruction: 0x00005abc
   13b64:	andeq	r5, r0, r0, asr #21
   13b68:	push	{r4, r5, r6, lr}
   13b6c:	subs	r4, r2, #0
   13b70:	mov	r5, r1
   13b74:	beq	13ba0 <sprintf@plt+0x25a0>
   13b78:	add	r0, r4, #21
   13b7c:	mov	r2, r5
   13b80:	mov	r3, #0
   13b84:	mov	r1, #256	; 0x100
   13b88:	bl	13898 <sprintf@plt+0x2298>
   13b8c:	mov	r3, #12
   13b90:	strb	r3, [r4, #20]
   13b94:	mov	r0, r4
   13b98:	pop	{r4, r5, r6, lr}
   13b9c:	b	1323c <sprintf@plt+0x1c3c>
   13ba0:	bl	135f8 <sprintf@plt+0x1ff8>
   13ba4:	mov	r2, #128	; 0x80
   13ba8:	mov	r1, r5
   13bac:	mov	r4, r0
   13bb0:	add	r0, r0, #292	; 0x124
   13bb4:	bl	11444 <memcpy@plt>
   13bb8:	mov	r1, #256	; 0x100
   13bbc:	mov	r0, #1
   13bc0:	bl	1133c <calloc@plt>
   13bc4:	cmp	r0, #0
   13bc8:	strne	r0, [r4, #420]	; 0x1a4
   13bcc:	bne	13b78 <sprintf@plt+0x2578>
   13bd0:	bl	114d4 <rb_outofmemory@plt>
   13bd4:	ldrb	r1, [r0, #277]	; 0x115
   13bd8:	sub	r1, r1, #1
   13bdc:	uxtb	r1, r1
   13be0:	cmp	r1, #0
   13be4:	strb	r1, [r0, #277]	; 0x115
   13be8:	beq	13c28 <sprintf@plt+0x2628>
   13bec:	ldrb	r3, [r0, #20]
   13bf0:	cmp	r3, #12
   13bf4:	beq	13c18 <sprintf@plt+0x2618>
   13bf8:	cmp	r3, #28
   13bfc:	beq	13c08 <sprintf@plt+0x2608>
   13c00:	cmp	r3, #1
   13c04:	bxne	lr
   13c08:	mov	r2, r0
   13c0c:	ldr	r1, [r0, #420]	; 0x1a4
   13c10:	mov	r0, #0
   13c14:	b	136f8 <sprintf@plt+0x20f8>
   13c18:	mov	r2, r0
   13c1c:	add	r1, r0, #292	; 0x124
   13c20:	mov	r0, #0
   13c24:	b	13b68 <sprintf@plt+0x2568>
   13c28:	ldr	r3, [r0, #424]	; 0x1a8
   13c2c:	push	{r4, lr}
   13c30:	mov	r4, r0
   13c34:	ldm	r3, {r0, r2}
   13c38:	blx	r2
   13c3c:	mov	r0, r4
   13c40:	pop	{r4, lr}
   13c44:	b	1352c <sprintf@plt+0x1f2c>
   13c48:	push	{r4, r5, r6, lr}
   13c4c:	bl	1142c <rb_current_time@plt>
   13c50:	ldr	r3, [pc, #120]	; 13cd0 <sprintf@plt+0x26d0>
   13c54:	add	r3, pc, r3
   13c58:	ldr	r3, [r3, #52]	; 0x34
   13c5c:	cmp	r3, #0
   13c60:	popeq	{r4, r5, r6, pc}
   13c64:	ldr	r5, [pc, #104]	; 13cd4 <sprintf@plt+0x26d4>
   13c68:	mov	r6, r0
   13c6c:	ldr	r4, [r3, #8]
   13c70:	add	r5, pc, r5
   13c74:	b	13c88 <sprintf@plt+0x2688>
   13c78:	cmp	r4, #0
   13c7c:	popeq	{r4, r5, r6, pc}
   13c80:	mov	r3, r4
   13c84:	ldr	r4, [r4, #8]
   13c88:	ldr	r0, [r3]
   13c8c:	ldr	r2, [r0, #284]	; 0x11c
   13c90:	ldr	r3, [r0, #280]	; 0x118
   13c94:	add	r3, r2, r3
   13c98:	cmp	r6, r3
   13c9c:	blt	13c78 <sprintf@plt+0x2678>
   13ca0:	ldr	r3, [r0, #288]	; 0x120
   13ca4:	lsl	r2, r2, #1
   13ca8:	str	r2, [r0, #284]	; 0x11c
   13cac:	add	r3, r5, r3, lsl #2
   13cb0:	str	r6, [r0, #280]	; 0x118
   13cb4:	ldr	r2, [r3, #4]
   13cb8:	add	r2, r2, #1
   13cbc:	str	r2, [r3, #4]
   13cc0:	bl	13bd4 <sprintf@plt+0x25d4>
   13cc4:	cmp	r4, #0
   13cc8:	bne	13c80 <sprintf@plt+0x2680>
   13ccc:	pop	{r4, r5, r6, pc}
   13cd0:	andeq	ip, r1, r0, lsl #7
   13cd4:	andeq	ip, r1, r4, ror #6
   13cd8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13cdc:	sub	sp, sp, #1552	; 0x610
   13ce0:	sub	sp, sp, #12
   13ce4:	mov	r3, #128	; 0x80
   13ce8:	add	r2, sp, #536	; 0x218
   13cec:	add	sl, sp, #40	; 0x28
   13cf0:	str	r2, [sp, #12]
   13cf4:	str	r3, [sp, #36]	; 0x24
   13cf8:	add	r8, sp, #524	; 0x20c
   13cfc:	bl	112c4 <rb_get_fd@plt>
   13d00:	sub	r3, sl, #4
   13d04:	str	r3, [sp, #4]
   13d08:	mov	r1, r8
   13d0c:	mov	r3, #0
   13d10:	str	sl, [sp]
   13d14:	ldr	r2, [pc, #1348]	; 14260 <sprintf@plt+0x2c60>
   13d18:	bl	115b8 <recvfrom@plt>
   13d1c:	add	r3, r0, #1
   13d20:	cmp	r3, #1
   13d24:	ldr	r3, [pc, #1336]	; 14264 <sprintf@plt+0x2c64>
   13d28:	add	r3, pc, r3
   13d2c:	bls	14024 <sprintf@plt+0x2a24>
   13d30:	cmp	r0, #12
   13d34:	mov	fp, r0
   13d38:	ble	13edc <sprintf@plt+0x28dc>
   13d3c:	ldr	r2, [pc, #1316]	; 14268 <sprintf@plt+0x2c68>
   13d40:	ldrh	r0, [r8, #4]
   13d44:	add	r2, pc, r2
   13d48:	ldrh	lr, [r8, #6]
   13d4c:	ldrh	ip, [r8, #8]
   13d50:	ldrh	r1, [r8, #10]
   13d54:	rev16	r0, r0
   13d58:	ldr	r2, [r2, #52]	; 0x34
   13d5c:	rev16	lr, lr
   13d60:	rev16	ip, ip
   13d64:	rev16	r1, r1
   13d68:	strh	r0, [r8, #4]
   13d6c:	cmp	r2, #0
   13d70:	uxth	r0, r0
   13d74:	str	r0, [sp, #16]
   13d78:	strh	lr, [r8, #6]
   13d7c:	strh	ip, [r8, #8]
   13d80:	strh	r1, [r8, #10]
   13d84:	ldrh	r0, [r8]
   13d88:	bne	13d9c <sprintf@plt+0x279c>
   13d8c:	b	13edc <sprintf@plt+0x28dc>
   13d90:	ldr	r2, [r2, #8]
   13d94:	cmp	r2, #0
   13d98:	beq	13edc <sprintf@plt+0x28dc>
   13d9c:	ldr	r7, [r2]
   13da0:	ldr	r1, [r7, #12]
   13da4:	cmp	r0, r1
   13da8:	bne	13d90 <sprintf@plt+0x2790>
   13dac:	ldr	r2, [pc, #1208]	; 1426c <sprintf@plt+0x2c6c>
   13db0:	ldr	r2, [r3, r2]
   13db4:	ldr	r5, [r2]
   13db8:	cmp	r5, #0
   13dbc:	ble	13f40 <sprintf@plt+0x2940>
   13dc0:	ldr	r2, [pc, #1192]	; 14270 <sprintf@plt+0x2c70>
   13dc4:	ldrh	r9, [sl, #2]
   13dc8:	ldrh	r6, [sl]
   13dcc:	ldr	r4, [r3, r2]
   13dd0:	ldr	r2, [sp, #44]	; 0x2c
   13dd4:	str	r7, [sp, #28]
   13dd8:	str	r2, [sp, #20]
   13ddc:	add	r2, sl, #8
   13de0:	mov	r7, r9
   13de4:	add	r4, r4, #8
   13de8:	str	r2, [sp, #24]
   13dec:	mov	sl, #0
   13df0:	mov	r9, r3
   13df4:	b	13e18 <sprintf@plt+0x2818>
   13df8:	cmp	r2, #10
   13dfc:	bne	13e08 <sprintf@plt+0x2808>
   13e00:	cmp	r6, #10
   13e04:	beq	13eec <sprintf@plt+0x28ec>
   13e08:	add	sl, sl, #1
   13e0c:	cmp	sl, r5
   13e10:	add	r4, r4, #128	; 0x80
   13e14:	beq	13f3c <sprintf@plt+0x293c>
   13e18:	ldrh	r2, [r4, #-8]
   13e1c:	cmp	r2, #2
   13e20:	bne	13df8 <sprintf@plt+0x27f8>
   13e24:	cmp	r6, #2
   13e28:	bne	13e08 <sprintf@plt+0x2808>
   13e2c:	ldrh	r2, [r4, #-6]
   13e30:	cmp	r2, r7
   13e34:	bne	13e08 <sprintf@plt+0x2808>
   13e38:	ldr	r2, [r4, #-4]
   13e3c:	cmp	r2, #0
   13e40:	beq	13e50 <sprintf@plt+0x2850>
   13e44:	ldr	r3, [sp, #20]
   13e48:	cmp	r2, r3
   13e4c:	bne	13e08 <sprintf@plt+0x2808>
   13e50:	ldr	r7, [sp, #28]
   13e54:	mov	r4, #1
   13e58:	b	13f44 <sprintf@plt+0x2944>
   13e5c:	ldrh	r3, [r8, #6]
   13e60:	cmp	r3, #0
   13e64:	beq	13ffc <sprintf@plt+0x29fc>
   13e68:	ldrh	r2, [r8, #4]
   13e6c:	cmp	r2, #0
   13e70:	ldreq	r6, [sp, #12]
   13e74:	beq	14044 <sprintf@plt+0x2a44>
   13e78:	ldr	r3, [sp, #12]
   13e7c:	mov	r6, r3
   13e80:	sub	r8, r3, #12
   13e84:	b	13ea8 <sprintf@plt+0x28a8>
   13e88:	ldrh	r3, [r8, #4]
   13e8c:	add	r0, r0, #4
   13e90:	add	r6, r6, r0
   13e94:	sub	r3, r3, #1
   13e98:	uxth	r3, r3
   13e9c:	cmp	r3, #0
   13ea0:	strh	r3, [r8, #4]
   13ea4:	beq	14040 <sprintf@plt+0x2a40>
   13ea8:	mov	r1, fp
   13eac:	mov	r0, r6
   13eb0:	bl	14bc8 <sprintf@plt+0x35c8>
   13eb4:	cmp	r0, #0
   13eb8:	bge	13e88 <sprintf@plt+0x2888>
   13ebc:	ldr	r3, [pc, #944]	; 14274 <sprintf@plt+0x2c74>
   13ec0:	add	r3, pc, r3
   13ec4:	add	r4, r3, r4, lsl #2
   13ec8:	mov	r0, r7
   13ecc:	ldr	r3, [r4, #4]
   13ed0:	add	r3, r3, #1
   13ed4:	str	r3, [r4, #4]
   13ed8:	bl	13bd4 <sprintf@plt+0x25d4>
   13edc:	mov	r0, #1
   13ee0:	add	sp, sp, #1552	; 0x610
   13ee4:	add	sp, sp, #12
   13ee8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13eec:	ldrh	r2, [r4, #-6]
   13ef0:	cmp	r2, r7
   13ef4:	bne	13e08 <sprintf@plt+0x2808>
   13ef8:	mov	r2, #16
   13efc:	ldr	r1, [sp, #24]
   13f00:	mov	r0, r4
   13f04:	bl	11294 <memcmp@plt>
   13f08:	cmp	r0, #0
   13f0c:	beq	13e50 <sprintf@plt+0x2850>
   13f10:	ldr	r1, [pc, #864]	; 14278 <sprintf@plt+0x2c78>
   13f14:	mov	r2, #16
   13f18:	mov	r0, r4
   13f1c:	ldr	r1, [r9, r1]
   13f20:	bl	11294 <memcmp@plt>
   13f24:	cmp	r0, #0
   13f28:	beq	13e50 <sprintf@plt+0x2850>
   13f2c:	add	sl, sl, #1
   13f30:	cmp	sl, r5
   13f34:	add	r4, r4, #128	; 0x80
   13f38:	bne	13e18 <sprintf@plt+0x2818>
   13f3c:	ldr	r7, [sp, #28]
   13f40:	mov	r4, #0
   13f44:	ldr	r3, [r7, #288]	; 0x120
   13f48:	cmp	r3, r4
   13f4c:	beq	13f68 <sprintf@plt+0x2968>
   13f50:	ldr	r3, [pc, #804]	; 1427c <sprintf@plt+0x2c7c>
   13f54:	add	r3, pc, r3
   13f58:	add	r3, r3, r4, lsl #2
   13f5c:	ldr	r2, [r3, #4]
   13f60:	add	r2, r2, #3
   13f64:	str	r2, [r3, #4]
   13f68:	ldr	r3, [sp, #16]
   13f6c:	cmp	r3, #1
   13f70:	bne	13edc <sprintf@plt+0x28dc>
   13f74:	mov	r2, #256	; 0x100
   13f78:	add	fp, r8, fp
   13f7c:	add	r5, sp, #168	; 0xa8
   13f80:	str	r2, [sp]
   13f84:	mov	r1, fp
   13f88:	mov	r3, r5
   13f8c:	ldr	r2, [sp, #12]
   13f90:	mov	r0, r8
   13f94:	bl	145e0 <sprintf@plt+0x2fe0>
   13f98:	cmp	r0, #0
   13f9c:	ble	13edc <sprintf@plt+0x28dc>
   13fa0:	add	r1, r7, #21
   13fa4:	mov	r0, r5
   13fa8:	bl	113f0 <rb_strcasecmp@plt>
   13fac:	cmp	r0, #0
   13fb0:	bne	13edc <sprintf@plt+0x28dc>
   13fb4:	ldrb	r3, [sp, #527]	; 0x20f
   13fb8:	ands	r3, r3, #15
   13fbc:	beq	13e5c <sprintf@plt+0x285c>
   13fc0:	sub	r2, r3, #4
   13fc4:	cmp	r3, #2
   13fc8:	cmpne	r2, #1
   13fcc:	bls	14034 <sprintf@plt+0x2a34>
   13fd0:	cmp	r3, #3
   13fd4:	bne	13ffc <sprintf@plt+0x29fc>
   13fd8:	ldr	r3, [pc, #672]	; 14280 <sprintf@plt+0x2c80>
   13fdc:	add	r3, pc, r3
   13fe0:	add	r4, r3, r4, lsl #2
   13fe4:	ldr	r3, [r4, #4]
   13fe8:	add	r2, r3, #3
   13fec:	cmp	r3, #0
   13ff0:	movlt	r3, r2
   13ff4:	asr	r3, r3, #2
   13ff8:	str	r3, [r4, #4]
   13ffc:	ldr	r3, [r7, #424]	; 0x1a8
   14000:	mov	r1, #0
   14004:	ldm	r3, {r0, r2}
   14008:	blx	r2
   1400c:	mov	r0, r7
   14010:	bl	1352c <sprintf@plt+0x1f2c>
   14014:	mov	r0, #1
   14018:	add	sp, sp, #1552	; 0x610
   1401c:	add	sp, sp, #12
   14020:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14024:	mov	r0, #0
   14028:	add	sp, sp, #1552	; 0x610
   1402c:	add	sp, sp, #12
   14030:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14034:	ldr	r3, [pc, #584]	; 14284 <sprintf@plt+0x2c84>
   14038:	add	r3, pc, r3
   1403c:	b	13ec4 <sprintf@plt+0x28c4>
   14040:	ldrh	r3, [r8, #6]
   14044:	cmp	r3, #0
   14048:	cmpne	fp, r6
   1404c:	bls	140fc <sprintf@plt+0x2afc>
   14050:	ldr	r2, [sp, #12]
   14054:	ldr	r9, [pc, #556]	; 14288 <sprintf@plt+0x2c88>
   14058:	sub	r8, r2, #12
   1405c:	mov	sl, #0
   14060:	sub	ip, r3, #1
   14064:	str	r9, [sp]
   14068:	mov	r3, r5
   1406c:	mov	r2, r6
   14070:	mov	r1, fp
   14074:	mov	r0, r8
   14078:	strh	ip, [r8, #6]
   1407c:	bl	145e0 <sprintf@plt+0x2fe0>
   14080:	cmp	r0, #0
   14084:	ble	13ebc <sprintf@plt+0x28bc>
   14088:	add	r6, r6, r0
   1408c:	add	r2, r6, #10
   14090:	cmp	fp, r2
   14094:	strb	sl, [sp, #423]	; 0x1a7
   14098:	bls	140fc <sprintf@plt+0x2afc>
   1409c:	mov	r0, r6
   140a0:	str	r2, [sp, #16]
   140a4:	bl	14c78 <sprintf@plt+0x3678>
   140a8:	str	r0, [sp, #12]
   140ac:	add	r0, r6, #2
   140b0:	bl	14c78 <sprintf@plt+0x3678>
   140b4:	add	r0, r6, #4
   140b8:	bl	14c88 <sprintf@plt+0x3688>
   140bc:	str	r0, [r7, #16]
   140c0:	add	r0, r6, #8
   140c4:	bl	14c78 <sprintf@plt+0x3678>
   140c8:	ldr	r3, [sp, #12]
   140cc:	ldr	r2, [sp, #16]
   140d0:	cmp	r3, #12
   140d4:	beq	141e0 <sprintf@plt+0x2be0>
   140d8:	cmp	r3, #28
   140dc:	beq	141a0 <sprintf@plt+0x2ba0>
   140e0:	cmp	r3, #1
   140e4:	beq	14104 <sprintf@plt+0x2b04>
   140e8:	ldrh	r3, [r8, #6]
   140ec:	add	r6, r2, r0
   140f0:	cmp	r3, #0
   140f4:	cmpne	fp, r6
   140f8:	bhi	14060 <sprintf@plt+0x2a60>
   140fc:	ldrb	r3, [r7, #20]
   14100:	b	1421c <sprintf@plt+0x2c1c>
   14104:	ldrb	r3, [r7, #20]
   14108:	cmp	r0, #4
   1410c:	cmpeq	r3, #1
   14110:	bne	13ebc <sprintf@plt+0x28bc>
   14114:	add	r3, r7, #292	; 0x124
   14118:	mov	r2, #2
   1411c:	strh	r2, [r3]
   14120:	ldr	r3, [r6, #10]
   14124:	str	r3, [r7, #296]	; 0x128
   14128:	mov	r1, #132	; 0x84
   1412c:	mov	r0, #1
   14130:	bl	1133c <calloc@plt>
   14134:	subs	r5, r0, #0
   14138:	beq	1425c <sprintf@plt+0x2c5c>
   1413c:	ldr	r3, [r7, #420]	; 0x1a4
   14140:	mov	r0, r5
   14144:	mov	r2, #128	; 0x80
   14148:	str	r3, [r0], #4
   1414c:	add	r1, r7, #292	; 0x124
   14150:	bl	11444 <memcpy@plt>
   14154:	ldr	r3, [r7, #424]	; 0x1a8
   14158:	mov	r1, r5
   1415c:	ldm	r3, {r0, r2}
   14160:	blx	r2
   14164:	mov	r0, r5
   14168:	bl	113cc <free@plt>
   1416c:	mov	r0, r7
   14170:	bl	1352c <sprintf@plt+0x1f2c>
   14174:	ldr	r3, [pc, #272]	; 1428c <sprintf@plt+0x2c8c>
   14178:	mov	r0, #1
   1417c:	add	r3, pc, r3
   14180:	add	r4, r3, r4, lsl #2
   14184:	ldr	r3, [r4, #4]
   14188:	add	r2, r3, #3
   1418c:	cmp	r3, #0
   14190:	movlt	r3, r2
   14194:	asr	r3, r3, #2
   14198:	str	r3, [r4, #4]
   1419c:	b	13ee0 <sprintf@plt+0x28e0>
   141a0:	ldrb	r3, [r7, #20]
   141a4:	cmp	r0, #16
   141a8:	cmpeq	r3, #28
   141ac:	bne	13ebc <sprintf@plt+0x28bc>
   141b0:	add	r3, r7, #292	; 0x124
   141b4:	mov	r1, #10
   141b8:	strh	r1, [r3]
   141bc:	ldr	ip, [r2]
   141c0:	ldr	r0, [r2, #4]
   141c4:	ldr	r1, [r2, #8]
   141c8:	ldr	r2, [r2, #12]
   141cc:	str	ip, [r7, #300]	; 0x12c
   141d0:	str	r0, [r7, #304]	; 0x130
   141d4:	str	r1, [r7, #308]	; 0x134
   141d8:	str	r2, [r7, #312]	; 0x138
   141dc:	b	14128 <sprintf@plt+0x2b28>
   141e0:	ldrb	r3, [r7, #20]
   141e4:	cmp	r3, #12
   141e8:	bne	13ebc <sprintf@plt+0x28bc>
   141ec:	str	r9, [sp]
   141f0:	mov	r1, fp
   141f4:	mov	r0, r8
   141f8:	mov	r3, r5
   141fc:	bl	145e0 <sprintf@plt+0x2fe0>
   14200:	cmp	r0, #0
   14204:	ble	13ebc <sprintf@plt+0x28bc>
   14208:	mov	r1, r5
   1420c:	mov	r2, #256	; 0x100
   14210:	ldr	r0, [r7, #420]	; 0x1a4
   14214:	bl	113a8 <rb_strlcpy@plt>
   14218:	ldrb	r3, [r7, #20]
   1421c:	cmp	r3, #12
   14220:	bne	14128 <sprintf@plt+0x2b28>
   14224:	ldr	r1, [r7, #420]	; 0x1a4
   14228:	ldr	r3, [pc, #96]	; 14290 <sprintf@plt+0x2c90>
   1422c:	cmp	r1, #0
   14230:	add	r3, pc, r3
   14234:	beq	13ec4 <sprintf@plt+0x28c4>
   14238:	add	r3, r7, #292	; 0x124
   1423c:	mov	r2, #0
   14240:	ldrh	r3, [r3]
   14244:	ldr	r0, [r7, #424]	; 0x1a8
   14248:	cmp	r3, #10
   1424c:	moveq	r3, #28
   14250:	movne	r3, #1
   14254:	bl	136f8 <sprintf@plt+0x20f8>
   14258:	b	1416c <sprintf@plt+0x2b6c>
   1425c:	bl	114d4 <rb_outofmemory@plt>
   14260:	andeq	r0, r0, ip, lsl #8
   14264:	ldrdeq	r7, [r1], -r0
   14268:	muleq	r1, r0, r2
   1426c:	andeq	r0, r0, ip, ror #2
   14270:	andeq	r0, r0, r8, ror r1
   14274:	andeq	ip, r1, r4, lsl r1
   14278:	andeq	r0, r0, r4, ror r1
   1427c:	andeq	ip, r1, r0, lsl #1
   14280:	strdeq	fp, [r1], -r8
   14284:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   14288:	andeq	r0, r0, r3, ror #2
   1428c:	andeq	fp, r1, r8, asr lr
   14290:	andeq	fp, r1, r4, lsr #27
   14294:	push	{r4, lr}
   14298:	mov	r4, r0
   1429c:	mov	r0, r4
   142a0:	bl	13cd8 <sprintf@plt+0x26d8>
   142a4:	subs	r3, r0, #0
   142a8:	bne	1429c <sprintf@plt+0x2c9c>
   142ac:	ldr	r2, [pc, #16]	; 142c4 <sprintf@plt+0x2cc4>
   142b0:	mov	r0, r4
   142b4:	add	r2, pc, r2
   142b8:	mov	r1, #1
   142bc:	pop	{r4, lr}
   142c0:	b	112b8 <rb_setselect@plt>
   142c4:			; <UNDEFINED> instruction: 0xffffffd8
   142c8:	mov	r3, r1
   142cc:	mov	r2, #0
   142d0:	mov	r1, r0
   142d4:	mov	r0, r3
   142d8:	b	13b68 <sprintf@plt+0x2568>
   142dc:	push	{r4, r5, r6, r7, lr}
   142e0:	sub	sp, sp, #44	; 0x2c
   142e4:	ldr	r4, [pc, #160]	; 1438c <sprintf@plt+0x2d8c>
   142e8:	ldr	r3, [pc, #160]	; 14390 <sprintf@plt+0x2d90>
   142ec:	add	r4, pc, r4
   142f0:	ldr	r5, [r4, r3]
   142f4:	ldr	r3, [r5]
   142f8:	cmp	r3, #9
   142fc:	ble	14308 <sprintf@plt+0x2d08>
   14300:	add	sp, sp, #44	; 0x2c
   14304:	pop	{r4, r5, r6, r7, pc}
   14308:	add	r7, sp, #8
   1430c:	mov	r6, r0
   14310:	mov	r2, #32
   14314:	mov	r1, #0
   14318:	mov	r0, r7
   1431c:	bl	1136c <memset@plt>
   14320:	ldr	r1, [pc, #108]	; 14394 <sprintf@plt+0x2d94>
   14324:	mov	lr, #2
   14328:	mov	ip, #5
   1432c:	mov	r2, r7
   14330:	mov	r0, r6
   14334:	add	r3, sp, #4
   14338:	add	r1, pc, r1
   1433c:	str	lr, [sp, #16]
   14340:	str	ip, [sp, #8]
   14344:	bl	113fc <getaddrinfo@plt>
   14348:	cmp	r0, #0
   1434c:	bne	14300 <sprintf@plt+0x2d00>
   14350:	ldr	r6, [sp, #4]
   14354:	cmp	r6, #0
   14358:	beq	14300 <sprintf@plt+0x2d00>
   1435c:	ldr	r3, [pc, #52]	; 14398 <sprintf@plt+0x2d98>
   14360:	ldr	r7, [r5]
   14364:	ldr	r2, [r6, #16]
   14368:	ldr	r0, [r4, r3]
   1436c:	ldr	r1, [r6, #20]
   14370:	add	r0, r0, r7, lsl #7
   14374:	bl	11444 <memcpy@plt>
   14378:	add	r7, r7, #1
   1437c:	mov	r0, r6
   14380:	str	r7, [r5]
   14384:	bl	11378 <freeaddrinfo@plt>
   14388:	b	14300 <sprintf@plt+0x2d00>
   1438c:	andeq	r6, r1, ip, lsl #26
   14390:	andeq	r0, r0, ip, ror #2
   14394:	andeq	r5, r0, r4, ror #8
   14398:	andeq	r0, r0, r8, ror r1
   1439c:	ldrb	r3, [r0]
   143a0:	and	r2, r3, #192	; 0xc0
   143a4:	cmp	r2, #192	; 0xc0
   143a8:	beq	143e0 <sprintf@plt+0x2de0>
   143ac:	cmp	r2, #64	; 0x40
   143b0:	beq	143bc <sprintf@plt+0x2dbc>
   143b4:	mov	r0, r3
   143b8:	bx	lr
   143bc:	cmp	r3, #65	; 0x41
   143c0:	bne	143e0 <sprintf@plt+0x2de0>
   143c4:	ldrb	r3, [r0, #1]
   143c8:	cmp	r3, #0
   143cc:	addne	r3, r3, #7
   143d0:	asrne	r3, r3, #3
   143d4:	addne	r0, r3, #1
   143d8:	moveq	r0, #33	; 0x21
   143dc:	bx	lr
   143e0:	mvn	r0, #0
   143e4:	bx	lr
   143e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   143ec:	sub	sp, sp, #148	; 0x94
   143f0:	ldr	r9, [pc, #448]	; 145b8 <sprintf@plt+0x2fb8>
   143f4:	ldr	r3, [pc, #448]	; 145bc <sprintf@plt+0x2fbc>
   143f8:	add	r9, pc, r9
   143fc:	ldr	r1, [pc, #444]	; 145c0 <sprintf@plt+0x2fc0>
   14400:	ldr	r3, [r9, r3]
   14404:	ldr	r0, [pc, #440]	; 145c4 <sprintf@plt+0x2fc4>
   14408:	mov	r5, #0
   1440c:	add	r1, pc, r1
   14410:	add	r0, pc, r0
   14414:	str	r3, [sp, #8]
   14418:	str	r5, [r3]
   1441c:	bl	11360 <fopen@plt>
   14420:	subs	r6, r0, #0
   14424:	beq	14570 <sprintf@plt+0x2f70>
   14428:	ldr	r3, [pc, #408]	; 145c8 <sprintf@plt+0x2fc8>
   1442c:	ldr	r8, [pc, #408]	; 145cc <sprintf@plt+0x2fcc>
   14430:	add	r3, pc, r3
   14434:	str	r3, [sp]
   14438:	ldr	r3, [pc, #400]	; 145d0 <sprintf@plt+0x2fd0>
   1443c:	add	r4, sp, #16
   14440:	add	r3, pc, r3
   14444:	str	r3, [sp, #4]
   14448:	ldr	r3, [pc, #388]	; 145d4 <sprintf@plt+0x2fd4>
   1444c:	mov	r7, #128	; 0x80
   14450:	add	r8, pc, r8
   14454:	add	r3, pc, r3
   14458:	str	r3, [sp, #12]
   1445c:	mov	r2, r6
   14460:	mov	r1, r7
   14464:	mov	r0, r4
   14468:	bl	11300 <fgets@plt>
   1446c:	cmp	r0, #0
   14470:	beq	14568 <sprintf@plt+0x2f68>
   14474:	mov	r1, r8
   14478:	mov	r0, r4
   1447c:	bl	115d0 <strpbrk@plt>
   14480:	cmp	r0, #0
   14484:	strbne	r5, [r0]
   14488:	bl	114e0 <__ctype_b_loc@plt>
   1448c:	mov	r3, r4
   14490:	ldr	r0, [r0]
   14494:	ldrb	r2, [r3]
   14498:	mov	sl, r3
   1449c:	add	r3, r3, #1
   144a0:	lsl	r1, r2, #1
   144a4:	ldrh	r1, [r0, r1]
   144a8:	tst	r1, #8192	; 0x2000
   144ac:	bne	14494 <sprintf@plt+0x2e94>
   144b0:	cmp	r2, #0
   144b4:	beq	1445c <sprintf@plt+0x2e5c>
   144b8:	cmp	r2, #59	; 0x3b
   144bc:	cmpne	r2, #35	; 0x23
   144c0:	beq	1445c <sprintf@plt+0x2e5c>
   144c4:	mov	r3, sl
   144c8:	b	144d8 <sprintf@plt+0x2ed8>
   144cc:	cmp	r2, #0
   144d0:	mov	r3, r1
   144d4:	beq	1445c <sprintf@plt+0x2e5c>
   144d8:	ldrb	r2, [r3, #1]
   144dc:	add	r1, r3, #1
   144e0:	lsl	ip, r2, #1
   144e4:	ldrh	ip, [r0, ip]
   144e8:	tst	ip, #8192	; 0x2000
   144ec:	beq	144cc <sprintf@plt+0x2ecc>
   144f0:	cmp	r2, #0
   144f4:	beq	1445c <sprintf@plt+0x2e5c>
   144f8:	ldrb	r2, [r1, #1]
   144fc:	add	fp, r3, #2
   14500:	strb	r5, [r1]
   14504:	lsl	r3, r2, #1
   14508:	ldrh	r3, [r0, r3]
   1450c:	tst	r3, #8192	; 0x2000
   14510:	beq	14528 <sprintf@plt+0x2f28>
   14514:	ldrb	r3, [fp, #1]!
   14518:	lsl	r3, r3, #1
   1451c:	ldrh	r3, [r0, r3]
   14520:	tst	r3, #8192	; 0x2000
   14524:	bne	14514 <sprintf@plt+0x2f14>
   14528:	ldr	r1, [sp]
   1452c:	mov	r0, fp
   14530:	bl	115d0 <strpbrk@plt>
   14534:	ldr	r1, [sp, #4]
   14538:	cmp	r0, #0
   1453c:	strbne	r5, [r0]
   14540:	mov	r0, sl
   14544:	bl	113f0 <rb_strcasecmp@plt>
   14548:	cmp	r0, #0
   1454c:	bne	14598 <sprintf@plt+0x2f98>
   14550:	ldr	r3, [pc, #128]	; 145d8 <sprintf@plt+0x2fd8>
   14554:	mov	r1, fp
   14558:	mov	r2, #256	; 0x100
   1455c:	ldr	r0, [r9, r3]
   14560:	bl	113a8 <rb_strlcpy@plt>
   14564:	b	1445c <sprintf@plt+0x2e5c>
   14568:	mov	r0, r6
   1456c:	bl	112f4 <fclose@plt>
   14570:	ldr	r3, [sp, #8]
   14574:	ldr	r3, [r3]
   14578:	cmp	r3, #0
   1457c:	bne	1458c <sprintf@plt+0x2f8c>
   14580:	ldr	r0, [pc, #84]	; 145dc <sprintf@plt+0x2fdc>
   14584:	add	r0, pc, r0
   14588:	bl	142dc <sprintf@plt+0x2cdc>
   1458c:	mov	r0, #0
   14590:	add	sp, sp, #148	; 0x94
   14594:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14598:	mov	r0, sl
   1459c:	ldr	r1, [sp, #12]
   145a0:	bl	113f0 <rb_strcasecmp@plt>
   145a4:	cmp	r0, #0
   145a8:	bne	1445c <sprintf@plt+0x2e5c>
   145ac:	mov	r0, fp
   145b0:	bl	142dc <sprintf@plt+0x2cdc>
   145b4:	b	1445c <sprintf@plt+0x2e5c>
   145b8:	andeq	r6, r1, r0, lsl #24
   145bc:	andeq	r0, r0, ip, ror #2
   145c0:	muleq	r0, r8, r3
   145c4:	muleq	r0, r8, r3
   145c8:	muleq	r0, r0, r3
   145cc:	andeq	r5, r0, ip, ror #6
   145d0:	andeq	r5, r0, ip, asr r3
   145d4:	andeq	r5, r0, r0, ror r3
   145d8:	andeq	r0, r0, r0, ror r1
   145dc:	andeq	r5, r0, ip, asr #4
   145e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   145e4:	sub	sp, sp, #284	; 0x11c
   145e8:	cmp	r0, r2
   145ec:	cmpls	r2, r1
   145f0:	movcs	r6, #1
   145f4:	movcc	r6, #0
   145f8:	str	r3, [sp]
   145fc:	bcs	1465c <sprintf@plt+0x305c>
   14600:	add	r5, sp, #24
   14604:	add	sl, sp, #276	; 0x114
   14608:	mvn	r3, #0
   1460c:	mov	r7, r0
   14610:	mov	r8, r2
   14614:	mov	r9, r1
   14618:	mov	fp, r5
   1461c:	mov	r4, r2
   14620:	add	sl, sl, #3
   14624:	str	r3, [sp, #4]
   14628:	sub	r3, r1, r0
   1462c:	str	r3, [sp, #8]
   14630:	ldrb	r1, [r4]
   14634:	add	r2, r4, #1
   14638:	cmp	r1, #0
   1463c:	beq	1472c <sprintf@plt+0x312c>
   14640:	and	r3, r1, #192	; 0xc0
   14644:	cmp	r3, #64	; 0x40
   14648:	beq	146d8 <sprintf@plt+0x30d8>
   1464c:	cmp	r3, #192	; 0xc0
   14650:	beq	1467c <sprintf@plt+0x307c>
   14654:	cmp	r3, #0
   14658:	beq	146d8 <sprintf@plt+0x30d8>
   1465c:	bl	115f4 <__errno_location@plt>
   14660:	mov	r3, #90	; 0x5a
   14664:	str	r3, [r0]
   14668:	mvn	r3, #0
   1466c:	str	r3, [sp, #4]
   14670:	ldr	r0, [sp, #4]
   14674:	add	sp, sp, #284	; 0x11c
   14678:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1467c:	cmp	r9, r2
   14680:	bls	1465c <sprintf@plt+0x305c>
   14684:	ldr	r3, [sp, #4]
   14688:	cmp	r3, #0
   1468c:	sublt	r2, r2, r8
   14690:	addlt	r3, r2, #1
   14694:	strlt	r3, [sp, #4]
   14698:	ldrb	r3, [r4, #1]
   1469c:	lsl	r4, r1, #8
   146a0:	and	r4, r4, #16128	; 0x3f00
   146a4:	orr	r4, r4, r3
   146a8:	adds	r4, r7, r4
   146ac:	movcs	r3, #1
   146b0:	movcc	r3, #0
   146b4:	cmp	r9, r4
   146b8:	orrls	r3, r3, #1
   146bc:	cmp	r3, #0
   146c0:	bne	1465c <sprintf@plt+0x305c>
   146c4:	ldr	r3, [sp, #8]
   146c8:	add	r6, r6, #2
   146cc:	cmp	r6, r3
   146d0:	blt	14630 <sprintf@plt+0x3030>
   146d4:	b	1465c <sprintf@plt+0x305c>
   146d8:	mov	r0, r4
   146dc:	str	r2, [sp, #12]
   146e0:	bl	1439c <sprintf@plt+0x2d9c>
   146e4:	ldr	r2, [sp, #12]
   146e8:	subs	r3, r0, #0
   146ec:	blt	1465c <sprintf@plt+0x305c>
   146f0:	add	ip, r3, #1
   146f4:	add	r0, fp, ip
   146f8:	cmp	sl, r0
   146fc:	bls	1465c <sprintf@plt+0x305c>
   14700:	add	r4, r2, r3
   14704:	cmp	r9, r4
   14708:	bls	1465c <sprintf@plt+0x305c>
   1470c:	strb	r1, [fp]
   14710:	add	r0, fp, #1
   14714:	mov	r1, r2
   14718:	mov	r2, r3
   1471c:	add	r6, r6, ip
   14720:	add	fp, r0, r3
   14724:	bl	11444 <memcpy@plt>
   14728:	b	14630 <sprintf@plt+0x3030>
   1472c:	ldr	r3, [sp, #4]
   14730:	strb	r1, [fp]
   14734:	cmp	r3, #0
   14738:	blt	14b0c <sprintf@plt+0x350c>
   1473c:	ldr	r3, [sp]
   14740:	ldr	r2, [sp, #320]	; 0x140
   14744:	mov	r4, r3
   14748:	add	r6, r3, r2
   1474c:	ldr	r3, [pc, #1104]	; 14ba4 <sprintf@plt+0x35a4>
   14750:	ldr	r7, [pc, #1104]	; 14ba8 <sprintf@plt+0x35a8>
   14754:	add	r3, pc, r3
   14758:	str	r3, [sp, #8]
   1475c:	ldr	r3, [pc, #1096]	; 14bac <sprintf@plt+0x35ac>
   14760:	mov	r1, r5
   14764:	add	r3, pc, r3
   14768:	str	r3, [sp, #16]
   1476c:	ldr	r3, [pc, #1084]	; 14bb0 <sprintf@plt+0x35b0>
   14770:	add	r3, pc, r3
   14774:	str	r3, [sp, #20]
   14778:	ldr	r3, [pc, #1076]	; 14bb4 <sprintf@plt+0x35b4>
   1477c:	add	r3, pc, r3
   14780:	str	r3, [sp, #12]
   14784:	ldrb	r5, [r1]
   14788:	cmp	r5, #0
   1478c:	beq	14b20 <sprintf@plt+0x3520>
   14790:	and	r8, r5, #192	; 0xc0
   14794:	cmp	r8, #192	; 0xc0
   14798:	beq	1465c <sprintf@plt+0x305c>
   1479c:	ldr	r3, [sp]
   147a0:	cmp	r3, r4
   147a4:	beq	14a80 <sprintf@plt+0x3480>
   147a8:	cmp	r6, r4
   147ac:	bls	1465c <sprintf@plt+0x305c>
   147b0:	mov	r3, #46	; 0x2e
   147b4:	strb	r3, [r4]
   147b8:	add	r4, r4, #1
   147bc:	mov	r0, r1
   147c0:	bl	1439c <sprintf@plt+0x2d9c>
   147c4:	cmp	r0, #0
   147c8:	blt	1465c <sprintf@plt+0x305c>
   147cc:	add	r3, r4, r0
   147d0:	cmp	r6, r3
   147d4:	bls	1465c <sprintf@plt+0x305c>
   147d8:	cmp	r8, #64	; 0x40
   147dc:	beq	149b0 <sprintf@plt+0x33b0>
   147e0:	cmp	r0, #0
   147e4:	add	r5, r1, #1
   147e8:	beq	14928 <sprintf@plt+0x3328>
   147ec:	ldr	r9, [pc, #964]	; 14bb8 <sprintf@plt+0x35b8>
   147f0:	add	r0, r0, #1
   147f4:	add	r9, pc, r9
   147f8:	add	lr, r1, r0
   147fc:	mov	r8, #92	; 0x5c
   14800:	mov	fp, #100	; 0x64
   14804:	ldrb	r2, [r5], #1
   14808:	add	r0, r4, #1
   1480c:	mov	r1, r4
   14810:	sub	r3, r2, #34	; 0x22
   14814:	cmp	r3, #58	; 0x3a
   14818:	addls	pc, pc, r3, lsl #2
   1481c:	b	14930 <sprintf@plt+0x3330>
   14820:	b	1490c <sprintf@plt+0x330c>
   14824:	b	14930 <sprintf@plt+0x3330>
   14828:	b	1490c <sprintf@plt+0x330c>
   1482c:	b	14930 <sprintf@plt+0x3330>
   14830:	b	14930 <sprintf@plt+0x3330>
   14834:	b	14930 <sprintf@plt+0x3330>
   14838:	b	1490c <sprintf@plt+0x330c>
   1483c:	b	1490c <sprintf@plt+0x330c>
   14840:	b	14930 <sprintf@plt+0x3330>
   14844:	b	14930 <sprintf@plt+0x3330>
   14848:	b	14930 <sprintf@plt+0x3330>
   1484c:	b	14930 <sprintf@plt+0x3330>
   14850:	b	1490c <sprintf@plt+0x330c>
   14854:	b	14930 <sprintf@plt+0x3330>
   14858:	b	14930 <sprintf@plt+0x3330>
   1485c:	b	14930 <sprintf@plt+0x3330>
   14860:	b	14930 <sprintf@plt+0x3330>
   14864:	b	14930 <sprintf@plt+0x3330>
   14868:	b	14930 <sprintf@plt+0x3330>
   1486c:	b	14930 <sprintf@plt+0x3330>
   14870:	b	14930 <sprintf@plt+0x3330>
   14874:	b	14930 <sprintf@plt+0x3330>
   14878:	b	14930 <sprintf@plt+0x3330>
   1487c:	b	14930 <sprintf@plt+0x3330>
   14880:	b	14930 <sprintf@plt+0x3330>
   14884:	b	1490c <sprintf@plt+0x330c>
   14888:	b	14930 <sprintf@plt+0x3330>
   1488c:	b	14930 <sprintf@plt+0x3330>
   14890:	b	14930 <sprintf@plt+0x3330>
   14894:	b	14930 <sprintf@plt+0x3330>
   14898:	b	1490c <sprintf@plt+0x330c>
   1489c:	b	14930 <sprintf@plt+0x3330>
   148a0:	b	14930 <sprintf@plt+0x3330>
   148a4:	b	14930 <sprintf@plt+0x3330>
   148a8:	b	14930 <sprintf@plt+0x3330>
   148ac:	b	14930 <sprintf@plt+0x3330>
   148b0:	b	14930 <sprintf@plt+0x3330>
   148b4:	b	14930 <sprintf@plt+0x3330>
   148b8:	b	14930 <sprintf@plt+0x3330>
   148bc:	b	14930 <sprintf@plt+0x3330>
   148c0:	b	14930 <sprintf@plt+0x3330>
   148c4:	b	14930 <sprintf@plt+0x3330>
   148c8:	b	14930 <sprintf@plt+0x3330>
   148cc:	b	14930 <sprintf@plt+0x3330>
   148d0:	b	14930 <sprintf@plt+0x3330>
   148d4:	b	14930 <sprintf@plt+0x3330>
   148d8:	b	14930 <sprintf@plt+0x3330>
   148dc:	b	14930 <sprintf@plt+0x3330>
   148e0:	b	14930 <sprintf@plt+0x3330>
   148e4:	b	14930 <sprintf@plt+0x3330>
   148e8:	b	14930 <sprintf@plt+0x3330>
   148ec:	b	14930 <sprintf@plt+0x3330>
   148f0:	b	14930 <sprintf@plt+0x3330>
   148f4:	b	14930 <sprintf@plt+0x3330>
   148f8:	b	14930 <sprintf@plt+0x3330>
   148fc:	b	14930 <sprintf@plt+0x3330>
   14900:	b	14930 <sprintf@plt+0x3330>
   14904:	b	14930 <sprintf@plt+0x3330>
   14908:	b	1490c <sprintf@plt+0x330c>
   1490c:	cmp	r6, r0
   14910:	bls	1465c <sprintf@plt+0x305c>
   14914:	strb	r8, [r1], #2
   14918:	strb	r2, [r4, #1]
   1491c:	mov	r4, r1
   14920:	cmp	lr, r5
   14924:	bne	14804 <sprintf@plt+0x3204>
   14928:	mov	r1, r5
   1492c:	b	14784 <sprintf@plt+0x3184>
   14930:	ldr	r3, [pc, #644]	; 14bbc <sprintf@plt+0x35bc>
   14934:	add	sl, r4, #3
   14938:	umull	r3, r1, r3, r2
   1493c:	umull	r0, r3, r7, r2
   14940:	lsr	r1, r1, #5
   14944:	lsr	r3, r3, #3
   14948:	mul	r0, fp, r1
   1494c:	add	r3, r3, r3, lsl #2
   14950:	sub	r0, r2, r0
   14954:	sub	r3, r2, r3, lsl #1
   14958:	uxtb	r0, r0
   1495c:	uxtb	r3, r3
   14960:	umull	ip, r0, r7, r0
   14964:	sub	ip, r2, #33	; 0x21
   14968:	cmp	ip, #93	; 0x5d
   1496c:	bls	1499c <sprintf@plt+0x339c>
   14970:	cmp	r6, sl
   14974:	bls	1465c <sprintf@plt+0x305c>
   14978:	ldrb	r1, [r9, r1]
   1497c:	ldrb	r2, [r9, r0, lsr #3]
   14980:	ldrb	r3, [r9, r3]
   14984:	strb	r1, [r4, #1]
   14988:	strb	r2, [r4, #2]
   1498c:	strb	r3, [r4, #3]
   14990:	strb	r8, [r4]
   14994:	add	r4, r4, #4
   14998:	b	14920 <sprintf@plt+0x3320>
   1499c:	cmp	r6, r4
   149a0:	bls	1465c <sprintf@plt+0x305c>
   149a4:	strb	r2, [r4]
   149a8:	add	r4, r4, #1
   149ac:	b	14920 <sprintf@plt+0x3320>
   149b0:	cmp	r5, #65	; 0x41
   149b4:	bne	14b78 <sprintf@plt+0x3578>
   149b8:	ldrb	sl, [r1, #1]
   149bc:	cmp	sl, #0
   149c0:	bne	14a88 <sprintf@plt+0x3488>
   149c4:	add	r3, r4, #73	; 0x49
   149c8:	cmp	r6, r3
   149cc:	bls	1465c <sprintf@plt+0x305c>
   149d0:	ldr	r3, [pc, #488]	; 14bc0 <sprintf@plt+0x35c0>
   149d4:	mov	r8, r4
   149d8:	add	r3, pc, r3
   149dc:	add	r5, r1, #2
   149e0:	ldr	r0, [r3]
   149e4:	mov	sl, #256	; 0x100
   149e8:	str	r0, [r8], #3
   149ec:	mov	fp, r5
   149f0:	ldr	r5, [sp, #12]
   149f4:	mov	r9, sl
   149f8:	mov	r0, r8
   149fc:	ldrb	r2, [fp], #1
   14a00:	mov	r1, r5
   14a04:	bl	11600 <sprintf@plt>
   14a08:	sub	r9, r9, #8
   14a0c:	cmp	r9, #7
   14a10:	add	r8, r8, r0
   14a14:	bgt	149f8 <sprintf@plt+0x33f8>
   14a18:	cmp	r9, #4
   14a1c:	mov	r5, fp
   14a20:	bgt	14ae4 <sprintf@plt+0x34e4>
   14a24:	cmp	r9, #0
   14a28:	beq	14a54 <sprintf@plt+0x3454>
   14a2c:	ldrb	r2, [r5]
   14a30:	rsb	r9, r9, #4
   14a34:	mov	r3, #15
   14a38:	mov	r0, r8
   14a3c:	lsl	r3, r3, r9
   14a40:	ldr	r1, [sp, #16]
   14a44:	and	r2, r3, r2, lsr #4
   14a48:	bl	11600 <sprintf@plt>
   14a4c:	add	r5, r5, #1
   14a50:	add	r8, r8, r0
   14a54:	mov	r2, sl
   14a58:	ldr	r1, [sp, #8]
   14a5c:	mov	r0, r8
   14a60:	bl	11600 <sprintf@plt>
   14a64:	add	r0, r8, r0
   14a68:	sub	r4, r0, r4
   14a6c:	cmp	r4, #0
   14a70:	blt	1465c <sprintf@plt+0x305c>
   14a74:	mov	r4, r0
   14a78:	mov	r1, r5
   14a7c:	b	14784 <sprintf@plt+0x3184>
   14a80:	ldr	r4, [sp]
   14a84:	b	147bc <sprintf@plt+0x31bc>
   14a88:	add	r3, sl, #3
   14a8c:	cmp	sl, #99	; 0x63
   14a90:	asr	r3, r3, #2
   14a94:	movgt	r2, #9
   14a98:	bgt	14aa8 <sprintf@plt+0x34a8>
   14a9c:	cmp	sl, #9
   14aa0:	movgt	r2, #8
   14aa4:	movle	r2, #7
   14aa8:	add	r3, r3, r2
   14aac:	add	r3, r4, r3
   14ab0:	cmp	r6, r3
   14ab4:	bls	1465c <sprintf@plt+0x305c>
   14ab8:	ldr	r3, [pc, #260]	; 14bc4 <sprintf@plt+0x35c4>
   14abc:	mov	r8, r4
   14ac0:	add	r3, pc, r3
   14ac4:	cmp	sl, #7
   14ac8:	ldr	r0, [r3]
   14acc:	add	r5, r1, #2
   14ad0:	str	r0, [r8], #3
   14ad4:	bgt	149ec <sprintf@plt+0x33ec>
   14ad8:	cmp	sl, #4
   14adc:	mov	r9, sl
   14ae0:	ble	14a2c <sprintf@plt+0x342c>
   14ae4:	ldrb	r3, [r5]
   14ae8:	rsb	r9, r9, #8
   14aec:	mov	r2, #255	; 0xff
   14af0:	mov	r0, r8
   14af4:	ldr	r1, [sp, #20]
   14af8:	and	r2, r3, r2, lsl r9
   14afc:	bl	11600 <sprintf@plt>
   14b00:	add	r5, r5, #1
   14b04:	add	r8, r8, r0
   14b08:	b	14a54 <sprintf@plt+0x3454>
   14b0c:	sub	r3, r2, r8
   14b10:	cmn	r3, #1
   14b14:	str	r3, [sp, #4]
   14b18:	bne	1473c <sprintf@plt+0x313c>
   14b1c:	b	14668 <sprintf@plt+0x3068>
   14b20:	ldr	r3, [sp]
   14b24:	cmp	r3, r4
   14b28:	beq	14b88 <sprintf@plt+0x3588>
   14b2c:	cmp	r6, r4
   14b30:	bls	1465c <sprintf@plt+0x305c>
   14b34:	ldr	r3, [sp]
   14b38:	mov	r2, #0
   14b3c:	strb	r2, [r4], #1
   14b40:	sub	r4, r4, r3
   14b44:	cmn	r4, #1
   14b48:	beq	14668 <sprintf@plt+0x3068>
   14b4c:	ldr	r1, [sp, #4]
   14b50:	cmp	r1, r2
   14b54:	ble	14670 <sprintf@plt+0x3070>
   14b58:	ldrb	r3, [r3]
   14b5c:	cmp	r3, #46	; 0x2e
   14b60:	bne	14670 <sprintf@plt+0x3070>
   14b64:	ldr	r3, [sp]
   14b68:	ldr	r0, [sp, #4]
   14b6c:	strb	r2, [r3]
   14b70:	add	sp, sp, #284	; 0x11c
   14b74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14b78:	bl	115f4 <__errno_location@plt>
   14b7c:	mov	r3, #22
   14b80:	str	r3, [r0]
   14b84:	b	14668 <sprintf@plt+0x3068>
   14b88:	cmp	r6, r3
   14b8c:	bls	1465c <sprintf@plt+0x305c>
   14b90:	ldr	r2, [sp]
   14b94:	mov	r3, #46	; 0x2e
   14b98:	add	r4, r2, #1
   14b9c:	strb	r3, [r2]
   14ba0:	b	14b2c <sprintf@plt+0x352c>
   14ba4:	muleq	r0, r8, r0
   14ba8:	stclgt	12, cr12, [ip], {205}	; 0xcd
   14bac:	andeq	r5, r0, r4, lsl #1
   14bb0:	andeq	r5, r0, r0, ror r0
   14bb4:	andeq	r5, r0, r4, rrx
   14bb8:	muleq	r0, ip, lr
   14bbc:	mvnpl	r8, pc, lsl r5
   14bc0:	andeq	r4, r0, r4, lsl #28
   14bc4:	andeq	r4, r0, ip, lsl sp
   14bc8:	cmp	r1, r0
   14bcc:	push	{r4, r5, r6, lr}
   14bd0:	mov	r5, r0
   14bd4:	bls	14c68 <sprintf@plt+0x3668>
   14bd8:	ldrb	r3, [r0]
   14bdc:	add	r4, r0, #1
   14be0:	cmp	r3, #0
   14be4:	beq	14c20 <sprintf@plt+0x3620>
   14be8:	and	r2, r3, #192	; 0xc0
   14bec:	cmp	r2, #64	; 0x40
   14bf0:	beq	14c34 <sprintf@plt+0x3634>
   14bf4:	cmp	r2, #192	; 0xc0
   14bf8:	beq	14c1c <sprintf@plt+0x361c>
   14bfc:	cmp	r2, #0
   14c00:	beq	14c60 <sprintf@plt+0x3660>
   14c04:	bl	115f4 <__errno_location@plt>
   14c08:	mvn	r4, #0
   14c0c:	mov	r3, #90	; 0x5a
   14c10:	str	r3, [r0]
   14c14:	mov	r0, r4
   14c18:	pop	{r4, r5, r6, pc}
   14c1c:	add	r4, r0, #2
   14c20:	cmp	r1, r4
   14c24:	subcs	r4, r4, r5
   14c28:	bcc	14c04 <sprintf@plt+0x3604>
   14c2c:	mov	r0, r4
   14c30:	pop	{r4, r5, r6, pc}
   14c34:	bl	1439c <sprintf@plt+0x2d9c>
   14c38:	cmp	r0, #0
   14c3c:	blt	14c04 <sprintf@plt+0x3604>
   14c40:	add	r0, r4, r0
   14c44:	cmp	r1, r0
   14c48:	bls	14c70 <sprintf@plt+0x3670>
   14c4c:	ldrb	r3, [r0]
   14c50:	add	r4, r0, #1
   14c54:	cmp	r3, #0
   14c58:	bne	14be8 <sprintf@plt+0x35e8>
   14c5c:	b	14c20 <sprintf@plt+0x3620>
   14c60:	add	r0, r4, r3
   14c64:	b	14c44 <sprintf@plt+0x3644>
   14c68:	mov	r4, r0
   14c6c:	b	14c20 <sprintf@plt+0x3620>
   14c70:	mov	r4, r0
   14c74:	b	14c20 <sprintf@plt+0x3620>
   14c78:	ldrb	r2, [r0]
   14c7c:	ldrb	r0, [r0, #1]
   14c80:	orr	r0, r0, r2, lsl #8
   14c84:	bx	lr
   14c88:	ldrb	r3, [r0, #1]
   14c8c:	ldrb	r1, [r0]
   14c90:	ldrb	r2, [r0, #3]
   14c94:	ldrb	r0, [r0, #2]
   14c98:	lsl	r3, r3, #16
   14c9c:	orr	r3, r3, r1, lsl #24
   14ca0:	orr	r3, r3, r2
   14ca4:	orr	r0, r3, r0, lsl #8
   14ca8:	bx	lr
   14cac:	lsr	r3, r0, #8
   14cb0:	strb	r0, [r1, #1]
   14cb4:	strb	r3, [r1]
   14cb8:	bx	lr
   14cbc:	lsr	ip, r0, #24
   14cc0:	lsr	r2, r0, #16
   14cc4:	lsr	r3, r0, #8
   14cc8:	strb	r0, [r1, #3]
   14ccc:	strb	ip, [r1]
   14cd0:	strb	r2, [r1, #1]
   14cd4:	strb	r3, [r1, #2]
   14cd8:	bx	lr
   14cdc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14ce0:	sub	sp, sp, #404	; 0x194
   14ce4:	mov	r9, r0
   14ce8:	ldr	ip, [sp, #440]	; 0x1b8
   14cec:	str	r1, [sp, #12]
   14cf0:	cmp	r3, #0
   14cf4:	cmpne	ip, #11
   14cf8:	movle	r0, #1
   14cfc:	movgt	r0, #0
   14d00:	str	r2, [sp, #16]
   14d04:	ble	14e70 <sprintf@plt+0x3870>
   14d08:	mov	fp, r3
   14d0c:	str	r0, [r3]
   14d10:	ldrb	r3, [r3, #2]
   14d14:	ldrb	r2, [fp, #3]
   14d18:	subs	r1, ip, #16
   14d1c:	and	r3, r3, #135	; 0x87
   14d20:	orr	r3, r3, #1
   14d24:	bic	r2, r2, #15
   14d28:	str	r1, [sp, #8]
   14d2c:	str	r0, [fp, #4]
   14d30:	str	r0, [fp, #8]
   14d34:	strh	r0, [fp]
   14d38:	str	fp, [sp, #64]	; 0x40
   14d3c:	str	r0, [sp, #68]	; 0x44
   14d40:	strb	r3, [fp, #2]
   14d44:	strb	r2, [fp, #3]
   14d48:	bmi	14e70 <sprintf@plt+0x3870>
   14d4c:	ldrb	sl, [r9]
   14d50:	add	r3, sp, #145	; 0x91
   14d54:	str	r3, [sp, #56]	; 0x38
   14d58:	cmp	sl, #0
   14d5c:	add	r3, sp, #144	; 0x90
   14d60:	str	r3, [sp, #4]
   14d64:	add	r4, r9, #1
   14d68:	beq	15484 <sprintf@plt+0x3e84>
   14d6c:	mov	r6, r3
   14d70:	add	r3, sp, #60	; 0x3c
   14d74:	str	r3, [sp, #20]
   14d78:	ldr	r3, [pc, #2044]	; 1557c <sprintf@plt+0x3f7c>
   14d7c:	ldr	r5, [pc, #2044]	; 15580 <sprintf@plt+0x3f80>
   14d80:	add	r7, sp, #396	; 0x18c
   14d84:	add	r3, pc, r3
   14d88:	add	r7, r7, #3
   14d8c:	add	r5, pc, r5
   14d90:	mov	r8, #100	; 0x64
   14d94:	str	r3, [sp, #24]
   14d98:	b	14dd0 <sprintf@plt+0x37d0>
   14d9c:	cmp	sl, #46	; 0x2e
   14da0:	movne	r9, r4
   14da4:	beq	14ec4 <sprintf@plt+0x38c4>
   14da8:	ldr	r3, [sp, #56]	; 0x38
   14dac:	cmp	r3, r7
   14db0:	bcs	14e64 <sprintf@plt+0x3864>
   14db4:	add	r2, r3, #1
   14db8:	str	r2, [sp, #56]	; 0x38
   14dbc:	strb	sl, [r3]
   14dc0:	ldrb	sl, [r9]
   14dc4:	add	r4, r9, #1
   14dc8:	cmp	sl, #0
   14dcc:	beq	14f34 <sprintf@plt+0x3934>
   14dd0:	cmp	sl, #92	; 0x5c
   14dd4:	bne	14d9c <sprintf@plt+0x379c>
   14dd8:	ldrb	sl, [r4]
   14ddc:	add	r9, r4, #1
   14de0:	cmp	sl, #0
   14de4:	beq	14f34 <sprintf@plt+0x3934>
   14de8:	cmp	sl, #91	; 0x5b
   14dec:	beq	14e7c <sprintf@plt+0x387c>
   14df0:	mov	r1, sl
   14df4:	mov	r0, r5
   14df8:	bl	11318 <strchr@plt>
   14dfc:	cmp	r0, #0
   14e00:	beq	14da8 <sprintf@plt+0x37a8>
   14e04:	ldrb	r1, [r4, #1]
   14e08:	sub	sl, r0, r5
   14e0c:	cmp	r1, #0
   14e10:	mul	sl, r8, sl
   14e14:	beq	14e64 <sprintf@plt+0x3864>
   14e18:	mov	r0, r5
   14e1c:	bl	11318 <strchr@plt>
   14e20:	cmp	r0, #0
   14e24:	beq	14e64 <sprintf@plt+0x3864>
   14e28:	sub	r0, r0, r5
   14e2c:	ldrb	r1, [r4, #2]
   14e30:	add	r0, r0, r0, lsl #2
   14e34:	add	r9, r4, #3
   14e38:	cmp	r1, #0
   14e3c:	add	sl, sl, r0, lsl #1
   14e40:	beq	14e64 <sprintf@plt+0x3864>
   14e44:	mov	r0, r5
   14e48:	bl	11318 <strchr@plt>
   14e4c:	cmp	r0, #0
   14e50:	beq	14e64 <sprintf@plt+0x3864>
   14e54:	sub	r0, r0, r5
   14e58:	add	sl, r0, sl
   14e5c:	cmp	sl, #255	; 0xff
   14e60:	ble	14da8 <sprintf@plt+0x37a8>
   14e64:	bl	115f4 <__errno_location@plt>
   14e68:	mov	r3, #90	; 0x5a
   14e6c:	str	r3, [r0]
   14e70:	mvn	r0, #0
   14e74:	add	sp, sp, #404	; 0x194
   14e78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14e7c:	mov	r1, #93	; 0x5d
   14e80:	mov	r0, r9
   14e84:	bl	11318 <strchr@plt>
   14e88:	cmp	r0, #0
   14e8c:	beq	14f24 <sprintf@plt+0x3924>
   14e90:	add	sl, r0, #2
   14e94:	sub	r9, sl, r9
   14e98:	cmp	r9, #1
   14e9c:	mov	r9, #0
   14ea0:	str	r9, [sp, #60]	; 0x3c
   14ea4:	ble	14eb4 <sprintf@plt+0x38b4>
   14ea8:	ldrb	r3, [r4, #1]
   14eac:	cmp	r3, #120	; 0x78
   14eb0:	beq	1529c <sprintf@plt+0x3c9c>
   14eb4:	mov	r4, #22
   14eb8:	bl	115f4 <__errno_location@plt>
   14ebc:	str	r4, [r0]
   14ec0:	b	14e70 <sprintf@plt+0x3870>
   14ec4:	ldr	r3, [sp, #56]	; 0x38
   14ec8:	sub	r3, r3, r6
   14ecc:	sub	r3, r3, #1
   14ed0:	tst	r3, #192	; 0xc0
   14ed4:	bne	14e64 <sprintf@plt+0x3864>
   14ed8:	cmp	r6, r7
   14edc:	bcs	14e64 <sprintf@plt+0x3864>
   14ee0:	strb	r3, [r6]
   14ee4:	ldrb	r2, [r9, #1]
   14ee8:	cmp	r2, #0
   14eec:	beq	15460 <sprintf@plt+0x3e60>
   14ef0:	cmp	r3, #0
   14ef4:	cmpne	r2, #46	; 0x2e
   14ef8:	beq	14e64 <sprintf@plt+0x3864>
   14efc:	ldrb	sl, [r4]
   14f00:	ldr	r6, [sp, #56]	; 0x38
   14f04:	add	r3, r4, #1
   14f08:	add	r2, r6, #1
   14f0c:	cmp	sl, #0
   14f10:	str	r2, [sp, #56]	; 0x38
   14f14:	beq	14f38 <sprintf@plt+0x3938>
   14f18:	mov	r9, r4
   14f1c:	mov	r4, r3
   14f20:	b	14dd0 <sprintf@plt+0x37d0>
   14f24:	bl	115f4 <__errno_location@plt>
   14f28:	mov	r3, #22
   14f2c:	str	r3, [r0]
   14f30:	b	14e70 <sprintf@plt+0x3870>
   14f34:	ldr	r2, [sp, #56]	; 0x38
   14f38:	sub	r2, r2, r6
   14f3c:	sub	r2, r2, #1
   14f40:	ands	r1, r2, #192	; 0xc0
   14f44:	bne	14e64 <sprintf@plt+0x3864>
   14f48:	add	r3, sp, #396	; 0x18c
   14f4c:	add	r3, r3, #3
   14f50:	cmp	r6, r3
   14f54:	bcs	14e64 <sprintf@plt+0x3864>
   14f58:	cmp	r2, #0
   14f5c:	strb	r2, [r6]
   14f60:	beq	14f7c <sprintf@plt+0x397c>
   14f64:	ldr	r2, [sp, #56]	; 0x38
   14f68:	cmp	r2, r3
   14f6c:	bcs	14e64 <sprintf@plt+0x3864>
   14f70:	add	r3, r2, #1
   14f74:	str	r3, [sp, #56]	; 0x38
   14f78:	strb	r1, [r2]
   14f7c:	ldr	r3, [sp, #56]	; 0x38
   14f80:	ldr	r2, [sp, #4]
   14f84:	sub	r3, r3, r2
   14f88:	cmp	r3, #255	; 0xff
   14f8c:	bgt	14e64 <sprintf@plt+0x3864>
   14f90:	ldr	sl, [sp, #64]	; 0x40
   14f94:	cmp	sl, #0
   14f98:	moveq	r4, sl
   14f9c:	beq	14fbc <sprintf@plt+0x39bc>
   14fa0:	ldr	r3, [sp, #68]	; 0x44
   14fa4:	add	r4, sp, #68	; 0x44
   14fa8:	cmp	r3, #0
   14fac:	beq	14fbc <sprintf@plt+0x39bc>
   14fb0:	ldr	r3, [r4, #4]!
   14fb4:	cmp	r3, #0
   14fb8:	bne	14fb0 <sprintf@plt+0x39b0>
   14fbc:	mov	r6, #0
   14fc0:	ldr	r5, [sp, #4]
   14fc4:	b	14ff0 <sprintf@plt+0x39f0>
   14fc8:	bl	1439c <sprintf@plt+0x2d9c>
   14fcc:	cmp	r0, #0
   14fd0:	add	r0, r0, #1
   14fd4:	add	r6, r6, r0
   14fd8:	blt	14f24 <sprintf@plt+0x3924>
   14fdc:	cmp	r6, #255	; 0xff
   14fe0:	bgt	14e64 <sprintf@plt+0x3864>
   14fe4:	cmp	r1, #0
   14fe8:	add	r5, r5, r0
   14fec:	beq	15008 <sprintf@plt+0x3a08>
   14ff0:	ldrb	r1, [r5]
   14ff4:	mov	r0, r5
   14ff8:	and	r3, r1, #192	; 0xc0
   14ffc:	cmp	r3, #192	; 0xc0
   15000:	bne	14fc8 <sprintf@plt+0x39c8>
   15004:	b	14e64 <sprintf@plt+0x3864>
   15008:	ldr	r2, [sp, #8]
   1500c:	add	r3, fp, #12
   15010:	add	r2, r3, r2
   15014:	str	r3, [sp, #20]
   15018:	mov	r7, r3
   1501c:	adds	r3, sl, #0
   15020:	movne	r3, #1
   15024:	ldr	r5, [sp, #4]
   15028:	str	r3, [sp, #4]
   1502c:	mov	r3, #1
   15030:	str	r3, [sp, #44]	; 0x2c
   15034:	add	r3, sp, #68	; 0x44
   15038:	str	r3, [sp, #32]
   1503c:	add	r3, sp, #140	; 0x8c
   15040:	str	r1, [sp, #48]	; 0x30
   15044:	str	r2, [sp, #8]
   15048:	str	r4, [sp, #28]
   1504c:	str	r3, [sp, #36]	; 0x24
   15050:	str	r4, [sp, #24]
   15054:	str	fp, [sp, #52]	; 0x34
   15058:	b	150a8 <sprintf@plt+0x3aa8>
   1505c:	and	r4, r4, #192	; 0xc0
   15060:	cmp	r4, #192	; 0xc0
   15064:	beq	14e64 <sprintf@plt+0x3864>
   15068:	mov	r0, r5
   1506c:	bl	1439c <sprintf@plt+0x2d9c>
   15070:	ldr	r3, [sp, #8]
   15074:	add	r4, r0, #1
   15078:	add	r6, r7, r4
   1507c:	cmp	r3, r6
   15080:	mov	r8, r0
   15084:	bls	14e64 <sprintf@plt+0x3864>
   15088:	mov	r0, r7
   1508c:	mov	r1, r5
   15090:	mov	r2, r4
   15094:	bl	11444 <memcpy@plt>
   15098:	cmp	r8, #0
   1509c:	mov	r7, r6
   150a0:	add	r5, r5, r4
   150a4:	beq	15368 <sprintf@plt+0x3d68>
   150a8:	ldrb	r4, [r5]
   150ac:	ldr	r3, [sp, #4]
   150b0:	cmp	r4, #0
   150b4:	moveq	r3, #0
   150b8:	andne	r3, r3, #1
   150bc:	cmp	r3, #0
   150c0:	beq	1505c <sprintf@plt+0x3a5c>
   150c4:	ldr	r2, [sp, #24]
   150c8:	ldr	r3, [sp, #32]
   150cc:	cmp	r2, r3
   150d0:	bls	15180 <sprintf@plt+0x3b80>
   150d4:	mov	fp, r3
   150d8:	ldr	r8, [fp], #4
   150dc:	ldrb	r6, [r8]
   150e0:	cmp	r6, #0
   150e4:	beq	15174 <sprintf@plt+0x3b74>
   150e8:	tst	r6, #192	; 0xc0
   150ec:	bne	15174 <sprintf@plt+0x3b74>
   150f0:	ldr	r3, [pc, #1164]	; 15584 <sprintf@plt+0x3f84>
   150f4:	sub	r9, r8, sl
   150f8:	cmp	r9, r3
   150fc:	strle	fp, [sp, #40]	; 0x28
   15100:	bgt	15174 <sprintf@plt+0x3b74>
   15104:	mov	r2, r6
   15108:	cmp	r2, #0
   1510c:	mov	r1, r8
   15110:	mov	fp, r5
   15114:	beq	15148 <sprintf@plt+0x3b48>
   15118:	ands	r3, r2, #192	; 0xc0
   1511c:	beq	151ec <sprintf@plt+0x3bec>
   15120:	cmp	r3, #192	; 0xc0
   15124:	bne	15190 <sprintf@plt+0x3b90>
   15128:	ldrb	r3, [r1, #1]
   1512c:	lsl	r1, r2, #8
   15130:	and	r1, r1, #16128	; 0x3f00
   15134:	orr	r1, r1, r3
   15138:	add	r1, sl, r1
   1513c:	ldrb	r2, [r1]
   15140:	cmp	r2, #0
   15144:	bne	15118 <sprintf@plt+0x3b18>
   15148:	add	r6, r6, #1
   1514c:	ldrb	r6, [r8, r6]!
   15150:	cmp	r6, #0
   15154:	beq	15170 <sprintf@plt+0x3b70>
   15158:	tst	r6, #192	; 0xc0
   1515c:	bne	15170 <sprintf@plt+0x3b70>
   15160:	ldr	r3, [pc, #1052]	; 15584 <sprintf@plt+0x3f84>
   15164:	sub	r9, r8, sl
   15168:	cmp	r9, r3
   1516c:	ble	15104 <sprintf@plt+0x3b04>
   15170:	ldr	fp, [sp, #40]	; 0x28
   15174:	ldr	r3, [sp, #24]
   15178:	cmp	r3, fp
   1517c:	bhi	150d8 <sprintf@plt+0x3ad8>
   15180:	bl	115f4 <__errno_location@plt>
   15184:	mov	r3, #2
   15188:	str	r3, [r0]
   1518c:	b	1519c <sprintf@plt+0x3b9c>
   15190:	bl	115f4 <__errno_location@plt>
   15194:	mov	r3, #90	; 0x5a
   15198:	str	r3, [r0]
   1519c:	ldr	r2, [sp, #28]
   151a0:	ldr	r1, [sp, #36]	; 0x24
   151a4:	cmp	r2, r1
   151a8:	bcs	1505c <sprintf@plt+0x3a5c>
   151ac:	ldr	r1, [pc, #976]	; 15584 <sprintf@plt+0x3f84>
   151b0:	sub	r3, r7, sl
   151b4:	cmp	r3, r1
   151b8:	bgt	1505c <sprintf@plt+0x3a5c>
   151bc:	ldr	r3, [sp, #44]	; 0x2c
   151c0:	cmp	r3, #0
   151c4:	beq	1505c <sprintf@plt+0x3a5c>
   151c8:	mov	r3, r2
   151cc:	str	r7, [r2]
   151d0:	ldr	r2, [sp, #48]	; 0x30
   151d4:	add	r3, r3, #4
   151d8:	str	r2, [r3]
   151dc:	mov	r2, #0
   151e0:	str	r2, [sp, #44]	; 0x2c
   151e4:	str	r3, [sp, #28]
   151e8:	b	1505c <sprintf@plt+0x3a5c>
   151ec:	mov	r0, r1
   151f0:	bl	1439c <sprintf@plt+0x2d9c>
   151f4:	ldrb	ip, [fp]
   151f8:	add	fp, fp, #1
   151fc:	cmp	r0, ip
   15200:	bne	15148 <sprintf@plt+0x3b48>
   15204:	cmp	ip, #0
   15208:	add	r1, r1, #1
   1520c:	bne	1521c <sprintf@plt+0x3c1c>
   15210:	b	15248 <sprintf@plt+0x3c48>
   15214:	subs	ip, ip, #1
   15218:	beq	15248 <sprintf@plt+0x3c48>
   1521c:	ldrb	r3, [fp], #1
   15220:	sub	r2, r3, #65	; 0x41
   15224:	cmp	r2, #25
   15228:	ldrb	r2, [r1], #1
   1522c:	addls	r3, r3, #32
   15230:	sub	r0, r2, #65	; 0x41
   15234:	cmp	r0, #25
   15238:	addls	r2, r2, #32
   1523c:	cmp	r2, r3
   15240:	beq	15214 <sprintf@plt+0x3c14>
   15244:	b	15148 <sprintf@plt+0x3b48>
   15248:	ldrb	r3, [fp]
   1524c:	cmp	r3, #0
   15250:	bne	1513c <sprintf@plt+0x3b3c>
   15254:	ldrb	r3, [r1]
   15258:	cmp	r3, #0
   1525c:	bne	15148 <sprintf@plt+0x3b48>
   15260:	cmp	r9, #0
   15264:	blt	1519c <sprintf@plt+0x3b9c>
   15268:	ldr	r1, [sp, #8]
   1526c:	add	r3, r7, #1
   15270:	cmp	r1, r3
   15274:	ldr	fp, [sp, #52]	; 0x34
   15278:	bls	14e64 <sprintf@plt+0x3864>
   1527c:	mvn	r3, #63	; 0x3f
   15280:	orr	r3, r3, r9, asr #8
   15284:	strb	r3, [r7]
   15288:	ldr	r3, [sp, #20]
   1528c:	add	r2, r7, #2
   15290:	strb	r9, [r7, #1]
   15294:	sub	r7, r2, r3
   15298:	b	15374 <sprintf@plt+0x3d74>
   1529c:	bl	114e0 <__ctype_b_loc@plt>
   152a0:	ldrb	r1, [r4, #2]
   152a4:	lsl	r3, r1, #1
   152a8:	ldr	ip, [r0]
   152ac:	ldrh	r3, [ip, r3]
   152b0:	tst	r3, #4096	; 0x1000
   152b4:	beq	14eb4 <sprintf@plt+0x38b4>
   152b8:	ldr	r3, [sp, #20]
   152bc:	add	r4, r4, #2
   152c0:	cmp	r7, r3
   152c4:	cmphi	sl, r4
   152c8:	bls	15560 <sprintf@plt+0x3f60>
   152cc:	mov	r0, r9
   152d0:	mov	r2, r9
   152d4:	str	r9, [sp, #32]
   152d8:	str	r9, [sp, #28]
   152dc:	cmp	r1, #47	; 0x2f
   152e0:	beq	15404 <sprintf@plt+0x3e04>
   152e4:	cmp	r1, #93	; 0x5d
   152e8:	bne	153bc <sprintf@plt+0x3dbc>
   152ec:	cmp	r2, #0
   152f0:	beq	15324 <sprintf@plt+0x3d24>
   152f4:	cmp	r0, #0
   152f8:	str	r3, [sp, #36]	; 0x24
   152fc:	beq	14eb4 <sprintf@plt+0x38b4>
   15300:	mov	r2, #10
   15304:	ldr	r1, [sp, #20]
   15308:	bl	11468 <strtol@plt>
   1530c:	ldr	r1, [sp, #60]	; 0x3c
   15310:	ldr	r3, [sp, #36]	; 0x24
   15314:	ldrb	r1, [r1]
   15318:	cmp	r1, #93	; 0x5d
   1531c:	mov	r2, r0
   15320:	bne	14eb4 <sprintf@plt+0x38b4>
   15324:	ldr	r1, [sp, #28]
   15328:	add	r4, r4, #1
   1532c:	cmp	r1, #0
   15330:	ldrne	r1, [sp, #32]
   15334:	lslne	r1, r1, #4
   15338:	strbne	r1, [r3]
   1533c:	addne	r3, r3, #1
   15340:	cmp	r3, r7
   15344:	movcc	r1, #0
   15348:	movcs	r1, #1
   1534c:	cmp	sl, r4
   15350:	movhi	sl, r1
   15354:	orrls	sl, r1, #1
   15358:	cmp	sl, #0
   1535c:	beq	1548c <sprintf@plt+0x3e8c>
   15360:	mov	r4, #90	; 0x5a
   15364:	b	14eb8 <sprintf@plt+0x38b8>
   15368:	ldr	r3, [sp, #20]
   1536c:	ldr	fp, [sp, #52]	; 0x34
   15370:	sub	r7, r6, r3
   15374:	cmp	r7, #0
   15378:	blt	14e70 <sprintf@plt+0x3870>
   1537c:	ldr	ip, [sp, #16]
   15380:	ldr	r0, [sp, #20]
   15384:	ldr	lr, [sp, #12]
   15388:	add	r3, r0, r7
   1538c:	lsr	r2, ip, #8
   15390:	strb	r2, [r0, r7]
   15394:	lsr	r1, lr, #8
   15398:	add	r0, r3, #4
   1539c:	mov	r2, #256	; 0x100
   153a0:	strb	ip, [r3, #1]
   153a4:	strb	lr, [r3, #3]
   153a8:	strb	r1, [r3, #2]
   153ac:	sub	r0, r0, fp
   153b0:	strh	r2, [fp, #4]
   153b4:	add	sp, sp, #404	; 0x194
   153b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   153bc:	lsl	lr, r1, #1
   153c0:	cmp	r2, #0
   153c4:	ldrh	lr, [ip, lr]
   153c8:	beq	1540c <sprintf@plt+0x3e0c>
   153cc:	tst	lr, #2048	; 0x800
   153d0:	beq	14eb4 <sprintf@plt+0x38b4>
   153d4:	cmp	r0, #0
   153d8:	beq	15528 <sprintf@plt+0x3f28>
   153dc:	add	r4, r4, #1
   153e0:	cmp	sl, r4
   153e4:	movls	r1, #0
   153e8:	movhi	r1, #1
   153ec:	cmp	r3, r7
   153f0:	movcs	r1, #0
   153f4:	cmp	r1, #0
   153f8:	beq	15538 <sprintf@plt+0x3f38>
   153fc:	ldrb	r1, [r4]
   15400:	b	152dc <sprintf@plt+0x3cdc>
   15404:	mov	r2, #1
   15408:	b	153dc <sprintf@plt+0x3ddc>
   1540c:	tst	lr, #4096	; 0x1000
   15410:	beq	14eb4 <sprintf@plt+0x38b4>
   15414:	ldr	lr, [sp, #24]
   15418:	add	r9, r9, #4
   1541c:	add	r1, lr, r1
   15420:	ldr	lr, [sp, #28]
   15424:	ldrb	r1, [r1, #12]
   15428:	add	lr, lr, #4
   1542c:	str	lr, [sp, #28]
   15430:	ldr	lr, [sp, #32]
   15434:	cmp	r9, #256	; 0x100
   15438:	add	r1, r1, lr, lsl #4
   1543c:	str	r1, [sp, #32]
   15440:	bgt	14eb4 <sprintf@plt+0x38b4>
   15444:	ldr	lr, [sp, #28]
   15448:	cmp	lr, #8
   1544c:	ldrbeq	r1, [sp, #32]
   15450:	streq	r2, [sp, #28]
   15454:	addeq	r3, r3, #1
   15458:	strbeq	r1, [r3, #-1]
   1545c:	b	153dc <sprintf@plt+0x3ddc>
   15460:	cmp	r3, #0
   15464:	beq	14f7c <sprintf@plt+0x397c>
   15468:	ldr	r3, [sp, #56]	; 0x38
   1546c:	cmp	r3, r7
   15470:	bcs	14e64 <sprintf@plt+0x3864>
   15474:	add	r1, r3, #1
   15478:	str	r1, [sp, #56]	; 0x38
   1547c:	strb	r2, [r3]
   15480:	b	14f7c <sprintf@plt+0x397c>
   15484:	strb	sl, [sp, #144]	; 0x90
   15488:	b	14f7c <sprintf@plt+0x397c>
   1548c:	cmp	r2, #0
   15490:	ble	15558 <sprintf@plt+0x3f58>
   15494:	add	r1, r2, #3
   15498:	bic	r1, r1, #3
   1549c:	cmp	r1, r9
   154a0:	bne	14eb4 <sprintf@plt+0x38b4>
   154a4:	sub	r1, r9, r2
   154a8:	ldr	r0, [sp, #32]
   154ac:	rsb	r1, r1, #8
   154b0:	lsl	r1, r0, r1
   154b4:	tst	r1, #255	; 0xff
   154b8:	bne	14eb4 <sprintf@plt+0x38b4>
   154bc:	cmp	r2, #256	; 0x100
   154c0:	moveq	r0, #0
   154c4:	beq	154cc <sprintf@plt+0x3ecc>
   154c8:	uxtb	r0, r2
   154cc:	mov	r1, #65	; 0x41
   154d0:	strb	r1, [r6]
   154d4:	ldr	r1, [sp, #56]	; 0x38
   154d8:	add	r2, r3, #1
   154dc:	add	r9, r4, #1
   154e0:	strb	r0, [r1]
   154e4:	ldrb	r1, [r4]
   154e8:	str	r2, [sp, #56]	; 0x38
   154ec:	cmp	r1, #0
   154f0:	beq	15514 <sprintf@plt+0x3f14>
   154f4:	cmp	r1, #46	; 0x2e
   154f8:	bne	14f24 <sprintf@plt+0x3924>
   154fc:	ldrb	sl, [r4, #1]
   15500:	mov	r6, r3
   15504:	add	r4, r4, #2
   15508:	cmp	sl, #0
   1550c:	bne	14dd0 <sprintf@plt+0x37d0>
   15510:	b	14f38 <sprintf@plt+0x3938>
   15514:	mov	r2, r3
   15518:	cmp	r2, r7
   1551c:	strbcc	r1, [r2]
   15520:	bcc	14f7c <sprintf@plt+0x397c>
   15524:	b	14e64 <sprintf@plt+0x3864>
   15528:	cmp	r1, #48	; 0x30
   1552c:	beq	14eb4 <sprintf@plt+0x38b4>
   15530:	mov	r0, r4
   15534:	b	153dc <sprintf@plt+0x3ddc>
   15538:	cmp	r3, r7
   1553c:	movcc	r2, #0
   15540:	movcs	r2, #1
   15544:	cmp	sl, r4
   15548:	movhi	sl, r2
   1554c:	orrls	sl, r2, #1
   15550:	cmp	sl, #0
   15554:	bne	15360 <sprintf@plt+0x3d60>
   15558:	mov	r2, r9
   1555c:	b	154bc <sprintf@plt+0x3ebc>
   15560:	ldr	r3, [sp, #20]
   15564:	cmp	sl, r4
   15568:	cmphi	r7, r3
   1556c:	movls	r2, #1
   15570:	movhi	r2, #0
   15574:	bls	15360 <sprintf@plt+0x3d60>
   15578:	b	154c8 <sprintf@plt+0x3ec8>
   1557c:	andeq	r4, r0, ip, lsl #18
   15580:	andeq	r4, r0, r4, lsl #18
   15584:	strdeq	r3, [r0], -pc	; <UNPREDICTABLE>
   15588:	ldr	r0, [r2]
   1558c:	push	{r4, lr}
   15590:	mov	r1, #0
   15594:	mov	r2, #10
   15598:	bl	11468 <strtol@plt>
   1559c:	cmp	r0, #0
   155a0:	blt	155b4 <sprintf@plt+0x3fb4>
   155a4:	ldr	r3, [pc, #36]	; 155d0 <sprintf@plt+0x3fd0>
   155a8:	add	r3, pc, r3
   155ac:	str	r0, [r3]
   155b0:	pop	{r4, pc}
   155b4:	ldr	r1, [pc, #24]	; 155d4 <sprintf@plt+0x3fd4>
   155b8:	mov	r2, r0
   155bc:	add	r1, pc, r1
   155c0:	mov	r0, #67	; 0x43
   155c4:	bl	12370 <sprintf@plt+0xd70>
   155c8:	mov	r0, #3
   155cc:	bl	115e8 <exit@plt>
   155d0:	strdeq	r6, [r1], -ip
   155d4:	andeq	r4, r0, r8, ror #4
   155d8:	ldr	r3, [pc, #76]	; 1562c <sprintf@plt+0x402c>
   155dc:	push	{r4, r5, r6, lr}
   155e0:	ldr	r4, [pc, r3]
   155e4:	cmp	r4, #0
   155e8:	beq	15620 <sprintf@plt+0x4020>
   155ec:	mov	r6, r0
   155f0:	b	15600 <sprintf@plt+0x4000>
   155f4:	ldr	r4, [r4, #8]
   155f8:	cmp	r4, #0
   155fc:	beq	15620 <sprintf@plt+0x4020>
   15600:	ldr	r5, [r4]
   15604:	mov	r1, r6
   15608:	mov	r0, r5
   1560c:	bl	11330 <strcasecmp@plt>
   15610:	cmp	r0, #0
   15614:	bne	155f4 <sprintf@plt+0x3ff4>
   15618:	mov	r0, r5
   1561c:	pop	{r4, r5, r6, pc}
   15620:	mov	r5, r4
   15624:	mov	r0, r5
   15628:	pop	{r4, r5, r6, pc}
   1562c:	andeq	sl, r1, r8, lsr sl
   15630:	push	{r4, r5, r6, lr}
   15634:	ldr	r5, [r2]
   15638:	mov	r0, r5
   1563c:	bl	155d8 <sprintf@plt+0x3fd8>
   15640:	subs	r4, r0, #0
   15644:	beq	156e0 <sprintf@plt+0x40e0>
   15648:	ldr	r3, [r4, #788]	; 0x314
   1564c:	cmp	r3, #0
   15650:	ble	15660 <sprintf@plt+0x4060>
   15654:	mov	r3, #1
   15658:	strb	r3, [r4, #784]	; 0x310
   1565c:	pop	{r4, r5, r6, pc}
   15660:	ldr	r3, [pc, #180]	; 1571c <sprintf@plt+0x411c>
   15664:	ldr	r0, [pc, r3]
   15668:	cmp	r0, #0
   1566c:	bne	15680 <sprintf@plt+0x4080>
   15670:	b	156d4 <sprintf@plt+0x40d4>
   15674:	ldr	r0, [r0, #8]
   15678:	cmp	r0, #0
   1567c:	beq	156d4 <sprintf@plt+0x40d4>
   15680:	ldr	r3, [r0]
   15684:	cmp	r4, r3
   15688:	bne	15674 <sprintf@plt+0x4074>
   1568c:	ldr	r3, [r0, #8]
   15690:	cmp	r3, #0
   15694:	beq	15708 <sprintf@plt+0x4108>
   15698:	ldr	r2, [r0, #4]
   1569c:	str	r2, [r3, #4]
   156a0:	ldr	r2, [r0, #4]
   156a4:	cmp	r2, #0
   156a8:	strne	r3, [r2, #8]
   156ac:	beq	156f8 <sprintf@plt+0x40f8>
   156b0:	ldr	r2, [pc, #104]	; 15720 <sprintf@plt+0x4120>
   156b4:	mov	r1, #0
   156b8:	add	r2, pc, r2
   156bc:	str	r1, [r0, #4]
   156c0:	ldr	r3, [r2, #8]
   156c4:	str	r1, [r0, #8]
   156c8:	sub	r3, r3, #1
   156cc:	str	r3, [r2, #8]
   156d0:	bl	11450 <rb_free_rb_dlink_node@plt>
   156d4:	mov	r0, r4
   156d8:	pop	{r4, r5, r6, lr}
   156dc:	b	113cc <free@plt>
   156e0:	ldr	r1, [pc, #60]	; 15724 <sprintf@plt+0x4124>
   156e4:	mov	r2, r5
   156e8:	add	r1, pc, r1
   156ec:	mov	r0, #87	; 0x57
   156f0:	pop	{r4, r5, r6, lr}
   156f4:	b	12370 <sprintf@plt+0xd70>
   156f8:	ldr	r2, [pc, #40]	; 15728 <sprintf@plt+0x4128>
   156fc:	add	r2, pc, r2
   15700:	str	r3, [r2]
   15704:	b	156b0 <sprintf@plt+0x40b0>
   15708:	ldr	r1, [pc, #28]	; 1572c <sprintf@plt+0x412c>
   1570c:	ldr	r2, [r0, #4]
   15710:	add	r1, pc, r1
   15714:	str	r2, [r1, #4]
   15718:	b	156a4 <sprintf@plt+0x40a4>
   1571c:			; <UNDEFINED> instruction: 0x0001a9b4
   15720:	andeq	sl, r1, r0, ror #18
   15724:	andeq	r4, r0, r4, ror r1
   15728:	andeq	sl, r1, ip, lsl r9
   1572c:	andeq	sl, r1, r8, lsl #18
   15730:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15734:	ldr	r3, [pc, #212]	; 15810 <sprintf@plt+0x4210>
   15738:	add	r3, pc, r3
   1573c:	ldr	r3, [r3]
   15740:	cmp	r3, #0
   15744:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15748:	ldr	r8, [pc, #196]	; 15814 <sprintf@plt+0x4214>
   1574c:	ldr	r7, [pc, #196]	; 15818 <sprintf@plt+0x4218>
   15750:	ldr	sl, [pc, #196]	; 1581c <sprintf@plt+0x421c>
   15754:	ldr	r9, [pc, #196]	; 15820 <sprintf@plt+0x4220>
   15758:	ldr	r4, [r3, #8]
   1575c:	add	r8, pc, r8
   15760:	add	r7, pc, r7
   15764:	add	sl, pc, sl
   15768:	add	r9, pc, r9
   1576c:	mov	r6, #0
   15770:	mov	fp, #1
   15774:	b	15788 <sprintf@plt+0x4188>
   15778:	cmp	r4, #0
   1577c:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15780:	mov	r3, r4
   15784:	ldr	r4, [r4, #8]
   15788:	ldr	r5, [r3]
   1578c:	ldr	r3, [r5, #788]	; 0x314
   15790:	cmp	r3, #0
   15794:	strbgt	fp, [r5, #784]	; 0x310
   15798:	bgt	15778 <sprintf@plt+0x4178>
   1579c:	ldr	r0, [r8]
   157a0:	cmp	r0, #0
   157a4:	bne	157b8 <sprintf@plt+0x41b8>
   157a8:	b	157fc <sprintf@plt+0x41fc>
   157ac:	ldr	r0, [r0, #8]
   157b0:	cmp	r0, #0
   157b4:	beq	157fc <sprintf@plt+0x41fc>
   157b8:	ldr	r3, [r0]
   157bc:	cmp	r5, r3
   157c0:	bne	157ac <sprintf@plt+0x41ac>
   157c4:	ldmib	r0, {r2, r3}
   157c8:	cmp	r3, #0
   157cc:	strne	r2, [r3, #4]
   157d0:	ldrne	r2, [r0, #4]
   157d4:	streq	r2, [r9, #4]
   157d8:	cmp	r2, #0
   157dc:	strne	r3, [r2, #8]
   157e0:	streq	r3, [sl]
   157e4:	ldr	r3, [r7, #8]
   157e8:	str	r6, [r0, #4]
   157ec:	str	r6, [r0, #8]
   157f0:	sub	r3, r3, #1
   157f4:	str	r3, [r7, #8]
   157f8:	bl	11450 <rb_free_rb_dlink_node@plt>
   157fc:	mov	r0, r5
   15800:	bl	113cc <free@plt>
   15804:	cmp	r4, #0
   15808:	bne	15780 <sprintf@plt+0x4180>
   1580c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15810:	andeq	sl, r1, r0, ror #17
   15814:			; <UNDEFINED> instruction: 0x0001a8bc
   15818:			; <UNDEFINED> instruction: 0x0001a8b8
   1581c:			; <UNDEFINED> instruction: 0x0001a8b4
   15820:			; <UNDEFINED> instruction: 0x0001a8b0
   15824:	b	15730 <sprintf@plt+0x4130>
   15828:	push	{r4, r5, r6, lr}
   1582c:	mov	r5, r0
   15830:	ldr	r0, [r0, #772]	; 0x304
   15834:	cmp	r0, #0
   15838:	beq	1588c <sprintf@plt+0x428c>
   1583c:	ldr	r4, [r0, #8]
   15840:	mov	r6, r4
   15844:	b	15854 <sprintf@plt+0x4254>
   15848:	ldr	r4, [r4, #8]
   1584c:	mov	r0, r6
   15850:	mov	r6, r4
   15854:	ldr	r3, [r0, #4]
   15858:	cmp	r4, #0
   1585c:	strne	r3, [r4, #4]
   15860:	ldrne	r3, [r0, #4]
   15864:	streq	r3, [r5, #776]	; 0x308
   15868:	cmp	r3, #0
   1586c:	strne	r4, [r3, #8]
   15870:	ldr	r3, [r5, #780]	; 0x30c
   15874:	streq	r4, [r5, #772]	; 0x304
   15878:	sub	r3, r3, #1
   1587c:	str	r3, [r5, #780]	; 0x30c
   15880:	bl	113cc <free@plt>
   15884:	cmp	r4, #0
   15888:	bne	15848 <sprintf@plt+0x4248>
   1588c:	ldr	r3, [pc, #164]	; 15938 <sprintf@plt+0x4338>
   15890:	ldr	r0, [pc, r3]
   15894:	cmp	r0, #0
   15898:	bne	158ac <sprintf@plt+0x42ac>
   1589c:	b	15900 <sprintf@plt+0x4300>
   158a0:	ldr	r0, [r0, #8]
   158a4:	cmp	r0, #0
   158a8:	beq	15900 <sprintf@plt+0x4300>
   158ac:	ldr	r3, [r0]
   158b0:	cmp	r5, r3
   158b4:	bne	158a0 <sprintf@plt+0x42a0>
   158b8:	ldr	r3, [r0, #8]
   158bc:	cmp	r3, #0
   158c0:	beq	1590c <sprintf@plt+0x430c>
   158c4:	ldr	r2, [r0, #4]
   158c8:	str	r2, [r3, #4]
   158cc:	ldr	r2, [r0, #4]
   158d0:	cmp	r2, #0
   158d4:	strne	r3, [r2, #8]
   158d8:	beq	15928 <sprintf@plt+0x4328>
   158dc:	ldr	r2, [pc, #88]	; 1593c <sprintf@plt+0x433c>
   158e0:	mov	r1, #0
   158e4:	add	r2, pc, r2
   158e8:	str	r1, [r0, #4]
   158ec:	ldr	r3, [r2, #8]
   158f0:	str	r1, [r0, #8]
   158f4:	sub	r3, r3, #1
   158f8:	str	r3, [r2, #8]
   158fc:	bl	11450 <rb_free_rb_dlink_node@plt>
   15900:	mov	r0, r5
   15904:	pop	{r4, r5, r6, lr}
   15908:	b	113cc <free@plt>
   1590c:	ldr	r1, [pc, #44]	; 15940 <sprintf@plt+0x4340>
   15910:	ldr	r2, [r0, #4]
   15914:	add	r1, pc, r1
   15918:	cmp	r2, #0
   1591c:	str	r2, [r1, #4]
   15920:	strne	r3, [r2, #8]
   15924:	bne	158dc <sprintf@plt+0x42dc>
   15928:	ldr	r2, [pc, #20]	; 15944 <sprintf@plt+0x4344>
   1592c:	add	r2, pc, r2
   15930:	str	r3, [r2]
   15934:	b	158dc <sprintf@plt+0x42dc>
   15938:	andeq	sl, r1, r8, lsl #15
   1593c:	andeq	sl, r1, r4, lsr r7
   15940:	andeq	sl, r1, r4, lsl #14
   15944:	andeq	sl, r1, ip, ror #13
   15948:	ldr	r2, [pc, #824]	; 15c88 <sprintf@plt+0x4688>
   1594c:	ldr	ip, [pc, #824]	; 15c8c <sprintf@plt+0x468c>
   15950:	add	r2, pc, r2
   15954:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15958:	sub	sp, sp, #12
   1595c:	ldr	ip, [r2, ip]
   15960:	ldr	r6, [r3, #4]
   15964:	str	ip, [sp, #4]
   15968:	ldr	sl, [ip, #12]
   1596c:	ldr	r2, [r6, #464]	; 0x1d0
   15970:	ldr	r7, [r3]
   15974:	add	r2, r2, sl, lsl #4
   15978:	ldr	r5, [r2, #8]
   1597c:	cmp	r5, #0
   15980:	beq	15a0c <sprintf@plt+0x440c>
   15984:	cmp	r0, #0
   15988:	moveq	r1, #0
   1598c:	andne	r1, r1, #1
   15990:	cmp	r1, #0
   15994:	mov	r8, r0
   15998:	mov	r4, r3
   1599c:	bne	15a80 <sprintf@plt+0x4480>
   159a0:	ldrb	r2, [r7, #784]	; 0x310
   159a4:	ldr	r3, [r7, #788]	; 0x314
   159a8:	cmp	r2, #0
   159ac:	sub	r3, r3, #1
   159b0:	str	r3, [r7, #788]	; 0x314
   159b4:	beq	159c0 <sprintf@plt+0x43c0>
   159b8:	cmp	r3, #0
   159bc:	ble	15b7c <sprintf@plt+0x457c>
   159c0:	ldr	r0, [r4, #8]
   159c4:	bl	12034 <sprintf@plt+0xa34>
   159c8:	ldr	r3, [r4, #20]
   159cc:	ldr	r2, [r4, #16]
   159d0:	cmp	r3, #0
   159d4:	strne	r2, [r3, #4]
   159d8:	ldrne	r2, [r4, #16]
   159dc:	streq	r2, [r5, #8]
   159e0:	cmp	r2, #0
   159e4:	strne	r3, [r2, #8]
   159e8:	streq	r3, [r5, #4]
   159ec:	ldr	r3, [r5, #12]
   159f0:	mov	r0, r4
   159f4:	sub	r3, r3, #1
   159f8:	str	r3, [r5, #12]
   159fc:	bl	113cc <free@plt>
   15a00:	ldr	r4, [r5, #12]
   15a04:	cmp	r4, #0
   15a08:	beq	15a14 <sprintf@plt+0x4414>
   15a0c:	add	sp, sp, #12
   15a10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15a14:	ldr	r1, [pc, #628]	; 15c90 <sprintf@plt+0x4690>
   15a18:	ldr	r0, [r6]
   15a1c:	add	r1, pc, r1
   15a20:	bl	122f8 <sprintf@plt+0xcf8>
   15a24:	mov	r0, r5
   15a28:	bl	113cc <free@plt>
   15a2c:	ldr	r3, [sp, #4]
   15a30:	ldr	r2, [r6, #464]	; 0x1d0
   15a34:	mov	r0, r6
   15a38:	ldr	r3, [r3, #12]
   15a3c:	mov	r1, r3
   15a40:	lsl	r3, r3, #4
   15a44:	add	r2, r2, r3
   15a48:	str	r4, [r2, #8]
   15a4c:	ldr	r2, [r6, #464]	; 0x1d0
   15a50:	add	r3, r2, r3
   15a54:	str	r4, [r3, #4]
   15a58:	bl	12dec <sprintf@plt+0x17ec>
   15a5c:	ldr	r3, [r6, #460]	; 0x1cc
   15a60:	sub	r3, r3, #1
   15a64:	cmp	r3, #0
   15a68:	str	r3, [r6, #460]	; 0x1cc
   15a6c:	bne	15a0c <sprintf@plt+0x440c>
   15a70:	mov	r0, r6
   15a74:	add	sp, sp, #12
   15a78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15a7c:	b	128fc <sprintf@plt+0x12fc>
   15a80:	ldr	r3, [r7, #780]	; 0x30c
   15a84:	cmp	r3, #0
   15a88:	beq	15afc <sprintf@plt+0x44fc>
   15a8c:	mov	r1, #46	; 0x2e
   15a90:	bl	11384 <strrchr@plt>
   15a94:	cmp	r0, #0
   15a98:	beq	15b88 <sprintf@plt+0x4588>
   15a9c:	ldrb	r3, [r0, #1]
   15aa0:	cmp	r3, #0
   15aa4:	beq	15b88 <sprintf@plt+0x4588>
   15aa8:	ldr	r9, [r7, #772]	; 0x304
   15aac:	cmp	r9, #0
   15ab0:	beq	159a0 <sprintf@plt+0x43a0>
   15ab4:	add	fp, r0, #1
   15ab8:	b	15ae4 <sprintf@plt+0x44e4>
   15abc:	cmp	r3, #2
   15ac0:	bne	15c6c <sprintf@plt+0x466c>
   15ac4:	mov	r0, fp
   15ac8:	add	r1, r1, #4
   15acc:	bl	115dc <strcmp@plt>
   15ad0:	cmp	r0, #0
   15ad4:	beq	15afc <sprintf@plt+0x44fc>
   15ad8:	ldr	r9, [r9, #8]
   15adc:	cmp	r9, #0
   15ae0:	beq	159a0 <sprintf@plt+0x43a0>
   15ae4:	ldr	r1, [r9]
   15ae8:	ldr	r3, [r1]
   15aec:	cmp	r3, #1
   15af0:	bne	15abc <sprintf@plt+0x44bc>
   15af4:	mov	r0, r8
   15af8:	b	15ac8 <sprintf@plt+0x44c8>
   15afc:	ldr	r3, [r7, #792]	; 0x318
   15b00:	mov	r2, r7
   15b04:	add	r3, r3, #1
   15b08:	str	r3, [r7, #792]	; 0x318
   15b0c:	mov	r1, sl
   15b10:	add	r3, r7, #256	; 0x100
   15b14:	mov	r0, r6
   15b18:	bl	12ae4 <sprintf@plt+0x14e4>
   15b1c:	ldr	r3, [sp, #4]
   15b20:	ldr	r2, [r3, #12]
   15b24:	ldr	r3, [r6, #464]	; 0x1d0
   15b28:	add	r3, r3, r2, lsl #4
   15b2c:	ldr	r5, [r3, #8]
   15b30:	cmp	r5, #0
   15b34:	beq	15a0c <sprintf@plt+0x440c>
   15b38:	ldr	r3, [r5, #12]
   15b3c:	cmp	r3, #0
   15b40:	bne	15bc0 <sprintf@plt+0x45c0>
   15b44:	mov	r0, r5
   15b48:	bl	113cc <free@plt>
   15b4c:	ldr	r3, [sp, #4]
   15b50:	ldr	r2, [r6, #464]	; 0x1d0
   15b54:	mov	ip, #0
   15b58:	ldr	r1, [r3, #12]
   15b5c:	mov	r0, r6
   15b60:	lsl	lr, r1, #4
   15b64:	add	r2, r2, lr
   15b68:	str	ip, [r2, #8]
   15b6c:	ldr	r3, [r6, #464]	; 0x1d0
   15b70:	add	r3, r3, lr
   15b74:	str	ip, [r3, #4]
   15b78:	b	15a58 <sprintf@plt+0x4458>
   15b7c:	mov	r0, r7
   15b80:	bl	15828 <sprintf@plt+0x4228>
   15b84:	b	159c0 <sprintf@plt+0x43c0>
   15b88:	ldr	sl, [r7, #796]	; 0x31c
   15b8c:	bl	1142c <rb_current_time@plt>
   15b90:	add	sl, sl, #3600	; 0xe10
   15b94:	cmp	sl, r0
   15b98:	bge	159a0 <sprintf@plt+0x43a0>
   15b9c:	ldr	r1, [pc, #240]	; 15c94 <sprintf@plt+0x4694>
   15ba0:	mov	r3, r8
   15ba4:	mov	r2, r7
   15ba8:	add	r1, pc, r1
   15bac:	mov	r0, #87	; 0x57
   15bb0:	bl	12370 <sprintf@plt+0xd70>
   15bb4:	bl	1142c <rb_current_time@plt>
   15bb8:	str	r0, [r7, #796]	; 0x31c
   15bbc:	b	159a0 <sprintf@plt+0x43a0>
   15bc0:	ldr	r1, [pc, #208]	; 15c98 <sprintf@plt+0x4698>
   15bc4:	ldr	r0, [r6]
   15bc8:	add	r1, pc, r1
   15bcc:	bl	122f8 <sprintf@plt+0xcf8>
   15bd0:	ldr	r3, [r5, #4]
   15bd4:	cmp	r3, #0
   15bd8:	beq	15b44 <sprintf@plt+0x4544>
   15bdc:	ldr	r7, [r3, #8]
   15be0:	b	15bec <sprintf@plt+0x45ec>
   15be4:	mov	r3, r7
   15be8:	ldr	r7, [r7, #8]
   15bec:	ldr	r4, [r3]
   15bf0:	ldr	r0, [r4, #8]
   15bf4:	bl	12034 <sprintf@plt+0xa34>
   15bf8:	ldr	r0, [r4]
   15bfc:	ldr	r3, [r0, #788]	; 0x314
   15c00:	ldrb	r2, [r0, #784]	; 0x310
   15c04:	sub	r3, r3, #1
   15c08:	str	r3, [r0, #788]	; 0x314
   15c0c:	cmp	r3, #0
   15c10:	movgt	r3, #0
   15c14:	andle	r3, r2, #1
   15c18:	cmp	r3, #0
   15c1c:	bne	15c64 <sprintf@plt+0x4664>
   15c20:	ldr	r3, [r4, #20]
   15c24:	ldr	r2, [r4, #16]
   15c28:	cmp	r3, #0
   15c2c:	strne	r2, [r3, #4]
   15c30:	ldrne	r2, [r4, #16]
   15c34:	streq	r2, [r5, #8]
   15c38:	cmp	r2, #0
   15c3c:	strne	r3, [r2, #8]
   15c40:	streq	r3, [r5, #4]
   15c44:	ldr	r3, [r5, #12]
   15c48:	mov	r0, r4
   15c4c:	sub	r3, r3, #1
   15c50:	str	r3, [r5, #12]
   15c54:	bl	113cc <free@plt>
   15c58:	cmp	r7, #0
   15c5c:	bne	15be4 <sprintf@plt+0x45e4>
   15c60:	b	15b44 <sprintf@plt+0x4544>
   15c64:	bl	15828 <sprintf@plt+0x4228>
   15c68:	b	15c20 <sprintf@plt+0x4620>
   15c6c:	ldr	r1, [pc, #40]	; 15c9c <sprintf@plt+0x469c>
   15c70:	mov	r0, #67	; 0x43
   15c74:	mov	r2, r7
   15c78:	add	r1, pc, r1
   15c7c:	bl	12370 <sprintf@plt+0xd70>
   15c80:	mov	r0, #3
   15c84:	bl	115e8 <exit@plt>
   15c88:	andeq	r5, r1, r8, lsr #13
   15c8c:	andeq	r0, r0, r8, lsl #3
   15c90:	strdeq	r3, [r0], -r8
   15c94:	andeq	r3, r0, r0, lsl sp
   15c98:	andeq	r3, r0, r0, lsr sp
   15c9c:	andeq	r3, r0, r0, lsl ip
   15ca0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15ca4:	sub	sp, sp, #36	; 0x24
   15ca8:	ldr	r4, [r2, #8]
   15cac:	str	r2, [sp, #20]
   15cb0:	mov	r0, r4
   15cb4:	bl	11420 <strlen@plt>
   15cb8:	add	r5, r0, #1
   15cbc:	mov	r0, r5
   15cc0:	bl	11504 <malloc@plt>
   15cc4:	subs	r3, r0, #0
   15cc8:	str	r3, [sp, #12]
   15ccc:	beq	15ef8 <sprintf@plt+0x48f8>
   15cd0:	mov	r2, r5
   15cd4:	mov	r1, r4
   15cd8:	bl	11444 <memcpy@plt>
   15cdc:	ldr	r3, [sp, #12]
   15ce0:	ldrb	r3, [r3]
   15ce4:	cmp	r3, #42	; 0x2a
   15ce8:	beq	15e14 <sprintf@plt+0x4814>
   15cec:	ldr	r1, [pc, #800]	; 16014 <sprintf@plt+0x4a14>
   15cf0:	add	r3, sp, #28
   15cf4:	mov	r2, r3
   15cf8:	add	r1, pc, r1
   15cfc:	ldr	r0, [sp, #12]
   15d00:	str	r3, [sp, #4]
   15d04:	bl	1130c <rb_strtok_r@plt>
   15d08:	subs	r8, r0, #0
   15d0c:	beq	15e14 <sprintf@plt+0x4814>
   15d10:	mov	r3, #0
   15d14:	ldr	r2, [pc, #764]	; 16018 <sprintf@plt+0x4a18>
   15d18:	mov	r9, r3
   15d1c:	mov	r7, #1
   15d20:	add	r2, pc, r2
   15d24:	str	r3, [sp]
   15d28:	str	r2, [sp, #8]
   15d2c:	str	r3, [sp, #16]
   15d30:	mov	r1, #72	; 0x48
   15d34:	mov	r0, r7
   15d38:	bl	1133c <calloc@plt>
   15d3c:	subs	r6, r0, #0
   15d40:	beq	15ef8 <sprintf@plt+0x48f8>
   15d44:	ldrb	fp, [r8]
   15d48:	cmp	fp, #0
   15d4c:	beq	15f14 <sprintf@plt+0x4914>
   15d50:	mov	sl, r8
   15d54:	mov	r5, #2
   15d58:	mov	r4, #0
   15d5c:	b	15d84 <sprintf@plt+0x4784>
   15d60:	bl	114e0 <__ctype_b_loc@plt>
   15d64:	lsl	r3, fp, #1
   15d68:	ldr	r2, [r0]
   15d6c:	ldrh	r3, [r2, r3]
   15d70:	tst	r3, #2048	; 0x800
   15d74:	beq	15f1c <sprintf@plt+0x491c>
   15d78:	ldrb	fp, [sl, #1]!
   15d7c:	cmp	fp, #0
   15d80:	beq	15da8 <sprintf@plt+0x47a8>
   15d84:	cmp	fp, #46	; 0x2e
   15d88:	bne	15d60 <sprintf@plt+0x4760>
   15d8c:	add	r4, r4, #1
   15d90:	cmp	r4, #3
   15d94:	bgt	15fb4 <sprintf@plt+0x49b4>
   15d98:	ldrb	fp, [sl, #1]!
   15d9c:	mov	r5, r7
   15da0:	cmp	fp, #0
   15da4:	bne	15d84 <sprintf@plt+0x4784>
   15da8:	sub	r4, r4, #1
   15dac:	cmp	r4, #1
   15db0:	bls	15fcc <sprintf@plt+0x49cc>
   15db4:	mov	r0, r6
   15db8:	mov	r1, r8
   15dbc:	str	r5, [r0], #4
   15dc0:	mov	r2, #53	; 0x35
   15dc4:	bl	113a8 <rb_strlcpy@plt>
   15dc8:	mov	r3, #0
   15dcc:	str	r6, [r6, #60]	; 0x3c
   15dd0:	str	r3, [r6, #64]	; 0x40
   15dd4:	str	r9, [r6, #68]	; 0x44
   15dd8:	cmp	r9, #0
   15ddc:	add	r6, r6, #60	; 0x3c
   15de0:	strne	r6, [r9, #4]
   15de4:	beq	15ee4 <sprintf@plt+0x48e4>
   15de8:	ldr	r2, [sp, #4]
   15dec:	ldr	r1, [sp, #8]
   15df0:	mov	r0, #0
   15df4:	bl	1130c <rb_strtok_r@plt>
   15df8:	ldr	r3, [sp]
   15dfc:	mov	r9, r6
   15e00:	add	r3, r3, #1
   15e04:	str	r3, [sp]
   15e08:	subs	r8, r0, #0
   15e0c:	bne	15d30 <sprintf@plt+0x4730>
   15e10:	b	15e24 <sprintf@plt+0x4824>
   15e14:	mov	r3, #0
   15e18:	mov	r6, r3
   15e1c:	str	r3, [sp]
   15e20:	str	r3, [sp, #16]
   15e24:	ldr	r0, [sp, #12]
   15e28:	bl	113cc <free@plt>
   15e2c:	ldr	r4, [sp, #20]
   15e30:	mov	r2, #10
   15e34:	mov	r1, #0
   15e38:	ldr	r0, [r4, #4]
   15e3c:	bl	11468 <strtol@plt>
   15e40:	ldr	r9, [r4]
   15e44:	ldr	r7, [r4, #12]
   15e48:	cmp	r7, #0
   15e4c:	cmpne	r9, #0
   15e50:	moveq	r5, #1
   15e54:	movne	r5, #0
   15e58:	ands	r8, r0, #3
   15e5c:	orreq	r5, r5, #1
   15e60:	cmp	r5, #0
   15e64:	bne	15efc <sprintf@plt+0x48fc>
   15e68:	mov	r0, r9
   15e6c:	bl	155d8 <sprintf@plt+0x3fd8>
   15e70:	subs	r4, r0, #0
   15e74:	strbne	r5, [r4, #784]	; 0x310
   15e78:	beq	15f50 <sprintf@plt+0x4950>
   15e7c:	mov	r1, r9
   15e80:	mov	r2, #256	; 0x100
   15e84:	mov	r0, r4
   15e88:	bl	113a8 <rb_strlcpy@plt>
   15e8c:	mov	r1, r7
   15e90:	mov	r2, #512	; 0x200
   15e94:	add	r0, r4, #256	; 0x100
   15e98:	bl	113a8 <rb_strlcpy@plt>
   15e9c:	cmp	r6, #0
   15ea0:	strb	r8, [r4, #768]	; 0x300
   15ea4:	beq	15ed4 <sprintf@plt+0x48d4>
   15ea8:	ldr	r3, [r4, #772]	; 0x304
   15eac:	cmp	r3, #0
   15eb0:	beq	15f38 <sprintf@plt+0x4938>
   15eb4:	ldr	r2, [r4, #780]	; 0x30c
   15eb8:	ldr	r1, [sp, #16]
   15ebc:	ldr	r0, [sp]
   15ec0:	add	sl, r2, r0
   15ec4:	str	r3, [r1, #8]
   15ec8:	str	r1, [r3, #4]
   15ecc:	str	r6, [r4, #772]	; 0x304
   15ed0:	str	sl, [r4, #780]	; 0x30c
   15ed4:	mov	r3, #0
   15ed8:	str	r3, [r4, #796]	; 0x31c
   15edc:	add	sp, sp, #36	; 0x24
   15ee0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15ee4:	ldr	r2, [sp, #16]
   15ee8:	subs	r3, r2, #0
   15eec:	moveq	r3, r6
   15ef0:	str	r3, [sp, #16]
   15ef4:	b	15de8 <sprintf@plt+0x47e8>
   15ef8:	bl	114d4 <rb_outofmemory@plt>
   15efc:	ldr	r1, [pc, #280]	; 1601c <sprintf@plt+0x4a1c>
   15f00:	mov	r0, #67	; 0x43
   15f04:	add	r1, pc, r1
   15f08:	bl	12370 <sprintf@plt+0xd70>
   15f0c:	mov	r0, #3
   15f10:	bl	115e8 <exit@plt>
   15f14:	mov	r5, #2
   15f18:	b	15db4 <sprintf@plt+0x47b4>
   15f1c:	ldr	r1, [pc, #252]	; 16020 <sprintf@plt+0x4a20>
   15f20:	mov	r0, #67	; 0x43
   15f24:	mov	r2, fp
   15f28:	add	r1, pc, r1
   15f2c:	bl	12370 <sprintf@plt+0xd70>
   15f30:	mov	r0, #3
   15f34:	bl	115e8 <exit@plt>
   15f38:	ldr	r3, [sp, #16]
   15f3c:	str	r6, [r4, #772]	; 0x304
   15f40:	str	r3, [r4, #776]	; 0x308
   15f44:	ldr	r3, [sp]
   15f48:	str	r3, [r4, #780]	; 0x30c
   15f4c:	b	15ed4 <sprintf@plt+0x48d4>
   15f50:	mov	r1, #800	; 0x320
   15f54:	mov	r0, #1
   15f58:	bl	1133c <calloc@plt>
   15f5c:	subs	r5, r0, #0
   15f60:	beq	15ef8 <sprintf@plt+0x48f8>
   15f64:	bl	11588 <rb_make_rb_dlink_node@plt>
   15f68:	cmp	r0, #0
   15f6c:	beq	15ff4 <sprintf@plt+0x49f4>
   15f70:	ldr	r3, [pc, #172]	; 16024 <sprintf@plt+0x4a24>
   15f74:	str	r5, [r0]
   15f78:	add	r3, pc, r3
   15f7c:	str	r4, [r0, #4]
   15f80:	ldr	r2, [r3]
   15f84:	cmp	r2, #0
   15f88:	str	r2, [r0, #8]
   15f8c:	strne	r0, [r2, #4]
   15f90:	beq	15fe4 <sprintf@plt+0x49e4>
   15f94:	ldr	r3, [pc, #140]	; 16028 <sprintf@plt+0x4a28>
   15f98:	mov	r4, r5
   15f9c:	add	r3, pc, r3
   15fa0:	ldr	r2, [r3, #8]
   15fa4:	str	r0, [r3]
   15fa8:	add	r2, r2, #1
   15fac:	str	r2, [r3, #8]
   15fb0:	b	15e7c <sprintf@plt+0x487c>
   15fb4:	ldr	r1, [pc, #112]	; 1602c <sprintf@plt+0x4a2c>
   15fb8:	mov	r0, #67	; 0x43
   15fbc:	add	r1, pc, r1
   15fc0:	bl	12370 <sprintf@plt+0xd70>
   15fc4:	mov	r0, #3
   15fc8:	bl	115e8 <exit@plt>
   15fcc:	ldr	r1, [pc, #92]	; 16030 <sprintf@plt+0x4a30>
   15fd0:	mov	r0, #67	; 0x43
   15fd4:	add	r1, pc, r1
   15fd8:	bl	12370 <sprintf@plt+0xd70>
   15fdc:	mov	r0, #3
   15fe0:	bl	115e8 <exit@plt>
   15fe4:	ldr	r2, [r3, #4]
   15fe8:	cmp	r2, #0
   15fec:	streq	r0, [r3, #4]
   15ff0:	b	15f94 <sprintf@plt+0x4994>
   15ff4:	ldr	r3, [pc, #56]	; 16034 <sprintf@plt+0x4a34>
   15ff8:	ldr	r1, [pc, #56]	; 16038 <sprintf@plt+0x4a38>
   15ffc:	ldr	r0, [pc, #56]	; 1603c <sprintf@plt+0x4a3c>
   16000:	add	r3, pc, r3
   16004:	mov	r2, #144	; 0x90
   16008:	add	r1, pc, r1
   1600c:	add	r0, pc, r0
   16010:	bl	1139c <__assert_fail@plt>
   16014:	andeq	r3, r0, r4, asr #24
   16018:	andeq	r3, r0, ip, lsl ip
   1601c:	andeq	r3, r0, r8, lsl #22
   16020:	andeq	r3, r0, r4, asr sl
   16024:	andeq	sl, r1, r0, lsr #1
   16028:	andeq	sl, r1, ip, ror r0
   1602c:	andeq	r3, r0, r4, lsl #19
   16030:	strdeq	r3, [r0], -r8
   16034:	strdeq	r3, [r0], -r4
   16038:	andeq	r3, r0, ip, asr #7
   1603c:	strdeq	r3, [r0], -r4
   16040:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16044:	sub	sp, sp, #20
   16048:	ldr	sl, [pc, #384]	; 161d0 <sprintf@plt+0x4bd0>
   1604c:	ldr	r3, [pc, #384]	; 161d4 <sprintf@plt+0x4bd4>
   16050:	add	sl, pc, sl
   16054:	add	r8, sp, #8
   16058:	ldr	r7, [sl, r3]
   1605c:	ldr	r3, [pc, #372]	; 161d8 <sprintf@plt+0x4bd8>
   16060:	mov	r1, r8
   16064:	add	r3, pc, r3
   16068:	ldr	r0, [r7]
   1606c:	mov	r9, #0
   16070:	str	r3, [sp, #4]
   16074:	bl	11408 <rb_dictionary_foreach_start@plt>
   16078:	b	160dc <sprintf@plt+0x4adc>
   1607c:	mov	r0, fp
   16080:	bl	113cc <free@plt>
   16084:	ldr	r3, [sp]
   16088:	ldr	r2, [r5, #464]	; 0x1d0
   1608c:	mov	r0, r5
   16090:	ldr	r3, [r3, #12]
   16094:	mov	r1, r3
   16098:	lsl	r3, r3, #4
   1609c:	add	r2, r2, r3
   160a0:	str	r9, [r2, #8]
   160a4:	ldr	r2, [r5, #464]	; 0x1d0
   160a8:	add	r3, r2, r3
   160ac:	str	r9, [r3, #4]
   160b0:	bl	12dec <sprintf@plt+0x17ec>
   160b4:	ldr	r3, [r5, #460]	; 0x1cc
   160b8:	sub	r3, r3, #1
   160bc:	cmp	r3, #0
   160c0:	str	r3, [r5, #460]	; 0x1cc
   160c4:	bne	160d0 <sprintf@plt+0x4ad0>
   160c8:	mov	r0, r5
   160cc:	bl	128fc <sprintf@plt+0x12fc>
   160d0:	mov	r1, r8
   160d4:	ldr	r0, [r7]
   160d8:	bl	113c0 <rb_dictionary_foreach_next@plt>
   160dc:	mov	r1, r8
   160e0:	ldr	r0, [r7]
   160e4:	bl	11324 <rb_dictionary_foreach_cur@plt>
   160e8:	subs	r5, r0, #0
   160ec:	beq	161c4 <sprintf@plt+0x4bc4>
   160f0:	ldr	r2, [pc, #228]	; 161dc <sprintf@plt+0x4bdc>
   160f4:	ldr	r3, [r5, #464]	; 0x1d0
   160f8:	ldr	r2, [sl, r2]
   160fc:	str	r2, [sp]
   16100:	ldr	r2, [r2, #12]
   16104:	add	r3, r3, r2, lsl #4
   16108:	ldr	fp, [r3, #8]
   1610c:	cmp	fp, #0
   16110:	beq	160d0 <sprintf@plt+0x4ad0>
   16114:	ldr	r3, [fp, #12]
   16118:	cmp	r3, #0
   1611c:	beq	1607c <sprintf@plt+0x4a7c>
   16120:	ldr	r1, [sp, #4]
   16124:	ldr	r0, [r5]
   16128:	bl	122f8 <sprintf@plt+0xcf8>
   1612c:	ldr	r3, [fp, #4]
   16130:	cmp	r3, #0
   16134:	beq	1607c <sprintf@plt+0x4a7c>
   16138:	ldr	r4, [r3, #8]
   1613c:	b	16188 <sprintf@plt+0x4b88>
   16140:	ldr	r1, [r6, #20]
   16144:	ldr	r0, [r6, #16]
   16148:	cmp	r1, #0
   1614c:	strne	r0, [r1, #4]
   16150:	ldrne	r0, [r6, #16]
   16154:	streq	r0, [fp, #8]
   16158:	cmp	r0, #0
   1615c:	strne	r1, [r0, #8]
   16160:	streq	r1, [fp, #4]
   16164:	ldr	r1, [fp, #12]
   16168:	mov	r0, r6
   1616c:	sub	r3, r1, #1
   16170:	str	r3, [fp, #12]
   16174:	bl	113cc <free@plt>
   16178:	cmp	r4, #0
   1617c:	beq	1607c <sprintf@plt+0x4a7c>
   16180:	mov	r3, r4
   16184:	ldr	r4, [r4, #8]
   16188:	ldr	r6, [r3]
   1618c:	ldr	r0, [r6, #8]
   16190:	bl	12034 <sprintf@plt+0xa34>
   16194:	ldr	r0, [r6]
   16198:	ldr	r1, [r0, #788]	; 0x314
   1619c:	ldrb	ip, [r0, #784]	; 0x310
   161a0:	sub	r1, r1, #1
   161a4:	str	r1, [r0, #788]	; 0x314
   161a8:	cmp	r1, #0
   161ac:	movgt	r1, #0
   161b0:	andle	r1, ip, #1
   161b4:	cmp	r1, #0
   161b8:	beq	16140 <sprintf@plt+0x4b40>
   161bc:	bl	15828 <sprintf@plt+0x4228>
   161c0:	b	16140 <sprintf@plt+0x4b40>
   161c4:	bl	15730 <sprintf@plt+0x4130>
   161c8:	add	sp, sp, #20
   161cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   161d0:	andeq	r4, r1, r8, lsr #31
   161d4:	andeq	r0, r0, r8, asr r1
   161d8:	muleq	r0, r4, r8
   161dc:	andeq	r0, r0, r8, lsl #3
   161e0:	ldr	r3, [pc, #304]	; 16318 <sprintf@plt+0x4d18>
   161e4:	ldr	r2, [pc, #304]	; 1631c <sprintf@plt+0x4d1c>
   161e8:	add	r3, pc, r3
   161ec:	push	{r4, r5, r6, r7, r8, lr}
   161f0:	ldr	r7, [r3, r2]
   161f4:	ldr	r3, [r0, #464]	; 0x1d0
   161f8:	ldr	r2, [r7, #12]
   161fc:	add	r3, r3, r2, lsl #4
   16200:	ldr	r8, [r3, #8]
   16204:	cmp	r8, #0
   16208:	popeq	{r4, r5, r6, r7, r8, pc}
   1620c:	ldr	r3, [r8, #12]
   16210:	mov	r5, r0
   16214:	cmp	r3, #0
   16218:	bne	16270 <sprintf@plt+0x4c70>
   1621c:	mov	r0, r8
   16220:	bl	113cc <free@plt>
   16224:	ldr	r1, [r7, #12]
   16228:	ldr	r2, [r5, #464]	; 0x1d0
   1622c:	mov	ip, #0
   16230:	lsl	lr, r1, #4
   16234:	add	r2, r2, lr
   16238:	mov	r0, r5
   1623c:	str	ip, [r2, #8]
   16240:	ldr	r3, [r5, #464]	; 0x1d0
   16244:	add	r3, r3, lr
   16248:	str	ip, [r3, #4]
   1624c:	bl	12dec <sprintf@plt+0x17ec>
   16250:	ldr	r3, [r5, #460]	; 0x1cc
   16254:	sub	r3, r3, #1
   16258:	cmp	r3, #0
   1625c:	str	r3, [r5, #460]	; 0x1cc
   16260:	popne	{r4, r5, r6, r7, r8, pc}
   16264:	mov	r0, r5
   16268:	pop	{r4, r5, r6, r7, r8, lr}
   1626c:	b	128fc <sprintf@plt+0x12fc>
   16270:	ldr	r1, [pc, #168]	; 16320 <sprintf@plt+0x4d20>
   16274:	ldr	r0, [r0]
   16278:	add	r1, pc, r1
   1627c:	bl	122f8 <sprintf@plt+0xcf8>
   16280:	ldr	r3, [r8, #4]
   16284:	cmp	r3, #0
   16288:	beq	1621c <sprintf@plt+0x4c1c>
   1628c:	ldr	r6, [r3, #8]
   16290:	b	162dc <sprintf@plt+0x4cdc>
   16294:	ldr	r3, [r4, #20]
   16298:	ldr	r2, [r4, #16]
   1629c:	cmp	r3, #0
   162a0:	strne	r2, [r3, #4]
   162a4:	ldrne	r2, [r4, #16]
   162a8:	streq	r2, [r8, #8]
   162ac:	cmp	r2, #0
   162b0:	strne	r3, [r2, #8]
   162b4:	streq	r3, [r8, #4]
   162b8:	ldr	r3, [r8, #12]
   162bc:	mov	r0, r4
   162c0:	sub	r3, r3, #1
   162c4:	str	r3, [r8, #12]
   162c8:	bl	113cc <free@plt>
   162cc:	cmp	r6, #0
   162d0:	beq	1621c <sprintf@plt+0x4c1c>
   162d4:	mov	r3, r6
   162d8:	ldr	r6, [r6, #8]
   162dc:	ldr	r4, [r3]
   162e0:	ldr	r0, [r4, #8]
   162e4:	bl	12034 <sprintf@plt+0xa34>
   162e8:	ldr	r0, [r4]
   162ec:	ldr	r3, [r0, #788]	; 0x314
   162f0:	ldrb	r2, [r0, #784]	; 0x310
   162f4:	sub	r3, r3, #1
   162f8:	str	r3, [r0, #788]	; 0x314
   162fc:	cmp	r3, #0
   16300:	movgt	r3, #0
   16304:	andle	r3, r2, #1
   16308:	cmp	r3, #0
   1630c:	beq	16294 <sprintf@plt+0x4c94>
   16310:	bl	15828 <sprintf@plt+0x4228>
   16314:	b	16294 <sprintf@plt+0x4c94>
   16318:	andeq	r4, r1, r0, lsl lr
   1631c:	andeq	r0, r0, r8, lsl #3
   16320:	andeq	r3, r0, r4, asr #15
   16324:	ldr	r3, [pc, #304]	; 1645c <sprintf@plt+0x4e5c>
   16328:	ldr	r2, [pc, #304]	; 16460 <sprintf@plt+0x4e60>
   1632c:	add	r3, pc, r3
   16330:	push	{r4, r5, r6, r7, r8, lr}
   16334:	ldr	r7, [r3, r2]
   16338:	ldr	r3, [r0, #464]	; 0x1d0
   1633c:	ldr	r2, [r7, #12]
   16340:	add	r3, r3, r2, lsl #4
   16344:	ldr	r8, [r3, #8]
   16348:	cmp	r8, #0
   1634c:	popeq	{r4, r5, r6, r7, r8, pc}
   16350:	ldr	r3, [r8, #12]
   16354:	mov	r5, r0
   16358:	cmp	r3, #0
   1635c:	bne	163b4 <sprintf@plt+0x4db4>
   16360:	mov	r0, r8
   16364:	bl	113cc <free@plt>
   16368:	ldr	r1, [r7, #12]
   1636c:	ldr	r2, [r5, #464]	; 0x1d0
   16370:	mov	ip, #0
   16374:	lsl	lr, r1, #4
   16378:	add	r2, r2, lr
   1637c:	mov	r0, r5
   16380:	str	ip, [r2, #8]
   16384:	ldr	r3, [r5, #464]	; 0x1d0
   16388:	add	r3, r3, lr
   1638c:	str	ip, [r3, #4]
   16390:	bl	12dec <sprintf@plt+0x17ec>
   16394:	ldr	r3, [r5, #460]	; 0x1cc
   16398:	sub	r3, r3, #1
   1639c:	cmp	r3, #0
   163a0:	str	r3, [r5, #460]	; 0x1cc
   163a4:	popne	{r4, r5, r6, r7, r8, pc}
   163a8:	mov	r0, r5
   163ac:	pop	{r4, r5, r6, r7, r8, lr}
   163b0:	b	128fc <sprintf@plt+0x12fc>
   163b4:	ldr	r1, [pc, #168]	; 16464 <sprintf@plt+0x4e64>
   163b8:	ldr	r0, [r0]
   163bc:	add	r1, pc, r1
   163c0:	bl	122f8 <sprintf@plt+0xcf8>
   163c4:	ldr	r3, [r8, #4]
   163c8:	cmp	r3, #0
   163cc:	beq	16360 <sprintf@plt+0x4d60>
   163d0:	ldr	r6, [r3, #8]
   163d4:	b	16420 <sprintf@plt+0x4e20>
   163d8:	ldr	r3, [r4, #20]
   163dc:	ldr	r2, [r4, #16]
   163e0:	cmp	r3, #0
   163e4:	strne	r2, [r3, #4]
   163e8:	ldrne	r2, [r4, #16]
   163ec:	streq	r2, [r8, #8]
   163f0:	cmp	r2, #0
   163f4:	strne	r3, [r2, #8]
   163f8:	streq	r3, [r8, #4]
   163fc:	ldr	r3, [r8, #12]
   16400:	mov	r0, r4
   16404:	sub	r3, r3, #1
   16408:	str	r3, [r8, #12]
   1640c:	bl	113cc <free@plt>
   16410:	cmp	r6, #0
   16414:	beq	16360 <sprintf@plt+0x4d60>
   16418:	mov	r3, r6
   1641c:	ldr	r6, [r6, #8]
   16420:	ldr	r4, [r3]
   16424:	ldr	r0, [r4, #8]
   16428:	bl	12034 <sprintf@plt+0xa34>
   1642c:	ldr	r0, [r4]
   16430:	ldr	r3, [r0, #788]	; 0x314
   16434:	ldrb	r2, [r0, #784]	; 0x310
   16438:	sub	r3, r3, #1
   1643c:	str	r3, [r0, #788]	; 0x314
   16440:	cmp	r3, #0
   16444:	movgt	r3, #0
   16448:	andle	r3, r2, #1
   1644c:	cmp	r3, #0
   16450:	beq	163d8 <sprintf@plt+0x4dd8>
   16454:	bl	15828 <sprintf@plt+0x4228>
   16458:	b	163d8 <sprintf@plt+0x4dd8>
   1645c:	andeq	r4, r1, ip, asr #25
   16460:	andeq	r0, r0, r8, lsl #3
   16464:	andeq	r3, r0, ip, lsr r5
   16468:	ldr	r3, [pc, #848]	; 167c0 <sprintf@plt+0x51c0>
   1646c:	ldr	r2, [pc, #848]	; 167c4 <sprintf@plt+0x51c4>
   16470:	add	r3, pc, r3
   16474:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16478:	sub	sp, sp, #284	; 0x11c
   1647c:	ldr	r9, [r3, r2]
   16480:	ldr	r3, [r0, #464]	; 0x1d0
   16484:	ldrh	r2, [r0, #248]	; 0xf8
   16488:	ldr	r1, [r9, #12]
   1648c:	mov	r6, r0
   16490:	cmp	r2, #2
   16494:	add	r3, r3, r1, lsl #4
   16498:	ldr	r7, [r3, #8]
   1649c:	beq	16510 <sprintf@plt+0x4f10>
   164a0:	cmp	r2, #10
   164a4:	moveq	sl, #2
   164a8:	beq	16514 <sprintf@plt+0x4f14>
   164ac:	cmp	r7, #0
   164b0:	beq	16508 <sprintf@plt+0x4f08>
   164b4:	ldr	r3, [r7, #12]
   164b8:	cmp	r3, #0
   164bc:	bne	166ac <sprintf@plt+0x50ac>
   164c0:	mov	r0, r7
   164c4:	bl	113cc <free@plt>
   164c8:	ldr	r1, [r9, #12]
   164cc:	ldr	r2, [r6, #464]	; 0x1d0
   164d0:	mov	ip, #0
   164d4:	lsl	lr, r1, #4
   164d8:	add	r2, r2, lr
   164dc:	mov	r0, r6
   164e0:	str	ip, [r2, #8]
   164e4:	ldr	r3, [r6, #464]	; 0x1d0
   164e8:	add	r3, r3, lr
   164ec:	str	ip, [r3, #4]
   164f0:	bl	12dec <sprintf@plt+0x17ec>
   164f4:	ldr	r3, [r6, #460]	; 0x1cc
   164f8:	sub	r3, r3, #1
   164fc:	cmp	r3, #0
   16500:	str	r3, [r6, #460]	; 0x1cc
   16504:	beq	16688 <sprintf@plt+0x5088>
   16508:	add	sp, sp, #284	; 0x11c
   1650c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16510:	mov	sl, #1
   16514:	ldr	r1, [pc, #684]	; 167c8 <sprintf@plt+0x51c8>
   16518:	mov	r5, #1
   1651c:	strb	r5, [r7]
   16520:	add	r1, pc, r1
   16524:	ldr	r0, [r6]
   16528:	bl	122f8 <sprintf@plt+0xcf8>
   1652c:	ldr	r3, [pc, #664]	; 167cc <sprintf@plt+0x51cc>
   16530:	ldr	r4, [pc, r3]
   16534:	cmp	r4, #0
   16538:	beq	16668 <sprintf@plt+0x5068>
   1653c:	ldr	r3, [pc, #652]	; 167d0 <sprintf@plt+0x51d0>
   16540:	str	r5, [sp]
   16544:	add	r3, pc, r3
   16548:	str	r3, [sp, #20]
   1654c:	ldr	r3, [pc, #640]	; 167d4 <sprintf@plt+0x51d4>
   16550:	str	r7, [sp, #4]
   16554:	add	r3, pc, r3
   16558:	str	r3, [sp, #16]
   1655c:	add	r3, r6, #248	; 0xf8
   16560:	str	r3, [sp, #8]
   16564:	add	r3, sp, #24
   16568:	str	r3, [sp, #12]
   1656c:	b	1657c <sprintf@plt+0x4f7c>
   16570:	ldr	r4, [r4, #8]
   16574:	cmp	r4, #0
   16578:	beq	16664 <sprintf@plt+0x5064>
   1657c:	ldr	r5, [r4]
   16580:	ldrb	r3, [r5, #784]	; 0x310
   16584:	cmp	r3, #0
   16588:	bne	16570 <sprintf@plt+0x4f70>
   1658c:	ldrb	r7, [r5, #768]	; 0x300
   16590:	tst	r7, sl
   16594:	beq	16570 <sprintf@plt+0x4f70>
   16598:	mov	r1, #24
   1659c:	ldr	r0, [sp]
   165a0:	bl	1133c <calloc@plt>
   165a4:	subs	r8, r0, #0
   165a8:	beq	167b8 <sprintf@plt+0x51b8>
   165ac:	ldr	r0, [r9, #12]
   165b0:	ldr	r2, [r6, #464]	; 0x1d0
   165b4:	ldrh	r1, [r6, #248]	; 0xf8
   165b8:	add	r2, r2, r0, lsl #4
   165bc:	cmp	r1, #2
   165c0:	ldr	fp, [r2, #8]
   165c4:	stm	r8, {r5, r6}
   165c8:	beq	16698 <sprintf@plt+0x5098>
   165cc:	cmp	r1, #10
   165d0:	bne	16750 <sprintf@plt+0x5150>
   165d4:	tst	r7, #2
   165d8:	beq	166a0 <sprintf@plt+0x50a0>
   165dc:	ldr	r7, [sp, #12]
   165e0:	mov	r3, r5
   165e4:	ldr	r2, [sp, #8]
   165e8:	mov	r1, #256	; 0x100
   165ec:	mov	r0, r7
   165f0:	bl	13898 <sprintf@plt+0x2298>
   165f4:	ldr	r2, [sp, #16]
   165f8:	mov	r3, r8
   165fc:	mov	r1, #2
   16600:	mov	r0, r7
   16604:	bl	11ea8 <sprintf@plt+0x8a8>
   16608:	add	r3, fp, #4
   1660c:	cmp	r3, #0
   16610:	add	r1, r8, #12
   16614:	str	r0, [r8, #8]
   16618:	beq	167bc <sprintf@plt+0x51bc>
   1661c:	ldr	r3, [fp, #4]
   16620:	mov	r2, #0
   16624:	cmp	r3, r2
   16628:	str	r8, [r8, #12]
   1662c:	str	r3, [r8, #20]
   16630:	str	r2, [r8, #16]
   16634:	strne	r1, [r3, #4]
   16638:	beq	167a0 <sprintf@plt+0x51a0>
   1663c:	ldr	r3, [r5, #788]	; 0x314
   16640:	ldr	r2, [fp, #12]
   16644:	ldr	r4, [r4, #8]
   16648:	add	r2, r2, #1
   1664c:	add	r3, r3, #1
   16650:	cmp	r4, #0
   16654:	str	r1, [fp, #4]
   16658:	str	r2, [fp, #12]
   1665c:	str	r3, [r5, #788]	; 0x314
   16660:	bne	1657c <sprintf@plt+0x4f7c>
   16664:	ldr	r7, [sp, #4]
   16668:	ldr	r3, [r7, #12]
   1666c:	cmp	r3, #0
   16670:	bne	16774 <sprintf@plt+0x5174>
   16674:	ldr	r2, [r9, #12]
   16678:	ldr	r3, [r6, #464]	; 0x1d0
   1667c:	add	r3, r3, r2, lsl #4
   16680:	ldr	r7, [r3, #8]
   16684:	b	164ac <sprintf@plt+0x4eac>
   16688:	mov	r0, r6
   1668c:	bl	128fc <sprintf@plt+0x12fc>
   16690:	add	sp, sp, #284	; 0x11c
   16694:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16698:	tst	r7, #1
   1669c:	bne	165dc <sprintf@plt+0x4fdc>
   166a0:	mov	r0, r8
   166a4:	bl	113cc <free@plt>
   166a8:	b	16570 <sprintf@plt+0x4f70>
   166ac:	ldr	r1, [pc, #292]	; 167d8 <sprintf@plt+0x51d8>
   166b0:	ldr	r0, [r6]
   166b4:	add	r1, pc, r1
   166b8:	bl	122f8 <sprintf@plt+0xcf8>
   166bc:	ldr	r3, [r7, #4]
   166c0:	cmp	r3, #0
   166c4:	beq	164c0 <sprintf@plt+0x4ec0>
   166c8:	ldr	r4, [r3, #8]
   166cc:	b	166d8 <sprintf@plt+0x50d8>
   166d0:	mov	r3, r4
   166d4:	ldr	r4, [r4, #8]
   166d8:	ldr	r5, [r3]
   166dc:	ldr	r0, [r5, #8]
   166e0:	bl	12034 <sprintf@plt+0xa34>
   166e4:	ldr	r0, [r5]
   166e8:	ldr	r3, [r0, #788]	; 0x314
   166ec:	ldrb	r2, [r0, #784]	; 0x310
   166f0:	sub	r3, r3, #1
   166f4:	str	r3, [r0, #788]	; 0x314
   166f8:	cmp	r3, #0
   166fc:	movgt	r3, #0
   16700:	andle	r3, r2, #1
   16704:	cmp	r3, #0
   16708:	bne	167b0 <sprintf@plt+0x51b0>
   1670c:	ldr	r3, [r5, #20]
   16710:	ldr	r2, [r5, #16]
   16714:	cmp	r3, #0
   16718:	strne	r2, [r3, #4]
   1671c:	ldrne	r2, [r5, #16]
   16720:	streq	r2, [r7, #8]
   16724:	cmp	r2, #0
   16728:	strne	r3, [r2, #8]
   1672c:	streq	r3, [r7, #4]
   16730:	ldr	r3, [r7, #12]
   16734:	mov	r0, r5
   16738:	sub	r3, r3, #1
   1673c:	str	r3, [r7, #12]
   16740:	bl	113cc <free@plt>
   16744:	cmp	r4, #0
   16748:	bne	166d0 <sprintf@plt+0x50d0>
   1674c:	b	164c0 <sprintf@plt+0x4ec0>
   16750:	ldr	r7, [sp, #12]
   16754:	mov	r3, r5
   16758:	ldr	r2, [sp, #8]
   1675c:	mov	r1, #256	; 0x100
   16760:	mov	r0, r7
   16764:	bl	13898 <sprintf@plt+0x2298>
   16768:	mov	r3, r8
   1676c:	ldr	r2, [sp, #20]
   16770:	b	165fc <sprintf@plt+0x4ffc>
   16774:	ldr	r3, [pc, #96]	; 167dc <sprintf@plt+0x51dc>
   16778:	ldr	r2, [r9, #12]
   1677c:	add	r3, pc, r3
   16780:	ldr	r4, [r6, #464]	; 0x1d0
   16784:	ldr	r5, [r3]
   16788:	add	r4, r4, r2, lsl #4
   1678c:	bl	1142c <rb_current_time@plt>
   16790:	add	r0, r5, r0
   16794:	str	r0, [r4, #4]
   16798:	add	sp, sp, #284	; 0x11c
   1679c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   167a0:	ldr	r3, [fp, #8]
   167a4:	cmp	r3, #0
   167a8:	streq	r1, [fp, #8]
   167ac:	b	1663c <sprintf@plt+0x503c>
   167b0:	bl	15828 <sprintf@plt+0x4228>
   167b4:	b	1670c <sprintf@plt+0x510c>
   167b8:	bl	114d4 <rb_outofmemory@plt>
   167bc:	bl	1160c <sprintf@plt+0xc>
   167c0:	andeq	r4, r1, r8, lsl #23
   167c4:	andeq	r0, r0, r8, lsl #3
   167c8:	andeq	r3, r0, r8, lsr r5
   167cc:	andeq	r9, r1, r8, ror #21
   167d0:			; <UNDEFINED> instruction: 0xfffff3fc
   167d4:			; <UNDEFINED> instruction: 0xfffff3ec
   167d8:	andeq	r3, r0, r8, asr #7
   167dc:	andeq	r5, r1, r8, lsr #12
   167e0:	ldr	r2, [pc, #228]	; 168cc <sprintf@plt+0x52cc>
   167e4:	ldr	r3, [pc, #228]	; 168d0 <sprintf@plt+0x52d0>
   167e8:	add	r2, pc, r2
   167ec:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   167f0:	ldr	r3, [r2, r3]
   167f4:	ldr	r8, [r0, #464]	; 0x1d0
   167f8:	ldr	r3, [r3, #12]
   167fc:	add	r3, r8, r3, lsl #4
   16800:	ldr	r3, [r3, #8]
   16804:	cmp	r3, #0
   16808:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1680c:	ldrb	r3, [r3]
   16810:	cmp	r3, #0
   16814:	popne	{r4, r5, r6, r7, r8, r9, sl, pc}
   16818:	ldr	r3, [pc, #180]	; 168d4 <sprintf@plt+0x52d4>
   1681c:	mov	r9, r0
   16820:	ldr	r3, [r2, r3]
   16824:	ldr	r6, [r3]
   16828:	cmp	r6, #0
   1682c:	beq	168c0 <sprintf@plt+0x52c0>
   16830:	ldr	r7, [pc, #160]	; 168d8 <sprintf@plt+0x52d8>
   16834:	mov	r4, r6
   16838:	add	r7, pc, r7
   1683c:	b	1684c <sprintf@plt+0x524c>
   16840:	ldr	r4, [r4, #8]
   16844:	cmp	r4, #0
   16848:	beq	16878 <sprintf@plt+0x5278>
   1684c:	ldr	r5, [r4]
   16850:	mov	r1, r7
   16854:	ldr	r0, [r5, #16]
   16858:	bl	11330 <strcasecmp@plt>
   1685c:	cmp	r0, #0
   16860:	bne	16840 <sprintf@plt+0x5240>
   16864:	ldr	r3, [r5, #12]
   16868:	add	r3, r8, r3, lsl #4
   1686c:	ldr	r3, [r3, #12]
   16870:	cmp	r3, #2
   16874:	popne	{r4, r5, r6, r7, r8, r9, sl, pc}
   16878:	ldr	r5, [pc, #92]	; 168dc <sprintf@plt+0x52dc>
   1687c:	add	r5, pc, r5
   16880:	b	16890 <sprintf@plt+0x5290>
   16884:	ldr	r6, [r6, #8]
   16888:	cmp	r6, #0
   1688c:	beq	168c0 <sprintf@plt+0x52c0>
   16890:	ldr	r4, [r6]
   16894:	mov	r1, r5
   16898:	ldr	r0, [r4, #16]
   1689c:	bl	11330 <strcasecmp@plt>
   168a0:	cmp	r0, #0
   168a4:	bne	16884 <sprintf@plt+0x5284>
   168a8:	ldr	r3, [r4, #12]
   168ac:	add	r8, r8, r3, lsl #4
   168b0:	ldr	r3, [r8, #12]
   168b4:	cmp	r3, #2
   168b8:	beq	168c0 <sprintf@plt+0x52c0>
   168bc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   168c0:	mov	r0, r9
   168c4:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   168c8:	b	16468 <sprintf@plt+0x4e68>
   168cc:	andeq	r4, r1, r0, lsl r8
   168d0:	andeq	r0, r0, r8, lsl #3
   168d4:	andeq	r0, r0, r0, lsr #3
   168d8:	andeq	r3, r0, r0, ror #4
   168dc:	andeq	r3, r0, r4, lsr #4
   168e0:	ldr	r3, [pc, #300]	; 16a14 <sprintf@plt+0x5414>
   168e4:	push	{r4, r5, r6, r7, r8, lr}
   168e8:	add	r3, pc, r3
   168ec:	ldr	r4, [pc, #292]	; 16a18 <sprintf@plt+0x5418>
   168f0:	ldr	r3, [r3, #8]
   168f4:	add	r4, pc, r4
   168f8:	cmp	r3, #0
   168fc:	beq	169a4 <sprintf@plt+0x53a4>
   16900:	ldr	r2, [r0, #460]	; 0x1cc
   16904:	ldr	r3, [pc, #272]	; 16a1c <sprintf@plt+0x541c>
   16908:	add	r2, r2, #1
   1690c:	str	r2, [r0, #460]	; 0x1cc
   16910:	ldr	r3, [r4, r3]
   16914:	mov	r8, r0
   16918:	mov	r1, #16
   1691c:	mov	r0, #1
   16920:	ldr	r5, [r3, #12]
   16924:	bl	1133c <calloc@plt>
   16928:	cmp	r0, #0
   1692c:	beq	16a10 <sprintf@plt+0x5410>
   16930:	ldr	r2, [r8, #464]	; 0x1d0
   16934:	ldr	r3, [pc, #228]	; 16a20 <sprintf@plt+0x5420>
   16938:	add	r2, r2, r5, lsl #4
   1693c:	str	r0, [r2, #8]
   16940:	ldr	r3, [r4, r3]
   16944:	ldr	r6, [r3]
   16948:	cmp	r6, #0
   1694c:	beq	16a04 <sprintf@plt+0x5404>
   16950:	ldr	r7, [pc, #204]	; 16a24 <sprintf@plt+0x5424>
   16954:	mov	r4, r6
   16958:	add	r7, pc, r7
   1695c:	b	1696c <sprintf@plt+0x536c>
   16960:	ldr	r4, [r4, #8]
   16964:	cmp	r4, #0
   16968:	beq	169bc <sprintf@plt+0x53bc>
   1696c:	ldr	r5, [r4]
   16970:	mov	r1, r7
   16974:	ldr	r0, [r5, #16]
   16978:	bl	11330 <strcasecmp@plt>
   1697c:	cmp	r0, #0
   16980:	bne	16960 <sprintf@plt+0x5360>
   16984:	ldr	r2, [r5, #12]
   16988:	ldr	r3, [r8, #464]	; 0x1d0
   1698c:	add	r3, r3, r2, lsl #4
   16990:	ldr	r3, [r3, #12]
   16994:	cmp	r3, #2
   16998:	beq	169bc <sprintf@plt+0x53bc>
   1699c:	mov	r0, #1
   169a0:	pop	{r4, r5, r6, r7, r8, pc}
   169a4:	ldr	r3, [pc, #112]	; 16a1c <sprintf@plt+0x541c>
   169a8:	ldr	r3, [r4, r3]
   169ac:	ldr	r1, [r3, #12]
   169b0:	bl	12dec <sprintf@plt+0x17ec>
   169b4:	mov	r0, #1
   169b8:	pop	{r4, r5, r6, r7, r8, pc}
   169bc:	ldr	r5, [pc, #100]	; 16a28 <sprintf@plt+0x5428>
   169c0:	add	r5, pc, r5
   169c4:	b	169d4 <sprintf@plt+0x53d4>
   169c8:	ldr	r6, [r6, #8]
   169cc:	cmp	r6, #0
   169d0:	beq	16a04 <sprintf@plt+0x5404>
   169d4:	ldr	r4, [r6]
   169d8:	mov	r1, r5
   169dc:	ldr	r0, [r4, #16]
   169e0:	bl	11330 <strcasecmp@plt>
   169e4:	cmp	r0, #0
   169e8:	bne	169c8 <sprintf@plt+0x53c8>
   169ec:	ldr	r2, [r4, #12]
   169f0:	ldr	r3, [r8, #464]	; 0x1d0
   169f4:	add	r3, r3, r2, lsl #4
   169f8:	ldr	r3, [r3, #12]
   169fc:	cmp	r3, #2
   16a00:	bne	1699c <sprintf@plt+0x539c>
   16a04:	mov	r0, r8
   16a08:	bl	16468 <sprintf@plt+0x4e68>
   16a0c:	b	1699c <sprintf@plt+0x539c>
   16a10:	bl	114d4 <rb_outofmemory@plt>
   16a14:	andeq	r9, r1, r0, lsr r7
   16a18:	andeq	r4, r1, r4, lsl #14
   16a1c:	andeq	r0, r0, r8, lsl #3
   16a20:	andeq	r0, r0, r0, lsr #3
   16a24:	andeq	r3, r0, r0, asr #2
   16a28:	andeq	r3, r0, r0, ror #1
   16a2c:	ldr	r2, [r2]
   16a30:	ldr	r3, [pc, #24]	; 16a50 <sprintf@plt+0x5450>
   16a34:	ldrb	r2, [r2]
   16a38:	add	r3, pc, r3
   16a3c:	sub	r2, r2, #49	; 0x31
   16a40:	clz	r2, r2
   16a44:	lsr	r2, r2, #5
   16a48:	strb	r2, [r3]
   16a4c:	bx	lr
   16a50:	andeq	r5, r1, r8, ror #7
   16a54:	ldr	r0, [r2]
   16a58:	push	{r4, lr}
   16a5c:	mov	r1, #0
   16a60:	mov	r2, #10
   16a64:	bl	11468 <strtol@plt>
   16a68:	cmp	r0, #0
   16a6c:	blt	16a80 <sprintf@plt+0x5480>
   16a70:	ldr	r3, [pc, #36]	; 16a9c <sprintf@plt+0x549c>
   16a74:	add	r3, pc, r3
   16a78:	str	r0, [r3, #4]
   16a7c:	pop	{r4, pc}
   16a80:	ldr	r1, [pc, #24]	; 16aa0 <sprintf@plt+0x54a0>
   16a84:	mov	r2, r0
   16a88:	add	r1, pc, r1
   16a8c:	mov	r0, #67	; 0x43
   16a90:	bl	12370 <sprintf@plt+0xd70>
   16a94:	mov	r0, #3
   16a98:	bl	115e8 <exit@plt>
   16a9c:	andeq	r5, r1, ip, lsr #7
   16aa0:	andeq	r3, r0, ip, asr #32
   16aa4:	ldr	r3, [pc, #180]	; 16b60 <sprintf@plt+0x5560>
   16aa8:	ldr	r2, [pc, #180]	; 16b64 <sprintf@plt+0x5564>
   16aac:	add	r3, pc, r3
   16ab0:	push	{r4, r5, r6, r7, r8, lr}
   16ab4:	mov	r6, r1
   16ab8:	ldr	r5, [r3, r2]
   16abc:	ldr	ip, [r0, #464]	; 0x1d0
   16ac0:	ldr	r1, [pc, #160]	; 16b68 <sprintf@plt+0x5568>
   16ac4:	ldr	lr, [r5, #12]
   16ac8:	mov	r4, r0
   16acc:	mov	r2, #11
   16ad0:	add	r3, ip, lr, lsl #4
   16ad4:	add	r0, r0, #440	; 0x1b8
   16ad8:	ldr	r7, [r3, #8]
   16adc:	add	r1, pc, r1
   16ae0:	bl	113a8 <rb_strlcpy@plt>
   16ae4:	ldr	r0, [r7]
   16ae8:	cmp	r0, #0
   16aec:	beq	16af4 <sprintf@plt+0x54f4>
   16af0:	bl	1145c <rb_close@plt>
   16af4:	mov	r0, r7
   16af8:	bl	113cc <free@plt>
   16afc:	ldr	r3, [r5, #12]
   16b00:	ldr	r2, [r4, #464]	; 0x1d0
   16b04:	mov	ip, #0
   16b08:	lsl	r3, r3, #4
   16b0c:	add	r2, r2, r3
   16b10:	ldr	r1, [pc, #84]	; 16b6c <sprintf@plt+0x556c>
   16b14:	str	ip, [r2, #8]
   16b18:	ldr	r2, [r4, #464]	; 0x1d0
   16b1c:	add	r1, pc, r1
   16b20:	add	r3, r2, r3
   16b24:	ldr	r0, [r4]
   16b28:	ldr	r1, [r1, r6, lsl #2]
   16b2c:	str	ip, [r3, #4]
   16b30:	bl	122f8 <sprintf@plt+0xcf8>
   16b34:	ldr	r1, [r5, #12]
   16b38:	mov	r0, r4
   16b3c:	bl	12dec <sprintf@plt+0x17ec>
   16b40:	ldr	r3, [r4, #460]	; 0x1cc
   16b44:	sub	r3, r3, #1
   16b48:	cmp	r3, #0
   16b4c:	str	r3, [r4, #460]	; 0x1cc
   16b50:	popne	{r4, r5, r6, r7, r8, pc}
   16b54:	mov	r0, r4
   16b58:	pop	{r4, r5, r6, r7, r8, lr}
   16b5c:	b	128fc <sprintf@plt+0x12fc>
   16b60:	andeq	r4, r1, ip, asr #10
   16b64:	andeq	r0, r0, r4, ror #2
   16b68:	andeq	r2, r0, r8, asr #18
   16b6c:			; <UNDEFINED> instruction: 0x000143bc
   16b70:	ldr	r3, [pc, #40]	; 16ba0 <sprintf@plt+0x55a0>
   16b74:	ldr	r1, [pc, #40]	; 16ba4 <sprintf@plt+0x55a4>
   16b78:	add	r3, pc, r3
   16b7c:	ldr	r2, [r0, #464]	; 0x1d0
   16b80:	ldr	r3, [r3, r1]
   16b84:	ldr	r3, [r3, #12]
   16b88:	add	r3, r2, r3, lsl #4
   16b8c:	ldr	r3, [r3, #8]
   16b90:	cmp	r3, #0
   16b94:	bxeq	lr
   16b98:	mov	r1, #2
   16b9c:	b	16aa4 <sprintf@plt+0x54a4>
   16ba0:	andeq	r4, r1, r0, lsl #9
   16ba4:	andeq	r0, r0, r4, ror #2
   16ba8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16bac:	sub	sp, sp, #136	; 0x88
   16bb0:	add	r6, sp, #4
   16bb4:	mov	r7, r0
   16bb8:	mov	r2, #129	; 0x81
   16bbc:	mov	r4, r1
   16bc0:	mov	r0, r6
   16bc4:	mov	r1, #0
   16bc8:	bl	1136c <memset@plt>
   16bcc:	mov	r1, r6
   16bd0:	mov	r0, r7
   16bd4:	mov	r2, #128	; 0x80
   16bd8:	bl	113e4 <rb_read@plt>
   16bdc:	ldr	r5, [pc, #568]	; 16e1c <sprintf@plt+0x581c>
   16be0:	add	r5, pc, r5
   16be4:	cmp	r0, #0
   16be8:	blt	16dd0 <sprintf@plt+0x57d0>
   16bec:	beq	16de4 <sprintf@plt+0x57e4>
   16bf0:	mov	r1, #58	; 0x3a
   16bf4:	mov	r0, r6
   16bf8:	bl	11318 <strchr@plt>
   16bfc:	subs	r7, r0, #0
   16c00:	beq	16df8 <sprintf@plt+0x57f8>
   16c04:	mov	r8, #0
   16c08:	strb	r8, [r7], #1
   16c0c:	mov	r1, #58	; 0x3a
   16c10:	mov	r0, r7
   16c14:	bl	11318 <strchr@plt>
   16c18:	subs	sl, r0, #0
   16c1c:	beq	16df8 <sprintf@plt+0x57f8>
   16c20:	strb	r8, [sl]
   16c24:	mov	r1, #44	; 0x2c
   16c28:	mov	r0, r6
   16c2c:	bl	11318 <strchr@plt>
   16c30:	subs	r9, r0, #0
   16c34:	beq	16df8 <sprintf@plt+0x57f8>
   16c38:	mov	r0, r6
   16c3c:	strb	r8, [r9], #1
   16c40:	mov	r2, #10
   16c44:	mov	r1, r8
   16c48:	bl	11468 <strtol@plt>
   16c4c:	cmp	r0, r8
   16c50:	beq	16df8 <sprintf@plt+0x57f8>
   16c54:	mov	r0, r9
   16c58:	mov	r2, #10
   16c5c:	mov	r1, r8
   16c60:	bl	11468 <strtol@plt>
   16c64:	cmp	r0, r8
   16c68:	beq	16df8 <sprintf@plt+0x57f8>
   16c6c:	ldr	r1, [pc, #428]	; 16e20 <sprintf@plt+0x5820>
   16c70:	mov	r0, r7
   16c74:	add	r1, pc, r1
   16c78:	bl	114a4 <strstr@plt>
   16c7c:	cmp	r0, r8
   16c80:	beq	16df8 <sprintf@plt+0x57f8>
   16c84:	add	r0, sl, #1
   16c88:	mov	r1, #58	; 0x3a
   16c8c:	bl	11318 <strchr@plt>
   16c90:	cmp	r0, #0
   16c94:	beq	16df8 <sprintf@plt+0x57f8>
   16c98:	mov	r2, r0
   16c9c:	strb	r8, [r2], #1
   16ca0:	cmp	r2, r8
   16ca4:	beq	16df8 <sprintf@plt+0x57f8>
   16ca8:	ldrb	r3, [r0, #1]
   16cac:	add	ip, r4, #440	; 0x1b8
   16cb0:	and	r1, r3, #223	; 0xdf
   16cb4:	cmp	r1, #94	; 0x5e
   16cb8:	bne	16ccc <sprintf@plt+0x56cc>
   16cbc:	ldrb	r3, [r2, #1]!
   16cc0:	and	r1, r3, #223	; 0xdf
   16cc4:	cmp	r1, #94	; 0x5e
   16cc8:	beq	16cbc <sprintf@plt+0x56bc>
   16ccc:	tst	r3, #191	; 0xbf
   16cd0:	beq	16d34 <sprintf@plt+0x5734>
   16cd4:	cmp	r3, #13
   16cd8:	cmpne	r3, #10
   16cdc:	beq	16d34 <sprintf@plt+0x5734>
   16ce0:	mov	r0, #10
   16ce4:	b	16cf4 <sprintf@plt+0x56f4>
   16ce8:	cmp	r3, #10
   16cec:	cmpne	r3, #13
   16cf0:	beq	16d34 <sprintf@plt+0x5734>
   16cf4:	cmp	r3, #32
   16cf8:	cmpne	r3, #58	; 0x3a
   16cfc:	movne	r1, #1
   16d00:	moveq	r1, #0
   16d04:	cmp	r3, #91	; 0x5b
   16d08:	moveq	r1, #0
   16d0c:	andne	r1, r1, #1
   16d10:	cmp	r1, #0
   16d14:	strbne	r3, [ip]
   16d18:	ldrb	r3, [r2, #1]!
   16d1c:	subne	r0, r0, #1
   16d20:	addne	ip, ip, #1
   16d24:	and	r1, r3, #191	; 0xbf
   16d28:	cmp	r0, #0
   16d2c:	cmpne	r1, #0
   16d30:	bne	16ce8 <sprintf@plt+0x56e8>
   16d34:	ldr	r3, [pc, #232]	; 16e24 <sprintf@plt+0x5824>
   16d38:	mov	r2, #0
   16d3c:	strb	r2, [ip]
   16d40:	ldr	r5, [r5, r3]
   16d44:	ldr	r3, [r4, #464]	; 0x1d0
   16d48:	ldr	r2, [r5, #12]
   16d4c:	add	r3, r3, r2, lsl #4
   16d50:	ldr	r6, [r3, #8]
   16d54:	ldr	r0, [r6]
   16d58:	cmp	r0, #0
   16d5c:	beq	16d64 <sprintf@plt+0x5764>
   16d60:	bl	1145c <rb_close@plt>
   16d64:	mov	r0, r6
   16d68:	bl	113cc <free@plt>
   16d6c:	ldr	r3, [r5, #12]
   16d70:	ldr	r2, [r4, #464]	; 0x1d0
   16d74:	mov	ip, #0
   16d78:	lsl	r3, r3, #4
   16d7c:	add	r2, r2, r3
   16d80:	ldr	r1, [pc, #160]	; 16e28 <sprintf@plt+0x5828>
   16d84:	str	ip, [r2, #8]
   16d88:	ldr	r2, [r4, #464]	; 0x1d0
   16d8c:	ldr	r0, [r4]
   16d90:	add	r3, r2, r3
   16d94:	add	r1, pc, r1
   16d98:	str	ip, [r3, #4]
   16d9c:	bl	122f8 <sprintf@plt+0xcf8>
   16da0:	ldr	r1, [r5, #12]
   16da4:	mov	r0, r4
   16da8:	bl	12dec <sprintf@plt+0x17ec>
   16dac:	ldr	r3, [r4, #460]	; 0x1cc
   16db0:	sub	r3, r3, #1
   16db4:	cmp	r3, #0
   16db8:	str	r3, [r4, #460]	; 0x1cc
   16dbc:	bne	16dc8 <sprintf@plt+0x57c8>
   16dc0:	mov	r0, r4
   16dc4:	bl	128fc <sprintf@plt+0x12fc>
   16dc8:	add	sp, sp, #136	; 0x88
   16dcc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16dd0:	bl	115f4 <__errno_location@plt>
   16dd4:	ldr	r0, [r0]
   16dd8:	bl	11270 <rb_ignore_errno@plt>
   16ddc:	cmp	r0, #0
   16de0:	bne	16e00 <sprintf@plt+0x5800>
   16de4:	mov	r1, #2
   16de8:	mov	r0, r4
   16dec:	bl	16aa4 <sprintf@plt+0x54a4>
   16df0:	add	sp, sp, #136	; 0x88
   16df4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16df8:	mov	r1, #3
   16dfc:	b	16de8 <sprintf@plt+0x57e8>
   16e00:	ldr	r2, [pc, #36]	; 16e2c <sprintf@plt+0x582c>
   16e04:	mov	r3, r4
   16e08:	mov	r0, r7
   16e0c:	add	r2, pc, r2
   16e10:	mov	r1, #1
   16e14:	bl	112b8 <rb_setselect@plt>
   16e18:	b	16dc8 <sprintf@plt+0x57c8>
   16e1c:	andeq	r4, r1, r8, lsl r4
   16e20:	andeq	r2, r0, r8, lsl #29
   16e24:	andeq	r0, r0, r4, ror #2
   16e28:	andeq	r2, r0, r0, ror sp
   16e2c:			; <UNDEFINED> instruction: 0xfffffd94
   16e30:	push	{r4, r5, r6, r7, lr}
   16e34:	mov	r4, r2
   16e38:	ldr	r2, [pc, #144]	; 16ed0 <sprintf@plt+0x58d0>
   16e3c:	cmp	r1, #0
   16e40:	sub	sp, sp, #44	; 0x2c
   16e44:	add	r2, pc, r2
   16e48:	bne	16eac <sprintf@plt+0x58ac>
   16e4c:	ldr	r0, [pc, #128]	; 16ed4 <sprintf@plt+0x58d4>
   16e50:	ldr	r1, [r4, #464]	; 0x1d0
   16e54:	ldrh	ip, [r4, #62]	; 0x3e
   16e58:	ldr	r2, [r2, r0]
   16e5c:	add	r5, sp, #8
   16e60:	ldrh	r3, [r4, #246]	; 0xf6
   16e64:	ldr	r2, [r2, #12]
   16e68:	mov	r0, r5
   16e6c:	add	r1, r1, r2, lsl #4
   16e70:	ldr	r2, [pc, #96]	; 16ed8 <sprintf@plt+0x58d8>
   16e74:	ldr	r7, [r1, #8]
   16e78:	add	r2, pc, r2
   16e7c:	str	ip, [sp]
   16e80:	mov	r1, #32
   16e84:	bl	11594 <snprintf@plt>
   16e88:	mov	r0, r5
   16e8c:	bl	11420 <strlen@plt>
   16e90:	mov	r1, r5
   16e94:	mov	r6, r0
   16e98:	mov	r2, r0
   16e9c:	ldr	r0, [r7]
   16ea0:	bl	11390 <rb_write@plt>
   16ea4:	cmp	r6, r0
   16ea8:	beq	16ec0 <sprintf@plt+0x58c0>
   16eac:	mov	r0, r4
   16eb0:	mov	r1, #2
   16eb4:	bl	16aa4 <sprintf@plt+0x54a4>
   16eb8:	add	sp, sp, #44	; 0x2c
   16ebc:	pop	{r4, r5, r6, r7, pc}
   16ec0:	mov	r1, r4
   16ec4:	ldr	r0, [r7]
   16ec8:	bl	16ba8 <sprintf@plt+0x55a8>
   16ecc:	b	16eb8 <sprintf@plt+0x58b8>
   16ed0:			; <UNDEFINED> instruction: 0x000141b4
   16ed4:	andeq	r0, r0, r4, ror #2
   16ed8:	andeq	r2, r0, r4, lsr #25
   16edc:	push	{r4, r5, r6, r7, r8, lr}
   16ee0:	mov	r1, #4
   16ee4:	sub	sp, sp, #264	; 0x108
   16ee8:	mov	r4, r0
   16eec:	mov	r0, #1
   16ef0:	bl	1133c <calloc@plt>
   16ef4:	ldr	r5, [pc, #368]	; 1706c <sprintf@plt+0x5a6c>
   16ef8:	add	r5, pc, r5
   16efc:	subs	r7, r0, #0
   16f00:	beq	17038 <sprintf@plt+0x5a38>
   16f04:	ldr	r6, [pc, #356]	; 17070 <sprintf@plt+0x5a70>
   16f08:	add	r6, pc, r6
   16f0c:	ldrb	r3, [r6]
   16f10:	cmp	r3, #0
   16f14:	bne	16f4c <sprintf@plt+0x594c>
   16f18:	bl	113cc <free@plt>
   16f1c:	ldr	r1, [pc, #336]	; 17074 <sprintf@plt+0x5a74>
   16f20:	ldr	r0, [r4]
   16f24:	add	r1, pc, r1
   16f28:	bl	122f8 <sprintf@plt+0xcf8>
   16f2c:	ldr	r3, [pc, #324]	; 17078 <sprintf@plt+0x5a78>
   16f30:	mov	r0, r4
   16f34:	ldr	r3, [r5, r3]
   16f38:	ldr	r1, [r3, #12]
   16f3c:	bl	12dec <sprintf@plt+0x17ec>
   16f40:	mov	r0, #1
   16f44:	add	sp, sp, #264	; 0x108
   16f48:	pop	{r4, r5, r6, r7, r8, pc}
   16f4c:	ldr	r3, [r4, #460]	; 0x1cc
   16f50:	ldr	r1, [pc, #292]	; 1707c <sprintf@plt+0x5a7c>
   16f54:	add	r3, r3, #1
   16f58:	add	r1, pc, r1
   16f5c:	str	r3, [r4, #460]	; 0x1cc
   16f60:	ldr	r0, [r4]
   16f64:	ldrh	r8, [r4, #248]	; 0xf8
   16f68:	bl	122f8 <sprintf@plt+0xcf8>
   16f6c:	ldr	r3, [pc, #260]	; 17078 <sprintf@plt+0x5a78>
   16f70:	ldr	r2, [r4, #464]	; 0x1d0
   16f74:	ldr	r6, [r6, #4]
   16f78:	ldr	r3, [r5, r3]
   16f7c:	ldr	r3, [r3, #12]
   16f80:	lsl	r3, r3, #4
   16f84:	add	r2, r2, r3
   16f88:	str	r7, [r2, #8]
   16f8c:	ldr	r5, [r4, #464]	; 0x1d0
   16f90:	add	r5, r5, r3
   16f94:	bl	1142c <rb_current_time@plt>
   16f98:	ldr	r3, [pc, #224]	; 17080 <sprintf@plt+0x5a80>
   16f9c:	ldr	r2, [r4, #4]
   16fa0:	add	r3, pc, r3
   16fa4:	mov	r1, #1
   16fa8:	add	r0, r6, r0
   16fac:	str	r0, [r5, #4]
   16fb0:	mov	r0, r8
   16fb4:	bl	112e8 <rb_socket@plt>
   16fb8:	cmp	r0, #0
   16fbc:	mov	r6, r0
   16fc0:	str	r0, [r7]
   16fc4:	beq	1703c <sprintf@plt+0x5a3c>
   16fc8:	add	r5, sp, #8
   16fcc:	add	r1, r4, #64	; 0x40
   16fd0:	add	r7, sp, #136	; 0x88
   16fd4:	mov	r0, r5
   16fd8:	mov	r2, #128	; 0x80
   16fdc:	bl	11444 <memcpy@plt>
   16fe0:	add	r1, r4, #248	; 0xf8
   16fe4:	mov	r0, r7
   16fe8:	mov	r2, #128	; 0x80
   16fec:	bl	11444 <memcpy@plt>
   16ff0:	mov	r3, #0
   16ff4:	strh	r3, [r5, #2]
   16ff8:	mov	r3, #28928	; 0x7100
   16ffc:	strh	r3, [sp, #138]	; 0x8a
   17000:	ldr	r3, [pc, #124]	; 17084 <sprintf@plt+0x5a84>
   17004:	str	r4, [sp]
   17008:	add	r3, pc, r3
   1700c:	mov	r0, r6
   17010:	ldr	r3, [r3, #4]
   17014:	mov	r2, r5
   17018:	str	r3, [sp, #4]
   1701c:	ldr	r3, [pc, #100]	; 17088 <sprintf@plt+0x5a88>
   17020:	mov	r1, r7
   17024:	add	r3, pc, r3
   17028:	bl	11288 <rb_connect_tcp@plt>
   1702c:	mov	r0, #1
   17030:	add	sp, sp, #264	; 0x108
   17034:	pop	{r4, r5, r6, r7, r8, pc}
   17038:	bl	114d4 <rb_outofmemory@plt>
   1703c:	bl	115f4 <__errno_location@plt>
   17040:	ldr	r0, [r0]
   17044:	bl	11234 <strerror@plt>
   17048:	ldr	r1, [pc, #60]	; 1708c <sprintf@plt+0x5a8c>
   1704c:	add	r1, pc, r1
   17050:	mov	r2, r0
   17054:	mov	r0, #68	; 0x44
   17058:	bl	12370 <sprintf@plt+0xd70>
   1705c:	mov	r0, r4
   17060:	mov	r1, #2
   17064:	bl	16aa4 <sprintf@plt+0x54a4>
   17068:	b	16f40 <sprintf@plt+0x5940>
   1706c:	andeq	r4, r1, r0, lsl #2
   17070:	andeq	r4, r1, r8, lsl pc
   17074:	andeq	r2, r0, r4, lsl #24
   17078:	andeq	r0, r0, r4, ror #2
   1707c:	strdeq	r2, [r0], -r8
   17080:	andeq	r2, r0, r0, lsl #22
   17084:	andeq	r4, r1, r8, lsl lr
   17088:			; <UNDEFINED> instruction: 0xfffffe04
   1708c:	andeq	r2, r0, r8, lsl fp
   17090:	push	{r4, r5, r6, r7, lr}
   17094:	sub	sp, sp, #12
   17098:	ldr	r6, [pc, #112]	; 17110 <sprintf@plt+0x5b10>
   1709c:	ldr	r3, [pc, #112]	; 17114 <sprintf@plt+0x5b14>
   170a0:	add	r6, pc, r6
   170a4:	mov	r1, sp
   170a8:	ldr	r4, [r6, r3]
   170ac:	mov	r5, sp
   170b0:	mov	r7, #2
   170b4:	ldr	r0, [r4]
   170b8:	bl	11408 <rb_dictionary_foreach_start@plt>
   170bc:	b	170ec <sprintf@plt+0x5aec>
   170c0:	ldr	r2, [r6, r2]
   170c4:	ldr	r3, [r3, #464]	; 0x1d0
   170c8:	ldr	r2, [r2, #12]
   170cc:	add	r3, r3, r2, lsl #4
   170d0:	ldr	r3, [r3, #8]
   170d4:	cmp	r3, #0
   170d8:	beq	170e0 <sprintf@plt+0x5ae0>
   170dc:	bl	16aa4 <sprintf@plt+0x54a4>
   170e0:	mov	r1, r5
   170e4:	ldr	r0, [r4]
   170e8:	bl	113c0 <rb_dictionary_foreach_next@plt>
   170ec:	mov	r1, r5
   170f0:	ldr	r0, [r4]
   170f4:	bl	11324 <rb_dictionary_foreach_cur@plt>
   170f8:	mov	r1, r7
   170fc:	ldr	r2, [pc, #20]	; 17118 <sprintf@plt+0x5b18>
   17100:	subs	r3, r0, #0
   17104:	bne	170c0 <sprintf@plt+0x5ac0>
   17108:	add	sp, sp, #12
   1710c:	pop	{r4, r5, r6, r7, pc}
   17110:	andeq	r3, r1, r8, asr pc
   17114:	andeq	r0, r0, r8, asr r1
   17118:	andeq	r0, r0, r4, ror #2
   1711c:	ldr	r0, [r2]
   17120:	push	{r4, lr}
   17124:	mov	r1, #0
   17128:	mov	r2, #10
   1712c:	bl	11468 <strtol@plt>
   17130:	cmp	r0, #0
   17134:	blt	17148 <sprintf@plt+0x5b48>
   17138:	ldr	r3, [pc, #36]	; 17164 <sprintf@plt+0x5b64>
   1713c:	add	r3, pc, r3
   17140:	str	r0, [r3]
   17144:	pop	{r4, pc}
   17148:	ldr	r1, [pc, #24]	; 17168 <sprintf@plt+0x5b68>
   1714c:	mov	r2, r0
   17150:	add	r1, pc, r1
   17154:	mov	r0, #67	; 0x43
   17158:	bl	12370 <sprintf@plt+0xd70>
   1715c:	mov	r0, #3
   17160:	bl	115e8 <exit@plt>
   17164:	andeq	r4, r1, ip, asr #26
   17168:	andeq	r2, r0, r4, lsr #21
   1716c:	ldr	r3, [pc, #168]	; 1721c <sprintf@plt+0x5c1c>
   17170:	ldr	r2, [pc, #168]	; 17220 <sprintf@plt+0x5c20>
   17174:	add	r3, pc, r3
   17178:	push	{r4, r5, r6, r7, r8, lr}
   1717c:	mov	r5, r1
   17180:	ldr	r6, [r3, r2]
   17184:	ldr	ip, [r0, #464]	; 0x1d0
   17188:	ldr	r1, [pc, #148]	; 17224 <sprintf@plt+0x5c24>
   1718c:	ldr	lr, [r6, #12]
   17190:	mov	r4, r0
   17194:	mov	r2, #64	; 0x40
   17198:	add	r3, ip, lr, lsl #4
   1719c:	add	r1, pc, r1
   171a0:	add	r0, r0, #376	; 0x178
   171a4:	ldr	r7, [r3, #8]
   171a8:	bl	113a8 <rb_strlcpy@plt>
   171ac:	ldr	r3, [pc, #116]	; 17228 <sprintf@plt+0x5c28>
   171b0:	ldr	r0, [r4]
   171b4:	add	r3, pc, r3
   171b8:	ldr	r1, [r3, r5, lsl #2]
   171bc:	bl	122f8 <sprintf@plt+0xcf8>
   171c0:	ldr	r0, [r7]
   171c4:	bl	12034 <sprintf@plt+0xa34>
   171c8:	mov	r0, r7
   171cc:	bl	113cc <free@plt>
   171d0:	ldr	r1, [r6, #12]
   171d4:	ldr	r2, [r4, #464]	; 0x1d0
   171d8:	mov	ip, #0
   171dc:	lsl	lr, r1, #4
   171e0:	add	r2, r2, lr
   171e4:	mov	r0, r4
   171e8:	str	ip, [r2, #8]
   171ec:	ldr	r3, [r4, #464]	; 0x1d0
   171f0:	add	r3, r3, lr
   171f4:	str	ip, [r3, #4]
   171f8:	bl	12dec <sprintf@plt+0x17ec>
   171fc:	ldr	r3, [r4, #460]	; 0x1cc
   17200:	sub	r3, r3, #1
   17204:	cmp	r3, #0
   17208:	str	r3, [r4, #460]	; 0x1cc
   1720c:	popne	{r4, r5, r6, r7, r8, pc}
   17210:	mov	r0, r4
   17214:	pop	{r4, r5, r6, r7, r8, lr}
   17218:	b	128fc <sprintf@plt+0x12fc>
   1721c:	andeq	r3, r1, r4, lsl #29
   17220:	andeq	r0, r0, r8, ror #2
   17224:	andeq	r2, r0, r8, lsl #5
   17228:	andeq	r3, r1, r8, lsr sp
   1722c:	ldr	r3, [pc, #40]	; 1725c <sprintf@plt+0x5c5c>
   17230:	ldr	r1, [pc, #40]	; 17260 <sprintf@plt+0x5c60>
   17234:	add	r3, pc, r3
   17238:	ldr	r2, [r0, #464]	; 0x1d0
   1723c:	ldr	r3, [r3, r1]
   17240:	ldr	r3, [r3, #12]
   17244:	add	r3, r2, r3, lsl #4
   17248:	ldr	r3, [r3, #8]
   1724c:	cmp	r3, #0
   17250:	bxeq	lr
   17254:	mov	r1, #1
   17258:	b	1716c <sprintf@plt+0x5b6c>
   1725c:	andeq	r3, r1, r4, asr #27
   17260:	andeq	r0, r0, r8, ror #2
   17264:	push	{r4, r5, r6, r7, r8, lr}
   17268:	mov	r1, #4
   1726c:	mov	r4, r0
   17270:	mov	r0, #1
   17274:	bl	1133c <calloc@plt>
   17278:	ldr	r1, [pc, #132]	; 17304 <sprintf@plt+0x5d04>
   1727c:	add	r1, pc, r1
   17280:	subs	r7, r0, #0
   17284:	beq	17300 <sprintf@plt+0x5d00>
   17288:	ldr	r2, [r4, #460]	; 0x1cc
   1728c:	ldr	r3, [pc, #116]	; 17308 <sprintf@plt+0x5d08>
   17290:	add	r2, r2, #1
   17294:	str	r2, [r4, #460]	; 0x1cc
   17298:	ldr	r3, [r1, r3]
   1729c:	ldr	r2, [r4, #464]	; 0x1d0
   172a0:	ldr	r1, [pc, #100]	; 1730c <sprintf@plt+0x5d0c>
   172a4:	ldr	r3, [r3, #12]
   172a8:	add	r1, pc, r1
   172ac:	lsl	r3, r3, #4
   172b0:	add	r2, r2, r3
   172b4:	ldr	r6, [r1]
   172b8:	str	r7, [r2, #8]
   172bc:	ldr	r5, [r4, #464]	; 0x1d0
   172c0:	add	r5, r5, r3
   172c4:	bl	1142c <rb_current_time@plt>
   172c8:	ldr	r1, [pc, #64]	; 17310 <sprintf@plt+0x5d10>
   172cc:	mov	r2, r4
   172d0:	add	r1, pc, r1
   172d4:	add	r0, r6, r0
   172d8:	str	r0, [r5, #4]
   172dc:	add	r0, r4, #192	; 0xc0
   172e0:	bl	11f64 <sprintf@plt+0x964>
   172e4:	ldr	r1, [pc, #40]	; 17314 <sprintf@plt+0x5d14>
   172e8:	add	r1, pc, r1
   172ec:	str	r0, [r7]
   172f0:	ldr	r0, [r4]
   172f4:	bl	122f8 <sprintf@plt+0xcf8>
   172f8:	mov	r0, #1
   172fc:	pop	{r4, r5, r6, r7, r8, pc}
   17300:	bl	114d4 <rb_outofmemory@plt>
   17304:	andeq	r3, r1, ip, ror sp
   17308:	andeq	r0, r0, r8, ror #2
   1730c:	andeq	r4, r1, r0, ror #23
   17310:	andeq	r0, r0, ip, asr #1
   17314:	andeq	r2, r0, r0, lsr r9
   17318:	push	{r4, r5, r6, r7, lr}
   1731c:	sub	sp, sp, #12
   17320:	ldr	r6, [pc, #112]	; 17398 <sprintf@plt+0x5d98>
   17324:	ldr	r3, [pc, #112]	; 1739c <sprintf@plt+0x5d9c>
   17328:	add	r6, pc, r6
   1732c:	mov	r1, sp
   17330:	ldr	r4, [r6, r3]
   17334:	mov	r5, sp
   17338:	mov	r7, #1
   1733c:	ldr	r0, [r4]
   17340:	bl	11408 <rb_dictionary_foreach_start@plt>
   17344:	b	17374 <sprintf@plt+0x5d74>
   17348:	ldr	r2, [r6, r2]
   1734c:	ldr	r3, [r3, #464]	; 0x1d0
   17350:	ldr	r2, [r2, #12]
   17354:	add	r3, r3, r2, lsl #4
   17358:	ldr	r3, [r3, #8]
   1735c:	cmp	r3, #0
   17360:	beq	17368 <sprintf@plt+0x5d68>
   17364:	bl	1716c <sprintf@plt+0x5b6c>
   17368:	mov	r1, r5
   1736c:	ldr	r0, [r4]
   17370:	bl	113c0 <rb_dictionary_foreach_next@plt>
   17374:	mov	r1, r5
   17378:	ldr	r0, [r4]
   1737c:	bl	11324 <rb_dictionary_foreach_cur@plt>
   17380:	mov	r1, r7
   17384:	ldr	r2, [pc, #20]	; 173a0 <sprintf@plt+0x5da0>
   17388:	subs	r3, r0, #0
   1738c:	bne	17348 <sprintf@plt+0x5d48>
   17390:	add	sp, sp, #12
   17394:	pop	{r4, r5, r6, r7, pc}
   17398:	ldrdeq	r3, [r1], -r0
   1739c:	andeq	r0, r0, r8, asr r1
   173a0:	andeq	r0, r0, r8, ror #2
   173a4:	eor	r1, r1, #1
   173a8:	push	{r4, r5, r6, r7, r8, lr}
   173ac:	cmp	r0, #0
   173b0:	movne	r5, r1
   173b4:	orreq	r5, r1, #1
   173b8:	ldr	r7, [pc, #220]	; 1749c <sprintf@plt+0x5e9c>
   173bc:	cmp	r5, #0
   173c0:	add	r7, pc, r7
   173c4:	bne	1748c <sprintf@plt+0x5e8c>
   173c8:	mov	r6, r0
   173cc:	mov	r4, r3
   173d0:	bl	11420 <strlen@plt>
   173d4:	cmp	r0, #63	; 0x3f
   173d8:	bhi	1747c <sprintf@plt+0x5e7c>
   173dc:	add	r3, r4, #376	; 0x178
   173e0:	mov	r1, r6
   173e4:	mov	r0, r3
   173e8:	mov	r2, #64	; 0x40
   173ec:	mov	r6, r3
   173f0:	bl	113a8 <rb_strlcpy@plt>
   173f4:	ldr	r1, [pc, #164]	; 174a0 <sprintf@plt+0x5ea0>
   173f8:	mov	r2, r6
   173fc:	ldr	r3, [r4, #464]	; 0x1d0
   17400:	ldr	r6, [r7, r1]
   17404:	ldr	r1, [pc, #152]	; 174a4 <sprintf@plt+0x5ea4>
   17408:	ldr	r0, [r4]
   1740c:	ldr	ip, [r6, #12]
   17410:	add	r1, pc, r1
   17414:	add	r3, r3, ip, lsl #4
   17418:	ldr	r7, [r3, #8]
   1741c:	bl	122f8 <sprintf@plt+0xcf8>
   17420:	ldr	r0, [r7]
   17424:	bl	12034 <sprintf@plt+0xa34>
   17428:	mov	r0, r7
   1742c:	bl	113cc <free@plt>
   17430:	ldr	r3, [r6, #12]
   17434:	ldr	r2, [r4, #464]	; 0x1d0
   17438:	mov	r1, r3
   1743c:	lsl	r3, r3, #4
   17440:	add	r2, r2, r3
   17444:	mov	r0, r4
   17448:	str	r5, [r2, #8]
   1744c:	ldr	r2, [r4, #464]	; 0x1d0
   17450:	add	r3, r2, r3
   17454:	str	r5, [r3, #4]
   17458:	bl	12dec <sprintf@plt+0x17ec>
   1745c:	ldr	r3, [r4, #460]	; 0x1cc
   17460:	sub	r3, r3, #1
   17464:	cmp	r3, #0
   17468:	str	r3, [r4, #460]	; 0x1cc
   1746c:	popne	{r4, r5, r6, r7, r8, pc}
   17470:	mov	r0, r4
   17474:	pop	{r4, r5, r6, r7, r8, lr}
   17478:	b	128fc <sprintf@plt+0x12fc>
   1747c:	mov	r0, r4
   17480:	mov	r1, #2
   17484:	pop	{r4, r5, r6, r7, r8, lr}
   17488:	b	1716c <sprintf@plt+0x5b6c>
   1748c:	mov	r0, r3
   17490:	mov	r1, #1
   17494:	pop	{r4, r5, r6, r7, r8, lr}
   17498:	b	1716c <sprintf@plt+0x5b6c>
   1749c:	andeq	r3, r1, r8, lsr ip
   174a0:	andeq	r0, r0, r8, ror #2
   174a4:	andeq	r2, r0, r8, lsr #16
   174a8:	ldr	r3, [pc, #196]	; 17574 <sprintf@plt+0x5f74>
   174ac:	ldr	r2, [pc, #196]	; 17578 <sprintf@plt+0x5f78>
   174b0:	add	r3, pc, r3
   174b4:	push	{r4, r5, r6, r7, r8, lr}
   174b8:	ldr	r8, [r3, r2]
   174bc:	ldr	r3, [r0, #464]	; 0x1d0
   174c0:	ldr	r2, [r8, #12]
   174c4:	add	r3, r3, r2, lsl #4
   174c8:	ldr	r7, [r3, #8]
   174cc:	cmp	r7, #0
   174d0:	popeq	{r4, r5, r6, r7, r8, pc}
   174d4:	ldr	r1, [pc, #160]	; 1757c <sprintf@plt+0x5f7c>
   174d8:	mov	r6, r0
   174dc:	add	r1, pc, r1
   174e0:	ldr	r0, [r0]
   174e4:	bl	122f8 <sprintf@plt+0xcf8>
   174e8:	ldr	r3, [r7]
   174ec:	cmp	r3, #0
   174f0:	beq	17520 <sprintf@plt+0x5f20>
   174f4:	ldr	r4, [r3, #8]
   174f8:	b	17504 <sprintf@plt+0x5f04>
   174fc:	mov	r3, r4
   17500:	ldr	r4, [r4, #8]
   17504:	ldr	r5, [r3]
   17508:	ldr	r0, [r5, #4]
   1750c:	bl	1145c <rb_close@plt>
   17510:	mov	r0, r5
   17514:	bl	113cc <free@plt>
   17518:	cmp	r4, #0
   1751c:	bne	174fc <sprintf@plt+0x5efc>
   17520:	mov	r0, r7
   17524:	bl	113cc <free@plt>
   17528:	ldr	r1, [r8, #12]
   1752c:	ldr	r2, [r6, #464]	; 0x1d0
   17530:	mov	ip, #0
   17534:	lsl	lr, r1, #4
   17538:	add	r2, r2, lr
   1753c:	mov	r0, r6
   17540:	str	ip, [r2, #8]
   17544:	ldr	r3, [r6, #464]	; 0x1d0
   17548:	add	r3, r3, lr
   1754c:	str	ip, [r3, #4]
   17550:	bl	12dec <sprintf@plt+0x17ec>
   17554:	ldr	r3, [r6, #460]	; 0x1cc
   17558:	sub	r3, r3, #1
   1755c:	cmp	r3, #0
   17560:	str	r3, [r6, #460]	; 0x1cc
   17564:	popne	{r4, r5, r6, r7, r8, pc}
   17568:	mov	r0, r6
   1756c:	pop	{r4, r5, r6, r7, r8, lr}
   17570:	b	128fc <sprintf@plt+0x12fc>
   17574:	andeq	r3, r1, r8, asr #22
   17578:	andeq	r0, r0, r4, lsl #3
   1757c:	andeq	r2, r0, r4, lsl #16
   17580:	ldr	r3, [pc, #80]	; 175d8 <sprintf@plt+0x5fd8>
   17584:	ldr	r2, [pc, #80]	; 175dc <sprintf@plt+0x5fdc>
   17588:	add	r3, pc, r3
   1758c:	push	{r4, r5, lr}
   17590:	sub	sp, sp, #12
   17594:	ldr	r4, [r3, r2]
   17598:	mov	r1, sp
   1759c:	mov	r5, sp
   175a0:	ldr	r0, [r4]
   175a4:	bl	11408 <rb_dictionary_foreach_start@plt>
   175a8:	b	175bc <sprintf@plt+0x5fbc>
   175ac:	bl	174a8 <sprintf@plt+0x5ea8>
   175b0:	mov	r1, r5
   175b4:	ldr	r0, [r4]
   175b8:	bl	113c0 <rb_dictionary_foreach_next@plt>
   175bc:	mov	r1, r5
   175c0:	ldr	r0, [r4]
   175c4:	bl	11324 <rb_dictionary_foreach_cur@plt>
   175c8:	cmp	r0, #0
   175cc:	bne	175ac <sprintf@plt+0x5fac>
   175d0:	add	sp, sp, #12
   175d4:	pop	{r4, r5, pc}
   175d8:	andeq	r3, r1, r0, ror sl
   175dc:	andeq	r0, r0, r8, asr r1
   175e0:	ldr	r0, [r2]
   175e4:	push	{r4, lr}
   175e8:	mov	r2, #10
   175ec:	mov	r1, #0
   175f0:	bl	11468 <strtol@plt>
   175f4:	subs	r2, r0, #0
   175f8:	blt	1760c <sprintf@plt+0x600c>
   175fc:	ldr	r3, [pc, #28]	; 17620 <sprintf@plt+0x6020>
   17600:	add	r3, pc, r3
   17604:	str	r2, [r3]
   17608:	pop	{r4, pc}
   1760c:	ldr	r1, [pc, #16]	; 17624 <sprintf@plt+0x6024>
   17610:	mov	r0, #67	; 0x43
   17614:	add	r1, pc, r1
   17618:	pop	{r4, lr}
   1761c:	b	12370 <sprintf@plt+0xd70>
   17620:	andeq	r4, r1, r0, ror #17
   17624:	andeq	r2, r0, ip, ror #13
   17628:	ldr	r3, [pc, #68]	; 17674 <sprintf@plt+0x6074>
   1762c:	push	{r4, lr}
   17630:	add	r3, pc, r3
   17634:	ldr	r0, [r3, #184]	; 0xb8
   17638:	cmp	r0, #0
   1763c:	beq	17644 <sprintf@plt+0x6044>
   17640:	bl	1145c <rb_close@plt>
   17644:	ldr	r3, [pc, #44]	; 17678 <sprintf@plt+0x6078>
   17648:	add	r3, pc, r3
   1764c:	ldr	r0, [r3, #372]	; 0x174
   17650:	cmp	r0, #0
   17654:	beq	1765c <sprintf@plt+0x605c>
   17658:	bl	1145c <rb_close@plt>
   1765c:	ldr	r0, [pc, #24]	; 1767c <sprintf@plt+0x607c>
   17660:	mov	r2, #376	; 0x178
   17664:	mov	r1, #0
   17668:	add	r0, pc, r0
   1766c:	pop	{r4, lr}
   17670:	b	1136c <memset@plt>
   17674:	strdeq	r8, [r1], -r4
   17678:	ldrdeq	r8, [r1], -ip
   1767c:			; <UNDEFINED> instruction: 0x000189bc
   17680:	push	{r4, r5, r6, lr}
   17684:	sub	sp, sp, #144	; 0x90
   17688:	ldr	r4, [pc, #336]	; 177e0 <sprintf@plt+0x61e0>
   1768c:	ldr	r3, [sp, #160]	; 0xa0
   17690:	clz	r3, r3
   17694:	lsr	r3, r3, #5
   17698:	cmp	r1, #0
   1769c:	moveq	r1, r3
   176a0:	orrne	r1, r3, #1
   176a4:	cmp	r1, #0
   176a8:	mov	r3, #128	; 0x80
   176ac:	str	r3, [sp, #4]
   176b0:	add	r4, pc, r4
   176b4:	mov	r6, r0
   176b8:	bne	1778c <sprintf@plt+0x618c>
   176bc:	bl	112c4 <rb_get_fd@plt>
   176c0:	add	r2, sp, #4
   176c4:	add	r1, sp, #16
   176c8:	bl	11264 <getsockname@plt>
   176cc:	cmp	r0, #0
   176d0:	bne	1778c <sprintf@plt+0x618c>
   176d4:	ldr	r3, [pc, #264]	; 177e4 <sprintf@plt+0x61e4>
   176d8:	add	r5, sp, #8
   176dc:	mov	r1, r5
   176e0:	ldr	r4, [r4, r3]
   176e4:	ldr	r0, [r4]
   176e8:	bl	11408 <rb_dictionary_foreach_start@plt>
   176ec:	b	176fc <sprintf@plt+0x60fc>
   176f0:	mov	r1, r5
   176f4:	ldr	r0, [r4]
   176f8:	bl	113c0 <rb_dictionary_foreach_next@plt>
   176fc:	mov	r1, r5
   17700:	ldr	r0, [r4]
   17704:	bl	11324 <rb_dictionary_foreach_cur@plt>
   17708:	cmp	r0, #0
   1770c:	beq	1778c <sprintf@plt+0x618c>
   17710:	ldrh	r3, [r0, #248]	; 0xf8
   17714:	ldrh	r2, [sp, #16]
   17718:	cmp	r2, r3
   1771c:	bne	176f0 <sprintf@plt+0x60f0>
   17720:	cmp	r2, #2
   17724:	beq	177b4 <sprintf@plt+0x61b4>
   17728:	cmp	r2, #10
   1772c:	bne	1779c <sprintf@plt+0x619c>
   17730:	ldr	r2, [sp, #24]
   17734:	ldr	r3, [r0, #256]	; 0x100
   17738:	cmp	r2, r3
   1773c:	bne	176f0 <sprintf@plt+0x60f0>
   17740:	ldr	r2, [sp, #28]
   17744:	ldr	r3, [r0, #260]	; 0x104
   17748:	cmp	r2, r3
   1774c:	bne	176f0 <sprintf@plt+0x60f0>
   17750:	ldr	r2, [sp, #32]
   17754:	ldr	r3, [r0, #264]	; 0x108
   17758:	cmp	r2, r3
   1775c:	bne	176f0 <sprintf@plt+0x60f0>
   17760:	ldr	r2, [sp, #36]	; 0x24
   17764:	ldr	r3, [r0, #268]	; 0x10c
   17768:	cmp	r2, r3
   1776c:	bne	176f0 <sprintf@plt+0x60f0>
   17770:	ldr	r2, [pc, #112]	; 177e8 <sprintf@plt+0x61e8>
   17774:	mov	r3, r0
   17778:	add	r2, pc, r2
   1777c:	mov	r0, r6
   17780:	mov	r1, #1
   17784:	bl	112b8 <rb_setselect@plt>
   17788:	b	17794 <sprintf@plt+0x6194>
   1778c:	mov	r0, r6
   17790:	bl	1145c <rb_close@plt>
   17794:	add	sp, sp, #144	; 0x90
   17798:	pop	{r4, r5, r6, pc}
   1779c:	ldr	r1, [pc, #72]	; 177ec <sprintf@plt+0x61ec>
   177a0:	mov	r0, #67	; 0x43
   177a4:	add	r1, pc, r1
   177a8:	bl	12370 <sprintf@plt+0xd70>
   177ac:	mov	r0, #3
   177b0:	bl	115e8 <exit@plt>
   177b4:	ldr	r2, [sp, #20]
   177b8:	ldr	r3, [r0, #252]	; 0xfc
   177bc:	cmp	r2, r3
   177c0:	bne	176f0 <sprintf@plt+0x60f0>
   177c4:	ldr	r2, [pc, #36]	; 177f0 <sprintf@plt+0x61f0>
   177c8:	mov	r3, r0
   177cc:	add	r2, pc, r2
   177d0:	mov	r0, r6
   177d4:	mov	r1, #1
   177d8:	bl	112b8 <rb_setselect@plt>
   177dc:	b	17794 <sprintf@plt+0x6194>
   177e0:	andeq	r3, r1, r8, asr #18
   177e4:	andeq	r0, r0, r8, asr r1
   177e8:	andeq	r0, r0, r4, ror r0
   177ec:	andeq	r2, r0, r0, lsl #11
   177f0:	andeq	r0, r0, r0, lsr #32
   177f4:	ldr	r3, [pc, #292]	; 17920 <sprintf@plt+0x6320>
   177f8:	ldr	r2, [pc, #292]	; 17924 <sprintf@plt+0x6324>
   177fc:	add	r3, pc, r3
   17800:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17804:	sub	sp, sp, #128	; 0x80
   17808:	ldr	r8, [r3, r2]
   1780c:	ldr	ip, [r1, #464]	; 0x1d0
   17810:	mov	r7, r1
   17814:	ldr	lr, [r8, #12]
   17818:	mov	r1, sp
   1781c:	mov	r2, #128	; 0x80
   17820:	add	r3, ip, lr, lsl #4
   17824:	mov	sl, r0
   17828:	ldr	r9, [r3, #8]
   1782c:	bl	113e4 <rb_read@plt>
   17830:	cmp	r0, #0
   17834:	blt	178f0 <sprintf@plt+0x62f0>
   17838:	beq	178e0 <sprintf@plt+0x62e0>
   1783c:	ldr	r3, [pc, #228]	; 17928 <sprintf@plt+0x6328>
   17840:	mov	r6, sp
   17844:	add	r3, pc, r3
   17848:	ldr	r4, [r3, #376]	; 0x178
   1784c:	cmp	r4, #0
   17850:	bne	17864 <sprintf@plt+0x6264>
   17854:	b	178e0 <sprintf@plt+0x62e0>
   17858:	ldr	r4, [r4, #8]
   1785c:	cmp	r4, #0
   17860:	beq	178e0 <sprintf@plt+0x62e0>
   17864:	ldr	r5, [r4]
   17868:	mov	r0, r5
   1786c:	bl	11420 <strlen@plt>
   17870:	mov	r1, r6
   17874:	mov	r2, r0
   17878:	mov	r0, r5
   1787c:	bl	115ac <strncmp@plt>
   17880:	cmp	r0, #0
   17884:	bne	17858 <sprintf@plt+0x6258>
   17888:	ldr	r3, [r9]
   1788c:	cmp	r3, #0
   17890:	beq	178c0 <sprintf@plt+0x62c0>
   17894:	ldr	r4, [r3, #8]
   17898:	b	178a4 <sprintf@plt+0x62a4>
   1789c:	mov	r3, r4
   178a0:	ldr	r4, [r4, #8]
   178a4:	ldr	r5, [r3]
   178a8:	ldr	r0, [r5, #4]
   178ac:	bl	1145c <rb_close@plt>
   178b0:	mov	r0, r5
   178b4:	bl	113cc <free@plt>
   178b8:	cmp	r4, #0
   178bc:	bne	1789c <sprintf@plt+0x629c>
   178c0:	mov	r0, r9
   178c4:	bl	113cc <free@plt>
   178c8:	ldr	r3, [pc, #92]	; 1792c <sprintf@plt+0x632c>
   178cc:	mov	r2, r6
   178d0:	ldr	r1, [r8, #12]
   178d4:	mov	r0, r7
   178d8:	add	r3, pc, r3
   178dc:	bl	12ae4 <sprintf@plt+0x14e4>
   178e0:	mov	r0, sl
   178e4:	bl	1145c <rb_close@plt>
   178e8:	add	sp, sp, #128	; 0x80
   178ec:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   178f0:	bl	115f4 <__errno_location@plt>
   178f4:	ldr	r0, [r0]
   178f8:	bl	11270 <rb_ignore_errno@plt>
   178fc:	cmp	r0, #0
   17900:	beq	178e0 <sprintf@plt+0x62e0>
   17904:	ldr	r2, [pc, #36]	; 17930 <sprintf@plt+0x6330>
   17908:	mov	r3, r7
   1790c:	mov	r0, sl
   17910:	add	r2, pc, r2
   17914:	mov	r1, #1
   17918:	bl	112b8 <rb_setselect@plt>
   1791c:	b	178e8 <sprintf@plt+0x62e8>
   17920:	strdeq	r3, [r1], -ip
   17924:	andeq	r0, r0, r4, lsl #3
   17928:	andeq	r8, r1, r0, ror #15
   1792c:	andeq	r2, r0, ip, ror r4
   17930:			; <UNDEFINED> instruction: 0xfffffedc
   17934:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17938:	sub	sp, sp, #156	; 0x9c
   1793c:	add	r7, sp, #24
   17940:	mov	r3, #1
   17944:	mov	r8, r1
   17948:	mov	r1, r7
   1794c:	str	r3, [sp, #12]
   17950:	mov	r9, r0
   17954:	bl	11414 <rb_inet_pton_sock@plt>
   17958:	ldr	r4, [pc, #772]	; 17c64 <sprintf@plt+0x6664>
   1795c:	add	r4, pc, r4
   17960:	cmp	r0, #0
   17964:	beq	17bf4 <sprintf@plt+0x65f4>
   17968:	ldrh	r0, [sp, #24]
   1796c:	cmp	r0, #2
   17970:	beq	17b28 <sprintf@plt+0x6528>
   17974:	rev16	r3, r8
   17978:	cmp	r0, #10
   1797c:	strh	r3, [sp, #26]
   17980:	uxth	r3, r3
   17984:	beq	17ad4 <sprintf@plt+0x64d4>
   17988:	ldr	r2, [pc, #728]	; 17c68 <sprintf@plt+0x6668>
   1798c:	ldr	r1, [sp, #28]
   17990:	add	r2, pc, r2
   17994:	ldr	r2, [r2, #60]	; 0x3c
   17998:	cmp	r1, r2
   1799c:	beq	17b4c <sprintf@plt+0x654c>
   179a0:	ldr	sl, [pc, #708]	; 17c6c <sprintf@plt+0x666c>
   179a4:	add	sl, pc, sl
   179a8:	ldr	r3, [pc, #704]	; 17c70 <sprintf@plt+0x6670>
   179ac:	mov	r2, #0
   179b0:	add	r3, pc, r3
   179b4:	mov	r1, #1
   179b8:	bl	112e8 <rb_socket@plt>
   179bc:	subs	r6, r0, #0
   179c0:	beq	17c14 <sprintf@plt+0x6614>
   179c4:	bl	112c4 <rb_get_fd@plt>
   179c8:	mov	r3, #4
   179cc:	str	r3, [sp]
   179d0:	mov	r2, #2
   179d4:	add	r3, sp, #12
   179d8:	mov	r1, #1
   179dc:	bl	115c4 <setsockopt@plt>
   179e0:	subs	r5, r0, #0
   179e4:	bne	17c3c <sprintf@plt+0x663c>
   179e8:	mov	r0, r6
   179ec:	bl	112c4 <rb_get_fd@plt>
   179f0:	ldrh	r2, [sp, #24]
   179f4:	mov	r1, r7
   179f8:	cmp	r2, #2
   179fc:	movne	r2, #28
   17a00:	moveq	r2, #16
   17a04:	bl	11498 <bind@plt>
   17a08:	subs	fp, r0, #0
   17a0c:	bne	17af4 <sprintf@plt+0x64f4>
   17a10:	mov	r2, fp
   17a14:	mov	r1, #128	; 0x80
   17a18:	mov	r0, r6
   17a1c:	bl	115a0 <rb_listen@plt>
   17a20:	cmp	r0, #0
   17a24:	bne	17b74 <sprintf@plt+0x6574>
   17a28:	ldr	r0, [sl, #184]	; 0xb8
   17a2c:	cmp	r0, #0
   17a30:	beq	17a38 <sprintf@plt+0x6438>
   17a34:	bl	1145c <rb_close@plt>
   17a38:	ldr	r3, [pc, #564]	; 17c74 <sprintf@plt+0x6674>
   17a3c:	str	r6, [sl, #184]	; 0xb8
   17a40:	add	r5, sp, #16
   17a44:	ldr	r4, [r4, r3]
   17a48:	mov	r1, r5
   17a4c:	ldr	r0, [r4]
   17a50:	bl	11408 <rb_dictionary_foreach_start@plt>
   17a54:	b	17a68 <sprintf@plt+0x6468>
   17a58:	bl	174a8 <sprintf@plt+0x5ea8>
   17a5c:	mov	r1, r5
   17a60:	ldr	r0, [r4]
   17a64:	bl	113c0 <rb_dictionary_foreach_next@plt>
   17a68:	mov	r1, r5
   17a6c:	ldr	r0, [r4]
   17a70:	bl	11324 <rb_dictionary_foreach_cur@plt>
   17a74:	subs	r6, r0, #0
   17a78:	bne	17a58 <sprintf@plt+0x6458>
   17a7c:	mov	r1, r9
   17a80:	mov	r2, #53	; 0x35
   17a84:	mov	r0, sl
   17a88:	bl	113a8 <rb_strlcpy@plt>
   17a8c:	mov	r1, r7
   17a90:	mov	r2, #128	; 0x80
   17a94:	strh	r8, [sl, #54]	; 0x36
   17a98:	add	r0, sl, #56	; 0x38
   17a9c:	bl	11444 <memcpy@plt>
   17aa0:	ldr	ip, [pc, #464]	; 17c78 <sprintf@plt+0x6678>
   17aa4:	ldr	r2, [pc, #464]	; 17c7c <sprintf@plt+0x667c>
   17aa8:	add	ip, pc, ip
   17aac:	mov	r4, #1
   17ab0:	ldr	r0, [sl, #184]	; 0xb8
   17ab4:	mov	r1, r6
   17ab8:	mov	r3, sl
   17abc:	add	r2, pc, r2
   17ac0:	strb	r4, [ip, #388]	; 0x184
   17ac4:	bl	11558 <rb_accept_tcp@plt>
   17ac8:	mov	r0, r4
   17acc:	add	sp, sp, #156	; 0x9c
   17ad0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17ad4:	ldr	sl, [pc, #420]	; 17c80 <sprintf@plt+0x6680>
   17ad8:	ldr	r1, [sp, #32]
   17adc:	add	sl, pc, sl
   17ae0:	ldr	r2, [sl, #252]	; 0xfc
   17ae4:	cmp	r1, r2
   17ae8:	beq	17ba8 <sprintf@plt+0x65a8>
   17aec:	add	sl, sl, #188	; 0xbc
   17af0:	b	179a8 <sprintf@plt+0x63a8>
   17af4:	bl	115f4 <__errno_location@plt>
   17af8:	ldr	r0, [r0]
   17afc:	bl	11234 <strerror@plt>
   17b00:	ldr	r1, [pc, #380]	; 17c84 <sprintf@plt+0x6684>
   17b04:	add	r1, pc, r1
   17b08:	mov	r2, r0
   17b0c:	mov	r0, #87	; 0x57
   17b10:	bl	12370 <sprintf@plt+0xd70>
   17b14:	mov	r0, r6
   17b18:	bl	1145c <rb_close@plt>
   17b1c:	mov	r0, r5
   17b20:	add	sp, sp, #156	; 0x9c
   17b24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17b28:	ldr	r2, [pc, #344]	; 17c88 <sprintf@plt+0x6688>
   17b2c:	ldr	r1, [sp, #28]
   17b30:	add	r2, pc, r2
   17b34:	rev16	r3, r8
   17b38:	ldr	r2, [r2, #60]	; 0x3c
   17b3c:	strh	r3, [sp, #26]
   17b40:	cmp	r2, r1
   17b44:	uxth	r3, r3
   17b48:	bne	179a0 <sprintf@plt+0x63a0>
   17b4c:	ldr	r2, [pc, #312]	; 17c8c <sprintf@plt+0x668c>
   17b50:	add	r2, pc, r2
   17b54:	ldrh	r1, [r2, #58]	; 0x3a
   17b58:	cmp	r3, r1
   17b5c:	bne	179a0 <sprintf@plt+0x63a0>
   17b60:	ldr	r3, [r2, #184]	; 0xb8
   17b64:	cmp	r3, #0
   17b68:	beq	179a0 <sprintf@plt+0x63a0>
   17b6c:	mov	r0, #0
   17b70:	b	17acc <sprintf@plt+0x64cc>
   17b74:	bl	115f4 <__errno_location@plt>
   17b78:	ldr	r0, [r0]
   17b7c:	bl	11234 <strerror@plt>
   17b80:	ldr	r1, [pc, #264]	; 17c90 <sprintf@plt+0x6690>
   17b84:	add	r1, pc, r1
   17b88:	mov	r2, r0
   17b8c:	mov	r0, #87	; 0x57
   17b90:	bl	12370 <sprintf@plt+0xd70>
   17b94:	mov	r0, r6
   17b98:	bl	1145c <rb_close@plt>
   17b9c:	mov	r0, fp
   17ba0:	add	sp, sp, #156	; 0x9c
   17ba4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17ba8:	ldr	r1, [sp, #36]	; 0x24
   17bac:	ldr	r2, [sl, #256]	; 0x100
   17bb0:	cmp	r1, r2
   17bb4:	bne	17aec <sprintf@plt+0x64ec>
   17bb8:	ldr	r1, [sp, #40]	; 0x28
   17bbc:	ldr	r2, [sl, #260]	; 0x104
   17bc0:	cmp	r1, r2
   17bc4:	bne	17aec <sprintf@plt+0x64ec>
   17bc8:	ldr	r1, [sp, #44]	; 0x2c
   17bcc:	ldr	r2, [sl, #264]	; 0x108
   17bd0:	cmp	r1, r2
   17bd4:	bne	17aec <sprintf@plt+0x64ec>
   17bd8:	ldrh	r2, [sl, #246]	; 0xf6
   17bdc:	cmp	r2, r3
   17be0:	bne	17aec <sprintf@plt+0x64ec>
   17be4:	ldr	r3, [sl, #372]	; 0x174
   17be8:	cmp	r3, #0
   17bec:	bne	17b6c <sprintf@plt+0x656c>
   17bf0:	b	17aec <sprintf@plt+0x64ec>
   17bf4:	ldr	r1, [pc, #152]	; 17c94 <sprintf@plt+0x6694>
   17bf8:	mov	r0, #67	; 0x43
   17bfc:	mov	r3, r8
   17c00:	mov	r2, r9
   17c04:	add	r1, pc, r1
   17c08:	bl	12370 <sprintf@plt+0xd70>
   17c0c:	mov	r0, #3
   17c10:	bl	115e8 <exit@plt>
   17c14:	bl	115f4 <__errno_location@plt>
   17c18:	ldr	r0, [r0]
   17c1c:	bl	11234 <strerror@plt>
   17c20:	ldr	r1, [pc, #112]	; 17c98 <sprintf@plt+0x6698>
   17c24:	add	r1, pc, r1
   17c28:	mov	r2, r0
   17c2c:	mov	r0, #67	; 0x43
   17c30:	bl	12370 <sprintf@plt+0xd70>
   17c34:	mov	r0, #3
   17c38:	bl	115e8 <exit@plt>
   17c3c:	bl	115f4 <__errno_location@plt>
   17c40:	ldr	r0, [r0]
   17c44:	bl	11234 <strerror@plt>
   17c48:	ldr	r1, [pc, #76]	; 17c9c <sprintf@plt+0x669c>
   17c4c:	add	r1, pc, r1
   17c50:	mov	r2, r0
   17c54:	mov	r0, #67	; 0x43
   17c58:	bl	12370 <sprintf@plt+0xd70>
   17c5c:	mov	r0, #3
   17c60:	bl	115e8 <exit@plt>
   17c64:	muleq	r1, ip, r6
   17c68:	muleq	r1, r4, r6
   17c6c:	andeq	r8, r1, r0, lsl #13
   17c70:	ldrdeq	r2, [r0], -r8
   17c74:	andeq	r0, r0, r8, asr r1
   17c78:	andeq	r8, r1, ip, ror r5
   17c7c:			; <UNDEFINED> instruction: 0xfffffbbc
   17c80:	andeq	r8, r1, r8, asr #10
   17c84:	andeq	r2, r0, r0, ror #5
   17c88:	strdeq	r8, [r1], -r4
   17c8c:	ldrdeq	r8, [r1], -r4
   17c90:	andeq	r2, r0, r0, lsl #5
   17c94:	andeq	r2, r0, r4, ror #2
   17c98:	andeq	r2, r0, r8, ror r1
   17c9c:	andeq	r2, r0, r0, ror r1
   17ca0:	ldr	r3, [r2]
   17ca4:	push	{r4, r5, r6, lr}
   17ca8:	sub	sp, sp, #8
   17cac:	ldrb	r3, [r3]
   17cb0:	ldr	r4, [pc, #284]	; 17dd4 <sprintf@plt+0x67d4>
   17cb4:	cmp	r3, #49	; 0x31
   17cb8:	add	r4, pc, r4
   17cbc:	moveq	r6, #1
   17cc0:	movne	r6, #0
   17cc4:	beq	17d58 <sprintf@plt+0x6758>
   17cc8:	ldr	r5, [pc, #264]	; 17dd8 <sprintf@plt+0x67d8>
   17ccc:	add	r5, pc, r5
   17cd0:	ldr	r0, [r5, #184]	; 0xb8
   17cd4:	cmp	r0, #0
   17cd8:	beq	17dbc <sprintf@plt+0x67bc>
   17cdc:	bl	1145c <rb_close@plt>
   17ce0:	ldr	r0, [r5, #372]	; 0x174
   17ce4:	cmp	r0, #0
   17ce8:	beq	17cf0 <sprintf@plt+0x66f0>
   17cec:	bl	1145c <rb_close@plt>
   17cf0:	ldr	r3, [pc, #228]	; 17ddc <sprintf@plt+0x67dc>
   17cf4:	ldr	r2, [pc, #228]	; 17de0 <sprintf@plt+0x67e0>
   17cf8:	add	r3, pc, r3
   17cfc:	mov	r1, #0
   17d00:	str	r1, [r3, #372]	; 0x174
   17d04:	str	r1, [r3, #184]	; 0xb8
   17d08:	ldr	r4, [r4, r2]
   17d0c:	mov	r1, sp
   17d10:	mov	r5, sp
   17d14:	ldr	r0, [r4]
   17d18:	bl	11408 <rb_dictionary_foreach_start@plt>
   17d1c:	b	17d30 <sprintf@plt+0x6730>
   17d20:	bl	174a8 <sprintf@plt+0x5ea8>
   17d24:	mov	r1, r5
   17d28:	ldr	r0, [r4]
   17d2c:	bl	113c0 <rb_dictionary_foreach_next@plt>
   17d30:	mov	r1, r5
   17d34:	ldr	r0, [r4]
   17d38:	bl	11324 <rb_dictionary_foreach_cur@plt>
   17d3c:	cmp	r0, #0
   17d40:	bne	17d20 <sprintf@plt+0x6720>
   17d44:	ldr	r3, [pc, #152]	; 17de4 <sprintf@plt+0x67e4>
   17d48:	add	r3, pc, r3
   17d4c:	strb	r6, [r3, #388]	; 0x184
   17d50:	add	sp, sp, #8
   17d54:	pop	{r4, r5, r6, pc}
   17d58:	ldr	r0, [pc, #136]	; 17de8 <sprintf@plt+0x67e8>
   17d5c:	add	r0, pc, r0
   17d60:	ldrb	r3, [r0]
   17d64:	cmp	r3, #0
   17d68:	beq	17d84 <sprintf@plt+0x6784>
   17d6c:	ldrh	r1, [r0, #54]	; 0x36
   17d70:	cmp	r1, #0
   17d74:	beq	17d84 <sprintf@plt+0x6784>
   17d78:	ldr	r3, [r0, #184]	; 0xb8
   17d7c:	cmp	r3, #0
   17d80:	beq	17dcc <sprintf@plt+0x67cc>
   17d84:	ldr	r0, [pc, #96]	; 17dec <sprintf@plt+0x67ec>
   17d88:	add	r0, pc, r0
   17d8c:	ldrb	r3, [r0, #188]	; 0xbc
   17d90:	cmp	r3, #0
   17d94:	beq	17d44 <sprintf@plt+0x6744>
   17d98:	ldrh	r1, [r0, #242]	; 0xf2
   17d9c:	cmp	r1, #0
   17da0:	beq	17d44 <sprintf@plt+0x6744>
   17da4:	ldr	r3, [r0, #372]	; 0x174
   17da8:	cmp	r3, #0
   17dac:	bne	17d44 <sprintf@plt+0x6744>
   17db0:	add	r0, r0, #188	; 0xbc
   17db4:	bl	17934 <sprintf@plt+0x6334>
   17db8:	b	17d44 <sprintf@plt+0x6744>
   17dbc:	ldr	r0, [r5, #372]	; 0x174
   17dc0:	cmp	r0, #0
   17dc4:	bne	17cec <sprintf@plt+0x66ec>
   17dc8:	b	17d44 <sprintf@plt+0x6744>
   17dcc:	bl	17934 <sprintf@plt+0x6334>
   17dd0:	b	17d84 <sprintf@plt+0x6784>
   17dd4:	andeq	r3, r1, r0, asr #6
   17dd8:	andeq	r8, r1, r8, asr r3
   17ddc:	andeq	r8, r1, ip, lsr #6
   17de0:	andeq	r0, r0, r8, asr r1
   17de4:	ldrdeq	r8, [r1], -ip
   17de8:	andeq	r8, r1, r8, asr #5
   17dec:	muleq	r1, ip, r2
   17df0:	ldr	r2, [r0, #12]
   17df4:	push	{r4, r5, lr}
   17df8:	mov	r3, r2
   17dfc:	ldrh	ip, [r2, #54]	; 0x36
   17e00:	sub	sp, sp, #140	; 0x8c
   17e04:	ldr	r2, [pc, #120]	; 17e84 <sprintf@plt+0x6884>
   17e08:	add	r4, sp, #8
   17e0c:	add	r2, pc, r2
   17e10:	mov	r1, #128	; 0x80
   17e14:	str	ip, [sp]
   17e18:	mov	r5, r0
   17e1c:	mov	r0, r4
   17e20:	bl	11594 <snprintf@plt>
   17e24:	mov	r0, r4
   17e28:	bl	11420 <strlen@plt>
   17e2c:	mov	r1, r4
   17e30:	mov	r2, r0
   17e34:	ldr	r0, [r5, #4]
   17e38:	bl	11390 <rb_write@plt>
   17e3c:	cmp	r0, #0
   17e40:	ble	17e7c <sprintf@plt+0x687c>
   17e44:	ldr	r4, [r5, #8]
   17e48:	mov	r0, r4
   17e4c:	bl	11420 <strlen@plt>
   17e50:	mov	r1, r4
   17e54:	add	r2, r0, #1
   17e58:	ldr	r0, [r5, #4]
   17e5c:	bl	11390 <rb_write@plt>
   17e60:	cmp	r0, #0
   17e64:	ble	17e7c <sprintf@plt+0x687c>
   17e68:	ldr	r1, [pc, #24]	; 17e88 <sprintf@plt+0x6888>
   17e6c:	ldr	r0, [r5, #4]
   17e70:	mov	r2, #2
   17e74:	add	r1, pc, r1
   17e78:	bl	11390 <rb_write@plt>
   17e7c:	add	sp, sp, #140	; 0x8c
   17e80:	pop	{r4, r5, pc}
   17e84:	andeq	r2, r0, ip, lsl r0
   17e88:	andeq	r1, r0, r8, asr #18
   17e8c:	ldr	r3, [pc, #208]	; 17f64 <sprintf@plt+0x6964>
   17e90:	ldr	r2, [r0]
   17e94:	add	r3, pc, r3
   17e98:	add	r3, r3, #16
   17e9c:	ldrh	r2, [r2, #248]	; 0xf8
   17ea0:	mov	ip, r0
   17ea4:	ldm	r3, {r0, r1}
   17ea8:	push	{r4, r5, lr}
   17eac:	sub	sp, sp, #36	; 0x24
   17eb0:	cmp	r2, #2
   17eb4:	str	r0, [sp, #4]
   17eb8:	strh	r1, [sp, #8]
   17ebc:	beq	17f40 <sprintf@plt+0x6940>
   17ec0:	cmp	r2, #10
   17ec4:	bne	17f38 <sprintf@plt+0x6938>
   17ec8:	ldr	r3, [ip, #12]
   17ecc:	add	r2, sp, #29
   17ed0:	mov	r1, #4
   17ed4:	ldrh	r0, [r3, #58]	; 0x3a
   17ed8:	ldr	r5, [r3, #64]!	; 0x40
   17edc:	strb	r1, [sp, #10]
   17ee0:	strh	r0, [sp, #27]
   17ee4:	ldr	r4, [r3, #4]
   17ee8:	ldr	lr, [r3, #8]
   17eec:	ldr	r0, [r3, #12]
   17ef0:	str	r5, [sp, #11]
   17ef4:	str	r4, [sp, #15]
   17ef8:	str	lr, [sp, #19]
   17efc:	str	r0, [sp, #23]
   17f00:	add	r1, sp, #4
   17f04:	sub	r2, r1, r2
   17f08:	ldr	r0, [ip, #4]
   17f0c:	mov	r4, ip
   17f10:	bl	11390 <rb_write@plt>
   17f14:	cmp	r0, #0
   17f18:	ble	17f38 <sprintf@plt+0x6938>
   17f1c:	ldr	r5, [r4, #8]
   17f20:	mov	r0, r5
   17f24:	bl	11420 <strlen@plt>
   17f28:	mov	r1, r5
   17f2c:	add	r2, r0, #1
   17f30:	ldr	r0, [r4, #4]
   17f34:	bl	11390 <rb_write@plt>
   17f38:	add	sp, sp, #36	; 0x24
   17f3c:	pop	{r4, r5, pc}
   17f40:	ldr	r3, [ip, #12]
   17f44:	mov	r2, #1
   17f48:	strb	r2, [sp, #10]
   17f4c:	ldrh	r1, [r3, #58]	; 0x3a
   17f50:	ldr	r3, [r3, #60]	; 0x3c
   17f54:	add	r2, sp, #17
   17f58:	strh	r1, [sp, #15]
   17f5c:	str	r3, [sp, #11]
   17f60:	b	17f00 <sprintf@plt+0x6900>
   17f64:	andeq	r1, r0, r8, lsr #28
   17f68:	ldr	r3, [r0, #12]
   17f6c:	push	{r4, r5, lr}
   17f70:	sub	sp, sp, #20
   17f74:	ldrh	r5, [r3, #58]	; 0x3a
   17f78:	ldr	r3, [r3, #60]	; 0x3c
   17f7c:	mov	lr, #260	; 0x104
   17f80:	mov	ip, #0
   17f84:	mov	r4, r0
   17f88:	mov	r2, #9
   17f8c:	ldr	r0, [r0, #4]
   17f90:	add	r1, sp, #4
   17f94:	strh	r5, [sp, #6]
   17f98:	str	r3, [sp, #8]
   17f9c:	strh	lr, [sp, #4]
   17fa0:	strb	ip, [sp, #12]
   17fa4:	bl	11390 <rb_write@plt>
   17fa8:	cmp	r0, #0
   17fac:	blt	17fcc <sprintf@plt+0x69cc>
   17fb0:	ldr	r5, [r4, #8]
   17fb4:	mov	r0, r5
   17fb8:	bl	11420 <strlen@plt>
   17fbc:	mov	r1, r5
   17fc0:	add	r2, r0, #1
   17fc4:	ldr	r0, [r4, #4]
   17fc8:	bl	11390 <rb_write@plt>
   17fcc:	add	sp, sp, #20
   17fd0:	pop	{r4, r5, pc}
   17fd4:	push	{r4, r5, r6, lr}
   17fd8:	mov	r4, r2
   17fdc:	ldr	r0, [r2, #4]
   17fe0:	mov	r1, #0
   17fe4:	mov	r2, #10
   17fe8:	ldr	r5, [r4]
   17fec:	bl	11468 <strtol@plt>
   17ff0:	ldr	r3, [pc, #52]	; 1802c <sprintf@plt+0x6a2c>
   17ff4:	sub	r2, r0, #1
   17ff8:	cmp	r2, r3
   17ffc:	bhi	18010 <sprintf@plt+0x6a10>
   18000:	uxth	r1, r0
   18004:	mov	r0, r5
   18008:	pop	{r4, r5, r6, lr}
   1800c:	b	17934 <sprintf@plt+0x6334>
   18010:	ldr	r1, [pc, #24]	; 18030 <sprintf@plt+0x6a30>
   18014:	mov	r0, #67	; 0x43
   18018:	ldm	r4, {r2, r3}
   1801c:	add	r1, pc, r1
   18020:	bl	12370 <sprintf@plt+0xd70>
   18024:	mov	r0, #3
   18028:	bl	115e8 <exit@plt>
   1802c:	strdeq	pc, [r0], -lr
   18030:	andeq	r1, r0, r8, lsr #28
   18034:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18038:	sub	sp, sp, #8
   1803c:	ldr	r9, [pc, #216]	; 1811c <sprintf@plt+0x6b1c>
   18040:	ldr	r6, [pc, #216]	; 18120 <sprintf@plt+0x6b20>
   18044:	add	r9, pc, r9
   18048:	add	r6, pc, r6
   1804c:	ldr	r4, [r9, #376]	; 0x178
   18050:	cmp	r4, #0
   18054:	beq	180c8 <sprintf@plt+0x6ac8>
   18058:	ldr	r8, [pc, #196]	; 18124 <sprintf@plt+0x6b24>
   1805c:	ldr	r7, [pc, #196]	; 18128 <sprintf@plt+0x6b28>
   18060:	ldr	r5, [r4, #8]
   18064:	add	r8, pc, r8
   18068:	add	r7, pc, r7
   1806c:	mov	sl, #0
   18070:	b	1807c <sprintf@plt+0x6a7c>
   18074:	mov	r4, r5
   18078:	ldr	r5, [r5, #8]
   1807c:	ldr	r3, [r4]
   18080:	subs	r0, r3, #0
   18084:	beq	1808c <sprintf@plt+0x6a8c>
   18088:	bl	113cc <free@plt>
   1808c:	ldmib	r4, {r2, r3}
   18090:	cmp	r3, #0
   18094:	strne	r2, [r3, #4]
   18098:	ldrne	r2, [r4, #4]
   1809c:	streq	r2, [r8, #380]	; 0x17c
   180a0:	cmp	r2, #0
   180a4:	strne	r3, [r2, #8]
   180a8:	streq	r3, [r7, #376]	; 0x178
   180ac:	ldr	r3, [r9, #384]	; 0x180
   180b0:	cmp	r5, #0
   180b4:	sub	r3, r3, #1
   180b8:	str	sl, [r4, #4]
   180bc:	str	sl, [r4, #8]
   180c0:	str	r3, [r9, #384]	; 0x180
   180c4:	bne	18074 <sprintf@plt+0x6a74>
   180c8:	ldr	r3, [pc, #92]	; 1812c <sprintf@plt+0x6b2c>
   180cc:	mov	r1, sp
   180d0:	mov	r5, sp
   180d4:	ldr	r4, [r6, r3]
   180d8:	ldr	r0, [r4]
   180dc:	bl	11408 <rb_dictionary_foreach_start@plt>
   180e0:	b	180f4 <sprintf@plt+0x6af4>
   180e4:	bl	174a8 <sprintf@plt+0x5ea8>
   180e8:	mov	r1, r5
   180ec:	ldr	r0, [r4]
   180f0:	bl	113c0 <rb_dictionary_foreach_next@plt>
   180f4:	mov	r1, r5
   180f8:	ldr	r0, [r4]
   180fc:	bl	11324 <rb_dictionary_foreach_cur@plt>
   18100:	subs	r3, r0, #0
   18104:	bne	180e4 <sprintf@plt+0x6ae4>
   18108:	ldr	r2, [pc, #32]	; 18130 <sprintf@plt+0x6b30>
   1810c:	add	r2, pc, r2
   18110:	strb	r3, [r2, #388]	; 0x184
   18114:	add	sp, sp, #8
   18118:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1811c:	andeq	r7, r1, r0, ror #31
   18120:			; <UNDEFINED> instruction: 0x00012fb0
   18124:	andeq	r7, r1, r0, asr #31
   18128:			; <UNDEFINED> instruction: 0x00017fbc
   1812c:	andeq	r0, r0, r8, asr r1
   18130:	andeq	r7, r1, r8, lsl pc
   18134:	push	{r4, r5, r6, r7, r8, lr}
   18138:	mov	r1, #0
   1813c:	ldr	r0, [r2, #4]
   18140:	mov	r5, r2
   18144:	mov	r2, #10
   18148:	bl	11468 <strtol@plt>
   1814c:	mov	r1, #40	; 0x28
   18150:	mov	r6, r0
   18154:	mov	r0, #1
   18158:	bl	1133c <calloc@plt>
   1815c:	subs	r4, r0, #0
   18160:	beq	182f8 <sprintf@plt+0x6cf8>
   18164:	ldr	r3, [pc, #580]	; 183b0 <sprintf@plt+0x6db0>
   18168:	sub	r2, r6, #1
   1816c:	cmp	r2, r3
   18170:	bhi	18394 <sprintf@plt+0x6d94>
   18174:	ldr	r7, [r5]
   18178:	ldr	r1, [pc, #564]	; 183b4 <sprintf@plt+0x6db4>
   1817c:	strh	r6, [r4, #20]
   18180:	mov	r0, r7
   18184:	add	r1, pc, r1
   18188:	bl	11330 <strcasecmp@plt>
   1818c:	subs	r8, r0, #0
   18190:	beq	18278 <sprintf@plt+0x6c78>
   18194:	ldr	r1, [pc, #540]	; 183b8 <sprintf@plt+0x6db8>
   18198:	mov	r0, r7
   1819c:	add	r1, pc, r1
   181a0:	bl	11330 <strcasecmp@plt>
   181a4:	subs	r8, r0, #0
   181a8:	bne	182ac <sprintf@plt+0x6cac>
   181ac:	mov	r2, #2
   181b0:	str	r2, [r4, #16]
   181b4:	ldr	r2, [pc, #512]	; 183bc <sprintf@plt+0x6dbc>
   181b8:	mov	r3, r6
   181bc:	add	r2, pc, r2
   181c0:	mov	r1, #16
   181c4:	mov	r0, r4
   181c8:	bl	11594 <snprintf@plt>
   181cc:	ldr	r3, [pc, #492]	; 183c0 <sprintf@plt+0x6dc0>
   181d0:	strb	r8, [r4, #22]
   181d4:	add	r3, pc, r3
   181d8:	str	r3, [r4, #24]
   181dc:	ldr	r2, [pc, #480]	; 183c4 <sprintf@plt+0x6dc4>
   181e0:	ldr	ip, [r4, #16]
   181e4:	add	r2, pc, r2
   181e8:	ldrh	r3, [r4, #20]
   181ec:	ldr	lr, [r2, #376]	; 0x178
   181f0:	cmp	lr, #0
   181f4:	beq	18374 <sprintf@plt+0x6d74>
   181f8:	mov	r2, lr
   181fc:	b	1820c <sprintf@plt+0x6c0c>
   18200:	ldr	r2, [r2, #8]
   18204:	cmp	r2, #0
   18208:	beq	18248 <sprintf@plt+0x6c48>
   1820c:	ldr	r1, [r2]
   18210:	ldr	r0, [r1, #16]
   18214:	cmp	ip, r0
   18218:	bne	18200 <sprintf@plt+0x6c00>
   1821c:	ldrh	r1, [r1, #20]
   18220:	cmp	r1, r3
   18224:	bne	18200 <sprintf@plt+0x6c00>
   18228:	ldr	r1, [pc, #408]	; 183c8 <sprintf@plt+0x6dc8>
   1822c:	ldr	r2, [r5]
   18230:	mov	r0, #67	; 0x43
   18234:	add	r1, pc, r1
   18238:	bl	12370 <sprintf@plt+0xd70>
   1823c:	mov	r0, r4
   18240:	pop	{r4, r5, r6, r7, r8, lr}
   18244:	b	113cc <free@plt>
   18248:	add	r3, r4, #28
   1824c:	str	r4, [r4, #28]
   18250:	str	r2, [r4, #32]
   18254:	str	lr, [r4, #36]	; 0x24
   18258:	str	r3, [lr, #4]
   1825c:	ldr	r2, [pc, #360]	; 183cc <sprintf@plt+0x6dcc>
   18260:	add	r2, pc, r2
   18264:	ldr	r1, [r2, #384]	; 0x180
   18268:	str	r3, [r2, #376]	; 0x178
   1826c:	add	r3, r1, #1
   18270:	str	r3, [r2, #384]	; 0x180
   18274:	pop	{r4, r5, r6, r7, r8, pc}
   18278:	mov	r2, #1
   1827c:	str	r2, [r4, #16]
   18280:	ldr	r2, [pc, #328]	; 183d0 <sprintf@plt+0x6dd0>
   18284:	mov	r3, r6
   18288:	add	r2, pc, r2
   1828c:	mov	r1, #16
   18290:	mov	r0, r4
   18294:	bl	11594 <snprintf@plt>
   18298:	ldr	r3, [pc, #308]	; 183d4 <sprintf@plt+0x6dd4>
   1829c:	strb	r8, [r4, #22]
   182a0:	add	r3, pc, r3
   182a4:	str	r3, [r4, #24]
   182a8:	b	181dc <sprintf@plt+0x6bdc>
   182ac:	ldr	r1, [pc, #292]	; 183d8 <sprintf@plt+0x6dd8>
   182b0:	mov	r0, r7
   182b4:	add	r1, pc, r1
   182b8:	bl	11330 <strcasecmp@plt>
   182bc:	subs	r8, r0, #0
   182c0:	bne	182fc <sprintf@plt+0x6cfc>
   182c4:	mov	r2, #3
   182c8:	str	r2, [r4, #16]
   182cc:	ldr	r2, [pc, #264]	; 183dc <sprintf@plt+0x6ddc>
   182d0:	mov	r3, r6
   182d4:	add	r2, pc, r2
   182d8:	mov	r1, #16
   182dc:	mov	r0, r4
   182e0:	bl	11594 <snprintf@plt>
   182e4:	ldr	r3, [pc, #244]	; 183e0 <sprintf@plt+0x6de0>
   182e8:	strb	r8, [r4, #22]
   182ec:	add	r3, pc, r3
   182f0:	str	r3, [r4, #24]
   182f4:	b	181dc <sprintf@plt+0x6bdc>
   182f8:	bl	114d4 <rb_outofmemory@plt>
   182fc:	ldr	r1, [pc, #224]	; 183e4 <sprintf@plt+0x6de4>
   18300:	mov	r0, r7
   18304:	add	r1, pc, r1
   18308:	bl	11330 <strcasecmp@plt>
   1830c:	cmp	r0, #0
   18310:	bne	1834c <sprintf@plt+0x6d4c>
   18314:	mov	r2, #4
   18318:	str	r2, [r4, #16]
   1831c:	ldr	r2, [pc, #196]	; 183e8 <sprintf@plt+0x6de8>
   18320:	mov	r3, r6
   18324:	add	r2, pc, r2
   18328:	mov	r1, #16
   1832c:	mov	r0, r4
   18330:	bl	11594 <snprintf@plt>
   18334:	ldr	r3, [pc, #176]	; 183ec <sprintf@plt+0x6dec>
   18338:	mov	r2, #1
   1833c:	add	r3, pc, r3
   18340:	str	r3, [r4, #24]
   18344:	strb	r2, [r4, #22]
   18348:	b	181dc <sprintf@plt+0x6bdc>
   1834c:	mov	r1, #0
   18350:	str	r1, [r4, #16]
   18354:	ldr	r1, [pc, #148]	; 183f0 <sprintf@plt+0x6df0>
   18358:	mov	r0, #67	; 0x43
   1835c:	mov	r3, r6
   18360:	mov	r2, r7
   18364:	add	r1, pc, r1
   18368:	bl	12370 <sprintf@plt+0xd70>
   1836c:	mov	r0, #3
   18370:	bl	115e8 <exit@plt>
   18374:	ldr	r3, [r2, #380]	; 0x17c
   18378:	str	r4, [r4, #28]
   1837c:	cmp	r3, #0
   18380:	str	lr, [r4, #32]
   18384:	str	lr, [r4, #36]	; 0x24
   18388:	add	r3, r4, #28
   1838c:	streq	r3, [r2, #380]	; 0x17c
   18390:	b	1825c <sprintf@plt+0x6c5c>
   18394:	ldr	r1, [pc, #88]	; 183f4 <sprintf@plt+0x6df4>
   18398:	mov	r0, #67	; 0x43
   1839c:	ldm	r5, {r2, r3}
   183a0:	add	r1, pc, r1
   183a4:	bl	12370 <sprintf@plt+0xd70>
   183a8:	mov	r0, #3
   183ac:	bl	115e8 <exit@plt>
   183b0:	strdeq	pc, [r0], -lr
   183b4:	andeq	r1, r0, r8, lsl #26
   183b8:	strdeq	r1, [r0], -r8
   183bc:	strdeq	r1, [r0], -ip
   183c0:			; <UNDEFINED> instruction: 0xfffffcb0
   183c4:	andeq	r7, r1, r0, asr #28
   183c8:	strdeq	r1, [r0], -r0
   183cc:	andeq	r7, r1, r4, asr #27
   183d0:	muleq	r0, r0, ip
   183d4:			; <UNDEFINED> instruction: 0xfffffcc0
   183d8:	andeq	r1, r0, r8, ror #23
   183dc:	strdeq	r1, [r0], -r0
   183e0:			; <UNDEFINED> instruction: 0xfffffafc
   183e4:	andeq	r1, r0, r4, lsr #23
   183e8:			; <UNDEFINED> instruction: 0x00001bb0
   183ec:			; <UNDEFINED> instruction: 0xfffffaac
   183f0:	andeq	r1, r0, r4, lsl #23
   183f4:	andeq	r1, r0, r4, asr #21
   183f8:	ldr	r3, [pc, #544]	; 18620 <sprintf@plt+0x7020>
   183fc:	ldr	r2, [pc, #544]	; 18624 <sprintf@plt+0x7024>
   18400:	add	r3, pc, r3
   18404:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18408:	mov	r5, r0
   1840c:	ldr	r0, [r3, r2]
   18410:	ldr	r2, [r5, #464]	; 0x1d0
   18414:	sub	sp, sp, #276	; 0x114
   18418:	ldr	ip, [r0, #12]
   1841c:	mov	r6, r1
   18420:	mov	r0, #1
   18424:	add	r3, r2, ip, lsl #4
   18428:	mov	r1, #28
   1842c:	ldr	r7, [r3, #8]
   18430:	bl	1133c <calloc@plt>
   18434:	subs	r4, r0, #0
   18438:	beq	185f8 <sprintf@plt+0x6ff8>
   1843c:	ldrh	sl, [r5, #248]	; 0xf8
   18440:	ldr	r8, [pc, #480]	; 18628 <sprintf@plt+0x7028>
   18444:	mov	r3, #1
   18448:	cmp	sl, #10
   1844c:	str	r3, [sp, #12]
   18450:	add	r8, pc, r8
   18454:	beq	18598 <sprintf@plt+0x6f98>
   18458:	ldr	r3, [r8, #184]	; 0xb8
   1845c:	cmp	r3, #0
   18460:	beq	18588 <sprintf@plt+0x6f88>
   18464:	add	r9, sp, #16
   18468:	mov	r2, #128	; 0x80
   1846c:	add	r1, r5, #248	; 0xf8
   18470:	mov	r0, r9
   18474:	add	fp, sp, #144	; 0x90
   18478:	bl	11444 <memcpy@plt>
   1847c:	mov	r2, #128	; 0x80
   18480:	add	r1, r8, #56	; 0x38
   18484:	mov	r0, fp
   18488:	bl	11444 <memcpy@plt>
   1848c:	str	r5, [r4]
   18490:	str	r6, [r4, #8]
   18494:	str	r8, [r4, #12]
   18498:	mov	r0, sl
   1849c:	mov	r3, r6
   184a0:	mov	r2, #0
   184a4:	mov	r1, #1
   184a8:	bl	112e8 <rb_socket@plt>
   184ac:	cmp	r0, #0
   184b0:	str	r0, [r4, #4]
   184b4:	beq	18564 <sprintf@plt+0x6f64>
   184b8:	bl	112c4 <rb_get_fd@plt>
   184bc:	mov	r3, #4
   184c0:	str	r3, [sp]
   184c4:	mov	r2, #1
   184c8:	add	r3, sp, #12
   184cc:	mov	r1, #6
   184d0:	bl	115c4 <setsockopt@plt>
   184d4:	mov	r3, #0
   184d8:	strh	r3, [sp, #146]	; 0x92
   184dc:	ldrh	r3, [r6, #20]
   184e0:	cmp	r7, #0
   184e4:	add	r2, r4, #16
   184e8:	rev16	r3, r3
   184ec:	strh	r3, [r9, #2]
   184f0:	beq	185fc <sprintf@plt+0x6ffc>
   184f4:	ldr	r3, [r7]
   184f8:	mov	r1, #0
   184fc:	cmp	r3, r1
   18500:	str	r4, [r4, #16]
   18504:	str	r3, [r4, #24]
   18508:	str	r1, [r4, #20]
   1850c:	strne	r2, [r3, #4]
   18510:	beq	185e8 <sprintf@plt+0x6fe8>
   18514:	ldrb	r1, [r6, #22]
   18518:	ldr	r3, [r7, #8]
   1851c:	str	r2, [r7]
   18520:	add	r3, r3, #1
   18524:	cmp	r1, #0
   18528:	str	r3, [r7, #8]
   1852c:	bne	185b4 <sprintf@plt+0x6fb4>
   18530:	ldr	r3, [pc, #244]	; 1862c <sprintf@plt+0x702c>
   18534:	ldr	r0, [r4, #4]
   18538:	add	r3, pc, r3
   1853c:	mov	r2, fp
   18540:	ldr	r3, [r3]
   18544:	mov	r1, r9
   18548:	str	r3, [sp, #4]
   1854c:	ldr	r3, [pc, #220]	; 18630 <sprintf@plt+0x7030>
   18550:	str	r4, [sp]
   18554:	add	r3, pc, r3
   18558:	bl	11288 <rb_connect_tcp@plt>
   1855c:	add	sp, sp, #276	; 0x114
   18560:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18564:	bl	115f4 <__errno_location@plt>
   18568:	ldr	r0, [r0]
   1856c:	bl	11234 <strerror@plt>
   18570:	ldr	r1, [pc, #188]	; 18634 <sprintf@plt+0x7034>
   18574:	mov	r2, r6
   18578:	add	r1, pc, r1
   1857c:	mov	r3, r0
   18580:	mov	r0, #87	; 0x57
   18584:	bl	12370 <sprintf@plt+0xd70>
   18588:	mov	r0, r4
   1858c:	add	sp, sp, #276	; 0x114
   18590:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18594:	b	113cc <free@plt>
   18598:	ldr	r3, [r6, #16]
   1859c:	ldr	r8, [pc, #148]	; 18638 <sprintf@plt+0x7038>
   185a0:	cmp	r3, #1
   185a4:	add	r8, pc, r8
   185a8:	add	r8, r8, #188	; 0xbc
   185ac:	bne	18458 <sprintf@plt+0x6e58>
   185b0:	b	1858c <sprintf@plt+0x6f8c>
   185b4:	ldr	r3, [pc, #128]	; 1863c <sprintf@plt+0x703c>
   185b8:	ldr	r0, [r4, #4]
   185bc:	add	r3, pc, r3
   185c0:	mov	r2, fp
   185c4:	ldr	r3, [r3]
   185c8:	mov	r1, r9
   185cc:	str	r3, [sp, #4]
   185d0:	ldr	r3, [pc, #104]	; 18640 <sprintf@plt+0x7040>
   185d4:	str	r4, [sp]
   185d8:	add	r3, pc, r3
   185dc:	bl	1127c <rb_connect_tcp_ssl@plt>
   185e0:	add	sp, sp, #276	; 0x114
   185e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   185e8:	ldr	r3, [r7, #4]
   185ec:	cmp	r3, #0
   185f0:	streq	r2, [r7, #4]
   185f4:	b	18514 <sprintf@plt+0x6f14>
   185f8:	bl	114d4 <rb_outofmemory@plt>
   185fc:	ldr	r3, [pc, #64]	; 18644 <sprintf@plt+0x7044>
   18600:	ldr	r1, [pc, #64]	; 18648 <sprintf@plt+0x7048>
   18604:	ldr	r0, [pc, #64]	; 1864c <sprintf@plt+0x704c>
   18608:	add	r3, pc, r3
   1860c:	mov	r2, #145	; 0x91
   18610:	add	r3, r3, #24
   18614:	add	r1, pc, r1
   18618:	add	r0, pc, r0
   1861c:	bl	1139c <__assert_fail@plt>
   18620:	strdeq	r2, [r1], -r8
   18624:	andeq	r0, r0, r4, lsl #3
   18628:	ldrdeq	r7, [r1], -r4
   1862c:	andeq	r3, r1, r8, lsr #19
   18630:			; <UNDEFINED> instruction: 0x000003b4
   18634:	ldrdeq	r1, [r0], -r8
   18638:	andeq	r7, r1, r0, lsl #21
   1863c:	andeq	r3, r1, r4, lsr #18
   18640:	andeq	r0, r0, r0, lsr r3
   18644:			; <UNDEFINED> instruction: 0x000016b4
   18648:	andeq	r0, r0, r0, asr #27
   1864c:	andeq	r1, r0, r4, lsr r2
   18650:	push	{r4, r5, r6, r7, r8, lr}
   18654:	mov	r7, r0
   18658:	ldr	r8, [pc, #216]	; 18738 <sprintf@plt+0x7138>
   1865c:	ldr	r3, [pc, #216]	; 1873c <sprintf@plt+0x713c>
   18660:	add	r8, pc, r8
   18664:	ldr	r6, [pc, #212]	; 18740 <sprintf@plt+0x7140>
   18668:	ldr	r3, [r8, r3]
   1866c:	add	r6, pc, r6
   18670:	ldr	r4, [r3]
   18674:	cmp	r4, #0
   18678:	bne	1868c <sprintf@plt+0x708c>
   1867c:	b	186c0 <sprintf@plt+0x70c0>
   18680:	ldr	r4, [r4, #8]
   18684:	cmp	r4, #0
   18688:	beq	186c0 <sprintf@plt+0x70c0>
   1868c:	ldr	r5, [r4]
   18690:	mov	r1, r6
   18694:	ldr	r0, [r5, #16]
   18698:	bl	11330 <strcasecmp@plt>
   1869c:	cmp	r0, #0
   186a0:	bne	18680 <sprintf@plt+0x7080>
   186a4:	ldr	r2, [r5, #12]
   186a8:	ldr	r3, [r7, #464]	; 0x1d0
   186ac:	add	r2, r3, r2, lsl #4
   186b0:	ldr	r2, [r2, #12]
   186b4:	cmp	r2, #2
   186b8:	beq	186c4 <sprintf@plt+0x70c4>
   186bc:	pop	{r4, r5, r6, r7, r8, pc}
   186c0:	ldr	r3, [r7, #464]	; 0x1d0
   186c4:	ldr	r1, [pc, #120]	; 18744 <sprintf@plt+0x7144>
   186c8:	ldr	r2, [pc, #120]	; 18748 <sprintf@plt+0x7148>
   186cc:	ldr	r1, [r8, r1]
   186d0:	add	r2, pc, r2
   186d4:	ldr	r5, [r1, #12]
   186d8:	ldr	r6, [r2]
   186dc:	add	r5, r3, r5, lsl #4
   186e0:	ldr	r8, [r5, #8]
   186e4:	bl	1142c <rb_current_time@plt>
   186e8:	ldr	r3, [pc, #92]	; 1874c <sprintf@plt+0x714c>
   186ec:	mov	r2, #1
   186f0:	add	r3, pc, r3
   186f4:	ldr	r4, [r3, #376]	; 0x178
   186f8:	cmp	r4, #0
   186fc:	add	r0, r6, r0
   18700:	str	r0, [r5, #4]
   18704:	strb	r2, [r8, #12]
   18708:	beq	18724 <sprintf@plt+0x7124>
   1870c:	ldr	r1, [r4]
   18710:	mov	r0, r7
   18714:	bl	183f8 <sprintf@plt+0x6df8>
   18718:	ldr	r4, [r4, #8]
   1871c:	cmp	r4, #0
   18720:	bne	1870c <sprintf@plt+0x710c>
   18724:	ldr	r1, [pc, #36]	; 18750 <sprintf@plt+0x7150>
   18728:	ldr	r0, [r7]
   1872c:	add	r1, pc, r1
   18730:	pop	{r4, r5, r6, r7, r8, lr}
   18734:	b	122f8 <sprintf@plt+0xcf8>
   18738:	muleq	r1, r8, r9
   1873c:	andeq	r0, r0, r0, lsr #3
   18740:	andeq	r1, r0, r4, lsr r4
   18744:	andeq	r0, r0, r4, lsl #3
   18748:	andeq	r3, r1, r0, lsl r8
   1874c:	andeq	r7, r1, r4, lsr r9
   18750:	andeq	r1, r0, r4, asr r8
   18754:	ldr	r2, [pc, #156]	; 187f8 <sprintf@plt+0x71f8>
   18758:	ldr	r3, [pc, #156]	; 187fc <sprintf@plt+0x71fc>
   1875c:	add	r2, pc, r2
   18760:	push	{r4, r5, r6, r7, r8, lr}
   18764:	ldr	r3, [r2, r3]
   18768:	ldr	r7, [r0, #464]	; 0x1d0
   1876c:	ldr	r3, [r3, #12]
   18770:	add	r3, r7, r3, lsl #4
   18774:	ldr	r3, [r3, #8]
   18778:	cmp	r3, #0
   1877c:	popeq	{r4, r5, r6, r7, r8, pc}
   18780:	ldrb	r3, [r3, #12]
   18784:	cmp	r3, #0
   18788:	popne	{r4, r5, r6, r7, r8, pc}
   1878c:	ldr	r3, [pc, #108]	; 18800 <sprintf@plt+0x7200>
   18790:	mov	r8, r0
   18794:	ldr	r3, [r2, r3]
   18798:	ldr	r4, [r3]
   1879c:	cmp	r4, #0
   187a0:	beq	187ec <sprintf@plt+0x71ec>
   187a4:	ldr	r6, [pc, #88]	; 18804 <sprintf@plt+0x7204>
   187a8:	add	r6, pc, r6
   187ac:	b	187bc <sprintf@plt+0x71bc>
   187b0:	ldr	r4, [r4, #8]
   187b4:	cmp	r4, #0
   187b8:	beq	187ec <sprintf@plt+0x71ec>
   187bc:	ldr	r5, [r4]
   187c0:	mov	r1, r6
   187c4:	ldr	r0, [r5, #16]
   187c8:	bl	11330 <strcasecmp@plt>
   187cc:	cmp	r0, #0
   187d0:	bne	187b0 <sprintf@plt+0x71b0>
   187d4:	ldr	r3, [r5, #12]
   187d8:	add	r7, r7, r3, lsl #4
   187dc:	ldr	r3, [r7, #12]
   187e0:	cmp	r3, #2
   187e4:	beq	187ec <sprintf@plt+0x71ec>
   187e8:	pop	{r4, r5, r6, r7, r8, pc}
   187ec:	mov	r0, r8
   187f0:	pop	{r4, r5, r6, r7, r8, lr}
   187f4:	b	18650 <sprintf@plt+0x7050>
   187f8:	muleq	r1, ip, r8
   187fc:	andeq	r0, r0, r4, lsl #3
   18800:	andeq	r0, r0, r0, lsr #3
   18804:	strdeq	r1, [r0], -r0
   18808:	ldr	r3, [pc, #236]	; 188fc <sprintf@plt+0x72fc>
   1880c:	push	{r4, r5, r6, r7, r8, lr}
   18810:	add	r3, pc, r3
   18814:	ldr	r4, [pc, #228]	; 18900 <sprintf@plt+0x7300>
   18818:	ldrb	r2, [r3, #388]	; 0x184
   1881c:	add	r4, pc, r4
   18820:	mov	r7, r0
   18824:	cmp	r2, #0
   18828:	beq	18838 <sprintf@plt+0x7238>
   1882c:	ldr	r3, [r3, #384]	; 0x180
   18830:	cmp	r3, #0
   18834:	bne	18854 <sprintf@plt+0x7254>
   18838:	ldr	r3, [pc, #196]	; 18904 <sprintf@plt+0x7304>
   1883c:	mov	r0, r7
   18840:	ldr	r3, [r4, r3]
   18844:	ldr	r1, [r3, #12]
   18848:	bl	12dec <sprintf@plt+0x17ec>
   1884c:	mov	r0, #1
   18850:	pop	{r4, r5, r6, r7, r8, pc}
   18854:	ldr	r2, [r0, #460]	; 0x1cc
   18858:	ldr	r3, [pc, #164]	; 18904 <sprintf@plt+0x7304>
   1885c:	add	r2, r2, #1
   18860:	str	r2, [r0, #460]	; 0x1cc
   18864:	ldr	r3, [r4, r3]
   18868:	mov	r1, #16
   1886c:	mov	r0, #1
   18870:	ldr	r5, [r3, #12]
   18874:	bl	1133c <calloc@plt>
   18878:	cmp	r0, #0
   1887c:	beq	188f8 <sprintf@plt+0x72f8>
   18880:	ldr	r2, [r7, #464]	; 0x1d0
   18884:	ldr	r3, [pc, #124]	; 18908 <sprintf@plt+0x7308>
   18888:	add	r2, r2, r5, lsl #4
   1888c:	str	r0, [r2, #8]
   18890:	ldr	r3, [r4, r3]
   18894:	ldr	r4, [r3]
   18898:	cmp	r4, #0
   1889c:	beq	188e8 <sprintf@plt+0x72e8>
   188a0:	ldr	r6, [pc, #100]	; 1890c <sprintf@plt+0x730c>
   188a4:	add	r6, pc, r6
   188a8:	b	188b8 <sprintf@plt+0x72b8>
   188ac:	ldr	r4, [r4, #8]
   188b0:	cmp	r4, #0
   188b4:	beq	188e8 <sprintf@plt+0x72e8>
   188b8:	ldr	r5, [r4]
   188bc:	mov	r1, r6
   188c0:	ldr	r0, [r5, #16]
   188c4:	bl	11330 <strcasecmp@plt>
   188c8:	cmp	r0, #0
   188cc:	bne	188ac <sprintf@plt+0x72ac>
   188d0:	ldr	r2, [r5, #12]
   188d4:	ldr	r3, [r7, #464]	; 0x1d0
   188d8:	add	r3, r3, r2, lsl #4
   188dc:	ldr	r3, [r3, #12]
   188e0:	cmp	r3, #2
   188e4:	bne	1884c <sprintf@plt+0x724c>
   188e8:	mov	r0, r7
   188ec:	bl	18650 <sprintf@plt+0x7050>
   188f0:	mov	r0, #1
   188f4:	pop	{r4, r5, r6, r7, r8, pc}
   188f8:	bl	114d4 <rb_outofmemory@plt>
   188fc:	andeq	r7, r1, r4, lsl r8
   18900:	ldrdeq	r2, [r1], -ip
   18904:	andeq	r0, r0, r4, lsl #3
   18908:	andeq	r0, r0, r0, lsr #3
   1890c:	strdeq	r1, [r0], -r4
   18910:	ldr	r3, [pc, #224]	; 189f8 <sprintf@plt+0x73f8>
   18914:	ldr	r0, [pc, #224]	; 189fc <sprintf@plt+0x73fc>
   18918:	add	r3, pc, r3
   1891c:	push	{r4, r5, r6, lr}
   18920:	cmp	r1, #0
   18924:	ldr	r1, [r3, r0]
   18928:	mov	r4, r2
   1892c:	ldr	r2, [r2]
   18930:	ldr	r1, [r1, #12]
   18934:	ldr	r3, [r2, #464]	; 0x1d0
   18938:	add	r3, r3, r1, lsl #4
   1893c:	ldr	r5, [r3, #8]
   18940:	bne	18958 <sprintf@plt+0x7358>
   18944:	ldr	r3, [pc, #180]	; 18a00 <sprintf@plt+0x7400>
   18948:	add	r3, pc, r3
   1894c:	ldrb	r1, [r3, #388]	; 0x184
   18950:	cmp	r1, #0
   18954:	bne	189a4 <sprintf@plt+0x73a4>
   18958:	ldr	r0, [r4, #4]
   1895c:	bl	1145c <rb_close@plt>
   18960:	cmp	r5, #0
   18964:	beq	189f4 <sprintf@plt+0x73f4>
   18968:	ldr	r3, [r4, #24]
   1896c:	ldr	r2, [r4, #20]
   18970:	cmp	r3, #0
   18974:	strne	r2, [r3, #4]
   18978:	ldrne	r2, [r4, #20]
   1897c:	streq	r2, [r5, #4]
   18980:	cmp	r2, #0
   18984:	strne	r3, [r2, #8]
   18988:	streq	r3, [r5]
   1898c:	ldr	r3, [r5, #8]
   18990:	mov	r0, r4
   18994:	sub	r3, r3, #1
   18998:	str	r3, [r5, #8]
   1899c:	pop	{r4, r5, r6, lr}
   189a0:	b	113cc <free@plt>
   189a4:	ldrh	r2, [r2, #248]	; 0xf8
   189a8:	ldr	r1, [r4, #8]
   189ac:	cmp	r2, #2
   189b0:	beq	189d8 <sprintf@plt+0x73d8>
   189b4:	cmp	r2, #10
   189b8:	bne	18958 <sprintf@plt+0x7358>
   189bc:	ldrb	r2, [r1, #23]
   189c0:	cmp	r2, #0
   189c4:	beq	18958 <sprintf@plt+0x7358>
   189c8:	ldr	r3, [r3, #372]	; 0x174
   189cc:	cmp	r3, #0
   189d0:	bne	189e4 <sprintf@plt+0x73e4>
   189d4:	b	18958 <sprintf@plt+0x7358>
   189d8:	ldr	r3, [r3, #184]	; 0xb8
   189dc:	cmp	r3, #0
   189e0:	beq	18958 <sprintf@plt+0x7358>
   189e4:	ldr	r3, [r1, #24]
   189e8:	mov	r0, r4
   189ec:	blx	r3
   189f0:	b	18958 <sprintf@plt+0x7358>
   189f4:	bl	116a4 <sprintf@plt+0xa4>
   189f8:	andeq	r2, r1, r0, ror #13
   189fc:	andeq	r0, r0, r4, lsl #3
   18a00:	ldrdeq	r7, [r1], -ip
   18a04:	push	{r4, r5, r6, r7, r8, r9, lr}
   18a08:	sub	sp, sp, #12
   18a0c:	ldr	r4, [r2]
   18a10:	ldr	r1, [pc, #744]	; 18d00 <sprintf@plt+0x7700>
   18a14:	mov	r0, r4
   18a18:	add	r1, pc, r1
   18a1c:	mov	r5, r2
   18a20:	bl	11330 <strcasecmp@plt>
   18a24:	ldr	r6, [pc, #728]	; 18d04 <sprintf@plt+0x7704>
   18a28:	add	r6, pc, r6
   18a2c:	cmp	r0, #0
   18a30:	beq	18cb8 <sprintf@plt+0x76b8>
   18a34:	ldr	r1, [pc, #716]	; 18d08 <sprintf@plt+0x7708>
   18a38:	mov	r0, r4
   18a3c:	add	r1, pc, r1
   18a40:	bl	11330 <strcasecmp@plt>
   18a44:	cmp	r0, #0
   18a48:	moveq	r4, #2
   18a4c:	bne	18c40 <sprintf@plt+0x7640>
   18a50:	mov	r2, #10
   18a54:	mov	r1, #0
   18a58:	ldr	r0, [r5, #4]
   18a5c:	bl	11468 <strtol@plt>
   18a60:	ldr	r3, [pc, #676]	; 18d0c <sprintf@plt+0x770c>
   18a64:	sub	r2, r0, #1
   18a68:	cmp	r2, r3
   18a6c:	bhi	18c9c <sprintf@plt+0x769c>
   18a70:	ldr	r2, [pc, #664]	; 18d10 <sprintf@plt+0x7710>
   18a74:	uxth	ip, r0
   18a78:	add	r2, pc, r2
   18a7c:	ldr	r2, [r2, #376]	; 0x178
   18a80:	cmp	r2, #0
   18a84:	bne	18a98 <sprintf@plt+0x7498>
   18a88:	b	18c14 <sprintf@plt+0x7614>
   18a8c:	ldr	r2, [r2, #8]
   18a90:	cmp	r2, #0
   18a94:	beq	18c14 <sprintf@plt+0x7614>
   18a98:	ldr	r7, [r2]
   18a9c:	ldr	r1, [r7, #16]
   18aa0:	cmp	r1, r4
   18aa4:	bne	18a8c <sprintf@plt+0x748c>
   18aa8:	ldrh	r1, [r7, #20]
   18aac:	cmp	r1, ip
   18ab0:	bne	18a8c <sprintf@plt+0x748c>
   18ab4:	ldr	r3, [pc, #600]	; 18d14 <sprintf@plt+0x7714>
   18ab8:	mov	r1, sp
   18abc:	mov	r5, sp
   18ac0:	ldr	r4, [r6, r3]
   18ac4:	ldr	r0, [r4]
   18ac8:	bl	11408 <rb_dictionary_foreach_start@plt>
   18acc:	mov	r1, r5
   18ad0:	ldr	r0, [r4]
   18ad4:	bl	11324 <rb_dictionary_foreach_cur@plt>
   18ad8:	subs	r8, r0, #0
   18adc:	beq	18bc0 <sprintf@plt+0x75c0>
   18ae0:	ldr	r2, [pc, #560]	; 18d18 <sprintf@plt+0x7718>
   18ae4:	ldr	r3, [r8, #464]	; 0x1d0
   18ae8:	ldr	r2, [r6, r2]
   18aec:	ldr	r2, [r2, #12]
   18af0:	add	r3, r3, r2, lsl #4
   18af4:	ldr	r9, [r3, #8]
   18af8:	cmp	r9, #0
   18afc:	beq	18ba4 <sprintf@plt+0x75a4>
   18b00:	ldr	lr, [r8, #460]	; 0x1cc
   18b04:	ldr	r3, [r9]
   18b08:	add	lr, lr, #1
   18b0c:	cmp	r3, #0
   18b10:	str	lr, [r8, #460]	; 0x1cc
   18b14:	beq	18b94 <sprintf@plt+0x7594>
   18b18:	ldrh	ip, [r7, #20]
   18b1c:	b	18b2c <sprintf@plt+0x752c>
   18b20:	ldr	r3, [r3, #8]
   18b24:	cmp	r3, #0
   18b28:	beq	18b94 <sprintf@plt+0x7594>
   18b2c:	ldr	r0, [r3]
   18b30:	ldr	r2, [r0, #8]
   18b34:	ldrh	r1, [r2, #20]
   18b38:	cmp	r1, ip
   18b3c:	bne	18b20 <sprintf@plt+0x7520>
   18b40:	ldr	r1, [r2, #16]
   18b44:	ldr	r2, [r7, #16]
   18b48:	cmp	r1, r2
   18b4c:	bne	18b20 <sprintf@plt+0x7520>
   18b50:	ldr	r3, [r0, #24]
   18b54:	ldr	r2, [r0, #20]
   18b58:	cmp	r3, #0
   18b5c:	strne	r2, [r3, #4]
   18b60:	ldrne	r2, [r0, #20]
   18b64:	streq	r2, [r9, #4]
   18b68:	cmp	r2, #0
   18b6c:	strne	r3, [r2, #8]
   18b70:	streq	r3, [r9]
   18b74:	ldr	r3, [r9, #8]
   18b78:	sub	r3, r3, #1
   18b7c:	str	r3, [r9, #8]
   18b80:	bl	113cc <free@plt>
   18b84:	ldr	r3, [r9, #8]
   18b88:	cmp	r3, #0
   18b8c:	beq	18c34 <sprintf@plt+0x7634>
   18b90:	ldr	lr, [r8, #460]	; 0x1cc
   18b94:	sub	lr, lr, #1
   18b98:	cmp	lr, #0
   18b9c:	str	lr, [r8, #460]	; 0x1cc
   18ba0:	beq	18bb4 <sprintf@plt+0x75b4>
   18ba4:	mov	r1, r5
   18ba8:	ldr	r0, [r4]
   18bac:	bl	113c0 <rb_dictionary_foreach_next@plt>
   18bb0:	b	18acc <sprintf@plt+0x74cc>
   18bb4:	mov	r0, r8
   18bb8:	bl	128fc <sprintf@plt+0x12fc>
   18bbc:	b	18ba4 <sprintf@plt+0x75a4>
   18bc0:	ldr	r3, [r7, #36]	; 0x24
   18bc4:	cmp	r3, #0
   18bc8:	beq	18cd0 <sprintf@plt+0x76d0>
   18bcc:	ldr	r2, [r7, #32]
   18bd0:	str	r2, [r3, #4]
   18bd4:	ldr	r2, [r7, #32]
   18bd8:	cmp	r2, #0
   18bdc:	strne	r3, [r2, #8]
   18be0:	beq	18cc0 <sprintf@plt+0x76c0>
   18be4:	ldr	r4, [pc, #304]	; 18d1c <sprintf@plt+0x771c>
   18be8:	mov	r0, r7
   18bec:	add	r4, pc, r4
   18bf0:	ldr	r3, [r4, #384]	; 0x180
   18bf4:	sub	r3, r3, #1
   18bf8:	str	r3, [r4, #384]	; 0x180
   18bfc:	bl	113cc <free@plt>
   18c00:	ldr	r3, [r4, #384]	; 0x180
   18c04:	cmp	r3, #0
   18c08:	strbeq	r3, [r4, #388]	; 0x184
   18c0c:	add	sp, sp, #12
   18c10:	pop	{r4, r5, r6, r7, r8, r9, pc}
   18c14:	ldr	r1, [pc, #260]	; 18d20 <sprintf@plt+0x7720>
   18c18:	mov	r3, r0
   18c1c:	ldr	r2, [r5]
   18c20:	mov	r0, #67	; 0x43
   18c24:	add	r1, pc, r1
   18c28:	bl	12370 <sprintf@plt+0xd70>
   18c2c:	mov	r0, #3
   18c30:	bl	115e8 <exit@plt>
   18c34:	mov	r0, r8
   18c38:	bl	174a8 <sprintf@plt+0x5ea8>
   18c3c:	b	18b90 <sprintf@plt+0x7590>
   18c40:	ldr	r1, [pc, #220]	; 18d24 <sprintf@plt+0x7724>
   18c44:	mov	r0, r4
   18c48:	add	r1, pc, r1
   18c4c:	bl	11330 <strcasecmp@plt>
   18c50:	cmp	r0, #0
   18c54:	moveq	r4, #3
   18c58:	beq	18a50 <sprintf@plt+0x7450>
   18c5c:	ldr	r1, [pc, #196]	; 18d28 <sprintf@plt+0x7728>
   18c60:	mov	r0, r4
   18c64:	add	r1, pc, r1
   18c68:	bl	11330 <strcasecmp@plt>
   18c6c:	cmp	r0, #0
   18c70:	moveq	r4, #4
   18c74:	beq	18a50 <sprintf@plt+0x7450>
   18c78:	mov	r2, #10
   18c7c:	mov	r1, #0
   18c80:	ldr	r0, [r5, #4]
   18c84:	bl	11468 <strtol@plt>
   18c88:	ldr	r2, [pc, #124]	; 18d0c <sprintf@plt+0x770c>
   18c8c:	sub	r1, r0, #1
   18c90:	cmp	r1, r2
   18c94:	mov	r3, r0
   18c98:	bls	18ce4 <sprintf@plt+0x76e4>
   18c9c:	ldr	r1, [pc, #136]	; 18d2c <sprintf@plt+0x772c>
   18ca0:	mov	r0, #67	; 0x43
   18ca4:	ldm	r5, {r2, r3}
   18ca8:	add	r1, pc, r1
   18cac:	bl	12370 <sprintf@plt+0xd70>
   18cb0:	mov	r0, #3
   18cb4:	bl	115e8 <exit@plt>
   18cb8:	mov	r4, #1
   18cbc:	b	18a50 <sprintf@plt+0x7450>
   18cc0:	ldr	r2, [pc, #104]	; 18d30 <sprintf@plt+0x7730>
   18cc4:	add	r2, pc, r2
   18cc8:	str	r3, [r2, #376]	; 0x178
   18ccc:	b	18be4 <sprintf@plt+0x75e4>
   18cd0:	ldr	r1, [pc, #92]	; 18d34 <sprintf@plt+0x7734>
   18cd4:	ldr	r2, [r7, #32]
   18cd8:	add	r1, pc, r1
   18cdc:	str	r2, [r1, #380]	; 0x17c
   18ce0:	b	18bd8 <sprintf@plt+0x75d8>
   18ce4:	ldr	r1, [pc, #76]	; 18d38 <sprintf@plt+0x7738>
   18ce8:	mov	r0, #67	; 0x43
   18cec:	ldr	r2, [r5]
   18cf0:	add	r1, pc, r1
   18cf4:	bl	12370 <sprintf@plt+0xd70>
   18cf8:	mov	r0, #3
   18cfc:	bl	115e8 <exit@plt>
   18d00:	andeq	r1, r0, r4, ror r4
   18d04:	ldrdeq	r2, [r1], -r0
   18d08:	andeq	r1, r0, r8, asr r4
   18d0c:	strdeq	pc, [r0], -lr
   18d10:	andeq	r7, r1, ip, lsr #11
   18d14:	andeq	r0, r0, r8, asr r1
   18d18:	andeq	r0, r0, r4, lsl #3
   18d1c:	andeq	r7, r1, r8, lsr r4
   18d20:	andeq	r1, r0, r8, ror #7
   18d24:	andeq	r1, r0, r4, asr r2
   18d28:	andeq	r1, r0, r4, asr #4
   18d2c:	strdeq	r1, [r0], -ip
   18d30:	andeq	r7, r1, r0, ror #6
   18d34:	andeq	r7, r1, ip, asr #6
   18d38:	andeq	r1, r0, r4, ror #5
   18d3c:	cmp	r1, #0
   18d40:	beq	18f4c <sprintf@plt+0x794c>
   18d44:	eor	ip, r0, r1
   18d48:	rsbmi	r1, r1, #0
   18d4c:	subs	r2, r1, #1
   18d50:	beq	18f18 <sprintf@plt+0x7918>
   18d54:	movs	r3, r0
   18d58:	rsbmi	r3, r0, #0
   18d5c:	cmp	r3, r1
   18d60:	bls	18f24 <sprintf@plt+0x7924>
   18d64:	tst	r1, r2
   18d68:	beq	18f34 <sprintf@plt+0x7934>
   18d6c:	clz	r2, r3
   18d70:	clz	r0, r1
   18d74:	sub	r2, r0, r2
   18d78:	rsbs	r2, r2, #31
   18d7c:	addne	r2, r2, r2, lsl #1
   18d80:	mov	r0, #0
   18d84:	addne	pc, pc, r2, lsl #2
   18d88:	nop			; (mov r0, r0)
   18d8c:	cmp	r3, r1, lsl #31
   18d90:	adc	r0, r0, r0
   18d94:	subcs	r3, r3, r1, lsl #31
   18d98:	cmp	r3, r1, lsl #30
   18d9c:	adc	r0, r0, r0
   18da0:	subcs	r3, r3, r1, lsl #30
   18da4:	cmp	r3, r1, lsl #29
   18da8:	adc	r0, r0, r0
   18dac:	subcs	r3, r3, r1, lsl #29
   18db0:	cmp	r3, r1, lsl #28
   18db4:	adc	r0, r0, r0
   18db8:	subcs	r3, r3, r1, lsl #28
   18dbc:	cmp	r3, r1, lsl #27
   18dc0:	adc	r0, r0, r0
   18dc4:	subcs	r3, r3, r1, lsl #27
   18dc8:	cmp	r3, r1, lsl #26
   18dcc:	adc	r0, r0, r0
   18dd0:	subcs	r3, r3, r1, lsl #26
   18dd4:	cmp	r3, r1, lsl #25
   18dd8:	adc	r0, r0, r0
   18ddc:	subcs	r3, r3, r1, lsl #25
   18de0:	cmp	r3, r1, lsl #24
   18de4:	adc	r0, r0, r0
   18de8:	subcs	r3, r3, r1, lsl #24
   18dec:	cmp	r3, r1, lsl #23
   18df0:	adc	r0, r0, r0
   18df4:	subcs	r3, r3, r1, lsl #23
   18df8:	cmp	r3, r1, lsl #22
   18dfc:	adc	r0, r0, r0
   18e00:	subcs	r3, r3, r1, lsl #22
   18e04:	cmp	r3, r1, lsl #21
   18e08:	adc	r0, r0, r0
   18e0c:	subcs	r3, r3, r1, lsl #21
   18e10:	cmp	r3, r1, lsl #20
   18e14:	adc	r0, r0, r0
   18e18:	subcs	r3, r3, r1, lsl #20
   18e1c:	cmp	r3, r1, lsl #19
   18e20:	adc	r0, r0, r0
   18e24:	subcs	r3, r3, r1, lsl #19
   18e28:	cmp	r3, r1, lsl #18
   18e2c:	adc	r0, r0, r0
   18e30:	subcs	r3, r3, r1, lsl #18
   18e34:	cmp	r3, r1, lsl #17
   18e38:	adc	r0, r0, r0
   18e3c:	subcs	r3, r3, r1, lsl #17
   18e40:	cmp	r3, r1, lsl #16
   18e44:	adc	r0, r0, r0
   18e48:	subcs	r3, r3, r1, lsl #16
   18e4c:	cmp	r3, r1, lsl #15
   18e50:	adc	r0, r0, r0
   18e54:	subcs	r3, r3, r1, lsl #15
   18e58:	cmp	r3, r1, lsl #14
   18e5c:	adc	r0, r0, r0
   18e60:	subcs	r3, r3, r1, lsl #14
   18e64:	cmp	r3, r1, lsl #13
   18e68:	adc	r0, r0, r0
   18e6c:	subcs	r3, r3, r1, lsl #13
   18e70:	cmp	r3, r1, lsl #12
   18e74:	adc	r0, r0, r0
   18e78:	subcs	r3, r3, r1, lsl #12
   18e7c:	cmp	r3, r1, lsl #11
   18e80:	adc	r0, r0, r0
   18e84:	subcs	r3, r3, r1, lsl #11
   18e88:	cmp	r3, r1, lsl #10
   18e8c:	adc	r0, r0, r0
   18e90:	subcs	r3, r3, r1, lsl #10
   18e94:	cmp	r3, r1, lsl #9
   18e98:	adc	r0, r0, r0
   18e9c:	subcs	r3, r3, r1, lsl #9
   18ea0:	cmp	r3, r1, lsl #8
   18ea4:	adc	r0, r0, r0
   18ea8:	subcs	r3, r3, r1, lsl #8
   18eac:	cmp	r3, r1, lsl #7
   18eb0:	adc	r0, r0, r0
   18eb4:	subcs	r3, r3, r1, lsl #7
   18eb8:	cmp	r3, r1, lsl #6
   18ebc:	adc	r0, r0, r0
   18ec0:	subcs	r3, r3, r1, lsl #6
   18ec4:	cmp	r3, r1, lsl #5
   18ec8:	adc	r0, r0, r0
   18ecc:	subcs	r3, r3, r1, lsl #5
   18ed0:	cmp	r3, r1, lsl #4
   18ed4:	adc	r0, r0, r0
   18ed8:	subcs	r3, r3, r1, lsl #4
   18edc:	cmp	r3, r1, lsl #3
   18ee0:	adc	r0, r0, r0
   18ee4:	subcs	r3, r3, r1, lsl #3
   18ee8:	cmp	r3, r1, lsl #2
   18eec:	adc	r0, r0, r0
   18ef0:	subcs	r3, r3, r1, lsl #2
   18ef4:	cmp	r3, r1, lsl #1
   18ef8:	adc	r0, r0, r0
   18efc:	subcs	r3, r3, r1, lsl #1
   18f00:	cmp	r3, r1
   18f04:	adc	r0, r0, r0
   18f08:	subcs	r3, r3, r1
   18f0c:	cmp	ip, #0
   18f10:	rsbmi	r0, r0, #0
   18f14:	bx	lr
   18f18:	teq	ip, r0
   18f1c:	rsbmi	r0, r0, #0
   18f20:	bx	lr
   18f24:	movcc	r0, #0
   18f28:	asreq	r0, ip, #31
   18f2c:	orreq	r0, r0, #1
   18f30:	bx	lr
   18f34:	clz	r2, r1
   18f38:	rsb	r2, r2, #31
   18f3c:	cmp	ip, #0
   18f40:	lsr	r0, r3, r2
   18f44:	rsbmi	r0, r0, #0
   18f48:	bx	lr
   18f4c:	cmp	r0, #0
   18f50:	mvngt	r0, #-2147483648	; 0x80000000
   18f54:	movlt	r0, #-2147483648	; 0x80000000
   18f58:	b	18f7c <sprintf@plt+0x797c>
   18f5c:	cmp	r1, #0
   18f60:	beq	18f4c <sprintf@plt+0x794c>
   18f64:	push	{r0, r1, lr}
   18f68:	bl	18d44 <sprintf@plt+0x7744>
   18f6c:	pop	{r1, r2, lr}
   18f70:	mul	r3, r2, r0
   18f74:	sub	r1, r1, r3
   18f78:	bx	lr
   18f7c:	push	{r1, lr}
   18f80:	mov	r0, #8
   18f84:	bl	11480 <raise@plt>
   18f88:	pop	{r1, pc}
   18f8c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18f90:	mov	r7, r0
   18f94:	ldr	r6, [pc, #72]	; 18fe4 <sprintf@plt+0x79e4>
   18f98:	ldr	r5, [pc, #72]	; 18fe8 <sprintf@plt+0x79e8>
   18f9c:	add	r6, pc, r6
   18fa0:	add	r5, pc, r5
   18fa4:	sub	r6, r6, r5
   18fa8:	mov	r8, r1
   18fac:	mov	r9, r2
   18fb0:	bl	11208 <sigemptyset@plt-0x20>
   18fb4:	asrs	r6, r6, #2
   18fb8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   18fbc:	mov	r4, #0
   18fc0:	add	r4, r4, #1
   18fc4:	ldr	r3, [r5], #4
   18fc8:	mov	r2, r9
   18fcc:	mov	r1, r8
   18fd0:	mov	r0, r7
   18fd4:	blx	r3
   18fd8:	cmp	r6, r4
   18fdc:	bne	18fc0 <sprintf@plt+0x79c0>
   18fe0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18fe4:	andeq	r1, r1, r4, lsr pc
   18fe8:	andeq	r1, r1, ip, lsr #30
   18fec:	bx	lr

Disassembly of section .fini:

00018ff0 <.fini>:
   18ff0:	push	{r3, lr}
   18ff4:	pop	{r3, pc}
