
../repos/coreutils/src/wc:     file format elf32-littlearm


Disassembly of section .init:

00011278 <.init>:
   11278:	push	{r3, lr}
   1127c:	bl	115fc <__assert_fail@plt+0x4c>
   11280:	pop	{r3, pc}

Disassembly of section .plt:

00011284 <calloc@plt-0x14>:
   11284:	push	{lr}		; (str lr, [sp, #-4]!)
   11288:	ldr	lr, [pc, #4]	; 11294 <calloc@plt-0x4>
   1128c:	add	lr, pc, lr
   11290:	ldr	pc, [lr, #8]!
   11294:	andeq	r7, r1, ip, ror #26

00011298 <calloc@plt>:
   11298:	add	ip, pc, #0, 12
   1129c:	add	ip, ip, #94208	; 0x17000
   112a0:	ldr	pc, [ip, #3436]!	; 0xd6c

000112a4 <fputs_unlocked@plt>:
   112a4:	add	ip, pc, #0, 12
   112a8:	add	ip, ip, #94208	; 0x17000
   112ac:	ldr	pc, [ip, #3428]!	; 0xd64

000112b0 <raise@plt>:
   112b0:	add	ip, pc, #0, 12
   112b4:	add	ip, ip, #94208	; 0x17000
   112b8:	ldr	pc, [ip, #3420]!	; 0xd5c

000112bc <strcmp@plt>:
   112bc:	add	ip, pc, #0, 12
   112c0:	add	ip, ip, #94208	; 0x17000
   112c4:	ldr	pc, [ip, #3412]!	; 0xd54

000112c8 <posix_fadvise64@plt>:
   112c8:	add	ip, pc, #0, 12
   112cc:	add	ip, ip, #94208	; 0x17000
   112d0:	ldr	pc, [ip, #3404]!	; 0xd4c

000112d4 <read@plt>:
   112d4:	add	ip, pc, #0, 12
   112d8:	add	ip, ip, #94208	; 0x17000
   112dc:	ldr	pc, [ip, #3396]!	; 0xd44

000112e0 <fflush@plt>:
   112e0:	add	ip, pc, #0, 12
   112e4:	add	ip, ip, #94208	; 0x17000
   112e8:	ldr	pc, [ip, #3388]!	; 0xd3c

000112ec <wcwidth@plt>:
   112ec:	add	ip, pc, #0, 12
   112f0:	add	ip, ip, #94208	; 0x17000
   112f4:	ldr	pc, [ip, #3380]!	; 0xd34

000112f8 <memmove@plt>:
   112f8:	add	ip, pc, #0, 12
   112fc:	add	ip, ip, #94208	; 0x17000
   11300:	ldr	pc, [ip, #3372]!	; 0xd2c

00011304 <free@plt>:
   11304:	add	ip, pc, #0, 12
   11308:	add	ip, ip, #94208	; 0x17000
   1130c:	ldr	pc, [ip, #3364]!	; 0xd24

00011310 <ferror@plt>:
   11310:	add	ip, pc, #0, 12
   11314:	add	ip, ip, #94208	; 0x17000
   11318:	ldr	pc, [ip, #3356]!	; 0xd1c

0001131c <_exit@plt>:
   1131c:	add	ip, pc, #0, 12
   11320:	add	ip, ip, #94208	; 0x17000
   11324:	ldr	pc, [ip, #3348]!	; 0xd14

00011328 <memcpy@plt>:
   11328:	add	ip, pc, #0, 12
   1132c:	add	ip, ip, #94208	; 0x17000
   11330:	ldr	pc, [ip, #3340]!	; 0xd0c

00011334 <mbsinit@plt>:
   11334:	add	ip, pc, #0, 12
   11338:	add	ip, ip, #94208	; 0x17000
   1133c:	ldr	pc, [ip, #3332]!	; 0xd04

00011340 <memcmp@plt>:
   11340:	add	ip, pc, #0, 12
   11344:	add	ip, ip, #94208	; 0x17000
   11348:	ldr	pc, [ip, #3324]!	; 0xcfc

0001134c <dcgettext@plt>:
   1134c:	add	ip, pc, #0, 12
   11350:	add	ip, ip, #94208	; 0x17000
   11354:	ldr	pc, [ip, #3316]!	; 0xcf4

00011358 <sysconf@plt>:
   11358:	add	ip, pc, #0, 12
   1135c:	add	ip, ip, #94208	; 0x17000
   11360:	ldr	pc, [ip, #3308]!	; 0xcec

00011364 <realloc@plt>:
   11364:	add	ip, pc, #0, 12
   11368:	add	ip, ip, #94208	; 0x17000
   1136c:	ldr	pc, [ip, #3300]!	; 0xce4

00011370 <textdomain@plt>:
   11370:	add	ip, pc, #0, 12
   11374:	add	ip, ip, #94208	; 0x17000
   11378:	ldr	pc, [ip, #3292]!	; 0xcdc

0001137c <iswcntrl@plt>:
   1137c:	add	ip, pc, #0, 12
   11380:	add	ip, ip, #94208	; 0x17000
   11384:	ldr	pc, [ip, #3284]!	; 0xcd4

00011388 <rawmemchr@plt>:
   11388:	add	ip, pc, #0, 12
   1138c:	add	ip, ip, #94208	; 0x17000
   11390:	ldr	pc, [ip, #3276]!	; 0xccc

00011394 <iswprint@plt>:
   11394:	add	ip, pc, #0, 12
   11398:	add	ip, ip, #94208	; 0x17000
   1139c:	ldr	pc, [ip, #3268]!	; 0xcc4

000113a0 <__fxstat64@plt>:
   113a0:	add	ip, pc, #0, 12
   113a4:	add	ip, ip, #94208	; 0x17000
   113a8:	ldr	pc, [ip, #3260]!	; 0xcbc

000113ac <fwrite@plt>:
   113ac:	add	ip, pc, #0, 12
   113b0:	add	ip, ip, #94208	; 0x17000
   113b4:	ldr	pc, [ip, #3252]!	; 0xcb4

000113b8 <lseek64@plt>:
   113b8:	add	ip, pc, #0, 12
   113bc:	add	ip, ip, #94208	; 0x17000
   113c0:	ldr	pc, [ip, #3244]!	; 0xcac

000113c4 <__ctype_get_mb_cur_max@plt>:
   113c4:	add	ip, pc, #0, 12
   113c8:	add	ip, ip, #94208	; 0x17000
   113cc:	ldr	pc, [ip, #3236]!	; 0xca4

000113d0 <__fpending@plt>:
   113d0:	add	ip, pc, #0, 12
   113d4:	add	ip, ip, #94208	; 0x17000
   113d8:	ldr	pc, [ip, #3228]!	; 0xc9c

000113dc <mbrtowc@plt>:
   113dc:	add	ip, pc, #0, 12
   113e0:	add	ip, ip, #94208	; 0x17000
   113e4:	ldr	pc, [ip, #3220]!	; 0xc94

000113e8 <error@plt>:
   113e8:	add	ip, pc, #0, 12
   113ec:	add	ip, ip, #94208	; 0x17000
   113f0:	ldr	pc, [ip, #3212]!	; 0xc8c

000113f4 <open64@plt>:
   113f4:	add	ip, pc, #0, 12
   113f8:	add	ip, ip, #94208	; 0x17000
   113fc:	ldr	pc, [ip, #3204]!	; 0xc84

00011400 <getenv@plt>:
   11400:	add	ip, pc, #0, 12
   11404:	add	ip, ip, #94208	; 0x17000
   11408:	ldr	pc, [ip, #3196]!	; 0xc7c

0001140c <sysinfo@plt>:
   1140c:	add	ip, pc, #0, 12
   11410:	add	ip, ip, #94208	; 0x17000
   11414:	ldr	pc, [ip, #3188]!	; 0xc74

00011418 <malloc@plt>:
   11418:	add	ip, pc, #0, 12
   1141c:	add	ip, ip, #94208	; 0x17000
   11420:	ldr	pc, [ip, #3180]!	; 0xc6c

00011424 <__libc_start_main@plt>:
   11424:	add	ip, pc, #0, 12
   11428:	add	ip, ip, #94208	; 0x17000
   1142c:	ldr	pc, [ip, #3172]!	; 0xc64

00011430 <__freading@plt>:
   11430:	add	ip, pc, #0, 12
   11434:	add	ip, ip, #94208	; 0x17000
   11438:	ldr	pc, [ip, #3164]!	; 0xc5c

0001143c <__gmon_start__@plt>:
   1143c:	add	ip, pc, #0, 12
   11440:	add	ip, ip, #94208	; 0x17000
   11444:	ldr	pc, [ip, #3156]!	; 0xc54

00011448 <getopt_long@plt>:
   11448:	add	ip, pc, #0, 12
   1144c:	add	ip, ip, #94208	; 0x17000
   11450:	ldr	pc, [ip, #3148]!	; 0xc4c

00011454 <__ctype_b_loc@plt>:
   11454:	add	ip, pc, #0, 12
   11458:	add	ip, ip, #94208	; 0x17000
   1145c:	ldr	pc, [ip, #3140]!	; 0xc44

00011460 <exit@plt>:
   11460:	add	ip, pc, #0, 12
   11464:	add	ip, ip, #94208	; 0x17000
   11468:	ldr	pc, [ip, #3132]!	; 0xc3c

0001146c <feof@plt>:
   1146c:	add	ip, pc, #0, 12
   11470:	add	ip, ip, #94208	; 0x17000
   11474:	ldr	pc, [ip, #3124]!	; 0xc34

00011478 <iswspace@plt>:
   11478:	add	ip, pc, #0, 12
   1147c:	add	ip, ip, #94208	; 0x17000
   11480:	ldr	pc, [ip, #3116]!	; 0xc2c

00011484 <strlen@plt>:
   11484:	add	ip, pc, #0, 12
   11488:	add	ip, ip, #94208	; 0x17000
   1148c:	ldr	pc, [ip, #3108]!	; 0xc24

00011490 <strchr@plt>:
   11490:	add	ip, pc, #0, 12
   11494:	add	ip, ip, #94208	; 0x17000
   11498:	ldr	pc, [ip, #3100]!	; 0xc1c

0001149c <getpagesize@plt>:
   1149c:	add	ip, pc, #0, 12
   114a0:	add	ip, ip, #94208	; 0x17000
   114a4:	ldr	pc, [ip, #3092]!	; 0xc14

000114a8 <__errno_location@plt>:
   114a8:	add	ip, pc, #0, 12
   114ac:	add	ip, ip, #94208	; 0x17000
   114b0:	ldr	pc, [ip, #3084]!	; 0xc0c

000114b4 <__cxa_atexit@plt>:
   114b4:	add	ip, pc, #0, 12
   114b8:	add	ip, ip, #94208	; 0x17000
   114bc:	ldr	pc, [ip, #3076]!	; 0xc04

000114c0 <setvbuf@plt>:
   114c0:	add	ip, pc, #0, 12
   114c4:	add	ip, ip, #94208	; 0x17000
   114c8:	ldr	pc, [ip, #3068]!	; 0xbfc

000114cc <memset@plt>:
   114cc:	add	ip, pc, #0, 12
   114d0:	add	ip, ip, #94208	; 0x17000
   114d4:	ldr	pc, [ip, #3060]!	; 0xbf4

000114d8 <btowc@plt>:
   114d8:	add	ip, pc, #0, 12
   114dc:	add	ip, ip, #94208	; 0x17000
   114e0:	ldr	pc, [ip, #3052]!	; 0xbec

000114e4 <fgetc@plt>:
   114e4:	add	ip, pc, #0, 12
   114e8:	add	ip, ip, #94208	; 0x17000
   114ec:	ldr	pc, [ip, #3044]!	; 0xbe4

000114f0 <__printf_chk@plt>:
   114f0:	add	ip, pc, #0, 12
   114f4:	add	ip, ip, #94208	; 0x17000
   114f8:	ldr	pc, [ip, #3036]!	; 0xbdc

000114fc <fileno@plt>:
   114fc:	add	ip, pc, #0, 12
   11500:	add	ip, ip, #94208	; 0x17000
   11504:	ldr	pc, [ip, #3028]!	; 0xbd4

00011508 <__fprintf_chk@plt>:
   11508:	add	ip, pc, #0, 12
   1150c:	add	ip, ip, #94208	; 0x17000
   11510:	ldr	pc, [ip, #3020]!	; 0xbcc

00011514 <fclose@plt>:
   11514:	add	ip, pc, #0, 12
   11518:	add	ip, ip, #94208	; 0x17000
   1151c:	ldr	pc, [ip, #3012]!	; 0xbc4

00011520 <fseeko64@plt>:
   11520:	add	ip, pc, #0, 12
   11524:	add	ip, ip, #94208	; 0x17000
   11528:	ldr	pc, [ip, #3004]!	; 0xbbc

0001152c <__overflow@plt>:
   1152c:	add	ip, pc, #0, 12
   11530:	add	ip, ip, #94208	; 0x17000
   11534:	ldr	pc, [ip, #2996]!	; 0xbb4

00011538 <setlocale@plt>:
   11538:	add	ip, pc, #0, 12
   1153c:	add	ip, ip, #94208	; 0x17000
   11540:	ldr	pc, [ip, #2988]!	; 0xbac

00011544 <strrchr@plt>:
   11544:	add	ip, pc, #0, 12
   11548:	add	ip, ip, #94208	; 0x17000
   1154c:	ldr	pc, [ip, #2980]!	; 0xba4

00011550 <nl_langinfo@plt>:
   11550:	add	ip, pc, #0, 12
   11554:	add	ip, ip, #94208	; 0x17000
   11558:	ldr	pc, [ip, #2972]!	; 0xb9c

0001155c <fopen64@plt>:
   1155c:	add	ip, pc, #0, 12
   11560:	add	ip, ip, #94208	; 0x17000
   11564:	ldr	pc, [ip, #2964]!	; 0xb94

00011568 <bindtextdomain@plt>:
   11568:	add	ip, pc, #0, 12
   1156c:	add	ip, ip, #94208	; 0x17000
   11570:	ldr	pc, [ip, #2956]!	; 0xb8c

00011574 <getdelim@plt>:
   11574:	add	ip, pc, #0, 12
   11578:	add	ip, ip, #94208	; 0x17000
   1157c:	ldr	pc, [ip, #2948]!	; 0xb84

00011580 <__xstat64@plt>:
   11580:	add	ip, pc, #0, 12
   11584:	add	ip, ip, #94208	; 0x17000
   11588:	ldr	pc, [ip, #2940]!	; 0xb7c

0001158c <strncmp@plt>:
   1158c:	add	ip, pc, #0, 12
   11590:	add	ip, ip, #94208	; 0x17000
   11594:	ldr	pc, [ip, #2932]!	; 0xb74

00011598 <abort@plt>:
   11598:	add	ip, pc, #0, 12
   1159c:	add	ip, ip, #94208	; 0x17000
   115a0:	ldr	pc, [ip, #2924]!	; 0xb6c

000115a4 <close@plt>:
   115a4:	add	ip, pc, #0, 12
   115a8:	add	ip, ip, #94208	; 0x17000
   115ac:	ldr	pc, [ip, #2916]!	; 0xb64

000115b0 <__assert_fail@plt>:
   115b0:	add	ip, pc, #0, 12
   115b4:	add	ip, ip, #94208	; 0x17000
   115b8:	ldr	pc, [ip, #2908]!	; 0xb5c

Disassembly of section .text:

000115c0 <_obstack_begin@@Base-0x5724>:
   115c0:	mov	fp, #0
   115c4:	mov	lr, #0
   115c8:	pop	{r1}		; (ldr r1, [sp], #4)
   115cc:	mov	r2, sp
   115d0:	push	{r2}		; (str r2, [sp, #-4]!)
   115d4:	push	{r0}		; (str r0, [sp, #-4]!)
   115d8:	ldr	ip, [pc, #16]	; 115f0 <__assert_fail@plt+0x40>
   115dc:	push	{ip}		; (str ip, [sp, #-4]!)
   115e0:	ldr	r0, [pc, #12]	; 115f4 <__assert_fail@plt+0x44>
   115e4:	ldr	r3, [pc, #12]	; 115f8 <__assert_fail@plt+0x48>
   115e8:	bl	11424 <__libc_start_main@plt>
   115ec:	bl	11598 <abort@plt>
   115f0:	andeq	r7, r1, r8, asr #14
   115f4:	andeq	r1, r1, r0, asr r9
   115f8:	andeq	r7, r1, r8, ror #13
   115fc:	ldr	r3, [pc, #20]	; 11618 <__assert_fail@plt+0x68>
   11600:	ldr	r2, [pc, #20]	; 1161c <__assert_fail@plt+0x6c>
   11604:	add	r3, pc, r3
   11608:	ldr	r2, [r3, r2]
   1160c:	cmp	r2, #0
   11610:	bxeq	lr
   11614:	b	1143c <__gmon_start__@plt>
   11618:	strdeq	r7, [r1], -r4
   1161c:	andeq	r0, r0, r8, lsl r1
   11620:	ldr	r0, [pc, #24]	; 11640 <__assert_fail@plt+0x90>
   11624:	ldr	r3, [pc, #24]	; 11644 <__assert_fail@plt+0x94>
   11628:	cmp	r3, r0
   1162c:	bxeq	lr
   11630:	ldr	r3, [pc, #16]	; 11648 <__assert_fail@plt+0x98>
   11634:	cmp	r3, #0
   11638:	bxeq	lr
   1163c:	bx	r3
   11640:	andeq	r9, r2, r4, ror r1
   11644:	andeq	r9, r2, r4, ror r1
   11648:	andeq	r0, r0, r0
   1164c:	ldr	r0, [pc, #36]	; 11678 <__assert_fail@plt+0xc8>
   11650:	ldr	r1, [pc, #36]	; 1167c <__assert_fail@plt+0xcc>
   11654:	sub	r1, r1, r0
   11658:	asr	r1, r1, #2
   1165c:	add	r1, r1, r1, lsr #31
   11660:	asrs	r1, r1, #1
   11664:	bxeq	lr
   11668:	ldr	r3, [pc, #16]	; 11680 <__assert_fail@plt+0xd0>
   1166c:	cmp	r3, #0
   11670:	bxeq	lr
   11674:	bx	r3
   11678:	andeq	r9, r2, r4, ror r1
   1167c:	andeq	r9, r2, r4, ror r1
   11680:	andeq	r0, r0, r0
   11684:	push	{r4, lr}
   11688:	ldr	r4, [pc, #24]	; 116a8 <__assert_fail@plt+0xf8>
   1168c:	ldrb	r3, [r4]
   11690:	cmp	r3, #0
   11694:	popne	{r4, pc}
   11698:	bl	11620 <__assert_fail@plt+0x70>
   1169c:	mov	r3, #1
   116a0:	strb	r3, [r4]
   116a4:	pop	{r4, pc}
   116a8:	muleq	r2, ip, r1
   116ac:	b	1164c <__assert_fail@plt+0x9c>
   116b0:	push	{fp, lr}
   116b4:	mov	fp, sp
   116b8:	sub	sp, sp, #56	; 0x38
   116bc:	mov	r4, r0
   116c0:	cmp	r0, #0
   116c4:	bne	11908 <__assert_fail@plt+0x358>
   116c8:	movw	r1, #30619	; 0x779b
   116cc:	mov	r0, #0
   116d0:	mov	r2, #5
   116d4:	movt	r1, #1
   116d8:	bl	1134c <dcgettext@plt>
   116dc:	mov	r1, r0
   116e0:	movw	r0, #37356	; 0x91ec
   116e4:	movt	r0, #2
   116e8:	ldr	r2, [r0]
   116ec:	mov	r0, #1
   116f0:	mov	r3, r2
   116f4:	bl	114f0 <__printf_chk@plt>
   116f8:	movw	r1, #30690	; 0x77e2
   116fc:	mov	r0, #0
   11700:	mov	r2, #5
   11704:	movt	r1, #1
   11708:	bl	1134c <dcgettext@plt>
   1170c:	movw	r7, #37268	; 0x9194
   11710:	movt	r7, #2
   11714:	ldr	r1, [r7]
   11718:	bl	112a4 <fputs_unlocked@plt>
   1171c:	movw	r1, #31999	; 0x7cff
   11720:	mov	r0, #0
   11724:	mov	r2, #5
   11728:	movt	r1, #1
   1172c:	bl	1134c <dcgettext@plt>
   11730:	ldr	r1, [r7]
   11734:	bl	112a4 <fputs_unlocked@plt>
   11738:	movw	r1, #30884	; 0x78a4
   1173c:	mov	r0, #0
   11740:	mov	r2, #5
   11744:	movt	r1, #1
   11748:	bl	1134c <dcgettext@plt>
   1174c:	ldr	r1, [r7]
   11750:	bl	112a4 <fputs_unlocked@plt>
   11754:	movw	r1, #31185	; 0x79d1
   11758:	mov	r0, #0
   1175c:	mov	r2, #5
   11760:	movt	r1, #1
   11764:	bl	1134c <dcgettext@plt>
   11768:	ldr	r1, [r7]
   1176c:	bl	112a4 <fputs_unlocked@plt>
   11770:	movw	r1, #31486	; 0x7afe
   11774:	mov	r0, #0
   11778:	mov	r2, #5
   1177c:	movt	r1, #1
   11780:	bl	1134c <dcgettext@plt>
   11784:	ldr	r1, [r7]
   11788:	bl	112a4 <fputs_unlocked@plt>
   1178c:	movw	r1, #31531	; 0x7b2b
   11790:	mov	r0, #0
   11794:	mov	r2, #5
   11798:	movt	r1, #1
   1179c:	bl	1134c <dcgettext@plt>
   117a0:	ldr	r1, [r7]
   117a4:	bl	112a4 <fputs_unlocked@plt>
   117a8:	movw	r0, #32600	; 0x7f58
   117ac:	mov	r2, #48	; 0x30
   117b0:	mov	r6, sp
   117b4:	movw	r5, #31585	; 0x7b61
   117b8:	movt	r0, #1
   117bc:	movt	r5, #1
   117c0:	add	r1, r0, #32
   117c4:	add	r3, r0, #16
   117c8:	vld1.64	{d18-d19}, [r0], r2
   117cc:	vld1.64	{d16-d17}, [r1]
   117d0:	vld1.64	{d20-d21}, [r3]
   117d4:	add	r1, r6, #32
   117d8:	vldr	d22, [r0]
   117dc:	add	r0, r6, #16
   117e0:	vst1.64	{d16-d17}, [r1]
   117e4:	movw	r1, #32055	; 0x7d37
   117e8:	vst1.64	{d20-d21}, [r0]
   117ec:	mov	r0, r6
   117f0:	vst1.64	{d18-d19}, [r0], r2
   117f4:	movt	r1, #1
   117f8:	vstr	d22, [r0]
   117fc:	mov	r0, r5
   11800:	bl	112bc <strcmp@plt>
   11804:	cmp	r0, #0
   11808:	ldrne	r1, [r6, #8]!
   1180c:	cmpne	r1, #0
   11810:	bne	117fc <__assert_fail@plt+0x24c>
   11814:	ldr	r6, [r6, #4]
   11818:	movw	r1, #32150	; 0x7d96
   1181c:	mov	r0, #0
   11820:	mov	r2, #5
   11824:	movt	r1, #1
   11828:	bl	1134c <dcgettext@plt>
   1182c:	movw	r2, #31634	; 0x7b92
   11830:	movw	r3, #32173	; 0x7dad
   11834:	mov	r1, r0
   11838:	mov	r0, #1
   1183c:	movt	r2, #1
   11840:	movt	r3, #1
   11844:	bl	114f0 <__printf_chk@plt>
   11848:	cmp	r6, #0
   1184c:	mov	r0, #5
   11850:	mov	r1, #0
   11854:	moveq	r6, r5
   11858:	bl	11538 <setlocale@plt>
   1185c:	cmp	r0, #0
   11860:	beq	11898 <__assert_fail@plt+0x2e8>
   11864:	movw	r1, #32213	; 0x7dd5
   11868:	mov	r2, #3
   1186c:	movt	r1, #1
   11870:	bl	1158c <strncmp@plt>
   11874:	cmp	r0, #0
   11878:	beq	11898 <__assert_fail@plt+0x2e8>
   1187c:	movw	r1, #32217	; 0x7dd9
   11880:	mov	r0, #0
   11884:	mov	r2, #5
   11888:	movt	r1, #1
   1188c:	bl	1134c <dcgettext@plt>
   11890:	ldr	r1, [r7]
   11894:	bl	112a4 <fputs_unlocked@plt>
   11898:	movw	r1, #32288	; 0x7e20
   1189c:	mov	r0, #0
   118a0:	mov	r2, #5
   118a4:	movt	r1, #1
   118a8:	bl	1134c <dcgettext@plt>
   118ac:	movw	r2, #32173	; 0x7dad
   118b0:	mov	r1, r0
   118b4:	mov	r0, #1
   118b8:	mov	r3, r5
   118bc:	movt	r2, #1
   118c0:	bl	114f0 <__printf_chk@plt>
   118c4:	movw	r1, #32315	; 0x7e3b
   118c8:	mov	r0, #0
   118cc:	mov	r2, #5
   118d0:	movt	r1, #1
   118d4:	bl	1134c <dcgettext@plt>
   118d8:	movw	r3, #32365	; 0x7e6d
   118dc:	mov	r1, r0
   118e0:	movw	r0, #32083	; 0x7d53
   118e4:	cmp	r6, r5
   118e8:	mov	r2, r6
   118ec:	movt	r0, #1
   118f0:	movt	r3, #1
   118f4:	moveq	r3, r0
   118f8:	mov	r0, #1
   118fc:	bl	114f0 <__printf_chk@plt>
   11900:	mov	r0, r4
   11904:	bl	11460 <exit@plt>
   11908:	movw	r0, #37256	; 0x9188
   1190c:	movw	r1, #30580	; 0x7774
   11910:	mov	r2, #5
   11914:	movt	r0, #2
   11918:	movt	r1, #1
   1191c:	ldr	r5, [r0]
   11920:	mov	r0, #0
   11924:	bl	1134c <dcgettext@plt>
   11928:	mov	r2, r0
   1192c:	movw	r0, #37356	; 0x91ec
   11930:	mov	r1, #1
   11934:	movt	r0, #2
   11938:	ldr	r3, [r0]
   1193c:	mov	r0, r5
   11940:	bl	11508 <__fprintf_chk@plt>
   11944:	mov	r0, r4
   11948:	bl	11460 <exit@plt>
   1194c:	nop	{0}
   11950:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11954:	add	fp, sp, #28
   11958:	sub	sp, sp, #4
   1195c:	vpush	{d8-d10}
   11960:	sub	sp, sp, #312	; 0x138
   11964:	mov	r6, r0
   11968:	ldr	r0, [r1]
   1196c:	mov	r5, r1
   11970:	bl	13d90 <__assert_fail@plt+0x27e0>
   11974:	movw	r1, #32365	; 0x7e6d
   11978:	mov	r0, #6
   1197c:	movt	r1, #1
   11980:	bl	11538 <setlocale@plt>
   11984:	movw	r4, #31638	; 0x7b96
   11988:	movw	r1, #31588	; 0x7b64
   1198c:	movt	r4, #1
   11990:	movt	r1, #1
   11994:	mov	r0, r4
   11998:	bl	11568 <bindtextdomain@plt>
   1199c:	mov	r0, r4
   119a0:	bl	11370 <textdomain@plt>
   119a4:	movw	r0, #14272	; 0x37c0
   119a8:	movt	r0, #1
   119ac:	bl	1774c <_obstack_memory_used@@Base+0x6f0>
   119b0:	bl	1149c <getpagesize@plt>
   119b4:	movw	r1, #37280	; 0x91a0
   119b8:	mov	r2, #1
   119bc:	mov	r3, #0
   119c0:	mov	r4, #0
   119c4:	movt	r1, #2
   119c8:	str	r0, [r1]
   119cc:	movw	r0, #37268	; 0x9194
   119d0:	mov	r1, #0
   119d4:	movt	r0, #2
   119d8:	ldr	r0, [r0]
   119dc:	bl	114c0 <setvbuf@plt>
   119e0:	movw	r0, #31612	; 0x7b7c
   119e4:	movt	r0, #1
   119e8:	bl	11400 <getenv@plt>
   119ec:	movw	r1, #37296	; 0x91b0
   119f0:	cmp	r0, #0
   119f4:	movw	r9, #37285	; 0x91a5
   119f8:	movw	r8, #37289	; 0x91a9
   119fc:	movw	sl, #31628	; 0x7b8c
   11a00:	movw	r7, #32440	; 0x7eb8
   11a04:	movt	r1, #2
   11a08:	movwne	r0, #1
   11a0c:	movt	r9, #2
   11a10:	movt	r8, #2
   11a14:	movt	sl, #1
   11a18:	movt	r7, #1
   11a1c:	str	r4, [r1]
   11a20:	str	r4, [r1, #4]
   11a24:	movw	r1, #37304	; 0x91b8
   11a28:	strb	r4, [r9]
   11a2c:	strb	r4, [r8]
   11a30:	movt	r1, #2
   11a34:	str	r4, [r1]
   11a38:	str	r4, [r1, #4]
   11a3c:	movw	r1, #37312	; 0x91c0
   11a40:	movt	r1, #2
   11a44:	str	r4, [r1]
   11a48:	str	r4, [r1, #4]
   11a4c:	movw	r1, #37320	; 0x91c8
   11a50:	movt	r1, #2
   11a54:	str	r4, [r1]
   11a58:	str	r4, [r1, #4]
   11a5c:	movw	r1, #37328	; 0x91d0
   11a60:	movt	r1, #2
   11a64:	str	r4, [r1]
   11a68:	str	r4, [r1, #4]
   11a6c:	movw	r1, #37286	; 0x91a6
   11a70:	movt	r1, #2
   11a74:	strb	r4, [r1]
   11a78:	movw	r1, #37287	; 0x91a7
   11a7c:	movt	r1, #2
   11a80:	strb	r4, [r1]
   11a84:	movw	r1, #37288	; 0x91a8
   11a88:	movt	r1, #2
   11a8c:	strb	r4, [r1]
   11a90:	movw	r1, #37284	; 0x91a4
   11a94:	movt	r1, #2
   11a98:	strb	r0, [r1]
   11a9c:	mov	r0, #0
   11aa0:	b	11ab0 <__assert_fail@plt+0x500>
   11aa4:	movw	r0, #37272	; 0x9198
   11aa8:	movt	r0, #2
   11aac:	ldr	r0, [r0]
   11ab0:	str	r0, [sp, #44]	; 0x2c
   11ab4:	b	11ac0 <__assert_fail@plt+0x510>
   11ab8:	mov	r1, #1
   11abc:	strb	r1, [r0]
   11ac0:	mov	r0, r6
   11ac4:	mov	r1, r5
   11ac8:	mov	r2, sl
   11acc:	mov	r3, r7
   11ad0:	str	r4, [sp]
   11ad4:	bl	11448 <getopt_long@plt>
   11ad8:	cmp	r0, #75	; 0x4b
   11adc:	ble	11bf0 <__assert_fail@plt+0x640>
   11ae0:	sub	r1, r0, #76	; 0x4c
   11ae4:	cmp	r1, #43	; 0x2b
   11ae8:	bhi	11bb0 <__assert_fail@plt+0x600>
   11aec:	add	r2, pc, #4
   11af0:	mov	r0, r9
   11af4:	ldr	pc, [r2, r1, lsl #2]
   11af8:	andeq	r1, r1, r8, lsr #23
   11afc:			; <UNDEFINED> instruction: 0x000124b0
   11b00:			; <UNDEFINED> instruction: 0x000124b0
   11b04:			; <UNDEFINED> instruction: 0x000124b0
   11b08:			; <UNDEFINED> instruction: 0x000124b0
   11b0c:			; <UNDEFINED> instruction: 0x000124b0
   11b10:			; <UNDEFINED> instruction: 0x000124b0
   11b14:			; <UNDEFINED> instruction: 0x000124b0
   11b18:			; <UNDEFINED> instruction: 0x000124b0
   11b1c:			; <UNDEFINED> instruction: 0x000124b0
   11b20:			; <UNDEFINED> instruction: 0x000124b0
   11b24:			; <UNDEFINED> instruction: 0x000124b0
   11b28:			; <UNDEFINED> instruction: 0x000124b0
   11b2c:			; <UNDEFINED> instruction: 0x000124b0
   11b30:			; <UNDEFINED> instruction: 0x000124b0
   11b34:			; <UNDEFINED> instruction: 0x000124b0
   11b38:			; <UNDEFINED> instruction: 0x000124b0
   11b3c:			; <UNDEFINED> instruction: 0x000124b0
   11b40:			; <UNDEFINED> instruction: 0x000124b0
   11b44:			; <UNDEFINED> instruction: 0x000124b0
   11b48:			; <UNDEFINED> instruction: 0x000124b0
   11b4c:			; <UNDEFINED> instruction: 0x000124b0
   11b50:			; <UNDEFINED> instruction: 0x000124b0
   11b54:			; <UNDEFINED> instruction: 0x00011ab8
   11b58:			; <UNDEFINED> instruction: 0x000124b0
   11b5c:			; <UNDEFINED> instruction: 0x000124b0
   11b60:			; <UNDEFINED> instruction: 0x000124b0
   11b64:			; <UNDEFINED> instruction: 0x000124b0
   11b68:			; <UNDEFINED> instruction: 0x000124b0
   11b6c:			; <UNDEFINED> instruction: 0x000124b0
   11b70:			; <UNDEFINED> instruction: 0x000124b0
   11b74:			; <UNDEFINED> instruction: 0x000124b0
   11b78:	andeq	r1, r1, r8, asr #23
   11b7c:			; <UNDEFINED> instruction: 0x00011bbc
   11b80:			; <UNDEFINED> instruction: 0x000124b0
   11b84:			; <UNDEFINED> instruction: 0x000124b0
   11b88:			; <UNDEFINED> instruction: 0x000124b0
   11b8c:			; <UNDEFINED> instruction: 0x000124b0
   11b90:			; <UNDEFINED> instruction: 0x000124b0
   11b94:			; <UNDEFINED> instruction: 0x000124b0
   11b98:			; <UNDEFINED> instruction: 0x000124b0
   11b9c:			; <UNDEFINED> instruction: 0x000124b0
   11ba0:			; <UNDEFINED> instruction: 0x000124b0
   11ba4:	ldrdeq	r1, [r1], -r4
   11ba8:	mov	r0, r8
   11bac:	b	11ab8 <__assert_fail@plt+0x508>
   11bb0:	cmp	r0, #256	; 0x100
   11bb4:	beq	11ac0 <__assert_fail@plt+0x510>
   11bb8:	b	11be0 <__assert_fail@plt+0x630>
   11bbc:	movw	r0, #37286	; 0x91a6
   11bc0:	movt	r0, #2
   11bc4:	b	11ab8 <__assert_fail@plt+0x508>
   11bc8:	movw	r0, #37288	; 0x91a8
   11bcc:	movt	r0, #2
   11bd0:	b	11ab8 <__assert_fail@plt+0x508>
   11bd4:	movw	r0, #37287	; 0x91a7
   11bd8:	movt	r0, #2
   11bdc:	b	11ab8 <__assert_fail@plt+0x508>
   11be0:	movw	r1, #257	; 0x101
   11be4:	cmp	r0, r1
   11be8:	beq	11aa4 <__assert_fail@plt+0x4f4>
   11bec:	b	124b0 <__assert_fail@plt+0xf00>
   11bf0:	cmn	r0, #1
   11bf4:	bne	12438 <__assert_fail@plt+0xe88>
   11bf8:	movw	r4, #37288	; 0x91a8
   11bfc:	movt	r4, #2
   11c00:	ldrb	r0, [r4]
   11c04:	cmp	r0, #0
   11c08:	bne	11c68 <__assert_fail@plt+0x6b8>
   11c0c:	movw	r0, #37287	; 0x91a7
   11c10:	movt	r0, #2
   11c14:	ldrb	r1, [r0]
   11c18:	cmp	r1, #0
   11c1c:	bne	11c68 <__assert_fail@plt+0x6b8>
   11c20:	movw	r1, #37286	; 0x91a6
   11c24:	movt	r1, #2
   11c28:	ldrb	r1, [r1]
   11c2c:	cmp	r1, #0
   11c30:	bne	11c68 <__assert_fail@plt+0x6b8>
   11c34:	movw	r1, #37285	; 0x91a5
   11c38:	movt	r1, #2
   11c3c:	ldrb	r2, [r1]
   11c40:	cmp	r2, #0
   11c44:	bne	11c68 <__assert_fail@plt+0x6b8>
   11c48:	movw	r2, #37289	; 0x91a9
   11c4c:	movt	r2, #2
   11c50:	ldrb	r2, [r2]
   11c54:	cmp	r2, #0
   11c58:	moveq	r2, #1
   11c5c:	strbeq	r2, [r0]
   11c60:	strbeq	r2, [r1]
   11c64:	strbeq	r2, [r4]
   11c68:	movw	r7, #37248	; 0x9180
   11c6c:	ldr	r1, [sp, #44]	; 0x2c
   11c70:	movt	r7, #2
   11c74:	ldr	r0, [r7]
   11c78:	cmp	r1, #0
   11c7c:	beq	11d00 <__assert_fail@plt+0x750>
   11c80:	cmp	r0, r6
   11c84:	blt	124d8 <__assert_fail@plt+0xf28>
   11c88:	ldr	r6, [sp, #44]	; 0x2c
   11c8c:	movw	r1, #32794	; 0x801a
   11c90:	movt	r1, #1
   11c94:	mov	r0, r6
   11c98:	bl	112bc <strcmp@plt>
   11c9c:	cmp	r0, #0
   11ca0:	beq	11d20 <__assert_fail@plt+0x770>
   11ca4:	movw	r1, #31815	; 0x7c47
   11ca8:	mov	r0, r6
   11cac:	movt	r1, #1
   11cb0:	bl	1155c <fopen64@plt>
   11cb4:	mov	r5, r0
   11cb8:	cmp	r0, #0
   11cbc:	bne	11d2c <__assert_fail@plt+0x77c>
   11cc0:	bl	114a8 <__errno_location@plt>
   11cc4:	ldr	r4, [r0]
   11cc8:	movw	r1, #31744	; 0x7c00
   11ccc:	mov	r0, #0
   11cd0:	mov	r2, #5
   11cd4:	movt	r1, #1
   11cd8:	bl	1134c <dcgettext@plt>
   11cdc:	mov	r5, r0
   11ce0:	mov	r0, #4
   11ce4:	mov	r1, r6
   11ce8:	bl	1549c <__assert_fail@plt+0x3eec>
   11cec:	mov	r3, r0
   11cf0:	mov	r0, #1
   11cf4:	mov	r1, r4
   11cf8:	mov	r2, r5
   11cfc:	bl	113e8 <error@plt>
   11d00:	movw	r7, #37336	; 0x91d8
   11d04:	subs	r9, r6, r0
   11d08:	movt	r7, #2
   11d0c:	movle	r9, #1
   11d10:	addgt	r7, r5, r0, lsl #2
   11d14:	mov	r0, r7
   11d18:	bl	13630 <__assert_fail@plt+0x2080>
   11d1c:	b	11dac <__assert_fail@plt+0x7fc>
   11d20:	movw	r0, #37264	; 0x9190
   11d24:	movt	r0, #2
   11d28:	ldr	r5, [r0]
   11d2c:	mov	r0, r5
   11d30:	bl	114fc <fileno@plt>
   11d34:	mov	r1, r0
   11d38:	add	r2, sp, #56	; 0x38
   11d3c:	mov	r0, #3
   11d40:	bl	113a0 <__fxstat64@plt>
   11d44:	cmp	r0, #0
   11d48:	bne	11d9c <__assert_fail@plt+0x7ec>
   11d4c:	ldr	r0, [sp, #72]	; 0x48
   11d50:	and	r0, r0, #61440	; 0xf000
   11d54:	cmp	r0, #32768	; 0x8000
   11d58:	bne	11d9c <__assert_fail@plt+0x7ec>
   11d5c:	ldr	r0, [sp, #104]	; 0x68
   11d60:	ldr	r1, [sp, #108]	; 0x6c
   11d64:	bl	17514 <_obstack_memory_used@@Base+0x4b8>
   11d68:	vldr	d9, [pc, #928]	; 12110 <__assert_fail@plt+0xb60>
   11d6c:	vmov	d8, r0, r1
   11d70:	bl	13c98 <__assert_fail@plt+0x26e8>
   11d74:	vmov.f64	d10, #96	; 0x3f000000  0.5
   11d78:	vmul.f64	d16, d0, d10
   11d7c:	vcmpe.f64	d16, d9
   11d80:	vmrs	APSR_nzcv, fpscr
   11d84:	bgt	11d90 <__assert_fail@plt+0x7e0>
   11d88:	bl	13c98 <__assert_fail@plt+0x26e8>
   11d8c:	vmul.f64	d9, d0, d10
   11d90:	vcmpe.f64	d9, d8
   11d94:	vmrs	APSR_nzcv, fpscr
   11d98:	bge	123e8 <__assert_fail@plt+0xe38>
   11d9c:	mov	r0, r5
   11da0:	bl	13664 <__assert_fail@plt+0x20b4>
   11da4:	mov	r7, #0
   11da8:	mov	r9, #0
   11dac:	mov	r1, #0
   11db0:	cmp	r0, #0
   11db4:	beq	124ac <__assert_fail@plt+0xefc>
   11db8:	str	r0, [sp, #48]	; 0x30
   11dbc:	cmp	r9, #0
   11dc0:	mov	r0, r9
   11dc4:	str	r1, [sp, #40]	; 0x28
   11dc8:	mov	r1, #112	; 0x70
   11dcc:	movweq	r0, #1
   11dd0:	bl	16618 <__assert_fail@plt+0x5068>
   11dd4:	cmp	r9, #0
   11dd8:	str	r0, [sp, #52]	; 0x34
   11ddc:	beq	11e34 <__assert_fail@plt+0x884>
   11de0:	cmp	r9, #1
   11de4:	bne	11e44 <__assert_fail@plt+0x894>
   11de8:	movw	r1, #37287	; 0x91a7
   11dec:	ldrb	r0, [r4]
   11df0:	movt	r1, #2
   11df4:	ldrb	r1, [r1]
   11df8:	add	r0, r1, r0
   11dfc:	movw	r1, #37286	; 0x91a6
   11e00:	movt	r1, #2
   11e04:	ldrb	r1, [r1]
   11e08:	add	r0, r0, r1
   11e0c:	movw	r1, #37285	; 0x91a5
   11e10:	movt	r1, #2
   11e14:	ldrb	r1, [r1]
   11e18:	add	r0, r0, r1
   11e1c:	movw	r1, #37289	; 0x91a9
   11e20:	movt	r1, #2
   11e24:	ldrb	r1, [r1]
   11e28:	add	r0, r0, r1
   11e2c:	cmp	r0, #1
   11e30:	bne	11e44 <__assert_fail@plt+0x894>
   11e34:	ldr	r1, [sp, #52]	; 0x34
   11e38:	mov	r0, #1
   11e3c:	str	r0, [r1]
   11e40:	b	11eb0 <__assert_fail@plt+0x900>
   11e44:	ldr	r0, [sp, #52]	; 0x34
   11e48:	movw	r8, #32794	; 0x801a
   11e4c:	mov	r5, r9
   11e50:	movt	r8, #1
   11e54:	add	r6, r0, #8
   11e58:	ldr	r4, [r7]
   11e5c:	cmp	r4, #0
   11e60:	beq	11e8c <__assert_fail@plt+0x8dc>
   11e64:	mov	r0, r4
   11e68:	mov	r1, r8
   11e6c:	bl	112bc <strcmp@plt>
   11e70:	cmp	r0, #0
   11e74:	beq	11e8c <__assert_fail@plt+0x8dc>
   11e78:	mov	r0, #3
   11e7c:	mov	r1, r4
   11e80:	mov	r2, r6
   11e84:	bl	11580 <__xstat64@plt>
   11e88:	b	11e9c <__assert_fail@plt+0x8ec>
   11e8c:	mov	r0, #3
   11e90:	mov	r1, #0
   11e94:	mov	r2, r6
   11e98:	bl	113a0 <__fxstat64@plt>
   11e9c:	str	r0, [r6, #-8]
   11ea0:	add	r7, r7, #4
   11ea4:	subs	r5, r5, #1
   11ea8:	add	r6, r6, #112	; 0x70
   11eac:	bne	11e58 <__assert_fail@plt+0x8a8>
   11eb0:	mov	r4, #1
   11eb4:	cmp	r9, #0
   11eb8:	mov	r5, #1
   11ebc:	beq	11f88 <__assert_fail@plt+0x9d8>
   11ec0:	ldr	r0, [sp, #52]	; 0x34
   11ec4:	mov	r5, #1
   11ec8:	ldr	r2, [r0]
   11ecc:	cmp	r2, #0
   11ed0:	bgt	11f88 <__assert_fail@plt+0x9d8>
   11ed4:	ldr	r1, [sp, #52]	; 0x34
   11ed8:	sub	r0, r9, #1
   11edc:	mov	r7, #0
   11ee0:	mov	r8, #1
   11ee4:	mov	r6, #0
   11ee8:	add	r1, r1, #112	; 0x70
   11eec:	cmp	r2, #0
   11ef0:	bne	11f38 <__assert_fail@plt+0x988>
   11ef4:	ldr	r2, [r1, #-88]	; 0xffffffa8
   11ef8:	and	r2, r2, #61440	; 0xf000
   11efc:	cmp	r2, #32768	; 0x8000
   11f00:	bne	11f1c <__assert_fail@plt+0x96c>
   11f04:	ldrd	r2, [r1, #-56]	; 0xffffffc8
   11f08:	adds	r7, r2, r7
   11f0c:	adc	r6, r3, r6
   11f10:	cmp	r0, #0
   11f14:	bne	11f28 <__assert_fail@plt+0x978>
   11f18:	b	11f40 <__assert_fail@plt+0x990>
   11f1c:	mov	r8, #7
   11f20:	cmp	r0, #0
   11f24:	beq	11f40 <__assert_fail@plt+0x990>
   11f28:	ldr	r2, [r1], #112	; 0x70
   11f2c:	sub	r0, r0, #1
   11f30:	cmp	r2, #0
   11f34:	beq	11ef4 <__assert_fail@plt+0x944>
   11f38:	cmp	r0, #0
   11f3c:	bne	11f28 <__assert_fail@plt+0x978>
   11f40:	subs	r0, r7, #10
   11f44:	mov	r5, #1
   11f48:	sbcs	r0, r6, #0
   11f4c:	bcc	11f80 <__assert_fail@plt+0x9d0>
   11f50:	mov	r5, #1
   11f54:	mov	r0, r7
   11f58:	mov	r1, r6
   11f5c:	mov	r2, #10
   11f60:	mov	r3, #0
   11f64:	bl	17574 <_obstack_memory_used@@Base+0x518>
   11f68:	rsbs	r2, r7, #99	; 0x63
   11f6c:	add	r5, r5, #1
   11f70:	mov	r7, r0
   11f74:	rscs	r2, r6, #0
   11f78:	mov	r6, r1
   11f7c:	bcc	11f54 <__assert_fail@plt+0x9a4>
   11f80:	cmp	r5, r8
   11f84:	movlt	r5, r8
   11f88:	movw	r0, #37340	; 0x91dc
   11f8c:	add	r1, sp, #56	; 0x38
   11f90:	movt	r0, #2
   11f94:	str	r5, [r0]
   11f98:	ldr	r5, [sp, #48]	; 0x30
   11f9c:	mov	r0, r5
   11fa0:	bl	13698 <__assert_fail@plt+0x20e8>
   11fa4:	ldr	r6, [sp, #44]	; 0x2c
   11fa8:	cmp	r0, #0
   11fac:	beq	12228 <__assert_fail@plt+0xc78>
   11fb0:	mov	sl, r0
   11fb4:	mov	r8, #1
   11fb8:	mov	r7, #0
   11fbc:	cmp	r6, #0
   11fc0:	mov	r0, #0
   11fc4:	beq	12040 <__assert_fail@plt+0xa90>
   11fc8:	movw	r1, #32794	; 0x801a
   11fcc:	mov	r0, r6
   11fd0:	movt	r1, #1
   11fd4:	bl	112bc <strcmp@plt>
   11fd8:	cmp	r0, #0
   11fdc:	mov	r0, #0
   11fe0:	bne	12040 <__assert_fail@plt+0xa90>
   11fe4:	movw	r1, #32794	; 0x801a
   11fe8:	mov	r0, sl
   11fec:	movt	r1, #1
   11ff0:	bl	112bc <strcmp@plt>
   11ff4:	cmp	r0, #0
   11ff8:	mov	r0, #0
   11ffc:	bne	12040 <__assert_fail@plt+0xa90>
   12000:	movw	r1, #31889	; 0x7c91
   12004:	mov	r0, #0
   12008:	mov	r2, #5
   1200c:	movt	r1, #1
   12010:	bl	1134c <dcgettext@plt>
   12014:	mov	r5, r0
   12018:	mov	r0, #4
   1201c:	mov	r1, sl
   12020:	bl	1549c <__assert_fail@plt+0x3eec>
   12024:	mov	r2, r5
   12028:	ldr	r5, [sp, #48]	; 0x30
   1202c:	mov	r3, r0
   12030:	mov	r0, #0
   12034:	mov	r1, #0
   12038:	bl	113e8 <error@plt>
   1203c:	mov	r0, #1
   12040:	ldrb	r1, [sl]
   12044:	cmp	r1, #0
   12048:	beq	12118 <__assert_fail@plt+0xb68>
   1204c:	mov	r4, #0
   12050:	cmp	r0, #0
   12054:	bne	121f0 <__assert_fail@plt+0xc40>
   12058:	ldr	r1, [sp, #52]	; 0x34
   1205c:	cmp	r9, #0
   12060:	mov	r0, r9
   12064:	movne	r0, r7
   12068:	rsb	r0, r0, r0, lsl #3
   1206c:	add	r5, r1, r0, lsl #4
   12070:	movw	r1, #32794	; 0x801a
   12074:	mov	r0, sl
   12078:	movt	r1, #1
   1207c:	bl	112bc <strcmp@plt>
   12080:	cmp	r0, #0
   12084:	beq	121b8 <__assert_fail@plt+0xc08>
   12088:	mov	r0, sl
   1208c:	mov	r1, #0
   12090:	bl	113f4 <open64@plt>
   12094:	cmn	r0, #1
   12098:	beq	120d0 <__assert_fail@plt+0xb20>
   1209c:	mov	r6, r0
   120a0:	mov	r0, #0
   120a4:	mov	r1, sl
   120a8:	mov	r2, r5
   120ac:	str	r0, [sp]
   120b0:	str	r0, [sp, #4]
   120b4:	mov	r0, r6
   120b8:	bl	127c0 <__assert_fail@plt+0x1210>
   120bc:	mov	r5, r0
   120c0:	mov	r0, r6
   120c4:	bl	115a4 <close@plt>
   120c8:	cmp	r0, #0
   120cc:	beq	12104 <__assert_fail@plt+0xb54>
   120d0:	bl	114a8 <__errno_location@plt>
   120d4:	ldr	r6, [r0]
   120d8:	mov	r0, #0
   120dc:	mov	r1, #3
   120e0:	mov	r2, sl
   120e4:	mov	r5, #0
   120e8:	bl	15718 <__assert_fail@plt+0x4168>
   120ec:	movw	r2, #32692	; 0x7fb4
   120f0:	mov	r3, r0
   120f4:	mov	r0, #0
   120f8:	mov	r1, r6
   120fc:	movt	r2, #1
   12100:	bl	113e8 <error@plt>
   12104:	ldr	r6, [sp, #44]	; 0x2c
   12108:	b	121e8 <__assert_fail@plt+0xc38>
   1210c:	nop	{0}
   12110:	andeq	r0, r0, r0
   12114:	cmnmi	r4, r0
   12118:	cmp	r6, #0
   1211c:	beq	12184 <__assert_fail@plt+0xbd4>
   12120:	mov	r0, r5
   12124:	bl	13750 <__assert_fail@plt+0x21a0>
   12128:	mov	r5, r0
   1212c:	mov	r0, #0
   12130:	mov	r1, #3
   12134:	mov	r2, r6
   12138:	mov	r4, #0
   1213c:	bl	15718 <__assert_fail@plt+0x4168>
   12140:	movw	r1, #31952	; 0x7cd0
   12144:	mov	r6, r0
   12148:	mov	r0, #0
   1214c:	mov	r2, #5
   12150:	movt	r1, #1
   12154:	bl	1134c <dcgettext@plt>
   12158:	str	r5, [sp]
   1215c:	mov	r3, r6
   12160:	ldr	r5, [sp, #48]	; 0x30
   12164:	ldr	r6, [sp, #44]	; 0x2c
   12168:	movw	r2, #31982	; 0x7cee
   1216c:	str	r0, [sp, #4]
   12170:	mov	r0, #0
   12174:	mov	r1, #0
   12178:	movt	r2, #1
   1217c:	bl	113e8 <error@plt>
   12180:	b	121f0 <__assert_fail@plt+0xc40>
   12184:	movw	r1, #31952	; 0x7cd0
   12188:	mov	r0, #0
   1218c:	mov	r2, #5
   12190:	mov	r4, #0
   12194:	movt	r1, #1
   12198:	bl	1134c <dcgettext@plt>
   1219c:	movw	r2, #32692	; 0x7fb4
   121a0:	mov	r3, r0
   121a4:	mov	r0, #0
   121a8:	mov	r1, #0
   121ac:	movt	r2, #1
   121b0:	bl	113e8 <error@plt>
   121b4:	b	121f0 <__assert_fail@plt+0xc40>
   121b8:	movw	r1, #37344	; 0x91e0
   121bc:	mov	r0, #1
   121c0:	mov	r2, r5
   121c4:	movt	r1, #2
   121c8:	strb	r0, [r1]
   121cc:	mvn	r0, #0
   121d0:	mov	r1, sl
   121d4:	str	r0, [sp]
   121d8:	str	r0, [sp, #4]
   121dc:	mov	r0, #0
   121e0:	bl	127c0 <__assert_fail@plt+0x1210>
   121e4:	mov	r5, r0
   121e8:	and	r4, r8, r5
   121ec:	ldr	r5, [sp, #48]	; 0x30
   121f0:	cmp	r9, #0
   121f4:	ldreq	r0, [sp, #52]	; 0x34
   121f8:	moveq	r1, #1
   121fc:	streq	r1, [r0]
   12200:	mov	r0, r5
   12204:	add	r1, sp, #56	; 0x38
   12208:	bl	13698 <__assert_fail@plt+0x20e8>
   1220c:	cmp	r4, #0
   12210:	mov	sl, r0
   12214:	add	r7, r7, #1
   12218:	movwne	r4, #1
   1221c:	cmp	r0, #0
   12220:	mov	r8, r4
   12224:	bne	11fbc <__assert_fail@plt+0xa0c>
   12228:	ldr	r0, [sp, #56]	; 0x38
   1222c:	cmp	r0, #2
   12230:	beq	12298 <__assert_fail@plt+0xce8>
   12234:	cmp	r0, #4
   12238:	bne	124a4 <__assert_fail@plt+0xef4>
   1223c:	bl	114a8 <__errno_location@plt>
   12240:	ldr	r6, [r0]
   12244:	movw	r1, #31802	; 0x7c3a
   12248:	mov	r0, #0
   1224c:	mov	r2, #5
   12250:	mov	r4, #0
   12254:	movt	r1, #1
   12258:	bl	1134c <dcgettext@plt>
   1225c:	ldr	r2, [sp, #44]	; 0x2c
   12260:	mov	r5, r0
   12264:	mov	r0, #0
   12268:	mov	r1, #3
   1226c:	bl	15718 <__assert_fail@plt+0x4168>
   12270:	mov	r3, r0
   12274:	mov	r0, #0
   12278:	mov	r1, r6
   1227c:	mov	r2, r5
   12280:	bl	113e8 <error@plt>
   12284:	ldr	r5, [sp, #48]	; 0x30
   12288:	ldr	r6, [sp, #40]	; 0x28
   1228c:	cmp	r6, #0
   12290:	bne	122f4 <__assert_fail@plt+0xd44>
   12294:	b	122fc <__assert_fail@plt+0xd4c>
   12298:	cmp	r6, #0
   1229c:	bne	12288 <__assert_fail@plt+0xcd8>
   122a0:	ldr	r6, [sp, #40]	; 0x28
   122a4:	eors	r0, r4, #1
   122a8:	bne	122ec <__assert_fail@plt+0xd3c>
   122ac:	mov	r0, r5
   122b0:	bl	13750 <__assert_fail@plt+0x21a0>
   122b4:	cmp	r0, #0
   122b8:	bne	122ec <__assert_fail@plt+0xd3c>
   122bc:	movw	r0, #37344	; 0x91e0
   122c0:	ldr	r2, [sp, #52]	; 0x34
   122c4:	mov	r1, #1
   122c8:	movt	r0, #2
   122cc:	strb	r1, [r0]
   122d0:	mvn	r0, #0
   122d4:	mov	r1, #0
   122d8:	str	r0, [sp]
   122dc:	str	r0, [sp, #4]
   122e0:	mov	r0, #0
   122e4:	bl	127c0 <__assert_fail@plt+0x1210>
   122e8:	and	r4, r4, r0
   122ec:	cmp	r6, #0
   122f0:	beq	122fc <__assert_fail@plt+0xd4c>
   122f4:	add	r0, sp, #164	; 0xa4
   122f8:	bl	15b7c <__assert_fail@plt+0x45cc>
   122fc:	mov	r0, r5
   12300:	bl	13750 <__assert_fail@plt+0x21a0>
   12304:	cmp	r0, #2
   12308:	bcc	123a0 <__assert_fail@plt+0xdf0>
   1230c:	movw	r0, #37320	; 0x91c8
   12310:	mov	r2, #5
   12314:	movt	r0, #2
   12318:	ldr	r1, [r0]
   1231c:	ldr	r0, [r0, #4]
   12320:	str	r0, [sp, #44]	; 0x2c
   12324:	movw	r0, #37328	; 0x91d0
   12328:	str	r1, [sp, #40]	; 0x28
   1232c:	movt	r0, #2
   12330:	ldr	r1, [r0]
   12334:	ldr	r0, [r0, #4]
   12338:	str	r0, [sp, #36]	; 0x24
   1233c:	movw	r0, #37312	; 0x91c0
   12340:	str	r1, [sp, #32]
   12344:	movw	r1, #31993	; 0x7cf9
   12348:	movt	r0, #2
   1234c:	movt	r1, #1
   12350:	ldm	r0, {r5, r7}
   12354:	movw	r0, #37304	; 0x91b8
   12358:	movt	r0, #2
   1235c:	ldm	r0, {r6, r9}
   12360:	movw	r0, #37296	; 0x91b0
   12364:	movt	r0, #2
   12368:	ldm	r0, {r8, sl}
   1236c:	mov	r0, #0
   12370:	bl	1134c <dcgettext@plt>
   12374:	str	r5, [sp]
   12378:	str	r7, [sp, #4]
   1237c:	str	r6, [sp, #8]
   12380:	str	r9, [sp, #12]
   12384:	str	r8, [sp, #16]
   12388:	str	sl, [sp, #20]
   1238c:	str	r0, [sp, #24]
   12390:	add	r3, sp, #32
   12394:	ldr	r5, [sp, #48]	; 0x30
   12398:	ldm	r3, {r0, r1, r2, r3}
   1239c:	bl	125a4 <__assert_fail@plt+0xff4>
   123a0:	mov	r0, r5
   123a4:	bl	13774 <__assert_fail@plt+0x21c4>
   123a8:	ldr	r0, [sp, #52]	; 0x34
   123ac:	bl	139e0 <__assert_fail@plt+0x2430>
   123b0:	movw	r0, #37344	; 0x91e0
   123b4:	movt	r0, #2
   123b8:	ldrb	r0, [r0]
   123bc:	cmp	r0, #1
   123c0:	bne	123d4 <__assert_fail@plt+0xe24>
   123c4:	mov	r0, #0
   123c8:	bl	115a4 <close@plt>
   123cc:	cmp	r0, #0
   123d0:	bne	12554 <__assert_fail@plt+0xfa4>
   123d4:	eor	r0, r4, #1
   123d8:	sub	sp, fp, #56	; 0x38
   123dc:	vpop	{d8-d10}
   123e0:	add	sp, sp, #4
   123e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   123e8:	add	r6, sp, #164	; 0xa4
   123ec:	mov	r0, r6
   123f0:	bl	15afc <__assert_fail@plt+0x454c>
   123f4:	mov	r0, r5
   123f8:	mov	r1, r6
   123fc:	bl	15bb0 <__assert_fail@plt+0x4600>
   12400:	cmp	r0, #0
   12404:	beq	1256c <__assert_fail@plt+0xfbc>
   12408:	mov	r0, r5
   1240c:	bl	138e8 <__assert_fail@plt+0x2338>
   12410:	cmp	r0, #0
   12414:	bne	1256c <__assert_fail@plt+0xfbc>
   12418:	ldr	r7, [sp, #168]	; 0xa8
   1241c:	ldr	r9, [sp, #164]	; 0xa4
   12420:	mov	r0, r7
   12424:	bl	13630 <__assert_fail@plt+0x2080>
   12428:	mov	r1, #1
   1242c:	cmp	r0, #0
   12430:	bne	11db8 <__assert_fail@plt+0x808>
   12434:	b	124ac <__assert_fail@plt+0xefc>
   12438:	cmn	r0, #3
   1243c:	bne	12494 <__assert_fail@plt+0xee4>
   12440:	movw	r0, #37160	; 0x9128
   12444:	movw	r2, #31659	; 0x7bab
   12448:	mov	r1, #0
   1244c:	movw	r7, #31648	; 0x7ba0
   12450:	movt	r0, #2
   12454:	movt	r2, #1
   12458:	str	r1, [sp, #8]
   1245c:	movw	r1, #31585	; 0x7b61
   12460:	movt	r7, #1
   12464:	ldr	r3, [r0]
   12468:	movw	r0, #37268	; 0x9194
   1246c:	str	r2, [sp, #4]
   12470:	movw	r2, #31634	; 0x7b92
   12474:	movt	r1, #1
   12478:	str	r7, [sp]
   1247c:	movt	r0, #2
   12480:	movt	r2, #1
   12484:	ldr	r0, [r0]
   12488:	bl	16314 <__assert_fail@plt+0x4d64>
   1248c:	mov	r0, #0
   12490:	bl	11460 <exit@plt>
   12494:	cmn	r0, #2
   12498:	bne	124b0 <__assert_fail@plt+0xf00>
   1249c:	mov	r0, #0
   124a0:	bl	116b0 <__assert_fail@plt+0x100>
   124a4:	cmp	r0, #3
   124a8:	bne	124b8 <__assert_fail@plt+0xf08>
   124ac:	bl	16aa8 <__assert_fail@plt+0x54f8>
   124b0:	mov	r0, #1
   124b4:	bl	116b0 <__assert_fail@plt+0x100>
   124b8:	movw	r0, #31817	; 0x7c49
   124bc:	movw	r1, #31857	; 0x7c71
   124c0:	movw	r3, #31866	; 0x7c7a
   124c4:	movw	r2, #938	; 0x3aa
   124c8:	movt	r0, #1
   124cc:	movt	r1, #1
   124d0:	movt	r3, #1
   124d4:	bl	115b0 <__assert_fail@plt>
   124d8:	movw	r1, #31675	; 0x7bbb
   124dc:	mov	r0, #0
   124e0:	mov	r2, #5
   124e4:	movt	r1, #1
   124e8:	bl	1134c <dcgettext@plt>
   124ec:	mov	r4, r0
   124f0:	ldr	r0, [r7]
   124f4:	ldr	r1, [r5, r0, lsl #2]
   124f8:	mov	r0, #4
   124fc:	bl	1549c <__assert_fail@plt+0x3eec>
   12500:	mov	r3, r0
   12504:	mov	r0, #0
   12508:	mov	r1, #0
   1250c:	mov	r2, r4
   12510:	bl	113e8 <error@plt>
   12514:	movw	r0, #37256	; 0x9188
   12518:	movw	r1, #31692	; 0x7bcc
   1251c:	mov	r2, #5
   12520:	movt	r0, #2
   12524:	movt	r1, #1
   12528:	ldr	r4, [r0]
   1252c:	mov	r0, #0
   12530:	bl	1134c <dcgettext@plt>
   12534:	movw	r2, #32984	; 0x80d8
   12538:	mov	r3, r0
   1253c:	mov	r0, r4
   12540:	mov	r1, #1
   12544:	movt	r2, #1
   12548:	bl	11508 <__fprintf_chk@plt>
   1254c:	mov	r0, #1
   12550:	bl	116b0 <__assert_fail@plt+0x100>
   12554:	bl	114a8 <__errno_location@plt>
   12558:	ldr	r1, [r0]
   1255c:	movw	r2, #32794	; 0x801a
   12560:	mov	r0, #1
   12564:	movt	r2, #1
   12568:	bl	113e8 <error@plt>
   1256c:	movw	r1, #31771	; 0x7c1b
   12570:	mov	r0, #0
   12574:	mov	r2, #5
   12578:	movt	r1, #1
   1257c:	bl	1134c <dcgettext@plt>
   12580:	ldr	r1, [sp, #44]	; 0x2c
   12584:	mov	r4, r0
   12588:	mov	r0, #4
   1258c:	bl	1549c <__assert_fail@plt+0x3eec>
   12590:	mov	r3, r0
   12594:	mov	r0, #1
   12598:	mov	r1, #0
   1259c:	mov	r2, r4
   125a0:	bl	113e8 <error@plt>
   125a4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   125a8:	add	fp, sp, #24
   125ac:	sub	sp, sp, #24
   125b0:	mov	r7, r2
   125b4:	movw	r2, #37288	; 0x91a8
   125b8:	movw	r8, #32656	; 0x7f90
   125bc:	mov	r6, r3
   125c0:	movt	r2, #2
   125c4:	movt	r8, #1
   125c8:	ldrb	r2, [r2]
   125cc:	cmp	r2, #1
   125d0:	bne	12608 <__assert_fail@plt+0x1058>
   125d4:	movw	r2, #37340	; 0x91dc
   125d8:	movt	r2, #2
   125dc:	ldr	r4, [r2]
   125e0:	add	r2, sp, #3
   125e4:	bl	13aac <__assert_fail@plt+0x24fc>
   125e8:	movw	r5, #32656	; 0x7f90
   125ec:	mov	r3, r0
   125f0:	mov	r0, #1
   125f4:	mov	r2, r4
   125f8:	movt	r5, #1
   125fc:	add	r1, r5, #1
   12600:	bl	114f0 <__printf_chk@plt>
   12604:	b	1260c <__assert_fail@plt+0x105c>
   12608:	add	r5, r8, #1
   1260c:	movw	r0, #37287	; 0x91a7
   12610:	movt	r0, #2
   12614:	ldrb	r0, [r0]
   12618:	cmp	r0, #1
   1261c:	bne	12658 <__assert_fail@plt+0x10a8>
   12620:	movw	r0, #37340	; 0x91dc
   12624:	add	r2, sp, #3
   12628:	mov	r1, r6
   1262c:	movt	r0, #2
   12630:	ldr	r4, [r0]
   12634:	mov	r0, r7
   12638:	bl	13aac <__assert_fail@plt+0x24fc>
   1263c:	mov	r3, r0
   12640:	mov	r0, #1
   12644:	mov	r1, r5
   12648:	mov	r2, r4
   1264c:	bl	114f0 <__printf_chk@plt>
   12650:	movw	r5, #32656	; 0x7f90
   12654:	movt	r5, #1
   12658:	movw	r0, #37286	; 0x91a6
   1265c:	movt	r0, #2
   12660:	ldrb	r0, [r0]
   12664:	cmp	r0, #1
   12668:	bne	126a4 <__assert_fail@plt+0x10f4>
   1266c:	movw	r2, #37340	; 0x91dc
   12670:	ldr	r1, [fp, #12]
   12674:	ldr	r0, [fp, #8]
   12678:	movt	r2, #2
   1267c:	ldr	r4, [r2]
   12680:	add	r2, sp, #3
   12684:	bl	13aac <__assert_fail@plt+0x24fc>
   12688:	mov	r3, r0
   1268c:	mov	r0, #1
   12690:	mov	r1, r5
   12694:	mov	r2, r4
   12698:	bl	114f0 <__printf_chk@plt>
   1269c:	movw	r5, #32656	; 0x7f90
   126a0:	movt	r5, #1
   126a4:	movw	r0, #37285	; 0x91a5
   126a8:	movt	r0, #2
   126ac:	ldrb	r0, [r0]
   126b0:	cmp	r0, #1
   126b4:	bne	126ec <__assert_fail@plt+0x113c>
   126b8:	movw	r2, #37340	; 0x91dc
   126bc:	ldr	r1, [fp, #20]
   126c0:	ldr	r0, [fp, #16]
   126c4:	movt	r2, #2
   126c8:	ldr	r4, [r2]
   126cc:	add	r2, sp, #3
   126d0:	bl	13aac <__assert_fail@plt+0x24fc>
   126d4:	mov	r3, r0
   126d8:	mov	r0, #1
   126dc:	mov	r1, r5
   126e0:	mov	r2, r4
   126e4:	bl	114f0 <__printf_chk@plt>
   126e8:	b	126f0 <__assert_fail@plt+0x1140>
   126ec:	mov	r8, r5
   126f0:	movw	r0, #37289	; 0x91a9
   126f4:	ldr	r5, [fp, #32]
   126f8:	movt	r0, #2
   126fc:	ldrb	r0, [r0]
   12700:	cmp	r0, #1
   12704:	bne	12738 <__assert_fail@plt+0x1188>
   12708:	movw	r2, #37340	; 0x91dc
   1270c:	ldr	r1, [fp, #28]
   12710:	ldr	r0, [fp, #24]
   12714:	movt	r2, #2
   12718:	ldr	r4, [r2]
   1271c:	add	r2, sp, #3
   12720:	bl	13aac <__assert_fail@plt+0x24fc>
   12724:	mov	r3, r0
   12728:	mov	r0, #1
   1272c:	mov	r1, r8
   12730:	mov	r2, r4
   12734:	bl	114f0 <__printf_chk@plt>
   12738:	cmp	r5, #0
   1273c:	beq	1277c <__assert_fail@plt+0x11cc>
   12740:	mov	r0, r5
   12744:	mov	r1, #10
   12748:	bl	11490 <strchr@plt>
   1274c:	cmp	r0, #0
   12750:	beq	12768 <__assert_fail@plt+0x11b8>
   12754:	mov	r0, #0
   12758:	mov	r1, #3
   1275c:	mov	r2, r5
   12760:	bl	15718 <__assert_fail@plt+0x4168>
   12764:	mov	r5, r0
   12768:	movw	r1, #32691	; 0x7fb3
   1276c:	mov	r0, #1
   12770:	mov	r2, r5
   12774:	movt	r1, #1
   12778:	bl	114f0 <__printf_chk@plt>
   1277c:	movw	r0, #37268	; 0x9194
   12780:	movt	r0, #2
   12784:	ldr	r0, [r0]
   12788:	ldr	r1, [r0, #20]
   1278c:	ldr	r2, [r0, #24]
   12790:	cmp	r1, r2
   12794:	addcc	r2, r1, #1
   12798:	strcc	r2, [r0, #20]
   1279c:	movcc	r0, #10
   127a0:	strbcc	r0, [r1]
   127a4:	subcc	sp, fp, #24
   127a8:	popcc	{r4, r5, r6, r7, r8, sl, fp, pc}
   127ac:	mov	r1, #10
   127b0:	bl	1152c <__overflow@plt>
   127b4:	sub	sp, fp, #24
   127b8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   127bc:	nop	{0}
   127c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   127c4:	add	fp, sp, #28
   127c8:	sub	sp, sp, #4
   127cc:	vpush	{d8-d10}
   127d0:	sub	sp, sp, #112	; 0x70
   127d4:	sub	sp, sp, #16384	; 0x4000
   127d8:	mov	r8, r2
   127dc:	mov	r4, r1
   127e0:	cmp	r1, #0
   127e4:	mov	r9, r1
   127e8:	str	r0, [sp, #44]	; 0x2c
   127ec:	bne	12808 <__assert_fail@plt+0x1258>
   127f0:	movw	r1, #32425	; 0x7ea9
   127f4:	mov	r0, #0
   127f8:	mov	r2, #5
   127fc:	movt	r1, #1
   12800:	bl	1134c <dcgettext@plt>
   12804:	mov	r4, r0
   12808:	bl	113c4 <__ctype_get_mb_cur_max@plt>
   1280c:	movw	r3, #37286	; 0x91a6
   12810:	cmp	r0, #1
   12814:	mov	r2, #0
   12818:	movw	r7, #37288	; 0x91a8
   1281c:	mov	r1, #0
   12820:	movt	r3, #2
   12824:	movwhi	r2, #1
   12828:	cmp	r0, #2
   1282c:	mov	r0, #0
   12830:	movt	r7, #2
   12834:	ldrb	r3, [r3]
   12838:	movwcc	r0, #1
   1283c:	and	sl, r2, r3
   12840:	movw	r2, #37285	; 0x91a5
   12844:	and	r0, r3, r0
   12848:	movt	r2, #2
   1284c:	ldrb	r2, [r2]
   12850:	orr	r0, r2, r0
   12854:	movw	r2, #37287	; 0x91a7
   12858:	eor	r0, r0, #1
   1285c:	movt	r2, #2
   12860:	orr	r6, sl, r0
   12864:	movw	r0, #37289	; 0x91a9
   12868:	ldrb	r2, [r2]
   1286c:	movt	r0, #2
   12870:	tst	r6, #1
   12874:	ldrb	r0, [r0]
   12878:	orr	r5, r2, r0
   1287c:	ldrbeq	r0, [r7]
   12880:	cmpeq	r0, #0
   12884:	beq	128b4 <__assert_fail@plt+0x1304>
   12888:	mov	r0, #2
   1288c:	mov	r1, #0
   12890:	mov	r2, #0
   12894:	mov	r3, #0
   12898:	str	r0, [sp, #8]
   1289c:	ldr	r0, [sp, #44]	; 0x2c
   128a0:	str	r1, [sp]
   128a4:	str	r1, [sp, #4]
   128a8:	bl	138a8 <__assert_fail@plt+0x22f8>
   128ac:	ldrb	r1, [r7]
   128b0:	b	128bc <__assert_fail@plt+0x130c>
   128b4:	tst	r5, #1
   128b8:	bne	12888 <__assert_fail@plt+0x12d8>
   128bc:	orr	r0, r5, r1
   128c0:	str	sl, [sp, #36]	; 0x24
   128c4:	str	r4, [sp, #32]
   128c8:	orr	r0, r6, r0
   128cc:	tst	r0, #1
   128d0:	beq	12ce4 <__assert_fail@plt+0x1734>
   128d4:	orr	r0, sl, r5
   128d8:	str	r9, [sp, #28]
   128dc:	tst	r0, #1
   128e0:	beq	12dcc <__assert_fail@plt+0x181c>
   128e4:	bl	113c4 <__ctype_get_mb_cur_max@plt>
   128e8:	cmp	r0, #1
   128ec:	bls	12fd4 <__assert_fail@plt+0x1a24>
   128f0:	mov	r0, #0
   128f4:	mov	r1, #0
   128f8:	mov	r8, #0
   128fc:	mov	r4, #0
   12900:	mov	r7, #0
   12904:	str	r0, [sp, #48]	; 0x30
   12908:	mov	r0, #0
   1290c:	str	r1, [sp, #100]	; 0x64
   12910:	str	r1, [sp, #96]	; 0x60
   12914:	str	r0, [sp, #40]	; 0x28
   12918:	mov	r0, #0
   1291c:	str	r0, [sp, #56]	; 0x38
   12920:	mov	r0, #0
   12924:	str	r0, [sp, #52]	; 0x34
   12928:	mov	r0, #0
   1292c:	str	r0, [sp, #68]	; 0x44
   12930:	mov	r0, #0
   12934:	str	r0, [sp, #84]	; 0x54
   12938:	mov	r0, #0
   1293c:	str	r0, [sp, #76]	; 0x4c
   12940:	mov	r0, #0
   12944:	str	r0, [sp, #72]	; 0x48
   12948:	mov	r0, #0
   1294c:	str	r0, [sp, #80]	; 0x50
   12950:	mov	r0, #0
   12954:	str	r0, [sp, #64]	; 0x40
   12958:	mov	r0, #0
   1295c:	str	r0, [sp, #60]	; 0x3c
   12960:	mov	r5, #0
   12964:	b	129a4 <__assert_fail@plt+0x13f4>
   12968:	cmp	r9, #16384	; 0x4000
   1296c:	add	r0, sp, #104	; 0x68
   12970:	addeq	sl, sl, #1
   12974:	subeq	r9, r9, #1
   12978:	mov	r1, sl
   1297c:	mov	r2, r9
   12980:	bl	112f8 <memmove@plt>
   12984:	mov	r5, r9
   12988:	b	129a4 <__assert_fail@plt+0x13f4>
   1298c:	str	r5, [sp, #96]	; 0x60
   12990:	str	r7, [sp, #100]	; 0x64
   12994:	mov	r7, #1
   12998:	cmp	r9, #0
   1299c:	mov	r5, #0
   129a0:	bne	12968 <__assert_fail@plt+0x13b8>
   129a4:	add	r0, sp, #104	; 0x68
   129a8:	rsb	r2, r5, #16384	; 0x4000
   129ac:	add	r1, r0, r5
   129b0:	ldr	r0, [sp, #44]	; 0x2c
   129b4:	bl	15e2c <__assert_fail@plt+0x487c>
   129b8:	cmp	r0, #0
   129bc:	beq	132c8 <__assert_fail@plt+0x1d18>
   129c0:	cmn	r0, #1
   129c4:	beq	132f0 <__assert_fail@plt+0x1d40>
   129c8:	ldr	r1, [sp, #48]	; 0x30
   129cc:	add	r9, r0, r5
   129d0:	add	sl, sp, #104	; 0x68
   129d4:	adds	r1, r1, r0
   129d8:	ldr	r0, [sp, #40]	; 0x28
   129dc:	str	r1, [sp, #48]	; 0x30
   129e0:	adc	r0, r0, #0
   129e4:	str	r0, [sp, #40]	; 0x28
   129e8:	b	12a4c <__assert_fail@plt+0x149c>
   129ec:	bl	11454 <__ctype_b_loc@plt>
   129f0:	ldrb	r1, [sl]
   129f4:	ldr	r0, [r0]
   129f8:	add	r0, r0, r1, lsl #1
   129fc:	ldrh	r0, [r0]
   12a00:	tst	r0, #16384	; 0x4000
   12a04:	beq	12cc0 <__assert_fail@plt+0x1710>
   12a08:	ldr	r1, [sp, #64]	; 0x40
   12a0c:	adds	r1, r1, #1
   12a10:	str	r1, [sp, #64]	; 0x40
   12a14:	ldr	r1, [sp, #60]	; 0x3c
   12a18:	adc	r1, r1, #0
   12a1c:	tst	r0, #8192	; 0x2000
   12a20:	str	r1, [sp, #60]	; 0x3c
   12a24:	bne	12c98 <__assert_fail@plt+0x16e8>
   12a28:	mov	r0, #1
   12a2c:	b	12cbc <__assert_fail@plt+0x170c>
   12a30:	movw	r1, #8239	; 0x202f
   12a34:	cmp	r0, r1
   12a38:	beq	12c98 <__assert_fail@plt+0x16e8>
   12a3c:	movw	r1, #8288	; 0x2060
   12a40:	cmp	r0, r1
   12a44:	beq	12c98 <__assert_fail@plt+0x16e8>
   12a48:	b	12a28 <__assert_fail@plt+0x1478>
   12a4c:	tst	r7, #1
   12a50:	bne	12a8c <__assert_fail@plt+0x14dc>
   12a54:	ldrb	r0, [sl]
   12a58:	movw	r2, #32696	; 0x7fb8
   12a5c:	mov	r3, #1
   12a60:	movt	r2, #1
   12a64:	ubfx	r1, r0, #5, #3
   12a68:	ldr	r1, [r2, r1, lsl #2]
   12a6c:	and	r2, r0, #31
   12a70:	tst	r1, r3, lsl r2
   12a74:	beq	12a8c <__assert_fail@plt+0x14dc>
   12a78:	str	r0, [sp, #92]	; 0x5c
   12a7c:	mov	r6, #1
   12a80:	mov	r7, #0
   12a84:	mov	r1, #0
   12a88:	b	12adc <__assert_fail@plt+0x152c>
   12a8c:	ldr	r5, [sp, #96]	; 0x60
   12a90:	ldr	r7, [sp, #100]	; 0x64
   12a94:	add	r0, sp, #92	; 0x5c
   12a98:	mov	r1, sl
   12a9c:	mov	r2, r9
   12aa0:	add	r3, sp, #96	; 0x60
   12aa4:	bl	13bb8 <__assert_fail@plt+0x2608>
   12aa8:	cmn	r0, #1
   12aac:	beq	12b74 <__assert_fail@plt+0x15c4>
   12ab0:	mov	r6, r0
   12ab4:	cmn	r0, #2
   12ab8:	beq	1298c <__assert_fail@plt+0x13dc>
   12abc:	add	r0, sp, #96	; 0x60
   12ac0:	bl	11334 <mbsinit@plt>
   12ac4:	clz	r0, r0
   12ac8:	cmp	r6, #0
   12acc:	lsr	r7, r0, #5
   12ad0:	beq	12b84 <__assert_fail@plt+0x15d4>
   12ad4:	ldr	r0, [sp, #92]	; 0x5c
   12ad8:	mov	r1, #1
   12adc:	sub	r2, r0, #9
   12ae0:	cmp	r2, #23
   12ae4:	bhi	12be8 <__assert_fail@plt+0x1638>
   12ae8:	add	r3, pc, #0
   12aec:	ldr	pc, [r3, r2, lsl #2]
   12af0:	andeq	r2, r1, r0, asr fp
   12af4:	muleq	r1, r4, fp
   12af8:	muleq	r1, r8, ip
   12afc:	andeq	r2, r1, ip, lsr #23
   12b00:	andeq	r2, r1, ip, lsr #23
   12b04:	andeq	r2, r1, r8, ror #23
   12b08:	andeq	r2, r1, r8, ror #23
   12b0c:	andeq	r2, r1, r8, ror #23
   12b10:	andeq	r2, r1, r8, ror #23
   12b14:	andeq	r2, r1, r8, ror #23
   12b18:	andeq	r2, r1, r8, ror #23
   12b1c:	andeq	r2, r1, r8, ror #23
   12b20:	andeq	r2, r1, r8, ror #23
   12b24:	andeq	r2, r1, r8, ror #23
   12b28:	andeq	r2, r1, r8, ror #23
   12b2c:	andeq	r2, r1, r8, ror #23
   12b30:	andeq	r2, r1, r8, ror #23
   12b34:	andeq	r2, r1, r8, ror #23
   12b38:	andeq	r2, r1, r8, ror #23
   12b3c:	andeq	r2, r1, r8, ror #23
   12b40:	andeq	r2, r1, r8, ror #23
   12b44:	andeq	r2, r1, r8, ror #23
   12b48:	andeq	r2, r1, r8, ror #23
   12b4c:	andeq	r2, r1, r0, lsl #25
   12b50:	ldr	r2, [sp, #64]	; 0x40
   12b54:	ldr	r1, [sp, #60]	; 0x3c
   12b58:	adds	r0, r2, #8
   12b5c:	and	r2, r2, #7
   12b60:	adc	r1, r1, #0
   12b64:	subs	r0, r0, r2
   12b68:	str	r0, [sp, #64]	; 0x40
   12b6c:	sbc	r0, r1, #0
   12b70:	b	12c94 <__assert_fail@plt+0x16e4>
   12b74:	sub	r9, r9, #1
   12b78:	add	sl, sl, #1
   12b7c:	mov	r7, #1
   12b80:	b	12cd8 <__assert_fail@plt+0x1728>
   12b84:	mov	r0, #0
   12b88:	mov	r6, #1
   12b8c:	str	r0, [sp, #92]	; 0x5c
   12b90:	b	12bf0 <__assert_fail@plt+0x1640>
   12b94:	ldr	r0, [sp, #56]	; 0x38
   12b98:	adds	r0, r0, #1
   12b9c:	str	r0, [sp, #56]	; 0x38
   12ba0:	ldr	r0, [sp, #52]	; 0x34
   12ba4:	adc	r0, r0, #0
   12ba8:	str	r0, [sp, #52]	; 0x34
   12bac:	ldr	r2, [sp, #64]	; 0x40
   12bb0:	ldr	r1, [sp, #68]	; 0x44
   12bb4:	ldr	r3, [sp, #60]	; 0x3c
   12bb8:	subs	r0, r8, r2
   12bbc:	sbcs	r0, r1, r3
   12bc0:	mov	r0, #0
   12bc4:	movwcc	r0, #1
   12bc8:	cmp	r0, #0
   12bcc:	mov	r0, #0
   12bd0:	movne	r1, r3
   12bd4:	str	r0, [sp, #64]	; 0x40
   12bd8:	movne	r8, r2
   12bdc:	mov	r0, #0
   12be0:	str	r1, [sp, #68]	; 0x44
   12be4:	b	12c94 <__assert_fail@plt+0x16e4>
   12be8:	cmp	r1, #0
   12bec:	beq	129ec <__assert_fail@plt+0x143c>
   12bf0:	bl	11394 <iswprint@plt>
   12bf4:	cmp	r0, #0
   12bf8:	beq	12cc0 <__assert_fail@plt+0x1710>
   12bfc:	movw	r0, #37289	; 0x91a9
   12c00:	movt	r0, #2
   12c04:	ldrb	r0, [r0]
   12c08:	cmp	r0, #1
   12c0c:	bne	12c34 <__assert_fail@plt+0x1684>
   12c10:	ldr	r0, [sp, #92]	; 0x5c
   12c14:	bl	112ec <wcwidth@plt>
   12c18:	ldr	r1, [sp, #64]	; 0x40
   12c1c:	bic	r0, r0, r0, asr #31
   12c20:	adds	r1, r1, r0
   12c24:	ldr	r0, [sp, #60]	; 0x3c
   12c28:	str	r1, [sp, #64]	; 0x40
   12c2c:	adc	r0, r0, #0
   12c30:	str	r0, [sp, #60]	; 0x3c
   12c34:	ldr	r0, [sp, #92]	; 0x5c
   12c38:	bl	11478 <iswspace@plt>
   12c3c:	cmp	r0, #0
   12c40:	bne	12c98 <__assert_fail@plt+0x16e8>
   12c44:	movw	r0, #37284	; 0x91a4
   12c48:	movt	r0, #2
   12c4c:	ldrb	r0, [r0]
   12c50:	cmp	r0, #0
   12c54:	bne	12a28 <__assert_fail@plt+0x1478>
   12c58:	ldr	r0, [sp, #92]	; 0x5c
   12c5c:	movw	r1, #8238	; 0x202e
   12c60:	cmp	r0, r1
   12c64:	bgt	12a30 <__assert_fail@plt+0x1480>
   12c68:	cmp	r0, #160	; 0xa0
   12c6c:	beq	12c98 <__assert_fail@plt+0x16e8>
   12c70:	movw	r1, #8199	; 0x2007
   12c74:	cmp	r0, r1
   12c78:	beq	12c98 <__assert_fail@plt+0x16e8>
   12c7c:	b	12a28 <__assert_fail@plt+0x1478>
   12c80:	ldr	r0, [sp, #64]	; 0x40
   12c84:	adds	r0, r0, #1
   12c88:	str	r0, [sp, #64]	; 0x40
   12c8c:	ldr	r0, [sp, #60]	; 0x3c
   12c90:	adc	r0, r0, #0
   12c94:	str	r0, [sp, #60]	; 0x3c
   12c98:	ldr	r0, [sp, #80]	; 0x50
   12c9c:	ldr	r1, [sp, #76]	; 0x4c
   12ca0:	and	r0, r0, #1
   12ca4:	adds	r1, r1, r0
   12ca8:	ldr	r0, [sp, #72]	; 0x48
   12cac:	str	r1, [sp, #76]	; 0x4c
   12cb0:	adc	r0, r0, #0
   12cb4:	str	r0, [sp, #72]	; 0x48
   12cb8:	mov	r0, #0
   12cbc:	str	r0, [sp, #80]	; 0x50
   12cc0:	ldr	r0, [sp, #84]	; 0x54
   12cc4:	sub	r9, r9, r6
   12cc8:	add	sl, sl, r6
   12ccc:	adds	r0, r0, #1
   12cd0:	adc	r4, r4, #0
   12cd4:	str	r0, [sp, #84]	; 0x54
   12cd8:	cmp	r9, #0
   12cdc:	bne	12a4c <__assert_fail@plt+0x149c>
   12ce0:	b	12960 <__assert_fail@plt+0x13b0>
   12ce4:	ldr	r0, [r8]
   12ce8:	cmp	r0, #1
   12cec:	blt	12d04 <__assert_fail@plt+0x1754>
   12cf0:	ldr	r1, [sp, #44]	; 0x2c
   12cf4:	add	r2, r8, #8
   12cf8:	mov	r0, #3
   12cfc:	bl	113a0 <__fxstat64@plt>
   12d00:	str	r0, [r8]
   12d04:	mov	r4, #0
   12d08:	cmp	r0, #0
   12d0c:	mov	r6, #0
   12d10:	mov	r7, #0
   12d14:	beq	12f94 <__assert_fail@plt+0x19e4>
   12d18:	mov	r0, #2
   12d1c:	mov	r2, #0
   12d20:	mov	r3, #0
   12d24:	str	r4, [sp]
   12d28:	str	r4, [sp, #4]
   12d2c:	str	r0, [sp, #8]
   12d30:	ldr	r0, [sp, #44]	; 0x2c
   12d34:	bl	138a8 <__assert_fail@plt+0x22f8>
   12d38:	add	r4, sp, #104	; 0x68
   12d3c:	b	12d48 <__assert_fail@plt+0x1798>
   12d40:	adds	r6, r6, r0
   12d44:	adc	r7, r7, #0
   12d48:	ldr	r0, [sp, #44]	; 0x2c
   12d4c:	mov	r1, r4
   12d50:	mov	r2, #16384	; 0x4000
   12d54:	bl	15e2c <__assert_fail@plt+0x487c>
   12d58:	cmp	r0, #0
   12d5c:	beq	12f54 <__assert_fail@plt+0x19a4>
   12d60:	cmn	r0, #1
   12d64:	bne	12d40 <__assert_fail@plt+0x1790>
   12d68:	str	r6, [sp, #48]	; 0x30
   12d6c:	bl	114a8 <__errno_location@plt>
   12d70:	ldr	r2, [sp, #32]
   12d74:	ldr	r5, [r0]
   12d78:	mov	r0, #0
   12d7c:	mov	r1, #3
   12d80:	bl	15718 <__assert_fail@plt+0x4168>
   12d84:	movw	r2, #32692	; 0x7fb4
   12d88:	mov	r3, r0
   12d8c:	mov	r0, #0
   12d90:	mov	r1, r5
   12d94:	movt	r2, #1
   12d98:	bl	113e8 <error@plt>
   12d9c:	mov	r0, #0
   12da0:	mov	lr, #0
   12da4:	mov	r8, #0
   12da8:	mov	r6, #0
   12dac:	mov	ip, #0
   12db0:	mov	r5, #0
   12db4:	mov	r3, #0
   12db8:	mov	r2, #0
   12dbc:	str	r0, [sp, #76]	; 0x4c
   12dc0:	mov	r0, #0
   12dc4:	str	r0, [sp, #44]	; 0x2c
   12dc8:	b	12f84 <__assert_fail@plt+0x19d4>
   12dcc:	mov	r0, #0
   12dd0:	add	r5, sp, #104	; 0x68
   12dd4:	vmov.i32	d9, #0	; 0x00000000
   12dd8:	vmov.i32	d10, #10	; 0x0000000a
   12ddc:	mov	r7, #0
   12de0:	mov	r9, #0
   12de4:	mov	r4, #0
   12de8:	mov	r8, #0
   12dec:	str	r0, [sp, #48]	; 0x30
   12df0:	b	12e20 <__assert_fail@plt+0x1870>
   12df4:	movw	r2, #34953	; 0x8889
   12df8:	subs	r0, r4, r9
   12dfc:	mov	r9, #0
   12e00:	mov	r7, sl
   12e04:	movt	r2, #34952	; 0x8888
   12e08:	sbc	r1, r8, r5
   12e0c:	add	r5, sp, #104	; 0x68
   12e10:	umull	r2, r3, r6, r2
   12e14:	rsbs	r0, r0, r3, lsr #3
   12e18:	rscs	r0, r1, #0
   12e1c:	movwcs	r9, #1
   12e20:	ldr	r0, [sp, #44]	; 0x2c
   12e24:	mov	r1, r5
   12e28:	mov	r2, #16384	; 0x4000
   12e2c:	bl	15e2c <__assert_fail@plt+0x487c>
   12e30:	cmp	r0, #0
   12e34:	beq	13244 <__assert_fail@plt+0x1c94>
   12e38:	mov	r6, r0
   12e3c:	cmn	r0, #1
   12e40:	ldr	r0, [sp, #48]	; 0x30
   12e44:	beq	1324c <__assert_fail@plt+0x1c9c>
   12e48:	mov	sl, r7
   12e4c:	adds	r0, r0, r6
   12e50:	add	r7, r5, r6
   12e54:	adc	sl, sl, #0
   12e58:	tst	r9, #1
   12e5c:	str	r0, [sp, #48]	; 0x30
   12e60:	beq	12eb0 <__assert_fail@plt+0x1900>
   12e64:	mov	r0, #10
   12e68:	mov	r1, #10
   12e6c:	strb	r0, [r7]
   12e70:	mov	r0, r5
   12e74:	bl	11388 <rawmemchr@plt>
   12e78:	cmp	r0, r7
   12e7c:	mov	r9, r4
   12e80:	mov	r5, r8
   12e84:	bcs	12df4 <__assert_fail@plt+0x1844>
   12e88:	mov	r4, r9
   12e8c:	mov	r8, r5
   12e90:	adds	r4, r4, #1
   12e94:	add	r0, r0, #1
   12e98:	mov	r1, #10
   12e9c:	adc	r8, r8, #0
   12ea0:	bl	11388 <rawmemchr@plt>
   12ea4:	cmp	r0, r7
   12ea8:	bcc	12e90 <__assert_fail@plt+0x18e0>
   12eac:	b	12df4 <__assert_fail@plt+0x1844>
   12eb0:	mov	r0, r5
   12eb4:	cmp	r6, #2
   12eb8:	mov	r9, r4
   12ebc:	mov	r5, r8
   12ec0:	bcc	12f30 <__assert_fail@plt+0x1980>
   12ec4:	vmov.32	d8[0], r9
   12ec8:	bic	ip, r6, #1
   12ecc:	add	r3, sp, #104	; 0x68
   12ed0:	add	r1, sp, #88	; 0x58
   12ed4:	vmov.32	d8[1], r5
   12ed8:	add	r0, r3, ip
   12edc:	mov	r2, ip
   12ee0:	vorr	q8, q4, q4
   12ee4:	ldrh	r4, [r3], #2
   12ee8:	subs	r2, r2, #2
   12eec:	strh	r4, [sp, #88]	; 0x58
   12ef0:	vld1.16	{d18[0]}, [r1 :16]
   12ef4:	add	r4, pc, #996	; 0x3e4
   12ef8:	vld1.64	{d20-d21}, [r4 :128]
   12efc:	vmovl.u8	q9, d18
   12f00:	vmovl.u16	q9, d18
   12f04:	vceq.i32	d18, d18, d10
   12f08:	vmovl.u32	q9, d18
   12f0c:	vand	q9, q9, q10
   12f10:	vadd.i64	q8, q8, q9
   12f14:	bne	12ee4 <__assert_fail@plt+0x1934>
   12f18:	vorr	d18, d17, d17
   12f1c:	cmp	r6, ip
   12f20:	vadd.i64	q8, q8, q9
   12f24:	vmov.32	r8, d16[1]
   12f28:	vmov.32	r4, d16[0]
   12f2c:	beq	12df4 <__assert_fail@plt+0x1844>
   12f30:	ldrb	r3, [r0], #1
   12f34:	adds	r1, r4, #1
   12f38:	adc	r2, r8, #0
   12f3c:	cmp	r3, #10
   12f40:	moveq	r4, r1
   12f44:	moveq	r8, r2
   12f48:	cmp	r7, r0
   12f4c:	bne	12f30 <__assert_fail@plt+0x1980>
   12f50:	b	12df4 <__assert_fail@plt+0x1844>
   12f54:	mov	lr, #0
   12f58:	str	r6, [sp, #48]	; 0x30
   12f5c:	mov	r0, #1
   12f60:	mov	r8, #0
   12f64:	mov	r6, #0
   12f68:	mov	ip, #0
   12f6c:	mov	r5, #0
   12f70:	mov	r3, #0
   12f74:	mov	r2, #0
   12f78:	str	r0, [sp, #44]	; 0x2c
   12f7c:	mov	r0, #0
   12f80:	str	r0, [sp, #76]	; 0x4c
   12f84:	movw	r1, #37286	; 0x91a6
   12f88:	mov	sl, r9
   12f8c:	movt	r1, #2
   12f90:	b	13440 <__assert_fail@plt+0x1e90>
   12f94:	ldr	r0, [r8, #24]
   12f98:	and	r0, r0, #53248	; 0xd000
   12f9c:	orr	r0, r0, #8192	; 0x2000
   12fa0:	cmp	r0, #40960	; 0xa000
   12fa4:	bne	13390 <__assert_fail@plt+0x1de0>
   12fa8:	ldr	r0, [r8, #60]	; 0x3c
   12fac:	mov	r6, #0
   12fb0:	mov	r7, #0
   12fb4:	cmp	r0, #0
   12fb8:	blt	12d18 <__assert_fail@plt+0x1768>
   12fbc:	ldr	r5, [fp, #12]
   12fc0:	ldr	r6, [r8, #56]	; 0x38
   12fc4:	cmn	r5, #1
   12fc8:	ble	13540 <__assert_fail@plt+0x1f90>
   12fcc:	ldr	r3, [fp, #8]
   12fd0:	b	13560 <__assert_fail@plt+0x1fb0>
   12fd4:	mov	r0, #0
   12fd8:	add	r9, sp, #104	; 0x68
   12fdc:	mov	r7, #0
   12fe0:	mov	r8, #0
   12fe4:	mov	sl, #0
   12fe8:	mov	r6, #0
   12fec:	str	r0, [sp, #48]	; 0x30
   12ff0:	mov	r0, #0
   12ff4:	str	r0, [sp, #56]	; 0x38
   12ff8:	mov	r0, #0
   12ffc:	str	r0, [sp, #52]	; 0x34
   13000:	mov	r0, #0
   13004:	str	r0, [sp, #84]	; 0x54
   13008:	mov	r0, #0
   1300c:	str	r0, [sp, #68]	; 0x44
   13010:	mov	r0, #0
   13014:	str	r0, [sp, #76]	; 0x4c
   13018:	mov	r0, #0
   1301c:	str	r0, [sp, #80]	; 0x50
   13020:	b	13050 <__assert_fail@plt+0x1aa0>
   13024:	ldr	r0, [sp, #48]	; 0x30
   13028:	ldr	r1, [sp, #72]	; 0x48
   1302c:	str	r7, [sp, #76]	; 0x4c
   13030:	ldr	r7, [sp, #40]	; 0x28
   13034:	add	r9, sp, #104	; 0x68
   13038:	str	r3, [sp, #80]	; 0x50
   1303c:	str	r2, [sp, #68]	; 0x44
   13040:	str	ip, [sp, #84]	; 0x54
   13044:	adds	r0, r0, r1
   13048:	adc	r7, r7, #0
   1304c:	str	r0, [sp, #48]	; 0x30
   13050:	ldr	r0, [sp, #44]	; 0x2c
   13054:	mov	r1, r9
   13058:	mov	r2, #16384	; 0x4000
   1305c:	bl	15e2c <__assert_fail@plt+0x487c>
   13060:	cmp	r0, #0
   13064:	beq	1339c <__assert_fail@plt+0x1dec>
   13068:	cmn	r0, #1
   1306c:	beq	133a8 <__assert_fail@plt+0x1df8>
   13070:	str	r7, [sp, #40]	; 0x28
   13074:	ldr	ip, [sp, #84]	; 0x54
   13078:	ldr	r2, [sp, #68]	; 0x44
   1307c:	ldr	r7, [sp, #76]	; 0x4c
   13080:	ldr	r3, [sp, #80]	; 0x50
   13084:	mov	r5, r0
   13088:	str	r0, [sp, #72]	; 0x48
   1308c:	ldrb	r4, [r9], #1
   13090:	sub	r0, r4, #9
   13094:	cmp	r0, #23
   13098:	bhi	13164 <__assert_fail@plt+0x1bb4>
   1309c:	add	r1, pc, #0
   130a0:	ldr	pc, [r1, r0, lsl #2]
   130a4:	andeq	r3, r1, r4, lsl #2
   130a8:	andeq	r3, r1, r4, lsr #2
   130ac:	andeq	r3, r1, r8, lsr #4
   130b0:	andeq	r3, r1, ip, lsr r1
   130b4:	andeq	r3, r1, ip, lsr r1
   130b8:	andeq	r3, r1, r4, ror #2
   130bc:	andeq	r3, r1, r4, ror #2
   130c0:	andeq	r3, r1, r4, ror #2
   130c4:	andeq	r3, r1, r4, ror #2
   130c8:	andeq	r3, r1, r4, ror #2
   130cc:	andeq	r3, r1, r4, ror #2
   130d0:	andeq	r3, r1, r4, ror #2
   130d4:	andeq	r3, r1, r4, ror #2
   130d8:	andeq	r3, r1, r4, ror #2
   130dc:	andeq	r3, r1, r4, ror #2
   130e0:	andeq	r3, r1, r4, ror #2
   130e4:	andeq	r3, r1, r4, ror #2
   130e8:	andeq	r3, r1, r4, ror #2
   130ec:	andeq	r3, r1, r4, ror #2
   130f0:	andeq	r3, r1, r4, ror #2
   130f4:	andeq	r3, r1, r4, ror #2
   130f8:	andeq	r3, r1, r4, ror #2
   130fc:	andeq	r3, r1, r4, ror #2
   13100:	andeq	r3, r1, r8, asr #3
   13104:	adds	r0, sl, #8
   13108:	adc	r1, r6, #0
   1310c:	mov	r6, r2
   13110:	and	r2, sl, #7
   13114:	subs	sl, r0, r2
   13118:	mov	r2, r6
   1311c:	sbc	r6, r1, #0
   13120:	b	13228 <__assert_fail@plt+0x1c78>
   13124:	ldr	r0, [sp, #56]	; 0x38
   13128:	adds	r0, r0, #1
   1312c:	str	r0, [sp, #56]	; 0x38
   13130:	ldr	r0, [sp, #52]	; 0x34
   13134:	adc	r0, r0, #0
   13138:	str	r0, [sp, #52]	; 0x34
   1313c:	subs	r0, ip, sl
   13140:	sbcs	r0, r2, r6
   13144:	mov	r0, #0
   13148:	movwcc	r0, #1
   1314c:	cmp	r0, #0
   13150:	movne	r2, r6
   13154:	movne	ip, sl
   13158:	mov	sl, #0
   1315c:	mov	r6, #0
   13160:	b	13228 <__assert_fail@plt+0x1c78>
   13164:	str	r3, [sp, #80]	; 0x50
   13168:	str	r2, [sp, #68]	; 0x44
   1316c:	str	ip, [sp, #84]	; 0x54
   13170:	bl	11454 <__ctype_b_loc@plt>
   13174:	ldr	r0, [r0]
   13178:	add	r0, r0, r4, lsl #1
   1317c:	ldrh	r0, [r0]
   13180:	tst	r0, #16384	; 0x4000
   13184:	beq	131b8 <__assert_fail@plt+0x1c08>
   13188:	adds	sl, sl, #1
   1318c:	adc	r6, r6, #0
   13190:	tst	r0, #8192	; 0x2000
   13194:	bne	1321c <__assert_fail@plt+0x1c6c>
   13198:	mov	r0, r4
   1319c:	bl	114d8 <btowc@plt>
   131a0:	movw	r1, #37284	; 0x91a4
   131a4:	movt	r1, #2
   131a8:	ldrb	r1, [r1]
   131ac:	cmp	r1, #0
   131b0:	beq	131d4 <__assert_fail@plt+0x1c24>
   131b4:	mov	r8, #1
   131b8:	ldr	ip, [sp, #84]	; 0x54
   131bc:	ldr	r2, [sp, #68]	; 0x44
   131c0:	ldr	r3, [sp, #80]	; 0x50
   131c4:	b	13238 <__assert_fail@plt+0x1c88>
   131c8:	adds	sl, sl, #1
   131cc:	adc	r6, r6, #0
   131d0:	b	13228 <__assert_fail@plt+0x1c78>
   131d4:	movw	r1, #8238	; 0x202e
   131d8:	cmp	r0, r1
   131dc:	bgt	131f0 <__assert_fail@plt+0x1c40>
   131e0:	cmp	r0, #160	; 0xa0
   131e4:	beq	1321c <__assert_fail@plt+0x1c6c>
   131e8:	movw	r1, #8199	; 0x2007
   131ec:	b	13200 <__assert_fail@plt+0x1c50>
   131f0:	movw	r1, #8239	; 0x202f
   131f4:	cmp	r0, r1
   131f8:	beq	1321c <__assert_fail@plt+0x1c6c>
   131fc:	movw	r1, #8288	; 0x2060
   13200:	ldr	ip, [sp, #84]	; 0x54
   13204:	ldr	r2, [sp, #68]	; 0x44
   13208:	ldr	r3, [sp, #80]	; 0x50
   1320c:	cmp	r0, r1
   13210:	beq	13228 <__assert_fail@plt+0x1c78>
   13214:	mov	r8, #1
   13218:	b	13238 <__assert_fail@plt+0x1c88>
   1321c:	ldr	ip, [sp, #84]	; 0x54
   13220:	ldr	r2, [sp, #68]	; 0x44
   13224:	ldr	r3, [sp, #80]	; 0x50
   13228:	and	r0, r8, #1
   1322c:	mov	r8, #0
   13230:	adds	r7, r7, r0
   13234:	adc	r3, r3, #0
   13238:	subs	r5, r5, #1
   1323c:	bne	1308c <__assert_fail@plt+0x1adc>
   13240:	b	13024 <__assert_fail@plt+0x1a74>
   13244:	mov	r0, #1
   13248:	b	13294 <__assert_fail@plt+0x1ce4>
   1324c:	bl	114a8 <__errno_location@plt>
   13250:	ldr	r2, [sp, #32]
   13254:	ldr	r4, [r0]
   13258:	mov	r0, #0
   1325c:	mov	r1, #3
   13260:	str	r0, [sp, #48]	; 0x30
   13264:	mov	r0, #0
   13268:	bl	15718 <__assert_fail@plt+0x4168>
   1326c:	movw	r2, #32692	; 0x7fb4
   13270:	mov	r3, r0
   13274:	mov	r0, #0
   13278:	mov	r1, r4
   1327c:	movt	r2, #1
   13280:	bl	113e8 <error@plt>
   13284:	mov	r7, #0
   13288:	mov	r4, #0
   1328c:	mov	r8, #0
   13290:	mov	r0, #0
   13294:	ldr	sl, [sp, #28]
   13298:	movw	r1, #37286	; 0x91a6
   1329c:	str	r0, [sp, #44]	; 0x2c
   132a0:	mov	r0, #0
   132a4:	mov	ip, #0
   132a8:	mov	r5, #0
   132ac:	mov	r3, #0
   132b0:	mov	lr, r4
   132b4:	mov	r6, #0
   132b8:	mov	r2, #0
   132bc:	str	r0, [sp, #76]	; 0x4c
   132c0:	movt	r1, #2
   132c4:	b	13440 <__assert_fail@plt+0x1e90>
   132c8:	mov	r0, #1
   132cc:	str	r0, [sp, #44]	; 0x2c
   132d0:	b	13328 <__assert_fail@plt+0x1d78>
   132d4:	nop	{0}
   132d8:	nop	{0}
   132dc:	nop	{0}
   132e0:	andeq	r0, r0, r1
   132e4:	andeq	r0, r0, r0
   132e8:	andeq	r0, r0, r1
   132ec:	andeq	r0, r0, r0
   132f0:	bl	114a8 <__errno_location@plt>
   132f4:	ldr	r2, [sp, #32]
   132f8:	ldr	r6, [r0]
   132fc:	mov	r0, #0
   13300:	mov	r1, #3
   13304:	str	r0, [sp, #44]	; 0x2c
   13308:	mov	r0, #0
   1330c:	bl	15718 <__assert_fail@plt+0x4168>
   13310:	movw	r2, #32692	; 0x7fb4
   13314:	mov	r3, r0
   13318:	mov	r0, #0
   1331c:	mov	r1, r6
   13320:	movt	r2, #1
   13324:	bl	113e8 <error@plt>
   13328:	mov	r3, r4
   1332c:	ldr	r4, [sp, #64]	; 0x40
   13330:	ldr	ip, [sp, #68]	; 0x44
   13334:	ldr	r6, [sp, #60]	; 0x3c
   13338:	mov	r1, r8
   1333c:	ldr	r9, [sp, #80]	; 0x50
   13340:	ldr	r8, [sp, #76]	; 0x4c
   13344:	mov	r0, #0
   13348:	ldr	lr, [sp, #72]	; 0x48
   1334c:	ldr	sl, [sp, #28]
   13350:	ldr	r7, [sp, #40]	; 0x28
   13354:	ldr	r5, [sp, #84]	; 0x54
   13358:	mov	r2, r1
   1335c:	subs	r1, r1, r4
   13360:	sbcs	r1, ip, r6
   13364:	movwcc	r0, #1
   13368:	movw	r1, #37286	; 0x91a6
   1336c:	cmp	r0, #0
   13370:	and	r0, r9, #1
   13374:	movt	r1, #2
   13378:	movne	r2, r4
   1337c:	movne	ip, r6
   13380:	mov	r6, r2
   13384:	adds	r2, r8, r0
   13388:	adc	r0, lr, #0
   1338c:	b	13434 <__assert_fail@plt+0x1e84>
   13390:	mov	r6, #0
   13394:	mov	r7, #0
   13398:	b	12d18 <__assert_fail@plt+0x1768>
   1339c:	mov	r0, #1
   133a0:	str	r0, [sp, #44]	; 0x2c
   133a4:	b	133e0 <__assert_fail@plt+0x1e30>
   133a8:	bl	114a8 <__errno_location@plt>
   133ac:	ldr	r2, [sp, #32]
   133b0:	ldr	r5, [r0]
   133b4:	mov	r0, #0
   133b8:	mov	r1, #3
   133bc:	str	r0, [sp, #44]	; 0x2c
   133c0:	mov	r0, #0
   133c4:	bl	15718 <__assert_fail@plt+0x4168>
   133c8:	movw	r2, #32692	; 0x7fb4
   133cc:	mov	r3, r0
   133d0:	mov	r0, #0
   133d4:	mov	r1, r5
   133d8:	movt	r2, #1
   133dc:	bl	113e8 <error@plt>
   133e0:	ldr	r0, [sp, #84]	; 0x54
   133e4:	ldr	ip, [sp, #68]	; 0x44
   133e8:	ldr	r3, [sp, #76]	; 0x4c
   133ec:	ldr	lr, [sp, #80]	; 0x50
   133f0:	movw	r1, #37286	; 0x91a6
   133f4:	mov	r5, #0
   133f8:	movt	r1, #2
   133fc:	mov	r4, r0
   13400:	subs	r0, r0, sl
   13404:	sbcs	r0, ip, r6
   13408:	mov	r0, #0
   1340c:	movwcc	r0, #1
   13410:	cmp	r0, #0
   13414:	and	r0, r8, #1
   13418:	movne	r4, sl
   1341c:	ldr	sl, [sp, #28]
   13420:	movne	ip, r6
   13424:	adds	r2, r3, r0
   13428:	mov	r3, #0
   1342c:	adc	r0, lr, #0
   13430:	mov	r6, r4
   13434:	str	r0, [sp, #76]	; 0x4c
   13438:	ldr	lr, [sp, #56]	; 0x38
   1343c:	ldr	r8, [sp, #52]	; 0x34
   13440:	ldrb	r0, [r1]
   13444:	ldr	r1, [sp, #36]	; 0x24
   13448:	ldr	r9, [sp, #48]	; 0x30
   1344c:	str	ip, [sp, #68]	; 0x44
   13450:	mov	r4, lr
   13454:	eor	r1, r1, #1
   13458:	ands	r0, r0, r1
   1345c:	mov	r1, r8
   13460:	movne	r3, r7
   13464:	cmp	r0, #0
   13468:	mov	r0, lr
   1346c:	movne	r5, r9
   13470:	str	r3, [sp, #80]	; 0x50
   13474:	str	r5, [sp, #84]	; 0x54
   13478:	str	r5, [sp]
   1347c:	stmib	sp, {r3, r9}
   13480:	mov	r5, r8
   13484:	str	sl, [sp, #24]
   13488:	str	r7, [sp, #12]
   1348c:	str	r6, [sp, #16]
   13490:	str	ip, [sp, #20]
   13494:	mov	sl, r2
   13498:	ldr	r8, [sp, #76]	; 0x4c
   1349c:	mov	r3, r8
   134a0:	bl	125a4 <__assert_fail@plt+0xff4>
   134a4:	movw	r0, #37328	; 0x91d0
   134a8:	ldr	r1, [sp, #84]	; 0x54
   134ac:	movt	r0, #2
   134b0:	ldrd	r2, [r0]
   134b4:	adds	r2, r2, r4
   134b8:	adc	r3, r3, r5
   134bc:	strd	r2, [r0]
   134c0:	movw	r0, #37320	; 0x91c8
   134c4:	movt	r0, #2
   134c8:	ldrd	r2, [r0]
   134cc:	adds	r2, r2, sl
   134d0:	ldr	sl, [sp, #68]	; 0x44
   134d4:	adc	r3, r3, r8
   134d8:	strd	r2, [r0]
   134dc:	movw	r0, #37312	; 0x91c0
   134e0:	movt	r0, #2
   134e4:	ldrd	r2, [r0]
   134e8:	adds	r1, r2, r1
   134ec:	movw	r2, #37304	; 0x91b8
   134f0:	str	r1, [r0]
   134f4:	ldr	r1, [sp, #80]	; 0x50
   134f8:	movt	r2, #2
   134fc:	ldrd	r4, [r2]
   13500:	adc	r1, r3, r1
   13504:	adds	r4, r4, r9
   13508:	str	r1, [r0, #4]
   1350c:	movw	r0, #37296	; 0x91b0
   13510:	adc	r5, r5, r7
   13514:	movt	r0, #2
   13518:	strd	r4, [r2]
   1351c:	ldrd	r2, [r0]
   13520:	subs	r1, r2, r6
   13524:	sbcs	r1, r3, sl
   13528:	stmcc	r0, {r6, sl}
   1352c:	ldr	r0, [sp, #44]	; 0x2c
   13530:	sub	sp, fp, #56	; 0x38
   13534:	vpop	{d8-d10}
   13538:	add	sp, sp, #4
   1353c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13540:	mov	r0, #1
   13544:	mov	r2, #0
   13548:	mov	r3, #0
   1354c:	str	r0, [sp]
   13550:	ldr	r0, [sp, #44]	; 0x2c
   13554:	bl	113b8 <lseek64@plt>
   13558:	mov	r3, r0
   1355c:	mov	r5, r1
   13560:	movw	r0, #37280	; 0x91a0
   13564:	movt	r0, #2
   13568:	ldr	r0, [r0]
   1356c:	udiv	r1, r6, r0
   13570:	mls	r0, r1, r0, r6
   13574:	cmp	r0, #0
   13578:	beq	135a4 <__assert_fail@plt+0x1ff4>
   1357c:	subs	r1, r6, r3
   13580:	mov	r0, #0
   13584:	mov	lr, #0
   13588:	rscs	r7, r5, #0
   1358c:	movwlt	r0, #1
   13590:	cmp	r0, #0
   13594:	movwne	r1, #0
   13598:	movwne	r7, #0
   1359c:	str	r1, [sp, #48]	; 0x30
   135a0:	b	12f5c <__assert_fail@plt+0x19ac>
   135a4:	ldr	r0, [r8, #64]	; 0x40
   135a8:	movw	r2, #513	; 0x201
   135ac:	movw	r1, #513	; 0x201
   135b0:	mov	r7, #0
   135b4:	cmp	r0, #536870913	; 0x20000001
   135b8:	addcc	r2, r0, #1
   135bc:	cmp	r0, #0
   135c0:	movle	r2, r1
   135c4:	udiv	r0, r6, r2
   135c8:	mov	r6, #0
   135cc:	mul	r8, r0, r2
   135d0:	subs	r0, r3, r8
   135d4:	sbcs	r0, r5, #0
   135d8:	bcs	12d18 <__assert_fail@plt+0x1768>
   135dc:	mov	r0, #1
   135e0:	mov	r7, r3
   135e4:	mov	r2, r8
   135e8:	mov	r3, #0
   135ec:	mov	sl, r9
   135f0:	mvn	r9, #0
   135f4:	mov	r6, #0
   135f8:	str	r0, [sp]
   135fc:	ldr	r0, [sp, #44]	; 0x2c
   13600:	bl	113b8 <lseek64@plt>
   13604:	subs	r0, r9, r0
   13608:	sbcs	r0, r9, r1
   1360c:	mov	r9, sl
   13610:	movwlt	r6, #1
   13614:	subs	r0, r8, r7
   13618:	rsc	r7, r5, #0
   1361c:	cmp	r6, #0
   13620:	moveq	r0, r6
   13624:	moveq	r7, r6
   13628:	mov	r6, r0
   1362c:	b	12d18 <__assert_fail@plt+0x1768>
   13630:	push	{r4, sl, fp, lr}
   13634:	add	fp, sp, #8
   13638:	mov	r4, r0
   1363c:	mov	r0, #24
   13640:	bl	16b40 <__assert_fail@plt+0x5590>
   13644:	cmp	r0, #0
   13648:	movne	r1, #0
   1364c:	strne	r1, [r0]
   13650:	strne	r4, [r0, #16]
   13654:	strne	r4, [r0, #20]
   13658:	popne	{r4, sl, fp, pc}
   1365c:	mov	r0, #0
   13660:	pop	{r4, sl, fp, pc}
   13664:	push	{r4, sl, fp, lr}
   13668:	add	fp, sp, #8
   1366c:	mov	r4, r0
   13670:	mov	r0, #24
   13674:	bl	16b40 <__assert_fail@plt+0x5590>
   13678:	cmp	r0, #0
   1367c:	moveq	r0, #0
   13680:	popeq	{r4, sl, fp, pc}
   13684:	mov	r1, r0
   13688:	vmov.i32	q8, #0	; 0x00000000
   1368c:	str	r4, [r1], #4
   13690:	vst1.32	{d16-d17}, [r1]
   13694:	pop	{r4, sl, fp, pc}
   13698:	push	{r4, r5, r6, sl, fp, lr}
   1369c:	add	fp, sp, #16
   136a0:	ldr	r3, [r0]
   136a4:	mov	r4, r1
   136a8:	mov	r5, r0
   136ac:	cmp	r3, #0
   136b0:	beq	136ec <__assert_fail@plt+0x213c>
   136b4:	add	r0, r5, #8
   136b8:	add	r1, r5, #12
   136bc:	mov	r2, #0
   136c0:	mov	r6, #0
   136c4:	bl	11574 <getdelim@plt>
   136c8:	cmn	r0, #1
   136cc:	ble	1371c <__assert_fail@plt+0x216c>
   136d0:	mov	r0, #1
   136d4:	str	r0, [r4]
   136d8:	ldmib	r5, {r0, r6}
   136dc:	add	r0, r0, #1
   136e0:	str	r0, [r5, #4]
   136e4:	mov	r0, r6
   136e8:	pop	{r4, r5, r6, sl, fp, pc}
   136ec:	ldr	r0, [r5, #20]
   136f0:	ldr	r0, [r0]
   136f4:	cmp	r0, #0
   136f8:	beq	1373c <__assert_fail@plt+0x218c>
   136fc:	mov	r0, #1
   13700:	str	r0, [r4]
   13704:	ldr	r0, [r5, #20]
   13708:	add	r1, r0, #4
   1370c:	str	r1, [r5, #20]
   13710:	ldr	r6, [r0]
   13714:	mov	r0, r6
   13718:	pop	{r4, r5, r6, sl, fp, pc}
   1371c:	ldr	r0, [r5]
   13720:	bl	1146c <feof@plt>
   13724:	cmp	r0, #0
   13728:	mov	r1, #2
   1372c:	mov	r0, r6
   13730:	movweq	r1, #4
   13734:	str	r1, [r4]
   13738:	pop	{r4, r5, r6, sl, fp, pc}
   1373c:	mov	r0, #2
   13740:	mov	r6, #0
   13744:	str	r0, [r4]
   13748:	mov	r0, r6
   1374c:	pop	{r4, r5, r6, sl, fp, pc}
   13750:	ldr	r1, [r0]
   13754:	cmp	r1, #0
   13758:	ldrne	r0, [r0, #4]
   1375c:	bxne	lr
   13760:	ldr	r1, [r0, #16]
   13764:	ldr	r0, [r0, #20]
   13768:	sub	r0, r0, r1
   1376c:	asr	r0, r0, #2
   13770:	bx	lr
   13774:	push	{r4, sl, fp, lr}
   13778:	add	fp, sp, #8
   1377c:	mov	r4, r0
   13780:	ldr	r0, [r0]
   13784:	cmp	r0, #0
   13788:	beq	13794 <__assert_fail@plt+0x21e4>
   1378c:	ldr	r0, [r4, #8]
   13790:	bl	139e0 <__assert_fail@plt+0x2430>
   13794:	mov	r0, r4
   13798:	pop	{r4, sl, fp, lr}
   1379c:	b	139e0 <__assert_fail@plt+0x2430>
   137a0:	movw	r1, #37348	; 0x91e4
   137a4:	movt	r1, #2
   137a8:	str	r0, [r1]
   137ac:	bx	lr
   137b0:	movw	r1, #37352	; 0x91e8
   137b4:	movt	r1, #2
   137b8:	strb	r0, [r1]
   137bc:	bx	lr
   137c0:	push	{r4, r5, r6, sl, fp, lr}
   137c4:	add	fp, sp, #16
   137c8:	sub	sp, sp, #8
   137cc:	movw	r0, #37268	; 0x9194
   137d0:	movt	r0, #2
   137d4:	ldr	r0, [r0]
   137d8:	bl	16bc4 <__assert_fail@plt+0x5614>
   137dc:	cmp	r0, #0
   137e0:	beq	13808 <__assert_fail@plt+0x2258>
   137e4:	movw	r0, #37352	; 0x91e8
   137e8:	movt	r0, #2
   137ec:	ldrb	r0, [r0]
   137f0:	cmp	r0, #0
   137f4:	beq	13828 <__assert_fail@plt+0x2278>
   137f8:	bl	114a8 <__errno_location@plt>
   137fc:	ldr	r0, [r0]
   13800:	cmp	r0, #32
   13804:	bne	13828 <__assert_fail@plt+0x2278>
   13808:	movw	r0, #37256	; 0x9188
   1380c:	movt	r0, #2
   13810:	ldr	r0, [r0]
   13814:	bl	16bc4 <__assert_fail@plt+0x5614>
   13818:	cmp	r0, #0
   1381c:	subeq	sp, fp, #16
   13820:	popeq	{r4, r5, r6, sl, fp, pc}
   13824:	b	13898 <__assert_fail@plt+0x22e8>
   13828:	movw	r1, #32676	; 0x7fa4
   1382c:	mov	r0, #0
   13830:	mov	r2, #5
   13834:	movt	r1, #1
   13838:	bl	1134c <dcgettext@plt>
   1383c:	mov	r4, r0
   13840:	movw	r0, #37348	; 0x91e4
   13844:	movt	r0, #2
   13848:	ldr	r6, [r0]
   1384c:	bl	114a8 <__errno_location@plt>
   13850:	ldr	r5, [r0]
   13854:	cmp	r6, #0
   13858:	bne	13874 <__assert_fail@plt+0x22c4>
   1385c:	movw	r2, #32692	; 0x7fb4
   13860:	mov	r0, #0
   13864:	mov	r1, r5
   13868:	mov	r3, r4
   1386c:	movt	r2, #1
   13870:	b	13894 <__assert_fail@plt+0x22e4>
   13874:	mov	r0, r6
   13878:	bl	1563c <__assert_fail@plt+0x408c>
   1387c:	movw	r2, #32688	; 0x7fb0
   13880:	mov	r3, r0
   13884:	str	r4, [sp]
   13888:	mov	r0, #0
   1388c:	mov	r1, r5
   13890:	movt	r2, #1
   13894:	bl	113e8 <error@plt>
   13898:	movw	r0, #37164	; 0x912c
   1389c:	movt	r0, #2
   138a0:	ldr	r0, [r0]
   138a4:	bl	1131c <_exit@plt>
   138a8:	b	112c8 <posix_fadvise64@plt>
   138ac:	cmp	r0, #0
   138b0:	bxeq	lr
   138b4:	push	{r4, sl, fp, lr}
   138b8:	add	fp, sp, #8
   138bc:	sub	sp, sp, #16
   138c0:	mov	r4, r1
   138c4:	bl	114fc <fileno@plt>
   138c8:	mov	r1, #0
   138cc:	mov	r2, #0
   138d0:	mov	r3, #0
   138d4:	str	r1, [sp]
   138d8:	stmib	sp, {r1, r4}
   138dc:	bl	112c8 <posix_fadvise64@plt>
   138e0:	sub	sp, fp, #8
   138e4:	pop	{r4, sl, fp, pc}
   138e8:	push	{r4, r5, r6, sl, fp, lr}
   138ec:	add	fp, sp, #16
   138f0:	sub	sp, sp, #8
   138f4:	mov	r4, r0
   138f8:	bl	114fc <fileno@plt>
   138fc:	cmn	r0, #1
   13900:	ble	13974 <__assert_fail@plt+0x23c4>
   13904:	mov	r0, r4
   13908:	bl	11430 <__freading@plt>
   1390c:	cmp	r0, #0
   13910:	beq	1393c <__assert_fail@plt+0x238c>
   13914:	mov	r0, r4
   13918:	bl	114fc <fileno@plt>
   1391c:	mov	r1, #1
   13920:	mov	r2, #0
   13924:	mov	r3, #0
   13928:	str	r1, [sp]
   1392c:	bl	113b8 <lseek64@plt>
   13930:	and	r0, r0, r1
   13934:	cmn	r0, #1
   13938:	beq	13974 <__assert_fail@plt+0x23c4>
   1393c:	mov	r0, r4
   13940:	bl	13984 <__assert_fail@plt+0x23d4>
   13944:	cmp	r0, #0
   13948:	beq	13974 <__assert_fail@plt+0x23c4>
   1394c:	bl	114a8 <__errno_location@plt>
   13950:	ldr	r6, [r0]
   13954:	mov	r5, r0
   13958:	mov	r0, r4
   1395c:	bl	11514 <fclose@plt>
   13960:	cmp	r6, #0
   13964:	strne	r6, [r5]
   13968:	mvnne	r0, #0
   1396c:	sub	sp, fp, #16
   13970:	pop	{r4, r5, r6, sl, fp, pc}
   13974:	mov	r0, r4
   13978:	sub	sp, fp, #16
   1397c:	pop	{r4, r5, r6, sl, fp, lr}
   13980:	b	11514 <fclose@plt>
   13984:	push	{r4, sl, fp, lr}
   13988:	add	fp, sp, #8
   1398c:	sub	sp, sp, #8
   13990:	mov	r4, r0
   13994:	cmp	r0, #0
   13998:	beq	139b4 <__assert_fail@plt+0x2404>
   1399c:	mov	r0, r4
   139a0:	bl	11430 <__freading@plt>
   139a4:	cmp	r0, #0
   139a8:	ldrbne	r0, [r4, #1]
   139ac:	tstne	r0, #1
   139b0:	bne	139c4 <__assert_fail@plt+0x2414>
   139b4:	mov	r0, r4
   139b8:	sub	sp, fp, #8
   139bc:	pop	{r4, sl, fp, lr}
   139c0:	b	112e0 <fflush@plt>
   139c4:	mov	r0, #1
   139c8:	mov	r2, #0
   139cc:	mov	r3, #0
   139d0:	str	r0, [sp]
   139d4:	mov	r0, r4
   139d8:	bl	13a08 <__assert_fail@plt+0x2458>
   139dc:	b	139b4 <__assert_fail@plt+0x2404>
   139e0:	push	{r4, r5, r6, sl, fp, lr}
   139e4:	add	fp, sp, #16
   139e8:	mov	r4, r0
   139ec:	bl	114a8 <__errno_location@plt>
   139f0:	ldr	r6, [r0]
   139f4:	mov	r5, r0
   139f8:	mov	r0, r4
   139fc:	bl	11304 <free@plt>
   13a00:	str	r6, [r5]
   13a04:	pop	{r4, r5, r6, sl, fp, pc}
   13a08:	push	{r4, r5, r6, r7, fp, lr}
   13a0c:	add	fp, sp, #16
   13a10:	sub	sp, sp, #8
   13a14:	mov	r4, r0
   13a18:	ldr	r0, [r0, #4]
   13a1c:	mov	r5, r3
   13a20:	mov	r6, r2
   13a24:	ldr	r1, [r4, #8]
   13a28:	cmp	r1, r0
   13a2c:	bne	13a48 <__assert_fail@plt+0x2498>
   13a30:	ldrd	r0, [r4, #16]
   13a34:	cmp	r1, r0
   13a38:	bne	13a48 <__assert_fail@plt+0x2498>
   13a3c:	ldr	r0, [r4, #36]	; 0x24
   13a40:	cmp	r0, #0
   13a44:	beq	13a60 <__assert_fail@plt+0x24b0>
   13a48:	mov	r0, r4
   13a4c:	mov	r2, r6
   13a50:	mov	r3, r5
   13a54:	sub	sp, fp, #16
   13a58:	pop	{r4, r5, r6, r7, fp, lr}
   13a5c:	b	11520 <fseeko64@plt>
   13a60:	ldr	r7, [fp, #8]
   13a64:	mov	r0, r4
   13a68:	bl	114fc <fileno@plt>
   13a6c:	mov	r2, r6
   13a70:	mov	r3, r5
   13a74:	str	r7, [sp]
   13a78:	bl	113b8 <lseek64@plt>
   13a7c:	and	r2, r0, r1
   13a80:	cmn	r2, #1
   13a84:	mvneq	r0, #0
   13a88:	subeq	sp, fp, #16
   13a8c:	popeq	{r4, r5, r6, r7, fp, pc}
   13a90:	strd	r0, [r4, #80]	; 0x50
   13a94:	ldr	r0, [r4]
   13a98:	bic	r0, r0, #16
   13a9c:	str	r0, [r4]
   13aa0:	mov	r0, #0
   13aa4:	sub	sp, fp, #16
   13aa8:	pop	{r4, r5, r6, r7, fp, pc}
   13aac:	push	{r4, r5, r6, sl, fp, lr}
   13ab0:	add	fp, sp, #16
   13ab4:	mov	r5, r0
   13ab8:	mov	r0, #0
   13abc:	mov	r4, r1
   13ac0:	add	r6, r2, #19
   13ac4:	strb	r0, [r2, #20]
   13ac8:	mov	r0, r5
   13acc:	mov	r1, r4
   13ad0:	mov	r2, #10
   13ad4:	mov	r3, #0
   13ad8:	bl	17574 <_obstack_memory_used@@Base+0x518>
   13adc:	add	r2, r0, r0, lsl #2
   13ae0:	sub	r2, r5, r2, lsl #1
   13ae4:	orr	r2, r2, #48	; 0x30
   13ae8:	strb	r2, [r6], #-1
   13aec:	rsbs	r2, r5, #9
   13af0:	mov	r5, r0
   13af4:	rscs	r2, r4, #0
   13af8:	mov	r4, r1
   13afc:	bcc	13ac8 <__assert_fail@plt+0x2518>
   13b00:	add	r0, r6, #1
   13b04:	pop	{r4, r5, r6, sl, fp, pc}
   13b08:	push	{r4, sl, fp, lr}
   13b0c:	add	fp, sp, #8
   13b10:	mov	r4, r0
   13b14:	bl	112ec <wcwidth@plt>
   13b18:	cmn	r0, #1
   13b1c:	popgt	{r4, sl, fp, pc}
   13b20:	mov	r0, r4
   13b24:	bl	1137c <iswcntrl@plt>
   13b28:	clz	r0, r0
   13b2c:	lsr	r0, r0, #5
   13b30:	pop	{r4, sl, fp, pc}
   13b34:	push	{r4, r5, r6, sl, fp, lr}
   13b38:	add	fp, sp, #16
   13b3c:	mov	r4, r0
   13b40:	mov	r0, r1
   13b44:	mov	r5, r1
   13b48:	ldr	r1, [r0], #16
   13b4c:	cmp	r1, r0
   13b50:	beq	13b5c <__assert_fail@plt+0x25ac>
   13b54:	mov	r6, r1
   13b58:	b	13b6c <__assert_fail@plt+0x25bc>
   13b5c:	ldr	r2, [r5, #4]
   13b60:	add	r6, r4, #16
   13b64:	mov	r0, r6
   13b68:	bl	11328 <memcpy@plt>
   13b6c:	str	r6, [r4]
   13b70:	ldr	r0, [r5, #4]
   13b74:	str	r0, [r4, #4]
   13b78:	ldrb	r0, [r5, #8]
   13b7c:	strb	r0, [r4, #8]
   13b80:	cmp	r0, #0
   13b84:	ldrne	r0, [r5, #12]
   13b88:	strne	r0, [r4, #12]
   13b8c:	pop	{r4, r5, r6, sl, fp, pc}
   13b90:	movw	r2, #32696	; 0x7fb8
   13b94:	ubfx	r1, r0, #5, #3
   13b98:	and	r0, r0, #31
   13b9c:	movt	r2, #1
   13ba0:	ldr	r1, [r2, r1, lsl #2]
   13ba4:	mov	r2, #1
   13ba8:	and	r0, r1, r2, lsl r0
   13bac:	cmp	r0, #0
   13bb0:	movwne	r0, #1
   13bb4:	bx	lr
   13bb8:	push	{r4, r5, r6, r7, fp, lr}
   13bbc:	add	fp, sp, #16
   13bc0:	sub	sp, sp, #8
   13bc4:	add	r5, sp, #4
   13bc8:	cmp	r0, #0
   13bcc:	mov	r7, r2
   13bd0:	mov	r4, r1
   13bd4:	movne	r5, r0
   13bd8:	mov	r0, r5
   13bdc:	bl	113dc <mbrtowc@plt>
   13be0:	mov	r6, r0
   13be4:	cmp	r7, #0
   13be8:	beq	13c0c <__assert_fail@plt+0x265c>
   13bec:	cmn	r6, #2
   13bf0:	bcc	13c0c <__assert_fail@plt+0x265c>
   13bf4:	mov	r0, #0
   13bf8:	bl	16c48 <__assert_fail@plt+0x5698>
   13bfc:	cmp	r0, #0
   13c00:	ldrbeq	r0, [r4]
   13c04:	moveq	r6, #1
   13c08:	streq	r0, [r5]
   13c0c:	mov	r0, r6
   13c10:	sub	sp, fp, #16
   13c14:	pop	{r4, r5, r6, r7, fp, pc}
   13c18:	push	{r4, sl, fp, lr}
   13c1c:	add	fp, sp, #8
   13c20:	sub	sp, sp, #64	; 0x40
   13c24:	mov	r0, #85	; 0x55
   13c28:	bl	11358 <sysconf@plt>
   13c2c:	mov	r4, r0
   13c30:	mov	r0, #30
   13c34:	bl	11358 <sysconf@plt>
   13c38:	orr	r1, r0, r4
   13c3c:	cmn	r1, #1
   13c40:	ble	13c58 <__assert_fail@plt+0x26a8>
   13c44:	vmov	s0, r0
   13c48:	vcvt.f64.s32	d16, s0
   13c4c:	vmov	s0, r4
   13c50:	vcvt.f64.s32	d17, s0
   13c54:	b	13c80 <__assert_fail@plt+0x26d0>
   13c58:	mov	r0, sp
   13c5c:	bl	1140c <sysinfo@plt>
   13c60:	cmp	r0, #0
   13c64:	vldrne	d0, [pc, #36]	; 13c90 <__assert_fail@plt+0x26e0>
   13c68:	subne	sp, fp, #8
   13c6c:	popne	{r4, sl, fp, pc}
   13c70:	vldr	s0, [sp, #16]
   13c74:	vldr	s2, [sp, #52]	; 0x34
   13c78:	vcvt.f64.u32	d16, s2
   13c7c:	vcvt.f64.u32	d17, s0
   13c80:	vmul.f64	d0, d17, d16
   13c84:	sub	sp, fp, #8
   13c88:	pop	{r4, sl, fp, pc}
   13c8c:	nop	{0}
   13c90:	andeq	r0, r0, r0
   13c94:	orrsmi	r0, r0, r0
   13c98:	push	{r4, sl, fp, lr}
   13c9c:	add	fp, sp, #8
   13ca0:	sub	sp, sp, #64	; 0x40
   13ca4:	mov	r0, #86	; 0x56
   13ca8:	bl	11358 <sysconf@plt>
   13cac:	mov	r4, r0
   13cb0:	mov	r0, #30
   13cb4:	bl	11358 <sysconf@plt>
   13cb8:	orr	r1, r0, r4
   13cbc:	cmp	r1, #0
   13cc0:	blt	13ce0 <__assert_fail@plt+0x2730>
   13cc4:	vmov	s0, r0
   13cc8:	vcvt.f64.s32	d16, s0
   13ccc:	vmov	s0, r4
   13cd0:	vcvt.f64.s32	d17, s0
   13cd4:	vmul.f64	d0, d17, d16
   13cd8:	sub	sp, fp, #8
   13cdc:	pop	{r4, sl, fp, pc}
   13ce0:	mov	r0, sp
   13ce4:	bl	1140c <sysinfo@plt>
   13ce8:	cmp	r0, #0
   13cec:	beq	13d28 <__assert_fail@plt+0x2778>
   13cf0:	mov	r0, #85	; 0x55
   13cf4:	bl	11358 <sysconf@plt>
   13cf8:	mov	r4, r0
   13cfc:	mov	r0, #30
   13d00:	bl	11358 <sysconf@plt>
   13d04:	orr	r1, r0, r4
   13d08:	cmn	r1, #1
   13d0c:	ble	13d50 <__assert_fail@plt+0x27a0>
   13d10:	vmov	s0, r0
   13d14:	vcvt.f64.s32	d16, s0
   13d18:	vmov	s0, r4
   13d1c:	vcvt.f64.s32	d17, s0
   13d20:	vmul.f64	d16, d17, d16
   13d24:	b	13d64 <__assert_fail@plt+0x27b4>
   13d28:	vldr	s0, [sp, #20]
   13d2c:	vldr	s2, [sp, #28]
   13d30:	vldr	s4, [sp, #52]	; 0x34
   13d34:	vcvt.f64.u32	d16, s2
   13d38:	vcvt.f64.u32	d17, s0
   13d3c:	vcvt.f64.u32	d18, s4
   13d40:	vadd.f64	d16, d17, d16
   13d44:	vmul.f64	d0, d16, d18
   13d48:	sub	sp, fp, #8
   13d4c:	pop	{r4, sl, fp, pc}
   13d50:	mov	r0, sp
   13d54:	bl	1140c <sysinfo@plt>
   13d58:	cmp	r0, #0
   13d5c:	beq	13d74 <__assert_fail@plt+0x27c4>
   13d60:	vldr	d16, [pc, #32]	; 13d88 <__assert_fail@plt+0x27d8>
   13d64:	vmov.f64	d17, #80	; 0x3e800000  0.250
   13d68:	vmul.f64	d0, d16, d17
   13d6c:	sub	sp, fp, #8
   13d70:	pop	{r4, sl, fp, pc}
   13d74:	vldr	s0, [sp, #16]
   13d78:	vldr	s2, [sp, #52]	; 0x34
   13d7c:	vcvt.f64.u32	d16, s2
   13d80:	vcvt.f64.u32	d17, s0
   13d84:	b	13d20 <__assert_fail@plt+0x2770>
   13d88:	andeq	r0, r0, r0
   13d8c:	orrsmi	r0, r0, r0
   13d90:	push	{r4, r5, fp, lr}
   13d94:	add	fp, sp, #8
   13d98:	cmp	r0, #0
   13d9c:	beq	13e30 <__assert_fail@plt+0x2880>
   13da0:	mov	r1, #47	; 0x2f
   13da4:	mov	r4, r0
   13da8:	bl	11544 <strrchr@plt>
   13dac:	cmp	r0, #0
   13db0:	mov	r5, r4
   13db4:	addne	r5, r0, #1
   13db8:	sub	r0, r5, r4
   13dbc:	cmp	r0, #7
   13dc0:	blt	13e14 <__assert_fail@plt+0x2864>
   13dc4:	movw	r1, #32784	; 0x8010
   13dc8:	sub	r0, r5, #7
   13dcc:	mov	r2, #7
   13dd0:	movt	r1, #1
   13dd4:	bl	1158c <strncmp@plt>
   13dd8:	cmp	r0, #0
   13ddc:	bne	13e14 <__assert_fail@plt+0x2864>
   13de0:	movw	r1, #32792	; 0x8018
   13de4:	mov	r0, r5
   13de8:	mov	r2, #3
   13dec:	movt	r1, #1
   13df0:	bl	1158c <strncmp@plt>
   13df4:	cmp	r0, #0
   13df8:	beq	13e04 <__assert_fail@plt+0x2854>
   13dfc:	mov	r4, r5
   13e00:	b	13e14 <__assert_fail@plt+0x2864>
   13e04:	movw	r0, #37240	; 0x9178
   13e08:	add	r4, r5, #3
   13e0c:	movt	r0, #2
   13e10:	str	r4, [r0]
   13e14:	movw	r0, #37244	; 0x917c
   13e18:	movt	r0, #2
   13e1c:	str	r4, [r0]
   13e20:	movw	r0, #37356	; 0x91ec
   13e24:	movt	r0, #2
   13e28:	str	r4, [r0]
   13e2c:	pop	{r4, r5, fp, pc}
   13e30:	movw	r0, #37256	; 0x9188
   13e34:	mov	r1, #55	; 0x37
   13e38:	mov	r2, #1
   13e3c:	movt	r0, #2
   13e40:	ldr	r3, [r0]
   13e44:	movw	r0, #32728	; 0x7fd8
   13e48:	movt	r0, #1
   13e4c:	bl	113ac <fwrite@plt>
   13e50:	bl	11598 <abort@plt>
   13e54:	push	{r4, r5, r6, sl, fp, lr}
   13e58:	add	fp, sp, #16
   13e5c:	mov	r4, r0
   13e60:	movw	r0, #37360	; 0x91f0
   13e64:	movt	r0, #2
   13e68:	cmp	r4, #0
   13e6c:	moveq	r4, r0
   13e70:	bl	114a8 <__errno_location@plt>
   13e74:	ldr	r6, [r0]
   13e78:	mov	r5, r0
   13e7c:	mov	r0, r4
   13e80:	mov	r1, #48	; 0x30
   13e84:	bl	169a8 <__assert_fail@plt+0x53f8>
   13e88:	str	r6, [r5]
   13e8c:	pop	{r4, r5, r6, sl, fp, pc}
   13e90:	movw	r1, #37360	; 0x91f0
   13e94:	cmp	r0, #0
   13e98:	movt	r1, #2
   13e9c:	movne	r1, r0
   13ea0:	ldr	r0, [r1]
   13ea4:	bx	lr
   13ea8:	movw	r2, #37360	; 0x91f0
   13eac:	cmp	r0, #0
   13eb0:	movt	r2, #2
   13eb4:	movne	r2, r0
   13eb8:	str	r1, [r2]
   13ebc:	bx	lr
   13ec0:	movw	r3, #37360	; 0x91f0
   13ec4:	cmp	r0, #0
   13ec8:	movt	r3, #2
   13ecc:	movne	r3, r0
   13ed0:	ubfx	r0, r1, #5, #3
   13ed4:	and	r1, r1, #31
   13ed8:	add	r0, r3, r0, lsl #2
   13edc:	ldr	r3, [r0, #8]
   13ee0:	eor	r2, r2, r3, lsr r1
   13ee4:	and	r2, r2, #1
   13ee8:	eor	r2, r3, r2, lsl r1
   13eec:	str	r2, [r0, #8]
   13ef0:	mov	r0, #1
   13ef4:	and	r0, r0, r3, lsr r1
   13ef8:	bx	lr
   13efc:	movw	r2, #37360	; 0x91f0
   13f00:	cmp	r0, #0
   13f04:	movt	r2, #2
   13f08:	movne	r2, r0
   13f0c:	ldr	r0, [r2, #4]
   13f10:	str	r1, [r2, #4]
   13f14:	bx	lr
   13f18:	movw	r3, #37360	; 0x91f0
   13f1c:	cmp	r0, #0
   13f20:	movt	r3, #2
   13f24:	movne	r3, r0
   13f28:	cmp	r1, #0
   13f2c:	mov	r0, #10
   13f30:	cmpne	r2, #0
   13f34:	str	r0, [r3]
   13f38:	bne	13f48 <__assert_fail@plt+0x2998>
   13f3c:	push	{fp, lr}
   13f40:	mov	fp, sp
   13f44:	bl	11598 <abort@plt>
   13f48:	str	r1, [r3, #40]	; 0x28
   13f4c:	str	r2, [r3, #44]	; 0x2c
   13f50:	bx	lr
   13f54:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13f58:	add	fp, sp, #28
   13f5c:	sub	sp, sp, #20
   13f60:	mov	r7, r0
   13f64:	ldr	r0, [fp, #8]
   13f68:	movw	r5, #37360	; 0x91f0
   13f6c:	mov	r8, r3
   13f70:	mov	r9, r2
   13f74:	mov	sl, r1
   13f78:	movt	r5, #2
   13f7c:	cmp	r0, #0
   13f80:	movne	r5, r0
   13f84:	bl	114a8 <__errno_location@plt>
   13f88:	mov	r4, r0
   13f8c:	ldm	r5, {r0, r1}
   13f90:	ldr	r2, [r5, #40]	; 0x28
   13f94:	ldr	r3, [r5, #44]	; 0x2c
   13f98:	add	r5, r5, #8
   13f9c:	ldr	r6, [r4]
   13fa0:	stm	sp, {r0, r1, r5}
   13fa4:	str	r2, [sp, #12]
   13fa8:	str	r3, [sp, #16]
   13fac:	mov	r0, r7
   13fb0:	mov	r1, sl
   13fb4:	mov	r2, r9
   13fb8:	mov	r3, r8
   13fbc:	bl	13fcc <__assert_fail@plt+0x2a1c>
   13fc0:	str	r6, [r4]
   13fc4:	sub	sp, fp, #28
   13fc8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13fcc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13fd0:	add	fp, sp, #28
   13fd4:	sub	sp, sp, #156	; 0x9c
   13fd8:	str	r0, [sp, #80]	; 0x50
   13fdc:	ldr	r0, [fp, #12]
   13fe0:	mov	r6, r1
   13fe4:	mov	r9, r3
   13fe8:	str	r2, [fp, #-84]	; 0xffffffac
   13fec:	and	r1, r0, #4
   13ff0:	str	r1, [sp, #32]
   13ff4:	and	r1, r0, #1
   13ff8:	str	r1, [sp, #36]	; 0x24
   13ffc:	ubfx	r4, r0, #1, #1
   14000:	bl	113c4 <__ctype_get_mb_cur_max@plt>
   14004:	str	r0, [sp, #40]	; 0x28
   14008:	ldr	r0, [fp, #24]
   1400c:	ldr	r7, [fp, #8]
   14010:	mov	r1, #0
   14014:	mov	r5, #1
   14018:	str	r1, [fp, #-56]	; 0xffffffc8
   1401c:	mov	r1, #0
   14020:	str	r1, [sp, #60]	; 0x3c
   14024:	str	r0, [sp, #76]	; 0x4c
   14028:	ldr	r0, [fp, #20]
   1402c:	str	r0, [sp, #72]	; 0x48
   14030:	mov	r0, #0
   14034:	str	r0, [sp, #56]	; 0x38
   14038:	mov	r0, #0
   1403c:	str	r0, [sp, #92]	; 0x5c
   14040:	mov	r0, #0
   14044:	str	r0, [fp, #-76]	; 0xffffffb4
   14048:	mov	r0, #0
   1404c:	cmp	r7, #10
   14050:	bhi	14fd0 <__assert_fail@plt+0x3a20>
   14054:	add	r1, pc, #28
   14058:	mov	sl, r6
   1405c:	ldr	r6, [sp, #80]	; 0x50
   14060:	ldr	ip, [fp, #-84]	; 0xffffffac
   14064:	mov	r8, #0
   14068:	mov	r2, #1
   1406c:	mov	r3, #0
   14070:	mov	lr, r9
   14074:	ldr	pc, [r1, r7, lsl #2]
   14078:	andeq	r4, r1, ip, asr r1
   1407c:	andeq	r4, r1, r8, lsl #3
   14080:	andeq	r4, r1, ip, asr #2
   14084:	andeq	r4, r1, r4, asr #2
   14088:	andeq	r4, r1, ip, ror r1
   1408c:	ldrdeq	r4, [r1], -r0
   14090:	andeq	r4, r1, ip, ror #2
   14094:	andeq	r4, r1, ip, lsr #4
   14098:	andeq	r4, r1, r4, lsr #1
   1409c:	andeq	r4, r1, r4, lsr #1
   140a0:	andeq	r4, r1, ip, asr #1
   140a4:	movw	r0, #32872	; 0x8068
   140a8:	mov	r1, r7
   140ac:	movt	r0, #1
   140b0:	bl	159dc <__assert_fail@plt+0x442c>
   140b4:	str	r0, [sp, #72]	; 0x48
   140b8:	movw	r0, #32874	; 0x806a
   140bc:	mov	r1, r7
   140c0:	movt	r0, #1
   140c4:	bl	159dc <__assert_fail@plt+0x442c>
   140c8:	str	r0, [sp, #76]	; 0x4c
   140cc:	str	r5, [fp, #-48]	; 0xffffffd0
   140d0:	mov	r8, #0
   140d4:	mov	r5, r7
   140d8:	tst	r4, #1
   140dc:	bne	14114 <__assert_fail@plt+0x2b64>
   140e0:	ldr	r0, [sp, #72]	; 0x48
   140e4:	ldrb	r0, [r0]
   140e8:	cmp	r0, #0
   140ec:	beq	14114 <__assert_fail@plt+0x2b64>
   140f0:	ldr	r1, [sp, #72]	; 0x48
   140f4:	mov	r8, #0
   140f8:	add	r1, r1, #1
   140fc:	cmp	r8, sl
   14100:	strbcc	r0, [r6, r8]
   14104:	ldrb	r0, [r1, r8]
   14108:	add	r8, r8, #1
   1410c:	cmp	r0, #0
   14110:	bne	140fc <__assert_fail@plt+0x2b4c>
   14114:	ldr	r7, [sp, #76]	; 0x4c
   14118:	mov	r0, r7
   1411c:	bl	11484 <strlen@plt>
   14120:	str	r7, [sp, #92]	; 0x5c
   14124:	mov	r7, r5
   14128:	ldr	ip, [fp, #-84]	; 0xffffffac
   1412c:	ldr	r5, [fp, #-48]	; 0xffffffd0
   14130:	str	r0, [fp, #-76]	; 0xffffffb4
   14134:	mov	r2, #1
   14138:	mov	r3, r4
   1413c:	mov	lr, r9
   14140:	b	1422c <__assert_fail@plt+0x2c7c>
   14144:	mov	r0, #1
   14148:	b	14188 <__assert_fail@plt+0x2bd8>
   1414c:	tst	r4, #1
   14150:	bne	14188 <__assert_fail@plt+0x2bd8>
   14154:	mov	r2, r0
   14158:	b	141b0 <__assert_fail@plt+0x2c00>
   1415c:	mov	r7, #0
   14160:	mov	r8, #0
   14164:	mov	r2, r0
   14168:	b	14228 <__assert_fail@plt+0x2c78>
   1416c:	mov	r0, #1
   14170:	mov	r8, #0
   14174:	mov	r7, #5
   14178:	b	141e4 <__assert_fail@plt+0x2c34>
   1417c:	mov	r2, #1
   14180:	tst	r4, #1
   14184:	beq	141b0 <__assert_fail@plt+0x2c00>
   14188:	mov	r1, #1
   1418c:	mov	r8, #0
   14190:	mov	r7, #2
   14194:	mov	r2, r0
   14198:	mov	r3, #1
   1419c:	str	r1, [fp, #-76]	; 0xffffffb4
   141a0:	movw	r1, #32874	; 0x806a
   141a4:	movt	r1, #1
   141a8:	str	r1, [sp, #92]	; 0x5c
   141ac:	b	1422c <__assert_fail@plt+0x2c7c>
   141b0:	cmp	sl, #0
   141b4:	mov	r8, #1
   141b8:	mov	r7, #2
   141bc:	movne	r0, #39	; 0x27
   141c0:	strbne	r0, [r6]
   141c4:	movw	r0, #32874	; 0x806a
   141c8:	movt	r0, #1
   141cc:	b	1421c <__assert_fail@plt+0x2c6c>
   141d0:	mov	r7, #5
   141d4:	tst	r4, #1
   141d8:	beq	14200 <__assert_fail@plt+0x2c50>
   141dc:	mov	r0, #1
   141e0:	mov	r8, #0
   141e4:	str	r0, [fp, #-76]	; 0xffffffb4
   141e8:	movw	r0, #31855	; 0x7c6f
   141ec:	mov	r2, #1
   141f0:	mov	r3, #1
   141f4:	movt	r0, #1
   141f8:	str	r0, [sp, #92]	; 0x5c
   141fc:	b	1422c <__assert_fail@plt+0x2c7c>
   14200:	cmp	sl, #0
   14204:	mov	r8, #1
   14208:	mov	r2, #1
   1420c:	movne	r0, #34	; 0x22
   14210:	strbne	r0, [r6]
   14214:	movw	r0, #31855	; 0x7c6f
   14218:	movt	r0, #1
   1421c:	str	r0, [sp, #92]	; 0x5c
   14220:	mov	r0, #1
   14224:	str	r0, [fp, #-76]	; 0xffffffb4
   14228:	mov	r3, #0
   1422c:	ldr	r0, [fp, #16]
   14230:	str	r3, [fp, #-72]	; 0xffffffb8
   14234:	str	r7, [fp, #-64]	; 0xffffffc0
   14238:	str	r2, [sp, #84]	; 0x54
   1423c:	cmp	r0, #0
   14240:	movwne	r0, #1
   14244:	and	r0, r0, r3
   14248:	str	r0, [fp, #-88]	; 0xffffffa8
   1424c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14250:	cmp	r0, #0
   14254:	movwne	r0, #1
   14258:	subs	r4, r7, #2
   1425c:	mov	r7, #0
   14260:	and	r1, r0, r3
   14264:	str	r4, [fp, #-80]	; 0xffffffb0
   14268:	and	r1, r2, r1
   1426c:	str	r1, [sp, #48]	; 0x30
   14270:	clz	r1, r4
   14274:	lsr	r1, r1, #5
   14278:	and	r1, r1, r3
   1427c:	eor	r3, r3, #1
   14280:	str	r1, [sp, #64]	; 0x40
   14284:	mov	r1, r4
   14288:	str	r3, [sp, #88]	; 0x58
   1428c:	movwne	r1, #1
   14290:	orr	r3, r1, r3
   14294:	and	r1, r1, r2
   14298:	and	r0, r0, r1
   1429c:	str	r3, [sp, #68]	; 0x44
   142a0:	str	r1, [fp, #-68]	; 0xffffffbc
   142a4:	str	r0, [fp, #-60]	; 0xffffffc4
   142a8:	eor	r0, r2, #1
   142ac:	str	r0, [sp, #52]	; 0x34
   142b0:	cmn	lr, #1
   142b4:	beq	142c4 <__assert_fail@plt+0x2d14>
   142b8:	cmp	r7, lr
   142bc:	bne	142d0 <__assert_fail@plt+0x2d20>
   142c0:	b	14df8 <__assert_fail@plt+0x3848>
   142c4:	ldrb	r0, [ip, r7]
   142c8:	cmp	r0, #0
   142cc:	beq	14e00 <__assert_fail@plt+0x3850>
   142d0:	ldr	r0, [fp, #-60]	; 0xffffffc4
   142d4:	mov	r9, #0
   142d8:	str	r5, [fp, #-48]	; 0xffffffd0
   142dc:	cmp	r0, #0
   142e0:	beq	14314 <__assert_fail@plt+0x2d64>
   142e4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   142e8:	add	r4, r7, r0
   142ec:	cmp	r0, #2
   142f0:	bcc	1430c <__assert_fail@plt+0x2d5c>
   142f4:	cmn	lr, #1
   142f8:	bne	1430c <__assert_fail@plt+0x2d5c>
   142fc:	mov	r0, ip
   14300:	bl	11484 <strlen@plt>
   14304:	ldr	ip, [fp, #-84]	; 0xffffffac
   14308:	mov	lr, r0
   1430c:	cmp	r4, lr
   14310:	bls	1431c <__assert_fail@plt+0x2d6c>
   14314:	mov	r0, #0
   14318:	b	1435c <__assert_fail@plt+0x2dac>
   1431c:	ldr	r1, [sp, #92]	; 0x5c
   14320:	ldr	r2, [fp, #-76]	; 0xffffffb4
   14324:	add	r0, ip, r7
   14328:	mov	r4, lr
   1432c:	bl	11340 <memcmp@plt>
   14330:	ldr	r2, [sp, #88]	; 0x58
   14334:	cmp	r0, #0
   14338:	mov	r1, r0
   1433c:	movwne	r1, #1
   14340:	orr	r1, r1, r2
   14344:	tst	r1, #1
   14348:	beq	14e90 <__assert_fail@plt+0x38e0>
   1434c:	ldr	ip, [fp, #-84]	; 0xffffffac
   14350:	clz	r0, r0
   14354:	mov	lr, r4
   14358:	lsr	r0, r0, #5
   1435c:	str	r0, [fp, #-52]	; 0xffffffcc
   14360:	ldrb	r5, [ip, r7]
   14364:	cmp	r5, #126	; 0x7e
   14368:	bhi	14720 <__assert_fail@plt+0x3170>
   1436c:	add	r3, pc, #16
   14370:	mov	r4, #1
   14374:	mov	r2, #110	; 0x6e
   14378:	mov	r0, #97	; 0x61
   1437c:	mov	r1, #0
   14380:	ldr	pc, [r3, r5, lsl #2]
   14384:	andeq	r4, r1, ip, lsl r6
   14388:	andeq	r4, r1, r0, lsr #14
   1438c:	andeq	r4, r1, r0, lsr #14
   14390:	andeq	r4, r1, r0, lsr #14
   14394:	andeq	r4, r1, r0, lsr #14
   14398:	andeq	r4, r1, r0, lsr #14
   1439c:	andeq	r4, r1, r0, lsr #14
   143a0:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   143a4:	strdeq	r4, [r1], -ip
   143a8:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   143ac:	andeq	r4, r1, r8, lsl #12
   143b0:	andeq	r4, r1, r8, lsl #13
   143b4:	andeq	r4, r1, ip, ror #11
   143b8:	andeq	r4, r1, r4, lsl #12
   143bc:	andeq	r4, r1, r0, lsr #14
   143c0:	andeq	r4, r1, r0, lsr #14
   143c4:	andeq	r4, r1, r0, lsr #14
   143c8:	andeq	r4, r1, r0, lsr #14
   143cc:	andeq	r4, r1, r0, lsr #14
   143d0:	andeq	r4, r1, r0, lsr #14
   143d4:	andeq	r4, r1, r0, lsr #14
   143d8:	andeq	r4, r1, r0, lsr #14
   143dc:	andeq	r4, r1, r0, lsr #14
   143e0:	andeq	r4, r1, r0, lsr #14
   143e4:	andeq	r4, r1, r0, lsr #14
   143e8:	andeq	r4, r1, r0, lsr #14
   143ec:	andeq	r4, r1, r0, lsr #14
   143f0:	andeq	r4, r1, r0, lsr #14
   143f4:	andeq	r4, r1, r0, lsr #14
   143f8:	andeq	r4, r1, r0, lsr #14
   143fc:	andeq	r4, r1, r0, lsr #14
   14400:	andeq	r4, r1, r0, lsr #14
   14404:	andeq	r4, r1, ip, lsl #15
   14408:	muleq	r1, r0, r7
   1440c:	muleq	r1, r0, r7
   14410:	muleq	r1, r4, r5
   14414:	muleq	r1, r0, r7
   14418:	andeq	r4, r1, r0, lsl #11
   1441c:	muleq	r1, r0, r7
   14420:	muleq	r1, r0, r6
   14424:	muleq	r1, r0, r7
   14428:	muleq	r1, r0, r7
   1442c:	muleq	r1, r0, r7
   14430:	andeq	r4, r1, r0, lsl #11
   14434:	andeq	r4, r1, r0, lsl #11
   14438:	andeq	r4, r1, r0, lsl #11
   1443c:	andeq	r4, r1, r0, lsl #11
   14440:	andeq	r4, r1, r0, lsl #11
   14444:	andeq	r4, r1, r0, lsl #11
   14448:	andeq	r4, r1, r0, lsl #11
   1444c:	andeq	r4, r1, r0, lsl #11
   14450:	andeq	r4, r1, r0, lsl #11
   14454:	andeq	r4, r1, r0, lsl #11
   14458:	andeq	r4, r1, r0, lsl #11
   1445c:	andeq	r4, r1, r0, lsl #11
   14460:	andeq	r4, r1, r0, lsl #11
   14464:	andeq	r4, r1, r0, lsl #11
   14468:	andeq	r4, r1, r0, lsl #11
   1446c:	andeq	r4, r1, r0, lsl #11
   14470:	muleq	r1, r0, r7
   14474:	muleq	r1, r0, r7
   14478:	muleq	r1, r0, r7
   1447c:	muleq	r1, r0, r7
   14480:	andeq	r4, r1, ip, asr r6
   14484:	andeq	r4, r1, r0, lsr #14
   14488:	andeq	r4, r1, r0, lsl #11
   1448c:	andeq	r4, r1, r0, lsl #11
   14490:	andeq	r4, r1, r0, lsl #11
   14494:	andeq	r4, r1, r0, lsl #11
   14498:	andeq	r4, r1, r0, lsl #11
   1449c:	andeq	r4, r1, r0, lsl #11
   144a0:	andeq	r4, r1, r0, lsl #11
   144a4:	andeq	r4, r1, r0, lsl #11
   144a8:	andeq	r4, r1, r0, lsl #11
   144ac:	andeq	r4, r1, r0, lsl #11
   144b0:	andeq	r4, r1, r0, lsl #11
   144b4:	andeq	r4, r1, r0, lsl #11
   144b8:	andeq	r4, r1, r0, lsl #11
   144bc:	andeq	r4, r1, r0, lsl #11
   144c0:	andeq	r4, r1, r0, lsl #11
   144c4:	andeq	r4, r1, r0, lsl #11
   144c8:	andeq	r4, r1, r0, lsl #11
   144cc:	andeq	r4, r1, r0, lsl #11
   144d0:	andeq	r4, r1, r0, lsl #11
   144d4:	andeq	r4, r1, r0, lsl #11
   144d8:	andeq	r4, r1, r0, lsl #11
   144dc:	andeq	r4, r1, r0, lsl #11
   144e0:	andeq	r4, r1, r0, lsl #11
   144e4:	andeq	r4, r1, r0, lsl #11
   144e8:	andeq	r4, r1, r0, lsl #11
   144ec:	andeq	r4, r1, r0, lsl #11
   144f0:	muleq	r1, r0, r7
   144f4:	andeq	r4, r1, r8, asr #11
   144f8:	andeq	r4, r1, r0, lsl #11
   144fc:	muleq	r1, r0, r7
   14500:	andeq	r4, r1, r0, lsl #11
   14504:	muleq	r1, r0, r7
   14508:	andeq	r4, r1, r0, lsl #11
   1450c:	andeq	r4, r1, r0, lsl #11
   14510:	andeq	r4, r1, r0, lsl #11
   14514:	andeq	r4, r1, r0, lsl #11
   14518:	andeq	r4, r1, r0, lsl #11
   1451c:	andeq	r4, r1, r0, lsl #11
   14520:	andeq	r4, r1, r0, lsl #11
   14524:	andeq	r4, r1, r0, lsl #11
   14528:	andeq	r4, r1, r0, lsl #11
   1452c:	andeq	r4, r1, r0, lsl #11
   14530:	andeq	r4, r1, r0, lsl #11
   14534:	andeq	r4, r1, r0, lsl #11
   14538:	andeq	r4, r1, r0, lsl #11
   1453c:	andeq	r4, r1, r0, lsl #11
   14540:	andeq	r4, r1, r0, lsl #11
   14544:	andeq	r4, r1, r0, lsl #11
   14548:	andeq	r4, r1, r0, lsl #11
   1454c:	andeq	r4, r1, r0, lsl #11
   14550:	andeq	r4, r1, r0, lsl #11
   14554:	andeq	r4, r1, r0, lsl #11
   14558:	andeq	r4, r1, r0, lsl #11
   1455c:	andeq	r4, r1, r0, lsl #11
   14560:	andeq	r4, r1, r0, lsl #11
   14564:	andeq	r4, r1, r0, lsl #11
   14568:	andeq	r4, r1, r0, lsl #11
   1456c:	andeq	r4, r1, r0, lsl #11
   14570:	andeq	r4, r1, r8, lsr #11
   14574:	muleq	r1, r0, r7
   14578:	andeq	r4, r1, r8, lsr #11
   1457c:	muleq	r1, r4, r5
   14580:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14584:	cmp	r0, #0
   14588:	beq	147e8 <__assert_fail@plt+0x3238>
   1458c:	ldr	r0, [fp, #16]
   14590:	b	147ec <__assert_fail@plt+0x323c>
   14594:	mov	r4, #0
   14598:	cmp	r7, #0
   1459c:	beq	1478c <__assert_fail@plt+0x31dc>
   145a0:	mov	r9, #0
   145a4:	b	14580 <__assert_fail@plt+0x2fd0>
   145a8:	mov	r4, #0
   145ac:	cmn	lr, #1
   145b0:	beq	14770 <__assert_fail@plt+0x31c0>
   145b4:	cmp	r7, #0
   145b8:	bne	145a0 <__assert_fail@plt+0x2ff0>
   145bc:	cmp	lr, #1
   145c0:	beq	1478c <__assert_fail@plt+0x31dc>
   145c4:	b	145a0 <__assert_fail@plt+0x2ff0>
   145c8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   145cc:	cmp	r0, #2
   145d0:	bne	147b0 <__assert_fail@plt+0x3200>
   145d4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   145d8:	tst	r0, #1
   145dc:	bne	14eac <__assert_fail@plt+0x38fc>
   145e0:	mov	r9, #0
   145e4:	mov	r0, #92	; 0x5c
   145e8:	b	147c4 <__assert_fail@plt+0x3214>
   145ec:	mov	r0, #102	; 0x66
   145f0:	b	147d4 <__assert_fail@plt+0x3224>
   145f4:	mov	r2, #116	; 0x74
   145f8:	b	14608 <__assert_fail@plt+0x3058>
   145fc:	mov	r0, #98	; 0x62
   14600:	b	147d4 <__assert_fail@plt+0x3224>
   14604:	mov	r2, #114	; 0x72
   14608:	ldr	r0, [sp, #68]	; 0x44
   1460c:	tst	r0, #1
   14610:	mov	r0, r2
   14614:	bne	147d4 <__assert_fail@plt+0x3224>
   14618:	b	14eac <__assert_fail@plt+0x38fc>
   1461c:	ldr	r0, [sp, #84]	; 0x54
   14620:	tst	r0, #1
   14624:	beq	148c4 <__assert_fail@plt+0x3314>
   14628:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1462c:	tst	r0, #1
   14630:	bne	14fbc <__assert_fail@plt+0x3a0c>
   14634:	ldr	r0, [fp, #-64]	; 0xffffffc0
   14638:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1463c:	cmp	r0, #2
   14640:	ldr	r0, [fp, #-80]	; 0xffffffb0
   14644:	movwne	r0, #1
   14648:	orr	r0, r0, r2
   1464c:	tst	r0, #1
   14650:	beq	14c94 <__assert_fail@plt+0x36e4>
   14654:	mov	r0, r8
   14658:	b	14cc8 <__assert_fail@plt+0x3718>
   1465c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   14660:	mov	r9, #0
   14664:	mov	r5, #63	; 0x3f
   14668:	cmp	r0, #5
   1466c:	beq	14a78 <__assert_fail@plt+0x34c8>
   14670:	cmp	r0, #2
   14674:	bne	14b1c <__assert_fail@plt+0x356c>
   14678:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1467c:	tst	r0, #1
   14680:	beq	14b20 <__assert_fail@plt+0x3570>
   14684:	b	14eac <__assert_fail@plt+0x38fc>
   14688:	mov	r0, #118	; 0x76
   1468c:	b	147d4 <__assert_fail@plt+0x3224>
   14690:	mov	r0, #1
   14694:	mov	r5, #39	; 0x27
   14698:	str	r0, [sp, #60]	; 0x3c
   1469c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   146a0:	cmp	r0, #2
   146a4:	bne	14718 <__assert_fail@plt+0x3168>
   146a8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   146ac:	tst	r0, #1
   146b0:	bne	14eac <__assert_fail@plt+0x38fc>
   146b4:	ldr	r2, [sp, #56]	; 0x38
   146b8:	clz	r1, sl
   146bc:	mov	r9, #0
   146c0:	lsr	r1, r1, #5
   146c4:	cmp	r2, #0
   146c8:	mov	r0, r2
   146cc:	movwne	r0, #1
   146d0:	orrs	r0, r0, r1
   146d4:	moveq	r2, sl
   146d8:	moveq	sl, r0
   146dc:	cmp	r8, sl
   146e0:	str	r2, [sp, #56]	; 0x38
   146e4:	movcc	r0, #39	; 0x27
   146e8:	strbcc	r0, [r6, r8]
   146ec:	add	r0, r8, #1
   146f0:	cmp	r0, sl
   146f4:	movcc	r1, #92	; 0x5c
   146f8:	strbcc	r1, [r6, r0]
   146fc:	add	r0, r8, #2
   14700:	add	r8, r8, #3
   14704:	cmp	r0, sl
   14708:	movcc	r1, #39	; 0x27
   1470c:	strbcc	r1, [r6, r0]
   14710:	mov	r0, #0
   14714:	str	r0, [fp, #-56]	; 0xffffffc8
   14718:	mov	r4, #1
   1471c:	b	14580 <__assert_fail@plt+0x2fd0>
   14720:	ldr	r0, [sp, #40]	; 0x28
   14724:	cmp	r0, #1
   14728:	bne	148f0 <__assert_fail@plt+0x3340>
   1472c:	str	lr, [sp, #28]
   14730:	bl	11454 <__ctype_b_loc@plt>
   14734:	ldr	r0, [r0]
   14738:	ldr	ip, [fp, #-84]	; 0xffffffac
   1473c:	mov	r1, #1
   14740:	add	r0, r0, r5, lsl #1
   14744:	ldrb	r0, [r0, #1]
   14748:	ubfx	r4, r0, #6, #1
   1474c:	ldr	r0, [sp, #52]	; 0x34
   14750:	mov	r2, r1
   14754:	cmp	r1, #1
   14758:	orr	r0, r4, r0
   1475c:	bhi	14b28 <__assert_fail@plt+0x3578>
   14760:	tst	r0, #1
   14764:	beq	14b28 <__assert_fail@plt+0x3578>
   14768:	ldr	lr, [sp, #28]
   1476c:	b	14580 <__assert_fail@plt+0x2fd0>
   14770:	cmp	r7, #0
   14774:	ldrbeq	r0, [ip, #1]
   14778:	cmpeq	r0, #0
   1477c:	beq	1478c <__assert_fail@plt+0x31dc>
   14780:	mvn	lr, #0
   14784:	mov	r9, #0
   14788:	b	14580 <__assert_fail@plt+0x2fd0>
   1478c:	mov	r1, #1
   14790:	ldr	r0, [fp, #-64]	; 0xffffffc0
   14794:	cmp	r0, #2
   14798:	bne	147a8 <__assert_fail@plt+0x31f8>
   1479c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   147a0:	tst	r0, #1
   147a4:	bne	14eac <__assert_fail@plt+0x38fc>
   147a8:	mov	r4, r1
   147ac:	b	14580 <__assert_fail@plt+0x2fd0>
   147b0:	ldr	r1, [sp, #48]	; 0x30
   147b4:	mov	r9, #0
   147b8:	mov	r0, #92	; 0x5c
   147bc:	cmp	r1, #0
   147c0:	beq	147d4 <__assert_fail@plt+0x3224>
   147c4:	mov	r4, #0
   147c8:	cmp	r9, #0
   147cc:	beq	14d60 <__assert_fail@plt+0x37b0>
   147d0:	b	14d9c <__assert_fail@plt+0x37ec>
   147d4:	ldr	r1, [sp, #84]	; 0x54
   147d8:	mov	r4, #0
   147dc:	mov	r9, #0
   147e0:	tst	r1, #1
   147e4:	bne	14824 <__assert_fail@plt+0x3274>
   147e8:	ldr	r0, [fp, #-88]	; 0xffffffa8
   147ec:	cmp	r0, #0
   147f0:	mov	r0, r5
   147f4:	beq	14818 <__assert_fail@plt+0x3268>
   147f8:	ldr	r1, [fp, #16]
   147fc:	ubfx	r0, r5, #5, #3
   14800:	mov	r2, #1
   14804:	ldr	r0, [r1, r0, lsl #2]
   14808:	and	r1, r5, #31
   1480c:	tst	r0, r2, lsl r1
   14810:	mov	r0, r5
   14814:	bne	14824 <__assert_fail@plt+0x3274>
   14818:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1481c:	cmp	r1, #0
   14820:	beq	14d58 <__assert_fail@plt+0x37a8>
   14824:	ldr	r1, [fp, #-72]	; 0xffffffb8
   14828:	tst	r1, #1
   1482c:	bne	14e84 <__assert_fail@plt+0x38d4>
   14830:	ldr	r1, [fp, #-64]	; 0xffffffc0
   14834:	ldr	r2, [fp, #-56]	; 0xffffffc8
   14838:	cmp	r1, #2
   1483c:	ldr	r1, [fp, #-80]	; 0xffffffb0
   14840:	movwne	r1, #1
   14844:	orr	r1, r1, r2
   14848:	tst	r1, #1
   1484c:	beq	14858 <__assert_fail@plt+0x32a8>
   14850:	ldr	r5, [fp, #-48]	; 0xffffffd0
   14854:	b	14894 <__assert_fail@plt+0x32e4>
   14858:	cmp	r8, sl
   1485c:	ldr	r5, [fp, #-48]	; 0xffffffd0
   14860:	movcc	r1, #39	; 0x27
   14864:	strbcc	r1, [r6, r8]
   14868:	add	r1, r8, #1
   1486c:	cmp	r1, sl
   14870:	movcc	r2, #36	; 0x24
   14874:	strbcc	r2, [r6, r1]
   14878:	add	r1, r8, #2
   1487c:	add	r8, r8, #3
   14880:	cmp	r1, sl
   14884:	movcc	r2, #39	; 0x27
   14888:	strbcc	r2, [r6, r1]
   1488c:	mov	r1, #1
   14890:	str	r1, [fp, #-56]	; 0xffffffc8
   14894:	cmp	r8, sl
   14898:	movcc	r1, #92	; 0x5c
   1489c:	strbcc	r1, [r6, r8]
   148a0:	add	r8, r8, #1
   148a4:	cmp	r8, sl
   148a8:	and	r5, r5, r4
   148ac:	add	r7, r7, #1
   148b0:	strbcc	r0, [r6, r8]
   148b4:	add	r8, r8, #1
   148b8:	cmn	lr, #1
   148bc:	bne	142b8 <__assert_fail@plt+0x2d08>
   148c0:	b	142c4 <__assert_fail@plt+0x2d14>
   148c4:	ldr	r0, [sp, #36]	; 0x24
   148c8:	mov	r4, #0
   148cc:	mov	r9, #0
   148d0:	mov	r5, #0
   148d4:	cmp	r0, #0
   148d8:	beq	147e8 <__assert_fail@plt+0x3238>
   148dc:	ldr	r5, [fp, #-48]	; 0xffffffd0
   148e0:	add	r7, r7, #1
   148e4:	cmn	lr, #1
   148e8:	bne	142b8 <__assert_fail@plt+0x2d08>
   148ec:	b	142c4 <__assert_fail@plt+0x2d14>
   148f0:	mov	r0, #0
   148f4:	cmn	lr, #1
   148f8:	str	r0, [fp, #-36]	; 0xffffffdc
   148fc:	str	r0, [fp, #-40]	; 0xffffffd8
   14900:	bne	14914 <__assert_fail@plt+0x3364>
   14904:	mov	r0, ip
   14908:	bl	11484 <strlen@plt>
   1490c:	ldr	ip, [fp, #-84]	; 0xffffffac
   14910:	mov	lr, r0
   14914:	add	r0, ip, r7
   14918:	mov	r4, #1
   1491c:	mov	r6, #0
   14920:	str	lr, [sp, #28]
   14924:	str	r0, [sp, #24]
   14928:	sub	r0, fp, #40	; 0x28
   1492c:	mov	r3, r0
   14930:	str	r6, [sp, #44]	; 0x2c
   14934:	add	r6, r6, r7
   14938:	sub	r0, fp, #44	; 0x2c
   1493c:	add	r1, ip, r6
   14940:	sub	r2, lr, r6
   14944:	bl	13bb8 <__assert_fail@plt+0x2608>
   14948:	cmp	r0, #0
   1494c:	beq	14de4 <__assert_fail@plt+0x3834>
   14950:	cmn	r0, #1
   14954:	beq	14da4 <__assert_fail@plt+0x37f4>
   14958:	ldr	lr, [sp, #28]
   1495c:	cmn	r0, #2
   14960:	beq	14dac <__assert_fail@plt+0x37fc>
   14964:	ldr	r2, [sp, #64]	; 0x40
   14968:	cmp	r0, #2
   1496c:	mov	r1, #0
   14970:	movwcc	r1, #1
   14974:	eor	r2, r2, #1
   14978:	orrs	r1, r2, r1
   1497c:	bne	14a3c <__assert_fail@plt+0x348c>
   14980:	ldr	r1, [sp, #44]	; 0x2c
   14984:	ldr	r2, [sp, #24]
   14988:	add	r1, r2, r1
   1498c:	mov	r2, #1
   14990:	ldrb	r3, [r1, r2]
   14994:	sub	r3, r3, #91	; 0x5b
   14998:	cmp	r3, #33	; 0x21
   1499c:	bhi	14a30 <__assert_fail@plt+0x3480>
   149a0:	add	r6, pc, #0
   149a4:	ldr	pc, [r6, r3, lsl #2]
   149a8:	andeq	r4, r1, r4, lsr #29
   149ac:	andeq	r4, r1, r4, lsr #29
   149b0:	andeq	r4, r1, r0, lsr sl
   149b4:	andeq	r4, r1, r4, lsr #29
   149b8:	andeq	r4, r1, r0, lsr sl
   149bc:	andeq	r4, r1, r4, lsr #29
   149c0:	andeq	r4, r1, r0, lsr sl
   149c4:	andeq	r4, r1, r0, lsr sl
   149c8:	andeq	r4, r1, r0, lsr sl
   149cc:	andeq	r4, r1, r0, lsr sl
   149d0:	andeq	r4, r1, r0, lsr sl
   149d4:	andeq	r4, r1, r0, lsr sl
   149d8:	andeq	r4, r1, r0, lsr sl
   149dc:	andeq	r4, r1, r0, lsr sl
   149e0:	andeq	r4, r1, r0, lsr sl
   149e4:	andeq	r4, r1, r0, lsr sl
   149e8:	andeq	r4, r1, r0, lsr sl
   149ec:	andeq	r4, r1, r0, lsr sl
   149f0:	andeq	r4, r1, r0, lsr sl
   149f4:	andeq	r4, r1, r0, lsr sl
   149f8:	andeq	r4, r1, r0, lsr sl
   149fc:	andeq	r4, r1, r0, lsr sl
   14a00:	andeq	r4, r1, r0, lsr sl
   14a04:	andeq	r4, r1, r0, lsr sl
   14a08:	andeq	r4, r1, r0, lsr sl
   14a0c:	andeq	r4, r1, r0, lsr sl
   14a10:	andeq	r4, r1, r0, lsr sl
   14a14:	andeq	r4, r1, r0, lsr sl
   14a18:	andeq	r4, r1, r0, lsr sl
   14a1c:	andeq	r4, r1, r0, lsr sl
   14a20:	andeq	r4, r1, r0, lsr sl
   14a24:	andeq	r4, r1, r0, lsr sl
   14a28:	andeq	r4, r1, r0, lsr sl
   14a2c:	andeq	r4, r1, r4, lsr #29
   14a30:	add	r2, r2, #1
   14a34:	cmp	r2, r0
   14a38:	bcc	14990 <__assert_fail@plt+0x33e0>
   14a3c:	ldr	r6, [sp, #44]	; 0x2c
   14a40:	add	r6, r0, r6
   14a44:	ldr	r0, [fp, #-44]	; 0xffffffd4
   14a48:	bl	11394 <iswprint@plt>
   14a4c:	cmp	r0, #0
   14a50:	movwne	r0, #1
   14a54:	and	r4, r4, r0
   14a58:	sub	r0, fp, #40	; 0x28
   14a5c:	bl	11334 <mbsinit@plt>
   14a60:	ldr	lr, [sp, #28]
   14a64:	ldr	ip, [fp, #-84]	; 0xffffffac
   14a68:	sub	r3, fp, #40	; 0x28
   14a6c:	cmp	r0, #0
   14a70:	beq	14930 <__assert_fail@plt+0x3380>
   14a74:	b	14dec <__assert_fail@plt+0x383c>
   14a78:	ldr	r0, [sp, #32]
   14a7c:	cmp	r0, #0
   14a80:	beq	14b1c <__assert_fail@plt+0x356c>
   14a84:	add	r0, r7, #2
   14a88:	cmp	r0, lr
   14a8c:	bcs	14b1c <__assert_fail@plt+0x356c>
   14a90:	add	r1, ip, r7
   14a94:	ldrb	r1, [r1, #1]
   14a98:	cmp	r1, #63	; 0x3f
   14a9c:	bne	14b1c <__assert_fail@plt+0x356c>
   14aa0:	ldrb	r5, [ip, r0]
   14aa4:	sub	r1, r5, #33	; 0x21
   14aa8:	cmp	r1, #29
   14aac:	bhi	14b1c <__assert_fail@plt+0x356c>
   14ab0:	movw	r3, #20929	; 0x51c1
   14ab4:	mov	r2, #1
   14ab8:	movt	r3, #14336	; 0x3800
   14abc:	tst	r3, r2, lsl r1
   14ac0:	beq	14b1c <__assert_fail@plt+0x356c>
   14ac4:	ldr	r1, [fp, #-72]	; 0xffffffb8
   14ac8:	tst	r1, #1
   14acc:	bne	14fc4 <__assert_fail@plt+0x3a14>
   14ad0:	cmp	r8, sl
   14ad4:	mov	r7, r0
   14ad8:	mov	r4, #0
   14adc:	movcc	r1, #63	; 0x3f
   14ae0:	strbcc	r1, [r6, r8]
   14ae4:	add	r1, r8, #1
   14ae8:	cmp	r1, sl
   14aec:	movcc	r2, #34	; 0x22
   14af0:	strbcc	r2, [r6, r1]
   14af4:	add	r1, r8, #2
   14af8:	cmp	r1, sl
   14afc:	movcc	r2, #34	; 0x22
   14b00:	strbcc	r2, [r6, r1]
   14b04:	add	r1, r8, #3
   14b08:	add	r8, r8, #4
   14b0c:	cmp	r1, sl
   14b10:	movcc	r2, #63	; 0x3f
   14b14:	strbcc	r2, [r6, r1]
   14b18:	b	14580 <__assert_fail@plt+0x2fd0>
   14b1c:	mov	r5, #63	; 0x3f
   14b20:	mov	r4, #0
   14b24:	b	14580 <__assert_fail@plt+0x2fd0>
   14b28:	add	r1, r2, r7
   14b2c:	ldr	lr, [sp, #28]
   14b30:	mov	r3, #0
   14b34:	str	r1, [sp, #44]	; 0x2c
   14b38:	add	r1, r7, #1
   14b3c:	ldr	r7, [fp, #-64]	; 0xffffffc0
   14b40:	tst	r0, #1
   14b44:	bne	14c18 <__assert_fail@plt+0x3668>
   14b48:	ldr	r2, [fp, #-72]	; 0xffffffb8
   14b4c:	tst	r2, #1
   14b50:	bne	14f0c <__assert_fail@plt+0x395c>
   14b54:	ldr	r3, [fp, #-80]	; 0xffffffb0
   14b58:	ldr	r2, [fp, #-56]	; 0xffffffc8
   14b5c:	cmp	r7, #2
   14b60:	movwne	r3, #1
   14b64:	orr	r3, r3, r2
   14b68:	tst	r3, #1
   14b6c:	bne	14ba8 <__assert_fail@plt+0x35f8>
   14b70:	cmp	r8, sl
   14b74:	add	r3, r8, #1
   14b78:	movcc	r2, #39	; 0x27
   14b7c:	strbcc	r2, [r6, r8]
   14b80:	cmp	r3, sl
   14b84:	movcc	r2, #36	; 0x24
   14b88:	strbcc	r2, [r6, r3]
   14b8c:	add	r3, r8, #2
   14b90:	add	r8, r8, #3
   14b94:	cmp	r3, sl
   14b98:	movcc	r2, #39	; 0x27
   14b9c:	strbcc	r2, [r6, r3]
   14ba0:	mov	r2, #1
   14ba4:	str	r2, [fp, #-56]	; 0xffffffc8
   14ba8:	cmp	r8, sl
   14bac:	movcc	r3, #92	; 0x5c
   14bb0:	strbcc	r3, [r6, r8]
   14bb4:	add	r3, r8, #1
   14bb8:	cmp	r3, sl
   14bbc:	andcc	r7, r5, #192	; 0xc0
   14bc0:	movcc	r2, #48	; 0x30
   14bc4:	orrcc	r7, r2, r7, lsr #6
   14bc8:	strbcc	r7, [r6, r3]
   14bcc:	add	r3, r8, #2
   14bd0:	add	r8, r8, #3
   14bd4:	cmp	r3, sl
   14bd8:	lsrcc	r7, r5, #3
   14bdc:	movcc	r2, #6
   14be0:	bficc	r7, r2, #3, #29
   14be4:	mov	r2, #6
   14be8:	strbcc	r7, [r6, r3]
   14bec:	bfi	r5, r2, #3, #29
   14bf0:	mov	r3, #1
   14bf4:	b	14c3c <__assert_fail@plt+0x368c>
   14bf8:	cmp	r8, sl
   14bfc:	ldr	r7, [fp, #-64]	; 0xffffffc0
   14c00:	strbcc	r5, [r6, r8]
   14c04:	add	r8, r8, #1
   14c08:	ldrb	r5, [ip, r1]
   14c0c:	add	r1, r1, #1
   14c10:	tst	r0, #1
   14c14:	beq	14b48 <__assert_fail@plt+0x3598>
   14c18:	ldr	r2, [fp, #-52]	; 0xffffffcc
   14c1c:	tst	r2, #1
   14c20:	beq	14c34 <__assert_fail@plt+0x3684>
   14c24:	cmp	r8, sl
   14c28:	movcc	r7, #92	; 0x5c
   14c2c:	strbcc	r7, [r6, r8]
   14c30:	add	r8, r8, #1
   14c34:	mov	r2, #0
   14c38:	str	r2, [fp, #-52]	; 0xffffffcc
   14c3c:	ldr	r2, [sp, #44]	; 0x2c
   14c40:	and	r9, r3, #1
   14c44:	cmp	r2, r1
   14c48:	bls	14d48 <__assert_fail@plt+0x3798>
   14c4c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   14c50:	cmp	r9, #0
   14c54:	movwne	r9, #1
   14c58:	mvn	r7, r2
   14c5c:	orr	r7, r7, r9
   14c60:	tst	r7, #1
   14c64:	bne	14bf8 <__assert_fail@plt+0x3648>
   14c68:	cmp	r8, sl
   14c6c:	movcc	r7, #39	; 0x27
   14c70:	strbcc	r7, [r6, r8]
   14c74:	add	r7, r8, #1
   14c78:	add	r8, r8, #2
   14c7c:	cmp	r7, sl
   14c80:	movcc	r2, #39	; 0x27
   14c84:	strbcc	r2, [r6, r7]
   14c88:	mov	r2, #0
   14c8c:	str	r2, [fp, #-56]	; 0xffffffc8
   14c90:	b	14bf8 <__assert_fail@plt+0x3648>
   14c94:	cmp	r8, sl
   14c98:	mov	r2, #1
   14c9c:	movcc	r0, #39	; 0x27
   14ca0:	strbcc	r0, [r6, r8]
   14ca4:	add	r0, r8, #1
   14ca8:	cmp	r0, sl
   14cac:	movcc	r1, #36	; 0x24
   14cb0:	strbcc	r1, [r6, r0]
   14cb4:	add	r0, r8, #2
   14cb8:	cmp	r0, sl
   14cbc:	movcc	r1, #39	; 0x27
   14cc0:	strbcc	r1, [r6, r0]
   14cc4:	add	r0, r8, #3
   14cc8:	cmp	r0, sl
   14ccc:	add	r8, r0, #1
   14cd0:	str	r2, [fp, #-56]	; 0xffffffc8
   14cd4:	movcc	r1, #92	; 0x5c
   14cd8:	strbcc	r1, [r6, r0]
   14cdc:	ldr	r1, [fp, #-64]	; 0xffffffc0
   14ce0:	cmp	r1, #2
   14ce4:	beq	14d38 <__assert_fail@plt+0x3788>
   14ce8:	add	r1, r7, #1
   14cec:	mov	r4, #0
   14cf0:	mov	r9, #1
   14cf4:	mov	r5, #48	; 0x30
   14cf8:	cmp	r1, lr
   14cfc:	bcs	14580 <__assert_fail@plt+0x2fd0>
   14d00:	ldrb	r1, [ip, r1]
   14d04:	sub	r1, r1, #48	; 0x30
   14d08:	uxtb	r1, r1
   14d0c:	cmp	r1, #9
   14d10:	bhi	14580 <__assert_fail@plt+0x2fd0>
   14d14:	cmp	r8, sl
   14d18:	movcc	r1, #48	; 0x30
   14d1c:	strbcc	r1, [r6, r8]
   14d20:	add	r1, r0, #2
   14d24:	add	r8, r0, #3
   14d28:	cmp	r1, sl
   14d2c:	movcc	r2, #48	; 0x30
   14d30:	strbcc	r2, [r6, r1]
   14d34:	b	14580 <__assert_fail@plt+0x2fd0>
   14d38:	mov	r0, #48	; 0x30
   14d3c:	mov	r9, #1
   14d40:	mov	r4, #0
   14d44:	b	14818 <__assert_fail@plt+0x3268>
   14d48:	cmp	r9, #0
   14d4c:	sub	r7, r1, #1
   14d50:	mov	r0, r5
   14d54:	movwne	r9, #1
   14d58:	cmp	r9, #0
   14d5c:	bne	14d9c <__assert_fail@plt+0x37ec>
   14d60:	ldr	r1, [fp, #-56]	; 0xffffffc8
   14d64:	tst	r1, #1
   14d68:	beq	14d9c <__assert_fail@plt+0x37ec>
   14d6c:	cmp	r8, sl
   14d70:	ldr	r5, [fp, #-48]	; 0xffffffd0
   14d74:	movcc	r1, #39	; 0x27
   14d78:	strbcc	r1, [r6, r8]
   14d7c:	add	r1, r8, #1
   14d80:	add	r8, r8, #2
   14d84:	cmp	r1, sl
   14d88:	movcc	r2, #39	; 0x27
   14d8c:	strbcc	r2, [r6, r1]
   14d90:	mov	r1, #0
   14d94:	str	r1, [fp, #-56]	; 0xffffffc8
   14d98:	b	148a4 <__assert_fail@plt+0x32f4>
   14d9c:	ldr	r5, [fp, #-48]	; 0xffffffd0
   14da0:	b	148a4 <__assert_fail@plt+0x32f4>
   14da4:	mov	r4, #0
   14da8:	b	14de4 <__assert_fail@plt+0x3834>
   14dac:	mov	r4, #0
   14db0:	cmp	lr, r6
   14db4:	bls	14de4 <__assert_fail@plt+0x3834>
   14db8:	ldr	ip, [fp, #-84]	; 0xffffffac
   14dbc:	ldr	r6, [sp, #44]	; 0x2c
   14dc0:	ldr	r0, [sp, #24]
   14dc4:	ldrb	r0, [r0, r6]
   14dc8:	cmp	r0, #0
   14dcc:	beq	14dec <__assert_fail@plt+0x383c>
   14dd0:	add	r6, r6, #1
   14dd4:	add	r0, r7, r6
   14dd8:	cmp	r0, lr
   14ddc:	bcc	14dc0 <__assert_fail@plt+0x3810>
   14de0:	b	14dec <__assert_fail@plt+0x383c>
   14de4:	ldr	ip, [fp, #-84]	; 0xffffffac
   14de8:	ldr	r6, [sp, #44]	; 0x2c
   14dec:	mov	r1, r6
   14df0:	ldr	r6, [sp, #80]	; 0x50
   14df4:	b	1474c <__assert_fail@plt+0x319c>
   14df8:	mov	lr, r7
   14dfc:	b	14e04 <__assert_fail@plt+0x3854>
   14e00:	mvn	lr, #0
   14e04:	ldr	r7, [fp, #-64]	; 0xffffffc0
   14e08:	ldr	r1, [fp, #-72]	; 0xffffffb8
   14e0c:	eor	r0, r7, #2
   14e10:	orr	r0, r0, r8
   14e14:	clz	r0, r0
   14e18:	lsr	r0, r0, #5
   14e1c:	tst	r1, r0
   14e20:	bne	14eac <__assert_fail@plt+0x38fc>
   14e24:	mov	r0, r1
   14e28:	ldr	r1, [fp, #-80]	; 0xffffffb0
   14e2c:	cmp	r7, #2
   14e30:	movwne	r1, #1
   14e34:	orr	r0, r0, r1
   14e38:	tst	r0, #1
   14e3c:	ldreq	r0, [sp, #60]	; 0x3c
   14e40:	eoreq	r0, r0, #1
   14e44:	tsteq	r0, #1
   14e48:	bne	14f58 <__assert_fail@plt+0x39a8>
   14e4c:	mov	r9, lr
   14e50:	tst	r5, #1
   14e54:	bne	14f14 <__assert_fail@plt+0x3964>
   14e58:	ldr	r6, [sp, #56]	; 0x38
   14e5c:	mov	r4, #0
   14e60:	cmp	r6, #0
   14e64:	beq	14f50 <__assert_fail@plt+0x39a0>
   14e68:	ldr	r0, [sp, #84]	; 0x54
   14e6c:	mov	r1, #0
   14e70:	cmp	sl, #0
   14e74:	mov	r5, #0
   14e78:	str	r1, [fp, #-72]	; 0xffffffb8
   14e7c:	beq	1404c <__assert_fail@plt+0x2a9c>
   14e80:	b	14f58 <__assert_fail@plt+0x39a8>
   14e84:	ldr	r7, [fp, #-64]	; 0xffffffc0
   14e88:	ldr	r2, [sp, #84]	; 0x54
   14e8c:	b	14eb4 <__assert_fail@plt+0x3904>
   14e90:	ldr	ip, [fp, #-84]	; 0xffffffac
   14e94:	mov	r2, #1
   14e98:	mov	lr, r4
   14e9c:	ldr	r7, [fp, #-64]	; 0xffffffc0
   14ea0:	b	14eb4 <__assert_fail@plt+0x3904>
   14ea4:	ldr	r6, [sp, #80]	; 0x50
   14ea8:	ldr	ip, [fp, #-84]	; 0xffffffac
   14eac:	ldr	r2, [sp, #84]	; 0x54
   14eb0:	mov	r7, #2
   14eb4:	mov	r0, #0
   14eb8:	ldr	r1, [fp, #12]
   14ebc:	tst	r2, #1
   14ec0:	mov	r2, r7
   14ec4:	mov	r3, lr
   14ec8:	str	r0, [sp, #8]
   14ecc:	ldr	r0, [sp, #72]	; 0x48
   14ed0:	movwne	r2, #4
   14ed4:	cmp	r7, #2
   14ed8:	movne	r2, r7
   14edc:	str	r2, [sp]
   14ee0:	mov	r2, ip
   14ee4:	bic	r1, r1, #2
   14ee8:	str	r0, [sp, #12]
   14eec:	ldr	r0, [sp, #76]	; 0x4c
   14ef0:	str	r1, [sp, #4]
   14ef4:	mov	r1, sl
   14ef8:	str	r0, [sp, #16]
   14efc:	mov	r0, r6
   14f00:	bl	13fcc <__assert_fail@plt+0x2a1c>
   14f04:	mov	r8, r0
   14f08:	b	14fb0 <__assert_fail@plt+0x3a00>
   14f0c:	ldr	r2, [sp, #84]	; 0x54
   14f10:	b	14eb4 <__assert_fail@plt+0x3904>
   14f14:	mov	r0, #5
   14f18:	ldr	r1, [sp, #56]	; 0x38
   14f1c:	ldr	r2, [fp, #-84]	; 0xffffffac
   14f20:	mov	r3, r9
   14f24:	str	r0, [sp]
   14f28:	ldr	r0, [fp, #12]
   14f2c:	str	r0, [sp, #4]
   14f30:	ldr	r0, [fp, #16]
   14f34:	str	r0, [sp, #8]
   14f38:	ldr	r0, [sp, #72]	; 0x48
   14f3c:	str	r0, [sp, #12]
   14f40:	ldr	r0, [sp, #76]	; 0x4c
   14f44:	str	r0, [sp, #16]
   14f48:	ldr	r0, [sp, #80]	; 0x50
   14f4c:	b	14f00 <__assert_fail@plt+0x3950>
   14f50:	mov	r0, #0
   14f54:	str	r0, [fp, #-72]	; 0xffffffb8
   14f58:	ldr	r1, [sp, #92]	; 0x5c
   14f5c:	cmp	r1, #0
   14f60:	beq	14fa0 <__assert_fail@plt+0x39f0>
   14f64:	ldr	r0, [fp, #-72]	; 0xffffffb8
   14f68:	ldr	r2, [sp, #80]	; 0x50
   14f6c:	tst	r0, #1
   14f70:	bne	14fa4 <__assert_fail@plt+0x39f4>
   14f74:	ldrb	r0, [r1]
   14f78:	cmp	r0, #0
   14f7c:	beq	14fa4 <__assert_fail@plt+0x39f4>
   14f80:	add	r1, r1, #1
   14f84:	cmp	r8, sl
   14f88:	strbcc	r0, [r2, r8]
   14f8c:	add	r8, r8, #1
   14f90:	ldrb	r0, [r1], #1
   14f94:	cmp	r0, #0
   14f98:	bne	14f84 <__assert_fail@plt+0x39d4>
   14f9c:	b	14fa4 <__assert_fail@plt+0x39f4>
   14fa0:	ldr	r2, [sp, #80]	; 0x50
   14fa4:	cmp	r8, sl
   14fa8:	movcc	r0, #0
   14fac:	strbcc	r0, [r2, r8]
   14fb0:	mov	r0, r8
   14fb4:	sub	sp, fp, #28
   14fb8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14fbc:	mov	r2, #1
   14fc0:	b	14e9c <__assert_fail@plt+0x38ec>
   14fc4:	ldr	r2, [sp, #84]	; 0x54
   14fc8:	mov	r7, #5
   14fcc:	b	14eb4 <__assert_fail@plt+0x3904>
   14fd0:	bl	11598 <abort@plt>
   14fd4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14fd8:	add	fp, sp, #28
   14fdc:	sub	sp, sp, #28
   14fe0:	movw	r5, #37360	; 0x91f0
   14fe4:	cmp	r2, #0
   14fe8:	mov	r4, r1
   14fec:	mov	r7, r0
   14ff0:	str	r0, [sp, #20]
   14ff4:	movt	r5, #2
   14ff8:	movne	r5, r2
   14ffc:	bl	114a8 <__errno_location@plt>
   15000:	mov	sl, r0
   15004:	ldm	r5, {r0, r1}
   15008:	ldr	r2, [r5, #40]	; 0x28
   1500c:	ldr	r3, [r5, #44]	; 0x2c
   15010:	add	r9, r5, #8
   15014:	ldr	r6, [sl]
   15018:	orr	r8, r1, #1
   1501c:	mov	r1, #0
   15020:	str	r6, [sp, #24]
   15024:	stm	sp, {r0, r8, r9}
   15028:	str	r2, [sp, #12]
   1502c:	str	r3, [sp, #16]
   15030:	mov	r0, #0
   15034:	mov	r2, r7
   15038:	mov	r3, r4
   1503c:	mov	r6, r4
   15040:	bl	13fcc <__assert_fail@plt+0x2a1c>
   15044:	add	r7, r0, #1
   15048:	mov	r0, r7
   1504c:	bl	16578 <__assert_fail@plt+0x4fc8>
   15050:	mov	r4, r0
   15054:	ldr	r0, [r5]
   15058:	ldr	r2, [r5, #44]	; 0x2c
   1505c:	ldr	r1, [r5, #40]	; 0x28
   15060:	mov	r3, r6
   15064:	stm	sp, {r0, r8, r9}
   15068:	str	r2, [sp, #16]
   1506c:	str	r1, [sp, #12]
   15070:	mov	r0, r4
   15074:	mov	r1, r7
   15078:	ldr	r2, [sp, #20]
   1507c:	bl	13fcc <__assert_fail@plt+0x2a1c>
   15080:	ldr	r0, [sp, #24]
   15084:	str	r0, [sl]
   15088:	mov	r0, r4
   1508c:	sub	sp, fp, #28
   15090:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15094:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15098:	add	fp, sp, #28
   1509c:	sub	sp, sp, #36	; 0x24
   150a0:	movw	r8, #37360	; 0x91f0
   150a4:	cmp	r3, #0
   150a8:	mov	r4, r2
   150ac:	str	r2, [sp, #24]
   150b0:	mov	r5, r1
   150b4:	mov	r6, r0
   150b8:	str	r0, [sp, #20]
   150bc:	movt	r8, #2
   150c0:	movne	r8, r3
   150c4:	bl	114a8 <__errno_location@plt>
   150c8:	str	r0, [sp, #28]
   150cc:	cmp	r4, #0
   150d0:	add	sl, r8, #8
   150d4:	ldm	r8, {r3, r9}
   150d8:	ldr	r7, [r0]
   150dc:	ldr	r1, [r8, #40]	; 0x28
   150e0:	ldr	r2, [r8, #44]	; 0x2c
   150e4:	mov	r0, #0
   150e8:	orreq	r9, r9, #1
   150ec:	str	r7, [sp, #32]
   150f0:	mov	r7, r5
   150f4:	stm	sp, {r3, r9, sl}
   150f8:	str	r1, [sp, #12]
   150fc:	str	r2, [sp, #16]
   15100:	mov	r1, #0
   15104:	mov	r2, r6
   15108:	mov	r3, r5
   1510c:	bl	13fcc <__assert_fail@plt+0x2a1c>
   15110:	add	r4, r0, #1
   15114:	mov	r5, r0
   15118:	mov	r0, r4
   1511c:	bl	16578 <__assert_fail@plt+0x4fc8>
   15120:	mov	r6, r0
   15124:	ldr	r0, [r8]
   15128:	ldr	r2, [r8, #44]	; 0x2c
   1512c:	ldr	r1, [r8, #40]	; 0x28
   15130:	mov	r3, r7
   15134:	stm	sp, {r0, r9, sl}
   15138:	str	r2, [sp, #16]
   1513c:	str	r1, [sp, #12]
   15140:	mov	r0, r6
   15144:	mov	r1, r4
   15148:	ldr	r2, [sp, #20]
   1514c:	bl	13fcc <__assert_fail@plt+0x2a1c>
   15150:	ldr	r0, [sp, #24]
   15154:	ldr	r1, [sp, #32]
   15158:	ldr	r2, [sp, #28]
   1515c:	cmp	r0, #0
   15160:	str	r1, [r2]
   15164:	strne	r5, [r0]
   15168:	mov	r0, r6
   1516c:	sub	sp, fp, #28
   15170:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15174:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15178:	add	fp, sp, #24
   1517c:	movw	r5, #37172	; 0x9134
   15180:	movw	r8, #37168	; 0x9130
   15184:	movt	r5, #2
   15188:	movt	r8, #2
   1518c:	ldr	r0, [r5]
   15190:	ldr	r4, [r8]
   15194:	cmp	r0, #2
   15198:	blt	151c4 <__assert_fail@plt+0x3c14>
   1519c:	add	r7, r4, #12
   151a0:	mov	r6, #0
   151a4:	ldr	r0, [r7, r6, lsl #3]
   151a8:	bl	139e0 <__assert_fail@plt+0x2430>
   151ac:	ldr	r1, [r5]
   151b0:	add	r2, r6, #2
   151b4:	add	r0, r6, #1
   151b8:	mov	r6, r0
   151bc:	cmp	r2, r1
   151c0:	blt	151a4 <__assert_fail@plt+0x3bf4>
   151c4:	ldr	r0, [r4, #4]
   151c8:	movw	r7, #37408	; 0x9220
   151cc:	movt	r7, #2
   151d0:	cmp	r0, r7
   151d4:	beq	151ec <__assert_fail@plt+0x3c3c>
   151d8:	bl	139e0 <__assert_fail@plt+0x2430>
   151dc:	movw	r0, #37176	; 0x9138
   151e0:	mov	r6, #256	; 0x100
   151e4:	movt	r0, #2
   151e8:	strd	r6, [r0]
   151ec:	movw	r6, #37176	; 0x9138
   151f0:	movt	r6, #2
   151f4:	cmp	r4, r6
   151f8:	beq	15208 <__assert_fail@plt+0x3c58>
   151fc:	mov	r0, r4
   15200:	bl	139e0 <__assert_fail@plt+0x2430>
   15204:	str	r6, [r8]
   15208:	mov	r0, #1
   1520c:	str	r0, [r5]
   15210:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15214:	movw	r3, #37360	; 0x91f0
   15218:	mvn	r2, #0
   1521c:	movt	r3, #2
   15220:	b	15224 <__assert_fail@plt+0x3c74>
   15224:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15228:	add	fp, sp, #28
   1522c:	sub	sp, sp, #44	; 0x2c
   15230:	mov	r7, r3
   15234:	str	r2, [sp, #36]	; 0x24
   15238:	str	r1, [sp, #32]
   1523c:	mov	r5, r0
   15240:	bl	114a8 <__errno_location@plt>
   15244:	cmp	r5, #0
   15248:	blt	153b4 <__assert_fail@plt+0x3e04>
   1524c:	cmn	r5, #-2147483647	; 0x80000001
   15250:	beq	153b4 <__assert_fail@plt+0x3e04>
   15254:	movw	r8, #37172	; 0x9134
   15258:	movw	r4, #37168	; 0x9130
   1525c:	str	r0, [sp, #28]
   15260:	ldr	r0, [r0]
   15264:	movt	r8, #2
   15268:	movt	r4, #2
   1526c:	ldr	r1, [r8]
   15270:	ldr	r6, [r4]
   15274:	str	r0, [sp, #24]
   15278:	cmp	r1, r5
   1527c:	ble	15288 <__assert_fail@plt+0x3cd8>
   15280:	mov	sl, r6
   15284:	b	152f0 <__assert_fail@plt+0x3d40>
   15288:	movw	r9, #37176	; 0x9138
   1528c:	mov	r0, #8
   15290:	add	r2, r5, #1
   15294:	str	r1, [fp, #-32]	; 0xffffffe0
   15298:	mvn	r3, #-2147483648	; 0x80000000
   1529c:	movt	r9, #2
   152a0:	str	r0, [sp]
   152a4:	sub	r2, r2, r1
   152a8:	sub	r1, fp, #32
   152ac:	subs	r0, r6, r9
   152b0:	movne	r0, r6
   152b4:	bl	16778 <__assert_fail@plt+0x51c8>
   152b8:	cmp	r6, r9
   152bc:	mov	sl, r0
   152c0:	str	r0, [r4]
   152c4:	ldrdeq	r0, [r9]
   152c8:	stmeq	sl, {r0, r1}
   152cc:	ldr	r1, [r8]
   152d0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   152d4:	add	r0, sl, r1, lsl #3
   152d8:	sub	r1, r2, r1
   152dc:	lsl	r2, r1, #3
   152e0:	mov	r1, #0
   152e4:	bl	114cc <memset@plt>
   152e8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   152ec:	str	r0, [r8]
   152f0:	mov	r9, sl
   152f4:	ldr	r6, [r9, r5, lsl #3]!
   152f8:	ldr	r4, [r9, #4]!
   152fc:	ldm	r7, {r0, r1}
   15300:	ldr	r2, [r7, #40]	; 0x28
   15304:	ldr	r3, [r7, #44]	; 0x2c
   15308:	orr	r8, r1, #1
   1530c:	add	r1, r7, #8
   15310:	stm	sp, {r0, r8}
   15314:	add	r0, sp, #8
   15318:	str	r1, [sp, #20]
   1531c:	stm	r0, {r1, r2, r3}
   15320:	mov	r0, r4
   15324:	mov	r1, r6
   15328:	ldr	r2, [sp, #32]
   1532c:	ldr	r3, [sp, #36]	; 0x24
   15330:	bl	13fcc <__assert_fail@plt+0x2a1c>
   15334:	cmp	r6, r0
   15338:	bhi	1539c <__assert_fail@plt+0x3dec>
   1533c:	add	r6, r0, #1
   15340:	movw	r0, #37408	; 0x9220
   15344:	movt	r0, #2
   15348:	str	r6, [sl, r5, lsl #3]
   1534c:	cmp	r4, r0
   15350:	beq	1535c <__assert_fail@plt+0x3dac>
   15354:	mov	r0, r4
   15358:	bl	139e0 <__assert_fail@plt+0x2430>
   1535c:	mov	r0, r6
   15360:	bl	16578 <__assert_fail@plt+0x4fc8>
   15364:	str	r0, [r9]
   15368:	mov	r4, r0
   1536c:	add	r3, sp, #8
   15370:	ldr	r0, [r7]
   15374:	ldr	r1, [r7, #40]	; 0x28
   15378:	ldr	r2, [r7, #44]	; 0x2c
   1537c:	stm	sp, {r0, r8}
   15380:	ldr	r0, [sp, #20]
   15384:	stm	r3, {r0, r1, r2}
   15388:	mov	r0, r4
   1538c:	mov	r1, r6
   15390:	ldr	r2, [sp, #32]
   15394:	ldr	r3, [sp, #36]	; 0x24
   15398:	bl	13fcc <__assert_fail@plt+0x2a1c>
   1539c:	ldr	r0, [sp, #28]
   153a0:	ldr	r1, [sp, #24]
   153a4:	str	r1, [r0]
   153a8:	mov	r0, r4
   153ac:	sub	sp, fp, #28
   153b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   153b4:	bl	11598 <abort@plt>
   153b8:	movw	r3, #37360	; 0x91f0
   153bc:	movt	r3, #2
   153c0:	b	15224 <__assert_fail@plt+0x3c74>
   153c4:	movw	r3, #37360	; 0x91f0
   153c8:	mov	r1, r0
   153cc:	mov	r0, #0
   153d0:	mvn	r2, #0
   153d4:	movt	r3, #2
   153d8:	b	15224 <__assert_fail@plt+0x3c74>
   153dc:	movw	r3, #37360	; 0x91f0
   153e0:	mov	r2, r1
   153e4:	mov	r1, r0
   153e8:	mov	r0, #0
   153ec:	movt	r3, #2
   153f0:	b	15224 <__assert_fail@plt+0x3c74>
   153f4:	push	{fp, lr}
   153f8:	mov	fp, sp
   153fc:	sub	sp, sp, #48	; 0x30
   15400:	vmov.i32	q8, #0	; 0x00000000
   15404:	mov	ip, #32
   15408:	mov	r3, sp
   1540c:	mov	lr, r2
   15410:	cmp	r1, #10
   15414:	add	r2, r3, #16
   15418:	vst1.64	{d16-d17}, [r3], ip
   1541c:	vst1.64	{d16-d17}, [r3]
   15420:	vst1.64	{d16-d17}, [r2]
   15424:	beq	15444 <__assert_fail@plt+0x3e94>
   15428:	str	r1, [sp]
   1542c:	mov	r3, sp
   15430:	mov	r1, lr
   15434:	mvn	r2, #0
   15438:	bl	15224 <__assert_fail@plt+0x3c74>
   1543c:	mov	sp, fp
   15440:	pop	{fp, pc}
   15444:	bl	11598 <abort@plt>
   15448:	push	{r4, sl, fp, lr}
   1544c:	add	fp, sp, #8
   15450:	sub	sp, sp, #48	; 0x30
   15454:	mov	ip, r3
   15458:	mov	r3, sp
   1545c:	vmov.i32	q8, #0	; 0x00000000
   15460:	mov	lr, #32
   15464:	cmp	r1, #10
   15468:	add	r4, r3, #16
   1546c:	vst1.64	{d16-d17}, [r3], lr
   15470:	vst1.64	{d16-d17}, [r3]
   15474:	vst1.64	{d16-d17}, [r4]
   15478:	beq	15498 <__assert_fail@plt+0x3ee8>
   1547c:	str	r1, [sp]
   15480:	mov	r1, r2
   15484:	mov	r3, sp
   15488:	mov	r2, ip
   1548c:	bl	15224 <__assert_fail@plt+0x3c74>
   15490:	sub	sp, fp, #8
   15494:	pop	{r4, sl, fp, pc}
   15498:	bl	11598 <abort@plt>
   1549c:	push	{fp, lr}
   154a0:	mov	fp, sp
   154a4:	sub	sp, sp, #48	; 0x30
   154a8:	mov	r3, sp
   154ac:	vmov.i32	q8, #0	; 0x00000000
   154b0:	mov	ip, #32
   154b4:	cmp	r0, #10
   154b8:	add	r2, r3, #16
   154bc:	vst1.64	{d16-d17}, [r3], ip
   154c0:	vst1.64	{d16-d17}, [r3]
   154c4:	vst1.64	{d16-d17}, [r2]
   154c8:	beq	154e8 <__assert_fail@plt+0x3f38>
   154cc:	str	r0, [sp]
   154d0:	mov	r3, sp
   154d4:	mov	r0, #0
   154d8:	mvn	r2, #0
   154dc:	bl	15224 <__assert_fail@plt+0x3c74>
   154e0:	mov	sp, fp
   154e4:	pop	{fp, pc}
   154e8:	bl	11598 <abort@plt>
   154ec:	push	{fp, lr}
   154f0:	mov	fp, sp
   154f4:	sub	sp, sp, #48	; 0x30
   154f8:	mov	r3, sp
   154fc:	vmov.i32	q8, #0	; 0x00000000
   15500:	mov	ip, #32
   15504:	cmp	r0, #10
   15508:	add	lr, r3, #16
   1550c:	vst1.64	{d16-d17}, [r3], ip
   15510:	vst1.64	{d16-d17}, [r3]
   15514:	vst1.64	{d16-d17}, [lr]
   15518:	beq	15534 <__assert_fail@plt+0x3f84>
   1551c:	str	r0, [sp]
   15520:	mov	r3, sp
   15524:	mov	r0, #0
   15528:	bl	15224 <__assert_fail@plt+0x3c74>
   1552c:	mov	sp, fp
   15530:	pop	{fp, pc}
   15534:	bl	11598 <abort@plt>
   15538:	push	{r4, sl, fp, lr}
   1553c:	add	fp, sp, #8
   15540:	sub	sp, sp, #48	; 0x30
   15544:	mov	lr, r0
   15548:	movw	r0, #37360	; 0x91f0
   1554c:	mov	r3, #32
   15550:	mov	ip, r1
   15554:	mov	r4, #1
   15558:	movt	r0, #2
   1555c:	add	r1, r0, #16
   15560:	vld1.64	{d16-d17}, [r0], r3
   15564:	mov	r3, sp
   15568:	vld1.64	{d18-d19}, [r1]
   1556c:	add	r1, r3, #16
   15570:	vld1.64	{d20-d21}, [r0]
   15574:	add	r0, r3, #32
   15578:	vst1.64	{d18-d19}, [r1]
   1557c:	mov	r1, r3
   15580:	vst1.64	{d20-d21}, [r0]
   15584:	mov	r0, #28
   15588:	and	r0, r0, r2, lsr #3
   1558c:	and	r2, r2, #31
   15590:	vst1.64	{d16-d17}, [r1], r0
   15594:	ldr	r0, [r1, #8]
   15598:	bic	r4, r4, r0, lsr r2
   1559c:	eor	r0, r0, r4, lsl r2
   155a0:	mov	r2, ip
   155a4:	str	r0, [r1, #8]
   155a8:	mov	r0, #0
   155ac:	mov	r1, lr
   155b0:	bl	15224 <__assert_fail@plt+0x3c74>
   155b4:	sub	sp, fp, #8
   155b8:	pop	{r4, sl, fp, pc}
   155bc:	push	{fp, lr}
   155c0:	mov	fp, sp
   155c4:	sub	sp, sp, #48	; 0x30
   155c8:	mov	ip, r0
   155cc:	movw	r0, #37360	; 0x91f0
   155d0:	mov	r3, #32
   155d4:	movt	r0, #2
   155d8:	add	r2, r0, #16
   155dc:	vld1.64	{d16-d17}, [r0], r3
   155e0:	mov	r3, sp
   155e4:	vld1.64	{d18-d19}, [r2]
   155e8:	add	r2, r3, #16
   155ec:	vld1.64	{d20-d21}, [r0]
   155f0:	add	r0, r3, #32
   155f4:	vst1.64	{d18-d19}, [r2]
   155f8:	mov	r2, r3
   155fc:	vst1.64	{d20-d21}, [r0]
   15600:	mov	r0, #28
   15604:	and	r0, r0, r1, lsr #3
   15608:	and	r1, r1, #31
   1560c:	vst1.64	{d16-d17}, [r2], r0
   15610:	mov	r0, #1
   15614:	ldr	lr, [r2, #8]
   15618:	bic	r0, r0, lr, lsr r1
   1561c:	eor	r0, lr, r0, lsl r1
   15620:	mov	r1, ip
   15624:	str	r0, [r2, #8]
   15628:	mov	r0, #0
   1562c:	mvn	r2, #0
   15630:	bl	15224 <__assert_fail@plt+0x3c74>
   15634:	mov	sp, fp
   15638:	pop	{fp, pc}
   1563c:	push	{fp, lr}
   15640:	mov	fp, sp
   15644:	sub	sp, sp, #48	; 0x30
   15648:	movw	r2, #37360	; 0x91f0
   1564c:	mov	r3, #32
   15650:	mov	r1, r0
   15654:	movt	r2, #2
   15658:	add	r0, r2, #16
   1565c:	vld1.64	{d16-d17}, [r2], r3
   15660:	mov	r3, sp
   15664:	vld1.64	{d18-d19}, [r0]
   15668:	add	r0, r3, #16
   1566c:	vld1.64	{d20-d21}, [r2]
   15670:	mov	r2, r3
   15674:	vst1.64	{d18-d19}, [r0]
   15678:	add	r0, r3, #32
   1567c:	vst1.64	{d20-d21}, [r0]
   15680:	mov	r0, #12
   15684:	vst1.64	{d16-d17}, [r2], r0
   15688:	ldr	r0, [r2]
   1568c:	orr	r0, r0, #67108864	; 0x4000000
   15690:	str	r0, [r2]
   15694:	mov	r0, #0
   15698:	mvn	r2, #0
   1569c:	bl	15224 <__assert_fail@plt+0x3c74>
   156a0:	mov	sp, fp
   156a4:	pop	{fp, pc}
   156a8:	push	{fp, lr}
   156ac:	mov	fp, sp
   156b0:	sub	sp, sp, #48	; 0x30
   156b4:	mov	ip, r1
   156b8:	mov	r1, r0
   156bc:	movw	r0, #37360	; 0x91f0
   156c0:	mov	r3, #32
   156c4:	movt	r0, #2
   156c8:	add	r2, r0, #16
   156cc:	vld1.64	{d16-d17}, [r0], r3
   156d0:	mov	r3, sp
   156d4:	vld1.64	{d18-d19}, [r2]
   156d8:	add	r2, r3, #16
   156dc:	vld1.64	{d20-d21}, [r0]
   156e0:	add	r0, r3, #32
   156e4:	vst1.64	{d18-d19}, [r2]
   156e8:	mov	r2, r3
   156ec:	vst1.64	{d20-d21}, [r0]
   156f0:	mov	r0, #12
   156f4:	vst1.64	{d16-d17}, [r2], r0
   156f8:	ldr	r0, [r2]
   156fc:	orr	r0, r0, #67108864	; 0x4000000
   15700:	str	r0, [r2]
   15704:	mov	r0, #0
   15708:	mov	r2, ip
   1570c:	bl	15224 <__assert_fail@plt+0x3c74>
   15710:	mov	sp, fp
   15714:	pop	{fp, pc}
   15718:	push	{r4, sl, fp, lr}
   1571c:	add	fp, sp, #8
   15720:	sub	sp, sp, #96	; 0x60
   15724:	mov	ip, r2
   15728:	mov	r2, sp
   1572c:	vmov.i32	q8, #0	; 0x00000000
   15730:	mov	r4, #28
   15734:	cmp	r1, #10
   15738:	mov	r3, r2
   1573c:	add	lr, r2, #16
   15740:	vst1.64	{d16-d17}, [r3], r4
   15744:	vst1.64	{d16-d17}, [lr]
   15748:	vst1.32	{d16-d17}, [r3]
   1574c:	beq	1579c <__assert_fail@plt+0x41ec>
   15750:	vld1.64	{d16-d17}, [r2], r4
   15754:	vld1.64	{d18-d19}, [lr]
   15758:	add	r3, sp, #48	; 0x30
   1575c:	add	r4, r3, #4
   15760:	vld1.32	{d20-d21}, [r2]
   15764:	add	r2, r3, #20
   15768:	vst1.32	{d16-d17}, [r4]
   1576c:	vst1.32	{d18-d19}, [r2]
   15770:	add	r2, r3, #32
   15774:	vst1.32	{d20-d21}, [r2]
   15778:	str	r1, [sp, #48]	; 0x30
   1577c:	mvn	r2, #0
   15780:	ldr	r1, [sp, #60]	; 0x3c
   15784:	orr	r1, r1, #67108864	; 0x4000000
   15788:	str	r1, [sp, #60]	; 0x3c
   1578c:	mov	r1, ip
   15790:	bl	15224 <__assert_fail@plt+0x3c74>
   15794:	sub	sp, fp, #8
   15798:	pop	{r4, sl, fp, pc}
   1579c:	bl	11598 <abort@plt>
   157a0:	push	{r4, r5, fp, lr}
   157a4:	add	fp, sp, #8
   157a8:	sub	sp, sp, #48	; 0x30
   157ac:	mov	ip, r3
   157b0:	movw	r3, #37360	; 0x91f0
   157b4:	mov	lr, #32
   157b8:	cmp	r1, #0
   157bc:	mov	r5, sp
   157c0:	movt	r3, #2
   157c4:	cmpne	r2, #0
   157c8:	add	r4, r3, #16
   157cc:	vld1.64	{d16-d17}, [r3], lr
   157d0:	vld1.64	{d18-d19}, [r4]
   157d4:	add	r4, r5, #16
   157d8:	vld1.64	{d20-d21}, [r3]
   157dc:	vst1.64	{d16-d17}, [r5], lr
   157e0:	mov	r3, #10
   157e4:	vst1.64	{d18-d19}, [r4]
   157e8:	vst1.64	{d20-d21}, [r5]
   157ec:	str	r3, [sp]
   157f0:	bne	157f8 <__assert_fail@plt+0x4248>
   157f4:	bl	11598 <abort@plt>
   157f8:	str	r2, [sp, #44]	; 0x2c
   157fc:	str	r1, [sp, #40]	; 0x28
   15800:	mov	r3, sp
   15804:	mov	r1, ip
   15808:	mvn	r2, #0
   1580c:	bl	15224 <__assert_fail@plt+0x3c74>
   15810:	sub	sp, fp, #8
   15814:	pop	{r4, r5, fp, pc}
   15818:	push	{r4, r5, fp, lr}
   1581c:	add	fp, sp, #8
   15820:	sub	sp, sp, #48	; 0x30
   15824:	mov	lr, r3
   15828:	movw	r3, #37360	; 0x91f0
   1582c:	mov	ip, #32
   15830:	cmp	r1, #0
   15834:	mov	r5, sp
   15838:	movt	r3, #2
   1583c:	cmpne	r2, #0
   15840:	add	r4, r3, #16
   15844:	vld1.64	{d16-d17}, [r3], ip
   15848:	vld1.64	{d18-d19}, [r4]
   1584c:	add	r4, r5, #16
   15850:	vld1.64	{d20-d21}, [r3]
   15854:	vst1.64	{d16-d17}, [r5], ip
   15858:	mov	r3, #10
   1585c:	vst1.64	{d18-d19}, [r4]
   15860:	vst1.64	{d20-d21}, [r5]
   15864:	str	r3, [sp]
   15868:	bne	15870 <__assert_fail@plt+0x42c0>
   1586c:	bl	11598 <abort@plt>
   15870:	ldr	ip, [fp, #8]
   15874:	str	r2, [sp, #44]	; 0x2c
   15878:	str	r1, [sp, #40]	; 0x28
   1587c:	mov	r3, sp
   15880:	mov	r1, lr
   15884:	mov	r2, ip
   15888:	bl	15224 <__assert_fail@plt+0x3c74>
   1588c:	sub	sp, fp, #8
   15890:	pop	{r4, r5, fp, pc}
   15894:	push	{r4, sl, fp, lr}
   15898:	add	fp, sp, #8
   1589c:	sub	sp, sp, #48	; 0x30
   158a0:	mov	ip, r2
   158a4:	movw	r2, #37360	; 0x91f0
   158a8:	mov	lr, #32
   158ac:	cmp	r0, #0
   158b0:	mov	r4, sp
   158b4:	movt	r2, #2
   158b8:	cmpne	r1, #0
   158bc:	add	r3, r2, #16
   158c0:	vld1.64	{d16-d17}, [r2], lr
   158c4:	vld1.64	{d18-d19}, [r3]
   158c8:	add	r3, r4, #16
   158cc:	vld1.64	{d20-d21}, [r2]
   158d0:	vst1.64	{d16-d17}, [r4], lr
   158d4:	mov	r2, #10
   158d8:	vst1.64	{d18-d19}, [r3]
   158dc:	vst1.64	{d20-d21}, [r4]
   158e0:	str	r2, [sp]
   158e4:	bne	158ec <__assert_fail@plt+0x433c>
   158e8:	bl	11598 <abort@plt>
   158ec:	str	r1, [sp, #44]	; 0x2c
   158f0:	str	r0, [sp, #40]	; 0x28
   158f4:	mov	r3, sp
   158f8:	mov	r0, #0
   158fc:	mov	r1, ip
   15900:	mvn	r2, #0
   15904:	bl	15224 <__assert_fail@plt+0x3c74>
   15908:	sub	sp, fp, #8
   1590c:	pop	{r4, sl, fp, pc}
   15910:	push	{r4, r5, fp, lr}
   15914:	add	fp, sp, #8
   15918:	sub	sp, sp, #48	; 0x30
   1591c:	mov	lr, r2
   15920:	movw	r2, #37360	; 0x91f0
   15924:	mov	ip, r3
   15928:	mov	r3, #32
   1592c:	cmp	r0, #0
   15930:	mov	r5, sp
   15934:	movt	r2, #2
   15938:	cmpne	r1, #0
   1593c:	add	r4, r2, #16
   15940:	vld1.64	{d16-d17}, [r2], r3
   15944:	vld1.64	{d18-d19}, [r4]
   15948:	add	r4, r5, #16
   1594c:	vld1.64	{d20-d21}, [r2]
   15950:	vst1.64	{d16-d17}, [r5], r3
   15954:	mov	r2, #10
   15958:	vst1.64	{d18-d19}, [r4]
   1595c:	vst1.64	{d20-d21}, [r5]
   15960:	str	r2, [sp]
   15964:	bne	1596c <__assert_fail@plt+0x43bc>
   15968:	bl	11598 <abort@plt>
   1596c:	str	r1, [sp, #44]	; 0x2c
   15970:	str	r0, [sp, #40]	; 0x28
   15974:	mov	r3, sp
   15978:	mov	r0, #0
   1597c:	mov	r1, lr
   15980:	mov	r2, ip
   15984:	bl	15224 <__assert_fail@plt+0x3c74>
   15988:	sub	sp, fp, #8
   1598c:	pop	{r4, r5, fp, pc}
   15990:	movw	r3, #37184	; 0x9140
   15994:	movt	r3, #2
   15998:	b	15224 <__assert_fail@plt+0x3c74>
   1599c:	movw	r3, #37184	; 0x9140
   159a0:	mov	r2, r1
   159a4:	mov	r1, r0
   159a8:	mov	r0, #0
   159ac:	movt	r3, #2
   159b0:	b	15224 <__assert_fail@plt+0x3c74>
   159b4:	movw	r3, #37184	; 0x9140
   159b8:	mvn	r2, #0
   159bc:	movt	r3, #2
   159c0:	b	15224 <__assert_fail@plt+0x3c74>
   159c4:	movw	r3, #37184	; 0x9140
   159c8:	mov	r1, r0
   159cc:	mov	r0, #0
   159d0:	mvn	r2, #0
   159d4:	movt	r3, #2
   159d8:	b	15224 <__assert_fail@plt+0x3c74>
   159dc:	push	{r4, r5, fp, lr}
   159e0:	add	fp, sp, #8
   159e4:	mov	r5, r0
   159e8:	mov	r4, r1
   159ec:	mov	r0, #0
   159f0:	mov	r2, #5
   159f4:	mov	r1, r5
   159f8:	bl	1134c <dcgettext@plt>
   159fc:	cmp	r0, r5
   15a00:	popne	{r4, r5, fp, pc}
   15a04:	bl	16cac <__assert_fail@plt+0x56fc>
   15a08:	ldrb	r1, [r0]
   15a0c:	and	r1, r1, #223	; 0xdf
   15a10:	cmp	r1, #71	; 0x47
   15a14:	beq	15a7c <__assert_fail@plt+0x44cc>
   15a18:	cmp	r1, #85	; 0x55
   15a1c:	bne	15aa0 <__assert_fail@plt+0x44f0>
   15a20:	ldrb	r1, [r0, #1]
   15a24:	and	r1, r1, #223	; 0xdf
   15a28:	cmp	r1, #84	; 0x54
   15a2c:	bne	15aa0 <__assert_fail@plt+0x44f0>
   15a30:	ldrb	r1, [r0, #2]
   15a34:	and	r1, r1, #223	; 0xdf
   15a38:	cmp	r1, #70	; 0x46
   15a3c:	ldrbeq	r1, [r0, #3]
   15a40:	cmpeq	r1, #45	; 0x2d
   15a44:	bne	15aa0 <__assert_fail@plt+0x44f0>
   15a48:	ldrb	r1, [r0, #4]
   15a4c:	cmp	r1, #56	; 0x38
   15a50:	ldrbeq	r0, [r0, #5]
   15a54:	cmpeq	r0, #0
   15a58:	bne	15aa0 <__assert_fail@plt+0x44f0>
   15a5c:	ldrb	r1, [r5]
   15a60:	movw	r2, #32876	; 0x806c
   15a64:	movw	r0, #32880	; 0x8070
   15a68:	movt	r2, #1
   15a6c:	movt	r0, #1
   15a70:	cmp	r1, #96	; 0x60
   15a74:	moveq	r0, r2
   15a78:	pop	{r4, r5, fp, pc}
   15a7c:	ldrb	r1, [r0, #1]
   15a80:	and	r1, r1, #223	; 0xdf
   15a84:	cmp	r1, #66	; 0x42
   15a88:	bne	15aa0 <__assert_fail@plt+0x44f0>
   15a8c:	ldrb	r1, [r0, #2]
   15a90:	cmp	r1, #49	; 0x31
   15a94:	ldrbeq	r1, [r0, #3]
   15a98:	cmpeq	r1, #56	; 0x38
   15a9c:	beq	15abc <__assert_fail@plt+0x450c>
   15aa0:	movw	r1, #31855	; 0x7c6f
   15aa4:	movw	r0, #32874	; 0x806a
   15aa8:	cmp	r4, #9
   15aac:	movt	r1, #1
   15ab0:	movt	r0, #1
   15ab4:	moveq	r0, r1
   15ab8:	pop	{r4, r5, fp, pc}
   15abc:	ldrb	r1, [r0, #4]
   15ac0:	cmp	r1, #48	; 0x30
   15ac4:	ldrbeq	r1, [r0, #5]
   15ac8:	cmpeq	r1, #51	; 0x33
   15acc:	bne	15aa0 <__assert_fail@plt+0x44f0>
   15ad0:	ldrb	r1, [r0, #6]
   15ad4:	cmp	r1, #48	; 0x30
   15ad8:	ldrbeq	r0, [r0, #7]
   15adc:	cmpeq	r0, #0
   15ae0:	bne	15aa0 <__assert_fail@plt+0x44f0>
   15ae4:	ldrb	r1, [r5]
   15ae8:	movw	r2, #32884	; 0x8074
   15aec:	movw	r0, #32888	; 0x8078
   15af0:	movt	r2, #1
   15af4:	movt	r0, #1
   15af8:	b	15a70 <__assert_fail@plt+0x44c0>
   15afc:	push	{r4, r5, r6, sl, fp, lr}
   15b00:	add	fp, sp, #16
   15b04:	sub	sp, sp, #8
   15b08:	movw	r5, #27456	; 0x6b40
   15b0c:	movw	r6, #14816	; 0x39e0
   15b10:	mov	r4, r0
   15b14:	mov	r0, #0
   15b18:	mov	r1, #0
   15b1c:	mov	r2, #0
   15b20:	movt	r5, #1
   15b24:	str	r0, [r4]
   15b28:	str	r0, [r4, #4]
   15b2c:	str	r0, [r4, #8]
   15b30:	movt	r6, #1
   15b34:	add	r0, r4, #12
   15b38:	mov	r3, r5
   15b3c:	str	r6, [sp]
   15b40:	bl	16ce4 <_obstack_begin@@Base>
   15b44:	add	r0, r4, #56	; 0x38
   15b48:	mov	r1, #0
   15b4c:	mov	r2, #0
   15b50:	mov	r3, r5
   15b54:	str	r6, [sp]
   15b58:	bl	16ce4 <_obstack_begin@@Base>
   15b5c:	add	r0, r4, #100	; 0x64
   15b60:	mov	r1, #0
   15b64:	mov	r2, #0
   15b68:	mov	r3, r5
   15b6c:	str	r6, [sp]
   15b70:	bl	16ce4 <_obstack_begin@@Base>
   15b74:	sub	sp, fp, #16
   15b78:	pop	{r4, r5, r6, sl, fp, pc}
   15b7c:	push	{r4, sl, fp, lr}
   15b80:	add	fp, sp, #8
   15b84:	mov	r4, r0
   15b88:	add	r0, r0, #12
   15b8c:	mov	r1, #0
   15b90:	bl	16fc4 <_obstack_free@@Base>
   15b94:	add	r0, r4, #56	; 0x38
   15b98:	mov	r1, #0
   15b9c:	bl	16fc4 <_obstack_free@@Base>
   15ba0:	add	r0, r4, #100	; 0x64
   15ba4:	mov	r1, #0
   15ba8:	pop	{r4, sl, fp, lr}
   15bac:	b	16fc4 <_obstack_free@@Base>
   15bb0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15bb4:	add	fp, sp, #24
   15bb8:	mov	r5, r1
   15bbc:	mov	r8, r0
   15bc0:	bl	114e4 <fgetc@plt>
   15bc4:	cmn	r0, #1
   15bc8:	beq	15c2c <__assert_fail@plt+0x467c>
   15bcc:	mov	r7, r0
   15bd0:	add	r6, r5, #12
   15bd4:	add	r4, r5, #24
   15bd8:	ldr	r0, [r5, #24]
   15bdc:	ldr	r1, [r5, #28]
   15be0:	cmp	r1, r0
   15be4:	bne	15bf8 <__assert_fail@plt+0x4648>
   15be8:	mov	r0, r6
   15bec:	mov	r1, #1
   15bf0:	bl	16e38 <_obstack_newchunk@@Base>
   15bf4:	ldr	r0, [r4]
   15bf8:	add	r1, r0, #1
   15bfc:	cmp	r7, #0
   15c00:	str	r1, [r4]
   15c04:	strb	r7, [r0]
   15c08:	bne	15c14 <__assert_fail@plt+0x4664>
   15c0c:	mov	r0, r5
   15c10:	bl	15d58 <__assert_fail@plt+0x47a8>
   15c14:	mov	r0, r8
   15c18:	bl	114e4 <fgetc@plt>
   15c1c:	mov	r7, r0
   15c20:	cmn	r0, #1
   15c24:	bne	15bd8 <__assert_fail@plt+0x4628>
   15c28:	b	15c34 <__assert_fail@plt+0x4684>
   15c2c:	add	r4, r5, #24
   15c30:	add	r6, r5, #12
   15c34:	ldr	r1, [r5, #20]
   15c38:	ldr	r0, [r5, #24]
   15c3c:	cmp	r0, r1
   15c40:	beq	15c78 <__assert_fail@plt+0x46c8>
   15c44:	ldr	r1, [r5, #28]
   15c48:	cmp	r1, r0
   15c4c:	bne	15c60 <__assert_fail@plt+0x46b0>
   15c50:	mov	r0, r6
   15c54:	mov	r1, #1
   15c58:	bl	16e38 <_obstack_newchunk@@Base>
   15c5c:	ldr	r0, [r4]
   15c60:	add	r1, r0, #1
   15c64:	str	r1, [r5, #24]
   15c68:	mov	r1, #0
   15c6c:	strb	r1, [r0]
   15c70:	mov	r0, r5
   15c74:	bl	15d58 <__assert_fail@plt+0x47a8>
   15c78:	ldr	r0, [r5, #68]	; 0x44
   15c7c:	ldr	r1, [r5, #72]	; 0x48
   15c80:	sub	r1, r1, r0
   15c84:	cmp	r1, #4
   15c88:	bcs	15c9c <__assert_fail@plt+0x46ec>
   15c8c:	add	r0, r5, #56	; 0x38
   15c90:	mov	r1, #4
   15c94:	bl	16e38 <_obstack_newchunk@@Base>
   15c98:	ldr	r0, [r5, #68]	; 0x44
   15c9c:	mov	r1, #0
   15ca0:	str	r1, [r0]
   15ca4:	ldr	r1, [r5, #68]	; 0x44
   15ca8:	ldr	r0, [r5, #64]	; 0x40
   15cac:	add	r2, r1, #4
   15cb0:	str	r2, [r5, #68]	; 0x44
   15cb4:	cmp	r2, r0
   15cb8:	ldrbeq	r1, [r5, #96]	; 0x60
   15cbc:	orreq	r1, r1, #2
   15cc0:	strbeq	r1, [r5, #96]	; 0x60
   15cc4:	ldr	r7, [r5, #80]	; 0x50
   15cc8:	ldr	r3, [r5, #60]	; 0x3c
   15ccc:	ldr	r1, [r5, #72]	; 0x48
   15cd0:	add	r2, r7, r2
   15cd4:	bic	r2, r2, r7
   15cd8:	sub	r7, r2, r3
   15cdc:	sub	r3, r1, r3
   15ce0:	str	r2, [r5, #68]	; 0x44
   15ce4:	cmp	r7, r3
   15ce8:	movhi	r2, r1
   15cec:	strhi	r1, [r5, #68]	; 0x44
   15cf0:	str	r0, [r5, #4]
   15cf4:	str	r2, [r5, #64]	; 0x40
   15cf8:	ldr	r0, [r5, #108]	; 0x6c
   15cfc:	ldr	r2, [r5, #112]	; 0x70
   15d00:	cmp	r2, r0
   15d04:	ldrbeq	r1, [r5, #140]	; 0x8c
   15d08:	orreq	r1, r1, #2
   15d0c:	strbeq	r1, [r5, #140]	; 0x8c
   15d10:	ldr	r7, [r5, #124]	; 0x7c
   15d14:	ldr	r3, [r5, #104]	; 0x68
   15d18:	ldr	r1, [r5, #116]	; 0x74
   15d1c:	add	r2, r7, r2
   15d20:	bic	r2, r2, r7
   15d24:	sub	r7, r2, r3
   15d28:	sub	r3, r1, r3
   15d2c:	str	r2, [r5, #112]	; 0x70
   15d30:	cmp	r7, r3
   15d34:	strhi	r1, [r5, #112]	; 0x70
   15d38:	str	r0, [r5, #8]
   15d3c:	movhi	r2, r1
   15d40:	mov	r0, r8
   15d44:	str	r2, [r5, #108]	; 0x6c
   15d48:	bl	11310 <ferror@plt>
   15d4c:	clz	r0, r0
   15d50:	lsr	r0, r0, #5
   15d54:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15d58:	push	{r4, r5, r6, r7, fp, lr}
   15d5c:	add	fp, sp, #16
   15d60:	ldr	r5, [r0, #20]
   15d64:	ldr	r6, [r0, #24]
   15d68:	mov	r4, r0
   15d6c:	cmp	r6, r5
   15d70:	mvn	r7, r5
   15d74:	ldrbeq	r0, [r4, #52]	; 0x34
   15d78:	orreq	r0, r0, #2
   15d7c:	strbeq	r0, [r4, #52]	; 0x34
   15d80:	ldr	r1, [r4, #36]	; 0x24
   15d84:	ldr	r2, [r4, #16]
   15d88:	ldr	r0, [r4, #28]
   15d8c:	add	r3, r1, r6
   15d90:	bic	r1, r3, r1
   15d94:	sub	r3, r1, r2
   15d98:	sub	r2, r0, r2
   15d9c:	str	r1, [r4, #24]
   15da0:	cmp	r3, r2
   15da4:	movhi	r1, r0
   15da8:	strhi	r0, [r4, #24]
   15dac:	str	r1, [r4, #20]
   15db0:	ldr	r0, [r4, #68]	; 0x44
   15db4:	ldr	r1, [r4, #72]	; 0x48
   15db8:	sub	r1, r1, r0
   15dbc:	cmp	r1, #4
   15dc0:	bcs	15dd4 <__assert_fail@plt+0x4824>
   15dc4:	add	r0, r4, #56	; 0x38
   15dc8:	mov	r1, #4
   15dcc:	bl	16e38 <_obstack_newchunk@@Base>
   15dd0:	ldr	r0, [r4, #68]	; 0x44
   15dd4:	str	r5, [r0]
   15dd8:	add	r6, r6, r7
   15ddc:	ldr	r1, [r4, #68]	; 0x44
   15de0:	ldr	r0, [r4, #112]	; 0x70
   15de4:	ldr	r2, [r4, #116]	; 0x74
   15de8:	add	r1, r1, #4
   15dec:	str	r1, [r4, #68]	; 0x44
   15df0:	sub	r1, r2, r0
   15df4:	cmp	r1, #4
   15df8:	bcs	15e0c <__assert_fail@plt+0x485c>
   15dfc:	add	r0, r4, #100	; 0x64
   15e00:	mov	r1, #4
   15e04:	bl	16e38 <_obstack_newchunk@@Base>
   15e08:	ldr	r0, [r4, #112]	; 0x70
   15e0c:	str	r6, [r0]
   15e10:	ldr	r0, [r4]
   15e14:	ldr	r1, [r4, #112]	; 0x70
   15e18:	add	r1, r1, #4
   15e1c:	add	r0, r0, #1
   15e20:	str	r1, [r4, #112]	; 0x70
   15e24:	str	r0, [r4]
   15e28:	pop	{r4, r5, r6, r7, fp, pc}
   15e2c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15e30:	add	fp, sp, #24
   15e34:	movw	r8, #0
   15e38:	mov	r6, r2
   15e3c:	mov	r4, r1
   15e40:	mov	r5, r0
   15e44:	movt	r8, #32752	; 0x7ff0
   15e48:	mov	r0, r5
   15e4c:	mov	r1, r4
   15e50:	mov	r2, r6
   15e54:	bl	112d4 <read@plt>
   15e58:	mov	r7, r0
   15e5c:	cmn	r0, #1
   15e60:	bgt	15e88 <__assert_fail@plt+0x48d8>
   15e64:	bl	114a8 <__errno_location@plt>
   15e68:	ldr	r0, [r0]
   15e6c:	cmp	r0, #4
   15e70:	beq	15e48 <__assert_fail@plt+0x4898>
   15e74:	cmp	r6, r8
   15e78:	bls	15e88 <__assert_fail@plt+0x48d8>
   15e7c:	cmp	r0, #22
   15e80:	mov	r6, r8
   15e84:	beq	15e48 <__assert_fail@plt+0x4898>
   15e88:	mov	r0, r7
   15e8c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15e90:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15e94:	add	fp, sp, #24
   15e98:	sub	sp, sp, #32
   15e9c:	ldr	r6, [fp, #12]
   15ea0:	ldr	r7, [fp, #8]
   15ea4:	mov	r4, r2
   15ea8:	mov	r8, r0
   15eac:	cmp	r1, #0
   15eb0:	beq	15ed8 <__assert_fail@plt+0x4928>
   15eb4:	movw	r2, #32976	; 0x80d0
   15eb8:	mov	r5, r1
   15ebc:	str	r3, [sp, #4]
   15ec0:	str	r4, [sp]
   15ec4:	mov	r0, r8
   15ec8:	mov	r1, #1
   15ecc:	movt	r2, #1
   15ed0:	mov	r3, r5
   15ed4:	b	15ef0 <__assert_fail@plt+0x4940>
   15ed8:	movw	r2, #32988	; 0x80dc
   15edc:	str	r3, [sp]
   15ee0:	mov	r0, r8
   15ee4:	mov	r1, #1
   15ee8:	mov	r3, r4
   15eec:	movt	r2, #1
   15ef0:	bl	11508 <__fprintf_chk@plt>
   15ef4:	movw	r1, #32995	; 0x80e3
   15ef8:	mov	r0, #0
   15efc:	mov	r2, #5
   15f00:	movt	r1, #1
   15f04:	bl	1134c <dcgettext@plt>
   15f08:	movw	r2, #33713	; 0x83b1
   15f0c:	mov	r3, r0
   15f10:	movw	r0, #2022	; 0x7e6
   15f14:	mov	r1, #1
   15f18:	str	r0, [sp]
   15f1c:	movt	r2, #1
   15f20:	mov	r0, r8
   15f24:	bl	11508 <__fprintf_chk@plt>
   15f28:	movw	r4, #32364	; 0x7e6c
   15f2c:	mov	r1, r8
   15f30:	movt	r4, #1
   15f34:	mov	r0, r4
   15f38:	bl	112a4 <fputs_unlocked@plt>
   15f3c:	movw	r1, #32999	; 0x80e7
   15f40:	mov	r0, #0
   15f44:	mov	r2, #5
   15f48:	movt	r1, #1
   15f4c:	bl	1134c <dcgettext@plt>
   15f50:	movw	r3, #33170	; 0x8192
   15f54:	mov	r2, r0
   15f58:	mov	r0, r8
   15f5c:	mov	r1, #1
   15f60:	movt	r3, #1
   15f64:	bl	11508 <__fprintf_chk@plt>
   15f68:	mov	r0, r4
   15f6c:	mov	r1, r8
   15f70:	bl	112a4 <fputs_unlocked@plt>
   15f74:	cmp	r6, #9
   15f78:	bhi	15fb4 <__assert_fail@plt+0x4a04>
   15f7c:	add	r0, pc, #0
   15f80:	ldr	pc, [r0, r6, lsl #2]
   15f84:	andeq	r5, r1, ip, lsr #31
   15f88:	andeq	r5, r1, r0, asr #31
   15f8c:	strdeq	r5, [r1], -r0
   15f90:	andeq	r6, r1, r8, lsl r0
   15f94:	andeq	r6, r1, r0, asr #32
   15f98:	andeq	r6, r1, r8, rrx
   15f9c:	muleq	r1, r0, r0
   15fa0:	andeq	r6, r1, r8, asr #1
   15fa4:	andeq	r6, r1, r8, ror #2
   15fa8:	andeq	r6, r1, r0, lsl r1
   15fac:	sub	sp, fp, #24
   15fb0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15fb4:	movw	r1, #33523	; 0x82f3
   15fb8:	movt	r1, #1
   15fbc:	b	16118 <__assert_fail@plt+0x4b68>
   15fc0:	movw	r1, #33204	; 0x81b4
   15fc4:	mov	r0, #0
   15fc8:	mov	r2, #5
   15fcc:	movt	r1, #1
   15fd0:	bl	1134c <dcgettext@plt>
   15fd4:	ldr	r3, [r7]
   15fd8:	mov	r2, r0
   15fdc:	mov	r0, r8
   15fe0:	mov	r1, #1
   15fe4:	sub	sp, fp, #24
   15fe8:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   15fec:	b	11508 <__fprintf_chk@plt>
   15ff0:	movw	r1, #33220	; 0x81c4
   15ff4:	mov	r0, #0
   15ff8:	mov	r2, #5
   15ffc:	movt	r1, #1
   16000:	bl	1134c <dcgettext@plt>
   16004:	mov	r2, r0
   16008:	ldr	r3, [r7]
   1600c:	ldr	r0, [r7, #4]
   16010:	str	r0, [sp]
   16014:	b	16104 <__assert_fail@plt+0x4b54>
   16018:	movw	r1, #33243	; 0x81db
   1601c:	mov	r0, #0
   16020:	mov	r2, #5
   16024:	movt	r1, #1
   16028:	bl	1134c <dcgettext@plt>
   1602c:	ldr	r3, [r7]
   16030:	mov	r2, r0
   16034:	ldmib	r7, {r0, r1}
   16038:	stm	sp, {r0, r1}
   1603c:	b	16104 <__assert_fail@plt+0x4b54>
   16040:	movw	r1, #33271	; 0x81f7
   16044:	mov	r0, #0
   16048:	mov	r2, #5
   1604c:	movt	r1, #1
   16050:	bl	1134c <dcgettext@plt>
   16054:	ldr	r3, [r7]
   16058:	mov	r2, r0
   1605c:	ldmib	r7, {r0, r1, r7}
   16060:	stm	sp, {r0, r1, r7}
   16064:	b	16104 <__assert_fail@plt+0x4b54>
   16068:	movw	r1, #33303	; 0x8217
   1606c:	mov	r0, #0
   16070:	mov	r2, #5
   16074:	movt	r1, #1
   16078:	bl	1134c <dcgettext@plt>
   1607c:	ldr	r3, [r7]
   16080:	mov	r2, r0
   16084:	ldmib	r7, {r0, r1, r6, r7}
   16088:	stm	sp, {r0, r1, r6, r7}
   1608c:	b	16104 <__assert_fail@plt+0x4b54>
   16090:	movw	r1, #33339	; 0x823b
   16094:	mov	r0, #0
   16098:	mov	r2, #5
   1609c:	movt	r1, #1
   160a0:	bl	1134c <dcgettext@plt>
   160a4:	ldr	r3, [r7]
   160a8:	mov	r2, r0
   160ac:	ldmib	r7, {r0, r1, r6}
   160b0:	ldr	r5, [r7, #16]
   160b4:	ldr	r7, [r7, #20]
   160b8:	stm	sp, {r0, r1, r6}
   160bc:	str	r5, [sp, #12]
   160c0:	str	r7, [sp, #16]
   160c4:	b	16104 <__assert_fail@plt+0x4b54>
   160c8:	movw	r1, #33379	; 0x8263
   160cc:	mov	r0, #0
   160d0:	mov	r2, #5
   160d4:	movt	r1, #1
   160d8:	bl	1134c <dcgettext@plt>
   160dc:	ldr	r3, [r7]
   160e0:	mov	r2, r0
   160e4:	ldmib	r7, {r0, r1, r6}
   160e8:	ldr	r5, [r7, #16]
   160ec:	ldr	r4, [r7, #20]
   160f0:	ldr	r7, [r7, #24]
   160f4:	stm	sp, {r0, r1, r6}
   160f8:	str	r5, [sp, #12]
   160fc:	str	r4, [sp, #16]
   16100:	str	r7, [sp, #20]
   16104:	mov	r0, r8
   16108:	mov	r1, #1
   1610c:	b	161b8 <__assert_fail@plt+0x4c08>
   16110:	movw	r1, #33471	; 0x82bf
   16114:	movt	r1, #1
   16118:	mov	r0, #0
   1611c:	mov	r2, #5
   16120:	bl	1134c <dcgettext@plt>
   16124:	mov	ip, r0
   16128:	ldr	r3, [r7]
   1612c:	ldr	r0, [r7, #4]
   16130:	ldr	r1, [r7, #8]
   16134:	ldr	r6, [r7, #12]
   16138:	ldr	r5, [r7, #16]
   1613c:	ldr	r4, [r7, #20]
   16140:	ldr	r2, [r7, #24]
   16144:	ldr	lr, [r7, #28]
   16148:	ldr	r7, [r7, #32]
   1614c:	stm	sp, {r0, r1, r6}
   16150:	str	r5, [sp, #12]
   16154:	str	r4, [sp, #16]
   16158:	str	r2, [sp, #20]
   1615c:	str	lr, [sp, #24]
   16160:	str	r7, [sp, #28]
   16164:	b	161ac <__assert_fail@plt+0x4bfc>
   16168:	movw	r1, #33423	; 0x828f
   1616c:	mov	r0, #0
   16170:	mov	r2, #5
   16174:	movt	r1, #1
   16178:	bl	1134c <dcgettext@plt>
   1617c:	mov	ip, r0
   16180:	ldr	r3, [r7]
   16184:	ldmib	r7, {r0, r1, r6}
   16188:	ldr	r5, [r7, #16]
   1618c:	ldr	r4, [r7, #20]
   16190:	ldr	r2, [r7, #24]
   16194:	ldr	r7, [r7, #28]
   16198:	stm	sp, {r0, r1, r6}
   1619c:	str	r5, [sp, #12]
   161a0:	str	r4, [sp, #16]
   161a4:	str	r2, [sp, #20]
   161a8:	str	r7, [sp, #24]
   161ac:	mov	r0, r8
   161b0:	mov	r1, #1
   161b4:	mov	r2, ip
   161b8:	bl	11508 <__fprintf_chk@plt>
   161bc:	sub	sp, fp, #24
   161c0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   161c4:	push	{r4, sl, fp, lr}
   161c8:	add	fp, sp, #8
   161cc:	sub	sp, sp, #8
   161d0:	ldr	ip, [fp, #8]
   161d4:	mov	lr, #0
   161d8:	ldr	r4, [ip, lr, lsl #2]
   161dc:	add	lr, lr, #1
   161e0:	cmp	r4, #0
   161e4:	bne	161d8 <__assert_fail@plt+0x4c28>
   161e8:	sub	r4, lr, #1
   161ec:	str	ip, [sp]
   161f0:	str	r4, [sp, #4]
   161f4:	bl	15e90 <__assert_fail@plt+0x48e0>
   161f8:	sub	sp, fp, #8
   161fc:	pop	{r4, sl, fp, pc}
   16200:	push	{fp, lr}
   16204:	mov	fp, sp
   16208:	sub	sp, sp, #48	; 0x30
   1620c:	ldr	ip, [fp, #8]
   16210:	ldr	lr, [ip]
   16214:	cmp	lr, #0
   16218:	str	lr, [sp, #8]
   1621c:	beq	162b8 <__assert_fail@plt+0x4d08>
   16220:	ldr	lr, [ip, #4]
   16224:	cmp	lr, #0
   16228:	str	lr, [sp, #12]
   1622c:	beq	162c0 <__assert_fail@plt+0x4d10>
   16230:	ldr	lr, [ip, #8]
   16234:	cmp	lr, #0
   16238:	str	lr, [sp, #16]
   1623c:	beq	162c8 <__assert_fail@plt+0x4d18>
   16240:	ldr	lr, [ip, #12]
   16244:	cmp	lr, #0
   16248:	str	lr, [sp, #20]
   1624c:	beq	162d0 <__assert_fail@plt+0x4d20>
   16250:	ldr	lr, [ip, #16]
   16254:	cmp	lr, #0
   16258:	str	lr, [sp, #24]
   1625c:	beq	162d8 <__assert_fail@plt+0x4d28>
   16260:	ldr	lr, [ip, #20]
   16264:	cmp	lr, #0
   16268:	str	lr, [sp, #28]
   1626c:	beq	162e0 <__assert_fail@plt+0x4d30>
   16270:	ldr	lr, [ip, #24]
   16274:	cmp	lr, #0
   16278:	str	lr, [sp, #32]
   1627c:	beq	162e8 <__assert_fail@plt+0x4d38>
   16280:	ldr	lr, [ip, #28]
   16284:	cmp	lr, #0
   16288:	str	lr, [sp, #36]	; 0x24
   1628c:	beq	162f0 <__assert_fail@plt+0x4d40>
   16290:	ldr	lr, [ip, #32]
   16294:	cmp	lr, #0
   16298:	str	lr, [sp, #40]	; 0x28
   1629c:	beq	162f8 <__assert_fail@plt+0x4d48>
   162a0:	ldr	lr, [ip, #36]	; 0x24
   162a4:	mov	ip, #10
   162a8:	cmp	lr, #0
   162ac:	str	lr, [sp, #44]	; 0x2c
   162b0:	movweq	ip, #9
   162b4:	b	162fc <__assert_fail@plt+0x4d4c>
   162b8:	mov	ip, #0
   162bc:	b	162fc <__assert_fail@plt+0x4d4c>
   162c0:	mov	ip, #1
   162c4:	b	162fc <__assert_fail@plt+0x4d4c>
   162c8:	mov	ip, #2
   162cc:	b	162fc <__assert_fail@plt+0x4d4c>
   162d0:	mov	ip, #3
   162d4:	b	162fc <__assert_fail@plt+0x4d4c>
   162d8:	mov	ip, #4
   162dc:	b	162fc <__assert_fail@plt+0x4d4c>
   162e0:	mov	ip, #5
   162e4:	b	162fc <__assert_fail@plt+0x4d4c>
   162e8:	mov	ip, #6
   162ec:	b	162fc <__assert_fail@plt+0x4d4c>
   162f0:	mov	ip, #7
   162f4:	b	162fc <__assert_fail@plt+0x4d4c>
   162f8:	mov	ip, #8
   162fc:	add	lr, sp, #8
   16300:	str	ip, [sp, #4]
   16304:	str	lr, [sp]
   16308:	bl	15e90 <__assert_fail@plt+0x48e0>
   1630c:	mov	sp, fp
   16310:	pop	{fp, pc}
   16314:	push	{fp, lr}
   16318:	mov	fp, sp
   1631c:	sub	sp, sp, #56	; 0x38
   16320:	add	ip, fp, #8
   16324:	str	ip, [sp, #12]
   16328:	ldr	lr, [fp, #8]
   1632c:	cmp	lr, #0
   16330:	str	lr, [sp, #16]
   16334:	beq	163d0 <__assert_fail@plt+0x4e20>
   16338:	ldr	lr, [ip, #4]
   1633c:	cmp	lr, #0
   16340:	str	lr, [sp, #20]
   16344:	beq	163d8 <__assert_fail@plt+0x4e28>
   16348:	ldr	lr, [ip, #8]
   1634c:	cmp	lr, #0
   16350:	str	lr, [sp, #24]
   16354:	beq	163e0 <__assert_fail@plt+0x4e30>
   16358:	ldr	lr, [ip, #12]
   1635c:	cmp	lr, #0
   16360:	str	lr, [sp, #28]
   16364:	beq	163e8 <__assert_fail@plt+0x4e38>
   16368:	ldr	lr, [ip, #16]
   1636c:	cmp	lr, #0
   16370:	str	lr, [sp, #32]
   16374:	beq	163f0 <__assert_fail@plt+0x4e40>
   16378:	ldr	lr, [ip, #20]
   1637c:	cmp	lr, #0
   16380:	str	lr, [sp, #36]	; 0x24
   16384:	beq	163f8 <__assert_fail@plt+0x4e48>
   16388:	ldr	lr, [ip, #24]
   1638c:	cmp	lr, #0
   16390:	str	lr, [sp, #40]	; 0x28
   16394:	beq	16400 <__assert_fail@plt+0x4e50>
   16398:	ldr	lr, [ip, #28]
   1639c:	cmp	lr, #0
   163a0:	str	lr, [sp, #44]	; 0x2c
   163a4:	beq	16408 <__assert_fail@plt+0x4e58>
   163a8:	ldr	lr, [ip, #32]
   163ac:	cmp	lr, #0
   163b0:	str	lr, [sp, #48]	; 0x30
   163b4:	beq	16410 <__assert_fail@plt+0x4e60>
   163b8:	ldr	lr, [ip, #36]	; 0x24
   163bc:	mov	ip, #10
   163c0:	cmp	lr, #0
   163c4:	str	lr, [sp, #52]	; 0x34
   163c8:	movweq	ip, #9
   163cc:	b	16414 <__assert_fail@plt+0x4e64>
   163d0:	mov	ip, #0
   163d4:	b	16414 <__assert_fail@plt+0x4e64>
   163d8:	mov	ip, #1
   163dc:	b	16414 <__assert_fail@plt+0x4e64>
   163e0:	mov	ip, #2
   163e4:	b	16414 <__assert_fail@plt+0x4e64>
   163e8:	mov	ip, #3
   163ec:	b	16414 <__assert_fail@plt+0x4e64>
   163f0:	mov	ip, #4
   163f4:	b	16414 <__assert_fail@plt+0x4e64>
   163f8:	mov	ip, #5
   163fc:	b	16414 <__assert_fail@plt+0x4e64>
   16400:	mov	ip, #6
   16404:	b	16414 <__assert_fail@plt+0x4e64>
   16408:	mov	ip, #7
   1640c:	b	16414 <__assert_fail@plt+0x4e64>
   16410:	mov	ip, #8
   16414:	add	lr, sp, #16
   16418:	str	ip, [sp, #4]
   1641c:	str	lr, [sp]
   16420:	bl	15e90 <__assert_fail@plt+0x48e0>
   16424:	mov	sp, fp
   16428:	pop	{fp, pc}
   1642c:	push	{fp, lr}
   16430:	mov	fp, sp
   16434:	movw	r0, #37268	; 0x9194
   16438:	movt	r0, #2
   1643c:	ldr	r1, [r0]
   16440:	movw	r0, #32364	; 0x7e6c
   16444:	movt	r0, #1
   16448:	bl	112a4 <fputs_unlocked@plt>
   1644c:	movw	r1, #33583	; 0x832f
   16450:	mov	r0, #0
   16454:	mov	r2, #5
   16458:	movt	r1, #1
   1645c:	bl	1134c <dcgettext@plt>
   16460:	movw	r2, #33603	; 0x8343
   16464:	mov	r1, r0
   16468:	mov	r0, #1
   1646c:	movt	r2, #1
   16470:	bl	114f0 <__printf_chk@plt>
   16474:	movw	r1, #33625	; 0x8359
   16478:	mov	r0, #0
   1647c:	mov	r2, #5
   16480:	movt	r1, #1
   16484:	bl	1134c <dcgettext@plt>
   16488:	movw	r2, #31634	; 0x7b92
   1648c:	movw	r3, #32173	; 0x7dad
   16490:	mov	r1, r0
   16494:	mov	r0, #1
   16498:	movt	r2, #1
   1649c:	movt	r3, #1
   164a0:	bl	114f0 <__printf_chk@plt>
   164a4:	movw	r1, #33645	; 0x836d
   164a8:	mov	r0, #0
   164ac:	mov	r2, #5
   164b0:	movt	r1, #1
   164b4:	bl	1134c <dcgettext@plt>
   164b8:	movw	r2, #33684	; 0x8394
   164bc:	mov	r1, r0
   164c0:	mov	r0, #1
   164c4:	movt	r2, #1
   164c8:	pop	{fp, lr}
   164cc:	b	114f0 <__printf_chk@plt>
   164d0:	push	{r4, r5, r6, sl, fp, lr}
   164d4:	add	fp, sp, #16
   164d8:	mov	r4, r2
   164dc:	mov	r5, r1
   164e0:	mov	r6, r0
   164e4:	bl	170d4 <_obstack_memory_used@@Base+0x78>
   164e8:	cmp	r0, #0
   164ec:	popne	{r4, r5, r6, sl, fp, pc}
   164f0:	cmp	r6, #0
   164f4:	beq	16508 <__assert_fail@plt+0x4f58>
   164f8:	cmp	r5, #0
   164fc:	cmpne	r4, #0
   16500:	bne	16508 <__assert_fail@plt+0x4f58>
   16504:	pop	{r4, r5, r6, sl, fp, pc}
   16508:	bl	16aa8 <__assert_fail@plt+0x54f8>
   1650c:	push	{r4, r5, r6, sl, fp, lr}
   16510:	add	fp, sp, #16
   16514:	mov	r4, r2
   16518:	mov	r5, r1
   1651c:	mov	r6, r0
   16520:	bl	170d4 <_obstack_memory_used@@Base+0x78>
   16524:	cmp	r0, #0
   16528:	popne	{r4, r5, r6, sl, fp, pc}
   1652c:	cmp	r6, #0
   16530:	beq	16544 <__assert_fail@plt+0x4f94>
   16534:	cmp	r5, #0
   16538:	cmpne	r4, #0
   1653c:	bne	16544 <__assert_fail@plt+0x4f94>
   16540:	pop	{r4, r5, r6, sl, fp, pc}
   16544:	bl	16aa8 <__assert_fail@plt+0x54f8>
   16548:	push	{fp, lr}
   1654c:	mov	fp, sp
   16550:	bl	16b40 <__assert_fail@plt+0x5590>
   16554:	cmp	r0, #0
   16558:	popne	{fp, pc}
   1655c:	bl	16aa8 <__assert_fail@plt+0x54f8>
   16560:	push	{fp, lr}
   16564:	mov	fp, sp
   16568:	bl	16b40 <__assert_fail@plt+0x5590>
   1656c:	cmp	r0, #0
   16570:	popne	{fp, pc}
   16574:	bl	16aa8 <__assert_fail@plt+0x54f8>
   16578:	push	{fp, lr}
   1657c:	mov	fp, sp
   16580:	bl	16b40 <__assert_fail@plt+0x5590>
   16584:	cmp	r0, #0
   16588:	popne	{fp, pc}
   1658c:	bl	16aa8 <__assert_fail@plt+0x54f8>
   16590:	push	{r4, r5, fp, lr}
   16594:	add	fp, sp, #8
   16598:	mov	r4, r1
   1659c:	mov	r5, r0
   165a0:	bl	16b70 <__assert_fail@plt+0x55c0>
   165a4:	cmp	r0, #0
   165a8:	popne	{r4, r5, fp, pc}
   165ac:	cmp	r5, #0
   165b0:	beq	165c0 <__assert_fail@plt+0x5010>
   165b4:	cmp	r4, #0
   165b8:	bne	165c0 <__assert_fail@plt+0x5010>
   165bc:	pop	{r4, r5, fp, pc}
   165c0:	bl	16aa8 <__assert_fail@plt+0x54f8>
   165c4:	push	{fp, lr}
   165c8:	mov	fp, sp
   165cc:	cmp	r1, #0
   165d0:	orreq	r1, r1, #1
   165d4:	bl	16b70 <__assert_fail@plt+0x55c0>
   165d8:	cmp	r0, #0
   165dc:	popne	{fp, pc}
   165e0:	bl	16aa8 <__assert_fail@plt+0x54f8>
   165e4:	push	{fp, lr}
   165e8:	mov	fp, sp
   165ec:	clz	r3, r2
   165f0:	lsr	ip, r3, #5
   165f4:	clz	r3, r1
   165f8:	lsr	r3, r3, #5
   165fc:	orrs	r3, r3, ip
   16600:	movwne	r1, #1
   16604:	movwne	r2, #1
   16608:	bl	170d4 <_obstack_memory_used@@Base+0x78>
   1660c:	cmp	r0, #0
   16610:	popne	{fp, pc}
   16614:	bl	16aa8 <__assert_fail@plt+0x54f8>
   16618:	push	{fp, lr}
   1661c:	mov	fp, sp
   16620:	mov	r2, r1
   16624:	mov	r1, r0
   16628:	mov	r0, #0
   1662c:	bl	170d4 <_obstack_memory_used@@Base+0x78>
   16630:	cmp	r0, #0
   16634:	popne	{fp, pc}
   16638:	bl	16aa8 <__assert_fail@plt+0x54f8>
   1663c:	push	{fp, lr}
   16640:	mov	fp, sp
   16644:	mov	r2, r1
   16648:	mov	r1, r0
   1664c:	clz	r0, r2
   16650:	clz	r3, r1
   16654:	lsr	r0, r0, #5
   16658:	lsr	r3, r3, #5
   1665c:	orrs	r0, r3, r0
   16660:	movwne	r1, #1
   16664:	movwne	r2, #1
   16668:	mov	r0, #0
   1666c:	bl	170d4 <_obstack_memory_used@@Base+0x78>
   16670:	cmp	r0, #0
   16674:	popne	{fp, pc}
   16678:	bl	16aa8 <__assert_fail@plt+0x54f8>
   1667c:	push	{r4, r5, r6, sl, fp, lr}
   16680:	add	fp, sp, #16
   16684:	ldr	r5, [r1]
   16688:	mov	r4, r1
   1668c:	mov	r6, r0
   16690:	cmp	r0, #0
   16694:	beq	166ac <__assert_fail@plt+0x50fc>
   16698:	mov	r0, #1
   1669c:	add	r0, r0, r5, lsr #1
   166a0:	adds	r5, r5, r0
   166a4:	bcc	166b4 <__assert_fail@plt+0x5104>
   166a8:	b	166f0 <__assert_fail@plt+0x5140>
   166ac:	cmp	r5, #0
   166b0:	movweq	r5, #64	; 0x40
   166b4:	mov	r0, r6
   166b8:	mov	r1, r5
   166bc:	mov	r2, #1
   166c0:	bl	170d4 <_obstack_memory_used@@Base+0x78>
   166c4:	cmp	r5, #0
   166c8:	mov	r1, r5
   166cc:	movwne	r1, #1
   166d0:	cmp	r0, #0
   166d4:	bne	166e8 <__assert_fail@plt+0x5138>
   166d8:	clz	r2, r6
   166dc:	lsr	r2, r2, #5
   166e0:	orrs	r1, r2, r1
   166e4:	bne	166f0 <__assert_fail@plt+0x5140>
   166e8:	str	r5, [r4]
   166ec:	pop	{r4, r5, r6, sl, fp, pc}
   166f0:	bl	16aa8 <__assert_fail@plt+0x54f8>
   166f4:	push	{r4, r5, r6, r7, fp, lr}
   166f8:	add	fp, sp, #16
   166fc:	ldr	r5, [r1]
   16700:	mov	r6, r2
   16704:	mov	r4, r1
   16708:	mov	r7, r0
   1670c:	cmp	r0, #0
   16710:	beq	16728 <__assert_fail@plt+0x5178>
   16714:	mov	r0, #1
   16718:	add	r0, r0, r5, lsr #1
   1671c:	adds	r5, r5, r0
   16720:	bcc	16740 <__assert_fail@plt+0x5190>
   16724:	b	16774 <__assert_fail@plt+0x51c4>
   16728:	cmp	r5, #0
   1672c:	bne	16740 <__assert_fail@plt+0x5190>
   16730:	mov	r0, #64	; 0x40
   16734:	cmp	r6, #64	; 0x40
   16738:	udiv	r5, r0, r6
   1673c:	addhi	r5, r5, #1
   16740:	mov	r0, r7
   16744:	mov	r1, r5
   16748:	mov	r2, r6
   1674c:	bl	170d4 <_obstack_memory_used@@Base+0x78>
   16750:	cmp	r0, #0
   16754:	bne	1676c <__assert_fail@plt+0x51bc>
   16758:	cmp	r7, #0
   1675c:	beq	16774 <__assert_fail@plt+0x51c4>
   16760:	cmp	r6, #0
   16764:	cmpne	r5, #0
   16768:	bne	16774 <__assert_fail@plt+0x51c4>
   1676c:	str	r5, [r4]
   16770:	pop	{r4, r5, r6, r7, fp, pc}
   16774:	bl	16aa8 <__assert_fail@plt+0x54f8>
   16778:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1677c:	add	fp, sp, #24
   16780:	mov	r8, r1
   16784:	ldr	r1, [r1]
   16788:	mov	r5, r0
   1678c:	add	r0, r1, r1, asr #1
   16790:	cmp	r0, r1
   16794:	mvnvs	r0, #-2147483648	; 0x80000000
   16798:	cmp	r0, r3
   1679c:	mov	r7, r0
   167a0:	movgt	r7, r3
   167a4:	cmn	r3, #1
   167a8:	movle	r7, r0
   167ac:	ldr	r0, [fp, #8]
   167b0:	cmn	r0, #1
   167b4:	ble	167dc <__assert_fail@plt+0x522c>
   167b8:	cmp	r0, #0
   167bc:	beq	16830 <__assert_fail@plt+0x5280>
   167c0:	cmn	r7, #1
   167c4:	ble	16804 <__assert_fail@plt+0x5254>
   167c8:	mvn	r4, #-2147483648	; 0x80000000
   167cc:	udiv	r6, r4, r0
   167d0:	cmp	r6, r7
   167d4:	bge	16830 <__assert_fail@plt+0x5280>
   167d8:	b	16840 <__assert_fail@plt+0x5290>
   167dc:	cmn	r7, #1
   167e0:	ble	16820 <__assert_fail@plt+0x5270>
   167e4:	cmn	r0, #1
   167e8:	beq	16830 <__assert_fail@plt+0x5280>
   167ec:	mov	r6, #-2147483648	; 0x80000000
   167f0:	mvn	r4, #-2147483648	; 0x80000000
   167f4:	sdiv	r6, r6, r0
   167f8:	cmp	r6, r7
   167fc:	bge	16830 <__assert_fail@plt+0x5280>
   16800:	b	16840 <__assert_fail@plt+0x5290>
   16804:	beq	16830 <__assert_fail@plt+0x5280>
   16808:	mov	r6, #-2147483648	; 0x80000000
   1680c:	mvn	r4, #-2147483648	; 0x80000000
   16810:	sdiv	r6, r6, r7
   16814:	cmp	r6, r0
   16818:	bge	16830 <__assert_fail@plt+0x5280>
   1681c:	b	16840 <__assert_fail@plt+0x5290>
   16820:	mvn	r4, #-2147483648	; 0x80000000
   16824:	sdiv	r6, r4, r0
   16828:	cmp	r7, r6
   1682c:	blt	16840 <__assert_fail@plt+0x5290>
   16830:	mul	r6, r7, r0
   16834:	mov	r4, #64	; 0x40
   16838:	cmp	r6, #63	; 0x3f
   1683c:	bgt	16848 <__assert_fail@plt+0x5298>
   16840:	sdiv	r7, r4, r0
   16844:	mul	r6, r7, r0
   16848:	cmp	r5, #0
   1684c:	moveq	r4, #0
   16850:	streq	r4, [r8]
   16854:	sub	r4, r7, r1
   16858:	cmp	r4, r2
   1685c:	bge	16908 <__assert_fail@plt+0x5358>
   16860:	add	r7, r1, r2
   16864:	mov	r6, #0
   16868:	mov	r2, #0
   1686c:	cmp	r7, r3
   16870:	movwgt	r6, #1
   16874:	cmn	r3, #1
   16878:	movwgt	r2, #1
   1687c:	cmp	r7, r1
   16880:	bvs	1693c <__assert_fail@plt+0x538c>
   16884:	ands	r1, r2, r6
   16888:	bne	1693c <__assert_fail@plt+0x538c>
   1688c:	cmn	r0, #1
   16890:	ble	168b8 <__assert_fail@plt+0x5308>
   16894:	cmp	r0, #0
   16898:	beq	16904 <__assert_fail@plt+0x5354>
   1689c:	cmn	r7, #1
   168a0:	ble	168dc <__assert_fail@plt+0x532c>
   168a4:	mvn	r1, #-2147483648	; 0x80000000
   168a8:	udiv	r1, r1, r0
   168ac:	cmp	r1, r7
   168b0:	bge	16904 <__assert_fail@plt+0x5354>
   168b4:	b	1693c <__assert_fail@plt+0x538c>
   168b8:	cmn	r7, #1
   168bc:	ble	168f4 <__assert_fail@plt+0x5344>
   168c0:	cmn	r0, #1
   168c4:	beq	16904 <__assert_fail@plt+0x5354>
   168c8:	mov	r1, #-2147483648	; 0x80000000
   168cc:	sdiv	r1, r1, r0
   168d0:	cmp	r1, r7
   168d4:	bge	16904 <__assert_fail@plt+0x5354>
   168d8:	b	1693c <__assert_fail@plt+0x538c>
   168dc:	beq	16904 <__assert_fail@plt+0x5354>
   168e0:	mov	r1, #-2147483648	; 0x80000000
   168e4:	sdiv	r1, r1, r7
   168e8:	cmp	r1, r0
   168ec:	bge	16904 <__assert_fail@plt+0x5354>
   168f0:	b	1693c <__assert_fail@plt+0x538c>
   168f4:	mvn	r1, #-2147483648	; 0x80000000
   168f8:	sdiv	r1, r1, r0
   168fc:	cmp	r7, r1
   16900:	blt	1693c <__assert_fail@plt+0x538c>
   16904:	mul	r6, r7, r0
   16908:	mov	r0, r5
   1690c:	mov	r1, r6
   16910:	bl	16b70 <__assert_fail@plt+0x55c0>
   16914:	cmp	r6, #0
   16918:	movwne	r6, #1
   1691c:	cmp	r0, #0
   16920:	bne	16934 <__assert_fail@plt+0x5384>
   16924:	clz	r1, r5
   16928:	lsr	r1, r1, #5
   1692c:	orrs	r1, r1, r6
   16930:	bne	1693c <__assert_fail@plt+0x538c>
   16934:	str	r7, [r8]
   16938:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1693c:	bl	16aa8 <__assert_fail@plt+0x54f8>
   16940:	push	{fp, lr}
   16944:	mov	fp, sp
   16948:	mov	r1, #1
   1694c:	bl	16aec <__assert_fail@plt+0x553c>
   16950:	cmp	r0, #0
   16954:	popne	{fp, pc}
   16958:	bl	16aa8 <__assert_fail@plt+0x54f8>
   1695c:	push	{fp, lr}
   16960:	mov	fp, sp
   16964:	bl	16aec <__assert_fail@plt+0x553c>
   16968:	cmp	r0, #0
   1696c:	popne	{fp, pc}
   16970:	bl	16aa8 <__assert_fail@plt+0x54f8>
   16974:	push	{fp, lr}
   16978:	mov	fp, sp
   1697c:	mov	r1, #1
   16980:	bl	16aec <__assert_fail@plt+0x553c>
   16984:	cmp	r0, #0
   16988:	popne	{fp, pc}
   1698c:	bl	16aa8 <__assert_fail@plt+0x54f8>
   16990:	push	{fp, lr}
   16994:	mov	fp, sp
   16998:	bl	16aec <__assert_fail@plt+0x553c>
   1699c:	cmp	r0, #0
   169a0:	popne	{fp, pc}
   169a4:	bl	16aa8 <__assert_fail@plt+0x54f8>
   169a8:	push	{r4, r5, r6, sl, fp, lr}
   169ac:	add	fp, sp, #16
   169b0:	mov	r5, r0
   169b4:	mov	r0, r1
   169b8:	mov	r4, r1
   169bc:	bl	16b40 <__assert_fail@plt+0x5590>
   169c0:	cmp	r0, #0
   169c4:	beq	169e0 <__assert_fail@plt+0x5430>
   169c8:	mov	r1, r5
   169cc:	mov	r2, r4
   169d0:	mov	r6, r0
   169d4:	bl	11328 <memcpy@plt>
   169d8:	mov	r0, r6
   169dc:	pop	{r4, r5, r6, sl, fp, pc}
   169e0:	bl	16aa8 <__assert_fail@plt+0x54f8>
   169e4:	push	{r4, r5, r6, sl, fp, lr}
   169e8:	add	fp, sp, #16
   169ec:	mov	r5, r0
   169f0:	mov	r0, r1
   169f4:	mov	r4, r1
   169f8:	bl	16b40 <__assert_fail@plt+0x5590>
   169fc:	cmp	r0, #0
   16a00:	beq	16a1c <__assert_fail@plt+0x546c>
   16a04:	mov	r1, r5
   16a08:	mov	r2, r4
   16a0c:	mov	r6, r0
   16a10:	bl	11328 <memcpy@plt>
   16a14:	mov	r0, r6
   16a18:	pop	{r4, r5, r6, sl, fp, pc}
   16a1c:	bl	16aa8 <__assert_fail@plt+0x54f8>
   16a20:	push	{r4, r5, r6, sl, fp, lr}
   16a24:	add	fp, sp, #16
   16a28:	mov	r5, r0
   16a2c:	add	r0, r1, #1
   16a30:	mov	r4, r1
   16a34:	bl	16b40 <__assert_fail@plt+0x5590>
   16a38:	cmp	r0, #0
   16a3c:	beq	16a64 <__assert_fail@plt+0x54b4>
   16a40:	mov	r6, r0
   16a44:	mov	r0, #0
   16a48:	mov	r1, r5
   16a4c:	mov	r2, r4
   16a50:	strb	r0, [r6, r4]
   16a54:	mov	r0, r6
   16a58:	bl	11328 <memcpy@plt>
   16a5c:	mov	r0, r6
   16a60:	pop	{r4, r5, r6, sl, fp, pc}
   16a64:	bl	16aa8 <__assert_fail@plt+0x54f8>
   16a68:	push	{r4, r5, r6, sl, fp, lr}
   16a6c:	add	fp, sp, #16
   16a70:	mov	r4, r0
   16a74:	bl	11484 <strlen@plt>
   16a78:	add	r5, r0, #1
   16a7c:	mov	r0, r5
   16a80:	bl	16b40 <__assert_fail@plt+0x5590>
   16a84:	cmp	r0, #0
   16a88:	beq	16aa4 <__assert_fail@plt+0x54f4>
   16a8c:	mov	r1, r4
   16a90:	mov	r2, r5
   16a94:	mov	r6, r0
   16a98:	bl	11328 <memcpy@plt>
   16a9c:	mov	r0, r6
   16aa0:	pop	{r4, r5, r6, sl, fp, pc}
   16aa4:	bl	16aa8 <__assert_fail@plt+0x54f8>
   16aa8:	push	{fp, lr}
   16aac:	mov	fp, sp
   16ab0:	movw	r0, #37164	; 0x912c
   16ab4:	movw	r1, #33760	; 0x83e0
   16ab8:	mov	r2, #5
   16abc:	movt	r0, #2
   16ac0:	movt	r1, #1
   16ac4:	ldr	r4, [r0]
   16ac8:	mov	r0, #0
   16acc:	bl	1134c <dcgettext@plt>
   16ad0:	movw	r2, #32692	; 0x7fb4
   16ad4:	mov	r3, r0
   16ad8:	mov	r0, r4
   16adc:	mov	r1, #0
   16ae0:	movt	r2, #1
   16ae4:	bl	113e8 <error@plt>
   16ae8:	bl	11598 <abort@plt>
   16aec:	clz	r2, r1
   16af0:	clz	r3, r0
   16af4:	lsr	r2, r2, #5
   16af8:	lsr	r3, r3, #5
   16afc:	orrs	r2, r3, r2
   16b00:	movwne	r1, #1
   16b04:	movwne	r0, #1
   16b08:	cmp	r1, #0
   16b0c:	beq	16b3c <__assert_fail@plt+0x558c>
   16b10:	mvn	r2, #-2147483648	; 0x80000000
   16b14:	udiv	r2, r2, r1
   16b18:	cmp	r2, r0
   16b1c:	bcs	16b3c <__assert_fail@plt+0x558c>
   16b20:	push	{fp, lr}
   16b24:	mov	fp, sp
   16b28:	bl	114a8 <__errno_location@plt>
   16b2c:	mov	r1, #12
   16b30:	str	r1, [r0]
   16b34:	mov	r0, #0
   16b38:	pop	{fp, pc}
   16b3c:	b	11298 <calloc@plt>
   16b40:	cmp	r0, #0
   16b44:	movweq	r0, #1
   16b48:	cmn	r0, #1
   16b4c:	ble	16b54 <__assert_fail@plt+0x55a4>
   16b50:	b	11418 <malloc@plt>
   16b54:	push	{fp, lr}
   16b58:	mov	fp, sp
   16b5c:	bl	114a8 <__errno_location@plt>
   16b60:	mov	r1, #12
   16b64:	str	r1, [r0]
   16b68:	mov	r0, #0
   16b6c:	pop	{fp, pc}
   16b70:	push	{fp, lr}
   16b74:	mov	fp, sp
   16b78:	cmp	r0, #0
   16b7c:	beq	16b98 <__assert_fail@plt+0x55e8>
   16b80:	cmp	r1, #0
   16b84:	beq	16ba4 <__assert_fail@plt+0x55f4>
   16b88:	cmn	r1, #1
   16b8c:	ble	16bb0 <__assert_fail@plt+0x5600>
   16b90:	pop	{fp, lr}
   16b94:	b	11364 <realloc@plt>
   16b98:	mov	r0, r1
   16b9c:	pop	{fp, lr}
   16ba0:	b	16b40 <__assert_fail@plt+0x5590>
   16ba4:	bl	139e0 <__assert_fail@plt+0x2430>
   16ba8:	mov	r0, #0
   16bac:	pop	{fp, pc}
   16bb0:	bl	114a8 <__errno_location@plt>
   16bb4:	mov	r1, #12
   16bb8:	str	r1, [r0]
   16bbc:	mov	r0, #0
   16bc0:	pop	{fp, pc}
   16bc4:	push	{r4, r5, r6, sl, fp, lr}
   16bc8:	add	fp, sp, #16
   16bcc:	mov	r4, r0
   16bd0:	bl	113d0 <__fpending@plt>
   16bd4:	ldr	r6, [r4]
   16bd8:	mov	r5, r0
   16bdc:	mov	r0, r4
   16be0:	bl	138e8 <__assert_fail@plt+0x2338>
   16be4:	tst	r6, #32
   16be8:	bne	16c20 <__assert_fail@plt+0x5670>
   16bec:	cmp	r0, #0
   16bf0:	mov	r4, r0
   16bf4:	mvnne	r4, #0
   16bf8:	cmp	r5, #0
   16bfc:	bne	16c2c <__assert_fail@plt+0x567c>
   16c00:	cmp	r0, #0
   16c04:	beq	16c2c <__assert_fail@plt+0x567c>
   16c08:	bl	114a8 <__errno_location@plt>
   16c0c:	ldr	r0, [r0]
   16c10:	subs	r4, r0, #9
   16c14:	mvnne	r4, #0
   16c18:	mov	r0, r4
   16c1c:	pop	{r4, r5, r6, sl, fp, pc}
   16c20:	mvn	r4, #0
   16c24:	cmp	r0, #0
   16c28:	beq	16c34 <__assert_fail@plt+0x5684>
   16c2c:	mov	r0, r4
   16c30:	pop	{r4, r5, r6, sl, fp, pc}
   16c34:	bl	114a8 <__errno_location@plt>
   16c38:	mov	r1, #0
   16c3c:	str	r1, [r0]
   16c40:	mov	r0, r4
   16c44:	pop	{r4, r5, r6, sl, fp, pc}
   16c48:	push	{r4, sl, fp, lr}
   16c4c:	add	fp, sp, #8
   16c50:	sub	sp, sp, #264	; 0x108
   16c54:	add	r1, sp, #7
   16c58:	movw	r2, #257	; 0x101
   16c5c:	bl	17110 <_obstack_memory_used@@Base+0xb4>
   16c60:	mov	r4, #0
   16c64:	cmp	r0, #0
   16c68:	bne	16ca0 <__assert_fail@plt+0x56f0>
   16c6c:	movw	r1, #33777	; 0x83f1
   16c70:	add	r0, sp, #7
   16c74:	movt	r1, #1
   16c78:	bl	112bc <strcmp@plt>
   16c7c:	cmp	r0, #0
   16c80:	beq	16ca0 <__assert_fail@plt+0x56f0>
   16c84:	movw	r1, #33779	; 0x83f3
   16c88:	add	r0, sp, #7
   16c8c:	movt	r1, #1
   16c90:	bl	112bc <strcmp@plt>
   16c94:	mov	r4, r0
   16c98:	cmp	r0, #0
   16c9c:	movwne	r4, #1
   16ca0:	mov	r0, r4
   16ca4:	sub	sp, fp, #8
   16ca8:	pop	{r4, sl, fp, pc}
   16cac:	push	{fp, lr}
   16cb0:	mov	fp, sp
   16cb4:	mov	r0, #14
   16cb8:	bl	11550 <nl_langinfo@plt>
   16cbc:	movw	r1, #32365	; 0x7e6d
   16cc0:	cmp	r0, #0
   16cc4:	movt	r1, #1
   16cc8:	movne	r1, r0
   16ccc:	movw	r0, #33785	; 0x83f9
   16cd0:	ldrb	r2, [r1]
   16cd4:	movt	r0, #1
   16cd8:	cmp	r2, #0
   16cdc:	movne	r0, r1
   16ce0:	pop	{fp, pc}

00016ce4 <_obstack_begin@@Base>:
   16ce4:	push	{r4, r5, r6, sl, fp, lr}
   16ce8:	add	fp, sp, #16
   16cec:	cmp	r1, #0
   16cf0:	mov	r4, r0
   16cf4:	str	r3, [r0, #28]
   16cf8:	mov	r5, r2
   16cfc:	movweq	r1, #4072	; 0xfe8
   16d00:	cmp	r2, #0
   16d04:	str	r1, [r0]
   16d08:	ldr	r0, [fp, #8]
   16d0c:	movweq	r5, #8
   16d10:	sub	r6, r5, #1
   16d14:	str	r0, [r4, #32]
   16d18:	str	r6, [r4, #24]
   16d1c:	ldrb	r0, [r4, #40]	; 0x28
   16d20:	and	r0, r0, #254	; 0xfe
   16d24:	strb	r0, [r4, #40]	; 0x28
   16d28:	mov	r0, r1
   16d2c:	blx	r3
   16d30:	cmp	r0, #0
   16d34:	str	r0, [r4, #4]
   16d38:	addne	r1, r6, r0
   16d3c:	rsbne	r2, r5, #0
   16d40:	addne	r1, r1, #8
   16d44:	andne	r1, r1, r2
   16d48:	strne	r1, [r4, #12]
   16d4c:	strne	r1, [r4, #8]
   16d50:	ldrne	r1, [r4]
   16d54:	addne	r1, r0, r1
   16d58:	strne	r1, [r0]
   16d5c:	strne	r1, [r4, #16]
   16d60:	movne	r1, #0
   16d64:	strne	r1, [r0, #4]
   16d68:	ldrbne	r0, [r4, #40]	; 0x28
   16d6c:	andne	r0, r0, #249	; 0xf9
   16d70:	strbne	r0, [r4, #40]	; 0x28
   16d74:	movne	r0, #1
   16d78:	popne	{r4, r5, r6, sl, fp, pc}
   16d7c:	movw	r0, #37232	; 0x9170
   16d80:	movt	r0, #2
   16d84:	ldr	r0, [r0]
   16d88:	blx	r0

00016d8c <_obstack_begin_1@@Base>:
   16d8c:	push	{r4, r5, r6, sl, fp, lr}
   16d90:	add	fp, sp, #16
   16d94:	cmp	r1, #0
   16d98:	mov	r4, r0
   16d9c:	str	r3, [r0, #28]
   16da0:	mov	r5, r2
   16da4:	movweq	r1, #4072	; 0xfe8
   16da8:	cmp	r2, #0
   16dac:	str	r1, [r0]
   16db0:	ldr	r0, [fp, #8]
   16db4:	movweq	r5, #8
   16db8:	sub	r6, r5, #1
   16dbc:	str	r0, [r4, #32]
   16dc0:	ldr	r0, [fp, #12]
   16dc4:	str	r0, [r4, #36]	; 0x24
   16dc8:	str	r6, [r4, #24]
   16dcc:	ldrb	r2, [r4, #40]	; 0x28
   16dd0:	orr	r2, r2, #1
   16dd4:	strb	r2, [r4, #40]	; 0x28
   16dd8:	blx	r3
   16ddc:	cmp	r0, #0
   16de0:	str	r0, [r4, #4]
   16de4:	addne	r1, r6, r0
   16de8:	rsbne	r2, r5, #0
   16dec:	addne	r1, r1, #8
   16df0:	andne	r1, r1, r2
   16df4:	strne	r1, [r4, #12]
   16df8:	strne	r1, [r4, #8]
   16dfc:	ldrne	r1, [r4]
   16e00:	addne	r1, r0, r1
   16e04:	strne	r1, [r0]
   16e08:	strne	r1, [r4, #16]
   16e0c:	movne	r1, #0
   16e10:	strne	r1, [r0, #4]
   16e14:	ldrbne	r0, [r4, #40]	; 0x28
   16e18:	andne	r0, r0, #249	; 0xf9
   16e1c:	strbne	r0, [r4, #40]	; 0x28
   16e20:	movne	r0, #1
   16e24:	popne	{r4, r5, r6, sl, fp, pc}
   16e28:	movw	r0, #37232	; 0x9170
   16e2c:	movt	r0, #2
   16e30:	ldr	r0, [r0]
   16e34:	blx	r0

00016e38 <_obstack_newchunk@@Base>:
   16e38:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16e3c:	add	fp, sp, #28
   16e40:	sub	sp, sp, #4
   16e44:	mov	r4, r0
   16e48:	ldr	r2, [r0]
   16e4c:	ldr	r0, [r0, #8]
   16e50:	ldr	r3, [r4, #12]
   16e54:	sub	r9, r3, r0
   16e58:	ldr	r0, [r4, #24]
   16e5c:	mov	r3, #0
   16e60:	add	r1, r9, r1
   16e64:	adds	r6, r1, r0
   16e68:	adc	r0, r3, #0
   16e6c:	mov	r3, #100	; 0x64
   16e70:	add	r3, r3, r9, lsr #3
   16e74:	adds	r7, r3, r6
   16e78:	movcs	r7, r6
   16e7c:	cmp	r7, r2
   16e80:	movcc	r7, r2
   16e84:	cmp	r1, r9
   16e88:	bcc	16f80 <_obstack_newchunk@@Base+0x148>
   16e8c:	cmp	r0, #0
   16e90:	bne	16f80 <_obstack_newchunk@@Base+0x148>
   16e94:	ldrb	r0, [r4, #40]	; 0x28
   16e98:	ldr	r8, [r4, #4]
   16e9c:	tst	r0, #1
   16ea0:	bne	16eb4 <_obstack_newchunk@@Base+0x7c>
   16ea4:	ldr	r1, [r4, #28]
   16ea8:	mov	r0, r7
   16eac:	blx	r1
   16eb0:	b	16ec4 <_obstack_newchunk@@Base+0x8c>
   16eb4:	ldr	r2, [r4, #28]
   16eb8:	ldr	r0, [r4, #36]	; 0x24
   16ebc:	mov	r1, r7
   16ec0:	blx	r2
   16ec4:	mov	r6, r0
   16ec8:	cmp	r0, #0
   16ecc:	beq	16f80 <_obstack_newchunk@@Base+0x148>
   16ed0:	add	r0, r6, r7
   16ed4:	str	r6, [r4, #4]
   16ed8:	str	r8, [r6, #4]
   16edc:	mov	r2, r9
   16ee0:	str	r0, [r4, #16]
   16ee4:	str	r0, [r6]
   16ee8:	ldr	r5, [r4, #24]
   16eec:	ldr	sl, [r4, #8]
   16ef0:	add	r0, r5, r6
   16ef4:	mov	r1, sl
   16ef8:	add	r0, r0, #8
   16efc:	bic	r7, r0, r5
   16f00:	mov	r0, r7
   16f04:	bl	11328 <memcpy@plt>
   16f08:	ldrb	r0, [r4, #40]	; 0x28
   16f0c:	tst	r0, #2
   16f10:	bne	16f60 <_obstack_newchunk@@Base+0x128>
   16f14:	add	r1, r5, r8
   16f18:	mvn	r0, r5
   16f1c:	add	r1, r1, #8
   16f20:	and	r0, r1, r0
   16f24:	cmp	sl, r0
   16f28:	bne	16f60 <_obstack_newchunk@@Base+0x128>
   16f2c:	ldr	r0, [r8, #4]
   16f30:	str	r0, [r6, #4]
   16f34:	ldrb	r0, [r4, #40]	; 0x28
   16f38:	tst	r0, #1
   16f3c:	bne	16f50 <_obstack_newchunk@@Base+0x118>
   16f40:	ldr	r1, [r4, #32]
   16f44:	mov	r0, r8
   16f48:	blx	r1
   16f4c:	b	16f60 <_obstack_newchunk@@Base+0x128>
   16f50:	ldr	r2, [r4, #32]
   16f54:	ldr	r0, [r4, #36]	; 0x24
   16f58:	mov	r1, r8
   16f5c:	blx	r2
   16f60:	add	r0, r7, r9
   16f64:	str	r7, [r4, #8]
   16f68:	str	r0, [r4, #12]
   16f6c:	ldrb	r0, [r4, #40]	; 0x28
   16f70:	and	r0, r0, #253	; 0xfd
   16f74:	strb	r0, [r4, #40]	; 0x28
   16f78:	sub	sp, fp, #28
   16f7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16f80:	movw	r0, #37232	; 0x9170
   16f84:	movt	r0, #2
   16f88:	ldr	r0, [r0]
   16f8c:	blx	r0

00016f90 <_obstack_allocated_p@@Base>:
   16f90:	ldr	r2, [r0, #4]
   16f94:	mov	r0, #0
   16f98:	b	16fa0 <_obstack_allocated_p@@Base+0x10>
   16f9c:	ldr	r2, [r2, #4]
   16fa0:	cmp	r2, #0
   16fa4:	bxeq	lr
   16fa8:	cmp	r2, r1
   16fac:	bcs	16f9c <_obstack_allocated_p@@Base+0xc>
   16fb0:	ldr	r3, [r2]
   16fb4:	cmp	r3, r1
   16fb8:	bcc	16f9c <_obstack_allocated_p@@Base+0xc>
   16fbc:	mov	r0, #1
   16fc0:	bx	lr

00016fc4 <_obstack_free@@Base>:
   16fc4:	push	{r4, r5, r6, sl, fp, lr}
   16fc8:	add	fp, sp, #16
   16fcc:	mov	r5, r1
   16fd0:	ldr	r1, [r0, #4]
   16fd4:	cmp	r1, #0
   16fd8:	beq	17038 <_obstack_free@@Base+0x74>
   16fdc:	mov	r4, r0
   16fe0:	cmp	r1, r5
   16fe4:	bcs	16ff4 <_obstack_free@@Base+0x30>
   16fe8:	ldr	r0, [r1]
   16fec:	cmp	r0, r5
   16ff0:	bcs	17044 <_obstack_free@@Base+0x80>
   16ff4:	ldrb	r0, [r4, #40]	; 0x28
   16ff8:	ldr	r6, [r1, #4]
   16ffc:	tst	r0, #1
   17000:	bne	17014 <_obstack_free@@Base+0x50>
   17004:	ldr	r2, [r4, #32]
   17008:	mov	r0, r1
   1700c:	blx	r2
   17010:	b	17020 <_obstack_free@@Base+0x5c>
   17014:	ldr	r2, [r4, #32]
   17018:	ldr	r0, [r4, #36]	; 0x24
   1701c:	blx	r2
   17020:	ldrb	r0, [r4, #40]	; 0x28
   17024:	cmp	r6, #0
   17028:	mov	r1, r6
   1702c:	orr	r0, r0, #2
   17030:	strb	r0, [r4, #40]	; 0x28
   17034:	bne	16fe0 <_obstack_free@@Base+0x1c>
   17038:	cmp	r5, #0
   1703c:	popeq	{r4, r5, r6, sl, fp, pc}
   17040:	bl	11598 <abort@plt>
   17044:	str	r5, [r4, #8]
   17048:	str	r5, [r4, #12]
   1704c:	ldr	r0, [r1]
   17050:	str	r1, [r4, #4]
   17054:	str	r0, [r4, #16]
   17058:	pop	{r4, r5, r6, sl, fp, pc}

0001705c <_obstack_memory_used@@Base>:
   1705c:	ldr	r1, [r0, #4]
   17060:	mov	r0, #0
   17064:	b	17078 <_obstack_memory_used@@Base+0x1c>
   17068:	ldr	r2, [r1]
   1706c:	sub	r0, r0, r1
   17070:	ldr	r1, [r1, #4]
   17074:	add	r0, r0, r2
   17078:	cmp	r1, #0
   1707c:	bxeq	lr
   17080:	b	17068 <_obstack_memory_used@@Base+0xc>
   17084:	push	{fp, lr}
   17088:	mov	fp, sp
   1708c:	movw	r0, #37256	; 0x9188
   17090:	movw	r1, #33760	; 0x83e0
   17094:	mov	r2, #5
   17098:	movt	r0, #2
   1709c:	movt	r1, #1
   170a0:	ldr	r4, [r0]
   170a4:	mov	r0, #0
   170a8:	bl	1134c <dcgettext@plt>
   170ac:	movw	r2, #32984	; 0x80d8
   170b0:	mov	r3, r0
   170b4:	mov	r0, r4
   170b8:	mov	r1, #1
   170bc:	movt	r2, #1
   170c0:	bl	11508 <__fprintf_chk@plt>
   170c4:	movw	r0, #37164	; 0x912c
   170c8:	movt	r0, #2
   170cc:	ldr	r0, [r0]
   170d0:	bl	11460 <exit@plt>
   170d4:	cmp	r2, #0
   170d8:	beq	17108 <_obstack_memory_used@@Base+0xac>
   170dc:	mvn	r3, #0
   170e0:	udiv	r3, r3, r2
   170e4:	cmp	r3, r1
   170e8:	bcs	17108 <_obstack_memory_used@@Base+0xac>
   170ec:	push	{fp, lr}
   170f0:	mov	fp, sp
   170f4:	bl	114a8 <__errno_location@plt>
   170f8:	mov	r1, #12
   170fc:	str	r1, [r0]
   17100:	mov	r0, #0
   17104:	pop	{fp, pc}
   17108:	mul	r1, r2, r1
   1710c:	b	16b70 <__assert_fail@plt+0x55c0>
   17110:	push	{r4, r5, r6, r7, fp, lr}
   17114:	add	fp, sp, #16
   17118:	mov	r4, r1
   1711c:	mov	r1, #0
   17120:	mov	r6, r2
   17124:	bl	11538 <setlocale@plt>
   17128:	cmp	r0, #0
   1712c:	beq	1715c <_obstack_memory_used@@Base+0x100>
   17130:	mov	r7, r0
   17134:	bl	11484 <strlen@plt>
   17138:	cmp	r0, r6
   1713c:	bcs	1717c <_obstack_memory_used@@Base+0x120>
   17140:	add	r2, r0, #1
   17144:	mov	r0, r4
   17148:	mov	r1, r7
   1714c:	bl	11328 <memcpy@plt>
   17150:	mov	r5, #0
   17154:	mov	r0, r5
   17158:	pop	{r4, r5, r6, r7, fp, pc}
   1715c:	cmp	r6, #0
   17160:	mov	r5, #22
   17164:	movne	r0, #0
   17168:	strbne	r0, [r4]
   1716c:	movne	r0, r5
   17170:	popne	{r4, r5, r6, r7, fp, pc}
   17174:	mov	r0, r5
   17178:	pop	{r4, r5, r6, r7, fp, pc}
   1717c:	mov	r5, #34	; 0x22
   17180:	cmp	r6, #0
   17184:	beq	171a4 <_obstack_memory_used@@Base+0x148>
   17188:	sub	r6, r6, #1
   1718c:	mov	r0, r4
   17190:	mov	r1, r7
   17194:	mov	r2, r6
   17198:	bl	11328 <memcpy@plt>
   1719c:	mov	r0, #0
   171a0:	strb	r0, [r4, r6]
   171a4:	mov	r0, r5
   171a8:	pop	{r4, r5, r6, r7, fp, pc}
   171ac:	mov	r1, #0
   171b0:	b	11538 <setlocale@plt>
   171b4:	eor	r1, r1, #-2147483648	; 0x80000000
   171b8:	b	171c0 <_obstack_memory_used@@Base+0x164>
   171bc:	eor	r3, r3, #-2147483648	; 0x80000000
   171c0:	push	{r4, r5, lr}
   171c4:	lsl	r4, r1, #1
   171c8:	lsl	r5, r3, #1
   171cc:	teq	r4, r5
   171d0:	teqeq	r0, r2
   171d4:	orrsne	ip, r4, r0
   171d8:	orrsne	ip, r5, r2
   171dc:	mvnsne	ip, r4, asr #21
   171e0:	mvnsne	ip, r5, asr #21
   171e4:	beq	173d0 <_obstack_memory_used@@Base+0x374>
   171e8:	lsr	r4, r4, #21
   171ec:	rsbs	r5, r4, r5, lsr #21
   171f0:	rsblt	r5, r5, #0
   171f4:	ble	17214 <_obstack_memory_used@@Base+0x1b8>
   171f8:	add	r4, r4, r5
   171fc:	eor	r2, r0, r2
   17200:	eor	r3, r1, r3
   17204:	eor	r0, r2, r0
   17208:	eor	r1, r3, r1
   1720c:	eor	r2, r0, r2
   17210:	eor	r3, r1, r3
   17214:	cmp	r5, #54	; 0x36
   17218:	pophi	{r4, r5, pc}
   1721c:	tst	r1, #-2147483648	; 0x80000000
   17220:	lsl	r1, r1, #12
   17224:	mov	ip, #1048576	; 0x100000
   17228:	orr	r1, ip, r1, lsr #12
   1722c:	beq	17238 <_obstack_memory_used@@Base+0x1dc>
   17230:	rsbs	r0, r0, #0
   17234:	rsc	r1, r1, #0
   17238:	tst	r3, #-2147483648	; 0x80000000
   1723c:	lsl	r3, r3, #12
   17240:	orr	r3, ip, r3, lsr #12
   17244:	beq	17250 <_obstack_memory_used@@Base+0x1f4>
   17248:	rsbs	r2, r2, #0
   1724c:	rsc	r3, r3, #0
   17250:	teq	r4, r5
   17254:	beq	173b8 <_obstack_memory_used@@Base+0x35c>
   17258:	sub	r4, r4, #1
   1725c:	rsbs	lr, r5, #32
   17260:	blt	1727c <_obstack_memory_used@@Base+0x220>
   17264:	lsl	ip, r2, lr
   17268:	adds	r0, r0, r2, lsr r5
   1726c:	adc	r1, r1, #0
   17270:	adds	r0, r0, r3, lsl lr
   17274:	adcs	r1, r1, r3, asr r5
   17278:	b	17298 <_obstack_memory_used@@Base+0x23c>
   1727c:	sub	r5, r5, #32
   17280:	add	lr, lr, #32
   17284:	cmp	r2, #1
   17288:	lsl	ip, r3, lr
   1728c:	orrcs	ip, ip, #2
   17290:	adds	r0, r0, r3, asr r5
   17294:	adcs	r1, r1, r3, asr #31
   17298:	and	r5, r1, #-2147483648	; 0x80000000
   1729c:	bpl	172ac <_obstack_memory_used@@Base+0x250>
   172a0:	rsbs	ip, ip, #0
   172a4:	rscs	r0, r0, #0
   172a8:	rsc	r1, r1, #0
   172ac:	cmp	r1, #1048576	; 0x100000
   172b0:	bcc	172f0 <_obstack_memory_used@@Base+0x294>
   172b4:	cmp	r1, #2097152	; 0x200000
   172b8:	bcc	172d8 <_obstack_memory_used@@Base+0x27c>
   172bc:	lsrs	r1, r1, #1
   172c0:	rrxs	r0, r0
   172c4:	rrx	ip, ip
   172c8:	add	r4, r4, #1
   172cc:	lsl	r2, r4, #21
   172d0:	cmn	r2, #4194304	; 0x400000
   172d4:	bcs	17430 <_obstack_memory_used@@Base+0x3d4>
   172d8:	cmp	ip, #-2147483648	; 0x80000000
   172dc:	lsrseq	ip, r0, #1
   172e0:	adcs	r0, r0, #0
   172e4:	adc	r1, r1, r4, lsl #20
   172e8:	orr	r1, r1, r5
   172ec:	pop	{r4, r5, pc}
   172f0:	lsls	ip, ip, #1
   172f4:	adcs	r0, r0, r0
   172f8:	adc	r1, r1, r1
   172fc:	tst	r1, #1048576	; 0x100000
   17300:	sub	r4, r4, #1
   17304:	bne	172d8 <_obstack_memory_used@@Base+0x27c>
   17308:	teq	r1, #0
   1730c:	moveq	r1, r0
   17310:	moveq	r0, #0
   17314:	clz	r3, r1
   17318:	addeq	r3, r3, #32
   1731c:	sub	r3, r3, #11
   17320:	subs	r2, r3, #32
   17324:	bge	17348 <_obstack_memory_used@@Base+0x2ec>
   17328:	adds	r2, r2, #12
   1732c:	ble	17344 <_obstack_memory_used@@Base+0x2e8>
   17330:	add	ip, r2, #20
   17334:	rsb	r2, r2, #12
   17338:	lsl	r0, r1, ip
   1733c:	lsr	r1, r1, r2
   17340:	b	17358 <_obstack_memory_used@@Base+0x2fc>
   17344:	add	r2, r2, #20
   17348:	rsble	ip, r2, #32
   1734c:	lsl	r1, r1, r2
   17350:	orrle	r1, r1, r0, lsr ip
   17354:	lslle	r0, r0, r2
   17358:	subs	r4, r4, r3
   1735c:	addge	r1, r1, r4, lsl #20
   17360:	orrge	r1, r1, r5
   17364:	popge	{r4, r5, pc}
   17368:	mvn	r4, r4
   1736c:	subs	r4, r4, #31
   17370:	bge	173ac <_obstack_memory_used@@Base+0x350>
   17374:	adds	r4, r4, #12
   17378:	bgt	17394 <_obstack_memory_used@@Base+0x338>
   1737c:	add	r4, r4, #20
   17380:	rsb	r2, r4, #32
   17384:	lsr	r0, r0, r4
   17388:	orr	r0, r0, r1, lsl r2
   1738c:	orr	r1, r5, r1, lsr r4
   17390:	pop	{r4, r5, pc}
   17394:	rsb	r4, r4, #12
   17398:	rsb	r2, r4, #32
   1739c:	lsr	r0, r0, r2
   173a0:	orr	r0, r0, r1, lsl r4
   173a4:	mov	r1, r5
   173a8:	pop	{r4, r5, pc}
   173ac:	lsr	r0, r1, r4
   173b0:	mov	r1, r5
   173b4:	pop	{r4, r5, pc}
   173b8:	teq	r4, #0
   173bc:	eor	r3, r3, #1048576	; 0x100000
   173c0:	eoreq	r1, r1, #1048576	; 0x100000
   173c4:	addeq	r4, r4, #1
   173c8:	subne	r5, r5, #1
   173cc:	b	17258 <_obstack_memory_used@@Base+0x1fc>
   173d0:	mvns	ip, r4, asr #21
   173d4:	mvnsne	ip, r5, asr #21
   173d8:	beq	17440 <_obstack_memory_used@@Base+0x3e4>
   173dc:	teq	r4, r5
   173e0:	teqeq	r0, r2
   173e4:	beq	173f8 <_obstack_memory_used@@Base+0x39c>
   173e8:	orrs	ip, r4, r0
   173ec:	moveq	r1, r3
   173f0:	moveq	r0, r2
   173f4:	pop	{r4, r5, pc}
   173f8:	teq	r1, r3
   173fc:	movne	r1, #0
   17400:	movne	r0, #0
   17404:	popne	{r4, r5, pc}
   17408:	lsrs	ip, r4, #21
   1740c:	bne	17420 <_obstack_memory_used@@Base+0x3c4>
   17410:	lsls	r0, r0, #1
   17414:	adcs	r1, r1, r1
   17418:	orrcs	r1, r1, #-2147483648	; 0x80000000
   1741c:	pop	{r4, r5, pc}
   17420:	adds	r4, r4, #4194304	; 0x400000
   17424:	addcc	r1, r1, #1048576	; 0x100000
   17428:	popcc	{r4, r5, pc}
   1742c:	and	r5, r1, #-2147483648	; 0x80000000
   17430:	orr	r1, r5, #2130706432	; 0x7f000000
   17434:	orr	r1, r1, #15728640	; 0xf00000
   17438:	mov	r0, #0
   1743c:	pop	{r4, r5, pc}
   17440:	mvns	ip, r4, asr #21
   17444:	movne	r1, r3
   17448:	movne	r0, r2
   1744c:	mvnseq	ip, r5, asr #21
   17450:	movne	r3, r1
   17454:	movne	r2, r0
   17458:	orrs	r4, r0, r1, lsl #12
   1745c:	orrseq	r5, r2, r3, lsl #12
   17460:	teqeq	r1, r3
   17464:	orrne	r1, r1, #524288	; 0x80000
   17468:	pop	{r4, r5, pc}
   1746c:	teq	r0, #0
   17470:	moveq	r1, #0
   17474:	bxeq	lr
   17478:	push	{r4, r5, lr}
   1747c:	mov	r4, #1024	; 0x400
   17480:	add	r4, r4, #50	; 0x32
   17484:	mov	r5, #0
   17488:	mov	r1, #0
   1748c:	b	17308 <_obstack_memory_used@@Base+0x2ac>
   17490:	teq	r0, #0
   17494:	moveq	r1, #0
   17498:	bxeq	lr
   1749c:	push	{r4, r5, lr}
   174a0:	mov	r4, #1024	; 0x400
   174a4:	add	r4, r4, #50	; 0x32
   174a8:	ands	r5, r0, #-2147483648	; 0x80000000
   174ac:	rsbmi	r0, r0, #0
   174b0:	mov	r1, #0
   174b4:	b	17308 <_obstack_memory_used@@Base+0x2ac>
   174b8:	lsls	r2, r0, #1
   174bc:	asr	r1, r2, #3
   174c0:	rrx	r1, r1
   174c4:	lsl	r0, r2, #28
   174c8:	andsne	r3, r2, #-16777216	; 0xff000000
   174cc:	teqne	r3, #-16777216	; 0xff000000
   174d0:	eorne	r1, r1, #939524096	; 0x38000000
   174d4:	bxne	lr
   174d8:	bics	r2, r2, #-16777216	; 0xff000000
   174dc:	bxeq	lr
   174e0:	teq	r3, #-16777216	; 0xff000000
   174e4:	orreq	r1, r1, #524288	; 0x80000
   174e8:	bxeq	lr
   174ec:	push	{r4, r5, lr}
   174f0:	mov	r4, #896	; 0x380
   174f4:	and	r5, r1, #-2147483648	; 0x80000000
   174f8:	bic	r1, r1, #-2147483648	; 0x80000000
   174fc:	b	17308 <_obstack_memory_used@@Base+0x2ac>
   17500:	orrs	r2, r0, r1
   17504:	bxeq	lr
   17508:	push	{r4, r5, lr}
   1750c:	mov	r5, #0
   17510:	b	17530 <_obstack_memory_used@@Base+0x4d4>
   17514:	orrs	r2, r0, r1
   17518:	bxeq	lr
   1751c:	push	{r4, r5, lr}
   17520:	ands	r5, r1, #-2147483648	; 0x80000000
   17524:	bpl	17530 <_obstack_memory_used@@Base+0x4d4>
   17528:	rsbs	r0, r0, #0
   1752c:	rsc	r1, r1, #0
   17530:	mov	r4, #1024	; 0x400
   17534:	add	r4, r4, #50	; 0x32
   17538:	lsrs	ip, r1, #22
   1753c:	beq	172ac <_obstack_memory_used@@Base+0x250>
   17540:	mov	r2, #3
   17544:	lsrs	ip, ip, #3
   17548:	addne	r2, r2, #3
   1754c:	lsrs	ip, ip, #3
   17550:	addne	r2, r2, #3
   17554:	add	r2, r2, ip, lsr #3
   17558:	rsb	r3, r2, #32
   1755c:	lsl	ip, r0, r3
   17560:	lsr	r0, r0, r2
   17564:	orr	r0, r0, r1, lsl r3
   17568:	lsr	r1, r1, r2
   1756c:	add	r4, r4, r2
   17570:	b	172ac <_obstack_memory_used@@Base+0x250>
   17574:	cmp	r3, #0
   17578:	cmpeq	r2, #0
   1757c:	bne	17594 <_obstack_memory_used@@Base+0x538>
   17580:	cmp	r1, #0
   17584:	cmpeq	r0, #0
   17588:	mvnne	r1, #0
   1758c:	mvnne	r0, #0
   17590:	b	175b0 <_obstack_memory_used@@Base+0x554>
   17594:	sub	sp, sp, #8
   17598:	push	{sp, lr}
   1759c:	bl	175c0 <_obstack_memory_used@@Base+0x564>
   175a0:	ldr	lr, [sp, #4]
   175a4:	add	sp, sp, #8
   175a8:	pop	{r2, r3}
   175ac:	bx	lr
   175b0:	push	{r1, lr}
   175b4:	mov	r0, #8
   175b8:	bl	112b0 <raise@plt>
   175bc:	pop	{r1, pc}
   175c0:	cmp	r1, r3
   175c4:	cmpeq	r0, r2
   175c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   175cc:	mov	r4, r0
   175d0:	movcc	r0, #0
   175d4:	mov	r5, r1
   175d8:	ldr	lr, [sp, #36]	; 0x24
   175dc:	movcc	r1, r0
   175e0:	bcc	176dc <_obstack_memory_used@@Base+0x680>
   175e4:	cmp	r3, #0
   175e8:	clzeq	ip, r2
   175ec:	clzne	ip, r3
   175f0:	addeq	ip, ip, #32
   175f4:	cmp	r5, #0
   175f8:	clzeq	r1, r4
   175fc:	addeq	r1, r1, #32
   17600:	clzne	r1, r5
   17604:	sub	ip, ip, r1
   17608:	sub	sl, ip, #32
   1760c:	lsl	r9, r3, ip
   17610:	rsb	fp, ip, #32
   17614:	orr	r9, r9, r2, lsl sl
   17618:	orr	r9, r9, r2, lsr fp
   1761c:	lsl	r8, r2, ip
   17620:	cmp	r5, r9
   17624:	cmpeq	r4, r8
   17628:	movcc	r0, #0
   1762c:	movcc	r1, r0
   17630:	bcc	1764c <_obstack_memory_used@@Base+0x5f0>
   17634:	mov	r0, #1
   17638:	subs	r4, r4, r8
   1763c:	lsl	r1, r0, sl
   17640:	orr	r1, r1, r0, lsr fp
   17644:	lsl	r0, r0, ip
   17648:	sbc	r5, r5, r9
   1764c:	cmp	ip, #0
   17650:	beq	176dc <_obstack_memory_used@@Base+0x680>
   17654:	lsr	r6, r8, #1
   17658:	orr	r6, r6, r9, lsl #31
   1765c:	lsr	r7, r9, #1
   17660:	mov	r2, ip
   17664:	b	17688 <_obstack_memory_used@@Base+0x62c>
   17668:	subs	r3, r4, r6
   1766c:	sbc	r8, r5, r7
   17670:	adds	r3, r3, r3
   17674:	adc	r8, r8, r8
   17678:	adds	r4, r3, #1
   1767c:	adc	r5, r8, #0
   17680:	subs	r2, r2, #1
   17684:	beq	176a4 <_obstack_memory_used@@Base+0x648>
   17688:	cmp	r5, r7
   1768c:	cmpeq	r4, r6
   17690:	bcs	17668 <_obstack_memory_used@@Base+0x60c>
   17694:	adds	r4, r4, r4
   17698:	adc	r5, r5, r5
   1769c:	subs	r2, r2, #1
   176a0:	bne	17688 <_obstack_memory_used@@Base+0x62c>
   176a4:	lsr	r3, r4, ip
   176a8:	orr	r3, r3, r5, lsl fp
   176ac:	lsr	r2, r5, ip
   176b0:	orr	r3, r3, r5, lsr sl
   176b4:	adds	r0, r0, r4
   176b8:	mov	r4, r3
   176bc:	lsl	r3, r2, ip
   176c0:	orr	r3, r3, r4, lsl sl
   176c4:	lsl	ip, r4, ip
   176c8:	orr	r3, r3, r4, lsr fp
   176cc:	adc	r1, r1, r5
   176d0:	subs	r0, r0, ip
   176d4:	mov	r5, r2
   176d8:	sbc	r1, r1, r3
   176dc:	cmp	lr, #0
   176e0:	strdne	r4, [lr]
   176e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   176e8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   176ec:	mov	r7, r0
   176f0:	ldr	r6, [pc, #72]	; 17740 <_obstack_memory_used@@Base+0x6e4>
   176f4:	ldr	r5, [pc, #72]	; 17744 <_obstack_memory_used@@Base+0x6e8>
   176f8:	add	r6, pc, r6
   176fc:	add	r5, pc, r5
   17700:	sub	r6, r6, r5
   17704:	mov	r8, r1
   17708:	mov	r9, r2
   1770c:	bl	11278 <calloc@plt-0x20>
   17710:	asrs	r6, r6, #2
   17714:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   17718:	mov	r4, #0
   1771c:	add	r4, r4, #1
   17720:	ldr	r3, [r5], #4
   17724:	mov	r2, r9
   17728:	mov	r1, r8
   1772c:	mov	r0, r7
   17730:	blx	r3
   17734:	cmp	r6, r4
   17738:	bne	1771c <_obstack_memory_used@@Base+0x6c0>
   1773c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17740:	andeq	r1, r1, ip, lsl #16
   17744:	andeq	r1, r1, r4, lsl #16
   17748:	bx	lr
   1774c:	ldr	r3, [pc, #12]	; 17760 <_obstack_memory_used@@Base+0x704>
   17750:	mov	r1, #0
   17754:	add	r3, pc, r3
   17758:	ldr	r2, [r3]
   1775c:	b	114b4 <__cxa_atexit@plt>
   17760:	andeq	r1, r1, r8, asr #19

Disassembly of section .fini:

00017764 <.fini>:
   17764:	push	{r3, lr}
   17768:	pop	{r3, pc}
