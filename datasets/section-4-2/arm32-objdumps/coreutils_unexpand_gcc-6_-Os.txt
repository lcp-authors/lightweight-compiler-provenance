
../repos/coreutils/src/unexpand:     file format elf32-littlearm


Disassembly of section .init:

00010c84 <.init>:
   10c84:	push	{r3, lr}
   10c88:	bl	113f0 <__assert_fail@plt+0x4e8>
   10c8c:	pop	{r3, pc}

Disassembly of section .plt:

00010c90 <calloc@plt-0x14>:
   10c90:	push	{lr}		; (str lr, [sp, #-4]!)
   10c94:	ldr	lr, [pc, #4]	; 10ca0 <calloc@plt-0x4>
   10c98:	add	lr, pc, lr
   10c9c:	ldr	pc, [lr, #8]!
   10ca0:	andeq	r5, r1, r0, ror #6

00010ca4 <calloc@plt>:
   10ca4:	add	ip, pc, #0, 12
   10ca8:	add	ip, ip, #86016	; 0x15000
   10cac:	ldr	pc, [ip, #864]!	; 0x360

00010cb0 <fputs_unlocked@plt>:
   10cb0:	add	ip, pc, #0, 12
   10cb4:	add	ip, ip, #86016	; 0x15000
   10cb8:	ldr	pc, [ip, #856]!	; 0x358

00010cbc <raise@plt>:
   10cbc:	add	ip, pc, #0, 12
   10cc0:	add	ip, ip, #86016	; 0x15000
   10cc4:	ldr	pc, [ip, #848]!	; 0x350

00010cc8 <strcmp@plt>:
   10cc8:	add	ip, pc, #0, 12
   10ccc:	add	ip, ip, #86016	; 0x15000
   10cd0:	ldr	pc, [ip, #840]!	; 0x348

00010cd4 <posix_fadvise64@plt>:
   10cd4:	add	ip, pc, #0, 12
   10cd8:	add	ip, ip, #86016	; 0x15000
   10cdc:	ldr	pc, [ip, #832]!	; 0x340

00010ce0 <fflush@plt>:
   10ce0:	add	ip, pc, #0, 12
   10ce4:	add	ip, ip, #86016	; 0x15000
   10ce8:	ldr	pc, [ip, #824]!	; 0x338

00010cec <free@plt>:
   10cec:	add	ip, pc, #0, 12
   10cf0:	add	ip, ip, #86016	; 0x15000
   10cf4:	ldr	pc, [ip, #816]!	; 0x330

00010cf8 <_exit@plt>:
   10cf8:	add	ip, pc, #0, 12
   10cfc:	add	ip, ip, #86016	; 0x15000
   10d00:	ldr	pc, [ip, #808]!	; 0x328

00010d04 <memcpy@plt>:
   10d04:	add	ip, pc, #0, 12
   10d08:	add	ip, ip, #86016	; 0x15000
   10d0c:	ldr	pc, [ip, #800]!	; 0x320

00010d10 <mbsinit@plt>:
   10d10:	add	ip, pc, #0, 12
   10d14:	add	ip, ip, #86016	; 0x15000
   10d18:	ldr	pc, [ip, #792]!	; 0x318

00010d1c <fwrite_unlocked@plt>:
   10d1c:	add	ip, pc, #0, 12
   10d20:	add	ip, ip, #86016	; 0x15000
   10d24:	ldr	pc, [ip, #784]!	; 0x310

00010d28 <memcmp@plt>:
   10d28:	add	ip, pc, #0, 12
   10d2c:	add	ip, ip, #86016	; 0x15000
   10d30:	ldr	pc, [ip, #776]!	; 0x308

00010d34 <fputc_unlocked@plt>:
   10d34:	add	ip, pc, #0, 12
   10d38:	add	ip, ip, #86016	; 0x15000
   10d3c:	ldr	pc, [ip, #768]!	; 0x300

00010d40 <getc_unlocked@plt>:
   10d40:	add	ip, pc, #0, 12
   10d44:	add	ip, ip, #86016	; 0x15000
   10d48:	ldr	pc, [ip, #760]!	; 0x2f8

00010d4c <dcgettext@plt>:
   10d4c:	add	ip, pc, #0, 12
   10d50:	add	ip, ip, #86016	; 0x15000
   10d54:	ldr	pc, [ip, #752]!	; 0x2f0

00010d58 <realloc@plt>:
   10d58:	add	ip, pc, #0, 12
   10d5c:	add	ip, ip, #86016	; 0x15000
   10d60:	ldr	pc, [ip, #744]!	; 0x2e8

00010d64 <textdomain@plt>:
   10d64:	add	ip, pc, #0, 12
   10d68:	add	ip, ip, #86016	; 0x15000
   10d6c:	ldr	pc, [ip, #736]!	; 0x2e0

00010d70 <iswprint@plt>:
   10d70:	add	ip, pc, #0, 12
   10d74:	add	ip, ip, #86016	; 0x15000
   10d78:	ldr	pc, [ip, #728]!	; 0x2d8

00010d7c <lseek64@plt>:
   10d7c:	add	ip, pc, #0, 12
   10d80:	add	ip, ip, #86016	; 0x15000
   10d84:	ldr	pc, [ip, #720]!	; 0x2d0

00010d88 <__ctype_get_mb_cur_max@plt>:
   10d88:	add	ip, pc, #0, 12
   10d8c:	add	ip, ip, #86016	; 0x15000
   10d90:	ldr	pc, [ip, #712]!	; 0x2c8

00010d94 <__fpending@plt>:
   10d94:	add	ip, pc, #0, 12
   10d98:	add	ip, ip, #86016	; 0x15000
   10d9c:	ldr	pc, [ip, #704]!	; 0x2c0

00010da0 <ferror_unlocked@plt>:
   10da0:	add	ip, pc, #0, 12
   10da4:	add	ip, ip, #86016	; 0x15000
   10da8:	ldr	pc, [ip, #696]!	; 0x2b8

00010dac <mbrtowc@plt>:
   10dac:	add	ip, pc, #0, 12
   10db0:	add	ip, ip, #86016	; 0x15000
   10db4:	ldr	pc, [ip, #688]!	; 0x2b0

00010db8 <error@plt>:
   10db8:	add	ip, pc, #0, 12
   10dbc:	add	ip, ip, #86016	; 0x15000
   10dc0:	ldr	pc, [ip, #680]!	; 0x2a8

00010dc4 <malloc@plt>:
   10dc4:	add	ip, pc, #0, 12
   10dc8:	add	ip, ip, #86016	; 0x15000
   10dcc:	ldr	pc, [ip, #672]!	; 0x2a0

00010dd0 <__libc_start_main@plt>:
   10dd0:	add	ip, pc, #0, 12
   10dd4:	add	ip, ip, #86016	; 0x15000
   10dd8:	ldr	pc, [ip, #664]!	; 0x298

00010ddc <__freading@plt>:
   10ddc:	add	ip, pc, #0, 12
   10de0:	add	ip, ip, #86016	; 0x15000
   10de4:	ldr	pc, [ip, #656]!	; 0x290

00010de8 <__gmon_start__@plt>:
   10de8:	add	ip, pc, #0, 12
   10dec:	add	ip, ip, #86016	; 0x15000
   10df0:	ldr	pc, [ip, #648]!	; 0x288

00010df4 <getopt_long@plt>:
   10df4:	add	ip, pc, #0, 12
   10df8:	add	ip, ip, #86016	; 0x15000
   10dfc:	ldr	pc, [ip, #640]!	; 0x280

00010e00 <__ctype_b_loc@plt>:
   10e00:	add	ip, pc, #0, 12
   10e04:	add	ip, ip, #86016	; 0x15000
   10e08:	ldr	pc, [ip, #632]!	; 0x278

00010e0c <exit@plt>:
   10e0c:	add	ip, pc, #0, 12
   10e10:	add	ip, ip, #86016	; 0x15000
   10e14:	ldr	pc, [ip, #624]!	; 0x270

00010e18 <strlen@plt>:
   10e18:	add	ip, pc, #0, 12
   10e1c:	add	ip, ip, #86016	; 0x15000
   10e20:	ldr	pc, [ip, #616]!	; 0x268

00010e24 <__errno_location@plt>:
   10e24:	add	ip, pc, #0, 12
   10e28:	add	ip, ip, #86016	; 0x15000
   10e2c:	ldr	pc, [ip, #608]!	; 0x260

00010e30 <__cxa_atexit@plt>:
   10e30:	add	ip, pc, #0, 12
   10e34:	add	ip, ip, #86016	; 0x15000
   10e38:	ldr	pc, [ip, #600]!	; 0x258

00010e3c <memset@plt>:
   10e3c:	add	ip, pc, #0, 12
   10e40:	add	ip, ip, #86016	; 0x15000
   10e44:	ldr	pc, [ip, #592]!	; 0x250

00010e48 <__printf_chk@plt>:
   10e48:	add	ip, pc, #0, 12
   10e4c:	add	ip, ip, #86016	; 0x15000
   10e50:	ldr	pc, [ip, #584]!	; 0x248

00010e54 <fileno@plt>:
   10e54:	add	ip, pc, #0, 12
   10e58:	add	ip, ip, #86016	; 0x15000
   10e5c:	ldr	pc, [ip, #576]!	; 0x240

00010e60 <__fprintf_chk@plt>:
   10e60:	add	ip, pc, #0, 12
   10e64:	add	ip, ip, #86016	; 0x15000
   10e68:	ldr	pc, [ip, #568]!	; 0x238

00010e6c <fclose@plt>:
   10e6c:	add	ip, pc, #0, 12
   10e70:	add	ip, ip, #86016	; 0x15000
   10e74:	ldr	pc, [ip, #560]!	; 0x230

00010e78 <fseeko64@plt>:
   10e78:	add	ip, pc, #0, 12
   10e7c:	add	ip, ip, #86016	; 0x15000
   10e80:	ldr	pc, [ip, #552]!	; 0x228

00010e84 <setlocale@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #86016	; 0x15000
   10e8c:	ldr	pc, [ip, #544]!	; 0x220

00010e90 <strrchr@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #86016	; 0x15000
   10e98:	ldr	pc, [ip, #536]!	; 0x218

00010e9c <nl_langinfo@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #86016	; 0x15000
   10ea4:	ldr	pc, [ip, #528]!	; 0x210

00010ea8 <clearerr_unlocked@plt>:
   10ea8:	add	ip, pc, #0, 12
   10eac:	add	ip, ip, #86016	; 0x15000
   10eb0:	ldr	pc, [ip, #520]!	; 0x208

00010eb4 <fopen64@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #86016	; 0x15000
   10ebc:	ldr	pc, [ip, #512]!	; 0x200

00010ec0 <bindtextdomain@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #86016	; 0x15000
   10ec8:	ldr	pc, [ip, #504]!	; 0x1f8

00010ecc <fputs@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #86016	; 0x15000
   10ed4:	ldr	pc, [ip, #496]!	; 0x1f0

00010ed8 <strncmp@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #86016	; 0x15000
   10ee0:	ldr	pc, [ip, #488]!	; 0x1e8

00010ee4 <abort@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #86016	; 0x15000
   10eec:	ldr	pc, [ip, #480]!	; 0x1e0

00010ef0 <putchar_unlocked@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #86016	; 0x15000
   10ef8:	ldr	pc, [ip, #472]!	; 0x1d8

00010efc <strspn@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #86016	; 0x15000
   10f04:	ldr	pc, [ip, #464]!	; 0x1d0

00010f08 <__assert_fail@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #86016	; 0x15000
   10f10:	ldr	pc, [ip, #456]!	; 0x1c8

Disassembly of section .text:

00010f18 <.text>:
   10f18:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10f1c:	mov	sl, r0
   10f20:	sub	sp, sp, #28
   10f24:	ldr	r0, [r1]
   10f28:	mov	r6, r1
   10f2c:	bl	12334 <__assert_fail@plt+0x142c>
   10f30:	ldr	r1, [pc, #1072]	; 11368 <__assert_fail@plt+0x460>
   10f34:	mov	r0, #6
   10f38:	bl	10e84 <setlocale@plt>
   10f3c:	mov	r9, #0
   10f40:	ldr	r1, [pc, #1060]	; 1136c <__assert_fail@plt+0x464>
   10f44:	ldr	r0, [pc, #1060]	; 11370 <__assert_fail@plt+0x468>
   10f48:	ldr	fp, [pc, #1060]	; 11374 <__assert_fail@plt+0x46c>
   10f4c:	bl	10ec0 <bindtextdomain@plt>
   10f50:	mov	r8, r9
   10f54:	ldr	r0, [pc, #1044]	; 11370 <__assert_fail@plt+0x468>
   10f58:	bl	10d64 <textdomain@plt>
   10f5c:	mov	r4, #0
   10f60:	ldr	r0, [pc, #1040]	; 11378 <__assert_fail@plt+0x470>
   10f64:	mov	r5, #0
   10f68:	bl	14c78 <__assert_fail@plt+0x3d70>
   10f6c:	str	r4, [sp, #8]
   10f70:	str	r5, [sp, #12]
   10f74:	mov	r7, #0
   10f78:	str	r7, [sp]
   10f7c:	ldr	r3, [pc, #1016]	; 1137c <__assert_fail@plt+0x474>
   10f80:	ldr	r2, [pc, #1016]	; 11380 <__assert_fail@plt+0x478>
   10f84:	mov	r1, r6
   10f88:	mov	r0, sl
   10f8c:	bl	10df4 <getopt_long@plt>
   10f90:	cmn	r0, #1
   10f94:	bne	1111c <__assert_fail@plt+0x214>
   10f98:	cmp	r9, r7
   10f9c:	ldrne	r3, [pc, #976]	; 11374 <__assert_fail@plt+0x46c>
   10fa0:	strbne	r7, [r3]
   10fa4:	cmp	r8, #0
   10fa8:	beq	10fb8 <__assert_fail@plt+0xb0>
   10fac:	mov	r0, r4
   10fb0:	mov	r1, r5
   10fb4:	bl	11808 <__assert_fail@plt+0x900>
   10fb8:	bl	11bf4 <__assert_fail@plt+0xcec>
   10fbc:	ldr	r3, [pc, #960]	; 11384 <__assert_fail@plt+0x47c>
   10fc0:	ldr	r0, [r3]
   10fc4:	cmp	sl, r0
   10fc8:	addgt	r0, r6, r0, lsl #2
   10fcc:	movle	r0, #0
   10fd0:	bl	11ddc <__assert_fail@plt+0xed4>
   10fd4:	mov	r0, #0
   10fd8:	bl	11e04 <__assert_fail@plt+0xefc>
   10fdc:	subs	r3, r0, #0
   10fe0:	str	r3, [sp, #8]
   10fe4:	beq	11334 <__assert_fail@plt+0x42c>
   10fe8:	ldr	r3, [pc, #920]	; 11388 <__assert_fail@plt+0x480>
   10fec:	ldr	r0, [r3]
   10ff0:	bl	13e7c <__assert_fail@plt+0x2f74>
   10ff4:	mov	r8, r0
   10ff8:	mov	r4, #0
   10ffc:	mov	r6, #1
   11000:	mov	r7, r4
   11004:	mov	sl, #0
   11008:	mov	fp, #0
   1100c:	mov	r9, r6
   11010:	str	r4, [sp, #20]
   11014:	ldr	r0, [sp, #8]
   11018:	bl	10d40 <getc_unlocked@plt>
   1101c:	subs	r5, r0, #0
   11020:	bge	11038 <__assert_fail@plt+0x130>
   11024:	ldr	r0, [sp, #8]
   11028:	bl	11e04 <__assert_fail@plt+0xefc>
   1102c:	subs	r3, r0, #0
   11030:	str	r3, [sp, #8]
   11034:	bne	11014 <__assert_fail@plt+0x10c>
   11038:	cmp	r9, #0
   1103c:	beq	11324 <__assert_fail@plt+0x41c>
   11040:	bl	10e00 <__ctype_b_loc@plt>
   11044:	lsl	r3, r5, #1
   11048:	ldr	r2, [r0]
   1104c:	ldrh	r3, [r2, r3]
   11050:	and	r3, r3, #1
   11054:	uxtb	r2, r3
   11058:	uxth	r3, r3
   1105c:	cmp	r3, #0
   11060:	str	r2, [sp, #12]
   11064:	beq	112a4 <__assert_fail@plt+0x39c>
   11068:	add	r3, sp, #19
   1106c:	add	r2, sp, #20
   11070:	mov	r0, sl
   11074:	mov	r1, fp
   11078:	bl	11cf0 <__assert_fail@plt+0xde8>
   1107c:	ldrb	r3, [sp, #19]
   11080:	cmp	r3, #0
   11084:	bne	1129c <__assert_fail@plt+0x394>
   11088:	cmp	fp, r1
   1108c:	cmpeq	sl, r0
   11090:	bhi	112e4 <__assert_fail@plt+0x3dc>
   11094:	cmp	r5, #9
   11098:	bne	11244 <__assert_fail@plt+0x33c>
   1109c:	cmp	r4, #0
   110a0:	strbne	r5, [r8]
   110a4:	mov	r4, r7
   110a8:	mov	sl, r0
   110ac:	mov	fp, r1
   110b0:	mov	r5, #9
   110b4:	cmp	r4, #0
   110b8:	beq	11308 <__assert_fail@plt+0x400>
   110bc:	cmp	r4, #1
   110c0:	movls	r7, #0
   110c4:	andhi	r7, r7, #1
   110c8:	cmp	r7, #0
   110cc:	movne	r3, #9
   110d0:	strbne	r3, [r8]
   110d4:	ldr	r3, [pc, #688]	; 1138c <__assert_fail@plt+0x484>
   110d8:	mov	r2, r4
   110dc:	mov	r1, #1
   110e0:	ldr	r3, [r3]
   110e4:	mov	r0, r8
   110e8:	bl	10d1c <fwrite_unlocked@plt>
   110ec:	cmp	r4, r0
   110f0:	beq	11304 <__assert_fail@plt+0x3fc>
   110f4:	bl	10e24 <__errno_location@plt>
   110f8:	mov	r2, #5
   110fc:	ldr	r1, [pc, #652]	; 11390 <__assert_fail@plt+0x488>
   11100:	ldr	r4, [r0]
   11104:	mov	r0, #0
   11108:	bl	10d4c <dcgettext@plt>
   1110c:	mov	r1, r4
   11110:	mov	r2, r0
   11114:	mov	r0, #1
   11118:	bl	10db8 <error@plt>
   1111c:	cmp	r0, #63	; 0x3f
   11120:	beq	11194 <__assert_fail@plt+0x28c>
   11124:	bgt	11170 <__assert_fail@plt+0x268>
   11128:	cmn	r0, #2
   1112c:	beq	111cc <__assert_fail@plt+0x2c4>
   11130:	cmp	r0, #44	; 0x2c
   11134:	beq	111b0 <__assert_fail@plt+0x2a8>
   11138:	cmn	r0, #3
   1113c:	bne	111d4 <__assert_fail@plt+0x2cc>
   11140:	ldr	r3, [pc, #588]	; 11394 <__assert_fail@plt+0x48c>
   11144:	ldr	r0, [pc, #576]	; 1138c <__assert_fail@plt+0x484>
   11148:	str	r3, [sp]
   1114c:	ldr	r3, [pc, #580]	; 11398 <__assert_fail@plt+0x490>
   11150:	str	r7, [sp, #4]
   11154:	ldr	r2, [pc, #576]	; 1139c <__assert_fail@plt+0x494>
   11158:	ldr	r0, [r0]
   1115c:	ldr	r3, [r3]
   11160:	ldr	r1, [pc, #568]	; 113a0 <__assert_fail@plt+0x498>
   11164:	bl	13db4 <__assert_fail@plt+0x2eac>
   11168:	mov	r0, r7
   1116c:	bl	10e0c <exit@plt>
   11170:	cmp	r0, #116	; 0x74
   11174:	mov	r3, #1
   11178:	beq	1119c <__assert_fail@plt+0x294>
   1117c:	cmp	r0, #256	; 0x100
   11180:	beq	1123c <__assert_fail@plt+0x334>
   11184:	cmp	r0, #97	; 0x61
   11188:	bne	111d4 <__assert_fail@plt+0x2cc>
   1118c:	strb	r3, [fp]
   11190:	b	10f74 <__assert_fail@plt+0x6c>
   11194:	mov	r0, #1
   11198:	bl	114dc <__assert_fail@plt+0x5d4>
   1119c:	strb	r3, [fp]
   111a0:	ldr	r3, [pc, #508]	; 113a4 <__assert_fail@plt+0x49c>
   111a4:	ldr	r0, [r3]
   111a8:	bl	118ec <__assert_fail@plt+0x9e4>
   111ac:	b	10f74 <__assert_fail@plt+0x6c>
   111b0:	cmp	r8, #0
   111b4:	beq	10f74 <__assert_fail@plt+0x6c>
   111b8:	mov	r0, r4
   111bc:	mov	r1, r5
   111c0:	bl	11808 <__assert_fail@plt+0x900>
   111c4:	mov	r8, r7
   111c8:	b	10f74 <__assert_fail@plt+0x6c>
   111cc:	mov	r0, r7
   111d0:	b	11198 <__assert_fail@plt+0x290>
   111d4:	cmp	r8, #0
   111d8:	beq	11200 <__assert_fail@plt+0x2f8>
   111dc:	add	r3, pc, #380	; 0x17c
   111e0:	ldrd	r2, [r3]
   111e4:	cmp	r5, r3
   111e8:	cmpeq	r4, r2
   111ec:	bls	11208 <__assert_fail@plt+0x300>
   111f0:	mov	r2, #5
   111f4:	ldr	r1, [pc, #428]	; 113a8 <__assert_fail@plt+0x4a0>
   111f8:	mov	r0, #0
   111fc:	b	112f4 <__assert_fail@plt+0x3ec>
   11200:	ldr	r4, [sp, #8]
   11204:	ldr	r5, [sp, #12]
   11208:	mov	r1, #10
   1120c:	sub	r0, r0, #48	; 0x30
   11210:	umull	r2, r3, r4, r1
   11214:	mla	r3, r1, r5, r3
   11218:	adds	r2, r2, r0
   1121c:	adc	r3, r3, r0, asr #31
   11220:	cmp	r3, r5
   11224:	cmpeq	r2, r4
   11228:	bcc	111f0 <__assert_fail@plt+0x2e8>
   1122c:	mov	r4, r2
   11230:	mov	r5, r3
   11234:	mov	r8, #1
   11238:	b	10f74 <__assert_fail@plt+0x6c>
   1123c:	mov	r9, r3
   11240:	b	10f74 <__assert_fail@plt+0x6c>
   11244:	adds	sl, sl, #1
   11248:	adc	fp, fp, #0
   1124c:	cmp	r1, fp
   11250:	cmpeq	r0, sl
   11254:	eor	r6, r6, #1
   11258:	orrne	r6, r6, #1
   1125c:	cmp	r6, #0
   11260:	beq	11288 <__assert_fail@plt+0x380>
   11264:	cmp	r1, fp
   11268:	cmpeq	r0, sl
   1126c:	strb	r5, [r8, r4]
   11270:	moveq	r7, r6
   11274:	add	r4, r4, #1
   11278:	mov	r9, r6
   1127c:	cmp	r5, #10
   11280:	bne	11014 <__assert_fail@plt+0x10c>
   11284:	b	10ff8 <__assert_fail@plt+0xf0>
   11288:	mov	r3, #9
   1128c:	strb	r3, [r8]
   11290:	mov	r0, sl
   11294:	mov	r1, fp
   11298:	b	110a4 <__assert_fail@plt+0x19c>
   1129c:	mov	r9, #0
   112a0:	b	110b4 <__assert_fail@plt+0x1ac>
   112a4:	cmp	r5, #8
   112a8:	bne	112d4 <__assert_fail@plt+0x3cc>
   112ac:	orrs	r3, sl, fp
   112b0:	movne	r3, #1
   112b4:	moveq	r3, #0
   112b8:	subs	sl, sl, r3
   112bc:	ldr	r3, [sp, #20]
   112c0:	sbc	fp, fp, #0
   112c4:	cmp	r3, #0
   112c8:	subne	r3, r3, #1
   112cc:	str	r3, [sp, #20]
   112d0:	b	110b4 <__assert_fail@plt+0x1ac>
   112d4:	adds	sl, sl, #1
   112d8:	adc	fp, fp, #0
   112dc:	orrs	r2, sl, fp
   112e0:	bne	110b4 <__assert_fail@plt+0x1ac>
   112e4:	ldr	r1, [pc, #192]	; 113ac <__assert_fail@plt+0x4a4>
   112e8:	mov	r2, #5
   112ec:	mov	r0, r3
   112f0:	str	r3, [sp, #8]
   112f4:	bl	10d4c <dcgettext@plt>
   112f8:	mov	r1, #0
   112fc:	mov	r2, r0
   11300:	b	11114 <__assert_fail@plt+0x20c>
   11304:	mov	r7, #0
   11308:	ldr	r3, [pc, #100]	; 11374 <__assert_fail@plt+0x46c>
   1130c:	ldr	r2, [sp, #12]
   11310:	mov	r4, #0
   11314:	ldrb	r3, [r3]
   11318:	mov	r6, r2
   1131c:	orr	r3, r2, r3
   11320:	and	r9, r9, r3
   11324:	cmp	r5, #0
   11328:	bge	11348 <__assert_fail@plt+0x440>
   1132c:	mov	r0, r8
   11330:	bl	1224c <__assert_fail@plt+0x1344>
   11334:	bl	11f84 <__assert_fail@plt+0x107c>
   11338:	ldr	r3, [pc, #112]	; 113b0 <__assert_fail@plt+0x4a8>
   1133c:	ldr	r0, [r3]
   11340:	add	sp, sp, #28
   11344:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11348:	mov	r0, r5
   1134c:	bl	10ef0 <putchar_unlocked@plt>
   11350:	cmp	r0, #0
   11354:	bge	1127c <__assert_fail@plt+0x374>
   11358:	b	110f4 <__assert_fail@plt+0x1ec>
   1135c:	nop			; (mov r0, r0)
   11360:	ldmibls	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   11364:	ldmibne	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   11368:	andeq	r5, r1, pc, rrx
   1136c:	andeq	r5, r1, r0, ror r0
   11370:	andeq	r4, r1, sp, asr #31
   11374:	muleq	r2, r8, r1
   11378:	andeq	r2, r1, r4, lsr r0
   1137c:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   11380:	muleq	r1, r8, r0
   11384:	andeq	r6, r2, r0, asr #2
   11388:	andeq	r6, r2, ip, ror r1
   1138c:	andeq	r6, r2, r4, asr r1
   11390:	strheq	r5, [r1], -lr
   11394:	andeq	r5, r1, r8, lsl #1
   11398:	strdeq	r6, [r2], -r0
   1139c:	andeq	r4, r1, r9, asr #31
   113a0:	andeq	r4, r1, r4, lsr sp
   113a4:	andeq	r6, r2, r8, asr r1
   113a8:	andeq	r5, r1, sl, asr #1
   113ac:	andeq	r5, r1, r7, lsr #1
   113b0:	muleq	r2, r4, r1
   113b4:	mov	fp, #0
   113b8:	mov	lr, #0
   113bc:	pop	{r1}		; (ldr r1, [sp], #4)
   113c0:	mov	r2, sp
   113c4:	push	{r2}		; (str r2, [sp, #-4]!)
   113c8:	push	{r0}		; (str r0, [sp, #-4]!)
   113cc:	ldr	ip, [pc, #16]	; 113e4 <__assert_fail@plt+0x4dc>
   113d0:	push	{ip}		; (str ip, [sp, #-4]!)
   113d4:	ldr	r0, [pc, #12]	; 113e8 <__assert_fail@plt+0x4e0>
   113d8:	ldr	r3, [pc, #12]	; 113ec <__assert_fail@plt+0x4e4>
   113dc:	bl	10dd0 <__libc_start_main@plt>
   113e0:	bl	10ee4 <abort@plt>
   113e4:	andeq	r4, r1, r4, ror ip
   113e8:	andeq	r0, r1, r8, lsl pc
   113ec:	andeq	r4, r1, r4, lsl ip
   113f0:	ldr	r3, [pc, #20]	; 1140c <__assert_fail@plt+0x504>
   113f4:	ldr	r2, [pc, #20]	; 11410 <__assert_fail@plt+0x508>
   113f8:	add	r3, pc, r3
   113fc:	ldr	r2, [r3, r2]
   11400:	cmp	r2, #0
   11404:	bxeq	lr
   11408:	b	10de8 <__gmon_start__@plt>
   1140c:	andeq	r4, r1, r0, lsl #24
   11410:	ldrdeq	r0, [r0], -ip
   11414:	ldr	r3, [pc, #28]	; 11438 <__assert_fail@plt+0x530>
   11418:	ldr	r0, [pc, #28]	; 1143c <__assert_fail@plt+0x534>
   1141c:	sub	r3, r3, r0
   11420:	cmp	r3, #6
   11424:	bxls	lr
   11428:	ldr	r3, [pc, #16]	; 11440 <__assert_fail@plt+0x538>
   1142c:	cmp	r3, #0
   11430:	bxeq	lr
   11434:	bx	r3
   11438:	andeq	r6, r2, fp, lsr r1
   1143c:	andeq	r6, r2, r8, lsr r1
   11440:	andeq	r0, r0, r0
   11444:	ldr	r1, [pc, #36]	; 11470 <__assert_fail@plt+0x568>
   11448:	ldr	r0, [pc, #36]	; 11474 <__assert_fail@plt+0x56c>
   1144c:	sub	r1, r1, r0
   11450:	asr	r1, r1, #2
   11454:	add	r1, r1, r1, lsr #31
   11458:	asrs	r1, r1, #1
   1145c:	bxeq	lr
   11460:	ldr	r3, [pc, #16]	; 11478 <__assert_fail@plt+0x570>
   11464:	cmp	r3, #0
   11468:	bxeq	lr
   1146c:	bx	r3
   11470:	andeq	r6, r2, r8, lsr r1
   11474:	andeq	r6, r2, r8, lsr r1
   11478:	andeq	r0, r0, r0
   1147c:	push	{r4, lr}
   11480:	ldr	r4, [pc, #24]	; 114a0 <__assert_fail@plt+0x598>
   11484:	ldrb	r3, [r4]
   11488:	cmp	r3, #0
   1148c:	popne	{r4, pc}
   11490:	bl	11414 <__assert_fail@plt+0x50c>
   11494:	mov	r3, #1
   11498:	strb	r3, [r4]
   1149c:	pop	{r4, pc}
   114a0:	andeq	r6, r2, ip, asr r1
   114a4:	ldr	r0, [pc, #40]	; 114d4 <__assert_fail@plt+0x5cc>
   114a8:	ldr	r3, [r0]
   114ac:	cmp	r3, #0
   114b0:	bne	114b8 <__assert_fail@plt+0x5b0>
   114b4:	b	11444 <__assert_fail@plt+0x53c>
   114b8:	ldr	r3, [pc, #24]	; 114d8 <__assert_fail@plt+0x5d0>
   114bc:	cmp	r3, #0
   114c0:	beq	114b4 <__assert_fail@plt+0x5ac>
   114c4:	push	{r4, lr}
   114c8:	blx	r3
   114cc:	pop	{r4, lr}
   114d0:	b	11444 <__assert_fail@plt+0x53c>
   114d4:	andeq	r5, r2, r4, lsl pc
   114d8:	andeq	r0, r0, r0
   114dc:	subs	r5, r0, #0
   114e0:	push	{r7, lr}
   114e4:	sub	sp, sp, #56	; 0x38
   114e8:	ldr	r4, [pc, #528]	; 11700 <__assert_fail@plt+0x7f8>
   114ec:	beq	11524 <__assert_fail@plt+0x61c>
   114f0:	ldr	r3, [pc, #524]	; 11704 <__assert_fail@plt+0x7fc>
   114f4:	mov	r2, #5
   114f8:	ldr	r1, [pc, #520]	; 11708 <__assert_fail@plt+0x800>
   114fc:	mov	r0, #0
   11500:	ldr	r6, [r3]
   11504:	bl	10d4c <dcgettext@plt>
   11508:	ldr	r3, [r4]
   1150c:	mov	r1, #1
   11510:	mov	r2, r0
   11514:	mov	r0, r6
   11518:	bl	10e60 <__fprintf_chk@plt>
   1151c:	mov	r0, r5
   11520:	bl	10e0c <exit@plt>
   11524:	mov	r2, #5
   11528:	ldr	r1, [pc, #476]	; 1170c <__assert_fail@plt+0x804>
   1152c:	bl	10d4c <dcgettext@plt>
   11530:	ldr	r2, [r4]
   11534:	ldr	r4, [pc, #468]	; 11710 <__assert_fail@plt+0x808>
   11538:	ldr	r8, [pc, #468]	; 11714 <__assert_fail@plt+0x80c>
   1153c:	mov	r6, r5
   11540:	mov	r1, r0
   11544:	mov	r0, #1
   11548:	bl	10e48 <__printf_chk@plt>
   1154c:	mov	r2, #5
   11550:	ldr	r1, [pc, #448]	; 11718 <__assert_fail@plt+0x810>
   11554:	mov	r0, r5
   11558:	bl	10d4c <dcgettext@plt>
   1155c:	ldr	r1, [r4]
   11560:	bl	10cb0 <fputs_unlocked@plt>
   11564:	mov	r2, #5
   11568:	ldr	r1, [pc, #428]	; 1171c <__assert_fail@plt+0x814>
   1156c:	mov	r0, r5
   11570:	bl	10d4c <dcgettext@plt>
   11574:	ldr	r1, [r4]
   11578:	bl	10cb0 <fputs_unlocked@plt>
   1157c:	mov	r2, #5
   11580:	ldr	r1, [pc, #408]	; 11720 <__assert_fail@plt+0x818>
   11584:	mov	r0, r5
   11588:	bl	10d4c <dcgettext@plt>
   1158c:	ldr	r1, [r4]
   11590:	bl	10cb0 <fputs_unlocked@plt>
   11594:	mov	r2, #5
   11598:	ldr	r1, [pc, #388]	; 11724 <__assert_fail@plt+0x81c>
   1159c:	mov	r0, r5
   115a0:	bl	10d4c <dcgettext@plt>
   115a4:	ldr	r1, [r4]
   115a8:	bl	10cb0 <fputs_unlocked@plt>
   115ac:	bl	11fcc <__assert_fail@plt+0x10c4>
   115b0:	mov	r2, #5
   115b4:	ldr	r1, [pc, #364]	; 11728 <__assert_fail@plt+0x820>
   115b8:	mov	r0, r5
   115bc:	bl	10d4c <dcgettext@plt>
   115c0:	ldr	r1, [r4]
   115c4:	bl	10cb0 <fputs_unlocked@plt>
   115c8:	mov	r2, #5
   115cc:	ldr	r1, [pc, #344]	; 1172c <__assert_fail@plt+0x824>
   115d0:	mov	r0, r5
   115d4:	bl	10d4c <dcgettext@plt>
   115d8:	ldr	r1, [r4]
   115dc:	bl	10cb0 <fputs_unlocked@plt>
   115e0:	ldr	lr, [pc, #328]	; 11730 <__assert_fail@plt+0x828>
   115e4:	mov	ip, sp
   115e8:	ldm	lr!, {r0, r1, r2, r3}
   115ec:	stmia	ip!, {r0, r1, r2, r3}
   115f0:	ldm	lr!, {r0, r1, r2, r3}
   115f4:	stmia	ip!, {r0, r1, r2, r3}
   115f8:	ldm	lr!, {r0, r1, r2, r3}
   115fc:	stmia	ip!, {r0, r1, r2, r3}
   11600:	ldm	lr, {r0, r1}
   11604:	stm	ip, {r0, r1}
   11608:	ldr	r1, [sp, r6]
   1160c:	add	r7, sp, r6
   11610:	cmp	r1, #0
   11614:	bne	116b8 <__assert_fail@plt+0x7b0>
   11618:	ldr	r6, [r7, #4]
   1161c:	ldr	r7, [pc, #240]	; 11714 <__assert_fail@plt+0x80c>
   11620:	cmp	r6, #0
   11624:	mov	r2, #5
   11628:	ldr	r1, [pc, #260]	; 11734 <__assert_fail@plt+0x82c>
   1162c:	mov	r0, #0
   11630:	moveq	r6, r7
   11634:	bl	10d4c <dcgettext@plt>
   11638:	ldr	r3, [pc, #248]	; 11738 <__assert_fail@plt+0x830>
   1163c:	ldr	r2, [pc, #248]	; 1173c <__assert_fail@plt+0x834>
   11640:	mov	r1, r0
   11644:	mov	r0, #1
   11648:	bl	10e48 <__printf_chk@plt>
   1164c:	mov	r1, #0
   11650:	mov	r0, #5
   11654:	bl	10e84 <setlocale@plt>
   11658:	cmp	r0, #0
   1165c:	bne	116d0 <__assert_fail@plt+0x7c8>
   11660:	mov	r2, #5
   11664:	ldr	r1, [pc, #212]	; 11740 <__assert_fail@plt+0x838>
   11668:	mov	r0, #0
   1166c:	bl	10d4c <dcgettext@plt>
   11670:	ldr	r3, [pc, #156]	; 11714 <__assert_fail@plt+0x80c>
   11674:	ldr	r2, [pc, #188]	; 11738 <__assert_fail@plt+0x830>
   11678:	mov	r1, r0
   1167c:	mov	r0, #1
   11680:	bl	10e48 <__printf_chk@plt>
   11684:	mov	r2, #5
   11688:	ldr	r1, [pc, #180]	; 11744 <__assert_fail@plt+0x83c>
   1168c:	mov	r0, #0
   11690:	bl	10d4c <dcgettext@plt>
   11694:	ldr	r2, [pc, #172]	; 11748 <__assert_fail@plt+0x840>
   11698:	cmp	r6, r7
   1169c:	ldr	r3, [pc, #168]	; 1174c <__assert_fail@plt+0x844>
   116a0:	moveq	r3, r2
   116a4:	mov	r2, r6
   116a8:	mov	r1, r0
   116ac:	mov	r0, #1
   116b0:	bl	10e48 <__printf_chk@plt>
   116b4:	b	1151c <__assert_fail@plt+0x614>
   116b8:	mov	r0, r8
   116bc:	bl	10cc8 <strcmp@plt>
   116c0:	add	r6, r6, #8
   116c4:	cmp	r0, #0
   116c8:	bne	11608 <__assert_fail@plt+0x700>
   116cc:	b	11618 <__assert_fail@plt+0x710>
   116d0:	mov	r2, #3
   116d4:	ldr	r1, [pc, #116]	; 11750 <__assert_fail@plt+0x848>
   116d8:	bl	10ed8 <strncmp@plt>
   116dc:	cmp	r0, #0
   116e0:	beq	11660 <__assert_fail@plt+0x758>
   116e4:	mov	r2, #5
   116e8:	ldr	r1, [pc, #100]	; 11754 <__assert_fail@plt+0x84c>
   116ec:	mov	r0, #0
   116f0:	bl	10d4c <dcgettext@plt>
   116f4:	ldr	r1, [r4]
   116f8:	bl	10cb0 <fputs_unlocked@plt>
   116fc:	b	11660 <__assert_fail@plt+0x758>
   11700:	andeq	r6, r2, r4, lsr #3
   11704:	andeq	r6, r2, r8, asr #2
   11708:	andeq	r4, r1, sp, lsr sp
   1170c:	andeq	r4, r1, r4, ror #26
   11710:	andeq	r6, r2, r4, asr r1
   11714:	andeq	r4, r1, r4, lsr sp
   11718:	andeq	r4, r1, r5, lsl #27
   1171c:	andeq	r4, r1, r7, asr #27
   11720:	strdeq	r4, [r1], -pc	; <UNPREDICTABLE>
   11724:	andeq	r4, r1, sl, asr #28
   11728:	andeq	r4, r1, r7, lsr #30
   1172c:	andeq	r4, r1, r4, asr pc
   11730:	muleq	r1, ip, ip
   11734:	andeq	r4, r1, sl, lsl #31
   11738:	andeq	r4, r1, r1, lsr #31
   1173c:	andeq	r4, r1, r9, asr #31
   11740:	andeq	r5, r1, r2, lsr #32
   11744:	andeq	r5, r1, sp, lsr r0
   11748:	andeq	r5, r1, r2, lsl #2
   1174c:	andeq	r5, r1, pc, rrx
   11750:	ldrdeq	r4, [r1], -r7
   11754:	ldrdeq	r4, [r1], -fp
   11758:	ldr	r3, [pc, #72]	; 117a8 <__assert_fail@plt+0x8a0>
   1175c:	push	{r4, r6, r7, lr}
   11760:	mov	r6, r0
   11764:	mov	r7, r1
   11768:	ldrd	r0, [r3]
   1176c:	mov	r4, r3
   11770:	orrs	r2, r0, r1
   11774:	moveq	r0, #1
   11778:	beq	117a0 <__assert_fail@plt+0x898>
   1177c:	mov	r2, #5
   11780:	ldr	r1, [pc, #36]	; 117ac <__assert_fail@plt+0x8a4>
   11784:	mov	r0, #0
   11788:	bl	10d4c <dcgettext@plt>
   1178c:	mov	r1, #0
   11790:	mov	r2, r0
   11794:	mov	r0, r1
   11798:	bl	10db8 <error@plt>
   1179c:	mov	r0, #0
   117a0:	strd	r6, [r4]
   117a4:	pop	{r4, r6, r7, pc}
   117a8:	andeq	r6, r2, r0, ror #2
   117ac:	andeq	r5, r1, r0, ror r1
   117b0:	ldr	r3, [pc, #72]	; 11800 <__assert_fail@plt+0x8f8>
   117b4:	push	{r4, r6, r7, lr}
   117b8:	mov	r6, r0
   117bc:	mov	r7, r1
   117c0:	ldrd	r0, [r3, #8]
   117c4:	mov	r4, r3
   117c8:	orrs	r2, r0, r1
   117cc:	moveq	r0, #1
   117d0:	beq	117f8 <__assert_fail@plt+0x8f0>
   117d4:	mov	r2, #5
   117d8:	ldr	r1, [pc, #36]	; 11804 <__assert_fail@plt+0x8fc>
   117dc:	mov	r0, #0
   117e0:	bl	10d4c <dcgettext@plt>
   117e4:	mov	r1, #0
   117e8:	mov	r2, r0
   117ec:	mov	r0, r1
   117f0:	bl	10db8 <error@plt>
   117f4:	mov	r0, #0
   117f8:	strd	r6, [r4, #8]
   117fc:	pop	{r4, r6, r7, pc}
   11800:	andeq	r6, r2, r0, ror #2
   11804:	muleq	r1, pc, r1	; <UNPREDICTABLE>
   11808:	push	{r4, r6, r7, r8, r9, lr}
   1180c:	mov	r8, r0
   11810:	ldr	r4, [pc, #200]	; 118e0 <__assert_fail@plt+0x9d8>
   11814:	mov	r9, r1
   11818:	ldr	r3, [r4, #16]
   1181c:	cmp	r3, #0
   11820:	beq	118cc <__assert_fail@plt+0x9c4>
   11824:	ldr	r2, [r4, #20]
   11828:	add	r2, r2, r3, lsl #3
   1182c:	ldrd	r6, [r2, #-8]
   11830:	cmp	r7, r1
   11834:	cmpeq	r6, r0
   11838:	movhi	r6, #0
   1183c:	movhi	r7, #0
   11840:	bhi	1184c <__assert_fail@plt+0x944>
   11844:	subs	r6, r8, r6
   11848:	sbc	r7, r9, r7
   1184c:	ldr	r2, [r4, #24]
   11850:	cmp	r3, r2
   11854:	bne	1186c <__assert_fail@plt+0x964>
   11858:	mov	r2, #8
   1185c:	ldr	r1, [pc, #128]	; 118e4 <__assert_fail@plt+0x9dc>
   11860:	ldr	r0, [r4, #20]
   11864:	bl	13f74 <__assert_fail@plt+0x306c>
   11868:	str	r0, [r4, #20]
   1186c:	ldr	r3, [r4, #16]
   11870:	ldr	r2, [r4, #20]
   11874:	add	r1, r3, #1
   11878:	lsl	r3, r3, #3
   1187c:	str	r1, [r4, #16]
   11880:	strd	r8, [r2, r3]
   11884:	ldr	r2, [r4, #28]
   11888:	mov	r3, #0
   1188c:	cmp	r7, r3
   11890:	cmpeq	r6, r2
   11894:	popls	{r4, r6, r7, r8, r9, pc}
   11898:	mov	r3, #0
   1189c:	mvn	r2, #0
   118a0:	cmp	r7, r3
   118a4:	cmpeq	r6, r2
   118a8:	bls	118d8 <__assert_fail@plt+0x9d0>
   118ac:	mov	r2, #5
   118b0:	ldr	r1, [pc, #48]	; 118e8 <__assert_fail@plt+0x9e0>
   118b4:	mov	r0, #0
   118b8:	bl	10d4c <dcgettext@plt>
   118bc:	mov	r1, #0
   118c0:	mov	r2, r0
   118c4:	mov	r0, #1
   118c8:	bl	10db8 <error@plt>
   118cc:	mov	r6, #0
   118d0:	mov	r7, #0
   118d4:	b	11844 <__assert_fail@plt+0x93c>
   118d8:	str	r6, [r4, #28]
   118dc:	pop	{r4, r6, r7, r8, r9, pc}
   118e0:	andeq	r6, r2, r0, ror #2
   118e4:	andeq	r6, r2, r8, ror r1
   118e8:	andeq	r5, r1, lr, asr #3
   118ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   118f0:	mov	r8, #0
   118f4:	sub	sp, sp, #20
   118f8:	mov	r2, #0
   118fc:	mov	r3, #0
   11900:	mov	r7, r0
   11904:	mov	fp, #1
   11908:	mov	sl, r8
   1190c:	mov	r9, r8
   11910:	mov	r5, r8
   11914:	mov	r6, r8
   11918:	strd	r2, [sp]
   1191c:	ldrb	r3, [r7]
   11920:	cmp	r3, #0
   11924:	moveq	r0, fp
   11928:	beq	11978 <__assert_fail@plt+0xa70>
   1192c:	cmp	r3, #44	; 0x2c
   11930:	str	r3, [sp, #12]
   11934:	beq	11954 <__assert_fail@plt+0xa4c>
   11938:	bl	10e00 <__ctype_b_loc@plt>
   1193c:	ldr	r3, [sp, #12]
   11940:	lsl	r2, r3, #1
   11944:	ldr	r1, [r0]
   11948:	ldrh	r4, [r1, r2]
   1194c:	ands	r4, r4, #1
   11950:	beq	119d4 <__assert_fail@plt+0xacc>
   11954:	cmp	r5, #0
   11958:	beq	119cc <__assert_fail@plt+0xac4>
   1195c:	cmp	r9, #0
   11960:	ldrd	r0, [sp]
   11964:	beq	119a4 <__assert_fail@plt+0xa9c>
   11968:	bl	11758 <__assert_fail@plt+0x850>
   1196c:	cmp	r0, #0
   11970:	bne	11b90 <__assert_fail@plt+0xc88>
   11974:	mov	r5, r9
   11978:	and	r5, r5, r0
   1197c:	tst	r5, #255	; 0xff
   11980:	beq	11994 <__assert_fail@plt+0xa8c>
   11984:	cmp	r9, #0
   11988:	ldrd	r0, [sp]
   1198c:	beq	11bb0 <__assert_fail@plt+0xca8>
   11990:	bl	11758 <__assert_fail@plt+0x850>
   11994:	cmp	r0, #0
   11998:	bne	11bcc <__assert_fail@plt+0xcc4>
   1199c:	mov	r0, #1
   119a0:	bl	10e0c <exit@plt>
   119a4:	cmp	sl, #0
   119a8:	beq	119c0 <__assert_fail@plt+0xab8>
   119ac:	bl	117b0 <__assert_fail@plt+0x8a8>
   119b0:	cmp	r0, #0
   119b4:	bne	11b9c <__assert_fail@plt+0xc94>
   119b8:	mov	r5, sl
   119bc:	b	11978 <__assert_fail@plt+0xa70>
   119c0:	bl	11808 <__assert_fail@plt+0x900>
   119c4:	mov	r9, r6
   119c8:	mov	r5, #0
   119cc:	add	r7, r7, #1
   119d0:	b	1191c <__assert_fail@plt+0xa14>
   119d4:	cmp	r3, #47	; 0x2f
   119d8:	bne	11a2c <__assert_fail@plt+0xb24>
   119dc:	cmp	r5, #0
   119e0:	moveq	sl, r6
   119e4:	moveq	r9, #1
   119e8:	beq	119cc <__assert_fail@plt+0xac4>
   119ec:	mov	r2, #5
   119f0:	ldr	r1, [pc, #488]	; 11be0 <__assert_fail@plt+0xcd8>
   119f4:	mov	r0, r6
   119f8:	bl	10d4c <dcgettext@plt>
   119fc:	mov	fp, r6
   11a00:	mov	sl, #0
   11a04:	mov	r9, r0
   11a08:	mov	r0, r7
   11a0c:	bl	13964 <__assert_fail@plt+0x2a5c>
   11a10:	mov	r2, r9
   11a14:	mov	r1, r6
   11a18:	mov	r9, r5
   11a1c:	mov	r3, r0
   11a20:	mov	r0, r4
   11a24:	bl	10db8 <error@plt>
   11a28:	b	119cc <__assert_fail@plt+0xac4>
   11a2c:	cmp	r3, #43	; 0x2b
   11a30:	bne	11a84 <__assert_fail@plt+0xb7c>
   11a34:	cmp	r5, #0
   11a38:	moveq	r9, r6
   11a3c:	moveq	sl, #1
   11a40:	beq	119cc <__assert_fail@plt+0xac4>
   11a44:	mov	r2, #5
   11a48:	ldr	r1, [pc, #404]	; 11be4 <__assert_fail@plt+0xcdc>
   11a4c:	mov	r0, r6
   11a50:	bl	10d4c <dcgettext@plt>
   11a54:	mov	sl, r5
   11a58:	mov	fp, r6
   11a5c:	mov	r9, r0
   11a60:	mov	r0, r7
   11a64:	bl	13964 <__assert_fail@plt+0x2a5c>
   11a68:	mov	r2, r9
   11a6c:	mov	r1, r6
   11a70:	mov	r9, #0
   11a74:	mov	r3, r0
   11a78:	mov	r0, r4
   11a7c:	bl	10db8 <error@plt>
   11a80:	b	119cc <__assert_fail@plt+0xac4>
   11a84:	sub	r1, r3, #48	; 0x30
   11a88:	cmp	r1, #9
   11a8c:	bhi	11b58 <__assert_fail@plt+0xc50>
   11a90:	cmp	r5, #0
   11a94:	beq	11b44 <__assert_fail@plt+0xc3c>
   11a98:	ldrd	r2, [sp]
   11a9c:	add	r5, pc, #308	; 0x134
   11aa0:	ldrd	r4, [r5]
   11aa4:	cmp	r3, r5
   11aa8:	cmpeq	r2, r4
   11aac:	bhi	11adc <__assert_fail@plt+0xbd4>
   11ab0:	ldr	r3, [sp]
   11ab4:	mov	r0, #10
   11ab8:	ldr	ip, [sp, #4]
   11abc:	umull	r2, r3, r3, r0
   11ac0:	mla	r3, r0, ip, r3
   11ac4:	adds	r2, r2, r1
   11ac8:	adc	r3, r3, r1, asr #31
   11acc:	ldrd	r0, [sp]
   11ad0:	cmp	r3, r1
   11ad4:	cmpeq	r2, r0
   11ad8:	bcs	11ba4 <__assert_fail@plt+0xc9c>
   11adc:	ldr	r1, [pc, #260]	; 11be8 <__assert_fail@plt+0xce0>
   11ae0:	mov	r0, r8
   11ae4:	bl	10efc <strspn@plt>
   11ae8:	mov	fp, r6
   11aec:	mov	r1, r0
   11af0:	mov	r7, r0
   11af4:	mov	r0, r8
   11af8:	bl	142c8 <__assert_fail@plt+0x33c0>
   11afc:	mov	r2, #5
   11b00:	ldr	r1, [pc, #228]	; 11bec <__assert_fail@plt+0xce4>
   11b04:	sub	r7, r7, #1
   11b08:	add	r7, r8, r7
   11b0c:	mov	r4, r0
   11b10:	mov	r0, r6
   11b14:	bl	10d4c <dcgettext@plt>
   11b18:	mov	r5, r0
   11b1c:	mov	r0, r4
   11b20:	bl	13964 <__assert_fail@plt+0x2a5c>
   11b24:	mov	r2, r5
   11b28:	mov	r1, r6
   11b2c:	mov	r3, r0
   11b30:	mov	r0, #0
   11b34:	bl	10db8 <error@plt>
   11b38:	mov	r0, r4
   11b3c:	bl	1224c <__assert_fail@plt+0x1344>
   11b40:	b	11ba8 <__assert_fail@plt+0xca0>
   11b44:	mov	r2, #0
   11b48:	mov	r3, #0
   11b4c:	mov	r8, r7
   11b50:	strd	r2, [sp]
   11b54:	b	11ab0 <__assert_fail@plt+0xba8>
   11b58:	mov	r2, #5
   11b5c:	ldr	r1, [pc, #140]	; 11bf0 <__assert_fail@plt+0xce8>
   11b60:	mov	r0, r4
   11b64:	bl	10d4c <dcgettext@plt>
   11b68:	mov	r6, r0
   11b6c:	mov	r0, r7
   11b70:	bl	13964 <__assert_fail@plt+0x2a5c>
   11b74:	mov	r2, r6
   11b78:	mov	r1, r4
   11b7c:	mov	r3, r0
   11b80:	mov	r0, r4
   11b84:	bl	10db8 <error@plt>
   11b88:	mov	r0, r4
   11b8c:	b	11978 <__assert_fail@plt+0xa70>
   11b90:	mov	r9, r0
   11b94:	mov	r5, r6
   11b98:	b	119cc <__assert_fail@plt+0xac4>
   11b9c:	mov	sl, r0
   11ba0:	b	11b94 <__assert_fail@plt+0xc8c>
   11ba4:	strd	r2, [sp]
   11ba8:	mov	r5, #1
   11bac:	b	119cc <__assert_fail@plt+0xac4>
   11bb0:	cmp	sl, #0
   11bb4:	beq	11bc0 <__assert_fail@plt+0xcb8>
   11bb8:	bl	117b0 <__assert_fail@plt+0x8a8>
   11bbc:	b	11994 <__assert_fail@plt+0xa8c>
   11bc0:	add	sp, sp, #20
   11bc4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11bc8:	b	11808 <__assert_fail@plt+0x900>
   11bcc:	add	sp, sp, #20
   11bd0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11bd4:	nop			; (mov r0, r0)
   11bd8:	ldmibls	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   11bdc:	ldmibne	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   11be0:	andeq	r5, r1, r5, ror #3
   11be4:	andeq	r5, r1, lr, lsl #4
   11be8:	andeq	r5, r1, r2, ror #4
   11bec:	andeq	r5, r1, sp, ror #4
   11bf0:	andeq	r5, r1, r7, lsr r2
   11bf4:	ldr	r3, [pc, #228]	; 11ce0 <__assert_fail@plt+0xdd8>
   11bf8:	push	{r4, r5, r6, r7, r8, lr}
   11bfc:	mov	r1, #0
   11c00:	ldr	ip, [r3, #20]
   11c04:	ldr	r2, [r3, #16]
   11c08:	sub	r0, ip, #8
   11c0c:	mov	r6, #0
   11c10:	mov	r7, #0
   11c14:	cmp	r2, r1
   11c18:	bne	11c40 <__assert_fail@plt+0xd38>
   11c1c:	ldrd	r0, [r3, #8]
   11c20:	orrs	lr, r0, r1
   11c24:	beq	11c90 <__assert_fail@plt+0xd88>
   11c28:	ldrd	r4, [r3]
   11c2c:	orrs	ip, r4, r5
   11c30:	beq	11cd0 <__assert_fail@plt+0xdc8>
   11c34:	mov	r2, #5
   11c38:	ldr	r1, [pc, #164]	; 11ce4 <__assert_fail@plt+0xddc>
   11c3c:	b	11c54 <__assert_fail@plt+0xd4c>
   11c40:	ldrd	r4, [r0, #8]!
   11c44:	orrs	lr, r4, r5
   11c48:	bne	11c6c <__assert_fail@plt+0xd64>
   11c4c:	ldr	r1, [pc, #148]	; 11ce8 <__assert_fail@plt+0xde0>
   11c50:	mov	r2, #5
   11c54:	mov	r0, #0
   11c58:	bl	10d4c <dcgettext@plt>
   11c5c:	mov	r1, #0
   11c60:	mov	r2, r0
   11c64:	mov	r0, #1
   11c68:	bl	10db8 <error@plt>
   11c6c:	cmp	r5, r7
   11c70:	cmpeq	r4, r6
   11c74:	movls	r2, #5
   11c78:	ldrls	r1, [pc, #108]	; 11cec <__assert_fail@plt+0xde4>
   11c7c:	bls	11c54 <__assert_fail@plt+0xd4c>
   11c80:	add	r1, r1, #1
   11c84:	mov	r6, r4
   11c88:	mov	r7, r5
   11c8c:	b	11c14 <__assert_fail@plt+0xd0c>
   11c90:	cmp	r2, #0
   11c94:	bne	11cb0 <__assert_fail@plt+0xda8>
   11c98:	ldrd	r0, [r3]
   11c9c:	orrs	r2, r0, r1
   11ca0:	moveq	r0, #8
   11ca4:	str	r0, [r3, #28]
   11ca8:	mov	r1, #0
   11cac:	b	11cc8 <__assert_fail@plt+0xdc0>
   11cb0:	cmp	r2, #1
   11cb4:	bne	11cd8 <__assert_fail@plt+0xdd0>
   11cb8:	ldrd	r0, [r3]
   11cbc:	orrs	r2, r0, r1
   11cc0:	bne	11cd8 <__assert_fail@plt+0xdd0>
   11cc4:	ldrd	r0, [ip]
   11cc8:	strd	r0, [r3, #32]
   11ccc:	pop	{r4, r5, r6, r7, r8, pc}
   11cd0:	cmp	r2, #0
   11cd4:	beq	11ca4 <__assert_fail@plt+0xd9c>
   11cd8:	mov	r0, #0
   11cdc:	b	11ca8 <__assert_fail@plt+0xda0>
   11ce0:	andeq	r6, r2, r0, ror #2
   11ce4:			; <UNDEFINED> instruction: 0x000152b7
   11ce8:	andeq	r5, r1, r6, lsl #5
   11cec:	muleq	r1, fp, r2
   11cf0:	ldr	ip, [pc, #224]	; 11dd8 <__assert_fail@plt+0xed0>
   11cf4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11cf8:	mov	r6, r3
   11cfc:	ldrd	r8, [ip, #32]
   11d00:	mov	r3, #0
   11d04:	strb	r3, [r6]
   11d08:	orrs	r3, r8, r9
   11d0c:	mov	r4, r0
   11d10:	mov	r5, r1
   11d14:	ldreq	r9, [ip, #16]
   11d18:	ldreq	r8, [ip, #20]
   11d1c:	beq	11d64 <__assert_fail@plt+0xe5c>
   11d20:	adds	r4, r0, r8
   11d24:	adc	r5, r1, r9
   11d28:	mov	r2, r8
   11d2c:	mov	r3, r9
   11d30:	bl	14aa0 <__assert_fail@plt+0x3b98>
   11d34:	mov	r0, r4
   11d38:	mov	r1, r5
   11d3c:	subs	r0, r0, r2
   11d40:	sbc	r1, r1, r3
   11d44:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11d48:	lsl	r3, lr, #3
   11d4c:	ldrd	r0, [r8, r3]
   11d50:	cmp	r5, r1
   11d54:	cmpeq	r4, r0
   11d58:	popcc	{r4, r5, r6, r7, r8, r9, sl, pc}
   11d5c:	add	lr, lr, #1
   11d60:	str	lr, [r2]
   11d64:	ldr	lr, [r2]
   11d68:	cmp	lr, r9
   11d6c:	bcc	11d48 <__assert_fail@plt+0xe40>
   11d70:	ldrd	r2, [ip]
   11d74:	orrs	r1, r2, r3
   11d78:	beq	11d9c <__assert_fail@plt+0xe94>
   11d7c:	adds	r6, r4, r2
   11d80:	adc	r7, r5, r3
   11d84:	mov	r0, r4
   11d88:	mov	r1, r5
   11d8c:	bl	14aa0 <__assert_fail@plt+0x3b98>
   11d90:	mov	r0, r6
   11d94:	mov	r1, r7
   11d98:	b	11d3c <__assert_fail@plt+0xe34>
   11d9c:	ldrd	r0, [ip, #8]
   11da0:	orrs	r3, r0, r1
   11da4:	beq	11dcc <__assert_fail@plt+0xec4>
   11da8:	add	r8, r8, r9, lsl #3
   11dac:	adds	r6, r4, r0
   11db0:	ldrd	r8, [r8, #-8]
   11db4:	adc	r7, r5, r1
   11db8:	mov	r2, r0
   11dbc:	subs	r0, r4, r8
   11dc0:	mov	r3, r1
   11dc4:	sbc	r1, r5, r9
   11dc8:	b	11d8c <__assert_fail@plt+0xe84>
   11dcc:	mov	r3, #1
   11dd0:	strb	r3, [r6]
   11dd4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11dd8:	andeq	r6, r2, r0, ror #2
   11ddc:	ldr	r3, [pc, #24]	; 11dfc <__assert_fail@plt+0xef4>
   11de0:	cmp	r0, #0
   11de4:	mov	r2, #0
   11de8:	strb	r2, [r3, #40]	; 0x28
   11dec:	ldreq	r2, [pc, #12]	; 11e00 <__assert_fail@plt+0xef8>
   11df0:	strne	r0, [r3, #44]	; 0x2c
   11df4:	streq	r2, [r3, #44]	; 0x2c
   11df8:	bx	lr
   11dfc:	andeq	r6, r2, r0, ror #2
   11e00:	andeq	r6, r2, r8, ror #1
   11e04:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11e08:	subs	r6, r0, #0
   11e0c:	ldr	r4, [pc, #336]	; 11f64 <__assert_fail@plt+0x105c>
   11e10:	beq	11ea0 <__assert_fail@plt+0xf98>
   11e14:	ldr	r8, [r4, #48]	; 0x30
   11e18:	cmp	r8, #0
   11e1c:	bne	11e34 <__assert_fail@plt+0xf2c>
   11e20:	ldr	r3, [pc, #320]	; 11f68 <__assert_fail@plt+0x1060>
   11e24:	mov	r2, #340	; 0x154
   11e28:	ldr	r1, [pc, #316]	; 11f6c <__assert_fail@plt+0x1064>
   11e2c:	ldr	r0, [pc, #316]	; 11f70 <__assert_fail@plt+0x1068>
   11e30:	bl	10f08 <__assert_fail@plt>
   11e34:	bl	10e24 <__errno_location@plt>
   11e38:	ldr	r5, [r0]
   11e3c:	mov	r7, r0
   11e40:	mov	r0, r6
   11e44:	bl	10da0 <ferror_unlocked@plt>
   11e48:	ldr	r1, [pc, #292]	; 11f74 <__assert_fail@plt+0x106c>
   11e4c:	cmp	r0, #0
   11e50:	mov	r0, r8
   11e54:	moveq	r5, #0
   11e58:	bl	10cc8 <strcmp@plt>
   11e5c:	cmp	r0, #0
   11e60:	mov	r0, r6
   11e64:	bne	11ecc <__assert_fail@plt+0xfc4>
   11e68:	bl	10ea8 <clearerr_unlocked@plt>
   11e6c:	cmp	r5, #0
   11e70:	beq	11ea0 <__assert_fail@plt+0xf98>
   11e74:	ldr	r2, [r4, #48]	; 0x30
   11e78:	mov	r1, #3
   11e7c:	mov	r0, #0
   11e80:	bl	13824 <__assert_fail@plt+0x291c>
   11e84:	ldr	r2, [pc, #236]	; 11f78 <__assert_fail@plt+0x1070>
   11e88:	mov	r1, r5
   11e8c:	mov	r3, r0
   11e90:	mov	r0, #0
   11e94:	bl	10db8 <error@plt>
   11e98:	mov	r3, #1
   11e9c:	str	r3, [r4, #52]	; 0x34
   11ea0:	ldr	r7, [pc, #204]	; 11f74 <__assert_fail@plt+0x106c>
   11ea4:	ldr	r8, [pc, #208]	; 11f7c <__assert_fail@plt+0x1074>
   11ea8:	ldr	r9, [pc, #208]	; 11f80 <__assert_fail@plt+0x1078>
   11eac:	ldr	r3, [r4, #44]	; 0x2c
   11eb0:	add	r2, r3, #4
   11eb4:	ldr	r6, [r3]
   11eb8:	str	r2, [r4, #44]	; 0x2c
   11ebc:	cmp	r6, #0
   11ec0:	bne	11edc <__assert_fail@plt+0xfd4>
   11ec4:	mov	r5, r6
   11ec8:	b	11f24 <__assert_fail@plt+0x101c>
   11ecc:	bl	12154 <__assert_fail@plt+0x124c>
   11ed0:	cmp	r0, #0
   11ed4:	ldrne	r5, [r7]
   11ed8:	b	11e6c <__assert_fail@plt+0xf64>
   11edc:	mov	r1, r7
   11ee0:	mov	r0, r6
   11ee4:	bl	10cc8 <strcmp@plt>
   11ee8:	cmp	r0, #0
   11eec:	moveq	r3, #1
   11ef0:	strbeq	r3, [r4, #40]	; 0x28
   11ef4:	ldreq	r5, [r9]
   11ef8:	beq	11f0c <__assert_fail@plt+0x1004>
   11efc:	mov	r1, r8
   11f00:	mov	r0, r6
   11f04:	bl	10eb4 <fopen64@plt>
   11f08:	mov	r5, r0
   11f0c:	cmp	r5, #0
   11f10:	beq	11f2c <__assert_fail@plt+0x1024>
   11f14:	mov	r1, #2
   11f18:	mov	r0, r5
   11f1c:	str	r6, [r4, #48]	; 0x30
   11f20:	bl	12124 <__assert_fail@plt+0x121c>
   11f24:	mov	r0, r5
   11f28:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11f2c:	bl	10e24 <__errno_location@plt>
   11f30:	mov	r2, r6
   11f34:	mov	r1, #3
   11f38:	ldr	sl, [r0]
   11f3c:	mov	r0, r5
   11f40:	bl	13824 <__assert_fail@plt+0x291c>
   11f44:	ldr	r2, [pc, #44]	; 11f78 <__assert_fail@plt+0x1070>
   11f48:	mov	r1, sl
   11f4c:	mov	r3, r0
   11f50:	mov	r0, r5
   11f54:	bl	10db8 <error@plt>
   11f58:	mov	r3, #1
   11f5c:	str	r3, [r4, #52]	; 0x34
   11f60:	b	11eac <__assert_fail@plt+0xfa4>
   11f64:	andeq	r6, r2, r0, ror #2
   11f68:	andeq	r5, r1, r6, ror #2
   11f6c:	andeq	r5, r1, r4, ror #5
   11f70:	strdeq	r5, [r1], -r8
   11f74:	andeq	r5, r1, r6, lsl #10
   11f78:	andeq	r5, r1, pc, asr r2
   11f7c:	andeq	r5, r1, r8, asr #1
   11f80:	andeq	r6, r2, r0, asr r1
   11f84:	ldr	r3, [pc, #52]	; 11fc0 <__assert_fail@plt+0x10b8>
   11f88:	ldrb	r3, [r3, #40]	; 0x28
   11f8c:	cmp	r3, #0
   11f90:	bxeq	lr
   11f94:	ldr	r3, [pc, #40]	; 11fc4 <__assert_fail@plt+0x10bc>
   11f98:	push	{r4, lr}
   11f9c:	ldr	r0, [r3]
   11fa0:	bl	12154 <__assert_fail@plt+0x124c>
   11fa4:	cmp	r0, #0
   11fa8:	popeq	{r4, pc}
   11fac:	bl	10e24 <__errno_location@plt>
   11fb0:	ldr	r2, [pc, #16]	; 11fc8 <__assert_fail@plt+0x10c0>
   11fb4:	ldr	r1, [r0]
   11fb8:	mov	r0, #1
   11fbc:	bl	10db8 <error@plt>
   11fc0:	andeq	r6, r2, r0, ror #2
   11fc4:	andeq	r6, r2, r0, asr r1
   11fc8:	andeq	r5, r1, r6, lsl #10
   11fcc:	push	{r4, lr}
   11fd0:	mov	r2, #5
   11fd4:	ldr	r4, [pc, #44]	; 12008 <__assert_fail@plt+0x1100>
   11fd8:	ldr	r1, [pc, #44]	; 1200c <__assert_fail@plt+0x1104>
   11fdc:	mov	r0, #0
   11fe0:	bl	10d4c <dcgettext@plt>
   11fe4:	ldr	r1, [r4]
   11fe8:	bl	10cb0 <fputs_unlocked@plt>
   11fec:	ldr	r1, [pc, #28]	; 12010 <__assert_fail@plt+0x1108>
   11ff0:	mov	r2, #5
   11ff4:	mov	r0, #0
   11ff8:	bl	10d4c <dcgettext@plt>
   11ffc:	ldr	r1, [r4]
   12000:	pop	{r4, lr}
   12004:	b	10cb0 <fputs_unlocked@plt>
   12008:	andeq	r6, r2, r4, asr r1
   1200c:	andeq	r5, r1, r2, lsl #6
   12010:	andeq	r5, r1, r1, asr #6
   12014:	ldr	r3, [pc, #4]	; 12020 <__assert_fail@plt+0x1118>
   12018:	str	r0, [r3]
   1201c:	bx	lr
   12020:	muleq	r2, ip, r1
   12024:	ldr	r3, [pc, #4]	; 12030 <__assert_fail@plt+0x1128>
   12028:	strb	r0, [r3, #4]
   1202c:	bx	lr
   12030:	muleq	r2, ip, r1
   12034:	ldr	r3, [pc, #192]	; 120fc <__assert_fail@plt+0x11f4>
   12038:	push	{r0, r1, r4, r5, r6, lr}
   1203c:	ldr	r0, [r3]
   12040:	bl	14434 <__assert_fail@plt+0x352c>
   12044:	cmp	r0, #0
   12048:	beq	120e0 <__assert_fail@plt+0x11d8>
   1204c:	ldr	r3, [pc, #172]	; 12100 <__assert_fail@plt+0x11f8>
   12050:	mov	r4, r3
   12054:	ldrb	r2, [r3, #4]
   12058:	cmp	r2, #0
   1205c:	beq	12070 <__assert_fail@plt+0x1168>
   12060:	bl	10e24 <__errno_location@plt>
   12064:	ldr	r3, [r0]
   12068:	cmp	r3, #32
   1206c:	beq	120e0 <__assert_fail@plt+0x11d8>
   12070:	mov	r2, #5
   12074:	ldr	r1, [pc, #136]	; 12104 <__assert_fail@plt+0x11fc>
   12078:	mov	r0, #0
   1207c:	bl	10d4c <dcgettext@plt>
   12080:	ldr	r4, [r4]
   12084:	cmp	r4, #0
   12088:	mov	r5, r0
   1208c:	beq	120c4 <__assert_fail@plt+0x11bc>
   12090:	bl	10e24 <__errno_location@plt>
   12094:	ldr	r6, [r0]
   12098:	mov	r0, r4
   1209c:	bl	13814 <__assert_fail@plt+0x290c>
   120a0:	str	r5, [sp]
   120a4:	ldr	r2, [pc, #92]	; 12108 <__assert_fail@plt+0x1200>
   120a8:	mov	r1, r6
   120ac:	mov	r3, r0
   120b0:	mov	r0, #0
   120b4:	bl	10db8 <error@plt>
   120b8:	ldr	r3, [pc, #76]	; 1210c <__assert_fail@plt+0x1204>
   120bc:	ldr	r0, [r3]
   120c0:	bl	10cf8 <_exit@plt>
   120c4:	bl	10e24 <__errno_location@plt>
   120c8:	mov	r3, r5
   120cc:	ldr	r2, [pc, #60]	; 12110 <__assert_fail@plt+0x1208>
   120d0:	ldr	r1, [r0]
   120d4:	mov	r0, r4
   120d8:	bl	10db8 <error@plt>
   120dc:	b	120b8 <__assert_fail@plt+0x11b0>
   120e0:	ldr	r3, [pc, #44]	; 12114 <__assert_fail@plt+0x120c>
   120e4:	ldr	r0, [r3]
   120e8:	bl	14434 <__assert_fail@plt+0x352c>
   120ec:	cmp	r0, #0
   120f0:	bne	120b8 <__assert_fail@plt+0x11b0>
   120f4:	add	sp, sp, #8
   120f8:	pop	{r4, r5, r6, pc}
   120fc:	andeq	r6, r2, r4, asr r1
   12100:	muleq	r2, ip, r1
   12104:	strheq	r5, [r1], -lr
   12108:			; <UNDEFINED> instruction: 0x000154bd
   1210c:	strdeq	r6, [r2], -r4
   12110:	andeq	r5, r1, pc, asr r2
   12114:	andeq	r6, r2, r8, asr #2
   12118:	push	{r4, r5}
   1211c:	pop	{r4, r5}
   12120:	b	10cd4 <posix_fadvise64@plt>
   12124:	cmp	r0, #0
   12128:	bxeq	lr
   1212c:	push	{r0, r1, r2, r3, r4, lr}
   12130:	mov	r4, r1
   12134:	bl	10e54 <fileno@plt>
   12138:	mov	r2, #0
   1213c:	mov	r3, #0
   12140:	str	r4, [sp, #8]
   12144:	strd	r2, [sp]
   12148:	bl	10cd4 <posix_fadvise64@plt>
   1214c:	add	sp, sp, #16
   12150:	pop	{r4, pc}
   12154:	push	{r0, r1, r2, r4, r5, lr}
   12158:	mov	r4, r0
   1215c:	bl	10e54 <fileno@plt>
   12160:	cmp	r0, #0
   12164:	mov	r0, r4
   12168:	bge	12178 <__assert_fail@plt+0x1270>
   1216c:	add	sp, sp, #12
   12170:	pop	{r4, r5, lr}
   12174:	b	10e6c <fclose@plt>
   12178:	bl	10ddc <__freading@plt>
   1217c:	cmp	r0, #0
   12180:	bne	121bc <__assert_fail@plt+0x12b4>
   12184:	mov	r0, r4
   12188:	bl	121fc <__assert_fail@plt+0x12f4>
   1218c:	cmp	r0, #0
   12190:	bne	121f0 <__assert_fail@plt+0x12e8>
   12194:	mov	r5, #0
   12198:	mov	r0, r4
   1219c:	bl	10e6c <fclose@plt>
   121a0:	cmp	r5, #0
   121a4:	beq	121b4 <__assert_fail@plt+0x12ac>
   121a8:	bl	10e24 <__errno_location@plt>
   121ac:	str	r5, [r0]
   121b0:	mvn	r0, #0
   121b4:	add	sp, sp, #12
   121b8:	pop	{r4, r5, pc}
   121bc:	mov	r0, r4
   121c0:	bl	10e54 <fileno@plt>
   121c4:	mov	r3, #1
   121c8:	str	r3, [sp]
   121cc:	mov	r2, #0
   121d0:	mov	r3, #0
   121d4:	bl	10d7c <lseek64@plt>
   121d8:	mvn	r3, #0
   121dc:	mvn	r2, #0
   121e0:	cmp	r1, r3
   121e4:	cmpeq	r0, r2
   121e8:	bne	12184 <__assert_fail@plt+0x127c>
   121ec:	b	12194 <__assert_fail@plt+0x128c>
   121f0:	bl	10e24 <__errno_location@plt>
   121f4:	ldr	r5, [r0]
   121f8:	b	12198 <__assert_fail@plt+0x1290>
   121fc:	push	{r0, r1, r4, lr}
   12200:	subs	r4, r0, #0
   12204:	bne	12218 <__assert_fail@plt+0x1310>
   12208:	mov	r0, r4
   1220c:	add	sp, sp, #8
   12210:	pop	{r4, lr}
   12214:	b	10ce0 <fflush@plt>
   12218:	bl	10ddc <__freading@plt>
   1221c:	cmp	r0, #0
   12220:	beq	12208 <__assert_fail@plt+0x1300>
   12224:	ldr	r3, [r4]
   12228:	tst	r3, #256	; 0x100
   1222c:	beq	12208 <__assert_fail@plt+0x1300>
   12230:	mov	r3, #1
   12234:	str	r3, [sp]
   12238:	mov	r2, #0
   1223c:	mov	r3, #0
   12240:	mov	r0, r4
   12244:	bl	122a0 <__assert_fail@plt+0x1398>
   12248:	b	12208 <__assert_fail@plt+0x1300>
   1224c:	push	{r0, r1, r2, r4, r5, lr}
   12250:	mov	r5, r0
   12254:	bl	10e24 <__errno_location@plt>
   12258:	ldr	r3, [r0]
   1225c:	mov	r4, r0
   12260:	str	r3, [sp]
   12264:	str	r3, [sp, #4]
   12268:	mov	r3, #0
   1226c:	str	r3, [r0]
   12270:	mov	r0, r5
   12274:	bl	10cec <free@plt>
   12278:	ldr	r3, [r4]
   1227c:	add	r2, sp, #8
   12280:	cmp	r3, #0
   12284:	moveq	r3, #4
   12288:	movne	r3, #0
   1228c:	add	r3, r2, r3
   12290:	ldr	r3, [r3, #-8]
   12294:	str	r3, [r4]
   12298:	add	sp, sp, #12
   1229c:	pop	{r4, r5, pc}
   122a0:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   122a4:	mov	r4, r0
   122a8:	ldmib	r0, {ip, lr}
   122ac:	ldr	r8, [sp, #32]
   122b0:	cmp	lr, ip
   122b4:	bne	12320 <__assert_fail@plt+0x1418>
   122b8:	ldr	lr, [r0, #20]
   122bc:	ldr	ip, [r0, #16]
   122c0:	cmp	lr, ip
   122c4:	bne	12320 <__assert_fail@plt+0x1418>
   122c8:	ldr	r5, [r0, #36]	; 0x24
   122cc:	cmp	r5, #0
   122d0:	bne	12320 <__assert_fail@plt+0x1418>
   122d4:	mov	r6, r2
   122d8:	mov	r7, r3
   122dc:	bl	10e54 <fileno@plt>
   122e0:	mov	r2, r6
   122e4:	mov	r3, r7
   122e8:	str	r8, [sp]
   122ec:	bl	10d7c <lseek64@plt>
   122f0:	mvn	r3, #0
   122f4:	mvn	r2, #0
   122f8:	cmp	r1, r3
   122fc:	cmpeq	r0, r2
   12300:	mvneq	r0, #0
   12304:	ldrne	r3, [r4]
   12308:	strdne	r0, [r4, #80]	; 0x50
   1230c:	movne	r0, r5
   12310:	bicne	r3, r3, #16
   12314:	strne	r3, [r4]
   12318:	add	sp, sp, #8
   1231c:	pop	{r4, r5, r6, r7, r8, pc}
   12320:	str	r8, [sp, #32]
   12324:	mov	r0, r4
   12328:	add	sp, sp, #8
   1232c:	pop	{r4, r5, r6, r7, r8, lr}
   12330:	b	10e78 <fseeko64@plt>
   12334:	push	{r4, r5, r6, lr}
   12338:	subs	r5, r0, #0
   1233c:	bne	12354 <__assert_fail@plt+0x144c>
   12340:	ldr	r3, [pc, #124]	; 123c4 <__assert_fail@plt+0x14bc>
   12344:	ldr	r0, [pc, #124]	; 123c8 <__assert_fail@plt+0x14c0>
   12348:	ldr	r1, [r3]
   1234c:	bl	10ecc <fputs@plt>
   12350:	bl	10ee4 <abort@plt>
   12354:	mov	r1, #47	; 0x2f
   12358:	bl	10e90 <strrchr@plt>
   1235c:	cmp	r0, #0
   12360:	addne	r4, r0, #1
   12364:	moveq	r4, r5
   12368:	sub	r3, r4, r5
   1236c:	cmp	r3, #6
   12370:	ble	123b0 <__assert_fail@plt+0x14a8>
   12374:	mov	r2, #7
   12378:	ldr	r1, [pc, #76]	; 123cc <__assert_fail@plt+0x14c4>
   1237c:	sub	r0, r4, #7
   12380:	bl	10ed8 <strncmp@plt>
   12384:	cmp	r0, #0
   12388:	bne	123b0 <__assert_fail@plt+0x14a8>
   1238c:	mov	r2, #3
   12390:	ldr	r1, [pc, #56]	; 123d0 <__assert_fail@plt+0x14c8>
   12394:	mov	r0, r4
   12398:	bl	10ed8 <strncmp@plt>
   1239c:	cmp	r0, #0
   123a0:	movne	r5, r4
   123a4:	ldreq	r3, [pc, #40]	; 123d4 <__assert_fail@plt+0x14cc>
   123a8:	addeq	r5, r4, #3
   123ac:	streq	r5, [r3]
   123b0:	ldr	r3, [pc, #32]	; 123d8 <__assert_fail@plt+0x14d0>
   123b4:	str	r5, [r3]
   123b8:	ldr	r3, [pc, #28]	; 123dc <__assert_fail@plt+0x14d4>
   123bc:	str	r5, [r3]
   123c0:	pop	{r4, r5, r6, pc}
   123c4:	andeq	r6, r2, r8, asr #2
   123c8:	andeq	r5, r1, r4, asr #9
   123cc:	strdeq	r5, [r1], -ip
   123d0:	andeq	r5, r1, r4, lsl #10
   123d4:	andeq	r6, r2, r8, lsr r1
   123d8:	andeq	r6, r2, r4, lsr #3
   123dc:	andeq	r6, r2, ip, lsr r1
   123e0:	push	{r4, r5, r6, lr}
   123e4:	mov	r2, #48	; 0x30
   123e8:	mov	r5, r1
   123ec:	mov	r1, #0
   123f0:	mov	r4, r0
   123f4:	bl	10e3c <memset@plt>
   123f8:	cmp	r5, #10
   123fc:	bne	12404 <__assert_fail@plt+0x14fc>
   12400:	bl	10ee4 <abort@plt>
   12404:	str	r5, [r4]
   12408:	mov	r0, r4
   1240c:	pop	{r4, r5, r6, pc}
   12410:	push	{r4, r5, r6, lr}
   12414:	mov	r4, r0
   12418:	mov	r5, r1
   1241c:	bl	144a4 <__assert_fail@plt+0x359c>
   12420:	ldrb	r3, [r0]
   12424:	bic	r3, r3, #32
   12428:	cmp	r3, #85	; 0x55
   1242c:	bne	1249c <__assert_fail@plt+0x1594>
   12430:	ldrb	r3, [r0, #1]
   12434:	bic	r3, r3, #32
   12438:	cmp	r3, #84	; 0x54
   1243c:	bne	12474 <__assert_fail@plt+0x156c>
   12440:	ldrb	r3, [r0, #2]
   12444:	bic	r3, r3, #32
   12448:	cmp	r3, #70	; 0x46
   1244c:	bne	12474 <__assert_fail@plt+0x156c>
   12450:	ldrb	r3, [r0, #3]
   12454:	cmp	r3, #45	; 0x2d
   12458:	bne	12474 <__assert_fail@plt+0x156c>
   1245c:	ldrb	r3, [r0, #4]
   12460:	cmp	r3, #56	; 0x38
   12464:	bne	12474 <__assert_fail@plt+0x156c>
   12468:	ldrb	r3, [r0, #5]
   1246c:	cmp	r3, #0
   12470:	beq	12488 <__assert_fail@plt+0x1580>
   12474:	ldr	r1, [pc, #144]	; 1250c <__assert_fail@plt+0x1604>
   12478:	ldr	r0, [pc, #144]	; 12510 <__assert_fail@plt+0x1608>
   1247c:	cmp	r5, #9
   12480:	movne	r0, r1
   12484:	pop	{r4, r5, r6, pc}
   12488:	ldrb	r3, [r4]
   1248c:	ldr	r1, [pc, #128]	; 12514 <__assert_fail@plt+0x160c>
   12490:	ldr	r0, [pc, #128]	; 12518 <__assert_fail@plt+0x1610>
   12494:	cmp	r3, #96	; 0x60
   12498:	b	12480 <__assert_fail@plt+0x1578>
   1249c:	cmp	r3, #71	; 0x47
   124a0:	bne	12474 <__assert_fail@plt+0x156c>
   124a4:	ldrb	r3, [r0, #1]
   124a8:	bic	r3, r3, #32
   124ac:	cmp	r3, #66	; 0x42
   124b0:	bne	12474 <__assert_fail@plt+0x156c>
   124b4:	ldrb	r3, [r0, #2]
   124b8:	cmp	r3, #49	; 0x31
   124bc:	bne	12474 <__assert_fail@plt+0x156c>
   124c0:	ldrb	r3, [r0, #3]
   124c4:	cmp	r3, #56	; 0x38
   124c8:	bne	12474 <__assert_fail@plt+0x156c>
   124cc:	ldrb	r3, [r0, #4]
   124d0:	cmp	r3, #48	; 0x30
   124d4:	bne	12474 <__assert_fail@plt+0x156c>
   124d8:	ldrb	r3, [r0, #5]
   124dc:	cmp	r3, #51	; 0x33
   124e0:	bne	12474 <__assert_fail@plt+0x156c>
   124e4:	ldrb	r3, [r0, #6]
   124e8:	cmp	r3, #48	; 0x30
   124ec:	bne	12474 <__assert_fail@plt+0x156c>
   124f0:	ldrb	r3, [r0, #7]
   124f4:	cmp	r3, #0
   124f8:	bne	12474 <__assert_fail@plt+0x156c>
   124fc:	ldrb	r3, [r4]
   12500:	ldr	r1, [pc, #20]	; 1251c <__assert_fail@plt+0x1614>
   12504:	ldr	r0, [pc, #20]	; 12520 <__assert_fail@plt+0x1618>
   12508:	b	12494 <__assert_fail@plt+0x158c>
   1250c:	andeq	r5, r1, r2, ror #5
   12510:	andeq	r5, r1, fp, ror #10
   12514:	andeq	r5, r1, r0, ror #10
   12518:	andeq	r5, r1, ip, asr r5
   1251c:	andeq	r5, r1, r8, ror #10
   12520:	andeq	r5, r1, r4, ror #10
   12524:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12528:	sub	sp, sp, #108	; 0x6c
   1252c:	mov	r8, r0
   12530:	str	r3, [sp, #36]	; 0x24
   12534:	mov	r5, r1
   12538:	str	r2, [sp, #44]	; 0x2c
   1253c:	ldr	sl, [sp, #144]	; 0x90
   12540:	bl	10d88 <__ctype_get_mb_cur_max@plt>
   12544:	ldr	r3, [sp, #148]	; 0x94
   12548:	mov	r7, #0
   1254c:	str	r7, [sp, #48]	; 0x30
   12550:	lsr	r6, r3, #1
   12554:	and	r6, r6, #1
   12558:	mov	r3, #1
   1255c:	str	r3, [sp, #72]	; 0x48
   12560:	str	r7, [sp, #24]
   12564:	str	r7, [sp, #32]
   12568:	str	r7, [sp, #40]	; 0x28
   1256c:	str	r7, [sp, #60]	; 0x3c
   12570:	str	r0, [sp, #76]	; 0x4c
   12574:	cmp	sl, #10
   12578:	ldrls	pc, [pc, sl, lsl #2]
   1257c:	b	127b8 <__assert_fail@plt+0x18b0>
   12580:	andeq	r2, r1, ip, lsr #11
   12584:	andeq	r3, r1, r0, asr #4
   12588:	andeq	r2, r1, r4, lsl #15
   1258c:	ldrdeq	r2, [r1], -r0
   12590:	andeq	r2, r1, r0, ror #14
   12594:			; <UNDEFINED> instruction: 0x000125b8
   12598:	andeq	r3, r1, r0, lsr #4
   1259c:			; <UNDEFINED> instruction: 0x000127bc
   125a0:			; <UNDEFINED> instruction: 0x000126b0
   125a4:			; <UNDEFINED> instruction: 0x000126b0
   125a8:			; <UNDEFINED> instruction: 0x000126b0
   125ac:	mov	r6, #0
   125b0:	mov	r4, #0
   125b4:	b	125e4 <__assert_fail@plt+0x16dc>
   125b8:	cmp	r6, #0
   125bc:	bne	127e0 <__assert_fail@plt+0x18d8>
   125c0:	cmp	r5, #0
   125c4:	movne	r3, #34	; 0x22
   125c8:	strbne	r3, [r8]
   125cc:	mov	r3, #1
   125d0:	str	r3, [sp, #24]
   125d4:	str	r3, [sp, #32]
   125d8:	mov	r4, #1
   125dc:	ldr	r3, [pc, #3172]	; 13248 <__assert_fail@plt+0x2340>
   125e0:	str	r3, [sp, #40]	; 0x28
   125e4:	mov	r9, r5
   125e8:	mov	r3, #0
   125ec:	str	r7, [sp, #68]	; 0x44
   125f0:	str	r3, [sp, #28]
   125f4:	ldr	r3, [sp, #36]	; 0x24
   125f8:	cmn	r3, #1
   125fc:	bne	1318c <__assert_fail@plt+0x2284>
   12600:	ldr	r3, [sp, #44]	; 0x2c
   12604:	ldr	r2, [sp, #28]
   12608:	ldrb	r3, [r3, r2]
   1260c:	adds	r3, r3, #0
   12610:	movne	r3, #1
   12614:	str	r3, [sp, #52]	; 0x34
   12618:	ldr	r3, [sp, #52]	; 0x34
   1261c:	cmp	r3, #0
   12620:	bne	12808 <__assert_fail@plt+0x1900>
   12624:	sub	r2, sl, #2
   12628:	clz	r2, r2
   1262c:	lsr	r2, r2, #5
   12630:	and	r3, r6, r2
   12634:	cmp	r4, #0
   12638:	movne	r3, #0
   1263c:	andeq	r3, r3, #1
   12640:	cmp	r3, #0
   12644:	bne	129d0 <__assert_fail@plt+0x1ac8>
   12648:	eor	r3, r6, #1
   1264c:	ands	r2, r2, r3
   12650:	beq	131c4 <__assert_fail@plt+0x22bc>
   12654:	ldr	r3, [sp, #68]	; 0x44
   12658:	cmp	r3, #0
   1265c:	beq	131fc <__assert_fail@plt+0x22f4>
   12660:	ldr	r3, [sp, #72]	; 0x48
   12664:	cmp	r3, #0
   12668:	beq	131a0 <__assert_fail@plt+0x2298>
   1266c:	ldr	r3, [sp, #160]	; 0xa0
   12670:	ldr	r2, [sp, #44]	; 0x2c
   12674:	str	r3, [sp, #16]
   12678:	ldr	r3, [sp, #156]	; 0x9c
   1267c:	ldr	r1, [sp, #60]	; 0x3c
   12680:	str	r3, [sp, #12]
   12684:	ldr	r3, [sp, #152]	; 0x98
   12688:	str	r3, [sp, #8]
   1268c:	ldr	r3, [sp, #148]	; 0x94
   12690:	str	r3, [sp, #4]
   12694:	mov	r3, #5
   12698:	str	r3, [sp]
   1269c:	ldr	r3, [sp, #36]	; 0x24
   126a0:	mov	r0, r8
   126a4:	bl	12524 <__assert_fail@plt+0x161c>
   126a8:	mov	r4, r0
   126ac:	b	131f0 <__assert_fail@plt+0x22e8>
   126b0:	cmp	sl, #10
   126b4:	beq	12710 <__assert_fail@plt+0x1808>
   126b8:	ldr	r4, [pc, #2956]	; 1324c <__assert_fail@plt+0x2344>
   126bc:	mov	r2, #5
   126c0:	mov	r1, r4
   126c4:	mov	r0, #0
   126c8:	bl	10d4c <dcgettext@plt>
   126cc:	cmp	r0, r4
   126d0:	str	r0, [sp, #156]	; 0x9c
   126d4:	bne	126e4 <__assert_fail@plt+0x17dc>
   126d8:	mov	r1, sl
   126dc:	bl	12410 <__assert_fail@plt+0x1508>
   126e0:	str	r0, [sp, #156]	; 0x9c
   126e4:	ldr	r4, [pc, #2916]	; 13250 <__assert_fail@plt+0x2348>
   126e8:	mov	r2, #5
   126ec:	mov	r1, r4
   126f0:	mov	r0, #0
   126f4:	bl	10d4c <dcgettext@plt>
   126f8:	cmp	r0, r4
   126fc:	str	r0, [sp, #160]	; 0xa0
   12700:	bne	12710 <__assert_fail@plt+0x1808>
   12704:	mov	r1, sl
   12708:	bl	12410 <__assert_fail@plt+0x1508>
   1270c:	str	r0, [sp, #160]	; 0xa0
   12710:	cmp	r6, #0
   12714:	moveq	r4, r6
   12718:	beq	12730 <__assert_fail@plt+0x1828>
   1271c:	mov	r4, #0
   12720:	b	12740 <__assert_fail@plt+0x1838>
   12724:	cmp	r5, r4
   12728:	strbhi	r3, [r8, r4]
   1272c:	add	r4, r4, #1
   12730:	ldr	r3, [sp, #156]	; 0x9c
   12734:	ldrb	r3, [r3, r4]
   12738:	cmp	r3, #0
   1273c:	bne	12724 <__assert_fail@plt+0x181c>
   12740:	ldr	r0, [sp, #160]	; 0xa0
   12744:	bl	10e18 <strlen@plt>
   12748:	ldr	r3, [sp, #160]	; 0xa0
   1274c:	str	r3, [sp, #40]	; 0x28
   12750:	mov	r3, #1
   12754:	str	r3, [sp, #24]
   12758:	str	r0, [sp, #32]
   1275c:	b	125e4 <__assert_fail@plt+0x16dc>
   12760:	mov	r3, #1
   12764:	cmp	r6, #0
   12768:	streq	r3, [sp, #24]
   1276c:	beq	1278c <__assert_fail@plt+0x1884>
   12770:	str	r3, [sp, #32]
   12774:	ldr	r3, [pc, #2772]	; 13250 <__assert_fail@plt+0x2348>
   12778:	mov	r4, #0
   1277c:	str	r3, [sp, #40]	; 0x28
   12780:	b	127b0 <__assert_fail@plt+0x18a8>
   12784:	cmp	r6, #0
   12788:	bne	127f8 <__assert_fail@plt+0x18f0>
   1278c:	cmp	r5, #0
   12790:	movne	r3, #39	; 0x27
   12794:	strbne	r3, [r8]
   12798:	mov	r3, #1
   1279c:	str	r3, [sp, #32]
   127a0:	mov	r6, #0
   127a4:	ldr	r3, [pc, #2724]	; 13250 <__assert_fail@plt+0x2348>
   127a8:	mov	r4, #1
   127ac:	str	r3, [sp, #40]	; 0x28
   127b0:	mov	sl, #2
   127b4:	b	125e4 <__assert_fail@plt+0x16dc>
   127b8:	bl	10ee4 <abort@plt>
   127bc:	mov	r6, #0
   127c0:	mov	r3, #1
   127c4:	str	r3, [sp, #24]
   127c8:	mov	r4, r6
   127cc:	b	125e4 <__assert_fail@plt+0x16dc>
   127d0:	mov	r6, #1
   127d4:	str	r6, [sp, #24]
   127d8:	str	r6, [sp, #32]
   127dc:	b	12774 <__assert_fail@plt+0x186c>
   127e0:	mov	r3, #1
   127e4:	str	r3, [sp, #32]
   127e8:	ldr	r3, [pc, #2648]	; 13248 <__assert_fail@plt+0x2340>
   127ec:	str	r6, [sp, #24]
   127f0:	str	r3, [sp, #40]	; 0x28
   127f4:	b	125b0 <__assert_fail@plt+0x16a8>
   127f8:	mov	r3, #1
   127fc:	str	r3, [sp, #32]
   12800:	ldr	r3, [pc, #2632]	; 13250 <__assert_fail@plt+0x2348>
   12804:	b	127f0 <__assert_fail@plt+0x18e8>
   12808:	ldr	r3, [sp, #32]
   1280c:	ldr	fp, [sp, #24]
   12810:	cmp	sl, #2
   12814:	moveq	fp, #0
   12818:	andne	fp, fp, #1
   1281c:	adds	r5, r3, #0
   12820:	movne	r5, #1
   12824:	ands	r3, r5, fp
   12828:	str	r3, [sp, #64]	; 0x40
   1282c:	beq	128fc <__assert_fail@plt+0x19f4>
   12830:	ldr	r2, [sp, #32]
   12834:	ldr	r3, [sp, #28]
   12838:	add	r7, r3, r2
   1283c:	mov	r3, r2
   12840:	ldr	r2, [sp, #36]	; 0x24
   12844:	cmp	r3, #1
   12848:	movls	r3, #0
   1284c:	movhi	r3, #1
   12850:	cmn	r2, #1
   12854:	movne	r3, #0
   12858:	cmp	r3, #0
   1285c:	beq	1286c <__assert_fail@plt+0x1964>
   12860:	ldr	r0, [sp, #44]	; 0x2c
   12864:	bl	10e18 <strlen@plt>
   12868:	str	r0, [sp, #36]	; 0x24
   1286c:	ldr	r3, [sp, #36]	; 0x24
   12870:	cmp	r3, r7
   12874:	bcc	128f4 <__assert_fail@plt+0x19ec>
   12878:	ldr	r3, [sp, #44]	; 0x2c
   1287c:	ldr	r0, [sp, #28]
   12880:	ldr	r2, [sp, #32]
   12884:	ldr	r1, [sp, #40]	; 0x28
   12888:	add	r0, r3, r0
   1288c:	bl	10d28 <memcmp@plt>
   12890:	cmp	r0, #0
   12894:	bne	128f4 <__assert_fail@plt+0x19ec>
   12898:	cmp	r6, #0
   1289c:	beq	128fc <__assert_fail@plt+0x19f4>
   128a0:	str	r6, [sp, #24]
   128a4:	ldr	r3, [sp, #24]
   128a8:	ldr	r2, [sp, #44]	; 0x2c
   128ac:	cmp	sl, #2
   128b0:	movne	r3, #0
   128b4:	andeq	r3, r3, #1
   128b8:	cmp	r3, #0
   128bc:	ldr	r3, [sp, #160]	; 0xa0
   128c0:	movne	sl, #4
   128c4:	str	r3, [sp, #16]
   128c8:	ldr	r3, [sp, #156]	; 0x9c
   128cc:	str	sl, [sp]
   128d0:	str	r3, [sp, #12]
   128d4:	mov	r3, #0
   128d8:	str	r3, [sp, #8]
   128dc:	ldr	r3, [sp, #148]	; 0x94
   128e0:	mov	r1, r9
   128e4:	bic	r3, r3, #2
   128e8:	str	r3, [sp, #4]
   128ec:	ldr	r3, [sp, #36]	; 0x24
   128f0:	b	126a0 <__assert_fail@plt+0x1798>
   128f4:	mov	r3, #0
   128f8:	str	r3, [sp, #64]	; 0x40
   128fc:	ldr	r2, [sp, #28]
   12900:	ldr	r3, [sp, #44]	; 0x2c
   12904:	add	r3, r3, r2
   12908:	str	r3, [sp, #80]	; 0x50
   1290c:	ldr	r3, [sp, #44]	; 0x2c
   12910:	ldrb	r7, [r3, r2]
   12914:	cmp	r7, #58	; 0x3a
   12918:	bhi	12a80 <__assert_fail@plt+0x1b78>
   1291c:	cmp	r7, #43	; 0x2b
   12920:	bcs	12ad4 <__assert_fail@plt+0x1bcc>
   12924:	cmp	r7, #32
   12928:	beq	12b2c <__assert_fail@plt+0x1c24>
   1292c:	bhi	129d8 <__assert_fail@plt+0x1ad0>
   12930:	cmp	r7, #9
   12934:	beq	12de0 <__assert_fail@plt+0x1ed8>
   12938:	bhi	1299c <__assert_fail@plt+0x1a94>
   1293c:	cmp	r7, #7
   12940:	beq	12e8c <__assert_fail@plt+0x1f84>
   12944:	bhi	12b48 <__assert_fail@plt+0x1c40>
   12948:	cmp	r7, #0
   1294c:	beq	12b64 <__assert_fail@plt+0x1c5c>
   12950:	ldr	r3, [sp, #76]	; 0x4c
   12954:	cmp	r3, #1
   12958:	bne	12ed0 <__assert_fail@plt+0x1fc8>
   1295c:	bl	10e00 <__ctype_b_loc@plt>
   12960:	sxth	r3, r7
   12964:	lsl	r3, r3, #1
   12968:	ldr	r2, [r0]
   1296c:	ldrh	r5, [r2, r3]
   12970:	ldr	r3, [sp, #76]	; 0x4c
   12974:	str	r3, [sp, #56]	; 0x38
   12978:	lsr	r5, r5, #14
   1297c:	and	r5, r5, #1
   12980:	ldr	r3, [sp, #24]
   12984:	eor	fp, r5, #1
   12988:	and	fp, fp, r3
   1298c:	ands	fp, fp, #255	; 0xff
   12990:	beq	12d18 <__assert_fail@plt+0x1e10>
   12994:	mov	r5, #0
   12998:	b	12f7c <__assert_fail@plt+0x2074>
   1299c:	cmp	r7, #11
   129a0:	beq	12de8 <__assert_fail@plt+0x1ee0>
   129a4:	bcc	12e84 <__assert_fail@plt+0x1f7c>
   129a8:	cmp	r7, #12
   129ac:	beq	12e94 <__assert_fail@plt+0x1f8c>
   129b0:	cmp	r7, #13
   129b4:	moveq	r3, #114	; 0x72
   129b8:	bne	12950 <__assert_fail@plt+0x1a48>
   129bc:	cmp	sl, #2
   129c0:	movne	r2, #0
   129c4:	andeq	r2, r6, #1
   129c8:	cmp	r2, #0
   129cc:	beq	12b4c <__assert_fail@plt+0x1c44>
   129d0:	mov	sl, #2
   129d4:	b	128a4 <__assert_fail@plt+0x199c>
   129d8:	cmp	r7, #37	; 0x25
   129dc:	beq	12ad4 <__assert_fail@plt+0x1bcc>
   129e0:	bhi	129f4 <__assert_fail@plt+0x1aec>
   129e4:	cmp	r7, #35	; 0x23
   129e8:	beq	12b20 <__assert_fail@plt+0x1c18>
   129ec:	mov	r5, #0
   129f0:	b	12b30 <__assert_fail@plt+0x1c28>
   129f4:	cmp	r7, #39	; 0x27
   129f8:	bne	129ec <__assert_fail@plt+0x1ae4>
   129fc:	cmp	sl, #2
   12a00:	ldrne	r5, [sp, #52]	; 0x34
   12a04:	movne	r3, r5
   12a08:	strne	r3, [sp, #68]	; 0x44
   12a0c:	bne	12ad8 <__assert_fail@plt+0x1bd0>
   12a10:	cmp	r6, #0
   12a14:	bne	128a4 <__assert_fail@plt+0x199c>
   12a18:	ldr	r2, [sp, #60]	; 0x3c
   12a1c:	adds	r3, r9, #0
   12a20:	movne	r3, #1
   12a24:	cmp	r2, #0
   12a28:	movne	r3, #0
   12a2c:	cmp	r3, #0
   12a30:	strne	r9, [sp, #60]	; 0x3c
   12a34:	movne	r9, #0
   12a38:	bne	12a48 <__assert_fail@plt+0x1b40>
   12a3c:	cmp	r9, r4
   12a40:	movhi	r3, #39	; 0x27
   12a44:	strbhi	r3, [r8, r4]
   12a48:	add	r3, r4, #1
   12a4c:	cmp	r3, r9
   12a50:	movcc	r2, #92	; 0x5c
   12a54:	strbcc	r2, [r8, r3]
   12a58:	add	r3, r4, #2
   12a5c:	cmp	r3, r9
   12a60:	ldr	r5, [sp, #52]	; 0x34
   12a64:	movcc	r2, #39	; 0x27
   12a68:	strbcc	r2, [r8, r3]
   12a6c:	add	r4, r4, #3
   12a70:	mov	fp, r6
   12a74:	str	r5, [sp, #68]	; 0x44
   12a78:	str	r6, [sp, #48]	; 0x30
   12a7c:	b	12d18 <__assert_fail@plt+0x1e10>
   12a80:	cmp	r7, #94	; 0x5e
   12a84:	beq	129ec <__assert_fail@plt+0x1ae4>
   12a88:	bhi	12ae0 <__assert_fail@plt+0x1bd8>
   12a8c:	cmp	r7, #90	; 0x5a
   12a90:	bhi	12ac8 <__assert_fail@plt+0x1bc0>
   12a94:	cmp	r7, #65	; 0x41
   12a98:	bcs	12ad4 <__assert_fail@plt+0x1bcc>
   12a9c:	cmp	r7, #62	; 0x3e
   12aa0:	bls	129ec <__assert_fail@plt+0x1ae4>
   12aa4:	cmp	r7, #63	; 0x3f
   12aa8:	bne	12950 <__assert_fail@plt+0x1a48>
   12aac:	cmp	sl, #2
   12ab0:	beq	12c54 <__assert_fail@plt+0x1d4c>
   12ab4:	cmp	sl, #5
   12ab8:	beq	12c64 <__assert_fail@plt+0x1d5c>
   12abc:	mov	fp, #0
   12ac0:	mov	r5, fp
   12ac4:	b	12d18 <__assert_fail@plt+0x1e10>
   12ac8:	cmp	r7, #92	; 0x5c
   12acc:	beq	12df0 <__assert_fail@plt+0x1ee8>
   12ad0:	bls	129ec <__assert_fail@plt+0x1ae4>
   12ad4:	ldr	r5, [sp, #52]	; 0x34
   12ad8:	mov	fp, #0
   12adc:	b	12d18 <__assert_fail@plt+0x1e10>
   12ae0:	cmp	r7, #122	; 0x7a
   12ae4:	bhi	12b04 <__assert_fail@plt+0x1bfc>
   12ae8:	cmp	r7, #97	; 0x61
   12aec:	bcs	12ad4 <__assert_fail@plt+0x1bcc>
   12af0:	cmp	r7, #95	; 0x5f
   12af4:	beq	12ad4 <__assert_fail@plt+0x1bcc>
   12af8:	cmp	r7, #96	; 0x60
   12afc:	bne	12950 <__assert_fail@plt+0x1a48>
   12b00:	b	129ec <__assert_fail@plt+0x1ae4>
   12b04:	cmp	r7, #124	; 0x7c
   12b08:	beq	129ec <__assert_fail@plt+0x1ae4>
   12b0c:	bcc	12e9c <__assert_fail@plt+0x1f94>
   12b10:	cmp	r7, #125	; 0x7d
   12b14:	beq	12e9c <__assert_fail@plt+0x1f94>
   12b18:	cmp	r7, #126	; 0x7e
   12b1c:	bne	12950 <__assert_fail@plt+0x1a48>
   12b20:	ldr	r3, [sp, #28]
   12b24:	cmp	r3, #0
   12b28:	bne	12c5c <__assert_fail@plt+0x1d54>
   12b2c:	ldr	r5, [sp, #52]	; 0x34
   12b30:	cmp	sl, #2
   12b34:	movne	fp, #0
   12b38:	andeq	fp, r6, #1
   12b3c:	cmp	fp, #0
   12b40:	beq	12d18 <__assert_fail@plt+0x1e10>
   12b44:	b	129d0 <__assert_fail@plt+0x1ac8>
   12b48:	mov	r3, #98	; 0x62
   12b4c:	ldr	r2, [sp, #24]
   12b50:	cmp	r2, #0
   12b54:	beq	12c5c <__assert_fail@plt+0x1d54>
   12b58:	mov	r7, r3
   12b5c:	mov	r5, #0
   12b60:	b	12d70 <__assert_fail@plt+0x1e68>
   12b64:	ldr	r3, [sp, #24]
   12b68:	cmp	r3, #0
   12b6c:	beq	12c38 <__assert_fail@plt+0x1d30>
   12b70:	cmp	r6, #0
   12b74:	bne	128a0 <__assert_fail@plt+0x1998>
   12b78:	ldr	r3, [sp, #48]	; 0x30
   12b7c:	eor	r2, r3, #1
   12b80:	cmp	sl, #2
   12b84:	movne	r2, #0
   12b88:	andeq	r2, r2, #1
   12b8c:	cmp	r2, #0
   12b90:	moveq	r3, r4
   12b94:	beq	12bcc <__assert_fail@plt+0x1cc4>
   12b98:	cmp	r9, r4
   12b9c:	movhi	r3, #39	; 0x27
   12ba0:	strbhi	r3, [r8, r4]
   12ba4:	add	r3, r4, #1
   12ba8:	cmp	r9, r3
   12bac:	movhi	r1, #36	; 0x24
   12bb0:	strbhi	r1, [r8, r3]
   12bb4:	add	r3, r4, #2
   12bb8:	cmp	r9, r3
   12bbc:	movhi	r1, #39	; 0x27
   12bc0:	strbhi	r1, [r8, r3]
   12bc4:	add	r3, r4, #3
   12bc8:	str	r2, [sp, #48]	; 0x30
   12bcc:	cmp	r9, r3
   12bd0:	movhi	r2, #92	; 0x5c
   12bd4:	strbhi	r2, [r8, r3]
   12bd8:	cmp	fp, #0
   12bdc:	add	r4, r3, #1
   12be0:	beq	13170 <__assert_fail@plt+0x2268>
   12be4:	ldr	r2, [sp, #28]
   12be8:	ldr	r1, [sp, #36]	; 0x24
   12bec:	add	r2, r2, #1
   12bf0:	cmp	r1, r2
   12bf4:	bls	12c30 <__assert_fail@plt+0x1d28>
   12bf8:	ldr	r1, [sp, #44]	; 0x2c
   12bfc:	mov	r7, #48	; 0x30
   12c00:	ldrb	r2, [r1, r2]
   12c04:	sub	r2, r2, #48	; 0x30
   12c08:	cmp	r2, #9
   12c0c:	movhi	r5, r6
   12c10:	bhi	12d18 <__assert_fail@plt+0x1e10>
   12c14:	cmp	r9, r4
   12c18:	add	r2, r3, #2
   12c1c:	strbhi	r7, [r8, r4]
   12c20:	cmp	r9, r2
   12c24:	add	r4, r3, #3
   12c28:	movhi	r1, #48	; 0x30
   12c2c:	strbhi	r1, [r8, r2]
   12c30:	mov	r5, r6
   12c34:	b	13178 <__assert_fail@plt+0x2270>
   12c38:	ldr	r3, [sp, #148]	; 0x94
   12c3c:	tst	r3, #1
   12c40:	ldreq	r5, [sp, #24]
   12c44:	beq	13184 <__assert_fail@plt+0x227c>
   12c48:	ldr	r3, [sp, #28]
   12c4c:	add	r3, r3, #1
   12c50:	b	125f0 <__assert_fail@plt+0x16e8>
   12c54:	cmp	r6, #0
   12c58:	bne	128a4 <__assert_fail@plt+0x199c>
   12c5c:	mov	r5, #0
   12c60:	b	12ad8 <__assert_fail@plt+0x1bd0>
   12c64:	ldr	r3, [sp, #148]	; 0x94
   12c68:	tst	r3, #4
   12c6c:	beq	12c5c <__assert_fail@plt+0x1d54>
   12c70:	ldr	r3, [sp, #28]
   12c74:	add	r2, r3, #2
   12c78:	ldr	r3, [sp, #36]	; 0x24
   12c7c:	cmp	r3, r2
   12c80:	bls	12c5c <__assert_fail@plt+0x1d54>
   12c84:	ldr	r3, [sp, #44]	; 0x2c
   12c88:	ldr	r1, [sp, #28]
   12c8c:	add	r3, r3, r1
   12c90:	ldrb	r0, [r3, #1]
   12c94:	cmp	r0, #63	; 0x3f
   12c98:	bne	12c5c <__assert_fail@plt+0x1d54>
   12c9c:	ldr	r3, [sp, #44]	; 0x2c
   12ca0:	ldrb	r1, [r3, r2]
   12ca4:	sub	r3, r1, #33	; 0x21
   12ca8:	uxtb	r3, r3
   12cac:	cmp	r3, #29
   12cb0:	bhi	13180 <__assert_fail@plt+0x2278>
   12cb4:	mov	ip, #1
   12cb8:	ldr	r5, [pc, #1428]	; 13254 <__assert_fail@plt+0x234c>
   12cbc:	ands	r5, r5, ip, lsl r3
   12cc0:	beq	12ad8 <__assert_fail@plt+0x1bd0>
   12cc4:	cmp	r6, #0
   12cc8:	bne	128a4 <__assert_fail@plt+0x199c>
   12ccc:	add	r3, r4, #1
   12cd0:	cmp	r9, r4
   12cd4:	strbhi	r0, [r8, r4]
   12cd8:	cmp	r9, r3
   12cdc:	movhi	r0, #34	; 0x22
   12ce0:	strbhi	r0, [r8, r3]
   12ce4:	add	r3, r4, #2
   12ce8:	cmp	r9, r3
   12cec:	movhi	r0, #34	; 0x22
   12cf0:	strbhi	r0, [r8, r3]
   12cf4:	add	r3, r4, #3
   12cf8:	cmp	r9, r3
   12cfc:	add	r4, r4, #4
   12d00:	mov	r5, r6
   12d04:	mov	fp, r6
   12d08:	mov	r7, r1
   12d0c:	movhi	r0, #63	; 0x3f
   12d10:	strbhi	r0, [r8, r3]
   12d14:	str	r2, [sp, #28]
   12d18:	ldr	r3, [sp, #24]
   12d1c:	eor	r3, r3, #1
   12d20:	cmp	sl, #2
   12d24:	orreq	r3, r3, #1
   12d28:	eor	r3, r3, #1
   12d2c:	orr	r3, r6, r3
   12d30:	tst	r3, #255	; 0xff
   12d34:	beq	12d64 <__assert_fail@plt+0x1e5c>
   12d38:	ldr	r3, [sp, #152]	; 0x98
   12d3c:	cmp	r3, #0
   12d40:	beq	12d64 <__assert_fail@plt+0x1e5c>
   12d44:	lsr	r2, r7, #5
   12d48:	ldr	r1, [sp, #152]	; 0x98
   12d4c:	uxtb	r2, r2
   12d50:	and	r3, r7, #31
   12d54:	ldr	r2, [r1, r2, lsl #2]
   12d58:	lsr	r3, r2, r3
   12d5c:	tst	r3, #1
   12d60:	bne	12d70 <__assert_fail@plt+0x1e68>
   12d64:	ldr	r3, [sp, #64]	; 0x40
   12d68:	cmp	r3, #0
   12d6c:	beq	12e08 <__assert_fail@plt+0x1f00>
   12d70:	cmp	r6, #0
   12d74:	bne	128a4 <__assert_fail@plt+0x199c>
   12d78:	ldr	r3, [sp, #48]	; 0x30
   12d7c:	eor	r3, r3, #1
   12d80:	cmp	sl, #2
   12d84:	movne	r3, #0
   12d88:	andeq	r3, r3, #1
   12d8c:	cmp	r3, #0
   12d90:	beq	12dc8 <__assert_fail@plt+0x1ec0>
   12d94:	cmp	r9, r4
   12d98:	movhi	r2, #39	; 0x27
   12d9c:	strbhi	r2, [r8, r4]
   12da0:	add	r2, r4, #1
   12da4:	cmp	r9, r2
   12da8:	movhi	r1, #36	; 0x24
   12dac:	strbhi	r1, [r8, r2]
   12db0:	add	r2, r4, #2
   12db4:	cmp	r9, r2
   12db8:	add	r4, r4, #3
   12dbc:	movhi	r1, #39	; 0x27
   12dc0:	strbhi	r1, [r8, r2]
   12dc4:	str	r3, [sp, #48]	; 0x30
   12dc8:	cmp	r9, r4
   12dcc:	movhi	r3, #92	; 0x5c
   12dd0:	strbhi	r3, [r8, r4]
   12dd4:	ldr	fp, [sp, #52]	; 0x34
   12dd8:	add	r4, r4, #1
   12ddc:	b	12e08 <__assert_fail@plt+0x1f00>
   12de0:	mov	r3, #116	; 0x74
   12de4:	b	129bc <__assert_fail@plt+0x1ab4>
   12de8:	mov	r3, #118	; 0x76
   12dec:	b	12b4c <__assert_fail@plt+0x1c44>
   12df0:	cmp	sl, #2
   12df4:	bne	12e64 <__assert_fail@plt+0x1f5c>
   12df8:	cmp	r6, #0
   12dfc:	bne	128a4 <__assert_fail@plt+0x199c>
   12e00:	mov	r5, r6
   12e04:	mov	fp, r6
   12e08:	ldr	r3, [sp, #48]	; 0x30
   12e0c:	eor	fp, fp, #1
   12e10:	and	fp, fp, r3
   12e14:	tst	fp, #255	; 0xff
   12e18:	beq	12e44 <__assert_fail@plt+0x1f3c>
   12e1c:	cmp	r9, r4
   12e20:	movhi	r3, #39	; 0x27
   12e24:	strbhi	r3, [r8, r4]
   12e28:	add	r3, r4, #1
   12e2c:	cmp	r9, r3
   12e30:	movhi	r2, #39	; 0x27
   12e34:	add	r4, r4, #2
   12e38:	strbhi	r2, [r8, r3]
   12e3c:	mov	r3, #0
   12e40:	str	r3, [sp, #48]	; 0x30
   12e44:	cmp	r9, r4
   12e48:	strbhi	r7, [r8, r4]
   12e4c:	ldr	r3, [sp, #72]	; 0x48
   12e50:	cmp	r5, #0
   12e54:	moveq	r3, #0
   12e58:	add	r4, r4, #1
   12e5c:	str	r3, [sp, #72]	; 0x48
   12e60:	b	12c48 <__assert_fail@plt+0x1d40>
   12e64:	ldr	r3, [sp, #24]
   12e68:	and	r3, r3, r6
   12e6c:	tst	r5, r3
   12e70:	moveq	r3, r7
   12e74:	beq	129bc <__assert_fail@plt+0x1ab4>
   12e78:	mov	fp, #0
   12e7c:	mov	r5, fp
   12e80:	b	12e08 <__assert_fail@plt+0x1f00>
   12e84:	mov	r3, #110	; 0x6e
   12e88:	b	129bc <__assert_fail@plt+0x1ab4>
   12e8c:	mov	r3, #97	; 0x61
   12e90:	b	12b4c <__assert_fail@plt+0x1c44>
   12e94:	mov	r3, #102	; 0x66
   12e98:	b	12b4c <__assert_fail@plt+0x1c44>
   12e9c:	ldr	r3, [sp, #36]	; 0x24
   12ea0:	cmn	r3, #1
   12ea4:	bne	12ec4 <__assert_fail@plt+0x1fbc>
   12ea8:	ldr	r3, [sp, #44]	; 0x2c
   12eac:	ldrb	r3, [r3, #1]
   12eb0:	adds	r3, r3, #0
   12eb4:	movne	r3, #1
   12eb8:	cmp	r3, #0
   12ebc:	bne	12c5c <__assert_fail@plt+0x1d54>
   12ec0:	b	12b20 <__assert_fail@plt+0x1c18>
   12ec4:	ldr	r3, [sp, #36]	; 0x24
   12ec8:	subs	r3, r3, #1
   12ecc:	b	12eb4 <__assert_fail@plt+0x1fac>
   12ed0:	mov	r3, #0
   12ed4:	str	r3, [sp, #96]	; 0x60
   12ed8:	str	r3, [sp, #100]	; 0x64
   12edc:	ldr	r3, [sp, #36]	; 0x24
   12ee0:	cmn	r3, #1
   12ee4:	bne	12ef4 <__assert_fail@plt+0x1fec>
   12ee8:	ldr	r0, [sp, #44]	; 0x2c
   12eec:	bl	10e18 <strlen@plt>
   12ef0:	str	r0, [sp, #36]	; 0x24
   12ef4:	ldr	r5, [sp, #52]	; 0x34
   12ef8:	mov	r3, #0
   12efc:	str	r3, [sp, #56]	; 0x38
   12f00:	ldr	r3, [sp, #28]
   12f04:	ldr	r2, [sp, #56]	; 0x38
   12f08:	ldr	r1, [sp, #36]	; 0x24
   12f0c:	add	r2, r3, r2
   12f10:	ldr	r3, [sp, #44]	; 0x2c
   12f14:	add	r0, sp, #92	; 0x5c
   12f18:	add	fp, r3, r2
   12f1c:	sub	r2, r1, r2
   12f20:	add	r3, sp, #96	; 0x60
   12f24:	mov	r1, fp
   12f28:	bl	144d8 <__assert_fail@plt+0x35d0>
   12f2c:	subs	r2, r0, #0
   12f30:	beq	12f70 <__assert_fail@plt+0x2068>
   12f34:	cmn	r2, #1
   12f38:	beq	13148 <__assert_fail@plt+0x2240>
   12f3c:	cmn	r2, #2
   12f40:	bne	130b8 <__assert_fail@plt+0x21b0>
   12f44:	ldr	r2, [sp, #56]	; 0x38
   12f48:	ldr	r3, [sp, #28]
   12f4c:	add	r3, r3, r2
   12f50:	ldr	r2, [sp, #36]	; 0x24
   12f54:	cmp	r2, r3
   12f58:	bls	13148 <__assert_fail@plt+0x2240>
   12f5c:	ldr	r3, [sp, #80]	; 0x50
   12f60:	ldr	r2, [sp, #56]	; 0x38
   12f64:	ldrb	r5, [r3, r2]
   12f68:	cmp	r5, #0
   12f6c:	bne	130a8 <__assert_fail@plt+0x21a0>
   12f70:	ldr	r3, [sp, #56]	; 0x38
   12f74:	cmp	r3, #1
   12f78:	bls	12980 <__assert_fail@plt+0x1a78>
   12f7c:	ldr	r2, [sp, #56]	; 0x38
   12f80:	ldr	r3, [sp, #28]
   12f84:	mov	fp, #0
   12f88:	add	r3, r3, r2
   12f8c:	ldr	r2, [sp, #24]
   12f90:	str	r3, [sp, #52]	; 0x34
   12f94:	eor	r3, r5, #1
   12f98:	and	r3, r3, r2
   12f9c:	mov	ip, #92	; 0x5c
   12fa0:	uxtb	r3, r3
   12fa4:	mov	r2, #39	; 0x27
   12fa8:	cmp	r3, #0
   12fac:	beq	13150 <__assert_fail@plt+0x2248>
   12fb0:	cmp	r6, #0
   12fb4:	bne	128a0 <__assert_fail@plt+0x1998>
   12fb8:	ldr	r1, [sp, #48]	; 0x30
   12fbc:	eor	r1, r1, #1
   12fc0:	cmp	sl, #2
   12fc4:	movne	r1, #0
   12fc8:	andeq	r1, r1, #1
   12fcc:	cmp	r1, #0
   12fd0:	beq	13000 <__assert_fail@plt+0x20f8>
   12fd4:	add	r0, r4, #1
   12fd8:	cmp	r9, r4
   12fdc:	strbhi	r2, [r8, r4]
   12fe0:	cmp	r9, r0
   12fe4:	movhi	lr, #36	; 0x24
   12fe8:	strbhi	lr, [r8, r0]
   12fec:	add	r0, r4, #2
   12ff0:	add	r4, r4, #3
   12ff4:	cmp	r9, r0
   12ff8:	strbhi	r2, [r8, r0]
   12ffc:	str	r1, [sp, #48]	; 0x30
   13000:	add	r0, r4, #1
   13004:	cmp	r9, r4
   13008:	strbhi	ip, [r8, r4]
   1300c:	cmp	r9, r0
   13010:	lsrhi	r1, r7, #6
   13014:	addhi	r1, r1, #48	; 0x30
   13018:	strbhi	r1, [r8, r0]
   1301c:	add	r0, r4, #2
   13020:	cmp	r9, r0
   13024:	lsrhi	r1, r7, #3
   13028:	and	r7, r7, #7
   1302c:	andhi	r1, r1, #7
   13030:	add	r4, r4, #3
   13034:	add	r7, r7, #48	; 0x30
   13038:	mov	fp, r3
   1303c:	addhi	r1, r1, #48	; 0x30
   13040:	strbhi	r1, [r8, r0]
   13044:	ldr	r1, [sp, #28]
   13048:	ldr	r0, [sp, #52]	; 0x34
   1304c:	add	r1, r1, #1
   13050:	cmp	r0, r1
   13054:	bls	12e08 <__assert_fail@plt+0x1f00>
   13058:	ldr	lr, [sp, #48]	; 0x30
   1305c:	eor	r0, fp, #1
   13060:	and	r0, r0, lr
   13064:	tst	r0, #255	; 0xff
   13068:	beq	1308c <__assert_fail@plt+0x2184>
   1306c:	add	r0, r4, #1
   13070:	cmp	r9, r4
   13074:	strbhi	r2, [r8, r4]
   13078:	cmp	r9, r0
   1307c:	add	r4, r4, #2
   13080:	strbhi	r2, [r8, r0]
   13084:	mov	r0, #0
   13088:	str	r0, [sp, #48]	; 0x30
   1308c:	ldr	r0, [sp, #44]	; 0x2c
   13090:	cmp	r9, r4
   13094:	strbhi	r7, [r8, r4]
   13098:	str	r1, [sp, #28]
   1309c:	add	r4, r4, #1
   130a0:	ldrb	r7, [r0, r1]
   130a4:	b	12fa8 <__assert_fail@plt+0x20a0>
   130a8:	ldr	r3, [sp, #56]	; 0x38
   130ac:	add	r3, r3, #1
   130b0:	str	r3, [sp, #56]	; 0x38
   130b4:	b	12f44 <__assert_fail@plt+0x203c>
   130b8:	cmp	sl, #2
   130bc:	movne	r3, #0
   130c0:	andeq	r3, r6, #1
   130c4:	cmp	r3, #0
   130c8:	movne	r1, #1
   130cc:	bne	13128 <__assert_fail@plt+0x2220>
   130d0:	ldr	r0, [sp, #92]	; 0x5c
   130d4:	str	r2, [sp, #84]	; 0x54
   130d8:	bl	10d70 <iswprint@plt>
   130dc:	ldr	r3, [sp, #56]	; 0x38
   130e0:	ldr	r2, [sp, #84]	; 0x54
   130e4:	add	r3, r3, r2
   130e8:	str	r3, [sp, #56]	; 0x38
   130ec:	cmp	r0, #0
   130f0:	add	r0, sp, #96	; 0x60
   130f4:	moveq	r5, #0
   130f8:	bl	10d10 <mbsinit@plt>
   130fc:	cmp	r0, #0
   13100:	beq	12f00 <__assert_fail@plt+0x1ff8>
   13104:	b	12f70 <__assert_fail@plt+0x2068>
   13108:	ldrb	r3, [fp, r1]
   1310c:	cmp	r3, #94	; 0x5e
   13110:	beq	129d0 <__assert_fail@plt+0x1ac8>
   13114:	bhi	13134 <__assert_fail@plt+0x222c>
   13118:	sub	r3, r3, #91	; 0x5b
   1311c:	cmp	r3, #1
   13120:	bls	129d0 <__assert_fail@plt+0x1ac8>
   13124:	add	r1, r1, #1
   13128:	cmp	r1, r2
   1312c:	bne	13108 <__assert_fail@plt+0x2200>
   13130:	b	130d0 <__assert_fail@plt+0x21c8>
   13134:	cmp	r3, #96	; 0x60
   13138:	beq	129d0 <__assert_fail@plt+0x1ac8>
   1313c:	cmp	r3, #124	; 0x7c
   13140:	bne	13124 <__assert_fail@plt+0x221c>
   13144:	b	129d0 <__assert_fail@plt+0x1ac8>
   13148:	mov	r5, #0
   1314c:	b	12f70 <__assert_fail@plt+0x2068>
   13150:	ldr	r1, [sp, #64]	; 0x40
   13154:	cmp	r1, #0
   13158:	beq	13044 <__assert_fail@plt+0x213c>
   1315c:	cmp	r9, r4
   13160:	strbhi	ip, [r8, r4]
   13164:	str	r3, [sp, #64]	; 0x40
   13168:	add	r4, r4, #1
   1316c:	b	13044 <__assert_fail@plt+0x213c>
   13170:	mov	r5, fp
   13174:	ldr	fp, [sp, #24]
   13178:	mov	r7, #48	; 0x30
   1317c:	b	12d18 <__assert_fail@plt+0x1e10>
   13180:	mov	r5, #0
   13184:	mov	fp, r5
   13188:	b	12d18 <__assert_fail@plt+0x1e10>
   1318c:	ldr	r3, [sp, #36]	; 0x24
   13190:	ldr	r2, [sp, #28]
   13194:	subs	r3, r3, r2
   13198:	movne	r3, #1
   1319c:	b	12614 <__assert_fail@plt+0x170c>
   131a0:	ldr	r3, [sp, #60]	; 0x3c
   131a4:	clz	r7, r9
   131a8:	cmp	r3, #0
   131ac:	lsr	r7, r7, #5
   131b0:	moveq	r7, #0
   131b4:	cmp	r7, #0
   131b8:	mov	r5, r3
   131bc:	bne	12574 <__assert_fail@plt+0x166c>
   131c0:	ldr	r3, [sp, #68]	; 0x44
   131c4:	ldr	r2, [sp, #40]	; 0x28
   131c8:	cmp	r2, #0
   131cc:	moveq	r3, #0
   131d0:	andne	r3, r3, #1
   131d4:	cmp	r3, #0
   131d8:	movne	r3, r2
   131dc:	subne	r2, r3, #1
   131e0:	bne	13210 <__assert_fail@plt+0x2308>
   131e4:	cmp	r9, r4
   131e8:	movhi	r3, #0
   131ec:	strbhi	r3, [r8, r4]
   131f0:	mov	r0, r4
   131f4:	add	sp, sp, #108	; 0x6c
   131f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   131fc:	mov	r3, r2
   13200:	b	131c4 <__assert_fail@plt+0x22bc>
   13204:	cmp	r9, r4
   13208:	strbhi	r3, [r8, r4]
   1320c:	add	r4, r4, #1
   13210:	ldrb	r3, [r2, #1]!
   13214:	cmp	r3, #0
   13218:	bne	13204 <__assert_fail@plt+0x22fc>
   1321c:	b	131e4 <__assert_fail@plt+0x22dc>
   13220:	ldr	r3, [pc, #32]	; 13248 <__assert_fail@plt+0x2340>
   13224:	mov	r6, #1
   13228:	str	r6, [sp, #24]
   1322c:	str	r6, [sp, #32]
   13230:	str	r3, [sp, #40]	; 0x28
   13234:	mov	r4, #0
   13238:	mov	sl, #5
   1323c:	b	125e4 <__assert_fail@plt+0x16dc>
   13240:	mov	r6, #1
   13244:	b	127d8 <__assert_fail@plt+0x18d0>
   13248:	andeq	r5, r1, fp, ror #10
   1324c:	andeq	r5, r1, sp, ror #10
   13250:	andeq	r5, r1, r2, ror #5
   13254:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   13258:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1325c:	sub	sp, sp, #52	; 0x34
   13260:	mov	r6, r0
   13264:	mov	r5, r3
   13268:	mov	r8, r1
   1326c:	mov	r9, r2
   13270:	bl	10e24 <__errno_location@plt>
   13274:	ldr	r7, [pc, #380]	; 133f8 <__assert_fail@plt+0x24f0>
   13278:	cmn	r6, #-2147483647	; 0x80000001
   1327c:	ldr	r4, [r7]
   13280:	ldr	r3, [r0]
   13284:	str	r0, [sp, #24]
   13288:	str	r3, [sp, #32]
   1328c:	movne	r3, #0
   13290:	moveq	r3, #1
   13294:	orrs	r3, r3, r6, lsr #31
   13298:	beq	132a0 <__assert_fail@plt+0x2398>
   1329c:	bl	10ee4 <abort@plt>
   132a0:	ldr	r2, [r7, #4]
   132a4:	cmp	r6, r2
   132a8:	blt	13318 <__assert_fail@plt+0x2410>
   132ac:	add	r1, sp, #48	; 0x30
   132b0:	add	sl, r7, #8
   132b4:	str	r2, [r1, #-4]!
   132b8:	cmp	r4, sl
   132bc:	mov	r3, #8
   132c0:	sub	r2, r6, r2
   132c4:	movne	r0, r4
   132c8:	str	r3, [sp]
   132cc:	add	r2, r2, #1
   132d0:	mvn	r3, #-2147483648	; 0x80000000
   132d4:	moveq	r0, #0
   132d8:	bl	13fec <__assert_fail@plt+0x30e4>
   132dc:	cmp	r4, sl
   132e0:	ldr	r2, [sp, #44]	; 0x2c
   132e4:	mov	fp, r0
   132e8:	str	r0, [r7]
   132ec:	ldmeq	r4, {r0, r1}
   132f0:	mov	r4, fp
   132f4:	stmeq	fp, {r0, r1}
   132f8:	ldr	r0, [r7, #4]
   132fc:	mov	r1, #0
   13300:	sub	r2, r2, r0
   13304:	add	r0, fp, r0, lsl #3
   13308:	lsl	r2, r2, #3
   1330c:	bl	10e3c <memset@plt>
   13310:	ldr	r3, [sp, #44]	; 0x2c
   13314:	str	r3, [r7, #4]
   13318:	ldr	r3, [r5, #4]
   1331c:	add	sl, r4, r6, lsl #3
   13320:	orr	r3, r3, #1
   13324:	str	r3, [sp, #28]
   13328:	add	r3, r5, #8
   1332c:	str	r3, [sp, #36]	; 0x24
   13330:	ldr	r3, [r5, #44]	; 0x2c
   13334:	ldr	fp, [r4, r6, lsl #3]
   13338:	ldr	r7, [sl, #4]
   1333c:	str	r3, [sp, #16]
   13340:	ldr	r3, [r5, #40]	; 0x28
   13344:	mov	r2, r8
   13348:	str	r3, [sp, #12]
   1334c:	add	r3, r5, #8
   13350:	str	r3, [sp, #8]
   13354:	ldr	r3, [sp, #28]
   13358:	mov	r1, fp
   1335c:	str	r3, [sp, #4]
   13360:	ldr	r3, [r5]
   13364:	mov	r0, r7
   13368:	str	r3, [sp]
   1336c:	mov	r3, r9
   13370:	bl	12524 <__assert_fail@plt+0x161c>
   13374:	cmp	fp, r0
   13378:	bhi	133e0 <__assert_fail@plt+0x24d8>
   1337c:	ldr	r3, [pc, #120]	; 133fc <__assert_fail@plt+0x24f4>
   13380:	add	fp, r0, #1
   13384:	cmp	r7, r3
   13388:	str	fp, [r4, r6, lsl #3]
   1338c:	beq	13398 <__assert_fail@plt+0x2490>
   13390:	mov	r0, r7
   13394:	bl	1224c <__assert_fail@plt+0x1344>
   13398:	mov	r0, fp
   1339c:	bl	13ea4 <__assert_fail@plt+0x2f9c>
   133a0:	ldr	r3, [r5, #44]	; 0x2c
   133a4:	mov	r2, r8
   133a8:	mov	r1, fp
   133ac:	str	r0, [sl, #4]
   133b0:	str	r3, [sp, #16]
   133b4:	ldr	r3, [r5, #40]	; 0x28
   133b8:	mov	r7, r0
   133bc:	str	r3, [sp, #12]
   133c0:	add	r3, r5, #8
   133c4:	str	r3, [sp, #8]
   133c8:	ldr	r3, [sp, #28]
   133cc:	str	r3, [sp, #4]
   133d0:	ldr	r3, [r5]
   133d4:	str	r3, [sp]
   133d8:	mov	r3, r9
   133dc:	bl	12524 <__assert_fail@plt+0x161c>
   133e0:	ldr	r3, [sp, #24]
   133e4:	ldr	r2, [sp, #32]
   133e8:	mov	r0, r7
   133ec:	str	r2, [r3]
   133f0:	add	sp, sp, #52	; 0x34
   133f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   133f8:	strdeq	r6, [r2], -r8
   133fc:	andeq	r6, r2, r8, lsr #3
   13400:	push	{r4, r5, r6, lr}
   13404:	mov	r5, r0
   13408:	bl	10e24 <__errno_location@plt>
   1340c:	cmp	r5, #0
   13410:	mov	r1, #48	; 0x30
   13414:	ldr	r6, [r0]
   13418:	mov	r4, r0
   1341c:	ldr	r0, [pc, #12]	; 13430 <__assert_fail@plt+0x2528>
   13420:	movne	r0, r5
   13424:	bl	14280 <__assert_fail@plt+0x3378>
   13428:	str	r6, [r4]
   1342c:	pop	{r4, r5, r6, pc}
   13430:	andeq	r6, r2, r8, lsr #5
   13434:	ldr	r3, [pc, #12]	; 13448 <__assert_fail@plt+0x2540>
   13438:	cmp	r0, #0
   1343c:	moveq	r0, r3
   13440:	ldr	r0, [r0]
   13444:	bx	lr
   13448:	andeq	r6, r2, r8, lsr #5
   1344c:	ldr	r3, [pc, #12]	; 13460 <__assert_fail@plt+0x2558>
   13450:	cmp	r0, #0
   13454:	moveq	r0, r3
   13458:	str	r1, [r0]
   1345c:	bx	lr
   13460:	andeq	r6, r2, r8, lsr #5
   13464:	ldr	r3, [pc, #52]	; 134a0 <__assert_fail@plt+0x2598>
   13468:	cmp	r0, #0
   1346c:	moveq	r0, r3
   13470:	add	r3, r0, #8
   13474:	push	{lr}		; (str lr, [sp, #-4]!)
   13478:	lsr	lr, r1, #5
   1347c:	and	r1, r1, #31
   13480:	ldr	ip, [r3, lr, lsl #2]
   13484:	lsr	r0, ip, r1
   13488:	eor	r2, r2, r0
   1348c:	and	r2, r2, #1
   13490:	and	r0, r0, #1
   13494:	eor	r1, ip, r2, lsl r1
   13498:	str	r1, [r3, lr, lsl #2]
   1349c:	pop	{pc}		; (ldr pc, [sp], #4)
   134a0:	andeq	r6, r2, r8, lsr #5
   134a4:	ldr	r3, [pc, #16]	; 134bc <__assert_fail@plt+0x25b4>
   134a8:	cmp	r0, #0
   134ac:	movne	r3, r0
   134b0:	ldr	r0, [r3, #4]
   134b4:	str	r1, [r3, #4]
   134b8:	bx	lr
   134bc:	andeq	r6, r2, r8, lsr #5
   134c0:	ldr	r3, [pc, #44]	; 134f4 <__assert_fail@plt+0x25ec>
   134c4:	cmp	r0, #0
   134c8:	moveq	r0, r3
   134cc:	mov	r3, #10
   134d0:	cmp	r2, #0
   134d4:	cmpne	r1, #0
   134d8:	str	r3, [r0]
   134dc:	bne	134e8 <__assert_fail@plt+0x25e0>
   134e0:	push	{r4, lr}
   134e4:	bl	10ee4 <abort@plt>
   134e8:	str	r1, [r0, #40]	; 0x28
   134ec:	str	r2, [r0, #44]	; 0x2c
   134f0:	bx	lr
   134f4:	andeq	r6, r2, r8, lsr #5
   134f8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   134fc:	sub	sp, sp, #24
   13500:	mov	sl, r3
   13504:	ldr	r4, [sp, #56]	; 0x38
   13508:	ldr	r3, [pc, #100]	; 13574 <__assert_fail@plt+0x266c>
   1350c:	cmp	r4, #0
   13510:	moveq	r4, r3
   13514:	mov	r7, r0
   13518:	mov	r8, r1
   1351c:	mov	r9, r2
   13520:	bl	10e24 <__errno_location@plt>
   13524:	ldr	r3, [r4, #44]	; 0x2c
   13528:	mov	r2, r9
   1352c:	mov	r1, r8
   13530:	ldr	r6, [r0]
   13534:	str	r3, [sp, #16]
   13538:	ldr	r3, [r4, #40]	; 0x28
   1353c:	mov	r5, r0
   13540:	str	r3, [sp, #12]
   13544:	add	r3, r4, #8
   13548:	str	r3, [sp, #8]
   1354c:	ldr	r3, [r4, #4]
   13550:	mov	r0, r7
   13554:	str	r3, [sp, #4]
   13558:	ldr	r3, [r4]
   1355c:	str	r3, [sp]
   13560:	mov	r3, sl
   13564:	bl	12524 <__assert_fail@plt+0x161c>
   13568:	str	r6, [r5]
   1356c:	add	sp, sp, #24
   13570:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13574:	andeq	r6, r2, r8, lsr #5
   13578:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1357c:	cmp	r3, #0
   13580:	sub	sp, sp, #44	; 0x2c
   13584:	ldr	r4, [pc, #188]	; 13648 <__assert_fail@plt+0x2740>
   13588:	mov	r6, r2
   1358c:	movne	r4, r3
   13590:	mov	sl, r1
   13594:	mov	r9, r0
   13598:	bl	10e24 <__errno_location@plt>
   1359c:	ldr	r5, [r4, #4]
   135a0:	add	fp, r4, #8
   135a4:	cmp	r6, #0
   135a8:	orreq	r5, r5, #1
   135ac:	mov	r1, #0
   135b0:	mov	r2, r9
   135b4:	ldr	r3, [r0]
   135b8:	mov	r8, r0
   135bc:	str	r3, [sp, #28]
   135c0:	ldr	r3, [r4, #44]	; 0x2c
   135c4:	mov	r0, r1
   135c8:	str	r3, [sp, #16]
   135cc:	ldr	r3, [r4, #40]	; 0x28
   135d0:	stmib	sp, {r5, fp}
   135d4:	str	r3, [sp, #12]
   135d8:	ldr	r3, [r4]
   135dc:	str	r3, [sp]
   135e0:	mov	r3, sl
   135e4:	bl	12524 <__assert_fail@plt+0x161c>
   135e8:	add	r1, r0, #1
   135ec:	mov	r7, r0
   135f0:	mov	r0, r1
   135f4:	str	r1, [sp, #36]	; 0x24
   135f8:	bl	13ea4 <__assert_fail@plt+0x2f9c>
   135fc:	ldr	r3, [r4, #44]	; 0x2c
   13600:	mov	r2, r9
   13604:	str	r3, [sp, #16]
   13608:	ldr	r3, [r4, #40]	; 0x28
   1360c:	stmib	sp, {r5, fp}
   13610:	str	r3, [sp, #12]
   13614:	ldr	r3, [r4]
   13618:	ldr	r1, [sp, #36]	; 0x24
   1361c:	str	r3, [sp]
   13620:	mov	r3, sl
   13624:	str	r0, [sp, #32]
   13628:	bl	12524 <__assert_fail@plt+0x161c>
   1362c:	ldr	r3, [sp, #28]
   13630:	cmp	r6, #0
   13634:	str	r3, [r8]
   13638:	ldr	r0, [sp, #32]
   1363c:	strne	r7, [r6]
   13640:	add	sp, sp, #44	; 0x2c
   13644:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13648:	andeq	r6, r2, r8, lsr #5
   1364c:	mov	r3, r2
   13650:	mov	r2, #0
   13654:	b	13578 <__assert_fail@plt+0x2670>
   13658:	push	{r4, r5, r6, r7, r8, lr}
   1365c:	mov	r6, #1
   13660:	ldr	r4, [pc, #104]	; 136d0 <__assert_fail@plt+0x27c8>
   13664:	ldr	r5, [r4]
   13668:	add	r7, r5, #12
   1366c:	ldr	r3, [r4, #4]
   13670:	add	r7, r7, #8
   13674:	cmp	r6, r3
   13678:	blt	136c0 <__assert_fail@plt+0x27b8>
   1367c:	ldr	r0, [r5, #4]
   13680:	ldr	r6, [pc, #76]	; 136d4 <__assert_fail@plt+0x27cc>
   13684:	cmp	r0, r6
   13688:	beq	1369c <__assert_fail@plt+0x2794>
   1368c:	bl	1224c <__assert_fail@plt+0x1344>
   13690:	mov	r3, #256	; 0x100
   13694:	str	r3, [r4, #8]
   13698:	str	r6, [r4, #12]
   1369c:	ldr	r6, [pc, #52]	; 136d8 <__assert_fail@plt+0x27d0>
   136a0:	cmp	r5, r6
   136a4:	beq	136b4 <__assert_fail@plt+0x27ac>
   136a8:	mov	r0, r5
   136ac:	bl	1224c <__assert_fail@plt+0x1344>
   136b0:	str	r6, [r4]
   136b4:	mov	r3, #1
   136b8:	str	r3, [r4, #4]
   136bc:	pop	{r4, r5, r6, r7, r8, pc}
   136c0:	ldr	r0, [r7, #-8]
   136c4:	bl	1224c <__assert_fail@plt+0x1344>
   136c8:	add	r6, r6, #1
   136cc:	b	1366c <__assert_fail@plt+0x2764>
   136d0:	strdeq	r6, [r2], -r8
   136d4:	andeq	r6, r2, r8, lsr #3
   136d8:	andeq	r6, r2, r0, lsl #2
   136dc:	ldr	r3, [pc, #4]	; 136e8 <__assert_fail@plt+0x27e0>
   136e0:	mvn	r2, #0
   136e4:	b	13258 <__assert_fail@plt+0x2350>
   136e8:	andeq	r6, r2, r8, lsr #5
   136ec:	ldr	r3, [pc]	; 136f4 <__assert_fail@plt+0x27ec>
   136f0:	b	13258 <__assert_fail@plt+0x2350>
   136f4:	andeq	r6, r2, r8, lsr #5
   136f8:	mov	r1, r0
   136fc:	mov	r0, #0
   13700:	b	136dc <__assert_fail@plt+0x27d4>
   13704:	mov	r2, r1
   13708:	mov	r1, r0
   1370c:	mov	r0, #0
   13710:	b	136ec <__assert_fail@plt+0x27e4>
   13714:	push	{r4, r5, lr}
   13718:	sub	sp, sp, #52	; 0x34
   1371c:	mov	r5, r2
   13720:	mov	r4, r0
   13724:	mov	r0, sp
   13728:	bl	123e0 <__assert_fail@plt+0x14d8>
   1372c:	mov	r3, sp
   13730:	mvn	r2, #0
   13734:	mov	r1, r5
   13738:	mov	r0, r4
   1373c:	bl	13258 <__assert_fail@plt+0x2350>
   13740:	add	sp, sp, #52	; 0x34
   13744:	pop	{r4, r5, pc}
   13748:	push	{r4, r5, r6, lr}
   1374c:	sub	sp, sp, #48	; 0x30
   13750:	mov	r5, r2
   13754:	mov	r6, r3
   13758:	mov	r4, r0
   1375c:	mov	r0, sp
   13760:	bl	123e0 <__assert_fail@plt+0x14d8>
   13764:	mov	r3, sp
   13768:	mov	r2, r6
   1376c:	mov	r1, r5
   13770:	mov	r0, r4
   13774:	bl	13258 <__assert_fail@plt+0x2350>
   13778:	add	sp, sp, #48	; 0x30
   1377c:	pop	{r4, r5, r6, pc}
   13780:	mov	r2, r1
   13784:	mov	r1, r0
   13788:	mov	r0, #0
   1378c:	b	13714 <__assert_fail@plt+0x280c>
   13790:	mov	r3, r2
   13794:	mov	r2, r1
   13798:	mov	r1, r0
   1379c:	mov	r0, #0
   137a0:	b	13748 <__assert_fail@plt+0x2840>
   137a4:	push	{r4, r5, r6, lr}
   137a8:	mov	r4, r0
   137ac:	ldr	lr, [pc, #80]	; 13804 <__assert_fail@plt+0x28fc>
   137b0:	mov	r5, r1
   137b4:	mov	r6, r2
   137b8:	ldm	lr!, {r0, r1, r2, r3}
   137bc:	sub	sp, sp, #48	; 0x30
   137c0:	mov	ip, sp
   137c4:	stmia	ip!, {r0, r1, r2, r3}
   137c8:	ldm	lr!, {r0, r1, r2, r3}
   137cc:	stmia	ip!, {r0, r1, r2, r3}
   137d0:	ldm	lr, {r0, r1, r2, r3}
   137d4:	stm	ip, {r0, r1, r2, r3}
   137d8:	mov	r1, r6
   137dc:	mov	r2, #1
   137e0:	mov	r0, sp
   137e4:	bl	13464 <__assert_fail@plt+0x255c>
   137e8:	mov	r3, sp
   137ec:	mov	r2, r5
   137f0:	mov	r1, r4
   137f4:	mov	r0, #0
   137f8:	bl	13258 <__assert_fail@plt+0x2350>
   137fc:	add	sp, sp, #48	; 0x30
   13800:	pop	{r4, r5, r6, pc}
   13804:	andeq	r6, r2, r8, lsr #5
   13808:	mov	r2, r1
   1380c:	mvn	r1, #0
   13810:	b	137a4 <__assert_fail@plt+0x289c>
   13814:	mov	r1, #58	; 0x3a
   13818:	b	13808 <__assert_fail@plt+0x2900>
   1381c:	mov	r2, #58	; 0x3a
   13820:	b	137a4 <__assert_fail@plt+0x289c>
   13824:	push	{r4, r5, lr}
   13828:	sub	sp, sp, #100	; 0x64
   1382c:	mov	r4, r0
   13830:	mov	r0, sp
   13834:	mov	r5, r2
   13838:	bl	123e0 <__assert_fail@plt+0x14d8>
   1383c:	mov	ip, sp
   13840:	add	lr, sp, #48	; 0x30
   13844:	ldm	ip!, {r0, r1, r2, r3}
   13848:	stmia	lr!, {r0, r1, r2, r3}
   1384c:	ldm	ip!, {r0, r1, r2, r3}
   13850:	stmia	lr!, {r0, r1, r2, r3}
   13854:	ldm	ip, {r0, r1, r2, r3}
   13858:	stm	lr, {r0, r1, r2, r3}
   1385c:	mov	r2, #1
   13860:	mov	r1, #58	; 0x3a
   13864:	add	r0, sp, #48	; 0x30
   13868:	bl	13464 <__assert_fail@plt+0x255c>
   1386c:	add	r3, sp, #48	; 0x30
   13870:	mvn	r2, #0
   13874:	mov	r1, r5
   13878:	mov	r0, r4
   1387c:	bl	13258 <__assert_fail@plt+0x2350>
   13880:	add	sp, sp, #100	; 0x64
   13884:	pop	{r4, r5, pc}
   13888:	push	{r4, r5, r6, r7, lr}
   1388c:	mov	r4, r0
   13890:	ldr	lr, [pc, #84]	; 138ec <__assert_fail@plt+0x29e4>
   13894:	mov	r6, r1
   13898:	mov	r7, r2
   1389c:	mov	r5, r3
   138a0:	ldm	lr!, {r0, r1, r2, r3}
   138a4:	sub	sp, sp, #52	; 0x34
   138a8:	mov	ip, sp
   138ac:	stmia	ip!, {r0, r1, r2, r3}
   138b0:	ldm	lr!, {r0, r1, r2, r3}
   138b4:	stmia	ip!, {r0, r1, r2, r3}
   138b8:	ldm	lr, {r0, r1, r2, r3}
   138bc:	stm	ip, {r0, r1, r2, r3}
   138c0:	mov	r2, r7
   138c4:	mov	r1, r6
   138c8:	mov	r0, sp
   138cc:	bl	134c0 <__assert_fail@plt+0x25b8>
   138d0:	mov	r3, sp
   138d4:	ldr	r2, [sp, #72]	; 0x48
   138d8:	mov	r1, r5
   138dc:	mov	r0, r4
   138e0:	bl	13258 <__assert_fail@plt+0x2350>
   138e4:	add	sp, sp, #52	; 0x34
   138e8:	pop	{r4, r5, r6, r7, pc}
   138ec:	andeq	r6, r2, r8, lsr #5
   138f0:	mvn	ip, #0
   138f4:	push	{r0, r1, r2, lr}
   138f8:	str	ip, [sp]
   138fc:	bl	13888 <__assert_fail@plt+0x2980>
   13900:	add	sp, sp, #12
   13904:	pop	{pc}		; (ldr pc, [sp], #4)
   13908:	mov	r3, r2
   1390c:	mov	r2, r1
   13910:	mov	r1, r0
   13914:	mov	r0, #0
   13918:	b	138f0 <__assert_fail@plt+0x29e8>
   1391c:	push	{r0, r1, r2, lr}
   13920:	str	r3, [sp]
   13924:	mov	r3, r2
   13928:	mov	r2, r1
   1392c:	mov	r1, r0
   13930:	mov	r0, #0
   13934:	bl	13888 <__assert_fail@plt+0x2980>
   13938:	add	sp, sp, #12
   1393c:	pop	{pc}		; (ldr pc, [sp], #4)
   13940:	ldr	r3, [pc]	; 13948 <__assert_fail@plt+0x2a40>
   13944:	b	13258 <__assert_fail@plt+0x2350>
   13948:	andeq	r6, r2, r8, lsl #2
   1394c:	mov	r2, r1
   13950:	mov	r1, r0
   13954:	mov	r0, #0
   13958:	b	13940 <__assert_fail@plt+0x2a38>
   1395c:	mvn	r2, #0
   13960:	b	13940 <__assert_fail@plt+0x2a38>
   13964:	mov	r1, r0
   13968:	mov	r0, #0
   1396c:	b	1395c <__assert_fail@plt+0x2a54>
   13970:	push	{r4, r5, r6, lr}
   13974:	sub	sp, sp, #32
   13978:	cmp	r1, #0
   1397c:	mov	r5, r0
   13980:	ldr	r4, [sp, #48]	; 0x30
   13984:	ldr	r6, [sp, #52]	; 0x34
   13988:	beq	13a3c <__assert_fail@plt+0x2b34>
   1398c:	stm	sp, {r2, r3}
   13990:	mov	r3, r1
   13994:	ldr	r2, [pc, #860]	; 13cf8 <__assert_fail@plt+0x2df0>
   13998:	mov	r1, #1
   1399c:	bl	10e60 <__fprintf_chk@plt>
   139a0:	mov	r2, #5
   139a4:	ldr	r1, [pc, #848]	; 13cfc <__assert_fail@plt+0x2df4>
   139a8:	mov	r0, #0
   139ac:	bl	10d4c <dcgettext@plt>
   139b0:	ldr	r3, [pc, #840]	; 13d00 <__assert_fail@plt+0x2df8>
   139b4:	ldr	r2, [pc, #840]	; 13d04 <__assert_fail@plt+0x2dfc>
   139b8:	str	r3, [sp]
   139bc:	mov	r1, #1
   139c0:	mov	r3, r0
   139c4:	mov	r0, r5
   139c8:	bl	10e60 <__fprintf_chk@plt>
   139cc:	mov	r1, r5
   139d0:	mov	r0, #10
   139d4:	bl	10d34 <fputc_unlocked@plt>
   139d8:	mov	r2, #5
   139dc:	ldr	r1, [pc, #804]	; 13d08 <__assert_fail@plt+0x2e00>
   139e0:	mov	r0, #0
   139e4:	bl	10d4c <dcgettext@plt>
   139e8:	mov	r1, #1
   139ec:	ldr	r3, [pc, #792]	; 13d0c <__assert_fail@plt+0x2e04>
   139f0:	mov	r2, r0
   139f4:	mov	r0, r5
   139f8:	bl	10e60 <__fprintf_chk@plt>
   139fc:	mov	r1, r5
   13a00:	mov	r0, #10
   13a04:	bl	10d34 <fputc_unlocked@plt>
   13a08:	cmp	r6, #9
   13a0c:	ldrls	pc, [pc, r6, lsl #2]
   13a10:	b	13cec <__assert_fail@plt+0x2de4>
   13a14:	andeq	r3, r1, ip, lsr #22
   13a18:	andeq	r3, r1, r4, asr sl
   13a1c:	andeq	r3, r1, r0, lsl #21
   13a20:			; <UNDEFINED> instruction: 0x00013ab4
   13a24:	strdeq	r3, [r1], -r0
   13a28:	andeq	r3, r1, r4, lsr fp
   13a2c:	andeq	r3, r1, ip, ror fp
   13a30:	andeq	r3, r1, ip, asr #23
   13a34:	andeq	r3, r1, r4, lsr #24
   13a38:	andeq	r3, r1, r4, lsl #25
   13a3c:	str	r3, [sp]
   13a40:	mov	r1, #1
   13a44:	mov	r3, r2
   13a48:	ldr	r2, [pc, #704]	; 13d10 <__assert_fail@plt+0x2e08>
   13a4c:	bl	10e60 <__fprintf_chk@plt>
   13a50:	b	139a0 <__assert_fail@plt+0x2a98>
   13a54:	mov	r2, #5
   13a58:	ldr	r1, [pc, #692]	; 13d14 <__assert_fail@plt+0x2e0c>
   13a5c:	mov	r0, #0
   13a60:	bl	10d4c <dcgettext@plt>
   13a64:	ldr	r3, [r4]
   13a68:	mov	r1, #1
   13a6c:	mov	r2, r0
   13a70:	mov	r0, r5
   13a74:	add	sp, sp, #32
   13a78:	pop	{r4, r5, r6, lr}
   13a7c:	b	10e60 <__fprintf_chk@plt>
   13a80:	mov	r2, #5
   13a84:	ldr	r1, [pc, #652]	; 13d18 <__assert_fail@plt+0x2e10>
   13a88:	mov	r0, #0
   13a8c:	bl	10d4c <dcgettext@plt>
   13a90:	ldr	r3, [r4, #4]
   13a94:	mov	r1, #1
   13a98:	str	r3, [sp, #48]	; 0x30
   13a9c:	ldr	r3, [r4]
   13aa0:	mov	r2, r0
   13aa4:	mov	r0, r5
   13aa8:	add	sp, sp, #32
   13aac:	pop	{r4, r5, r6, lr}
   13ab0:	b	10e60 <__fprintf_chk@plt>
   13ab4:	mov	r2, #5
   13ab8:	ldr	r1, [pc, #604]	; 13d1c <__assert_fail@plt+0x2e14>
   13abc:	mov	r0, #0
   13ac0:	bl	10d4c <dcgettext@plt>
   13ac4:	ldr	r3, [r4, #8]
   13ac8:	mov	r1, #1
   13acc:	str	r3, [sp, #52]	; 0x34
   13ad0:	ldr	r3, [r4, #4]
   13ad4:	str	r3, [sp, #48]	; 0x30
   13ad8:	ldr	r3, [r4]
   13adc:	mov	r2, r0
   13ae0:	mov	r0, r5
   13ae4:	add	sp, sp, #32
   13ae8:	pop	{r4, r5, r6, lr}
   13aec:	b	10e60 <__fprintf_chk@plt>
   13af0:	mov	r2, #5
   13af4:	ldr	r1, [pc, #548]	; 13d20 <__assert_fail@plt+0x2e18>
   13af8:	mov	r0, #0
   13afc:	bl	10d4c <dcgettext@plt>
   13b00:	ldr	r3, [r4, #12]
   13b04:	mov	r1, #1
   13b08:	str	r3, [sp, #8]
   13b0c:	ldr	r3, [r4, #8]
   13b10:	str	r3, [sp, #4]
   13b14:	ldr	r3, [r4, #4]
   13b18:	str	r3, [sp]
   13b1c:	ldr	r3, [r4]
   13b20:	mov	r2, r0
   13b24:	mov	r0, r5
   13b28:	bl	10e60 <__fprintf_chk@plt>
   13b2c:	add	sp, sp, #32
   13b30:	pop	{r4, r5, r6, pc}
   13b34:	mov	r2, #5
   13b38:	ldr	r1, [pc, #484]	; 13d24 <__assert_fail@plt+0x2e1c>
   13b3c:	mov	r0, #0
   13b40:	bl	10d4c <dcgettext@plt>
   13b44:	ldr	r3, [r4, #16]
   13b48:	mov	r1, #1
   13b4c:	str	r3, [sp, #12]
   13b50:	ldr	r3, [r4, #12]
   13b54:	str	r3, [sp, #8]
   13b58:	ldr	r3, [r4, #8]
   13b5c:	str	r3, [sp, #4]
   13b60:	ldr	r3, [r4, #4]
   13b64:	str	r3, [sp]
   13b68:	ldr	r3, [r4]
   13b6c:	mov	r2, r0
   13b70:	mov	r0, r5
   13b74:	bl	10e60 <__fprintf_chk@plt>
   13b78:	b	13b2c <__assert_fail@plt+0x2c24>
   13b7c:	mov	r2, #5
   13b80:	ldr	r1, [pc, #416]	; 13d28 <__assert_fail@plt+0x2e20>
   13b84:	mov	r0, #0
   13b88:	bl	10d4c <dcgettext@plt>
   13b8c:	ldr	r3, [r4, #20]
   13b90:	mov	r1, #1
   13b94:	str	r3, [sp, #16]
   13b98:	ldr	r3, [r4, #16]
   13b9c:	str	r3, [sp, #12]
   13ba0:	ldr	r3, [r4, #12]
   13ba4:	str	r3, [sp, #8]
   13ba8:	ldr	r3, [r4, #8]
   13bac:	str	r3, [sp, #4]
   13bb0:	ldr	r3, [r4, #4]
   13bb4:	str	r3, [sp]
   13bb8:	ldr	r3, [r4]
   13bbc:	mov	r2, r0
   13bc0:	mov	r0, r5
   13bc4:	bl	10e60 <__fprintf_chk@plt>
   13bc8:	b	13b2c <__assert_fail@plt+0x2c24>
   13bcc:	mov	r2, #5
   13bd0:	ldr	r1, [pc, #340]	; 13d2c <__assert_fail@plt+0x2e24>
   13bd4:	mov	r0, #0
   13bd8:	bl	10d4c <dcgettext@plt>
   13bdc:	ldr	r3, [r4, #24]
   13be0:	mov	r1, #1
   13be4:	str	r3, [sp, #20]
   13be8:	ldr	r3, [r4, #20]
   13bec:	str	r3, [sp, #16]
   13bf0:	ldr	r3, [r4, #16]
   13bf4:	str	r3, [sp, #12]
   13bf8:	ldr	r3, [r4, #12]
   13bfc:	str	r3, [sp, #8]
   13c00:	ldr	r3, [r4, #8]
   13c04:	str	r3, [sp, #4]
   13c08:	ldr	r3, [r4, #4]
   13c0c:	str	r3, [sp]
   13c10:	ldr	r3, [r4]
   13c14:	mov	r2, r0
   13c18:	mov	r0, r5
   13c1c:	bl	10e60 <__fprintf_chk@plt>
   13c20:	b	13b2c <__assert_fail@plt+0x2c24>
   13c24:	mov	r2, #5
   13c28:	ldr	r1, [pc, #256]	; 13d30 <__assert_fail@plt+0x2e28>
   13c2c:	mov	r0, #0
   13c30:	bl	10d4c <dcgettext@plt>
   13c34:	ldr	r3, [r4, #28]
   13c38:	mov	r1, #1
   13c3c:	str	r3, [sp, #24]
   13c40:	ldr	r3, [r4, #24]
   13c44:	str	r3, [sp, #20]
   13c48:	ldr	r3, [r4, #20]
   13c4c:	str	r3, [sp, #16]
   13c50:	ldr	r3, [r4, #16]
   13c54:	str	r3, [sp, #12]
   13c58:	ldr	r3, [r4, #12]
   13c5c:	str	r3, [sp, #8]
   13c60:	ldr	r3, [r4, #8]
   13c64:	str	r3, [sp, #4]
   13c68:	ldr	r3, [r4, #4]
   13c6c:	str	r3, [sp]
   13c70:	ldr	r3, [r4]
   13c74:	mov	r2, r0
   13c78:	mov	r0, r5
   13c7c:	bl	10e60 <__fprintf_chk@plt>
   13c80:	b	13b2c <__assert_fail@plt+0x2c24>
   13c84:	ldr	r1, [pc, #168]	; 13d34 <__assert_fail@plt+0x2e2c>
   13c88:	mov	r2, #5
   13c8c:	mov	r0, #0
   13c90:	bl	10d4c <dcgettext@plt>
   13c94:	ldr	r3, [r4, #32]
   13c98:	mov	r1, #1
   13c9c:	str	r3, [sp, #28]
   13ca0:	ldr	r3, [r4, #28]
   13ca4:	str	r3, [sp, #24]
   13ca8:	ldr	r3, [r4, #24]
   13cac:	str	r3, [sp, #20]
   13cb0:	ldr	r3, [r4, #20]
   13cb4:	str	r3, [sp, #16]
   13cb8:	ldr	r3, [r4, #16]
   13cbc:	str	r3, [sp, #12]
   13cc0:	ldr	r3, [r4, #12]
   13cc4:	str	r3, [sp, #8]
   13cc8:	ldr	r3, [r4, #8]
   13ccc:	str	r3, [sp, #4]
   13cd0:	ldr	r3, [r4, #4]
   13cd4:	str	r3, [sp]
   13cd8:	ldr	r3, [r4]
   13cdc:	mov	r2, r0
   13ce0:	mov	r0, r5
   13ce4:	bl	10e60 <__fprintf_chk@plt>
   13ce8:	b	13b2c <__assert_fail@plt+0x2c24>
   13cec:	mov	r2, #5
   13cf0:	ldr	r1, [pc, #64]	; 13d38 <__assert_fail@plt+0x2e30>
   13cf4:	b	13c8c <__assert_fail@plt+0x2d84>
   13cf8:			; <UNDEFINED> instruction: 0x000155bb
   13cfc:	andeq	r5, r1, lr, asr #11
   13d00:	andeq	r0, r0, r6, ror #15
   13d04:	muleq	r1, ip, r8
   13d08:	ldrdeq	r5, [r1], -r2
   13d0c:	andeq	r5, r1, sp, ror r6
   13d10:	andeq	r5, r1, r7, asr #11
   13d14:	muleq	r1, pc, r6	; <UNPREDICTABLE>
   13d18:	andeq	r5, r1, pc, lsr #13
   13d1c:	andeq	r5, r1, r6, asr #13
   13d20:	andeq	r5, r1, r2, ror #13
   13d24:	andeq	r5, r1, r2, lsl #14
   13d28:	andeq	r5, r1, r6, lsr #14
   13d2c:	andeq	r5, r1, lr, asr #14
   13d30:	andeq	r5, r1, sl, ror r7
   13d34:	andeq	r5, r1, sl, lsr #15
   13d38:	ldrdeq	r5, [r1], -lr
   13d3c:	push	{r0, r1, r4, lr}
   13d40:	mov	ip, #0
   13d44:	ldr	lr, [sp, #16]
   13d48:	ldr	r4, [lr, ip, lsl #2]
   13d4c:	cmp	r4, #0
   13d50:	bne	13d68 <__assert_fail@plt+0x2e60>
   13d54:	str	ip, [sp, #4]
   13d58:	str	lr, [sp]
   13d5c:	bl	13970 <__assert_fail@plt+0x2a68>
   13d60:	add	sp, sp, #8
   13d64:	pop	{r4, pc}
   13d68:	add	ip, ip, #1
   13d6c:	b	13d48 <__assert_fail@plt+0x2e40>
   13d70:	push	{r4, r5, lr}
   13d74:	sub	sp, sp, #52	; 0x34
   13d78:	mov	ip, #0
   13d7c:	ldr	r5, [sp, #64]	; 0x40
   13d80:	add	lr, sp, #8
   13d84:	ldr	r4, [r5, ip, lsl #2]
   13d88:	cmp	r4, #0
   13d8c:	str	r4, [lr, ip, lsl #2]
   13d90:	beq	13da0 <__assert_fail@plt+0x2e98>
   13d94:	add	ip, ip, #1
   13d98:	cmp	ip, #10
   13d9c:	bne	13d84 <__assert_fail@plt+0x2e7c>
   13da0:	str	ip, [sp, #4]
   13da4:	str	lr, [sp]
   13da8:	bl	13970 <__assert_fail@plt+0x2a68>
   13dac:	add	sp, sp, #52	; 0x34
   13db0:	pop	{r4, r5, pc}
   13db4:	push	{r3}		; (str r3, [sp, #-4]!)
   13db8:	push	{r0, r1, r2, r3, lr}
   13dbc:	add	r3, sp, #24
   13dc0:	str	r3, [sp, #12]
   13dc4:	str	r3, [sp]
   13dc8:	ldr	r3, [sp, #20]
   13dcc:	bl	13d70 <__assert_fail@plt+0x2e68>
   13dd0:	add	sp, sp, #16
   13dd4:	pop	{lr}		; (ldr lr, [sp], #4)
   13dd8:	add	sp, sp, #4
   13ddc:	bx	lr
   13de0:	ldr	r3, [pc, #116]	; 13e5c <__assert_fail@plt+0x2f54>
   13de4:	push	{r4, lr}
   13de8:	mov	r0, #10
   13dec:	ldr	r1, [r3]
   13df0:	bl	10d34 <fputc_unlocked@plt>
   13df4:	mov	r2, #5
   13df8:	ldr	r1, [pc, #96]	; 13e60 <__assert_fail@plt+0x2f58>
   13dfc:	mov	r0, #0
   13e00:	bl	10d4c <dcgettext@plt>
   13e04:	ldr	r2, [pc, #88]	; 13e64 <__assert_fail@plt+0x2f5c>
   13e08:	mov	r1, r0
   13e0c:	mov	r0, #1
   13e10:	bl	10e48 <__printf_chk@plt>
   13e14:	mov	r2, #5
   13e18:	ldr	r1, [pc, #72]	; 13e68 <__assert_fail@plt+0x2f60>
   13e1c:	mov	r0, #0
   13e20:	bl	10d4c <dcgettext@plt>
   13e24:	ldr	r3, [pc, #64]	; 13e6c <__assert_fail@plt+0x2f64>
   13e28:	ldr	r2, [pc, #64]	; 13e70 <__assert_fail@plt+0x2f68>
   13e2c:	mov	r1, r0
   13e30:	mov	r0, #1
   13e34:	bl	10e48 <__printf_chk@plt>
   13e38:	mov	r2, #5
   13e3c:	ldr	r1, [pc, #48]	; 13e74 <__assert_fail@plt+0x2f6c>
   13e40:	mov	r0, #0
   13e44:	bl	10d4c <dcgettext@plt>
   13e48:	ldr	r2, [pc, #40]	; 13e78 <__assert_fail@plt+0x2f70>
   13e4c:	pop	{r4, lr}
   13e50:	mov	r1, r0
   13e54:	mov	r0, #1
   13e58:	b	10e48 <__printf_chk@plt>
   13e5c:	andeq	r6, r2, r4, asr r1
   13e60:	andeq	r5, r1, sl, lsl r8
   13e64:	andeq	r5, r1, lr, lsr #16
   13e68:	andeq	r5, r1, r4, asr #16
   13e6c:	andeq	r4, r1, r1, lsr #31
   13e70:	andeq	r4, r1, r9, asr #31
   13e74:	andeq	r5, r1, r8, asr r8
   13e78:	andeq	r5, r1, pc, ror r8
   13e7c:	push	{r4, lr}
   13e80:	bl	14398 <__assert_fail@plt+0x3490>
   13e84:	cmp	r0, #0
   13e88:	popne	{r4, pc}
   13e8c:	bl	14310 <__assert_fail@plt+0x3408>
   13e90:	push	{r4, lr}
   13e94:	bl	14398 <__assert_fail@plt+0x3490>
   13e98:	cmp	r0, #0
   13e9c:	popne	{r4, pc}
   13ea0:	bl	14310 <__assert_fail@plt+0x3408>
   13ea4:	b	13e7c <__assert_fail@plt+0x2f74>
   13ea8:	push	{r4, r5, r6, lr}
   13eac:	mov	r5, r0
   13eb0:	mov	r4, r1
   13eb4:	bl	143d8 <__assert_fail@plt+0x34d0>
   13eb8:	cmp	r0, #0
   13ebc:	popne	{r4, r5, r6, pc}
   13ec0:	adds	r4, r4, #0
   13ec4:	movne	r4, #1
   13ec8:	cmp	r5, #0
   13ecc:	orreq	r4, r4, #1
   13ed0:	cmp	r4, #0
   13ed4:	popeq	{r4, r5, r6, pc}
   13ed8:	bl	14310 <__assert_fail@plt+0x3408>
   13edc:	push	{r4, lr}
   13ee0:	cmp	r1, #0
   13ee4:	orreq	r1, r1, #1
   13ee8:	bl	143d8 <__assert_fail@plt+0x34d0>
   13eec:	cmp	r0, #0
   13ef0:	popne	{r4, pc}
   13ef4:	bl	14310 <__assert_fail@plt+0x3408>
   13ef8:	push	{r4, r5, r6, lr}
   13efc:	mov	r6, r0
   13f00:	mov	r5, r1
   13f04:	mov	r4, r2
   13f08:	bl	14528 <__assert_fail@plt+0x3620>
   13f0c:	cmp	r0, #0
   13f10:	popne	{r4, r5, r6, pc}
   13f14:	cmp	r6, #0
   13f18:	beq	13f28 <__assert_fail@plt+0x3020>
   13f1c:	cmp	r5, #0
   13f20:	cmpne	r4, #0
   13f24:	popeq	{r4, r5, r6, pc}
   13f28:	bl	14310 <__assert_fail@plt+0x3408>
   13f2c:	b	13ef8 <__assert_fail@plt+0x2ff0>
   13f30:	cmp	r2, #0
   13f34:	cmpne	r1, #0
   13f38:	moveq	r2, #1
   13f3c:	moveq	r1, r2
   13f40:	push	{r4, lr}
   13f44:	bl	14528 <__assert_fail@plt+0x3620>
   13f48:	cmp	r0, #0
   13f4c:	popne	{r4, pc}
   13f50:	bl	14310 <__assert_fail@plt+0x3408>
   13f54:	mov	r2, r1
   13f58:	mov	r1, r0
   13f5c:	mov	r0, #0
   13f60:	b	13ef8 <__assert_fail@plt+0x2ff0>
   13f64:	mov	r2, r1
   13f68:	mov	r1, r0
   13f6c:	mov	r0, #0
   13f70:	b	13f30 <__assert_fail@plt+0x3028>
   13f74:	push	{r4, r5, r6, r7, r8, lr}
   13f78:	subs	r7, r0, #0
   13f7c:	mov	r5, r1
   13f80:	mov	r6, r2
   13f84:	ldr	r4, [r1]
   13f88:	bne	13fc4 <__assert_fail@plt+0x30bc>
   13f8c:	cmp	r4, #0
   13f90:	bne	13fac <__assert_fail@plt+0x30a4>
   13f94:	mov	r1, r2
   13f98:	mov	r0, #64	; 0x40
   13f9c:	bl	14654 <__assert_fail@plt+0x374c>
   13fa0:	cmp	r0, #0
   13fa4:	movne	r4, r0
   13fa8:	addeq	r4, r0, #1
   13fac:	mov	r2, r6
   13fb0:	mov	r1, r4
   13fb4:	mov	r0, r7
   13fb8:	bl	13ef8 <__assert_fail@plt+0x2ff0>
   13fbc:	str	r4, [r5]
   13fc0:	pop	{r4, r5, r6, r7, r8, pc}
   13fc4:	lsr	r2, r4, #1
   13fc8:	add	r3, r2, #1
   13fcc:	mvn	r3, r3
   13fd0:	cmp	r4, r3
   13fd4:	addls	r4, r4, #1
   13fd8:	addls	r4, r4, r2
   13fdc:	bls	13fac <__assert_fail@plt+0x30a4>
   13fe0:	bl	14310 <__assert_fail@plt+0x3408>
   13fe4:	mov	r2, #1
   13fe8:	b	13f74 <__assert_fail@plt+0x306c>
   13fec:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13ff0:	mov	sl, r0
   13ff4:	ldr	r8, [r1]
   13ff8:	mov	fp, r1
   13ffc:	mov	r5, r2
   14000:	asrs	r4, r8, #1
   14004:	mov	r9, r3
   14008:	ldr	r7, [sp, #48]	; 0x30
   1400c:	bpl	140a8 <__assert_fail@plt+0x31a0>
   14010:	rsb	r2, r4, #-2147483648	; 0x80000000
   14014:	cmp	r8, r2
   14018:	movge	r2, #0
   1401c:	movlt	r2, #1
   14020:	mvn	r3, r9
   14024:	cmp	r2, #0
   14028:	lsr	r3, r3, #31
   1402c:	addeq	r4, r4, r8
   14030:	mvnne	r4, #-2147483648	; 0x80000000
   14034:	mov	r0, r3
   14038:	cmp	r9, r4
   1403c:	movge	r0, #0
   14040:	andlt	r0, r0, #1
   14044:	cmp	r0, #0
   14048:	str	r3, [sp, #4]
   1404c:	bne	1421c <__assert_fail@plt+0x3314>
   14050:	cmp	r7, #0
   14054:	bge	14168 <__assert_fail@plt+0x3260>
   14058:	cmp	r4, #0
   1405c:	bge	140c0 <__assert_fail@plt+0x31b8>
   14060:	mov	r1, r7
   14064:	mvn	r0, #-2147483648	; 0x80000000
   14068:	bl	14860 <__assert_fail@plt+0x3958>
   1406c:	cmp	r0, r4
   14070:	movle	r0, #0
   14074:	movgt	r0, #1
   14078:	cmp	r0, #0
   1407c:	mvnne	r6, #-2147483648	; 0x80000000
   14080:	beq	140d0 <__assert_fail@plt+0x31c8>
   14084:	mov	r1, r7
   14088:	mov	r0, r6
   1408c:	bl	14860 <__assert_fail@plt+0x3958>
   14090:	mov	r1, r7
   14094:	mov	r4, r0
   14098:	mov	r0, r6
   1409c:	bl	14a80 <__assert_fail@plt+0x3b78>
   140a0:	sub	r1, r6, r1
   140a4:	b	140e0 <__assert_fail@plt+0x31d8>
   140a8:	mvn	r2, #-2147483648	; 0x80000000
   140ac:	sub	r2, r2, r4
   140b0:	cmp	r8, r2
   140b4:	movle	r2, #0
   140b8:	movgt	r2, #1
   140bc:	b	14020 <__assert_fail@plt+0x3118>
   140c0:	cmn	r7, #1
   140c4:	movne	r1, r7
   140c8:	movne	r0, #-2147483648	; 0x80000000
   140cc:	bne	14234 <__assert_fail@plt+0x332c>
   140d0:	mul	r1, r7, r4
   140d4:	cmp	r1, #63	; 0x3f
   140d8:	movle	r6, #64	; 0x40
   140dc:	ble	14084 <__assert_fail@plt+0x317c>
   140e0:	cmp	sl, #0
   140e4:	sub	r2, r4, r8
   140e8:	streq	sl, [fp]
   140ec:	cmp	r2, r5
   140f0:	bge	141c4 <__assert_fail@plt+0x32bc>
   140f4:	cmp	r5, #0
   140f8:	bge	14190 <__assert_fail@plt+0x3288>
   140fc:	rsb	r2, r5, #-2147483648	; 0x80000000
   14100:	cmp	r8, r2
   14104:	movge	r2, #0
   14108:	movlt	r2, #1
   1410c:	cmp	r2, #0
   14110:	bne	14164 <__assert_fail@plt+0x325c>
   14114:	ldr	r0, [sp, #4]
   14118:	add	r5, r8, r5
   1411c:	cmp	r9, r5
   14120:	movge	r0, #0
   14124:	andlt	r0, r0, #1
   14128:	cmp	r0, #0
   1412c:	mov	r4, r5
   14130:	bne	14164 <__assert_fail@plt+0x325c>
   14134:	cmp	r7, #0
   14138:	bge	141d8 <__assert_fail@plt+0x32d0>
   1413c:	cmp	r5, #0
   14140:	bge	141b0 <__assert_fail@plt+0x32a8>
   14144:	mov	r1, r7
   14148:	mvn	r0, #-2147483648	; 0x80000000
   1414c:	bl	14860 <__assert_fail@plt+0x3958>
   14150:	cmp	r5, r0
   14154:	movge	r0, #0
   14158:	movlt	r0, #1
   1415c:	cmp	r0, #0
   14160:	beq	141c0 <__assert_fail@plt+0x32b8>
   14164:	bl	14310 <__assert_fail@plt+0x3408>
   14168:	beq	140d0 <__assert_fail@plt+0x31c8>
   1416c:	cmp	r4, #0
   14170:	bge	1422c <__assert_fail@plt+0x3324>
   14174:	cmn	r4, #1
   14178:	beq	140d0 <__assert_fail@plt+0x31c8>
   1417c:	mov	r1, r4
   14180:	mov	r0, #-2147483648	; 0x80000000
   14184:	bl	14860 <__assert_fail@plt+0x3958>
   14188:	cmp	r7, r0
   1418c:	b	14070 <__assert_fail@plt+0x3168>
   14190:	cmp	r8, #0
   14194:	blt	14114 <__assert_fail@plt+0x320c>
   14198:	mvn	r2, #-2147483648	; 0x80000000
   1419c:	sub	r2, r2, r5
   141a0:	cmp	r8, r2
   141a4:	movle	r2, #0
   141a8:	movgt	r2, #1
   141ac:	b	1410c <__assert_fail@plt+0x3204>
   141b0:	cmn	r7, #1
   141b4:	movne	r1, r7
   141b8:	movne	r0, #-2147483648	; 0x80000000
   141bc:	bne	14210 <__assert_fail@plt+0x3308>
   141c0:	mul	r1, r5, r7
   141c4:	mov	r0, sl
   141c8:	bl	13ea8 <__assert_fail@plt+0x2fa0>
   141cc:	str	r4, [fp]
   141d0:	add	sp, sp, #12
   141d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   141d8:	beq	141c0 <__assert_fail@plt+0x32b8>
   141dc:	cmp	r5, #0
   141e0:	movge	r1, r7
   141e4:	mvnge	r0, #-2147483648	; 0x80000000
   141e8:	bge	14210 <__assert_fail@plt+0x3308>
   141ec:	cmn	r5, #1
   141f0:	beq	141c0 <__assert_fail@plt+0x32b8>
   141f4:	mov	r1, r5
   141f8:	mov	r0, #-2147483648	; 0x80000000
   141fc:	bl	14860 <__assert_fail@plt+0x3958>
   14200:	cmp	r7, r0
   14204:	movle	r0, #0
   14208:	movgt	r0, #1
   1420c:	b	1415c <__assert_fail@plt+0x3254>
   14210:	bl	14860 <__assert_fail@plt+0x3958>
   14214:	cmp	r5, r0
   14218:	b	14204 <__assert_fail@plt+0x32fc>
   1421c:	cmp	r7, #0
   14220:	mov	r4, r9
   14224:	blt	140c0 <__assert_fail@plt+0x31b8>
   14228:	beq	140d0 <__assert_fail@plt+0x31c8>
   1422c:	mov	r1, r7
   14230:	mvn	r0, #-2147483648	; 0x80000000
   14234:	bl	14860 <__assert_fail@plt+0x3958>
   14238:	cmp	r0, r4
   1423c:	movge	r0, #0
   14240:	movlt	r0, #1
   14244:	b	14078 <__assert_fail@plt+0x3170>
   14248:	push	{r4, lr}
   1424c:	bl	14350 <__assert_fail@plt+0x3448>
   14250:	cmp	r0, #0
   14254:	popne	{r4, pc}
   14258:	bl	14310 <__assert_fail@plt+0x3408>
   1425c:	mov	r1, #1
   14260:	b	14248 <__assert_fail@plt+0x3340>
   14264:	push	{r4, lr}
   14268:	bl	14350 <__assert_fail@plt+0x3448>
   1426c:	cmp	r0, #0
   14270:	popne	{r4, pc}
   14274:	bl	14310 <__assert_fail@plt+0x3408>
   14278:	mov	r1, #1
   1427c:	b	14264 <__assert_fail@plt+0x335c>
   14280:	push	{r4, r5, r6, lr}
   14284:	mov	r4, r1
   14288:	mov	r5, r0
   1428c:	mov	r0, r1
   14290:	bl	13e7c <__assert_fail@plt+0x2f74>
   14294:	mov	r2, r4
   14298:	mov	r1, r5
   1429c:	pop	{r4, r5, r6, lr}
   142a0:	b	10d04 <memcpy@plt>
   142a4:	push	{r4, r5, r6, lr}
   142a8:	mov	r4, r1
   142ac:	mov	r5, r0
   142b0:	mov	r0, r1
   142b4:	bl	13e90 <__assert_fail@plt+0x2f88>
   142b8:	mov	r2, r4
   142bc:	mov	r1, r5
   142c0:	pop	{r4, r5, r6, lr}
   142c4:	b	10d04 <memcpy@plt>
   142c8:	push	{r4, r5, r6, lr}
   142cc:	mov	r5, r0
   142d0:	add	r0, r1, #1
   142d4:	mov	r4, r1
   142d8:	bl	13e90 <__assert_fail@plt+0x2f88>
   142dc:	mov	r2, #0
   142e0:	mov	r1, r5
   142e4:	strb	r2, [r0, r4]
   142e8:	mov	r2, r4
   142ec:	pop	{r4, r5, r6, lr}
   142f0:	b	10d04 <memcpy@plt>
   142f4:	push	{r4, lr}
   142f8:	mov	r4, r0
   142fc:	bl	10e18 <strlen@plt>
   14300:	add	r1, r0, #1
   14304:	mov	r0, r4
   14308:	pop	{r4, lr}
   1430c:	b	14280 <__assert_fail@plt+0x3378>
   14310:	ldr	r3, [pc, #44]	; 14344 <__assert_fail@plt+0x343c>
   14314:	push	{r4, lr}
   14318:	mov	r2, #5
   1431c:	ldr	r1, [pc, #36]	; 14348 <__assert_fail@plt+0x3440>
   14320:	mov	r0, #0
   14324:	ldr	r4, [r3]
   14328:	bl	10d4c <dcgettext@plt>
   1432c:	ldr	r2, [pc, #24]	; 1434c <__assert_fail@plt+0x3444>
   14330:	mov	r1, #0
   14334:	mov	r3, r0
   14338:	mov	r0, r4
   1433c:	bl	10db8 <error@plt>
   14340:	bl	10ee4 <abort@plt>
   14344:	strdeq	r6, [r2], -r4
   14348:	andeq	r5, r1, fp, asr #17
   1434c:	andeq	r5, r1, pc, asr r2
   14350:	cmp	r1, #0
   14354:	cmpne	r0, #0
   14358:	moveq	r1, #1
   1435c:	moveq	r0, r1
   14360:	umull	r2, r3, r0, r1
   14364:	adds	r3, r3, #0
   14368:	movne	r3, #1
   1436c:	cmp	r2, #0
   14370:	blt	14380 <__assert_fail@plt+0x3478>
   14374:	cmp	r3, #0
   14378:	bne	14380 <__assert_fail@plt+0x3478>
   1437c:	b	10ca4 <calloc@plt>
   14380:	push	{r4, lr}
   14384:	bl	10e24 <__errno_location@plt>
   14388:	mov	r3, #12
   1438c:	str	r3, [r0]
   14390:	mov	r0, #0
   14394:	pop	{r4, pc}
   14398:	cmp	r0, #0
   1439c:	mov	r3, #0
   143a0:	moveq	r0, #1
   143a4:	adds	r3, r3, #0
   143a8:	movne	r3, #1
   143ac:	cmp	r0, #0
   143b0:	blt	143c0 <__assert_fail@plt+0x34b8>
   143b4:	cmp	r3, #0
   143b8:	bne	143c0 <__assert_fail@plt+0x34b8>
   143bc:	b	10dc4 <malloc@plt>
   143c0:	push	{r4, lr}
   143c4:	bl	10e24 <__errno_location@plt>
   143c8:	mov	r3, #12
   143cc:	str	r3, [r0]
   143d0:	mov	r0, #0
   143d4:	pop	{r4, pc}
   143d8:	cmp	r0, #0
   143dc:	push	{r4, lr}
   143e0:	mov	r4, r1
   143e4:	bne	143f4 <__assert_fail@plt+0x34ec>
   143e8:	mov	r0, r1
   143ec:	pop	{r4, lr}
   143f0:	b	14398 <__assert_fail@plt+0x3490>
   143f4:	cmp	r1, #0
   143f8:	bne	14408 <__assert_fail@plt+0x3500>
   143fc:	bl	1224c <__assert_fail@plt+0x1344>
   14400:	mov	r0, #0
   14404:	pop	{r4, pc}
   14408:	cmp	r1, #0
   1440c:	blt	1441c <__assert_fail@plt+0x3514>
   14410:	mov	r3, #0
   14414:	cmp	r3, r3
   14418:	beq	1442c <__assert_fail@plt+0x3524>
   1441c:	bl	10e24 <__errno_location@plt>
   14420:	mov	r3, #12
   14424:	str	r3, [r0]
   14428:	b	14400 <__assert_fail@plt+0x34f8>
   1442c:	pop	{r4, lr}
   14430:	b	10d58 <realloc@plt>
   14434:	push	{r4, r5, r6, lr}
   14438:	mov	r4, r0
   1443c:	bl	10d94 <__fpending@plt>
   14440:	mov	r5, r0
   14444:	mov	r0, r4
   14448:	bl	10da0 <ferror_unlocked@plt>
   1444c:	mov	r6, r0
   14450:	mov	r0, r4
   14454:	bl	12154 <__assert_fail@plt+0x124c>
   14458:	cmp	r6, #0
   1445c:	mov	r4, r0
   14460:	bne	1448c <__assert_fail@plt+0x3584>
   14464:	cmp	r0, #0
   14468:	beq	14484 <__assert_fail@plt+0x357c>
   1446c:	cmp	r5, #0
   14470:	bne	1449c <__assert_fail@plt+0x3594>
   14474:	bl	10e24 <__errno_location@plt>
   14478:	ldr	r4, [r0]
   1447c:	subs	r4, r4, #9
   14480:	mvnne	r4, #0
   14484:	mov	r0, r4
   14488:	pop	{r4, r5, r6, pc}
   1448c:	cmp	r0, #0
   14490:	bne	1449c <__assert_fail@plt+0x3594>
   14494:	bl	10e24 <__errno_location@plt>
   14498:	str	r4, [r0]
   1449c:	mvn	r4, #0
   144a0:	b	14484 <__assert_fail@plt+0x357c>
   144a4:	push	{r4, lr}
   144a8:	mov	r0, #14
   144ac:	bl	10e9c <nl_langinfo@plt>
   144b0:	ldr	r3, [pc, #24]	; 144d0 <__assert_fail@plt+0x35c8>
   144b4:	cmp	r0, #0
   144b8:	moveq	r0, r3
   144bc:	ldr	r3, [pc, #16]	; 144d4 <__assert_fail@plt+0x35cc>
   144c0:	ldrb	r2, [r0]
   144c4:	cmp	r2, #0
   144c8:	moveq	r0, r3
   144cc:	pop	{r4, pc}
   144d0:	andeq	r5, r1, pc, rrx
   144d4:	ldrdeq	r5, [r1], -ip
   144d8:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   144dc:	subs	r5, r0, #0
   144e0:	addeq	r5, sp, #4
   144e4:	mov	r0, r5
   144e8:	mov	r7, r2
   144ec:	mov	r6, r1
   144f0:	bl	10dac <mbrtowc@plt>
   144f4:	cmp	r7, #0
   144f8:	cmnne	r0, #3
   144fc:	mov	r4, r0
   14500:	bls	1451c <__assert_fail@plt+0x3614>
   14504:	mov	r0, #0
   14508:	bl	14574 <__assert_fail@plt+0x366c>
   1450c:	cmp	r0, #0
   14510:	moveq	r4, #1
   14514:	ldrbeq	r3, [r6]
   14518:	streq	r3, [r5]
   1451c:	mov	r0, r4
   14520:	add	sp, sp, #12
   14524:	pop	{r4, r5, r6, r7, pc}
   14528:	push	{r4, r5, r6, lr}
   1452c:	subs	r4, r2, #0
   14530:	mov	r6, r0
   14534:	mov	r5, r1
   14538:	beq	14550 <__assert_fail@plt+0x3648>
   1453c:	mov	r1, r4
   14540:	mvn	r0, #0
   14544:	bl	14654 <__assert_fail@plt+0x374c>
   14548:	cmp	r0, r5
   1454c:	bcc	14560 <__assert_fail@plt+0x3658>
   14550:	mul	r1, r5, r4
   14554:	mov	r0, r6
   14558:	pop	{r4, r5, r6, lr}
   1455c:	b	143d8 <__assert_fail@plt+0x34d0>
   14560:	bl	10e24 <__errno_location@plt>
   14564:	mov	r3, #12
   14568:	str	r3, [r0]
   1456c:	mov	r0, #0
   14570:	pop	{r4, r5, r6, pc}
   14574:	push	{lr}		; (str lr, [sp, #-4]!)
   14578:	sub	sp, sp, #268	; 0x10c
   1457c:	ldr	r2, [pc, #64]	; 145c4 <__assert_fail@plt+0x36bc>
   14580:	add	r1, sp, #4
   14584:	bl	145d0 <__assert_fail@plt+0x36c8>
   14588:	cmp	r0, #0
   1458c:	movne	r0, #0
   14590:	bne	145bc <__assert_fail@plt+0x36b4>
   14594:	ldr	r1, [pc, #44]	; 145c8 <__assert_fail@plt+0x36c0>
   14598:	add	r0, sp, #4
   1459c:	bl	10cc8 <strcmp@plt>
   145a0:	cmp	r0, #0
   145a4:	beq	145bc <__assert_fail@plt+0x36b4>
   145a8:	ldr	r1, [pc, #28]	; 145cc <__assert_fail@plt+0x36c4>
   145ac:	add	r0, sp, #4
   145b0:	bl	10cc8 <strcmp@plt>
   145b4:	adds	r0, r0, #0
   145b8:	movne	r0, #1
   145bc:	add	sp, sp, #268	; 0x10c
   145c0:	pop	{pc}		; (ldr pc, [sp], #4)
   145c4:	andeq	r0, r0, r1, lsl #2
   145c8:	andeq	r5, r1, r2, ror #17
   145cc:	andeq	r5, r1, r4, ror #17
   145d0:	push	{r4, r5, r6, lr}
   145d4:	mov	r5, r1
   145d8:	mov	r1, #0
   145dc:	mov	r4, r2
   145e0:	bl	10e84 <setlocale@plt>
   145e4:	subs	r6, r0, #0
   145e8:	bne	145fc <__assert_fail@plt+0x36f4>
   145ec:	cmp	r4, #0
   145f0:	strbne	r6, [r5]
   145f4:	mov	r0, #22
   145f8:	pop	{r4, r5, r6, pc}
   145fc:	bl	10e18 <strlen@plt>
   14600:	cmp	r4, r0
   14604:	bls	14620 <__assert_fail@plt+0x3718>
   14608:	add	r2, r0, #1
   1460c:	mov	r1, r6
   14610:	mov	r0, r5
   14614:	bl	10d04 <memcpy@plt>
   14618:	mov	r0, #0
   1461c:	pop	{r4, r5, r6, pc}
   14620:	cmp	r4, #0
   14624:	beq	14644 <__assert_fail@plt+0x373c>
   14628:	sub	r4, r4, #1
   1462c:	mov	r2, r4
   14630:	mov	r1, r6
   14634:	mov	r0, r5
   14638:	bl	10d04 <memcpy@plt>
   1463c:	mov	r3, #0
   14640:	strb	r3, [r5, r4]
   14644:	mov	r0, #34	; 0x22
   14648:	pop	{r4, r5, r6, pc}
   1464c:	mov	r1, #0
   14650:	b	10e84 <setlocale@plt>
   14654:	subs	r2, r1, #1
   14658:	bxeq	lr
   1465c:	bcc	14834 <__assert_fail@plt+0x392c>
   14660:	cmp	r0, r1
   14664:	bls	14818 <__assert_fail@plt+0x3910>
   14668:	tst	r1, r2
   1466c:	beq	14824 <__assert_fail@plt+0x391c>
   14670:	clz	r3, r0
   14674:	clz	r2, r1
   14678:	sub	r3, r2, r3
   1467c:	rsbs	r3, r3, #31
   14680:	addne	r3, r3, r3, lsl #1
   14684:	mov	r2, #0
   14688:	addne	pc, pc, r3, lsl #2
   1468c:	nop			; (mov r0, r0)
   14690:	cmp	r0, r1, lsl #31
   14694:	adc	r2, r2, r2
   14698:	subcs	r0, r0, r1, lsl #31
   1469c:	cmp	r0, r1, lsl #30
   146a0:	adc	r2, r2, r2
   146a4:	subcs	r0, r0, r1, lsl #30
   146a8:	cmp	r0, r1, lsl #29
   146ac:	adc	r2, r2, r2
   146b0:	subcs	r0, r0, r1, lsl #29
   146b4:	cmp	r0, r1, lsl #28
   146b8:	adc	r2, r2, r2
   146bc:	subcs	r0, r0, r1, lsl #28
   146c0:	cmp	r0, r1, lsl #27
   146c4:	adc	r2, r2, r2
   146c8:	subcs	r0, r0, r1, lsl #27
   146cc:	cmp	r0, r1, lsl #26
   146d0:	adc	r2, r2, r2
   146d4:	subcs	r0, r0, r1, lsl #26
   146d8:	cmp	r0, r1, lsl #25
   146dc:	adc	r2, r2, r2
   146e0:	subcs	r0, r0, r1, lsl #25
   146e4:	cmp	r0, r1, lsl #24
   146e8:	adc	r2, r2, r2
   146ec:	subcs	r0, r0, r1, lsl #24
   146f0:	cmp	r0, r1, lsl #23
   146f4:	adc	r2, r2, r2
   146f8:	subcs	r0, r0, r1, lsl #23
   146fc:	cmp	r0, r1, lsl #22
   14700:	adc	r2, r2, r2
   14704:	subcs	r0, r0, r1, lsl #22
   14708:	cmp	r0, r1, lsl #21
   1470c:	adc	r2, r2, r2
   14710:	subcs	r0, r0, r1, lsl #21
   14714:	cmp	r0, r1, lsl #20
   14718:	adc	r2, r2, r2
   1471c:	subcs	r0, r0, r1, lsl #20
   14720:	cmp	r0, r1, lsl #19
   14724:	adc	r2, r2, r2
   14728:	subcs	r0, r0, r1, lsl #19
   1472c:	cmp	r0, r1, lsl #18
   14730:	adc	r2, r2, r2
   14734:	subcs	r0, r0, r1, lsl #18
   14738:	cmp	r0, r1, lsl #17
   1473c:	adc	r2, r2, r2
   14740:	subcs	r0, r0, r1, lsl #17
   14744:	cmp	r0, r1, lsl #16
   14748:	adc	r2, r2, r2
   1474c:	subcs	r0, r0, r1, lsl #16
   14750:	cmp	r0, r1, lsl #15
   14754:	adc	r2, r2, r2
   14758:	subcs	r0, r0, r1, lsl #15
   1475c:	cmp	r0, r1, lsl #14
   14760:	adc	r2, r2, r2
   14764:	subcs	r0, r0, r1, lsl #14
   14768:	cmp	r0, r1, lsl #13
   1476c:	adc	r2, r2, r2
   14770:	subcs	r0, r0, r1, lsl #13
   14774:	cmp	r0, r1, lsl #12
   14778:	adc	r2, r2, r2
   1477c:	subcs	r0, r0, r1, lsl #12
   14780:	cmp	r0, r1, lsl #11
   14784:	adc	r2, r2, r2
   14788:	subcs	r0, r0, r1, lsl #11
   1478c:	cmp	r0, r1, lsl #10
   14790:	adc	r2, r2, r2
   14794:	subcs	r0, r0, r1, lsl #10
   14798:	cmp	r0, r1, lsl #9
   1479c:	adc	r2, r2, r2
   147a0:	subcs	r0, r0, r1, lsl #9
   147a4:	cmp	r0, r1, lsl #8
   147a8:	adc	r2, r2, r2
   147ac:	subcs	r0, r0, r1, lsl #8
   147b0:	cmp	r0, r1, lsl #7
   147b4:	adc	r2, r2, r2
   147b8:	subcs	r0, r0, r1, lsl #7
   147bc:	cmp	r0, r1, lsl #6
   147c0:	adc	r2, r2, r2
   147c4:	subcs	r0, r0, r1, lsl #6
   147c8:	cmp	r0, r1, lsl #5
   147cc:	adc	r2, r2, r2
   147d0:	subcs	r0, r0, r1, lsl #5
   147d4:	cmp	r0, r1, lsl #4
   147d8:	adc	r2, r2, r2
   147dc:	subcs	r0, r0, r1, lsl #4
   147e0:	cmp	r0, r1, lsl #3
   147e4:	adc	r2, r2, r2
   147e8:	subcs	r0, r0, r1, lsl #3
   147ec:	cmp	r0, r1, lsl #2
   147f0:	adc	r2, r2, r2
   147f4:	subcs	r0, r0, r1, lsl #2
   147f8:	cmp	r0, r1, lsl #1
   147fc:	adc	r2, r2, r2
   14800:	subcs	r0, r0, r1, lsl #1
   14804:	cmp	r0, r1
   14808:	adc	r2, r2, r2
   1480c:	subcs	r0, r0, r1
   14810:	mov	r0, r2
   14814:	bx	lr
   14818:	moveq	r0, #1
   1481c:	movne	r0, #0
   14820:	bx	lr
   14824:	clz	r2, r1
   14828:	rsb	r2, r2, #31
   1482c:	lsr	r0, r0, r2
   14830:	bx	lr
   14834:	cmp	r0, #0
   14838:	mvnne	r0, #0
   1483c:	b	14adc <__assert_fail@plt+0x3bd4>
   14840:	cmp	r1, #0
   14844:	beq	14834 <__assert_fail@plt+0x392c>
   14848:	push	{r0, r1, lr}
   1484c:	bl	14654 <__assert_fail@plt+0x374c>
   14850:	pop	{r1, r2, lr}
   14854:	mul	r3, r2, r0
   14858:	sub	r1, r1, r3
   1485c:	bx	lr
   14860:	cmp	r1, #0
   14864:	beq	14a70 <__assert_fail@plt+0x3b68>
   14868:	eor	ip, r0, r1
   1486c:	rsbmi	r1, r1, #0
   14870:	subs	r2, r1, #1
   14874:	beq	14a3c <__assert_fail@plt+0x3b34>
   14878:	movs	r3, r0
   1487c:	rsbmi	r3, r0, #0
   14880:	cmp	r3, r1
   14884:	bls	14a48 <__assert_fail@plt+0x3b40>
   14888:	tst	r1, r2
   1488c:	beq	14a58 <__assert_fail@plt+0x3b50>
   14890:	clz	r2, r3
   14894:	clz	r0, r1
   14898:	sub	r2, r0, r2
   1489c:	rsbs	r2, r2, #31
   148a0:	addne	r2, r2, r2, lsl #1
   148a4:	mov	r0, #0
   148a8:	addne	pc, pc, r2, lsl #2
   148ac:	nop			; (mov r0, r0)
   148b0:	cmp	r3, r1, lsl #31
   148b4:	adc	r0, r0, r0
   148b8:	subcs	r3, r3, r1, lsl #31
   148bc:	cmp	r3, r1, lsl #30
   148c0:	adc	r0, r0, r0
   148c4:	subcs	r3, r3, r1, lsl #30
   148c8:	cmp	r3, r1, lsl #29
   148cc:	adc	r0, r0, r0
   148d0:	subcs	r3, r3, r1, lsl #29
   148d4:	cmp	r3, r1, lsl #28
   148d8:	adc	r0, r0, r0
   148dc:	subcs	r3, r3, r1, lsl #28
   148e0:	cmp	r3, r1, lsl #27
   148e4:	adc	r0, r0, r0
   148e8:	subcs	r3, r3, r1, lsl #27
   148ec:	cmp	r3, r1, lsl #26
   148f0:	adc	r0, r0, r0
   148f4:	subcs	r3, r3, r1, lsl #26
   148f8:	cmp	r3, r1, lsl #25
   148fc:	adc	r0, r0, r0
   14900:	subcs	r3, r3, r1, lsl #25
   14904:	cmp	r3, r1, lsl #24
   14908:	adc	r0, r0, r0
   1490c:	subcs	r3, r3, r1, lsl #24
   14910:	cmp	r3, r1, lsl #23
   14914:	adc	r0, r0, r0
   14918:	subcs	r3, r3, r1, lsl #23
   1491c:	cmp	r3, r1, lsl #22
   14920:	adc	r0, r0, r0
   14924:	subcs	r3, r3, r1, lsl #22
   14928:	cmp	r3, r1, lsl #21
   1492c:	adc	r0, r0, r0
   14930:	subcs	r3, r3, r1, lsl #21
   14934:	cmp	r3, r1, lsl #20
   14938:	adc	r0, r0, r0
   1493c:	subcs	r3, r3, r1, lsl #20
   14940:	cmp	r3, r1, lsl #19
   14944:	adc	r0, r0, r0
   14948:	subcs	r3, r3, r1, lsl #19
   1494c:	cmp	r3, r1, lsl #18
   14950:	adc	r0, r0, r0
   14954:	subcs	r3, r3, r1, lsl #18
   14958:	cmp	r3, r1, lsl #17
   1495c:	adc	r0, r0, r0
   14960:	subcs	r3, r3, r1, lsl #17
   14964:	cmp	r3, r1, lsl #16
   14968:	adc	r0, r0, r0
   1496c:	subcs	r3, r3, r1, lsl #16
   14970:	cmp	r3, r1, lsl #15
   14974:	adc	r0, r0, r0
   14978:	subcs	r3, r3, r1, lsl #15
   1497c:	cmp	r3, r1, lsl #14
   14980:	adc	r0, r0, r0
   14984:	subcs	r3, r3, r1, lsl #14
   14988:	cmp	r3, r1, lsl #13
   1498c:	adc	r0, r0, r0
   14990:	subcs	r3, r3, r1, lsl #13
   14994:	cmp	r3, r1, lsl #12
   14998:	adc	r0, r0, r0
   1499c:	subcs	r3, r3, r1, lsl #12
   149a0:	cmp	r3, r1, lsl #11
   149a4:	adc	r0, r0, r0
   149a8:	subcs	r3, r3, r1, lsl #11
   149ac:	cmp	r3, r1, lsl #10
   149b0:	adc	r0, r0, r0
   149b4:	subcs	r3, r3, r1, lsl #10
   149b8:	cmp	r3, r1, lsl #9
   149bc:	adc	r0, r0, r0
   149c0:	subcs	r3, r3, r1, lsl #9
   149c4:	cmp	r3, r1, lsl #8
   149c8:	adc	r0, r0, r0
   149cc:	subcs	r3, r3, r1, lsl #8
   149d0:	cmp	r3, r1, lsl #7
   149d4:	adc	r0, r0, r0
   149d8:	subcs	r3, r3, r1, lsl #7
   149dc:	cmp	r3, r1, lsl #6
   149e0:	adc	r0, r0, r0
   149e4:	subcs	r3, r3, r1, lsl #6
   149e8:	cmp	r3, r1, lsl #5
   149ec:	adc	r0, r0, r0
   149f0:	subcs	r3, r3, r1, lsl #5
   149f4:	cmp	r3, r1, lsl #4
   149f8:	adc	r0, r0, r0
   149fc:	subcs	r3, r3, r1, lsl #4
   14a00:	cmp	r3, r1, lsl #3
   14a04:	adc	r0, r0, r0
   14a08:	subcs	r3, r3, r1, lsl #3
   14a0c:	cmp	r3, r1, lsl #2
   14a10:	adc	r0, r0, r0
   14a14:	subcs	r3, r3, r1, lsl #2
   14a18:	cmp	r3, r1, lsl #1
   14a1c:	adc	r0, r0, r0
   14a20:	subcs	r3, r3, r1, lsl #1
   14a24:	cmp	r3, r1
   14a28:	adc	r0, r0, r0
   14a2c:	subcs	r3, r3, r1
   14a30:	cmp	ip, #0
   14a34:	rsbmi	r0, r0, #0
   14a38:	bx	lr
   14a3c:	teq	ip, r0
   14a40:	rsbmi	r0, r0, #0
   14a44:	bx	lr
   14a48:	movcc	r0, #0
   14a4c:	asreq	r0, ip, #31
   14a50:	orreq	r0, r0, #1
   14a54:	bx	lr
   14a58:	clz	r2, r1
   14a5c:	rsb	r2, r2, #31
   14a60:	cmp	ip, #0
   14a64:	lsr	r0, r3, r2
   14a68:	rsbmi	r0, r0, #0
   14a6c:	bx	lr
   14a70:	cmp	r0, #0
   14a74:	mvngt	r0, #-2147483648	; 0x80000000
   14a78:	movlt	r0, #-2147483648	; 0x80000000
   14a7c:	b	14adc <__assert_fail@plt+0x3bd4>
   14a80:	cmp	r1, #0
   14a84:	beq	14a70 <__assert_fail@plt+0x3b68>
   14a88:	push	{r0, r1, lr}
   14a8c:	bl	14868 <__assert_fail@plt+0x3960>
   14a90:	pop	{r1, r2, lr}
   14a94:	mul	r3, r2, r0
   14a98:	sub	r1, r1, r3
   14a9c:	bx	lr
   14aa0:	cmp	r3, #0
   14aa4:	cmpeq	r2, #0
   14aa8:	bne	14ac0 <__assert_fail@plt+0x3bb8>
   14aac:	cmp	r1, #0
   14ab0:	cmpeq	r0, #0
   14ab4:	mvnne	r1, #0
   14ab8:	mvnne	r0, #0
   14abc:	b	14adc <__assert_fail@plt+0x3bd4>
   14ac0:	sub	sp, sp, #8
   14ac4:	push	{sp, lr}
   14ac8:	bl	14aec <__assert_fail@plt+0x3be4>
   14acc:	ldr	lr, [sp, #4]
   14ad0:	add	sp, sp, #8
   14ad4:	pop	{r2, r3}
   14ad8:	bx	lr
   14adc:	push	{r1, lr}
   14ae0:	mov	r0, #8
   14ae4:	bl	10cbc <raise@plt>
   14ae8:	pop	{r1, pc}
   14aec:	cmp	r1, r3
   14af0:	push	{r4, r5, r6, r7, r8, r9, lr}
   14af4:	cmpeq	r0, r2
   14af8:	mov	r4, r0
   14afc:	mov	r5, r1
   14b00:	ldr	r9, [sp, #28]
   14b04:	movcc	r0, #0
   14b08:	movcc	r1, #0
   14b0c:	bcc	14c04 <__assert_fail@plt+0x3cfc>
   14b10:	cmp	r3, #0
   14b14:	clzeq	ip, r2
   14b18:	clzne	ip, r3
   14b1c:	addeq	ip, ip, #32
   14b20:	cmp	r5, #0
   14b24:	clzeq	r1, r4
   14b28:	addeq	r1, r1, #32
   14b2c:	clzne	r1, r5
   14b30:	sub	ip, ip, r1
   14b34:	sub	lr, ip, #32
   14b38:	lsl	r7, r3, ip
   14b3c:	rsb	r8, ip, #32
   14b40:	orr	r7, r7, r2, lsl lr
   14b44:	orr	r7, r7, r2, lsr r8
   14b48:	lsl	r6, r2, ip
   14b4c:	cmp	r5, r7
   14b50:	cmpeq	r4, r6
   14b54:	movcc	r0, #0
   14b58:	movcc	r1, #0
   14b5c:	bcc	14b78 <__assert_fail@plt+0x3c70>
   14b60:	mov	r3, #1
   14b64:	subs	r4, r4, r6
   14b68:	lsl	r1, r3, lr
   14b6c:	lsl	r0, r3, ip
   14b70:	orr	r1, r1, r3, lsr r8
   14b74:	sbc	r5, r5, r7
   14b78:	cmp	ip, #0
   14b7c:	beq	14c04 <__assert_fail@plt+0x3cfc>
   14b80:	lsrs	r3, r7, #1
   14b84:	rrx	r2, r6
   14b88:	mov	r6, ip
   14b8c:	b	14bb0 <__assert_fail@plt+0x3ca8>
   14b90:	subs	r4, r4, r2
   14b94:	sbc	r5, r5, r3
   14b98:	adds	r4, r4, r4
   14b9c:	adc	r5, r5, r5
   14ba0:	adds	r4, r4, #1
   14ba4:	adc	r5, r5, #0
   14ba8:	subs	r6, r6, #1
   14bac:	beq	14bcc <__assert_fail@plt+0x3cc4>
   14bb0:	cmp	r5, r3
   14bb4:	cmpeq	r4, r2
   14bb8:	bcs	14b90 <__assert_fail@plt+0x3c88>
   14bbc:	adds	r4, r4, r4
   14bc0:	adc	r5, r5, r5
   14bc4:	subs	r6, r6, #1
   14bc8:	bne	14bb0 <__assert_fail@plt+0x3ca8>
   14bcc:	lsr	r6, r4, ip
   14bd0:	lsr	r7, r5, ip
   14bd4:	orr	r6, r6, r5, lsl r8
   14bd8:	adds	r2, r0, r4
   14bdc:	orr	r6, r6, r5, lsr lr
   14be0:	adc	r3, r1, r5
   14be4:	lsl	r1, r7, ip
   14be8:	orr	r1, r1, r6, lsl lr
   14bec:	lsl	r0, r6, ip
   14bf0:	orr	r1, r1, r6, lsr r8
   14bf4:	subs	r0, r2, r0
   14bf8:	mov	r4, r6
   14bfc:	mov	r5, r7
   14c00:	sbc	r1, r3, r1
   14c04:	cmp	r9, #0
   14c08:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   14c0c:	strd	r4, [r9]
   14c10:	pop	{r4, r5, r6, r7, r8, r9, pc}
   14c14:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14c18:	mov	r7, r0
   14c1c:	ldr	r6, [pc, #72]	; 14c6c <__assert_fail@plt+0x3d64>
   14c20:	ldr	r5, [pc, #72]	; 14c70 <__assert_fail@plt+0x3d68>
   14c24:	add	r6, pc, r6
   14c28:	add	r5, pc, r5
   14c2c:	sub	r6, r6, r5
   14c30:	mov	r8, r1
   14c34:	mov	r9, r2
   14c38:	bl	10c84 <calloc@plt-0x20>
   14c3c:	asrs	r6, r6, #2
   14c40:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   14c44:	mov	r4, #0
   14c48:	add	r4, r4, #1
   14c4c:	ldr	r3, [r5], #4
   14c50:	mov	r2, r9
   14c54:	mov	r1, r8
   14c58:	mov	r0, r7
   14c5c:	blx	r3
   14c60:	cmp	r6, r4
   14c64:	bne	14c48 <__assert_fail@plt+0x3d40>
   14c68:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14c6c:	andeq	r1, r1, r4, ror #5
   14c70:	ldrdeq	r1, [r1], -ip
   14c74:	bx	lr
   14c78:	ldr	r3, [pc, #12]	; 14c8c <__assert_fail@plt+0x3d84>
   14c7c:	mov	r1, #0
   14c80:	add	r3, pc, r3
   14c84:	ldr	r2, [r3]
   14c88:	b	10e30 <__cxa_atexit@plt>
   14c8c:	andeq	r1, r1, ip, asr r4

Disassembly of section .fini:

00014c90 <.fini>:
   14c90:	push	{r3, lr}
   14c94:	pop	{r3, pc}
