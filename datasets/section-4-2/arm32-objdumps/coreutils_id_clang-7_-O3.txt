
../repos/coreutils/src/id:     file format elf32-littlearm


Disassembly of section .init:

00011084 <.init>:
   11084:	push	{r3, lr}
   11088:	bl	113bc <__assert_fail@plt+0x48>
   1108c:	pop	{r3, pc}

Disassembly of section .plt:

00011090 <calloc@plt-0x14>:
   11090:	push	{lr}		; (str lr, [sp, #-4]!)
   11094:	ldr	lr, [pc, #4]	; 110a0 <calloc@plt-0x4>
   11098:	add	lr, pc, lr
   1109c:	ldr	pc, [lr, #8]!
   110a0:	andeq	r6, r1, r0, ror #30

000110a4 <calloc@plt>:
   110a4:	add	ip, pc, #0, 12
   110a8:	add	ip, ip, #90112	; 0x16000
   110ac:	ldr	pc, [ip, #3936]!	; 0xf60

000110b0 <endgrent@plt>:
   110b0:	add	ip, pc, #0, 12
   110b4:	add	ip, ip, #90112	; 0x16000
   110b8:	ldr	pc, [ip, #3928]!	; 0xf58

000110bc <fputs_unlocked@plt>:
   110bc:	add	ip, pc, #0, 12
   110c0:	add	ip, ip, #90112	; 0x16000
   110c4:	ldr	pc, [ip, #3920]!	; 0xf50

000110c8 <raise@plt>:
   110c8:	add	ip, pc, #0, 12
   110cc:	add	ip, ip, #90112	; 0x16000
   110d0:	ldr	pc, [ip, #3912]!	; 0xf48

000110d4 <getpwnam@plt>:
   110d4:	add	ip, pc, #0, 12
   110d8:	add	ip, ip, #90112	; 0x16000
   110dc:	ldr	pc, [ip, #3904]!	; 0xf40

000110e0 <is_selinux_enabled@plt>:
   110e0:	add	ip, pc, #0, 12
   110e4:	add	ip, ip, #90112	; 0x16000
   110e8:	ldr	pc, [ip, #3896]!	; 0xf38

000110ec <strcmp@plt>:
   110ec:	add	ip, pc, #0, 12
   110f0:	add	ip, ip, #90112	; 0x16000
   110f4:	ldr	pc, [ip, #3888]!	; 0xf30

000110f8 <getpwuid@plt>:
   110f8:	add	ip, pc, #0, 12
   110fc:	add	ip, ip, #90112	; 0x16000
   11100:	ldr	pc, [ip, #3880]!	; 0xf28

00011104 <fflush@plt>:
   11104:	add	ip, pc, #0, 12
   11108:	add	ip, ip, #90112	; 0x16000
   1110c:	ldr	pc, [ip, #3872]!	; 0xf20

00011110 <getuid@plt>:
   11110:	add	ip, pc, #0, 12
   11114:	add	ip, ip, #90112	; 0x16000
   11118:	ldr	pc, [ip, #3864]!	; 0xf18

0001111c <free@plt>:
   1111c:	add	ip, pc, #0, 12
   11120:	add	ip, ip, #90112	; 0x16000
   11124:	ldr	pc, [ip, #3856]!	; 0xf10

00011128 <_exit@plt>:
   11128:	add	ip, pc, #0, 12
   1112c:	add	ip, ip, #90112	; 0x16000
   11130:	ldr	pc, [ip, #3848]!	; 0xf08

00011134 <memcpy@plt>:
   11134:	add	ip, pc, #0, 12
   11138:	add	ip, ip, #90112	; 0x16000
   1113c:	ldr	pc, [ip, #3840]!	; 0xf00

00011140 <mbsinit@plt>:
   11140:	add	ip, pc, #0, 12
   11144:	add	ip, ip, #90112	; 0x16000
   11148:	ldr	pc, [ip, #3832]!	; 0xef8

0001114c <memcmp@plt>:
   1114c:	add	ip, pc, #0, 12
   11150:	add	ip, ip, #90112	; 0x16000
   11154:	ldr	pc, [ip, #3824]!	; 0xef0

00011158 <dcgettext@plt>:
   11158:	add	ip, pc, #0, 12
   1115c:	add	ip, ip, #90112	; 0x16000
   11160:	ldr	pc, [ip, #3816]!	; 0xee8

00011164 <realloc@plt>:
   11164:	add	ip, pc, #0, 12
   11168:	add	ip, ip, #90112	; 0x16000
   1116c:	ldr	pc, [ip, #3808]!	; 0xee0

00011170 <textdomain@plt>:
   11170:	add	ip, pc, #0, 12
   11174:	add	ip, ip, #90112	; 0x16000
   11178:	ldr	pc, [ip, #3800]!	; 0xed8

0001117c <geteuid@plt>:
   1117c:	add	ip, pc, #0, 12
   11180:	add	ip, ip, #90112	; 0x16000
   11184:	ldr	pc, [ip, #3792]!	; 0xed0

00011188 <iswprint@plt>:
   11188:	add	ip, pc, #0, 12
   1118c:	add	ip, ip, #90112	; 0x16000
   11190:	ldr	pc, [ip, #3784]!	; 0xec8

00011194 <getegid@plt>:
   11194:	add	ip, pc, #0, 12
   11198:	add	ip, ip, #90112	; 0x16000
   1119c:	ldr	pc, [ip, #3776]!	; 0xec0

000111a0 <fwrite@plt>:
   111a0:	add	ip, pc, #0, 12
   111a4:	add	ip, ip, #90112	; 0x16000
   111a8:	ldr	pc, [ip, #3768]!	; 0xeb8

000111ac <lseek64@plt>:
   111ac:	add	ip, pc, #0, 12
   111b0:	add	ip, ip, #90112	; 0x16000
   111b4:	ldr	pc, [ip, #3760]!	; 0xeb0

000111b8 <__ctype_get_mb_cur_max@plt>:
   111b8:	add	ip, pc, #0, 12
   111bc:	add	ip, ip, #90112	; 0x16000
   111c0:	ldr	pc, [ip, #3752]!	; 0xea8

000111c4 <getcon@plt>:
   111c4:	add	ip, pc, #0, 12
   111c8:	add	ip, ip, #90112	; 0x16000
   111cc:	ldr	pc, [ip, #3744]!	; 0xea0

000111d0 <__fpending@plt>:
   111d0:	add	ip, pc, #0, 12
   111d4:	add	ip, ip, #90112	; 0x16000
   111d8:	ldr	pc, [ip, #3736]!	; 0xe98

000111dc <mbrtowc@plt>:
   111dc:	add	ip, pc, #0, 12
   111e0:	add	ip, ip, #90112	; 0x16000
   111e4:	ldr	pc, [ip, #3728]!	; 0xe90

000111e8 <error@plt>:
   111e8:	add	ip, pc, #0, 12
   111ec:	add	ip, ip, #90112	; 0x16000
   111f0:	ldr	pc, [ip, #3720]!	; 0xe88

000111f4 <getenv@plt>:
   111f4:	add	ip, pc, #0, 12
   111f8:	add	ip, ip, #90112	; 0x16000
   111fc:	ldr	pc, [ip, #3712]!	; 0xe80

00011200 <malloc@plt>:
   11200:	add	ip, pc, #0, 12
   11204:	add	ip, ip, #90112	; 0x16000
   11208:	ldr	pc, [ip, #3704]!	; 0xe78

0001120c <__libc_start_main@plt>:
   1120c:	add	ip, pc, #0, 12
   11210:	add	ip, ip, #90112	; 0x16000
   11214:	ldr	pc, [ip, #3696]!	; 0xe70

00011218 <__freading@plt>:
   11218:	add	ip, pc, #0, 12
   1121c:	add	ip, ip, #90112	; 0x16000
   11220:	ldr	pc, [ip, #3688]!	; 0xe68

00011224 <__gmon_start__@plt>:
   11224:	add	ip, pc, #0, 12
   11228:	add	ip, ip, #90112	; 0x16000
   1122c:	ldr	pc, [ip, #3680]!	; 0xe60

00011230 <getopt_long@plt>:
   11230:	add	ip, pc, #0, 12
   11234:	add	ip, ip, #90112	; 0x16000
   11238:	ldr	pc, [ip, #3672]!	; 0xe58

0001123c <__ctype_b_loc@plt>:
   1123c:	add	ip, pc, #0, 12
   11240:	add	ip, ip, #90112	; 0x16000
   11244:	ldr	pc, [ip, #3664]!	; 0xe50

00011248 <exit@plt>:
   11248:	add	ip, pc, #0, 12
   1124c:	add	ip, ip, #90112	; 0x16000
   11250:	ldr	pc, [ip, #3656]!	; 0xe48

00011254 <strtoul@plt>:
   11254:	add	ip, pc, #0, 12
   11258:	add	ip, ip, #90112	; 0x16000
   1125c:	ldr	pc, [ip, #3648]!	; 0xe40

00011260 <strlen@plt>:
   11260:	add	ip, pc, #0, 12
   11264:	add	ip, ip, #90112	; 0x16000
   11268:	ldr	pc, [ip, #3640]!	; 0xe38

0001126c <strchr@plt>:
   1126c:	add	ip, pc, #0, 12
   11270:	add	ip, ip, #90112	; 0x16000
   11274:	ldr	pc, [ip, #3632]!	; 0xe30

00011278 <__errno_location@plt>:
   11278:	add	ip, pc, #0, 12
   1127c:	add	ip, ip, #90112	; 0x16000
   11280:	ldr	pc, [ip, #3624]!	; 0xe28

00011284 <__cxa_atexit@plt>:
   11284:	add	ip, pc, #0, 12
   11288:	add	ip, ip, #90112	; 0x16000
   1128c:	ldr	pc, [ip, #3616]!	; 0xe20

00011290 <getgid@plt>:
   11290:	add	ip, pc, #0, 12
   11294:	add	ip, ip, #90112	; 0x16000
   11298:	ldr	pc, [ip, #3608]!	; 0xe18

0001129c <getgrouplist@plt>:
   1129c:	add	ip, pc, #0, 12
   112a0:	add	ip, ip, #90112	; 0x16000
   112a4:	ldr	pc, [ip, #3600]!	; 0xe10

000112a8 <memset@plt>:
   112a8:	add	ip, pc, #0, 12
   112ac:	add	ip, ip, #90112	; 0x16000
   112b0:	ldr	pc, [ip, #3592]!	; 0xe08

000112b4 <__printf_chk@plt>:
   112b4:	add	ip, pc, #0, 12
   112b8:	add	ip, ip, #90112	; 0x16000
   112bc:	ldr	pc, [ip, #3584]!	; 0xe00

000112c0 <fileno@plt>:
   112c0:	add	ip, pc, #0, 12
   112c4:	add	ip, ip, #90112	; 0x16000
   112c8:	ldr	pc, [ip, #3576]!	; 0xdf8

000112cc <__fprintf_chk@plt>:
   112cc:	add	ip, pc, #0, 12
   112d0:	add	ip, ip, #90112	; 0x16000
   112d4:	ldr	pc, [ip, #3568]!	; 0xdf0

000112d8 <fclose@plt>:
   112d8:	add	ip, pc, #0, 12
   112dc:	add	ip, ip, #90112	; 0x16000
   112e0:	ldr	pc, [ip, #3560]!	; 0xde8

000112e4 <fseeko64@plt>:
   112e4:	add	ip, pc, #0, 12
   112e8:	add	ip, ip, #90112	; 0x16000
   112ec:	ldr	pc, [ip, #3552]!	; 0xde0

000112f0 <__overflow@plt>:
   112f0:	add	ip, pc, #0, 12
   112f4:	add	ip, ip, #90112	; 0x16000
   112f8:	ldr	pc, [ip, #3544]!	; 0xdd8

000112fc <setlocale@plt>:
   112fc:	add	ip, pc, #0, 12
   11300:	add	ip, ip, #90112	; 0x16000
   11304:	ldr	pc, [ip, #3536]!	; 0xdd0

00011308 <endpwent@plt>:
   11308:	add	ip, pc, #0, 12
   1130c:	add	ip, ip, #90112	; 0x16000
   11310:	ldr	pc, [ip, #3528]!	; 0xdc8

00011314 <strrchr@plt>:
   11314:	add	ip, pc, #0, 12
   11318:	add	ip, ip, #90112	; 0x16000
   1131c:	ldr	pc, [ip, #3520]!	; 0xdc0

00011320 <nl_langinfo@plt>:
   11320:	add	ip, pc, #0, 12
   11324:	add	ip, ip, #90112	; 0x16000
   11328:	ldr	pc, [ip, #3512]!	; 0xdb8

0001132c <getgroups@plt>:
   1132c:	add	ip, pc, #0, 12
   11330:	add	ip, ip, #90112	; 0x16000
   11334:	ldr	pc, [ip, #3504]!	; 0xdb0

00011338 <bindtextdomain@plt>:
   11338:	add	ip, pc, #0, 12
   1133c:	add	ip, ip, #90112	; 0x16000
   11340:	ldr	pc, [ip, #3496]!	; 0xda8

00011344 <strncmp@plt>:
   11344:	add	ip, pc, #0, 12
   11348:	add	ip, ip, #90112	; 0x16000
   1134c:	ldr	pc, [ip, #3488]!	; 0xda0

00011350 <abort@plt>:
   11350:	add	ip, pc, #0, 12
   11354:	add	ip, ip, #90112	; 0x16000
   11358:	ldr	pc, [ip, #3480]!	; 0xd98

0001135c <getgrgid@plt>:
   1135c:	add	ip, pc, #0, 12
   11360:	add	ip, ip, #90112	; 0x16000
   11364:	ldr	pc, [ip, #3472]!	; 0xd90

00011368 <getgrnam@plt>:
   11368:	add	ip, pc, #0, 12
   1136c:	add	ip, ip, #90112	; 0x16000
   11370:	ldr	pc, [ip, #3464]!	; 0xd88

00011374 <__assert_fail@plt>:
   11374:	add	ip, pc, #0, 12
   11378:	add	ip, ip, #90112	; 0x16000
   1137c:	ldr	pc, [ip, #3456]!	; 0xd80

Disassembly of section .text:

00011380 <.text>:
   11380:	mov	fp, #0
   11384:	mov	lr, #0
   11388:	pop	{r1}		; (ldr r1, [sp], #4)
   1138c:	mov	r2, sp
   11390:	push	{r2}		; (str r2, [sp, #-4]!)
   11394:	push	{r0}		; (str r0, [sp, #-4]!)
   11398:	ldr	ip, [pc, #16]	; 113b0 <__assert_fail@plt+0x3c>
   1139c:	push	{ip}		; (str ip, [sp, #-4]!)
   113a0:	ldr	r0, [pc, #12]	; 113b4 <__assert_fail@plt+0x40>
   113a4:	ldr	r3, [pc, #12]	; 113b8 <__assert_fail@plt+0x44>
   113a8:	bl	1120c <__libc_start_main@plt>
   113ac:	bl	11350 <abort@plt>
   113b0:	muleq	r1, r8, ip
   113b4:	andeq	r1, r1, ip, ror #13
   113b8:	andeq	r6, r1, r8, lsr ip
   113bc:	ldr	r3, [pc, #20]	; 113d8 <__assert_fail@plt+0x64>
   113c0:	ldr	r2, [pc, #20]	; 113dc <__assert_fail@plt+0x68>
   113c4:	add	r3, pc, r3
   113c8:	ldr	r2, [r3, r2]
   113cc:	cmp	r2, #0
   113d0:	bxeq	lr
   113d4:	b	11224 <__gmon_start__@plt>
   113d8:	andeq	r6, r1, r4, lsr ip
   113dc:	andeq	r0, r0, r0, lsl #2
   113e0:	ldr	r0, [pc, #24]	; 11400 <__assert_fail@plt+0x8c>
   113e4:	ldr	r3, [pc, #24]	; 11404 <__assert_fail@plt+0x90>
   113e8:	cmp	r3, r0
   113ec:	bxeq	lr
   113f0:	ldr	r3, [pc, #16]	; 11408 <__assert_fail@plt+0x94>
   113f4:	cmp	r3, #0
   113f8:	bxeq	lr
   113fc:	bx	r3
   11400:	andeq	r8, r2, r0, ror #2
   11404:	andeq	r8, r2, r0, ror #2
   11408:	andeq	r0, r0, r0
   1140c:	ldr	r0, [pc, #36]	; 11438 <__assert_fail@plt+0xc4>
   11410:	ldr	r1, [pc, #36]	; 1143c <__assert_fail@plt+0xc8>
   11414:	sub	r1, r1, r0
   11418:	asr	r1, r1, #2
   1141c:	add	r1, r1, r1, lsr #31
   11420:	asrs	r1, r1, #1
   11424:	bxeq	lr
   11428:	ldr	r3, [pc, #16]	; 11440 <__assert_fail@plt+0xcc>
   1142c:	cmp	r3, #0
   11430:	bxeq	lr
   11434:	bx	r3
   11438:	andeq	r8, r2, r0, ror #2
   1143c:	andeq	r8, r2, r0, ror #2
   11440:	andeq	r0, r0, r0
   11444:	push	{r4, lr}
   11448:	ldr	r4, [pc, #24]	; 11468 <__assert_fail@plt+0xf4>
   1144c:	ldrb	r3, [r4]
   11450:	cmp	r3, #0
   11454:	popne	{r4, pc}
   11458:	bl	113e0 <__assert_fail@plt+0x6c>
   1145c:	mov	r3, #1
   11460:	strb	r3, [r4]
   11464:	pop	{r4, pc}
   11468:	andeq	r8, r2, r8, ror r1
   1146c:	b	1140c <__assert_fail@plt+0x98>
   11470:	push	{fp, lr}
   11474:	mov	fp, sp
   11478:	sub	sp, sp, #56	; 0x38
   1147c:	mov	r4, r0
   11480:	cmp	r0, #0
   11484:	bne	116a8 <__assert_fail@plt+0x334>
   11488:	movw	r1, #27883	; 0x6ceb
   1148c:	mov	r0, #0
   11490:	mov	r2, #5
   11494:	movt	r1, #1
   11498:	bl	11158 <dcgettext@plt>
   1149c:	mov	r1, r0
   114a0:	movw	r0, #33248	; 0x81e0
   114a4:	movt	r0, #2
   114a8:	ldr	r2, [r0]
   114ac:	mov	r0, #1
   114b0:	bl	112b4 <__printf_chk@plt>
   114b4:	movw	r1, #27916	; 0x6d0c
   114b8:	mov	r0, #0
   114bc:	mov	r2, #5
   114c0:	movt	r1, #1
   114c4:	bl	11158 <dcgettext@plt>
   114c8:	movw	r7, #33140	; 0x8174
   114cc:	movt	r7, #2
   114d0:	ldr	r1, [r7]
   114d4:	bl	110bc <fputs_unlocked@plt>
   114d8:	movw	r1, #28024	; 0x6d78
   114dc:	mov	r0, #0
   114e0:	mov	r2, #5
   114e4:	movt	r1, #1
   114e8:	bl	11158 <dcgettext@plt>
   114ec:	ldr	r1, [r7]
   114f0:	bl	110bc <fputs_unlocked@plt>
   114f4:	movw	r1, #28545	; 0x6f81
   114f8:	mov	r0, #0
   114fc:	mov	r2, #5
   11500:	movt	r1, #1
   11504:	bl	11158 <dcgettext@plt>
   11508:	ldr	r1, [r7]
   1150c:	bl	110bc <fputs_unlocked@plt>
   11510:	movw	r1, #28590	; 0x6fae
   11514:	mov	r0, #0
   11518:	mov	r2, #5
   1151c:	movt	r1, #1
   11520:	bl	11158 <dcgettext@plt>
   11524:	ldr	r1, [r7]
   11528:	bl	110bc <fputs_unlocked@plt>
   1152c:	movw	r1, #28644	; 0x6fe4
   11530:	mov	r0, #0
   11534:	mov	r2, #5
   11538:	movt	r1, #1
   1153c:	bl	11158 <dcgettext@plt>
   11540:	ldr	r1, [r7]
   11544:	bl	110bc <fputs_unlocked@plt>
   11548:	movw	r0, #29864	; 0x74a8
   1154c:	mov	r2, #48	; 0x30
   11550:	mov	r6, sp
   11554:	movw	r5, #28715	; 0x702b
   11558:	movt	r0, #1
   1155c:	movt	r5, #1
   11560:	add	r1, r0, #32
   11564:	add	r3, r0, #16
   11568:	vld1.64	{d18-d19}, [r0], r2
   1156c:	vld1.64	{d16-d17}, [r1]
   11570:	vld1.64	{d20-d21}, [r3]
   11574:	add	r1, r6, #32
   11578:	vldr	d22, [r0]
   1157c:	add	r0, r6, #16
   11580:	vst1.64	{d16-d17}, [r1]
   11584:	movw	r1, #29194	; 0x720a
   11588:	vst1.64	{d20-d21}, [r0]
   1158c:	mov	r0, r6
   11590:	vst1.64	{d18-d19}, [r0], r2
   11594:	movt	r1, #1
   11598:	vstr	d22, [r0]
   1159c:	mov	r0, r5
   115a0:	bl	110ec <strcmp@plt>
   115a4:	cmp	r0, #0
   115a8:	ldrne	r1, [r6, #8]!
   115ac:	cmpne	r1, #0
   115b0:	bne	1159c <__assert_fail@plt+0x228>
   115b4:	ldr	r6, [r6, #4]
   115b8:	movw	r1, #29289	; 0x7269
   115bc:	mov	r0, #0
   115c0:	mov	r2, #5
   115c4:	movt	r1, #1
   115c8:	bl	11158 <dcgettext@plt>
   115cc:	movw	r2, #28806	; 0x7086
   115d0:	movw	r3, #29312	; 0x7280
   115d4:	mov	r1, r0
   115d8:	mov	r0, #1
   115dc:	movt	r2, #1
   115e0:	movt	r3, #1
   115e4:	bl	112b4 <__printf_chk@plt>
   115e8:	cmp	r6, #0
   115ec:	mov	r0, #5
   115f0:	mov	r1, #0
   115f4:	moveq	r6, r5
   115f8:	bl	112fc <setlocale@plt>
   115fc:	cmp	r0, #0
   11600:	beq	11638 <__assert_fail@plt+0x2c4>
   11604:	movw	r1, #29352	; 0x72a8
   11608:	mov	r2, #3
   1160c:	movt	r1, #1
   11610:	bl	11344 <strncmp@plt>
   11614:	cmp	r0, #0
   11618:	beq	11638 <__assert_fail@plt+0x2c4>
   1161c:	movw	r1, #29356	; 0x72ac
   11620:	mov	r0, #0
   11624:	mov	r2, #5
   11628:	movt	r1, #1
   1162c:	bl	11158 <dcgettext@plt>
   11630:	ldr	r1, [r7]
   11634:	bl	110bc <fputs_unlocked@plt>
   11638:	movw	r1, #29427	; 0x72f3
   1163c:	mov	r0, #0
   11640:	mov	r2, #5
   11644:	movt	r1, #1
   11648:	bl	11158 <dcgettext@plt>
   1164c:	movw	r2, #29312	; 0x7280
   11650:	mov	r1, r0
   11654:	mov	r0, #1
   11658:	mov	r3, r5
   1165c:	movt	r2, #1
   11660:	bl	112b4 <__printf_chk@plt>
   11664:	movw	r1, #29454	; 0x730e
   11668:	mov	r0, #0
   1166c:	mov	r2, #5
   11670:	movt	r1, #1
   11674:	bl	11158 <dcgettext@plt>
   11678:	movw	r3, #28023	; 0x6d77
   1167c:	mov	r1, r0
   11680:	movw	r0, #29222	; 0x7226
   11684:	cmp	r6, r5
   11688:	mov	r2, r6
   1168c:	movt	r0, #1
   11690:	movt	r3, #1
   11694:	moveq	r3, r0
   11698:	mov	r0, #1
   1169c:	bl	112b4 <__printf_chk@plt>
   116a0:	mov	r0, r4
   116a4:	bl	11248 <exit@plt>
   116a8:	movw	r0, #33136	; 0x8170
   116ac:	movw	r1, #27844	; 0x6cc4
   116b0:	mov	r2, #5
   116b4:	movt	r0, #2
   116b8:	movt	r1, #1
   116bc:	ldr	r5, [r0]
   116c0:	mov	r0, #0
   116c4:	bl	11158 <dcgettext@plt>
   116c8:	mov	r2, r0
   116cc:	movw	r0, #33248	; 0x81e0
   116d0:	mov	r1, #1
   116d4:	movt	r0, #2
   116d8:	ldr	r3, [r0]
   116dc:	mov	r0, r5
   116e0:	bl	112cc <__fprintf_chk@plt>
   116e4:	mov	r0, r4
   116e8:	bl	11248 <exit@plt>
   116ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   116f0:	add	fp, sp, #28
   116f4:	sub	sp, sp, #36	; 0x24
   116f8:	mov	r4, r1
   116fc:	mov	r5, r0
   11700:	bl	110e0 <is_selinux_enabled@plt>
   11704:	mov	r7, r0
   11708:	ldr	r0, [r4]
   1170c:	bl	12adc <__assert_fail@plt+0x1768>
   11710:	movw	r1, #28023	; 0x6d77
   11714:	mov	r0, #6
   11718:	movt	r1, #1
   1171c:	bl	112fc <setlocale@plt>
   11720:	movw	r6, #28810	; 0x708a
   11724:	movw	r1, #28718	; 0x702e
   11728:	movt	r6, #1
   1172c:	movt	r1, #1
   11730:	mov	r0, r6
   11734:	bl	11338 <bindtextdomain@plt>
   11738:	mov	r0, r6
   1173c:	bl	11170 <textdomain@plt>
   11740:	movw	r0, #10604	; 0x296c
   11744:	movt	r0, #1
   11748:	bl	16c9c <__assert_fail@plt+0x5928>
   1174c:	mov	r9, #0
   11750:	cmp	r7, #0
   11754:	str	r7, [sp, #32]
   11758:	ble	118fc <__assert_fail@plt+0x588>
   1175c:	movw	r0, #33148	; 0x817c
   11760:	movw	r7, #28742	; 0x7046
   11764:	movw	r6, #29704	; 0x7408
   11768:	mov	sl, #1
   1176c:	movt	r0, #2
   11770:	movt	r7, #1
   11774:	movt	r6, #1
   11778:	add	r1, r0, #1
   1177c:	add	r8, r0, #6
   11780:	str	r1, [sp, #28]
   11784:	add	r1, r0, #2
   11788:	str	r1, [sp, #24]
   1178c:	add	r1, r0, #3
   11790:	str	r1, [sp, #20]
   11794:	add	r1, r0, #4
   11798:	add	r0, r0, #5
   1179c:	str	r1, [sp, #16]
   117a0:	str	r0, [sp, #12]
   117a4:	b	117ac <__assert_fail@plt+0x438>
   117a8:	strb	sl, [r0]
   117ac:	mov	r0, r5
   117b0:	mov	r1, r4
   117b4:	mov	r2, r7
   117b8:	mov	r3, r6
   117bc:	str	r9, [sp]
   117c0:	bl	11230 <getopt_long@plt>
   117c4:	cmp	r0, #70	; 0x46
   117c8:	ble	11a8c <__assert_fail@plt+0x718>
   117cc:	sub	r1, r0, #71	; 0x47
   117d0:	cmp	r1, #51	; 0x33
   117d4:	bhi	11e68 <__assert_fail@plt+0xaf4>
   117d8:	add	r2, pc, #4
   117dc:	mov	r0, r8
   117e0:	ldr	pc, [r2, r1, lsl #2]
   117e4:	andeq	r1, r1, r8, lsr #15
   117e8:	andeq	r1, r1, r8, ror #28
   117ec:	andeq	r1, r1, r8, ror #28
   117f0:	andeq	r1, r1, r8, ror #28
   117f4:	andeq	r1, r1, r8, ror #28
   117f8:	andeq	r1, r1, r8, ror #28
   117fc:	andeq	r1, r1, r8, ror #28
   11800:	andeq	r1, r1, r8, ror #28
   11804:	andeq	r1, r1, r8, ror #28
   11808:	andeq	r1, r1, r8, ror #28
   1180c:	andeq	r1, r1, r8, ror #28
   11810:	andeq	r1, r1, r8, ror #28
   11814:	andeq	r1, r1, r8, ror #28
   11818:	andeq	r1, r1, r8, ror #28
   1181c:	andeq	r1, r1, r8, ror #28
   11820:	andeq	r1, r1, r8, ror #28
   11824:	andeq	r1, r1, r8, ror #28
   11828:	andeq	r1, r1, r8, ror #28
   1182c:	andeq	r1, r1, r8, ror #28
   11830:			; <UNDEFINED> instruction: 0x000118b4
   11834:	andeq	r1, r1, r8, ror #28
   11838:	andeq	r1, r1, r8, ror #28
   1183c:	andeq	r1, r1, r8, ror #28
   11840:	andeq	r1, r1, r8, ror #28
   11844:	andeq	r1, r1, r8, ror #28
   11848:	andeq	r1, r1, r8, ror #28
   1184c:	andeq	r1, r1, ip, lsr #15
   11850:	andeq	r1, r1, r8, ror #28
   11854:	andeq	r1, r1, r8, ror #28
   11858:	andeq	r1, r1, r8, ror #28
   1185c:	andeq	r1, r1, r8, ror #28
   11860:	andeq	r1, r1, r8, ror #28
   11864:	andeq	r1, r1, ip, asr #17
   11868:	andeq	r1, r1, r8, ror #28
   1186c:	andeq	r1, r1, r8, ror #28
   11870:	andeq	r1, r1, r8, ror #28
   11874:	andeq	r1, r1, r8, ror #28
   11878:	andeq	r1, r1, r8, ror #28
   1187c:	andeq	r1, r1, r8, ror #28
   11880:	andeq	r1, r1, r0, asr #17
   11884:	andeq	r1, r1, r8, ror #28
   11888:	andeq	r1, r1, r8, ror #28
   1188c:	andeq	r1, r1, r8, ror #28
   11890:	strdeq	r1, [r1], -r0
   11894:	andeq	r1, r1, r8, ror #28
   11898:	andeq	r1, r1, r8, ror #28
   1189c:	ldrdeq	r1, [r1], -r8
   118a0:	andeq	r1, r1, r8, ror #28
   118a4:	andeq	r1, r1, r8, ror #28
   118a8:	andeq	r1, r1, r8, ror #28
   118ac:	andeq	r1, r1, r8, ror #28
   118b0:	andeq	r1, r1, r4, ror #17
   118b4:	movw	r0, #33148	; 0x817c
   118b8:	movt	r0, #2
   118bc:	b	117a8 <__assert_fail@plt+0x434>
   118c0:	ldr	r0, [sp, #24]
   118c4:	strb	sl, [r0]
   118c8:	b	117ac <__assert_fail@plt+0x438>
   118cc:	ldr	r0, [sp, #28]
   118d0:	strb	sl, [r0]
   118d4:	b	117ac <__assert_fail@plt+0x438>
   118d8:	ldr	r0, [sp, #16]
   118dc:	strb	sl, [r0]
   118e0:	b	117ac <__assert_fail@plt+0x438>
   118e4:	ldr	r0, [sp, #12]
   118e8:	strb	sl, [r0]
   118ec:	b	117ac <__assert_fail@plt+0x438>
   118f0:	ldr	r0, [sp, #20]
   118f4:	strb	sl, [r0]
   118f8:	b	117ac <__assert_fail@plt+0x438>
   118fc:	movw	r0, #33148	; 0x817c
   11900:	movw	r8, #28742	; 0x7046
   11904:	movw	r6, #29704	; 0x7408
   11908:	mov	sl, #1
   1190c:	movt	r0, #2
   11910:	movt	r8, #1
   11914:	movt	r6, #1
   11918:	add	r1, r0, #6
   1191c:	add	r7, r0, #1
   11920:	str	r1, [sp, #28]
   11924:	add	r1, r0, #2
   11928:	str	r1, [sp, #24]
   1192c:	add	r1, r0, #3
   11930:	str	r1, [sp, #20]
   11934:	add	r1, r0, #4
   11938:	add	r0, r0, #5
   1193c:	str	r1, [sp, #16]
   11940:	str	r0, [sp, #12]
   11944:	b	1194c <__assert_fail@plt+0x5d8>
   11948:	strb	sl, [r0]
   1194c:	mov	r0, r5
   11950:	mov	r1, r4
   11954:	mov	r2, r8
   11958:	mov	r3, r6
   1195c:	str	r9, [sp]
   11960:	bl	11230 <getopt_long@plt>
   11964:	cmp	r0, #70	; 0x46
   11968:	ble	11a8c <__assert_fail@plt+0x718>
   1196c:	sub	r1, r0, #71	; 0x47
   11970:	cmp	r1, #51	; 0x33
   11974:	bhi	11e68 <__assert_fail@plt+0xaf4>
   11978:	add	r2, pc, #4
   1197c:	mov	r0, r7
   11980:	ldr	pc, [r2, r1, lsl #2]
   11984:	andeq	r1, r1, r4, asr sl
   11988:	andeq	r1, r1, r8, ror #28
   1198c:	andeq	r1, r1, r8, ror #28
   11990:	andeq	r1, r1, r8, ror #28
   11994:	andeq	r1, r1, r8, ror #28
   11998:	andeq	r1, r1, r8, ror #28
   1199c:	andeq	r1, r1, r8, ror #28
   119a0:	andeq	r1, r1, r8, ror #28
   119a4:	andeq	r1, r1, r8, ror #28
   119a8:	andeq	r1, r1, r8, ror #28
   119ac:	andeq	r1, r1, r8, ror #28
   119b0:	andeq	r1, r1, r8, ror #28
   119b4:	andeq	r1, r1, r8, ror #28
   119b8:	andeq	r1, r1, r8, ror #28
   119bc:	andeq	r1, r1, r8, ror #28
   119c0:	andeq	r1, r1, r8, ror #28
   119c4:	andeq	r1, r1, r8, ror #28
   119c8:	andeq	r1, r1, r8, ror #28
   119cc:	andeq	r1, r1, r8, ror #28
   119d0:	andeq	r1, r1, r0, ror lr
   119d4:	andeq	r1, r1, r8, ror #28
   119d8:	andeq	r1, r1, r8, ror #28
   119dc:	andeq	r1, r1, r8, ror #28
   119e0:	andeq	r1, r1, r8, ror #28
   119e4:	andeq	r1, r1, r8, ror #28
   119e8:	andeq	r1, r1, r8, ror #28
   119ec:	andeq	r1, r1, ip, asr #18
   119f0:	andeq	r1, r1, r8, ror #28
   119f4:	andeq	r1, r1, r8, ror #28
   119f8:	andeq	r1, r1, r8, ror #28
   119fc:	andeq	r1, r1, r8, ror #28
   11a00:	andeq	r1, r1, r8, ror #28
   11a04:	andeq	r1, r1, r8, asr #18
   11a08:	andeq	r1, r1, r8, ror #28
   11a0c:	andeq	r1, r1, r8, ror #28
   11a10:	andeq	r1, r1, r8, ror #28
   11a14:	andeq	r1, r1, r8, ror #28
   11a18:	andeq	r1, r1, r8, ror #28
   11a1c:	andeq	r1, r1, r8, ror #28
   11a20:	andeq	r1, r1, ip, ror #20
   11a24:	andeq	r1, r1, r8, ror #28
   11a28:	andeq	r1, r1, r8, ror #28
   11a2c:	andeq	r1, r1, r8, ror #28
   11a30:	andeq	r1, r1, r0, lsl #21
   11a34:	andeq	r1, r1, r8, ror #28
   11a38:	andeq	r1, r1, r8, ror #28
   11a3c:	andeq	r1, r1, r4, ror sl
   11a40:	andeq	r1, r1, r8, ror #28
   11a44:	andeq	r1, r1, r8, ror #28
   11a48:	andeq	r1, r1, r8, ror #28
   11a4c:	andeq	r1, r1, r8, ror #28
   11a50:	andeq	r1, r1, r0, ror #20
   11a54:	ldr	r0, [sp, #28]
   11a58:	strb	sl, [r0]
   11a5c:	b	1194c <__assert_fail@plt+0x5d8>
   11a60:	ldr	r0, [sp, #12]
   11a64:	strb	sl, [r0]
   11a68:	b	1194c <__assert_fail@plt+0x5d8>
   11a6c:	ldr	r0, [sp, #24]
   11a70:	b	11948 <__assert_fail@plt+0x5d4>
   11a74:	ldr	r0, [sp, #16]
   11a78:	strb	sl, [r0]
   11a7c:	b	1194c <__assert_fail@plt+0x5d8>
   11a80:	ldr	r0, [sp, #20]
   11a84:	strb	sl, [r0]
   11a88:	b	1194c <__assert_fail@plt+0x5d8>
   11a8c:	cmn	r0, #1
   11a90:	bne	11dfc <__assert_fail@plt+0xa88>
   11a94:	movw	sl, #33128	; 0x8168
   11a98:	movw	r8, #33148	; 0x817c
   11a9c:	movt	sl, #2
   11aa0:	movt	r8, #2
   11aa4:	ldr	r0, [sl]
   11aa8:	ldrb	r2, [r8]
   11aac:	subs	ip, r5, r0
   11ab0:	cmpne	r2, #0
   11ab4:	bne	11e7c <__assert_fail@plt+0xb08>
   11ab8:	clz	r3, ip
   11abc:	ldrb	r7, [r8, #4]
   11ac0:	ldrb	r6, [r8, #6]
   11ac4:	lsr	r3, r3, #5
   11ac8:	and	r2, r3, r2
   11acc:	ldrb	r3, [r8, #1]
   11ad0:	add	r1, r3, r7
   11ad4:	add	r1, r1, r6
   11ad8:	add	r1, r1, r2
   11adc:	cmp	r1, #2
   11ae0:	bcs	11e88 <__assert_fail@plt+0xb14>
   11ae4:	orr	r1, r6, r2
   11ae8:	orr	r3, r7, r3
   11aec:	orrs	r3, r3, r1
   11af0:	bne	11b18 <__assert_fail@plt+0x7a4>
   11af4:	ldrb	r1, [r8, #3]
   11af8:	cmp	r1, #0
   11afc:	bne	11e94 <__assert_fail@plt+0xb20>
   11b00:	ldrb	r1, [r8, #2]
   11b04:	cmp	r1, #1
   11b08:	beq	11e94 <__assert_fail@plt+0xb20>
   11b0c:	ldrb	r1, [r8, #5]
   11b10:	cmp	r1, #1
   11b14:	beq	11ea0 <__assert_fail@plt+0xb2c>
   11b18:	cmp	ip, #0
   11b1c:	beq	11c34 <__assert_fail@plt+0x8c0>
   11b20:	subs	r1, ip, #1
   11b24:	movwne	r1, #1
   11b28:	cmp	r0, r5
   11b2c:	strb	r1, [r8, #7]
   11b30:	bcs	11dd4 <__assert_fail@plt+0xa60>
   11b34:	movw	r1, #33148	; 0x817c
   11b38:	mov	r8, #0
   11b3c:	movt	r1, #2
   11b40:	add	r9, r1, #12
   11b44:	b	11ba4 <__assert_fail@plt+0x830>
   11b48:	movw	r0, #33148	; 0x817c
   11b4c:	movt	r0, #2
   11b50:	ldr	r0, [r0, #12]
   11b54:	bl	110f8 <getpwuid@plt>
   11b58:	cmp	r0, #0
   11b5c:	beq	11bd0 <__assert_fail@plt+0x85c>
   11b60:	mov	r6, r0
   11b64:	ldr	r0, [r0]
   11b68:	bl	15a44 <__assert_fail@plt+0x46d0>
   11b6c:	mov	r7, r0
   11b70:	ldr	r0, [r6, #8]
   11b74:	movw	r1, #33148	; 0x817c
   11b78:	movt	r1, #2
   11b7c:	str	r0, [r1, #16]
   11b80:	str	r0, [r1, #12]
   11b84:	ldr	r0, [r6, #12]
   11b88:	str	r0, [r1, #24]
   11b8c:	str	r0, [r1, #20]
   11b90:	mov	r0, r7
   11b94:	bl	11f24 <__assert_fail@plt+0xbb0>
   11b98:	mov	r0, r7
   11b9c:	bl	12a58 <__assert_fail@plt+0x16e4>
   11ba0:	b	11c1c <__assert_fail@plt+0x8a8>
   11ba4:	ldr	r0, [r4, r0, lsl #2]
   11ba8:	ldrb	r1, [r0]
   11bac:	cmp	r1, #0
   11bb0:	beq	11bd0 <__assert_fail@plt+0x85c>
   11bb4:	mov	r1, r9
   11bb8:	mov	r2, #0
   11bbc:	mov	r3, #0
   11bc0:	str	r8, [sp]
   11bc4:	bl	14a70 <__assert_fail@plt+0x36fc>
   11bc8:	cmp	r0, #0
   11bcc:	beq	11b48 <__assert_fail@plt+0x7d4>
   11bd0:	bl	11278 <__errno_location@plt>
   11bd4:	ldr	r6, [r0]
   11bd8:	movw	r1, #29087	; 0x719f
   11bdc:	mov	r0, #0
   11be0:	mov	r2, #5
   11be4:	movt	r1, #1
   11be8:	bl	11158 <dcgettext@plt>
   11bec:	mov	r7, r0
   11bf0:	ldr	r0, [sl]
   11bf4:	ldr	r0, [r4, r0, lsl #2]
   11bf8:	bl	14a58 <__assert_fail@plt+0x36e4>
   11bfc:	mov	r3, r0
   11c00:	mov	r0, #0
   11c04:	mov	r1, r6
   11c08:	mov	r2, r7
   11c0c:	bl	111e8 <error@plt>
   11c10:	movw	r0, #33040	; 0x8110
   11c14:	movt	r0, #2
   11c18:	strb	r8, [r0]
   11c1c:	ldr	r0, [sl]
   11c20:	add	r0, r0, #1
   11c24:	cmp	r0, r5
   11c28:	str	r0, [sl]
   11c2c:	bcc	11ba4 <__assert_fail@plt+0x830>
   11c30:	b	11dd4 <__assert_fail@plt+0xa60>
   11c34:	cmp	r2, #0
   11c38:	bne	11c58 <__assert_fail@plt+0x8e4>
   11c3c:	cmp	r3, #0
   11c40:	bne	11c80 <__assert_fail@plt+0x90c>
   11c44:	movw	r0, #29045	; 0x7175
   11c48:	movt	r0, #1
   11c4c:	bl	111f4 <getenv@plt>
   11c50:	cmp	r0, #0
   11c54:	bne	11c80 <__assert_fail@plt+0x90c>
   11c58:	ldr	r0, [sp, #32]
   11c5c:	cmp	r0, #1
   11c60:	blt	11c80 <__assert_fail@plt+0x90c>
   11c64:	add	r0, r8, #8
   11c68:	bl	111c4 <getcon@plt>
   11c6c:	cmp	r0, #0
   11c70:	beq	11c80 <__assert_fail@plt+0x90c>
   11c74:	ldrb	r0, [r8]
   11c78:	cmp	r0, #1
   11c7c:	beq	11ec4 <__assert_fail@plt+0xb50>
   11c80:	ldrb	r0, [r8, #4]
   11c84:	cmp	r0, #1
   11c88:	bne	11cd0 <__assert_fail@plt+0x95c>
   11c8c:	ldrb	r0, [r8, #3]
   11c90:	cmp	r0, #0
   11c94:	bne	11d34 <__assert_fail@plt+0x9c0>
   11c98:	bl	11278 <__errno_location@plt>
   11c9c:	mov	r4, r0
   11ca0:	mov	r0, #0
   11ca4:	str	r0, [r4]
   11ca8:	bl	1117c <geteuid@plt>
   11cac:	cmn	r0, #1
   11cb0:	str	r0, [r8, #12]
   11cb4:	bne	11cf4 <__assert_fail@plt+0x980>
   11cb8:	ldr	r4, [r4]
   11cbc:	cmp	r4, #0
   11cc0:	beq	11cf4 <__assert_fail@plt+0x980>
   11cc4:	movw	r1, #29104	; 0x71b0
   11cc8:	movt	r1, #1
   11ccc:	b	11f08 <__assert_fail@plt+0xb94>
   11cd0:	ldrb	r0, [r8, #1]
   11cd4:	cmp	r0, #0
   11cd8:	bne	11d80 <__assert_fail@plt+0xa0c>
   11cdc:	ldrb	r0, [r8, #6]
   11ce0:	cmp	r0, #0
   11ce4:	bne	11d34 <__assert_fail@plt+0x9c0>
   11ce8:	ldrb	r0, [r8]
   11cec:	cmp	r0, #0
   11cf0:	beq	11c98 <__assert_fail@plt+0x924>
   11cf4:	ldrb	r0, [r8, #4]
   11cf8:	cmp	r0, #1
   11cfc:	bne	11d10 <__assert_fail@plt+0x99c>
   11d00:	ldrb	r0, [r8, #3]
   11d04:	cmp	r0, #0
   11d08:	bne	11d34 <__assert_fail@plt+0x9c0>
   11d0c:	b	11dcc <__assert_fail@plt+0xa58>
   11d10:	ldrb	r0, [r8, #1]
   11d14:	cmp	r0, #0
   11d18:	bne	11d80 <__assert_fail@plt+0xa0c>
   11d1c:	ldrb	r0, [r8, #6]
   11d20:	cmp	r0, #0
   11d24:	bne	11d34 <__assert_fail@plt+0x9c0>
   11d28:	ldrb	r0, [r8]
   11d2c:	cmp	r0, #0
   11d30:	bne	11d60 <__assert_fail@plt+0x9ec>
   11d34:	bl	11278 <__errno_location@plt>
   11d38:	mov	r4, r0
   11d3c:	mov	r0, #0
   11d40:	str	r0, [r4]
   11d44:	bl	11110 <getuid@plt>
   11d48:	cmn	r0, #1
   11d4c:	str	r0, [r8, #16]
   11d50:	bne	11d60 <__assert_fail@plt+0x9ec>
   11d54:	ldr	r4, [r4]
   11d58:	cmp	r4, #0
   11d5c:	bne	11f00 <__assert_fail@plt+0xb8c>
   11d60:	ldrb	r0, [r8, #4]
   11d64:	cmp	r0, #0
   11d68:	bne	11dcc <__assert_fail@plt+0xa58>
   11d6c:	ldrb	r0, [r8, #1]
   11d70:	cmp	r0, #0
   11d74:	ldrbeq	r0, [r8, #6]
   11d78:	cmpeq	r0, #0
   11d7c:	beq	11dec <__assert_fail@plt+0xa78>
   11d80:	bl	11278 <__errno_location@plt>
   11d84:	mov	r6, #0
   11d88:	mov	r4, r0
   11d8c:	str	r6, [r0]
   11d90:	bl	11194 <getegid@plt>
   11d94:	cmn	r0, #1
   11d98:	str	r0, [r8, #20]
   11d9c:	bne	11dac <__assert_fail@plt+0xa38>
   11da0:	ldr	r5, [r4]
   11da4:	cmp	r5, #0
   11da8:	bne	11ed0 <__assert_fail@plt+0xb5c>
   11dac:	str	r6, [r4]
   11db0:	bl	11290 <getgid@plt>
   11db4:	cmn	r0, #1
   11db8:	str	r0, [r8, #24]
   11dbc:	bne	11dcc <__assert_fail@plt+0xa58>
   11dc0:	ldr	r4, [r4]
   11dc4:	cmp	r4, #0
   11dc8:	bne	11ef4 <__assert_fail@plt+0xb80>
   11dcc:	mov	r0, #0
   11dd0:	bl	11f24 <__assert_fail@plt+0xbb0>
   11dd4:	movw	r0, #33040	; 0x8110
   11dd8:	movt	r0, #2
   11ddc:	ldrb	r0, [r0]
   11de0:	eor	r0, r0, #1
   11de4:	sub	sp, fp, #28
   11de8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11dec:	ldrb	r0, [r8]
   11df0:	cmp	r0, #0
   11df4:	beq	11d80 <__assert_fail@plt+0xa0c>
   11df8:	b	11dcc <__assert_fail@plt+0xa58>
   11dfc:	cmn	r0, #3
   11e00:	bne	11e58 <__assert_fail@plt+0xae4>
   11e04:	movw	r0, #33044	; 0x8114
   11e08:	movw	r2, #28835	; 0x70a3
   11e0c:	mov	r1, #0
   11e10:	movw	r7, #28820	; 0x7094
   11e14:	movt	r0, #2
   11e18:	movt	r2, #1
   11e1c:	str	r1, [sp, #8]
   11e20:	movw	r1, #28715	; 0x702b
   11e24:	movt	r7, #1
   11e28:	ldr	r3, [r0]
   11e2c:	movw	r0, #33140	; 0x8174
   11e30:	str	r2, [sp, #4]
   11e34:	movw	r2, #28806	; 0x7086
   11e38:	movt	r1, #1
   11e3c:	str	r7, [sp]
   11e40:	movt	r0, #2
   11e44:	movt	r2, #1
   11e48:	ldr	r0, [r0]
   11e4c:	bl	152f0 <__assert_fail@plt+0x3f7c>
   11e50:	mov	r0, #0
   11e54:	bl	11248 <exit@plt>
   11e58:	cmn	r0, #2
   11e5c:	bne	11e68 <__assert_fail@plt+0xaf4>
   11e60:	mov	r0, #0
   11e64:	bl	11470 <__assert_fail@plt+0xfc>
   11e68:	mov	r0, #1
   11e6c:	bl	11470 <__assert_fail@plt+0xfc>
   11e70:	movw	r1, #28751	; 0x704f
   11e74:	movt	r1, #1
   11e78:	b	11ea8 <__assert_fail@plt+0xb34>
   11e7c:	movw	r1, #28851	; 0x70b3
   11e80:	movt	r1, #1
   11e84:	b	11ea8 <__assert_fail@plt+0xb34>
   11e88:	movw	r1, #28901	; 0x70e5
   11e8c:	movt	r1, #1
   11e90:	b	11ea8 <__assert_fail@plt+0xb34>
   11e94:	movw	r1, #28945	; 0x7111
   11e98:	movt	r1, #1
   11e9c:	b	11ea8 <__assert_fail@plt+0xb34>
   11ea0:	movw	r1, #28999	; 0x7147
   11ea4:	movt	r1, #1
   11ea8:	mov	r0, #0
   11eac:	mov	r2, #5
   11eb0:	bl	11158 <dcgettext@plt>
   11eb4:	mov	r2, r0
   11eb8:	mov	r0, #1
   11ebc:	mov	r1, #0
   11ec0:	bl	111e8 <error@plt>
   11ec4:	movw	r1, #29061	; 0x7185
   11ec8:	movt	r1, #1
   11ecc:	b	11ea8 <__assert_fail@plt+0xb34>
   11ed0:	movw	r1, #29149	; 0x71dd
   11ed4:	mov	r0, #0
   11ed8:	mov	r2, #5
   11edc:	movt	r1, #1
   11ee0:	bl	11158 <dcgettext@plt>
   11ee4:	mov	r2, r0
   11ee8:	mov	r0, #1
   11eec:	mov	r1, r5
   11ef0:	bl	111e8 <error@plt>
   11ef4:	movw	r1, #29174	; 0x71f6
   11ef8:	movt	r1, #1
   11efc:	b	11f08 <__assert_fail@plt+0xb94>
   11f00:	movw	r1, #29129	; 0x71c9
   11f04:	movt	r1, #1
   11f08:	mov	r0, #0
   11f0c:	mov	r2, #5
   11f10:	bl	11158 <dcgettext@plt>
   11f14:	mov	r2, r0
   11f18:	mov	r0, #1
   11f1c:	mov	r1, r4
   11f20:	bl	111e8 <error@plt>
   11f24:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11f28:	add	fp, sp, #28
   11f2c:	sub	sp, sp, #12
   11f30:	movw	r7, #33148	; 0x817c
   11f34:	mov	r4, r0
   11f38:	movt	r7, #2
   11f3c:	ldrb	r0, [r7, #4]
   11f40:	cmp	r0, #1
   11f44:	bne	11f80 <__assert_fail@plt+0xc0c>
   11f48:	ldrb	r1, [r7, #3]
   11f4c:	add	r2, r7, #12
   11f50:	ldrb	r0, [r7, #2]
   11f54:	cmp	r1, #0
   11f58:	addne	r2, r7, #16
   11f5c:	cmp	r0, #0
   11f60:	ldr	r4, [r2]
   11f64:	beq	11fac <__assert_fail@plt+0xc38>
   11f68:	mov	r0, r4
   11f6c:	bl	110f8 <getpwuid@plt>
   11f70:	cmp	r0, #0
   11f74:	beq	12040 <__assert_fail@plt+0xccc>
   11f78:	ldr	r0, [r0]
   11f7c:	b	1209c <__assert_fail@plt+0xd28>
   11f80:	ldrb	r0, [r7, #1]
   11f84:	cmp	r0, #1
   11f88:	bne	11fb4 <__assert_fail@plt+0xc40>
   11f8c:	ldrb	r0, [r7, #3]
   11f90:	add	r2, r7, #20
   11f94:	ldrb	r1, [r7, #2]
   11f98:	cmp	r0, #0
   11f9c:	addne	r2, r7, #24
   11fa0:	ldr	r0, [r2]
   11fa4:	bl	128c0 <__assert_fail@plt+0x154c>
   11fa8:	b	11fec <__assert_fail@plt+0xc78>
   11fac:	mov	r5, #0
   11fb0:	b	1208c <__assert_fail@plt+0xd18>
   11fb4:	ldrb	r0, [r7, #6]
   11fb8:	cmp	r0, #1
   11fbc:	bne	12010 <__assert_fail@plt+0xc9c>
   11fc0:	ldrb	r6, [r7, #5]
   11fc4:	ldrb	r0, [r7, #2]
   11fc8:	ldr	r1, [r7, #16]
   11fcc:	ldr	r3, [r7, #20]
   11fd0:	ldr	r2, [r7, #24]
   11fd4:	mov	r5, #32
   11fd8:	cmp	r6, #0
   11fdc:	movwne	r5, #0
   11fe0:	stm	sp, {r0, r5}
   11fe4:	mov	r0, r4
   11fe8:	bl	124f0 <__assert_fail@plt+0x117c>
   11fec:	movw	r1, #33040	; 0x8110
   11ff0:	movt	r1, #2
   11ff4:	ldrb	r2, [r1]
   11ff8:	and	r0, r2, r0
   11ffc:	strb	r0, [r1]
   12000:	ldrb	r0, [r7, #5]
   12004:	cmp	r0, #1
   12008:	beq	120b8 <__assert_fail@plt+0xd44>
   1200c:	b	120cc <__assert_fail@plt+0xd58>
   12010:	ldrb	r0, [r7]
   12014:	cmp	r0, #1
   12018:	bne	12174 <__assert_fail@plt+0xe00>
   1201c:	movw	r0, #33140	; 0x8174
   12020:	movt	r0, #2
   12024:	ldr	r1, [r0]
   12028:	ldr	r0, [r7, #8]
   1202c:	bl	110bc <fputs_unlocked@plt>
   12030:	ldrb	r0, [r7, #5]
   12034:	cmp	r0, #1
   12038:	beq	120b8 <__assert_fail@plt+0xd44>
   1203c:	b	120cc <__assert_fail@plt+0xd58>
   12040:	movw	r1, #29540	; 0x7364
   12044:	mov	r0, #0
   12048:	mov	r2, #5
   1204c:	mov	r5, #0
   12050:	movt	r1, #1
   12054:	bl	11158 <dcgettext@plt>
   12058:	mov	r6, r0
   1205c:	add	r2, r7, #28
   12060:	mov	r0, r4
   12064:	mov	r1, #0
   12068:	bl	12a80 <__assert_fail@plt+0x170c>
   1206c:	mov	r3, r0
   12070:	mov	r0, #0
   12074:	mov	r1, #0
   12078:	mov	r2, r6
   1207c:	bl	111e8 <error@plt>
   12080:	movw	r0, #33040	; 0x8110
   12084:	movt	r0, #2
   12088:	strb	r5, [r0]
   1208c:	add	r2, r7, #28
   12090:	mov	r0, r4
   12094:	mov	r1, r5
   12098:	bl	12a80 <__assert_fail@plt+0x170c>
   1209c:	movw	r1, #33140	; 0x8174
   120a0:	movt	r1, #2
   120a4:	ldr	r1, [r1]
   120a8:	bl	110bc <fputs_unlocked@plt>
   120ac:	ldrb	r0, [r7, #5]
   120b0:	cmp	r0, #1
   120b4:	bne	120cc <__assert_fail@plt+0xd58>
   120b8:	ldrb	r1, [r7, #7]
   120bc:	cmp	r1, #0
   120c0:	ldrbne	r1, [r7, #6]
   120c4:	cmpne	r1, #0
   120c8:	bne	12110 <__assert_fail@plt+0xd9c>
   120cc:	cmp	r0, #0
   120d0:	movw	r0, #33140	; 0x8174
   120d4:	mov	r1, #10
   120d8:	movt	r0, #2
   120dc:	movwne	r1, #0
   120e0:	ldr	r0, [r0]
   120e4:	ldr	r2, [r0, #20]
   120e8:	ldr	r3, [r0, #24]
   120ec:	cmp	r2, r3
   120f0:	addcc	r3, r2, #1
   120f4:	strcc	r3, [r0, #20]
   120f8:	strbcc	r1, [r2]
   120fc:	subcc	sp, fp, #28
   12100:	popcc	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12104:	bl	112f0 <__overflow@plt>
   12108:	sub	sp, fp, #28
   1210c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12110:	movw	r4, #33140	; 0x8174
   12114:	movt	r4, #2
   12118:	ldr	r0, [r4]
   1211c:	ldr	r1, [r0, #20]
   12120:	ldr	r2, [r0, #24]
   12124:	cmp	r1, r2
   12128:	bcs	124e4 <__assert_fail@plt+0x1170>
   1212c:	add	r2, r1, #1
   12130:	str	r2, [r0, #20]
   12134:	mov	r0, #0
   12138:	strb	r0, [r1]
   1213c:	ldr	r0, [r4]
   12140:	ldr	r1, [r0, #20]
   12144:	ldr	r2, [r0, #24]
   12148:	cmp	r1, r2
   1214c:	addcc	r2, r1, #1
   12150:	strcc	r2, [r0, #20]
   12154:	movcc	r0, #0
   12158:	strbcc	r0, [r1]
   1215c:	subcc	sp, fp, #28
   12160:	popcc	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12164:	mov	r1, #0
   12168:	bl	112f0 <__overflow@plt>
   1216c:	sub	sp, fp, #28
   12170:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12174:	movw	r1, #29587	; 0x7393
   12178:	mov	r0, #0
   1217c:	mov	r2, #5
   12180:	movt	r1, #1
   12184:	bl	11158 <dcgettext@plt>
   12188:	mov	r5, r0
   1218c:	ldr	r0, [r7, #16]
   12190:	add	r8, r7, #28
   12194:	mov	r1, #0
   12198:	mov	r2, r8
   1219c:	bl	12a80 <__assert_fail@plt+0x170c>
   121a0:	mov	r2, r0
   121a4:	mov	r0, #1
   121a8:	mov	r1, r5
   121ac:	bl	112b4 <__printf_chk@plt>
   121b0:	ldr	r0, [r7, #16]
   121b4:	bl	110f8 <getpwuid@plt>
   121b8:	mov	r9, r0
   121bc:	cmp	r0, #0
   121c0:	beq	121d8 <__assert_fail@plt+0xe64>
   121c4:	ldr	r2, [r9]
   121c8:	movw	r1, #29572	; 0x7384
   121cc:	mov	r0, #1
   121d0:	movt	r1, #1
   121d4:	bl	112b4 <__printf_chk@plt>
   121d8:	movw	r1, #29577	; 0x7389
   121dc:	mov	r0, #0
   121e0:	mov	r2, #5
   121e4:	movt	r1, #1
   121e8:	bl	11158 <dcgettext@plt>
   121ec:	mov	r6, r0
   121f0:	ldr	r0, [r7, #24]
   121f4:	add	sl, r7, #49	; 0x31
   121f8:	mov	r1, #0
   121fc:	mov	r2, sl
   12200:	bl	12a80 <__assert_fail@plt+0x170c>
   12204:	mov	r2, r0
   12208:	mov	r0, #1
   1220c:	mov	r1, r6
   12210:	bl	112b4 <__printf_chk@plt>
   12214:	ldr	r0, [r7, #24]
   12218:	bl	1135c <getgrgid@plt>
   1221c:	cmp	r0, #0
   12220:	beq	12238 <__assert_fail@plt+0xec4>
   12224:	ldr	r2, [r0]
   12228:	movw	r1, #29572	; 0x7384
   1222c:	mov	r0, #1
   12230:	movt	r1, #1
   12234:	bl	112b4 <__printf_chk@plt>
   12238:	ldr	r0, [r7, #12]
   1223c:	ldr	r1, [r7, #16]
   12240:	cmp	r0, r1
   12244:	beq	122b0 <__assert_fail@plt+0xf3c>
   12248:	movw	r1, #29585	; 0x7391
   1224c:	mov	r0, #0
   12250:	mov	r2, #5
   12254:	mov	r9, #0
   12258:	movt	r1, #1
   1225c:	bl	11158 <dcgettext@plt>
   12260:	mov	r6, r0
   12264:	ldr	r0, [r7, #12]
   12268:	mov	r1, #0
   1226c:	mov	r2, r8
   12270:	bl	12a80 <__assert_fail@plt+0x170c>
   12274:	mov	r2, r0
   12278:	mov	r0, #1
   1227c:	mov	r1, r6
   12280:	bl	112b4 <__printf_chk@plt>
   12284:	ldr	r0, [r7, #12]
   12288:	bl	110f8 <getpwuid@plt>
   1228c:	cmp	r0, #0
   12290:	beq	122b0 <__assert_fail@plt+0xf3c>
   12294:	ldr	r2, [r0]
   12298:	movw	r1, #29572	; 0x7384
   1229c:	mov	r6, r0
   122a0:	mov	r0, #1
   122a4:	movt	r1, #1
   122a8:	bl	112b4 <__printf_chk@plt>
   122ac:	mov	r9, r6
   122b0:	ldr	r0, [r7, #20]
   122b4:	ldr	r1, [r7, #24]
   122b8:	cmp	r0, r1
   122bc:	beq	1231c <__assert_fail@plt+0xfa8>
   122c0:	movw	r1, #29594	; 0x739a
   122c4:	mov	r0, #0
   122c8:	mov	r2, #5
   122cc:	movt	r1, #1
   122d0:	bl	11158 <dcgettext@plt>
   122d4:	mov	r6, r0
   122d8:	ldr	r0, [r7, #20]
   122dc:	mov	r1, #0
   122e0:	mov	r2, sl
   122e4:	bl	12a80 <__assert_fail@plt+0x170c>
   122e8:	mov	r2, r0
   122ec:	mov	r0, #1
   122f0:	mov	r1, r6
   122f4:	bl	112b4 <__printf_chk@plt>
   122f8:	ldr	r0, [r7, #20]
   122fc:	bl	1135c <getgrgid@plt>
   12300:	cmp	r0, #0
   12304:	beq	1231c <__assert_fail@plt+0xfa8>
   12308:	ldr	r2, [r0]
   1230c:	movw	r1, #29572	; 0x7384
   12310:	mov	r0, #1
   12314:	movt	r1, #1
   12318:	bl	112b4 <__printf_chk@plt>
   1231c:	cmp	r4, #0
   12320:	beq	12334 <__assert_fail@plt+0xfc0>
   12324:	cmp	r9, #0
   12328:	ldrne	r1, [r9, #12]
   1232c:	mvneq	r1, #0
   12330:	b	12338 <__assert_fail@plt+0xfc4>
   12334:	ldr	r1, [r7, #20]
   12338:	add	r2, sp, #8
   1233c:	mov	r0, r4
   12340:	bl	15ac8 <__assert_fail@plt+0x4754>
   12344:	cmn	r0, #1
   12348:	ble	12390 <__assert_fail@plt+0x101c>
   1234c:	mov	r6, r0
   12350:	cmp	r0, #0
   12354:	beq	1249c <__assert_fail@plt+0x1128>
   12358:	movw	r1, #29681	; 0x73f1
   1235c:	mov	r0, #0
   12360:	mov	r2, #5
   12364:	mov	r4, #0
   12368:	movt	r1, #1
   1236c:	bl	11158 <dcgettext@plt>
   12370:	movw	r5, #33140	; 0x8174
   12374:	movt	r5, #2
   12378:	ldr	r1, [r5]
   1237c:	bl	110bc <fputs_unlocked@plt>
   12380:	movw	r8, #29572	; 0x7384
   12384:	mov	r9, #44	; 0x2c
   12388:	movt	r8, #1
   1238c:	b	12428 <__assert_fail@plt+0x10b4>
   12390:	bl	11278 <__errno_location@plt>
   12394:	ldr	r5, [r0]
   12398:	cmp	r4, #0
   1239c:	beq	123d8 <__assert_fail@plt+0x1064>
   123a0:	movw	r1, #29603	; 0x73a3
   123a4:	mov	r0, #0
   123a8:	mov	r2, #5
   123ac:	movt	r1, #1
   123b0:	bl	11158 <dcgettext@plt>
   123b4:	mov	r6, r0
   123b8:	mov	r0, r4
   123bc:	bl	14a58 <__assert_fail@plt+0x36e4>
   123c0:	mov	r3, r0
   123c4:	mov	r0, #0
   123c8:	mov	r1, r5
   123cc:	mov	r2, r6
   123d0:	bl	111e8 <error@plt>
   123d4:	b	123fc <__assert_fail@plt+0x1088>
   123d8:	movw	r1, #29636	; 0x73c4
   123dc:	mov	r0, #0
   123e0:	mov	r2, #5
   123e4:	movt	r1, #1
   123e8:	bl	11158 <dcgettext@plt>
   123ec:	mov	r2, r0
   123f0:	mov	r0, #0
   123f4:	mov	r1, r5
   123f8:	bl	111e8 <error@plt>
   123fc:	movw	r0, #33040	; 0x8110
   12400:	mov	r1, #0
   12404:	movt	r0, #2
   12408:	strb	r1, [r0]
   1240c:	ldrb	r0, [r7, #5]
   12410:	cmp	r0, #1
   12414:	beq	120b8 <__assert_fail@plt+0xd44>
   12418:	b	120cc <__assert_fail@plt+0xd58>
   1241c:	mov	r1, #44	; 0x2c
   12420:	bl	112f0 <__overflow@plt>
   12424:	b	12450 <__assert_fail@plt+0x10dc>
   12428:	cmp	r4, #0
   1242c:	beq	12450 <__assert_fail@plt+0x10dc>
   12430:	ldr	r0, [r5]
   12434:	ldr	r1, [r0, #20]
   12438:	ldr	r2, [r0, #24]
   1243c:	cmp	r1, r2
   12440:	bcs	1241c <__assert_fail@plt+0x10a8>
   12444:	add	r2, r1, #1
   12448:	str	r2, [r0, #20]
   1244c:	strb	r9, [r1]
   12450:	ldr	r0, [sp, #8]
   12454:	mov	r1, #0
   12458:	mov	r2, sl
   1245c:	ldr	r0, [r0, r4, lsl #2]
   12460:	bl	12a80 <__assert_fail@plt+0x170c>
   12464:	ldr	r1, [r5]
   12468:	bl	110bc <fputs_unlocked@plt>
   1246c:	ldr	r0, [sp, #8]
   12470:	ldr	r0, [r0, r4, lsl #2]
   12474:	bl	1135c <getgrgid@plt>
   12478:	cmp	r0, #0
   1247c:	beq	12490 <__assert_fail@plt+0x111c>
   12480:	ldr	r2, [r0]
   12484:	mov	r0, #1
   12488:	mov	r1, r8
   1248c:	bl	112b4 <__printf_chk@plt>
   12490:	add	r4, r4, #1
   12494:	cmp	r6, r4
   12498:	bne	12428 <__assert_fail@plt+0x10b4>
   1249c:	ldr	r0, [sp, #8]
   124a0:	bl	12a58 <__assert_fail@plt+0x16e4>
   124a4:	ldr	r0, [r7, #8]
   124a8:	cmp	r0, #0
   124ac:	beq	120ac <__assert_fail@plt+0xd38>
   124b0:	movw	r1, #29690	; 0x73fa
   124b4:	mov	r0, #0
   124b8:	mov	r2, #5
   124bc:	movt	r1, #1
   124c0:	bl	11158 <dcgettext@plt>
   124c4:	ldr	r2, [r7, #8]
   124c8:	mov	r1, r0
   124cc:	mov	r0, #1
   124d0:	bl	112b4 <__printf_chk@plt>
   124d4:	ldrb	r0, [r7, #5]
   124d8:	cmp	r0, #1
   124dc:	beq	120b8 <__assert_fail@plt+0xd44>
   124e0:	b	120cc <__assert_fail@plt+0xd58>
   124e4:	mov	r1, #0
   124e8:	bl	112f0 <__overflow@plt>
   124ec:	b	1213c <__assert_fail@plt+0xdc8>
   124f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   124f4:	add	fp, sp, #28
   124f8:	sub	sp, sp, #4
   124fc:	ldr	sl, [fp, #8]
   12500:	mov	r8, r3
   12504:	mov	r5, r2
   12508:	mov	r7, r0
   1250c:	cmp	r0, #0
   12510:	beq	12550 <__assert_fail@plt+0x11dc>
   12514:	mov	r0, r1
   12518:	bl	110f8 <getpwuid@plt>
   1251c:	cmp	r0, #0
   12520:	mov	r4, r0
   12524:	mov	r6, r0
   12528:	movwne	r4, #1
   1252c:	cmp	sl, #0
   12530:	beq	12590 <__assert_fail@plt+0x121c>
   12534:	mov	r0, r5
   12538:	bl	1135c <getgrgid@plt>
   1253c:	cmp	r0, #0
   12540:	beq	12564 <__assert_fail@plt+0x11f0>
   12544:	movw	r1, #33140	; 0x8174
   12548:	ldr	r0, [r0]
   1254c:	b	125a8 <__assert_fail@plt+0x1234>
   12550:	mov	r6, #0
   12554:	mov	r4, #1
   12558:	cmp	sl, #0
   1255c:	bne	12534 <__assert_fail@plt+0x11c0>
   12560:	b	12590 <__assert_fail@plt+0x121c>
   12564:	movw	r1, #29920	; 0x74e0
   12568:	mov	r0, #0
   1256c:	mov	r2, #5
   12570:	mov	r4, #0
   12574:	movt	r1, #1
   12578:	bl	11158 <dcgettext@plt>
   1257c:	mov	r2, r0
   12580:	mov	r0, #0
   12584:	mov	r1, #0
   12588:	mov	r3, r5
   1258c:	bl	111e8 <error@plt>
   12590:	movw	r2, #33218	; 0x81c2
   12594:	mov	r0, r5
   12598:	mov	r1, #0
   1259c:	movt	r2, #2
   125a0:	bl	12a80 <__assert_fail@plt+0x170c>
   125a4:	movw	r1, #33140	; 0x8174
   125a8:	movt	r1, #2
   125ac:	ldr	r1, [r1]
   125b0:	bl	110bc <fputs_unlocked@plt>
   125b4:	cmp	r8, r5
   125b8:	beq	12654 <__assert_fail@plt+0x12e0>
   125bc:	movw	r9, #33140	; 0x8174
   125c0:	movt	r9, #2
   125c4:	ldr	r0, [r9]
   125c8:	ldr	r1, [r0, #20]
   125cc:	ldr	r2, [r0, #24]
   125d0:	cmp	r1, r2
   125d4:	bcs	128ac <__assert_fail@plt+0x1538>
   125d8:	add	r2, r1, #1
   125dc:	str	r2, [r0, #20]
   125e0:	ldr	r0, [fp, #12]
   125e4:	strb	r0, [r1]
   125e8:	cmp	sl, #0
   125ec:	beq	12638 <__assert_fail@plt+0x12c4>
   125f0:	mov	r0, r8
   125f4:	bl	1135c <getgrgid@plt>
   125f8:	cmp	r0, #0
   125fc:	beq	1260c <__assert_fail@plt+0x1298>
   12600:	ldr	r1, [r9]
   12604:	ldr	r0, [r0]
   12608:	b	12650 <__assert_fail@plt+0x12dc>
   1260c:	movw	r1, #29920	; 0x74e0
   12610:	mov	r0, #0
   12614:	mov	r2, #5
   12618:	mov	r4, #0
   1261c:	movt	r1, #1
   12620:	bl	11158 <dcgettext@plt>
   12624:	mov	r2, r0
   12628:	mov	r0, #0
   1262c:	mov	r1, #0
   12630:	mov	r3, r8
   12634:	bl	111e8 <error@plt>
   12638:	movw	r2, #33218	; 0x81c2
   1263c:	mov	r0, r8
   12640:	mov	r1, #0
   12644:	movt	r2, #2
   12648:	bl	12a80 <__assert_fail@plt+0x170c>
   1264c:	ldr	r1, [r9]
   12650:	bl	110bc <fputs_unlocked@plt>
   12654:	cmp	r6, #0
   12658:	mov	r1, r8
   1265c:	mov	r2, sp
   12660:	mov	r0, r7
   12664:	ldrne	r1, [r6, #12]
   12668:	bl	15ac8 <__assert_fail@plt+0x4754>
   1266c:	cmp	r0, #0
   12670:	blt	12774 <__assert_fail@plt+0x1400>
   12674:	beq	12864 <__assert_fail@plt+0x14f0>
   12678:	mov	r6, r0
   1267c:	cmp	sl, #0
   12680:	beq	127c8 <__assert_fail@plt+0x1454>
   12684:	movw	r9, #33140	; 0x8174
   12688:	mov	sl, #0
   1268c:	movt	r9, #2
   12690:	b	12750 <__assert_fail@plt+0x13dc>
   12694:	ldr	r0, [r9]
   12698:	ldr	r1, [r0, #20]
   1269c:	ldr	r2, [r0, #24]
   126a0:	cmp	r1, r2
   126a4:	bcs	12744 <__assert_fail@plt+0x13d0>
   126a8:	add	r2, r1, #1
   126ac:	str	r2, [r0, #20]
   126b0:	ldr	r0, [fp, #12]
   126b4:	strb	r0, [r1]
   126b8:	ldr	r0, [sp]
   126bc:	ldr	r7, [r0, sl, lsl #2]
   126c0:	mov	r0, r7
   126c4:	bl	1135c <getgrgid@plt>
   126c8:	cmp	r0, #0
   126cc:	beq	126ec <__assert_fail@plt+0x1378>
   126d0:	ldr	r1, [r9]
   126d4:	ldr	r0, [r0]
   126d8:	bl	110bc <fputs_unlocked@plt>
   126dc:	add	sl, sl, #1
   126e0:	cmp	r6, sl
   126e4:	bne	12750 <__assert_fail@plt+0x13dc>
   126e8:	b	12864 <__assert_fail@plt+0x14f0>
   126ec:	movw	r1, #29920	; 0x74e0
   126f0:	mov	r0, #0
   126f4:	mov	r2, #5
   126f8:	mov	r4, #0
   126fc:	movt	r1, #1
   12700:	bl	11158 <dcgettext@plt>
   12704:	mov	r2, r0
   12708:	mov	r0, #0
   1270c:	mov	r1, #0
   12710:	mov	r3, r7
   12714:	bl	111e8 <error@plt>
   12718:	movw	r2, #33218	; 0x81c2
   1271c:	mov	r0, r7
   12720:	mov	r1, #0
   12724:	movt	r2, #2
   12728:	bl	12a80 <__assert_fail@plt+0x170c>
   1272c:	ldr	r1, [r9]
   12730:	bl	110bc <fputs_unlocked@plt>
   12734:	add	sl, sl, #1
   12738:	cmp	r6, sl
   1273c:	bne	12750 <__assert_fail@plt+0x13dc>
   12740:	b	12864 <__assert_fail@plt+0x14f0>
   12744:	ldr	r1, [fp, #12]
   12748:	bl	112f0 <__overflow@plt>
   1274c:	b	126b8 <__assert_fail@plt+0x1344>
   12750:	ldr	r0, [sp]
   12754:	ldr	r0, [r0, sl, lsl #2]
   12758:	cmp	r0, r5
   1275c:	cmpne	r0, r8
   12760:	bne	12694 <__assert_fail@plt+0x1320>
   12764:	add	sl, sl, #1
   12768:	cmp	r6, sl
   1276c:	bne	12750 <__assert_fail@plt+0x13dc>
   12770:	b	12864 <__assert_fail@plt+0x14f0>
   12774:	bl	11278 <__errno_location@plt>
   12778:	ldr	r4, [r0]
   1277c:	cmp	r7, #0
   12780:	beq	12878 <__assert_fail@plt+0x1504>
   12784:	movw	r1, #29603	; 0x73a3
   12788:	mov	r0, #0
   1278c:	mov	r2, #5
   12790:	movt	r1, #1
   12794:	bl	11158 <dcgettext@plt>
   12798:	mov	r5, r0
   1279c:	mov	r0, r7
   127a0:	bl	14a58 <__assert_fail@plt+0x36e4>
   127a4:	mov	r3, r0
   127a8:	mov	r1, r4
   127ac:	mov	r0, #0
   127b0:	mov	r2, r5
   127b4:	mov	r4, #0
   127b8:	bl	111e8 <error@plt>
   127bc:	and	r0, r4, #1
   127c0:	sub	sp, fp, #28
   127c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   127c8:	movw	r9, #33218	; 0x81c2
   127cc:	mov	sl, r4
   127d0:	movw	r4, #33140	; 0x8174
   127d4:	mov	r7, #0
   127d8:	movt	r4, #2
   127dc:	movt	r9, #2
   127e0:	b	12840 <__assert_fail@plt+0x14cc>
   127e4:	ldr	r0, [r4]
   127e8:	ldr	r1, [r0, #20]
   127ec:	ldr	r2, [r0, #24]
   127f0:	cmp	r1, r2
   127f4:	bcs	12834 <__assert_fail@plt+0x14c0>
   127f8:	add	r2, r1, #1
   127fc:	str	r2, [r0, #20]
   12800:	ldr	r0, [fp, #12]
   12804:	strb	r0, [r1]
   12808:	ldr	r0, [sp]
   1280c:	mov	r1, #0
   12810:	mov	r2, r9
   12814:	ldr	r0, [r0, r7, lsl #2]
   12818:	bl	12a80 <__assert_fail@plt+0x170c>
   1281c:	ldr	r1, [r4]
   12820:	bl	110bc <fputs_unlocked@plt>
   12824:	add	r7, r7, #1
   12828:	cmp	r6, r7
   1282c:	bne	12840 <__assert_fail@plt+0x14cc>
   12830:	b	12860 <__assert_fail@plt+0x14ec>
   12834:	ldr	r1, [fp, #12]
   12838:	bl	112f0 <__overflow@plt>
   1283c:	b	12808 <__assert_fail@plt+0x1494>
   12840:	ldr	r0, [sp]
   12844:	ldr	r0, [r0, r7, lsl #2]
   12848:	cmp	r0, r5
   1284c:	cmpne	r0, r8
   12850:	bne	127e4 <__assert_fail@plt+0x1470>
   12854:	add	r7, r7, #1
   12858:	cmp	r6, r7
   1285c:	bne	12840 <__assert_fail@plt+0x14cc>
   12860:	mov	r4, sl
   12864:	ldr	r0, [sp]
   12868:	bl	12a58 <__assert_fail@plt+0x16e4>
   1286c:	and	r0, r4, #1
   12870:	sub	sp, fp, #28
   12874:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12878:	movw	r1, #29636	; 0x73c4
   1287c:	mov	r0, #0
   12880:	mov	r2, #5
   12884:	movt	r1, #1
   12888:	bl	11158 <dcgettext@plt>
   1288c:	mov	r2, r0
   12890:	mov	r1, r4
   12894:	mov	r0, #0
   12898:	mov	r4, #0
   1289c:	bl	111e8 <error@plt>
   128a0:	and	r0, r4, #1
   128a4:	sub	sp, fp, #28
   128a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   128ac:	ldr	r1, [fp, #12]
   128b0:	bl	112f0 <__overflow@plt>
   128b4:	cmp	sl, #0
   128b8:	bne	125f0 <__assert_fail@plt+0x127c>
   128bc:	b	12638 <__assert_fail@plt+0x12c4>
   128c0:	push	{r4, r5, fp, lr}
   128c4:	add	fp, sp, #8
   128c8:	mov	r5, r0
   128cc:	mov	r4, #1
   128d0:	cmp	r1, #0
   128d4:	beq	12920 <__assert_fail@plt+0x15ac>
   128d8:	mov	r0, r5
   128dc:	bl	1135c <getgrgid@plt>
   128e0:	cmp	r0, #0
   128e4:	beq	128f4 <__assert_fail@plt+0x1580>
   128e8:	ldr	r0, [r0]
   128ec:	mov	r4, #1
   128f0:	b	12934 <__assert_fail@plt+0x15c0>
   128f4:	movw	r1, #29920	; 0x74e0
   128f8:	mov	r0, #0
   128fc:	mov	r2, #5
   12900:	mov	r4, #0
   12904:	movt	r1, #1
   12908:	bl	11158 <dcgettext@plt>
   1290c:	mov	r2, r0
   12910:	mov	r0, #0
   12914:	mov	r1, #0
   12918:	mov	r3, r5
   1291c:	bl	111e8 <error@plt>
   12920:	movw	r2, #33218	; 0x81c2
   12924:	mov	r0, r5
   12928:	mov	r1, #0
   1292c:	movt	r2, #2
   12930:	bl	12a80 <__assert_fail@plt+0x170c>
   12934:	movw	r1, #33140	; 0x8174
   12938:	movt	r1, #2
   1293c:	ldr	r1, [r1]
   12940:	bl	110bc <fputs_unlocked@plt>
   12944:	mov	r0, r4
   12948:	pop	{r4, r5, fp, pc}
   1294c:	movw	r1, #33240	; 0x81d8
   12950:	movt	r1, #2
   12954:	str	r0, [r1, #4]
   12958:	bx	lr
   1295c:	movw	r1, #33240	; 0x81d8
   12960:	movt	r1, #2
   12964:	strb	r0, [r1]
   12968:	bx	lr
   1296c:	push	{r4, r5, r6, sl, fp, lr}
   12970:	add	fp, sp, #16
   12974:	sub	sp, sp, #8
   12978:	movw	r0, #33140	; 0x8174
   1297c:	movt	r0, #2
   12980:	ldr	r0, [r0]
   12984:	bl	16450 <__assert_fail@plt+0x50dc>
   12988:	cmp	r0, #0
   1298c:	beq	129b4 <__assert_fail@plt+0x1640>
   12990:	movw	r5, #33240	; 0x81d8
   12994:	movt	r5, #2
   12998:	ldrb	r0, [r5]
   1299c:	cmp	r0, #0
   129a0:	beq	129e0 <__assert_fail@plt+0x166c>
   129a4:	bl	11278 <__errno_location@plt>
   129a8:	ldr	r0, [r0]
   129ac:	cmp	r0, #32
   129b0:	bne	129e0 <__assert_fail@plt+0x166c>
   129b4:	movw	r0, #33136	; 0x8170
   129b8:	movt	r0, #2
   129bc:	ldr	r0, [r0]
   129c0:	bl	16450 <__assert_fail@plt+0x50dc>
   129c4:	cmp	r0, #0
   129c8:	subeq	sp, fp, #16
   129cc:	popeq	{r4, r5, r6, sl, fp, pc}
   129d0:	movw	r0, #33048	; 0x8118
   129d4:	movt	r0, #2
   129d8:	ldr	r0, [r0]
   129dc:	bl	11128 <_exit@plt>
   129e0:	movw	r1, #29969	; 0x7511
   129e4:	mov	r0, #0
   129e8:	mov	r2, #5
   129ec:	movt	r1, #1
   129f0:	bl	11158 <dcgettext@plt>
   129f4:	ldr	r6, [r5, #4]
   129f8:	mov	r4, r0
   129fc:	bl	11278 <__errno_location@plt>
   12a00:	ldr	r5, [r0]
   12a04:	cmp	r6, #0
   12a08:	bne	12a24 <__assert_fail@plt+0x16b0>
   12a0c:	movw	r2, #29985	; 0x7521
   12a10:	mov	r0, #0
   12a14:	mov	r1, r5
   12a18:	mov	r3, r4
   12a1c:	movt	r2, #1
   12a20:	b	12a44 <__assert_fail@plt+0x16d0>
   12a24:	mov	r0, r6
   12a28:	bl	146d0 <__assert_fail@plt+0x335c>
   12a2c:	movw	r2, #29981	; 0x751d
   12a30:	mov	r3, r0
   12a34:	str	r4, [sp]
   12a38:	mov	r0, #0
   12a3c:	mov	r1, r5
   12a40:	movt	r2, #1
   12a44:	bl	111e8 <error@plt>
   12a48:	movw	r0, #33048	; 0x8118
   12a4c:	movt	r0, #2
   12a50:	ldr	r0, [r0]
   12a54:	bl	11128 <_exit@plt>
   12a58:	push	{r4, r5, r6, sl, fp, lr}
   12a5c:	add	fp, sp, #16
   12a60:	mov	r4, r0
   12a64:	bl	11278 <__errno_location@plt>
   12a68:	ldr	r6, [r0]
   12a6c:	mov	r5, r0
   12a70:	mov	r0, r4
   12a74:	bl	1111c <free@plt>
   12a78:	str	r6, [r5]
   12a7c:	pop	{r4, r5, r6, sl, fp, pc}
   12a80:	push	{r4, r5, r6, sl, fp, lr}
   12a84:	add	fp, sp, #16
   12a88:	mov	r5, r0
   12a8c:	mov	r0, #0
   12a90:	mov	r4, r1
   12a94:	add	r6, r2, #19
   12a98:	strb	r0, [r2, #20]
   12a9c:	mov	r0, r5
   12aa0:	mov	r1, r4
   12aa4:	mov	r2, #10
   12aa8:	mov	r3, #0
   12aac:	bl	16ac4 <__assert_fail@plt+0x5750>
   12ab0:	add	r2, r0, r0, lsl #2
   12ab4:	sub	r2, r5, r2, lsl #1
   12ab8:	orr	r2, r2, #48	; 0x30
   12abc:	strb	r2, [r6], #-1
   12ac0:	rsbs	r2, r5, #9
   12ac4:	mov	r5, r0
   12ac8:	rscs	r2, r4, #0
   12acc:	mov	r4, r1
   12ad0:	bcc	12a9c <__assert_fail@plt+0x1728>
   12ad4:	add	r0, r6, #1
   12ad8:	pop	{r4, r5, r6, sl, fp, pc}
   12adc:	push	{r4, r5, fp, lr}
   12ae0:	add	fp, sp, #8
   12ae4:	cmp	r0, #0
   12ae8:	beq	12b7c <__assert_fail@plt+0x1808>
   12aec:	mov	r1, #47	; 0x2f
   12af0:	mov	r4, r0
   12af4:	bl	11314 <strrchr@plt>
   12af8:	cmp	r0, #0
   12afc:	mov	r5, r4
   12b00:	addne	r5, r0, #1
   12b04:	sub	r0, r5, r4
   12b08:	cmp	r0, #7
   12b0c:	blt	12b60 <__assert_fail@plt+0x17ec>
   12b10:	movw	r1, #30044	; 0x755c
   12b14:	sub	r0, r5, #7
   12b18:	mov	r2, #7
   12b1c:	movt	r1, #1
   12b20:	bl	11344 <strncmp@plt>
   12b24:	cmp	r0, #0
   12b28:	bne	12b60 <__assert_fail@plt+0x17ec>
   12b2c:	movw	r1, #30052	; 0x7564
   12b30:	mov	r0, r5
   12b34:	mov	r2, #3
   12b38:	movt	r1, #1
   12b3c:	bl	11344 <strncmp@plt>
   12b40:	cmp	r0, #0
   12b44:	beq	12b50 <__assert_fail@plt+0x17dc>
   12b48:	mov	r4, r5
   12b4c:	b	12b60 <__assert_fail@plt+0x17ec>
   12b50:	movw	r0, #33120	; 0x8160
   12b54:	add	r4, r5, #3
   12b58:	movt	r0, #2
   12b5c:	str	r4, [r0]
   12b60:	movw	r0, #33124	; 0x8164
   12b64:	movt	r0, #2
   12b68:	str	r4, [r0]
   12b6c:	movw	r0, #33248	; 0x81e0
   12b70:	movt	r0, #2
   12b74:	str	r4, [r0]
   12b78:	pop	{r4, r5, fp, pc}
   12b7c:	movw	r0, #33136	; 0x8170
   12b80:	mov	r1, #55	; 0x37
   12b84:	mov	r2, #1
   12b88:	movt	r0, #2
   12b8c:	ldr	r3, [r0]
   12b90:	movw	r0, #29988	; 0x7524
   12b94:	movt	r0, #1
   12b98:	bl	111a0 <fwrite@plt>
   12b9c:	bl	11350 <abort@plt>
   12ba0:	push	{r4, r5, r6, sl, fp, lr}
   12ba4:	add	fp, sp, #16
   12ba8:	mov	r4, r0
   12bac:	movw	r0, #33256	; 0x81e8
   12bb0:	movt	r0, #2
   12bb4:	cmp	r4, #0
   12bb8:	moveq	r4, r0
   12bbc:	bl	11278 <__errno_location@plt>
   12bc0:	ldr	r6, [r0]
   12bc4:	mov	r5, r0
   12bc8:	mov	r0, r4
   12bcc:	mov	r1, #48	; 0x30
   12bd0:	bl	15984 <__assert_fail@plt+0x4610>
   12bd4:	str	r6, [r5]
   12bd8:	pop	{r4, r5, r6, sl, fp, pc}
   12bdc:	movw	r1, #33256	; 0x81e8
   12be0:	cmp	r0, #0
   12be4:	movt	r1, #2
   12be8:	movne	r1, r0
   12bec:	ldr	r0, [r1]
   12bf0:	bx	lr
   12bf4:	movw	r2, #33256	; 0x81e8
   12bf8:	cmp	r0, #0
   12bfc:	movt	r2, #2
   12c00:	movne	r2, r0
   12c04:	str	r1, [r2]
   12c08:	bx	lr
   12c0c:	movw	r3, #33256	; 0x81e8
   12c10:	cmp	r0, #0
   12c14:	movt	r3, #2
   12c18:	movne	r3, r0
   12c1c:	ubfx	r0, r1, #5, #3
   12c20:	and	r1, r1, #31
   12c24:	add	r0, r3, r0, lsl #2
   12c28:	ldr	r3, [r0, #8]
   12c2c:	eor	r2, r2, r3, lsr r1
   12c30:	and	r2, r2, #1
   12c34:	eor	r2, r3, r2, lsl r1
   12c38:	str	r2, [r0, #8]
   12c3c:	mov	r0, #1
   12c40:	and	r0, r0, r3, lsr r1
   12c44:	bx	lr
   12c48:	movw	r2, #33256	; 0x81e8
   12c4c:	cmp	r0, #0
   12c50:	movt	r2, #2
   12c54:	movne	r2, r0
   12c58:	ldr	r0, [r2, #4]
   12c5c:	str	r1, [r2, #4]
   12c60:	bx	lr
   12c64:	movw	r3, #33256	; 0x81e8
   12c68:	cmp	r0, #0
   12c6c:	movt	r3, #2
   12c70:	movne	r3, r0
   12c74:	cmp	r1, #0
   12c78:	mov	r0, #10
   12c7c:	cmpne	r2, #0
   12c80:	str	r0, [r3]
   12c84:	bne	12c94 <__assert_fail@plt+0x1920>
   12c88:	push	{fp, lr}
   12c8c:	mov	fp, sp
   12c90:	bl	11350 <abort@plt>
   12c94:	str	r1, [r3, #40]	; 0x28
   12c98:	str	r2, [r3, #44]	; 0x2c
   12c9c:	bx	lr
   12ca0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ca4:	add	fp, sp, #28
   12ca8:	sub	sp, sp, #20
   12cac:	mov	r7, r0
   12cb0:	ldr	r0, [fp, #8]
   12cb4:	movw	r5, #33256	; 0x81e8
   12cb8:	mov	r8, r3
   12cbc:	mov	r9, r2
   12cc0:	mov	sl, r1
   12cc4:	movt	r5, #2
   12cc8:	cmp	r0, #0
   12ccc:	movne	r5, r0
   12cd0:	bl	11278 <__errno_location@plt>
   12cd4:	mov	r4, r0
   12cd8:	ldm	r5, {r0, r1}
   12cdc:	ldr	r2, [r5, #40]	; 0x28
   12ce0:	ldr	r3, [r5, #44]	; 0x2c
   12ce4:	add	r5, r5, #8
   12ce8:	ldr	r6, [r4]
   12cec:	stm	sp, {r0, r1, r5}
   12cf0:	str	r2, [sp, #12]
   12cf4:	str	r3, [sp, #16]
   12cf8:	mov	r0, r7
   12cfc:	mov	r1, sl
   12d00:	mov	r2, r9
   12d04:	mov	r3, r8
   12d08:	bl	12d18 <__assert_fail@plt+0x19a4>
   12d0c:	str	r6, [r4]
   12d10:	sub	sp, fp, #28
   12d14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12d18:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12d1c:	add	fp, sp, #28
   12d20:	sub	sp, sp, #156	; 0x9c
   12d24:	str	r0, [sp, #76]	; 0x4c
   12d28:	ldr	r0, [fp, #12]
   12d2c:	mov	r6, r1
   12d30:	str	r3, [sp, #84]	; 0x54
   12d34:	str	r2, [fp, #-84]	; 0xffffffac
   12d38:	and	r1, r0, #4
   12d3c:	str	r1, [sp, #24]
   12d40:	and	r1, r0, #1
   12d44:	str	r1, [sp, #28]
   12d48:	ubfx	r8, r0, #1, #1
   12d4c:	bl	111b8 <__ctype_get_mb_cur_max@plt>
   12d50:	str	r0, [sp, #32]
   12d54:	ldr	r0, [fp, #24]
   12d58:	ldr	r7, [fp, #8]
   12d5c:	mov	r1, #0
   12d60:	mov	r2, #0
   12d64:	mov	r4, #1
   12d68:	str	r1, [sp, #52]	; 0x34
   12d6c:	str	r0, [sp, #72]	; 0x48
   12d70:	ldr	r0, [fp, #20]
   12d74:	str	r0, [sp, #68]	; 0x44
   12d78:	mov	r0, #0
   12d7c:	str	r0, [sp, #48]	; 0x30
   12d80:	mov	r0, #0
   12d84:	str	r0, [sp, #92]	; 0x5c
   12d88:	mov	r0, #0
   12d8c:	str	r0, [fp, #-76]	; 0xffffffb4
   12d90:	mov	r0, #0
   12d94:	cmp	r7, #10
   12d98:	bhi	14080 <__assert_fail@plt+0x2d0c>
   12d9c:	add	r1, pc, #28
   12da0:	mov	sl, r6
   12da4:	ldr	r6, [sp, #76]	; 0x4c
   12da8:	ldr	ip, [fp, #-84]	; 0xffffffac
   12dac:	ldr	lr, [sp, #84]	; 0x54
   12db0:	mov	r9, #0
   12db4:	mov	r3, #1
   12db8:	mov	r5, #0
   12dbc:	ldr	pc, [r1, r7, lsl #2]
   12dc0:	muleq	r1, r0, lr
   12dc4:	andeq	r2, r1, ip, asr #29
   12dc8:	andeq	r2, r1, r0, lsr #29
   12dcc:	andeq	r2, r1, r8, lsl #29
   12dd0:	andeq	r2, r1, r0, asr #29
   12dd4:	strdeq	r2, [r1], -r4
   12dd8:			; <UNDEFINED> instruction: 0x00012eb0
   12ddc:	andeq	r3, r1, r0, lsl #2
   12de0:	andeq	r2, r1, ip, ror #27
   12de4:	andeq	r2, r1, ip, ror #27
   12de8:	muleq	r1, r4, r0
   12dec:	mov	r9, r4
   12df0:	movw	r4, #30134	; 0x75b6
   12df4:	mov	r5, r8
   12df8:	mov	r8, r2
   12dfc:	mov	r0, #0
   12e00:	mov	r2, #5
   12e04:	movt	r4, #1
   12e08:	mov	r1, r4
   12e0c:	bl	11158 <dcgettext@plt>
   12e10:	cmp	r0, r4
   12e14:	str	r0, [sp, #68]	; 0x44
   12e18:	bne	12fa8 <__assert_fail@plt+0x1c34>
   12e1c:	bl	1667c <__assert_fail@plt+0x5308>
   12e20:	ldrb	r1, [r0]
   12e24:	and	r1, r1, #223	; 0xdf
   12e28:	cmp	r1, #71	; 0x47
   12e2c:	beq	12f74 <__assert_fail@plt+0x1c00>
   12e30:	cmp	r1, #85	; 0x55
   12e34:	bne	12f8c <__assert_fail@plt+0x1c18>
   12e38:	ldrb	r1, [r0, #1]
   12e3c:	and	r1, r1, #223	; 0xdf
   12e40:	cmp	r1, #84	; 0x54
   12e44:	bne	12f8c <__assert_fail@plt+0x1c18>
   12e48:	ldrb	r1, [r0, #2]
   12e4c:	and	r1, r1, #223	; 0xdf
   12e50:	cmp	r1, #70	; 0x46
   12e54:	bne	12f8c <__assert_fail@plt+0x1c18>
   12e58:	ldrb	r1, [r0, #3]
   12e5c:	cmp	r1, #45	; 0x2d
   12e60:	ldrbeq	r1, [r0, #4]
   12e64:	cmpeq	r1, #56	; 0x38
   12e68:	bne	12f8c <__assert_fail@plt+0x1c18>
   12e6c:	ldrb	r0, [r0, #5]
   12e70:	cmp	r0, #0
   12e74:	movw	r0, #30138	; 0x75ba
   12e78:	movt	r0, #1
   12e7c:	str	r0, [sp, #68]	; 0x44
   12e80:	bne	12f8c <__assert_fail@plt+0x1c18>
   12e84:	b	12fa8 <__assert_fail@plt+0x1c34>
   12e88:	mov	r0, #1
   12e8c:	b	12ecc <__assert_fail@plt+0x1b58>
   12e90:	mov	r7, #0
   12e94:	mov	r9, #0
   12e98:	mov	r3, r0
   12e9c:	b	12f6c <__assert_fail@plt+0x1bf8>
   12ea0:	tst	r8, #1
   12ea4:	bne	12ecc <__assert_fail@plt+0x1b58>
   12ea8:	mov	r3, r0
   12eac:	b	12f24 <__assert_fail@plt+0x1bb0>
   12eb0:	mov	r0, #1
   12eb4:	mov	r9, #0
   12eb8:	mov	r7, #5
   12ebc:	b	12f08 <__assert_fail@plt+0x1b94>
   12ec0:	mov	r3, #1
   12ec4:	tst	r8, #1
   12ec8:	beq	12f24 <__assert_fail@plt+0x1bb0>
   12ecc:	mov	r1, #1
   12ed0:	mov	r9, #0
   12ed4:	mov	r7, #2
   12ed8:	mov	r3, r0
   12edc:	mov	r5, #1
   12ee0:	str	r1, [fp, #-76]	; 0xffffffb4
   12ee4:	movw	r1, #30136	; 0x75b8
   12ee8:	movt	r1, #1
   12eec:	str	r1, [sp, #92]	; 0x5c
   12ef0:	b	13100 <__assert_fail@plt+0x1d8c>
   12ef4:	mov	r7, #5
   12ef8:	tst	r8, #1
   12efc:	beq	12f44 <__assert_fail@plt+0x1bd0>
   12f00:	mov	r0, #1
   12f04:	mov	r9, #0
   12f08:	str	r0, [fp, #-76]	; 0xffffffb4
   12f0c:	movw	r0, #30132	; 0x75b4
   12f10:	mov	r3, #1
   12f14:	mov	r5, #1
   12f18:	movt	r0, #1
   12f1c:	str	r0, [sp, #92]	; 0x5c
   12f20:	b	13100 <__assert_fail@plt+0x1d8c>
   12f24:	cmp	sl, #0
   12f28:	mov	r9, #1
   12f2c:	mov	r7, #2
   12f30:	movne	r0, #39	; 0x27
   12f34:	strbne	r0, [r6]
   12f38:	movw	r0, #30136	; 0x75b8
   12f3c:	movt	r0, #1
   12f40:	b	12f60 <__assert_fail@plt+0x1bec>
   12f44:	cmp	sl, #0
   12f48:	mov	r9, #1
   12f4c:	mov	r3, #1
   12f50:	movne	r0, #34	; 0x22
   12f54:	strbne	r0, [r6]
   12f58:	movw	r0, #30132	; 0x75b4
   12f5c:	movt	r0, #1
   12f60:	str	r0, [sp, #92]	; 0x5c
   12f64:	mov	r0, #1
   12f68:	str	r0, [fp, #-76]	; 0xffffffb4
   12f6c:	mov	r5, #0
   12f70:	b	13100 <__assert_fail@plt+0x1d8c>
   12f74:	ldrb	r1, [r0, #1]
   12f78:	and	r1, r1, #223	; 0xdf
   12f7c:	cmp	r1, #66	; 0x42
   12f80:	ldrbeq	r1, [r0, #2]
   12f84:	cmpeq	r1, #49	; 0x31
   12f88:	beq	13ea8 <__assert_fail@plt+0x2b34>
   12f8c:	movw	r0, #30136	; 0x75b8
   12f90:	movw	r1, #30132	; 0x75b4
   12f94:	cmp	r7, #9
   12f98:	movt	r0, #1
   12f9c:	movt	r1, #1
   12fa0:	moveq	r0, r1
   12fa4:	str	r0, [sp, #68]	; 0x44
   12fa8:	movw	r4, #30136	; 0x75b8
   12fac:	mov	r0, #0
   12fb0:	mov	r2, #5
   12fb4:	movt	r4, #1
   12fb8:	mov	r1, r4
   12fbc:	bl	11158 <dcgettext@plt>
   12fc0:	cmp	r0, r4
   12fc4:	str	r0, [sp, #72]	; 0x48
   12fc8:	beq	12fd8 <__assert_fail@plt+0x1c64>
   12fcc:	mov	r4, r9
   12fd0:	mov	r2, r8
   12fd4:	b	13090 <__assert_fail@plt+0x1d1c>
   12fd8:	bl	1667c <__assert_fail@plt+0x5308>
   12fdc:	ldrb	r1, [r0]
   12fe0:	mov	r4, r9
   12fe4:	and	r1, r1, #223	; 0xdf
   12fe8:	cmp	r1, #71	; 0x47
   12fec:	beq	13048 <__assert_fail@plt+0x1cd4>
   12ff0:	cmp	r1, #85	; 0x55
   12ff4:	mov	r2, r8
   12ff8:	bne	13070 <__assert_fail@plt+0x1cfc>
   12ffc:	ldrb	r1, [r0, #1]
   13000:	and	r1, r1, #223	; 0xdf
   13004:	cmp	r1, #84	; 0x54
   13008:	bne	13070 <__assert_fail@plt+0x1cfc>
   1300c:	ldrb	r1, [r0, #2]
   13010:	and	r1, r1, #223	; 0xdf
   13014:	cmp	r1, #70	; 0x46
   13018:	ldrbeq	r1, [r0, #3]
   1301c:	cmpeq	r1, #45	; 0x2d
   13020:	bne	13070 <__assert_fail@plt+0x1cfc>
   13024:	ldrb	r1, [r0, #4]
   13028:	cmp	r1, #56	; 0x38
   1302c:	ldrbeq	r0, [r0, #5]
   13030:	cmpeq	r0, #0
   13034:	bne	13070 <__assert_fail@plt+0x1cfc>
   13038:	movw	r0, #30142	; 0x75be
   1303c:	movt	r0, #1
   13040:	str	r0, [sp, #72]	; 0x48
   13044:	b	13090 <__assert_fail@plt+0x1d1c>
   13048:	ldrb	r1, [r0, #1]
   1304c:	mov	r2, r8
   13050:	and	r1, r1, #223	; 0xdf
   13054:	cmp	r1, #66	; 0x42
   13058:	bne	13070 <__assert_fail@plt+0x1cfc>
   1305c:	ldrb	r1, [r0, #2]
   13060:	cmp	r1, #49	; 0x31
   13064:	ldrbeq	r1, [r0, #3]
   13068:	cmpeq	r1, #56	; 0x38
   1306c:	beq	13eec <__assert_fail@plt+0x2b78>
   13070:	movw	r0, #30136	; 0x75b8
   13074:	cmp	r7, #9
   13078:	movt	r0, #1
   1307c:	mov	r1, r0
   13080:	movw	r0, #30132	; 0x75b4
   13084:	movt	r0, #1
   13088:	moveq	r1, r0
   1308c:	str	r1, [sp, #72]	; 0x48
   13090:	mov	r8, r5
   13094:	mov	r9, #0
   13098:	tst	r8, #1
   1309c:	mov	r5, r8
   130a0:	str	r2, [fp, #-48]	; 0xffffffd0
   130a4:	bne	130dc <__assert_fail@plt+0x1d68>
   130a8:	ldr	r0, [sp, #68]	; 0x44
   130ac:	ldrb	r0, [r0]
   130b0:	cmp	r0, #0
   130b4:	beq	130dc <__assert_fail@plt+0x1d68>
   130b8:	ldr	r1, [sp, #68]	; 0x44
   130bc:	mov	r9, #0
   130c0:	add	r1, r1, #1
   130c4:	cmp	r9, sl
   130c8:	strbcc	r0, [r6, r9]
   130cc:	ldrb	r0, [r1, r9]
   130d0:	add	r9, r9, #1
   130d4:	cmp	r0, #0
   130d8:	bne	130c4 <__assert_fail@plt+0x1d50>
   130dc:	ldr	r8, [sp, #72]	; 0x48
   130e0:	mov	r0, r8
   130e4:	bl	11260 <strlen@plt>
   130e8:	ldr	ip, [fp, #-84]	; 0xffffffac
   130ec:	ldr	lr, [sp, #84]	; 0x54
   130f0:	ldr	r2, [fp, #-48]	; 0xffffffd0
   130f4:	str	r0, [fp, #-76]	; 0xffffffb4
   130f8:	str	r8, [sp, #92]	; 0x5c
   130fc:	mov	r3, #1
   13100:	ldr	r0, [fp, #16]
   13104:	str	r7, [fp, #-64]	; 0xffffffc0
   13108:	str	r5, [fp, #-72]	; 0xffffffb8
   1310c:	str	r3, [sp, #80]	; 0x50
   13110:	cmp	r0, #0
   13114:	movwne	r0, #1
   13118:	and	r0, r0, r5
   1311c:	str	r0, [fp, #-88]	; 0xffffffa8
   13120:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13124:	cmp	r0, #0
   13128:	movwne	r0, #1
   1312c:	subs	r7, r7, #2
   13130:	and	r1, r0, r5
   13134:	str	r7, [fp, #-80]	; 0xffffffb0
   13138:	and	r1, r3, r1
   1313c:	str	r1, [sp, #40]	; 0x28
   13140:	clz	r1, r7
   13144:	lsr	r1, r1, #5
   13148:	and	r1, r1, r5
   1314c:	eor	r5, r5, #1
   13150:	str	r1, [sp, #36]	; 0x24
   13154:	mov	r1, r7
   13158:	str	r5, [sp, #88]	; 0x58
   1315c:	mov	r7, #0
   13160:	movwne	r1, #1
   13164:	orr	r5, r1, r5
   13168:	and	r1, r1, r3
   1316c:	and	r0, r0, r1
   13170:	str	r5, [sp, #60]	; 0x3c
   13174:	str	r1, [fp, #-68]	; 0xffffffbc
   13178:	str	r0, [fp, #-60]	; 0xffffffc4
   1317c:	eor	r0, r3, #1
   13180:	str	r0, [sp, #44]	; 0x2c
   13184:	cmn	lr, #1
   13188:	beq	13198 <__assert_fail@plt+0x1e24>
   1318c:	cmp	r7, lr
   13190:	bne	131a4 <__assert_fail@plt+0x1e30>
   13194:	b	13e1c <__assert_fail@plt+0x2aa8>
   13198:	ldrb	r0, [ip, r7]
   1319c:	cmp	r0, #0
   131a0:	beq	13e24 <__assert_fail@plt+0x2ab0>
   131a4:	ldr	r0, [fp, #-60]	; 0xffffffc4
   131a8:	mov	r8, #0
   131ac:	str	r4, [fp, #-52]	; 0xffffffcc
   131b0:	str	r2, [fp, #-48]	; 0xffffffd0
   131b4:	cmp	r0, #0
   131b8:	beq	131ec <__assert_fail@plt+0x1e78>
   131bc:	ldr	r0, [fp, #-76]	; 0xffffffb4
   131c0:	add	r4, r7, r0
   131c4:	cmp	r0, #2
   131c8:	bcc	131e4 <__assert_fail@plt+0x1e70>
   131cc:	cmn	lr, #1
   131d0:	bne	131e4 <__assert_fail@plt+0x1e70>
   131d4:	mov	r0, ip
   131d8:	bl	11260 <strlen@plt>
   131dc:	ldr	ip, [fp, #-84]	; 0xffffffac
   131e0:	mov	lr, r0
   131e4:	cmp	r4, lr
   131e8:	bls	13204 <__assert_fail@plt+0x1e90>
   131ec:	mov	r0, #0
   131f0:	str	r0, [fp, #-56]	; 0xffffffc8
   131f4:	ldrb	r5, [ip, r7]
   131f8:	cmp	r5, #126	; 0x7e
   131fc:	bls	13254 <__assert_fail@plt+0x1ee0>
   13200:	b	1365c <__assert_fail@plt+0x22e8>
   13204:	ldr	r1, [sp, #92]	; 0x5c
   13208:	ldr	r2, [fp, #-76]	; 0xffffffb4
   1320c:	add	r0, ip, r7
   13210:	mov	r4, lr
   13214:	bl	1114c <memcmp@plt>
   13218:	ldr	r2, [sp, #88]	; 0x58
   1321c:	cmp	r0, #0
   13220:	mov	r1, r0
   13224:	movwne	r1, #1
   13228:	orr	r1, r1, r2
   1322c:	tst	r1, #1
   13230:	beq	13f30 <__assert_fail@plt+0x2bbc>
   13234:	ldr	ip, [fp, #-84]	; 0xffffffac
   13238:	clz	r0, r0
   1323c:	mov	lr, r4
   13240:	lsr	r0, r0, #5
   13244:	str	r0, [fp, #-56]	; 0xffffffc8
   13248:	ldrb	r5, [ip, r7]
   1324c:	cmp	r5, #126	; 0x7e
   13250:	bhi	1365c <__assert_fail@plt+0x22e8>
   13254:	add	r3, pc, #16
   13258:	mov	r4, #1
   1325c:	mov	r2, #110	; 0x6e
   13260:	mov	r0, #97	; 0x61
   13264:	mov	r1, #0
   13268:	ldr	pc, [r3, r5, lsl #2]
   1326c:	andeq	r3, r1, ip, lsr r5
   13270:	andeq	r3, r1, ip, asr r6
   13274:	andeq	r3, r1, ip, asr r6
   13278:	andeq	r3, r1, ip, asr r6
   1327c:	andeq	r3, r1, ip, asr r6
   13280:	andeq	r3, r1, ip, asr r6
   13284:	andeq	r3, r1, ip, asr r6
   13288:	andeq	r3, r1, r8, lsr r7
   1328c:	andeq	r3, r1, ip, lsl r5
   13290:	andeq	r3, r1, r4, lsl #10
   13294:	andeq	r3, r1, r8, lsr #10
   13298:			; <UNDEFINED> instruction: 0x000135b8
   1329c:	strdeq	r3, [r1], -ip
   132a0:	andeq	r3, r1, r4, lsr #10
   132a4:	andeq	r3, r1, ip, asr r6
   132a8:	andeq	r3, r1, ip, asr r6
   132ac:	andeq	r3, r1, ip, asr r6
   132b0:	andeq	r3, r1, ip, asr r6
   132b4:	andeq	r3, r1, ip, asr r6
   132b8:	andeq	r3, r1, ip, asr r6
   132bc:	andeq	r3, r1, ip, asr r6
   132c0:	andeq	r3, r1, ip, asr r6
   132c4:	andeq	r3, r1, ip, asr r6
   132c8:	andeq	r3, r1, ip, asr r6
   132cc:	andeq	r3, r1, ip, asr r6
   132d0:	andeq	r3, r1, ip, asr r6
   132d4:	andeq	r3, r1, ip, asr r6
   132d8:	andeq	r3, r1, ip, asr r6
   132dc:	andeq	r3, r1, ip, asr r6
   132e0:	andeq	r3, r1, ip, asr r6
   132e4:	andeq	r3, r1, ip, asr r6
   132e8:	andeq	r3, r1, ip, asr r6
   132ec:			; <UNDEFINED> instruction: 0x000136b4
   132f0:			; <UNDEFINED> instruction: 0x000136b8
   132f4:			; <UNDEFINED> instruction: 0x000136b8
   132f8:	andeq	r3, r1, r8, lsl #9
   132fc:			; <UNDEFINED> instruction: 0x000136b8
   13300:	andeq	r3, r1, r8, ror #8
   13304:			; <UNDEFINED> instruction: 0x000136b8
   13308:	andeq	r3, r1, r0, asr #11
   1330c:			; <UNDEFINED> instruction: 0x000136b8
   13310:			; <UNDEFINED> instruction: 0x000136b8
   13314:			; <UNDEFINED> instruction: 0x000136b8
   13318:	andeq	r3, r1, r8, ror #8
   1331c:	andeq	r3, r1, r8, ror #8
   13320:	andeq	r3, r1, r8, ror #8
   13324:	andeq	r3, r1, r8, ror #8
   13328:	andeq	r3, r1, r8, ror #8
   1332c:	andeq	r3, r1, r8, ror #8
   13330:	andeq	r3, r1, r8, ror #8
   13334:	andeq	r3, r1, r8, ror #8
   13338:	andeq	r3, r1, r8, ror #8
   1333c:	andeq	r3, r1, r8, ror #8
   13340:	andeq	r3, r1, r8, ror #8
   13344:	andeq	r3, r1, r8, ror #8
   13348:	andeq	r3, r1, r8, ror #8
   1334c:	andeq	r3, r1, r8, ror #8
   13350:	andeq	r3, r1, r8, ror #8
   13354:	andeq	r3, r1, r8, ror #8
   13358:			; <UNDEFINED> instruction: 0x000136b8
   1335c:			; <UNDEFINED> instruction: 0x000136b8
   13360:			; <UNDEFINED> instruction: 0x000136b8
   13364:			; <UNDEFINED> instruction: 0x000136b8
   13368:	andeq	r3, r1, ip, ror r5
   1336c:	andeq	r3, r1, ip, asr r6
   13370:	andeq	r3, r1, r8, ror #8
   13374:	andeq	r3, r1, r8, ror #8
   13378:	andeq	r3, r1, r8, ror #8
   1337c:	andeq	r3, r1, r8, ror #8
   13380:	andeq	r3, r1, r8, ror #8
   13384:	andeq	r3, r1, r8, ror #8
   13388:	andeq	r3, r1, r8, ror #8
   1338c:	andeq	r3, r1, r8, ror #8
   13390:	andeq	r3, r1, r8, ror #8
   13394:	andeq	r3, r1, r8, ror #8
   13398:	andeq	r3, r1, r8, ror #8
   1339c:	andeq	r3, r1, r8, ror #8
   133a0:	andeq	r3, r1, r8, ror #8
   133a4:	andeq	r3, r1, r8, ror #8
   133a8:	andeq	r3, r1, r8, ror #8
   133ac:	andeq	r3, r1, r8, ror #8
   133b0:	andeq	r3, r1, r8, ror #8
   133b4:	andeq	r3, r1, r8, ror #8
   133b8:	andeq	r3, r1, r8, ror #8
   133bc:	andeq	r3, r1, r8, ror #8
   133c0:	andeq	r3, r1, r8, ror #8
   133c4:	andeq	r3, r1, r8, ror #8
   133c8:	andeq	r3, r1, r8, ror #8
   133cc:	andeq	r3, r1, r8, ror #8
   133d0:	andeq	r3, r1, r8, ror #8
   133d4:	andeq	r3, r1, r8, ror #8
   133d8:			; <UNDEFINED> instruction: 0x000136b8
   133dc:	andeq	r3, r1, r8, asr #9
   133e0:	andeq	r3, r1, r8, ror #8
   133e4:			; <UNDEFINED> instruction: 0x000136b8
   133e8:	andeq	r3, r1, r8, ror #8
   133ec:			; <UNDEFINED> instruction: 0x000136b8
   133f0:	andeq	r3, r1, r8, ror #8
   133f4:	andeq	r3, r1, r8, ror #8
   133f8:	andeq	r3, r1, r8, ror #8
   133fc:	andeq	r3, r1, r8, ror #8
   13400:	andeq	r3, r1, r8, ror #8
   13404:	andeq	r3, r1, r8, ror #8
   13408:	andeq	r3, r1, r8, ror #8
   1340c:	andeq	r3, r1, r8, ror #8
   13410:	andeq	r3, r1, r8, ror #8
   13414:	andeq	r3, r1, r8, ror #8
   13418:	andeq	r3, r1, r8, ror #8
   1341c:	andeq	r3, r1, r8, ror #8
   13420:	andeq	r3, r1, r8, ror #8
   13424:	andeq	r3, r1, r8, ror #8
   13428:	andeq	r3, r1, r8, ror #8
   1342c:	andeq	r3, r1, r8, ror #8
   13430:	andeq	r3, r1, r8, ror #8
   13434:	andeq	r3, r1, r8, ror #8
   13438:	andeq	r3, r1, r8, ror #8
   1343c:	andeq	r3, r1, r8, ror #8
   13440:	andeq	r3, r1, r8, ror #8
   13444:	andeq	r3, r1, r8, ror #8
   13448:	andeq	r3, r1, r8, ror #8
   1344c:	andeq	r3, r1, r8, ror #8
   13450:	andeq	r3, r1, r8, ror #8
   13454:	andeq	r3, r1, r8, ror #8
   13458:	andeq	r3, r1, r8, lsr #9
   1345c:			; <UNDEFINED> instruction: 0x000136b8
   13460:	andeq	r3, r1, r8, lsr #9
   13464:	andeq	r3, r1, r8, lsl #9
   13468:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1346c:	cmp	r0, #0
   13470:	beq	1374c <__assert_fail@plt+0x23d8>
   13474:	ldr	r0, [fp, #16]
   13478:	cmp	r0, #0
   1347c:	mov	r0, r5
   13480:	bne	1375c <__assert_fail@plt+0x23e8>
   13484:	b	1377c <__assert_fail@plt+0x2408>
   13488:	mov	r4, #0
   1348c:	cmp	r7, #0
   13490:	beq	136b4 <__assert_fail@plt+0x2340>
   13494:	mov	r8, #0
   13498:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1349c:	cmp	r0, #0
   134a0:	bne	13474 <__assert_fail@plt+0x2100>
   134a4:	b	1374c <__assert_fail@plt+0x23d8>
   134a8:	mov	r4, #0
   134ac:	cmn	lr, #1
   134b0:	beq	1368c <__assert_fail@plt+0x2318>
   134b4:	cmp	r7, #0
   134b8:	bne	13494 <__assert_fail@plt+0x2120>
   134bc:	cmp	lr, #1
   134c0:	beq	136b4 <__assert_fail@plt+0x2340>
   134c4:	b	13494 <__assert_fail@plt+0x2120>
   134c8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   134cc:	cmp	r0, #2
   134d0:	bne	136e4 <__assert_fail@plt+0x2370>
   134d4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   134d8:	tst	r0, #1
   134dc:	bne	13f44 <__assert_fail@plt+0x2bd0>
   134e0:	mov	r8, #0
   134e4:	mov	r0, #92	; 0x5c
   134e8:	mov	r4, #0
   134ec:	cmp	r8, #0
   134f0:	beq	13704 <__assert_fail@plt+0x2390>
   134f4:	ldr	r2, [fp, #-48]	; 0xffffffd0
   134f8:	b	137f8 <__assert_fail@plt+0x2484>
   134fc:	mov	r0, #102	; 0x66
   13500:	b	13738 <__assert_fail@plt+0x23c4>
   13504:	mov	r2, #116	; 0x74
   13508:	ldr	r0, [sp, #60]	; 0x3c
   1350c:	tst	r0, #1
   13510:	mov	r0, r2
   13514:	bne	13738 <__assert_fail@plt+0x23c4>
   13518:	b	13f44 <__assert_fail@plt+0x2bd0>
   1351c:	mov	r0, #98	; 0x62
   13520:	b	13738 <__assert_fail@plt+0x23c4>
   13524:	mov	r2, #114	; 0x72
   13528:	ldr	r0, [sp, #60]	; 0x3c
   1352c:	tst	r0, #1
   13530:	mov	r0, r2
   13534:	bne	13738 <__assert_fail@plt+0x23c4>
   13538:	b	13f44 <__assert_fail@plt+0x2bd0>
   1353c:	ldr	r0, [sp, #80]	; 0x50
   13540:	tst	r0, #1
   13544:	beq	13820 <__assert_fail@plt+0x24ac>
   13548:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1354c:	tst	r0, #1
   13550:	bne	1406c <__assert_fail@plt+0x2cf8>
   13554:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13558:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1355c:	cmp	r0, #2
   13560:	ldr	r0, [fp, #-80]	; 0xffffffb0
   13564:	movwne	r0, #1
   13568:	orr	r0, r0, r2
   1356c:	tst	r0, #1
   13570:	beq	13b18 <__assert_fail@plt+0x27a4>
   13574:	mov	r0, r9
   13578:	b	13b4c <__assert_fail@plt+0x27d8>
   1357c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13580:	mov	r8, #0
   13584:	mov	r5, #63	; 0x3f
   13588:	cmp	r0, #5
   1358c:	beq	139d4 <__assert_fail@plt+0x2660>
   13590:	cmp	r0, #2
   13594:	bne	13a84 <__assert_fail@plt+0x2710>
   13598:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1359c:	tst	r0, #1
   135a0:	bne	13f44 <__assert_fail@plt+0x2bd0>
   135a4:	mov	r4, #0
   135a8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   135ac:	cmp	r0, #0
   135b0:	bne	13474 <__assert_fail@plt+0x2100>
   135b4:	b	1374c <__assert_fail@plt+0x23d8>
   135b8:	mov	r0, #118	; 0x76
   135bc:	b	13738 <__assert_fail@plt+0x23c4>
   135c0:	mov	r0, #1
   135c4:	mov	r5, #39	; 0x27
   135c8:	str	r0, [sp, #52]	; 0x34
   135cc:	ldr	r0, [fp, #-64]	; 0xffffffc0
   135d0:	cmp	r0, #2
   135d4:	bne	13648 <__assert_fail@plt+0x22d4>
   135d8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   135dc:	tst	r0, #1
   135e0:	bne	13f44 <__assert_fail@plt+0x2bd0>
   135e4:	ldr	r2, [sp, #48]	; 0x30
   135e8:	clz	r1, sl
   135ec:	mov	r8, #0
   135f0:	lsr	r1, r1, #5
   135f4:	cmp	r2, #0
   135f8:	mov	r0, r2
   135fc:	movwne	r0, #1
   13600:	orrs	r0, r0, r1
   13604:	moveq	r2, sl
   13608:	moveq	sl, r0
   1360c:	cmp	r9, sl
   13610:	str	r2, [sp, #48]	; 0x30
   13614:	movcc	r0, #39	; 0x27
   13618:	strbcc	r0, [r6, r9]
   1361c:	add	r0, r9, #1
   13620:	cmp	r0, sl
   13624:	movcc	r1, #92	; 0x5c
   13628:	strbcc	r1, [r6, r0]
   1362c:	add	r0, r9, #2
   13630:	add	r9, r9, #3
   13634:	cmp	r0, sl
   13638:	movcc	r1, #39	; 0x27
   1363c:	strbcc	r1, [r6, r0]
   13640:	mov	r0, #0
   13644:	str	r0, [fp, #-48]	; 0xffffffd0
   13648:	mov	r4, #1
   1364c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13650:	cmp	r0, #0
   13654:	bne	13474 <__assert_fail@plt+0x2100>
   13658:	b	1374c <__assert_fail@plt+0x23d8>
   1365c:	ldr	r0, [sp, #32]
   13660:	cmp	r0, #1
   13664:	bne	13850 <__assert_fail@plt+0x24dc>
   13668:	str	lr, [sp, #84]	; 0x54
   1366c:	bl	1123c <__ctype_b_loc@plt>
   13670:	ldr	r0, [r0]
   13674:	ldr	ip, [fp, #-84]	; 0xffffffac
   13678:	mov	r1, #1
   1367c:	add	r0, r0, r5, lsl #1
   13680:	ldrb	r0, [r0, #1]
   13684:	ubfx	r4, r0, #6, #1
   13688:	b	13c48 <__assert_fail@plt+0x28d4>
   1368c:	cmp	r7, #0
   13690:	ldrbeq	r0, [ip, #1]
   13694:	cmpeq	r0, #0
   13698:	beq	136b4 <__assert_fail@plt+0x2340>
   1369c:	mvn	lr, #0
   136a0:	mov	r8, #0
   136a4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   136a8:	cmp	r0, #0
   136ac:	bne	13474 <__assert_fail@plt+0x2100>
   136b0:	b	1374c <__assert_fail@plt+0x23d8>
   136b4:	mov	r1, #1
   136b8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   136bc:	cmp	r0, #2
   136c0:	bne	136d0 <__assert_fail@plt+0x235c>
   136c4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   136c8:	tst	r0, #1
   136cc:	bne	13f44 <__assert_fail@plt+0x2bd0>
   136d0:	mov	r4, r1
   136d4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   136d8:	cmp	r0, #0
   136dc:	bne	13474 <__assert_fail@plt+0x2100>
   136e0:	b	1374c <__assert_fail@plt+0x23d8>
   136e4:	ldr	r1, [sp, #40]	; 0x28
   136e8:	mov	r8, #0
   136ec:	mov	r0, #92	; 0x5c
   136f0:	cmp	r1, #0
   136f4:	beq	13738 <__assert_fail@plt+0x23c4>
   136f8:	mov	r4, #0
   136fc:	cmp	r8, #0
   13700:	bne	134f4 <__assert_fail@plt+0x2180>
   13704:	ldr	r2, [fp, #-48]	; 0xffffffd0
   13708:	tst	r2, #1
   1370c:	beq	137f8 <__assert_fail@plt+0x2484>
   13710:	cmp	r9, sl
   13714:	movcc	r1, #39	; 0x27
   13718:	strbcc	r1, [r6, r9]
   1371c:	add	r1, r9, #1
   13720:	add	r9, r9, #2
   13724:	cmp	r1, sl
   13728:	movcc	r2, #39	; 0x27
   1372c:	strbcc	r2, [r6, r1]
   13730:	mov	r2, #0
   13734:	b	137f8 <__assert_fail@plt+0x2484>
   13738:	ldr	r1, [sp, #80]	; 0x50
   1373c:	mov	r4, #0
   13740:	mov	r8, #0
   13744:	tst	r1, #1
   13748:	bne	13788 <__assert_fail@plt+0x2414>
   1374c:	ldr	r0, [fp, #-88]	; 0xffffffa8
   13750:	cmp	r0, #0
   13754:	mov	r0, r5
   13758:	beq	1377c <__assert_fail@plt+0x2408>
   1375c:	ldr	r1, [fp, #16]
   13760:	ubfx	r0, r5, #5, #3
   13764:	mov	r2, #1
   13768:	ldr	r0, [r1, r0, lsl #2]
   1376c:	and	r1, r5, #31
   13770:	tst	r0, r2, lsl r1
   13774:	mov	r0, r5
   13778:	bne	13788 <__assert_fail@plt+0x2414>
   1377c:	ldr	r1, [fp, #-56]	; 0xffffffc8
   13780:	cmp	r1, #0
   13784:	beq	13be0 <__assert_fail@plt+0x286c>
   13788:	ldr	r1, [fp, #-72]	; 0xffffffb8
   1378c:	tst	r1, #1
   13790:	bne	13f24 <__assert_fail@plt+0x2bb0>
   13794:	ldr	r1, [fp, #-64]	; 0xffffffc0
   13798:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1379c:	cmp	r1, #2
   137a0:	ldr	r1, [fp, #-80]	; 0xffffffb0
   137a4:	movwne	r1, #1
   137a8:	orr	r1, r1, r2
   137ac:	tst	r1, #1
   137b0:	bne	137e8 <__assert_fail@plt+0x2474>
   137b4:	cmp	r9, sl
   137b8:	movcc	r1, #39	; 0x27
   137bc:	strbcc	r1, [r6, r9]
   137c0:	add	r1, r9, #1
   137c4:	cmp	r1, sl
   137c8:	movcc	r2, #36	; 0x24
   137cc:	strbcc	r2, [r6, r1]
   137d0:	add	r1, r9, #2
   137d4:	add	r9, r9, #3
   137d8:	cmp	r1, sl
   137dc:	movcc	r2, #39	; 0x27
   137e0:	strbcc	r2, [r6, r1]
   137e4:	mov	r2, #1
   137e8:	cmp	r9, sl
   137ec:	movcc	r1, #92	; 0x5c
   137f0:	strbcc	r1, [r6, r9]
   137f4:	add	r9, r9, #1
   137f8:	cmp	r9, sl
   137fc:	add	r7, r7, #1
   13800:	strbcc	r0, [r6, r9]
   13804:	ldr	r0, [fp, #-52]	; 0xffffffcc
   13808:	add	r9, r9, #1
   1380c:	and	r0, r0, r4
   13810:	mov	r4, r0
   13814:	cmn	lr, #1
   13818:	bne	1318c <__assert_fail@plt+0x1e18>
   1381c:	b	13198 <__assert_fail@plt+0x1e24>
   13820:	ldr	r0, [sp, #28]
   13824:	mov	r4, #0
   13828:	mov	r8, #0
   1382c:	mov	r5, #0
   13830:	cmp	r0, #0
   13834:	beq	1374c <__assert_fail@plt+0x23d8>
   13838:	ldr	r4, [fp, #-52]	; 0xffffffcc
   1383c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   13840:	add	r7, r7, #1
   13844:	cmn	lr, #1
   13848:	bne	1318c <__assert_fail@plt+0x1e18>
   1384c:	b	13198 <__assert_fail@plt+0x1e24>
   13850:	mov	r0, #0
   13854:	cmn	lr, #1
   13858:	str	r0, [fp, #-36]	; 0xffffffdc
   1385c:	str	r0, [fp, #-40]	; 0xffffffd8
   13860:	bne	13874 <__assert_fail@plt+0x2500>
   13864:	mov	r0, ip
   13868:	bl	11260 <strlen@plt>
   1386c:	ldr	ip, [fp, #-84]	; 0xffffffac
   13870:	mov	lr, r0
   13874:	ldr	r0, [sp, #36]	; 0x24
   13878:	str	sl, [sp, #56]	; 0x38
   1387c:	str	lr, [sp, #84]	; 0x54
   13880:	cmp	r0, #0
   13884:	beq	13a9c <__assert_fail@plt+0x2728>
   13888:	add	r0, ip, r7
   1388c:	mov	r4, #1
   13890:	mov	r6, #0
   13894:	sub	sl, fp, #40	; 0x28
   13898:	str	r0, [sp, #20]
   1389c:	str	r6, [sp, #64]	; 0x40
   138a0:	add	r6, r6, r7
   138a4:	sub	r0, fp, #44	; 0x2c
   138a8:	mov	r3, sl
   138ac:	add	r1, ip, r6
   138b0:	sub	r2, lr, r6
   138b4:	bl	166b4 <__assert_fail@plt+0x5340>
   138b8:	cmn	r0, #2
   138bc:	beq	13bf8 <__assert_fail@plt+0x2884>
   138c0:	ldr	sl, [sp, #56]	; 0x38
   138c4:	cmn	r0, #1
   138c8:	beq	13bec <__assert_fail@plt+0x2878>
   138cc:	cmp	r0, #0
   138d0:	beq	13bf0 <__assert_fail@plt+0x287c>
   138d4:	cmp	r0, #2
   138d8:	bcc	13998 <__assert_fail@plt+0x2624>
   138dc:	ldr	r1, [sp, #64]	; 0x40
   138e0:	ldr	r2, [sp, #20]
   138e4:	add	r1, r2, r1
   138e8:	mov	r2, #1
   138ec:	ldrb	r3, [r1, r2]
   138f0:	sub	r3, r3, #91	; 0x5b
   138f4:	cmp	r3, #33	; 0x21
   138f8:	bhi	1398c <__assert_fail@plt+0x2618>
   138fc:	add	r6, pc, #0
   13900:	ldr	pc, [r6, r3, lsl #2]
   13904:	andeq	r3, r1, r0, asr pc
   13908:	andeq	r3, r1, r0, asr pc
   1390c:	andeq	r3, r1, ip, lsl #19
   13910:	andeq	r3, r1, r0, asr pc
   13914:	andeq	r3, r1, ip, lsl #19
   13918:	andeq	r3, r1, r0, asr pc
   1391c:	andeq	r3, r1, ip, lsl #19
   13920:	andeq	r3, r1, ip, lsl #19
   13924:	andeq	r3, r1, ip, lsl #19
   13928:	andeq	r3, r1, ip, lsl #19
   1392c:	andeq	r3, r1, ip, lsl #19
   13930:	andeq	r3, r1, ip, lsl #19
   13934:	andeq	r3, r1, ip, lsl #19
   13938:	andeq	r3, r1, ip, lsl #19
   1393c:	andeq	r3, r1, ip, lsl #19
   13940:	andeq	r3, r1, ip, lsl #19
   13944:	andeq	r3, r1, ip, lsl #19
   13948:	andeq	r3, r1, ip, lsl #19
   1394c:	andeq	r3, r1, ip, lsl #19
   13950:	andeq	r3, r1, ip, lsl #19
   13954:	andeq	r3, r1, ip, lsl #19
   13958:	andeq	r3, r1, ip, lsl #19
   1395c:	andeq	r3, r1, ip, lsl #19
   13960:	andeq	r3, r1, ip, lsl #19
   13964:	andeq	r3, r1, ip, lsl #19
   13968:	andeq	r3, r1, ip, lsl #19
   1396c:	andeq	r3, r1, ip, lsl #19
   13970:	andeq	r3, r1, ip, lsl #19
   13974:	andeq	r3, r1, ip, lsl #19
   13978:	andeq	r3, r1, ip, lsl #19
   1397c:	andeq	r3, r1, ip, lsl #19
   13980:	andeq	r3, r1, ip, lsl #19
   13984:	andeq	r3, r1, ip, lsl #19
   13988:	andeq	r3, r1, r0, asr pc
   1398c:	add	r2, r2, #1
   13990:	cmp	r2, r0
   13994:	bcc	138ec <__assert_fail@plt+0x2578>
   13998:	ldr	r6, [sp, #64]	; 0x40
   1399c:	add	r6, r0, r6
   139a0:	ldr	r0, [fp, #-44]	; 0xffffffd4
   139a4:	bl	11188 <iswprint@plt>
   139a8:	cmp	r0, #0
   139ac:	sub	sl, fp, #40	; 0x28
   139b0:	movwne	r0, #1
   139b4:	and	r4, r4, r0
   139b8:	mov	r0, sl
   139bc:	bl	11140 <mbsinit@plt>
   139c0:	ldr	ip, [fp, #-84]	; 0xffffffac
   139c4:	ldr	lr, [sp, #84]	; 0x54
   139c8:	cmp	r0, #0
   139cc:	beq	1389c <__assert_fail@plt+0x2528>
   139d0:	b	13c3c <__assert_fail@plt+0x28c8>
   139d4:	ldr	r0, [sp, #24]
   139d8:	cmp	r0, #0
   139dc:	beq	13a84 <__assert_fail@plt+0x2710>
   139e0:	add	r0, r7, #2
   139e4:	cmp	r0, lr
   139e8:	bcs	13a84 <__assert_fail@plt+0x2710>
   139ec:	add	r1, ip, r7
   139f0:	ldrb	r1, [r1, #1]
   139f4:	cmp	r1, #63	; 0x3f
   139f8:	bne	13a84 <__assert_fail@plt+0x2710>
   139fc:	ldrb	r5, [ip, r0]
   13a00:	sub	r1, r5, #33	; 0x21
   13a04:	cmp	r1, #29
   13a08:	bhi	13a84 <__assert_fail@plt+0x2710>
   13a0c:	movw	r3, #20929	; 0x51c1
   13a10:	mov	r2, #1
   13a14:	movt	r3, #14336	; 0x3800
   13a18:	tst	r3, r2, lsl r1
   13a1c:	beq	13a84 <__assert_fail@plt+0x2710>
   13a20:	ldr	r1, [fp, #-72]	; 0xffffffb8
   13a24:	tst	r1, #1
   13a28:	bne	14074 <__assert_fail@plt+0x2d00>
   13a2c:	cmp	r9, sl
   13a30:	mov	r7, r0
   13a34:	mov	r4, #0
   13a38:	movcc	r1, #63	; 0x3f
   13a3c:	strbcc	r1, [r6, r9]
   13a40:	add	r1, r9, #1
   13a44:	cmp	r1, sl
   13a48:	movcc	r2, #34	; 0x22
   13a4c:	strbcc	r2, [r6, r1]
   13a50:	add	r1, r9, #2
   13a54:	cmp	r1, sl
   13a58:	movcc	r2, #34	; 0x22
   13a5c:	strbcc	r2, [r6, r1]
   13a60:	add	r1, r9, #3
   13a64:	add	r9, r9, #4
   13a68:	cmp	r1, sl
   13a6c:	movcc	r2, #63	; 0x3f
   13a70:	strbcc	r2, [r6, r1]
   13a74:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13a78:	cmp	r0, #0
   13a7c:	bne	13474 <__assert_fail@plt+0x2100>
   13a80:	b	1374c <__assert_fail@plt+0x23d8>
   13a84:	mov	r5, #63	; 0x3f
   13a88:	mov	r4, #0
   13a8c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13a90:	cmp	r0, #0
   13a94:	bne	13474 <__assert_fail@plt+0x2100>
   13a98:	b	1374c <__assert_fail@plt+0x23d8>
   13a9c:	mov	r4, #1
   13aa0:	mov	r6, #0
   13aa4:	sub	sl, fp, #40	; 0x28
   13aa8:	str	r6, [sp, #64]	; 0x40
   13aac:	add	r6, r6, r7
   13ab0:	sub	r0, fp, #44	; 0x2c
   13ab4:	mov	r3, sl
   13ab8:	add	r1, ip, r6
   13abc:	sub	r2, lr, r6
   13ac0:	bl	166b4 <__assert_fail@plt+0x5340>
   13ac4:	cmn	r0, #2
   13ac8:	beq	13bf8 <__assert_fail@plt+0x2884>
   13acc:	cmn	r0, #1
   13ad0:	beq	13bec <__assert_fail@plt+0x2878>
   13ad4:	ldr	r6, [sp, #64]	; 0x40
   13ad8:	cmp	r0, #0
   13adc:	beq	13c38 <__assert_fail@plt+0x28c4>
   13ae0:	add	r6, r0, r6
   13ae4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   13ae8:	bl	11188 <iswprint@plt>
   13aec:	cmp	r0, #0
   13af0:	sub	sl, fp, #40	; 0x28
   13af4:	movwne	r0, #1
   13af8:	and	r4, r4, r0
   13afc:	mov	r0, sl
   13b00:	bl	11140 <mbsinit@plt>
   13b04:	ldr	ip, [fp, #-84]	; 0xffffffac
   13b08:	ldr	lr, [sp, #84]	; 0x54
   13b0c:	cmp	r0, #0
   13b10:	beq	13aa8 <__assert_fail@plt+0x2734>
   13b14:	b	13c3c <__assert_fail@plt+0x28c8>
   13b18:	cmp	r9, sl
   13b1c:	mov	r2, #1
   13b20:	movcc	r0, #39	; 0x27
   13b24:	strbcc	r0, [r6, r9]
   13b28:	add	r0, r9, #1
   13b2c:	cmp	r0, sl
   13b30:	movcc	r1, #36	; 0x24
   13b34:	strbcc	r1, [r6, r0]
   13b38:	add	r0, r9, #2
   13b3c:	cmp	r0, sl
   13b40:	movcc	r1, #39	; 0x27
   13b44:	strbcc	r1, [r6, r0]
   13b48:	add	r0, r9, #3
   13b4c:	cmp	r0, sl
   13b50:	add	r9, r0, #1
   13b54:	str	r2, [fp, #-48]	; 0xffffffd0
   13b58:	movcc	r1, #92	; 0x5c
   13b5c:	strbcc	r1, [r6, r0]
   13b60:	ldr	r1, [fp, #-64]	; 0xffffffc0
   13b64:	cmp	r1, #2
   13b68:	beq	13bc8 <__assert_fail@plt+0x2854>
   13b6c:	add	r1, r7, #1
   13b70:	mov	r4, #0
   13b74:	mov	r8, #1
   13b78:	mov	r5, #48	; 0x30
   13b7c:	cmp	r1, lr
   13b80:	bcs	13468 <__assert_fail@plt+0x20f4>
   13b84:	ldrb	r1, [ip, r1]
   13b88:	sub	r1, r1, #48	; 0x30
   13b8c:	uxtb	r1, r1
   13b90:	cmp	r1, #9
   13b94:	bhi	13468 <__assert_fail@plt+0x20f4>
   13b98:	cmp	r9, sl
   13b9c:	movcc	r1, #48	; 0x30
   13ba0:	strbcc	r1, [r6, r9]
   13ba4:	add	r1, r0, #2
   13ba8:	add	r9, r0, #3
   13bac:	cmp	r1, sl
   13bb0:	movcc	r2, #48	; 0x30
   13bb4:	strbcc	r2, [r6, r1]
   13bb8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13bbc:	cmp	r0, #0
   13bc0:	bne	13474 <__assert_fail@plt+0x2100>
   13bc4:	b	1374c <__assert_fail@plt+0x23d8>
   13bc8:	mov	r0, #48	; 0x30
   13bcc:	mov	r8, #1
   13bd0:	mov	r4, #0
   13bd4:	ldr	r1, [fp, #-56]	; 0xffffffc8
   13bd8:	cmp	r1, #0
   13bdc:	bne	13788 <__assert_fail@plt+0x2414>
   13be0:	cmp	r8, #0
   13be4:	beq	13704 <__assert_fail@plt+0x2390>
   13be8:	b	134f4 <__assert_fail@plt+0x2180>
   13bec:	mov	r4, #0
   13bf0:	ldr	ip, [fp, #-84]	; 0xffffffac
   13bf4:	b	13c30 <__assert_fail@plt+0x28bc>
   13bf8:	ldr	r1, [sp, #84]	; 0x54
   13bfc:	ldr	ip, [fp, #-84]	; 0xffffffac
   13c00:	mov	r4, #0
   13c04:	cmp	r6, r1
   13c08:	bcs	13c30 <__assert_fail@plt+0x28bc>
   13c0c:	ldrb	r0, [ip, r6]
   13c10:	cmp	r0, #0
   13c14:	beq	13c30 <__assert_fail@plt+0x28bc>
   13c18:	ldr	r0, [sp, #64]	; 0x40
   13c1c:	add	r0, r0, #1
   13c20:	add	r6, r0, r7
   13c24:	str	r0, [sp, #64]	; 0x40
   13c28:	cmp	r6, r1
   13c2c:	bcc	13c0c <__assert_fail@plt+0x2898>
   13c30:	ldr	r6, [sp, #64]	; 0x40
   13c34:	b	13c3c <__assert_fail@plt+0x28c8>
   13c38:	ldr	ip, [fp, #-84]	; 0xffffffac
   13c3c:	mov	r1, r6
   13c40:	ldr	r6, [sp, #76]	; 0x4c
   13c44:	ldr	sl, [sp, #56]	; 0x38
   13c48:	ldr	r0, [sp, #44]	; 0x2c
   13c4c:	cmp	r1, #1
   13c50:	orr	r2, r4, r0
   13c54:	mov	r0, r1
   13c58:	bhi	13c78 <__assert_fail@plt+0x2904>
   13c5c:	tst	r2, #1
   13c60:	beq	13c78 <__assert_fail@plt+0x2904>
   13c64:	ldr	lr, [sp, #84]	; 0x54
   13c68:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13c6c:	cmp	r0, #0
   13c70:	bne	13474 <__assert_fail@plt+0x2100>
   13c74:	b	1374c <__assert_fail@plt+0x23d8>
   13c78:	str	r2, [sp, #64]	; 0x40
   13c7c:	add	r0, r0, r7
   13c80:	add	r1, r7, #1
   13c84:	ldr	lr, [sp, #84]	; 0x54
   13c88:	ldr	r7, [fp, #-64]	; 0xffffffc0
   13c8c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   13c90:	mov	r3, #0
   13c94:	str	r0, [sp, #56]	; 0x38
   13c98:	ldr	r0, [sp, #64]	; 0x40
   13c9c:	tst	r0, #1
   13ca0:	bne	13d88 <__assert_fail@plt+0x2a14>
   13ca4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13ca8:	tst	r0, #1
   13cac:	bne	13f28 <__assert_fail@plt+0x2bb4>
   13cb0:	ldr	r3, [fp, #-80]	; 0xffffffb0
   13cb4:	cmp	r7, #2
   13cb8:	movwne	r3, #1
   13cbc:	orr	r3, r3, r2
   13cc0:	tst	r3, #1
   13cc4:	bne	13cfc <__assert_fail@plt+0x2988>
   13cc8:	cmp	r9, sl
   13ccc:	add	r3, r9, #1
   13cd0:	movcc	r2, #39	; 0x27
   13cd4:	strbcc	r2, [r6, r9]
   13cd8:	cmp	r3, sl
   13cdc:	movcc	r2, #36	; 0x24
   13ce0:	strbcc	r2, [r6, r3]
   13ce4:	add	r3, r9, #2
   13ce8:	add	r9, r9, #3
   13cec:	cmp	r3, sl
   13cf0:	movcc	r2, #39	; 0x27
   13cf4:	strbcc	r2, [r6, r3]
   13cf8:	mov	r2, #1
   13cfc:	cmp	r9, sl
   13d00:	mov	r0, r2
   13d04:	movcc	r3, #92	; 0x5c
   13d08:	strbcc	r3, [r6, r9]
   13d0c:	add	r3, r9, #1
   13d10:	cmp	r3, sl
   13d14:	andcc	r7, r5, #192	; 0xc0
   13d18:	movcc	r2, #48	; 0x30
   13d1c:	orrcc	r7, r2, r7, lsr #6
   13d20:	strbcc	r7, [r6, r3]
   13d24:	add	r3, r9, #2
   13d28:	add	r9, r9, #3
   13d2c:	cmp	r3, sl
   13d30:	lsrcc	r7, r5, #3
   13d34:	movcc	r2, #6
   13d38:	bficc	r7, r2, #3, #29
   13d3c:	mov	r2, #6
   13d40:	strbcc	r7, [r6, r3]
   13d44:	bfi	r5, r2, #3, #29
   13d48:	mov	r3, #1
   13d4c:	mov	r2, r0
   13d50:	ldr	r0, [sp, #56]	; 0x38
   13d54:	and	r8, r3, #1
   13d58:	cmp	r0, r1
   13d5c:	bhi	13dbc <__assert_fail@plt+0x2a48>
   13d60:	b	13dfc <__assert_fail@plt+0x2a88>
   13d64:	cmp	r9, sl
   13d68:	ldr	r7, [fp, #-64]	; 0xffffffc0
   13d6c:	strbcc	r5, [r6, r9]
   13d70:	add	r9, r9, #1
   13d74:	ldrb	r5, [ip, r1]
   13d78:	add	r1, r1, #1
   13d7c:	ldr	r0, [sp, #64]	; 0x40
   13d80:	tst	r0, #1
   13d84:	beq	13ca4 <__assert_fail@plt+0x2930>
   13d88:	ldr	r7, [fp, #-56]	; 0xffffffc8
   13d8c:	tst	r7, #1
   13d90:	beq	13da4 <__assert_fail@plt+0x2a30>
   13d94:	cmp	r9, sl
   13d98:	movcc	r7, #92	; 0x5c
   13d9c:	strbcc	r7, [r6, r9]
   13da0:	add	r9, r9, #1
   13da4:	mov	r7, #0
   13da8:	str	r7, [fp, #-56]	; 0xffffffc8
   13dac:	ldr	r0, [sp, #56]	; 0x38
   13db0:	and	r8, r3, #1
   13db4:	cmp	r0, r1
   13db8:	bls	13dfc <__assert_fail@plt+0x2a88>
   13dbc:	cmp	r8, #0
   13dc0:	mvn	r7, r2
   13dc4:	movwne	r8, #1
   13dc8:	orr	r7, r7, r8
   13dcc:	tst	r7, #1
   13dd0:	bne	13d64 <__assert_fail@plt+0x29f0>
   13dd4:	cmp	r9, sl
   13dd8:	movcc	r7, #39	; 0x27
   13ddc:	strbcc	r7, [r6, r9]
   13de0:	add	r7, r9, #1
   13de4:	add	r9, r9, #2
   13de8:	cmp	r7, sl
   13dec:	movcc	r2, #39	; 0x27
   13df0:	strbcc	r2, [r6, r7]
   13df4:	mov	r2, #0
   13df8:	b	13d64 <__assert_fail@plt+0x29f0>
   13dfc:	cmp	r8, #0
   13e00:	sub	r7, r1, #1
   13e04:	mov	r0, r5
   13e08:	str	r2, [fp, #-48]	; 0xffffffd0
   13e0c:	movwne	r8, #1
   13e10:	cmp	r8, #0
   13e14:	beq	13704 <__assert_fail@plt+0x2390>
   13e18:	b	134f4 <__assert_fail@plt+0x2180>
   13e1c:	mov	lr, r7
   13e20:	b	13e28 <__assert_fail@plt+0x2ab4>
   13e24:	mvn	lr, #0
   13e28:	ldr	r7, [fp, #-64]	; 0xffffffc0
   13e2c:	ldr	r1, [fp, #-72]	; 0xffffffb8
   13e30:	eor	r0, r7, #2
   13e34:	orr	r0, r0, r9
   13e38:	clz	r0, r0
   13e3c:	lsr	r0, r0, #5
   13e40:	tst	r1, r0
   13e44:	bne	13f44 <__assert_fail@plt+0x2bd0>
   13e48:	mov	r0, r1
   13e4c:	ldr	r1, [fp, #-80]	; 0xffffffb0
   13e50:	cmp	r7, #2
   13e54:	movwne	r1, #1
   13e58:	orr	r0, r0, r1
   13e5c:	tst	r0, #1
   13e60:	ldreq	r0, [sp, #52]	; 0x34
   13e64:	streq	lr, [sp, #84]	; 0x54
   13e68:	eoreq	r0, r0, #1
   13e6c:	tsteq	r0, #1
   13e70:	bne	14008 <__assert_fail@plt+0x2c94>
   13e74:	tst	r4, #1
   13e78:	bne	13fc4 <__assert_fail@plt+0x2c50>
   13e7c:	ldr	r6, [sp, #48]	; 0x30
   13e80:	mov	r8, #0
   13e84:	cmp	r6, #0
   13e88:	beq	14000 <__assert_fail@plt+0x2c8c>
   13e8c:	ldr	r0, [sp, #80]	; 0x50
   13e90:	mov	r1, #0
   13e94:	cmp	sl, #0
   13e98:	mov	r4, #0
   13e9c:	str	r1, [fp, #-72]	; 0xffffffb8
   13ea0:	beq	12d94 <__assert_fail@plt+0x1a20>
   13ea4:	b	14008 <__assert_fail@plt+0x2c94>
   13ea8:	ldrb	r1, [r0, #3]
   13eac:	cmp	r1, #56	; 0x38
   13eb0:	ldrbeq	r1, [r0, #4]
   13eb4:	cmpeq	r1, #48	; 0x30
   13eb8:	bne	12f8c <__assert_fail@plt+0x1c18>
   13ebc:	ldrb	r1, [r0, #5]
   13ec0:	cmp	r1, #51	; 0x33
   13ec4:	ldrbeq	r1, [r0, #6]
   13ec8:	cmpeq	r1, #48	; 0x30
   13ecc:	bne	12f8c <__assert_fail@plt+0x1c18>
   13ed0:	ldrb	r0, [r0, #7]
   13ed4:	cmp	r0, #0
   13ed8:	movw	r0, #30146	; 0x75c2
   13edc:	movt	r0, #1
   13ee0:	str	r0, [sp, #68]	; 0x44
   13ee4:	bne	12f8c <__assert_fail@plt+0x1c18>
   13ee8:	b	12fa8 <__assert_fail@plt+0x1c34>
   13eec:	ldrb	r1, [r0, #4]
   13ef0:	cmp	r1, #48	; 0x30
   13ef4:	ldrbeq	r1, [r0, #5]
   13ef8:	cmpeq	r1, #51	; 0x33
   13efc:	bne	13070 <__assert_fail@plt+0x1cfc>
   13f00:	ldrb	r1, [r0, #6]
   13f04:	cmp	r1, #48	; 0x30
   13f08:	ldrbeq	r0, [r0, #7]
   13f0c:	cmpeq	r0, #0
   13f10:	bne	13070 <__assert_fail@plt+0x1cfc>
   13f14:	movw	r0, #30150	; 0x75c6
   13f18:	movt	r0, #1
   13f1c:	str	r0, [sp, #72]	; 0x48
   13f20:	b	13090 <__assert_fail@plt+0x1d1c>
   13f24:	ldr	r7, [fp, #-64]	; 0xffffffc0
   13f28:	ldr	r2, [sp, #80]	; 0x50
   13f2c:	b	13f64 <__assert_fail@plt+0x2bf0>
   13f30:	ldr	ip, [fp, #-84]	; 0xffffffac
   13f34:	mov	r2, #1
   13f38:	mov	lr, r4
   13f3c:	ldr	r7, [fp, #-64]	; 0xffffffc0
   13f40:	b	13f64 <__assert_fail@plt+0x2bf0>
   13f44:	ldr	r2, [sp, #80]	; 0x50
   13f48:	mov	r7, #2
   13f4c:	b	13f64 <__assert_fail@plt+0x2bf0>
   13f50:	ldr	r6, [sp, #76]	; 0x4c
   13f54:	ldr	ip, [fp, #-84]	; 0xffffffac
   13f58:	ldr	lr, [sp, #84]	; 0x54
   13f5c:	ldr	r2, [sp, #80]	; 0x50
   13f60:	mov	r7, #2
   13f64:	mov	r0, #0
   13f68:	ldr	r1, [fp, #12]
   13f6c:	tst	r2, #1
   13f70:	mov	r2, r7
   13f74:	mov	r3, lr
   13f78:	str	r0, [sp, #8]
   13f7c:	ldr	r0, [sp, #68]	; 0x44
   13f80:	movwne	r2, #4
   13f84:	cmp	r7, #2
   13f88:	movne	r2, r7
   13f8c:	str	r2, [sp]
   13f90:	mov	r2, ip
   13f94:	bic	r1, r1, #2
   13f98:	str	r0, [sp, #12]
   13f9c:	ldr	r0, [sp, #72]	; 0x48
   13fa0:	str	r1, [sp, #4]
   13fa4:	mov	r1, sl
   13fa8:	str	r0, [sp, #16]
   13fac:	mov	r0, r6
   13fb0:	bl	12d18 <__assert_fail@plt+0x19a4>
   13fb4:	mov	r9, r0
   13fb8:	mov	r0, r9
   13fbc:	sub	sp, fp, #28
   13fc0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13fc4:	mov	r0, #5
   13fc8:	ldr	r1, [sp, #48]	; 0x30
   13fcc:	ldr	r2, [fp, #-84]	; 0xffffffac
   13fd0:	ldr	r3, [sp, #84]	; 0x54
   13fd4:	str	r0, [sp]
   13fd8:	ldr	r0, [fp, #12]
   13fdc:	str	r0, [sp, #4]
   13fe0:	ldr	r0, [fp, #16]
   13fe4:	str	r0, [sp, #8]
   13fe8:	ldr	r0, [sp, #68]	; 0x44
   13fec:	str	r0, [sp, #12]
   13ff0:	ldr	r0, [sp, #72]	; 0x48
   13ff4:	str	r0, [sp, #16]
   13ff8:	ldr	r0, [sp, #76]	; 0x4c
   13ffc:	b	13fb0 <__assert_fail@plt+0x2c3c>
   14000:	mov	r0, #0
   14004:	str	r0, [fp, #-72]	; 0xffffffb8
   14008:	ldr	r1, [sp, #92]	; 0x5c
   1400c:	cmp	r1, #0
   14010:	beq	14050 <__assert_fail@plt+0x2cdc>
   14014:	ldr	r0, [fp, #-72]	; 0xffffffb8
   14018:	ldr	r2, [sp, #76]	; 0x4c
   1401c:	tst	r0, #1
   14020:	bne	14054 <__assert_fail@plt+0x2ce0>
   14024:	ldrb	r0, [r1]
   14028:	cmp	r0, #0
   1402c:	beq	14054 <__assert_fail@plt+0x2ce0>
   14030:	add	r1, r1, #1
   14034:	cmp	r9, sl
   14038:	strbcc	r0, [r2, r9]
   1403c:	add	r9, r9, #1
   14040:	ldrb	r0, [r1], #1
   14044:	cmp	r0, #0
   14048:	bne	14034 <__assert_fail@plt+0x2cc0>
   1404c:	b	14054 <__assert_fail@plt+0x2ce0>
   14050:	ldr	r2, [sp, #76]	; 0x4c
   14054:	cmp	r9, sl
   14058:	movcc	r0, #0
   1405c:	strbcc	r0, [r2, r9]
   14060:	mov	r0, r9
   14064:	sub	sp, fp, #28
   14068:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1406c:	mov	r2, #1
   14070:	b	13f3c <__assert_fail@plt+0x2bc8>
   14074:	ldr	r2, [sp, #80]	; 0x50
   14078:	mov	r7, #5
   1407c:	b	13f64 <__assert_fail@plt+0x2bf0>
   14080:	bl	11350 <abort@plt>
   14084:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14088:	add	fp, sp, #28
   1408c:	sub	sp, sp, #28
   14090:	movw	r5, #33256	; 0x81e8
   14094:	cmp	r2, #0
   14098:	mov	r4, r1
   1409c:	mov	r7, r0
   140a0:	str	r0, [sp, #20]
   140a4:	movt	r5, #2
   140a8:	movne	r5, r2
   140ac:	bl	11278 <__errno_location@plt>
   140b0:	mov	sl, r0
   140b4:	ldm	r5, {r0, r1}
   140b8:	ldr	r2, [r5, #40]	; 0x28
   140bc:	ldr	r3, [r5, #44]	; 0x2c
   140c0:	add	r9, r5, #8
   140c4:	ldr	r6, [sl]
   140c8:	orr	r8, r1, #1
   140cc:	mov	r1, #0
   140d0:	str	r6, [sp, #24]
   140d4:	stm	sp, {r0, r8, r9}
   140d8:	str	r2, [sp, #12]
   140dc:	str	r3, [sp, #16]
   140e0:	mov	r0, #0
   140e4:	mov	r2, r7
   140e8:	mov	r3, r4
   140ec:	mov	r6, r4
   140f0:	bl	12d18 <__assert_fail@plt+0x19a4>
   140f4:	add	r7, r0, #1
   140f8:	mov	r0, r7
   140fc:	bl	15554 <__assert_fail@plt+0x41e0>
   14100:	mov	r4, r0
   14104:	ldr	r0, [r5]
   14108:	ldr	r2, [r5, #44]	; 0x2c
   1410c:	ldr	r1, [r5, #40]	; 0x28
   14110:	mov	r3, r6
   14114:	stm	sp, {r0, r8, r9}
   14118:	str	r2, [sp, #16]
   1411c:	str	r1, [sp, #12]
   14120:	mov	r0, r4
   14124:	mov	r1, r7
   14128:	ldr	r2, [sp, #20]
   1412c:	bl	12d18 <__assert_fail@plt+0x19a4>
   14130:	ldr	r0, [sp, #24]
   14134:	str	r0, [sl]
   14138:	mov	r0, r4
   1413c:	sub	sp, fp, #28
   14140:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14144:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14148:	add	fp, sp, #28
   1414c:	sub	sp, sp, #36	; 0x24
   14150:	movw	r8, #33256	; 0x81e8
   14154:	cmp	r3, #0
   14158:	mov	r4, r2
   1415c:	str	r2, [sp, #24]
   14160:	mov	r5, r1
   14164:	mov	r6, r0
   14168:	str	r0, [sp, #20]
   1416c:	movt	r8, #2
   14170:	movne	r8, r3
   14174:	bl	11278 <__errno_location@plt>
   14178:	str	r0, [sp, #28]
   1417c:	cmp	r4, #0
   14180:	add	sl, r8, #8
   14184:	ldm	r8, {r3, r9}
   14188:	ldr	r7, [r0]
   1418c:	ldr	r1, [r8, #40]	; 0x28
   14190:	ldr	r2, [r8, #44]	; 0x2c
   14194:	mov	r0, #0
   14198:	orreq	r9, r9, #1
   1419c:	str	r7, [sp, #32]
   141a0:	mov	r7, r5
   141a4:	stm	sp, {r3, r9, sl}
   141a8:	str	r1, [sp, #12]
   141ac:	str	r2, [sp, #16]
   141b0:	mov	r1, #0
   141b4:	mov	r2, r6
   141b8:	mov	r3, r5
   141bc:	bl	12d18 <__assert_fail@plt+0x19a4>
   141c0:	add	r4, r0, #1
   141c4:	mov	r5, r0
   141c8:	mov	r0, r4
   141cc:	bl	15554 <__assert_fail@plt+0x41e0>
   141d0:	mov	r6, r0
   141d4:	ldr	r0, [r8]
   141d8:	ldr	r2, [r8, #44]	; 0x2c
   141dc:	ldr	r1, [r8, #40]	; 0x28
   141e0:	mov	r3, r7
   141e4:	stm	sp, {r0, r9, sl}
   141e8:	str	r2, [sp, #16]
   141ec:	str	r1, [sp, #12]
   141f0:	mov	r0, r6
   141f4:	mov	r1, r4
   141f8:	ldr	r2, [sp, #20]
   141fc:	bl	12d18 <__assert_fail@plt+0x19a4>
   14200:	ldr	r0, [sp, #24]
   14204:	ldr	r1, [sp, #32]
   14208:	ldr	r2, [sp, #28]
   1420c:	cmp	r0, #0
   14210:	str	r1, [r2]
   14214:	strne	r5, [r0]
   14218:	mov	r0, r6
   1421c:	sub	sp, fp, #28
   14220:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14224:	push	{r4, r5, r6, r7, fp, lr}
   14228:	add	fp, sp, #16
   1422c:	movw	r4, #33104	; 0x8150
   14230:	movt	r4, #2
   14234:	ldrd	r6, [r4]
   14238:	cmp	r7, #2
   1423c:	blt	14268 <__assert_fail@plt+0x2ef4>
   14240:	add	r5, r6, #12
   14244:	mov	r7, #0
   14248:	ldr	r0, [r5, r7, lsl #3]
   1424c:	bl	12a58 <__assert_fail@plt+0x16e4>
   14250:	ldr	r1, [r4, #4]
   14254:	add	r2, r7, #2
   14258:	add	r0, r7, #1
   1425c:	mov	r7, r0
   14260:	cmp	r2, r1
   14264:	blt	14248 <__assert_fail@plt+0x2ed4>
   14268:	ldr	r0, [r6, #4]
   1426c:	movw	r5, #33304	; 0x8218
   14270:	movt	r5, #2
   14274:	cmp	r0, r5
   14278:	beq	1428c <__assert_fail@plt+0x2f18>
   1427c:	bl	12a58 <__assert_fail@plt+0x16e4>
   14280:	mov	r0, #256	; 0x100
   14284:	str	r0, [r4, #8]
   14288:	str	r5, [r4, #12]
   1428c:	add	r5, r4, #8
   14290:	cmp	r6, r5
   14294:	beq	142a4 <__assert_fail@plt+0x2f30>
   14298:	mov	r0, r6
   1429c:	bl	12a58 <__assert_fail@plt+0x16e4>
   142a0:	str	r5, [r4]
   142a4:	mov	r0, #1
   142a8:	str	r0, [r4, #4]
   142ac:	pop	{r4, r5, r6, r7, fp, pc}
   142b0:	movw	r3, #33256	; 0x81e8
   142b4:	mvn	r2, #0
   142b8:	movt	r3, #2
   142bc:	b	142c0 <__assert_fail@plt+0x2f4c>
   142c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   142c4:	add	fp, sp, #28
   142c8:	sub	sp, sp, #44	; 0x2c
   142cc:	mov	r7, r3
   142d0:	str	r2, [sp, #36]	; 0x24
   142d4:	str	r1, [sp, #32]
   142d8:	mov	r5, r0
   142dc:	bl	11278 <__errno_location@plt>
   142e0:	cmp	r5, #0
   142e4:	blt	14448 <__assert_fail@plt+0x30d4>
   142e8:	cmn	r5, #-2147483647	; 0x80000001
   142ec:	beq	14448 <__assert_fail@plt+0x30d4>
   142f0:	movw	r8, #33104	; 0x8150
   142f4:	mov	r4, r0
   142f8:	movt	r8, #2
   142fc:	ldr	r6, [r8]
   14300:	ldr	r1, [r8, #4]
   14304:	ldr	r0, [r0]
   14308:	str	r4, [sp, #28]
   1430c:	cmp	r1, r5
   14310:	str	r0, [sp, #24]
   14314:	ble	14320 <__assert_fail@plt+0x2fac>
   14318:	mov	sl, r6
   1431c:	b	14384 <__assert_fail@plt+0x3010>
   14320:	mov	r0, #8
   14324:	add	r9, r8, #8
   14328:	add	r2, r5, #1
   1432c:	str	r1, [fp, #-32]	; 0xffffffe0
   14330:	mvn	r3, #-2147483648	; 0x80000000
   14334:	str	r0, [sp]
   14338:	subs	r0, r6, r9
   1433c:	sub	r2, r2, r1
   14340:	sub	r1, fp, #32
   14344:	movne	r0, r6
   14348:	bl	15754 <__assert_fail@plt+0x43e0>
   1434c:	str	r0, [r8]
   14350:	cmp	r6, r9
   14354:	mov	sl, r0
   14358:	ldrdeq	r0, [r8, #8]
   1435c:	stmeq	sl, {r0, r1}
   14360:	ldr	r1, [r8, #4]
   14364:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14368:	add	r0, sl, r1, lsl #3
   1436c:	sub	r1, r2, r1
   14370:	lsl	r2, r1, #3
   14374:	mov	r1, #0
   14378:	bl	112a8 <memset@plt>
   1437c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14380:	str	r0, [r8, #4]
   14384:	mov	r9, sl
   14388:	ldr	r6, [r9, r5, lsl #3]!
   1438c:	ldr	r4, [r9, #4]!
   14390:	ldm	r7, {r0, r1}
   14394:	ldr	r2, [r7, #40]	; 0x28
   14398:	ldr	r3, [r7, #44]	; 0x2c
   1439c:	orr	r8, r1, #1
   143a0:	add	r1, r7, #8
   143a4:	stm	sp, {r0, r8}
   143a8:	add	r0, sp, #8
   143ac:	str	r1, [sp, #20]
   143b0:	stm	r0, {r1, r2, r3}
   143b4:	mov	r0, r4
   143b8:	mov	r1, r6
   143bc:	ldr	r2, [sp, #32]
   143c0:	ldr	r3, [sp, #36]	; 0x24
   143c4:	bl	12d18 <__assert_fail@plt+0x19a4>
   143c8:	cmp	r6, r0
   143cc:	bhi	14430 <__assert_fail@plt+0x30bc>
   143d0:	add	r6, r0, #1
   143d4:	movw	r0, #33304	; 0x8218
   143d8:	movt	r0, #2
   143dc:	str	r6, [sl, r5, lsl #3]
   143e0:	cmp	r4, r0
   143e4:	beq	143f0 <__assert_fail@plt+0x307c>
   143e8:	mov	r0, r4
   143ec:	bl	12a58 <__assert_fail@plt+0x16e4>
   143f0:	mov	r0, r6
   143f4:	bl	15554 <__assert_fail@plt+0x41e0>
   143f8:	str	r0, [r9]
   143fc:	mov	r4, r0
   14400:	add	r3, sp, #8
   14404:	ldr	r0, [r7]
   14408:	ldr	r1, [r7, #40]	; 0x28
   1440c:	ldr	r2, [r7, #44]	; 0x2c
   14410:	stm	sp, {r0, r8}
   14414:	ldr	r0, [sp, #20]
   14418:	stm	r3, {r0, r1, r2}
   1441c:	mov	r0, r4
   14420:	mov	r1, r6
   14424:	ldr	r2, [sp, #32]
   14428:	ldr	r3, [sp, #36]	; 0x24
   1442c:	bl	12d18 <__assert_fail@plt+0x19a4>
   14430:	ldr	r1, [sp, #24]
   14434:	ldr	r0, [sp, #28]
   14438:	str	r1, [r0]
   1443c:	mov	r0, r4
   14440:	sub	sp, fp, #28
   14444:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14448:	bl	11350 <abort@plt>
   1444c:	movw	r3, #33256	; 0x81e8
   14450:	movt	r3, #2
   14454:	b	142c0 <__assert_fail@plt+0x2f4c>
   14458:	movw	r3, #33256	; 0x81e8
   1445c:	mov	r1, r0
   14460:	mov	r0, #0
   14464:	mvn	r2, #0
   14468:	movt	r3, #2
   1446c:	b	142c0 <__assert_fail@plt+0x2f4c>
   14470:	movw	r3, #33256	; 0x81e8
   14474:	mov	r2, r1
   14478:	mov	r1, r0
   1447c:	mov	r0, #0
   14480:	movt	r3, #2
   14484:	b	142c0 <__assert_fail@plt+0x2f4c>
   14488:	push	{fp, lr}
   1448c:	mov	fp, sp
   14490:	sub	sp, sp, #48	; 0x30
   14494:	vmov.i32	q8, #0	; 0x00000000
   14498:	mov	ip, #32
   1449c:	mov	r3, sp
   144a0:	mov	lr, r2
   144a4:	cmp	r1, #10
   144a8:	add	r2, r3, #16
   144ac:	vst1.64	{d16-d17}, [r3], ip
   144b0:	vst1.64	{d16-d17}, [r3]
   144b4:	vst1.64	{d16-d17}, [r2]
   144b8:	beq	144d8 <__assert_fail@plt+0x3164>
   144bc:	str	r1, [sp]
   144c0:	mov	r3, sp
   144c4:	mov	r1, lr
   144c8:	mvn	r2, #0
   144cc:	bl	142c0 <__assert_fail@plt+0x2f4c>
   144d0:	mov	sp, fp
   144d4:	pop	{fp, pc}
   144d8:	bl	11350 <abort@plt>
   144dc:	push	{r4, sl, fp, lr}
   144e0:	add	fp, sp, #8
   144e4:	sub	sp, sp, #48	; 0x30
   144e8:	mov	ip, r3
   144ec:	mov	r3, sp
   144f0:	vmov.i32	q8, #0	; 0x00000000
   144f4:	mov	lr, #32
   144f8:	cmp	r1, #10
   144fc:	add	r4, r3, #16
   14500:	vst1.64	{d16-d17}, [r3], lr
   14504:	vst1.64	{d16-d17}, [r3]
   14508:	vst1.64	{d16-d17}, [r4]
   1450c:	beq	1452c <__assert_fail@plt+0x31b8>
   14510:	str	r1, [sp]
   14514:	mov	r1, r2
   14518:	mov	r3, sp
   1451c:	mov	r2, ip
   14520:	bl	142c0 <__assert_fail@plt+0x2f4c>
   14524:	sub	sp, fp, #8
   14528:	pop	{r4, sl, fp, pc}
   1452c:	bl	11350 <abort@plt>
   14530:	push	{fp, lr}
   14534:	mov	fp, sp
   14538:	sub	sp, sp, #48	; 0x30
   1453c:	mov	r3, sp
   14540:	vmov.i32	q8, #0	; 0x00000000
   14544:	mov	ip, #32
   14548:	cmp	r0, #10
   1454c:	add	r2, r3, #16
   14550:	vst1.64	{d16-d17}, [r3], ip
   14554:	vst1.64	{d16-d17}, [r3]
   14558:	vst1.64	{d16-d17}, [r2]
   1455c:	beq	1457c <__assert_fail@plt+0x3208>
   14560:	str	r0, [sp]
   14564:	mov	r3, sp
   14568:	mov	r0, #0
   1456c:	mvn	r2, #0
   14570:	bl	142c0 <__assert_fail@plt+0x2f4c>
   14574:	mov	sp, fp
   14578:	pop	{fp, pc}
   1457c:	bl	11350 <abort@plt>
   14580:	push	{fp, lr}
   14584:	mov	fp, sp
   14588:	sub	sp, sp, #48	; 0x30
   1458c:	mov	r3, sp
   14590:	vmov.i32	q8, #0	; 0x00000000
   14594:	mov	ip, #32
   14598:	cmp	r0, #10
   1459c:	add	lr, r3, #16
   145a0:	vst1.64	{d16-d17}, [r3], ip
   145a4:	vst1.64	{d16-d17}, [r3]
   145a8:	vst1.64	{d16-d17}, [lr]
   145ac:	beq	145c8 <__assert_fail@plt+0x3254>
   145b0:	str	r0, [sp]
   145b4:	mov	r3, sp
   145b8:	mov	r0, #0
   145bc:	bl	142c0 <__assert_fail@plt+0x2f4c>
   145c0:	mov	sp, fp
   145c4:	pop	{fp, pc}
   145c8:	bl	11350 <abort@plt>
   145cc:	push	{r4, sl, fp, lr}
   145d0:	add	fp, sp, #8
   145d4:	sub	sp, sp, #48	; 0x30
   145d8:	mov	lr, r0
   145dc:	movw	r0, #33256	; 0x81e8
   145e0:	mov	r3, #32
   145e4:	mov	ip, r1
   145e8:	mov	r4, #1
   145ec:	movt	r0, #2
   145f0:	add	r1, r0, #16
   145f4:	vld1.64	{d16-d17}, [r0], r3
   145f8:	mov	r3, sp
   145fc:	vld1.64	{d18-d19}, [r1]
   14600:	add	r1, r3, #16
   14604:	vld1.64	{d20-d21}, [r0]
   14608:	add	r0, r3, #32
   1460c:	vst1.64	{d18-d19}, [r1]
   14610:	mov	r1, r3
   14614:	vst1.64	{d20-d21}, [r0]
   14618:	mov	r0, #28
   1461c:	and	r0, r0, r2, lsr #3
   14620:	and	r2, r2, #31
   14624:	vst1.64	{d16-d17}, [r1], r0
   14628:	ldr	r0, [r1, #8]
   1462c:	bic	r4, r4, r0, lsr r2
   14630:	eor	r0, r0, r4, lsl r2
   14634:	mov	r2, ip
   14638:	str	r0, [r1, #8]
   1463c:	mov	r0, #0
   14640:	mov	r1, lr
   14644:	bl	142c0 <__assert_fail@plt+0x2f4c>
   14648:	sub	sp, fp, #8
   1464c:	pop	{r4, sl, fp, pc}
   14650:	push	{fp, lr}
   14654:	mov	fp, sp
   14658:	sub	sp, sp, #48	; 0x30
   1465c:	mov	ip, r0
   14660:	movw	r0, #33256	; 0x81e8
   14664:	mov	r3, #32
   14668:	movt	r0, #2
   1466c:	add	r2, r0, #16
   14670:	vld1.64	{d16-d17}, [r0], r3
   14674:	mov	r3, sp
   14678:	vld1.64	{d18-d19}, [r2]
   1467c:	add	r2, r3, #16
   14680:	vld1.64	{d20-d21}, [r0]
   14684:	add	r0, r3, #32
   14688:	vst1.64	{d18-d19}, [r2]
   1468c:	mov	r2, r3
   14690:	vst1.64	{d20-d21}, [r0]
   14694:	mov	r0, #28
   14698:	and	r0, r0, r1, lsr #3
   1469c:	and	r1, r1, #31
   146a0:	vst1.64	{d16-d17}, [r2], r0
   146a4:	mov	r0, #1
   146a8:	ldr	lr, [r2, #8]
   146ac:	bic	r0, r0, lr, lsr r1
   146b0:	eor	r0, lr, r0, lsl r1
   146b4:	mov	r1, ip
   146b8:	str	r0, [r2, #8]
   146bc:	mov	r0, #0
   146c0:	mvn	r2, #0
   146c4:	bl	142c0 <__assert_fail@plt+0x2f4c>
   146c8:	mov	sp, fp
   146cc:	pop	{fp, pc}
   146d0:	push	{fp, lr}
   146d4:	mov	fp, sp
   146d8:	sub	sp, sp, #48	; 0x30
   146dc:	movw	r2, #33256	; 0x81e8
   146e0:	mov	r3, #32
   146e4:	mov	r1, r0
   146e8:	movt	r2, #2
   146ec:	add	r0, r2, #16
   146f0:	vld1.64	{d16-d17}, [r2], r3
   146f4:	mov	r3, sp
   146f8:	vld1.64	{d18-d19}, [r0]
   146fc:	add	r0, r3, #16
   14700:	vld1.64	{d20-d21}, [r2]
   14704:	mov	r2, r3
   14708:	vst1.64	{d18-d19}, [r0]
   1470c:	add	r0, r3, #32
   14710:	vst1.64	{d20-d21}, [r0]
   14714:	mov	r0, #12
   14718:	vst1.64	{d16-d17}, [r2], r0
   1471c:	ldr	r0, [r2]
   14720:	orr	r0, r0, #67108864	; 0x4000000
   14724:	str	r0, [r2]
   14728:	mov	r0, #0
   1472c:	mvn	r2, #0
   14730:	bl	142c0 <__assert_fail@plt+0x2f4c>
   14734:	mov	sp, fp
   14738:	pop	{fp, pc}
   1473c:	push	{fp, lr}
   14740:	mov	fp, sp
   14744:	sub	sp, sp, #48	; 0x30
   14748:	mov	ip, r1
   1474c:	mov	r1, r0
   14750:	movw	r0, #33256	; 0x81e8
   14754:	mov	r3, #32
   14758:	movt	r0, #2
   1475c:	add	r2, r0, #16
   14760:	vld1.64	{d16-d17}, [r0], r3
   14764:	mov	r3, sp
   14768:	vld1.64	{d18-d19}, [r2]
   1476c:	add	r2, r3, #16
   14770:	vld1.64	{d20-d21}, [r0]
   14774:	add	r0, r3, #32
   14778:	vst1.64	{d18-d19}, [r2]
   1477c:	mov	r2, r3
   14780:	vst1.64	{d20-d21}, [r0]
   14784:	mov	r0, #12
   14788:	vst1.64	{d16-d17}, [r2], r0
   1478c:	ldr	r0, [r2]
   14790:	orr	r0, r0, #67108864	; 0x4000000
   14794:	str	r0, [r2]
   14798:	mov	r0, #0
   1479c:	mov	r2, ip
   147a0:	bl	142c0 <__assert_fail@plt+0x2f4c>
   147a4:	mov	sp, fp
   147a8:	pop	{fp, pc}
   147ac:	push	{r4, sl, fp, lr}
   147b0:	add	fp, sp, #8
   147b4:	sub	sp, sp, #96	; 0x60
   147b8:	mov	ip, r2
   147bc:	mov	r2, sp
   147c0:	vmov.i32	q8, #0	; 0x00000000
   147c4:	mov	r4, #28
   147c8:	cmp	r1, #10
   147cc:	mov	r3, r2
   147d0:	add	lr, r2, #16
   147d4:	vst1.64	{d16-d17}, [r3], r4
   147d8:	vst1.64	{d16-d17}, [lr]
   147dc:	vst1.32	{d16-d17}, [r3]
   147e0:	beq	14830 <__assert_fail@plt+0x34bc>
   147e4:	vld1.64	{d16-d17}, [r2], r4
   147e8:	vld1.64	{d18-d19}, [lr]
   147ec:	add	r3, sp, #48	; 0x30
   147f0:	add	r4, r3, #4
   147f4:	vld1.32	{d20-d21}, [r2]
   147f8:	add	r2, r3, #20
   147fc:	vst1.32	{d16-d17}, [r4]
   14800:	vst1.32	{d18-d19}, [r2]
   14804:	add	r2, r3, #32
   14808:	vst1.32	{d20-d21}, [r2]
   1480c:	str	r1, [sp, #48]	; 0x30
   14810:	mvn	r2, #0
   14814:	ldr	r1, [sp, #60]	; 0x3c
   14818:	orr	r1, r1, #67108864	; 0x4000000
   1481c:	str	r1, [sp, #60]	; 0x3c
   14820:	mov	r1, ip
   14824:	bl	142c0 <__assert_fail@plt+0x2f4c>
   14828:	sub	sp, fp, #8
   1482c:	pop	{r4, sl, fp, pc}
   14830:	bl	11350 <abort@plt>
   14834:	push	{r4, r5, fp, lr}
   14838:	add	fp, sp, #8
   1483c:	sub	sp, sp, #48	; 0x30
   14840:	mov	ip, r3
   14844:	movw	r3, #33256	; 0x81e8
   14848:	mov	lr, #32
   1484c:	cmp	r1, #0
   14850:	mov	r5, sp
   14854:	movt	r3, #2
   14858:	cmpne	r2, #0
   1485c:	add	r4, r3, #16
   14860:	vld1.64	{d16-d17}, [r3], lr
   14864:	vld1.64	{d18-d19}, [r4]
   14868:	add	r4, r5, #16
   1486c:	vld1.64	{d20-d21}, [r3]
   14870:	vst1.64	{d16-d17}, [r5], lr
   14874:	mov	r3, #10
   14878:	vst1.64	{d18-d19}, [r4]
   1487c:	vst1.64	{d20-d21}, [r5]
   14880:	str	r3, [sp]
   14884:	bne	1488c <__assert_fail@plt+0x3518>
   14888:	bl	11350 <abort@plt>
   1488c:	str	r2, [sp, #44]	; 0x2c
   14890:	str	r1, [sp, #40]	; 0x28
   14894:	mov	r3, sp
   14898:	mov	r1, ip
   1489c:	mvn	r2, #0
   148a0:	bl	142c0 <__assert_fail@plt+0x2f4c>
   148a4:	sub	sp, fp, #8
   148a8:	pop	{r4, r5, fp, pc}
   148ac:	push	{r4, r5, fp, lr}
   148b0:	add	fp, sp, #8
   148b4:	sub	sp, sp, #48	; 0x30
   148b8:	mov	lr, r3
   148bc:	movw	r3, #33256	; 0x81e8
   148c0:	mov	ip, #32
   148c4:	cmp	r1, #0
   148c8:	mov	r5, sp
   148cc:	movt	r3, #2
   148d0:	cmpne	r2, #0
   148d4:	add	r4, r3, #16
   148d8:	vld1.64	{d16-d17}, [r3], ip
   148dc:	vld1.64	{d18-d19}, [r4]
   148e0:	add	r4, r5, #16
   148e4:	vld1.64	{d20-d21}, [r3]
   148e8:	vst1.64	{d16-d17}, [r5], ip
   148ec:	mov	r3, #10
   148f0:	vst1.64	{d18-d19}, [r4]
   148f4:	vst1.64	{d20-d21}, [r5]
   148f8:	str	r3, [sp]
   148fc:	bne	14904 <__assert_fail@plt+0x3590>
   14900:	bl	11350 <abort@plt>
   14904:	ldr	ip, [fp, #8]
   14908:	str	r2, [sp, #44]	; 0x2c
   1490c:	str	r1, [sp, #40]	; 0x28
   14910:	mov	r3, sp
   14914:	mov	r1, lr
   14918:	mov	r2, ip
   1491c:	bl	142c0 <__assert_fail@plt+0x2f4c>
   14920:	sub	sp, fp, #8
   14924:	pop	{r4, r5, fp, pc}
   14928:	push	{r4, sl, fp, lr}
   1492c:	add	fp, sp, #8
   14930:	sub	sp, sp, #48	; 0x30
   14934:	mov	ip, r2
   14938:	movw	r2, #33256	; 0x81e8
   1493c:	mov	lr, #32
   14940:	cmp	r0, #0
   14944:	mov	r4, sp
   14948:	movt	r2, #2
   1494c:	cmpne	r1, #0
   14950:	add	r3, r2, #16
   14954:	vld1.64	{d16-d17}, [r2], lr
   14958:	vld1.64	{d18-d19}, [r3]
   1495c:	add	r3, r4, #16
   14960:	vld1.64	{d20-d21}, [r2]
   14964:	vst1.64	{d16-d17}, [r4], lr
   14968:	mov	r2, #10
   1496c:	vst1.64	{d18-d19}, [r3]
   14970:	vst1.64	{d20-d21}, [r4]
   14974:	str	r2, [sp]
   14978:	bne	14980 <__assert_fail@plt+0x360c>
   1497c:	bl	11350 <abort@plt>
   14980:	str	r1, [sp, #44]	; 0x2c
   14984:	str	r0, [sp, #40]	; 0x28
   14988:	mov	r3, sp
   1498c:	mov	r0, #0
   14990:	mov	r1, ip
   14994:	mvn	r2, #0
   14998:	bl	142c0 <__assert_fail@plt+0x2f4c>
   1499c:	sub	sp, fp, #8
   149a0:	pop	{r4, sl, fp, pc}
   149a4:	push	{r4, r5, fp, lr}
   149a8:	add	fp, sp, #8
   149ac:	sub	sp, sp, #48	; 0x30
   149b0:	mov	lr, r2
   149b4:	movw	r2, #33256	; 0x81e8
   149b8:	mov	ip, r3
   149bc:	mov	r3, #32
   149c0:	cmp	r0, #0
   149c4:	mov	r5, sp
   149c8:	movt	r2, #2
   149cc:	cmpne	r1, #0
   149d0:	add	r4, r2, #16
   149d4:	vld1.64	{d16-d17}, [r2], r3
   149d8:	vld1.64	{d18-d19}, [r4]
   149dc:	add	r4, r5, #16
   149e0:	vld1.64	{d20-d21}, [r2]
   149e4:	vst1.64	{d16-d17}, [r5], r3
   149e8:	mov	r2, #10
   149ec:	vst1.64	{d18-d19}, [r4]
   149f0:	vst1.64	{d20-d21}, [r5]
   149f4:	str	r2, [sp]
   149f8:	bne	14a00 <__assert_fail@plt+0x368c>
   149fc:	bl	11350 <abort@plt>
   14a00:	str	r1, [sp, #44]	; 0x2c
   14a04:	str	r0, [sp, #40]	; 0x28
   14a08:	mov	r3, sp
   14a0c:	mov	r0, #0
   14a10:	mov	r1, lr
   14a14:	mov	r2, ip
   14a18:	bl	142c0 <__assert_fail@plt+0x2f4c>
   14a1c:	sub	sp, fp, #8
   14a20:	pop	{r4, r5, fp, pc}
   14a24:	movw	r3, #33056	; 0x8120
   14a28:	movt	r3, #2
   14a2c:	b	142c0 <__assert_fail@plt+0x2f4c>
   14a30:	movw	r3, #33056	; 0x8120
   14a34:	mov	r2, r1
   14a38:	mov	r1, r0
   14a3c:	mov	r0, #0
   14a40:	movt	r3, #2
   14a44:	b	142c0 <__assert_fail@plt+0x2f4c>
   14a48:	movw	r3, #33056	; 0x8120
   14a4c:	mvn	r2, #0
   14a50:	movt	r3, #2
   14a54:	b	142c0 <__assert_fail@plt+0x2f4c>
   14a58:	movw	r3, #33056	; 0x8120
   14a5c:	mov	r1, r0
   14a60:	mov	r0, #0
   14a64:	mvn	r2, #0
   14a68:	movt	r3, #2
   14a6c:	b	142c0 <__assert_fail@plt+0x2f4c>
   14a70:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14a74:	add	fp, sp, #28
   14a78:	sub	sp, sp, #12
   14a7c:	ldr	sl, [fp, #8]
   14a80:	mov	r9, r3
   14a84:	mov	r8, r1
   14a88:	mov	r5, r0
   14a8c:	cmp	r2, #0
   14a90:	beq	14b1c <__assert_fail@plt+0x37a8>
   14a94:	mov	r0, r5
   14a98:	mov	r1, #58	; 0x3a
   14a9c:	mov	r6, r2
   14aa0:	bl	1126c <strchr@plt>
   14aa4:	mov	r7, r0
   14aa8:	mov	r0, r5
   14aac:	mov	r2, r8
   14ab0:	mov	r3, r6
   14ab4:	stm	sp, {r9, sl}
   14ab8:	mov	r1, r7
   14abc:	bl	14b3c <__assert_fail@plt+0x37c8>
   14ac0:	mov	r4, r0
   14ac4:	cmp	r0, #0
   14ac8:	beq	14b10 <__assert_fail@plt+0x379c>
   14acc:	cmp	r7, #0
   14ad0:	bne	14b10 <__assert_fail@plt+0x379c>
   14ad4:	mov	r0, r5
   14ad8:	mov	r1, #46	; 0x2e
   14adc:	bl	1126c <strchr@plt>
   14ae0:	cmp	r0, #0
   14ae4:	beq	14b10 <__assert_fail@plt+0x379c>
   14ae8:	mov	r1, r0
   14aec:	mov	r0, r5
   14af0:	mov	r2, r8
   14af4:	mov	r3, r6
   14af8:	stm	sp, {r9, sl}
   14afc:	bl	14b3c <__assert_fail@plt+0x37c8>
   14b00:	cmp	r0, #0
   14b04:	movne	r0, r4
   14b08:	sub	sp, fp, #28
   14b0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14b10:	mov	r0, r4
   14b14:	sub	sp, fp, #28
   14b18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14b1c:	mov	r0, r5
   14b20:	mov	r1, #0
   14b24:	mov	r2, r8
   14b28:	mov	r3, #0
   14b2c:	stm	sp, {r9, sl}
   14b30:	bl	14b3c <__assert_fail@plt+0x37c8>
   14b34:	sub	sp, fp, #28
   14b38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14b3c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14b40:	add	fp, sp, #28
   14b44:	sub	sp, sp, #36	; 0x24
   14b48:	mov	sl, r3
   14b4c:	ldr	r3, [r2]
   14b50:	mov	r9, r2
   14b54:	mov	r4, r1
   14b58:	ldr	r2, [fp, #8]
   14b5c:	ldr	r8, [fp, #12]
   14b60:	cmp	sl, #0
   14b64:	ldrne	r1, [sl]
   14b68:	str	r3, [sp, #4]
   14b6c:	mvneq	r1, #0
   14b70:	cmp	r2, #0
   14b74:	str	r1, [sp, #8]
   14b78:	movne	r1, #0
   14b7c:	strne	r1, [r2]
   14b80:	cmp	r8, #0
   14b84:	movne	r1, #0
   14b88:	strne	r1, [r8]
   14b8c:	cmp	r4, #0
   14b90:	beq	14c18 <__assert_fail@plt+0x38a4>
   14b94:	subs	r5, r4, r0
   14b98:	beq	14d08 <__assert_fail@plt+0x3994>
   14b9c:	add	r1, r5, #1
   14ba0:	bl	159c0 <__assert_fail@plt+0x464c>
   14ba4:	mov	r7, r0
   14ba8:	mov	r0, #0
   14bac:	mov	r6, r4
   14bb0:	strb	r0, [r7, r5]
   14bb4:	ldrb	r0, [r6, #1]!
   14bb8:	cmp	r0, #0
   14bbc:	moveq	r6, r0
   14bc0:	ldrb	r0, [r7]
   14bc4:	cmp	r0, #43	; 0x2b
   14bc8:	beq	14c3c <__assert_fail@plt+0x38c8>
   14bcc:	mov	r0, r7
   14bd0:	bl	110d4 <getpwnam@plt>
   14bd4:	cmp	r0, #0
   14bd8:	beq	14c3c <__assert_fail@plt+0x38c8>
   14bdc:	ldr	r1, [r0, #8]
   14be0:	mov	r5, #0
   14be4:	cmp	r4, #0
   14be8:	str	r1, [sp, #4]
   14bec:	beq	14e24 <__assert_fail@plt+0x3ab0>
   14bf0:	cmp	r6, #0
   14bf4:	bne	14e24 <__assert_fail@plt+0x3ab0>
   14bf8:	ldr	r4, [r0, #12]
   14bfc:	mov	r0, r4
   14c00:	bl	1135c <getgrgid@plt>
   14c04:	cmp	r0, #0
   14c08:	str	r4, [sp, #8]
   14c0c:	beq	14e38 <__assert_fail@plt+0x3ac4>
   14c10:	ldr	r0, [r0]
   14c14:	b	14e48 <__assert_fail@plt+0x3ad4>
   14c18:	ldrb	r1, [r0]
   14c1c:	cmp	r1, #0
   14c20:	beq	14da4 <__assert_fail@plt+0x3a30>
   14c24:	bl	15a44 <__assert_fail@plt+0x46d0>
   14c28:	mov	r7, r0
   14c2c:	mov	r6, #0
   14c30:	ldrb	r0, [r7]
   14c34:	cmp	r0, #43	; 0x2b
   14c38:	bne	14bcc <__assert_fail@plt+0x3858>
   14c3c:	cmp	r4, #0
   14c40:	beq	14d3c <__assert_fail@plt+0x39c8>
   14c44:	cmp	r6, #0
   14c48:	bne	14d3c <__assert_fail@plt+0x39c8>
   14c4c:	movw	r5, #30267	; 0x763b
   14c50:	mov	r4, #0
   14c54:	movt	r5, #1
   14c58:	bl	11308 <endpwent@plt>
   14c5c:	cmp	r6, #0
   14c60:	beq	14d2c <__assert_fail@plt+0x39b8>
   14c64:	cmp	r5, #0
   14c68:	bne	14d2c <__assert_fail@plt+0x39b8>
   14c6c:	ldrb	r0, [r6]
   14c70:	cmp	r0, #43	; 0x2b
   14c74:	beq	14c94 <__assert_fail@plt+0x3920>
   14c78:	mov	r0, r6
   14c7c:	bl	11368 <getgrnam@plt>
   14c80:	cmp	r0, #0
   14c84:	beq	14c94 <__assert_fail@plt+0x3920>
   14c88:	ldr	r0, [r0, #8]
   14c8c:	mov	r5, #0
   14c90:	b	14ce4 <__assert_fail@plt+0x3970>
   14c94:	movw	r0, #28023	; 0x6d77
   14c98:	add	r3, sp, #12
   14c9c:	mov	r1, #0
   14ca0:	mov	r2, #10
   14ca4:	movt	r0, #1
   14ca8:	str	r0, [sp]
   14cac:	mov	r0, r6
   14cb0:	bl	15afc <__assert_fail@plt+0x4788>
   14cb4:	ldr	r1, [sp, #12]
   14cb8:	clz	r0, r0
   14cbc:	movw	r5, #30253	; 0x762d
   14cc0:	lsr	r0, r0, #5
   14cc4:	movt	r5, #1
   14cc8:	add	r2, r1, #1
   14ccc:	cmn	r1, #1
   14cd0:	movwne	r2, #1
   14cd4:	ands	r0, r0, r2
   14cd8:	ldr	r0, [sp, #8]
   14cdc:	movwne	r5, #0
   14ce0:	movne	r0, r1
   14ce4:	str	r0, [sp, #8]
   14ce8:	bl	110b0 <endgrent@plt>
   14cec:	mov	r0, r6
   14cf0:	bl	15a44 <__assert_fail@plt+0x46d0>
   14cf4:	mov	r4, r0
   14cf8:	mov	r6, #0
   14cfc:	cmp	r5, #0
   14d00:	bne	14df0 <__assert_fail@plt+0x3a7c>
   14d04:	b	14dac <__assert_fail@plt+0x3a38>
   14d08:	ldrb	r0, [r4, #1]!
   14d0c:	mov	r7, #0
   14d10:	mov	r5, #0
   14d14:	cmp	r0, #0
   14d18:	moveq	r4, r0
   14d1c:	mov	r6, r4
   14d20:	mov	r4, #0
   14d24:	cmp	r6, #0
   14d28:	bne	14c64 <__assert_fail@plt+0x38f0>
   14d2c:	mov	r6, #0
   14d30:	cmp	r5, #0
   14d34:	bne	14df0 <__assert_fail@plt+0x3a7c>
   14d38:	b	14dac <__assert_fail@plt+0x3a38>
   14d3c:	movw	r0, #28023	; 0x6d77
   14d40:	add	r3, sp, #12
   14d44:	mov	r1, #0
   14d48:	mov	r2, #10
   14d4c:	mov	r4, #0
   14d50:	movt	r0, #1
   14d54:	str	r0, [sp]
   14d58:	mov	r0, r7
   14d5c:	bl	15afc <__assert_fail@plt+0x4788>
   14d60:	ldr	r1, [sp, #12]
   14d64:	clz	r0, r0
   14d68:	movw	r5, #30240	; 0x7620
   14d6c:	lsr	r0, r0, #5
   14d70:	movt	r5, #1
   14d74:	add	r2, r1, #1
   14d78:	cmn	r1, #1
   14d7c:	movwne	r2, #1
   14d80:	ands	r0, r0, r2
   14d84:	ldr	r0, [sp, #4]
   14d88:	movwne	r5, #0
   14d8c:	movne	r0, r1
   14d90:	str	r0, [sp, #4]
   14d94:	bl	11308 <endpwent@plt>
   14d98:	cmp	r6, #0
   14d9c:	bne	14c64 <__assert_fail@plt+0x38f0>
   14da0:	b	14d2c <__assert_fail@plt+0x39b8>
   14da4:	mov	r4, #0
   14da8:	mov	r7, #0
   14dac:	ldr	r0, [sp, #4]
   14db0:	cmp	sl, #0
   14db4:	mov	r6, #1
   14db8:	str	r0, [r9]
   14dbc:	ldrne	r0, [sp, #8]
   14dc0:	strne	r0, [sl]
   14dc4:	ldr	r0, [fp, #8]
   14dc8:	cmp	r0, #0
   14dcc:	strne	r7, [r0]
   14dd0:	movne	r7, #0
   14dd4:	cmp	r8, #0
   14dd8:	beq	14dec <__assert_fail@plt+0x3a78>
   14ddc:	str	r4, [r8]
   14de0:	mov	r5, #0
   14de4:	mov	r4, #0
   14de8:	b	14df0 <__assert_fail@plt+0x3a7c>
   14dec:	mov	r5, #0
   14df0:	mov	r0, r7
   14df4:	bl	12a58 <__assert_fail@plt+0x16e4>
   14df8:	mov	r0, r4
   14dfc:	bl	12a58 <__assert_fail@plt+0x16e4>
   14e00:	mov	r0, #0
   14e04:	cmp	r6, #0
   14e08:	bne	14e1c <__assert_fail@plt+0x3aa8>
   14e0c:	mov	r0, #0
   14e10:	mov	r1, r5
   14e14:	mov	r2, #5
   14e18:	bl	11158 <dcgettext@plt>
   14e1c:	sub	sp, fp, #28
   14e20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14e24:	mov	r4, #0
   14e28:	bl	11308 <endpwent@plt>
   14e2c:	cmp	r6, #0
   14e30:	bne	14c64 <__assert_fail@plt+0x38f0>
   14e34:	b	14d2c <__assert_fail@plt+0x39b8>
   14e38:	add	r2, sp, #12
   14e3c:	mov	r0, r4
   14e40:	mov	r1, #0
   14e44:	bl	12a80 <__assert_fail@plt+0x170c>
   14e48:	bl	15a44 <__assert_fail@plt+0x46d0>
   14e4c:	mov	r4, r0
   14e50:	bl	110b0 <endgrent@plt>
   14e54:	bl	11308 <endpwent@plt>
   14e58:	cmp	r6, #0
   14e5c:	bne	14c64 <__assert_fail@plt+0x38f0>
   14e60:	b	14d2c <__assert_fail@plt+0x39b8>
   14e64:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14e68:	add	fp, sp, #24
   14e6c:	sub	sp, sp, #32
   14e70:	ldr	r6, [fp, #12]
   14e74:	ldr	r7, [fp, #8]
   14e78:	mov	r4, r2
   14e7c:	mov	r8, r0
   14e80:	cmp	r1, #0
   14e84:	beq	14eac <__assert_fail@plt+0x3b38>
   14e88:	movw	r2, #30280	; 0x7648
   14e8c:	mov	r5, r1
   14e90:	str	r3, [sp, #4]
   14e94:	str	r4, [sp]
   14e98:	mov	r0, r8
   14e9c:	mov	r1, #1
   14ea0:	movt	r2, #1
   14ea4:	mov	r3, r5
   14ea8:	b	14ec4 <__assert_fail@plt+0x3b50>
   14eac:	movw	r2, #30292	; 0x7654
   14eb0:	str	r3, [sp]
   14eb4:	mov	r0, r8
   14eb8:	mov	r1, #1
   14ebc:	mov	r3, r4
   14ec0:	movt	r2, #1
   14ec4:	bl	112cc <__fprintf_chk@plt>
   14ec8:	movw	r1, #30299	; 0x765b
   14ecc:	mov	r0, #0
   14ed0:	mov	r2, #5
   14ed4:	movt	r1, #1
   14ed8:	bl	11158 <dcgettext@plt>
   14edc:	movw	r2, #31017	; 0x7929
   14ee0:	mov	r3, r0
   14ee4:	movw	r0, #2022	; 0x7e6
   14ee8:	mov	r1, #1
   14eec:	str	r0, [sp]
   14ef0:	movt	r2, #1
   14ef4:	mov	r0, r8
   14ef8:	bl	112cc <__fprintf_chk@plt>
   14efc:	movw	r4, #28022	; 0x6d76
   14f00:	mov	r1, r8
   14f04:	movt	r4, #1
   14f08:	mov	r0, r4
   14f0c:	bl	110bc <fputs_unlocked@plt>
   14f10:	movw	r1, #30303	; 0x765f
   14f14:	mov	r0, #0
   14f18:	mov	r2, #5
   14f1c:	movt	r1, #1
   14f20:	bl	11158 <dcgettext@plt>
   14f24:	movw	r3, #30474	; 0x770a
   14f28:	mov	r2, r0
   14f2c:	mov	r0, r8
   14f30:	mov	r1, #1
   14f34:	movt	r3, #1
   14f38:	bl	112cc <__fprintf_chk@plt>
   14f3c:	mov	r0, r4
   14f40:	mov	r1, r8
   14f44:	bl	110bc <fputs_unlocked@plt>
   14f48:	cmp	r6, #9
   14f4c:	bhi	14f88 <__assert_fail@plt+0x3c14>
   14f50:	add	r0, pc, #0
   14f54:	ldr	pc, [r0, r6, lsl #2]
   14f58:	andeq	r4, r1, r0, lsl #31
   14f5c:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   14f60:	andeq	r4, r1, r4, asr #31
   14f64:	andeq	r4, r1, ip, ror #31
   14f68:	andeq	r5, r1, r4, lsl r0
   14f6c:	andeq	r5, r1, ip, lsr r0
   14f70:	andeq	r5, r1, r4, rrx
   14f74:	muleq	r1, ip, r0
   14f78:	andeq	r5, r1, r4, asr #2
   14f7c:	andeq	r5, r1, ip, ror #1
   14f80:	sub	sp, fp, #24
   14f84:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14f88:	movw	r1, #30827	; 0x786b
   14f8c:	movt	r1, #1
   14f90:	b	150f4 <__assert_fail@plt+0x3d80>
   14f94:	movw	r1, #30508	; 0x772c
   14f98:	mov	r0, #0
   14f9c:	mov	r2, #5
   14fa0:	movt	r1, #1
   14fa4:	bl	11158 <dcgettext@plt>
   14fa8:	ldr	r3, [r7]
   14fac:	mov	r2, r0
   14fb0:	mov	r0, r8
   14fb4:	mov	r1, #1
   14fb8:	sub	sp, fp, #24
   14fbc:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   14fc0:	b	112cc <__fprintf_chk@plt>
   14fc4:	movw	r1, #30524	; 0x773c
   14fc8:	mov	r0, #0
   14fcc:	mov	r2, #5
   14fd0:	movt	r1, #1
   14fd4:	bl	11158 <dcgettext@plt>
   14fd8:	mov	r2, r0
   14fdc:	ldr	r3, [r7]
   14fe0:	ldr	r0, [r7, #4]
   14fe4:	str	r0, [sp]
   14fe8:	b	150d8 <__assert_fail@plt+0x3d64>
   14fec:	movw	r1, #30547	; 0x7753
   14ff0:	mov	r0, #0
   14ff4:	mov	r2, #5
   14ff8:	movt	r1, #1
   14ffc:	bl	11158 <dcgettext@plt>
   15000:	ldr	r3, [r7]
   15004:	mov	r2, r0
   15008:	ldmib	r7, {r0, r1}
   1500c:	stm	sp, {r0, r1}
   15010:	b	150d8 <__assert_fail@plt+0x3d64>
   15014:	movw	r1, #30575	; 0x776f
   15018:	mov	r0, #0
   1501c:	mov	r2, #5
   15020:	movt	r1, #1
   15024:	bl	11158 <dcgettext@plt>
   15028:	ldr	r3, [r7]
   1502c:	mov	r2, r0
   15030:	ldmib	r7, {r0, r1, r7}
   15034:	stm	sp, {r0, r1, r7}
   15038:	b	150d8 <__assert_fail@plt+0x3d64>
   1503c:	movw	r1, #30607	; 0x778f
   15040:	mov	r0, #0
   15044:	mov	r2, #5
   15048:	movt	r1, #1
   1504c:	bl	11158 <dcgettext@plt>
   15050:	ldr	r3, [r7]
   15054:	mov	r2, r0
   15058:	ldmib	r7, {r0, r1, r6, r7}
   1505c:	stm	sp, {r0, r1, r6, r7}
   15060:	b	150d8 <__assert_fail@plt+0x3d64>
   15064:	movw	r1, #30643	; 0x77b3
   15068:	mov	r0, #0
   1506c:	mov	r2, #5
   15070:	movt	r1, #1
   15074:	bl	11158 <dcgettext@plt>
   15078:	ldr	r3, [r7]
   1507c:	mov	r2, r0
   15080:	ldmib	r7, {r0, r1, r6}
   15084:	ldr	r5, [r7, #16]
   15088:	ldr	r7, [r7, #20]
   1508c:	stm	sp, {r0, r1, r6}
   15090:	str	r5, [sp, #12]
   15094:	str	r7, [sp, #16]
   15098:	b	150d8 <__assert_fail@plt+0x3d64>
   1509c:	movw	r1, #30683	; 0x77db
   150a0:	mov	r0, #0
   150a4:	mov	r2, #5
   150a8:	movt	r1, #1
   150ac:	bl	11158 <dcgettext@plt>
   150b0:	ldr	r3, [r7]
   150b4:	mov	r2, r0
   150b8:	ldmib	r7, {r0, r1, r6}
   150bc:	ldr	r5, [r7, #16]
   150c0:	ldr	r4, [r7, #20]
   150c4:	ldr	r7, [r7, #24]
   150c8:	stm	sp, {r0, r1, r6}
   150cc:	str	r5, [sp, #12]
   150d0:	str	r4, [sp, #16]
   150d4:	str	r7, [sp, #20]
   150d8:	mov	r0, r8
   150dc:	mov	r1, #1
   150e0:	bl	112cc <__fprintf_chk@plt>
   150e4:	sub	sp, fp, #24
   150e8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   150ec:	movw	r1, #30775	; 0x7837
   150f0:	movt	r1, #1
   150f4:	mov	r0, #0
   150f8:	mov	r2, #5
   150fc:	bl	11158 <dcgettext@plt>
   15100:	mov	ip, r0
   15104:	ldr	r3, [r7]
   15108:	ldr	r0, [r7, #4]
   1510c:	ldr	r1, [r7, #8]
   15110:	ldr	r6, [r7, #12]
   15114:	ldr	r5, [r7, #16]
   15118:	ldr	r4, [r7, #20]
   1511c:	ldr	r2, [r7, #24]
   15120:	ldr	lr, [r7, #28]
   15124:	ldr	r7, [r7, #32]
   15128:	stm	sp, {r0, r1, r6}
   1512c:	str	r5, [sp, #12]
   15130:	str	r4, [sp, #16]
   15134:	str	r2, [sp, #20]
   15138:	str	lr, [sp, #24]
   1513c:	str	r7, [sp, #28]
   15140:	b	15188 <__assert_fail@plt+0x3e14>
   15144:	movw	r1, #30727	; 0x7807
   15148:	mov	r0, #0
   1514c:	mov	r2, #5
   15150:	movt	r1, #1
   15154:	bl	11158 <dcgettext@plt>
   15158:	mov	ip, r0
   1515c:	ldr	r3, [r7]
   15160:	ldmib	r7, {r0, r1, r6}
   15164:	ldr	r5, [r7, #16]
   15168:	ldr	r4, [r7, #20]
   1516c:	ldr	r2, [r7, #24]
   15170:	ldr	r7, [r7, #28]
   15174:	stm	sp, {r0, r1, r6}
   15178:	str	r5, [sp, #12]
   1517c:	str	r4, [sp, #16]
   15180:	str	r2, [sp, #20]
   15184:	str	r7, [sp, #24]
   15188:	mov	r0, r8
   1518c:	mov	r1, #1
   15190:	mov	r2, ip
   15194:	bl	112cc <__fprintf_chk@plt>
   15198:	sub	sp, fp, #24
   1519c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   151a0:	push	{r4, sl, fp, lr}
   151a4:	add	fp, sp, #8
   151a8:	sub	sp, sp, #8
   151ac:	ldr	ip, [fp, #8]
   151b0:	mov	lr, #0
   151b4:	ldr	r4, [ip, lr, lsl #2]
   151b8:	add	lr, lr, #1
   151bc:	cmp	r4, #0
   151c0:	bne	151b4 <__assert_fail@plt+0x3e40>
   151c4:	sub	r4, lr, #1
   151c8:	str	ip, [sp]
   151cc:	str	r4, [sp, #4]
   151d0:	bl	14e64 <__assert_fail@plt+0x3af0>
   151d4:	sub	sp, fp, #8
   151d8:	pop	{r4, sl, fp, pc}
   151dc:	push	{fp, lr}
   151e0:	mov	fp, sp
   151e4:	sub	sp, sp, #48	; 0x30
   151e8:	ldr	ip, [fp, #8]
   151ec:	ldr	lr, [ip]
   151f0:	cmp	lr, #0
   151f4:	str	lr, [sp, #8]
   151f8:	beq	15294 <__assert_fail@plt+0x3f20>
   151fc:	ldr	lr, [ip, #4]
   15200:	cmp	lr, #0
   15204:	str	lr, [sp, #12]
   15208:	beq	1529c <__assert_fail@plt+0x3f28>
   1520c:	ldr	lr, [ip, #8]
   15210:	cmp	lr, #0
   15214:	str	lr, [sp, #16]
   15218:	beq	152a4 <__assert_fail@plt+0x3f30>
   1521c:	ldr	lr, [ip, #12]
   15220:	cmp	lr, #0
   15224:	str	lr, [sp, #20]
   15228:	beq	152ac <__assert_fail@plt+0x3f38>
   1522c:	ldr	lr, [ip, #16]
   15230:	cmp	lr, #0
   15234:	str	lr, [sp, #24]
   15238:	beq	152b4 <__assert_fail@plt+0x3f40>
   1523c:	ldr	lr, [ip, #20]
   15240:	cmp	lr, #0
   15244:	str	lr, [sp, #28]
   15248:	beq	152bc <__assert_fail@plt+0x3f48>
   1524c:	ldr	lr, [ip, #24]
   15250:	cmp	lr, #0
   15254:	str	lr, [sp, #32]
   15258:	beq	152c4 <__assert_fail@plt+0x3f50>
   1525c:	ldr	lr, [ip, #28]
   15260:	cmp	lr, #0
   15264:	str	lr, [sp, #36]	; 0x24
   15268:	beq	152cc <__assert_fail@plt+0x3f58>
   1526c:	ldr	lr, [ip, #32]
   15270:	cmp	lr, #0
   15274:	str	lr, [sp, #40]	; 0x28
   15278:	beq	152d4 <__assert_fail@plt+0x3f60>
   1527c:	ldr	lr, [ip, #36]	; 0x24
   15280:	mov	ip, #10
   15284:	cmp	lr, #0
   15288:	str	lr, [sp, #44]	; 0x2c
   1528c:	movweq	ip, #9
   15290:	b	152d8 <__assert_fail@plt+0x3f64>
   15294:	mov	ip, #0
   15298:	b	152d8 <__assert_fail@plt+0x3f64>
   1529c:	mov	ip, #1
   152a0:	b	152d8 <__assert_fail@plt+0x3f64>
   152a4:	mov	ip, #2
   152a8:	b	152d8 <__assert_fail@plt+0x3f64>
   152ac:	mov	ip, #3
   152b0:	b	152d8 <__assert_fail@plt+0x3f64>
   152b4:	mov	ip, #4
   152b8:	b	152d8 <__assert_fail@plt+0x3f64>
   152bc:	mov	ip, #5
   152c0:	b	152d8 <__assert_fail@plt+0x3f64>
   152c4:	mov	ip, #6
   152c8:	b	152d8 <__assert_fail@plt+0x3f64>
   152cc:	mov	ip, #7
   152d0:	b	152d8 <__assert_fail@plt+0x3f64>
   152d4:	mov	ip, #8
   152d8:	add	lr, sp, #8
   152dc:	str	ip, [sp, #4]
   152e0:	str	lr, [sp]
   152e4:	bl	14e64 <__assert_fail@plt+0x3af0>
   152e8:	mov	sp, fp
   152ec:	pop	{fp, pc}
   152f0:	push	{fp, lr}
   152f4:	mov	fp, sp
   152f8:	sub	sp, sp, #56	; 0x38
   152fc:	add	ip, fp, #8
   15300:	str	ip, [sp, #12]
   15304:	ldr	lr, [fp, #8]
   15308:	cmp	lr, #0
   1530c:	str	lr, [sp, #16]
   15310:	beq	153ac <__assert_fail@plt+0x4038>
   15314:	ldr	lr, [ip, #4]
   15318:	cmp	lr, #0
   1531c:	str	lr, [sp, #20]
   15320:	beq	153b4 <__assert_fail@plt+0x4040>
   15324:	ldr	lr, [ip, #8]
   15328:	cmp	lr, #0
   1532c:	str	lr, [sp, #24]
   15330:	beq	153bc <__assert_fail@plt+0x4048>
   15334:	ldr	lr, [ip, #12]
   15338:	cmp	lr, #0
   1533c:	str	lr, [sp, #28]
   15340:	beq	153c4 <__assert_fail@plt+0x4050>
   15344:	ldr	lr, [ip, #16]
   15348:	cmp	lr, #0
   1534c:	str	lr, [sp, #32]
   15350:	beq	153cc <__assert_fail@plt+0x4058>
   15354:	ldr	lr, [ip, #20]
   15358:	cmp	lr, #0
   1535c:	str	lr, [sp, #36]	; 0x24
   15360:	beq	153d4 <__assert_fail@plt+0x4060>
   15364:	ldr	lr, [ip, #24]
   15368:	cmp	lr, #0
   1536c:	str	lr, [sp, #40]	; 0x28
   15370:	beq	153dc <__assert_fail@plt+0x4068>
   15374:	ldr	lr, [ip, #28]
   15378:	cmp	lr, #0
   1537c:	str	lr, [sp, #44]	; 0x2c
   15380:	beq	153e4 <__assert_fail@plt+0x4070>
   15384:	ldr	lr, [ip, #32]
   15388:	cmp	lr, #0
   1538c:	str	lr, [sp, #48]	; 0x30
   15390:	beq	153ec <__assert_fail@plt+0x4078>
   15394:	ldr	lr, [ip, #36]	; 0x24
   15398:	mov	ip, #10
   1539c:	cmp	lr, #0
   153a0:	str	lr, [sp, #52]	; 0x34
   153a4:	movweq	ip, #9
   153a8:	b	153f0 <__assert_fail@plt+0x407c>
   153ac:	mov	ip, #0
   153b0:	b	153f0 <__assert_fail@plt+0x407c>
   153b4:	mov	ip, #1
   153b8:	b	153f0 <__assert_fail@plt+0x407c>
   153bc:	mov	ip, #2
   153c0:	b	153f0 <__assert_fail@plt+0x407c>
   153c4:	mov	ip, #3
   153c8:	b	153f0 <__assert_fail@plt+0x407c>
   153cc:	mov	ip, #4
   153d0:	b	153f0 <__assert_fail@plt+0x407c>
   153d4:	mov	ip, #5
   153d8:	b	153f0 <__assert_fail@plt+0x407c>
   153dc:	mov	ip, #6
   153e0:	b	153f0 <__assert_fail@plt+0x407c>
   153e4:	mov	ip, #7
   153e8:	b	153f0 <__assert_fail@plt+0x407c>
   153ec:	mov	ip, #8
   153f0:	add	lr, sp, #16
   153f4:	str	ip, [sp, #4]
   153f8:	str	lr, [sp]
   153fc:	bl	14e64 <__assert_fail@plt+0x3af0>
   15400:	mov	sp, fp
   15404:	pop	{fp, pc}
   15408:	push	{fp, lr}
   1540c:	mov	fp, sp
   15410:	movw	r0, #33140	; 0x8174
   15414:	movt	r0, #2
   15418:	ldr	r1, [r0]
   1541c:	movw	r0, #28022	; 0x6d76
   15420:	movt	r0, #1
   15424:	bl	110bc <fputs_unlocked@plt>
   15428:	movw	r1, #30887	; 0x78a7
   1542c:	mov	r0, #0
   15430:	mov	r2, #5
   15434:	movt	r1, #1
   15438:	bl	11158 <dcgettext@plt>
   1543c:	movw	r2, #30907	; 0x78bb
   15440:	mov	r1, r0
   15444:	mov	r0, #1
   15448:	movt	r2, #1
   1544c:	bl	112b4 <__printf_chk@plt>
   15450:	movw	r1, #30929	; 0x78d1
   15454:	mov	r0, #0
   15458:	mov	r2, #5
   1545c:	movt	r1, #1
   15460:	bl	11158 <dcgettext@plt>
   15464:	movw	r2, #28806	; 0x7086
   15468:	movw	r3, #29312	; 0x7280
   1546c:	mov	r1, r0
   15470:	mov	r0, #1
   15474:	movt	r2, #1
   15478:	movt	r3, #1
   1547c:	bl	112b4 <__printf_chk@plt>
   15480:	movw	r1, #30949	; 0x78e5
   15484:	mov	r0, #0
   15488:	mov	r2, #5
   1548c:	movt	r1, #1
   15490:	bl	11158 <dcgettext@plt>
   15494:	movw	r2, #30988	; 0x790c
   15498:	mov	r1, r0
   1549c:	mov	r0, #1
   154a0:	movt	r2, #1
   154a4:	pop	{fp, lr}
   154a8:	b	112b4 <__printf_chk@plt>
   154ac:	push	{r4, r5, r6, sl, fp, lr}
   154b0:	add	fp, sp, #16
   154b4:	mov	r4, r2
   154b8:	mov	r5, r1
   154bc:	mov	r6, r0
   154c0:	bl	16980 <__assert_fail@plt+0x560c>
   154c4:	cmp	r0, #0
   154c8:	popne	{r4, r5, r6, sl, fp, pc}
   154cc:	cmp	r6, #0
   154d0:	beq	154e4 <__assert_fail@plt+0x4170>
   154d4:	cmp	r5, #0
   154d8:	cmpne	r4, #0
   154dc:	bne	154e4 <__assert_fail@plt+0x4170>
   154e0:	pop	{r4, r5, r6, sl, fp, pc}
   154e4:	bl	15a84 <__assert_fail@plt+0x4710>
   154e8:	push	{r4, r5, r6, sl, fp, lr}
   154ec:	add	fp, sp, #16
   154f0:	mov	r4, r2
   154f4:	mov	r5, r1
   154f8:	mov	r6, r0
   154fc:	bl	16980 <__assert_fail@plt+0x560c>
   15500:	cmp	r0, #0
   15504:	popne	{r4, r5, r6, sl, fp, pc}
   15508:	cmp	r6, #0
   1550c:	beq	15520 <__assert_fail@plt+0x41ac>
   15510:	cmp	r5, #0
   15514:	cmpne	r4, #0
   15518:	bne	15520 <__assert_fail@plt+0x41ac>
   1551c:	pop	{r4, r5, r6, sl, fp, pc}
   15520:	bl	15a84 <__assert_fail@plt+0x4710>
   15524:	push	{fp, lr}
   15528:	mov	fp, sp
   1552c:	bl	163cc <__assert_fail@plt+0x5058>
   15530:	cmp	r0, #0
   15534:	popne	{fp, pc}
   15538:	bl	15a84 <__assert_fail@plt+0x4710>
   1553c:	push	{fp, lr}
   15540:	mov	fp, sp
   15544:	bl	163cc <__assert_fail@plt+0x5058>
   15548:	cmp	r0, #0
   1554c:	popne	{fp, pc}
   15550:	bl	15a84 <__assert_fail@plt+0x4710>
   15554:	push	{fp, lr}
   15558:	mov	fp, sp
   1555c:	bl	163cc <__assert_fail@plt+0x5058>
   15560:	cmp	r0, #0
   15564:	popne	{fp, pc}
   15568:	bl	15a84 <__assert_fail@plt+0x4710>
   1556c:	push	{r4, r5, fp, lr}
   15570:	add	fp, sp, #8
   15574:	mov	r4, r1
   15578:	mov	r5, r0
   1557c:	bl	163fc <__assert_fail@plt+0x5088>
   15580:	cmp	r0, #0
   15584:	popne	{r4, r5, fp, pc}
   15588:	cmp	r5, #0
   1558c:	beq	1559c <__assert_fail@plt+0x4228>
   15590:	cmp	r4, #0
   15594:	bne	1559c <__assert_fail@plt+0x4228>
   15598:	pop	{r4, r5, fp, pc}
   1559c:	bl	15a84 <__assert_fail@plt+0x4710>
   155a0:	push	{fp, lr}
   155a4:	mov	fp, sp
   155a8:	cmp	r1, #0
   155ac:	orreq	r1, r1, #1
   155b0:	bl	163fc <__assert_fail@plt+0x5088>
   155b4:	cmp	r0, #0
   155b8:	popne	{fp, pc}
   155bc:	bl	15a84 <__assert_fail@plt+0x4710>
   155c0:	push	{fp, lr}
   155c4:	mov	fp, sp
   155c8:	clz	r3, r2
   155cc:	lsr	ip, r3, #5
   155d0:	clz	r3, r1
   155d4:	lsr	r3, r3, #5
   155d8:	orrs	r3, r3, ip
   155dc:	movwne	r1, #1
   155e0:	movwne	r2, #1
   155e4:	bl	16980 <__assert_fail@plt+0x560c>
   155e8:	cmp	r0, #0
   155ec:	popne	{fp, pc}
   155f0:	bl	15a84 <__assert_fail@plt+0x4710>
   155f4:	push	{fp, lr}
   155f8:	mov	fp, sp
   155fc:	mov	r2, r1
   15600:	mov	r1, r0
   15604:	mov	r0, #0
   15608:	bl	16980 <__assert_fail@plt+0x560c>
   1560c:	cmp	r0, #0
   15610:	popne	{fp, pc}
   15614:	bl	15a84 <__assert_fail@plt+0x4710>
   15618:	push	{fp, lr}
   1561c:	mov	fp, sp
   15620:	mov	r2, r1
   15624:	mov	r1, r0
   15628:	clz	r0, r2
   1562c:	clz	r3, r1
   15630:	lsr	r0, r0, #5
   15634:	lsr	r3, r3, #5
   15638:	orrs	r0, r3, r0
   1563c:	movwne	r1, #1
   15640:	movwne	r2, #1
   15644:	mov	r0, #0
   15648:	bl	16980 <__assert_fail@plt+0x560c>
   1564c:	cmp	r0, #0
   15650:	popne	{fp, pc}
   15654:	bl	15a84 <__assert_fail@plt+0x4710>
   15658:	push	{r4, r5, r6, sl, fp, lr}
   1565c:	add	fp, sp, #16
   15660:	ldr	r5, [r1]
   15664:	mov	r4, r1
   15668:	mov	r6, r0
   1566c:	cmp	r0, #0
   15670:	beq	15688 <__assert_fail@plt+0x4314>
   15674:	mov	r0, #1
   15678:	add	r0, r0, r5, lsr #1
   1567c:	adds	r5, r5, r0
   15680:	bcc	15690 <__assert_fail@plt+0x431c>
   15684:	b	156cc <__assert_fail@plt+0x4358>
   15688:	cmp	r5, #0
   1568c:	movweq	r5, #64	; 0x40
   15690:	mov	r0, r6
   15694:	mov	r1, r5
   15698:	mov	r2, #1
   1569c:	bl	16980 <__assert_fail@plt+0x560c>
   156a0:	cmp	r5, #0
   156a4:	mov	r1, r5
   156a8:	movwne	r1, #1
   156ac:	cmp	r0, #0
   156b0:	bne	156c4 <__assert_fail@plt+0x4350>
   156b4:	clz	r2, r6
   156b8:	lsr	r2, r2, #5
   156bc:	orrs	r1, r2, r1
   156c0:	bne	156cc <__assert_fail@plt+0x4358>
   156c4:	str	r5, [r4]
   156c8:	pop	{r4, r5, r6, sl, fp, pc}
   156cc:	bl	15a84 <__assert_fail@plt+0x4710>
   156d0:	push	{r4, r5, r6, r7, fp, lr}
   156d4:	add	fp, sp, #16
   156d8:	ldr	r5, [r1]
   156dc:	mov	r6, r2
   156e0:	mov	r4, r1
   156e4:	mov	r7, r0
   156e8:	cmp	r0, #0
   156ec:	beq	15704 <__assert_fail@plt+0x4390>
   156f0:	mov	r0, #1
   156f4:	add	r0, r0, r5, lsr #1
   156f8:	adds	r5, r5, r0
   156fc:	bcc	1571c <__assert_fail@plt+0x43a8>
   15700:	b	15750 <__assert_fail@plt+0x43dc>
   15704:	cmp	r5, #0
   15708:	bne	1571c <__assert_fail@plt+0x43a8>
   1570c:	mov	r0, #64	; 0x40
   15710:	cmp	r6, #64	; 0x40
   15714:	udiv	r5, r0, r6
   15718:	addhi	r5, r5, #1
   1571c:	mov	r0, r7
   15720:	mov	r1, r5
   15724:	mov	r2, r6
   15728:	bl	16980 <__assert_fail@plt+0x560c>
   1572c:	cmp	r0, #0
   15730:	bne	15748 <__assert_fail@plt+0x43d4>
   15734:	cmp	r7, #0
   15738:	beq	15750 <__assert_fail@plt+0x43dc>
   1573c:	cmp	r6, #0
   15740:	cmpne	r5, #0
   15744:	bne	15750 <__assert_fail@plt+0x43dc>
   15748:	str	r5, [r4]
   1574c:	pop	{r4, r5, r6, r7, fp, pc}
   15750:	bl	15a84 <__assert_fail@plt+0x4710>
   15754:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15758:	add	fp, sp, #24
   1575c:	mov	r8, r1
   15760:	ldr	r1, [r1]
   15764:	mov	r5, r0
   15768:	add	r0, r1, r1, asr #1
   1576c:	cmp	r0, r1
   15770:	mvnvs	r0, #-2147483648	; 0x80000000
   15774:	cmp	r0, r3
   15778:	mov	r7, r0
   1577c:	movgt	r7, r3
   15780:	cmn	r3, #1
   15784:	movle	r7, r0
   15788:	ldr	r0, [fp, #8]
   1578c:	cmn	r0, #1
   15790:	ble	157b8 <__assert_fail@plt+0x4444>
   15794:	cmp	r0, #0
   15798:	beq	1580c <__assert_fail@plt+0x4498>
   1579c:	cmn	r7, #1
   157a0:	ble	157e0 <__assert_fail@plt+0x446c>
   157a4:	mvn	r4, #-2147483648	; 0x80000000
   157a8:	udiv	r6, r4, r0
   157ac:	cmp	r6, r7
   157b0:	bge	1580c <__assert_fail@plt+0x4498>
   157b4:	b	1581c <__assert_fail@plt+0x44a8>
   157b8:	cmn	r7, #1
   157bc:	ble	157fc <__assert_fail@plt+0x4488>
   157c0:	cmn	r0, #1
   157c4:	beq	1580c <__assert_fail@plt+0x4498>
   157c8:	mov	r6, #-2147483648	; 0x80000000
   157cc:	mvn	r4, #-2147483648	; 0x80000000
   157d0:	sdiv	r6, r6, r0
   157d4:	cmp	r6, r7
   157d8:	bge	1580c <__assert_fail@plt+0x4498>
   157dc:	b	1581c <__assert_fail@plt+0x44a8>
   157e0:	beq	1580c <__assert_fail@plt+0x4498>
   157e4:	mov	r6, #-2147483648	; 0x80000000
   157e8:	mvn	r4, #-2147483648	; 0x80000000
   157ec:	sdiv	r6, r6, r7
   157f0:	cmp	r6, r0
   157f4:	bge	1580c <__assert_fail@plt+0x4498>
   157f8:	b	1581c <__assert_fail@plt+0x44a8>
   157fc:	mvn	r4, #-2147483648	; 0x80000000
   15800:	sdiv	r6, r4, r0
   15804:	cmp	r7, r6
   15808:	blt	1581c <__assert_fail@plt+0x44a8>
   1580c:	mul	r6, r7, r0
   15810:	mov	r4, #64	; 0x40
   15814:	cmp	r6, #63	; 0x3f
   15818:	bgt	15824 <__assert_fail@plt+0x44b0>
   1581c:	sdiv	r7, r4, r0
   15820:	mul	r6, r7, r0
   15824:	cmp	r5, #0
   15828:	moveq	r4, #0
   1582c:	streq	r4, [r8]
   15830:	sub	r4, r7, r1
   15834:	cmp	r4, r2
   15838:	bge	158e4 <__assert_fail@plt+0x4570>
   1583c:	add	r7, r1, r2
   15840:	mov	r6, #0
   15844:	mov	r2, #0
   15848:	cmp	r7, r3
   1584c:	movwgt	r6, #1
   15850:	cmn	r3, #1
   15854:	movwgt	r2, #1
   15858:	cmp	r7, r1
   1585c:	bvs	15918 <__assert_fail@plt+0x45a4>
   15860:	ands	r1, r2, r6
   15864:	bne	15918 <__assert_fail@plt+0x45a4>
   15868:	cmn	r0, #1
   1586c:	ble	15894 <__assert_fail@plt+0x4520>
   15870:	cmp	r0, #0
   15874:	beq	158e0 <__assert_fail@plt+0x456c>
   15878:	cmn	r7, #1
   1587c:	ble	158b8 <__assert_fail@plt+0x4544>
   15880:	mvn	r1, #-2147483648	; 0x80000000
   15884:	udiv	r1, r1, r0
   15888:	cmp	r1, r7
   1588c:	bge	158e0 <__assert_fail@plt+0x456c>
   15890:	b	15918 <__assert_fail@plt+0x45a4>
   15894:	cmn	r7, #1
   15898:	ble	158d0 <__assert_fail@plt+0x455c>
   1589c:	cmn	r0, #1
   158a0:	beq	158e0 <__assert_fail@plt+0x456c>
   158a4:	mov	r1, #-2147483648	; 0x80000000
   158a8:	sdiv	r1, r1, r0
   158ac:	cmp	r1, r7
   158b0:	bge	158e0 <__assert_fail@plt+0x456c>
   158b4:	b	15918 <__assert_fail@plt+0x45a4>
   158b8:	beq	158e0 <__assert_fail@plt+0x456c>
   158bc:	mov	r1, #-2147483648	; 0x80000000
   158c0:	sdiv	r1, r1, r7
   158c4:	cmp	r1, r0
   158c8:	bge	158e0 <__assert_fail@plt+0x456c>
   158cc:	b	15918 <__assert_fail@plt+0x45a4>
   158d0:	mvn	r1, #-2147483648	; 0x80000000
   158d4:	sdiv	r1, r1, r0
   158d8:	cmp	r7, r1
   158dc:	blt	15918 <__assert_fail@plt+0x45a4>
   158e0:	mul	r6, r7, r0
   158e4:	mov	r0, r5
   158e8:	mov	r1, r6
   158ec:	bl	163fc <__assert_fail@plt+0x5088>
   158f0:	cmp	r6, #0
   158f4:	movwne	r6, #1
   158f8:	cmp	r0, #0
   158fc:	bne	15910 <__assert_fail@plt+0x459c>
   15900:	clz	r1, r5
   15904:	lsr	r1, r1, #5
   15908:	orrs	r1, r1, r6
   1590c:	bne	15918 <__assert_fail@plt+0x45a4>
   15910:	str	r7, [r8]
   15914:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15918:	bl	15a84 <__assert_fail@plt+0x4710>
   1591c:	push	{fp, lr}
   15920:	mov	fp, sp
   15924:	mov	r1, #1
   15928:	bl	16378 <__assert_fail@plt+0x5004>
   1592c:	cmp	r0, #0
   15930:	popne	{fp, pc}
   15934:	bl	15a84 <__assert_fail@plt+0x4710>
   15938:	push	{fp, lr}
   1593c:	mov	fp, sp
   15940:	bl	16378 <__assert_fail@plt+0x5004>
   15944:	cmp	r0, #0
   15948:	popne	{fp, pc}
   1594c:	bl	15a84 <__assert_fail@plt+0x4710>
   15950:	push	{fp, lr}
   15954:	mov	fp, sp
   15958:	mov	r1, #1
   1595c:	bl	16378 <__assert_fail@plt+0x5004>
   15960:	cmp	r0, #0
   15964:	popne	{fp, pc}
   15968:	bl	15a84 <__assert_fail@plt+0x4710>
   1596c:	push	{fp, lr}
   15970:	mov	fp, sp
   15974:	bl	16378 <__assert_fail@plt+0x5004>
   15978:	cmp	r0, #0
   1597c:	popne	{fp, pc}
   15980:	bl	15a84 <__assert_fail@plt+0x4710>
   15984:	push	{r4, r5, r6, sl, fp, lr}
   15988:	add	fp, sp, #16
   1598c:	mov	r5, r0
   15990:	mov	r0, r1
   15994:	mov	r4, r1
   15998:	bl	163cc <__assert_fail@plt+0x5058>
   1599c:	cmp	r0, #0
   159a0:	beq	159bc <__assert_fail@plt+0x4648>
   159a4:	mov	r1, r5
   159a8:	mov	r2, r4
   159ac:	mov	r6, r0
   159b0:	bl	11134 <memcpy@plt>
   159b4:	mov	r0, r6
   159b8:	pop	{r4, r5, r6, sl, fp, pc}
   159bc:	bl	15a84 <__assert_fail@plt+0x4710>
   159c0:	push	{r4, r5, r6, sl, fp, lr}
   159c4:	add	fp, sp, #16
   159c8:	mov	r5, r0
   159cc:	mov	r0, r1
   159d0:	mov	r4, r1
   159d4:	bl	163cc <__assert_fail@plt+0x5058>
   159d8:	cmp	r0, #0
   159dc:	beq	159f8 <__assert_fail@plt+0x4684>
   159e0:	mov	r1, r5
   159e4:	mov	r2, r4
   159e8:	mov	r6, r0
   159ec:	bl	11134 <memcpy@plt>
   159f0:	mov	r0, r6
   159f4:	pop	{r4, r5, r6, sl, fp, pc}
   159f8:	bl	15a84 <__assert_fail@plt+0x4710>
   159fc:	push	{r4, r5, r6, sl, fp, lr}
   15a00:	add	fp, sp, #16
   15a04:	mov	r5, r0
   15a08:	add	r0, r1, #1
   15a0c:	mov	r4, r1
   15a10:	bl	163cc <__assert_fail@plt+0x5058>
   15a14:	cmp	r0, #0
   15a18:	beq	15a40 <__assert_fail@plt+0x46cc>
   15a1c:	mov	r6, r0
   15a20:	mov	r0, #0
   15a24:	mov	r1, r5
   15a28:	mov	r2, r4
   15a2c:	strb	r0, [r6, r4]
   15a30:	mov	r0, r6
   15a34:	bl	11134 <memcpy@plt>
   15a38:	mov	r0, r6
   15a3c:	pop	{r4, r5, r6, sl, fp, pc}
   15a40:	bl	15a84 <__assert_fail@plt+0x4710>
   15a44:	push	{r4, r5, r6, sl, fp, lr}
   15a48:	add	fp, sp, #16
   15a4c:	mov	r4, r0
   15a50:	bl	11260 <strlen@plt>
   15a54:	add	r5, r0, #1
   15a58:	mov	r0, r5
   15a5c:	bl	163cc <__assert_fail@plt+0x5058>
   15a60:	cmp	r0, #0
   15a64:	beq	15a80 <__assert_fail@plt+0x470c>
   15a68:	mov	r1, r4
   15a6c:	mov	r2, r5
   15a70:	mov	r6, r0
   15a74:	bl	11134 <memcpy@plt>
   15a78:	mov	r0, r6
   15a7c:	pop	{r4, r5, r6, sl, fp, pc}
   15a80:	bl	15a84 <__assert_fail@plt+0x4710>
   15a84:	push	{fp, lr}
   15a88:	mov	fp, sp
   15a8c:	movw	r0, #33048	; 0x8118
   15a90:	movw	r1, #31064	; 0x7958
   15a94:	mov	r2, #5
   15a98:	movt	r0, #2
   15a9c:	movt	r1, #1
   15aa0:	ldr	r4, [r0]
   15aa4:	mov	r0, #0
   15aa8:	bl	11158 <dcgettext@plt>
   15aac:	movw	r2, #29985	; 0x7521
   15ab0:	mov	r3, r0
   15ab4:	mov	r0, r4
   15ab8:	mov	r1, #0
   15abc:	movt	r2, #1
   15ac0:	bl	111e8 <error@plt>
   15ac4:	bl	11350 <abort@plt>
   15ac8:	push	{r4, sl, fp, lr}
   15acc:	add	fp, sp, #8
   15ad0:	bl	16714 <__assert_fail@plt+0x53a0>
   15ad4:	mov	r4, r0
   15ad8:	cmn	r0, #1
   15adc:	bne	15af0 <__assert_fail@plt+0x477c>
   15ae0:	bl	11278 <__errno_location@plt>
   15ae4:	ldr	r0, [r0]
   15ae8:	cmp	r0, #12
   15aec:	beq	15af8 <__assert_fail@plt+0x4784>
   15af0:	mov	r0, r4
   15af4:	pop	{r4, sl, fp, pc}
   15af8:	bl	15a84 <__assert_fail@plt+0x4710>
   15afc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15b00:	add	fp, sp, #28
   15b04:	sub	sp, sp, #20
   15b08:	cmp	r2, #37	; 0x25
   15b0c:	bcs	16358 <__assert_fail@plt+0x4fe4>
   15b10:	ldr	r9, [fp, #8]
   15b14:	mov	r5, r2
   15b18:	mov	r4, r1
   15b1c:	mov	r7, r0
   15b20:	str	r3, [sp, #12]
   15b24:	bl	11278 <__errno_location@plt>
   15b28:	mov	r8, r0
   15b2c:	mov	r0, #0
   15b30:	str	r0, [r8]
   15b34:	bl	1123c <__ctype_b_loc@plt>
   15b38:	ldr	r1, [r0]
   15b3c:	mov	r2, r7
   15b40:	ldrb	r0, [r2], #1
   15b44:	add	r3, r1, r0, lsl #1
   15b48:	ldrb	r3, [r3, #1]
   15b4c:	tst	r3, #32
   15b50:	bne	15b40 <__assert_fail@plt+0x47cc>
   15b54:	add	r6, sp, #16
   15b58:	cmp	r4, #0
   15b5c:	mov	sl, #4
   15b60:	movne	r6, r4
   15b64:	cmp	r0, #45	; 0x2d
   15b68:	beq	15cf4 <__assert_fail@plt+0x4980>
   15b6c:	mov	r0, r7
   15b70:	mov	r1, r6
   15b74:	mov	r2, r5
   15b78:	bl	11254 <strtoul@plt>
   15b7c:	ldr	r5, [r6]
   15b80:	cmp	r5, r7
   15b84:	beq	15ce4 <__assert_fail@plt+0x4970>
   15b88:	mov	r4, r0
   15b8c:	ldr	r0, [r8]
   15b90:	cmp	r0, #0
   15b94:	beq	15d00 <__assert_fail@plt+0x498c>
   15b98:	cmp	r0, #34	; 0x22
   15b9c:	bne	15cf4 <__assert_fail@plt+0x4980>
   15ba0:	mov	sl, #1
   15ba4:	cmp	r9, #0
   15ba8:	beq	16344 <__assert_fail@plt+0x4fd0>
   15bac:	ldrb	r7, [r5]
   15bb0:	cmp	r7, #0
   15bb4:	beq	16344 <__assert_fail@plt+0x4fd0>
   15bb8:	mov	r0, r9
   15bbc:	mov	r1, r7
   15bc0:	bl	1126c <strchr@plt>
   15bc4:	cmp	r0, #0
   15bc8:	beq	15ec4 <__assert_fail@plt+0x4b50>
   15bcc:	sub	r0, r7, #69	; 0x45
   15bd0:	mov	lr, #1
   15bd4:	mov	r8, #1024	; 0x400
   15bd8:	cmp	r0, #47	; 0x2f
   15bdc:	bhi	15d78 <__assert_fail@plt+0x4a04>
   15be0:	add	r1, pc, #0
   15be4:	ldr	pc, [r1, r0, lsl #2]
   15be8:	andeq	r5, r1, r8, lsr #25
   15bec:	andeq	r5, r1, r8, ror sp
   15bf0:	andeq	r5, r1, r8, lsr #25
   15bf4:	andeq	r5, r1, r8, ror sp
   15bf8:	andeq	r5, r1, r8, ror sp
   15bfc:	andeq	r5, r1, r8, ror sp
   15c00:	andeq	r5, r1, r8, lsr #25
   15c04:	andeq	r5, r1, r8, ror sp
   15c08:	andeq	r5, r1, r8, lsr #25
   15c0c:	andeq	r5, r1, r8, ror sp
   15c10:	andeq	r5, r1, r8, ror sp
   15c14:	andeq	r5, r1, r8, lsr #25
   15c18:	andeq	r5, r1, r8, ror sp
   15c1c:	andeq	r5, r1, r8, ror sp
   15c20:	andeq	r5, r1, r8, ror sp
   15c24:	andeq	r5, r1, r8, lsr #25
   15c28:	andeq	r5, r1, r8, ror sp
   15c2c:	andeq	r5, r1, r8, ror sp
   15c30:	andeq	r5, r1, r8, ror sp
   15c34:	andeq	r5, r1, r8, ror sp
   15c38:	andeq	r5, r1, r8, lsr #25
   15c3c:	andeq	r5, r1, r8, lsr #25
   15c40:	andeq	r5, r1, r8, ror sp
   15c44:	andeq	r5, r1, r8, ror sp
   15c48:	andeq	r5, r1, r8, ror sp
   15c4c:	andeq	r5, r1, r8, ror sp
   15c50:	andeq	r5, r1, r8, ror sp
   15c54:	andeq	r5, r1, r8, ror sp
   15c58:	andeq	r5, r1, r8, ror sp
   15c5c:	andeq	r5, r1, r8, ror sp
   15c60:	andeq	r5, r1, r8, ror sp
   15c64:	andeq	r5, r1, r8, ror sp
   15c68:	andeq	r5, r1, r8, ror sp
   15c6c:	andeq	r5, r1, r8, ror sp
   15c70:	andeq	r5, r1, r8, lsr #25
   15c74:	andeq	r5, r1, r8, ror sp
   15c78:	andeq	r5, r1, r8, ror sp
   15c7c:	andeq	r5, r1, r8, ror sp
   15c80:	andeq	r5, r1, r8, lsr #25
   15c84:	andeq	r5, r1, r8, ror sp
   15c88:	andeq	r5, r1, r8, lsr #25
   15c8c:	andeq	r5, r1, r8, ror sp
   15c90:	andeq	r5, r1, r8, ror sp
   15c94:	andeq	r5, r1, r8, ror sp
   15c98:	andeq	r5, r1, r8, ror sp
   15c9c:	andeq	r5, r1, r8, ror sp
   15ca0:	andeq	r5, r1, r8, ror sp
   15ca4:	andeq	r5, r1, r8, lsr #25
   15ca8:	mov	r0, r9
   15cac:	mov	r1, #48	; 0x30
   15cb0:	bl	1126c <strchr@plt>
   15cb4:	cmp	r0, #0
   15cb8:	beq	15d38 <__assert_fail@plt+0x49c4>
   15cbc:	ldrb	r0, [r5, #1]
   15cc0:	cmp	r0, #66	; 0x42
   15cc4:	cmpne	r0, #68	; 0x44
   15cc8:	bne	15d4c <__assert_fail@plt+0x49d8>
   15ccc:	mov	lr, #2
   15cd0:	mov	r8, #1000	; 0x3e8
   15cd4:	sub	r1, r7, #66	; 0x42
   15cd8:	cmp	r1, #53	; 0x35
   15cdc:	bls	15d84 <__assert_fail@plt+0x4a10>
   15ce0:	b	15ec4 <__assert_fail@plt+0x4b50>
   15ce4:	cmp	r9, #0
   15ce8:	ldrbne	r1, [r7]
   15cec:	cmpne	r1, #0
   15cf0:	bne	15d10 <__assert_fail@plt+0x499c>
   15cf4:	mov	r0, sl
   15cf8:	sub	sp, fp, #28
   15cfc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15d00:	mov	sl, r0
   15d04:	cmp	r9, #0
   15d08:	bne	15bac <__assert_fail@plt+0x4838>
   15d0c:	b	16344 <__assert_fail@plt+0x4fd0>
   15d10:	mov	r0, r9
   15d14:	bl	1126c <strchr@plt>
   15d18:	cmp	r0, #0
   15d1c:	beq	15cf4 <__assert_fail@plt+0x4980>
   15d20:	mov	r4, #1
   15d24:	mov	sl, #0
   15d28:	ldrb	r7, [r5]
   15d2c:	cmp	r7, #0
   15d30:	bne	15bb8 <__assert_fail@plt+0x4844>
   15d34:	b	16344 <__assert_fail@plt+0x4fd0>
   15d38:	mov	lr, #1
   15d3c:	sub	r1, r7, #66	; 0x42
   15d40:	cmp	r1, #53	; 0x35
   15d44:	bls	15d84 <__assert_fail@plt+0x4a10>
   15d48:	b	15ec4 <__assert_fail@plt+0x4b50>
   15d4c:	cmp	r0, #105	; 0x69
   15d50:	bne	15d74 <__assert_fail@plt+0x4a00>
   15d54:	ldrb	r0, [r5, #2]
   15d58:	mov	lr, #1
   15d5c:	cmp	r0, #66	; 0x42
   15d60:	movweq	lr, #3
   15d64:	sub	r1, r7, #66	; 0x42
   15d68:	cmp	r1, #53	; 0x35
   15d6c:	bls	15d84 <__assert_fail@plt+0x4a10>
   15d70:	b	15ec4 <__assert_fail@plt+0x4b50>
   15d74:	mov	lr, #1
   15d78:	sub	r1, r7, #66	; 0x42
   15d7c:	cmp	r1, #53	; 0x35
   15d80:	bhi	15ec4 <__assert_fail@plt+0x4b50>
   15d84:	add	r2, pc, #4
   15d88:	mov	r0, #0
   15d8c:	ldr	pc, [r2, r1, lsl #2]
   15d90:	andeq	r6, r1, ip, lsl #1
   15d94:	andeq	r5, r1, r4, asr #29
   15d98:	andeq	r5, r1, r4, asr #29
   15d9c:	andeq	r6, r1, r8, lsr #1
   15da0:	andeq	r5, r1, r4, asr #29
   15da4:	andeq	r5, r1, r8, ror #28
   15da8:	andeq	r5, r1, r4, asr #29
   15dac:	andeq	r5, r1, r4, asr #29
   15db0:	andeq	r5, r1, r4, asr #29
   15db4:	ldrdeq	r5, [r1], -ip
   15db8:	andeq	r5, r1, r4, asr #29
   15dbc:	strdeq	r5, [r1], -ip
   15dc0:	andeq	r5, r1, r4, asr #29
   15dc4:	andeq	r5, r1, r4, asr #29
   15dc8:	andeq	r6, r1, r0, ror #2
   15dcc:	andeq	r5, r1, r4, asr #29
   15dd0:	andeq	r5, r1, r4, asr #29
   15dd4:	andeq	r5, r1, r4, asr #29
   15dd8:	andeq	r5, r1, ip, lsr pc
   15ddc:	andeq	r5, r1, r4, asr #29
   15de0:	andeq	r5, r1, r4, asr #29
   15de4:	andeq	r5, r1, r4, asr #29
   15de8:	andeq	r5, r1, r4, asr #29
   15dec:	strdeq	r6, [r1], -ip
   15df0:			; <UNDEFINED> instruction: 0x00015fb4
   15df4:	andeq	r5, r1, r4, asr #29
   15df8:	andeq	r5, r1, r4, asr #29
   15dfc:	andeq	r5, r1, r4, asr #29
   15e00:	andeq	r5, r1, r4, asr #29
   15e04:	andeq	r5, r1, r4, asr #29
   15e08:	andeq	r5, r1, r4, asr #29
   15e0c:	andeq	r5, r1, r4, asr #29
   15e10:	strdeq	r6, [r1], -r4
   15e14:	andeq	r6, r1, ip, lsr #6
   15e18:	andeq	r5, r1, r4, asr #29
   15e1c:	andeq	r5, r1, r4, asr #29
   15e20:	andeq	r5, r1, r4, asr #29
   15e24:	andeq	r5, r1, r8, ror #28
   15e28:	andeq	r5, r1, r4, asr #29
   15e2c:	andeq	r5, r1, r4, asr #29
   15e30:	andeq	r5, r1, r4, asr #29
   15e34:	ldrdeq	r5, [r1], -ip
   15e38:	andeq	r5, r1, r4, asr #29
   15e3c:	strdeq	r5, [r1], -ip
   15e40:	andeq	r5, r1, r4, asr #29
   15e44:	andeq	r5, r1, r4, asr #29
   15e48:	andeq	r5, r1, r4, asr #29
   15e4c:	andeq	r5, r1, r4, asr #29
   15e50:	andeq	r5, r1, r4, asr #29
   15e54:	andeq	r5, r1, r4, asr #29
   15e58:	andeq	r5, r1, ip, lsr pc
   15e5c:	andeq	r5, r1, r4, asr #29
   15e60:	andeq	r5, r1, r4, asr #29
   15e64:	andeq	r6, r1, r8, lsl r3
   15e68:	mvn	r0, #0
   15e6c:	mul	r1, r4, r8
   15e70:	mov	r7, #0
   15e74:	udiv	r0, r0, r8
   15e78:	cmp	r0, r4
   15e7c:	mvncc	r1, #0
   15e80:	mul	r2, r1, r8
   15e84:	cmp	r0, r1
   15e88:	mvncc	r2, #0
   15e8c:	cmp	r0, r2
   15e90:	mul	r3, r2, r8
   15e94:	mov	r2, #0
   15e98:	mvncc	r3, #0
   15e9c:	movwcc	r7, #1
   15ea0:	cmp	r0, r1
   15ea4:	mov	r1, #0
   15ea8:	movwcc	r1, #1
   15eac:	cmp	r0, r4
   15eb0:	mov	r4, r3
   15eb4:	movwcc	r2, #1
   15eb8:	orr	r0, r2, r1
   15ebc:	orr	r0, r0, r7
   15ec0:	b	1632c <__assert_fail@plt+0x4fb8>
   15ec4:	ldr	r0, [sp, #12]
   15ec8:	orr	sl, sl, #2
   15ecc:	str	r4, [r0]
   15ed0:	mov	r0, sl
   15ed4:	sub	sp, fp, #28
   15ed8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15edc:	mvn	r0, #0
   15ee0:	mul	r1, r4, r8
   15ee4:	udiv	r0, r0, r8
   15ee8:	cmp	r0, r4
   15eec:	mov	r0, #0
   15ef0:	mvncc	r1, #0
   15ef4:	movwcc	r0, #1
   15ef8:	b	16328 <__assert_fail@plt+0x4fb4>
   15efc:	mvn	r0, #0
   15f00:	mul	r1, r4, r8
   15f04:	mov	r3, #0
   15f08:	udiv	r0, r0, r8
   15f0c:	cmp	r0, r4
   15f10:	mvncc	r1, #0
   15f14:	cmp	r0, r1
   15f18:	mul	r2, r1, r8
   15f1c:	mov	r1, #0
   15f20:	mvncc	r2, #0
   15f24:	movwcc	r3, #1
   15f28:	cmp	r0, r4
   15f2c:	movwcc	r1, #1
   15f30:	mov	r4, r2
   15f34:	orr	r0, r1, r3
   15f38:	b	1632c <__assert_fail@plt+0x4fb8>
   15f3c:	mvn	r0, #0
   15f40:	mul	r1, r4, r8
   15f44:	mov	r7, #0
   15f48:	udiv	r0, r0, r8
   15f4c:	cmp	r0, r4
   15f50:	mvncc	r1, #0
   15f54:	mul	r2, r1, r8
   15f58:	cmp	r0, r1
   15f5c:	mvncc	r2, #0
   15f60:	mul	r3, r2, r8
   15f64:	cmp	r0, r2
   15f68:	mvncc	r3, #0
   15f6c:	cmp	r0, r3
   15f70:	mul	ip, r3, r8
   15f74:	mov	r3, #0
   15f78:	mvncc	ip, #0
   15f7c:	movwcc	r7, #1
   15f80:	cmp	r0, r2
   15f84:	mov	r2, #0
   15f88:	movwcc	r2, #1
   15f8c:	cmp	r0, r1
   15f90:	mov	r1, #0
   15f94:	movwcc	r1, #1
   15f98:	cmp	r0, r4
   15f9c:	mov	r4, ip
   15fa0:	movwcc	r3, #1
   15fa4:	orr	r0, r3, r1
   15fa8:	orr	r0, r0, r2
   15fac:	orr	r0, r0, r7
   15fb0:	b	1632c <__assert_fail@plt+0x4fb8>
   15fb4:	mvn	r0, #0
   15fb8:	str	lr, [sp, #8]
   15fbc:	mul	lr, r4, r8
   15fc0:	udiv	r0, r0, r8
   15fc4:	cmp	r0, r4
   15fc8:	mvncc	lr, #0
   15fcc:	mul	r9, lr, r8
   15fd0:	cmp	r0, lr
   15fd4:	mvncc	r9, #0
   15fd8:	mul	r7, r9, r8
   15fdc:	cmp	r0, r9
   15fe0:	mvncc	r7, #0
   15fe4:	mul	r3, r7, r8
   15fe8:	cmp	r0, r7
   15fec:	mvncc	r3, #0
   15ff0:	mul	r1, r3, r8
   15ff4:	cmp	r0, r3
   15ff8:	mvncc	r1, #0
   15ffc:	mul	r2, r1, r8
   16000:	cmp	r0, r1
   16004:	mvncc	r2, #0
   16008:	mul	ip, r2, r8
   1600c:	cmp	r0, r2
   16010:	mov	r8, #0
   16014:	mov	r2, #0
   16018:	mvncc	ip, #0
   1601c:	movwcc	r8, #1
   16020:	cmp	r0, r1
   16024:	mov	r1, #0
   16028:	movwcc	r1, #1
   1602c:	cmp	r0, r3
   16030:	mov	r3, #0
   16034:	movwcc	r3, #1
   16038:	cmp	r0, r7
   1603c:	mov	r7, #0
   16040:	movwcc	r7, #1
   16044:	cmp	r0, r9
   16048:	mov	r9, #0
   1604c:	movwcc	r9, #1
   16050:	cmp	r0, lr
   16054:	mov	lr, #0
   16058:	movwcc	lr, #1
   1605c:	cmp	r0, r4
   16060:	mov	r4, ip
   16064:	movwcc	r2, #1
   16068:	orr	r0, r2, lr
   1606c:	ldr	lr, [sp, #8]
   16070:	orr	r0, r0, r9
   16074:	orr	r0, r0, r7
   16078:	orr	r0, r0, r3
   1607c:	orr	r0, r0, r1
   16080:	orr	r0, r0, r8
   16084:	and	r0, r0, #1
   16088:	b	1632c <__assert_fail@plt+0x4fb8>
   1608c:	mov	r1, #0
   16090:	lsr	r0, r4, #22
   16094:	cmp	r1, r4, lsr #22
   16098:	lsl	r4, r4, #10
   1609c:	movwne	r0, #1
   160a0:	mvnne	r4, #0
   160a4:	b	1632c <__assert_fail@plt+0x4fb8>
   160a8:	mvn	r0, #0
   160ac:	mul	ip, r4, r8
   160b0:	str	lr, [sp, #8]
   160b4:	mov	r9, #0
   160b8:	udiv	r0, r0, r8
   160bc:	cmp	r0, r4
   160c0:	mvncc	ip, #0
   160c4:	mul	r2, ip, r8
   160c8:	cmp	r0, ip
   160cc:	mvncc	r2, #0
   160d0:	mul	r3, r2, r8
   160d4:	cmp	r0, r2
   160d8:	mvncc	r3, #0
   160dc:	mul	r7, r3, r8
   160e0:	cmp	r0, r3
   160e4:	mvncc	r7, #0
   160e8:	mul	r1, r7, r8
   160ec:	cmp	r0, r7
   160f0:	mvncc	r1, #0
   160f4:	mul	lr, r1, r8
   160f8:	cmp	r0, r1
   160fc:	mov	r8, #0
   16100:	mov	r1, #0
   16104:	mvncc	lr, #0
   16108:	movwcc	r8, #1
   1610c:	cmp	r0, r7
   16110:	mov	r7, #0
   16114:	movwcc	r7, #1
   16118:	cmp	r0, r3
   1611c:	mov	r3, #0
   16120:	movwcc	r3, #1
   16124:	cmp	r0, r2
   16128:	mov	r2, #0
   1612c:	movwcc	r2, #1
   16130:	cmp	r0, ip
   16134:	movwcc	r1, #1
   16138:	cmp	r0, r4
   1613c:	mov	r4, lr
   16140:	ldr	lr, [sp, #8]
   16144:	movwcc	r9, #1
   16148:	orr	r0, r9, r1
   1614c:	orr	r0, r0, r2
   16150:	orr	r0, r0, r3
   16154:	orr	r0, r0, r7
   16158:	orr	r0, r0, r8
   1615c:	b	1632c <__assert_fail@plt+0x4fb8>
   16160:	mvn	r0, #0
   16164:	mul	r1, r4, r8
   16168:	udiv	r0, r0, r8
   1616c:	cmp	r0, r4
   16170:	mvncc	r1, #0
   16174:	mul	r2, r1, r8
   16178:	cmp	r0, r1
   1617c:	mvncc	r2, #0
   16180:	mul	r3, r2, r8
   16184:	cmp	r0, r2
   16188:	mvncc	r3, #0
   1618c:	mul	r7, r3, r8
   16190:	cmp	r0, r3
   16194:	mvncc	r7, #0
   16198:	mul	ip, r7, r8
   1619c:	cmp	r0, r7
   161a0:	mov	r8, lr
   161a4:	mov	lr, #0
   161a8:	mov	r7, #0
   161ac:	mvncc	ip, #0
   161b0:	movwcc	lr, #1
   161b4:	cmp	r0, r3
   161b8:	mov	r3, #0
   161bc:	movwcc	r3, #1
   161c0:	cmp	r0, r2
   161c4:	mov	r2, #0
   161c8:	movwcc	r2, #1
   161cc:	cmp	r0, r1
   161d0:	mov	r1, #0
   161d4:	movwcc	r1, #1
   161d8:	cmp	r0, r4
   161dc:	mov	r4, ip
   161e0:	movwcc	r7, #1
   161e4:	orr	r0, r7, r1
   161e8:	orr	r0, r0, r2
   161ec:	orr	r0, r0, r3
   161f0:	orr	r0, r0, lr
   161f4:	mov	lr, r8
   161f8:	b	1632c <__assert_fail@plt+0x4fb8>
   161fc:	mvn	r0, #0
   16200:	str	lr, [sp, #8]
   16204:	mul	lr, r4, r8
   16208:	udiv	r0, r0, r8
   1620c:	cmp	r0, r4
   16210:	mvncc	lr, #0
   16214:	mul	r9, lr, r8
   16218:	cmp	r0, lr
   1621c:	mvncc	r9, #0
   16220:	mul	r7, r9, r8
   16224:	cmp	r0, r9
   16228:	mvncc	r7, #0
   1622c:	mul	r3, r7, r8
   16230:	cmp	r0, r7
   16234:	mvncc	r3, #0
   16238:	mul	r1, r3, r8
   1623c:	cmp	r0, r3
   16240:	mvncc	r1, #0
   16244:	mul	r2, r1, r8
   16248:	cmp	r0, r1
   1624c:	mvncc	r2, #0
   16250:	mul	ip, r2, r8
   16254:	cmp	r0, r2
   16258:	mvncc	ip, #0
   1625c:	mul	r8, ip, r8
   16260:	cmp	r0, ip
   16264:	mov	ip, #0
   16268:	mvncc	r8, #0
   1626c:	str	r8, [sp, #4]
   16270:	mov	r8, #0
   16274:	movwcc	r8, #1
   16278:	cmp	r0, r2
   1627c:	mov	r2, #0
   16280:	movwcc	r2, #1
   16284:	cmp	r0, r1
   16288:	mov	r1, #0
   1628c:	movwcc	r1, #1
   16290:	cmp	r0, r3
   16294:	mov	r3, #0
   16298:	movwcc	r3, #1
   1629c:	cmp	r0, r7
   162a0:	mov	r7, #0
   162a4:	movwcc	r7, #1
   162a8:	cmp	r0, r9
   162ac:	mov	r9, #0
   162b0:	movwcc	r9, #1
   162b4:	cmp	r0, lr
   162b8:	mov	lr, #0
   162bc:	movwcc	lr, #1
   162c0:	cmp	r0, r4
   162c4:	ldr	r4, [sp, #4]
   162c8:	movwcc	ip, #1
   162cc:	orr	r0, ip, lr
   162d0:	ldr	lr, [sp, #8]
   162d4:	orr	r0, r0, r9
   162d8:	orr	r0, r0, r7
   162dc:	orr	r0, r0, r3
   162e0:	orr	r0, r0, r1
   162e4:	orr	r0, r0, r2
   162e8:	orr	r0, r0, r8
   162ec:	and	r0, r0, #1
   162f0:	b	1632c <__assert_fail@plt+0x4fb8>
   162f4:	movw	r0, #65535	; 0xffff
   162f8:	movt	r0, #63	; 0x3f
   162fc:	add	r1, r0, #4194304	; 0x400000
   16300:	mov	r0, #0
   16304:	cmp	r4, r1
   16308:	lsl	r4, r4, #9
   1630c:	movwhi	r0, #1
   16310:	mvnhi	r4, #0
   16314:	b	1632c <__assert_fail@plt+0x4fb8>
   16318:	lsl	r1, r4, #1
   1631c:	cmp	r4, #0
   16320:	lsr	r0, r4, #31
   16324:	mvnlt	r1, #0
   16328:	mov	r4, r1
   1632c:	add	r1, r5, lr
   16330:	orr	sl, r0, sl
   16334:	str	r1, [r6]
   16338:	ldrb	r1, [r5, lr]
   1633c:	cmp	r1, #0
   16340:	orrne	sl, sl, #2
   16344:	ldr	r0, [sp, #12]
   16348:	str	r4, [r0]
   1634c:	mov	r0, sl
   16350:	sub	sp, fp, #28
   16354:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16358:	movw	r0, #31081	; 0x7969
   1635c:	movw	r1, #31119	; 0x798f
   16360:	movw	r3, #31135	; 0x799f
   16364:	mov	r2, #85	; 0x55
   16368:	movt	r0, #1
   1636c:	movt	r1, #1
   16370:	movt	r3, #1
   16374:	bl	11374 <__assert_fail@plt>
   16378:	clz	r2, r1
   1637c:	clz	r3, r0
   16380:	lsr	r2, r2, #5
   16384:	lsr	r3, r3, #5
   16388:	orrs	r2, r3, r2
   1638c:	movwne	r1, #1
   16390:	movwne	r0, #1
   16394:	cmp	r1, #0
   16398:	beq	163c8 <__assert_fail@plt+0x5054>
   1639c:	mvn	r2, #-2147483648	; 0x80000000
   163a0:	udiv	r2, r2, r1
   163a4:	cmp	r2, r0
   163a8:	bcs	163c8 <__assert_fail@plt+0x5054>
   163ac:	push	{fp, lr}
   163b0:	mov	fp, sp
   163b4:	bl	11278 <__errno_location@plt>
   163b8:	mov	r1, #12
   163bc:	str	r1, [r0]
   163c0:	mov	r0, #0
   163c4:	pop	{fp, pc}
   163c8:	b	110a4 <calloc@plt>
   163cc:	cmp	r0, #0
   163d0:	movweq	r0, #1
   163d4:	cmn	r0, #1
   163d8:	ble	163e0 <__assert_fail@plt+0x506c>
   163dc:	b	11200 <malloc@plt>
   163e0:	push	{fp, lr}
   163e4:	mov	fp, sp
   163e8:	bl	11278 <__errno_location@plt>
   163ec:	mov	r1, #12
   163f0:	str	r1, [r0]
   163f4:	mov	r0, #0
   163f8:	pop	{fp, pc}
   163fc:	push	{fp, lr}
   16400:	mov	fp, sp
   16404:	cmp	r0, #0
   16408:	beq	16424 <__assert_fail@plt+0x50b0>
   1640c:	cmp	r1, #0
   16410:	beq	16430 <__assert_fail@plt+0x50bc>
   16414:	cmn	r1, #1
   16418:	ble	1643c <__assert_fail@plt+0x50c8>
   1641c:	pop	{fp, lr}
   16420:	b	11164 <realloc@plt>
   16424:	mov	r0, r1
   16428:	pop	{fp, lr}
   1642c:	b	163cc <__assert_fail@plt+0x5058>
   16430:	bl	12a58 <__assert_fail@plt+0x16e4>
   16434:	mov	r0, #0
   16438:	pop	{fp, pc}
   1643c:	bl	11278 <__errno_location@plt>
   16440:	mov	r1, #12
   16444:	str	r1, [r0]
   16448:	mov	r0, #0
   1644c:	pop	{fp, pc}
   16450:	push	{r4, r5, r6, sl, fp, lr}
   16454:	add	fp, sp, #16
   16458:	mov	r4, r0
   1645c:	bl	111d0 <__fpending@plt>
   16460:	ldr	r6, [r4]
   16464:	mov	r5, r0
   16468:	mov	r0, r4
   1646c:	bl	164d4 <__assert_fail@plt+0x5160>
   16470:	tst	r6, #32
   16474:	bne	164ac <__assert_fail@plt+0x5138>
   16478:	cmp	r0, #0
   1647c:	mov	r4, r0
   16480:	mvnne	r4, #0
   16484:	cmp	r5, #0
   16488:	bne	164b8 <__assert_fail@plt+0x5144>
   1648c:	cmp	r0, #0
   16490:	beq	164b8 <__assert_fail@plt+0x5144>
   16494:	bl	11278 <__errno_location@plt>
   16498:	ldr	r0, [r0]
   1649c:	subs	r4, r0, #9
   164a0:	mvnne	r4, #0
   164a4:	mov	r0, r4
   164a8:	pop	{r4, r5, r6, sl, fp, pc}
   164ac:	mvn	r4, #0
   164b0:	cmp	r0, #0
   164b4:	beq	164c0 <__assert_fail@plt+0x514c>
   164b8:	mov	r0, r4
   164bc:	pop	{r4, r5, r6, sl, fp, pc}
   164c0:	bl	11278 <__errno_location@plt>
   164c4:	mov	r1, #0
   164c8:	str	r1, [r0]
   164cc:	mov	r0, r4
   164d0:	pop	{r4, r5, r6, sl, fp, pc}
   164d4:	push	{r4, r5, r6, sl, fp, lr}
   164d8:	add	fp, sp, #16
   164dc:	sub	sp, sp, #8
   164e0:	mov	r4, r0
   164e4:	bl	112c0 <fileno@plt>
   164e8:	cmn	r0, #1
   164ec:	ble	16560 <__assert_fail@plt+0x51ec>
   164f0:	mov	r0, r4
   164f4:	bl	11218 <__freading@plt>
   164f8:	cmp	r0, #0
   164fc:	beq	16528 <__assert_fail@plt+0x51b4>
   16500:	mov	r0, r4
   16504:	bl	112c0 <fileno@plt>
   16508:	mov	r1, #1
   1650c:	mov	r2, #0
   16510:	mov	r3, #0
   16514:	str	r1, [sp]
   16518:	bl	111ac <lseek64@plt>
   1651c:	and	r0, r0, r1
   16520:	cmn	r0, #1
   16524:	beq	16560 <__assert_fail@plt+0x51ec>
   16528:	mov	r0, r4
   1652c:	bl	16570 <__assert_fail@plt+0x51fc>
   16530:	cmp	r0, #0
   16534:	beq	16560 <__assert_fail@plt+0x51ec>
   16538:	bl	11278 <__errno_location@plt>
   1653c:	ldr	r6, [r0]
   16540:	mov	r5, r0
   16544:	mov	r0, r4
   16548:	bl	112d8 <fclose@plt>
   1654c:	cmp	r6, #0
   16550:	strne	r6, [r5]
   16554:	mvnne	r0, #0
   16558:	sub	sp, fp, #16
   1655c:	pop	{r4, r5, r6, sl, fp, pc}
   16560:	mov	r0, r4
   16564:	sub	sp, fp, #16
   16568:	pop	{r4, r5, r6, sl, fp, lr}
   1656c:	b	112d8 <fclose@plt>
   16570:	push	{r4, sl, fp, lr}
   16574:	add	fp, sp, #8
   16578:	sub	sp, sp, #8
   1657c:	mov	r4, r0
   16580:	cmp	r0, #0
   16584:	beq	165a0 <__assert_fail@plt+0x522c>
   16588:	mov	r0, r4
   1658c:	bl	11218 <__freading@plt>
   16590:	cmp	r0, #0
   16594:	ldrbne	r0, [r4, #1]
   16598:	tstne	r0, #1
   1659c:	bne	165b0 <__assert_fail@plt+0x523c>
   165a0:	mov	r0, r4
   165a4:	sub	sp, fp, #8
   165a8:	pop	{r4, sl, fp, lr}
   165ac:	b	11104 <fflush@plt>
   165b0:	mov	r0, #1
   165b4:	mov	r2, #0
   165b8:	mov	r3, #0
   165bc:	str	r0, [sp]
   165c0:	mov	r0, r4
   165c4:	bl	165d8 <__assert_fail@plt+0x5264>
   165c8:	mov	r0, r4
   165cc:	sub	sp, fp, #8
   165d0:	pop	{r4, sl, fp, lr}
   165d4:	b	11104 <fflush@plt>
   165d8:	push	{r4, r5, r6, r7, fp, lr}
   165dc:	add	fp, sp, #16
   165e0:	sub	sp, sp, #8
   165e4:	mov	r4, r0
   165e8:	ldr	r0, [r0, #4]
   165ec:	mov	r5, r3
   165f0:	mov	r6, r2
   165f4:	ldr	r1, [r4, #8]
   165f8:	cmp	r1, r0
   165fc:	bne	16618 <__assert_fail@plt+0x52a4>
   16600:	ldrd	r0, [r4, #16]
   16604:	cmp	r1, r0
   16608:	bne	16618 <__assert_fail@plt+0x52a4>
   1660c:	ldr	r0, [r4, #36]	; 0x24
   16610:	cmp	r0, #0
   16614:	beq	16630 <__assert_fail@plt+0x52bc>
   16618:	mov	r0, r4
   1661c:	mov	r2, r6
   16620:	mov	r3, r5
   16624:	sub	sp, fp, #16
   16628:	pop	{r4, r5, r6, r7, fp, lr}
   1662c:	b	112e4 <fseeko64@plt>
   16630:	ldr	r7, [fp, #8]
   16634:	mov	r0, r4
   16638:	bl	112c0 <fileno@plt>
   1663c:	mov	r2, r6
   16640:	mov	r3, r5
   16644:	str	r7, [sp]
   16648:	bl	111ac <lseek64@plt>
   1664c:	and	r2, r0, r1
   16650:	cmn	r2, #1
   16654:	mvneq	r0, #0
   16658:	subeq	sp, fp, #16
   1665c:	popeq	{r4, r5, r6, r7, fp, pc}
   16660:	strd	r0, [r4, #80]	; 0x50
   16664:	ldr	r0, [r4]
   16668:	bic	r0, r0, #16
   1666c:	str	r0, [r4]
   16670:	mov	r0, #0
   16674:	sub	sp, fp, #16
   16678:	pop	{r4, r5, r6, r7, fp, pc}
   1667c:	push	{fp, lr}
   16680:	mov	fp, sp
   16684:	mov	r0, #14
   16688:	bl	11320 <nl_langinfo@plt>
   1668c:	movw	r1, #28023	; 0x6d77
   16690:	cmp	r0, #0
   16694:	movt	r1, #1
   16698:	movne	r1, r0
   1669c:	movw	r0, #31216	; 0x79f0
   166a0:	ldrb	r2, [r1]
   166a4:	movt	r0, #1
   166a8:	cmp	r2, #0
   166ac:	movne	r0, r1
   166b0:	pop	{fp, pc}
   166b4:	push	{r4, r5, r6, r7, fp, lr}
   166b8:	add	fp, sp, #16
   166bc:	sub	sp, sp, #8
   166c0:	add	r5, sp, #4
   166c4:	cmp	r0, #0
   166c8:	mov	r7, r2
   166cc:	mov	r4, r1
   166d0:	movne	r5, r0
   166d4:	mov	r0, r5
   166d8:	bl	111dc <mbrtowc@plt>
   166dc:	mov	r6, r0
   166e0:	cmp	r7, #0
   166e4:	beq	16708 <__assert_fail@plt+0x5394>
   166e8:	cmn	r6, #2
   166ec:	bcc	16708 <__assert_fail@plt+0x5394>
   166f0:	mov	r0, #0
   166f4:	bl	169bc <__assert_fail@plt+0x5648>
   166f8:	cmp	r0, #0
   166fc:	ldrbeq	r0, [r4]
   16700:	moveq	r6, #1
   16704:	streq	r0, [r5]
   16708:	mov	r0, r6
   1670c:	sub	sp, fp, #16
   16710:	pop	{r4, r5, r6, r7, fp, pc}
   16714:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16718:	add	fp, sp, #28
   1671c:	sub	sp, sp, #12
   16720:	mov	sl, r2
   16724:	mov	r6, r1
   16728:	cmp	r0, #0
   1672c:	beq	167d8 <__assert_fail@plt+0x5464>
   16730:	mov	r7, r0
   16734:	mov	r8, #10
   16738:	mov	r0, #0
   1673c:	mov	r1, #40	; 0x28
   16740:	str	r8, [sp, #8]
   16744:	bl	163fc <__assert_fail@plt+0x5088>
   16748:	mvn	r9, #0
   1674c:	cmp	r0, #0
   16750:	beq	16884 <__assert_fail@plt+0x5510>
   16754:	str	sl, [sp, #4]
   16758:	mov	r5, r0
   1675c:	add	sl, sp, #8
   16760:	b	1676c <__assert_fail@plt+0x53f8>
   16764:	ldr	r8, [sp, #8]
   16768:	mov	r5, r0
   1676c:	mov	r0, r7
   16770:	mov	r1, r6
   16774:	mov	r2, r5
   16778:	mov	r3, sl
   1677c:	bl	1129c <getgrouplist@plt>
   16780:	mov	r4, r0
   16784:	ldr	r0, [sp, #8]
   16788:	cmn	r4, #1
   1678c:	bgt	1679c <__assert_fail@plt+0x5428>
   16790:	cmp	r8, r0
   16794:	lsleq	r0, r8, #1
   16798:	streq	r0, [sp, #8]
   1679c:	cmp	r0, #536870912	; 0x20000000
   167a0:	bcs	16870 <__assert_fail@plt+0x54fc>
   167a4:	lsl	r1, r0, #2
   167a8:	mov	r0, r5
   167ac:	bl	163fc <__assert_fail@plt+0x5088>
   167b0:	cmp	r0, #0
   167b4:	beq	1687c <__assert_fail@plt+0x5508>
   167b8:	cmn	r4, #1
   167bc:	ble	16764 <__assert_fail@plt+0x53f0>
   167c0:	ldr	r1, [sp, #4]
   167c4:	str	r0, [r1]
   167c8:	ldr	r9, [sp, #8]
   167cc:	mov	r0, r9
   167d0:	sub	sp, fp, #28
   167d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   167d8:	mov	r0, #0
   167dc:	mov	r1, #0
   167e0:	bl	1132c <getgroups@plt>
   167e4:	cmn	r0, #1
   167e8:	str	r0, [sp, #8]
   167ec:	ble	16828 <__assert_fail@plt+0x54b4>
   167f0:	mov	r4, r0
   167f4:	cmn	r6, #1
   167f8:	bne	16890 <__assert_fail@plt+0x551c>
   167fc:	cmp	r4, #0
   16800:	beq	16890 <__assert_fail@plt+0x551c>
   16804:	cmp	r4, #536870912	; 0x20000000
   16808:	bcc	168a0 <__assert_fail@plt+0x552c>
   1680c:	bl	11278 <__errno_location@plt>
   16810:	mov	r1, #12
   16814:	mvn	r9, #0
   16818:	str	r1, [r0]
   1681c:	mov	r0, r9
   16820:	sub	sp, fp, #28
   16824:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16828:	bl	11278 <__errno_location@plt>
   1682c:	ldr	r0, [r0]
   16830:	mvn	r9, #0
   16834:	cmp	r0, #38	; 0x26
   16838:	bne	16884 <__assert_fail@plt+0x5510>
   1683c:	mov	r0, #0
   16840:	mov	r1, #4
   16844:	bl	163fc <__assert_fail@plt+0x5088>
   16848:	cmp	r0, #0
   1684c:	beq	16884 <__assert_fail@plt+0x5510>
   16850:	add	r9, r6, #1
   16854:	cmn	r6, #1
   16858:	str	r0, [sl]
   1685c:	str	r6, [r0]
   16860:	movwne	r9, #1
   16864:	mov	r0, r9
   16868:	sub	sp, fp, #28
   1686c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16870:	bl	11278 <__errno_location@plt>
   16874:	mov	r1, #12
   16878:	str	r1, [r0]
   1687c:	mov	r0, r5
   16880:	bl	12a58 <__assert_fail@plt+0x16e4>
   16884:	mov	r0, r9
   16888:	sub	sp, fp, #28
   1688c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16890:	add	r4, r4, #1
   16894:	str	r4, [sp, #8]
   16898:	cmp	r4, #536870912	; 0x20000000
   1689c:	bcs	1680c <__assert_fail@plt+0x5498>
   168a0:	lsl	r1, r4, #2
   168a4:	mov	r0, #0
   168a8:	bl	163fc <__assert_fail@plt+0x5088>
   168ac:	mvn	r9, #0
   168b0:	cmp	r0, #0
   168b4:	beq	16884 <__assert_fail@plt+0x5510>
   168b8:	add	r1, r6, #1
   168bc:	cmn	r6, #1
   168c0:	mov	r7, r0
   168c4:	movwne	r1, #1
   168c8:	sub	r0, r4, r1
   168cc:	add	r1, r7, r1, lsl #2
   168d0:	bl	1132c <getgroups@plt>
   168d4:	cmn	r0, #1
   168d8:	ble	1694c <__assert_fail@plt+0x55d8>
   168dc:	cmn	r6, #1
   168e0:	addne	r0, r0, #1
   168e4:	strne	r6, [r7]
   168e8:	str	r7, [sl]
   168ec:	cmp	r0, #2
   168f0:	blt	16960 <__assert_fail@plt+0x55ec>
   168f4:	mov	r2, r7
   168f8:	add	r1, r7, r0, lsl #2
   168fc:	ldr	r6, [r2], #4
   16900:	cmp	r1, r2
   16904:	bls	16970 <__assert_fail@plt+0x55fc>
   16908:	mov	r3, r6
   1690c:	mov	r9, r0
   16910:	ldr	r0, [r2]
   16914:	cmp	r0, r6
   16918:	cmpne	r0, r3
   1691c:	bne	16934 <__assert_fail@plt+0x55c0>
   16920:	sub	r9, r9, #1
   16924:	add	r2, r2, #4
   16928:	cmp	r2, r1
   1692c:	bcc	16910 <__assert_fail@plt+0x559c>
   16930:	b	16884 <__assert_fail@plt+0x5510>
   16934:	str	r0, [r7, #4]!
   16938:	mov	r3, r0
   1693c:	add	r2, r2, #4
   16940:	cmp	r2, r1
   16944:	bcc	16910 <__assert_fail@plt+0x559c>
   16948:	b	16884 <__assert_fail@plt+0x5510>
   1694c:	mov	r0, r7
   16950:	bl	12a58 <__assert_fail@plt+0x16e4>
   16954:	mov	r0, r9
   16958:	sub	sp, fp, #28
   1695c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16960:	mov	r9, r0
   16964:	mov	r0, r9
   16968:	sub	sp, fp, #28
   1696c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16970:	mov	r9, r0
   16974:	mov	r0, r9
   16978:	sub	sp, fp, #28
   1697c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16980:	cmp	r2, #0
   16984:	beq	169b4 <__assert_fail@plt+0x5640>
   16988:	mvn	r3, #0
   1698c:	udiv	r3, r3, r2
   16990:	cmp	r3, r1
   16994:	bcs	169b4 <__assert_fail@plt+0x5640>
   16998:	push	{fp, lr}
   1699c:	mov	fp, sp
   169a0:	bl	11278 <__errno_location@plt>
   169a4:	mov	r1, #12
   169a8:	str	r1, [r0]
   169ac:	mov	r0, #0
   169b0:	pop	{fp, pc}
   169b4:	mul	r1, r2, r1
   169b8:	b	163fc <__assert_fail@plt+0x5088>
   169bc:	push	{r4, sl, fp, lr}
   169c0:	add	fp, sp, #8
   169c4:	sub	sp, sp, #264	; 0x108
   169c8:	add	r1, sp, #7
   169cc:	movw	r2, #257	; 0x101
   169d0:	bl	16a20 <__assert_fail@plt+0x56ac>
   169d4:	mov	r4, #0
   169d8:	cmp	r0, #0
   169dc:	bne	16a14 <__assert_fail@plt+0x56a0>
   169e0:	movw	r1, #31222	; 0x79f6
   169e4:	add	r0, sp, #7
   169e8:	movt	r1, #1
   169ec:	bl	110ec <strcmp@plt>
   169f0:	cmp	r0, #0
   169f4:	beq	16a14 <__assert_fail@plt+0x56a0>
   169f8:	movw	r1, #31224	; 0x79f8
   169fc:	add	r0, sp, #7
   16a00:	movt	r1, #1
   16a04:	bl	110ec <strcmp@plt>
   16a08:	mov	r4, r0
   16a0c:	cmp	r0, #0
   16a10:	movwne	r4, #1
   16a14:	mov	r0, r4
   16a18:	sub	sp, fp, #8
   16a1c:	pop	{r4, sl, fp, pc}
   16a20:	push	{r4, r5, r6, r7, fp, lr}
   16a24:	add	fp, sp, #16
   16a28:	mov	r4, r1
   16a2c:	mov	r1, #0
   16a30:	mov	r6, r2
   16a34:	bl	112fc <setlocale@plt>
   16a38:	cmp	r0, #0
   16a3c:	beq	16a6c <__assert_fail@plt+0x56f8>
   16a40:	mov	r7, r0
   16a44:	bl	11260 <strlen@plt>
   16a48:	cmp	r0, r6
   16a4c:	bcs	16a8c <__assert_fail@plt+0x5718>
   16a50:	add	r2, r0, #1
   16a54:	mov	r0, r4
   16a58:	mov	r1, r7
   16a5c:	bl	11134 <memcpy@plt>
   16a60:	mov	r5, #0
   16a64:	mov	r0, r5
   16a68:	pop	{r4, r5, r6, r7, fp, pc}
   16a6c:	cmp	r6, #0
   16a70:	mov	r5, #22
   16a74:	movne	r0, #0
   16a78:	strbne	r0, [r4]
   16a7c:	movne	r0, r5
   16a80:	popne	{r4, r5, r6, r7, fp, pc}
   16a84:	mov	r0, r5
   16a88:	pop	{r4, r5, r6, r7, fp, pc}
   16a8c:	mov	r5, #34	; 0x22
   16a90:	cmp	r6, #0
   16a94:	beq	16ab4 <__assert_fail@plt+0x5740>
   16a98:	sub	r6, r6, #1
   16a9c:	mov	r0, r4
   16aa0:	mov	r1, r7
   16aa4:	mov	r2, r6
   16aa8:	bl	11134 <memcpy@plt>
   16aac:	mov	r0, #0
   16ab0:	strb	r0, [r4, r6]
   16ab4:	mov	r0, r5
   16ab8:	pop	{r4, r5, r6, r7, fp, pc}
   16abc:	mov	r1, #0
   16ac0:	b	112fc <setlocale@plt>
   16ac4:	cmp	r3, #0
   16ac8:	cmpeq	r2, #0
   16acc:	bne	16ae4 <__assert_fail@plt+0x5770>
   16ad0:	cmp	r1, #0
   16ad4:	cmpeq	r0, #0
   16ad8:	mvnne	r1, #0
   16adc:	mvnne	r0, #0
   16ae0:	b	16b00 <__assert_fail@plt+0x578c>
   16ae4:	sub	sp, sp, #8
   16ae8:	push	{sp, lr}
   16aec:	bl	16b10 <__assert_fail@plt+0x579c>
   16af0:	ldr	lr, [sp, #4]
   16af4:	add	sp, sp, #8
   16af8:	pop	{r2, r3}
   16afc:	bx	lr
   16b00:	push	{r1, lr}
   16b04:	mov	r0, #8
   16b08:	bl	110c8 <raise@plt>
   16b0c:	pop	{r1, pc}
   16b10:	cmp	r1, r3
   16b14:	cmpeq	r0, r2
   16b18:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16b1c:	mov	r4, r0
   16b20:	movcc	r0, #0
   16b24:	mov	r5, r1
   16b28:	ldr	lr, [sp, #36]	; 0x24
   16b2c:	movcc	r1, r0
   16b30:	bcc	16c2c <__assert_fail@plt+0x58b8>
   16b34:	cmp	r3, #0
   16b38:	clzeq	ip, r2
   16b3c:	clzne	ip, r3
   16b40:	addeq	ip, ip, #32
   16b44:	cmp	r5, #0
   16b48:	clzeq	r1, r4
   16b4c:	addeq	r1, r1, #32
   16b50:	clzne	r1, r5
   16b54:	sub	ip, ip, r1
   16b58:	sub	sl, ip, #32
   16b5c:	lsl	r9, r3, ip
   16b60:	rsb	fp, ip, #32
   16b64:	orr	r9, r9, r2, lsl sl
   16b68:	orr	r9, r9, r2, lsr fp
   16b6c:	lsl	r8, r2, ip
   16b70:	cmp	r5, r9
   16b74:	cmpeq	r4, r8
   16b78:	movcc	r0, #0
   16b7c:	movcc	r1, r0
   16b80:	bcc	16b9c <__assert_fail@plt+0x5828>
   16b84:	mov	r0, #1
   16b88:	subs	r4, r4, r8
   16b8c:	lsl	r1, r0, sl
   16b90:	orr	r1, r1, r0, lsr fp
   16b94:	lsl	r0, r0, ip
   16b98:	sbc	r5, r5, r9
   16b9c:	cmp	ip, #0
   16ba0:	beq	16c2c <__assert_fail@plt+0x58b8>
   16ba4:	lsr	r6, r8, #1
   16ba8:	orr	r6, r6, r9, lsl #31
   16bac:	lsr	r7, r9, #1
   16bb0:	mov	r2, ip
   16bb4:	b	16bd8 <__assert_fail@plt+0x5864>
   16bb8:	subs	r3, r4, r6
   16bbc:	sbc	r8, r5, r7
   16bc0:	adds	r3, r3, r3
   16bc4:	adc	r8, r8, r8
   16bc8:	adds	r4, r3, #1
   16bcc:	adc	r5, r8, #0
   16bd0:	subs	r2, r2, #1
   16bd4:	beq	16bf4 <__assert_fail@plt+0x5880>
   16bd8:	cmp	r5, r7
   16bdc:	cmpeq	r4, r6
   16be0:	bcs	16bb8 <__assert_fail@plt+0x5844>
   16be4:	adds	r4, r4, r4
   16be8:	adc	r5, r5, r5
   16bec:	subs	r2, r2, #1
   16bf0:	bne	16bd8 <__assert_fail@plt+0x5864>
   16bf4:	lsr	r3, r4, ip
   16bf8:	orr	r3, r3, r5, lsl fp
   16bfc:	lsr	r2, r5, ip
   16c00:	orr	r3, r3, r5, lsr sl
   16c04:	adds	r0, r0, r4
   16c08:	mov	r4, r3
   16c0c:	lsl	r3, r2, ip
   16c10:	orr	r3, r3, r4, lsl sl
   16c14:	lsl	ip, r4, ip
   16c18:	orr	r3, r3, r4, lsr fp
   16c1c:	adc	r1, r1, r5
   16c20:	subs	r0, r0, ip
   16c24:	mov	r5, r2
   16c28:	sbc	r1, r1, r3
   16c2c:	cmp	lr, #0
   16c30:	strdne	r4, [lr]
   16c34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16c38:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16c3c:	mov	r7, r0
   16c40:	ldr	r6, [pc, #72]	; 16c90 <__assert_fail@plt+0x591c>
   16c44:	ldr	r5, [pc, #72]	; 16c94 <__assert_fail@plt+0x5920>
   16c48:	add	r6, pc, r6
   16c4c:	add	r5, pc, r5
   16c50:	sub	r6, r6, r5
   16c54:	mov	r8, r1
   16c58:	mov	r9, r2
   16c5c:	bl	11084 <calloc@plt-0x20>
   16c60:	asrs	r6, r6, #2
   16c64:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   16c68:	mov	r4, #0
   16c6c:	add	r4, r4, #1
   16c70:	ldr	r3, [r5], #4
   16c74:	mov	r2, r9
   16c78:	mov	r1, r8
   16c7c:	mov	r0, r7
   16c80:	blx	r3
   16c84:	cmp	r6, r4
   16c88:	bne	16c6c <__assert_fail@plt+0x58f8>
   16c8c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16c90:			; <UNDEFINED> instruction: 0x000112b4
   16c94:	andeq	r1, r1, ip, lsr #5
   16c98:	bx	lr
   16c9c:	ldr	r3, [pc, #12]	; 16cb0 <__assert_fail@plt+0x593c>
   16ca0:	mov	r1, #0
   16ca4:	add	r3, pc, r3
   16ca8:	ldr	r2, [r3]
   16cac:	b	11284 <__cxa_atexit@plt>
   16cb0:	andeq	r1, r1, r0, ror #8

Disassembly of section .fini:

00016cb4 <.fini>:
   16cb4:	push	{r3, lr}
   16cb8:	pop	{r3, pc}
